
../repos/dvidelabs-flatcc-3b39ef7/samples/monster/monster:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0xbfe9]        # 40eff8 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0xbfe2]        # 40f008 <flatcc_builder_padding_base@@Base+0x4bb8>
  403026:	jmp    QWORD PTR [rip+0xbfe4]        # 40f010 <flatcc_builder_padding_base@@Base+0x4bc0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0xbfe2]        # 40f018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <puts@plt>:
  403040:	jmp    QWORD PTR [rip+0xbfda]        # 40f020 <puts@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0xbfd2]        # 40f028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0xbfca]        # 40f030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0xbfc2]        # 40f038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0xbfba]        # 40f040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memcmp@plt>:
  403090:	jmp    QWORD PTR [rip+0xbfb2]        # 40f048 <memcmp@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <strcmp@plt>:
  4030a0:	jmp    QWORD PTR [rip+0xbfaa]        # 40f050 <strcmp@GLIBC_2.2.5>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <memcpy@plt>:
  4030b0:	jmp    QWORD PTR [rip+0xbfa2]        # 40f058 <memcpy@GLIBC_2.14>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <malloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0xbf9a]        # 40f060 <malloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <realloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0xbf92]        # 40f068 <realloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <posix_memalign@plt>:
  4030e0:	jmp    QWORD PTR [rip+0xbf8a]        # 40f070 <posix_memalign@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

00000000004030f0 <_start@@Base>:
  4030f0:	endbr64 
  4030f4:	xor    ebp,ebp
  4030f6:	mov    r9,rdx
  4030f9:	pop    rsi
  4030fa:	mov    rdx,rsp
  4030fd:	and    rsp,0xfffffffffffffff0
  403101:	push   rax
  403102:	push   rsp
  403103:	mov    r8,0x409210
  40310a:	mov    rcx,0x4091a0
  403111:	mov    rdi,0x403eb0
  403118:	call   QWORD PTR [rip+0xbed2]        # 40eff0 <__libc_start_main@GLIBC_2.2.5>
  40311e:	hlt    
  40311f:	nop
  403120:	endbr64 
  403124:	ret    
  403125:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40312f:	nop
  403130:	mov    eax,0x40f088
  403135:	cmp    rax,0x40f088
  40313b:	je     403150 <_start@@Base+0x60>
  40313d:	mov    eax,0x0
  403142:	test   rax,rax
  403145:	je     403150 <_start@@Base+0x60>
  403147:	mov    edi,0x40f088
  40314c:	jmp    rax
  40314e:	xchg   ax,ax
  403150:	ret    
  403151:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40315c:	nop    DWORD PTR [rax+0x0]
  403160:	mov    esi,0x40f088
  403165:	sub    rsi,0x40f088
  40316c:	mov    rax,rsi
  40316f:	shr    rsi,0x3f
  403173:	sar    rax,0x3
  403177:	add    rsi,rax
  40317a:	sar    rsi,1
  40317d:	je     403190 <_start@@Base+0xa0>
  40317f:	mov    eax,0x0
  403184:	test   rax,rax
  403187:	je     403190 <_start@@Base+0xa0>
  403189:	mov    edi,0x40f088
  40318e:	jmp    rax
  403190:	ret    
  403191:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40319c:	nop    DWORD PTR [rax+0x0]
  4031a0:	endbr64 
  4031a4:	cmp    BYTE PTR [rip+0xbedd],0x0        # 40f088 <__bss_start@@Base>
  4031ab:	jne    4031c0 <_start@@Base+0xd0>
  4031ad:	push   rbp
  4031ae:	mov    rbp,rsp
  4031b1:	call   403130 <_start@@Base+0x40>
  4031b6:	mov    BYTE PTR [rip+0xbecb],0x1        # 40f088 <__bss_start@@Base>
  4031bd:	pop    rbp
  4031be:	ret    
  4031bf:	nop
  4031c0:	ret    
  4031c1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031cc:	nop    DWORD PTR [rax+0x0]
  4031d0:	endbr64 
  4031d4:	jmp    403160 <_start@@Base+0x70>
  4031d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004031e0 <create_monster_bottom_up@@Base>:
  4031e0:	push   rbp
  4031e1:	push   r15
  4031e3:	push   r14
  4031e5:	push   r13
  4031e7:	push   r12
  4031e9:	push   rbx
  4031ea:	sub    rsp,0x18
  4031ee:	mov    r12d,esi
  4031f1:	mov    rbx,rdi
  4031f4:	lea    rsi,[rip+0x6e15]        # 40a010 <_IO_stdin_used@@Base+0x10>
  4031fb:	call   408420 <flatcc_builder_create_string_str@@Base>
  403200:	mov    ebp,eax
  403202:	lea    rsi,[rip+0x6e0d]        # 40a016 <_IO_stdin_used@@Base+0x16>
  403209:	mov    rdi,rbx
  40320c:	call   408420 <flatcc_builder_create_string_str@@Base>
  403211:	mov    r14d,eax
  403214:	mov    esi,0x2
  403219:	mov    rdi,rbx
  40321c:	call   4061b0 <flatcc_builder_start_table@@Base>
  403221:	xor    r13d,r13d
  403224:	mov    r15d,0x0
  40322a:	test   ebp,ebp
  40322c:	je     403291 <create_monster_bottom_up@@Base+0xb1>
  40322e:	mov    r15d,0x0
  403234:	test   eax,eax
  403236:	jne    403291 <create_monster_bottom_up@@Base+0xb1>
  403238:	xor    r15d,r15d
  40323b:	xor    esi,esi
  40323d:	mov    rdi,rbx
  403240:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  403245:	test   rax,rax
  403248:	je     403291 <create_monster_bottom_up@@Base+0xb1>
  40324a:	mov    DWORD PTR [rax],ebp
  40324c:	mov    esi,0x1
  403251:	mov    edx,0x2
  403256:	mov    ecx,0x2
  40325b:	mov    rdi,rbx
  40325e:	call   407530 <flatcc_builder_table_add@@Base>
  403263:	test   rax,rax
  403266:	je     403291 <create_monster_bottom_up@@Base+0xb1>
  403268:	mov    WORD PTR [rax],0x3
  40326d:	lea    rsi,[rip+0x7178]        # 40a3ec <_IO_stdin_used@@Base+0x3ec>
  403274:	xor    edx,edx
  403276:	mov    rdi,rbx
  403279:	call   406b50 <flatcc_builder_check_required@@Base>
  40327e:	test   eax,eax
  403280:	je     403648 <create_monster_bottom_up@@Base+0x468>
  403286:	mov    rdi,rbx
  403289:	call   406bc0 <flatcc_builder_end_table@@Base>
  40328e:	mov    r15d,eax
  403291:	mov    esi,0x2
  403296:	mov    rdi,rbx
  403299:	call   4061b0 <flatcc_builder_start_table@@Base>
  40329e:	test   r14d,r14d
  4032a1:	je     403301 <create_monster_bottom_up@@Base+0x121>
  4032a3:	test   eax,eax
  4032a5:	jne    403301 <create_monster_bottom_up@@Base+0x121>
  4032a7:	xor    r13d,r13d
  4032aa:	xor    esi,esi
  4032ac:	mov    rdi,rbx
  4032af:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  4032b4:	test   rax,rax
  4032b7:	je     403301 <create_monster_bottom_up@@Base+0x121>
  4032b9:	mov    DWORD PTR [rax],r14d
  4032bc:	mov    esi,0x1
  4032c1:	mov    edx,0x2
  4032c6:	mov    ecx,0x2
  4032cb:	mov    rdi,rbx
  4032ce:	call   407530 <flatcc_builder_table_add@@Base>
  4032d3:	test   rax,rax
  4032d6:	je     403301 <create_monster_bottom_up@@Base+0x121>
  4032d8:	mov    WORD PTR [rax],0x5
  4032dd:	lea    rsi,[rip+0x7108]        # 40a3ec <_IO_stdin_used@@Base+0x3ec>
  4032e4:	xor    edx,edx
  4032e6:	mov    rdi,rbx
  4032e9:	call   406b50 <flatcc_builder_check_required@@Base>
  4032ee:	test   eax,eax
  4032f0:	je     403648 <create_monster_bottom_up@@Base+0x468>
  4032f6:	mov    rdi,rbx
  4032f9:	call   406bc0 <flatcc_builder_end_table@@Base>
  4032fe:	mov    r13d,eax
  403301:	mov    ebp,r12d
  403304:	lea    rsi,[rip+0x6d0f]        # 40a01a <_IO_stdin_used@@Base+0x1a>
  40330b:	mov    rdi,rbx
  40330e:	call   408420 <flatcc_builder_create_string_str@@Base>
  403313:	mov    r14d,eax
  403316:	movabs rax,0x706050403020100
  403320:	mov    QWORD PTR [rsp+0x8],rax
  403325:	mov    WORD PTR [rsp+0x10],0x908
  40332c:	lea    rsi,[rsp+0x8]
  403331:	mov    edx,0xa
  403336:	mov    ecx,0x1
  40333b:	mov    r8d,0x1
  403341:	mov    r9d,0xffffffff
  403347:	mov    rdi,rbx
  40334a:	call   406d50 <flatcc_builder_create_vector@@Base>
  40334f:	mov    r12d,eax
  403352:	mov    rdi,rbx
  403355:	call   405dc0 <flatcc_builder_start_offset_vector@@Base>
  40335a:	test   r15d,r15d
  40335d:	je     40336a <create_monster_bottom_up@@Base+0x18a>
  40335f:	mov    rdi,rbx
  403362:	mov    esi,r15d
  403365:	call   405780 <flatcc_builder_offset_vector_push@@Base>
  40336a:	test   r13d,r13d
  40336d:	je     40337a <create_monster_bottom_up@@Base+0x19a>
  40336f:	mov    rdi,rbx
  403372:	mov    esi,r13d
  403375:	call   405780 <flatcc_builder_offset_vector_push@@Base>
  40337a:	mov    rdi,rbx
  40337d:	call   405f80 <flatcc_builder_end_offset_vector@@Base>
  403382:	mov    r15d,eax
  403385:	xor    esi,esi
  403387:	xor    edx,edx
  403389:	xor    ecx,ecx
  40338b:	mov    rdi,rbx
  40338e:	call   404ee0 <flatcc_builder_start_buffer@@Base>
  403393:	test   ebp,ebp
  403395:	je     4034d1 <create_monster_bottom_up@@Base+0x2f1>
  40339b:	test   eax,eax
  40339d:	jne    4033ac <create_monster_bottom_up@@Base+0x1cc>
  40339f:	mov    esi,0xa
  4033a4:	mov    rdi,rbx
  4033a7:	call   4061b0 <flatcc_builder_start_table@@Base>
  4033ac:	xor    esi,esi
  4033ae:	mov    edx,0xc
  4033b3:	mov    ecx,0x4
  4033b8:	mov    rdi,rbx
  4033bb:	call   407530 <flatcc_builder_table_add@@Base>
  4033c0:	test   rax,rax
  4033c3:	je     4033d9 <create_monster_bottom_up@@Base+0x1f9>
  4033c5:	movabs rcx,0x400000003f800000
  4033cf:	mov    QWORD PTR [rax],rcx
  4033d2:	mov    DWORD PTR [rax+0x8],0x40400000
  4033d9:	mov    esi,0x2
  4033de:	mov    edx,0x2
  4033e3:	mov    ecx,0x2
  4033e8:	mov    rdi,rbx
  4033eb:	call   407530 <flatcc_builder_table_add@@Base>
  4033f0:	test   rax,rax
  4033f3:	je     4033fa <create_monster_bottom_up@@Base+0x21a>
  4033f5:	mov    WORD PTR [rax],0x12c
  4033fa:	test   r14d,r14d
  4033fd:	je     403414 <create_monster_bottom_up@@Base+0x234>
  4033ff:	mov    esi,0x3
  403404:	mov    rdi,rbx
  403407:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  40340c:	test   rax,rax
  40340f:	je     403414 <create_monster_bottom_up@@Base+0x234>
  403411:	mov    DWORD PTR [rax],r14d
  403414:	test   r12d,r12d
  403417:	je     40342e <create_monster_bottom_up@@Base+0x24e>
  403419:	mov    esi,0x5
  40341e:	mov    rdi,rbx
  403421:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  403426:	test   rax,rax
  403429:	je     40342e <create_monster_bottom_up@@Base+0x24e>
  40342b:	mov    DWORD PTR [rax],r12d
  40342e:	mov    esi,0x6
  403433:	mov    edx,0x1
  403438:	mov    ecx,0x1
  40343d:	mov    rdi,rbx
  403440:	call   407530 <flatcc_builder_table_add@@Base>
  403445:	test   rax,rax
  403448:	je     40344d <create_monster_bottom_up@@Base+0x26d>
  40344a:	mov    BYTE PTR [rax],0x0
  40344d:	test   r15d,r15d
  403450:	je     403467 <create_monster_bottom_up@@Base+0x287>
  403452:	mov    esi,0x7
  403457:	mov    rdi,rbx
  40345a:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  40345f:	test   rax,rax
  403462:	je     403467 <create_monster_bottom_up@@Base+0x287>
  403464:	mov    DWORD PTR [rax],r15d
  403467:	test   r13d,r13d
  40346a:	je     4034a4 <create_monster_bottom_up@@Base+0x2c4>
  40346c:	mov    esi,0x8
  403471:	mov    edx,0x1
  403476:	mov    ecx,0x1
  40347b:	mov    rdi,rbx
  40347e:	call   407530 <flatcc_builder_table_add@@Base>
  403483:	test   rax,rax
  403486:	je     4034a4 <create_monster_bottom_up@@Base+0x2c4>
  403488:	mov    rbp,rax
  40348b:	mov    esi,0x9
  403490:	mov    rdi,rbx
  403493:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  403498:	test   rax,rax
  40349b:	je     4034a4 <create_monster_bottom_up@@Base+0x2c4>
  40349d:	mov    BYTE PTR [rbp+0x0],0x1
  4034a1:	mov    DWORD PTR [rax],r13d
  4034a4:	lea    rsi,[rip+0x6f43]        # 40a3ee <_IO_stdin_used@@Base+0x3ee>
  4034ab:	xor    edx,edx
  4034ad:	mov    rdi,rbx
  4034b0:	call   406b50 <flatcc_builder_check_required@@Base>
  4034b5:	test   eax,eax
  4034b7:	je     403629 <create_monster_bottom_up@@Base+0x449>
  4034bd:	mov    rdi,rbx
  4034c0:	call   406bc0 <flatcc_builder_end_table@@Base>
  4034c5:	mov    rdi,rbx
  4034c8:	mov    esi,eax
  4034ca:	call   405100 <flatcc_builder_end_buffer@@Base>
  4034cf:	jmp    4034d5 <create_monster_bottom_up@@Base+0x2f5>
  4034d1:	test   eax,eax
  4034d3:	je     4034e6 <create_monster_bottom_up@@Base+0x306>
  4034d5:	xor    eax,eax
  4034d7:	add    rsp,0x18
  4034db:	pop    rbx
  4034dc:	pop    r12
  4034de:	pop    r13
  4034e0:	pop    r14
  4034e2:	pop    r15
  4034e4:	pop    rbp
  4034e5:	ret    
  4034e6:	mov    esi,0xa
  4034eb:	mov    rdi,rbx
  4034ee:	call   4061b0 <flatcc_builder_start_table@@Base>
  4034f3:	xor    ebp,ebp
  4034f5:	test   eax,eax
  4034f7:	je     403500 <create_monster_bottom_up@@Base+0x320>
  4034f9:	mov    rdi,rbx
  4034fc:	mov    esi,ebp
  4034fe:	jmp    4034ca <create_monster_bottom_up@@Base+0x2ea>
  403500:	xor    ebp,ebp
  403502:	xor    esi,esi
  403504:	mov    edx,0xc
  403509:	mov    ecx,0x4
  40350e:	mov    rdi,rbx
  403511:	call   407530 <flatcc_builder_table_add@@Base>
  403516:	test   rax,rax
  403519:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  40351b:	movabs rcx,0x400000003f800000
  403525:	mov    QWORD PTR [rax],rcx
  403528:	mov    DWORD PTR [rax+0x8],0x40400000
  40352f:	test   r14d,r14d
  403532:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  403534:	mov    esi,0x3
  403539:	mov    rdi,rbx
  40353c:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  403541:	test   rax,rax
  403544:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  403546:	mov    DWORD PTR [rax],r14d
  403549:	test   r12d,r12d
  40354c:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  40354e:	mov    esi,0x5
  403553:	mov    rdi,rbx
  403556:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  40355b:	test   rax,rax
  40355e:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  403560:	mov    DWORD PTR [rax],r12d
  403563:	test   r15d,r15d
  403566:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  403568:	mov    esi,0x7
  40356d:	mov    rdi,rbx
  403570:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  403575:	test   rax,rax
  403578:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  40357e:	mov    DWORD PTR [rax],r15d
  403581:	mov    esi,0x9
  403586:	mov    rdi,rbx
  403589:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  40358e:	test   rax,rax
  403591:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  403597:	mov    DWORD PTR [rax],r13d
  40359a:	mov    esi,0x2
  40359f:	mov    edx,0x2
  4035a4:	mov    ecx,0x2
  4035a9:	mov    rdi,rbx
  4035ac:	call   407530 <flatcc_builder_table_add@@Base>
  4035b1:	test   rax,rax
  4035b4:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  4035ba:	mov    WORD PTR [rax],0x12c
  4035bf:	mov    esi,0x6
  4035c4:	mov    edx,0x1
  4035c9:	mov    ecx,0x1
  4035ce:	mov    rdi,rbx
  4035d1:	call   407530 <flatcc_builder_table_add@@Base>
  4035d6:	test   rax,rax
  4035d9:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  4035df:	mov    BYTE PTR [rax],0x0
  4035e2:	mov    esi,0x8
  4035e7:	mov    edx,0x1
  4035ec:	mov    ecx,0x1
  4035f1:	mov    rdi,rbx
  4035f4:	call   407530 <flatcc_builder_table_add@@Base>
  4035f9:	test   rax,rax
  4035fc:	je     4034f9 <create_monster_bottom_up@@Base+0x319>
  403602:	mov    BYTE PTR [rax],0x1
  403605:	lea    rsi,[rip+0x6de2]        # 40a3ee <_IO_stdin_used@@Base+0x3ee>
  40360c:	xor    edx,edx
  40360e:	mov    rdi,rbx
  403611:	call   406b50 <flatcc_builder_check_required@@Base>
  403616:	test   eax,eax
  403618:	je     403629 <create_monster_bottom_up@@Base+0x449>
  40361a:	mov    rdi,rbx
  40361d:	call   406bc0 <flatcc_builder_end_table@@Base>
  403622:	mov    ebp,eax
  403624:	jmp    4034f9 <create_monster_bottom_up@@Base+0x319>
  403629:	lea    rdi,[rip+0x6bdc]        # 40a20c <_IO_stdin_used@@Base+0x20c>
  403630:	lea    rsi,[rip+0x6b12]        # 40a149 <_IO_stdin_used@@Base+0x149>
  403637:	lea    rcx,[rip+0x6c6d]        # 40a2ab <_IO_stdin_used@@Base+0x2ab>
  40363e:	mov    edx,0x32
  403643:	call   403060 <__assert_fail@plt>
  403648:	lea    rdi,[rip+0x6a5e]        # 40a0ad <_IO_stdin_used@@Base+0xad>
  40364f:	lea    rsi,[rip+0x6af3]        # 40a149 <_IO_stdin_used@@Base+0x149>
  403656:	lea    rcx,[rip+0x6b62]        # 40a1bf <_IO_stdin_used@@Base+0x1bf>
  40365d:	mov    edx,0x34
  403662:	call   403060 <__assert_fail@plt>
  403667:	nop    WORD PTR [rax+rax*1+0x0]

0000000000403670 <create_monster_top_down@@Base>:
  403670:	push   rbp
  403671:	push   r14
  403673:	push   rbx
  403674:	sub    rsp,0x10
  403678:	mov    rbx,rdi
  40367b:	movabs rax,0x706050403020100
  403685:	mov    QWORD PTR [rsp],rax
  403689:	mov    WORD PTR [rsp+0x8],0x908
  403690:	xor    esi,esi
  403692:	xor    edx,edx
  403694:	xor    ecx,ecx
  403696:	call   404ee0 <flatcc_builder_start_buffer@@Base>
  40369b:	test   eax,eax
  40369d:	jne    4036ac <create_monster_top_down@@Base+0x3c>
  40369f:	mov    esi,0xa
  4036a4:	mov    rdi,rbx
  4036a7:	call   4061b0 <flatcc_builder_start_table@@Base>
  4036ac:	xor    esi,esi
  4036ae:	mov    edx,0xc
  4036b3:	mov    ecx,0x4
  4036b8:	mov    rdi,rbx
  4036bb:	call   407530 <flatcc_builder_table_add@@Base>
  4036c0:	test   rax,rax
  4036c3:	je     4036d9 <create_monster_top_down@@Base+0x69>
  4036c5:	movabs rcx,0x400000003f800000
  4036cf:	mov    QWORD PTR [rax],rcx
  4036d2:	mov    DWORD PTR [rax+0x8],0x40400000
  4036d9:	mov    esi,0x2
  4036de:	mov    edx,0x2
  4036e3:	mov    ecx,0x2
  4036e8:	mov    rdi,rbx
  4036eb:	call   407530 <flatcc_builder_table_add@@Base>
  4036f0:	test   rax,rax
  4036f3:	je     4036fa <create_monster_top_down@@Base+0x8a>
  4036f5:	mov    WORD PTR [rax],0x12c
  4036fa:	lea    rsi,[rip+0x6919]        # 40a01a <_IO_stdin_used@@Base+0x1a>
  403701:	mov    rdi,rbx
  403704:	call   408420 <flatcc_builder_create_string_str@@Base>
  403709:	test   eax,eax
  40370b:	je     403723 <create_monster_top_down@@Base+0xb3>
  40370d:	mov    ebp,eax
  40370f:	mov    esi,0x3
  403714:	mov    rdi,rbx
  403717:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  40371c:	test   rax,rax
  40371f:	je     403723 <create_monster_top_down@@Base+0xb3>
  403721:	mov    DWORD PTR [rax],ebp
  403723:	mov    rsi,rsp
  403726:	mov    edx,0xa
  40372b:	mov    ecx,0x1
  403730:	mov    r8d,0x1
  403736:	mov    r9d,0xffffffff
  40373c:	mov    rdi,rbx
  40373f:	call   406d50 <flatcc_builder_create_vector@@Base>
  403744:	test   eax,eax
  403746:	je     40375e <create_monster_top_down@@Base+0xee>
  403748:	mov    ebp,eax
  40374a:	mov    esi,0x5
  40374f:	mov    rdi,rbx
  403752:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  403757:	test   rax,rax
  40375a:	je     40375e <create_monster_top_down@@Base+0xee>
  40375c:	mov    DWORD PTR [rax],ebp
  40375e:	mov    esi,0x6
  403763:	mov    edx,0x1
  403768:	mov    ecx,0x1
  40376d:	mov    rdi,rbx
  403770:	call   407530 <flatcc_builder_table_add@@Base>
  403775:	test   rax,rax
  403778:	je     40377d <create_monster_top_down@@Base+0x10d>
  40377a:	mov    BYTE PTR [rax],0x0
  40377d:	mov    rdi,rbx
  403780:	call   405dc0 <flatcc_builder_start_offset_vector@@Base>
  403785:	lea    rsi,[rip+0x6884]        # 40a010 <_IO_stdin_used@@Base+0x10>
  40378c:	mov    rdi,rbx
  40378f:	call   408420 <flatcc_builder_create_string_str@@Base>
  403794:	mov    edx,0x3
  403799:	mov    rdi,rbx
  40379c:	mov    esi,eax
  40379e:	call   403880 <create_monster_top_down@@Base+0x210>
  4037a3:	lea    rsi,[rip+0x686c]        # 40a016 <_IO_stdin_used@@Base+0x16>
  4037aa:	mov    rdi,rbx
  4037ad:	call   408420 <flatcc_builder_create_string_str@@Base>
  4037b2:	mov    edx,0x5
  4037b7:	mov    rdi,rbx
  4037ba:	mov    esi,eax
  4037bc:	call   403880 <create_monster_top_down@@Base+0x210>
  4037c1:	mov    r14d,DWORD PTR [rax]
  4037c4:	mov    rdi,rbx
  4037c7:	call   405f80 <flatcc_builder_end_offset_vector@@Base>
  4037cc:	test   eax,eax
  4037ce:	je     4037e6 <create_monster_top_down@@Base+0x176>
  4037d0:	mov    ebp,eax
  4037d2:	mov    esi,0x7
  4037d7:	mov    rdi,rbx
  4037da:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  4037df:	test   rax,rax
  4037e2:	je     4037e6 <create_monster_top_down@@Base+0x176>
  4037e4:	mov    DWORD PTR [rax],ebp
  4037e6:	test   r14d,r14d
  4037e9:	je     403823 <create_monster_top_down@@Base+0x1b3>
  4037eb:	mov    esi,0x8
  4037f0:	mov    edx,0x1
  4037f5:	mov    ecx,0x1
  4037fa:	mov    rdi,rbx
  4037fd:	call   407530 <flatcc_builder_table_add@@Base>
  403802:	test   rax,rax
  403805:	je     403823 <create_monster_top_down@@Base+0x1b3>
  403807:	mov    rbp,rax
  40380a:	mov    esi,0x9
  40380f:	mov    rdi,rbx
  403812:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  403817:	test   rax,rax
  40381a:	je     403823 <create_monster_top_down@@Base+0x1b3>
  40381c:	mov    BYTE PTR [rbp+0x0],0x1
  403820:	mov    DWORD PTR [rax],r14d
  403823:	lea    rsi,[rip+0x6bc4]        # 40a3ee <_IO_stdin_used@@Base+0x3ee>
  40382a:	xor    edx,edx
  40382c:	mov    rdi,rbx
  40382f:	call   406b50 <flatcc_builder_check_required@@Base>
  403834:	test   eax,eax
  403836:	je     403855 <create_monster_top_down@@Base+0x1e5>
  403838:	mov    rdi,rbx
  40383b:	call   406bc0 <flatcc_builder_end_table@@Base>
  403840:	mov    rdi,rbx
  403843:	mov    esi,eax
  403845:	call   405100 <flatcc_builder_end_buffer@@Base>
  40384a:	xor    eax,eax
  40384c:	add    rsp,0x10
  403850:	pop    rbx
  403851:	pop    r14
  403853:	pop    rbp
  403854:	ret    
  403855:	lea    rdi,[rip+0x69b0]        # 40a20c <_IO_stdin_used@@Base+0x20c>
  40385c:	lea    rsi,[rip+0x68e6]        # 40a149 <_IO_stdin_used@@Base+0x149>
  403863:	lea    rcx,[rip+0x6a41]        # 40a2ab <_IO_stdin_used@@Base+0x2ab>
  40386a:	mov    edx,0x32
  40386f:	call   403060 <__assert_fail@plt>
  403874:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40387e:	xchg   ax,ax
  403880:	push   rbp
  403881:	push   r14
  403883:	push   rbx
  403884:	mov    r14d,edx
  403887:	mov    ebp,esi
  403889:	mov    rbx,rdi
  40388c:	mov    esi,0x2
  403891:	call   4061b0 <flatcc_builder_start_table@@Base>
  403896:	test   ebp,ebp
  403898:	je     403904 <create_monster_top_down@@Base+0x294>
  40389a:	test   eax,eax
  40389c:	jne    403904 <create_monster_top_down@@Base+0x294>
  40389e:	xor    esi,esi
  4038a0:	mov    rdi,rbx
  4038a3:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  4038a8:	test   rax,rax
  4038ab:	je     403904 <create_monster_top_down@@Base+0x294>
  4038ad:	mov    DWORD PTR [rax],ebp
  4038af:	test   r14w,r14w
  4038b3:	je     4038d5 <create_monster_top_down@@Base+0x265>
  4038b5:	mov    esi,0x1
  4038ba:	mov    edx,0x2
  4038bf:	mov    ecx,0x2
  4038c4:	mov    rdi,rbx
  4038c7:	call   407530 <flatcc_builder_table_add@@Base>
  4038cc:	test   rax,rax
  4038cf:	je     403904 <create_monster_top_down@@Base+0x294>
  4038d1:	mov    WORD PTR [rax],r14w
  4038d5:	lea    rsi,[rip+0x6b10]        # 40a3ec <_IO_stdin_used@@Base+0x3ec>
  4038dc:	xor    edx,edx
  4038de:	mov    rdi,rbx
  4038e1:	call   406b50 <flatcc_builder_check_required@@Base>
  4038e6:	test   eax,eax
  4038e8:	je     40390b <create_monster_top_down@@Base+0x29b>
  4038ea:	mov    rdi,rbx
  4038ed:	call   406bc0 <flatcc_builder_end_table@@Base>
  4038f2:	test   eax,eax
  4038f4:	je     403904 <create_monster_top_down@@Base+0x294>
  4038f6:	mov    rdi,rbx
  4038f9:	mov    esi,eax
  4038fb:	pop    rbx
  4038fc:	pop    r14
  4038fe:	pop    rbp
  4038ff:	jmp    405780 <flatcc_builder_offset_vector_push@@Base>
  403904:	xor    eax,eax
  403906:	pop    rbx
  403907:	pop    r14
  403909:	pop    rbp
  40390a:	ret    
  40390b:	lea    rdi,[rip+0x679b]        # 40a0ad <_IO_stdin_used@@Base+0xad>
  403912:	lea    rsi,[rip+0x6830]        # 40a149 <_IO_stdin_used@@Base+0x149>
  403919:	lea    rcx,[rip+0x689f]        # 40a1bf <_IO_stdin_used@@Base+0x1bf>
  403920:	mov    edx,0x34
  403925:	call   403060 <__assert_fail@plt>
  40392a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000403930 <access_monster_buffer@@Base>:
  403930:	push   rbp
  403931:	push   r15
  403933:	push   r14
  403935:	push   r12
  403937:	push   rbx
  403938:	test   rdi,rdi
  40393b:	je     403cfa <access_monster_buffer@@Base+0x3ca>
  403941:	mov    eax,DWORD PTR [rdi]
  403943:	lea    rbx,[rdi+rax*1]
  403947:	movsxd r14,DWORD PTR [rdi+rax*1]
  40394b:	mov    rax,rbx
  40394e:	sub    rax,r14
  403951:	neg    r14
  403954:	movzx  edx,WORD PTR [rax]
  403957:	cmp    edx,0x9
  40395a:	jbe    40396d <access_monster_buffer@@Base+0x3d>
  40395c:	movzx  eax,WORD PTR [rbx+r14*1+0x8]
  403962:	test   rax,rax
  403965:	je     40397e <access_monster_buffer@@Base+0x4e>
  403967:	movzx  eax,WORD PTR [rbx+rax*1]
  40396b:	jmp    403982 <access_monster_buffer@@Base+0x52>
  40396d:	movzx  ecx,dx
  403970:	mov    ax,0x64
  403974:	cmp    ecx,0x8
  403977:	jae    403982 <access_monster_buffer@@Base+0x52>
  403979:	jmp    403cdb <access_monster_buffer@@Base+0x3ab>
  40397e:	mov    ax,0x64
  403982:	movzx  r12d,WORD PTR [rbx+r14*1+0x6]
  403988:	test   r12,r12
  40398b:	je     403994 <access_monster_buffer@@Base+0x64>
  40398d:	movzx  ecx,WORD PTR [rbx+r12*1]
  403992:	jmp    403998 <access_monster_buffer@@Base+0x68>
  403994:	mov    cx,0x96
  403998:	movzx  r15d,dx
  40399c:	xor    edi,edi
  40399e:	mov    ebp,0x0
  4039a3:	cmp    r15d,0xc
  4039a7:	jb     4039cc <access_monster_buffer@@Base+0x9c>
  4039a9:	movzx  edx,WORD PTR [rbx+r14*1+0xa]
  4039af:	test   rdx,rdx
  4039b2:	je     4039c8 <access_monster_buffer@@Base+0x98>
  4039b4:	lea    rsi,[rbx+rdx*1]
  4039b8:	mov    edx,DWORD PTR [rbx+rdx*1]
  4039bb:	lea    rdi,[rdx+rsi*1]
  4039bf:	add    rdi,0x4
  4039c3:	mov    ebp,DWORD PTR [rdx+rsi*1]
  4039c6:	jmp    4039cc <access_monster_buffer@@Base+0x9c>
  4039c8:	xor    edi,edi
  4039ca:	xor    ebp,ebp
  4039cc:	movzx  eax,ax
  4039cf:	cmp    eax,0x12c
  4039d4:	jne    403cdb <access_monster_buffer@@Base+0x3ab>
  4039da:	movzx  eax,cx
  4039dd:	cmp    eax,0x96
  4039e2:	jne    403d19 <access_monster_buffer@@Base+0x3e9>
  4039e8:	lea    rsi,[rip+0x662b]        # 40a01a <_IO_stdin_used@@Base+0x1a>
  4039ef:	call   4030a0 <strcmp@plt>
  4039f4:	test   eax,eax
  4039f6:	jne    403d38 <access_monster_buffer@@Base+0x408>
  4039fc:	cmp    rbp,0x3
  403a00:	jne    403d57 <access_monster_buffer@@Base+0x427>
  403a06:	cmp    r15d,0xa
  403a0a:	jb     403c7e <access_monster_buffer@@Base+0x34e>
  403a10:	cmp    WORD PTR [rbx+r14*1+0x8],0x0
  403a17:	je     403c7e <access_monster_buffer@@Base+0x34e>
  403a1d:	test   r12w,r12w
  403a21:	jne    403d76 <access_monster_buffer@@Base+0x446>
  403a27:	movzx  eax,WORD PTR [rbx+r14*1+0x4]
  403a2d:	test   rax,rax
  403a30:	je     403c9d <access_monster_buffer@@Base+0x36d>
  403a36:	add    rax,rbx
  403a39:	je     403c9d <access_monster_buffer@@Base+0x36d>
  403a3f:	vmovss xmm0,DWORD PTR [rax]
  403a43:	vucomiss xmm0,DWORD PTR [rip+0x65b9]        # 40a004 <_IO_stdin_used@@Base+0x4>
  403a4b:	jne    403d95 <access_monster_buffer@@Base+0x465>
  403a51:	jp     403d95 <access_monster_buffer@@Base+0x465>
  403a57:	vmovss xmm0,DWORD PTR [rax+0x4]
  403a5c:	vucomiss xmm0,DWORD PTR [rip+0x65a4]        # 40a008 <_IO_stdin_used@@Base+0x8>
  403a64:	jne    403db4 <access_monster_buffer@@Base+0x484>
  403a6a:	jp     403db4 <access_monster_buffer@@Base+0x484>
  403a70:	vmovss xmm0,DWORD PTR [rax+0x8]
  403a75:	vucomiss xmm0,DWORD PTR [rip+0x658f]        # 40a00c <_IO_stdin_used@@Base+0xc>
  403a7d:	jne    403dd3 <access_monster_buffer@@Base+0x4a3>
  403a83:	jp     403dd3 <access_monster_buffer@@Base+0x4a3>
  403a89:	cmp    r15d,0x10
  403a8d:	jb     403cbc <access_monster_buffer@@Base+0x38c>
  403a93:	movzx  eax,WORD PTR [rbx+r14*1+0xe]
  403a99:	test   rax,rax
  403a9c:	je     403cbc <access_monster_buffer@@Base+0x38c>
  403aa2:	lea    rcx,[rbx+rax*1]
  403aa6:	mov    eax,DWORD PTR [rbx+rax*1]
  403aa9:	cmp    DWORD PTR [rax+rcx*1],0xa
  403aad:	jne    403df2 <access_monster_buffer@@Base+0x4c2>
  403ab3:	cmp    BYTE PTR [rcx+rax*1+0x6],0x2
  403ab8:	jne    403e11 <access_monster_buffer@@Base+0x4e1>
  403abe:	cmp    r15d,0x14
  403ac2:	jb     403c40 <access_monster_buffer@@Base+0x310>
  403ac8:	movzx  eax,WORD PTR [rbx+r14*1+0x12]
  403ace:	test   rax,rax
  403ad1:	je     403c40 <access_monster_buffer@@Base+0x310>
  403ad7:	lea    rcx,[rbx+rax*1]
  403adb:	mov    eax,DWORD PTR [rbx+rax*1]
  403ade:	cmp    DWORD PTR [rax+rcx*1],0x2
  403ae2:	jne    403c40 <access_monster_buffer@@Base+0x310>
  403ae8:	add    rcx,rax
  403aeb:	add    rcx,0x4
  403aef:	mov    edx,DWORD PTR [rcx+0x4]
  403af2:	lea    rax,[rcx+rdx*1]
  403af6:	add    rax,0x4
  403afa:	movsxd rcx,DWORD PTR [rcx+rdx*1+0x4]
  403aff:	mov    rdx,rax
  403b02:	sub    rdx,rcx
  403b05:	movzx  edx,WORD PTR [rdx]
  403b08:	cmp    edx,0x6
  403b0b:	jb     403c5f <access_monster_buffer@@Base+0x32f>
  403b11:	neg    rcx
  403b14:	movzx  esi,WORD PTR [rax+rcx*1+0x4]
  403b19:	test   rsi,rsi
  403b1c:	je     403b2e <access_monster_buffer@@Base+0x1fe>
  403b1e:	lea    rdi,[rax+rsi*1]
  403b22:	mov    esi,DWORD PTR [rax+rsi*1]
  403b25:	add    rdi,rsi
  403b28:	add    rdi,0x4
  403b2c:	jmp    403b30 <access_monster_buffer@@Base+0x200>
  403b2e:	xor    edi,edi
  403b30:	movzx  edx,dx
  403b33:	cmp    edx,0x8
  403b36:	jb     403b50 <access_monster_buffer@@Base+0x220>
  403b38:	movzx  ecx,WORD PTR [rax+rcx*1+0x6]
  403b3d:	test   rcx,rcx
  403b40:	je     403b50 <access_monster_buffer@@Base+0x220>
  403b42:	movzx  ebp,WORD PTR [rax+rcx*1]
  403b46:	test   rdi,rdi
  403b49:	jne    403b5b <access_monster_buffer@@Base+0x22b>
  403b4b:	jmp    403c5f <access_monster_buffer@@Base+0x32f>
  403b50:	xor    ebp,ebp
  403b52:	test   rdi,rdi
  403b55:	je     403c5f <access_monster_buffer@@Base+0x32f>
  403b5b:	lea    rsi,[rip+0x64b4]        # 40a016 <_IO_stdin_used@@Base+0x16>
  403b62:	call   4030a0 <strcmp@plt>
  403b67:	test   eax,eax
  403b69:	jne    403c5f <access_monster_buffer@@Base+0x32f>
  403b6f:	movzx  eax,bp
  403b72:	cmp    eax,0x5
  403b75:	jne    403e30 <access_monster_buffer@@Base+0x500>
  403b7b:	cmp    r15d,0x16
  403b7f:	jb     403c35 <access_monster_buffer@@Base+0x305>
  403b85:	movzx  eax,WORD PTR [rbx+r14*1+0x14]
  403b8b:	test   rax,rax
  403b8e:	je     403c35 <access_monster_buffer@@Base+0x305>
  403b94:	cmp    BYTE PTR [rbx+rax*1],0x1
  403b98:	jne    403c35 <access_monster_buffer@@Base+0x305>
  403b9e:	cmp    r15d,0x18
  403ba2:	jb     403e4f <access_monster_buffer@@Base+0x51f>
  403ba8:	movzx  eax,WORD PTR [rbx+r14*1+0x16]
  403bae:	test   rax,rax
  403bb1:	je     403e4f <access_monster_buffer@@Base+0x51f>
  403bb7:	lea    rcx,[rbx+rax*1]
  403bbb:	mov    eax,DWORD PTR [rbx+rax*1]
  403bbe:	add    rax,rcx
  403bc1:	je     403e4f <access_monster_buffer@@Base+0x51f>
  403bc7:	movsxd rcx,DWORD PTR [rax]
  403bca:	mov    rdx,rax
  403bcd:	sub    rdx,rcx
  403bd0:	movzx  edx,WORD PTR [rdx]
  403bd3:	cmp    edx,0x6
  403bd6:	jb     403bf5 <access_monster_buffer@@Base+0x2c5>
  403bd8:	neg    rcx
  403bdb:	movzx  esi,WORD PTR [rax+rcx*1+0x4]
  403be0:	test   rsi,rsi
  403be3:	je     403bf9 <access_monster_buffer@@Base+0x2c9>
  403be5:	lea    rdi,[rax+rsi*1]
  403be9:	mov    esi,DWORD PTR [rax+rsi*1]
  403bec:	add    rdi,rsi
  403bef:	add    rdi,0x4
  403bf3:	jmp    403bfb <access_monster_buffer@@Base+0x2cb>
  403bf5:	xor    edi,edi
  403bf7:	jmp    403c13 <access_monster_buffer@@Base+0x2e3>
  403bf9:	xor    edi,edi
  403bfb:	movzx  edx,dx
  403bfe:	cmp    edx,0x8
  403c01:	jb     403c13 <access_monster_buffer@@Base+0x2e3>
  403c03:	movzx  ecx,WORD PTR [rax+rcx*1+0x6]
  403c08:	test   rcx,rcx
  403c0b:	je     403c13 <access_monster_buffer@@Base+0x2e3>
  403c0d:	movzx  ebx,WORD PTR [rax+rcx*1]
  403c11:	jmp    403c15 <access_monster_buffer@@Base+0x2e5>
  403c13:	xor    ebx,ebx
  403c15:	lea    rsi,[rip+0x63fa]        # 40a016 <_IO_stdin_used@@Base+0x16>
  403c1c:	call   4030a0 <strcmp@plt>
  403c21:	test   eax,eax
  403c23:	jne    403e6e <access_monster_buffer@@Base+0x53e>
  403c29:	movzx  eax,bx
  403c2c:	cmp    eax,0x5
  403c2f:	jne    403e8d <access_monster_buffer@@Base+0x55d>
  403c35:	xor    eax,eax
  403c37:	pop    rbx
  403c38:	pop    r12
  403c3a:	pop    r14
  403c3c:	pop    r15
  403c3e:	pop    rbp
  403c3f:	ret    
  403c40:	lea    rdi,[rip+0x7c5b]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403c47:	lea    rsi,[rip+0x63d0]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403c4e:	lea    rcx,[rip+0x642d]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403c55:	mov    edx,0x10f
  403c5a:	call   403060 <__assert_fail@plt>
  403c5f:	lea    rdi,[rip+0x7c3c]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403c66:	lea    rsi,[rip+0x63b1]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403c6d:	lea    rcx,[rip+0x640e]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403c74:	mov    edx,0x113
  403c79:	call   403060 <__assert_fail@plt>
  403c7e:	lea    rdi,[rip+0x7c1d]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403c85:	lea    rsi,[rip+0x6392]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403c8c:	lea    rcx,[rip+0x63ef]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403c93:	mov    edx,0xe3
  403c98:	call   403060 <__assert_fail@plt>
  403c9d:	lea    rdi,[rip+0x7bfe]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403ca4:	lea    rsi,[rip+0x6373]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403cab:	lea    rcx,[rip+0x63d0]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403cb2:	mov    edx,0xe8
  403cb7:	call   403060 <__assert_fail@plt>
  403cbc:	lea    rdi,[rip+0x7bdf]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403cc3:	lea    rsi,[rip+0x6354]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403cca:	lea    rcx,[rip+0x63b1]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403cd1:	mov    edx,0x105
  403cd6:	call   403060 <__assert_fail@plt>
  403cdb:	lea    rdi,[rip+0x7bc0]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403ce2:	lea    rsi,[rip+0x6335]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403ce9:	lea    rcx,[rip+0x6392]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403cf0:	mov    edx,0xdb
  403cf5:	call   403060 <__assert_fail@plt>
  403cfa:	lea    rdi,[rip+0x7ba1]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d01:	lea    rsi,[rip+0x6316]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d08:	lea    rcx,[rip+0x6373]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d0f:	mov    edx,0xd3
  403d14:	call   403060 <__assert_fail@plt>
  403d19:	lea    rdi,[rip+0x7b82]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d20:	lea    rsi,[rip+0x62f7]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d27:	lea    rcx,[rip+0x6354]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d2e:	mov    edx,0xdd
  403d33:	call   403060 <__assert_fail@plt>
  403d38:	lea    rdi,[rip+0x7b63]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d3f:	lea    rsi,[rip+0x62d8]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d46:	lea    rcx,[rip+0x6335]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d4d:	mov    edx,0xde
  403d52:	call   403060 <__assert_fail@plt>
  403d57:	lea    rdi,[rip+0x7b44]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d5e:	lea    rsi,[rip+0x62b9]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d65:	lea    rcx,[rip+0x6316]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d6c:	mov    edx,0xdf
  403d71:	call   403060 <__assert_fail@plt>
  403d76:	lea    rdi,[rip+0x7b25]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d7d:	lea    rsi,[rip+0x629a]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403d84:	lea    rcx,[rip+0x62f7]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403d8b:	mov    edx,0xe4
  403d90:	call   403060 <__assert_fail@plt>
  403d95:	lea    rdi,[rip+0x7b06]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403d9c:	lea    rsi,[rip+0x627b]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403da3:	lea    rcx,[rip+0x62d8]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403daa:	mov    edx,0xf0
  403daf:	call   403060 <__assert_fail@plt>
  403db4:	lea    rdi,[rip+0x7ae7]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403dbb:	lea    rsi,[rip+0x625c]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403dc2:	lea    rcx,[rip+0x62b9]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403dc9:	mov    edx,0xf1
  403dce:	call   403060 <__assert_fail@plt>
  403dd3:	lea    rdi,[rip+0x7ac8]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403dda:	lea    rsi,[rip+0x623d]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403de1:	lea    rcx,[rip+0x629a]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403de8:	mov    edx,0xf2
  403ded:	call   403060 <__assert_fail@plt>
  403df2:	lea    rdi,[rip+0x7aa9]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403df9:	lea    rsi,[rip+0x621e]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e00:	lea    rcx,[rip+0x627b]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e07:	mov    edx,0x107
  403e0c:	call   403060 <__assert_fail@plt>
  403e11:	lea    rdi,[rip+0x7a8a]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e18:	lea    rsi,[rip+0x61ff]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e1f:	lea    rcx,[rip+0x625c]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e26:	mov    edx,0x10b
  403e2b:	call   403060 <__assert_fail@plt>
  403e30:	lea    rdi,[rip+0x7a6b]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e37:	lea    rsi,[rip+0x61e0]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e3e:	lea    rcx,[rip+0x623d]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e45:	mov    edx,0x114
  403e4a:	call   403060 <__assert_fail@plt>
  403e4f:	lea    rdi,[rip+0x64a4]        # 40a2fa <_IO_stdin_used@@Base+0x2fa>
  403e56:	lea    rsi,[rip+0x64c3]        # 40a320 <_IO_stdin_used@@Base+0x320>
  403e5d:	lea    rcx,[rip+0x6531]        # 40a395 <_IO_stdin_used@@Base+0x395>
  403e64:	mov    edx,0x94
  403e69:	call   403060 <__assert_fail@plt>
  403e6e:	lea    rdi,[rip+0x7a2d]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e75:	lea    rsi,[rip+0x61a2]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e7c:	lea    rcx,[rip+0x61ff]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403e83:	mov    edx,0x11e
  403e88:	call   403060 <__assert_fail@plt>
  403e8d:	lea    rdi,[rip+0x7a0e]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  403e94:	lea    rsi,[rip+0x6183]        # 40a01e <_IO_stdin_used@@Base+0x1e>
  403e9b:	lea    rcx,[rip+0x61e0]        # 40a082 <_IO_stdin_used@@Base+0x82>
  403ea2:	mov    edx,0x11f
  403ea7:	call   403060 <__assert_fail@plt>
  403eac:	nop    DWORD PTR [rax+0x0]

0000000000403eb0 <main@@Base>:
  403eb0:	push   r15
  403eb2:	push   r14
  403eb4:	push   rbx
  403eb5:	sub    rsp,0x190
  403ebc:	lea    r15,[rsp+0x8]
  403ec1:	mov    rdi,r15
  403ec4:	call   404140 <flatcc_builder_init@@Base>
  403ec9:	xor    esi,esi
  403ecb:	mov    rdi,r15
  403ece:	call   4031e0 <create_monster_bottom_up@@Base>
  403ed3:	mov    r14,rsp
  403ed6:	mov    rdi,r15
  403ed9:	mov    rsi,r14
  403edc:	call   4088c0 <flatcc_builder_finalize_aligned_buffer@@Base>
  403ee1:	mov    rdi,rax
  403ee4:	call   4089f0 <flatcc_builder_aligned_free@@Base>
  403ee9:	mov    rdi,r15
  403eec:	call   404340 <flatcc_builder_reset@@Base>
  403ef1:	mov    esi,0x1
  403ef6:	mov    rdi,r15
  403ef9:	call   4031e0 <create_monster_bottom_up@@Base>
  403efe:	mov    rdi,r15
  403f01:	mov    rsi,r14
  403f04:	call   4088c0 <flatcc_builder_finalize_aligned_buffer@@Base>
  403f09:	mov    rbx,rax
  403f0c:	mov    rdi,rax
  403f0f:	call   403930 <access_monster_buffer@@Base>
  403f14:	mov    rdi,rbx
  403f17:	call   4089f0 <flatcc_builder_aligned_free@@Base>
  403f1c:	mov    rdi,r15
  403f1f:	call   404340 <flatcc_builder_reset@@Base>
  403f24:	mov    rdi,r15
  403f27:	call   403670 <create_monster_top_down@@Base>
  403f2c:	mov    rdi,r15
  403f2f:	mov    rsi,r14
  403f32:	call   408800 <flatcc_builder_finalize_buffer@@Base>
  403f37:	mov    rbx,rax
  403f3a:	mov    rdi,rax
  403f3d:	call   403930 <access_monster_buffer@@Base>
  403f42:	mov    rdi,rbx
  403f45:	call   403030 <free@plt>
  403f4a:	mov    rdi,r15
  403f4d:	call   404500 <flatcc_builder_clear@@Base>
  403f52:	lea    rdi,[rip+0x6497]        # 40a3f0 <_IO_stdin_used@@Base+0x3f0>
  403f59:	call   403040 <puts@plt>
  403f5e:	xor    eax,eax
  403f60:	add    rsp,0x190
  403f67:	pop    rbx
  403f68:	pop    r14
  403f6a:	pop    r15
  403f6c:	ret    
  403f6d:	nop    DWORD PTR [rax]

0000000000403f70 <flatcc_builder_default_alloc@@Base>:
  403f70:	push   rbp
  403f71:	push   r15
  403f73:	push   r14
  403f75:	push   r12
  403f77:	push   rbx
  403f78:	mov    rbx,rsi
  403f7b:	test   rdx,rdx
  403f7e:	je     403fa9 <flatcc_builder_default_alloc@@Base+0x39>
  403f80:	mov    r14d,ecx
  403f83:	add    r8d,0xffffffff
  403f87:	cmp    r8d,0x6
  403f8b:	ja     403fc7 <flatcc_builder_default_alloc@@Base+0x57>
  403f8d:	mov    eax,0x100
  403f92:	lea    rcx,[rip+0x6497]        # 40a430 <_IO_stdin_used@@Base+0x430>
  403f99:	movsxd rsi,DWORD PTR [rcx+r8*4]
  403f9d:	add    rsi,rcx
  403fa0:	jmp    rsi
  403fa2:	mov    eax,0x120
  403fa7:	jmp    403fe0 <flatcc_builder_default_alloc@@Base+0x70>
  403fa9:	mov    rdi,QWORD PTR [rbx]
  403fac:	xor    r15d,r15d
  403faf:	test   rdi,rdi
  403fb2:	je     404040 <flatcc_builder_default_alloc@@Base+0xd0>
  403fb8:	call   403030 <free@plt>
  403fbd:	vxorps xmm0,xmm0,xmm0
  403fc1:	vmovups XMMWORD PTR [rbx],xmm0
  403fc5:	jmp    404040 <flatcc_builder_default_alloc@@Base+0xd0>
  403fc7:	mov    eax,0x20
  403fcc:	jmp    403fe0 <flatcc_builder_default_alloc@@Base+0x70>
  403fce:	mov    rax,rdx
  403fd1:	jmp    403fe0 <flatcc_builder_default_alloc@@Base+0x70>
  403fd3:	mov    eax,0x40
  403fd8:	nop    DWORD PTR [rax+rax*1+0x0]
  403fe0:	mov    rbp,rax
  403fe3:	lea    rax,[rax+rax*1]
  403fe7:	cmp    rbp,rdx
  403fea:	jb     403fe0 <flatcc_builder_default_alloc@@Base+0x70>
  403fec:	mov    rax,QWORD PTR [rbx+0x8]
  403ff0:	xor    r15d,r15d
  403ff3:	cmp    rax,rdx
  403ff6:	jb     404000 <flatcc_builder_default_alloc@@Base+0x90>
  403ff8:	shr    rax,1
  403ffb:	cmp    rax,rbp
  403ffe:	jae    404040 <flatcc_builder_default_alloc@@Base+0xd0>
  404000:	mov    rdi,QWORD PTR [rbx]
  404003:	mov    rsi,rbp
  404006:	call   4030d0 <realloc@plt>
  40400b:	test   rax,rax
  40400e:	je     40403a <flatcc_builder_default_alloc@@Base+0xca>
  404010:	mov    r12,rax
  404013:	test   r14d,r14d
  404016:	je     404031 <flatcc_builder_default_alloc@@Base+0xc1>
  404018:	mov    rax,QWORD PTR [rbx+0x8]
  40401c:	mov    rdx,rbp
  40401f:	sub    rdx,rax
  404022:	jbe    404031 <flatcc_builder_default_alloc@@Base+0xc1>
  404024:	mov    rdi,r12
  404027:	add    rdi,rax
  40402a:	xor    esi,esi
  40402c:	call   403070 <memset@plt>
  404031:	mov    QWORD PTR [rbx],r12
  404034:	mov    QWORD PTR [rbx+0x8],rbp
  404038:	jmp    404040 <flatcc_builder_default_alloc@@Base+0xd0>
  40403a:	mov    r15d,0xffffffff
  404040:	mov    eax,r15d
  404043:	pop    rbx
  404044:	pop    r12
  404046:	pop    r14
  404048:	pop    r15
  40404a:	pop    rbp
  40404b:	ret    
  40404c:	nop    DWORD PTR [rax+0x0]

0000000000404050 <flatcc_builder_flush_vtable_cache@@Base>:
  404050:	cmp    QWORD PTR [rdi+0xd8],0x0
  404058:	je     404085 <flatcc_builder_flush_vtable_cache@@Base+0x35>
  40405a:	push   rbx
  40405b:	mov    rbx,rdi
  40405e:	mov    rdi,QWORD PTR [rdi+0xa8]
  404065:	mov    rdx,QWORD PTR [rbx+0xb0]
  40406c:	xor    esi,esi
  40406e:	call   403070 <memset@plt>
  404073:	movabs rax,0x1000000000
  40407d:	mov    QWORD PTR [rbx+0xe0],rax
  404084:	pop    rbx
  404085:	ret    
  404086:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404090 <flatcc_builder_custom_init@@Base>:
  404090:	vxorps xmm0,xmm0,xmm0
  404094:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40409c:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  4040a4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  4040ac:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  4040b4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  4040bc:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  4040c4:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  4040cc:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  4040d4:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  4040d9:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  4040de:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  4040e3:	vmovups YMMWORD PTR [rdi],ymm0
  4040e7:	mov    QWORD PTR [rdi+0x180],0x0
  4040f2:	test   rsi,rsi
  4040f5:	je     404119 <flatcc_builder_custom_init@@Base+0x89>
  4040f7:	test   rcx,rcx
  4040fa:	jne    404103 <flatcc_builder_custom_init@@Base+0x73>
  4040fc:	lea    rcx,[rip+0xfffffffffffffe6d]        # 403f70 <flatcc_builder_default_alloc@@Base>
  404103:	mov    QWORD PTR [rdi+0x40],r8
  404107:	mov    QWORD PTR [rdi+0x50],rcx
  40410b:	mov    QWORD PTR [rdi+0x38],rdx
  40410f:	mov    QWORD PTR [rdi+0x48],rsi
  404113:	xor    eax,eax
  404115:	vzeroupper 
  404118:	ret    
  404119:	mov    DWORD PTR [rdi+0x128],0x1
  404123:	lea    rdx,[rdi+0x130]
  40412a:	lea    rsi,[rip+0x4acf]        # 408c00 <flatcc_emitter@@Base>
  404131:	test   rcx,rcx
  404134:	je     4040fc <flatcc_builder_custom_init@@Base+0x6c>
  404136:	jmp    404103 <flatcc_builder_custom_init@@Base+0x73>
  404138:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404140 <flatcc_builder_init@@Base>:
  404140:	vxorps xmm0,xmm0,xmm0
  404144:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40414c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  404151:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  404156:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40415e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  404166:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  40416e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  404176:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  40417e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  404186:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  40418e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  404193:	vmovups YMMWORD PTR [rdi],ymm0
  404197:	mov    QWORD PTR [rdi+0x180],0x0
  4041a2:	mov    DWORD PTR [rdi+0x128],0x1
  4041ac:	lea    rax,[rdi+0x130]
  4041b3:	mov    QWORD PTR [rdi+0x40],0x0
  4041bb:	lea    rcx,[rip+0xfffffffffffffdae]        # 403f70 <flatcc_builder_default_alloc@@Base>
  4041c2:	mov    QWORD PTR [rdi+0x50],rcx
  4041c6:	mov    QWORD PTR [rdi+0x38],rax
  4041ca:	lea    rax,[rip+0x4a2f]        # 408c00 <flatcc_emitter@@Base>
  4041d1:	mov    QWORD PTR [rdi+0x48],rax
  4041d5:	xor    eax,eax
  4041d7:	vzeroupper 
  4041da:	ret    
  4041db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004041e0 <flatcc_builder_custom_reset@@Base>:
  4041e0:	push   rbp
  4041e1:	push   r15
  4041e3:	push   r14
  4041e5:	push   r12
  4041e7:	push   rbx
  4041e8:	mov    r15d,edx
  4041eb:	mov    r14d,esi
  4041ee:	mov    r12,rdi
  4041f1:	lea    rbp,[rdi+0x58]
  4041f5:	xor    ebx,ebx
  4041f7:	nop    WORD PTR [rax+rax*1+0x0]
  404200:	mov    rdi,QWORD PTR [rbp+0x0]
  404204:	test   rdi,rdi
  404207:	je     404250 <flatcc_builder_custom_reset@@Base+0x70>
  404209:	test   r15d,r15d
  40420c:	je     40423a <flatcc_builder_custom_reset@@Base+0x5a>
  40420e:	cmp    rbx,0x5
  404212:	je     40423a <flatcc_builder_custom_reset@@Base+0x5a>
  404214:	mov    rdi,QWORD PTR [r12+0x40]
  404219:	mov    edx,0x1
  40421e:	mov    ecx,0x1
  404223:	mov    rsi,rbp
  404226:	mov    r8d,ebx
  404229:	call   QWORD PTR [r12+0x50]
  40422e:	test   eax,eax
  404230:	jne    404310 <flatcc_builder_custom_reset@@Base+0x130>
  404236:	mov    rdi,QWORD PTR [rbp+0x0]
  40423a:	mov    rdx,QWORD PTR [rbp+0x8]
  40423e:	xor    esi,esi
  404240:	call   403070 <memset@plt>
  404245:	jmp    40425b <flatcc_builder_custom_reset@@Base+0x7b>
  404247:	nop    WORD PTR [rax+rax*1+0x0]
  404250:	cmp    QWORD PTR [rbp+0x8],0x0
  404255:	jne    404320 <flatcc_builder_custom_reset@@Base+0x140>
  40425b:	add    rbx,0x1
  40425f:	add    rbp,0x10
  404263:	cmp    rbx,0x8
  404267:	jb     404200 <flatcc_builder_custom_reset@@Base+0x20>
  404269:	mov    DWORD PTR [r12+0xe0],0x0
  404275:	cmp    DWORD PTR [r12+0xe4],0x0
  40427e:	je     40428c <flatcc_builder_custom_reset@@Base+0xac>
  404280:	mov    DWORD PTR [r12+0xe4],0x10
  40428c:	mov    WORD PTR [r12+0xe8],0x0
  404297:	mov    QWORD PTR [r12+0xf0],0x0
  4042a3:	mov    QWORD PTR [r12+0x20],0x0
  4042ac:	vxorps xmm0,xmm0,xmm0
  4042b0:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  4042ba:	mov    rax,QWORD PTR [r12+0x58]
  4042bf:	mov    rcx,QWORD PTR [r12+0x68]
  4042c4:	mov    QWORD PTR [r12+0x18],rcx
  4042c9:	mov    rcx,QWORD PTR [r12+0x88]
  4042d1:	mov    QWORD PTR [r12],rcx
  4042d5:	mov    QWORD PTR [r12+0x8],rax
  4042da:	mov    QWORD PTR [r12+0x30],0x0
  4042e3:	test   r14d,r14d
  4042e6:	je     4042f2 <flatcc_builder_custom_reset@@Base+0x112>
  4042e8:	vmovups XMMWORD PTR [r12+0x118],xmm0
  4042f2:	xor    ebx,ebx
  4042f4:	cmp    DWORD PTR [r12+0x128],0x0
  4042fd:	je     404315 <flatcc_builder_custom_reset@@Base+0x135>
  4042ff:	add    r12,0x130
  404306:	mov    rdi,r12
  404309:	call   408a80 <flatcc_emitter_reset@@Base>
  40430e:	jmp    404315 <flatcc_builder_custom_reset@@Base+0x135>
  404310:	mov    ebx,0xffffffff
  404315:	mov    eax,ebx
  404317:	pop    rbx
  404318:	pop    r12
  40431a:	pop    r14
  40431c:	pop    r15
  40431e:	pop    rbp
  40431f:	ret    
  404320:	lea    rdi,[rip+0x63a9]        # 40a6d0 <flatcc_builder_padding_base@@Base+0x280>
  404327:	lea    rsi,[rip+0x63b4]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40432e:	lea    rcx,[rip+0x640d]        # 40a742 <flatcc_builder_padding_base@@Base+0x2f2>
  404335:	mov    edx,0x1b2
  40433a:	call   403060 <__assert_fail@plt>
  40433f:	nop

0000000000404340 <flatcc_builder_reset@@Base>:
  404340:	push   rbx
  404341:	mov    rbx,rdi
  404344:	mov    rdi,QWORD PTR [rdi+0x58]
  404348:	mov    rdx,QWORD PTR [rbx+0x60]
  40434c:	test   rdi,rdi
  40434f:	je     40435a <flatcc_builder_reset@@Base+0x1a>
  404351:	xor    esi,esi
  404353:	call   403070 <memset@plt>
  404358:	jmp    404363 <flatcc_builder_reset@@Base+0x23>
  40435a:	test   rdx,rdx
  40435d:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  404363:	mov    rdi,QWORD PTR [rbx+0x68]
  404367:	mov    rdx,QWORD PTR [rbx+0x70]
  40436b:	test   rdi,rdi
  40436e:	je     404379 <flatcc_builder_reset@@Base+0x39>
  404370:	xor    esi,esi
  404372:	call   403070 <memset@plt>
  404377:	jmp    404382 <flatcc_builder_reset@@Base+0x42>
  404379:	test   rdx,rdx
  40437c:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  404382:	mov    rdi,QWORD PTR [rbx+0x78]
  404386:	mov    rdx,QWORD PTR [rbx+0x80]
  40438d:	test   rdi,rdi
  404390:	je     40439b <flatcc_builder_reset@@Base+0x5b>
  404392:	xor    esi,esi
  404394:	call   403070 <memset@plt>
  404399:	jmp    4043a4 <flatcc_builder_reset@@Base+0x64>
  40439b:	test   rdx,rdx
  40439e:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  4043a4:	mov    rdi,QWORD PTR [rbx+0x88]
  4043ab:	mov    rdx,QWORD PTR [rbx+0x90]
  4043b2:	test   rdi,rdi
  4043b5:	je     4043c0 <flatcc_builder_reset@@Base+0x80>
  4043b7:	xor    esi,esi
  4043b9:	call   403070 <memset@plt>
  4043be:	jmp    4043c9 <flatcc_builder_reset@@Base+0x89>
  4043c0:	test   rdx,rdx
  4043c3:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  4043c9:	mov    rdi,QWORD PTR [rbx+0x98]
  4043d0:	mov    rdx,QWORD PTR [rbx+0xa0]
  4043d7:	test   rdi,rdi
  4043da:	je     4043e5 <flatcc_builder_reset@@Base+0xa5>
  4043dc:	xor    esi,esi
  4043de:	call   403070 <memset@plt>
  4043e3:	jmp    4043ee <flatcc_builder_reset@@Base+0xae>
  4043e5:	test   rdx,rdx
  4043e8:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  4043ee:	mov    rdi,QWORD PTR [rbx+0xa8]
  4043f5:	mov    rdx,QWORD PTR [rbx+0xb0]
  4043fc:	test   rdi,rdi
  4043ff:	je     40440a <flatcc_builder_reset@@Base+0xca>
  404401:	xor    esi,esi
  404403:	call   403070 <memset@plt>
  404408:	jmp    404413 <flatcc_builder_reset@@Base+0xd3>
  40440a:	test   rdx,rdx
  40440d:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  404413:	mov    rdi,QWORD PTR [rbx+0xb8]
  40441a:	mov    rdx,QWORD PTR [rbx+0xc0]
  404421:	test   rdi,rdi
  404424:	je     40442f <flatcc_builder_reset@@Base+0xef>
  404426:	xor    esi,esi
  404428:	call   403070 <memset@plt>
  40442d:	jmp    404438 <flatcc_builder_reset@@Base+0xf8>
  40442f:	test   rdx,rdx
  404432:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  404438:	mov    rdi,QWORD PTR [rbx+0xc8]
  40443f:	mov    rdx,QWORD PTR [rbx+0xd0]
  404446:	test   rdi,rdi
  404449:	je     404454 <flatcc_builder_reset@@Base+0x114>
  40444b:	xor    esi,esi
  40444d:	call   403070 <memset@plt>
  404452:	jmp    40445d <flatcc_builder_reset@@Base+0x11d>
  404454:	test   rdx,rdx
  404457:	jne    4044e0 <flatcc_builder_reset@@Base+0x1a0>
  40445d:	mov    DWORD PTR [rbx+0xe0],0x0
  404467:	cmp    DWORD PTR [rbx+0xe4],0x0
  40446e:	je     40447a <flatcc_builder_reset@@Base+0x13a>
  404470:	mov    DWORD PTR [rbx+0xe4],0x10
  40447a:	mov    WORD PTR [rbx+0xe8],0x0
  404483:	mov    QWORD PTR [rbx+0xf0],0x0
  40448e:	mov    QWORD PTR [rbx+0x20],0x0
  404496:	vxorps xmm0,xmm0,xmm0
  40449a:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  4044a2:	mov    rax,QWORD PTR [rbx+0x58]
  4044a6:	mov    rcx,QWORD PTR [rbx+0x68]
  4044aa:	mov    QWORD PTR [rbx+0x18],rcx
  4044ae:	mov    rcx,QWORD PTR [rbx+0x88]
  4044b5:	mov    QWORD PTR [rbx],rcx
  4044b8:	mov    QWORD PTR [rbx+0x8],rax
  4044bc:	mov    QWORD PTR [rbx+0x30],0x0
  4044c4:	cmp    DWORD PTR [rbx+0x128],0x0
  4044cb:	je     4044dc <flatcc_builder_reset@@Base+0x19c>
  4044cd:	add    rbx,0x130
  4044d4:	mov    rdi,rbx
  4044d7:	call   408a80 <flatcc_emitter_reset@@Base>
  4044dc:	xor    eax,eax
  4044de:	pop    rbx
  4044df:	ret    
  4044e0:	lea    rdi,[rip+0x61e9]        # 40a6d0 <flatcc_builder_padding_base@@Base+0x280>
  4044e7:	lea    rsi,[rip+0x61f4]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4044ee:	lea    rcx,[rip+0x624d]        # 40a742 <flatcc_builder_padding_base@@Base+0x2f2>
  4044f5:	mov    edx,0x1b2
  4044fa:	call   403060 <__assert_fail@plt>
  4044ff:	nop

0000000000404500 <flatcc_builder_clear@@Base>:
  404500:	push   rbx
  404501:	mov    rbx,rdi
  404504:	lea    rsi,[rdi+0x58]
  404508:	mov    rdi,QWORD PTR [rdi+0x40]
  40450c:	xor    edx,edx
  40450e:	xor    ecx,ecx
  404510:	xor    r8d,r8d
  404513:	call   QWORD PTR [rbx+0x50]
  404516:	lea    rsi,[rbx+0x68]
  40451a:	mov    rdi,QWORD PTR [rbx+0x40]
  40451e:	xor    edx,edx
  404520:	xor    ecx,ecx
  404522:	mov    r8d,0x1
  404528:	call   QWORD PTR [rbx+0x50]
  40452b:	lea    rsi,[rbx+0x78]
  40452f:	mov    rdi,QWORD PTR [rbx+0x40]
  404533:	xor    edx,edx
  404535:	xor    ecx,ecx
  404537:	mov    r8d,0x2
  40453d:	call   QWORD PTR [rbx+0x50]
  404540:	lea    rsi,[rbx+0x88]
  404547:	mov    rdi,QWORD PTR [rbx+0x40]
  40454b:	xor    edx,edx
  40454d:	xor    ecx,ecx
  40454f:	mov    r8d,0x3
  404555:	call   QWORD PTR [rbx+0x50]
  404558:	lea    rsi,[rbx+0x98]
  40455f:	mov    rdi,QWORD PTR [rbx+0x40]
  404563:	xor    edx,edx
  404565:	xor    ecx,ecx
  404567:	mov    r8d,0x4
  40456d:	call   QWORD PTR [rbx+0x50]
  404570:	lea    rsi,[rbx+0xa8]
  404577:	mov    rdi,QWORD PTR [rbx+0x40]
  40457b:	xor    edx,edx
  40457d:	xor    ecx,ecx
  40457f:	mov    r8d,0x5
  404585:	call   QWORD PTR [rbx+0x50]
  404588:	lea    rsi,[rbx+0xb8]
  40458f:	mov    rdi,QWORD PTR [rbx+0x40]
  404593:	xor    edx,edx
  404595:	xor    ecx,ecx
  404597:	mov    r8d,0x6
  40459d:	call   QWORD PTR [rbx+0x50]
  4045a0:	lea    rsi,[rbx+0xc8]
  4045a7:	mov    rdi,QWORD PTR [rbx+0x40]
  4045ab:	xor    edx,edx
  4045ad:	xor    ecx,ecx
  4045af:	mov    r8d,0x7
  4045b5:	call   QWORD PTR [rbx+0x50]
  4045b8:	cmp    DWORD PTR [rbx+0x128],0x0
  4045bf:	je     4045cd <flatcc_builder_clear@@Base+0xcd>
  4045c1:	lea    rdi,[rbx+0x130]
  4045c8:	call   408b80 <flatcc_emitter_clear@@Base>
  4045cd:	vxorps xmm0,xmm0,xmm0
  4045d1:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  4045d9:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  4045e1:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  4045e9:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  4045f1:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  4045f9:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  404601:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  404609:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404611:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404616:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  40461b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  404620:	vmovups YMMWORD PTR [rbx],ymm0
  404624:	mov    QWORD PTR [rbx+0x180],0x0
  40462f:	pop    rbx
  404630:	vzeroupper 
  404633:	ret    
  404634:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40463e:	xchg   ax,ax

0000000000404640 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404640:	push   r15
  404642:	push   r14
  404644:	push   r12
  404646:	push   rbx
  404647:	push   rax
  404648:	mov    r14,rsi
  40464b:	mov    r15,rdi
  40464e:	add    r14,0xf
  404652:	and    r14,0xfffffffffffffff8
  404656:	mov    rbx,QWORD PTR [rdi+0x180]
  40465d:	lea    r12,[rdi+0xc8]
  404664:	lea    rdx,[rbx+r14*1]
  404668:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40466f:	jbe    404688 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  404671:	mov    rdi,QWORD PTR [r15+0x40]
  404675:	xor    ecx,ecx
  404677:	mov    r8d,0x7
  40467d:	mov    rsi,r12
  404680:	call   QWORD PTR [r15+0x50]
  404684:	test   eax,eax
  404686:	jne    4046d8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  404688:	add    rbx,QWORD PTR [r12]
  40468c:	je     4046c7 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  40468e:	xor    esi,esi
  404690:	mov    rdi,rbx
  404693:	mov    rdx,r14
  404696:	call   403070 <memset@plt>
  40469b:	mov    rax,QWORD PTR [r15+0x178]
  4046a2:	mov    QWORD PTR [rbx],rax
  4046a5:	add    rbx,0x8
  4046a9:	mov    rax,QWORD PTR [r15+0x180]
  4046b0:	lea    rcx,[rax+0x8]
  4046b4:	mov    QWORD PTR [r15+0x178],rcx
  4046bb:	add    rax,r14
  4046be:	mov    QWORD PTR [r15+0x180],rax
  4046c5:	jmp    4046c9 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  4046c7:	xor    ebx,ebx
  4046c9:	mov    rax,rbx
  4046cc:	add    rsp,0x8
  4046d0:	pop    rbx
  4046d1:	pop    r12
  4046d3:	pop    r14
  4046d5:	pop    r15
  4046d7:	ret    
  4046d8:	lea    rdi,[rip+0x71c3]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4046df:	lea    rsi,[rip+0x5ffc]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4046e6:	lea    rcx,[rip+0x6fef]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  4046ed:	mov    edx,0x134
  4046f2:	call   403060 <__assert_fail@plt>
  4046f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404700 <flatcc_builder_enter_user_frame@@Base>:
  404700:	push   r15
  404702:	push   r14
  404704:	push   r12
  404706:	push   rbx
  404707:	push   rax
  404708:	mov    r14,rsi
  40470b:	mov    rbx,rdi
  40470e:	add    r14,0xf
  404712:	and    r14,0xfffffffffffffff8
  404716:	mov    r15,QWORD PTR [rdi+0x180]
  40471d:	lea    r12,[rdi+0xc8]
  404724:	lea    rdx,[r15+r14*1]
  404728:	cmp    rdx,QWORD PTR [rdi+0xd0]
  40472f:	jbe    404747 <flatcc_builder_enter_user_frame@@Base+0x47>
  404731:	mov    rdi,QWORD PTR [rbx+0x40]
  404735:	xor    ecx,ecx
  404737:	mov    r8d,0x7
  40473d:	mov    rsi,r12
  404740:	call   QWORD PTR [rbx+0x50]
  404743:	test   eax,eax
  404745:	jne    404790 <flatcc_builder_enter_user_frame@@Base+0x90>
  404747:	add    r15,QWORD PTR [r12]
  40474b:	je     404782 <flatcc_builder_enter_user_frame@@Base+0x82>
  40474d:	xor    esi,esi
  40474f:	mov    rdi,r15
  404752:	mov    rdx,r14
  404755:	call   403070 <memset@plt>
  40475a:	mov    rax,QWORD PTR [rbx+0x178]
  404761:	mov    QWORD PTR [r15],rax
  404764:	mov    rcx,QWORD PTR [rbx+0x180]
  40476b:	lea    rax,[rcx+0x8]
  40476f:	mov    QWORD PTR [rbx+0x178],rax
  404776:	add    rcx,r14
  404779:	mov    QWORD PTR [rbx+0x180],rcx
  404780:	jmp    404784 <flatcc_builder_enter_user_frame@@Base+0x84>
  404782:	xor    eax,eax
  404784:	add    rsp,0x8
  404788:	pop    rbx
  404789:	pop    r12
  40478b:	pop    r14
  40478d:	pop    r15
  40478f:	ret    
  404790:	lea    rdi,[rip+0x710b]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404797:	lea    rsi,[rip+0x5f44]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40479e:	lea    rcx,[rip+0x6f37]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  4047a5:	mov    edx,0x134
  4047aa:	call   403060 <__assert_fail@plt>
  4047af:	nop

00000000004047b0 <flatcc_builder_exit_user_frame@@Base>:
  4047b0:	mov    rax,QWORD PTR [rdi+0x178]
  4047b7:	test   rax,rax
  4047ba:	je     4047dd <flatcc_builder_exit_user_frame@@Base+0x2d>
  4047bc:	mov    rcx,QWORD PTR [rdi+0xc8]
  4047c3:	mov    edx,eax
  4047c5:	add    rax,0xfffffffffffffff8
  4047c9:	mov    QWORD PTR [rdi+0x180],rax
  4047d0:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  4047d5:	mov    QWORD PTR [rdi+0x178],rax
  4047dc:	ret    
  4047dd:	push   rax
  4047de:	lea    rdi,[rip+0x5f9b]        # 40a780 <flatcc_builder_padding_base@@Base+0x330>
  4047e5:	lea    rsi,[rip+0x5ef6]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4047ec:	lea    rcx,[rip+0x5fa6]        # 40a799 <flatcc_builder_padding_base@@Base+0x349>
  4047f3:	mov    edx,0x21e
  4047f8:	call   403060 <__assert_fail@plt>
  4047fd:	nop    DWORD PTR [rax]

0000000000404800 <flatcc_builder_exit_user_frame_at@@Base>:
  404800:	push   rax
  404801:	cmp    QWORD PTR [rdi+0x178],rsi
  404808:	jb     404838 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  40480a:	mov    QWORD PTR [rdi+0x178],rsi
  404811:	test   rsi,rsi
  404814:	je     404857 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404816:	mov    rax,QWORD PTR [rdi+0xc8]
  40481d:	mov    ecx,esi
  40481f:	add    rsi,0xfffffffffffffff8
  404823:	mov    QWORD PTR [rdi+0x180],rsi
  40482a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  40482f:	mov    QWORD PTR [rdi+0x178],rax
  404836:	pop    rcx
  404837:	ret    
  404838:	lea    rdi,[rip+0x5f94]        # 40a7d3 <flatcc_builder_padding_base@@Base+0x383>
  40483f:	lea    rsi,[rip+0x5e9c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404846:	lea    rcx,[rip+0x5fa5]        # 40a7f2 <flatcc_builder_padding_base@@Base+0x3a2>
  40484d:	mov    edx,0x227
  404852:	call   403060 <__assert_fail@plt>
  404857:	lea    rdi,[rip+0x5f22]        # 40a780 <flatcc_builder_padding_base@@Base+0x330>
  40485e:	lea    rsi,[rip+0x5e7d]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404865:	lea    rcx,[rip+0x5f2d]        # 40a799 <flatcc_builder_padding_base@@Base+0x349>
  40486c:	mov    edx,0x21e
  404871:	call   403060 <__assert_fail@plt>
  404876:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404880 <flatcc_builder_get_current_user_frame@@Base>:
  404880:	mov    rax,QWORD PTR [rdi+0x178]
  404887:	ret    
  404888:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404890 <flatcc_builder_get_user_frame_ptr@@Base>:
  404890:	mov    eax,esi
  404892:	add    rax,QWORD PTR [rdi+0xc8]
  404899:	ret    
  40489a:	nop    WORD PTR [rax+rax*1+0x0]

00000000004048a0 <flatcc_builder_embed_buffer@@Base>:
  4048a0:	push   rbp
  4048a1:	push   r15
  4048a3:	push   r14
  4048a5:	push   r12
  4048a7:	push   rbx
  4048a8:	sub    rsp,0xa0
  4048af:	mov    ebx,r9d
  4048b2:	mov    rbp,rcx
  4048b5:	mov    r15,rdx
  4048b8:	mov    eax,esi
  4048ba:	mov    r12,rdi
  4048bd:	mov    WORD PTR [rsp+0xa],r8w
  4048c3:	xor    ecx,ecx
  4048c5:	cmp    DWORD PTR [rdi+0x100],0x0
  4048cc:	setne  cl
  4048cf:	lea    rsi,[rsp+0xa]
  4048d4:	mov    edx,eax
  4048d6:	call   404a40 <flatcc_builder_embed_buffer@@Base+0x1a0>
  4048db:	and    ebx,0x2
  4048de:	movzx  eax,WORD PTR [rsp+0xa]
  4048e3:	mov    r14d,DWORD PTR [r12+0xf0]
  4048eb:	lea    ecx,[rbp+rbx*2+0x0]
  4048ef:	mov    edx,r14d
  4048f2:	sub    edx,ecx
  4048f4:	add    eax,0xffffffff
  4048f7:	and    eax,edx
  4048f9:	lea    ecx,[rax+rbp*1]
  4048fc:	mov    DWORD PTR [rsp+0xc],ecx
  404900:	mov    QWORD PTR [rsp+0x10],0x0
  404909:	mov    DWORD PTR [rsp+0x18],0x0
  404911:	cmp    DWORD PTR [r12+0x100],0x0
  40491a:	je     4049ee <flatcc_builder_embed_buffer@@Base+0x14e>
  404920:	mov    QWORD PTR [rsp+0x10],0x4
  404929:	lea    rcx,[rsp+0xc]
  40492e:	mov    QWORD PTR [rsp+0x20],rcx
  404933:	mov    QWORD PTR [rsp+0x28],0x4
  40493c:	mov    DWORD PTR [rsp+0x18],0x1
  404944:	mov    edx,0x1
  404949:	mov    r8d,0x4
  40494f:	test   rbp,rbp
  404952:	je     404973 <flatcc_builder_embed_buffer@@Base+0xd3>
  404954:	add    r8,rbp
  404957:	mov    QWORD PTR [rsp+0x10],r8
  40495c:	mov    ecx,edx
  40495e:	shl    rcx,0x4
  404962:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404967:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  40496c:	add    edx,0x1
  40496f:	mov    DWORD PTR [rsp+0x18],edx
  404973:	test   eax,eax
  404975:	je     40499f <flatcc_builder_embed_buffer@@Base+0xff>
  404977:	mov    eax,eax
  404979:	add    r8,rax
  40497c:	mov    QWORD PTR [rsp+0x10],r8
  404981:	mov    ecx,edx
  404983:	shl    rcx,0x4
  404987:	lea    rsi,[rip+0x5ac2]        # 40a450 <flatcc_builder_padding_base@@Base>
  40498e:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  404993:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  404998:	add    edx,0x1
  40499b:	mov    DWORD PTR [rsp+0x18],edx
  40499f:	cmp    r8,0x11
  4049a3:	setb   al
  4049a6:	lea    rcx,[r8-0x10]
  4049aa:	shr    rcx,0x20
  4049ae:	sete   cl
  4049b1:	test   r8d,r8d
  4049b4:	jle    404a01 <flatcc_builder_embed_buffer@@Base+0x161>
  4049b6:	or     al,cl
  4049b8:	je     404a01 <flatcc_builder_embed_buffer@@Base+0x161>
  4049ba:	sub    r14d,r8d
  4049bd:	mov    rdi,QWORD PTR [r12+0x38]
  4049c2:	lea    rsi,[rsp+0x20]
  4049c7:	mov    ecx,r14d
  4049ca:	call   QWORD PTR [r12+0x48]
  4049cf:	test   eax,eax
  4049d1:	jne    404a20 <flatcc_builder_embed_buffer@@Base+0x180>
  4049d3:	mov    DWORD PTR [r12+0xf0],r14d
  4049db:	mov    eax,r14d
  4049de:	add    rsp,0xa0
  4049e5:	pop    rbx
  4049e6:	pop    r12
  4049e8:	pop    r14
  4049ea:	pop    r15
  4049ec:	pop    rbp
  4049ed:	ret    
  4049ee:	xor    edx,edx
  4049f0:	xor    r8d,r8d
  4049f3:	test   rbp,rbp
  4049f6:	jne    404954 <flatcc_builder_embed_buffer@@Base+0xb4>
  4049fc:	jmp    404973 <flatcc_builder_embed_buffer@@Base+0xd3>
  404a01:	lea    rdi,[rip+0x6e9a]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404a08:	lea    rsi,[rip+0x5cd3]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404a0f:	lea    rcx,[rip+0x6d4b]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404a16:	mov    edx,0x287
  404a1b:	call   403060 <__assert_fail@plt>
  404a20:	lea    rdi,[rip+0x6e7b]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404a27:	lea    rsi,[rip+0x5cb4]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404a2e:	lea    rcx,[rip+0x6d2c]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404a35:	mov    edx,0x28b
  404a3a:	call   403060 <__assert_fail@plt>
  404a3f:	nop
  404a40:	push   rbx
  404a41:	sub    rsp,0x90
  404a48:	mov    rax,rdi
  404a4b:	test   dx,dx
  404a4e:	jne    404a61 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404a50:	mov    edi,DWORD PTR [rax+0xec]
  404a56:	test   di,di
  404a59:	mov    edx,0x1
  404a5e:	cmovne edx,edi
  404a61:	movzx  ebx,WORD PTR [rsi]
  404a64:	mov    edi,0x4
  404a69:	cmp    ebx,0x4
  404a6c:	cmovae edi,ebx
  404a6f:	jb     404a7c <flatcc_builder_embed_buffer@@Base+0x1dc>
  404a71:	cmp    di,dx
  404a74:	jb     404a7c <flatcc_builder_embed_buffer@@Base+0x1dc>
  404a76:	test   ecx,ecx
  404a78:	jne    404ae4 <flatcc_builder_embed_buffer@@Base+0x244>
  404a7a:	jmp    404a89 <flatcc_builder_embed_buffer@@Base+0x1e9>
  404a7c:	cmp    di,dx
  404a7f:	cmovb  edi,edx
  404a82:	mov    WORD PTR [rsi],di
  404a85:	test   ecx,ecx
  404a87:	jne    404ae4 <flatcc_builder_embed_buffer@@Base+0x244>
  404a89:	mov    ebx,DWORD PTR [rax+0xf4]
  404a8f:	movzx  r8d,dx
  404a93:	add    r8d,0xffffffff
  404a97:	and    r8d,ebx
  404a9a:	je     404ae4 <flatcc_builder_embed_buffer@@Base+0x244>
  404a9c:	mov    QWORD PTR [rsp],r8
  404aa0:	lea    rcx,[rip+0x59a9]        # 40a450 <flatcc_builder_padding_base@@Base>
  404aa7:	mov    QWORD PTR [rsp+0x10],rcx
  404aac:	mov    QWORD PTR [rsp+0x18],r8
  404ab1:	mov    DWORD PTR [rsp+0x8],0x1
  404ab9:	lea    ecx,[r8+rbx*1]
  404abd:	mov    DWORD PTR [rax+0xf4],ecx
  404ac3:	test   r8d,r8d
  404ac6:	js     404aed <flatcc_builder_embed_buffer@@Base+0x24d>
  404ac8:	mov    rdi,QWORD PTR [rax+0x38]
  404acc:	lea    rsi,[rsp+0x10]
  404ad1:	mov    edx,0x1
  404ad6:	mov    ecx,ebx
  404ad8:	call   QWORD PTR [rax+0x48]
  404adb:	test   eax,eax
  404add:	jne    404b0c <flatcc_builder_embed_buffer@@Base+0x26c>
  404adf:	cmp    ebx,0xffffffff
  404ae2:	je     404b2b <flatcc_builder_embed_buffer@@Base+0x28b>
  404ae4:	add    rsp,0x90
  404aeb:	pop    rbx
  404aec:	ret    
  404aed:	lea    rdi,[rip+0x6dae]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404af4:	lea    rsi,[rip+0x5be7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404afb:	lea    rcx,[rip+0x6d1b]        # 40b81d <flatcc_builder_padding_base@@Base+0x13cd>
  404b02:	mov    edx,0x2a1
  404b07:	call   403060 <__assert_fail@plt>
  404b0c:	lea    rdi,[rip+0x6d8f]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404b13:	lea    rsi,[rip+0x5bc8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404b1a:	lea    rcx,[rip+0x6cfc]        # 40b81d <flatcc_builder_padding_base@@Base+0x13cd>
  404b21:	mov    edx,0x2a5
  404b26:	call   403060 <__assert_fail@plt>
  404b2b:	lea    rdi,[rip+0x6d70]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404b32:	lea    rsi,[rip+0x5ba9]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404b39:	lea    rcx,[rip+0x6bdf]        # 40b71f <flatcc_builder_padding_base@@Base+0x12cf>
  404b40:	mov    edx,0x2be
  404b45:	call   403060 <__assert_fail@plt>
  404b4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404b50 <flatcc_builder_create_buffer@@Base>:
  404b50:	push   rbp
  404b51:	push   r15
  404b53:	push   r14
  404b55:	push   r13
  404b57:	push   r12
  404b59:	push   rbx
  404b5a:	sub    rsp,0xa8
  404b61:	mov    r12d,r9d
  404b64:	mov    r14d,ecx
  404b67:	mov    rbp,rsi
  404b6a:	mov    r13,rdi
  404b6d:	mov    WORD PTR [rsp+0xa],r8w
  404b73:	mov    DWORD PTR [rsp+0xc],0x0
  404b7b:	mov    r15d,r9d
  404b7e:	and    r15d,0x1
  404b82:	lea    rsi,[rsp+0xa]
  404b87:	mov    ecx,r15d
  404b8a:	call   404a40 <flatcc_builder_embed_buffer@@Base+0x1a0>
  404b8f:	movzx  eax,WORD PTR [rsp+0xa]
  404b94:	cmp    WORD PTR [r13+0xe8],ax
  404b9c:	jae    404ba6 <flatcc_builder_create_buffer@@Base+0x56>
  404b9e:	mov    WORD PTR [r13+0xe8],ax
  404ba6:	movzx  edx,ax
  404ba9:	xor    eax,eax
  404bab:	test   rbp,rbp
  404bae:	je     404bc8 <flatcc_builder_create_buffer@@Base+0x78>
  404bb0:	mov    ecx,DWORD PTR [rbp+0x0]
  404bb3:	mov    DWORD PTR [rsp+0xc],ecx
  404bb7:	xor    edi,edi
  404bb9:	test   ecx,ecx
  404bbb:	setne  dil
  404bbf:	mov    rsi,rdi
  404bc2:	shl    rsi,0x2
  404bc6:	jmp    404bcc <flatcc_builder_create_buffer@@Base+0x7c>
  404bc8:	xor    edi,edi
  404bca:	xor    esi,esi
  404bcc:	lea    ecx,[r12+r12*1]
  404bd0:	and    ecx,0x4
  404bd3:	mov    ebp,DWORD PTR [r13+0xf0]
  404bda:	xor    ecx,0xfffffffc
  404bdd:	add    ecx,ebp
  404bdf:	sub    ecx,esi
  404be1:	add    edx,0xffffffff
  404be4:	mov    QWORD PTR [rsp+0x18],0x0
  404bed:	mov    DWORD PTR [rsp+0x20],0x0
  404bf5:	test   r12b,0x3
  404bf9:	je     404c2c <flatcc_builder_create_buffer@@Base+0xdc>
  404bfb:	mov    QWORD PTR [rsp+0x18],0x4
  404c04:	lea    rax,[rsp+0x10]
  404c09:	mov    QWORD PTR [rsp+0x28],rax
  404c0e:	mov    QWORD PTR [rsp+0x30],0x4
  404c17:	mov    DWORD PTR [rsp+0x20],0x1
  404c1f:	mov    eax,0x1
  404c24:	mov    r8d,0x8
  404c2a:	jmp    404c32 <flatcc_builder_create_buffer@@Base+0xe2>
  404c2c:	mov    r8d,0x4
  404c32:	and    ecx,edx
  404c34:	mov    QWORD PTR [rsp+0x18],r8
  404c39:	mov    edx,eax
  404c3b:	shl    rdx,0x4
  404c3f:	lea    rbx,[rsp+0x14]
  404c44:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  404c49:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  404c52:	lea    edx,[rax+0x1]
  404c55:	mov    DWORD PTR [rsp+0x20],edx
  404c59:	test   dil,dil
  404c5c:	je     404c84 <flatcc_builder_create_buffer@@Base+0x134>
  404c5e:	add    r8,rsi
  404c61:	mov    QWORD PTR [rsp+0x18],r8
  404c66:	mov    edx,edx
  404c68:	shl    rdx,0x4
  404c6c:	lea    rdi,[rsp+0xc]
  404c71:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  404c76:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  404c7b:	or     eax,0x2
  404c7e:	mov    DWORD PTR [rsp+0x20],eax
  404c82:	mov    edx,eax
  404c84:	test   ecx,ecx
  404c86:	je     404cb0 <flatcc_builder_create_buffer@@Base+0x160>
  404c88:	mov    eax,ecx
  404c8a:	add    r8,rax
  404c8d:	mov    QWORD PTR [rsp+0x18],r8
  404c92:	mov    ecx,edx
  404c94:	shl    rcx,0x4
  404c98:	lea    rsi,[rip+0x57b1]        # 40a450 <flatcc_builder_padding_base@@Base>
  404c9f:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  404ca4:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  404ca9:	add    edx,0x1
  404cac:	mov    DWORD PTR [rsp+0x20],edx
  404cb0:	xor    eax,eax
  404cb2:	test   r12b,0x3
  404cb6:	setne  al
  404cb9:	sub    ebp,r8d
  404cbc:	lea    eax,[rbp+rax*4+0x0]
  404cc0:	mov    ecx,r15d
  404cc3:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  404ccb:	sub    ecx,eax
  404ccd:	mov    DWORD PTR [rsp+0x10],ecx
  404cd1:	sub    r14d,eax
  404cd4:	mov    DWORD PTR [rsp+0x14],r14d
  404cd9:	cmp    r8,0x11
  404cdd:	setb   al
  404ce0:	lea    rcx,[r8-0x10]
  404ce4:	shr    rcx,0x20
  404ce8:	sete   cl
  404ceb:	test   r8d,r8d
  404cee:	jle    404d26 <flatcc_builder_create_buffer@@Base+0x1d6>
  404cf0:	or     al,cl
  404cf2:	je     404d26 <flatcc_builder_create_buffer@@Base+0x1d6>
  404cf4:	mov    rdi,QWORD PTR [r13+0x38]
  404cf8:	lea    rsi,[rsp+0x28]
  404cfd:	mov    ecx,ebp
  404cff:	call   QWORD PTR [r13+0x48]
  404d03:	test   eax,eax
  404d05:	jne    404d45 <flatcc_builder_create_buffer@@Base+0x1f5>
  404d07:	mov    DWORD PTR [r13+0xf0],ebp
  404d0e:	test   ebp,ebp
  404d10:	je     404d64 <flatcc_builder_create_buffer@@Base+0x214>
  404d12:	mov    eax,ebp
  404d14:	add    rsp,0xa8
  404d1b:	pop    rbx
  404d1c:	pop    r12
  404d1e:	pop    r13
  404d20:	pop    r14
  404d22:	pop    r15
  404d24:	pop    rbp
  404d25:	ret    
  404d26:	lea    rdi,[rip+0x6b75]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404d2d:	lea    rsi,[rip+0x59ae]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404d34:	lea    rcx,[rip+0x6a26]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404d3b:	mov    edx,0x287
  404d40:	call   403060 <__assert_fail@plt>
  404d45:	lea    rdi,[rip+0x6b56]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404d4c:	lea    rsi,[rip+0x598f]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404d53:	lea    rcx,[rip+0x6a07]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404d5a:	mov    edx,0x28b
  404d5f:	call   403060 <__assert_fail@plt>
  404d64:	lea    rdi,[rip+0x6b37]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404d6b:	lea    rsi,[rip+0x5970]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404d72:	lea    rcx,[rip+0x5abe]        # 40a837 <flatcc_builder_padding_base@@Base+0x3e7>
  404d79:	mov    edx,0x304
  404d7e:	call   403060 <__assert_fail@plt>
  404d83:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404d8d:	nop    DWORD PTR [rax]

0000000000404d90 <flatcc_builder_create_struct@@Base>:
  404d90:	push   rbp
  404d91:	push   r14
  404d93:	push   rbx
  404d94:	sub    rsp,0x90
  404d9b:	test   cx,cx
  404d9e:	je     404e99 <flatcc_builder_create_struct@@Base+0x109>
  404da4:	mov    rax,rdx
  404da7:	mov    r14,rdi
  404daa:	cmp    WORD PTR [rdi+0xe8],cx
  404db1:	jae    404dbb <flatcc_builder_create_struct@@Base+0x2b>
  404db3:	mov    WORD PTR [r14+0xe8],cx
  404dbb:	mov    ebp,DWORD PTR [r14+0xf0]
  404dc2:	mov    edx,ebp
  404dc4:	sub    edx,eax
  404dc6:	movzx  ecx,cx
  404dc9:	add    ecx,0xffffffff
  404dcc:	and    ecx,edx
  404dce:	mov    QWORD PTR [rsp],0x0
  404dd6:	mov    DWORD PTR [rsp+0x8],0x0
  404dde:	test   rax,rax
  404de1:	je     404e72 <flatcc_builder_create_struct@@Base+0xe2>
  404de7:	mov    QWORD PTR [rsp],rax
  404deb:	mov    QWORD PTR [rsp+0x10],rsi
  404df0:	mov    QWORD PTR [rsp+0x18],rax
  404df5:	mov    DWORD PTR [rsp+0x8],0x1
  404dfd:	mov    edx,0x1
  404e02:	test   ecx,ecx
  404e04:	je     404e2b <flatcc_builder_create_struct@@Base+0x9b>
  404e06:	add    rax,rcx
  404e09:	mov    QWORD PTR [rsp],rax
  404e0d:	mov    esi,edx
  404e0f:	shl    rsi,0x4
  404e13:	lea    rdi,[rip+0x5636]        # 40a450 <flatcc_builder_padding_base@@Base>
  404e1a:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  404e1f:	mov    QWORD PTR [rsp+rsi*1+0x18],rcx
  404e24:	add    edx,0x1
  404e27:	mov    DWORD PTR [rsp+0x8],edx
  404e2b:	cmp    rax,0x11
  404e2f:	setb   cl
  404e32:	lea    rsi,[rax-0x10]
  404e36:	shr    rsi,0x20
  404e3a:	sete   bl
  404e3d:	test   eax,eax
  404e3f:	jle    404e7a <flatcc_builder_create_struct@@Base+0xea>
  404e41:	or     cl,bl
  404e43:	je     404e7a <flatcc_builder_create_struct@@Base+0xea>
  404e45:	sub    ebp,eax
  404e47:	mov    rdi,QWORD PTR [r14+0x38]
  404e4b:	lea    rsi,[rsp+0x10]
  404e50:	mov    ecx,ebp
  404e52:	mov    r8,rax
  404e55:	call   QWORD PTR [r14+0x48]
  404e59:	test   eax,eax
  404e5b:	jne    404eb8 <flatcc_builder_create_struct@@Base+0x128>
  404e5d:	mov    DWORD PTR [r14+0xf0],ebp
  404e64:	mov    eax,ebp
  404e66:	add    rsp,0x90
  404e6d:	pop    rbx
  404e6e:	pop    r14
  404e70:	pop    rbp
  404e71:	ret    
  404e72:	xor    edx,edx
  404e74:	test   ecx,ecx
  404e76:	jne    404e06 <flatcc_builder_create_struct@@Base+0x76>
  404e78:	jmp    404e2b <flatcc_builder_create_struct@@Base+0x9b>
  404e7a:	lea    rdi,[rip+0x6a21]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404e81:	lea    rsi,[rip+0x585a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404e88:	lea    rcx,[rip+0x68d2]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404e8f:	mov    edx,0x287
  404e94:	call   403060 <__assert_fail@plt>
  404e99:	lea    rdi,[rip+0x5a1a]        # 40a8ba <flatcc_builder_padding_base@@Base+0x46a>
  404ea0:	lea    rsi,[rip+0x583b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404ea7:	lea    rcx,[rip+0x5a17]        # 40a8c5 <flatcc_builder_padding_base@@Base+0x475>
  404eae:	mov    edx,0x30f
  404eb3:	call   403060 <__assert_fail@plt>
  404eb8:	lea    rdi,[rip+0x69e3]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  404ebf:	lea    rsi,[rip+0x581c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  404ec6:	lea    rcx,[rip+0x6894]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  404ecd:	mov    edx,0x28b
  404ed2:	call   403060 <__assert_fail@plt>
  404ed7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404ee0 <flatcc_builder_start_buffer@@Base>:
  404ee0:	push   rbp
  404ee1:	push   r15
  404ee3:	push   r14
  404ee5:	push   rbx
  404ee6:	push   rax
  404ee7:	mov    r15d,ecx
  404eea:	mov    ebp,edx
  404eec:	mov    r14,rsi
  404eef:	mov    rbx,rdi
  404ef2:	movzx  esi,WORD PTR [rdi+0xe8]
  404ef9:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  404efe:	mov    ecx,eax
  404f00:	mov    eax,0xffffffff
  404f05:	test   ecx,ecx
  404f07:	jne    404fac <flatcc_builder_start_buffer@@Base+0xcc>
  404f0d:	mov    WORD PTR [rbx+0xe8],0x1
  404f16:	movzx  eax,WORD PTR [rbx+0xec]
  404f1d:	mov    rcx,QWORD PTR [rbx+0x30]
  404f21:	mov    WORD PTR [rcx+0x22],ax
  404f25:	mov    WORD PTR [rbx+0xec],bp
  404f2c:	movzx  eax,WORD PTR [rbx+0x10c]
  404f33:	mov    rcx,QWORD PTR [rbx+0x30]
  404f37:	mov    WORD PTR [rcx+0x20],ax
  404f3b:	mov    WORD PTR [rbx+0x10c],r15w
  404f43:	mov    eax,DWORD PTR [rbx+0xf8]
  404f49:	mov    rcx,QWORD PTR [rbx+0x30]
  404f4d:	mov    DWORD PTR [rcx+0x14],eax
  404f50:	mov    eax,DWORD PTR [rbx+0x100]
  404f56:	mov    rcx,QWORD PTR [rbx+0x30]
  404f5a:	mov    DWORD PTR [rcx+0x1c],eax
  404f5d:	mov    eax,DWORD PTR [rbx+0xf0]
  404f63:	mov    DWORD PTR [rbx+0xf8],eax
  404f69:	mov    eax,DWORD PTR [rbx+0xfc]
  404f6f:	lea    ecx,[rax+0x1]
  404f72:	mov    DWORD PTR [rbx+0xfc],ecx
  404f78:	mov    DWORD PTR [rbx+0x100],eax
  404f7e:	mov    eax,DWORD PTR [rbx+0x110]
  404f84:	mov    rcx,QWORD PTR [rbx+0x30]
  404f88:	mov    DWORD PTR [rcx+0x10],eax
  404f8b:	test   r14,r14
  404f8e:	jne    404f97 <flatcc_builder_start_buffer@@Base+0xb7>
  404f90:	lea    r14,[rip+0x54b9]        # 40a450 <flatcc_builder_padding_base@@Base>
  404f97:	mov    eax,DWORD PTR [r14]
  404f9a:	mov    DWORD PTR [rbx+0x110],eax
  404fa0:	mov    rax,QWORD PTR [rbx+0x30]
  404fa4:	mov    WORD PTR [rax+0xe],0x1
  404faa:	xor    eax,eax
  404fac:	add    rsp,0x8
  404fb0:	pop    rbx
  404fb1:	pop    r14
  404fb3:	pop    r15
  404fb5:	pop    rbp
  404fb6:	ret    
  404fb7:	nop    WORD PTR [rax+rax*1+0x0]
  404fc0:	push   rbp
  404fc1:	push   r15
  404fc3:	push   r14
  404fc5:	push   rbx
  404fc6:	push   rax
  404fc7:	mov    r14d,esi
  404fca:	mov    rbx,rdi
  404fcd:	movsxd rbp,DWORD PTR [rdi+0x104]
  404fd4:	lea    eax,[rbp+0x1]
  404fd7:	mov    DWORD PTR [rdi+0x104],eax
  404fdd:	cmp    ebp,DWORD PTR [rdi+0x108]
  404fe3:	jge    404ff6 <flatcc_builder_start_buffer@@Base+0x116>
  404fe5:	mov    rax,QWORD PTR [rbx+0x30]
  404fe9:	add    rax,0x24
  404fed:	mov    QWORD PTR [rbx+0x30],rax
  404ff1:	jmp    40508b <flatcc_builder_start_buffer@@Base+0x1ab>
  404ff6:	mov    eax,DWORD PTR [rbx+0x120]
  404ffc:	mov    r15d,0xffffffff
  405002:	test   eax,eax
  405004:	jle    40500e <flatcc_builder_start_buffer@@Base+0x12e>
  405006:	cmp    ebp,eax
  405008:	jge    4050c6 <flatcc_builder_start_buffer@@Base+0x1e6>
  40500e:	shl    rbp,0x2
  405012:	lea    rdx,[rbp*8+0x24]
  40501a:	add    rdx,rbp
  40501d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  405024:	jbe    405044 <flatcc_builder_start_buffer@@Base+0x164>
  405026:	lea    rsi,[rbx+0x98]
  40502d:	mov    rdi,QWORD PTR [rbx+0x40]
  405031:	xor    ecx,ecx
  405033:	mov    r8d,0x4
  405039:	call   QWORD PTR [rbx+0x50]
  40503c:	test   eax,eax
  40503e:	jne    4050d4 <flatcc_builder_start_buffer@@Base+0x1f4>
  405044:	lea    rax,[rbp*8+0x0]
  40504c:	add    rax,rbp
  40504f:	add    rax,QWORD PTR [rbx+0x98]
  405056:	mov    QWORD PTR [rbx+0x30],rax
  40505a:	je     4050c6 <flatcc_builder_start_buffer@@Base+0x1e6>
  40505c:	movabs rdx,0xe38e38e38e38e38f
  405066:	mulx   rdx,rcx,QWORD PTR [rbx+0xa0]
  40506f:	shr    rdx,0x5
  405073:	mov    ecx,DWORD PTR [rbx+0x120]
  405079:	cmp    ecx,edx
  40507b:	mov    esi,edx
  40507d:	cmovle esi,ecx
  405080:	test   ecx,ecx
  405082:	cmovle esi,edx
  405085:	mov    DWORD PTR [rbx+0x108],esi
  40508b:	mov    ecx,DWORD PTR [rbx+0x20]
  40508e:	mov    DWORD PTR [rax+0x8],ecx
  405091:	movzx  edx,WORD PTR [rbx+0xea]
  405098:	mov    WORD PTR [rax+0xc],dx
  40509c:	mov    WORD PTR [rbx+0xea],r14w
  4050a4:	mov    edx,DWORD PTR [rbx+0x28]
  4050a7:	mov    DWORD PTR [rax],edx
  4050a9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4050b0:	lea    eax,[rcx+rdx*1]
  4050b3:	add    eax,0x7
  4050b6:	and    eax,0xfffffff8
  4050b9:	mov    DWORD PTR [rbx+0x28],eax
  4050bc:	mov    DWORD PTR [rbx+0x20],0x0
  4050c3:	xor    r15d,r15d
  4050c6:	mov    eax,r15d
  4050c9:	add    rsp,0x8
  4050cd:	pop    rbx
  4050ce:	pop    r14
  4050d0:	pop    r15
  4050d2:	pop    rbp
  4050d3:	ret    
  4050d4:	lea    rdi,[rip+0x67c7]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4050db:	lea    rsi,[rip+0x5600]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4050e2:	lea    rcx,[rip+0x65f3]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  4050e9:	mov    edx,0x134
  4050ee:	call   403060 <__assert_fail@plt>
  4050f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4050fd:	nop    DWORD PTR [rax]

0000000000405100 <flatcc_builder_end_buffer@@Base>:
  405100:	push   rbp
  405101:	push   rbx
  405102:	push   rax
  405103:	mov    rcx,QWORD PTR [rdi+0x30]
  405107:	movzx  ecx,WORD PTR [rcx+0xe]
  40510b:	cmp    ecx,0x1
  40510e:	jne    40520e <flatcc_builder_end_buffer@@Base+0x10e>
  405114:	mov    eax,esi
  405116:	mov    rbx,rdi
  405119:	movzx  ecx,WORD PTR [rdi+0x10c]
  405120:	and    ecx,0x2
  405123:	xor    r9d,r9d
  405126:	cmp    DWORD PTR [rdi+0x100],0x0
  40512d:	setne  r9b
  405131:	or     r9d,ecx
  405134:	movzx  edi,WORD PTR [rdi+0xe8]
  40513b:	movzx  ecx,WORD PTR [rbx+0xec]
  405142:	cmp    di,cx
  405145:	jae    405150 <flatcc_builder_end_buffer@@Base+0x50>
  405147:	mov    WORD PTR [rbx+0xe8],cx
  40514e:	mov    edi,ecx
  405150:	lea    rsi,[rbx+0x110]
  405157:	movzx  edx,cx
  40515a:	movzx  r8d,di
  40515e:	mov    rdi,rbx
  405161:	mov    ecx,eax
  405163:	call   404b50 <flatcc_builder_create_buffer@@Base>
  405168:	mov    ebp,eax
  40516a:	test   eax,eax
  40516c:	je     405205 <flatcc_builder_end_buffer@@Base+0x105>
  405172:	mov    rax,QWORD PTR [rbx+0x30]
  405176:	mov    ecx,DWORD PTR [rax+0x14]
  405179:	mov    DWORD PTR [rbx+0xf8],ecx
  40517f:	mov    ecx,DWORD PTR [rax+0x1c]
  405182:	mov    DWORD PTR [rbx+0x100],ecx
  405188:	mov    ecx,DWORD PTR [rax+0x10]
  40518b:	mov    DWORD PTR [rbx+0x110],ecx
  405191:	movzx  eax,WORD PTR [rax+0x20]
  405195:	mov    WORD PTR [rbx+0x10c],ax
  40519c:	mov    rdi,QWORD PTR [rbx+0x18]
  4051a0:	mov    edx,DWORD PTR [rbx+0x20]
  4051a3:	xor    esi,esi
  4051a5:	call   403070 <memset@plt>
  4051aa:	mov    rax,QWORD PTR [rbx+0x30]
  4051ae:	mov    ecx,DWORD PTR [rax+0x8]
  4051b1:	mov    DWORD PTR [rbx+0x20],ecx
  4051b4:	mov    ecx,DWORD PTR [rax]
  4051b6:	mov    DWORD PTR [rbx+0x28],ecx
  4051b9:	mov    edx,DWORD PTR [rax+0x4]
  4051bc:	mov    rsi,rcx
  4051bf:	add    rsi,QWORD PTR [rbx+0x68]
  4051c3:	mov    QWORD PTR [rbx+0x18],rsi
  4051c7:	mov    esi,DWORD PTR [rbx+0x70]
  4051ca:	sub    esi,ecx
  4051cc:	cmp    esi,edx
  4051ce:	cmova  esi,edx
  4051d1:	mov    DWORD PTR [rbx+0x24],esi
  4051d4:	movzx  ecx,WORD PTR [rbx+0xea]
  4051db:	cmp    WORD PTR [rbx+0xe8],cx
  4051e2:	jae    4051eb <flatcc_builder_end_buffer@@Base+0xeb>
  4051e4:	mov    WORD PTR [rbx+0xe8],cx
  4051eb:	movzx  ecx,WORD PTR [rax+0xc]
  4051ef:	mov    WORD PTR [rbx+0xea],cx
  4051f6:	add    rax,0xffffffffffffffdc
  4051fa:	mov    QWORD PTR [rbx+0x30],rax
  4051fe:	add    DWORD PTR [rbx+0x104],0xffffffff
  405205:	mov    eax,ebp
  405207:	add    rsp,0x8
  40520b:	pop    rbx
  40520c:	pop    rbp
  40520d:	ret    
  40520e:	lea    rdi,[rip+0x5716]        # 40a92b <flatcc_builder_padding_base@@Base+0x4db>
  405215:	lea    rsi,[rip+0x54c6]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40521c:	lea    rcx,[rip+0x5734]        # 40a957 <flatcc_builder_padding_base@@Base+0x507>
  405223:	mov    edx,0x346
  405228:	call   403060 <__assert_fail@plt>
  40522d:	nop    DWORD PTR [rax]

0000000000405230 <flatcc_builder_start_struct@@Base>:
  405230:	push   r15
  405232:	push   r14
  405234:	push   rbx
  405235:	mov    r14,rsi
  405238:	mov    rbx,rdi
  40523b:	mov    esi,edx
  40523d:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  405242:	test   eax,eax
  405244:	je     40524d <flatcc_builder_start_struct@@Base+0x1d>
  405246:	xor    eax,eax
  405248:	jmp    4052e2 <flatcc_builder_start_struct@@Base+0xb2>
  40524d:	mov    rdx,QWORD PTR [rbx+0x30]
  405251:	mov    WORD PTR [rdx+0xe],0x2
  405257:	mov    ecx,DWORD PTR [rbx+0x28]
  40525a:	mov    esi,DWORD PTR [rbx+0x70]
  40525d:	mov    rax,QWORD PTR [rbx+0x68]
  405261:	add    rax,rcx
  405264:	mov    QWORD PTR [rbx+0x18],rax
  405268:	sub    esi,ecx
  40526a:	cmp    esi,0xfffffffc
  40526d:	mov    edi,0xfffffffc
  405272:	cmovb  edi,esi
  405275:	mov    DWORD PTR [rbx+0x24],edi
  405278:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  40527f:	mov    r15d,DWORD PTR [rbx+0x20]
  405283:	add    r14d,r15d
  405286:	mov    DWORD PTR [rbx+0x20],r14d
  40528a:	cmp    r14d,edi
  40528d:	jb     4052df <flatcc_builder_start_struct@@Base+0xaf>
  40528f:	add    r14d,0x1
  405293:	lea    rsi,[rbx+0x68]
  405297:	mov    rdi,QWORD PTR [rbx+0x40]
  40529b:	add    r14,rcx
  40529e:	mov    ecx,0x1
  4052a3:	mov    r8d,0x1
  4052a9:	mov    rdx,r14
  4052ac:	call   QWORD PTR [rbx+0x50]
  4052af:	test   eax,eax
  4052b1:	jne    405246 <flatcc_builder_start_struct@@Base+0x16>
  4052b3:	mov    ecx,DWORD PTR [rbx+0x28]
  4052b6:	mov    rax,rcx
  4052b9:	add    rax,QWORD PTR [rbx+0x68]
  4052bd:	mov    QWORD PTR [rbx+0x18],rax
  4052c1:	mov    edx,DWORD PTR [rbx+0x70]
  4052c4:	sub    edx,ecx
  4052c6:	cmp    edx,0xfffffffc
  4052c9:	mov    ecx,0xfffffffc
  4052ce:	cmovb  ecx,edx
  4052d1:	mov    DWORD PTR [rbx+0x24],ecx
  4052d4:	mov    rcx,QWORD PTR [rbx+0x30]
  4052d8:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4052df:	add    rax,r15
  4052e2:	pop    rbx
  4052e3:	pop    r14
  4052e5:	pop    r15
  4052e7:	ret    
  4052e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004052f0 <flatcc_builder_struct_edit@@Base>:
  4052f0:	mov    rax,QWORD PTR [rdi+0x18]
  4052f4:	ret    
  4052f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4052ff:	nop

0000000000405300 <flatcc_builder_end_struct@@Base>:
  405300:	push   rbp
  405301:	push   rbx
  405302:	push   rax
  405303:	mov    rax,QWORD PTR [rdi+0x30]
  405307:	movzx  eax,WORD PTR [rax+0xe]
  40530b:	cmp    eax,0x2
  40530e:	jne    4053a2 <flatcc_builder_end_struct@@Base+0xa2>
  405314:	mov    rbx,rdi
  405317:	mov    rsi,QWORD PTR [rdi+0x18]
  40531b:	mov    edx,DWORD PTR [rdi+0x20]
  40531e:	movzx  ecx,WORD PTR [rdi+0xea]
  405325:	call   404d90 <flatcc_builder_create_struct@@Base>
  40532a:	mov    ebp,eax
  40532c:	test   eax,eax
  40532e:	je     405399 <flatcc_builder_end_struct@@Base+0x99>
  405330:	mov    rdi,QWORD PTR [rbx+0x18]
  405334:	mov    edx,DWORD PTR [rbx+0x20]
  405337:	xor    esi,esi
  405339:	call   403070 <memset@plt>
  40533e:	mov    rax,QWORD PTR [rbx+0x30]
  405342:	mov    ecx,DWORD PTR [rax+0x8]
  405345:	mov    DWORD PTR [rbx+0x20],ecx
  405348:	mov    ecx,DWORD PTR [rax]
  40534a:	mov    DWORD PTR [rbx+0x28],ecx
  40534d:	mov    edx,DWORD PTR [rax+0x4]
  405350:	mov    rsi,rcx
  405353:	add    rsi,QWORD PTR [rbx+0x68]
  405357:	mov    QWORD PTR [rbx+0x18],rsi
  40535b:	mov    esi,DWORD PTR [rbx+0x70]
  40535e:	sub    esi,ecx
  405360:	cmp    esi,edx
  405362:	cmova  esi,edx
  405365:	mov    DWORD PTR [rbx+0x24],esi
  405368:	movzx  ecx,WORD PTR [rbx+0xea]
  40536f:	cmp    WORD PTR [rbx+0xe8],cx
  405376:	jae    40537f <flatcc_builder_end_struct@@Base+0x7f>
  405378:	mov    WORD PTR [rbx+0xe8],cx
  40537f:	movzx  ecx,WORD PTR [rax+0xc]
  405383:	mov    WORD PTR [rbx+0xea],cx
  40538a:	add    rax,0xffffffffffffffdc
  40538e:	mov    QWORD PTR [rbx+0x30],rax
  405392:	add    DWORD PTR [rbx+0x104],0xffffffff
  405399:	mov    eax,ebp
  40539b:	add    rsp,0x8
  40539f:	pop    rbx
  4053a0:	pop    rbp
  4053a1:	ret    
  4053a2:	lea    rdi,[rip+0x5607]        # 40a9b0 <flatcc_builder_padding_base@@Base+0x560>
  4053a9:	lea    rsi,[rip+0x5332]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4053b0:	lea    rcx,[rip+0x5625]        # 40a9dc <flatcc_builder_padding_base@@Base+0x58c>
  4053b7:	mov    edx,0x368
  4053bc:	call   403060 <__assert_fail@plt>
  4053c1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4053cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004053d0 <flatcc_builder_extend_vector@@Base>:
  4053d0:	push   r14
  4053d2:	push   rbx
  4053d3:	push   rax
  4053d4:	mov    rax,QWORD PTR [rdi+0x30]
  4053d8:	mov    ecx,DWORD PTR [rax+0x14]
  4053db:	add    ecx,esi
  4053dd:	jb     405470 <flatcc_builder_extend_vector@@Base+0xa0>
  4053e3:	cmp    ecx,DWORD PTR [rax+0x18]
  4053e6:	ja     405470 <flatcc_builder_extend_vector@@Base+0xa0>
  4053ec:	mov    rbx,rdi
  4053ef:	mov    DWORD PTR [rax+0x14],ecx
  4053f2:	mov    rax,QWORD PTR [rdi+0x30]
  4053f6:	imul   esi,DWORD PTR [rax+0x10]
  4053fa:	mov    r14d,DWORD PTR [rdi+0x20]
  4053fe:	add    esi,r14d
  405401:	mov    DWORD PTR [rdi+0x20],esi
  405404:	cmp    esi,DWORD PTR [rdi+0x24]
  405407:	jae    40540f <flatcc_builder_extend_vector@@Base+0x3f>
  405409:	mov    rax,QWORD PTR [rbx+0x18]
  40540d:	jmp    405465 <flatcc_builder_extend_vector@@Base+0x95>
  40540f:	add    esi,0x1
  405412:	lea    rax,[rbx+0x68]
  405416:	mov    rdi,QWORD PTR [rbx+0x40]
  40541a:	mov    edx,DWORD PTR [rbx+0x28]
  40541d:	add    rdx,rsi
  405420:	mov    ecx,0x1
  405425:	mov    r8d,0x1
  40542b:	mov    rsi,rax
  40542e:	call   QWORD PTR [rbx+0x50]
  405431:	test   eax,eax
  405433:	je     405439 <flatcc_builder_extend_vector@@Base+0x69>
  405435:	xor    eax,eax
  405437:	jmp    405468 <flatcc_builder_extend_vector@@Base+0x98>
  405439:	mov    ecx,DWORD PTR [rbx+0x28]
  40543c:	mov    rax,rcx
  40543f:	add    rax,QWORD PTR [rbx+0x68]
  405443:	mov    QWORD PTR [rbx+0x18],rax
  405447:	mov    edx,DWORD PTR [rbx+0x70]
  40544a:	sub    edx,ecx
  40544c:	cmp    edx,0xfffffffc
  40544f:	mov    ecx,0xfffffffc
  405454:	cmovb  ecx,edx
  405457:	mov    DWORD PTR [rbx+0x24],ecx
  40545a:	mov    rcx,QWORD PTR [rbx+0x30]
  40545e:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405465:	add    rax,r14
  405468:	add    rsp,0x8
  40546c:	pop    rbx
  40546d:	pop    r14
  40546f:	ret    
  405470:	lea    rdi,[rip+0x6334]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405477:	lea    rsi,[rip+0x5264]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40547e:	lea    rcx,[rip+0x6341]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405485:	mov    edx,0x37c
  40548a:	call   403060 <__assert_fail@plt>
  40548f:	nop

0000000000405490 <flatcc_builder_vector_push@@Base>:
  405490:	push   r15
  405492:	push   r14
  405494:	push   r13
  405496:	push   r12
  405498:	push   rbx
  405499:	mov    rax,QWORD PTR [rdi+0x30]
  40549d:	movzx  ecx,WORD PTR [rax+0xe]
  4054a1:	cmp    ecx,0x4
  4054a4:	jne    405559 <flatcc_builder_vector_push@@Base+0xc9>
  4054aa:	mov    ecx,DWORD PTR [rax+0x14]
  4054ad:	cmp    ecx,DWORD PTR [rax+0x18]
  4054b0:	ja     405578 <flatcc_builder_vector_push@@Base+0xe8>
  4054b6:	mov    r14,rsi
  4054b9:	mov    rbx,rdi
  4054bc:	add    ecx,0x1
  4054bf:	mov    DWORD PTR [rax+0x14],ecx
  4054c2:	mov    rax,QWORD PTR [rdi+0x30]
  4054c6:	mov    r15d,DWORD PTR [rax+0x10]
  4054ca:	mov    r13d,DWORD PTR [rdi+0x20]
  4054ce:	lea    eax,[r15+r13*1]
  4054d2:	mov    DWORD PTR [rdi+0x20],eax
  4054d5:	cmp    eax,DWORD PTR [rdi+0x24]
  4054d8:	jae    4054e5 <flatcc_builder_vector_push@@Base+0x55>
  4054da:	mov    r12,QWORD PTR [rbx+0x18]
  4054de:	add    r12,r13
  4054e1:	jne    40553e <flatcc_builder_vector_push@@Base+0xae>
  4054e3:	jmp    405508 <flatcc_builder_vector_push@@Base+0x78>
  4054e5:	add    eax,0x1
  4054e8:	lea    rsi,[rbx+0x68]
  4054ec:	mov    rdi,QWORD PTR [rbx+0x40]
  4054f0:	mov    edx,DWORD PTR [rbx+0x28]
  4054f3:	add    rdx,rax
  4054f6:	mov    ecx,0x1
  4054fb:	mov    r8d,0x1
  405501:	call   QWORD PTR [rbx+0x50]
  405504:	test   eax,eax
  405506:	je     40550d <flatcc_builder_vector_push@@Base+0x7d>
  405508:	xor    r12d,r12d
  40550b:	jmp    40554c <flatcc_builder_vector_push@@Base+0xbc>
  40550d:	mov    eax,DWORD PTR [rbx+0x28]
  405510:	mov    r12,rax
  405513:	add    r12,QWORD PTR [rbx+0x68]
  405517:	mov    QWORD PTR [rbx+0x18],r12
  40551b:	mov    ecx,DWORD PTR [rbx+0x70]
  40551e:	sub    ecx,eax
  405520:	cmp    ecx,0xfffffffc
  405523:	mov    eax,0xfffffffc
  405528:	cmovb  eax,ecx
  40552b:	mov    DWORD PTR [rbx+0x24],eax
  40552e:	mov    rax,QWORD PTR [rbx+0x30]
  405532:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405539:	add    r12,r13
  40553c:	je     405508 <flatcc_builder_vector_push@@Base+0x78>
  40553e:	mov    rdi,r12
  405541:	mov    rsi,r14
  405544:	mov    rdx,r15
  405547:	call   4030b0 <memcpy@plt>
  40554c:	mov    rax,r12
  40554f:	pop    rbx
  405550:	pop    r12
  405552:	pop    r13
  405554:	pop    r14
  405556:	pop    r15
  405558:	ret    
  405559:	lea    rdi,[rip+0x54bf]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  405560:	lea    rsi,[rip+0x517b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405567:	lea    rcx,[rip+0x54dd]        # 40aa4b <flatcc_builder_padding_base@@Base+0x5fb>
  40556e:	mov    edx,0x38b
  405573:	call   403060 <__assert_fail@plt>
  405578:	lea    rdi,[rip+0x550f]        # 40aa8e <flatcc_builder_padding_base@@Base+0x63e>
  40557f:	lea    rsi,[rip+0x515c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405586:	lea    rcx,[rip+0x54be]        # 40aa4b <flatcc_builder_padding_base@@Base+0x5fb>
  40558d:	mov    edx,0x38c
  405592:	call   403060 <__assert_fail@plt>
  405597:	nop    WORD PTR [rax+rax*1+0x0]

00000000004055a0 <flatcc_builder_append_vector@@Base>:
  4055a0:	push   r15
  4055a2:	push   r14
  4055a4:	push   r13
  4055a6:	push   r12
  4055a8:	push   rbx
  4055a9:	mov    rax,QWORD PTR [rdi+0x30]
  4055ad:	movzx  ecx,WORD PTR [rax+0xe]
  4055b1:	cmp    ecx,0x4
  4055b4:	jne    405692 <flatcc_builder_append_vector@@Base+0xf2>
  4055ba:	mov    r15,rdx
  4055bd:	mov    ecx,DWORD PTR [rax+0x14]
  4055c0:	add    ecx,r15d
  4055c3:	jb     405673 <flatcc_builder_append_vector@@Base+0xd3>
  4055c9:	cmp    ecx,DWORD PTR [rax+0x18]
  4055cc:	ja     405673 <flatcc_builder_append_vector@@Base+0xd3>
  4055d2:	mov    r14,rsi
  4055d5:	mov    rbx,rdi
  4055d8:	mov    DWORD PTR [rax+0x14],ecx
  4055db:	mov    rax,QWORD PTR [rdi+0x30]
  4055df:	imul   r15d,DWORD PTR [rax+0x10]
  4055e4:	mov    r13d,DWORD PTR [rdi+0x20]
  4055e8:	lea    eax,[r15+r13*1]
  4055ec:	mov    DWORD PTR [rdi+0x20],eax
  4055ef:	cmp    eax,DWORD PTR [rdi+0x24]
  4055f2:	jae    4055ff <flatcc_builder_append_vector@@Base+0x5f>
  4055f4:	mov    r12,QWORD PTR [rbx+0x18]
  4055f8:	add    r12,r13
  4055fb:	jne    405658 <flatcc_builder_append_vector@@Base+0xb8>
  4055fd:	jmp    405622 <flatcc_builder_append_vector@@Base+0x82>
  4055ff:	add    eax,0x1
  405602:	lea    rsi,[rbx+0x68]
  405606:	mov    rdi,QWORD PTR [rbx+0x40]
  40560a:	mov    edx,DWORD PTR [rbx+0x28]
  40560d:	add    rdx,rax
  405610:	mov    ecx,0x1
  405615:	mov    r8d,0x1
  40561b:	call   QWORD PTR [rbx+0x50]
  40561e:	test   eax,eax
  405620:	je     405627 <flatcc_builder_append_vector@@Base+0x87>
  405622:	xor    r12d,r12d
  405625:	jmp    405666 <flatcc_builder_append_vector@@Base+0xc6>
  405627:	mov    eax,DWORD PTR [rbx+0x28]
  40562a:	mov    r12,rax
  40562d:	add    r12,QWORD PTR [rbx+0x68]
  405631:	mov    QWORD PTR [rbx+0x18],r12
  405635:	mov    ecx,DWORD PTR [rbx+0x70]
  405638:	sub    ecx,eax
  40563a:	cmp    ecx,0xfffffffc
  40563d:	mov    eax,0xfffffffc
  405642:	cmovb  eax,ecx
  405645:	mov    DWORD PTR [rbx+0x24],eax
  405648:	mov    rax,QWORD PTR [rbx+0x30]
  40564c:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405653:	add    r12,r13
  405656:	je     405622 <flatcc_builder_append_vector@@Base+0x82>
  405658:	mov    edx,r15d
  40565b:	mov    rdi,r12
  40565e:	mov    rsi,r14
  405661:	call   4030b0 <memcpy@plt>
  405666:	mov    rax,r12
  405669:	pop    rbx
  40566a:	pop    r12
  40566c:	pop    r13
  40566e:	pop    r14
  405670:	pop    r15
  405672:	ret    
  405673:	lea    rdi,[rip+0x6131]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  40567a:	lea    rsi,[rip+0x5061]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405681:	lea    rcx,[rip+0x613e]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405688:	mov    edx,0x37c
  40568d:	call   403060 <__assert_fail@plt>
  405692:	lea    rdi,[rip+0x5386]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  405699:	lea    rsi,[rip+0x5042]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4056a0:	lea    rcx,[rip+0x5424]        # 40aacb <flatcc_builder_padding_base@@Base+0x67b>
  4056a7:	mov    edx,0x393
  4056ac:	call   403060 <__assert_fail@plt>
  4056b1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4056bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004056c0 <flatcc_builder_extend_offset_vector@@Base>:
  4056c0:	push   r14
  4056c2:	push   rbx
  4056c3:	push   rax
  4056c4:	mov    rax,QWORD PTR [rdi+0x30]
  4056c8:	mov    ecx,DWORD PTR [rax+0x14]
  4056cb:	add    ecx,esi
  4056cd:	jb     405755 <flatcc_builder_extend_offset_vector@@Base+0x95>
  4056d3:	cmp    ecx,0x40000000
  4056d9:	jae    405755 <flatcc_builder_extend_offset_vector@@Base+0x95>
  4056db:	mov    rbx,rdi
  4056de:	mov    DWORD PTR [rax+0x14],ecx
  4056e1:	mov    r14d,DWORD PTR [rdi+0x20]
  4056e5:	lea    eax,[r14+rsi*4]
  4056e9:	mov    DWORD PTR [rdi+0x20],eax
  4056ec:	cmp    eax,DWORD PTR [rdi+0x24]
  4056ef:	jae    4056f7 <flatcc_builder_extend_offset_vector@@Base+0x37>
  4056f1:	mov    rax,QWORD PTR [rbx+0x18]
  4056f5:	jmp    40574a <flatcc_builder_extend_offset_vector@@Base+0x8a>
  4056f7:	add    eax,0x1
  4056fa:	lea    rsi,[rbx+0x68]
  4056fe:	mov    rdi,QWORD PTR [rbx+0x40]
  405702:	mov    edx,DWORD PTR [rbx+0x28]
  405705:	add    rdx,rax
  405708:	mov    ecx,0x1
  40570d:	mov    r8d,0x1
  405713:	call   QWORD PTR [rbx+0x50]
  405716:	test   eax,eax
  405718:	je     40571e <flatcc_builder_extend_offset_vector@@Base+0x5e>
  40571a:	xor    eax,eax
  40571c:	jmp    40574d <flatcc_builder_extend_offset_vector@@Base+0x8d>
  40571e:	mov    ecx,DWORD PTR [rbx+0x28]
  405721:	mov    rax,rcx
  405724:	add    rax,QWORD PTR [rbx+0x68]
  405728:	mov    QWORD PTR [rbx+0x18],rax
  40572c:	mov    edx,DWORD PTR [rbx+0x70]
  40572f:	sub    edx,ecx
  405731:	cmp    edx,0xfffffffc
  405734:	mov    ecx,0xfffffffc
  405739:	cmovb  ecx,edx
  40573c:	mov    DWORD PTR [rbx+0x24],ecx
  40573f:	mov    rcx,QWORD PTR [rbx+0x30]
  405743:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40574a:	add    rax,r14
  40574d:	add    rsp,0x8
  405751:	pop    rbx
  405752:	pop    r14
  405754:	ret    
  405755:	lea    rdi,[rip+0x604f]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  40575c:	lea    rsi,[rip+0x4f7f]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405763:	lea    rcx,[rip+0x605c]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  40576a:	mov    edx,0x37c
  40576f:	call   403060 <__assert_fail@plt>
  405774:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40577e:	xchg   ax,ax

0000000000405780 <flatcc_builder_offset_vector_push@@Base>:
  405780:	push   rbp
  405781:	push   r14
  405783:	push   rbx
  405784:	mov    rax,QWORD PTR [rdi+0x30]
  405788:	movzx  ecx,WORD PTR [rax+0xe]
  40578c:	cmp    ecx,0x5
  40578f:	jne    405825 <flatcc_builder_offset_vector_push@@Base+0xa5>
  405795:	mov    ecx,DWORD PTR [rax+0x14]
  405798:	cmp    ecx,0x3fffffff
  40579e:	je     4057e8 <flatcc_builder_offset_vector_push@@Base+0x68>
  4057a0:	mov    r14d,esi
  4057a3:	mov    rbx,rdi
  4057a6:	add    ecx,0x1
  4057a9:	mov    DWORD PTR [rax+0x14],ecx
  4057ac:	mov    ebp,DWORD PTR [rdi+0x20]
  4057af:	lea    eax,[rbp+0x4]
  4057b2:	mov    DWORD PTR [rdi+0x20],eax
  4057b5:	cmp    eax,DWORD PTR [rdi+0x24]
  4057b8:	jae    4057c5 <flatcc_builder_offset_vector_push@@Base+0x45>
  4057ba:	mov    rax,QWORD PTR [rbx+0x18]
  4057be:	add    rax,rbp
  4057c1:	jne    40581d <flatcc_builder_offset_vector_push@@Base+0x9d>
  4057c3:	jmp    4057e8 <flatcc_builder_offset_vector_push@@Base+0x68>
  4057c5:	lea    eax,[rbp+0x5]
  4057c8:	lea    rsi,[rbx+0x68]
  4057cc:	mov    rdi,QWORD PTR [rbx+0x40]
  4057d0:	mov    edx,DWORD PTR [rbx+0x28]
  4057d3:	add    rdx,rax
  4057d6:	mov    ecx,0x1
  4057db:	mov    r8d,0x1
  4057e1:	call   QWORD PTR [rbx+0x50]
  4057e4:	test   eax,eax
  4057e6:	je     4057ec <flatcc_builder_offset_vector_push@@Base+0x6c>
  4057e8:	xor    eax,eax
  4057ea:	jmp    405820 <flatcc_builder_offset_vector_push@@Base+0xa0>
  4057ec:	mov    ecx,DWORD PTR [rbx+0x28]
  4057ef:	mov    rax,rcx
  4057f2:	add    rax,QWORD PTR [rbx+0x68]
  4057f6:	mov    QWORD PTR [rbx+0x18],rax
  4057fa:	mov    edx,DWORD PTR [rbx+0x70]
  4057fd:	sub    edx,ecx
  4057ff:	cmp    edx,0xfffffffc
  405802:	mov    ecx,0xfffffffc
  405807:	cmovb  ecx,edx
  40580a:	mov    DWORD PTR [rbx+0x24],ecx
  40580d:	mov    rcx,QWORD PTR [rbx+0x30]
  405811:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405818:	add    rax,rbp
  40581b:	je     4057e8 <flatcc_builder_offset_vector_push@@Base+0x68>
  40581d:	mov    DWORD PTR [rax],r14d
  405820:	pop    rbx
  405821:	pop    r14
  405823:	pop    rbp
  405824:	ret    
  405825:	lea    rdi,[rip+0x52ec]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  40582c:	lea    rsi,[rip+0x4eaf]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405833:	lea    rcx,[rip+0x5311]        # 40ab4b <flatcc_builder_padding_base@@Base+0x6fb>
  40583a:	mov    edx,0x3a6
  40583f:	call   403060 <__assert_fail@plt>
  405844:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40584e:	xchg   ax,ax

0000000000405850 <flatcc_builder_append_offset_vector@@Base>:
  405850:	push   r15
  405852:	push   r14
  405854:	push   r13
  405856:	push   r12
  405858:	push   rbx
  405859:	mov    rax,QWORD PTR [rdi+0x30]
  40585d:	movzx  ecx,WORD PTR [rax+0xe]
  405861:	cmp    ecx,0x5
  405864:	jne    405941 <flatcc_builder_append_offset_vector@@Base+0xf1>
  40586a:	mov    r15,rdx
  40586d:	mov    ecx,DWORD PTR [rax+0x14]
  405870:	add    ecx,r15d
  405873:	jb     405922 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405879:	cmp    ecx,0x40000000
  40587f:	jae    405922 <flatcc_builder_append_offset_vector@@Base+0xd2>
  405885:	mov    r14,rsi
  405888:	mov    rbx,rdi
  40588b:	mov    DWORD PTR [rax+0x14],ecx
  40588e:	mov    r13d,DWORD PTR [rdi+0x20]
  405892:	lea    eax,[r13+r15*4+0x0]
  405897:	mov    DWORD PTR [rdi+0x20],eax
  40589a:	cmp    eax,DWORD PTR [rdi+0x24]
  40589d:	jae    4058aa <flatcc_builder_append_offset_vector@@Base+0x5a>
  40589f:	mov    r12,QWORD PTR [rbx+0x18]
  4058a3:	add    r12,r13
  4058a6:	jne    405903 <flatcc_builder_append_offset_vector@@Base+0xb3>
  4058a8:	jmp    4058cd <flatcc_builder_append_offset_vector@@Base+0x7d>
  4058aa:	add    eax,0x1
  4058ad:	lea    rsi,[rbx+0x68]
  4058b1:	mov    rdi,QWORD PTR [rbx+0x40]
  4058b5:	mov    edx,DWORD PTR [rbx+0x28]
  4058b8:	add    rdx,rax
  4058bb:	mov    ecx,0x1
  4058c0:	mov    r8d,0x1
  4058c6:	call   QWORD PTR [rbx+0x50]
  4058c9:	test   eax,eax
  4058cb:	je     4058d2 <flatcc_builder_append_offset_vector@@Base+0x82>
  4058cd:	xor    r12d,r12d
  4058d0:	jmp    405915 <flatcc_builder_append_offset_vector@@Base+0xc5>
  4058d2:	mov    eax,DWORD PTR [rbx+0x28]
  4058d5:	mov    r12,rax
  4058d8:	add    r12,QWORD PTR [rbx+0x68]
  4058dc:	mov    QWORD PTR [rbx+0x18],r12
  4058e0:	mov    ecx,DWORD PTR [rbx+0x70]
  4058e3:	sub    ecx,eax
  4058e5:	cmp    ecx,0xfffffffc
  4058e8:	mov    eax,0xfffffffc
  4058ed:	cmovb  eax,ecx
  4058f0:	mov    DWORD PTR [rbx+0x24],eax
  4058f3:	mov    rax,QWORD PTR [rbx+0x30]
  4058f7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4058fe:	add    r12,r13
  405901:	je     4058cd <flatcc_builder_append_offset_vector@@Base+0x7d>
  405903:	shl    r15d,0x2
  405907:	mov    edx,r15d
  40590a:	mov    rdi,r12
  40590d:	mov    rsi,r14
  405910:	call   4030b0 <memcpy@plt>
  405915:	mov    rax,r12
  405918:	pop    rbx
  405919:	pop    r12
  40591b:	pop    r13
  40591d:	pop    r14
  40591f:	pop    r15
  405921:	ret    
  405922:	lea    rdi,[rip+0x5e82]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405929:	lea    rsi,[rip+0x4db2]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405930:	lea    rcx,[rip+0x5e8f]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405937:	mov    edx,0x37c
  40593c:	call   403060 <__assert_fail@plt>
  405941:	lea    rdi,[rip+0x51d0]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  405948:	lea    rsi,[rip+0x4d93]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40594f:	lea    rcx,[rip+0x5257]        # 40abad <flatcc_builder_padding_base@@Base+0x75d>
  405956:	mov    edx,0x3b4
  40595b:	call   403060 <__assert_fail@plt>

0000000000405960 <flatcc_builder_extend_string@@Base>:
  405960:	push   r14
  405962:	push   rbx
  405963:	push   rax
  405964:	mov    rax,QWORD PTR [rdi+0x30]
  405968:	movzx  ecx,WORD PTR [rax+0xe]
  40596c:	cmp    ecx,0x6
  40596f:	jne    4059fc <flatcc_builder_extend_string@@Base+0x9c>
  405975:	mov    ecx,DWORD PTR [rax+0x14]
  405978:	add    ecx,esi
  40597a:	jb     405a1b <flatcc_builder_extend_string@@Base+0xbb>
  405980:	mov    rbx,rdi
  405983:	mov    DWORD PTR [rax+0x14],ecx
  405986:	mov    r14d,DWORD PTR [rdi+0x20]
  40598a:	add    esi,r14d
  40598d:	mov    DWORD PTR [rdi+0x20],esi
  405990:	cmp    esi,DWORD PTR [rdi+0x24]
  405993:	jae    40599b <flatcc_builder_extend_string@@Base+0x3b>
  405995:	mov    rax,QWORD PTR [rbx+0x18]
  405999:	jmp    4059f1 <flatcc_builder_extend_string@@Base+0x91>
  40599b:	add    esi,0x1
  40599e:	lea    rax,[rbx+0x68]
  4059a2:	mov    rdi,QWORD PTR [rbx+0x40]
  4059a6:	mov    edx,DWORD PTR [rbx+0x28]
  4059a9:	add    rdx,rsi
  4059ac:	mov    ecx,0x1
  4059b1:	mov    r8d,0x1
  4059b7:	mov    rsi,rax
  4059ba:	call   QWORD PTR [rbx+0x50]
  4059bd:	test   eax,eax
  4059bf:	je     4059c5 <flatcc_builder_extend_string@@Base+0x65>
  4059c1:	xor    eax,eax
  4059c3:	jmp    4059f4 <flatcc_builder_extend_string@@Base+0x94>
  4059c5:	mov    ecx,DWORD PTR [rbx+0x28]
  4059c8:	mov    rax,rcx
  4059cb:	add    rax,QWORD PTR [rbx+0x68]
  4059cf:	mov    QWORD PTR [rbx+0x18],rax
  4059d3:	mov    edx,DWORD PTR [rbx+0x70]
  4059d6:	sub    edx,ecx
  4059d8:	cmp    edx,0xfffffffc
  4059db:	mov    ecx,0xfffffffc
  4059e0:	cmovb  ecx,edx
  4059e3:	mov    DWORD PTR [rbx+0x24],ecx
  4059e6:	mov    rcx,QWORD PTR [rbx+0x30]
  4059ea:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4059f1:	add    rax,r14
  4059f4:	add    rsp,0x8
  4059f8:	pop    rbx
  4059f9:	pop    r14
  4059fb:	ret    
  4059fc:	lea    rdi,[rip+0x521e]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  405a03:	lea    rsi,[rip+0x4cd8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405a0a:	lea    rcx,[rip+0x523c]        # 40ac4d <flatcc_builder_padding_base@@Base+0x7fd>
  405a11:	mov    edx,0x3bd
  405a16:	call   403060 <__assert_fail@plt>
  405a1b:	lea    rdi,[rip+0x5d89]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405a22:	lea    rsi,[rip+0x4cb9]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405a29:	lea    rcx,[rip+0x5d96]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405a30:	mov    edx,0x37c
  405a35:	call   403060 <__assert_fail@plt>
  405a3a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405a40 <flatcc_builder_append_string@@Base>:
  405a40:	push   r15
  405a42:	push   r14
  405a44:	push   r13
  405a46:	push   r12
  405a48:	push   rbx
  405a49:	mov    rax,QWORD PTR [rdi+0x30]
  405a4d:	movzx  ecx,WORD PTR [rax+0xe]
  405a51:	cmp    ecx,0x6
  405a54:	jne    405b01 <flatcc_builder_append_string@@Base+0xc1>
  405a5a:	mov    r15,rdx
  405a5d:	mov    ecx,DWORD PTR [rax+0x14]
  405a60:	add    ecx,r15d
  405a63:	jb     405b20 <flatcc_builder_append_string@@Base+0xe0>
  405a69:	mov    r14,rsi
  405a6c:	mov    rbx,rdi
  405a6f:	mov    DWORD PTR [rax+0x14],ecx
  405a72:	mov    r13d,DWORD PTR [rdi+0x20]
  405a76:	lea    eax,[r15+r13*1]
  405a7a:	mov    DWORD PTR [rdi+0x20],eax
  405a7d:	cmp    eax,DWORD PTR [rdi+0x24]
  405a80:	jae    405a8d <flatcc_builder_append_string@@Base+0x4d>
  405a82:	mov    r12,QWORD PTR [rbx+0x18]
  405a86:	add    r12,r13
  405a89:	jne    405ae6 <flatcc_builder_append_string@@Base+0xa6>
  405a8b:	jmp    405ab0 <flatcc_builder_append_string@@Base+0x70>
  405a8d:	add    eax,0x1
  405a90:	lea    rsi,[rbx+0x68]
  405a94:	mov    rdi,QWORD PTR [rbx+0x40]
  405a98:	mov    edx,DWORD PTR [rbx+0x28]
  405a9b:	add    rdx,rax
  405a9e:	mov    ecx,0x1
  405aa3:	mov    r8d,0x1
  405aa9:	call   QWORD PTR [rbx+0x50]
  405aac:	test   eax,eax
  405aae:	je     405ab5 <flatcc_builder_append_string@@Base+0x75>
  405ab0:	xor    r12d,r12d
  405ab3:	jmp    405af4 <flatcc_builder_append_string@@Base+0xb4>
  405ab5:	mov    eax,DWORD PTR [rbx+0x28]
  405ab8:	mov    r12,rax
  405abb:	add    r12,QWORD PTR [rbx+0x68]
  405abf:	mov    QWORD PTR [rbx+0x18],r12
  405ac3:	mov    ecx,DWORD PTR [rbx+0x70]
  405ac6:	sub    ecx,eax
  405ac8:	cmp    ecx,0xfffffffc
  405acb:	mov    eax,0xfffffffc
  405ad0:	cmovb  eax,ecx
  405ad3:	mov    DWORD PTR [rbx+0x24],eax
  405ad6:	mov    rax,QWORD PTR [rbx+0x30]
  405ada:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405ae1:	add    r12,r13
  405ae4:	je     405ab0 <flatcc_builder_append_string@@Base+0x70>
  405ae6:	mov    edx,r15d
  405ae9:	mov    rdi,r12
  405aec:	mov    rsi,r14
  405aef:	call   4030b0 <memcpy@plt>
  405af4:	mov    rax,r12
  405af7:	pop    rbx
  405af8:	pop    r12
  405afa:	pop    r13
  405afc:	pop    r14
  405afe:	pop    r15
  405b00:	ret    
  405b01:	lea    rdi,[rip+0x5119]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  405b08:	lea    rsi,[rip+0x4bd3]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405b0f:	lea    rcx,[rip+0x5176]        # 40ac8c <flatcc_builder_padding_base@@Base+0x83c>
  405b16:	mov    edx,0x3c6
  405b1b:	call   403060 <__assert_fail@plt>
  405b20:	lea    rdi,[rip+0x5c84]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405b27:	lea    rsi,[rip+0x4bb4]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405b2e:	lea    rcx,[rip+0x5c91]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405b35:	mov    edx,0x37c
  405b3a:	call   403060 <__assert_fail@plt>
  405b3f:	nop

0000000000405b40 <flatcc_builder_append_string_str@@Base>:
  405b40:	push   r14
  405b42:	push   rbx
  405b43:	push   rax
  405b44:	mov    rbx,rsi
  405b47:	mov    r14,rdi
  405b4a:	mov    rdi,rsi
  405b4d:	call   403050 <strlen@plt>
  405b52:	mov    rdi,r14
  405b55:	mov    rsi,rbx
  405b58:	mov    rdx,rax
  405b5b:	add    rsp,0x8
  405b5f:	pop    rbx
  405b60:	pop    r14
  405b62:	jmp    405a40 <flatcc_builder_append_string@@Base>
  405b67:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405b70 <flatcc_builder_append_string_strn@@Base>:
  405b70:	push   r15
  405b72:	push   r14
  405b74:	push   rbx
  405b75:	mov    rbx,rdx
  405b78:	mov    r14,rsi
  405b7b:	mov    r15,rdi
  405b7e:	xor    esi,esi
  405b80:	mov    rdi,r14
  405b83:	call   403080 <memchr@plt>
  405b88:	mov    rcx,rax
  405b8b:	sub    rcx,r14
  405b8e:	test   rax,rax
  405b91:	cmovne rbx,rcx
  405b95:	mov    rdi,r15
  405b98:	mov    rsi,r14
  405b9b:	mov    rdx,rbx
  405b9e:	pop    rbx
  405b9f:	pop    r14
  405ba1:	pop    r15
  405ba3:	jmp    405a40 <flatcc_builder_append_string@@Base>
  405ba8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405bb0 <flatcc_builder_truncate_vector@@Base>:
  405bb0:	push   rax
  405bb1:	mov    rcx,QWORD PTR [rdi+0x30]
  405bb5:	movzx  edx,WORD PTR [rcx+0xe]
  405bb9:	cmp    edx,0x4
  405bbc:	jne    405bf3 <flatcc_builder_truncate_vector@@Base+0x43>
  405bbe:	mov    rax,rsi
  405bc1:	mov    edx,DWORD PTR [rcx+0x14]
  405bc4:	cmp    rdx,rsi
  405bc7:	jb     405c12 <flatcc_builder_truncate_vector@@Base+0x62>
  405bc9:	sub    edx,eax
  405bcb:	mov    DWORD PTR [rcx+0x14],edx
  405bce:	mov    rcx,QWORD PTR [rdi+0x30]
  405bd2:	imul   eax,DWORD PTR [rcx+0x10]
  405bd6:	mov    ecx,DWORD PTR [rdi+0x20]
  405bd9:	sub    ecx,eax
  405bdb:	mov    DWORD PTR [rdi+0x20],ecx
  405bde:	add    rcx,QWORD PTR [rdi+0x18]
  405be2:	xor    esi,esi
  405be4:	mov    rdi,rcx
  405be7:	mov    rdx,rax
  405bea:	call   403070 <memset@plt>
  405bef:	xor    eax,eax
  405bf1:	pop    rcx
  405bf2:	ret    
  405bf3:	lea    rdi,[rip+0x4e25]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  405bfa:	lea    rsi,[rip+0x4ae1]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405c01:	lea    rcx,[rip+0x50d1]        # 40acd9 <flatcc_builder_padding_base@@Base+0x889>
  405c08:	mov    edx,0x3d9
  405c0d:	call   403060 <__assert_fail@plt>
  405c12:	lea    rdi,[rip+0x50ff]        # 40ad18 <flatcc_builder_padding_base@@Base+0x8c8>
  405c19:	lea    rsi,[rip+0x4ac2]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405c20:	lea    rcx,[rip+0x50b2]        # 40acd9 <flatcc_builder_padding_base@@Base+0x889>
  405c27:	mov    edx,0x3da
  405c2c:	call   403060 <__assert_fail@plt>
  405c31:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405c40 <flatcc_builder_truncate_offset_vector@@Base>:
  405c40:	push   rax
  405c41:	mov    rcx,QWORD PTR [rdi+0x30]
  405c45:	movzx  edx,WORD PTR [rcx+0xe]
  405c49:	cmp    edx,0x5
  405c4c:	jne    405c80 <flatcc_builder_truncate_offset_vector@@Base+0x40>
  405c4e:	mov    rax,rsi
  405c51:	mov    edx,DWORD PTR [rcx+0x14]
  405c54:	sub    edx,eax
  405c56:	jb     405c9f <flatcc_builder_truncate_offset_vector@@Base+0x5f>
  405c58:	mov    DWORD PTR [rcx+0x14],edx
  405c5b:	mov    rcx,QWORD PTR [rdi+0x30]
  405c5f:	imul   eax,DWORD PTR [rcx+0x10]
  405c63:	mov    ecx,DWORD PTR [rdi+0x20]
  405c66:	sub    ecx,eax
  405c68:	mov    DWORD PTR [rdi+0x20],ecx
  405c6b:	add    rcx,QWORD PTR [rdi+0x18]
  405c6f:	xor    esi,esi
  405c71:	mov    rdi,rcx
  405c74:	mov    rdx,rax
  405c77:	call   403070 <memset@plt>
  405c7c:	xor    eax,eax
  405c7e:	pop    rcx
  405c7f:	ret    
  405c80:	lea    rdi,[rip+0x4e91]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  405c87:	lea    rsi,[rip+0x4a54]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405c8e:	lea    rcx,[rip+0x50a7]        # 40ad3c <flatcc_builder_padding_base@@Base+0x8ec>
  405c95:	mov    edx,0x3e2
  405c9a:	call   403060 <__assert_fail@plt>
  405c9f:	lea    rdi,[rip+0x50dc]        # 40ad82 <flatcc_builder_padding_base@@Base+0x932>
  405ca6:	lea    rsi,[rip+0x4a35]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405cad:	lea    rcx,[rip+0x5088]        # 40ad3c <flatcc_builder_padding_base@@Base+0x8ec>
  405cb4:	mov    edx,0x3e3
  405cb9:	call   403060 <__assert_fail@plt>
  405cbe:	xchg   ax,ax

0000000000405cc0 <flatcc_builder_truncate_string@@Base>:
  405cc0:	push   rax
  405cc1:	mov    rax,QWORD PTR [rdi+0x30]
  405cc5:	movzx  ecx,WORD PTR [rax+0xe]
  405cc9:	cmp    ecx,0x6
  405ccc:	jne    405cf7 <flatcc_builder_truncate_string@@Base+0x37>
  405cce:	mov    ecx,DWORD PTR [rax+0x14]
  405cd1:	cmp    rcx,rsi
  405cd4:	jb     405d16 <flatcc_builder_truncate_string@@Base+0x56>
  405cd6:	sub    ecx,esi
  405cd8:	mov    DWORD PTR [rax+0x14],ecx
  405cdb:	mov    eax,DWORD PTR [rdi+0x20]
  405cde:	sub    eax,esi
  405ce0:	mov    DWORD PTR [rdi+0x20],eax
  405ce3:	add    rax,QWORD PTR [rdi+0x18]
  405ce7:	mov    edx,esi
  405ce9:	xor    esi,esi
  405ceb:	mov    rdi,rax
  405cee:	call   403070 <memset@plt>
  405cf3:	xor    eax,eax
  405cf5:	pop    rcx
  405cf6:	ret    
  405cf7:	lea    rdi,[rip+0x4f23]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  405cfe:	lea    rsi,[rip+0x49dd]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405d05:	lea    rcx,[rip+0x50b1]        # 40adbd <flatcc_builder_padding_base@@Base+0x96d>
  405d0c:	mov    edx,0x3eb
  405d11:	call   403060 <__assert_fail@plt>
  405d16:	lea    rdi,[rip+0x50df]        # 40adfc <flatcc_builder_padding_base@@Base+0x9ac>
  405d1d:	lea    rsi,[rip+0x49be]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405d24:	lea    rcx,[rip+0x5092]        # 40adbd <flatcc_builder_padding_base@@Base+0x96d>
  405d2b:	mov    edx,0x3ec
  405d30:	call   403060 <__assert_fail@plt>
  405d35:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d3f:	nop

0000000000405d40 <flatcc_builder_start_vector@@Base>:
  405d40:	push   r15
  405d42:	push   r14
  405d44:	push   rbx
  405d45:	mov    r14,rcx
  405d48:	mov    r15,rsi
  405d4b:	mov    rbx,rdi
  405d4e:	cmp    edx,0x4
  405d51:	mov    esi,0x4
  405d56:	cmova  esi,edx
  405d59:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  405d5e:	mov    ecx,eax
  405d60:	mov    eax,0xffffffff
  405d65:	test   ecx,ecx
  405d67:	jne    405db5 <flatcc_builder_start_vector@@Base+0x75>
  405d69:	mov    rax,QWORD PTR [rbx+0x30]
  405d6d:	mov    DWORD PTR [rax+0x10],r15d
  405d71:	mov    rax,QWORD PTR [rbx+0x30]
  405d75:	mov    DWORD PTR [rax+0x14],0x0
  405d7c:	mov    rax,QWORD PTR [rbx+0x30]
  405d80:	mov    DWORD PTR [rax+0x18],r14d
  405d84:	mov    rax,QWORD PTR [rbx+0x30]
  405d88:	mov    WORD PTR [rax+0xe],0x4
  405d8e:	mov    ecx,DWORD PTR [rbx+0x28]
  405d91:	mov    edx,DWORD PTR [rbx+0x70]
  405d94:	sub    edx,ecx
  405d96:	add    rcx,QWORD PTR [rbx+0x68]
  405d9a:	mov    QWORD PTR [rbx+0x18],rcx
  405d9e:	cmp    edx,0xfffffffc
  405da1:	mov    ecx,0xfffffffc
  405da6:	cmovb  ecx,edx
  405da9:	mov    DWORD PTR [rbx+0x24],ecx
  405dac:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405db3:	xor    eax,eax
  405db5:	pop    rbx
  405db6:	pop    r14
  405db8:	pop    r15
  405dba:	ret    
  405dbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405dc0 <flatcc_builder_start_offset_vector@@Base>:
  405dc0:	push   rbx
  405dc1:	mov    rbx,rdi
  405dc4:	mov    esi,0x4
  405dc9:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  405dce:	mov    ecx,eax
  405dd0:	mov    eax,0xffffffff
  405dd5:	test   ecx,ecx
  405dd7:	je     405ddb <flatcc_builder_start_offset_vector@@Base+0x1b>
  405dd9:	pop    rbx
  405dda:	ret    
  405ddb:	mov    rax,QWORD PTR [rbx+0x30]
  405ddf:	mov    DWORD PTR [rax+0x10],0x4
  405de6:	mov    rax,QWORD PTR [rbx+0x30]
  405dea:	mov    DWORD PTR [rax+0x14],0x0
  405df1:	mov    rax,QWORD PTR [rbx+0x30]
  405df5:	mov    WORD PTR [rax+0xe],0x5
  405dfb:	mov    ecx,DWORD PTR [rbx+0x28]
  405dfe:	mov    edx,DWORD PTR [rbx+0x70]
  405e01:	sub    edx,ecx
  405e03:	add    rcx,QWORD PTR [rbx+0x68]
  405e07:	mov    QWORD PTR [rbx+0x18],rcx
  405e0b:	cmp    edx,0xfffffffc
  405e0e:	mov    ecx,0xfffffffc
  405e13:	cmovb  ecx,edx
  405e16:	mov    DWORD PTR [rbx+0x24],ecx
  405e19:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405e20:	xor    eax,eax
  405e22:	pop    rbx
  405e23:	ret    
  405e24:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405e2e:	xchg   ax,ax

0000000000405e30 <flatcc_builder_create_offset_vector@@Base>:
  405e30:	push   r15
  405e32:	push   r14
  405e34:	push   r12
  405e36:	push   rbx
  405e37:	push   rax
  405e38:	mov    r14,rdx
  405e3b:	mov    r15,rsi
  405e3e:	mov    rbx,rdi
  405e41:	mov    esi,0x4
  405e46:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  405e4b:	test   eax,eax
  405e4d:	je     405e5d <flatcc_builder_create_offset_vector@@Base+0x2d>
  405e4f:	xor    eax,eax
  405e51:	add    rsp,0x8
  405e55:	pop    rbx
  405e56:	pop    r12
  405e58:	pop    r14
  405e5a:	pop    r15
  405e5c:	ret    
  405e5d:	mov    rax,QWORD PTR [rbx+0x30]
  405e61:	mov    DWORD PTR [rax+0x10],0x4
  405e68:	mov    rax,QWORD PTR [rbx+0x30]
  405e6c:	mov    DWORD PTR [rax+0x14],0x0
  405e73:	mov    rax,QWORD PTR [rbx+0x30]
  405e77:	mov    WORD PTR [rax+0xe],0x5
  405e7d:	mov    ecx,DWORD PTR [rbx+0x28]
  405e80:	mov    edx,DWORD PTR [rbx+0x70]
  405e83:	sub    edx,ecx
  405e85:	add    rcx,QWORD PTR [rbx+0x68]
  405e89:	mov    QWORD PTR [rbx+0x18],rcx
  405e8d:	cmp    edx,0xfffffffc
  405e90:	mov    ecx,0xfffffffc
  405e95:	cmovb  ecx,edx
  405e98:	mov    DWORD PTR [rbx+0x24],ecx
  405e9b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405ea2:	mov    ecx,DWORD PTR [rax+0x14]
  405ea5:	add    ecx,r14d
  405ea8:	jb     405f59 <flatcc_builder_create_offset_vector@@Base+0x129>
  405eae:	cmp    ecx,0x40000000
  405eb4:	jae    405f59 <flatcc_builder_create_offset_vector@@Base+0x129>
  405eba:	mov    DWORD PTR [rax+0x14],ecx
  405ebd:	mov    r12d,DWORD PTR [rbx+0x20]
  405ec1:	lea    eax,[r12+r14*4]
  405ec5:	mov    DWORD PTR [rbx+0x20],eax
  405ec8:	cmp    eax,DWORD PTR [rbx+0x24]
  405ecb:	jae    405edb <flatcc_builder_create_offset_vector@@Base+0xab>
  405ecd:	mov    rdi,QWORD PTR [rbx+0x18]
  405ed1:	add    rdi,r12
  405ed4:	jne    405f37 <flatcc_builder_create_offset_vector@@Base+0x107>
  405ed6:	jmp    405e4f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405edb:	add    eax,0x1
  405ede:	lea    rsi,[rbx+0x68]
  405ee2:	mov    rdi,QWORD PTR [rbx+0x40]
  405ee6:	mov    edx,DWORD PTR [rbx+0x28]
  405ee9:	add    rdx,rax
  405eec:	mov    ecx,0x1
  405ef1:	mov    r8d,0x1
  405ef7:	call   QWORD PTR [rbx+0x50]
  405efa:	test   eax,eax
  405efc:	jne    405e4f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405f02:	mov    eax,DWORD PTR [rbx+0x28]
  405f05:	mov    rdi,rax
  405f08:	add    rdi,QWORD PTR [rbx+0x68]
  405f0c:	mov    QWORD PTR [rbx+0x18],rdi
  405f10:	mov    ecx,DWORD PTR [rbx+0x70]
  405f13:	sub    ecx,eax
  405f15:	cmp    ecx,0xfffffffc
  405f18:	mov    eax,0xfffffffc
  405f1d:	cmovb  eax,ecx
  405f20:	mov    DWORD PTR [rbx+0x24],eax
  405f23:	mov    rax,QWORD PTR [rbx+0x30]
  405f27:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405f2e:	add    rdi,r12
  405f31:	je     405e4f <flatcc_builder_create_offset_vector@@Base+0x1f>
  405f37:	shl    r14,0x2
  405f3b:	mov    rsi,r15
  405f3e:	mov    rdx,r14
  405f41:	call   4030b0 <memcpy@plt>
  405f46:	mov    rdi,rbx
  405f49:	add    rsp,0x8
  405f4d:	pop    rbx
  405f4e:	pop    r12
  405f50:	pop    r14
  405f52:	pop    r15
  405f54:	jmp    405f80 <flatcc_builder_end_offset_vector@@Base>
  405f59:	lea    rdi,[rip+0x584b]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  405f60:	lea    rsi,[rip+0x477b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  405f67:	lea    rcx,[rip+0x5858]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  405f6e:	mov    edx,0x37c
  405f73:	call   403060 <__assert_fail@plt>
  405f78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405f80 <flatcc_builder_end_offset_vector@@Base>:
  405f80:	push   rbp
  405f81:	push   rbx
  405f82:	push   rax
  405f83:	mov    rax,QWORD PTR [rdi+0x30]
  405f87:	movzx  ecx,WORD PTR [rax+0xe]
  405f8b:	cmp    ecx,0x5
  405f8e:	jne    40601d <flatcc_builder_end_offset_vector@@Base+0x9d>
  405f94:	mov    rbx,rdi
  405f97:	mov    rsi,QWORD PTR [rdi+0x18]
  405f9b:	mov    edx,DWORD PTR [rax+0x14]
  405f9e:	xor    ecx,ecx
  405fa0:	call   406fd0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  405fa5:	mov    ebp,eax
  405fa7:	test   eax,eax
  405fa9:	je     406014 <flatcc_builder_end_offset_vector@@Base+0x94>
  405fab:	mov    rdi,QWORD PTR [rbx+0x18]
  405faf:	mov    edx,DWORD PTR [rbx+0x20]
  405fb2:	xor    esi,esi
  405fb4:	call   403070 <memset@plt>
  405fb9:	mov    rax,QWORD PTR [rbx+0x30]
  405fbd:	mov    ecx,DWORD PTR [rax+0x8]
  405fc0:	mov    DWORD PTR [rbx+0x20],ecx
  405fc3:	mov    ecx,DWORD PTR [rax]
  405fc5:	mov    DWORD PTR [rbx+0x28],ecx
  405fc8:	mov    edx,DWORD PTR [rax+0x4]
  405fcb:	mov    rsi,rcx
  405fce:	add    rsi,QWORD PTR [rbx+0x68]
  405fd2:	mov    QWORD PTR [rbx+0x18],rsi
  405fd6:	mov    esi,DWORD PTR [rbx+0x70]
  405fd9:	sub    esi,ecx
  405fdb:	cmp    esi,edx
  405fdd:	cmova  esi,edx
  405fe0:	mov    DWORD PTR [rbx+0x24],esi
  405fe3:	movzx  ecx,WORD PTR [rbx+0xea]
  405fea:	cmp    WORD PTR [rbx+0xe8],cx
  405ff1:	jae    405ffa <flatcc_builder_end_offset_vector@@Base+0x7a>
  405ff3:	mov    WORD PTR [rbx+0xe8],cx
  405ffa:	movzx  ecx,WORD PTR [rax+0xc]
  405ffe:	mov    WORD PTR [rbx+0xea],cx
  406005:	add    rax,0xffffffffffffffdc
  406009:	mov    QWORD PTR [rbx+0x30],rax
  40600d:	add    DWORD PTR [rbx+0x104],0xffffffff
  406014:	mov    eax,ebp
  406016:	add    rsp,0x8
  40601a:	pop    rbx
  40601b:	pop    rbp
  40601c:	ret    
  40601d:	lea    rdi,[rip+0x4af4]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  406024:	lea    rsi,[rip+0x46b7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40602b:	lea    rcx,[rip+0x5115]        # 40b147 <flatcc_builder_padding_base@@Base+0xcf7>
  406032:	mov    edx,0x5c8
  406037:	call   403060 <__assert_fail@plt>
  40603c:	nop    DWORD PTR [rax+0x0]

0000000000406040 <flatcc_builder_start_string@@Base>:
  406040:	push   rbx
  406041:	mov    rbx,rdi
  406044:	mov    esi,0x1
  406049:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  40604e:	mov    ecx,eax
  406050:	mov    eax,0xffffffff
  406055:	test   ecx,ecx
  406057:	je     40605b <flatcc_builder_start_string@@Base+0x1b>
  406059:	pop    rbx
  40605a:	ret    
  40605b:	mov    rax,QWORD PTR [rbx+0x30]
  40605f:	mov    DWORD PTR [rax+0x10],0x1
  406066:	mov    rax,QWORD PTR [rbx+0x30]
  40606a:	mov    DWORD PTR [rax+0x14],0x0
  406071:	mov    rax,QWORD PTR [rbx+0x30]
  406075:	mov    WORD PTR [rax+0xe],0x6
  40607b:	mov    ecx,DWORD PTR [rbx+0x28]
  40607e:	mov    edx,DWORD PTR [rbx+0x70]
  406081:	sub    edx,ecx
  406083:	add    rcx,QWORD PTR [rbx+0x68]
  406087:	mov    QWORD PTR [rbx+0x18],rcx
  40608b:	cmp    edx,0xfffffffc
  40608e:	mov    ecx,0xfffffffc
  406093:	cmovb  ecx,edx
  406096:	mov    DWORD PTR [rbx+0x24],ecx
  406099:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4060a0:	xor    eax,eax
  4060a2:	pop    rbx
  4060a3:	ret    
  4060a4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4060ae:	xchg   ax,ax

00000000004060b0 <flatcc_builder_reserve_table@@Base>:
  4060b0:	push   r15
  4060b2:	push   r14
  4060b4:	push   rbx
  4060b5:	test   esi,esi
  4060b7:	js     406164 <flatcc_builder_reserve_table@@Base+0xb4>
  4060bd:	mov    r14d,esi
  4060c0:	mov    r15,rdi
  4060c3:	mov    rax,QWORD PTR [rdi+0x30]
  4060c7:	movzx  ebx,WORD PTR [rax+0x1c]
  4060cb:	add    ebx,ebx
  4060cd:	add    ebx,DWORD PTR [rax+0x10]
  4060d0:	lea    edx,[r14+r14*1]
  4060d4:	add    edx,0x4
  4060d7:	add    rdx,rbx
  4060da:	cmp    rdx,QWORD PTR [rdi+0x60]
  4060de:	jbe    4060fc <flatcc_builder_reserve_table@@Base+0x4c>
  4060e0:	lea    rsi,[r15+0x58]
  4060e4:	mov    rdi,QWORD PTR [r15+0x40]
  4060e8:	mov    ecx,0x1
  4060ed:	xor    r8d,r8d
  4060f0:	call   QWORD PTR [r15+0x50]
  4060f4:	test   eax,eax
  4060f6:	jne    406183 <flatcc_builder_reserve_table@@Base+0xd3>
  4060fc:	add    rbx,QWORD PTR [r15+0x58]
  406100:	mov    QWORD PTR [r15+0x8],rbx
  406104:	je     406159 <flatcc_builder_reserve_table@@Base+0xa9>
  406106:	add    r14d,r14d
  406109:	add    rbx,0x4
  40610d:	mov    QWORD PTR [r15+0x8],rbx
  406111:	mov    rax,QWORD PTR [r15+0x30]
  406115:	mov    ebx,DWORD PTR [rax+0x14]
  406118:	or     r14d,0x1
  40611c:	add    r14,rbx
  40611f:	cmp    r14,QWORD PTR [r15+0x90]
  406126:	jbe    406146 <flatcc_builder_reserve_table@@Base+0x96>
  406128:	lea    rsi,[r15+0x88]
  40612f:	mov    rdi,QWORD PTR [r15+0x40]
  406133:	xor    ecx,ecx
  406135:	mov    r8d,0x3
  40613b:	mov    rdx,r14
  40613e:	call   QWORD PTR [r15+0x50]
  406142:	test   eax,eax
  406144:	jne    406183 <flatcc_builder_reserve_table@@Base+0xd3>
  406146:	xor    eax,eax
  406148:	add    rbx,QWORD PTR [r15+0x88]
  40614f:	mov    QWORD PTR [r15],rbx
  406152:	sete   al
  406155:	neg    eax
  406157:	jmp    40615e <flatcc_builder_reserve_table@@Base+0xae>
  406159:	mov    eax,0xffffffff
  40615e:	pop    rbx
  40615f:	pop    r14
  406161:	pop    r15
  406163:	ret    
  406164:	lea    rdi,[rip+0x4cf4]        # 40ae5f <flatcc_builder_padding_base@@Base+0xa0f>
  40616b:	lea    rsi,[rip+0x4570]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406172:	lea    rcx,[rip+0x4ca5]        # 40ae1e <flatcc_builder_padding_base@@Base+0x9ce>
  406179:	mov    edx,0x429
  40617e:	call   403060 <__assert_fail@plt>
  406183:	lea    rdi,[rip+0x5718]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  40618a:	lea    rsi,[rip+0x4551]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406191:	lea    rcx,[rip+0x5544]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  406198:	mov    edx,0x134
  40619d:	call   403060 <__assert_fail@plt>
  4061a2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4061ac:	nop    DWORD PTR [rax+0x0]

00000000004061b0 <flatcc_builder_start_table@@Base>:
  4061b0:	push   rbp
  4061b1:	push   r15
  4061b3:	push   r14
  4061b5:	push   rbx
  4061b6:	push   rax
  4061b7:	mov    r15d,esi
  4061ba:	mov    rbx,rdi
  4061bd:	mov    esi,0x4
  4061c2:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  4061c7:	mov    r14d,0xffffffff
  4061cd:	test   eax,eax
  4061cf:	je     4061df <flatcc_builder_start_table@@Base+0x2f>
  4061d1:	mov    eax,r14d
  4061d4:	add    rsp,0x8
  4061d8:	pop    rbx
  4061d9:	pop    r14
  4061db:	pop    r15
  4061dd:	pop    rbp
  4061de:	ret    
  4061df:	mov    eax,DWORD PTR [rbx+0x8]
  4061e2:	sub    eax,DWORD PTR [rbx+0x58]
  4061e5:	mov    rcx,QWORD PTR [rbx+0x30]
  4061e9:	mov    DWORD PTR [rcx+0x10],eax
  4061ec:	mov    eax,DWORD PTR [rbx]
  4061ee:	sub    eax,DWORD PTR [rbx+0x88]
  4061f4:	mov    rcx,QWORD PTR [rbx+0x30]
  4061f8:	mov    DWORD PTR [rcx+0x14],eax
  4061fb:	mov    eax,DWORD PTR [rbx+0x14]
  4061fe:	mov    rcx,QWORD PTR [rbx+0x30]
  406202:	mov    DWORD PTR [rcx+0x18],eax
  406205:	movzx  eax,WORD PTR [rbx+0x10]
  406209:	mov    rcx,QWORD PTR [rbx+0x30]
  40620d:	mov    WORD PTR [rcx+0x1c],ax
  406211:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  406218:	mov    WORD PTR [rbx+0x10],0x0
  40621e:	mov    rax,QWORD PTR [rbx+0x30]
  406222:	mov    WORD PTR [rax+0xe],0x3
  406228:	movzx  ebp,WORD PTR [rax+0x1c]
  40622c:	add    ebp,ebp
  40622e:	add    ebp,DWORD PTR [rax+0x10]
  406231:	lea    edx,[r15+r15*1]
  406235:	add    edx,0x4
  406238:	add    rdx,rbp
  40623b:	cmp    rdx,QWORD PTR [rbx+0x60]
  40623f:	jbe    40625c <flatcc_builder_start_table@@Base+0xac>
  406241:	lea    rsi,[rbx+0x58]
  406245:	mov    rdi,QWORD PTR [rbx+0x40]
  406249:	mov    ecx,0x1
  40624e:	xor    r8d,r8d
  406251:	call   QWORD PTR [rbx+0x50]
  406254:	test   eax,eax
  406256:	jne    4062f0 <flatcc_builder_start_table@@Base+0x140>
  40625c:	add    rbp,QWORD PTR [rbx+0x58]
  406260:	mov    QWORD PTR [rbx+0x8],rbp
  406264:	je     4061d1 <flatcc_builder_start_table@@Base+0x21>
  40626a:	add    r15d,r15d
  40626d:	add    rbp,0x4
  406271:	mov    QWORD PTR [rbx+0x8],rbp
  406275:	mov    rax,QWORD PTR [rbx+0x30]
  406279:	mov    ebp,DWORD PTR [rax+0x14]
  40627c:	or     r15d,0x1
  406280:	add    r15,rbp
  406283:	cmp    r15,QWORD PTR [rbx+0x90]
  40628a:	jbe    4062a9 <flatcc_builder_start_table@@Base+0xf9>
  40628c:	lea    rsi,[rbx+0x88]
  406293:	mov    rdi,QWORD PTR [rbx+0x40]
  406297:	xor    ecx,ecx
  406299:	mov    r8d,0x3
  40629f:	mov    rdx,r15
  4062a2:	call   QWORD PTR [rbx+0x50]
  4062a5:	test   eax,eax
  4062a7:	jne    4062f0 <flatcc_builder_start_table@@Base+0x140>
  4062a9:	add    rbp,QWORD PTR [rbx+0x88]
  4062b0:	mov    QWORD PTR [rbx],rbp
  4062b3:	je     4061d1 <flatcc_builder_start_table@@Base+0x21>
  4062b9:	mov    eax,DWORD PTR [rbx+0x28]
  4062bc:	mov    rcx,rax
  4062bf:	add    rcx,QWORD PTR [rbx+0x68]
  4062c3:	mov    QWORD PTR [rbx+0x18],rcx
  4062c7:	mov    ecx,DWORD PTR [rbx+0x70]
  4062ca:	sub    ecx,eax
  4062cc:	cmp    ecx,0xfffc
  4062d2:	mov    eax,0xfffc
  4062d7:	cmovb  eax,ecx
  4062da:	mov    DWORD PTR [rbx+0x24],eax
  4062dd:	mov    rax,QWORD PTR [rbx+0x30]
  4062e1:	mov    DWORD PTR [rax+0x4],0xfffc
  4062e8:	xor    r14d,r14d
  4062eb:	jmp    4061d1 <flatcc_builder_start_table@@Base+0x21>
  4062f0:	lea    rdi,[rip+0x55ab]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4062f7:	lea    rsi,[rip+0x43e4]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4062fe:	lea    rcx,[rip+0x53d7]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  406305:	mov    edx,0x134
  40630a:	call   403060 <__assert_fail@plt>
  40630f:	nop

0000000000406310 <flatcc_builder_create_vtable@@Base>:
  406310:	push   r14
  406312:	push   rbx
  406313:	sub    rsp,0x98
  40631a:	mov    r14,rdi
  40631d:	mov    QWORD PTR [rsp+0x8],0x0
  406326:	mov    DWORD PTR [rsp+0x10],0x0
  40632e:	test   dx,dx
  406331:	je     406397 <flatcc_builder_create_vtable@@Base+0x87>
  406333:	movzx  r8d,dx
  406337:	mov    QWORD PTR [rsp+0x8],r8
  40633c:	mov    QWORD PTR [rsp+0x18],rsi
  406341:	mov    QWORD PTR [rsp+0x20],r8
  406346:	mov    DWORD PTR [rsp+0x10],0x1
  40634e:	mov    edx,0x1
  406353:	cmp    DWORD PTR [r14+0x100],0x0
  40635b:	jne    4063a6 <flatcc_builder_create_vtable@@Base+0x96>
  40635d:	cmp    DWORD PTR [r14+0x124],0x0
  406365:	jne    4063a6 <flatcc_builder_create_vtable@@Base+0x96>
  406367:	mov    ebx,DWORD PTR [r14+0xf4]
  40636e:	lea    eax,[r8+rbx*1]
  406372:	mov    DWORD PTR [r14+0xf4],eax
  406379:	mov    rdi,QWORD PTR [r14+0x38]
  40637d:	lea    rsi,[rsp+0x18]
  406382:	mov    ecx,ebx
  406384:	call   QWORD PTR [r14+0x48]
  406388:	test   eax,eax
  40638a:	jne    40643b <flatcc_builder_create_vtable@@Base+0x12b>
  406390:	add    ebx,0x1
  406393:	jne    4063f0 <flatcc_builder_create_vtable@@Base+0xe0>
  406395:	jmp    4063ee <flatcc_builder_create_vtable@@Base+0xde>
  406397:	xor    edx,edx
  406399:	xor    r8d,r8d
  40639c:	cmp    DWORD PTR [r14+0x100],0x0
  4063a4:	je     40635d <flatcc_builder_create_vtable@@Base+0x4d>
  4063a6:	cmp    r8,0x11
  4063aa:	setb   al
  4063ad:	lea    rcx,[r8-0x10]
  4063b1:	shr    rcx,0x20
  4063b5:	sete   cl
  4063b8:	test   r8d,r8d
  4063bb:	je     4063fd <flatcc_builder_create_vtable@@Base+0xed>
  4063bd:	or     al,cl
  4063bf:	je     4063fd <flatcc_builder_create_vtable@@Base+0xed>
  4063c1:	mov    ebx,DWORD PTR [r14+0xf0]
  4063c8:	sub    ebx,r8d
  4063cb:	mov    rdi,QWORD PTR [r14+0x38]
  4063cf:	lea    rsi,[rsp+0x18]
  4063d4:	mov    ecx,ebx
  4063d6:	call   QWORD PTR [r14+0x48]
  4063da:	test   eax,eax
  4063dc:	jne    40641c <flatcc_builder_create_vtable@@Base+0x10c>
  4063de:	mov    DWORD PTR [r14+0xf0],ebx
  4063e5:	test   ebx,ebx
  4063e7:	je     4063ee <flatcc_builder_create_vtable@@Base+0xde>
  4063e9:	add    ebx,0x1
  4063ec:	jmp    4063f0 <flatcc_builder_create_vtable@@Base+0xe0>
  4063ee:	xor    ebx,ebx
  4063f0:	mov    eax,ebx
  4063f2:	add    rsp,0x98
  4063f9:	pop    rbx
  4063fa:	pop    r14
  4063fc:	ret    
  4063fd:	lea    rdi,[rip+0x549e]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406404:	lea    rsi,[rip+0x42d7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40640b:	lea    rcx,[rip+0x534f]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406412:	mov    edx,0x287
  406417:	call   403060 <__assert_fail@plt>
  40641c:	lea    rdi,[rip+0x547f]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406423:	lea    rsi,[rip+0x42b8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40642a:	lea    rcx,[rip+0x5330]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406431:	mov    edx,0x28b
  406436:	call   403060 <__assert_fail@plt>
  40643b:	lea    rdi,[rip+0x5460]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406442:	lea    rsi,[rip+0x4299]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406449:	lea    rcx,[rip+0x53cd]        # 40b81d <flatcc_builder_padding_base@@Base+0x13cd>
  406450:	mov    edx,0x2a5
  406455:	call   403060 <__assert_fail@plt>
  40645a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406460 <flatcc_builder_create_cached_vtable@@Base>:
  406460:	push   rbp
  406461:	push   r15
  406463:	push   r14
  406465:	push   r13
  406467:	push   r12
  406469:	push   rbx
  40646a:	sub    rsp,0x28
  40646e:	mov    r15d,ecx
  406471:	mov    r8d,edx
  406474:	mov    QWORD PTR [rsp+0x18],rsi
  406479:	mov    r13,rdi
  40647c:	mov    rax,QWORD PTR [rdi+0xd8]
  406483:	test   rax,rax
  406486:	je     40655a <flatcc_builder_create_cached_vtable@@Base+0xfa>
  40648c:	mov    ecx,0x20
  406491:	sub    ecx,eax
  406493:	shrx   r15d,r15d,ecx
  406498:	shl    r15,0x2
  40649c:	add    r15,QWORD PTR [r13+0xa8]
  4064a3:	je     40662a <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  4064a9:	mov    ebp,DWORD PTR [r15]
  4064ac:	test   ebp,ebp
  4064ae:	je     406632 <flatcc_builder_create_cached_vtable@@Base+0x1d2>
  4064b4:	mov    rbx,QWORD PTR [r13+0x78]
  4064b8:	mov    QWORD PTR [rsp+0x10],r13
  4064bd:	mov    r13,QWORD PTR [r13+0xb8]
  4064c4:	movzx  eax,r8w
  4064c8:	mov    QWORD PTR [rsp+0x20],rax
  4064cd:	xor    eax,eax
  4064cf:	mov    QWORD PTR [rsp],rax
  4064d3:	mov    QWORD PTR [rsp+0x8],r15
  4064d8:	mov    r14,r15
  4064db:	nop    DWORD PTR [rax+rax*1+0x0]
  4064e0:	mov    eax,ebp
  4064e2:	lea    r15,[rax+r13*1]
  4064e6:	mov    esi,DWORD PTR [r13+rax*1+0x8]
  4064eb:	cmp    WORD PTR [rbx+rsi*1],r8w
  4064f0:	jne    40650e <flatcc_builder_create_cached_vtable@@Base+0xae>
  4064f2:	add    rsi,rbx
  4064f5:	mov    rdi,QWORD PTR [rsp+0x18]
  4064fa:	mov    rdx,QWORD PTR [rsp+0x20]
  4064ff:	mov    r12d,r8d
  406502:	call   403090 <memcmp@plt>
  406507:	mov    r8d,r12d
  40650a:	test   eax,eax
  40650c:	je     40651f <flatcc_builder_create_cached_vtable@@Base+0xbf>
  40650e:	mov    ebp,DWORD PTR [r15+0xc]
  406512:	add    r15,0xc
  406516:	mov    r14,r15
  406519:	test   ebp,ebp
  40651b:	jne    4064e0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  40651d:	jmp    40654b <flatcc_builder_create_cached_vtable@@Base+0xeb>
  40651f:	mov    eax,DWORD PTR [r15+0x4]
  406523:	mov    rcx,QWORD PTR [rsp+0x10]
  406528:	cmp    eax,DWORD PTR [rcx+0x100]
  40652e:	je     406794 <flatcc_builder_create_cached_vtable@@Base+0x334>
  406534:	lea    r14,[r15+0xc]
  406538:	mov    ebp,DWORD PTR [r15+0xc]
  40653c:	mov    rax,r15
  40653f:	mov    QWORD PTR [rsp],r15
  406543:	test   ebp,ebp
  406545:	jne    4064e0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  406547:	mov    QWORD PTR [rsp],r15
  40654b:	mov    r13,QWORD PTR [rsp+0x10]
  406550:	mov    r15,QWORD PTR [rsp+0x8]
  406555:	jmp    406638 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
  40655a:	cmp    DWORD PTR [r13+0xe4],0x0
  406562:	jne    4067d1 <flatcc_builder_create_cached_vtable@@Base+0x371>
  406568:	lea    rbx,[r13+0xb8]
  40656f:	cmp    QWORD PTR [r13+0xc0],0xf
  406577:	ja     40659f <flatcc_builder_create_cached_vtable@@Base+0x13f>
  406579:	mov    rdi,QWORD PTR [r13+0x40]
  40657d:	mov    edx,0x10
  406582:	xor    ecx,ecx
  406584:	mov    ebp,r8d
  406587:	mov    r8d,0x6
  40658d:	mov    rsi,rbx
  406590:	call   QWORD PTR [r13+0x50]
  406594:	mov    r8d,ebp
  406597:	test   eax,eax
  406599:	jne    4067b2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  40659f:	xor    r12d,r12d
  4065a2:	cmp    QWORD PTR [rbx],0x0
  4065a6:	je     40677a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4065ac:	mov    ebx,r8d
  4065af:	lea    rsi,[r13+0xa8]
  4065b6:	mov    DWORD PTR [r13+0xe4],0x10
  4065c1:	mov    rdi,QWORD PTR [r13+0x40]
  4065c5:	mov    edx,0x100
  4065ca:	mov    ecx,0x1
  4065cf:	mov    r8d,0x5
  4065d5:	call   QWORD PTR [r13+0x50]
  4065d9:	test   eax,eax
  4065db:	jne    40677a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4065e1:	mov    rax,QWORD PTR [r13+0xb0]
  4065e8:	mov    edx,0x100
  4065ed:	nop    DWORD PTR [rax]
  4065f0:	mov    rcx,rdx
  4065f3:	lea    rdx,[rdx+rdx*1]
  4065f7:	cmp    rdx,rax
  4065fa:	jbe    4065f0 <flatcc_builder_create_cached_vtable@@Base+0x190>
  4065fc:	shr    rcx,0x2
  406600:	mov    rax,0xffffffffffffffff
  406607:	mov    edx,0x1
  40660c:	mov    r8d,ebx
  40660f:	nop
  406610:	add    rax,0x1
  406614:	shlx   rsi,rdx,rax
  406619:	cmp    rsi,rcx
  40661c:	jb     406610 <flatcc_builder_create_cached_vtable@@Base+0x1b0>
  40661e:	mov    QWORD PTR [r13+0xd8],rax
  406625:	jmp    40648c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  40662a:	xor    r12d,r12d
  40662d:	jmp    40677a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406632:	xor    eax,eax
  406634:	mov    QWORD PTR [rsp],rax
  406638:	mov    ebp,DWORD PTR [r13+0xe4]
  40663f:	lea    rbx,[r13+0xb8]
  406646:	lea    rdx,[rbp+0x10]
  40664a:	cmp    rdx,QWORD PTR [r13+0xc0]
  406651:	jbe    406674 <flatcc_builder_create_cached_vtable@@Base+0x214>
  406653:	mov    rdi,QWORD PTR [r13+0x40]
  406657:	xor    ecx,ecx
  406659:	mov    r14d,r8d
  40665c:	mov    r8d,0x6
  406662:	mov    rsi,rbx
  406665:	call   QWORD PTR [r13+0x50]
  406669:	mov    r8d,r14d
  40666c:	test   eax,eax
  40666e:	jne    4067b2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  406674:	xor    r12d,r12d
  406677:	add    rbp,QWORD PTR [rbx]
  40667a:	je     40677a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406680:	mov    eax,DWORD PTR [r13+0xe4]
  406687:	mov    ecx,DWORD PTR [r13+0x100]
  40668e:	lea    edx,[rax+0x10]
  406691:	mov    DWORD PTR [r13+0xe4],edx
  406698:	mov    DWORD PTR [rbp+0x4],ecx
  40669b:	mov    ecx,DWORD PTR [r15]
  40669e:	mov    DWORD PTR [rbp+0xc],ecx
  4066a1:	mov    DWORD PTR [r15],eax
  4066a4:	movzx  ebx,r8w
  4066a8:	mov    rdi,r13
  4066ab:	mov    rsi,QWORD PTR [rsp+0x18]
  4066b0:	mov    edx,ebx
  4066b2:	call   406310 <flatcc_builder_create_vtable@@Base>
  4066b7:	mov    DWORD PTR [rbp+0x0],eax
  4066ba:	test   eax,eax
  4066bc:	je     40677a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4066c2:	mov    rax,QWORD PTR [rsp]
  4066c6:	test   rax,rax
  4066c9:	je     4066d6 <flatcc_builder_create_cached_vtable@@Base+0x276>
  4066cb:	mov    eax,DWORD PTR [rax+0x8]
  4066ce:	mov    DWORD PTR [rbp+0x8],eax
  4066d1:	jmp    406776 <flatcc_builder_create_cached_vtable@@Base+0x316>
  4066d6:	mov    rax,QWORD PTR [r13+0x118]
  4066dd:	mov    r14d,DWORD PTR [r13+0xe0]
  4066e4:	test   rax,rax
  4066e7:	je     406724 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  4066e9:	lea    ecx,[r14+rbx*1]
  4066ed:	cmp    rax,rcx
  4066f0:	jae    406724 <flatcc_builder_create_cached_vtable@@Base+0x2c4>
  4066f2:	cmp    QWORD PTR [r13+0xd8],0x0
  4066fa:	je     406776 <flatcc_builder_create_cached_vtable@@Base+0x316>
  4066fc:	mov    rdi,QWORD PTR [r13+0xa8]
  406703:	mov    rdx,QWORD PTR [r13+0xb0]
  40670a:	xor    esi,esi
  40670c:	call   403070 <memset@plt>
  406711:	movabs rax,0x1000000000
  40671b:	mov    QWORD PTR [r13+0xe0],rax
  406722:	jmp    406776 <flatcc_builder_create_cached_vtable@@Base+0x316>
  406724:	lea    r15,[r13+0x78]
  406728:	lea    rdx,[r14+rbx*1]
  40672c:	cmp    rdx,QWORD PTR [r13+0x80]
  406733:	jbe    40674c <flatcc_builder_create_cached_vtable@@Base+0x2ec>
  406735:	mov    rdi,QWORD PTR [r13+0x40]
  406739:	xor    ecx,ecx
  40673b:	mov    r8d,0x2
  406741:	mov    rsi,r15
  406744:	call   QWORD PTR [r13+0x50]
  406748:	test   eax,eax
  40674a:	jne    4067b2 <flatcc_builder_create_cached_vtable@@Base+0x352>
  40674c:	add    r14,QWORD PTR [r15]
  40674f:	je     40678c <flatcc_builder_create_cached_vtable@@Base+0x32c>
  406751:	mov    eax,DWORD PTR [r13+0xe0]
  406758:	mov    DWORD PTR [rbp+0x8],eax
  40675b:	mov    ecx,ebx
  40675d:	add    ecx,eax
  40675f:	mov    DWORD PTR [r13+0xe0],ecx
  406766:	mov    rdi,r14
  406769:	mov    rsi,QWORD PTR [rsp+0x18]
  40676e:	mov    rdx,rbx
  406771:	call   4030b0 <memcpy@plt>
  406776:	mov    r12d,DWORD PTR [rbp+0x0]
  40677a:	mov    eax,r12d
  40677d:	add    rsp,0x28
  406781:	pop    rbx
  406782:	pop    r12
  406784:	pop    r13
  406786:	pop    r14
  406788:	pop    r15
  40678a:	pop    rbp
  40678b:	ret    
  40678c:	mov    r12d,0xffffffff
  406792:	jmp    40677a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  406794:	mov    rcx,QWORD PTR [rsp+0x8]
  406799:	cmp    r14,rcx
  40679c:	je     4067ad <flatcc_builder_create_cached_vtable@@Base+0x34d>
  40679e:	mov    eax,DWORD PTR [r15+0xc]
  4067a2:	mov    DWORD PTR [r14],eax
  4067a5:	mov    eax,DWORD PTR [rcx]
  4067a7:	mov    DWORD PTR [r15+0xc],eax
  4067ab:	mov    DWORD PTR [rcx],ebp
  4067ad:	mov    r12d,DWORD PTR [r15]
  4067b0:	jmp    40677a <flatcc_builder_create_cached_vtable@@Base+0x31a>
  4067b2:	lea    rdi,[rip+0x50e9]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4067b9:	lea    rsi,[rip+0x3f22]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4067c0:	lea    rcx,[rip+0x4f15]        # 40b6dc <flatcc_builder_padding_base@@Base+0x128c>
  4067c7:	mov    edx,0x134
  4067cc:	call   403060 <__assert_fail@plt>
  4067d1:	lea    rdi,[rip+0x508e]        # 40b866 <flatcc_builder_padding_base@@Base+0x1416>
  4067d8:	lea    rsi,[rip+0x3f03]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4067df:	lea    rcx,[rip+0x508f]        # 40b875 <flatcc_builder_padding_base@@Base+0x1425>
  4067e6:	mov    edx,0x156
  4067eb:	call   403060 <__assert_fail@plt>

00000000004067f0 <flatcc_builder_create_table@@Base>:
  4067f0:	push   rbp
  4067f1:	push   r14
  4067f3:	push   rbx
  4067f4:	sub    rsp,0xa0
  4067fb:	test   r9d,r9d
  4067fe:	js     406a15 <flatcc_builder_create_table@@Base+0x225>
  406804:	mov    r14,rdi
  406807:	mov    edi,DWORD PTR [rsp+0xc0]
  40680e:	test   dil,0x1
  406812:	je     406a34 <flatcc_builder_create_table@@Base+0x244>
  406818:	movzx  ecx,cx
  40681b:	cmp    ecx,0x4
  40681e:	mov    eax,0x4
  406823:	cmova  eax,ecx
  406826:	cmp    WORD PTR [r14+0xe8],ax
  40682e:	jae    406838 <flatcc_builder_create_table@@Base+0x48>
  406830:	mov    WORD PTR [r14+0xe8],ax
  406838:	mov    ebp,DWORD PTR [r14+0xf0]
  40683f:	mov    ecx,ebp
  406841:	sub    ecx,edx
  406843:	movzx  r10d,ax
  406847:	add    r10d,0xffffffff
  40684b:	and    r10d,ecx
  40684e:	mov    ecx,0xfffffffc
  406853:	mov    ebx,0xfffffffc
  406858:	sub    ebx,edx
  40685a:	add    edi,r10d
  40685d:	lea    eax,[rbx+rbp*1]
  406860:	add    eax,0x1
  406863:	sub    eax,edi
  406865:	mov    DWORD PTR [rsp+0xc],eax
  406869:	test   r9d,r9d
  40686c:	jle    406917 <flatcc_builder_create_table@@Base+0x127>
  406872:	add    ebx,ebp
  406874:	sub    ebx,r10d
  406877:	sub    ecx,ebx
  406879:	mov    edi,r9d
  40687c:	lea    rax,[rdi-0x1]
  406880:	mov    r9d,edi
  406883:	and    r9d,0x3
  406887:	cmp    rax,0x3
  40688b:	jae    406899 <flatcc_builder_create_table@@Base+0xa9>
  40688d:	xor    ebx,ebx
  40688f:	test   r9,r9
  406892:	jne    4068ed <flatcc_builder_create_table@@Base+0xfd>
  406894:	jmp    406917 <flatcc_builder_create_table@@Base+0x127>
  406899:	sub    rdi,r9
  40689c:	xor    ebx,ebx
  40689e:	xchg   ax,ax
  4068a0:	movzx  eax,WORD PTR [r8+rbx*2]
  4068a5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4068a8:	add    ebp,ecx
  4068aa:	sub    ebp,eax
  4068ac:	mov    DWORD PTR [rax+rsi*1],ebp
  4068af:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  4068b5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4068b8:	add    ebp,ecx
  4068ba:	sub    ebp,eax
  4068bc:	mov    DWORD PTR [rax+rsi*1],ebp
  4068bf:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  4068c5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4068c8:	add    ebp,ecx
  4068ca:	sub    ebp,eax
  4068cc:	mov    DWORD PTR [rax+rsi*1],ebp
  4068cf:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  4068d5:	mov    ebp,DWORD PTR [rax+rsi*1]
  4068d8:	add    ebp,ecx
  4068da:	sub    ebp,eax
  4068dc:	mov    DWORD PTR [rax+rsi*1],ebp
  4068df:	add    rbx,0x4
  4068e3:	cmp    rdi,rbx
  4068e6:	jne    4068a0 <flatcc_builder_create_table@@Base+0xb0>
  4068e8:	test   r9,r9
  4068eb:	je     406917 <flatcc_builder_create_table@@Base+0x127>
  4068ed:	lea    rdi,[r8+rbx*2]
  4068f1:	xor    ebx,ebx
  4068f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4068fd:	nop    DWORD PTR [rax]
  406900:	movzx  eax,WORD PTR [rdi+rbx*2]
  406904:	mov    ebp,DWORD PTR [rax+rsi*1]
  406907:	add    ebp,ecx
  406909:	sub    ebp,eax
  40690b:	mov    DWORD PTR [rax+rsi*1],ebp
  40690e:	add    rbx,0x1
  406912:	cmp    r9,rbx
  406915:	jne    406900 <flatcc_builder_create_table@@Base+0x110>
  406917:	mov    QWORD PTR [rsp+0x10],0x4
  406920:	lea    rax,[rsp+0xc]
  406925:	mov    QWORD PTR [rsp+0x20],rax
  40692a:	mov    QWORD PTR [rsp+0x28],0x4
  406933:	mov    DWORD PTR [rsp+0x18],0x1
  40693b:	test   rdx,rdx
  40693e:	je     4069e0 <flatcc_builder_create_table@@Base+0x1f0>
  406944:	lea    r8,[rdx+0x4]
  406948:	mov    QWORD PTR [rsp+0x10],r8
  40694d:	mov    QWORD PTR [rsp+0x30],rsi
  406952:	mov    QWORD PTR [rsp+0x38],rdx
  406957:	mov    DWORD PTR [rsp+0x18],0x2
  40695f:	mov    edx,0x2
  406964:	test   r10d,r10d
  406967:	je     40698f <flatcc_builder_create_table@@Base+0x19f>
  406969:	add    r8,r10
  40696c:	mov    QWORD PTR [rsp+0x10],r8
  406971:	mov    eax,edx
  406973:	shl    rax,0x4
  406977:	lea    rcx,[rip+0x3ad2]        # 40a450 <flatcc_builder_padding_base@@Base>
  40697e:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406983:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406988:	add    edx,0x1
  40698b:	mov    DWORD PTR [rsp+0x18],edx
  40698f:	cmp    r8,0x11
  406993:	setb   al
  406996:	lea    rcx,[r8-0x10]
  40699a:	shr    rcx,0x20
  40699e:	sete   cl
  4069a1:	test   r8d,r8d
  4069a4:	jle    4069f6 <flatcc_builder_create_table@@Base+0x206>
  4069a6:	or     al,cl
  4069a8:	je     4069f6 <flatcc_builder_create_table@@Base+0x206>
  4069aa:	mov    ebp,DWORD PTR [r14+0xf0]
  4069b1:	sub    ebp,r8d
  4069b4:	mov    rdi,QWORD PTR [r14+0x38]
  4069b8:	lea    rsi,[rsp+0x20]
  4069bd:	mov    ecx,ebp
  4069bf:	call   QWORD PTR [r14+0x48]
  4069c3:	test   eax,eax
  4069c5:	jne    406a53 <flatcc_builder_create_table@@Base+0x263>
  4069cb:	mov    DWORD PTR [r14+0xf0],ebp
  4069d2:	mov    eax,ebp
  4069d4:	add    rsp,0xa0
  4069db:	pop    rbx
  4069dc:	pop    r14
  4069de:	pop    rbp
  4069df:	ret    
  4069e0:	mov    edx,0x1
  4069e5:	mov    r8d,0x4
  4069eb:	test   r10d,r10d
  4069ee:	jne    406969 <flatcc_builder_create_table@@Base+0x179>
  4069f4:	jmp    40698f <flatcc_builder_create_table@@Base+0x19f>
  4069f6:	lea    rdi,[rip+0x4ea5]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4069fd:	lea    rsi,[rip+0x3cde]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406a04:	lea    rcx,[rip+0x4d56]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406a0b:	mov    edx,0x287
  406a10:	call   403060 <__assert_fail@plt>
  406a15:	lea    rdi,[rip+0x443c]        # 40ae58 <flatcc_builder_padding_base@@Base+0xa08>
  406a1c:	lea    rsi,[rip+0x3cbf]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406a23:	lea    rcx,[rip+0x4440]        # 40ae6a <flatcc_builder_padding_base@@Base+0xa1a>
  406a2a:	mov    edx,0x4d5
  406a2f:	call   403060 <__assert_fail@plt>
  406a34:	lea    rdi,[rip+0x44cb]        # 40af06 <flatcc_builder_padding_base@@Base+0xab6>
  406a3b:	lea    rsi,[rip+0x3ca0]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406a42:	lea    rcx,[rip+0x4421]        # 40ae6a <flatcc_builder_padding_base@@Base+0xa1a>
  406a49:	mov    edx,0x4db
  406a4e:	call   403060 <__assert_fail@plt>
  406a53:	lea    rdi,[rip+0x4e48]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406a5a:	lea    rsi,[rip+0x3c81]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406a61:	lea    rcx,[rip+0x4cf9]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406a68:	mov    edx,0x28b
  406a6d:	call   403060 <__assert_fail@plt>
  406a72:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406a7c:	nop    DWORD PTR [rax+0x0]

0000000000406a80 <flatcc_builder_check_required_field@@Base>:
  406a80:	mov    rax,QWORD PTR [rdi+0x30]
  406a84:	movzx  eax,WORD PTR [rax+0xe]
  406a88:	cmp    eax,0x3
  406a8b:	jne    406aa7 <flatcc_builder_check_required_field@@Base+0x27>
  406a8d:	xor    eax,eax
  406a8f:	cmp    WORD PTR [rdi+0x10],si
  406a93:	jbe    406aa6 <flatcc_builder_check_required_field@@Base+0x26>
  406a95:	mov    rcx,QWORD PTR [rdi+0x8]
  406a99:	movzx  edx,si
  406a9c:	xor    eax,eax
  406a9e:	cmp    WORD PTR [rcx+rdx*2],0x0
  406aa3:	setne  al
  406aa6:	ret    
  406aa7:	push   rax
  406aa8:	lea    rdi,[rip+0x4462]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406aaf:	lea    rsi,[rip+0x3c2c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406ab6:	lea    rcx,[rip+0x447f]        # 40af3c <flatcc_builder_padding_base@@Base+0xaec>
  406abd:	mov    edx,0x4f8
  406ac2:	call   403060 <__assert_fail@plt>
  406ac7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406ad0 <flatcc_builder_check_union_field@@Base>:
  406ad0:	mov    rax,QWORD PTR [rdi+0x30]
  406ad4:	movzx  eax,WORD PTR [rax+0xe]
  406ad8:	cmp    eax,0x3
  406adb:	jne    406b2e <flatcc_builder_check_union_field@@Base+0x5e>
  406add:	test   si,si
  406ae0:	je     406b11 <flatcc_builder_check_union_field@@Base+0x41>
  406ae2:	cmp    WORD PTR [rdi+0x10],si
  406ae6:	jbe    406b17 <flatcc_builder_check_union_field@@Base+0x47>
  406ae8:	movzx  eax,si
  406aeb:	mov    rcx,QWORD PTR [rdi+0x8]
  406aef:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  406af4:	test   rdx,rdx
  406af7:	je     406b1d <flatcc_builder_check_union_field@@Base+0x4d>
  406af9:	mov    rsi,QWORD PTR [rdi+0x18]
  406afd:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406b01:	movzx  eax,WORD PTR [rcx+rax*2]
  406b05:	je     406b24 <flatcc_builder_check_union_field@@Base+0x54>
  406b07:	test   ax,ax
  406b0a:	setne  al
  406b0d:	movzx  eax,al
  406b10:	ret    
  406b11:	xor    eax,eax
  406b13:	movzx  eax,al
  406b16:	ret    
  406b17:	xor    eax,eax
  406b19:	movzx  eax,al
  406b1c:	ret    
  406b1d:	cmp    WORD PTR [rcx+rax*2],0x0
  406b22:	jmp    406b27 <flatcc_builder_check_union_field@@Base+0x57>
  406b24:	test   ax,ax
  406b27:	sete   al
  406b2a:	movzx  eax,al
  406b2d:	ret    
  406b2e:	push   rax
  406b2f:	lea    rdi,[rip+0x43db]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406b36:	lea    rsi,[rip+0x3ba5]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406b3d:	lea    rcx,[rip+0x444b]        # 40af8f <flatcc_builder_padding_base@@Base+0xb3f>
  406b44:	mov    edx,0x4ff
  406b49:	call   403060 <__assert_fail@plt>
  406b4e:	xchg   ax,ax

0000000000406b50 <flatcc_builder_check_required@@Base>:
  406b50:	mov    rax,QWORD PTR [rdi+0x30]
  406b54:	movzx  eax,WORD PTR [rax+0xe]
  406b58:	cmp    eax,0x3
  406b5b:	jne    406b98 <flatcc_builder_check_required@@Base+0x48>
  406b5d:	movzx  ecx,WORD PTR [rdi+0x10]
  406b61:	xor    eax,eax
  406b63:	cmp    ecx,edx
  406b65:	jl     406b94 <flatcc_builder_check_required@@Base+0x44>
  406b67:	mov    eax,0x1
  406b6c:	test   edx,edx
  406b6e:	jle    406b94 <flatcc_builder_check_required@@Base+0x44>
  406b70:	mov    rcx,QWORD PTR [rdi+0x8]
  406b74:	movsxd r8,edx
  406b77:	xor    edi,edi
  406b79:	nop    DWORD PTR [rax+0x0]
  406b80:	movzx  edx,WORD PTR [rsi+rdi*2]
  406b84:	cmp    WORD PTR [rcx+rdx*2],0x0
  406b89:	je     406b95 <flatcc_builder_check_required@@Base+0x45>
  406b8b:	add    rdi,0x1
  406b8f:	cmp    rdi,r8
  406b92:	jl     406b80 <flatcc_builder_check_required@@Base+0x30>
  406b94:	ret    
  406b95:	xor    eax,eax
  406b97:	ret    
  406b98:	push   rax
  406b99:	lea    rdi,[rip+0x4371]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406ba0:	lea    rsi,[rip+0x3b3b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406ba7:	lea    rcx,[rip+0x4431]        # 40afdf <flatcc_builder_padding_base@@Base+0xb8f>
  406bae:	mov    edx,0x511
  406bb3:	call   403060 <__assert_fail@plt>
  406bb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406bc0 <flatcc_builder_end_table@@Base>:
  406bc0:	push   rbp
  406bc1:	push   r15
  406bc3:	push   r14
  406bc5:	push   r12
  406bc7:	push   rbx
  406bc8:	sub    rsp,0x10
  406bcc:	mov    rax,QWORD PTR [rdi+0x30]
  406bd0:	movzx  eax,WORD PTR [rax+0xe]
  406bd4:	cmp    eax,0x3
  406bd7:	jne    406d28 <flatcc_builder_end_table@@Base+0x168>
  406bdd:	mov    rbx,rdi
  406be0:	mov    rax,QWORD PTR [rdi+0x8]
  406be4:	mov    ecx,DWORD PTR [rdi+0x10]
  406be7:	lea    ecx,[rcx+rcx*1]
  406bea:	add    ecx,0x4
  406bed:	mov    WORD PTR [rax-0x4],cx
  406bf1:	mov    edx,DWORD PTR [rdi+0x20]
  406bf4:	add    edx,0x4
  406bf7:	mov    WORD PTR [rax-0x2],dx
  406bfb:	lea    r12,[rax-0x4]
  406bff:	movzx  ebp,cx
  406c02:	mov    eax,DWORD PTR [rdi+0x14]
  406c05:	xor    eax,ebp
  406c07:	imul   eax,eax,0x9e3779b1
  406c0d:	movzx  ecx,dx
  406c10:	xor    ecx,eax
  406c12:	imul   ecx,ecx,0x9e3779b1
  406c18:	mov    DWORD PTR [rdi+0x14],ecx
  406c1b:	mov    rsi,r12
  406c1e:	mov    edx,ebp
  406c20:	call   406460 <flatcc_builder_create_cached_vtable@@Base>
  406c25:	test   eax,eax
  406c27:	je     406d15 <flatcc_builder_end_table@@Base+0x155>
  406c2d:	mov    r14d,eax
  406c30:	xor    r15d,r15d
  406c33:	xor    esi,esi
  406c35:	mov    rdi,r12
  406c38:	mov    rdx,rbp
  406c3b:	call   403070 <memset@plt>
  406c40:	mov    rax,QWORD PTR [rbx+0x30]
  406c44:	mov    r8d,DWORD PTR [rax+0x14]
  406c48:	add    r8,QWORD PTR [rbx+0x88]
  406c4f:	mov    r9,QWORD PTR [rbx]
  406c52:	mov    rsi,QWORD PTR [rbx+0x18]
  406c56:	sub    r9,r8
  406c59:	shr    r9,1
  406c5c:	mov    edx,DWORD PTR [rbx+0x20]
  406c5f:	movzx  ecx,WORD PTR [rbx+0xea]
  406c66:	mov    DWORD PTR [rsp],r14d
  406c6a:	mov    rdi,rbx
  406c6d:	call   4067f0 <flatcc_builder_create_table@@Base>
  406c72:	test   eax,eax
  406c74:	je     406d18 <flatcc_builder_end_table@@Base+0x158>
  406c7a:	mov    r14d,eax
  406c7d:	mov    rax,QWORD PTR [rbx+0x30]
  406c81:	mov    ecx,DWORD PTR [rax+0x18]
  406c84:	mov    DWORD PTR [rbx+0x14],ecx
  406c87:	movzx  ecx,WORD PTR [rax+0x1c]
  406c8b:	mov    WORD PTR [rbx+0x10],cx
  406c8f:	mov    ecx,DWORD PTR [rax+0x10]
  406c92:	add    rcx,QWORD PTR [rbx+0x58]
  406c96:	mov    QWORD PTR [rbx+0x8],rcx
  406c9a:	mov    eax,DWORD PTR [rax+0x14]
  406c9d:	add    rax,QWORD PTR [rbx+0x88]
  406ca4:	mov    QWORD PTR [rbx],rax
  406ca7:	mov    rdi,QWORD PTR [rbx+0x18]
  406cab:	mov    edx,DWORD PTR [rbx+0x20]
  406cae:	xor    esi,esi
  406cb0:	call   403070 <memset@plt>
  406cb5:	mov    rax,QWORD PTR [rbx+0x30]
  406cb9:	mov    ecx,DWORD PTR [rax+0x8]
  406cbc:	mov    DWORD PTR [rbx+0x20],ecx
  406cbf:	mov    ecx,DWORD PTR [rax]
  406cc1:	mov    DWORD PTR [rbx+0x28],ecx
  406cc4:	mov    edx,DWORD PTR [rax+0x4]
  406cc7:	mov    rsi,rcx
  406cca:	add    rsi,QWORD PTR [rbx+0x68]
  406cce:	mov    QWORD PTR [rbx+0x18],rsi
  406cd2:	mov    esi,DWORD PTR [rbx+0x70]
  406cd5:	sub    esi,ecx
  406cd7:	cmp    esi,edx
  406cd9:	cmova  esi,edx
  406cdc:	mov    DWORD PTR [rbx+0x24],esi
  406cdf:	movzx  ecx,WORD PTR [rbx+0xea]
  406ce6:	cmp    WORD PTR [rbx+0xe8],cx
  406ced:	jae    406cf6 <flatcc_builder_end_table@@Base+0x136>
  406cef:	mov    WORD PTR [rbx+0xe8],cx
  406cf6:	movzx  ecx,WORD PTR [rax+0xc]
  406cfa:	mov    WORD PTR [rbx+0xea],cx
  406d01:	add    rax,0xffffffffffffffdc
  406d05:	mov    QWORD PTR [rbx+0x30],rax
  406d09:	add    DWORD PTR [rbx+0x104],0xffffffff
  406d10:	mov    r15d,r14d
  406d13:	jmp    406d18 <flatcc_builder_end_table@@Base+0x158>
  406d15:	xor    r15d,r15d
  406d18:	mov    eax,r15d
  406d1b:	add    rsp,0x10
  406d1f:	pop    rbx
  406d20:	pop    r12
  406d22:	pop    r14
  406d24:	pop    r15
  406d26:	pop    rbp
  406d27:	ret    
  406d28:	lea    rdi,[rip+0x41e2]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  406d2f:	lea    rsi,[rip+0x39ac]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406d36:	lea    rcx,[rip+0x42fc]        # 40b039 <flatcc_builder_padding_base@@Base+0xbe9>
  406d3d:	mov    edx,0x525
  406d42:	call   403060 <__assert_fail@plt>
  406d47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406d50 <flatcc_builder_create_vector@@Base>:
  406d50:	push   rbp
  406d51:	push   rbx
  406d52:	sub    rsp,0x98
  406d59:	cmp    rdx,r9
  406d5c:	ja     406e89 <flatcc_builder_create_vector@@Base+0x139>
  406d62:	mov    rbx,rdi
  406d65:	movzx  edi,r8w
  406d69:	cmp    edi,0x4
  406d6c:	mov    eax,0x4
  406d71:	cmova  eax,edi
  406d74:	cmp    WORD PTR [rbx+0xe8],ax
  406d7b:	jae    406d84 <flatcc_builder_create_vector@@Base+0x34>
  406d7d:	mov    WORD PTR [rbx+0xe8],ax
  406d84:	imul   ecx,edx
  406d87:	mov    DWORD PTR [rsp+0x4],edx
  406d8b:	mov    ebp,DWORD PTR [rbx+0xf0]
  406d91:	mov    edx,ebp
  406d93:	sub    edx,ecx
  406d95:	movzx  eax,ax
  406d98:	add    eax,0xffffffff
  406d9b:	and    eax,edx
  406d9d:	mov    QWORD PTR [rsp+0x8],0x4
  406da6:	lea    rdx,[rsp+0x4]
  406dab:	mov    QWORD PTR [rsp+0x18],rdx
  406db0:	mov    QWORD PTR [rsp+0x20],0x4
  406db9:	mov    DWORD PTR [rsp+0x10],0x1
  406dc1:	test   ecx,ecx
  406dc3:	je     406e59 <flatcc_builder_create_vector@@Base+0x109>
  406dc9:	mov    ecx,ecx
  406dcb:	lea    r8,[rcx+0x4]
  406dcf:	mov    QWORD PTR [rsp+0x8],r8
  406dd4:	mov    QWORD PTR [rsp+0x28],rsi
  406dd9:	mov    QWORD PTR [rsp+0x30],rcx
  406dde:	mov    DWORD PTR [rsp+0x10],0x2
  406de6:	mov    edx,0x2
  406deb:	test   eax,eax
  406ded:	je     406e17 <flatcc_builder_create_vector@@Base+0xc7>
  406def:	mov    eax,eax
  406df1:	add    r8,rax
  406df4:	mov    QWORD PTR [rsp+0x8],r8
  406df9:	mov    ecx,edx
  406dfb:	shl    rcx,0x4
  406dff:	lea    rsi,[rip+0x364a]        # 40a450 <flatcc_builder_padding_base@@Base>
  406e06:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  406e0b:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  406e10:	add    edx,0x1
  406e13:	mov    DWORD PTR [rsp+0x10],edx
  406e17:	cmp    r8,0x11
  406e1b:	setb   al
  406e1e:	lea    rcx,[r8-0x10]
  406e22:	shr    rcx,0x20
  406e26:	sete   cl
  406e29:	test   r8d,r8d
  406e2c:	jle    406e6a <flatcc_builder_create_vector@@Base+0x11a>
  406e2e:	or     al,cl
  406e30:	je     406e6a <flatcc_builder_create_vector@@Base+0x11a>
  406e32:	sub    ebp,r8d
  406e35:	mov    rdi,QWORD PTR [rbx+0x38]
  406e39:	lea    rsi,[rsp+0x18]
  406e3e:	mov    ecx,ebp
  406e40:	call   QWORD PTR [rbx+0x48]
  406e43:	test   eax,eax
  406e45:	jne    406ea8 <flatcc_builder_create_vector@@Base+0x158>
  406e47:	mov    DWORD PTR [rbx+0xf0],ebp
  406e4d:	mov    eax,ebp
  406e4f:	add    rsp,0x98
  406e56:	pop    rbx
  406e57:	pop    rbp
  406e58:	ret    
  406e59:	mov    edx,0x1
  406e5e:	mov    r8d,0x4
  406e64:	test   eax,eax
  406e66:	jne    406def <flatcc_builder_create_vector@@Base+0x9f>
  406e68:	jmp    406e17 <flatcc_builder_create_vector@@Base+0xc7>
  406e6a:	lea    rdi,[rip+0x4a31]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406e71:	lea    rsi,[rip+0x386a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406e78:	lea    rcx,[rip+0x48e2]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406e7f:	mov    edx,0x287
  406e84:	call   403060 <__assert_fail@plt>
  406e89:	lea    rdi,[rip+0x41eb]        # 40b07b <flatcc_builder_padding_base@@Base+0xc2b>
  406e90:	lea    rsi,[rip+0x384b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406e97:	lea    rcx,[rip+0x41f0]        # 40b08e <flatcc_builder_padding_base@@Base+0xc3e>
  406e9e:	mov    edx,0x555
  406ea3:	call   403060 <__assert_fail@plt>
  406ea8:	lea    rdi,[rip+0x49f3]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  406eaf:	lea    rsi,[rip+0x382c]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406eb6:	lea    rcx,[rip+0x48a4]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  406ebd:	mov    edx,0x28b
  406ec2:	call   403060 <__assert_fail@plt>
  406ec7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406ed0 <flatcc_builder_end_vector@@Base>:
  406ed0:	push   rbp
  406ed1:	push   rbx
  406ed2:	push   rax
  406ed3:	mov    rax,QWORD PTR [rdi+0x30]
  406ed7:	movzx  ecx,WORD PTR [rax+0xe]
  406edb:	cmp    ecx,0x4
  406ede:	jne    406f7a <flatcc_builder_end_vector@@Base+0xaa>
  406ee4:	mov    rbx,rdi
  406ee7:	mov    rsi,QWORD PTR [rdi+0x18]
  406eeb:	mov    ecx,DWORD PTR [rax+0x10]
  406eee:	mov    edx,DWORD PTR [rax+0x14]
  406ef1:	movzx  r8d,WORD PTR [rdi+0xea]
  406ef9:	mov    r9d,DWORD PTR [rax+0x18]
  406efd:	call   406d50 <flatcc_builder_create_vector@@Base>
  406f02:	mov    ebp,eax
  406f04:	test   eax,eax
  406f06:	je     406f71 <flatcc_builder_end_vector@@Base+0xa1>
  406f08:	mov    rdi,QWORD PTR [rbx+0x18]
  406f0c:	mov    edx,DWORD PTR [rbx+0x20]
  406f0f:	xor    esi,esi
  406f11:	call   403070 <memset@plt>
  406f16:	mov    rax,QWORD PTR [rbx+0x30]
  406f1a:	mov    ecx,DWORD PTR [rax+0x8]
  406f1d:	mov    DWORD PTR [rbx+0x20],ecx
  406f20:	mov    ecx,DWORD PTR [rax]
  406f22:	mov    DWORD PTR [rbx+0x28],ecx
  406f25:	mov    edx,DWORD PTR [rax+0x4]
  406f28:	mov    rsi,rcx
  406f2b:	add    rsi,QWORD PTR [rbx+0x68]
  406f2f:	mov    QWORD PTR [rbx+0x18],rsi
  406f33:	mov    esi,DWORD PTR [rbx+0x70]
  406f36:	sub    esi,ecx
  406f38:	cmp    esi,edx
  406f3a:	cmova  esi,edx
  406f3d:	mov    DWORD PTR [rbx+0x24],esi
  406f40:	movzx  ecx,WORD PTR [rbx+0xea]
  406f47:	cmp    WORD PTR [rbx+0xe8],cx
  406f4e:	jae    406f57 <flatcc_builder_end_vector@@Base+0x87>
  406f50:	mov    WORD PTR [rbx+0xe8],cx
  406f57:	movzx  ecx,WORD PTR [rax+0xc]
  406f5b:	mov    WORD PTR [rbx+0xea],cx
  406f62:	add    rax,0xffffffffffffffdc
  406f66:	mov    QWORD PTR [rbx+0x30],rax
  406f6a:	add    DWORD PTR [rbx+0x104],0xffffffff
  406f71:	mov    eax,ebp
  406f73:	add    rsp,0x8
  406f77:	pop    rbx
  406f78:	pop    rbp
  406f79:	ret    
  406f7a:	lea    rdi,[rip+0x3a9e]        # 40aa1f <flatcc_builder_padding_base@@Base+0x5cf>
  406f81:	lea    rsi,[rip+0x375a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  406f88:	lea    rcx,[rip+0x4175]        # 40b104 <flatcc_builder_padding_base@@Base+0xcb4>
  406f8f:	mov    edx,0x578
  406f94:	call   403060 <__assert_fail@plt>
  406f99:	nop    DWORD PTR [rax+0x0]

0000000000406fa0 <flatcc_builder_vector_count@@Base>:
  406fa0:	mov    rax,QWORD PTR [rdi+0x30]
  406fa4:	mov    eax,DWORD PTR [rax+0x14]
  406fa7:	ret    
  406fa8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406fb0 <flatcc_builder_vector_edit@@Base>:
  406fb0:	mov    rax,QWORD PTR [rdi+0x18]
  406fb4:	ret    
  406fb5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406fbf:	nop

0000000000406fc0 <flatcc_builder_create_offset_vector_direct@@Base>:
  406fc0:	xor    ecx,ecx
  406fc2:	jmp    406fd0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406fc4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406fce:	xchg   ax,ax
  406fd0:	push   r14
  406fd2:	push   rbx
  406fd3:	sub    rsp,0x98
  406fda:	mov    r10,rdx
  406fdd:	xor    ebx,ebx
  406fdf:	test   r10d,0xc0000000
  406fe6:	jne    40713a <flatcc_builder_create_offset_vector_direct@@Base+0x17a>
  406fec:	mov    r14,rdi
  406fef:	movzx  edx,WORD PTR [rdi+0xe8]
  406ff6:	cmp    edx,0x3
  406ff9:	ja     407005 <flatcc_builder_create_offset_vector_direct@@Base+0x45>
  406ffb:	mov    WORD PTR [r14+0xe8],0x4
  407005:	lea    r8d,[r10*4+0x0]
  40700d:	mov    DWORD PTR [rsp+0x4],r10d
  407012:	mov    ebx,DWORD PTR [r14+0xf0]
  407019:	mov    r9d,ebx
  40701c:	and    r9d,0x3
  407020:	mov    QWORD PTR [rsp+0x8],0x4
  407029:	lea    rdx,[rsp+0x4]
  40702e:	mov    QWORD PTR [rsp+0x18],rdx
  407033:	mov    QWORD PTR [rsp+0x20],0x4
  40703c:	mov    DWORD PTR [rsp+0x10],0x1
  407044:	test   r8d,r8d
  407047:	je     407147 <flatcc_builder_create_offset_vector_direct@@Base+0x187>
  40704d:	mov    edx,r8d
  407050:	lea    r8,[rdx+0x4]
  407054:	mov    QWORD PTR [rsp+0x8],r8
  407059:	mov    QWORD PTR [rsp+0x28],rsi
  40705e:	mov    QWORD PTR [rsp+0x30],rdx
  407063:	mov    DWORD PTR [rsp+0x10],0x2
  40706b:	mov    edx,0x2
  407070:	test   r9d,r9d
  407073:	je     40709b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  407075:	add    r8,r9
  407078:	mov    QWORD PTR [rsp+0x8],r8
  40707d:	mov    edi,edx
  40707f:	shl    rdi,0x4
  407083:	lea    rax,[rip+0x33c6]        # 40a450 <flatcc_builder_padding_base@@Base>
  40708a:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  40708f:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  407094:	add    edx,0x1
  407097:	mov    DWORD PTR [rsp+0x10],edx
  40709b:	test   r10d,r10d
  40709e:	je     4070f6 <flatcc_builder_create_offset_vector_direct@@Base+0x136>
  4070a0:	mov    edi,0xfffffffc
  4070a5:	sub    edi,ebx
  4070a7:	add    edi,r8d
  4070aa:	mov    r9d,r10d
  4070ad:	xor    ebx,ebx
  4070af:	nop
  4070b0:	mov    eax,DWORD PTR [rsi+rbx*4]
  4070b3:	test   eax,eax
  4070b5:	je     4070d0 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
  4070b7:	add    eax,edi
  4070b9:	mov    DWORD PTR [rsi+rbx*4],eax
  4070bc:	test   rcx,rcx
  4070bf:	je     4070e3 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  4070c1:	cmp    BYTE PTR [rcx+rbx*1],0x0
  4070c5:	jne    4070e3 <flatcc_builder_create_offset_vector_direct@@Base+0x123>
  4070c7:	jmp    407160 <flatcc_builder_create_offset_vector_direct@@Base+0x1a0>
  4070cc:	nop    DWORD PTR [rax+0x0]
  4070d0:	test   rcx,rcx
  4070d3:	je     40717f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  4070d9:	cmp    BYTE PTR [rcx+rbx*1],0x0
  4070dd:	jne    40719e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  4070e3:	add    rbx,0x1
  4070e7:	add    edi,0xfffffffc
  4070ea:	cmp    rbx,r9
  4070ed:	jb     4070b0 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  4070ef:	mov    ebx,DWORD PTR [r14+0xf0]
  4070f6:	cmp    r8,0x11
  4070fa:	setb   al
  4070fd:	lea    rcx,[r8-0x10]
  407101:	shr    rcx,0x20
  407105:	sete   cl
  407108:	test   r8d,r8d
  40710b:	jle    4071bd <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  407111:	or     al,cl
  407113:	je     4071bd <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  407119:	sub    ebx,r8d
  40711c:	mov    rdi,QWORD PTR [r14+0x38]
  407120:	lea    rsi,[rsp+0x18]
  407125:	mov    ecx,ebx
  407127:	call   QWORD PTR [r14+0x48]
  40712b:	test   eax,eax
  40712d:	jne    4071dc <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  407133:	mov    DWORD PTR [r14+0xf0],ebx
  40713a:	mov    eax,ebx
  40713c:	add    rsp,0x98
  407143:	pop    rbx
  407144:	pop    r14
  407146:	ret    
  407147:	mov    edx,0x1
  40714c:	mov    r8d,0x4
  407152:	test   r9d,r9d
  407155:	jne    407075 <flatcc_builder_create_offset_vector_direct@@Base+0xb5>
  40715b:	jmp    40709b <flatcc_builder_create_offset_vector_direct@@Base+0xdb>
  407160:	lea    rdi,[rip+0x472f]        # 40b896 <flatcc_builder_padding_base@@Base+0x1446>
  407167:	lea    rsi,[rip+0x3574]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40716e:	lea    rcx,[rip+0x472f]        # 40b8a4 <flatcc_builder_padding_base@@Base+0x1454>
  407175:	mov    edx,0x5b1
  40717a:	call   403060 <__assert_fail@plt>
  40717f:	lea    rdi,[rip+0x471c]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  407186:	lea    rsi,[rip+0x3555]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40718d:	lea    rcx,[rip+0x4710]        # 40b8a4 <flatcc_builder_padding_base@@Base+0x1454>
  407194:	mov    edx,0x5b7
  407199:	call   403060 <__assert_fail@plt>
  40719e:	lea    rdi,[rip+0x4782]        # 40b927 <flatcc_builder_padding_base@@Base+0x14d7>
  4071a5:	lea    rsi,[rip+0x3536]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4071ac:	lea    rcx,[rip+0x46f1]        # 40b8a4 <flatcc_builder_padding_base@@Base+0x1454>
  4071b3:	mov    edx,0x5b5
  4071b8:	call   403060 <__assert_fail@plt>
  4071bd:	lea    rdi,[rip+0x46de]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4071c4:	lea    rsi,[rip+0x3517]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4071cb:	lea    rcx,[rip+0x458f]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4071d2:	mov    edx,0x287
  4071d7:	call   403060 <__assert_fail@plt>
  4071dc:	lea    rdi,[rip+0x46bf]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4071e3:	lea    rsi,[rip+0x34f8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4071ea:	lea    rcx,[rip+0x4570]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4071f1:	mov    edx,0x28b
  4071f6:	call   403060 <__assert_fail@plt>
  4071fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407200 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  407200:	push   rbp
  407201:	push   rbx
  407202:	push   rax
  407203:	mov    rcx,QWORD PTR [rdi+0x30]
  407207:	movzx  edx,WORD PTR [rcx+0xe]
  40720b:	cmp    edx,0x5
  40720e:	jne    4072a1 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa1>
  407214:	mov    rax,rsi
  407217:	mov    rbx,rdi
  40721a:	mov    rsi,QWORD PTR [rdi+0x18]
  40721e:	mov    edx,DWORD PTR [rcx+0x14]
  407221:	mov    rcx,rax
  407224:	call   406fd0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407229:	mov    ebp,eax
  40722b:	test   eax,eax
  40722d:	je     407298 <flatcc_builder_end_offset_vector_for_unions@@Base+0x98>
  40722f:	mov    rdi,QWORD PTR [rbx+0x18]
  407233:	mov    edx,DWORD PTR [rbx+0x20]
  407236:	xor    esi,esi
  407238:	call   403070 <memset@plt>
  40723d:	mov    rax,QWORD PTR [rbx+0x30]
  407241:	mov    ecx,DWORD PTR [rax+0x8]
  407244:	mov    DWORD PTR [rbx+0x20],ecx
  407247:	mov    ecx,DWORD PTR [rax]
  407249:	mov    DWORD PTR [rbx+0x28],ecx
  40724c:	mov    edx,DWORD PTR [rax+0x4]
  40724f:	mov    rsi,rcx
  407252:	add    rsi,QWORD PTR [rbx+0x68]
  407256:	mov    QWORD PTR [rbx+0x18],rsi
  40725a:	mov    esi,DWORD PTR [rbx+0x70]
  40725d:	sub    esi,ecx
  40725f:	cmp    esi,edx
  407261:	cmova  esi,edx
  407264:	mov    DWORD PTR [rbx+0x24],esi
  407267:	movzx  ecx,WORD PTR [rbx+0xea]
  40726e:	cmp    WORD PTR [rbx+0xe8],cx
  407275:	jae    40727e <flatcc_builder_end_offset_vector_for_unions@@Base+0x7e>
  407277:	mov    WORD PTR [rbx+0xe8],cx
  40727e:	movzx  ecx,WORD PTR [rax+0xc]
  407282:	mov    WORD PTR [rbx+0xea],cx
  407289:	add    rax,0xffffffffffffffdc
  40728d:	mov    QWORD PTR [rbx+0x30],rax
  407291:	add    DWORD PTR [rbx+0x104],0xffffffff
  407298:	mov    eax,ebp
  40729a:	add    rsp,0x8
  40729e:	pop    rbx
  40729f:	pop    rbp
  4072a0:	ret    
  4072a1:	lea    rdi,[rip+0x3870]        # 40ab18 <flatcc_builder_padding_base@@Base+0x6c8>
  4072a8:	lea    rsi,[rip+0x3433]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4072af:	lea    rcx,[rip+0x3edb]        # 40b191 <flatcc_builder_padding_base@@Base+0xd41>
  4072b6:	mov    edx,0x5d5
  4072bb:	call   403060 <__assert_fail@plt>

00000000004072c0 <flatcc_builder_offset_vector_edit@@Base>:
  4072c0:	mov    rax,QWORD PTR [rdi+0x18]
  4072c4:	ret    
  4072c5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4072cf:	nop

00000000004072d0 <flatcc_builder_offset_vector_count@@Base>:
  4072d0:	mov    rax,QWORD PTR [rdi+0x30]
  4072d4:	mov    eax,DWORD PTR [rax+0x14]
  4072d7:	ret    
  4072d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004072e0 <flatcc_builder_table_add_union@@Base>:
  4072e0:	push   rbp
  4072e1:	push   r15
  4072e3:	push   r14
  4072e5:	push   rbx
  4072e6:	push   rax
  4072e7:	mov    rax,QWORD PTR [rdi+0x30]
  4072eb:	movzx  eax,WORD PTR [rax+0xe]
  4072ef:	cmp    eax,0x3
  4072f2:	jne    407351 <flatcc_builder_table_add_union@@Base+0x71>
  4072f4:	mov    r14,rdx
  4072f7:	mov    ebp,esi
  4072f9:	mov    r15,rdi
  4072fc:	mov    rbx,rdx
  4072ff:	shr    rbx,0x20
  407303:	test   r14b,r14b
  407306:	jne    40730c <flatcc_builder_table_add_union@@Base+0x2c>
  407308:	test   ebx,ebx
  40730a:	jne    407370 <flatcc_builder_table_add_union@@Base+0x90>
  40730c:	test   ebx,ebx
  40730e:	je     407325 <flatcc_builder_table_add_union@@Base+0x45>
  407310:	mov    rdi,r15
  407313:	mov    esi,ebp
  407315:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  40731a:	test   rax,rax
  40731d:	je     4073ae <flatcc_builder_table_add_union@@Base+0xce>
  407323:	mov    DWORD PTR [rax],ebx
  407325:	add    ebp,0xffffffff
  407328:	mov    edx,0x1
  40732d:	mov    ecx,0x1
  407332:	mov    rdi,r15
  407335:	mov    esi,ebp
  407337:	call   407530 <flatcc_builder_table_add@@Base>
  40733c:	test   rax,rax
  40733f:	je     40738f <flatcc_builder_table_add_union@@Base+0xaf>
  407341:	mov    BYTE PTR [rax],r14b
  407344:	xor    eax,eax
  407346:	add    rsp,0x8
  40734a:	pop    rbx
  40734b:	pop    r14
  40734d:	pop    r15
  40734f:	pop    rbp
  407350:	ret    
  407351:	lea    rdi,[rip+0x3bb9]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  407358:	lea    rsi,[rip+0x3383]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40735f:	lea    rcx,[rip+0x3e9d]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  407366:	mov    edx,0x5ee
  40736b:	call   403060 <__assert_fail@plt>
  407370:	lea    rdi,[rip+0x3ee4]        # 40b25b <flatcc_builder_padding_base@@Base+0xe0b>
  407377:	lea    rsi,[rip+0x3364]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40737e:	lea    rcx,[rip+0x3e7e]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  407385:	mov    edx,0x5ef
  40738a:	call   403060 <__assert_fail@plt>
  40738f:	lea    rdi,[rip+0x3ef1]        # 40b287 <flatcc_builder_padding_base@@Base+0xe37>
  407396:	lea    rsi,[rip+0x3345]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40739d:	lea    rcx,[rip+0x3e5f]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  4073a4:	mov    edx,0x5f6
  4073a9:	call   403060 <__assert_fail@plt>
  4073ae:	lea    rdi,[rip+0x3ec8]        # 40b27d <flatcc_builder_padding_base@@Base+0xe2d>
  4073b5:	lea    rsi,[rip+0x3326]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4073bc:	lea    rcx,[rip+0x3e40]        # 40b203 <flatcc_builder_padding_base@@Base+0xdb3>
  4073c3:	mov    edx,0x5f2
  4073c8:	call   403060 <__assert_fail@plt>
  4073cd:	nop    DWORD PTR [rax]

00000000004073d0 <flatcc_builder_table_add_offset@@Base>:
  4073d0:	push   rbp
  4073d1:	push   r15
  4073d3:	push   r14
  4073d5:	push   rbx
  4073d6:	push   rax
  4073d7:	mov    rax,QWORD PTR [rdi+0x30]
  4073db:	movzx  eax,WORD PTR [rax+0xe]
  4073df:	cmp    eax,0x3
  4073e2:	jne    4074ce <flatcc_builder_table_add_offset@@Base+0xfe>
  4073e8:	mov    r14d,esi
  4073eb:	cmp    esi,0x7ffd
  4073f1:	jae    4074ed <flatcc_builder_table_add_offset@@Base+0x11d>
  4073f7:	mov    rbx,rdi
  4073fa:	mov    rax,QWORD PTR [rdi+0x8]
  4073fe:	movsxd rcx,r14d
  407401:	cmp    WORD PTR [rax+rcx*2],0x0
  407406:	jne    40750c <flatcc_builder_table_add_offset@@Base+0x13c>
  40740c:	mov    ecx,DWORD PTR [rbx+0x14]
  40740f:	xor    ecx,r14d
  407412:	imul   ecx,ecx,0x9e3779b1
  407418:	xor    ecx,0x4
  40741b:	imul   ecx,ecx,0x9e3779b1
  407421:	mov    DWORD PTR [rbx+0x14],ecx
  407424:	mov    ebp,DWORD PTR [rbx+0x20]
  407427:	mov    ecx,DWORD PTR [rbx+0x24]
  40742a:	add    ebp,0x3
  40742d:	and    ebp,0xfffffffc
  407430:	lea    r15,[rbp+0x4]
  407434:	mov    DWORD PTR [rbx+0x20],r15d
  407438:	cmp    ecx,r15d
  40743b:	jae    407497 <flatcc_builder_table_add_offset@@Base+0xc7>
  40743d:	lea    eax,[rbp+0x4]
  407440:	lea    rsi,[rbx+0x68]
  407444:	mov    rdi,QWORD PTR [rbx+0x40]
  407448:	mov    edx,DWORD PTR [rbx+0x28]
  40744b:	add    rdx,rax
  40744e:	mov    ecx,0x1
  407453:	mov    r8d,0x1
  407459:	call   QWORD PTR [rbx+0x50]
  40745c:	test   eax,eax
  40745e:	je     407464 <flatcc_builder_table_add_offset@@Base+0x94>
  407460:	xor    ebp,ebp
  407462:	jmp    4074c0 <flatcc_builder_table_add_offset@@Base+0xf0>
  407464:	mov    eax,DWORD PTR [rbx+0x28]
  407467:	mov    rcx,rax
  40746a:	add    rcx,QWORD PTR [rbx+0x68]
  40746e:	mov    QWORD PTR [rbx+0x18],rcx
  407472:	mov    ecx,DWORD PTR [rbx+0x70]
  407475:	sub    ecx,eax
  407477:	cmp    ecx,0xfffc
  40747d:	mov    eax,0xfffc
  407482:	cmovb  eax,ecx
  407485:	mov    DWORD PTR [rbx+0x24],eax
  407488:	mov    rax,QWORD PTR [rbx+0x30]
  40748c:	mov    DWORD PTR [rax+0x4],0xfffc
  407493:	mov    rax,QWORD PTR [rbx+0x8]
  407497:	movzx  ecx,r14w
  40749b:	mov    WORD PTR [rax+rcx*2],r15w
  4074a0:	cmp    WORD PTR [rbx+0x10],cx
  4074a4:	ja     4074af <flatcc_builder_table_add_offset@@Base+0xdf>
  4074a6:	add    r14d,0x1
  4074aa:	mov    WORD PTR [rbx+0x10],r14w
  4074af:	mov    rax,QWORD PTR [rbx]
  4074b2:	lea    rcx,[rax+0x2]
  4074b6:	mov    QWORD PTR [rbx],rcx
  4074b9:	mov    WORD PTR [rax],bp
  4074bc:	add    rbp,QWORD PTR [rbx+0x18]
  4074c0:	mov    rax,rbp
  4074c3:	add    rsp,0x8
  4074c7:	pop    rbx
  4074c8:	pop    r14
  4074ca:	pop    r15
  4074cc:	pop    rbp
  4074cd:	ret    
  4074ce:	lea    rdi,[rip+0x3a3c]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  4074d5:	lea    rsi,[rip+0x3206]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4074dc:	lea    rcx,[rip+0x4122]        # 40b605 <flatcc_builder_padding_base@@Base+0x11b5>
  4074e3:	mov    edx,0x713
  4074e8:	call   403060 <__assert_fail@plt>
  4074ed:	lea    rdi,[rip+0x4091]        # 40b585 <flatcc_builder_padding_base@@Base+0x1135>
  4074f4:	lea    rsi,[rip+0x31e7]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4074fb:	lea    rcx,[rip+0x4103]        # 40b605 <flatcc_builder_padding_base@@Base+0x11b5>
  407502:	mov    edx,0x714
  407507:	call   403060 <__assert_fail@plt>
  40750c:	lea    rdi,[rip+0x438f]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  407513:	lea    rsi,[rip+0x31c8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40751a:	lea    rcx,[rip+0x40e4]        # 40b605 <flatcc_builder_padding_base@@Base+0x11b5>
  407521:	mov    edx,0x71b
  407526:	call   403060 <__assert_fail@plt>
  40752b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407530 <flatcc_builder_table_add@@Base>:
  407530:	push   rbp
  407531:	push   r14
  407533:	push   rbx
  407534:	mov    rax,QWORD PTR [rdi+0x30]
  407538:	movzx  eax,WORD PTR [rax+0xe]
  40753c:	cmp    eax,0x3
  40753f:	jne    40762c <flatcc_builder_table_add@@Base+0xfc>
  407545:	mov    r14d,esi
  407548:	cmp    esi,0x7ffd
  40754e:	jae    40764b <flatcc_builder_table_add@@Base+0x11b>
  407554:	mov    rbx,rdi
  407557:	cmp    WORD PTR [rdi+0xea],cx
  40755e:	jae    407567 <flatcc_builder_table_add@@Base+0x37>
  407560:	mov    WORD PTR [rbx+0xea],cx
  407567:	mov    rsi,QWORD PTR [rbx+0x8]
  40756b:	movsxd rax,r14d
  40756e:	cmp    WORD PTR [rsi+rax*2],0x0
  407573:	jne    40766a <flatcc_builder_table_add@@Base+0x13a>
  407579:	mov    eax,DWORD PTR [rbx+0x14]
  40757c:	xor    eax,r14d
  40757f:	imul   eax,eax,0x9e3779b1
  407585:	xor    eax,edx
  407587:	imul   eax,eax,0x9e3779b1
  40758d:	mov    DWORD PTR [rbx+0x14],eax
  407590:	mov    eax,DWORD PTR [rbx+0x20]
  407593:	movzx  ebp,cx
  407596:	lea    eax,[rax+rbp*1]
  407599:	add    eax,0xffffffff
  40759c:	neg    ebp
  40759e:	and    ebp,eax
  4075a0:	add    edx,ebp
  4075a2:	mov    DWORD PTR [rbx+0x20],edx
  4075a5:	cmp    edx,DWORD PTR [rbx+0x24]
  4075a8:	jb     407607 <flatcc_builder_table_add@@Base+0xd7>
  4075aa:	add    edx,0x1
  4075ad:	lea    rsi,[rbx+0x68]
  4075b1:	mov    rdi,QWORD PTR [rbx+0x40]
  4075b5:	mov    eax,DWORD PTR [rbx+0x28]
  4075b8:	add    rax,rdx
  4075bb:	mov    ecx,0x1
  4075c0:	mov    r8d,0x1
  4075c6:	mov    rdx,rax
  4075c9:	call   QWORD PTR [rbx+0x50]
  4075cc:	test   eax,eax
  4075ce:	je     4075d4 <flatcc_builder_table_add@@Base+0xa4>
  4075d0:	xor    eax,eax
  4075d2:	jmp    407627 <flatcc_builder_table_add@@Base+0xf7>
  4075d4:	mov    eax,DWORD PTR [rbx+0x28]
  4075d7:	mov    rcx,rax
  4075da:	add    rcx,QWORD PTR [rbx+0x68]
  4075de:	mov    QWORD PTR [rbx+0x18],rcx
  4075e2:	mov    ecx,DWORD PTR [rbx+0x70]
  4075e5:	sub    ecx,eax
  4075e7:	cmp    ecx,0xfffc
  4075ed:	mov    eax,0xfffc
  4075f2:	cmovb  eax,ecx
  4075f5:	mov    DWORD PTR [rbx+0x24],eax
  4075f8:	mov    rax,QWORD PTR [rbx+0x30]
  4075fc:	mov    DWORD PTR [rax+0x4],0xfffc
  407603:	mov    rsi,QWORD PTR [rbx+0x8]
  407607:	mov    eax,ebp
  407609:	add    ebp,0x4
  40760c:	movzx  ecx,r14w
  407610:	mov    WORD PTR [rsi+rcx*2],bp
  407614:	cmp    WORD PTR [rbx+0x10],cx
  407618:	ja     407623 <flatcc_builder_table_add@@Base+0xf3>
  40761a:	add    r14d,0x1
  40761e:	mov    WORD PTR [rbx+0x10],r14w
  407623:	add    rax,QWORD PTR [rbx+0x18]
  407627:	pop    rbx
  407628:	pop    r14
  40762a:	pop    rbp
  40762b:	ret    
  40762c:	lea    rdi,[rip+0x38de]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  407633:	lea    rsi,[rip+0x30a8]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40763a:	lea    rcx,[rip+0x3efa]        # 40b53b <flatcc_builder_padding_base@@Base+0x10eb>
  407641:	mov    edx,0x6ed
  407646:	call   403060 <__assert_fail@plt>
  40764b:	lea    rdi,[rip+0x3f33]        # 40b585 <flatcc_builder_padding_base@@Base+0x1135>
  407652:	lea    rsi,[rip+0x3089]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407659:	lea    rcx,[rip+0x3edb]        # 40b53b <flatcc_builder_padding_base@@Base+0x10eb>
  407660:	mov    edx,0x6ee
  407665:	call   403060 <__assert_fail@plt>
  40766a:	lea    rdi,[rip+0x4231]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  407671:	lea    rsi,[rip+0x306a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407678:	lea    rcx,[rip+0x3ebc]        # 40b53b <flatcc_builder_padding_base@@Base+0x10eb>
  40767f:	mov    edx,0x6f8
  407684:	call   403060 <__assert_fail@plt>
  407689:	nop    DWORD PTR [rax+0x0]

0000000000407690 <flatcc_builder_table_add_union_vector@@Base>:
  407690:	push   r15
  407692:	push   r14
  407694:	push   r12
  407696:	push   rbx
  407697:	push   rax
  407698:	mov    rax,QWORD PTR [rdi+0x30]
  40769c:	movzx  eax,WORD PTR [rax+0xe]
  4076a0:	cmp    eax,0x3
  4076a3:	jne    4076f9 <flatcc_builder_table_add_union_vector@@Base+0x69>
  4076a5:	mov    rbx,rdx
  4076a8:	mov    r12,rdx
  4076ab:	shr    r12,0x20
  4076af:	test   ebx,ebx
  4076b1:	sete   al
  4076b4:	test   r12d,r12d
  4076b7:	sete   cl
  4076ba:	cmp    al,cl
  4076bc:	jne    407718 <flatcc_builder_table_add_union_vector@@Base+0x88>
  4076be:	test   ebx,ebx
  4076c0:	je     4076eb <flatcc_builder_table_add_union_vector@@Base+0x5b>
  4076c2:	mov    r14d,esi
  4076c5:	mov    r15,rdi
  4076c8:	lea    esi,[r14-0x1]
  4076cc:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  4076d1:	test   rax,rax
  4076d4:	je     407737 <flatcc_builder_table_add_union_vector@@Base+0xa7>
  4076d6:	mov    DWORD PTR [rax],ebx
  4076d8:	mov    rdi,r15
  4076db:	mov    esi,r14d
  4076de:	call   4073d0 <flatcc_builder_table_add_offset@@Base>
  4076e3:	test   rax,rax
  4076e6:	je     407756 <flatcc_builder_table_add_union_vector@@Base+0xc6>
  4076e8:	mov    DWORD PTR [rax],r12d
  4076eb:	xor    eax,eax
  4076ed:	add    rsp,0x8
  4076f1:	pop    rbx
  4076f2:	pop    r12
  4076f4:	pop    r14
  4076f6:	pop    r15
  4076f8:	ret    
  4076f9:	lea    rdi,[rip+0x3811]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  407700:	lea    rsi,[rip+0x2fdb]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407707:	lea    rcx,[rip+0x3b85]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  40770e:	mov    edx,0x600
  407713:	call   403060 <__assert_fail@plt>
  407718:	lea    rdi,[rip+0x3bd7]        # 40b2f6 <flatcc_builder_padding_base@@Base+0xea6>
  40771f:	lea    rsi,[rip+0x2fbc]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407726:	lea    rcx,[rip+0x3b66]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  40772d:	mov    edx,0x601
  407732:	call   403060 <__assert_fail@plt>
  407737:	lea    rdi,[rip+0x3b3f]        # 40b27d <flatcc_builder_padding_base@@Base+0xe2d>
  40773e:	lea    rsi,[rip+0x2f9d]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407745:	lea    rcx,[rip+0x3b47]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  40774c:	mov    edx,0x604
  407751:	call   403060 <__assert_fail@plt>
  407756:	lea    rdi,[rip+0x3b20]        # 40b27d <flatcc_builder_padding_base@@Base+0xe2d>
  40775d:	lea    rsi,[rip+0x2f7e]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407764:	lea    rcx,[rip+0x3b28]        # 40b293 <flatcc_builder_padding_base@@Base+0xe43>
  40776b:	mov    edx,0x608
  407770:	call   403060 <__assert_fail@plt>
  407775:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40777f:	nop

0000000000407780 <flatcc_builder_create_union_vector@@Base>:
  407780:	push   r15
  407782:	push   r14
  407784:	push   r13
  407786:	push   r12
  407788:	push   rbx
  407789:	mov    r14,rdx
  40778c:	mov    r15,rsi
  40778f:	mov    rbx,rdi
  407792:	mov    esi,0x4
  407797:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  40779c:	test   eax,eax
  40779e:	je     4077b0 <flatcc_builder_create_union_vector@@Base+0x30>
  4077a0:	xor    r14d,r14d
  4077a3:	mov    rax,r14
  4077a6:	pop    rbx
  4077a7:	pop    r12
  4077a9:	pop    r13
  4077ab:	pop    r14
  4077ad:	pop    r15
  4077af:	ret    
  4077b0:	mov    rax,QWORD PTR [rbx+0x30]
  4077b4:	mov    DWORD PTR [rax+0x10],0x4
  4077bb:	mov    rax,QWORD PTR [rbx+0x30]
  4077bf:	mov    DWORD PTR [rax+0x14],0x0
  4077c6:	mov    rax,QWORD PTR [rbx+0x30]
  4077ca:	mov    WORD PTR [rax+0xe],0x5
  4077d0:	mov    ecx,DWORD PTR [rbx+0x28]
  4077d3:	mov    edx,DWORD PTR [rbx+0x70]
  4077d6:	sub    edx,ecx
  4077d8:	add    rcx,QWORD PTR [rbx+0x68]
  4077dc:	mov    QWORD PTR [rbx+0x18],rcx
  4077e0:	cmp    edx,0xfffffffc
  4077e3:	mov    ecx,0xfffffffc
  4077e8:	cmovb  ecx,edx
  4077eb:	mov    DWORD PTR [rbx+0x24],ecx
  4077ee:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4077f5:	mov    ecx,DWORD PTR [rax+0x14]
  4077f8:	add    ecx,r14d
  4077fb:	jb     407a6a <flatcc_builder_create_union_vector@@Base+0x2ea>
  407801:	cmp    ecx,0x40000000
  407807:	jae    407a6a <flatcc_builder_create_union_vector@@Base+0x2ea>
  40780d:	mov    DWORD PTR [rax+0x14],ecx
  407810:	mov    r12d,DWORD PTR [rbx+0x20]
  407814:	mov    eax,DWORD PTR [rbx+0x24]
  407817:	lea    ecx,[r12+r14*4]
  40781b:	mov    DWORD PTR [rbx+0x20],ecx
  40781e:	cmp    ecx,eax
  407820:	jae    407830 <flatcc_builder_create_union_vector@@Base+0xb0>
  407822:	mov    rsi,QWORD PTR [rbx+0x18]
  407826:	add    r12,rsi
  407829:	jne    40788c <flatcc_builder_create_union_vector@@Base+0x10c>
  40782b:	jmp    4077a0 <flatcc_builder_create_union_vector@@Base+0x20>
  407830:	add    ecx,0x1
  407833:	lea    rsi,[rbx+0x68]
  407837:	mov    rdi,QWORD PTR [rbx+0x40]
  40783b:	mov    edx,DWORD PTR [rbx+0x28]
  40783e:	add    rdx,rcx
  407841:	mov    ecx,0x1
  407846:	mov    r8d,0x1
  40784c:	call   QWORD PTR [rbx+0x50]
  40784f:	test   eax,eax
  407851:	jne    4077a0 <flatcc_builder_create_union_vector@@Base+0x20>
  407857:	mov    eax,DWORD PTR [rbx+0x28]
  40785a:	mov    rsi,rax
  40785d:	add    rsi,QWORD PTR [rbx+0x68]
  407861:	mov    QWORD PTR [rbx+0x18],rsi
  407865:	mov    ecx,DWORD PTR [rbx+0x70]
  407868:	sub    ecx,eax
  40786a:	cmp    ecx,0xfffffffc
  40786d:	mov    eax,0xfffffffc
  407872:	cmovb  eax,ecx
  407875:	mov    DWORD PTR [rbx+0x24],eax
  407878:	mov    rcx,QWORD PTR [rbx+0x30]
  40787c:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407883:	add    r12,rsi
  407886:	je     4077a0 <flatcc_builder_create_union_vector@@Base+0x20>
  40788c:	mov    r13d,DWORD PTR [rbx+0x20]
  407890:	lea    ecx,[r14+r13*1]
  407894:	mov    DWORD PTR [rbx+0x20],ecx
  407897:	cmp    ecx,eax
  407899:	jb     4078ee <flatcc_builder_create_union_vector@@Base+0x16e>
  40789b:	add    ecx,0x1
  40789e:	lea    rsi,[rbx+0x68]
  4078a2:	mov    rdi,QWORD PTR [rbx+0x40]
  4078a6:	mov    edx,DWORD PTR [rbx+0x28]
  4078a9:	add    rdx,rcx
  4078ac:	mov    ecx,0x1
  4078b1:	mov    r8d,0x1
  4078b7:	call   QWORD PTR [rbx+0x50]
  4078ba:	test   eax,eax
  4078bc:	jne    4077a0 <flatcc_builder_create_union_vector@@Base+0x20>
  4078c2:	mov    eax,DWORD PTR [rbx+0x28]
  4078c5:	mov    rsi,rax
  4078c8:	add    rsi,QWORD PTR [rbx+0x68]
  4078cc:	mov    QWORD PTR [rbx+0x18],rsi
  4078d0:	mov    ecx,DWORD PTR [rbx+0x70]
  4078d3:	sub    ecx,eax
  4078d5:	cmp    ecx,0xfffffffc
  4078d8:	mov    eax,0xfffffffc
  4078dd:	cmovb  eax,ecx
  4078e0:	mov    DWORD PTR [rbx+0x24],eax
  4078e3:	mov    rax,QWORD PTR [rbx+0x30]
  4078e7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4078ee:	mov    r12,rsi
  4078f1:	add    r12,r13
  4078f4:	je     4077a0 <flatcc_builder_create_union_vector@@Base+0x20>
  4078fa:	test   r14,r14
  4078fd:	je     4079b9 <flatcc_builder_create_union_vector@@Base+0x239>
  407903:	lea    rcx,[r14-0x1]
  407907:	mov    r8d,r14d
  40790a:	and    r8d,0x3
  40790e:	cmp    rcx,0x3
  407912:	jae    407920 <flatcc_builder_create_union_vector@@Base+0x1a0>
  407914:	xor    ecx,ecx
  407916:	test   r8,r8
  407919:	jne    407987 <flatcc_builder_create_union_vector@@Base+0x207>
  40791b:	jmp    4079b9 <flatcc_builder_create_union_vector@@Base+0x239>
  407920:	mov    rdx,r14
  407923:	sub    rdx,r8
  407926:	lea    rdi,[rsi+r13*1]
  40792a:	add    rdi,0x3
  40792e:	xor    ecx,ecx
  407930:	movzx  eax,BYTE PTR [r15+rcx*8]
  407935:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407939:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  40793e:	mov    DWORD PTR [rsi+rcx*4],eax
  407941:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407947:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  40794b:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407950:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407954:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  40795a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  40795e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407963:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407967:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  40796d:	mov    BYTE PTR [rdi+rcx*1],al
  407970:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407975:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407979:	add    rcx,0x4
  40797d:	cmp    rdx,rcx
  407980:	jne    407930 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407982:	test   r8,r8
  407985:	je     4079b9 <flatcc_builder_create_union_vector@@Base+0x239>
  407987:	lea    rdx,[rsi+rcx*4]
  40798b:	lea    rdi,[r15+rcx*8]
  40798f:	add    rdi,0x4
  407993:	add    r13,rcx
  407996:	add    r13,rsi
  407999:	xor    ecx,ecx
  40799b:	nop    DWORD PTR [rax+rax*1+0x0]
  4079a0:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  4079a5:	mov    BYTE PTR [r13+rcx*1+0x0],al
  4079aa:	mov    eax,DWORD PTR [rdi+rcx*8]
  4079ad:	mov    DWORD PTR [rdx+rcx*4],eax
  4079b0:	add    rcx,0x1
  4079b4:	cmp    r8,rcx
  4079b7:	jne    4079a0 <flatcc_builder_create_union_vector@@Base+0x220>
  4079b9:	mov    rdi,rbx
  4079bc:	mov    rdx,r14
  4079bf:	mov    rcx,r12
  4079c2:	call   406fd0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4079c7:	mov    r15d,eax
  4079ca:	test   eax,eax
  4079cc:	je     4079f2 <flatcc_builder_create_union_vector@@Base+0x272>
  4079ce:	mov    ecx,0x1
  4079d3:	mov    r8d,0x1
  4079d9:	mov    r9d,0xffffffff
  4079df:	mov    rdi,rbx
  4079e2:	mov    rsi,r12
  4079e5:	mov    rdx,r14
  4079e8:	call   406d50 <flatcc_builder_create_vector@@Base>
  4079ed:	mov    r14d,eax
  4079f0:	jmp    4079f5 <flatcc_builder_create_union_vector@@Base+0x275>
  4079f2:	xor    r14d,r14d
  4079f5:	shl    r15,0x20
  4079f9:	mov    rdi,QWORD PTR [rbx+0x18]
  4079fd:	mov    edx,DWORD PTR [rbx+0x20]
  407a00:	xor    esi,esi
  407a02:	call   403070 <memset@plt>
  407a07:	mov    rax,QWORD PTR [rbx+0x30]
  407a0b:	mov    ecx,DWORD PTR [rax+0x8]
  407a0e:	mov    DWORD PTR [rbx+0x20],ecx
  407a11:	mov    ecx,DWORD PTR [rax]
  407a13:	mov    DWORD PTR [rbx+0x28],ecx
  407a16:	mov    edx,DWORD PTR [rax+0x4]
  407a19:	mov    rsi,rcx
  407a1c:	add    rsi,QWORD PTR [rbx+0x68]
  407a20:	mov    QWORD PTR [rbx+0x18],rsi
  407a24:	mov    esi,DWORD PTR [rbx+0x70]
  407a27:	sub    esi,ecx
  407a29:	cmp    esi,edx
  407a2b:	cmova  esi,edx
  407a2e:	mov    DWORD PTR [rbx+0x24],esi
  407a31:	movzx  ecx,WORD PTR [rbx+0xea]
  407a38:	cmp    WORD PTR [rbx+0xe8],cx
  407a3f:	jae    407a48 <flatcc_builder_create_union_vector@@Base+0x2c8>
  407a41:	mov    WORD PTR [rbx+0xe8],cx
  407a48:	or     r14,r15
  407a4b:	movzx  ecx,WORD PTR [rax+0xc]
  407a4f:	mov    WORD PTR [rbx+0xea],cx
  407a56:	add    rax,0xffffffffffffffdc
  407a5a:	mov    QWORD PTR [rbx+0x30],rax
  407a5e:	add    DWORD PTR [rbx+0x104],0xffffffff
  407a65:	jmp    4077a3 <flatcc_builder_create_union_vector@@Base+0x23>
  407a6a:	lea    rdi,[rip+0x3d3a]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  407a71:	lea    rsi,[rip+0x2c6a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407a78:	lea    rcx,[rip+0x3d47]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  407a7f:	mov    edx,0x37c
  407a84:	call   403060 <__assert_fail@plt>
  407a89:	nop    DWORD PTR [rax+0x0]

0000000000407a90 <flatcc_builder_create_union_vector_direct@@Base>:
  407a90:	push   r15
  407a92:	push   r14
  407a94:	push   r12
  407a96:	push   rbx
  407a97:	push   rax
  407a98:	mov    r14,rcx
  407a9b:	mov    r15,rsi
  407a9e:	mov    r12,rdi
  407aa1:	mov    rsi,rdx
  407aa4:	mov    rdx,rcx
  407aa7:	mov    rcx,r15
  407aaa:	call   406fd0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407aaf:	mov    ebx,eax
  407ab1:	test   eax,eax
  407ab3:	je     407ad8 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  407ab5:	mov    ecx,0x1
  407aba:	mov    r8d,0x1
  407ac0:	mov    r9d,0xffffffff
  407ac6:	mov    rdi,r12
  407ac9:	mov    rsi,r15
  407acc:	mov    rdx,r14
  407acf:	call   406d50 <flatcc_builder_create_vector@@Base>
  407ad4:	mov    eax,eax
  407ad6:	jmp    407ada <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  407ad8:	xor    eax,eax
  407ada:	shl    rbx,0x20
  407ade:	or     rbx,rax
  407ae1:	mov    rax,rbx
  407ae4:	add    rsp,0x8
  407ae8:	pop    rbx
  407ae9:	pop    r12
  407aeb:	pop    r14
  407aed:	pop    r15
  407aef:	ret    

0000000000407af0 <flatcc_builder_start_union_vector@@Base>:
  407af0:	push   rbx
  407af1:	mov    rbx,rdi
  407af4:	mov    esi,0x4
  407af9:	call   404fc0 <flatcc_builder_start_buffer@@Base+0xe0>
  407afe:	mov    ecx,eax
  407b00:	mov    eax,0xffffffff
  407b05:	test   ecx,ecx
  407b07:	je     407b0b <flatcc_builder_start_union_vector@@Base+0x1b>
  407b09:	pop    rbx
  407b0a:	ret    
  407b0b:	mov    rax,QWORD PTR [rbx+0x30]
  407b0f:	mov    DWORD PTR [rax+0x10],0x8
  407b16:	mov    rax,QWORD PTR [rbx+0x30]
  407b1a:	mov    DWORD PTR [rax+0x14],0x0
  407b21:	mov    rax,QWORD PTR [rbx+0x30]
  407b25:	mov    WORD PTR [rax+0xe],0x7
  407b2b:	mov    ecx,DWORD PTR [rbx+0x28]
  407b2e:	mov    edx,DWORD PTR [rbx+0x70]
  407b31:	sub    edx,ecx
  407b33:	add    rcx,QWORD PTR [rbx+0x68]
  407b37:	mov    QWORD PTR [rbx+0x18],rcx
  407b3b:	cmp    edx,0xfffffffc
  407b3e:	mov    ecx,0xfffffffc
  407b43:	cmovb  ecx,edx
  407b46:	mov    DWORD PTR [rbx+0x24],ecx
  407b49:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407b50:	xor    eax,eax
  407b52:	pop    rbx
  407b53:	ret    
  407b54:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b5e:	xchg   ax,ax

0000000000407b60 <flatcc_builder_end_union_vector@@Base>:
  407b60:	push   rbp
  407b61:	push   r15
  407b63:	push   r14
  407b65:	push   r13
  407b67:	push   r12
  407b69:	push   rbx
  407b6a:	push   rax
  407b6b:	mov    rax,QWORD PTR [rdi+0x30]
  407b6f:	movzx  ecx,WORD PTR [rax+0xe]
  407b73:	cmp    ecx,0x7
  407b76:	jne    407f76 <flatcc_builder_end_union_vector@@Base+0x416>
  407b7c:	mov    r13,rdi
  407b7f:	mov    r14d,DWORD PTR [rax+0x14]
  407b83:	lea    eax,[r14+r14*4]
  407b87:	mov    r12d,DWORD PTR [rdi+0x20]
  407b8b:	add    eax,r12d
  407b8e:	mov    DWORD PTR [rdi+0x20],eax
  407b91:	cmp    eax,DWORD PTR [rdi+0x24]
  407b94:	jae    407b9c <flatcc_builder_end_union_vector@@Base+0x3c>
  407b96:	mov    r8,QWORD PTR [r13+0x18]
  407b9a:	jmp    407bf4 <flatcc_builder_end_union_vector@@Base+0x94>
  407b9c:	add    eax,0x1
  407b9f:	lea    rsi,[r13+0x68]
  407ba3:	mov    rdi,QWORD PTR [r13+0x40]
  407ba7:	mov    edx,DWORD PTR [r13+0x28]
  407bab:	add    rdx,rax
  407bae:	mov    ecx,0x1
  407bb3:	mov    r8d,0x1
  407bb9:	call   QWORD PTR [r13+0x50]
  407bbd:	test   eax,eax
  407bbf:	jne    407d36 <flatcc_builder_end_union_vector@@Base+0x1d6>
  407bc5:	mov    eax,DWORD PTR [r13+0x28]
  407bc9:	mov    r8,rax
  407bcc:	add    r8,QWORD PTR [r13+0x68]
  407bd0:	mov    QWORD PTR [r13+0x18],r8
  407bd4:	mov    ecx,DWORD PTR [r13+0x70]
  407bd8:	sub    ecx,eax
  407bda:	cmp    ecx,0xfffffffc
  407bdd:	mov    eax,0xfffffffc
  407be2:	cmovb  eax,ecx
  407be5:	mov    DWORD PTR [r13+0x24],eax
  407be9:	mov    rax,QWORD PTR [r13+0x30]
  407bed:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407bf4:	mov    rsi,r8
  407bf7:	add    rsi,r12
  407bfa:	je     407d36 <flatcc_builder_end_union_vector@@Base+0x1d6>
  407c00:	lea    r15,[rsi+r14*4]
  407c04:	test   r14d,r14d
  407c07:	je     407cfa <flatcc_builder_end_union_vector@@Base+0x19a>
  407c0d:	cmp    r14d,0x9
  407c11:	jae    407dca <flatcc_builder_end_union_vector@@Base+0x26a>
  407c17:	xor    r9d,r9d
  407c1a:	mov    r11d,r14d
  407c1d:	sub    r11d,r9d
  407c20:	mov    r10,r9
  407c23:	not    r10
  407c26:	add    r10,r14
  407c29:	and    r11,0x3
  407c2d:	je     407c72 <flatcc_builder_end_union_vector@@Base+0x112>
  407c2f:	mov    rdx,r9
  407c32:	neg    rdx
  407c35:	lea    rbp,[r12+r9*4]
  407c39:	add    rbp,r8
  407c3c:	lea    rbx,[r8+r9*8]
  407c40:	add    rbx,0x4
  407c44:	lea    rax,[r9+r14*4]
  407c48:	add    rax,r12
  407c4b:	add    rax,r8
  407c4e:	xor    edi,edi
  407c50:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  407c55:	mov    BYTE PTR [rax+rdi*1],cl
  407c58:	mov    ecx,DWORD PTR [rbx+rdi*8]
  407c5b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  407c5f:	add    rdx,0xffffffffffffffff
  407c63:	add    rdi,0x1
  407c67:	cmp    r11,rdi
  407c6a:	jne    407c50 <flatcc_builder_end_union_vector@@Base+0xf0>
  407c6c:	neg    rdx
  407c6f:	mov    r9,rdx
  407c72:	cmp    r10,0x3
  407c76:	jb     407cfa <flatcc_builder_end_union_vector@@Base+0x19a>
  407c7c:	mov    rbp,r14
  407c7f:	sub    rbp,r9
  407c82:	lea    rcx,[r12+r9*4]
  407c86:	lea    rdx,[r8+rcx*1]
  407c8a:	add    rdx,0xc
  407c8e:	lea    rdi,[r8+r9*8]
  407c92:	add    rdi,0x1c
  407c96:	lea    rcx,[r9+r14*4]
  407c9a:	add    rcx,r12
  407c9d:	add    rcx,r8
  407ca0:	add    rcx,0x3
  407ca4:	xor    ebx,ebx
  407ca6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407cb0:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  407cb5:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  407cb9:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  407cbd:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  407cc1:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  407cc6:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  407cca:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  407cce:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  407cd2:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  407cd7:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  407cdb:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  407cdf:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  407ce3:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  407ce8:	mov    BYTE PTR [rcx+rbx*1],al
  407ceb:	mov    eax,DWORD PTR [rdi+rbx*8]
  407cee:	mov    DWORD PTR [rdx+rbx*4],eax
  407cf1:	add    rbx,0x4
  407cf5:	cmp    rbp,rbx
  407cf8:	jne    407cb0 <flatcc_builder_end_union_vector@@Base+0x150>
  407cfa:	mov    rdi,r13
  407cfd:	mov    rdx,r14
  407d00:	mov    rcx,r15
  407d03:	vzeroupper 
  407d06:	call   406fd0 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407d0b:	mov    r12d,eax
  407d0e:	test   eax,eax
  407d10:	je     407d3b <flatcc_builder_end_union_vector@@Base+0x1db>
  407d12:	mov    ecx,0x1
  407d17:	mov    r8d,0x1
  407d1d:	mov    r9d,0xffffffff
  407d23:	mov    rdi,r13
  407d26:	mov    rsi,r15
  407d29:	mov    rdx,r14
  407d2c:	call   406d50 <flatcc_builder_create_vector@@Base>
  407d31:	mov    r14d,eax
  407d34:	jmp    407d3e <flatcc_builder_end_union_vector@@Base+0x1de>
  407d36:	xor    r14d,r14d
  407d39:	jmp    407db8 <flatcc_builder_end_union_vector@@Base+0x258>
  407d3b:	xor    r14d,r14d
  407d3e:	shl    r12,0x20
  407d42:	mov    rdi,QWORD PTR [r13+0x18]
  407d46:	mov    edx,DWORD PTR [r13+0x20]
  407d4a:	xor    esi,esi
  407d4c:	call   403070 <memset@plt>
  407d51:	mov    rax,QWORD PTR [r13+0x30]
  407d55:	mov    ecx,DWORD PTR [rax+0x8]
  407d58:	mov    DWORD PTR [r13+0x20],ecx
  407d5c:	mov    ecx,DWORD PTR [rax]
  407d5e:	mov    DWORD PTR [r13+0x28],ecx
  407d62:	mov    edx,DWORD PTR [rax+0x4]
  407d65:	mov    rsi,rcx
  407d68:	add    rsi,QWORD PTR [r13+0x68]
  407d6c:	mov    QWORD PTR [r13+0x18],rsi
  407d70:	mov    esi,DWORD PTR [r13+0x70]
  407d74:	sub    esi,ecx
  407d76:	cmp    esi,edx
  407d78:	cmova  esi,edx
  407d7b:	mov    DWORD PTR [r13+0x24],esi
  407d7f:	movzx  ecx,WORD PTR [r13+0xea]
  407d87:	cmp    WORD PTR [r13+0xe8],cx
  407d8f:	jae    407d99 <flatcc_builder_end_union_vector@@Base+0x239>
  407d91:	mov    WORD PTR [r13+0xe8],cx
  407d99:	or     r14,r12
  407d9c:	movzx  ecx,WORD PTR [rax+0xc]
  407da0:	mov    WORD PTR [r13+0xea],cx
  407da8:	add    rax,0xffffffffffffffdc
  407dac:	mov    QWORD PTR [r13+0x30],rax
  407db0:	add    DWORD PTR [r13+0x104],0xffffffff
  407db8:	mov    rax,r14
  407dbb:	add    rsp,0x8
  407dbf:	pop    rbx
  407dc0:	pop    r12
  407dc2:	pop    r13
  407dc4:	pop    r14
  407dc6:	pop    r15
  407dc8:	pop    rbp
  407dc9:	ret    
  407dca:	lea    rax,[r14-0x1]
  407dce:	mov    ecx,0x8
  407dd3:	mul    rcx
  407dd6:	seto   cl
  407dd9:	lea    rdi,[r8+0x4]
  407ddd:	mov    rdx,rax
  407de0:	add    rdx,rdi
  407de3:	setb   dl
  407de6:	xor    r9d,r9d
  407de9:	add    rax,r8
  407dec:	jb     407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407df2:	test   cl,cl
  407df4:	jne    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407dfa:	test   dl,dl
  407dfc:	jne    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407e02:	test   cl,cl
  407e04:	jne    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407e0a:	lea    rcx,[r14+r14*4]
  407e0e:	add    rcx,r12
  407e11:	add    rcx,r8
  407e14:	lea    rdx,[r8+r14*8]
  407e18:	add    rdx,0xfffffffffffffff9
  407e1c:	cmp    rdx,r15
  407e1f:	seta   r11b
  407e23:	lea    rbx,[r8+r14*8]
  407e27:	cmp    r8,rcx
  407e2a:	setb   r10b
  407e2e:	cmp    rbx,r15
  407e31:	seta   al
  407e34:	cmp    rdi,rcx
  407e37:	setb   bpl
  407e3b:	cmp    rsi,rdx
  407e3e:	setb   cl
  407e41:	cmp    r8,r15
  407e44:	setb   BYTE PTR [rsp+0x7]
  407e49:	cmp    rsi,rbx
  407e4c:	setb   dl
  407e4f:	cmp    rdi,r15
  407e52:	setb   dil
  407e56:	xor    r9d,r9d
  407e59:	test   r11b,r10b
  407e5c:	jne    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407e62:	and    al,bpl
  407e65:	jne    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407e6b:	and    cl,BYTE PTR [rsp+0x7]
  407e6f:	jne    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407e75:	and    dl,dil
  407e78:	jne    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407e7e:	mov    eax,r14d
  407e81:	and    eax,0x7
  407e84:	test   rax,rax
  407e87:	mov    ecx,0x8
  407e8c:	cmovne rcx,rax
  407e90:	mov    r9,r14
  407e93:	sub    r9,rcx
  407e96:	vmovdqa ymm0,YMMWORD PTR [rip+0x27c2]        # 40a660 <flatcc_builder_padding_base@@Base+0x210>
  407e9e:	vmovdqa ymm1,YMMWORD PTR [rip+0x27da]        # 40a680 <flatcc_builder_padding_base@@Base+0x230>
  407ea6:	xor    eax,eax
  407ea8:	vmovdqa xmm8,XMMWORD PTR [rip+0x27f0]        # 40a6a0 <flatcc_builder_padding_base@@Base+0x250>
  407eb0:	vmovdqa xmm9,XMMWORD PTR [rip+0x27f8]        # 40a6b0 <flatcc_builder_padding_base@@Base+0x260>
  407eb8:	vpbroadcastq ymm4,QWORD PTR [rip+0x27ff]        # 40a6c0 <flatcc_builder_padding_base@@Base+0x270>
  407ec1:	vpbroadcastq ymm5,QWORD PTR [rip+0x27fe]        # 40a6c8 <flatcc_builder_padding_base@@Base+0x278>
  407eca:	mov    rdi,r8
  407ecd:	nop    DWORD PTR [rax]
  407ed0:	vmovdqu ymm6,YMMWORD PTR [rdi]
  407ed4:	vmovdqu ymm7,YMMWORD PTR [rdi+0x20]
  407ed9:	vextracti128 xmm2,ymm7,0x1
  407edf:	vpshufb xmm2,xmm2,xmm8
  407ee4:	vpshufb xmm7,xmm7,xmm8
  407ee9:	vpunpcklwd xmm2,xmm7,xmm2
  407eed:	vextracti128 xmm7,ymm6,0x1
  407ef3:	vpshufb xmm7,xmm7,xmm9
  407ef8:	vpshufb xmm6,xmm6,xmm9
  407efd:	vpunpcklwd xmm6,xmm6,xmm7
  407f01:	vpblendd xmm2,xmm6,xmm2,0x2
  407f07:	vmovq  QWORD PTR [r15+rax*1],xmm2
  407f0d:	vpsllq ymm2,ymm1,0x3
  407f12:	vmovq  xmm6,r8
  407f17:	vpbroadcastq ymm6,xmm6
  407f1c:	vpaddq ymm2,ymm6,ymm2
  407f20:	vpaddq ymm2,ymm2,ymm4
  407f24:	vpsllq ymm7,ymm0,0x3
  407f29:	vpaddq ymm6,ymm6,ymm7
  407f2d:	vpaddq ymm6,ymm6,ymm4
  407f31:	vpcmpeqd xmm7,xmm7,xmm7
  407f35:	vpgatherqd xmm3,DWORD PTR [ymm6*1+0x0],xmm7
  407f3f:	vpcmpeqd xmm6,xmm6,xmm6
  407f43:	vpgatherqd xmm7,DWORD PTR [ymm2*1+0x0],xmm6
  407f4d:	vinserti128 ymm2,ymm7,xmm3,0x1
  407f53:	vmovdqu YMMWORD PTR [rsi+rax*4],ymm2
  407f58:	add    rax,0x8
  407f5c:	vpaddq ymm1,ymm1,ymm5
  407f60:	vpaddq ymm0,ymm0,ymm5
  407f64:	add    rdi,0x40
  407f68:	cmp    r9,rax
  407f6b:	jne    407ed0 <flatcc_builder_end_union_vector@@Base+0x370>
  407f71:	jmp    407c1a <flatcc_builder_end_union_vector@@Base+0xba>
  407f76:	lea    rdi,[rip+0x33a1]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  407f7d:	lea    rsi,[rip+0x275e]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  407f84:	lea    rcx,[rip+0x33c5]        # 40b350 <flatcc_builder_padding_base@@Base+0xf00>
  407f8b:	mov    edx,0x651
  407f90:	call   403060 <__assert_fail@plt>
  407f95:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407f9f:	nop

0000000000407fa0 <flatcc_builder_union_vector_count@@Base>:
  407fa0:	mov    rax,QWORD PTR [rdi+0x30]
  407fa4:	mov    eax,DWORD PTR [rax+0x14]
  407fa7:	ret    
  407fa8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407fb0 <flatcc_builder_union_vector_edit@@Base>:
  407fb0:	mov    rax,QWORD PTR [rdi+0x18]
  407fb4:	ret    
  407fb5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407fbf:	nop

0000000000407fc0 <flatcc_builder_extend_union_vector@@Base>:
  407fc0:	push   r14
  407fc2:	push   rbx
  407fc3:	push   rax
  407fc4:	mov    rax,QWORD PTR [rdi+0x30]
  407fc8:	mov    ecx,DWORD PTR [rax+0x14]
  407fcb:	add    ecx,esi
  407fcd:	jb     408055 <flatcc_builder_extend_union_vector@@Base+0x95>
  407fd3:	cmp    ecx,0x20000000
  407fd9:	jae    408055 <flatcc_builder_extend_union_vector@@Base+0x95>
  407fdb:	mov    rbx,rdi
  407fde:	mov    DWORD PTR [rax+0x14],ecx
  407fe1:	mov    r14d,DWORD PTR [rdi+0x20]
  407fe5:	lea    eax,[r14+rsi*8]
  407fe9:	mov    DWORD PTR [rdi+0x20],eax
  407fec:	cmp    eax,DWORD PTR [rdi+0x24]
  407fef:	jae    407ff7 <flatcc_builder_extend_union_vector@@Base+0x37>
  407ff1:	mov    rax,QWORD PTR [rbx+0x18]
  407ff5:	jmp    40804a <flatcc_builder_extend_union_vector@@Base+0x8a>
  407ff7:	add    eax,0x1
  407ffa:	lea    rsi,[rbx+0x68]
  407ffe:	mov    rdi,QWORD PTR [rbx+0x40]
  408002:	mov    edx,DWORD PTR [rbx+0x28]
  408005:	add    rdx,rax
  408008:	mov    ecx,0x1
  40800d:	mov    r8d,0x1
  408013:	call   QWORD PTR [rbx+0x50]
  408016:	test   eax,eax
  408018:	je     40801e <flatcc_builder_extend_union_vector@@Base+0x5e>
  40801a:	xor    eax,eax
  40801c:	jmp    40804d <flatcc_builder_extend_union_vector@@Base+0x8d>
  40801e:	mov    ecx,DWORD PTR [rbx+0x28]
  408021:	mov    rax,rcx
  408024:	add    rax,QWORD PTR [rbx+0x68]
  408028:	mov    QWORD PTR [rbx+0x18],rax
  40802c:	mov    edx,DWORD PTR [rbx+0x70]
  40802f:	sub    edx,ecx
  408031:	cmp    edx,0xfffffffc
  408034:	mov    ecx,0xfffffffc
  408039:	cmovb  ecx,edx
  40803c:	mov    DWORD PTR [rbx+0x24],ecx
  40803f:	mov    rcx,QWORD PTR [rbx+0x30]
  408043:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40804a:	add    rax,r14
  40804d:	add    rsp,0x8
  408051:	pop    rbx
  408052:	pop    r14
  408054:	ret    
  408055:	lea    rdi,[rip+0x374f]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  40805c:	lea    rsi,[rip+0x267f]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408063:	lea    rcx,[rip+0x375c]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  40806a:	mov    edx,0x37c
  40806f:	call   403060 <__assert_fail@plt>
  408074:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40807e:	xchg   ax,ax

0000000000408080 <flatcc_builder_truncate_union_vector@@Base>:
  408080:	push   rax
  408081:	mov    rcx,QWORD PTR [rdi+0x30]
  408085:	movzx  edx,WORD PTR [rcx+0xe]
  408089:	cmp    edx,0x7
  40808c:	jne    4080c0 <flatcc_builder_truncate_union_vector@@Base+0x40>
  40808e:	mov    rax,rsi
  408091:	mov    edx,DWORD PTR [rcx+0x14]
  408094:	sub    edx,eax
  408096:	jb     4080df <flatcc_builder_truncate_union_vector@@Base+0x5f>
  408098:	mov    DWORD PTR [rcx+0x14],edx
  40809b:	mov    rcx,QWORD PTR [rdi+0x30]
  40809f:	imul   eax,DWORD PTR [rcx+0x10]
  4080a3:	mov    ecx,DWORD PTR [rdi+0x20]
  4080a6:	sub    ecx,eax
  4080a8:	mov    DWORD PTR [rdi+0x20],ecx
  4080ab:	add    rcx,QWORD PTR [rdi+0x18]
  4080af:	xor    esi,esi
  4080b1:	mov    rdi,rcx
  4080b4:	mov    rdx,rax
  4080b7:	call   403070 <memset@plt>
  4080bc:	xor    eax,eax
  4080be:	pop    rcx
  4080bf:	ret    
  4080c0:	lea    rdi,[rip+0x3257]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  4080c7:	lea    rsi,[rip+0x2614]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4080ce:	lea    rcx,[rip+0x32ce]        # 40b3a3 <flatcc_builder_padding_base@@Base+0xf53>
  4080d5:	mov    edx,0x681
  4080da:	call   403060 <__assert_fail@plt>
  4080df:	lea    rdi,[rip+0x2c9c]        # 40ad82 <flatcc_builder_padding_base@@Base+0x932>
  4080e6:	lea    rsi,[rip+0x25f5]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4080ed:	lea    rcx,[rip+0x32af]        # 40b3a3 <flatcc_builder_padding_base@@Base+0xf53>
  4080f4:	mov    edx,0x682
  4080f9:	call   403060 <__assert_fail@plt>
  4080fe:	xchg   ax,ax

0000000000408100 <flatcc_builder_union_vector_push@@Base>:
  408100:	push   r15
  408102:	push   r14
  408104:	push   rbx
  408105:	mov    rax,QWORD PTR [rdi+0x30]
  408109:	movzx  ecx,WORD PTR [rax+0xe]
  40810d:	cmp    ecx,0x7
  408110:	jne    4081aa <flatcc_builder_union_vector_push@@Base+0xaa>
  408116:	mov    ecx,DWORD PTR [rax+0x14]
  408119:	cmp    ecx,0x1fffffff
  40811f:	je     40816c <flatcc_builder_union_vector_push@@Base+0x6c>
  408121:	mov    r14,rsi
  408124:	mov    rbx,rdi
  408127:	add    ecx,0x1
  40812a:	mov    DWORD PTR [rax+0x14],ecx
  40812d:	mov    r15d,DWORD PTR [rdi+0x20]
  408131:	lea    eax,[r15+0x8]
  408135:	mov    DWORD PTR [rdi+0x20],eax
  408138:	cmp    eax,DWORD PTR [rdi+0x24]
  40813b:	jae    408148 <flatcc_builder_union_vector_push@@Base+0x48>
  40813d:	mov    rax,QWORD PTR [rbx+0x18]
  408141:	add    rax,r15
  408144:	jne    4081a1 <flatcc_builder_union_vector_push@@Base+0xa1>
  408146:	jmp    40816c <flatcc_builder_union_vector_push@@Base+0x6c>
  408148:	lea    eax,[r15+0x9]
  40814c:	lea    rsi,[rbx+0x68]
  408150:	mov    rdi,QWORD PTR [rbx+0x40]
  408154:	mov    edx,DWORD PTR [rbx+0x28]
  408157:	add    rdx,rax
  40815a:	mov    ecx,0x1
  40815f:	mov    r8d,0x1
  408165:	call   QWORD PTR [rbx+0x50]
  408168:	test   eax,eax
  40816a:	je     408170 <flatcc_builder_union_vector_push@@Base+0x70>
  40816c:	xor    eax,eax
  40816e:	jmp    4081a4 <flatcc_builder_union_vector_push@@Base+0xa4>
  408170:	mov    ecx,DWORD PTR [rbx+0x28]
  408173:	mov    rax,rcx
  408176:	add    rax,QWORD PTR [rbx+0x68]
  40817a:	mov    QWORD PTR [rbx+0x18],rax
  40817e:	mov    edx,DWORD PTR [rbx+0x70]
  408181:	sub    edx,ecx
  408183:	cmp    edx,0xfffffffc
  408186:	mov    ecx,0xfffffffc
  40818b:	cmovb  ecx,edx
  40818e:	mov    DWORD PTR [rbx+0x24],ecx
  408191:	mov    rcx,QWORD PTR [rbx+0x30]
  408195:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40819c:	add    rax,r15
  40819f:	je     40816c <flatcc_builder_union_vector_push@@Base+0x6c>
  4081a1:	mov    QWORD PTR [rax],r14
  4081a4:	pop    rbx
  4081a5:	pop    r14
  4081a7:	pop    r15
  4081a9:	ret    
  4081aa:	lea    rdi,[rip+0x316d]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  4081b1:	lea    rsi,[rip+0x252a]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4081b8:	lea    rcx,[rip+0x3229]        # 40b3e8 <flatcc_builder_padding_base@@Base+0xf98>
  4081bf:	mov    edx,0x68d
  4081c4:	call   403060 <__assert_fail@plt>
  4081c9:	nop    DWORD PTR [rax+0x0]

00000000004081d0 <flatcc_builder_append_union_vector@@Base>:
  4081d0:	push   r15
  4081d2:	push   r14
  4081d4:	push   r13
  4081d6:	push   r12
  4081d8:	push   rbx
  4081d9:	mov    rax,QWORD PTR [rdi+0x30]
  4081dd:	movzx  ecx,WORD PTR [rax+0xe]
  4081e1:	cmp    ecx,0x7
  4081e4:	jne    4082c1 <flatcc_builder_append_union_vector@@Base+0xf1>
  4081ea:	mov    r15,rdx
  4081ed:	mov    ecx,DWORD PTR [rax+0x14]
  4081f0:	add    ecx,r15d
  4081f3:	jb     4082a2 <flatcc_builder_append_union_vector@@Base+0xd2>
  4081f9:	cmp    ecx,0x20000000
  4081ff:	jae    4082a2 <flatcc_builder_append_union_vector@@Base+0xd2>
  408205:	mov    r14,rsi
  408208:	mov    rbx,rdi
  40820b:	mov    DWORD PTR [rax+0x14],ecx
  40820e:	mov    r13d,DWORD PTR [rdi+0x20]
  408212:	lea    eax,[r13+r15*8+0x0]
  408217:	mov    DWORD PTR [rdi+0x20],eax
  40821a:	cmp    eax,DWORD PTR [rdi+0x24]
  40821d:	jae    40822a <flatcc_builder_append_union_vector@@Base+0x5a>
  40821f:	mov    r12,QWORD PTR [rbx+0x18]
  408223:	add    r12,r13
  408226:	jne    408283 <flatcc_builder_append_union_vector@@Base+0xb3>
  408228:	jmp    40824d <flatcc_builder_append_union_vector@@Base+0x7d>
  40822a:	add    eax,0x1
  40822d:	lea    rsi,[rbx+0x68]
  408231:	mov    rdi,QWORD PTR [rbx+0x40]
  408235:	mov    edx,DWORD PTR [rbx+0x28]
  408238:	add    rdx,rax
  40823b:	mov    ecx,0x1
  408240:	mov    r8d,0x1
  408246:	call   QWORD PTR [rbx+0x50]
  408249:	test   eax,eax
  40824b:	je     408252 <flatcc_builder_append_union_vector@@Base+0x82>
  40824d:	xor    r12d,r12d
  408250:	jmp    408295 <flatcc_builder_append_union_vector@@Base+0xc5>
  408252:	mov    eax,DWORD PTR [rbx+0x28]
  408255:	mov    r12,rax
  408258:	add    r12,QWORD PTR [rbx+0x68]
  40825c:	mov    QWORD PTR [rbx+0x18],r12
  408260:	mov    ecx,DWORD PTR [rbx+0x70]
  408263:	sub    ecx,eax
  408265:	cmp    ecx,0xfffffffc
  408268:	mov    eax,0xfffffffc
  40826d:	cmovb  eax,ecx
  408270:	mov    DWORD PTR [rbx+0x24],eax
  408273:	mov    rax,QWORD PTR [rbx+0x30]
  408277:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40827e:	add    r12,r13
  408281:	je     40824d <flatcc_builder_append_union_vector@@Base+0x7d>
  408283:	shl    r15d,0x3
  408287:	mov    edx,r15d
  40828a:	mov    rdi,r12
  40828d:	mov    rsi,r14
  408290:	call   4030b0 <memcpy@plt>
  408295:	mov    rax,r12
  408298:	pop    rbx
  408299:	pop    r12
  40829b:	pop    r13
  40829d:	pop    r14
  40829f:	pop    r15
  4082a1:	ret    
  4082a2:	lea    rdi,[rip+0x3502]        # 40b7ab <flatcc_builder_padding_base@@Base+0x135b>
  4082a9:	lea    rsi,[rip+0x2432]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4082b0:	lea    rcx,[rip+0x350f]        # 40b7c6 <flatcc_builder_padding_base@@Base+0x1376>
  4082b7:	mov    edx,0x37c
  4082bc:	call   403060 <__assert_fail@plt>
  4082c1:	lea    rdi,[rip+0x3056]        # 40b31e <flatcc_builder_padding_base@@Base+0xece>
  4082c8:	lea    rsi,[rip+0x2413]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4082cf:	lea    rcx,[rip+0x317f]        # 40b455 <flatcc_builder_padding_base@@Base+0x1005>
  4082d6:	mov    edx,0x69c
  4082db:	call   403060 <__assert_fail@plt>

00000000004082e0 <flatcc_builder_create_string@@Base>:
  4082e0:	push   rbp
  4082e1:	push   rbx
  4082e2:	sub    rsp,0x98
  4082e9:	xor    ebp,ebp
  4082eb:	mov    rax,rdx
  4082ee:	shr    rax,0x20
  4082f2:	jne    4083c8 <flatcc_builder_create_string@@Base+0xe8>
  4082f8:	mov    rbx,rdi
  4082fb:	mov    DWORD PTR [rsp+0x4],edx
  4082ff:	mov    ebp,DWORD PTR [rdi+0xf0]
  408305:	mov    eax,edx
  408307:	not    eax
  408309:	add    eax,ebp
  40830b:	and    eax,0x3
  40830e:	add    eax,0x1
  408311:	mov    QWORD PTR [rsp+0x8],0x4
  40831a:	lea    rcx,[rsp+0x4]
  40831f:	mov    QWORD PTR [rsp+0x18],rcx
  408324:	mov    QWORD PTR [rsp+0x20],0x4
  40832d:	mov    DWORD PTR [rsp+0x10],0x1
  408335:	test   rdx,rdx
  408338:	je     40835c <flatcc_builder_create_string@@Base+0x7c>
  40833a:	lea    rcx,[rdx+0x4]
  40833e:	mov    QWORD PTR [rsp+0x8],rcx
  408343:	mov    QWORD PTR [rsp+0x28],rsi
  408348:	mov    QWORD PTR [rsp+0x30],rdx
  40834d:	mov    DWORD PTR [rsp+0x10],0x2
  408355:	mov    edx,0x2
  40835a:	jmp    408366 <flatcc_builder_create_string@@Base+0x86>
  40835c:	mov    edx,0x1
  408361:	mov    ecx,0x4
  408366:	mov    esi,eax
  408368:	lea    r8,[rcx+rsi*1]
  40836c:	mov    QWORD PTR [rsp+0x8],r8
  408371:	mov    eax,edx
  408373:	shl    rax,0x4
  408377:	lea    rdi,[rip+0x20d2]        # 40a450 <flatcc_builder_padding_base@@Base>
  40837e:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  408383:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  408388:	add    edx,0x1
  40838b:	mov    DWORD PTR [rsp+0x10],edx
  40838f:	cmp    r8,0x11
  408393:	setb   al
  408396:	add    rcx,rsi
  408399:	add    rcx,0xfffffffffffffff0
  40839d:	shr    rcx,0x20
  4083a1:	sete   cl
  4083a4:	test   r8d,r8d
  4083a7:	jle    4083d4 <flatcc_builder_create_string@@Base+0xf4>
  4083a9:	or     al,cl
  4083ab:	je     4083d4 <flatcc_builder_create_string@@Base+0xf4>
  4083ad:	sub    ebp,r8d
  4083b0:	mov    rdi,QWORD PTR [rbx+0x38]
  4083b4:	lea    rsi,[rsp+0x18]
  4083b9:	mov    ecx,ebp
  4083bb:	call   QWORD PTR [rbx+0x48]
  4083be:	test   eax,eax
  4083c0:	jne    4083f3 <flatcc_builder_create_string@@Base+0x113>
  4083c2:	mov    DWORD PTR [rbx+0xf0],ebp
  4083c8:	mov    eax,ebp
  4083ca:	add    rsp,0x98
  4083d1:	pop    rbx
  4083d2:	pop    rbp
  4083d3:	ret    
  4083d4:	lea    rdi,[rip+0x34c7]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4083db:	lea    rsi,[rip+0x2300]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4083e2:	lea    rcx,[rip+0x3378]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  4083e9:	mov    edx,0x287
  4083ee:	call   403060 <__assert_fail@plt>
  4083f3:	lea    rdi,[rip+0x34a8]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  4083fa:	lea    rsi,[rip+0x22e1]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408401:	lea    rcx,[rip+0x3359]        # 40b761 <flatcc_builder_padding_base@@Base+0x1311>
  408408:	mov    edx,0x28b
  40840d:	call   403060 <__assert_fail@plt>
  408412:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40841c:	nop    DWORD PTR [rax+0x0]

0000000000408420 <flatcc_builder_create_string_str@@Base>:
  408420:	push   r14
  408422:	push   rbx
  408423:	push   rax
  408424:	mov    rbx,rsi
  408427:	mov    r14,rdi
  40842a:	mov    rdi,rsi
  40842d:	call   403050 <strlen@plt>
  408432:	mov    rdi,r14
  408435:	mov    rsi,rbx
  408438:	mov    rdx,rax
  40843b:	add    rsp,0x8
  40843f:	pop    rbx
  408440:	pop    r14
  408442:	jmp    4082e0 <flatcc_builder_create_string@@Base>
  408447:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408450 <flatcc_builder_create_string_strn@@Base>:
  408450:	push   r15
  408452:	push   r14
  408454:	push   rbx
  408455:	mov    rbx,rdx
  408458:	mov    r14,rsi
  40845b:	mov    r15,rdi
  40845e:	xor    esi,esi
  408460:	mov    rdi,r14
  408463:	call   403080 <memchr@plt>
  408468:	mov    rcx,rax
  40846b:	sub    rcx,r14
  40846e:	test   rax,rax
  408471:	cmovne rbx,rcx
  408475:	mov    rdi,r15
  408478:	mov    rsi,r14
  40847b:	mov    rdx,rbx
  40847e:	pop    rbx
  40847f:	pop    r14
  408481:	pop    r15
  408483:	jmp    4082e0 <flatcc_builder_create_string@@Base>
  408488:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408490 <flatcc_builder_end_string@@Base>:
  408490:	push   rbp
  408491:	push   rbx
  408492:	push   rax
  408493:	mov    rax,QWORD PTR [rdi+0x30]
  408497:	movzx  ecx,WORD PTR [rax+0xe]
  40849b:	cmp    ecx,0x6
  40849e:	jne    408537 <flatcc_builder_end_string@@Base+0xa7>
  4084a4:	mov    rbx,rdi
  4084a7:	mov    edx,DWORD PTR [rax+0x14]
  4084aa:	cmp    edx,DWORD PTR [rdi+0x20]
  4084ad:	jne    408556 <flatcc_builder_end_string@@Base+0xc6>
  4084b3:	mov    rsi,QWORD PTR [rbx+0x18]
  4084b7:	mov    rdi,rbx
  4084ba:	call   4082e0 <flatcc_builder_create_string@@Base>
  4084bf:	mov    ebp,eax
  4084c1:	test   eax,eax
  4084c3:	je     40852e <flatcc_builder_end_string@@Base+0x9e>
  4084c5:	mov    rdi,QWORD PTR [rbx+0x18]
  4084c9:	mov    edx,DWORD PTR [rbx+0x20]
  4084cc:	xor    esi,esi
  4084ce:	call   403070 <memset@plt>
  4084d3:	mov    rax,QWORD PTR [rbx+0x30]
  4084d7:	mov    ecx,DWORD PTR [rax+0x8]
  4084da:	mov    DWORD PTR [rbx+0x20],ecx
  4084dd:	mov    ecx,DWORD PTR [rax]
  4084df:	mov    DWORD PTR [rbx+0x28],ecx
  4084e2:	mov    edx,DWORD PTR [rax+0x4]
  4084e5:	mov    rsi,rcx
  4084e8:	add    rsi,QWORD PTR [rbx+0x68]
  4084ec:	mov    QWORD PTR [rbx+0x18],rsi
  4084f0:	mov    esi,DWORD PTR [rbx+0x70]
  4084f3:	sub    esi,ecx
  4084f5:	cmp    esi,edx
  4084f7:	cmova  esi,edx
  4084fa:	mov    DWORD PTR [rbx+0x24],esi
  4084fd:	movzx  ecx,WORD PTR [rbx+0xea]
  408504:	cmp    WORD PTR [rbx+0xe8],cx
  40850b:	jae    408514 <flatcc_builder_end_string@@Base+0x84>
  40850d:	mov    WORD PTR [rbx+0xe8],cx
  408514:	movzx  ecx,WORD PTR [rax+0xc]
  408518:	mov    WORD PTR [rbx+0xea],cx
  40851f:	add    rax,0xffffffffffffffdc
  408523:	mov    QWORD PTR [rbx+0x30],rax
  408527:	add    DWORD PTR [rbx+0x104],0xffffffff
  40852e:	mov    eax,ebp
  408530:	add    rsp,0x8
  408534:	pop    rbx
  408535:	pop    rbp
  408536:	ret    
  408537:	lea    rdi,[rip+0x26e3]        # 40ac21 <flatcc_builder_padding_base@@Base+0x7d1>
  40853e:	lea    rsi,[rip+0x219d]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408545:	lea    rcx,[rip+0x2f88]        # 40b4d4 <flatcc_builder_padding_base@@Base+0x1084>
  40854c:	mov    edx,0x6c4
  408551:	call   403060 <__assert_fail@plt>
  408556:	lea    rdi,[rip+0x2fba]        # 40b517 <flatcc_builder_padding_base@@Base+0x10c7>
  40855d:	lea    rsi,[rip+0x217e]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  408564:	lea    rcx,[rip+0x2f69]        # 40b4d4 <flatcc_builder_padding_base@@Base+0x1084>
  40856b:	mov    edx,0x6c5
  408570:	call   403060 <__assert_fail@plt>
  408575:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40857f:	nop

0000000000408580 <flatcc_builder_string_edit@@Base>:
  408580:	mov    rax,QWORD PTR [rdi+0x18]
  408584:	ret    
  408585:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40858f:	nop

0000000000408590 <flatcc_builder_string_len@@Base>:
  408590:	mov    rax,QWORD PTR [rdi+0x30]
  408594:	mov    eax,DWORD PTR [rax+0x14]
  408597:	ret    
  408598:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004085a0 <flatcc_builder_table_edit@@Base>:
  4085a0:	mov    rax,QWORD PTR [rdi+0x30]
  4085a4:	movzx  eax,WORD PTR [rax+0xe]
  4085a8:	cmp    eax,0x3
  4085ab:	jne    4085b8 <flatcc_builder_table_edit@@Base+0x18>
  4085ad:	mov    eax,DWORD PTR [rdi+0x20]
  4085b0:	add    rax,QWORD PTR [rdi+0x18]
  4085b4:	sub    rax,rsi
  4085b7:	ret    
  4085b8:	push   rax
  4085b9:	lea    rdi,[rip+0x2951]        # 40af11 <flatcc_builder_padding_base@@Base+0xac1>
  4085c0:	lea    rsi,[rip+0x211b]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4085c7:	lea    rcx,[rip+0x2ffb]        # 40b5c9 <flatcc_builder_padding_base@@Base+0x1179>
  4085ce:	mov    edx,0x702
  4085d3:	call   403060 <__assert_fail@plt>
  4085d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004085e0 <flatcc_builder_table_add_copy@@Base>:
  4085e0:	push   r15
  4085e2:	push   r14
  4085e4:	push   rbx
  4085e5:	mov    r15,rcx
  4085e8:	mov    r14,rdx
  4085eb:	mov    rdx,rcx
  4085ee:	mov    ecx,r8d
  4085f1:	call   407530 <flatcc_builder_table_add@@Base>
  4085f6:	mov    rbx,rax
  4085f9:	test   rax,rax
  4085fc:	je     40860c <flatcc_builder_table_add_copy@@Base+0x2c>
  4085fe:	mov    rdi,rbx
  408601:	mov    rsi,r14
  408604:	mov    rdx,r15
  408607:	call   4030b0 <memcpy@plt>
  40860c:	mov    rax,rbx
  40860f:	pop    rbx
  408610:	pop    r14
  408612:	pop    r15
  408614:	ret    
  408615:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40861f:	nop

0000000000408620 <flatcc_builder_push_buffer_alignment@@Base>:
  408620:	movzx  eax,WORD PTR [rdi+0xe8]
  408627:	mov    WORD PTR [rdi+0xe8],0x4
  408630:	ret    
  408631:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40863b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408640 <flatcc_builder_pop_buffer_alignment@@Base>:
  408640:	cmp    WORD PTR [rdi+0xe8],si
  408647:	jae    408650 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  408649:	mov    WORD PTR [rdi+0xe8],si
  408650:	ret    
  408651:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40865b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408660 <flatcc_builder_get_buffer_alignment@@Base>:
  408660:	movzx  eax,WORD PTR [rdi+0xe8]
  408667:	ret    
  408668:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408670 <flatcc_builder_set_vtable_clustering@@Base>:
  408670:	xor    eax,eax
  408672:	test   esi,esi
  408674:	sete   al
  408677:	mov    DWORD PTR [rdi+0x124],eax
  40867d:	ret    
  40867e:	xchg   ax,ax

0000000000408680 <flatcc_builder_set_block_align@@Base>:
  408680:	mov    WORD PTR [rdi+0xec],si
  408687:	ret    
  408688:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408690 <flatcc_builder_get_level@@Base>:
  408690:	mov    eax,DWORD PTR [rdi+0x104]
  408696:	ret    
  408697:	nop    WORD PTR [rax+rax*1+0x0]

00000000004086a0 <flatcc_builder_set_max_level@@Base>:
  4086a0:	mov    DWORD PTR [rdi+0x120],esi
  4086a6:	cmp    DWORD PTR [rdi+0x108],esi
  4086ac:	jge    4086b4 <flatcc_builder_set_max_level@@Base+0x14>
  4086ae:	mov    DWORD PTR [rdi+0x108],esi
  4086b4:	ret    
  4086b5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4086bf:	nop

00000000004086c0 <flatcc_builder_get_buffer_size@@Base>:
  4086c0:	movsxd rax,DWORD PTR [rdi+0xf4]
  4086c7:	movsxd rcx,DWORD PTR [rdi+0xf0]
  4086ce:	sub    rax,rcx
  4086d1:	ret    
  4086d2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4086dc:	nop    DWORD PTR [rax+0x0]

00000000004086e0 <flatcc_builder_get_buffer_start@@Base>:
  4086e0:	mov    eax,DWORD PTR [rdi+0xf0]
  4086e6:	ret    
  4086e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004086f0 <flatcc_builder_get_buffer_end@@Base>:
  4086f0:	mov    eax,DWORD PTR [rdi+0xf4]
  4086f6:	ret    
  4086f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408700 <flatcc_builder_set_vtable_cache_limit@@Base>:
  408700:	mov    QWORD PTR [rdi+0x118],rsi
  408707:	ret    
  408708:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408710 <flatcc_builder_set_identifier@@Base>:
  408710:	test   rsi,rsi
  408713:	jne    40871c <flatcc_builder_set_identifier@@Base+0xc>
  408715:	lea    rsi,[rip+0x1d34]        # 40a450 <flatcc_builder_padding_base@@Base>
  40871c:	mov    eax,DWORD PTR [rsi]
  40871e:	mov    DWORD PTR [rdi+0x110],eax
  408724:	ret    
  408725:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40872f:	nop

0000000000408730 <flatcc_builder_get_type@@Base>:
  408730:	mov    rax,QWORD PTR [rdi+0x30]
  408734:	test   rax,rax
  408737:	je     40873e <flatcc_builder_get_type@@Base+0xe>
  408739:	movzx  eax,WORD PTR [rax+0xe]
  40873d:	ret    
  40873e:	xor    eax,eax
  408740:	ret    
  408741:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40874b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408750 <flatcc_builder_get_type_at@@Base>:
  408750:	xor    eax,eax
  408752:	test   esi,esi
  408754:	jle    408772 <flatcc_builder_get_type_at@@Base+0x22>
  408756:	mov    ecx,DWORD PTR [rdi+0x104]
  40875c:	cmp    ecx,esi
  40875e:	jl     408772 <flatcc_builder_get_type_at@@Base+0x22>
  408760:	mov    rax,QWORD PTR [rdi+0x30]
  408764:	sub    esi,ecx
  408766:	movsxd rcx,esi
  408769:	lea    rcx,[rcx+rcx*8]
  40876d:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408772:	ret    
  408773:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40877d:	nop    DWORD PTR [rax]

0000000000408780 <flatcc_builder_get_direct_buffer@@Base>:
  408780:	cmp    DWORD PTR [rdi+0x128],0x0
  408787:	je     408799 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408789:	mov    rax,QWORD PTR [rdi+0x130]
  408790:	cmp    rax,QWORD PTR [rdi+0x138]
  408797:	je     4087a8 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408799:	test   rsi,rsi
  40879c:	je     4087a5 <flatcc_builder_get_direct_buffer@@Base+0x25>
  40879e:	mov    QWORD PTR [rsi],0x0
  4087a5:	xor    eax,eax
  4087a7:	ret    
  4087a8:	test   rsi,rsi
  4087ab:	je     4087b7 <flatcc_builder_get_direct_buffer@@Base+0x37>
  4087ad:	mov    rax,QWORD PTR [rdi+0x160]
  4087b4:	mov    QWORD PTR [rsi],rax
  4087b7:	mov    rax,QWORD PTR [rdi+0x140]
  4087be:	ret    
  4087bf:	nop

00000000004087c0 <flatcc_builder_copy_buffer@@Base>:
  4087c0:	push   rax
  4087c1:	cmp    DWORD PTR [rdi+0x128],0x0
  4087c8:	je     4087dd <flatcc_builder_copy_buffer@@Base+0x1d>
  4087ca:	add    rdi,0x130
  4087d1:	call   4090e0 <flatcc_emitter_copy_buffer@@Base>
  4087d6:	test   rax,rax
  4087d9:	je     4087e1 <flatcc_builder_copy_buffer@@Base+0x21>
  4087db:	pop    rcx
  4087dc:	ret    
  4087dd:	xor    eax,eax
  4087df:	pop    rcx
  4087e0:	ret    
  4087e1:	lea    rdi,[rip+0x2168]        # 40a950 <flatcc_builder_padding_base@@Base+0x500>
  4087e8:	lea    rsi,[rip+0x1ef3]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4087ef:	lea    rcx,[rip+0x2e5e]        # 40b654 <flatcc_builder_padding_base@@Base+0x1204>
  4087f6:	mov    edx,0x786
  4087fb:	call   403060 <__assert_fail@plt>

0000000000408800 <flatcc_builder_finalize_buffer@@Base>:
  408800:	push   r15
  408802:	push   r14
  408804:	push   rbx
  408805:	mov    rbx,rdi
  408808:	movsxd r14,DWORD PTR [rdi+0xf4]
  40880f:	movsxd rax,DWORD PTR [rdi+0xf0]
  408816:	sub    r14,rax
  408819:	test   rsi,rsi
  40881c:	je     408821 <flatcc_builder_finalize_buffer@@Base+0x21>
  40881e:	mov    QWORD PTR [rsi],r14
  408821:	mov    rdi,r14
  408824:	call   4030c0 <malloc@plt>
  408829:	test   rax,rax
  40882c:	je     40885d <flatcc_builder_finalize_buffer@@Base+0x5d>
  40882e:	cmp    DWORD PTR [rbx+0x128],0x0
  408835:	je     40887c <flatcc_builder_finalize_buffer@@Base+0x7c>
  408837:	mov    r15,rax
  40883a:	add    rbx,0x130
  408841:	mov    rdi,rbx
  408844:	mov    rsi,rax
  408847:	mov    rdx,r14
  40884a:	call   4090e0 <flatcc_emitter_copy_buffer@@Base>
  40884f:	test   rax,rax
  408852:	je     40889b <flatcc_builder_finalize_buffer@@Base+0x9b>
  408854:	mov    rax,r15
  408857:	pop    rbx
  408858:	pop    r14
  40885a:	pop    r15
  40885c:	ret    
  40885d:	lea    rdi,[rip+0x303e]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  408864:	lea    rsi,[rip+0x1e77]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40886b:	lea    rcx,[rip+0x2e27]        # 40b699 <flatcc_builder_padding_base@@Base+0x1249>
  408872:	mov    edx,0x798
  408877:	call   403060 <__assert_fail@plt>
  40887c:	lea    rdi,[rip+0x301f]        # 40b8a2 <flatcc_builder_padding_base@@Base+0x1452>
  408883:	lea    rsi,[rip+0x1e58]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40888a:	lea    rcx,[rip+0x2e08]        # 40b699 <flatcc_builder_padding_base@@Base+0x1249>
  408891:	mov    edx,0x79c
  408896:	call   403060 <__assert_fail@plt>
  40889b:	lea    rdi,[rip+0x20ae]        # 40a950 <flatcc_builder_padding_base@@Base+0x500>
  4088a2:	lea    rsi,[rip+0x1e39]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  4088a9:	lea    rcx,[rip+0x2da4]        # 40b654 <flatcc_builder_padding_base@@Base+0x1204>
  4088b0:	mov    edx,0x786
  4088b5:	call   403060 <__assert_fail@plt>
  4088ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000004088c0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4088c0:	push   r15
  4088c2:	push   r14
  4088c4:	push   r12
  4088c6:	push   rbx
  4088c7:	push   rax
  4088c8:	mov    r14,rsi
  4088cb:	mov    r15,rdi
  4088ce:	movsxd rax,DWORD PTR [rdi+0xf4]
  4088d5:	movsxd rcx,DWORD PTR [rdi+0xf0]
  4088dc:	sub    rax,rcx
  4088df:	test   rsi,rsi
  4088e2:	je     4088e7 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  4088e4:	mov    QWORD PTR [r14],rax
  4088e7:	movzx  ecx,WORD PTR [r15+0xe8]
  4088ef:	add    rax,rcx
  4088f2:	add    rax,0xffffffffffffffff
  4088f6:	mov    rbx,rcx
  4088f9:	neg    rbx
  4088fc:	and    rbx,rax
  4088ff:	cmp    rcx,0x8
  408903:	mov    QWORD PTR [rsp],0x0
  40890b:	mov    esi,0x8
  408910:	cmova  rsi,rcx
  408914:	mov    rdi,rsp
  408917:	mov    rdx,rbx
  40891a:	call   4030e0 <posix_memalign@plt>
  40891f:	mov    r12,QWORD PTR [rsp]
  408923:	test   eax,eax
  408925:	je     408936 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408927:	test   r12,r12
  40892a:	je     408936 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  40892c:	mov    rdi,r12
  40892f:	call   403030 <free@plt>
  408934:	jmp    40897e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408936:	test   r12,r12
  408939:	je     40897e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  40893b:	cmp    DWORD PTR [r15+0x128],0x0
  408943:	je     40892c <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  408945:	add    r15,0x130
  40894c:	mov    rdi,r15
  40894f:	mov    rsi,r12
  408952:	mov    rdx,rbx
  408955:	call   4090e0 <flatcc_emitter_copy_buffer@@Base>
  40895a:	test   rax,rax
  40895d:	jne    40898d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  40895f:	lea    rdi,[rip+0x1fea]        # 40a950 <flatcc_builder_padding_base@@Base+0x500>
  408966:	lea    rsi,[rip+0x1d75]        # 40a6e2 <flatcc_builder_padding_base@@Base+0x292>
  40896d:	lea    rcx,[rip+0x2ce0]        # 40b654 <flatcc_builder_padding_base@@Base+0x1204>
  408974:	mov    edx,0x786
  408979:	call   403060 <__assert_fail@plt>
  40897e:	test   r14,r14
  408981:	je     40898a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408983:	mov    QWORD PTR [r14],0x0
  40898a:	xor    r12d,r12d
  40898d:	mov    rax,r12
  408990:	add    rsp,0x8
  408994:	pop    rbx
  408995:	pop    r12
  408997:	pop    r14
  408999:	pop    r15
  40899b:	ret    
  40899c:	nop    DWORD PTR [rax+0x0]

00000000004089a0 <flatcc_builder_aligned_alloc@@Base>:
  4089a0:	push   rax
  4089a1:	mov    rax,rsi
  4089a4:	mov    QWORD PTR [rsp],0x0
  4089ac:	cmp    rdi,0x8
  4089b0:	mov    esi,0x8
  4089b5:	cmova  rsi,rdi
  4089b9:	mov    rdi,rsp
  4089bc:	mov    rdx,rax
  4089bf:	call   4030e0 <posix_memalign@plt>
  4089c4:	mov    ecx,eax
  4089c6:	mov    rax,QWORD PTR [rsp]
  4089ca:	test   ecx,ecx
  4089cc:	je     4089e5 <flatcc_builder_aligned_alloc@@Base+0x45>
  4089ce:	test   rax,rax
  4089d1:	je     4089e5 <flatcc_builder_aligned_alloc@@Base+0x45>
  4089d3:	mov    rdi,rax
  4089d6:	call   403030 <free@plt>
  4089db:	mov    QWORD PTR [rsp],0x0
  4089e3:	xor    eax,eax
  4089e5:	pop    rcx
  4089e6:	ret    
  4089e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004089f0 <flatcc_builder_aligned_free@@Base>:
  4089f0:	jmp    403030 <free@plt>
  4089f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4089ff:	nop

0000000000408a00 <flatcc_builder_get_emit_context@@Base>:
  408a00:	mov    rax,QWORD PTR [rdi+0x38]
  408a04:	ret    
  408a05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408a0f:	nop

0000000000408a10 <flatcc_emitter_recycle_page@@Base>:
  408a10:	mov    rcx,QWORD PTR [rdi]
  408a13:	mov    eax,0xffffffff
  408a18:	cmp    rcx,rsi
  408a1b:	je     408a72 <flatcc_emitter_recycle_page@@Base+0x62>
  408a1d:	cmp    QWORD PTR [rdi+0x8],rsi
  408a21:	je     408a72 <flatcc_emitter_recycle_page@@Base+0x62>
  408a23:	mov    rax,QWORD PTR [rsi+0xb80]
  408a2a:	mov    rdx,QWORD PTR [rsi+0xb88]
  408a31:	mov    QWORD PTR [rax+0xb88],rdx
  408a38:	mov    rdx,QWORD PTR [rsi+0xb88]
  408a3f:	mov    QWORD PTR [rdx+0xb80],rax
  408a46:	mov    rax,QWORD PTR [rcx+0xb88]
  408a4d:	mov    QWORD PTR [rsi+0xb88],rax
  408a54:	mov    QWORD PTR [rsi+0xb80],rcx
  408a5b:	mov    QWORD PTR [rax+0xb80],rsi
  408a62:	mov    rax,QWORD PTR [rsi+0xb80]
  408a69:	mov    QWORD PTR [rax+0xb88],rsi
  408a70:	xor    eax,eax
  408a72:	ret    
  408a73:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408a7d:	nop    DWORD PTR [rax]

0000000000408a80 <flatcc_emitter_reset@@Base>:
  408a80:	push   r14
  408a82:	push   rbx
  408a83:	push   rax
  408a84:	mov    rax,QWORD PTR [rdi]
  408a87:	test   rax,rax
  408a8a:	je     408b6b <flatcc_emitter_reset@@Base+0xeb>
  408a90:	mov    rbx,rdi
  408a93:	mov    QWORD PTR [rdi+0x8],rax
  408a97:	lea    rcx,[rax+0x5c0]
  408a9e:	mov    QWORD PTR [rdi+0x10],rcx
  408aa2:	mov    QWORD PTR [rdi+0x20],rcx
  408aa6:	mov    QWORD PTR [rdi+0x18],0x5c0
  408aae:	mov    QWORD PTR [rdi+0x28],0x5c0
  408ab6:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408ac0:	mov    rcx,QWORD PTR [rdi+0x30]
  408ac4:	mov    rdx,QWORD PTR [rdi+0x40]
  408ac8:	test   rdx,rdx
  408acb:	jne    408ad4 <flatcc_emitter_reset@@Base+0x54>
  408acd:	mov    QWORD PTR [rbx+0x40],rcx
  408ad1:	mov    rdx,rcx
  408ad4:	lea    rdx,[rdx+rdx*2]
  408ad8:	shr    rdx,0x2
  408adc:	shr    rcx,0x2
  408ae0:	add    rcx,rdx
  408ae3:	mov    QWORD PTR [rbx+0x40],rcx
  408ae7:	mov    QWORD PTR [rbx+0x30],0x0
  408aef:	add    rcx,rcx
  408af2:	cmp    rcx,QWORD PTR [rbx+0x38]
  408af6:	jae    408b6b <flatcc_emitter_reset@@Base+0xeb>
  408af8:	mov    rdi,QWORD PTR [rax+0xb80]
  408aff:	cmp    rdi,rax
  408b02:	je     408b6b <flatcc_emitter_reset@@Base+0xeb>
  408b04:	lea    rcx,[rax+0xb80]
  408b0b:	mov    r14,0xfffffffffffff480
  408b12:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b1c:	nop    DWORD PTR [rax+0x0]
  408b20:	mov    rdx,QWORD PTR [rdi+0xb80]
  408b27:	mov    QWORD PTR [rcx],rdx
  408b2a:	mov    rcx,QWORD PTR [rdi+0xb80]
  408b31:	mov    QWORD PTR [rcx+0xb88],rax
  408b38:	call   403030 <free@plt>
  408b3d:	mov    rax,QWORD PTR [rbx+0x38]
  408b41:	add    rax,r14
  408b44:	mov    QWORD PTR [rbx+0x38],rax
  408b48:	mov    rcx,QWORD PTR [rbx+0x40]
  408b4c:	add    rcx,rcx
  408b4f:	cmp    rcx,rax
  408b52:	jae    408b6b <flatcc_emitter_reset@@Base+0xeb>
  408b54:	mov    rax,QWORD PTR [rbx+0x8]
  408b58:	lea    rcx,[rax+0xb80]
  408b5f:	mov    rdi,QWORD PTR [rax+0xb80]
  408b66:	cmp    rdi,QWORD PTR [rbx]
  408b69:	jne    408b20 <flatcc_emitter_reset@@Base+0xa0>
  408b6b:	add    rsp,0x8
  408b6f:	pop    rbx
  408b70:	pop    r14
  408b72:	ret    
  408b73:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b7d:	nop    DWORD PTR [rax]

0000000000408b80 <flatcc_emitter_clear@@Base>:
  408b80:	push   r14
  408b82:	push   rbx
  408b83:	push   rax
  408b84:	mov    rbx,QWORD PTR [rdi]
  408b87:	test   rbx,rbx
  408b8a:	je     408bea <flatcc_emitter_clear@@Base+0x6a>
  408b8c:	mov    r14,rdi
  408b8f:	mov    rax,QWORD PTR [rbx+0xb88]
  408b96:	mov    QWORD PTR [rax+0xb80],0x0
  408ba1:	jmp    408bbf <flatcc_emitter_clear@@Base+0x3f>
  408ba3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408bad:	nop    DWORD PTR [rax]
  408bb0:	mov    rbx,rax
  408bb3:	mov    rdi,QWORD PTR [rax+0xb88]
  408bba:	call   403030 <free@plt>
  408bbf:	mov    rax,QWORD PTR [rbx+0xb80]
  408bc6:	test   rax,rax
  408bc9:	jne    408bb0 <flatcc_emitter_clear@@Base+0x30>
  408bcb:	mov    rdi,rbx
  408bce:	call   403030 <free@plt>
  408bd3:	vxorps xmm0,xmm0,xmm0
  408bd7:	vmovups YMMWORD PTR [r14+0x20],ymm0
  408bdd:	vmovups YMMWORD PTR [r14],ymm0
  408be2:	mov    QWORD PTR [r14+0x40],0x0
  408bea:	add    rsp,0x8
  408bee:	pop    rbx
  408bef:	pop    r14
  408bf1:	vzeroupper 
  408bf4:	ret    
  408bf5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408bff:	nop

0000000000408c00 <flatcc_emitter@@Base>:
  408c00:	push   rbp
  408c01:	push   r15
  408c03:	push   r14
  408c05:	push   r13
  408c07:	push   r12
  408c09:	push   rbx
  408c0a:	sub    rsp,0x18
  408c0e:	mov    r13d,edx
  408c11:	mov    r14,rsi
  408c14:	mov    r12,rdi
  408c17:	add    QWORD PTR [rdi+0x30],r8
  408c1b:	test   ecx,ecx
  408c1d:	js     408db1 <flatcc_emitter@@Base+0x1b1>
  408c23:	mov    rdx,QWORD PTR [r12+0x28]
  408c28:	cmp    rdx,r8
  408c2b:	jae    408f98 <flatcc_emitter@@Base+0x398>
  408c31:	xor    eax,eax
  408c33:	test   r13d,r13d
  408c36:	je     4090cf <flatcc_emitter@@Base+0x4cf>
  408c3c:	mov    QWORD PTR [rsp+0x8],r13
  408c41:	mov    r15,QWORD PTR [r14+0x8]
  408c45:	test   r15,r15
  408c48:	je     408d96 <flatcc_emitter@@Base+0x196>
  408c4e:	mov    r13,QWORD PTR [r14]
  408c51:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408c5b:	nop    DWORD PTR [rax+rax*1+0x0]
  408c60:	mov    rbp,r15
  408c63:	cmp    r15,rdx
  408c66:	jbe    408d68 <flatcc_emitter@@Base+0x168>
  408c6c:	mov    rbp,rdx
  408c6f:	nop
  408c70:	test   rbp,rbp
  408c73:	jne    408d68 <flatcc_emitter@@Base+0x168>
  408c79:	mov    rbx,QWORD PTR [r12+0x8]
  408c7e:	test   rbx,rbx
  408c81:	je     408c90 <flatcc_emitter@@Base+0x90>
  408c83:	mov    rax,QWORD PTR [rbx+0xb80]
  408c8a:	cmp    rax,QWORD PTR [r12]
  408c8e:	jne    408cd1 <flatcc_emitter@@Base+0xd1>
  408c90:	mov    edi,0xb98
  408c95:	call   4030c0 <malloc@plt>
  408c9a:	test   rax,rax
  408c9d:	je     408fad <flatcc_emitter@@Base+0x3ad>
  408ca3:	add    QWORD PTR [r12+0x38],0xb80
  408cac:	test   rbx,rbx
  408caf:	je     408d10 <flatcc_emitter@@Base+0x110>
  408cb1:	mov    QWORD PTR [rax+0xb88],rbx
  408cb8:	mov    rcx,QWORD PTR [r12]
  408cbc:	mov    QWORD PTR [rax+0xb80],rcx
  408cc3:	mov    QWORD PTR [rcx+0xb88],rax
  408cca:	mov    QWORD PTR [rbx+0xb80],rax
  408cd1:	mov    QWORD PTR [r12+0x8],rax
  408cd6:	mov    QWORD PTR [r12+0x20],rax
  408cdb:	mov    QWORD PTR [r12+0x28],0xb80
  408ce4:	mov    rcx,QWORD PTR [rax+0xb88]
  408ceb:	mov    ecx,DWORD PTR [rcx+0xb90]
  408cf1:	mov    edx,0xb80
  408cf6:	add    ecx,edx
  408cf8:	mov    DWORD PTR [rax+0xb90],ecx
  408cfe:	mov    ebp,0xb80
  408d03:	cmp    r15,rbp
  408d06:	ja     408c70 <flatcc_emitter@@Base+0x70>
  408d0c:	jmp    408d65 <flatcc_emitter@@Base+0x165>
  408d0e:	xchg   ax,ax
  408d10:	mov    QWORD PTR [r12],rax
  408d14:	mov    QWORD PTR [r12+0x8],rax
  408d19:	mov    QWORD PTR [rax+0xb80],rax
  408d20:	mov    QWORD PTR [rax+0xb88],rax
  408d27:	mov    rcx,rax
  408d2a:	add    rcx,0x5c0
  408d31:	mov    QWORD PTR [r12+0x10],rcx
  408d36:	mov    QWORD PTR [r12+0x20],rcx
  408d3b:	mov    QWORD PTR [r12+0x18],0x5c0
  408d44:	mov    QWORD PTR [r12+0x28],0x5c0
  408d4d:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408d57:	mov    ebp,0x5c0
  408d5c:	cmp    r15,rbp
  408d5f:	ja     408c70 <flatcc_emitter@@Base+0x70>
  408d65:	mov    rbp,r15
  408d68:	mov    rdi,QWORD PTR [r12+0x20]
  408d6d:	mov    rsi,r13
  408d70:	mov    rdx,rbp
  408d73:	call   4030b0 <memcpy@plt>
  408d78:	add    QWORD PTR [r12+0x20],rbp
  408d7d:	add    r13,rbp
  408d80:	mov    rdx,QWORD PTR [r12+0x28]
  408d85:	sub    rdx,rbp
  408d88:	mov    QWORD PTR [r12+0x28],rdx
  408d8d:	sub    r15,rbp
  408d90:	jne    408c60 <flatcc_emitter@@Base+0x60>
  408d96:	mov    r13,QWORD PTR [rsp+0x8]
  408d9b:	add    r13d,0xffffffff
  408d9f:	add    r14,0x10
  408da3:	test   r13d,r13d
  408da6:	jne    408c3c <flatcc_emitter@@Base+0x3c>
  408dac:	jmp    4090cd <flatcc_emitter@@Base+0x4cd>
  408db1:	lea    rsi,[r12+0x18]
  408db6:	mov    rdx,QWORD PTR [r12+0x18]
  408dbb:	cmp    rdx,r8
  408dbe:	jae    408fb7 <flatcc_emitter@@Base+0x3b7>
  408dc4:	xor    eax,eax
  408dc6:	test   r13d,r13d
  408dc9:	je     4090cf <flatcc_emitter@@Base+0x4cf>
  408dcf:	mov    QWORD PTR [rsp+0x10],rsi
  408dd4:	movsxd rax,r13d
  408dd7:	shl    rax,0x4
  408ddb:	add    r14,rax
  408dde:	mov    esi,0xfffff480
  408de3:	mov    QWORD PTR [rsp+0x8],r13
  408de8:	mov    r15,QWORD PTR [r14-0x8]
  408dec:	add    r14,0xfffffffffffffff0
  408df0:	test   r15,r15
  408df3:	je     408f84 <flatcc_emitter@@Base+0x384>
  408df9:	mov    r13,QWORD PTR [r14]
  408dfc:	add    r13,r15
  408dff:	nop
  408e00:	mov    rax,QWORD PTR [rsp+0x10]
  408e05:	mov    rax,QWORD PTR [rax]
  408e08:	cmp    r15,rax
  408e0b:	jbe    408f50 <flatcc_emitter@@Base+0x350>
  408e11:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408e1b:	nop    DWORD PTR [rax+rax*1+0x0]
  408e20:	mov    rbp,rax
  408e23:	test   rax,rax
  408e26:	jne    408f53 <flatcc_emitter@@Base+0x353>
  408e2c:	mov    rbx,QWORD PTR [r12]
  408e30:	test   rbx,rbx
  408e33:	je     408e60 <flatcc_emitter@@Base+0x260>
  408e35:	mov    rax,QWORD PTR [rbx+0xb88]
  408e3c:	cmp    rax,QWORD PTR [r12+0x8]
  408e41:	je     408e60 <flatcc_emitter@@Base+0x260>
  408e43:	mov    edx,DWORD PTR [rbx+0xb90]
  408e49:	add    edx,esi
  408e4b:	lea    rcx,[rax+0xb90]
  408e52:	mov    DWORD PTR [rax+0xb90],edx
  408e58:	mov    QWORD PTR [r12],rax
  408e5c:	jmp    408eb5 <flatcc_emitter@@Base+0x2b5>
  408e5e:	xchg   ax,ax
  408e60:	mov    edi,0xb98
  408e65:	call   4030c0 <malloc@plt>
  408e6a:	test   rax,rax
  408e6d:	je     408fad <flatcc_emitter@@Base+0x3ad>
  408e73:	add    QWORD PTR [r12+0x38],0xb80
  408e7c:	test   rbx,rbx
  408e7f:	je     408ef0 <flatcc_emitter@@Base+0x2f0>
  408e81:	mov    rcx,QWORD PTR [r12+0x8]
  408e86:	mov    QWORD PTR [rax+0xb88],rcx
  408e8d:	mov    QWORD PTR [rax+0xb80],rbx
  408e94:	mov    QWORD PTR [rbx+0xb88],rax
  408e9b:	mov    QWORD PTR [rcx+0xb80],rax
  408ea2:	mov    QWORD PTR [r12],rax
  408ea6:	mov    rcx,rax
  408ea9:	add    rcx,0xb90
  408eb0:	mov    esi,0xfffff480
  408eb5:	lea    rdx,[rax+0xb80]
  408ebc:	mov    QWORD PTR [r12+0x10],rdx
  408ec1:	mov    QWORD PTR [r12+0x18],0xb80
  408eca:	mov    rax,QWORD PTR [rax+0xb80]
  408ed1:	mov    eax,DWORD PTR [rax+0xb90]
  408ed7:	add    eax,esi
  408ed9:	mov    DWORD PTR [rcx],eax
  408edb:	mov    eax,0xb80
  408ee0:	cmp    r15,rax
  408ee3:	ja     408e20 <flatcc_emitter@@Base+0x220>
  408ee9:	jmp    408f50 <flatcc_emitter@@Base+0x350>
  408eeb:	nop    DWORD PTR [rax+rax*1+0x0]
  408ef0:	mov    QWORD PTR [r12],rax
  408ef4:	mov    QWORD PTR [r12+0x8],rax
  408ef9:	mov    QWORD PTR [rax+0xb80],rax
  408f00:	mov    QWORD PTR [rax+0xb88],rax
  408f07:	mov    rcx,rax
  408f0a:	add    rcx,0x5c0
  408f11:	mov    QWORD PTR [r12+0x10],rcx
  408f16:	mov    QWORD PTR [r12+0x20],rcx
  408f1b:	mov    QWORD PTR [r12+0x18],0x5c0
  408f24:	mov    QWORD PTR [r12+0x28],0x5c0
  408f2d:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408f37:	mov    eax,0x5c0
  408f3c:	mov    esi,0xfffff480
  408f41:	cmp    r15,rax
  408f44:	ja     408e20 <flatcc_emitter@@Base+0x220>
  408f4a:	nop    WORD PTR [rax+rax*1+0x0]
  408f50:	mov    rbp,r15
  408f53:	mov    rdi,QWORD PTR [r12+0x10]
  408f58:	sub    rdi,rbp
  408f5b:	mov    QWORD PTR [r12+0x10],rdi
  408f60:	sub    rax,rbp
  408f63:	mov    QWORD PTR [r12+0x18],rax
  408f68:	sub    r13,rbp
  408f6b:	mov    rsi,r13
  408f6e:	mov    rdx,rbp
  408f71:	call   4030b0 <memcpy@plt>
  408f76:	mov    esi,0xfffff480
  408f7b:	sub    r15,rbp
  408f7e:	jne    408e00 <flatcc_emitter@@Base+0x200>
  408f84:	mov    r13,QWORD PTR [rsp+0x8]
  408f89:	add    r13d,0xffffffff
  408f8d:	jne    408de3 <flatcc_emitter@@Base+0x1e3>
  408f93:	jmp    4090cd <flatcc_emitter@@Base+0x4cd>
  408f98:	lea    rsi,[r12+0x28]
  408f9d:	mov    rbp,QWORD PTR [r12+0x20]
  408fa2:	lea    rcx,[r8+rbp*1]
  408fa6:	mov    QWORD PTR [r12+0x20],rcx
  408fab:	jmp    408fc4 <flatcc_emitter@@Base+0x3c4>
  408fad:	mov    eax,0xffffffff
  408fb2:	jmp    4090cf <flatcc_emitter@@Base+0x4cf>
  408fb7:	mov    rbp,QWORD PTR [r12+0x10]
  408fbc:	sub    rbp,r8
  408fbf:	mov    QWORD PTR [r12+0x10],rbp
  408fc4:	sub    rdx,r8
  408fc7:	mov    QWORD PTR [rsi],rdx
  408fca:	xor    eax,eax
  408fcc:	test   r13d,r13d
  408fcf:	je     4090cf <flatcc_emitter@@Base+0x4cf>
  408fd5:	lea    r15d,[r13-0x1]
  408fd9:	mov    r12d,r13d
  408fdc:	and    r12d,0x7
  408fe0:	je     409012 <flatcc_emitter@@Base+0x412>
  408fe2:	xor    ebx,ebx
  408fe4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408fee:	xchg   ax,ax
  408ff0:	mov    rsi,QWORD PTR [r14]
  408ff3:	mov    rdx,QWORD PTR [r14+0x8]
  408ff7:	mov    rdi,rbp
  408ffa:	call   4030b0 <memcpy@plt>
  408fff:	add    rbp,QWORD PTR [r14+0x8]
  409003:	add    r14,0x10
  409007:	add    ebx,0x1
  40900a:	cmp    r12d,ebx
  40900d:	jne    408ff0 <flatcc_emitter@@Base+0x3f0>
  40900f:	sub    r13d,ebx
  409012:	cmp    r15d,0x7
  409016:	jb     4090cd <flatcc_emitter@@Base+0x4cd>
  40901c:	nop    DWORD PTR [rax+0x0]
  409020:	mov    rsi,QWORD PTR [r14]
  409023:	mov    rdx,QWORD PTR [r14+0x8]
  409027:	mov    rdi,rbp
  40902a:	call   4030b0 <memcpy@plt>
  40902f:	add    rbp,QWORD PTR [r14+0x8]
  409033:	mov    rsi,QWORD PTR [r14+0x10]
  409037:	mov    rdx,QWORD PTR [r14+0x18]
  40903b:	mov    rdi,rbp
  40903e:	call   4030b0 <memcpy@plt>
  409043:	add    rbp,QWORD PTR [r14+0x18]
  409047:	mov    rsi,QWORD PTR [r14+0x20]
  40904b:	mov    rdx,QWORD PTR [r14+0x28]
  40904f:	mov    rdi,rbp
  409052:	call   4030b0 <memcpy@plt>
  409057:	add    rbp,QWORD PTR [r14+0x28]
  40905b:	mov    rsi,QWORD PTR [r14+0x30]
  40905f:	mov    rdx,QWORD PTR [r14+0x38]
  409063:	mov    rdi,rbp
  409066:	call   4030b0 <memcpy@plt>
  40906b:	add    rbp,QWORD PTR [r14+0x38]
  40906f:	mov    rsi,QWORD PTR [r14+0x40]
  409073:	mov    rdx,QWORD PTR [r14+0x48]
  409077:	mov    rdi,rbp
  40907a:	call   4030b0 <memcpy@plt>
  40907f:	add    rbp,QWORD PTR [r14+0x48]
  409083:	mov    rsi,QWORD PTR [r14+0x50]
  409087:	mov    rdx,QWORD PTR [r14+0x58]
  40908b:	mov    rdi,rbp
  40908e:	call   4030b0 <memcpy@plt>
  409093:	add    rbp,QWORD PTR [r14+0x58]
  409097:	mov    rsi,QWORD PTR [r14+0x60]
  40909b:	mov    rdx,QWORD PTR [r14+0x68]
  40909f:	mov    rdi,rbp
  4090a2:	call   4030b0 <memcpy@plt>
  4090a7:	add    rbp,QWORD PTR [r14+0x68]
  4090ab:	mov    rsi,QWORD PTR [r14+0x70]
  4090af:	mov    rdx,QWORD PTR [r14+0x78]
  4090b3:	mov    rdi,rbp
  4090b6:	call   4030b0 <memcpy@plt>
  4090bb:	add    rbp,QWORD PTR [r14+0x78]
  4090bf:	sub    r14,0xffffffffffffff80
  4090c3:	add    r13d,0xfffffff8
  4090c7:	jne    409020 <flatcc_emitter@@Base+0x420>
  4090cd:	xor    eax,eax
  4090cf:	add    rsp,0x18
  4090d3:	pop    rbx
  4090d4:	pop    r12
  4090d6:	pop    r13
  4090d8:	pop    r14
  4090da:	pop    r15
  4090dc:	pop    rbp
  4090dd:	ret    
  4090de:	xchg   ax,ax

00000000004090e0 <flatcc_emitter_copy_buffer@@Base>:
  4090e0:	push   r15
  4090e2:	push   r14
  4090e4:	push   r12
  4090e6:	push   rbx
  4090e7:	push   rax
  4090e8:	mov    rax,rdx
  4090eb:	mov    rdx,QWORD PTR [rdi+0x30]
  4090ef:	cmp    rdx,rax
  4090f2:	ja     40917d <flatcc_emitter_copy_buffer@@Base+0x9d>
  4090f8:	mov    r14,rdi
  4090fb:	mov    rax,QWORD PTR [rdi]
  4090fe:	test   rax,rax
  409101:	je     40917d <flatcc_emitter_copy_buffer@@Base+0x9d>
  409103:	mov    r15,rsi
  409106:	cmp    rax,QWORD PTR [r14+0x8]
  40910a:	je     40918f <flatcc_emitter_copy_buffer@@Base+0xaf>
  409110:	mov    r12d,0xb80
  409116:	sub    r12,QWORD PTR [r14+0x18]
  40911a:	mov    rsi,QWORD PTR [r14+0x10]
  40911e:	mov    rdi,r15
  409121:	mov    rdx,r12
  409124:	call   4030b0 <memcpy@plt>
  409129:	add    r12,r15
  40912c:	mov    rax,QWORD PTR [r14]
  40912f:	mov    rbx,QWORD PTR [rax+0xb80]
  409136:	cmp    rbx,QWORD PTR [r14+0x8]
  40913a:	je     409164 <flatcc_emitter_copy_buffer@@Base+0x84>
  40913c:	nop    DWORD PTR [rax+0x0]
  409140:	mov    edx,0xb80
  409145:	mov    rdi,r12
  409148:	mov    rsi,rbx
  40914b:	call   4030b0 <memcpy@plt>
  409150:	add    r12,0xb80
  409157:	mov    rbx,QWORD PTR [rbx+0xb80]
  40915e:	cmp    rbx,QWORD PTR [r14+0x8]
  409162:	jne    409140 <flatcc_emitter_copy_buffer@@Base+0x60>
  409164:	mov    edx,0xb80
  409169:	sub    rdx,QWORD PTR [r14+0x28]
  40916d:	mov    rdi,r12
  409170:	mov    rsi,rbx
  409173:	call   4030b0 <memcpy@plt>
  409178:	mov    r15,r12
  40917b:	jmp    409180 <flatcc_emitter_copy_buffer@@Base+0xa0>
  40917d:	xor    r15d,r15d
  409180:	mov    rax,r15
  409183:	add    rsp,0x8
  409187:	pop    rbx
  409188:	pop    r12
  40918a:	pop    r14
  40918c:	pop    r15
  40918e:	ret    
  40918f:	mov    rsi,QWORD PTR [r14+0x10]
  409193:	mov    rdi,r15
  409196:	call   4030b0 <memcpy@plt>
  40919b:	jmp    409180 <flatcc_emitter_copy_buffer@@Base+0xa0>
  40919d:	nop    DWORD PTR [rax]

00000000004091a0 <__libc_csu_init@@Base>:
  4091a0:	endbr64 
  4091a4:	push   r15
  4091a6:	lea    r15,[rip+0x5c53]        # 40ee00 <flatcc_builder_padding_base@@Base+0x49b0>
  4091ad:	push   r14
  4091af:	mov    r14,rdx
  4091b2:	push   r13
  4091b4:	mov    r13,rsi
  4091b7:	push   r12
  4091b9:	mov    r12d,edi
  4091bc:	push   rbp
  4091bd:	lea    rbp,[rip+0x5c44]        # 40ee08 <flatcc_builder_padding_base@@Base+0x49b8>
  4091c4:	push   rbx
  4091c5:	sub    rbp,r15
  4091c8:	sub    rsp,0x8
  4091cc:	call   403000 <free@plt-0x30>
  4091d1:	sar    rbp,0x3
  4091d5:	je     4091f6 <__libc_csu_init@@Base+0x56>
  4091d7:	xor    ebx,ebx
  4091d9:	nop    DWORD PTR [rax+0x0]
  4091e0:	mov    rdx,r14
  4091e3:	mov    rsi,r13
  4091e6:	mov    edi,r12d
  4091e9:	call   QWORD PTR [r15+rbx*8]
  4091ed:	add    rbx,0x1
  4091f1:	cmp    rbp,rbx
  4091f4:	jne    4091e0 <__libc_csu_init@@Base+0x40>
  4091f6:	add    rsp,0x8
  4091fa:	pop    rbx
  4091fb:	pop    rbp
  4091fc:	pop    r12
  4091fe:	pop    r13
  409200:	pop    r14
  409202:	pop    r15
  409204:	ret    
  409205:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000409210 <__libc_csu_fini@@Base>:
  409210:	endbr64 
  409214:	ret    

Disassembly of section .fini:

0000000000409218 <.fini>:
  409218:	endbr64 
  40921c:	sub    rsp,0x8
  409220:	add    rsp,0x8
  409224:	ret    
