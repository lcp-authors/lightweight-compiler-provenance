
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x10fe1]        # 413ff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0x10fe2]        # 414008 <flatcc_builder_padding_base@@Base+0x5ca8>
  403026:	jmp    QWORD PTR [rip+0x10fe4]        # 414010 <flatcc_builder_padding_base@@Base+0x5cb0>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0x10fe2]        # 414018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strtod@plt>:
  403040:	jmp    QWORD PTR [rip+0x10fda]        # 414020 <strtod@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <strlen@plt>:
  403050:	jmp    QWORD PTR [rip+0x10fd2]        # 414028 <strlen@GLIBC_2.2.5>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0x10fca]        # 414030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0x10fc2]        # 414038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0x10fba]        # 414040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <fprintf@plt>:
  403090:	jmp    QWORD PTR [rip+0x10fb2]        # 414048 <fprintf@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memcpy@plt>:
  4030a0:	jmp    QWORD PTR [rip+0x10faa]        # 414050 <memcpy@GLIBC_2.14>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <malloc@plt>:
  4030b0:	jmp    QWORD PTR [rip+0x10fa2]        # 414058 <malloc@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <bcmp@plt>:
  4030c0:	jmp    QWORD PTR [rip+0x10f9a]        # 414060 <bcmp@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <realloc@plt>:
  4030d0:	jmp    QWORD PTR [rip+0x10f92]        # 414068 <realloc@GLIBC_2.2.5>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <fwrite@plt>:
  4030e0:	jmp    QWORD PTR [rip+0x10f8a]        # 414070 <fwrite@GLIBC_2.2.5>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <posix_memalign@plt>:
  4030f0:	jmp    QWORD PTR [rip+0x10f82]        # 414078 <posix_memalign@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403100 <_start@@Base>:
  403100:	endbr64 
  403104:	xor    ebp,ebp
  403106:	mov    r9,rdx
  403109:	pop    rsi
  40310a:	mov    rdx,rsp
  40310d:	and    rsp,0xfffffffffffffff0
  403111:	push   rax
  403112:	push   rsp
  403113:	mov    r8,0x40d130
  40311a:	mov    rcx,0x40d0c0
  403121:	mov    rdi,0x404420
  403128:	call   QWORD PTR [rip+0x10eba]        # 413fe8 <__libc_start_main@GLIBC_2.2.5>
  40312e:	hlt    
  40312f:	nop
  403130:	endbr64 
  403134:	ret    
  403135:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40313f:	nop
  403140:	mov    eax,0x414090
  403145:	cmp    rax,0x414090
  40314b:	je     403160 <_start@@Base+0x60>
  40314d:	mov    eax,0x0
  403152:	test   rax,rax
  403155:	je     403160 <_start@@Base+0x60>
  403157:	mov    edi,0x414090
  40315c:	jmp    rax
  40315e:	xchg   ax,ax
  403160:	ret    
  403161:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40316c:	nop    DWORD PTR [rax+0x0]
  403170:	mov    esi,0x414090
  403175:	sub    rsi,0x414090
  40317c:	mov    rax,rsi
  40317f:	shr    rsi,0x3f
  403183:	sar    rax,0x3
  403187:	add    rsi,rax
  40318a:	sar    rsi,1
  40318d:	je     4031a0 <_start@@Base+0xa0>
  40318f:	mov    eax,0x0
  403194:	test   rax,rax
  403197:	je     4031a0 <_start@@Base+0xa0>
  403199:	mov    edi,0x414090
  40319e:	jmp    rax
  4031a0:	ret    
  4031a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031ac:	nop    DWORD PTR [rax+0x0]
  4031b0:	endbr64 
  4031b4:	cmp    BYTE PTR [rip+0x10ed5],0x0        # 414090 <__bss_start@@Base>
  4031bb:	jne    4031d0 <_start@@Base+0xd0>
  4031bd:	push   rbp
  4031be:	mov    rbp,rsp
  4031c1:	call   403140 <_start@@Base+0x40>
  4031c6:	mov    BYTE PTR [rip+0x10ec3],0x1        # 414090 <__bss_start@@Base>
  4031cd:	pop    rbp
  4031ce:	ret    
  4031cf:	nop
  4031d0:	ret    
  4031d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4031dc:	nop    DWORD PTR [rax+0x0]
  4031e0:	endbr64 
  4031e4:	jmp    403170 <_start@@Base+0x70>
  4031e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004031f0 <test@@Base>:
  4031f0:	push   rbp
  4031f1:	mov    rbp,rsp
  4031f4:	push   r15
  4031f6:	push   r14
  4031f8:	push   r13
  4031fa:	push   r12
  4031fc:	push   rbx
  4031fd:	and    rsp,0xffffffffffffffe0
  403201:	sub    rsp,0xa0
  403208:	vxorps xmm0,xmm0,xmm0
  40320c:	vmovaps YMMWORD PTR [rsp+0x20],ymm0
  403212:	mov    r12,rcx
  403215:	mov    r14,rdx
  403218:	mov    rbx,rsi
  40321b:	vmovaps YMMWORD PTR [rsp+0x40],ymm0
  403221:	mov    QWORD PTR [rsp+0x60],0x0
  40322a:	mov    DWORD PTR [rsp+0x38],0x1
  403232:	mov    QWORD PTR [rsp+0x28],rsi
  403237:	lea    rsi,[rip+0xb098]        # 40e2d6 <g_data@@Base+0x286>
  40323e:	mov    QWORD PTR [rsp+0x10],rdi
  403243:	xor    edx,edx
  403245:	xor    ecx,ecx
  403247:	vzeroupper 
  40324a:	call   4053d0 <flatcc_builder_start_buffer@@Base>
  40324f:	mov    rax,r14
  403252:	sub    rax,rbx
  403255:	cmp    rax,0x2
  403259:	jl     40326d <test@@Base+0x7d>
  40325b:	cmp    BYTE PTR [rbx],0x20
  40325e:	jg     403280 <test@@Base+0x90>
  403260:	jne    40326d <test@@Base+0x7d>
  403262:	cmp    BYTE PTR [rbx+0x1],0x20
  403266:	jle    40326d <test@@Base+0x7d>
  403268:	inc    rbx
  40326b:	jmp    403280 <test@@Base+0x90>
  40326d:	lea    rdi,[rsp+0x20]
  403272:	mov    rsi,rbx
  403275:	mov    rdx,r14
  403278:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40327d:	mov    rbx,rax
  403280:	cmp    rbx,r14
  403283:	mov    QWORD PTR [rsp+0x80],r12
  40328b:	je     40421d <test@@Base+0x102d>
  403291:	jae    404254 <test@@Base+0x1064>
  403297:	cmp    BYTE PTR [rbx],0x7b
  40329a:	jne    404254 <test@@Base+0x1064>
  4032a0:	lea    r13,[rbx+0x1]
  4032a4:	mov    rax,r14
  4032a7:	sub    rax,r13
  4032aa:	cmp    rax,0x2
  4032ae:	jl     4032d0 <test@@Base+0xe0>
  4032b0:	cmp    BYTE PTR [r13+0x0],0x20
  4032b5:	jg     4032e3 <test@@Base+0xf3>
  4032b7:	jne    4032d0 <test@@Base+0xe0>
  4032b9:	cmp    BYTE PTR [rbx+0x2],0x20
  4032bd:	jle    4032d0 <test@@Base+0xe0>
  4032bf:	add    rbx,0x2
  4032c3:	mov    r13,rbx
  4032c6:	cmp    r13,r14
  4032c9:	jne    4032ec <test@@Base+0xfc>
  4032cb:	jmp    40421d <test@@Base+0x102d>
  4032d0:	lea    rdi,[rsp+0x20]
  4032d5:	mov    rsi,r13
  4032d8:	mov    rdx,r14
  4032db:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  4032e0:	mov    r13,rax
  4032e3:	cmp    r13,r14
  4032e6:	je     40421d <test@@Base+0x102d>
  4032ec:	movabs r12,0x7365636f6e640000
  4032f6:	mov    rdi,QWORD PTR [rsp+0x10]
  4032fb:	mov    esi,0xb
  403300:	call   406670 <flatcc_builder_start_table@@Base>
  403305:	mov    rax,r14
  403308:	cmp    r13,r14
  40330b:	je     40335b <test@@Base+0x16b>
  40330d:	mov    al,BYTE PTR [r13+0x0]
  403311:	cmp    al,0x2e
  403313:	je     403330 <test@@Base+0x140>
  403315:	cmp    al,0x22
  403317:	jne    403350 <test@@Base+0x160>
  403319:	inc    r13
  40331c:	mov    DWORD PTR [rsp+0x34],0x0
  403324:	jmp    403358 <test@@Base+0x168>
  403326:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403330:	lea    rdi,[rsp+0x20]
  403335:	mov    rsi,r13
  403338:	mov    rdx,r14
  40333b:	mov    ecx,0x5
  403340:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403345:	jmp    40335b <test@@Base+0x16b>
  403347:	nop    WORD PTR [rax+rax*1+0x0]
  403350:	mov    DWORD PTR [rsp+0x34],0x1
  403358:	mov    rax,r13
  40335b:	mov    rcx,r14
  40335e:	sub    rcx,rax
  403361:	cmp    rcx,0x8
  403365:	jb     403370 <test@@Base+0x180>
  403367:	movbe  rdx,QWORD PTR [rax]
  40336c:	jmp    4033ec <test@@Base+0x1fc>
  40336e:	xchg   ax,ax
  403370:	lea    rdx,[rcx-0x1]
  403374:	cmp    rdx,0x6
  403378:	ja     404242 <test@@Base+0x1052>
  40337e:	lea    rsi,[rip+0xac8b]        # 40e010 <_IO_stdin_used@@Base+0x10>
  403385:	movsxd rdx,DWORD PTR [rsi+rdx*4]
  403389:	add    rdx,rsi
  40338c:	xor    r8d,r8d
  40338f:	xor    r9d,r9d
  403392:	xor    r10d,r10d
  403395:	xor    ebx,ebx
  403397:	xor    esi,esi
  403399:	xor    edi,edi
  40339b:	jmp    rdx
  40339d:	movsx  r8,BYTE PTR [rax+0x6]
  4033a2:	shl    r8,0x8
  4033a6:	movsx  r9,BYTE PTR [rax+0x5]
  4033ab:	shl    r9,0x10
  4033af:	or     r9,r8
  4033b2:	movsx  r10,BYTE PTR [rax+0x4]
  4033b7:	shl    r10,0x18
  4033bb:	or     r10,r9
  4033be:	movsx  rbx,BYTE PTR [rax+0x3]
  4033c3:	shl    rbx,0x20
  4033c7:	or     rbx,r10
  4033ca:	movsx  rsi,BYTE PTR [rax+0x2]
  4033cf:	shl    rsi,0x28
  4033d3:	or     rsi,rbx
  4033d6:	movsx  rdi,BYTE PTR [rax+0x1]
  4033db:	shl    rdi,0x30
  4033df:	or     rdi,rsi
  4033e2:	movzx  edx,BYTE PTR [rax]
  4033e5:	shl    rdx,0x38
  4033e9:	or     rdx,rdi
  4033ec:	lea    rsi,[rax+0x8]
  4033f0:	cmp    rcx,0x8
  4033f4:	cmovle rsi,r14
  4033f8:	mov    rcx,rdx
  4033fb:	and    rcx,0xffffffffffff0000
  403402:	cmp    rcx,r12
  403405:	jae    4034c0 <test@@Base+0x2d0>
  40340b:	shr    rdx,0x18
  40340f:	movabs rcx,0x6669727374
  403419:	cmp    rdx,rcx
  40341c:	jne    404242 <test@@Base+0x1052>
  403422:	lea    rcx,[rax+0x5]
  403426:	cmp    DWORD PTR [rsp+0x34],0x0
  40342b:	je     403628 <test@@Base+0x438>
  403431:	mov    rbx,r14
  403434:	cmp    rcx,r14
  403437:	lea    r12,[rsp+0x20]
  40343c:	je     40392e <test@@Base+0x73e>
  403442:	mov    dl,BYTE PTR [rcx]
  403444:	mov    rbx,rcx
  403447:	cmp    dl,0x21
  40344a:	jl     40392e <test@@Base+0x73e>
  403450:	add    rax,0x6
  403454:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40345e:	xchg   ax,ax
  403460:	mov    ecx,edx
  403462:	cmp    dl,0x2e
  403465:	je     403490 <test@@Base+0x2a0>
  403467:	cmp    cl,0x5f
  40346a:	je     403490 <test@@Base+0x2a0>
  40346c:	lea    edx,[rcx-0x30]
  40346f:	cmp    dl,0x9
  403472:	jbe    403490 <test@@Base+0x2a0>
  403474:	mov    edx,ecx
  403476:	or     dl,0x20
  403479:	add    dl,0x9f
  40347c:	cmp    dl,0x1a
  40347f:	jae    4034a4 <test@@Base+0x2b4>
  403481:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40348b:	nop    DWORD PTR [rax+rax*1+0x0]
  403490:	cmp    r14,rax
  403493:	je     4038f0 <test@@Base+0x700>
  403499:	movzx  edx,BYTE PTR [rax]
  40349c:	inc    rax
  40349f:	cmp    dl,0x21
  4034a2:	jge    403460 <test@@Base+0x270>
  4034a4:	dec    rax
  4034a7:	mov    rbx,rax
  4034aa:	cmp    cl,0x2e
  4034ad:	je     4038f8 <test@@Base+0x708>
  4034b3:	jmp    40392e <test@@Base+0x73e>
  4034b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4034c0:	mov    rbx,rdx
  4034c3:	movabs rdi,0xffffffff00000000
  4034cd:	and    rbx,rdi
  4034d0:	mov    rdi,rbx
  4034d3:	shr    rdi,0x20
  4034d7:	cmp    rdi,0x7a756c74
  4034de:	ja     403590 <test@@Base+0x3a0>
  4034e4:	lea    rdi,[r12+0x7320]
  4034ec:	cmp    rdx,rdi
  4034ef:	jae    403670 <test@@Base+0x480>
  4034f5:	cmp    rcx,r12
  4034f8:	jne    404242 <test@@Base+0x1052>
  4034fe:	lea    rcx,[rax+0x6]
  403502:	cmp    DWORD PTR [rsp+0x34],0x0
  403507:	je     4038a2 <test@@Base+0x6b2>
  40350d:	mov    rbx,r14
  403510:	cmp    rcx,r14
  403513:	lea    r12,[rsp+0x20]
  403518:	je     403db3 <test@@Base+0xbc3>
  40351e:	mov    dl,BYTE PTR [rcx]
  403520:	mov    rbx,rcx
  403523:	cmp    dl,0x21
  403526:	jl     403db3 <test@@Base+0xbc3>
  40352c:	add    rax,0x7
  403530:	mov    ecx,edx
  403532:	cmp    dl,0x2e
  403535:	je     403560 <test@@Base+0x370>
  403537:	cmp    cl,0x5f
  40353a:	je     403560 <test@@Base+0x370>
  40353c:	lea    edx,[rcx-0x30]
  40353f:	cmp    dl,0x9
  403542:	jbe    403560 <test@@Base+0x370>
  403544:	mov    edx,ecx
  403546:	or     dl,0x20
  403549:	add    dl,0x9f
  40354c:	cmp    dl,0x1a
  40354f:	jae    403574 <test@@Base+0x384>
  403551:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40355b:	nop    DWORD PTR [rax+rax*1+0x0]
  403560:	cmp    r14,rax
  403563:	je     403b36 <test@@Base+0x946>
  403569:	movzx  edx,BYTE PTR [rax]
  40356c:	inc    rax
  40356f:	cmp    dl,0x21
  403572:	jge    403530 <test@@Base+0x340>
  403574:	dec    rax
  403577:	mov    rbx,rax
  40357a:	cmp    cl,0x2e
  40357d:	je     403b42 <test@@Base+0x952>
  403583:	jmp    403db3 <test@@Base+0xbc3>
  403588:	nop    DWORD PTR [rax+rax*1+0x0]
  403590:	movabs rcx,0x7a756c7500000000
  40359a:	cmp    rbx,rcx
  40359d:	jne    404242 <test@@Base+0x1052>
  4035a3:	lea    rcx,[rax+0x4]
  4035a7:	cmp    DWORD PTR [rsp+0x34],0x0
  4035ac:	je     403691 <test@@Base+0x4a1>
  4035b2:	mov    r12,r14
  4035b5:	cmp    rcx,r14
  4035b8:	je     403b68 <test@@Base+0x978>
  4035be:	mov    dl,BYTE PTR [rcx]
  4035c0:	mov    r12,rcx
  4035c3:	cmp    dl,0x21
  4035c6:	jl     403b68 <test@@Base+0x978>
  4035cc:	add    rax,0x5
  4035d0:	mov    ecx,edx
  4035d2:	cmp    dl,0x2e
  4035d5:	je     403600 <test@@Base+0x410>
  4035d7:	cmp    cl,0x5f
  4035da:	je     403600 <test@@Base+0x410>
  4035dc:	lea    edx,[rcx-0x30]
  4035df:	cmp    dl,0x9
  4035e2:	jbe    403600 <test@@Base+0x410>
  4035e4:	mov    edx,ecx
  4035e6:	or     dl,0x20
  4035e9:	add    dl,0x9f
  4035ec:	cmp    dl,0x1a
  4035ef:	jae    403614 <test@@Base+0x424>
  4035f1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4035fb:	nop    DWORD PTR [rax+rax*1+0x0]
  403600:	cmp    r14,rax
  403603:	je     403a84 <test@@Base+0x894>
  403609:	movzx  edx,BYTE PTR [rax]
  40360c:	inc    rax
  40360f:	cmp    dl,0x21
  403612:	jge    4035d0 <test@@Base+0x3e0>
  403614:	dec    rax
  403617:	mov    r12,rax
  40361a:	cmp    cl,0x2e
  40361d:	je     403a90 <test@@Base+0x8a0>
  403623:	jmp    403b68 <test@@Base+0x978>
  403628:	mov    rsi,r14
  40362b:	cmp    rcx,r14
  40362e:	lea    r12,[rsp+0x20]
  403633:	jne    403654 <test@@Base+0x464>
  403635:	jmp    40391b <test@@Base+0x72b>
  40363a:	nop    WORD PTR [rax+rax*1+0x0]
  403640:	cmp    al,0x22
  403642:	je     403897 <test@@Base+0x6a7>
  403648:	inc    rcx
  40364b:	cmp    rcx,r14
  40364e:	je     403908 <test@@Base+0x718>
  403654:	movzx  eax,BYTE PTR [rcx]
  403657:	cmp    al,0x5c
  403659:	jne    403640 <test@@Base+0x450>
  40365b:	mov    rax,r14
  40365e:	sub    rax,rcx
  403661:	cmp    rax,0x2
  403665:	jl     403918 <test@@Base+0x728>
  40366b:	inc    rcx
  40366e:	jmp    403648 <test@@Base+0x458>
  403670:	jne    404242 <test@@Base+0x1052>
  403676:	mov    rax,r14
  403679:	sub    rax,rsi
  40367c:	cmp    rax,0x8
  403680:	jb     4036e0 <test@@Base+0x4f0>
  403682:	movbe  rax,QWORD PTR [rsi]
  403687:	lea    r12,[rsp+0x20]
  40368c:	jmp    40375f <test@@Base+0x56f>
  403691:	mov    rsi,r14
  403694:	cmp    rcx,r14
  403697:	lea    rdi,[rsp+0x20]
  40369c:	jne    4036c4 <test@@Base+0x4d4>
  40369e:	jmp    403b58 <test@@Base+0x968>
  4036a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4036ad:	nop    DWORD PTR [rax]
  4036b0:	cmp    al,0x22
  4036b2:	je     40390d <test@@Base+0x71d>
  4036b8:	inc    rcx
  4036bb:	cmp    rcx,r14
  4036be:	je     403aa5 <test@@Base+0x8b5>
  4036c4:	movzx  eax,BYTE PTR [rcx]
  4036c7:	cmp    al,0x5c
  4036c9:	jne    4036b0 <test@@Base+0x4c0>
  4036cb:	mov    rax,r14
  4036ce:	sub    rax,rcx
  4036d1:	cmp    rax,0x2
  4036d5:	jl     403b55 <test@@Base+0x965>
  4036db:	inc    rcx
  4036de:	jmp    4036b8 <test@@Base+0x4c8>
  4036e0:	dec    rax
  4036e3:	cmp    rax,0x6
  4036e7:	lea    r12,[rsp+0x20]
  4036ec:	ja     404416 <test@@Base+0x1226>
  4036f2:	lea    rcx,[rip+0xa933]        # 40e02c <_IO_stdin_used@@Base+0x2c>
  4036f9:	movsxd rax,DWORD PTR [rcx+rax*4]
  4036fd:	add    rax,rcx
  403700:	xor    r8d,r8d
  403703:	xor    r9d,r9d
  403706:	xor    edx,edx
  403708:	xor    edi,edi
  40370a:	xor    ebx,ebx
  40370c:	xor    ecx,ecx
  40370e:	jmp    rax
  403710:	movsx  r8,BYTE PTR [rsi+0x6]
  403715:	shl    r8,0x8
  403719:	movsx  r9,BYTE PTR [rsi+0x5]
  40371e:	shl    r9,0x10
  403722:	or     r9,r8
  403725:	movsx  rdx,BYTE PTR [rsi+0x4]
  40372a:	shl    rdx,0x18
  40372e:	or     rdx,r9
  403731:	movsx  rdi,BYTE PTR [rsi+0x3]
  403736:	shl    rdi,0x20
  40373a:	or     rdi,rdx
  40373d:	movsx  rbx,BYTE PTR [rsi+0x2]
  403742:	shl    rbx,0x28
  403746:	or     rbx,rdi
  403749:	movsx  rcx,BYTE PTR [rsi+0x1]
  40374e:	shl    rcx,0x30
  403752:	or     rcx,rbx
  403755:	movzx  eax,BYTE PTR [rsi]
  403758:	shl    rax,0x38
  40375c:	or     rax,rcx
  40375f:	movabs rcx,0xffffffff00000000
  403769:	and    rax,rcx
  40376c:	mov    rcx,rax
  40376f:	shr    rcx,0x22
  403773:	cmp    rcx,0x1b19599c
  40377a:	ja     403807 <test@@Base+0x617>
  403780:	movabs rcx,0x6c65616400000000
  40378a:	cmp    rax,rcx
  40378d:	jne    404416 <test@@Base+0x1226>
  403793:	lea    rax,[rsi+0x4]
  403797:	cmp    DWORD PTR [rsp+0x34],0x0
  40379c:	je     403aad <test@@Base+0x8bd>
  4037a2:	mov    rbx,r14
  4037a5:	cmp    rax,r14
  4037a8:	je     403ef4 <test@@Base+0xd04>
  4037ae:	mov    cl,BYTE PTR [rax]
  4037b0:	mov    rbx,rax
  4037b3:	cmp    cl,0x21
  4037b6:	jl     403ef4 <test@@Base+0xd04>
  4037bc:	add    rsi,0x5
  4037c0:	mov    eax,ecx
  4037c2:	cmp    cl,0x2e
  4037c5:	je     4037e0 <test@@Base+0x5f0>
  4037c7:	cmp    al,0x5f
  4037c9:	je     4037e0 <test@@Base+0x5f0>
  4037cb:	lea    ecx,[rax-0x30]
  4037ce:	cmp    cl,0x9
  4037d1:	jbe    4037e0 <test@@Base+0x5f0>
  4037d3:	mov    ecx,eax
  4037d5:	or     cl,0x20
  4037d8:	add    cl,0x9f
  4037db:	cmp    cl,0x1a
  4037de:	jae    4037f4 <test@@Base+0x604>
  4037e0:	cmp    r14,rsi
  4037e3:	je     403e9c <test@@Base+0xcac>
  4037e9:	movzx  ecx,BYTE PTR [rsi]
  4037ec:	inc    rsi
  4037ef:	cmp    cl,0x21
  4037f2:	jge    4037c0 <test@@Base+0x5d0>
  4037f4:	dec    rsi
  4037f7:	mov    rbx,rsi
  4037fa:	cmp    al,0x2e
  4037fc:	je     403ea3 <test@@Base+0xcb3>
  403802:	jmp    403ef4 <test@@Base+0xd04>
  403807:	movabs rcx,0x6c65667400000000
  403811:	cmp    rax,rcx
  403814:	jne    404416 <test@@Base+0x1226>
  40381a:	lea    rax,[rsi+0x4]
  40381e:	cmp    DWORD PTR [rsp+0x34],0x0
  403823:	je     403aec <test@@Base+0x8fc>
  403829:	mov    rbx,r14
  40382c:	cmp    rax,r14
  40382f:	je     404038 <test@@Base+0xe48>
  403835:	mov    cl,BYTE PTR [rax]
  403837:	mov    rbx,rax
  40383a:	cmp    cl,0x21
  40383d:	jl     404038 <test@@Base+0xe48>
  403843:	add    rsi,0x5
  403847:	nop    WORD PTR [rax+rax*1+0x0]
  403850:	mov    eax,ecx
  403852:	cmp    cl,0x2e
  403855:	je     403870 <test@@Base+0x680>
  403857:	cmp    al,0x5f
  403859:	je     403870 <test@@Base+0x680>
  40385b:	lea    ecx,[rax-0x30]
  40385e:	cmp    cl,0x9
  403861:	jbe    403870 <test@@Base+0x680>
  403863:	mov    ecx,eax
  403865:	or     cl,0x20
  403868:	add    cl,0x9f
  40386b:	cmp    cl,0x1a
  40386e:	jae    403884 <test@@Base+0x694>
  403870:	cmp    r14,rsi
  403873:	je     403eb3 <test@@Base+0xcc3>
  403879:	movzx  ecx,BYTE PTR [rsi]
  40387c:	inc    rsi
  40387f:	cmp    cl,0x21
  403882:	jge    403850 <test@@Base+0x660>
  403884:	dec    rsi
  403887:	mov    rbx,rsi
  40388a:	cmp    al,0x2e
  40388c:	je     403ebe <test@@Base+0xcce>
  403892:	jmp    404038 <test@@Base+0xe48>
  403897:	inc    rcx
  40389a:	mov    rbx,rcx
  40389d:	jmp    40392e <test@@Base+0x73e>
  4038a2:	mov    rsi,r14
  4038a5:	cmp    rcx,r14
  4038a8:	lea    r12,[rsp+0x20]
  4038ad:	jne    4038d4 <test@@Base+0x6e4>
  4038af:	jmp    403da0 <test@@Base+0xbb0>
  4038b4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4038be:	xchg   ax,ax
  4038c0:	cmp    al,0x22
  4038c2:	je     403b2b <test@@Base+0x93b>
  4038c8:	inc    rcx
  4038cb:	cmp    rcx,r14
  4038ce:	je     403d98 <test@@Base+0xba8>
  4038d4:	movzx  eax,BYTE PTR [rcx]
  4038d7:	cmp    al,0x5c
  4038d9:	jne    4038c0 <test@@Base+0x6d0>
  4038db:	mov    rax,r14
  4038de:	sub    rax,rcx
  4038e1:	cmp    rax,0x2
  4038e5:	jl     403d9d <test@@Base+0xbad>
  4038eb:	inc    rcx
  4038ee:	jmp    4038c8 <test@@Base+0x6d8>
  4038f0:	mov    rbx,r14
  4038f3:	cmp    cl,0x2e
  4038f6:	jne    40392e <test@@Base+0x73e>
  4038f8:	mov    rdi,r12
  4038fb:	mov    rsi,rbx
  4038fe:	mov    rdx,r14
  403901:	mov    ecx,0x5
  403906:	jmp    403926 <test@@Base+0x736>
  403908:	mov    rsi,r14
  40390b:	jmp    40391b <test@@Base+0x72b>
  40390d:	inc    rcx
  403910:	mov    r12,rcx
  403913:	jmp    403b68 <test@@Base+0x978>
  403918:	mov    rsi,rcx
  40391b:	mov    rdi,r12
  40391e:	mov    rdx,r14
  403921:	mov    ecx,0x14
  403926:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  40392b:	mov    rbx,rax
  40392e:	mov    rax,r14
  403931:	sub    rax,rbx
  403934:	cmp    rax,0x2
  403938:	jl     4039a0 <test@@Base+0x7b0>
  40393a:	cmp    BYTE PTR [rbx],0x20
  40393d:	jg     4039b1 <test@@Base+0x7c1>
  40393f:	jne    4039a0 <test@@Base+0x7b0>
  403941:	cmp    BYTE PTR [rbx+0x1],0x20
  403945:	jle    4039a0 <test@@Base+0x7b0>
  403947:	inc    rbx
  40394a:	cmp    rbx,r14
  40394d:	je     40421d <test@@Base+0x102d>
  403953:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40395d:	nop    DWORD PTR [rax]
  403960:	jae    40426c <test@@Base+0x107c>
  403966:	cmp    BYTE PTR [rbx],0x3a
  403969:	jne    40426c <test@@Base+0x107c>
  40396f:	lea    r15,[rbx+0x1]
  403973:	mov    rax,r14
  403976:	sub    rax,r15
  403979:	cmp    rax,0x2
  40397d:	jl     4039c0 <test@@Base+0x7d0>
  40397f:	cmp    BYTE PTR [r15],0x20
  403983:	jg     4039d1 <test@@Base+0x7e1>
  403985:	jne    4039c0 <test@@Base+0x7d0>
  403987:	cmp    BYTE PTR [rbx+0x2],0x20
  40398b:	jle    4039c0 <test@@Base+0x7d0>
  40398d:	add    rbx,0x2
  403991:	mov    r15,rbx
  403994:	cmp    r15,r14
  403997:	jne    4039da <test@@Base+0x7ea>
  403999:	jmp    40421d <test@@Base+0x102d>
  40399e:	xchg   ax,ax
  4039a0:	mov    rdi,r12
  4039a3:	mov    rsi,rbx
  4039a6:	mov    rdx,r14
  4039a9:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  4039ae:	mov    rbx,rax
  4039b1:	cmp    rbx,r14
  4039b4:	jne    403960 <test@@Base+0x770>
  4039b6:	jmp    40421d <test@@Base+0x102d>
  4039bb:	nop    DWORD PTR [rax+rax*1+0x0]
  4039c0:	mov    rdi,r12
  4039c3:	mov    rsi,r15
  4039c6:	mov    rdx,r14
  4039c9:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  4039ce:	mov    r15,rax
  4039d1:	cmp    r15,r14
  4039d4:	je     40421d <test@@Base+0x102d>
  4039da:	mov    edx,0x1
  4039df:	mov    rdi,QWORD PTR [rsp+0x10]
  4039e4:	xor    esi,esi
  4039e6:	mov    ecx,0x1
  4039eb:	call   4079f0 <flatcc_builder_table_add@@Base>
  4039f0:	test   rax,rax
  4039f3:	je     4042a1 <test@@Base+0x10b1>
  4039f9:	mov    rbx,rax
  4039fc:	mov    QWORD PTR [rsp+0x18],0x0
  403a05:	mov    DWORD PTR [rsp+0xc],0x0
  403a0d:	mov    BYTE PTR [rax],0x0
  403a10:	mov    rdi,r12
  403a13:	mov    rsi,r15
  403a16:	mov    rdx,r14
  403a19:	lea    rcx,[rsp+0xc]
  403a1e:	lea    r8,[rsp+0x18]
  403a23:	call   40b5a0 <flatcc_json_parser_integer@@Base>
  403a28:	mov    r12,r15
  403a2b:	cmp    rax,r15
  403a2e:	je     404153 <test@@Base+0xf63>
  403a34:	cmp    DWORD PTR [rsp+0xc],0x0
  403a39:	je     403a55 <test@@Base+0x865>
  403a3b:	lea    rdi,[rsp+0x20]
  403a40:	mov    rsi,rax
  403a43:	mov    rdx,r14
  403a46:	mov    ecx,0x8
  403a4b:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403a50:	jmp    404150 <test@@Base+0xf60>
  403a55:	mov    rcx,QWORD PTR [rsp+0x18]
  403a5a:	cmp    rcx,0x100
  403a61:	jb     403a7d <test@@Base+0x88d>
  403a63:	lea    rdi,[rsp+0x20]
  403a68:	mov    rsi,rax
  403a6b:	mov    rdx,r14
  403a6e:	mov    ecx,0x7
  403a73:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403a78:	jmp    404150 <test@@Base+0xf60>
  403a7d:	mov    BYTE PTR [rbx],cl
  403a7f:	jmp    404150 <test@@Base+0xf60>
  403a84:	mov    r12,r14
  403a87:	cmp    cl,0x2e
  403a8a:	jne    403b68 <test@@Base+0x978>
  403a90:	lea    rdi,[rsp+0x20]
  403a95:	mov    rsi,r12
  403a98:	mov    rdx,r14
  403a9b:	mov    ecx,0x5
  403aa0:	jmp    403b60 <test@@Base+0x970>
  403aa5:	mov    rsi,r14
  403aa8:	jmp    403b58 <test@@Base+0x968>
  403aad:	mov    rsi,r14
  403ab0:	cmp    rax,r14
  403ab3:	jne    403acf <test@@Base+0x8df>
  403ab5:	jmp    403ee1 <test@@Base+0xcf1>
  403aba:	cmp    cl,0x22
  403abd:	je     403e8f <test@@Base+0xc9f>
  403ac3:	inc    rax
  403ac6:	cmp    rax,r14
  403ac9:	je     403ed1 <test@@Base+0xce1>
  403acf:	movzx  ecx,BYTE PTR [rax]
  403ad2:	cmp    cl,0x5c
  403ad5:	jne    403aba <test@@Base+0x8ca>
  403ad7:	mov    rcx,r14
  403ada:	sub    rcx,rax
  403add:	cmp    rcx,0x2
  403ae1:	jl     403ede <test@@Base+0xcee>
  403ae7:	inc    rax
  403aea:	jmp    403ac3 <test@@Base+0x8d3>
  403aec:	mov    rsi,r14
  403aef:	cmp    rax,r14
  403af2:	jne    403b0e <test@@Base+0x91e>
  403af4:	jmp    404025 <test@@Base+0xe35>
  403af9:	cmp    cl,0x22
  403afc:	je     403e94 <test@@Base+0xca4>
  403b02:	inc    rax
  403b05:	cmp    rax,r14
  403b08:	je     403ed6 <test@@Base+0xce6>
  403b0e:	movzx  ecx,BYTE PTR [rax]
  403b11:	cmp    cl,0x5c
  403b14:	jne    403af9 <test@@Base+0x909>
  403b16:	mov    rcx,r14
  403b19:	sub    rcx,rax
  403b1c:	cmp    rcx,0x2
  403b20:	jl     404022 <test@@Base+0xe32>
  403b26:	inc    rax
  403b29:	jmp    403b02 <test@@Base+0x912>
  403b2b:	inc    rcx
  403b2e:	mov    rbx,rcx
  403b31:	jmp    403db3 <test@@Base+0xbc3>
  403b36:	mov    rbx,r14
  403b39:	cmp    cl,0x2e
  403b3c:	jne    403db3 <test@@Base+0xbc3>
  403b42:	mov    rdi,r12
  403b45:	mov    rsi,rbx
  403b48:	mov    rdx,r14
  403b4b:	mov    ecx,0x5
  403b50:	jmp    403dab <test@@Base+0xbbb>
  403b55:	mov    rsi,rcx
  403b58:	mov    rdx,r14
  403b5b:	mov    ecx,0x14
  403b60:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403b65:	mov    r12,rax
  403b68:	mov    rax,r14
  403b6b:	sub    rax,r12
  403b6e:	cmp    rax,0x2
  403b72:	jl     403b92 <test@@Base+0x9a2>
  403b74:	cmp    BYTE PTR [r12],0x20
  403b79:	jg     403ba5 <test@@Base+0x9b5>
  403b7b:	jne    403b92 <test@@Base+0x9a2>
  403b7d:	cmp    BYTE PTR [r12+0x1],0x20
  403b83:	jle    403b92 <test@@Base+0x9a2>
  403b85:	inc    r12
  403b88:	cmp    r12,r14
  403b8b:	jne    403bae <test@@Base+0x9be>
  403b8d:	jmp    40421d <test@@Base+0x102d>
  403b92:	lea    rdi,[rsp+0x20]
  403b97:	mov    rsi,r12
  403b9a:	mov    rdx,r14
  403b9d:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  403ba2:	mov    r12,rax
  403ba5:	cmp    r12,r14
  403ba8:	je     40421d <test@@Base+0x102d>
  403bae:	jae    4043aa <test@@Base+0x11ba>
  403bb4:	cmp    BYTE PTR [r12],0x3a
  403bb9:	jne    4043aa <test@@Base+0x11ba>
  403bbf:	lea    r13,[r12+0x1]
  403bc4:	mov    rax,r14
  403bc7:	sub    rax,r13
  403bca:	cmp    rax,0x2
  403bce:	jl     403d74 <test@@Base+0xb84>
  403bd4:	cmp    BYTE PTR [r13+0x0],0x20
  403bd9:	jle    403d5e <test@@Base+0xb6e>
  403bdf:	lea    rbx,[rsp+0x20]
  403be4:	cmp    r13,r14
  403be7:	je     40421d <test@@Base+0x102d>
  403bed:	cmp    BYTE PTR [r13+0x0],0x22
  403bf2:	jne    403bf9 <test@@Base+0xa09>
  403bf4:	inc    r13
  403bf7:	jmp    403c0f <test@@Base+0xa1f>
  403bf9:	mov    rdi,rbx
  403bfc:	mov    rsi,r13
  403bff:	mov    rdx,r14
  403c02:	mov    ecx,0x10
  403c07:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403c0c:	mov    r13,rax
  403c0f:	mov    rdi,rbx
  403c12:	mov    rsi,r13
  403c15:	mov    rdx,r14
  403c18:	call   409a00 <flatcc_json_parser_string_part@@Base>
  403c1d:	cmp    rax,r14
  403c20:	je     40423d <test@@Base+0x104d>
  403c26:	mov    r12,rax
  403c29:	cmp    BYTE PTR [rax],0x22
  403c2c:	jne    403c50 <test@@Base+0xa60>
  403c2e:	mov    rdx,r12
  403c31:	sub    rdx,r13
  403c34:	mov    rdi,QWORD PTR [rsp+0x10]
  403c39:	mov    rsi,r13
  403c3c:	call   408790 <flatcc_builder_create_string@@Base>
  403c41:	mov    ebx,eax
  403c43:	test   ebx,ebx
  403c45:	jne    403d13 <test@@Base+0xb23>
  403c4b:	jmp    40440e <test@@Base+0x121e>
  403c50:	mov    QWORD PTR [rsp+0x78],r14
  403c55:	mov    r14,QWORD PTR [rsp+0x10]
  403c5a:	mov    rdi,r14
  403c5d:	call   406500 <flatcc_builder_start_string@@Base>
  403c62:	mov    rbx,r12
  403c65:	sub    rbx,r13
  403c68:	mov    rdi,r14
  403c6b:	mov    rsi,rbx
  403c6e:	call   405e30 <flatcc_builder_extend_string@@Base>
  403c73:	test   rax,rax
  403c76:	je     40440e <test@@Base+0x121e>
  403c7c:	mov    rdi,rax
  403c7f:	mov    rsi,r13
  403c82:	mov    rdx,rbx
  403c85:	call   4030a0 <memcpy@plt>
  403c8a:	nop    WORD PTR [rax+rax*1+0x0]
  403c90:	mov    r14,QWORD PTR [rsp+0x10]
  403c95:	lea    r15,[rsp+0x20]
  403c9a:	mov    rdi,r15
  403c9d:	mov    rsi,r12
  403ca0:	mov    r13,QWORD PTR [rsp+0x78]
  403ca5:	mov    rdx,r13
  403ca8:	lea    rcx,[rsp+0x74]
  403cad:	call   409b50 <flatcc_json_parser_string_escape@@Base>
  403cb2:	mov    rbx,rax
  403cb5:	movsx  rdx,BYTE PTR [rsp+0x74]
  403cbb:	mov    rdi,r14
  403cbe:	lea    rsi,[rsp+0x75]
  403cc3:	call   405f10 <flatcc_builder_append_string@@Base>
  403cc8:	mov    rdi,r15
  403ccb:	mov    rsi,rbx
  403cce:	mov    rdx,r13
  403cd1:	call   409a00 <flatcc_json_parser_string_part@@Base>
  403cd6:	cmp    rax,r13
  403cd9:	je     404325 <test@@Base+0x1135>
  403cdf:	mov    r12,rax
  403ce2:	mov    rdx,rax
  403ce5:	sub    rdx,rbx
  403ce8:	mov    rdi,r14
  403ceb:	mov    rsi,rbx
  403cee:	call   405f10 <flatcc_builder_append_string@@Base>
  403cf3:	cmp    BYTE PTR [r12],0x22
  403cf8:	jne    403c90 <test@@Base+0xaa0>
  403cfa:	mov    rdi,QWORD PTR [rsp+0x10]
  403cff:	call   408930 <flatcc_builder_end_string@@Base>
  403d04:	mov    ebx,eax
  403d06:	mov    r14,QWORD PTR [rsp+0x78]
  403d0b:	test   ebx,ebx
  403d0d:	je     40440e <test@@Base+0x121e>
  403d13:	mov    rdi,QWORD PTR [rsp+0x10]
  403d18:	mov    esi,0xa
  403d1d:	call   407890 <flatcc_builder_table_add_offset@@Base>
  403d22:	test   rax,rax
  403d25:	je     40440e <test@@Base+0x121e>
  403d2b:	mov    DWORD PTR [rax],ebx
  403d2d:	cmp    r12,r14
  403d30:	je     403d41 <test@@Base+0xb51>
  403d32:	cmp    BYTE PTR [r12],0x22
  403d37:	jne    403d41 <test@@Base+0xb51>
  403d39:	inc    r12
  403d3c:	jmp    40415c <test@@Base+0xf6c>
  403d41:	lea    rdi,[rsp+0x20]
  403d46:	mov    rsi,r12
  403d49:	mov    rdx,r14
  403d4c:	mov    ecx,0x14
  403d51:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403d56:	mov    r12,rax
  403d59:	jmp    40415c <test@@Base+0xf6c>
  403d5e:	jne    403d74 <test@@Base+0xb84>
  403d60:	cmp    BYTE PTR [r12+0x2],0x20
  403d66:	jle    403d74 <test@@Base+0xb84>
  403d68:	add    r12,0x2
  403d6c:	mov    r13,r12
  403d6f:	jmp    403bdf <test@@Base+0x9ef>
  403d74:	lea    rbx,[rsp+0x20]
  403d79:	mov    rdi,rbx
  403d7c:	mov    rsi,r13
  403d7f:	mov    rdx,r14
  403d82:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  403d87:	mov    r13,rax
  403d8a:	cmp    r13,r14
  403d8d:	jne    403bed <test@@Base+0x9fd>
  403d93:	jmp    40421d <test@@Base+0x102d>
  403d98:	mov    rsi,r14
  403d9b:	jmp    403da0 <test@@Base+0xbb0>
  403d9d:	mov    rsi,rcx
  403da0:	mov    rdi,r12
  403da3:	mov    rdx,r14
  403da6:	mov    ecx,0x14
  403dab:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403db0:	mov    rbx,rax
  403db3:	mov    rax,r14
  403db6:	sub    rax,rbx
  403db9:	cmp    rax,0x2
  403dbd:	jl     403dd9 <test@@Base+0xbe9>
  403dbf:	cmp    BYTE PTR [rbx],0x20
  403dc2:	jg     403dea <test@@Base+0xbfa>
  403dc4:	jne    403dd9 <test@@Base+0xbe9>
  403dc6:	cmp    BYTE PTR [rbx+0x1],0x20
  403dca:	jle    403dd9 <test@@Base+0xbe9>
  403dcc:	inc    rbx
  403dcf:	cmp    rbx,r14
  403dd2:	jne    403df3 <test@@Base+0xc03>
  403dd4:	jmp    40421d <test@@Base+0x102d>
  403dd9:	mov    rdi,r12
  403ddc:	mov    rsi,rbx
  403ddf:	mov    rdx,r14
  403de2:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  403de7:	mov    rbx,rax
  403dea:	cmp    rbx,r14
  403ded:	je     40421d <test@@Base+0x102d>
  403df3:	jae    40426c <test@@Base+0x107c>
  403df9:	cmp    BYTE PTR [rbx],0x3a
  403dfc:	jne    40426c <test@@Base+0x107c>
  403e02:	lea    r15,[rbx+0x1]
  403e06:	mov    rax,r14
  403e09:	sub    rax,r15
  403e0c:	cmp    rax,0x2
  403e10:	jl     403e31 <test@@Base+0xc41>
  403e12:	cmp    BYTE PTR [r15],0x20
  403e16:	jg     403e42 <test@@Base+0xc52>
  403e18:	jne    403e31 <test@@Base+0xc41>
  403e1a:	cmp    BYTE PTR [rbx+0x2],0x20
  403e1e:	jle    403e31 <test@@Base+0xc41>
  403e20:	add    rbx,0x2
  403e24:	mov    r15,rbx
  403e27:	cmp    r15,r14
  403e2a:	jne    403e4b <test@@Base+0xc5b>
  403e2c:	jmp    40421d <test@@Base+0x102d>
  403e31:	mov    rdi,r12
  403e34:	mov    rsi,r15
  403e37:	mov    rdx,r14
  403e3a:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  403e3f:	mov    r15,rax
  403e42:	cmp    r15,r14
  403e45:	je     40421d <test@@Base+0x102d>
  403e4b:	mov    edx,0x8
  403e50:	mov    rdi,QWORD PTR [rsp+0x10]
  403e55:	mov    esi,0x1
  403e5a:	mov    ecx,0x8
  403e5f:	call   4079f0 <flatcc_builder_table_add@@Base>
  403e64:	test   rax,rax
  403e67:	je     4042a1 <test@@Base+0x10b1>
  403e6d:	mov    rdi,r12
  403e70:	mov    rsi,r15
  403e73:	mov    rdx,r14
  403e76:	mov    rcx,rax
  403e79:	call   40ace0 <flatcc_json_parser_double@@Base>
  403e7e:	mov    r12,rax
  403e81:	cmp    r15,rax
  403e84:	jne    40415c <test@@Base+0xf6c>
  403e8a:	jmp    4042a1 <test@@Base+0x10b1>
  403e8f:	inc    rax
  403e92:	jmp    403ef1 <test@@Base+0xd01>
  403e94:	inc    rax
  403e97:	jmp    404035 <test@@Base+0xe45>
  403e9c:	mov    rbx,r14
  403e9f:	cmp    al,0x2e
  403ea1:	jne    403ef4 <test@@Base+0xd04>
  403ea3:	mov    rdi,r12
  403ea6:	mov    rsi,rbx
  403ea9:	mov    rdx,r14
  403eac:	mov    ecx,0x5
  403eb1:	jmp    403eec <test@@Base+0xcfc>
  403eb3:	mov    rbx,r14
  403eb6:	cmp    al,0x2e
  403eb8:	jne    404038 <test@@Base+0xe48>
  403ebe:	mov    rdi,r12
  403ec1:	mov    rsi,rbx
  403ec4:	mov    rdx,r14
  403ec7:	mov    ecx,0x5
  403ecc:	jmp    404030 <test@@Base+0xe40>
  403ed1:	mov    rsi,r14
  403ed4:	jmp    403ee1 <test@@Base+0xcf1>
  403ed6:	mov    rsi,r14
  403ed9:	jmp    404025 <test@@Base+0xe35>
  403ede:	mov    rsi,rax
  403ee1:	mov    rdi,r12
  403ee4:	mov    rdx,r14
  403ee7:	mov    ecx,0x14
  403eec:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  403ef1:	mov    rbx,rax
  403ef4:	mov    rax,r14
  403ef7:	sub    rax,rbx
  403efa:	cmp    rax,0x2
  403efe:	jl     403f1a <test@@Base+0xd2a>
  403f00:	cmp    BYTE PTR [rbx],0x20
  403f03:	jg     403f2b <test@@Base+0xd3b>
  403f05:	jne    403f1a <test@@Base+0xd2a>
  403f07:	cmp    BYTE PTR [rbx+0x1],0x20
  403f0b:	jle    403f1a <test@@Base+0xd2a>
  403f0d:	inc    rbx
  403f10:	cmp    rbx,r14
  403f13:	jne    403f34 <test@@Base+0xd44>
  403f15:	jmp    40421d <test@@Base+0x102d>
  403f1a:	mov    rdi,r12
  403f1d:	mov    rsi,rbx
  403f20:	mov    rdx,r14
  403f23:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  403f28:	mov    rbx,rax
  403f2b:	cmp    rbx,r14
  403f2e:	je     40421d <test@@Base+0x102d>
  403f34:	jae    40426c <test@@Base+0x107c>
  403f3a:	cmp    BYTE PTR [rbx],0x3a
  403f3d:	jne    40426c <test@@Base+0x107c>
  403f43:	lea    r15,[rbx+0x1]
  403f47:	mov    rax,r14
  403f4a:	sub    rax,r15
  403f4d:	cmp    rax,0x2
  403f51:	jl     403f72 <test@@Base+0xd82>
  403f53:	cmp    BYTE PTR [r15],0x20
  403f57:	jg     403f83 <test@@Base+0xd93>
  403f59:	jne    403f72 <test@@Base+0xd82>
  403f5b:	cmp    BYTE PTR [rbx+0x2],0x20
  403f5f:	jle    403f72 <test@@Base+0xd82>
  403f61:	add    rbx,0x2
  403f65:	mov    r15,rbx
  403f68:	cmp    r15,r14
  403f6b:	jne    403f8c <test@@Base+0xd9c>
  403f6d:	jmp    40421d <test@@Base+0x102d>
  403f72:	mov    rdi,r12
  403f75:	mov    rsi,r15
  403f78:	mov    rdx,r14
  403f7b:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  403f80:	mov    r15,rax
  403f83:	cmp    r15,r14
  403f86:	je     40421d <test@@Base+0x102d>
  403f8c:	mov    edx,0x8
  403f91:	mov    rdi,QWORD PTR [rsp+0x10]
  403f96:	mov    esi,0x3
  403f9b:	mov    ecx,0x8
  403fa0:	call   4079f0 <flatcc_builder_table_add@@Base>
  403fa5:	test   rax,rax
  403fa8:	je     4042a1 <test@@Base+0x10b1>
  403fae:	mov    rbx,rax
  403fb1:	mov    QWORD PTR [rsp+0x18],0x0
  403fba:	mov    DWORD PTR [rsp+0xc],0x0
  403fc2:	mov    QWORD PTR [rax],0x0
  403fc9:	mov    rdi,r12
  403fcc:	mov    rsi,r15
  403fcf:	mov    rdx,r14
  403fd2:	lea    rcx,[rsp+0xc]
  403fd7:	lea    r8,[rsp+0x18]
  403fdc:	call   40b5a0 <flatcc_json_parser_integer@@Base>
  403fe1:	mov    r12,r15
  403fe4:	cmp    rax,r15
  403fe7:	je     404153 <test@@Base+0xf63>
  403fed:	mov    rcx,QWORD PTR [rsp+0x18]
  403ff2:	cmp    DWORD PTR [rsp+0xc],0x0
  403ff7:	je     404011 <test@@Base+0xe21>
  403ff9:	movabs rdx,0x8000000000000001
  404003:	cmp    rcx,rdx
  404006:	jae    403a3b <test@@Base+0x84b>
  40400c:	neg    rcx
  40400f:	jmp    40401a <test@@Base+0xe2a>
  404011:	test   rcx,rcx
  404014:	js     403a63 <test@@Base+0x873>
  40401a:	mov    QWORD PTR [rbx],rcx
  40401d:	jmp    404150 <test@@Base+0xf60>
  404022:	mov    rsi,rax
  404025:	mov    rdi,r12
  404028:	mov    rdx,r14
  40402b:	mov    ecx,0x14
  404030:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  404035:	mov    rbx,rax
  404038:	mov    rax,r14
  40403b:	sub    rax,rbx
  40403e:	cmp    rax,0x2
  404042:	jl     40405e <test@@Base+0xe6e>
  404044:	cmp    BYTE PTR [rbx],0x20
  404047:	jg     40406f <test@@Base+0xe7f>
  404049:	jne    40405e <test@@Base+0xe6e>
  40404b:	cmp    BYTE PTR [rbx+0x1],0x20
  40404f:	jle    40405e <test@@Base+0xe6e>
  404051:	inc    rbx
  404054:	cmp    rbx,r14
  404057:	jne    404078 <test@@Base+0xe88>
  404059:	jmp    40421d <test@@Base+0x102d>
  40405e:	mov    rdi,r12
  404061:	mov    rsi,rbx
  404064:	mov    rdx,r14
  404067:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40406c:	mov    rbx,rax
  40406f:	cmp    rbx,r14
  404072:	je     40421d <test@@Base+0x102d>
  404078:	jae    40426c <test@@Base+0x107c>
  40407e:	cmp    BYTE PTR [rbx],0x3a
  404081:	jne    40426c <test@@Base+0x107c>
  404087:	lea    r15,[rbx+0x1]
  40408b:	mov    rax,r14
  40408e:	sub    rax,r15
  404091:	cmp    rax,0x2
  404095:	jl     4040b6 <test@@Base+0xec6>
  404097:	cmp    BYTE PTR [r15],0x20
  40409b:	jg     4040c7 <test@@Base+0xed7>
  40409d:	jne    4040b6 <test@@Base+0xec6>
  40409f:	cmp    BYTE PTR [rbx+0x2],0x20
  4040a3:	jle    4040b6 <test@@Base+0xec6>
  4040a5:	add    rbx,0x2
  4040a9:	mov    r15,rbx
  4040ac:	cmp    r15,r14
  4040af:	jne    4040d0 <test@@Base+0xee0>
  4040b1:	jmp    40421d <test@@Base+0x102d>
  4040b6:	mov    rdi,r12
  4040b9:	mov    rsi,r15
  4040bc:	mov    rdx,r14
  4040bf:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  4040c4:	mov    r15,rax
  4040c7:	cmp    r15,r14
  4040ca:	je     40421d <test@@Base+0x102d>
  4040d0:	mov    edx,0x4
  4040d5:	mov    rdi,QWORD PTR [rsp+0x10]
  4040da:	mov    esi,0x2
  4040df:	mov    ecx,0x4
  4040e4:	call   4079f0 <flatcc_builder_table_add@@Base>
  4040e9:	test   rax,rax
  4040ec:	je     4042a1 <test@@Base+0x10b1>
  4040f2:	mov    rbx,rax
  4040f5:	mov    QWORD PTR [rsp+0x18],0x0
  4040fe:	mov    DWORD PTR [rsp+0xc],0x0
  404106:	mov    DWORD PTR [rax],0x0
  40410c:	mov    rdi,r12
  40410f:	mov    rsi,r15
  404112:	mov    rdx,r14
  404115:	lea    rcx,[rsp+0xc]
  40411a:	lea    r8,[rsp+0x18]
  40411f:	call   40b5a0 <flatcc_json_parser_integer@@Base>
  404124:	mov    r12,r15
  404127:	cmp    rax,r15
  40412a:	je     404153 <test@@Base+0xf63>
  40412c:	cmp    DWORD PTR [rsp+0xc],0x0
  404131:	jne    403a3b <test@@Base+0x84b>
  404137:	mov    rcx,QWORD PTR [rsp+0x18]
  40413c:	mov    rdx,rcx
  40413f:	shr    rdx,0x20
  404143:	jne    403a63 <test@@Base+0x873>
  404149:	mov    DWORD PTR [rbx],ecx
  40414b:	nop    DWORD PTR [rax+rax*1+0x0]
  404150:	mov    r12,rax
  404153:	cmp    r15,r12
  404156:	je     4042a1 <test@@Base+0x10b1>
  40415c:	mov    rax,r14
  40415f:	sub    rax,r12
  404162:	cmp    rax,0x2
  404166:	jl     404190 <test@@Base+0xfa0>
  404168:	cmp    BYTE PTR [r12],0x20
  40416d:	jg     4041a3 <test@@Base+0xfb3>
  40416f:	jne    404190 <test@@Base+0xfa0>
  404171:	cmp    BYTE PTR [r12+0x1],0x20
  404177:	jle    404190 <test@@Base+0xfa0>
  404179:	inc    r12
  40417c:	cmp    r12,r14
  40417f:	jne    4041a8 <test@@Base+0xfb8>
  404181:	jmp    40421d <test@@Base+0x102d>
  404186:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404190:	lea    rdi,[rsp+0x20]
  404195:	mov    rsi,r12
  404198:	mov    rdx,r14
  40419b:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  4041a0:	mov    r12,rax
  4041a3:	cmp    r12,r14
  4041a6:	je     40421d <test@@Base+0x102d>
  4041a8:	mov    al,BYTE PTR [r12]
  4041ac:	cmp    al,0x2c
  4041ae:	jne    40432f <test@@Base+0x113f>
  4041b4:	lea    r13,[r12+0x1]
  4041b9:	mov    rax,r14
  4041bc:	sub    rax,r13
  4041bf:	cmp    rax,0x2
  4041c3:	jl     4041e0 <test@@Base+0xff0>
  4041c5:	cmp    BYTE PTR [r13+0x0],0x20
  4041ca:	jg     4041f3 <test@@Base+0x1003>
  4041cc:	jne    4041e0 <test@@Base+0xff0>
  4041ce:	cmp    BYTE PTR [r12+0x2],0x20
  4041d4:	jle    4041e0 <test@@Base+0xff0>
  4041d6:	add    r12,0x2
  4041da:	mov    r13,r12
  4041dd:	jmp    4041f3 <test@@Base+0x1003>
  4041df:	nop
  4041e0:	lea    rdi,[rsp+0x20]
  4041e5:	mov    rsi,r13
  4041e8:	mov    rdx,r14
  4041eb:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  4041f0:	mov    r13,rax
  4041f3:	movabs r12,0x7365636f6e640000
  4041fd:	cmp    r13,r14
  404200:	je     40421d <test@@Base+0x102d>
  404202:	cmp    BYTE PTR [r13+0x0],0x7d
  404207:	jne    403305 <test@@Base+0x115>
  40420d:	mov    al,0x7d
  40420f:	cmp    r13,r14
  404212:	jb     404337 <test@@Base+0x1147>
  404218:	jmp    404380 <test@@Base+0x1190>
  40421d:	mov    rax,QWORD PTR [rip+0xfdd4]        # 413ff8 <stderr@GLIBC_2.2.5>
  404224:	mov    rcx,QWORD PTR [rax]
  404227:	lea    rdi,[rip+0xa0ad]        # 40e2db <g_data@@Base+0x28b>
  40422e:	mov    esi,0xd
  404233:	mov    edx,0x1
  404238:	call   4030e0 <fwrite@plt>
  40423d:	mov    r15,r14
  404240:	jmp    4042a1 <test@@Base+0x10b1>
  404242:	lea    rdi,[rsp+0x20]
  404247:	mov    rsi,rax
  40424a:	mov    rdx,r14
  40424d:	mov    ecx,0xd
  404252:	jmp    404299 <test@@Base+0x10a9>
  404254:	mov    rax,QWORD PTR [rip+0xfd9d]        # 413ff8 <stderr@GLIBC_2.2.5>
  40425b:	mov    rdi,QWORD PTR [rax]
  40425e:	lea    rsi,[rip+0xa084]        # 40e2e9 <g_data@@Base+0x299>
  404265:	mov    edx,0x7b
  40426a:	jmp    404282 <test@@Base+0x1092>
  40426c:	mov    rax,QWORD PTR [rip+0xfd85]        # 413ff8 <stderr@GLIBC_2.2.5>
  404273:	mov    rdi,QWORD PTR [rax]
  404276:	lea    rsi,[rip+0xa06c]        # 40e2e9 <g_data@@Base+0x299>
  40427d:	mov    edx,0x3a
  404282:	xor    eax,eax
  404284:	call   403090 <fprintf@plt>
  404289:	lea    rdi,[rsp+0x20]
  40428e:	mov    rsi,rbx
  404291:	mov    rdx,r14
  404294:	mov    ecx,0x11
  404299:	call   4099e0 <flatcc_json_parser_set_error@@Base>
  40429e:	mov    r15,rax
  4042a1:	mov    edi,DWORD PTR [rsp+0x40]
  4042a5:	mov    rax,QWORD PTR [rip+0xfd4c]        # 413ff8 <stderr@GLIBC_2.2.5>
  4042ac:	mov    r12,QWORD PTR [rax]
  4042af:	test   edi,edi
  4042b1:	jne    4042ce <test@@Base+0x10de>
  4042b3:	lea    rdi,[rip+0xa06b]        # 40e325 <g_data@@Base+0x2d5>
  4042ba:	mov    esi,0xf
  4042bf:	mov    edx,0x1
  4042c4:	mov    rcx,r12
  4042c7:	call   4030e0 <fwrite@plt>
  4042cc:	jmp    404305 <test@@Base+0x1115>
  4042ce:	mov    r14d,DWORD PTR [rsp+0x38]
  4042d3:	mov    ebx,DWORD PTR [rsp+0x58]
  4042d7:	sub    ebx,DWORD PTR [rsp+0x28]
  4042db:	inc    ebx
  4042dd:	call   4099c0 <flatcc_json_parser_error_string@@Base>
  4042e2:	lea    rsi,[rip+0xa031]        # 40e31a <g_data@@Base+0x2ca>
  4042e9:	mov    rdi,r12
  4042ec:	mov    edx,r14d
  4042ef:	mov    ecx,ebx
  4042f1:	mov    r8,rax
  4042f4:	xor    eax,eax
  4042f6:	call   403090 <fprintf@plt>
  4042fb:	mov    rdi,QWORD PTR [rsp+0x10]
  404300:	call   404840 <flatcc_builder_reset@@Base>
  404305:	mov    rcx,QWORD PTR [rsp+0x80]
  40430d:	mov    eax,DWORD PTR [rsp+0x40]
  404311:	mov    DWORD PTR [rcx],eax
  404313:	mov    rax,r15
  404316:	lea    rsp,[rbp-0x28]
  40431a:	pop    rbx
  40431b:	pop    r12
  40431d:	pop    r13
  40431f:	pop    r14
  404321:	pop    r15
  404323:	pop    rbp
  404324:	ret    
  404325:	mov    r15,QWORD PTR [rsp+0x78]
  40432a:	jmp    4042a1 <test@@Base+0x10b1>
  40432f:	mov    r13,r12
  404332:	cmp    r13,r14
  404335:	jae    404380 <test@@Base+0x1190>
  404337:	cmp    al,0x7d
  404339:	jne    404380 <test@@Base+0x1190>
  40433b:	mov    r15,r14
  40433e:	lea    r14,[r13+0x1]
  404342:	mov    rbx,QWORD PTR [rsp+0x10]
  404347:	mov    rdi,rbx
  40434a:	call   407080 <flatcc_builder_end_table@@Base>
  40434f:	mov    rdi,rbx
  404352:	mov    esi,eax
  404354:	call   4055f0 <flatcc_builder_end_buffer@@Base>
  404359:	mov    rbx,r15
  40435c:	mov    rax,r15
  40435f:	sub    rax,r14
  404362:	cmp    rax,0x2
  404366:	jl     4043d4 <test@@Base+0x11e4>
  404368:	cmp    BYTE PTR [r14],0x20
  40436c:	jg     4043e7 <test@@Base+0x11f7>
  40436e:	jne    4043d4 <test@@Base+0x11e4>
  404370:	cmp    BYTE PTR [r13+0x2],0x20
  404375:	jle    4043d4 <test@@Base+0x11e4>
  404377:	add    r13,0x2
  40437b:	mov    r14,r13
  40437e:	jmp    4043e7 <test@@Base+0x11f7>
  404380:	mov    rax,QWORD PTR [rip+0xfc71]        # 413ff8 <stderr@GLIBC_2.2.5>
  404387:	mov    rdi,QWORD PTR [rax]
  40438a:	lea    rsi,[rip+0x9f58]        # 40e2e9 <g_data@@Base+0x299>
  404391:	mov    edx,0x7d
  404396:	xor    eax,eax
  404398:	call   403090 <fprintf@plt>
  40439d:	lea    rdi,[rsp+0x20]
  4043a2:	mov    rsi,r13
  4043a5:	jmp    404291 <test@@Base+0x10a1>
  4043aa:	mov    rax,QWORD PTR [rip+0xfc47]        # 413ff8 <stderr@GLIBC_2.2.5>
  4043b1:	mov    rdi,QWORD PTR [rax]
  4043b4:	lea    rsi,[rip+0x9f2e]        # 40e2e9 <g_data@@Base+0x299>
  4043bb:	mov    edx,0x3a
  4043c0:	xor    eax,eax
  4043c2:	call   403090 <fprintf@plt>
  4043c7:	lea    rdi,[rsp+0x20]
  4043cc:	mov    rsi,r12
  4043cf:	jmp    404291 <test@@Base+0x10a1>
  4043d4:	lea    rdi,[rsp+0x20]
  4043d9:	mov    rsi,r14
  4043dc:	mov    rdx,rbx
  4043df:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  4043e4:	mov    r14,rax
  4043e7:	mov    r15,rbx
  4043ea:	cmp    r14,rbx
  4043ed:	je     4042a1 <test@@Base+0x10b1>
  4043f3:	mov    rax,QWORD PTR [rip+0xfbfe]        # 413ff8 <stderr@GLIBC_2.2.5>
  4043fa:	mov    rcx,QWORD PTR [rax]
  4043fd:	lea    rdi,[rip+0x9efb]        # 40e2ff <g_data@@Base+0x2af>
  404404:	mov    esi,0x1a
  404409:	jmp    404233 <test@@Base+0x1043>
  40440e:	mov    r15,r12
  404411:	jmp    4042a1 <test@@Base+0x10b1>
  404416:	lea    rdi,[rsp+0x20]
  40441b:	jmp    40424a <test@@Base+0x105a>

0000000000404420 <main@@Base>:
  404420:	push   rbx
  404421:	sub    rsp,0x190
  404428:	mov    DWORD PTR [rsp+0x4],0xffffffff
  404430:	lea    rbx,[rsp+0x8]
  404435:	mov    rdi,rbx
  404438:	call   404640 <flatcc_builder_init@@Base>
  40443d:	lea    rsi,[rip+0x9c0c]        # 40e050 <g_data@@Base>
  404444:	lea    rcx,[rsp+0x4]
  404449:	lea    rdx,[rsi+0x285]
  404450:	mov    rdi,rbx
  404453:	call   4031f0 <test@@Base>
  404458:	mov    rdi,rbx
  40445b:	call   404a00 <flatcc_builder_clear@@Base>
  404460:	mov    eax,DWORD PTR [rsp+0x4]
  404464:	add    rsp,0x190
  40446b:	pop    rbx
  40446c:	ret    
  40446d:	nop    DWORD PTR [rax]

0000000000404470 <flatcc_builder_default_alloc@@Base>:
  404470:	push   rbp
  404471:	push   r15
  404473:	push   r14
  404475:	push   r12
  404477:	push   rbx
  404478:	mov    rbx,rsi
  40447b:	test   rdx,rdx
  40447e:	je     4044a8 <flatcc_builder_default_alloc@@Base+0x38>
  404480:	mov    r14d,ecx
  404483:	dec    r8d
  404486:	cmp    r8d,0x6
  40448a:	ja     4044c6 <flatcc_builder_default_alloc@@Base+0x56>
  40448c:	mov    eax,0x100
  404491:	lea    rcx,[rip+0x9ea8]        # 40e340 <g_data@@Base+0x2f0>
  404498:	movsxd rsi,DWORD PTR [rcx+r8*4]
  40449c:	add    rsi,rcx
  40449f:	jmp    rsi
  4044a1:	mov    eax,0x120
  4044a6:	jmp    4044e0 <flatcc_builder_default_alloc@@Base+0x70>
  4044a8:	mov    rdi,QWORD PTR [rbx]
  4044ab:	xor    r15d,r15d
  4044ae:	test   rdi,rdi
  4044b1:	je     40453f <flatcc_builder_default_alloc@@Base+0xcf>
  4044b7:	call   403030 <free@plt>
  4044bc:	vxorps xmm0,xmm0,xmm0
  4044c0:	vmovups XMMWORD PTR [rbx],xmm0
  4044c4:	jmp    40453f <flatcc_builder_default_alloc@@Base+0xcf>
  4044c6:	mov    eax,0x20
  4044cb:	jmp    4044e0 <flatcc_builder_default_alloc@@Base+0x70>
  4044cd:	mov    rax,rdx
  4044d0:	jmp    4044e0 <flatcc_builder_default_alloc@@Base+0x70>
  4044d2:	mov    eax,0x40
  4044d7:	nop    WORD PTR [rax+rax*1+0x0]
  4044e0:	mov    rbp,rax
  4044e3:	add    rax,rax
  4044e6:	cmp    rbp,rdx
  4044e9:	jb     4044e0 <flatcc_builder_default_alloc@@Base+0x70>
  4044eb:	mov    rax,QWORD PTR [rbx+0x8]
  4044ef:	xor    r15d,r15d
  4044f2:	cmp    rax,rdx
  4044f5:	jb     4044ff <flatcc_builder_default_alloc@@Base+0x8f>
  4044f7:	shr    rax,1
  4044fa:	cmp    rax,rbp
  4044fd:	jae    40453f <flatcc_builder_default_alloc@@Base+0xcf>
  4044ff:	mov    rdi,QWORD PTR [rbx]
  404502:	mov    rsi,rbp
  404505:	call   4030d0 <realloc@plt>
  40450a:	test   rax,rax
  40450d:	je     404539 <flatcc_builder_default_alloc@@Base+0xc9>
  40450f:	mov    r12,rax
  404512:	test   r14d,r14d
  404515:	je     404530 <flatcc_builder_default_alloc@@Base+0xc0>
  404517:	mov    rax,QWORD PTR [rbx+0x8]
  40451b:	mov    rdx,rbp
  40451e:	sub    rdx,rax
  404521:	jbe    404530 <flatcc_builder_default_alloc@@Base+0xc0>
  404523:	mov    rdi,r12
  404526:	add    rdi,rax
  404529:	xor    esi,esi
  40452b:	call   403070 <memset@plt>
  404530:	mov    QWORD PTR [rbx],r12
  404533:	mov    QWORD PTR [rbx+0x8],rbp
  404537:	jmp    40453f <flatcc_builder_default_alloc@@Base+0xcf>
  404539:	mov    r15d,0xffffffff
  40453f:	mov    eax,r15d
  404542:	pop    rbx
  404543:	pop    r12
  404545:	pop    r14
  404547:	pop    r15
  404549:	pop    rbp
  40454a:	ret    
  40454b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404550 <flatcc_builder_flush_vtable_cache@@Base>:
  404550:	push   rbx
  404551:	cmp    QWORD PTR [rdi+0xd8],0x0
  404559:	je     404584 <flatcc_builder_flush_vtable_cache@@Base+0x34>
  40455b:	mov    rbx,rdi
  40455e:	mov    rdi,QWORD PTR [rdi+0xa8]
  404565:	mov    rdx,QWORD PTR [rbx+0xb0]
  40456c:	xor    esi,esi
  40456e:	call   403070 <memset@plt>
  404573:	movabs rax,0x1000000000
  40457d:	mov    QWORD PTR [rbx+0xe0],rax
  404584:	pop    rbx
  404585:	ret    
  404586:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404590 <flatcc_builder_custom_init@@Base>:
  404590:	vxorps xmm0,xmm0,xmm0
  404594:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40459c:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  4045a4:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  4045ac:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  4045b4:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  4045bc:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  4045c4:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  4045cc:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  4045d4:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  4045d9:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  4045de:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  4045e3:	vmovups YMMWORD PTR [rdi],ymm0
  4045e7:	mov    QWORD PTR [rdi+0x180],0x0
  4045f2:	test   rsi,rsi
  4045f5:	je     404619 <flatcc_builder_custom_init@@Base+0x89>
  4045f7:	test   rcx,rcx
  4045fa:	jne    404603 <flatcc_builder_custom_init@@Base+0x73>
  4045fc:	lea    rcx,[rip+0xfffffffffffffe6d]        # 404470 <flatcc_builder_default_alloc@@Base>
  404603:	mov    QWORD PTR [rdi+0x40],r8
  404607:	mov    QWORD PTR [rdi+0x50],rcx
  40460b:	mov    QWORD PTR [rdi+0x38],rdx
  40460f:	mov    QWORD PTR [rdi+0x48],rsi
  404613:	xor    eax,eax
  404615:	vzeroupper 
  404618:	ret    
  404619:	mov    DWORD PTR [rdi+0x128],0x1
  404623:	lea    rdx,[rdi+0x130]
  40462a:	lea    rsi,[rip+0x4a6f]        # 4090a0 <flatcc_emitter@@Base>
  404631:	test   rcx,rcx
  404634:	je     4045fc <flatcc_builder_custom_init@@Base+0x6c>
  404636:	jmp    404603 <flatcc_builder_custom_init@@Base+0x73>
  404638:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404640 <flatcc_builder_init@@Base>:
  404640:	vxorps xmm0,xmm0,xmm0
  404644:	vmovups YMMWORD PTR [rdi+0x120],ymm0
  40464c:	vmovups YMMWORD PTR [rdi+0x40],ymm0
  404651:	vmovups YMMWORD PTR [rdi+0x20],ymm0
  404656:	vmovups YMMWORD PTR [rdi+0x160],ymm0
  40465e:	vmovups YMMWORD PTR [rdi+0x140],ymm0
  404666:	vmovups YMMWORD PTR [rdi+0x100],ymm0
  40466e:	vmovups YMMWORD PTR [rdi+0xe0],ymm0
  404676:	vmovups YMMWORD PTR [rdi+0xc0],ymm0
  40467e:	vmovups YMMWORD PTR [rdi+0xa0],ymm0
  404686:	vmovups YMMWORD PTR [rdi+0x80],ymm0
  40468e:	vmovups YMMWORD PTR [rdi+0x60],ymm0
  404693:	vmovups YMMWORD PTR [rdi],ymm0
  404697:	mov    QWORD PTR [rdi+0x180],0x0
  4046a2:	mov    DWORD PTR [rdi+0x128],0x1
  4046ac:	lea    rax,[rdi+0x130]
  4046b3:	mov    QWORD PTR [rdi+0x40],0x0
  4046bb:	lea    rcx,[rip+0xfffffffffffffdae]        # 404470 <flatcc_builder_default_alloc@@Base>
  4046c2:	mov    QWORD PTR [rdi+0x50],rcx
  4046c6:	mov    QWORD PTR [rdi+0x38],rax
  4046ca:	lea    rax,[rip+0x49cf]        # 4090a0 <flatcc_emitter@@Base>
  4046d1:	mov    QWORD PTR [rdi+0x48],rax
  4046d5:	xor    eax,eax
  4046d7:	vzeroupper 
  4046da:	ret    
  4046db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004046e0 <flatcc_builder_custom_reset@@Base>:
  4046e0:	push   rbp
  4046e1:	push   r15
  4046e3:	push   r14
  4046e5:	push   r12
  4046e7:	push   rbx
  4046e8:	mov    r15d,edx
  4046eb:	mov    r14d,esi
  4046ee:	mov    r12,rdi
  4046f1:	lea    rbp,[rdi+0x58]
  4046f5:	xor    ebx,ebx
  4046f7:	jmp    404718 <flatcc_builder_custom_reset@@Base+0x38>
  4046f9:	nop    DWORD PTR [rax+0x0]
  404700:	cmp    QWORD PTR [rbp+0x8],0x0
  404705:	jne    404816 <flatcc_builder_custom_reset@@Base+0x136>
  40470b:	inc    rbx
  40470e:	add    rbp,0x10
  404712:	cmp    rbx,0x8
  404716:	je     40475f <flatcc_builder_custom_reset@@Base+0x7f>
  404718:	mov    rdi,QWORD PTR [rbp+0x0]
  40471c:	test   rdi,rdi
  40471f:	je     404700 <flatcc_builder_custom_reset@@Base+0x20>
  404721:	test   r15d,r15d
  404724:	je     404752 <flatcc_builder_custom_reset@@Base+0x72>
  404726:	cmp    rbx,0x5
  40472a:	je     404752 <flatcc_builder_custom_reset@@Base+0x72>
  40472c:	mov    rdi,QWORD PTR [r12+0x40]
  404731:	mov    edx,0x1
  404736:	mov    rsi,rbp
  404739:	mov    ecx,0x1
  40473e:	mov    r8d,ebx
  404741:	call   QWORD PTR [r12+0x50]
  404746:	test   eax,eax
  404748:	jne    404806 <flatcc_builder_custom_reset@@Base+0x126>
  40474e:	mov    rdi,QWORD PTR [rbp+0x0]
  404752:	mov    rdx,QWORD PTR [rbp+0x8]
  404756:	xor    esi,esi
  404758:	call   403070 <memset@plt>
  40475d:	jmp    40470b <flatcc_builder_custom_reset@@Base+0x2b>
  40475f:	mov    DWORD PTR [r12+0xe0],0x0
  40476b:	cmp    DWORD PTR [r12+0xe4],0x0
  404774:	je     404782 <flatcc_builder_custom_reset@@Base+0xa2>
  404776:	mov    DWORD PTR [r12+0xe4],0x10
  404782:	mov    WORD PTR [r12+0xe8],0x0
  40478d:	mov    QWORD PTR [r12+0xf0],0x0
  404799:	mov    QWORD PTR [r12+0x20],0x0
  4047a2:	vxorps xmm0,xmm0,xmm0
  4047a6:	vmovups XMMWORD PTR [r12+0xfc],xmm0
  4047b0:	mov    rax,QWORD PTR [r12+0x58]
  4047b5:	mov    rcx,QWORD PTR [r12+0x68]
  4047ba:	mov    QWORD PTR [r12+0x18],rcx
  4047bf:	mov    rcx,QWORD PTR [r12+0x88]
  4047c7:	mov    QWORD PTR [r12],rcx
  4047cb:	mov    QWORD PTR [r12+0x8],rax
  4047d0:	mov    QWORD PTR [r12+0x30],0x0
  4047d9:	test   r14d,r14d
  4047dc:	je     4047e8 <flatcc_builder_custom_reset@@Base+0x108>
  4047de:	vmovups XMMWORD PTR [r12+0x118],xmm0
  4047e8:	xor    ebx,ebx
  4047ea:	cmp    DWORD PTR [r12+0x128],0x0
  4047f3:	je     40480b <flatcc_builder_custom_reset@@Base+0x12b>
  4047f5:	add    r12,0x130
  4047fc:	mov    rdi,r12
  4047ff:	call   408f20 <flatcc_emitter_reset@@Base>
  404804:	jmp    40480b <flatcc_builder_custom_reset@@Base+0x12b>
  404806:	mov    ebx,0xffffffff
  40480b:	mov    eax,ebx
  40480d:	pop    rbx
  40480e:	pop    r12
  404810:	pop    r14
  404812:	pop    r15
  404814:	pop    rbp
  404815:	ret    
  404816:	lea    rdi,[rip+0x9db3]        # 40e5d0 <flatcc_builder_padding_base@@Base+0x270>
  40481d:	lea    rsi,[rip+0x9dbe]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404824:	lea    rcx,[rip+0x9e17]        # 40e642 <flatcc_builder_padding_base@@Base+0x2e2>
  40482b:	mov    edx,0x1b2
  404830:	call   403060 <__assert_fail@plt>
  404835:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40483f:	nop

0000000000404840 <flatcc_builder_reset@@Base>:
  404840:	push   rbx
  404841:	mov    rbx,rdi
  404844:	mov    rdi,QWORD PTR [rdi+0x58]
  404848:	mov    rdx,QWORD PTR [rbx+0x60]
  40484c:	test   rdi,rdi
  40484f:	je     40485a <flatcc_builder_reset@@Base+0x1a>
  404851:	xor    esi,esi
  404853:	call   403070 <memset@plt>
  404858:	jmp    404863 <flatcc_builder_reset@@Base+0x23>
  40485a:	test   rdx,rdx
  40485d:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  404863:	mov    rdi,QWORD PTR [rbx+0x68]
  404867:	mov    rdx,QWORD PTR [rbx+0x70]
  40486b:	test   rdi,rdi
  40486e:	je     404879 <flatcc_builder_reset@@Base+0x39>
  404870:	xor    esi,esi
  404872:	call   403070 <memset@plt>
  404877:	jmp    404882 <flatcc_builder_reset@@Base+0x42>
  404879:	test   rdx,rdx
  40487c:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  404882:	mov    rdi,QWORD PTR [rbx+0x78]
  404886:	mov    rdx,QWORD PTR [rbx+0x80]
  40488d:	test   rdi,rdi
  404890:	je     40489b <flatcc_builder_reset@@Base+0x5b>
  404892:	xor    esi,esi
  404894:	call   403070 <memset@plt>
  404899:	jmp    4048a4 <flatcc_builder_reset@@Base+0x64>
  40489b:	test   rdx,rdx
  40489e:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  4048a4:	mov    rdi,QWORD PTR [rbx+0x88]
  4048ab:	mov    rdx,QWORD PTR [rbx+0x90]
  4048b2:	test   rdi,rdi
  4048b5:	je     4048c0 <flatcc_builder_reset@@Base+0x80>
  4048b7:	xor    esi,esi
  4048b9:	call   403070 <memset@plt>
  4048be:	jmp    4048c9 <flatcc_builder_reset@@Base+0x89>
  4048c0:	test   rdx,rdx
  4048c3:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  4048c9:	mov    rdi,QWORD PTR [rbx+0x98]
  4048d0:	mov    rdx,QWORD PTR [rbx+0xa0]
  4048d7:	test   rdi,rdi
  4048da:	je     4048e5 <flatcc_builder_reset@@Base+0xa5>
  4048dc:	xor    esi,esi
  4048de:	call   403070 <memset@plt>
  4048e3:	jmp    4048ee <flatcc_builder_reset@@Base+0xae>
  4048e5:	test   rdx,rdx
  4048e8:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  4048ee:	mov    rdi,QWORD PTR [rbx+0xa8]
  4048f5:	mov    rdx,QWORD PTR [rbx+0xb0]
  4048fc:	test   rdi,rdi
  4048ff:	je     40490a <flatcc_builder_reset@@Base+0xca>
  404901:	xor    esi,esi
  404903:	call   403070 <memset@plt>
  404908:	jmp    404913 <flatcc_builder_reset@@Base+0xd3>
  40490a:	test   rdx,rdx
  40490d:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  404913:	mov    rdi,QWORD PTR [rbx+0xb8]
  40491a:	mov    rdx,QWORD PTR [rbx+0xc0]
  404921:	test   rdi,rdi
  404924:	je     40492f <flatcc_builder_reset@@Base+0xef>
  404926:	xor    esi,esi
  404928:	call   403070 <memset@plt>
  40492d:	jmp    404938 <flatcc_builder_reset@@Base+0xf8>
  40492f:	test   rdx,rdx
  404932:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  404938:	mov    rdi,QWORD PTR [rbx+0xc8]
  40493f:	mov    rdx,QWORD PTR [rbx+0xd0]
  404946:	test   rdi,rdi
  404949:	je     404954 <flatcc_builder_reset@@Base+0x114>
  40494b:	xor    esi,esi
  40494d:	call   403070 <memset@plt>
  404952:	jmp    40495d <flatcc_builder_reset@@Base+0x11d>
  404954:	test   rdx,rdx
  404957:	jne    4049e0 <flatcc_builder_reset@@Base+0x1a0>
  40495d:	mov    DWORD PTR [rbx+0xe0],0x0
  404967:	cmp    DWORD PTR [rbx+0xe4],0x0
  40496e:	je     40497a <flatcc_builder_reset@@Base+0x13a>
  404970:	mov    DWORD PTR [rbx+0xe4],0x10
  40497a:	mov    WORD PTR [rbx+0xe8],0x0
  404983:	mov    QWORD PTR [rbx+0xf0],0x0
  40498e:	mov    QWORD PTR [rbx+0x20],0x0
  404996:	vxorps xmm0,xmm0,xmm0
  40499a:	vmovups XMMWORD PTR [rbx+0xfc],xmm0
  4049a2:	mov    rax,QWORD PTR [rbx+0x58]
  4049a6:	mov    rcx,QWORD PTR [rbx+0x68]
  4049aa:	mov    QWORD PTR [rbx+0x18],rcx
  4049ae:	mov    rcx,QWORD PTR [rbx+0x88]
  4049b5:	mov    QWORD PTR [rbx],rcx
  4049b8:	mov    QWORD PTR [rbx+0x8],rax
  4049bc:	mov    QWORD PTR [rbx+0x30],0x0
  4049c4:	cmp    DWORD PTR [rbx+0x128],0x0
  4049cb:	je     4049dc <flatcc_builder_reset@@Base+0x19c>
  4049cd:	add    rbx,0x130
  4049d4:	mov    rdi,rbx
  4049d7:	call   408f20 <flatcc_emitter_reset@@Base>
  4049dc:	xor    eax,eax
  4049de:	pop    rbx
  4049df:	ret    
  4049e0:	lea    rdi,[rip+0x9be9]        # 40e5d0 <flatcc_builder_padding_base@@Base+0x270>
  4049e7:	lea    rsi,[rip+0x9bf4]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4049ee:	lea    rcx,[rip+0x9c4d]        # 40e642 <flatcc_builder_padding_base@@Base+0x2e2>
  4049f5:	mov    edx,0x1b2
  4049fa:	call   403060 <__assert_fail@plt>
  4049ff:	nop

0000000000404a00 <flatcc_builder_clear@@Base>:
  404a00:	push   rbx
  404a01:	mov    rbx,rdi
  404a04:	lea    rsi,[rdi+0x58]
  404a08:	mov    rdi,QWORD PTR [rdi+0x40]
  404a0c:	xor    edx,edx
  404a0e:	xor    ecx,ecx
  404a10:	xor    r8d,r8d
  404a13:	call   QWORD PTR [rbx+0x50]
  404a16:	lea    rsi,[rbx+0x68]
  404a1a:	mov    rdi,QWORD PTR [rbx+0x40]
  404a1e:	xor    edx,edx
  404a20:	xor    ecx,ecx
  404a22:	mov    r8d,0x1
  404a28:	call   QWORD PTR [rbx+0x50]
  404a2b:	lea    rsi,[rbx+0x78]
  404a2f:	mov    rdi,QWORD PTR [rbx+0x40]
  404a33:	xor    edx,edx
  404a35:	xor    ecx,ecx
  404a37:	mov    r8d,0x2
  404a3d:	call   QWORD PTR [rbx+0x50]
  404a40:	lea    rsi,[rbx+0x88]
  404a47:	mov    rdi,QWORD PTR [rbx+0x40]
  404a4b:	xor    edx,edx
  404a4d:	xor    ecx,ecx
  404a4f:	mov    r8d,0x3
  404a55:	call   QWORD PTR [rbx+0x50]
  404a58:	lea    rsi,[rbx+0x98]
  404a5f:	mov    rdi,QWORD PTR [rbx+0x40]
  404a63:	xor    edx,edx
  404a65:	xor    ecx,ecx
  404a67:	mov    r8d,0x4
  404a6d:	call   QWORD PTR [rbx+0x50]
  404a70:	lea    rsi,[rbx+0xa8]
  404a77:	mov    rdi,QWORD PTR [rbx+0x40]
  404a7b:	xor    edx,edx
  404a7d:	xor    ecx,ecx
  404a7f:	mov    r8d,0x5
  404a85:	call   QWORD PTR [rbx+0x50]
  404a88:	lea    rsi,[rbx+0xb8]
  404a8f:	mov    rdi,QWORD PTR [rbx+0x40]
  404a93:	xor    edx,edx
  404a95:	xor    ecx,ecx
  404a97:	mov    r8d,0x6
  404a9d:	call   QWORD PTR [rbx+0x50]
  404aa0:	lea    rsi,[rbx+0xc8]
  404aa7:	mov    rdi,QWORD PTR [rbx+0x40]
  404aab:	xor    edx,edx
  404aad:	xor    ecx,ecx
  404aaf:	mov    r8d,0x7
  404ab5:	call   QWORD PTR [rbx+0x50]
  404ab8:	cmp    DWORD PTR [rbx+0x128],0x0
  404abf:	je     404acd <flatcc_builder_clear@@Base+0xcd>
  404ac1:	lea    rdi,[rbx+0x130]
  404ac8:	call   409020 <flatcc_emitter_clear@@Base>
  404acd:	vxorps xmm0,xmm0,xmm0
  404ad1:	vmovups YMMWORD PTR [rbx+0x160],ymm0
  404ad9:	vmovups YMMWORD PTR [rbx+0x140],ymm0
  404ae1:	vmovups YMMWORD PTR [rbx+0x120],ymm0
  404ae9:	vmovups YMMWORD PTR [rbx+0x100],ymm0
  404af1:	vmovups YMMWORD PTR [rbx+0xe0],ymm0
  404af9:	vmovups YMMWORD PTR [rbx+0xc0],ymm0
  404b01:	vmovups YMMWORD PTR [rbx+0xa0],ymm0
  404b09:	vmovups YMMWORD PTR [rbx+0x80],ymm0
  404b11:	vmovups YMMWORD PTR [rbx+0x60],ymm0
  404b16:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  404b1b:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  404b20:	vmovups YMMWORD PTR [rbx],ymm0
  404b24:	mov    QWORD PTR [rbx+0x180],0x0
  404b2f:	pop    rbx
  404b30:	vzeroupper 
  404b33:	ret    
  404b34:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404b3e:	xchg   ax,ax

0000000000404b40 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404b40:	push   r15
  404b42:	push   r14
  404b44:	push   r12
  404b46:	push   rbx
  404b47:	push   rax
  404b48:	mov    r14,rsi
  404b4b:	mov    r15,rdi
  404b4e:	add    r14,0xf
  404b52:	and    r14,0xfffffffffffffff8
  404b56:	mov    rbx,QWORD PTR [rdi+0x180]
  404b5d:	lea    r12,[rdi+0xc8]
  404b64:	lea    rdx,[rbx+r14*1]
  404b68:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404b6f:	jbe    404b88 <flatcc_builder_enter_user_frame_ptr@@Base+0x48>
  404b71:	mov    rdi,QWORD PTR [r15+0x40]
  404b75:	mov    rsi,r12
  404b78:	xor    ecx,ecx
  404b7a:	mov    r8d,0x7
  404b80:	call   QWORD PTR [r15+0x50]
  404b84:	test   eax,eax
  404b86:	jne    404bd8 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
  404b88:	add    rbx,QWORD PTR [r12]
  404b8c:	je     404bc7 <flatcc_builder_enter_user_frame_ptr@@Base+0x87>
  404b8e:	mov    rdi,rbx
  404b91:	xor    esi,esi
  404b93:	mov    rdx,r14
  404b96:	call   403070 <memset@plt>
  404b9b:	mov    rax,QWORD PTR [r15+0x178]
  404ba2:	mov    QWORD PTR [rbx],rax
  404ba5:	add    rbx,0x8
  404ba9:	mov    rax,QWORD PTR [r15+0x180]
  404bb0:	lea    rcx,[rax+0x8]
  404bb4:	mov    QWORD PTR [r15+0x178],rcx
  404bbb:	add    rax,r14
  404bbe:	mov    QWORD PTR [r15+0x180],rax
  404bc5:	jmp    404bc9 <flatcc_builder_enter_user_frame_ptr@@Base+0x89>
  404bc7:	xor    ebx,ebx
  404bc9:	mov    rax,rbx
  404bcc:	add    rsp,0x8
  404bd0:	pop    rbx
  404bd1:	pop    r12
  404bd3:	pop    r14
  404bd5:	pop    r15
  404bd7:	ret    
  404bd8:	lea    rdi,[rip+0xabc3]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404bdf:	lea    rsi,[rip+0x99fc]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404be6:	lea    rcx,[rip+0xa9ef]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  404bed:	mov    edx,0x134
  404bf2:	call   403060 <__assert_fail@plt>
  404bf7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404c00 <flatcc_builder_enter_user_frame@@Base>:
  404c00:	push   r15
  404c02:	push   r14
  404c04:	push   r12
  404c06:	push   rbx
  404c07:	push   rax
  404c08:	mov    r14,rsi
  404c0b:	mov    rbx,rdi
  404c0e:	add    r14,0xf
  404c12:	and    r14,0xfffffffffffffff8
  404c16:	mov    r15,QWORD PTR [rdi+0x180]
  404c1d:	lea    r12,[rdi+0xc8]
  404c24:	lea    rdx,[r15+r14*1]
  404c28:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404c2f:	jbe    404c47 <flatcc_builder_enter_user_frame@@Base+0x47>
  404c31:	mov    rdi,QWORD PTR [rbx+0x40]
  404c35:	mov    rsi,r12
  404c38:	xor    ecx,ecx
  404c3a:	mov    r8d,0x7
  404c40:	call   QWORD PTR [rbx+0x50]
  404c43:	test   eax,eax
  404c45:	jne    404c90 <flatcc_builder_enter_user_frame@@Base+0x90>
  404c47:	add    r15,QWORD PTR [r12]
  404c4b:	je     404c82 <flatcc_builder_enter_user_frame@@Base+0x82>
  404c4d:	mov    rdi,r15
  404c50:	xor    esi,esi
  404c52:	mov    rdx,r14
  404c55:	call   403070 <memset@plt>
  404c5a:	mov    rax,QWORD PTR [rbx+0x178]
  404c61:	mov    QWORD PTR [r15],rax
  404c64:	mov    rcx,QWORD PTR [rbx+0x180]
  404c6b:	lea    rax,[rcx+0x8]
  404c6f:	mov    QWORD PTR [rbx+0x178],rax
  404c76:	add    rcx,r14
  404c79:	mov    QWORD PTR [rbx+0x180],rcx
  404c80:	jmp    404c84 <flatcc_builder_enter_user_frame@@Base+0x84>
  404c82:	xor    eax,eax
  404c84:	add    rsp,0x8
  404c88:	pop    rbx
  404c89:	pop    r12
  404c8b:	pop    r14
  404c8d:	pop    r15
  404c8f:	ret    
  404c90:	lea    rdi,[rip+0xab0b]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404c97:	lea    rsi,[rip+0x9944]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404c9e:	lea    rcx,[rip+0xa937]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  404ca5:	mov    edx,0x134
  404caa:	call   403060 <__assert_fail@plt>
  404caf:	nop

0000000000404cb0 <flatcc_builder_exit_user_frame@@Base>:
  404cb0:	push   rax
  404cb1:	mov    rax,QWORD PTR [rdi+0x178]
  404cb8:	test   rax,rax
  404cbb:	je     404cdf <flatcc_builder_exit_user_frame@@Base+0x2f>
  404cbd:	mov    rcx,QWORD PTR [rdi+0xc8]
  404cc4:	mov    edx,eax
  404cc6:	add    rax,0xfffffffffffffff8
  404cca:	mov    QWORD PTR [rdi+0x180],rax
  404cd1:	mov    rax,QWORD PTR [rcx+rdx*1-0x8]
  404cd6:	mov    QWORD PTR [rdi+0x178],rax
  404cdd:	pop    rcx
  404cde:	ret    
  404cdf:	lea    rdi,[rip+0x999a]        # 40e680 <flatcc_builder_padding_base@@Base+0x320>
  404ce6:	lea    rsi,[rip+0x98f5]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404ced:	lea    rcx,[rip+0x99a5]        # 40e699 <flatcc_builder_padding_base@@Base+0x339>
  404cf4:	mov    edx,0x21e
  404cf9:	call   403060 <__assert_fail@plt>
  404cfe:	xchg   ax,ax

0000000000404d00 <flatcc_builder_exit_user_frame_at@@Base>:
  404d00:	push   rax
  404d01:	cmp    QWORD PTR [rdi+0x178],rsi
  404d08:	jb     404d38 <flatcc_builder_exit_user_frame_at@@Base+0x38>
  404d0a:	mov    QWORD PTR [rdi+0x178],rsi
  404d11:	test   rsi,rsi
  404d14:	je     404d57 <flatcc_builder_exit_user_frame_at@@Base+0x57>
  404d16:	mov    rax,QWORD PTR [rdi+0xc8]
  404d1d:	mov    ecx,esi
  404d1f:	add    rsi,0xfffffffffffffff8
  404d23:	mov    QWORD PTR [rdi+0x180],rsi
  404d2a:	mov    rax,QWORD PTR [rax+rcx*1-0x8]
  404d2f:	mov    QWORD PTR [rdi+0x178],rax
  404d36:	pop    rcx
  404d37:	ret    
  404d38:	lea    rdi,[rip+0x9994]        # 40e6d3 <flatcc_builder_padding_base@@Base+0x373>
  404d3f:	lea    rsi,[rip+0x989c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404d46:	lea    rcx,[rip+0x99a5]        # 40e6f2 <flatcc_builder_padding_base@@Base+0x392>
  404d4d:	mov    edx,0x227
  404d52:	call   403060 <__assert_fail@plt>
  404d57:	lea    rdi,[rip+0x9922]        # 40e680 <flatcc_builder_padding_base@@Base+0x320>
  404d5e:	lea    rsi,[rip+0x987d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404d65:	lea    rcx,[rip+0x992d]        # 40e699 <flatcc_builder_padding_base@@Base+0x339>
  404d6c:	mov    edx,0x21e
  404d71:	call   403060 <__assert_fail@plt>
  404d76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404d80 <flatcc_builder_get_current_user_frame@@Base>:
  404d80:	mov    rax,QWORD PTR [rdi+0x178]
  404d87:	ret    
  404d88:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404d90 <flatcc_builder_get_user_frame_ptr@@Base>:
  404d90:	mov    eax,esi
  404d92:	add    rax,QWORD PTR [rdi+0xc8]
  404d99:	ret    
  404d9a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404da0 <flatcc_builder_embed_buffer@@Base>:
  404da0:	push   rbp
  404da1:	push   r15
  404da3:	push   r14
  404da5:	push   r12
  404da7:	push   rbx
  404da8:	sub    rsp,0xa0
  404daf:	mov    ebx,r9d
  404db2:	mov    rbp,rcx
  404db5:	mov    r15,rdx
  404db8:	mov    edx,esi
  404dba:	mov    r12,rdi
  404dbd:	mov    WORD PTR [rsp+0xa],r8w
  404dc3:	xor    ecx,ecx
  404dc5:	cmp    DWORD PTR [rdi+0x100],0x0
  404dcc:	setne  cl
  404dcf:	lea    rsi,[rsp+0xa]
  404dd4:	call   404f40 <flatcc_builder_embed_buffer@@Base+0x1a0>
  404dd9:	and    ebx,0x2
  404ddc:	movzx  eax,WORD PTR [rsp+0xa]
  404de1:	mov    r14d,DWORD PTR [r12+0xf0]
  404de9:	lea    ecx,[rbp+rbx*2+0x0]
  404ded:	mov    edx,r14d
  404df0:	sub    edx,ecx
  404df2:	dec    eax
  404df4:	and    eax,edx
  404df6:	lea    ecx,[rax+rbp*1]
  404df9:	mov    DWORD PTR [rsp+0xc],ecx
  404dfd:	mov    QWORD PTR [rsp+0x10],0x0
  404e06:	mov    DWORD PTR [rsp+0x18],0x0
  404e0e:	cmp    DWORD PTR [r12+0x100],0x0
  404e17:	je     404ee9 <flatcc_builder_embed_buffer@@Base+0x149>
  404e1d:	mov    QWORD PTR [rsp+0x10],0x4
  404e26:	lea    rcx,[rsp+0xc]
  404e2b:	mov    QWORD PTR [rsp+0x20],rcx
  404e30:	mov    QWORD PTR [rsp+0x28],0x4
  404e39:	mov    DWORD PTR [rsp+0x18],0x1
  404e41:	mov    r8d,0x4
  404e47:	mov    edx,0x1
  404e4c:	test   rbp,rbp
  404e4f:	je     404e6f <flatcc_builder_embed_buffer@@Base+0xcf>
  404e51:	add    r8,rbp
  404e54:	mov    QWORD PTR [rsp+0x10],r8
  404e59:	mov    ecx,edx
  404e5b:	shl    rcx,0x4
  404e5f:	mov    QWORD PTR [rsp+rcx*1+0x20],r15
  404e64:	mov    QWORD PTR [rsp+rcx*1+0x28],rbp
  404e69:	inc    edx
  404e6b:	mov    DWORD PTR [rsp+0x18],edx
  404e6f:	test   eax,eax
  404e71:	je     404e9a <flatcc_builder_embed_buffer@@Base+0xfa>
  404e73:	mov    eax,eax
  404e75:	add    r8,rax
  404e78:	mov    QWORD PTR [rsp+0x10],r8
  404e7d:	mov    ecx,edx
  404e7f:	shl    rcx,0x4
  404e83:	lea    rsi,[rip+0x94d6]        # 40e360 <flatcc_builder_padding_base@@Base>
  404e8a:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  404e8f:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  404e94:	inc    edx
  404e96:	mov    DWORD PTR [rsp+0x18],edx
  404e9a:	cmp    r8,0x11
  404e9e:	setb   al
  404ea1:	lea    rcx,[r8-0x10]
  404ea5:	shr    rcx,0x20
  404ea9:	sete   cl
  404eac:	test   r8d,r8d
  404eaf:	jle    404efc <flatcc_builder_embed_buffer@@Base+0x15c>
  404eb1:	or     al,cl
  404eb3:	je     404efc <flatcc_builder_embed_buffer@@Base+0x15c>
  404eb5:	sub    r14d,r8d
  404eb8:	mov    rdi,QWORD PTR [r12+0x38]
  404ebd:	lea    rsi,[rsp+0x20]
  404ec2:	mov    ecx,r14d
  404ec5:	call   QWORD PTR [r12+0x48]
  404eca:	test   eax,eax
  404ecc:	jne    404f1b <flatcc_builder_embed_buffer@@Base+0x17b>
  404ece:	mov    DWORD PTR [r12+0xf0],r14d
  404ed6:	mov    eax,r14d
  404ed9:	add    rsp,0xa0
  404ee0:	pop    rbx
  404ee1:	pop    r12
  404ee3:	pop    r14
  404ee5:	pop    r15
  404ee7:	pop    rbp
  404ee8:	ret    
  404ee9:	xor    edx,edx
  404eeb:	xor    r8d,r8d
  404eee:	test   rbp,rbp
  404ef1:	jne    404e51 <flatcc_builder_embed_buffer@@Base+0xb1>
  404ef7:	jmp    404e6f <flatcc_builder_embed_buffer@@Base+0xcf>
  404efc:	lea    rdi,[rip+0xa89f]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404f03:	lea    rsi,[rip+0x96d8]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404f0a:	lea    rcx,[rip+0xa750]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  404f11:	mov    edx,0x287
  404f16:	call   403060 <__assert_fail@plt>
  404f1b:	lea    rdi,[rip+0xa880]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404f22:	lea    rsi,[rip+0x96b9]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404f29:	lea    rcx,[rip+0xa731]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  404f30:	mov    edx,0x28b
  404f35:	call   403060 <__assert_fail@plt>
  404f3a:	nop    WORD PTR [rax+rax*1+0x0]
  404f40:	push   rbx
  404f41:	sub    rsp,0x90
  404f48:	mov    rax,rdi
  404f4b:	test   dx,dx
  404f4e:	jne    404f61 <flatcc_builder_embed_buffer@@Base+0x1c1>
  404f50:	mov    edi,DWORD PTR [rax+0xec]
  404f56:	test   di,di
  404f59:	mov    edx,0x1
  404f5e:	cmovne edx,edi
  404f61:	movzx  ebx,WORD PTR [rsi]
  404f64:	mov    edi,0x4
  404f69:	cmp    bx,0x4
  404f6d:	cmovae edi,ebx
  404f70:	jb     404f7d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404f72:	cmp    di,dx
  404f75:	jb     404f7d <flatcc_builder_embed_buffer@@Base+0x1dd>
  404f77:	test   ecx,ecx
  404f79:	jne    404fe4 <flatcc_builder_embed_buffer@@Base+0x244>
  404f7b:	jmp    404f8a <flatcc_builder_embed_buffer@@Base+0x1ea>
  404f7d:	cmp    di,dx
  404f80:	cmovb  edi,edx
  404f83:	mov    WORD PTR [rsi],di
  404f86:	test   ecx,ecx
  404f88:	jne    404fe4 <flatcc_builder_embed_buffer@@Base+0x244>
  404f8a:	mov    ebx,DWORD PTR [rax+0xf4]
  404f90:	movzx  r8d,dx
  404f94:	dec    r8d
  404f97:	and    r8d,ebx
  404f9a:	je     404fe4 <flatcc_builder_embed_buffer@@Base+0x244>
  404f9c:	mov    QWORD PTR [rsp],r8
  404fa0:	lea    rcx,[rip+0x93b9]        # 40e360 <flatcc_builder_padding_base@@Base>
  404fa7:	mov    QWORD PTR [rsp+0x10],rcx
  404fac:	mov    QWORD PTR [rsp+0x18],r8
  404fb1:	mov    DWORD PTR [rsp+0x8],0x1
  404fb9:	lea    ecx,[r8+rbx*1]
  404fbd:	mov    DWORD PTR [rax+0xf4],ecx
  404fc3:	test   r8d,r8d
  404fc6:	js     404fed <flatcc_builder_embed_buffer@@Base+0x24d>
  404fc8:	mov    rdi,QWORD PTR [rax+0x38]
  404fcc:	lea    rsi,[rsp+0x10]
  404fd1:	mov    edx,0x1
  404fd6:	mov    ecx,ebx
  404fd8:	call   QWORD PTR [rax+0x48]
  404fdb:	test   eax,eax
  404fdd:	jne    40500c <flatcc_builder_embed_buffer@@Base+0x26c>
  404fdf:	cmp    ebx,0xffffffff
  404fe2:	je     40502b <flatcc_builder_embed_buffer@@Base+0x28b>
  404fe4:	add    rsp,0x90
  404feb:	pop    rbx
  404fec:	ret    
  404fed:	lea    rdi,[rip+0xa7ae]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  404ff4:	lea    rsi,[rip+0x95e7]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  404ffb:	lea    rcx,[rip+0xa71b]        # 40f71d <flatcc_builder_padding_base@@Base+0x13bd>
  405002:	mov    edx,0x2a1
  405007:	call   403060 <__assert_fail@plt>
  40500c:	lea    rdi,[rip+0xa78f]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  405013:	lea    rsi,[rip+0x95c8]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40501a:	lea    rcx,[rip+0xa6fc]        # 40f71d <flatcc_builder_padding_base@@Base+0x13bd>
  405021:	mov    edx,0x2a5
  405026:	call   403060 <__assert_fail@plt>
  40502b:	lea    rdi,[rip+0xa770]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  405032:	lea    rsi,[rip+0x95a9]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405039:	lea    rcx,[rip+0xa5df]        # 40f61f <flatcc_builder_padding_base@@Base+0x12bf>
  405040:	mov    edx,0x2be
  405045:	call   403060 <__assert_fail@plt>
  40504a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405050 <flatcc_builder_create_buffer@@Base>:
  405050:	push   rbp
  405051:	push   r15
  405053:	push   r14
  405055:	push   r13
  405057:	push   r12
  405059:	push   rbx
  40505a:	sub    rsp,0xa8
  405061:	mov    r12d,r9d
  405064:	mov    r14d,ecx
  405067:	mov    rbp,rsi
  40506a:	mov    r13,rdi
  40506d:	mov    WORD PTR [rsp+0xa],r8w
  405073:	mov    DWORD PTR [rsp+0xc],0x0
  40507b:	mov    r15d,r9d
  40507e:	and    r15d,0x1
  405082:	lea    rsi,[rsp+0xa]
  405087:	mov    ecx,r15d
  40508a:	call   404f40 <flatcc_builder_embed_buffer@@Base+0x1a0>
  40508f:	movzx  eax,WORD PTR [rsp+0xa]
  405094:	cmp    WORD PTR [r13+0xe8],ax
  40509c:	jae    4050a6 <flatcc_builder_create_buffer@@Base+0x56>
  40509e:	mov    WORD PTR [r13+0xe8],ax
  4050a6:	movzx  edx,ax
  4050a9:	xor    eax,eax
  4050ab:	test   rbp,rbp
  4050ae:	je     4050c8 <flatcc_builder_create_buffer@@Base+0x78>
  4050b0:	mov    ecx,DWORD PTR [rbp+0x0]
  4050b3:	mov    DWORD PTR [rsp+0xc],ecx
  4050b7:	xor    edi,edi
  4050b9:	test   ecx,ecx
  4050bb:	setne  dil
  4050bf:	mov    rsi,rdi
  4050c2:	shl    rsi,0x2
  4050c6:	jmp    4050cc <flatcc_builder_create_buffer@@Base+0x7c>
  4050c8:	xor    edi,edi
  4050ca:	xor    esi,esi
  4050cc:	lea    ebx,[r12+r12*1]
  4050d0:	and    ebx,0x4
  4050d3:	mov    ebp,DWORD PTR [r13+0xf0]
  4050da:	mov    ecx,ebp
  4050dc:	sub    ecx,ebx
  4050de:	sub    ecx,esi
  4050e0:	add    ecx,0xfffffffc
  4050e3:	dec    edx
  4050e5:	mov    QWORD PTR [rsp+0x18],0x0
  4050ee:	mov    DWORD PTR [rsp+0x20],0x0
  4050f6:	test   r12b,0x3
  4050fa:	je     40512d <flatcc_builder_create_buffer@@Base+0xdd>
  4050fc:	mov    QWORD PTR [rsp+0x18],0x4
  405105:	lea    rax,[rsp+0x10]
  40510a:	mov    QWORD PTR [rsp+0x28],rax
  40510f:	mov    QWORD PTR [rsp+0x30],0x4
  405118:	mov    DWORD PTR [rsp+0x20],0x1
  405120:	mov    r8d,0x8
  405126:	mov    eax,0x1
  40512b:	jmp    405133 <flatcc_builder_create_buffer@@Base+0xe3>
  40512d:	mov    r8d,0x4
  405133:	and    ecx,edx
  405135:	mov    QWORD PTR [rsp+0x18],r8
  40513a:	mov    edx,eax
  40513c:	shl    rdx,0x4
  405140:	lea    rbx,[rsp+0x14]
  405145:	mov    QWORD PTR [rsp+rdx*1+0x28],rbx
  40514a:	mov    QWORD PTR [rsp+rdx*1+0x30],0x4
  405153:	lea    edx,[rax+0x1]
  405156:	mov    DWORD PTR [rsp+0x20],edx
  40515a:	test   dil,dil
  40515d:	je     405185 <flatcc_builder_create_buffer@@Base+0x135>
  40515f:	add    r8,rsi
  405162:	mov    QWORD PTR [rsp+0x18],r8
  405167:	mov    edx,edx
  405169:	shl    rdx,0x4
  40516d:	lea    rdi,[rsp+0xc]
  405172:	mov    QWORD PTR [rsp+rdx*1+0x28],rdi
  405177:	mov    QWORD PTR [rsp+rdx*1+0x30],rsi
  40517c:	or     eax,0x2
  40517f:	mov    DWORD PTR [rsp+0x20],eax
  405183:	mov    edx,eax
  405185:	test   ecx,ecx
  405187:	je     4051b0 <flatcc_builder_create_buffer@@Base+0x160>
  405189:	mov    eax,ecx
  40518b:	add    r8,rax
  40518e:	mov    QWORD PTR [rsp+0x18],r8
  405193:	mov    ecx,edx
  405195:	shl    rcx,0x4
  405199:	lea    rsi,[rip+0x91c0]        # 40e360 <flatcc_builder_padding_base@@Base>
  4051a0:	mov    QWORD PTR [rsp+rcx*1+0x28],rsi
  4051a5:	mov    QWORD PTR [rsp+rcx*1+0x30],rax
  4051aa:	inc    edx
  4051ac:	mov    DWORD PTR [rsp+0x20],edx
  4051b0:	xor    eax,eax
  4051b2:	test   r12b,0x3
  4051b6:	setne  al
  4051b9:	sub    ebp,r8d
  4051bc:	lea    eax,[rbp+rax*4+0x0]
  4051c0:	mov    ecx,r15d
  4051c3:	mov    ecx,DWORD PTR [r13+rcx*4+0xf4]
  4051cb:	sub    ecx,eax
  4051cd:	mov    DWORD PTR [rsp+0x10],ecx
  4051d1:	sub    r14d,eax
  4051d4:	mov    DWORD PTR [rsp+0x14],r14d
  4051d9:	cmp    r8,0x11
  4051dd:	setb   al
  4051e0:	lea    rcx,[r8-0x10]
  4051e4:	shr    rcx,0x20
  4051e8:	sete   cl
  4051eb:	test   r8d,r8d
  4051ee:	jle    405226 <flatcc_builder_create_buffer@@Base+0x1d6>
  4051f0:	or     al,cl
  4051f2:	je     405226 <flatcc_builder_create_buffer@@Base+0x1d6>
  4051f4:	mov    rdi,QWORD PTR [r13+0x38]
  4051f8:	lea    rsi,[rsp+0x28]
  4051fd:	mov    ecx,ebp
  4051ff:	call   QWORD PTR [r13+0x48]
  405203:	test   eax,eax
  405205:	jne    405245 <flatcc_builder_create_buffer@@Base+0x1f5>
  405207:	mov    DWORD PTR [r13+0xf0],ebp
  40520e:	test   ebp,ebp
  405210:	je     405264 <flatcc_builder_create_buffer@@Base+0x214>
  405212:	mov    eax,ebp
  405214:	add    rsp,0xa8
  40521b:	pop    rbx
  40521c:	pop    r12
  40521e:	pop    r13
  405220:	pop    r14
  405222:	pop    r15
  405224:	pop    rbp
  405225:	ret    
  405226:	lea    rdi,[rip+0xa575]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40522d:	lea    rsi,[rip+0x93ae]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405234:	lea    rcx,[rip+0xa426]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40523b:	mov    edx,0x287
  405240:	call   403060 <__assert_fail@plt>
  405245:	lea    rdi,[rip+0xa556]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40524c:	lea    rsi,[rip+0x938f]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405253:	lea    rcx,[rip+0xa407]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40525a:	mov    edx,0x28b
  40525f:	call   403060 <__assert_fail@plt>
  405264:	lea    rdi,[rip+0xa537]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40526b:	lea    rsi,[rip+0x9370]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405272:	lea    rcx,[rip+0x94be]        # 40e737 <flatcc_builder_padding_base@@Base+0x3d7>
  405279:	mov    edx,0x304
  40527e:	call   403060 <__assert_fail@plt>
  405283:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40528d:	nop    DWORD PTR [rax]

0000000000405290 <flatcc_builder_create_struct@@Base>:
  405290:	push   rbp
  405291:	push   rbx
  405292:	sub    rsp,0x98
  405299:	test   cx,cx
  40529c:	je     405392 <flatcc_builder_create_struct@@Base+0x102>
  4052a2:	mov    r8,rdx
  4052a5:	mov    rbx,rdi
  4052a8:	cmp    WORD PTR [rdi+0xe8],cx
  4052af:	jae    4052b8 <flatcc_builder_create_struct@@Base+0x28>
  4052b1:	mov    WORD PTR [rbx+0xe8],cx
  4052b8:	mov    ebp,DWORD PTR [rbx+0xf0]
  4052be:	mov    edx,ebp
  4052c0:	sub    edx,r8d
  4052c3:	movzx  eax,cx
  4052c6:	dec    eax
  4052c8:	and    eax,edx
  4052ca:	mov    QWORD PTR [rsp+0x8],0x0
  4052d3:	mov    DWORD PTR [rsp+0x10],0x0
  4052db:	test   r8,r8
  4052de:	je     40536b <flatcc_builder_create_struct@@Base+0xdb>
  4052e4:	mov    QWORD PTR [rsp+0x8],r8
  4052e9:	mov    QWORD PTR [rsp+0x18],rsi
  4052ee:	mov    QWORD PTR [rsp+0x20],r8
  4052f3:	mov    DWORD PTR [rsp+0x10],0x1
  4052fb:	mov    edx,0x1
  405300:	test   eax,eax
  405302:	je     405329 <flatcc_builder_create_struct@@Base+0x99>
  405304:	add    r8,rax
  405307:	mov    QWORD PTR [rsp+0x8],r8
  40530c:	mov    ecx,edx
  40530e:	shl    rcx,0x4
  405312:	lea    rsi,[rip+0x9047]        # 40e360 <flatcc_builder_padding_base@@Base>
  405319:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  40531e:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  405323:	inc    edx
  405325:	mov    DWORD PTR [rsp+0x10],edx
  405329:	cmp    r8,0x11
  40532d:	setb   al
  405330:	lea    rcx,[r8-0x10]
  405334:	shr    rcx,0x20
  405338:	sete   cl
  40533b:	test   r8d,r8d
  40533e:	jle    405373 <flatcc_builder_create_struct@@Base+0xe3>
  405340:	or     al,cl
  405342:	je     405373 <flatcc_builder_create_struct@@Base+0xe3>
  405344:	sub    ebp,r8d
  405347:	mov    rdi,QWORD PTR [rbx+0x38]
  40534b:	lea    rsi,[rsp+0x18]
  405350:	mov    ecx,ebp
  405352:	call   QWORD PTR [rbx+0x48]
  405355:	test   eax,eax
  405357:	jne    4053b1 <flatcc_builder_create_struct@@Base+0x121>
  405359:	mov    DWORD PTR [rbx+0xf0],ebp
  40535f:	mov    eax,ebp
  405361:	add    rsp,0x98
  405368:	pop    rbx
  405369:	pop    rbp
  40536a:	ret    
  40536b:	xor    edx,edx
  40536d:	test   eax,eax
  40536f:	jne    405304 <flatcc_builder_create_struct@@Base+0x74>
  405371:	jmp    405329 <flatcc_builder_create_struct@@Base+0x99>
  405373:	lea    rdi,[rip+0xa428]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40537a:	lea    rsi,[rip+0x9261]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405381:	lea    rcx,[rip+0xa2d9]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  405388:	mov    edx,0x287
  40538d:	call   403060 <__assert_fail@plt>
  405392:	lea    rdi,[rip+0x9421]        # 40e7ba <flatcc_builder_padding_base@@Base+0x45a>
  405399:	lea    rsi,[rip+0x9242]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4053a0:	lea    rcx,[rip+0x941e]        # 40e7c5 <flatcc_builder_padding_base@@Base+0x465>
  4053a7:	mov    edx,0x30f
  4053ac:	call   403060 <__assert_fail@plt>
  4053b1:	lea    rdi,[rip+0xa3ea]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4053b8:	lea    rsi,[rip+0x9223]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4053bf:	lea    rcx,[rip+0xa29b]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4053c6:	mov    edx,0x28b
  4053cb:	call   403060 <__assert_fail@plt>

00000000004053d0 <flatcc_builder_start_buffer@@Base>:
  4053d0:	push   rbp
  4053d1:	push   r15
  4053d3:	push   r14
  4053d5:	push   rbx
  4053d6:	push   rax
  4053d7:	mov    r15d,ecx
  4053da:	mov    ebp,edx
  4053dc:	mov    r14,rsi
  4053df:	mov    rbx,rdi
  4053e2:	movzx  esi,WORD PTR [rdi+0xe8]
  4053e9:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  4053ee:	mov    ecx,eax
  4053f0:	mov    eax,0xffffffff
  4053f5:	test   ecx,ecx
  4053f7:	jne    40549c <flatcc_builder_start_buffer@@Base+0xcc>
  4053fd:	mov    WORD PTR [rbx+0xe8],0x1
  405406:	movzx  eax,WORD PTR [rbx+0xec]
  40540d:	mov    rcx,QWORD PTR [rbx+0x30]
  405411:	mov    WORD PTR [rcx+0x22],ax
  405415:	mov    WORD PTR [rbx+0xec],bp
  40541c:	movzx  eax,WORD PTR [rbx+0x10c]
  405423:	mov    rcx,QWORD PTR [rbx+0x30]
  405427:	mov    WORD PTR [rcx+0x20],ax
  40542b:	mov    WORD PTR [rbx+0x10c],r15w
  405433:	mov    eax,DWORD PTR [rbx+0xf8]
  405439:	mov    rcx,QWORD PTR [rbx+0x30]
  40543d:	mov    DWORD PTR [rcx+0x14],eax
  405440:	mov    eax,DWORD PTR [rbx+0x100]
  405446:	mov    rcx,QWORD PTR [rbx+0x30]
  40544a:	mov    DWORD PTR [rcx+0x1c],eax
  40544d:	mov    eax,DWORD PTR [rbx+0xf0]
  405453:	mov    DWORD PTR [rbx+0xf8],eax
  405459:	mov    eax,DWORD PTR [rbx+0xfc]
  40545f:	lea    ecx,[rax+0x1]
  405462:	mov    DWORD PTR [rbx+0xfc],ecx
  405468:	mov    DWORD PTR [rbx+0x100],eax
  40546e:	mov    eax,DWORD PTR [rbx+0x110]
  405474:	mov    rcx,QWORD PTR [rbx+0x30]
  405478:	mov    DWORD PTR [rcx+0x10],eax
  40547b:	test   r14,r14
  40547e:	jne    405487 <flatcc_builder_start_buffer@@Base+0xb7>
  405480:	lea    r14,[rip+0x8ed9]        # 40e360 <flatcc_builder_padding_base@@Base>
  405487:	mov    eax,DWORD PTR [r14]
  40548a:	mov    DWORD PTR [rbx+0x110],eax
  405490:	mov    rax,QWORD PTR [rbx+0x30]
  405494:	mov    WORD PTR [rax+0xe],0x1
  40549a:	xor    eax,eax
  40549c:	add    rsp,0x8
  4054a0:	pop    rbx
  4054a1:	pop    r14
  4054a3:	pop    r15
  4054a5:	pop    rbp
  4054a6:	ret    
  4054a7:	nop    WORD PTR [rax+rax*1+0x0]
  4054b0:	push   rbp
  4054b1:	push   r15
  4054b3:	push   r14
  4054b5:	push   rbx
  4054b6:	push   rax
  4054b7:	mov    r14d,esi
  4054ba:	mov    rbx,rdi
  4054bd:	movsxd rbp,DWORD PTR [rdi+0x104]
  4054c4:	lea    eax,[rbp+0x1]
  4054c7:	mov    DWORD PTR [rdi+0x104],eax
  4054cd:	cmp    ebp,DWORD PTR [rdi+0x108]
  4054d3:	jge    4054e6 <flatcc_builder_start_buffer@@Base+0x116>
  4054d5:	mov    rcx,QWORD PTR [rbx+0x30]
  4054d9:	add    rcx,0x24
  4054dd:	mov    QWORD PTR [rbx+0x30],rcx
  4054e1:	jmp    405579 <flatcc_builder_start_buffer@@Base+0x1a9>
  4054e6:	mov    eax,DWORD PTR [rbx+0x120]
  4054ec:	mov    r15d,0xffffffff
  4054f2:	test   eax,eax
  4054f4:	jle    4054fe <flatcc_builder_start_buffer@@Base+0x12e>
  4054f6:	cmp    ebp,eax
  4054f8:	jge    4055b4 <flatcc_builder_start_buffer@@Base+0x1e4>
  4054fe:	shl    rbp,0x2
  405502:	lea    rdx,[rbp*8+0x24]
  40550a:	add    rdx,rbp
  40550d:	cmp    rdx,QWORD PTR [rbx+0xa0]
  405514:	jbe    405534 <flatcc_builder_start_buffer@@Base+0x164>
  405516:	lea    rsi,[rbx+0x98]
  40551d:	mov    rdi,QWORD PTR [rbx+0x40]
  405521:	xor    ecx,ecx
  405523:	mov    r8d,0x4
  405529:	call   QWORD PTR [rbx+0x50]
  40552c:	test   eax,eax
  40552e:	jne    4055c2 <flatcc_builder_start_buffer@@Base+0x1f2>
  405534:	lea    rcx,[rbp*8+0x0]
  40553c:	add    rcx,rbp
  40553f:	add    rcx,QWORD PTR [rbx+0x98]
  405546:	mov    QWORD PTR [rbx+0x30],rcx
  40554a:	je     4055b4 <flatcc_builder_start_buffer@@Base+0x1e4>
  40554c:	movabs rax,0xe38e38e38e38e38f
  405556:	mul    QWORD PTR [rbx+0xa0]
  40555d:	shr    rdx,0x5
  405561:	mov    eax,DWORD PTR [rbx+0x120]
  405567:	cmp    eax,edx
  405569:	mov    esi,edx
  40556b:	cmovle esi,eax
  40556e:	test   eax,eax
  405570:	cmovle esi,edx
  405573:	mov    DWORD PTR [rbx+0x108],esi
  405579:	mov    eax,DWORD PTR [rbx+0x20]
  40557c:	mov    DWORD PTR [rcx+0x8],eax
  40557f:	movzx  edx,WORD PTR [rbx+0xea]
  405586:	mov    WORD PTR [rcx+0xc],dx
  40558a:	mov    WORD PTR [rbx+0xea],r14w
  405592:	mov    edx,DWORD PTR [rbx+0x28]
  405595:	mov    DWORD PTR [rcx],edx
  405597:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  40559e:	lea    eax,[rax+rdx*1]
  4055a1:	add    eax,0x7
  4055a4:	and    eax,0xfffffff8
  4055a7:	mov    DWORD PTR [rbx+0x28],eax
  4055aa:	mov    DWORD PTR [rbx+0x20],0x0
  4055b1:	xor    r15d,r15d
  4055b4:	mov    eax,r15d
  4055b7:	add    rsp,0x8
  4055bb:	pop    rbx
  4055bc:	pop    r14
  4055be:	pop    r15
  4055c0:	pop    rbp
  4055c1:	ret    
  4055c2:	lea    rdi,[rip+0xa1d9]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4055c9:	lea    rsi,[rip+0x9012]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4055d0:	lea    rcx,[rip+0xa005]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  4055d7:	mov    edx,0x134
  4055dc:	call   403060 <__assert_fail@plt>
  4055e1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4055eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004055f0 <flatcc_builder_end_buffer@@Base>:
  4055f0:	push   rbp
  4055f1:	push   rbx
  4055f2:	push   rax
  4055f3:	mov    rax,QWORD PTR [rdi+0x30]
  4055f7:	cmp    WORD PTR [rax+0xe],0x1
  4055fc:	jne    4056f9 <flatcc_builder_end_buffer@@Base+0x109>
  405602:	mov    ecx,esi
  405604:	mov    rbx,rdi
  405607:	movzx  eax,WORD PTR [rdi+0x10c]
  40560e:	and    eax,0x2
  405611:	xor    r9d,r9d
  405614:	cmp    DWORD PTR [rdi+0x100],0x0
  40561b:	setne  r9b
  40561f:	or     r9d,eax
  405622:	movzx  edi,WORD PTR [rdi+0xe8]
  405629:	movzx  eax,WORD PTR [rbx+0xec]
  405630:	cmp    di,ax
  405633:	jae    40563e <flatcc_builder_end_buffer@@Base+0x4e>
  405635:	mov    WORD PTR [rbx+0xe8],ax
  40563c:	mov    edi,eax
  40563e:	lea    rsi,[rbx+0x110]
  405645:	movzx  edx,ax
  405648:	movzx  r8d,di
  40564c:	mov    rdi,rbx
  40564f:	call   405050 <flatcc_builder_create_buffer@@Base>
  405654:	mov    ebp,eax
  405656:	test   eax,eax
  405658:	je     4056f0 <flatcc_builder_end_buffer@@Base+0x100>
  40565e:	mov    rax,QWORD PTR [rbx+0x30]
  405662:	mov    ecx,DWORD PTR [rax+0x14]
  405665:	mov    DWORD PTR [rbx+0xf8],ecx
  40566b:	mov    ecx,DWORD PTR [rax+0x1c]
  40566e:	mov    DWORD PTR [rbx+0x100],ecx
  405674:	mov    ecx,DWORD PTR [rax+0x10]
  405677:	mov    DWORD PTR [rbx+0x110],ecx
  40567d:	movzx  eax,WORD PTR [rax+0x20]
  405681:	mov    WORD PTR [rbx+0x10c],ax
  405688:	mov    rdi,QWORD PTR [rbx+0x18]
  40568c:	mov    edx,DWORD PTR [rbx+0x20]
  40568f:	xor    esi,esi
  405691:	call   403070 <memset@plt>
  405696:	mov    rax,QWORD PTR [rbx+0x30]
  40569a:	mov    ecx,DWORD PTR [rax+0x8]
  40569d:	mov    DWORD PTR [rbx+0x20],ecx
  4056a0:	mov    ecx,DWORD PTR [rax]
  4056a2:	mov    DWORD PTR [rbx+0x28],ecx
  4056a5:	mov    edx,DWORD PTR [rax+0x4]
  4056a8:	mov    rsi,rcx
  4056ab:	add    rsi,QWORD PTR [rbx+0x68]
  4056af:	mov    QWORD PTR [rbx+0x18],rsi
  4056b3:	mov    esi,DWORD PTR [rbx+0x70]
  4056b6:	sub    esi,ecx
  4056b8:	cmp    esi,edx
  4056ba:	cmova  esi,edx
  4056bd:	mov    DWORD PTR [rbx+0x24],esi
  4056c0:	movzx  ecx,WORD PTR [rbx+0xea]
  4056c7:	cmp    WORD PTR [rbx+0xe8],cx
  4056ce:	jae    4056d7 <flatcc_builder_end_buffer@@Base+0xe7>
  4056d0:	mov    WORD PTR [rbx+0xe8],cx
  4056d7:	movzx  ecx,WORD PTR [rax+0xc]
  4056db:	mov    WORD PTR [rbx+0xea],cx
  4056e2:	add    rax,0xffffffffffffffdc
  4056e6:	mov    QWORD PTR [rbx+0x30],rax
  4056ea:	dec    DWORD PTR [rbx+0x104]
  4056f0:	mov    eax,ebp
  4056f2:	add    rsp,0x8
  4056f6:	pop    rbx
  4056f7:	pop    rbp
  4056f8:	ret    
  4056f9:	lea    rdi,[rip+0x912b]        # 40e82b <flatcc_builder_padding_base@@Base+0x4cb>
  405700:	lea    rsi,[rip+0x8edb]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405707:	lea    rcx,[rip+0x9149]        # 40e857 <flatcc_builder_padding_base@@Base+0x4f7>
  40570e:	mov    edx,0x346
  405713:	call   403060 <__assert_fail@plt>
  405718:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405720 <flatcc_builder_start_struct@@Base>:
  405720:	push   r15
  405722:	push   r14
  405724:	push   rbx
  405725:	mov    r14,rsi
  405728:	mov    rbx,rdi
  40572b:	mov    esi,edx
  40572d:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  405732:	test   eax,eax
  405734:	je     40573d <flatcc_builder_start_struct@@Base+0x1d>
  405736:	xor    eax,eax
  405738:	jmp    4057d1 <flatcc_builder_start_struct@@Base+0xb1>
  40573d:	mov    rdx,QWORD PTR [rbx+0x30]
  405741:	mov    WORD PTR [rdx+0xe],0x2
  405747:	mov    ecx,DWORD PTR [rbx+0x28]
  40574a:	mov    esi,DWORD PTR [rbx+0x70]
  40574d:	mov    rax,QWORD PTR [rbx+0x68]
  405751:	add    rax,rcx
  405754:	mov    QWORD PTR [rbx+0x18],rax
  405758:	sub    esi,ecx
  40575a:	cmp    esi,0xfffffffc
  40575d:	mov    edi,0xfffffffc
  405762:	cmovb  edi,esi
  405765:	mov    DWORD PTR [rbx+0x24],edi
  405768:	mov    DWORD PTR [rdx+0x4],0xfffffffc
  40576f:	mov    r15d,DWORD PTR [rbx+0x20]
  405773:	add    r14d,r15d
  405776:	mov    DWORD PTR [rbx+0x20],r14d
  40577a:	cmp    r14d,edi
  40577d:	jb     4057ce <flatcc_builder_start_struct@@Base+0xae>
  40577f:	inc    r14d
  405782:	lea    rsi,[rbx+0x68]
  405786:	mov    rdi,QWORD PTR [rbx+0x40]
  40578a:	add    r14,rcx
  40578d:	mov    rdx,r14
  405790:	mov    ecx,0x1
  405795:	mov    r8d,0x1
  40579b:	call   QWORD PTR [rbx+0x50]
  40579e:	test   eax,eax
  4057a0:	jne    405736 <flatcc_builder_start_struct@@Base+0x16>
  4057a2:	mov    ecx,DWORD PTR [rbx+0x28]
  4057a5:	mov    rax,rcx
  4057a8:	add    rax,QWORD PTR [rbx+0x68]
  4057ac:	mov    QWORD PTR [rbx+0x18],rax
  4057b0:	mov    edx,DWORD PTR [rbx+0x70]
  4057b3:	sub    edx,ecx
  4057b5:	cmp    edx,0xfffffffc
  4057b8:	mov    ecx,0xfffffffc
  4057bd:	cmovb  ecx,edx
  4057c0:	mov    DWORD PTR [rbx+0x24],ecx
  4057c3:	mov    rcx,QWORD PTR [rbx+0x30]
  4057c7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4057ce:	add    rax,r15
  4057d1:	pop    rbx
  4057d2:	pop    r14
  4057d4:	pop    r15
  4057d6:	ret    
  4057d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004057e0 <flatcc_builder_struct_edit@@Base>:
  4057e0:	mov    rax,QWORD PTR [rdi+0x18]
  4057e4:	ret    
  4057e5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4057ef:	nop

00000000004057f0 <flatcc_builder_end_struct@@Base>:
  4057f0:	push   rbp
  4057f1:	push   rbx
  4057f2:	push   rax
  4057f3:	mov    rax,QWORD PTR [rdi+0x30]
  4057f7:	cmp    WORD PTR [rax+0xe],0x2
  4057fc:	jne    40588f <flatcc_builder_end_struct@@Base+0x9f>
  405802:	mov    rbx,rdi
  405805:	mov    rsi,QWORD PTR [rdi+0x18]
  405809:	mov    edx,DWORD PTR [rdi+0x20]
  40580c:	movzx  ecx,WORD PTR [rdi+0xea]
  405813:	call   405290 <flatcc_builder_create_struct@@Base>
  405818:	mov    ebp,eax
  40581a:	test   eax,eax
  40581c:	je     405886 <flatcc_builder_end_struct@@Base+0x96>
  40581e:	mov    rdi,QWORD PTR [rbx+0x18]
  405822:	mov    edx,DWORD PTR [rbx+0x20]
  405825:	xor    esi,esi
  405827:	call   403070 <memset@plt>
  40582c:	mov    rax,QWORD PTR [rbx+0x30]
  405830:	mov    ecx,DWORD PTR [rax+0x8]
  405833:	mov    DWORD PTR [rbx+0x20],ecx
  405836:	mov    ecx,DWORD PTR [rax]
  405838:	mov    DWORD PTR [rbx+0x28],ecx
  40583b:	mov    edx,DWORD PTR [rax+0x4]
  40583e:	mov    rsi,rcx
  405841:	add    rsi,QWORD PTR [rbx+0x68]
  405845:	mov    QWORD PTR [rbx+0x18],rsi
  405849:	mov    esi,DWORD PTR [rbx+0x70]
  40584c:	sub    esi,ecx
  40584e:	cmp    esi,edx
  405850:	cmova  esi,edx
  405853:	mov    DWORD PTR [rbx+0x24],esi
  405856:	movzx  ecx,WORD PTR [rbx+0xea]
  40585d:	cmp    WORD PTR [rbx+0xe8],cx
  405864:	jae    40586d <flatcc_builder_end_struct@@Base+0x7d>
  405866:	mov    WORD PTR [rbx+0xe8],cx
  40586d:	movzx  ecx,WORD PTR [rax+0xc]
  405871:	mov    WORD PTR [rbx+0xea],cx
  405878:	add    rax,0xffffffffffffffdc
  40587c:	mov    QWORD PTR [rbx+0x30],rax
  405880:	dec    DWORD PTR [rbx+0x104]
  405886:	mov    eax,ebp
  405888:	add    rsp,0x8
  40588c:	pop    rbx
  40588d:	pop    rbp
  40588e:	ret    
  40588f:	lea    rdi,[rip+0x901a]        # 40e8b0 <flatcc_builder_padding_base@@Base+0x550>
  405896:	lea    rsi,[rip+0x8d45]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40589d:	lea    rcx,[rip+0x9038]        # 40e8dc <flatcc_builder_padding_base@@Base+0x57c>
  4058a4:	mov    edx,0x368
  4058a9:	call   403060 <__assert_fail@plt>
  4058ae:	xchg   ax,ax

00000000004058b0 <flatcc_builder_extend_vector@@Base>:
  4058b0:	push   r14
  4058b2:	push   rbx
  4058b3:	push   rax
  4058b4:	mov    rax,QWORD PTR [rdi+0x30]
  4058b8:	mov    ecx,DWORD PTR [rax+0x14]
  4058bb:	add    ecx,esi
  4058bd:	jb     40594f <flatcc_builder_extend_vector@@Base+0x9f>
  4058c3:	cmp    ecx,DWORD PTR [rax+0x18]
  4058c6:	ja     40594f <flatcc_builder_extend_vector@@Base+0x9f>
  4058cc:	mov    rbx,rdi
  4058cf:	mov    DWORD PTR [rax+0x14],ecx
  4058d2:	mov    rax,QWORD PTR [rdi+0x30]
  4058d6:	imul   esi,DWORD PTR [rax+0x10]
  4058da:	mov    r14d,DWORD PTR [rdi+0x20]
  4058de:	add    esi,r14d
  4058e1:	mov    DWORD PTR [rdi+0x20],esi
  4058e4:	cmp    esi,DWORD PTR [rdi+0x24]
  4058e7:	jae    4058ef <flatcc_builder_extend_vector@@Base+0x3f>
  4058e9:	mov    rax,QWORD PTR [rbx+0x18]
  4058ed:	jmp    405944 <flatcc_builder_extend_vector@@Base+0x94>
  4058ef:	inc    esi
  4058f1:	lea    rax,[rbx+0x68]
  4058f5:	mov    rdi,QWORD PTR [rbx+0x40]
  4058f9:	mov    edx,DWORD PTR [rbx+0x28]
  4058fc:	add    rdx,rsi
  4058ff:	mov    rsi,rax
  405902:	mov    ecx,0x1
  405907:	mov    r8d,0x1
  40590d:	call   QWORD PTR [rbx+0x50]
  405910:	test   eax,eax
  405912:	je     405918 <flatcc_builder_extend_vector@@Base+0x68>
  405914:	xor    eax,eax
  405916:	jmp    405947 <flatcc_builder_extend_vector@@Base+0x97>
  405918:	mov    ecx,DWORD PTR [rbx+0x28]
  40591b:	mov    rax,rcx
  40591e:	add    rax,QWORD PTR [rbx+0x68]
  405922:	mov    QWORD PTR [rbx+0x18],rax
  405926:	mov    edx,DWORD PTR [rbx+0x70]
  405929:	sub    edx,ecx
  40592b:	cmp    edx,0xfffffffc
  40592e:	mov    ecx,0xfffffffc
  405933:	cmovb  ecx,edx
  405936:	mov    DWORD PTR [rbx+0x24],ecx
  405939:	mov    rcx,QWORD PTR [rbx+0x30]
  40593d:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405944:	add    rax,r14
  405947:	add    rsp,0x8
  40594b:	pop    rbx
  40594c:	pop    r14
  40594e:	ret    
  40594f:	lea    rdi,[rip+0x9d55]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405956:	lea    rsi,[rip+0x8c85]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40595d:	lea    rcx,[rip+0x9d62]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405964:	mov    edx,0x37c
  405969:	call   403060 <__assert_fail@plt>
  40596e:	xchg   ax,ax

0000000000405970 <flatcc_builder_vector_push@@Base>:
  405970:	push   r15
  405972:	push   r14
  405974:	push   r13
  405976:	push   r12
  405978:	push   rbx
  405979:	mov    rax,QWORD PTR [rdi+0x30]
  40597d:	cmp    WORD PTR [rax+0xe],0x4
  405982:	jne    405a35 <flatcc_builder_vector_push@@Base+0xc5>
  405988:	mov    ecx,DWORD PTR [rax+0x14]
  40598b:	cmp    ecx,DWORD PTR [rax+0x18]
  40598e:	ja     405a54 <flatcc_builder_vector_push@@Base+0xe4>
  405994:	mov    r14,rsi
  405997:	mov    rbx,rdi
  40599a:	inc    ecx
  40599c:	mov    DWORD PTR [rax+0x14],ecx
  40599f:	mov    rax,QWORD PTR [rdi+0x30]
  4059a3:	mov    r15d,DWORD PTR [rax+0x10]
  4059a7:	mov    r13d,DWORD PTR [rdi+0x20]
  4059ab:	lea    eax,[r15+r13*1]
  4059af:	mov    DWORD PTR [rdi+0x20],eax
  4059b2:	cmp    eax,DWORD PTR [rdi+0x24]
  4059b5:	jae    4059c2 <flatcc_builder_vector_push@@Base+0x52>
  4059b7:	mov    r12,QWORD PTR [rbx+0x18]
  4059bb:	add    r12,r13
  4059be:	jne    405a1a <flatcc_builder_vector_push@@Base+0xaa>
  4059c0:	jmp    4059e4 <flatcc_builder_vector_push@@Base+0x74>
  4059c2:	inc    eax
  4059c4:	lea    rsi,[rbx+0x68]
  4059c8:	mov    rdi,QWORD PTR [rbx+0x40]
  4059cc:	mov    edx,DWORD PTR [rbx+0x28]
  4059cf:	add    rdx,rax
  4059d2:	mov    ecx,0x1
  4059d7:	mov    r8d,0x1
  4059dd:	call   QWORD PTR [rbx+0x50]
  4059e0:	test   eax,eax
  4059e2:	je     4059e9 <flatcc_builder_vector_push@@Base+0x79>
  4059e4:	xor    r12d,r12d
  4059e7:	jmp    405a28 <flatcc_builder_vector_push@@Base+0xb8>
  4059e9:	mov    eax,DWORD PTR [rbx+0x28]
  4059ec:	mov    r12,rax
  4059ef:	add    r12,QWORD PTR [rbx+0x68]
  4059f3:	mov    QWORD PTR [rbx+0x18],r12
  4059f7:	mov    ecx,DWORD PTR [rbx+0x70]
  4059fa:	sub    ecx,eax
  4059fc:	cmp    ecx,0xfffffffc
  4059ff:	mov    eax,0xfffffffc
  405a04:	cmovb  eax,ecx
  405a07:	mov    DWORD PTR [rbx+0x24],eax
  405a0a:	mov    rax,QWORD PTR [rbx+0x30]
  405a0e:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405a15:	add    r12,r13
  405a18:	je     4059e4 <flatcc_builder_vector_push@@Base+0x74>
  405a1a:	mov    rdi,r12
  405a1d:	mov    rsi,r14
  405a20:	mov    rdx,r15
  405a23:	call   4030a0 <memcpy@plt>
  405a28:	mov    rax,r12
  405a2b:	pop    rbx
  405a2c:	pop    r12
  405a2e:	pop    r13
  405a30:	pop    r14
  405a32:	pop    r15
  405a34:	ret    
  405a35:	lea    rdi,[rip+0x8ee3]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  405a3c:	lea    rsi,[rip+0x8b9f]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405a43:	lea    rcx,[rip+0x8f01]        # 40e94b <flatcc_builder_padding_base@@Base+0x5eb>
  405a4a:	mov    edx,0x38b
  405a4f:	call   403060 <__assert_fail@plt>
  405a54:	lea    rdi,[rip+0x8f33]        # 40e98e <flatcc_builder_padding_base@@Base+0x62e>
  405a5b:	lea    rsi,[rip+0x8b80]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405a62:	lea    rcx,[rip+0x8ee2]        # 40e94b <flatcc_builder_padding_base@@Base+0x5eb>
  405a69:	mov    edx,0x38c
  405a6e:	call   403060 <__assert_fail@plt>
  405a73:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405a7d:	nop    DWORD PTR [rax]

0000000000405a80 <flatcc_builder_append_vector@@Base>:
  405a80:	push   r15
  405a82:	push   r14
  405a84:	push   r13
  405a86:	push   r12
  405a88:	push   rbx
  405a89:	mov    rax,QWORD PTR [rdi+0x30]
  405a8d:	cmp    WORD PTR [rax+0xe],0x4
  405a92:	jne    405b6f <flatcc_builder_append_vector@@Base+0xef>
  405a98:	mov    r15,rdx
  405a9b:	mov    ecx,DWORD PTR [rax+0x14]
  405a9e:	add    ecx,r15d
  405aa1:	jb     405b50 <flatcc_builder_append_vector@@Base+0xd0>
  405aa7:	cmp    ecx,DWORD PTR [rax+0x18]
  405aaa:	ja     405b50 <flatcc_builder_append_vector@@Base+0xd0>
  405ab0:	mov    r14,rsi
  405ab3:	mov    rbx,rdi
  405ab6:	mov    DWORD PTR [rax+0x14],ecx
  405ab9:	mov    rax,QWORD PTR [rdi+0x30]
  405abd:	imul   r15d,DWORD PTR [rax+0x10]
  405ac2:	mov    r13d,DWORD PTR [rdi+0x20]
  405ac6:	lea    eax,[r15+r13*1]
  405aca:	mov    DWORD PTR [rdi+0x20],eax
  405acd:	cmp    eax,DWORD PTR [rdi+0x24]
  405ad0:	jae    405add <flatcc_builder_append_vector@@Base+0x5d>
  405ad2:	mov    r12,QWORD PTR [rbx+0x18]
  405ad6:	add    r12,r13
  405ad9:	jne    405b35 <flatcc_builder_append_vector@@Base+0xb5>
  405adb:	jmp    405aff <flatcc_builder_append_vector@@Base+0x7f>
  405add:	inc    eax
  405adf:	lea    rsi,[rbx+0x68]
  405ae3:	mov    rdi,QWORD PTR [rbx+0x40]
  405ae7:	mov    edx,DWORD PTR [rbx+0x28]
  405aea:	add    rdx,rax
  405aed:	mov    ecx,0x1
  405af2:	mov    r8d,0x1
  405af8:	call   QWORD PTR [rbx+0x50]
  405afb:	test   eax,eax
  405afd:	je     405b04 <flatcc_builder_append_vector@@Base+0x84>
  405aff:	xor    r12d,r12d
  405b02:	jmp    405b43 <flatcc_builder_append_vector@@Base+0xc3>
  405b04:	mov    eax,DWORD PTR [rbx+0x28]
  405b07:	mov    r12,rax
  405b0a:	add    r12,QWORD PTR [rbx+0x68]
  405b0e:	mov    QWORD PTR [rbx+0x18],r12
  405b12:	mov    ecx,DWORD PTR [rbx+0x70]
  405b15:	sub    ecx,eax
  405b17:	cmp    ecx,0xfffffffc
  405b1a:	mov    eax,0xfffffffc
  405b1f:	cmovb  eax,ecx
  405b22:	mov    DWORD PTR [rbx+0x24],eax
  405b25:	mov    rax,QWORD PTR [rbx+0x30]
  405b29:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405b30:	add    r12,r13
  405b33:	je     405aff <flatcc_builder_append_vector@@Base+0x7f>
  405b35:	mov    edx,r15d
  405b38:	mov    rdi,r12
  405b3b:	mov    rsi,r14
  405b3e:	call   4030a0 <memcpy@plt>
  405b43:	mov    rax,r12
  405b46:	pop    rbx
  405b47:	pop    r12
  405b49:	pop    r13
  405b4b:	pop    r14
  405b4d:	pop    r15
  405b4f:	ret    
  405b50:	lea    rdi,[rip+0x9b54]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405b57:	lea    rsi,[rip+0x8a84]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405b5e:	lea    rcx,[rip+0x9b61]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405b65:	mov    edx,0x37c
  405b6a:	call   403060 <__assert_fail@plt>
  405b6f:	lea    rdi,[rip+0x8da9]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  405b76:	lea    rsi,[rip+0x8a65]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405b7d:	lea    rcx,[rip+0x8e47]        # 40e9cb <flatcc_builder_padding_base@@Base+0x66b>
  405b84:	mov    edx,0x393
  405b89:	call   403060 <__assert_fail@plt>
  405b8e:	xchg   ax,ax

0000000000405b90 <flatcc_builder_extend_offset_vector@@Base>:
  405b90:	push   r14
  405b92:	push   rbx
  405b93:	push   rax
  405b94:	mov    rax,QWORD PTR [rdi+0x30]
  405b98:	mov    ecx,DWORD PTR [rax+0x14]
  405b9b:	add    ecx,esi
  405b9d:	jb     405c24 <flatcc_builder_extend_offset_vector@@Base+0x94>
  405ba3:	cmp    ecx,0x40000000
  405ba9:	jae    405c24 <flatcc_builder_extend_offset_vector@@Base+0x94>
  405bab:	mov    rbx,rdi
  405bae:	mov    DWORD PTR [rax+0x14],ecx
  405bb1:	mov    r14d,DWORD PTR [rdi+0x20]
  405bb5:	lea    eax,[r14+rsi*4]
  405bb9:	mov    DWORD PTR [rdi+0x20],eax
  405bbc:	cmp    eax,DWORD PTR [rdi+0x24]
  405bbf:	jae    405bc7 <flatcc_builder_extend_offset_vector@@Base+0x37>
  405bc1:	mov    rax,QWORD PTR [rbx+0x18]
  405bc5:	jmp    405c19 <flatcc_builder_extend_offset_vector@@Base+0x89>
  405bc7:	inc    eax
  405bc9:	lea    rsi,[rbx+0x68]
  405bcd:	mov    rdi,QWORD PTR [rbx+0x40]
  405bd1:	mov    edx,DWORD PTR [rbx+0x28]
  405bd4:	add    rdx,rax
  405bd7:	mov    ecx,0x1
  405bdc:	mov    r8d,0x1
  405be2:	call   QWORD PTR [rbx+0x50]
  405be5:	test   eax,eax
  405be7:	je     405bed <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405be9:	xor    eax,eax
  405beb:	jmp    405c1c <flatcc_builder_extend_offset_vector@@Base+0x8c>
  405bed:	mov    ecx,DWORD PTR [rbx+0x28]
  405bf0:	mov    rax,rcx
  405bf3:	add    rax,QWORD PTR [rbx+0x68]
  405bf7:	mov    QWORD PTR [rbx+0x18],rax
  405bfb:	mov    edx,DWORD PTR [rbx+0x70]
  405bfe:	sub    edx,ecx
  405c00:	cmp    edx,0xfffffffc
  405c03:	mov    ecx,0xfffffffc
  405c08:	cmovb  ecx,edx
  405c0b:	mov    DWORD PTR [rbx+0x24],ecx
  405c0e:	mov    rcx,QWORD PTR [rbx+0x30]
  405c12:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405c19:	add    rax,r14
  405c1c:	add    rsp,0x8
  405c20:	pop    rbx
  405c21:	pop    r14
  405c23:	ret    
  405c24:	lea    rdi,[rip+0x9a80]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405c2b:	lea    rsi,[rip+0x89b0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405c32:	lea    rcx,[rip+0x9a8d]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405c39:	mov    edx,0x37c
  405c3e:	call   403060 <__assert_fail@plt>
  405c43:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405c4d:	nop    DWORD PTR [rax]

0000000000405c50 <flatcc_builder_offset_vector_push@@Base>:
  405c50:	push   rbp
  405c51:	push   r14
  405c53:	push   rbx
  405c54:	mov    rax,QWORD PTR [rdi+0x30]
  405c58:	cmp    WORD PTR [rax+0xe],0x5
  405c5d:	jne    405cf2 <flatcc_builder_offset_vector_push@@Base+0xa2>
  405c63:	mov    ecx,DWORD PTR [rax+0x14]
  405c66:	cmp    ecx,0x3fffffff
  405c6c:	je     405cb5 <flatcc_builder_offset_vector_push@@Base+0x65>
  405c6e:	mov    r14d,esi
  405c71:	mov    rbx,rdi
  405c74:	inc    ecx
  405c76:	mov    DWORD PTR [rax+0x14],ecx
  405c79:	mov    ebp,DWORD PTR [rdi+0x20]
  405c7c:	lea    eax,[rbp+0x4]
  405c7f:	mov    DWORD PTR [rdi+0x20],eax
  405c82:	cmp    eax,DWORD PTR [rdi+0x24]
  405c85:	jae    405c92 <flatcc_builder_offset_vector_push@@Base+0x42>
  405c87:	mov    rax,QWORD PTR [rbx+0x18]
  405c8b:	add    rax,rbp
  405c8e:	jne    405cea <flatcc_builder_offset_vector_push@@Base+0x9a>
  405c90:	jmp    405cb5 <flatcc_builder_offset_vector_push@@Base+0x65>
  405c92:	lea    eax,[rbp+0x5]
  405c95:	lea    rsi,[rbx+0x68]
  405c99:	mov    rdi,QWORD PTR [rbx+0x40]
  405c9d:	mov    edx,DWORD PTR [rbx+0x28]
  405ca0:	add    rdx,rax
  405ca3:	mov    ecx,0x1
  405ca8:	mov    r8d,0x1
  405cae:	call   QWORD PTR [rbx+0x50]
  405cb1:	test   eax,eax
  405cb3:	je     405cb9 <flatcc_builder_offset_vector_push@@Base+0x69>
  405cb5:	xor    eax,eax
  405cb7:	jmp    405ced <flatcc_builder_offset_vector_push@@Base+0x9d>
  405cb9:	mov    ecx,DWORD PTR [rbx+0x28]
  405cbc:	mov    rax,rcx
  405cbf:	add    rax,QWORD PTR [rbx+0x68]
  405cc3:	mov    QWORD PTR [rbx+0x18],rax
  405cc7:	mov    edx,DWORD PTR [rbx+0x70]
  405cca:	sub    edx,ecx
  405ccc:	cmp    edx,0xfffffffc
  405ccf:	mov    ecx,0xfffffffc
  405cd4:	cmovb  ecx,edx
  405cd7:	mov    DWORD PTR [rbx+0x24],ecx
  405cda:	mov    rcx,QWORD PTR [rbx+0x30]
  405cde:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405ce5:	add    rax,rbp
  405ce8:	je     405cb5 <flatcc_builder_offset_vector_push@@Base+0x65>
  405cea:	mov    DWORD PTR [rax],r14d
  405ced:	pop    rbx
  405cee:	pop    r14
  405cf0:	pop    rbp
  405cf1:	ret    
  405cf2:	lea    rdi,[rip+0x8d1f]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  405cf9:	lea    rsi,[rip+0x88e2]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405d00:	lea    rcx,[rip+0x8d44]        # 40ea4b <flatcc_builder_padding_base@@Base+0x6eb>
  405d07:	mov    edx,0x3a6
  405d0c:	call   403060 <__assert_fail@plt>
  405d11:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405d1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405d20 <flatcc_builder_append_offset_vector@@Base>:
  405d20:	push   r15
  405d22:	push   r14
  405d24:	push   r13
  405d26:	push   r12
  405d28:	push   rbx
  405d29:	mov    rax,QWORD PTR [rdi+0x30]
  405d2d:	cmp    WORD PTR [rax+0xe],0x5
  405d32:	jne    405e0e <flatcc_builder_append_offset_vector@@Base+0xee>
  405d38:	mov    r15,rdx
  405d3b:	mov    ecx,DWORD PTR [rax+0x14]
  405d3e:	add    ecx,r15d
  405d41:	jb     405def <flatcc_builder_append_offset_vector@@Base+0xcf>
  405d47:	cmp    ecx,0x40000000
  405d4d:	jae    405def <flatcc_builder_append_offset_vector@@Base+0xcf>
  405d53:	mov    r14,rsi
  405d56:	mov    rbx,rdi
  405d59:	mov    DWORD PTR [rax+0x14],ecx
  405d5c:	mov    r13d,DWORD PTR [rdi+0x20]
  405d60:	lea    eax,[r13+r15*4+0x0]
  405d65:	mov    DWORD PTR [rdi+0x20],eax
  405d68:	cmp    eax,DWORD PTR [rdi+0x24]
  405d6b:	jae    405d78 <flatcc_builder_append_offset_vector@@Base+0x58>
  405d6d:	mov    r12,QWORD PTR [rbx+0x18]
  405d71:	add    r12,r13
  405d74:	jne    405dd0 <flatcc_builder_append_offset_vector@@Base+0xb0>
  405d76:	jmp    405d9a <flatcc_builder_append_offset_vector@@Base+0x7a>
  405d78:	inc    eax
  405d7a:	lea    rsi,[rbx+0x68]
  405d7e:	mov    rdi,QWORD PTR [rbx+0x40]
  405d82:	mov    edx,DWORD PTR [rbx+0x28]
  405d85:	add    rdx,rax
  405d88:	mov    ecx,0x1
  405d8d:	mov    r8d,0x1
  405d93:	call   QWORD PTR [rbx+0x50]
  405d96:	test   eax,eax
  405d98:	je     405d9f <flatcc_builder_append_offset_vector@@Base+0x7f>
  405d9a:	xor    r12d,r12d
  405d9d:	jmp    405de2 <flatcc_builder_append_offset_vector@@Base+0xc2>
  405d9f:	mov    eax,DWORD PTR [rbx+0x28]
  405da2:	mov    r12,rax
  405da5:	add    r12,QWORD PTR [rbx+0x68]
  405da9:	mov    QWORD PTR [rbx+0x18],r12
  405dad:	mov    ecx,DWORD PTR [rbx+0x70]
  405db0:	sub    ecx,eax
  405db2:	cmp    ecx,0xfffffffc
  405db5:	mov    eax,0xfffffffc
  405dba:	cmovb  eax,ecx
  405dbd:	mov    DWORD PTR [rbx+0x24],eax
  405dc0:	mov    rax,QWORD PTR [rbx+0x30]
  405dc4:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405dcb:	add    r12,r13
  405dce:	je     405d9a <flatcc_builder_append_offset_vector@@Base+0x7a>
  405dd0:	shl    r15d,0x2
  405dd4:	mov    edx,r15d
  405dd7:	mov    rdi,r12
  405dda:	mov    rsi,r14
  405ddd:	call   4030a0 <memcpy@plt>
  405de2:	mov    rax,r12
  405de5:	pop    rbx
  405de6:	pop    r12
  405de8:	pop    r13
  405dea:	pop    r14
  405dec:	pop    r15
  405dee:	ret    
  405def:	lea    rdi,[rip+0x98b5]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405df6:	lea    rsi,[rip+0x87e5]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405dfd:	lea    rcx,[rip+0x98c2]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405e04:	mov    edx,0x37c
  405e09:	call   403060 <__assert_fail@plt>
  405e0e:	lea    rdi,[rip+0x8c03]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  405e15:	lea    rsi,[rip+0x87c6]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405e1c:	lea    rcx,[rip+0x8c8a]        # 40eaad <flatcc_builder_padding_base@@Base+0x74d>
  405e23:	mov    edx,0x3b4
  405e28:	call   403060 <__assert_fail@plt>
  405e2d:	nop    DWORD PTR [rax]

0000000000405e30 <flatcc_builder_extend_string@@Base>:
  405e30:	push   r14
  405e32:	push   rbx
  405e33:	push   rax
  405e34:	mov    rax,QWORD PTR [rdi+0x30]
  405e38:	cmp    WORD PTR [rax+0xe],0x6
  405e3d:	jne    405ec9 <flatcc_builder_extend_string@@Base+0x99>
  405e43:	mov    ecx,DWORD PTR [rax+0x14]
  405e46:	add    ecx,esi
  405e48:	jb     405ee8 <flatcc_builder_extend_string@@Base+0xb8>
  405e4e:	mov    rbx,rdi
  405e51:	mov    DWORD PTR [rax+0x14],ecx
  405e54:	mov    r14d,DWORD PTR [rdi+0x20]
  405e58:	add    esi,r14d
  405e5b:	mov    DWORD PTR [rdi+0x20],esi
  405e5e:	cmp    esi,DWORD PTR [rdi+0x24]
  405e61:	jae    405e69 <flatcc_builder_extend_string@@Base+0x39>
  405e63:	mov    rax,QWORD PTR [rbx+0x18]
  405e67:	jmp    405ebe <flatcc_builder_extend_string@@Base+0x8e>
  405e69:	inc    esi
  405e6b:	lea    rax,[rbx+0x68]
  405e6f:	mov    rdi,QWORD PTR [rbx+0x40]
  405e73:	mov    edx,DWORD PTR [rbx+0x28]
  405e76:	add    rdx,rsi
  405e79:	mov    rsi,rax
  405e7c:	mov    ecx,0x1
  405e81:	mov    r8d,0x1
  405e87:	call   QWORD PTR [rbx+0x50]
  405e8a:	test   eax,eax
  405e8c:	je     405e92 <flatcc_builder_extend_string@@Base+0x62>
  405e8e:	xor    eax,eax
  405e90:	jmp    405ec1 <flatcc_builder_extend_string@@Base+0x91>
  405e92:	mov    ecx,DWORD PTR [rbx+0x28]
  405e95:	mov    rax,rcx
  405e98:	add    rax,QWORD PTR [rbx+0x68]
  405e9c:	mov    QWORD PTR [rbx+0x18],rax
  405ea0:	mov    edx,DWORD PTR [rbx+0x70]
  405ea3:	sub    edx,ecx
  405ea5:	cmp    edx,0xfffffffc
  405ea8:	mov    ecx,0xfffffffc
  405ead:	cmovb  ecx,edx
  405eb0:	mov    DWORD PTR [rbx+0x24],ecx
  405eb3:	mov    rcx,QWORD PTR [rbx+0x30]
  405eb7:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  405ebe:	add    rax,r14
  405ec1:	add    rsp,0x8
  405ec5:	pop    rbx
  405ec6:	pop    r14
  405ec8:	ret    
  405ec9:	lea    rdi,[rip+0x8c51]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  405ed0:	lea    rsi,[rip+0x870b]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405ed7:	lea    rcx,[rip+0x8c6f]        # 40eb4d <flatcc_builder_padding_base@@Base+0x7ed>
  405ede:	mov    edx,0x3bd
  405ee3:	call   403060 <__assert_fail@plt>
  405ee8:	lea    rdi,[rip+0x97bc]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405eef:	lea    rsi,[rip+0x86ec]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405ef6:	lea    rcx,[rip+0x97c9]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  405efd:	mov    edx,0x37c
  405f02:	call   403060 <__assert_fail@plt>
  405f07:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405f10 <flatcc_builder_append_string@@Base>:
  405f10:	push   r15
  405f12:	push   r14
  405f14:	push   r13
  405f16:	push   r12
  405f18:	push   rbx
  405f19:	mov    rax,QWORD PTR [rdi+0x30]
  405f1d:	cmp    WORD PTR [rax+0xe],0x6
  405f22:	jne    405fce <flatcc_builder_append_string@@Base+0xbe>
  405f28:	mov    r15,rdx
  405f2b:	mov    ecx,DWORD PTR [rax+0x14]
  405f2e:	add    ecx,r15d
  405f31:	jb     405fed <flatcc_builder_append_string@@Base+0xdd>
  405f37:	mov    r14,rsi
  405f3a:	mov    rbx,rdi
  405f3d:	mov    DWORD PTR [rax+0x14],ecx
  405f40:	mov    r13d,DWORD PTR [rdi+0x20]
  405f44:	lea    eax,[r15+r13*1]
  405f48:	mov    DWORD PTR [rdi+0x20],eax
  405f4b:	cmp    eax,DWORD PTR [rdi+0x24]
  405f4e:	jae    405f5b <flatcc_builder_append_string@@Base+0x4b>
  405f50:	mov    r12,QWORD PTR [rbx+0x18]
  405f54:	add    r12,r13
  405f57:	jne    405fb3 <flatcc_builder_append_string@@Base+0xa3>
  405f59:	jmp    405f7d <flatcc_builder_append_string@@Base+0x6d>
  405f5b:	inc    eax
  405f5d:	lea    rsi,[rbx+0x68]
  405f61:	mov    rdi,QWORD PTR [rbx+0x40]
  405f65:	mov    edx,DWORD PTR [rbx+0x28]
  405f68:	add    rdx,rax
  405f6b:	mov    ecx,0x1
  405f70:	mov    r8d,0x1
  405f76:	call   QWORD PTR [rbx+0x50]
  405f79:	test   eax,eax
  405f7b:	je     405f82 <flatcc_builder_append_string@@Base+0x72>
  405f7d:	xor    r12d,r12d
  405f80:	jmp    405fc1 <flatcc_builder_append_string@@Base+0xb1>
  405f82:	mov    eax,DWORD PTR [rbx+0x28]
  405f85:	mov    r12,rax
  405f88:	add    r12,QWORD PTR [rbx+0x68]
  405f8c:	mov    QWORD PTR [rbx+0x18],r12
  405f90:	mov    ecx,DWORD PTR [rbx+0x70]
  405f93:	sub    ecx,eax
  405f95:	cmp    ecx,0xfffffffc
  405f98:	mov    eax,0xfffffffc
  405f9d:	cmovb  eax,ecx
  405fa0:	mov    DWORD PTR [rbx+0x24],eax
  405fa3:	mov    rax,QWORD PTR [rbx+0x30]
  405fa7:	mov    DWORD PTR [rax+0x4],0xfffffffc
  405fae:	add    r12,r13
  405fb1:	je     405f7d <flatcc_builder_append_string@@Base+0x6d>
  405fb3:	mov    edx,r15d
  405fb6:	mov    rdi,r12
  405fb9:	mov    rsi,r14
  405fbc:	call   4030a0 <memcpy@plt>
  405fc1:	mov    rax,r12
  405fc4:	pop    rbx
  405fc5:	pop    r12
  405fc7:	pop    r13
  405fc9:	pop    r14
  405fcb:	pop    r15
  405fcd:	ret    
  405fce:	lea    rdi,[rip+0x8b4c]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  405fd5:	lea    rsi,[rip+0x8606]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405fdc:	lea    rcx,[rip+0x8ba9]        # 40eb8c <flatcc_builder_padding_base@@Base+0x82c>
  405fe3:	mov    edx,0x3c6
  405fe8:	call   403060 <__assert_fail@plt>
  405fed:	lea    rdi,[rip+0x96b7]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  405ff4:	lea    rsi,[rip+0x85e7]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  405ffb:	lea    rcx,[rip+0x96c4]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  406002:	mov    edx,0x37c
  406007:	call   403060 <__assert_fail@plt>
  40600c:	nop    DWORD PTR [rax+0x0]

0000000000406010 <flatcc_builder_append_string_str@@Base>:
  406010:	push   r14
  406012:	push   rbx
  406013:	push   rax
  406014:	mov    rbx,rsi
  406017:	mov    r14,rdi
  40601a:	mov    rdi,rsi
  40601d:	call   403050 <strlen@plt>
  406022:	mov    rdi,r14
  406025:	mov    rsi,rbx
  406028:	mov    rdx,rax
  40602b:	add    rsp,0x8
  40602f:	pop    rbx
  406030:	pop    r14
  406032:	jmp    405f10 <flatcc_builder_append_string@@Base>
  406037:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406040 <flatcc_builder_append_string_strn@@Base>:
  406040:	push   r15
  406042:	push   r14
  406044:	push   rbx
  406045:	mov    rbx,rdx
  406048:	mov    r14,rsi
  40604b:	mov    r15,rdi
  40604e:	mov    rdi,rsi
  406051:	xor    esi,esi
  406053:	call   403080 <memchr@plt>
  406058:	mov    rcx,rax
  40605b:	sub    rcx,r14
  40605e:	test   rax,rax
  406061:	cmovne rbx,rcx
  406065:	mov    rdi,r15
  406068:	mov    rsi,r14
  40606b:	mov    rdx,rbx
  40606e:	pop    rbx
  40606f:	pop    r14
  406071:	pop    r15
  406073:	jmp    405f10 <flatcc_builder_append_string@@Base>
  406078:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406080 <flatcc_builder_truncate_vector@@Base>:
  406080:	push   rax
  406081:	mov    rax,QWORD PTR [rdi+0x30]
  406085:	cmp    WORD PTR [rax+0xe],0x4
  40608a:	jne    4060be <flatcc_builder_truncate_vector@@Base+0x3e>
  40608c:	mov    rdx,rsi
  40608f:	mov    ecx,DWORD PTR [rax+0x14]
  406092:	cmp    rcx,rsi
  406095:	jb     4060dd <flatcc_builder_truncate_vector@@Base+0x5d>
  406097:	sub    ecx,edx
  406099:	mov    DWORD PTR [rax+0x14],ecx
  40609c:	mov    rax,QWORD PTR [rdi+0x30]
  4060a0:	imul   edx,DWORD PTR [rax+0x10]
  4060a4:	mov    eax,DWORD PTR [rdi+0x20]
  4060a7:	sub    eax,edx
  4060a9:	mov    DWORD PTR [rdi+0x20],eax
  4060ac:	add    rax,QWORD PTR [rdi+0x18]
  4060b0:	mov    rdi,rax
  4060b3:	xor    esi,esi
  4060b5:	call   403070 <memset@plt>
  4060ba:	xor    eax,eax
  4060bc:	pop    rcx
  4060bd:	ret    
  4060be:	lea    rdi,[rip+0x885a]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  4060c5:	lea    rsi,[rip+0x8516]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4060cc:	lea    rcx,[rip+0x8b06]        # 40ebd9 <flatcc_builder_padding_base@@Base+0x879>
  4060d3:	mov    edx,0x3d9
  4060d8:	call   403060 <__assert_fail@plt>
  4060dd:	lea    rdi,[rip+0x8b34]        # 40ec18 <flatcc_builder_padding_base@@Base+0x8b8>
  4060e4:	lea    rsi,[rip+0x84f7]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4060eb:	lea    rcx,[rip+0x8ae7]        # 40ebd9 <flatcc_builder_padding_base@@Base+0x879>
  4060f2:	mov    edx,0x3da
  4060f7:	call   403060 <__assert_fail@plt>
  4060fc:	nop    DWORD PTR [rax+0x0]

0000000000406100 <flatcc_builder_truncate_offset_vector@@Base>:
  406100:	push   rax
  406101:	mov    rax,QWORD PTR [rdi+0x30]
  406105:	cmp    WORD PTR [rax+0xe],0x5
  40610a:	jne    40613b <flatcc_builder_truncate_offset_vector@@Base+0x3b>
  40610c:	mov    rdx,rsi
  40610f:	mov    ecx,DWORD PTR [rax+0x14]
  406112:	sub    ecx,edx
  406114:	jb     40615a <flatcc_builder_truncate_offset_vector@@Base+0x5a>
  406116:	mov    DWORD PTR [rax+0x14],ecx
  406119:	mov    rax,QWORD PTR [rdi+0x30]
  40611d:	imul   edx,DWORD PTR [rax+0x10]
  406121:	mov    eax,DWORD PTR [rdi+0x20]
  406124:	sub    eax,edx
  406126:	mov    DWORD PTR [rdi+0x20],eax
  406129:	add    rax,QWORD PTR [rdi+0x18]
  40612d:	mov    rdi,rax
  406130:	xor    esi,esi
  406132:	call   403070 <memset@plt>
  406137:	xor    eax,eax
  406139:	pop    rcx
  40613a:	ret    
  40613b:	lea    rdi,[rip+0x88d6]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  406142:	lea    rsi,[rip+0x8499]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406149:	lea    rcx,[rip+0x8aec]        # 40ec3c <flatcc_builder_padding_base@@Base+0x8dc>
  406150:	mov    edx,0x3e2
  406155:	call   403060 <__assert_fail@plt>
  40615a:	lea    rdi,[rip+0x8b21]        # 40ec82 <flatcc_builder_padding_base@@Base+0x922>
  406161:	lea    rsi,[rip+0x847a]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406168:	lea    rcx,[rip+0x8acd]        # 40ec3c <flatcc_builder_padding_base@@Base+0x8dc>
  40616f:	mov    edx,0x3e3
  406174:	call   403060 <__assert_fail@plt>
  406179:	nop    DWORD PTR [rax+0x0]

0000000000406180 <flatcc_builder_truncate_string@@Base>:
  406180:	push   rax
  406181:	mov    rax,QWORD PTR [rdi+0x30]
  406185:	cmp    WORD PTR [rax+0xe],0x6
  40618a:	jne    4061b5 <flatcc_builder_truncate_string@@Base+0x35>
  40618c:	mov    ecx,DWORD PTR [rax+0x14]
  40618f:	cmp    rcx,rsi
  406192:	jb     4061d4 <flatcc_builder_truncate_string@@Base+0x54>
  406194:	sub    ecx,esi
  406196:	mov    DWORD PTR [rax+0x14],ecx
  406199:	mov    eax,DWORD PTR [rdi+0x20]
  40619c:	sub    eax,esi
  40619e:	mov    DWORD PTR [rdi+0x20],eax
  4061a1:	add    rax,QWORD PTR [rdi+0x18]
  4061a5:	mov    edx,esi
  4061a7:	mov    rdi,rax
  4061aa:	xor    esi,esi
  4061ac:	call   403070 <memset@plt>
  4061b1:	xor    eax,eax
  4061b3:	pop    rcx
  4061b4:	ret    
  4061b5:	lea    rdi,[rip+0x8965]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  4061bc:	lea    rsi,[rip+0x841f]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4061c3:	lea    rcx,[rip+0x8af3]        # 40ecbd <flatcc_builder_padding_base@@Base+0x95d>
  4061ca:	mov    edx,0x3eb
  4061cf:	call   403060 <__assert_fail@plt>
  4061d4:	lea    rdi,[rip+0x8b21]        # 40ecfc <flatcc_builder_padding_base@@Base+0x99c>
  4061db:	lea    rsi,[rip+0x8400]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4061e2:	lea    rcx,[rip+0x8ad4]        # 40ecbd <flatcc_builder_padding_base@@Base+0x95d>
  4061e9:	mov    edx,0x3ec
  4061ee:	call   403060 <__assert_fail@plt>
  4061f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4061fd:	nop    DWORD PTR [rax]

0000000000406200 <flatcc_builder_start_vector@@Base>:
  406200:	push   r15
  406202:	push   r14
  406204:	push   rbx
  406205:	mov    r14,rcx
  406208:	mov    r15,rsi
  40620b:	mov    rbx,rdi
  40620e:	cmp    dx,0x4
  406212:	mov    esi,0x4
  406217:	cmova  esi,edx
  40621a:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40621f:	mov    ecx,eax
  406221:	mov    eax,0xffffffff
  406226:	test   ecx,ecx
  406228:	jne    406276 <flatcc_builder_start_vector@@Base+0x76>
  40622a:	mov    rax,QWORD PTR [rbx+0x30]
  40622e:	mov    DWORD PTR [rax+0x10],r15d
  406232:	mov    rax,QWORD PTR [rbx+0x30]
  406236:	mov    DWORD PTR [rax+0x14],0x0
  40623d:	mov    rax,QWORD PTR [rbx+0x30]
  406241:	mov    DWORD PTR [rax+0x18],r14d
  406245:	mov    rax,QWORD PTR [rbx+0x30]
  406249:	mov    WORD PTR [rax+0xe],0x4
  40624f:	mov    ecx,DWORD PTR [rbx+0x28]
  406252:	mov    edx,DWORD PTR [rbx+0x70]
  406255:	sub    edx,ecx
  406257:	add    rcx,QWORD PTR [rbx+0x68]
  40625b:	mov    QWORD PTR [rbx+0x18],rcx
  40625f:	cmp    edx,0xfffffffc
  406262:	mov    ecx,0xfffffffc
  406267:	cmovb  ecx,edx
  40626a:	mov    DWORD PTR [rbx+0x24],ecx
  40626d:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406274:	xor    eax,eax
  406276:	pop    rbx
  406277:	pop    r14
  406279:	pop    r15
  40627b:	ret    
  40627c:	nop    DWORD PTR [rax+0x0]

0000000000406280 <flatcc_builder_start_offset_vector@@Base>:
  406280:	push   rbx
  406281:	mov    rbx,rdi
  406284:	mov    esi,0x4
  406289:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40628e:	mov    ecx,eax
  406290:	mov    eax,0xffffffff
  406295:	test   ecx,ecx
  406297:	je     40629b <flatcc_builder_start_offset_vector@@Base+0x1b>
  406299:	pop    rbx
  40629a:	ret    
  40629b:	mov    rax,QWORD PTR [rbx+0x30]
  40629f:	mov    DWORD PTR [rax+0x10],0x4
  4062a6:	mov    rax,QWORD PTR [rbx+0x30]
  4062aa:	mov    DWORD PTR [rax+0x14],0x0
  4062b1:	mov    rax,QWORD PTR [rbx+0x30]
  4062b5:	mov    WORD PTR [rax+0xe],0x5
  4062bb:	mov    ecx,DWORD PTR [rbx+0x28]
  4062be:	mov    edx,DWORD PTR [rbx+0x70]
  4062c1:	sub    edx,ecx
  4062c3:	add    rcx,QWORD PTR [rbx+0x68]
  4062c7:	mov    QWORD PTR [rbx+0x18],rcx
  4062cb:	cmp    edx,0xfffffffc
  4062ce:	mov    ecx,0xfffffffc
  4062d3:	cmovb  ecx,edx
  4062d6:	mov    DWORD PTR [rbx+0x24],ecx
  4062d9:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4062e0:	xor    eax,eax
  4062e2:	pop    rbx
  4062e3:	ret    
  4062e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4062ee:	xchg   ax,ax

00000000004062f0 <flatcc_builder_create_offset_vector@@Base>:
  4062f0:	push   r15
  4062f2:	push   r14
  4062f4:	push   r12
  4062f6:	push   rbx
  4062f7:	push   rax
  4062f8:	mov    r14,rdx
  4062fb:	mov    r15,rsi
  4062fe:	mov    rbx,rdi
  406301:	mov    esi,0x4
  406306:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40630b:	test   eax,eax
  40630d:	je     40631d <flatcc_builder_create_offset_vector@@Base+0x2d>
  40630f:	xor    eax,eax
  406311:	add    rsp,0x8
  406315:	pop    rbx
  406316:	pop    r12
  406318:	pop    r14
  40631a:	pop    r15
  40631c:	ret    
  40631d:	mov    rax,QWORD PTR [rbx+0x30]
  406321:	mov    DWORD PTR [rax+0x10],0x4
  406328:	mov    rax,QWORD PTR [rbx+0x30]
  40632c:	mov    DWORD PTR [rax+0x14],0x0
  406333:	mov    rax,QWORD PTR [rbx+0x30]
  406337:	mov    WORD PTR [rax+0xe],0x5
  40633d:	mov    ecx,DWORD PTR [rbx+0x28]
  406340:	mov    edx,DWORD PTR [rbx+0x70]
  406343:	sub    edx,ecx
  406345:	add    rcx,QWORD PTR [rbx+0x68]
  406349:	mov    QWORD PTR [rbx+0x18],rcx
  40634d:	cmp    edx,0xfffffffc
  406350:	mov    ecx,0xfffffffc
  406355:	cmovb  ecx,edx
  406358:	mov    DWORD PTR [rbx+0x24],ecx
  40635b:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406362:	mov    ecx,DWORD PTR [rax+0x14]
  406365:	add    ecx,r14d
  406368:	jb     406418 <flatcc_builder_create_offset_vector@@Base+0x128>
  40636e:	cmp    ecx,0x40000000
  406374:	jae    406418 <flatcc_builder_create_offset_vector@@Base+0x128>
  40637a:	mov    DWORD PTR [rax+0x14],ecx
  40637d:	mov    r12d,DWORD PTR [rbx+0x20]
  406381:	lea    eax,[r12+r14*4]
  406385:	mov    DWORD PTR [rbx+0x20],eax
  406388:	cmp    eax,DWORD PTR [rbx+0x24]
  40638b:	jae    40639b <flatcc_builder_create_offset_vector@@Base+0xab>
  40638d:	mov    rdi,QWORD PTR [rbx+0x18]
  406391:	add    rdi,r12
  406394:	jne    4063f6 <flatcc_builder_create_offset_vector@@Base+0x106>
  406396:	jmp    40630f <flatcc_builder_create_offset_vector@@Base+0x1f>
  40639b:	inc    eax
  40639d:	lea    rsi,[rbx+0x68]
  4063a1:	mov    rdi,QWORD PTR [rbx+0x40]
  4063a5:	mov    edx,DWORD PTR [rbx+0x28]
  4063a8:	add    rdx,rax
  4063ab:	mov    ecx,0x1
  4063b0:	mov    r8d,0x1
  4063b6:	call   QWORD PTR [rbx+0x50]
  4063b9:	test   eax,eax
  4063bb:	jne    40630f <flatcc_builder_create_offset_vector@@Base+0x1f>
  4063c1:	mov    eax,DWORD PTR [rbx+0x28]
  4063c4:	mov    rdi,rax
  4063c7:	add    rdi,QWORD PTR [rbx+0x68]
  4063cb:	mov    QWORD PTR [rbx+0x18],rdi
  4063cf:	mov    ecx,DWORD PTR [rbx+0x70]
  4063d2:	sub    ecx,eax
  4063d4:	cmp    ecx,0xfffffffc
  4063d7:	mov    eax,0xfffffffc
  4063dc:	cmovb  eax,ecx
  4063df:	mov    DWORD PTR [rbx+0x24],eax
  4063e2:	mov    rax,QWORD PTR [rbx+0x30]
  4063e6:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4063ed:	add    rdi,r12
  4063f0:	je     40630f <flatcc_builder_create_offset_vector@@Base+0x1f>
  4063f6:	shl    r14,0x2
  4063fa:	mov    rsi,r15
  4063fd:	mov    rdx,r14
  406400:	call   4030a0 <memcpy@plt>
  406405:	mov    rdi,rbx
  406408:	add    rsp,0x8
  40640c:	pop    rbx
  40640d:	pop    r12
  40640f:	pop    r14
  406411:	pop    r15
  406413:	jmp    406440 <flatcc_builder_end_offset_vector@@Base>
  406418:	lea    rdi,[rip+0x928c]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  40641f:	lea    rsi,[rip+0x81bc]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406426:	lea    rcx,[rip+0x9299]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  40642d:	mov    edx,0x37c
  406432:	call   403060 <__assert_fail@plt>
  406437:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406440 <flatcc_builder_end_offset_vector@@Base>:
  406440:	push   rbp
  406441:	push   rbx
  406442:	push   rax
  406443:	mov    rax,QWORD PTR [rdi+0x30]
  406447:	cmp    WORD PTR [rax+0xe],0x5
  40644c:	jne    4064da <flatcc_builder_end_offset_vector@@Base+0x9a>
  406452:	mov    rbx,rdi
  406455:	mov    rsi,QWORD PTR [rdi+0x18]
  406459:	mov    edx,DWORD PTR [rax+0x14]
  40645c:	xor    ecx,ecx
  40645e:	call   407490 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  406463:	mov    ebp,eax
  406465:	test   eax,eax
  406467:	je     4064d1 <flatcc_builder_end_offset_vector@@Base+0x91>
  406469:	mov    rdi,QWORD PTR [rbx+0x18]
  40646d:	mov    edx,DWORD PTR [rbx+0x20]
  406470:	xor    esi,esi
  406472:	call   403070 <memset@plt>
  406477:	mov    rax,QWORD PTR [rbx+0x30]
  40647b:	mov    ecx,DWORD PTR [rax+0x8]
  40647e:	mov    DWORD PTR [rbx+0x20],ecx
  406481:	mov    ecx,DWORD PTR [rax]
  406483:	mov    DWORD PTR [rbx+0x28],ecx
  406486:	mov    edx,DWORD PTR [rax+0x4]
  406489:	mov    rsi,rcx
  40648c:	add    rsi,QWORD PTR [rbx+0x68]
  406490:	mov    QWORD PTR [rbx+0x18],rsi
  406494:	mov    esi,DWORD PTR [rbx+0x70]
  406497:	sub    esi,ecx
  406499:	cmp    esi,edx
  40649b:	cmova  esi,edx
  40649e:	mov    DWORD PTR [rbx+0x24],esi
  4064a1:	movzx  ecx,WORD PTR [rbx+0xea]
  4064a8:	cmp    WORD PTR [rbx+0xe8],cx
  4064af:	jae    4064b8 <flatcc_builder_end_offset_vector@@Base+0x78>
  4064b1:	mov    WORD PTR [rbx+0xe8],cx
  4064b8:	movzx  ecx,WORD PTR [rax+0xc]
  4064bc:	mov    WORD PTR [rbx+0xea],cx
  4064c3:	add    rax,0xffffffffffffffdc
  4064c7:	mov    QWORD PTR [rbx+0x30],rax
  4064cb:	dec    DWORD PTR [rbx+0x104]
  4064d1:	mov    eax,ebp
  4064d3:	add    rsp,0x8
  4064d7:	pop    rbx
  4064d8:	pop    rbp
  4064d9:	ret    
  4064da:	lea    rdi,[rip+0x8537]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  4064e1:	lea    rsi,[rip+0x80fa]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4064e8:	lea    rcx,[rip+0x8b58]        # 40f047 <flatcc_builder_padding_base@@Base+0xce7>
  4064ef:	mov    edx,0x5c8
  4064f4:	call   403060 <__assert_fail@plt>
  4064f9:	nop    DWORD PTR [rax+0x0]

0000000000406500 <flatcc_builder_start_string@@Base>:
  406500:	push   rbx
  406501:	mov    rbx,rdi
  406504:	mov    esi,0x1
  406509:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  40650e:	mov    ecx,eax
  406510:	mov    eax,0xffffffff
  406515:	test   ecx,ecx
  406517:	je     40651b <flatcc_builder_start_string@@Base+0x1b>
  406519:	pop    rbx
  40651a:	ret    
  40651b:	mov    rax,QWORD PTR [rbx+0x30]
  40651f:	mov    DWORD PTR [rax+0x10],0x1
  406526:	mov    rax,QWORD PTR [rbx+0x30]
  40652a:	mov    DWORD PTR [rax+0x14],0x0
  406531:	mov    rax,QWORD PTR [rbx+0x30]
  406535:	mov    WORD PTR [rax+0xe],0x6
  40653b:	mov    ecx,DWORD PTR [rbx+0x28]
  40653e:	mov    edx,DWORD PTR [rbx+0x70]
  406541:	sub    edx,ecx
  406543:	add    rcx,QWORD PTR [rbx+0x68]
  406547:	mov    QWORD PTR [rbx+0x18],rcx
  40654b:	cmp    edx,0xfffffffc
  40654e:	mov    ecx,0xfffffffc
  406553:	cmovb  ecx,edx
  406556:	mov    DWORD PTR [rbx+0x24],ecx
  406559:	mov    DWORD PTR [rax+0x4],0xfffffffc
  406560:	xor    eax,eax
  406562:	pop    rbx
  406563:	ret    
  406564:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40656e:	xchg   ax,ax

0000000000406570 <flatcc_builder_reserve_table@@Base>:
  406570:	push   r15
  406572:	push   r14
  406574:	push   rbx
  406575:	test   esi,esi
  406577:	js     406624 <flatcc_builder_reserve_table@@Base+0xb4>
  40657d:	mov    r14d,esi
  406580:	mov    r15,rdi
  406583:	mov    rax,QWORD PTR [rdi+0x30]
  406587:	movzx  ebx,WORD PTR [rax+0x1c]
  40658b:	add    ebx,ebx
  40658d:	add    ebx,DWORD PTR [rax+0x10]
  406590:	lea    edx,[r14+r14*1]
  406594:	add    edx,0x4
  406597:	add    rdx,rbx
  40659a:	cmp    rdx,QWORD PTR [rdi+0x60]
  40659e:	jbe    4065bc <flatcc_builder_reserve_table@@Base+0x4c>
  4065a0:	lea    rsi,[r15+0x58]
  4065a4:	mov    rdi,QWORD PTR [r15+0x40]
  4065a8:	mov    ecx,0x1
  4065ad:	xor    r8d,r8d
  4065b0:	call   QWORD PTR [r15+0x50]
  4065b4:	test   eax,eax
  4065b6:	jne    406643 <flatcc_builder_reserve_table@@Base+0xd3>
  4065bc:	add    rbx,QWORD PTR [r15+0x58]
  4065c0:	mov    QWORD PTR [r15+0x8],rbx
  4065c4:	je     406619 <flatcc_builder_reserve_table@@Base+0xa9>
  4065c6:	add    r14d,r14d
  4065c9:	add    rbx,0x4
  4065cd:	mov    QWORD PTR [r15+0x8],rbx
  4065d1:	mov    rax,QWORD PTR [r15+0x30]
  4065d5:	mov    ebx,DWORD PTR [rax+0x14]
  4065d8:	or     r14d,0x1
  4065dc:	add    r14,rbx
  4065df:	cmp    r14,QWORD PTR [r15+0x90]
  4065e6:	jbe    406606 <flatcc_builder_reserve_table@@Base+0x96>
  4065e8:	lea    rsi,[r15+0x88]
  4065ef:	mov    rdi,QWORD PTR [r15+0x40]
  4065f3:	mov    rdx,r14
  4065f6:	xor    ecx,ecx
  4065f8:	mov    r8d,0x3
  4065fe:	call   QWORD PTR [r15+0x50]
  406602:	test   eax,eax
  406604:	jne    406643 <flatcc_builder_reserve_table@@Base+0xd3>
  406606:	xor    eax,eax
  406608:	add    rbx,QWORD PTR [r15+0x88]
  40660f:	mov    QWORD PTR [r15],rbx
  406612:	sete   al
  406615:	neg    eax
  406617:	jmp    40661e <flatcc_builder_reserve_table@@Base+0xae>
  406619:	mov    eax,0xffffffff
  40661e:	pop    rbx
  40661f:	pop    r14
  406621:	pop    r15
  406623:	ret    
  406624:	lea    rdi,[rip+0x8734]        # 40ed5f <flatcc_builder_padding_base@@Base+0x9ff>
  40662b:	lea    rsi,[rip+0x7fb0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406632:	lea    rcx,[rip+0x86e5]        # 40ed1e <flatcc_builder_padding_base@@Base+0x9be>
  406639:	mov    edx,0x429
  40663e:	call   403060 <__assert_fail@plt>
  406643:	lea    rdi,[rip+0x9158]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40664a:	lea    rsi,[rip+0x7f91]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406651:	lea    rcx,[rip+0x8f84]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  406658:	mov    edx,0x134
  40665d:	call   403060 <__assert_fail@plt>
  406662:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40666c:	nop    DWORD PTR [rax+0x0]

0000000000406670 <flatcc_builder_start_table@@Base>:
  406670:	push   rbp
  406671:	push   r15
  406673:	push   r14
  406675:	push   rbx
  406676:	push   rax
  406677:	mov    r15d,esi
  40667a:	mov    rbx,rdi
  40667d:	mov    esi,0x4
  406682:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  406687:	mov    r14d,0xffffffff
  40668d:	test   eax,eax
  40668f:	je     40669f <flatcc_builder_start_table@@Base+0x2f>
  406691:	mov    eax,r14d
  406694:	add    rsp,0x8
  406698:	pop    rbx
  406699:	pop    r14
  40669b:	pop    r15
  40669d:	pop    rbp
  40669e:	ret    
  40669f:	mov    eax,DWORD PTR [rbx+0x8]
  4066a2:	sub    eax,DWORD PTR [rbx+0x58]
  4066a5:	mov    rcx,QWORD PTR [rbx+0x30]
  4066a9:	mov    DWORD PTR [rcx+0x10],eax
  4066ac:	mov    eax,DWORD PTR [rbx]
  4066ae:	sub    eax,DWORD PTR [rbx+0x88]
  4066b4:	mov    rcx,QWORD PTR [rbx+0x30]
  4066b8:	mov    DWORD PTR [rcx+0x14],eax
  4066bb:	mov    eax,DWORD PTR [rbx+0x14]
  4066be:	mov    rcx,QWORD PTR [rbx+0x30]
  4066c2:	mov    DWORD PTR [rcx+0x18],eax
  4066c5:	movzx  eax,WORD PTR [rbx+0x10]
  4066c9:	mov    rcx,QWORD PTR [rbx+0x30]
  4066cd:	mov    WORD PTR [rcx+0x1c],ax
  4066d1:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4066d8:	mov    WORD PTR [rbx+0x10],0x0
  4066de:	mov    rax,QWORD PTR [rbx+0x30]
  4066e2:	mov    WORD PTR [rax+0xe],0x3
  4066e8:	movzx  ebp,WORD PTR [rax+0x1c]
  4066ec:	add    ebp,ebp
  4066ee:	add    ebp,DWORD PTR [rax+0x10]
  4066f1:	lea    edx,[r15+r15*1]
  4066f5:	add    edx,0x4
  4066f8:	add    rdx,rbp
  4066fb:	cmp    rdx,QWORD PTR [rbx+0x60]
  4066ff:	jbe    40671c <flatcc_builder_start_table@@Base+0xac>
  406701:	lea    rsi,[rbx+0x58]
  406705:	mov    rdi,QWORD PTR [rbx+0x40]
  406709:	mov    ecx,0x1
  40670e:	xor    r8d,r8d
  406711:	call   QWORD PTR [rbx+0x50]
  406714:	test   eax,eax
  406716:	jne    4067b0 <flatcc_builder_start_table@@Base+0x140>
  40671c:	add    rbp,QWORD PTR [rbx+0x58]
  406720:	mov    QWORD PTR [rbx+0x8],rbp
  406724:	je     406691 <flatcc_builder_start_table@@Base+0x21>
  40672a:	add    r15d,r15d
  40672d:	add    rbp,0x4
  406731:	mov    QWORD PTR [rbx+0x8],rbp
  406735:	mov    rax,QWORD PTR [rbx+0x30]
  406739:	mov    ebp,DWORD PTR [rax+0x14]
  40673c:	or     r15d,0x1
  406740:	add    r15,rbp
  406743:	cmp    r15,QWORD PTR [rbx+0x90]
  40674a:	jbe    406769 <flatcc_builder_start_table@@Base+0xf9>
  40674c:	lea    rsi,[rbx+0x88]
  406753:	mov    rdi,QWORD PTR [rbx+0x40]
  406757:	mov    rdx,r15
  40675a:	xor    ecx,ecx
  40675c:	mov    r8d,0x3
  406762:	call   QWORD PTR [rbx+0x50]
  406765:	test   eax,eax
  406767:	jne    4067b0 <flatcc_builder_start_table@@Base+0x140>
  406769:	add    rbp,QWORD PTR [rbx+0x88]
  406770:	mov    QWORD PTR [rbx],rbp
  406773:	je     406691 <flatcc_builder_start_table@@Base+0x21>
  406779:	mov    eax,DWORD PTR [rbx+0x28]
  40677c:	mov    rcx,rax
  40677f:	add    rcx,QWORD PTR [rbx+0x68]
  406783:	mov    QWORD PTR [rbx+0x18],rcx
  406787:	mov    ecx,DWORD PTR [rbx+0x70]
  40678a:	sub    ecx,eax
  40678c:	cmp    ecx,0xfffc
  406792:	mov    eax,0xfffc
  406797:	cmovb  eax,ecx
  40679a:	mov    DWORD PTR [rbx+0x24],eax
  40679d:	mov    rax,QWORD PTR [rbx+0x30]
  4067a1:	mov    DWORD PTR [rax+0x4],0xfffc
  4067a8:	xor    r14d,r14d
  4067ab:	jmp    406691 <flatcc_builder_start_table@@Base+0x21>
  4067b0:	lea    rdi,[rip+0x8feb]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4067b7:	lea    rsi,[rip+0x7e24]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4067be:	lea    rcx,[rip+0x8e17]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  4067c5:	mov    edx,0x134
  4067ca:	call   403060 <__assert_fail@plt>
  4067cf:	nop

00000000004067d0 <flatcc_builder_create_vtable@@Base>:
  4067d0:	push   r14
  4067d2:	push   rbx
  4067d3:	sub    rsp,0x98
  4067da:	mov    r14,rdi
  4067dd:	mov    QWORD PTR [rsp+0x8],0x0
  4067e6:	mov    DWORD PTR [rsp+0x10],0x0
  4067ee:	test   dx,dx
  4067f1:	je     406858 <flatcc_builder_create_vtable@@Base+0x88>
  4067f3:	movzx  r8d,dx
  4067f7:	mov    QWORD PTR [rsp+0x8],r8
  4067fc:	mov    QWORD PTR [rsp+0x18],rsi
  406801:	mov    QWORD PTR [rsp+0x20],r8
  406806:	mov    DWORD PTR [rsp+0x10],0x1
  40680e:	mov    edx,0x1
  406813:	cmp    DWORD PTR [r14+0x100],0x0
  40681b:	jne    406867 <flatcc_builder_create_vtable@@Base+0x97>
  40681d:	cmp    DWORD PTR [r14+0x124],0x0
  406825:	jne    406867 <flatcc_builder_create_vtable@@Base+0x97>
  406827:	mov    ebx,DWORD PTR [r14+0xf4]
  40682e:	lea    eax,[r8+rbx*1]
  406832:	mov    DWORD PTR [r14+0xf4],eax
  406839:	mov    rdi,QWORD PTR [r14+0x38]
  40683d:	lea    rsi,[rsp+0x18]
  406842:	mov    ecx,ebx
  406844:	call   QWORD PTR [r14+0x48]
  406848:	test   eax,eax
  40684a:	jne    4068fb <flatcc_builder_create_vtable@@Base+0x12b>
  406850:	xor    eax,eax
  406852:	inc    ebx
  406854:	jne    4068ac <flatcc_builder_create_vtable@@Base+0xdc>
  406856:	jmp    4068b2 <flatcc_builder_create_vtable@@Base+0xe2>
  406858:	xor    edx,edx
  40685a:	xor    r8d,r8d
  40685d:	cmp    DWORD PTR [r14+0x100],0x0
  406865:	je     40681d <flatcc_builder_create_vtable@@Base+0x4d>
  406867:	cmp    r8,0x11
  40686b:	setb   al
  40686e:	lea    rcx,[r8-0x10]
  406872:	shr    rcx,0x20
  406876:	sete   cl
  406879:	test   r8d,r8d
  40687c:	je     4068bd <flatcc_builder_create_vtable@@Base+0xed>
  40687e:	or     al,cl
  406880:	je     4068bd <flatcc_builder_create_vtable@@Base+0xed>
  406882:	mov    ebx,DWORD PTR [r14+0xf0]
  406889:	sub    ebx,r8d
  40688c:	mov    rdi,QWORD PTR [r14+0x38]
  406890:	lea    rsi,[rsp+0x18]
  406895:	mov    ecx,ebx
  406897:	call   QWORD PTR [r14+0x48]
  40689b:	test   eax,eax
  40689d:	jne    4068dc <flatcc_builder_create_vtable@@Base+0x10c>
  40689f:	mov    DWORD PTR [r14+0xf0],ebx
  4068a6:	test   ebx,ebx
  4068a8:	je     4068b0 <flatcc_builder_create_vtable@@Base+0xe0>
  4068aa:	inc    ebx
  4068ac:	mov    eax,ebx
  4068ae:	jmp    4068b2 <flatcc_builder_create_vtable@@Base+0xe2>
  4068b0:	xor    eax,eax
  4068b2:	add    rsp,0x98
  4068b9:	pop    rbx
  4068ba:	pop    r14
  4068bc:	ret    
  4068bd:	lea    rdi,[rip+0x8ede]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4068c4:	lea    rsi,[rip+0x7d17]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4068cb:	lea    rcx,[rip+0x8d8f]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4068d2:	mov    edx,0x287
  4068d7:	call   403060 <__assert_fail@plt>
  4068dc:	lea    rdi,[rip+0x8ebf]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4068e3:	lea    rsi,[rip+0x7cf8]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4068ea:	lea    rcx,[rip+0x8d70]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4068f1:	mov    edx,0x28b
  4068f6:	call   403060 <__assert_fail@plt>
  4068fb:	lea    rdi,[rip+0x8ea0]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406902:	lea    rsi,[rip+0x7cd9]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406909:	lea    rcx,[rip+0x8e0d]        # 40f71d <flatcc_builder_padding_base@@Base+0x13bd>
  406910:	mov    edx,0x2a5
  406915:	call   403060 <__assert_fail@plt>
  40691a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406920 <flatcc_builder_create_cached_vtable@@Base>:
  406920:	push   rbp
  406921:	push   r15
  406923:	push   r14
  406925:	push   r13
  406927:	push   r12
  406929:	push   rbx
  40692a:	sub    rsp,0x28
  40692e:	mov    r15d,ecx
  406931:	mov    r12d,edx
  406934:	mov    QWORD PTR [rsp+0x18],rsi
  406939:	mov    r14,rdi
  40693c:	mov    rax,QWORD PTR [rdi+0xd8]
  406943:	test   rax,rax
  406946:	je     406a16 <flatcc_builder_create_cached_vtable@@Base+0xf6>
  40694c:	neg    al
  40694e:	shrx   r13d,r15d,eax
  406953:	shl    r13,0x2
  406957:	add    r13,QWORD PTR [r14+0xa8]
  40695e:	je     406aea <flatcc_builder_create_cached_vtable@@Base+0x1ca>
  406964:	mov    ebx,DWORD PTR [r13+0x0]
  406968:	movzx  eax,r12w
  40696c:	mov    QWORD PTR [rsp],rax
  406970:	test   ebx,ebx
  406972:	je     406af1 <flatcc_builder_create_cached_vtable@@Base+0x1d1>
  406978:	mov    rbp,QWORD PTR [r14+0x78]
  40697c:	mov    QWORD PTR [rsp+0x10],r14
  406981:	mov    r15,QWORD PTR [r14+0xb8]
  406988:	xor    eax,eax
  40698a:	mov    QWORD PTR [rsp+0x20],rax
  40698f:	mov    QWORD PTR [rsp+0x8],r13
  406994:	jmp    4069b3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  406996:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4069a0:	mov    ebx,DWORD PTR [r14+0xc]
  4069a4:	add    r14,0xc
  4069a8:	mov    r13,r14
  4069ab:	test   ebx,ebx
  4069ad:	je     406ad9 <flatcc_builder_create_cached_vtable@@Base+0x1b9>
  4069b3:	mov    eax,ebx
  4069b5:	lea    r14,[r15+rax*1]
  4069b9:	mov    esi,DWORD PTR [r15+rax*1+0x8]
  4069be:	cmp    WORD PTR [rbp+rsi*1+0x0],r12w
  4069c4:	jne    4069a0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4069c6:	add    rsi,rbp
  4069c9:	mov    rdi,QWORD PTR [rsp+0x18]
  4069ce:	mov    rdx,QWORD PTR [rsp]
  4069d2:	call   4030c0 <bcmp@plt>
  4069d7:	test   eax,eax
  4069d9:	jne    4069a0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  4069db:	mov    eax,DWORD PTR [r14+0x4]
  4069df:	mov    rcx,QWORD PTR [rsp+0x10]
  4069e4:	cmp    eax,DWORD PTR [rcx+0x100]
  4069ea:	je     406c5a <flatcc_builder_create_cached_vtable@@Base+0x33a>
  4069f0:	lea    r13,[r14+0xc]
  4069f4:	mov    ebx,DWORD PTR [r14+0xc]
  4069f8:	mov    rax,r14
  4069fb:	mov    QWORD PTR [rsp+0x20],r14
  406a00:	test   ebx,ebx
  406a02:	jne    4069b3 <flatcc_builder_create_cached_vtable@@Base+0x93>
  406a04:	mov    r15,r14
  406a07:	mov    r14,QWORD PTR [rsp+0x10]
  406a0c:	mov    r13,QWORD PTR [rsp+0x8]
  406a11:	jmp    406af4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  406a16:	cmp    DWORD PTR [r14+0xe4],0x0
  406a1e:	jne    406c98 <flatcc_builder_create_cached_vtable@@Base+0x378>
  406a24:	lea    r13,[r14+0xb8]
  406a2b:	cmp    QWORD PTR [r14+0xc0],0xf
  406a33:	ja     406a55 <flatcc_builder_create_cached_vtable@@Base+0x135>
  406a35:	mov    rdi,QWORD PTR [r14+0x40]
  406a39:	mov    edx,0x10
  406a3e:	mov    rsi,r13
  406a41:	xor    ecx,ecx
  406a43:	mov    r8d,0x6
  406a49:	call   QWORD PTR [r14+0x50]
  406a4d:	test   eax,eax
  406a4f:	jne    406c79 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406a55:	xor    ebx,ebx
  406a57:	cmp    QWORD PTR [r13+0x0],0x0
  406a5c:	je     406c42 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406a62:	lea    rsi,[r14+0xa8]
  406a69:	mov    DWORD PTR [r14+0xe4],0x10
  406a74:	mov    rdi,QWORD PTR [r14+0x40]
  406a78:	mov    ebp,0x100
  406a7d:	mov    edx,0x100
  406a82:	mov    ecx,0x1
  406a87:	mov    r8d,0x5
  406a8d:	call   QWORD PTR [r14+0x50]
  406a91:	test   eax,eax
  406a93:	jne    406c42 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406a99:	mov    rax,QWORD PTR [r14+0xb0]
  406aa0:	mov    rcx,rbp
  406aa3:	add    rbp,rbp
  406aa6:	cmp    rbp,rax
  406aa9:	jbe    406aa0 <flatcc_builder_create_cached_vtable@@Base+0x180>
  406aab:	shr    rcx,0x2
  406aaf:	mov    rax,0xffffffffffffffff
  406ab6:	mov    edx,0x1
  406abb:	nop    DWORD PTR [rax+rax*1+0x0]
  406ac0:	inc    rax
  406ac3:	shlx   rsi,rdx,rax
  406ac8:	cmp    rsi,rcx
  406acb:	jb     406ac0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  406acd:	mov    QWORD PTR [r14+0xd8],rax
  406ad4:	jmp    40694c <flatcc_builder_create_cached_vtable@@Base+0x2c>
  406ad9:	mov    r14,QWORD PTR [rsp+0x10]
  406ade:	mov    r13,QWORD PTR [rsp+0x8]
  406ae3:	mov    r15,QWORD PTR [rsp+0x20]
  406ae8:	jmp    406af4 <flatcc_builder_create_cached_vtable@@Base+0x1d4>
  406aea:	xor    ebx,ebx
  406aec:	jmp    406c42 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406af1:	xor    r15d,r15d
  406af4:	mov    r12d,DWORD PTR [r14+0xe4]
  406afb:	lea    rbp,[r14+0xb8]
  406b02:	lea    rdx,[r12+0x10]
  406b07:	cmp    rdx,QWORD PTR [r14+0xc0]
  406b0e:	jbe    406b2b <flatcc_builder_create_cached_vtable@@Base+0x20b>
  406b10:	mov    rdi,QWORD PTR [r14+0x40]
  406b14:	mov    rsi,rbp
  406b17:	xor    ecx,ecx
  406b19:	mov    r8d,0x6
  406b1f:	call   QWORD PTR [r14+0x50]
  406b23:	test   eax,eax
  406b25:	jne    406c79 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406b2b:	xor    ebx,ebx
  406b2d:	add    r12,QWORD PTR [rbp+0x0]
  406b31:	je     406c42 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406b37:	mov    eax,DWORD PTR [r14+0xe4]
  406b3e:	mov    ecx,DWORD PTR [r14+0x100]
  406b45:	lea    edx,[rax+0x10]
  406b48:	mov    DWORD PTR [r14+0xe4],edx
  406b4f:	mov    DWORD PTR [r12+0x4],ecx
  406b54:	mov    ecx,DWORD PTR [r13+0x0]
  406b58:	mov    DWORD PTR [r12+0xc],ecx
  406b5d:	mov    DWORD PTR [r13+0x0],eax
  406b61:	mov    rdi,r14
  406b64:	mov    rsi,QWORD PTR [rsp+0x18]
  406b69:	mov    rdx,QWORD PTR [rsp]
  406b6d:	call   4067d0 <flatcc_builder_create_vtable@@Base>
  406b72:	mov    DWORD PTR [r12],eax
  406b76:	test   eax,eax
  406b78:	je     406c42 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406b7e:	test   r15,r15
  406b81:	je     406b91 <flatcc_builder_create_cached_vtable@@Base+0x271>
  406b83:	mov    eax,DWORD PTR [r15+0x8]
  406b87:	mov    DWORD PTR [r12+0x8],eax
  406b8c:	jmp    406c3e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  406b91:	mov    rax,QWORD PTR [r14+0x118]
  406b98:	mov    ebp,DWORD PTR [r14+0xe0]
  406b9f:	test   rax,rax
  406ba2:	je     406be5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  406ba4:	mov    rcx,QWORD PTR [rsp]
  406ba8:	add    ecx,ebp
  406baa:	cmp    rax,rcx
  406bad:	jae    406be5 <flatcc_builder_create_cached_vtable@@Base+0x2c5>
  406baf:	cmp    QWORD PTR [r14+0xd8],0x0
  406bb7:	je     406c3e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  406bbd:	mov    rdi,QWORD PTR [r14+0xa8]
  406bc4:	mov    rdx,QWORD PTR [r14+0xb0]
  406bcb:	xor    esi,esi
  406bcd:	call   403070 <memset@plt>
  406bd2:	movabs rax,0x1000000000
  406bdc:	mov    QWORD PTR [r14+0xe0],rax
  406be3:	jmp    406c3e <flatcc_builder_create_cached_vtable@@Base+0x31e>
  406be5:	lea    rbx,[r14+0x78]
  406be9:	mov    rax,QWORD PTR [rsp]
  406bed:	lea    rdx,[rax+rbp*1]
  406bf1:	cmp    rdx,QWORD PTR [r14+0x80]
  406bf8:	jbe    406c11 <flatcc_builder_create_cached_vtable@@Base+0x2f1>
  406bfa:	mov    rdi,QWORD PTR [r14+0x40]
  406bfe:	mov    rsi,rbx
  406c01:	xor    ecx,ecx
  406c03:	mov    r8d,0x2
  406c09:	call   QWORD PTR [r14+0x50]
  406c0d:	test   eax,eax
  406c0f:	jne    406c79 <flatcc_builder_create_cached_vtable@@Base+0x359>
  406c11:	add    rbp,QWORD PTR [rbx]
  406c14:	je     406c53 <flatcc_builder_create_cached_vtable@@Base+0x333>
  406c16:	mov    eax,DWORD PTR [r14+0xe0]
  406c1d:	mov    DWORD PTR [r12+0x8],eax
  406c22:	mov    rdx,QWORD PTR [rsp]
  406c26:	mov    ecx,edx
  406c28:	add    ecx,eax
  406c2a:	mov    DWORD PTR [r14+0xe0],ecx
  406c31:	mov    rdi,rbp
  406c34:	mov    rsi,QWORD PTR [rsp+0x18]
  406c39:	call   4030a0 <memcpy@plt>
  406c3e:	mov    ebx,DWORD PTR [r12]
  406c42:	mov    eax,ebx
  406c44:	add    rsp,0x28
  406c48:	pop    rbx
  406c49:	pop    r12
  406c4b:	pop    r13
  406c4d:	pop    r14
  406c4f:	pop    r15
  406c51:	pop    rbp
  406c52:	ret    
  406c53:	mov    ebx,0xffffffff
  406c58:	jmp    406c42 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406c5a:	mov    rcx,QWORD PTR [rsp+0x8]
  406c5f:	cmp    r13,rcx
  406c62:	je     406c74 <flatcc_builder_create_cached_vtable@@Base+0x354>
  406c64:	mov    eax,DWORD PTR [r14+0xc]
  406c68:	mov    DWORD PTR [r13+0x0],eax
  406c6c:	mov    eax,DWORD PTR [rcx]
  406c6e:	mov    DWORD PTR [r14+0xc],eax
  406c72:	mov    DWORD PTR [rcx],ebx
  406c74:	mov    ebx,DWORD PTR [r14]
  406c77:	jmp    406c42 <flatcc_builder_create_cached_vtable@@Base+0x322>
  406c79:	lea    rdi,[rip+0x8b22]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406c80:	lea    rsi,[rip+0x795b]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406c87:	lea    rcx,[rip+0x894e]        # 40f5dc <flatcc_builder_padding_base@@Base+0x127c>
  406c8e:	mov    edx,0x134
  406c93:	call   403060 <__assert_fail@plt>
  406c98:	lea    rdi,[rip+0x8ac7]        # 40f766 <flatcc_builder_padding_base@@Base+0x1406>
  406c9f:	lea    rsi,[rip+0x793c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406ca6:	lea    rcx,[rip+0x8ac8]        # 40f775 <flatcc_builder_padding_base@@Base+0x1415>
  406cad:	mov    edx,0x156
  406cb2:	call   403060 <__assert_fail@plt>
  406cb7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406cc0 <flatcc_builder_create_table@@Base>:
  406cc0:	push   rbp
  406cc1:	push   r14
  406cc3:	push   rbx
  406cc4:	sub    rsp,0xa0
  406ccb:	test   r9d,r9d
  406cce:	js     406ee3 <flatcc_builder_create_table@@Base+0x223>
  406cd4:	mov    r14,rdi
  406cd7:	mov    edi,DWORD PTR [rsp+0xc0]
  406cde:	test   dil,0x1
  406ce2:	je     406f02 <flatcc_builder_create_table@@Base+0x242>
  406ce8:	cmp    cx,0x4
  406cec:	mov    eax,0x4
  406cf1:	cmova  eax,ecx
  406cf4:	cmp    WORD PTR [r14+0xe8],ax
  406cfc:	jae    406d06 <flatcc_builder_create_table@@Base+0x46>
  406cfe:	mov    WORD PTR [r14+0xe8],ax
  406d06:	mov    ebp,DWORD PTR [r14+0xf0]
  406d0d:	sub    ebp,edx
  406d0f:	movzx  r10d,ax
  406d13:	dec    r10d
  406d16:	and    r10d,ebp
  406d19:	add    edi,r10d
  406d1c:	neg    edi
  406d1e:	lea    ecx,[rdi+rbp*1]
  406d21:	add    ecx,0xfffffffd
  406d24:	mov    DWORD PTR [rsp+0xc],ecx
  406d28:	test   r9d,r9d
  406d2b:	jle    406de6 <flatcc_builder_create_table@@Base+0x126>
  406d31:	add    ebp,0xfffffffc
  406d34:	sub    ebp,r10d
  406d37:	mov    ecx,0xfffffffc
  406d3c:	sub    ecx,ebp
  406d3e:	mov    edi,r9d
  406d41:	lea    rbx,[rdi-0x1]
  406d45:	mov    r9d,edi
  406d48:	and    r9d,0x3
  406d4c:	cmp    rbx,0x3
  406d50:	jae    406d5e <flatcc_builder_create_table@@Base+0x9e>
  406d52:	xor    ebx,ebx
  406d54:	test   r9,r9
  406d57:	jne    406dbd <flatcc_builder_create_table@@Base+0xfd>
  406d59:	jmp    406de6 <flatcc_builder_create_table@@Base+0x126>
  406d5e:	sub    rdi,r9
  406d61:	xor    ebx,ebx
  406d63:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406d6d:	nop    DWORD PTR [rax]
  406d70:	movzx  eax,WORD PTR [r8+rbx*2]
  406d75:	mov    ebp,DWORD PTR [rax+rsi*1]
  406d78:	add    ebp,ecx
  406d7a:	sub    ebp,eax
  406d7c:	mov    DWORD PTR [rax+rsi*1],ebp
  406d7f:	movzx  eax,WORD PTR [r8+rbx*2+0x2]
  406d85:	mov    ebp,DWORD PTR [rax+rsi*1]
  406d88:	add    ebp,ecx
  406d8a:	sub    ebp,eax
  406d8c:	mov    DWORD PTR [rax+rsi*1],ebp
  406d8f:	movzx  eax,WORD PTR [r8+rbx*2+0x4]
  406d95:	mov    ebp,DWORD PTR [rax+rsi*1]
  406d98:	add    ebp,ecx
  406d9a:	sub    ebp,eax
  406d9c:	mov    DWORD PTR [rax+rsi*1],ebp
  406d9f:	movzx  eax,WORD PTR [r8+rbx*2+0x6]
  406da5:	mov    ebp,DWORD PTR [rax+rsi*1]
  406da8:	add    ebp,ecx
  406daa:	sub    ebp,eax
  406dac:	mov    DWORD PTR [rax+rsi*1],ebp
  406daf:	add    rbx,0x4
  406db3:	cmp    rdi,rbx
  406db6:	jne    406d70 <flatcc_builder_create_table@@Base+0xb0>
  406db8:	test   r9,r9
  406dbb:	je     406de6 <flatcc_builder_create_table@@Base+0x126>
  406dbd:	lea    rdi,[r8+rbx*2]
  406dc1:	xor    ebx,ebx
  406dc3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406dcd:	nop    DWORD PTR [rax]
  406dd0:	movzx  eax,WORD PTR [rdi+rbx*2]
  406dd4:	mov    ebp,DWORD PTR [rax+rsi*1]
  406dd7:	add    ebp,ecx
  406dd9:	sub    ebp,eax
  406ddb:	mov    DWORD PTR [rax+rsi*1],ebp
  406dde:	inc    rbx
  406de1:	cmp    r9,rbx
  406de4:	jne    406dd0 <flatcc_builder_create_table@@Base+0x110>
  406de6:	mov    QWORD PTR [rsp+0x10],0x4
  406def:	lea    rax,[rsp+0xc]
  406df4:	mov    QWORD PTR [rsp+0x20],rax
  406df9:	mov    QWORD PTR [rsp+0x28],0x4
  406e02:	mov    DWORD PTR [rsp+0x18],0x1
  406e0a:	test   rdx,rdx
  406e0d:	je     406eae <flatcc_builder_create_table@@Base+0x1ee>
  406e13:	lea    r8,[rdx+0x4]
  406e17:	mov    QWORD PTR [rsp+0x10],r8
  406e1c:	mov    QWORD PTR [rsp+0x30],rsi
  406e21:	mov    QWORD PTR [rsp+0x38],rdx
  406e26:	mov    DWORD PTR [rsp+0x18],0x2
  406e2e:	mov    edx,0x2
  406e33:	test   r10d,r10d
  406e36:	je     406e5d <flatcc_builder_create_table@@Base+0x19d>
  406e38:	add    r8,r10
  406e3b:	mov    QWORD PTR [rsp+0x10],r8
  406e40:	mov    eax,edx
  406e42:	shl    rax,0x4
  406e46:	lea    rcx,[rip+0x7513]        # 40e360 <flatcc_builder_padding_base@@Base>
  406e4d:	mov    QWORD PTR [rsp+rax*1+0x20],rcx
  406e52:	mov    QWORD PTR [rsp+rax*1+0x28],r10
  406e57:	inc    edx
  406e59:	mov    DWORD PTR [rsp+0x18],edx
  406e5d:	cmp    r8,0x11
  406e61:	setb   al
  406e64:	lea    rcx,[r8-0x10]
  406e68:	shr    rcx,0x20
  406e6c:	sete   cl
  406e6f:	test   r8d,r8d
  406e72:	jle    406ec4 <flatcc_builder_create_table@@Base+0x204>
  406e74:	or     al,cl
  406e76:	je     406ec4 <flatcc_builder_create_table@@Base+0x204>
  406e78:	mov    ebp,DWORD PTR [r14+0xf0]
  406e7f:	sub    ebp,r8d
  406e82:	mov    rdi,QWORD PTR [r14+0x38]
  406e86:	lea    rsi,[rsp+0x20]
  406e8b:	mov    ecx,ebp
  406e8d:	call   QWORD PTR [r14+0x48]
  406e91:	test   eax,eax
  406e93:	jne    406f21 <flatcc_builder_create_table@@Base+0x261>
  406e99:	mov    DWORD PTR [r14+0xf0],ebp
  406ea0:	mov    eax,ebp
  406ea2:	add    rsp,0xa0
  406ea9:	pop    rbx
  406eaa:	pop    r14
  406eac:	pop    rbp
  406ead:	ret    
  406eae:	mov    r8d,0x4
  406eb4:	mov    edx,0x1
  406eb9:	test   r10d,r10d
  406ebc:	jne    406e38 <flatcc_builder_create_table@@Base+0x178>
  406ec2:	jmp    406e5d <flatcc_builder_create_table@@Base+0x19d>
  406ec4:	lea    rdi,[rip+0x88d7]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406ecb:	lea    rsi,[rip+0x7710]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406ed2:	lea    rcx,[rip+0x8788]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  406ed9:	mov    edx,0x287
  406ede:	call   403060 <__assert_fail@plt>
  406ee3:	lea    rdi,[rip+0x7e6e]        # 40ed58 <flatcc_builder_padding_base@@Base+0x9f8>
  406eea:	lea    rsi,[rip+0x76f1]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406ef1:	lea    rcx,[rip+0x7e72]        # 40ed6a <flatcc_builder_padding_base@@Base+0xa0a>
  406ef8:	mov    edx,0x4d5
  406efd:	call   403060 <__assert_fail@plt>
  406f02:	lea    rdi,[rip+0x7efd]        # 40ee06 <flatcc_builder_padding_base@@Base+0xaa6>
  406f09:	lea    rsi,[rip+0x76d2]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406f10:	lea    rcx,[rip+0x7e53]        # 40ed6a <flatcc_builder_padding_base@@Base+0xa0a>
  406f17:	mov    edx,0x4db
  406f1c:	call   403060 <__assert_fail@plt>
  406f21:	lea    rdi,[rip+0x887a]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  406f28:	lea    rsi,[rip+0x76b3]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406f2f:	lea    rcx,[rip+0x872b]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  406f36:	mov    edx,0x28b
  406f3b:	call   403060 <__assert_fail@plt>

0000000000406f40 <flatcc_builder_check_required_field@@Base>:
  406f40:	push   rax
  406f41:	mov    rax,QWORD PTR [rdi+0x30]
  406f45:	cmp    WORD PTR [rax+0xe],0x3
  406f4a:	jne    406f67 <flatcc_builder_check_required_field@@Base+0x27>
  406f4c:	xor    eax,eax
  406f4e:	cmp    WORD PTR [rdi+0x10],si
  406f52:	jbe    406f65 <flatcc_builder_check_required_field@@Base+0x25>
  406f54:	mov    rcx,QWORD PTR [rdi+0x8]
  406f58:	movzx  edx,si
  406f5b:	xor    eax,eax
  406f5d:	cmp    WORD PTR [rcx+rdx*2],0x0
  406f62:	setne  al
  406f65:	pop    rcx
  406f66:	ret    
  406f67:	lea    rdi,[rip+0x7ea3]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  406f6e:	lea    rsi,[rip+0x766d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406f75:	lea    rcx,[rip+0x7ec0]        # 40ee3c <flatcc_builder_padding_base@@Base+0xadc>
  406f7c:	mov    edx,0x4f8
  406f81:	call   403060 <__assert_fail@plt>
  406f86:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406f90 <flatcc_builder_check_union_field@@Base>:
  406f90:	push   rax
  406f91:	mov    rax,QWORD PTR [rdi+0x30]
  406f95:	cmp    WORD PTR [rax+0xe],0x3
  406f9a:	jne    406fe4 <flatcc_builder_check_union_field@@Base+0x54>
  406f9c:	test   si,si
  406f9f:	je     406fce <flatcc_builder_check_union_field@@Base+0x3e>
  406fa1:	cmp    WORD PTR [rdi+0x10],si
  406fa5:	jbe    406fce <flatcc_builder_check_union_field@@Base+0x3e>
  406fa7:	movzx  eax,si
  406faa:	mov    rcx,QWORD PTR [rdi+0x8]
  406fae:	movzx  edx,WORD PTR [rcx+rax*2-0x2]
  406fb3:	test   rdx,rdx
  406fb6:	je     406fd2 <flatcc_builder_check_union_field@@Base+0x42>
  406fb8:	mov    rsi,QWORD PTR [rdi+0x18]
  406fbc:	cmp    BYTE PTR [rsi+rdx*1],0x0
  406fc0:	movzx  eax,WORD PTR [rcx+rax*2]
  406fc4:	je     406fd9 <flatcc_builder_check_union_field@@Base+0x49>
  406fc6:	test   ax,ax
  406fc9:	setne  al
  406fcc:	jmp    406fdf <flatcc_builder_check_union_field@@Base+0x4f>
  406fce:	xor    eax,eax
  406fd0:	jmp    406fdf <flatcc_builder_check_union_field@@Base+0x4f>
  406fd2:	cmp    WORD PTR [rcx+rax*2],0x0
  406fd7:	jmp    406fdc <flatcc_builder_check_union_field@@Base+0x4c>
  406fd9:	test   ax,ax
  406fdc:	sete   al
  406fdf:	movzx  eax,al
  406fe2:	pop    rcx
  406fe3:	ret    
  406fe4:	lea    rdi,[rip+0x7e26]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  406feb:	lea    rsi,[rip+0x75f0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  406ff2:	lea    rcx,[rip+0x7e96]        # 40ee8f <flatcc_builder_padding_base@@Base+0xb2f>
  406ff9:	mov    edx,0x4ff
  406ffe:	call   403060 <__assert_fail@plt>
  407003:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40700d:	nop    DWORD PTR [rax]

0000000000407010 <flatcc_builder_check_required@@Base>:
  407010:	push   rax
  407011:	mov    rax,QWORD PTR [rdi+0x30]
  407015:	cmp    WORD PTR [rax+0xe],0x3
  40701a:	jne    407059 <flatcc_builder_check_required@@Base+0x49>
  40701c:	movzx  ecx,WORD PTR [rdi+0x10]
  407020:	xor    eax,eax
  407022:	cmp    ecx,edx
  407024:	jl     407053 <flatcc_builder_check_required@@Base+0x43>
  407026:	mov    eax,0x1
  40702b:	test   edx,edx
  40702d:	jle    407053 <flatcc_builder_check_required@@Base+0x43>
  40702f:	mov    rcx,QWORD PTR [rdi+0x8]
  407033:	mov    r8d,edx
  407036:	xor    edi,edi
  407038:	nop    DWORD PTR [rax+rax*1+0x0]
  407040:	movzx  edx,WORD PTR [rsi+rdi*2]
  407044:	cmp    WORD PTR [rcx+rdx*2],0x0
  407049:	je     407055 <flatcc_builder_check_required@@Base+0x45>
  40704b:	inc    rdi
  40704e:	cmp    r8,rdi
  407051:	jne    407040 <flatcc_builder_check_required@@Base+0x30>
  407053:	pop    rcx
  407054:	ret    
  407055:	xor    eax,eax
  407057:	pop    rcx
  407058:	ret    
  407059:	lea    rdi,[rip+0x7db1]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407060:	lea    rsi,[rip+0x757b]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407067:	lea    rcx,[rip+0x7e71]        # 40eedf <flatcc_builder_padding_base@@Base+0xb7f>
  40706e:	mov    edx,0x511
  407073:	call   403060 <__assert_fail@plt>
  407078:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407080 <flatcc_builder_end_table@@Base>:
  407080:	push   rbp
  407081:	push   r15
  407083:	push   r14
  407085:	push   r12
  407087:	push   rbx
  407088:	sub    rsp,0x10
  40708c:	mov    rax,QWORD PTR [rdi+0x30]
  407090:	cmp    WORD PTR [rax+0xe],0x3
  407095:	jne    4071e5 <flatcc_builder_end_table@@Base+0x165>
  40709b:	mov    rbx,rdi
  40709e:	mov    rax,QWORD PTR [rdi+0x8]
  4070a2:	mov    ecx,DWORD PTR [rdi+0x10]
  4070a5:	lea    ecx,[rcx+rcx*1]
  4070a8:	add    ecx,0x4
  4070ab:	mov    WORD PTR [rax-0x4],cx
  4070af:	mov    edx,DWORD PTR [rdi+0x20]
  4070b2:	add    edx,0x4
  4070b5:	mov    WORD PTR [rax-0x2],dx
  4070b9:	lea    r12,[rax-0x4]
  4070bd:	movzx  ebp,cx
  4070c0:	mov    eax,DWORD PTR [rdi+0x14]
  4070c3:	xor    eax,ebp
  4070c5:	imul   eax,eax,0x9e3779b1
  4070cb:	movzx  ecx,dx
  4070ce:	xor    ecx,eax
  4070d0:	imul   ecx,ecx,0x9e3779b1
  4070d6:	mov    DWORD PTR [rdi+0x14],ecx
  4070d9:	mov    rsi,r12
  4070dc:	mov    edx,ebp
  4070de:	call   406920 <flatcc_builder_create_cached_vtable@@Base>
  4070e3:	test   eax,eax
  4070e5:	je     4071d2 <flatcc_builder_end_table@@Base+0x152>
  4070eb:	mov    r14d,eax
  4070ee:	xor    r15d,r15d
  4070f1:	mov    rdi,r12
  4070f4:	xor    esi,esi
  4070f6:	mov    rdx,rbp
  4070f9:	call   403070 <memset@plt>
  4070fe:	mov    rax,QWORD PTR [rbx+0x30]
  407102:	mov    r8d,DWORD PTR [rax+0x14]
  407106:	add    r8,QWORD PTR [rbx+0x88]
  40710d:	mov    r9,QWORD PTR [rbx]
  407110:	mov    rsi,QWORD PTR [rbx+0x18]
  407114:	sub    r9,r8
  407117:	shr    r9,1
  40711a:	mov    edx,DWORD PTR [rbx+0x20]
  40711d:	movzx  ecx,WORD PTR [rbx+0xea]
  407124:	mov    DWORD PTR [rsp],r14d
  407128:	mov    rdi,rbx
  40712b:	call   406cc0 <flatcc_builder_create_table@@Base>
  407130:	test   eax,eax
  407132:	je     4071d5 <flatcc_builder_end_table@@Base+0x155>
  407138:	mov    r14d,eax
  40713b:	mov    rax,QWORD PTR [rbx+0x30]
  40713f:	mov    ecx,DWORD PTR [rax+0x18]
  407142:	mov    DWORD PTR [rbx+0x14],ecx
  407145:	movzx  ecx,WORD PTR [rax+0x1c]
  407149:	mov    WORD PTR [rbx+0x10],cx
  40714d:	mov    ecx,DWORD PTR [rax+0x10]
  407150:	add    rcx,QWORD PTR [rbx+0x58]
  407154:	mov    QWORD PTR [rbx+0x8],rcx
  407158:	mov    eax,DWORD PTR [rax+0x14]
  40715b:	add    rax,QWORD PTR [rbx+0x88]
  407162:	mov    QWORD PTR [rbx],rax
  407165:	mov    rdi,QWORD PTR [rbx+0x18]
  407169:	mov    edx,DWORD PTR [rbx+0x20]
  40716c:	xor    esi,esi
  40716e:	call   403070 <memset@plt>
  407173:	mov    rax,QWORD PTR [rbx+0x30]
  407177:	mov    ecx,DWORD PTR [rax+0x8]
  40717a:	mov    DWORD PTR [rbx+0x20],ecx
  40717d:	mov    ecx,DWORD PTR [rax]
  40717f:	mov    DWORD PTR [rbx+0x28],ecx
  407182:	mov    edx,DWORD PTR [rax+0x4]
  407185:	mov    rsi,rcx
  407188:	add    rsi,QWORD PTR [rbx+0x68]
  40718c:	mov    QWORD PTR [rbx+0x18],rsi
  407190:	mov    esi,DWORD PTR [rbx+0x70]
  407193:	sub    esi,ecx
  407195:	cmp    esi,edx
  407197:	cmova  esi,edx
  40719a:	mov    DWORD PTR [rbx+0x24],esi
  40719d:	movzx  ecx,WORD PTR [rbx+0xea]
  4071a4:	cmp    WORD PTR [rbx+0xe8],cx
  4071ab:	jae    4071b4 <flatcc_builder_end_table@@Base+0x134>
  4071ad:	mov    WORD PTR [rbx+0xe8],cx
  4071b4:	movzx  ecx,WORD PTR [rax+0xc]
  4071b8:	mov    WORD PTR [rbx+0xea],cx
  4071bf:	add    rax,0xffffffffffffffdc
  4071c3:	mov    QWORD PTR [rbx+0x30],rax
  4071c7:	dec    DWORD PTR [rbx+0x104]
  4071cd:	mov    r15d,r14d
  4071d0:	jmp    4071d5 <flatcc_builder_end_table@@Base+0x155>
  4071d2:	xor    r15d,r15d
  4071d5:	mov    eax,r15d
  4071d8:	add    rsp,0x10
  4071dc:	pop    rbx
  4071dd:	pop    r12
  4071df:	pop    r14
  4071e1:	pop    r15
  4071e3:	pop    rbp
  4071e4:	ret    
  4071e5:	lea    rdi,[rip+0x7c25]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  4071ec:	lea    rsi,[rip+0x73ef]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4071f3:	lea    rcx,[rip+0x7d3f]        # 40ef39 <flatcc_builder_padding_base@@Base+0xbd9>
  4071fa:	mov    edx,0x525
  4071ff:	call   403060 <__assert_fail@plt>
  407204:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40720e:	xchg   ax,ax

0000000000407210 <flatcc_builder_create_vector@@Base>:
  407210:	push   rbp
  407211:	push   rbx
  407212:	sub    rsp,0x98
  407219:	cmp    rdx,r9
  40721c:	ja     407346 <flatcc_builder_create_vector@@Base+0x136>
  407222:	mov    rbx,rdi
  407225:	cmp    r8w,0x4
  40722a:	mov    eax,0x4
  40722f:	cmova  eax,r8d
  407233:	cmp    WORD PTR [rdi+0xe8],ax
  40723a:	jae    407243 <flatcc_builder_create_vector@@Base+0x33>
  40723c:	mov    WORD PTR [rbx+0xe8],ax
  407243:	imul   ecx,edx
  407246:	mov    DWORD PTR [rsp+0x4],edx
  40724a:	mov    ebp,DWORD PTR [rbx+0xf0]
  407250:	mov    edx,ebp
  407252:	sub    edx,ecx
  407254:	movzx  eax,ax
  407257:	dec    eax
  407259:	and    eax,edx
  40725b:	mov    QWORD PTR [rsp+0x8],0x4
  407264:	lea    rdx,[rsp+0x4]
  407269:	mov    QWORD PTR [rsp+0x18],rdx
  40726e:	mov    QWORD PTR [rsp+0x20],0x4
  407277:	mov    DWORD PTR [rsp+0x10],0x1
  40727f:	test   ecx,ecx
  407281:	je     407316 <flatcc_builder_create_vector@@Base+0x106>
  407287:	mov    ecx,ecx
  407289:	lea    r8,[rcx+0x4]
  40728d:	mov    QWORD PTR [rsp+0x8],r8
  407292:	mov    QWORD PTR [rsp+0x28],rsi
  407297:	mov    QWORD PTR [rsp+0x30],rcx
  40729c:	mov    DWORD PTR [rsp+0x10],0x2
  4072a4:	mov    edx,0x2
  4072a9:	test   eax,eax
  4072ab:	je     4072d4 <flatcc_builder_create_vector@@Base+0xc4>
  4072ad:	mov    eax,eax
  4072af:	add    r8,rax
  4072b2:	mov    QWORD PTR [rsp+0x8],r8
  4072b7:	mov    ecx,edx
  4072b9:	shl    rcx,0x4
  4072bd:	lea    rsi,[rip+0x709c]        # 40e360 <flatcc_builder_padding_base@@Base>
  4072c4:	mov    QWORD PTR [rsp+rcx*1+0x18],rsi
  4072c9:	mov    QWORD PTR [rsp+rcx*1+0x20],rax
  4072ce:	inc    edx
  4072d0:	mov    DWORD PTR [rsp+0x10],edx
  4072d4:	cmp    r8,0x11
  4072d8:	setb   al
  4072db:	lea    rcx,[r8-0x10]
  4072df:	shr    rcx,0x20
  4072e3:	sete   cl
  4072e6:	test   r8d,r8d
  4072e9:	jle    407327 <flatcc_builder_create_vector@@Base+0x117>
  4072eb:	or     al,cl
  4072ed:	je     407327 <flatcc_builder_create_vector@@Base+0x117>
  4072ef:	sub    ebp,r8d
  4072f2:	mov    rdi,QWORD PTR [rbx+0x38]
  4072f6:	lea    rsi,[rsp+0x18]
  4072fb:	mov    ecx,ebp
  4072fd:	call   QWORD PTR [rbx+0x48]
  407300:	test   eax,eax
  407302:	jne    407365 <flatcc_builder_create_vector@@Base+0x155>
  407304:	mov    DWORD PTR [rbx+0xf0],ebp
  40730a:	mov    eax,ebp
  40730c:	add    rsp,0x98
  407313:	pop    rbx
  407314:	pop    rbp
  407315:	ret    
  407316:	mov    r8d,0x4
  40731c:	mov    edx,0x1
  407321:	test   eax,eax
  407323:	jne    4072ad <flatcc_builder_create_vector@@Base+0x9d>
  407325:	jmp    4072d4 <flatcc_builder_create_vector@@Base+0xc4>
  407327:	lea    rdi,[rip+0x8474]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40732e:	lea    rsi,[rip+0x72ad]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407335:	lea    rcx,[rip+0x8325]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40733c:	mov    edx,0x287
  407341:	call   403060 <__assert_fail@plt>
  407346:	lea    rdi,[rip+0x7c2e]        # 40ef7b <flatcc_builder_padding_base@@Base+0xc1b>
  40734d:	lea    rsi,[rip+0x728e]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407354:	lea    rcx,[rip+0x7c33]        # 40ef8e <flatcc_builder_padding_base@@Base+0xc2e>
  40735b:	mov    edx,0x555
  407360:	call   403060 <__assert_fail@plt>
  407365:	lea    rdi,[rip+0x8436]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  40736c:	lea    rsi,[rip+0x726f]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407373:	lea    rcx,[rip+0x82e7]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  40737a:	mov    edx,0x28b
  40737f:	call   403060 <__assert_fail@plt>
  407384:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40738e:	xchg   ax,ax

0000000000407390 <flatcc_builder_end_vector@@Base>:
  407390:	push   rbp
  407391:	push   rbx
  407392:	push   rax
  407393:	mov    rax,QWORD PTR [rdi+0x30]
  407397:	cmp    WORD PTR [rax+0xe],0x4
  40739c:	jne    407437 <flatcc_builder_end_vector@@Base+0xa7>
  4073a2:	mov    rbx,rdi
  4073a5:	mov    rsi,QWORD PTR [rdi+0x18]
  4073a9:	mov    ecx,DWORD PTR [rax+0x10]
  4073ac:	mov    edx,DWORD PTR [rax+0x14]
  4073af:	movzx  r8d,WORD PTR [rdi+0xea]
  4073b7:	mov    r9d,DWORD PTR [rax+0x18]
  4073bb:	call   407210 <flatcc_builder_create_vector@@Base>
  4073c0:	mov    ebp,eax
  4073c2:	test   eax,eax
  4073c4:	je     40742e <flatcc_builder_end_vector@@Base+0x9e>
  4073c6:	mov    rdi,QWORD PTR [rbx+0x18]
  4073ca:	mov    edx,DWORD PTR [rbx+0x20]
  4073cd:	xor    esi,esi
  4073cf:	call   403070 <memset@plt>
  4073d4:	mov    rax,QWORD PTR [rbx+0x30]
  4073d8:	mov    ecx,DWORD PTR [rax+0x8]
  4073db:	mov    DWORD PTR [rbx+0x20],ecx
  4073de:	mov    ecx,DWORD PTR [rax]
  4073e0:	mov    DWORD PTR [rbx+0x28],ecx
  4073e3:	mov    edx,DWORD PTR [rax+0x4]
  4073e6:	mov    rsi,rcx
  4073e9:	add    rsi,QWORD PTR [rbx+0x68]
  4073ed:	mov    QWORD PTR [rbx+0x18],rsi
  4073f1:	mov    esi,DWORD PTR [rbx+0x70]
  4073f4:	sub    esi,ecx
  4073f6:	cmp    esi,edx
  4073f8:	cmova  esi,edx
  4073fb:	mov    DWORD PTR [rbx+0x24],esi
  4073fe:	movzx  ecx,WORD PTR [rbx+0xea]
  407405:	cmp    WORD PTR [rbx+0xe8],cx
  40740c:	jae    407415 <flatcc_builder_end_vector@@Base+0x85>
  40740e:	mov    WORD PTR [rbx+0xe8],cx
  407415:	movzx  ecx,WORD PTR [rax+0xc]
  407419:	mov    WORD PTR [rbx+0xea],cx
  407420:	add    rax,0xffffffffffffffdc
  407424:	mov    QWORD PTR [rbx+0x30],rax
  407428:	dec    DWORD PTR [rbx+0x104]
  40742e:	mov    eax,ebp
  407430:	add    rsp,0x8
  407434:	pop    rbx
  407435:	pop    rbp
  407436:	ret    
  407437:	lea    rdi,[rip+0x74e1]        # 40e91f <flatcc_builder_padding_base@@Base+0x5bf>
  40743e:	lea    rsi,[rip+0x719d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407445:	lea    rcx,[rip+0x7bb8]        # 40f004 <flatcc_builder_padding_base@@Base+0xca4>
  40744c:	mov    edx,0x578
  407451:	call   403060 <__assert_fail@plt>
  407456:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407460 <flatcc_builder_vector_count@@Base>:
  407460:	mov    rax,QWORD PTR [rdi+0x30]
  407464:	mov    eax,DWORD PTR [rax+0x14]
  407467:	ret    
  407468:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407470 <flatcc_builder_vector_edit@@Base>:
  407470:	mov    rax,QWORD PTR [rdi+0x18]
  407474:	ret    
  407475:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40747f:	nop

0000000000407480 <flatcc_builder_create_offset_vector_direct@@Base>:
  407480:	xor    ecx,ecx
  407482:	jmp    407490 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407484:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40748e:	xchg   ax,ax
  407490:	push   r14
  407492:	push   rbx
  407493:	sub    rsp,0x98
  40749a:	mov    r10,rdx
  40749d:	xor    ebx,ebx
  40749f:	test   r10d,0xc0000000
  4074a6:	jne    407619 <flatcc_builder_create_offset_vector_direct@@Base+0x199>
  4074ac:	mov    r14,rdi
  4074af:	cmp    WORD PTR [rdi+0xe8],0x3
  4074b7:	ja     4074c3 <flatcc_builder_create_offset_vector_direct@@Base+0x43>
  4074b9:	mov    WORD PTR [r14+0xe8],0x4
  4074c3:	lea    r8d,[r10*4+0x0]
  4074cb:	mov    DWORD PTR [rsp+0x4],r10d
  4074d0:	mov    ebx,DWORD PTR [r14+0xf0]
  4074d7:	mov    r9d,ebx
  4074da:	and    r9d,0x3
  4074de:	mov    QWORD PTR [rsp+0x8],0x4
  4074e7:	lea    rdx,[rsp+0x4]
  4074ec:	mov    QWORD PTR [rsp+0x18],rdx
  4074f1:	mov    QWORD PTR [rsp+0x20],0x4
  4074fa:	mov    DWORD PTR [rsp+0x10],0x1
  407502:	test   r8d,r8d
  407505:	je     407626 <flatcc_builder_create_offset_vector_direct@@Base+0x1a6>
  40750b:	mov    edx,r8d
  40750e:	lea    r8,[rdx+0x4]
  407512:	mov    QWORD PTR [rsp+0x8],r8
  407517:	mov    QWORD PTR [rsp+0x28],rsi
  40751c:	mov    QWORD PTR [rsp+0x30],rdx
  407521:	mov    DWORD PTR [rsp+0x10],0x2
  407529:	mov    edx,0x2
  40752e:	test   r9d,r9d
  407531:	je     407558 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  407533:	add    r8,r9
  407536:	mov    QWORD PTR [rsp+0x8],r8
  40753b:	mov    edi,edx
  40753d:	shl    rdi,0x4
  407541:	lea    rax,[rip+0x6e18]        # 40e360 <flatcc_builder_padding_base@@Base>
  407548:	mov    QWORD PTR [rsp+rdi*1+0x18],rax
  40754d:	mov    QWORD PTR [rsp+rdi*1+0x20],r9
  407552:	inc    edx
  407554:	mov    DWORD PTR [rsp+0x10],edx
  407558:	test   r10d,r10d
  40755b:	je     4075d5 <flatcc_builder_create_offset_vector_direct@@Base+0x155>
  40755d:	mov    edi,r8d
  407560:	sub    edi,ebx
  407562:	add    edi,0xfffffffc
  407565:	mov    r9d,r10d
  407568:	xor    ebx,ebx
  40756a:	jmp    40757b <flatcc_builder_create_offset_vector_direct@@Base+0xfb>
  40756c:	nop    DWORD PTR [rax+0x0]
  407570:	inc    rbx
  407573:	add    edi,0xfffffffc
  407576:	cmp    r9,rbx
  407579:	je     4075ce <flatcc_builder_create_offset_vector_direct@@Base+0x14e>
  40757b:	mov    eax,DWORD PTR [rsi+rbx*4]
  40757e:	test   eax,eax
  407580:	je     4075a0 <flatcc_builder_create_offset_vector_direct@@Base+0x120>
  407582:	add    eax,edi
  407584:	mov    DWORD PTR [rsi+rbx*4],eax
  407587:	test   rcx,rcx
  40758a:	je     407570 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  40758c:	cmp    BYTE PTR [rcx+rbx*1],0x0
  407590:	jne    407570 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  407592:	jmp    40763f <flatcc_builder_create_offset_vector_direct@@Base+0x1bf>
  407597:	nop    WORD PTR [rax+rax*1+0x0]
  4075a0:	test   rcx,rcx
  4075a3:	je     40765e <flatcc_builder_create_offset_vector_direct@@Base+0x1de>
  4075a9:	cmp    BYTE PTR [rcx+rbx*1],0x0
  4075ad:	je     407570 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
  4075af:	lea    rdi,[rip+0x8271]        # 40f827 <flatcc_builder_padding_base@@Base+0x14c7>
  4075b6:	lea    rsi,[rip+0x7025]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4075bd:	lea    rcx,[rip+0x81e0]        # 40f7a4 <flatcc_builder_padding_base@@Base+0x1444>
  4075c4:	mov    edx,0x5b5
  4075c9:	call   403060 <__assert_fail@plt>
  4075ce:	mov    ebx,DWORD PTR [r14+0xf0]
  4075d5:	cmp    r8,0x11
  4075d9:	setb   al
  4075dc:	lea    rcx,[r8-0x10]
  4075e0:	shr    rcx,0x20
  4075e4:	sete   cl
  4075e7:	test   r8d,r8d
  4075ea:	jle    40767d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  4075f0:	or     al,cl
  4075f2:	je     40767d <flatcc_builder_create_offset_vector_direct@@Base+0x1fd>
  4075f8:	sub    ebx,r8d
  4075fb:	mov    rdi,QWORD PTR [r14+0x38]
  4075ff:	lea    rsi,[rsp+0x18]
  407604:	mov    ecx,ebx
  407606:	call   QWORD PTR [r14+0x48]
  40760a:	test   eax,eax
  40760c:	jne    40769c <flatcc_builder_create_offset_vector_direct@@Base+0x21c>
  407612:	mov    DWORD PTR [r14+0xf0],ebx
  407619:	mov    eax,ebx
  40761b:	add    rsp,0x98
  407622:	pop    rbx
  407623:	pop    r14
  407625:	ret    
  407626:	mov    r8d,0x4
  40762c:	mov    edx,0x1
  407631:	test   r9d,r9d
  407634:	jne    407533 <flatcc_builder_create_offset_vector_direct@@Base+0xb3>
  40763a:	jmp    407558 <flatcc_builder_create_offset_vector_direct@@Base+0xd8>
  40763f:	lea    rdi,[rip+0x8150]        # 40f796 <flatcc_builder_padding_base@@Base+0x1436>
  407646:	lea    rsi,[rip+0x6f95]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40764d:	lea    rcx,[rip+0x8150]        # 40f7a4 <flatcc_builder_padding_base@@Base+0x1444>
  407654:	mov    edx,0x5b1
  407659:	call   403060 <__assert_fail@plt>
  40765e:	lea    rdi,[rip+0x813d]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407665:	lea    rsi,[rip+0x6f76]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40766c:	lea    rcx,[rip+0x8131]        # 40f7a4 <flatcc_builder_padding_base@@Base+0x1444>
  407673:	mov    edx,0x5b7
  407678:	call   403060 <__assert_fail@plt>
  40767d:	lea    rdi,[rip+0x811e]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407684:	lea    rsi,[rip+0x6f57]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40768b:	lea    rcx,[rip+0x7fcf]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  407692:	mov    edx,0x287
  407697:	call   403060 <__assert_fail@plt>
  40769c:	lea    rdi,[rip+0x80ff]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4076a3:	lea    rsi,[rip+0x6f38]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4076aa:	lea    rcx,[rip+0x7fb0]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4076b1:	mov    edx,0x28b
  4076b6:	call   403060 <__assert_fail@plt>
  4076bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004076c0 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  4076c0:	push   rbp
  4076c1:	push   rbx
  4076c2:	push   rax
  4076c3:	mov    rax,QWORD PTR [rdi+0x30]
  4076c7:	cmp    WORD PTR [rax+0xe],0x5
  4076cc:	jne    40775b <flatcc_builder_end_offset_vector_for_unions@@Base+0x9b>
  4076d2:	mov    rcx,rsi
  4076d5:	mov    rbx,rdi
  4076d8:	mov    rsi,QWORD PTR [rdi+0x18]
  4076dc:	mov    edx,DWORD PTR [rax+0x14]
  4076df:	call   407490 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4076e4:	mov    ebp,eax
  4076e6:	test   eax,eax
  4076e8:	je     407752 <flatcc_builder_end_offset_vector_for_unions@@Base+0x92>
  4076ea:	mov    rdi,QWORD PTR [rbx+0x18]
  4076ee:	mov    edx,DWORD PTR [rbx+0x20]
  4076f1:	xor    esi,esi
  4076f3:	call   403070 <memset@plt>
  4076f8:	mov    rax,QWORD PTR [rbx+0x30]
  4076fc:	mov    ecx,DWORD PTR [rax+0x8]
  4076ff:	mov    DWORD PTR [rbx+0x20],ecx
  407702:	mov    ecx,DWORD PTR [rax]
  407704:	mov    DWORD PTR [rbx+0x28],ecx
  407707:	mov    edx,DWORD PTR [rax+0x4]
  40770a:	mov    rsi,rcx
  40770d:	add    rsi,QWORD PTR [rbx+0x68]
  407711:	mov    QWORD PTR [rbx+0x18],rsi
  407715:	mov    esi,DWORD PTR [rbx+0x70]
  407718:	sub    esi,ecx
  40771a:	cmp    esi,edx
  40771c:	cmova  esi,edx
  40771f:	mov    DWORD PTR [rbx+0x24],esi
  407722:	movzx  ecx,WORD PTR [rbx+0xea]
  407729:	cmp    WORD PTR [rbx+0xe8],cx
  407730:	jae    407739 <flatcc_builder_end_offset_vector_for_unions@@Base+0x79>
  407732:	mov    WORD PTR [rbx+0xe8],cx
  407739:	movzx  ecx,WORD PTR [rax+0xc]
  40773d:	mov    WORD PTR [rbx+0xea],cx
  407744:	add    rax,0xffffffffffffffdc
  407748:	mov    QWORD PTR [rbx+0x30],rax
  40774c:	dec    DWORD PTR [rbx+0x104]
  407752:	mov    eax,ebp
  407754:	add    rsp,0x8
  407758:	pop    rbx
  407759:	pop    rbp
  40775a:	ret    
  40775b:	lea    rdi,[rip+0x72b6]        # 40ea18 <flatcc_builder_padding_base@@Base+0x6b8>
  407762:	lea    rsi,[rip+0x6e79]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407769:	lea    rcx,[rip+0x7921]        # 40f091 <flatcc_builder_padding_base@@Base+0xd31>
  407770:	mov    edx,0x5d5
  407775:	call   403060 <__assert_fail@plt>
  40777a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407780 <flatcc_builder_offset_vector_edit@@Base>:
  407780:	mov    rax,QWORD PTR [rdi+0x18]
  407784:	ret    
  407785:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40778f:	nop

0000000000407790 <flatcc_builder_offset_vector_count@@Base>:
  407790:	mov    rax,QWORD PTR [rdi+0x30]
  407794:	mov    eax,DWORD PTR [rax+0x14]
  407797:	ret    
  407798:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004077a0 <flatcc_builder_table_add_union@@Base>:
  4077a0:	push   rbp
  4077a1:	push   r15
  4077a3:	push   r14
  4077a5:	push   rbx
  4077a6:	push   rax
  4077a7:	mov    rax,QWORD PTR [rdi+0x30]
  4077ab:	cmp    WORD PTR [rax+0xe],0x3
  4077b0:	jne    40780e <flatcc_builder_table_add_union@@Base+0x6e>
  4077b2:	mov    r14,rdx
  4077b5:	mov    ebp,esi
  4077b7:	mov    r15,rdi
  4077ba:	mov    rbx,rdx
  4077bd:	shr    rbx,0x20
  4077c1:	test   r14b,r14b
  4077c4:	jne    4077ca <flatcc_builder_table_add_union@@Base+0x2a>
  4077c6:	test   ebx,ebx
  4077c8:	jne    40782d <flatcc_builder_table_add_union@@Base+0x8d>
  4077ca:	test   ebx,ebx
  4077cc:	je     4077e3 <flatcc_builder_table_add_union@@Base+0x43>
  4077ce:	mov    rdi,r15
  4077d1:	mov    esi,ebp
  4077d3:	call   407890 <flatcc_builder_table_add_offset@@Base>
  4077d8:	test   rax,rax
  4077db:	je     40786b <flatcc_builder_table_add_union@@Base+0xcb>
  4077e1:	mov    DWORD PTR [rax],ebx
  4077e3:	dec    ebp
  4077e5:	mov    edx,0x1
  4077ea:	mov    rdi,r15
  4077ed:	mov    esi,ebp
  4077ef:	mov    ecx,0x1
  4077f4:	call   4079f0 <flatcc_builder_table_add@@Base>
  4077f9:	test   rax,rax
  4077fc:	je     40784c <flatcc_builder_table_add_union@@Base+0xac>
  4077fe:	mov    BYTE PTR [rax],r14b
  407801:	xor    eax,eax
  407803:	add    rsp,0x8
  407807:	pop    rbx
  407808:	pop    r14
  40780a:	pop    r15
  40780c:	pop    rbp
  40780d:	ret    
  40780e:	lea    rdi,[rip+0x75fc]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407815:	lea    rsi,[rip+0x6dc6]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40781c:	lea    rcx,[rip+0x78e0]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  407823:	mov    edx,0x5ee
  407828:	call   403060 <__assert_fail@plt>
  40782d:	lea    rdi,[rip+0x7927]        # 40f15b <flatcc_builder_padding_base@@Base+0xdfb>
  407834:	lea    rsi,[rip+0x6da7]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40783b:	lea    rcx,[rip+0x78c1]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  407842:	mov    edx,0x5ef
  407847:	call   403060 <__assert_fail@plt>
  40784c:	lea    rdi,[rip+0x7934]        # 40f187 <flatcc_builder_padding_base@@Base+0xe27>
  407853:	lea    rsi,[rip+0x6d88]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40785a:	lea    rcx,[rip+0x78a2]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  407861:	mov    edx,0x5f6
  407866:	call   403060 <__assert_fail@plt>
  40786b:	lea    rdi,[rip+0x790b]        # 40f17d <flatcc_builder_padding_base@@Base+0xe1d>
  407872:	lea    rsi,[rip+0x6d69]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407879:	lea    rcx,[rip+0x7883]        # 40f103 <flatcc_builder_padding_base@@Base+0xda3>
  407880:	mov    edx,0x5f2
  407885:	call   403060 <__assert_fail@plt>
  40788a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407890 <flatcc_builder_table_add_offset@@Base>:
  407890:	push   rbp
  407891:	push   r15
  407893:	push   r14
  407895:	push   rbx
  407896:	push   rax
  407897:	mov    rax,QWORD PTR [rdi+0x30]
  40789b:	cmp    WORD PTR [rax+0xe],0x3
  4078a0:	jne    40798e <flatcc_builder_table_add_offset@@Base+0xfe>
  4078a6:	mov    r14d,esi
  4078a9:	cmp    esi,0x7ffd
  4078af:	jae    4079ad <flatcc_builder_table_add_offset@@Base+0x11d>
  4078b5:	mov    rbx,rdi
  4078b8:	mov    rax,QWORD PTR [rdi+0x8]
  4078bc:	movsxd rcx,r14d
  4078bf:	cmp    WORD PTR [rax+rcx*2],0x0
  4078c4:	jne    4079cc <flatcc_builder_table_add_offset@@Base+0x13c>
  4078ca:	mov    ecx,DWORD PTR [rbx+0x14]
  4078cd:	xor    ecx,r14d
  4078d0:	imul   ecx,ecx,0x9e3779b1
  4078d6:	xor    ecx,0x4
  4078d9:	imul   ecx,ecx,0x9e3779b1
  4078df:	mov    DWORD PTR [rbx+0x14],ecx
  4078e2:	mov    ebp,DWORD PTR [rbx+0x20]
  4078e5:	mov    ecx,DWORD PTR [rbx+0x24]
  4078e8:	add    ebp,0x3
  4078eb:	and    ebp,0xfffffffc
  4078ee:	lea    r15,[rbp+0x4]
  4078f2:	mov    DWORD PTR [rbx+0x20],r15d
  4078f6:	cmp    ecx,r15d
  4078f9:	jae    407958 <flatcc_builder_table_add_offset@@Base+0xc8>
  4078fb:	mov    eax,r15d
  4078fe:	and    eax,0xfffffffc
  407901:	lea    rsi,[rbx+0x68]
  407905:	mov    rdi,QWORD PTR [rbx+0x40]
  407909:	mov    edx,DWORD PTR [rbx+0x28]
  40790c:	add    rdx,rax
  40790f:	mov    ecx,0x1
  407914:	mov    r8d,0x1
  40791a:	call   QWORD PTR [rbx+0x50]
  40791d:	test   eax,eax
  40791f:	je     407925 <flatcc_builder_table_add_offset@@Base+0x95>
  407921:	xor    ebp,ebp
  407923:	jmp    407980 <flatcc_builder_table_add_offset@@Base+0xf0>
  407925:	mov    eax,DWORD PTR [rbx+0x28]
  407928:	mov    rcx,rax
  40792b:	add    rcx,QWORD PTR [rbx+0x68]
  40792f:	mov    QWORD PTR [rbx+0x18],rcx
  407933:	mov    ecx,DWORD PTR [rbx+0x70]
  407936:	sub    ecx,eax
  407938:	cmp    ecx,0xfffc
  40793e:	mov    eax,0xfffc
  407943:	cmovb  eax,ecx
  407946:	mov    DWORD PTR [rbx+0x24],eax
  407949:	mov    rax,QWORD PTR [rbx+0x30]
  40794d:	mov    DWORD PTR [rax+0x4],0xfffc
  407954:	mov    rax,QWORD PTR [rbx+0x8]
  407958:	movzx  ecx,r14w
  40795c:	mov    WORD PTR [rax+rcx*2],r15w
  407961:	cmp    WORD PTR [rbx+0x10],cx
  407965:	ja     40796f <flatcc_builder_table_add_offset@@Base+0xdf>
  407967:	inc    r14d
  40796a:	mov    WORD PTR [rbx+0x10],r14w
  40796f:	mov    rax,QWORD PTR [rbx]
  407972:	lea    rcx,[rax+0x2]
  407976:	mov    QWORD PTR [rbx],rcx
  407979:	mov    WORD PTR [rax],bp
  40797c:	add    rbp,QWORD PTR [rbx+0x18]
  407980:	mov    rax,rbp
  407983:	add    rsp,0x8
  407987:	pop    rbx
  407988:	pop    r14
  40798a:	pop    r15
  40798c:	pop    rbp
  40798d:	ret    
  40798e:	lea    rdi,[rip+0x747c]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407995:	lea    rsi,[rip+0x6c46]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40799c:	lea    rcx,[rip+0x7b62]        # 40f505 <flatcc_builder_padding_base@@Base+0x11a5>
  4079a3:	mov    edx,0x713
  4079a8:	call   403060 <__assert_fail@plt>
  4079ad:	lea    rdi,[rip+0x7ad1]        # 40f485 <flatcc_builder_padding_base@@Base+0x1125>
  4079b4:	lea    rsi,[rip+0x6c27]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4079bb:	lea    rcx,[rip+0x7b43]        # 40f505 <flatcc_builder_padding_base@@Base+0x11a5>
  4079c2:	mov    edx,0x714
  4079c7:	call   403060 <__assert_fail@plt>
  4079cc:	lea    rdi,[rip+0x7dcf]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4079d3:	lea    rsi,[rip+0x6c08]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4079da:	lea    rcx,[rip+0x7b24]        # 40f505 <flatcc_builder_padding_base@@Base+0x11a5>
  4079e1:	mov    edx,0x71b
  4079e6:	call   403060 <__assert_fail@plt>
  4079eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004079f0 <flatcc_builder_table_add@@Base>:
  4079f0:	push   rbp
  4079f1:	push   r14
  4079f3:	push   rbx
  4079f4:	mov    rax,QWORD PTR [rdi+0x30]
  4079f8:	cmp    WORD PTR [rax+0xe],0x3
  4079fd:	jne    407ae8 <flatcc_builder_table_add@@Base+0xf8>
  407a03:	mov    r14d,esi
  407a06:	cmp    esi,0x7ffd
  407a0c:	jae    407b07 <flatcc_builder_table_add@@Base+0x117>
  407a12:	mov    rbx,rdi
  407a15:	cmp    WORD PTR [rdi+0xea],cx
  407a1c:	jae    407a25 <flatcc_builder_table_add@@Base+0x35>
  407a1e:	mov    WORD PTR [rbx+0xea],cx
  407a25:	mov    rsi,QWORD PTR [rbx+0x8]
  407a29:	movsxd rax,r14d
  407a2c:	cmp    WORD PTR [rsi+rax*2],0x0
  407a31:	jne    407b26 <flatcc_builder_table_add@@Base+0x136>
  407a37:	mov    eax,DWORD PTR [rbx+0x14]
  407a3a:	xor    eax,r14d
  407a3d:	imul   eax,eax,0x9e3779b1
  407a43:	xor    eax,edx
  407a45:	imul   eax,eax,0x9e3779b1
  407a4b:	mov    DWORD PTR [rbx+0x14],eax
  407a4e:	mov    eax,DWORD PTR [rbx+0x20]
  407a51:	movzx  ebp,cx
  407a54:	lea    eax,[rax+rbp*1]
  407a57:	add    eax,0xffffffff
  407a5a:	neg    ebp
  407a5c:	and    ebp,eax
  407a5e:	add    edx,ebp
  407a60:	mov    DWORD PTR [rbx+0x20],edx
  407a63:	cmp    edx,DWORD PTR [rbx+0x24]
  407a66:	jb     407ac4 <flatcc_builder_table_add@@Base+0xd4>
  407a68:	inc    edx
  407a6a:	lea    rsi,[rbx+0x68]
  407a6e:	mov    rdi,QWORD PTR [rbx+0x40]
  407a72:	mov    eax,DWORD PTR [rbx+0x28]
  407a75:	add    rax,rdx
  407a78:	mov    rdx,rax
  407a7b:	mov    ecx,0x1
  407a80:	mov    r8d,0x1
  407a86:	call   QWORD PTR [rbx+0x50]
  407a89:	test   eax,eax
  407a8b:	je     407a91 <flatcc_builder_table_add@@Base+0xa1>
  407a8d:	xor    eax,eax
  407a8f:	jmp    407ae3 <flatcc_builder_table_add@@Base+0xf3>
  407a91:	mov    eax,DWORD PTR [rbx+0x28]
  407a94:	mov    rcx,rax
  407a97:	add    rcx,QWORD PTR [rbx+0x68]
  407a9b:	mov    QWORD PTR [rbx+0x18],rcx
  407a9f:	mov    ecx,DWORD PTR [rbx+0x70]
  407aa2:	sub    ecx,eax
  407aa4:	cmp    ecx,0xfffc
  407aaa:	mov    eax,0xfffc
  407aaf:	cmovb  eax,ecx
  407ab2:	mov    DWORD PTR [rbx+0x24],eax
  407ab5:	mov    rax,QWORD PTR [rbx+0x30]
  407ab9:	mov    DWORD PTR [rax+0x4],0xfffc
  407ac0:	mov    rsi,QWORD PTR [rbx+0x8]
  407ac4:	mov    eax,ebp
  407ac6:	add    ebp,0x4
  407ac9:	movzx  ecx,r14w
  407acd:	mov    WORD PTR [rsi+rcx*2],bp
  407ad1:	cmp    WORD PTR [rbx+0x10],cx
  407ad5:	ja     407adf <flatcc_builder_table_add@@Base+0xef>
  407ad7:	inc    r14d
  407ada:	mov    WORD PTR [rbx+0x10],r14w
  407adf:	add    rax,QWORD PTR [rbx+0x18]
  407ae3:	pop    rbx
  407ae4:	pop    r14
  407ae6:	pop    rbp
  407ae7:	ret    
  407ae8:	lea    rdi,[rip+0x7322]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407aef:	lea    rsi,[rip+0x6aec]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407af6:	lea    rcx,[rip+0x793e]        # 40f43b <flatcc_builder_padding_base@@Base+0x10db>
  407afd:	mov    edx,0x6ed
  407b02:	call   403060 <__assert_fail@plt>
  407b07:	lea    rdi,[rip+0x7977]        # 40f485 <flatcc_builder_padding_base@@Base+0x1125>
  407b0e:	lea    rsi,[rip+0x6acd]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407b15:	lea    rcx,[rip+0x791f]        # 40f43b <flatcc_builder_padding_base@@Base+0x10db>
  407b1c:	mov    edx,0x6ee
  407b21:	call   403060 <__assert_fail@plt>
  407b26:	lea    rdi,[rip+0x7c75]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  407b2d:	lea    rsi,[rip+0x6aae]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407b34:	lea    rcx,[rip+0x7900]        # 40f43b <flatcc_builder_padding_base@@Base+0x10db>
  407b3b:	mov    edx,0x6f8
  407b40:	call   403060 <__assert_fail@plt>
  407b45:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407b4f:	nop

0000000000407b50 <flatcc_builder_table_add_union_vector@@Base>:
  407b50:	push   r15
  407b52:	push   r14
  407b54:	push   r12
  407b56:	push   rbx
  407b57:	push   rax
  407b58:	mov    rax,QWORD PTR [rdi+0x30]
  407b5c:	cmp    WORD PTR [rax+0xe],0x3
  407b61:	jne    407bb7 <flatcc_builder_table_add_union_vector@@Base+0x67>
  407b63:	mov    rbx,rdx
  407b66:	mov    r12,rdx
  407b69:	shr    r12,0x20
  407b6d:	test   ebx,ebx
  407b6f:	setne  al
  407b72:	test   r12d,r12d
  407b75:	sete   cl
  407b78:	xor    cl,al
  407b7a:	je     407bd6 <flatcc_builder_table_add_union_vector@@Base+0x86>
  407b7c:	test   ebx,ebx
  407b7e:	je     407ba9 <flatcc_builder_table_add_union_vector@@Base+0x59>
  407b80:	mov    r14d,esi
  407b83:	mov    r15,rdi
  407b86:	lea    esi,[r14-0x1]
  407b8a:	call   407890 <flatcc_builder_table_add_offset@@Base>
  407b8f:	test   rax,rax
  407b92:	je     407bf5 <flatcc_builder_table_add_union_vector@@Base+0xa5>
  407b94:	mov    DWORD PTR [rax],ebx
  407b96:	mov    rdi,r15
  407b99:	mov    esi,r14d
  407b9c:	call   407890 <flatcc_builder_table_add_offset@@Base>
  407ba1:	test   rax,rax
  407ba4:	je     407c14 <flatcc_builder_table_add_union_vector@@Base+0xc4>
  407ba6:	mov    DWORD PTR [rax],r12d
  407ba9:	xor    eax,eax
  407bab:	add    rsp,0x8
  407baf:	pop    rbx
  407bb0:	pop    r12
  407bb2:	pop    r14
  407bb4:	pop    r15
  407bb6:	ret    
  407bb7:	lea    rdi,[rip+0x7253]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  407bbe:	lea    rsi,[rip+0x6a1d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407bc5:	lea    rcx,[rip+0x75c7]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407bcc:	mov    edx,0x600
  407bd1:	call   403060 <__assert_fail@plt>
  407bd6:	lea    rdi,[rip+0x7619]        # 40f1f6 <flatcc_builder_padding_base@@Base+0xe96>
  407bdd:	lea    rsi,[rip+0x69fe]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407be4:	lea    rcx,[rip+0x75a8]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407beb:	mov    edx,0x601
  407bf0:	call   403060 <__assert_fail@plt>
  407bf5:	lea    rdi,[rip+0x7581]        # 40f17d <flatcc_builder_padding_base@@Base+0xe1d>
  407bfc:	lea    rsi,[rip+0x69df]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407c03:	lea    rcx,[rip+0x7589]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407c0a:	mov    edx,0x604
  407c0f:	call   403060 <__assert_fail@plt>
  407c14:	lea    rdi,[rip+0x7562]        # 40f17d <flatcc_builder_padding_base@@Base+0xe1d>
  407c1b:	lea    rsi,[rip+0x69c0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407c22:	lea    rcx,[rip+0x756a]        # 40f193 <flatcc_builder_padding_base@@Base+0xe33>
  407c29:	mov    edx,0x608
  407c2e:	call   403060 <__assert_fail@plt>
  407c33:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407c3d:	nop    DWORD PTR [rax]

0000000000407c40 <flatcc_builder_create_union_vector@@Base>:
  407c40:	push   r15
  407c42:	push   r14
  407c44:	push   r13
  407c46:	push   r12
  407c48:	push   rbx
  407c49:	mov    r14,rdx
  407c4c:	mov    r15,rsi
  407c4f:	mov    rbx,rdi
  407c52:	mov    esi,0x4
  407c57:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  407c5c:	test   eax,eax
  407c5e:	je     407c70 <flatcc_builder_create_union_vector@@Base+0x30>
  407c60:	xor    r14d,r14d
  407c63:	mov    rax,r14
  407c66:	pop    rbx
  407c67:	pop    r12
  407c69:	pop    r13
  407c6b:	pop    r14
  407c6d:	pop    r15
  407c6f:	ret    
  407c70:	mov    rax,QWORD PTR [rbx+0x30]
  407c74:	mov    DWORD PTR [rax+0x10],0x4
  407c7b:	mov    rax,QWORD PTR [rbx+0x30]
  407c7f:	mov    DWORD PTR [rax+0x14],0x0
  407c86:	mov    rax,QWORD PTR [rbx+0x30]
  407c8a:	mov    WORD PTR [rax+0xe],0x5
  407c90:	mov    ecx,DWORD PTR [rbx+0x28]
  407c93:	mov    edx,DWORD PTR [rbx+0x70]
  407c96:	sub    edx,ecx
  407c98:	add    rcx,QWORD PTR [rbx+0x68]
  407c9c:	mov    QWORD PTR [rbx+0x18],rcx
  407ca0:	cmp    edx,0xfffffffc
  407ca3:	mov    ecx,0xfffffffc
  407ca8:	cmovb  ecx,edx
  407cab:	mov    DWORD PTR [rbx+0x24],ecx
  407cae:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407cb5:	mov    ecx,DWORD PTR [rax+0x14]
  407cb8:	add    ecx,r14d
  407cbb:	jb     407f28 <flatcc_builder_create_union_vector@@Base+0x2e8>
  407cc1:	cmp    ecx,0x40000000
  407cc7:	jae    407f28 <flatcc_builder_create_union_vector@@Base+0x2e8>
  407ccd:	mov    DWORD PTR [rax+0x14],ecx
  407cd0:	mov    r12d,DWORD PTR [rbx+0x20]
  407cd4:	mov    eax,DWORD PTR [rbx+0x24]
  407cd7:	lea    ecx,[r12+r14*4]
  407cdb:	mov    DWORD PTR [rbx+0x20],ecx
  407cde:	cmp    ecx,eax
  407ce0:	jae    407cf0 <flatcc_builder_create_union_vector@@Base+0xb0>
  407ce2:	mov    rsi,QWORD PTR [rbx+0x18]
  407ce6:	add    r12,rsi
  407ce9:	jne    407d4b <flatcc_builder_create_union_vector@@Base+0x10b>
  407ceb:	jmp    407c60 <flatcc_builder_create_union_vector@@Base+0x20>
  407cf0:	inc    ecx
  407cf2:	lea    rsi,[rbx+0x68]
  407cf6:	mov    rdi,QWORD PTR [rbx+0x40]
  407cfa:	mov    edx,DWORD PTR [rbx+0x28]
  407cfd:	add    rdx,rcx
  407d00:	mov    ecx,0x1
  407d05:	mov    r8d,0x1
  407d0b:	call   QWORD PTR [rbx+0x50]
  407d0e:	test   eax,eax
  407d10:	jne    407c60 <flatcc_builder_create_union_vector@@Base+0x20>
  407d16:	mov    eax,DWORD PTR [rbx+0x28]
  407d19:	mov    rsi,rax
  407d1c:	add    rsi,QWORD PTR [rbx+0x68]
  407d20:	mov    QWORD PTR [rbx+0x18],rsi
  407d24:	mov    ecx,DWORD PTR [rbx+0x70]
  407d27:	sub    ecx,eax
  407d29:	cmp    ecx,0xfffffffc
  407d2c:	mov    eax,0xfffffffc
  407d31:	cmovb  eax,ecx
  407d34:	mov    DWORD PTR [rbx+0x24],eax
  407d37:	mov    rcx,QWORD PTR [rbx+0x30]
  407d3b:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  407d42:	add    r12,rsi
  407d45:	je     407c60 <flatcc_builder_create_union_vector@@Base+0x20>
  407d4b:	mov    r13d,DWORD PTR [rbx+0x20]
  407d4f:	lea    ecx,[r14+r13*1]
  407d53:	mov    DWORD PTR [rbx+0x20],ecx
  407d56:	cmp    ecx,eax
  407d58:	jb     407dac <flatcc_builder_create_union_vector@@Base+0x16c>
  407d5a:	inc    ecx
  407d5c:	lea    rsi,[rbx+0x68]
  407d60:	mov    rdi,QWORD PTR [rbx+0x40]
  407d64:	mov    edx,DWORD PTR [rbx+0x28]
  407d67:	add    rdx,rcx
  407d6a:	mov    ecx,0x1
  407d6f:	mov    r8d,0x1
  407d75:	call   QWORD PTR [rbx+0x50]
  407d78:	test   eax,eax
  407d7a:	jne    407c60 <flatcc_builder_create_union_vector@@Base+0x20>
  407d80:	mov    eax,DWORD PTR [rbx+0x28]
  407d83:	mov    rsi,rax
  407d86:	add    rsi,QWORD PTR [rbx+0x68]
  407d8a:	mov    QWORD PTR [rbx+0x18],rsi
  407d8e:	mov    ecx,DWORD PTR [rbx+0x70]
  407d91:	sub    ecx,eax
  407d93:	cmp    ecx,0xfffffffc
  407d96:	mov    eax,0xfffffffc
  407d9b:	cmovb  eax,ecx
  407d9e:	mov    DWORD PTR [rbx+0x24],eax
  407da1:	mov    rax,QWORD PTR [rbx+0x30]
  407da5:	mov    DWORD PTR [rax+0x4],0xfffffffc
  407dac:	mov    r12,rsi
  407daf:	add    r12,r13
  407db2:	je     407c60 <flatcc_builder_create_union_vector@@Base+0x20>
  407db8:	test   r14,r14
  407dbb:	je     407e78 <flatcc_builder_create_union_vector@@Base+0x238>
  407dc1:	lea    rcx,[r14-0x1]
  407dc5:	mov    r8d,r14d
  407dc8:	and    r8d,0x3
  407dcc:	cmp    rcx,0x3
  407dd0:	jae    407dde <flatcc_builder_create_union_vector@@Base+0x19e>
  407dd2:	xor    ecx,ecx
  407dd4:	test   r8,r8
  407dd7:	jne    407e47 <flatcc_builder_create_union_vector@@Base+0x207>
  407dd9:	jmp    407e78 <flatcc_builder_create_union_vector@@Base+0x238>
  407dde:	mov    rdx,r14
  407de1:	sub    rdx,r8
  407de4:	lea    rdi,[rsi+r13*1]
  407de8:	add    rdi,0x3
  407dec:	xor    ecx,ecx
  407dee:	xchg   ax,ax
  407df0:	movzx  eax,BYTE PTR [r15+rcx*8]
  407df5:	mov    BYTE PTR [rdi+rcx*1-0x3],al
  407df9:	mov    eax,DWORD PTR [r15+rcx*8+0x4]
  407dfe:	mov    DWORD PTR [rsi+rcx*4],eax
  407e01:	movzx  eax,BYTE PTR [r15+rcx*8+0x8]
  407e07:	mov    BYTE PTR [rdi+rcx*1-0x2],al
  407e0b:	mov    eax,DWORD PTR [r15+rcx*8+0xc]
  407e10:	mov    DWORD PTR [rsi+rcx*4+0x4],eax
  407e14:	movzx  eax,BYTE PTR [r15+rcx*8+0x10]
  407e1a:	mov    BYTE PTR [rdi+rcx*1-0x1],al
  407e1e:	mov    eax,DWORD PTR [r15+rcx*8+0x14]
  407e23:	mov    DWORD PTR [rsi+rcx*4+0x8],eax
  407e27:	movzx  eax,BYTE PTR [r15+rcx*8+0x18]
  407e2d:	mov    BYTE PTR [rdi+rcx*1],al
  407e30:	mov    eax,DWORD PTR [r15+rcx*8+0x1c]
  407e35:	mov    DWORD PTR [rsi+rcx*4+0xc],eax
  407e39:	add    rcx,0x4
  407e3d:	cmp    rdx,rcx
  407e40:	jne    407df0 <flatcc_builder_create_union_vector@@Base+0x1b0>
  407e42:	test   r8,r8
  407e45:	je     407e78 <flatcc_builder_create_union_vector@@Base+0x238>
  407e47:	lea    rdx,[rsi+rcx*4]
  407e4b:	lea    rdi,[r15+rcx*8]
  407e4f:	add    rdi,0x4
  407e53:	add    r13,rcx
  407e56:	add    r13,rsi
  407e59:	xor    ecx,ecx
  407e5b:	nop    DWORD PTR [rax+rax*1+0x0]
  407e60:	movzx  eax,BYTE PTR [rdi+rcx*8-0x4]
  407e65:	mov    BYTE PTR [r13+rcx*1+0x0],al
  407e6a:	mov    eax,DWORD PTR [rdi+rcx*8]
  407e6d:	mov    DWORD PTR [rdx+rcx*4],eax
  407e70:	inc    rcx
  407e73:	cmp    r8,rcx
  407e76:	jne    407e60 <flatcc_builder_create_union_vector@@Base+0x220>
  407e78:	mov    rdi,rbx
  407e7b:	mov    rdx,r14
  407e7e:	mov    rcx,r12
  407e81:	call   407490 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407e86:	mov    r15d,eax
  407e89:	test   eax,eax
  407e8b:	je     407eb1 <flatcc_builder_create_union_vector@@Base+0x271>
  407e8d:	mov    ecx,0x1
  407e92:	mov    r9d,0xffffffff
  407e98:	mov    rdi,rbx
  407e9b:	mov    rsi,r12
  407e9e:	mov    rdx,r14
  407ea1:	mov    r8d,0x1
  407ea7:	call   407210 <flatcc_builder_create_vector@@Base>
  407eac:	mov    r14d,eax
  407eaf:	jmp    407eb4 <flatcc_builder_create_union_vector@@Base+0x274>
  407eb1:	xor    r14d,r14d
  407eb4:	shl    r15,0x20
  407eb8:	mov    rdi,QWORD PTR [rbx+0x18]
  407ebc:	mov    edx,DWORD PTR [rbx+0x20]
  407ebf:	xor    esi,esi
  407ec1:	call   403070 <memset@plt>
  407ec6:	mov    rax,QWORD PTR [rbx+0x30]
  407eca:	mov    ecx,DWORD PTR [rax+0x8]
  407ecd:	mov    DWORD PTR [rbx+0x20],ecx
  407ed0:	mov    ecx,DWORD PTR [rax]
  407ed2:	mov    DWORD PTR [rbx+0x28],ecx
  407ed5:	mov    edx,DWORD PTR [rax+0x4]
  407ed8:	mov    rsi,rcx
  407edb:	add    rsi,QWORD PTR [rbx+0x68]
  407edf:	mov    QWORD PTR [rbx+0x18],rsi
  407ee3:	mov    esi,DWORD PTR [rbx+0x70]
  407ee6:	sub    esi,ecx
  407ee8:	cmp    esi,edx
  407eea:	cmova  esi,edx
  407eed:	mov    DWORD PTR [rbx+0x24],esi
  407ef0:	movzx  ecx,WORD PTR [rbx+0xea]
  407ef7:	cmp    WORD PTR [rbx+0xe8],cx
  407efe:	jae    407f07 <flatcc_builder_create_union_vector@@Base+0x2c7>
  407f00:	mov    WORD PTR [rbx+0xe8],cx
  407f07:	or     r14,r15
  407f0a:	movzx  ecx,WORD PTR [rax+0xc]
  407f0e:	mov    WORD PTR [rbx+0xea],cx
  407f15:	add    rax,0xffffffffffffffdc
  407f19:	mov    QWORD PTR [rbx+0x30],rax
  407f1d:	dec    DWORD PTR [rbx+0x104]
  407f23:	jmp    407c63 <flatcc_builder_create_union_vector@@Base+0x23>
  407f28:	lea    rdi,[rip+0x777c]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  407f2f:	lea    rsi,[rip+0x66ac]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  407f36:	lea    rcx,[rip+0x7789]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  407f3d:	mov    edx,0x37c
  407f42:	call   403060 <__assert_fail@plt>
  407f47:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407f50 <flatcc_builder_create_union_vector_direct@@Base>:
  407f50:	push   r15
  407f52:	push   r14
  407f54:	push   r12
  407f56:	push   rbx
  407f57:	push   rax
  407f58:	mov    r14,rcx
  407f5b:	mov    r15,rsi
  407f5e:	mov    r12,rdi
  407f61:	mov    rsi,rdx
  407f64:	mov    rdx,rcx
  407f67:	mov    rcx,r15
  407f6a:	call   407490 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  407f6f:	mov    ebx,eax
  407f71:	test   eax,eax
  407f73:	je     407f98 <flatcc_builder_create_union_vector_direct@@Base+0x48>
  407f75:	mov    ecx,0x1
  407f7a:	mov    r9d,0xffffffff
  407f80:	mov    rdi,r12
  407f83:	mov    rsi,r15
  407f86:	mov    rdx,r14
  407f89:	mov    r8d,0x1
  407f8f:	call   407210 <flatcc_builder_create_vector@@Base>
  407f94:	mov    eax,eax
  407f96:	jmp    407f9a <flatcc_builder_create_union_vector_direct@@Base+0x4a>
  407f98:	xor    eax,eax
  407f9a:	shl    rbx,0x20
  407f9e:	or     rbx,rax
  407fa1:	mov    rax,rbx
  407fa4:	add    rsp,0x8
  407fa8:	pop    rbx
  407fa9:	pop    r12
  407fab:	pop    r14
  407fad:	pop    r15
  407faf:	ret    

0000000000407fb0 <flatcc_builder_start_union_vector@@Base>:
  407fb0:	push   rbx
  407fb1:	mov    rbx,rdi
  407fb4:	mov    esi,0x4
  407fb9:	call   4054b0 <flatcc_builder_start_buffer@@Base+0xe0>
  407fbe:	mov    ecx,eax
  407fc0:	mov    eax,0xffffffff
  407fc5:	test   ecx,ecx
  407fc7:	je     407fcb <flatcc_builder_start_union_vector@@Base+0x1b>
  407fc9:	pop    rbx
  407fca:	ret    
  407fcb:	mov    rax,QWORD PTR [rbx+0x30]
  407fcf:	mov    DWORD PTR [rax+0x10],0x8
  407fd6:	mov    rax,QWORD PTR [rbx+0x30]
  407fda:	mov    DWORD PTR [rax+0x14],0x0
  407fe1:	mov    rax,QWORD PTR [rbx+0x30]
  407fe5:	mov    WORD PTR [rax+0xe],0x7
  407feb:	mov    ecx,DWORD PTR [rbx+0x28]
  407fee:	mov    edx,DWORD PTR [rbx+0x70]
  407ff1:	sub    edx,ecx
  407ff3:	add    rcx,QWORD PTR [rbx+0x68]
  407ff7:	mov    QWORD PTR [rbx+0x18],rcx
  407ffb:	cmp    edx,0xfffffffc
  407ffe:	mov    ecx,0xfffffffc
  408003:	cmovb  ecx,edx
  408006:	mov    DWORD PTR [rbx+0x24],ecx
  408009:	mov    DWORD PTR [rax+0x4],0xfffffffc
  408010:	xor    eax,eax
  408012:	pop    rbx
  408013:	ret    
  408014:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40801e:	xchg   ax,ax

0000000000408020 <flatcc_builder_end_union_vector@@Base>:
  408020:	push   rbp
  408021:	push   r15
  408023:	push   r14
  408025:	push   r13
  408027:	push   r12
  408029:	push   rbx
  40802a:	push   rax
  40802b:	mov    rax,QWORD PTR [rdi+0x30]
  40802f:	cmp    WORD PTR [rax+0xe],0x7
  408034:	jne    408424 <flatcc_builder_end_union_vector@@Base+0x404>
  40803a:	mov    r13,rdi
  40803d:	mov    r14d,DWORD PTR [rax+0x14]
  408041:	lea    eax,[r14+r14*4]
  408045:	mov    r12d,DWORD PTR [rdi+0x20]
  408049:	add    eax,r12d
  40804c:	mov    DWORD PTR [rdi+0x20],eax
  40804f:	cmp    eax,DWORD PTR [rdi+0x24]
  408052:	jae    40805a <flatcc_builder_end_union_vector@@Base+0x3a>
  408054:	mov    r8,QWORD PTR [r13+0x18]
  408058:	jmp    4080b1 <flatcc_builder_end_union_vector@@Base+0x91>
  40805a:	inc    eax
  40805c:	lea    rsi,[r13+0x68]
  408060:	mov    rdi,QWORD PTR [r13+0x40]
  408064:	mov    edx,DWORD PTR [r13+0x28]
  408068:	add    rdx,rax
  40806b:	mov    ecx,0x1
  408070:	mov    r8d,0x1
  408076:	call   QWORD PTR [r13+0x50]
  40807a:	test   eax,eax
  40807c:	jne    4081e6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  408082:	mov    eax,DWORD PTR [r13+0x28]
  408086:	mov    r8,rax
  408089:	add    r8,QWORD PTR [r13+0x68]
  40808d:	mov    QWORD PTR [r13+0x18],r8
  408091:	mov    ecx,DWORD PTR [r13+0x70]
  408095:	sub    ecx,eax
  408097:	cmp    ecx,0xfffffffc
  40809a:	mov    eax,0xfffffffc
  40809f:	cmovb  eax,ecx
  4080a2:	mov    DWORD PTR [r13+0x24],eax
  4080a6:	mov    rax,QWORD PTR [r13+0x30]
  4080aa:	mov    DWORD PTR [rax+0x4],0xfffffffc
  4080b1:	mov    rsi,r8
  4080b4:	add    rsi,r12
  4080b7:	je     4081e6 <flatcc_builder_end_union_vector@@Base+0x1c6>
  4080bd:	lea    r15,[rsi+r14*4]
  4080c1:	test   r14d,r14d
  4080c4:	je     4081aa <flatcc_builder_end_union_vector@@Base+0x18a>
  4080ca:	cmp    r14d,0x9
  4080ce:	jae    408279 <flatcc_builder_end_union_vector@@Base+0x259>
  4080d4:	xor    r9d,r9d
  4080d7:	mov    r11d,r14d
  4080da:	sub    r11d,r9d
  4080dd:	mov    r10,r9
  4080e0:	not    r10
  4080e3:	add    r10,r14
  4080e6:	and    r11,0x3
  4080ea:	je     408130 <flatcc_builder_end_union_vector@@Base+0x110>
  4080ec:	mov    rdx,r9
  4080ef:	neg    rdx
  4080f2:	lea    rbp,[r12+r9*4]
  4080f6:	add    rbp,r8
  4080f9:	lea    rbx,[r8+r9*8]
  4080fd:	add    rbx,0x4
  408101:	lea    rax,[r9+r14*4]
  408105:	add    rax,r12
  408108:	add    rax,r8
  40810b:	xor    edi,edi
  40810d:	nop    DWORD PTR [rax]
  408110:	movzx  ecx,BYTE PTR [rbx+rdi*8-0x4]
  408115:	mov    BYTE PTR [rax+rdi*1],cl
  408118:	mov    ecx,DWORD PTR [rbx+rdi*8]
  40811b:	mov    DWORD PTR [rbp+rdi*4+0x0],ecx
  40811f:	dec    rdx
  408122:	inc    rdi
  408125:	cmp    r11,rdi
  408128:	jne    408110 <flatcc_builder_end_union_vector@@Base+0xf0>
  40812a:	neg    rdx
  40812d:	mov    r9,rdx
  408130:	cmp    r10,0x3
  408134:	jb     4081aa <flatcc_builder_end_union_vector@@Base+0x18a>
  408136:	mov    rbp,r14
  408139:	sub    rbp,r9
  40813c:	lea    rcx,[r12+r9*4]
  408140:	lea    rdx,[r8+rcx*1]
  408144:	add    rdx,0xc
  408148:	lea    rdi,[r8+r9*8]
  40814c:	add    rdi,0x1c
  408150:	lea    rcx,[r9+r14*4]
  408154:	add    rcx,r12
  408157:	add    rcx,r8
  40815a:	add    rcx,0x3
  40815e:	xor    ebx,ebx
  408160:	movzx  eax,BYTE PTR [rdi+rbx*8-0x1c]
  408165:	mov    BYTE PTR [rcx+rbx*1-0x3],al
  408169:	mov    eax,DWORD PTR [rdi+rbx*8-0x18]
  40816d:	mov    DWORD PTR [rdx+rbx*4-0xc],eax
  408171:	movzx  eax,BYTE PTR [rdi+rbx*8-0x14]
  408176:	mov    BYTE PTR [rcx+rbx*1-0x2],al
  40817a:	mov    eax,DWORD PTR [rdi+rbx*8-0x10]
  40817e:	mov    DWORD PTR [rdx+rbx*4-0x8],eax
  408182:	movzx  eax,BYTE PTR [rdi+rbx*8-0xc]
  408187:	mov    BYTE PTR [rcx+rbx*1-0x1],al
  40818b:	mov    eax,DWORD PTR [rdi+rbx*8-0x8]
  40818f:	mov    DWORD PTR [rdx+rbx*4-0x4],eax
  408193:	movzx  eax,BYTE PTR [rdi+rbx*8-0x4]
  408198:	mov    BYTE PTR [rcx+rbx*1],al
  40819b:	mov    eax,DWORD PTR [rdi+rbx*8]
  40819e:	mov    DWORD PTR [rdx+rbx*4],eax
  4081a1:	add    rbx,0x4
  4081a5:	cmp    rbp,rbx
  4081a8:	jne    408160 <flatcc_builder_end_union_vector@@Base+0x140>
  4081aa:	mov    rdi,r13
  4081ad:	mov    rdx,r14
  4081b0:	mov    rcx,r15
  4081b3:	vzeroupper 
  4081b6:	call   407490 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
  4081bb:	mov    r12d,eax
  4081be:	test   eax,eax
  4081c0:	je     4081eb <flatcc_builder_end_union_vector@@Base+0x1cb>
  4081c2:	mov    ecx,0x1
  4081c7:	mov    r9d,0xffffffff
  4081cd:	mov    rdi,r13
  4081d0:	mov    rsi,r15
  4081d3:	mov    rdx,r14
  4081d6:	mov    r8d,0x1
  4081dc:	call   407210 <flatcc_builder_create_vector@@Base>
  4081e1:	mov    r14d,eax
  4081e4:	jmp    4081ee <flatcc_builder_end_union_vector@@Base+0x1ce>
  4081e6:	xor    r14d,r14d
  4081e9:	jmp    408267 <flatcc_builder_end_union_vector@@Base+0x247>
  4081eb:	xor    r14d,r14d
  4081ee:	shl    r12,0x20
  4081f2:	mov    rdi,QWORD PTR [r13+0x18]
  4081f6:	mov    edx,DWORD PTR [r13+0x20]
  4081fa:	xor    esi,esi
  4081fc:	call   403070 <memset@plt>
  408201:	mov    rax,QWORD PTR [r13+0x30]
  408205:	mov    ecx,DWORD PTR [rax+0x8]
  408208:	mov    DWORD PTR [r13+0x20],ecx
  40820c:	mov    ecx,DWORD PTR [rax]
  40820e:	mov    DWORD PTR [r13+0x28],ecx
  408212:	mov    edx,DWORD PTR [rax+0x4]
  408215:	mov    rsi,rcx
  408218:	add    rsi,QWORD PTR [r13+0x68]
  40821c:	mov    QWORD PTR [r13+0x18],rsi
  408220:	mov    esi,DWORD PTR [r13+0x70]
  408224:	sub    esi,ecx
  408226:	cmp    esi,edx
  408228:	cmova  esi,edx
  40822b:	mov    DWORD PTR [r13+0x24],esi
  40822f:	movzx  ecx,WORD PTR [r13+0xea]
  408237:	cmp    WORD PTR [r13+0xe8],cx
  40823f:	jae    408249 <flatcc_builder_end_union_vector@@Base+0x229>
  408241:	mov    WORD PTR [r13+0xe8],cx
  408249:	or     r14,r12
  40824c:	movzx  ecx,WORD PTR [rax+0xc]
  408250:	mov    WORD PTR [r13+0xea],cx
  408258:	add    rax,0xffffffffffffffdc
  40825c:	mov    QWORD PTR [r13+0x30],rax
  408260:	dec    DWORD PTR [r13+0x104]
  408267:	mov    rax,r14
  40826a:	add    rsp,0x8
  40826e:	pop    rbx
  40826f:	pop    r12
  408271:	pop    r13
  408273:	pop    r14
  408275:	pop    r15
  408277:	pop    rbp
  408278:	ret    
  408279:	lea    rax,[r14-0x1]
  40827d:	mov    ecx,0x8
  408282:	mul    rcx
  408285:	seto   cl
  408288:	mov    rdx,r8
  40828b:	not    rdx
  40828e:	xor    r9d,r9d
  408291:	cmp    rax,rdx
  408294:	ja     4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  40829a:	test   cl,cl
  40829c:	jne    4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4082a2:	lea    rdx,[r8+0x4]
  4082a6:	mov    rdi,rdx
  4082a9:	not    rdi
  4082ac:	cmp    rax,rdi
  4082af:	ja     4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4082b5:	test   cl,cl
  4082b7:	jne    4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  4082bd:	lea    rcx,[r14+r14*4]
  4082c1:	add    rcx,r12
  4082c4:	add    rcx,r8
  4082c7:	lea    rbx,[r8+r14*8]
  4082cb:	add    rbx,0xfffffffffffffff9
  4082cf:	cmp    rbx,r15
  4082d2:	seta   r11b
  4082d6:	lea    rdi,[r8+r14*8]
  4082da:	cmp    r8,rcx
  4082dd:	setb   r10b
  4082e1:	cmp    rdi,r15
  4082e4:	seta   al
  4082e7:	cmp    rdx,rcx
  4082ea:	setb   bpl
  4082ee:	cmp    rsi,rbx
  4082f1:	setb   cl
  4082f4:	cmp    r8,r15
  4082f7:	setb   BYTE PTR [rsp+0x7]
  4082fc:	cmp    rsi,rdi
  4082ff:	setb   bl
  408302:	cmp    rdx,r15
  408305:	setb   dl
  408308:	xor    r9d,r9d
  40830b:	test   r11b,r10b
  40830e:	jne    4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  408314:	and    al,bpl
  408317:	jne    4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  40831d:	and    cl,BYTE PTR [rsp+0x7]
  408321:	jne    4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  408327:	and    bl,dl
  408329:	jne    4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  40832f:	mov    eax,r14d
  408332:	and    eax,0x7
  408335:	test   rax,rax
  408338:	mov    ecx,0x8
  40833d:	cmovne rcx,rax
  408341:	mov    r9,r14
  408344:	sub    r9,rcx
  408347:	vmovdqa ymm0,YMMWORD PTR [rip+0x6211]        # 40e560 <flatcc_builder_padding_base@@Base+0x200>
  40834f:	vmovdqa ymm1,YMMWORD PTR [rip+0x6229]        # 40e580 <flatcc_builder_padding_base@@Base+0x220>
  408357:	xor    eax,eax
  408359:	vmovdqa xmm8,XMMWORD PTR [rip+0x623f]        # 40e5a0 <flatcc_builder_padding_base@@Base+0x240>
  408361:	vmovdqa xmm9,XMMWORD PTR [rip+0x6247]        # 40e5b0 <flatcc_builder_padding_base@@Base+0x250>
  408369:	vpbroadcastq ymm4,QWORD PTR [rip+0x624e]        # 40e5c0 <flatcc_builder_padding_base@@Base+0x260>
  408372:	vpbroadcastq ymm5,QWORD PTR [rip+0x624d]        # 40e5c8 <flatcc_builder_padding_base@@Base+0x268>
  40837b:	mov    rdi,r8
  40837e:	xchg   ax,ax
  408380:	vmovdqu xmm6,XMMWORD PTR [rdi]
  408384:	vmovdqu xmm7,XMMWORD PTR [rdi+0x10]
  408389:	vmovdqu xmm2,XMMWORD PTR [rdi+0x20]
  40838e:	vmovdqu xmm3,XMMWORD PTR [rdi+0x30]
  408393:	vpshufb xmm3,xmm3,xmm8
  408398:	vpshufb xmm2,xmm2,xmm8
  40839d:	vpunpcklwd xmm2,xmm2,xmm3
  4083a1:	vpshufb xmm3,xmm7,xmm9
  4083a6:	vpshufb xmm6,xmm6,xmm9
  4083ab:	vpunpcklwd xmm3,xmm6,xmm3
  4083af:	vpblendd xmm2,xmm3,xmm2,0x2
  4083b5:	vmovq  QWORD PTR [r15+rax*1],xmm2
  4083bb:	vpsllq ymm2,ymm0,0x3
  4083c0:	vmovq  xmm3,r8
  4083c5:	vpbroadcastq ymm3,xmm3
  4083ca:	vpaddq ymm2,ymm3,ymm2
  4083ce:	vpaddq ymm2,ymm2,ymm4
  4083d2:	vpsllq ymm6,ymm1,0x3
  4083d7:	vpaddq ymm3,ymm3,ymm6
  4083db:	vpaddq ymm3,ymm3,ymm4
  4083df:	vpcmpeqd xmm6,xmm6,xmm6
  4083e3:	vpgatherqd xmm7,DWORD PTR [ymm3*1+0x0],xmm6
  4083ed:	vpcmpeqd xmm3,xmm3,xmm3
  4083f1:	vpgatherqd xmm6,DWORD PTR [ymm2*1+0x0],xmm3
  4083fb:	vmovdqu XMMWORD PTR [rsi+rax*4+0x10],xmm6
  408401:	vmovdqu XMMWORD PTR [rsi+rax*4],xmm7
  408406:	add    rax,0x8
  40840a:	vpaddq ymm1,ymm1,ymm5
  40840e:	vpaddq ymm0,ymm0,ymm5
  408412:	add    rdi,0x40
  408416:	cmp    r9,rax
  408419:	jne    408380 <flatcc_builder_end_union_vector@@Base+0x360>
  40841f:	jmp    4080d7 <flatcc_builder_end_union_vector@@Base+0xb7>
  408424:	lea    rdi,[rip+0x6df3]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  40842b:	lea    rsi,[rip+0x61b0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408432:	lea    rcx,[rip+0x6e17]        # 40f250 <flatcc_builder_padding_base@@Base+0xef0>
  408439:	mov    edx,0x651
  40843e:	call   403060 <__assert_fail@plt>
  408443:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40844d:	nop    DWORD PTR [rax]

0000000000408450 <flatcc_builder_union_vector_count@@Base>:
  408450:	mov    rax,QWORD PTR [rdi+0x30]
  408454:	mov    eax,DWORD PTR [rax+0x14]
  408457:	ret    
  408458:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408460 <flatcc_builder_union_vector_edit@@Base>:
  408460:	mov    rax,QWORD PTR [rdi+0x18]
  408464:	ret    
  408465:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40846f:	nop

0000000000408470 <flatcc_builder_extend_union_vector@@Base>:
  408470:	push   r14
  408472:	push   rbx
  408473:	push   rax
  408474:	mov    rax,QWORD PTR [rdi+0x30]
  408478:	mov    ecx,DWORD PTR [rax+0x14]
  40847b:	add    ecx,esi
  40847d:	jb     408504 <flatcc_builder_extend_union_vector@@Base+0x94>
  408483:	cmp    ecx,0x20000000
  408489:	jae    408504 <flatcc_builder_extend_union_vector@@Base+0x94>
  40848b:	mov    rbx,rdi
  40848e:	mov    DWORD PTR [rax+0x14],ecx
  408491:	mov    r14d,DWORD PTR [rdi+0x20]
  408495:	lea    eax,[r14+rsi*8]
  408499:	mov    DWORD PTR [rdi+0x20],eax
  40849c:	cmp    eax,DWORD PTR [rdi+0x24]
  40849f:	jae    4084a7 <flatcc_builder_extend_union_vector@@Base+0x37>
  4084a1:	mov    rax,QWORD PTR [rbx+0x18]
  4084a5:	jmp    4084f9 <flatcc_builder_extend_union_vector@@Base+0x89>
  4084a7:	inc    eax
  4084a9:	lea    rsi,[rbx+0x68]
  4084ad:	mov    rdi,QWORD PTR [rbx+0x40]
  4084b1:	mov    edx,DWORD PTR [rbx+0x28]
  4084b4:	add    rdx,rax
  4084b7:	mov    ecx,0x1
  4084bc:	mov    r8d,0x1
  4084c2:	call   QWORD PTR [rbx+0x50]
  4084c5:	test   eax,eax
  4084c7:	je     4084cd <flatcc_builder_extend_union_vector@@Base+0x5d>
  4084c9:	xor    eax,eax
  4084cb:	jmp    4084fc <flatcc_builder_extend_union_vector@@Base+0x8c>
  4084cd:	mov    ecx,DWORD PTR [rbx+0x28]
  4084d0:	mov    rax,rcx
  4084d3:	add    rax,QWORD PTR [rbx+0x68]
  4084d7:	mov    QWORD PTR [rbx+0x18],rax
  4084db:	mov    edx,DWORD PTR [rbx+0x70]
  4084de:	sub    edx,ecx
  4084e0:	cmp    edx,0xfffffffc
  4084e3:	mov    ecx,0xfffffffc
  4084e8:	cmovb  ecx,edx
  4084eb:	mov    DWORD PTR [rbx+0x24],ecx
  4084ee:	mov    rcx,QWORD PTR [rbx+0x30]
  4084f2:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  4084f9:	add    rax,r14
  4084fc:	add    rsp,0x8
  408500:	pop    rbx
  408501:	pop    r14
  408503:	ret    
  408504:	lea    rdi,[rip+0x71a0]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  40850b:	lea    rsi,[rip+0x60d0]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408512:	lea    rcx,[rip+0x71ad]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  408519:	mov    edx,0x37c
  40851e:	call   403060 <__assert_fail@plt>
  408523:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40852d:	nop    DWORD PTR [rax]

0000000000408530 <flatcc_builder_truncate_union_vector@@Base>:
  408530:	push   rax
  408531:	mov    rax,QWORD PTR [rdi+0x30]
  408535:	cmp    WORD PTR [rax+0xe],0x7
  40853a:	jne    40856b <flatcc_builder_truncate_union_vector@@Base+0x3b>
  40853c:	mov    rdx,rsi
  40853f:	mov    ecx,DWORD PTR [rax+0x14]
  408542:	sub    ecx,edx
  408544:	jb     40858a <flatcc_builder_truncate_union_vector@@Base+0x5a>
  408546:	mov    DWORD PTR [rax+0x14],ecx
  408549:	mov    rax,QWORD PTR [rdi+0x30]
  40854d:	imul   edx,DWORD PTR [rax+0x10]
  408551:	mov    eax,DWORD PTR [rdi+0x20]
  408554:	sub    eax,edx
  408556:	mov    DWORD PTR [rdi+0x20],eax
  408559:	add    rax,QWORD PTR [rdi+0x18]
  40855d:	mov    rdi,rax
  408560:	xor    esi,esi
  408562:	call   403070 <memset@plt>
  408567:	xor    eax,eax
  408569:	pop    rcx
  40856a:	ret    
  40856b:	lea    rdi,[rip+0x6cac]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  408572:	lea    rsi,[rip+0x6069]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408579:	lea    rcx,[rip+0x6d23]        # 40f2a3 <flatcc_builder_padding_base@@Base+0xf43>
  408580:	mov    edx,0x681
  408585:	call   403060 <__assert_fail@plt>
  40858a:	lea    rdi,[rip+0x66f1]        # 40ec82 <flatcc_builder_padding_base@@Base+0x922>
  408591:	lea    rsi,[rip+0x604a]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408598:	lea    rcx,[rip+0x6d04]        # 40f2a3 <flatcc_builder_padding_base@@Base+0xf43>
  40859f:	mov    edx,0x682
  4085a4:	call   403060 <__assert_fail@plt>
  4085a9:	nop    DWORD PTR [rax+0x0]

00000000004085b0 <flatcc_builder_union_vector_push@@Base>:
  4085b0:	push   r15
  4085b2:	push   r14
  4085b4:	push   rbx
  4085b5:	mov    rax,QWORD PTR [rdi+0x30]
  4085b9:	cmp    WORD PTR [rax+0xe],0x7
  4085be:	jne    408657 <flatcc_builder_union_vector_push@@Base+0xa7>
  4085c4:	mov    ecx,DWORD PTR [rax+0x14]
  4085c7:	cmp    ecx,0x1fffffff
  4085cd:	je     408619 <flatcc_builder_union_vector_push@@Base+0x69>
  4085cf:	mov    r14,rsi
  4085d2:	mov    rbx,rdi
  4085d5:	inc    ecx
  4085d7:	mov    DWORD PTR [rax+0x14],ecx
  4085da:	mov    r15d,DWORD PTR [rdi+0x20]
  4085de:	lea    eax,[r15+0x8]
  4085e2:	mov    DWORD PTR [rdi+0x20],eax
  4085e5:	cmp    eax,DWORD PTR [rdi+0x24]
  4085e8:	jae    4085f5 <flatcc_builder_union_vector_push@@Base+0x45>
  4085ea:	mov    rax,QWORD PTR [rbx+0x18]
  4085ee:	add    rax,r15
  4085f1:	jne    40864e <flatcc_builder_union_vector_push@@Base+0x9e>
  4085f3:	jmp    408619 <flatcc_builder_union_vector_push@@Base+0x69>
  4085f5:	lea    eax,[r15+0x9]
  4085f9:	lea    rsi,[rbx+0x68]
  4085fd:	mov    rdi,QWORD PTR [rbx+0x40]
  408601:	mov    edx,DWORD PTR [rbx+0x28]
  408604:	add    rdx,rax
  408607:	mov    ecx,0x1
  40860c:	mov    r8d,0x1
  408612:	call   QWORD PTR [rbx+0x50]
  408615:	test   eax,eax
  408617:	je     40861d <flatcc_builder_union_vector_push@@Base+0x6d>
  408619:	xor    eax,eax
  40861b:	jmp    408651 <flatcc_builder_union_vector_push@@Base+0xa1>
  40861d:	mov    ecx,DWORD PTR [rbx+0x28]
  408620:	mov    rax,rcx
  408623:	add    rax,QWORD PTR [rbx+0x68]
  408627:	mov    QWORD PTR [rbx+0x18],rax
  40862b:	mov    edx,DWORD PTR [rbx+0x70]
  40862e:	sub    edx,ecx
  408630:	cmp    edx,0xfffffffc
  408633:	mov    ecx,0xfffffffc
  408638:	cmovb  ecx,edx
  40863b:	mov    DWORD PTR [rbx+0x24],ecx
  40863e:	mov    rcx,QWORD PTR [rbx+0x30]
  408642:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  408649:	add    rax,r15
  40864c:	je     408619 <flatcc_builder_union_vector_push@@Base+0x69>
  40864e:	mov    QWORD PTR [rax],r14
  408651:	pop    rbx
  408652:	pop    r14
  408654:	pop    r15
  408656:	ret    
  408657:	lea    rdi,[rip+0x6bc0]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  40865e:	lea    rsi,[rip+0x5f7d]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408665:	lea    rcx,[rip+0x6c7c]        # 40f2e8 <flatcc_builder_padding_base@@Base+0xf88>
  40866c:	mov    edx,0x68d
  408671:	call   403060 <__assert_fail@plt>
  408676:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000408680 <flatcc_builder_append_union_vector@@Base>:
  408680:	push   r15
  408682:	push   r14
  408684:	push   r13
  408686:	push   r12
  408688:	push   rbx
  408689:	mov    rax,QWORD PTR [rdi+0x30]
  40868d:	cmp    WORD PTR [rax+0xe],0x7
  408692:	jne    40876e <flatcc_builder_append_union_vector@@Base+0xee>
  408698:	mov    r15,rdx
  40869b:	mov    ecx,DWORD PTR [rax+0x14]
  40869e:	add    ecx,r15d
  4086a1:	jb     40874f <flatcc_builder_append_union_vector@@Base+0xcf>
  4086a7:	cmp    ecx,0x20000000
  4086ad:	jae    40874f <flatcc_builder_append_union_vector@@Base+0xcf>
  4086b3:	mov    r14,rsi
  4086b6:	mov    rbx,rdi
  4086b9:	mov    DWORD PTR [rax+0x14],ecx
  4086bc:	mov    r13d,DWORD PTR [rdi+0x20]
  4086c0:	lea    eax,[r13+r15*8+0x0]
  4086c5:	mov    DWORD PTR [rdi+0x20],eax
  4086c8:	cmp    eax,DWORD PTR [rdi+0x24]
  4086cb:	jae    4086d8 <flatcc_builder_append_union_vector@@Base+0x58>
  4086cd:	mov    r12,QWORD PTR [rbx+0x18]
  4086d1:	add    r12,r13
  4086d4:	jne    408730 <flatcc_builder_append_union_vector@@Base+0xb0>
  4086d6:	jmp    4086fa <flatcc_builder_append_union_vector@@Base+0x7a>
  4086d8:	inc    eax
  4086da:	lea    rsi,[rbx+0x68]
  4086de:	mov    rdi,QWORD PTR [rbx+0x40]
  4086e2:	mov    edx,DWORD PTR [rbx+0x28]
  4086e5:	add    rdx,rax
  4086e8:	mov    ecx,0x1
  4086ed:	mov    r8d,0x1
  4086f3:	call   QWORD PTR [rbx+0x50]
  4086f6:	test   eax,eax
  4086f8:	je     4086ff <flatcc_builder_append_union_vector@@Base+0x7f>
  4086fa:	xor    r12d,r12d
  4086fd:	jmp    408742 <flatcc_builder_append_union_vector@@Base+0xc2>
  4086ff:	mov    eax,DWORD PTR [rbx+0x28]
  408702:	mov    r12,rax
  408705:	add    r12,QWORD PTR [rbx+0x68]
  408709:	mov    QWORD PTR [rbx+0x18],r12
  40870d:	mov    ecx,DWORD PTR [rbx+0x70]
  408710:	sub    ecx,eax
  408712:	cmp    ecx,0xfffffffc
  408715:	mov    eax,0xfffffffc
  40871a:	cmovb  eax,ecx
  40871d:	mov    DWORD PTR [rbx+0x24],eax
  408720:	mov    rax,QWORD PTR [rbx+0x30]
  408724:	mov    DWORD PTR [rax+0x4],0xfffffffc
  40872b:	add    r12,r13
  40872e:	je     4086fa <flatcc_builder_append_union_vector@@Base+0x7a>
  408730:	shl    r15d,0x3
  408734:	mov    edx,r15d
  408737:	mov    rdi,r12
  40873a:	mov    rsi,r14
  40873d:	call   4030a0 <memcpy@plt>
  408742:	mov    rax,r12
  408745:	pop    rbx
  408746:	pop    r12
  408748:	pop    r13
  40874a:	pop    r14
  40874c:	pop    r15
  40874e:	ret    
  40874f:	lea    rdi,[rip+0x6f55]        # 40f6ab <flatcc_builder_padding_base@@Base+0x134b>
  408756:	lea    rsi,[rip+0x5e85]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40875d:	lea    rcx,[rip+0x6f62]        # 40f6c6 <flatcc_builder_padding_base@@Base+0x1366>
  408764:	mov    edx,0x37c
  408769:	call   403060 <__assert_fail@plt>
  40876e:	lea    rdi,[rip+0x6aa9]        # 40f21e <flatcc_builder_padding_base@@Base+0xebe>
  408775:	lea    rsi,[rip+0x5e66]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  40877c:	lea    rcx,[rip+0x6bd2]        # 40f355 <flatcc_builder_padding_base@@Base+0xff5>
  408783:	mov    edx,0x69c
  408788:	call   403060 <__assert_fail@plt>
  40878d:	nop    DWORD PTR [rax]

0000000000408790 <flatcc_builder_create_string@@Base>:
  408790:	push   rbp
  408791:	push   rbx
  408792:	sub    rsp,0x98
  408799:	xor    ebp,ebp
  40879b:	mov    rax,rdx
  40879e:	shr    rax,0x20
  4087a2:	jne    408876 <flatcc_builder_create_string@@Base+0xe6>
  4087a8:	mov    rbx,rdi
  4087ab:	mov    DWORD PTR [rsp+0x4],edx
  4087af:	mov    ebp,DWORD PTR [rdi+0xf0]
  4087b5:	mov    eax,edx
  4087b7:	not    eax
  4087b9:	add    eax,ebp
  4087bb:	and    eax,0x3
  4087be:	inc    eax
  4087c0:	mov    QWORD PTR [rsp+0x8],0x4
  4087c9:	lea    rcx,[rsp+0x4]
  4087ce:	mov    QWORD PTR [rsp+0x18],rcx
  4087d3:	mov    QWORD PTR [rsp+0x20],0x4
  4087dc:	mov    DWORD PTR [rsp+0x10],0x1
  4087e4:	test   rdx,rdx
  4087e7:	je     40880b <flatcc_builder_create_string@@Base+0x7b>
  4087e9:	lea    rcx,[rdx+0x4]
  4087ed:	mov    QWORD PTR [rsp+0x8],rcx
  4087f2:	mov    QWORD PTR [rsp+0x28],rsi
  4087f7:	mov    QWORD PTR [rsp+0x30],rdx
  4087fc:	mov    DWORD PTR [rsp+0x10],0x2
  408804:	mov    edx,0x2
  408809:	jmp    408815 <flatcc_builder_create_string@@Base+0x85>
  40880b:	mov    ecx,0x4
  408810:	mov    edx,0x1
  408815:	mov    esi,eax
  408817:	lea    r8,[rcx+rsi*1]
  40881b:	mov    QWORD PTR [rsp+0x8],r8
  408820:	mov    eax,edx
  408822:	shl    rax,0x4
  408826:	lea    rdi,[rip+0x5b33]        # 40e360 <flatcc_builder_padding_base@@Base>
  40882d:	mov    QWORD PTR [rsp+rax*1+0x18],rdi
  408832:	mov    QWORD PTR [rsp+rax*1+0x20],rsi
  408837:	inc    edx
  408839:	mov    DWORD PTR [rsp+0x10],edx
  40883d:	cmp    r8,0x11
  408841:	setb   al
  408844:	add    rcx,rsi
  408847:	add    rcx,0xfffffffffffffff0
  40884b:	shr    rcx,0x20
  40884f:	sete   cl
  408852:	test   r8d,r8d
  408855:	jle    408882 <flatcc_builder_create_string@@Base+0xf2>
  408857:	or     al,cl
  408859:	je     408882 <flatcc_builder_create_string@@Base+0xf2>
  40885b:	sub    ebp,r8d
  40885e:	mov    rdi,QWORD PTR [rbx+0x38]
  408862:	lea    rsi,[rsp+0x18]
  408867:	mov    ecx,ebp
  408869:	call   QWORD PTR [rbx+0x48]
  40886c:	test   eax,eax
  40886e:	jne    4088a1 <flatcc_builder_create_string@@Base+0x111>
  408870:	mov    DWORD PTR [rbx+0xf0],ebp
  408876:	mov    eax,ebp
  408878:	add    rsp,0x98
  40887f:	pop    rbx
  408880:	pop    rbp
  408881:	ret    
  408882:	lea    rdi,[rip+0x6f19]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  408889:	lea    rsi,[rip+0x5d52]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408890:	lea    rcx,[rip+0x6dca]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  408897:	mov    edx,0x287
  40889c:	call   403060 <__assert_fail@plt>
  4088a1:	lea    rdi,[rip+0x6efa]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  4088a8:	lea    rsi,[rip+0x5d33]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4088af:	lea    rcx,[rip+0x6dab]        # 40f661 <flatcc_builder_padding_base@@Base+0x1301>
  4088b6:	mov    edx,0x28b
  4088bb:	call   403060 <__assert_fail@plt>

00000000004088c0 <flatcc_builder_create_string_str@@Base>:
  4088c0:	push   r14
  4088c2:	push   rbx
  4088c3:	push   rax
  4088c4:	mov    rbx,rsi
  4088c7:	mov    r14,rdi
  4088ca:	mov    rdi,rsi
  4088cd:	call   403050 <strlen@plt>
  4088d2:	mov    rdi,r14
  4088d5:	mov    rsi,rbx
  4088d8:	mov    rdx,rax
  4088db:	add    rsp,0x8
  4088df:	pop    rbx
  4088e0:	pop    r14
  4088e2:	jmp    408790 <flatcc_builder_create_string@@Base>
  4088e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004088f0 <flatcc_builder_create_string_strn@@Base>:
  4088f0:	push   r15
  4088f2:	push   r14
  4088f4:	push   rbx
  4088f5:	mov    rbx,rdx
  4088f8:	mov    r14,rsi
  4088fb:	mov    r15,rdi
  4088fe:	mov    rdi,rsi
  408901:	xor    esi,esi
  408903:	call   403080 <memchr@plt>
  408908:	mov    rcx,rax
  40890b:	sub    rcx,r14
  40890e:	test   rax,rax
  408911:	cmovne rbx,rcx
  408915:	mov    rdi,r15
  408918:	mov    rsi,r14
  40891b:	mov    rdx,rbx
  40891e:	pop    rbx
  40891f:	pop    r14
  408921:	pop    r15
  408923:	jmp    408790 <flatcc_builder_create_string@@Base>
  408928:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408930 <flatcc_builder_end_string@@Base>:
  408930:	push   rbp
  408931:	push   rbx
  408932:	push   rax
  408933:	mov    rax,QWORD PTR [rdi+0x30]
  408937:	cmp    WORD PTR [rax+0xe],0x6
  40893c:	jne    4089d4 <flatcc_builder_end_string@@Base+0xa4>
  408942:	mov    rbx,rdi
  408945:	mov    edx,DWORD PTR [rax+0x14]
  408948:	cmp    edx,DWORD PTR [rdi+0x20]
  40894b:	jne    4089f3 <flatcc_builder_end_string@@Base+0xc3>
  408951:	mov    rsi,QWORD PTR [rbx+0x18]
  408955:	mov    rdi,rbx
  408958:	call   408790 <flatcc_builder_create_string@@Base>
  40895d:	mov    ebp,eax
  40895f:	test   eax,eax
  408961:	je     4089cb <flatcc_builder_end_string@@Base+0x9b>
  408963:	mov    rdi,QWORD PTR [rbx+0x18]
  408967:	mov    edx,DWORD PTR [rbx+0x20]
  40896a:	xor    esi,esi
  40896c:	call   403070 <memset@plt>
  408971:	mov    rax,QWORD PTR [rbx+0x30]
  408975:	mov    ecx,DWORD PTR [rax+0x8]
  408978:	mov    DWORD PTR [rbx+0x20],ecx
  40897b:	mov    ecx,DWORD PTR [rax]
  40897d:	mov    DWORD PTR [rbx+0x28],ecx
  408980:	mov    edx,DWORD PTR [rax+0x4]
  408983:	mov    rsi,rcx
  408986:	add    rsi,QWORD PTR [rbx+0x68]
  40898a:	mov    QWORD PTR [rbx+0x18],rsi
  40898e:	mov    esi,DWORD PTR [rbx+0x70]
  408991:	sub    esi,ecx
  408993:	cmp    esi,edx
  408995:	cmova  esi,edx
  408998:	mov    DWORD PTR [rbx+0x24],esi
  40899b:	movzx  ecx,WORD PTR [rbx+0xea]
  4089a2:	cmp    WORD PTR [rbx+0xe8],cx
  4089a9:	jae    4089b2 <flatcc_builder_end_string@@Base+0x82>
  4089ab:	mov    WORD PTR [rbx+0xe8],cx
  4089b2:	movzx  ecx,WORD PTR [rax+0xc]
  4089b6:	mov    WORD PTR [rbx+0xea],cx
  4089bd:	add    rax,0xffffffffffffffdc
  4089c1:	mov    QWORD PTR [rbx+0x30],rax
  4089c5:	dec    DWORD PTR [rbx+0x104]
  4089cb:	mov    eax,ebp
  4089cd:	add    rsp,0x8
  4089d1:	pop    rbx
  4089d2:	pop    rbp
  4089d3:	ret    
  4089d4:	lea    rdi,[rip+0x6146]        # 40eb21 <flatcc_builder_padding_base@@Base+0x7c1>
  4089db:	lea    rsi,[rip+0x5c00]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  4089e2:	lea    rcx,[rip+0x69eb]        # 40f3d4 <flatcc_builder_padding_base@@Base+0x1074>
  4089e9:	mov    edx,0x6c4
  4089ee:	call   403060 <__assert_fail@plt>
  4089f3:	lea    rdi,[rip+0x6a1d]        # 40f417 <flatcc_builder_padding_base@@Base+0x10b7>
  4089fa:	lea    rsi,[rip+0x5be1]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408a01:	lea    rcx,[rip+0x69cc]        # 40f3d4 <flatcc_builder_padding_base@@Base+0x1074>
  408a08:	mov    edx,0x6c5
  408a0d:	call   403060 <__assert_fail@plt>
  408a12:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408a1c:	nop    DWORD PTR [rax+0x0]

0000000000408a20 <flatcc_builder_string_edit@@Base>:
  408a20:	mov    rax,QWORD PTR [rdi+0x18]
  408a24:	ret    
  408a25:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408a2f:	nop

0000000000408a30 <flatcc_builder_string_len@@Base>:
  408a30:	mov    rax,QWORD PTR [rdi+0x30]
  408a34:	mov    eax,DWORD PTR [rax+0x14]
  408a37:	ret    
  408a38:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408a40 <flatcc_builder_table_edit@@Base>:
  408a40:	push   rax
  408a41:	mov    rax,QWORD PTR [rdi+0x30]
  408a45:	cmp    WORD PTR [rax+0xe],0x3
  408a4a:	jne    408a58 <flatcc_builder_table_edit@@Base+0x18>
  408a4c:	mov    eax,DWORD PTR [rdi+0x20]
  408a4f:	add    rax,QWORD PTR [rdi+0x18]
  408a53:	sub    rax,rsi
  408a56:	pop    rcx
  408a57:	ret    
  408a58:	lea    rdi,[rip+0x63b2]        # 40ee11 <flatcc_builder_padding_base@@Base+0xab1>
  408a5f:	lea    rsi,[rip+0x5b7c]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408a66:	lea    rcx,[rip+0x6a5c]        # 40f4c9 <flatcc_builder_padding_base@@Base+0x1169>
  408a6d:	mov    edx,0x702
  408a72:	call   403060 <__assert_fail@plt>
  408a77:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408a80 <flatcc_builder_table_add_copy@@Base>:
  408a80:	push   r15
  408a82:	push   r14
  408a84:	push   rbx
  408a85:	mov    r15,rcx
  408a88:	mov    r14,rdx
  408a8b:	mov    rdx,rcx
  408a8e:	mov    ecx,r8d
  408a91:	call   4079f0 <flatcc_builder_table_add@@Base>
  408a96:	mov    rbx,rax
  408a99:	test   rax,rax
  408a9c:	je     408aac <flatcc_builder_table_add_copy@@Base+0x2c>
  408a9e:	mov    rdi,rbx
  408aa1:	mov    rsi,r14
  408aa4:	mov    rdx,r15
  408aa7:	call   4030a0 <memcpy@plt>
  408aac:	mov    rax,rbx
  408aaf:	pop    rbx
  408ab0:	pop    r14
  408ab2:	pop    r15
  408ab4:	ret    
  408ab5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408abf:	nop

0000000000408ac0 <flatcc_builder_push_buffer_alignment@@Base>:
  408ac0:	movzx  eax,WORD PTR [rdi+0xe8]
  408ac7:	mov    WORD PTR [rdi+0xe8],0x4
  408ad0:	ret    
  408ad1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408adb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408ae0 <flatcc_builder_pop_buffer_alignment@@Base>:
  408ae0:	cmp    WORD PTR [rdi+0xe8],si
  408ae7:	jae    408af0 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  408ae9:	mov    WORD PTR [rdi+0xe8],si
  408af0:	ret    
  408af1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408afb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408b00 <flatcc_builder_get_buffer_alignment@@Base>:
  408b00:	movzx  eax,WORD PTR [rdi+0xe8]
  408b07:	ret    
  408b08:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408b10 <flatcc_builder_set_vtable_clustering@@Base>:
  408b10:	xor    eax,eax
  408b12:	test   esi,esi
  408b14:	sete   al
  408b17:	mov    DWORD PTR [rdi+0x124],eax
  408b1d:	ret    
  408b1e:	xchg   ax,ax

0000000000408b20 <flatcc_builder_set_block_align@@Base>:
  408b20:	mov    WORD PTR [rdi+0xec],si
  408b27:	ret    
  408b28:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408b30 <flatcc_builder_get_level@@Base>:
  408b30:	mov    eax,DWORD PTR [rdi+0x104]
  408b36:	ret    
  408b37:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408b40 <flatcc_builder_set_max_level@@Base>:
  408b40:	mov    DWORD PTR [rdi+0x120],esi
  408b46:	cmp    DWORD PTR [rdi+0x108],esi
  408b4c:	jge    408b54 <flatcc_builder_set_max_level@@Base+0x14>
  408b4e:	mov    DWORD PTR [rdi+0x108],esi
  408b54:	ret    
  408b55:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b5f:	nop

0000000000408b60 <flatcc_builder_get_buffer_size@@Base>:
  408b60:	movsxd rax,DWORD PTR [rdi+0xf4]
  408b67:	movsxd rcx,DWORD PTR [rdi+0xf0]
  408b6e:	sub    rax,rcx
  408b71:	ret    
  408b72:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408b7c:	nop    DWORD PTR [rax+0x0]

0000000000408b80 <flatcc_builder_get_buffer_start@@Base>:
  408b80:	mov    eax,DWORD PTR [rdi+0xf0]
  408b86:	ret    
  408b87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408b90 <flatcc_builder_get_buffer_end@@Base>:
  408b90:	mov    eax,DWORD PTR [rdi+0xf4]
  408b96:	ret    
  408b97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408ba0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  408ba0:	mov    QWORD PTR [rdi+0x118],rsi
  408ba7:	ret    
  408ba8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408bb0 <flatcc_builder_set_identifier@@Base>:
  408bb0:	test   rsi,rsi
  408bb3:	jne    408bbc <flatcc_builder_set_identifier@@Base+0xc>
  408bb5:	lea    rsi,[rip+0x57a4]        # 40e360 <flatcc_builder_padding_base@@Base>
  408bbc:	mov    eax,DWORD PTR [rsi]
  408bbe:	mov    DWORD PTR [rdi+0x110],eax
  408bc4:	ret    
  408bc5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408bcf:	nop

0000000000408bd0 <flatcc_builder_get_type@@Base>:
  408bd0:	mov    rax,QWORD PTR [rdi+0x30]
  408bd4:	test   rax,rax
  408bd7:	je     408bde <flatcc_builder_get_type@@Base+0xe>
  408bd9:	movzx  eax,WORD PTR [rax+0xe]
  408bdd:	ret    
  408bde:	xor    eax,eax
  408be0:	ret    
  408be1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408beb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000408bf0 <flatcc_builder_get_type_at@@Base>:
  408bf0:	xor    eax,eax
  408bf2:	test   esi,esi
  408bf4:	jle    408c12 <flatcc_builder_get_type_at@@Base+0x22>
  408bf6:	mov    ecx,DWORD PTR [rdi+0x104]
  408bfc:	cmp    ecx,esi
  408bfe:	jl     408c12 <flatcc_builder_get_type_at@@Base+0x22>
  408c00:	mov    rax,QWORD PTR [rdi+0x30]
  408c04:	sub    esi,ecx
  408c06:	movsxd rcx,esi
  408c09:	lea    rcx,[rcx+rcx*8]
  408c0d:	movzx  eax,WORD PTR [rax+rcx*4+0xe]
  408c12:	ret    
  408c13:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408c1d:	nop    DWORD PTR [rax]

0000000000408c20 <flatcc_builder_get_direct_buffer@@Base>:
  408c20:	cmp    DWORD PTR [rdi+0x128],0x0
  408c27:	je     408c39 <flatcc_builder_get_direct_buffer@@Base+0x19>
  408c29:	mov    rax,QWORD PTR [rdi+0x130]
  408c30:	cmp    rax,QWORD PTR [rdi+0x138]
  408c37:	je     408c48 <flatcc_builder_get_direct_buffer@@Base+0x28>
  408c39:	test   rsi,rsi
  408c3c:	je     408c45 <flatcc_builder_get_direct_buffer@@Base+0x25>
  408c3e:	mov    QWORD PTR [rsi],0x0
  408c45:	xor    eax,eax
  408c47:	ret    
  408c48:	test   rsi,rsi
  408c4b:	je     408c57 <flatcc_builder_get_direct_buffer@@Base+0x37>
  408c4d:	mov    rax,QWORD PTR [rdi+0x160]
  408c54:	mov    QWORD PTR [rsi],rax
  408c57:	mov    rax,QWORD PTR [rdi+0x140]
  408c5e:	ret    
  408c5f:	nop

0000000000408c60 <flatcc_builder_copy_buffer@@Base>:
  408c60:	push   rax
  408c61:	cmp    DWORD PTR [rdi+0x128],0x0
  408c68:	je     408c7d <flatcc_builder_copy_buffer@@Base+0x1d>
  408c6a:	add    rdi,0x130
  408c71:	call   4094e0 <flatcc_emitter_copy_buffer@@Base>
  408c76:	test   rax,rax
  408c79:	je     408c81 <flatcc_builder_copy_buffer@@Base+0x21>
  408c7b:	pop    rcx
  408c7c:	ret    
  408c7d:	xor    eax,eax
  408c7f:	pop    rcx
  408c80:	ret    
  408c81:	lea    rdi,[rip+0x5bc8]        # 40e850 <flatcc_builder_padding_base@@Base+0x4f0>
  408c88:	lea    rsi,[rip+0x5953]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408c8f:	lea    rcx,[rip+0x68be]        # 40f554 <flatcc_builder_padding_base@@Base+0x11f4>
  408c96:	mov    edx,0x786
  408c9b:	call   403060 <__assert_fail@plt>

0000000000408ca0 <flatcc_builder_finalize_buffer@@Base>:
  408ca0:	push   r15
  408ca2:	push   r14
  408ca4:	push   rbx
  408ca5:	mov    rbx,rdi
  408ca8:	movsxd r14,DWORD PTR [rdi+0xf4]
  408caf:	movsxd rax,DWORD PTR [rdi+0xf0]
  408cb6:	sub    r14,rax
  408cb9:	test   rsi,rsi
  408cbc:	je     408cc1 <flatcc_builder_finalize_buffer@@Base+0x21>
  408cbe:	mov    QWORD PTR [rsi],r14
  408cc1:	mov    rdi,r14
  408cc4:	call   4030b0 <malloc@plt>
  408cc9:	test   rax,rax
  408ccc:	je     408cfd <flatcc_builder_finalize_buffer@@Base+0x5d>
  408cce:	cmp    DWORD PTR [rbx+0x128],0x0
  408cd5:	je     408d1c <flatcc_builder_finalize_buffer@@Base+0x7c>
  408cd7:	mov    r15,rax
  408cda:	add    rbx,0x130
  408ce1:	mov    rdi,rbx
  408ce4:	mov    rsi,rax
  408ce7:	mov    rdx,r14
  408cea:	call   4094e0 <flatcc_emitter_copy_buffer@@Base>
  408cef:	test   rax,rax
  408cf2:	je     408d3b <flatcc_builder_finalize_buffer@@Base+0x9b>
  408cf4:	mov    rax,r15
  408cf7:	pop    rbx
  408cf8:	pop    r14
  408cfa:	pop    r15
  408cfc:	ret    
  408cfd:	lea    rdi,[rip+0x6a9e]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  408d04:	lea    rsi,[rip+0x58d7]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408d0b:	lea    rcx,[rip+0x6887]        # 40f599 <flatcc_builder_padding_base@@Base+0x1239>
  408d12:	mov    edx,0x798
  408d17:	call   403060 <__assert_fail@plt>
  408d1c:	lea    rdi,[rip+0x6a7f]        # 40f7a2 <flatcc_builder_padding_base@@Base+0x1442>
  408d23:	lea    rsi,[rip+0x58b8]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408d2a:	lea    rcx,[rip+0x6868]        # 40f599 <flatcc_builder_padding_base@@Base+0x1239>
  408d31:	mov    edx,0x79c
  408d36:	call   403060 <__assert_fail@plt>
  408d3b:	lea    rdi,[rip+0x5b0e]        # 40e850 <flatcc_builder_padding_base@@Base+0x4f0>
  408d42:	lea    rsi,[rip+0x5899]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408d49:	lea    rcx,[rip+0x6804]        # 40f554 <flatcc_builder_padding_base@@Base+0x11f4>
  408d50:	mov    edx,0x786
  408d55:	call   403060 <__assert_fail@plt>
  408d5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000408d60 <flatcc_builder_finalize_aligned_buffer@@Base>:
  408d60:	push   r15
  408d62:	push   r14
  408d64:	push   r12
  408d66:	push   rbx
  408d67:	push   rax
  408d68:	mov    r14,rsi
  408d6b:	mov    r15,rdi
  408d6e:	movsxd rax,DWORD PTR [rdi+0xf4]
  408d75:	movsxd rcx,DWORD PTR [rdi+0xf0]
  408d7c:	sub    rax,rcx
  408d7f:	test   rsi,rsi
  408d82:	je     408d87 <flatcc_builder_finalize_aligned_buffer@@Base+0x27>
  408d84:	mov    QWORD PTR [r14],rax
  408d87:	movzx  ecx,WORD PTR [r15+0xe8]
  408d8f:	add    rax,rcx
  408d92:	add    rax,0xffffffffffffffff
  408d96:	mov    rbx,rcx
  408d99:	neg    rbx
  408d9c:	and    rbx,rax
  408d9f:	cmp    rcx,0x8
  408da3:	mov    QWORD PTR [rsp],0x0
  408dab:	mov    esi,0x8
  408db0:	cmova  rsi,rcx
  408db4:	mov    rdi,rsp
  408db7:	mov    rdx,rbx
  408dba:	call   4030f0 <posix_memalign@plt>
  408dbf:	mov    r12,QWORD PTR [rsp]
  408dc3:	test   eax,eax
  408dc5:	je     408dd6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408dc7:	test   r12,r12
  408dca:	je     408dd6 <flatcc_builder_finalize_aligned_buffer@@Base+0x76>
  408dcc:	mov    rdi,r12
  408dcf:	call   403030 <free@plt>
  408dd4:	jmp    408e1e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408dd6:	test   r12,r12
  408dd9:	je     408e1e <flatcc_builder_finalize_aligned_buffer@@Base+0xbe>
  408ddb:	cmp    DWORD PTR [r15+0x128],0x0
  408de3:	je     408dcc <flatcc_builder_finalize_aligned_buffer@@Base+0x6c>
  408de5:	add    r15,0x130
  408dec:	mov    rdi,r15
  408def:	mov    rsi,r12
  408df2:	mov    rdx,rbx
  408df5:	call   4094e0 <flatcc_emitter_copy_buffer@@Base>
  408dfa:	test   rax,rax
  408dfd:	jne    408e2d <flatcc_builder_finalize_aligned_buffer@@Base+0xcd>
  408dff:	lea    rdi,[rip+0x5a4a]        # 40e850 <flatcc_builder_padding_base@@Base+0x4f0>
  408e06:	lea    rsi,[rip+0x57d5]        # 40e5e2 <flatcc_builder_padding_base@@Base+0x282>
  408e0d:	lea    rcx,[rip+0x6740]        # 40f554 <flatcc_builder_padding_base@@Base+0x11f4>
  408e14:	mov    edx,0x786
  408e19:	call   403060 <__assert_fail@plt>
  408e1e:	test   r14,r14
  408e21:	je     408e2a <flatcc_builder_finalize_aligned_buffer@@Base+0xca>
  408e23:	mov    QWORD PTR [r14],0x0
  408e2a:	xor    r12d,r12d
  408e2d:	mov    rax,r12
  408e30:	add    rsp,0x8
  408e34:	pop    rbx
  408e35:	pop    r12
  408e37:	pop    r14
  408e39:	pop    r15
  408e3b:	ret    
  408e3c:	nop    DWORD PTR [rax+0x0]

0000000000408e40 <flatcc_builder_aligned_alloc@@Base>:
  408e40:	push   rax
  408e41:	mov    rdx,rsi
  408e44:	mov    QWORD PTR [rsp],0x0
  408e4c:	cmp    rdi,0x8
  408e50:	mov    esi,0x8
  408e55:	cmova  rsi,rdi
  408e59:	mov    rdi,rsp
  408e5c:	call   4030f0 <posix_memalign@plt>
  408e61:	mov    ecx,eax
  408e63:	mov    rax,QWORD PTR [rsp]
  408e67:	test   ecx,ecx
  408e69:	je     408e82 <flatcc_builder_aligned_alloc@@Base+0x42>
  408e6b:	test   rax,rax
  408e6e:	je     408e82 <flatcc_builder_aligned_alloc@@Base+0x42>
  408e70:	mov    rdi,rax
  408e73:	call   403030 <free@plt>
  408e78:	mov    QWORD PTR [rsp],0x0
  408e80:	xor    eax,eax
  408e82:	pop    rcx
  408e83:	ret    
  408e84:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408e8e:	xchg   ax,ax

0000000000408e90 <flatcc_builder_aligned_free@@Base>:
  408e90:	jmp    403030 <free@plt>
  408e95:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408e9f:	nop

0000000000408ea0 <flatcc_builder_get_emit_context@@Base>:
  408ea0:	mov    rax,QWORD PTR [rdi+0x38]
  408ea4:	ret    
  408ea5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408eaf:	nop

0000000000408eb0 <flatcc_emitter_recycle_page@@Base>:
  408eb0:	mov    rcx,QWORD PTR [rdi]
  408eb3:	mov    eax,0xffffffff
  408eb8:	cmp    rcx,rsi
  408ebb:	je     408f12 <flatcc_emitter_recycle_page@@Base+0x62>
  408ebd:	cmp    QWORD PTR [rdi+0x8],rsi
  408ec1:	je     408f12 <flatcc_emitter_recycle_page@@Base+0x62>
  408ec3:	mov    rax,QWORD PTR [rsi+0xb80]
  408eca:	mov    rdx,QWORD PTR [rsi+0xb88]
  408ed1:	mov    QWORD PTR [rax+0xb88],rdx
  408ed8:	mov    rdx,QWORD PTR [rsi+0xb88]
  408edf:	mov    QWORD PTR [rdx+0xb80],rax
  408ee6:	mov    rax,QWORD PTR [rcx+0xb88]
  408eed:	mov    QWORD PTR [rsi+0xb88],rax
  408ef4:	mov    QWORD PTR [rsi+0xb80],rcx
  408efb:	mov    QWORD PTR [rax+0xb80],rsi
  408f02:	mov    rax,QWORD PTR [rsi+0xb80]
  408f09:	mov    QWORD PTR [rax+0xb88],rsi
  408f10:	xor    eax,eax
  408f12:	ret    
  408f13:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408f1d:	nop    DWORD PTR [rax]

0000000000408f20 <flatcc_emitter_reset@@Base>:
  408f20:	push   r14
  408f22:	push   rbx
  408f23:	push   rax
  408f24:	mov    rax,QWORD PTR [rdi]
  408f27:	test   rax,rax
  408f2a:	je     40900b <flatcc_emitter_reset@@Base+0xeb>
  408f30:	mov    rbx,rdi
  408f33:	mov    QWORD PTR [rdi+0x8],rax
  408f37:	lea    rcx,[rax+0x5c0]
  408f3e:	mov    QWORD PTR [rdi+0x10],rcx
  408f42:	mov    QWORD PTR [rdi+0x20],rcx
  408f46:	mov    QWORD PTR [rdi+0x18],0x5c0
  408f4e:	mov    QWORD PTR [rdi+0x28],0x5c0
  408f56:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  408f60:	mov    rcx,QWORD PTR [rdi+0x30]
  408f64:	mov    rdx,QWORD PTR [rdi+0x40]
  408f68:	test   rdx,rdx
  408f6b:	jne    408f74 <flatcc_emitter_reset@@Base+0x54>
  408f6d:	mov    QWORD PTR [rbx+0x40],rcx
  408f71:	mov    rdx,rcx
  408f74:	lea    rdx,[rdx+rdx*2]
  408f78:	shr    rdx,0x2
  408f7c:	shr    rcx,0x2
  408f80:	add    rcx,rdx
  408f83:	mov    QWORD PTR [rbx+0x40],rcx
  408f87:	mov    QWORD PTR [rbx+0x30],0x0
  408f8f:	add    rcx,rcx
  408f92:	cmp    rcx,QWORD PTR [rbx+0x38]
  408f96:	jae    40900b <flatcc_emitter_reset@@Base+0xeb>
  408f98:	mov    rdi,QWORD PTR [rax+0xb80]
  408f9f:	cmp    rdi,rax
  408fa2:	je     40900b <flatcc_emitter_reset@@Base+0xeb>
  408fa4:	lea    rcx,[rax+0xb80]
  408fab:	mov    r14,0xfffffffffffff480
  408fb2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  408fbc:	nop    DWORD PTR [rax+0x0]
  408fc0:	mov    rdx,QWORD PTR [rdi+0xb80]
  408fc7:	mov    QWORD PTR [rcx],rdx
  408fca:	mov    rcx,QWORD PTR [rdi+0xb80]
  408fd1:	mov    QWORD PTR [rcx+0xb88],rax
  408fd8:	call   403030 <free@plt>
  408fdd:	mov    rax,QWORD PTR [rbx+0x38]
  408fe1:	add    rax,r14
  408fe4:	mov    QWORD PTR [rbx+0x38],rax
  408fe8:	mov    rcx,QWORD PTR [rbx+0x40]
  408fec:	add    rcx,rcx
  408fef:	cmp    rcx,rax
  408ff2:	jae    40900b <flatcc_emitter_reset@@Base+0xeb>
  408ff4:	mov    rax,QWORD PTR [rbx+0x8]
  408ff8:	lea    rcx,[rax+0xb80]
  408fff:	mov    rdi,QWORD PTR [rax+0xb80]
  409006:	cmp    rdi,QWORD PTR [rbx]
  409009:	jne    408fc0 <flatcc_emitter_reset@@Base+0xa0>
  40900b:	add    rsp,0x8
  40900f:	pop    rbx
  409010:	pop    r14
  409012:	ret    
  409013:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40901d:	nop    DWORD PTR [rax]

0000000000409020 <flatcc_emitter_clear@@Base>:
  409020:	push   r14
  409022:	push   rbx
  409023:	push   rax
  409024:	mov    rbx,QWORD PTR [rdi]
  409027:	test   rbx,rbx
  40902a:	je     40908c <flatcc_emitter_clear@@Base+0x6c>
  40902c:	mov    r14,rdi
  40902f:	mov    rax,QWORD PTR [rbx+0xb88]
  409036:	mov    QWORD PTR [rax+0xb80],0x0
  409041:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40904b:	nop    DWORD PTR [rax+rax*1+0x0]
  409050:	mov    rax,QWORD PTR [rbx+0xb80]
  409057:	test   rax,rax
  40905a:	je     40906d <flatcc_emitter_clear@@Base+0x4d>
  40905c:	mov    rbx,rax
  40905f:	mov    rdi,QWORD PTR [rax+0xb88]
  409066:	call   403030 <free@plt>
  40906b:	jmp    409050 <flatcc_emitter_clear@@Base+0x30>
  40906d:	mov    rdi,rbx
  409070:	call   403030 <free@plt>
  409075:	vxorps xmm0,xmm0,xmm0
  409079:	vmovups YMMWORD PTR [r14+0x20],ymm0
  40907f:	vmovups YMMWORD PTR [r14],ymm0
  409084:	mov    QWORD PTR [r14+0x40],0x0
  40908c:	add    rsp,0x8
  409090:	pop    rbx
  409091:	pop    r14
  409093:	vzeroupper 
  409096:	ret    
  409097:	nop    WORD PTR [rax+rax*1+0x0]

00000000004090a0 <flatcc_emitter@@Base>:
  4090a0:	push   rbp
  4090a1:	push   r15
  4090a3:	push   r14
  4090a5:	push   r13
  4090a7:	push   r12
  4090a9:	push   rbx
  4090aa:	push   rax
  4090ab:	mov    r14d,edx
  4090ae:	mov    r12,rsi
  4090b1:	mov    rbp,rdi
  4090b4:	add    QWORD PTR [rdi+0x30],r8
  4090b8:	test   ecx,ecx
  4090ba:	js     409235 <flatcc_emitter@@Base+0x195>
  4090c0:	mov    rdx,QWORD PTR [rbp+0x28]
  4090c4:	cmp    rdx,r8
  4090c7:	jae    4093e8 <flatcc_emitter@@Base+0x348>
  4090cd:	xor    eax,eax
  4090cf:	test   r14d,r14d
  4090d2:	je     4094c7 <flatcc_emitter@@Base+0x427>
  4090d8:	mov    r15,QWORD PTR [r12+0x8]
  4090dd:	test   r15,r15
  4090e0:	je     409220 <flatcc_emitter@@Base+0x180>
  4090e6:	mov    r13,QWORD PTR [r12]
  4090ea:	jmp    409119 <flatcc_emitter@@Base+0x79>
  4090ec:	mov    rbx,r15
  4090ef:	mov    rdi,QWORD PTR [rbp+0x20]
  4090f3:	mov    rsi,r13
  4090f6:	mov    rdx,rbx
  4090f9:	call   4030a0 <memcpy@plt>
  4090fe:	add    QWORD PTR [rbp+0x20],rbx
  409102:	add    r13,rbx
  409105:	mov    rdx,QWORD PTR [rbp+0x28]
  409109:	sub    rdx,rbx
  40910c:	mov    QWORD PTR [rbp+0x28],rdx
  409110:	sub    r15,rbx
  409113:	je     409220 <flatcc_emitter@@Base+0x180>
  409119:	mov    rbx,r15
  40911c:	cmp    r15,rdx
  40911f:	jbe    4090ef <flatcc_emitter@@Base+0x4f>
  409121:	mov    rbx,rdx
  409124:	test   rbx,rbx
  409127:	je     409191 <flatcc_emitter@@Base+0xf1>
  409129:	jmp    4090ef <flatcc_emitter@@Base+0x4f>
  40912b:	nop    DWORD PTR [rax+rax*1+0x0]
  409130:	mov    QWORD PTR [rax+0xb88],rbx
  409137:	mov    rcx,QWORD PTR [rbp+0x0]
  40913b:	mov    QWORD PTR [rax+0xb80],rcx
  409142:	mov    QWORD PTR [rcx+0xb88],rax
  409149:	mov    QWORD PTR [rbx+0xb80],rax
  409150:	mov    QWORD PTR [rbp+0x8],rax
  409154:	mov    QWORD PTR [rbp+0x20],rax
  409158:	mov    QWORD PTR [rbp+0x28],0xb80
  409160:	mov    rcx,QWORD PTR [rax+0xb88]
  409167:	mov    ecx,DWORD PTR [rcx+0xb90]
  40916d:	mov    edx,0xb80
  409172:	add    ecx,edx
  409174:	mov    DWORD PTR [rax+0xb90],ecx
  40917a:	mov    ebx,0xb80
  40917f:	cmp    r15,rbx
  409182:	jbe    4090ec <flatcc_emitter@@Base+0x4c>
  409188:	test   rbx,rbx
  40918b:	jne    4090ef <flatcc_emitter@@Base+0x4f>
  409191:	mov    rbx,QWORD PTR [rbp+0x8]
  409195:	test   rbx,rbx
  409198:	je     4091a7 <flatcc_emitter@@Base+0x107>
  40919a:	mov    rax,QWORD PTR [rbx+0xb80]
  4091a1:	cmp    rax,QWORD PTR [rbp+0x0]
  4091a5:	jne    409150 <flatcc_emitter@@Base+0xb0>
  4091a7:	mov    edi,0xb98
  4091ac:	call   4030b0 <malloc@plt>
  4091b1:	test   rax,rax
  4091b4:	je     4093fa <flatcc_emitter@@Base+0x35a>
  4091ba:	add    QWORD PTR [rbp+0x38],0xb80
  4091c2:	test   rbx,rbx
  4091c5:	jne    409130 <flatcc_emitter@@Base+0x90>
  4091cb:	mov    QWORD PTR [rbp+0x0],rax
  4091cf:	mov    QWORD PTR [rbp+0x8],rax
  4091d3:	mov    QWORD PTR [rax+0xb80],rax
  4091da:	mov    QWORD PTR [rax+0xb88],rax
  4091e1:	mov    rcx,rax
  4091e4:	add    rcx,0x5c0
  4091eb:	mov    QWORD PTR [rbp+0x10],rcx
  4091ef:	mov    QWORD PTR [rbp+0x20],rcx
  4091f3:	mov    QWORD PTR [rbp+0x18],0x5c0
  4091fb:	mov    QWORD PTR [rbp+0x28],0x5c0
  409203:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  40920d:	mov    ebx,0x5c0
  409212:	cmp    r15,rbx
  409215:	ja     409188 <flatcc_emitter@@Base+0xe8>
  40921b:	jmp    4090ec <flatcc_emitter@@Base+0x4c>
  409220:	dec    r14d
  409223:	add    r12,0x10
  409227:	test   r14d,r14d
  40922a:	jne    4090d8 <flatcc_emitter@@Base+0x38>
  409230:	jmp    4094c5 <flatcc_emitter@@Base+0x425>
  409235:	lea    rsi,[rbp+0x18]
  409239:	mov    rdx,QWORD PTR [rbp+0x18]
  40923d:	cmp    rdx,r8
  409240:	jae    409404 <flatcc_emitter@@Base+0x364>
  409246:	xor    eax,eax
  409248:	test   r14d,r14d
  40924b:	je     4094c7 <flatcc_emitter@@Base+0x427>
  409251:	mov    QWORD PTR [rsp],rsi
  409255:	movsxd rax,r14d
  409258:	shl    rax,0x4
  40925c:	add    r12,rax
  40925f:	mov    edx,0xfffff480
  409264:	mov    r15,QWORD PTR [r12-0x8]
  409269:	add    r12,0xfffffffffffffff0
  40926d:	test   r15,r15
  409270:	je     4093da <flatcc_emitter@@Base+0x33a>
  409276:	mov    r13,QWORD PTR [r12]
  40927a:	add    r13,r15
  40927d:	jmp    4092b1 <flatcc_emitter@@Base+0x211>
  40927f:	nop
  409280:	mov    rbx,r15
  409283:	mov    rdi,QWORD PTR [rbp+0x10]
  409287:	sub    rdi,rbx
  40928a:	mov    QWORD PTR [rbp+0x10],rdi
  40928e:	sub    rax,rbx
  409291:	mov    QWORD PTR [rbp+0x18],rax
  409295:	sub    r13,rbx
  409298:	mov    rsi,r13
  40929b:	mov    rdx,rbx
  40929e:	call   4030a0 <memcpy@plt>
  4092a3:	mov    edx,0xfffff480
  4092a8:	sub    r15,rbx
  4092ab:	je     4093da <flatcc_emitter@@Base+0x33a>
  4092b1:	mov    rax,QWORD PTR [rsp]
  4092b5:	mov    rax,QWORD PTR [rax]
  4092b8:	cmp    r15,rax
  4092bb:	ja     409308 <flatcc_emitter@@Base+0x268>
  4092bd:	jmp    409280 <flatcc_emitter@@Base+0x1e0>
  4092bf:	nop
  4092c0:	mov    ecx,DWORD PTR [rbx+0xb90]
  4092c6:	add    ecx,edx
  4092c8:	mov    DWORD PTR [rax+0xb90],ecx
  4092ce:	mov    QWORD PTR [rbp+0x0],rax
  4092d2:	lea    rcx,[rax+0xb80]
  4092d9:	mov    QWORD PTR [rbp+0x10],rcx
  4092dd:	mov    QWORD PTR [rbp+0x18],0xb80
  4092e5:	mov    rcx,QWORD PTR [rax+0xb80]
  4092ec:	mov    ecx,DWORD PTR [rcx+0xb90]
  4092f2:	add    ecx,edx
  4092f4:	mov    DWORD PTR [rax+0xb90],ecx
  4092fa:	mov    eax,0xb80
  4092ff:	cmp    r15,rax
  409302:	jbe    409280 <flatcc_emitter@@Base+0x1e0>
  409308:	mov    rbx,rax
  40930b:	test   rax,rax
  40930e:	jne    409283 <flatcc_emitter@@Base+0x1e3>
  409314:	mov    rbx,QWORD PTR [rbp+0x0]
  409318:	test   rbx,rbx
  40931b:	je     40932a <flatcc_emitter@@Base+0x28a>
  40931d:	mov    rax,QWORD PTR [rbx+0xb88]
  409324:	cmp    rax,QWORD PTR [rbp+0x8]
  409328:	jne    4092c0 <flatcc_emitter@@Base+0x220>
  40932a:	mov    edi,0xb98
  40932f:	call   4030b0 <malloc@plt>
  409334:	test   rax,rax
  409337:	je     4093fa <flatcc_emitter@@Base+0x35a>
  40933d:	add    QWORD PTR [rbp+0x38],0xb80
  409345:	test   rbx,rbx
  409348:	je     409380 <flatcc_emitter@@Base+0x2e0>
  40934a:	mov    rcx,QWORD PTR [rbp+0x8]
  40934e:	mov    QWORD PTR [rax+0xb88],rcx
  409355:	mov    QWORD PTR [rax+0xb80],rbx
  40935c:	mov    QWORD PTR [rbx+0xb88],rax
  409363:	mov    QWORD PTR [rcx+0xb80],rax
  40936a:	mov    QWORD PTR [rbp+0x0],rax
  40936e:	mov    edx,0xfffff480
  409373:	jmp    4092d2 <flatcc_emitter@@Base+0x232>
  409378:	nop    DWORD PTR [rax+rax*1+0x0]
  409380:	mov    QWORD PTR [rbp+0x0],rax
  409384:	mov    QWORD PTR [rbp+0x8],rax
  409388:	mov    QWORD PTR [rax+0xb80],rax
  40938f:	mov    QWORD PTR [rax+0xb88],rax
  409396:	mov    rcx,rax
  409399:	add    rcx,0x5c0
  4093a0:	mov    QWORD PTR [rbp+0x10],rcx
  4093a4:	mov    QWORD PTR [rbp+0x20],rcx
  4093a8:	mov    QWORD PTR [rbp+0x18],0x5c0
  4093b0:	mov    QWORD PTR [rbp+0x28],0x5c0
  4093b8:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  4093c2:	mov    eax,0x5c0
  4093c7:	mov    edx,0xfffff480
  4093cc:	cmp    r15,rax
  4093cf:	ja     409308 <flatcc_emitter@@Base+0x268>
  4093d5:	jmp    409280 <flatcc_emitter@@Base+0x1e0>
  4093da:	dec    r14d
  4093dd:	jne    409264 <flatcc_emitter@@Base+0x1c4>
  4093e3:	jmp    4094c5 <flatcc_emitter@@Base+0x425>
  4093e8:	lea    rsi,[rbp+0x28]
  4093ec:	mov    rbx,QWORD PTR [rbp+0x20]
  4093f0:	lea    rcx,[rbx+r8*1]
  4093f4:	mov    QWORD PTR [rbp+0x20],rcx
  4093f8:	jmp    40940f <flatcc_emitter@@Base+0x36f>
  4093fa:	mov    eax,0xffffffff
  4093ff:	jmp    4094c7 <flatcc_emitter@@Base+0x427>
  409404:	mov    rbx,QWORD PTR [rbp+0x10]
  409408:	sub    rbx,r8
  40940b:	mov    QWORD PTR [rbp+0x10],rbx
  40940f:	sub    rdx,r8
  409412:	mov    QWORD PTR [rsi],rdx
  409415:	xor    eax,eax
  409417:	test   r14d,r14d
  40941a:	je     4094c7 <flatcc_emitter@@Base+0x427>
  409420:	lea    r15d,[r14-0x1]
  409424:	mov    r13d,r14d
  409427:	and    r13d,0x3
  40942b:	je     409454 <flatcc_emitter@@Base+0x3b4>
  40942d:	xor    ebp,ebp
  40942f:	nop
  409430:	mov    rsi,QWORD PTR [r12]
  409434:	mov    rdx,QWORD PTR [r12+0x8]
  409439:	mov    rdi,rbx
  40943c:	call   4030a0 <memcpy@plt>
  409441:	add    rbx,QWORD PTR [r12+0x8]
  409446:	add    r12,0x10
  40944a:	inc    ebp
  40944c:	cmp    r13d,ebp
  40944f:	jne    409430 <flatcc_emitter@@Base+0x390>
  409451:	sub    r14d,ebp
  409454:	cmp    r15d,0x3
  409458:	jb     4094c5 <flatcc_emitter@@Base+0x425>
  40945a:	nop    WORD PTR [rax+rax*1+0x0]
  409460:	mov    rsi,QWORD PTR [r12]
  409464:	mov    rdx,QWORD PTR [r12+0x8]
  409469:	mov    rdi,rbx
  40946c:	call   4030a0 <memcpy@plt>
  409471:	add    rbx,QWORD PTR [r12+0x8]
  409476:	mov    rsi,QWORD PTR [r12+0x10]
  40947b:	mov    rdx,QWORD PTR [r12+0x18]
  409480:	mov    rdi,rbx
  409483:	call   4030a0 <memcpy@plt>
  409488:	add    rbx,QWORD PTR [r12+0x18]
  40948d:	mov    rsi,QWORD PTR [r12+0x20]
  409492:	mov    rdx,QWORD PTR [r12+0x28]
  409497:	mov    rdi,rbx
  40949a:	call   4030a0 <memcpy@plt>
  40949f:	add    rbx,QWORD PTR [r12+0x28]
  4094a4:	mov    rsi,QWORD PTR [r12+0x30]
  4094a9:	mov    rdx,QWORD PTR [r12+0x38]
  4094ae:	mov    rdi,rbx
  4094b1:	call   4030a0 <memcpy@plt>
  4094b6:	add    rbx,QWORD PTR [r12+0x38]
  4094bb:	add    r12,0x40
  4094bf:	add    r14d,0xfffffffc
  4094c3:	jne    409460 <flatcc_emitter@@Base+0x3c0>
  4094c5:	xor    eax,eax
  4094c7:	add    rsp,0x8
  4094cb:	pop    rbx
  4094cc:	pop    r12
  4094ce:	pop    r13
  4094d0:	pop    r14
  4094d2:	pop    r15
  4094d4:	pop    rbp
  4094d5:	ret    
  4094d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004094e0 <flatcc_emitter_copy_buffer@@Base>:
  4094e0:	push   r15
  4094e2:	push   r14
  4094e4:	push   r13
  4094e6:	push   r12
  4094e8:	push   rbx
  4094e9:	mov    rax,rdx
  4094ec:	mov    rdx,QWORD PTR [rdi+0x30]
  4094f0:	cmp    rdx,rax
  4094f3:	ja     40958b <flatcc_emitter_copy_buffer@@Base+0xab>
  4094f9:	mov    r14,rdi
  4094fc:	mov    rax,QWORD PTR [rdi]
  4094ff:	test   rax,rax
  409502:	je     40958b <flatcc_emitter_copy_buffer@@Base+0xab>
  409508:	mov    r12,rsi
  40950b:	cmp    rax,QWORD PTR [r14+0x8]
  40950f:	je     40959b <flatcc_emitter_copy_buffer@@Base+0xbb>
  409515:	mov    r15d,0xb80
  40951b:	mov    r13d,0xb80
  409521:	sub    r13,QWORD PTR [r14+0x18]
  409525:	mov    rsi,QWORD PTR [r14+0x10]
  409529:	mov    rdi,r12
  40952c:	mov    rdx,r13
  40952f:	call   4030a0 <memcpy@plt>
  409534:	add    r13,r12
  409537:	mov    rax,QWORD PTR [r14]
  40953a:	mov    rbx,QWORD PTR [rax+0xb80]
  409541:	cmp    rbx,QWORD PTR [r14+0x8]
  409545:	je     409574 <flatcc_emitter_copy_buffer@@Base+0x94>
  409547:	nop    WORD PTR [rax+rax*1+0x0]
  409550:	mov    edx,0xb80
  409555:	mov    rdi,r13
  409558:	mov    rsi,rbx
  40955b:	call   4030a0 <memcpy@plt>
  409560:	add    r13,0xb80
  409567:	mov    rbx,QWORD PTR [rbx+0xb80]
  40956e:	cmp    rbx,QWORD PTR [r14+0x8]
  409572:	jne    409550 <flatcc_emitter_copy_buffer@@Base+0x70>
  409574:	sub    r15,QWORD PTR [r14+0x28]
  409578:	mov    rdi,r13
  40957b:	mov    rsi,rbx
  40957e:	mov    rdx,r15
  409581:	call   4030a0 <memcpy@plt>
  409586:	mov    r12,r13
  409589:	jmp    40958e <flatcc_emitter_copy_buffer@@Base+0xae>
  40958b:	xor    r12d,r12d
  40958e:	mov    rax,r12
  409591:	pop    rbx
  409592:	pop    r12
  409594:	pop    r13
  409596:	pop    r14
  409598:	pop    r15
  40959a:	ret    
  40959b:	mov    rsi,QWORD PTR [r14+0x10]
  40959f:	mov    rdi,r12
  4095a2:	call   4030a0 <memcpy@plt>
  4095a7:	jmp    40958e <flatcc_emitter_copy_buffer@@Base+0xae>
  4095a9:	nop    DWORD PTR [rax+0x0]

00000000004095b0 <grisu3_diy_fp_encode_double@@Base>:
  4095b0:	push   rbp
  4095b1:	push   r15
  4095b3:	push   r14
  4095b5:	push   r13
  4095b7:	push   r12
  4095b9:	push   rbx
  4095ba:	push   rax
  4095bb:	xor    ebx,ebx
  4095bd:	test   ecx,ecx
  4095bf:	setne  r10b
  4095c3:	test   rdi,rdi
  4095c6:	je     409904 <grisu3_diy_fp_encode_double@@Base+0x354>
  4095cc:	movabs r9,0x40000000000000
  4095d6:	xor    eax,eax
  4095d8:	mov    rcx,rdi
  4095db:	shr    rcx,0x36
  4095df:	jne    4095fc <grisu3_diy_fp_encode_double@@Base+0x4c>
  4095e1:	xor    eax,eax
  4095e3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4095ed:	nop    DWORD PTR [rax]
  4095f0:	shl    rdi,0xa
  4095f4:	add    eax,0xfffffff6
  4095f7:	cmp    rdi,r9
  4095fa:	jb     4095f0 <grisu3_diy_fp_encode_double@@Base+0x40>
  4095fc:	sub    esi,edx
  4095fe:	test   rdi,rdi
  409601:	js     40961a <grisu3_diy_fp_encode_double@@Base+0x6a>
  409603:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40960d:	nop    DWORD PTR [rax]
  409610:	add    rdi,rdi
  409613:	dec    eax
  409615:	test   rdi,rdi
  409618:	jns    409610 <grisu3_diy_fp_encode_double@@Base+0x60>
  40961a:	cmp    esi,0xfffffea3
  409620:	jle    409923 <grisu3_diy_fp_encode_double@@Base+0x373>
  409626:	cmp    esi,0x15c
  40962c:	jge    409942 <grisu3_diy_fp_encode_double@@Base+0x392>
  409632:	lea    ecx,[rsi+0x15c]
  409638:	sar    ecx,0x1f
  40963b:	shr    ecx,0x1d
  40963e:	lea    ecx,[rsi+rcx*1]
  409641:	add    ecx,0x15c
  409647:	sar    ecx,0x3
  40964a:	movsxd r11,ecx
  40964d:	shl    r11,0x4
  409651:	lea    r14,[rip+0x64c8]        # 40fb20 <flatcc_builder_padding_base@@Base+0x17c0>
  409658:	movsx  ecx,WORD PTR [r11+r14*1+0xa]
  40965e:	cmp    esi,ecx
  409660:	jl     409961 <grisu3_diy_fp_encode_double@@Base+0x3b1>
  409666:	lea    ebp,[rcx+0x8]
  409669:	cmp    ebp,esi
  40966b:	jle    409980 <grisu3_diy_fp_encode_double@@Base+0x3d0>
  409671:	mov    bl,r10b
  409674:	shl    ebx,0x2
  409677:	mov    ebp,eax
  409679:	neg    bpl
  40967c:	shlx   r10d,ebx,ebp
  409681:	cmp    esi,ecx
  409683:	je     409715 <grisu3_diy_fp_encode_double@@Base+0x165>
  409689:	not    ecx
  40968b:	add    esi,ecx
  40968d:	cmp    esi,0x7
  409690:	jae    40999f <grisu3_diy_fp_encode_double@@Base+0x3ef>
  409696:	movsxd rcx,esi
  409699:	shl    rcx,0x4
  40969d:	lea    rbx,[rip+0x640c]        # 40fab0 <flatcc_builder_padding_base@@Base+0x1750>
  4096a4:	mov    rbp,QWORD PTR [rcx+rbx*1]
  4096a8:	mov    r15d,DWORD PTR [rcx+rbx*1+0x8]
  4096ad:	mov    rbx,rdi
  4096b0:	shr    rbx,0x20
  4096b4:	mov    r12d,edi
  4096b7:	mov    edi,ebp
  4096b9:	mov    rcx,rbp
  4096bc:	shr    rcx,0x20
  4096c0:	mov    r13,rcx
  4096c3:	imul   r13,rbx
  4096c7:	imul   rcx,r12
  4096cb:	imul   rbx,rdi
  4096cf:	imul   rdi,r12
  4096d3:	shr    rdi,0x20
  4096d7:	mov    ebp,ebx
  4096d9:	add    rbp,rdi
  4096dc:	mov    edi,ecx
  4096de:	add    rdi,rbp
  4096e1:	sub    rdi,0xffffffff80000000
  4096e8:	shr    rbx,0x20
  4096ec:	add    rbx,r13
  4096ef:	shr    rcx,0x20
  4096f3:	add    rcx,rbx
  4096f6:	shr    rdi,0x20
  4096fa:	add    rdi,rcx
  4096fd:	lea    eax,[rax+r15*1]
  409701:	add    eax,0x40
  409704:	lea    ecx,[rdx+rsi*1]
  409707:	add    ecx,0x1
  40970a:	lea    edx,[r10+0x4]
  40970e:	cmp    ecx,0x13
  409711:	cmovg  r10d,edx
  409715:	mov    rsi,QWORD PTR [r11+r14*1]
  409719:	mov    rdx,rdi
  40971c:	shr    rdx,0x20
  409720:	mov    ecx,edi
  409722:	mov    edi,esi
  409724:	shr    rsi,0x20
  409728:	mov    rbx,rdx
  40972b:	imul   rbx,rsi
  40972f:	imul   rsi,rcx
  409733:	imul   rdx,rdi
  409737:	imul   rcx,rdi
  40973b:	shr    rcx,0x20
  40973f:	mov    edi,edx
  409741:	add    rdi,rcx
  409744:	mov    ecx,esi
  409746:	add    rcx,rdi
  409749:	sub    rcx,0xffffffff80000000
  409750:	shr    rdx,0x20
  409754:	add    rdx,rbx
  409757:	shr    rsi,0x20
  40975b:	add    rsi,rdx
  40975e:	shr    rcx,0x20
  409762:	cmp    r10d,0x1
  409766:	sbb    r10d,0x0
  40976a:	add    rcx,rsi
  40976d:	je     409904 <grisu3_diy_fp_encode_double@@Base+0x354>
  409773:	movsx  edx,WORD PTR [r11+r14*1+0x8]
  409779:	lea    eax,[rdx+rax*1]
  40977c:	add    eax,0x40
  40977f:	mov    edx,eax
  409781:	cmp    rcx,r9
  409784:	jae    40979c <grisu3_diy_fp_encode_double@@Base+0x1ec>
  409786:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409790:	shl    rcx,0xa
  409794:	add    edx,0xfffffff6
  409797:	cmp    rcx,r9
  40979a:	jb     409790 <grisu3_diy_fp_encode_double@@Base+0x1e0>
  40979c:	add    r10d,0x9
  4097a0:	test   rcx,rcx
  4097a3:	js     4097ba <grisu3_diy_fp_encode_double@@Base+0x20a>
  4097a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4097af:	nop
  4097b0:	add    rcx,rcx
  4097b3:	dec    edx
  4097b5:	test   rcx,rcx
  4097b8:	jns    4097b0 <grisu3_diy_fp_encode_double@@Base+0x200>
  4097ba:	sub    eax,edx
  4097bc:	shlx   r14d,r10d,eax
  4097c1:	lea    eax,[rdx+0x40]
  4097c4:	xor    ebx,ebx
  4097c6:	cmp    eax,0xfffffc0d
  4097cb:	jg     409801 <grisu3_diy_fp_encode_double@@Base+0x251>
  4097cd:	mov    ebx,0x40
  4097d2:	cmp    eax,0xfffffbcf
  4097d7:	jl     4097e5 <grisu3_diy_fp_encode_double@@Base+0x235>
  4097d9:	mov    ebx,0xfffffbce
  4097de:	sub    ebx,edx
  4097e0:	cmp    ebx,0x3d
  4097e3:	jl     409801 <grisu3_diy_fp_encode_double@@Base+0x251>
  4097e5:	lea    eax,[rbx-0x3e]
  4097e8:	shrx   rcx,rcx,rax
  4097ed:	lea    edx,[rbx+rdx*1]
  4097f0:	add    edx,0xffffffc2
  4097f3:	sarx   r14d,r14d,eax
  4097f8:	add    r14d,0x9
  4097fc:	mov    ebx,0x3e
  409801:	movabs r11,0x1fffffffffffff
  40980b:	shrx   rdi,rcx,rbx
  409810:	add    edx,ebx
  409812:	lea    eax,[rbx-0x1]
  409815:	mov    esi,0x1
  40981a:	shlx   rsi,rsi,rax
  40981f:	lea    r10d,[r14+rsi*8]
  409823:	cmp    ebx,r10d
  409826:	jl     409839 <grisu3_diy_fp_encode_double@@Base+0x289>
  409828:	inc    rdi
  40982b:	lea    rax,[r11+0x1]
  40982f:	test   rdi,rax
  409832:	je     409839 <grisu3_diy_fp_encode_double@@Base+0x289>
  409834:	shr    rdi,1
  409837:	inc    edx
  409839:	and    ecx,esi
  40983b:	cmp    rdi,r11
  40983e:	jbe    40985f <grisu3_diy_fp_encode_double@@Base+0x2af>
  409840:	dec    r9
  409843:	mov    rbx,rdi
  409846:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409850:	shr    rbx,1
  409853:	inc    edx
  409855:	cmp    rdi,r9
  409858:	mov    rdi,rbx
  40985b:	ja     409850 <grisu3_diy_fp_encode_double@@Base+0x2a0>
  40985d:	jmp    409862 <grisu3_diy_fp_encode_double@@Base+0x2b2>
  40985f:	mov    rbx,rdi
  409862:	shl    ecx,0x3
  409865:	shl    esi,0x3
  409868:	vpxor  xmm0,xmm0,xmm0
  40986c:	cmp    edx,0xfffffbce
  409872:	jl     4098dd <grisu3_diy_fp_encode_double@@Base+0x32d>
  409874:	movabs r9,0xfffffffffffff
  40987e:	lea    rdi,[r9+0x1]
  409882:	and    rdi,rbx
  409885:	sete   al
  409888:	cmp    edx,0xfffffbce
  40988e:	je     4098b6 <grisu3_diy_fp_encode_double@@Base+0x306>
  409890:	test   rdi,rdi
  409893:	jne    4098b6 <grisu3_diy_fp_encode_double@@Base+0x306>
  409895:	movabs rdi,0x8000000000000
  40989f:	nop
  4098a0:	dec    edx
  4098a2:	test   rbx,rdi
  4098a5:	lea    rbx,[rbx+rbx*1]
  4098a9:	sete   al
  4098ac:	jne    4098b6 <grisu3_diy_fp_encode_double@@Base+0x306>
  4098ae:	cmp    edx,0xfffffbce
  4098b4:	jg     4098a0 <grisu3_diy_fp_encode_double@@Base+0x2f0>
  4098b6:	lea    edi,[rdx+0x433]
  4098bc:	shl    rdi,0x34
  4098c0:	xor    ebp,ebp
  4098c2:	test   al,al
  4098c4:	cmove  rbp,rdi
  4098c8:	cmp    edx,0xfffffbce
  4098ce:	cmovne rbp,rdi
  4098d2:	and    rbx,r9
  4098d5:	or     rbx,rbp
  4098d8:	vmovq  xmm0,rbx
  4098dd:	vmovq  QWORD PTR [r8],xmm0
  4098e2:	sub    esi,r14d
  4098e5:	cmp    esi,ecx
  4098e7:	setge  al
  4098ea:	cmp    ecx,r10d
  4098ed:	setge  cl
  4098f0:	or     cl,al
  4098f2:	movzx  eax,cl
  4098f5:	add    rsp,0x8
  4098f9:	pop    rbx
  4098fa:	pop    r12
  4098fc:	pop    r13
  4098fe:	pop    r14
  409900:	pop    r15
  409902:	pop    rbp
  409903:	ret    
  409904:	lea    rdi,[rip+0x701c]        # 410927 <flatcc_builder_padding_base@@Base+0x25c7>
  40990b:	lea    rsi,[rip+0x701e]        # 410930 <flatcc_builder_padding_base@@Base+0x25d0>
  409912:	lea    rcx,[rip+0x7087]        # 4109a0 <flatcc_builder_padding_base@@Base+0x2640>
  409919:	mov    edx,0x104
  40991e:	call   403060 <__assert_fail@plt>
  409923:	lea    rdi,[rip+0x70af]        # 4109d9 <flatcc_builder_padding_base@@Base+0x2679>
  40992a:	lea    rsi,[rip+0x6a7f]        # 4103b0 <flatcc_builder_padding_base@@Base+0x2050>
  409931:	lea    rcx,[rip+0x70c0]        # 4109f8 <flatcc_builder_padding_base@@Base+0x2698>
  409938:	mov    edx,0x50
  40993d:	call   403060 <__assert_fail@plt>
  409942:	lea    rdi,[rip+0x70e8]        # 410a31 <flatcc_builder_padding_base@@Base+0x26d1>
  409949:	lea    rsi,[rip+0x6a60]        # 4103b0 <flatcc_builder_padding_base@@Base+0x2050>
  409950:	lea    rcx,[rip+0x70a1]        # 4109f8 <flatcc_builder_padding_base@@Base+0x2698>
  409957:	mov    edx,0x51
  40995c:	call   403060 <__assert_fail@plt>
  409961:	lea    rdi,[rip+0x70f4]        # 410a5c <flatcc_builder_padding_base@@Base+0x26fc>
  409968:	lea    rsi,[rip+0x6a41]        # 4103b0 <flatcc_builder_padding_base@@Base+0x2050>
  40996f:	lea    rcx,[rip+0x7082]        # 4109f8 <flatcc_builder_padding_base@@Base+0x2698>
  409976:	mov    edx,0x58
  40997b:	call   403060 <__assert_fail@plt>
  409980:	lea    rdi,[rip+0x70e4]        # 410a6b <flatcc_builder_padding_base@@Base+0x270b>
  409987:	lea    rsi,[rip+0x6a22]        # 4103b0 <flatcc_builder_padding_base@@Base+0x2050>
  40998e:	lea    rcx,[rip+0x7063]        # 4109f8 <flatcc_builder_padding_base@@Base+0x2698>
  409995:	mov    edx,0x59
  40999a:	call   403060 <__assert_fail@plt>
  40999f:	lea    rdi,[rip+0x69ee]        # 410394 <flatcc_builder_padding_base@@Base+0x2034>
  4099a6:	lea    rsi,[rip+0x6a03]        # 4103b0 <flatcc_builder_padding_base@@Base+0x2050>
  4099ad:	lea    rcx,[rip+0x6a6d]        # 410421 <flatcc_builder_padding_base@@Base+0x20c1>
  4099b4:	mov    edx,0xb9
  4099b9:	call   403060 <__assert_fail@plt>
  4099be:	xchg   ax,ax

00000000004099c0 <flatcc_json_parser_error_string@@Base>:
  4099c0:	cmp    edi,0x22
  4099c3:	ja     4099d4 <flatcc_json_parser_error_string@@Base+0x14>
  4099c5:	movsxd rax,edi
  4099c8:	lea    rcx,[rip+0xa321]        # 413cf0 <flatcc_builder_padding_base@@Base+0x5990>
  4099cf:	mov    rax,QWORD PTR [rcx+rax*8]
  4099d3:	ret    
  4099d4:	lea    rax,[rip+0x6d0c]        # 4106e7 <flatcc_builder_padding_base@@Base+0x2387>
  4099db:	ret    
  4099dc:	nop    DWORD PTR [rax+0x0]

00000000004099e0 <flatcc_json_parser_set_error@@Base>:
  4099e0:	mov    rax,rdx
  4099e3:	cmp    DWORD PTR [rdi+0x20],0x0
  4099e7:	je     4099ea <flatcc_json_parser_set_error@@Base+0xa>
  4099e9:	ret    
  4099ea:	mov    DWORD PTR [rdi+0x20],ecx
  4099ed:	mov    ecx,DWORD PTR [rdi+0x8]
  4099f0:	mov    edx,esi
  4099f2:	sub    edx,ecx
  4099f4:	inc    edx
  4099f6:	mov    DWORD PTR [rdi+0x1c],edx
  4099f9:	mov    QWORD PTR [rdi+0x38],rsi
  4099fd:	ret    
  4099fe:	xchg   ax,ax

0000000000409a00 <flatcc_json_parser_string_part@@Base>:
  409a00:	mov    rax,rsi
  409a03:	cmp    rsi,rdx
  409a06:	je     409a2d <flatcc_json_parser_string_part@@Base+0x2d>
  409a08:	nop    DWORD PTR [rax+rax*1+0x0]
  409a10:	movzx  ecx,BYTE PTR [rax]
  409a13:	cmp    cl,0x20
  409a16:	jb     409a3c <flatcc_json_parser_string_part@@Base+0x3c>
  409a18:	cmp    cl,0x22
  409a1b:	je     409a5c <flatcc_json_parser_string_part@@Base+0x5c>
  409a1d:	cmp    cl,0x5c
  409a20:	je     409a5c <flatcc_json_parser_string_part@@Base+0x5c>
  409a22:	inc    rax
  409a25:	cmp    rdx,rax
  409a28:	jne    409a10 <flatcc_json_parser_string_part@@Base+0x10>
  409a2a:	mov    rax,rdx
  409a2d:	cmp    DWORD PTR [rdi+0x20],0x0
  409a31:	jne    409a59 <flatcc_json_parser_string_part@@Base+0x59>
  409a33:	mov    DWORD PTR [rdi+0x20],0x14
  409a3a:	jmp    409a49 <flatcc_json_parser_string_part@@Base+0x49>
  409a3c:	cmp    DWORD PTR [rdi+0x20],0x0
  409a40:	jne    409a59 <flatcc_json_parser_string_part@@Base+0x59>
  409a42:	mov    DWORD PTR [rdi+0x20],0x11
  409a49:	mov    ecx,DWORD PTR [rdi+0x8]
  409a4c:	mov    esi,eax
  409a4e:	sub    esi,ecx
  409a50:	inc    esi
  409a52:	mov    DWORD PTR [rdi+0x1c],esi
  409a55:	mov    QWORD PTR [rdi+0x38],rax
  409a59:	mov    rax,rdx
  409a5c:	ret    
  409a5d:	nop    DWORD PTR [rax]

0000000000409a60 <flatcc_json_parser_space_ext@@Base>:
  409a60:	mov    rax,rsi
  409a63:	lea    rcx,[rip+0x5dd6]        # 40f840 <flatcc_builder_padding_base@@Base+0x14e0>
  409a6a:	mov    rsi,rdx
  409a6d:	sub    rsi,rax
  409a70:	cmp    rsi,0x10
  409a74:	jl     409aa6 <flatcc_json_parser_space_ext@@Base+0x46>
  409a76:	cmp    BYTE PTR [rax],0x20
  409a79:	jg     409b40 <flatcc_json_parser_space_ext@@Base+0xe0>
  409a7f:	movzx  r8d,WORD PTR [rax]
  409a83:	lea    rsi,[rax+0x2]
  409a87:	cmp    r8d,0x2020
  409a8e:	cmovne rsi,rax
  409a92:	lea    rax,[rsi+0x1]
  409a96:	cmp    BYTE PTR [rsi],0x20
  409a99:	cmovne rax,rsi
  409a9d:	cmp    BYTE PTR [rax],0x20
  409aa0:	jg     409b40 <flatcc_json_parser_space_ext@@Base+0xe0>
  409aa6:	cmp    rax,rdx
  409aa9:	je     409b3d <flatcc_json_parser_space_ext@@Base+0xdd>
  409aaf:	nop
  409ab0:	cmp    BYTE PTR [rax],0x20
  409ab3:	jne    409ac0 <flatcc_json_parser_space_ext@@Base+0x60>
  409ab5:	inc    rax
  409ab8:	cmp    rdx,rax
  409abb:	jne    409ab0 <flatcc_json_parser_space_ext@@Base+0x50>
  409abd:	jmp    409b3d <flatcc_json_parser_space_ext@@Base+0xdd>
  409abf:	nop
  409ac0:	cmp    rdx,rax
  409ac3:	jne    409ae5 <flatcc_json_parser_space_ext@@Base+0x85>
  409ac5:	jmp    409b3d <flatcc_json_parser_space_ext@@Base+0xdd>
  409ac7:	cmp    BYTE PTR [rax+0x1],0xa
  409acb:	sete   sil
  409acf:	movzx  esi,sil
  409ad3:	add    rax,rsi
  409ad6:	inc    DWORD PTR [rdi+0x18]
  409ad9:	inc    rax
  409adc:	mov    QWORD PTR [rdi+0x8],rax
  409ae0:	cmp    rax,rdx
  409ae3:	je     409b3d <flatcc_json_parser_space_ext@@Base+0xdd>
  409ae5:	movsx  esi,BYTE PTR [rax]
  409ae8:	cmp    esi,0x20
  409aeb:	jg     409b40 <flatcc_json_parser_space_ext@@Base+0xe0>
  409aed:	add    esi,0xfffffff7
  409af0:	cmp    esi,0x17
  409af3:	ja     409b20 <flatcc_json_parser_space_ext@@Base+0xc0>
  409af5:	movsxd rsi,DWORD PTR [rcx+rsi*4]
  409af9:	add    rsi,rcx
  409afc:	jmp    rsi
  409afe:	inc    rax
  409b01:	jmp    409ae0 <flatcc_json_parser_space_ext@@Base+0x80>
  409b03:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409b0d:	nop    DWORD PTR [rax]
  409b10:	mov    rsi,rdx
  409b13:	sub    rsi,rax
  409b16:	cmp    rsi,0x2
  409b1a:	jge    409ac7 <flatcc_json_parser_space_ext@@Base+0x67>
  409b1c:	xor    esi,esi
  409b1e:	jmp    409acf <flatcc_json_parser_space_ext@@Base+0x6f>
  409b20:	cmp    DWORD PTR [rdi+0x20],0x0
  409b24:	jne    409b3d <flatcc_json_parser_space_ext@@Base+0xdd>
  409b26:	mov    DWORD PTR [rdi+0x20],0x5
  409b2d:	mov    ecx,DWORD PTR [rdi+0x8]
  409b30:	mov    esi,eax
  409b32:	sub    esi,ecx
  409b34:	inc    esi
  409b36:	mov    DWORD PTR [rdi+0x1c],esi
  409b39:	mov    QWORD PTR [rdi+0x38],rax
  409b3d:	mov    rax,rdx
  409b40:	ret    
  409b41:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409b4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409b50 <flatcc_json_parser_string_escape@@Base>:
  409b50:	push   rbp
  409b51:	push   r14
  409b53:	push   rbx
  409b54:	mov    rax,rdx
  409b57:	sub    rdx,rsi
  409b5a:	cmp    rdx,0x2
  409b5e:	jl     409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409b64:	cmp    BYTE PTR [rsi],0x5c
  409b67:	jne    409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409b69:	movsx  ebp,BYTE PTR [rsi+0x1]
  409b6d:	add    ebp,0xffffffde
  409b70:	cmp    ebp,0x56
  409b73:	ja     409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409b75:	lea    rbx,[rip+0x5d24]        # 40f8a0 <flatcc_builder_padding_base@@Base+0x1540>
  409b7c:	movsxd rbp,DWORD PTR [rbx+rbp*4]
  409b80:	add    rbp,rbx
  409b83:	jmp    rbp
  409b85:	mov    WORD PTR [rcx],0x2201
  409b8a:	jmp    409bbb <flatcc_json_parser_string_escape@@Base+0x6b>
  409b8c:	mov    WORD PTR [rcx],0x2f01
  409b91:	jmp    409bbb <flatcc_json_parser_string_escape@@Base+0x6b>
  409b93:	mov    WORD PTR [rcx],0x5c01
  409b98:	jmp    409bbb <flatcc_json_parser_string_escape@@Base+0x6b>
  409b9a:	mov    WORD PTR [rcx],0x801
  409b9f:	jmp    409bbb <flatcc_json_parser_string_escape@@Base+0x6b>
  409ba1:	mov    WORD PTR [rcx],0xc01
  409ba6:	jmp    409bbb <flatcc_json_parser_string_escape@@Base+0x6b>
  409ba8:	mov    WORD PTR [rcx],0xa01
  409bad:	jmp    409bbb <flatcc_json_parser_string_escape@@Base+0x6b>
  409baf:	mov    WORD PTR [rcx],0xd01
  409bb4:	jmp    409bbb <flatcc_json_parser_string_escape@@Base+0x6b>
  409bb6:	mov    WORD PTR [rcx],0x901
  409bbb:	add    rsi,0x2
  409bbf:	mov    rax,rsi
  409bc2:	jmp    409c08 <flatcc_json_parser_string_escape@@Base+0xb8>
  409bc4:	cmp    rdx,0x5
  409bc8:	jle    409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409bca:	movzx  edx,BYTE PTR [rsi+0x2]
  409bce:	lea    ebp,[rdx-0x30]
  409bd1:	cmp    bpl,0x9
  409bd5:	ja     409c25 <flatcc_json_parser_string_escape@@Base+0xd5>
  409bd7:	movzx  edx,dx
  409bda:	shl    edx,0xc
  409bdd:	jmp    409c3e <flatcc_json_parser_string_escape@@Base+0xee>
  409bdf:	mov    BYTE PTR [rcx],0x1
  409be2:	cmp    rdx,0x3
  409be6:	jg     409c0d <flatcc_json_parser_string_escape@@Base+0xbd>
  409be8:	mov    BYTE PTR [rcx],0x0
  409beb:	cmp    DWORD PTR [rdi+0x20],0x0
  409bef:	jne    409c08 <flatcc_json_parser_string_escape@@Base+0xb8>
  409bf1:	mov    DWORD PTR [rdi+0x20],0x12
  409bf8:	mov    ecx,DWORD PTR [rdi+0x8]
  409bfb:	mov    edx,esi
  409bfd:	sub    edx,ecx
  409bff:	inc    edx
  409c01:	mov    DWORD PTR [rdi+0x1c],edx
  409c04:	mov    QWORD PTR [rdi+0x38],rsi
  409c08:	pop    rbx
  409c09:	pop    r14
  409c0b:	pop    rbp
  409c0c:	ret    
  409c0d:	mov    dl,BYTE PTR [rsi+0x2]
  409c10:	lea    ebp,[rdx-0x30]
  409c13:	cmp    bpl,0x9
  409c17:	ja     409cec <flatcc_json_parser_string_escape@@Base+0x19c>
  409c1d:	shl    dl,0x4
  409c20:	jmp    409d03 <flatcc_json_parser_string_escape@@Base+0x1b3>
  409c25:	mov    ebx,edx
  409c27:	or     bl,0x20
  409c2a:	add    bl,0x9f
  409c2d:	cmp    bl,0x5
  409c30:	ja     409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409c32:	movzx  edx,dx
  409c35:	shl    edx,0xc
  409c38:	add    edx,0xffff9000
  409c3e:	mov    r8b,BYTE PTR [rsi+0x3]
  409c42:	lea    ebp,[r8-0x30]
  409c46:	mov    r9w,0xd000
  409c4b:	cmp    bpl,0xa
  409c4f:	jb     409c64 <flatcc_json_parser_string_escape@@Base+0x114>
  409c51:	or     r8b,0x20
  409c55:	lea    ebp,[r8-0x61]
  409c59:	mov    r9w,0xa900
  409c5e:	cmp    bpl,0x6
  409c62:	jae    409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409c64:	mov    r10b,BYTE PTR [rsi+0x4]
  409c68:	lea    ebx,[r10-0x30]
  409c6c:	mov    r11w,0xfd00
  409c71:	cmp    bl,0xa
  409c74:	jb     409c8c <flatcc_json_parser_string_escape@@Base+0x13c>
  409c76:	or     r10b,0x20
  409c7a:	lea    ebx,[r10-0x61]
  409c7e:	mov    r11w,0xfa90
  409c83:	cmp    bl,0x6
  409c86:	jae    409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409c8c:	mov    bl,BYTE PTR [rsi+0x5]
  409c8f:	lea    ebp,[rbx-0x30]
  409c92:	mov    r14w,0xffd0
  409c97:	cmp    bpl,0xa
  409c9b:	jb     409cb2 <flatcc_json_parser_string_escape@@Base+0x162>
  409c9d:	or     bl,0x20
  409ca0:	lea    ebp,[rbx-0x61]
  409ca3:	mov    r14w,0xffa9
  409ca8:	cmp    bpl,0x6
  409cac:	jae    409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409cb2:	movzx  eax,r8b
  409cb6:	shl    eax,0x8
  409cb9:	add    r9d,eax
  409cbc:	or     edx,r9d
  409cbf:	movsx  eax,r10b
  409cc3:	shl    eax,0x4
  409cc6:	movsx  edi,r11w
  409cca:	add    edi,eax
  409ccc:	or     edx,edi
  409cce:	movsx  eax,bl
  409cd1:	movsx  edi,r14w
  409cd5:	add    edi,eax
  409cd7:	or     edx,edi
  409cd9:	cmp    dx,0x7f
  409cdd:	ja     409d36 <flatcc_json_parser_string_escape@@Base+0x1e6>
  409cdf:	mov    BYTE PTR [rcx],0x1
  409ce2:	mov    eax,0x1
  409ce7:	jmp    409d7c <flatcc_json_parser_string_escape@@Base+0x22c>
  409cec:	mov    ebx,edx
  409cee:	or     bl,0x20
  409cf1:	add    bl,0x9f
  409cf4:	cmp    bl,0x5
  409cf7:	ja     409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409cfd:	shl    dl,0x4
  409d00:	add    dl,0x90
  409d03:	mov    bpl,BYTE PTR [rsi+0x3]
  409d07:	lea    ebx,[rbp-0x30]
  409d0a:	cmp    bl,0xa
  409d0d:	jb     409d25 <flatcc_json_parser_string_escape@@Base+0x1d5>
  409d0f:	or     bpl,0x20
  409d13:	lea    ebx,[rbp-0x61]
  409d16:	cmp    bl,0x5
  409d19:	ja     409be8 <flatcc_json_parser_string_escape@@Base+0x98>
  409d1f:	add    bpl,0xa9
  409d23:	mov    ebx,ebp
  409d25:	or     bl,dl
  409d27:	mov    BYTE PTR [rcx+0x1],bl
  409d2a:	add    rsi,0x4
  409d2e:	mov    rax,rsi
  409d31:	jmp    409c08 <flatcc_json_parser_string_escape@@Base+0xb8>
  409d36:	movzx  eax,dx
  409d39:	cmp    eax,0x7ff
  409d3e:	ja     409d5a <flatcc_json_parser_string_escape@@Base+0x20a>
  409d40:	mov    BYTE PTR [rcx],0x2
  409d43:	mov    eax,edx
  409d45:	shr    eax,0x6
  409d48:	or     al,0xc0
  409d4a:	mov    BYTE PTR [rcx+0x1],al
  409d4d:	and    dl,0x3f
  409d50:	or     dl,0x80
  409d53:	mov    eax,0x2
  409d58:	jmp    409d7c <flatcc_json_parser_string_escape@@Base+0x22c>
  409d5a:	mov    BYTE PTR [rcx],0x3
  409d5d:	shr    eax,0xc
  409d60:	or     al,0xe0
  409d62:	mov    BYTE PTR [rcx+0x1],al
  409d65:	mov    eax,edx
  409d67:	shr    eax,0x6
  409d6a:	and    al,0x3f
  409d6c:	or     al,0x80
  409d6e:	mov    BYTE PTR [rcx+0x2],al
  409d71:	and    dl,0x3f
  409d74:	or     dl,0x80
  409d77:	mov    eax,0x3
  409d7c:	mov    BYTE PTR [rcx+rax*1],dl
  409d7f:	add    rsi,0x6
  409d83:	mov    rax,rsi
  409d86:	jmp    409c08 <flatcc_json_parser_string_escape@@Base+0xb8>
  409d8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409d90 <flatcc_json_parser_skip_constant@@Base>:
  409d90:	push   r15
  409d92:	push   r14
  409d94:	push   rbx
  409d95:	mov    rbx,rsi
  409d98:	cmp    rsi,rdx
  409d9b:	je     409e12 <flatcc_json_parser_skip_constant@@Base+0x82>
  409d9d:	mov    r14,rdx
  409da0:	mov    r15,rdi
  409da3:	jmp    409dbe <flatcc_json_parser_skip_constant@@Base+0x2e>
  409da5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  409daf:	nop
  409db0:	inc    rbx
  409db3:	mov    rax,rbx
  409db6:	mov    rbx,rax
  409db9:	cmp    rax,r14
  409dbc:	je     409e0f <flatcc_json_parser_skip_constant@@Base+0x7f>
  409dbe:	movzx  eax,BYTE PTR [rbx]
  409dc1:	test   al,al
  409dc3:	js     409db0 <flatcc_json_parser_skip_constant@@Base+0x20>
  409dc5:	cmp    al,0x5f
  409dc7:	je     409db0 <flatcc_json_parser_skip_constant@@Base+0x20>
  409dc9:	cmp    al,0x2e
  409dcb:	je     409db0 <flatcc_json_parser_skip_constant@@Base+0x20>
  409dcd:	lea    ecx,[rax-0x30]
  409dd0:	cmp    cl,0x9
  409dd3:	jbe    409db0 <flatcc_json_parser_skip_constant@@Base+0x20>
  409dd5:	mov    ecx,eax
  409dd7:	or     cl,0x20
  409dda:	add    cl,0x9f
  409ddd:	cmp    cl,0x19
  409de0:	jbe    409db0 <flatcc_json_parser_skip_constant@@Base+0x20>
  409de2:	mov    rcx,r14
  409de5:	sub    rcx,rbx
  409de8:	cmp    rcx,0x2
  409dec:	jl     409dfa <flatcc_json_parser_skip_constant@@Base+0x6a>
  409dee:	cmp    al,0x20
  409df0:	jg     409e12 <flatcc_json_parser_skip_constant@@Base+0x82>
  409df2:	jne    409dfa <flatcc_json_parser_skip_constant@@Base+0x6a>
  409df4:	cmp    BYTE PTR [rbx+0x1],0x20
  409df8:	jg     409db0 <flatcc_json_parser_skip_constant@@Base+0x20>
  409dfa:	mov    rdi,r15
  409dfd:	mov    rsi,rbx
  409e00:	mov    rdx,r14
  409e03:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  409e08:	cmp    rax,rbx
  409e0b:	jne    409db6 <flatcc_json_parser_skip_constant@@Base+0x26>
  409e0d:	jmp    409e12 <flatcc_json_parser_skip_constant@@Base+0x82>
  409e0f:	mov    rbx,r14
  409e12:	mov    rax,rbx
  409e15:	pop    rbx
  409e16:	pop    r14
  409e18:	pop    r15
  409e1a:	ret    
  409e1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000409e20 <flatcc_json_parser_match_constant@@Base>:
  409e20:	push   r15
  409e22:	push   r14
  409e24:	push   r12
  409e26:	push   rbx
  409e27:	push   rax
  409e28:	mov    r14,r8
  409e2b:	mov    r15,rsi
  409e2e:	movsxd rbx,ecx
  409e31:	mov    rax,rdx
  409e34:	sub    rax,rsi
  409e37:	cmp    rax,rbx
  409e3a:	jle    409f24 <flatcc_json_parser_match_constant@@Base+0x104>
  409e40:	mov    r12,rdx
  409e43:	add    rbx,r15
  409e46:	cmp    DWORD PTR [rdi+0x14],0x0
  409e4a:	je     409eaa <flatcc_json_parser_match_constant@@Base+0x8a>
  409e4c:	mov    rax,r12
  409e4f:	sub    rax,rbx
  409e52:	cmp    rax,0x2
  409e56:	jl     409e73 <flatcc_json_parser_match_constant@@Base+0x53>
  409e58:	cmp    BYTE PTR [rbx],0x20
  409e5b:	mov    rax,rbx
  409e5e:	jg     409e7e <flatcc_json_parser_match_constant@@Base+0x5e>
  409e60:	jne    409e73 <flatcc_json_parser_match_constant@@Base+0x53>
  409e62:	cmp    BYTE PTR [rbx+0x1],0x20
  409e66:	jle    409e73 <flatcc_json_parser_match_constant@@Base+0x53>
  409e68:	lea    rax,[rbx+0x1]
  409e6c:	cmp    rax,r12
  409e6f:	jne    409e83 <flatcc_json_parser_match_constant@@Base+0x63>
  409e71:	jmp    409ee2 <flatcc_json_parser_match_constant@@Base+0xc2>
  409e73:	mov    rsi,rbx
  409e76:	mov    rdx,r12
  409e79:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  409e7e:	cmp    rax,r12
  409e81:	je     409ee2 <flatcc_json_parser_match_constant@@Base+0xc2>
  409e83:	cmp    rax,rbx
  409e86:	je     409eee <flatcc_json_parser_match_constant@@Base+0xce>
  409e88:	mov    cl,BYTE PTR [rax]
  409e8a:	cmp    cl,0x5f
  409e8d:	je     409e9e <flatcc_json_parser_match_constant@@Base+0x7e>
  409e8f:	test   cl,cl
  409e91:	js     409e9e <flatcc_json_parser_match_constant@@Base+0x7e>
  409e93:	or     cl,0x20
  409e96:	add    cl,0x9f
  409e99:	cmp    cl,0x19
  409e9c:	ja     409eee <flatcc_json_parser_match_constant@@Base+0xce>
  409e9e:	mov    DWORD PTR [r14],0x1
  409ea5:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409eaa:	movsx  eax,BYTE PTR [rbx]
  409ead:	cmp    eax,0x20
  409eb0:	jne    409f08 <flatcc_json_parser_match_constant@@Base+0xe8>
  409eb2:	lea    rax,[r12-0x1]
  409eb7:	nop    WORD PTR [rax+rax*1+0x0]
  409ec0:	cmp    rax,rbx
  409ec3:	je     409ee2 <flatcc_json_parser_match_constant@@Base+0xc2>
  409ec5:	movzx  ecx,BYTE PTR [rbx+0x1]
  409ec9:	inc    rbx
  409ecc:	cmp    cl,0x20
  409ecf:	je     409ec0 <flatcc_json_parser_match_constant@@Base+0xa0>
  409ed1:	cmp    cl,0x22
  409ed4:	je     409f3a <flatcc_json_parser_match_constant@@Base+0x11a>
  409ed6:	mov    DWORD PTR [r14],0x1
  409edd:	mov    rax,rbx
  409ee0:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409ee2:	mov    DWORD PTR [r14],0x0
  409ee9:	mov    rax,r12
  409eec:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409eee:	mov    DWORD PTR [r14],0x0
  409ef5:	mov    cl,BYTE PTR [rax]
  409ef7:	cmp    cl,0x2c
  409efa:	je     409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409efc:	cmp    cl,0x5d
  409eff:	je     409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409f01:	cmp    cl,0x7d
  409f04:	jne    409f2b <flatcc_json_parser_match_constant@@Base+0x10b>
  409f06:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409f08:	cmp    eax,0x22
  409f0b:	je     409f3a <flatcc_json_parser_match_constant@@Base+0x11a>
  409f0d:	cmp    eax,0x5c
  409f10:	jne    409f24 <flatcc_json_parser_match_constant@@Base+0x104>
  409f12:	mov    DWORD PTR [r14],0x0
  409f19:	cmp    DWORD PTR [rdi+0x20],0x0
  409f1d:	je     409f7a <flatcc_json_parser_match_constant@@Base+0x15a>
  409f1f:	mov    rax,r12
  409f22:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409f24:	mov    DWORD PTR [r14],0x0
  409f2b:	mov    rax,r15
  409f2e:	add    rsp,0x8
  409f32:	pop    rbx
  409f33:	pop    r12
  409f35:	pop    r14
  409f37:	pop    r15
  409f39:	ret    
  409f3a:	lea    rax,[rbx+0x1]
  409f3e:	mov    rcx,rbx
  409f41:	not    rcx
  409f44:	cmp    rcx,0x2
  409f48:	jl     409f67 <flatcc_json_parser_match_constant@@Base+0x147>
  409f4a:	cmp    BYTE PTR [rax],0x20
  409f4d:	jg     409f71 <flatcc_json_parser_match_constant@@Base+0x151>
  409f4f:	jne    409f67 <flatcc_json_parser_match_constant@@Base+0x147>
  409f51:	cmp    BYTE PTR [rbx+0x2],0x20
  409f55:	jle    409f67 <flatcc_json_parser_match_constant@@Base+0x147>
  409f57:	add    rbx,0x2
  409f5b:	mov    rax,rbx
  409f5e:	mov    DWORD PTR [r14],0x0
  409f65:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409f67:	mov    rsi,rax
  409f6a:	xor    edx,edx
  409f6c:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  409f71:	mov    DWORD PTR [r14],0x0
  409f78:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409f7a:	mov    DWORD PTR [rdi+0x20],0x12
  409f81:	mov    eax,DWORD PTR [rdi+0x8]
  409f84:	mov    ecx,ebx
  409f86:	sub    ecx,eax
  409f88:	inc    ecx
  409f8a:	mov    DWORD PTR [rdi+0x1c],ecx
  409f8d:	mov    QWORD PTR [rdi+0x38],rbx
  409f91:	mov    rax,r12
  409f94:	jmp    409f2e <flatcc_json_parser_match_constant@@Base+0x10e>
  409f96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000409fa0 <flatcc_json_parser_unmatched_symbol@@Base>:
  409fa0:	push   r14
  409fa2:	push   rbx
  409fa3:	push   rax
  409fa4:	mov    rbx,rdx
  409fa7:	mov    r14,rdi
  409faa:	test   BYTE PTR [rdi+0x10],0x1
  409fae:	jne    409fda <flatcc_json_parser_unmatched_symbol@@Base+0x3a>
  409fb0:	cmp    DWORD PTR [r14+0x20],0x0
  409fb5:	jne    40a132 <flatcc_json_parser_unmatched_symbol@@Base+0x192>
  409fbb:	mov    DWORD PTR [r14+0x20],0xd
  409fc3:	mov    eax,DWORD PTR [r14+0x8]
  409fc7:	mov    ecx,esi
  409fc9:	sub    ecx,eax
  409fcb:	inc    ecx
  409fcd:	mov    DWORD PTR [r14+0x1c],ecx
  409fd1:	mov    QWORD PTR [r14+0x38],rsi
  409fd5:	jmp    40a132 <flatcc_json_parser_unmatched_symbol@@Base+0x192>
  409fda:	cmp    DWORD PTR [r14+0x14],0x0
  409fdf:	je     40a037 <flatcc_json_parser_unmatched_symbol@@Base+0x97>
  409fe1:	cmp    rsi,rbx
  409fe4:	je     40a084 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
  409fea:	mov    dl,BYTE PTR [rsi]
  409fec:	cmp    dl,0x21
  409fef:	jl     40a084 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
  409ff5:	lea    rcx,[rbx-0x1]
  409ff9:	nop    DWORD PTR [rax+0x0]
  40a000:	mov    eax,edx
  40a002:	cmp    dl,0x2e
  40a005:	je     40a020 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
  40a007:	cmp    al,0x5f
  40a009:	je     40a020 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
  40a00b:	lea    edx,[rax-0x30]
  40a00e:	cmp    dl,0x9
  40a011:	jbe    40a020 <flatcc_json_parser_unmatched_symbol@@Base+0x80>
  40a013:	mov    edx,eax
  40a015:	or     dl,0x20
  40a018:	add    dl,0x9f
  40a01b:	cmp    dl,0x1a
  40a01e:	jae    40a031 <flatcc_json_parser_unmatched_symbol@@Base+0x91>
  40a020:	cmp    rcx,rsi
  40a023:	je     40a069 <flatcc_json_parser_unmatched_symbol@@Base+0xc9>
  40a025:	movzx  edx,BYTE PTR [rsi+0x1]
  40a029:	inc    rsi
  40a02c:	cmp    dl,0x21
  40a02f:	jge    40a000 <flatcc_json_parser_unmatched_symbol@@Base+0x60>
  40a031:	cmp    al,0x2e
  40a033:	je     40a070 <flatcc_json_parser_unmatched_symbol@@Base+0xd0>
  40a035:	jmp    40a084 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
  40a037:	cmp    rsi,rbx
  40a03a:	jne    40a04c <flatcc_json_parser_unmatched_symbol@@Base+0xac>
  40a03c:	jmp    40a08c <flatcc_json_parser_unmatched_symbol@@Base+0xec>
  40a03e:	xchg   ax,ax
  40a040:	cmp    al,0x22
  40a042:	je     40a064 <flatcc_json_parser_unmatched_symbol@@Base+0xc4>
  40a044:	inc    rsi
  40a047:	cmp    rsi,rbx
  40a04a:	je     40a089 <flatcc_json_parser_unmatched_symbol@@Base+0xe9>
  40a04c:	movzx  eax,BYTE PTR [rsi]
  40a04f:	cmp    al,0x5c
  40a051:	jne    40a040 <flatcc_json_parser_unmatched_symbol@@Base+0xa0>
  40a053:	mov    rax,rbx
  40a056:	sub    rax,rsi
  40a059:	cmp    rax,0x2
  40a05d:	jl     40a08c <flatcc_json_parser_unmatched_symbol@@Base+0xec>
  40a05f:	inc    rsi
  40a062:	jmp    40a044 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
  40a064:	inc    rsi
  40a067:	jmp    40a084 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
  40a069:	mov    rsi,rbx
  40a06c:	cmp    al,0x2e
  40a06e:	jne    40a084 <flatcc_json_parser_unmatched_symbol@@Base+0xe4>
  40a070:	cmp    DWORD PTR [r14+0x20],0x0
  40a075:	mov    rax,rbx
  40a078:	jne    40a0b3 <flatcc_json_parser_unmatched_symbol@@Base+0x113>
  40a07a:	mov    DWORD PTR [r14+0x20],0x5
  40a082:	jmp    40a09e <flatcc_json_parser_unmatched_symbol@@Base+0xfe>
  40a084:	mov    rax,rsi
  40a087:	jmp    40a0b3 <flatcc_json_parser_unmatched_symbol@@Base+0x113>
  40a089:	mov    rsi,rbx
  40a08c:	cmp    DWORD PTR [r14+0x20],0x0
  40a091:	mov    rax,rbx
  40a094:	jne    40a0b3 <flatcc_json_parser_unmatched_symbol@@Base+0x113>
  40a096:	mov    DWORD PTR [r14+0x20],0x14
  40a09e:	mov    eax,DWORD PTR [r14+0x8]
  40a0a2:	mov    ecx,esi
  40a0a4:	sub    ecx,eax
  40a0a6:	inc    ecx
  40a0a8:	mov    DWORD PTR [r14+0x1c],ecx
  40a0ac:	mov    QWORD PTR [r14+0x38],rsi
  40a0b0:	mov    rax,rbx
  40a0b3:	mov    rcx,rbx
  40a0b6:	sub    rcx,rax
  40a0b9:	cmp    rcx,0x2
  40a0bd:	jl     40a0d6 <flatcc_json_parser_unmatched_symbol@@Base+0x136>
  40a0bf:	cmp    BYTE PTR [rax],0x20
  40a0c2:	jg     40a0e4 <flatcc_json_parser_unmatched_symbol@@Base+0x144>
  40a0c4:	jne    40a0d6 <flatcc_json_parser_unmatched_symbol@@Base+0x136>
  40a0c6:	cmp    BYTE PTR [rax+0x1],0x20
  40a0ca:	jle    40a0d6 <flatcc_json_parser_unmatched_symbol@@Base+0x136>
  40a0cc:	inc    rax
  40a0cf:	cmp    rax,rbx
  40a0d2:	jne    40a0e9 <flatcc_json_parser_unmatched_symbol@@Base+0x149>
  40a0d4:	jmp    40a111 <flatcc_json_parser_unmatched_symbol@@Base+0x171>
  40a0d6:	mov    rdi,r14
  40a0d9:	mov    rsi,rax
  40a0dc:	mov    rdx,rbx
  40a0df:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a0e4:	cmp    rax,rbx
  40a0e7:	je     40a111 <flatcc_json_parser_unmatched_symbol@@Base+0x171>
  40a0e9:	cmp    BYTE PTR [rax],0x3a
  40a0ec:	jne    40a111 <flatcc_json_parser_unmatched_symbol@@Base+0x171>
  40a0ee:	lea    rsi,[rax+0x1]
  40a0f2:	mov    rcx,rbx
  40a0f5:	sub    rcx,rsi
  40a0f8:	cmp    rcx,0x2
  40a0fc:	jl     40a13d <flatcc_json_parser_unmatched_symbol@@Base+0x19d>
  40a0fe:	cmp    BYTE PTR [rsi],0x20
  40a101:	jg     40a14b <flatcc_json_parser_unmatched_symbol@@Base+0x1ab>
  40a103:	jne    40a13d <flatcc_json_parser_unmatched_symbol@@Base+0x19d>
  40a105:	cmp    BYTE PTR [rax+0x2],0x20
  40a109:	jle    40a13d <flatcc_json_parser_unmatched_symbol@@Base+0x19d>
  40a10b:	add    rax,0x2
  40a10f:	jmp    40a148 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
  40a111:	cmp    DWORD PTR [r14+0x20],0x0
  40a116:	jne    40a132 <flatcc_json_parser_unmatched_symbol@@Base+0x192>
  40a118:	mov    DWORD PTR [r14+0x20],0x4
  40a120:	mov    ecx,DWORD PTR [r14+0x8]
  40a124:	mov    edx,eax
  40a126:	sub    edx,ecx
  40a128:	inc    edx
  40a12a:	mov    DWORD PTR [r14+0x1c],edx
  40a12e:	mov    QWORD PTR [r14+0x38],rax
  40a132:	mov    rax,rbx
  40a135:	add    rsp,0x8
  40a139:	pop    rbx
  40a13a:	pop    r14
  40a13c:	ret    
  40a13d:	mov    rdi,r14
  40a140:	mov    rdx,rbx
  40a143:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a148:	mov    rsi,rax
  40a14b:	mov    rdi,r14
  40a14e:	mov    rdx,rbx
  40a151:	add    rsp,0x8
  40a155:	pop    rbx
  40a156:	pop    r14
  40a158:	jmp    40a160 <flatcc_json_parser_generic_json@@Base>
  40a15d:	nop    DWORD PTR [rax]

000000000040a160 <flatcc_json_parser_generic_json@@Base>:
  40a160:	push   rbp
  40a161:	push   r15
  40a163:	push   r14
  40a165:	push   r13
  40a167:	push   r12
  40a169:	push   rbx
  40a16a:	sub    rsp,0x238
  40a171:	mov    rbx,rsi
  40a174:	cmp    rsi,rdx
  40a177:	je     40ac4a <flatcc_json_parser_generic_json@@Base+0xaea>
  40a17d:	mov    r12,rdx
  40a180:	mov    r14,rdi
  40a183:	lea    rax,[rsp+0x30]
  40a188:	lea    r15,[rdi+0x20]
  40a18c:	lea    rcx,[rdi+0x8]
  40a190:	mov    QWORD PTR [rsp+0x8],rcx
  40a195:	lea    rcx,[rdi+0x1c]
  40a199:	mov    QWORD PTR [rsp+0x10],rcx
  40a19e:	lea    rcx,[rdi+0x38]
  40a1a2:	mov    QWORD PTR [rsp+0x18],rcx
  40a1a7:	lea    rcx,[rdx-0x1]
  40a1ab:	mov    QWORD PTR [rsp+0x20],rcx
  40a1b0:	xor    ebp,ebp
  40a1b2:	test   rbp,rbp
  40a1b5:	je     40a3c3 <flatcc_json_parser_generic_json@@Base+0x263>
  40a1bb:	cmp    BYTE PTR [rax-0x1],0x7d
  40a1bf:	jne    40a3c3 <flatcc_json_parser_generic_json@@Base+0x263>
  40a1c5:	mov    al,BYTE PTR [rbx]
  40a1c7:	cmp    al,0x2e
  40a1c9:	je     40a220 <flatcc_json_parser_generic_json@@Base+0xc0>
  40a1cb:	cmp    al,0x22
  40a1cd:	jne    40a25f <flatcc_json_parser_generic_json@@Base+0xff>
  40a1d3:	inc    rbx
  40a1d6:	mov    DWORD PTR [r14+0x14],0x0
  40a1de:	mov    rcx,r12
  40a1e1:	cmp    rbx,r12
  40a1e4:	jne    40a204 <flatcc_json_parser_generic_json@@Base+0xa4>
  40a1e6:	jmp    40a30c <flatcc_json_parser_generic_json@@Base+0x1ac>
  40a1eb:	nop    DWORD PTR [rax+rax*1+0x0]
  40a1f0:	cmp    al,0x22
  40a1f2:	je     40a2c5 <flatcc_json_parser_generic_json@@Base+0x165>
  40a1f8:	inc    rbx
  40a1fb:	cmp    rbx,r12
  40a1fe:	je     40a2ca <flatcc_json_parser_generic_json@@Base+0x16a>
  40a204:	movzx  eax,BYTE PTR [rbx]
  40a207:	cmp    al,0x5c
  40a209:	jne    40a1f0 <flatcc_json_parser_generic_json@@Base+0x90>
  40a20b:	mov    rax,r12
  40a20e:	sub    rax,rbx
  40a211:	cmp    rax,0x2
  40a215:	jl     40a309 <flatcc_json_parser_generic_json@@Base+0x1a9>
  40a21b:	inc    rbx
  40a21e:	jmp    40a1f8 <flatcc_json_parser_generic_json@@Base+0x98>
  40a220:	cmp    DWORD PTR [r15],0x0
  40a224:	jne    40a249 <flatcc_json_parser_generic_json@@Base+0xe9>
  40a226:	mov    DWORD PTR [r15],0x5
  40a22d:	mov    rax,QWORD PTR [rsp+0x8]
  40a232:	mov    eax,DWORD PTR [rax]
  40a234:	mov    ecx,ebx
  40a236:	sub    ecx,eax
  40a238:	inc    ecx
  40a23a:	mov    rax,QWORD PTR [rsp+0x10]
  40a23f:	mov    DWORD PTR [rax],ecx
  40a241:	mov    rax,QWORD PTR [rsp+0x18]
  40a246:	mov    QWORD PTR [rax],rbx
  40a249:	cmp    DWORD PTR [r14+0x14],0x0
  40a24e:	mov    rcx,r12
  40a251:	mov    rax,r12
  40a254:	jne    40a340 <flatcc_json_parser_generic_json@@Base+0x1e0>
  40a25a:	jmp    40a30c <flatcc_json_parser_generic_json@@Base+0x1ac>
  40a25f:	mov    DWORD PTR [r14+0x14],0x1
  40a267:	mov    rax,r12
  40a26a:	cmp    rbx,r12
  40a26d:	je     40a340 <flatcc_json_parser_generic_json@@Base+0x1e0>
  40a273:	mov    cl,BYTE PTR [rbx]
  40a275:	mov    rax,rbx
  40a278:	cmp    cl,0x21
  40a27b:	jl     40a340 <flatcc_json_parser_generic_json@@Base+0x1e0>
  40a281:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a28b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a290:	mov    eax,ecx
  40a292:	cmp    cl,0x2e
  40a295:	je     40a2b0 <flatcc_json_parser_generic_json@@Base+0x150>
  40a297:	cmp    al,0x5f
  40a299:	je     40a2b0 <flatcc_json_parser_generic_json@@Base+0x150>
  40a29b:	lea    ecx,[rax-0x30]
  40a29e:	cmp    cl,0x9
  40a2a1:	jbe    40a2b0 <flatcc_json_parser_generic_json@@Base+0x150>
  40a2a3:	mov    ecx,eax
  40a2a5:	or     cl,0x20
  40a2a8:	add    cl,0x9f
  40a2ab:	cmp    cl,0x1a
  40a2ae:	jae    40a2d2 <flatcc_json_parser_generic_json@@Base+0x172>
  40a2b0:	cmp    QWORD PTR [rsp+0x20],rbx
  40a2b5:	je     40a2cf <flatcc_json_parser_generic_json@@Base+0x16f>
  40a2b7:	movzx  ecx,BYTE PTR [rbx+0x1]
  40a2bb:	inc    rbx
  40a2be:	cmp    cl,0x21
  40a2c1:	jge    40a290 <flatcc_json_parser_generic_json@@Base+0x130>
  40a2c3:	jmp    40a2d2 <flatcc_json_parser_generic_json@@Base+0x172>
  40a2c5:	inc    rbx
  40a2c8:	jmp    40a304 <flatcc_json_parser_generic_json@@Base+0x1a4>
  40a2ca:	mov    rcx,r12
  40a2cd:	jmp    40a30c <flatcc_json_parser_generic_json@@Base+0x1ac>
  40a2cf:	mov    rbx,r12
  40a2d2:	cmp    al,0x2e
  40a2d4:	jne    40a304 <flatcc_json_parser_generic_json@@Base+0x1a4>
  40a2d6:	cmp    DWORD PTR [r15],0x0
  40a2da:	mov    rax,r12
  40a2dd:	jne    40a340 <flatcc_json_parser_generic_json@@Base+0x1e0>
  40a2df:	mov    DWORD PTR [r15],0x5
  40a2e6:	mov    rax,QWORD PTR [rsp+0x8]
  40a2eb:	mov    eax,DWORD PTR [rax]
  40a2ed:	mov    ecx,ebx
  40a2ef:	sub    ecx,eax
  40a2f1:	inc    ecx
  40a2f3:	mov    rax,QWORD PTR [rsp+0x10]
  40a2f8:	mov    DWORD PTR [rax],ecx
  40a2fa:	mov    rax,QWORD PTR [rsp+0x18]
  40a2ff:	mov    QWORD PTR [rax],rbx
  40a302:	jmp    40a338 <flatcc_json_parser_generic_json@@Base+0x1d8>
  40a304:	mov    rax,rbx
  40a307:	jmp    40a340 <flatcc_json_parser_generic_json@@Base+0x1e0>
  40a309:	mov    rcx,rbx
  40a30c:	cmp    DWORD PTR [r15],0x0
  40a310:	mov    rax,r12
  40a313:	jne    40a340 <flatcc_json_parser_generic_json@@Base+0x1e0>
  40a315:	mov    DWORD PTR [r15],0x14
  40a31c:	mov    rax,QWORD PTR [rsp+0x8]
  40a321:	mov    eax,DWORD PTR [rax]
  40a323:	mov    edx,ecx
  40a325:	sub    edx,eax
  40a327:	inc    edx
  40a329:	mov    rax,QWORD PTR [rsp+0x10]
  40a32e:	mov    DWORD PTR [rax],edx
  40a330:	mov    rax,QWORD PTR [rsp+0x18]
  40a335:	mov    QWORD PTR [rax],rcx
  40a338:	mov    rax,r12
  40a33b:	nop    DWORD PTR [rax+rax*1+0x0]
  40a340:	mov    rcx,r12
  40a343:	sub    rcx,rax
  40a346:	cmp    rcx,0x2
  40a34a:	jl     40a366 <flatcc_json_parser_generic_json@@Base+0x206>
  40a34c:	cmp    BYTE PTR [rax],0x20
  40a34f:	jg     40a374 <flatcc_json_parser_generic_json@@Base+0x214>
  40a351:	jne    40a366 <flatcc_json_parser_generic_json@@Base+0x206>
  40a353:	cmp    BYTE PTR [rax+0x1],0x20
  40a357:	jle    40a366 <flatcc_json_parser_generic_json@@Base+0x206>
  40a359:	inc    rax
  40a35c:	cmp    rax,r12
  40a35f:	jne    40a37d <flatcc_json_parser_generic_json@@Base+0x21d>
  40a361:	jmp    40ac5f <flatcc_json_parser_generic_json@@Base+0xaff>
  40a366:	mov    rdi,r14
  40a369:	mov    rsi,rax
  40a36c:	mov    rdx,r12
  40a36f:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a374:	cmp    rax,r12
  40a377:	je     40ac5f <flatcc_json_parser_generic_json@@Base+0xaff>
  40a37d:	cmp    BYTE PTR [rax],0x3a
  40a380:	jne    40ac6e <flatcc_json_parser_generic_json@@Base+0xb0e>
  40a386:	lea    r13,[rax+0x1]
  40a38a:	mov    rcx,r12
  40a38d:	sub    rcx,r13
  40a390:	cmp    rcx,0x2
  40a394:	jl     40a3b2 <flatcc_json_parser_generic_json@@Base+0x252>
  40a396:	mov    cl,BYTE PTR [r13+0x0]
  40a39a:	cmp    cl,0x20
  40a39d:	jg     40a3c8 <flatcc_json_parser_generic_json@@Base+0x268>
  40a39f:	jne    40a3b2 <flatcc_json_parser_generic_json@@Base+0x252>
  40a3a1:	mov    cl,BYTE PTR [rax+0x2]
  40a3a4:	cmp    cl,0x20
  40a3a7:	jle    40a3b2 <flatcc_json_parser_generic_json@@Base+0x252>
  40a3a9:	add    rax,0x2
  40a3ad:	mov    r13,rax
  40a3b0:	jmp    40a3c8 <flatcc_json_parser_generic_json@@Base+0x268>
  40a3b2:	mov    rdi,r14
  40a3b5:	mov    rsi,r13
  40a3b8:	mov    rdx,r12
  40a3bb:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a3c0:	mov    rbx,rax
  40a3c3:	mov    cl,BYTE PTR [rbx]
  40a3c5:	mov    r13,rbx
  40a3c8:	movsx  eax,cl
  40a3cb:	lea    edx,[rax-0x30]
  40a3ce:	cmp    edx,0xa
  40a3d1:	jae    40a430 <flatcc_json_parser_generic_json@@Base+0x2d0>
  40a3d3:	cmp    r13,r12
  40a3d6:	je     40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a3dc:	cmp    cl,0x2d
  40a3df:	jne    40a3f1 <flatcc_json_parser_generic_json@@Base+0x291>
  40a3e1:	inc    r13
  40a3e4:	cmp    r13,r12
  40a3e7:	je     40a836 <flatcc_json_parser_generic_json@@Base+0x6d6>
  40a3ed:	mov    cl,BYTE PTR [r13+0x0]
  40a3f1:	cmp    cl,0x30
  40a3f4:	jne    40a448 <flatcc_json_parser_generic_json@@Base+0x2e8>
  40a3f6:	inc    r13
  40a3f9:	mov    rcx,r12
  40a3fc:	cmp    r13,r12
  40a3ff:	je     40a925 <flatcc_json_parser_generic_json@@Base+0x7c5>
  40a405:	mov    al,BYTE PTR [r13+0x0]
  40a409:	cmp    al,0x2e
  40a40b:	jne    40a7a7 <flatcc_json_parser_generic_json@@Base+0x647>
  40a411:	mov    al,BYTE PTR [r13+0x1]
  40a415:	add    al,0xd0
  40a417:	cmp    al,0xa
  40a419:	jb     40a762 <flatcc_json_parser_generic_json@@Base+0x602>
  40a41f:	cmp    DWORD PTR [r15],0x0
  40a423:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a429:	inc    r13
  40a42c:	jmp    40a45e <flatcc_json_parser_generic_json@@Base+0x2fe>
  40a42e:	xchg   ax,ax
  40a430:	cmp    eax,0x5a
  40a433:	jg     40a487 <flatcc_json_parser_generic_json@@Base+0x327>
  40a435:	cmp    eax,0x22
  40a438:	je     40a51c <flatcc_json_parser_generic_json@@Base+0x3bc>
  40a43e:	cmp    eax,0x2d
  40a441:	je     40a3d3 <flatcc_json_parser_generic_json@@Base+0x273>
  40a443:	jmp    40a66e <flatcc_json_parser_generic_json@@Base+0x50e>
  40a448:	add    cl,0xcf
  40a44b:	cmp    cl,0x8
  40a44e:	jbe    40a4ee <flatcc_json_parser_generic_json@@Base+0x38e>
  40a454:	cmp    DWORD PTR [r15],0x0
  40a458:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a45e:	mov    DWORD PTR [r15],0x6
  40a465:	mov    rax,QWORD PTR [rsp+0x8]
  40a46a:	mov    eax,DWORD PTR [rax]
  40a46c:	mov    ecx,r13d
  40a46f:	sub    ecx,eax
  40a471:	inc    ecx
  40a473:	mov    rax,QWORD PTR [rsp+0x10]
  40a478:	mov    DWORD PTR [rax],ecx
  40a47a:	mov    rax,QWORD PTR [rsp+0x18]
  40a47f:	mov    QWORD PTR [rax],r13
  40a482:	jmp    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a487:	cmp    eax,0x5b
  40a48a:	je     40a619 <flatcc_json_parser_generic_json@@Base+0x4b9>
  40a490:	cmp    eax,0x7b
  40a493:	jne    40a66e <flatcc_json_parser_generic_json@@Base+0x50e>
  40a499:	cmp    rbp,0x200
  40a4a0:	je     40ac99 <flatcc_json_parser_generic_json@@Base+0xb39>
  40a4a6:	mov    BYTE PTR [rsp+rbp*1+0x30],0x7d
  40a4ab:	lea    rbx,[r13+0x1]
  40a4af:	mov    rax,r12
  40a4b2:	sub    rax,rbx
  40a4b5:	cmp    rax,0x2
  40a4b9:	jl     40a70c <flatcc_json_parser_generic_json@@Base+0x5ac>
  40a4bf:	cmp    BYTE PTR [rbx],0x20
  40a4c2:	jg     40a71d <flatcc_json_parser_generic_json@@Base+0x5bd>
  40a4c8:	jne    40a70c <flatcc_json_parser_generic_json@@Base+0x5ac>
  40a4ce:	cmp    BYTE PTR [r13+0x2],0x20
  40a4d3:	jle    40a70c <flatcc_json_parser_generic_json@@Base+0x5ac>
  40a4d9:	add    r13,0x2
  40a4dd:	mov    rbx,r13
  40a4e0:	cmp    rbx,r12
  40a4e3:	jne    40a726 <flatcc_json_parser_generic_json@@Base+0x5c6>
  40a4e9:	jmp    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40a4ee:	mov    rcx,QWORD PTR [rsp+0x20]
  40a4f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a4fd:	nop    DWORD PTR [rax]
  40a500:	cmp    rcx,r13
  40a503:	je     40a795 <flatcc_json_parser_generic_json@@Base+0x635>
  40a509:	movzx  eax,BYTE PTR [r13+0x1]
  40a50e:	inc    r13
  40a511:	add    al,0xd0
  40a513:	cmp    al,0xa
  40a515:	jb     40a500 <flatcc_json_parser_generic_json@@Base+0x3a0>
  40a517:	jmp    40a3f9 <flatcc_json_parser_generic_json@@Base+0x299>
  40a51c:	cmp    cl,0x22
  40a51f:	jne    40a869 <flatcc_json_parser_generic_json@@Base+0x709>
  40a525:	cmp    r13,r12
  40a528:	je     40a869 <flatcc_json_parser_generic_json@@Base+0x709>
  40a52e:	inc    r13
  40a531:	mov    rax,r12
  40a534:	cmp    r13,r12
  40a537:	jne    40a563 <flatcc_json_parser_generic_json@@Base+0x403>
  40a539:	jmp    40a8f7 <flatcc_json_parser_generic_json@@Base+0x797>
  40a53e:	cmp    DWORD PTR [r15],0x0
  40a542:	mov    rsi,r12
  40a545:	je     40a59b <flatcc_json_parser_generic_json@@Base+0x43b>
  40a547:	mov    rdi,r14
  40a54a:	mov    rdx,r12
  40a54d:	lea    rcx,[rsp+0x2c]
  40a552:	call   409b50 <flatcc_json_parser_string_escape@@Base>
  40a557:	mov    r13,rax
  40a55a:	cmp    rax,r12
  40a55d:	je     40a897 <flatcc_json_parser_generic_json@@Base+0x737>
  40a563:	mov    al,BYTE PTR [r13+0x0]
  40a567:	cmp    al,0x22
  40a569:	je     40a8e0 <flatcc_json_parser_generic_json@@Base+0x780>
  40a56f:	cmp    al,0x20
  40a571:	mov    rcx,QWORD PTR [rsp+0x20]
  40a576:	jb     40a53e <flatcc_json_parser_generic_json@@Base+0x3de>
  40a578:	nop    DWORD PTR [rax+rax*1+0x0]
  40a580:	cmp    al,0x22
  40a582:	je     40a5c4 <flatcc_json_parser_generic_json@@Base+0x464>
  40a584:	cmp    al,0x5c
  40a586:	je     40a5c4 <flatcc_json_parser_generic_json@@Base+0x464>
  40a588:	cmp    rcx,r13
  40a58b:	je     40a5e0 <flatcc_json_parser_generic_json@@Base+0x480>
  40a58d:	movzx  eax,BYTE PTR [r13+0x1]
  40a592:	inc    r13
  40a595:	cmp    al,0x20
  40a597:	jae    40a580 <flatcc_json_parser_generic_json@@Base+0x420>
  40a599:	jmp    40a53e <flatcc_json_parser_generic_json@@Base+0x3de>
  40a59b:	mov    DWORD PTR [r15],0x11
  40a5a2:	mov    rax,QWORD PTR [rsp+0x8]
  40a5a7:	mov    eax,DWORD PTR [rax]
  40a5a9:	mov    ecx,r13d
  40a5ac:	sub    ecx,eax
  40a5ae:	inc    ecx
  40a5b0:	mov    rax,QWORD PTR [rsp+0x10]
  40a5b5:	mov    DWORD PTR [rax],ecx
  40a5b7:	mov    rax,QWORD PTR [rsp+0x18]
  40a5bc:	mov    QWORD PTR [rax],r13
  40a5bf:	mov    rsi,r12
  40a5c2:	jmp    40a547 <flatcc_json_parser_generic_json@@Base+0x3e7>
  40a5c4:	mov    rsi,r12
  40a5c7:	cmp    r12,r13
  40a5ca:	je     40a547 <flatcc_json_parser_generic_json@@Base+0x3e7>
  40a5d0:	mov    rsi,r13
  40a5d3:	cmp    al,0x22
  40a5d5:	jne    40a547 <flatcc_json_parser_generic_json@@Base+0x3e7>
  40a5db:	jmp    40a8e0 <flatcc_json_parser_generic_json@@Base+0x780>
  40a5e0:	cmp    DWORD PTR [r15],0x0
  40a5e4:	mov    rsi,r12
  40a5e7:	jne    40a547 <flatcc_json_parser_generic_json@@Base+0x3e7>
  40a5ed:	mov    DWORD PTR [r15],0x14
  40a5f4:	mov    rax,QWORD PTR [rsp+0x8]
  40a5f9:	mov    eax,DWORD PTR [rax]
  40a5fb:	mov    ecx,r12d
  40a5fe:	sub    ecx,eax
  40a600:	inc    ecx
  40a602:	mov    rax,QWORD PTR [rsp+0x10]
  40a607:	mov    DWORD PTR [rax],ecx
  40a609:	mov    rax,QWORD PTR [rsp+0x18]
  40a60e:	mov    QWORD PTR [rax],r12
  40a611:	mov    rsi,r12
  40a614:	jmp    40a547 <flatcc_json_parser_generic_json@@Base+0x3e7>
  40a619:	cmp    rbp,0x200
  40a620:	je     40ac99 <flatcc_json_parser_generic_json@@Base+0xb39>
  40a626:	mov    BYTE PTR [rsp+rbp*1+0x30],0x5d
  40a62b:	lea    rbx,[r13+0x1]
  40a62f:	mov    rax,r12
  40a632:	sub    rax,rbx
  40a635:	cmp    rax,0x2
  40a639:	jl     40a737 <flatcc_json_parser_generic_json@@Base+0x5d7>
  40a63f:	cmp    BYTE PTR [rbx],0x20
  40a642:	jg     40a748 <flatcc_json_parser_generic_json@@Base+0x5e8>
  40a648:	jne    40a737 <flatcc_json_parser_generic_json@@Base+0x5d7>
  40a64e:	cmp    BYTE PTR [r13+0x2],0x20
  40a653:	jle    40a737 <flatcc_json_parser_generic_json@@Base+0x5d7>
  40a659:	add    r13,0x2
  40a65d:	mov    rbx,r13
  40a660:	cmp    rbx,r12
  40a663:	jne    40a751 <flatcc_json_parser_generic_json@@Base+0x5f1>
  40a669:	jmp    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40a66e:	mov    rbx,r12
  40a671:	cmp    r13,r12
  40a674:	je     40a6fe <flatcc_json_parser_generic_json@@Base+0x59e>
  40a67a:	mov    rbx,r13
  40a67d:	test   cl,cl
  40a67f:	jns    40a699 <flatcc_json_parser_generic_json@@Base+0x539>
  40a681:	jmp    40a6f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a683:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a68d:	nop    DWORD PTR [rax]
  40a690:	mov    cl,BYTE PTR [rax]
  40a692:	mov    rbx,rax
  40a695:	test   cl,cl
  40a697:	js     40a6f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a699:	cmp    cl,0x5f
  40a69c:	je     40a6f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a69e:	cmp    cl,0x2e
  40a6a1:	je     40a6f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a6a3:	lea    eax,[rcx-0x30]
  40a6a6:	cmp    al,0x9
  40a6a8:	jbe    40a6f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a6aa:	mov    eax,ecx
  40a6ac:	or     al,0x20
  40a6ae:	add    al,0x9f
  40a6b0:	cmp    al,0x19
  40a6b2:	jbe    40a6f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a6b4:	mov    rax,r12
  40a6b7:	sub    rax,rbx
  40a6ba:	cmp    rax,0x2
  40a6be:	jl     40a6cd <flatcc_json_parser_generic_json@@Base+0x56d>
  40a6c0:	cmp    cl,0x20
  40a6c3:	jg     40a6fe <flatcc_json_parser_generic_json@@Base+0x59e>
  40a6c5:	jne    40a6cd <flatcc_json_parser_generic_json@@Base+0x56d>
  40a6c7:	cmp    BYTE PTR [rbx+0x1],0x20
  40a6cb:	jg     40a6f0 <flatcc_json_parser_generic_json@@Base+0x590>
  40a6cd:	mov    rdi,r14
  40a6d0:	mov    rsi,rbx
  40a6d3:	mov    rdx,r12
  40a6d6:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a6db:	cmp    rax,rbx
  40a6de:	jne    40a6f6 <flatcc_json_parser_generic_json@@Base+0x596>
  40a6e0:	jmp    40a6fe <flatcc_json_parser_generic_json@@Base+0x59e>
  40a6e2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a6ec:	nop    DWORD PTR [rax+0x0]
  40a6f0:	inc    rbx
  40a6f3:	mov    rax,rbx
  40a6f6:	cmp    rax,r12
  40a6f9:	jne    40a690 <flatcc_json_parser_generic_json@@Base+0x530>
  40a6fb:	mov    rbx,r12
  40a6fe:	cmp    r13,rbx
  40a701:	jne    40a953 <flatcc_json_parser_generic_json@@Base+0x7f3>
  40a707:	jmp    40aca8 <flatcc_json_parser_generic_json@@Base+0xb48>
  40a70c:	mov    rdi,r14
  40a70f:	mov    rsi,rbx
  40a712:	mov    rdx,r12
  40a715:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a71a:	mov    rbx,rax
  40a71d:	cmp    rbx,r12
  40a720:	je     40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40a726:	inc    rbp
  40a729:	cmp    BYTE PTR [rbx],0x7d
  40a72c:	je     40a953 <flatcc_json_parser_generic_json@@Base+0x7f3>
  40a732:	jmp    40abf5 <flatcc_json_parser_generic_json@@Base+0xa95>
  40a737:	mov    rdi,r14
  40a73a:	mov    rsi,rbx
  40a73d:	mov    rdx,r12
  40a740:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a745:	mov    rbx,rax
  40a748:	cmp    rbx,r12
  40a74b:	je     40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40a751:	inc    rbp
  40a754:	cmp    BYTE PTR [rbx],0x5d
  40a757:	je     40a953 <flatcc_json_parser_generic_json@@Base+0x7f3>
  40a75d:	jmp    40abf5 <flatcc_json_parser_generic_json@@Base+0xa95>
  40a762:	add    r13,0x2
  40a766:	mov    rcx,r12
  40a769:	cmp    r13,r12
  40a76c:	je     40a925 <flatcc_json_parser_generic_json@@Base+0x7c5>
  40a772:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a77c:	nop    DWORD PTR [rax+0x0]
  40a780:	movzx  eax,BYTE PTR [r13+0x0]
  40a785:	lea    ecx,[rax-0x30]
  40a788:	cmp    cl,0x9
  40a78b:	ja     40a7a7 <flatcc_json_parser_generic_json@@Base+0x647>
  40a78d:	inc    r13
  40a790:	cmp    r12,r13
  40a793:	jne    40a780 <flatcc_json_parser_generic_json@@Base+0x620>
  40a795:	mov    rcx,r12
  40a798:	cmp    DWORD PTR [r15],0x0
  40a79c:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a7a2:	jmp    40a92b <flatcc_json_parser_generic_json@@Base+0x7cb>
  40a7a7:	mov    rcx,r12
  40a7aa:	cmp    r13,r12
  40a7ad:	je     40a925 <flatcc_json_parser_generic_json@@Base+0x7c5>
  40a7b3:	mov    ecx,eax
  40a7b5:	or     cl,0x20
  40a7b8:	cmp    cl,0x65
  40a7bb:	jne    40a8a6 <flatcc_json_parser_generic_json@@Base+0x746>
  40a7c1:	lea    rbx,[r13+0x1]
  40a7c5:	cmp    rbx,r12
  40a7c8:	je     40a836 <flatcc_json_parser_generic_json@@Base+0x6d6>
  40a7ca:	mov    al,BYTE PTR [rbx]
  40a7cc:	cmp    al,0x2d
  40a7ce:	je     40a7d4 <flatcc_json_parser_generic_json@@Base+0x674>
  40a7d0:	cmp    al,0x2b
  40a7d2:	jne    40a7db <flatcc_json_parser_generic_json@@Base+0x67b>
  40a7d4:	add    r13,0x2
  40a7d8:	mov    rbx,r13
  40a7db:	cmp    rbx,r12
  40a7de:	je     40a7e8 <flatcc_json_parser_generic_json@@Base+0x688>
  40a7e0:	mov    al,BYTE PTR [rbx]
  40a7e2:	add    al,0xd0
  40a7e4:	cmp    al,0x9
  40a7e6:	jbe    40a81a <flatcc_json_parser_generic_json@@Base+0x6ba>
  40a7e8:	cmp    DWORD PTR [r15],0x0
  40a7ec:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a7f2:	mov    DWORD PTR [r15],0x6
  40a7f9:	mov    rax,QWORD PTR [rsp+0x8]
  40a7fe:	mov    eax,DWORD PTR [rax]
  40a800:	mov    ecx,ebx
  40a802:	sub    ecx,eax
  40a804:	inc    ecx
  40a806:	mov    rax,QWORD PTR [rsp+0x10]
  40a80b:	mov    DWORD PTR [rax],ecx
  40a80d:	mov    rax,QWORD PTR [rsp+0x18]
  40a812:	mov    QWORD PTR [rax],rbx
  40a815:	jmp    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a81a:	cmp    QWORD PTR [rsp+0x20],rbx
  40a81f:	je     40a922 <flatcc_json_parser_generic_json@@Base+0x7c2>
  40a825:	movzx  eax,BYTE PTR [rbx+0x1]
  40a829:	inc    rbx
  40a82c:	lea    ecx,[rax-0x30]
  40a82f:	cmp    cl,0xa
  40a832:	jb     40a81a <flatcc_json_parser_generic_json@@Base+0x6ba>
  40a834:	jmp    40a8a9 <flatcc_json_parser_generic_json@@Base+0x749>
  40a836:	cmp    DWORD PTR [r15],0x0
  40a83a:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a840:	mov    DWORD PTR [r15],0x6
  40a847:	mov    rax,QWORD PTR [rsp+0x8]
  40a84c:	mov    eax,DWORD PTR [rax]
  40a84e:	mov    ecx,r12d
  40a851:	sub    ecx,eax
  40a853:	inc    ecx
  40a855:	mov    rax,QWORD PTR [rsp+0x10]
  40a85a:	mov    DWORD PTR [rax],ecx
  40a85c:	mov    rax,QWORD PTR [rsp+0x18]
  40a861:	mov    QWORD PTR [rax],r12
  40a864:	jmp    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a869:	cmp    DWORD PTR [r15],0x0
  40a86d:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a873:	mov    DWORD PTR [r15],0x10
  40a87a:	mov    rax,QWORD PTR [rsp+0x8]
  40a87f:	mov    eax,DWORD PTR [rax]
  40a881:	mov    ecx,r13d
  40a884:	sub    ecx,eax
  40a886:	inc    ecx
  40a888:	mov    rax,QWORD PTR [rsp+0x10]
  40a88d:	mov    DWORD PTR [rax],ecx
  40a88f:	mov    rax,QWORD PTR [rsp+0x18]
  40a894:	mov    QWORD PTR [rax],r13
  40a897:	mov    rax,r12
  40a89a:	cmp    DWORD PTR [r15],0x0
  40a89e:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a8a4:	jmp    40a8fd <flatcc_json_parser_generic_json@@Base+0x79d>
  40a8a6:	mov    rbx,r13
  40a8a9:	mov    rcx,r12
  40a8ac:	cmp    rbx,r12
  40a8af:	je     40a925 <flatcc_json_parser_generic_json@@Base+0x7c5>
  40a8b1:	movsx  eax,al
  40a8b4:	cmp    eax,0x3a
  40a8b7:	ja     40a8cd <flatcc_json_parser_generic_json@@Base+0x76d>
  40a8b9:	movabs rcx,0x400100100002e00
  40a8c3:	bt     rcx,rax
  40a8c7:	jb     40a953 <flatcc_json_parser_generic_json@@Base+0x7f3>
  40a8cd:	cmp    eax,0x5d
  40a8d0:	je     40a953 <flatcc_json_parser_generic_json@@Base+0x7f3>
  40a8d6:	mov    rcx,rbx
  40a8d9:	cmp    eax,0x7d
  40a8dc:	je     40a953 <flatcc_json_parser_generic_json@@Base+0x7f3>
  40a8de:	jmp    40a925 <flatcc_json_parser_generic_json@@Base+0x7c5>
  40a8e0:	cmp    r13,r12
  40a8e3:	je     40a8f4 <flatcc_json_parser_generic_json@@Base+0x794>
  40a8e5:	cmp    BYTE PTR [r13+0x0],0x22
  40a8ea:	jne    40a8f4 <flatcc_json_parser_generic_json@@Base+0x794>
  40a8ec:	inc    r13
  40a8ef:	mov    rbx,r13
  40a8f2:	jmp    40a953 <flatcc_json_parser_generic_json@@Base+0x7f3>
  40a8f4:	mov    rax,r13
  40a8f7:	cmp    DWORD PTR [r15],0x0
  40a8fb:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a8fd:	mov    DWORD PTR [r15],0x14
  40a904:	mov    rcx,QWORD PTR [rsp+0x8]
  40a909:	mov    ecx,DWORD PTR [rcx]
  40a90b:	mov    edx,eax
  40a90d:	sub    edx,ecx
  40a90f:	inc    edx
  40a911:	mov    rcx,QWORD PTR [rsp+0x10]
  40a916:	mov    DWORD PTR [rcx],edx
  40a918:	mov    rcx,QWORD PTR [rsp+0x18]
  40a91d:	mov    QWORD PTR [rcx],rax
  40a920:	jmp    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a922:	mov    rcx,r12
  40a925:	cmp    DWORD PTR [r15],0x0
  40a929:	jne    40a950 <flatcc_json_parser_generic_json@@Base+0x7f0>
  40a92b:	mov    DWORD PTR [r15],0x6
  40a932:	mov    rax,QWORD PTR [rsp+0x8]
  40a937:	mov    eax,DWORD PTR [rax]
  40a939:	mov    edx,ecx
  40a93b:	sub    edx,eax
  40a93d:	inc    edx
  40a93f:	mov    rax,QWORD PTR [rsp+0x10]
  40a944:	mov    DWORD PTR [rax],edx
  40a946:	mov    rax,QWORD PTR [rsp+0x18]
  40a94b:	mov    QWORD PTR [rax],rcx
  40a94e:	xchg   ax,ax
  40a950:	mov    rbx,r12
  40a953:	cmp    rbx,r12
  40a956:	setne  al
  40a959:	test   rbp,rbp
  40a95c:	setne  cl
  40a95f:	jne    40a9a7 <flatcc_json_parser_generic_json@@Base+0x847>
  40a961:	jmp    40ac08 <flatcc_json_parser_generic_json@@Base+0xaa8>
  40a966:	mov    rcx,QWORD PTR [rsp+0x8]
  40a96b:	mov    ecx,DWORD PTR [rcx]
  40a96d:	mov    edx,eax
  40a96f:	sub    edx,ecx
  40a971:	inc    edx
  40a973:	mov    rcx,QWORD PTR [rsp+0x10]
  40a978:	mov    DWORD PTR [rcx],edx
  40a97a:	mov    rcx,QWORD PTR [rsp+0x18]
  40a97f:	mov    QWORD PTR [rcx],rax
  40a982:	mov    rbx,r12
  40a985:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40a98f:	nop
  40a990:	cmp    rbx,r12
  40a993:	setne  al
  40a996:	cmp    rbp,0x1
  40a99a:	lea    rbp,[rbp-0x1]
  40a99e:	setne  cl
  40a9a1:	je     40ac08 <flatcc_json_parser_generic_json@@Base+0xaa8>
  40a9a7:	cmp    rbx,r12
  40a9aa:	je     40ac08 <flatcc_json_parser_generic_json@@Base+0xaa8>
  40a9b0:	mov    rax,r12
  40a9b3:	sub    rax,rbx
  40a9b6:	cmp    BYTE PTR [rsp+rbp*1+0x2f],0x5d
  40a9bb:	jne    40a9d0 <flatcc_json_parser_generic_json@@Base+0x870>
  40a9bd:	cmp    rax,0x2
  40a9c1:	jl     40a9f0 <flatcc_json_parser_generic_json@@Base+0x890>
  40a9c3:	cmp    BYTE PTR [rbx],0x20
  40a9c6:	jle    40a9e0 <flatcc_json_parser_generic_json@@Base+0x880>
  40a9c8:	mov    rax,rbx
  40a9cb:	jmp    40a9fe <flatcc_json_parser_generic_json@@Base+0x89e>
  40a9cd:	nop    DWORD PTR [rax]
  40a9d0:	cmp    rax,0x2
  40a9d4:	jl     40aa40 <flatcc_json_parser_generic_json@@Base+0x8e0>
  40a9d6:	cmp    BYTE PTR [rbx],0x20
  40a9d9:	jle    40aa30 <flatcc_json_parser_generic_json@@Base+0x8d0>
  40a9db:	mov    rax,rbx
  40a9de:	jmp    40aa4e <flatcc_json_parser_generic_json@@Base+0x8ee>
  40a9e0:	jne    40a9f0 <flatcc_json_parser_generic_json@@Base+0x890>
  40a9e2:	cmp    BYTE PTR [rbx+0x1],0x20
  40a9e6:	jle    40a9f0 <flatcc_json_parser_generic_json@@Base+0x890>
  40a9e8:	inc    rbx
  40a9eb:	mov    rax,rbx
  40a9ee:	jmp    40a9fe <flatcc_json_parser_generic_json@@Base+0x89e>
  40a9f0:	mov    rdi,r14
  40a9f3:	mov    rsi,rbx
  40a9f6:	mov    rdx,r12
  40a9f9:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40a9fe:	mov    rbx,r12
  40aa01:	cmp    rax,r12
  40aa04:	je     40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40aa06:	movzx  ecx,BYTE PTR [rax]
  40aa09:	cmp    cl,0x2c
  40aa0c:	je     40aaa1 <flatcc_json_parser_generic_json@@Base+0x941>
  40aa12:	cmp    cl,0x5d
  40aa15:	je     40aa6b <flatcc_json_parser_generic_json@@Base+0x90b>
  40aa17:	cmp    DWORD PTR [r15],0x0
  40aa1b:	mov    rbx,r12
  40aa1e:	jne    40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40aa24:	mov    DWORD PTR [r15],0x9
  40aa2b:	jmp    40a966 <flatcc_json_parser_generic_json@@Base+0x806>
  40aa30:	jne    40aa40 <flatcc_json_parser_generic_json@@Base+0x8e0>
  40aa32:	cmp    BYTE PTR [rbx+0x1],0x20
  40aa36:	jle    40aa40 <flatcc_json_parser_generic_json@@Base+0x8e0>
  40aa38:	inc    rbx
  40aa3b:	mov    rax,rbx
  40aa3e:	jmp    40aa4e <flatcc_json_parser_generic_json@@Base+0x8ee>
  40aa40:	mov    rdi,r14
  40aa43:	mov    rsi,rbx
  40aa46:	mov    rdx,r12
  40aa49:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40aa4e:	mov    rbx,r12
  40aa51:	cmp    rax,r12
  40aa54:	je     40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40aa5a:	movzx  ecx,BYTE PTR [rax]
  40aa5d:	cmp    cl,0x2c
  40aa60:	je     40aac4 <flatcc_json_parser_generic_json@@Base+0x964>
  40aa62:	cmp    cl,0x7d
  40aa65:	jne    40aaeb <flatcc_json_parser_generic_json@@Base+0x98b>
  40aa6b:	lea    rbx,[rax+0x1]
  40aa6f:	mov    rcx,r12
  40aa72:	sub    rcx,rbx
  40aa75:	cmp    rcx,0x2
  40aa79:	jl     40ab90 <flatcc_json_parser_generic_json@@Base+0xa30>
  40aa7f:	cmp    BYTE PTR [rbx],0x20
  40aa82:	jg     40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40aa88:	jne    40ab90 <flatcc_json_parser_generic_json@@Base+0xa30>
  40aa8e:	cmp    BYTE PTR [rax+0x2],0x20
  40aa92:	jle    40ab90 <flatcc_json_parser_generic_json@@Base+0xa30>
  40aa98:	add    rax,0x2
  40aa9c:	jmp    40ab9e <flatcc_json_parser_generic_json@@Base+0xa3e>
  40aaa1:	lea    rsi,[rax+0x1]
  40aaa5:	mov    rcx,r12
  40aaa8:	sub    rcx,rsi
  40aaab:	cmp    rcx,0x2
  40aaaf:	jl     40ab04 <flatcc_json_parser_generic_json@@Base+0x9a4>
  40aab1:	cmp    BYTE PTR [rsi],0x20
  40aab4:	jg     40ab12 <flatcc_json_parser_generic_json@@Base+0x9b2>
  40aab6:	jne    40ab04 <flatcc_json_parser_generic_json@@Base+0x9a4>
  40aab8:	cmp    BYTE PTR [rax+0x2],0x20
  40aabc:	jle    40ab04 <flatcc_json_parser_generic_json@@Base+0x9a4>
  40aabe:	add    rax,0x2
  40aac2:	jmp    40ab0f <flatcc_json_parser_generic_json@@Base+0x9af>
  40aac4:	lea    rsi,[rax+0x1]
  40aac8:	mov    rcx,r12
  40aacb:	sub    rcx,rsi
  40aace:	cmp    rcx,0x2
  40aad2:	jl     40ab51 <flatcc_json_parser_generic_json@@Base+0x9f1>
  40aad4:	cmp    BYTE PTR [rsi],0x20
  40aad7:	jg     40ab5f <flatcc_json_parser_generic_json@@Base+0x9ff>
  40aadd:	jne    40ab51 <flatcc_json_parser_generic_json@@Base+0x9f1>
  40aadf:	cmp    BYTE PTR [rax+0x2],0x20
  40aae3:	jle    40ab51 <flatcc_json_parser_generic_json@@Base+0x9f1>
  40aae5:	add    rax,0x2
  40aae9:	jmp    40ab5c <flatcc_json_parser_generic_json@@Base+0x9fc>
  40aaeb:	cmp    DWORD PTR [r15],0x0
  40aaef:	mov    rbx,r12
  40aaf2:	jne    40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40aaf8:	mov    DWORD PTR [r15],0xa
  40aaff:	jmp    40a966 <flatcc_json_parser_generic_json@@Base+0x806>
  40ab04:	mov    rdi,r14
  40ab07:	mov    rdx,r12
  40ab0a:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40ab0f:	mov    rsi,rax
  40ab12:	cmp    rsi,r12
  40ab15:	je     40aba6 <flatcc_json_parser_generic_json@@Base+0xa46>
  40ab1b:	cmp    BYTE PTR [rsi],0x5d
  40ab1e:	jne    40abf2 <flatcc_json_parser_generic_json@@Base+0xa92>
  40ab24:	lea    rbx,[rsi+0x1]
  40ab28:	mov    rax,r12
  40ab2b:	sub    rax,rbx
  40ab2e:	cmp    rax,0x2
  40ab32:	jl     40ab90 <flatcc_json_parser_generic_json@@Base+0xa30>
  40ab34:	cmp    BYTE PTR [rbx],0x20
  40ab37:	jg     40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40ab3d:	jne    40ab90 <flatcc_json_parser_generic_json@@Base+0xa30>
  40ab3f:	cmp    BYTE PTR [rsi+0x2],0x20
  40ab43:	jle    40ab90 <flatcc_json_parser_generic_json@@Base+0xa30>
  40ab45:	add    rsi,0x2
  40ab49:	mov    rbx,rsi
  40ab4c:	jmp    40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40ab51:	mov    rdi,r14
  40ab54:	mov    rdx,r12
  40ab57:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40ab5c:	mov    rsi,rax
  40ab5f:	cmp    rsi,r12
  40ab62:	je     40abbc <flatcc_json_parser_generic_json@@Base+0xa5c>
  40ab64:	cmp    BYTE PTR [rsi],0x7d
  40ab67:	jne    40abf2 <flatcc_json_parser_generic_json@@Base+0xa92>
  40ab6d:	lea    rbx,[rsi+0x1]
  40ab71:	mov    rax,r12
  40ab74:	sub    rax,rbx
  40ab77:	cmp    rax,0x2
  40ab7b:	jl     40ab90 <flatcc_json_parser_generic_json@@Base+0xa30>
  40ab7d:	cmp    BYTE PTR [rbx],0x20
  40ab80:	jg     40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40ab86:	je     40ab3f <flatcc_json_parser_generic_json@@Base+0x9df>
  40ab88:	nop    DWORD PTR [rax+rax*1+0x0]
  40ab90:	mov    rdi,r14
  40ab93:	mov    rsi,rbx
  40ab96:	mov    rdx,r12
  40ab99:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40ab9e:	mov    rbx,rax
  40aba1:	jmp    40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40aba6:	cmp    DWORD PTR [r15],0x0
  40abaa:	mov    rbx,r12
  40abad:	jne    40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40abb3:	mov    DWORD PTR [r15],0x9
  40abba:	jmp    40abd0 <flatcc_json_parser_generic_json@@Base+0xa70>
  40abbc:	cmp    DWORD PTR [r15],0x0
  40abc0:	mov    rbx,r12
  40abc3:	jne    40a990 <flatcc_json_parser_generic_json@@Base+0x830>
  40abc9:	mov    DWORD PTR [r15],0xa
  40abd0:	mov    rax,QWORD PTR [rsp+0x8]
  40abd5:	mov    eax,DWORD PTR [rax]
  40abd7:	mov    ecx,r12d
  40abda:	sub    ecx,eax
  40abdc:	inc    ecx
  40abde:	mov    rax,QWORD PTR [rsp+0x10]
  40abe3:	mov    DWORD PTR [rax],ecx
  40abe5:	mov    rax,QWORD PTR [rsp+0x18]
  40abea:	mov    QWORD PTR [rax],r12
  40abed:	jmp    40a982 <flatcc_json_parser_generic_json@@Base+0x822>
  40abf2:	mov    rbx,rsi
  40abf5:	lea    rax,[rsp+rbp*1]
  40abf9:	add    rax,0x30
  40abfd:	cmp    rbx,r12
  40ac00:	jne    40a1b2 <flatcc_json_parser_generic_json@@Base+0x52>
  40ac06:	jmp    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40ac08:	test   al,al
  40ac0a:	jne    40ac4a <flatcc_json_parser_generic_json@@Base+0xaea>
  40ac0c:	test   cl,cl
  40ac0e:	je     40ac4a <flatcc_json_parser_generic_json@@Base+0xaea>
  40ac10:	cmp    DWORD PTR [r15],0x0
  40ac14:	jne    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40ac16:	xor    eax,eax
  40ac18:	cmp    BYTE PTR [rsp+rbp*1+0x2f],0x5d
  40ac1d:	sete   al
  40ac20:	mov    ecx,0xa
  40ac25:	sub    ecx,eax
  40ac27:	mov    DWORD PTR [r15],ecx
  40ac2a:	mov    rax,QWORD PTR [rsp+0x8]
  40ac2f:	mov    eax,DWORD PTR [rax]
  40ac31:	mov    ecx,r12d
  40ac34:	sub    ecx,eax
  40ac36:	inc    ecx
  40ac38:	mov    rax,QWORD PTR [rsp+0x10]
  40ac3d:	mov    DWORD PTR [rax],ecx
  40ac3f:	mov    rax,QWORD PTR [rsp+0x18]
  40ac44:	mov    QWORD PTR [rax],r12
  40ac47:	mov    rbx,r12
  40ac4a:	mov    rax,rbx
  40ac4d:	add    rsp,0x238
  40ac54:	pop    rbx
  40ac55:	pop    r12
  40ac57:	pop    r13
  40ac59:	pop    r14
  40ac5b:	pop    r15
  40ac5d:	pop    rbp
  40ac5e:	ret    
  40ac5f:	cmp    DWORD PTR [r15],0x0
  40ac63:	jne    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40ac65:	mov    DWORD PTR [r15],0xa
  40ac6c:	jmp    40ac2a <flatcc_json_parser_generic_json@@Base+0xaca>
  40ac6e:	cmp    DWORD PTR [r15],0x0
  40ac72:	jne    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40ac74:	mov    DWORD PTR [r15],0x4
  40ac7b:	mov    rcx,QWORD PTR [rsp+0x8]
  40ac80:	mov    ecx,DWORD PTR [rcx]
  40ac82:	mov    edx,eax
  40ac84:	sub    edx,ecx
  40ac86:	inc    edx
  40ac88:	mov    rcx,QWORD PTR [rsp+0x10]
  40ac8d:	mov    DWORD PTR [rcx],edx
  40ac8f:	mov    rcx,QWORD PTR [rsp+0x18]
  40ac94:	mov    QWORD PTR [rcx],rax
  40ac97:	jmp    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40ac99:	cmp    DWORD PTR [r15],0x0
  40ac9d:	jne    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40ac9f:	mov    DWORD PTR [r15],0x2
  40aca6:	jmp    40acb5 <flatcc_json_parser_generic_json@@Base+0xb55>
  40aca8:	cmp    DWORD PTR [r15],0x0
  40acac:	jne    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40acae:	mov    DWORD PTR [r15],0x5
  40acb5:	mov    rax,QWORD PTR [rsp+0x8]
  40acba:	mov    eax,DWORD PTR [rax]
  40acbc:	mov    ecx,r13d
  40acbf:	sub    ecx,eax
  40acc1:	inc    ecx
  40acc3:	mov    rax,QWORD PTR [rsp+0x10]
  40acc8:	mov    DWORD PTR [rax],ecx
  40acca:	mov    rax,QWORD PTR [rsp+0x18]
  40accf:	mov    QWORD PTR [rax],r13
  40acd2:	jmp    40ac47 <flatcc_json_parser_generic_json@@Base+0xae7>
  40acd7:	nop    WORD PTR [rax+rax*1+0x0]

000000000040ace0 <flatcc_json_parser_double@@Base>:
  40ace0:	push   r15
  40ace2:	push   r14
  40ace4:	push   r12
  40ace6:	push   rbx
  40ace7:	push   rax
  40ace8:	mov    rbx,rsi
  40aceb:	mov    QWORD PTR [rcx],0x0
  40acf2:	cmp    rsi,rdx
  40acf5:	je     40ad82 <flatcc_json_parser_double@@Base+0xa2>
  40acfb:	mov    r12,rcx
  40acfe:	mov    r14,rdx
  40ad01:	mov    r15,rdi
  40ad04:	lea    rax,[rbx+0x1]
  40ad08:	xor    ecx,ecx
  40ad0a:	cmp    BYTE PTR [rbx],0x2d
  40ad0d:	sete   dl
  40ad10:	cmovne rax,rbx
  40ad14:	mov    rsi,r14
  40ad17:	sub    rsi,rax
  40ad1a:	cmp    rsi,0x2
  40ad1e:	jl     40ad3e <flatcc_json_parser_double@@Base+0x5e>
  40ad20:	mov    cl,dl
  40ad22:	mov    cl,BYTE PTR [rbx+rcx*1]
  40ad25:	cmp    cl,0x2e
  40ad28:	je     40ad35 <flatcc_json_parser_double@@Base+0x55>
  40ad2a:	cmp    cl,0x30
  40ad2d:	jne    40ad3e <flatcc_json_parser_double@@Base+0x5e>
  40ad2f:	cmp    BYTE PTR [rax+0x1],0x30
  40ad33:	jne    40ad3e <flatcc_json_parser_double@@Base+0x5e>
  40ad35:	cmp    DWORD PTR [r15+0x20],0x0
  40ad3a:	jne    40ada5 <flatcc_json_parser_double@@Base+0xc5>
  40ad3c:	jmp    40ad8b <flatcc_json_parser_double@@Base+0xab>
  40ad3e:	mov    esi,r14d
  40ad41:	sub    esi,ebx
  40ad43:	mov    rdi,rbx
  40ad46:	mov    rdx,r12
  40ad49:	call   40adc0 <flatcc_json_parser_double@@Base+0xe0>
  40ad4e:	test   rax,rax
  40ad51:	je     40ad58 <flatcc_json_parser_double@@Base+0x78>
  40ad53:	cmp    rax,rbx
  40ad56:	jne    40ada8 <flatcc_json_parser_double@@Base+0xc8>
  40ad58:	vmovsd xmm0,QWORD PTR [r12]
  40ad5e:	vandps xmm0,xmm0,XMMWORD PTR [rip+0x552a]        # 410290 <flatcc_builder_padding_base@@Base+0x1f30>
  40ad66:	vucomisd xmm0,QWORD PTR [rip+0x5562]        # 4102d0 <flatcc_builder_padding_base@@Base+0x1f70>
  40ad6e:	mov    eax,DWORD PTR [r15+0x20]
  40ad72:	jb     40ad87 <flatcc_json_parser_double@@Base+0xa7>
  40ad74:	test   eax,eax
  40ad76:	jne    40ada5 <flatcc_json_parser_double@@Base+0xc5>
  40ad78:	mov    DWORD PTR [r15+0x20],0x7
  40ad80:	jmp    40ad93 <flatcc_json_parser_double@@Base+0xb3>
  40ad82:	mov    rax,rbx
  40ad85:	jmp    40ada8 <flatcc_json_parser_double@@Base+0xc8>
  40ad87:	test   eax,eax
  40ad89:	jne    40ada5 <flatcc_json_parser_double@@Base+0xc5>
  40ad8b:	mov    DWORD PTR [r15+0x20],0x6
  40ad93:	mov    eax,DWORD PTR [r15+0x8]
  40ad97:	mov    ecx,ebx
  40ad99:	sub    ecx,eax
  40ad9b:	inc    ecx
  40ad9d:	mov    DWORD PTR [r15+0x1c],ecx
  40ada1:	mov    QWORD PTR [r15+0x38],rbx
  40ada5:	mov    rax,r14
  40ada8:	add    rsp,0x8
  40adac:	pop    rbx
  40adad:	pop    r12
  40adaf:	pop    r14
  40adb1:	pop    r15
  40adb3:	ret    
  40adb4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40adbe:	xchg   ax,ax
  40adc0:	push   rbp
  40adc1:	push   r15
  40adc3:	push   r14
  40adc5:	push   r13
  40adc7:	push   r12
  40adc9:	push   rbx
  40adca:	sub    rsp,0x18
  40adce:	mov    r14,rdx
  40add1:	mov    r15,rdi
  40add4:	mov    QWORD PTR [rdx],0x0
  40addb:	cmp    esi,0x3e9
  40ade1:	mov    edx,0x3e8
  40ade6:	cmovl  edx,esi
  40ade9:	movsxd r13,edx
  40adec:	lea    r12,[rdi+r13*1]
  40adf0:	add    r12,0x1
  40adf4:	cmp    r12,rdi
  40adf7:	je     40b205 <flatcc_json_parser_double@@Base+0x525>
  40adfd:	mov    cl,BYTE PTR [r15]
  40ae00:	xor    r11d,r11d
  40ae03:	mov    rax,r15
  40ae06:	cmp    cl,0x2d
  40ae09:	jne    40ae1f <flatcc_json_parser_double@@Base+0x13f>
  40ae0b:	test   edx,edx
  40ae0d:	je     40b202 <flatcc_json_parser_double@@Base+0x522>
  40ae13:	lea    rax,[r15+0x1]
  40ae17:	mov    cl,BYTE PTR [rax]
  40ae19:	mov    r11d,0x1
  40ae1f:	lea    r8,[r15+r13*1]
  40ae23:	cmp    cl,0x30
  40ae26:	jne    40ae49 <flatcc_json_parser_double@@Base+0x169>
  40ae28:	lea    rsi,[rax+0x1]
  40ae2c:	cmp    rax,r8
  40ae2f:	je     40ae94 <flatcc_json_parser_double@@Base+0x1b4>
  40ae31:	mov    al,BYTE PTR [rsi]
  40ae33:	mov    ecx,eax
  40ae35:	or     cl,0x20
  40ae38:	cmp    cl,0x78
  40ae3b:	jne    40ae6c <flatcc_json_parser_double@@Base+0x18c>
  40ae3d:	mov    QWORD PTR [r14],0x0
  40ae44:	jmp    40b205 <flatcc_json_parser_double@@Base+0x525>
  40ae49:	lea    edx,[rcx-0x31]
  40ae4c:	cmp    dl,0x9
  40ae4f:	jb     40ae5f <flatcc_json_parser_double@@Base+0x17f>
  40ae51:	xor    eax,eax
  40ae53:	test   r11d,r11d
  40ae56:	cmovne r15,rax
  40ae5a:	jmp    40b205 <flatcc_json_parser_double@@Base+0x525>
  40ae5f:	movsx  rdi,cl
  40ae63:	inc    rax
  40ae66:	add    rdi,0xffffffffffffffd0
  40ae6a:	jmp    40ae87 <flatcc_json_parser_double@@Base+0x1a7>
  40ae6c:	cmp    al,0x30
  40ae6e:	jne    40ae94 <flatcc_json_parser_double@@Base+0x1b4>
  40ae70:	mov    rax,rsi
  40ae73:	cmp    r8,rsi
  40ae76:	je     40ae82 <flatcc_json_parser_double@@Base+0x1a2>
  40ae78:	lea    rsi,[rax+0x1]
  40ae7c:	cmp    BYTE PTR [rax+0x1],0x30
  40ae80:	je     40ae70 <flatcc_json_parser_double@@Base+0x190>
  40ae82:	inc    rax
  40ae85:	xor    edi,edi
  40ae87:	mov    rsi,rax
  40ae8a:	cmp    rsi,r12
  40ae8d:	jne    40ae9f <flatcc_json_parser_double@@Base+0x1bf>
  40ae8f:	jmp    40b202 <flatcc_json_parser_double@@Base+0x522>
  40ae94:	xor    edi,edi
  40ae96:	cmp    rsi,r12
  40ae99:	je     40b202 <flatcc_json_parser_double@@Base+0x522>
  40ae9f:	movabs r10,0x1999999999999998
  40aea9:	mov    rbx,rsi
  40aeac:	xor    ecx,ecx
  40aeae:	xchg   ax,ax
  40aeb0:	movsx  rax,BYTE PTR [rbx]
  40aeb4:	lea    edx,[rax-0x30]
  40aeb7:	cmp    dl,0x9
  40aeba:	ja     40aed5 <flatcc_json_parser_double@@Base+0x1f5>
  40aebc:	cmp    rdi,r10
  40aebf:	ja     40aedf <flatcc_json_parser_double@@Base+0x1ff>
  40aec1:	lea    rdx,[rdi+rdi*4]
  40aec5:	inc    rbx
  40aec8:	lea    rdi,[rax+rdx*2]
  40aecc:	add    rdi,0xffffffffffffffd0
  40aed0:	cmp    r12,rbx
  40aed3:	jne    40aeb0 <flatcc_json_parser_double@@Base+0x1d0>
  40aed5:	cmp    rbx,r12
  40aed8:	jne    40aef7 <flatcc_json_parser_double@@Base+0x217>
  40aeda:	jmp    40b202 <flatcc_json_parser_double@@Base+0x522>
  40aedf:	xor    ecx,ecx
  40aee1:	cmp    al,0x34
  40aee3:	setg   cl
  40aee6:	add    rdi,rcx
  40aee9:	mov    ecx,0x1
  40aeee:	cmp    rbx,r12
  40aef1:	je     40b202 <flatcc_json_parser_double@@Base+0x522>
  40aef7:	mov    r9d,ebx
  40aefa:	sub    r9d,esi
  40aefd:	mov    rbp,r13
  40af00:	sub    rbp,rbx
  40af03:	lea    rdx,[r15+rbp*1]
  40af07:	add    rdx,0x1
  40af0b:	xor    esi,esi
  40af0d:	nop    DWORD PTR [rax]
  40af10:	movzx  eax,BYTE PTR [rbx+rsi*1]
  40af14:	cmp    al,0x30
  40af16:	jne    40af22 <flatcc_json_parser_double@@Base+0x242>
  40af18:	inc    rsi
  40af1b:	cmp    rdx,rsi
  40af1e:	jne    40af10 <flatcc_json_parser_double@@Base+0x230>
  40af20:	jmp    40af74 <flatcc_json_parser_double@@Base+0x294>
  40af22:	add    al,0xcf
  40af24:	cmp    al,0x9
  40af26:	jae    40af74 <flatcc_json_parser_double@@Base+0x294>
  40af28:	lea    rcx,[rsi+0x1]
  40af2c:	not    rsi
  40af2f:	add    rbp,r15
  40af32:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40af3c:	nop    DWORD PTR [rax+0x0]
  40af40:	mov    rdx,rsi
  40af43:	lea    rax,[rsi+rbp*1]
  40af47:	cmp    rax,0xffffffffffffffff
  40af4b:	je     40af5e <flatcc_json_parser_double@@Base+0x27e>
  40af4d:	movzx  eax,BYTE PTR [rbx+rcx*1]
  40af51:	add    al,0xd0
  40af53:	lea    rsi,[rdx-0x1]
  40af57:	inc    rcx
  40af5a:	cmp    al,0xa
  40af5c:	jb     40af40 <flatcc_json_parser_double@@Base+0x260>
  40af5e:	mov    esi,edx
  40af60:	neg    esi
  40af62:	sub    rbx,rdx
  40af65:	mov    ecx,0x1
  40af6a:	cmp    rbx,r12
  40af6d:	jne    40af80 <flatcc_json_parser_double@@Base+0x2a0>
  40af6f:	jmp    40b202 <flatcc_json_parser_double@@Base+0x522>
  40af74:	add    rbx,rsi
  40af77:	cmp    rbx,r12
  40af7a:	je     40b202 <flatcc_json_parser_double@@Base+0x522>
  40af80:	cmp    BYTE PTR [rbx],0x2e
  40af83:	jne    40affd <flatcc_json_parser_double@@Base+0x31d>
  40af85:	mov    al,BYTE PTR [rbx+0x1]
  40af88:	lea    edx,[rax-0x30]
  40af8b:	cmp    dl,0x9
  40af8e:	ja     40b202 <flatcc_json_parser_double@@Base+0x522>
  40af94:	lea    rdx,[rbx+0x1]
  40af98:	cmp    rbx,r8
  40af9b:	je     40b0b4 <flatcc_json_parser_double@@Base+0x3d4>
  40afa1:	mov    QWORD PTR [rsp+0x8],rdx
  40afa6:	mov    DWORD PTR [rsp+0x4],r11d
  40afab:	sub    r13,rbx
  40afae:	add    r13,r15
  40afb1:	add    r13,0xffffffffffffffff
  40afb5:	xor    r11d,r11d
  40afb8:	mov    rdx,r11
  40afbb:	cmp    rdi,r10
  40afbe:	ja     40b0c4 <flatcc_json_parser_double@@Base+0x3e4>
  40afc4:	lea    rdi,[rdi+rdi*4]
  40afc8:	movsx  rax,al
  40afcc:	lea    rdi,[rax+rdi*2]
  40afd0:	add    rdi,0xffffffffffffffd0
  40afd4:	cmp    r13,rdx
  40afd7:	je     40afeb <flatcc_json_parser_double@@Base+0x30b>
  40afd9:	movzx  eax,BYTE PTR [rbx+rdx*1+0x2]
  40afde:	lea    ebp,[rax-0x30]
  40afe1:	lea    r11,[rdx+0x1]
  40afe5:	cmp    bpl,0xa
  40afe9:	jb     40afb8 <flatcc_json_parser_double@@Base+0x2d8>
  40afeb:	add    rbx,rdx
  40afee:	add    rbx,0x2
  40aff2:	not    edx
  40aff4:	add    edx,esi
  40aff6:	mov    esi,edx
  40aff8:	jmp    40b0e3 <flatcc_json_parser_double@@Base+0x403>
  40affd:	mov    edx,r9d
  40b000:	xor    r9d,r9d
  40b003:	cmp    rbx,r12
  40b006:	je     40b202 <flatcc_json_parser_double@@Base+0x522>
  40b00c:	mov    al,BYTE PTR [rbx]
  40b00e:	or     al,0x20
  40b010:	cmp    al,0x65
  40b012:	jne    40b04f <flatcc_json_parser_double@@Base+0x36f>
  40b014:	mov    rax,r12
  40b017:	sub    rax,rbx
  40b01a:	xor    r9d,r9d
  40b01d:	cmp    rax,0x2
  40b021:	jl     40b202 <flatcc_json_parser_double@@Base+0x522>
  40b027:	mov    al,BYTE PTR [rbx+0x1]
  40b02a:	cmp    al,0x2d
  40b02c:	je     40b19f <flatcc_json_parser_double@@Base+0x4bf>
  40b032:	cmp    al,0x2b
  40b034:	jne    40b1b0 <flatcc_json_parser_double@@Base+0x4d0>
  40b03a:	add    rbx,0x2
  40b03e:	xor    r9d,r9d
  40b041:	cmp    rbx,r12
  40b044:	jne    40b1b3 <flatcc_json_parser_double@@Base+0x4d3>
  40b04a:	jmp    40b202 <flatcc_json_parser_double@@Base+0x522>
  40b04f:	xor    r10d,r10d
  40b052:	cmp    rbx,r12
  40b055:	je     40b202 <flatcc_json_parser_double@@Base+0x522>
  40b05b:	mov    eax,r10d
  40b05e:	neg    eax
  40b060:	test   r9d,r9d
  40b063:	cmove  eax,r10d
  40b067:	vxorpd xmm0,xmm0,xmm0
  40b06b:	test   rdi,rdi
  40b06e:	je     40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b070:	add    esi,edx
  40b072:	add    esi,eax
  40b074:	cmp    esi,0xfffffebc
  40b07a:	jl     40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b07c:	cmp    esi,0x136
  40b082:	jle    40b145 <flatcc_json_parser_double@@Base+0x465>
  40b088:	vmovsd xmm0,QWORD PTR [rip+0x5240]        # 4102d0 <flatcc_builder_padding_base@@Base+0x1f70>
  40b090:	vmovsd QWORD PTR [r14],xmm0
  40b095:	test   r11d,r11d
  40b098:	je     40b0ac <flatcc_json_parser_double@@Base+0x3cc>
  40b09a:	vmovsd xmm0,QWORD PTR [r14]
  40b09f:	vxorpd xmm0,xmm0,XMMWORD PTR [rip+0x5219]        # 4102c0 <flatcc_builder_padding_base@@Base+0x1f60>
  40b0a7:	vmovlpd QWORD PTR [r14],xmm0
  40b0ac:	mov    r15,rbx
  40b0af:	jmp    40b205 <flatcc_json_parser_double@@Base+0x525>
  40b0b4:	mov    rbx,rdx
  40b0b7:	mov    rax,rdx
  40b0ba:	cmp    rbx,r12
  40b0bd:	jne    40b0f6 <flatcc_json_parser_double@@Base+0x416>
  40b0bf:	jmp    40b202 <flatcc_json_parser_double@@Base+0x522>
  40b0c4:	mov    esi,esi
  40b0c6:	sub    rsi,rdx
  40b0c9:	add    rbx,rdx
  40b0cc:	add    rbx,0x1
  40b0d0:	test   ecx,ecx
  40b0d2:	jne    40b0e3 <flatcc_json_parser_double@@Base+0x403>
  40b0d4:	xor    ecx,ecx
  40b0d6:	cmp    al,0x34
  40b0d8:	setg   cl
  40b0db:	add    rdi,rcx
  40b0de:	mov    ecx,0x1
  40b0e3:	mov    r11d,DWORD PTR [rsp+0x4]
  40b0e8:	mov    rax,QWORD PTR [rsp+0x8]
  40b0ed:	cmp    rbx,r12
  40b0f0:	je     40b202 <flatcc_json_parser_double@@Base+0x522>
  40b0f6:	mov    edx,ebx
  40b0f8:	sub    edx,eax
  40b0fa:	add    edx,r9d
  40b0fd:	movzx  eax,BYTE PTR [rbx]
  40b100:	cmp    al,0x30
  40b102:	jne    40b113 <flatcc_json_parser_double@@Base+0x433>
  40b104:	inc    esi
  40b106:	inc    rbx
  40b109:	cmp    r12,rbx
  40b10c:	jne    40b0fd <flatcc_json_parser_double@@Base+0x41d>
  40b10e:	jmp    40b000 <flatcc_json_parser_double@@Base+0x320>
  40b113:	add    al,0xcf
  40b115:	cmp    al,0x8
  40b117:	ja     40b000 <flatcc_json_parser_double@@Base+0x320>
  40b11d:	mov    rax,rbx
  40b120:	cmp    r8,rbx
  40b123:	je     40b135 <flatcc_json_parser_double@@Base+0x455>
  40b125:	lea    rbx,[rax+0x1]
  40b129:	movzx  ecx,BYTE PTR [rax+0x1]
  40b12d:	add    cl,0xd0
  40b130:	cmp    cl,0xa
  40b133:	jb     40b11d <flatcc_json_parser_double@@Base+0x43d>
  40b135:	inc    rax
  40b138:	mov    ecx,0x1
  40b13d:	mov    rbx,rax
  40b140:	jmp    40b000 <flatcc_json_parser_double@@Base+0x320>
  40b145:	mov    rax,rdi
  40b148:	shr    rax,0x35
  40b14c:	jne    40b217 <flatcc_json_parser_double@@Base+0x537>
  40b152:	cmp    esi,0x16
  40b155:	ja     40b217 <flatcc_json_parser_double@@Base+0x537>
  40b15b:	vmovq  xmm0,rdi
  40b160:	vpunpckldq xmm0,xmm0,XMMWORD PTR [rip+0x5138]        # 4102a0 <flatcc_builder_padding_base@@Base+0x1f40>
  40b168:	vsubpd xmm0,xmm0,XMMWORD PTR [rip+0x5140]        # 4102b0 <flatcc_builder_padding_base@@Base+0x1f50>
  40b170:	vhaddpd xmm0,xmm0,xmm0
  40b174:	sub    esi,edx
  40b176:	add    esi,0x16
  40b179:	cmp    esi,0x2c
  40b17c:	ja     40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b182:	lea    rax,[rip+0x4873]        # 40f9fc <flatcc_builder_padding_base@@Base+0x169c>
  40b189:	movsxd rcx,DWORD PTR [rax+rsi*4]
  40b18d:	add    rcx,rax
  40b190:	jmp    rcx
  40b192:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x51e6]        # 410380 <flatcc_builder_padding_base@@Base+0x2020>
  40b19a:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b19f:	add    rbx,0x2
  40b1a3:	mov    r9d,0x1
  40b1a9:	cmp    rbx,r12
  40b1ac:	jne    40b1b3 <flatcc_json_parser_double@@Base+0x4d3>
  40b1ae:	jmp    40b202 <flatcc_json_parser_double@@Base+0x522>
  40b1b0:	inc    rbx
  40b1b3:	movsx  r10d,BYTE PTR [rbx]
  40b1b7:	lea    eax,[r10-0x30]
  40b1bb:	cmp    al,0x9
  40b1bd:	ja     40b202 <flatcc_json_parser_double@@Base+0x522>
  40b1bf:	add    r10d,0xffffffd0
  40b1c3:	cmp    rbx,r8
  40b1c6:	jne    40b1d2 <flatcc_json_parser_double@@Base+0x4f2>
  40b1c8:	jmp    40b1f6 <flatcc_json_parser_double@@Base+0x516>
  40b1ca:	inc    rbx
  40b1cd:	cmp    r8,rbx
  40b1d0:	je     40b1f6 <flatcc_json_parser_double@@Base+0x516>
  40b1d2:	movsx  eax,BYTE PTR [rbx+0x1]
  40b1d6:	lea    ebp,[rax-0x30]
  40b1d9:	cmp    bpl,0x9
  40b1dd:	ja     40b1f6 <flatcc_json_parser_double@@Base+0x516>
  40b1df:	cmp    r10d,0x7fff
  40b1e6:	jg     40b1ca <flatcc_json_parser_double@@Base+0x4ea>
  40b1e8:	lea    ebp,[r10+r10*4]
  40b1ec:	lea    r10d,[rax+rbp*2]
  40b1f0:	add    r10d,0xffffffd0
  40b1f4:	jmp    40b1ca <flatcc_json_parser_double@@Base+0x4ea>
  40b1f6:	inc    rbx
  40b1f9:	cmp    rbx,r12
  40b1fc:	jne    40b05b <flatcc_json_parser_double@@Base+0x37b>
  40b202:	xor    r15d,r15d
  40b205:	mov    rax,r15
  40b208:	add    rsp,0x18
  40b20c:	pop    rbx
  40b20d:	pop    r12
  40b20f:	pop    r13
  40b211:	pop    r14
  40b213:	pop    r15
  40b215:	pop    rbp
  40b216:	ret    
  40b217:	mov    r8,r14
  40b21a:	mov    ebp,r11d
  40b21d:	call   4095b0 <grisu3_diy_fp_encode_double@@Base>
  40b222:	mov    r11d,ebp
  40b225:	test   eax,eax
  40b227:	jne    40b095 <flatcc_json_parser_double@@Base+0x3b5>
  40b22d:	lea    rsi,[rsp+0x10]
  40b232:	mov    rdi,r15
  40b235:	call   403040 <strtod@plt>
  40b23a:	vmovsd QWORD PTR [r14],xmm0
  40b23f:	mov    rax,QWORD PTR [rsp+0x10]
  40b244:	cmp    rax,rbx
  40b247:	cmovb  rbx,rax
  40b24b:	jmp    40b0ac <flatcc_json_parser_double@@Base+0x3cc>
  40b250:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5080]        # 4102d8 <flatcc_builder_padding_base@@Base+0x1f78>
  40b258:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b25d:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x507b]        # 4102e0 <flatcc_builder_padding_base@@Base+0x1f80>
  40b265:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b26a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5076]        # 4102e8 <flatcc_builder_padding_base@@Base+0x1f88>
  40b272:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b277:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5071]        # 4102f0 <flatcc_builder_padding_base@@Base+0x1f90>
  40b27f:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b284:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x506c]        # 4102f8 <flatcc_builder_padding_base@@Base+0x1f98>
  40b28c:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b291:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5067]        # 410300 <flatcc_builder_padding_base@@Base+0x1fa0>
  40b299:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b29e:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5062]        # 410308 <flatcc_builder_padding_base@@Base+0x1fa8>
  40b2a6:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b2ab:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x505d]        # 410310 <flatcc_builder_padding_base@@Base+0x1fb0>
  40b2b3:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b2b8:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5058]        # 410318 <flatcc_builder_padding_base@@Base+0x1fb8>
  40b2c0:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b2c5:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5053]        # 410320 <flatcc_builder_padding_base@@Base+0x1fc0>
  40b2cd:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b2d2:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x504e]        # 410328 <flatcc_builder_padding_base@@Base+0x1fc8>
  40b2da:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b2df:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5049]        # 410330 <flatcc_builder_padding_base@@Base+0x1fd0>
  40b2e7:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b2ec:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5044]        # 410338 <flatcc_builder_padding_base@@Base+0x1fd8>
  40b2f4:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b2f9:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x503f]        # 410340 <flatcc_builder_padding_base@@Base+0x1fe0>
  40b301:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b306:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x503a]        # 410348 <flatcc_builder_padding_base@@Base+0x1fe8>
  40b30e:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b313:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5035]        # 410350 <flatcc_builder_padding_base@@Base+0x1ff0>
  40b31b:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b320:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5030]        # 410358 <flatcc_builder_padding_base@@Base+0x1ff8>
  40b328:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b32d:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x502b]        # 410360 <flatcc_builder_padding_base@@Base+0x2000>
  40b335:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b33a:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5026]        # 410368 <flatcc_builder_padding_base@@Base+0x2008>
  40b342:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b347:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x5021]        # 410370 <flatcc_builder_padding_base@@Base+0x2010>
  40b34f:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b354:	vdivsd xmm0,xmm0,QWORD PTR [rip+0x501c]        # 410378 <flatcc_builder_padding_base@@Base+0x2018>
  40b35c:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b361:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x500f]        # 410378 <flatcc_builder_padding_base@@Base+0x2018>
  40b369:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b36e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4ffa]        # 410370 <flatcc_builder_padding_base@@Base+0x2010>
  40b376:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b37b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4fe5]        # 410368 <flatcc_builder_padding_base@@Base+0x2008>
  40b383:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b388:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4fd0]        # 410360 <flatcc_builder_padding_base@@Base+0x2000>
  40b390:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b395:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4fbb]        # 410358 <flatcc_builder_padding_base@@Base+0x1ff8>
  40b39d:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3a2:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4fa6]        # 410350 <flatcc_builder_padding_base@@Base+0x1ff0>
  40b3aa:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3af:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f91]        # 410348 <flatcc_builder_padding_base@@Base+0x1fe8>
  40b3b7:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3bc:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f7c]        # 410340 <flatcc_builder_padding_base@@Base+0x1fe0>
  40b3c4:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3c9:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f67]        # 410338 <flatcc_builder_padding_base@@Base+0x1fd8>
  40b3d1:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3d6:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f52]        # 410330 <flatcc_builder_padding_base@@Base+0x1fd0>
  40b3de:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3e3:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f3d]        # 410328 <flatcc_builder_padding_base@@Base+0x1fc8>
  40b3eb:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3f0:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f28]        # 410320 <flatcc_builder_padding_base@@Base+0x1fc0>
  40b3f8:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b3fd:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f13]        # 410318 <flatcc_builder_padding_base@@Base+0x1fb8>
  40b405:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b40a:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4efe]        # 410310 <flatcc_builder_padding_base@@Base+0x1fb0>
  40b412:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b417:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4ee9]        # 410308 <flatcc_builder_padding_base@@Base+0x1fa8>
  40b41f:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b424:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4ed4]        # 410300 <flatcc_builder_padding_base@@Base+0x1fa0>
  40b42c:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b431:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4ebf]        # 4102f8 <flatcc_builder_padding_base@@Base+0x1f98>
  40b439:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b43e:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4eaa]        # 4102f0 <flatcc_builder_padding_base@@Base+0x1f90>
  40b446:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b44b:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4e95]        # 4102e8 <flatcc_builder_padding_base@@Base+0x1f88>
  40b453:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b458:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4e80]        # 4102e0 <flatcc_builder_padding_base@@Base+0x1f80>
  40b460:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b465:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4e6b]        # 4102d8 <flatcc_builder_padding_base@@Base+0x1f78>
  40b46d:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b472:	vmulsd xmm0,xmm0,QWORD PTR [rip+0x4f06]        # 410380 <flatcc_builder_padding_base@@Base+0x2020>
  40b47a:	jmp    40b090 <flatcc_json_parser_double@@Base+0x3b0>
  40b47f:	nop

000000000040b480 <flatcc_json_parser_float@@Base>:
  40b480:	push   r15
  40b482:	push   r14
  40b484:	push   r12
  40b486:	push   rbx
  40b487:	push   rax
  40b488:	mov    rbx,rsi
  40b48b:	mov    DWORD PTR [rcx],0x0
  40b491:	cmp    rsi,rdx
  40b494:	je     40b528 <flatcc_json_parser_float@@Base+0xa8>
  40b49a:	mov    r12,rcx
  40b49d:	mov    r14,rdx
  40b4a0:	mov    r15,rdi
  40b4a3:	lea    rax,[rbx+0x1]
  40b4a7:	xor    ecx,ecx
  40b4a9:	cmp    BYTE PTR [rbx],0x2d
  40b4ac:	sete   dl
  40b4af:	cmovne rax,rbx
  40b4b3:	mov    rsi,r14
  40b4b6:	sub    rsi,rax
  40b4b9:	cmp    rsi,0x2
  40b4bd:	jl     40b4e4 <flatcc_json_parser_float@@Base+0x64>
  40b4bf:	mov    cl,dl
  40b4c1:	mov    cl,BYTE PTR [rbx+rcx*1]
  40b4c4:	cmp    cl,0x2e
  40b4c7:	je     40b4d4 <flatcc_json_parser_float@@Base+0x54>
  40b4c9:	cmp    cl,0x30
  40b4cc:	jne    40b4e4 <flatcc_json_parser_float@@Base+0x64>
  40b4ce:	cmp    BYTE PTR [rax+0x1],0x30
  40b4d2:	jne    40b4e4 <flatcc_json_parser_float@@Base+0x64>
  40b4d4:	cmp    DWORD PTR [r15+0x20],0x0
  40b4d9:	jne    40b591 <flatcc_json_parser_float@@Base+0x111>
  40b4df:	jmp    40b577 <flatcc_json_parser_float@@Base+0xf7>
  40b4e4:	mov    esi,r14d
  40b4e7:	sub    esi,ebx
  40b4e9:	mov    rdx,rsp
  40b4ec:	mov    rdi,rbx
  40b4ef:	call   40adc0 <flatcc_json_parser_double@@Base+0xe0>
  40b4f4:	vmovsd xmm1,QWORD PTR [rsp]
  40b4f9:	vcvtsd2ss xmm2,xmm1,xmm1
  40b4fd:	vbroadcastss xmm0,DWORD PTR [rip+0x4e82]        # 410388 <flatcc_builder_padding_base@@Base+0x2028>
  40b506:	vandps xmm3,xmm2,xmm0
  40b50a:	vxorps xmm4,xmm4,xmm4
  40b50e:	vucomisd xmm4,xmm1
  40b512:	vmovss xmm4,DWORD PTR [rip+0x4e76]        # 410390 <flatcc_builder_padding_base@@Base+0x2030>
  40b51a:	ja     40b52d <flatcc_json_parser_float@@Base+0xad>
  40b51c:	vmovaps xmm1,xmm4
  40b520:	vucomiss xmm3,xmm4
  40b524:	jb     40b53b <flatcc_json_parser_float@@Base+0xbb>
  40b526:	jmp    40b53f <flatcc_json_parser_float@@Base+0xbf>
  40b528:	mov    rax,rbx
  40b52b:	jmp    40b594 <flatcc_json_parser_float@@Base+0x114>
  40b52d:	vmovss xmm1,DWORD PTR [rip+0x4e57]        # 41038c <flatcc_builder_padding_base@@Base+0x202c>
  40b535:	vucomiss xmm3,xmm4
  40b539:	jae    40b53f <flatcc_json_parser_float@@Base+0xbf>
  40b53b:	vmovaps xmm1,xmm2
  40b53f:	cmovae rax,rbx
  40b543:	vmovss DWORD PTR [r12],xmm1
  40b549:	test   rax,rax
  40b54c:	je     40b553 <flatcc_json_parser_float@@Base+0xd3>
  40b54e:	cmp    rax,rbx
  40b551:	jne    40b594 <flatcc_json_parser_float@@Base+0x114>
  40b553:	vandps xmm0,xmm1,xmm0
  40b557:	vucomiss xmm0,DWORD PTR [rip+0x4e31]        # 410390 <flatcc_builder_padding_base@@Base+0x2030>
  40b55f:	mov    eax,DWORD PTR [r15+0x20]
  40b563:	jb     40b573 <flatcc_json_parser_float@@Base+0xf3>
  40b565:	test   eax,eax
  40b567:	jne    40b591 <flatcc_json_parser_float@@Base+0x111>
  40b569:	mov    DWORD PTR [r15+0x20],0x7
  40b571:	jmp    40b57f <flatcc_json_parser_float@@Base+0xff>
  40b573:	test   eax,eax
  40b575:	jne    40b591 <flatcc_json_parser_float@@Base+0x111>
  40b577:	mov    DWORD PTR [r15+0x20],0x6
  40b57f:	mov    eax,DWORD PTR [r15+0x8]
  40b583:	mov    ecx,ebx
  40b585:	sub    ecx,eax
  40b587:	inc    ecx
  40b589:	mov    DWORD PTR [r15+0x1c],ecx
  40b58d:	mov    QWORD PTR [r15+0x38],rbx
  40b591:	mov    rax,r14
  40b594:	add    rsp,0x8
  40b598:	pop    rbx
  40b599:	pop    r12
  40b59b:	pop    r14
  40b59d:	pop    r15
  40b59f:	ret    

000000000040b5a0 <flatcc_json_parser_integer@@Base>:
  40b5a0:	mov    rax,rsi
  40b5a3:	cmp    rsi,rdx
  40b5a6:	je     40b63b <flatcc_json_parser_integer@@Base+0x9b>
  40b5ac:	xor    r10d,r10d
  40b5af:	cmp    BYTE PTR [rax],0x2d
  40b5b2:	sete   r10b
  40b5b6:	mov    DWORD PTR [rcx],r10d
  40b5b9:	add    r10,rax
  40b5bc:	xor    r9d,r9d
  40b5bf:	cmp    r10,rdx
  40b5c2:	je     40b631 <flatcc_json_parser_integer@@Base+0x91>
  40b5c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b5ce:	xchg   ax,ax
  40b5d0:	movsx  r11,BYTE PTR [r10]
  40b5d4:	lea    esi,[r11-0x30]
  40b5d8:	cmp    sil,0x9
  40b5dc:	ja     40b643 <flatcc_json_parser_integer@@Base+0xa3>
  40b5de:	lea    rsi,[r9+r9*4]
  40b5e2:	lea    rsi,[r11+rsi*2]
  40b5e6:	add    rsi,0xffffffffffffffd0
  40b5ea:	cmp    r9,rsi
  40b5ed:	ja     40b64c <flatcc_json_parser_integer@@Base+0xac>
  40b5ef:	inc    r10
  40b5f2:	mov    r9,rsi
  40b5f5:	cmp    rdx,r10
  40b5f8:	jne    40b5d0 <flatcc_json_parser_integer@@Base+0x30>
  40b5fa:	xor    ecx,ecx
  40b5fc:	mov    r10,rdx
  40b5ff:	mov    r9,rsi
  40b602:	cmp    r10,rax
  40b605:	je     40b63b <flatcc_json_parser_integer@@Base+0x9b>
  40b607:	test   cl,cl
  40b609:	je     40b63c <flatcc_json_parser_integer@@Base+0x9c>
  40b60b:	mov    al,BYTE PTR [r10]
  40b60e:	add    al,0xd2
  40b610:	cmp    al,0x37
  40b612:	ja     40b63c <flatcc_json_parser_integer@@Base+0x9c>
  40b614:	movzx  eax,al
  40b617:	movabs rcx,0x80000000800001
  40b621:	bt     rcx,rax
  40b625:	jae    40b63c <flatcc_json_parser_integer@@Base+0x9c>
  40b627:	cmp    DWORD PTR [rdi+0x20],0x0
  40b62b:	je     40b656 <flatcc_json_parser_integer@@Base+0xb6>
  40b62d:	mov    rax,rdx
  40b630:	ret    
  40b631:	mov    r10,rdx
  40b634:	xor    ecx,ecx
  40b636:	cmp    r10,rax
  40b639:	jne    40b607 <flatcc_json_parser_integer@@Base+0x67>
  40b63b:	ret    
  40b63c:	mov    QWORD PTR [r8],r9
  40b63f:	mov    rax,r10
  40b642:	ret    
  40b643:	mov    cl,0x1
  40b645:	cmp    r10,rax
  40b648:	jne    40b607 <flatcc_json_parser_integer@@Base+0x67>
  40b64a:	jmp    40b63b <flatcc_json_parser_integer@@Base+0x9b>
  40b64c:	cmp    DWORD PTR [rdi+0x20],0x0
  40b650:	je     40b65f <flatcc_json_parser_integer@@Base+0xbf>
  40b652:	mov    rax,rdx
  40b655:	ret    
  40b656:	mov    DWORD PTR [rdi+0x20],0xc
  40b65d:	jmp    40b66e <flatcc_json_parser_integer@@Base+0xce>
  40b65f:	cmp    rcx,0x1
  40b663:	mov    eax,0x8
  40b668:	sbb    eax,0x0
  40b66b:	mov    DWORD PTR [rdi+0x20],eax
  40b66e:	mov    eax,DWORD PTR [rdi+0x8]
  40b671:	mov    ecx,r10d
  40b674:	sub    ecx,eax
  40b676:	inc    ecx
  40b678:	mov    DWORD PTR [rdi+0x1c],ecx
  40b67b:	mov    QWORD PTR [rdi+0x38],r10
  40b67f:	mov    rax,rdx
  40b682:	ret    
  40b683:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b68d:	nop    DWORD PTR [rax]

000000000040b690 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
  40b690:	push   rbp
  40b691:	push   r15
  40b693:	push   r14
  40b695:	push   r13
  40b697:	push   r12
  40b699:	push   rbx
  40b69a:	sub    rsp,0x28
  40b69e:	mov    r12d,r8d
  40b6a1:	mov    r15,rcx
  40b6a4:	mov    r14,rdx
  40b6a7:	mov    r13,rsi
  40b6aa:	mov    rbx,rdi
  40b6ad:	cmp    rsi,rdx
  40b6b0:	je     40b6f9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x69>
  40b6b2:	cmp    BYTE PTR [r13+0x0],0x22
  40b6b7:	jne    40b6f9 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x69>
  40b6b9:	inc    r13
  40b6bc:	cmp    r13,r14
  40b6bf:	je     40b717 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x87>
  40b6c1:	mov    rbp,r13
  40b6c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40b6ce:	xchg   ax,ax
  40b6d0:	movzx  ecx,BYTE PTR [rbp+0x0]
  40b6d4:	cmp    cl,0x20
  40b6d7:	jb     40b779 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe9>
  40b6dd:	cmp    cl,0x22
  40b6e0:	je     40b79b <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10b>
  40b6e6:	cmp    cl,0x5c
  40b6e9:	je     40b79b <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10b>
  40b6ef:	inc    rbp
  40b6f2:	cmp    r14,rbp
  40b6f5:	jne    40b6d0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
  40b6f7:	jmp    40b717 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x87>
  40b6f9:	cmp    DWORD PTR [rbx+0x20],0x0
  40b6fd:	jne    40b717 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x87>
  40b6ff:	mov    DWORD PTR [rbx+0x20],0x10
  40b706:	mov    eax,DWORD PTR [rbx+0x8]
  40b709:	mov    ecx,r13d
  40b70c:	sub    ecx,eax
  40b70e:	inc    ecx
  40b710:	mov    DWORD PTR [rbx+0x1c],ecx
  40b713:	mov    QWORD PTR [rbx+0x38],r13
  40b717:	cmp    DWORD PTR [rbx+0x20],0x0
  40b71b:	mov    rax,r14
  40b71e:	jne    40b73b <flatcc_json_parser_build_uint8_vector_base64@@Base+0xab>
  40b720:	mov    DWORD PTR [rbx+0x20],0x14
  40b727:	mov    eax,DWORD PTR [rbx+0x8]
  40b72a:	mov    ecx,r14d
  40b72d:	sub    ecx,eax
  40b72f:	inc    ecx
  40b731:	mov    DWORD PTR [rbx+0x1c],ecx
  40b734:	mov    QWORD PTR [rbx+0x38],r14
  40b738:	mov    rax,r14
  40b73b:	mov    DWORD PTR [r15],0x0
  40b742:	cmp    DWORD PTR [rbx+0x20],0x0
  40b746:	jne    40b767 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd7>
  40b748:	cmp    r12d,0x1
  40b74c:	mov    ecx,0x1f
  40b751:	sbb    ecx,0xffffffff
  40b754:	mov    DWORD PTR [rbx+0x20],ecx
  40b757:	mov    ecx,DWORD PTR [rbx+0x8]
  40b75a:	mov    edx,eax
  40b75c:	sub    edx,ecx
  40b75e:	inc    edx
  40b760:	mov    DWORD PTR [rbx+0x1c],edx
  40b763:	mov    QWORD PTR [rbx+0x38],rax
  40b767:	mov    rax,r14
  40b76a:	add    rsp,0x28
  40b76e:	pop    rbx
  40b76f:	pop    r12
  40b771:	pop    r13
  40b773:	pop    r14
  40b775:	pop    r15
  40b777:	pop    rbp
  40b778:	ret    
  40b779:	cmp    DWORD PTR [rbx+0x20],0x0
  40b77d:	mov    rax,r14
  40b780:	jne    40b73b <flatcc_json_parser_build_uint8_vector_base64@@Base+0xab>
  40b782:	mov    DWORD PTR [rbx+0x20],0x11
  40b789:	mov    eax,DWORD PTR [rbx+0x8]
  40b78c:	mov    ecx,ebp
  40b78e:	sub    ecx,eax
  40b790:	inc    ecx
  40b792:	mov    DWORD PTR [rbx+0x1c],ecx
  40b795:	mov    QWORD PTR [rbx+0x38],rbp
  40b799:	jmp    40b738 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa8>
  40b79b:	mov    rax,r14
  40b79e:	cmp    r14,rbp
  40b7a1:	je     40b73b <flatcc_json_parser_build_uint8_vector_base64@@Base+0xab>
  40b7a3:	cmp    cl,0x22
  40b7a6:	jne    40b7d2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x142>
  40b7a8:	mov    rcx,rbp
  40b7ab:	sub    rcx,r13
  40b7ae:	mov    eax,ecx
  40b7b0:	and    eax,0x3
  40b7b3:	mov    QWORD PTR [rsp+0x18],rcx
  40b7b8:	shr    rcx,0x2
  40b7bc:	lea    rcx,[rcx+rcx*2]
  40b7c0:	cmp    rax,0x2
  40b7c4:	je     40b7da <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14a>
  40b7c6:	cmp    rax,0x3
  40b7ca:	jne    40b7dd <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14d>
  40b7cc:	add    rcx,0x2
  40b7d0:	jmp    40b7dd <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14d>
  40b7d2:	mov    rax,rbp
  40b7d5:	jmp    40b73b <flatcc_json_parser_build_uint8_vector_base64@@Base+0xab>
  40b7da:	inc    rcx
  40b7dd:	mov    QWORD PTR [rsp+0x8],rcx
  40b7e2:	mov    rdi,QWORD PTR [rbx]
  40b7e5:	mov    esi,0x1
  40b7ea:	mov    ecx,0xffffffff
  40b7ef:	mov    edx,0x1
  40b7f4:	call   406200 <flatcc_builder_start_vector@@Base>
  40b7f9:	test   eax,eax
  40b7fb:	je     40b82a <flatcc_json_parser_build_uint8_vector_base64@@Base+0x19a>
  40b7fd:	mov    DWORD PTR [r15],0x0
  40b804:	cmp    DWORD PTR [rbx+0x20],0x0
  40b808:	jne    40b767 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd7>
  40b80e:	mov    DWORD PTR [rbx+0x20],0x21
  40b815:	mov    eax,DWORD PTR [rbx+0x8]
  40b818:	mov    ecx,ebp
  40b81a:	sub    ecx,eax
  40b81c:	inc    ecx
  40b81e:	mov    DWORD PTR [rbx+0x1c],ecx
  40b821:	mov    QWORD PTR [rbx+0x38],rbp
  40b825:	jmp    40b767 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd7>
  40b82a:	mov    rdi,QWORD PTR [rbx]
  40b82d:	mov    rsi,QWORD PTR [rsp+0x8]
  40b832:	call   4058b0 <flatcc_builder_extend_vector@@Base>
  40b837:	test   rax,rax
  40b83a:	je     40b7fd <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16d>
  40b83c:	test   r12d,r12d
  40b83f:	lea    rcx,[rip+0x494a]        # 410190 <flatcc_builder_padding_base@@Base+0x1e30>
  40b846:	lea    r11,[rip+0x4843]        # 410090 <flatcc_builder_padding_base@@Base+0x1d30>
  40b84d:	cmovne r11,rcx
  40b851:	xor    r10d,r10d
  40b854:	mov    rcx,QWORD PTR [rsp+0x8]
  40b859:	cmp    rcx,0x1
  40b85d:	sbb    r10,r10
  40b860:	or     r10,rcx
  40b863:	mov    QWORD PTR [rsp+0x20],rax
  40b868:	mov    r9,rax
  40b86b:	mov    rsi,QWORD PTR [rsp+0x18]
  40b870:	mov    r8,r13
  40b873:	mov    rdi,rsi
  40b876:	xor    edx,edx
  40b878:	cmp    rdi,rdx
  40b87b:	jne    40b894 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
  40b87d:	jmp    40b917 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x287>
  40b882:	inc    rdx
  40b885:	cmp    rdx,0x4
  40b889:	jae    40b8bb <flatcc_json_parser_build_uint8_vector_base64@@Base+0x22b>
  40b88b:	cmp    rdi,rdx
  40b88e:	je     40b917 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x287>
  40b894:	movzx  ecx,BYTE PTR [r8+rdx*1]
  40b899:	movzx  ecx,BYTE PTR [r11+rcx*1]
  40b89e:	mov    BYTE PTR [rsp+rdx*1+0x4],cl
  40b8a2:	cmp    cl,0x40
  40b8a5:	jb     40b882 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f2>
  40b8a7:	cmp    cl,0x41
  40b8aa:	jne    40b96c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2dc>
  40b8b0:	inc    r8
  40b8b3:	dec    rdi
  40b8b6:	dec    rdx
  40b8b9:	jmp    40b882 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f2>
  40b8bb:	cmp    r10,0x3
  40b8bf:	jb     40b9ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35e>
  40b8c5:	mov    al,BYTE PTR [rsp+0x4]
  40b8c9:	mov    cl,BYTE PTR [rsp+0x5]
  40b8cd:	shl    al,0x2
  40b8d0:	mov    edx,ecx
  40b8d2:	shr    dl,0x4
  40b8d5:	or     dl,al
  40b8d7:	mov    BYTE PTR [r9],dl
  40b8da:	shl    cl,0x4
  40b8dd:	mov    al,BYTE PTR [rsp+0x6]
  40b8e1:	shr    al,0x2
  40b8e4:	or     al,cl
  40b8e6:	mov    BYTE PTR [r9+0x1],al
  40b8ea:	mov    al,BYTE PTR [rsp+0x6]
  40b8ee:	shl    al,0x6
  40b8f1:	or     al,BYTE PTR [rsp+0x7]
  40b8f5:	mov    BYTE PTR [r9+0x2],al
  40b8f9:	add    r9,0x3
  40b8fd:	add    r8,0x4
  40b901:	add    rdi,0xfffffffffffffffc
  40b905:	mov    rsi,rdi
  40b908:	add    r10,0xfffffffffffffffd
  40b90c:	jne    40b876 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e6>
  40b912:	jmp    40b9df <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34f>
  40b917:	mov    QWORD PTR [rsp+0x10],rsi
  40b91c:	mov    rdx,rdi
  40b91f:	mov    rsi,rdi
  40b922:	sub    rdi,rsi
  40b925:	test   rdx,rdx
  40b928:	je     40b9df <flatcc_json_parser_build_uint8_vector_base64@@Base+0x34f>
  40b92e:	cmp    rdx,0x3
  40b932:	je     40b9a2 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x312>
  40b934:	cmp    rdx,0x2
  40b938:	mov    rsi,QWORD PTR [rsp+0x10]
  40b93d:	jne    40b9ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35e>
  40b943:	mov    cl,BYTE PTR [rsp+0x5]
  40b947:	test   cl,0xf
  40b94a:	jne    40b9ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35e>
  40b950:	mov    al,BYTE PTR [rsp+0x4]
  40b954:	shl    al,0x2
  40b957:	shr    cl,0x4
  40b95a:	or     cl,al
  40b95c:	mov    BYTE PTR [r9],cl
  40b95f:	inc    r9
  40b962:	test   rdi,rdi
  40b965:	jne    40b9e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x354>
  40b967:	jmp    40ba01 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x371>
  40b96c:	mov    QWORD PTR [rsp+0x10],rsi
  40b971:	cmp    cl,0x42
  40b974:	jne    40ba46 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3b6>
  40b97a:	lea    rcx,[rdx+0x1]
  40b97e:	mov    rsi,rcx
  40b981:	cmp    rcx,rdi
  40b984:	jae    40b922 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x292>
  40b986:	cmp    rsi,0x7
  40b98a:	ja     40b922 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x292>
  40b98c:	movzx  ecx,BYTE PTR [r8+rsi*1]
  40b991:	movzx  eax,BYTE PTR [r11+rcx*1]
  40b996:	add    al,0xbf
  40b998:	lea    rcx,[rsi+0x1]
  40b99c:	cmp    al,0x2
  40b99e:	jb     40b97e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2ee>
  40b9a0:	jmp    40b922 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x292>
  40b9a2:	cmp    r10,0x2
  40b9a6:	mov    rsi,QWORD PTR [rsp+0x10]
  40b9ab:	jb     40b9ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35e>
  40b9ad:	mov    cl,BYTE PTR [rsp+0x6]
  40b9b1:	mov    eax,ecx
  40b9b3:	and    al,0x3
  40b9b5:	jne    40b9ee <flatcc_json_parser_build_uint8_vector_base64@@Base+0x35e>
  40b9b7:	mov    sil,BYTE PTR [rsp+0x4]
  40b9bc:	mov    al,BYTE PTR [rsp+0x5]
  40b9c0:	shl    sil,0x2
  40b9c4:	mov    edx,eax
  40b9c6:	shr    dl,0x4
  40b9c9:	or     dl,sil
  40b9cc:	mov    BYTE PTR [r9],dl
  40b9cf:	shl    al,0x4
  40b9d2:	shr    cl,0x2
  40b9d5:	or     cl,al
  40b9d7:	mov    BYTE PTR [r9+0x1],cl
  40b9db:	add    r9,0x2
  40b9df:	test   rdi,rdi
  40b9e2:	je     40ba01 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x371>
  40b9e4:	mov    rax,QWORD PTR [rsp+0x18]
  40b9e9:	sub    rax,rdi
  40b9ec:	jmp    40b9f6 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x366>
  40b9ee:	mov    rax,QWORD PTR [rsp+0x18]
  40b9f3:	sub    rax,rsi
  40b9f6:	add    r13,rax
  40b9f9:	mov    rax,r13
  40b9fc:	jmp    40b73b <flatcc_json_parser_build_uint8_vector_base64@@Base+0xab>
  40ba01:	sub    r9,QWORD PTR [rsp+0x20]
  40ba06:	sub    QWORD PTR [rsp+0x8],r9
  40ba0b:	jbe    40ba22 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x392>
  40ba0d:	mov    rdi,QWORD PTR [rbx]
  40ba10:	mov    rsi,QWORD PTR [rsp+0x8]
  40ba15:	call   406080 <flatcc_builder_truncate_vector@@Base>
  40ba1a:	test   eax,eax
  40ba1c:	jne    40b7fd <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16d>
  40ba22:	mov    rdi,QWORD PTR [rbx]
  40ba25:	call   407390 <flatcc_builder_end_vector@@Base>
  40ba2a:	mov    DWORD PTR [r15],eax
  40ba2d:	test   eax,eax
  40ba2f:	je     40b7fd <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16d>
  40ba35:	cmp    BYTE PTR [rbp+0x0],0x22
  40ba39:	jne    40ba4e <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3be>
  40ba3b:	inc    rbp
  40ba3e:	mov    r14,rbp
  40ba41:	jmp    40b767 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd7>
  40ba46:	mov    rsi,rdx
  40ba49:	jmp    40b922 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x292>
  40ba4e:	cmp    DWORD PTR [rbx+0x20],0x0
  40ba52:	jne    40b767 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd7>
  40ba58:	mov    DWORD PTR [rbx+0x20],0x14
  40ba5f:	jmp    40b815 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x185>
  40ba64:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ba6e:	xchg   ax,ax

000000000040ba70 <flatcc_json_parser_build_string@@Base>:
  40ba70:	push   rbp
  40ba71:	push   r15
  40ba73:	push   r14
  40ba75:	push   r13
  40ba77:	push   r12
  40ba79:	push   rbx
  40ba7a:	push   rax
  40ba7b:	mov    r15,rcx
  40ba7e:	mov    r12,rdx
  40ba81:	mov    r14,rdi
  40ba84:	cmp    rsi,rdx
  40ba87:	je     40bacf <flatcc_json_parser_build_string@@Base+0x5f>
  40ba89:	cmp    BYTE PTR [rsi],0x22
  40ba8c:	jne    40bacf <flatcc_json_parser_build_string@@Base+0x5f>
  40ba8e:	inc    rsi
  40ba91:	mov    rbp,r12
  40ba94:	cmp    rsi,r12
  40ba97:	je     40badd <flatcc_json_parser_build_string@@Base+0x6d>
  40ba99:	mov    rbx,rsi
  40ba9c:	nop    DWORD PTR [rax+0x0]
  40baa0:	movzx  eax,BYTE PTR [rbx]
  40baa3:	cmp    al,0x20
  40baa5:	jb     40bc1e <flatcc_json_parser_build_string@@Base+0x1ae>
  40baab:	cmp    al,0x22
  40baad:	je     40bc41 <flatcc_json_parser_build_string@@Base+0x1d1>
  40bab3:	cmp    al,0x5c
  40bab5:	je     40bc41 <flatcc_json_parser_build_string@@Base+0x1d1>
  40babb:	inc    rbx
  40babe:	cmp    r12,rbx
  40bac1:	jne    40baa0 <flatcc_json_parser_build_string@@Base+0x30>
  40bac3:	mov    rbp,rsi
  40bac6:	cmp    DWORD PTR [r14+0x20],0x0
  40bacb:	jne    40baff <flatcc_json_parser_build_string@@Base+0x8f>
  40bacd:	jmp    40bae4 <flatcc_json_parser_build_string@@Base+0x74>
  40bacf:	cmp    DWORD PTR [r14+0x20],0x0
  40bad4:	mov    rbp,r12
  40bad7:	je     40bbf1 <flatcc_json_parser_build_string@@Base+0x181>
  40badd:	cmp    DWORD PTR [r14+0x20],0x0
  40bae2:	jne    40baff <flatcc_json_parser_build_string@@Base+0x8f>
  40bae4:	mov    DWORD PTR [r14+0x20],0x14
  40baec:	mov    eax,DWORD PTR [r14+0x8]
  40baf0:	mov    ecx,r12d
  40baf3:	sub    ecx,eax
  40baf5:	inc    ecx
  40baf7:	mov    DWORD PTR [r14+0x1c],ecx
  40bafb:	mov    QWORD PTR [r14+0x38],r12
  40baff:	mov    rbx,r12
  40bb02:	mov    rdi,QWORD PTR [r14]
  40bb05:	call   406500 <flatcc_builder_start_string@@Base>
  40bb0a:	test   eax,eax
  40bb0c:	je     40bb2a <flatcc_json_parser_build_string@@Base+0xba>
  40bb0e:	mov    DWORD PTR [r15],0x0
  40bb15:	mov    r12,rbx
  40bb18:	mov    rax,r12
  40bb1b:	add    rsp,0x8
  40bb1f:	pop    rbx
  40bb20:	pop    r12
  40bb22:	pop    r13
  40bb24:	pop    r14
  40bb26:	pop    r15
  40bb28:	pop    rbp
  40bb29:	ret    
  40bb2a:	mov    rdi,QWORD PTR [r14]
  40bb2d:	mov    rdx,rbx
  40bb30:	sub    rdx,rbp
  40bb33:	mov    rsi,rbp
  40bb36:	call   405f10 <flatcc_builder_append_string@@Base>
  40bb3b:	test   rax,rax
  40bb3e:	je     40bb0e <flatcc_json_parser_build_string@@Base+0x9e>
  40bb40:	mov    rbp,r12
  40bb43:	cmp    rbx,r12
  40bb46:	je     40bcb3 <flatcc_json_parser_build_string@@Base+0x243>
  40bb4c:	lea    rbp,[rsp+0x4]
  40bb51:	cmp    BYTE PTR [rbx],0x22
  40bb54:	je     40bcfd <flatcc_json_parser_build_string@@Base+0x28d>
  40bb5a:	mov    rdi,r14
  40bb5d:	mov    rsi,rbx
  40bb60:	mov    rdx,r12
  40bb63:	mov    rcx,rbp
  40bb66:	call   409b50 <flatcc_json_parser_string_escape@@Base>
  40bb6b:	mov    r13,rax
  40bb6e:	mov    rdi,QWORD PTR [r14]
  40bb71:	movsx  rdx,BYTE PTR [rsp+0x4]
  40bb77:	lea    rsi,[rsp+0x5]
  40bb7c:	call   405f10 <flatcc_builder_append_string@@Base>
  40bb81:	test   rax,rax
  40bb84:	je     40bd02 <flatcc_json_parser_build_string@@Base+0x292>
  40bb8a:	cmp    r13,r12
  40bb8d:	je     40bc65 <flatcc_json_parser_build_string@@Base+0x1f5>
  40bb93:	mov    rbx,r13
  40bb96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bba0:	movzx  eax,BYTE PTR [rbx]
  40bba3:	cmp    al,0x20
  40bba5:	jb     40bc8c <flatcc_json_parser_build_string@@Base+0x21c>
  40bbab:	cmp    al,0x22
  40bbad:	je     40bbc0 <flatcc_json_parser_build_string@@Base+0x150>
  40bbaf:	cmp    al,0x5c
  40bbb1:	je     40bbc0 <flatcc_json_parser_build_string@@Base+0x150>
  40bbb3:	inc    rbx
  40bbb6:	cmp    r12,rbx
  40bbb9:	jne    40bba0 <flatcc_json_parser_build_string@@Base+0x130>
  40bbbb:	jmp    40bc65 <flatcc_json_parser_build_string@@Base+0x1f5>
  40bbc0:	cmp    r12,rbx
  40bbc3:	je     40bcb0 <flatcc_json_parser_build_string@@Base+0x240>
  40bbc9:	mov    rdi,QWORD PTR [r14]
  40bbcc:	mov    rdx,rbx
  40bbcf:	sub    rdx,r13
  40bbd2:	mov    rsi,r13
  40bbd5:	call   405f10 <flatcc_builder_append_string@@Base>
  40bbda:	test   rax,rax
  40bbdd:	je     40bb0e <flatcc_json_parser_build_string@@Base+0x9e>
  40bbe3:	cmp    r12,rbx
  40bbe6:	jne    40bb51 <flatcc_json_parser_build_string@@Base+0xe1>
  40bbec:	jmp    40bcb0 <flatcc_json_parser_build_string@@Base+0x240>
  40bbf1:	mov    DWORD PTR [r14+0x20],0x10
  40bbf9:	mov    eax,DWORD PTR [r14+0x8]
  40bbfd:	mov    ecx,esi
  40bbff:	sub    ecx,eax
  40bc01:	inc    ecx
  40bc03:	mov    DWORD PTR [r14+0x1c],ecx
  40bc07:	mov    QWORD PTR [r14+0x38],rsi
  40bc0b:	mov    rbp,r12
  40bc0e:	cmp    DWORD PTR [r14+0x20],0x0
  40bc13:	jne    40baff <flatcc_json_parser_build_string@@Base+0x8f>
  40bc19:	jmp    40bae4 <flatcc_json_parser_build_string@@Base+0x74>
  40bc1e:	cmp    DWORD PTR [r14+0x20],0x0
  40bc23:	jne    40bc5a <flatcc_json_parser_build_string@@Base+0x1ea>
  40bc25:	mov    DWORD PTR [r14+0x20],0x11
  40bc2d:	mov    eax,DWORD PTR [r14+0x8]
  40bc31:	mov    ecx,ebx
  40bc33:	sub    ecx,eax
  40bc35:	inc    ecx
  40bc37:	mov    DWORD PTR [r14+0x1c],ecx
  40bc3b:	mov    QWORD PTR [r14+0x38],rbx
  40bc3f:	jmp    40bc5a <flatcc_json_parser_build_string@@Base+0x1ea>
  40bc41:	cmp    r12,rbx
  40bc44:	je     40bc5a <flatcc_json_parser_build_string@@Base+0x1ea>
  40bc46:	cmp    al,0x22
  40bc48:	jne    40bc5d <flatcc_json_parser_build_string@@Base+0x1ed>
  40bc4a:	mov    rdi,QWORD PTR [r14]
  40bc4d:	mov    rdx,rbx
  40bc50:	sub    rdx,rsi
  40bc53:	call   408790 <flatcc_builder_create_string@@Base>
  40bc58:	jmp    40bcbe <flatcc_json_parser_build_string@@Base+0x24e>
  40bc5a:	mov    rbx,r12
  40bc5d:	mov    rbp,rsi
  40bc60:	jmp    40bb02 <flatcc_json_parser_build_string@@Base+0x92>
  40bc65:	cmp    DWORD PTR [r14+0x20],0x0
  40bc6a:	mov    rbp,r12
  40bc6d:	jne    40bcb3 <flatcc_json_parser_build_string@@Base+0x243>
  40bc6f:	mov    DWORD PTR [r14+0x20],0x14
  40bc77:	mov    eax,DWORD PTR [r14+0x8]
  40bc7b:	mov    ecx,r12d
  40bc7e:	sub    ecx,eax
  40bc80:	inc    ecx
  40bc82:	mov    DWORD PTR [r14+0x1c],ecx
  40bc86:	mov    QWORD PTR [r14+0x38],r12
  40bc8a:	jmp    40bcb0 <flatcc_json_parser_build_string@@Base+0x240>
  40bc8c:	cmp    DWORD PTR [r14+0x20],0x0
  40bc91:	mov    rbp,r12
  40bc94:	jne    40bcb3 <flatcc_json_parser_build_string@@Base+0x243>
  40bc96:	mov    DWORD PTR [r14+0x20],0x11
  40bc9e:	mov    eax,DWORD PTR [r14+0x8]
  40bca2:	mov    ecx,ebx
  40bca4:	sub    ecx,eax
  40bca6:	inc    ecx
  40bca8:	mov    DWORD PTR [r14+0x1c],ecx
  40bcac:	mov    QWORD PTR [r14+0x38],rbx
  40bcb0:	mov    rbp,r12
  40bcb3:	mov    rdi,QWORD PTR [r14]
  40bcb6:	call   408930 <flatcc_builder_end_string@@Base>
  40bcbb:	mov    rbx,rbp
  40bcbe:	mov    DWORD PTR [r15],eax
  40bcc1:	cmp    rbx,r12
  40bcc4:	je     40bcd3 <flatcc_json_parser_build_string@@Base+0x263>
  40bcc6:	cmp    BYTE PTR [rbx],0x22
  40bcc9:	jne    40bcd3 <flatcc_json_parser_build_string@@Base+0x263>
  40bccb:	inc    rbx
  40bcce:	jmp    40bb15 <flatcc_json_parser_build_string@@Base+0xa5>
  40bcd3:	cmp    DWORD PTR [r14+0x20],0x0
  40bcd8:	jne    40bb18 <flatcc_json_parser_build_string@@Base+0xa8>
  40bcde:	mov    DWORD PTR [r14+0x20],0x14
  40bce6:	mov    eax,DWORD PTR [r14+0x8]
  40bcea:	mov    ecx,ebx
  40bcec:	sub    ecx,eax
  40bcee:	inc    ecx
  40bcf0:	mov    DWORD PTR [r14+0x1c],ecx
  40bcf4:	mov    QWORD PTR [r14+0x38],rbx
  40bcf8:	jmp    40bb18 <flatcc_json_parser_build_string@@Base+0xa8>
  40bcfd:	mov    rbp,rbx
  40bd00:	jmp    40bcb3 <flatcc_json_parser_build_string@@Base+0x243>
  40bd02:	mov    rbx,r13
  40bd05:	jmp    40bb0e <flatcc_json_parser_build_string@@Base+0x9e>
  40bd0a:	nop    WORD PTR [rax+rax*1+0x0]

000000000040bd10 <flatcc_json_parser_prepare_unions@@Base>:
  40bd10:	push   r15
  40bd12:	push   r14
  40bd14:	push   r13
  40bd16:	push   r12
  40bd18:	push   rbx
  40bd19:	mov    r13,r8
  40bd1c:	mov    r12,rcx
  40bd1f:	mov    r15,rdx
  40bd22:	mov    r14,rsi
  40bd25:	mov    rbx,rdi
  40bd28:	mov    rdi,QWORD PTR [rdi]
  40bd2b:	lea    rax,[rcx+rcx*4]
  40bd2f:	lea    rsi,[rax*8+0x10]
  40bd37:	call   404c00 <flatcc_builder_enter_user_frame@@Base>
  40bd3c:	mov    QWORD PTR [r13+0x0],rax
  40bd40:	test   rax,rax
  40bd43:	je     40bd58 <flatcc_json_parser_prepare_unions@@Base+0x48>
  40bd45:	mov    rdi,QWORD PTR [rbx]
  40bd48:	mov    rsi,rax
  40bd4b:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40bd50:	mov    QWORD PTR [rax],r12
  40bd53:	mov    r15,r14
  40bd56:	jmp    40bd76 <flatcc_json_parser_prepare_unions@@Base+0x66>
  40bd58:	cmp    DWORD PTR [rbx+0x20],0x0
  40bd5c:	jne    40bd76 <flatcc_json_parser_prepare_unions@@Base+0x66>
  40bd5e:	mov    DWORD PTR [rbx+0x20],0x21
  40bd65:	mov    eax,DWORD PTR [rbx+0x8]
  40bd68:	mov    ecx,r14d
  40bd6b:	sub    ecx,eax
  40bd6d:	inc    ecx
  40bd6f:	mov    DWORD PTR [rbx+0x1c],ecx
  40bd72:	mov    QWORD PTR [rbx+0x38],r14
  40bd76:	mov    rax,r15
  40bd79:	pop    rbx
  40bd7a:	pop    r12
  40bd7c:	pop    r13
  40bd7e:	pop    r14
  40bd80:	pop    r15
  40bd82:	ret    
  40bd83:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bd8d:	nop    DWORD PTR [rax]

000000000040bd90 <flatcc_json_parser_finalize_unions@@Base>:
  40bd90:	push   r15
  40bd92:	push   r14
  40bd94:	push   r12
  40bd96:	push   rbx
  40bd97:	push   rax
  40bd98:	mov    r15,rcx
  40bd9b:	mov    r14,rdx
  40bd9e:	mov    r12,rsi
  40bda1:	mov    rbx,rdi
  40bda4:	mov    rdi,QWORD PTR [rdi]
  40bda7:	mov    rsi,rcx
  40bdaa:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40bdaf:	cmp    QWORD PTR [rax+0x8],0x0
  40bdb4:	je     40bdd6 <flatcc_json_parser_finalize_unions@@Base+0x46>
  40bdb6:	cmp    DWORD PTR [rbx+0x20],0x0
  40bdba:	jne    40bdd9 <flatcc_json_parser_finalize_unions@@Base+0x49>
  40bdbc:	mov    DWORD PTR [rbx+0x20],0x1b
  40bdc3:	mov    eax,DWORD PTR [rbx+0x8]
  40bdc6:	mov    ecx,r12d
  40bdc9:	sub    ecx,eax
  40bdcb:	inc    ecx
  40bdcd:	mov    DWORD PTR [rbx+0x1c],ecx
  40bdd0:	mov    QWORD PTR [rbx+0x38],r12
  40bdd4:	jmp    40bdd9 <flatcc_json_parser_finalize_unions@@Base+0x49>
  40bdd6:	mov    r14,r12
  40bdd9:	mov    rdi,QWORD PTR [rbx]
  40bddc:	mov    rsi,r15
  40bddf:	call   404d00 <flatcc_builder_exit_user_frame_at@@Base>
  40bde4:	mov    rax,r14
  40bde7:	add    rsp,0x8
  40bdeb:	pop    rbx
  40bdec:	pop    r12
  40bdee:	pop    r14
  40bdf0:	pop    r15
  40bdf2:	ret    
  40bdf3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40bdfd:	nop    DWORD PTR [rax]

000000000040be00 <flatcc_json_parser_union@@Base>:
  40be00:	push   rbp
  40be01:	push   r15
  40be03:	push   r14
  40be05:	push   r12
  40be07:	push   rbx
  40be08:	sub    rsp,0x10
  40be0c:	mov    r12d,r8d
  40be0f:	mov    rbp,rcx
  40be12:	mov    r14,rdx
  40be15:	mov    r15,rsi
  40be18:	mov    rbx,rdi
  40be1b:	mov    rdi,QWORD PTR [rdi]
  40be1e:	mov    rsi,r9
  40be21:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40be26:	lea    rcx,[rbp*4+0x0]
  40be2e:	add    rcx,rbp
  40be31:	cmp    QWORD PTR [rax+rcx*8+0x10],0x0
  40be37:	je     40be60 <flatcc_json_parser_union@@Base+0x60>
  40be39:	cmp    DWORD PTR [rbx+0x20],0x0
  40be3d:	jne    40beed <flatcc_json_parser_union@@Base+0xed>
  40be43:	mov    DWORD PTR [rbx+0x20],0x1c
  40be4a:	mov    eax,DWORD PTR [rbx+0x8]
  40be4d:	mov    ecx,r15d
  40be50:	sub    ecx,eax
  40be52:	inc    ecx
  40be54:	mov    DWORD PTR [rbx+0x1c],ecx
  40be57:	mov    QWORD PTR [rbx+0x38],r15
  40be5b:	jmp    40beed <flatcc_json_parser_union@@Base+0xed>
  40be60:	lea    rdx,[rax+0x10]
  40be64:	cmp    BYTE PTR [rdx+rcx*8+0x14],0x0
  40be69:	je     40beb5 <flatcc_json_parser_union@@Base+0xb5>
  40be6b:	mov    cl,BYTE PTR [rdx+rcx*8+0x15]
  40be6f:	mov    BYTE PTR [rsp+0x8],cl
  40be73:	test   cl,cl
  40be75:	je     40bee7 <flatcc_json_parser_union@@Base+0xe7>
  40be77:	mov    rbp,QWORD PTR [rsp+0x40]
  40be7c:	dec    QWORD PTR [rax+0x8]
  40be80:	lea    r8,[rsp+0xc]
  40be85:	movzx  ecx,cl
  40be88:	mov    rdi,rbx
  40be8b:	mov    rsi,r15
  40be8e:	mov    rdx,r14
  40be91:	call   rbp
  40be93:	cmp    rax,r14
  40be96:	je     40beed <flatcc_json_parser_union@@Base+0xed>
  40be98:	mov    r15,rax
  40be9b:	mov    rdi,QWORD PTR [rbx]
  40be9e:	movzx  esi,r12w
  40bea2:	mov    rdx,QWORD PTR [rsp+0x8]
  40bea7:	call   4077a0 <flatcc_builder_table_add_union@@Base>
  40beac:	test   eax,eax
  40beae:	jne    40be39 <flatcc_json_parser_union@@Base+0x39>
  40beb0:	mov    r14,r15
  40beb3:	jmp    40beed <flatcc_json_parser_union@@Base+0xed>
  40beb5:	inc    QWORD PTR [rax+0x8]
  40beb9:	lea    rax,[rax+rcx*8]
  40bebd:	add    rax,0x10
  40bec1:	mov    esi,DWORD PTR [rbx+0x18]
  40bec4:	mov    DWORD PTR [rdx+rcx*8+0x10],esi
  40bec8:	mov    rsi,QWORD PTR [rbx+0x8]
  40becc:	mov    QWORD PTR [rdx+rcx*8+0x8],rsi
  40bed1:	mov    QWORD PTR [rax],r15
  40bed4:	mov    rdi,rbx
  40bed7:	mov    rsi,r15
  40beda:	mov    rdx,r14
  40bedd:	call   40a160 <flatcc_json_parser_generic_json@@Base>
  40bee2:	mov    r14,rax
  40bee5:	jmp    40beed <flatcc_json_parser_union@@Base+0xed>
  40bee7:	cmp    DWORD PTR [rbx+0x20],0x0
  40beeb:	je     40befd <flatcc_json_parser_union@@Base+0xfd>
  40beed:	mov    rax,r14
  40bef0:	add    rsp,0x10
  40bef4:	pop    rbx
  40bef5:	pop    r12
  40bef7:	pop    r14
  40bef9:	pop    r15
  40befb:	pop    rbp
  40befc:	ret    
  40befd:	mov    DWORD PTR [rbx+0x20],0x19
  40bf04:	jmp    40be4a <flatcc_json_parser_union@@Base+0x4a>
  40bf09:	nop    DWORD PTR [rax+0x0]

000000000040bf10 <flatcc_json_parser_union_type@@Base>:
  40bf10:	push   rbp
  40bf11:	push   r15
  40bf13:	push   r14
  40bf15:	push   r13
  40bf17:	push   r12
  40bf19:	push   rbx
  40bf1a:	sub    rsp,0x18
  40bf1e:	mov    ebx,r8d
  40bf21:	mov    rbp,rcx
  40bf24:	mov    r14,rdx
  40bf27:	mov    r12,rsi
  40bf2a:	mov    r15,rdi
  40bf2d:	mov    rdi,QWORD PTR [rdi]
  40bf30:	mov    rsi,r9
  40bf33:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40bf38:	lea    r13,[rbp*4+0x0]
  40bf40:	add    r13,rbp
  40bf43:	cmp    BYTE PTR [rax+r13*8+0x24],0x0
  40bf49:	je     40bf76 <flatcc_json_parser_union_type@@Base+0x66>
  40bf4b:	cmp    DWORD PTR [r15+0x20],0x0
  40bf50:	jne    40c19f <flatcc_json_parser_union_type@@Base+0x28f>
  40bf56:	mov    DWORD PTR [r15+0x20],0x1c
  40bf5e:	mov    eax,DWORD PTR [r15+0x8]
  40bf62:	mov    ecx,r12d
  40bf65:	sub    ecx,eax
  40bf67:	inc    ecx
  40bf69:	mov    DWORD PTR [r15+0x1c],ecx
  40bf6d:	mov    QWORD PTR [r15+0x38],r12
  40bf71:	jmp    40c19f <flatcc_json_parser_union_type@@Base+0x28f>
  40bf76:	mov    r11,rax
  40bf79:	mov    DWORD PTR [rsp+0xc],ebx
  40bf7d:	lea    r10,[rax+0x10]
  40bf81:	lea    rax,[rax+r13*8]
  40bf85:	add    rax,0x24
  40bf89:	mov    BYTE PTR [rax],0x1
  40bf8c:	lea    r8,[r10+r13*8]
  40bf90:	add    r8,0x15
  40bf94:	mov    BYTE PTR [r10+r13*8+0x15],0x0
  40bf9a:	cmp    r12,r14
  40bf9d:	je     40c0cd <flatcc_json_parser_union_type@@Base+0x1bd>
  40bfa3:	mov    r9b,BYTE PTR [r12]
  40bfa7:	xor    eax,eax
  40bfa9:	cmp    r9b,0x2d
  40bfad:	sete   al
  40bfb0:	add    rax,r12
  40bfb3:	xor    edx,edx
  40bfb5:	cmp    rax,r14
  40bfb8:	je     40bffa <flatcc_json_parser_union_type@@Base+0xea>
  40bfba:	nop    WORD PTR [rax+rax*1+0x0]
  40bfc0:	movsx  rdi,BYTE PTR [rax]
  40bfc4:	lea    ecx,[rdi-0x30]
  40bfc7:	cmp    cl,0x9
  40bfca:	ja     40c03a <flatcc_json_parser_union_type@@Base+0x12a>
  40bfcc:	lea    rcx,[rdx+rdx*4]
  40bfd0:	lea    rdi,[rdi+rcx*2]
  40bfd4:	add    rdi,0xffffffffffffffd0
  40bfd8:	cmp    rdx,rdi
  40bfdb:	ja     40c046 <flatcc_json_parser_union_type@@Base+0x136>
  40bfdd:	inc    rax
  40bfe0:	mov    rdx,rdi
  40bfe3:	cmp    r14,rax
  40bfe6:	jne    40bfc0 <flatcc_json_parser_union_type@@Base+0xb0>
  40bfe8:	xor    ecx,ecx
  40bfea:	mov    rax,r14
  40bfed:	mov    rdx,rdi
  40bff0:	cmp    rax,r12
  40bff3:	jne    40c008 <flatcc_json_parser_union_type@@Base+0xf8>
  40bff5:	jmp    40c0cd <flatcc_json_parser_union_type@@Base+0x1bd>
  40bffa:	mov    rax,r14
  40bffd:	xor    ecx,ecx
  40bfff:	cmp    rax,r12
  40c002:	je     40c0cd <flatcc_json_parser_union_type@@Base+0x1bd>
  40c008:	test   cl,cl
  40c00a:	je     40c06c <flatcc_json_parser_union_type@@Base+0x15c>
  40c00c:	mov    cl,BYTE PTR [rax]
  40c00e:	add    cl,0xd2
  40c011:	cmp    cl,0x37
  40c014:	ja     40c06c <flatcc_json_parser_union_type@@Base+0x15c>
  40c016:	movzx  ecx,cl
  40c019:	movabs rdi,0x80000000800001
  40c023:	bt     rdi,rcx
  40c027:	jae    40c06c <flatcc_json_parser_union_type@@Base+0x15c>
  40c029:	cmp    DWORD PTR [r15+0x20],0x0
  40c02e:	jne    40c067 <flatcc_json_parser_union_type@@Base+0x157>
  40c030:	mov    DWORD PTR [r15+0x20],0xc
  40c038:	jmp    40c055 <flatcc_json_parser_union_type@@Base+0x145>
  40c03a:	mov    cl,0x1
  40c03c:	cmp    rax,r12
  40c03f:	jne    40c008 <flatcc_json_parser_union_type@@Base+0xf8>
  40c041:	jmp    40c0cd <flatcc_json_parser_union_type@@Base+0x1bd>
  40c046:	cmp    DWORD PTR [r15+0x20],0x0
  40c04b:	jne    40c067 <flatcc_json_parser_union_type@@Base+0x157>
  40c04d:	mov    DWORD PTR [r15+0x20],0x8
  40c055:	mov    ecx,DWORD PTR [r15+0x8]
  40c059:	mov    edx,eax
  40c05b:	sub    edx,ecx
  40c05d:	inc    edx
  40c05f:	mov    DWORD PTR [r15+0x1c],edx
  40c063:	mov    QWORD PTR [r15+0x38],rax
  40c067:	xor    edx,edx
  40c069:	mov    rax,r14
  40c06c:	cmp    rax,r12
  40c06f:	je     40c0cd <flatcc_json_parser_union_type@@Base+0x1bd>
  40c071:	cmp    r9b,0x2d
  40c075:	jne    40c08b <flatcc_json_parser_union_type@@Base+0x17b>
  40c077:	cmp    DWORD PTR [r15+0x20],0x0
  40c07c:	mov    rbp,r14
  40c07f:	jne    40c0c8 <flatcc_json_parser_union_type@@Base+0x1b8>
  40c081:	mov    DWORD PTR [r15+0x20],0x8
  40c089:	jmp    40c0a6 <flatcc_json_parser_union_type@@Base+0x196>
  40c08b:	cmp    rdx,0x100
  40c092:	jb     40c0c2 <flatcc_json_parser_union_type@@Base+0x1b2>
  40c094:	cmp    DWORD PTR [r15+0x20],0x0
  40c099:	mov    rbp,r14
  40c09c:	jne    40c0c8 <flatcc_json_parser_union_type@@Base+0x1b8>
  40c09e:	mov    DWORD PTR [r15+0x20],0x7
  40c0a6:	mov    ecx,DWORD PTR [r15+0x8]
  40c0aa:	mov    edx,eax
  40c0ac:	sub    edx,ecx
  40c0ae:	inc    edx
  40c0b0:	mov    DWORD PTR [r15+0x1c],edx
  40c0b4:	mov    QWORD PTR [r15+0x38],rax
  40c0b8:	mov    rbp,r14
  40c0bb:	cmp    rbp,r12
  40c0be:	jne    40c0f5 <flatcc_json_parser_union_type@@Base+0x1e5>
  40c0c0:	jmp    40c0cd <flatcc_json_parser_union_type@@Base+0x1bd>
  40c0c2:	mov    BYTE PTR [r8],dl
  40c0c5:	mov    rbp,rax
  40c0c8:	cmp    rbp,r12
  40c0cb:	jne    40c0f5 <flatcc_json_parser_union_type@@Base+0x1e5>
  40c0cd:	mov    rcx,QWORD PTR [rsp+0x50]
  40c0d2:	mov    rdi,r15
  40c0d5:	mov    rsi,r12
  40c0d8:	mov    rdx,r14
  40c0db:	mov    rbx,r8
  40c0de:	mov    rbp,r10
  40c0e1:	mov    r12,r11
  40c0e4:	call   40c1d0 <flatcc_json_parser_union_type@@Base+0x2c0>
  40c0e9:	mov    r11,r12
  40c0ec:	mov    r10,rbp
  40c0ef:	mov    r8,rbx
  40c0f2:	mov    rbp,rax
  40c0f5:	mov    rsi,QWORD PTR [r10+r13*8]
  40c0f9:	test   rsi,rsi
  40c0fc:	je     40c189 <flatcc_json_parser_union_type@@Base+0x279>
  40c102:	mov    rax,QWORD PTR [r11+0x8]
  40c106:	test   rax,rax
  40c109:	je     40c1b1 <flatcc_json_parser_union_type@@Base+0x2a1>
  40c10f:	mov    r9,QWORD PTR [rsp+0x58]
  40c114:	dec    rax
  40c117:	mov    QWORD PTR [r11+0x8],rax
  40c11b:	mov    r12d,DWORD PTR [r15+0x18]
  40c11f:	mov    rbx,QWORD PTR [r15+0x8]
  40c123:	mov    eax,DWORD PTR [r10+r13*8+0x10]
  40c128:	mov    DWORD PTR [r15+0x18],eax
  40c12c:	mov    rax,QWORD PTR [r10+r13*8+0x8]
  40c131:	mov    QWORD PTR [r15+0x8],rax
  40c135:	movzx  ecx,BYTE PTR [r8]
  40c139:	mov    BYTE PTR [rsp+0x10],cl
  40c13d:	lea    r8,[rsp+0x14]
  40c142:	mov    rdi,r15
  40c145:	mov    rdx,r14
  40c148:	call   r9
  40c14b:	cmp    rax,r14
  40c14e:	je     40c19f <flatcc_json_parser_union_type@@Base+0x28f>
  40c150:	mov    rdi,QWORD PTR [r15]
  40c153:	movzx  esi,WORD PTR [rsp+0xc]
  40c158:	mov    rdx,QWORD PTR [rsp+0x10]
  40c15d:	call   4077a0 <flatcc_builder_table_add_union@@Base>
  40c162:	test   eax,eax
  40c164:	je     40c194 <flatcc_json_parser_union_type@@Base+0x284>
  40c166:	cmp    DWORD PTR [r15+0x20],0x0
  40c16b:	jne    40c19f <flatcc_json_parser_union_type@@Base+0x28f>
  40c16d:	mov    DWORD PTR [r15+0x20],0x1c
  40c175:	mov    eax,DWORD PTR [r15+0x8]
  40c179:	mov    ecx,ebp
  40c17b:	sub    ecx,eax
  40c17d:	inc    ecx
  40c17f:	mov    DWORD PTR [r15+0x1c],ecx
  40c183:	mov    QWORD PTR [r15+0x38],rbp
  40c187:	jmp    40c19f <flatcc_json_parser_union_type@@Base+0x28f>
  40c189:	cmp    BYTE PTR [r8],0x1
  40c18d:	sbb    QWORD PTR [r11+0x8],0xffffffffffffffff
  40c192:	jmp    40c19c <flatcc_json_parser_union_type@@Base+0x28c>
  40c194:	mov    DWORD PTR [r15+0x18],r12d
  40c198:	mov    QWORD PTR [r15+0x8],rbx
  40c19c:	mov    r14,rbp
  40c19f:	mov    rax,r14
  40c1a2:	add    rsp,0x18
  40c1a6:	pop    rbx
  40c1a7:	pop    r12
  40c1a9:	pop    r13
  40c1ab:	pop    r14
  40c1ad:	pop    r15
  40c1af:	pop    rbp
  40c1b0:	ret    
  40c1b1:	lea    rdi,[rip+0x4537]        # 4106ef <flatcc_builder_padding_base@@Base+0x238f>
  40c1b8:	lea    rsi,[rip+0x453f]        # 4106fe <flatcc_builder_padding_base@@Base+0x239e>
  40c1bf:	lea    rcx,[rip+0x459c]        # 410762 <flatcc_builder_padding_base@@Base+0x2402>
  40c1c6:	mov    edx,0x3c5
  40c1cb:	call   403060 <__assert_fail@plt>
  40c1d0:	push   rbp
  40c1d1:	push   r15
  40c1d3:	push   r14
  40c1d5:	push   r13
  40c1d7:	push   r12
  40c1d9:	push   rbx
  40c1da:	sub    rsp,0x38
  40c1de:	mov    rbx,r8
  40c1e1:	mov    rbp,rcx
  40c1e4:	mov    r15,rdx
  40c1e7:	mov    r14,rdi
  40c1ea:	mov    BYTE PTR [r8],0x0
  40c1ee:	cmp    rsi,rdx
  40c1f1:	je     40c242 <flatcc_json_parser_union_type@@Base+0x332>
  40c1f3:	mov    al,BYTE PTR [rsi]
  40c1f5:	cmp    al,0x2e
  40c1f7:	je     40c20a <flatcc_json_parser_union_type@@Base+0x2fa>
  40c1f9:	cmp    al,0x22
  40c1fb:	jne    40c23a <flatcc_json_parser_union_type@@Base+0x32a>
  40c1fd:	inc    rsi
  40c200:	mov    DWORD PTR [r14+0x14],0x0
  40c208:	jmp    40c242 <flatcc_json_parser_union_type@@Base+0x332>
  40c20a:	cmp    DWORD PTR [r14+0x20],0x0
  40c20f:	mov    r13,r15
  40c212:	jne    40c245 <flatcc_json_parser_union_type@@Base+0x335>
  40c214:	mov    DWORD PTR [r14+0x20],0x5
  40c21c:	mov    eax,DWORD PTR [r14+0x8]
  40c220:	mov    ecx,esi
  40c222:	sub    ecx,eax
  40c224:	inc    ecx
  40c226:	mov    DWORD PTR [r14+0x1c],ecx
  40c22a:	mov    QWORD PTR [r14+0x38],rsi
  40c22e:	mov    r13,r15
  40c231:	cmp    DWORD PTR [r14+0x14],0x0
  40c236:	jne    40c286 <flatcc_json_parser_union_type@@Base+0x376>
  40c238:	jmp    40c24c <flatcc_json_parser_union_type@@Base+0x33c>
  40c23a:	mov    DWORD PTR [r14+0x14],0x1
  40c242:	mov    r13,rsi
  40c245:	cmp    DWORD PTR [r14+0x14],0x0
  40c24a:	jne    40c286 <flatcc_json_parser_union_type@@Base+0x376>
  40c24c:	mov    rax,r15
  40c24f:	sub    rax,r13
  40c252:	cmp    rax,0x2
  40c256:	jl     40c275 <flatcc_json_parser_union_type@@Base+0x365>
  40c258:	cmp    BYTE PTR [r13+0x0],0x20
  40c25d:	jg     40c286 <flatcc_json_parser_union_type@@Base+0x376>
  40c25f:	jne    40c275 <flatcc_json_parser_union_type@@Base+0x365>
  40c261:	cmp    BYTE PTR [r13+0x1],0x20
  40c266:	jle    40c275 <flatcc_json_parser_union_type@@Base+0x365>
  40c268:	inc    r13
  40c26b:	cmp    r13,r15
  40c26e:	jne    40c28f <flatcc_json_parser_union_type@@Base+0x37f>
  40c270:	jmp    40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c275:	mov    rdi,r14
  40c278:	mov    rsi,r13
  40c27b:	mov    rdx,r15
  40c27e:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c283:	mov    r13,rax
  40c286:	cmp    r13,r15
  40c289:	je     40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c28f:	lea    rcx,[rbp+0x8]
  40c293:	xor    edx,edx
  40c295:	lea    r12,[rsp+0x10]
  40c29a:	mov    QWORD PTR [rsp+0x28],rbx
  40c29f:	mov    QWORD PTR [rsp+0x20],rbp
  40c2a4:	mov    QWORD PTR [rsp+0x18],rcx
  40c2a9:	mov    DWORD PTR [rsp+0xc],edx
  40c2ad:	mov    rbx,QWORD PTR [rbp+0x0]
  40c2b1:	mov    rbp,rcx
  40c2b4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c2be:	xchg   ax,ax
  40c2c0:	mov    rdi,r14
  40c2c3:	mov    rsi,r13
  40c2c6:	mov    rdx,r15
  40c2c9:	lea    rcx,[rsp+0x14]
  40c2ce:	lea    r8,[rsp+0x30]
  40c2d3:	mov    r9,r12
  40c2d6:	call   rbx
  40c2d8:	cmp    rax,r15
  40c2db:	je     40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c2e1:	cmp    rax,r13
  40c2e4:	jne    40c300 <flatcc_json_parser_union_type@@Base+0x3f0>
  40c2e6:	mov    rbx,QWORD PTR [rbp+0x0]
  40c2ea:	add    rbp,0x8
  40c2ee:	test   rbx,rbx
  40c2f1:	jne    40c2c0 <flatcc_json_parser_union_type@@Base+0x3b0>
  40c2f3:	jmp    40c34b <flatcc_json_parser_union_type@@Base+0x43b>
  40c2f5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c2ff:	nop
  40c300:	mov    edx,DWORD PTR [rsp+0xc]
  40c304:	test   edx,edx
  40c306:	je     40c313 <flatcc_json_parser_union_type@@Base+0x403>
  40c308:	cmp    DWORD PTR [r14+0x14],0x0
  40c30d:	jne    40c3a1 <flatcc_json_parser_union_type@@Base+0x491>
  40c313:	cmp    DWORD PTR [rsp+0x14],0x0
  40c318:	jne    40c37f <flatcc_json_parser_union_type@@Base+0x46f>
  40c31a:	mov    rcx,QWORD PTR [rsp+0x30]
  40c31f:	cmp    rcx,0x100
  40c326:	jae    40c390 <flatcc_json_parser_union_type@@Base+0x480>
  40c328:	inc    edx
  40c32a:	mov    rbx,QWORD PTR [rsp+0x28]
  40c32f:	add    BYTE PTR [rbx],cl
  40c331:	cmp    DWORD PTR [rsp+0x10],0x0
  40c336:	mov    r13,rax
  40c339:	mov    rbp,QWORD PTR [rsp+0x20]
  40c33e:	mov    rcx,QWORD PTR [rsp+0x18]
  40c343:	jne    40c2a9 <flatcc_json_parser_union_type@@Base+0x399>
  40c349:	jmp    40c370 <flatcc_json_parser_union_type@@Base+0x460>
  40c34b:	cmp    DWORD PTR [r14+0x20],0x0
  40c350:	jne    40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c352:	mov    DWORD PTR [r14+0x20],0x17
  40c35a:	mov    eax,DWORD PTR [r14+0x8]
  40c35e:	mov    ecx,r13d
  40c361:	sub    ecx,eax
  40c363:	inc    ecx
  40c365:	mov    DWORD PTR [r14+0x1c],ecx
  40c369:	mov    QWORD PTR [r14+0x38],r13
  40c36d:	mov    rax,r15
  40c370:	add    rsp,0x38
  40c374:	pop    rbx
  40c375:	pop    r12
  40c377:	pop    r13
  40c379:	pop    r14
  40c37b:	pop    r15
  40c37d:	pop    rbp
  40c37e:	ret    
  40c37f:	cmp    DWORD PTR [r14+0x20],0x0
  40c384:	jne    40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c386:	mov    DWORD PTR [r14+0x20],0x8
  40c38e:	jmp    40c3b0 <flatcc_json_parser_union_type@@Base+0x4a0>
  40c390:	cmp    DWORD PTR [r14+0x20],0x0
  40c395:	jne    40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c397:	mov    DWORD PTR [r14+0x20],0x7
  40c39f:	jmp    40c3b0 <flatcc_json_parser_union_type@@Base+0x4a0>
  40c3a1:	cmp    DWORD PTR [r14+0x20],0x0
  40c3a6:	jne    40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c3a8:	mov    DWORD PTR [r14+0x20],0xe
  40c3b0:	mov    ecx,DWORD PTR [r14+0x8]
  40c3b4:	mov    edx,eax
  40c3b6:	sub    edx,ecx
  40c3b8:	inc    edx
  40c3ba:	mov    DWORD PTR [r14+0x1c],edx
  40c3be:	mov    QWORD PTR [r14+0x38],rax
  40c3c2:	jmp    40c36d <flatcc_json_parser_union_type@@Base+0x45d>
  40c3c4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40c3ce:	xchg   ax,ax

000000000040c3d0 <flatcc_json_parser_union_vector@@Base>:
  40c3d0:	push   rbp
  40c3d1:	push   r15
  40c3d3:	push   r14
  40c3d5:	push   r12
  40c3d7:	push   rbx
  40c3d8:	mov    r12d,r8d
  40c3db:	mov    rbp,rcx
  40c3de:	mov    r14,rdx
  40c3e1:	mov    r15,rsi
  40c3e4:	mov    rbx,rdi
  40c3e7:	mov    rdi,QWORD PTR [rdi]
  40c3ea:	mov    rsi,r9
  40c3ed:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40c3f2:	lea    rdx,[rbp*4+0x0]
  40c3fa:	add    rdx,rbp
  40c3fd:	cmp    QWORD PTR [rax+rdx*8+0x10],0x0
  40c403:	je     40c42f <flatcc_json_parser_union_vector@@Base+0x5f>
  40c405:	cmp    DWORD PTR [rbx+0x20],0x0
  40c409:	jne    40c423 <flatcc_json_parser_union_vector@@Base+0x53>
  40c40b:	mov    DWORD PTR [rbx+0x20],0x1c
  40c412:	mov    eax,DWORD PTR [rbx+0x8]
  40c415:	mov    ecx,r15d
  40c418:	sub    ecx,eax
  40c41a:	inc    ecx
  40c41c:	mov    DWORD PTR [rbx+0x1c],ecx
  40c41f:	mov    QWORD PTR [rbx+0x38],r15
  40c423:	mov    rax,r14
  40c426:	pop    rbx
  40c427:	pop    r12
  40c429:	pop    r14
  40c42b:	pop    r15
  40c42d:	pop    rbp
  40c42e:	ret    
  40c42f:	lea    rsi,[rax+0x10]
  40c433:	cmp    BYTE PTR [rsi+rdx*8+0x14],0x0
  40c438:	mov    rcx,QWORD PTR [rax+0x8]
  40c43c:	je     40c466 <flatcc_json_parser_union_vector@@Base+0x96>
  40c43e:	dec    rcx
  40c441:	mov    QWORD PTR [rax+0x8],rcx
  40c445:	mov    rcx,QWORD PTR [rsi+rdx*8+0x20]
  40c44a:	mov    r8d,DWORD PTR [rsi+rdx*8+0x18]
  40c44f:	movzx  r9d,r12w
  40c453:	mov    rdi,rbx
  40c456:	mov    rsi,r15
  40c459:	mov    rdx,r14
  40c45c:	pop    rbx
  40c45d:	pop    r12
  40c45f:	pop    r14
  40c461:	pop    r15
  40c463:	pop    rbp
  40c464:	jmp    40c4a0 <flatcc_json_parser_union_vector@@Base+0xd0>
  40c466:	lea    rdi,[rax+rdx*8]
  40c46a:	add    rdi,0x10
  40c46e:	inc    rcx
  40c471:	mov    QWORD PTR [rax+0x8],rcx
  40c475:	mov    eax,DWORD PTR [rbx+0x18]
  40c478:	mov    DWORD PTR [rsi+rdx*8+0x10],eax
  40c47c:	mov    rax,QWORD PTR [rbx+0x8]
  40c480:	mov    QWORD PTR [rsi+rdx*8+0x8],rax
  40c485:	mov    QWORD PTR [rdi],r15
  40c488:	mov    rdi,rbx
  40c48b:	mov    rsi,r15
  40c48e:	mov    rdx,r14
  40c491:	pop    rbx
  40c492:	pop    r12
  40c494:	pop    r14
  40c496:	pop    r15
  40c498:	pop    rbp
  40c499:	jmp    40a160 <flatcc_json_parser_generic_json@@Base>
  40c49e:	xchg   ax,ax
  40c4a0:	push   rbp
  40c4a1:	push   r15
  40c4a3:	push   r14
  40c4a5:	push   r13
  40c4a7:	push   r12
  40c4a9:	push   rbx
  40c4aa:	sub    rsp,0x18
  40c4ae:	mov    r14d,r9d
  40c4b1:	mov    r13d,r8d
  40c4b4:	mov    r12,rcx
  40c4b7:	mov    r15,rdx
  40c4ba:	mov    rbp,rsi
  40c4bd:	mov    rbx,rdi
  40c4c0:	mov    DWORD PTR [rsp+0xc],0x0
  40c4c8:	mov    rdi,QWORD PTR [rdi]
  40c4cb:	call   406280 <flatcc_builder_start_offset_vector@@Base>
  40c4d0:	test   eax,eax
  40c4d2:	je     40c4ea <flatcc_json_parser_union_vector@@Base+0x11a>
  40c4d4:	cmp    DWORD PTR [rbx+0x20],0x0
  40c4d8:	jne    40c714 <flatcc_json_parser_union_vector@@Base+0x344>
  40c4de:	mov    DWORD PTR [rbx+0x20],0x21
  40c4e5:	jmp    40c704 <flatcc_json_parser_union_vector@@Base+0x334>
  40c4ea:	cmp    rbp,r15
  40c4ed:	je     40c520 <flatcc_json_parser_union_vector@@Base+0x150>
  40c4ef:	cmp    BYTE PTR [rbp+0x0],0x5b
  40c4f3:	jne    40c520 <flatcc_json_parser_union_vector@@Base+0x150>
  40c4f5:	lea    rax,[rbp+0x1]
  40c4f9:	mov    rcx,r15
  40c4fc:	sub    rcx,rax
  40c4ff:	cmp    rcx,0x2
  40c503:	mov    DWORD PTR [rsp+0x8],r14d
  40c508:	jl     40c54c <flatcc_json_parser_union_vector@@Base+0x17c>
  40c50a:	cmp    BYTE PTR [rax],0x20
  40c50d:	jg     40c55a <flatcc_json_parser_union_vector@@Base+0x18a>
  40c50f:	jne    40c54c <flatcc_json_parser_union_vector@@Base+0x17c>
  40c511:	cmp    BYTE PTR [rbp+0x2],0x20
  40c515:	jle    40c54c <flatcc_json_parser_union_vector@@Base+0x17c>
  40c517:	add    rbp,0x2
  40c51b:	mov    rax,rbp
  40c51e:	jmp    40c55a <flatcc_json_parser_union_vector@@Base+0x18a>
  40c520:	cmp    DWORD PTR [rbx+0x20],0x0
  40c524:	mov    rsi,r15
  40c527:	jne    40c6eb <flatcc_json_parser_union_vector@@Base+0x31b>
  40c52d:	mov    DWORD PTR [rbx+0x20],0x16
  40c534:	mov    eax,DWORD PTR [rbx+0x8]
  40c537:	mov    ecx,ebp
  40c539:	sub    ecx,eax
  40c53b:	inc    ecx
  40c53d:	mov    DWORD PTR [rbx+0x1c],ecx
  40c540:	mov    QWORD PTR [rbx+0x38],rbp
  40c544:	mov    rsi,r15
  40c547:	jmp    40c6eb <flatcc_json_parser_union_vector@@Base+0x31b>
  40c54c:	mov    rdi,rbx
  40c54f:	mov    rsi,rax
  40c552:	mov    rdx,r15
  40c555:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c55a:	mov    r14,r15
  40c55d:	cmp    rax,r15
  40c560:	je     40c5a5 <flatcc_json_parser_union_vector@@Base+0x1d5>
  40c562:	cmp    BYTE PTR [rax],0x5d
  40c565:	jne    40c5a2 <flatcc_json_parser_union_vector@@Base+0x1d2>
  40c567:	lea    rsi,[rax+0x1]
  40c56b:	mov    rcx,r15
  40c56e:	sub    rcx,rsi
  40c571:	cmp    rcx,0x2
  40c575:	mov    r14d,DWORD PTR [rsp+0x8]
  40c57a:	jl     40c6dd <flatcc_json_parser_union_vector@@Base+0x30d>
  40c580:	cmp    BYTE PTR [rsi],0x20
  40c583:	jg     40c6eb <flatcc_json_parser_union_vector@@Base+0x31b>
  40c589:	jne    40c6dd <flatcc_json_parser_union_vector@@Base+0x30d>
  40c58f:	cmp    BYTE PTR [rax+0x2],0x20
  40c593:	jle    40c6dd <flatcc_json_parser_union_vector@@Base+0x30d>
  40c599:	add    rax,0x2
  40c59d:	jmp    40c6e8 <flatcc_json_parser_union_vector@@Base+0x318>
  40c5a2:	mov    r14,rax
  40c5a5:	test   r13d,r13d
  40c5a8:	je     40c6bd <flatcc_json_parser_union_vector@@Base+0x2ed>
  40c5ae:	mov    eax,r13d
  40c5b1:	mov    QWORD PTR [rsp+0x10],rax
  40c5b6:	xor    r13d,r13d
  40c5b9:	nop    DWORD PTR [rax+0x0]
  40c5c0:	mov    rdi,QWORD PTR [rbx]
  40c5c3:	mov    rsi,r12
  40c5c6:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40c5cb:	movzx  ecx,BYTE PTR [rax+r13*1]
  40c5d0:	mov    rdi,rbx
  40c5d3:	mov    rsi,r14
  40c5d6:	mov    rdx,r15
  40c5d9:	lea    r8,[rsp+0xc]
  40c5de:	call   QWORD PTR [rsp+0x50]
  40c5e2:	cmp    rax,r15
  40c5e5:	je     40c714 <flatcc_json_parser_union_vector@@Base+0x344>
  40c5eb:	mov    rbp,rax
  40c5ee:	mov    rdi,QWORD PTR [rbx]
  40c5f1:	mov    esi,0x1
  40c5f6:	call   405b90 <flatcc_builder_extend_offset_vector@@Base>
  40c5fb:	test   rax,rax
  40c5fe:	je     40c4d4 <flatcc_json_parser_union_vector@@Base+0x104>
  40c604:	mov    ecx,DWORD PTR [rsp+0xc]
  40c608:	mov    DWORD PTR [rax],ecx
  40c60a:	mov    rax,r15
  40c60d:	sub    rax,rbp
  40c610:	cmp    rax,0x2
  40c614:	mov    r14d,DWORD PTR [rsp+0x8]
  40c619:	jl     40c636 <flatcc_json_parser_union_vector@@Base+0x266>
  40c61b:	cmp    BYTE PTR [rbp+0x0],0x20
  40c61f:	jg     40c647 <flatcc_json_parser_union_vector@@Base+0x277>
  40c621:	jne    40c636 <flatcc_json_parser_union_vector@@Base+0x266>
  40c623:	cmp    BYTE PTR [rbp+0x1],0x20
  40c627:	jle    40c636 <flatcc_json_parser_union_vector@@Base+0x266>
  40c629:	inc    rbp
  40c62c:	cmp    rbp,r15
  40c62f:	jne    40c650 <flatcc_json_parser_union_vector@@Base+0x280>
  40c631:	jmp    40c726 <flatcc_json_parser_union_vector@@Base+0x356>
  40c636:	mov    rdi,rbx
  40c639:	mov    rsi,rbp
  40c63c:	mov    rdx,r15
  40c63f:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c644:	mov    rbp,rax
  40c647:	cmp    rbp,r15
  40c64a:	je     40c726 <flatcc_json_parser_union_vector@@Base+0x356>
  40c650:	movzx  eax,BYTE PTR [rbp+0x0]
  40c654:	cmp    al,0x2c
  40c656:	jne    40c72e <flatcc_json_parser_union_vector@@Base+0x35e>
  40c65c:	lea    r14,[rbp+0x1]
  40c660:	mov    rax,r15
  40c663:	sub    rax,r14
  40c666:	cmp    rax,0x2
  40c66a:	jl     40c68b <flatcc_json_parser_union_vector@@Base+0x2bb>
  40c66c:	cmp    BYTE PTR [r14],0x20
  40c670:	jg     40c69c <flatcc_json_parser_union_vector@@Base+0x2cc>
  40c672:	jne    40c68b <flatcc_json_parser_union_vector@@Base+0x2bb>
  40c674:	cmp    BYTE PTR [rbp+0x2],0x20
  40c678:	jle    40c68b <flatcc_json_parser_union_vector@@Base+0x2bb>
  40c67a:	add    rbp,0x2
  40c67e:	mov    r14,rbp
  40c681:	cmp    r14,r15
  40c684:	jne    40c6a5 <flatcc_json_parser_union_vector@@Base+0x2d5>
  40c686:	jmp    40c76f <flatcc_json_parser_union_vector@@Base+0x39f>
  40c68b:	mov    rdi,rbx
  40c68e:	mov    rsi,r14
  40c691:	mov    rdx,r15
  40c694:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c699:	mov    r14,rax
  40c69c:	cmp    r14,r15
  40c69f:	je     40c76f <flatcc_json_parser_union_vector@@Base+0x39f>
  40c6a5:	cmp    BYTE PTR [r14],0x5d
  40c6a9:	je     40c79e <flatcc_json_parser_union_vector@@Base+0x3ce>
  40c6af:	inc    r13
  40c6b2:	cmp    QWORD PTR [rsp+0x10],r13
  40c6b7:	jne    40c5c0 <flatcc_json_parser_union_vector@@Base+0x1f0>
  40c6bd:	cmp    DWORD PTR [rbx+0x20],0x0
  40c6c1:	jne    40c714 <flatcc_json_parser_union_vector@@Base+0x344>
  40c6c3:	mov    DWORD PTR [rbx+0x20],0x1e
  40c6ca:	mov    eax,DWORD PTR [rbx+0x8]
  40c6cd:	mov    ecx,r14d
  40c6d0:	sub    ecx,eax
  40c6d2:	inc    ecx
  40c6d4:	mov    DWORD PTR [rbx+0x1c],ecx
  40c6d7:	mov    QWORD PTR [rbx+0x38],r14
  40c6db:	jmp    40c714 <flatcc_json_parser_union_vector@@Base+0x344>
  40c6dd:	mov    rdi,rbx
  40c6e0:	mov    rdx,r15
  40c6e3:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c6e8:	mov    rsi,rax
  40c6eb:	mov    rbp,rsi
  40c6ee:	test   r13d,r13d
  40c6f1:	je     40c821 <flatcc_json_parser_union_vector@@Base+0x451>
  40c6f7:	cmp    DWORD PTR [rbx+0x20],0x0
  40c6fb:	jne    40c714 <flatcc_json_parser_union_vector@@Base+0x344>
  40c6fd:	mov    DWORD PTR [rbx+0x20],0x1e
  40c704:	mov    eax,DWORD PTR [rbx+0x8]
  40c707:	mov    ecx,ebp
  40c709:	sub    ecx,eax
  40c70b:	inc    ecx
  40c70d:	mov    DWORD PTR [rbx+0x1c],ecx
  40c710:	mov    QWORD PTR [rbx+0x38],rbp
  40c714:	mov    rax,r15
  40c717:	add    rsp,0x18
  40c71b:	pop    rbx
  40c71c:	pop    r12
  40c71e:	pop    r13
  40c720:	pop    r14
  40c722:	pop    r15
  40c724:	pop    rbp
  40c725:	ret    
  40c726:	mov    rax,r15
  40c729:	jmp    40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c72e:	cmp    al,0x5d
  40c730:	jne    40c7da <flatcc_json_parser_union_vector@@Base+0x40a>
  40c736:	lea    rax,[rbp+0x1]
  40c73a:	mov    rcx,r15
  40c73d:	sub    rcx,rax
  40c740:	cmp    rcx,0x2
  40c744:	jl     40c7ff <flatcc_json_parser_union_vector@@Base+0x42f>
  40c74a:	cmp    BYTE PTR [rax],0x20
  40c74d:	jg     40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c753:	jne    40c7ff <flatcc_json_parser_union_vector@@Base+0x42f>
  40c759:	cmp    BYTE PTR [rbp+0x2],0x20
  40c75d:	jle    40c7ff <flatcc_json_parser_union_vector@@Base+0x42f>
  40c763:	add    rbp,0x2
  40c767:	mov    rax,rbp
  40c76a:	jmp    40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c76f:	cmp    DWORD PTR [rbx+0x20],0x0
  40c773:	mov    rax,r15
  40c776:	mov    r14d,DWORD PTR [rsp+0x8]
  40c77b:	jne    40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c781:	mov    DWORD PTR [rbx+0x20],0x9
  40c788:	mov    eax,DWORD PTR [rbx+0x8]
  40c78b:	mov    ecx,r15d
  40c78e:	sub    ecx,eax
  40c790:	inc    ecx
  40c792:	mov    DWORD PTR [rbx+0x1c],ecx
  40c795:	mov    QWORD PTR [rbx+0x38],r15
  40c799:	mov    rax,r15
  40c79c:	jmp    40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c79e:	lea    rax,[r14+0x1]
  40c7a2:	mov    rcx,r15
  40c7a5:	sub    rcx,rax
  40c7a8:	cmp    rcx,0x2
  40c7ac:	jl     40c7c5 <flatcc_json_parser_union_vector@@Base+0x3f5>
  40c7ae:	cmp    BYTE PTR [rax],0x20
  40c7b1:	jg     40c7d3 <flatcc_json_parser_union_vector@@Base+0x403>
  40c7b3:	jne    40c7c5 <flatcc_json_parser_union_vector@@Base+0x3f5>
  40c7b5:	cmp    BYTE PTR [r14+0x2],0x20
  40c7ba:	jle    40c7c5 <flatcc_json_parser_union_vector@@Base+0x3f5>
  40c7bc:	add    r14,0x2
  40c7c0:	mov    rax,r14
  40c7c3:	jmp    40c7d3 <flatcc_json_parser_union_vector@@Base+0x403>
  40c7c5:	mov    rdi,rbx
  40c7c8:	mov    rsi,rax
  40c7cb:	mov    rdx,r15
  40c7ce:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c7d3:	mov    r14d,DWORD PTR [rsp+0x8]
  40c7d8:	jmp    40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c7da:	cmp    DWORD PTR [rbx+0x20],0x0
  40c7de:	mov    rax,r15
  40c7e1:	jne    40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c7e3:	mov    DWORD PTR [rbx+0x20],0x9
  40c7ea:	mov    eax,DWORD PTR [rbx+0x8]
  40c7ed:	mov    ecx,ebp
  40c7ef:	sub    ecx,eax
  40c7f1:	inc    ecx
  40c7f3:	mov    DWORD PTR [rbx+0x1c],ecx
  40c7f6:	mov    QWORD PTR [rbx+0x38],rbp
  40c7fa:	mov    rax,r15
  40c7fd:	jmp    40c80d <flatcc_json_parser_union_vector@@Base+0x43d>
  40c7ff:	mov    rdi,rbx
  40c802:	mov    rsi,rax
  40c805:	mov    rdx,r15
  40c808:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c80d:	mov    rcx,QWORD PTR [rsp+0x10]
  40c812:	dec    rcx
  40c815:	mov    rbp,rax
  40c818:	cmp    rcx,r13
  40c81b:	jne    40c6f7 <flatcc_json_parser_union_vector@@Base+0x327>
  40c821:	mov    rdi,QWORD PTR [rbx]
  40c824:	mov    rsi,r12
  40c827:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40c82c:	mov    rdi,QWORD PTR [rbx]
  40c82f:	mov    rsi,rax
  40c832:	call   4076c0 <flatcc_builder_end_offset_vector_for_unions@@Base>
  40c837:	mov    DWORD PTR [rsp+0xc],eax
  40c83b:	test   eax,eax
  40c83d:	je     40c4d4 <flatcc_json_parser_union_vector@@Base+0x104>
  40c843:	mov    rdi,QWORD PTR [rbx]
  40c846:	movzx  esi,r14w
  40c84a:	call   407890 <flatcc_builder_table_add_offset@@Base>
  40c84f:	test   rax,rax
  40c852:	je     40c4d4 <flatcc_json_parser_union_vector@@Base+0x104>
  40c858:	mov    ecx,DWORD PTR [rsp+0xc]
  40c85c:	mov    DWORD PTR [rax],ecx
  40c85e:	mov    r15,rbp
  40c861:	jmp    40c714 <flatcc_json_parser_union_vector@@Base+0x344>
  40c866:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000040c870 <flatcc_json_parser_union_type_vector@@Base>:
  40c870:	push   rbp
  40c871:	push   r15
  40c873:	push   r14
  40c875:	push   r13
  40c877:	push   r12
  40c879:	push   rbx
  40c87a:	sub    rsp,0x48
  40c87e:	mov    r13,r9
  40c881:	mov    r12d,r8d
  40c884:	mov    rbx,rcx
  40c887:	mov    r14,rdx
  40c88a:	mov    r15,rsi
  40c88d:	mov    rbp,rdi
  40c890:	mov    rdi,QWORD PTR [rdi]
  40c893:	mov    rsi,r9
  40c896:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40c89b:	lea    rbx,[rbx+rbx*4]
  40c89f:	cmp    BYTE PTR [rax+rbx*8+0x24],0x0
  40c8a4:	je     40c8b4 <flatcc_json_parser_union_type_vector@@Base+0x44>
  40c8a6:	cmp    DWORD PTR [rbp+0x20],0x0
  40c8aa:	je     40c900 <flatcc_json_parser_union_type_vector@@Base+0x90>
  40c8ac:	mov    r12,r14
  40c8af:	jmp    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40c8b4:	mov    DWORD PTR [rsp+0x28],r12d
  40c8b9:	mov    r12,rax
  40c8bc:	lea    rax,[rax+rbx*8]
  40c8c0:	add    rax,0x24
  40c8c4:	mov    BYTE PTR [rax],0x1
  40c8c7:	mov    QWORD PTR [rsp+0x18],rbp
  40c8cc:	mov    rdi,QWORD PTR [rbp+0x0]
  40c8d0:	mov    esi,0x1
  40c8d5:	mov    ecx,0xffffffff
  40c8da:	mov    edx,0x1
  40c8df:	call   406200 <flatcc_builder_start_vector@@Base>
  40c8e4:	test   eax,eax
  40c8e6:	je     40c920 <flatcc_json_parser_union_type_vector@@Base+0xb0>
  40c8e8:	mov    r12,r14
  40c8eb:	mov    r13,QWORD PTR [rsp+0x18]
  40c8f0:	cmp    DWORD PTR [r13+0x20],0x0
  40c8f5:	jne    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40c8fb:	jmp    40ce83 <flatcc_json_parser_union_type_vector@@Base+0x613>
  40c900:	mov    DWORD PTR [rbp+0x20],0x1c
  40c907:	mov    eax,DWORD PTR [rbp+0x8]
  40c90a:	mov    ecx,r15d
  40c90d:	sub    ecx,eax
  40c90f:	inc    ecx
  40c911:	mov    DWORD PTR [rbp+0x1c],ecx
  40c914:	mov    QWORD PTR [rbp+0x38],r15
  40c918:	mov    r12,r14
  40c91b:	jmp    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40c920:	mov    QWORD PTR [rsp+0x40],r12
  40c925:	cmp    r15,r14
  40c928:	mov    QWORD PTR [rsp+0x20],rbx
  40c92d:	mov    QWORD PTR [rsp+0x30],r13
  40c932:	je     40c957 <flatcc_json_parser_union_type_vector@@Base+0xe7>
  40c934:	cmp    BYTE PTR [r15],0x5b
  40c938:	jne    40c957 <flatcc_json_parser_union_type_vector@@Base+0xe7>
  40c93a:	lea    rax,[r15+0x1]
  40c93e:	mov    rcx,r14
  40c941:	sub    rcx,rax
  40c944:	cmp    rcx,0x2
  40c948:	jl     40c9ab <flatcc_json_parser_union_type_vector@@Base+0x13b>
  40c94a:	cmp    BYTE PTR [rax],0x20
  40c94d:	jle    40c993 <flatcc_json_parser_union_type_vector@@Base+0x123>
  40c94f:	mov    rbp,rbx
  40c952:	mov    rbx,r14
  40c955:	jmp    40c9c1 <flatcc_json_parser_union_type_vector@@Base+0x151>
  40c957:	mov    rbp,rbx
  40c95a:	mov    r13,QWORD PTR [rsp+0x18]
  40c95f:	cmp    DWORD PTR [r13+0x20],0x0
  40c964:	mov    r12,r14
  40c967:	mov    rdx,r14
  40c96a:	jne    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40c970:	mov    DWORD PTR [r13+0x20],0x16
  40c978:	mov    eax,DWORD PTR [r13+0x8]
  40c97c:	mov    ecx,r15d
  40c97f:	sub    ecx,eax
  40c981:	inc    ecx
  40c983:	mov    DWORD PTR [r13+0x1c],ecx
  40c987:	mov    QWORD PTR [r13+0x38],r15
  40c98b:	mov    rdx,r12
  40c98e:	jmp    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40c993:	jne    40c9ab <flatcc_json_parser_union_type_vector@@Base+0x13b>
  40c995:	cmp    BYTE PTR [r15+0x2],0x20
  40c99a:	jle    40c9ab <flatcc_json_parser_union_type_vector@@Base+0x13b>
  40c99c:	mov    rbp,rbx
  40c99f:	add    r15,0x2
  40c9a3:	mov    rax,r15
  40c9a6:	mov    rbx,r14
  40c9a9:	jmp    40c9c1 <flatcc_json_parser_union_type_vector@@Base+0x151>
  40c9ab:	mov    rbp,rbx
  40c9ae:	mov    rdi,QWORD PTR [rsp+0x18]
  40c9b3:	mov    rsi,rax
  40c9b6:	mov    rbx,r14
  40c9b9:	mov    rdx,r14
  40c9bc:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40c9c1:	mov    r15,rbx
  40c9c4:	cmp    rax,rbx
  40c9c7:	mov    rbx,QWORD PTR [rsp+0x18]
  40c9cc:	je     40ca12 <flatcc_json_parser_union_type_vector@@Base+0x1a2>
  40c9ce:	cmp    BYTE PTR [rax],0x5d
  40c9d1:	jne    40ca0f <flatcc_json_parser_union_type_vector@@Base+0x19f>
  40c9d3:	lea    rdx,[rax+0x1]
  40c9d7:	mov    r12,r14
  40c9da:	mov    rcx,r14
  40c9dd:	sub    rcx,rdx
  40c9e0:	cmp    rcx,0x2
  40c9e4:	mov    r13,rbx
  40c9e7:	jl     40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40c9ed:	cmp    BYTE PTR [rdx],0x20
  40c9f0:	jg     40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40c9f6:	jne    40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40c9fc:	cmp    BYTE PTR [rax+0x2],0x20
  40ca00:	jle    40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40ca06:	add    rax,0x2
  40ca0a:	jmp    40cd57 <flatcc_json_parser_union_type_vector@@Base+0x4e7>
  40ca0f:	mov    r15,rax
  40ca12:	mov    rdi,QWORD PTR [rbx]
  40ca15:	mov    esi,0x1
  40ca1a:	call   4058b0 <flatcc_builder_extend_vector@@Base>
  40ca1f:	test   rax,rax
  40ca22:	je     40ccab <flatcc_json_parser_union_type_vector@@Base+0x43b>
  40ca28:	mov    rcx,QWORD PTR [rsp+0x90]
  40ca30:	mov    r12,r14
  40ca33:	mov    r13,rbx
  40ca36:	mov    rbx,rcx
  40ca39:	mov    BYTE PTR [rsp+0x17],0x0
  40ca3e:	cmp    r15,r12
  40ca41:	mov    QWORD PTR [rsp+0x38],rax
  40ca46:	je     40cb73 <flatcc_json_parser_union_type_vector@@Base+0x303>
  40ca4c:	mov    al,BYTE PTR [r15]
  40ca4f:	xor    r14d,r14d
  40ca52:	cmp    al,0x2d
  40ca54:	sete   r14b
  40ca58:	add    r14,r15
  40ca5b:	xor    ebp,ebp
  40ca5d:	cmp    r14,r12
  40ca60:	je     40cab1 <flatcc_json_parser_union_type_vector@@Base+0x241>
  40ca62:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40ca6c:	nop    DWORD PTR [rax+0x0]
  40ca70:	movsx  rcx,BYTE PTR [r14]
  40ca74:	lea    edx,[rcx-0x30]
  40ca77:	cmp    dl,0x9
  40ca7a:	ja     40cabd <flatcc_json_parser_union_type_vector@@Base+0x24d>
  40ca7c:	lea    rdx,[rbp*4+0x0]
  40ca84:	add    rdx,rbp
  40ca87:	lea    rdx,[rcx+rdx*2]
  40ca8b:	add    rdx,0xffffffffffffffd0
  40ca8f:	cmp    rbp,rdx
  40ca92:	ja     40caf7 <flatcc_json_parser_union_type_vector@@Base+0x287>
  40ca94:	inc    r14
  40ca97:	mov    rbp,rdx
  40ca9a:	cmp    r12,r14
  40ca9d:	jne    40ca70 <flatcc_json_parser_union_type_vector@@Base+0x200>
  40ca9f:	xor    ecx,ecx
  40caa1:	mov    r14,r12
  40caa4:	mov    rbp,rdx
  40caa7:	cmp    r14,r15
  40caaa:	jne    40cac4 <flatcc_json_parser_union_type_vector@@Base+0x254>
  40caac:	jmp    40cb38 <flatcc_json_parser_union_type_vector@@Base+0x2c8>
  40cab1:	mov    r14,r12
  40cab4:	xor    ecx,ecx
  40cab6:	cmp    r14,r15
  40cab9:	jne    40cac4 <flatcc_json_parser_union_type_vector@@Base+0x254>
  40cabb:	jmp    40cb38 <flatcc_json_parser_union_type_vector@@Base+0x2c8>
  40cabd:	mov    cl,0x1
  40cabf:	cmp    r14,r15
  40cac2:	je     40cb38 <flatcc_json_parser_union_type_vector@@Base+0x2c8>
  40cac4:	test   cl,cl
  40cac6:	je     40cb1e <flatcc_json_parser_union_type_vector@@Base+0x2ae>
  40cac8:	mov    cl,BYTE PTR [r14]
  40cacb:	add    cl,0xd2
  40cace:	cmp    cl,0x37
  40cad1:	ja     40cb1e <flatcc_json_parser_union_type_vector@@Base+0x2ae>
  40cad3:	movzx  ecx,cl
  40cad6:	movabs rdx,0x80000000800001
  40cae0:	bt     rdx,rcx
  40cae4:	jae    40cb1e <flatcc_json_parser_union_type_vector@@Base+0x2ae>
  40cae6:	cmp    DWORD PTR [r13+0x20],0x0
  40caeb:	jne    40cb19 <flatcc_json_parser_union_type_vector@@Base+0x2a9>
  40caed:	mov    DWORD PTR [r13+0x20],0xc
  40caf5:	jmp    40cb06 <flatcc_json_parser_union_type_vector@@Base+0x296>
  40caf7:	cmp    DWORD PTR [r13+0x20],0x0
  40cafc:	jne    40cb19 <flatcc_json_parser_union_type_vector@@Base+0x2a9>
  40cafe:	mov    DWORD PTR [r13+0x20],0x8
  40cb06:	mov    ecx,DWORD PTR [r13+0x8]
  40cb0a:	mov    edx,r14d
  40cb0d:	sub    edx,ecx
  40cb0f:	inc    edx
  40cb11:	mov    DWORD PTR [r13+0x1c],edx
  40cb15:	mov    QWORD PTR [r13+0x38],r14
  40cb19:	xor    ebp,ebp
  40cb1b:	mov    r14,r12
  40cb1e:	cmp    r14,r15
  40cb21:	je     40cb38 <flatcc_json_parser_union_type_vector@@Base+0x2c8>
  40cb23:	cmp    al,0x2d
  40cb25:	jne    40cb44 <flatcc_json_parser_union_type_vector@@Base+0x2d4>
  40cb27:	cmp    DWORD PTR [r13+0x20],0x0
  40cb2c:	jne    40cb73 <flatcc_json_parser_union_type_vector@@Base+0x303>
  40cb2e:	mov    DWORD PTR [r13+0x20],0x8
  40cb36:	jmp    40cb60 <flatcc_json_parser_union_type_vector@@Base+0x2f0>
  40cb38:	xor    ebp,ebp
  40cb3a:	mov    r14,r15
  40cb3d:	cmp    r15,r14
  40cb40:	jne    40cbb2 <flatcc_json_parser_union_type_vector@@Base+0x342>
  40cb42:	jmp    40cb7d <flatcc_json_parser_union_type_vector@@Base+0x30d>
  40cb44:	cmp    rbp,0x100
  40cb4b:	jb     40cc98 <flatcc_json_parser_union_type_vector@@Base+0x428>
  40cb51:	cmp    DWORD PTR [r13+0x20],0x0
  40cb56:	jne    40cb73 <flatcc_json_parser_union_type_vector@@Base+0x303>
  40cb58:	mov    DWORD PTR [r13+0x20],0x7
  40cb60:	mov    eax,DWORD PTR [r13+0x8]
  40cb64:	mov    ecx,r14d
  40cb67:	sub    ecx,eax
  40cb69:	inc    ecx
  40cb6b:	mov    DWORD PTR [r13+0x1c],ecx
  40cb6f:	mov    QWORD PTR [r13+0x38],r14
  40cb73:	xor    ebp,ebp
  40cb75:	mov    r14,r12
  40cb78:	cmp    r15,r14
  40cb7b:	jne    40cbb2 <flatcc_json_parser_union_type_vector@@Base+0x342>
  40cb7d:	mov    rdi,r13
  40cb80:	mov    rsi,r15
  40cb83:	mov    rdx,r12
  40cb86:	mov    rcx,QWORD PTR [rsp+0x80]
  40cb8e:	lea    r8,[rsp+0x17]
  40cb93:	call   40c1d0 <flatcc_json_parser_union_type@@Base+0x2c0>
  40cb98:	mov    r14,rax
  40cb9b:	cmp    rax,r15
  40cb9e:	je     40ceef <flatcc_json_parser_union_type_vector@@Base+0x67f>
  40cba4:	cmp    r14,r12
  40cba7:	je     40ceef <flatcc_json_parser_union_type_vector@@Base+0x67f>
  40cbad:	mov    bpl,BYTE PTR [rsp+0x17]
  40cbb2:	movzx  edi,bpl
  40cbb6:	call   rbx
  40cbb8:	test   eax,eax
  40cbba:	jne    40cbce <flatcc_json_parser_union_type_vector@@Base+0x35e>
  40cbbc:	test   BYTE PTR [r13+0x10],0x1
  40cbc1:	je     40cefb <flatcc_json_parser_union_type_vector@@Base+0x68b>
  40cbc7:	mov    BYTE PTR [rsp+0x17],0x0
  40cbcc:	xor    ebp,ebp
  40cbce:	mov    rax,QWORD PTR [rsp+0x38]
  40cbd3:	mov    BYTE PTR [rax],bpl
  40cbd6:	mov    rax,r12
  40cbd9:	sub    rax,r14
  40cbdc:	cmp    rax,0x2
  40cbe0:	mov    rbp,QWORD PTR [rsp+0x20]
  40cbe5:	jl     40cc03 <flatcc_json_parser_union_type_vector@@Base+0x393>
  40cbe7:	cmp    BYTE PTR [r14],0x20
  40cbeb:	jg     40cc14 <flatcc_json_parser_union_type_vector@@Base+0x3a4>
  40cbed:	jne    40cc03 <flatcc_json_parser_union_type_vector@@Base+0x393>
  40cbef:	cmp    BYTE PTR [r14+0x1],0x20
  40cbf4:	jle    40cc03 <flatcc_json_parser_union_type_vector@@Base+0x393>
  40cbf6:	inc    r14
  40cbf9:	cmp    r14,r12
  40cbfc:	jne    40cc1d <flatcc_json_parser_union_type_vector@@Base+0x3ad>
  40cbfe:	jmp    40ccc1 <flatcc_json_parser_union_type_vector@@Base+0x451>
  40cc03:	mov    rdi,r13
  40cc06:	mov    rsi,r14
  40cc09:	mov    rdx,r12
  40cc0c:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40cc11:	mov    r14,rax
  40cc14:	cmp    r14,r12
  40cc17:	je     40ccc1 <flatcc_json_parser_union_type_vector@@Base+0x451>
  40cc1d:	mov    al,BYTE PTR [r14]
  40cc20:	cmp    al,0x2c
  40cc22:	jne    40ccc9 <flatcc_json_parser_union_type_vector@@Base+0x459>
  40cc28:	lea    r15,[r14+0x1]
  40cc2c:	mov    rax,r12
  40cc2f:	sub    rax,r15
  40cc32:	cmp    rax,0x2
  40cc36:	jl     40cc58 <flatcc_json_parser_union_type_vector@@Base+0x3e8>
  40cc38:	cmp    BYTE PTR [r15],0x20
  40cc3c:	jg     40cc69 <flatcc_json_parser_union_type_vector@@Base+0x3f9>
  40cc3e:	jne    40cc58 <flatcc_json_parser_union_type_vector@@Base+0x3e8>
  40cc40:	cmp    BYTE PTR [r14+0x2],0x20
  40cc45:	jle    40cc58 <flatcc_json_parser_union_type_vector@@Base+0x3e8>
  40cc47:	add    r14,0x2
  40cc4b:	mov    r15,r14
  40cc4e:	cmp    r15,r12
  40cc51:	jne    40cc72 <flatcc_json_parser_union_type_vector@@Base+0x402>
  40cc53:	jmp    40ccf8 <flatcc_json_parser_union_type_vector@@Base+0x488>
  40cc58:	mov    rdi,r13
  40cc5b:	mov    rsi,r15
  40cc5e:	mov    rdx,r12
  40cc61:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40cc66:	mov    r15,rax
  40cc69:	cmp    r15,r12
  40cc6c:	je     40ccf8 <flatcc_json_parser_union_type_vector@@Base+0x488>
  40cc72:	cmp    BYTE PTR [r15],0x5d
  40cc76:	je     40cd22 <flatcc_json_parser_union_type_vector@@Base+0x4b2>
  40cc7c:	mov    rdi,QWORD PTR [r13+0x0]
  40cc80:	mov    esi,0x1
  40cc85:	call   4058b0 <flatcc_builder_extend_vector@@Base>
  40cc8a:	test   rax,rax
  40cc8d:	jne    40ca39 <flatcc_json_parser_union_type_vector@@Base+0x1c9>
  40cc93:	jmp    40ce7c <flatcc_json_parser_union_type_vector@@Base+0x60c>
  40cc98:	mov    BYTE PTR [rsp+0x17],bpl
  40cc9d:	cmp    r15,r14
  40cca0:	jne    40cbb2 <flatcc_json_parser_union_type_vector@@Base+0x342>
  40cca6:	jmp    40cb7d <flatcc_json_parser_union_type_vector@@Base+0x30d>
  40ccab:	mov    r12,r14
  40ccae:	mov    r13,rbx
  40ccb1:	cmp    DWORD PTR [r13+0x20],0x0
  40ccb6:	jne    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40ccbc:	jmp    40ce83 <flatcc_json_parser_union_type_vector@@Base+0x613>
  40ccc1:	mov    rdx,r12
  40ccc4:	jmp    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40ccc9:	cmp    al,0x5d
  40cccb:	jne    40cebe <flatcc_json_parser_union_type_vector@@Base+0x64e>
  40ccd1:	lea    rdx,[r14+0x1]
  40ccd5:	mov    rax,r12
  40ccd8:	sub    rax,rdx
  40ccdb:	cmp    rax,0x2
  40ccdf:	jl     40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40cce1:	cmp    BYTE PTR [rdx],0x20
  40cce4:	jg     40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40cce6:	jne    40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40cce8:	cmp    BYTE PTR [r14+0x2],0x20
  40cced:	jle    40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40ccef:	add    r14,0x2
  40ccf3:	mov    rdx,r14
  40ccf6:	jmp    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40ccf8:	cmp    DWORD PTR [r13+0x20],0x0
  40ccfd:	mov    rdx,r12
  40cd00:	jne    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40cd02:	mov    DWORD PTR [r13+0x20],0x9
  40cd0a:	mov    eax,DWORD PTR [r13+0x8]
  40cd0e:	mov    ecx,r12d
  40cd11:	sub    ecx,eax
  40cd13:	inc    ecx
  40cd15:	mov    DWORD PTR [r13+0x1c],ecx
  40cd19:	mov    QWORD PTR [r13+0x38],r12
  40cd1d:	mov    rdx,r12
  40cd20:	jmp    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40cd22:	lea    rdx,[r15+0x1]
  40cd26:	mov    rax,r12
  40cd29:	sub    rax,rdx
  40cd2c:	cmp    rax,0x2
  40cd30:	jl     40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40cd32:	cmp    BYTE PTR [rdx],0x20
  40cd35:	jg     40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40cd37:	jne    40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40cd39:	cmp    BYTE PTR [r15+0x2],0x20
  40cd3e:	jle    40cd49 <flatcc_json_parser_union_type_vector@@Base+0x4d9>
  40cd40:	add    r15,0x2
  40cd44:	mov    rdx,r15
  40cd47:	jmp    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40cd49:	mov    rdi,r13
  40cd4c:	mov    rsi,rdx
  40cd4f:	mov    rdx,r12
  40cd52:	call   409a60 <flatcc_json_parser_space_ext@@Base>
  40cd57:	mov    rdx,rax
  40cd5a:	mov    QWORD PTR [rsp+0x18],rdx
  40cd5f:	mov    rbx,QWORD PTR [rsp+0x40]
  40cd64:	add    rbx,0x10
  40cd68:	mov    rdi,QWORD PTR [r13+0x0]
  40cd6c:	call   407460 <flatcc_builder_vector_count@@Base>
  40cd71:	mov    r14,rax
  40cd74:	mov    DWORD PTR [rbx+rbp*8+0x18],r14d
  40cd79:	mov    rbx,r13
  40cd7c:	mov    r13d,r14d
  40cd7f:	mov    rdi,QWORD PTR [rbx]
  40cd82:	mov    rsi,r13
  40cd85:	call   404c00 <flatcc_builder_enter_user_frame@@Base>
  40cd8a:	mov    r15,rax
  40cd8d:	mov    rdi,QWORD PTR [rbx]
  40cd90:	mov    rsi,rax
  40cd93:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40cd98:	mov    rbp,rax
  40cd9b:	mov    rdi,QWORD PTR [rbx]
  40cd9e:	call   407470 <flatcc_builder_vector_edit@@Base>
  40cda3:	mov    rdi,rbp
  40cda6:	mov    rsi,rax
  40cda9:	mov    rdx,r13
  40cdac:	call   4030a0 <memcpy@plt>
  40cdb1:	mov    rdi,QWORD PTR [rbx]
  40cdb4:	call   407390 <flatcc_builder_end_vector@@Base>
  40cdb9:	test   eax,eax
  40cdbb:	je     40ce74 <flatcc_json_parser_union_type_vector@@Base+0x604>
  40cdc1:	mov    r13d,eax
  40cdc4:	mov    rdi,QWORD PTR [rbx]
  40cdc7:	movzx  ebp,WORD PTR [rsp+0x28]
  40cdcc:	lea    esi,[rbp-0x1]
  40cdcf:	call   407890 <flatcc_builder_table_add_offset@@Base>
  40cdd4:	test   rax,rax
  40cdd7:	je     40ce74 <flatcc_json_parser_union_type_vector@@Base+0x604>
  40cddd:	mov    QWORD PTR [rsp+0x28],rbp
  40cde2:	mov    DWORD PTR [rax],r13d
  40cde5:	mov    rdi,QWORD PTR [rbx]
  40cde8:	mov    rsi,QWORD PTR [rsp+0x30]
  40cded:	call   404d90 <flatcc_builder_get_user_frame_ptr@@Base>
  40cdf2:	mov    rcx,QWORD PTR [rsp+0x20]
  40cdf7:	mov    QWORD PTR [rax+rcx*8+0x30],r15
  40cdfc:	mov    rsi,QWORD PTR [rax+rcx*8+0x10]
  40ce01:	mov    rcx,QWORD PTR [rax+0x8]
  40ce05:	test   rsi,rsi
  40ce08:	je     40cea0 <flatcc_json_parser_union_type_vector@@Base+0x630>
  40ce0e:	test   rcx,rcx
  40ce11:	je     40cf1f <flatcc_json_parser_union_type_vector@@Base+0x6af>
  40ce17:	mov    rbp,rbx
  40ce1a:	mov    rdx,QWORD PTR [rsp+0x88]
  40ce22:	mov    rdi,rax
  40ce25:	add    rdi,0x10
  40ce29:	dec    rcx
  40ce2c:	mov    QWORD PTR [rax+0x8],rcx
  40ce30:	mov    ebx,DWORD PTR [rbx+0x18]
  40ce33:	mov    r13,QWORD PTR [rbp+0x8]
  40ce37:	mov    rcx,QWORD PTR [rsp+0x20]
  40ce3c:	mov    eax,DWORD PTR [rdi+rcx*8+0x10]
  40ce40:	mov    DWORD PTR [rbp+0x18],eax
  40ce43:	mov    rax,QWORD PTR [rdi+rcx*8+0x8]
  40ce48:	mov    QWORD PTR [rbp+0x8],rax
  40ce4c:	mov    QWORD PTR [rsp],rdx
  40ce50:	mov    rdi,rbp
  40ce53:	mov    rdx,r12
  40ce56:	mov    rcx,r15
  40ce59:	mov    r8d,r14d
  40ce5c:	mov    r9,QWORD PTR [rsp+0x28]
  40ce61:	call   40c4a0 <flatcc_json_parser_union_vector@@Base+0xd0>
  40ce66:	cmp    rax,r12
  40ce69:	je     40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40ce6b:	mov    DWORD PTR [rbp+0x18],ebx
  40ce6e:	mov    QWORD PTR [rbp+0x8],r13
  40ce72:	jmp    40cea7 <flatcc_json_parser_union_type_vector@@Base+0x637>
  40ce74:	mov    r15,QWORD PTR [rsp+0x18]
  40ce79:	mov    r13,rbx
  40ce7c:	cmp    DWORD PTR [r13+0x20],0x0
  40ce81:	jne    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40ce83:	mov    DWORD PTR [r13+0x20],0x21
  40ce8b:	mov    eax,DWORD PTR [r13+0x8]
  40ce8f:	mov    ecx,r15d
  40ce92:	sub    ecx,eax
  40ce94:	inc    ecx
  40ce96:	mov    DWORD PTR [r13+0x1c],ecx
  40ce9a:	mov    QWORD PTR [r13+0x38],r15
  40ce9e:	jmp    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40cea0:	inc    rcx
  40cea3:	mov    QWORD PTR [rax+0x8],rcx
  40cea7:	mov    r12,QWORD PTR [rsp+0x18]
  40ceac:	mov    rax,r12
  40ceaf:	add    rsp,0x48
  40ceb3:	pop    rbx
  40ceb4:	pop    r12
  40ceb6:	pop    r13
  40ceb8:	pop    r14
  40ceba:	pop    r15
  40cebc:	pop    rbp
  40cebd:	ret    
  40cebe:	cmp    DWORD PTR [r13+0x20],0x0
  40cec3:	mov    rdx,r12
  40cec6:	jne    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40cecc:	mov    DWORD PTR [r13+0x20],0x9
  40ced4:	mov    eax,DWORD PTR [r13+0x8]
  40ced8:	mov    ecx,r14d
  40cedb:	sub    ecx,eax
  40cedd:	inc    ecx
  40cedf:	mov    DWORD PTR [r13+0x1c],ecx
  40cee3:	mov    QWORD PTR [r13+0x38],r14
  40cee7:	mov    rdx,r12
  40ceea:	jmp    40cd5a <flatcc_json_parser_union_type_vector@@Base+0x4ea>
  40ceef:	mov    r15,r14
  40cef2:	cmp    DWORD PTR [r13+0x20],0x0
  40cef7:	jne    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40cef9:	jmp    40ce83 <flatcc_json_parser_union_type_vector@@Base+0x613>
  40cefb:	cmp    DWORD PTR [r13+0x20],0x0
  40cf00:	jne    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40cf02:	mov    DWORD PTR [r13+0x20],0xf
  40cf0a:	mov    eax,DWORD PTR [r13+0x8]
  40cf0e:	mov    ecx,r14d
  40cf11:	sub    ecx,eax
  40cf13:	inc    ecx
  40cf15:	mov    DWORD PTR [r13+0x1c],ecx
  40cf19:	mov    QWORD PTR [r13+0x38],r14
  40cf1d:	jmp    40ceac <flatcc_json_parser_union_type_vector@@Base+0x63c>
  40cf1f:	lea    rdi,[rip+0x37c9]        # 4106ef <flatcc_builder_padding_base@@Base+0x238f>
  40cf26:	lea    rsi,[rip+0x37d1]        # 4106fe <flatcc_builder_padding_base@@Base+0x239e>
  40cf2d:	lea    rcx,[rip+0x38fa]        # 41082e <flatcc_builder_padding_base@@Base+0x24ce>
  40cf34:	mov    edx,0x462
  40cf39:	call   403060 <__assert_fail@plt>
  40cf3e:	xchg   ax,ax

000000000040cf40 <flatcc_json_parser_table_as_root@@Base>:
  40cf40:	push   r15
  40cf42:	push   r14
  40cf44:	push   r12
  40cf46:	push   rbx
  40cf47:	sub    rsp,0x58
  40cf4b:	mov    r12,rcx
  40cf4e:	mov    r14,rdx
  40cf51:	mov    r15,rdi
  40cf54:	mov    ecx,r8d
  40cf57:	shr    ecx,1
  40cf59:	and    ecx,0x2
  40cf5c:	test   rsi,rsi
  40cf5f:	lea    rbx,[rsp+0x10]
  40cf64:	cmovne rbx,rsi
  40cf68:	add    r12,rdx
  40cf6b:	vxorps xmm0,xmm0,xmm0
  40cf6f:	vmovups YMMWORD PTR [rbx],ymm0
  40cf73:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  40cf78:	mov    QWORD PTR [rbx+0x40],0x0
  40cf80:	mov    QWORD PTR [rbx],rdi
  40cf83:	mov    QWORD PTR [rbx+0x8],rdx
  40cf87:	mov    DWORD PTR [rbx+0x18],0x1
  40cf8e:	mov    DWORD PTR [rbx+0x10],r8d
  40cf92:	mov    QWORD PTR [rbx+0x28],rdx
  40cf96:	mov    QWORD PTR [rbx+0x30],r12
  40cf9a:	mov    QWORD PTR [rbx+0x38],rdx
  40cf9e:	mov    rsi,r9
  40cfa1:	xor    edx,edx
  40cfa3:	vzeroupper 
  40cfa6:	call   4053d0 <flatcc_builder_start_buffer@@Base>
  40cfab:	mov    ecx,eax
  40cfad:	mov    eax,0xffffffff
  40cfb2:	test   ecx,ecx
  40cfb4:	jne    40cfef <flatcc_json_parser_table_as_root@@Base+0xaf>
  40cfb6:	lea    rcx,[rsp+0xc]
  40cfbb:	mov    rdi,rbx
  40cfbe:	mov    rsi,r14
  40cfc1:	mov    rdx,r12
  40cfc4:	call   QWORD PTR [rsp+0x80]
  40cfcb:	mov    eax,DWORD PTR [rbx+0x20]
  40cfce:	test   eax,eax
  40cfd0:	jne    40cfef <flatcc_json_parser_table_as_root@@Base+0xaf>
  40cfd2:	mov    esi,DWORD PTR [rsp+0xc]
  40cfd6:	mov    rdi,r15
  40cfd9:	call   4055f0 <flatcc_builder_end_buffer@@Base>
  40cfde:	mov    ecx,eax
  40cfe0:	mov    eax,0xffffffff
  40cfe5:	test   ecx,ecx
  40cfe7:	je     40cfef <flatcc_json_parser_table_as_root@@Base+0xaf>
  40cfe9:	mov    QWORD PTR [rbx+0x40],r14
  40cfed:	xor    eax,eax
  40cfef:	add    rsp,0x58
  40cff3:	pop    rbx
  40cff4:	pop    r12
  40cff6:	pop    r14
  40cff8:	pop    r15
  40cffa:	ret    
  40cffb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040d000 <flatcc_json_parser_struct_as_root@@Base>:
  40d000:	push   r15
  40d002:	push   r14
  40d004:	push   r12
  40d006:	push   rbx
  40d007:	sub    rsp,0x58
  40d00b:	mov    r12,rcx
  40d00e:	mov    r14,rdx
  40d011:	mov    r15,rdi
  40d014:	mov    ecx,r8d
  40d017:	shr    ecx,1
  40d019:	and    ecx,0x2
  40d01c:	test   rsi,rsi
  40d01f:	lea    rbx,[rsp+0x10]
  40d024:	cmovne rbx,rsi
  40d028:	add    r12,rdx
  40d02b:	vxorps xmm0,xmm0,xmm0
  40d02f:	vmovups YMMWORD PTR [rbx],ymm0
  40d033:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  40d038:	mov    QWORD PTR [rbx+0x40],0x0
  40d040:	mov    QWORD PTR [rbx],rdi
  40d043:	mov    QWORD PTR [rbx+0x8],rdx
  40d047:	mov    DWORD PTR [rbx+0x18],0x1
  40d04e:	mov    DWORD PTR [rbx+0x10],r8d
  40d052:	mov    QWORD PTR [rbx+0x28],rdx
  40d056:	mov    QWORD PTR [rbx+0x30],r12
  40d05a:	mov    QWORD PTR [rbx+0x38],rdx
  40d05e:	mov    rsi,r9
  40d061:	xor    edx,edx
  40d063:	vzeroupper 
  40d066:	call   4053d0 <flatcc_builder_start_buffer@@Base>
  40d06b:	mov    ecx,eax
  40d06d:	mov    eax,0xffffffff
  40d072:	test   ecx,ecx
  40d074:	jne    40d0af <flatcc_json_parser_struct_as_root@@Base+0xaf>
  40d076:	lea    rcx,[rsp+0xc]
  40d07b:	mov    rdi,rbx
  40d07e:	mov    rsi,r14
  40d081:	mov    rdx,r12
  40d084:	call   QWORD PTR [rsp+0x80]
  40d08b:	mov    eax,DWORD PTR [rbx+0x20]
  40d08e:	test   eax,eax
  40d090:	jne    40d0af <flatcc_json_parser_struct_as_root@@Base+0xaf>
  40d092:	mov    esi,DWORD PTR [rsp+0xc]
  40d096:	mov    rdi,r15
  40d099:	call   4055f0 <flatcc_builder_end_buffer@@Base>
  40d09e:	mov    ecx,eax
  40d0a0:	mov    eax,0xffffffff
  40d0a5:	test   ecx,ecx
  40d0a7:	je     40d0af <flatcc_json_parser_struct_as_root@@Base+0xaf>
  40d0a9:	mov    QWORD PTR [rbx+0x40],r14
  40d0ad:	xor    eax,eax
  40d0af:	add    rsp,0x58
  40d0b3:	pop    rbx
  40d0b4:	pop    r12
  40d0b6:	pop    r14
  40d0b8:	pop    r15
  40d0ba:	ret    
  40d0bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000040d0c0 <__libc_csu_init@@Base>:
  40d0c0:	endbr64 
  40d0c4:	push   r15
  40d0c6:	lea    r15,[rip+0x6c13]        # 413ce0 <flatcc_builder_padding_base@@Base+0x5980>
  40d0cd:	push   r14
  40d0cf:	mov    r14,rdx
  40d0d2:	push   r13
  40d0d4:	mov    r13,rsi
  40d0d7:	push   r12
  40d0d9:	mov    r12d,edi
  40d0dc:	push   rbp
  40d0dd:	lea    rbp,[rip+0x6c04]        # 413ce8 <flatcc_builder_padding_base@@Base+0x5988>
  40d0e4:	push   rbx
  40d0e5:	sub    rbp,r15
  40d0e8:	sub    rsp,0x8
  40d0ec:	call   403000 <free@plt-0x30>
  40d0f1:	sar    rbp,0x3
  40d0f5:	je     40d116 <__libc_csu_init@@Base+0x56>
  40d0f7:	xor    ebx,ebx
  40d0f9:	nop    DWORD PTR [rax+0x0]
  40d100:	mov    rdx,r14
  40d103:	mov    rsi,r13
  40d106:	mov    edi,r12d
  40d109:	call   QWORD PTR [r15+rbx*8]
  40d10d:	add    rbx,0x1
  40d111:	cmp    rbp,rbx
  40d114:	jne    40d100 <__libc_csu_init@@Base+0x40>
  40d116:	add    rsp,0x8
  40d11a:	pop    rbx
  40d11b:	pop    rbp
  40d11c:	pop    r12
  40d11e:	pop    r13
  40d120:	pop    r14
  40d122:	pop    r15
  40d124:	ret    
  40d125:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000040d130 <__libc_csu_fini@@Base>:
  40d130:	endbr64 
  40d134:	ret    

Disassembly of section .fini:

000000000040d138 <.fini>:
  40d138:	endbr64 
  40d13c:	sub    rsp,0x8
  40d140:	add    rsp,0x8
  40d144:	ret    
