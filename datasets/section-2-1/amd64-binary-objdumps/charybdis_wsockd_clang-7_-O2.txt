
../repos/charybdis/wsockd/.libs/wsockd:     file format elf64-x86-64


Disassembly of section .init:

0000000000402000 <.init>:
  402000:	endbr64 
  402004:	sub    rsp,0x8
  402008:	mov    rax,QWORD PTR [rip+0x5fd9]        # 407fe8 <rb_base64_encode@plt+0x5cb8>
  40200f:	test   rax,rax
  402012:	je     402016 <dup2@plt-0x1a>
  402014:	call   rax
  402016:	add    rsp,0x8
  40201a:	ret    

Disassembly of section .plt:

0000000000402020 <dup2@plt-0x10>:
  402020:	push   QWORD PTR [rip+0x5fe2]        # 408008 <rb_base64_encode@plt+0x5cd8>
  402026:	jmp    QWORD PTR [rip+0x5fe4]        # 408010 <rb_base64_encode@plt+0x5ce0>
  40202c:	nop    DWORD PTR [rax+0x0]

0000000000402030 <dup2@plt>:
  402030:	jmp    QWORD PTR [rip+0x5fe2]        # 408018 <rb_base64_encode@plt+0x5ce8>
  402036:	push   0x0
  40203b:	jmp    402020 <dup2@plt-0x10>

0000000000402040 <rb_get_type@plt>:
  402040:	jmp    QWORD PTR [rip+0x5fda]        # 408020 <rb_base64_encode@plt+0x5cf0>
  402046:	push   0x1
  40204b:	jmp    402020 <dup2@plt-0x10>

0000000000402050 <memset@plt>:
  402050:	jmp    QWORD PTR [rip+0x5fd2]        # 408028 <rb_base64_encode@plt+0x5cf8>
  402056:	push   0x2
  40205b:	jmp    402020 <dup2@plt-0x10>

0000000000402060 <rb_event_addish@plt>:
  402060:	jmp    QWORD PTR [rip+0x5fca]        # 408030 <rb_base64_encode@plt+0x5d00>
  402066:	push   0x3
  40206b:	jmp    402020 <dup2@plt-0x10>

0000000000402070 <rb_ignore_errno@plt>:
  402070:	jmp    QWORD PTR [rip+0x5fc2]        # 408038 <rb_base64_encode@plt+0x5d08>
  402076:	push   0x4
  40207b:	jmp    402020 <dup2@plt-0x10>

0000000000402080 <close@plt>:
  402080:	jmp    QWORD PTR [rip+0x5fba]        # 408040 <rb_base64_encode@plt+0x5d10>
  402086:	push   0x5
  40208b:	jmp    402020 <dup2@plt-0x10>

0000000000402090 <rb_setselect@plt>:
  402090:	jmp    QWORD PTR [rip+0x5fb2]        # 408048 <rb_base64_encode@plt+0x5d18>
  402096:	push   0x6
  40209b:	jmp    402020 <dup2@plt-0x10>

00000000004020a0 <rb_send_fd_buf@plt>:
  4020a0:	jmp    QWORD PTR [rip+0x5faa]        # 408050 <rb_base64_encode@plt+0x5d20>
  4020a6:	push   0x7
  4020ab:	jmp    402020 <dup2@plt-0x10>

00000000004020b0 <exit@plt>:
  4020b0:	jmp    QWORD PTR [rip+0x5fa2]        # 408058 <rb_base64_encode@plt+0x5d28>
  4020b6:	push   0x8
  4020bb:	jmp    402020 <dup2@plt-0x10>

00000000004020c0 <rb_set_nb@plt>:
  4020c0:	jmp    QWORD PTR [rip+0x5f9a]        # 408060 <rb_base64_encode@plt+0x5d30>
  4020c6:	push   0x9
  4020cb:	jmp    402020 <dup2@plt-0x10>

00000000004020d0 <rb_linebuf_parse@plt>:
  4020d0:	jmp    QWORD PTR [rip+0x5f92]        # 408068 <rb_base64_encode@plt+0x5d38>
  4020d6:	push   0xa
  4020db:	jmp    402020 <dup2@plt-0x10>

00000000004020e0 <rb_strlcpy@plt>:
  4020e0:	jmp    QWORD PTR [rip+0x5f8a]        # 408070 <rb_base64_encode@plt+0x5d40>
  4020e6:	push   0xb
  4020eb:	jmp    402020 <dup2@plt-0x10>

00000000004020f0 <rb_init_rawbuffers@plt>:
  4020f0:	jmp    QWORD PTR [rip+0x5f82]        # 408078 <rb_base64_encode@plt+0x5d48>
  4020f6:	push   0xc
  4020fb:	jmp    402020 <dup2@plt-0x10>

0000000000402100 <free@plt>:
  402100:	jmp    QWORD PTR [rip+0x5f7a]        # 408080 <rb_base64_encode@plt+0x5d50>
  402106:	push   0xd
  40210b:	jmp    402020 <dup2@plt-0x10>

0000000000402110 <strlen@plt>:
  402110:	jmp    QWORD PTR [rip+0x5f72]        # 408088 <rb_base64_encode@plt+0x5d58>
  402116:	push   0xe
  40211b:	jmp    402020 <dup2@plt-0x10>

0000000000402120 <rb_lib_loop@plt>:
  402120:	jmp    QWORD PTR [rip+0x5f6a]        # 408090 <rb_base64_encode@plt+0x5d60>
  402126:	push   0xf
  40212b:	jmp    402020 <dup2@plt-0x10>

0000000000402130 <rb_read@plt>:
  402130:	jmp    QWORD PTR [rip+0x5f62]        # 408098 <rb_base64_encode@plt+0x5d68>
  402136:	push   0x10
  40213b:	jmp    402020 <dup2@plt-0x10>

0000000000402140 <rb_set_type@plt>:
  402140:	jmp    QWORD PTR [rip+0x5f5a]        # 4080a0 <rb_base64_encode@plt+0x5d70>
  402146:	push   0x11
  40214b:	jmp    402020 <dup2@plt-0x10>

0000000000402150 <rb_linebuf_get@plt>:
  402150:	jmp    QWORD PTR [rip+0x5f52]        # 4080a8 <rb_base64_encode@plt+0x5d78>
  402156:	push   0x12
  40215b:	jmp    402020 <dup2@plt-0x10>

0000000000402160 <rb_linebuf_flush@plt>:
  402160:	jmp    QWORD PTR [rip+0x5f4a]        # 4080b0 <rb_base64_encode@plt+0x5d80>
  402166:	push   0x13
  40216b:	jmp    402020 <dup2@plt-0x10>

0000000000402170 <rb_linebuf_donebuf@plt>:
  402170:	jmp    QWORD PTR [rip+0x5f42]        # 4080b8 <rb_base64_encode@plt+0x5d88>
  402176:	push   0x14
  40217b:	jmp    402020 <dup2@plt-0x10>

0000000000402180 <strerror@plt>:
  402180:	jmp    QWORD PTR [rip+0x5f3a]        # 4080c0 <rb_base64_encode@plt+0x5d90>
  402186:	push   0x15
  40218b:	jmp    402020 <dup2@plt-0x10>

0000000000402190 <sigaction@plt>:
  402190:	jmp    QWORD PTR [rip+0x5f32]        # 4080c8 <rb_base64_encode@plt+0x5d98>
  402196:	push   0x16
  40219b:	jmp    402020 <dup2@plt-0x10>

00000000004021a0 <rb_strcasestr@plt>:
  4021a0:	jmp    QWORD PTR [rip+0x5f2a]        # 4080d0 <rb_base64_encode@plt+0x5da0>
  4021a6:	push   0x17
  4021ab:	jmp    402020 <dup2@plt-0x10>

00000000004021b0 <rb_close@plt>:
  4021b0:	jmp    QWORD PTR [rip+0x5f22]        # 4080d8 <rb_base64_encode@plt+0x5da8>
  4021b6:	push   0x18
  4021bb:	jmp    402020 <dup2@plt-0x10>

00000000004021c0 <strtol@plt>:
  4021c0:	jmp    QWORD PTR [rip+0x5f1a]        # 4080e0 <rb_base64_encode@plt+0x5db0>
  4021c6:	push   0x19
  4021cb:	jmp    402020 <dup2@plt-0x10>

00000000004021d0 <rb_rawbuf_length@plt>:
  4021d0:	jmp    QWORD PTR [rip+0x5f12]        # 4080e8 <rb_base64_encode@plt+0x5db8>
  4021d6:	push   0x1a
  4021db:	jmp    402020 <dup2@plt-0x10>

00000000004021e0 <rb_free_rawbuffer@plt>:
  4021e0:	jmp    QWORD PTR [rip+0x5f0a]        # 4080f0 <rb_base64_encode@plt+0x5dc0>
  4021e6:	push   0x1b
  4021eb:	jmp    402020 <dup2@plt-0x10>

00000000004021f0 <vsnprintf@plt>:
  4021f0:	jmp    QWORD PTR [rip+0x5f02]        # 4080f8 <rb_base64_encode@plt+0x5dc8>
  4021f6:	push   0x1c
  4021fb:	jmp    402020 <dup2@plt-0x10>

0000000000402200 <getenv@plt>:
  402200:	jmp    QWORD PTR [rip+0x5efa]        # 408100 <rb_base64_encode@plt+0x5dd0>
  402206:	push   0x1d
  40220b:	jmp    402020 <dup2@plt-0x10>

0000000000402210 <rb_outofmemory@plt>:
  402210:	jmp    QWORD PTR [rip+0x5ef2]        # 408108 <rb_base64_encode@plt+0x5dd8>
  402216:	push   0x1e
  40221b:	jmp    402020 <dup2@plt-0x10>

0000000000402220 <__errno_location@plt>:
  402220:	jmp    QWORD PTR [rip+0x5eea]        # 408110 <rb_base64_encode@plt+0x5de0>
  402226:	push   0x1f
  40222b:	jmp    402020 <dup2@plt-0x10>

0000000000402230 <sigaddset@plt>:
  402230:	jmp    QWORD PTR [rip+0x5ee2]        # 408118 <rb_base64_encode@plt+0x5de8>
  402236:	push   0x20
  40223b:	jmp    402020 <dup2@plt-0x10>

0000000000402240 <rb_rawbuf_get@plt>:
  402240:	jmp    QWORD PTR [rip+0x5eda]        # 408120 <rb_base64_encode@plt+0x5df0>
  402246:	push   0x21
  40224b:	jmp    402020 <dup2@plt-0x10>

0000000000402250 <rb_lib_init@plt>:
  402250:	jmp    QWORD PTR [rip+0x5ed2]        # 408128 <rb_base64_encode@plt+0x5df8>
  402256:	push   0x22
  40225b:	jmp    402020 <dup2@plt-0x10>

0000000000402260 <rb_new_rawbuffer@plt>:
  402260:	jmp    QWORD PTR [rip+0x5eca]        # 408130 <rb_base64_encode@plt+0x5e00>
  402266:	push   0x23
  40226b:	jmp    402020 <dup2@plt-0x10>

0000000000402270 <rb_open@plt>:
  402270:	jmp    QWORD PTR [rip+0x5ec2]        # 408138 <rb_base64_encode@plt+0x5e08>
  402276:	push   0x24
  40227b:	jmp    402020 <dup2@plt-0x10>

0000000000402280 <rb_recv_fd_buf@plt>:
  402280:	jmp    QWORD PTR [rip+0x5eba]        # 408140 <rb_base64_encode@plt+0x5e10>
  402286:	push   0x25
  40228b:	jmp    402020 <dup2@plt-0x10>

0000000000402290 <calloc@plt>:
  402290:	jmp    QWORD PTR [rip+0x5eb2]        # 408148 <rb_base64_encode@plt+0x5e18>
  402296:	push   0x26
  40229b:	jmp    402020 <dup2@plt-0x10>

00000000004022a0 <getrlimit@plt>:
  4022a0:	jmp    QWORD PTR [rip+0x5eaa]        # 408150 <rb_base64_encode@plt+0x5e20>
  4022a6:	push   0x27
  4022ab:	jmp    402020 <dup2@plt-0x10>

00000000004022b0 <rb_linebuf_newbuf@plt>:
  4022b0:	jmp    QWORD PTR [rip+0x5ea2]        # 408158 <rb_base64_encode@plt+0x5e28>
  4022b6:	push   0x28
  4022bb:	jmp    402020 <dup2@plt-0x10>

00000000004022c0 <rb_linebuf_init@plt>:
  4022c0:	jmp    QWORD PTR [rip+0x5e9a]        # 408160 <rb_base64_encode@plt+0x5e30>
  4022c6:	push   0x29
  4022cb:	jmp    402020 <dup2@plt-0x10>

00000000004022d0 <sigemptyset@plt>:
  4022d0:	jmp    QWORD PTR [rip+0x5e92]        # 408168 <rb_base64_encode@plt+0x5e38>
  4022d6:	push   0x2a
  4022db:	jmp    402020 <dup2@plt-0x10>

00000000004022e0 <fwrite@plt>:
  4022e0:	jmp    QWORD PTR [rip+0x5e8a]        # 408170 <rb_base64_encode@plt+0x5e40>
  4022e6:	push   0x2b
  4022eb:	jmp    402020 <dup2@plt-0x10>

00000000004022f0 <rb_rawbuf_append@plt>:
  4022f0:	jmp    QWORD PTR [rip+0x5e82]        # 408178 <rb_base64_encode@plt+0x5e48>
  4022f6:	push   0x2c
  4022fb:	jmp    402020 <dup2@plt-0x10>

0000000000402300 <rb_rawbuf_flush@plt>:
  402300:	jmp    QWORD PTR [rip+0x5e7a]        # 408180 <rb_base64_encode@plt+0x5e50>
  402306:	push   0x2d
  40230b:	jmp    402020 <dup2@plt-0x10>

0000000000402310 <memcpy@plt>:
  402310:	jmp    QWORD PTR [rip+0x5e72]        # 408188 <rb_base64_encode@plt+0x5e58>
  402316:	push   0x2e
  40231b:	jmp    402020 <dup2@plt-0x10>

0000000000402320 <open@plt>:
  402320:	jmp    QWORD PTR [rip+0x5e6a]        # 408190 <rb_base64_encode@plt+0x5e60>
  402326:	push   0x2f
  40232b:	jmp    402020 <dup2@plt-0x10>

0000000000402330 <rb_base64_encode@plt>:
  402330:	jmp    QWORD PTR [rip+0x5e62]        # 408198 <rb_base64_encode@plt+0x5e68>
  402336:	push   0x30
  40233b:	jmp    402020 <dup2@plt-0x10>

Disassembly of section .text:

0000000000402340 <.text>:
  402340:	endbr64 
  402344:	xor    ebp,ebp
  402346:	mov    r9,rdx
  402349:	pop    rsi
  40234a:	mov    rdx,rsp
  40234d:	and    rsp,0xfffffffffffffff0
  402351:	push   rax
  402352:	push   rsp
  402353:	mov    r8,0x405650
  40235a:	mov    rcx,0x4055e0
  402361:	mov    rdi,0x402430
  402368:	call   QWORD PTR [rip+0x5c82]        # 407ff0 <rb_base64_encode@plt+0x5cc0>
  40236e:	hlt    
  40236f:	nop
  402370:	endbr64 
  402374:	ret    
  402375:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40237f:	nop
  402380:	mov    eax,0x4081b0
  402385:	cmp    rax,0x4081b0
  40238b:	je     4023a0 <rb_base64_encode@plt+0x70>
  40238d:	mov    eax,0x0
  402392:	test   rax,rax
  402395:	je     4023a0 <rb_base64_encode@plt+0x70>
  402397:	mov    edi,0x4081b0
  40239c:	jmp    rax
  40239e:	xchg   ax,ax
  4023a0:	ret    
  4023a1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4023ac:	nop    DWORD PTR [rax+0x0]
  4023b0:	mov    esi,0x4081b0
  4023b5:	sub    rsi,0x4081b0
  4023bc:	mov    rax,rsi
  4023bf:	shr    rsi,0x3f
  4023c3:	sar    rax,0x3
  4023c7:	add    rsi,rax
  4023ca:	sar    rsi,1
  4023cd:	je     4023e0 <rb_base64_encode@plt+0xb0>
  4023cf:	mov    eax,0x0
  4023d4:	test   rax,rax
  4023d7:	je     4023e0 <rb_base64_encode@plt+0xb0>
  4023d9:	mov    edi,0x4081b0
  4023de:	jmp    rax
  4023e0:	ret    
  4023e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4023ec:	nop    DWORD PTR [rax+0x0]
  4023f0:	endbr64 
  4023f4:	cmp    BYTE PTR [rip+0x5db5],0x0        # 4081b0 <rb_base64_encode@plt+0x5e80>
  4023fb:	jne    402410 <rb_base64_encode@plt+0xe0>
  4023fd:	push   rbp
  4023fe:	mov    rbp,rsp
  402401:	call   402380 <rb_base64_encode@plt+0x50>
  402406:	mov    BYTE PTR [rip+0x5da3],0x1        # 4081b0 <rb_base64_encode@plt+0x5e80>
  40240d:	pop    rbp
  40240e:	ret    
  40240f:	nop
  402410:	ret    
  402411:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40241c:	nop    DWORD PTR [rax+0x0]
  402420:	endbr64 
  402424:	jmp    4023b0 <rb_base64_encode@plt+0x80>
  402426:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402430:	push   rbp
  402431:	push   r15
  402433:	push   r14
  402435:	push   r12
  402437:	push   rbx
  402438:	sub    rsp,0x20
  40243c:	lea    rsi,[rsp+0x10]
  402441:	mov    edi,0x7
  402446:	call   4022a0 <getrlimit@plt>
  40244b:	mov    r15d,0xffff
  402451:	test   eax,eax
  402453:	jne    40245a <rb_base64_encode@plt+0x12a>
  402455:	mov    r15d,DWORD PTR [rsp+0x10]
  40245a:	lea    rdi,[rip+0x3bbf]        # 406020 <rb_base64_encode@plt+0x3cf0>
  402461:	call   402200 <getenv@plt>
  402466:	mov    rbx,rax
  402469:	lea    rdi,[rip+0x3bb7]        # 406027 <rb_base64_encode@plt+0x3cf7>
  402470:	call   402200 <getenv@plt>
  402475:	mov    r14,rax
  402478:	lea    rdi,[rip+0x3bb1]        # 406030 <rb_base64_encode@plt+0x3d00>
  40247f:	call   402200 <getenv@plt>
  402484:	test   rbx,rbx
  402487:	je     402653 <rb_base64_encode@plt+0x323>
  40248d:	test   r14,r14
  402490:	je     402653 <rb_base64_encode@plt+0x323>
  402496:	mov    r12,rax
  402499:	test   rax,rax
  40249c:	je     402653 <rb_base64_encode@plt+0x323>
  4024a2:	xor    ebp,ebp
  4024a4:	xor    esi,esi
  4024a6:	mov    edx,0xa
  4024ab:	mov    rdi,rbx
  4024ae:	call   4021c0 <strtol@plt>
  4024b3:	mov    rbx,rax
  4024b6:	xor    esi,esi
  4024b8:	mov    edx,0xa
  4024bd:	mov    rdi,r14
  4024c0:	call   4021c0 <strtol@plt>
  4024c5:	mov    r14,rax
  4024c8:	xor    esi,esi
  4024ca:	mov    edx,0xa
  4024cf:	mov    rdi,r12
  4024d2:	call   4021c0 <strtol@plt>
  4024d7:	mov    DWORD PTR [rip+0x5ce3],eax        # 4081c0 <rb_base64_encode@plt+0x5e90>
  4024dd:	test   r15d,r15d
  4024e0:	jle    40250d <rb_base64_encode@plt+0x1dd>
  4024e2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4024ec:	nop    DWORD PTR [rax+0x0]
  4024f0:	cmp    ebx,ebp
  4024f2:	je     402505 <rb_base64_encode@plt+0x1d5>
  4024f4:	cmp    r14d,ebp
  4024f7:	je     402505 <rb_base64_encode@plt+0x1d5>
  4024f9:	cmp    ebp,0x3
  4024fc:	jb     402505 <rb_base64_encode@plt+0x1d5>
  4024fe:	mov    edi,ebp
  402500:	call   402080 <close@plt>
  402505:	add    ebp,0x1
  402508:	cmp    r15d,ebp
  40250b:	jne    4024f0 <rb_base64_encode@plt+0x1c0>
  40250d:	lea    rdi,[rip+0x3b8c]        # 4060a0 <rb_base64_encode@plt+0x3d70>
  402514:	mov    esi,0x2
  402519:	xor    eax,eax
  40251b:	call   402320 <open@plt>
  402520:	test   eax,eax
  402522:	js     402572 <rb_base64_encode@plt+0x242>
  402524:	mov    ebp,eax
  402526:	test   ebx,ebx
  402528:	je     402538 <rb_base64_encode@plt+0x208>
  40252a:	test   r14d,r14d
  40252d:	je     402538 <rb_base64_encode@plt+0x208>
  40252f:	xor    esi,esi
  402531:	mov    edi,ebp
  402533:	call   402030 <dup2@plt>
  402538:	cmp    ebx,0x1
  40253b:	je     40254f <rb_base64_encode@plt+0x21f>
  40253d:	cmp    r14d,0x1
  402541:	je     40254f <rb_base64_encode@plt+0x21f>
  402543:	mov    esi,0x1
  402548:	mov    edi,ebp
  40254a:	call   402030 <dup2@plt>
  40254f:	cmp    ebx,0x2
  402552:	je     402566 <rb_base64_encode@plt+0x236>
  402554:	cmp    r14d,0x2
  402558:	je     402566 <rb_base64_encode@plt+0x236>
  40255a:	mov    esi,0x2
  40255f:	mov    edi,ebp
  402561:	call   402030 <dup2@plt>
  402566:	cmp    ebp,0x3
  402569:	jl     402572 <rb_base64_encode@plt+0x242>
  40256b:	mov    edi,ebp
  40256d:	call   402080 <close@plt>
  402572:	call   4026a0 <rb_base64_encode@plt+0x370>
  402577:	mov    QWORD PTR [rsp],0x1000
  40257f:	xor    edi,edi
  402581:	xor    esi,esi
  402583:	xor    edx,edx
  402585:	xor    ecx,ecx
  402587:	mov    r9d,0x400
  40258d:	mov    r8d,r15d
  402590:	call   402250 <rb_lib_init@plt>
  402595:	mov    edi,0x1000
  40259a:	call   4022c0 <rb_linebuf_init@plt>
  40259f:	mov    edi,0x1000
  4025a4:	call   4020f0 <rb_init_rawbuffers@plt>
  4025a9:	mov    edi,0x60
  4025ae:	call   402760 <rb_base64_encode@plt+0x430>
  4025b3:	mov    QWORD PTR [rip+0x5c0e],rax        # 4081c8 <rb_base64_encode@plt+0x5e98>
  4025ba:	lea    rdx,[rip+0x3ae9]        # 4060aa <rb_base64_encode@plt+0x3d7a>
  4025c1:	mov    esi,0x4
  4025c6:	mov    edi,ebx
  4025c8:	call   402270 <rb_open@plt>
  4025cd:	mov    rcx,QWORD PTR [rip+0x5bf4]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  4025d4:	mov    QWORD PTR [rcx+0x20],rax
  4025d8:	lea    rdx,[rip+0x3adf]        # 4060be <rb_base64_encode@plt+0x3d8e>
  4025df:	mov    esi,0x8
  4025e4:	mov    edi,r14d
  4025e7:	call   402270 <rb_open@plt>
  4025ec:	mov    rcx,QWORD PTR [rip+0x5bd5]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  4025f3:	mov    QWORD PTR [rcx+0x28],rax
  4025f7:	mov    rdi,QWORD PTR [rcx+0x20]
  4025fb:	call   4020c0 <rb_set_nb@plt>
  402600:	mov    rax,QWORD PTR [rip+0x5bc1]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  402607:	mov    rdi,QWORD PTR [rax+0x28]
  40260b:	call   4020c0 <rb_set_nb@plt>
  402610:	lea    rdi,[rip+0x3ab1]        # 4060c8 <rb_base64_encode@plt+0x3d98>
  402617:	lea    rsi,[rip+0x162]        # 402780 <rb_base64_encode@plt+0x450>
  40261e:	xor    edx,edx
  402620:	mov    ecx,0xa
  402625:	call   402060 <rb_event_addish@plt>
  40262a:	mov    rax,QWORD PTR [rip+0x5b97]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  402631:	mov    rdi,QWORD PTR [rax+0x28]
  402635:	xor    esi,esi
  402637:	call   402800 <rb_base64_encode@plt+0x4d0>
  40263c:	mov    rsi,QWORD PTR [rip+0x5b85]        # 4081c8 <rb_base64_encode@plt+0x5e98>
  402643:	mov    rdi,QWORD PTR [rsi+0x20]
  402647:	call   402860 <rb_base64_encode@plt+0x530>
  40264c:	xor    edi,edi
  40264e:	call   402120 <rb_lib_loop@plt>
  402653:	mov    rbx,QWORD PTR [rip+0x599e]        # 407ff8 <rb_base64_encode@plt+0x5cc8>
  40265a:	mov    rcx,QWORD PTR [rbx]
  40265d:	lea    rdi,[rip+0x39d5]        # 406039 <rb_base64_encode@plt+0x3d09>
  402664:	mov    esi,0x34
  402669:	mov    edx,0x1
  40266e:	call   4022e0 <fwrite@plt>
  402673:	mov    rcx,QWORD PTR [rbx]
  402676:	lea    rdi,[rip+0x39f1]        # 40606e <rb_base64_encode@plt+0x3d3e>
  40267d:	mov    esi,0x31
  402682:	mov    edx,0x1
  402687:	call   4022e0 <fwrite@plt>
  40268c:	mov    edi,0x1
  402691:	call   4020b0 <exit@plt>
  402696:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4026a0:	push   rbx
  4026a1:	sub    rsp,0xa0
  4026a8:	mov    DWORD PTR [rsp+0x90],0x0
  4026b3:	mov    QWORD PTR [rsp+0x8],0x1
  4026bc:	lea    rbx,[rsp+0x10]
  4026c1:	mov    rdi,rbx
  4026c4:	call   4022d0 <sigemptyset@plt>
  4026c9:	mov    esi,0xd
  4026ce:	mov    rdi,rbx
  4026d1:	call   402230 <sigaddset@plt>
  4026d6:	mov    esi,0xe
  4026db:	mov    rdi,rbx
  4026de:	call   402230 <sigaddset@plt>
  4026e3:	mov    esi,0x5
  4026e8:	mov    rdi,rbx
  4026eb:	call   402230 <sigaddset@plt>
  4026f0:	mov    esi,0x1c
  4026f5:	mov    rdi,rbx
  4026f8:	call   402230 <sigaddset@plt>
  4026fd:	lea    rbx,[rsp+0x8]
  402702:	mov    edi,0x1c
  402707:	xor    edx,edx
  402709:	mov    rsi,rbx
  40270c:	call   402190 <sigaction@plt>
  402711:	mov    edi,0xd
  402716:	xor    edx,edx
  402718:	mov    rsi,rbx
  40271b:	call   402190 <sigaction@plt>
  402720:	mov    edi,0x5
  402725:	xor    edx,edx
  402727:	mov    rsi,rbx
  40272a:	call   402190 <sigaction@plt>
  40272f:	lea    rax,[rip+0x51a]        # 402c50 <rb_base64_encode@plt+0x920>
  402736:	mov    QWORD PTR [rsp+0x8],rax
  40273b:	mov    edi,0xe
  402740:	xor    edx,edx
  402742:	mov    rsi,rbx
  402745:	call   402190 <sigaction@plt>
  40274a:	add    rsp,0xa0
  402751:	pop    rbx
  402752:	ret    
  402753:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40275d:	nop    DWORD PTR [rax]
  402760:	push   rax
  402761:	mov    rax,rdi
  402764:	mov    edi,0x1
  402769:	mov    rsi,rax
  40276c:	call   402290 <calloc@plt>
  402771:	test   rax,rax
  402774:	je     402778 <rb_base64_encode@plt+0x448>
  402776:	pop    rcx
  402777:	ret    
  402778:	call   402210 <rb_outofmemory@plt>
  40277d:	nop    DWORD PTR [rax]
  402780:	push   r14
  402782:	push   rbx
  402783:	push   rax
  402784:	mov    r14,QWORD PTR [rip+0x5a45]        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  40278b:	test   r14,r14
  40278e:	jne    4027ad <rb_base64_encode@plt+0x47d>
  402790:	jmp    4027df <rb_base64_encode@plt+0x4af>
  402792:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40279c:	nop    DWORD PTR [rax+0x0]
  4027a0:	mov    rdi,rbx
  4027a3:	call   402100 <free@plt>
  4027a8:	test   r14,r14
  4027ab:	je     4027df <rb_base64_encode@plt+0x4af>
  4027ad:	mov    rbx,QWORD PTR [r14]
  4027b0:	mov    r14,QWORD PTR [r14+0x10]
  4027b4:	lea    rdi,[rbx+0x58]
  4027b8:	call   402170 <rb_linebuf_donebuf@plt>
  4027bd:	lea    rdi,[rbx+0x30]
  4027c1:	call   402170 <rb_linebuf_donebuf@plt>
  4027c6:	mov    rdi,QWORD PTR [rbx+0x28]
  4027ca:	call   4021e0 <rb_free_rawbuffer@plt>
  4027cf:	mov    rdi,QWORD PTR [rbx+0x20]
  4027d3:	call   4021e0 <rb_free_rawbuffer@plt>
  4027d8:	test   rbx,rbx
  4027db:	jne    4027a0 <rb_base64_encode@plt+0x470>
  4027dd:	jmp    4027a8 <rb_base64_encode@plt+0x478>
  4027df:	vxorps xmm0,xmm0,xmm0
  4027e3:	vmovups XMMWORD PTR [rip+0x59e5],xmm0        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  4027eb:	add    rsp,0x8
  4027ef:	pop    rbx
  4027f0:	pop    r14
  4027f2:	ret    
  4027f3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4027fd:	nop    DWORD PTR [rax]
  402800:	push   r14
  402802:	push   rbx
  402803:	sub    rsp,0x4008
  40280a:	mov    rbx,rdi
  40280d:	mov    r14,rsp
  402810:	mov    edx,0x4000
  402815:	mov    rdi,rbx
  402818:	mov    rsi,r14
  40281b:	call   402130 <rb_read@plt>
  402820:	test   eax,eax
  402822:	jg     402810 <rb_base64_encode@plt+0x4e0>
  402824:	test   eax,eax
  402826:	je     402859 <rb_base64_encode@plt+0x529>
  402828:	call   402220 <__errno_location@plt>
  40282d:	mov    edi,DWORD PTR [rax]
  40282f:	call   402070 <rb_ignore_errno@plt>
  402834:	test   eax,eax
  402836:	je     402859 <rb_base64_encode@plt+0x529>
  402838:	lea    rdx,[rip+0xffffffffffffffc1]        # 402800 <rb_base64_encode@plt+0x4d0>
  40283f:	mov    esi,0x1
  402844:	xor    ecx,ecx
  402846:	mov    rdi,rbx
  402849:	call   402090 <rb_setselect@plt>
  40284e:	add    rsp,0x4008
  402855:	pop    rbx
  402856:	pop    r14
  402858:	ret    
  402859:	xor    edi,edi
  40285b:	call   4020b0 <exit@plt>
  402860:	push   rbp
  402861:	push   r15
  402863:	push   r14
  402865:	push   r13
  402867:	push   r12
  402869:	push   rbx
  40286a:	sub    rsp,0x18
  40286e:	mov    r14,rsi
  402871:	mov    edi,0x1
  402876:	mov    esi,0x50
  40287b:	call   402290 <calloc@plt>
  402880:	test   rax,rax
  402883:	je     402c39 <rb_base64_encode@plt+0x909>
  402889:	mov    rbx,rax
  40288c:	lea    r12,[r14+0x30]
  402890:	mov    edi,0x1
  402895:	mov    esi,0x4000
  40289a:	call   402290 <calloc@plt>
  40289f:	test   rax,rax
  4028a2:	je     402c39 <rb_base64_encode@plt+0x909>
  4028a8:	mov    QWORD PTR [rbx+0x18],rax
  4028ac:	mov    QWORD PTR [rbx+0x20],0x4000
  4028b4:	mov    rdi,QWORD PTR [r14+0x20]
  4028b8:	lea    rcx,[rbx+0x28]
  4028bc:	mov    edx,0x4000
  4028c1:	mov    r8d,0x4
  4028c7:	mov    rsi,rax
  4028ca:	call   402280 <rb_recv_fd_buf@plt>
  4028cf:	mov    ebp,eax
  4028d1:	test   eax,eax
  4028d3:	jle    40299b <rb_base64_encode@plt+0x66b>
  4028d9:	movsxd rax,ebp
  4028dc:	mov    QWORD PTR [rbx+0x20],rax
  4028e0:	mov    QWORD PTR [rbx],rbx
  4028e3:	mov    QWORD PTR [rbx+0x10],0x0
  4028eb:	mov    rax,QWORD PTR [r14+0x38]
  4028ef:	mov    QWORD PTR [rbx+0x8],rax
  4028f3:	test   rax,rax
  4028f6:	je     402910 <rb_base64_encode@plt+0x5e0>
  4028f8:	add    rax,0x10
  4028fc:	mov    QWORD PTR [rax],rbx
  4028ff:	jmp    402917 <rb_base64_encode@plt+0x5e7>
  402901:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40290b:	nop    DWORD PTR [rax+rax*1+0x0]
  402910:	cmp    QWORD PTR [r12],0x0
  402915:	je     402993 <rb_base64_encode@plt+0x663>
  402917:	mov    QWORD PTR [r14+0x38],rbx
  40291b:	add    QWORD PTR [r14+0x40],0x1
  402920:	cmp    QWORD PTR [rbx+0x28],0x0
  402925:	je     402950 <rb_base64_encode@plt+0x620>
  402927:	cmp    QWORD PTR [rbx+0x30],0x0
  40292c:	je     402960 <rb_base64_encode@plt+0x630>
  40292e:	cmp    QWORD PTR [rbx+0x38],0x0
  402933:	je     402967 <rb_base64_encode@plt+0x637>
  402935:	cmp    QWORD PTR [rbx+0x40],0x1
  40293a:	mov    eax,0x4
  40293f:	sbb    eax,0x0
  402942:	jmp    402970 <rb_base64_encode@plt+0x640>
  402944:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40294e:	xchg   ax,ax
  402950:	xor    eax,eax
  402952:	jmp    402970 <rb_base64_encode@plt+0x640>
  402954:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40295e:	xchg   ax,ax
  402960:	mov    eax,0x1
  402965:	jmp    402970 <rb_base64_encode@plt+0x640>
  402967:	mov    eax,0x2
  40296c:	nop    DWORD PTR [rax+0x0]
  402970:	mov    DWORD PTR [rbx+0x48],eax
  402973:	mov    edi,0x1
  402978:	mov    esi,0x50
  40297d:	call   402290 <calloc@plt>
  402982:	mov    rbx,rax
  402985:	test   rax,rax
  402988:	jne    402890 <rb_base64_encode@plt+0x560>
  40298e:	jmp    402c39 <rb_base64_encode@plt+0x909>
  402993:	mov    rax,r12
  402996:	jmp    4028fc <rb_base64_encode@plt+0x5cc>
  40299b:	mov    rdi,QWORD PTR [rbx+0x18]
  40299f:	test   rdi,rdi
  4029a2:	je     4029a9 <rb_base64_encode@plt+0x679>
  4029a4:	call   402100 <free@plt>
  4029a9:	mov    rdi,rbx
  4029ac:	call   402100 <free@plt>
  4029b1:	test   ebp,ebp
  4029b3:	je     402c3e <rb_base64_encode@plt+0x90e>
  4029b9:	call   402220 <__errno_location@plt>
  4029be:	mov    edi,DWORD PTR [rax]
  4029c0:	call   402070 <rb_ignore_errno@plt>
  4029c5:	test   eax,eax
  4029c7:	je     402c3e <rb_base64_encode@plt+0x90e>
  4029cd:	mov    r13,QWORD PTR [r12]
  4029d1:	test   r13,r13
  4029d4:	je     402c13 <rb_base64_encode@plt+0x8e3>
  4029da:	mov    QWORD PTR [rsp+0x8],r12
  4029df:	jmp    4029f0 <rb_base64_encode@plt+0x6c0>
  4029e1:	lea    rdx,[rsi+rax*8]
  4029e5:	add    rdx,0x8
  4029e9:	jmp    402ae8 <rb_base64_encode@plt+0x7b8>
  4029ee:	xchg   ax,ax
  4029f0:	mov    rbx,QWORD PTR [r13+0x0]
  4029f4:	mov    r15,QWORD PTR [r13+0x10]
  4029f8:	mov    rax,QWORD PTR [rbx+0x18]
  4029fc:	cmp    BYTE PTR [rax],0x41
  4029ff:	jne    402bb0 <rb_base64_encode@plt+0x880>
  402a05:	mov    eax,DWORD PTR [rbx+0x48]
  402a08:	cmp    eax,0x2
  402a0b:	jne    402af0 <rb_base64_encode@plt+0x7c0>
  402a11:	cmp    QWORD PTR [rbx+0x20],0x5
  402a16:	jne    402af8 <rb_base64_encode@plt+0x7c8>
  402a1c:	mov    QWORD PTR [rsp+0x10],r15
  402a21:	mov    rbp,QWORD PTR [rbx+0x28]
  402a25:	mov    r12,QWORD PTR [rbx+0x30]
  402a29:	mov    edi,0x1
  402a2e:	mov    esi,0xe0
  402a33:	call   402290 <calloc@plt>
  402a38:	test   rax,rax
  402a3b:	je     402c39 <rb_base64_encode@plt+0x909>
  402a41:	mov    r15,rax
  402a44:	mov    QWORD PTR [rax+0x18],r14
  402a48:	mov    QWORD PTR [rax+0x88],rbp
  402a4f:	mov    QWORD PTR [rax+0x90],r12
  402a56:	mov    DWORD PTR [rax+0x80],0xffffffff
  402a60:	mov    rdi,rbp
  402a63:	call   4020c0 <rb_set_nb@plt>
  402a68:	mov    rdi,r12
  402a6b:	call   4020c0 <rb_set_nb@plt>
  402a70:	lea    rdi,[r15+0x58]
  402a74:	call   4022b0 <rb_linebuf_newbuf@plt>
  402a79:	mov    rdi,r15
  402a7c:	add    rdi,0x30
  402a80:	call   4022b0 <rb_linebuf_newbuf@plt>
  402a85:	call   402260 <rb_new_rawbuffer@plt>
  402a8a:	mov    QWORD PTR [r15+0x28],rax
  402a8e:	call   402260 <rb_new_rawbuffer@plt>
  402a93:	mov    QWORD PTR [r15+0x20],rax
  402a97:	mov    rax,QWORD PTR [rbx+0x18]
  402a9b:	mov    eax,DWORD PTR [rax+0x1]
  402a9e:	mov    DWORD PTR [r15+0x80],eax
  402aa5:	imul   rcx,rax,0x10624dd3
  402aac:	shr    rcx,0x27
  402ab0:	imul   ecx,ecx,0x7d0
  402ab6:	sub    eax,ecx
  402ab8:	lea    rax,[rax+rax*2]
  402abc:	lea    rsi,[rip+0x572d]        # 4081f0 <rb_base64_encode@plt+0x5ec0>
  402ac3:	lea    rcx,[rsi+rax*8]
  402ac7:	mov    QWORD PTR [r15],r15
  402aca:	mov    QWORD PTR [r15+0x8],0x0
  402ad2:	mov    rdx,QWORD PTR [rsi+rax*8]
  402ad6:	mov    QWORD PTR [r15+0x10],rdx
  402ada:	test   rdx,rdx
  402add:	je     402b1c <rb_base64_encode@plt+0x7ec>
  402adf:	add    rdx,0x8
  402ae3:	mov    r12,QWORD PTR [rsp+0x8]
  402ae8:	mov    QWORD PTR [rdx],r15
  402aeb:	jmp    402b2d <rb_base64_encode@plt+0x7fd>
  402aed:	nop    DWORD PTR [rax]
  402af0:	test   eax,eax
  402af2:	jle    402bb0 <rb_base64_encode@plt+0x880>
  402af8:	xor    ebp,ebp
  402afa:	nop    WORD PTR [rax+rax*1+0x0]
  402b00:	mov    rdi,QWORD PTR [rbx+rbp*8+0x28]
  402b05:	call   4021b0 <rb_close@plt>
  402b0a:	add    rbp,0x1
  402b0e:	movsxd rax,DWORD PTR [rbx+0x48]
  402b12:	cmp    rbp,rax
  402b15:	jl     402b00 <rb_base64_encode@plt+0x7d0>
  402b17:	jmp    402bb0 <rb_base64_encode@plt+0x880>
  402b1c:	cmp    QWORD PTR [rsi+rax*8+0x8],0x0
  402b22:	mov    r12,QWORD PTR [rsp+0x8]
  402b27:	je     4029e1 <rb_base64_encode@plt+0x6b1>
  402b2d:	mov    QWORD PTR [rcx],r15
  402b30:	add    QWORD PTR [rsi+rax*8+0x10],0x1
  402b36:	or     BYTE PTR [r15+0xb8],0x4
  402b3e:	mov    rdi,QWORD PTR [r15+0x88]
  402b45:	call   402040 <rb_get_type@plt>
  402b4a:	test   al,0x40
  402b4c:	je     402b5f <rb_base64_encode@plt+0x82f>
  402b4e:	mov    rdi,QWORD PTR [r15+0x88]
  402b55:	mov    esi,0x4
  402b5a:	call   402140 <rb_set_type@plt>
  402b5f:	mov    rdi,QWORD PTR [r15+0x90]
  402b66:	call   402040 <rb_get_type@plt>
  402b6b:	cmp    al,0x40
  402b6d:	jne    402b80 <rb_base64_encode@plt+0x850>
  402b6f:	mov    rdi,QWORD PTR [r15+0x90]
  402b76:	mov    esi,0x4
  402b7b:	call   402140 <rb_set_type@plt>
  402b80:	mov    rdi,QWORD PTR [r15+0x88]
  402b87:	mov    rsi,r15
  402b8a:	call   402c60 <rb_base64_encode@plt+0x930>
  402b8f:	mov    rdi,QWORD PTR [r15+0x90]
  402b96:	mov    rsi,r15
  402b99:	call   402da0 <rb_base64_encode@plt+0xa70>
  402b9e:	mov    r15,QWORD PTR [rsp+0x10]
  402ba3:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402bad:	nop    DWORD PTR [rax]
  402bb0:	mov    rcx,QWORD PTR [r13+0x8]
  402bb4:	mov    rax,QWORD PTR [r13+0x10]
  402bb8:	add    r13,0x8
  402bbc:	test   rax,rax
  402bbf:	je     402bd0 <rb_base64_encode@plt+0x8a0>
  402bc1:	mov    QWORD PTR [rax+0x8],rcx
  402bc5:	mov    rcx,QWORD PTR [r13+0x0]
  402bc9:	jmp    402bd4 <rb_base64_encode@plt+0x8a4>
  402bcb:	nop    DWORD PTR [rax+rax*1+0x0]
  402bd0:	mov    QWORD PTR [r14+0x38],rcx
  402bd4:	test   rcx,rcx
  402bd7:	lea    rcx,[rcx+0x10]
  402bdb:	cmove  rcx,r12
  402bdf:	mov    QWORD PTR [rcx],rax
  402be2:	vxorps xmm0,xmm0,xmm0
  402be6:	vmovups XMMWORD PTR [r13+0x0],xmm0
  402bec:	add    QWORD PTR [r14+0x40],0xffffffffffffffff
  402bf1:	mov    rdi,QWORD PTR [rbx+0x18]
  402bf5:	test   rdi,rdi
  402bf8:	je     402bff <rb_base64_encode@plt+0x8cf>
  402bfa:	call   402100 <free@plt>
  402bff:	mov    rdi,rbx
  402c02:	call   402100 <free@plt>
  402c07:	mov    r13,r15
  402c0a:	test   r15,r15
  402c0d:	jne    4029f0 <rb_base64_encode@plt+0x6c0>
  402c13:	mov    rdi,QWORD PTR [r14+0x20]
  402c17:	lea    rdx,[rip+0xfffffffffffffc42]        # 402860 <rb_base64_encode@plt+0x530>
  402c1e:	mov    esi,0x1
  402c23:	mov    rcx,r14
  402c26:	add    rsp,0x18
  402c2a:	pop    rbx
  402c2b:	pop    r12
  402c2d:	pop    r13
  402c2f:	pop    r14
  402c31:	pop    r15
  402c33:	pop    rbp
  402c34:	jmp    402090 <rb_setselect@plt>
  402c39:	call   402210 <rb_outofmemory@plt>
  402c3e:	xor    edi,edi
  402c40:	call   4020b0 <exit@plt>
  402c45:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c4f:	nop
  402c50:	ret    
  402c51:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402c5b:	nop    DWORD PTR [rax+rax*1+0x0]
  402c60:	push   r15
  402c62:	push   r14
  402c64:	push   r12
  402c66:	push   rbx
  402c67:	sub    rsp,0x4008
  402c6e:	mov    r12,rsi
  402c71:	mov    r14,rdi
  402c74:	mov    rdi,rsp
  402c77:	xor    esi,esi
  402c79:	mov    edx,0x4000
  402c7e:	call   402050 <memset@plt>
  402c83:	test   r12,r12
  402c86:	je     402d85 <rb_base64_encode@plt+0xa55>
  402c8c:	test   BYTE PTR [r12+0xb8],0x2
  402c95:	jne    402d85 <rb_base64_encode@plt+0xa55>
  402c9b:	jne    402d85 <rb_base64_encode@plt+0xa55>
  402ca1:	mov    r15,rsp
  402ca4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402cae:	xchg   ax,ax
  402cb0:	mov    edx,0x4000
  402cb5:	mov    rdi,r14
  402cb8:	mov    rsi,r15
  402cbb:	call   402130 <rb_read@plt>
  402cc0:	mov    rbx,rax
  402cc3:	test   ebx,ebx
  402cc5:	js     402d20 <rb_base64_encode@plt+0x9f0>
  402cc7:	je     402d59 <rb_base64_encode@plt+0xa29>
  402ccd:	mov    rdi,QWORD PTR [r12+0x28]
  402cd2:	mov    rsi,r15
  402cd5:	mov    edx,ebx
  402cd7:	call   4022f0 <rb_rawbuf_append@plt>
  402cdc:	test   BYTE PTR [r12+0xb8],0x8
  402ce5:	jne    402d00 <rb_base64_encode@plt+0x9d0>
  402ce7:	mov    rdi,r12
  402cea:	call   403270 <rb_base64_encode@plt+0xf40>
  402cef:	jmp    402d08 <rb_base64_encode@plt+0x9d8>
  402cf1:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402cfb:	nop    DWORD PTR [rax+rax*1+0x0]
  402d00:	mov    rdi,r12
  402d03:	call   403490 <rb_base64_encode@plt+0x1160>
  402d08:	movsxd rax,ebx
  402d0b:	cmp    rax,0x4000
  402d11:	jb     402d6e <rb_base64_encode@plt+0xa3e>
  402d13:	test   BYTE PTR [r12+0xb8],0x2
  402d1c:	je     402cb0 <rb_base64_encode@plt+0x980>
  402d1e:	jmp    402d85 <rb_base64_encode@plt+0xa55>
  402d20:	call   402220 <__errno_location@plt>
  402d25:	mov    edi,DWORD PTR [rax]
  402d27:	call   402070 <rb_ignore_errno@plt>
  402d2c:	test   eax,eax
  402d2e:	je     402d59 <rb_base64_encode@plt+0xa29>
  402d30:	lea    rdx,[rip+0xffffffffffffff29]        # 402c60 <rb_base64_encode@plt+0x930>
  402d37:	mov    esi,0x1
  402d3c:	mov    rdi,r14
  402d3f:	mov    rcx,r12
  402d42:	call   402090 <rb_setselect@plt>
  402d47:	mov    rdi,QWORD PTR [r12+0x90]
  402d4f:	mov    rsi,r12
  402d52:	call   402ef0 <rb_base64_encode@plt+0xbc0>
  402d57:	jmp    402d85 <rb_base64_encode@plt+0xa55>
  402d59:	lea    rdx,[rip+0x3379]        # 4060d9 <rb_base64_encode@plt+0x3da9>
  402d60:	xor    esi,esi
  402d62:	xor    eax,eax
  402d64:	mov    rdi,r12
  402d67:	call   402f90 <rb_base64_encode@plt+0xc60>
  402d6c:	jmp    402d85 <rb_base64_encode@plt+0xa55>
  402d6e:	lea    rdx,[rip+0xfffffffffffffeeb]        # 402c60 <rb_base64_encode@plt+0x930>
  402d75:	mov    esi,0x1
  402d7a:	mov    rdi,r14
  402d7d:	mov    rcx,r12
  402d80:	call   402090 <rb_setselect@plt>
  402d85:	add    rsp,0x4008
  402d8c:	pop    rbx
  402d8d:	pop    r12
  402d8f:	pop    r14
  402d91:	pop    r15
  402d93:	ret    
  402d94:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402d9e:	xchg   ax,ax
  402da0:	push   r15
  402da2:	push   r14
  402da4:	push   rbx
  402da5:	sub    rsp,0x4000
  402dac:	mov    rbx,rsi
  402daf:	mov    rdi,rsp
  402db2:	xor    esi,esi
  402db4:	mov    edx,0x4000
  402db9:	call   402050 <memset@plt>
  402dbe:	test   rbx,rbx
  402dc1:	je     402eda <rb_base64_encode@plt+0xbaa>
  402dc7:	test   BYTE PTR [rbx+0xb8],0x2
  402dce:	jne    402eda <rb_base64_encode@plt+0xbaa>
  402dd4:	mov    rdi,QWORD PTR [rbx+0x20]
  402dd8:	call   4021d0 <rb_rawbuf_length@plt>
  402ddd:	cmp    eax,0xfff
  402de2:	jle    402e21 <rb_base64_encode@plt+0xaf1>
  402de4:	or     BYTE PTR [rbx+0xb8],0x1
  402deb:	mov    rdi,QWORD PTR [rbx+0x90]
  402df2:	mov    esi,0x1
  402df7:	xor    edx,edx
  402df9:	xor    ecx,ecx
  402dfb:	call   402090 <rb_setselect@plt>
  402e00:	test   BYTE PTR [rbx+0xb8],0x8
  402e07:	je     402eda <rb_base64_encode@plt+0xbaa>
  402e0d:	mov    rdi,QWORD PTR [rbx+0x88]
  402e14:	mov    rsi,rbx
  402e17:	call   403d00 <rb_base64_encode@plt+0x19d0>
  402e1c:	jmp    402eda <rb_base64_encode@plt+0xbaa>
  402e21:	lea    r14,[rbx+0x58]
  402e25:	mov    r15,rsp
  402e28:	nop    DWORD PTR [rax+rax*1+0x0]
  402e30:	test   BYTE PTR [rbx+0xb8],0x2
  402e37:	jne    402eda <rb_base64_encode@plt+0xbaa>
  402e3d:	mov    rdi,QWORD PTR [rbx+0x90]
  402e44:	mov    edx,0x4000
  402e49:	mov    rsi,r15
  402e4c:	call   402130 <rb_read@plt>
  402e51:	test   eax,eax
  402e53:	je     402ecc <rb_base64_encode@plt+0xb9c>
  402e55:	js     402e8e <rb_base64_encode@plt+0xb5e>
  402e57:	movsxd rcx,eax
  402e5a:	add    QWORD PTR [rbx+0xa8],rcx
  402e61:	xor    ecx,ecx
  402e63:	mov    rdi,r14
  402e66:	mov    rsi,r15
  402e69:	mov    edx,eax
  402e6b:	call   4020d0 <rb_linebuf_parse@plt>
  402e70:	test   BYTE PTR [rbx+0xb8],0x2
  402e77:	jne    402eda <rb_base64_encode@plt+0xbaa>
  402e79:	mov    rdi,QWORD PTR [rbx+0x20]
  402e7d:	call   4021d0 <rb_rawbuf_length@plt>
  402e82:	cmp    eax,0x1000
  402e87:	jl     402e30 <rb_base64_encode@plt+0xb00>
  402e89:	jmp    402de4 <rb_base64_encode@plt+0xab4>
  402e8e:	call   402220 <__errno_location@plt>
  402e93:	mov    edi,DWORD PTR [rax]
  402e95:	call   402070 <rb_ignore_errno@plt>
  402e9a:	test   eax,eax
  402e9c:	je     402ecc <rb_base64_encode@plt+0xb9c>
  402e9e:	mov    rdi,QWORD PTR [rbx+0x90]
  402ea5:	lea    rdx,[rip+0xfffffffffffffef4]        # 402da0 <rb_base64_encode@plt+0xa70>
  402eac:	mov    esi,0x1
  402eb1:	mov    rcx,rbx
  402eb4:	call   402090 <rb_setselect@plt>
  402eb9:	test   BYTE PTR [rbx+0xb8],0x8
  402ec0:	je     402eda <rb_base64_encode@plt+0xbaa>
  402ec2:	mov    rdi,rbx
  402ec5:	call   403ae0 <rb_base64_encode@plt+0x17b0>
  402eca:	jmp    402eda <rb_base64_encode@plt+0xbaa>
  402ecc:	xor    esi,esi
  402ece:	xor    edx,edx
  402ed0:	xor    eax,eax
  402ed2:	mov    rdi,rbx
  402ed5:	call   402f90 <rb_base64_encode@plt+0xc60>
  402eda:	add    rsp,0x4000
  402ee1:	pop    rbx
  402ee2:	pop    r14
  402ee4:	pop    r15
  402ee6:	ret    
  402ee7:	nop    WORD PTR [rax+rax*1+0x0]
  402ef0:	push   r15
  402ef2:	push   r14
  402ef4:	push   rbx
  402ef5:	test   BYTE PTR [rsi+0xb8],0x2
  402efc:	jne    402f5b <rb_base64_encode@plt+0xc2b>
  402efe:	mov    r14,rsi
  402f01:	mov    r15,rdi
  402f04:	lea    rbx,[rsi+0x30]
  402f08:	jmp    402f19 <rb_base64_encode@plt+0xbe9>
  402f0a:	nop    WORD PTR [rax+rax*1+0x0]
  402f10:	cdqe   
  402f12:	add    QWORD PTR [r14+0xb0],rax
  402f19:	mov    rdi,r15
  402f1c:	mov    rsi,rbx
  402f1f:	call   402160 <rb_linebuf_flush@plt>
  402f24:	test   eax,eax
  402f26:	jg     402f10 <rb_base64_encode@plt+0xbe0>
  402f28:	test   eax,eax
  402f2a:	je     402f61 <rb_base64_encode@plt+0xc31>
  402f2c:	call   402220 <__errno_location@plt>
  402f31:	mov    edi,DWORD PTR [rax]
  402f33:	call   402070 <rb_ignore_errno@plt>
  402f38:	test   eax,eax
  402f3a:	je     402f61 <rb_base64_encode@plt+0xc31>
  402f3c:	cmp    DWORD PTR [r14+0x4c],0x0
  402f41:	mov    rdi,QWORD PTR [r14+0x90]
  402f48:	jle    402f71 <rb_base64_encode@plt+0xc41>
  402f4a:	lea    rdx,[rip+0xffffffffffffff9f]        # 402ef0 <rb_base64_encode@plt+0xbc0>
  402f51:	mov    esi,0x2
  402f56:	mov    rcx,r14
  402f59:	jmp    402f7a <rb_base64_encode@plt+0xc4a>
  402f5b:	pop    rbx
  402f5c:	pop    r14
  402f5e:	pop    r15
  402f60:	ret    
  402f61:	xor    esi,esi
  402f63:	xor    edx,edx
  402f65:	xor    eax,eax
  402f67:	mov    rdi,r14
  402f6a:	pop    rbx
  402f6b:	pop    r14
  402f6d:	pop    r15
  402f6f:	jmp    402f90 <rb_base64_encode@plt+0xc60>
  402f71:	mov    esi,0x2
  402f76:	xor    edx,edx
  402f78:	xor    ecx,ecx
  402f7a:	pop    rbx
  402f7b:	pop    r14
  402f7d:	pop    r15
  402f7f:	jmp    402090 <rb_setselect@plt>
  402f84:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402f8e:	xchg   ax,ax
  402f90:	push   rbp
  402f91:	push   r15
  402f93:	push   r14
  402f95:	push   rbx
  402f96:	sub    rsp,0x258
  402f9d:	mov    r14,rdx
  402fa0:	mov    r15d,esi
  402fa3:	mov    rbx,rdi
  402fa6:	test   al,al
  402fa8:	je     402fe9 <rb_base64_encode@plt+0xcb9>
  402faa:	vmovaps XMMWORD PTR [rsp+0x50],xmm0
  402fb0:	vmovaps XMMWORD PTR [rsp+0x60],xmm1
  402fb6:	vmovaps XMMWORD PTR [rsp+0x70],xmm2
  402fbc:	vmovaps XMMWORD PTR [rsp+0x80],xmm3
  402fc5:	vmovaps XMMWORD PTR [rsp+0x90],xmm4
  402fce:	vmovaps XMMWORD PTR [rsp+0xa0],xmm5
  402fd7:	vmovaps XMMWORD PTR [rsp+0xb0],xmm6
  402fe0:	vmovaps XMMWORD PTR [rsp+0xc0],xmm7
  402fe9:	mov    QWORD PTR [rsp+0x48],r9
  402fee:	mov    QWORD PTR [rsp+0x40],r8
  402ff3:	mov    QWORD PTR [rsp+0x38],rcx
  402ff8:	movzx  eax,BYTE PTR [rbx+0xb8]
  402fff:	test   al,0x2
  403001:	jne    403240 <rb_base64_encode@plt+0xf10>
  403007:	test   al,0x8
  403009:	je     403013 <rb_base64_encode@plt+0xce3>
  40300b:	mov    rdi,rbx
  40300e:	call   403ae0 <rb_base64_encode@plt+0x17b0>
  403013:	mov    rdi,QWORD PTR [rbx+0x20]
  403017:	mov    rsi,QWORD PTR [rbx+0x88]
  40301e:	call   402300 <rb_rawbuf_flush@plt>
  403023:	mov    rdi,QWORD PTR [rbx+0x90]
  40302a:	lea    rsi,[rbx+0x30]
  40302e:	call   402160 <rb_linebuf_flush@plt>
  403033:	mov    rdi,QWORD PTR [rbx+0x88]
  40303a:	call   4021b0 <rb_close@plt>
  40303f:	or     BYTE PTR [rbx+0xb8],0x2
  403046:	mov    eax,DWORD PTR [rbx+0x80]
  40304c:	imul   rcx,rax,0x10624dd3
  403053:	shr    rcx,0x27
  403057:	imul   ecx,ecx,0x7d0
  40305d:	sub    eax,ecx
  40305f:	lea    rax,[rax+rax*2]
  403063:	lea    rcx,[rip+0x5186]        # 4081f0 <rb_base64_encode@plt+0x5ec0>
  40306a:	lea    rdx,[rcx+rax*8]
  40306e:	mov    rbp,QWORD PTR [rbx+0x8]
  403072:	mov    rdi,QWORD PTR [rbx+0x10]
  403076:	lea    rsi,[rbx+0x8]
  40307a:	test   rdi,rdi
  40307d:	je     403088 <rb_base64_encode@plt+0xd58>
  40307f:	mov    QWORD PTR [rdi+0x8],rbp
  403083:	mov    rbp,QWORD PTR [rsi]
  403086:	jmp    40308d <rb_base64_encode@plt+0xd5d>
  403088:	mov    QWORD PTR [rcx+rax*8+0x8],rbp
  40308d:	test   rbp,rbp
  403090:	lea    rbp,[rbp+0x10]
  403094:	cmove  rbp,rdx
  403098:	mov    QWORD PTR [rbp+0x0],rdi
  40309c:	vxorps xmm0,xmm0,xmm0
  4030a0:	vmovups XMMWORD PTR [rsi],xmm0
  4030a4:	add    QWORD PTR [rcx+rax*8+0x10],0xffffffffffffffff
  4030aa:	mov    rdi,QWORD PTR [rbx+0x90]
  4030b1:	test   r15d,r15d
  4030b4:	je     4031e0 <rb_base64_encode@plt+0xeb0>
  4030ba:	test   r14,r14
  4030bd:	je     4031e0 <rb_base64_encode@plt+0xeb0>
  4030c3:	lea    rdx,[rip+0xb66]        # 403c30 <rb_base64_encode@plt+0x1900>
  4030ca:	mov    esi,0x1
  4030cf:	mov    rcx,rbx
  4030d2:	call   402090 <rb_setselect@plt>
  4030d7:	mov    rdi,QWORD PTR [rbx+0x90]
  4030de:	mov    esi,0x2
  4030e3:	xor    edx,edx
  4030e5:	xor    ecx,ecx
  4030e7:	call   402090 <rb_setselect@plt>
  4030ec:	lea    rax,[rsp+0x20]
  4030f1:	mov    QWORD PTR [rsp+0x10],rax
  4030f6:	lea    rax,[rsp+0x280]
  4030fe:	mov    QWORD PTR [rsp+0x8],rax
  403103:	movabs rax,0x3000000018
  40310d:	mov    QWORD PTR [rsp],rax
  403111:	lea    rbp,[rsp+0x1d0]
  403119:	mov    rcx,rsp
  40311c:	mov    esi,0x80
  403121:	mov    rdi,rbp
  403124:	mov    rdx,r14
  403127:	call   4021f0 <vsnprintf@plt>
  40312c:	mov    BYTE PTR [rsp+0xd0],0x44
  403134:	mov    eax,DWORD PTR [rbx+0x80]
  40313a:	mov    DWORD PTR [rsp+0xd1],eax
  403141:	lea    rdi,[rsp+0xd5]
  403149:	mov    edx,0xfb
  40314e:	mov    rsi,rbp
  403151:	call   4020e0 <rb_strlcpy@plt>
  403156:	mov    rdi,rbp
  403159:	call   402110 <strlen@plt>
  40315e:	mov    r15,rax
  403161:	mov    r14,QWORD PTR [rbx+0x18]
  403165:	mov    edi,0x1
  40316a:	mov    esi,0x50
  40316f:	call   402290 <calloc@plt>
  403174:	test   rax,rax
  403177:	je     403260 <rb_base64_encode@plt+0xf30>
  40317d:	mov    rbp,rax
  403180:	shl    r15,0x20
  403184:	movabs rbx,0x600000000
  40318e:	add    rbx,r15
  403191:	sar    rbx,0x20
  403195:	mov    edi,0x1
  40319a:	mov    rsi,rbx
  40319d:	call   402290 <calloc@plt>
  4031a2:	test   rax,rax
  4031a5:	je     403260 <rb_base64_encode@plt+0xf30>
  4031ab:	mov    QWORD PTR [rbp+0x18],rax
  4031af:	mov    QWORD PTR [rbp+0x20],rbx
  4031b3:	lea    rsi,[rsp+0xd0]
  4031bb:	mov    rdi,rax
  4031be:	mov    rdx,rbx
  4031c1:	call   402310 <memcpy@plt>
  4031c6:	mov    QWORD PTR [rbp+0x0],rbp
  4031ca:	mov    rax,QWORD PTR [r14+0x50]
  4031ce:	mov    QWORD PTR [rbp+0x8],rax
  4031d2:	test   rax,rax
  4031d5:	je     403224 <rb_base64_encode@plt+0xef4>
  4031d7:	add    rax,0x10
  4031db:	mov    QWORD PTR [rax],rbp
  4031de:	jmp    40322b <rb_base64_encode@plt+0xefb>
  4031e0:	call   4021b0 <rb_close@plt>
  4031e5:	mov    QWORD PTR [rbx],rbx
  4031e8:	mov    QWORD PTR [rbx+0x8],0x0
  4031f0:	mov    rax,QWORD PTR [rip+0x4fd9]        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  4031f7:	mov    QWORD PTR [rbx+0x10],rax
  4031fb:	test   rax,rax
  4031fe:	je     403209 <rb_base64_encode@plt+0xed9>
  403200:	add    rax,0x8
  403204:	mov    QWORD PTR [rax],rbx
  403207:	jmp    403213 <rb_base64_encode@plt+0xee3>
  403209:	cmp    QWORD PTR [rip+0x4fc7],0x0        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403211:	je     40324e <rb_base64_encode@plt+0xf1e>
  403213:	mov    QWORD PTR [rip+0x4fb6],rbx        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  40321a:	add    QWORD PTR [rip+0x4fbe],0x1        # 4081e0 <rb_base64_encode@plt+0x5eb0>
  403222:	jmp    403240 <rb_base64_encode@plt+0xf10>
  403224:	cmp    QWORD PTR [r14+0x48],0x0
  403229:	je     403257 <rb_base64_encode@plt+0xf27>
  40322b:	mov    QWORD PTR [r14+0x50],rbp
  40322f:	add    QWORD PTR [r14+0x58],0x1
  403234:	mov    rdi,QWORD PTR [r14+0x20]
  403238:	mov    rsi,r14
  40323b:	call   403e10 <rb_base64_encode@plt+0x1ae0>
  403240:	add    rsp,0x258
  403247:	pop    rbx
  403248:	pop    r14
  40324a:	pop    r15
  40324c:	pop    rbp
  40324d:	ret    
  40324e:	lea    rax,[rip+0x4f83]        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403255:	jmp    403204 <rb_base64_encode@plt+0xed4>
  403257:	lea    rax,[r14+0x48]
  40325b:	jmp    4031db <rb_base64_encode@plt+0xeab>
  403260:	call   402210 <rb_outofmemory@plt>
  403265:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40326f:	nop
  403270:	push   rbp
  403271:	push   r15
  403273:	push   r14
  403275:	push   r13
  403277:	push   r12
  403279:	push   rbx
  40327a:	sub    rsp,0x4088
  403281:	mov    r14,rdi
  403284:	lea    rbx,[rsp+0x80]
  40328c:	xor    esi,esi
  40328e:	mov    edx,0x4000
  403293:	mov    rdi,rbx
  403296:	call   402050 <memset@plt>
  40329b:	mov    rdi,QWORD PTR [r14+0x28]
  40329f:	mov    edx,0x4000
  4032a4:	mov    rsi,rbx
  4032a7:	call   402240 <rb_rawbuf_get@plt>
  4032ac:	test   eax,eax
  4032ae:	je     40337a <rb_base64_encode@plt+0x104a>
  4032b4:	lea    rbp,[rsp+0x4080]
  4032bc:	lea    r12,[r14+0xb9]
  4032c3:	lea    r13,[r14+0xb8]
  4032ca:	lea    r15,[rip+0x2e4c]        # 40611d <rb_base64_encode@plt+0x3ded>
  4032d1:	lea    rbx,[rsp+0x80]
  4032d9:	nop    DWORD PTR [rax+0x0]
  4032e0:	mov    rdi,rbx
  4032e3:	mov    rsi,r15
  4032e6:	call   4021a0 <rb_strcasestr@plt>
  4032eb:	test   rax,rax
  4032ee:	je     403355 <rb_base64_encode@plt+0x1025>
  4032f0:	add    rax,0x12
  4032f4:	cmp    rax,rbp
  4032f7:	jb     403309 <rb_base64_encode@plt+0xfd9>
  4032f9:	jmp    403316 <rb_base64_encode@plt+0xfe6>
  4032fb:	nop    DWORD PTR [rax+rax*1+0x0]
  403300:	add    rax,0x1
  403304:	cmp    rax,rbp
  403307:	jae    403316 <rb_base64_encode@plt+0xfe6>
  403309:	movzx  ecx,BYTE PTR [rax]
  40330c:	cmp    cl,0x20
  40330f:	je     403300 <rb_base64_encode@plt+0xfd0>
  403311:	cmp    cl,0x9
  403314:	je     403300 <rb_base64_encode@plt+0xfd0>
  403316:	cmp    rax,rbp
  403319:	jae    403340 <rb_base64_encode@plt+0x1010>
  40331b:	mov    rcx,rax
  40331e:	xchg   ax,ax
  403320:	movzx  edx,BYTE PTR [rcx]
  403323:	test   dl,dl
  403325:	je     403340 <rb_base64_encode@plt+0x1010>
  403327:	cmp    dl,0xd
  40332a:	je     40333c <rb_base64_encode@plt+0x100c>
  40332c:	cmp    dl,0xa
  40332f:	je     40333c <rb_base64_encode@plt+0x100c>
  403331:	add    rcx,0x1
  403335:	cmp    rcx,rbp
  403338:	jb     403320 <rb_base64_encode@plt+0xff0>
  40333a:	jmp    403340 <rb_base64_encode@plt+0x1010>
  40333c:	mov    BYTE PTR [rcx],0x0
  40333f:	nop
  403340:	mov    edx,0x25
  403345:	mov    rdi,r12
  403348:	mov    rsi,rax
  40334b:	call   4020e0 <rb_strlcpy@plt>
  403350:	or     BYTE PTR [r13+0x0],0x8
  403355:	mov    rdi,QWORD PTR [r14+0x28]
  403359:	mov    edx,0x4000
  40335e:	mov    rsi,rbx
  403361:	call   402240 <rb_rawbuf_get@plt>
  403366:	test   eax,eax
  403368:	jne    4032e0 <rb_base64_encode@plt+0xfb0>
  40336e:	test   BYTE PTR [r13+0x0],0x8
  403373:	jne    403388 <rb_base64_encode@plt+0x1058>
  403375:	jmp    403404 <rb_base64_encode@plt+0x10d4>
  40337a:	lea    r13,[r14+0xb8]
  403381:	test   BYTE PTR [r13+0x0],0x8
  403386:	je     403404 <rb_base64_encode@plt+0x10d4>
  403388:	lea    r15,[rsp+0x20]
  40338d:	mov    rdi,r15
  403390:	call   403f70 <rb_base64_encode@plt+0x1c40>
  403395:	lea    rbx,[r14+0xb9]
  40339c:	mov    rdi,rbx
  40339f:	call   402110 <strlen@plt>
  4033a4:	mov    rdi,r15
  4033a7:	mov    rsi,rbx
  4033aa:	mov    rdx,rax
  4033ad:	call   403f90 <rb_base64_encode@plt+0x1c60>
  4033b2:	lea    rsi,[rip+0x2d77]        # 406130 <rb_base64_encode@plt+0x3e00>
  4033b9:	mov    edx,0x24
  4033be:	mov    rdi,r15
  4033c1:	call   403f90 <rb_base64_encode@plt+0x1c60>
  4033c6:	mov    rbx,rsp
  4033c9:	mov    rdi,r15
  4033cc:	mov    rsi,rbx
  4033cf:	call   4053d0 <rb_base64_encode@plt+0x30a0>
  4033d4:	mov    esi,0x14
  4033d9:	mov    rdi,rbx
  4033dc:	call   402330 <rb_base64_encode@plt>
  4033e1:	mov    rbx,rax
  4033e4:	mov    al,BYTE PTR [r14+0xb8]
  4033eb:	test   al,0x2
  4033ed:	je     403425 <rb_base64_encode@plt+0x10f5>
  4033ef:	test   al,0x2
  4033f1:	je     403445 <rb_base64_encode@plt+0x1115>
  4033f3:	test   al,0x2
  4033f5:	je     403466 <rb_base64_encode@plt+0x1136>
  4033f7:	test   rbx,rbx
  4033fa:	je     403404 <rb_base64_encode@plt+0x10d4>
  4033fc:	mov    rdi,rbx
  4033ff:	call   402100 <free@plt>
  403404:	mov    rdi,QWORD PTR [r14+0x88]
  40340b:	mov    rsi,r14
  40340e:	call   403d00 <rb_base64_encode@plt+0x19d0>
  403413:	add    rsp,0x4088
  40341a:	pop    rbx
  40341b:	pop    r12
  40341d:	pop    r13
  40341f:	pop    r14
  403421:	pop    r15
  403423:	pop    rbp
  403424:	ret    
  403425:	mov    rdi,QWORD PTR [r14+0x20]
  403429:	lea    rsi,[rip+0x2d25]        # 406155 <rb_base64_encode@plt+0x3e25>
  403430:	mov    edx,0x81
  403435:	call   4022f0 <rb_rawbuf_append@plt>
  40343a:	mov    al,BYTE PTR [r14+0xb8]
  403441:	test   al,0x2
  403443:	jne    4033f3 <rb_base64_encode@plt+0x10c3>
  403445:	mov    rdi,rbx
  403448:	call   402110 <strlen@plt>
  40344d:	mov    rdi,QWORD PTR [r14+0x20]
  403451:	mov    rsi,rbx
  403454:	mov    edx,eax
  403456:	call   4022f0 <rb_rawbuf_append@plt>
  40345b:	mov    al,BYTE PTR [r14+0xb8]
  403462:	test   al,0x2
  403464:	jne    4033f7 <rb_base64_encode@plt+0x10c7>
  403466:	mov    rdi,QWORD PTR [r14+0x20]
  40346a:	lea    rsi,[rip+0x2d66]        # 4061d7 <rb_base64_encode@plt+0x3ea7>
  403471:	mov    edx,0x4
  403476:	call   4022f0 <rb_rawbuf_append@plt>
  40347b:	test   rbx,rbx
  40347e:	jne    4033fc <rb_base64_encode@plt+0x10cc>
  403484:	jmp    403404 <rb_base64_encode@plt+0x10d4>
  403489:	nop    DWORD PTR [rax+0x0]
  403490:	push   rbp
  403491:	push   r15
  403493:	push   r14
  403495:	push   r13
  403497:	push   r12
  403499:	push   rbx
  40349a:	sub    rsp,0x4028
  4034a1:	mov    r14,rdi
  4034a4:	mov    rdi,QWORD PTR [rdi+0x28]
  4034a8:	lea    rsi,[rsp+0x10]
  4034ad:	mov    edx,0x2
  4034b2:	call   402240 <rb_rawbuf_get@plt>
  4034b7:	cmp    eax,0x2
  4034ba:	jne    403ab1 <rb_base64_encode@plt+0x1781>
  4034c0:	lea    rax,[r14+0x30]
  4034c4:	mov    QWORD PTR [rsp+0x18],rax
  4034c9:	lea    r15,[rsp+0x10]
  4034ce:	lea    r12,[rsp+0x20]
  4034d3:	jmp    4034f0 <rb_base64_encode@plt+0x11c0>
  4034d5:	xor    edi,edi
  4034d7:	test   rdx,rdx
  4034da:	jne    403894 <rb_base64_encode@plt+0x1564>
  4034e0:	jmp    4038e2 <rb_base64_encode@plt+0x15b2>
  4034e5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4034ef:	nop
  4034f0:	mov    r13b,BYTE PTR [rsp+0x11]
  4034f5:	mov    eax,r13d
  4034f8:	and    al,0x7f
  4034fa:	mov    BYTE PTR [rsp+0x11],al
  4034fe:	cmp    al,0x7f
  403500:	je     403a97 <rb_base64_encode@plt+0x1767>
  403506:	shr    r13b,0x7
  40350a:	cmp    al,0x7e
  40350c:	jne    403580 <rb_base64_encode@plt+0x1250>
  40350e:	xor    esi,esi
  403510:	mov    edx,0x4000
  403515:	mov    rdi,r12
  403518:	call   402050 <memset@plt>
  40351d:	mov    rdi,QWORD PTR [r14+0x28]
  403521:	mov    edx,0x2
  403526:	lea    rsi,[rsp+0x16]
  40352b:	call   402240 <rb_rawbuf_get@plt>
  403530:	test   eax,eax
  403532:	je     40374b <rb_base64_encode@plt+0x141b>
  403538:	movzx  eax,WORD PTR [rsp+0x16]
  40353d:	movbe  WORD PTR [rsp+0x16],ax
  403544:	test   r13b,r13b
  403547:	je     403766 <rb_base64_encode@plt+0x1436>
  40354d:	mov    rdi,QWORD PTR [r14+0x28]
  403551:	mov    edx,0x4
  403556:	lea    rsi,[rsp+0xc]
  40355b:	call   402240 <rb_rawbuf_get@plt>
  403560:	test   eax,eax
  403562:	je     403730 <rb_base64_encode@plt+0x1400>
  403568:	movzx  eax,WORD PTR [rsp+0x16]
  40356d:	jmp    40376a <rb_base64_encode@plt+0x143a>
  403572:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40357c:	nop    DWORD PTR [rax+0x0]
  403580:	test   r13b,r13b
  403583:	je     4035a4 <rb_base64_encode@plt+0x1274>
  403585:	mov    rdi,QWORD PTR [r14+0x28]
  403589:	mov    edx,0x4
  40358e:	lea    rsi,[rsp+0xc]
  403593:	call   402240 <rb_rawbuf_get@plt>
  403598:	test   eax,eax
  40359a:	je     403730 <rb_base64_encode@plt+0x1400>
  4035a0:	mov    al,BYTE PTR [rsp+0x11]
  4035a4:	mov    rdi,QWORD PTR [r14+0x28]
  4035a8:	movzx  edx,al
  4035ab:	mov    rsi,r12
  4035ae:	call   402240 <rb_rawbuf_get@plt>
  4035b3:	test   eax,eax
  4035b5:	je     4038f0 <rb_base64_encode@plt+0x15c0>
  4035bb:	test   r13b,r13b
  4035be:	je     403a80 <rb_base64_encode@plt+0x1750>
  4035c4:	test   eax,eax
  4035c6:	jle    403a80 <rb_base64_encode@plt+0x1750>
  4035cc:	mov    r9d,eax
  4035cf:	cmp    eax,0x80
  4035d4:	jb     40390b <rb_base64_encode@plt+0x15db>
  4035da:	lea    rcx,[r9-0x1]
  4035de:	mov    ebx,0x0
  4035e3:	cmp    rcx,0x3
  4035e7:	ja     40390d <rb_base64_encode@plt+0x15dd>
  4035ed:	mov    ebx,r9d
  4035f0:	and    ebx,0xffffff80
  4035f3:	lea    rdi,[rbx-0x80]
  4035f7:	mov    rdx,rdi
  4035fa:	shr    rdx,0x7
  4035fe:	add    rdx,0x1
  403602:	mov    ecx,edx
  403604:	and    ecx,0x1
  403607:	test   rdi,rdi
  40360a:	je     4039bf <rb_base64_encode@plt+0x168f>
  403610:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  403616:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  40361c:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  403622:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  403628:	mov    edi,0x1
  40362d:	sub    rdi,rdx
  403630:	lea    rbp,[rcx+rdi*1]
  403634:	add    rbp,0xffffffffffffffff
  403638:	xor    edi,edi
  40363a:	nop    WORD PTR [rax+rax*1+0x0]
  403640:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  403646:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  40364c:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  403652:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  40365b:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm4
  403661:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm5
  403667:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm6
  40366d:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm7
  403676:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0xa0]
  40367f:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0xc0]
  403688:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0xe0]
  403691:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x100]
  40369a:	vmovups YMMWORD PTR [rsp+rdi*1+0xa0],ymm4
  4036a3:	vmovups YMMWORD PTR [rsp+rdi*1+0xc0],ymm5
  4036ac:	vmovups YMMWORD PTR [rsp+rdi*1+0xe0],ymm6
  4036b5:	vmovups YMMWORD PTR [rsp+rdi*1+0x100],ymm7
  4036be:	add    rdi,0x100
  4036c5:	add    rbp,0x2
  4036c9:	jne    403640 <rb_base64_encode@plt+0x1310>
  4036cf:	test   rcx,rcx
  4036d2:	je     403722 <rb_base64_encode@plt+0x13f2>
  4036d4:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  4036da:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  4036e0:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  4036e6:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  4036ec:	vxorps ymm0,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  4036f2:	vxorps ymm1,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  4036f8:	vxorps ymm2,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  4036fe:	vxorps ymm3,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  403707:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm0
  40370d:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm1
  403713:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm2
  403719:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm3
  403722:	cmp    rbx,r9
  403725:	jne    40390d <rb_base64_encode@plt+0x15dd>
  40372b:	jmp    403a80 <rb_base64_encode@plt+0x1750>
  403730:	mov    esi,0x1
  403735:	xor    eax,eax
  403737:	mov    rdi,r14
  40373a:	lea    rdx,[rip+0x2ac9]        # 40620a <rb_base64_encode@plt+0x3eda>
  403741:	call   402f90 <rb_base64_encode@plt+0xc60>
  403746:	jmp    403a97 <rb_base64_encode@plt+0x1767>
  40374b:	mov    esi,0x1
  403750:	xor    eax,eax
  403752:	mov    rdi,r14
  403755:	lea    rdx,[rip+0x2a80]        # 4061dc <rb_base64_encode@plt+0x3eac>
  40375c:	call   402f90 <rb_base64_encode@plt+0xc60>
  403761:	jmp    403a97 <rb_base64_encode@plt+0x1767>
  403766:	rol    ax,0x8
  40376a:	mov    rdi,QWORD PTR [r14+0x28]
  40376e:	movzx  edx,ax
  403771:	mov    rsi,r12
  403774:	call   402240 <rb_rawbuf_get@plt>
  403779:	test   eax,eax
  40377b:	je     4038f0 <rb_base64_encode@plt+0x15c0>
  403781:	test   r13b,r13b
  403784:	je     403a80 <rb_base64_encode@plt+0x1750>
  40378a:	test   eax,eax
  40378c:	jle    403a80 <rb_base64_encode@plt+0x1750>
  403792:	mov    r8d,eax
  403795:	cmp    eax,0x80
  40379a:	jb     4039cf <rb_base64_encode@plt+0x169f>
  4037a0:	lea    rcx,[r8-0x1]
  4037a4:	mov    esi,0x0
  4037a9:	cmp    rcx,0x3
  4037ad:	ja     4039d1 <rb_base64_encode@plt+0x16a1>
  4037b3:	mov    esi,r8d
  4037b6:	and    esi,0xffffff80
  4037b9:	lea    rcx,[rsi-0x80]
  4037bd:	mov    rdi,rcx
  4037c0:	shr    rdi,0x7
  4037c4:	add    rdi,0x1
  4037c8:	mov    edx,edi
  4037ca:	and    edx,0x1
  4037cd:	test   rcx,rcx
  4037d0:	je     4034d5 <rb_base64_encode@plt+0x11a5>
  4037d6:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  4037dc:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  4037e2:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  4037e8:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  4037ee:	mov    ecx,0x1
  4037f3:	sub    rcx,rdi
  4037f6:	lea    rbp,[rdx+rcx*1]
  4037fa:	add    rbp,0xffffffffffffffff
  4037fe:	xor    edi,edi
  403800:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  403806:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  40380c:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  403812:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  40381b:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm4
  403821:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm5
  403827:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm6
  40382d:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm7
  403836:	vxorps ymm4,ymm0,YMMWORD PTR [rsp+rdi*1+0xa0]
  40383f:	vxorps ymm5,ymm1,YMMWORD PTR [rsp+rdi*1+0xc0]
  403848:	vxorps ymm6,ymm2,YMMWORD PTR [rsp+rdi*1+0xe0]
  403851:	vxorps ymm7,ymm3,YMMWORD PTR [rsp+rdi*1+0x100]
  40385a:	vmovups YMMWORD PTR [rsp+rdi*1+0xa0],ymm4
  403863:	vmovups YMMWORD PTR [rsp+rdi*1+0xc0],ymm5
  40386c:	vmovups YMMWORD PTR [rsp+rdi*1+0xe0],ymm6
  403875:	vmovups YMMWORD PTR [rsp+rdi*1+0x100],ymm7
  40387e:	add    rdi,0x100
  403885:	add    rbp,0x2
  403889:	jne    403800 <rb_base64_encode@plt+0x14d0>
  40388f:	test   rdx,rdx
  403892:	je     4038e2 <rb_base64_encode@plt+0x15b2>
  403894:	vmovups ymm0,YMMWORD PTR [rsp+0xc]
  40389a:	vmovups ymm1,YMMWORD PTR [rsp+0x2c]
  4038a0:	vmovups ymm2,YMMWORD PTR [rsp+0x4c]
  4038a6:	vmovups ymm3,YMMWORD PTR [rsp+0x6c]
  4038ac:	vxorps ymm0,ymm0,YMMWORD PTR [rsp+rdi*1+0x20]
  4038b2:	vxorps ymm1,ymm1,YMMWORD PTR [rsp+rdi*1+0x40]
  4038b8:	vxorps ymm2,ymm2,YMMWORD PTR [rsp+rdi*1+0x60]
  4038be:	vxorps ymm3,ymm3,YMMWORD PTR [rsp+rdi*1+0x80]
  4038c7:	vmovups YMMWORD PTR [rsp+rdi*1+0x20],ymm0
  4038cd:	vmovups YMMWORD PTR [rsp+rdi*1+0x40],ymm1
  4038d3:	vmovups YMMWORD PTR [rsp+rdi*1+0x60],ymm2
  4038d9:	vmovups YMMWORD PTR [rsp+rdi*1+0x80],ymm3
  4038e2:	cmp    rsi,r8
  4038e5:	jne    4039d1 <rb_base64_encode@plt+0x16a1>
  4038eb:	jmp    403a80 <rb_base64_encode@plt+0x1750>
  4038f0:	mov    esi,0x1
  4038f5:	xor    eax,eax
  4038f7:	mov    rdi,r14
  4038fa:	lea    rdx,[rip+0x2935]        # 406236 <rb_base64_encode@plt+0x3f06>
  403901:	call   402f90 <rb_base64_encode@plt+0xc60>
  403906:	jmp    403a97 <rb_base64_encode@plt+0x1767>
  40390b:	xor    ebx,ebx
  40390d:	mov    r8,rbx
  403910:	not    r8
  403913:	add    r8,r9
  403916:	mov    rdi,r9
  403919:	and    rdi,0x3
  40391d:	je     40395b <rb_base64_encode@plt+0x162b>
  40391f:	mov    rdx,rbx
  403922:	neg    rdx
  403925:	mov    ecx,ebx
  403927:	and    ecx,0x3
  40392a:	lea    rbp,[rsp+rcx*1]
  40392e:	add    rbp,0xc
  403932:	lea    rsi,[rsp+rbx*1]
  403936:	add    rsi,0x20
  40393a:	xor    ecx,ecx
  40393c:	nop    DWORD PTR [rax+0x0]
  403940:	movzx  ebx,BYTE PTR [rbp+rcx*1+0x0]
  403945:	xor    BYTE PTR [rsi+rcx*1],bl
  403948:	add    rdx,0xffffffffffffffff
  40394c:	add    rcx,0x1
  403950:	cmp    rdi,rcx
  403953:	jne    403940 <rb_base64_encode@plt+0x1610>
  403955:	neg    rdx
  403958:	mov    rbx,rdx
  40395b:	cmp    r8,0x3
  40395f:	jb     403a80 <rb_base64_encode@plt+0x1750>
  403965:	mov    ecx,ebx
  403967:	and    ecx,0x3
  40396a:	lea    edx,[rbx+0x1]
  40396d:	and    edx,0x3
  403970:	lea    esi,[rbx-0x1]
  403973:	and    esi,0x3
  403976:	mov    dil,BYTE PTR [rsp+rcx*1+0xc]
  40397b:	xor    rcx,0x2
  40397f:	mov    r8b,BYTE PTR [rsp+rdx*1+0xc]
  403984:	mov    dl,BYTE PTR [rsp+rcx*1+0xc]
  403988:	mov    cl,BYTE PTR [rsp+rsi*1+0xc]
  40398c:	sub    r9,rbx
  40398f:	lea    rsi,[rsp+0x23]
  403994:	add    rbx,rsi
  403997:	xor    ebp,ebp
  403999:	nop    DWORD PTR [rax+0x0]
  4039a0:	xor    BYTE PTR [rbx+rbp*1-0x3],dil
  4039a5:	xor    BYTE PTR [rbx+rbp*1-0x2],r8b
  4039aa:	xor    BYTE PTR [rbx+rbp*1-0x1],dl
  4039ae:	xor    BYTE PTR [rbx+rbp*1],cl
  4039b1:	add    rbp,0x4
  4039b5:	cmp    r9,rbp
  4039b8:	jne    4039a0 <rb_base64_encode@plt+0x1670>
  4039ba:	jmp    403a80 <rb_base64_encode@plt+0x1750>
  4039bf:	xor    edi,edi
  4039c1:	test   rcx,rcx
  4039c4:	jne    4036d4 <rb_base64_encode@plt+0x13a4>
  4039ca:	jmp    403722 <rb_base64_encode@plt+0x13f2>
  4039cf:	xor    esi,esi
  4039d1:	mov    r9,rsi
  4039d4:	not    r9
  4039d7:	add    r9,r8
  4039da:	mov    rdi,r8
  4039dd:	and    rdi,0x3
  4039e1:	je     403a1b <rb_base64_encode@plt+0x16eb>
  4039e3:	mov    rdx,rsi
  4039e6:	neg    rdx
  4039e9:	mov    ecx,esi
  4039eb:	and    ecx,0x3
  4039ee:	lea    rbp,[rsp+rcx*1]
  4039f2:	add    rbp,0xc
  4039f6:	add    rsi,rsp
  4039f9:	add    rsi,0x20
  4039fd:	xor    ebx,ebx
  4039ff:	nop
  403a00:	movzx  ecx,BYTE PTR [rbp+rbx*1+0x0]
  403a05:	xor    BYTE PTR [rsi+rbx*1],cl
  403a08:	add    rdx,0xffffffffffffffff
  403a0c:	add    rbx,0x1
  403a10:	cmp    rdi,rbx
  403a13:	jne    403a00 <rb_base64_encode@plt+0x16d0>
  403a15:	neg    rdx
  403a18:	mov    rsi,rdx
  403a1b:	cmp    r9,0x3
  403a1f:	jb     403a80 <rb_base64_encode@plt+0x1750>
  403a21:	mov    ecx,esi
  403a23:	and    ecx,0x3
  403a26:	lea    edx,[rsi+0x1]
  403a29:	and    edx,0x3
  403a2c:	lea    ebp,[rsi-0x1]
  403a2f:	and    ebp,0x3
  403a32:	mov    dil,BYTE PTR [rsp+rcx*1+0xc]
  403a37:	xor    rcx,0x2
  403a3b:	mov    bl,BYTE PTR [rsp+rdx*1+0xc]
  403a3f:	mov    cl,BYTE PTR [rsp+rcx*1+0xc]
  403a43:	mov    dl,BYTE PTR [rsp+rbp*1+0xc]
  403a47:	sub    r8,rsi
  403a4a:	lea    rbp,[rsp+0x23]
  403a4f:	add    rsi,rbp
  403a52:	xor    ebp,ebp
  403a54:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403a5e:	xchg   ax,ax
  403a60:	xor    BYTE PTR [rsi+rbp*1-0x3],dil
  403a65:	xor    BYTE PTR [rsi+rbp*1-0x2],bl
  403a69:	xor    BYTE PTR [rsi+rbp*1-0x1],cl
  403a6d:	xor    BYTE PTR [rsi+rbp*1],dl
  403a70:	add    rbp,0x4
  403a74:	cmp    r8,rbp
  403a77:	jne    403a60 <rb_base64_encode@plt+0x1730>
  403a79:	nop    DWORD PTR [rax+0x0]
  403a80:	mov    ecx,0x1
  403a85:	mov    rdi,QWORD PTR [rsp+0x18]
  403a8a:	mov    rsi,r12
  403a8d:	mov    edx,eax
  403a8f:	vzeroupper 
  403a92:	call   4020d0 <rb_linebuf_parse@plt>
  403a97:	mov    rdi,QWORD PTR [r14+0x28]
  403a9b:	mov    edx,0x2
  403aa0:	mov    rsi,r15
  403aa3:	call   402240 <rb_rawbuf_get@plt>
  403aa8:	cmp    eax,0x2
  403aab:	je     4034f0 <rb_base64_encode@plt+0x11c0>
  403ab1:	mov    rdi,QWORD PTR [r14+0x90]
  403ab8:	mov    rsi,r14
  403abb:	call   402ef0 <rb_base64_encode@plt+0xbc0>
  403ac0:	add    rsp,0x4028
  403ac7:	pop    rbx
  403ac8:	pop    r12
  403aca:	pop    r13
  403acc:	pop    r14
  403ace:	pop    r15
  403ad0:	pop    rbp
  403ad1:	ret    
  403ad2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403adc:	nop    DWORD PTR [rax+0x0]
  403ae0:	push   rbp
  403ae1:	push   r15
  403ae3:	push   r14
  403ae5:	push   r13
  403ae7:	push   r12
  403ae9:	push   rbx
  403aea:	sub    rsp,0x4018
  403af1:	mov    rbx,rdi
  403af4:	lea    rbp,[rsp+0x10]
  403af9:	xor    esi,esi
  403afb:	mov    edx,0x4000
  403b00:	mov    rdi,rbp
  403b03:	call   402050 <memset@plt>
  403b08:	lea    r14,[rbx+0x58]
  403b0c:	mov    edx,0x4000
  403b11:	xor    ecx,ecx
  403b13:	xor    r8d,r8d
  403b16:	mov    rdi,r14
  403b19:	mov    rsi,rbp
  403b1c:	call   402150 <rb_linebuf_get@plt>
  403b21:	mov    ebp,eax
  403b23:	mov    al,BYTE PTR [rbx+0xb8]
  403b29:	test   ebp,ebp
  403b2b:	je     403bfe <rb_base64_encode@plt+0x18ce>
  403b31:	lea    r15,[rsp+0xc]
  403b36:	lea    r12,[rsp+0x10]
  403b3b:	lea    r13,[rip+0x2697]        # 4061d9 <rb_base64_encode@plt+0x3ea9>
  403b42:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403b4c:	nop    DWORD PTR [rax+0x0]
  403b50:	test   al,0x2
  403b52:	jne    403bd8 <rb_base64_encode@plt+0x18a8>
  403b58:	cmp    ebp,0x7a
  403b5b:	jg     403b80 <rb_base64_encode@plt+0x1850>
  403b5d:	mov    WORD PTR [rsp+0xc],0x81
  403b64:	mov    eax,ebp
  403b66:	add    al,0x2
  403b68:	and    al,0x7f
  403b6a:	mov    BYTE PTR [rsp+0xd],al
  403b6e:	mov    rdi,QWORD PTR [rbx+0x20]
  403b72:	mov    edx,0x2
  403b77:	jmp    403b9b <rb_base64_encode@plt+0x186b>
  403b79:	nop    DWORD PTR [rax+0x0]
  403b80:	mov    DWORD PTR [rsp+0xc],0x7e81
  403b88:	lea    eax,[rbp+0x2]
  403b8b:	movbe  WORD PTR [rsp+0xe],ax
  403b92:	mov    rdi,QWORD PTR [rbx+0x20]
  403b96:	mov    edx,0x4
  403b9b:	mov    rsi,r15
  403b9e:	call   4022f0 <rb_rawbuf_append@plt>
  403ba3:	movzx  eax,BYTE PTR [rbx+0xb8]
  403baa:	test   al,0x2
  403bac:	jne    403bc3 <rb_base64_encode@plt+0x1893>
  403bae:	mov    rdi,QWORD PTR [rbx+0x20]
  403bb2:	mov    rsi,r12
  403bb5:	mov    edx,ebp
  403bb7:	call   4022f0 <rb_rawbuf_append@plt>
  403bbc:	movzx  eax,BYTE PTR [rbx+0xb8]
  403bc3:	test   al,0x2
  403bc5:	jne    403bd8 <rb_base64_encode@plt+0x18a8>
  403bc7:	mov    rdi,QWORD PTR [rbx+0x20]
  403bcb:	mov    edx,0x2
  403bd0:	mov    rsi,r13
  403bd3:	call   4022f0 <rb_rawbuf_append@plt>
  403bd8:	mov    edx,0x4000
  403bdd:	xor    ecx,ecx
  403bdf:	xor    r8d,r8d
  403be2:	mov    rdi,r14
  403be5:	mov    rsi,r12
  403be8:	call   402150 <rb_linebuf_get@plt>
  403bed:	mov    ebp,eax
  403bef:	movzx  eax,BYTE PTR [rbx+0xb8]
  403bf6:	test   ebp,ebp
  403bf8:	jne    403b50 <rb_base64_encode@plt+0x1820>
  403bfe:	test   al,0x8
  403c00:	je     403c11 <rb_base64_encode@plt+0x18e1>
  403c02:	mov    rdi,QWORD PTR [rbx+0x88]
  403c09:	mov    rsi,rbx
  403c0c:	call   403d00 <rb_base64_encode@plt+0x19d0>
  403c11:	add    rsp,0x4018
  403c18:	pop    rbx
  403c19:	pop    r12
  403c1b:	pop    r13
  403c1d:	pop    r14
  403c1f:	pop    r15
  403c21:	pop    rbp
  403c22:	ret    
  403c23:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403c2d:	nop    DWORD PTR [rax]
  403c30:	push   r14
  403c32:	push   rbx
  403c33:	sub    rsp,0x4008
  403c3a:	test   rsi,rsi
  403c3d:	je     403ce0 <rb_base64_encode@plt+0x19b0>
  403c43:	mov    rbx,rsi
  403c46:	mov    r14,rsp
  403c49:	nop    DWORD PTR [rax+0x0]
  403c50:	mov    rdi,QWORD PTR [rbx+0x90]
  403c57:	mov    edx,0x4000
  403c5c:	mov    rsi,r14
  403c5f:	call   402130 <rb_read@plt>
  403c64:	test   eax,eax
  403c66:	je     403c97 <rb_base64_encode@plt+0x1967>
  403c68:	jns    403c50 <rb_base64_encode@plt+0x1920>
  403c6a:	call   402220 <__errno_location@plt>
  403c6f:	mov    edi,DWORD PTR [rax]
  403c71:	call   402070 <rb_ignore_errno@plt>
  403c76:	test   eax,eax
  403c78:	je     403c97 <rb_base64_encode@plt+0x1967>
  403c7a:	mov    rdi,QWORD PTR [rbx+0x90]
  403c81:	lea    rdx,[rip+0xffffffffffffffa8]        # 403c30 <rb_base64_encode@plt+0x1900>
  403c88:	mov    esi,0x1
  403c8d:	mov    rcx,rbx
  403c90:	call   402090 <rb_setselect@plt>
  403c95:	jmp    403ce0 <rb_base64_encode@plt+0x19b0>
  403c97:	mov    rdi,QWORD PTR [rbx+0x90]
  403c9e:	call   4021b0 <rb_close@plt>
  403ca3:	mov    QWORD PTR [rbx],rbx
  403ca6:	mov    QWORD PTR [rbx+0x8],0x0
  403cae:	mov    rax,QWORD PTR [rip+0x451b]        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  403cb5:	mov    QWORD PTR [rbx+0x10],rax
  403cb9:	test   rax,rax
  403cbc:	je     403cc7 <rb_base64_encode@plt+0x1997>
  403cbe:	add    rax,0x8
  403cc2:	mov    QWORD PTR [rax],rbx
  403cc5:	jmp    403cd1 <rb_base64_encode@plt+0x19a1>
  403cc7:	cmp    QWORD PTR [rip+0x4509],0x0        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403ccf:	je     403ceb <rb_base64_encode@plt+0x19bb>
  403cd1:	mov    QWORD PTR [rip+0x44f8],rbx        # 4081d0 <rb_base64_encode@plt+0x5ea0>
  403cd8:	add    QWORD PTR [rip+0x4500],0x1        # 4081e0 <rb_base64_encode@plt+0x5eb0>
  403ce0:	add    rsp,0x4008
  403ce7:	pop    rbx
  403ce8:	pop    r14
  403cea:	ret    
  403ceb:	lea    rax,[rip+0x44e6]        # 4081d8 <rb_base64_encode@plt+0x5ea8>
  403cf2:	jmp    403cc2 <rb_base64_encode@plt+0x1992>
  403cf4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403cfe:	xchg   ax,ax
  403d00:	push   r14
  403d02:	push   rbx
  403d03:	push   rax
  403d04:	test   BYTE PTR [rsi+0xb8],0x2
  403d0b:	jne    403de6 <rb_base64_encode@plt+0x1ab6>
  403d11:	mov    r14,rsi
  403d14:	mov    rbx,rdi
  403d17:	jmp    403d29 <rb_base64_encode@plt+0x19f9>
  403d19:	nop    DWORD PTR [rax+0x0]
  403d20:	cdqe   
  403d22:	add    QWORD PTR [r14+0x98],rax
  403d29:	mov    rdi,QWORD PTR [r14+0x20]
  403d2d:	mov    rsi,rbx
  403d30:	call   402300 <rb_rawbuf_flush@plt>
  403d35:	test   eax,eax
  403d37:	jg     403d20 <rb_base64_encode@plt+0x19f0>
  403d39:	test   eax,eax
  403d3b:	je     403d75 <rb_base64_encode@plt+0x1a45>
  403d3d:	call   402220 <__errno_location@plt>
  403d42:	mov    rbx,rax
  403d45:	mov    edi,DWORD PTR [rax]
  403d47:	call   402070 <rb_ignore_errno@plt>
  403d4c:	test   eax,eax
  403d4e:	je     403d9a <rb_base64_encode@plt+0x1a6a>
  403d50:	mov    rdi,QWORD PTR [r14+0x20]
  403d54:	call   4021d0 <rb_rawbuf_length@plt>
  403d59:	mov    rdi,QWORD PTR [r14+0x88]
  403d60:	test   eax,eax
  403d62:	jle    403dc1 <rb_base64_encode@plt+0x1a91>
  403d64:	lea    rdx,[rip+0xffffffffffffff95]        # 403d00 <rb_base64_encode@plt+0x19d0>
  403d6b:	mov    esi,0x2
  403d70:	mov    rcx,r14
  403d73:	jmp    403dca <rb_base64_encode@plt+0x1a9a>
  403d75:	lea    rdx,[rip+0x237c]        # 4060f8 <rb_base64_encode@plt+0x3dc8>
  403d7c:	lea    rcx,[rip+0x2378]        # 4060fb <rb_base64_encode@plt+0x3dcb>
  403d83:	mov    esi,0x1
  403d88:	xor    eax,eax
  403d8a:	mov    rdi,r14
  403d8d:	call   402f90 <rb_base64_encode@plt+0xc60>
  403d92:	call   402220 <__errno_location@plt>
  403d97:	mov    rbx,rax
  403d9a:	mov    edi,DWORD PTR [rbx]
  403d9c:	call   402180 <strerror@plt>
  403da1:	mov    rcx,rax
  403da4:	lea    rdx,[rip+0x2340]        # 4060eb <rb_base64_encode@plt+0x3dbb>
  403dab:	mov    esi,0x1
  403db0:	xor    eax,eax
  403db2:	mov    rdi,r14
  403db5:	add    rsp,0x8
  403db9:	pop    rbx
  403dba:	pop    r14
  403dbc:	jmp    402f90 <rb_base64_encode@plt+0xc60>
  403dc1:	mov    esi,0x2
  403dc6:	xor    edx,edx
  403dc8:	xor    ecx,ecx
  403dca:	call   402090 <rb_setselect@plt>
  403dcf:	test   BYTE PTR [r14+0xb8],0x1
  403dd7:	je     403de6 <rb_base64_encode@plt+0x1ab6>
  403dd9:	mov    rdi,QWORD PTR [r14+0x20]
  403ddd:	call   4021d0 <rb_rawbuf_length@plt>
  403de2:	test   eax,eax
  403de4:	je     403dee <rb_base64_encode@plt+0x1abe>
  403de6:	add    rsp,0x8
  403dea:	pop    rbx
  403deb:	pop    r14
  403ded:	ret    
  403dee:	and    BYTE PTR [r14+0xb8],0xfe
  403df6:	mov    rdi,QWORD PTR [r14+0x90]
  403dfd:	mov    rsi,r14
  403e00:	add    rsp,0x8
  403e04:	pop    rbx
  403e05:	pop    r14
  403e07:	jmp    402da0 <rb_base64_encode@plt+0xa70>
  403e0c:	nop    DWORD PTR [rax+0x0]
  403e10:	push   rbp
  403e11:	push   r15
  403e13:	push   r14
  403e15:	push   r13
  403e17:	push   r12
  403e19:	push   rbx
  403e1a:	push   rax
  403e1b:	mov    r14,rsi
  403e1e:	mov    r13,QWORD PTR [rsi+0x48]
  403e22:	test   r13,r13
  403e25:	je     403f40 <rb_base64_encode@plt+0x1c10>
  403e2b:	lea    rax,[r14+0x48]
  403e2f:	mov    QWORD PTR [rsp],rax
  403e33:	lea    rbp,[r14+0x58]
  403e37:	nop    WORD PTR [rax+rax*1+0x0]
  403e40:	mov    rbx,QWORD PTR [r13+0x0]
  403e44:	mov    r12,QWORD PTR [r13+0x10]
  403e48:	mov    rdi,QWORD PTR [r14+0x20]
  403e4c:	lea    rsi,[rbx+0x28]
  403e50:	mov    edx,DWORD PTR [rbx+0x48]
  403e53:	mov    rcx,QWORD PTR [rbx+0x18]
  403e57:	mov    r8,QWORD PTR [rbx+0x20]
  403e5b:	mov    r9d,DWORD PTR [rip+0x435e]        # 4081c0 <rb_base64_encode@plt+0x5e90>
  403e62:	call   4020a0 <rb_send_fd_buf@plt>
  403e67:	mov    r15d,eax
  403e6a:	test   eax,eax
  403e6c:	jle    403ef0 <rb_base64_encode@plt+0x1bc0>
  403e72:	mov    rcx,QWORD PTR [r13+0x8]
  403e76:	mov    rax,QWORD PTR [r13+0x10]
  403e7a:	add    r13,0x8
  403e7e:	test   rax,rax
  403e81:	je     403e90 <rb_base64_encode@plt+0x1b60>
  403e83:	mov    QWORD PTR [rax+0x8],rcx
  403e87:	mov    rcx,QWORD PTR [r13+0x0]
  403e8b:	jmp    403e94 <rb_base64_encode@plt+0x1b64>
  403e8d:	nop    DWORD PTR [rax]
  403e90:	mov    QWORD PTR [r14+0x50],rcx
  403e94:	test   rcx,rcx
  403e97:	lea    rcx,[rcx+0x10]
  403e9b:	cmove  rcx,QWORD PTR [rsp]
  403ea0:	mov    QWORD PTR [rcx],rax
  403ea3:	vxorps xmm0,xmm0,xmm0
  403ea7:	vmovups XMMWORD PTR [r13+0x0],xmm0
  403ead:	mov    r13,rbp
  403eb0:	add    QWORD PTR [rbp+0x0],0xffffffffffffffff
  403eb5:	cmp    DWORD PTR [rbx+0x48],0x0
  403eb9:	jle    403ed7 <rb_base64_encode@plt+0x1ba7>
  403ebb:	xor    ebp,ebp
  403ebd:	nop    DWORD PTR [rax]
  403ec0:	mov    rdi,QWORD PTR [rbx+rbp*8+0x28]
  403ec5:	call   4021b0 <rb_close@plt>
  403eca:	add    rbp,0x1
  403ece:	movsxd rax,DWORD PTR [rbx+0x48]
  403ed2:	cmp    rbp,rax
  403ed5:	jl     403ec0 <rb_base64_encode@plt+0x1b90>
  403ed7:	mov    rdi,QWORD PTR [rbx+0x18]
  403edb:	test   rdi,rdi
  403ede:	je     403ee5 <rb_base64_encode@plt+0x1bb5>
  403ee0:	call   402100 <free@plt>
  403ee5:	mov    rdi,rbx
  403ee8:	call   402100 <free@plt>
  403eed:	mov    rbp,r13
  403ef0:	test   r15d,r15d
  403ef3:	je     403f5a <rb_base64_encode@plt+0x1c2a>
  403ef5:	jns    403f07 <rb_base64_encode@plt+0x1bd7>
  403ef7:	call   402220 <__errno_location@plt>
  403efc:	mov    edi,DWORD PTR [rax]
  403efe:	call   402070 <rb_ignore_errno@plt>
  403f03:	test   eax,eax
  403f05:	je     403f5a <rb_base64_encode@plt+0x1c2a>
  403f07:	mov    r13,r12
  403f0a:	test   r12,r12
  403f0d:	jne    403e40 <rb_base64_encode@plt+0x1b10>
  403f13:	cmp    QWORD PTR [rbp+0x0],0x0
  403f18:	je     403f4b <rb_base64_encode@plt+0x1c1b>
  403f1a:	mov    rdi,QWORD PTR [r14+0x20]
  403f1e:	lea    rdx,[rip+0xfffffffffffffeeb]        # 403e10 <rb_base64_encode@plt+0x1ae0>
  403f25:	mov    esi,0x2
  403f2a:	mov    rcx,r14
  403f2d:	add    rsp,0x8
  403f31:	pop    rbx
  403f32:	pop    r12
  403f34:	pop    r13
  403f36:	pop    r14
  403f38:	pop    r15
  403f3a:	pop    rbp
  403f3b:	jmp    402090 <rb_setselect@plt>
  403f40:	lea    rbp,[r14+0x58]
  403f44:	cmp    QWORD PTR [rbp+0x0],0x0
  403f49:	jne    403f1a <rb_base64_encode@plt+0x1bea>
  403f4b:	add    rsp,0x8
  403f4f:	pop    rbx
  403f50:	pop    r12
  403f52:	pop    r13
  403f54:	pop    r14
  403f56:	pop    r15
  403f58:	pop    rbp
  403f59:	ret    
  403f5a:	xor    edi,edi
  403f5c:	call   4020b0 <exit@plt>
  403f61:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403f6b:	nop    DWORD PTR [rax+rax*1+0x0]
  403f70:	vmovaps xmm0,XMMWORD PTR [rip+0x22e8]        # 406260 <rb_base64_encode@plt+0x3f30>
  403f78:	vmovups XMMWORD PTR [rdi],xmm0
  403f7c:	mov    DWORD PTR [rdi+0x10],0xc3d2e1f0
  403f83:	mov    QWORD PTR [rdi+0x18],0x0
  403f8b:	ret    
  403f8c:	nop    DWORD PTR [rax+0x0]
  403f90:	push   rbp
  403f91:	push   r15
  403f93:	push   r14
  403f95:	push   r13
  403f97:	push   r12
  403f99:	push   rbx
  403f9a:	push   rax
  403f9b:	mov    r12,rdx
  403f9e:	mov    r14,rsi
  403fa1:	mov    r13,rdi
  403fa4:	mov    rax,QWORD PTR [rdi+0x18]
  403fa8:	mov    ecx,0x603
  403fad:	bextr  ebp,eax,ecx
  403fb2:	lea    rax,[rax+rdx*8]
  403fb6:	mov    QWORD PTR [rdi+0x18],rax
  403fba:	lea    rax,[rdx+rbp*1]
  403fbe:	cmp    rax,0x3f
  403fc2:	jbe    40401e <rb_base64_encode@plt+0x1cee>
  403fc4:	mov    ebx,0x40
  403fc9:	sub    rbx,rbp
  403fcc:	lea    rdi,[rbp*1+0x20]
  403fd4:	add    rdi,r13
  403fd7:	lea    r15,[r13+0x20]
  403fdb:	mov    rsi,r14
  403fde:	mov    rdx,rbx
  403fe1:	call   402310 <memcpy@plt>
  403fe6:	mov    rdi,r13
  403fe9:	mov    rsi,r15
  403fec:	call   404050 <rb_base64_encode@plt+0x1d20>
  403ff1:	xor    rbp,0x7f
  403ff5:	cmp    rbp,r12
  403ff8:	jae    40402b <rb_base64_encode@plt+0x1cfb>
  403ffa:	nop    WORD PTR [rax+rax*1+0x0]
  404000:	mov    rbp,rbx
  404003:	lea    rsi,[r14+rbx*1]
  404007:	mov    rdi,r13
  40400a:	call   404050 <rb_base64_encode@plt+0x1d20>
  40400f:	lea    rbx,[rbx+0x40]
  404013:	add    rbp,0x7f
  404017:	cmp    rbp,r12
  40401a:	jb     404000 <rb_base64_encode@plt+0x1cd0>
  40401c:	jmp    40402b <rb_base64_encode@plt+0x1cfb>
  40401e:	lea    r15,[rbp*1+0x20]
  404026:	add    r15,r13
  404029:	xor    ebx,ebx
  40402b:	add    r14,rbx
  40402e:	sub    r12,rbx
  404031:	mov    rdi,r15
  404034:	mov    rsi,r14
  404037:	mov    rdx,r12
  40403a:	add    rsp,0x8
  40403e:	pop    rbx
  40403f:	pop    r12
  404041:	pop    r13
  404043:	pop    r14
  404045:	pop    r15
  404047:	pop    rbp
  404048:	jmp    402310 <memcpy@plt>
  40404d:	nop    DWORD PTR [rax]
  404050:	push   rbp
  404051:	push   r15
  404053:	push   r14
  404055:	push   r13
  404057:	push   r12
  404059:	push   rbx
  40405a:	mov    QWORD PTR [rsp-0x8],rdi
  40405f:	mov    r10d,DWORD PTR [rsi]
  404062:	mov    DWORD PTR [rsp-0x48],r10d
  404067:	mov    r14d,DWORD PTR [rsi+0x4]
  40406b:	mov    DWORD PTR [rsp-0x3c],r14d
  404070:	mov    ebp,DWORD PTR [rsi+0x8]
  404073:	mov    DWORD PTR [rsp-0x50],ebp
  404077:	mov    r15d,DWORD PTR [rsi+0xc]
  40407b:	mov    DWORD PTR [rsp-0x54],r15d
  404080:	mov    r12d,DWORD PTR [rsi+0x10]
  404084:	mov    DWORD PTR [rsp-0x5c],r12d
  404089:	vmovdqu xmm0,XMMWORD PTR [rdi+0x4]
  40408e:	vpextrd edx,xmm0,0x1
  404094:	mov    eax,DWORD PTR [rdi]
  404096:	vpextrd r9d,xmm0,0x2
  40409c:	vmovd  ecx,xmm0
  4040a0:	andn   edi,ecx,r9d
  4040a5:	andn   r8d,eax,edx
  4040aa:	mov    ebx,ebp
  4040ac:	bswap  ebx
  4040ae:	add    ebx,edx
  4040b0:	and    edx,ecx
  4040b2:	or     edx,edi
  4040b4:	mov    ebp,r10d
  4040b7:	bswap  ebp
  4040b9:	rorx   edi,eax,0x1b
  4040bf:	add    edi,ebp
  4040c1:	vpextrd ebp,xmm0,0x3
  4040c7:	add    ebp,edi
  4040c9:	lea    r11d,[rdx+rbp*1]
  4040cd:	add    r11d,0x5a827999
  4040d4:	rorx   ecx,ecx,0x2
  4040da:	andn   r10d,r11d,ecx
  4040df:	mov    ebp,r15d
  4040e2:	bswap  ebp
  4040e4:	add    ebp,ecx
  4040e6:	mov    edx,eax
  4040e8:	mov    DWORD PTR [rsp-0xc],eax
  4040ec:	and    ecx,eax
  4040ee:	or     ecx,r8d
  4040f1:	mov    eax,r14d
  4040f4:	bswap  eax
  4040f6:	add    eax,r9d
  4040f9:	rorx   edi,r11d,0x1b
  4040ff:	add    eax,ecx
  404101:	lea    eax,[rdi+rax*1]
  404104:	add    eax,0x5a827999
  404109:	rorx   ecx,edx,0x2
  40410f:	mov    edi,ecx
  404111:	and    edi,r11d
  404114:	or     edi,r10d
  404117:	mov    edx,r12d
  40411a:	bswap  edx
  40411c:	add    edx,ecx
  40411e:	andn   r8d,eax,ecx
  404123:	add    ebx,edi
  404125:	rorx   ecx,eax,0x1b
  40412b:	lea    r10d,[rcx+rbx*1]
  40412f:	add    r10d,0x5a827999
  404136:	rorx   ebx,r11d,0x2
  40413c:	mov    edi,ebx
  40413e:	and    edi,eax
  404140:	or     edi,r8d
  404143:	mov    ecx,DWORD PTR [rsi+0x14]
  404146:	mov    DWORD PTR [rsp-0x58],ecx
  40414a:	add    ebp,edi
  40414c:	rorx   edi,r10d,0x1b
  404152:	lea    r9d,[rdi+rbp*1]
  404156:	add    r9d,0x5a827999
  40415d:	mov    ebp,ecx
  40415f:	bswap  ebp
  404161:	add    ebp,ebx
  404163:	andn   ebx,r10d,ebx
  404168:	rorx   edi,eax,0x2
  40416e:	mov    eax,edi
  404170:	and    eax,r10d
  404173:	or     eax,ebx
  404175:	add    edx,eax
  404177:	rorx   eax,r9d,0x1b
  40417d:	lea    ebx,[rax+rdx*1]
  404180:	add    ebx,0x5a827999
  404186:	mov    eax,DWORD PTR [rsi+0x18]
  404189:	mov    DWORD PTR [rsp-0x4c],eax
  40418d:	bswap  eax
  40418f:	add    eax,edi
  404191:	andn   edx,r9d,edi
  404196:	rorx   edi,r10d,0x2
  40419c:	mov    ecx,edi
  40419e:	and    ecx,r9d
  4041a1:	or     ecx,edx
  4041a3:	add    ebp,ecx
  4041a5:	rorx   ecx,ebx,0x1b
  4041ab:	lea    r11d,[rcx+rbp*1]
  4041af:	add    r11d,0x5a827999
  4041b6:	mov    ecx,DWORD PTR [rsi+0x1c]
  4041b9:	mov    DWORD PTR [rsp-0x40],ecx
  4041bd:	mov    ebp,ecx
  4041bf:	bswap  ebp
  4041c1:	add    ebp,edi
  4041c3:	andn   edx,ebx,edi
  4041c8:	rorx   ecx,r9d,0x2
  4041ce:	mov    edi,ecx
  4041d0:	and    edi,ebx
  4041d2:	or     edi,edx
  4041d4:	add    eax,edi
  4041d6:	rorx   edx,r11d,0x1b
  4041dc:	lea    edx,[rdx+rax*1]
  4041df:	add    edx,0x5a827999
  4041e5:	mov    r12d,DWORD PTR [rsi+0x20]
  4041e9:	mov    edi,r12d
  4041ec:	bswap  edi
  4041ee:	add    edi,ecx
  4041f0:	andn   eax,r11d,ecx
  4041f5:	rorx   ebx,ebx,0x2
  4041fb:	mov    ecx,ebx
  4041fd:	and    ecx,r11d
  404200:	or     ecx,eax
  404202:	add    ebp,ecx
  404204:	rorx   eax,edx,0x1b
  40420a:	lea    r9d,[rax+rbp*1]
  40420e:	add    r9d,0x5a827999
  404215:	mov    eax,DWORD PTR [rsi+0x24]
  404218:	mov    DWORD PTR [rsp-0x24],eax
  40421c:	mov    ebp,eax
  40421e:	bswap  ebp
  404220:	add    ebp,ebx
  404222:	andn   ecx,edx,ebx
  404227:	rorx   eax,r11d,0x2
  40422d:	mov    ebx,eax
  40422f:	and    ebx,edx
  404231:	or     ebx,ecx
  404233:	add    edi,ebx
  404235:	rorx   ecx,r9d,0x1b
  40423b:	lea    r11d,[rcx+rdi*1]
  40423f:	add    r11d,0x5a827999
  404246:	mov    ecx,DWORD PTR [rsi+0x28]
  404249:	mov    DWORD PTR [rsp-0x18],ecx
  40424d:	mov    ebx,ecx
  40424f:	bswap  ebx
  404251:	add    ebx,eax
  404253:	andn   eax,r9d,eax
  404258:	rorx   edi,edx,0x2
  40425e:	mov    edx,edi
  404260:	and    edx,r9d
  404263:	or     edx,eax
  404265:	add    ebp,edx
  404267:	rorx   eax,r11d,0x1b
  40426d:	lea    r14d,[rax+rbp*1]
  404271:	add    r14d,0x5a827999
  404278:	mov    eax,DWORD PTR [rsi+0x2c]
  40427b:	mov    DWORD PTR [rsp-0x30],eax
  40427f:	mov    ebp,eax
  404281:	bswap  ebp
  404283:	add    ebp,edi
  404285:	andn   eax,r11d,edi
  40428a:	rorx   ecx,r9d,0x2
  404290:	mov    edi,ecx
  404292:	and    edi,r11d
  404295:	or     edi,eax
  404297:	add    ebx,edi
  404299:	rorx   eax,r14d,0x1b
  40429f:	lea    eax,[rax+rbx*1]
  4042a2:	add    eax,0x5a827999
  4042a7:	mov    edx,DWORD PTR [rsi+0x30]
  4042aa:	mov    DWORD PTR [rsp-0x44],edx
  4042ae:	mov    edi,edx
  4042b0:	bswap  edi
  4042b2:	add    edi,ecx
  4042b4:	andn   ecx,r14d,ecx
  4042b9:	rorx   edx,r11d,0x2
  4042bf:	mov    ebx,edx
  4042c1:	and    ebx,r14d
  4042c4:	or     ebx,ecx
  4042c6:	add    ebp,ebx
  4042c8:	rorx   ecx,eax,0x1b
  4042ce:	lea    ebx,[rcx+rbp*1]
  4042d1:	add    ebx,0x5a827999
  4042d7:	mov    r8d,DWORD PTR [rsi+0x34]
  4042db:	mov    ebp,r8d
  4042de:	bswap  ebp
  4042e0:	add    ebp,edx
  4042e2:	andn   r9d,eax,edx
  4042e7:	rorx   edx,r14d,0x2
  4042ed:	mov    ecx,edx
  4042ef:	and    ecx,eax
  4042f1:	or     ecx,r9d
  4042f4:	add    edi,ecx
  4042f6:	rorx   ecx,ebx,0x1b
  4042fc:	lea    ecx,[rcx+rdi*1]
  4042ff:	add    ecx,0x5a827999
  404305:	rorx   r14d,eax,0x2
  40430b:	mov    eax,r14d
  40430e:	and    eax,ebx
  404310:	andn   edi,ebx,edx
  404315:	or     eax,edi
  404317:	add    ebp,eax
  404319:	rorx   eax,ecx,0x1b
  40431f:	lea    ebp,[rax+rbp*1]
  404322:	add    ebp,0x5a827999
  404328:	rorx   ebx,ebx,0x2
  40432e:	mov    eax,ebx
  404330:	and    eax,ecx
  404332:	andn   edi,ecx,r14d
  404337:	or     eax,edi
  404339:	mov    r15d,DWORD PTR [rsi+0x38]
  40433d:	mov    edi,r15d
  404340:	bswap  edi
  404342:	mov    DWORD PTR [rsp-0x28],edi
  404346:	add    edx,edi
  404348:	add    edx,eax
  40434a:	rorx   eax,ebp,0x1b
  404350:	lea    eax,[rax+rdx*1]
  404353:	add    eax,0x5a827999
  404358:	mov    DWORD PTR [rsp-0x34],eax
  40435c:	rorx   r13d,ecx,0x2
  404362:	mov    edi,r13d
  404365:	mov    DWORD PTR [rsp-0x20],ebp
  404369:	and    edi,ebp
  40436b:	andn   eax,ebp,ebx
  404370:	or     edi,eax
  404372:	mov    r10d,DWORD PTR [rsi+0x3c]
  404376:	mov    eax,DWORD PTR [rsp-0x50]
  40437a:	xor    DWORD PTR [rsp-0x48],eax
  40437e:	mov    edx,DWORD PTR [rsp-0x54]
  404382:	xor    DWORD PTR [rsp-0x3c],edx
  404386:	mov    ecx,DWORD PTR [rsp-0x5c]
  40438a:	xor    eax,ecx
  40438c:	mov    DWORD PTR [rsp-0x50],eax
  404390:	mov    esi,DWORD PTR [rsp-0x58]
  404394:	xor    edx,esi
  404396:	mov    eax,DWORD PTR [rsp-0x4c]
  40439a:	xor    ecx,eax
  40439c:	mov    DWORD PTR [rsp-0x5c],ecx
  4043a0:	mov    ecx,DWORD PTR [rsp-0x40]
  4043a4:	xor    esi,ecx
  4043a6:	mov    r11d,esi
  4043a9:	xor    eax,r12d
  4043ac:	mov    DWORD PTR [rsp-0x4c],eax
  4043b0:	mov    r9d,DWORD PTR [rsp-0x24]
  4043b5:	xor    ecx,r9d
  4043b8:	mov    esi,ecx
  4043ba:	mov    ebp,DWORD PTR [rsp-0x18]
  4043be:	mov    eax,ebp
  4043c0:	xor    eax,r12d
  4043c3:	mov    DWORD PTR [rsp-0x38],eax
  4043c7:	mov    eax,r10d
  4043ca:	xor    eax,r8d
  4043cd:	mov    DWORD PTR [rsp-0x2c],eax
  4043d1:	xor    r12d,r8d
  4043d4:	xor    r11d,r8d
  4043d7:	mov    DWORD PTR [rsp-0x58],r11d
  4043dc:	mov    r11d,DWORD PTR [rsp-0x30]
  4043e1:	xor    r8d,r11d
  4043e4:	mov    DWORD PTR [rsp-0x1c],r8d
  4043e9:	xor    edx,r11d
  4043ec:	mov    DWORD PTR [rsp-0x54],edx
  4043f0:	mov    eax,r9d
  4043f3:	xor    r11d,r9d
  4043f6:	xor    eax,r15d
  4043f9:	xor    DWORD PTR [rsp-0x4c],r15d
  4043fe:	mov    r9d,DWORD PTR [rsp-0x44]
  404403:	xor    r15d,r9d
  404406:	xor    DWORD PTR [rsp-0x5c],r9d
  40440b:	mov    ecx,ebp
  40440d:	xor    r9d,ebp
  404410:	xor    ecx,r10d
  404413:	xor    esi,r10d
  404416:	mov    DWORD PTR [rsp-0x40],esi
  40441a:	bswap  r10d
  40441d:	mov    DWORD PTR [rsp-0x30],r10d
  404422:	add    r14d,r10d
  404425:	add    r14d,edi
  404428:	mov    esi,DWORD PTR [rsp-0x34]
  40442c:	rorx   edi,esi,0x1b
  404432:	lea    r8d,[rdi+r14*1]
  404436:	add    r8d,0x5a827999
  40443d:	rorx   r14d,DWORD PTR [rsp-0x20],0x2
  404445:	mov    edi,r14d
  404448:	and    edi,esi
  40444a:	andn   ebp,esi,r13d
  40444f:	or     edi,ebp
  404451:	xor    r12d,DWORD PTR [rsp-0x48]
  404456:	bswap  r12d
  404459:	rorx   edx,r12d,0x1f
  40445f:	add    ebx,edx
  404461:	mov    DWORD PTR [rsp-0x44],edx
  404465:	add    ebx,edi
  404467:	rorx   edi,r8d,0x1b
  40446d:	lea    r12d,[rdi+rbx*1]
  404471:	add    r12d,0x5a827999
  404478:	rorx   edi,esi,0x2
  40447e:	mov    ebx,edi
  404480:	and    ebx,r8d
  404483:	andn   r10d,r8d,r14d
  404488:	or     ebx,r10d
  40448b:	xor    eax,DWORD PTR [rsp-0x3c]
  40448f:	bswap  eax
  404491:	rorx   eax,eax,0x1f
  404497:	add    r13d,eax
  40449a:	mov    ebp,eax
  40449c:	mov    DWORD PTR [rsp-0x48],eax
  4044a0:	add    r13d,ebx
  4044a3:	rorx   ebx,r12d,0x1b
  4044a9:	lea    r13d,[rbx+r13*1]
  4044ad:	add    r13d,0x5a827999
  4044b4:	rorx   r8d,r8d,0x2
  4044ba:	mov    eax,r8d
  4044bd:	and    eax,r12d
  4044c0:	andn   ebx,r12d,edi
  4044c5:	or     eax,ebx
  4044c7:	xor    ecx,DWORD PTR [rsp-0x50]
  4044cb:	bswap  ecx
  4044cd:	rorx   ecx,ecx,0x1f
  4044d3:	mov    DWORD PTR [rsp-0x50],ecx
  4044d7:	add    r14d,ecx
  4044da:	add    r14d,eax
  4044dd:	rorx   eax,r13d,0x1b
  4044e3:	lea    ecx,[rax+r14*1]
  4044e7:	add    ecx,0x5a827999
  4044ed:	rorx   eax,r12d,0x2
  4044f3:	mov    r12d,eax
  4044f6:	and    r12d,r13d
  4044f9:	andn   ebx,r13d,r8d
  4044fe:	or     r12d,ebx
  404501:	mov    ebx,DWORD PTR [rsp-0x54]
  404505:	bswap  ebx
  404507:	xor    ebx,edx
  404509:	rorx   edx,ebx,0x1f
  40450f:	add    edi,edx
  404511:	mov    esi,edx
  404513:	mov    DWORD PTR [rsp-0x3c],edx
  404517:	add    edi,r12d
  40451a:	rorx   ebx,ecx,0x1b
  404520:	lea    r12d,[rbx+rdi*1]
  404524:	add    r12d,0x5a827999
  40452b:	rorx   ebx,r13d,0x2
  404531:	mov    r13d,ebx
  404534:	xor    r13d,eax
  404537:	xor    r13d,ecx
  40453a:	mov    edx,DWORD PTR [rsp-0x5c]
  40453e:	bswap  edx
  404540:	xor    edx,ebp
  404542:	rorx   edx,edx,0x1f
  404548:	add    r8d,edx
  40454b:	mov    r10d,edx
  40454e:	mov    DWORD PTR [rsp-0x54],edx
  404552:	add    r8d,r13d
  404555:	rorx   ebp,r12d,0x1b
  40455b:	lea    r8d,[r8+rbp*1]
  40455f:	add    r8d,0x6ed9eba1
  404566:	rorx   ecx,ecx,0x2
  40456c:	mov    ebp,ecx
  40456e:	xor    ebp,ebx
  404570:	xor    ebp,r12d
  404573:	mov    edx,DWORD PTR [rsp-0x58]
  404577:	bswap  edx
  404579:	mov    edi,DWORD PTR [rsp-0x50]
  40457d:	xor    edx,edi
  40457f:	rorx   r14d,edx,0x1f
  404585:	add    eax,r14d
  404588:	add    eax,ebp
  40458a:	rorx   ebp,r8d,0x1b
  404590:	lea    edx,[rax+rbp*1]
  404593:	add    edx,0x6ed9eba1
  404599:	rorx   ebp,r12d,0x2
  40459f:	mov    edi,ebp
  4045a1:	xor    edi,ecx
  4045a3:	xor    edi,r8d
  4045a6:	mov    eax,DWORD PTR [rsp-0x4c]
  4045aa:	bswap  eax
  4045ac:	xor    eax,esi
  4045ae:	rorx   r12d,eax,0x1f
  4045b4:	add    ebx,r12d
  4045b7:	add    ebx,edi
  4045b9:	rorx   edi,edx,0x1b
  4045bf:	lea    ebx,[rdi+rbx*1]
  4045c2:	add    ebx,0x6ed9eba1
  4045c8:	rorx   eax,r8d,0x2
  4045ce:	mov    edi,eax
  4045d0:	xor    edi,ebp
  4045d2:	xor    edi,edx
  4045d4:	mov    esi,DWORD PTR [rsp-0x40]
  4045d8:	bswap  esi
  4045da:	xor    esi,r10d
  4045dd:	rorx   r13d,esi,0x1f
  4045e3:	add    ecx,r13d
  4045e6:	mov    DWORD PTR [rsp-0x58],r13d
  4045eb:	add    ecx,edi
  4045ed:	rorx   edi,ebx,0x1b
  4045f3:	lea    ecx,[rdi+rcx*1]
  4045f6:	add    ecx,0x6ed9eba1
  4045fc:	rorx   edi,edx,0x2
  404602:	mov    edx,edi
  404604:	xor    edx,eax
  404606:	xor    edx,ebx
  404608:	mov    esi,DWORD PTR [rsp-0x38]
  40460c:	bswap  esi
  40460e:	xor    esi,DWORD PTR [rsp-0x44]
  404612:	xor    esi,r14d
  404615:	rorx   r10d,esi,0x1f
  40461b:	add    ebp,r10d
  40461e:	mov    DWORD PTR [rsp-0x24],r10d
  404623:	add    ebp,edx
  404625:	rorx   edx,ecx,0x1b
  40462b:	lea    edx,[rdx+rbp*1]
  40462e:	add    edx,0x6ed9eba1
  404634:	rorx   r8d,ebx,0x2
  40463a:	mov    ebx,r8d
  40463d:	xor    ebx,edi
  40463f:	xor    ebx,ecx
  404641:	bswap  r11d
  404644:	xor    r11d,DWORD PTR [rsp-0x48]
  404649:	xor    r11d,r12d
  40464c:	mov    DWORD PTR [rsp-0x10],r12d
  404651:	rorx   r11d,r11d,0x1f
  404657:	add    eax,r11d
  40465a:	mov    DWORD PTR [rsp-0x40],r11d
  40465f:	add    eax,ebx
  404661:	rorx   esi,edx,0x1b
  404667:	lea    eax,[rsi+rax*1]
  40466a:	add    eax,0x6ed9eba1
  40466f:	rorx   esi,ecx,0x2
  404675:	mov    ecx,esi
  404677:	xor    ecx,r8d
  40467a:	xor    ecx,edx
  40467c:	bswap  r9d
  40467f:	xor    r9d,DWORD PTR [rsp-0x50]
  404684:	xor    r9d,r13d
  404687:	rorx   ebp,r9d,0x1f
  40468d:	add    edi,ebp
  40468f:	mov    r9d,ebp
  404692:	mov    DWORD PTR [rsp-0x38],ebp
  404696:	add    edi,ecx
  404698:	rorx   ecx,eax,0x1b
  40469e:	lea    edi,[rcx+rdi*1]
  4046a1:	add    edi,0x6ed9eba1
  4046a7:	rorx   ecx,edx,0x2
  4046ad:	mov    edx,ecx
  4046af:	xor    edx,esi
  4046b1:	xor    edx,eax
  4046b3:	mov    ebp,DWORD PTR [rsp-0x1c]
  4046b7:	bswap  ebp
  4046b9:	xor    ebp,DWORD PTR [rsp-0x3c]
  4046bd:	xor    ebp,r10d
  4046c0:	rorx   r10d,ebp,0x1f
  4046c6:	add    r8d,r10d
  4046c9:	mov    DWORD PTR [rsp-0x5c],r10d
  4046ce:	add    r8d,edx
  4046d1:	rorx   edx,edi,0x1b
  4046d7:	lea    r8d,[rdx+r8*1]
  4046db:	add    r8d,0x6ed9eba1
  4046e2:	rorx   edx,eax,0x2
  4046e8:	mov    eax,edx
  4046ea:	xor    eax,ecx
  4046ec:	xor    eax,edi
  4046ee:	bswap  r15d
  4046f1:	xor    r15d,DWORD PTR [rsp-0x54]
  4046f6:	xor    r15d,r11d
  4046f9:	rorx   ebp,r15d,0x1f
  4046ff:	add    esi,ebp
  404701:	mov    r11d,ebp
  404704:	mov    DWORD PTR [rsp-0x18],ebp
  404708:	add    esi,eax
  40470a:	rorx   eax,r8d,0x1b
  404710:	lea    esi,[rax+rsi*1]
  404713:	add    esi,0x6ed9eba1
  404719:	rorx   eax,edi,0x2
  40471f:	mov    edi,eax
  404721:	xor    edi,edx
  404723:	xor    edi,r8d
  404726:	mov    ebp,DWORD PTR [rsp-0x2c]
  40472a:	bswap  ebp
  40472c:	mov    DWORD PTR [rsp-0x14],r14d
  404731:	xor    ebp,r14d
  404734:	xor    ebp,r9d
  404737:	rorx   r14d,ebp,0x1f
  40473d:	add    ecx,r14d
  404740:	mov    DWORD PTR [rsp-0x20],r14d
  404745:	add    ecx,edi
  404747:	rorx   edi,esi,0x1b
  40474d:	lea    edi,[rdi+rcx*1]
  404750:	add    edi,0x6ed9eba1
  404756:	rorx   ecx,r8d,0x2
  40475c:	mov    ebp,ecx
  40475e:	xor    ebp,eax
  404760:	xor    ebp,esi
  404762:	mov    ebx,DWORD PTR [rsp-0x28]
  404766:	mov    r9d,DWORD PTR [rsp-0x44]
  40476b:	xor    ebx,r9d
  40476e:	xor    ebx,r12d
  404771:	xor    ebx,r10d
  404774:	rorx   ebx,ebx,0x1f
  40477a:	add    edx,ebx
  40477c:	mov    DWORD PTR [rsp-0x4c],ebx
  404780:	add    edx,ebp
  404782:	rorx   ebp,edi,0x1b
  404788:	lea    r8d,[rdx+rbp*1]
  40478c:	add    r8d,0x6ed9eba1
  404793:	rorx   edx,esi,0x2
  404799:	mov    esi,edx
  40479b:	xor    esi,ecx
  40479d:	xor    esi,edi
  40479f:	mov    r12d,DWORD PTR [rsp-0x48]
  4047a4:	mov    ebp,DWORD PTR [rsp-0x30]
  4047a8:	xor    ebp,r12d
  4047ab:	xor    ebp,DWORD PTR [rsp-0x58]
  4047af:	xor    ebp,r11d
  4047b2:	rorx   r13d,ebp,0x1f
  4047b8:	add    eax,r13d
  4047bb:	mov    DWORD PTR [rsp-0x2c],r13d
  4047c0:	add    eax,esi
  4047c2:	rorx   esi,r8d,0x1b
  4047c8:	lea    r15d,[rsi+rax*1]
  4047cc:	add    r15d,0x6ed9eba1
  4047d3:	rorx   eax,edi,0x2
  4047d9:	mov    edi,eax
  4047db:	xor    edi,edx
  4047dd:	xor    edi,r8d
  4047e0:	mov    r11d,DWORD PTR [rsp-0x50]
  4047e5:	xor    r9d,r11d
  4047e8:	xor    r9d,DWORD PTR [rsp-0x24]
  4047ed:	xor    r9d,r14d
  4047f0:	rorx   r14d,r9d,0x1f
  4047f6:	add    ecx,r14d
  4047f9:	mov    DWORD PTR [rsp-0x34],r14d
  4047fe:	add    ecx,edi
  404800:	rorx   edi,r15d,0x1b
  404806:	lea    edi,[rdi+rcx*1]
  404809:	add    edi,0x6ed9eba1
  40480f:	rorx   ecx,r8d,0x2
  404815:	mov    ebp,ecx
  404817:	xor    ebp,eax
  404819:	xor    ebp,r15d
  40481c:	mov    r8d,DWORD PTR [rsp-0x3c]
  404821:	mov    esi,r12d
  404824:	xor    esi,r8d
  404827:	xor    esi,DWORD PTR [rsp-0x40]
  40482b:	xor    esi,ebx
  40482d:	rorx   r12d,esi,0x1f
  404833:	add    edx,r12d
  404836:	mov    DWORD PTR [rsp-0x30],r12d
  40483b:	add    edx,ebp
  40483d:	rorx   ebp,edi,0x1b
  404843:	lea    r9d,[rdx+rbp*1]
  404847:	add    r9d,0x6ed9eba1
  40484e:	rorx   edx,r15d,0x2
  404854:	mov    esi,edx
  404856:	xor    esi,ecx
  404858:	xor    esi,edi
  40485a:	mov    r10d,DWORD PTR [rsp-0x54]
  40485f:	xor    r11d,r10d
  404862:	xor    r11d,DWORD PTR [rsp-0x38]
  404867:	xor    r11d,r13d
  40486a:	rorx   r15d,r11d,0x1f
  404870:	add    eax,r15d
  404873:	mov    DWORD PTR [rsp-0x1c],r15d
  404878:	add    eax,esi
  40487a:	rorx   esi,r9d,0x1b
  404880:	lea    esi,[rsi+rax*1]
  404883:	add    esi,0x6ed9eba1
  404889:	rorx   eax,edi,0x2
  40488f:	mov    edi,eax
  404891:	xor    edi,edx
  404893:	xor    edi,r9d
  404896:	mov    ebp,DWORD PTR [rsp-0x14]
  40489a:	xor    r8d,ebp
  40489d:	mov    r13d,ebp
  4048a0:	xor    r8d,DWORD PTR [rsp-0x5c]
  4048a5:	xor    r8d,r14d
  4048a8:	rorx   ebx,r8d,0x1f
  4048ae:	add    ecx,ebx
  4048b0:	mov    r11d,ebx
  4048b3:	mov    DWORD PTR [rsp-0x28],ebx
  4048b7:	add    ecx,edi
  4048b9:	rorx   edi,esi,0x1b
  4048bf:	lea    edi,[rdi+rcx*1]
  4048c2:	add    edi,0x6ed9eba1
  4048c8:	rorx   ecx,r9d,0x2
  4048ce:	mov    ebp,ecx
  4048d0:	xor    ebp,eax
  4048d2:	xor    ebp,esi
  4048d4:	mov    r14d,DWORD PTR [rsp-0x10]
  4048d9:	xor    r10d,r14d
  4048dc:	xor    r10d,DWORD PTR [rsp-0x18]
  4048e1:	xor    r10d,r12d
  4048e4:	rorx   ebx,r10d,0x1f
  4048ea:	add    edx,ebx
  4048ec:	mov    r9d,ebx
  4048ef:	mov    DWORD PTR [rsp-0x44],ebx
  4048f3:	add    edx,ebp
  4048f5:	rorx   ebp,edi,0x1b
  4048fb:	lea    ebp,[rdx+rbp*1]
  4048fe:	add    ebp,0x6ed9eba1
  404904:	rorx   edx,esi,0x2
  40490a:	mov    esi,edx
  40490c:	xor    esi,ecx
  40490e:	xor    esi,edi
  404910:	mov    r8d,DWORD PTR [rsp-0x58]
  404915:	mov    ebx,r13d
  404918:	xor    ebx,r8d
  40491b:	xor    ebx,DWORD PTR [rsp-0x20]
  40491f:	xor    ebx,r15d
  404922:	rorx   ebx,ebx,0x1f
  404928:	add    eax,ebx
  40492a:	mov    r10d,ebx
  40492d:	mov    DWORD PTR [rsp-0x54],ebx
  404931:	add    eax,esi
  404933:	rorx   esi,ebp,0x1b
  404939:	lea    esi,[rsi+rax*1]
  40493c:	add    esi,0x6ed9eba1
  404942:	rorx   edi,edi,0x2
  404948:	mov    eax,edi
  40494a:	xor    eax,edx
  40494c:	xor    eax,ebp
  40494e:	mov    r13d,DWORD PTR [rsp-0x24]
  404953:	mov    ebx,r14d
  404956:	xor    ebx,r13d
  404959:	xor    ebx,DWORD PTR [rsp-0x4c]
  40495d:	xor    ebx,r11d
  404960:	rorx   r11d,ebx,0x1f
  404966:	add    ecx,r11d
  404969:	mov    DWORD PTR [rsp-0x48],r11d
  40496e:	add    ecx,eax
  404970:	rorx   eax,esi,0x1b
  404976:	lea    ebx,[rax+rcx*1]
  404979:	add    ebx,0x6ed9eba1
  40497f:	rorx   ebp,ebp,0x2
  404985:	mov    eax,ebp
  404987:	xor    eax,edi
  404989:	xor    eax,esi
  40498b:	mov    r12d,DWORD PTR [rsp-0x40]
  404990:	xor    r8d,r12d
  404993:	xor    r8d,DWORD PTR [rsp-0x2c]
  404998:	xor    r8d,r9d
  40499b:	rorx   r14d,r8d,0x1f
  4049a1:	add    edx,r14d
  4049a4:	mov    DWORD PTR [rsp-0x58],r14d
  4049a9:	add    edx,eax
  4049ab:	rorx   eax,ebx,0x1b
  4049b1:	lea    r9d,[rax+rdx*1]
  4049b5:	add    r9d,0x6ed9eba1
  4049bc:	rorx   esi,esi,0x2
  4049c2:	mov    ecx,ebx
  4049c4:	or     ecx,esi
  4049c6:	and    ecx,ebp
  4049c8:	mov    edx,ebx
  4049ca:	and    edx,esi
  4049cc:	or     edx,ecx
  4049ce:	mov    eax,r13d
  4049d1:	mov    r15d,DWORD PTR [rsp-0x38]
  4049d6:	xor    eax,r15d
  4049d9:	xor    eax,DWORD PTR [rsp-0x34]
  4049dd:	xor    eax,r10d
  4049e0:	rorx   r13d,eax,0x1f
  4049e6:	add    edi,r13d
  4049e9:	add    edi,edx
  4049eb:	rorx   ecx,r9d,0x1b
  4049f1:	lea    r10d,[rcx+rdi*1]
  4049f5:	add    r10d,0x8f1bbcdc
  4049fc:	rorx   edi,ebx,0x2
  404a02:	mov    edx,r9d
  404a05:	or     edx,edi
  404a07:	and    edx,esi
  404a09:	mov    eax,r9d
  404a0c:	and    eax,edi
  404a0e:	or     eax,edx
  404a10:	mov    ecx,r12d
  404a13:	xor    ecx,DWORD PTR [rsp-0x5c]
  404a17:	xor    ecx,DWORD PTR [rsp-0x30]
  404a1b:	xor    ecx,r11d
  404a1e:	rorx   ecx,ecx,0x1f
  404a24:	add    ebp,ecx
  404a26:	mov    r8d,ecx
  404a29:	mov    DWORD PTR [rsp-0x3c],ecx
  404a2d:	add    ebp,eax
  404a2f:	rorx   eax,r10d,0x1b
  404a35:	lea    ebx,[rax+rbp*1]
  404a38:	add    ebx,0x8f1bbcdc
  404a3e:	rorx   ebp,r9d,0x2
  404a44:	mov    eax,r10d
  404a47:	or     eax,ebp
  404a49:	and    eax,edi
  404a4b:	mov    ecx,r10d
  404a4e:	and    ecx,ebp
  404a50:	or     ecx,eax
  404a52:	mov    eax,r15d
  404a55:	mov    r15d,DWORD PTR [rsp-0x18]
  404a5a:	xor    eax,r15d
  404a5d:	xor    eax,DWORD PTR [rsp-0x1c]
  404a61:	xor    eax,r14d
  404a64:	rorx   r12d,eax,0x1f
  404a6a:	add    esi,r12d
  404a6d:	mov    DWORD PTR [rsp-0x38],r12d
  404a72:	add    esi,ecx
  404a74:	rorx   eax,ebx,0x1b
  404a7a:	lea    r9d,[rax+rsi*1]
  404a7e:	add    r9d,0x8f1bbcdc
  404a85:	rorx   eax,r10d,0x2
  404a8b:	mov    ecx,ebx
  404a8d:	or     ecx,eax
  404a8f:	and    ecx,ebp
  404a91:	mov    edx,ebx
  404a93:	and    edx,eax
  404a95:	or     edx,ecx
  404a97:	mov    r14d,DWORD PTR [rsp-0x20]
  404a9c:	mov    ecx,DWORD PTR [rsp-0x5c]
  404aa0:	xor    ecx,r14d
  404aa3:	xor    ecx,DWORD PTR [rsp-0x28]
  404aa7:	xor    ecx,r13d
  404aaa:	rorx   ecx,ecx,0x1f
  404ab0:	mov    DWORD PTR [rsp-0x5c],ecx
  404ab4:	add    edi,ecx
  404ab6:	add    edi,edx
  404ab8:	rorx   ecx,r9d,0x1b
  404abe:	lea    r10d,[rcx+rdi*1]
  404ac2:	add    r10d,0x8f1bbcdc
  404ac9:	rorx   ecx,ebx,0x2
  404acf:	mov    edx,r9d
  404ad2:	or     edx,ecx
  404ad4:	and    edx,eax
  404ad6:	mov    esi,r9d
  404ad9:	and    esi,ecx
  404adb:	or     esi,edx
  404add:	mov    ebx,DWORD PTR [rsp-0x4c]
  404ae1:	xor    r15d,ebx
  404ae4:	xor    r15d,DWORD PTR [rsp-0x44]
  404ae9:	xor    r15d,r8d
  404aec:	rorx   r15d,r15d,0x1f
  404af2:	add    ebp,r15d
  404af5:	mov    DWORD PTR [rsp-0x40],r15d
  404afa:	add    ebp,esi
  404afc:	rorx   edx,r10d,0x1b
  404b02:	lea    r11d,[rdx+rbp*1]
  404b06:	add    r11d,0x8f1bbcdc
  404b0d:	rorx   esi,r9d,0x2
  404b13:	mov    edi,r10d
  404b16:	or     edi,esi
  404b18:	and    edi,ecx
  404b1a:	mov    ebp,r10d
  404b1d:	and    ebp,esi
  404b1f:	or     ebp,edi
  404b21:	mov    edx,r14d
  404b24:	mov    r8d,DWORD PTR [rsp-0x2c]
  404b29:	xor    edx,r8d
  404b2c:	xor    edx,DWORD PTR [rsp-0x54]
  404b30:	xor    edx,r12d
  404b33:	rorx   edx,edx,0x1f
  404b39:	add    eax,edx
  404b3b:	mov    r14d,edx
  404b3e:	mov    DWORD PTR [rsp-0x20],edx
  404b42:	add    eax,ebp
  404b44:	rorx   edi,r11d,0x1b
  404b4a:	lea    ebp,[rdi+rax*1]
  404b4d:	add    ebp,0x8f1bbcdc
  404b53:	rorx   eax,r10d,0x2
  404b59:	mov    edi,r11d
  404b5c:	or     edi,eax
  404b5e:	and    edi,esi
  404b60:	mov    edx,r11d
  404b63:	and    edx,eax
  404b65:	or     edx,edi
  404b67:	mov    edi,ebx
  404b69:	mov    r12d,DWORD PTR [rsp-0x34]
  404b6e:	xor    edi,r12d
  404b71:	xor    edi,DWORD PTR [rsp-0x48]
  404b75:	xor    edi,DWORD PTR [rsp-0x5c]
  404b79:	rorx   edi,edi,0x1f
  404b7f:	mov    DWORD PTR [rsp-0x4c],edi
  404b83:	add    ecx,edi
  404b85:	add    ecx,edx
  404b87:	rorx   edx,ebp,0x1b
  404b8d:	lea    r9d,[rdx+rcx*1]
  404b91:	add    r9d,0x8f1bbcdc
  404b98:	rorx   edx,r11d,0x2
  404b9e:	mov    edi,ebp
  404ba0:	or     edi,edx
  404ba2:	and    edi,eax
  404ba4:	mov    ebx,ebp
  404ba6:	and    ebx,edx
  404ba8:	or     ebx,edi
  404baa:	mov    r11d,DWORD PTR [rsp-0x30]
  404baf:	xor    r8d,r11d
  404bb2:	xor    r8d,DWORD PTR [rsp-0x58]
  404bb7:	xor    r8d,r15d
  404bba:	rorx   r8d,r8d,0x1f
  404bc0:	add    esi,r8d
  404bc3:	mov    DWORD PTR [rsp-0x2c],r8d
  404bc8:	add    esi,ebx
  404bca:	rorx   edi,r9d,0x1b
  404bd0:	lea    r10d,[rdi+rsi*1]
  404bd4:	add    r10d,0x8f1bbcdc
  404bdb:	rorx   esi,ebp,0x2
  404be1:	mov    ecx,r9d
  404be4:	or     ecx,esi
  404be6:	and    ecx,edx
  404be8:	mov    ebp,r9d
  404beb:	and    ebp,esi
  404bed:	or     ebp,ecx
  404bef:	mov    ecx,r12d
  404bf2:	mov    r15d,DWORD PTR [rsp-0x1c]
  404bf7:	xor    ecx,r15d
  404bfa:	xor    ecx,r13d
  404bfd:	xor    ecx,r14d
  404c00:	rorx   ecx,ecx,0x1f
  404c06:	mov    DWORD PTR [rsp-0x50],ecx
  404c0a:	add    eax,ecx
  404c0c:	add    eax,ebp
  404c0e:	rorx   ecx,r10d,0x1b
  404c14:	lea    ebx,[rcx+rax*1]
  404c17:	add    ebx,0x8f1bbcdc
  404c1d:	rorx   eax,r9d,0x2
  404c23:	mov    ecx,r10d
  404c26:	or     ecx,eax
  404c28:	and    ecx,esi
  404c2a:	mov    edi,r10d
  404c2d:	and    edi,eax
  404c2f:	or     edi,ecx
  404c31:	mov    ecx,r11d
  404c34:	mov    r11d,DWORD PTR [rsp-0x28]
  404c39:	xor    ecx,r11d
  404c3c:	xor    ecx,DWORD PTR [rsp-0x3c]
  404c40:	xor    ecx,DWORD PTR [rsp-0x4c]
  404c44:	rorx   r12d,ecx,0x1f
  404c4a:	add    edx,r12d
  404c4d:	mov    DWORD PTR [rsp-0x34],r12d
  404c52:	add    edx,edi
  404c54:	rorx   ecx,ebx,0x1b
  404c5a:	lea    ecx,[rcx+rdx*1]
  404c5d:	add    ecx,0x8f1bbcdc
  404c63:	rorx   r9d,r10d,0x2
  404c69:	mov    edx,ebx
  404c6b:	or     edx,r9d
  404c6e:	and    edx,eax
  404c70:	mov    edi,ebx
  404c72:	and    edi,r9d
  404c75:	or     edi,edx
  404c77:	mov    edx,r15d
  404c7a:	mov    ebp,DWORD PTR [rsp-0x44]
  404c7e:	xor    edx,ebp
  404c80:	xor    edx,DWORD PTR [rsp-0x38]
  404c84:	xor    edx,r8d
  404c87:	rorx   r14d,edx,0x1f
  404c8d:	add    esi,r14d
  404c90:	add    esi,edi
  404c92:	rorx   edx,ecx,0x1b
  404c98:	lea    edx,[rdx+rsi*1]
  404c9b:	add    edx,0x8f1bbcdc
  404ca1:	rorx   r10d,ebx,0x2
  404ca7:	mov    esi,ecx
  404ca9:	or     esi,r10d
  404cac:	and    esi,r9d
  404caf:	mov    edi,ecx
  404cb1:	and    edi,r10d
  404cb4:	or     edi,esi
  404cb6:	mov    esi,r11d
  404cb9:	mov    ebx,DWORD PTR [rsp-0x54]
  404cbd:	xor    esi,ebx
  404cbf:	xor    esi,DWORD PTR [rsp-0x5c]
  404cc3:	xor    esi,DWORD PTR [rsp-0x50]
  404cc7:	rorx   esi,esi,0x1f
  404ccd:	add    eax,esi
  404ccf:	mov    r15d,esi
  404cd2:	mov    DWORD PTR [rsp-0x28],esi
  404cd6:	add    eax,edi
  404cd8:	rorx   esi,edx,0x1b
  404cde:	lea    edi,[rsi+rax*1]
  404ce1:	add    edi,0x8f1bbcdc
  404ce7:	rorx   eax,ecx,0x2
  404ced:	mov    ecx,edx
  404cef:	or     ecx,eax
  404cf1:	and    ecx,r10d
  404cf4:	mov    esi,edx
  404cf6:	and    esi,eax
  404cf8:	or     esi,ecx
  404cfa:	mov    ecx,ebp
  404cfc:	mov    r11d,DWORD PTR [rsp-0x48]
  404d01:	xor    ecx,r11d
  404d04:	xor    ecx,DWORD PTR [rsp-0x40]
  404d08:	xor    ecx,r12d
  404d0b:	rorx   r8d,ecx,0x1f
  404d11:	add    r9d,r8d
  404d14:	mov    DWORD PTR [rsp-0x44],r8d
  404d19:	add    r9d,esi
  404d1c:	rorx   ecx,edi,0x1b
  404d22:	lea    r9d,[rcx+r9*1]
  404d26:	add    r9d,0x8f1bbcdc
  404d2d:	rorx   ecx,edx,0x2
  404d33:	mov    edx,edi
  404d35:	or     edx,ecx
  404d37:	and    edx,eax
  404d39:	mov    esi,edi
  404d3b:	and    esi,ecx
  404d3d:	or     esi,edx
  404d3f:	mov    edx,ebx
  404d41:	mov    ebx,DWORD PTR [rsp-0x58]
  404d45:	xor    edx,ebx
  404d47:	xor    edx,DWORD PTR [rsp-0x20]
  404d4b:	xor    edx,r14d
  404d4e:	rorx   edx,edx,0x1f
  404d54:	mov    DWORD PTR [rsp-0x54],edx
  404d58:	add    r10d,edx
  404d5b:	add    r10d,esi
  404d5e:	rorx   edx,r9d,0x1b
  404d64:	lea    r10d,[rdx+r10*1]
  404d68:	add    r10d,0x8f1bbcdc
  404d6f:	rorx   edx,edi,0x2
  404d75:	mov    edi,r9d
  404d78:	or     edi,edx
  404d7a:	and    edi,ecx
  404d7c:	mov    ebp,r9d
  404d7f:	and    ebp,edx
  404d81:	or     ebp,edi
  404d83:	mov    esi,r11d
  404d86:	xor    esi,r13d
  404d89:	xor    esi,DWORD PTR [rsp-0x4c]
  404d8d:	xor    esi,r15d
  404d90:	rorx   esi,esi,0x1f
  404d96:	add    eax,esi
  404d98:	mov    r12d,esi
  404d9b:	mov    DWORD PTR [rsp-0x48],esi
  404d9f:	add    eax,ebp
  404da1:	rorx   edi,r10d,0x1b
  404da7:	lea    r11d,[rdi+rax*1]
  404dab:	add    r11d,0x8f1bbcdc
  404db2:	rorx   eax,r9d,0x2
  404db8:	mov    esi,r10d
  404dbb:	or     esi,eax
  404dbd:	and    esi,edx
  404dbf:	mov    ebp,r10d
  404dc2:	and    ebp,eax
  404dc4:	or     ebp,esi
  404dc6:	mov    esi,ebx
  404dc8:	mov    r15d,DWORD PTR [rsp-0x3c]
  404dcd:	xor    esi,r15d
  404dd0:	xor    esi,DWORD PTR [rsp-0x2c]
  404dd4:	xor    esi,r8d
  404dd7:	rorx   esi,esi,0x1f
  404ddd:	add    ecx,esi
  404ddf:	mov    r8d,esi
  404de2:	mov    DWORD PTR [rsp-0x30],esi
  404de6:	add    ecx,ebp
  404de8:	rorx   esi,r11d,0x1b
  404dee:	lea    r9d,[rsi+rcx*1]
  404df2:	add    r9d,0x8f1bbcdc
  404df9:	rorx   ecx,r10d,0x2
  404dff:	mov    esi,r11d
  404e02:	or     esi,ecx
  404e04:	and    esi,eax
  404e06:	mov    edi,r11d
  404e09:	and    edi,ecx
  404e0b:	or     edi,esi
  404e0d:	mov    r10d,DWORD PTR [rsp-0x38]
  404e12:	xor    r13d,r10d
  404e15:	xor    r13d,DWORD PTR [rsp-0x50]
  404e1a:	xor    r13d,DWORD PTR [rsp-0x54]
  404e1f:	rorx   esi,r13d,0x1f
  404e25:	mov    DWORD PTR [rsp-0x58],esi
  404e29:	add    edx,esi
  404e2b:	add    edx,edi
  404e2d:	rorx   esi,r9d,0x1b
  404e33:	lea    esi,[rsi+rdx*1]
  404e36:	add    esi,0x8f1bbcdc
  404e3c:	rorx   edx,r11d,0x2
  404e42:	mov    edi,r9d
  404e45:	or     edi,edx
  404e47:	and    edi,ecx
  404e49:	mov    ebp,r9d
  404e4c:	and    ebp,edx
  404e4e:	or     ebp,edi
  404e50:	mov    edi,r15d
  404e53:	mov    r15d,DWORD PTR [rsp-0x5c]
  404e58:	xor    edi,r15d
  404e5b:	xor    edi,DWORD PTR [rsp-0x34]
  404e5f:	xor    edi,r12d
  404e62:	rorx   r13d,edi,0x1f
  404e68:	add    eax,r13d
  404e6b:	mov    DWORD PTR [rsp-0x3c],r13d
  404e70:	add    eax,ebp
  404e72:	rorx   edi,esi,0x1b
  404e78:	lea    edi,[rdi+rax*1]
  404e7b:	add    edi,0x8f1bbcdc
  404e81:	rorx   r9d,r9d,0x2
  404e87:	mov    ebp,esi
  404e89:	or     ebp,r9d
  404e8c:	and    ebp,edx
  404e8e:	mov    eax,esi
  404e90:	and    eax,r9d
  404e93:	or     eax,ebp
  404e95:	mov    ebp,r10d
  404e98:	mov    ebx,DWORD PTR [rsp-0x40]
  404e9c:	xor    ebp,ebx
  404e9e:	mov    DWORD PTR [rsp-0x1c],r14d
  404ea3:	xor    ebp,r14d
  404ea6:	xor    ebp,r8d
  404ea9:	rorx   r12d,ebp,0x1f
  404eaf:	add    ecx,r12d
  404eb2:	add    ecx,eax
  404eb4:	rorx   eax,edi,0x1b
  404eba:	lea    r8d,[rax+rcx*1]
  404ebe:	add    r8d,0x8f1bbcdc
  404ec5:	rorx   ecx,esi,0x2
  404ecb:	mov    eax,edi
  404ecd:	or     eax,ecx
  404ecf:	and    eax,r9d
  404ed2:	mov    esi,edi
  404ed4:	and    esi,ecx
  404ed6:	or     esi,eax
  404ed8:	mov    eax,r15d
  404edb:	mov    r15d,DWORD PTR [rsp-0x20]
  404ee0:	xor    eax,r15d
  404ee3:	xor    eax,DWORD PTR [rsp-0x28]
  404ee7:	xor    eax,DWORD PTR [rsp-0x58]
  404eeb:	rorx   r11d,eax,0x1f
  404ef1:	add    edx,r11d
  404ef4:	mov    DWORD PTR [rsp-0x24],r11d
  404ef9:	add    edx,esi
  404efb:	rorx   eax,r8d,0x1b
  404f01:	lea    r14d,[rax+rdx*1]
  404f05:	add    r14d,0x8f1bbcdc
  404f0c:	rorx   edx,edi,0x2
  404f12:	mov    eax,edx
  404f14:	xor    eax,ecx
  404f16:	xor    eax,r8d
  404f19:	mov    edi,ebx
  404f1b:	mov    r10d,DWORD PTR [rsp-0x4c]
  404f20:	xor    edi,r10d
  404f23:	xor    edi,DWORD PTR [rsp-0x44]
  404f27:	xor    edi,r13d
  404f2a:	rorx   edi,edi,0x1f
  404f30:	add    r9d,edi
  404f33:	mov    ebx,edi
  404f35:	mov    DWORD PTR [rsp-0x5c],edi
  404f39:	add    r9d,eax
  404f3c:	rorx   eax,r14d,0x1b
  404f42:	lea    edi,[rax+r9*1]
  404f46:	add    edi,0xca62c1d6
  404f4c:	rorx   eax,r8d,0x2
  404f52:	mov    ebp,eax
  404f54:	xor    ebp,edx
  404f56:	xor    ebp,r14d
  404f59:	mov    r9d,DWORD PTR [rsp-0x2c]
  404f5e:	mov    esi,r15d
  404f61:	xor    esi,r9d
  404f64:	xor    esi,DWORD PTR [rsp-0x54]
  404f68:	xor    esi,r12d
  404f6b:	rorx   r15d,esi,0x1f
  404f71:	add    ecx,r15d
  404f74:	mov    DWORD PTR [rsp-0x40],r15d
  404f79:	add    ecx,ebp
  404f7b:	rorx   ebp,edi,0x1b
  404f81:	lea    r8d,[rcx+rbp*1]
  404f85:	add    r8d,0xca62c1d6
  404f8c:	rorx   ecx,r14d,0x2
  404f92:	mov    esi,ecx
  404f94:	xor    esi,eax
  404f96:	xor    esi,edi
  404f98:	mov    r14d,DWORD PTR [rsp-0x50]
  404f9d:	xor    r10d,r14d
  404fa0:	xor    r10d,DWORD PTR [rsp-0x48]
  404fa5:	xor    r10d,r11d
  404fa8:	rorx   r11d,r10d,0x1f
  404fae:	add    edx,r11d
  404fb1:	mov    DWORD PTR [rsp-0x4c],r11d
  404fb6:	add    edx,esi
  404fb8:	rorx   esi,r8d,0x1b
  404fbe:	lea    r13d,[rsi+rdx*1]
  404fc2:	add    r13d,0xca62c1d6
  404fc9:	rorx   edx,edi,0x2
  404fcf:	mov    edi,edx
  404fd1:	xor    edi,ecx
  404fd3:	xor    edi,r8d
  404fd6:	mov    ebp,r9d
  404fd9:	mov    r9d,DWORD PTR [rsp-0x34]
  404fde:	xor    ebp,r9d
  404fe1:	xor    ebp,DWORD PTR [rsp-0x30]
  404fe5:	xor    ebp,ebx
  404fe7:	rorx   ebx,ebp,0x1f
  404fed:	add    eax,ebx
  404fef:	mov    r10d,ebx
  404ff2:	mov    DWORD PTR [rsp-0x38],ebx
  404ff6:	add    eax,edi
  404ff8:	rorx   edi,r13d,0x1b
  404ffe:	lea    edi,[rdi+rax*1]
  405001:	add    edi,0xca62c1d6
  405007:	rorx   eax,r8d,0x2
  40500d:	mov    ebp,eax
  40500f:	xor    ebp,edx
  405011:	xor    ebp,r13d
  405014:	mov    ebx,r14d
  405017:	mov    esi,DWORD PTR [rsp-0x1c]
  40501b:	xor    ebx,esi
  40501d:	mov    r14d,esi
  405020:	xor    ebx,DWORD PTR [rsp-0x58]
  405024:	xor    ebx,r15d
  405027:	rorx   r15d,ebx,0x1f
  40502d:	add    ecx,r15d
  405030:	add    ecx,ebp
  405032:	rorx   ebp,edi,0x1b
  405038:	lea    r8d,[rcx+rbp*1]
  40503c:	add    r8d,0xca62c1d6
  405043:	rorx   ecx,r13d,0x2
  405049:	mov    esi,ecx
  40504b:	xor    esi,eax
  40504d:	xor    esi,edi
  40504f:	mov    ebp,DWORD PTR [rsp-0x28]
  405053:	xor    r9d,ebp
  405056:	xor    r9d,DWORD PTR [rsp-0x3c]
  40505b:	xor    r9d,r11d
  40505e:	rorx   r13d,r9d,0x1f
  405064:	add    edx,r13d
  405067:	add    edx,esi
  405069:	rorx   esi,r8d,0x1b
  40506f:	lea    esi,[rsi+rdx*1]
  405072:	add    esi,0xca62c1d6
  405078:	rorx   edx,edi,0x2
  40507e:	mov    edi,edx
  405080:	xor    edi,ecx
  405082:	xor    edi,r8d
  405085:	mov    ebx,r14d
  405088:	mov    r9d,DWORD PTR [rsp-0x44]
  40508d:	xor    ebx,r9d
  405090:	xor    ebx,r12d
  405093:	xor    ebx,r10d
  405096:	rorx   r14d,ebx,0x1f
  40509c:	add    eax,r14d
  40509f:	mov    DWORD PTR [rsp-0x2c],r14d
  4050a4:	add    eax,edi
  4050a6:	rorx   edi,esi,0x1b
  4050ac:	lea    edi,[rdi+rax*1]
  4050af:	add    edi,0xca62c1d6
  4050b5:	rorx   eax,r8d,0x2
  4050bb:	mov    r8d,eax
  4050be:	xor    r8d,edx
  4050c1:	xor    r8d,esi
  4050c4:	mov    ebx,ebp
  4050c6:	mov    r10d,DWORD PTR [rsp-0x54]
  4050cb:	xor    ebx,r10d
  4050ce:	xor    ebx,DWORD PTR [rsp-0x24]
  4050d2:	xor    ebx,r15d
  4050d5:	rorx   ebp,ebx,0x1f
  4050db:	mov    DWORD PTR [rsp-0x50],ebp
  4050df:	add    ecx,ebp
  4050e1:	add    ecx,r8d
  4050e4:	rorx   ebx,edi,0x1b
  4050ea:	lea    r8d,[rbx+rcx*1]
  4050ee:	add    r8d,0xca62c1d6
  4050f5:	rorx   ecx,esi,0x2
  4050fb:	mov    esi,ecx
  4050fd:	xor    esi,eax
  4050ff:	xor    esi,edi
  405101:	mov    ebp,r9d
  405104:	mov    r9d,DWORD PTR [rsp-0x48]
  405109:	xor    ebp,r9d
  40510c:	xor    ebp,DWORD PTR [rsp-0x5c]
  405110:	xor    ebp,r13d
  405113:	rorx   r11d,ebp,0x1f
  405119:	add    edx,r11d
  40511c:	mov    DWORD PTR [rsp-0x44],r11d
  405121:	add    edx,esi
  405123:	rorx   esi,r8d,0x1b
  405129:	lea    edx,[rsi+rdx*1]
  40512c:	add    edx,0xca62c1d6
  405132:	rorx   ebx,edi,0x2
  405138:	mov    esi,ebx
  40513a:	xor    esi,ecx
  40513c:	xor    esi,r8d
  40513f:	mov    edi,r10d
  405142:	mov    r10d,DWORD PTR [rsp-0x30]
  405147:	xor    edi,r10d
  40514a:	xor    edi,DWORD PTR [rsp-0x40]
  40514e:	xor    edi,r14d
  405151:	rorx   r14d,edi,0x1f
  405157:	add    eax,r14d
  40515a:	mov    DWORD PTR [rsp-0x28],r14d
  40515f:	add    eax,esi
  405161:	rorx   esi,edx,0x1b
  405167:	lea    esi,[rsi+rax*1]
  40516a:	add    esi,0xca62c1d6
  405170:	rorx   r8d,r8d,0x2
  405176:	mov    edi,r8d
  405179:	xor    edi,ebx
  40517b:	xor    edi,edx
  40517d:	mov    eax,r9d
  405180:	mov    ebp,DWORD PTR [rsp-0x58]
  405184:	xor    eax,ebp
  405186:	xor    eax,DWORD PTR [rsp-0x4c]
  40518a:	xor    eax,DWORD PTR [rsp-0x50]
  40518e:	rorx   eax,eax,0x1f
  405194:	mov    DWORD PTR [rsp-0x34],eax
  405198:	add    ecx,eax
  40519a:	add    ecx,edi
  40519c:	rorx   edi,esi,0x1b
  4051a2:	lea    edi,[rdi+rcx*1]
  4051a5:	add    edi,0xca62c1d6
  4051ab:	rorx   ecx,edx,0x2
  4051b1:	mov    edx,ecx
  4051b3:	xor    edx,r8d
  4051b6:	xor    edx,esi
  4051b8:	mov    eax,r10d
  4051bb:	mov    r9d,DWORD PTR [rsp-0x3c]
  4051c0:	xor    eax,r9d
  4051c3:	xor    eax,DWORD PTR [rsp-0x38]
  4051c7:	xor    eax,r11d
  4051ca:	rorx   eax,eax,0x1f
  4051d0:	add    ebx,eax
  4051d2:	mov    r11d,eax
  4051d5:	mov    DWORD PTR [rsp-0x54],eax
  4051d9:	add    ebx,edx
  4051db:	rorx   edx,edi,0x1b
  4051e1:	lea    ebx,[rdx+rbx*1]
  4051e4:	add    ebx,0xca62c1d6
  4051ea:	rorx   edx,esi,0x2
  4051f0:	mov    eax,edx
  4051f2:	xor    eax,ecx
  4051f4:	xor    eax,edi
  4051f6:	mov    esi,ebp
  4051f8:	xor    esi,r12d
  4051fb:	xor    esi,r15d
  4051fe:	xor    esi,r14d
  405201:	rorx   r14d,esi,0x1f
  405207:	add    r8d,r14d
  40520a:	add    r8d,eax
  40520d:	rorx   eax,ebx,0x1b
  405213:	lea    esi,[rax+r8*1]
  405217:	add    esi,0xca62c1d6
  40521d:	mov    DWORD PTR [rsp-0x48],esi
  405221:	rorx   r10d,edi,0x2
  405227:	mov    eax,r10d
  40522a:	xor    eax,edx
  40522c:	xor    eax,ebx
  40522e:	mov    edi,DWORD PTR [rsp-0x24]
  405232:	mov    ebp,r9d
  405235:	xor    ebp,edi
  405237:	xor    ebp,r13d
  40523a:	mov    r9d,DWORD PTR [rsp-0x34]
  40523f:	xor    ebp,r9d
  405242:	rorx   ebp,ebp,0x1f
  405248:	mov    DWORD PTR [rsp-0x58],ebp
  40524c:	add    ecx,ebp
  40524e:	add    ecx,eax
  405250:	rorx   eax,esi,0x1b
  405256:	lea    ebp,[rax+rcx*1]
  405259:	add    ebp,0xca62c1d6
  40525f:	xor    r12d,DWORD PTR [rsp-0x5c]
  405264:	xor    r12d,DWORD PTR [rsp-0x2c]
  405269:	rorx   ebx,ebx,0x2
  40526f:	mov    eax,ebx
  405271:	xor    eax,r10d
  405274:	xor    eax,esi
  405276:	xor    r12d,r11d
  405279:	rorx   ecx,r12d,0x1f
  40527f:	add    edx,ecx
  405281:	add    edx,eax
  405283:	rorx   eax,ebp,0x1b
  405289:	lea    r11d,[rax+rdx*1]
  40528d:	add    r11d,0xca62c1d6
  405294:	mov    eax,edi
  405296:	mov    edx,DWORD PTR [rsp-0x40]
  40529a:	xor    eax,edx
  40529c:	xor    eax,DWORD PTR [rsp-0x50]
  4052a0:	xor    eax,r14d
  4052a3:	mov    r14d,DWORD PTR [rsp-0x38]
  4052a8:	xor    edx,r14d
  4052ab:	xor    edx,DWORD PTR [rsp-0x28]
  4052af:	xor    edx,ecx
  4052b1:	mov    esi,edx
  4052b3:	mov    r8d,DWORD PTR [rsp-0x4c]
  4052b8:	xor    r15d,r8d
  4052bb:	xor    r15d,r9d
  4052be:	rorx   edx,DWORD PTR [rsp-0x48],0x2
  4052c6:	rorx   r12d,eax,0x1f
  4052cc:	rorx   edi,ebp,0x2
  4052d2:	rorx   r9d,r11d,0x2
  4052d8:	mov    ecx,r9d
  4052db:	xor    ecx,edi
  4052dd:	xor    r15d,r12d
  4052e0:	rorx   eax,r15d,0x1f
  4052e6:	add    eax,edi
  4052e8:	xor    edi,edx
  4052ea:	rorx   esi,esi,0x1f
  4052f0:	add    esi,edx
  4052f2:	xor    edx,ebx
  4052f4:	xor    edx,ebp
  4052f6:	add    r10d,r12d
  4052f9:	add    r10d,edx
  4052fc:	rorx   edx,r11d,0x1b
  405302:	lea    edx,[rdx+r10*1]
  405306:	add    edx,0xca62c1d6
  40530c:	xor    edi,r11d
  40530f:	mov    ebp,DWORD PTR [rsp-0x5c]
  405313:	xor    ebp,r8d
  405316:	xor    ebp,DWORD PTR [rsp-0x44]
  40531a:	xor    ebp,DWORD PTR [rsp-0x58]
  40531e:	rorx   ebp,ebp,0x1f
  405324:	add    ebx,ebp
  405326:	add    ebx,edi
  405328:	rorx   edi,edx,0x1b
  40532e:	lea    edi,[rdi+rbx*1]
  405331:	add    edi,0xca62c1d6
  405337:	xor    ecx,edx
  405339:	add    esi,ecx
  40533b:	rorx   ecx,edi,0x1b
  405341:	lea    ecx,[rcx+rsi*1]
  405344:	add    ecx,0xca62c1d6
  40534a:	rorx   edx,edx,0x2
  405350:	mov    esi,edx
  405352:	xor    esi,r9d
  405355:	xor    esi,edi
  405357:	add    eax,esi
  405359:	rorx   esi,ecx,0x1b
  40535f:	lea    eax,[rsi+rax*1]
  405362:	add    eax,0xca62c1d6
  405367:	rorx   esi,ecx,0x2
  40536d:	vmovd  xmm1,eax
  405371:	vpinsrd xmm1,xmm1,esi,0x1
  405377:	rorx   esi,edi,0x2
  40537d:	vpinsrd xmm1,xmm1,esi,0x2
  405383:	xor    esi,edx
  405385:	xor    esi,ecx
  405387:	xor    r13d,r14d
  40538a:	xor    r13d,DWORD PTR [rsp-0x54]
  40538f:	xor    r13d,ebp
  405392:	rorx   ecx,r13d,0x1f
  405398:	add    ecx,DWORD PTR [rsp-0xc]
  40539c:	add    ecx,r9d
  40539f:	add    ecx,esi
  4053a1:	rorx   eax,eax,0x1b
  4053a7:	lea    eax,[rax+rcx*1]
  4053aa:	add    eax,0xca62c1d6
  4053af:	mov    rcx,QWORD PTR [rsp-0x8]
  4053b4:	mov    DWORD PTR [rcx],eax
  4053b6:	vpinsrd xmm1,xmm1,edx,0x3
  4053bc:	vpaddd xmm0,xmm1,xmm0
  4053c0:	vmovdqu XMMWORD PTR [rcx+0x4],xmm0
  4053c5:	pop    rbx
  4053c6:	pop    r12
  4053c8:	pop    r13
  4053ca:	pop    r14
  4053cc:	pop    r15
  4053ce:	pop    rbp
  4053cf:	ret    
  4053d0:	push   rbp
  4053d1:	push   r15
  4053d3:	push   r14
  4053d5:	push   r12
  4053d7:	push   rbx
  4053d8:	sub    rsp,0x10
  4053dc:	mov    r14,rsi
  4053df:	mov    rbx,rdi
  4053e2:	mov    rax,QWORD PTR [rdi+0x18]
  4053e6:	mov    rcx,rax
  4053e9:	shr    rcx,0x38
  4053ed:	mov    BYTE PTR [rsp+0x8],cl
  4053f1:	mov    rcx,rax
  4053f4:	shr    rcx,0x30
  4053f8:	mov    BYTE PTR [rsp+0x9],cl
  4053fc:	mov    rcx,rax
  4053ff:	shr    rcx,0x28
  405403:	mov    BYTE PTR [rsp+0xa],cl
  405407:	mov    rcx,rax
  40540a:	shr    rcx,0x20
  40540e:	mov    BYTE PTR [rsp+0xb],cl
  405412:	mov    rcx,rax
  405415:	shr    rcx,0x18
  405419:	mov    BYTE PTR [rsp+0xc],cl
  40541d:	mov    rcx,rax
  405420:	shr    rcx,0x10
  405424:	mov    BYTE PTR [rsp+0xd],cl
  405428:	mov    BYTE PTR [rsp+0xe],ah
  40542c:	mov    BYTE PTR [rsp+0xf],al
  405430:	mov    ecx,0x603
  405435:	bextr  ecx,eax,ecx
  40543a:	add    rax,0x8
  40543e:	mov    QWORD PTR [rdi+0x18],rax
  405442:	cmp    ecx,0x3f
  405445:	jne    405461 <rb_base64_encode@plt+0x3131>
  405447:	lea    r15,[rbx+0x20]
  40544b:	mov    BYTE PTR [rbx+0x5f],0x80
  40544f:	mov    rdi,rbx
  405452:	mov    rsi,r15
  405455:	call   404050 <rb_base64_encode@plt+0x1d20>
  40545a:	mov    edx,0x1
  40545f:	jmp    40546b <rb_base64_encode@plt+0x313b>
  405461:	lea    r15,[rbx+rcx*1]
  405465:	add    r15,0x20
  405469:	xor    edx,edx
  40546b:	lea    rsi,[rip+0xdfe]        # 406270 <rb_base64_encode@plt+0x3f40>
  405472:	add    rsi,rdx
  405475:	xor    rdx,0x1
  405479:	mov    rdi,r15
  40547c:	call   402310 <memcpy@plt>
  405481:	mov    rcx,QWORD PTR [rbx+0x18]
  405485:	mov    edx,ecx
  405487:	and    edx,0x1f8
  40548d:	mov    r12d,0x603
  405493:	bextr  eax,ecx,r12d
  405498:	cmp    rdx,0x1c0
  40549f:	je     405511 <rb_base64_encode@plt+0x31e1>
  4054a1:	lea    r15,[rbx+0x20]
  4054a5:	lea    rbp,[rip+0xdc6]        # 406272 <rb_base64_encode@plt+0x3f42>
  4054ac:	nop    DWORD PTR [rax+0x0]
  4054b0:	add    rcx,0x8
  4054b4:	mov    QWORD PTR [rbx+0x18],rcx
  4054b8:	cmp    rax,0x3f
  4054bc:	jne    4054e0 <rb_base64_encode@plt+0x31b0>
  4054be:	mov    BYTE PTR [rbx+0x5f],0x0
  4054c2:	mov    rdi,rbx
  4054c5:	mov    rsi,r15
  4054c8:	call   404050 <rb_base64_encode@plt+0x1d20>
  4054cd:	mov    rdi,r15
  4054d0:	mov    edx,0x1
  4054d5:	jmp    4054ea <rb_base64_encode@plt+0x31ba>
  4054d7:	nop    WORD PTR [rax+rax*1+0x0]
  4054e0:	lea    rdi,[rbx+rax*1]
  4054e4:	add    rdi,0x20
  4054e8:	xor    edx,edx
  4054ea:	lea    rsi,[rdx+rbp*1]
  4054ee:	xor    rdx,0x1
  4054f2:	call   402310 <memcpy@plt>
  4054f7:	mov    rcx,QWORD PTR [rbx+0x18]
  4054fb:	bextr  eax,ecx,r12d
  405500:	mov    edx,ecx
  405502:	and    edx,0x1f8
  405508:	cmp    rdx,0x1c0
  40550f:	jne    4054b0 <rb_base64_encode@plt+0x3180>
  405511:	add    rcx,0x40
  405515:	mov    QWORD PTR [rbx+0x18],rcx
  405519:	lea    rcx,[rax+0x8]
  40551d:	cmp    rcx,0x3f
  405521:	jbe    405562 <rb_base64_encode@plt+0x3232>
  405523:	mov    r12d,0x40
  405529:	sub    r12,rax
  40552c:	lea    rdi,[rbx+rax*1]
  405530:	add    rdi,0x20
  405534:	lea    r15,[rbx+0x20]
  405538:	lea    rsi,[rsp+0x8]
  40553d:	mov    rdx,r12
  405540:	call   402310 <memcpy@plt>
  405545:	mov    rdi,rbx
  405548:	mov    rsi,r15
  40554b:	call   404050 <rb_base64_encode@plt+0x1d20>
  405550:	lea    rsi,[rsp+r12*1]
  405554:	add    rsi,0x8
  405558:	mov    edx,0x8
  40555d:	sub    rdx,r12
  405560:	jmp    405574 <rb_base64_encode@plt+0x3244>
  405562:	lea    rsi,[rsp+0x8]
  405567:	lea    r15,[rbx+rax*1]
  40556b:	add    r15,0x20
  40556f:	mov    edx,0x8
  405574:	mov    rdi,r15
  405577:	call   402310 <memcpy@plt>
  40557c:	xor    eax,eax
  40557e:	xchg   ax,ax
  405580:	movzx  ecx,BYTE PTR [rbx+rax*1+0x3]
  405585:	mov    BYTE PTR [r14+rax*1],cl
  405589:	movzx  ecx,BYTE PTR [rbx+rax*1+0x2]
  40558e:	mov    BYTE PTR [r14+rax*1+0x1],cl
  405593:	movzx  ecx,BYTE PTR [rbx+rax*1+0x1]
  405598:	mov    BYTE PTR [r14+rax*1+0x2],cl
  40559d:	movzx  ecx,BYTE PTR [rbx+rax*1]
  4055a1:	mov    BYTE PTR [r14+rax*1+0x3],cl
  4055a6:	add    rax,0x4
  4055aa:	cmp    rax,0x14
  4055ae:	jne    405580 <rb_base64_encode@plt+0x3250>
  4055b0:	vxorps xmm0,xmm0,xmm0
  4055b4:	vmovups YMMWORD PTR [rbx+0x40],ymm0
  4055b9:	vmovups YMMWORD PTR [rbx+0x20],ymm0
  4055be:	vmovups YMMWORD PTR [rbx],ymm0
  4055c2:	add    rsp,0x10
  4055c6:	pop    rbx
  4055c7:	pop    r12
  4055c9:	pop    r14
  4055cb:	pop    r15
  4055cd:	pop    rbp
  4055ce:	vzeroupper 
  4055d1:	ret    
  4055d2:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4055dc:	nop    DWORD PTR [rax+0x0]
  4055e0:	endbr64 
  4055e4:	push   r15
  4055e6:	lea    r15,[rip+0x27db]        # 407dc8 <rb_base64_encode@plt+0x5a98>
  4055ed:	push   r14
  4055ef:	mov    r14,rdx
  4055f2:	push   r13
  4055f4:	mov    r13,rsi
  4055f7:	push   r12
  4055f9:	mov    r12d,edi
  4055fc:	push   rbp
  4055fd:	lea    rbp,[rip+0x27cc]        # 407dd0 <rb_base64_encode@plt+0x5aa0>
  405604:	push   rbx
  405605:	sub    rbp,r15
  405608:	sub    rsp,0x8
  40560c:	call   402000 <dup2@plt-0x30>
  405611:	sar    rbp,0x3
  405615:	je     405636 <rb_base64_encode@plt+0x3306>
  405617:	xor    ebx,ebx
  405619:	nop    DWORD PTR [rax+0x0]
  405620:	mov    rdx,r14
  405623:	mov    rsi,r13
  405626:	mov    edi,r12d
  405629:	call   QWORD PTR [r15+rbx*8]
  40562d:	add    rbx,0x1
  405631:	cmp    rbp,rbx
  405634:	jne    405620 <rb_base64_encode@plt+0x32f0>
  405636:	add    rsp,0x8
  40563a:	pop    rbx
  40563b:	pop    rbp
  40563c:	pop    r12
  40563e:	pop    r13
  405640:	pop    r14
  405642:	pop    r15
  405644:	ret    
  405645:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  405650:	endbr64 
  405654:	ret    

Disassembly of section .fini:

0000000000405658 <.fini>:
  405658:	endbr64 
  40565c:	sub    rsp,0x8
  405660:	add    rsp,0x8
  405664:	ret    
