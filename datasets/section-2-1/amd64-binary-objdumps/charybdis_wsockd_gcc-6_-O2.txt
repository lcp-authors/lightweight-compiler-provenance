
../repos/charybdis/wsockd/.libs/wsockd:     file format elf64-x86-64


Disassembly of section .init:

0000000000402000 <.init>:
  402000:	endbr64 
  402004:	sub    rsp,0x8
  402008:	mov    rax,QWORD PTR [rip+0x5fd9]        # 407fe8 <rb_base64_encode@plt+0x5c98>
  40200f:	test   rax,rax
  402012:	je     402016 <dup2@plt-0x1a>
  402014:	call   rax
  402016:	add    rsp,0x8
  40201a:	ret    

Disassembly of section .plt:

0000000000402020 <dup2@plt-0x10>:
  402020:	push   QWORD PTR [rip+0x5fe2]        # 408008 <rb_base64_encode@plt+0x5cb8>
  402026:	jmp    QWORD PTR [rip+0x5fe4]        # 408010 <rb_base64_encode@plt+0x5cc0>
  40202c:	nop    DWORD PTR [rax+0x0]

0000000000402030 <dup2@plt>:
  402030:	jmp    QWORD PTR [rip+0x5fe2]        # 408018 <rb_base64_encode@plt+0x5cc8>
  402036:	push   0x0
  40203b:	jmp    402020 <dup2@plt-0x10>

0000000000402040 <rb_get_type@plt>:
  402040:	jmp    QWORD PTR [rip+0x5fda]        # 408020 <rb_base64_encode@plt+0x5cd0>
  402046:	push   0x1
  40204b:	jmp    402020 <dup2@plt-0x10>

0000000000402050 <memset@plt>:
  402050:	jmp    QWORD PTR [rip+0x5fd2]        # 408028 <rb_base64_encode@plt+0x5cd8>
  402056:	push   0x2
  40205b:	jmp    402020 <dup2@plt-0x10>

0000000000402060 <rb_event_addish@plt>:
  402060:	jmp    QWORD PTR [rip+0x5fca]        # 408030 <rb_base64_encode@plt+0x5ce0>
  402066:	push   0x3
  40206b:	jmp    402020 <dup2@plt-0x10>

0000000000402070 <rb_ignore_errno@plt>:
  402070:	jmp    QWORD PTR [rip+0x5fc2]        # 408038 <rb_base64_encode@plt+0x5ce8>
  402076:	push   0x4
  40207b:	jmp    402020 <dup2@plt-0x10>

0000000000402080 <close@plt>:
  402080:	jmp    QWORD PTR [rip+0x5fba]        # 408040 <rb_base64_encode@plt+0x5cf0>
  402086:	push   0x5
  40208b:	jmp    402020 <dup2@plt-0x10>

0000000000402090 <rb_setselect@plt>:
  402090:	jmp    QWORD PTR [rip+0x5fb2]        # 408048 <rb_base64_encode@plt+0x5cf8>
  402096:	push   0x6
  40209b:	jmp    402020 <dup2@plt-0x10>

00000000004020a0 <rb_send_fd_buf@plt>:
  4020a0:	jmp    QWORD PTR [rip+0x5faa]        # 408050 <rb_base64_encode@plt+0x5d00>
  4020a6:	push   0x7
  4020ab:	jmp    402020 <dup2@plt-0x10>

00000000004020b0 <exit@plt>:
  4020b0:	jmp    QWORD PTR [rip+0x5fa2]        # 408058 <rb_base64_encode@plt+0x5d08>
  4020b6:	push   0x8
  4020bb:	jmp    402020 <dup2@plt-0x10>

00000000004020c0 <__assert_fail@plt>:
  4020c0:	jmp    QWORD PTR [rip+0x5f9a]        # 408060 <rb_base64_encode@plt+0x5d10>
  4020c6:	push   0x9
  4020cb:	jmp    402020 <dup2@plt-0x10>

00000000004020d0 <rb_set_nb@plt>:
  4020d0:	jmp    QWORD PTR [rip+0x5f92]        # 408068 <rb_base64_encode@plt+0x5d18>
  4020d6:	push   0xa
  4020db:	jmp    402020 <dup2@plt-0x10>

00000000004020e0 <rb_linebuf_parse@plt>:
  4020e0:	jmp    QWORD PTR [rip+0x5f8a]        # 408070 <rb_base64_encode@plt+0x5d20>
  4020e6:	push   0xb
  4020eb:	jmp    402020 <dup2@plt-0x10>

00000000004020f0 <__vsnprintf_chk@plt>:
  4020f0:	jmp    QWORD PTR [rip+0x5f82]        # 408078 <rb_base64_encode@plt+0x5d28>
  4020f6:	push   0xc
  4020fb:	jmp    402020 <dup2@plt-0x10>

0000000000402100 <rb_strlcpy@plt>:
  402100:	jmp    QWORD PTR [rip+0x5f7a]        # 408080 <rb_base64_encode@plt+0x5d30>
  402106:	push   0xd
  40210b:	jmp    402020 <dup2@plt-0x10>

0000000000402110 <rb_init_rawbuffers@plt>:
  402110:	jmp    QWORD PTR [rip+0x5f72]        # 408088 <rb_base64_encode@plt+0x5d38>
  402116:	push   0xe
  40211b:	jmp    402020 <dup2@plt-0x10>

0000000000402120 <free@plt>:
  402120:	jmp    QWORD PTR [rip+0x5f6a]        # 408090 <rb_base64_encode@plt+0x5d40>
  402126:	push   0xf
  40212b:	jmp    402020 <dup2@plt-0x10>

0000000000402130 <strlen@plt>:
  402130:	jmp    QWORD PTR [rip+0x5f62]        # 408098 <rb_base64_encode@plt+0x5d48>
  402136:	push   0x10
  40213b:	jmp    402020 <dup2@plt-0x10>

0000000000402140 <rb_lib_loop@plt>:
  402140:	jmp    QWORD PTR [rip+0x5f5a]        # 4080a0 <rb_base64_encode@plt+0x5d50>
  402146:	push   0x11
  40214b:	jmp    402020 <dup2@plt-0x10>

0000000000402150 <rb_read@plt>:
  402150:	jmp    QWORD PTR [rip+0x5f52]        # 4080a8 <rb_base64_encode@plt+0x5d58>
  402156:	push   0x12
  40215b:	jmp    402020 <dup2@plt-0x10>

0000000000402160 <rb_set_type@plt>:
  402160:	jmp    QWORD PTR [rip+0x5f4a]        # 4080b0 <rb_base64_encode@plt+0x5d60>
  402166:	push   0x13
  40216b:	jmp    402020 <dup2@plt-0x10>

0000000000402170 <rb_linebuf_get@plt>:
  402170:	jmp    QWORD PTR [rip+0x5f42]        # 4080b8 <rb_base64_encode@plt+0x5d68>
  402176:	push   0x14
  40217b:	jmp    402020 <dup2@plt-0x10>

0000000000402180 <rb_linebuf_flush@plt>:
  402180:	jmp    QWORD PTR [rip+0x5f3a]        # 4080c0 <rb_base64_encode@plt+0x5d70>
  402186:	push   0x15
  40218b:	jmp    402020 <dup2@plt-0x10>

0000000000402190 <rb_linebuf_donebuf@plt>:
  402190:	jmp    QWORD PTR [rip+0x5f32]        # 4080c8 <rb_base64_encode@plt+0x5d78>
  402196:	push   0x16
  40219b:	jmp    402020 <dup2@plt-0x10>

00000000004021a0 <strerror@plt>:
  4021a0:	jmp    QWORD PTR [rip+0x5f2a]        # 4080d0 <rb_base64_encode@plt+0x5d80>
  4021a6:	push   0x17
  4021ab:	jmp    402020 <dup2@plt-0x10>

00000000004021b0 <sigaction@plt>:
  4021b0:	jmp    QWORD PTR [rip+0x5f22]        # 4080d8 <rb_base64_encode@plt+0x5d88>
  4021b6:	push   0x18
  4021bb:	jmp    402020 <dup2@plt-0x10>

00000000004021c0 <rb_strcasestr@plt>:
  4021c0:	jmp    QWORD PTR [rip+0x5f1a]        # 4080e0 <rb_base64_encode@plt+0x5d90>
  4021c6:	push   0x19
  4021cb:	jmp    402020 <dup2@plt-0x10>

00000000004021d0 <rb_close@plt>:
  4021d0:	jmp    QWORD PTR [rip+0x5f12]        # 4080e8 <rb_base64_encode@plt+0x5d98>
  4021d6:	push   0x1a
  4021db:	jmp    402020 <dup2@plt-0x10>

00000000004021e0 <strtol@plt>:
  4021e0:	jmp    QWORD PTR [rip+0x5f0a]        # 4080f0 <rb_base64_encode@plt+0x5da0>
  4021e6:	push   0x1b
  4021eb:	jmp    402020 <dup2@plt-0x10>

00000000004021f0 <rb_rawbuf_length@plt>:
  4021f0:	jmp    QWORD PTR [rip+0x5f02]        # 4080f8 <rb_base64_encode@plt+0x5da8>
  4021f6:	push   0x1c
  4021fb:	jmp    402020 <dup2@plt-0x10>

0000000000402200 <rb_free_rawbuffer@plt>:
  402200:	jmp    QWORD PTR [rip+0x5efa]        # 408100 <rb_base64_encode@plt+0x5db0>
  402206:	push   0x1d
  40220b:	jmp    402020 <dup2@plt-0x10>

0000000000402210 <getenv@plt>:
  402210:	jmp    QWORD PTR [rip+0x5ef2]        # 408108 <rb_base64_encode@plt+0x5db8>
  402216:	push   0x1e
  40221b:	jmp    402020 <dup2@plt-0x10>

0000000000402220 <rb_outofmemory@plt>:
  402220:	jmp    QWORD PTR [rip+0x5eea]        # 408110 <rb_base64_encode@plt+0x5dc0>
  402226:	push   0x1f
  40222b:	jmp    402020 <dup2@plt-0x10>

0000000000402230 <__errno_location@plt>:
  402230:	jmp    QWORD PTR [rip+0x5ee2]        # 408118 <rb_base64_encode@plt+0x5dc8>
  402236:	push   0x20
  40223b:	jmp    402020 <dup2@plt-0x10>

0000000000402240 <sigaddset@plt>:
  402240:	jmp    QWORD PTR [rip+0x5eda]        # 408120 <rb_base64_encode@plt+0x5dd0>
  402246:	push   0x21
  40224b:	jmp    402020 <dup2@plt-0x10>

0000000000402250 <__stack_chk_fail@plt>:
  402250:	jmp    QWORD PTR [rip+0x5ed2]        # 408128 <rb_base64_encode@plt+0x5dd8>
  402256:	push   0x22
  40225b:	jmp    402020 <dup2@plt-0x10>

0000000000402260 <rb_rawbuf_get@plt>:
  402260:	jmp    QWORD PTR [rip+0x5eca]        # 408130 <rb_base64_encode@plt+0x5de0>
  402266:	push   0x23
  40226b:	jmp    402020 <dup2@plt-0x10>

0000000000402270 <rb_lib_init@plt>:
  402270:	jmp    QWORD PTR [rip+0x5ec2]        # 408138 <rb_base64_encode@plt+0x5de8>
  402276:	push   0x24
  40227b:	jmp    402020 <dup2@plt-0x10>

0000000000402280 <rb_new_rawbuffer@plt>:
  402280:	jmp    QWORD PTR [rip+0x5eba]        # 408140 <rb_base64_encode@plt+0x5df0>
  402286:	push   0x25
  40228b:	jmp    402020 <dup2@plt-0x10>

0000000000402290 <rb_open@plt>:
  402290:	jmp    QWORD PTR [rip+0x5eb2]        # 408148 <rb_base64_encode@plt+0x5df8>
  402296:	push   0x26
  40229b:	jmp    402020 <dup2@plt-0x10>

00000000004022a0 <rb_recv_fd_buf@plt>:
  4022a0:	jmp    QWORD PTR [rip+0x5eaa]        # 408150 <rb_base64_encode@plt+0x5e00>
  4022a6:	push   0x27
  4022ab:	jmp    402020 <dup2@plt-0x10>

00000000004022b0 <calloc@plt>:
  4022b0:	jmp    QWORD PTR [rip+0x5ea2]        # 408158 <rb_base64_encode@plt+0x5e08>
  4022b6:	push   0x28
  4022bb:	jmp    402020 <dup2@plt-0x10>

00000000004022c0 <getrlimit@plt>:
  4022c0:	jmp    QWORD PTR [rip+0x5e9a]        # 408160 <rb_base64_encode@plt+0x5e10>
  4022c6:	push   0x29
  4022cb:	jmp    402020 <dup2@plt-0x10>

00000000004022d0 <rb_linebuf_newbuf@plt>:
  4022d0:	jmp    QWORD PTR [rip+0x5e92]        # 408168 <rb_base64_encode@plt+0x5e18>
  4022d6:	push   0x2a
  4022db:	jmp    402020 <dup2@plt-0x10>

00000000004022e0 <rb_linebuf_init@plt>:
  4022e0:	jmp    QWORD PTR [rip+0x5e8a]        # 408170 <rb_base64_encode@plt+0x5e20>
  4022e6:	push   0x2b
  4022eb:	jmp    402020 <dup2@plt-0x10>

00000000004022f0 <sigemptyset@plt>:
  4022f0:	jmp    QWORD PTR [rip+0x5e82]        # 408178 <rb_base64_encode@plt+0x5e28>
  4022f6:	push   0x2c
  4022fb:	jmp    402020 <dup2@plt-0x10>

0000000000402300 <fwrite@plt>:
  402300:	jmp    QWORD PTR [rip+0x5e7a]        # 408180 <rb_base64_encode@plt+0x5e30>
  402306:	push   0x2d
  40230b:	jmp    402020 <dup2@plt-0x10>

0000000000402310 <rb_rawbuf_append@plt>:
  402310:	jmp    QWORD PTR [rip+0x5e72]        # 408188 <rb_base64_encode@plt+0x5e38>
  402316:	push   0x2e
  40231b:	jmp    402020 <dup2@plt-0x10>

0000000000402320 <rb_rawbuf_flush@plt>:
  402320:	jmp    QWORD PTR [rip+0x5e6a]        # 408190 <rb_base64_encode@plt+0x5e40>
  402326:	push   0x2f
  40232b:	jmp    402020 <dup2@plt-0x10>

0000000000402330 <memcpy@plt>:
  402330:	jmp    QWORD PTR [rip+0x5e62]        # 408198 <rb_base64_encode@plt+0x5e48>
  402336:	push   0x30
  40233b:	jmp    402020 <dup2@plt-0x10>

0000000000402340 <open@plt>:
  402340:	jmp    QWORD PTR [rip+0x5e5a]        # 4081a0 <rb_base64_encode@plt+0x5e50>
  402346:	push   0x31
  40234b:	jmp    402020 <dup2@plt-0x10>

0000000000402350 <rb_base64_encode@plt>:
  402350:	jmp    QWORD PTR [rip+0x5e52]        # 4081a8 <rb_base64_encode@plt+0x5e58>
  402356:	push   0x32
  40235b:	jmp    402020 <dup2@plt-0x10>

Disassembly of section .text:

0000000000402360 <.text>:
  402360:	lea    rcx,[rip+0x3f49]        # 4062b0 <rb_base64_encode@plt+0x3f60>
  402367:	lea    rsi,[rip+0x3c96]        # 406004 <rb_base64_encode@plt+0x3cb4>
  40236e:	lea    rdi,[rip+0x3cab]        # 406020 <rb_base64_encode@plt+0x3cd0>
  402375:	sub    rsp,0x8
  402379:	mov    edx,0xd5
  40237e:	call   4020c0 <__assert_fail@plt>
  402383:	lea    rcx,[rip+0x3f16]        # 4062a0 <rb_base64_encode@plt+0x3f50>
  40238a:	lea    rsi,[rip+0x3c73]        # 406004 <rb_base64_encode@plt+0x3cb4>
  402391:	lea    rdi,[rip+0x3c95]        # 40602d <rb_base64_encode@plt+0x3cdd>
  402398:	sub    rsp,0x8
  40239c:	mov    edx,0xec
  4023a1:	call   4020c0 <__assert_fail@plt>
  4023a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4023b0:	push   r15
  4023b2:	push   r14
  4023b4:	mov    edi,0x7
  4023b9:	push   r13
  4023bb:	push   r12
  4023bd:	mov    r13d,0xffff
  4023c3:	push   rbp
  4023c4:	push   rbx
  4023c5:	sub    rsp,0xc8
  4023cc:	lea    rsi,[rsp+0x10]
  4023d1:	mov    rax,QWORD PTR fs:0x28
  4023da:	mov    QWORD PTR [rsp+0xb8],rax
  4023e2:	xor    eax,eax
  4023e4:	call   4022c0 <getrlimit@plt>
  4023e9:	lea    rdi,[rip+0x3c84]        # 406074 <rb_base64_encode@plt+0x3d24>
  4023f0:	test   eax,eax
  4023f2:	cmove  r13,QWORD PTR [rsp+0x10]
  4023f8:	call   402210 <getenv@plt>
  4023fd:	lea    rdi,[rip+0x3c77]        # 40607b <rb_base64_encode@plt+0x3d2b>
  402404:	mov    r12,rax
  402407:	call   402210 <getenv@plt>
  40240c:	lea    rdi,[rip+0x3c71]        # 406084 <rb_base64_encode@plt+0x3d34>
  402413:	mov    rbp,rax
  402416:	call   402210 <getenv@plt>
  40241b:	test   r12,r12
  40241e:	mov    r15,rax
  402421:	sete   dl
  402424:	test   rbp,rbp
  402427:	sete   al
  40242a:	or     dl,al
  40242c:	jne    40269d <rb_base64_encode@plt+0x34d>
  402432:	test   r15,r15
  402435:	je     40269d <rb_base64_encode@plt+0x34d>
  40243b:	xor    esi,esi
  40243d:	mov    rdi,r12
  402440:	mov    edx,0xa
  402445:	call   4021e0 <strtol@plt>
  40244a:	xor    esi,esi
  40244c:	mov    rdi,rbp
  40244f:	mov    edx,0xa
  402454:	mov    r14,rax
  402457:	mov    r12d,eax
  40245a:	mov    ebx,r13d
  40245d:	call   4021e0 <strtol@plt>
  402462:	xor    esi,esi
  402464:	mov    rdi,r15
  402467:	mov    edx,0xa
  40246c:	mov    QWORD PTR [rsp+0x8],rax
  402471:	mov    ebp,eax
  402473:	xor    r15d,r15d
  402476:	call   4021e0 <strtol@plt>
  40247b:	test   r13d,r13d
  40247e:	mov    DWORD PTR [rip+0x11904],eax        # 413d88 <rb_base64_encode@plt+0x11a38>
  402484:	jle    4024b6 <rb_base64_encode@plt+0x166>
  402486:	add    r15d,0x1
  40248a:	cmp    r15d,ebx
  40248d:	je     4024b6 <rb_base64_encode@plt+0x166>
  40248f:	cmp    r15d,r12d
  402492:	setne  cl
  402495:	cmp    r15d,ebp
  402498:	setne  al
  40249b:	test   cl,al
  40249d:	je     402486 <rb_base64_encode@plt+0x136>
  40249f:	cmp    r15d,0x2
  4024a3:	jle    402486 <rb_base64_encode@plt+0x136>
  4024a5:	mov    edi,r15d
  4024a8:	add    r15d,0x1
  4024ac:	call   402080 <close@plt>
  4024b1:	cmp    r15d,ebx
  4024b4:	jne    40248f <rb_base64_encode@plt+0x13f>
  4024b6:	lea    rdi,[rip+0x3bd0]        # 40608d <rb_base64_encode@plt+0x3d3d>
  4024bd:	xor    eax,eax
  4024bf:	mov    esi,0x2
  4024c4:	call   402340 <open@plt>
  4024c9:	test   eax,eax
  4024cb:	mov    ebp,eax
  4024cd:	js     40250a <rb_base64_encode@plt+0x1ba>
  4024cf:	test   r14d,r14d
  4024d2:	je     4024df <rb_base64_encode@plt+0x18f>
  4024d4:	cmp    DWORD PTR [rsp+0x8],0x0
  4024d9:	jne    402702 <rb_base64_encode@plt+0x3b2>
  4024df:	cmp    r14d,0x1
  4024e3:	je     4024f0 <rb_base64_encode@plt+0x1a0>
  4024e5:	cmp    DWORD PTR [rsp+0x8],0x1
  4024ea:	jne    4026f1 <rb_base64_encode@plt+0x3a1>
  4024f0:	cmp    r14d,0x2
  4024f4:	je     402501 <rb_base64_encode@plt+0x1b1>
  4024f6:	cmp    DWORD PTR [rsp+0x8],0x2
  4024fb:	jne    4026e0 <rb_base64_encode@plt+0x390>
  402501:	cmp    ebp,0x2
  402504:	jg     402710 <rb_base64_encode@plt+0x3c0>
  40250a:	lea    rbp,[rsp+0x20]
  40250f:	mov    DWORD PTR [rsp+0xa8],0x0
  40251a:	mov    QWORD PTR [rsp+0x20],0x1
  402523:	lea    r12,[rbp+0x8]
  402527:	mov    rdi,r12
  40252a:	call   4022f0 <sigemptyset@plt>
  40252f:	mov    esi,0xd
  402534:	mov    rdi,r12
  402537:	call   402240 <sigaddset@plt>
  40253c:	mov    esi,0xe
  402541:	mov    rdi,r12
  402544:	call   402240 <sigaddset@plt>
  402549:	mov    esi,0x5
  40254e:	mov    rdi,r12
  402551:	call   402240 <sigaddset@plt>
  402556:	mov    esi,0x1c
  40255b:	mov    rdi,r12
  40255e:	call   402240 <sigaddset@plt>
  402563:	xor    edx,edx
  402565:	mov    rsi,rbp
  402568:	mov    edi,0x1c
  40256d:	call   4021b0 <sigaction@plt>
  402572:	xor    edx,edx
  402574:	mov    rsi,rbp
  402577:	mov    edi,0xd
  40257c:	call   4021b0 <sigaction@plt>
  402581:	xor    edx,edx
  402583:	mov    rsi,rbp
  402586:	mov    edi,0x5
  40258b:	call   4021b0 <sigaction@plt>
  402590:	lea    rax,[rip+0x2a9]        # 402840 <rb_base64_encode@plt+0x4f0>
  402597:	xor    edx,edx
  402599:	mov    rsi,rbp
  40259c:	mov    edi,0xe
  4025a1:	mov    QWORD PTR [rsp+0x20],rax
  4025a6:	call   4021b0 <sigaction@plt>
  4025ab:	sub    rsp,0x8
  4025af:	xor    edx,edx
  4025b1:	mov    r8d,ebx
  4025b4:	push   0x1000
  4025b9:	xor    ecx,ecx
  4025bb:	xor    esi,esi
  4025bd:	mov    r9d,0x400
  4025c3:	xor    edi,edi
  4025c5:	call   402270 <rb_lib_init@plt>
  4025ca:	mov    edi,0x1000
  4025cf:	call   4022e0 <rb_linebuf_init@plt>
  4025d4:	mov    edi,0x1000
  4025d9:	call   402110 <rb_init_rawbuffers@plt>
  4025de:	mov    esi,0x60
  4025e3:	mov    edi,0x1
  4025e8:	call   4022b0 <calloc@plt>
  4025ed:	mov    rbx,rax
  4025f0:	test   rbx,rbx
  4025f3:	pop    rax
  4025f4:	pop    rdx
  4025f5:	je     40271c <rb_base64_encode@plt+0x3cc>
  4025fb:	lea    rdx,[rip+0x3a95]        # 406097 <rb_base64_encode@plt+0x3d47>
  402602:	mov    esi,0x4
  402607:	mov    edi,r14d
  40260a:	mov    QWORD PTR [rip+0x1176f],rbx        # 413d80 <rb_base64_encode@plt+0x11a30>
  402611:	call   402290 <rb_open@plt>
  402616:	mov    edi,DWORD PTR [rsp+0x8]
  40261a:	mov    QWORD PTR [rbx+0x20],rax
  40261e:	lea    rdx,[rip+0x3a86]        # 4060ab <rb_base64_encode@plt+0x3d5b>
  402625:	mov    rbx,QWORD PTR [rip+0x11754]        # 413d80 <rb_base64_encode@plt+0x11a30>
  40262c:	mov    esi,0x8
  402631:	call   402290 <rb_open@plt>
  402636:	mov    QWORD PTR [rbx+0x28],rax
  40263a:	mov    rax,QWORD PTR [rip+0x1173f]        # 413d80 <rb_base64_encode@plt+0x11a30>
  402641:	mov    rdi,QWORD PTR [rax+0x20]
  402645:	call   4020d0 <rb_set_nb@plt>
  40264a:	mov    rax,QWORD PTR [rip+0x1172f]        # 413d80 <rb_base64_encode@plt+0x11a30>
  402651:	mov    rdi,QWORD PTR [rax+0x28]
  402655:	call   4020d0 <rb_set_nb@plt>
  40265a:	lea    rsi,[rip+0x1ef]        # 402850 <rb_base64_encode@plt+0x500>
  402661:	lea    rdi,[rip+0x3a4d]        # 4060b5 <rb_base64_encode@plt+0x3d65>
  402668:	mov    ecx,0xa
  40266d:	xor    edx,edx
  40266f:	call   402060 <rb_event_addish@plt>
  402674:	mov    rax,QWORD PTR [rip+0x11705]        # 413d80 <rb_base64_encode@plt+0x11a30>
  40267b:	xor    esi,esi
  40267d:	mov    rdi,QWORD PTR [rax+0x28]
  402681:	call   4028d0 <rb_base64_encode@plt+0x580>
  402686:	mov    rsi,QWORD PTR [rip+0x116f3]        # 413d80 <rb_base64_encode@plt+0x11a30>
  40268d:	mov    rdi,QWORD PTR [rsi+0x20]
  402691:	call   4039f0 <rb_base64_encode@plt+0x16a0>
  402696:	xor    edi,edi
  402698:	call   402140 <rb_lib_loop@plt>
  40269d:	mov    rbx,QWORD PTR [rip+0x5954]        # 407ff8 <rb_base64_encode@plt+0x5ca8>
  4026a4:	lea    rdi,[rip+0x3b85]        # 406230 <rb_base64_encode@plt+0x3ee0>
  4026ab:	mov    edx,0x34
  4026b0:	mov    esi,0x1
  4026b5:	mov    rcx,QWORD PTR [rbx]
  4026b8:	call   402300 <fwrite@plt>
  4026bd:	mov    rcx,QWORD PTR [rbx]
  4026c0:	lea    rdi,[rip+0x3ba1]        # 406268 <rb_base64_encode@plt+0x3f18>
  4026c7:	mov    edx,0x31
  4026cc:	mov    esi,0x1
  4026d1:	call   402300 <fwrite@plt>
  4026d6:	mov    edi,0x1
  4026db:	call   4020b0 <exit@plt>
  4026e0:	mov    esi,0x2
  4026e5:	mov    edi,ebp
  4026e7:	call   402030 <dup2@plt>
  4026ec:	jmp    402501 <rb_base64_encode@plt+0x1b1>
  4026f1:	mov    esi,0x1
  4026f6:	mov    edi,ebp
  4026f8:	call   402030 <dup2@plt>
  4026fd:	jmp    4024f0 <rb_base64_encode@plt+0x1a0>
  402702:	xor    esi,esi
  402704:	mov    edi,eax
  402706:	call   402030 <dup2@plt>
  40270b:	jmp    4024df <rb_base64_encode@plt+0x18f>
  402710:	mov    edi,ebp
  402712:	call   402080 <close@plt>
  402717:	jmp    40250a <rb_base64_encode@plt+0x1ba>
  40271c:	call   402220 <rb_outofmemory@plt>
  402721:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40272b:	nop    DWORD PTR [rax+rax*1+0x0]
  402730:	endbr64 
  402734:	xor    ebp,ebp
  402736:	mov    r9,rdx
  402739:	pop    rsi
  40273a:	mov    rdx,rsp
  40273d:	and    rsp,0xfffffffffffffff0
  402741:	push   rax
  402742:	push   rsp
  402743:	mov    r8,0x4053c0
  40274a:	mov    rcx,0x405350
  402751:	mov    rdi,0x4023b0
  402758:	call   QWORD PTR [rip+0x5892]        # 407ff0 <rb_base64_encode@plt+0x5ca0>
  40275e:	hlt    
  40275f:	nop
  402760:	endbr64 
  402764:	ret    
  402765:	nop    WORD PTR cs:[rax+rax*1+0x0]
  40276f:	nop
  402770:	mov    eax,0x4081c7
  402775:	push   rbp
  402776:	sub    rax,0x4081c0
  40277c:	cmp    rax,0xe
  402780:	mov    rbp,rsp
  402783:	jbe    4027a0 <rb_base64_encode@plt+0x450>
  402785:	mov    eax,0x0
  40278a:	test   rax,rax
  40278d:	je     4027a0 <rb_base64_encode@plt+0x450>
  40278f:	pop    rbp
  402790:	mov    edi,0x4081c0
  402795:	jmp    rax
  402797:	nop    WORD PTR [rax+rax*1+0x0]
  4027a0:	pop    rbp
  4027a1:	ret    
  4027a2:	nop    DWORD PTR [rax+0x0]
  4027a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4027b0:	mov    esi,0x4081c0
  4027b5:	push   rbp
  4027b6:	sub    rsi,0x4081c0
  4027bd:	sar    rsi,0x3
  4027c1:	mov    rbp,rsp
  4027c4:	mov    rax,rsi
  4027c7:	shr    rax,0x3f
  4027cb:	add    rsi,rax
  4027ce:	sar    rsi,1
  4027d1:	je     4027e8 <rb_base64_encode@plt+0x498>
  4027d3:	mov    eax,0x0
  4027d8:	test   rax,rax
  4027db:	je     4027e8 <rb_base64_encode@plt+0x498>
  4027dd:	pop    rbp
  4027de:	mov    edi,0x4081c0
  4027e3:	jmp    rax
  4027e5:	nop    DWORD PTR [rax]
  4027e8:	pop    rbp
  4027e9:	ret    
  4027ea:	nop    WORD PTR [rax+rax*1+0x0]
  4027f0:	cmp    BYTE PTR [rip+0x59c9],0x0        # 4081c0 <rb_base64_encode@plt+0x5e70>
  4027f7:	jne    40280a <rb_base64_encode@plt+0x4ba>
  4027f9:	push   rbp
  4027fa:	mov    rbp,rsp
  4027fd:	call   402770 <rb_base64_encode@plt+0x420>
  402802:	pop    rbp
  402803:	mov    BYTE PTR [rip+0x59b6],0x1        # 4081c0 <rb_base64_encode@plt+0x5e70>
  40280a:	repz ret 
  40280c:	nop    DWORD PTR [rax+0x0]
  402810:	mov    edi,0x407df0
  402815:	cmp    QWORD PTR [rdi],0x0
  402819:	jne    402820 <rb_base64_encode@plt+0x4d0>
  40281b:	jmp    4027b0 <rb_base64_encode@plt+0x460>
  40281d:	nop    DWORD PTR [rax]
  402820:	mov    eax,0x0
  402825:	test   rax,rax
  402828:	je     40281b <rb_base64_encode@plt+0x4cb>
  40282a:	push   rbp
  40282b:	mov    rbp,rsp
  40282e:	call   rax
  402830:	pop    rbp
  402831:	jmp    4027b0 <rb_base64_encode@plt+0x460>
  402836:	nop    WORD PTR cs:[rax+rax*1+0x0]
  402840:	repz ret 
  402842:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40284d:	nop    DWORD PTR [rax]
  402850:	push   rbp
  402851:	push   rbx
  402852:	sub    rsp,0x8
  402856:	mov    rax,QWORD PTR [rip+0x5983]        # 4081e0 <rb_base64_encode@plt+0x5e90>
  40285d:	test   rax,rax
  402860:	je     4028ab <rb_base64_encode@plt+0x55b>
  402862:	mov    rbp,QWORD PTR [rax+0x10]
  402866:	jmp    402877 <rb_base64_encode@plt+0x527>
  402868:	nop    DWORD PTR [rax+rax*1+0x0]
  402870:	mov    rax,rbp
  402873:	mov    rbp,QWORD PTR [rbp+0x10]
  402877:	mov    rbx,QWORD PTR [rax]
  40287a:	lea    rdi,[rbx+0x58]
  40287e:	call   402190 <rb_linebuf_donebuf@plt>
  402883:	lea    rdi,[rbx+0x30]
  402887:	call   402190 <rb_linebuf_donebuf@plt>
  40288c:	mov    rdi,QWORD PTR [rbx+0x28]
  402890:	call   402200 <rb_free_rawbuffer@plt>
  402895:	mov    rdi,QWORD PTR [rbx+0x20]
  402899:	call   402200 <rb_free_rawbuffer@plt>
  40289e:	mov    rdi,rbx
  4028a1:	call   402120 <free@plt>
  4028a6:	test   rbp,rbp
  4028a9:	jne    402870 <rb_base64_encode@plt+0x520>
  4028ab:	mov    QWORD PTR [rip+0x592a],0x0        # 4081e0 <rb_base64_encode@plt+0x5e90>
  4028b6:	mov    QWORD PTR [rip+0x5927],0x0        # 4081e8 <rb_base64_encode@plt+0x5e98>
  4028c1:	add    rsp,0x8
  4028c5:	pop    rbx
  4028c6:	pop    rbp
  4028c7:	ret    
  4028c8:	nop    DWORD PTR [rax+rax*1+0x0]
  4028d0:	push   rbp
  4028d1:	push   rbx
  4028d2:	mov    rbx,rdi
  4028d5:	sub    rsp,0x4018
  4028dc:	mov    rax,QWORD PTR fs:0x28
  4028e5:	mov    QWORD PTR [rsp+0x4008],rax
  4028ed:	xor    eax,eax
  4028ef:	mov    rbp,rsp
  4028f2:	nop    WORD PTR [rax+rax*1+0x0]
  4028f8:	mov    edx,0x4000
  4028fd:	mov    rsi,rbp
  402900:	mov    rdi,rbx
  402903:	call   402150 <rb_read@plt>
  402908:	test   eax,eax
  40290a:	jg     4028f8 <rb_base64_encode@plt+0x5a8>
  40290c:	test   eax,eax
  40290e:	je     402953 <rb_base64_encode@plt+0x603>
  402910:	call   402230 <__errno_location@plt>
  402915:	mov    edi,DWORD PTR [rax]
  402917:	call   402070 <rb_ignore_errno@plt>
  40291c:	test   eax,eax
  40291e:	je     402953 <rb_base64_encode@plt+0x603>
  402920:	lea    rdx,[rip+0xffffffffffffffa9]        # 4028d0 <rb_base64_encode@plt+0x580>
  402927:	xor    ecx,ecx
  402929:	mov    esi,0x1
  40292e:	mov    rdi,rbx
  402931:	call   402090 <rb_setselect@plt>
  402936:	mov    rax,QWORD PTR [rsp+0x4008]
  40293e:	xor    rax,QWORD PTR fs:0x28
  402947:	jne    40295a <rb_base64_encode@plt+0x60a>
  402949:	add    rsp,0x4018
  402950:	pop    rbx
  402951:	pop    rbp
  402952:	ret    
  402953:	xor    edi,edi
  402955:	call   4020b0 <exit@plt>
  40295a:	call   402250 <__stack_chk_fail@plt>
  40295f:	nop
  402960:	push   r13
  402962:	push   r12
  402964:	mov    r13,rsi
  402967:	push   rbp
  402968:	push   rbx
  402969:	sub    rsp,0x8
  40296d:	mov    rbp,QWORD PTR [rsi+0x48]
  402971:	test   rbp,rbp
  402974:	je     402a50 <rb_base64_encode@plt+0x700>
  40297a:	mov    r12,QWORD PTR [rbp+0x10]
  40297e:	xchg   ax,ax
  402980:	mov    rbx,QWORD PTR [rbp+0x0]
  402984:	mov    rdi,QWORD PTR [r13+0x20]
  402988:	mov    r9d,DWORD PTR [rip+0x113f9]        # 413d88 <rb_base64_encode@plt+0x11a38>
  40298f:	mov    rcx,QWORD PTR [rbx+0x18]
  402993:	mov    edx,DWORD PTR [rbx+0x48]
  402996:	lea    rsi,[rbx+0x28]
  40299a:	mov    r8,QWORD PTR [rbx+0x20]
  40299e:	call   4020a0 <rb_send_fd_buf@plt>
  4029a3:	cmp    eax,0x0
  4029a6:	jle    402a30 <rb_base64_encode@plt+0x6e0>
  4029ac:	mov    rax,QWORD PTR [rbp+0x10]
  4029b0:	mov    rdx,QWORD PTR [rbp+0x8]
  4029b4:	test   rax,rax
  4029b7:	je     402a78 <rb_base64_encode@plt+0x728>
  4029bd:	mov    QWORD PTR [rax+0x8],rdx
  4029c1:	mov    rdx,QWORD PTR [rbp+0x8]
  4029c5:	test   rdx,rdx
  4029c8:	je     402a68 <rb_base64_encode@plt+0x718>
  4029ce:	mov    QWORD PTR [rdx+0x10],rax
  4029d2:	mov    eax,DWORD PTR [rbx+0x48]
  4029d5:	mov    QWORD PTR [rbp+0x8],0x0
  4029dd:	mov    QWORD PTR [rbp+0x10],0x0
  4029e5:	sub    QWORD PTR [r13+0x58],0x1
  4029ea:	mov    ebp,0x1
  4029ef:	test   eax,eax
  4029f1:	jle    402a08 <rb_base64_encode@plt+0x6b8>
  4029f3:	mov    rdi,QWORD PTR [rbx+rbp*8+0x20]
  4029f8:	call   4021d0 <rb_close@plt>
  4029fd:	mov    eax,ebp
  4029ff:	add    rbp,0x1
  402a03:	cmp    DWORD PTR [rbx+0x48],eax
  402a06:	jg     4029f3 <rb_base64_encode@plt+0x6a3>
  402a08:	mov    rdi,QWORD PTR [rbx+0x18]
  402a0c:	test   rdi,rdi
  402a0f:	je     402a16 <rb_base64_encode@plt+0x6c6>
  402a11:	call   402120 <free@plt>
  402a16:	mov    rdi,rbx
  402a19:	call   402120 <free@plt>
  402a1e:	test   r12,r12
  402a21:	je     402a50 <rb_base64_encode@plt+0x700>
  402a23:	mov    rbp,r12
  402a26:	mov    r12,QWORD PTR [r12+0x10]
  402a2b:	jmp    402980 <rb_base64_encode@plt+0x630>
  402a30:	je     402a44 <rb_base64_encode@plt+0x6f4>
  402a32:	jge    402a1e <rb_base64_encode@plt+0x6ce>
  402a34:	call   402230 <__errno_location@plt>
  402a39:	mov    edi,DWORD PTR [rax]
  402a3b:	call   402070 <rb_ignore_errno@plt>
  402a40:	test   eax,eax
  402a42:	jne    402a1e <rb_base64_encode@plt+0x6ce>
  402a44:	xor    edi,edi
  402a46:	call   4020b0 <exit@plt>
  402a4b:	nop    DWORD PTR [rax+rax*1+0x0]
  402a50:	cmp    QWORD PTR [r13+0x58],0x0
  402a55:	jne    402a88 <rb_base64_encode@plt+0x738>
  402a57:	add    rsp,0x8
  402a5b:	pop    rbx
  402a5c:	pop    rbp
  402a5d:	pop    r12
  402a5f:	pop    r13
  402a61:	ret    
  402a62:	nop    WORD PTR [rax+rax*1+0x0]
  402a68:	mov    QWORD PTR [r13+0x48],rax
  402a6c:	jmp    4029d2 <rb_base64_encode@plt+0x682>
  402a71:	nop    DWORD PTR [rax+0x0]
  402a78:	mov    QWORD PTR [r13+0x50],rdx
  402a7c:	jmp    4029c5 <rb_base64_encode@plt+0x675>
  402a81:	nop    DWORD PTR [rax+0x0]
  402a88:	mov    rdi,QWORD PTR [r13+0x20]
  402a8c:	add    rsp,0x8
  402a90:	mov    rcx,r13
  402a93:	pop    rbx
  402a94:	pop    rbp
  402a95:	pop    r12
  402a97:	pop    r13
  402a99:	lea    rdx,[rip+0xfffffffffffffec0]        # 402960 <rb_base64_encode@plt+0x610>
  402aa0:	mov    esi,0x2
  402aa5:	jmp    402090 <rb_setselect@plt>
  402aaa:	nop    WORD PTR [rax+rax*1+0x0]
  402ab0:	push   rbp
  402ab1:	push   rbx
  402ab2:	sub    rsp,0x4018
  402ab9:	mov    rax,QWORD PTR fs:0x28
  402ac2:	mov    QWORD PTR [rsp+0x4008],rax
  402aca:	xor    eax,eax
  402acc:	test   rsi,rsi
  402acf:	je     402b25 <rb_base64_encode@plt+0x7d5>
  402ad1:	mov    rbx,rsi
  402ad4:	mov    rbp,rsp
  402ad7:	nop    WORD PTR [rax+rax*1+0x0]
  402ae0:	mov    rdi,QWORD PTR [rbx+0x90]
  402ae7:	mov    edx,0x4000
  402aec:	mov    rsi,rbp
  402aef:	call   402150 <rb_read@plt>
  402af4:	test   eax,eax
  402af6:	je     402b48 <rb_base64_encode@plt+0x7f8>
  402af8:	jns    402ae0 <rb_base64_encode@plt+0x790>
  402afa:	call   402230 <__errno_location@plt>
  402aff:	mov    edi,DWORD PTR [rax]
  402b01:	call   402070 <rb_ignore_errno@plt>
  402b06:	test   eax,eax
  402b08:	je     402b48 <rb_base64_encode@plt+0x7f8>
  402b0a:	mov    rdi,QWORD PTR [rbx+0x90]
  402b11:	lea    rdx,[rip+0xffffffffffffff98]        # 402ab0 <rb_base64_encode@plt+0x760>
  402b18:	mov    rcx,rbx
  402b1b:	mov    esi,0x1
  402b20:	call   402090 <rb_setselect@plt>
  402b25:	mov    rax,QWORD PTR [rsp+0x4008]
  402b2d:	xor    rax,QWORD PTR fs:0x28
  402b36:	jne    402b97 <rb_base64_encode@plt+0x847>
  402b38:	add    rsp,0x4018
  402b3f:	pop    rbx
  402b40:	pop    rbp
  402b41:	ret    
  402b42:	nop    WORD PTR [rax+rax*1+0x0]
  402b48:	mov    rdi,QWORD PTR [rbx+0x90]
  402b4f:	call   4021d0 <rb_close@plt>
  402b54:	mov    rax,QWORD PTR [rip+0x5685]        # 4081e0 <rb_base64_encode@plt+0x5e90>
  402b5b:	mov    QWORD PTR [rbx],rbx
  402b5e:	mov    QWORD PTR [rbx+0x8],0x0
  402b66:	test   rax,rax
  402b69:	mov    QWORD PTR [rbx+0x10],rax
  402b6d:	je     402b84 <rb_base64_encode@plt+0x834>
  402b6f:	mov    QWORD PTR [rax+0x8],rbx
  402b73:	mov    QWORD PTR [rip+0x5666],rbx        # 4081e0 <rb_base64_encode@plt+0x5e90>
  402b7a:	add    QWORD PTR [rip+0x566e],0x1        # 4081f0 <rb_base64_encode@plt+0x5ea0>
  402b82:	jmp    402b25 <rb_base64_encode@plt+0x7d5>
  402b84:	cmp    QWORD PTR [rip+0x565c],0x0        # 4081e8 <rb_base64_encode@plt+0x5e98>
  402b8c:	jne    402b73 <rb_base64_encode@plt+0x823>
  402b8e:	mov    QWORD PTR [rip+0x5653],rbx        # 4081e8 <rb_base64_encode@plt+0x5e98>
  402b95:	jmp    402b73 <rb_base64_encode@plt+0x823>
  402b97:	call   402250 <__stack_chk_fail@plt>
  402b9c:	nop    DWORD PTR [rax+0x0]
  402ba0:	push   r13
  402ba2:	push   r12
  402ba4:	mov    r12d,esi
  402ba7:	push   rbp
  402ba8:	push   rbx
  402ba9:	mov    rbp,rdx
  402bac:	mov    rbx,rdi
  402baf:	sub    rsp,0x268
  402bb6:	test   al,al
  402bb8:	mov    QWORD PTR [rsp+0x1c8],rcx
  402bc0:	mov    QWORD PTR [rsp+0x1d0],r8
  402bc8:	mov    QWORD PTR [rsp+0x1d8],r9
  402bd0:	je     402c1a <rb_base64_encode@plt+0x8ca>
  402bd2:	vmovaps XMMWORD PTR [rsp+0x1e0],xmm0
  402bdb:	vmovaps XMMWORD PTR [rsp+0x1f0],xmm1
  402be4:	vmovaps XMMWORD PTR [rsp+0x200],xmm2
  402bed:	vmovaps XMMWORD PTR [rsp+0x210],xmm3
  402bf6:	vmovaps XMMWORD PTR [rsp+0x220],xmm4
  402bff:	vmovaps XMMWORD PTR [rsp+0x230],xmm5
  402c08:	vmovaps XMMWORD PTR [rsp+0x240],xmm6
  402c11:	vmovaps XMMWORD PTR [rsp+0x250],xmm7
  402c1a:	mov    rax,QWORD PTR fs:0x28
  402c23:	mov    QWORD PTR [rsp+0x1a8],rax
  402c2b:	xor    eax,eax
  402c2d:	movzx  eax,BYTE PTR [rbx+0xb8]
  402c34:	test   al,0x2
  402c36:	jne    402e70 <rb_base64_encode@plt+0xb20>
  402c3c:	test   al,0x8
  402c3e:	jne    402ed8 <rb_base64_encode@plt+0xb88>
  402c44:	mov    rsi,QWORD PTR [rbx+0x88]
  402c4b:	mov    rdi,QWORD PTR [rbx+0x20]
  402c4f:	call   402320 <rb_rawbuf_flush@plt>
  402c54:	mov    rdi,QWORD PTR [rbx+0x90]
  402c5b:	lea    rsi,[rbx+0x30]
  402c5f:	call   402180 <rb_linebuf_flush@plt>
  402c64:	mov    rdi,QWORD PTR [rbx+0x88]
  402c6b:	call   4021d0 <rb_close@plt>
  402c70:	mov    ecx,DWORD PTR [rbx+0x80]
  402c76:	mov    edx,0x10624dd3
  402c7b:	or     BYTE PTR [rbx+0xb8],0x2
  402c82:	mov    eax,ecx
  402c84:	mul    edx
  402c86:	mov    rax,QWORD PTR [rbx+0x10]
  402c8a:	shr    edx,0x7
  402c8d:	imul   edx,edx,0x7d0
  402c93:	sub    ecx,edx
  402c95:	test   rax,rax
  402c98:	mov    edx,ecx
  402c9a:	je     402ee8 <rb_base64_encode@plt+0xb98>
  402ca0:	mov    rcx,QWORD PTR [rbx+0x8]
  402ca4:	mov    QWORD PTR [rax+0x8],rcx
  402ca8:	mov    rsi,QWORD PTR [rbx+0x8]
  402cac:	lea    rcx,[rip+0x554d]        # 408200 <rb_base64_encode@plt+0x5eb0>
  402cb3:	test   rsi,rsi
  402cb6:	je     402f08 <rb_base64_encode@plt+0xbb8>
  402cbc:	mov    QWORD PTR [rsi+0x10],rax
  402cc0:	lea    rax,[rdx+rdx*2]
  402cc4:	mov    QWORD PTR [rbx+0x8],0x0
  402ccc:	mov    QWORD PTR [rbx+0x10],0x0
  402cd4:	sub    QWORD PTR [rcx+rax*8+0x10],0x1
  402cda:	test   r12d,r12d
  402cdd:	je     402e98 <rb_base64_encode@plt+0xb48>
  402ce3:	test   rbp,rbp
  402ce6:	je     402e98 <rb_base64_encode@plt+0xb48>
  402cec:	mov    rdi,QWORD PTR [rbx+0x90]
  402cf3:	lea    rdx,[rip+0xfffffffffffffdb6]        # 402ab0 <rb_base64_encode@plt+0x760>
  402cfa:	mov    rcx,rbx
  402cfd:	mov    esi,0x1
  402d02:	lea    r13,[rsp+0x20]
  402d07:	lea    r12,[rsp+0xa0]
  402d0f:	call   402090 <rb_setselect@plt>
  402d14:	mov    rdi,QWORD PTR [rbx+0x90]
  402d1b:	xor    ecx,ecx
  402d1d:	xor    edx,edx
  402d1f:	mov    esi,0x2
  402d24:	call   402090 <rb_setselect@plt>
  402d29:	lea    rax,[rsp+0x290]
  402d31:	lea    r9,[rsp+0x8]
  402d36:	mov    r8,rbp
  402d39:	mov    ecx,0x80
  402d3e:	mov    edx,0x1
  402d43:	mov    esi,0x80
  402d48:	mov    QWORD PTR [rsp+0x10],rax
  402d4d:	lea    rax,[rsp+0x1b0]
  402d55:	mov    rdi,r13
  402d58:	mov    DWORD PTR [rsp+0x8],0x18
  402d60:	mov    DWORD PTR [rsp+0xc],0x30
  402d68:	mov    QWORD PTR [rsp+0x18],rax
  402d6d:	call   4020f0 <__vsnprintf_chk@plt>
  402d72:	mov    eax,DWORD PTR [rbx+0x80]
  402d78:	lea    rdi,[r12+0x5]
  402d7d:	mov    edx,0xfb
  402d82:	mov    rsi,r13
  402d85:	mov    BYTE PTR [rsp+0xa0],0x44
  402d8d:	mov    DWORD PTR [rsp+0xa1],eax
  402d94:	call   402100 <rb_strlcpy@plt>
  402d99:	mov    rdx,r13
  402d9c:	mov    ecx,DWORD PTR [rdx]
  402d9e:	add    rdx,0x4
  402da2:	lea    eax,[rcx-0x1010101]
  402da8:	andn   eax,ecx,eax
  402dad:	and    eax,0x80808080
  402db2:	je     402d9c <rb_base64_encode@plt+0xa4c>
  402db4:	mov    ecx,eax
  402db6:	mov    edi,0x1
  402dbb:	shr    ecx,0x10
  402dbe:	test   eax,0x8080
  402dc3:	cmove  eax,ecx
  402dc6:	lea    rcx,[rdx+0x2]
  402dca:	mov    esi,eax
  402dcc:	cmove  rdx,rcx
  402dd0:	add    sil,al
  402dd3:	mov    esi,0x50
  402dd8:	sbb    rdx,0x3
  402ddc:	sub    rdx,r13
  402ddf:	mov    r13,QWORD PTR [rbx+0x18]
  402de3:	add    edx,0x6
  402de6:	movsxd rbp,edx
  402de9:	call   4022b0 <calloc@plt>
  402dee:	test   rax,rax
  402df1:	mov    rbx,rax
  402df4:	je     402f30 <rb_base64_encode@plt+0xbe0>
  402dfa:	mov    rsi,rbp
  402dfd:	mov    edi,0x1
  402e02:	call   4022b0 <calloc@plt>
  402e07:	test   rax,rax
  402e0a:	je     402f30 <rb_base64_encode@plt+0xbe0>
  402e10:	mov    QWORD PTR [rbx+0x18],rax
  402e14:	mov    QWORD PTR [rbx+0x20],rbp
  402e18:	mov    rdx,rbp
  402e1b:	mov    rsi,r12
  402e1e:	mov    rdi,rax
  402e21:	call   402330 <memcpy@plt>
  402e26:	cmp    r13,0xffffffffffffffb8
  402e2a:	mov    DWORD PTR [rbx+0x48],0x0
  402e31:	je     402f51 <rb_base64_encode@plt+0xc01>
  402e37:	mov    rax,QWORD PTR [r13+0x50]
  402e3b:	mov    QWORD PTR [rbx],rbx
  402e3e:	mov    QWORD PTR [rbx+0x10],0x0
  402e46:	test   rax,rax
  402e49:	mov    QWORD PTR [rbx+0x8],rax
  402e4d:	je     402f38 <rb_base64_encode@plt+0xbe8>
  402e53:	mov    QWORD PTR [rax+0x10],rbx
  402e57:	add    QWORD PTR [r13+0x58],0x1
  402e5c:	mov    rdi,QWORD PTR [r13+0x20]
  402e60:	mov    rsi,r13
  402e63:	mov    QWORD PTR [r13+0x50],rbx
  402e67:	call   402960 <rb_base64_encode@plt+0x610>
  402e6c:	nop    DWORD PTR [rax+0x0]
  402e70:	mov    rax,QWORD PTR [rsp+0x1a8]
  402e78:	xor    rax,QWORD PTR fs:0x28
  402e81:	jne    402f4c <rb_base64_encode@plt+0xbfc>
  402e87:	add    rsp,0x268
  402e8e:	pop    rbx
  402e8f:	pop    rbp
  402e90:	pop    r12
  402e92:	pop    r13
  402e94:	ret    
  402e95:	nop    DWORD PTR [rax]
  402e98:	mov    rdi,QWORD PTR [rbx+0x90]
  402e9f:	call   4021d0 <rb_close@plt>
  402ea4:	mov    rax,QWORD PTR [rip+0x5335]        # 4081e0 <rb_base64_encode@plt+0x5e90>
  402eab:	mov    QWORD PTR [rbx],rbx
  402eae:	mov    QWORD PTR [rbx+0x8],0x0
  402eb6:	test   rax,rax
  402eb9:	mov    QWORD PTR [rbx+0x10],rax
  402ebd:	je     402f18 <rb_base64_encode@plt+0xbc8>
  402ebf:	mov    QWORD PTR [rax+0x8],rbx
  402ec3:	mov    QWORD PTR [rip+0x5316],rbx        # 4081e0 <rb_base64_encode@plt+0x5e90>
  402eca:	add    QWORD PTR [rip+0x531e],0x1        # 4081f0 <rb_base64_encode@plt+0x5ea0>
  402ed2:	jmp    402e70 <rb_base64_encode@plt+0xb20>
  402ed4:	nop    DWORD PTR [rax+0x0]
  402ed8:	mov    rdi,rbx
  402edb:	call   4030b0 <rb_base64_encode@plt+0xd60>
  402ee0:	jmp    402c44 <rb_base64_encode@plt+0x8f4>
  402ee5:	nop    DWORD PTR [rax]
  402ee8:	mov    rsi,QWORD PTR [rbx+0x8]
  402eec:	lea    rcx,[rip+0x530d]        # 408200 <rb_base64_encode@plt+0x5eb0>
  402ef3:	lea    rdi,[rdx+rdx*2]
  402ef7:	mov    QWORD PTR [rcx+rdi*8+0x8],rsi
  402efc:	jmp    402cb3 <rb_base64_encode@plt+0x963>
  402f01:	nop    DWORD PTR [rax+0x0]
  402f08:	lea    rsi,[rdx+rdx*2]
  402f0c:	mov    QWORD PTR [rcx+rsi*8],rax
  402f10:	jmp    402cc0 <rb_base64_encode@plt+0x970>
  402f15:	nop    DWORD PTR [rax]
  402f18:	cmp    QWORD PTR [rip+0x52c8],0x0        # 4081e8 <rb_base64_encode@plt+0x5e98>
  402f20:	jne    402ec3 <rb_base64_encode@plt+0xb73>
  402f22:	mov    QWORD PTR [rip+0x52bf],rbx        # 4081e8 <rb_base64_encode@plt+0x5e98>
  402f29:	jmp    402ec3 <rb_base64_encode@plt+0xb73>
  402f2b:	nop    DWORD PTR [rax+rax*1+0x0]
  402f30:	call   402220 <rb_outofmemory@plt>
  402f35:	nop    DWORD PTR [rax]
  402f38:	cmp    QWORD PTR [r13+0x48],0x0
  402f3d:	jne    402e57 <rb_base64_encode@plt+0xb07>
  402f43:	mov    QWORD PTR [r13+0x48],rbx
  402f47:	jmp    402e57 <rb_base64_encode@plt+0xb07>
  402f4c:	call   402250 <__stack_chk_fail@plt>
  402f51:	lea    rcx,[rip+0x3358]        # 4062b0 <rb_base64_encode@plt+0x3f60>
  402f58:	lea    rsi,[rip+0x30a5]        # 406004 <rb_base64_encode@plt+0x3cb4>
  402f5f:	lea    rdi,[rip+0x30c7]        # 40602d <rb_base64_encode@plt+0x3cdd>
  402f66:	mov    edx,0xd4
  402f6b:	call   4020c0 <__assert_fail@plt>
  402f70:	push   rbp
  402f71:	push   rbx
  402f72:	mov    rbp,rdi
  402f75:	mov    rbx,rsi
  402f78:	sub    rsp,0x8
  402f7c:	jmp    402f89 <rb_base64_encode@plt+0xc39>
  402f7e:	xchg   ax,ax
  402f80:	cdqe   
  402f82:	add    QWORD PTR [rbx+0x98],rax
  402f89:	mov    rdi,QWORD PTR [rbx+0x20]
  402f8d:	mov    rsi,rbp
  402f90:	call   402320 <rb_rawbuf_flush@plt>
  402f95:	cmp    eax,0x0
  402f98:	jg     402f80 <rb_base64_encode@plt+0xc30>
  402f9a:	je     402ff0 <rb_base64_encode@plt+0xca0>
  402f9c:	call   402230 <__errno_location@plt>
  402fa1:	mov    edi,DWORD PTR [rax]
  402fa3:	mov    rbp,rax
  402fa6:	call   402070 <rb_ignore_errno@plt>
  402fab:	test   eax,eax
  402fad:	je     403015 <rb_base64_encode@plt+0xcc5>
  402faf:	mov    rdi,QWORD PTR [rbx+0x20]
  402fb3:	call   4021f0 <rb_rawbuf_length@plt>
  402fb8:	test   eax,eax
  402fba:	mov    rdi,QWORD PTR [rbx+0x88]
  402fc1:	jle    403070 <rb_base64_encode@plt+0xd20>
  402fc7:	lea    rdx,[rip+0xc2]        # 403090 <rb_base64_encode@plt+0xd40>
  402fce:	mov    rcx,rbx
  402fd1:	mov    esi,0x2
  402fd6:	call   402090 <rb_setselect@plt>
  402fdb:	test   BYTE PTR [rbx+0xb8],0x1
  402fe2:	jne    403040 <rb_base64_encode@plt+0xcf0>
  402fe4:	add    rsp,0x8
  402fe8:	pop    rbx
  402fe9:	pop    rbp
  402fea:	ret    
  402feb:	nop    DWORD PTR [rax+rax*1+0x0]
  402ff0:	lea    rcx,[rip+0x30d1]        # 4060c8 <rb_base64_encode@plt+0x3d78>
  402ff7:	lea    rdx,[rip+0x3049]        # 406047 <rb_base64_encode@plt+0x3cf7>
  402ffe:	mov    esi,0x1
  403003:	mov    rdi,rbx
  403006:	xor    eax,eax
  403008:	call   402ba0 <rb_base64_encode@plt+0x850>
  40300d:	call   402230 <__errno_location@plt>
  403012:	mov    rbp,rax
  403015:	mov    edi,DWORD PTR [rbp+0x0]
  403018:	call   4021a0 <strerror@plt>
  40301d:	add    rsp,0x8
  403021:	mov    rdi,rbx
  403024:	lea    rdx,[rip+0x300f]        # 40603a <rb_base64_encode@plt+0x3cea>
  40302b:	pop    rbx
  40302c:	pop    rbp
  40302d:	mov    rcx,rax
  403030:	mov    esi,0x1
  403035:	xor    eax,eax
  403037:	jmp    402ba0 <rb_base64_encode@plt+0x850>
  40303c:	nop    DWORD PTR [rax+0x0]
  403040:	mov    rdi,QWORD PTR [rbx+0x20]
  403044:	call   4021f0 <rb_rawbuf_length@plt>
  403049:	test   eax,eax
  40304b:	jne    402fe4 <rb_base64_encode@plt+0xc94>
  40304d:	and    BYTE PTR [rbx+0xb8],0xfe
  403054:	mov    rdi,QWORD PTR [rbx+0x90]
  40305b:	add    rsp,0x8
  40305f:	mov    rsi,rbx
  403062:	pop    rbx
  403063:	pop    rbp
  403064:	jmp    403280 <rb_base64_encode@plt+0xf30>
  403069:	nop    DWORD PTR [rax+0x0]
  403070:	xor    ecx,ecx
  403072:	xor    edx,edx
  403074:	mov    esi,0x2
  403079:	call   402090 <rb_setselect@plt>
  40307e:	jmp    402fdb <rb_base64_encode@plt+0xc8b>
  403083:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40308e:	xchg   ax,ax
  403090:	test   BYTE PTR [rsi+0xb8],0x2
  403097:	jne    4030a0 <rb_base64_encode@plt+0xd50>
  403099:	jmp    402f70 <rb_base64_encode@plt+0xc20>
  40309e:	xchg   ax,ax
  4030a0:	repz ret 
  4030a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4030ad:	nop    DWORD PTR [rax]
  4030b0:	push   r14
  4030b2:	push   r13
  4030b4:	mov    edx,0x4000
  4030b9:	push   r12
  4030bb:	push   rbp
  4030bc:	mov    rbp,rdi
  4030bf:	push   rbx
  4030c0:	lea    r13,[rbp+0x58]
  4030c4:	xor    esi,esi
  4030c6:	sub    rsp,0x4020
  4030cd:	lea    r12,[rsp+0x10]
  4030d2:	lea    r14,[rsp+0xc]
  4030d7:	mov    rax,QWORD PTR fs:0x28
  4030e0:	mov    QWORD PTR [rsp+0x4018],rax
  4030e8:	xor    eax,eax
  4030ea:	mov    rdi,r12
  4030ed:	call   402050 <memset@plt>
  4030f2:	nop    WORD PTR [rax+rax*1+0x0]
  4030f8:	xor    r8d,r8d
  4030fb:	xor    ecx,ecx
  4030fd:	mov    edx,0x4000
  403102:	mov    rsi,r12
  403105:	mov    rdi,r13
  403108:	call   402170 <rb_linebuf_get@plt>
  40310d:	test   eax,eax
  40310f:	mov    ebx,eax
  403111:	je     4031c0 <rb_base64_encode@plt+0xe70>
  403117:	test   BYTE PTR [rbp+0xb8],0x2
  40311e:	jne    4030f8 <rb_base64_encode@plt+0xda8>
  403120:	cmp    eax,0x7a
  403123:	mov    BYTE PTR [rsp+0xc],0x81
  403128:	jle    403190 <rb_base64_encode@plt+0xe40>
  40312a:	lea    eax,[rax+0x2]
  40312d:	mov    rdi,QWORD PTR [rbp+0x20]
  403131:	mov    edx,0x4
  403136:	mov    rsi,r14
  403139:	mov    BYTE PTR [rsp+0xd],0x7e
  40313e:	rol    ax,0x8
  403142:	mov    WORD PTR [rsp+0xe],ax
  403147:	call   402310 <rb_rawbuf_append@plt>
  40314c:	test   BYTE PTR [rbp+0xb8],0x2
  403153:	jne    4030f8 <rb_base64_encode@plt+0xda8>
  403155:	mov    rdi,QWORD PTR [rbp+0x20]
  403159:	mov    edx,ebx
  40315b:	mov    rsi,r12
  40315e:	call   402310 <rb_rawbuf_append@plt>
  403163:	test   BYTE PTR [rbp+0xb8],0x2
  40316a:	mov    rdi,QWORD PTR [rbp+0x20]
  40316e:	jne    4030f8 <rb_base64_encode@plt+0xda8>
  403170:	lea    rsi,[rip+0x2efa]        # 406071 <rb_base64_encode@plt+0x3d21>
  403177:	mov    edx,0x2
  40317c:	call   402310 <rb_rawbuf_append@plt>
  403181:	jmp    4030f8 <rb_base64_encode@plt+0xda8>
  403186:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403190:	lea    eax,[rax+0x2]
  403193:	mov    rdi,QWORD PTR [rbp+0x20]
  403197:	mov    edx,0x2
  40319c:	mov    rsi,r14
  40319f:	and    eax,0x7f
  4031a2:	mov    BYTE PTR [rsp+0xd],al
  4031a6:	call   402310 <rb_rawbuf_append@plt>
  4031ab:	test   BYTE PTR [rbp+0xb8],0x2
  4031b2:	jne    4030f8 <rb_base64_encode@plt+0xda8>
  4031b8:	jmp    403155 <rb_base64_encode@plt+0xe05>
  4031ba:	nop    WORD PTR [rax+rax*1+0x0]
  4031c0:	movzx  eax,BYTE PTR [rbp+0xb8]
  4031c7:	test   al,0x8
  4031c9:	je     4031cf <rb_base64_encode@plt+0xe7f>
  4031cb:	test   al,0x2
  4031cd:	je     4031f8 <rb_base64_encode@plt+0xea8>
  4031cf:	mov    rax,QWORD PTR [rsp+0x4018]
  4031d7:	xor    rax,QWORD PTR fs:0x28
  4031e0:	jne    403209 <rb_base64_encode@plt+0xeb9>
  4031e2:	add    rsp,0x4020
  4031e9:	pop    rbx
  4031ea:	pop    rbp
  4031eb:	pop    r12
  4031ed:	pop    r13
  4031ef:	pop    r14
  4031f1:	ret    
  4031f2:	nop    WORD PTR [rax+rax*1+0x0]
  4031f8:	mov    rdi,QWORD PTR [rbp+0x88]
  4031ff:	mov    rsi,rbp
  403202:	call   402f70 <rb_base64_encode@plt+0xc20>
  403207:	jmp    4031cf <rb_base64_encode@plt+0xe7f>
  403209:	call   402250 <__stack_chk_fail@plt>
  40320e:	xchg   ax,ax
  403210:	push   rbp
  403211:	push   rbx
  403212:	mov    rbx,rdi
  403215:	xor    ebp,ebp
  403217:	sub    rsp,0x8
  40321b:	mov    rdi,QWORD PTR [rdi+0x20]
  40321f:	call   4021f0 <rb_rawbuf_length@plt>
  403224:	cmp    eax,0xfff
  403229:	jg     403238 <rb_base64_encode@plt+0xee8>
  40322b:	add    rsp,0x8
  40322f:	mov    eax,ebp
  403231:	pop    rbx
  403232:	pop    rbp
  403233:	ret    
  403234:	nop    DWORD PTR [rax+0x0]
  403238:	or     BYTE PTR [rbx+0xb8],0x1
  40323f:	mov    rdi,QWORD PTR [rbx+0x90]
  403246:	xor    ecx,ecx
  403248:	xor    edx,edx
  40324a:	mov    esi,0x1
  40324f:	mov    ebp,0x1
  403254:	call   402090 <rb_setselect@plt>
  403259:	movzx  eax,BYTE PTR [rbx+0xb8]
  403260:	test   al,0x8
  403262:	je     40322b <rb_base64_encode@plt+0xedb>
  403264:	test   al,0x2
  403266:	jne    40322b <rb_base64_encode@plt+0xedb>
  403268:	mov    rdi,QWORD PTR [rbx+0x88]
  40326f:	mov    rsi,rbx
  403272:	call   402f70 <rb_base64_encode@plt+0xc20>
  403277:	jmp    40322b <rb_base64_encode@plt+0xedb>
  403279:	nop    DWORD PTR [rax+0x0]
  403280:	push   r12
  403282:	push   rbp
  403283:	mov    edx,0x4000
  403288:	push   rbx
  403289:	mov    rbx,rsi
  40328c:	xor    esi,esi
  40328e:	sub    rsp,0x4010
  403295:	mov    rdi,rsp
  403298:	mov    rax,QWORD PTR fs:0x28
  4032a1:	mov    QWORD PTR [rsp+0x4008],rax
  4032a9:	xor    eax,eax
  4032ab:	call   402050 <memset@plt>
  4032b0:	test   rbx,rbx
  4032b3:	je     4032be <rb_base64_encode@plt+0xf6e>
  4032b5:	test   BYTE PTR [rbx+0xb8],0x2
  4032bc:	je     4032e8 <rb_base64_encode@plt+0xf98>
  4032be:	mov    rax,QWORD PTR [rsp+0x4008]
  4032c6:	xor    rax,QWORD PTR fs:0x28
  4032cf:	jne    4033b3 <rb_base64_encode@plt+0x1063>
  4032d5:	add    rsp,0x4010
  4032dc:	pop    rbx
  4032dd:	pop    rbp
  4032de:	pop    r12
  4032e0:	ret    
  4032e1:	nop    DWORD PTR [rax+0x0]
  4032e8:	mov    rdi,rbx
  4032eb:	call   403210 <rb_base64_encode@plt+0xec0>
  4032f0:	test   al,al
  4032f2:	jne    4032be <rb_base64_encode@plt+0xf6e>
  4032f4:	mov    rbp,rsp
  4032f7:	lea    r12,[rbx+0x58]
  4032fb:	jmp    40332e <rb_base64_encode@plt+0xfde>
  4032fd:	nop    DWORD PTR [rax]
  403300:	movsxd rdx,eax
  403303:	add    QWORD PTR [rbx+0xa8],rdx
  40330a:	xor    ecx,ecx
  40330c:	mov    edx,eax
  40330e:	mov    rsi,rbp
  403311:	mov    rdi,r12
  403314:	call   4020e0 <rb_linebuf_parse@plt>
  403319:	test   BYTE PTR [rbx+0xb8],0x2
  403320:	jne    4032be <rb_base64_encode@plt+0xf6e>
  403322:	mov    rdi,rbx
  403325:	call   403210 <rb_base64_encode@plt+0xec0>
  40332a:	test   al,al
  40332c:	jne    4032be <rb_base64_encode@plt+0xf6e>
  40332e:	test   BYTE PTR [rbx+0xb8],0x2
  403335:	jne    4032be <rb_base64_encode@plt+0xf6e>
  403337:	mov    rdi,QWORD PTR [rbx+0x90]
  40333e:	mov    edx,0x4000
  403343:	mov    rsi,rbp
  403346:	call   402150 <rb_read@plt>
  40334b:	test   eax,eax
  40334d:	je     4033a0 <rb_base64_encode@plt+0x1050>
  40334f:	jns    403300 <rb_base64_encode@plt+0xfb0>
  403351:	call   402230 <__errno_location@plt>
  403356:	mov    edi,DWORD PTR [rax]
  403358:	call   402070 <rb_ignore_errno@plt>
  40335d:	test   eax,eax
  40335f:	je     4033a0 <rb_base64_encode@plt+0x1050>
  403361:	mov    rdi,QWORD PTR [rbx+0x90]
  403368:	lea    rdx,[rip+0xffffffffffffff11]        # 403280 <rb_base64_encode@plt+0xf30>
  40336f:	mov    rcx,rbx
  403372:	mov    esi,0x1
  403377:	call   402090 <rb_setselect@plt>
  40337c:	test   BYTE PTR [rbx+0xb8],0x8
  403383:	je     4032be <rb_base64_encode@plt+0xf6e>
  403389:	mov    rdi,rbx
  40338c:	call   4030b0 <rb_base64_encode@plt+0xd60>
  403391:	jmp    4032be <rb_base64_encode@plt+0xf6e>
  403396:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4033a0:	xor    edx,edx
  4033a2:	xor    esi,esi
  4033a4:	mov    rdi,rbx
  4033a7:	xor    eax,eax
  4033a9:	call   402ba0 <rb_base64_encode@plt+0x850>
  4033ae:	jmp    4032be <rb_base64_encode@plt+0xf6e>
  4033b3:	call   402250 <__stack_chk_fail@plt>
  4033b8:	nop    DWORD PTR [rax+rax*1+0x0]
  4033c0:	test   BYTE PTR [rsi+0xb8],0x2
  4033c7:	jne    403438 <rb_base64_encode@plt+0x10e8>
  4033c9:	push   r12
  4033cb:	lea    r12,[rsi+0x30]
  4033cf:	push   rbp
  4033d0:	mov    rbp,rdi
  4033d3:	push   rbx
  4033d4:	mov    rbx,rsi
  4033d7:	jmp    4033e9 <rb_base64_encode@plt+0x1099>
  4033d9:	nop    DWORD PTR [rax+0x0]
  4033e0:	cdqe   
  4033e2:	add    QWORD PTR [rbx+0xb0],rax
  4033e9:	mov    rsi,r12
  4033ec:	mov    rdi,rbp
  4033ef:	call   402180 <rb_linebuf_flush@plt>
  4033f4:	cmp    eax,0x0
  4033f7:	jg     4033e0 <rb_base64_encode@plt+0x1090>
  4033f9:	je     403440 <rb_base64_encode@plt+0x10f0>
  4033fb:	call   402230 <__errno_location@plt>
  403400:	mov    edi,DWORD PTR [rax]
  403402:	call   402070 <rb_ignore_errno@plt>
  403407:	test   eax,eax
  403409:	je     403440 <rb_base64_encode@plt+0x10f0>
  40340b:	mov    eax,DWORD PTR [rbx+0x4c]
  40340e:	mov    rdi,QWORD PTR [rbx+0x90]
  403415:	test   eax,eax
  403417:	jle    403458 <rb_base64_encode@plt+0x1108>
  403419:	mov    rcx,rbx
  40341c:	lea    rdx,[rip+0xffffffffffffff9d]        # 4033c0 <rb_base64_encode@plt+0x1070>
  403423:	mov    esi,0x2
  403428:	pop    rbx
  403429:	pop    rbp
  40342a:	pop    r12
  40342c:	jmp    402090 <rb_setselect@plt>
  403431:	nop    DWORD PTR [rax+0x0]
  403438:	repz ret 
  40343a:	nop    WORD PTR [rax+rax*1+0x0]
  403440:	mov    rdi,rbx
  403443:	xor    edx,edx
  403445:	xor    esi,esi
  403447:	pop    rbx
  403448:	pop    rbp
  403449:	pop    r12
  40344b:	xor    eax,eax
  40344d:	jmp    402ba0 <rb_base64_encode@plt+0x850>
  403452:	nop    WORD PTR [rax+rax*1+0x0]
  403458:	pop    rbx
  403459:	pop    rbp
  40345a:	pop    r12
  40345c:	xor    ecx,ecx
  40345e:	xor    edx,edx
  403460:	mov    esi,0x2
  403465:	jmp    402090 <rb_setselect@plt>
  40346a:	nop    WORD PTR [rax+rax*1+0x0]
  403470:	push   r15
  403472:	push   r14
  403474:	mov    edx,0x4000
  403479:	push   r13
  40347b:	push   r12
  40347d:	push   rbp
  40347e:	push   rbx
  40347f:	mov    rbp,rsi
  403482:	xor    esi,esi
  403484:	sub    rsp,0x80d8
  40348b:	mov    rax,QWORD PTR fs:0x28
  403494:	mov    QWORD PTR [rsp+0x80c8],rax
  40349c:	xor    eax,eax
  40349e:	lea    rax,[rsp+0xc0]
  4034a6:	mov    QWORD PTR [rsp+0x20],rdi
  4034ab:	mov    rdi,rax
  4034ae:	mov    QWORD PTR [rsp+0x18],rax
  4034b3:	call   402050 <memset@plt>
  4034b8:	test   rbp,rbp
  4034bb:	je     40376a <rb_base64_encode@plt+0x141a>
  4034c1:	test   BYTE PTR [rbp+0xb8],0x2
  4034c8:	jne    40376a <rb_base64_encode@plt+0x141a>
  4034ce:	lea    rbx,[rsp+0x40c0]
  4034d6:	lea    rax,[rsp+0x40]
  4034db:	lea    r13,[rbx+0x4000]
  4034e2:	mov    QWORD PTR [rsp+0x28],rax
  4034e7:	nop    WORD PTR [rax+rax*1+0x0]
  4034f0:	mov    rsi,QWORD PTR [rsp+0x18]
  4034f5:	mov    rdi,QWORD PTR [rsp+0x20]
  4034fa:	mov    edx,0x4000
  4034ff:	call   402150 <rb_read@plt>
  403504:	test   eax,eax
  403506:	mov    QWORD PTR [rsp+0x10],rax
  40350b:	js     4039ab <rb_base64_encode@plt+0x165b>
  403511:	je     403993 <rb_base64_encode@plt+0x1643>
  403517:	mov    rdi,QWORD PTR [rbp+0x28]
  40351b:	mov    edx,DWORD PTR [rsp+0x10]
  40351f:	mov    rsi,QWORD PTR [rsp+0x18]
  403524:	call   402310 <rb_rawbuf_append@plt>
  403529:	test   BYTE PTR [rbp+0xb8],0x8
  403530:	je     403798 <rb_base64_encode@plt+0x1448>
  403536:	lea    rax,[rsp+0x3c]
  40353b:	lea    r12,[rsp+0x3e]
  403540:	lea    r14,[rbp+0x30]
  403544:	mov    QWORD PTR [rsp],rax
  403548:	lea    rax,[rsp+0xa0]
  403550:	mov    QWORD PTR [rsp+0x8],rax
  403555:	nop    DWORD PTR [rax]
  403558:	mov    rdi,QWORD PTR [rbp+0x28]
  40355c:	mov    edx,0x2
  403561:	mov    rsi,r12
  403564:	call   402260 <rb_rawbuf_get@plt>
  403569:	cmp    eax,0x2
  40356c:	jne    403740 <rb_base64_encode@plt+0x13f0>
  403572:	movzx  edx,BYTE PTR [rsp+0x3f]
  403577:	mov    r15d,edx
  40357a:	and    edx,0x7f
  40357d:	shr    r15b,0x7
  403581:	cmp    dl,0x7e
  403584:	mov    BYTE PTR [rsp+0x3f],dl
  403588:	je     403618 <rb_base64_encode@plt+0x12c8>
  40358e:	cmp    dl,0x7f
  403591:	je     403558 <rb_base64_encode@plt+0x1208>
  403593:	cmp    r15b,0x1
  403597:	jne    4036c0 <rb_base64_encode@plt+0x1370>
  40359d:	mov    rdi,QWORD PTR [rbp+0x28]
  4035a1:	mov    rsi,QWORD PTR [rsp+0x8]
  4035a6:	mov    edx,0x4
  4035ab:	call   402260 <rb_rawbuf_get@plt>
  4035b0:	test   eax,eax
  4035b2:	je     403720 <rb_base64_encode@plt+0x13d0>
  4035b8:	movzx  edx,BYTE PTR [rsp+0x3f]
  4035bd:	mov    rdi,QWORD PTR [rbp+0x28]
  4035c1:	mov    rsi,rbx
  4035c4:	call   402260 <rb_rawbuf_get@plt>
  4035c9:	cmp    eax,0x0
  4035cc:	je     4036d7 <rb_base64_encode@plt+0x1387>
  4035d2:	jle    4035fa <rb_base64_encode@plt+0x12aa>
  4035d4:	xor    ecx,ecx
  4035d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4035e0:	mov    rsi,rcx
  4035e3:	and    esi,0x3
  4035e6:	movzx  esi,BYTE PTR [rsp+rsi*1+0xa0]
  4035ee:	xor    BYTE PTR [rbx+rcx*1],sil
  4035f2:	add    rcx,0x1
  4035f6:	cmp    eax,ecx
  4035f8:	jg     4035e0 <rb_base64_encode@plt+0x1290>
  4035fa:	mov    ecx,0x1
  4035ff:	mov    edx,eax
  403601:	mov    rsi,rbx
  403604:	mov    rdi,r14
  403607:	call   4020e0 <rb_linebuf_parse@plt>
  40360c:	jmp    403558 <rb_base64_encode@plt+0x1208>
  403611:	nop    DWORD PTR [rax+0x0]
  403618:	xor    esi,esi
  40361a:	mov    edx,0x4000
  40361f:	mov    rdi,rbx
  403622:	call   402050 <memset@plt>
  403627:	mov    rdi,QWORD PTR [rbp+0x28]
  40362b:	mov    rsi,QWORD PTR [rsp]
  40362f:	mov    edx,0x2
  403634:	call   402260 <rb_rawbuf_get@plt>
  403639:	test   eax,eax
  40363b:	je     403700 <rb_base64_encode@plt+0x13b0>
  403641:	movzx  edx,WORD PTR [rsp+0x3c]
  403646:	rol    dx,0x8
  40364a:	cmp    r15b,0x1
  40364e:	mov    WORD PTR [rsp+0x3c],dx
  403653:	jne    4036f8 <rb_base64_encode@plt+0x13a8>
  403659:	mov    rdi,QWORD PTR [rbp+0x28]
  40365d:	mov    rsi,QWORD PTR [rsp+0x8]
  403662:	mov    edx,0x4
  403667:	call   402260 <rb_rawbuf_get@plt>
  40366c:	test   eax,eax
  40366e:	je     403720 <rb_base64_encode@plt+0x13d0>
  403674:	movzx  edx,WORD PTR [rsp+0x3c]
  403679:	mov    rdi,QWORD PTR [rbp+0x28]
  40367d:	mov    rsi,rbx
  403680:	call   402260 <rb_rawbuf_get@plt>
  403685:	cmp    eax,0x0
  403688:	je     4036d7 <rb_base64_encode@plt+0x1387>
  40368a:	jle    4035fa <rb_base64_encode@plt+0x12aa>
  403690:	xor    ecx,ecx
  403692:	nop    WORD PTR [rax+rax*1+0x0]
  403698:	mov    rsi,rcx
  40369b:	and    esi,0x3
  40369e:	movzx  esi,BYTE PTR [rsp+rsi*1+0xa0]
  4036a6:	xor    BYTE PTR [rbx+rcx*1],sil
  4036aa:	add    rcx,0x1
  4036ae:	cmp    eax,ecx
  4036b0:	jg     403698 <rb_base64_encode@plt+0x1348>
  4036b2:	jmp    4035fa <rb_base64_encode@plt+0x12aa>
  4036b7:	nop    WORD PTR [rax+rax*1+0x0]
  4036c0:	movzx  edx,dl
  4036c3:	mov    rdi,QWORD PTR [rbp+0x28]
  4036c7:	mov    rsi,rbx
  4036ca:	call   402260 <rb_rawbuf_get@plt>
  4036cf:	test   eax,eax
  4036d1:	jne    4035fa <rb_base64_encode@plt+0x12aa>
  4036d7:	lea    rdx,[rip+0x2b22]        # 406200 <rb_base64_encode@plt+0x3eb0>
  4036de:	mov    esi,0x1
  4036e3:	mov    rdi,rbp
  4036e6:	xor    eax,eax
  4036e8:	call   402ba0 <rb_base64_encode@plt+0x850>
  4036ed:	jmp    403558 <rb_base64_encode@plt+0x1208>
  4036f2:	nop    WORD PTR [rax+rax*1+0x0]
  4036f8:	movzx  edx,dx
  4036fb:	jmp    4036c3 <rb_base64_encode@plt+0x1373>
  4036fd:	nop    DWORD PTR [rax]
  403700:	lea    rdx,[rip+0x2a99]        # 4061a0 <rb_base64_encode@plt+0x3e50>
  403707:	mov    esi,0x1
  40370c:	mov    rdi,rbp
  40370f:	call   402ba0 <rb_base64_encode@plt+0x850>
  403714:	jmp    403558 <rb_base64_encode@plt+0x1208>
  403719:	nop    DWORD PTR [rax+0x0]
  403720:	lea    rdx,[rip+0x2aa9]        # 4061d0 <rb_base64_encode@plt+0x3e80>
  403727:	mov    esi,0x1
  40372c:	mov    rdi,rbp
  40372f:	call   402ba0 <rb_base64_encode@plt+0x850>
  403734:	jmp    403558 <rb_base64_encode@plt+0x1208>
  403739:	nop    DWORD PTR [rax+0x0]
  403740:	mov    rdi,QWORD PTR [rbp+0x90]
  403747:	mov    rsi,rbp
  40374a:	call   4033c0 <rb_base64_encode@plt+0x1070>
  40374f:	cmp    DWORD PTR [rsp+0x10],0x3fff
  403757:	jbe    403819 <rb_base64_encode@plt+0x14c9>
  40375d:	test   BYTE PTR [rbp+0xb8],0x2
  403764:	je     4034f0 <rb_base64_encode@plt+0x11a0>
  40376a:	mov    rax,QWORD PTR [rsp+0x80c8]
  403772:	xor    rax,QWORD PTR fs:0x28
  40377b:	jne    4039e8 <rb_base64_encode@plt+0x1698>
  403781:	add    rsp,0x80d8
  403788:	pop    rbx
  403789:	pop    rbp
  40378a:	pop    r12
  40378c:	pop    r13
  40378e:	pop    r14
  403790:	pop    r15
  403792:	ret    
  403793:	nop    DWORD PTR [rax+rax*1+0x0]
  403798:	mov    edx,0x4000
  40379d:	xor    esi,esi
  40379f:	mov    rdi,rbx
  4037a2:	call   402050 <memset@plt>
  4037a7:	lea    r12,[rip+0x28ae]        # 40605c <rb_base64_encode@plt+0x3d0c>
  4037ae:	lea    r14,[rbp+0xb9]
  4037b5:	jmp    4037d0 <rb_base64_encode@plt+0x1480>
  4037b7:	nop    WORD PTR [rax+rax*1+0x0]
  4037c0:	mov    rsi,r12
  4037c3:	mov    rdi,rbx
  4037c6:	call   4021c0 <rb_strcasestr@plt>
  4037cb:	test   rax,rax
  4037ce:	jne    403840 <rb_base64_encode@plt+0x14f0>
  4037d0:	mov    rdi,QWORD PTR [rbp+0x28]
  4037d4:	mov    edx,0x4000
  4037d9:	mov    rsi,rbx
  4037dc:	call   402260 <rb_rawbuf_get@plt>
  4037e1:	test   eax,eax
  4037e3:	jne    4037c0 <rb_base64_encode@plt+0x1470>
  4037e5:	movzx  eax,BYTE PTR [rbp+0xb8]
  4037ec:	test   al,0x8
  4037ee:	jne    4038c1 <rb_base64_encode@plt+0x1571>
  4037f4:	test   al,0x2
  4037f6:	jne    40374f <rb_base64_encode@plt+0x13ff>
  4037fc:	mov    rdi,QWORD PTR [rbp+0x88]
  403803:	mov    rsi,rbp
  403806:	call   402f70 <rb_base64_encode@plt+0xc20>
  40380b:	cmp    DWORD PTR [rsp+0x10],0x3fff
  403813:	ja     40375d <rb_base64_encode@plt+0x140d>
  403819:	mov    rdi,QWORD PTR [rsp+0x20]
  40381e:	lea    rdx,[rip+0xfffffffffffffc4b]        # 403470 <rb_base64_encode@plt+0x1120>
  403825:	mov    rcx,rbp
  403828:	mov    esi,0x1
  40382d:	call   402090 <rb_setselect@plt>
  403832:	jmp    40376a <rb_base64_encode@plt+0x141a>
  403837:	nop    WORD PTR [rax+rax*1+0x0]
  403840:	lea    rsi,[rax+0x12]
  403844:	cmp    rsi,r13
  403847:	jae    4038a0 <rb_base64_encode@plt+0x1550>
  403849:	movzx  eax,BYTE PTR [rax+0x12]
  40384d:	test   al,al
  40384f:	jne    403868 <rb_base64_encode@plt+0x1518>
  403851:	jmp    4038a0 <rb_base64_encode@plt+0x1550>
  403853:	nop    DWORD PTR [rax+rax*1+0x0]
  403858:	add    rsi,0x1
  40385c:	cmp    rsi,r13
  40385f:	je     4038a0 <rb_base64_encode@plt+0x1550>
  403861:	movzx  eax,BYTE PTR [rsi]
  403864:	test   al,al
  403866:	je     4038a0 <rb_base64_encode@plt+0x1550>
  403868:	cmp    al,0x20
  40386a:	je     403858 <rb_base64_encode@plt+0x1508>
  40386c:	cmp    al,0x9
  40386e:	je     403858 <rb_base64_encode@plt+0x1508>
  403870:	cmp    al,0xd
  403872:	je     4038b9 <rb_base64_encode@plt+0x1569>
  403874:	cmp    al,0xa
  403876:	je     4038b9 <rb_base64_encode@plt+0x1569>
  403878:	mov    rax,rsi
  40387b:	jmp    403891 <rb_base64_encode@plt+0x1541>
  40387d:	nop    DWORD PTR [rax]
  403880:	movzx  edx,BYTE PTR [rax]
  403883:	test   dl,dl
  403885:	je     4038a0 <rb_base64_encode@plt+0x1550>
  403887:	cmp    dl,0xd
  40388a:	je     4038bc <rb_base64_encode@plt+0x156c>
  40388c:	cmp    dl,0xa
  40388f:	je     4038bc <rb_base64_encode@plt+0x156c>
  403891:	add    rax,0x1
  403895:	cmp    rax,r13
  403898:	jb     403880 <rb_base64_encode@plt+0x1530>
  40389a:	nop    WORD PTR [rax+rax*1+0x0]
  4038a0:	mov    edx,0x25
  4038a5:	mov    rdi,r14
  4038a8:	call   402100 <rb_strlcpy@plt>
  4038ad:	or     BYTE PTR [rbp+0xb8],0x8
  4038b4:	jmp    4037d0 <rb_base64_encode@plt+0x1480>
  4038b9:	mov    rax,rsi
  4038bc:	mov    BYTE PTR [rax],0x0
  4038bf:	jmp    4038a0 <rb_base64_encode@plt+0x1550>
  4038c1:	mov    r14,QWORD PTR [rsp+0x28]
  4038c6:	lea    r12,[rbp+0xb9]
  4038cd:	mov    rdi,r14
  4038d0:	call   4050a0 <rb_base64_encode@plt+0x2d50>
  4038d5:	mov    rdi,r12
  4038d8:	call   402130 <strlen@plt>
  4038dd:	mov    rsi,r12
  4038e0:	mov    rdx,rax
  4038e3:	mov    rdi,r14
  4038e6:	call   4050d0 <rb_base64_encode@plt+0x2d80>
  4038eb:	lea    r12,[rsp+0xa0]
  4038f3:	lea    rsi,[rip+0x27f6]        # 4060f0 <rb_base64_encode@plt+0x3da0>
  4038fa:	mov    edx,0x24
  4038ff:	mov    rdi,r14
  403902:	call   4050d0 <rb_base64_encode@plt+0x2d80>
  403907:	mov    rsi,r12
  40390a:	mov    rdi,r14
  40390d:	call   405220 <rb_base64_encode@plt+0x2ed0>
  403912:	mov    rdi,r12
  403915:	mov    esi,0x14
  40391a:	call   402350 <rb_base64_encode@plt>
  40391f:	test   BYTE PTR [rbp+0xb8],0x2
  403926:	mov    r12,rax
  403929:	mov    rdi,QWORD PTR [rbp+0x20]
  40392d:	je     403943 <rb_base64_encode@plt+0x15f3>
  40392f:	mov    rdi,r12
  403932:	call   402120 <free@plt>
  403937:	movzx  eax,BYTE PTR [rbp+0xb8]
  40393e:	jmp    4037f4 <rb_base64_encode@plt+0x14a4>
  403943:	lea    rsi,[rip+0x27ce]        # 406118 <rb_base64_encode@plt+0x3dc8>
  40394a:	mov    edx,0x81
  40394f:	call   402310 <rb_rawbuf_append@plt>
  403954:	mov    rdi,r12
  403957:	call   402130 <strlen@plt>
  40395c:	test   BYTE PTR [rbp+0xb8],0x2
  403963:	mov    rdi,QWORD PTR [rbp+0x20]
  403967:	jne    40392f <rb_base64_encode@plt+0x15df>
  403969:	mov    edx,eax
  40396b:	mov    rsi,r12
  40396e:	call   402310 <rb_rawbuf_append@plt>
  403973:	test   BYTE PTR [rbp+0xb8],0x2
  40397a:	mov    rdi,QWORD PTR [rbp+0x20]
  40397e:	jne    40392f <rb_base64_encode@plt+0x15df>
  403980:	lea    rsi,[rip+0x26e8]        # 40606f <rb_base64_encode@plt+0x3d1f>
  403987:	mov    edx,0x4
  40398c:	call   402310 <rb_rawbuf_append@plt>
  403991:	jmp    40392f <rb_base64_encode@plt+0x15df>
  403993:	lea    rdx,[rip+0x26b0]        # 40604a <rb_base64_encode@plt+0x3cfa>
  40399a:	xor    esi,esi
  40399c:	mov    rdi,rbp
  40399f:	xor    eax,eax
  4039a1:	call   402ba0 <rb_base64_encode@plt+0x850>
  4039a6:	jmp    40376a <rb_base64_encode@plt+0x141a>
  4039ab:	call   402230 <__errno_location@plt>
  4039b0:	mov    edi,DWORD PTR [rax]
  4039b2:	call   402070 <rb_ignore_errno@plt>
  4039b7:	test   eax,eax
  4039b9:	je     403993 <rb_base64_encode@plt+0x1643>
  4039bb:	mov    rdi,QWORD PTR [rsp+0x20]
  4039c0:	lea    rdx,[rip+0xfffffffffffffaa9]        # 403470 <rb_base64_encode@plt+0x1120>
  4039c7:	mov    rcx,rbp
  4039ca:	mov    esi,0x1
  4039cf:	call   402090 <rb_setselect@plt>
  4039d4:	mov    rdi,QWORD PTR [rbp+0x90]
  4039db:	mov    rsi,rbp
  4039de:	call   4033c0 <rb_base64_encode@plt+0x1070>
  4039e3:	jmp    40376a <rb_base64_encode@plt+0x141a>
  4039e8:	call   402250 <__stack_chk_fail@plt>
  4039ed:	nop    DWORD PTR [rax]
  4039f0:	push   r15
  4039f2:	push   r14
  4039f4:	push   r13
  4039f6:	push   r12
  4039f8:	push   rbp
  4039f9:	push   rbx
  4039fa:	mov    rbp,rsi
  4039fd:	sub    rsp,0x18
  403a01:	mov    esi,0x50
  403a06:	mov    edi,0x1
  403a0b:	call   4022b0 <calloc@plt>
  403a10:	test   rax,rax
  403a13:	mov    rbx,rax
  403a16:	je     403bb0 <rb_base64_encode@plt+0x1860>
  403a1c:	mov    esi,0x4000
  403a21:	mov    edi,0x1
  403a26:	call   4022b0 <calloc@plt>
  403a2b:	test   rax,rax
  403a2e:	je     403bb0 <rb_base64_encode@plt+0x1860>
  403a34:	mov    rdi,QWORD PTR [rbp+0x20]
  403a38:	lea    rcx,[rbx+0x28]
  403a3c:	mov    QWORD PTR [rbx+0x18],rax
  403a40:	mov    QWORD PTR [rbx+0x20],0x4000
  403a48:	mov    r8d,0x4
  403a4e:	mov    edx,0x4000
  403a53:	mov    rsi,rax
  403a56:	call   4022a0 <rb_recv_fd_buf@plt>
  403a5b:	movsxd r12,eax
  403a5e:	test   r12d,r12d
  403a61:	jle    403ab8 <rb_base64_encode@plt+0x1768>
  403a63:	mov    rax,QWORD PTR [rbp+0x38]
  403a67:	mov    QWORD PTR [rbx+0x20],r12
  403a6b:	mov    QWORD PTR [rbx],rbx
  403a6e:	mov    QWORD PTR [rbx+0x10],0x0
  403a76:	test   rax,rax
  403a79:	mov    QWORD PTR [rbx+0x8],rax
  403a7d:	je     403bb8 <rb_base64_encode@plt+0x1868>
  403a83:	mov    QWORD PTR [rax+0x10],rbx
  403a87:	add    QWORD PTR [rbp+0x40],0x1
  403a8c:	mov    QWORD PTR [rbp+0x38],rbx
  403a90:	xor    eax,eax
  403a92:	cmp    QWORD PTR [rbx+rax*8+0x28],0x0
  403a98:	mov    edx,eax
  403a9a:	je     403aab <rb_base64_encode@plt+0x175b>
  403a9c:	add    rax,0x1
  403aa0:	cmp    rax,0x4
  403aa4:	jne    403a92 <rb_base64_encode@plt+0x1742>
  403aa6:	mov    edx,0x4
  403aab:	mov    DWORD PTR [rbx+0x48],edx
  403aae:	jmp    403a01 <rb_base64_encode@plt+0x16b1>
  403ab3:	nop    DWORD PTR [rax+rax*1+0x0]
  403ab8:	mov    rdi,QWORD PTR [rbx+0x18]
  403abc:	test   rdi,rdi
  403abf:	je     403ac6 <rb_base64_encode@plt+0x1776>
  403ac1:	call   402120 <free@plt>
  403ac6:	mov    rdi,rbx
  403ac9:	call   402120 <free@plt>
  403ace:	test   r12d,r12d
  403ad1:	je     403d93 <rb_base64_encode@plt+0x1a43>
  403ad7:	call   402230 <__errno_location@plt>
  403adc:	mov    edi,DWORD PTR [rax]
  403ade:	call   402070 <rb_ignore_errno@plt>
  403ae3:	test   eax,eax
  403ae5:	je     403d93 <rb_base64_encode@plt+0x1a43>
  403aeb:	mov    r13,QWORD PTR [rbp+0x30]
  403aef:	test   r13,r13
  403af2:	je     403be0 <rb_base64_encode@plt+0x1890>
  403af8:	mov    r14,QWORD PTR [r13+0x10]
  403afc:	lea    r15,[rip+0x46fd]        # 408200 <rb_base64_encode@plt+0x5eb0>
  403b03:	nop    DWORD PTR [rax+rax*1+0x0]
  403b08:	mov    r12,QWORD PTR [r13+0x0]
  403b0c:	mov    rdi,QWORD PTR [r12+0x18]
  403b11:	cmp    BYTE PTR [rdi],0x41
  403b14:	jne    403b4c <rb_base64_encode@plt+0x17fc>
  403b16:	mov    eax,DWORD PTR [r12+0x48]
  403b1b:	cmp    eax,0x2
  403b1e:	je     403c20 <rb_base64_encode@plt+0x18d0>
  403b24:	test   eax,eax
  403b26:	mov    ebx,0x1
  403b2b:	jle    403b4c <rb_base64_encode@plt+0x17fc>
  403b2d:	nop    DWORD PTR [rax]
  403b30:	mov    rdi,QWORD PTR [r12+rbx*8+0x20]
  403b35:	call   4021d0 <rb_close@plt>
  403b3a:	mov    eax,ebx
  403b3c:	add    rbx,0x1
  403b40:	cmp    eax,DWORD PTR [r12+0x48]
  403b45:	jl     403b30 <rb_base64_encode@plt+0x17e0>
  403b47:	mov    rdi,QWORD PTR [r12+0x18]
  403b4c:	mov    rax,QWORD PTR [r13+0x10]
  403b50:	mov    rdx,QWORD PTR [r13+0x8]
  403b54:	test   rax,rax
  403b57:	je     403c10 <rb_base64_encode@plt+0x18c0>
  403b5d:	mov    QWORD PTR [rax+0x8],rdx
  403b61:	mov    rdx,QWORD PTR [r13+0x8]
  403b65:	test   rdx,rdx
  403b68:	je     403bd0 <rb_base64_encode@plt+0x1880>
  403b6a:	mov    QWORD PTR [rdx+0x10],rax
  403b6e:	mov    QWORD PTR [r13+0x8],0x0
  403b76:	mov    QWORD PTR [r13+0x10],0x0
  403b7e:	sub    QWORD PTR [rbp+0x40],0x1
  403b83:	test   rdi,rdi
  403b86:	je     403b8d <rb_base64_encode@plt+0x183d>
  403b88:	call   402120 <free@plt>
  403b8d:	mov    rdi,r12
  403b90:	call   402120 <free@plt>
  403b95:	test   r14,r14
  403b98:	je     403be0 <rb_base64_encode@plt+0x1890>
  403b9a:	mov    r13,r14
  403b9d:	mov    r14,QWORD PTR [r14+0x10]
  403ba1:	jmp    403b08 <rb_base64_encode@plt+0x17b8>
  403ba6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403bb0:	call   402220 <rb_outofmemory@plt>
  403bb5:	nop    DWORD PTR [rax]
  403bb8:	cmp    QWORD PTR [rbp+0x30],0x0
  403bbd:	jne    403a87 <rb_base64_encode@plt+0x1737>
  403bc3:	mov    QWORD PTR [rbp+0x30],rbx
  403bc7:	jmp    403a87 <rb_base64_encode@plt+0x1737>
  403bcc:	nop    DWORD PTR [rax+0x0]
  403bd0:	mov    QWORD PTR [rbp+0x30],rax
  403bd4:	jmp    403b6e <rb_base64_encode@plt+0x181e>
  403bd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403be0:	mov    rdi,QWORD PTR [rbp+0x20]
  403be4:	add    rsp,0x18
  403be8:	mov    rcx,rbp
  403beb:	pop    rbx
  403bec:	pop    rbp
  403bed:	pop    r12
  403bef:	pop    r13
  403bf1:	pop    r14
  403bf3:	pop    r15
  403bf5:	lea    rdx,[rip+0xfffffffffffffdf4]        # 4039f0 <rb_base64_encode@plt+0x16a0>
  403bfc:	mov    esi,0x1
  403c01:	jmp    402090 <rb_setselect@plt>
  403c06:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403c10:	mov    QWORD PTR [rbp+0x38],rdx
  403c14:	jmp    403b65 <rb_base64_encode@plt+0x1815>
  403c19:	nop    DWORD PTR [rax+0x0]
  403c20:	cmp    QWORD PTR [r12+0x20],0x5
  403c26:	je     403c32 <rb_base64_encode@plt+0x18e2>
  403c28:	mov    ebx,0x1
  403c2d:	jmp    403b30 <rb_base64_encode@plt+0x17e0>
  403c32:	mov    rax,QWORD PTR [r12+0x30]
  403c37:	mov    rdx,QWORD PTR [r12+0x28]
  403c3c:	mov    esi,0xe0
  403c41:	mov    edi,0x1
  403c46:	mov    QWORD PTR [rsp],rax
  403c4a:	mov    QWORD PTR [rsp+0x8],rdx
  403c4f:	call   4022b0 <calloc@plt>
  403c54:	test   rax,rax
  403c57:	mov    rbx,rax
  403c5a:	je     403bb0 <rb_base64_encode@plt+0x1860>
  403c60:	mov    rdx,QWORD PTR [rsp+0x8]
  403c65:	mov    QWORD PTR [rax+0x18],rbp
  403c69:	mov    QWORD PTR [rax+0x88],rdx
  403c70:	mov    rax,QWORD PTR [rsp]
  403c74:	mov    rdi,rdx
  403c77:	mov    DWORD PTR [rbx+0x80],0xffffffff
  403c81:	mov    QWORD PTR [rbx+0x90],rax
  403c88:	call   4020d0 <rb_set_nb@plt>
  403c8d:	mov    rdi,QWORD PTR [rsp]
  403c91:	call   4020d0 <rb_set_nb@plt>
  403c96:	lea    rdi,[rbx+0x58]
  403c9a:	call   4022d0 <rb_linebuf_newbuf@plt>
  403c9f:	lea    rdi,[rbx+0x30]
  403ca3:	call   4022d0 <rb_linebuf_newbuf@plt>
  403ca8:	call   402280 <rb_new_rawbuffer@plt>
  403cad:	mov    QWORD PTR [rbx+0x28],rax
  403cb1:	call   402280 <rb_new_rawbuffer@plt>
  403cb6:	mov    QWORD PTR [rbx+0x20],rax
  403cba:	mov    rax,QWORD PTR [r12+0x18]
  403cbf:	mov    edx,0x10624dd3
  403cc4:	mov    esi,DWORD PTR [rax+0x1]
  403cc7:	mov    QWORD PTR [rbx],rbx
  403cca:	mov    QWORD PTR [rbx+0x8],0x0
  403cd2:	mov    eax,esi
  403cd4:	mov    ecx,esi
  403cd6:	mov    DWORD PTR [rbx+0x80],esi
  403cdc:	mul    edx
  403cde:	mov    eax,edx
  403ce0:	shr    eax,0x7
  403ce3:	imul   eax,eax,0x7d0
  403ce9:	sub    ecx,eax
  403ceb:	lea    rdx,[rcx+rcx*2]
  403cef:	mov    rax,rcx
  403cf2:	lea    rsi,[r15+rdx*8]
  403cf6:	mov    rdx,QWORD PTR [rsi]
  403cf9:	test   rdx,rdx
  403cfc:	mov    QWORD PTR [rbx+0x10],rdx
  403d00:	je     403d73 <rb_base64_encode@plt+0x1a23>
  403d02:	mov    QWORD PTR [rdx+0x8],rbx
  403d06:	lea    rax,[rax+rax*2]
  403d0a:	or     BYTE PTR [rbx+0xb8],0x4
  403d11:	mov    rdi,QWORD PTR [rbx+0x88]
  403d18:	lea    rax,[r15+rax*8]
  403d1c:	add    QWORD PTR [rax+0x10],0x1
  403d21:	mov    QWORD PTR [rax],rbx
  403d24:	call   402040 <rb_get_type@plt>
  403d29:	test   al,0x40
  403d2b:	jne    403d60 <rb_base64_encode@plt+0x1a10>
  403d2d:	mov    rdi,QWORD PTR [rbx+0x90]
  403d34:	call   402040 <rb_get_type@plt>
  403d39:	cmp    al,0x40
  403d3b:	je     403d80 <rb_base64_encode@plt+0x1a30>
  403d3d:	mov    rdi,QWORD PTR [rbx+0x88]
  403d44:	mov    rsi,rbx
  403d47:	call   403470 <rb_base64_encode@plt+0x1120>
  403d4c:	mov    rdi,QWORD PTR [rbx+0x90]
  403d53:	mov    rsi,rbx
  403d56:	call   403280 <rb_base64_encode@plt+0xf30>
  403d5b:	jmp    403b47 <rb_base64_encode@plt+0x17f7>
  403d60:	mov    rdi,QWORD PTR [rbx+0x88]
  403d67:	mov    esi,0x4
  403d6c:	call   402160 <rb_set_type@plt>
  403d71:	jmp    403d2d <rb_base64_encode@plt+0x19dd>
  403d73:	cmp    QWORD PTR [rsi+0x8],0x0
  403d78:	jne    403d06 <rb_base64_encode@plt+0x19b6>
  403d7a:	mov    QWORD PTR [rsi+0x8],rbx
  403d7e:	jmp    403d06 <rb_base64_encode@plt+0x19b6>
  403d80:	mov    rdi,QWORD PTR [rbx+0x90]
  403d87:	mov    esi,0x4
  403d8c:	call   402160 <rb_set_type@plt>
  403d91:	jmp    403d3d <rb_base64_encode@plt+0x19ed>
  403d93:	xor    edi,edi
  403d95:	call   4020b0 <exit@plt>
  403d9a:	nop    WORD PTR [rax+rax*1+0x0]
  403da0:	push   r15
  403da2:	push   r14
  403da4:	mov    rax,rdi
  403da7:	push   r13
  403da9:	push   r12
  403dab:	push   rbp
  403dac:	push   rbx
  403dad:	mov    ebx,DWORD PTR [rdi]
  403daf:	mov    r15d,DWORD PTR [rax+0x10]
  403db3:	mov    QWORD PTR [rsp-0x8],rax
  403db8:	movbe  r14d,DWORD PTR [rsi]
  403dbd:	movbe  ebp,DWORD PTR [rsi+0x8]
  403dc2:	movbe  r12d,DWORD PTR [rsi+0xc]
  403dc8:	mov    ecx,ebx
  403dca:	mov    ebx,DWORD PTR [rdi+0x4]
  403dcd:	mov    r11d,r15d
  403dd0:	rorx   eax,ecx,0x1b
  403dd6:	mov    DWORD PTR [rsp-0x1c],ecx
  403dda:	mov    DWORD PTR [rsp-0xc],r11d
  403ddf:	lea    eax,[r11+rax*1+0x5a827999]
  403de7:	mov    edx,ebx
  403de9:	mov    ebx,DWORD PTR [rdi+0x8]
  403dec:	mov    edi,DWORD PTR [rdi+0xc]
  403def:	mov    DWORD PTR [rsp-0x18],edx
  403df3:	mov    r8d,ebx
  403df6:	mov    r15d,edi
  403df9:	mov    DWORD PTR [rsp-0x14],ebx
  403dfd:	xor    r8d,edi
  403e00:	mov    DWORD PTR [rsp-0x10],r15d
  403e05:	and    r8d,edx
  403e08:	rorx   edx,edx,0x2
  403e0e:	xor    r8d,edi
  403e11:	movbe  edi,DWORD PTR [rsi+0x4]
  403e16:	mov    r9d,edx
  403e19:	add    r8d,eax
  403e1c:	add    r8d,r14d
  403e1f:	mov    r10d,edi
  403e22:	mov    edi,ebx
  403e24:	xor    edi,edx
  403e26:	mov    DWORD PTR [rsp-0x44],r10d
  403e2b:	mov    eax,edi
  403e2d:	and    eax,ecx
  403e2f:	xor    eax,ebx
  403e31:	lea    edi,[r15+rax*1+0x5a827999]
  403e39:	rorx   eax,r8d,0x1b
  403e3f:	add    edi,r10d
  403e42:	movbe  r10d,DWORD PTR [rsi+0x1c]
  403e48:	add    edi,eax
  403e4a:	rorx   eax,ecx,0x2
  403e50:	lea    ecx,[rbx+rbp*1+0x5a827999]
  403e57:	xor    r9d,eax
  403e5a:	mov    r13d,eax
  403e5d:	and    r9d,r8d
  403e60:	rorx   r8d,r8d,0x2
  403e66:	mov    DWORD PTR [rsp-0x3c],r10d
  403e6b:	xor    r9d,edx
  403e6e:	xor    r13d,r8d
  403e71:	lea    edx,[rdx+r12*1+0x5a827999]
  403e79:	add    r9d,ecx
  403e7c:	rorx   ecx,edi,0x1b
  403e82:	mov    r15d,r8d
  403e85:	add    r9d,ecx
  403e88:	mov    ecx,r13d
  403e8b:	movbe  r13d,DWORD PTR [rsi+0x10]
  403e91:	and    ecx,edi
  403e93:	rorx   edi,edi,0x2
  403e99:	xor    ecx,eax
  403e9b:	xor    r15d,edi
  403e9e:	mov    r11d,edi
  403ea1:	add    ecx,edx
  403ea3:	rorx   edx,r9d,0x1b
  403ea9:	lea    eax,[rax+r13*1+0x5a827999]
  403eb1:	add    ecx,edx
  403eb3:	mov    edx,r15d
  403eb6:	movbe  r15d,DWORD PTR [rsi+0x14]
  403ebc:	and    edx,r9d
  403ebf:	rorx   r9d,r9d,0x2
  403ec5:	xor    edx,r8d
  403ec8:	xor    r11d,r9d
  403ecb:	add    edx,eax
  403ecd:	rorx   eax,ecx,0x1b
  403ed3:	lea    r8d,[r8+r15*1+0x5a827999]
  403edb:	add    edx,eax
  403edd:	mov    eax,r11d
  403ee0:	movbe  r11d,DWORD PTR [rsi+0x18]
  403ee6:	and    eax,ecx
  403ee8:	rorx   ecx,ecx,0x2
  403eee:	xor    eax,edi
  403ef0:	mov    ebx,ecx
  403ef2:	add    eax,r8d
  403ef5:	rorx   r8d,edx,0x1b
  403efb:	lea    edi,[rdi+r11*1+0x5a827999]
  403f03:	add    eax,r8d
  403f06:	mov    r8d,r9d
  403f09:	mov    DWORD PTR [rsp-0x40],r11d
  403f0e:	xor    r8d,ecx
  403f11:	and    r8d,edx
  403f14:	rorx   edx,edx,0x2
  403f1a:	xor    r8d,r9d
  403f1d:	xor    ebx,edx
  403f1f:	lea    r9d,[r9+r10*1+0x5a827999]
  403f27:	add    r8d,edi
  403f2a:	rorx   edi,eax,0x1b
  403f30:	movbe  r10d,DWORD PTR [rsi+0x20]
  403f36:	add    r8d,edi
  403f39:	mov    edi,ebx
  403f3b:	and    edi,eax
  403f3d:	rorx   eax,eax,0x2
  403f43:	xor    edi,ecx
  403f45:	lea    ecx,[rcx+r10*1+0x5a827999]
  403f4d:	add    edi,r9d
  403f50:	rorx   r9d,r8d,0x1b
  403f56:	add    edi,r9d
  403f59:	mov    r9d,edx
  403f5c:	xor    r9d,eax
  403f5f:	and    r9d,r8d
  403f62:	rorx   r8d,r8d,0x2
  403f68:	xor    r9d,edx
  403f6b:	mov    ebx,r8d
  403f6e:	add    r9d,ecx
  403f71:	rorx   ecx,edi,0x1b
  403f77:	add    r9d,ecx
  403f7a:	movbe  ecx,DWORD PTR [rsi+0x24]
  403f7f:	mov    r11d,ecx
  403f82:	mov    ecx,eax
  403f84:	xor    ecx,r8d
  403f87:	lea    edx,[rdx+r11*1+0x5a827999]
  403f8f:	mov    DWORD PTR [rsp-0x34],r11d
  403f94:	and    ecx,edi
  403f96:	rorx   edi,edi,0x2
  403f9c:	xor    ecx,eax
  403f9e:	xor    ebx,edi
  403fa0:	add    ecx,edx
  403fa2:	rorx   edx,r9d,0x1b
  403fa8:	add    ecx,edx
  403faa:	movbe  edx,DWORD PTR [rsi+0x28]
  403faf:	mov    r11d,edx
  403fb2:	mov    edx,ebx
  403fb4:	and    edx,r9d
  403fb7:	lea    eax,[rax+r11*1+0x5a827999]
  403fbf:	mov    DWORD PTR [rsp-0x30],r11d
  403fc4:	xor    edx,r8d
  403fc7:	movbe  ebx,DWORD PTR [rsi+0x2c]
  403fcc:	rorx   r9d,r9d,0x2
  403fd2:	add    edx,eax
  403fd4:	rorx   eax,ecx,0x1b
  403fda:	add    edx,eax
  403fdc:	mov    eax,edi
  403fde:	xor    eax,r9d
  403fe1:	lea    r8d,[r8+rbx*1+0x5a827999]
  403fe9:	mov    DWORD PTR [rsp-0x2c],ebx
  403fed:	and    eax,ecx
  403fef:	rorx   ecx,ecx,0x2
  403ff5:	movbe  ebx,DWORD PTR [rsi+0x34]
  403ffa:	xor    eax,edi
  403ffc:	add    eax,r8d
  403fff:	rorx   r8d,edx,0x1b
  404005:	add    eax,r8d
  404008:	movbe  r8d,DWORD PTR [rsi+0x30]
  40400e:	mov    r11d,r8d
  404011:	mov    r8d,r9d
  404014:	xor    r8d,ecx
  404017:	lea    edi,[rdi+r11*1+0x5a827999]
  40401f:	mov    DWORD PTR [rsp-0x28],r11d
  404024:	and    r8d,edx
  404027:	rorx   edx,edx,0x2
  40402d:	movbe  r11d,DWORD PTR [rsi+0x38]
  404033:	xor    r8d,r9d
  404036:	lea    r9d,[r9+rbx*1+0x5a827999]
  40403e:	movbe  esi,DWORD PTR [rsi+0x3c]
  404043:	add    r8d,edi
  404046:	rorx   edi,eax,0x1b
  40404c:	add    r8d,edi
  40404f:	mov    edi,ecx
  404051:	xor    edi,edx
  404053:	mov    DWORD PTR [rsp-0x4c],esi
  404057:	and    edi,eax
  404059:	rorx   eax,eax,0x2
  40405f:	xor    edi,ecx
  404061:	lea    ecx,[rcx+r11*1+0x5a827999]
  404069:	mov    esi,eax
  40406b:	add    edi,r9d
  40406e:	rorx   r9d,r8d,0x1b
  404074:	add    edi,r9d
  404077:	mov    r9d,edx
  40407a:	xor    r9d,eax
  40407d:	and    r9d,r8d
  404080:	rorx   r8d,r8d,0x2
  404086:	xor    r9d,edx
  404089:	xor    esi,r8d
  40408c:	add    r9d,ecx
  40408f:	rorx   ecx,edi,0x1b
  404095:	add    r9d,ecx
  404098:	mov    ecx,esi
  40409a:	mov    esi,DWORD PTR [rsp-0x4c]
  40409e:	and    ecx,edi
  4040a0:	rorx   edi,edi,0x2
  4040a6:	xor    ecx,eax
  4040a8:	lea    edx,[rdx+rsi*1+0x5a827999]
  4040af:	mov    esi,r14d
  4040b2:	mov    r14d,r8d
  4040b5:	xor    esi,ebp
  4040b7:	xor    r14d,edi
  4040ba:	add    ecx,edx
  4040bc:	rorx   edx,r9d,0x1b
  4040c2:	add    ecx,edx
  4040c4:	mov    edx,esi
  4040c6:	xor    edx,r10d
  4040c9:	xor    edx,ebx
  4040cb:	rorx   esi,edx,0x1f
  4040d1:	mov    edx,r14d
  4040d4:	mov    r14d,DWORD PTR [rsp-0x44]
  4040d9:	and    edx,r9d
  4040dc:	lea    eax,[rax+rsi*1+0x5a827999]
  4040e3:	mov    DWORD PTR [rsp-0x48],esi
  4040e7:	xor    edx,r8d
  4040ea:	rorx   esi,r9d,0x2
  4040f0:	mov    r9d,edi
  4040f3:	add    edx,eax
  4040f5:	rorx   eax,ecx,0x1b
  4040fb:	xor    r14d,r12d
  4040fe:	add    edx,eax
  404100:	mov    eax,DWORD PTR [rsp-0x34]
  404104:	xor    r9d,esi
  404107:	xor    eax,r14d
  40410a:	xor    eax,r11d
  40410d:	rorx   r14d,eax,0x1f
  404113:	mov    eax,r9d
  404116:	and    eax,ecx
  404118:	lea    r8d,[r8+r14*1+0x5a827999]
  404120:	rorx   ecx,ecx,0x2
  404126:	xor    eax,edi
  404128:	mov    DWORD PTR [rsp-0x44],r14d
  40412d:	add    eax,r8d
  404130:	rorx   r8d,edx,0x1b
  404136:	add    eax,r8d
  404139:	mov    r8d,DWORD PTR [rsp-0x30]
  40413e:	xor    ebp,r13d
  404141:	xor    r12d,r15d
  404144:	xor    r8d,ebp
  404147:	xor    r8d,DWORD PTR [rsp-0x4c]
  40414c:	mov    ebp,esi
  40414e:	xor    ebp,ecx
  404150:	mov    r14d,ebp
  404153:	mov    ebp,ecx
  404155:	and    r14d,edx
  404158:	rorx   edx,edx,0x2
  40415e:	rorx   r9d,r8d,0x1f
  404164:	xor    r14d,esi
  404167:	xor    ebp,edx
  404169:	lea    edi,[rdi+r9*1+0x5a827999]
  404171:	and    ebp,eax
  404173:	mov    DWORD PTR [rsp-0x38],r9d
  404178:	xor    ebp,ecx
  40417a:	mov    r9d,DWORD PTR [rsp-0x40]
  40417f:	add    r14d,edi
  404182:	rorx   edi,eax,0x1b
  404188:	rorx   eax,eax,0x2
  40418e:	add    r14d,edi
  404191:	mov    edi,DWORD PTR [rsp-0x2c]
  404195:	xor    r13d,r9d
  404198:	xor    r9d,r10d
  40419b:	xor    edi,r12d
  40419e:	xor    edi,DWORD PTR [rsp-0x48]
  4041a2:	mov    r12d,edx
  4041a5:	xor    r12d,eax
  4041a8:	rorx   edi,edi,0x1f
  4041ae:	lea    esi,[rsi+rdi*1+0x5a827999]
  4041b5:	add    ebp,esi
  4041b7:	rorx   esi,r14d,0x1b
  4041bd:	add    ebp,esi
  4041bf:	mov    esi,DWORD PTR [rsp-0x28]
  4041c3:	xor    esi,r13d
  4041c6:	xor    esi,DWORD PTR [rsp-0x44]
  4041ca:	mov    r13d,r12d
  4041cd:	xor    r13d,r14d
  4041d0:	mov    r12d,eax
  4041d3:	rorx   r14d,r14d,0x2
  4041d9:	xor    r12d,r14d
  4041dc:	xor    r12d,ebp
  4041df:	rorx   r8d,esi,0x1f
  4041e5:	mov    DWORD PTR [rsp-0x40],r8d
  4041ea:	lea    ecx,[rcx+r8*1+0x6ed9eba1]
  4041f2:	mov    r8d,DWORD PTR [rsp-0x3c]
  4041f7:	add    r13d,ecx
  4041fa:	rorx   ecx,ebp,0x1b
  404200:	rorx   ebp,ebp,0x2
  404206:	xor    r15d,r8d
  404209:	add    r13d,ecx
  40420c:	mov    ecx,r15d
  40420f:	mov    r15d,r14d
  404212:	xor    ecx,ebx
  404214:	xor    ecx,DWORD PTR [rsp-0x38]
  404218:	rorx   ecx,ecx,0x1f
  40421e:	lea    edx,[rdx+rcx*1+0x6ed9eba1]
  404225:	mov    esi,ecx
  404227:	add    r12d,edx
  40422a:	rorx   edx,r13d,0x1b
  404230:	add    r12d,edx
  404233:	mov    edx,r9d
  404236:	mov    r9d,r8d
  404239:	xor    edx,r11d
  40423c:	mov    r8d,DWORD PTR [rsp-0x30]
  404241:	xor    edx,edi
  404243:	xor    r15d,ebp
  404246:	rorx   edx,edx,0x1f
  40424c:	xor    r15d,r13d
  40424f:	rorx   r13d,r13d,0x2
  404255:	lea    eax,[rax+rdx*1+0x6ed9eba1]
  40425c:	mov    DWORD PTR [rsp-0x3c],edx
  404260:	mov    edx,DWORD PTR [rsp-0x34]
  404264:	xor    r10d,r8d
  404267:	mov    DWORD PTR [rsp-0x34],esi
  40426b:	add    r15d,eax
  40426e:	rorx   eax,r12d,0x1b
  404274:	add    r15d,eax
  404277:	mov    eax,DWORD PTR [rsp-0x4c]
  40427b:	xor    r9d,edx
  40427e:	xor    eax,r9d
  404281:	xor    eax,DWORD PTR [rsp-0x40]
  404285:	mov    r9d,ebp
  404288:	xor    r9d,r13d
  40428b:	xor    r9d,r12d
  40428e:	rorx   r12d,r12d,0x2
  404294:	rorx   eax,eax,0x1f
  40429a:	lea    r14d,[r14+rax*1+0x6ed9eba1]
  4042a2:	add    r9d,r14d
  4042a5:	rorx   r14d,r15d,0x1b
  4042ab:	add    r9d,r14d
  4042ae:	mov    r14d,DWORD PTR [rsp-0x48]
  4042b3:	xor    r14d,r10d
  4042b6:	mov    r10d,r13d
  4042b9:	xor    r14d,esi
  4042bc:	xor    r10d,r12d
  4042bf:	mov    esi,DWORD PTR [rsp-0x2c]
  4042c3:	rorx   r14d,r14d,0x1f
  4042c9:	mov    ecx,r14d
  4042cc:	mov    r14d,r10d
  4042cf:	lea    ebp,[rbp+rcx*1+0x6ed9eba1]
  4042d6:	xor    r14d,r15d
  4042d9:	rorx   r15d,r15d,0x2
  4042df:	add    r14d,ebp
  4042e2:	rorx   ebp,r9d,0x1b
  4042e8:	add    r14d,ebp
  4042eb:	mov    ebp,edx
  4042ed:	xor    ebp,esi
  4042ef:	xor    ebp,DWORD PTR [rsp-0x44]
  4042f3:	xor    ebp,DWORD PTR [rsp-0x3c]
  4042f7:	rorx   ebp,ebp,0x1f
  4042fd:	mov    edx,ebp
  4042ff:	mov    ebp,r12d
  404302:	xor    ebp,r15d
  404305:	lea    r13d,[r13+rdx*1+0x6ed9eba1]
  40430d:	xor    ebp,r9d
  404310:	rorx   r9d,r9d,0x2
  404316:	add    r13d,ebp
  404319:	rorx   ebp,r14d,0x1b
  40431f:	add    r13d,ebp
  404322:	mov    ebp,r8d
  404325:	mov    r8d,DWORD PTR [rsp-0x28]
  40432a:	xor    ebp,r8d
  40432d:	xor    ebp,DWORD PTR [rsp-0x38]
  404331:	xor    ebp,eax
  404333:	rorx   ebp,ebp,0x1f
  404339:	mov    r10d,ebp
  40433c:	mov    ebp,r15d
  40433f:	xor    ebp,r9d
  404342:	lea    r12d,[r12+r10*1+0x6ed9eba1]
  40434a:	mov    DWORD PTR [rsp-0x28],r10d
  40434f:	xor    ebp,r14d
  404352:	rorx   r14d,r14d,0x2
  404358:	add    ebp,r12d
  40435b:	rorx   r12d,r13d,0x1b
  404361:	add    r12d,ebp
  404364:	mov    ebp,esi
  404366:	xor    ebp,ebx
  404368:	xor    ebx,DWORD PTR [rsp-0x4c]
  40436c:	xor    ebp,edi
  40436e:	xor    ebx,DWORD PTR [rsp-0x34]
  404372:	xor    ebp,ecx
  404374:	rorx   ebp,ebp,0x1f
  40437a:	mov    esi,ebp
  40437c:	mov    ebp,r9d
  40437f:	xor    ebp,r14d
  404382:	lea    r15d,[r15+rsi*1+0x6ed9eba1]
  40438a:	xor    ebx,r10d
  40438d:	xor    ebp,r13d
  404390:	rorx   r13d,r13d,0x2
  404396:	mov    r10d,DWORD PTR [rsp-0x4c]
  40439b:	add    ebp,r15d
  40439e:	rorx   r15d,r12d,0x1b
  4043a4:	xor    r10d,DWORD PTR [rsp-0x44]
  4043a9:	add    ebp,r15d
  4043ac:	mov    r15d,r8d
  4043af:	mov    DWORD PTR [rsp-0x4c],ecx
  4043b3:	xor    r15d,r11d
  4043b6:	xor    r15d,DWORD PTR [rsp-0x40]
  4043bb:	xor    r11d,DWORD PTR [rsp-0x48]
  4043c0:	xor    r11d,DWORD PTR [rsp-0x3c]
  4043c5:	xor    r10d,eax
  4043c8:	xor    r15d,edx
  4043cb:	rorx   r15d,r15d,0x1f
  4043d1:	xor    r11d,esi
  4043d4:	mov    r8d,r15d
  4043d7:	mov    r15d,r14d
  4043da:	xor    r15d,r13d
  4043dd:	lea    r9d,[r9+r8*1+0x6ed9eba1]
  4043e5:	xor    r10d,r8d
  4043e8:	xor    r15d,r12d
  4043eb:	rorx   r12d,r12d,0x2
  4043f1:	mov    DWORD PTR [rsp-0x24],r8d
  4043f6:	add    r9d,r15d
  4043f9:	rorx   r15d,ebp,0x1b
  4043ff:	mov    r8d,DWORD PTR [rsp-0x38]
  404404:	add    r9d,r15d
  404407:	rorx   r15d,ebx,0x1f
  40440d:	mov    ebx,r13d
  404410:	xor    ebx,r12d
  404413:	lea    r14d,[r14+r15*1+0x6ed9eba1]
  40441b:	mov    DWORD PTR [rsp-0x38],esi
  40441f:	xor    ebx,ebp
  404421:	rorx   ebp,ebp,0x2
  404427:	add    ebx,r14d
  40442a:	rorx   r14d,r9d,0x1b
  404430:	add    ebx,r14d
  404433:	rorx   r14d,r11d,0x1f
  404439:	mov    r11d,r12d
  40443c:	xor    r11d,ebp
  40443f:	lea    r13d,[r13+r14*1+0x6ed9eba1]
  404447:	xor    r11d,r9d
  40444a:	rorx   r9d,r9d,0x2
  404450:	add    r11d,r13d
  404453:	rorx   r13d,ebx,0x1b
  404459:	add    r11d,r13d
  40445c:	rorx   r13d,r10d,0x1f
  404462:	mov    r10d,ebp
  404465:	xor    r10d,r9d
  404468:	lea    r12d,[r12+r13*1+0x6ed9eba1]
  404470:	xor    r10d,ebx
  404473:	rorx   ebx,ebx,0x2
  404479:	add    r10d,r12d
  40447c:	rorx   r12d,r11d,0x1b
  404482:	add    r10d,r12d
  404485:	mov    r12d,DWORD PTR [rsp-0x48]
  40448a:	mov    DWORD PTR [rsp-0x48],edx
  40448e:	xor    r12d,r8d
  404491:	xor    r8d,DWORD PTR [rsp-0x40]
  404496:	xor    r12d,ecx
  404499:	xor    r8d,DWORD PTR [rsp-0x28]
  40449e:	xor    r12d,r15d
  4044a1:	rorx   r12d,r12d,0x1f
  4044a7:	mov    ecx,r12d
  4044aa:	mov    r12d,r9d
  4044ad:	xor    r12d,ebx
  4044b0:	lea    ebp,[rbp+rcx*1+0x6ed9eba1]
  4044b7:	xor    r8d,r13d
  4044ba:	xor    r12d,r11d
  4044bd:	rorx   r11d,r11d,0x2
  4044c3:	mov    DWORD PTR [rsp-0x20],ecx
  4044c7:	add    ebp,r12d
  4044ca:	rorx   r12d,r10d,0x1b
  4044d0:	add    ebp,r12d
  4044d3:	mov    r12d,DWORD PTR [rsp-0x44]
  4044d8:	xor    r12d,edi
  4044db:	xor    edi,DWORD PTR [rsp-0x34]
  4044df:	xor    r12d,edx
  4044e2:	xor    r12d,r14d
  4044e5:	rorx   r12d,r12d,0x1f
  4044eb:	mov    edx,r12d
  4044ee:	mov    r12d,ebx
  4044f1:	xor    edi,esi
  4044f3:	xor    r12d,r11d
  4044f6:	lea    r9d,[r9+rdx*1+0x6ed9eba1]
  4044fe:	xor    edi,ecx
  404500:	xor    r12d,r10d
  404503:	rorx   r10d,r10d,0x2
  404509:	mov    ecx,DWORD PTR [rsp-0x34]
  40450d:	add    r9d,r12d
  404510:	rorx   r12d,ebp,0x1b
  404516:	mov    esi,r10d
  404519:	add    r9d,r12d
  40451c:	rorx   r12d,r8d,0x1f
  404522:	mov    r8d,r11d
  404525:	xor    r8d,r10d
  404528:	lea    ebx,[rbx+r12*1+0x6ed9eba1]
  404530:	mov    DWORD PTR [rsp-0x30],edx
  404534:	xor    r8d,ebp
  404537:	rorx   ebp,ebp,0x2
  40453d:	add    r8d,ebx
  404540:	rorx   ebx,r9d,0x1b
  404546:	xor    esi,ebp
  404548:	add    r8d,ebx
  40454b:	rorx   ebx,edi,0x1f
  404551:	mov    edi,esi
  404553:	lea    r11d,[r11+rbx*1+0x6ed9eba1]
  40455b:	xor    edi,r9d
  40455e:	mov    esi,DWORD PTR [rsp-0x40]
  404562:	rorx   r9d,r9d,0x2
  404568:	add    edi,r11d
  40456b:	rorx   r11d,r8d,0x1b
  404571:	add    edi,r11d
  404574:	xor    esi,DWORD PTR [rsp-0x3c]
  404578:	xor    ecx,eax
  40457a:	xor    esi,DWORD PTR [rsp-0x24]
  40457e:	xor    ecx,r15d
  404581:	xor    ecx,r12d
  404584:	xor    esi,edx
  404586:	mov    edx,DWORD PTR [rsp-0x3c]
  40458a:	rorx   r11d,esi,0x1f
  404590:	mov    esi,ebp
  404592:	xor    esi,r9d
  404595:	lea    r10d,[r10+r11*1+0x6ed9eba1]
  40459d:	xor    esi,r8d
  4045a0:	rorx   r8d,r8d,0x2
  4045a6:	add    esi,r10d
  4045a9:	rorx   r10d,edi,0x1b
  4045af:	add    esi,r10d
  4045b2:	rorx   r10d,ecx,0x1f
  4045b8:	mov    ecx,r9d
  4045bb:	xor    ecx,r8d
  4045be:	mov    DWORD PTR [rsp-0x34],r10d
  4045c3:	lea    r10d,[rbp+r10*1+0x6ed9eba1]
  4045cb:	xor    ecx,edi
  4045cd:	rorx   edi,edi,0x2
  4045d3:	add    ecx,r10d
  4045d6:	rorx   r10d,esi,0x1b
  4045dc:	add    ecx,r10d
  4045df:	mov    r10d,DWORD PTR [rsp-0x4c]
  4045e4:	xor    edx,r10d
  4045e7:	xor    edx,r14d
  4045ea:	xor    edx,ebx
  4045ec:	rorx   ebp,edx,0x1f
  4045f2:	mov    edx,r8d
  4045f5:	lea    r9d,[r9+rbp*1+0x6ed9eba1]
  4045fd:	mov    DWORD PTR [rsp-0x2c],ebp
  404601:	mov    ebp,DWORD PTR [rsp-0x48]
  404605:	xor    edx,edi
  404607:	xor    edx,esi
  404609:	rorx   esi,esi,0x2
  40460f:	xor    eax,ebp
  404611:	add    edx,r9d
  404614:	rorx   r9d,ecx,0x1b
  40461a:	xor    eax,r13d
  40461d:	add    edx,r9d
  404620:	xor    eax,r11d
  404623:	rorx   r9d,eax,0x1f
  404629:	mov    eax,edi
  40462b:	xor    eax,esi
  40462d:	lea    r8d,[r8+r9*1+0x6ed9eba1]
  404635:	mov    DWORD PTR [rsp-0x4c],r9d
  40463a:	xor    eax,ecx
  40463c:	rorx   ecx,ecx,0x2
  404642:	add    eax,r8d
  404645:	rorx   r8d,edx,0x1b
  40464b:	add    eax,r8d
  40464e:	mov    r8d,r10d
  404651:	mov    r10d,DWORD PTR [rsp-0x28]
  404656:	xor    r8d,r10d
  404659:	xor    r8d,DWORD PTR [rsp-0x20]
  40465e:	xor    r8d,DWORD PTR [rsp-0x34]
  404663:	rorx   r8d,r8d,0x1f
  404669:	mov    DWORD PTR [rsp-0x48],r8d
  40466e:	mov    r8d,edx
  404671:	or     r8d,ecx
  404674:	mov    r9d,r8d
  404677:	mov    r8d,edx
  40467a:	rorx   edx,edx,0x2
  404680:	and    r9d,esi
  404683:	and    r8d,ecx
  404686:	xor    ebp,DWORD PTR [rsp-0x38]
  40468a:	or     r8d,r9d
  40468d:	mov    r9d,DWORD PTR [rsp-0x48]
  404692:	xor    ebp,DWORD PTR [rsp-0x30]
  404696:	xor    ebp,DWORD PTR [rsp-0x2c]
  40469a:	lea    r9d,[rdi+r9*1-0x70e44324]
  4046a2:	mov    edi,eax
  4046a4:	and    edi,edx
  4046a6:	add    r8d,r9d
  4046a9:	rorx   r9d,eax,0x1b
  4046af:	rorx   ebp,ebp,0x1f
  4046b5:	add    r8d,r9d
  4046b8:	mov    r9d,eax
  4046bb:	mov    DWORD PTR [rsp-0x44],ebp
  4046bf:	or     r9d,edx
  4046c2:	rorx   eax,eax,0x2
  4046c8:	and    r9d,ecx
  4046cb:	or     edi,r9d
  4046ce:	lea    r9d,[rsi+rbp*1-0x70e44324]
  4046d6:	mov    ebp,r10d
  4046d9:	mov    r10d,DWORD PTR [rsp-0x24]
  4046de:	add    edi,r9d
  4046e1:	rorx   r9d,r8d,0x1b
  4046e7:	add    edi,r9d
  4046ea:	xor    ebp,r10d
  4046ed:	xor    ebp,r12d
  4046f0:	xor    ebp,DWORD PTR [rsp-0x4c]
  4046f4:	rorx   esi,ebp,0x1f
  4046fa:	mov    ebp,esi
  4046fc:	mov    esi,r8d
  4046ff:	or     esi,eax
  404701:	mov    DWORD PTR [rsp-0x40],ebp
  404705:	mov    r9d,esi
  404708:	mov    esi,r8d
  40470b:	and    r9d,edx
  40470e:	and    esi,eax
  404710:	or     esi,r9d
  404713:	lea    r9d,[rcx+rbp*1-0x70e44324]
  40471b:	mov    ebp,DWORD PTR [rsp-0x38]
  40471f:	rorx   ecx,r8d,0x2
  404725:	add    esi,r9d
  404728:	rorx   r9d,edi,0x1b
  40472e:	xor    ebp,r15d
  404731:	add    esi,r9d
  404734:	xor    ebp,ebx
  404736:	xor    ebp,DWORD PTR [rsp-0x48]
  40473a:	rorx   r8d,ebp,0x1f
  404740:	mov    ebp,r8d
  404743:	mov    r8d,edi
  404746:	or     r8d,ecx
  404749:	lea    edx,[rdx+rbp*1-0x70e44324]
  404750:	mov    DWORD PTR [rsp-0x3c],ebp
  404754:	mov    r9d,r8d
  404757:	mov    r8d,edi
  40475a:	rorx   edi,edi,0x2
  404760:	and    r9d,eax
  404763:	and    r8d,ecx
  404766:	or     r8d,r9d
  404769:	add    r8d,edx
  40476c:	rorx   edx,esi,0x1b
  404772:	add    edx,r8d
  404775:	mov    r8d,r10d
  404778:	xor    r8d,r14d
  40477b:	xor    r15d,r13d
  40477e:	xor    r15d,DWORD PTR [rsp-0x34]
  404783:	xor    r8d,r11d
  404786:	xor    r8d,DWORD PTR [rsp-0x44]
  40478b:	xor    r15d,DWORD PTR [rsp-0x40]
  404790:	xor    r13d,DWORD PTR [rsp-0x30]
  404795:	rorx   r10d,r8d,0x1f
  40479b:	mov    r8d,esi
  40479e:	rorx   r15d,r15d,0x1f
  4047a4:	or     r8d,edi
  4047a7:	lea    eax,[rax+r10*1-0x70e44324]
  4047af:	mov    DWORD PTR [rsp-0x38],r10d
  4047b4:	mov    r9d,r8d
  4047b7:	mov    r8d,esi
  4047ba:	mov    r10d,DWORD PTR [rsp-0x20]
  4047bf:	and    r9d,ecx
  4047c2:	and    r8d,edi
  4047c5:	or     r8d,r9d
  4047c8:	rorx   r9d,esi,0x2
  4047ce:	mov    esi,edx
  4047d0:	add    r8d,eax
  4047d3:	rorx   eax,edx,0x1b
  4047d9:	or     esi,r9d
  4047dc:	add    eax,r8d
  4047df:	mov    r8d,edx
  4047e2:	and    esi,edi
  4047e4:	and    r8d,r9d
  4047e7:	xor    r14d,r10d
  4047ea:	mov    ebp,r8d
  4047ed:	rorx   r8d,edx,0x2
  4047f3:	or     ebp,esi
  4047f5:	lea    esi,[rcx+r15*1-0x70e44324]
  4047fd:	rorx   ecx,eax,0x1b
  404803:	add    ebp,esi
  404805:	add    ebp,ecx
  404807:	mov    ecx,DWORD PTR [rsp-0x2c]
  40480b:	xor    ecx,r14d
  40480e:	mov    r14d,eax
  404811:	xor    ecx,DWORD PTR [rsp-0x3c]
  404815:	or     r14d,r8d
  404818:	mov    edx,r14d
  40481b:	mov    r14d,eax
  40481e:	and    r14d,r8d
  404821:	and    edx,r9d
  404824:	mov    esi,r14d
  404827:	rorx   r14d,eax,0x2
  40482d:	mov    eax,DWORD PTR [rsp-0x4c]
  404831:	rorx   ecx,ecx,0x1f
  404837:	or     esi,edx
  404839:	lea    edi,[rdi+rcx*1-0x70e44324]
  404840:	mov    DWORD PTR [rsp-0x28],ecx
  404844:	mov    ecx,r10d
  404847:	xor    eax,r13d
  40484a:	xor    eax,DWORD PTR [rsp-0x38]
  40484e:	add    esi,edi
  404850:	rorx   edi,ebp,0x1b
  404856:	add    edi,esi
  404858:	mov    esi,ebp
  40485a:	or     esi,r14d
  40485d:	mov    r10d,edi
  404860:	rorx   r13d,eax,0x1f
  404866:	mov    eax,esi
  404868:	mov    esi,ebp
  40486a:	and    eax,r8d
  40486d:	and    esi,r14d
  404870:	xor    ecx,r12d
  404873:	xor    ecx,DWORD PTR [rsp-0x48]
  404877:	mov    DWORD PTR [rsp-0x24],r13d
  40487c:	lea    r9d,[r9+r13*1-0x70e44324]
  404884:	rorx   r13d,ebp,0x2
  40488a:	mov    edx,esi
  40488c:	rorx   esi,edi,0x2
  404892:	or     r10d,r13d
  404895:	or     edx,eax
  404897:	mov    eax,r10d
  40489a:	mov    r10d,edi
  40489d:	add    edx,r9d
  4048a0:	xor    ecx,r15d
  4048a3:	and    r10d,r13d
  4048a6:	rorx   r9d,edi,0x1b
  4048ac:	add    r9d,edx
  4048af:	and    eax,r14d
  4048b2:	rorx   edx,ecx,0x1f
  4048b8:	mov    ebp,r10d
  4048bb:	mov    DWORD PTR [rsp-0x20],edx
  4048bf:	mov    r10d,r9d
  4048c2:	or     ebp,eax
  4048c4:	lea    eax,[r8+rdx*1-0x70e44324]
  4048cc:	mov    edx,DWORD PTR [rsp-0x30]
  4048d0:	or     r10d,esi
  4048d3:	add    ebp,eax
  4048d5:	rorx   eax,r9d,0x1b
  4048db:	xor    edx,ebx
  4048dd:	xor    edx,DWORD PTR [rsp-0x44]
  4048e1:	add    ebp,eax
  4048e3:	xor    edx,DWORD PTR [rsp-0x28]
  4048e7:	rorx   r8d,edx,0x1f
  4048ed:	mov    edx,r10d
  4048f0:	mov    r10d,r9d
  4048f3:	and    r10d,esi
  4048f6:	and    edx,r13d
  4048f9:	mov    DWORD PTR [rsp-0x30],r8d
  4048fe:	mov    eax,r10d
  404901:	or     eax,edx
  404903:	lea    edx,[r14+r8*1-0x70e44324]
  40490b:	mov    r14d,r12d
  40490e:	xor    r14d,r11d
  404911:	mov    r12d,DWORD PTR [rsp-0x2c]
  404916:	add    eax,edx
  404918:	rorx   edx,ebp,0x1b
  40491e:	add    eax,edx
  404920:	rorx   edx,r9d,0x2
  404926:	mov    r9d,DWORD PTR [rsp-0x40]
  40492b:	xor    r9d,r14d
  40492e:	mov    r14d,ebp
  404931:	xor    r9d,DWORD PTR [rsp-0x24]
  404936:	or     r14d,edx
  404939:	mov    ecx,r14d
  40493c:	mov    r14d,ebp
  40493f:	rorx   ebp,ebp,0x2
  404945:	and    r14d,edx
  404948:	and    ecx,esi
  40494a:	rorx   r10d,r9d,0x1f
  404950:	mov    r8d,r14d
  404953:	mov    r14d,ebx
  404956:	or     r8d,ecx
  404959:	lea    ecx,[r13+r10*1-0x70e44324]
  404961:	mov    r13d,DWORD PTR [rsp-0x34]
  404966:	mov    r9d,eax
  404969:	add    r8d,ecx
  40496c:	rorx   ecx,eax,0x1b
  404972:	add    ecx,r8d
  404975:	mov    r8d,DWORD PTR [rsp-0x3c]
  40497a:	xor    r14d,r13d
  40497d:	xor    r8d,r14d
  404980:	xor    r8d,DWORD PTR [rsp-0x20]
  404985:	mov    r14d,eax
  404988:	or     r14d,ebp
  40498b:	and    r9d,ebp
  40498e:	xor    r11d,r12d
  404991:	rorx   eax,eax,0x2
  404997:	rorx   edi,r8d,0x1f
  40499d:	rorx   r8d,ecx,0x2
  4049a3:	mov    ebx,edi
  4049a5:	mov    edi,r14d
  4049a8:	and    edi,edx
  4049aa:	mov    DWORD PTR [rsp-0x2c],ebx
  4049ae:	or     r9d,edi
  4049b1:	lea    edi,[rsi+rbx*1-0x70e44324]
  4049b8:	rorx   esi,ecx,0x1b
  4049be:	add    r9d,edi
  4049c1:	mov    edi,DWORD PTR [rsp-0x38]
  4049c5:	add    r9d,esi
  4049c8:	mov    esi,ecx
  4049ca:	or     esi,eax
  4049cc:	xor    edi,r11d
  4049cf:	xor    edi,DWORD PTR [rsp-0x30]
  4049d3:	mov    r11d,ecx
  4049d6:	and    r11d,eax
  4049d9:	and    esi,ebp
  4049db:	rorx   r14d,edi,0x1f
  4049e1:	mov    edi,r11d
  4049e4:	or     edi,esi
  4049e6:	lea    esi,[rdx+r14*1-0x70e44324]
  4049ee:	rorx   edx,r9d,0x1b
  4049f4:	add    edi,esi
  4049f6:	mov    esi,DWORD PTR [rsp-0x4c]
  4049fa:	add    edi,edx
  4049fc:	mov    r11d,edi
  4049ff:	xor    esi,r13d
  404a02:	mov    r13d,r9d
  404a05:	or     r13d,r8d
  404a08:	xor    esi,r15d
  404a0b:	mov    ecx,r13d
  404a0e:	mov    r13d,r9d
  404a11:	xor    esi,r10d
  404a14:	and    r13d,r8d
  404a17:	and    ecx,eax
  404a19:	rorx   r9d,r9d,0x2
  404a1f:	mov    edx,r13d
  404a22:	rorx   esi,esi,0x1f
  404a28:	or     r11d,r9d
  404a2b:	or     edx,ecx
  404a2d:	mov    ecx,r12d
  404a30:	mov    r12d,DWORD PTR [rsp-0x48]
  404a35:	lea    ebp,[rbp+rsi*1-0x70e44324]
  404a3c:	mov    DWORD PTR [rsp-0x34],esi
  404a40:	xor    ecx,r12d
  404a43:	xor    ecx,DWORD PTR [rsp-0x28]
  404a47:	add    edx,ebp
  404a49:	rorx   ebp,edi,0x1b
  404a4f:	add    ebp,edx
  404a51:	mov    edx,DWORD PTR [rsp-0x4c]
  404a55:	xor    ecx,ebx
  404a57:	mov    ebx,r11d
  404a5a:	mov    r11d,edi
  404a5d:	rorx   r13d,ecx,0x1f
  404a63:	and    ebx,r8d
  404a66:	and    r11d,r9d
  404a69:	or     r11d,ebx
  404a6c:	lea    ebx,[rax+r13*1-0x70e44324]
  404a74:	xor    edx,DWORD PTR [rsp-0x44]
  404a78:	rorx   edi,edi,0x2
  404a7e:	xor    edx,DWORD PTR [rsp-0x24]
  404a82:	add    r11d,ebx
  404a85:	rorx   ebx,ebp,0x1b
  404a8b:	add    ebx,r11d
  404a8e:	mov    r11d,ebp
  404a91:	or     r11d,edi
  404a94:	mov    eax,r11d
  404a97:	mov    r11d,ebp
  404a9a:	xor    edx,r14d
  404a9d:	and    r11d,edi
  404aa0:	rorx   ecx,edx,0x1f
  404aa6:	and    eax,r9d
  404aa9:	mov    esi,r11d
  404aac:	mov    r11d,DWORD PTR [rsp-0x40]
  404ab1:	rorx   edx,ebp,0x2
  404ab7:	or     esi,eax
  404ab9:	lea    eax,[r8+rcx*1-0x70e44324]
  404ac1:	mov    ebp,ebx
  404ac3:	or     ebp,edx
  404ac5:	mov    DWORD PTR [rsp-0x4c],ecx
  404ac9:	xor    r11d,r12d
  404acc:	xor    r11d,DWORD PTR [rsp-0x20]
  404ad1:	add    esi,eax
  404ad3:	xor    r11d,DWORD PTR [rsp-0x34]
  404ad8:	rorx   eax,ebx,0x1b
  404ade:	add    esi,eax
  404ae0:	mov    eax,ebp
  404ae2:	mov    ebp,ebx
  404ae4:	and    ebp,edx
  404ae6:	and    eax,edi
  404ae8:	mov    r8d,esi
  404aeb:	mov    ecx,ebp
  404aed:	mov    ebp,DWORD PTR [rsp-0x44]
  404af1:	xor    ebp,DWORD PTR [rsp-0x3c]
  404af5:	rorx   r12d,r11d,0x1f
  404afb:	xor    ebp,DWORD PTR [rsp-0x30]
  404aff:	or     ecx,eax
  404b01:	lea    eax,[r9+r12*1-0x70e44324]
  404b09:	rorx   r11d,ebx,0x2
  404b0f:	mov    r9d,esi
  404b12:	and    r9d,r11d
  404b15:	or     r8d,r11d
  404b18:	add    ecx,eax
  404b1a:	rorx   eax,esi,0x1b
  404b20:	and    r8d,edx
  404b23:	add    ecx,eax
  404b25:	xor    ebp,r13d
  404b28:	mov    eax,r9d
  404b2b:	mov    r9d,DWORD PTR [rsp-0x40]
  404b30:	xor    r9d,DWORD PTR [rsp-0x38]
  404b35:	rorx   ebp,ebp,0x1f
  404b3b:	or     eax,r8d
  404b3e:	lea    r8d,[rdi+rbp*1-0x70e44324]
  404b46:	rorx   edi,ecx,0x1b
  404b4c:	rorx   esi,esi,0x2
  404b52:	add    eax,r8d
  404b55:	mov    r8d,ecx
  404b58:	mov    ebx,r9d
  404b5b:	add    eax,edi
  404b5d:	xor    ebx,r10d
  404b60:	xor    ebx,DWORD PTR [rsp-0x4c]
  404b64:	or     r8d,esi
  404b67:	and    r8d,r11d
  404b6a:	rorx   edi,ebx,0x1f
  404b70:	mov    ebx,ecx
  404b72:	rorx   ecx,ecx,0x2
  404b78:	and    ebx,esi
  404b7a:	mov    r9d,edi
  404b7d:	mov    edi,ebx
  404b7f:	mov    ebx,r9d
  404b82:	or     edi,r8d
  404b85:	lea    r8d,[rdx+r9*1-0x70e44324]
  404b8d:	rorx   edx,eax,0x1b
  404b93:	add    edi,r8d
  404b96:	mov    r8d,DWORD PTR [rsp-0x3c]
  404b9b:	add    edi,edx
  404b9d:	xor    r8d,r15d
  404ba0:	xor    r8d,DWORD PTR [rsp-0x2c]
  404ba5:	xor    r8d,r12d
  404ba8:	rorx   edx,r8d,0x1f
  404bae:	mov    r8d,eax
  404bb1:	mov    r9d,edx
  404bb4:	or     r8d,ecx
  404bb7:	mov    edx,eax
  404bb9:	and    r8d,esi
  404bbc:	and    edx,ecx
  404bbe:	mov    DWORD PTR [rsp-0x48],r9d
  404bc3:	or     edx,r8d
  404bc6:	lea    r8d,[r11+r9*1-0x70e44324]
  404bce:	rorx   eax,eax,0x2
  404bd4:	mov    r9d,ecx
  404bd7:	add    edx,r8d
  404bda:	rorx   r8d,edi,0x1b
  404be0:	xor    r9d,eax
  404be3:	add    edx,r8d
  404be6:	mov    r8d,DWORD PTR [rsp-0x38]
  404beb:	mov    r11d,DWORD PTR [rsp-0x28]
  404bf0:	xor    r9d,edi
  404bf3:	mov    DWORD PTR [rsp-0x3c],ebx
  404bf7:	rorx   edi,edi,0x2
  404bfd:	xor    r8d,r11d
  404c00:	xor    r8d,r14d
  404c03:	xor    r8d,ebp
  404c06:	rorx   r8d,r8d,0x1f
  404c0c:	lea    esi,[rsi+r8*1-0x359d3e2a]
  404c14:	mov    DWORD PTR [rsp-0x44],r8d
  404c19:	add    r9d,esi
  404c1c:	rorx   esi,edx,0x1b
  404c22:	add    r9d,esi
  404c25:	mov    esi,r15d
  404c28:	mov    r15d,DWORD PTR [rsp-0x24]
  404c2d:	xor    esi,r15d
  404c30:	xor    esi,DWORD PTR [rsp-0x34]
  404c34:	xor    esi,ebx
  404c36:	mov    ebx,eax
  404c38:	xor    ebx,edi
  404c3a:	rorx   esi,esi,0x1f
  404c40:	lea    ecx,[rcx+rsi*1-0x359d3e2a]
  404c47:	mov    r8d,ebx
  404c4a:	mov    ebx,edi
  404c4c:	xor    r8d,edx
  404c4f:	rorx   edx,edx,0x2
  404c55:	mov    DWORD PTR [rsp-0x40],esi
  404c59:	add    r8d,ecx
  404c5c:	rorx   ecx,r9d,0x1b
  404c62:	mov    esi,r15d
  404c65:	add    r8d,ecx
  404c68:	mov    ecx,r11d
  404c6b:	mov    r11d,DWORD PTR [rsp-0x20]
  404c70:	mov    r15d,DWORD PTR [rsp-0x30]
  404c75:	xor    ecx,r11d
  404c78:	xor    ecx,r13d
  404c7b:	xor    ecx,DWORD PTR [rsp-0x48]
  404c7f:	xor    ebx,edx
  404c81:	xor    ebx,r9d
  404c84:	xor    esi,r15d
  404c87:	rorx   r9d,r9d,0x2
  404c8d:	rorx   ecx,ecx,0x1f
  404c93:	lea    eax,[rax+rcx*1-0x359d3e2a]
  404c9a:	mov    DWORD PTR [rsp-0x38],ecx
  404c9e:	add    ebx,eax
  404ca0:	rorx   eax,r8d,0x1b
  404ca6:	add    ebx,eax
  404ca8:	mov    eax,DWORD PTR [rsp-0x4c]
  404cac:	xor    eax,esi
  404cae:	xor    eax,DWORD PTR [rsp-0x44]
  404cb2:	mov    esi,edx
  404cb4:	xor    esi,r9d
  404cb7:	xor    esi,r8d
  404cba:	rorx   r8d,r8d,0x2
  404cc0:	rorx   eax,eax,0x1f
  404cc6:	lea    ecx,[rdi+rax*1-0x359d3e2a]
  404ccd:	add    esi,ecx
  404ccf:	rorx   ecx,ebx,0x1b
  404cd5:	add    esi,ecx
  404cd7:	mov    ecx,r11d
  404cda:	xor    ecx,r10d
  404cdd:	xor    r10d,r14d
  404ce0:	xor    ecx,r12d
  404ce3:	xor    ecx,DWORD PTR [rsp-0x40]
  404ce7:	rorx   r11d,ecx,0x1f
  404ced:	mov    ecx,r9d
  404cf0:	xor    ecx,r8d
  404cf3:	lea    edx,[rdx+r11*1-0x359d3e2a]
  404cfb:	mov    DWORD PTR [rsp-0x30],r11d
  404d00:	xor    ecx,ebx
  404d02:	rorx   ebx,ebx,0x2
  404d08:	add    ecx,edx
  404d0a:	rorx   edx,esi,0x1b
  404d10:	add    ecx,edx
  404d12:	mov    edx,r15d
  404d15:	mov    r15d,DWORD PTR [rsp-0x2c]
  404d1a:	xor    edx,r15d
  404d1d:	xor    edx,ebp
  404d1f:	xor    edx,DWORD PTR [rsp-0x38]
  404d23:	rorx   edx,edx,0x1f
  404d29:	mov    r11d,edx
  404d2c:	mov    edx,r8d
  404d2f:	lea    edi,[r9+r11*1-0x359d3e2a]
  404d37:	mov    r9d,DWORD PTR [rsp-0x3c]
  404d3c:	xor    edx,ebx
  404d3e:	xor    edx,esi
  404d40:	rorx   esi,esi,0x2
  404d46:	mov    DWORD PTR [rsp-0x2c],r11d
  404d4b:	add    edx,edi
  404d4d:	rorx   edi,ecx,0x1b
  404d53:	xor    r9d,r10d
  404d56:	mov    r10d,ebx
  404d59:	add    edx,edi
  404d5b:	xor    r9d,eax
  404d5e:	xor    r10d,esi
  404d61:	rorx   r9d,r9d,0x1f
  404d67:	mov    r11d,r10d
  404d6a:	mov    r10d,esi
  404d6d:	lea    edi,[r8+r9*1-0x359d3e2a]
  404d75:	mov    r8d,r15d
  404d78:	mov    r15d,DWORD PTR [rsp-0x34]
  404d7d:	xor    r11d,ecx
  404d80:	rorx   ecx,ecx,0x2
  404d86:	add    r11d,edi
  404d89:	rorx   edi,edx,0x1b
  404d8f:	add    r11d,edi
  404d92:	xor    r8d,r15d
  404d95:	xor    r8d,DWORD PTR [rsp-0x48]
  404d9a:	xor    r8d,DWORD PTR [rsp-0x30]
  404d9f:	xor    r10d,ecx
  404da2:	xor    r14d,r13d
  404da5:	xor    r10d,edx
  404da8:	rorx   edx,edx,0x2
  404dae:	xor    r13d,r12d
  404db1:	rorx   r8d,r8d,0x1f
  404db7:	lea    edi,[rbx+r8*1-0x359d3e2a]
  404dbf:	add    r10d,edi
  404dc2:	rorx   edi,r11d,0x1b
  404dc8:	add    r10d,edi
  404dcb:	mov    edi,DWORD PTR [rsp-0x44]
  404dcf:	xor    edi,r14d
  404dd2:	xor    edi,DWORD PTR [rsp-0x2c]
  404dd6:	mov    r14d,ecx
  404dd9:	xor    r14d,edx
  404ddc:	mov    ebx,r14d
  404ddf:	xor    ebx,r11d
  404de2:	rorx   r11d,r11d,0x2
  404de8:	rorx   edi,edi,0x1f
  404dee:	mov    r14d,r11d
  404df1:	lea    esi,[rsi+rdi*1-0x359d3e2a]
  404df8:	add    ebx,esi
  404dfa:	rorx   esi,r10d,0x1b
  404e00:	add    ebx,esi
  404e02:	mov    esi,DWORD PTR [rsp-0x4c]
  404e06:	xor    esi,r15d
  404e09:	xor    esi,DWORD PTR [rsp-0x40]
  404e0d:	mov    r15d,edx
  404e10:	xor    r15d,r11d
  404e13:	xor    r15d,r10d
  404e16:	rorx   r10d,r10d,0x2
  404e1c:	xor    r14d,r10d
  404e1f:	xor    esi,r9d
  404e22:	xor    r14d,ebx
  404e25:	rorx   esi,esi,0x1f
  404e2b:	lea    ecx,[rcx+rsi*1-0x359d3e2a]
  404e32:	add    r15d,ecx
  404e35:	rorx   ecx,ebx,0x1b
  404e3b:	rorx   ebx,ebx,0x2
  404e41:	add    r15d,ecx
  404e44:	mov    ecx,DWORD PTR [rsp-0x38]
  404e48:	xor    ecx,r13d
  404e4b:	mov    r13d,r10d
  404e4e:	xor    ecx,r8d
  404e51:	rorx   ecx,ecx,0x1f
  404e57:	lea    edx,[rdx+rcx*1-0x359d3e2a]
  404e5e:	add    r14d,edx
  404e61:	rorx   edx,r15d,0x1b
  404e67:	add    r14d,edx
  404e6a:	mov    edx,DWORD PTR [rsp-0x4c]
  404e6e:	xor    edx,ebp
  404e70:	xor    edx,eax
  404e72:	xor    edx,edi
  404e74:	xor    r13d,ebx
  404e77:	xor    r12d,DWORD PTR [rsp-0x3c]
  404e7c:	rorx   edx,edx,0x1f
  404e82:	xor    r13d,r15d
  404e85:	rorx   r15d,r15d,0x2
  404e8b:	lea    r11d,[r11+rdx*1-0x359d3e2a]
  404e93:	xor    ebp,DWORD PTR [rsp-0x48]
  404e97:	add    r13d,r11d
  404e9a:	rorx   r11d,r14d,0x1b
  404ea0:	add    r13d,r11d
  404ea3:	mov    r11d,DWORD PTR [rsp-0x30]
  404ea8:	xor    r11d,r12d
  404eab:	mov    r12d,ebx
  404eae:	xor    r11d,esi
  404eb1:	xor    r12d,r15d
  404eb4:	rorx   r11d,r11d,0x1f
  404eba:	xor    r12d,r14d
  404ebd:	rorx   r14d,r14d,0x2
  404ec3:	lea    r10d,[r10+r11*1-0x359d3e2a]
  404ecb:	add    r10d,r12d
  404ece:	rorx   r12d,r13d,0x1b
  404ed4:	add    r12d,r10d
  404ed7:	mov    r10d,DWORD PTR [rsp-0x2c]
  404edc:	xor    r10d,ebp
  404edf:	mov    ebp,r15d
  404ee2:	xor    r10d,ecx
  404ee5:	xor    ebp,r14d
  404ee8:	rorx   r10d,r10d,0x1f
  404eee:	xor    ebp,r13d
  404ef1:	rorx   r13d,r13d,0x2
  404ef7:	lea    ebx,[rbx+r10*1-0x359d3e2a]
  404eff:	add    ebx,ebp
  404f01:	rorx   ebp,r12d,0x1b
  404f07:	add    ebp,ebx
  404f09:	mov    ebx,DWORD PTR [rsp-0x3c]
  404f0d:	xor    ebx,DWORD PTR [rsp-0x44]
  404f11:	xor    r9d,ebx
  404f14:	mov    ebx,r14d
  404f17:	xor    r9d,edx
  404f1a:	xor    ebx,r13d
  404f1d:	rorx   r9d,r9d,0x1f
  404f23:	xor    ebx,r12d
  404f26:	rorx   r12d,r12d,0x2
  404f2c:	lea    r15d,[r15+r9*1-0x359d3e2a]
  404f34:	add    ebx,r15d
  404f37:	rorx   r15d,ebp,0x1b
  404f3d:	add    ebx,r15d
  404f40:	mov    r15d,DWORD PTR [rsp-0x48]
  404f45:	xor    r15d,DWORD PTR [rsp-0x40]
  404f4a:	xor    r8d,r15d
  404f4d:	mov    r15d,DWORD PTR [rsp-0x38]
  404f52:	xor    r8d,r11d
  404f55:	mov    r11d,r13d
  404f58:	rorx   r8d,r8d,0x1f
  404f5e:	xor    r11d,r12d
  404f61:	lea    r14d,[r14+r8*1-0x359d3e2a]
  404f69:	xor    r11d,ebp
  404f6c:	rorx   ebp,ebp,0x2
  404f72:	add    r14d,r11d
  404f75:	rorx   r11d,ebx,0x1b
  404f7b:	add    r14d,r11d
  404f7e:	mov    r11d,DWORD PTR [rsp-0x44]
  404f83:	xor    r11d,r15d
  404f86:	xor    edi,r11d
  404f89:	mov    r11d,DWORD PTR [rsp-0x30]
  404f8e:	xor    edi,r10d
  404f91:	mov    r10d,r12d
  404f94:	rorx   edi,edi,0x1f
  404f9a:	xor    r10d,ebp
  404f9d:	lea    r13d,[r13+rdi*1-0x359d3e2a]
  404fa5:	xor    r10d,ebx
  404fa8:	xor    r11d,r15d
  404fab:	rorx   ebx,ebx,0x2
  404fb1:	xor    ecx,r11d
  404fb4:	add    r13d,r10d
  404fb7:	rorx   r10d,r14d,0x1b
  404fbd:	xor    ecx,r8d
  404fc0:	add    r13d,r10d
  404fc3:	mov    r10d,DWORD PTR [rsp-0x40]
  404fc8:	rorx   ecx,ecx,0x1f
  404fce:	lea    r8d,[rbp+rcx*1-0x359d3e2a]
  404fd6:	xor    r10d,eax
  404fd9:	xor    eax,DWORD PTR [rsp-0x2c]
  404fdd:	xor    esi,r10d
  404fe0:	mov    r10d,ebx
  404fe3:	xor    esi,r9d
  404fe6:	rorx   esi,esi,0x1f
  404fec:	lea    r9d,[r12+rsi*1-0x359d3e2a]
  404ff4:	mov    esi,ebp
  404ff6:	xor    edx,eax
  404ff8:	xor    esi,ebx
  404ffa:	xor    edi,edx
  404ffc:	mov    edx,DWORD PTR [rsp-0x1c]
  405000:	xor    esi,r14d
  405003:	rorx   r14d,r14d,0x2
  405009:	rorx   edi,edi,0x1f
  40500f:	xor    r10d,r14d
  405012:	add    esi,r9d
  405015:	rorx   r9d,r13d,0x1b
  40501b:	mov    ecx,r10d
  40501e:	lea    r15d,[rdx+rdi*1-0x359d3e2a]
  405026:	mov    r10d,r14d
  405029:	xor    ecx,r13d
  40502c:	rorx   r13d,r13d,0x2
  405032:	add    esi,r9d
  405035:	xor    r10d,r13d
  405038:	add    r15d,ebx
  40503b:	add    ecx,r8d
  40503e:	mov    ebx,r10d
  405041:	rorx   r8d,esi,0x1b
  405047:	add    r13d,DWORD PTR [rsp-0x10]
  40504c:	add    ecx,r8d
  40504f:	xor    ebx,esi
  405051:	rorx   esi,esi,0x2
  405057:	add    ebx,r15d
  40505a:	rorx   eax,ecx,0x1b
  405060:	add    esi,DWORD PTR [rsp-0x14]
  405064:	add    ebx,eax
  405066:	add    ecx,DWORD PTR [rsp-0x18]
  40506a:	add    r14d,DWORD PTR [rsp-0xc]
  40506f:	mov    rax,QWORD PTR [rsp-0x8]
  405074:	mov    DWORD PTR [rax],ebx
  405076:	mov    DWORD PTR [rax+0x4],ecx
  405079:	mov    DWORD PTR [rax+0x8],esi
  40507c:	mov    DWORD PTR [rax+0xc],r13d
  405080:	mov    DWORD PTR [rax+0x10],r14d
  405084:	xor    eax,eax
  405086:	pop    rbx
  405087:	pop    rbp
  405088:	pop    r12
  40508a:	pop    r13
  40508c:	pop    r14
  40508e:	pop    r15
  405090:	ret    
  405091:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40509c:	nop    DWORD PTR [rax+0x0]
  4050a0:	mov    DWORD PTR [rdi],0x67452301
  4050a6:	mov    DWORD PTR [rdi+0x4],0xefcdab89
  4050ad:	mov    DWORD PTR [rdi+0x8],0x98badcfe
  4050b4:	mov    DWORD PTR [rdi+0xc],0x10325476
  4050bb:	mov    DWORD PTR [rdi+0x10],0xc3d2e1f0
  4050c2:	mov    QWORD PTR [rdi+0x18],0x0
  4050ca:	ret    
  4050cb:	nop    DWORD PTR [rax+rax*1+0x0]
  4050d0:	push   r14
  4050d2:	push   r13
  4050d4:	mov    r13,rsi
  4050d7:	push   r12
  4050d9:	push   rbp
  4050da:	mov    r12,rdx
  4050dd:	push   rbx
  4050de:	mov    rax,QWORD PTR [rdi+0x18]
  4050e2:	mov    rbp,rdi
  4050e5:	mov    r14,rax
  4050e8:	lea    rax,[rax+rdx*8]
  4050ec:	shr    r14,0x3
  4050f0:	and    r14d,0x3f
  4050f4:	mov    QWORD PTR [rdi+0x18],rax
  4050f8:	lea    rax,[r14+rdx*1]
  4050fc:	cmp    rax,0x3f
  405100:	ja     405128 <rb_base64_encode@plt+0x2dd8>
  405102:	lea    rdi,[r14+0x20]
  405106:	xor    esi,esi
  405108:	mov    rdx,r12
  40510b:	add    rdi,rbp
  40510e:	pop    rbx
  40510f:	sub    rdx,rsi
  405112:	add    rsi,r13
  405115:	pop    rbp
  405116:	pop    r12
  405118:	pop    r13
  40511a:	pop    r14
  40511c:	jmp    402330 <memcpy@plt>
  405121:	nop    DWORD PTR [rax+0x0]
  405128:	mov    ebx,0x40
  40512d:	lea    rcx,[rdi+r14*1+0x20]
  405132:	sub    rbx,r14
  405135:	cmp    ebx,0x8
  405138:	mov    eax,ebx
  40513a:	jae    4051a0 <rb_base64_encode@plt+0x2e50>
  40513c:	test   bl,0x4
  40513f:	jne    4051ee <rb_base64_encode@plt+0x2e9e>
  405145:	test   ebx,ebx
  405147:	je     405156 <rb_base64_encode@plt+0x2e06>
  405149:	movzx  edx,BYTE PTR [rsi]
  40514c:	test   al,0x2
  40514e:	mov    BYTE PTR [rcx],dl
  405150:	jne    405201 <rb_base64_encode@plt+0x2eb1>
  405156:	lea    rsi,[rbp+0x20]
  40515a:	mov    rdi,rbp
  40515d:	call   403da0 <rb_base64_encode@plt+0x1a50>
  405162:	mov    eax,0x7f
  405167:	sub    rax,r14
  40516a:	cmp    r12,rax
  40516d:	jbe    4051e9 <rb_base64_encode@plt+0x2e99>
  40516f:	nop
  405170:	lea    rsi,[r13+rbx*1+0x0]
  405175:	mov    rdi,rbp
  405178:	call   403da0 <rb_base64_encode@plt+0x1a50>
  40517d:	lea    rax,[rbx+0x7f]
  405181:	lea    rsi,[rbx+0x40]
  405185:	cmp    r12,rax
  405188:	mov    rbx,rsi
  40518b:	ja     405170 <rb_base64_encode@plt+0x2e20>
  40518d:	mov    edi,0x20
  405192:	jmp    405108 <rb_base64_encode@plt+0x2db8>
  405197:	nop    WORD PTR [rax+rax*1+0x0]
  4051a0:	mov    rax,QWORD PTR [rsi]
  4051a3:	mov    rdi,rsi
  4051a6:	mov    QWORD PTR [rcx],rax
  4051a9:	mov    eax,ebx
  4051ab:	mov    rdx,QWORD PTR [rsi+rax*1-0x8]
  4051b0:	mov    QWORD PTR [rcx+rax*1-0x8],rdx
  4051b5:	lea    rdx,[rcx+0x8]
  4051b9:	and    rdx,0xfffffffffffffff8
  4051bd:	sub    rcx,rdx
  4051c0:	lea    eax,[rbx+rcx*1]
  4051c3:	sub    rdi,rcx
  4051c6:	and    eax,0xfffffff8
  4051c9:	cmp    eax,0x8
  4051cc:	jb     405156 <rb_base64_encode@plt+0x2e06>
  4051ce:	and    eax,0xfffffff8
  4051d1:	xor    ecx,ecx
  4051d3:	mov    esi,ecx
  4051d5:	add    ecx,0x8
  4051d8:	mov    r8,QWORD PTR [rdi+rsi*1]
  4051dc:	cmp    ecx,eax
  4051de:	mov    QWORD PTR [rdx+rsi*1],r8
  4051e2:	jb     4051d3 <rb_base64_encode@plt+0x2e83>
  4051e4:	jmp    405156 <rb_base64_encode@plt+0x2e06>
  4051e9:	mov    rsi,rbx
  4051ec:	jmp    40518d <rb_base64_encode@plt+0x2e3d>
  4051ee:	mov    edx,DWORD PTR [rsi]
  4051f0:	mov    DWORD PTR [rcx],edx
  4051f2:	mov    edx,ebx
  4051f4:	mov    eax,DWORD PTR [rsi+rdx*1-0x4]
  4051f8:	mov    DWORD PTR [rcx+rdx*1-0x4],eax
  4051fc:	jmp    405156 <rb_base64_encode@plt+0x2e06>
  405201:	mov    edx,ebx
  405203:	movzx  eax,WORD PTR [rsi+rdx*1-0x2]
  405208:	mov    WORD PTR [rcx+rdx*1-0x2],ax
  40520d:	jmp    405156 <rb_base64_encode@plt+0x2e06>
  405212:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40521d:	nop    DWORD PTR [rax]
  405220:	push   r13
  405222:	push   r12
  405224:	mov    edx,0xffffffff
  405229:	push   rbp
  40522a:	push   rbx
  40522b:	mov    rbx,rsi
  40522e:	mov    rbp,rdi
  405231:	sub    rsp,0x18
  405235:	mov    rsi,QWORD PTR [rdi+0x18]
  405239:	mov    rax,QWORD PTR fs:0x28
  405242:	mov    QWORD PTR [rsp+0x8],rax
  405247:	xor    eax,eax
  405249:	mov    r12,rsp
  40524c:	mov    rcx,rsp
  40524f:	nop
  405250:	mov    eax,edx
  405252:	sub    edx,0x1
  405255:	add    rcx,0x1
  405259:	and    eax,0x7
  40525c:	shl    eax,0x3
  40525f:	shrx   rax,rsi,rax
  405264:	mov    BYTE PTR [rcx-0x1],al
  405267:	cmp    edx,0xfffffff7
  40526a:	jne    405250 <rb_base64_encode@plt+0x2f00>
  40526c:	lea    rsi,[rip+0x104d]        # 4062c0 <rb_base64_encode@plt+0x3f70>
  405273:	mov    edx,0x1
  405278:	mov    rdi,rbp
  40527b:	lea    r13,[rip+0x1040]        # 4062c2 <rb_base64_encode@plt+0x3f72>
  405282:	call   4050d0 <rb_base64_encode@plt+0x2d80>
  405287:	mov    rax,QWORD PTR [rbp+0x18]
  40528b:	and    eax,0x1f8
  405290:	cmp    rax,0x1c0
  405296:	je     4052c1 <rb_base64_encode@plt+0x2f71>
  405298:	nop    DWORD PTR [rax+rax*1+0x0]
  4052a0:	mov    edx,0x1
  4052a5:	mov    rsi,r13
  4052a8:	mov    rdi,rbp
  4052ab:	call   4050d0 <rb_base64_encode@plt+0x2d80>
  4052b0:	mov    rax,QWORD PTR [rbp+0x18]
  4052b4:	and    eax,0x1f8
  4052b9:	cmp    rax,0x1c0
  4052bf:	jne    4052a0 <rb_base64_encode@plt+0x2f50>
  4052c1:	mov    rdi,rbp
  4052c4:	mov    edx,0x8
  4052c9:	mov    rsi,r12
  4052cc:	call   4050d0 <rb_base64_encode@plt+0x2d80>
  4052d1:	mov    edi,0xffffffff
  4052d6:	xor    eax,eax
  4052d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4052e0:	mov    esi,eax
  4052e2:	mov    edx,edi
  4052e4:	sub    edi,0x1
  4052e7:	and    edx,0x3
  4052ea:	shr    esi,0x2
  4052ed:	lea    ecx,[rdx*8+0x0]
  4052f4:	mov    edx,DWORD PTR [rbp+rsi*4+0x0]
  4052f8:	shrx   edx,edx,ecx
  4052fd:	mov    BYTE PTR [rbx+rax*1],dl
  405300:	add    rax,0x1
  405304:	cmp    rax,0x14
  405308:	jne    4052e0 <rb_base64_encode@plt+0x2f90>
  40530a:	lea    rdi,[rbp+0x8]
  40530e:	mov    QWORD PTR [rbp+0x0],0x0
  405316:	mov    QWORD PTR [rbp+0x58],0x0
  40531e:	xor    eax,eax
  405320:	and    rdi,0xfffffffffffffff8
  405324:	sub    rbp,rdi
  405327:	lea    ecx,[rbp+0x60]
  40532a:	shr    ecx,0x3
  40532d:	rep stos QWORD PTR es:[rdi],rax
  405330:	mov    rax,QWORD PTR [rsp+0x8]
  405335:	xor    rax,QWORD PTR fs:0x28
  40533e:	jne    40534b <rb_base64_encode@plt+0x2ffb>
  405340:	add    rsp,0x18
  405344:	pop    rbx
  405345:	pop    rbp
  405346:	pop    r12
  405348:	pop    r13
  40534a:	ret    
  40534b:	call   402250 <__stack_chk_fail@plt>
  405350:	endbr64 
  405354:	push   r15
  405356:	lea    r15,[rip+0x2a83]        # 407de0 <rb_base64_encode@plt+0x5a90>
  40535d:	push   r14
  40535f:	mov    r14,rdx
  405362:	push   r13
  405364:	mov    r13,rsi
  405367:	push   r12
  405369:	mov    r12d,edi
  40536c:	push   rbp
  40536d:	lea    rbp,[rip+0x2a74]        # 407de8 <rb_base64_encode@plt+0x5a98>
  405374:	push   rbx
  405375:	sub    rbp,r15
  405378:	sub    rsp,0x8
  40537c:	call   402000 <dup2@plt-0x30>
  405381:	sar    rbp,0x3
  405385:	je     4053a6 <rb_base64_encode@plt+0x3056>
  405387:	xor    ebx,ebx
  405389:	nop    DWORD PTR [rax+0x0]
  405390:	mov    rdx,r14
  405393:	mov    rsi,r13
  405396:	mov    edi,r12d
  405399:	call   QWORD PTR [r15+rbx*8]
  40539d:	add    rbx,0x1
  4053a1:	cmp    rbp,rbx
  4053a4:	jne    405390 <rb_base64_encode@plt+0x3040>
  4053a6:	add    rsp,0x8
  4053aa:	pop    rbx
  4053ab:	pop    rbp
  4053ac:	pop    r12
  4053ae:	pop    r13
  4053b0:	pop    r14
  4053b2:	pop    r15
  4053b4:	ret    
  4053b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4053c0:	endbr64 
  4053c4:	ret    

Disassembly of section .fini:

00000000004053c8 <.fini>:
  4053c8:	endbr64 
  4053cc:	sub    rsp,0x8
  4053d0:	add    rsp,0x8
  4053d4:	ret    
