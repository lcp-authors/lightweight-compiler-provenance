
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf64-x86-64


Disassembly of section .init:

0000000000403000 <.init>:
  403000:	endbr64 
  403004:	sub    rsp,0x8
  403008:	mov    rax,QWORD PTR [rip+0x9fe1]        # 40cff0 <__gmon_start__>
  40300f:	test   rax,rax
  403012:	je     403016 <free@plt-0x1a>
  403014:	call   rax
  403016:	add    rsp,0x8
  40301a:	ret    

Disassembly of section .plt:

0000000000403020 <free@plt-0x10>:
  403020:	push   QWORD PTR [rip+0x9fe2]        # 40d008 <flatcc_builder_padding_base@@Base+0x3188>
  403026:	jmp    QWORD PTR [rip+0x9fe4]        # 40d010 <flatcc_builder_padding_base@@Base+0x3190>
  40302c:	nop    DWORD PTR [rax+0x0]

0000000000403030 <free@plt>:
  403030:	jmp    QWORD PTR [rip+0x9fe2]        # 40d018 <free@GLIBC_2.2.5>
  403036:	push   0x0
  40303b:	jmp    403020 <free@plt-0x10>

0000000000403040 <strlen@plt>:
  403040:	jmp    QWORD PTR [rip+0x9fda]        # 40d020 <strlen@GLIBC_2.2.5>
  403046:	push   0x1
  40304b:	jmp    403020 <free@plt-0x10>

0000000000403050 <__stack_chk_fail@plt>:
  403050:	jmp    QWORD PTR [rip+0x9fd2]        # 40d028 <__stack_chk_fail@GLIBC_2.4>
  403056:	push   0x2
  40305b:	jmp    403020 <free@plt-0x10>

0000000000403060 <__assert_fail@plt>:
  403060:	jmp    QWORD PTR [rip+0x9fca]        # 40d030 <__assert_fail@GLIBC_2.2.5>
  403066:	push   0x3
  40306b:	jmp    403020 <free@plt-0x10>

0000000000403070 <memset@plt>:
  403070:	jmp    QWORD PTR [rip+0x9fc2]        # 40d038 <memset@GLIBC_2.2.5>
  403076:	push   0x4
  40307b:	jmp    403020 <free@plt-0x10>

0000000000403080 <memchr@plt>:
  403080:	jmp    QWORD PTR [rip+0x9fba]        # 40d040 <memchr@GLIBC_2.2.5>
  403086:	push   0x5
  40308b:	jmp    403020 <free@plt-0x10>

0000000000403090 <memcmp@plt>:
  403090:	jmp    QWORD PTR [rip+0x9fb2]        # 40d048 <memcmp@GLIBC_2.2.5>
  403096:	push   0x6
  40309b:	jmp    403020 <free@plt-0x10>

00000000004030a0 <memcpy@plt>:
  4030a0:	jmp    QWORD PTR [rip+0x9faa]        # 40d050 <memcpy@GLIBC_2.14>
  4030a6:	push   0x7
  4030ab:	jmp    403020 <free@plt-0x10>

00000000004030b0 <malloc@plt>:
  4030b0:	jmp    QWORD PTR [rip+0x9fa2]        # 40d058 <malloc@GLIBC_2.2.5>
  4030b6:	push   0x8
  4030bb:	jmp    403020 <free@plt-0x10>

00000000004030c0 <realloc@plt>:
  4030c0:	jmp    QWORD PTR [rip+0x9f9a]        # 40d060 <realloc@GLIBC_2.2.5>
  4030c6:	push   0x9
  4030cb:	jmp    403020 <free@plt-0x10>

00000000004030d0 <__printf_chk@plt>:
  4030d0:	jmp    QWORD PTR [rip+0x9f92]        # 40d068 <__printf_chk@GLIBC_2.3.4>
  4030d6:	push   0xa
  4030db:	jmp    403020 <free@plt-0x10>

00000000004030e0 <__fprintf_chk@plt>:
  4030e0:	jmp    QWORD PTR [rip+0x9f8a]        # 40d070 <__fprintf_chk@GLIBC_2.3.4>
  4030e6:	push   0xb
  4030eb:	jmp    403020 <free@plt-0x10>

00000000004030f0 <posix_memalign@plt>:
  4030f0:	jmp    QWORD PTR [rip+0x9f82]        # 40d078 <posix_memalign@GLIBC_2.2.5>
  4030f6:	push   0xc
  4030fb:	jmp    403020 <free@plt-0x10>

Disassembly of section .text:

0000000000403100 <main@@Base-0x90>:
  403100:	lea    rcx,[rip+0x6d49]        # 409e50 <_IO_stdin_used@@Base+0xe50>
  403107:	lea    rsi,[rip+0x627a]        # 409388 <_IO_stdin_used@@Base+0x388>
  40310e:	lea    rdi,[rip+0x660a]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403115:	sub    rsp,0x8
  403119:	mov    edx,0x134
  40311e:	call   403060 <__assert_fail@plt>
  403123:	lea    rcx,[rip+0x6cb6]        # 409de0 <_IO_stdin_used@@Base+0xde0>
  40312a:	lea    rsi,[rip+0x6257]        # 409388 <_IO_stdin_used@@Base+0x388>
  403131:	lea    rdi,[rip+0x65e7]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403138:	sub    rsp,0x8
  40313c:	mov    edx,0x2a1
  403141:	call   403060 <__assert_fail@plt>
  403146:	lea    rcx,[rip+0x6c83]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  40314d:	lea    rsi,[rip+0x6234]        # 409388 <_IO_stdin_used@@Base+0x388>
  403154:	lea    rdi,[rip+0x65c4]        # 40971f <_IO_stdin_used@@Base+0x71f>
  40315b:	sub    rsp,0x8
  40315f:	mov    edx,0x28b
  403164:	call   403060 <__assert_fail@plt>
  403169:	lea    rcx,[rip+0x6bc0]        # 409d30 <_IO_stdin_used@@Base+0xd30>
  403170:	lea    rsi,[rip+0x6211]        # 409388 <_IO_stdin_used@@Base+0x388>
  403177:	lea    rdi,[rip+0x657a]        # 4096f8 <_IO_stdin_used@@Base+0x6f8>
  40317e:	sub    rsp,0x8
  403182:	mov    edx,0x37c
  403187:	call   403060 <__assert_fail@plt>
  40318c:	nop    DWORD PTR [rax+0x0]

0000000000403190 <main@@Base>:
  403190:	push   rbx
  403191:	xor    eax,eax
  403193:	call   403380 <debug_test@@Base>
  403198:	mov    ebx,eax
  40319a:	xor    eax,eax
  40319c:	call   403520 <emit_test@@Base>
  4031a1:	or     eax,ebx
  4031a3:	pop    rbx
  4031a4:	ret    
  4031a5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4031af:	nop

00000000004031b0 <_start@@Base>:
  4031b0:	endbr64 
  4031b4:	xor    ebp,ebp
  4031b6:	mov    r9,rdx
  4031b9:	pop    rsi
  4031ba:	mov    rdx,rsp
  4031bd:	and    rsp,0xfffffffffffffff0
  4031c1:	push   rax
  4031c2:	push   rsp
  4031c3:	mov    r8,0x408130
  4031ca:	mov    rcx,0x4080c0
  4031d1:	mov    rdi,0x403190
  4031d8:	call   QWORD PTR [rip+0x9e0a]        # 40cfe8 <__libc_start_main@GLIBC_2.2.5>
  4031de:	hlt    
  4031df:	nop
  4031e0:	endbr64 
  4031e4:	ret    
  4031e5:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4031ef:	nop
  4031f0:	mov    eax,0x40d097
  4031f5:	push   rbp
  4031f6:	sub    rax,0x40d090
  4031fc:	cmp    rax,0xe
  403200:	mov    rbp,rsp
  403203:	jbe    403220 <_start@@Base+0x70>
  403205:	mov    eax,0x0
  40320a:	test   rax,rax
  40320d:	je     403220 <_start@@Base+0x70>
  40320f:	pop    rbp
  403210:	mov    edi,0x40d090
  403215:	jmp    rax
  403217:	nop    WORD PTR [rax+rax*1+0x0]
  403220:	pop    rbp
  403221:	ret    
  403222:	nop    DWORD PTR [rax+0x0]
  403226:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403230:	mov    esi,0x40d090
  403235:	push   rbp
  403236:	sub    rsi,0x40d090
  40323d:	sar    rsi,0x3
  403241:	mov    rbp,rsp
  403244:	mov    rax,rsi
  403247:	shr    rax,0x3f
  40324b:	add    rsi,rax
  40324e:	sar    rsi,1
  403251:	je     403268 <_start@@Base+0xb8>
  403253:	mov    eax,0x0
  403258:	test   rax,rax
  40325b:	je     403268 <_start@@Base+0xb8>
  40325d:	pop    rbp
  40325e:	mov    edi,0x40d090
  403263:	jmp    rax
  403265:	nop    DWORD PTR [rax]
  403268:	pop    rbp
  403269:	ret    
  40326a:	nop    WORD PTR [rax+rax*1+0x0]
  403270:	cmp    BYTE PTR [rip+0x9e19],0x0        # 40d090 <__bss_start@@Base>
  403277:	jne    40328a <_start@@Base+0xda>
  403279:	push   rbp
  40327a:	mov    rbp,rsp
  40327d:	call   4031f0 <_start@@Base+0x40>
  403282:	pop    rbp
  403283:	mov    BYTE PTR [rip+0x9e06],0x1        # 40d090 <__bss_start@@Base>
  40328a:	repz ret 
  40328c:	nop    DWORD PTR [rax+0x0]
  403290:	mov    edi,0x40ce10
  403295:	cmp    QWORD PTR [rdi],0x0
  403299:	jne    4032a0 <_start@@Base+0xf0>
  40329b:	jmp    403230 <_start@@Base+0x80>
  40329d:	nop    DWORD PTR [rax]
  4032a0:	mov    eax,0x0
  4032a5:	test   rax,rax
  4032a8:	je     40329b <_start@@Base+0xeb>
  4032aa:	push   rbp
  4032ab:	mov    rbp,rsp
  4032ae:	call   rax
  4032b0:	pop    rbp
  4032b1:	jmp    403230 <_start@@Base+0x80>
  4032b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004032c0 <dbg_emitter@@Base>:
  4032c0:	push   r14
  4032c2:	push   r13
  4032c4:	mov    r13,rsi
  4032c7:	push   r12
  4032c9:	lea    rsi,[rip+0x5d38]        # 409008 <_IO_stdin_used@@Base+0x8>
  4032d0:	push   rbp
  4032d1:	push   rbx
  4032d2:	mov    r12d,edx
  4032d5:	movsxd rcx,ecx
  4032d8:	xor    eax,eax
  4032da:	mov    edi,0x1
  4032df:	mov    rbp,rcx
  4032e2:	call   4030d0 <__printf_chk@plt>
  4032e7:	test   r12d,r12d
  4032ea:	jle    403329 <dbg_emitter@@Base+0x69>
  4032ec:	lea    eax,[r12-0x1]
  4032f1:	mov    r12,0x409e80
  4032f8:	lea    rbx,[r13+0x8]
  4032fc:	lea    r14,[rip+0x5d3d]        # 409040 <_IO_stdin_used@@Base+0x40>
  403303:	shl    rax,0x4
  403307:	lea    r13,[r13+rax*1+0x18]
  40330c:	nop    DWORD PTR [rax+0x0]
  403310:	mov    rax,QWORD PTR [rbx-0x8]
  403314:	cmp    rax,r12
  403317:	je     403358 <dbg_emitter@@Base+0x98>
  403319:	test   rax,rax
  40331c:	je     403338 <dbg_emitter@@Base+0x78>
  40331e:	add    ebp,DWORD PTR [rbx]
  403320:	add    rbx,0x10
  403324:	cmp    rbx,r13
  403327:	jne    403310 <dbg_emitter@@Base+0x50>
  403329:	pop    rbx
  40332a:	xor    eax,eax
  40332c:	pop    rbp
  40332d:	pop    r12
  40332f:	pop    r13
  403331:	pop    r14
  403333:	ret    
  403334:	nop    DWORD PTR [rax+0x0]
  403338:	mov    rcx,QWORD PTR [rbx]
  40333b:	lea    rsi,[rip+0x5d26]        # 409068 <_IO_stdin_used@@Base+0x68>
  403342:	movsxd rdx,ebp
  403345:	mov    edi,0x1
  40334a:	call   4030d0 <__printf_chk@plt>
  40334f:	jmp    40331e <dbg_emitter@@Base+0x5e>
  403351:	nop    DWORD PTR [rax+0x0]
  403358:	mov    rcx,QWORD PTR [rbx]
  40335b:	movsxd rdx,ebp
  40335e:	mov    rsi,r14
  403361:	mov    edi,0x1
  403366:	xor    eax,eax
  403368:	call   4030d0 <__printf_chk@plt>
  40336d:	mov    rax,QWORD PTR [rbx-0x8]
  403371:	jmp    403319 <dbg_emitter@@Base+0x59>
  403373:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40337e:	xchg   ax,ax

0000000000403380 <debug_test@@Base>:
  403380:	push   rbp
  403381:	push   rbx
  403382:	lea    rsi,[rip+0x5d0f]        # 409098 <_IO_stdin_used@@Base+0x98>
  403389:	mov    edi,0x1
  40338e:	sub    rsp,0x1c8
  403395:	mov    rax,QWORD PTR fs:0x28
  40339e:	mov    QWORD PTR [rsp+0x1b8],rax
  4033a6:	xor    eax,eax
  4033a8:	lea    rbx,[rsp+0x30]
  4033ad:	mov    QWORD PTR [rsp],0x0
  4033b5:	mov    QWORD PTR [rsp+0x8],0x0
  4033be:	mov    QWORD PTR [rsp+0x10],0x0
  4033c7:	mov    QWORD PTR [rsp+0x18],0x0
  4033d0:	mov    QWORD PTR [rsp+0x20],0x0
  4033d9:	call   4030d0 <__printf_chk@plt>
  4033de:	mov    rsi,0x4032c0
  4033e5:	xor    r8d,r8d
  4033e8:	xor    ecx,ecx
  4033ea:	xor    edx,edx
  4033ec:	mov    rdi,rbx
  4033ef:	call   404140 <flatcc_builder_custom_init@@Base>
  4033f4:	mov    rsi,rsp
  4033f7:	mov    r9d,0x3fffffff
  4033fd:	mov    r8d,0x4
  403403:	mov    ecx,0x4
  403408:	mov    edx,0xa
  40340d:	mov    rdi,rbx
  403410:	call   406390 <flatcc_builder_create_vector@@Base>
  403415:	xor    ecx,ecx
  403417:	xor    edx,edx
  403419:	xor    esi,esi
  40341b:	mov    rdi,rbx
  40341e:	mov    ebp,eax
  403420:	call   404bd0 <flatcc_builder_start_buffer@@Base>
  403425:	test   eax,eax
  403427:	je     403458 <debug_test@@Base+0xd8>
  403429:	mov    rdi,rbx
  40342c:	call   4043a0 <flatcc_builder_clear@@Base>
  403431:	xor    eax,eax
  403433:	mov    rcx,QWORD PTR [rsp+0x1b8]
  40343b:	xor    rcx,QWORD PTR fs:0x28
  403444:	jne    4034f4 <debug_test@@Base+0x174>
  40344a:	add    rsp,0x1c8
  403451:	pop    rbx
  403452:	pop    rbp
  403453:	ret    
  403454:	nop    DWORD PTR [rax+0x0]
  403458:	mov    esi,0x3
  40345d:	mov    rdi,rbx
  403460:	call   405840 <flatcc_builder_start_table@@Base>
  403465:	test   eax,eax
  403467:	jne    40348d <debug_test@@Base+0x10d>
  403469:	xor    esi,esi
  40346b:	mov    ecx,0x8
  403470:	mov    edx,0x8
  403475:	mov    rdi,rbx
  403478:	call   4070e0 <flatcc_builder_table_add@@Base>
  40347d:	test   rax,rax
  403480:	je     40348d <debug_test@@Base+0x10d>
  403482:	test   ebp,ebp
  403484:	mov    QWORD PTR [rax],0x2a
  40348b:	jne    4034a0 <debug_test@@Base+0x120>
  40348d:	xor    esi,esi
  40348f:	mov    rdi,rbx
  403492:	call   404cb0 <flatcc_builder_end_buffer@@Base>
  403497:	jmp    403429 <debug_test@@Base+0xa9>
  403499:	nop    DWORD PTR [rax+0x0]
  4034a0:	mov    esi,0x2
  4034a5:	mov    rdi,rbx
  4034a8:	call   4072b0 <flatcc_builder_table_add_offset@@Base>
  4034ad:	test   rax,rax
  4034b0:	je     40348d <debug_test@@Base+0x10d>
  4034b2:	mov    DWORD PTR [rax],ebp
  4034b4:	mov    ecx,0x1
  4034b9:	mov    edx,0x1
  4034be:	mov    esi,0x1
  4034c3:	mov    rdi,rbx
  4034c6:	call   4070e0 <flatcc_builder_table_add@@Base>
  4034cb:	test   rax,rax
  4034ce:	je     40348d <debug_test@@Base+0x10d>
  4034d0:	lea    rsi,[rip+0x5eab]        # 409382 <_IO_stdin_used@@Base+0x382>
  4034d7:	xor    edx,edx
  4034d9:	mov    BYTE PTR [rax],0x1
  4034dc:	mov    rdi,rbx
  4034df:	call   406180 <flatcc_builder_check_required@@Base>
  4034e4:	test   eax,eax
  4034e6:	je     4034f9 <debug_test@@Base+0x179>
  4034e8:	mov    rdi,rbx
  4034eb:	call   406200 <flatcc_builder_end_table@@Base>
  4034f0:	mov    esi,eax
  4034f2:	jmp    40348f <debug_test@@Base+0x10f>
  4034f4:	call   403050 <__stack_chk_fail@plt>
  4034f9:	lea    rcx,[rip+0x5e78]        # 409378 <_IO_stdin_used@@Base+0x378>
  403500:	lea    rsi,[rip+0x5be9]        # 4090f0 <_IO_stdin_used@@Base+0xf0>
  403507:	lea    rdi,[rip+0x5c5a]        # 409168 <_IO_stdin_used@@Base+0x168>
  40350e:	mov    edx,0x15
  403513:	call   403060 <__assert_fail@plt>
  403518:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000403520 <emit_test@@Base>:
  403520:	push   r15
  403522:	push   r14
  403524:	push   r13
  403526:	push   r12
  403528:	push   rbp
  403529:	push   rbx
  40352a:	sub    rsp,0x238
  403531:	mov    rax,QWORD PTR fs:0x28
  40353a:	mov    QWORD PTR [rsp+0x228],rax
  403542:	xor    eax,eax
  403544:	mov    rax,QWORD PTR [rip+0x5dcd]        # 409318 <_IO_stdin_used@@Base+0x318>
  40354b:	lea    r14,[rsp+0x30]
  403550:	mov    DWORD PTR [rsp+0x20],0x3f800000
  403558:	mov    DWORD PTR [rsp+0x24],0x3f8ccccd
  403560:	mov    DWORD PTR [rsp+0x28],0x3f99999a
  403568:	mov    rdi,r14
  40356b:	mov    DWORD PTR [rsp+0x2c],0x3fa66666
  403573:	mov    QWORD PTR [rsp+0x1e0],rax
  40357b:	mov    rax,QWORD PTR [rip+0x5d9e]        # 409320 <_IO_stdin_used@@Base+0x320>
  403582:	mov    QWORD PTR [rsp+0x1e8],rax
  40358a:	mov    rax,QWORD PTR [rip+0x5d97]        # 409328 <_IO_stdin_used@@Base+0x328>
  403591:	mov    QWORD PTR [rsp+0x1f0],rax
  403599:	mov    rax,QWORD PTR [rip+0x5d90]        # 409330 <_IO_stdin_used@@Base+0x330>
  4035a0:	mov    QWORD PTR [rsp+0x1f8],rax
  4035a8:	mov    rax,QWORD PTR [rip+0x5d89]        # 409338 <_IO_stdin_used@@Base+0x338>
  4035af:	mov    QWORD PTR [rsp+0x200],rax
  4035b7:	mov    rax,QWORD PTR [rip+0x5d82]        # 409340 <_IO_stdin_used@@Base+0x340>
  4035be:	mov    QWORD PTR [rsp+0x208],rax
  4035c6:	mov    rax,QWORD PTR [rip+0x5d7b]        # 409348 <_IO_stdin_used@@Base+0x348>
  4035cd:	mov    QWORD PTR [rsp+0x210],rax
  4035d5:	movzx  eax,WORD PTR [rip+0x5d74]        # 409350 <_IO_stdin_used@@Base+0x350>
  4035dc:	mov    WORD PTR [rsp+0x218],ax
  4035e4:	movzx  eax,BYTE PTR [rip+0x5d67]        # 409352 <_IO_stdin_used@@Base+0x352>
  4035eb:	mov    BYTE PTR [rsp+0x21a],al
  4035f2:	call   4041d0 <flatcc_builder_init@@Base>
  4035f7:	mov    rdi,r14
  4035fa:	call   407a00 <flatcc_builder_get_emit_context@@Base>
  4035ff:	lea    rsi,[rsp+0x20]
  403604:	mov    r9d,0x3fffffff
  40360a:	mov    r8d,0x4
  403610:	mov    ecx,0x4
  403615:	mov    edx,0x4
  40361a:	mov    rdi,r14
  40361d:	mov    rbp,rax
  403620:	call   406390 <flatcc_builder_create_vector@@Base>
  403625:	xor    ecx,ecx
  403627:	xor    edx,edx
  403629:	xor    esi,esi
  40362b:	mov    rdi,r14
  40362e:	mov    ebx,eax
  403630:	call   404bd0 <flatcc_builder_start_buffer@@Base>
  403635:	test   eax,eax
  403637:	je     403680 <emit_test@@Base+0x160>
  403639:	mov    rax,QWORD PTR [rbp+0x0]
  40363d:	cmp    QWORD PTR [rbp+0x8],rax
  403641:	mov    ebx,0xffffffff
  403646:	je     4036d6 <emit_test@@Base+0x1b6>
  40364c:	mov    rdi,QWORD PTR [rsp+0x228]
  403654:	xor    rdi,QWORD PTR fs:0x28
  40365d:	mov    eax,ebx
  40365f:	jne    403a17 <emit_test@@Base+0x4f7>
  403665:	add    rsp,0x238
  40366c:	pop    rbx
  40366d:	pop    rbp
  40366e:	pop    r12
  403670:	pop    r13
  403672:	pop    r14
  403674:	pop    r15
  403676:	ret    
  403677:	nop    WORD PTR [rax+rax*1+0x0]
  403680:	mov    esi,0x3
  403685:	mov    rdi,r14
  403688:	call   405840 <flatcc_builder_start_table@@Base>
  40368d:	test   eax,eax
  40368f:	jne    4036b9 <emit_test@@Base+0x199>
  403691:	xor    esi,esi
  403693:	mov    ecx,0x8
  403698:	mov    edx,0x8
  40369d:	mov    rdi,r14
  4036a0:	call   4070e0 <flatcc_builder_table_add@@Base>
  4036a5:	test   rax,rax
  4036a8:	je     4036b9 <emit_test@@Base+0x199>
  4036aa:	test   ebx,ebx
  4036ac:	mov    QWORD PTR [rax],0x2a
  4036b3:	jne    4039b8 <emit_test@@Base+0x498>
  4036b9:	xor    esi,esi
  4036bb:	mov    rdi,r14
  4036be:	mov    ebx,0xffffffff
  4036c3:	call   404cb0 <flatcc_builder_end_buffer@@Base>
  4036c8:	mov    rax,QWORD PTR [rbp+0x0]
  4036cc:	cmp    QWORD PTR [rbp+0x8],rax
  4036d0:	jne    40364c <emit_test@@Base+0x12c>
  4036d6:	mov    rax,QWORD PTR [rbp+0x10]
  4036da:	mov    r13,QWORD PTR [rbp+0x30]
  4036de:	test   rax,rax
  4036e1:	mov    QWORD PTR [rsp+0x10],rax
  4036e6:	je     40364c <emit_test@@Base+0x12c>
  4036ec:	mov    rdi,r14
  4036ef:	call   4076b0 <flatcc_builder_get_buffer_size@@Base>
  4036f4:	cmp    rax,r13
  4036f7:	mov    QWORD PTR [rsp+0x18],rax
  4036fc:	jne    403ab7 <emit_test@@Base+0x597>
  403702:	mov    rbx,QWORD PTR [rip+0x98ef]        # 40cff8 <stderr@GLIBC_2.2.5>
  403709:	mov    r15,QWORD PTR [rsp+0x18]
  40370e:	lea    rdx,[rip+0x5bc9]        # 4092de <_IO_stdin_used@@Base+0x2de>
  403715:	mov    esi,0x1
  40371a:	xor    eax,eax
  40371c:	mov    rdi,QWORD PTR [rbx]
  40371f:	mov    ecx,r15d
  403722:	mov    r13d,r15d
  403725:	call   4030e0 <__fprintf_chk@plt>
  40372a:	mov    rbp,QWORD PTR [rbx]
  40372d:	lea    rcx,[rip+0x5bbb]        # 4092ef <_IO_stdin_used@@Base+0x2ef>
  403734:	lea    rdx,[rip+0x5bbe]        # 4092f9 <_IO_stdin_used@@Base+0x2f9>
  40373b:	xor    eax,eax
  40373d:	mov    esi,0x1
  403742:	mov    rdi,rbp
  403745:	call   4030e0 <__fprintf_chk@plt>
  40374a:	test   r15d,r15d
  40374d:	je     4039a6 <emit_test@@Base+0x486>
  403753:	lea    rax,[rsp+0x1c0]
  40375b:	mov    r15,QWORD PTR [rsp+0x10]
  403760:	xor    r12d,r12d
  403763:	mov    QWORD PTR [rsp+0x8],rax
  403768:	jmp    4037da <emit_test@@Base+0x2ba>
  40376a:	nop    WORD PTR [rax+rax*1+0x0]
  403770:	test   r12d,r12d
  403773:	jne    403810 <emit_test@@Base+0x2f0>
  403779:	lea    rdx,[rip+0x5b84]        # 409304 <_IO_stdin_used@@Base+0x304>
  403780:	mov    ecx,r12d
  403783:	mov    esi,0x1
  403788:	mov    rdi,rbp
  40378b:	xor    eax,eax
  40378d:	call   4030e0 <__fprintf_chk@plt>
  403792:	movzx  ecx,BYTE PTR [r15]
  403796:	lea    rdx,[rip+0x5b6f]        # 40930c <_IO_stdin_used@@Base+0x30c>
  40379d:	xor    eax,eax
  40379f:	mov    esi,0x1
  4037a4:	mov    rdi,rbp
  4037a7:	call   4030e0 <__fprintf_chk@plt>
  4037ac:	movzx  eax,BYTE PTR [r15]
  4037b0:	lea    edx,[rax-0x20]
  4037b3:	cmp    dl,0x5e
  4037b6:	jbe    403800 <emit_test@@Base+0x2e0>
  4037b8:	mov    eax,ebx
  4037ba:	mov    BYTE PTR [rsp+rax*1+0x1c0],0x2e
  4037c2:	add    r12d,0x1
  4037c6:	add    ebx,0x1
  4037c9:	add    r15,0x1
  4037cd:	cmp    r13d,r12d
  4037d0:	mov    BYTE PTR [rsp+rbx*1+0x1c0],0x0
  4037d8:	je     403830 <emit_test@@Base+0x310>
  4037da:	mov    ebx,r12d
  4037dd:	and    ebx,0xf
  4037e0:	je     403770 <emit_test@@Base+0x250>
  4037e2:	test   r12b,0x7
  4037e6:	jne    403792 <emit_test@@Base+0x272>
  4037e8:	lea    rdx,[rip+0x5b25]        # 409314 <_IO_stdin_used@@Base+0x314>
  4037ef:	mov    esi,0x1
  4037f4:	mov    rdi,rbp
  4037f7:	xor    eax,eax
  4037f9:	call   4030e0 <__fprintf_chk@plt>
  4037fe:	jmp    403792 <emit_test@@Base+0x272>
  403800:	mov    edx,ebx
  403802:	mov    BYTE PTR [rsp+rdx*1+0x1c0],al
  403809:	jmp    4037c2 <emit_test@@Base+0x2a2>
  40380b:	nop    DWORD PTR [rax+rax*1+0x0]
  403810:	mov    rcx,QWORD PTR [rsp+0x8]
  403815:	lea    rdx,[rip+0x5ae2]        # 4092fe <_IO_stdin_used@@Base+0x2fe>
  40381c:	mov    esi,0x1
  403821:	mov    rdi,rbp
  403824:	xor    eax,eax
  403826:	call   4030e0 <__fprintf_chk@plt>
  40382b:	jmp    403779 <emit_test@@Base+0x259>
  403830:	test   r12b,0xf
  403834:	je     40385c <emit_test@@Base+0x33c>
  403836:	lea    rbx,[rip+0x5ad5]        # 409312 <_IO_stdin_used@@Base+0x312>
  40383d:	nop    DWORD PTR [rax]
  403840:	xor    eax,eax
  403842:	mov    rdx,rbx
  403845:	mov    esi,0x1
  40384a:	mov    rdi,rbp
  40384d:	add    r12d,0x1
  403851:	call   4030e0 <__fprintf_chk@plt>
  403856:	test   r12b,0xf
  40385a:	jne    403840 <emit_test@@Base+0x320>
  40385c:	mov    rcx,QWORD PTR [rsp+0x8]
  403861:	lea    rdx,[rip+0x5a96]        # 4092fe <_IO_stdin_used@@Base+0x2fe>
  403868:	xor    eax,eax
  40386a:	mov    esi,0x1
  40386f:	mov    rdi,rbp
  403872:	call   4030e0 <__fprintf_chk@plt>
  403877:	cmp    QWORD PTR [rsp+0x18],0x3a
  40387d:	jne    403a98 <emit_test@@Base+0x578>
  403883:	mov    rdi,QWORD PTR [rsp+0x10]
  403888:	lea    rsi,[rsp+0x1e0]
  403890:	mov    edx,0x3a
  403895:	call   403090 <memcmp@plt>
  40389a:	test   eax,eax
  40389c:	mov    ebx,eax
  40389e:	jne    403a79 <emit_test@@Base+0x559>
  4038a4:	mov    r12,QWORD PTR [rsp+0x10]
  4038a9:	mov    eax,DWORD PTR [r12]
  4038ad:	add    r12,rax
  4038b0:	je     403a5a <emit_test@@Base+0x53a>
  4038b6:	movsxd rax,DWORD PTR [r12]
  4038ba:	mov    rdx,r12
  4038bd:	sub    rdx,rax
  4038c0:	movzx  eax,WORD PTR [rdx]
  4038c3:	cmp    ax,0x5
  4038c7:	ja     4038f0 <emit_test@@Base+0x3d0>
  4038c9:	lea    rcx,[rip+0x5a98]        # 409368 <_IO_stdin_used@@Base+0x368>
  4038d0:	lea    rsi,[rip+0x5901]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  4038d7:	lea    rdi,[rip+0x5e41]        # 40971f <_IO_stdin_used@@Base+0x71f>
  4038de:	mov    edx,0x70
  4038e3:	call   403060 <__assert_fail@plt>
  4038e8:	nop    DWORD PTR [rax+rax*1+0x0]
  4038f0:	movzx  ecx,WORD PTR [rdx+0x4]
  4038f4:	test   cx,cx
  4038f7:	je     4038c9 <emit_test@@Base+0x3a9>
  4038f9:	cmp    QWORD PTR [r12+rcx*1],0x2a
  4038fe:	jne    4038c9 <emit_test@@Base+0x3a9>
  403900:	cmp    ax,0x7
  403904:	ja     403928 <emit_test@@Base+0x408>
  403906:	lea    rcx,[rip+0x5a5b]        # 409368 <_IO_stdin_used@@Base+0x368>
  40390d:	lea    rsi,[rip+0x58c4]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403914:	lea    rdi,[rip+0x5e04]        # 40971f <_IO_stdin_used@@Base+0x71f>
  40391b:	mov    edx,0x71
  403920:	call   403060 <__assert_fail@plt>
  403925:	nop    DWORD PTR [rax]
  403928:	movzx  ecx,WORD PTR [rdx+0x6]
  40392c:	test   cx,cx
  40392f:	je     403906 <emit_test@@Base+0x3e6>
  403931:	cmp    BYTE PTR [r12+rcx*1],0x1
  403936:	jne    403906 <emit_test@@Base+0x3e6>
  403938:	cmp    ax,0x9
  40393c:	ja     403960 <emit_test@@Base+0x440>
  40393e:	lea    rcx,[rip+0x5a23]        # 409368 <_IO_stdin_used@@Base+0x368>
  403945:	lea    rsi,[rip+0x588c]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  40394c:	lea    rdi,[rip+0x5dcc]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403953:	mov    edx,0x72
  403958:	call   403060 <__assert_fail@plt>
  40395d:	nop    DWORD PTR [rax]
  403960:	movzx  eax,WORD PTR [rdx+0x8]
  403964:	test   ax,ax
  403967:	je     40393e <emit_test@@Base+0x41e>
  403969:	add    r12,rax
  40396c:	mov    eax,DWORD PTR [r12]
  403970:	lea    rax,[r12+rax*1+0x4]
  403975:	test   rax,rax
  403978:	je     40393e <emit_test@@Base+0x41e>
  40397a:	cmp    DWORD PTR [rax-0x4],0x4
  40397e:	jne    40393e <emit_test@@Base+0x41e>
  403980:	vmovss xmm0,DWORD PTR [rax+0x8]
  403985:	vucomiss xmm0,DWORD PTR [rip+0x59f7]        # 409384 <_IO_stdin_used@@Base+0x384>
  40398d:	jp     403a1c <emit_test@@Base+0x4fc>
  403993:	jne    403a1c <emit_test@@Base+0x4fc>
  403999:	mov    rdi,r14
  40399c:	call   4043a0 <flatcc_builder_clear@@Base>
  4039a1:	jmp    40364c <emit_test@@Base+0x12c>
  4039a6:	lea    rax,[rsp+0x1c0]
  4039ae:	mov    QWORD PTR [rsp+0x8],rax
  4039b3:	jmp    40385c <emit_test@@Base+0x33c>
  4039b8:	mov    esi,0x2
  4039bd:	mov    rdi,r14
  4039c0:	call   4072b0 <flatcc_builder_table_add_offset@@Base>
  4039c5:	test   rax,rax
  4039c8:	je     4036b9 <emit_test@@Base+0x199>
  4039ce:	mov    DWORD PTR [rax],ebx
  4039d0:	mov    ecx,0x1
  4039d5:	mov    edx,0x1
  4039da:	mov    esi,0x1
  4039df:	mov    rdi,r14
  4039e2:	call   4070e0 <flatcc_builder_table_add@@Base>
  4039e7:	test   rax,rax
  4039ea:	je     4036b9 <emit_test@@Base+0x199>
  4039f0:	lea    rsi,[rip+0x598b]        # 409382 <_IO_stdin_used@@Base+0x382>
  4039f7:	xor    edx,edx
  4039f9:	mov    BYTE PTR [rax],0x1
  4039fc:	mov    rdi,r14
  4039ff:	call   406180 <flatcc_builder_check_required@@Base>
  403a04:	test   eax,eax
  403a06:	je     403a3b <emit_test@@Base+0x51b>
  403a08:	mov    rdi,r14
  403a0b:	call   406200 <flatcc_builder_end_table@@Base>
  403a10:	mov    esi,eax
  403a12:	jmp    4036bb <emit_test@@Base+0x19b>
  403a17:	call   403050 <__stack_chk_fail@plt>
  403a1c:	lea    rcx,[rip+0x5945]        # 409368 <_IO_stdin_used@@Base+0x368>
  403a23:	lea    rsi,[rip+0x57ae]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403a2a:	lea    rdi,[rip+0x5cee]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403a31:	mov    edx,0x73
  403a36:	call   403060 <__assert_fail@plt>
  403a3b:	lea    rcx,[rip+0x5936]        # 409378 <_IO_stdin_used@@Base+0x378>
  403a42:	lea    rsi,[rip+0x56a7]        # 4090f0 <_IO_stdin_used@@Base+0xf0>
  403a49:	lea    rdi,[rip+0x5718]        # 409168 <_IO_stdin_used@@Base+0x168>
  403a50:	mov    edx,0x15
  403a55:	call   403060 <__assert_fail@plt>
  403a5a:	lea    rcx,[rip+0x58f7]        # 409358 <_IO_stdin_used@@Base+0x358>
  403a61:	lea    rsi,[rip+0x57d8]        # 409240 <_IO_stdin_used@@Base+0x240>
  403a68:	lea    rdi,[rip+0x5849]        # 4092b8 <_IO_stdin_used@@Base+0x2b8>
  403a6f:	mov    edx,0x29
  403a74:	call   403060 <__assert_fail@plt>
  403a79:	lea    rcx,[rip+0x58e8]        # 409368 <_IO_stdin_used@@Base+0x368>
  403a80:	lea    rsi,[rip+0x5751]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403a87:	lea    rdi,[rip+0x5c91]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403a8e:	mov    edx,0x6c
  403a93:	call   403060 <__assert_fail@plt>
  403a98:	lea    rcx,[rip+0x58c9]        # 409368 <_IO_stdin_used@@Base+0x368>
  403a9f:	lea    rsi,[rip+0x5732]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403aa6:	lea    rdi,[rip+0x5c72]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403aad:	mov    edx,0x6a
  403ab2:	call   403060 <__assert_fail@plt>
  403ab7:	lea    rcx,[rip+0x58aa]        # 409368 <_IO_stdin_used@@Base+0x368>
  403abe:	lea    rsi,[rip+0x5713]        # 4091d8 <_IO_stdin_used@@Base+0x1d8>
  403ac5:	lea    rdi,[rip+0x5c53]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403acc:	mov    edx,0x65
  403ad1:	call   403060 <__assert_fail@plt>
  403ad6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403ae0:	push   rbp
  403ae1:	push   rbx
  403ae2:	mov    ebp,edx
  403ae4:	mov    rbx,rdi
  403ae7:	mov    r8d,0x1
  403aed:	mov    ecx,0x1
  403af2:	sub    rsp,0x8
  403af6:	mov    edx,DWORD PTR [rdi+0x28]
  403af9:	add    rdx,rsi
  403afc:	lea    rsi,[rdi+0x68]
  403b00:	mov    rdi,QWORD PTR [rdi+0x40]
  403b04:	call   QWORD PTR [rbx+0x50]
  403b07:	test   eax,eax
  403b09:	jne    403b38 <emit_test@@Base+0x618>
  403b0b:	mov    edx,DWORD PTR [rbx+0x28]
  403b0e:	mov    rcx,rdx
  403b11:	add    rdx,QWORD PTR [rbx+0x68]
  403b15:	mov    QWORD PTR [rbx+0x18],rdx
  403b19:	mov    edx,DWORD PTR [rbx+0x70]
  403b1c:	sub    edx,ecx
  403b1e:	cmp    ebp,edx
  403b20:	cmovb  edx,ebp
  403b23:	mov    DWORD PTR [rbx+0x24],edx
  403b26:	mov    rdx,QWORD PTR [rbx+0x30]
  403b2a:	mov    DWORD PTR [rdx+0x4],ebp
  403b2d:	add    rsp,0x8
  403b31:	pop    rbx
  403b32:	pop    rbp
  403b33:	ret    
  403b34:	nop    DWORD PTR [rax+0x0]
  403b38:	mov    eax,0xffffffff
  403b3d:	jmp    403b2d <emit_test@@Base+0x60d>
  403b3f:	nop

0000000000403b40 <flatcc_builder_default_alloc@@Base>:
  403b40:	push   r12
  403b42:	push   rbp
  403b43:	mov    rbp,rsi
  403b46:	push   rbx
  403b47:	sub    rsp,0x10
  403b4b:	test   rdx,rdx
  403b4e:	jne    403b80 <flatcc_builder_default_alloc@@Base+0x40>
  403b50:	mov    rdi,QWORD PTR [rsi]
  403b53:	xor    eax,eax
  403b55:	test   rdi,rdi
  403b58:	je     403b77 <flatcc_builder_default_alloc@@Base+0x37>
  403b5a:	mov    DWORD PTR [rsp+0xc],eax
  403b5e:	call   403030 <free@plt>
  403b63:	mov    eax,DWORD PTR [rsp+0xc]
  403b67:	mov    QWORD PTR [rbp+0x0],0x0
  403b6f:	mov    QWORD PTR [rbp+0x8],0x0
  403b77:	add    rsp,0x10
  403b7b:	pop    rbx
  403b7c:	pop    rbp
  403b7d:	pop    r12
  403b7f:	ret    
  403b80:	cmp    r8d,0x4
  403b84:	je     403c20 <flatcc_builder_default_alloc@@Base+0xe0>
  403b8a:	jle    403c30 <flatcc_builder_default_alloc@@Base+0xf0>
  403b90:	cmp    r8d,0x5
  403b94:	mov    rbx,rdx
  403b97:	je     403bb8 <flatcc_builder_default_alloc@@Base+0x78>
  403b99:	cmp    r8d,0x7
  403b9d:	mov    ebx,0x40
  403ba2:	je     403bb3 <flatcc_builder_default_alloc@@Base+0x73>
  403ba4:	jmp    403c3f <flatcc_builder_default_alloc@@Base+0xff>
  403ba9:	nop    DWORD PTR [rax+0x0]
  403bb0:	add    rbx,rbx
  403bb3:	cmp    rdx,rbx
  403bb6:	ja     403bb0 <flatcc_builder_default_alloc@@Base+0x70>
  403bb8:	mov    rax,QWORD PTR [rbp+0x8]
  403bbc:	cmp    rdx,rax
  403bbf:	ja     403bce <flatcc_builder_default_alloc@@Base+0x8e>
  403bc1:	shr    rax,1
  403bc4:	mov    rdx,rax
  403bc7:	xor    eax,eax
  403bc9:	cmp    rdx,rbx
  403bcc:	jae    403b77 <flatcc_builder_default_alloc@@Base+0x37>
  403bce:	mov    rdi,QWORD PTR [rbp+0x0]
  403bd2:	mov    rsi,rbx
  403bd5:	mov    DWORD PTR [rsp+0xc],ecx
  403bd9:	call   4030c0 <realloc@plt>
  403bde:	test   rax,rax
  403be1:	mov    r12,rax
  403be4:	je     403c49 <flatcc_builder_default_alloc@@Base+0x109>
  403be6:	mov    ecx,DWORD PTR [rsp+0xc]
  403bea:	test   ecx,ecx
  403bec:	je     403c08 <flatcc_builder_default_alloc@@Base+0xc8>
  403bee:	mov    rax,QWORD PTR [rbp+0x8]
  403bf2:	cmp    rax,rbx
  403bf5:	jae    403c08 <flatcc_builder_default_alloc@@Base+0xc8>
  403bf7:	mov    rdx,rbx
  403bfa:	lea    rdi,[r12+rax*1]
  403bfe:	xor    esi,esi
  403c00:	sub    rdx,rax
  403c03:	call   403070 <memset@plt>
  403c08:	mov    QWORD PTR [rbp+0x0],r12
  403c0c:	mov    QWORD PTR [rbp+0x8],rbx
  403c10:	add    rsp,0x10
  403c14:	pop    rbx
  403c15:	xor    eax,eax
  403c17:	pop    rbp
  403c18:	pop    r12
  403c1a:	ret    
  403c1b:	nop    DWORD PTR [rax+rax*1+0x0]
  403c20:	mov    ebx,0x120
  403c25:	jmp    403bb3 <flatcc_builder_default_alloc@@Base+0x73>
  403c27:	nop    WORD PTR [rax+rax*1+0x0]
  403c30:	cmp    r8d,0x1
  403c34:	mov    ebx,0x100
  403c39:	je     403bb3 <flatcc_builder_default_alloc@@Base+0x73>
  403c3f:	mov    ebx,0x20
  403c44:	jmp    403bb3 <flatcc_builder_default_alloc@@Base+0x73>
  403c49:	mov    eax,0xffffffff
  403c4e:	jmp    403b77 <flatcc_builder_default_alloc@@Base+0x37>
  403c53:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  403c5e:	xchg   ax,ax
  403c60:	push   rbx
  403c61:	mov    r9,rdi
  403c64:	sub    rsp,0xa0
  403c6b:	mov    rbx,QWORD PTR fs:0x28
  403c74:	mov    QWORD PTR [rsp+0x98],rbx
  403c7c:	xor    ebx,ebx
  403c7e:	test   dx,dx
  403c81:	je     403ce0 <flatcc_builder_default_alloc@@Base+0x1a0>
  403c83:	mov    eax,edx
  403c85:	movzx  edx,dx
  403c88:	movzx  edi,WORD PTR [rsi]
  403c8b:	cmp    di,0x3
  403c8f:	ja     403c9e <flatcc_builder_default_alloc@@Base+0x15e>
  403c91:	mov    edi,0x4
  403c96:	mov    WORD PTR [rsi],di
  403c99:	mov    edi,0x4
  403c9e:	cmp    ax,di
  403ca1:	jbe    403ca6 <flatcc_builder_default_alloc@@Base+0x166>
  403ca3:	mov    WORD PTR [rsi],ax
  403ca6:	test   ecx,ecx
  403ca8:	jne    403cb8 <flatcc_builder_default_alloc@@Base+0x178>
  403caa:	mov    ebx,DWORD PTR [r9+0xf4]
  403cb1:	sub    edx,0x1
  403cb4:	and    edx,ebx
  403cb6:	jne    403d00 <flatcc_builder_default_alloc@@Base+0x1c0>
  403cb8:	xor    eax,eax
  403cba:	mov    rbx,QWORD PTR [rsp+0x98]
  403cc2:	xor    rbx,QWORD PTR fs:0x28
  403ccb:	jne    403d6d <flatcc_builder_default_alloc@@Base+0x22d>
  403cd1:	add    rsp,0xa0
  403cd8:	pop    rbx
  403cd9:	ret    
  403cda:	nop    WORD PTR [rax+rax*1+0x0]
  403ce0:	movzx  eax,WORD PTR [rdi+0xec]
  403ce7:	test   ax,ax
  403cea:	movzx  edx,ax
  403ced:	jne    403c88 <flatcc_builder_default_alloc@@Base+0x148>
  403cef:	mov    edx,0x1
  403cf4:	mov    eax,0x1
  403cf9:	jmp    403c88 <flatcc_builder_default_alloc@@Base+0x148>
  403cfb:	nop    DWORD PTR [rax+rax*1+0x0]
  403d00:	mov    rax,0x409e80
  403d07:	movsxd r8,edx
  403d0a:	add    edx,ebx
  403d0c:	cmp    ebx,edx
  403d0e:	mov    QWORD PTR [rsp],r8
  403d12:	mov    QWORD PTR [rsp+0x18],r8
  403d17:	mov    DWORD PTR [rsp+0x8],0x1
  403d1f:	mov    DWORD PTR [r9+0xf4],edx
  403d26:	mov    QWORD PTR [rsp+0x10],rax
  403d2b:	jg     403d72 <flatcc_builder_default_alloc@@Base+0x232>
  403d2d:	lea    rsi,[rsp+0x10]
  403d32:	mov    rdi,QWORD PTR [r9+0x38]
  403d36:	mov    ecx,ebx
  403d38:	mov    edx,0x1
  403d3d:	call   QWORD PTR [r9+0x48]
  403d41:	test   eax,eax
  403d43:	jne    403d77 <flatcc_builder_default_alloc@@Base+0x237>
  403d45:	cmp    ebx,0xffffffff
  403d48:	jne    403cb8 <flatcc_builder_default_alloc@@Base+0x178>
  403d4e:	lea    rcx,[rip+0x609b]        # 409df0 <_IO_stdin_used@@Base+0xdf0>
  403d55:	lea    rsi,[rip+0x562c]        # 409388 <_IO_stdin_used@@Base+0x388>
  403d5c:	lea    rdi,[rip+0x59bc]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403d63:	mov    edx,0x2be
  403d68:	call   403060 <__assert_fail@plt>
  403d6d:	call   403050 <__stack_chk_fail@plt>
  403d72:	call   403123 <posix_memalign@plt+0x33>
  403d77:	lea    rcx,[rip+0x6062]        # 409de0 <_IO_stdin_used@@Base+0xde0>
  403d7e:	lea    rsi,[rip+0x5603]        # 409388 <_IO_stdin_used@@Base+0x388>
  403d85:	lea    rdi,[rip+0x5993]        # 40971f <_IO_stdin_used@@Base+0x71f>
  403d8c:	mov    edx,0x2a5
  403d91:	call   403060 <__assert_fail@plt>
  403d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
  403da0:	push   r12
  403da2:	push   rbp
  403da3:	mov    r12d,esi
  403da6:	push   rbx
  403da7:	movsxd rax,DWORD PTR [rdi+0x104]
  403dae:	mov    rbx,rdi
  403db1:	lea    edx,[rax+0x1]
  403db4:	cmp    edx,DWORD PTR [rdi+0x108]
  403dba:	mov    DWORD PTR [rdi+0x104],edx
  403dc0:	jle    403e40 <flatcc_builder_default_alloc@@Base+0x300>
  403dc2:	mov    ecx,DWORD PTR [rdi+0x120]
  403dc8:	test   ecx,ecx
  403dca:	jle    403dd4 <flatcc_builder_default_alloc@@Base+0x294>
  403dcc:	cmp    edx,ecx
  403dce:	jg     403ec0 <flatcc_builder_default_alloc@@Base+0x380>
  403dd4:	lea    rcx,[rax+rax*8]
  403dd8:	lea    rbp,[rcx*4+0x0]
  403de0:	lea    rdx,[rbp+0x24]
  403de4:	cmp    rdx,QWORD PTR [rbx+0xa0]
  403deb:	ja     403e98 <flatcc_builder_default_alloc@@Base+0x358>
  403df1:	mov    rcx,rbp
  403df4:	add    rcx,QWORD PTR [rbx+0x98]
  403dfb:	test   rcx,rcx
  403dfe:	mov    QWORD PTR [rbx+0x30],rcx
  403e02:	je     403ec0 <flatcc_builder_default_alloc@@Base+0x380>
  403e08:	movabs rdx,0xe38e38e38e38e38f
  403e12:	mov    rax,rdx
  403e15:	mul    QWORD PTR [rbx+0xa0]
  403e1c:	mov    eax,DWORD PTR [rbx+0x120]
  403e22:	shr    rdx,0x5
  403e26:	test   eax,eax
  403e28:	mov    DWORD PTR [rbx+0x108],edx
  403e2e:	jle    403e90 <flatcc_builder_default_alloc@@Base+0x350>
  403e30:	cmp    eax,edx
  403e32:	jge    403e90 <flatcc_builder_default_alloc@@Base+0x350>
  403e34:	mov    DWORD PTR [rbx+0x108],eax
  403e3a:	mov    rax,rcx
  403e3d:	jmp    403e4c <flatcc_builder_default_alloc@@Base+0x30c>
  403e3f:	nop
  403e40:	mov    rax,QWORD PTR [rdi+0x30]
  403e44:	add    rax,0x24
  403e48:	mov    QWORD PTR [rdi+0x30],rax
  403e4c:	movzx  edx,WORD PTR [rbx+0xea]
  403e53:	mov    ecx,DWORD PTR [rbx+0x20]
  403e56:	mov    DWORD PTR [rax+0x8],ecx
  403e59:	mov    WORD PTR [rax+0xc],dx
  403e5d:	mov    edx,DWORD PTR [rbx+0x28]
  403e60:	mov    WORD PTR [rbx+0xea],r12w
  403e68:	mov    DWORD PTR [rax+0x4],0xfffffffc
  403e6f:	mov    DWORD PTR [rax],edx
  403e71:	lea    eax,[rcx+rdx*1+0x7]
  403e75:	mov    DWORD PTR [rbx+0x20],0x0
  403e7c:	and    eax,0xfffffff8
  403e7f:	mov    DWORD PTR [rbx+0x28],eax
  403e82:	xor    eax,eax
  403e84:	pop    rbx
  403e85:	pop    rbp
  403e86:	pop    r12
  403e88:	ret    
  403e89:	nop    DWORD PTR [rax+0x0]
  403e90:	mov    rax,rcx
  403e93:	jmp    403e4c <flatcc_builder_default_alloc@@Base+0x30c>
  403e95:	nop    DWORD PTR [rax]
  403e98:	xor    ecx,ecx
  403e9a:	lea    rsi,[rbx+0x98]
  403ea1:	mov    rdi,QWORD PTR [rbx+0x40]
  403ea5:	mov    r8d,0x4
  403eab:	call   QWORD PTR [rbx+0x50]
  403eae:	test   eax,eax
  403eb0:	je     403df1 <flatcc_builder_default_alloc@@Base+0x2b1>
  403eb6:	call   403100 <posix_memalign@plt+0x10>
  403ebb:	nop    DWORD PTR [rax+rax*1+0x0]
  403ec0:	mov    eax,0xffffffff
  403ec5:	jmp    403e84 <flatcc_builder_default_alloc@@Base+0x344>
  403ec7:	nop    WORD PTR [rax+rax*1+0x0]
  403ed0:	push   rbp
  403ed1:	push   rbx
  403ed2:	sub    rsp,0xb8
  403ed9:	mov    rax,QWORD PTR fs:0x28
  403ee2:	mov    QWORD PTR [rsp+0xa8],rax
  403eea:	xor    eax,eax
  403eec:	cmp    edx,0x3fffffff
  403ef2:	ja     404088 <flatcc_builder_default_alloc@@Base+0x548>
  403ef8:	cmp    WORD PTR [rdi+0xe8],0x3
  403f00:	mov    rbx,rdi
  403f03:	mov    r10d,edx
  403f06:	ja     403f14 <flatcc_builder_default_alloc@@Base+0x3d4>
  403f08:	mov    eax,0x4
  403f0d:	mov    WORD PTR [rdi+0xe8],ax
  403f14:	mov    eax,DWORD PTR [rbx+0xf0]
  403f1a:	lea    r9d,[rdx*4+0x0]
  403f22:	lea    r8,[rsp+0xc]
  403f27:	mov    DWORD PTR [rsp+0xc],edx
  403f2b:	mov    QWORD PTR [rsp+0x10],0x4
  403f34:	mov    QWORD PTR [rsp+0x20],r8
  403f39:	mov    QWORD PTR [rsp+0x28],0x4
  403f42:	mov    r8d,0x4
  403f48:	mov    edi,eax
  403f4a:	mov    DWORD PTR [rsp+0x18],0x1
  403f52:	and    edi,0x3
  403f55:	test   r9d,r9d
  403f58:	je     403f75 <flatcc_builder_default_alloc@@Base+0x435>
  403f5a:	lea    r8,[r9+0x4]
  403f5e:	mov    QWORD PTR [rsp+0x30],rsi
  403f63:	mov    QWORD PTR [rsp+0x38],r9
  403f68:	mov    DWORD PTR [rsp+0x18],0x2
  403f70:	mov    QWORD PTR [rsp+0x10],r8
  403f75:	test   edi,edi
  403f77:	jne    404050 <flatcc_builder_default_alloc@@Base+0x510>
  403f7d:	mov    r11d,eax
  403f80:	sub    r11d,r8d
  403f83:	test   edx,edx
  403f85:	je     403ff6 <flatcc_builder_default_alloc@@Base+0x4b6>
  403f87:	mov    edx,0xfffffffc
  403f8c:	xor    eax,eax
  403f8e:	jmp    403fb7 <flatcc_builder_default_alloc@@Base+0x477>
  403f90:	mov    r9d,edx
  403f93:	sub    r9d,r11d
  403f96:	add    edi,r9d
  403f99:	test   rcx,rcx
  403f9c:	mov    DWORD PTR [rsi+rax*4],edi
  403f9f:	je     403fab <flatcc_builder_default_alloc@@Base+0x46b>
  403fa1:	cmp    BYTE PTR [rcx+rax*1],0x0
  403fa5:	je     4040ab <flatcc_builder_default_alloc@@Base+0x56b>
  403fab:	add    rax,0x1
  403faf:	sub    edx,0x4
  403fb2:	cmp    r10d,eax
  403fb5:	jbe    403ff0 <flatcc_builder_default_alloc@@Base+0x4b0>
  403fb7:	mov    edi,DWORD PTR [rsi+rax*4]
  403fba:	test   edi,edi
  403fbc:	jne    403f90 <flatcc_builder_default_alloc@@Base+0x450>
  403fbe:	test   rcx,rcx
  403fc1:	je     40408c <flatcc_builder_default_alloc@@Base+0x54c>
  403fc7:	cmp    BYTE PTR [rcx+rax*1],0x0
  403fcb:	je     403fab <flatcc_builder_default_alloc@@Base+0x46b>
  403fcd:	lea    rcx,[rip+0x5a7c]        # 409a50 <_IO_stdin_used@@Base+0xa50>
  403fd4:	lea    rsi,[rip+0x53ad]        # 409388 <_IO_stdin_used@@Base+0x388>
  403fdb:	lea    rdi,[rip+0x573f]        # 409721 <_IO_stdin_used@@Base+0x721>
  403fe2:	mov    edx,0x5b5
  403fe7:	call   403060 <__assert_fail@plt>
  403fec:	nop    DWORD PTR [rax+0x0]
  403ff0:	mov    eax,DWORD PTR [rbx+0xf0]
  403ff6:	mov    ebp,eax
  403ff8:	sub    ebp,r8d
  403ffb:	cmp    ebp,eax
  403ffd:	jge    4040ca <flatcc_builder_default_alloc@@Base+0x58a>
  404003:	lea    rsi,[rsp+0x20]
  404008:	mov    rdi,QWORD PTR [rbx+0x38]
  40400c:	mov    ecx,ebp
  40400e:	mov    edx,DWORD PTR [rsp+0x18]
  404012:	call   QWORD PTR [rbx+0x48]
  404015:	test   eax,eax
  404017:	jne    4040ee <flatcc_builder_default_alloc@@Base+0x5ae>
  40401d:	mov    DWORD PTR [rbx+0xf0],ebp
  404023:	mov    rbx,QWORD PTR [rsp+0xa8]
  40402b:	xor    rbx,QWORD PTR fs:0x28
  404034:	mov    eax,ebp
  404036:	jne    4040e9 <flatcc_builder_default_alloc@@Base+0x5a9>
  40403c:	add    rsp,0xb8
  404043:	pop    rbx
  404044:	pop    rbp
  404045:	ret    
  404046:	nop    WORD PTR cs:[rax+rax*1+0x0]
  404050:	movsxd r11,DWORD PTR [rsp+0x18]
  404055:	mov    rbp,0x409e80
  40405c:	add    r8,rdi
  40405f:	mov    QWORD PTR [rsp+0x10],r8
  404064:	mov    r9,r11
  404067:	shl    r11,0x4
  40406b:	add    r9d,0x1
  40406f:	mov    QWORD PTR [rsp+r11*1+0x20],rbp
  404074:	mov    QWORD PTR [rsp+r11*1+0x28],rdi
  404079:	mov    DWORD PTR [rsp+0x18],r9d
  40407e:	jmp    403f7d <flatcc_builder_default_alloc@@Base+0x43d>
  404083:	nop    DWORD PTR [rax+rax*1+0x0]
  404088:	xor    ebp,ebp
  40408a:	jmp    404023 <flatcc_builder_default_alloc@@Base+0x4e3>
  40408c:	lea    rcx,[rip+0x59bd]        # 409a50 <_IO_stdin_used@@Base+0xa50>
  404093:	lea    rsi,[rip+0x52ee]        # 409388 <_IO_stdin_used@@Base+0x388>
  40409a:	lea    rdi,[rip+0x567e]        # 40971f <_IO_stdin_used@@Base+0x71f>
  4040a1:	mov    edx,0x5b7
  4040a6:	call   403060 <__assert_fail@plt>
  4040ab:	lea    rcx,[rip+0x599e]        # 409a50 <_IO_stdin_used@@Base+0xa50>
  4040b2:	lea    rsi,[rip+0x52cf]        # 409388 <_IO_stdin_used@@Base+0x388>
  4040b9:	lea    rdi,[rip+0x5653]        # 409713 <_IO_stdin_used@@Base+0x713>
  4040c0:	mov    edx,0x5b1
  4040c5:	call   403060 <__assert_fail@plt>
  4040ca:	lea    rcx,[rip+0x5cff]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  4040d1:	lea    rsi,[rip+0x52b0]        # 409388 <_IO_stdin_used@@Base+0x388>
  4040d8:	lea    rdi,[rip+0x5640]        # 40971f <_IO_stdin_used@@Base+0x71f>
  4040df:	mov    edx,0x287
  4040e4:	call   403060 <__assert_fail@plt>
  4040e9:	call   403050 <__stack_chk_fail@plt>
  4040ee:	call   403146 <posix_memalign@plt+0x56>
  4040f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4040fe:	xchg   ax,ax

0000000000404100 <flatcc_builder_flush_vtable_cache@@Base>:
  404100:	cmp    QWORD PTR [rdi+0xd8],0x0
  404108:	jne    404110 <flatcc_builder_flush_vtable_cache@@Base+0x10>
  40410a:	ret    
  40410b:	nop    DWORD PTR [rax+rax*1+0x0]
  404110:	push   rbx
  404111:	mov    rbx,rdi
  404114:	mov    rdi,QWORD PTR [rdi+0xa8]
  40411b:	mov    rdx,QWORD PTR [rbx+0xb0]
  404122:	xor    esi,esi
  404124:	call   403070 <memset@plt>
  404129:	mov    DWORD PTR [rbx+0xe4],0x10
  404133:	mov    DWORD PTR [rbx+0xe0],0x0
  40413d:	pop    rbx
  40413e:	ret    
  40413f:	nop

0000000000404140 <flatcc_builder_custom_init@@Base>:
  404140:	mov    QWORD PTR [rdi],0x0
  404147:	mov    QWORD PTR [rdi+0x180],0x0
  404152:	mov    r9,rdi
  404155:	lea    rdi,[rdi+0x8]
  404159:	mov    r10,rcx
  40415c:	mov    rcx,r9
  40415f:	xor    eax,eax
  404161:	and    rdi,0xfffffffffffffff8
  404165:	sub    rcx,rdi
  404168:	add    ecx,0x188
  40416e:	shr    ecx,0x3
  404171:	test   rsi,rsi
  404174:	rep stos QWORD PTR es:[rdi],rax
  404177:	je     4041a8 <flatcc_builder_custom_init@@Base+0x68>
  404179:	test   r10,r10
  40417c:	je     404198 <flatcc_builder_custom_init@@Base+0x58>
  40417e:	mov    QWORD PTR [r9+0x40],r8
  404182:	mov    QWORD PTR [r9+0x50],r10
  404186:	xor    eax,eax
  404188:	mov    QWORD PTR [r9+0x38],rdx
  40418c:	mov    QWORD PTR [r9+0x48],rsi
  404190:	ret    
  404191:	nop    DWORD PTR [rax+0x0]
  404198:	mov    r10,0x403b40
  40419f:	jmp    40417e <flatcc_builder_custom_init@@Base+0x3e>
  4041a1:	nop    DWORD PTR [rax+0x0]
  4041a8:	mov    DWORD PTR [r9+0x128],0x1
  4041b3:	lea    rdx,[r9+0x130]
  4041ba:	mov    rsi,0x407bf0
  4041c1:	jmp    404179 <flatcc_builder_custom_init@@Base+0x39>
  4041c3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4041ce:	xchg   ax,ax

00000000004041d0 <flatcc_builder_init@@Base>:
  4041d0:	xor    r8d,r8d
  4041d3:	xor    ecx,ecx
  4041d5:	xor    edx,edx
  4041d7:	xor    esi,esi
  4041d9:	jmp    404140 <flatcc_builder_custom_init@@Base>
  4041de:	xchg   ax,ax

00000000004041e0 <flatcc_builder_custom_reset@@Base>:
  4041e0:	push   r14
  4041e2:	mov    r14d,esi
  4041e5:	push   r13
  4041e7:	mov    r13d,edx
  4041ea:	push   r12
  4041ec:	mov    r12,rdi
  4041ef:	push   rbp
  4041f0:	xor    ebp,ebp
  4041f2:	push   rbx
  4041f3:	lea    rbx,[rdi+0x58]
  4041f7:	jmp    404246 <flatcc_builder_custom_reset@@Base+0x66>
  4041f9:	nop    DWORD PTR [rax+0x0]
  404200:	cmp    ebp,0x5
  404203:	je     40422f <flatcc_builder_custom_reset@@Base+0x4f>
  404205:	test   r13d,r13d
  404208:	je     40422f <flatcc_builder_custom_reset@@Base+0x4f>
  40420a:	mov    rdi,QWORD PTR [r12+0x40]
  40420f:	mov    r8d,ebp
  404212:	mov    ecx,0x1
  404217:	mov    edx,0x1
  40421c:	mov    rsi,rbx
  40421f:	call   QWORD PTR [r12+0x50]
  404224:	test   eax,eax
  404226:	jne    404380 <flatcc_builder_custom_reset@@Base+0x1a0>
  40422c:	mov    rdi,QWORD PTR [rbx]
  40422f:	mov    rdx,QWORD PTR [rbx+0x8]
  404233:	xor    esi,esi
  404235:	call   403070 <memset@plt>
  40423a:	add    ebp,0x1
  40423d:	add    rbx,0x10
  404241:	cmp    ebp,0x8
  404244:	je     404278 <flatcc_builder_custom_reset@@Base+0x98>
  404246:	mov    rdi,QWORD PTR [rbx]
  404249:	test   rdi,rdi
  40424c:	jne    404200 <flatcc_builder_custom_reset@@Base+0x20>
  40424e:	cmp    QWORD PTR [rbx+0x8],0x0
  404253:	je     40423a <flatcc_builder_custom_reset@@Base+0x5a>
  404255:	lea    rcx,[rip+0x5c04]        # 409e60 <_IO_stdin_used@@Base+0xe60>
  40425c:	lea    rsi,[rip+0x5125]        # 409388 <_IO_stdin_used@@Base+0x388>
  404263:	lea    rdi,[rip+0x54c5]        # 40972f <_IO_stdin_used@@Base+0x72f>
  40426a:	mov    edx,0x1b2
  40426f:	call   403060 <__assert_fail@plt>
  404274:	nop    DWORD PTR [rax+0x0]
  404278:	mov    edx,DWORD PTR [r12+0xe4]
  404280:	mov    DWORD PTR [r12+0xe0],0x0
  40428c:	test   edx,edx
  40428e:	je     40429c <flatcc_builder_custom_reset@@Base+0xbc>
  404290:	mov    DWORD PTR [r12+0xe4],0x10
  40429c:	xor    eax,eax
  40429e:	test   r14d,r14d
  4042a1:	mov    DWORD PTR [r12+0xf0],0x0
  4042ad:	mov    WORD PTR [r12+0xe8],ax
  4042b6:	mov    rax,QWORD PTR [r12+0x68]
  4042bb:	mov    DWORD PTR [r12+0xf4],0x0
  4042c7:	mov    DWORD PTR [r12+0x104],0x0
  4042d3:	mov    DWORD PTR [r12+0x108],0x0
  4042df:	mov    DWORD PTR [r12+0x20],0x0
  4042e8:	mov    QWORD PTR [r12+0x18],rax
  4042ed:	mov    rax,QWORD PTR [r12+0x88]
  4042f5:	mov    DWORD PTR [r12+0x24],0x0
  4042fe:	mov    DWORD PTR [r12+0xfc],0x0
  40430a:	mov    DWORD PTR [r12+0x100],0x0
  404316:	mov    QWORD PTR [r12+0x30],0x0
  40431f:	mov    QWORD PTR [r12],rax
  404323:	mov    rax,QWORD PTR [r12+0x58]
  404328:	mov    QWORD PTR [r12+0x8],rax
  40432d:	jne    404358 <flatcc_builder_custom_reset@@Base+0x178>
  40432f:	mov    eax,DWORD PTR [r12+0x128]
  404337:	test   eax,eax
  404339:	je     40434a <flatcc_builder_custom_reset@@Base+0x16a>
  40433b:	lea    rdi,[r12+0x130]
  404343:	call   407a80 <flatcc_emitter_reset@@Base>
  404348:	xor    eax,eax
  40434a:	pop    rbx
  40434b:	pop    rbp
  40434c:	pop    r12
  40434e:	pop    r13
  404350:	pop    r14
  404352:	ret    
  404353:	nop    DWORD PTR [rax+rax*1+0x0]
  404358:	mov    QWORD PTR [r12+0x118],0x0
  404364:	mov    DWORD PTR [r12+0x120],0x0
  404370:	mov    DWORD PTR [r12+0x124],0x0
  40437c:	jmp    40432f <flatcc_builder_custom_reset@@Base+0x14f>
  40437e:	xchg   ax,ax
  404380:	mov    eax,0xffffffff
  404385:	jmp    40434a <flatcc_builder_custom_reset@@Base+0x16a>
  404387:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404390 <flatcc_builder_reset@@Base>:
  404390:	xor    edx,edx
  404392:	xor    esi,esi
  404394:	jmp    4041e0 <flatcc_builder_custom_reset@@Base>
  404399:	nop    DWORD PTR [rax+0x0]

00000000004043a0 <flatcc_builder_clear@@Base>:
  4043a0:	push   r12
  4043a2:	lea    r12,[rdi+0x58]
  4043a6:	push   rbp
  4043a7:	xor    ebp,ebp
  4043a9:	push   rbx
  4043aa:	mov    rbx,rdi
  4043ad:	nop    DWORD PTR [rax]
  4043b0:	mov    r8d,ebp
  4043b3:	add    ebp,0x1
  4043b6:	xor    ecx,ecx
  4043b8:	xor    edx,edx
  4043ba:	mov    rsi,r12
  4043bd:	mov    rdi,QWORD PTR [rbx+0x40]
  4043c1:	add    r12,0x10
  4043c5:	call   QWORD PTR [rbx+0x50]
  4043c8:	cmp    ebp,0x8
  4043cb:	jne    4043b0 <flatcc_builder_clear@@Base+0x10>
  4043cd:	mov    eax,DWORD PTR [rbx+0x128]
  4043d3:	test   eax,eax
  4043d5:	je     4043e3 <flatcc_builder_clear@@Base+0x43>
  4043d7:	lea    rdi,[rbx+0x130]
  4043de:	call   407b60 <flatcc_emitter_clear@@Base>
  4043e3:	lea    rdi,[rbx+0x8]
  4043e7:	mov    QWORD PTR [rbx],0x0
  4043ee:	mov    QWORD PTR [rbx+0x180],0x0
  4043f9:	xor    eax,eax
  4043fb:	and    rdi,0xfffffffffffffff8
  4043ff:	sub    rbx,rdi
  404402:	lea    ecx,[rbx+0x188]
  404408:	shr    ecx,0x3
  40440b:	rep stos QWORD PTR es:[rdi],rax
  40440e:	pop    rbx
  40440f:	pop    rbp
  404410:	pop    r12
  404412:	ret    
  404413:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40441e:	xchg   ax,ax

0000000000404420 <flatcc_builder_enter_user_frame_ptr@@Base>:
  404420:	push   r12
  404422:	push   rbp
  404423:	mov    r12,rdi
  404426:	push   rbx
  404427:	lea    rbx,[rsi+0x7]
  40442b:	mov    rbp,QWORD PTR [rdi+0x180]
  404432:	and    rbx,0xfffffffffffffff8
  404436:	add    rbx,0x8
  40443a:	lea    rdx,[rbx+rbp*1]
  40443e:	cmp    rdx,QWORD PTR [rdi+0xd0]
  404445:	ja     404498 <flatcc_builder_enter_user_frame_ptr@@Base+0x78>
  404447:	add    rbp,QWORD PTR [r12+0xc8]
  40444f:	je     4044c0 <flatcc_builder_enter_user_frame_ptr@@Base+0xa0>
  404451:	mov    rdx,rbx
  404454:	xor    esi,esi
  404456:	mov    rdi,rbp
  404459:	call   403070 <memset@plt>
  40445e:	mov    rax,QWORD PTR [r12+0x178]
  404466:	mov    QWORD PTR [rbp+0x0],rax
  40446a:	mov    rax,QWORD PTR [r12+0x180]
  404472:	lea    rdx,[rax+0x8]
  404476:	add    rbx,rax
  404479:	lea    rax,[rbp+0x8]
  40447d:	mov    QWORD PTR [r12+0x180],rbx
  404485:	mov    QWORD PTR [r12+0x178],rdx
  40448d:	pop    rbx
  40448e:	pop    rbp
  40448f:	pop    r12
  404491:	ret    
  404492:	nop    WORD PTR [rax+rax*1+0x0]
  404498:	lea    rsi,[rdi+0xc8]
  40449f:	xor    ecx,ecx
  4044a1:	mov    rdi,QWORD PTR [rdi+0x40]
  4044a5:	mov    r8d,0x7
  4044ab:	call   QWORD PTR [r12+0x50]
  4044b0:	test   eax,eax
  4044b2:	je     404447 <flatcc_builder_enter_user_frame_ptr@@Base+0x27>
  4044b4:	call   403100 <posix_memalign@plt+0x10>
  4044b9:	nop    DWORD PTR [rax+0x0]
  4044c0:	xor    eax,eax
  4044c2:	jmp    40448d <flatcc_builder_enter_user_frame_ptr@@Base+0x6d>
  4044c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4044cf:	nop

00000000004044d0 <flatcc_builder_enter_user_frame@@Base>:
  4044d0:	push   r12
  4044d2:	push   rbp
  4044d3:	mov    r12,rdi
  4044d6:	push   rbx
  4044d7:	lea    rbx,[rsi+0x7]
  4044db:	mov    rbp,QWORD PTR [rdi+0x180]
  4044e2:	and    rbx,0xfffffffffffffff8
  4044e6:	add    rbx,0x8
  4044ea:	lea    rdx,[rbx+rbp*1]
  4044ee:	cmp    rdx,QWORD PTR [rdi+0xd0]
  4044f5:	ja     404540 <flatcc_builder_enter_user_frame@@Base+0x70>
  4044f7:	xor    eax,eax
  4044f9:	add    rbp,QWORD PTR [r12+0xc8]
  404501:	je     40453b <flatcc_builder_enter_user_frame@@Base+0x6b>
  404503:	mov    rdx,rbx
  404506:	xor    esi,esi
  404508:	mov    rdi,rbp
  40450b:	call   403070 <memset@plt>
  404510:	mov    rax,QWORD PTR [r12+0x178]
  404518:	mov    QWORD PTR [rbp+0x0],rax
  40451c:	mov    rdx,QWORD PTR [r12+0x180]
  404524:	lea    rax,[rdx+0x8]
  404528:	add    rbx,rdx
  40452b:	mov    QWORD PTR [r12+0x180],rbx
  404533:	mov    QWORD PTR [r12+0x178],rax
  40453b:	pop    rbx
  40453c:	pop    rbp
  40453d:	pop    r12
  40453f:	ret    
  404540:	lea    rsi,[rdi+0xc8]
  404547:	xor    ecx,ecx
  404549:	mov    rdi,QWORD PTR [rdi+0x40]
  40454d:	mov    r8d,0x7
  404553:	call   QWORD PTR [r12+0x50]
  404558:	test   eax,eax
  40455a:	je     4044f7 <flatcc_builder_enter_user_frame@@Base+0x27>
  40455c:	call   403100 <posix_memalign@plt+0x10>
  404561:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40456c:	nop    DWORD PTR [rax+0x0]

0000000000404570 <flatcc_builder_exit_user_frame@@Base>:
  404570:	mov    rax,QWORD PTR [rdi+0x178]
  404577:	test   rax,rax
  40457a:	je     40459c <flatcc_builder_exit_user_frame@@Base+0x2c>
  40457c:	mov    edx,eax
  40457e:	add    rdx,QWORD PTR [rdi+0xc8]
  404585:	sub    rax,0x8
  404589:	mov    QWORD PTR [rdi+0x180],rax
  404590:	mov    rax,QWORD PTR [rdx-0x8]
  404594:	mov    QWORD PTR [rdi+0x178],rax
  40459b:	ret    
  40459c:	lea    rcx,[rip+0x588d]        # 409e30 <_IO_stdin_used@@Base+0xe30>
  4045a3:	lea    rsi,[rip+0x4dde]        # 409388 <_IO_stdin_used@@Base+0x388>
  4045aa:	lea    rdi,[rip+0x5190]        # 409741 <_IO_stdin_used@@Base+0x741>
  4045b1:	sub    rsp,0x8
  4045b5:	mov    edx,0x21e
  4045ba:	call   403060 <__assert_fail@plt>
  4045bf:	nop

00000000004045c0 <flatcc_builder_exit_user_frame_at@@Base>:
  4045c0:	cmp    QWORD PTR [rdi+0x178],rsi
  4045c7:	jb     4045d5 <flatcc_builder_exit_user_frame_at@@Base+0x15>
  4045c9:	mov    QWORD PTR [rdi+0x178],rsi
  4045d0:	jmp    404570 <flatcc_builder_exit_user_frame@@Base>
  4045d5:	lea    rcx,[rip+0x5824]        # 409e00 <_IO_stdin_used@@Base+0xe00>
  4045dc:	lea    rsi,[rip+0x4da5]        # 409388 <_IO_stdin_used@@Base+0x388>
  4045e3:	lea    rdi,[rip+0x4dfe]        # 4093e8 <_IO_stdin_used@@Base+0x3e8>
  4045ea:	sub    rsp,0x8
  4045ee:	mov    edx,0x227
  4045f3:	call   403060 <__assert_fail@plt>
  4045f8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404600 <flatcc_builder_get_current_user_frame@@Base>:
  404600:	mov    rax,QWORD PTR [rdi+0x178]
  404607:	ret    
  404608:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000404610 <flatcc_builder_get_user_frame_ptr@@Base>:
  404610:	mov    eax,esi
  404612:	add    rax,QWORD PTR [rdi+0xc8]
  404619:	ret    
  40461a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404620 <flatcc_builder_embed_buffer@@Base>:
  404620:	push   r13
  404622:	push   r12
  404624:	mov    r12,rcx
  404627:	push   rbp
  404628:	push   rbx
  404629:	xor    ecx,ecx
  40462b:	mov    rbp,rdx
  40462e:	movzx  edx,si
  404631:	mov    rbx,rdi
  404634:	sub    rsp,0xc8
  40463b:	mov    r13d,r9d
  40463e:	mov    WORD PTR [rsp+0xc],r8w
  404644:	mov    r8d,DWORD PTR [rdi+0x100]
  40464b:	lea    rsi,[rsp+0xc]
  404650:	mov    rax,QWORD PTR fs:0x28
  404659:	mov    QWORD PTR [rsp+0xb8],rax
  404661:	xor    eax,eax
  404663:	test   r8d,r8d
  404666:	setne  cl
  404669:	call   403c60 <flatcc_builder_default_alloc@@Base+0x120>
  40466e:	test   eax,eax
  404670:	jne    4047b8 <flatcc_builder_embed_buffer@@Base+0x198>
  404676:	mov    edx,DWORD PTR [rbx+0xf0]
  40467c:	movzx  ecx,WORD PTR [rsp+0xc]
  404681:	xor    esi,esi
  404683:	and    r13d,0x2
  404687:	mov    QWORD PTR [rsp+0x20],0x0
  404690:	mov    DWORD PTR [rsp+0x28],0x0
  404698:	setne  sil
  40469c:	xor    r8d,r8d
  40469f:	mov    eax,edx
  4046a1:	shl    esi,0x2
  4046a4:	sub    eax,r12d
  4046a7:	sub    ecx,0x1
  4046aa:	sub    eax,esi
  4046ac:	and    eax,ecx
  4046ae:	lea    ecx,[rax+r12*1]
  4046b2:	mov    DWORD PTR [rsp+0x1c],ecx
  4046b6:	mov    ecx,DWORD PTR [rbx+0x100]
  4046bc:	test   ecx,ecx
  4046be:	je     4046ea <flatcc_builder_embed_buffer@@Base+0xca>
  4046c0:	lea    rcx,[rsp+0x1c]
  4046c5:	mov    QWORD PTR [rsp+0x20],0x4
  4046ce:	mov    QWORD PTR [rsp+0x38],0x4
  4046d7:	mov    DWORD PTR [rsp+0x28],0x1
  4046df:	mov    r8d,0x4
  4046e5:	mov    QWORD PTR [rsp+0x30],rcx
  4046ea:	test   r12,r12
  4046ed:	je     404714 <flatcc_builder_embed_buffer@@Base+0xf4>
  4046ef:	movsxd rsi,DWORD PTR [rsp+0x28]
  4046f4:	add    r8,r12
  4046f7:	mov    QWORD PTR [rsp+0x20],r8
  4046fc:	mov    rcx,rsi
  4046ff:	shl    rsi,0x4
  404703:	add    ecx,0x1
  404706:	mov    QWORD PTR [rsp+rsi*1+0x30],rbp
  40470b:	mov    QWORD PTR [rsp+rsi*1+0x38],r12
  404710:	mov    DWORD PTR [rsp+0x28],ecx
  404714:	test   eax,eax
  404716:	jne    404780 <flatcc_builder_embed_buffer@@Base+0x160>
  404718:	mov    ebp,edx
  40471a:	sub    ebp,r8d
  40471d:	cmp    edx,ebp
  40471f:	jle    4047bc <flatcc_builder_embed_buffer@@Base+0x19c>
  404725:	movabs rax,0x10000000f
  40472f:	cmp    r8,rax
  404732:	ja     4047bc <flatcc_builder_embed_buffer@@Base+0x19c>
  404738:	lea    rsi,[rsp+0x30]
  40473d:	mov    rdi,QWORD PTR [rbx+0x38]
  404741:	mov    ecx,ebp
  404743:	mov    edx,DWORD PTR [rsp+0x28]
  404747:	call   QWORD PTR [rbx+0x48]
  40474a:	test   eax,eax
  40474c:	jne    4047e0 <flatcc_builder_embed_buffer@@Base+0x1c0>
  404752:	mov    DWORD PTR [rbx+0xf0],ebp
  404758:	mov    rdi,QWORD PTR [rsp+0xb8]
  404760:	xor    rdi,QWORD PTR fs:0x28
  404769:	mov    eax,ebp
  40476b:	jne    4047db <flatcc_builder_embed_buffer@@Base+0x1bb>
  40476d:	add    rsp,0xc8
  404774:	pop    rbx
  404775:	pop    rbp
  404776:	pop    r12
  404778:	pop    r13
  40477a:	ret    
  40477b:	nop    DWORD PTR [rax+rax*1+0x0]
  404780:	movsxd rsi,DWORD PTR [rsp+0x28]
  404785:	mov    rdi,0x409e80
  40478c:	add    r8,rax
  40478f:	mov    QWORD PTR [rsp+0x20],r8
  404794:	mov    rcx,rsi
  404797:	shl    rsi,0x4
  40479b:	add    ecx,0x1
  40479e:	mov    QWORD PTR [rsp+rsi*1+0x30],rdi
  4047a3:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  4047a8:	mov    DWORD PTR [rsp+0x28],ecx
  4047ac:	jmp    404718 <flatcc_builder_embed_buffer@@Base+0xf8>
  4047b1:	nop    DWORD PTR [rax+0x0]
  4047b8:	xor    ebp,ebp
  4047ba:	jmp    404758 <flatcc_builder_embed_buffer@@Base+0x138>
  4047bc:	lea    rcx,[rip+0x560d]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  4047c3:	lea    rsi,[rip+0x4bbe]        # 409388 <_IO_stdin_used@@Base+0x388>
  4047ca:	lea    rdi,[rip+0x4f4e]        # 40971f <_IO_stdin_used@@Base+0x71f>
  4047d1:	mov    edx,0x287
  4047d6:	call   403060 <__assert_fail@plt>
  4047db:	call   403050 <__stack_chk_fail@plt>
  4047e0:	call   403146 <posix_memalign@plt+0x56>
  4047e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004047f0 <flatcc_builder_create_buffer@@Base>:
  4047f0:	push   r14
  4047f2:	push   r13
  4047f4:	mov    r13d,r9d
  4047f7:	push   r12
  4047f9:	push   rbp
  4047fa:	and    r13d,0x1
  4047fe:	push   rbx
  4047ff:	mov    r14,rsi
  404802:	mov    r12d,ecx
  404805:	movzx  edx,dx
  404808:	mov    ecx,r13d
  40480b:	mov    rbp,rdi
  40480e:	sub    rsp,0xc0
  404815:	mov    ebx,r9d
  404818:	lea    rsi,[rsp+0xc]
  40481d:	mov    WORD PTR [rsp+0xc],r8w
  404823:	mov    DWORD PTR [rsp+0x1c],0x0
  40482b:	mov    rax,QWORD PTR fs:0x28
  404834:	mov    QWORD PTR [rsp+0xb8],rax
  40483c:	xor    eax,eax
  40483e:	call   403c60 <flatcc_builder_default_alloc@@Base+0x120>
  404843:	test   eax,eax
  404845:	jne    404a00 <flatcc_builder_create_buffer@@Base+0x210>
  40484b:	movzx  ecx,WORD PTR [rsp+0xc]
  404850:	cmp    cx,WORD PTR [rbp+0xe8]
  404857:	ja     4049f0 <flatcc_builder_create_buffer@@Base+0x200>
  40485d:	test   r14,r14
  404860:	mov    eax,DWORD PTR [rsp+0x1c]
  404864:	je     40486d <flatcc_builder_create_buffer@@Base+0x7d>
  404866:	mov    eax,DWORD PTR [r14]
  404869:	mov    DWORD PTR [rsp+0x1c],eax
  40486d:	xor    r10d,r10d
  404870:	test   eax,eax
  404872:	mov    edi,ebx
  404874:	setne  r10b
  404878:	and    edi,0x1
  40487b:	mov    edx,DWORD PTR [rbp+0xf0]
  404881:	shl    r10d,0x2
  404885:	and    ebx,0x2
  404888:	jne    4049b8 <flatcc_builder_create_buffer@@Base+0x1c8>
  40488e:	lea    eax,[rdx-0x4]
  404891:	sub    ecx,0x1
  404894:	sub    eax,r10d
  404897:	and    eax,ecx
  404899:	test   dil,dil
  40489c:	jne    4049c3 <flatcc_builder_create_buffer@@Base+0x1d3>
  4048a2:	mov    ecx,0x1
  4048a7:	mov    r8d,0x4
  4048ad:	movsxd rsi,ebx
  4048b0:	lea    r9,[rsp+0x14]
  4048b5:	mov    QWORD PTR [rsp+0x20],r8
  4048ba:	shl    rsi,0x4
  4048be:	test   r10d,r10d
  4048c1:	mov    DWORD PTR [rsp+0x28],ecx
  4048c5:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  4048ca:	mov    QWORD PTR [rsp+rsi*1+0x38],0x4
  4048d3:	je     4048f7 <flatcc_builder_create_buffer@@Base+0x107>
  4048d5:	lea    rsi,[rsp+0x1c]
  4048da:	shl    rcx,0x4
  4048de:	add    r8,r10
  4048e1:	add    ebx,0x2
  4048e4:	mov    QWORD PTR [rsp+0x20],r8
  4048e9:	mov    QWORD PTR [rsp+rcx*1+0x38],r10
  4048ee:	mov    QWORD PTR [rsp+rcx*1+0x30],rsi
  4048f3:	mov    DWORD PTR [rsp+0x28],ebx
  4048f7:	test   eax,eax
  4048f9:	je     404927 <flatcc_builder_create_buffer@@Base+0x137>
  4048fb:	movsxd rsi,DWORD PTR [rsp+0x28]
  404900:	mov    r9,0x409e80
  404907:	add    r8,rax
  40490a:	mov    QWORD PTR [rsp+0x20],r8
  40490f:	mov    rcx,rsi
  404912:	shl    rsi,0x4
  404916:	add    ecx,0x1
  404919:	mov    QWORD PTR [rsp+rsi*1+0x30],r9
  40491e:	mov    QWORD PTR [rsp+rsi*1+0x38],rax
  404923:	mov    DWORD PTR [rsp+0x28],ecx
  404927:	mov    eax,edx
  404929:	sub    eax,r8d
  40492c:	test   dil,dil
  40492f:	je     404a08 <flatcc_builder_create_buffer@@Base+0x218>
  404935:	add    eax,0x4
  404938:	test   r13d,r13d
  40493b:	je     404a08 <flatcc_builder_create_buffer@@Base+0x218>
  404941:	mov    ecx,DWORD PTR [rbp+0xf8]
  404947:	sub    ecx,eax
  404949:	mov    DWORD PTR [rsp+0x18],ecx
  40494d:	mov    ebx,edx
  40494f:	sub    r12d,eax
  404952:	sub    ebx,r8d
  404955:	mov    DWORD PTR [rsp+0x14],r12d
  40495a:	cmp    ebx,edx
  40495c:	jge    404a19 <flatcc_builder_create_buffer@@Base+0x229>
  404962:	lea    rsi,[rsp+0x30]
  404967:	mov    rdi,QWORD PTR [rbp+0x38]
  40496b:	mov    ecx,ebx
  40496d:	mov    edx,DWORD PTR [rsp+0x28]
  404971:	call   QWORD PTR [rbp+0x48]
  404974:	test   eax,eax
  404976:	jne    404a3d <flatcc_builder_create_buffer@@Base+0x24d>
  40497c:	test   ebx,ebx
  40497e:	mov    DWORD PTR [rbp+0xf0],ebx
  404984:	je     404a42 <flatcc_builder_create_buffer@@Base+0x252>
  40498a:	mov    rdi,QWORD PTR [rsp+0xb8]
  404992:	xor    rdi,QWORD PTR fs:0x28
  40499b:	mov    eax,ebx
  40499d:	jne    404a38 <flatcc_builder_create_buffer@@Base+0x248>
  4049a3:	add    rsp,0xc0
  4049aa:	pop    rbx
  4049ab:	pop    rbp
  4049ac:	pop    r12
  4049ae:	pop    r13
  4049b0:	pop    r14
  4049b2:	ret    
  4049b3:	nop    DWORD PTR [rax+rax*1+0x0]
  4049b8:	lea    eax,[rdx-0x8]
  4049bb:	sub    ecx,0x1
  4049be:	sub    eax,r10d
  4049c1:	and    eax,ecx
  4049c3:	lea    rcx,[rsp+0x18]
  4049c8:	mov    QWORD PTR [rsp+0x38],0x4
  4049d1:	mov    ebx,0x1
  4049d6:	mov    r8d,0x8
  4049dc:	mov    edi,0x1
  4049e1:	mov    QWORD PTR [rsp+0x30],rcx
  4049e6:	mov    ecx,0x2
  4049eb:	jmp    4048ad <flatcc_builder_create_buffer@@Base+0xbd>
  4049f0:	mov    WORD PTR [rbp+0xe8],cx
  4049f7:	jmp    40485d <flatcc_builder_create_buffer@@Base+0x6d>
  4049fc:	nop    DWORD PTR [rax+0x0]
  404a00:	xor    ebx,ebx
  404a02:	jmp    40498a <flatcc_builder_create_buffer@@Base+0x19a>
  404a04:	nop    DWORD PTR [rax+0x0]
  404a08:	mov    ecx,DWORD PTR [rbp+0xf4]
  404a0e:	sub    ecx,eax
  404a10:	mov    DWORD PTR [rsp+0x18],ecx
  404a14:	jmp    40494d <flatcc_builder_create_buffer@@Base+0x15d>
  404a19:	lea    rcx,[rip+0x53b0]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  404a20:	lea    rsi,[rip+0x4961]        # 409388 <_IO_stdin_used@@Base+0x388>
  404a27:	lea    rdi,[rip+0x4cf1]        # 40971f <_IO_stdin_used@@Base+0x71f>
  404a2e:	mov    edx,0x287
  404a33:	call   403060 <__assert_fail@plt>
  404a38:	call   403050 <__stack_chk_fail@plt>
  404a3d:	call   403146 <posix_memalign@plt+0x56>
  404a42:	lea    rcx,[rip+0x5367]        # 409db0 <_IO_stdin_used@@Base+0xdb0>
  404a49:	lea    rsi,[rip+0x4938]        # 409388 <_IO_stdin_used@@Base+0x388>
  404a50:	lea    rdi,[rip+0x4cc8]        # 40971f <_IO_stdin_used@@Base+0x71f>
  404a57:	mov    edx,0x304
  404a5c:	call   403060 <__assert_fail@plt>
  404a61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404a6c:	nop    DWORD PTR [rax+0x0]

0000000000404a70 <flatcc_builder_create_struct@@Base>:
  404a70:	push   rbp
  404a71:	push   rbx
  404a72:	sub    rsp,0xa8
  404a79:	mov    rax,QWORD PTR fs:0x28
  404a82:	mov    QWORD PTR [rsp+0x98],rax
  404a8a:	xor    eax,eax
  404a8c:	test   cx,cx
  404a8f:	je     404b9f <flatcc_builder_create_struct@@Base+0x12f>
  404a95:	mov    rbx,rdi
  404a98:	mov    r8,rdx
  404a9b:	movzx  edi,cx
  404a9e:	cmp    cx,WORD PTR [rbx+0xe8]
  404aa5:	jbe    404aae <flatcc_builder_create_struct@@Base+0x3e>
  404aa7:	mov    WORD PTR [rbx+0xe8],cx
  404aae:	mov    edx,DWORD PTR [rbx+0xf0]
  404ab4:	lea    ecx,[rdi-0x1]
  404ab7:	mov    QWORD PTR [rsp],0x0
  404abf:	mov    DWORD PTR [rsp+0x8],0x0
  404ac7:	mov    eax,edx
  404ac9:	sub    eax,r8d
  404acc:	and    eax,ecx
  404ace:	test   r8,r8
  404ad1:	jne    404b60 <flatcc_builder_create_struct@@Base+0xf0>
  404ad7:	test   eax,eax
  404ad9:	je     404b06 <flatcc_builder_create_struct@@Base+0x96>
  404adb:	movsxd rsi,DWORD PTR [rsp+0x8]
  404ae0:	mov    rdi,0x409e80
  404ae7:	add    r8,rax
  404aea:	mov    QWORD PTR [rsp],r8
  404aee:	mov    rcx,rsi
  404af1:	shl    rsi,0x4
  404af5:	add    ecx,0x1
  404af8:	mov    QWORD PTR [rsp+rsi*1+0x10],rdi
  404afd:	mov    QWORD PTR [rsp+rsi*1+0x18],rax
  404b02:	mov    DWORD PTR [rsp+0x8],ecx
  404b06:	mov    ebp,edx
  404b08:	movabs rax,0x10000000f
  404b12:	sub    ebp,r8d
  404b15:	cmp    r8,rax
  404b18:	ja     404b7b <flatcc_builder_create_struct@@Base+0x10b>
  404b1a:	cmp    edx,ebp
  404b1c:	jle    404b7b <flatcc_builder_create_struct@@Base+0x10b>
  404b1e:	lea    rsi,[rsp+0x10]
  404b23:	mov    rdi,QWORD PTR [rbx+0x38]
  404b27:	mov    ecx,ebp
  404b29:	mov    edx,DWORD PTR [rsp+0x8]
  404b2d:	call   QWORD PTR [rbx+0x48]
  404b30:	test   eax,eax
  404b32:	jne    404b9a <flatcc_builder_create_struct@@Base+0x12a>
  404b34:	mov    rdx,QWORD PTR [rsp+0x98]
  404b3c:	xor    rdx,QWORD PTR fs:0x28
  404b45:	mov    DWORD PTR [rbx+0xf0],ebp
  404b4b:	mov    eax,ebp
  404b4d:	jne    404bbe <flatcc_builder_create_struct@@Base+0x14e>
  404b4f:	add    rsp,0xa8
  404b56:	pop    rbx
  404b57:	pop    rbp
  404b58:	ret    
  404b59:	nop    DWORD PTR [rax+0x0]
  404b60:	mov    QWORD PTR [rsp],r8
  404b64:	mov    QWORD PTR [rsp+0x10],rsi
  404b69:	mov    QWORD PTR [rsp+0x18],r8
  404b6e:	mov    DWORD PTR [rsp+0x8],0x1
  404b76:	jmp    404ad7 <flatcc_builder_create_struct@@Base+0x67>
  404b7b:	lea    rcx,[rip+0x524e]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  404b82:	lea    rsi,[rip+0x47ff]        # 409388 <_IO_stdin_used@@Base+0x388>
  404b89:	lea    rdi,[rip+0x4b8f]        # 40971f <_IO_stdin_used@@Base+0x71f>
  404b90:	mov    edx,0x287
  404b95:	call   403060 <__assert_fail@plt>
  404b9a:	call   403146 <posix_memalign@plt+0x56>
  404b9f:	lea    rcx,[rip+0x51ea]        # 409d90 <_IO_stdin_used@@Base+0xd90>
  404ba6:	lea    rsi,[rip+0x47db]        # 409388 <_IO_stdin_used@@Base+0x388>
  404bad:	lea    rdi,[rip+0x4ba6]        # 40975a <_IO_stdin_used@@Base+0x75a>
  404bb4:	mov    edx,0x30f
  404bb9:	call   403060 <__assert_fail@plt>
  404bbe:	call   403050 <__stack_chk_fail@plt>
  404bc3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404bce:	xchg   ax,ax

0000000000404bd0 <flatcc_builder_start_buffer@@Base>:
  404bd0:	push   r13
  404bd2:	push   r12
  404bd4:	mov    r13d,edx
  404bd7:	push   rbp
  404bd8:	push   rbx
  404bd9:	mov    rbp,rsi
  404bdc:	mov    rbx,rdi
  404bdf:	mov    r12d,ecx
  404be2:	sub    rsp,0x8
  404be6:	movzx  esi,WORD PTR [rdi+0xe8]
  404bed:	call   403da0 <flatcc_builder_default_alloc@@Base+0x260>
  404bf2:	test   eax,eax
  404bf4:	jne    404ca0 <flatcc_builder_start_buffer@@Base+0xd0>
  404bfa:	movzx  edx,WORD PTR [rbx+0xec]
  404c01:	mov    rdi,QWORD PTR [rbx+0x30]
  404c05:	mov    ecx,0x1
  404c0a:	mov    WORD PTR [rbx+0xe8],cx
  404c11:	test   rbp,rbp
  404c14:	mov    rsi,rbp
  404c17:	mov    WORD PTR [rdi+0x22],dx
  404c1b:	movzx  edx,WORD PTR [rbx+0x10c]
  404c22:	mov    WORD PTR [rbx+0xec],r13w
  404c2a:	mov    WORD PTR [rdi+0x20],dx
  404c2e:	mov    edx,DWORD PTR [rbx+0xf8]
  404c34:	mov    WORD PTR [rbx+0x10c],r12w
  404c3c:	mov    DWORD PTR [rdi+0x14],edx
  404c3f:	mov    edx,DWORD PTR [rbx+0x100]
  404c45:	mov    DWORD PTR [rdi+0x1c],edx
  404c48:	mov    edx,DWORD PTR [rbx+0xf0]
  404c4e:	mov    DWORD PTR [rbx+0xf8],edx
  404c54:	mov    edx,DWORD PTR [rbx+0xfc]
  404c5a:	lea    ecx,[rdx+0x1]
  404c5d:	mov    DWORD PTR [rbx+0x100],edx
  404c63:	mov    edx,DWORD PTR [rbx+0x110]
  404c69:	mov    DWORD PTR [rbx+0xfc],ecx
  404c6f:	mov    DWORD PTR [rdi+0x10],edx
  404c72:	je     404c90 <flatcc_builder_start_buffer@@Base+0xc0>
  404c74:	mov    edx,DWORD PTR [rsi]
  404c76:	mov    DWORD PTR [rbx+0x110],edx
  404c7c:	mov    edx,0x1
  404c81:	mov    WORD PTR [rdi+0xe],dx
  404c85:	add    rsp,0x8
  404c89:	pop    rbx
  404c8a:	pop    rbp
  404c8b:	pop    r12
  404c8d:	pop    r13
  404c8f:	ret    
  404c90:	mov    rsi,0x409e80
  404c97:	jmp    404c74 <flatcc_builder_start_buffer@@Base+0xa4>
  404c99:	nop    DWORD PTR [rax+0x0]
  404ca0:	mov    eax,0xffffffff
  404ca5:	jmp    404c85 <flatcc_builder_start_buffer@@Base+0xb5>
  404ca7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404cb0 <flatcc_builder_end_buffer@@Base>:
  404cb0:	push   rbp
  404cb1:	push   rbx
  404cb2:	xor    eax,eax
  404cb4:	sub    rsp,0x8
  404cb8:	movzx  r9d,WORD PTR [rdi+0x10c]
  404cc0:	mov    edx,DWORD PTR [rdi+0x100]
  404cc6:	and    r9d,0x2
  404cca:	test   edx,edx
  404ccc:	setne  al
  404ccf:	or     r9d,eax
  404cd2:	mov    rax,QWORD PTR [rdi+0x30]
  404cd6:	cmp    WORD PTR [rax+0xe],0x1
  404cdb:	jne    404dd1 <flatcc_builder_end_buffer@@Base+0x121>
  404ce1:	movzx  edx,WORD PTR [rdi+0xec]
  404ce8:	movzx  r8d,WORD PTR [rdi+0xe8]
  404cf0:	mov    rbx,rdi
  404cf3:	mov    ecx,esi
  404cf5:	cmp    dx,r8w
  404cf9:	ja     404d20 <flatcc_builder_end_buffer@@Base+0x70>
  404cfb:	lea    rsi,[rbx+0x110]
  404d02:	mov    rdi,rbx
  404d05:	call   4047f0 <flatcc_builder_create_buffer@@Base>
  404d0a:	test   eax,eax
  404d0c:	mov    ebp,eax
  404d0e:	jne    404d30 <flatcc_builder_end_buffer@@Base+0x80>
  404d10:	add    rsp,0x8
  404d14:	mov    eax,ebp
  404d16:	pop    rbx
  404d17:	pop    rbp
  404d18:	ret    
  404d19:	nop    DWORD PTR [rax+0x0]
  404d20:	mov    WORD PTR [rbx+0xe8],dx
  404d27:	mov    r8d,edx
  404d2a:	jmp    404cfb <flatcc_builder_end_buffer@@Base+0x4b>
  404d2c:	nop    DWORD PTR [rax+0x0]
  404d30:	mov    rax,QWORD PTR [rbx+0x30]
  404d34:	mov    rdi,QWORD PTR [rbx+0x18]
  404d38:	xor    esi,esi
  404d3a:	mov    edx,DWORD PTR [rax+0x14]
  404d3d:	mov    DWORD PTR [rbx+0xf8],edx
  404d43:	mov    edx,DWORD PTR [rax+0x1c]
  404d46:	mov    DWORD PTR [rbx+0x100],edx
  404d4c:	mov    edx,DWORD PTR [rax+0x10]
  404d4f:	mov    DWORD PTR [rbx+0x110],edx
  404d55:	movzx  eax,WORD PTR [rax+0x20]
  404d59:	mov    edx,DWORD PTR [rbx+0x20]
  404d5c:	mov    WORD PTR [rbx+0x10c],ax
  404d63:	call   403070 <memset@plt>
  404d68:	mov    rax,QWORD PTR [rbx+0x30]
  404d6c:	mov    edi,DWORD PTR [rbx+0x70]
  404d6f:	mov    esi,DWORD PTR [rax]
  404d71:	mov    edx,DWORD PTR [rax+0x8]
  404d74:	mov    ecx,DWORD PTR [rax+0x4]
  404d77:	mov    DWORD PTR [rbx+0x20],edx
  404d7a:	mov    rdx,rsi
  404d7d:	mov    DWORD PTR [rbx+0x28],esi
  404d80:	add    rsi,QWORD PTR [rbx+0x68]
  404d84:	sub    edi,edx
  404d86:	cmp    ecx,edi
  404d88:	mov    edx,edi
  404d8a:	cmovb  edx,ecx
  404d8d:	mov    DWORD PTR [rbx+0x24],edx
  404d90:	movzx  edx,WORD PTR [rbx+0xea]
  404d97:	cmp    dx,WORD PTR [rbx+0xe8]
  404d9e:	mov    QWORD PTR [rbx+0x18],rsi
  404da2:	mov    DWORD PTR [rax+0x4],ecx
  404da5:	jbe    404dae <flatcc_builder_end_buffer@@Base+0xfe>
  404da7:	mov    WORD PTR [rbx+0xe8],dx
  404dae:	movzx  edx,WORD PTR [rax+0xc]
  404db2:	sub    rax,0x24
  404db6:	sub    DWORD PTR [rbx+0x104],0x1
  404dbd:	mov    QWORD PTR [rbx+0x30],rax
  404dc1:	mov    eax,ebp
  404dc3:	mov    WORD PTR [rbx+0xea],dx
  404dca:	add    rsp,0x8
  404dce:	pop    rbx
  404dcf:	pop    rbp
  404dd0:	ret    
  404dd1:	lea    rcx,[rip+0x4f98]        # 409d70 <_IO_stdin_used@@Base+0xd70>
  404dd8:	lea    rsi,[rip+0x45a9]        # 409388 <_IO_stdin_used@@Base+0x388>
  404ddf:	lea    rdi,[rip+0x4622]        # 409408 <_IO_stdin_used@@Base+0x408>
  404de6:	mov    edx,0x346
  404deb:	call   403060 <__assert_fail@plt>

0000000000404df0 <flatcc_builder_start_struct@@Base>:
  404df0:	push   r12
  404df2:	push   rbp
  404df3:	mov    rbp,rsi
  404df6:	push   rbx
  404df7:	movzx  esi,dx
  404dfa:	mov    rbx,rdi
  404dfd:	call   403da0 <flatcc_builder_default_alloc@@Base+0x260>
  404e02:	test   eax,eax
  404e04:	jne    404e80 <flatcc_builder_start_struct@@Base+0x90>
  404e06:	mov    rcx,QWORD PTR [rbx+0x30]
  404e0a:	mov    eax,0x2
  404e0f:	mov    edi,DWORD PTR [rbx+0x70]
  404e12:	mov    WORD PTR [rcx+0xe],ax
  404e16:	mov    eax,DWORD PTR [rbx+0x28]
  404e19:	mov    rdx,rax
  404e1c:	add    rax,QWORD PTR [rbx+0x68]
  404e20:	sub    edi,edx
  404e22:	cmp    edi,0xfffffffc
  404e25:	mov    edx,edi
  404e27:	mov    QWORD PTR [rbx+0x18],rax
  404e2b:	ja     404e50 <flatcc_builder_start_struct@@Base+0x60>
  404e2d:	mov    DWORD PTR [rbx+0x24],edi
  404e30:	mov    r12d,DWORD PTR [rbx+0x20]
  404e34:	mov    DWORD PTR [rcx+0x4],0xfffffffc
  404e3b:	mov    rsi,r12
  404e3e:	add    esi,ebp
  404e40:	cmp    esi,edx
  404e42:	mov    DWORD PTR [rbx+0x20],esi
  404e45:	jae    404e60 <flatcc_builder_start_struct@@Base+0x70>
  404e47:	add    rax,r12
  404e4a:	pop    rbx
  404e4b:	pop    rbp
  404e4c:	pop    r12
  404e4e:	ret    
  404e4f:	nop
  404e50:	mov    DWORD PTR [rbx+0x24],0xfffffffc
  404e57:	mov    edx,0xfffffffc
  404e5c:	jmp    404e30 <flatcc_builder_start_struct@@Base+0x40>
  404e5e:	xchg   ax,ax
  404e60:	add    esi,0x1
  404e63:	mov    edx,0xfffffffc
  404e68:	mov    rdi,rbx
  404e6b:	call   403ae0 <emit_test@@Base+0x5c0>
  404e70:	test   eax,eax
  404e72:	jne    404e80 <flatcc_builder_start_struct@@Base+0x90>
  404e74:	mov    rax,QWORD PTR [rbx+0x18]
  404e78:	jmp    404e47 <flatcc_builder_start_struct@@Base+0x57>
  404e7a:	nop    WORD PTR [rax+rax*1+0x0]
  404e80:	pop    rbx
  404e81:	xor    eax,eax
  404e83:	pop    rbp
  404e84:	pop    r12
  404e86:	ret    
  404e87:	nop    WORD PTR [rax+rax*1+0x0]

0000000000404e90 <flatcc_builder_struct_edit@@Base>:
  404e90:	mov    rax,QWORD PTR [rdi+0x18]
  404e94:	ret    
  404e95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000404ea0 <flatcc_builder_end_struct@@Base>:
  404ea0:	push   rbp
  404ea1:	push   rbx
  404ea2:	sub    rsp,0x8
  404ea6:	mov    rax,QWORD PTR [rdi+0x30]
  404eaa:	cmp    WORD PTR [rax+0xe],0x2
  404eaf:	jne    404f57 <flatcc_builder_end_struct@@Base+0xb7>
  404eb5:	movzx  ecx,WORD PTR [rdi+0xea]
  404ebc:	mov    edx,DWORD PTR [rdi+0x20]
  404ebf:	mov    rbx,rdi
  404ec2:	mov    rsi,QWORD PTR [rdi+0x18]
  404ec6:	call   404a70 <flatcc_builder_create_struct@@Base>
  404ecb:	test   eax,eax
  404ecd:	mov    ebp,eax
  404ecf:	jne    404ee0 <flatcc_builder_end_struct@@Base+0x40>
  404ed1:	add    rsp,0x8
  404ed5:	mov    eax,ebp
  404ed7:	pop    rbx
  404ed8:	pop    rbp
  404ed9:	ret    
  404eda:	nop    WORD PTR [rax+rax*1+0x0]
  404ee0:	mov    edx,DWORD PTR [rbx+0x20]
  404ee3:	mov    rdi,QWORD PTR [rbx+0x18]
  404ee7:	xor    esi,esi
  404ee9:	call   403070 <memset@plt>
  404eee:	mov    rax,QWORD PTR [rbx+0x30]
  404ef2:	mov    edi,DWORD PTR [rbx+0x70]
  404ef5:	mov    esi,DWORD PTR [rax]
  404ef7:	mov    edx,DWORD PTR [rax+0x8]
  404efa:	mov    ecx,DWORD PTR [rax+0x4]
  404efd:	mov    DWORD PTR [rbx+0x20],edx
  404f00:	mov    rdx,rsi
  404f03:	mov    DWORD PTR [rbx+0x28],esi
  404f06:	add    rsi,QWORD PTR [rbx+0x68]
  404f0a:	sub    edi,edx
  404f0c:	cmp    ecx,edi
  404f0e:	mov    edx,edi
  404f10:	cmovb  edx,ecx
  404f13:	mov    DWORD PTR [rbx+0x24],edx
  404f16:	movzx  edx,WORD PTR [rbx+0xea]
  404f1d:	cmp    dx,WORD PTR [rbx+0xe8]
  404f24:	mov    QWORD PTR [rbx+0x18],rsi
  404f28:	mov    DWORD PTR [rax+0x4],ecx
  404f2b:	jbe    404f34 <flatcc_builder_end_struct@@Base+0x94>
  404f2d:	mov    WORD PTR [rbx+0xe8],dx
  404f34:	movzx  edx,WORD PTR [rax+0xc]
  404f38:	sub    rax,0x24
  404f3c:	sub    DWORD PTR [rbx+0x104],0x1
  404f43:	mov    QWORD PTR [rbx+0x30],rax
  404f47:	mov    eax,ebp
  404f49:	mov    WORD PTR [rbx+0xea],dx
  404f50:	add    rsp,0x8
  404f54:	pop    rbx
  404f55:	pop    rbp
  404f56:	ret    
  404f57:	lea    rcx,[rip+0x4df2]        # 409d50 <_IO_stdin_used@@Base+0xd50>
  404f5e:	lea    rsi,[rip+0x4423]        # 409388 <_IO_stdin_used@@Base+0x388>
  404f65:	lea    rdi,[rip+0x44cc]        # 409438 <_IO_stdin_used@@Base+0x438>
  404f6c:	mov    edx,0x368
  404f71:	call   403060 <__assert_fail@plt>
  404f76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000404f80 <flatcc_builder_extend_vector@@Base>:
  404f80:	push   rbp
  404f81:	push   rbx
  404f82:	mov    eax,esi
  404f84:	sub    rsp,0x8
  404f88:	mov    rdx,QWORD PTR [rdi+0x30]
  404f8c:	add    eax,DWORD PTR [rdx+0x14]
  404f8f:	setb   cl
  404f92:	cmp    DWORD PTR [rdx+0x18],eax
  404f95:	jb     404fdd <flatcc_builder_extend_vector@@Base+0x5d>
  404f97:	movzx  ecx,cl
  404f9a:	test   ecx,ecx
  404f9c:	jne    404fdd <flatcc_builder_extend_vector@@Base+0x5d>
  404f9e:	imul   esi,DWORD PTR [rdx+0x10]
  404fa2:	mov    DWORD PTR [rdx+0x14],eax
  404fa5:	mov    ebp,DWORD PTR [rdi+0x20]
  404fa8:	mov    rbx,rdi
  404fab:	add    esi,ebp
  404fad:	cmp    esi,DWORD PTR [rdi+0x24]
  404fb0:	mov    DWORD PTR [rdi+0x20],esi
  404fb3:	jae    404fc8 <flatcc_builder_extend_vector@@Base+0x48>
  404fb5:	mov    rax,rbp
  404fb8:	add    rax,QWORD PTR [rbx+0x18]
  404fbc:	add    rsp,0x8
  404fc0:	pop    rbx
  404fc1:	pop    rbp
  404fc2:	ret    
  404fc3:	nop    DWORD PTR [rax+rax*1+0x0]
  404fc8:	add    esi,0x1
  404fcb:	mov    edx,0xfffffffc
  404fd0:	call   403ae0 <emit_test@@Base+0x5c0>
  404fd5:	test   eax,eax
  404fd7:	je     404fb5 <flatcc_builder_extend_vector@@Base+0x35>
  404fd9:	xor    eax,eax
  404fdb:	jmp    404fbc <flatcc_builder_extend_vector@@Base+0x3c>
  404fdd:	call   403169 <posix_memalign@plt+0x79>
  404fe2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  404fed:	nop    DWORD PTR [rax]

0000000000404ff0 <flatcc_builder_vector_push@@Base>:
  404ff0:	push   r13
  404ff2:	push   r12
  404ff4:	push   rbp
  404ff5:	push   rbx
  404ff6:	sub    rsp,0x8
  404ffa:	mov    rax,QWORD PTR [rdi+0x30]
  404ffe:	cmp    WORD PTR [rax+0xe],0x4
  405003:	jne    405084 <flatcc_builder_vector_push@@Base+0x94>
  405005:	mov    edx,DWORD PTR [rax+0x14]
  405008:	cmp    edx,DWORD PTR [rax+0x18]
  40500b:	ja     405065 <flatcc_builder_vector_push@@Base+0x75>
  40500d:	add    edx,0x1
  405010:	mov    r12d,DWORD PTR [rax+0x10]
  405014:	mov    rbx,rdi
  405017:	mov    DWORD PTR [rax+0x14],edx
  40501a:	mov    ebp,DWORD PTR [rdi+0x20]
  40501d:	mov    r13,rsi
  405020:	mov    rcx,rbp
  405023:	add    ecx,r12d
  405026:	cmp    ecx,DWORD PTR [rdi+0x24]
  405029:	mov    DWORD PTR [rdi+0x20],ecx
  40502c:	jae    405050 <flatcc_builder_vector_push@@Base+0x60>
  40502e:	add    rbp,QWORD PTR [rbx+0x18]
  405032:	je     405042 <flatcc_builder_vector_push@@Base+0x52>
  405034:	mov    edx,r12d
  405037:	mov    rsi,r13
  40503a:	mov    rdi,rbp
  40503d:	call   4030a0 <memcpy@plt>
  405042:	add    rsp,0x8
  405046:	mov    rax,rbp
  405049:	pop    rbx
  40504a:	pop    rbp
  40504b:	pop    r12
  40504d:	pop    r13
  40504f:	ret    
  405050:	lea    esi,[rcx+0x1]
  405053:	mov    edx,0xfffffffc
  405058:	call   403ae0 <emit_test@@Base+0x5c0>
  40505d:	test   eax,eax
  40505f:	je     40502e <flatcc_builder_vector_push@@Base+0x3e>
  405061:	xor    ebp,ebp
  405063:	jmp    405042 <flatcc_builder_vector_push@@Base+0x52>
  405065:	lea    rcx,[rip+0x4ca4]        # 409d10 <_IO_stdin_used@@Base+0xd10>
  40506c:	lea    rsi,[rip+0x4315]        # 409388 <_IO_stdin_used@@Base+0x388>
  405073:	lea    rdi,[rip+0x441e]        # 409498 <_IO_stdin_used@@Base+0x498>
  40507a:	mov    edx,0x38c
  40507f:	call   403060 <__assert_fail@plt>
  405084:	lea    rcx,[rip+0x4c85]        # 409d10 <_IO_stdin_used@@Base+0xd10>
  40508b:	lea    rsi,[rip+0x42f6]        # 409388 <_IO_stdin_used@@Base+0x388>
  405092:	lea    rdi,[rip+0x43cf]        # 409468 <_IO_stdin_used@@Base+0x468>
  405099:	mov    edx,0x38b
  40509e:	call   403060 <__assert_fail@plt>
  4050a3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4050ae:	xchg   ax,ax

00000000004050b0 <flatcc_builder_append_vector@@Base>:
  4050b0:	push   r13
  4050b2:	push   r12
  4050b4:	push   rbp
  4050b5:	push   rbx
  4050b6:	sub    rsp,0x8
  4050ba:	mov    rax,QWORD PTR [rdi+0x30]
  4050be:	cmp    WORD PTR [rax+0xe],0x4
  4050c3:	jne    40513b <flatcc_builder_append_vector@@Base+0x8b>
  4050c5:	mov    r13,rsi
  4050c8:	mov    ecx,edx
  4050ca:	xor    esi,esi
  4050cc:	add    ecx,DWORD PTR [rax+0x14]
  4050cf:	setb   sil
  4050d3:	cmp    DWORD PTR [rax+0x18],ecx
  4050d6:	jb     405136 <flatcc_builder_append_vector@@Base+0x86>
  4050d8:	test   esi,esi
  4050da:	jne    405136 <flatcc_builder_append_vector@@Base+0x86>
  4050dc:	mov    ebx,DWORD PTR [rax+0x10]
  4050df:	mov    DWORD PTR [rax+0x14],ecx
  4050e2:	mov    rbp,rdi
  4050e5:	mov    r12d,DWORD PTR [rdi+0x20]
  4050e9:	imul   ebx,edx
  4050ec:	mov    rdx,r12
  4050ef:	add    edx,ebx
  4050f1:	cmp    edx,DWORD PTR [rdi+0x24]
  4050f4:	mov    DWORD PTR [rdi+0x20],edx
  4050f7:	jae    405120 <flatcc_builder_append_vector@@Base+0x70>
  4050f9:	add    r12,QWORD PTR [rbp+0x18]
  4050fd:	je     40510c <flatcc_builder_append_vector@@Base+0x5c>
  4050ff:	mov    edx,ebx
  405101:	mov    rsi,r13
  405104:	mov    rdi,r12
  405107:	call   4030a0 <memcpy@plt>
  40510c:	add    rsp,0x8
  405110:	mov    rax,r12
  405113:	pop    rbx
  405114:	pop    rbp
  405115:	pop    r12
  405117:	pop    r13
  405119:	ret    
  40511a:	nop    WORD PTR [rax+rax*1+0x0]
  405120:	lea    esi,[rdx+0x1]
  405123:	mov    edx,0xfffffffc
  405128:	call   403ae0 <emit_test@@Base+0x5c0>
  40512d:	test   eax,eax
  40512f:	je     4050f9 <flatcc_builder_append_vector@@Base+0x49>
  405131:	xor    r12d,r12d
  405134:	jmp    40510c <flatcc_builder_append_vector@@Base+0x5c>
  405136:	call   403169 <posix_memalign@plt+0x79>
  40513b:	lea    rcx,[rip+0x4bae]        # 409cf0 <_IO_stdin_used@@Base+0xcf0>
  405142:	lea    rsi,[rip+0x423f]        # 409388 <_IO_stdin_used@@Base+0x388>
  405149:	lea    rdi,[rip+0x4318]        # 409468 <_IO_stdin_used@@Base+0x468>
  405150:	mov    edx,0x393
  405155:	call   403060 <__assert_fail@plt>
  40515a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405160 <flatcc_builder_extend_offset_vector@@Base>:
  405160:	push   rbp
  405161:	push   rbx
  405162:	xor    edx,edx
  405164:	mov    ecx,esi
  405166:	sub    rsp,0x8
  40516a:	mov    rax,QWORD PTR [rdi+0x30]
  40516e:	add    ecx,DWORD PTR [rax+0x14]
  405171:	setb   dl
  405174:	test   edx,edx
  405176:	jne    4051bd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405178:	cmp    ecx,0x3fffffff
  40517e:	ja     4051bd <flatcc_builder_extend_offset_vector@@Base+0x5d>
  405180:	mov    DWORD PTR [rax+0x14],ecx
  405183:	mov    ebp,DWORD PTR [rdi+0x20]
  405186:	mov    rbx,rdi
  405189:	lea    eax,[rbp+rsi*4+0x0]
  40518d:	cmp    eax,DWORD PTR [rdi+0x24]
  405190:	mov    DWORD PTR [rdi+0x20],eax
  405193:	jae    4051a8 <flatcc_builder_extend_offset_vector@@Base+0x48>
  405195:	mov    rax,rbp
  405198:	add    rax,QWORD PTR [rbx+0x18]
  40519c:	add    rsp,0x8
  4051a0:	pop    rbx
  4051a1:	pop    rbp
  4051a2:	ret    
  4051a3:	nop    DWORD PTR [rax+rax*1+0x0]
  4051a8:	lea    esi,[rax+0x1]
  4051ab:	mov    edx,0xfffffffc
  4051b0:	call   403ae0 <emit_test@@Base+0x5c0>
  4051b5:	test   eax,eax
  4051b7:	je     405195 <flatcc_builder_extend_offset_vector@@Base+0x35>
  4051b9:	xor    eax,eax
  4051bb:	jmp    40519c <flatcc_builder_extend_offset_vector@@Base+0x3c>
  4051bd:	call   403169 <posix_memalign@plt+0x79>
  4051c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4051cd:	nop    DWORD PTR [rax]

00000000004051d0 <flatcc_builder_offset_vector_push@@Base>:
  4051d0:	push   r12
  4051d2:	push   rbp
  4051d3:	push   rbx
  4051d4:	mov    rdx,QWORD PTR [rdi+0x30]
  4051d8:	cmp    WORD PTR [rdx+0xe],0x5
  4051dd:	jne    405230 <flatcc_builder_offset_vector_push@@Base+0x60>
  4051df:	mov    eax,DWORD PTR [rdx+0x14]
  4051e2:	cmp    eax,0x3fffffff
  4051e7:	je     405229 <flatcc_builder_offset_vector_push@@Base+0x59>
  4051e9:	add    eax,0x1
  4051ec:	mov    rbp,rdi
  4051ef:	mov    r12d,esi
  4051f2:	mov    DWORD PTR [rdx+0x14],eax
  4051f5:	mov    ebx,DWORD PTR [rdi+0x20]
  4051f8:	lea    edx,[rbx+0x4]
  4051fb:	cmp    edx,DWORD PTR [rdi+0x24]
  4051fe:	mov    DWORD PTR [rdi+0x20],edx
  405201:	jae    405218 <flatcc_builder_offset_vector_push@@Base+0x48>
  405203:	mov    rax,rbx
  405206:	add    rax,QWORD PTR [rbp+0x18]
  40520a:	je     405229 <flatcc_builder_offset_vector_push@@Base+0x59>
  40520c:	mov    DWORD PTR [rax],r12d
  40520f:	pop    rbx
  405210:	pop    rbp
  405211:	pop    r12
  405213:	ret    
  405214:	nop    DWORD PTR [rax+0x0]
  405218:	lea    esi,[rbx+0x5]
  40521b:	mov    edx,0xfffffffc
  405220:	call   403ae0 <emit_test@@Base+0x5c0>
  405225:	test   eax,eax
  405227:	je     405203 <flatcc_builder_offset_vector_push@@Base+0x33>
  405229:	pop    rbx
  40522a:	xor    eax,eax
  40522c:	pop    rbp
  40522d:	pop    r12
  40522f:	ret    
  405230:	lea    rcx,[rip+0x4a89]        # 409cc0 <_IO_stdin_used@@Base+0xcc0>
  405237:	lea    rsi,[rip+0x414a]        # 409388 <_IO_stdin_used@@Base+0x388>
  40523e:	lea    rdi,[rip+0x4293]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  405245:	mov    edx,0x3a6
  40524a:	call   403060 <__assert_fail@plt>
  40524f:	nop

0000000000405250 <flatcc_builder_append_offset_vector@@Base>:
  405250:	push   r13
  405252:	push   r12
  405254:	push   rbp
  405255:	push   rbx
  405256:	sub    rsp,0x8
  40525a:	mov    rax,QWORD PTR [rdi+0x30]
  40525e:	cmp    WORD PTR [rax+0xe],0x5
  405263:	jne    4052db <flatcc_builder_append_offset_vector@@Base+0x8b>
  405265:	mov    r13,rsi
  405268:	mov    ecx,edx
  40526a:	xor    esi,esi
  40526c:	add    ecx,DWORD PTR [rax+0x14]
  40526f:	setb   sil
  405273:	test   esi,esi
  405275:	jne    4052d6 <flatcc_builder_append_offset_vector@@Base+0x86>
  405277:	cmp    ecx,0x3fffffff
  40527d:	ja     4052d6 <flatcc_builder_append_offset_vector@@Base+0x86>
  40527f:	mov    DWORD PTR [rax+0x14],ecx
  405282:	mov    r12d,DWORD PTR [rdi+0x20]
  405286:	lea    ebx,[rdx*4+0x0]
  40528d:	mov    rbp,rdi
  405290:	mov    rdx,r12
  405293:	add    edx,ebx
  405295:	cmp    edx,DWORD PTR [rdi+0x24]
  405298:	mov    DWORD PTR [rdi+0x20],edx
  40529b:	jae    4052c0 <flatcc_builder_append_offset_vector@@Base+0x70>
  40529d:	add    r12,QWORD PTR [rbp+0x18]
  4052a1:	je     4052b0 <flatcc_builder_append_offset_vector@@Base+0x60>
  4052a3:	mov    edx,ebx
  4052a5:	mov    rsi,r13
  4052a8:	mov    rdi,r12
  4052ab:	call   4030a0 <memcpy@plt>
  4052b0:	add    rsp,0x8
  4052b4:	mov    rax,r12
  4052b7:	pop    rbx
  4052b8:	pop    rbp
  4052b9:	pop    r12
  4052bb:	pop    r13
  4052bd:	ret    
  4052be:	xchg   ax,ax
  4052c0:	lea    esi,[rdx+0x1]
  4052c3:	mov    edx,0xfffffffc
  4052c8:	call   403ae0 <emit_test@@Base+0x5c0>
  4052cd:	test   eax,eax
  4052cf:	je     40529d <flatcc_builder_append_offset_vector@@Base+0x4d>
  4052d1:	xor    r12d,r12d
  4052d4:	jmp    4052b0 <flatcc_builder_append_offset_vector@@Base+0x60>
  4052d6:	call   403169 <posix_memalign@plt+0x79>
  4052db:	lea    rcx,[rip+0x499e]        # 409c80 <_IO_stdin_used@@Base+0xc80>
  4052e2:	lea    rsi,[rip+0x409f]        # 409388 <_IO_stdin_used@@Base+0x388>
  4052e9:	lea    rdi,[rip+0x41e8]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  4052f0:	mov    edx,0x3b4
  4052f5:	call   403060 <__assert_fail@plt>
  4052fa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405300 <flatcc_builder_extend_string@@Base>:
  405300:	push   rbp
  405301:	push   rbx
  405302:	sub    rsp,0x8
  405306:	mov    rax,QWORD PTR [rdi+0x30]
  40530a:	cmp    WORD PTR [rax+0xe],0x6
  40530f:	jne    40535a <flatcc_builder_extend_string@@Base+0x5a>
  405311:	mov    edx,esi
  405313:	add    edx,DWORD PTR [rax+0x14]
  405316:	jb     405355 <flatcc_builder_extend_string@@Base+0x55>
  405318:	mov    DWORD PTR [rax+0x14],edx
  40531b:	mov    ebp,DWORD PTR [rdi+0x20]
  40531e:	mov    rbx,rdi
  405321:	add    esi,ebp
  405323:	cmp    esi,DWORD PTR [rdi+0x24]
  405326:	mov    DWORD PTR [rdi+0x20],esi
  405329:	jae    405340 <flatcc_builder_extend_string@@Base+0x40>
  40532b:	mov    rax,rbp
  40532e:	add    rax,QWORD PTR [rbx+0x18]
  405332:	add    rsp,0x8
  405336:	pop    rbx
  405337:	pop    rbp
  405338:	ret    
  405339:	nop    DWORD PTR [rax+0x0]
  405340:	add    esi,0x1
  405343:	mov    edx,0xfffffffc
  405348:	call   403ae0 <emit_test@@Base+0x5c0>
  40534d:	test   eax,eax
  40534f:	je     40532b <flatcc_builder_extend_string@@Base+0x2b>
  405351:	xor    eax,eax
  405353:	jmp    405332 <flatcc_builder_extend_string@@Base+0x32>
  405355:	call   403169 <posix_memalign@plt+0x79>
  40535a:	lea    rcx,[rip+0x48ef]        # 409c50 <_IO_stdin_used@@Base+0xc50>
  405361:	lea    rsi,[rip+0x4020]        # 409388 <_IO_stdin_used@@Base+0x388>
  405368:	lea    rdi,[rip+0x41a1]        # 409510 <_IO_stdin_used@@Base+0x510>
  40536f:	mov    edx,0x3bd
  405374:	call   403060 <__assert_fail@plt>
  405379:	nop    DWORD PTR [rax+0x0]

0000000000405380 <flatcc_builder_append_string@@Base>:
  405380:	push   r13
  405382:	push   r12
  405384:	push   rbp
  405385:	push   rbx
  405386:	sub    rsp,0x8
  40538a:	mov    rax,QWORD PTR [rdi+0x30]
  40538e:	cmp    WORD PTR [rax+0xe],0x6
  405393:	jne    4053fb <flatcc_builder_append_string@@Base+0x7b>
  405395:	mov    rbp,rdx
  405398:	add    edx,DWORD PTR [rax+0x14]
  40539b:	jb     4053f6 <flatcc_builder_append_string@@Base+0x76>
  40539d:	mov    DWORD PTR [rax+0x14],edx
  4053a0:	mov    r12d,DWORD PTR [rdi+0x20]
  4053a4:	mov    rbx,rdi
  4053a7:	mov    r13,rsi
  4053aa:	mov    rdx,r12
  4053ad:	add    edx,ebp
  4053af:	cmp    edx,DWORD PTR [rdi+0x24]
  4053b2:	mov    DWORD PTR [rdi+0x20],edx
  4053b5:	jae    4053e0 <flatcc_builder_append_string@@Base+0x60>
  4053b7:	add    r12,QWORD PTR [rbx+0x18]
  4053bb:	je     4053ca <flatcc_builder_append_string@@Base+0x4a>
  4053bd:	mov    edx,ebp
  4053bf:	mov    rsi,r13
  4053c2:	mov    rdi,r12
  4053c5:	call   4030a0 <memcpy@plt>
  4053ca:	add    rsp,0x8
  4053ce:	mov    rax,r12
  4053d1:	pop    rbx
  4053d2:	pop    rbp
  4053d3:	pop    r12
  4053d5:	pop    r13
  4053d7:	ret    
  4053d8:	nop    DWORD PTR [rax+rax*1+0x0]
  4053e0:	lea    esi,[rdx+0x1]
  4053e3:	mov    edx,0xfffffffc
  4053e8:	call   403ae0 <emit_test@@Base+0x5c0>
  4053ed:	test   eax,eax
  4053ef:	je     4053b7 <flatcc_builder_append_string@@Base+0x37>
  4053f1:	xor    r12d,r12d
  4053f4:	jmp    4053ca <flatcc_builder_append_string@@Base+0x4a>
  4053f6:	call   403169 <posix_memalign@plt+0x79>
  4053fb:	lea    rcx,[rip+0x482e]        # 409c30 <_IO_stdin_used@@Base+0xc30>
  405402:	lea    rsi,[rip+0x3f7f]        # 409388 <_IO_stdin_used@@Base+0x388>
  405409:	lea    rdi,[rip+0x4100]        # 409510 <_IO_stdin_used@@Base+0x510>
  405410:	mov    edx,0x3c6
  405415:	call   403060 <__assert_fail@plt>
  40541a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000405420 <flatcc_builder_append_string_str@@Base>:
  405420:	push   rbp
  405421:	push   rbx
  405422:	mov    rbp,rdi
  405425:	mov    rdi,rsi
  405428:	mov    rbx,rsi
  40542b:	sub    rsp,0x8
  40542f:	call   403040 <strlen@plt>
  405434:	add    rsp,0x8
  405438:	mov    rsi,rbx
  40543b:	mov    rdi,rbp
  40543e:	pop    rbx
  40543f:	pop    rbp
  405440:	mov    rdx,rax
  405443:	jmp    405380 <flatcc_builder_append_string@@Base>
  405448:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405450 <flatcc_builder_append_string_strn@@Base>:
  405450:	push   r12
  405452:	push   rbp
  405453:	mov    rbp,rsi
  405456:	push   rbx
  405457:	mov    r12,rdi
  40545a:	xor    esi,esi
  40545c:	mov    rdi,rbp
  40545f:	mov    rbx,rdx
  405462:	call   403080 <memchr@plt>
  405467:	mov    rdx,rax
  40546a:	mov    rsi,rbp
  40546d:	mov    rdi,r12
  405470:	sub    rdx,rbp
  405473:	test   rax,rax
  405476:	cmovne rbx,rdx
  40547a:	mov    rdx,rbx
  40547d:	pop    rbx
  40547e:	pop    rbp
  40547f:	pop    r12
  405481:	jmp    405380 <flatcc_builder_append_string@@Base>
  405486:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000405490 <flatcc_builder_truncate_vector@@Base>:
  405490:	sub    rsp,0x8
  405494:	mov    rax,QWORD PTR [rdi+0x30]
  405498:	cmp    WORD PTR [rax+0xe],0x4
  40549d:	jne    4054d3 <flatcc_builder_truncate_vector@@Base+0x43>
  40549f:	mov    ecx,DWORD PTR [rax+0x14]
  4054a2:	cmp    rcx,rsi
  4054a5:	mov    rdx,rcx
  4054a8:	jb     4054f2 <flatcc_builder_truncate_vector@@Base+0x62>
  4054aa:	sub    edx,esi
  4054ac:	imul   esi,DWORD PTR [rax+0x10]
  4054b0:	mov    DWORD PTR [rax+0x14],edx
  4054b3:	mov    eax,DWORD PTR [rdi+0x20]
  4054b6:	mov    rcx,QWORD PTR [rdi+0x18]
  4054ba:	sub    eax,esi
  4054bc:	mov    edx,esi
  4054be:	xor    esi,esi
  4054c0:	mov    DWORD PTR [rdi+0x20],eax
  4054c3:	lea    rdi,[rcx+rax*1]
  4054c7:	call   403070 <memset@plt>
  4054cc:	xor    eax,eax
  4054ce:	add    rsp,0x8
  4054d2:	ret    
  4054d3:	lea    rcx,[rip+0x4736]        # 409c10 <_IO_stdin_used@@Base+0xc10>
  4054da:	lea    rsi,[rip+0x3ea7]        # 409388 <_IO_stdin_used@@Base+0x388>
  4054e1:	lea    rdi,[rip+0x3f80]        # 409468 <_IO_stdin_used@@Base+0x468>
  4054e8:	mov    edx,0x3d9
  4054ed:	call   403060 <__assert_fail@plt>
  4054f2:	lea    rcx,[rip+0x4717]        # 409c10 <_IO_stdin_used@@Base+0xc10>
  4054f9:	lea    rsi,[rip+0x3e88]        # 409388 <_IO_stdin_used@@Base+0x388>
  405500:	lea    rdi,[rip+0x4039]        # 409540 <_IO_stdin_used@@Base+0x540>
  405507:	mov    edx,0x3da
  40550c:	call   403060 <__assert_fail@plt>
  405511:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40551c:	nop    DWORD PTR [rax+0x0]

0000000000405520 <flatcc_builder_truncate_offset_vector@@Base>:
  405520:	sub    rsp,0x8
  405524:	mov    rax,QWORD PTR [rdi+0x30]
  405528:	cmp    WORD PTR [rax+0xe],0x5
  40552d:	jne    40555f <flatcc_builder_truncate_offset_vector@@Base+0x3f>
  40552f:	mov    edx,DWORD PTR [rax+0x14]
  405532:	cmp    edx,esi
  405534:	jb     40557e <flatcc_builder_truncate_offset_vector@@Base+0x5e>
  405536:	sub    edx,esi
  405538:	imul   esi,DWORD PTR [rax+0x10]
  40553c:	mov    DWORD PTR [rax+0x14],edx
  40553f:	mov    eax,DWORD PTR [rdi+0x20]
  405542:	mov    rcx,QWORD PTR [rdi+0x18]
  405546:	sub    eax,esi
  405548:	mov    edx,esi
  40554a:	xor    esi,esi
  40554c:	mov    DWORD PTR [rdi+0x20],eax
  40554f:	lea    rdi,[rcx+rax*1]
  405553:	call   403070 <memset@plt>
  405558:	xor    eax,eax
  40555a:	add    rsp,0x8
  40555e:	ret    
  40555f:	lea    rcx,[rip+0x467a]        # 409be0 <_IO_stdin_used@@Base+0xbe0>
  405566:	lea    rsi,[rip+0x3e1b]        # 409388 <_IO_stdin_used@@Base+0x388>
  40556d:	lea    rdi,[rip+0x3f64]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  405574:	mov    edx,0x3e2
  405579:	call   403060 <__assert_fail@plt>
  40557e:	lea    rcx,[rip+0x465b]        # 409be0 <_IO_stdin_used@@Base+0xbe0>
  405585:	lea    rsi,[rip+0x3dfc]        # 409388 <_IO_stdin_used@@Base+0x388>
  40558c:	lea    rdi,[rip+0x3fd5]        # 409568 <_IO_stdin_used@@Base+0x568>
  405593:	mov    edx,0x3e3
  405598:	call   403060 <__assert_fail@plt>
  40559d:	nop    DWORD PTR [rax]

00000000004055a0 <flatcc_builder_truncate_string@@Base>:
  4055a0:	sub    rsp,0x8
  4055a4:	mov    rdx,QWORD PTR [rdi+0x30]
  4055a8:	cmp    WORD PTR [rdx+0xe],0x6
  4055ad:	jne    4055e0 <flatcc_builder_truncate_string@@Base+0x40>
  4055af:	mov    ecx,DWORD PTR [rdx+0x14]
  4055b2:	cmp    rcx,rsi
  4055b5:	mov    rax,rcx
  4055b8:	jb     4055ff <flatcc_builder_truncate_string@@Base+0x5f>
  4055ba:	sub    eax,esi
  4055bc:	mov    DWORD PTR [rdx+0x14],eax
  4055bf:	mov    eax,DWORD PTR [rdi+0x20]
  4055c2:	mov    rdx,QWORD PTR [rdi+0x18]
  4055c6:	sub    eax,esi
  4055c8:	mov    DWORD PTR [rdi+0x20],eax
  4055cb:	lea    rdi,[rdx+rax*1]
  4055cf:	mov    rdx,rsi
  4055d2:	xor    esi,esi
  4055d4:	call   403070 <memset@plt>
  4055d9:	xor    eax,eax
  4055db:	add    rsp,0x8
  4055df:	ret    
  4055e0:	lea    rcx,[rip+0x45d9]        # 409bc0 <_IO_stdin_used@@Base+0xbc0>
  4055e7:	lea    rsi,[rip+0x3d9a]        # 409388 <_IO_stdin_used@@Base+0x388>
  4055ee:	lea    rdi,[rip+0x3f1b]        # 409510 <_IO_stdin_used@@Base+0x510>
  4055f5:	mov    edx,0x3eb
  4055fa:	call   403060 <__assert_fail@plt>
  4055ff:	lea    rcx,[rip+0x45ba]        # 409bc0 <_IO_stdin_used@@Base+0xbc0>
  405606:	lea    rsi,[rip+0x3d7b]        # 409388 <_IO_stdin_used@@Base+0x388>
  40560d:	lea    rdi,[rip+0x3f94]        # 4095a8 <_IO_stdin_used@@Base+0x5a8>
  405614:	mov    edx,0x3ec
  405619:	call   403060 <__assert_fail@plt>
  40561e:	xchg   ax,ax

0000000000405620 <flatcc_builder_start_vector@@Base>:
  405620:	push   r12
  405622:	cmp    dx,0x4
  405626:	push   rbp
  405627:	mov    rbp,rsi
  40562a:	mov    esi,0x4
  40562f:	push   rbx
  405630:	cmovb  edx,esi
  405633:	mov    rbx,rdi
  405636:	mov    r12,rcx
  405639:	movzx  esi,dx
  40563c:	call   403da0 <flatcc_builder_default_alloc@@Base+0x260>
  405641:	test   eax,eax
  405643:	jne    405690 <flatcc_builder_start_vector@@Base+0x70>
  405645:	mov    rsi,QWORD PTR [rbx+0x30]
  405649:	mov    edx,0x4
  40564e:	mov    DWORD PTR [rsi+0x10],ebp
  405651:	mov    DWORD PTR [rsi+0x14],0x0
  405658:	mov    DWORD PTR [rsi+0x18],r12d
  40565c:	mov    WORD PTR [rsi+0xe],dx
  405660:	mov    edx,DWORD PTR [rbx+0x28]
  405663:	mov    rcx,rdx
  405666:	add    rdx,QWORD PTR [rbx+0x68]
  40566a:	mov    QWORD PTR [rbx+0x18],rdx
  40566e:	mov    edx,DWORD PTR [rbx+0x70]
  405671:	sub    edx,ecx
  405673:	mov    ecx,0xfffffffc
  405678:	cmp    edx,ecx
  40567a:	cmova  edx,ecx
  40567d:	mov    DWORD PTR [rbx+0x24],edx
  405680:	mov    DWORD PTR [rsi+0x4],ecx
  405683:	pop    rbx
  405684:	pop    rbp
  405685:	pop    r12
  405687:	ret    
  405688:	nop    DWORD PTR [rax+rax*1+0x0]
  405690:	mov    eax,0xffffffff
  405695:	jmp    405683 <flatcc_builder_start_vector@@Base+0x63>
  405697:	nop    WORD PTR [rax+rax*1+0x0]

00000000004056a0 <flatcc_builder_start_offset_vector@@Base>:
  4056a0:	push   rbx
  4056a1:	mov    esi,0x4
  4056a6:	mov    rbx,rdi
  4056a9:	call   403da0 <flatcc_builder_default_alloc@@Base+0x260>
  4056ae:	test   eax,eax
  4056b0:	jne    4056f8 <flatcc_builder_start_offset_vector@@Base+0x58>
  4056b2:	mov    rcx,QWORD PTR [rbx+0x30]
  4056b6:	mov    edx,0x5
  4056bb:	mov    DWORD PTR [rcx+0x10],0x4
  4056c2:	mov    DWORD PTR [rcx+0x14],0x0
  4056c9:	mov    WORD PTR [rcx+0xe],dx
  4056cd:	mov    edx,DWORD PTR [rbx+0x28]
  4056d0:	mov    rsi,rdx
  4056d3:	add    rdx,QWORD PTR [rbx+0x68]
  4056d7:	mov    QWORD PTR [rbx+0x18],rdx
  4056db:	mov    edx,DWORD PTR [rbx+0x70]
  4056de:	sub    edx,esi
  4056e0:	mov    esi,0xfffffffc
  4056e5:	cmp    edx,esi
  4056e7:	cmova  edx,esi
  4056ea:	mov    DWORD PTR [rbx+0x24],edx
  4056ed:	mov    DWORD PTR [rcx+0x4],esi
  4056f0:	pop    rbx
  4056f1:	ret    
  4056f2:	nop    WORD PTR [rax+rax*1+0x0]
  4056f8:	mov    eax,0xffffffff
  4056fd:	pop    rbx
  4056fe:	ret    
  4056ff:	nop

0000000000405700 <flatcc_builder_start_string@@Base>:
  405700:	push   rbx
  405701:	mov    esi,0x1
  405706:	mov    rbx,rdi
  405709:	call   403da0 <flatcc_builder_default_alloc@@Base+0x260>
  40570e:	test   eax,eax
  405710:	jne    405758 <flatcc_builder_start_string@@Base+0x58>
  405712:	mov    rcx,QWORD PTR [rbx+0x30]
  405716:	mov    edx,0x6
  40571b:	mov    DWORD PTR [rcx+0x10],0x1
  405722:	mov    DWORD PTR [rcx+0x14],0x0
  405729:	mov    WORD PTR [rcx+0xe],dx
  40572d:	mov    edx,DWORD PTR [rbx+0x28]
  405730:	mov    rsi,rdx
  405733:	add    rdx,QWORD PTR [rbx+0x68]
  405737:	mov    QWORD PTR [rbx+0x18],rdx
  40573b:	mov    edx,DWORD PTR [rbx+0x70]
  40573e:	sub    edx,esi
  405740:	mov    esi,0xfffffffc
  405745:	cmp    edx,esi
  405747:	cmova  edx,esi
  40574a:	mov    DWORD PTR [rbx+0x24],edx
  40574d:	mov    DWORD PTR [rcx+0x4],esi
  405750:	pop    rbx
  405751:	ret    
  405752:	nop    WORD PTR [rax+rax*1+0x0]
  405758:	mov    eax,0xffffffff
  40575d:	pop    rbx
  40575e:	ret    
  40575f:	nop

0000000000405760 <flatcc_builder_reserve_table@@Base>:
  405760:	test   esi,esi
  405762:	push   r12
  405764:	push   rbp
  405765:	push   rbx
  405766:	js     40581f <flatcc_builder_reserve_table@@Base+0xbf>
  40576c:	mov    rax,QWORD PTR [rdi+0x30]
  405770:	lea    r12d,[rsi+rsi*1+0x4]
  405775:	mov    rbx,rdi
  405778:	movzx  edx,WORD PTR [rax+0x1c]
  40577c:	mov    eax,DWORD PTR [rax+0x10]
  40577f:	lea    ebp,[rax+rdx*2]
  405782:	mov    edx,r12d
  405785:	add    rdx,rbp
  405788:	cmp    rdx,QWORD PTR [rdi+0x60]
  40578c:	ja     4057d0 <flatcc_builder_reserve_table@@Base+0x70>
  40578e:	add    rbp,QWORD PTR [rbx+0x58]
  405792:	je     405810 <flatcc_builder_reserve_table@@Base+0xb0>
  405794:	mov    rax,QWORD PTR [rbx+0x30]
  405798:	add    rbp,0x4
  40579c:	lea    edx,[r12-0x3]
  4057a1:	mov    QWORD PTR [rbx+0x8],rbp
  4057a5:	mov    ebp,DWORD PTR [rax+0x14]
  4057a8:	add    rdx,rbp
  4057ab:	cmp    rdx,QWORD PTR [rbx+0x90]
  4057b2:	ja     4057f0 <flatcc_builder_reserve_table@@Base+0x90>
  4057b4:	add    rbp,QWORD PTR [rbx+0x88]
  4057bb:	xor    eax,eax
  4057bd:	test   rbp,rbp
  4057c0:	mov    QWORD PTR [rbx],rbp
  4057c3:	sete   al
  4057c6:	neg    eax
  4057c8:	pop    rbx
  4057c9:	pop    rbp
  4057ca:	pop    r12
  4057cc:	ret    
  4057cd:	nop    DWORD PTR [rax]
  4057d0:	lea    rsi,[rdi+0x58]
  4057d4:	xor    r8d,r8d
  4057d7:	mov    rdi,QWORD PTR [rdi+0x40]
  4057db:	mov    ecx,0x1
  4057e0:	call   QWORD PTR [rbx+0x50]
  4057e3:	test   eax,eax
  4057e5:	je     40578e <flatcc_builder_reserve_table@@Base+0x2e>
  4057e7:	call   403100 <posix_memalign@plt+0x10>
  4057ec:	nop    DWORD PTR [rax+0x0]
  4057f0:	xor    ecx,ecx
  4057f2:	lea    rsi,[rbx+0x88]
  4057f9:	mov    rdi,QWORD PTR [rbx+0x40]
  4057fd:	mov    r8d,0x3
  405803:	call   QWORD PTR [rbx+0x50]
  405806:	test   eax,eax
  405808:	je     4057b4 <flatcc_builder_reserve_table@@Base+0x54>
  40580a:	jmp    4057e7 <flatcc_builder_reserve_table@@Base+0x87>
  40580c:	nop    DWORD PTR [rax+0x0]
  405810:	mov    QWORD PTR [rbx+0x8],0x0
  405818:	mov    eax,0xffffffff
  40581d:	jmp    4057c8 <flatcc_builder_reserve_table@@Base+0x68>
  40581f:	lea    rcx,[rip+0x437a]        # 409ba0 <_IO_stdin_used@@Base+0xba0>
  405826:	lea    rsi,[rip+0x3b5b]        # 409388 <_IO_stdin_used@@Base+0x388>
  40582d:	lea    rdi,[rip+0x3f47]        # 40977b <_IO_stdin_used@@Base+0x77b>
  405834:	mov    edx,0x429
  405839:	call   403060 <__assert_fail@plt>
  40583e:	xchg   ax,ax

0000000000405840 <flatcc_builder_start_table@@Base>:
  405840:	push   r13
  405842:	push   r12
  405844:	mov    r12d,esi
  405847:	push   rbp
  405848:	push   rbx
  405849:	mov    esi,0x4
  40584e:	mov    rbx,rdi
  405851:	sub    rsp,0x8
  405855:	call   403da0 <flatcc_builder_default_alloc@@Base+0x260>
  40585a:	test   eax,eax
  40585c:	jne    405990 <flatcc_builder_start_table@@Base+0x150>
  405862:	mov    rcx,QWORD PTR [rbx+0x8]
  405866:	mov    ebp,eax
  405868:	mov    rax,QWORD PTR [rbx+0x58]
  40586c:	mov    rdx,QWORD PTR [rbx+0x30]
  405870:	xor    edi,edi
  405872:	mov    r8d,0x3
  405878:	sub    rcx,rax
  40587b:	mov    DWORD PTR [rdx+0x10],ecx
  40587e:	mov    rsi,QWORD PTR [rbx]
  405881:	sub    rsi,QWORD PTR [rbx+0x88]
  405888:	mov    DWORD PTR [rdx+0x14],esi
  40588b:	mov    esi,DWORD PTR [rbx+0x14]
  40588e:	mov    DWORD PTR [rdx+0x18],esi
  405891:	movzx  esi,WORD PTR [rbx+0x10]
  405895:	mov    WORD PTR [rdx+0x1c],si
  405899:	lea    r13d,[rcx+rsi*2]
  40589d:	mov    DWORD PTR [rbx+0x14],0x2f693b52
  4058a4:	mov    WORD PTR [rbx+0x10],di
  4058a8:	mov    WORD PTR [rdx+0xe],r8w
  4058ad:	lea    edx,[r12+r12*1+0x4]
  4058b2:	add    rdx,r13
  4058b5:	cmp    rdx,QWORD PTR [rbx+0x60]
  4058b9:	ja     405938 <flatcc_builder_start_table@@Base+0xf8>
  4058bb:	add    rax,r13
  4058be:	je     405988 <flatcc_builder_start_table@@Base+0x148>
  4058c4:	add    rax,0x4
  4058c8:	lea    edx,[r12+r12*1+0x1]
  4058cd:	mov    QWORD PTR [rbx+0x8],rax
  4058d1:	mov    rax,QWORD PTR [rbx+0x30]
  4058d5:	mov    r13d,DWORD PTR [rax+0x14]
  4058d9:	add    rdx,r13
  4058dc:	cmp    rdx,QWORD PTR [rbx+0x90]
  4058e3:	ja     405960 <flatcc_builder_start_table@@Base+0x120>
  4058e5:	add    r13,QWORD PTR [rbx+0x88]
  4058ec:	test   r13,r13
  4058ef:	mov    QWORD PTR [rbx],r13
  4058f2:	je     405990 <flatcc_builder_start_table@@Base+0x150>
  4058f8:	mov    eax,DWORD PTR [rbx+0x28]
  4058fb:	mov    rdx,rax
  4058fe:	add    rax,QWORD PTR [rbx+0x68]
  405902:	mov    QWORD PTR [rbx+0x18],rax
  405906:	mov    eax,DWORD PTR [rbx+0x70]
  405909:	sub    eax,edx
  40590b:	mov    edx,0xfffc
  405910:	cmp    eax,0xfffc
  405915:	cmova  eax,edx
  405918:	mov    DWORD PTR [rbx+0x24],eax
  40591b:	mov    rax,QWORD PTR [rbx+0x30]
  40591f:	mov    DWORD PTR [rax+0x4],0xfffc
  405926:	add    rsp,0x8
  40592a:	mov    eax,ebp
  40592c:	pop    rbx
  40592d:	pop    rbp
  40592e:	pop    r12
  405930:	pop    r13
  405932:	ret    
  405933:	nop    DWORD PTR [rax+rax*1+0x0]
  405938:	xor    r8d,r8d
  40593b:	lea    rsi,[rbx+0x58]
  40593f:	mov    rdi,QWORD PTR [rbx+0x40]
  405943:	mov    ecx,0x1
  405948:	call   QWORD PTR [rbx+0x50]
  40594b:	test   eax,eax
  40594d:	jne    40597e <flatcc_builder_start_table@@Base+0x13e>
  40594f:	mov    rax,QWORD PTR [rbx+0x58]
  405953:	jmp    4058bb <flatcc_builder_start_table@@Base+0x7b>
  405958:	nop    DWORD PTR [rax+rax*1+0x0]
  405960:	xor    ecx,ecx
  405962:	lea    rsi,[rbx+0x88]
  405969:	mov    rdi,QWORD PTR [rbx+0x40]
  40596d:	mov    r8d,0x3
  405973:	call   QWORD PTR [rbx+0x50]
  405976:	test   eax,eax
  405978:	je     4058e5 <flatcc_builder_start_table@@Base+0xa5>
  40597e:	call   403100 <posix_memalign@plt+0x10>
  405983:	nop    DWORD PTR [rax+rax*1+0x0]
  405988:	mov    QWORD PTR [rbx+0x8],0x0
  405990:	add    rsp,0x8
  405994:	mov    ebp,0xffffffff
  405999:	pop    rbx
  40599a:	mov    eax,ebp
  40599c:	pop    rbp
  40599d:	pop    r12
  40599f:	pop    r13
  4059a1:	ret    
  4059a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4059ad:	nop    DWORD PTR [rax]

00000000004059b0 <flatcc_builder_create_vtable@@Base>:
  4059b0:	push   rbp
  4059b1:	push   rbx
  4059b2:	mov    rbp,rdi
  4059b5:	sub    rsp,0xa8
  4059bc:	mov    rax,QWORD PTR fs:0x28
  4059c5:	mov    QWORD PTR [rsp+0x98],rax
  4059cd:	xor    eax,eax
  4059cf:	test   dx,dx
  4059d2:	mov    QWORD PTR [rsp],0x0
  4059da:	mov    DWORD PTR [rsp+0x8],0x0
  4059e2:	je     405a70 <flatcc_builder_create_vtable@@Base+0xc0>
  4059e8:	mov    QWORD PTR [rsp+0x10],rsi
  4059ed:	mov    esi,DWORD PTR [rdi+0x100]
  4059f3:	movzx  r8d,dx
  4059f7:	mov    QWORD PTR [rsp],r8
  4059fb:	mov    QWORD PTR [rsp+0x18],r8
  405a00:	movzx  edx,dx
  405a03:	mov    DWORD PTR [rsp+0x8],0x1
  405a0b:	test   esi,esi
  405a0d:	je     405aa8 <flatcc_builder_create_vtable@@Base+0xf8>
  405a13:	mov    eax,DWORD PTR [rbp+0xf0]
  405a19:	mov    ebx,eax
  405a1b:	sub    ebx,edx
  405a1d:	cmp    eax,ebx
  405a1f:	jle    405a84 <flatcc_builder_create_vtable@@Base+0xd4>
  405a21:	lea    rsi,[rsp+0x10]
  405a26:	mov    rdi,QWORD PTR [rbp+0x38]
  405a2a:	mov    ecx,ebx
  405a2c:	mov    edx,DWORD PTR [rsp+0x8]
  405a30:	call   QWORD PTR [rbp+0x48]
  405a33:	test   eax,eax
  405a35:	jne    405b00 <flatcc_builder_create_vtable@@Base+0x150>
  405a3b:	cmp    ebx,0x1
  405a3e:	mov    DWORD PTR [rbp+0xf0],ebx
  405a44:	sbb    ebx,0xffffffff
  405a47:	mov    rcx,QWORD PTR [rsp+0x98]
  405a4f:	xor    rcx,QWORD PTR fs:0x28
  405a58:	mov    eax,ebx
  405a5a:	jne    405afb <flatcc_builder_create_vtable@@Base+0x14b>
  405a60:	add    rsp,0xa8
  405a67:	pop    rbx
  405a68:	pop    rbp
  405a69:	ret    
  405a6a:	nop    WORD PTR [rax+rax*1+0x0]
  405a70:	mov    edx,DWORD PTR [rdi+0x100]
  405a76:	test   edx,edx
  405a78:	jne    405a84 <flatcc_builder_create_vtable@@Base+0xd4>
  405a7a:	mov    eax,DWORD PTR [rdi+0x124]
  405a80:	test   eax,eax
  405a82:	je     405af0 <flatcc_builder_create_vtable@@Base+0x140>
  405a84:	lea    rcx,[rip+0x4345]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  405a8b:	lea    rsi,[rip+0x38f6]        # 409388 <_IO_stdin_used@@Base+0x388>
  405a92:	lea    rdi,[rip+0x3c86]        # 40971f <_IO_stdin_used@@Base+0x71f>
  405a99:	mov    edx,0x287
  405a9e:	call   403060 <__assert_fail@plt>
  405aa3:	nop    DWORD PTR [rax+rax*1+0x0]
  405aa8:	mov    ecx,DWORD PTR [rdi+0x124]
  405aae:	test   ecx,ecx
  405ab0:	jne    405a13 <flatcc_builder_create_vtable@@Base+0x63>
  405ab6:	mov    ebx,DWORD PTR [rdi+0xf4]
  405abc:	add    edx,ebx
  405abe:	cmp    ebx,edx
  405ac0:	mov    DWORD PTR [rdi+0xf4],edx
  405ac6:	jg     405b24 <flatcc_builder_create_vtable@@Base+0x174>
  405ac8:	lea    rsi,[rsp+0x10]
  405acd:	mov    rdi,QWORD PTR [rbp+0x38]
  405ad1:	mov    ecx,ebx
  405ad3:	mov    edx,DWORD PTR [rsp+0x8]
  405ad7:	call   QWORD PTR [rbp+0x48]
  405ada:	test   eax,eax
  405adc:	jne    405b05 <flatcc_builder_create_vtable@@Base+0x155>
  405ade:	add    ebx,0x1
  405ae1:	jmp    405a47 <flatcc_builder_create_vtable@@Base+0x97>
  405ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405af0:	mov    ebx,DWORD PTR [rbp+0xf4]
  405af6:	xor    r8d,r8d
  405af9:	jmp    405ac8 <flatcc_builder_create_vtable@@Base+0x118>
  405afb:	call   403050 <__stack_chk_fail@plt>
  405b00:	call   403146 <posix_memalign@plt+0x56>
  405b05:	lea    rcx,[rip+0x42d4]        # 409de0 <_IO_stdin_used@@Base+0xde0>
  405b0c:	lea    rsi,[rip+0x3875]        # 409388 <_IO_stdin_used@@Base+0x388>
  405b13:	lea    rdi,[rip+0x3c05]        # 40971f <_IO_stdin_used@@Base+0x71f>
  405b1a:	mov    edx,0x2a5
  405b1f:	call   403060 <__assert_fail@plt>
  405b24:	call   403123 <posix_memalign@plt+0x33>
  405b29:	nop    DWORD PTR [rax+0x0]

0000000000405b30 <flatcc_builder_create_cached_vtable@@Base>:
  405b30:	push   r15
  405b32:	push   r14
  405b34:	mov    r15,rdi
  405b37:	push   r13
  405b39:	push   r12
  405b3b:	movzx  r14d,dx
  405b3f:	push   rbp
  405b40:	push   rbx
  405b41:	mov    ebp,ecx
  405b43:	sub    rsp,0x38
  405b47:	mov    rbx,QWORD PTR [rdi+0xd8]
  405b4e:	mov    QWORD PTR [rsp+0x10],rsi
  405b53:	mov    DWORD PTR [rsp+0x2c],edx
  405b57:	test   rbx,rbx
  405b5a:	je     405ce8 <flatcc_builder_create_cached_vtable@@Base+0x1b8>
  405b60:	mov    eax,0x20
  405b65:	sub    eax,ebx
  405b67:	shrx   ebp,ebp,eax
  405b6c:	mov    rax,QWORD PTR [r15+0xa8]
  405b73:	lea    r12,[rax+rbp*4]
  405b77:	test   r12,r12
  405b7a:	je     405cd0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405b80:	mov    ebp,DWORD PTR [r12]
  405b84:	test   ebp,ebp
  405b86:	je     405df0 <flatcc_builder_create_cached_vtable@@Base+0x2c0>
  405b8c:	movzx  eax,r14w
  405b90:	mov    r11,QWORD PTR [r15+0xb8]
  405b97:	mov    r8,QWORD PTR [r15+0x78]
  405b9b:	mov    r13,r12
  405b9e:	mov    QWORD PTR [rsp+0x20],0x0
  405ba7:	mov    QWORD PTR [rsp+0x18],rax
  405bac:	jmp    405bbb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  405bae:	xchg   ax,ax
  405bb0:	mov    ebp,DWORD PTR [rbx+0xc]
  405bb3:	lea    r13,[rbx+0xc]
  405bb7:	test   ebp,ebp
  405bb9:	je     405c18 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  405bbb:	mov    ebx,ebp
  405bbd:	add    rbx,r11
  405bc0:	mov    esi,DWORD PTR [rbx+0x8]
  405bc3:	add    rsi,r8
  405bc6:	cmp    WORD PTR [rsi],r14w
  405bca:	jne    405bb0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405bcc:	mov    rdx,QWORD PTR [rsp+0x18]
  405bd1:	mov    rdi,QWORD PTR [rsp+0x10]
  405bd6:	mov    QWORD PTR [rsp+0x8],r8
  405bdb:	mov    QWORD PTR [rsp],r11
  405bdf:	call   403090 <memcmp@plt>
  405be4:	test   eax,eax
  405be6:	mov    r11,QWORD PTR [rsp]
  405bea:	mov    r8,QWORD PTR [rsp+0x8]
  405bef:	jne    405bb0 <flatcc_builder_create_cached_vtable@@Base+0x80>
  405bf1:	mov    eax,DWORD PTR [r15+0x100]
  405bf8:	cmp    DWORD PTR [rbx+0x4],eax
  405bfb:	je     405ca0 <flatcc_builder_create_cached_vtable@@Base+0x170>
  405c01:	mov    ebp,DWORD PTR [rbx+0xc]
  405c04:	lea    r13,[rbx+0xc]
  405c08:	mov    QWORD PTR [rsp+0x20],rbx
  405c0d:	test   ebp,ebp
  405c0f:	jne    405bbb <flatcc_builder_create_cached_vtable@@Base+0x8b>
  405c11:	nop    DWORD PTR [rax+0x0]
  405c18:	mov    ebx,DWORD PTR [r15+0xe4]
  405c1f:	lea    rdx,[rbx+0x10]
  405c23:	cmp    rdx,QWORD PTR [r15+0xc0]
  405c2a:	ja     405dc8 <flatcc_builder_create_cached_vtable@@Base+0x298>
  405c30:	add    rbx,QWORD PTR [r15+0xb8]
  405c37:	je     405cd0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405c3d:	mov    eax,DWORD PTR [r15+0xe4]
  405c44:	movzx  ebp,WORD PTR [rsp+0x2c]
  405c49:	mov    rdi,r15
  405c4c:	mov    rsi,QWORD PTR [rsp+0x10]
  405c51:	lea    edx,[rax+0x10]
  405c54:	mov    DWORD PTR [r15+0xe4],edx
  405c5b:	mov    edx,DWORD PTR [r15+0x100]
  405c62:	mov    DWORD PTR [rbx+0x4],edx
  405c65:	mov    edx,DWORD PTR [r12]
  405c69:	mov    DWORD PTR [rbx+0xc],edx
  405c6c:	mov    DWORD PTR [r12],eax
  405c70:	mov    edx,ebp
  405c72:	call   4059b0 <flatcc_builder_create_vtable@@Base>
  405c77:	test   eax,eax
  405c79:	mov    DWORD PTR [rbx],eax
  405c7b:	je     405cd0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405c7d:	mov    rdi,QWORD PTR [rsp+0x20]
  405c82:	test   rdi,rdi
  405c85:	je     405dfe <flatcc_builder_create_cached_vtable@@Base+0x2ce>
  405c8b:	mov    edx,DWORD PTR [rdi+0x8]
  405c8e:	mov    DWORD PTR [rbx+0x8],edx
  405c91:	add    rsp,0x38
  405c95:	pop    rbx
  405c96:	pop    rbp
  405c97:	pop    r12
  405c99:	pop    r13
  405c9b:	pop    r14
  405c9d:	pop    r15
  405c9f:	ret    
  405ca0:	cmp    r12,r13
  405ca3:	je     405cb7 <flatcc_builder_create_cached_vtable@@Base+0x187>
  405ca5:	mov    eax,DWORD PTR [rbx+0xc]
  405ca8:	mov    DWORD PTR [r13+0x0],eax
  405cac:	mov    eax,DWORD PTR [r12]
  405cb0:	mov    DWORD PTR [rbx+0xc],eax
  405cb3:	mov    DWORD PTR [r12],ebp
  405cb7:	mov    eax,DWORD PTR [rbx]
  405cb9:	add    rsp,0x38
  405cbd:	pop    rbx
  405cbe:	pop    rbp
  405cbf:	pop    r12
  405cc1:	pop    r13
  405cc3:	pop    r14
  405cc5:	pop    r15
  405cc7:	ret    
  405cc8:	nop    DWORD PTR [rax+rax*1+0x0]
  405cd0:	add    rsp,0x38
  405cd4:	xor    eax,eax
  405cd6:	pop    rbx
  405cd7:	pop    rbp
  405cd8:	pop    r12
  405cda:	pop    r13
  405cdc:	pop    r14
  405cde:	pop    r15
  405ce0:	ret    
  405ce1:	nop    DWORD PTR [rax+0x0]
  405ce8:	mov    eax,DWORD PTR [rdi+0xe4]
  405cee:	lea    r12,[rdi+0xa8]
  405cf5:	test   eax,eax
  405cf7:	jne    405e8f <flatcc_builder_create_cached_vtable@@Base+0x35f>
  405cfd:	cmp    QWORD PTR [rdi+0xc0],0xf
  405d05:	jbe    405d98 <flatcc_builder_create_cached_vtable@@Base+0x268>
  405d0b:	cmp    QWORD PTR [r15+0xb8],0x0
  405d13:	je     405cd0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405d15:	mov    DWORD PTR [r15+0xe4],0x10
  405d20:	mov    rdi,QWORD PTR [r15+0x40]
  405d24:	mov    r8d,0x5
  405d2a:	mov    ecx,0x1
  405d2f:	mov    edx,0x100
  405d34:	mov    rsi,r12
  405d37:	call   QWORD PTR [r15+0x50]
  405d3b:	test   eax,eax
  405d3d:	jne    405cd0 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
  405d3f:	mov    rcx,QWORD PTR [r15+0xb0]
  405d46:	mov    eax,0x100
  405d4b:	jmp    405d53 <flatcc_builder_create_cached_vtable@@Base+0x223>
  405d4d:	nop    DWORD PTR [rax]
  405d50:	mov    rax,rdx
  405d53:	lea    rdx,[rax+rax*1]
  405d57:	cmp    rdx,rcx
  405d5a:	jbe    405d50 <flatcc_builder_create_cached_vtable@@Base+0x220>
  405d5c:	shr    rax,0x2
  405d60:	cmp    rax,0x1
  405d64:	jbe    405e58 <flatcc_builder_create_cached_vtable@@Base+0x328>
  405d6a:	mov    esi,0x1
  405d6f:	nop
  405d70:	add    rbx,0x1
  405d74:	shlx   rdx,rsi,rbx
  405d79:	cmp    rax,rdx
  405d7c:	ja     405d70 <flatcc_builder_create_cached_vtable@@Base+0x240>
  405d7e:	mov    eax,0x20
  405d83:	sub    eax,ebx
  405d85:	mov    QWORD PTR [r15+0xd8],rbx
  405d8c:	jmp    405b67 <flatcc_builder_create_cached_vtable@@Base+0x37>
  405d91:	nop    DWORD PTR [rax+0x0]
  405d98:	lea    rsi,[rdi+0xb8]
  405d9f:	xor    ecx,ecx
  405da1:	mov    rdi,QWORD PTR [rdi+0x40]
  405da5:	mov    r8d,0x6
  405dab:	mov    edx,0x10
  405db0:	call   QWORD PTR [r15+0x50]
  405db4:	test   eax,eax
  405db6:	je     405d0b <flatcc_builder_create_cached_vtable@@Base+0x1db>
  405dbc:	jmp    405e7a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  405dc1:	nop    DWORD PTR [rax+0x0]
  405dc8:	xor    ecx,ecx
  405dca:	lea    rsi,[r15+0xb8]
  405dd1:	mov    rdi,QWORD PTR [r15+0x40]
  405dd5:	mov    r8d,0x6
  405ddb:	call   QWORD PTR [r15+0x50]
  405ddf:	test   eax,eax
  405de1:	je     405c30 <flatcc_builder_create_cached_vtable@@Base+0x100>
  405de7:	jmp    405e7a <flatcc_builder_create_cached_vtable@@Base+0x34a>
  405dec:	nop    DWORD PTR [rax+0x0]
  405df0:	mov    QWORD PTR [rsp+0x20],0x0
  405df9:	jmp    405c18 <flatcc_builder_create_cached_vtable@@Base+0xe8>
  405dfe:	mov    rax,QWORD PTR [r15+0x118]
  405e05:	mov    r12d,DWORD PTR [r15+0xe0]
  405e0c:	test   rax,rax
  405e0f:	je     405e1b <flatcc_builder_create_cached_vtable@@Base+0x2eb>
  405e11:	lea    edx,[rbp+r12*1+0x0]
  405e16:	cmp    rax,rdx
  405e19:	jb     405e80 <flatcc_builder_create_cached_vtable@@Base+0x350>
  405e1b:	lea    rdx,[r14+r12*1]
  405e1f:	cmp    rdx,QWORD PTR [r15+0x80]
  405e26:	ja     405e62 <flatcc_builder_create_cached_vtable@@Base+0x332>
  405e28:	mov    rdi,r12
  405e2b:	add    rdi,QWORD PTR [r15+0x78]
  405e2f:	je     405eae <flatcc_builder_create_cached_vtable@@Base+0x37e>
  405e31:	mov    eax,DWORD PTR [r15+0xe0]
  405e38:	mov    rsi,QWORD PTR [rsp+0x10]
  405e3d:	mov    rdx,r14
  405e40:	add    ebp,eax
  405e42:	mov    DWORD PTR [rbx+0x8],eax
  405e45:	mov    DWORD PTR [r15+0xe0],ebp
  405e4c:	call   4030a0 <memcpy@plt>
  405e51:	mov    eax,DWORD PTR [rbx]
  405e53:	jmp    405c91 <flatcc_builder_create_cached_vtable@@Base+0x161>
  405e58:	mov    eax,0x20
  405e5d:	jmp    405d85 <flatcc_builder_create_cached_vtable@@Base+0x255>
  405e62:	xor    ecx,ecx
  405e64:	lea    rsi,[r15+0x78]
  405e68:	mov    rdi,QWORD PTR [r15+0x40]
  405e6c:	mov    r8d,0x2
  405e72:	call   QWORD PTR [r15+0x50]
  405e76:	test   eax,eax
  405e78:	je     405e28 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
  405e7a:	call   403100 <posix_memalign@plt+0x10>
  405e7f:	nop
  405e80:	mov    rdi,r15
  405e83:	call   404100 <flatcc_builder_flush_vtable_cache@@Base>
  405e88:	mov    eax,DWORD PTR [rbx]
  405e8a:	jmp    405cb9 <flatcc_builder_create_cached_vtable@@Base+0x189>
  405e8f:	lea    rcx,[rip+0x3cfa]        # 409b90 <_IO_stdin_used@@Base+0xb90>
  405e96:	lea    rsi,[rip+0x34eb]        # 409388 <_IO_stdin_used@@Base+0x388>
  405e9d:	lea    rdi,[rip+0x38c1]        # 409765 <_IO_stdin_used@@Base+0x765>
  405ea4:	mov    edx,0x156
  405ea9:	call   403060 <__assert_fail@plt>
  405eae:	mov    eax,0xffffffff
  405eb3:	jmp    405c91 <flatcc_builder_create_cached_vtable@@Base+0x161>
  405eb8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000405ec0 <flatcc_builder_create_table@@Base>:
  405ec0:	push   rbp
  405ec1:	push   rbx
  405ec2:	sub    rsp,0xb8
  405ec9:	mov    rax,QWORD PTR fs:0x28
  405ed2:	mov    QWORD PTR [rsp+0xa8],rax
  405eda:	xor    eax,eax
  405edc:	test   r9d,r9d
  405edf:	mov    r11d,DWORD PTR [rsp+0xd0]
  405ee7:	js     40608d <flatcc_builder_create_table@@Base+0x1cd>
  405eed:	test   r11b,0x1
  405ef1:	je     40606e <flatcc_builder_create_table@@Base+0x1ae>
  405ef7:	cmp    cx,0x4
  405efb:	mov    eax,0x4
  405f00:	mov    rbx,rdi
  405f03:	cmovb  ecx,eax
  405f06:	cmp    WORD PTR [rdi+0xe8],cx
  405f0d:	movzx  eax,cx
  405f10:	jae    405f19 <flatcc_builder_create_table@@Base+0x59>
  405f12:	mov    WORD PTR [rdi+0xe8],cx
  405f19:	mov    ecx,DWORD PTR [rbx+0xf0]
  405f1f:	sub    eax,0x1
  405f22:	mov    edi,0xfffffffc
  405f27:	sub    r11d,0x1
  405f2b:	mov    r10d,ecx
  405f2e:	sub    r10d,edx
  405f31:	and    r10d,eax
  405f34:	mov    eax,edi
  405f36:	sub    eax,edx
  405f38:	add    eax,ecx
  405f3a:	sub    eax,r10d
  405f3d:	mov    ebp,eax
  405f3f:	sub    ebp,r11d
  405f42:	test   r9d,r9d
  405f45:	mov    DWORD PTR [rsp+0xc],ebp
  405f49:	je     405f7d <flatcc_builder_create_table@@Base+0xbd>
  405f4b:	lea    ecx,[r9-0x1]
  405f4f:	sub    edi,eax
  405f51:	lea    r9,[r8+rcx*2+0x2]
  405f56:	nop    WORD PTR cs:[rax+rax*1+0x0]
  405f60:	movzx  ecx,WORD PTR [r8]
  405f64:	mov    r11d,edi
  405f67:	add    r8,0x2
  405f6b:	sub    r11d,ecx
  405f6e:	add    DWORD PTR [rsi+rcx*1],r11d
  405f72:	cmp    r9,r8
  405f75:	jne    405f60 <flatcc_builder_create_table@@Base+0xa0>
  405f77:	mov    ecx,DWORD PTR [rbx+0xf0]
  405f7d:	lea    rax,[rsp+0xc]
  405f82:	test   rdx,rdx
  405f85:	mov    QWORD PTR [rsp+0x10],0x4
  405f8e:	mov    QWORD PTR [rsp+0x28],0x4
  405f97:	mov    DWORD PTR [rsp+0x18],0x1
  405f9f:	mov    r8d,0x4
  405fa5:	mov    QWORD PTR [rsp+0x20],rax
  405faa:	je     405fc7 <flatcc_builder_create_table@@Base+0x107>
  405fac:	lea    r8,[rdx+0x4]
  405fb0:	mov    QWORD PTR [rsp+0x30],rsi
  405fb5:	mov    QWORD PTR [rsp+0x38],rdx
  405fba:	mov    DWORD PTR [rsp+0x18],0x2
  405fc2:	mov    QWORD PTR [rsp+0x10],r8
  405fc7:	test   r10d,r10d
  405fca:	je     405ff8 <flatcc_builder_create_table@@Base+0x138>
  405fcc:	movsxd rdx,DWORD PTR [rsp+0x18]
  405fd1:	mov    rsi,0x409e80
  405fd8:	add    r8,r10
  405fdb:	mov    QWORD PTR [rsp+0x10],r8
  405fe0:	mov    rax,rdx
  405fe3:	shl    rdx,0x4
  405fe7:	add    eax,0x1
  405fea:	mov    QWORD PTR [rsp+rdx*1+0x20],rsi
  405fef:	mov    QWORD PTR [rsp+rdx*1+0x28],r10
  405ff4:	mov    DWORD PTR [rsp+0x18],eax
  405ff8:	mov    ebp,ecx
  405ffa:	movabs rax,0x10000000f
  406004:	sub    ebp,r8d
  406007:	cmp    r8,rax
  40600a:	ja     40604f <flatcc_builder_create_table@@Base+0x18f>
  40600c:	cmp    ebp,ecx
  40600e:	jge    40604f <flatcc_builder_create_table@@Base+0x18f>
  406010:	lea    rsi,[rsp+0x20]
  406015:	mov    rdi,QWORD PTR [rbx+0x38]
  406019:	mov    ecx,ebp
  40601b:	mov    edx,DWORD PTR [rsp+0x18]
  40601f:	call   QWORD PTR [rbx+0x48]
  406022:	test   eax,eax
  406024:	jne    4060b1 <flatcc_builder_create_table@@Base+0x1f1>
  40602a:	mov    DWORD PTR [rbx+0xf0],ebp
  406030:	mov    eax,ebp
  406032:	mov    rbx,QWORD PTR [rsp+0xa8]
  40603a:	xor    rbx,QWORD PTR fs:0x28
  406043:	jne    4060ac <flatcc_builder_create_table@@Base+0x1ec>
  406045:	add    rsp,0xb8
  40604c:	pop    rbx
  40604d:	pop    rbp
  40604e:	ret    
  40604f:	lea    rcx,[rip+0x3d7a]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  406056:	lea    rsi,[rip+0x332b]        # 409388 <_IO_stdin_used@@Base+0x388>
  40605d:	lea    rdi,[rip+0x36bb]        # 40971f <_IO_stdin_used@@Base+0x71f>
  406064:	mov    edx,0x287
  406069:	call   403060 <__assert_fail@plt>
  40606e:	lea    rcx,[rip+0x3afb]        # 409b70 <_IO_stdin_used@@Base+0xb70>
  406075:	lea    rsi,[rip+0x330c]        # 409388 <_IO_stdin_used@@Base+0x388>
  40607c:	lea    rdi,[rip+0x3703]        # 409786 <_IO_stdin_used@@Base+0x786>
  406083:	mov    edx,0x4db
  406088:	call   403060 <__assert_fail@plt>
  40608d:	lea    rcx,[rip+0x3adc]        # 409b70 <_IO_stdin_used@@Base+0xb70>
  406094:	lea    rsi,[rip+0x32ed]        # 409388 <_IO_stdin_used@@Base+0x388>
  40609b:	lea    rdi,[rip+0x36d2]        # 409774 <_IO_stdin_used@@Base+0x774>
  4060a2:	mov    edx,0x4d5
  4060a7:	call   403060 <__assert_fail@plt>
  4060ac:	call   403050 <__stack_chk_fail@plt>
  4060b1:	call   403146 <posix_memalign@plt+0x56>
  4060b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004060c0 <flatcc_builder_check_required_field@@Base>:
  4060c0:	mov    rax,QWORD PTR [rdi+0x30]
  4060c4:	cmp    WORD PTR [rax+0xe],0x3
  4060c9:	jne    4060e6 <flatcc_builder_check_required_field@@Base+0x26>
  4060cb:	xor    eax,eax
  4060cd:	cmp    WORD PTR [rdi+0x10],si
  4060d1:	jbe    4060e2 <flatcc_builder_check_required_field@@Base+0x22>
  4060d3:	mov    rax,QWORD PTR [rdi+0x8]
  4060d7:	movzx  edx,si
  4060da:	cmp    WORD PTR [rax+rdx*2],0x0
  4060df:	setne  al
  4060e2:	movzx  eax,al
  4060e5:	ret    
  4060e6:	lea    rcx,[rip+0x3a53]        # 409b40 <_IO_stdin_used@@Base+0xb40>
  4060ed:	lea    rsi,[rip+0x3294]        # 409388 <_IO_stdin_used@@Base+0x388>
  4060f4:	lea    rdi,[rip+0x34d5]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  4060fb:	sub    rsp,0x8
  4060ff:	mov    edx,0x4f8
  406104:	call   403060 <__assert_fail@plt>
  406109:	nop    DWORD PTR [rax+0x0]

0000000000406110 <flatcc_builder_check_union_field@@Base>:
  406110:	mov    rax,QWORD PTR [rdi+0x30]
  406114:	cmp    WORD PTR [rax+0xe],0x3
  406119:	jne    40615b <flatcc_builder_check_union_field@@Base+0x4b>
  40611b:	xor    eax,eax
  40611d:	test   si,si
  406120:	je     40614d <flatcc_builder_check_union_field@@Base+0x3d>
  406122:	cmp    si,WORD PTR [rdi+0x10]
  406126:	jae    40614d <flatcc_builder_check_union_field@@Base+0x3d>
  406128:	mov    rcx,QWORD PTR [rdi+0x8]
  40612c:	movzx  edx,si
  40612f:	movzx  eax,WORD PTR [rcx+rdx*2-0x2]
  406134:	test   ax,ax
  406137:	je     406143 <flatcc_builder_check_union_field@@Base+0x33>
  406139:	mov    rsi,QWORD PTR [rdi+0x18]
  40613d:	cmp    BYTE PTR [rsi+rax*1],0x0
  406141:	jne    406150 <flatcc_builder_check_union_field@@Base+0x40>
  406143:	xor    eax,eax
  406145:	cmp    WORD PTR [rcx+rdx*2],0x0
  40614a:	sete   al
  40614d:	repz ret 
  40614f:	nop
  406150:	xor    eax,eax
  406152:	cmp    WORD PTR [rcx+rdx*2],0x0
  406157:	setne  al
  40615a:	ret    
  40615b:	lea    rcx,[rip+0x399e]        # 409b00 <_IO_stdin_used@@Base+0xb00>
  406162:	lea    rsi,[rip+0x321f]        # 409388 <_IO_stdin_used@@Base+0x388>
  406169:	lea    rdi,[rip+0x3460]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  406170:	sub    rsp,0x8
  406174:	mov    edx,0x4ff
  406179:	call   403060 <__assert_fail@plt>
  40617e:	xchg   ax,ax

0000000000406180 <flatcc_builder_check_required@@Base>:
  406180:	mov    rax,QWORD PTR [rdi+0x30]
  406184:	cmp    WORD PTR [rax+0xe],0x3
  406189:	jne    4061db <flatcc_builder_check_required@@Base+0x5b>
  40618b:	movzx  ecx,WORD PTR [rdi+0x10]
  40618f:	xor    eax,eax
  406191:	cmp    ecx,edx
  406193:	jl     4061d0 <flatcc_builder_check_required@@Base+0x50>
  406195:	test   edx,edx
  406197:	jle    4061cb <flatcc_builder_check_required@@Base+0x4b>
  406199:	mov    rcx,QWORD PTR [rdi+0x8]
  40619d:	movzx  edi,WORD PTR [rsi]
  4061a0:	cmp    WORD PTR [rcx+rdi*2],0x0
  4061a5:	je     4061d0 <flatcc_builder_check_required@@Base+0x50>
  4061a7:	sub    edx,0x1
  4061aa:	lea    rax,[rsi+0x2]
  4061ae:	lea    rsi,[rsi+rdx*2+0x2]
  4061b3:	jmp    4061c6 <flatcc_builder_check_required@@Base+0x46>
  4061b5:	nop    DWORD PTR [rax]
  4061b8:	movzx  edx,WORD PTR [rax]
  4061bb:	add    rax,0x2
  4061bf:	cmp    WORD PTR [rcx+rdx*2],0x0
  4061c4:	je     4061d8 <flatcc_builder_check_required@@Base+0x58>
  4061c6:	cmp    rax,rsi
  4061c9:	jne    4061b8 <flatcc_builder_check_required@@Base+0x38>
  4061cb:	mov    eax,0x1
  4061d0:	repz ret 
  4061d2:	nop    WORD PTR [rax+rax*1+0x0]
  4061d8:	xor    eax,eax
  4061da:	ret    
  4061db:	lea    rcx,[rip+0x38ee]        # 409ad0 <_IO_stdin_used@@Base+0xad0>
  4061e2:	lea    rsi,[rip+0x319f]        # 409388 <_IO_stdin_used@@Base+0x388>
  4061e9:	lea    rdi,[rip+0x33e0]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  4061f0:	sub    rsp,0x8
  4061f4:	mov    edx,0x511
  4061f9:	call   403060 <__assert_fail@plt>
  4061fe:	xchg   ax,ax

0000000000406200 <flatcc_builder_end_table@@Base>:
  406200:	push   r13
  406202:	push   r12
  406204:	push   rbp
  406205:	push   rbx
  406206:	sub    rsp,0x8
  40620a:	mov    rax,QWORD PTR [rdi+0x30]
  40620e:	cmp    WORD PTR [rax+0xe],0x3
  406213:	jne    40636e <flatcc_builder_end_table@@Base+0x16e>
  406219:	movzx  ebp,WORD PTR [rdi+0x10]
  40621d:	movzx  eax,WORD PTR [rdi+0x20]
  406221:	mov    rbx,rdi
  406224:	mov    rcx,QWORD PTR [rdi+0x8]
  406228:	add    ebp,0x2
  40622b:	add    eax,0x4
  40622e:	lea    r12,[rcx-0x4]
  406232:	add    ebp,ebp
  406234:	mov    WORD PTR [rcx-0x2],ax
  406238:	movzx  eax,ax
  40623b:	mov    WORD PTR [rcx-0x4],bp
  40623f:	mov    ecx,DWORD PTR [rdi+0x14]
  406242:	movzx  edx,bp
  406245:	mov    rsi,r12
  406248:	xor    ecx,edx
  40624a:	imul   ecx,ecx,0x9e3779b1
  406250:	xor    ecx,eax
  406252:	imul   ecx,ecx,0x9e3779b1
  406258:	mov    DWORD PTR [rdi+0x14],ecx
  40625b:	call   405b30 <flatcc_builder_create_cached_vtable@@Base>
  406260:	test   eax,eax
  406262:	mov    r13d,eax
  406265:	jne    406280 <flatcc_builder_end_table@@Base+0x80>
  406267:	add    rsp,0x8
  40626b:	xor    ebp,ebp
  40626d:	pop    rbx
  40626e:	mov    eax,ebp
  406270:	pop    rbp
  406271:	pop    r12
  406273:	pop    r13
  406275:	ret    
  406276:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406280:	movzx  edx,bp
  406283:	xor    esi,esi
  406285:	mov    rdi,r12
  406288:	call   403070 <memset@plt>
  40628d:	mov    rax,QWORD PTR [rbx+0x30]
  406291:	mov    r9,QWORD PTR [rbx]
  406294:	sub    rsp,0x8
  406298:	mov    edx,DWORD PTR [rbx+0x20]
  40629b:	movzx  ecx,WORD PTR [rbx+0xea]
  4062a2:	mov    rdi,rbx
  4062a5:	mov    rsi,QWORD PTR [rbx+0x18]
  4062a9:	mov    r8d,DWORD PTR [rax+0x14]
  4062ad:	add    r8,QWORD PTR [rbx+0x88]
  4062b4:	push   r13
  4062b6:	sub    r9,r8
  4062b9:	shr    r9,1
  4062bc:	call   405ec0 <flatcc_builder_create_table@@Base>
  4062c1:	mov    ebp,eax
  4062c3:	test   ebp,ebp
  4062c5:	pop    rax
  4062c6:	pop    rdx
  4062c7:	je     406267 <flatcc_builder_end_table@@Base+0x67>
  4062c9:	mov    rax,QWORD PTR [rbx+0x30]
  4062cd:	mov    rdi,QWORD PTR [rbx+0x18]
  4062d1:	xor    esi,esi
  4062d3:	mov    edx,DWORD PTR [rax+0x18]
  4062d6:	mov    DWORD PTR [rbx+0x14],edx
  4062d9:	movzx  edx,WORD PTR [rax+0x1c]
  4062dd:	mov    WORD PTR [rbx+0x10],dx
  4062e1:	mov    edx,DWORD PTR [rax+0x10]
  4062e4:	add    rdx,QWORD PTR [rbx+0x58]
  4062e8:	mov    QWORD PTR [rbx+0x8],rdx
  4062ec:	mov    eax,DWORD PTR [rax+0x14]
  4062ef:	add    rax,QWORD PTR [rbx+0x88]
  4062f6:	mov    edx,DWORD PTR [rbx+0x20]
  4062f9:	mov    QWORD PTR [rbx],rax
  4062fc:	call   403070 <memset@plt>
  406301:	mov    rax,QWORD PTR [rbx+0x30]
  406305:	mov    edi,DWORD PTR [rbx+0x70]
  406308:	mov    esi,DWORD PTR [rax]
  40630a:	mov    edx,DWORD PTR [rax+0x8]
  40630d:	mov    ecx,DWORD PTR [rax+0x4]
  406310:	mov    DWORD PTR [rbx+0x20],edx
  406313:	mov    rdx,rsi
  406316:	mov    DWORD PTR [rbx+0x28],esi
  406319:	add    rsi,QWORD PTR [rbx+0x68]
  40631d:	sub    edi,edx
  40631f:	cmp    ecx,edi
  406321:	mov    edx,edi
  406323:	cmovb  edx,ecx
  406326:	mov    DWORD PTR [rbx+0x24],edx
  406329:	movzx  edx,WORD PTR [rbx+0xea]
  406330:	cmp    dx,WORD PTR [rbx+0xe8]
  406337:	mov    QWORD PTR [rbx+0x18],rsi
  40633b:	mov    DWORD PTR [rax+0x4],ecx
  40633e:	jbe    406347 <flatcc_builder_end_table@@Base+0x147>
  406340:	mov    WORD PTR [rbx+0xe8],dx
  406347:	movzx  edx,WORD PTR [rax+0xc]
  40634b:	sub    rax,0x24
  40634f:	sub    DWORD PTR [rbx+0x104],0x1
  406356:	mov    QWORD PTR [rbx+0x30],rax
  40635a:	mov    eax,ebp
  40635c:	mov    WORD PTR [rbx+0xea],dx
  406363:	add    rsp,0x8
  406367:	pop    rbx
  406368:	pop    rbp
  406369:	pop    r12
  40636b:	pop    r13
  40636d:	ret    
  40636e:	lea    rcx,[rip+0x373b]        # 409ab0 <_IO_stdin_used@@Base+0xab0>
  406375:	lea    rsi,[rip+0x300c]        # 409388 <_IO_stdin_used@@Base+0x388>
  40637c:	lea    rdi,[rip+0x324d]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  406383:	mov    edx,0x525
  406388:	call   403060 <__assert_fail@plt>
  40638d:	nop    DWORD PTR [rax]

0000000000406390 <flatcc_builder_create_vector@@Base>:
  406390:	push   rbp
  406391:	push   rbx
  406392:	sub    rsp,0xb8
  406399:	mov    rax,QWORD PTR fs:0x28
  4063a2:	mov    QWORD PTR [rsp+0xa8],rax
  4063aa:	xor    eax,eax
  4063ac:	cmp    rdx,r9
  4063af:	ja     4064f4 <flatcc_builder_create_vector@@Base+0x164>
  4063b5:	mov    rbx,rdi
  4063b8:	cmp    r8w,0x4
  4063bd:	mov    eax,0x4
  4063c2:	cmovb  r8d,eax
  4063c6:	cmp    r8w,WORD PTR [rbx+0xe8]
  4063ce:	movzx  edi,r8w
  4063d2:	jbe    4063dc <flatcc_builder_create_vector@@Base+0x4c>
  4063d4:	mov    WORD PTR [rbx+0xe8],r8w
  4063dc:	imul   ecx,edx
  4063df:	mov    DWORD PTR [rsp+0xc],edx
  4063e3:	mov    edx,DWORD PTR [rbx+0xf0]
  4063e9:	sub    edi,0x1
  4063ec:	mov    QWORD PTR [rsp+0x10],0x4
  4063f5:	mov    QWORD PTR [rsp+0x28],0x4
  4063fe:	mov    DWORD PTR [rsp+0x18],0x1
  406406:	mov    r8d,0x4
  40640c:	mov    eax,edx
  40640e:	sub    eax,ecx
  406410:	and    eax,edi
  406412:	lea    rdi,[rsp+0xc]
  406417:	test   ecx,ecx
  406419:	mov    QWORD PTR [rsp+0x20],rdi
  40641e:	jne    4064b0 <flatcc_builder_create_vector@@Base+0x120>
  406424:	test   eax,eax
  406426:	je     406454 <flatcc_builder_create_vector@@Base+0xc4>
  406428:	movsxd rsi,DWORD PTR [rsp+0x18]
  40642d:	mov    rdi,0x409e80
  406434:	add    r8,rax
  406437:	mov    QWORD PTR [rsp+0x10],r8
  40643c:	mov    rcx,rsi
  40643f:	shl    rsi,0x4
  406443:	add    ecx,0x1
  406446:	mov    QWORD PTR [rsp+rsi*1+0x20],rdi
  40644b:	mov    QWORD PTR [rsp+rsi*1+0x28],rax
  406450:	mov    DWORD PTR [rsp+0x18],ecx
  406454:	mov    ebp,edx
  406456:	movabs rax,0x10000000f
  406460:	sub    ebp,r8d
  406463:	cmp    r8,rax
  406466:	ja     4064d0 <flatcc_builder_create_vector@@Base+0x140>
  406468:	cmp    edx,ebp
  40646a:	jle    4064d0 <flatcc_builder_create_vector@@Base+0x140>
  40646c:	lea    rsi,[rsp+0x20]
  406471:	mov    rdi,QWORD PTR [rbx+0x38]
  406475:	mov    ecx,ebp
  406477:	mov    edx,DWORD PTR [rsp+0x18]
  40647b:	call   QWORD PTR [rbx+0x48]
  40647e:	test   eax,eax
  406480:	jne    4064ef <flatcc_builder_create_vector@@Base+0x15f>
  406482:	mov    DWORD PTR [rbx+0xf0],ebp
  406488:	mov    eax,ebp
  40648a:	mov    rbx,QWORD PTR [rsp+0xa8]
  406492:	xor    rbx,QWORD PTR fs:0x28
  40649b:	jne    406513 <flatcc_builder_create_vector@@Base+0x183>
  40649d:	add    rsp,0xb8
  4064a4:	pop    rbx
  4064a5:	pop    rbp
  4064a6:	ret    
  4064a7:	nop    WORD PTR [rax+rax*1+0x0]
  4064b0:	lea    r8,[rcx+0x4]
  4064b4:	mov    QWORD PTR [rsp+0x30],rsi
  4064b9:	mov    QWORD PTR [rsp+0x38],rcx
  4064be:	mov    DWORD PTR [rsp+0x18],0x2
  4064c6:	mov    QWORD PTR [rsp+0x10],r8
  4064cb:	jmp    406424 <flatcc_builder_create_vector@@Base+0x94>
  4064d0:	lea    rcx,[rip+0x38f9]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  4064d7:	lea    rsi,[rip+0x2eaa]        # 409388 <_IO_stdin_used@@Base+0x388>
  4064de:	lea    rdi,[rip+0x323a]        # 40971f <_IO_stdin_used@@Base+0x71f>
  4064e5:	mov    edx,0x287
  4064ea:	call   403060 <__assert_fail@plt>
  4064ef:	call   403146 <posix_memalign@plt+0x56>
  4064f4:	lea    rcx,[rip+0x3595]        # 409a90 <_IO_stdin_used@@Base+0xa90>
  4064fb:	lea    rsi,[rip+0x2e86]        # 409388 <_IO_stdin_used@@Base+0x388>
  406502:	lea    rdi,[rip+0x3288]        # 409791 <_IO_stdin_used@@Base+0x791>
  406509:	mov    edx,0x555
  40650e:	call   403060 <__assert_fail@plt>
  406513:	call   403050 <__stack_chk_fail@plt>
  406518:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406520 <flatcc_builder_end_vector@@Base>:
  406520:	push   rbp
  406521:	push   rbx
  406522:	sub    rsp,0x8
  406526:	mov    rax,QWORD PTR [rdi+0x30]
  40652a:	cmp    WORD PTR [rax+0xe],0x4
  40652f:	jne    4065df <flatcc_builder_end_vector@@Base+0xbf>
  406535:	mov    ecx,DWORD PTR [rax+0x10]
  406538:	mov    edx,DWORD PTR [rax+0x14]
  40653b:	mov    rbx,rdi
  40653e:	mov    r9d,DWORD PTR [rax+0x18]
  406542:	movzx  r8d,WORD PTR [rdi+0xea]
  40654a:	mov    rsi,QWORD PTR [rdi+0x18]
  40654e:	call   406390 <flatcc_builder_create_vector@@Base>
  406553:	test   eax,eax
  406555:	mov    ebp,eax
  406557:	jne    406568 <flatcc_builder_end_vector@@Base+0x48>
  406559:	add    rsp,0x8
  40655d:	mov    eax,ebp
  40655f:	pop    rbx
  406560:	pop    rbp
  406561:	ret    
  406562:	nop    WORD PTR [rax+rax*1+0x0]
  406568:	mov    edx,DWORD PTR [rbx+0x20]
  40656b:	mov    rdi,QWORD PTR [rbx+0x18]
  40656f:	xor    esi,esi
  406571:	call   403070 <memset@plt>
  406576:	mov    rax,QWORD PTR [rbx+0x30]
  40657a:	mov    edi,DWORD PTR [rbx+0x70]
  40657d:	mov    esi,DWORD PTR [rax]
  40657f:	mov    edx,DWORD PTR [rax+0x8]
  406582:	mov    ecx,DWORD PTR [rax+0x4]
  406585:	mov    DWORD PTR [rbx+0x20],edx
  406588:	mov    rdx,rsi
  40658b:	mov    DWORD PTR [rbx+0x28],esi
  40658e:	add    rsi,QWORD PTR [rbx+0x68]
  406592:	sub    edi,edx
  406594:	cmp    ecx,edi
  406596:	mov    edx,edi
  406598:	cmovb  edx,ecx
  40659b:	mov    DWORD PTR [rbx+0x24],edx
  40659e:	movzx  edx,WORD PTR [rbx+0xea]
  4065a5:	cmp    dx,WORD PTR [rbx+0xe8]
  4065ac:	mov    QWORD PTR [rbx+0x18],rsi
  4065b0:	mov    DWORD PTR [rax+0x4],ecx
  4065b3:	jbe    4065bc <flatcc_builder_end_vector@@Base+0x9c>
  4065b5:	mov    WORD PTR [rbx+0xe8],dx
  4065bc:	movzx  edx,WORD PTR [rax+0xc]
  4065c0:	sub    rax,0x24
  4065c4:	sub    DWORD PTR [rbx+0x104],0x1
  4065cb:	mov    QWORD PTR [rbx+0x30],rax
  4065cf:	mov    eax,ebp
  4065d1:	mov    WORD PTR [rbx+0xea],dx
  4065d8:	add    rsp,0x8
  4065dc:	pop    rbx
  4065dd:	pop    rbp
  4065de:	ret    
  4065df:	lea    rcx,[rip+0x348a]        # 409a70 <_IO_stdin_used@@Base+0xa70>
  4065e6:	lea    rsi,[rip+0x2d9b]        # 409388 <_IO_stdin_used@@Base+0x388>
  4065ed:	lea    rdi,[rip+0x2e74]        # 409468 <_IO_stdin_used@@Base+0x468>
  4065f4:	mov    edx,0x578
  4065f9:	call   403060 <__assert_fail@plt>
  4065fe:	xchg   ax,ax

0000000000406600 <flatcc_builder_vector_count@@Base>:
  406600:	mov    rax,QWORD PTR [rdi+0x30]
  406604:	mov    eax,DWORD PTR [rax+0x14]
  406607:	ret    
  406608:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406610 <flatcc_builder_vector_edit@@Base>:
  406610:	mov    rax,QWORD PTR [rdi+0x18]
  406614:	ret    
  406615:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406620 <flatcc_builder_create_offset_vector_direct@@Base>:
  406620:	xor    ecx,ecx
  406622:	jmp    403ed0 <flatcc_builder_default_alloc@@Base+0x390>
  406627:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406630 <flatcc_builder_end_offset_vector@@Base>:
  406630:	push   rbp
  406631:	push   rbx
  406632:	sub    rsp,0x8
  406636:	mov    rax,QWORD PTR [rdi+0x30]
  40663a:	cmp    WORD PTR [rax+0xe],0x5
  40663f:	jne    4066df <flatcc_builder_end_offset_vector@@Base+0xaf>
  406645:	mov    edx,DWORD PTR [rax+0x14]
  406648:	mov    rsi,QWORD PTR [rdi+0x18]
  40664c:	mov    rbx,rdi
  40664f:	call   406620 <flatcc_builder_create_offset_vector_direct@@Base>
  406654:	test   eax,eax
  406656:	mov    ebp,eax
  406658:	jne    406668 <flatcc_builder_end_offset_vector@@Base+0x38>
  40665a:	add    rsp,0x8
  40665e:	mov    eax,ebp
  406660:	pop    rbx
  406661:	pop    rbp
  406662:	ret    
  406663:	nop    DWORD PTR [rax+rax*1+0x0]
  406668:	mov    edx,DWORD PTR [rbx+0x20]
  40666b:	mov    rdi,QWORD PTR [rbx+0x18]
  40666f:	xor    esi,esi
  406671:	call   403070 <memset@plt>
  406676:	mov    rax,QWORD PTR [rbx+0x30]
  40667a:	mov    edi,DWORD PTR [rbx+0x70]
  40667d:	mov    esi,DWORD PTR [rax]
  40667f:	mov    edx,DWORD PTR [rax+0x8]
  406682:	mov    ecx,DWORD PTR [rax+0x4]
  406685:	mov    DWORD PTR [rbx+0x20],edx
  406688:	mov    rdx,rsi
  40668b:	mov    DWORD PTR [rbx+0x28],esi
  40668e:	add    rsi,QWORD PTR [rbx+0x68]
  406692:	sub    edi,edx
  406694:	cmp    ecx,edi
  406696:	mov    edx,edi
  406698:	cmovb  edx,ecx
  40669b:	mov    DWORD PTR [rbx+0x24],edx
  40669e:	movzx  edx,WORD PTR [rbx+0xea]
  4066a5:	cmp    dx,WORD PTR [rbx+0xe8]
  4066ac:	mov    QWORD PTR [rbx+0x18],rsi
  4066b0:	mov    DWORD PTR [rax+0x4],ecx
  4066b3:	jbe    4066bc <flatcc_builder_end_offset_vector@@Base+0x8c>
  4066b5:	mov    WORD PTR [rbx+0xe8],dx
  4066bc:	movzx  edx,WORD PTR [rax+0xc]
  4066c0:	sub    rax,0x24
  4066c4:	sub    DWORD PTR [rbx+0x104],0x1
  4066cb:	mov    QWORD PTR [rbx+0x30],rax
  4066cf:	mov    eax,ebp
  4066d1:	mov    WORD PTR [rbx+0xea],dx
  4066d8:	add    rsp,0x8
  4066dc:	pop    rbx
  4066dd:	pop    rbp
  4066de:	ret    
  4066df:	lea    rcx,[rip+0x333a]        # 409a20 <_IO_stdin_used@@Base+0xa20>
  4066e6:	lea    rsi,[rip+0x2c9b]        # 409388 <_IO_stdin_used@@Base+0x388>
  4066ed:	lea    rdi,[rip+0x2de4]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  4066f4:	mov    edx,0x5c8
  4066f9:	call   403060 <__assert_fail@plt>
  4066fe:	xchg   ax,ax

0000000000406700 <flatcc_builder_create_offset_vector@@Base>:
  406700:	push   r12
  406702:	push   rbp
  406703:	mov    r12,rsi
  406706:	push   rbx
  406707:	mov    rbp,rdx
  40670a:	mov    rbx,rdi
  40670d:	call   4056a0 <flatcc_builder_start_offset_vector@@Base>
  406712:	test   eax,eax
  406714:	je     406720 <flatcc_builder_create_offset_vector@@Base+0x20>
  406716:	pop    rbx
  406717:	xor    eax,eax
  406719:	pop    rbp
  40671a:	pop    r12
  40671c:	ret    
  40671d:	nop    DWORD PTR [rax]
  406720:	mov    rsi,rbp
  406723:	mov    rdi,rbx
  406726:	call   405160 <flatcc_builder_extend_offset_vector@@Base>
  40672b:	test   rax,rax
  40672e:	je     406716 <flatcc_builder_create_offset_vector@@Base+0x16>
  406730:	lea    rdx,[rbp*4+0x0]
  406738:	mov    rsi,r12
  40673b:	mov    rdi,rax
  40673e:	call   4030a0 <memcpy@plt>
  406743:	mov    rdi,rbx
  406746:	pop    rbx
  406747:	pop    rbp
  406748:	pop    r12
  40674a:	jmp    406630 <flatcc_builder_end_offset_vector@@Base>
  40674f:	nop

0000000000406750 <flatcc_builder_end_offset_vector_for_unions@@Base>:
  406750:	push   rbp
  406751:	push   rbx
  406752:	sub    rsp,0x8
  406756:	mov    rax,QWORD PTR [rdi+0x30]
  40675a:	cmp    WORD PTR [rax+0xe],0x5
  40675f:	jne    406807 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb7>
  406765:	mov    edx,DWORD PTR [rax+0x14]
  406768:	mov    rcx,rsi
  40676b:	mov    rsi,QWORD PTR [rdi+0x18]
  40676f:	mov    rbx,rdi
  406772:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x390>
  406777:	test   eax,eax
  406779:	mov    ebp,eax
  40677b:	jne    406790 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
  40677d:	add    rsp,0x8
  406781:	mov    eax,ebp
  406783:	pop    rbx
  406784:	pop    rbp
  406785:	ret    
  406786:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406790:	mov    edx,DWORD PTR [rbx+0x20]
  406793:	mov    rdi,QWORD PTR [rbx+0x18]
  406797:	xor    esi,esi
  406799:	call   403070 <memset@plt>
  40679e:	mov    rax,QWORD PTR [rbx+0x30]
  4067a2:	mov    edi,DWORD PTR [rbx+0x70]
  4067a5:	mov    esi,DWORD PTR [rax]
  4067a7:	mov    edx,DWORD PTR [rax+0x8]
  4067aa:	mov    ecx,DWORD PTR [rax+0x4]
  4067ad:	mov    DWORD PTR [rbx+0x20],edx
  4067b0:	mov    rdx,rsi
  4067b3:	mov    DWORD PTR [rbx+0x28],esi
  4067b6:	add    rsi,QWORD PTR [rbx+0x68]
  4067ba:	sub    edi,edx
  4067bc:	cmp    ecx,edi
  4067be:	mov    edx,edi
  4067c0:	cmovb  edx,ecx
  4067c3:	mov    DWORD PTR [rbx+0x24],edx
  4067c6:	movzx  edx,WORD PTR [rbx+0xea]
  4067cd:	cmp    dx,WORD PTR [rbx+0xe8]
  4067d4:	mov    QWORD PTR [rbx+0x18],rsi
  4067d8:	mov    DWORD PTR [rax+0x4],ecx
  4067db:	jbe    4067e4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x94>
  4067dd:	mov    WORD PTR [rbx+0xe8],dx
  4067e4:	movzx  edx,WORD PTR [rax+0xc]
  4067e8:	sub    rax,0x24
  4067ec:	sub    DWORD PTR [rbx+0x104],0x1
  4067f3:	mov    QWORD PTR [rbx+0x30],rax
  4067f7:	mov    eax,ebp
  4067f9:	mov    WORD PTR [rbx+0xea],dx
  406800:	add    rsp,0x8
  406804:	pop    rbx
  406805:	pop    rbp
  406806:	ret    
  406807:	lea    rcx,[rip+0x31d2]        # 4099e0 <_IO_stdin_used@@Base+0x9e0>
  40680e:	lea    rsi,[rip+0x2b73]        # 409388 <_IO_stdin_used@@Base+0x388>
  406815:	lea    rdi,[rip+0x2cbc]        # 4094d8 <_IO_stdin_used@@Base+0x4d8>
  40681c:	mov    edx,0x5d5
  406821:	call   403060 <__assert_fail@plt>
  406826:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406830 <flatcc_builder_offset_vector_edit@@Base>:
  406830:	mov    rax,QWORD PTR [rdi+0x18]
  406834:	ret    
  406835:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406840 <flatcc_builder_offset_vector_count@@Base>:
  406840:	mov    rax,QWORD PTR [rdi+0x30]
  406844:	mov    eax,DWORD PTR [rax+0x14]
  406847:	ret    
  406848:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406850 <flatcc_builder_create_union_vector_direct@@Base>:
  406850:	push   r13
  406852:	push   r12
  406854:	mov    r13,rcx
  406857:	push   rbp
  406858:	push   rbx
  406859:	mov    r12,rsi
  40685c:	mov    rcx,r12
  40685f:	mov    rsi,rdx
  406862:	mov    rdx,r13
  406865:	sub    rsp,0x8
  406869:	mov    rbp,rdi
  40686c:	call   403ed0 <flatcc_builder_default_alloc@@Base+0x390>
  406871:	test   eax,eax
  406873:	jne    406888 <flatcc_builder_create_union_vector_direct@@Base+0x38>
  406875:	add    rsp,0x8
  406879:	xor    eax,eax
  40687b:	pop    rbx
  40687c:	pop    rbp
  40687d:	pop    r12
  40687f:	pop    r13
  406881:	ret    
  406882:	nop    WORD PTR [rax+rax*1+0x0]
  406888:	mov    ebx,eax
  40688a:	mov    rdx,r13
  40688d:	mov    ecx,0x1
  406892:	mov    rsi,r12
  406895:	mov    rdi,rbp
  406898:	mov    r9d,0xffffffff
  40689e:	mov    r8d,0x1
  4068a4:	call   406390 <flatcc_builder_create_vector@@Base>
  4068a9:	mov    rcx,rbx
  4068ac:	mov    edx,eax
  4068ae:	shl    rcx,0x20
  4068b2:	mov    rbx,rcx
  4068b5:	or     rbx,rdx
  4068b8:	test   eax,eax
  4068ba:	mov    rax,rcx
  4068bd:	cmovne rax,rbx
  4068c1:	add    rsp,0x8
  4068c5:	pop    rbx
  4068c6:	pop    rbp
  4068c7:	pop    r12
  4068c9:	pop    r13
  4068cb:	ret    
  4068cc:	nop    DWORD PTR [rax+0x0]

00000000004068d0 <flatcc_builder_create_union_vector@@Base>:
  4068d0:	push   r13
  4068d2:	push   r12
  4068d4:	mov    r12,rdx
  4068d7:	push   rbp
  4068d8:	push   rbx
  4068d9:	mov    rbp,rsi
  4068dc:	mov    rbx,rdi
  4068df:	sub    rsp,0x8
  4068e3:	call   4056a0 <flatcc_builder_start_offset_vector@@Base>
  4068e8:	test   eax,eax
  4068ea:	je     406900 <flatcc_builder_create_union_vector@@Base+0x30>
  4068ec:	add    rsp,0x8
  4068f0:	xor    eax,eax
  4068f2:	pop    rbx
  4068f3:	pop    rbp
  4068f4:	pop    r12
  4068f6:	pop    r13
  4068f8:	ret    
  4068f9:	nop    DWORD PTR [rax+0x0]
  406900:	mov    rsi,r12
  406903:	mov    rdi,rbx
  406906:	call   405160 <flatcc_builder_extend_offset_vector@@Base>
  40690b:	test   rax,rax
  40690e:	je     4068ec <flatcc_builder_create_union_vector@@Base+0x1c>
  406910:	mov    r13d,DWORD PTR [rbx+0x20]
  406914:	mov    rax,r13
  406917:	add    eax,r12d
  40691a:	cmp    eax,DWORD PTR [rbx+0x24]
  40691d:	mov    DWORD PTR [rbx+0x20],eax
  406920:	jae    406a00 <flatcc_builder_create_union_vector@@Base+0x130>
  406926:	add    r13,QWORD PTR [rbx+0x18]
  40692a:	je     4068ec <flatcc_builder_create_union_vector@@Base+0x1c>
  40692c:	mov    rdi,rbx
  40692f:	call   406830 <flatcc_builder_offset_vector_edit@@Base>
  406934:	xor    edi,edi
  406936:	test   r12,r12
  406939:	je     40695d <flatcc_builder_create_union_vector@@Base+0x8d>
  40693b:	nop    DWORD PTR [rax+rax*1+0x0]
  406940:	movzx  r8d,BYTE PTR [rbp+rdi*8+0x0]
  406946:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  40694b:	mov    r8d,DWORD PTR [rbp+rdi*8+0x4]
  406950:	mov    DWORD PTR [rax+rdi*4],r8d
  406954:	add    rdi,0x1
  406958:	cmp    r12,rdi
  40695b:	jne    406940 <flatcc_builder_create_union_vector@@Base+0x70>
  40695d:	mov    rcx,r12
  406960:	mov    rdx,rax
  406963:	mov    rsi,r13
  406966:	mov    rdi,rbx
  406969:	call   406850 <flatcc_builder_create_union_vector_direct@@Base>
  40696e:	mov    edx,DWORD PTR [rbx+0x20]
  406971:	mov    rdi,QWORD PTR [rbx+0x18]
  406975:	xor    esi,esi
  406977:	mov    r12,rax
  40697a:	mov    rbp,rax
  40697d:	sar    r12,0x20
  406981:	call   403070 <memset@plt>
  406986:	mov    rax,QWORD PTR [rbx+0x30]
  40698a:	mov    esi,DWORD PTR [rax]
  40698c:	mov    edx,DWORD PTR [rax+0x8]
  40698f:	mov    ecx,DWORD PTR [rax+0x4]
  406992:	mov    DWORD PTR [rbx+0x20],edx
  406995:	mov    DWORD PTR [rbx+0x28],esi
  406998:	mov    rdx,rsi
  40699b:	add    rsi,QWORD PTR [rbx+0x68]
  40699f:	mov    QWORD PTR [rbx+0x18],rsi
  4069a3:	mov    esi,DWORD PTR [rbx+0x70]
  4069a6:	sub    esi,edx
  4069a8:	cmp    ecx,esi
  4069aa:	mov    edx,esi
  4069ac:	cmovb  edx,ecx
  4069af:	mov    DWORD PTR [rbx+0x24],edx
  4069b2:	movzx  edx,WORD PTR [rbx+0xea]
  4069b9:	cmp    dx,WORD PTR [rbx+0xe8]
  4069c0:	mov    DWORD PTR [rax+0x4],ecx
  4069c3:	jbe    4069cc <flatcc_builder_create_union_vector@@Base+0xfc>
  4069c5:	mov    WORD PTR [rbx+0xe8],dx
  4069cc:	movzx  edx,WORD PTR [rax+0xc]
  4069d0:	sub    rax,0x24
  4069d4:	sub    DWORD PTR [rbx+0x104],0x1
  4069db:	mov    QWORD PTR [rbx+0x30],rax
  4069df:	shl    r12,0x20
  4069e3:	mov    eax,ebp
  4069e5:	or     rax,r12
  4069e8:	mov    WORD PTR [rbx+0xea],dx
  4069ef:	add    rsp,0x8
  4069f3:	pop    rbx
  4069f4:	pop    rbp
  4069f5:	pop    r12
  4069f7:	pop    r13
  4069f9:	ret    
  4069fa:	nop    WORD PTR [rax+rax*1+0x0]
  406a00:	lea    esi,[rax+0x1]
  406a03:	mov    edx,0xfffffffc
  406a08:	mov    rdi,rbx
  406a0b:	call   403ae0 <emit_test@@Base+0x5c0>
  406a10:	test   eax,eax
  406a12:	je     406926 <flatcc_builder_create_union_vector@@Base+0x56>
  406a18:	jmp    4068ec <flatcc_builder_create_union_vector@@Base+0x1c>
  406a1d:	nop    DWORD PTR [rax]

0000000000406a20 <flatcc_builder_start_union_vector@@Base>:
  406a20:	push   rbx
  406a21:	mov    esi,0x4
  406a26:	mov    rbx,rdi
  406a29:	call   403da0 <flatcc_builder_default_alloc@@Base+0x260>
  406a2e:	test   eax,eax
  406a30:	jne    406a78 <flatcc_builder_start_union_vector@@Base+0x58>
  406a32:	mov    rcx,QWORD PTR [rbx+0x30]
  406a36:	mov    edx,0x7
  406a3b:	mov    DWORD PTR [rcx+0x10],0x8
  406a42:	mov    DWORD PTR [rcx+0x14],0x0
  406a49:	mov    WORD PTR [rcx+0xe],dx
  406a4d:	mov    edx,DWORD PTR [rbx+0x28]
  406a50:	mov    rsi,rdx
  406a53:	add    rdx,QWORD PTR [rbx+0x68]
  406a57:	mov    QWORD PTR [rbx+0x18],rdx
  406a5b:	mov    edx,DWORD PTR [rbx+0x70]
  406a5e:	sub    edx,esi
  406a60:	mov    esi,0xfffffffc
  406a65:	cmp    edx,esi
  406a67:	cmova  edx,esi
  406a6a:	mov    DWORD PTR [rbx+0x24],edx
  406a6d:	mov    DWORD PTR [rcx+0x4],esi
  406a70:	pop    rbx
  406a71:	ret    
  406a72:	nop    WORD PTR [rax+rax*1+0x0]
  406a78:	mov    eax,0xffffffff
  406a7d:	pop    rbx
  406a7e:	ret    
  406a7f:	nop

0000000000406a80 <flatcc_builder_union_vector_edit@@Base>:
  406a80:	mov    rax,QWORD PTR [rdi+0x18]
  406a84:	ret    
  406a85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000406a90 <flatcc_builder_union_vector_count@@Base>:
  406a90:	mov    rax,QWORD PTR [rdi+0x30]
  406a94:	mov    eax,DWORD PTR [rax+0x14]
  406a97:	ret    
  406a98:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406aa0 <flatcc_builder_end_union_vector@@Base>:
  406aa0:	push   r13
  406aa2:	push   r12
  406aa4:	push   rbp
  406aa5:	push   rbx
  406aa6:	sub    rsp,0x8
  406aaa:	mov    rax,QWORD PTR [rdi+0x30]
  406aae:	cmp    WORD PTR [rax+0xe],0x7
  406ab3:	jne    406be5 <flatcc_builder_end_union_vector@@Base+0x145>
  406ab9:	mov    rbx,rdi
  406abc:	call   406a90 <flatcc_builder_union_vector_count@@Base>
  406ac1:	mov    ebp,DWORD PTR [rbx+0x20]
  406ac4:	mov    r12,rax
  406ac7:	lea    eax,[rax+rax*4]
  406aca:	add    eax,ebp
  406acc:	cmp    eax,DWORD PTR [rbx+0x24]
  406acf:	mov    DWORD PTR [rbx+0x20],eax
  406ad2:	jae    406bc0 <flatcc_builder_end_union_vector@@Base+0x120>
  406ad8:	add    rbp,QWORD PTR [rbx+0x18]
  406adc:	je     406bd8 <flatcc_builder_end_union_vector@@Base+0x138>
  406ae2:	mov    rdi,rbx
  406ae5:	lea    r13,[rbp+r12*4+0x0]
  406aea:	call   406a80 <flatcc_builder_union_vector_edit@@Base>
  406aef:	xor    edi,edi
  406af1:	test   r12,r12
  406af4:	je     406b1d <flatcc_builder_end_union_vector@@Base+0x7d>
  406af6:	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b00:	movzx  r8d,BYTE PTR [rax+rdi*8]
  406b05:	mov    BYTE PTR [r13+rdi*1+0x0],r8b
  406b0a:	mov    r8d,DWORD PTR [rax+rdi*8+0x4]
  406b0f:	mov    DWORD PTR [rbp+rdi*4+0x0],r8d
  406b14:	add    rdi,0x1
  406b18:	cmp    r12,rdi
  406b1b:	jne    406b00 <flatcc_builder_end_union_vector@@Base+0x60>
  406b1d:	mov    rcx,r12
  406b20:	mov    rdx,rbp
  406b23:	mov    rsi,r13
  406b26:	mov    rdi,rbx
  406b29:	call   406850 <flatcc_builder_create_union_vector_direct@@Base>
  406b2e:	mov    edx,DWORD PTR [rbx+0x20]
  406b31:	mov    rdi,QWORD PTR [rbx+0x18]
  406b35:	xor    esi,esi
  406b37:	mov    r12,rax
  406b3a:	mov    rbp,rax
  406b3d:	sar    r12,0x20
  406b41:	call   403070 <memset@plt>
  406b46:	mov    rax,QWORD PTR [rbx+0x30]
  406b4a:	mov    esi,DWORD PTR [rax]
  406b4c:	mov    edx,DWORD PTR [rax+0x8]
  406b4f:	mov    ecx,DWORD PTR [rax+0x4]
  406b52:	mov    DWORD PTR [rbx+0x20],edx
  406b55:	mov    DWORD PTR [rbx+0x28],esi
  406b58:	mov    rdx,rsi
  406b5b:	add    rsi,QWORD PTR [rbx+0x68]
  406b5f:	mov    QWORD PTR [rbx+0x18],rsi
  406b63:	mov    esi,DWORD PTR [rbx+0x70]
  406b66:	sub    esi,edx
  406b68:	cmp    ecx,esi
  406b6a:	mov    edx,esi
  406b6c:	cmovb  edx,ecx
  406b6f:	mov    DWORD PTR [rbx+0x24],edx
  406b72:	movzx  edx,WORD PTR [rbx+0xea]
  406b79:	cmp    dx,WORD PTR [rbx+0xe8]
  406b80:	mov    DWORD PTR [rax+0x4],ecx
  406b83:	jbe    406b8c <flatcc_builder_end_union_vector@@Base+0xec>
  406b85:	mov    WORD PTR [rbx+0xe8],dx
  406b8c:	movzx  edx,WORD PTR [rax+0xc]
  406b90:	sub    rax,0x24
  406b94:	sub    DWORD PTR [rbx+0x104],0x1
  406b9b:	mov    QWORD PTR [rbx+0x30],rax
  406b9f:	shl    r12,0x20
  406ba3:	mov    eax,ebp
  406ba5:	or     rax,r12
  406ba8:	mov    WORD PTR [rbx+0xea],dx
  406baf:	add    rsp,0x8
  406bb3:	pop    rbx
  406bb4:	pop    rbp
  406bb5:	pop    r12
  406bb7:	pop    r13
  406bb9:	ret    
  406bba:	nop    WORD PTR [rax+rax*1+0x0]
  406bc0:	lea    esi,[rax+0x1]
  406bc3:	mov    edx,0xfffffffc
  406bc8:	mov    rdi,rbx
  406bcb:	call   403ae0 <emit_test@@Base+0x5c0>
  406bd0:	test   eax,eax
  406bd2:	je     406ad8 <flatcc_builder_end_union_vector@@Base+0x38>
  406bd8:	add    rsp,0x8
  406bdc:	xor    eax,eax
  406bde:	pop    rbx
  406bdf:	pop    rbp
  406be0:	pop    r12
  406be2:	pop    r13
  406be4:	ret    
  406be5:	lea    rcx,[rip+0x2d74]        # 409960 <_IO_stdin_used@@Base+0x960>
  406bec:	lea    rsi,[rip+0x2795]        # 409388 <_IO_stdin_used@@Base+0x388>
  406bf3:	lea    rdi,[rip+0x2a06]        # 409600 <_IO_stdin_used@@Base+0x600>
  406bfa:	mov    edx,0x651
  406bff:	call   403060 <__assert_fail@plt>
  406c04:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406c0f:	nop

0000000000406c10 <flatcc_builder_extend_union_vector@@Base>:
  406c10:	push   rbp
  406c11:	push   rbx
  406c12:	xor    edx,edx
  406c14:	mov    ecx,esi
  406c16:	sub    rsp,0x8
  406c1a:	mov    rax,QWORD PTR [rdi+0x30]
  406c1e:	add    ecx,DWORD PTR [rax+0x14]
  406c21:	setb   dl
  406c24:	test   edx,edx
  406c26:	jne    406c6d <flatcc_builder_extend_union_vector@@Base+0x5d>
  406c28:	cmp    ecx,0x1fffffff
  406c2e:	ja     406c6d <flatcc_builder_extend_union_vector@@Base+0x5d>
  406c30:	mov    DWORD PTR [rax+0x14],ecx
  406c33:	mov    ebp,DWORD PTR [rdi+0x20]
  406c36:	mov    rbx,rdi
  406c39:	lea    eax,[rbp+rsi*8+0x0]
  406c3d:	cmp    eax,DWORD PTR [rdi+0x24]
  406c40:	mov    DWORD PTR [rdi+0x20],eax
  406c43:	jae    406c58 <flatcc_builder_extend_union_vector@@Base+0x48>
  406c45:	mov    rax,rbp
  406c48:	add    rax,QWORD PTR [rbx+0x18]
  406c4c:	add    rsp,0x8
  406c50:	pop    rbx
  406c51:	pop    rbp
  406c52:	ret    
  406c53:	nop    DWORD PTR [rax+rax*1+0x0]
  406c58:	lea    esi,[rax+0x1]
  406c5b:	mov    edx,0xfffffffc
  406c60:	call   403ae0 <emit_test@@Base+0x5c0>
  406c65:	test   eax,eax
  406c67:	je     406c45 <flatcc_builder_extend_union_vector@@Base+0x35>
  406c69:	xor    eax,eax
  406c6b:	jmp    406c4c <flatcc_builder_extend_union_vector@@Base+0x3c>
  406c6d:	call   403169 <posix_memalign@plt+0x79>
  406c72:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  406c7d:	nop    DWORD PTR [rax]

0000000000406c80 <flatcc_builder_truncate_union_vector@@Base>:
  406c80:	sub    rsp,0x8
  406c84:	mov    rax,QWORD PTR [rdi+0x30]
  406c88:	cmp    WORD PTR [rax+0xe],0x7
  406c8d:	jne    406cbf <flatcc_builder_truncate_union_vector@@Base+0x3f>
  406c8f:	mov    edx,DWORD PTR [rax+0x14]
  406c92:	cmp    edx,esi
  406c94:	jb     406cde <flatcc_builder_truncate_union_vector@@Base+0x5e>
  406c96:	sub    edx,esi
  406c98:	imul   esi,DWORD PTR [rax+0x10]
  406c9c:	mov    DWORD PTR [rax+0x14],edx
  406c9f:	mov    eax,DWORD PTR [rdi+0x20]
  406ca2:	mov    rcx,QWORD PTR [rdi+0x18]
  406ca6:	sub    eax,esi
  406ca8:	mov    edx,esi
  406caa:	xor    esi,esi
  406cac:	mov    DWORD PTR [rdi+0x20],eax
  406caf:	lea    rdi,[rcx+rax*1]
  406cb3:	call   403070 <memset@plt>
  406cb8:	xor    eax,eax
  406cba:	add    rsp,0x8
  406cbe:	ret    
  406cbf:	lea    rcx,[rip+0x2c5a]        # 409920 <_IO_stdin_used@@Base+0x920>
  406cc6:	lea    rsi,[rip+0x26bb]        # 409388 <_IO_stdin_used@@Base+0x388>
  406ccd:	lea    rdi,[rip+0x292c]        # 409600 <_IO_stdin_used@@Base+0x600>
  406cd4:	mov    edx,0x681
  406cd9:	call   403060 <__assert_fail@plt>
  406cde:	lea    rcx,[rip+0x2c3b]        # 409920 <_IO_stdin_used@@Base+0x920>
  406ce5:	lea    rsi,[rip+0x269c]        # 409388 <_IO_stdin_used@@Base+0x388>
  406cec:	lea    rdi,[rip+0x2875]        # 409568 <_IO_stdin_used@@Base+0x568>
  406cf3:	mov    edx,0x682
  406cf8:	call   403060 <__assert_fail@plt>
  406cfd:	nop    DWORD PTR [rax]

0000000000406d00 <flatcc_builder_union_vector_push@@Base>:
  406d00:	push   r12
  406d02:	push   rbp
  406d03:	push   rbx
  406d04:	mov    rdx,QWORD PTR [rdi+0x30]
  406d08:	cmp    WORD PTR [rdx+0xe],0x7
  406d0d:	jne    406d60 <flatcc_builder_union_vector_push@@Base+0x60>
  406d0f:	mov    eax,DWORD PTR [rdx+0x14]
  406d12:	cmp    eax,0x1fffffff
  406d17:	je     406d59 <flatcc_builder_union_vector_push@@Base+0x59>
  406d19:	add    eax,0x1
  406d1c:	mov    rbp,rdi
  406d1f:	mov    r12,rsi
  406d22:	mov    DWORD PTR [rdx+0x14],eax
  406d25:	mov    ebx,DWORD PTR [rdi+0x20]
  406d28:	lea    edx,[rbx+0x8]
  406d2b:	cmp    edx,DWORD PTR [rdi+0x24]
  406d2e:	mov    DWORD PTR [rdi+0x20],edx
  406d31:	jae    406d48 <flatcc_builder_union_vector_push@@Base+0x48>
  406d33:	mov    rax,rbx
  406d36:	add    rax,QWORD PTR [rbp+0x18]
  406d3a:	je     406d59 <flatcc_builder_union_vector_push@@Base+0x59>
  406d3c:	mov    QWORD PTR [rax],r12
  406d3f:	pop    rbx
  406d40:	pop    rbp
  406d41:	pop    r12
  406d43:	ret    
  406d44:	nop    DWORD PTR [rax+0x0]
  406d48:	lea    esi,[rbx+0x9]
  406d4b:	mov    edx,0xfffffffc
  406d50:	call   403ae0 <emit_test@@Base+0x5c0>
  406d55:	test   eax,eax
  406d57:	je     406d33 <flatcc_builder_union_vector_push@@Base+0x33>
  406d59:	pop    rbx
  406d5a:	xor    eax,eax
  406d5c:	pop    rbp
  406d5d:	pop    r12
  406d5f:	ret    
  406d60:	lea    rcx,[rip+0x2b79]        # 4098e0 <_IO_stdin_used@@Base+0x8e0>
  406d67:	lea    rsi,[rip+0x261a]        # 409388 <_IO_stdin_used@@Base+0x388>
  406d6e:	lea    rdi,[rip+0x288b]        # 409600 <_IO_stdin_used@@Base+0x600>
  406d75:	mov    edx,0x68d
  406d7a:	call   403060 <__assert_fail@plt>
  406d7f:	nop

0000000000406d80 <flatcc_builder_append_union_vector@@Base>:
  406d80:	push   r13
  406d82:	push   r12
  406d84:	push   rbp
  406d85:	push   rbx
  406d86:	sub    rsp,0x8
  406d8a:	mov    rax,QWORD PTR [rdi+0x30]
  406d8e:	cmp    WORD PTR [rax+0xe],0x7
  406d93:	jne    406e0b <flatcc_builder_append_union_vector@@Base+0x8b>
  406d95:	mov    r13,rsi
  406d98:	mov    ecx,edx
  406d9a:	xor    esi,esi
  406d9c:	add    ecx,DWORD PTR [rax+0x14]
  406d9f:	setb   sil
  406da3:	test   esi,esi
  406da5:	jne    406e06 <flatcc_builder_append_union_vector@@Base+0x86>
  406da7:	cmp    ecx,0x1fffffff
  406dad:	ja     406e06 <flatcc_builder_append_union_vector@@Base+0x86>
  406daf:	mov    DWORD PTR [rax+0x14],ecx
  406db2:	mov    r12d,DWORD PTR [rdi+0x20]
  406db6:	lea    ebx,[rdx*8+0x0]
  406dbd:	mov    rbp,rdi
  406dc0:	mov    rdx,r12
  406dc3:	add    edx,ebx
  406dc5:	cmp    edx,DWORD PTR [rdi+0x24]
  406dc8:	mov    DWORD PTR [rdi+0x20],edx
  406dcb:	jae    406df0 <flatcc_builder_append_union_vector@@Base+0x70>
  406dcd:	add    r12,QWORD PTR [rbp+0x18]
  406dd1:	je     406de0 <flatcc_builder_append_union_vector@@Base+0x60>
  406dd3:	mov    edx,ebx
  406dd5:	mov    rsi,r13
  406dd8:	mov    rdi,r12
  406ddb:	call   4030a0 <memcpy@plt>
  406de0:	add    rsp,0x8
  406de4:	mov    rax,r12
  406de7:	pop    rbx
  406de8:	pop    rbp
  406de9:	pop    r12
  406deb:	pop    r13
  406ded:	ret    
  406dee:	xchg   ax,ax
  406df0:	lea    esi,[rdx+0x1]
  406df3:	mov    edx,0xfffffffc
  406df8:	call   403ae0 <emit_test@@Base+0x5c0>
  406dfd:	test   eax,eax
  406dff:	je     406dcd <flatcc_builder_append_union_vector@@Base+0x4d>
  406e01:	xor    r12d,r12d
  406e04:	jmp    406de0 <flatcc_builder_append_union_vector@@Base+0x60>
  406e06:	call   403169 <posix_memalign@plt+0x79>
  406e0b:	lea    rcx,[rip+0x2a8e]        # 4098a0 <_IO_stdin_used@@Base+0x8a0>
  406e12:	lea    rsi,[rip+0x256f]        # 409388 <_IO_stdin_used@@Base+0x388>
  406e19:	lea    rdi,[rip+0x27e0]        # 409600 <_IO_stdin_used@@Base+0x600>
  406e20:	mov    edx,0x69c
  406e25:	call   403060 <__assert_fail@plt>
  406e2a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000406e30 <flatcc_builder_create_string@@Base>:
  406e30:	push   rbp
  406e31:	push   rbx
  406e32:	sub    rsp,0xb8
  406e39:	mov    rax,QWORD PTR fs:0x28
  406e42:	mov    QWORD PTR [rsp+0xa8],rax
  406e4a:	xor    eax,eax
  406e4c:	mov    eax,0xffffffff
  406e51:	cmp    rdx,rax
  406e54:	ja     406f20 <flatcc_builder_create_string@@Base+0xf0>
  406e5a:	mov    rbx,rdi
  406e5d:	mov    edi,DWORD PTR [rdi+0xf0]
  406e63:	lea    rcx,[rsp+0xc]
  406e68:	mov    DWORD PTR [rsp+0xc],edx
  406e6c:	mov    QWORD PTR [rsp+0x28],0x4
  406e75:	mov    QWORD PTR [rsp+0x20],rcx
  406e7a:	lea    eax,[rdi-0x1]
  406e7d:	sub    eax,edx
  406e7f:	and    eax,0x3
  406e82:	add    eax,0x1
  406e85:	test   rdx,rdx
  406e88:	jne    406f00 <flatcc_builder_create_string@@Base+0xd0>
  406e8a:	mov    edx,0x2
  406e8f:	mov    ecx,0x1
  406e94:	mov    r8d,0x4
  406e9a:	add    r8,rax
  406e9d:	mov    rsi,0x409e80
  406ea4:	mov    ebp,edi
  406ea6:	sub    ebp,r8d
  406ea9:	shl    rcx,0x4
  406ead:	mov    QWORD PTR [rsp+0x10],r8
  406eb2:	cmp    edi,ebp
  406eb4:	mov    QWORD PTR [rsp+rcx*1+0x28],rax
  406eb9:	mov    DWORD PTR [rsp+0x18],edx
  406ebd:	mov    QWORD PTR [rsp+rcx*1+0x20],rsi
  406ec2:	jle    406f24 <flatcc_builder_create_string@@Base+0xf4>
  406ec4:	lea    rsi,[rsp+0x20]
  406ec9:	mov    rdi,QWORD PTR [rbx+0x38]
  406ecd:	mov    ecx,ebp
  406ecf:	call   QWORD PTR [rbx+0x48]
  406ed2:	test   eax,eax
  406ed4:	jne    406f48 <flatcc_builder_create_string@@Base+0x118>
  406ed6:	mov    DWORD PTR [rbx+0xf0],ebp
  406edc:	mov    rbx,QWORD PTR [rsp+0xa8]
  406ee4:	xor    rbx,QWORD PTR fs:0x28
  406eed:	mov    eax,ebp
  406eef:	jne    406f43 <flatcc_builder_create_string@@Base+0x113>
  406ef1:	add    rsp,0xb8
  406ef8:	pop    rbx
  406ef9:	pop    rbp
  406efa:	ret    
  406efb:	nop    DWORD PTR [rax+rax*1+0x0]
  406f00:	lea    r8,[rdx+0x4]
  406f04:	mov    QWORD PTR [rsp+0x38],rdx
  406f09:	mov    QWORD PTR [rsp+0x30],rsi
  406f0e:	mov    edx,0x3
  406f13:	mov    ecx,0x2
  406f18:	jmp    406e9a <flatcc_builder_create_string@@Base+0x6a>
  406f1d:	nop    DWORD PTR [rax]
  406f20:	xor    ebp,ebp
  406f22:	jmp    406edc <flatcc_builder_create_string@@Base+0xac>
  406f24:	lea    rcx,[rip+0x2ea5]        # 409dd0 <_IO_stdin_used@@Base+0xdd0>
  406f2b:	lea    rsi,[rip+0x2456]        # 409388 <_IO_stdin_used@@Base+0x388>
  406f32:	lea    rdi,[rip+0x27e6]        # 40971f <_IO_stdin_used@@Base+0x71f>
  406f39:	mov    edx,0x287
  406f3e:	call   403060 <__assert_fail@plt>
  406f43:	call   403050 <__stack_chk_fail@plt>
  406f48:	call   403146 <posix_memalign@plt+0x56>
  406f4d:	nop    DWORD PTR [rax]

0000000000406f50 <flatcc_builder_create_string_str@@Base>:
  406f50:	push   rbp
  406f51:	push   rbx
  406f52:	mov    rbp,rdi
  406f55:	mov    rdi,rsi
  406f58:	mov    rbx,rsi
  406f5b:	sub    rsp,0x8
  406f5f:	call   403040 <strlen@plt>
  406f64:	add    rsp,0x8
  406f68:	mov    rsi,rbx
  406f6b:	mov    rdi,rbp
  406f6e:	pop    rbx
  406f6f:	pop    rbp
  406f70:	mov    rdx,rax
  406f73:	jmp    406e30 <flatcc_builder_create_string@@Base>
  406f78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406f80 <flatcc_builder_create_string_strn@@Base>:
  406f80:	push   r12
  406f82:	push   rbp
  406f83:	mov    rbp,rsi
  406f86:	push   rbx
  406f87:	mov    r12,rdi
  406f8a:	xor    esi,esi
  406f8c:	mov    rdi,rbp
  406f8f:	mov    rbx,rdx
  406f92:	call   403080 <memchr@plt>
  406f97:	mov    rdx,rax
  406f9a:	mov    rsi,rbp
  406f9d:	mov    rdi,r12
  406fa0:	sub    rdx,rbp
  406fa3:	test   rax,rax
  406fa6:	cmovne rbx,rdx
  406faa:	mov    rdx,rbx
  406fad:	pop    rbx
  406fae:	pop    rbp
  406faf:	pop    r12
  406fb1:	jmp    406e30 <flatcc_builder_create_string@@Base>
  406fb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000406fc0 <flatcc_builder_end_string@@Base>:
  406fc0:	push   rbp
  406fc1:	push   rbx
  406fc2:	sub    rsp,0x8
  406fc6:	mov    rax,QWORD PTR [rdi+0x30]
  406fca:	cmp    WORD PTR [rax+0xe],0x6
  406fcf:	jne    407096 <flatcc_builder_end_string@@Base+0xd6>
  406fd5:	mov    edx,DWORD PTR [rax+0x14]
  406fd8:	mov    rbx,rdi
  406fdb:	cmp    edx,DWORD PTR [rdi+0x20]
  406fde:	jne    407077 <flatcc_builder_end_string@@Base+0xb7>
  406fe4:	mov    rsi,QWORD PTR [rdi+0x18]
  406fe8:	call   406e30 <flatcc_builder_create_string@@Base>
  406fed:	test   eax,eax
  406fef:	mov    ebp,eax
  406ff1:	jne    407000 <flatcc_builder_end_string@@Base+0x40>
  406ff3:	add    rsp,0x8
  406ff7:	mov    eax,ebp
  406ff9:	pop    rbx
  406ffa:	pop    rbp
  406ffb:	ret    
  406ffc:	nop    DWORD PTR [rax+0x0]
  407000:	mov    edx,DWORD PTR [rbx+0x20]
  407003:	mov    rdi,QWORD PTR [rbx+0x18]
  407007:	xor    esi,esi
  407009:	call   403070 <memset@plt>
  40700e:	mov    rax,QWORD PTR [rbx+0x30]
  407012:	mov    edi,DWORD PTR [rbx+0x70]
  407015:	mov    esi,DWORD PTR [rax]
  407017:	mov    edx,DWORD PTR [rax+0x8]
  40701a:	mov    ecx,DWORD PTR [rax+0x4]
  40701d:	mov    DWORD PTR [rbx+0x20],edx
  407020:	mov    rdx,rsi
  407023:	mov    DWORD PTR [rbx+0x28],esi
  407026:	add    rsi,QWORD PTR [rbx+0x68]
  40702a:	sub    edi,edx
  40702c:	cmp    ecx,edi
  40702e:	mov    edx,edi
  407030:	cmovb  edx,ecx
  407033:	mov    DWORD PTR [rbx+0x24],edx
  407036:	movzx  edx,WORD PTR [rbx+0xea]
  40703d:	cmp    dx,WORD PTR [rbx+0xe8]
  407044:	mov    QWORD PTR [rbx+0x18],rsi
  407048:	mov    DWORD PTR [rax+0x4],ecx
  40704b:	jbe    407054 <flatcc_builder_end_string@@Base+0x94>
  40704d:	mov    WORD PTR [rbx+0xe8],dx
  407054:	movzx  edx,WORD PTR [rax+0xc]
  407058:	sub    rax,0x24
  40705c:	sub    DWORD PTR [rbx+0x104],0x1
  407063:	mov    QWORD PTR [rbx+0x30],rax
  407067:	mov    eax,ebp
  407069:	mov    WORD PTR [rbx+0xea],dx
  407070:	add    rsp,0x8
  407074:	pop    rbx
  407075:	pop    rbp
  407076:	ret    
  407077:	lea    rcx,[rip+0x2802]        # 409880 <_IO_stdin_used@@Base+0x880>
  40707e:	lea    rsi,[rip+0x2303]        # 409388 <_IO_stdin_used@@Base+0x388>
  407085:	lea    rdi,[rip+0x25ac]        # 409638 <_IO_stdin_used@@Base+0x638>
  40708c:	mov    edx,0x6c5
  407091:	call   403060 <__assert_fail@plt>
  407096:	lea    rcx,[rip+0x27e3]        # 409880 <_IO_stdin_used@@Base+0x880>
  40709d:	lea    rsi,[rip+0x22e4]        # 409388 <_IO_stdin_used@@Base+0x388>
  4070a4:	lea    rdi,[rip+0x2465]        # 409510 <_IO_stdin_used@@Base+0x510>
  4070ab:	mov    edx,0x6c4
  4070b0:	call   403060 <__assert_fail@plt>
  4070b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004070c0 <flatcc_builder_string_edit@@Base>:
  4070c0:	mov    rax,QWORD PTR [rdi+0x18]
  4070c4:	ret    
  4070c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004070d0 <flatcc_builder_string_len@@Base>:
  4070d0:	mov    rax,QWORD PTR [rdi+0x30]
  4070d4:	mov    eax,DWORD PTR [rax+0x14]
  4070d7:	ret    
  4070d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004070e0 <flatcc_builder_table_add@@Base>:
  4070e0:	push   r13
  4070e2:	push   r12
  4070e4:	push   rbp
  4070e5:	push   rbx
  4070e6:	sub    rsp,0x8
  4070ea:	mov    rax,QWORD PTR [rdi+0x30]
  4070ee:	cmp    WORD PTR [rax+0xe],0x3
  4070f3:	jne    407202 <flatcc_builder_table_add@@Base+0x122>
  4070f9:	cmp    esi,0x7ffc
  4070ff:	mov    r12d,esi
  407102:	ja     4071e3 <flatcc_builder_table_add@@Base+0x103>
  407108:	cmp    WORD PTR [rdi+0xea],cx
  40710f:	mov    rbx,rdi
  407112:	jb     407180 <flatcc_builder_table_add@@Base+0xa0>
  407114:	movsxd r13,r12d
  407117:	add    r13,r13
  40711a:	mov    rsi,r13
  40711d:	add    rsi,QWORD PTR [rbx+0x8]
  407121:	cmp    WORD PTR [rsi],0x0
  407125:	jne    4071c4 <flatcc_builder_table_add@@Base+0xe4>
  40712b:	mov    eax,DWORD PTR [rbx+0x14]
  40712e:	movzx  ecx,cx
  407131:	xor    eax,r12d
  407134:	imul   eax,eax,0x9e3779b1
  40713a:	xor    eax,edx
  40713c:	imul   eax,eax,0x9e3779b1
  407142:	mov    DWORD PTR [rbx+0x14],eax
  407145:	mov    eax,DWORD PTR [rbx+0x20]
  407148:	lea    ebp,[rcx+rax*1-0x1]
  40714c:	neg    ecx
  40714e:	and    ebp,ecx
  407150:	add    edx,ebp
  407152:	cmp    edx,DWORD PTR [rbx+0x24]
  407155:	mov    DWORD PTR [rbx+0x20],edx
  407158:	jae    4071a0 <flatcc_builder_table_add@@Base+0xc0>
  40715a:	lea    eax,[rbp+0x4]
  40715d:	mov    WORD PTR [rsi],ax
  407160:	cmp    r12w,WORD PTR [rbx+0x10]
  407165:	jae    407190 <flatcc_builder_table_add@@Base+0xb0>
  407167:	mov    eax,ebp
  407169:	add    rax,QWORD PTR [rbx+0x18]
  40716d:	add    rsp,0x8
  407171:	pop    rbx
  407172:	pop    rbp
  407173:	pop    r12
  407175:	pop    r13
  407177:	ret    
  407178:	nop    DWORD PTR [rax+rax*1+0x0]
  407180:	mov    WORD PTR [rdi+0xea],cx
  407187:	jmp    407114 <flatcc_builder_table_add@@Base+0x34>
  407189:	nop    DWORD PTR [rax+0x0]
  407190:	add    r12d,0x1
  407194:	mov    WORD PTR [rbx+0x10],r12w
  407199:	jmp    407167 <flatcc_builder_table_add@@Base+0x87>
  40719b:	nop    DWORD PTR [rax+rax*1+0x0]
  4071a0:	lea    esi,[rdx+0x1]
  4071a3:	mov    rdi,rbx
  4071a6:	mov    edx,0xfffc
  4071ab:	call   403ae0 <emit_test@@Base+0x5c0>
  4071b0:	test   eax,eax
  4071b2:	jne    4071c0 <flatcc_builder_table_add@@Base+0xe0>
  4071b4:	mov    rsi,r13
  4071b7:	add    rsi,QWORD PTR [rbx+0x8]
  4071bb:	jmp    40715a <flatcc_builder_table_add@@Base+0x7a>
  4071bd:	nop    DWORD PTR [rax]
  4071c0:	xor    eax,eax
  4071c2:	jmp    40716d <flatcc_builder_table_add@@Base+0x8d>
  4071c4:	lea    rcx,[rip+0x2695]        # 409860 <_IO_stdin_used@@Base+0x860>
  4071cb:	lea    rsi,[rip+0x21b6]        # 409388 <_IO_stdin_used@@Base+0x388>
  4071d2:	lea    rdi,[rip+0x2546]        # 40971f <_IO_stdin_used@@Base+0x71f>
  4071d9:	mov    edx,0x6f8
  4071de:	call   403060 <__assert_fail@plt>
  4071e3:	lea    rcx,[rip+0x2676]        # 409860 <_IO_stdin_used@@Base+0x860>
  4071ea:	lea    rsi,[rip+0x2197]        # 409388 <_IO_stdin_used@@Base+0x388>
  4071f1:	lea    rdi,[rip+0x2468]        # 409660 <_IO_stdin_used@@Base+0x660>
  4071f8:	mov    edx,0x6ee
  4071fd:	call   403060 <__assert_fail@plt>
  407202:	lea    rcx,[rip+0x2657]        # 409860 <_IO_stdin_used@@Base+0x860>
  407209:	lea    rsi,[rip+0x2178]        # 409388 <_IO_stdin_used@@Base+0x388>
  407210:	lea    rdi,[rip+0x23b9]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  407217:	mov    edx,0x6ed
  40721c:	call   403060 <__assert_fail@plt>
  407221:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40722c:	nop    DWORD PTR [rax+0x0]

0000000000407230 <flatcc_builder_table_edit@@Base>:
  407230:	mov    rax,QWORD PTR [rdi+0x30]
  407234:	cmp    WORD PTR [rax+0xe],0x3
  407239:	jne    407246 <flatcc_builder_table_edit@@Base+0x16>
  40723b:	mov    eax,DWORD PTR [rdi+0x20]
  40723e:	sub    rax,rsi
  407241:	add    rax,QWORD PTR [rdi+0x18]
  407245:	ret    
  407246:	lea    rcx,[rip+0x25f3]        # 409840 <_IO_stdin_used@@Base+0x840>
  40724d:	lea    rsi,[rip+0x2134]        # 409388 <_IO_stdin_used@@Base+0x388>
  407254:	lea    rdi,[rip+0x2375]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  40725b:	sub    rsp,0x8
  40725f:	mov    edx,0x702
  407264:	call   403060 <__assert_fail@plt>
  407269:	nop    DWORD PTR [rax+0x0]

0000000000407270 <flatcc_builder_table_add_copy@@Base>:
  407270:	push   rbp
  407271:	push   rbx
  407272:	mov    rbx,rcx
  407275:	mov    rbp,rdx
  407278:	movzx  ecx,r8w
  40727c:	mov    rdx,rbx
  40727f:	sub    rsp,0x8
  407283:	call   4070e0 <flatcc_builder_table_add@@Base>
  407288:	test   rax,rax
  40728b:	mov    rcx,rax
  40728e:	je     4072a1 <flatcc_builder_table_add_copy@@Base+0x31>
  407290:	mov    rdx,rbx
  407293:	mov    rsi,rbp
  407296:	mov    rdi,rax
  407299:	call   4030a0 <memcpy@plt>
  40729e:	mov    rcx,rax
  4072a1:	add    rsp,0x8
  4072a5:	mov    rax,rcx
  4072a8:	pop    rbx
  4072a9:	pop    rbp
  4072aa:	ret    
  4072ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004072b0 <flatcc_builder_table_add_offset@@Base>:
  4072b0:	push   r13
  4072b2:	push   r12
  4072b4:	push   rbp
  4072b5:	push   rbx
  4072b6:	sub    rsp,0x8
  4072ba:	mov    rax,QWORD PTR [rdi+0x30]
  4072be:	cmp    WORD PTR [rax+0xe],0x3
  4072c3:	jne    4073c2 <flatcc_builder_table_add_offset@@Base+0x112>
  4072c9:	cmp    esi,0x7ffc
  4072cf:	mov    r12d,esi
  4072d2:	ja     4073a3 <flatcc_builder_table_add_offset@@Base+0xf3>
  4072d8:	movsxd r13,esi
  4072db:	mov    rbx,rdi
  4072de:	add    r13,r13
  4072e1:	mov    rdx,r13
  4072e4:	add    rdx,QWORD PTR [rdi+0x8]
  4072e8:	cmp    WORD PTR [rdx],0x0
  4072ec:	jne    407384 <flatcc_builder_table_add_offset@@Base+0xd4>
  4072f2:	mov    eax,DWORD PTR [rdi+0x14]
  4072f5:	xor    eax,esi
  4072f7:	imul   eax,eax,0x9e3779b1
  4072fd:	xor    eax,0x4
  407300:	imul   eax,eax,0x9e3779b1
  407306:	mov    DWORD PTR [rdi+0x14],eax
  407309:	mov    eax,DWORD PTR [rdi+0x20]
  40730c:	lea    ebp,[rax+0x3]
  40730f:	and    ebp,0xfffffffc
  407312:	lea    esi,[rbp+0x4]
  407315:	cmp    esi,DWORD PTR [rdi+0x24]
  407318:	mov    DWORD PTR [rdi+0x20],esi
  40731b:	ja     407360 <flatcc_builder_table_add_offset@@Base+0xb0>
  40731d:	lea    eax,[rbp+0x4]
  407320:	mov    WORD PTR [rdx],ax
  407323:	cmp    r12w,WORD PTR [rbx+0x10]
  407328:	jae    407350 <flatcc_builder_table_add_offset@@Base+0xa0>
  40732a:	mov    rax,QWORD PTR [rbx]
  40732d:	lea    rdx,[rax+0x2]
  407331:	mov    QWORD PTR [rbx],rdx
  407334:	mov    WORD PTR [rax],bp
  407337:	mov    eax,ebp
  407339:	add    rax,QWORD PTR [rbx+0x18]
  40733d:	add    rsp,0x8
  407341:	pop    rbx
  407342:	pop    rbp
  407343:	pop    r12
  407345:	pop    r13
  407347:	ret    
  407348:	nop    DWORD PTR [rax+rax*1+0x0]
  407350:	lea    esi,[r12+0x1]
  407355:	mov    WORD PTR [rbx+0x10],si
  407359:	jmp    40732a <flatcc_builder_table_add_offset@@Base+0x7a>
  40735b:	nop    DWORD PTR [rax+rax*1+0x0]
  407360:	mov    edx,0xfffc
  407365:	call   403ae0 <emit_test@@Base+0x5c0>
  40736a:	test   eax,eax
  40736c:	jne    407380 <flatcc_builder_table_add_offset@@Base+0xd0>
  40736e:	mov    rdx,r13
  407371:	add    rdx,QWORD PTR [rbx+0x8]
  407375:	jmp    40731d <flatcc_builder_table_add_offset@@Base+0x6d>
  407377:	nop    WORD PTR [rax+rax*1+0x0]
  407380:	xor    eax,eax
  407382:	jmp    40733d <flatcc_builder_table_add_offset@@Base+0x8d>
  407384:	lea    rcx,[rip+0x2495]        # 409820 <_IO_stdin_used@@Base+0x820>
  40738b:	lea    rsi,[rip+0x1ff6]        # 409388 <_IO_stdin_used@@Base+0x388>
  407392:	lea    rdi,[rip+0x2386]        # 40971f <_IO_stdin_used@@Base+0x71f>
  407399:	mov    edx,0x71b
  40739e:	call   403060 <__assert_fail@plt>
  4073a3:	lea    rcx,[rip+0x2476]        # 409820 <_IO_stdin_used@@Base+0x820>
  4073aa:	lea    rsi,[rip+0x1fd7]        # 409388 <_IO_stdin_used@@Base+0x388>
  4073b1:	lea    rdi,[rip+0x22a8]        # 409660 <_IO_stdin_used@@Base+0x660>
  4073b8:	mov    edx,0x714
  4073bd:	call   403060 <__assert_fail@plt>
  4073c2:	lea    rcx,[rip+0x2457]        # 409820 <_IO_stdin_used@@Base+0x820>
  4073c9:	lea    rsi,[rip+0x1fb8]        # 409388 <_IO_stdin_used@@Base+0x388>
  4073d0:	lea    rdi,[rip+0x21f9]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  4073d7:	mov    edx,0x713
  4073dc:	call   403060 <__assert_fail@plt>
  4073e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4073ec:	nop    DWORD PTR [rax+0x0]

00000000004073f0 <flatcc_builder_table_add_union@@Base>:
  4073f0:	push   r13
  4073f2:	push   r12
  4073f4:	mov    r13,rdx
  4073f7:	push   rbp
  4073f8:	push   rbx
  4073f9:	sar    r13,0x20
  4073fd:	sub    rsp,0x8
  407401:	mov    rax,QWORD PTR [rdi+0x30]
  407405:	cmp    WORD PTR [rax+0xe],0x3
  40740a:	jne    407484 <flatcc_builder_table_add_union@@Base+0x94>
  40740c:	test   dl,dl
  40740e:	mov    r12,rdi
  407411:	mov    ebx,esi
  407413:	mov    rbp,rdx
  407416:	je     407460 <flatcc_builder_table_add_union@@Base+0x70>
  407418:	test   r13d,r13d
  40741b:	je     40742e <flatcc_builder_table_add_union@@Base+0x3e>
  40741d:	call   4072b0 <flatcc_builder_table_add_offset@@Base>
  407422:	test   rax,rax
  407425:	je     4074c2 <flatcc_builder_table_add_union@@Base+0xd2>
  40742b:	mov    DWORD PTR [rax],r13d
  40742e:	lea    esi,[rbx-0x1]
  407431:	mov    ecx,0x1
  407436:	mov    edx,0x1
  40743b:	mov    rdi,r12
  40743e:	call   4070e0 <flatcc_builder_table_add@@Base>
  407443:	test   rax,rax
  407446:	je     4074a3 <flatcc_builder_table_add_union@@Base+0xb3>
  407448:	mov    BYTE PTR [rax],bpl
  40744b:	add    rsp,0x8
  40744f:	xor    eax,eax
  407451:	pop    rbx
  407452:	pop    rbp
  407453:	pop    r12
  407455:	pop    r13
  407457:	ret    
  407458:	nop    DWORD PTR [rax+rax*1+0x0]
  407460:	test   r13d,r13d
  407463:	je     40742e <flatcc_builder_table_add_union@@Base+0x3e>
  407465:	lea    rcx,[rip+0x2544]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  40746c:	lea    rsi,[rip+0x1f15]        # 409388 <_IO_stdin_used@@Base+0x388>
  407473:	lea    rdi,[rip+0x222e]        # 4096a8 <_IO_stdin_used@@Base+0x6a8>
  40747a:	mov    edx,0x5ef
  40747f:	call   403060 <__assert_fail@plt>
  407484:	lea    rcx,[rip+0x2525]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  40748b:	lea    rsi,[rip+0x1ef6]        # 409388 <_IO_stdin_used@@Base+0x388>
  407492:	lea    rdi,[rip+0x2137]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  407499:	mov    edx,0x5ee
  40749e:	call   403060 <__assert_fail@plt>
  4074a3:	lea    rcx,[rip+0x2506]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  4074aa:	lea    rsi,[rip+0x1ed7]        # 409388 <_IO_stdin_used@@Base+0x388>
  4074b1:	lea    rdi,[rip+0x22f6]        # 4097ae <_IO_stdin_used@@Base+0x7ae>
  4074b8:	mov    edx,0x5f6
  4074bd:	call   403060 <__assert_fail@plt>
  4074c2:	lea    rcx,[rip+0x24e7]        # 4099b0 <_IO_stdin_used@@Base+0x9b0>
  4074c9:	lea    rsi,[rip+0x1eb8]        # 409388 <_IO_stdin_used@@Base+0x388>
  4074d0:	lea    rdi,[rip+0x22cd]        # 4097a4 <_IO_stdin_used@@Base+0x7a4>
  4074d7:	mov    edx,0x5f2
  4074dc:	call   403060 <__assert_fail@plt>
  4074e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  4074ec:	nop    DWORD PTR [rax+0x0]

00000000004074f0 <flatcc_builder_table_add_union_vector@@Base>:
  4074f0:	push   r13
  4074f2:	push   r12
  4074f4:	push   rbp
  4074f5:	push   rbx
  4074f6:	mov    rbp,rdx
  4074f9:	sar    rbp,0x20
  4074fd:	sub    rsp,0x18
  407501:	mov    rax,QWORD PTR [rdi+0x30]
  407505:	cmp    WORD PTR [rax+0xe],0x3
  40750a:	jne    407586 <flatcc_builder_table_add_union_vector@@Base+0x96>
  40750c:	test   ebp,ebp
  40750e:	sete   al
  407511:	test   edx,edx
  407513:	sete   cl
  407516:	cmp    cl,al
  407518:	je     407540 <flatcc_builder_table_add_union_vector@@Base+0x50>
  40751a:	test   edx,edx
  40751c:	setne  dl
  40751f:	cmp    al,dl
  407521:	je     4075a5 <flatcc_builder_table_add_union_vector@@Base+0xb5>
  407527:	mov    r12d,0xffffffff
  40752d:	add    rsp,0x18
  407531:	mov    eax,r12d
  407534:	pop    rbx
  407535:	pop    rbp
  407536:	pop    r12
  407538:	pop    r13
  40753a:	ret    
  40753b:	nop    DWORD PTR [rax+rax*1+0x0]
  407540:	xor    r12d,r12d
  407543:	test   edx,edx
  407545:	je     40752d <flatcc_builder_table_add_union_vector@@Base+0x3d>
  407547:	mov    r13d,esi
  40754a:	lea    esi,[rsi-0x1]
  40754d:	mov    QWORD PTR [rsp+0x8],rdx
  407552:	mov    rbx,rdi
  407555:	call   4072b0 <flatcc_builder_table_add_offset@@Base>
  40755a:	test   rax,rax
  40755d:	mov    rdx,QWORD PTR [rsp+0x8]
  407562:	je     4075e3 <flatcc_builder_table_add_union_vector@@Base+0xf3>
  407564:	mov    DWORD PTR [rax],edx
  407566:	mov    esi,r13d
  407569:	mov    rdi,rbx
  40756c:	call   4072b0 <flatcc_builder_table_add_offset@@Base>
  407571:	test   rax,rax
  407574:	je     4075c4 <flatcc_builder_table_add_union_vector@@Base+0xd4>
  407576:	mov    DWORD PTR [rax],ebp
  407578:	add    rsp,0x18
  40757c:	mov    eax,r12d
  40757f:	pop    rbx
  407580:	pop    rbp
  407581:	pop    r12
  407583:	pop    r13
  407585:	ret    
  407586:	lea    rcx,[rip+0x23f3]        # 409980 <_IO_stdin_used@@Base+0x980>
  40758d:	lea    rsi,[rip+0x1df4]        # 409388 <_IO_stdin_used@@Base+0x388>
  407594:	lea    rdi,[rip+0x2035]        # 4095d0 <_IO_stdin_used@@Base+0x5d0>
  40759b:	mov    edx,0x600
  4075a0:	call   403060 <__assert_fail@plt>
  4075a5:	lea    rcx,[rip+0x23d4]        # 409980 <_IO_stdin_used@@Base+0x980>
  4075ac:	lea    rsi,[rip+0x1dd5]        # 409388 <_IO_stdin_used@@Base+0x388>
  4075b3:	lea    rdi,[rip+0x2116]        # 4096d0 <_IO_stdin_used@@Base+0x6d0>
  4075ba:	mov    edx,0x601
  4075bf:	call   403060 <__assert_fail@plt>
  4075c4:	lea    rcx,[rip+0x23b5]        # 409980 <_IO_stdin_used@@Base+0x980>
  4075cb:	lea    rsi,[rip+0x1db6]        # 409388 <_IO_stdin_used@@Base+0x388>
  4075d2:	lea    rdi,[rip+0x21cb]        # 4097a4 <_IO_stdin_used@@Base+0x7a4>
  4075d9:	mov    edx,0x608
  4075de:	call   403060 <__assert_fail@plt>
  4075e3:	lea    rcx,[rip+0x2396]        # 409980 <_IO_stdin_used@@Base+0x980>
  4075ea:	lea    rsi,[rip+0x1d97]        # 409388 <_IO_stdin_used@@Base+0x388>
  4075f1:	lea    rdi,[rip+0x21ac]        # 4097a4 <_IO_stdin_used@@Base+0x7a4>
  4075f8:	mov    edx,0x604
  4075fd:	call   403060 <__assert_fail@plt>
  407602:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40760d:	nop    DWORD PTR [rax]

0000000000407610 <flatcc_builder_push_buffer_alignment@@Base>:
  407610:	mov    edx,0x4
  407615:	movzx  eax,WORD PTR [rdi+0xe8]
  40761c:	mov    WORD PTR [rdi+0xe8],dx
  407623:	ret    
  407624:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40762f:	nop

0000000000407630 <flatcc_builder_pop_buffer_alignment@@Base>:
  407630:	cmp    si,WORD PTR [rdi+0xe8]
  407637:	jbe    407640 <flatcc_builder_pop_buffer_alignment@@Base+0x10>
  407639:	mov    WORD PTR [rdi+0xe8],si
  407640:	repz ret 
  407642:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40764d:	nop    DWORD PTR [rax]

0000000000407650 <flatcc_builder_get_buffer_alignment@@Base>:
  407650:	movzx  eax,WORD PTR [rdi+0xe8]
  407657:	ret    
  407658:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407660 <flatcc_builder_set_vtable_clustering@@Base>:
  407660:	xor    eax,eax
  407662:	test   esi,esi
  407664:	sete   al
  407667:	mov    DWORD PTR [rdi+0x124],eax
  40766d:	ret    
  40766e:	xchg   ax,ax

0000000000407670 <flatcc_builder_set_block_align@@Base>:
  407670:	mov    WORD PTR [rdi+0xec],si
  407677:	ret    
  407678:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407680 <flatcc_builder_get_level@@Base>:
  407680:	mov    eax,DWORD PTR [rdi+0x104]
  407686:	ret    
  407687:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407690 <flatcc_builder_set_max_level@@Base>:
  407690:	cmp    esi,DWORD PTR [rdi+0x108]
  407696:	mov    DWORD PTR [rdi+0x120],esi
  40769c:	jle    4076a4 <flatcc_builder_set_max_level@@Base+0x14>
  40769e:	mov    DWORD PTR [rdi+0x108],esi
  4076a4:	repz ret 
  4076a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000004076b0 <flatcc_builder_get_buffer_size@@Base>:
  4076b0:	mov    eax,DWORD PTR [rdi+0xf4]
  4076b6:	sub    eax,DWORD PTR [rdi+0xf0]
  4076bc:	cdqe   
  4076be:	ret    
  4076bf:	nop

00000000004076c0 <flatcc_builder_get_buffer_start@@Base>:
  4076c0:	mov    eax,DWORD PTR [rdi+0xf0]
  4076c6:	ret    
  4076c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004076d0 <flatcc_builder_get_buffer_end@@Base>:
  4076d0:	mov    eax,DWORD PTR [rdi+0xf4]
  4076d6:	ret    
  4076d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004076e0 <flatcc_builder_set_vtable_cache_limit@@Base>:
  4076e0:	mov    QWORD PTR [rdi+0x118],rsi
  4076e7:	ret    
  4076e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000004076f0 <flatcc_builder_set_identifier@@Base>:
  4076f0:	test   rsi,rsi
  4076f3:	je     407700 <flatcc_builder_set_identifier@@Base+0x10>
  4076f5:	mov    eax,DWORD PTR [rsi]
  4076f7:	mov    DWORD PTR [rdi+0x110],eax
  4076fd:	ret    
  4076fe:	xchg   ax,ax
  407700:	mov    rsi,0x409e80
  407707:	mov    eax,DWORD PTR [rsi]
  407709:	mov    DWORD PTR [rdi+0x110],eax
  40770f:	ret    

0000000000407710 <flatcc_builder_get_type@@Base>:
  407710:	mov    rax,QWORD PTR [rdi+0x30]
  407714:	test   rax,rax
  407717:	je     407720 <flatcc_builder_get_type@@Base+0x10>
  407719:	movzx  eax,WORD PTR [rax+0xe]
  40771d:	ret    
  40771e:	xchg   ax,ax
  407720:	xor    eax,eax
  407722:	ret    
  407723:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40772e:	xchg   ax,ax

0000000000407730 <flatcc_builder_get_type_at@@Base>:
  407730:	test   esi,esi
  407732:	jle    407760 <flatcc_builder_get_type_at@@Base+0x30>
  407734:	mov    edx,DWORD PTR [rdi+0x104]
  40773a:	xor    eax,eax
  40773c:	cmp    esi,edx
  40773e:	jg     407762 <flatcc_builder_get_type_at@@Base+0x32>
  407740:	sub    esi,edx
  407742:	mov    rdx,QWORD PTR [rdi+0x30]
  407746:	movsxd rsi,esi
  407749:	lea    rax,[rsi+rsi*8]
  40774d:	lea    rax,[rdx+rax*4]
  407751:	movzx  eax,WORD PTR [rax+0xe]
  407755:	ret    
  407756:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407760:	xor    eax,eax
  407762:	repz ret 
  407764:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40776f:	nop

0000000000407770 <flatcc_builder_get_direct_buffer@@Base>:
  407770:	mov    eax,DWORD PTR [rdi+0x128]
  407776:	test   eax,eax
  407778:	je     40778a <flatcc_builder_get_direct_buffer@@Base+0x1a>
  40777a:	mov    rax,QWORD PTR [rdi+0x138]
  407781:	cmp    QWORD PTR [rdi+0x130],rax
  407788:	je     4077a0 <flatcc_builder_get_direct_buffer@@Base+0x30>
  40778a:	test   rsi,rsi
  40778d:	jne    407792 <flatcc_builder_get_direct_buffer@@Base+0x22>
  40778f:	xor    eax,eax
  407791:	ret    
  407792:	mov    QWORD PTR [rsi],0x0
  407799:	xor    eax,eax
  40779b:	ret    
  40779c:	nop    DWORD PTR [rax+0x0]
  4077a0:	test   rsi,rsi
  4077a3:	je     4077af <flatcc_builder_get_direct_buffer@@Base+0x3f>
  4077a5:	mov    rax,QWORD PTR [rdi+0x160]
  4077ac:	mov    QWORD PTR [rsi],rax
  4077af:	mov    rax,QWORD PTR [rdi+0x140]
  4077b6:	ret    
  4077b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000004077c0 <flatcc_builder_copy_buffer@@Base>:
  4077c0:	mov    eax,DWORD PTR [rdi+0x128]
  4077c6:	test   eax,eax
  4077c8:	je     4077e8 <flatcc_builder_copy_buffer@@Base+0x28>
  4077ca:	sub    rsp,0x8
  4077ce:	add    rdi,0x130
  4077d5:	call   407fc0 <flatcc_emitter_copy_buffer@@Base>
  4077da:	test   rax,rax
  4077dd:	je     4077eb <flatcc_builder_copy_buffer@@Base+0x2b>
  4077df:	add    rsp,0x8
  4077e3:	ret    
  4077e4:	nop    DWORD PTR [rax+0x0]
  4077e8:	xor    eax,eax
  4077ea:	ret    
  4077eb:	lea    rcx,[rip+0x200e]        # 409800 <_IO_stdin_used@@Base+0x800>
  4077f2:	lea    rsi,[rip+0x1b8f]        # 409388 <_IO_stdin_used@@Base+0x388>
  4077f9:	lea    rdi,[rip+0x1fba]        # 4097ba <_IO_stdin_used@@Base+0x7ba>
  407800:	mov    edx,0x786
  407805:	call   403060 <__assert_fail@plt>
  40780a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000407810 <flatcc_builder_finalize_buffer@@Base>:
  407810:	push   r12
  407812:	push   rbp
  407813:	mov    r12,rdi
  407816:	push   rbx
  407817:	mov    rbx,rsi
  40781a:	call   4076b0 <flatcc_builder_get_buffer_size@@Base>
  40781f:	test   rbx,rbx
  407822:	mov    rbp,rax
  407825:	je     40782a <flatcc_builder_finalize_buffer@@Base+0x1a>
  407827:	mov    QWORD PTR [rbx],rax
  40782a:	mov    rdi,rbp
  40782d:	call   4030b0 <malloc@plt>
  407832:	test   rax,rax
  407835:	mov    rbx,rax
  407838:	je     407855 <flatcc_builder_finalize_buffer@@Base+0x45>
  40783a:	mov    rdx,rbp
  40783d:	mov    rsi,rax
  407840:	mov    rdi,r12
  407843:	call   4077c0 <flatcc_builder_copy_buffer@@Base>
  407848:	test   rax,rax
  40784b:	je     407874 <flatcc_builder_finalize_buffer@@Base+0x64>
  40784d:	mov    rax,rbx
  407850:	pop    rbx
  407851:	pop    rbp
  407852:	pop    r12
  407854:	ret    
  407855:	lea    rcx,[rip+0x1f84]        # 4097e0 <_IO_stdin_used@@Base+0x7e0>
  40785c:	lea    rsi,[rip+0x1b25]        # 409388 <_IO_stdin_used@@Base+0x388>
  407863:	lea    rdi,[rip+0x1eb5]        # 40971f <_IO_stdin_used@@Base+0x71f>
  40786a:	mov    edx,0x798
  40786f:	call   403060 <__assert_fail@plt>
  407874:	lea    rcx,[rip+0x1f65]        # 4097e0 <_IO_stdin_used@@Base+0x7e0>
  40787b:	lea    rsi,[rip+0x1b06]        # 409388 <_IO_stdin_used@@Base+0x388>
  407882:	lea    rdi,[rip+0x1e96]        # 40971f <_IO_stdin_used@@Base+0x71f>
  407889:	mov    edx,0x79c
  40788e:	call   403060 <__assert_fail@plt>
  407893:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
  40789e:	xchg   ax,ax

00000000004078a0 <flatcc_builder_finalize_aligned_buffer@@Base>:
  4078a0:	push   r13
  4078a2:	push   r12
  4078a4:	mov    r12,rdi
  4078a7:	push   rbp
  4078a8:	push   rbx
  4078a9:	mov    rbp,rsi
  4078ac:	sub    rsp,0x18
  4078b0:	mov    rax,QWORD PTR fs:0x28
  4078b9:	mov    QWORD PTR [rsp+0x8],rax
  4078be:	xor    eax,eax
  4078c0:	call   4076b0 <flatcc_builder_get_buffer_size@@Base>
  4078c5:	test   rbp,rbp
  4078c8:	mov    rbx,rax
  4078cb:	je     4078d1 <flatcc_builder_finalize_aligned_buffer@@Base+0x31>
  4078cd:	mov    QWORD PTR [rbp+0x0],rax
  4078d1:	mov    rdi,r12
  4078d4:	call   407650 <flatcc_builder_get_buffer_alignment@@Base>
  4078d9:	movzx  eax,ax
  4078dc:	mov    esi,0x8
  4078e1:	mov    rdi,rsp
  4078e4:	lea    rdx,[rbx+rax*1-0x1]
  4078e9:	mov    rbx,rax
  4078ec:	mov    QWORD PTR [rsp],0x0
  4078f4:	neg    rbx
  4078f7:	and    rbx,rdx
  4078fa:	cmp    rax,0x8
  4078fe:	cmovae rsi,rax
  407902:	mov    rdx,rbx
  407905:	call   4030f0 <posix_memalign@plt>
  40790a:	test   eax,eax
  40790c:	je     407950 <flatcc_builder_finalize_aligned_buffer@@Base+0xb0>
  40790e:	mov    rdi,QWORD PTR [rsp]
  407912:	test   rdi,rdi
  407915:	je     40791c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  407917:	call   403030 <free@plt>
  40791c:	test   rbp,rbp
  40791f:	je     407976 <flatcc_builder_finalize_aligned_buffer@@Base+0xd6>
  407921:	mov    QWORD PTR [rbp+0x0],0x0
  407929:	xor    r13d,r13d
  40792c:	mov    rcx,QWORD PTR [rsp+0x8]
  407931:	xor    rcx,QWORD PTR fs:0x28
  40793a:	mov    rax,r13
  40793d:	jne    407971 <flatcc_builder_finalize_aligned_buffer@@Base+0xd1>
  40793f:	add    rsp,0x18
  407943:	pop    rbx
  407944:	pop    rbp
  407945:	pop    r12
  407947:	pop    r13
  407949:	ret    
  40794a:	nop    WORD PTR [rax+rax*1+0x0]
  407950:	mov    r13,QWORD PTR [rsp]
  407954:	test   r13,r13
  407957:	je     40791c <flatcc_builder_finalize_aligned_buffer@@Base+0x7c>
  407959:	mov    rdx,rbx
  40795c:	mov    rsi,r13
  40795f:	mov    rdi,r12
  407962:	call   4077c0 <flatcc_builder_copy_buffer@@Base>
  407967:	test   rax,rax
  40796a:	jne    40792c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  40796c:	mov    rdi,r13
  40796f:	jmp    407917 <flatcc_builder_finalize_aligned_buffer@@Base+0x77>
  407971:	call   403050 <__stack_chk_fail@plt>
  407976:	xor    r13d,r13d
  407979:	jmp    40792c <flatcc_builder_finalize_aligned_buffer@@Base+0x8c>
  40797b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407980 <flatcc_builder_aligned_alloc@@Base>:
  407980:	sub    rsp,0x18
  407984:	mov    rdx,rsi
  407987:	mov    esi,0x8
  40798c:	mov    rax,QWORD PTR fs:0x28
  407995:	mov    QWORD PTR [rsp+0x8],rax
  40799a:	xor    eax,eax
  40799c:	cmp    rdi,0x8
  4079a0:	mov    QWORD PTR [rsp],0x0
  4079a8:	cmovae rsi,rdi
  4079ac:	mov    rdi,rsp
  4079af:	call   4030f0 <posix_memalign@plt>
  4079b4:	test   eax,eax
  4079b6:	mov    rax,QWORD PTR [rsp]
  4079ba:	je     4079cb <flatcc_builder_aligned_alloc@@Base+0x4b>
  4079bc:	test   rax,rax
  4079bf:	je     4079cb <flatcc_builder_aligned_alloc@@Base+0x4b>
  4079c1:	mov    rdi,rax
  4079c4:	call   403030 <free@plt>
  4079c9:	xor    eax,eax
  4079cb:	mov    rcx,QWORD PTR [rsp+0x8]
  4079d0:	xor    rcx,QWORD PTR fs:0x28
  4079d9:	jne    4079e0 <flatcc_builder_aligned_alloc@@Base+0x60>
  4079db:	add    rsp,0x18
  4079df:	ret    
  4079e0:	call   403050 <__stack_chk_fail@plt>
  4079e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000004079f0 <flatcc_builder_aligned_free@@Base>:
  4079f0:	jmp    403030 <free@plt>
  4079f5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000407a00 <flatcc_builder_get_emit_context@@Base>:
  407a00:	mov    rax,QWORD PTR [rdi+0x38]
  407a04:	ret    
  407a05:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407a0f:	nop

0000000000407a10 <flatcc_emitter_recycle_page@@Base>:
  407a10:	mov    rax,QWORD PTR [rdi]
  407a13:	cmp    rax,rsi
  407a16:	je     407a70 <flatcc_emitter_recycle_page@@Base+0x60>
  407a18:	cmp    rsi,QWORD PTR [rdi+0x8]
  407a1c:	je     407a70 <flatcc_emitter_recycle_page@@Base+0x60>
  407a1e:	mov    rdx,QWORD PTR [rsi+0xb80]
  407a25:	mov    rcx,QWORD PTR [rsi+0xb88]
  407a2c:	mov    QWORD PTR [rdx+0xb88],rcx
  407a33:	mov    rcx,QWORD PTR [rsi+0xb88]
  407a3a:	mov    QWORD PTR [rcx+0xb80],rdx
  407a41:	mov    rdx,QWORD PTR [rax+0xb88]
  407a48:	mov    QWORD PTR [rsi+0xb80],rax
  407a4f:	mov    QWORD PTR [rsi+0xb88],rdx
  407a56:	mov    QWORD PTR [rdx+0xb80],rsi
  407a5d:	mov    rax,QWORD PTR [rsi+0xb80]
  407a64:	mov    QWORD PTR [rax+0xb88],rsi
  407a6b:	xor    eax,eax
  407a6d:	ret    
  407a6e:	xchg   ax,ax
  407a70:	mov    eax,0xffffffff
  407a75:	ret    
  407a76:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000407a80 <flatcc_emitter_reset@@Base>:
  407a80:	mov    rax,QWORD PTR [rdi]
  407a83:	test   rax,rax
  407a86:	je     407b4d <flatcc_emitter_reset@@Base+0xcd>
  407a8c:	lea    rdx,[rax+0x5c0]
  407a93:	mov    QWORD PTR [rdi+0x8],rax
  407a97:	mov    QWORD PTR [rdi+0x18],0x5c0
  407a9f:	mov    QWORD PTR [rdi+0x28],0x5c0
  407aa7:	mov    rcx,QWORD PTR [rdi+0x30]
  407aab:	mov    QWORD PTR [rdi+0x10],rdx
  407aaf:	mov    QWORD PTR [rdi+0x20],rdx
  407ab3:	mov    rdx,QWORD PTR [rdi+0x40]
  407ab7:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407ac1:	test   rdx,rdx
  407ac4:	je     407b50 <flatcc_emitter_reset@@Base+0xd0>
  407aca:	lea    rdx,[rdx+rdx*2]
  407ace:	shr    rcx,0x2
  407ad2:	mov    QWORD PTR [rdi+0x30],0x0
  407ada:	shr    rdx,0x2
  407ade:	add    rdx,rcx
  407ae1:	mov    QWORD PTR [rdi+0x40],rdx
  407ae5:	add    rdx,rdx
  407ae8:	cmp    QWORD PTR [rdi+0x38],rdx
  407aec:	jbe    407b4d <flatcc_emitter_reset@@Base+0xcd>
  407aee:	push   rbx
  407aef:	mov    rbx,rdi
  407af2:	mov    rdi,QWORD PTR [rax+0xb80]
  407af9:	cmp    rax,rdi
  407afc:	jne    407b10 <flatcc_emitter_reset@@Base+0x90>
  407afe:	jmp    407b4c <flatcc_emitter_reset@@Base+0xcc>
  407b00:	mov    rax,QWORD PTR [rbx+0x8]
  407b04:	mov    rdi,QWORD PTR [rax+0xb80]
  407b0b:	cmp    rdi,QWORD PTR [rbx]
  407b0e:	je     407b4c <flatcc_emitter_reset@@Base+0xcc>
  407b10:	mov    rdx,QWORD PTR [rdi+0xb80]
  407b17:	mov    QWORD PTR [rax+0xb80],rdx
  407b1e:	mov    rdx,QWORD PTR [rdi+0xb80]
  407b25:	mov    QWORD PTR [rdx+0xb88],rax
  407b2c:	call   403030 <free@plt>
  407b31:	mov    rsi,QWORD PTR [rbx+0x40]
  407b35:	mov    rax,QWORD PTR [rbx+0x38]
  407b39:	lea    rdx,[rsi+rsi*1]
  407b3d:	sub    rax,0xb80
  407b43:	mov    QWORD PTR [rbx+0x38],rax
  407b47:	cmp    rdx,rax
  407b4a:	jb     407b00 <flatcc_emitter_reset@@Base+0x80>
  407b4c:	pop    rbx
  407b4d:	repz ret 
  407b4f:	nop
  407b50:	mov    rdx,rcx
  407b53:	jmp    407aca <flatcc_emitter_reset@@Base+0x4a>
  407b58:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000407b60 <flatcc_emitter_clear@@Base>:
  407b60:	mov    rax,QWORD PTR [rdi]
  407b63:	test   rax,rax
  407b66:	je     407be7 <flatcc_emitter_clear@@Base+0x87>
  407b68:	push   rbp
  407b69:	push   rbx
  407b6a:	mov    rbp,rdi
  407b6d:	sub    rsp,0x8
  407b71:	mov    rdx,QWORD PTR [rax+0xb88]
  407b78:	mov    QWORD PTR [rdx+0xb80],0x0
  407b83:	mov    rbx,QWORD PTR [rax+0xb80]
  407b8a:	test   rbx,rbx
  407b8d:	jne    407b9b <flatcc_emitter_clear@@Base+0x3b>
  407b8f:	jmp    407be9 <flatcc_emitter_clear@@Base+0x89>
  407b91:	nop    DWORD PTR [rax+0x0]
  407b98:	mov    rbx,rax
  407b9b:	mov    rdi,QWORD PTR [rbx+0xb88]
  407ba2:	call   403030 <free@plt>
  407ba7:	mov    rax,QWORD PTR [rbx+0xb80]
  407bae:	test   rax,rax
  407bb1:	jne    407b98 <flatcc_emitter_clear@@Base+0x38>
  407bb3:	mov    rdi,rbx
  407bb6:	call   403030 <free@plt>
  407bbb:	lea    rdi,[rbp+0x8]
  407bbf:	mov    QWORD PTR [rbp+0x0],0x0
  407bc7:	mov    QWORD PTR [rbp+0x40],0x0
  407bcf:	xor    eax,eax
  407bd1:	and    rdi,0xfffffffffffffff8
  407bd5:	sub    rbp,rdi
  407bd8:	lea    ecx,[rbp+0x48]
  407bdb:	shr    ecx,0x3
  407bde:	rep stos QWORD PTR es:[rdi],rax
  407be1:	add    rsp,0x8
  407be5:	pop    rbx
  407be6:	pop    rbp
  407be7:	repz ret 
  407be9:	mov    rbx,rax
  407bec:	jmp    407bb3 <flatcc_emitter_clear@@Base+0x53>
  407bee:	xchg   ax,ax

0000000000407bf0 <flatcc_emitter@@Base>:
  407bf0:	push   r15
  407bf2:	push   r14
  407bf4:	mov    r14,rsi
  407bf7:	push   r13
  407bf9:	push   r12
  407bfb:	push   rbp
  407bfc:	push   rbx
  407bfd:	mov    rbx,rdi
  407c00:	sub    rsp,0x18
  407c04:	add    QWORD PTR [rdi+0x30],r8
  407c08:	test   ecx,ecx
  407c0a:	js     407dfe <flatcc_emitter@@Base+0x20e>
  407c10:	mov    rax,QWORD PTR [rdi+0x28]
  407c14:	cmp    r8,rax
  407c17:	jbe    407ca4 <flatcc_emitter@@Base+0xb4>
  407c1d:	test   edx,edx
  407c1f:	je     407c93 <flatcc_emitter@@Base+0xa3>
  407c21:	lea    r15d,[rdx-0x1]
  407c25:	add    r15,0x1
  407c29:	shl    r15,0x4
  407c2d:	lea    rax,[rsi+r15*1]
  407c31:	mov    QWORD PTR [rsp+0x8],rax
  407c36:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407c40:	mov    r12,QWORD PTR [r14+0x8]
  407c44:	mov    r13,QWORD PTR [r14]
  407c47:	test   r12,r12
  407c4a:	je     407c88 <flatcc_emitter@@Base+0x98>
  407c4c:	nop    DWORD PTR [rax+0x0]
  407c50:	mov    rbp,QWORD PTR [rbx+0x28]
  407c54:	cmp    rbp,r12
  407c57:	jae    407cf8 <flatcc_emitter@@Base+0x108>
  407c5d:	test   rbp,rbp
  407c60:	je     407d08 <flatcc_emitter@@Base+0x118>
  407c66:	sub    r12,rbp
  407c69:	mov    rdi,QWORD PTR [rbx+0x20]
  407c6d:	mov    rsi,r13
  407c70:	mov    rdx,rbp
  407c73:	add    r13,rbp
  407c76:	call   4030a0 <memcpy@plt>
  407c7b:	add    QWORD PTR [rbx+0x20],rbp
  407c7f:	sub    QWORD PTR [rbx+0x28],rbp
  407c83:	test   r12,r12
  407c86:	jne    407c50 <flatcc_emitter@@Base+0x60>
  407c88:	add    r14,0x10
  407c8c:	cmp    r14,QWORD PTR [rsp+0x8]
  407c91:	jne    407c40 <flatcc_emitter@@Base+0x50>
  407c93:	add    rsp,0x18
  407c97:	xor    eax,eax
  407c99:	pop    rbx
  407c9a:	pop    rbp
  407c9b:	pop    r12
  407c9d:	pop    r13
  407c9f:	pop    r14
  407ca1:	pop    r15
  407ca3:	ret    
  407ca4:	mov    rcx,QWORD PTR [rdi+0x20]
  407ca8:	sub    rax,r8
  407cab:	mov    QWORD PTR [rdi+0x28],rax
  407caf:	lea    rsi,[rcx+r8*1]
  407cb3:	mov    QWORD PTR [rdi+0x20],rsi
  407cb7:	test   edx,edx
  407cb9:	je     407c93 <flatcc_emitter@@Base+0xa3>
  407cbb:	lea    ebx,[rdx-0x1]
  407cbe:	add    rbx,0x1
  407cc2:	shl    rbx,0x4
  407cc6:	add    rbx,r14
  407cc9:	nop    DWORD PTR [rax+0x0]
  407cd0:	mov    rsi,QWORD PTR [r14]
  407cd3:	mov    rdx,QWORD PTR [r14+0x8]
  407cd7:	mov    rdi,rcx
  407cda:	add    r14,0x10
  407cde:	call   4030a0 <memcpy@plt>
  407ce3:	mov    rcx,rax
  407ce6:	add    rcx,QWORD PTR [r14-0x8]
  407cea:	cmp    rbx,r14
  407ced:	jne    407cd0 <flatcc_emitter@@Base+0xe0>
  407cef:	jmp    407c93 <flatcc_emitter@@Base+0xa3>
  407cf1:	nop    DWORD PTR [rax+0x0]
  407cf8:	mov    rbp,r12
  407cfb:	xor    r12d,r12d
  407cfe:	jmp    407c69 <flatcc_emitter@@Base+0x79>
  407d03:	nop    DWORD PTR [rax+rax*1+0x0]
  407d08:	mov    r15,QWORD PTR [rbx+0x8]
  407d0c:	test   r15,r15
  407d0f:	je     407d90 <flatcc_emitter@@Base+0x1a0>
  407d11:	mov    rbp,QWORD PTR [r15+0xb80]
  407d18:	cmp    rbp,QWORD PTR [rbx]
  407d1b:	je     407d50 <flatcc_emitter@@Base+0x160>
  407d1d:	mov    QWORD PTR [rbx+0x8],rbp
  407d21:	mov    rax,QWORD PTR [rbp+0xb88]
  407d28:	mov    QWORD PTR [rbx+0x20],rbp
  407d2c:	mov    QWORD PTR [rbx+0x28],0xb80
  407d34:	mov    eax,DWORD PTR [rax+0xb90]
  407d3a:	add    eax,0xb80
  407d3f:	mov    DWORD PTR [rbp+0xb90],eax
  407d45:	jmp    407c50 <flatcc_emitter@@Base+0x60>
  407d4a:	nop    WORD PTR [rax+rax*1+0x0]
  407d50:	mov    edi,0xb98
  407d55:	call   4030b0 <malloc@plt>
  407d5a:	test   rax,rax
  407d5d:	je     407d9f <flatcc_emitter@@Base+0x1af>
  407d5f:	mov    QWORD PTR [rax+0xb80],rbp
  407d66:	add    QWORD PTR [rbx+0x38],0xb80
  407d6e:	mov    QWORD PTR [rax+0xb88],r15
  407d75:	mov    QWORD PTR [rbp+0xb88],rax
  407d7c:	mov    rbp,rax
  407d7f:	mov    QWORD PTR [r15+0xb80],rax
  407d86:	mov    QWORD PTR [rbx+0x8],rax
  407d8a:	jmp    407d21 <flatcc_emitter@@Base+0x131>
  407d8c:	nop    DWORD PTR [rax+0x0]
  407d90:	mov    edi,0xb98
  407d95:	call   4030b0 <malloc@plt>
  407d9a:	test   rax,rax
  407d9d:	jne    407db3 <flatcc_emitter@@Base+0x1c3>
  407d9f:	add    rsp,0x18
  407da3:	mov    eax,0xffffffff
  407da8:	pop    rbx
  407da9:	pop    rbp
  407daa:	pop    r12
  407dac:	pop    r13
  407dae:	pop    r14
  407db0:	pop    r15
  407db2:	ret    
  407db3:	lea    rdx,[rax+0x5c0]
  407dba:	add    QWORD PTR [rbx+0x38],0xb80
  407dc2:	mov    QWORD PTR [rbx],rax
  407dc5:	mov    QWORD PTR [rbx+0x8],rax
  407dc9:	mov    QWORD PTR [rax+0xb80],rax
  407dd0:	mov    QWORD PTR [rax+0xb88],rax
  407dd7:	mov    QWORD PTR [rbx+0x10],rdx
  407ddb:	mov    QWORD PTR [rbx+0x20],rdx
  407ddf:	mov    QWORD PTR [rbx+0x18],0x5c0
  407de7:	mov    QWORD PTR [rbx+0x28],0x5c0
  407def:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407df9:	jmp    407c50 <flatcc_emitter@@Base+0x60>
  407dfe:	mov    rax,QWORD PTR [rdi+0x18]
  407e02:	cmp    r8,rax
  407e05:	jbe    407e9c <flatcc_emitter@@Base+0x2ac>
  407e0b:	movsxd rax,edx
  407e0e:	shl    rax,0x4
  407e12:	add    r14,rax
  407e15:	mov    eax,edx
  407e17:	shl    rax,0x4
  407e1b:	mov    rcx,r14
  407e1e:	sub    rcx,rax
  407e21:	mov    QWORD PTR [rsp+0x8],rcx
  407e26:	nop    WORD PTR cs:[rax+rax*1+0x0]
  407e30:	cmp    r14,QWORD PTR [rsp+0x8]
  407e35:	je     407c93 <flatcc_emitter@@Base+0xa3>
  407e3b:	sub    r14,0x10
  407e3f:	mov    rbp,QWORD PTR [r14+0x8]
  407e43:	mov    r12,rbp
  407e46:	add    r12,QWORD PTR [r14]
  407e49:	test   rbp,rbp
  407e4c:	je     407e30 <flatcc_emitter@@Base+0x240>
  407e4e:	mov    rdx,QWORD PTR [rbx+0x18]
  407e52:	cmp    rdx,rbp
  407e55:	jae    407e8f <flatcc_emitter@@Base+0x29f>
  407e57:	test   rdx,rdx
  407e5a:	je     407eb8 <flatcc_emitter@@Base+0x2c8>
  407e5c:	sub    rbp,rdx
  407e5f:	xor    ecx,ecx
  407e61:	mov    rax,rdx
  407e64:	mov    QWORD PTR [rbx+0x18],rcx
  407e68:	neg    rax
  407e6b:	mov    rdi,rax
  407e6e:	add    rdi,QWORD PTR [rbx+0x10]
  407e72:	add    r12,rax
  407e75:	mov    rsi,r12
  407e78:	mov    QWORD PTR [rbx+0x10],rdi
  407e7c:	call   4030a0 <memcpy@plt>
  407e81:	test   rbp,rbp
  407e84:	je     407e30 <flatcc_emitter@@Base+0x240>
  407e86:	mov    rdx,QWORD PTR [rbx+0x18]
  407e8a:	cmp    rdx,rbp
  407e8d:	jb     407e57 <flatcc_emitter@@Base+0x267>
  407e8f:	mov    rcx,rdx
  407e92:	mov    rdx,rbp
  407e95:	sub    rcx,rbp
  407e98:	xor    ebp,ebp
  407e9a:	jmp    407e61 <flatcc_emitter@@Base+0x271>
  407e9c:	mov    rcx,QWORD PTR [rdi+0x10]
  407ea0:	sub    rax,r8
  407ea3:	mov    QWORD PTR [rdi+0x18],rax
  407ea7:	sub    rcx,r8
  407eaa:	mov    QWORD PTR [rdi+0x10],rcx
  407eae:	jmp    407cb7 <flatcc_emitter@@Base+0xc7>
  407eb3:	nop    DWORD PTR [rax+rax*1+0x0]
  407eb8:	mov    r13,QWORD PTR [rbx]
  407ebb:	test   r13,r13
  407ebe:	je     407f5f <flatcc_emitter@@Base+0x36f>
  407ec4:	mov    r15,QWORD PTR [r13+0xb88]
  407ecb:	cmp    r15,QWORD PTR [rbx+0x8]
  407ecf:	je     407f20 <flatcc_emitter@@Base+0x330>
  407ed1:	mov    eax,DWORD PTR [r13+0xb90]
  407ed8:	sub    eax,0xb80
  407edd:	mov    DWORD PTR [r15+0xb90],eax
  407ee4:	mov    QWORD PTR [rbx],r15
  407ee7:	lea    rax,[r15+0xb80]
  407eee:	mov    QWORD PTR [rbx+0x18],0xb80
  407ef6:	mov    QWORD PTR [rbx+0x10],rax
  407efa:	mov    rax,QWORD PTR [r15+0xb80]
  407f01:	mov    eax,DWORD PTR [rax+0xb90]
  407f07:	sub    eax,0xb80
  407f0c:	mov    DWORD PTR [r15+0xb90],eax
  407f13:	jmp    407e4e <flatcc_emitter@@Base+0x25e>
  407f18:	nop    DWORD PTR [rax+rax*1+0x0]
  407f20:	mov    edi,0xb98
  407f25:	call   4030b0 <malloc@plt>
  407f2a:	test   rax,rax
  407f2d:	je     407d9f <flatcc_emitter@@Base+0x1af>
  407f33:	mov    QWORD PTR [rax+0xb88],r15
  407f3a:	add    QWORD PTR [rbx+0x38],0xb80
  407f42:	mov    QWORD PTR [rax+0xb80],r13
  407f49:	mov    QWORD PTR [r13+0xb88],rax
  407f50:	mov    QWORD PTR [r15+0xb80],rax
  407f57:	mov    QWORD PTR [rbx],rax
  407f5a:	mov    r15,rax
  407f5d:	jmp    407ee7 <flatcc_emitter@@Base+0x2f7>
  407f5f:	mov    edi,0xb98
  407f64:	call   4030b0 <malloc@plt>
  407f69:	test   rax,rax
  407f6c:	je     407d9f <flatcc_emitter@@Base+0x1af>
  407f72:	lea    rdx,[rax+0x5c0]
  407f79:	add    QWORD PTR [rbx+0x38],0xb80
  407f81:	mov    QWORD PTR [rbx],rax
  407f84:	mov    QWORD PTR [rbx+0x8],rax
  407f88:	mov    QWORD PTR [rax+0xb80],rax
  407f8f:	mov    QWORD PTR [rax+0xb88],rax
  407f96:	mov    QWORD PTR [rbx+0x10],rdx
  407f9a:	mov    QWORD PTR [rbx+0x20],rdx
  407f9e:	mov    QWORD PTR [rbx+0x18],0x5c0
  407fa6:	mov    QWORD PTR [rbx+0x28],0x5c0
  407fae:	mov    DWORD PTR [rax+0xb90],0xfffffa40
  407fb8:	jmp    407e4e <flatcc_emitter@@Base+0x25e>
  407fbd:	nop    DWORD PTR [rax]

0000000000407fc0 <flatcc_emitter_copy_buffer@@Base>:
  407fc0:	push   rbp
  407fc1:	push   rbx
  407fc2:	sub    rsp,0x8
  407fc6:	mov    r9,QWORD PTR [rdi+0x30]
  407fca:	cmp    r9,rdx
  407fcd:	ja     408090 <flatcc_emitter_copy_buffer@@Base+0xd0>
  407fd3:	mov    rax,QWORD PTR [rdi]
  407fd6:	test   rax,rax
  407fd9:	je     408090 <flatcc_emitter_copy_buffer@@Base+0xd0>
  407fdf:	cmp    rax,QWORD PTR [rdi+0x8]
  407fe3:	mov    rcx,rsi
  407fe6:	mov    rbx,rdi
  407fe9:	je     4080a0 <flatcc_emitter_copy_buffer@@Base+0xe0>
  407fef:	mov    r8d,0xb80
  407ff5:	sub    r8,QWORD PTR [rdi+0x18]
  407ff9:	mov    rsi,QWORD PTR [rdi+0x10]
  407ffd:	mov    rdi,rcx
  408000:	mov    rbp,r8
  408003:	mov    rdx,r8
  408006:	call   4030a0 <memcpy@plt>
  40800b:	add    rbp,rax
  40800e:	mov    rax,QWORD PTR [rbx]
  408011:	mov    rsi,QWORD PTR [rbx+0x8]
  408015:	mov    rax,QWORD PTR [rax+0xb80]
  40801c:	cmp    rax,rsi
  40801f:	je     408074 <flatcc_emitter_copy_buffer@@Base+0xb4>
  408021:	nop    DWORD PTR [rax+0x0]
  408028:	mov    rdx,QWORD PTR [rax]
  40802b:	lea    rdi,[rbp+0x8]
  40802f:	mov    rcx,rbp
  408032:	mov    rsi,rax
  408035:	add    rbp,0xb80
  40803c:	and    rdi,0xfffffffffffffff8
  408040:	mov    QWORD PTR [rbp-0xb80],rdx
  408047:	mov    rdx,QWORD PTR [rax+0xb78]
  40804e:	sub    rcx,rdi
  408051:	sub    rsi,rcx
  408054:	add    ecx,0xb80
  40805a:	shr    ecx,0x3
  40805d:	mov    QWORD PTR [rbp-0x8],rdx
  408061:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
  408064:	mov    rax,QWORD PTR [rax+0xb80]
  40806b:	mov    rsi,QWORD PTR [rbx+0x8]
  40806f:	cmp    rsi,rax
  408072:	jne    408028 <flatcc_emitter_copy_buffer@@Base+0x68>
  408074:	mov    edx,0xb80
  408079:	sub    rdx,QWORD PTR [rbx+0x28]
  40807d:	mov    rdi,rbp
  408080:	call   4030a0 <memcpy@plt>
  408085:	add    rsp,0x8
  408089:	mov    rax,rbp
  40808c:	pop    rbx
  40808d:	pop    rbp
  40808e:	ret    
  40808f:	nop
  408090:	xor    ebp,ebp
  408092:	add    rsp,0x8
  408096:	mov    rax,rbp
  408099:	pop    rbx
  40809a:	pop    rbp
  40809b:	ret    
  40809c:	nop    DWORD PTR [rax+0x0]
  4080a0:	mov    rsi,QWORD PTR [rdi+0x10]
  4080a4:	mov    rdx,r9
  4080a7:	mov    rdi,rcx
  4080aa:	call   4030a0 <memcpy@plt>
  4080af:	mov    rbp,rax
  4080b2:	jmp    408085 <flatcc_emitter_copy_buffer@@Base+0xc5>
  4080b4:	nop    WORD PTR cs:[rax+rax*1+0x0]
  4080be:	xchg   ax,ax

00000000004080c0 <__libc_csu_init@@Base>:
  4080c0:	endbr64 
  4080c4:	push   r15
  4080c6:	lea    r15,[rip+0x4d33]        # 40ce00 <flatcc_builder_padding_base@@Base+0x2f80>
  4080cd:	push   r14
  4080cf:	mov    r14,rdx
  4080d2:	push   r13
  4080d4:	mov    r13,rsi
  4080d7:	push   r12
  4080d9:	mov    r12d,edi
  4080dc:	push   rbp
  4080dd:	lea    rbp,[rip+0x4d24]        # 40ce08 <flatcc_builder_padding_base@@Base+0x2f88>
  4080e4:	push   rbx
  4080e5:	sub    rbp,r15
  4080e8:	sub    rsp,0x8
  4080ec:	call   403000 <free@plt-0x30>
  4080f1:	sar    rbp,0x3
  4080f5:	je     408116 <__libc_csu_init@@Base+0x56>
  4080f7:	xor    ebx,ebx
  4080f9:	nop    DWORD PTR [rax+0x0]
  408100:	mov    rdx,r14
  408103:	mov    rsi,r13
  408106:	mov    edi,r12d
  408109:	call   QWORD PTR [r15+rbx*8]
  40810d:	add    rbx,0x1
  408111:	cmp    rbp,rbx
  408114:	jne    408100 <__libc_csu_init@@Base+0x40>
  408116:	add    rsp,0x8
  40811a:	pop    rbx
  40811b:	pop    rbp
  40811c:	pop    r12
  40811e:	pop    r13
  408120:	pop    r14
  408122:	pop    r15
  408124:	ret    
  408125:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000408130 <__libc_csu_fini@@Base>:
  408130:	endbr64 
  408134:	ret    

Disassembly of section .fini:

0000000000408138 <.fini>:
  408138:	endbr64 
  40813c:	sub    rsp,0x8
  408140:	add    rsp,0x8
  408144:	ret    
