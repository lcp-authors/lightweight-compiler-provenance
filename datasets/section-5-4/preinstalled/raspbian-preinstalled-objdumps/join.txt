
raspbian-preinstalled/join:     file format elf32-littlearm


Disassembly of section .init:

00010e48 <.init>:
   10e48:	push	{r3, lr}
   10e4c:	bl	11e5c <__assert_fail@plt+0xd48>
   10e50:	pop	{r3, pc}

Disassembly of section .plt:

00010e54 <fdopen@plt-0x14>:
   10e54:	push	{lr}		; (str lr, [sp, #-4]!)
   10e58:	ldr	lr, [pc, #4]	; 10e64 <fdopen@plt-0x4>
   10e5c:	add	lr, pc, lr
   10e60:	ldr	pc, [lr, #8]!
   10e64:	muleq	r1, ip, r1

00010e68 <fdopen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #412]!	; 0x19c

00010e74 <calloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #404]!	; 0x194

00010e80 <fputs_unlocked@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #396]!	; 0x18c

00010e8c <raise@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #388]!	; 0x184

00010e98 <strcmp@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #380]!	; 0x17c

00010ea4 <posix_fadvise64@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #372]!	; 0x174

00010eb0 <fflush@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #364]!	; 0x16c

00010ebc <free@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #356]!	; 0x164

00010ec8 <_exit@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #348]!	; 0x15c

00010ed4 <memcpy@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #340]!	; 0x154

00010ee0 <mbsinit@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #332]!	; 0x14c

00010eec <fwrite_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #324]!	; 0x144

00010ef8 <memcmp@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #316]!	; 0x13c

00010f04 <dcgettext@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #308]!	; 0x134

00010f10 <__stack_chk_fail@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #300]!	; 0x12c

00010f1c <realloc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #292]!	; 0x124

00010f28 <textdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #284]!	; 0x11c

00010f34 <iswprint@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #276]!	; 0x114

00010f40 <fwrite@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #268]!	; 0x10c

00010f4c <lseek64@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #260]!	; 0x104

00010f58 <__ctype_get_mb_cur_max@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #252]!	; 0xfc

00010f64 <__fpending@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #24, 20	; 0x18000
   10f6c:	ldr	pc, [ip, #244]!	; 0xf4

00010f70 <mbrtowc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #24, 20	; 0x18000
   10f78:	ldr	pc, [ip, #236]!	; 0xec

00010f7c <error@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #24, 20	; 0x18000
   10f84:	ldr	pc, [ip, #228]!	; 0xe4

00010f88 <strcoll@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #24, 20	; 0x18000
   10f90:	ldr	pc, [ip, #220]!	; 0xdc

00010f94 <malloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #24, 20	; 0x18000
   10f9c:	ldr	pc, [ip, #212]!	; 0xd4

00010fa0 <__libc_start_main@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #24, 20	; 0x18000
   10fa8:	ldr	pc, [ip, #204]!	; 0xcc

00010fac <__freading@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #24, 20	; 0x18000
   10fb4:	ldr	pc, [ip, #196]!	; 0xc4

00010fb8 <__ctype_toupper_loc@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #24, 20	; 0x18000
   10fc0:	ldr	pc, [ip, #188]!	; 0xbc

00010fc4 <__gmon_start__@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #24, 20	; 0x18000
   10fcc:	ldr	pc, [ip, #180]!	; 0xb4

00010fd0 <getopt_long@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #24, 20	; 0x18000
   10fd8:	ldr	pc, [ip, #172]!	; 0xac

00010fdc <__ctype_b_loc@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #24, 20	; 0x18000
   10fe4:	ldr	pc, [ip, #164]!	; 0xa4

00010fe8 <exit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #24, 20	; 0x18000
   10ff0:	ldr	pc, [ip, #156]!	; 0x9c

00010ff4 <strtoul@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #24, 20	; 0x18000
   10ffc:	ldr	pc, [ip, #148]!	; 0x94

00011000 <strlen@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #24, 20	; 0x18000
   11008:	ldr	pc, [ip, #140]!	; 0x8c

0001100c <strchr@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #24, 20	; 0x18000
   11014:	ldr	pc, [ip, #132]!	; 0x84

00011018 <__errno_location@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #24, 20	; 0x18000
   11020:	ldr	pc, [ip, #124]!	; 0x7c

00011024 <__cxa_atexit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #24, 20	; 0x18000
   1102c:	ldr	pc, [ip, #116]!	; 0x74

00011030 <memset@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #24, 20	; 0x18000
   11038:	ldr	pc, [ip, #108]!	; 0x6c

0001103c <__printf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #24, 20	; 0x18000
   11044:	ldr	pc, [ip, #100]!	; 0x64

00011048 <fileno@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #24, 20	; 0x18000
   11050:	ldr	pc, [ip, #92]!	; 0x5c

00011054 <__fprintf_chk@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #24, 20	; 0x18000
   1105c:	ldr	pc, [ip, #84]!	; 0x54

00011060 <memchr@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #24, 20	; 0x18000
   11068:	ldr	pc, [ip, #76]!	; 0x4c

0001106c <fclose@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #24, 20	; 0x18000
   11074:	ldr	pc, [ip, #68]!	; 0x44

00011078 <fseeko64@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #24, 20	; 0x18000
   11080:	ldr	pc, [ip, #60]!	; 0x3c

00011084 <fcntl64@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #24, 20	; 0x18000
   1108c:	ldr	pc, [ip, #52]!	; 0x34

00011090 <__uflow@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #24, 20	; 0x18000
   11098:	ldr	pc, [ip, #44]!	; 0x2c

0001109c <__overflow@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #24, 20	; 0x18000
   110a4:	ldr	pc, [ip, #36]!	; 0x24

000110a8 <setlocale@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #24, 20	; 0x18000
   110b0:	ldr	pc, [ip, #28]!

000110b4 <strrchr@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #24, 20	; 0x18000
   110bc:	ldr	pc, [ip, #20]!

000110c0 <nl_langinfo@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #24, 20	; 0x18000
   110c8:	ldr	pc, [ip, #12]!

000110cc <fopen64@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #24, 20	; 0x18000
   110d4:	ldr	pc, [ip, #4]!

000110d8 <strpbrk@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #94208	; 0x17000
   110e0:	ldr	pc, [ip, #4092]!	; 0xffc

000110e4 <bindtextdomain@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #94208	; 0x17000
   110ec:	ldr	pc, [ip, #4084]!	; 0xff4

000110f0 <strncmp@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #94208	; 0x17000
   110f8:	ldr	pc, [ip, #4076]!	; 0xfec

000110fc <abort@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #94208	; 0x17000
   11104:	ldr	pc, [ip, #4068]!	; 0xfe4

00011108 <close@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #94208	; 0x17000
   11110:	ldr	pc, [ip, #4060]!	; 0xfdc

00011114 <__assert_fail@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #94208	; 0x17000
   1111c:	ldr	pc, [ip, #4052]!	; 0xfd4

Disassembly of section .text:

00011120 <.text>:
   11120:	ldr	r3, [pc, #3184]	; 11d98 <__assert_fail@plt+0xc84>
   11124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11128:	sub	sp, sp, #84	; 0x54
   1112c:	ldr	r3, [r3]
   11130:	mov	r5, #0
   11134:	mov	r7, r0
   11138:	ldr	r0, [r1]
   1113c:	str	r3, [sp, #76]	; 0x4c
   11140:	mov	r6, r1
   11144:	str	r5, [sp, #24]
   11148:	str	r5, [sp, #68]	; 0x44
   1114c:	str	r5, [sp, #72]	; 0x48
   11150:	str	r5, [sp, #28]
   11154:	bl	13340 <__assert_fail@plt+0x222c>
   11158:	ldr	r1, [pc, #3132]	; 11d9c <__assert_fail@plt+0xc88>
   1115c:	mov	r0, #6
   11160:	bl	110a8 <setlocale@plt>
   11164:	ldr	r1, [pc, #3124]	; 11da0 <__assert_fail@plt+0xc8c>
   11168:	ldr	r0, [pc, #3124]	; 11da4 <__assert_fail@plt+0xc90>
   1116c:	bl	110e4 <bindtextdomain@plt>
   11170:	ldr	r0, [pc, #3116]	; 11da4 <__assert_fail@plt+0xc90>
   11174:	bl	10f28 <textdomain@plt>
   11178:	mov	r0, #3
   1117c:	bl	13188 <__assert_fail@plt+0x2074>
   11180:	ldr	r4, [pc, #3104]	; 11da8 <__assert_fail@plt+0xc94>
   11184:	ldr	fp, [pc, #3104]	; 11dac <__assert_fail@plt+0xc98>
   11188:	ldr	r9, [pc, #3104]	; 11db0 <__assert_fail@plt+0xc9c>
   1118c:	ldr	r8, [pc, #3104]	; 11db4 <__assert_fail@plt+0xca0>
   11190:	ldr	sl, [pc, #3104]	; 11db8 <__assert_fail@plt+0xca4>
   11194:	strb	r0, [r4, #9]
   11198:	ldr	r0, [pc, #3100]	; 11dbc <__assert_fail@plt+0xca8>
   1119c:	bl	16d7c <__assert_fail@plt+0x5c68>
   111a0:	ldr	r0, [pc, #3096]	; 11dc0 <__assert_fail@plt+0xcac>
   111a4:	bl	16d7c <__assert_fail@plt+0x5c68>
   111a8:	mov	r3, #1
   111ac:	strb	r5, [r4, #92]	; 0x5c
   111b0:	strh	r5, [r4, #96]	; 0x60
   111b4:	str	r5, [r4, #88]	; 0x58
   111b8:	strb	r3, [r4, #108]	; 0x6c
   111bc:	b	111cc <__assert_fail@plt+0xb8>
   111c0:	mov	r3, #2
   111c4:	str	r3, [r4, #88]	; 0x58
   111c8:	str	r5, [sp, #24]
   111cc:	mov	r5, #0
   111d0:	str	r5, [sp]
   111d4:	mov	r3, r9
   111d8:	mov	r2, r8
   111dc:	mov	r1, r6
   111e0:	mov	r0, r7
   111e4:	bl	10fd0 <getopt_long@plt>
   111e8:	cmn	r0, #1
   111ec:	beq	114cc <__assert_fail@plt+0x3b8>
   111f0:	cmp	r0, #105	; 0x69
   111f4:	str	r5, [sp, #20]
   111f8:	beq	11488 <__assert_fail@plt+0x374>
   111fc:	ble	11290 <__assert_fail@plt+0x17c>
   11200:	cmp	r0, #118	; 0x76
   11204:	beq	113cc <__assert_fail@plt+0x2b8>
   11208:	ble	1124c <__assert_fail@plt+0x138>
   1120c:	cmp	r0, #256	; 0x100
   11210:	beq	11418 <__assert_fail@plt+0x304>
   11214:	ble	1123c <__assert_fail@plt+0x128>
   11218:	ldr	r3, [pc, #2980]	; 11dc4 <__assert_fail@plt+0xcb0>
   1121c:	cmp	r0, r3
   11220:	beq	111c0 <__assert_fail@plt+0xac>
   11224:	add	r3, r3, #1
   11228:	cmp	r0, r3
   1122c:	bne	112e8 <__assert_fail@plt+0x1d4>
   11230:	mov	r3, #1
   11234:	strb	r3, [r4, #111]	; 0x6f
   11238:	b	111c8 <__assert_fail@plt+0xb4>
   1123c:	cmp	r0, #122	; 0x7a
   11240:	bne	112e8 <__assert_fail@plt+0x1d4>
   11244:	strb	r5, [fp, #16]
   11248:	b	111c8 <__assert_fail@plt+0xb4>
   1124c:	cmp	r0, #111	; 0x6f
   11250:	beq	11424 <__assert_fail@plt+0x310>
   11254:	cmp	r0, #116	; 0x74
   11258:	bne	1132c <__assert_fail@plt+0x218>
   1125c:	ldr	r0, [sl]
   11260:	ldrb	r3, [r0]
   11264:	cmp	r3, #0
   11268:	bne	11494 <__assert_fail@plt+0x380>
   1126c:	mov	r3, #10
   11270:	ldr	r2, [fp, #4]
   11274:	cmp	r2, #0
   11278:	blt	11284 <__assert_fail@plt+0x170>
   1127c:	cmp	r2, r3
   11280:	bne	11d00 <__assert_fail@plt+0xbec>
   11284:	str	r3, [fp, #4]
   11288:	mov	r5, #0
   1128c:	b	111c8 <__assert_fail@plt+0xb4>
   11290:	cmp	r0, #49	; 0x31
   11294:	beq	1146c <__assert_fail@plt+0x358>
   11298:	ble	112f0 <__assert_fail@plt+0x1dc>
   1129c:	cmp	r0, #97	; 0x61
   112a0:	beq	113d0 <__assert_fail@plt+0x2bc>
   112a4:	cmp	r0, #101	; 0x65
   112a8:	bne	112e0 <__assert_fail@plt+0x1cc>
   112ac:	ldr	r0, [r4, #12]
   112b0:	ldr	r3, [sl]
   112b4:	cmp	r0, #0
   112b8:	beq	112d4 <__assert_fail@plt+0x1c0>
   112bc:	mov	r1, r3
   112c0:	str	r3, [sp, #8]
   112c4:	bl	10e98 <strcmp@plt>
   112c8:	ldr	r3, [sp, #8]
   112cc:	cmp	r0, #0
   112d0:	bne	11d4c <__assert_fail@plt+0xc38>
   112d4:	str	r3, [r4, #12]
   112d8:	mov	r5, #0
   112dc:	b	111c8 <__assert_fail@plt+0xb4>
   112e0:	cmp	r0, #50	; 0x32
   112e4:	beq	11450 <__assert_fail@plt+0x33c>
   112e8:	mov	r0, #1
   112ec:	bl	12b00 <__assert_fail@plt+0x19ec>
   112f0:	cmn	r0, #2
   112f4:	beq	11c64 <__assert_fail@plt+0xb50>
   112f8:	cmp	r0, #1
   112fc:	bne	11394 <__assert_fail@plt+0x280>
   11300:	add	r2, sp, #20
   11304:	add	r3, sp, #24
   11308:	str	r2, [sp, #4]
   1130c:	str	r3, [sp]
   11310:	add	r2, sp, #68	; 0x44
   11314:	add	r3, sp, #28
   11318:	add	r1, sp, #60	; 0x3c
   1131c:	ldr	r0, [sl]
   11320:	bl	12e88 <__assert_fail@plt+0x1d74>
   11324:	ldr	r5, [sp, #20]
   11328:	b	111c8 <__assert_fail@plt+0xb4>
   1132c:	cmp	r0, #106	; 0x6a
   11330:	bne	112e8 <__assert_fail@plt+0x1d4>
   11334:	ldr	r0, [sl]
   11338:	ldrb	r3, [r0]
   1133c:	sub	r2, r3, #49	; 0x31
   11340:	cmp	r2, #1
   11344:	bhi	11370 <__assert_fail@plt+0x25c>
   11348:	ldrb	r2, [r0, #1]
   1134c:	cmp	r2, #0
   11350:	bne	11370 <__assert_fail@plt+0x25c>
   11354:	ldr	r2, [pc, #2668]	; 11dc8 <__assert_fail@plt+0xcb4>
   11358:	ldr	r2, [r2]
   1135c:	sub	r2, r2, #-1073741823	; 0xc0000001
   11360:	ldr	r2, [r6, r2, lsl #2]
   11364:	add	r2, r2, #2
   11368:	cmp	r0, r2
   1136c:	beq	119fc <__assert_fail@plt+0x8e8>
   11370:	bl	11f68 <__assert_fail@plt+0xe54>
   11374:	mov	r1, r0
   11378:	ldr	r0, [pc, #2636]	; 11dcc <__assert_fail@plt+0xcb8>
   1137c:	bl	11f10 <__assert_fail@plt+0xdfc>
   11380:	ldr	r1, [fp, #12]
   11384:	ldr	r0, [pc, #2628]	; 11dd0 <__assert_fail@plt+0xcbc>
   11388:	bl	11f10 <__assert_fail@plt+0xdfc>
   1138c:	ldr	r5, [sp, #20]
   11390:	b	111c8 <__assert_fail@plt+0xb4>
   11394:	cmn	r0, #3
   11398:	bne	112e8 <__assert_fail@plt+0x1d4>
   1139c:	ldr	r1, [pc, #2608]	; 11dd4 <__assert_fail@plt+0xcc0>
   113a0:	ldr	r3, [pc, #2608]	; 11dd8 <__assert_fail@plt+0xcc4>
   113a4:	ldr	r2, [pc, #2608]	; 11ddc <__assert_fail@plt+0xcc8>
   113a8:	str	r5, [sp, #4]
   113ac:	ldr	r0, [r1]
   113b0:	ldr	r3, [r3]
   113b4:	ldr	r1, [pc, #2596]	; 11de0 <__assert_fail@plt+0xccc>
   113b8:	str	r2, [sp]
   113bc:	ldr	r2, [pc, #2592]	; 11de4 <__assert_fail@plt+0xcd0>
   113c0:	bl	15a1c <__assert_fail@plt+0x4908>
   113c4:	mov	r0, r5
   113c8:	bl	10fe8 <exit@plt>
   113cc:	strb	r5, [r4, #108]	; 0x6c
   113d0:	ldr	r3, [pc, #2500]	; 11d9c <__assert_fail@plt+0xc88>
   113d4:	mov	r2, #10
   113d8:	str	r3, [sp]
   113dc:	mov	r1, #0
   113e0:	add	r3, sp, #48	; 0x30
   113e4:	ldr	r0, [sl]
   113e8:	bl	15f30 <__assert_fail@plt+0x4e1c>
   113ec:	cmp	r0, #0
   113f0:	bne	11c6c <__assert_fail@plt+0xb58>
   113f4:	ldr	r3, [sp, #48]	; 0x30
   113f8:	sub	r2, r3, #1
   113fc:	cmp	r2, #1
   11400:	bhi	11c6c <__assert_fail@plt+0xb58>
   11404:	cmp	r3, #1
   11408:	movne	r3, #1
   1140c:	strbeq	r3, [r4, #109]	; 0x6d
   11410:	strbne	r3, [r4, #110]	; 0x6e
   11414:	b	1138c <__assert_fail@plt+0x278>
   11418:	mov	r3, #1
   1141c:	str	r3, [r4, #88]	; 0x58
   11420:	b	111c8 <__assert_fail@plt+0xb4>
   11424:	ldr	r3, [sl]
   11428:	ldr	r1, [pc, #2488]	; 11de8 <__assert_fail@plt+0xcd4>
   1142c:	mov	r0, r3
   11430:	str	r3, [sp, #8]
   11434:	bl	10e98 <strcmp@plt>
   11438:	ldr	r3, [sp, #8]
   1143c:	subs	r5, r0, #0
   11440:	bne	114b8 <__assert_fail@plt+0x3a4>
   11444:	mov	r3, #1
   11448:	strb	r3, [r4, #16]
   1144c:	b	111c8 <__assert_fail@plt+0xb4>
   11450:	ldr	r0, [sl]
   11454:	bl	11f68 <__assert_fail@plt+0xe54>
   11458:	mov	r1, r0
   1145c:	ldr	r0, [pc, #2412]	; 11dd0 <__assert_fail@plt+0xcbc>
   11460:	bl	11f10 <__assert_fail@plt+0xdfc>
   11464:	ldr	r5, [sp, #20]
   11468:	b	111c8 <__assert_fail@plt+0xb4>
   1146c:	ldr	r0, [sl]
   11470:	bl	11f68 <__assert_fail@plt+0xe54>
   11474:	mov	r1, r0
   11478:	ldr	r0, [pc, #2380]	; 11dcc <__assert_fail@plt+0xcb8>
   1147c:	bl	11f10 <__assert_fail@plt+0xdfc>
   11480:	ldr	r5, [sp, #20]
   11484:	b	111c8 <__assert_fail@plt+0xb4>
   11488:	mov	r3, #1
   1148c:	strb	r3, [r4, #8]
   11490:	b	111c8 <__assert_fail@plt+0xb4>
   11494:	ldrb	r2, [r0, #1]
   11498:	cmp	r2, #0
   1149c:	beq	11270 <__assert_fail@plt+0x15c>
   114a0:	ldr	r1, [pc, #2372]	; 11dec <__assert_fail@plt+0xcd8>
   114a4:	bl	10e98 <strcmp@plt>
   114a8:	cmp	r0, #0
   114ac:	bne	11ca0 <__assert_fail@plt+0xb8c>
   114b0:	mov	r3, #0
   114b4:	b	11270 <__assert_fail@plt+0x15c>
   114b8:	mov	r0, r3
   114bc:	mov	r5, #3
   114c0:	bl	12018 <__assert_fail@plt+0xf04>
   114c4:	str	r5, [sp, #20]
   114c8:	b	111c8 <__assert_fail@plt+0xb4>
   114cc:	ldr	r8, [pc, #2292]	; 11dc8 <__assert_fail@plt+0xcb4>
   114d0:	str	r5, [sp, #24]
   114d4:	ldr	r3, [r8]
   114d8:	cmp	r7, r3
   114dc:	ble	11514 <__assert_fail@plt+0x400>
   114e0:	add	r9, sp, #20
   114e4:	add	r5, sp, #24
   114e8:	add	ip, r3, #1
   114ec:	stm	sp, {r5, r9}
   114f0:	add	r2, sp, #68	; 0x44
   114f4:	ldr	r0, [r6, r3, lsl #2]
   114f8:	add	r1, sp, #60	; 0x3c
   114fc:	add	r3, sp, #28
   11500:	str	ip, [r8]
   11504:	bl	12e88 <__assert_fail@plt+0x1d74>
   11508:	ldr	r3, [r8]
   1150c:	cmp	r3, r7
   11510:	blt	114e8 <__assert_fail@plt+0x3d4>
   11514:	ldr	r5, [sp, #28]
   11518:	cmp	r5, #2
   1151c:	bne	11d20 <__assert_fail@plt+0xc0c>
   11520:	ldr	r3, [sp, #68]	; 0x44
   11524:	cmp	r3, #0
   11528:	bne	119b8 <__assert_fail@plt+0x8a4>
   1152c:	ldr	r3, [sp, #72]	; 0x48
   11530:	cmp	r3, #0
   11534:	bne	1199c <__assert_fail@plt+0x888>
   11538:	ldr	r5, [pc, #2156]	; 11dac <__assert_fail@plt+0xc98>
   1153c:	ldr	r3, [r5, #12]
   11540:	cmn	r3, #1
   11544:	beq	11990 <__assert_fail@plt+0x87c>
   11548:	ldr	r3, [r5, #8]
   1154c:	ldr	r6, [r4, #100]	; 0x64
   11550:	cmn	r3, #1
   11554:	moveq	r3, #0
   11558:	ldr	r1, [pc, #2192]	; 11df0 <__assert_fail@plt+0xcdc>
   1155c:	mov	r0, r6
   11560:	streq	r3, [r5, #8]
   11564:	bl	10e98 <strcmp@plt>
   11568:	cmp	r0, #0
   1156c:	ldreq	r3, [pc, #2176]	; 11df4 <__assert_fail@plt+0xce0>
   11570:	ldreq	r8, [r3]
   11574:	bne	119e8 <__assert_fail@plt+0x8d4>
   11578:	cmp	r8, #0
   1157c:	beq	11d58 <__assert_fail@plt+0xc44>
   11580:	ldr	r6, [r4, #104]	; 0x68
   11584:	ldr	r1, [pc, #2148]	; 11df0 <__assert_fail@plt+0xcdc>
   11588:	mov	r0, r6
   1158c:	bl	10e98 <strcmp@plt>
   11590:	cmp	r0, #0
   11594:	ldreq	r3, [pc, #2136]	; 11df4 <__assert_fail@plt+0xce0>
   11598:	ldreq	r7, [r3]
   1159c:	bne	119d4 <__assert_fail@plt+0x8c0>
   115a0:	cmp	r7, #0
   115a4:	beq	11cac <__assert_fail@plt+0xb98>
   115a8:	cmp	r8, r7
   115ac:	beq	11cd8 <__assert_fail@plt+0xbc4>
   115b0:	mov	r1, #2
   115b4:	mov	r0, r8
   115b8:	bl	130bc <__assert_fail@plt+0x1fa8>
   115bc:	mov	r1, #2
   115c0:	mov	r0, r7
   115c4:	bl	130bc <__assert_fail@plt+0x1fa8>
   115c8:	mov	r6, #0
   115cc:	add	r1, sp, #36	; 0x24
   115d0:	mov	r2, #1
   115d4:	mov	r0, r8
   115d8:	str	r6, [sp, #36]	; 0x24
   115dc:	str	r6, [sp, #40]	; 0x28
   115e0:	str	r6, [sp, #44]	; 0x2c
   115e4:	bl	12a1c <__assert_fail@plt+0x1908>
   115e8:	add	r1, sp, #48	; 0x30
   115ec:	mov	r2, #2
   115f0:	mov	r0, r7
   115f4:	str	r6, [sp, #48]	; 0x30
   115f8:	str	r6, [sp, #52]	; 0x34
   115fc:	str	r6, [sp, #56]	; 0x38
   11600:	bl	12a1c <__assert_fail@plt+0x1908>
   11604:	ldrb	r3, [r4, #16]
   11608:	cmp	r3, r6
   1160c:	ldr	r3, [sp, #36]	; 0x24
   11610:	beq	11644 <__assert_fail@plt+0x530>
   11614:	cmp	r3, #0
   11618:	mov	r1, r3
   1161c:	ldrne	r2, [sp, #44]	; 0x2c
   11620:	ldrne	r2, [r2]
   11624:	ldrne	r1, [r2, #12]
   11628:	ldr	r2, [sp, #48]	; 0x30
   1162c:	str	r1, [r4, #56]	; 0x38
   11630:	cmp	r2, #0
   11634:	ldrne	r2, [sp, #56]	; 0x38
   11638:	ldrne	r2, [r2]
   1163c:	ldrne	r2, [r2, #12]
   11640:	str	r2, [r4, #60]	; 0x3c
   11644:	ldrb	r2, [r4, #111]	; 0x6f
   11648:	cmp	r2, #0
   1164c:	bne	11940 <__assert_fail@plt+0x82c>
   11650:	mov	sl, #1
   11654:	cmp	r3, #0
   11658:	beq	116d8 <__assert_fail@plt+0x5c4>
   1165c:	ldr	r2, [sp, #48]	; 0x30
   11660:	cmp	r2, #0
   11664:	beq	116dc <__assert_fail@plt+0x5c8>
   11668:	ldr	r2, [sp, #44]	; 0x2c
   1166c:	ldr	r3, [sp, #56]	; 0x38
   11670:	ldr	lr, [r5, #8]
   11674:	ldr	r1, [r2]
   11678:	ldr	r3, [r3]
   1167c:	ldr	ip, [r5, #12]
   11680:	ldr	r0, [r1, #12]
   11684:	ldr	r2, [r3, #12]
   11688:	add	r1, r1, #20
   1168c:	add	r3, r3, #20
   11690:	stm	sp, {ip, lr}
   11694:	bl	121cc <__assert_fail@plt+0x10b8>
   11698:	cmp	r0, #0
   1169c:	blt	118d4 <__assert_fail@plt+0x7c0>
   116a0:	beq	117c8 <__assert_fail@plt+0x6b4>
   116a4:	ldrb	r3, [r4, #110]	; 0x6e
   116a8:	cmp	r3, #0
   116ac:	bne	11904 <__assert_fail@plt+0x7f0>
   116b0:	mov	r3, #0
   116b4:	mov	r2, #2
   116b8:	add	r1, sp, #48	; 0x30
   116bc:	mov	r0, r7
   116c0:	str	r3, [sp, #48]	; 0x30
   116c4:	bl	12a1c <__assert_fail@plt+0x1908>
   116c8:	ldr	r3, [sp, #36]	; 0x24
   116cc:	strb	sl, [r4, #92]	; 0x5c
   116d0:	cmp	r3, #0
   116d4:	bne	1165c <__assert_fail@plt+0x548>
   116d8:	mov	r3, #0
   116dc:	ldr	r1, [r4, #88]	; 0x58
   116e0:	mov	r2, #0
   116e4:	cmp	r1, #2
   116e8:	str	r2, [sp, #32]
   116ec:	beq	11708 <__assert_fail@plt+0x5f4>
   116f0:	ldrb	r2, [r4, #96]	; 0x60
   116f4:	cmp	r2, #0
   116f8:	beq	11a28 <__assert_fail@plt+0x914>
   116fc:	ldrb	r2, [r4, #97]	; 0x61
   11700:	cmp	r2, #0
   11704:	beq	11a28 <__assert_fail@plt+0x914>
   11708:	ldrb	r2, [r4, #109]	; 0x6d
   1170c:	cmp	r2, #0
   11710:	bne	11c00 <__assert_fail@plt+0xaec>
   11714:	ldrb	r3, [r4, #110]	; 0x6e
   11718:	cmp	r3, #0
   1171c:	bne	11b4c <__assert_fail@plt+0xa38>
   11720:	ldr	r0, [sp, #32]
   11724:	bl	10ebc <free@plt>
   11728:	add	r1, sp, #44	; 0x2c
   1172c:	add	r0, sp, #40	; 0x28
   11730:	bl	12170 <__assert_fail@plt+0x105c>
   11734:	add	r1, sp, #56	; 0x38
   11738:	add	r0, sp, #52	; 0x34
   1173c:	bl	12170 <__assert_fail@plt+0x105c>
   11740:	mov	r0, r8
   11744:	bl	1657c <__assert_fail@plt+0x5468>
   11748:	subs	r5, r0, #0
   1174c:	bne	11d58 <__assert_fail@plt+0xc44>
   11750:	mov	r0, r7
   11754:	bl	1657c <__assert_fail@plt+0x5468>
   11758:	cmp	r0, #0
   1175c:	bne	11cac <__assert_fail@plt+0xb98>
   11760:	ldrb	r3, [r4, #96]	; 0x60
   11764:	ldr	r2, [sp, #76]	; 0x4c
   11768:	cmp	r3, #0
   1176c:	ldr	r3, [pc, #1572]	; 11d98 <__assert_fail@plt+0xc84>
   11770:	ldrbeq	r0, [r4, #97]	; 0x61
   11774:	movne	r0, #1
   11778:	ldr	r3, [r3]
   1177c:	cmp	r2, r3
   11780:	bne	11c9c <__assert_fail@plt+0xb88>
   11784:	add	sp, sp, #84	; 0x54
   11788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1178c:	ldr	r2, [sp, #56]	; 0x38
   11790:	ldr	r1, [sp, #44]	; 0x2c
   11794:	sub	r3, r3, #-1073741823	; 0xc0000001
   11798:	ldr	lr, [r5, #8]
   1179c:	ldr	r1, [r1, r3, lsl #2]
   117a0:	ldr	ip, [r5, #12]
   117a4:	ldr	r3, [r2]
   117a8:	ldr	r0, [r1, #12]
   117ac:	add	r3, r3, #20
   117b0:	ldr	r2, [r3, #-8]
   117b4:	add	r1, r1, #20
   117b8:	stm	sp, {ip, lr}
   117bc:	bl	121cc <__assert_fail@plt+0x10b8>
   117c0:	cmp	r0, #0
   117c4:	bne	11928 <__assert_fail@plt+0x814>
   117c8:	mov	r2, #1
   117cc:	add	r1, sp, #36	; 0x24
   117d0:	mov	r0, r8
   117d4:	bl	12a1c <__assert_fail@plt+0x1908>
   117d8:	ldr	r3, [sp, #36]	; 0x24
   117dc:	cmp	r0, #0
   117e0:	bne	1178c <__assert_fail@plt+0x678>
   117e4:	mov	r2, #1
   117e8:	add	r3, r3, r2
   117ec:	str	r2, [sp, #8]
   117f0:	str	r3, [sp, #36]	; 0x24
   117f4:	b	11838 <__assert_fail@plt+0x724>
   117f8:	ldr	r3, [sp, #48]	; 0x30
   117fc:	ldr	r1, [sp, #56]	; 0x38
   11800:	ldr	r2, [sp, #44]	; 0x2c
   11804:	sub	r3, r3, #-1073741823	; 0xc0000001
   11808:	ldr	lr, [r5, #8]
   1180c:	ldr	r3, [r1, r3, lsl #2]
   11810:	ldr	ip, [r5, #12]
   11814:	ldr	r1, [r2]
   11818:	add	r3, r3, #20
   1181c:	ldr	r2, [r3, #-8]
   11820:	ldr	r0, [r1, #12]
   11824:	add	r1, r1, #20
   11828:	stm	sp, {ip, lr}
   1182c:	bl	121cc <__assert_fail@plt+0x10b8>
   11830:	cmp	r0, #0
   11834:	bne	11934 <__assert_fail@plt+0x820>
   11838:	mov	r2, #2
   1183c:	add	r1, sp, #48	; 0x30
   11840:	mov	r0, r7
   11844:	bl	12a1c <__assert_fail@plt+0x1908>
   11848:	cmp	r0, #0
   1184c:	bne	117f8 <__assert_fail@plt+0x6e4>
   11850:	ldr	r2, [sp, #48]	; 0x30
   11854:	mov	r3, #1
   11858:	add	r2, r2, r3
   1185c:	str	r3, [sp, #12]
   11860:	str	r2, [sp, #48]	; 0x30
   11864:	ldrb	r3, [r4, #108]	; 0x6c
   11868:	cmp	r3, #0
   1186c:	bne	11ae4 <__assert_fail@plt+0x9d0>
   11870:	ldr	r3, [sp, #8]
   11874:	cmp	r3, #0
   11878:	bne	11918 <__assert_fail@plt+0x804>
   1187c:	ldr	r3, [sp, #36]	; 0x24
   11880:	ldr	r2, [sp, #44]	; 0x2c
   11884:	sub	r1, r3, #-1073741823	; 0xc0000001
   11888:	mov	r3, #1
   1188c:	ldr	ip, [r2, r1, lsl #2]
   11890:	ldr	r0, [r2]
   11894:	str	ip, [r2]
   11898:	str	r0, [r2, r1, lsl #2]
   1189c:	str	sl, [sp, #36]	; 0x24
   118a0:	ldr	r2, [sp, #12]
   118a4:	cmp	r2, #0
   118a8:	movne	r2, #0
   118ac:	ldreq	r1, [sp, #48]	; 0x30
   118b0:	ldreq	r2, [sp, #56]	; 0x38
   118b4:	subeq	r1, r1, #-1073741823	; 0xc0000001
   118b8:	strne	r2, [sp, #48]	; 0x30
   118bc:	ldreq	r0, [r2]
   118c0:	ldreq	ip, [r2, r1, lsl #2]
   118c4:	streq	ip, [r2]
   118c8:	streq	r0, [r2, r1, lsl #2]
   118cc:	streq	sl, [sp, #48]	; 0x30
   118d0:	b	11654 <__assert_fail@plt+0x540>
   118d4:	ldrb	r3, [r4, #109]	; 0x6d
   118d8:	cmp	r3, #0
   118dc:	bne	11ad0 <__assert_fail@plt+0x9bc>
   118e0:	mov	r3, #0
   118e4:	mov	r2, #1
   118e8:	add	r1, sp, #36	; 0x24
   118ec:	mov	r0, r8
   118f0:	str	r3, [sp, #36]	; 0x24
   118f4:	bl	12a1c <__assert_fail@plt+0x1908>
   118f8:	strb	sl, [r4, #92]	; 0x5c
   118fc:	ldr	r3, [sp, #36]	; 0x24
   11900:	b	11654 <__assert_fail@plt+0x540>
   11904:	ldr	r3, [sp, #56]	; 0x38
   11908:	ldr	r0, [pc, #1256]	; 11df8 <__assert_fail@plt+0xce4>
   1190c:	ldr	r1, [r3]
   11910:	bl	12458 <__assert_fail@plt+0x1344>
   11914:	b	116b0 <__assert_fail@plt+0x59c>
   11918:	mov	r2, #0
   1191c:	mov	r3, r2
   11920:	str	r2, [sp, #36]	; 0x24
   11924:	b	118a0 <__assert_fail@plt+0x78c>
   11928:	mov	r3, #0
   1192c:	str	r3, [sp, #8]
   11930:	b	11838 <__assert_fail@plt+0x724>
   11934:	mov	r3, #0
   11938:	str	r3, [sp, #12]
   1193c:	b	11864 <__assert_fail@plt+0x750>
   11940:	cmp	r3, #0
   11944:	ldr	r3, [sp, #48]	; 0x30
   11948:	bne	11bd4 <__assert_fail@plt+0xac0>
   1194c:	cmp	r3, #0
   11950:	beq	116d8 <__assert_fail@plt+0x5c4>
   11954:	ldr	r0, [pc, #1180]	; 11df8 <__assert_fail@plt+0xce4>
   11958:	ldr	r3, [sp, #56]	; 0x38
   1195c:	ldr	r1, [r3]
   11960:	bl	12458 <__assert_fail@plt+0x1344>
   11964:	ldr	r3, [sp, #36]	; 0x24
   11968:	mov	ip, #0
   1196c:	cmp	r3, ip
   11970:	str	ip, [r4, #64]	; 0x40
   11974:	str	ip, [r4, #68]	; 0x44
   11978:	bne	11c4c <__assert_fail@plt+0xb38>
   1197c:	ldr	r3, [sp, #48]	; 0x30
   11980:	cmp	r3, #0
   11984:	bne	11c30 <__assert_fail@plt+0xb1c>
   11988:	ldr	r3, [sp, #36]	; 0x24
   1198c:	b	11650 <__assert_fail@plt+0x53c>
   11990:	mov	r3, #0
   11994:	str	r3, [r5, #12]
   11998:	b	11548 <__assert_fail@plt+0x434>
   1199c:	mov	r1, #1
   119a0:	ldr	r0, [pc, #1060]	; 11dcc <__assert_fail@plt+0xcb8>
   119a4:	bl	11f10 <__assert_fail@plt+0xdfc>
   119a8:	mov	r1, #1
   119ac:	ldr	r0, [pc, #1052]	; 11dd0 <__assert_fail@plt+0xcbc>
   119b0:	bl	11f10 <__assert_fail@plt+0xdfc>
   119b4:	b	11538 <__assert_fail@plt+0x424>
   119b8:	mov	r1, #0
   119bc:	ldr	r0, [pc, #1032]	; 11dcc <__assert_fail@plt+0xcb8>
   119c0:	bl	11f10 <__assert_fail@plt+0xdfc>
   119c4:	mov	r1, #0
   119c8:	ldr	r0, [pc, #1024]	; 11dd0 <__assert_fail@plt+0xcbc>
   119cc:	bl	11f10 <__assert_fail@plt+0xdfc>
   119d0:	b	1152c <__assert_fail@plt+0x418>
   119d4:	mov	r0, r6
   119d8:	ldr	r1, [pc, #1052]	; 11dfc <__assert_fail@plt+0xce8>
   119dc:	bl	130f0 <__assert_fail@plt+0x1fdc>
   119e0:	mov	r7, r0
   119e4:	b	115a0 <__assert_fail@plt+0x48c>
   119e8:	mov	r0, r6
   119ec:	ldr	r1, [pc, #1032]	; 11dfc <__assert_fail@plt+0xce8>
   119f0:	bl	130f0 <__assert_fail@plt+0x1fdc>
   119f4:	mov	r8, r0
   119f8:	b	11578 <__assert_fail@plt+0x464>
   119fc:	sub	r3, r3, #50	; 0x32
   11a00:	clz	r3, r3
   11a04:	lsr	r3, r3, #5
   11a08:	add	r2, sp, #80	; 0x50
   11a0c:	add	r5, r3, #1
   11a10:	add	r3, r2, r3, lsl #2
   11a14:	str	r5, [sp, #20]
   11a18:	ldr	r2, [r3, #-12]
   11a1c:	add	r2, r2, #1
   11a20:	str	r2, [r3, #-12]
   11a24:	b	111c8 <__assert_fail@plt+0xb4>
   11a28:	cmp	r3, #0
   11a2c:	beq	11b48 <__assert_fail@plt+0xa34>
   11a30:	ldrb	r9, [r4, #109]	; 0x6d
   11a34:	cmp	r9, #0
   11a38:	moveq	r9, #1
   11a3c:	bne	11c0c <__assert_fail@plt+0xaf8>
   11a40:	ldr	r3, [sp, #48]	; 0x30
   11a44:	ldr	r6, [pc, #940]	; 11df8 <__assert_fail@plt+0xce4>
   11a48:	cmp	r3, #0
   11a4c:	add	r5, sp, #32
   11a50:	movne	r3, #1
   11a54:	strbne	r3, [r4, #92]	; 0x5c
   11a58:	mov	r2, #1
   11a5c:	mov	r1, r5
   11a60:	mov	r0, r8
   11a64:	bl	12650 <__assert_fail@plt+0x153c>
   11a68:	cmp	r0, #0
   11a6c:	beq	11a88 <__assert_fail@plt+0x974>
   11a70:	ldrb	r3, [r4, #109]	; 0x6d
   11a74:	cmp	r3, #0
   11a78:	bne	11aa8 <__assert_fail@plt+0x994>
   11a7c:	ldrb	r3, [r4, #96]	; 0x60
   11a80:	cmp	r3, #0
   11a84:	beq	11a58 <__assert_fail@plt+0x944>
   11a88:	ldrb	r3, [r4, #110]	; 0x6e
   11a8c:	orrs	r2, r9, r3
   11a90:	bne	11c20 <__assert_fail@plt+0xb0c>
   11a94:	ldr	r0, [sp, #32]
   11a98:	cmp	r0, #0
   11a9c:	beq	11720 <__assert_fail@plt+0x60c>
   11aa0:	bl	12100 <__assert_fail@plt+0xfec>
   11aa4:	b	11720 <__assert_fail@plt+0x60c>
   11aa8:	mov	r1, r6
   11aac:	ldr	r0, [sp, #32]
   11ab0:	bl	12458 <__assert_fail@plt+0x1344>
   11ab4:	ldrb	r3, [r4, #96]	; 0x60
   11ab8:	cmp	r3, #0
   11abc:	beq	11a58 <__assert_fail@plt+0x944>
   11ac0:	ldrb	r3, [r4, #109]	; 0x6d
   11ac4:	cmp	r3, #0
   11ac8:	bne	11a58 <__assert_fail@plt+0x944>
   11acc:	b	11a88 <__assert_fail@plt+0x974>
   11ad0:	ldr	r3, [sp, #44]	; 0x2c
   11ad4:	ldr	r1, [pc, #796]	; 11df8 <__assert_fail@plt+0xce4>
   11ad8:	ldr	r0, [r3]
   11adc:	bl	12458 <__assert_fail@plt+0x1344>
   11ae0:	b	118e0 <__assert_fail@plt+0x7cc>
   11ae4:	ldr	r3, [sp, #36]	; 0x24
   11ae8:	cmp	r3, #1
   11aec:	movne	r9, #0
   11af0:	ldrne	r2, [sp, #48]	; 0x30
   11af4:	beq	11870 <__assert_fail@plt+0x75c>
   11af8:	cmp	r2, #1
   11afc:	lslne	fp, r9, #2
   11b00:	movne	r6, #0
   11b04:	beq	11b34 <__assert_fail@plt+0xa20>
   11b08:	ldr	r2, [sp, #56]	; 0x38
   11b0c:	ldr	r3, [sp, #44]	; 0x2c
   11b10:	ldr	r1, [r2, r6, lsl #2]
   11b14:	ldr	r0, [r3, fp]
   11b18:	bl	12458 <__assert_fail@plt+0x1344>
   11b1c:	ldr	r2, [sp, #48]	; 0x30
   11b20:	add	r6, r6, #1
   11b24:	sub	r3, r2, #1
   11b28:	cmp	r6, r3
   11b2c:	bcc	11b08 <__assert_fail@plt+0x9f4>
   11b30:	ldr	r3, [sp, #36]	; 0x24
   11b34:	add	r9, r9, #1
   11b38:	sub	r1, r3, #1
   11b3c:	cmp	r9, r1
   11b40:	bcc	11af8 <__assert_fail@plt+0x9e4>
   11b44:	b	11870 <__assert_fail@plt+0x75c>
   11b48:	ldrb	r3, [r4, #110]	; 0x6e
   11b4c:	ldr	r2, [sp, #48]	; 0x30
   11b50:	cmp	r2, #0
   11b54:	beq	11720 <__assert_fail@plt+0x60c>
   11b58:	add	r5, sp, #32
   11b5c:	cmp	r3, #0
   11b60:	bne	11bec <__assert_fail@plt+0xad8>
   11b64:	ldr	r3, [sp, #36]	; 0x24
   11b68:	ldr	r6, [pc, #648]	; 11df8 <__assert_fail@plt+0xce4>
   11b6c:	cmp	r3, #0
   11b70:	movne	r3, #1
   11b74:	strbne	r3, [r4, #92]	; 0x5c
   11b78:	mov	r2, #2
   11b7c:	mov	r1, r5
   11b80:	mov	r0, r7
   11b84:	bl	12650 <__assert_fail@plt+0x153c>
   11b88:	cmp	r0, #0
   11b8c:	beq	11a94 <__assert_fail@plt+0x980>
   11b90:	ldrb	r3, [r4, #110]	; 0x6e
   11b94:	cmp	r3, #0
   11b98:	bne	11bac <__assert_fail@plt+0xa98>
   11b9c:	ldrb	r3, [r4, #97]	; 0x61
   11ba0:	cmp	r3, #0
   11ba4:	beq	11b78 <__assert_fail@plt+0xa64>
   11ba8:	b	11a94 <__assert_fail@plt+0x980>
   11bac:	ldr	r1, [sp, #32]
   11bb0:	mov	r0, r6
   11bb4:	bl	12458 <__assert_fail@plt+0x1344>
   11bb8:	ldrb	r3, [r4, #97]	; 0x61
   11bbc:	cmp	r3, #0
   11bc0:	beq	11b78 <__assert_fail@plt+0xa64>
   11bc4:	ldrb	r3, [r4, #110]	; 0x6e
   11bc8:	cmp	r3, #0
   11bcc:	bne	11b78 <__assert_fail@plt+0xa64>
   11bd0:	b	11a94 <__assert_fail@plt+0x980>
   11bd4:	ldr	r2, [sp, #44]	; 0x2c
   11bd8:	cmp	r3, #0
   11bdc:	ldr	r0, [r2]
   11be0:	ldreq	r1, [pc, #528]	; 11df8 <__assert_fail@plt+0xce4>
   11be4:	beq	11960 <__assert_fail@plt+0x84c>
   11be8:	b	11958 <__assert_fail@plt+0x844>
   11bec:	ldr	r3, [sp, #56]	; 0x38
   11bf0:	ldr	r0, [pc, #512]	; 11df8 <__assert_fail@plt+0xce4>
   11bf4:	ldr	r1, [r3]
   11bf8:	bl	12458 <__assert_fail@plt+0x1344>
   11bfc:	b	11b64 <__assert_fail@plt+0xa50>
   11c00:	cmp	r3, #0
   11c04:	beq	11714 <__assert_fail@plt+0x600>
   11c08:	mov	r9, #0
   11c0c:	ldr	r3, [sp, #44]	; 0x2c
   11c10:	ldr	r1, [pc, #480]	; 11df8 <__assert_fail@plt+0xce4>
   11c14:	ldr	r0, [r3]
   11c18:	bl	12458 <__assert_fail@plt+0x1344>
   11c1c:	b	11a40 <__assert_fail@plt+0x92c>
   11c20:	ldr	r2, [sp, #48]	; 0x30
   11c24:	cmp	r2, #0
   11c28:	beq	11a94 <__assert_fail@plt+0x980>
   11c2c:	b	11b5c <__assert_fail@plt+0xa48>
   11c30:	mov	r3, #0
   11c34:	mov	r2, #2
   11c38:	add	r1, sp, #48	; 0x30
   11c3c:	mov	r0, r7
   11c40:	str	r3, [sp, #48]	; 0x30
   11c44:	bl	12a1c <__assert_fail@plt+0x1908>
   11c48:	b	11988 <__assert_fail@plt+0x874>
   11c4c:	mov	r2, #1
   11c50:	add	r1, sp, #36	; 0x24
   11c54:	mov	r0, r8
   11c58:	str	ip, [sp, #36]	; 0x24
   11c5c:	bl	12a1c <__assert_fail@plt+0x1908>
   11c60:	b	1197c <__assert_fail@plt+0x868>
   11c64:	mov	r0, r5
   11c68:	bl	12b00 <__assert_fail@plt+0x19ec>
   11c6c:	ldr	r1, [pc, #396]	; 11e00 <__assert_fail@plt+0xcec>
   11c70:	mov	r2, #5
   11c74:	mov	r0, #0
   11c78:	bl	10f04 <dcgettext@plt>
   11c7c:	mov	r4, r0
   11c80:	ldr	r0, [sl]
   11c84:	bl	155a4 <__assert_fail@plt+0x4490>
   11c88:	mov	r2, r4
   11c8c:	mov	r1, #0
   11c90:	mov	r3, r0
   11c94:	mov	r0, #1
   11c98:	bl	10f7c <error@plt>
   11c9c:	bl	10f10 <__stack_chk_fail@plt>
   11ca0:	mov	r2, #5
   11ca4:	ldr	r1, [pc, #344]	; 11e04 <__assert_fail@plt+0xcf0>
   11ca8:	b	11c74 <__assert_fail@plt+0xb60>
   11cac:	bl	11018 <__errno_location@plt>
   11cb0:	ldr	r2, [r4, #104]	; 0x68
   11cb4:	ldr	r4, [r0]
   11cb8:	mov	r1, #3
   11cbc:	mov	r0, #0
   11cc0:	bl	153d8 <__assert_fail@plt+0x42c4>
   11cc4:	mov	r1, r4
   11cc8:	ldr	r2, [pc, #312]	; 11e08 <__assert_fail@plt+0xcf4>
   11ccc:	mov	r3, r0
   11cd0:	mov	r0, #1
   11cd4:	bl	10f7c <error@plt>
   11cd8:	bl	11018 <__errno_location@plt>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r1, [pc, #292]	; 11e0c <__assert_fail@plt+0xcf8>
   11ce4:	ldr	r4, [r0]
   11ce8:	mov	r0, #0
   11cec:	bl	10f04 <dcgettext@plt>
   11cf0:	mov	r1, r4
   11cf4:	mov	r2, r0
   11cf8:	mov	r0, #1
   11cfc:	bl	10f7c <error@plt>
   11d00:	ldr	r1, [pc, #264]	; 11e10 <__assert_fail@plt+0xcfc>
   11d04:	mov	r2, #5
   11d08:	mov	r0, #0
   11d0c:	bl	10f04 <dcgettext@plt>
   11d10:	mov	r1, #0
   11d14:	mov	r2, r0
   11d18:	mov	r0, #1
   11d1c:	bl	10f7c <error@plt>
   11d20:	cmp	r5, #0
   11d24:	mov	r2, #5
   11d28:	bne	11d64 <__assert_fail@plt+0xc50>
   11d2c:	ldr	r1, [pc, #224]	; 11e14 <__assert_fail@plt+0xd00>
   11d30:	mov	r0, r5
   11d34:	bl	10f04 <dcgettext@plt>
   11d38:	mov	r1, r5
   11d3c:	mov	r2, r0
   11d40:	mov	r0, r5
   11d44:	bl	10f7c <error@plt>
   11d48:	b	112e8 <__assert_fail@plt+0x1d4>
   11d4c:	mov	r2, #5
   11d50:	ldr	r1, [pc, #192]	; 11e18 <__assert_fail@plt+0xd04>
   11d54:	b	11d08 <__assert_fail@plt+0xbf4>
   11d58:	bl	11018 <__errno_location@plt>
   11d5c:	ldr	r2, [r4, #100]	; 0x64
   11d60:	b	11cb4 <__assert_fail@plt+0xba0>
   11d64:	ldr	r1, [pc, #176]	; 11e1c <__assert_fail@plt+0xd08>
   11d68:	mov	r0, #0
   11d6c:	bl	10f04 <dcgettext@plt>
   11d70:	sub	r7, r7, #-1073741823	; 0xc0000001
   11d74:	mov	r4, r0
   11d78:	ldr	r0, [r6, r7, lsl #2]
   11d7c:	bl	155a4 <__assert_fail@plt+0x4490>
   11d80:	mov	r1, #0
   11d84:	mov	r2, r4
   11d88:	mov	r3, r0
   11d8c:	mov	r0, r1
   11d90:	bl	10f7c <error@plt>
   11d94:	b	112e8 <__assert_fail@plt+0x1d4>
   11d98:	andeq	r8, r2, r8, lsl #30
   11d9c:	andeq	r7, r1, r0, lsr #29
   11da0:	ldrdeq	r7, [r1], -r0
   11da4:	andeq	r7, r1, r0, lsl r8
   11da8:	andeq	r9, r2, r8, lsl #3
   11dac:	andeq	r9, r2, r0, lsl #2
   11db0:	ldrdeq	r6, [r1], -r8
   11db4:	andeq	r7, r1, r8, asr r9
   11db8:	andeq	r9, r2, r0, lsl #3
   11dbc:	andeq	r2, r1, r0, ror #31
   11dc0:	andeq	r2, r1, r8, lsr #2
   11dc4:	andeq	r0, r0, r1, lsl #2
   11dc8:	andeq	r9, r2, r8, ror #2
   11dcc:	andeq	r9, r2, ip, lsl #2
   11dd0:	andeq	r9, r2, r8, lsl #2
   11dd4:	andeq	r9, r2, ip, ror r1
   11dd8:	andeq	r9, r2, r4, lsl r1
   11ddc:	andeq	r7, r1, r8, asr #18
   11de0:	andeq	r6, r1, ip, lsl #30
   11de4:	andeq	r7, r1, ip, lsl #16
   11de8:	andeq	r7, r1, r0, lsl r9
   11dec:	andeq	r7, r1, r8, lsl r9
   11df0:	muleq	r1, r8, r9
   11df4:	andeq	r9, r2, r8, ror r1
   11df8:	andeq	r9, r2, r8, lsr #3
   11dfc:	andeq	r7, r1, r0, asr sl
   11e00:	andeq	r6, r1, ip, ror lr
   11e04:	andeq	r7, r1, ip, lsl r9
   11e08:	muleq	r1, r4, sl
   11e0c:	muleq	r1, ip, r9
   11e10:	andeq	r7, r1, r4, lsr r9
   11e14:	andeq	r7, r1, ip, ror #18
   11e18:	andeq	r7, r1, r4, ror #17
   11e1c:	andeq	r7, r1, ip, ror r9
   11e20:	mov	fp, #0
   11e24:	mov	lr, #0
   11e28:	pop	{r1}		; (ldr r1, [sp], #4)
   11e2c:	mov	r2, sp
   11e30:	push	{r2}		; (str r2, [sp, #-4]!)
   11e34:	push	{r0}		; (str r0, [sp, #-4]!)
   11e38:	ldr	ip, [pc, #16]	; 11e50 <__assert_fail@plt+0xd3c>
   11e3c:	push	{ip}		; (str ip, [sp, #-4]!)
   11e40:	ldr	r0, [pc, #12]	; 11e54 <__assert_fail@plt+0xd40>
   11e44:	ldr	r3, [pc, #12]	; 11e58 <__assert_fail@plt+0xd44>
   11e48:	bl	10fa0 <__libc_start_main@plt>
   11e4c:	bl	110fc <abort@plt>
   11e50:	andeq	r6, r1, r8, ror sp
   11e54:	andeq	r1, r1, r0, lsr #2
   11e58:	andeq	r6, r1, r8, lsl sp
   11e5c:	ldr	r3, [pc, #20]	; 11e78 <__assert_fail@plt+0xd64>
   11e60:	ldr	r2, [pc, #20]	; 11e7c <__assert_fail@plt+0xd68>
   11e64:	add	r3, pc, r3
   11e68:	ldr	r2, [r3, r2]
   11e6c:	cmp	r2, #0
   11e70:	bxeq	lr
   11e74:	b	10fc4 <__gmon_start__@plt>
   11e78:	muleq	r1, r4, r1
   11e7c:	strdeq	r0, [r0], -r4
   11e80:	ldr	r0, [pc, #24]	; 11ea0 <__assert_fail@plt+0xd8c>
   11e84:	ldr	r3, [pc, #24]	; 11ea4 <__assert_fail@plt+0xd90>
   11e88:	cmp	r3, r0
   11e8c:	bxeq	lr
   11e90:	ldr	r3, [pc, #16]	; 11ea8 <__assert_fail@plt+0xd94>
   11e94:	cmp	r3, #0
   11e98:	bxeq	lr
   11e9c:	bx	r3
   11ea0:	andeq	r9, r2, ip, asr r1
   11ea4:	andeq	r9, r2, ip, asr r1
   11ea8:	andeq	r0, r0, r0
   11eac:	ldr	r0, [pc, #36]	; 11ed8 <__assert_fail@plt+0xdc4>
   11eb0:	ldr	r1, [pc, #36]	; 11edc <__assert_fail@plt+0xdc8>
   11eb4:	sub	r1, r1, r0
   11eb8:	asr	r1, r1, #2
   11ebc:	add	r1, r1, r1, lsr #31
   11ec0:	asrs	r1, r1, #1
   11ec4:	bxeq	lr
   11ec8:	ldr	r3, [pc, #16]	; 11ee0 <__assert_fail@plt+0xdcc>
   11ecc:	cmp	r3, #0
   11ed0:	bxeq	lr
   11ed4:	bx	r3
   11ed8:	andeq	r9, r2, ip, asr r1
   11edc:	andeq	r9, r2, ip, asr r1
   11ee0:	andeq	r0, r0, r0
   11ee4:	push	{r4, lr}
   11ee8:	ldr	r4, [pc, #24]	; 11f08 <__assert_fail@plt+0xdf4>
   11eec:	ldrb	r3, [r4]
   11ef0:	cmp	r3, #0
   11ef4:	popne	{r4, pc}
   11ef8:	bl	11e80 <__assert_fail@plt+0xd6c>
   11efc:	mov	r3, #1
   11f00:	strb	r3, [r4]
   11f04:	pop	{r4, pc}
   11f08:	andeq	r9, r2, r4, lsl #3
   11f0c:	b	11eac <__assert_fail@plt+0xd98>
   11f10:	push	{r4, r5, lr}
   11f14:	sub	sp, sp, #12
   11f18:	ldr	r5, [r0]
   11f1c:	cmp	r5, r1
   11f20:	cmnne	r5, #1
   11f24:	bne	11f34 <__assert_fail@plt+0xe20>
   11f28:	str	r1, [r0]
   11f2c:	add	sp, sp, #12
   11f30:	pop	{r4, r5, pc}
   11f34:	mov	r4, r1
   11f38:	mov	r2, #5
   11f3c:	ldr	r1, [pc, #32]	; 11f64 <__assert_fail@plt+0xe50>
   11f40:	mov	r0, #0
   11f44:	bl	10f04 <dcgettext@plt>
   11f48:	add	r1, r4, #1
   11f4c:	str	r1, [sp]
   11f50:	add	r3, r5, #1
   11f54:	mov	r1, #0
   11f58:	mov	r2, r0
   11f5c:	mov	r0, #1
   11f60:	bl	10f7c <error@plt>
   11f64:	andeq	r6, r1, r8, asr lr
   11f68:	push	{r4, r5, lr}
   11f6c:	sub	sp, sp, #20
   11f70:	ldr	r4, [pc, #148]	; 1200c <__assert_fail@plt+0xef8>
   11f74:	ldr	r2, [pc, #148]	; 12010 <__assert_fail@plt+0xefc>
   11f78:	add	r3, sp, #8
   11f7c:	ldr	ip, [r4]
   11f80:	mov	r1, #0
   11f84:	str	r2, [sp]
   11f88:	mov	r2, #10
   11f8c:	str	ip, [sp, #12]
   11f90:	mov	r5, r0
   11f94:	bl	15f30 <__assert_fail@plt+0x4e1c>
   11f98:	cmp	r0, #1
   11f9c:	beq	11fd0 <__assert_fail@plt+0xebc>
   11fa0:	cmp	r0, #0
   11fa4:	bne	11fd8 <__assert_fail@plt+0xec4>
   11fa8:	ldr	r0, [sp, #8]
   11fac:	cmp	r0, #0
   11fb0:	subne	r0, r0, #1
   11fb4:	beq	11fd8 <__assert_fail@plt+0xec4>
   11fb8:	ldr	r2, [sp, #12]
   11fbc:	ldr	r3, [r4]
   11fc0:	cmp	r2, r3
   11fc4:	bne	12008 <__assert_fail@plt+0xef4>
   11fc8:	add	sp, sp, #20
   11fcc:	pop	{r4, r5, pc}
   11fd0:	mvn	r0, #1
   11fd4:	b	11fb8 <__assert_fail@plt+0xea4>
   11fd8:	mov	r2, #5
   11fdc:	ldr	r1, [pc, #48]	; 12014 <__assert_fail@plt+0xf00>
   11fe0:	mov	r0, #0
   11fe4:	bl	10f04 <dcgettext@plt>
   11fe8:	mov	r4, r0
   11fec:	mov	r0, r5
   11ff0:	bl	155a4 <__assert_fail@plt+0x4490>
   11ff4:	mov	r2, r4
   11ff8:	mov	r1, #0
   11ffc:	mov	r3, r0
   12000:	mov	r0, #1
   12004:	bl	10f7c <error@plt>
   12008:	bl	10f10 <__stack_chk_fail@plt>
   1200c:	andeq	r8, r2, r8, lsl #30
   12010:	andeq	r7, r1, r0, lsr #29
   12014:	andeq	r6, r1, ip, ror lr
   12018:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1201c:	mov	r5, r0
   12020:	ldr	r8, [pc, #200]	; 120f0 <__assert_fail@plt+0xfdc>
   12024:	mov	r7, #0
   12028:	ldr	r6, [pc, #196]	; 120f4 <__assert_fail@plt+0xfe0>
   1202c:	b	12068 <__assert_fail@plt+0xf54>
   12030:	ldrb	r9, [r5, #1]
   12034:	cmp	r9, #0
   12038:	bne	120e4 <__assert_fail@plt+0xfd0>
   1203c:	mov	r5, r9
   12040:	mov	r0, #12
   12044:	bl	15b20 <__assert_fail@plt+0x4a0c>
   12048:	ldr	r3, [r6]
   1204c:	cmp	r4, #0
   12050:	stm	r0, {r5, r9}
   12054:	str	r7, [r0, #8]
   12058:	str	r0, [r6]
   1205c:	str	r0, [r3, #8]
   12060:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12064:	mov	r5, r4
   12068:	mov	r1, r8
   1206c:	mov	r0, r5
   12070:	bl	110d8 <strpbrk@plt>
   12074:	subs	r4, r0, #0
   12078:	strbne	r7, [r4], #1
   1207c:	ldrb	r3, [r5]
   12080:	cmp	r3, #48	; 0x30
   12084:	beq	12030 <__assert_fail@plt+0xf1c>
   12088:	bcc	120b4 <__assert_fail@plt+0xfa0>
   1208c:	cmp	r3, #50	; 0x32
   12090:	bhi	120b4 <__assert_fail@plt+0xfa0>
   12094:	ldrb	r2, [r5, #1]
   12098:	cmp	r2, #46	; 0x2e
   1209c:	bne	120e4 <__assert_fail@plt+0xfd0>
   120a0:	add	r0, r5, #2
   120a4:	sub	r5, r3, #48	; 0x30
   120a8:	bl	11f68 <__assert_fail@plt+0xe54>
   120ac:	mov	r9, r0
   120b0:	b	12040 <__assert_fail@plt+0xf2c>
   120b4:	ldr	r1, [pc, #60]	; 120f8 <__assert_fail@plt+0xfe4>
   120b8:	mov	r2, #5
   120bc:	mov	r0, #0
   120c0:	bl	10f04 <dcgettext@plt>
   120c4:	mov	r4, r0
   120c8:	mov	r0, r5
   120cc:	bl	155a4 <__assert_fail@plt+0x4490>
   120d0:	mov	r2, r4
   120d4:	mov	r1, #0
   120d8:	mov	r3, r0
   120dc:	mov	r0, #1
   120e0:	bl	10f7c <error@plt>
   120e4:	mov	r2, #5
   120e8:	ldr	r1, [pc, #12]	; 120fc <__assert_fail@plt+0xfe8>
   120ec:	b	120bc <__assert_fail@plt+0xfa8>
   120f0:	muleq	r1, r8, lr
   120f4:	andeq	r9, r2, r0, lsl #2
   120f8:			; <UNDEFINED> instruction: 0x00016eb8
   120fc:	muleq	r1, ip, lr
   12100:	push	{r4, r5, r6, lr}
   12104:	mov	r4, r0
   12108:	mov	r5, #0
   1210c:	ldr	r0, [r0, #20]
   12110:	bl	10ebc <free@plt>
   12114:	str	r5, [r4, #20]
   12118:	ldr	r0, [r4, #8]
   1211c:	bl	10ebc <free@plt>
   12120:	str	r5, [r4, #8]
   12124:	pop	{r4, r5, r6, pc}
   12128:	push	{r4, r5, r6, lr}
   1212c:	ldr	r5, [pc, #56]	; 1216c <__assert_fail@plt+0x1058>
   12130:	ldr	r4, [r5]
   12134:	cmp	r4, #0
   12138:	beq	1214c <__assert_fail@plt+0x1038>
   1213c:	mov	r0, r4
   12140:	bl	12100 <__assert_fail@plt+0xfec>
   12144:	mov	r0, r4
   12148:	bl	10ebc <free@plt>
   1214c:	ldr	r4, [r5, #4]
   12150:	cmp	r4, #0
   12154:	popeq	{r4, r5, r6, pc}
   12158:	mov	r0, r4
   1215c:	bl	12100 <__assert_fail@plt+0xfec>
   12160:	mov	r0, r4
   12164:	pop	{r4, r5, r6, lr}
   12168:	b	10ebc <free@plt>
   1216c:	andeq	r9, r2, r8, lsl #3
   12170:	ldr	r3, [r0]
   12174:	push	{r4, r5, r6, lr}
   12178:	cmp	r3, #0
   1217c:	mov	r5, r1
   12180:	movne	r6, r0
   12184:	movne	r4, #0
   12188:	beq	121c0 <__assert_fail@plt+0x10ac>
   1218c:	ldr	r3, [r5]
   12190:	ldr	r3, [r3, r4, lsl #2]
   12194:	subs	r0, r3, #0
   12198:	beq	121a8 <__assert_fail@plt+0x1094>
   1219c:	bl	12100 <__assert_fail@plt+0xfec>
   121a0:	ldr	r3, [r5]
   121a4:	ldr	r3, [r3, r4, lsl #2]
   121a8:	mov	r0, r3
   121ac:	bl	10ebc <free@plt>
   121b0:	ldr	r3, [r6]
   121b4:	add	r4, r4, #1
   121b8:	cmp	r4, r3
   121bc:	bcc	1218c <__assert_fail@plt+0x1078>
   121c0:	ldr	r0, [r5]
   121c4:	pop	{r4, r5, r6, lr}
   121c8:	b	10ebc <free@plt>
   121cc:	push	{r4, r5, r6, lr}
   121d0:	ldr	ip, [sp, #16]
   121d4:	ldr	lr, [sp, #20]
   121d8:	cmp	ip, r0
   121dc:	bcs	12204 <__assert_fail@plt+0x10f0>
   121e0:	ldr	r1, [r1]
   121e4:	cmp	lr, r2
   121e8:	add	r2, r1, ip, lsl #3
   121ec:	ldr	r0, [r1, ip, lsl #3]
   121f0:	ldr	r5, [r2, #4]
   121f4:	bcc	12228 <__assert_fail@plt+0x1114>
   121f8:	adds	r0, r5, #0
   121fc:	movne	r0, #1
   12200:	pop	{r4, r5, r6, pc}
   12204:	cmp	lr, r2
   12208:	bcs	12284 <__assert_fail@plt+0x1170>
   1220c:	ldr	r3, [r3]
   12210:	add	lr, r3, lr, lsl #3
   12214:	ldr	r4, [lr, #4]
   12218:	adds	r0, r4, #0
   1221c:	movne	r0, #1
   12220:	rsb	r0, r0, #0
   12224:	pop	{r4, r5, r6, pc}
   12228:	ldr	r3, [r3]
   1222c:	cmp	r5, #0
   12230:	add	r2, r3, lr, lsl #3
   12234:	ldr	r1, [r3, lr, lsl #3]
   12238:	ldr	r4, [r2, #4]
   1223c:	beq	12218 <__assert_fail@plt+0x1104>
   12240:	cmp	r4, #0
   12244:	beq	122d0 <__assert_fail@plt+0x11bc>
   12248:	ldr	r3, [pc, #136]	; 122d8 <__assert_fail@plt+0x11c4>
   1224c:	ldrb	ip, [r3, #8]
   12250:	cmp	ip, #0
   12254:	beq	1228c <__assert_fail@plt+0x1178>
   12258:	cmp	r5, r4
   1225c:	movcc	r2, r5
   12260:	movcs	r2, r4
   12264:	bl	132ec <__assert_fail@plt+0x21d8>
   12268:	cmp	r0, #0
   1226c:	popne	{r4, r5, r6, pc}
   12270:	cmp	r5, r4
   12274:	bcc	122c8 <__assert_fail@plt+0x11b4>
   12278:	movne	r0, #1
   1227c:	moveq	r0, #0
   12280:	pop	{r4, r5, r6, pc}
   12284:	mov	r0, #0
   12288:	pop	{r4, r5, r6, pc}
   1228c:	ldrb	r3, [r3, #9]
   12290:	cmp	r3, #0
   12294:	bne	122b4 <__assert_fail@plt+0x11a0>
   12298:	cmp	r5, r4
   1229c:	movcc	r2, r5
   122a0:	movcs	r2, r4
   122a4:	bl	10ef8 <memcmp@plt>
   122a8:	cmp	r0, #0
   122ac:	beq	12270 <__assert_fail@plt+0x115c>
   122b0:	pop	{r4, r5, r6, pc}
   122b4:	mov	r3, r4
   122b8:	mov	r2, r1
   122bc:	mov	r1, r5
   122c0:	pop	{r4, r5, r6, lr}
   122c4:	b	15e74 <__assert_fail@plt+0x4d60>
   122c8:	mvn	r0, #0
   122cc:	pop	{r4, r5, r6, pc}
   122d0:	mov	r0, #1
   122d4:	pop	{r4, r5, r6, pc}
   122d8:	andeq	r9, r2, r8, lsl #3
   122dc:	cmp	r0, r1
   122e0:	bcs	1230c <__assert_fail@plt+0x11f8>
   122e4:	ldr	r3, [r2]
   122e8:	add	r2, r3, r0, lsl #3
   122ec:	ldr	r2, [r2, #4]
   122f0:	cmp	r2, #0
   122f4:	beq	1230c <__assert_fail@plt+0x11f8>
   122f8:	ldr	r1, [pc, #40]	; 12328 <__assert_fail@plt+0x1214>
   122fc:	ldr	r0, [r3, r0, lsl #3]
   12300:	ldr	r3, [r1]
   12304:	mov	r1, #1
   12308:	b	10eec <fwrite_unlocked@plt>
   1230c:	ldr	r3, [pc, #24]	; 1232c <__assert_fail@plt+0x1218>
   12310:	ldr	r0, [r3, #12]
   12314:	cmp	r0, #0
   12318:	bxeq	lr
   1231c:	ldr	r3, [pc, #4]	; 12328 <__assert_fail@plt+0x1214>
   12320:	ldr	r1, [r3]
   12324:	b	10e80 <fputs_unlocked@plt>
   12328:	andeq	r9, r2, ip, ror r1
   1232c:	andeq	r9, r2, r8, lsl #3
   12330:	ldr	r3, [pc, #276]	; 1244c <__assert_fail@plt+0x1338>
   12334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12338:	sub	sp, sp, #12
   1233c:	ldrb	r3, [r3, #16]
   12340:	str	r1, [sp]
   12344:	mov	r5, r0
   12348:	cmp	r3, #0
   1234c:	ldr	r3, [pc, #252]	; 12450 <__assert_fail@plt+0x133c>
   12350:	ldreq	r8, [r0, #12]
   12354:	movne	r8, r2
   12358:	ldr	fp, [r3, #4]
   1235c:	ldr	r3, [sp]
   12360:	cmp	fp, #0
   12364:	movlt	r7, #32
   12368:	uxtbge	r7, fp
   1236c:	movlt	fp, r7
   12370:	cmp	r8, r3
   12374:	movcc	r9, r8
   12378:	movcs	r9, r3
   1237c:	cmp	r9, #0
   12380:	beq	123d4 <__assert_fail@plt+0x12c0>
   12384:	ldr	r6, [pc, #200]	; 12454 <__assert_fail@plt+0x1340>
   12388:	add	sl, r0, #20
   1238c:	mov	r4, #0
   12390:	uxtb	r3, fp
   12394:	str	r3, [sp, #4]
   12398:	ldr	r0, [r6]
   1239c:	ldr	r3, [r0, #20]
   123a0:	ldr	r2, [r0, #24]
   123a4:	add	r1, r3, #1
   123a8:	cmp	r3, r2
   123ac:	strcc	r1, [r0, #20]
   123b0:	strbcc	r7, [r3]
   123b4:	bcs	12434 <__assert_fail@plt+0x1320>
   123b8:	mov	r0, r4
   123bc:	mov	r2, sl
   123c0:	ldr	r1, [r5, #12]
   123c4:	add	r4, r4, #1
   123c8:	bl	122dc <__assert_fail@plt+0x11c8>
   123cc:	cmp	r4, r9
   123d0:	bne	12398 <__assert_fail@plt+0x1284>
   123d4:	ldr	r3, [sp]
   123d8:	add	r4, r3, #1
   123dc:	cmp	r8, r4
   123e0:	bls	1242c <__assert_fail@plt+0x1318>
   123e4:	ldr	r6, [pc, #104]	; 12454 <__assert_fail@plt+0x1340>
   123e8:	uxtb	fp, fp
   123ec:	add	r9, r5, #20
   123f0:	ldr	r0, [r6]
   123f4:	ldr	r3, [r0, #20]
   123f8:	ldr	r2, [r0, #24]
   123fc:	add	r1, r3, #1
   12400:	cmp	r3, r2
   12404:	strcc	r1, [r0, #20]
   12408:	strbcc	r7, [r3]
   1240c:	bcs	12440 <__assert_fail@plt+0x132c>
   12410:	mov	r0, r4
   12414:	mov	r2, r9
   12418:	ldr	r1, [r5, #12]
   1241c:	add	r4, r4, #1
   12420:	bl	122dc <__assert_fail@plt+0x11c8>
   12424:	cmp	r8, r4
   12428:	bne	123f0 <__assert_fail@plt+0x12dc>
   1242c:	add	sp, sp, #12
   12430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12434:	ldr	r1, [sp, #4]
   12438:	bl	1109c <__overflow@plt>
   1243c:	b	123b8 <__assert_fail@plt+0x12a4>
   12440:	mov	r1, fp
   12444:	bl	1109c <__overflow@plt>
   12448:	b	12410 <__assert_fail@plt+0x12fc>
   1244c:	andeq	r9, r2, r8, lsl #3
   12450:	andeq	r9, r2, r0, lsl #2
   12454:	andeq	r9, r2, ip, ror r1
   12458:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1245c:	mov	r4, r0
   12460:	ldr	r6, [pc, #308]	; 1259c <__assert_fail@plt+0x1488>
   12464:	ldr	r5, [pc, #308]	; 125a0 <__assert_fail@plt+0x148c>
   12468:	mov	r9, r1
   1246c:	ldr	sl, [r6, #4]
   12470:	ldr	fp, [r5, #28]
   12474:	cmp	sl, #0
   12478:	movlt	r8, #32
   1247c:	uxtbge	r8, sl
   12480:	movlt	sl, r8
   12484:	cmp	fp, #0
   12488:	beq	12534 <__assert_fail@plt+0x1420>
   1248c:	ldr	r7, [pc, #272]	; 125a4 <__assert_fail@plt+0x1490>
   12490:	add	r5, r5, #32
   12494:	b	124e4 <__assert_fail@plt+0x13d0>
   12498:	cmp	r4, r5
   1249c:	moveq	r3, r9
   124a0:	ldreq	r0, [r6, #8]
   124a4:	ldrne	r0, [r6, #12]
   124a8:	movne	r3, r4
   124ac:	add	r2, r3, #20
   124b0:	ldr	r1, [r3, #12]
   124b4:	bl	122dc <__assert_fail@plt+0x11c8>
   124b8:	ldr	fp, [fp, #8]
   124bc:	ldr	r0, [r7]
   124c0:	cmp	fp, #0
   124c4:	beq	12504 <__assert_fail@plt+0x13f0>
   124c8:	ldr	r3, [r0, #20]
   124cc:	ldr	r2, [r0, #24]
   124d0:	add	r1, r3, #1
   124d4:	cmp	r3, r2
   124d8:	strcc	r1, [r0, #20]
   124dc:	strbcc	r8, [r3]
   124e0:	bcs	12528 <__assert_fail@plt+0x1414>
   124e4:	ldr	r3, [fp]
   124e8:	cmp	r3, #0
   124ec:	beq	12498 <__assert_fail@plt+0x1384>
   124f0:	cmp	r3, #1
   124f4:	ldr	r0, [fp, #4]
   124f8:	moveq	r3, r4
   124fc:	movne	r3, r9
   12500:	b	124ac <__assert_fail@plt+0x1398>
   12504:	ldr	r3, [r0, #20]
   12508:	ldr	r2, [r0, #24]
   1250c:	ldrb	r1, [r6, #16]
   12510:	cmp	r3, r2
   12514:	bcs	12594 <__assert_fail@plt+0x1480>
   12518:	add	r2, r3, #1
   1251c:	str	r2, [r0, #20]
   12520:	strb	r1, [r3]
   12524:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12528:	uxtb	r1, sl
   1252c:	bl	1109c <__overflow@plt>
   12530:	b	124e4 <__assert_fail@plt+0x13d0>
   12534:	add	r3, r5, #32
   12538:	cmp	r0, r3
   1253c:	moveq	r3, r1
   12540:	movne	r3, r4
   12544:	ldreq	r0, [r6, #8]
   12548:	ldrne	r0, [r6, #12]
   1254c:	add	r2, r3, #20
   12550:	ldr	r1, [r3, #12]
   12554:	bl	122dc <__assert_fail@plt+0x11c8>
   12558:	mov	r0, r4
   1255c:	ldr	r2, [r5, #56]	; 0x38
   12560:	ldr	r1, [r6, #12]
   12564:	bl	12330 <__assert_fail@plt+0x121c>
   12568:	ldr	r2, [r5, #60]	; 0x3c
   1256c:	mov	r0, r9
   12570:	ldr	r1, [r6, #8]
   12574:	bl	12330 <__assert_fail@plt+0x121c>
   12578:	ldr	r3, [pc, #36]	; 125a4 <__assert_fail@plt+0x1490>
   1257c:	ldrb	r1, [r6, #16]
   12580:	ldr	r0, [r3]
   12584:	ldr	r3, [r0, #20]
   12588:	ldr	r2, [r0, #24]
   1258c:	cmp	r3, r2
   12590:	bcc	12518 <__assert_fail@plt+0x1404>
   12594:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12598:	b	1109c <__overflow@plt>
   1259c:	andeq	r9, r2, r0, lsl #2
   125a0:	andeq	r9, r2, r8, lsl #3
   125a4:	andeq	r9, r2, ip, ror r1
   125a8:	ldr	r3, [r0, #12]
   125ac:	ldr	ip, [r0, #16]
   125b0:	push	{r4, r5, r6, lr}
   125b4:	cmp	r3, ip
   125b8:	mov	r4, r0
   125bc:	mov	r6, r1
   125c0:	mov	r5, r2
   125c4:	ldr	r0, [r0, #20]
   125c8:	bcs	125e4 <__assert_fail@plt+0x14d0>
   125cc:	add	r2, r0, r3, lsl #3
   125d0:	str	r6, [r0, r3, lsl #3]
   125d4:	add	r3, r3, #1
   125d8:	str	r5, [r2, #4]
   125dc:	str	r3, [r4, #12]
   125e0:	pop	{r4, r5, r6, pc}
   125e4:	cmp	r0, #0
   125e8:	beq	12618 <__assert_fail@plt+0x1504>
   125ec:	ldr	r3, [pc, #88]	; 1264c <__assert_fail@plt+0x1538>
   125f0:	cmp	ip, r3
   125f4:	bhi	1263c <__assert_fail@plt+0x1528>
   125f8:	add	r3, ip, #1
   125fc:	add	ip, r3, ip, lsr #1
   12600:	lsl	r1, ip, #3
   12604:	str	ip, [r4, #16]
   12608:	bl	15b7c <__assert_fail@plt+0x4a68>
   1260c:	ldr	r3, [r4, #12]
   12610:	str	r0, [r4, #20]
   12614:	b	125cc <__assert_fail@plt+0x14b8>
   12618:	cmp	ip, #0
   1261c:	beq	12640 <__assert_fail@plt+0x152c>
   12620:	lsrs	r3, ip, #29
   12624:	movne	r3, #1
   12628:	moveq	r3, #0
   1262c:	lsls	r1, ip, #3
   12630:	bmi	1263c <__assert_fail@plt+0x1528>
   12634:	cmp	r3, #0
   12638:	beq	12604 <__assert_fail@plt+0x14f0>
   1263c:	bl	15d68 <__assert_fail@plt+0x4c54>
   12640:	mov	r1, #64	; 0x40
   12644:	mov	ip, #8
   12648:	b	12604 <__assert_fail@plt+0x14f0>
   1264c:	beq	feabd0f8 <optarg@@GLIBC_2.4+0xfea93f78>
   12650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12654:	sub	sl, r2, #1
   12658:	ldr	r6, [pc, #940]	; 12a0c <__assert_fail@plt+0x18f8>
   1265c:	lsl	fp, sl, #2
   12660:	add	r3, r6, fp
   12664:	ldr	r5, [r1]
   12668:	ldr	r3, [r3, #64]	; 0x40
   1266c:	sub	sp, sp, #36	; 0x24
   12670:	cmp	r3, r5
   12674:	str	r2, [sp, #20]
   12678:	ldreq	r3, [r6, sl, lsl #2]
   1267c:	streq	r5, [r6, sl, lsl #2]
   12680:	moveq	r5, r3
   12684:	streq	r3, [r1]
   12688:	cmp	r5, #0
   1268c:	mov	r4, r1
   12690:	mov	r8, r0
   12694:	beq	1297c <__assert_fail@plt+0x1868>
   12698:	mov	r3, #0
   1269c:	str	r3, [r5, #12]
   126a0:	ldr	r9, [pc, #872]	; 12a10 <__assert_fail@plt+0x18fc>
   126a4:	mov	r1, r8
   126a8:	mov	r0, r5
   126ac:	ldrb	r2, [r9, #16]
   126b0:	bl	131e8 <__assert_fail@plt+0x20d4>
   126b4:	subs	r7, r0, #0
   126b8:	beq	1287c <__assert_fail@plt+0x1768>
   126bc:	lsl	r3, sl, #3
   126c0:	add	r2, r6, r3
   126c4:	ldr	r7, [r5, #4]
   126c8:	ldr	r4, [r5, #8]
   126cc:	str	r3, [sp, #24]
   126d0:	ldr	r3, [r2, #72]	; 0x48
   126d4:	ldr	r1, [r2, #76]	; 0x4c
   126d8:	sub	r7, r7, #1
   126dc:	adds	r3, r3, #1
   126e0:	add	r8, r4, r7
   126e4:	str	r3, [r2, #72]	; 0x48
   126e8:	adc	r3, r1, #0
   126ec:	cmp	r4, r8
   126f0:	str	r3, [r2, #76]	; 0x4c
   126f4:	beq	12764 <__assert_fail@plt+0x1650>
   126f8:	ldr	r1, [r9, #4]
   126fc:	mvn	r3, r1
   12700:	cmp	r1, #10
   12704:	lsr	r3, r3, #31
   12708:	moveq	r3, #0
   1270c:	cmp	r3, #0
   12710:	beq	128a0 <__assert_fail@plt+0x178c>
   12714:	str	sl, [sp, #28]
   12718:	b	12734 <__assert_fail@plt+0x1620>
   1271c:	mov	r1, r4
   12720:	sub	r2, r7, r4
   12724:	mov	r0, r5
   12728:	bl	125a8 <__assert_fail@plt+0x1494>
   1272c:	ldr	r1, [r9, #4]
   12730:	add	r4, r7, #1
   12734:	sub	sl, r8, r4
   12738:	mov	r2, sl
   1273c:	mov	r0, r4
   12740:	bl	11060 <memchr@plt>
   12744:	subs	r7, r0, #0
   12748:	bne	1271c <__assert_fail@plt+0x1608>
   1274c:	mov	r7, sl
   12750:	ldr	sl, [sp, #28]
   12754:	mov	r2, r7
   12758:	mov	r1, r4
   1275c:	mov	r0, r5
   12760:	bl	125a8 <__assert_fail@plt+0x1494>
   12764:	add	r3, r6, fp
   12768:	ldr	r1, [r3, #64]	; 0x40
   1276c:	cmp	r1, #0
   12770:	beq	12868 <__assert_fail@plt+0x1754>
   12774:	ldr	r3, [r6, #88]	; 0x58
   12778:	cmp	r3, #2
   1277c:	beq	12868 <__assert_fail@plt+0x1754>
   12780:	cmp	r3, #1
   12784:	beq	12794 <__assert_fail@plt+0x1680>
   12788:	ldrb	r3, [r6, #92]	; 0x5c
   1278c:	cmp	r3, #0
   12790:	beq	12868 <__assert_fail@plt+0x1754>
   12794:	add	r3, r6, sl
   12798:	ldrb	r3, [r3, #96]	; 0x60
   1279c:	cmp	r3, #0
   127a0:	bne	12868 <__assert_fail@plt+0x1754>
   127a4:	ldr	r3, [sp, #20]
   127a8:	ldr	r0, [r1, #12]
   127ac:	cmp	r3, #1
   127b0:	ldr	r2, [r5, #12]
   127b4:	ldreq	r3, [r9, #12]
   127b8:	ldrne	r3, [r9, #8]
   127bc:	add	r1, r1, #20
   127c0:	str	r3, [sp, #4]
   127c4:	str	r3, [sp]
   127c8:	add	r3, r5, #20
   127cc:	bl	121cc <__assert_fail@plt+0x10b8>
   127d0:	cmp	r0, #0
   127d4:	ble	12868 <__assert_fail@plt+0x1754>
   127d8:	ldr	r3, [r5, #4]
   127dc:	cmp	r3, #0
   127e0:	moveq	r4, r3
   127e4:	beq	12808 <__assert_fail@plt+0x16f4>
   127e8:	ldr	r1, [r5, #8]
   127ec:	sub	r2, r3, #1
   127f0:	ldrb	r1, [r1, r2]
   127f4:	cmp	r1, #10
   127f8:	moveq	r3, r2
   127fc:	cmp	r3, #0
   12800:	movge	r4, r3
   12804:	mvnlt	r4, #-2147483648	; 0x80000000
   12808:	mov	r2, #5
   1280c:	ldr	r1, [pc, #512]	; 12a14 <__assert_fail@plt+0x1900>
   12810:	mov	r0, #0
   12814:	ldr	r7, [r6, #88]	; 0x58
   12818:	bl	10f04 <dcgettext@plt>
   1281c:	ldr	r3, [sp, #24]
   12820:	ldr	r2, [r5, #8]
   12824:	add	r3, r6, r3
   12828:	sub	r7, r7, #1
   1282c:	ldrd	r8, [r3, #72]	; 0x48
   12830:	add	r3, r6, fp
   12834:	clz	r7, r7
   12838:	lsr	r7, r7, #5
   1283c:	str	r2, [sp, #12]
   12840:	strd	r8, [sp]
   12844:	str	r4, [sp, #8]
   12848:	mov	r1, #0
   1284c:	ldr	r3, [r3, #100]	; 0x64
   12850:	add	sl, r6, sl
   12854:	mov	r2, r0
   12858:	mov	r0, r7
   1285c:	bl	10f7c <error@plt>
   12860:	mov	r3, #1
   12864:	strb	r3, [sl, #96]	; 0x60
   12868:	add	r6, r6, fp
   1286c:	mov	r0, #1
   12870:	str	r5, [r6, #64]	; 0x40
   12874:	add	sp, sp, #36	; 0x24
   12878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1287c:	ldr	r0, [r8]
   12880:	ands	r4, r0, #32
   12884:	bne	129e4 <__assert_fail@plt+0x18d0>
   12888:	subs	r0, r5, #0
   1288c:	beq	12874 <__assert_fail@plt+0x1760>
   12890:	bl	12100 <__assert_fail@plt+0xfec>
   12894:	mov	r0, r4
   12898:	add	sp, sp, #36	; 0x24
   1289c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a0:	cmp	r1, #0
   128a4:	bge	12754 <__assert_fail@plt+0x1640>
   128a8:	bl	10fdc <__ctype_b_loc@plt>
   128ac:	str	r0, [sp, #28]
   128b0:	ldr	r1, [r0]
   128b4:	b	128c4 <__assert_fail@plt+0x17b0>
   128b8:	cmp	r8, r7
   128bc:	mov	r4, r7
   128c0:	beq	12764 <__assert_fail@plt+0x1650>
   128c4:	mov	r7, r4
   128c8:	ldrb	r2, [r7], #1
   128cc:	lsl	r3, r2, #1
   128d0:	ldrh	r3, [r1, r3]
   128d4:	cmp	r2, #10
   128d8:	orreq	r3, r3, #1
   128dc:	tst	r3, #1
   128e0:	bne	128b8 <__assert_fail@plt+0x17a4>
   128e4:	cmp	r8, r7
   128e8:	beq	129d4 <__assert_fail@plt+0x18c0>
   128ec:	ldrb	r0, [r4, #1]
   128f0:	lsl	r2, r0, #1
   128f4:	ldrh	r2, [r1, r2]
   128f8:	cmp	r0, #10
   128fc:	orreq	r2, r2, #1
   12900:	tst	r2, #1
   12904:	movne	r2, #1
   12908:	beq	12994 <__assert_fail@plt+0x1880>
   1290c:	mov	r1, r4
   12910:	mov	r0, r5
   12914:	add	r4, r7, #1
   12918:	bl	125a8 <__assert_fail@plt+0x1494>
   1291c:	cmp	r8, r4
   12920:	beq	129cc <__assert_fail@plt+0x18b8>
   12924:	ldrb	r0, [r7, #1]
   12928:	ldr	r3, [sp, #28]
   1292c:	ldr	r1, [r3]
   12930:	lsl	r2, r0, #1
   12934:	ldrh	r2, [r1, r2]
   12938:	cmp	r0, #10
   1293c:	orreq	r2, r2, #1
   12940:	tst	r2, #1
   12944:	addne	r7, r7, #2
   12948:	beq	12974 <__assert_fail@plt+0x1860>
   1294c:	cmp	r8, r7
   12950:	mov	r4, r7
   12954:	beq	129cc <__assert_fail@plt+0x18b8>
   12958:	ldrb	r2, [r7], #1
   1295c:	lsl	r3, r2, #1
   12960:	ldrh	r3, [r1, r3]
   12964:	cmp	r2, #10
   12968:	orreq	r3, r3, #1
   1296c:	tst	r3, #1
   12970:	bne	1294c <__assert_fail@plt+0x1838>
   12974:	add	r7, r4, #1
   12978:	b	128e4 <__assert_fail@plt+0x17d0>
   1297c:	mov	r1, #24
   12980:	mov	r0, #1
   12984:	bl	15cf8 <__assert_fail@plt+0x4be4>
   12988:	mov	r5, r0
   1298c:	str	r0, [r4]
   12990:	b	126a0 <__assert_fail@plt+0x158c>
   12994:	add	r2, r4, #2
   12998:	cmp	r8, r2
   1299c:	mov	r7, r2
   129a0:	beq	129dc <__assert_fail@plt+0x18c8>
   129a4:	ldrb	r0, [r2]
   129a8:	add	r2, r7, #1
   129ac:	lsl	r3, r0, #1
   129b0:	ldrh	r3, [r1, r3]
   129b4:	cmp	r0, #10
   129b8:	orreq	r3, r3, #1
   129bc:	tst	r3, #1
   129c0:	beq	12998 <__assert_fail@plt+0x1884>
   129c4:	sub	r2, r7, r4
   129c8:	b	1290c <__assert_fail@plt+0x17f8>
   129cc:	mov	r7, #0
   129d0:	b	12754 <__assert_fail@plt+0x1640>
   129d4:	mov	r2, #1
   129d8:	b	12758 <__assert_fail@plt+0x1644>
   129dc:	sub	r2, r8, r4
   129e0:	b	12758 <__assert_fail@plt+0x1644>
   129e4:	bl	11018 <__errno_location@plt>
   129e8:	mov	r2, #5
   129ec:	ldr	r1, [pc, #36]	; 12a18 <__assert_fail@plt+0x1904>
   129f0:	ldr	r4, [r0]
   129f4:	mov	r0, r7
   129f8:	bl	10f04 <dcgettext@plt>
   129fc:	mov	r1, r4
   12a00:	mov	r2, r0
   12a04:	mov	r0, #1
   12a08:	bl	10f7c <error@plt>
   12a0c:	andeq	r9, r2, r8, lsl #3
   12a10:	andeq	r9, r2, r0, lsl #2
   12a14:	andeq	r6, r1, ip, ror #29
   12a18:	andeq	r6, r1, r0, ror #29
   12a1c:	push	{r4, r5, lr}
   12a20:	mov	r4, r1
   12a24:	ldr	r1, [r1]
   12a28:	ldr	r3, [r4, #4]
   12a2c:	mov	r5, r0
   12a30:	cmp	r1, r3
   12a34:	sub	sp, sp, #12
   12a38:	ldr	r0, [r4, #8]
   12a3c:	beq	12a64 <__assert_fail@plt+0x1950>
   12a40:	add	r1, r0, r1, lsl #2
   12a44:	mov	r0, r5
   12a48:	bl	12650 <__assert_fail@plt+0x153c>
   12a4c:	cmp	r0, #0
   12a50:	ldrne	r3, [r4]
   12a54:	addne	r3, r3, #1
   12a58:	strne	r3, [r4]
   12a5c:	add	sp, sp, #12
   12a60:	pop	{r4, r5, pc}
   12a64:	cmp	r0, #0
   12a68:	beq	12ac8 <__assert_fail@plt+0x19b4>
   12a6c:	ldr	r1, [pc, #136]	; 12afc <__assert_fail@plt+0x19e8>
   12a70:	cmp	r3, r1
   12a74:	bhi	12aec <__assert_fail@plt+0x19d8>
   12a78:	add	r1, r3, #1
   12a7c:	add	r3, r1, r3, lsr #1
   12a80:	lsl	r1, r3, #2
   12a84:	str	r3, [r4, #4]
   12a88:	str	r2, [sp, #4]
   12a8c:	bl	15b7c <__assert_fail@plt+0x4a68>
   12a90:	ldm	r4, {r1, ip}
   12a94:	ldr	r2, [sp, #4]
   12a98:	cmp	r1, ip
   12a9c:	str	r0, [r4, #8]
   12aa0:	bcs	12a40 <__assert_fail@plt+0x192c>
   12aa4:	sub	r3, r1, #-1073741823	; 0xc0000001
   12aa8:	add	ip, r0, ip, lsl #2
   12aac:	sub	ip, ip, #4
   12ab0:	add	r3, r0, r3, lsl #2
   12ab4:	mov	lr, #0
   12ab8:	str	lr, [r3, #4]!
   12abc:	cmp	ip, r3
   12ac0:	bne	12ab8 <__assert_fail@plt+0x19a4>
   12ac4:	b	12a40 <__assert_fail@plt+0x192c>
   12ac8:	cmp	r3, #0
   12acc:	beq	12af0 <__assert_fail@plt+0x19dc>
   12ad0:	lsrs	r1, r3, #30
   12ad4:	movne	ip, #1
   12ad8:	moveq	ip, #0
   12adc:	lsls	r1, r3, #2
   12ae0:	bmi	12aec <__assert_fail@plt+0x19d8>
   12ae4:	cmp	ip, #0
   12ae8:	beq	12a84 <__assert_fail@plt+0x1970>
   12aec:	bl	15d68 <__assert_fail@plt+0x4c54>
   12af0:	mov	r1, #64	; 0x40
   12af4:	mov	r3, #16
   12af8:	b	12a84 <__assert_fail@plt+0x1970>
   12afc:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   12b00:	ldr	r3, [pc, #792]	; 12e20 <__assert_fail@plt+0x1d0c>
   12b04:	push	{r7, lr}
   12b08:	sub	sp, sp, #64	; 0x40
   12b0c:	ldr	r3, [r3]
   12b10:	subs	r4, r0, #0
   12b14:	str	r3, [sp, #60]	; 0x3c
   12b18:	beq	12b54 <__assert_fail@plt+0x1a40>
   12b1c:	ldr	r3, [pc, #768]	; 12e24 <__assert_fail@plt+0x1d10>
   12b20:	mov	r2, #5
   12b24:	ldr	r1, [pc, #764]	; 12e28 <__assert_fail@plt+0x1d14>
   12b28:	mov	r0, #0
   12b2c:	ldr	r5, [r3]
   12b30:	bl	10f04 <dcgettext@plt>
   12b34:	ldr	r3, [pc, #752]	; 12e2c <__assert_fail@plt+0x1d18>
   12b38:	mov	r1, #1
   12b3c:	ldr	r3, [r3]
   12b40:	mov	r2, r0
   12b44:	mov	r0, r5
   12b48:	bl	11054 <__fprintf_chk@plt>
   12b4c:	mov	r0, r4
   12b50:	bl	10fe8 <exit@plt>
   12b54:	mov	r2, #5
   12b58:	ldr	r1, [pc, #720]	; 12e30 <__assert_fail@plt+0x1d1c>
   12b5c:	bl	10f04 <dcgettext@plt>
   12b60:	ldr	r3, [pc, #708]	; 12e2c <__assert_fail@plt+0x1d18>
   12b64:	ldr	r5, [pc, #712]	; 12e34 <__assert_fail@plt+0x1d20>
   12b68:	ldr	r2, [r3]
   12b6c:	mov	r1, r0
   12b70:	mov	r0, #1
   12b74:	bl	1103c <__printf_chk@plt>
   12b78:	mov	r2, #5
   12b7c:	ldr	r1, [pc, #692]	; 12e38 <__assert_fail@plt+0x1d24>
   12b80:	mov	r0, r4
   12b84:	bl	10f04 <dcgettext@plt>
   12b88:	ldr	r1, [r5]
   12b8c:	bl	10e80 <fputs_unlocked@plt>
   12b90:	mov	r2, #5
   12b94:	ldr	r1, [pc, #672]	; 12e3c <__assert_fail@plt+0x1d28>
   12b98:	mov	r0, r4
   12b9c:	bl	10f04 <dcgettext@plt>
   12ba0:	ldr	r1, [r5]
   12ba4:	bl	10e80 <fputs_unlocked@plt>
   12ba8:	mov	r2, #5
   12bac:	ldr	r1, [pc, #652]	; 12e40 <__assert_fail@plt+0x1d2c>
   12bb0:	mov	r0, r4
   12bb4:	bl	10f04 <dcgettext@plt>
   12bb8:	ldr	r1, [r5]
   12bbc:	bl	10e80 <fputs_unlocked@plt>
   12bc0:	mov	r2, #5
   12bc4:	ldr	r1, [pc, #632]	; 12e44 <__assert_fail@plt+0x1d30>
   12bc8:	mov	r0, r4
   12bcc:	bl	10f04 <dcgettext@plt>
   12bd0:	ldr	r1, [r5]
   12bd4:	bl	10e80 <fputs_unlocked@plt>
   12bd8:	mov	r2, #5
   12bdc:	ldr	r1, [pc, #612]	; 12e48 <__assert_fail@plt+0x1d34>
   12be0:	mov	r0, r4
   12be4:	bl	10f04 <dcgettext@plt>
   12be8:	ldr	r1, [r5]
   12bec:	bl	10e80 <fputs_unlocked@plt>
   12bf0:	mov	r2, #5
   12bf4:	ldr	r1, [pc, #592]	; 12e4c <__assert_fail@plt+0x1d38>
   12bf8:	mov	r0, r4
   12bfc:	bl	10f04 <dcgettext@plt>
   12c00:	ldr	r1, [r5]
   12c04:	bl	10e80 <fputs_unlocked@plt>
   12c08:	mov	r2, #5
   12c0c:	ldr	r1, [pc, #572]	; 12e50 <__assert_fail@plt+0x1d3c>
   12c10:	mov	r0, r4
   12c14:	bl	10f04 <dcgettext@plt>
   12c18:	ldr	r1, [r5]
   12c1c:	bl	10e80 <fputs_unlocked@plt>
   12c20:	mov	r2, #5
   12c24:	ldr	r1, [pc, #552]	; 12e54 <__assert_fail@plt+0x1d40>
   12c28:	mov	r0, r4
   12c2c:	bl	10f04 <dcgettext@plt>
   12c30:	ldr	r1, [r5]
   12c34:	bl	10e80 <fputs_unlocked@plt>
   12c38:	mov	r2, #5
   12c3c:	ldr	r1, [pc, #532]	; 12e58 <__assert_fail@plt+0x1d44>
   12c40:	mov	r0, r4
   12c44:	bl	10f04 <dcgettext@plt>
   12c48:	ldr	r1, [r5]
   12c4c:	bl	10e80 <fputs_unlocked@plt>
   12c50:	ldr	lr, [pc, #516]	; 12e5c <__assert_fail@plt+0x1d48>
   12c54:	add	ip, sp, #4
   12c58:	ldm	lr!, {r0, r1, r2, r3}
   12c5c:	stmia	ip!, {r0, r1, r2, r3}
   12c60:	ldm	lr!, {r0, r1, r2, r3}
   12c64:	ldr	r6, [sp, #4]
   12c68:	stmia	ip!, {r0, r1, r2, r3}
   12c6c:	cmp	r6, #0
   12c70:	ldm	lr!, {r0, r1, r2, r3}
   12c74:	addeq	r5, sp, #4
   12c78:	stmia	ip!, {r0, r1, r2, r3}
   12c7c:	ldm	lr, {r0, r1}
   12c80:	stm	ip, {r0, r1}
   12c84:	beq	12cb4 <__assert_fail@plt+0x1ba0>
   12c88:	ldr	r7, [pc, #464]	; 12e60 <__assert_fail@plt+0x1d4c>
   12c8c:	add	r5, sp, #4
   12c90:	b	12ca0 <__assert_fail@plt+0x1b8c>
   12c94:	ldr	r6, [r5, #8]!
   12c98:	cmp	r6, #0
   12c9c:	beq	12cb4 <__assert_fail@plt+0x1ba0>
   12ca0:	mov	r1, r6
   12ca4:	mov	r0, r7
   12ca8:	bl	10e98 <strcmp@plt>
   12cac:	cmp	r0, #0
   12cb0:	bne	12c94 <__assert_fail@plt+0x1b80>
   12cb4:	ldr	r5, [r5, #4]
   12cb8:	mov	r2, #5
   12cbc:	cmp	r5, #0
   12cc0:	ldr	r1, [pc, #412]	; 12e64 <__assert_fail@plt+0x1d50>
   12cc4:	beq	12d6c <__assert_fail@plt+0x1c58>
   12cc8:	mov	r0, #0
   12ccc:	bl	10f04 <dcgettext@plt>
   12cd0:	ldr	r3, [pc, #400]	; 12e68 <__assert_fail@plt+0x1d54>
   12cd4:	ldr	r2, [pc, #400]	; 12e6c <__assert_fail@plt+0x1d58>
   12cd8:	mov	r1, r0
   12cdc:	mov	r0, #1
   12ce0:	bl	1103c <__printf_chk@plt>
   12ce4:	mov	r1, #0
   12ce8:	mov	r0, #5
   12cec:	bl	110a8 <setlocale@plt>
   12cf0:	cmp	r0, #0
   12cf4:	ldreq	r6, [pc, #356]	; 12e60 <__assert_fail@plt+0x1d4c>
   12cf8:	beq	12d14 <__assert_fail@plt+0x1c00>
   12cfc:	mov	r2, #3
   12d00:	ldr	r1, [pc, #360]	; 12e70 <__assert_fail@plt+0x1d5c>
   12d04:	bl	110f0 <strncmp@plt>
   12d08:	ldr	r6, [pc, #336]	; 12e60 <__assert_fail@plt+0x1d4c>
   12d0c:	cmp	r0, #0
   12d10:	bne	12dfc <__assert_fail@plt+0x1ce8>
   12d14:	mov	r2, #5
   12d18:	ldr	r1, [pc, #340]	; 12e74 <__assert_fail@plt+0x1d60>
   12d1c:	mov	r0, #0
   12d20:	bl	10f04 <dcgettext@plt>
   12d24:	ldr	r3, [pc, #308]	; 12e60 <__assert_fail@plt+0x1d4c>
   12d28:	ldr	r2, [pc, #312]	; 12e68 <__assert_fail@plt+0x1d54>
   12d2c:	mov	r1, r0
   12d30:	mov	r0, #1
   12d34:	bl	1103c <__printf_chk@plt>
   12d38:	mov	r2, #5
   12d3c:	ldr	r1, [pc, #308]	; 12e78 <__assert_fail@plt+0x1d64>
   12d40:	mov	r0, #0
   12d44:	bl	10f04 <dcgettext@plt>
   12d48:	ldr	r2, [pc, #300]	; 12e7c <__assert_fail@plt+0x1d68>
   12d4c:	cmp	r5, r6
   12d50:	ldr	r3, [pc, #296]	; 12e80 <__assert_fail@plt+0x1d6c>
   12d54:	movne	r3, r2
   12d58:	mov	r1, r0
   12d5c:	mov	r2, r5
   12d60:	mov	r0, #1
   12d64:	bl	1103c <__printf_chk@plt>
   12d68:	b	12b4c <__assert_fail@plt+0x1a38>
   12d6c:	mov	r0, r5
   12d70:	bl	10f04 <dcgettext@plt>
   12d74:	ldr	r3, [pc, #236]	; 12e68 <__assert_fail@plt+0x1d54>
   12d78:	ldr	r2, [pc, #236]	; 12e6c <__assert_fail@plt+0x1d58>
   12d7c:	mov	r1, r0
   12d80:	mov	r0, #1
   12d84:	bl	1103c <__printf_chk@plt>
   12d88:	mov	r1, r5
   12d8c:	mov	r0, #5
   12d90:	bl	110a8 <setlocale@plt>
   12d94:	cmp	r0, #0
   12d98:	beq	12db0 <__assert_fail@plt+0x1c9c>
   12d9c:	mov	r2, #3
   12da0:	ldr	r1, [pc, #200]	; 12e70 <__assert_fail@plt+0x1d5c>
   12da4:	bl	110f0 <strncmp@plt>
   12da8:	cmp	r0, #0
   12dac:	bne	12df4 <__assert_fail@plt+0x1ce0>
   12db0:	mov	r2, #5
   12db4:	ldr	r1, [pc, #184]	; 12e74 <__assert_fail@plt+0x1d60>
   12db8:	mov	r0, #0
   12dbc:	bl	10f04 <dcgettext@plt>
   12dc0:	ldr	r3, [pc, #152]	; 12e60 <__assert_fail@plt+0x1d4c>
   12dc4:	ldr	r2, [pc, #156]	; 12e68 <__assert_fail@plt+0x1d54>
   12dc8:	mov	r5, r3
   12dcc:	mov	r1, r0
   12dd0:	mov	r0, #1
   12dd4:	bl	1103c <__printf_chk@plt>
   12dd8:	ldr	r1, [pc, #152]	; 12e78 <__assert_fail@plt+0x1d64>
   12ddc:	mov	r2, #5
   12de0:	mov	r0, #0
   12de4:	bl	10f04 <dcgettext@plt>
   12de8:	ldr	r3, [pc, #144]	; 12e80 <__assert_fail@plt+0x1d6c>
   12dec:	mov	r1, r0
   12df0:	b	12d5c <__assert_fail@plt+0x1c48>
   12df4:	ldr	r6, [pc, #100]	; 12e60 <__assert_fail@plt+0x1d4c>
   12df8:	mov	r5, r6
   12dfc:	mov	r2, #5
   12e00:	ldr	r1, [pc, #124]	; 12e84 <__assert_fail@plt+0x1d70>
   12e04:	mov	r0, #0
   12e08:	bl	10f04 <dcgettext@plt>
   12e0c:	ldr	r2, [pc, #76]	; 12e60 <__assert_fail@plt+0x1d4c>
   12e10:	mov	r1, r0
   12e14:	mov	r0, #1
   12e18:	bl	1103c <__printf_chk@plt>
   12e1c:	b	12d14 <__assert_fail@plt+0x1c00>
   12e20:	andeq	r8, r2, r8, lsl #30
   12e24:	andeq	r9, r2, r0, ror r1
   12e28:	andeq	r6, r1, r4, lsl pc
   12e2c:	andeq	r9, r2, r0, lsl #4
   12e30:	andeq	r6, r1, ip, lsr pc
   12e34:	andeq	r9, r2, ip, ror r1
   12e38:	andeq	r6, r1, r0, ror #30
   12e3c:	strdeq	r6, [r1], -r8
   12e40:	andeq	r7, r1, r4, lsr r0
   12e44:	andeq	r7, r1, r4, lsl #2
   12e48:	andeq	r7, r1, r4, lsl #4
   12e4c:	strdeq	r7, [r1], -r0
   12e50:	andeq	r7, r1, r0, lsr r4
   12e54:	andeq	r7, r1, r0, ror #8
   12e58:	muleq	r1, r8, r4
   12e5c:	andeq	r6, r1, r0, lsr #27
   12e60:	andeq	r6, r1, ip, lsl #30
   12e64:	andeq	r7, r1, ip, asr #15
   12e68:	andeq	r7, r1, r4, ror #15
   12e6c:	andeq	r7, r1, ip, lsl #16
   12e70:	andeq	r7, r1, ip, lsl r8
   12e74:	andeq	r7, r1, r8, ror #16
   12e78:	andeq	r7, r1, r8, lsl #17
   12e7c:	andeq	r7, r1, r0, lsr #29
   12e80:	andeq	r7, r1, r8, asr #19
   12e84:	andeq	r7, r1, r0, lsr #16
   12e88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e8c:	mov	r7, r3
   12e90:	ldr	r4, [r3]
   12e94:	mov	r9, r0
   12e98:	cmp	r4, #2
   12e9c:	mov	r6, r1
   12ea0:	ldr	r8, [sp, #32]
   12ea4:	beq	12edc <__assert_fail@plt+0x1dc8>
   12ea8:	ldr	r5, [pc, #256]	; 12fb0 <__assert_fail@plt+0x1e9c>
   12eac:	lsl	r3, r4, #2
   12eb0:	add	r4, r4, #1
   12eb4:	ldr	r2, [r8]
   12eb8:	add	r5, r5, r3
   12ebc:	str	r2, [r6, r3]
   12ec0:	str	r9, [r5, #100]	; 0x64
   12ec4:	str	r4, [r7]
   12ec8:	ldr	r3, [r8]
   12ecc:	cmp	r3, #3
   12ed0:	ldreq	r2, [sp, #36]	; 0x24
   12ed4:	streq	r3, [r2]
   12ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12edc:	ldr	sl, [r1]
   12ee0:	ldr	r5, [pc, #200]	; 12fb0 <__assert_fail@plt+0x1e9c>
   12ee4:	clz	r3, sl
   12ee8:	lsr	r3, r3, #5
   12eec:	add	r1, r5, r3, lsl #2
   12ef0:	ldr	r3, [r6, r3, lsl #2]
   12ef4:	ldr	r0, [r1, #100]	; 0x64
   12ef8:	cmp	r3, #3
   12efc:	ldrls	pc, [pc, r3, lsl #2]
   12f00:	b	12f18 <__assert_fail@plt+0x1e04>
   12f04:	andeq	r2, r1, r4, ror pc
   12f08:	andeq	r2, r1, r4, asr pc
   12f0c:	andeq	r2, r1, r4, lsr pc
   12f10:	andeq	r2, r1, r4, lsl pc
   12f14:	bl	12018 <__assert_fail@plt+0xf04>
   12f18:	cmp	sl, #0
   12f1c:	ldrne	r3, [r5, #104]	; 0x68
   12f20:	ldrne	r2, [r6, #4]
   12f24:	strne	r2, [r6]
   12f28:	strne	r3, [r5, #100]	; 0x64
   12f2c:	mov	r3, #4
   12f30:	b	12eb4 <__assert_fail@plt+0x1da0>
   12f34:	ldr	r3, [r2, #4]
   12f38:	sub	r3, r3, #1
   12f3c:	str	r3, [r2, #4]
   12f40:	bl	11f68 <__assert_fail@plt+0xe54>
   12f44:	mov	r1, r0
   12f48:	ldr	r0, [pc, #100]	; 12fb4 <__assert_fail@plt+0x1ea0>
   12f4c:	bl	11f10 <__assert_fail@plt+0xdfc>
   12f50:	b	12f18 <__assert_fail@plt+0x1e04>
   12f54:	ldr	r3, [r2]
   12f58:	sub	r3, r3, #1
   12f5c:	str	r3, [r2]
   12f60:	bl	11f68 <__assert_fail@plt+0xe54>
   12f64:	mov	r1, r0
   12f68:	ldr	r0, [pc, #72]	; 12fb8 <__assert_fail@plt+0x1ea4>
   12f6c:	bl	11f10 <__assert_fail@plt+0xdfc>
   12f70:	b	12f18 <__assert_fail@plt+0x1e04>
   12f74:	mov	r2, #5
   12f78:	ldr	r1, [pc, #60]	; 12fbc <__assert_fail@plt+0x1ea8>
   12f7c:	mov	r0, #0
   12f80:	bl	10f04 <dcgettext@plt>
   12f84:	mov	r1, r9
   12f88:	mov	r4, r0
   12f8c:	mov	r0, #4
   12f90:	bl	152fc <__assert_fail@plt+0x41e8>
   12f94:	mov	r1, #0
   12f98:	mov	r2, r4
   12f9c:	mov	r3, r0
   12fa0:	mov	r0, r1
   12fa4:	bl	10f7c <error@plt>
   12fa8:	mov	r0, #1
   12fac:	bl	12b00 <__assert_fail@plt+0x19ec>
   12fb0:	andeq	r9, r2, r8, lsl #3
   12fb4:	andeq	r9, r2, r8, lsl #2
   12fb8:	andeq	r9, r2, ip, lsl #2
   12fbc:			; <UNDEFINED> instruction: 0x000178bc
   12fc0:	ldr	r3, [pc, #4]	; 12fcc <__assert_fail@plt+0x1eb8>
   12fc4:	str	r0, [r3]
   12fc8:	bx	lr
   12fcc:	strdeq	r9, [r2], -r8
   12fd0:	ldr	r3, [pc, #4]	; 12fdc <__assert_fail@plt+0x1ec8>
   12fd4:	strb	r0, [r3, #4]
   12fd8:	bx	lr
   12fdc:	strdeq	r9, [r2], -r8
   12fe0:	ldr	r3, [pc, #180]	; 1309c <__assert_fail@plt+0x1f88>
   12fe4:	push	{r4, r5, r6, lr}
   12fe8:	sub	sp, sp, #8
   12fec:	ldr	r0, [r3]
   12ff0:	bl	168e8 <__assert_fail@plt+0x57d4>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13020 <__assert_fail@plt+0x1f0c>
   12ffc:	bl	11018 <__errno_location@plt>
   13000:	ldr	r5, [pc, #152]	; 130a0 <__assert_fail@plt+0x1f8c>
   13004:	ldrb	r3, [r5, #4]
   13008:	cmp	r3, #0
   1300c:	mov	r4, r0
   13010:	beq	1303c <__assert_fail@plt+0x1f28>
   13014:	ldr	r3, [r0]
   13018:	cmp	r3, #32
   1301c:	bne	1303c <__assert_fail@plt+0x1f28>
   13020:	ldr	r3, [pc, #124]	; 130a4 <__assert_fail@plt+0x1f90>
   13024:	ldr	r0, [r3]
   13028:	bl	168e8 <__assert_fail@plt+0x57d4>
   1302c:	cmp	r0, #0
   13030:	bne	1307c <__assert_fail@plt+0x1f68>
   13034:	add	sp, sp, #8
   13038:	pop	{r4, r5, r6, pc}
   1303c:	mov	r2, #5
   13040:	ldr	r1, [pc, #96]	; 130a8 <__assert_fail@plt+0x1f94>
   13044:	mov	r0, #0
   13048:	bl	10f04 <dcgettext@plt>
   1304c:	mov	r6, r0
   13050:	ldr	r0, [r5]
   13054:	cmp	r0, #0
   13058:	beq	13088 <__assert_fail@plt+0x1f74>
   1305c:	ldr	r4, [r4]
   13060:	bl	153c4 <__assert_fail@plt+0x42b0>
   13064:	mov	r1, r4
   13068:	str	r6, [sp]
   1306c:	ldr	r2, [pc, #56]	; 130ac <__assert_fail@plt+0x1f98>
   13070:	mov	r3, r0
   13074:	mov	r0, #0
   13078:	bl	10f7c <error@plt>
   1307c:	ldr	r3, [pc, #44]	; 130b0 <__assert_fail@plt+0x1f9c>
   13080:	ldr	r0, [r3]
   13084:	bl	10ec8 <_exit@plt>
   13088:	mov	r3, r6
   1308c:	ldr	r1, [r4]
   13090:	ldr	r2, [pc, #28]	; 130b4 <__assert_fail@plt+0x1fa0>
   13094:	bl	10f7c <error@plt>
   13098:	b	1307c <__assert_fail@plt+0x1f68>
   1309c:	andeq	r9, r2, ip, ror r1
   130a0:	strdeq	r9, [r2], -r8
   130a4:	andeq	r9, r2, r0, ror r1
   130a8:	andeq	r7, r1, r4, lsl #21
   130ac:	muleq	r1, r0, sl
   130b0:	andeq	r9, r2, r8, lsl r1
   130b4:	muleq	r1, r4, sl
   130b8:	b	10ea4 <posix_fadvise64@plt>
   130bc:	cmp	r0, #0
   130c0:	bxeq	lr
   130c4:	push	{r4, lr}
   130c8:	sub	sp, sp, #16
   130cc:	mov	r4, r1
   130d0:	bl	11048 <fileno@plt>
   130d4:	mov	r2, #0
   130d8:	mov	r3, #0
   130dc:	str	r4, [sp, #8]
   130e0:	strd	r2, [sp]
   130e4:	bl	10ea4 <posix_fadvise64@plt>
   130e8:	add	sp, sp, #16
   130ec:	pop	{r4, pc}
   130f0:	push	{r4, r5, r6, lr}
   130f4:	mov	r5, r1
   130f8:	bl	110cc <fopen64@plt>
   130fc:	subs	r4, r0, #0
   13100:	beq	13110 <__assert_fail@plt+0x1ffc>
   13104:	bl	11048 <fileno@plt>
   13108:	cmp	r0, #2
   1310c:	bls	13118 <__assert_fail@plt+0x2004>
   13110:	mov	r0, r4
   13114:	pop	{r4, r5, r6, pc}
   13118:	bl	155bc <__assert_fail@plt+0x44a8>
   1311c:	subs	r6, r0, #0
   13120:	blt	13168 <__assert_fail@plt+0x2054>
   13124:	mov	r0, r4
   13128:	bl	1657c <__assert_fail@plt+0x5468>
   1312c:	cmp	r0, #0
   13130:	bne	13148 <__assert_fail@plt+0x2034>
   13134:	mov	r1, r5
   13138:	mov	r0, r6
   1313c:	bl	10e68 <fdopen@plt>
   13140:	subs	r4, r0, #0
   13144:	bne	13110 <__assert_fail@plt+0x1ffc>
   13148:	bl	11018 <__errno_location@plt>
   1314c:	mov	r4, #0
   13150:	mov	r5, r0
   13154:	mov	r0, r6
   13158:	ldr	r6, [r5]
   1315c:	bl	11108 <close@plt>
   13160:	str	r6, [r5]
   13164:	b	13110 <__assert_fail@plt+0x1ffc>
   13168:	bl	11018 <__errno_location@plt>
   1316c:	mov	r5, r0
   13170:	mov	r0, r4
   13174:	ldr	r6, [r5]
   13178:	mov	r4, #0
   1317c:	bl	1657c <__assert_fail@plt+0x5468>
   13180:	str	r6, [r5]
   13184:	b	13110 <__assert_fail@plt+0x1ffc>
   13188:	push	{r4, lr}
   1318c:	mov	r1, #0
   13190:	bl	110a8 <setlocale@plt>
   13194:	subs	r4, r0, #0
   13198:	beq	131c4 <__assert_fail@plt+0x20b0>
   1319c:	ldr	r1, [pc, #40]	; 131cc <__assert_fail@plt+0x20b8>
   131a0:	bl	10e98 <strcmp@plt>
   131a4:	cmp	r0, #0
   131a8:	popeq	{r4, pc}
   131ac:	mov	r0, r4
   131b0:	ldr	r1, [pc, #24]	; 131d0 <__assert_fail@plt+0x20bc>
   131b4:	bl	10e98 <strcmp@plt>
   131b8:	adds	r0, r0, #0
   131bc:	movne	r0, #1
   131c0:	pop	{r4, pc}
   131c4:	mov	r0, #1
   131c8:	pop	{r4, pc}
   131cc:	muleq	r1, r8, sl
   131d0:	muleq	r1, ip, sl
   131d4:	mov	r3, #0
   131d8:	str	r3, [r0]
   131dc:	str	r3, [r0, #4]
   131e0:	str	r3, [r0, #8]
   131e4:	bx	lr
   131e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131ec:	ldr	r3, [r1]
   131f0:	ldr	r9, [r0, #8]
   131f4:	ldr	fp, [r0]
   131f8:	tst	r3, #16
   131fc:	add	fp, r9, fp
   13200:	bne	132cc <__assert_fail@plt+0x21b8>
   13204:	mov	r8, r2
   13208:	mov	r7, r0
   1320c:	mov	sl, r1
   13210:	mov	r4, r9
   13214:	b	1323c <__assert_fail@plt+0x2128>
   13218:	add	r2, r3, #1
   1321c:	str	r2, [sl, #4]
   13220:	ldrb	r5, [r3]
   13224:	mov	r6, r5
   13228:	cmp	r4, fp
   1322c:	beq	13290 <__assert_fail@plt+0x217c>
   13230:	cmp	r6, r8
   13234:	strb	r5, [r4], #1
   13238:	beq	132bc <__assert_fail@plt+0x21a8>
   1323c:	ldr	r3, [sl, #4]
   13240:	ldr	r2, [sl, #8]
   13244:	cmp	r3, r2
   13248:	bcc	13218 <__assert_fail@plt+0x2104>
   1324c:	mov	r0, sl
   13250:	bl	11090 <__uflow@plt>
   13254:	cmn	r0, #1
   13258:	mov	r6, r0
   1325c:	bne	132d4 <__assert_fail@plt+0x21c0>
   13260:	cmp	r9, r4
   13264:	beq	132cc <__assert_fail@plt+0x21b8>
   13268:	ldr	r3, [sl]
   1326c:	tst	r3, #32
   13270:	bne	132cc <__assert_fail@plt+0x21b8>
   13274:	ldrb	r3, [r4, #-1]
   13278:	cmp	r3, r8
   1327c:	beq	132bc <__assert_fail@plt+0x21a8>
   13280:	cmp	r4, fp
   13284:	mov	r6, r8
   13288:	bne	132b8 <__assert_fail@plt+0x21a4>
   1328c:	mov	r5, r8
   13290:	mov	r0, r9
   13294:	mov	r1, r7
   13298:	ldr	r4, [r7]
   1329c:	bl	15c88 <__assert_fail@plt+0x4b74>
   132a0:	ldr	fp, [r7]
   132a4:	mov	r9, r0
   132a8:	add	r4, r0, r4
   132ac:	str	r0, [r7, #8]
   132b0:	add	fp, r0, fp
   132b4:	b	13230 <__assert_fail@plt+0x211c>
   132b8:	strb	r8, [r4], #1
   132bc:	sub	r4, r4, r9
   132c0:	str	r4, [r7, #4]
   132c4:	mov	r0, r7
   132c8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132cc:	mov	r0, #0
   132d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d4:	uxtb	r5, r0
   132d8:	b	13228 <__assert_fail@plt+0x2114>
   132dc:	mov	r2, #10
   132e0:	b	131e8 <__assert_fail@plt+0x20d4>
   132e4:	ldr	r0, [r0, #8]
   132e8:	b	10ebc <free@plt>
   132ec:	push	{r4, r5, r6, lr}
   132f0:	subs	r6, r2, #0
   132f4:	beq	13338 <__assert_fail@plt+0x2224>
   132f8:	mov	r4, r0
   132fc:	mov	r5, r1
   13300:	bl	10fb8 <__ctype_toupper_loc@plt>
   13304:	sub	r3, r4, #1
   13308:	add	r4, r3, r6
   1330c:	sub	r1, r5, #1
   13310:	ldr	ip, [r0]
   13314:	ldrb	lr, [r3, #1]!
   13318:	ldrb	r2, [r1, #1]!
   1331c:	ldr	r0, [ip, lr, lsl #2]
   13320:	ldr	r2, [ip, r2, lsl #2]
   13324:	subs	r0, r0, r2
   13328:	popne	{r4, r5, r6, pc}
   1332c:	cmp	r4, r3
   13330:	bne	13314 <__assert_fail@plt+0x2200>
   13334:	pop	{r4, r5, r6, pc}
   13338:	mov	r0, r6
   1333c:	pop	{r4, r5, r6, pc}
   13340:	push	{r4, r5, r6, lr}
   13344:	subs	r4, r0, #0
   13348:	beq	133bc <__assert_fail@plt+0x22a8>
   1334c:	mov	r1, #47	; 0x2f
   13350:	bl	110b4 <strrchr@plt>
   13354:	subs	r5, r0, #0
   13358:	beq	133a8 <__assert_fail@plt+0x2294>
   1335c:	add	r6, r5, #1
   13360:	sub	r3, r6, r4
   13364:	cmp	r3, #6
   13368:	ble	133a8 <__assert_fail@plt+0x2294>
   1336c:	mov	r2, #7
   13370:	ldr	r1, [pc, #96]	; 133d8 <__assert_fail@plt+0x22c4>
   13374:	sub	r0, r5, #6
   13378:	bl	110f0 <strncmp@plt>
   1337c:	cmp	r0, #0
   13380:	bne	133a8 <__assert_fail@plt+0x2294>
   13384:	mov	r2, #3
   13388:	ldr	r1, [pc, #76]	; 133dc <__assert_fail@plt+0x22c8>
   1338c:	mov	r0, r6
   13390:	bl	110f0 <strncmp@plt>
   13394:	cmp	r0, #0
   13398:	movne	r4, r6
   1339c:	ldreq	r3, [pc, #60]	; 133e0 <__assert_fail@plt+0x22cc>
   133a0:	addeq	r4, r5, #4
   133a4:	streq	r4, [r3]
   133a8:	ldr	r2, [pc, #52]	; 133e4 <__assert_fail@plt+0x22d0>
   133ac:	ldr	r3, [pc, #52]	; 133e8 <__assert_fail@plt+0x22d4>
   133b0:	str	r4, [r2]
   133b4:	str	r4, [r3]
   133b8:	pop	{r4, r5, r6, pc}
   133bc:	ldr	r3, [pc, #40]	; 133ec <__assert_fail@plt+0x22d8>
   133c0:	mov	r2, #55	; 0x37
   133c4:	mov	r1, #1
   133c8:	ldr	r3, [r3]
   133cc:	ldr	r0, [pc, #28]	; 133f0 <__assert_fail@plt+0x22dc>
   133d0:	bl	10f40 <fwrite@plt>
   133d4:	bl	110fc <abort@plt>
   133d8:	ldrdeq	r7, [r1], -ip
   133dc:	andeq	r7, r1, r4, ror #21
   133e0:	andeq	r9, r2, r0, ror #2
   133e4:	andeq	r9, r2, r0, lsl #4
   133e8:	andeq	r9, r2, r4, ror #2
   133ec:	andeq	r9, r2, r0, ror r1
   133f0:	andeq	r7, r1, r4, lsr #21
   133f4:	push	{r4, lr}
   133f8:	mov	r2, #48	; 0x30
   133fc:	mov	r4, r1
   13400:	mov	r1, #0
   13404:	bl	11030 <memset@plt>
   13408:	cmp	r4, #10
   1340c:	beq	13418 <__assert_fail@plt+0x2304>
   13410:	str	r4, [r0]
   13414:	pop	{r4, pc}
   13418:	bl	110fc <abort@plt>
   1341c:	push	{r4, r5, r6, lr}
   13420:	mov	r2, #5
   13424:	mov	r5, r0
   13428:	mov	r6, r1
   1342c:	mov	r1, r0
   13430:	mov	r0, #0
   13434:	bl	10f04 <dcgettext@plt>
   13438:	cmp	r5, r0
   1343c:	mov	r4, r0
   13440:	beq	1344c <__assert_fail@plt+0x2338>
   13444:	mov	r0, r4
   13448:	pop	{r4, r5, r6, pc}
   1344c:	bl	1695c <__assert_fail@plt+0x5848>
   13450:	ldrb	r3, [r0]
   13454:	bic	r3, r3, #32
   13458:	cmp	r3, #85	; 0x55
   1345c:	bne	134bc <__assert_fail@plt+0x23a8>
   13460:	ldrb	r3, [r0, #1]
   13464:	bic	r3, r3, #32
   13468:	cmp	r3, #84	; 0x54
   1346c:	bne	13534 <__assert_fail@plt+0x2420>
   13470:	ldrb	r3, [r0, #2]
   13474:	bic	r3, r3, #32
   13478:	cmp	r3, #70	; 0x46
   1347c:	bne	13534 <__assert_fail@plt+0x2420>
   13480:	ldrb	r3, [r0, #3]
   13484:	cmp	r3, #45	; 0x2d
   13488:	bne	13534 <__assert_fail@plt+0x2420>
   1348c:	ldrb	r3, [r0, #4]
   13490:	cmp	r3, #56	; 0x38
   13494:	bne	13534 <__assert_fail@plt+0x2420>
   13498:	ldrb	r3, [r0, #5]
   1349c:	cmp	r3, #0
   134a0:	bne	13534 <__assert_fail@plt+0x2420>
   134a4:	ldrb	r2, [r4]
   134a8:	ldr	r3, [pc, #156]	; 1354c <__assert_fail@plt+0x2438>
   134ac:	ldr	r4, [pc, #156]	; 13550 <__assert_fail@plt+0x243c>
   134b0:	cmp	r2, #96	; 0x60
   134b4:	movne	r4, r3
   134b8:	b	13444 <__assert_fail@plt+0x2330>
   134bc:	cmp	r3, #71	; 0x47
   134c0:	bne	13534 <__assert_fail@plt+0x2420>
   134c4:	ldrb	r3, [r0, #1]
   134c8:	bic	r3, r3, #32
   134cc:	cmp	r3, #66	; 0x42
   134d0:	bne	13534 <__assert_fail@plt+0x2420>
   134d4:	ldrb	r3, [r0, #2]
   134d8:	cmp	r3, #49	; 0x31
   134dc:	bne	13534 <__assert_fail@plt+0x2420>
   134e0:	ldrb	r3, [r0, #3]
   134e4:	cmp	r3, #56	; 0x38
   134e8:	bne	13534 <__assert_fail@plt+0x2420>
   134ec:	ldrb	r3, [r0, #4]
   134f0:	cmp	r3, #48	; 0x30
   134f4:	bne	13534 <__assert_fail@plt+0x2420>
   134f8:	ldrb	r3, [r0, #5]
   134fc:	cmp	r3, #51	; 0x33
   13500:	bne	13534 <__assert_fail@plt+0x2420>
   13504:	ldrb	r3, [r0, #6]
   13508:	cmp	r3, #48	; 0x30
   1350c:	bne	13534 <__assert_fail@plt+0x2420>
   13510:	ldrb	r3, [r0, #7]
   13514:	cmp	r3, #0
   13518:	bne	13534 <__assert_fail@plt+0x2420>
   1351c:	ldrb	r2, [r4]
   13520:	ldr	r3, [pc, #44]	; 13554 <__assert_fail@plt+0x2440>
   13524:	ldr	r4, [pc, #44]	; 13558 <__assert_fail@plt+0x2444>
   13528:	cmp	r2, #96	; 0x60
   1352c:	movne	r4, r3
   13530:	b	13444 <__assert_fail@plt+0x2330>
   13534:	ldr	r3, [pc, #32]	; 1355c <__assert_fail@plt+0x2448>
   13538:	ldr	r4, [pc, #32]	; 13560 <__assert_fail@plt+0x244c>
   1353c:	cmp	r6, #9
   13540:	movne	r4, r3
   13544:	mov	r0, r4
   13548:	pop	{r4, r5, r6, pc}
   1354c:	andeq	r7, r1, r0, asr #22
   13550:	andeq	r7, r1, ip, asr #22
   13554:	andeq	r7, r1, r4, asr #22
   13558:	andeq	r7, r1, r8, asr #22
   1355c:	andeq	r7, r1, r0, asr fp
   13560:	andeq	r7, r1, ip, lsr fp
   13564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13568:	sub	sp, sp, #124	; 0x7c
   1356c:	ldr	ip, [pc, #3576]	; 1436c <__assert_fail@plt+0x3258>
   13570:	str	r3, [sp, #24]
   13574:	ldr	r3, [sp, #168]	; 0xa8
   13578:	ldr	ip, [ip]
   1357c:	str	r3, [sp, #56]	; 0x38
   13580:	ldr	r3, [sp, #172]	; 0xac
   13584:	ldr	r8, [sp, #160]	; 0xa0
   13588:	str	r3, [sp, #80]	; 0x50
   1358c:	ldr	r3, [sp, #176]	; 0xb0
   13590:	mov	fp, r0
   13594:	str	r3, [sp, #76]	; 0x4c
   13598:	mov	sl, r1
   1359c:	str	r2, [sp, #36]	; 0x24
   135a0:	str	ip, [sp, #116]	; 0x74
   135a4:	bl	10f58 <__ctype_get_mb_cur_max@plt>
   135a8:	ldr	r3, [sp, #164]	; 0xa4
   135ac:	ands	r4, r3, #2
   135b0:	movne	r3, #1
   135b4:	moveq	r3, #0
   135b8:	str	r3, [sp, #32]
   135bc:	str	r0, [sp, #64]	; 0x40
   135c0:	cmp	r8, #10
   135c4:	ldrls	pc, [pc, r8, lsl #2]
   135c8:	b	14d78 <__assert_fail@plt+0x3c64>
   135cc:	andeq	r3, r1, r0, asr #19
   135d0:	andeq	r3, r1, r8, asr sl
   135d4:	andeq	r4, r1, r8, asr r0
   135d8:	andeq	r3, r1, r8, ror sl
   135dc:	andeq	r3, r1, ip, lsr #18
   135e0:	andeq	r3, r1, r4, ror r9
   135e4:	strdeq	r3, [r1], -r0
   135e8:	andeq	r3, r1, r8, lsr #20
   135ec:	strdeq	r3, [r1], -r8
   135f0:	strdeq	r3, [r1], -r8
   135f4:	strdeq	r3, [r1], -r8
   135f8:	cmp	r8, #10
   135fc:	beq	13620 <__assert_fail@plt+0x250c>
   13600:	mov	r1, r8
   13604:	ldr	r0, [pc, #3428]	; 14370 <__assert_fail@plt+0x325c>
   13608:	bl	1341c <__assert_fail@plt+0x2308>
   1360c:	mov	r1, r8
   13610:	str	r0, [sp, #80]	; 0x50
   13614:	ldr	r0, [pc, #3420]	; 14378 <__assert_fail@plt+0x3264>
   13618:	bl	1341c <__assert_fail@plt+0x2308>
   1361c:	str	r0, [sp, #76]	; 0x4c
   13620:	cmp	r4, #0
   13624:	movne	r4, #0
   13628:	beq	14a38 <__assert_fail@plt+0x3924>
   1362c:	ldr	r7, [sp, #76]	; 0x4c
   13630:	mov	r5, #0
   13634:	mov	r6, #1
   13638:	mov	r0, r7
   1363c:	str	r6, [sp, #40]	; 0x28
   13640:	str	r5, [sp, #68]	; 0x44
   13644:	bl	11000 <strlen@plt>
   13648:	str	r6, [sp, #28]
   1364c:	str	r5, [sp, #44]	; 0x2c
   13650:	str	r5, [sp, #72]	; 0x48
   13654:	str	r7, [sp, #60]	; 0x3c
   13658:	str	r0, [sp, #52]	; 0x34
   1365c:	str	r8, [sp, #160]	; 0xa0
   13660:	mov	r8, fp
   13664:	ldr	fp, [sp, #160]	; 0xa0
   13668:	mov	r9, #0
   1366c:	ldr	r3, [sp, #24]
   13670:	cmn	r3, #1
   13674:	beq	13bdc <__assert_fail@plt+0x2ac8>
   13678:	ldr	r3, [sp, #24]
   1367c:	subs	r6, r3, r9
   13680:	movne	r6, #1
   13684:	cmp	r6, #0
   13688:	beq	13bf4 <__assert_fail@plt+0x2ae0>
   1368c:	ldr	r7, [sp, #28]
   13690:	ldr	r0, [sp, #36]	; 0x24
   13694:	cmp	fp, #2
   13698:	moveq	r7, #0
   1369c:	andne	r7, r7, #1
   136a0:	add	r3, r0, r9
   136a4:	cmp	r7, #0
   136a8:	str	r3, [sp, #48]	; 0x30
   136ac:	beq	14098 <__assert_fail@plt+0x2f84>
   136b0:	ldr	r2, [sp, #52]	; 0x34
   136b4:	cmp	r2, #0
   136b8:	beq	1437c <__assert_fail@plt+0x3268>
   136bc:	ldr	r1, [sp, #24]
   136c0:	cmp	r2, #1
   136c4:	mov	r3, r2
   136c8:	movls	r3, #0
   136cc:	movhi	r3, #1
   136d0:	cmn	r1, #1
   136d4:	movne	r3, #0
   136d8:	cmp	r3, #0
   136dc:	add	r5, r9, r2
   136e0:	beq	136ec <__assert_fail@plt+0x25d8>
   136e4:	bl	11000 <strlen@plt>
   136e8:	str	r0, [sp, #24]
   136ec:	ldr	r3, [sp, #24]
   136f0:	cmp	r5, r3
   136f4:	bhi	1437c <__assert_fail@plt+0x3268>
   136f8:	ldr	r2, [sp, #52]	; 0x34
   136fc:	ldr	r1, [sp, #60]	; 0x3c
   13700:	ldr	r0, [sp, #48]	; 0x30
   13704:	bl	10ef8 <memcmp@plt>
   13708:	cmp	r0, #0
   1370c:	bne	1437c <__assert_fail@plt+0x3268>
   13710:	ldr	r3, [sp, #32]
   13714:	cmp	r3, #0
   13718:	bne	14c38 <__assert_fail@plt+0x3b24>
   1371c:	ldr	r3, [sp, #48]	; 0x30
   13720:	ldrb	r5, [r3]
   13724:	cmp	r5, #126	; 0x7e
   13728:	ldrls	pc, [pc, r5, lsl #2]
   1372c:	b	13ffc <__assert_fail@plt+0x2ee8>
   13730:	andeq	r3, r1, r8, ror #29
   13734:	strdeq	r3, [r1], -ip
   13738:	strdeq	r3, [r1], -ip
   1373c:	strdeq	r3, [r1], -ip
   13740:	strdeq	r3, [r1], -ip
   13744:	strdeq	r3, [r1], -ip
   13748:	strdeq	r3, [r1], -ip
   1374c:			; <UNDEFINED> instruction: 0x00013fb4
   13750:	andeq	r3, r1, r4, lsr #31
   13754:	andeq	r3, r1, r4, lsr #29
   13758:	andeq	r3, r1, ip, ror #28
   1375c:	andeq	r3, r1, r4, asr #29
   13760:	andeq	r3, r1, ip, lsr #29
   13764:	ldrdeq	r3, [r1], -ip
   13768:	strdeq	r3, [r1], -ip
   1376c:	strdeq	r3, [r1], -ip
   13770:	strdeq	r3, [r1], -ip
   13774:	strdeq	r3, [r1], -ip
   13778:	strdeq	r3, [r1], -ip
   1377c:	strdeq	r3, [r1], -ip
   13780:	strdeq	r3, [r1], -ip
   13784:	strdeq	r3, [r1], -ip
   13788:	strdeq	r3, [r1], -ip
   1378c:	strdeq	r3, [r1], -ip
   13790:	strdeq	r3, [r1], -ip
   13794:	strdeq	r3, [r1], -ip
   13798:	strdeq	r3, [r1], -ip
   1379c:	strdeq	r3, [r1], -ip
   137a0:	strdeq	r3, [r1], -ip
   137a4:	strdeq	r3, [r1], -ip
   137a8:	strdeq	r3, [r1], -ip
   137ac:	strdeq	r3, [r1], -ip
   137b0:			; <UNDEFINED> instruction: 0x00013fbc
   137b4:	ldrdeq	r3, [r1], -r0
   137b8:	ldrdeq	r3, [r1], -r0
   137bc:	ldrdeq	r3, [r1], -r4
   137c0:	ldrdeq	r3, [r1], -r0
   137c4:	strdeq	r3, [r1], -r0
   137c8:	ldrdeq	r3, [r1], -r0
   137cc:	andeq	r3, r1, r0, lsl sp
   137d0:	ldrdeq	r3, [r1], -r0
   137d4:	ldrdeq	r3, [r1], -r0
   137d8:	ldrdeq	r3, [r1], -r0
   137dc:	strdeq	r3, [r1], -r0
   137e0:	strdeq	r3, [r1], -r0
   137e4:	strdeq	r3, [r1], -r0
   137e8:	strdeq	r3, [r1], -r0
   137ec:	strdeq	r3, [r1], -r0
   137f0:	strdeq	r3, [r1], -r0
   137f4:	strdeq	r3, [r1], -r0
   137f8:	strdeq	r3, [r1], -r0
   137fc:	strdeq	r3, [r1], -r0
   13800:	strdeq	r3, [r1], -r0
   13804:	strdeq	r3, [r1], -r0
   13808:	strdeq	r3, [r1], -r0
   1380c:	strdeq	r3, [r1], -r0
   13810:	strdeq	r3, [r1], -r0
   13814:	strdeq	r3, [r1], -r0
   13818:	strdeq	r3, [r1], -r0
   1381c:	ldrdeq	r3, [r1], -r0
   13820:	ldrdeq	r3, [r1], -r0
   13824:	ldrdeq	r3, [r1], -r0
   13828:	ldrdeq	r3, [r1], -r0
   1382c:	andeq	r3, r1, r4, ror #25
   13830:	strdeq	r3, [r1], -ip
   13834:	strdeq	r3, [r1], -r0
   13838:	strdeq	r3, [r1], -r0
   1383c:	strdeq	r3, [r1], -r0
   13840:	strdeq	r3, [r1], -r0
   13844:	strdeq	r3, [r1], -r0
   13848:	strdeq	r3, [r1], -r0
   1384c:	strdeq	r3, [r1], -r0
   13850:	strdeq	r3, [r1], -r0
   13854:	strdeq	r3, [r1], -r0
   13858:	strdeq	r3, [r1], -r0
   1385c:	strdeq	r3, [r1], -r0
   13860:	strdeq	r3, [r1], -r0
   13864:	strdeq	r3, [r1], -r0
   13868:	strdeq	r3, [r1], -r0
   1386c:	strdeq	r3, [r1], -r0
   13870:	strdeq	r3, [r1], -r0
   13874:	strdeq	r3, [r1], -r0
   13878:	strdeq	r3, [r1], -r0
   1387c:	strdeq	r3, [r1], -r0
   13880:	strdeq	r3, [r1], -r0
   13884:	strdeq	r3, [r1], -r0
   13888:	strdeq	r3, [r1], -r0
   1388c:	strdeq	r3, [r1], -r0
   13890:	strdeq	r3, [r1], -r0
   13894:	strdeq	r3, [r1], -r0
   13898:	strdeq	r3, [r1], -r0
   1389c:	ldrdeq	r3, [r1], -r0
   138a0:	muleq	r1, ip, ip
   138a4:	strdeq	r3, [r1], -r0
   138a8:	ldrdeq	r3, [r1], -r0
   138ac:	strdeq	r3, [r1], -r0
   138b0:	ldrdeq	r3, [r1], -r0
   138b4:	strdeq	r3, [r1], -r0
   138b8:	strdeq	r3, [r1], -r0
   138bc:	strdeq	r3, [r1], -r0
   138c0:	strdeq	r3, [r1], -r0
   138c4:	strdeq	r3, [r1], -r0
   138c8:	strdeq	r3, [r1], -r0
   138cc:	strdeq	r3, [r1], -r0
   138d0:	strdeq	r3, [r1], -r0
   138d4:	strdeq	r3, [r1], -r0
   138d8:	strdeq	r3, [r1], -r0
   138dc:	strdeq	r3, [r1], -r0
   138e0:	strdeq	r3, [r1], -r0
   138e4:	strdeq	r3, [r1], -r0
   138e8:	strdeq	r3, [r1], -r0
   138ec:	strdeq	r3, [r1], -r0
   138f0:	strdeq	r3, [r1], -r0
   138f4:	strdeq	r3, [r1], -r0
   138f8:	strdeq	r3, [r1], -r0
   138fc:	strdeq	r3, [r1], -r0
   13900:	strdeq	r3, [r1], -r0
   13904:	strdeq	r3, [r1], -r0
   13908:	strdeq	r3, [r1], -r0
   1390c:	strdeq	r3, [r1], -r0
   13910:	strdeq	r3, [r1], -r0
   13914:	strdeq	r3, [r1], -r0
   13918:	strdeq	r3, [r1], -r0
   1391c:			; <UNDEFINED> instruction: 0x00013ab4
   13920:	ldrdeq	r3, [r1], -r0
   13924:			; <UNDEFINED> instruction: 0x00013ab4
   13928:	ldrdeq	r3, [r1], -r4
   1392c:	cmp	r4, #0
   13930:	moveq	r3, #1
   13934:	streq	r3, [sp, #28]
   13938:	beq	14064 <__assert_fail@plt+0x2f50>
   1393c:	mov	r3, #0
   13940:	mov	r4, r3
   13944:	mov	r2, #1
   13948:	str	r2, [sp, #40]	; 0x28
   1394c:	str	r3, [sp, #68]	; 0x44
   13950:	str	r2, [sp, #32]
   13954:	str	r2, [sp, #52]	; 0x34
   13958:	ldr	r3, [pc, #2584]	; 14378 <__assert_fail@plt+0x3264>
   1395c:	str	r4, [sp, #44]	; 0x2c
   13960:	str	r4, [sp, #72]	; 0x48
   13964:	str	r4, [sp, #28]
   13968:	str	r3, [sp, #60]	; 0x3c
   1396c:	mov	r8, #2
   13970:	b	1365c <__assert_fail@plt+0x2548>
   13974:	cmp	r4, #0
   13978:	bne	14c04 <__assert_fail@plt+0x3af0>
   1397c:	cmp	sl, #0
   13980:	beq	149c4 <__assert_fail@plt+0x38b0>
   13984:	mov	r3, #34	; 0x22
   13988:	strb	r3, [fp]
   1398c:	ldr	r3, [pc, #2528]	; 14374 <__assert_fail@plt+0x3260>
   13990:	mov	r1, r4
   13994:	mov	r2, #1
   13998:	str	r4, [sp, #68]	; 0x44
   1399c:	str	r2, [sp, #40]	; 0x28
   139a0:	mov	r4, r2
   139a4:	str	r1, [sp, #44]	; 0x2c
   139a8:	str	r1, [sp, #72]	; 0x48
   139ac:	str	r1, [sp, #32]
   139b0:	str	r2, [sp, #28]
   139b4:	str	r2, [sp, #52]	; 0x34
   139b8:	str	r3, [sp, #60]	; 0x3c
   139bc:	b	1365c <__assert_fail@plt+0x2548>
   139c0:	mov	r3, #0
   139c4:	str	r3, [sp, #68]	; 0x44
   139c8:	str	r3, [sp, #44]	; 0x2c
   139cc:	str	r3, [sp, #32]
   139d0:	str	r3, [sp, #28]
   139d4:	str	r3, [sp, #60]	; 0x3c
   139d8:	mov	r3, #1
   139dc:	str	r8, [sp, #72]	; 0x48
   139e0:	str	r8, [sp, #52]	; 0x34
   139e4:	mov	r4, r8
   139e8:	str	r3, [sp, #40]	; 0x28
   139ec:	b	1365c <__assert_fail@plt+0x2548>
   139f0:	mov	r3, #1
   139f4:	str	r3, [sp, #40]	; 0x28
   139f8:	str	r3, [sp, #32]
   139fc:	str	r3, [sp, #28]
   13a00:	str	r3, [sp, #52]	; 0x34
   13a04:	ldr	r3, [pc, #2408]	; 14374 <__assert_fail@plt+0x3260>
   13a08:	mov	r2, #0
   13a0c:	mov	r4, r2
   13a10:	str	r2, [sp, #68]	; 0x44
   13a14:	str	r2, [sp, #44]	; 0x2c
   13a18:	str	r2, [sp, #72]	; 0x48
   13a1c:	str	r3, [sp, #60]	; 0x3c
   13a20:	mov	r8, #5
   13a24:	b	1365c <__assert_fail@plt+0x2548>
   13a28:	mov	r3, #0
   13a2c:	mov	r2, #1
   13a30:	str	r2, [sp, #40]	; 0x28
   13a34:	mov	r4, r3
   13a38:	str	r3, [sp, #68]	; 0x44
   13a3c:	str	r2, [sp, #28]
   13a40:	str	r3, [sp, #44]	; 0x2c
   13a44:	str	r3, [sp, #72]	; 0x48
   13a48:	str	r3, [sp, #32]
   13a4c:	str	r3, [sp, #52]	; 0x34
   13a50:	str	r3, [sp, #60]	; 0x3c
   13a54:	b	1365c <__assert_fail@plt+0x2548>
   13a58:	mov	r2, #1
   13a5c:	mov	r3, #0
   13a60:	str	r2, [sp, #40]	; 0x28
   13a64:	mov	r4, r3
   13a68:	str	r3, [sp, #68]	; 0x44
   13a6c:	str	r8, [sp, #52]	; 0x34
   13a70:	str	r2, [sp, #32]
   13a74:	b	13958 <__assert_fail@plt+0x2844>
   13a78:	mov	r3, #1
   13a7c:	str	r3, [sp, #40]	; 0x28
   13a80:	str	r3, [sp, #32]
   13a84:	str	r3, [sp, #28]
   13a88:	str	r3, [sp, #52]	; 0x34
   13a8c:	ldr	r3, [pc, #2276]	; 14378 <__assert_fail@plt+0x3264>
   13a90:	mov	r2, #0
   13a94:	mov	r4, r2
   13a98:	str	r2, [sp, #68]	; 0x44
   13a9c:	str	r2, [sp, #44]	; 0x2c
   13aa0:	str	r2, [sp, #72]	; 0x48
   13aa4:	str	r3, [sp, #60]	; 0x3c
   13aa8:	mov	r8, #2
   13aac:	b	1365c <__assert_fail@plt+0x2548>
   13ab0:	mov	r7, #0
   13ab4:	ldr	r3, [sp, #24]
   13ab8:	cmn	r3, #1
   13abc:	beq	145f8 <__assert_fail@plt+0x34e4>
   13ac0:	ldr	r3, [sp, #24]
   13ac4:	subs	r3, r3, #1
   13ac8:	movne	r3, #1
   13acc:	cmp	r3, #0
   13ad0:	sub	r2, fp, #2
   13ad4:	clz	r2, r2
   13ad8:	lsr	r2, r2, #5
   13adc:	bne	13cd8 <__assert_fail@plt+0x2bc4>
   13ae0:	cmp	r9, #0
   13ae4:	bne	13cd8 <__assert_fail@plt+0x2bc4>
   13ae8:	ldr	r3, [sp, #32]
   13aec:	tst	r3, r2
   13af0:	bne	13df8 <__assert_fail@plt+0x2ce4>
   13af4:	ldr	r3, [sp, #28]
   13af8:	eor	r3, r3, #1
   13afc:	orr	r3, r2, r3
   13b00:	ldr	r2, [sp, #32]
   13b04:	eor	r3, r3, #1
   13b08:	orrs	r3, r2, r3
   13b0c:	beq	13b3c <__assert_fail@plt+0x2a28>
   13b10:	mov	r3, #0
   13b14:	ldr	r1, [sp, #56]	; 0x38
   13b18:	cmp	r1, #0
   13b1c:	beq	13b3c <__assert_fail@plt+0x2a28>
   13b20:	lsr	r2, r5, #5
   13b24:	and	r0, r5, #31
   13b28:	uxtb	r2, r2
   13b2c:	ldr	r1, [r1, r2, lsl #2]
   13b30:	lsr	r2, r1, r0
   13b34:	tst	r2, #1
   13b38:	bne	13b44 <__assert_fail@plt+0x2a30>
   13b3c:	cmp	r7, #0
   13b40:	beq	13d94 <__assert_fail@plt+0x2c80>
   13b44:	sub	r2, fp, #2
   13b48:	clz	r2, r2
   13b4c:	lsr	r2, r2, #5
   13b50:	ldr	r3, [sp, #32]
   13b54:	cmp	r3, #0
   13b58:	bne	13e84 <__assert_fail@plt+0x2d70>
   13b5c:	ldr	r3, [sp, #44]	; 0x2c
   13b60:	eor	r3, r3, #1
   13b64:	ands	r3, r2, r3
   13b68:	beq	13ba0 <__assert_fail@plt+0x2a8c>
   13b6c:	cmp	sl, r4
   13b70:	movhi	r2, #39	; 0x27
   13b74:	strbhi	r2, [r8, r4]
   13b78:	add	r2, r4, #1
   13b7c:	cmp	r2, sl
   13b80:	movcc	r1, #36	; 0x24
   13b84:	strbcc	r1, [r8, r2]
   13b88:	add	r2, r4, #2
   13b8c:	cmp	r2, sl
   13b90:	add	r4, r4, #3
   13b94:	movcc	r1, #39	; 0x27
   13b98:	strbcc	r1, [r8, r2]
   13b9c:	str	r3, [sp, #44]	; 0x2c
   13ba0:	cmp	r4, sl
   13ba4:	movcc	r3, #92	; 0x5c
   13ba8:	strbcc	r3, [r8, r4]
   13bac:	add	r9, r9, #1
   13bb0:	add	r4, r4, #1
   13bb4:	cmp	r4, sl
   13bb8:	ldr	r3, [sp, #40]	; 0x28
   13bbc:	strbcc	r5, [r8, r4]
   13bc0:	cmp	r6, #0
   13bc4:	moveq	r3, #0
   13bc8:	str	r3, [sp, #40]	; 0x28
   13bcc:	ldr	r3, [sp, #24]
   13bd0:	add	r4, r4, #1
   13bd4:	cmn	r3, #1
   13bd8:	bne	13678 <__assert_fail@plt+0x2564>
   13bdc:	ldr	r3, [sp, #36]	; 0x24
   13be0:	ldrb	r6, [r3, r9]
   13be4:	adds	r6, r6, #0
   13be8:	movne	r6, #1
   13bec:	cmp	r6, #0
   13bf0:	bne	1368c <__assert_fail@plt+0x2578>
   13bf4:	str	fp, [sp, #160]	; 0xa0
   13bf8:	mov	fp, r8
   13bfc:	ldr	r8, [sp, #160]	; 0xa0
   13c00:	ldr	r1, [sp, #32]
   13c04:	cmp	r4, #0
   13c08:	sub	r2, r8, #2
   13c0c:	clz	r2, r2
   13c10:	lsr	r2, r2, #5
   13c14:	andeq	r3, r2, r1
   13c18:	movne	r3, #0
   13c1c:	cmp	r3, #0
   13c20:	bne	14d0c <__assert_fail@plt+0x3bf8>
   13c24:	eor	r3, r1, #1
   13c28:	ands	r2, r2, r3
   13c2c:	beq	14c48 <__assert_fail@plt+0x3b34>
   13c30:	ldr	r3, [sp, #68]	; 0x44
   13c34:	cmp	r3, #0
   13c38:	beq	14c4c <__assert_fail@plt+0x3b38>
   13c3c:	ldr	r3, [sp, #40]	; 0x28
   13c40:	cmp	r3, #0
   13c44:	bne	14cc8 <__assert_fail@plt+0x3bb4>
   13c48:	ldr	r3, [sp, #72]	; 0x48
   13c4c:	adds	r3, r3, #0
   13c50:	movne	r3, #1
   13c54:	cmp	sl, #0
   13c58:	movne	r3, #0
   13c5c:	cmp	r3, #0
   13c60:	ldreq	r2, [sp, #68]	; 0x44
   13c64:	beq	14c4c <__assert_fail@plt+0x3b38>
   13c68:	ldr	sl, [sp, #72]	; 0x48
   13c6c:	str	r3, [sp, #68]	; 0x44
   13c70:	ldr	r3, [pc, #1792]	; 14378 <__assert_fail@plt+0x3264>
   13c74:	mov	r2, #39	; 0x27
   13c78:	mov	r4, #1
   13c7c:	str	r3, [sp, #60]	; 0x3c
   13c80:	mov	r3, #0
   13c84:	strb	r2, [fp]
   13c88:	str	r4, [sp, #52]	; 0x34
   13c8c:	mov	r8, #2
   13c90:	str	r3, [sp, #32]
   13c94:	b	1365c <__assert_fail@plt+0x2548>
   13c98:	mov	r7, #0
   13c9c:	cmp	fp, #2
   13ca0:	beq	145d8 <__assert_fail@plt+0x34c4>
   13ca4:	ldr	r3, [sp, #52]	; 0x34
   13ca8:	ldr	r2, [sp, #28]
   13cac:	ldr	r1, [sp, #32]
   13cb0:	cmp	r3, #0
   13cb4:	andne	r2, r2, r1
   13cb8:	moveq	r2, #0
   13cbc:	cmp	r2, #0
   13cc0:	moveq	r5, #92	; 0x5c
   13cc4:	moveq	r3, r5
   13cc8:	bne	145e4 <__assert_fail@plt+0x34d0>
   13ccc:	ldr	r1, [sp, #28]
   13cd0:	cmp	r1, #0
   13cd4:	bne	14d54 <__assert_fail@plt+0x3c40>
   13cd8:	mov	r6, #0
   13cdc:	b	13af4 <__assert_fail@plt+0x29e0>
   13ce0:	mov	r7, #0
   13ce4:	cmp	fp, #2
   13ce8:	beq	14648 <__assert_fail@plt+0x3534>
   13cec:	cmp	fp, #5
   13cf0:	beq	1460c <__assert_fail@plt+0x34f8>
   13cf4:	sub	r2, fp, #2
   13cf8:	mov	r6, #0
   13cfc:	clz	r2, r2
   13d00:	mov	r5, #63	; 0x3f
   13d04:	lsr	r2, r2, #5
   13d08:	b	13af4 <__assert_fail@plt+0x29e0>
   13d0c:	mov	r7, #0
   13d10:	cmp	fp, #2
   13d14:	strne	r6, [sp, #68]	; 0x44
   13d18:	movne	r2, #0
   13d1c:	movne	r5, #39	; 0x27
   13d20:	bne	13af4 <__assert_fail@plt+0x29e0>
   13d24:	ldr	r3, [sp, #32]
   13d28:	cmp	r3, #0
   13d2c:	bne	14a28 <__assert_fail@plt+0x3914>
   13d30:	cmp	sl, #0
   13d34:	ldr	r3, [sp, #72]	; 0x48
   13d38:	clz	r3, r3
   13d3c:	lsr	r3, r3, #5
   13d40:	moveq	r3, #0
   13d44:	cmp	r3, #0
   13d48:	bne	1495c <__assert_fail@plt+0x3848>
   13d4c:	cmp	sl, r4
   13d50:	movhi	r3, #39	; 0x27
   13d54:	strbhi	r3, [r8, r4]
   13d58:	add	r3, r4, #1
   13d5c:	cmp	sl, r3
   13d60:	movhi	r2, #92	; 0x5c
   13d64:	strbhi	r2, [r8, r3]
   13d68:	add	r3, r4, #2
   13d6c:	cmp	sl, r3
   13d70:	movhi	r2, #39	; 0x27
   13d74:	strbhi	r2, [r8, r3]
   13d78:	mov	r3, #0
   13d7c:	cmp	r7, #0
   13d80:	add	r4, r4, #3
   13d84:	str	r3, [sp, #44]	; 0x2c
   13d88:	str	r6, [sp, #68]	; 0x44
   13d8c:	mov	r5, #39	; 0x27
   13d90:	bne	13b44 <__assert_fail@plt+0x2a30>
   13d94:	ldr	r2, [sp, #44]	; 0x2c
   13d98:	eor	r3, r3, #1
   13d9c:	and	r3, r3, r2
   13da0:	add	r9, r9, #1
   13da4:	uxtb	r3, r3
   13da8:	cmp	r3, #0
   13dac:	beq	13bb4 <__assert_fail@plt+0x2aa0>
   13db0:	cmp	sl, r4
   13db4:	movhi	r3, #39	; 0x27
   13db8:	strbhi	r3, [r8, r4]
   13dbc:	add	r3, r4, #1
   13dc0:	cmp	sl, r3
   13dc4:	movhi	r2, #39	; 0x27
   13dc8:	strbhi	r2, [r8, r3]
   13dcc:	mov	r3, #0
   13dd0:	add	r4, r4, #2
   13dd4:	str	r3, [sp, #44]	; 0x2c
   13dd8:	b	13bb4 <__assert_fail@plt+0x2aa0>
   13ddc:	mov	r3, #114	; 0x72
   13de0:	ldr	r1, [sp, #32]
   13de4:	sub	r2, fp, #2
   13de8:	clz	r2, r2
   13dec:	lsr	r2, r2, #5
   13df0:	tst	r2, r1
   13df4:	beq	13ccc <__assert_fail@plt+0x2bb8>
   13df8:	mov	fp, r8
   13dfc:	mov	r8, #2
   13e00:	ldr	r3, [sp, #28]
   13e04:	cmp	r3, #0
   13e08:	movne	r8, #4
   13e0c:	ldr	r3, [sp, #164]	; 0xa4
   13e10:	mov	ip, #0
   13e14:	bic	r3, r3, #2
   13e18:	str	r3, [sp, #4]
   13e1c:	ldr	r3, [sp, #76]	; 0x4c
   13e20:	str	r8, [sp]
   13e24:	str	r3, [sp, #16]
   13e28:	ldr	r3, [sp, #80]	; 0x50
   13e2c:	ldr	r2, [sp, #36]	; 0x24
   13e30:	str	r3, [sp, #12]
   13e34:	mov	r1, sl
   13e38:	ldr	r3, [sp, #24]
   13e3c:	mov	r0, fp
   13e40:	str	ip, [sp, #8]
   13e44:	bl	13564 <__assert_fail@plt+0x2450>
   13e48:	mov	r4, r0
   13e4c:	ldr	r3, [pc, #1304]	; 1436c <__assert_fail@plt+0x3258>
   13e50:	ldr	r2, [sp, #116]	; 0x74
   13e54:	mov	r0, r4
   13e58:	ldr	r3, [r3]
   13e5c:	cmp	r2, r3
   13e60:	bne	14d50 <__assert_fail@plt+0x3c3c>
   13e64:	add	sp, sp, #124	; 0x7c
   13e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e6c:	mov	r5, #110	; 0x6e
   13e70:	ldr	r3, [sp, #32]
   13e74:	mov	r2, #0
   13e78:	cmp	r3, #0
   13e7c:	mov	r6, r2
   13e80:	beq	13b5c <__assert_fail@plt+0x2a48>
   13e84:	str	fp, [sp, #160]	; 0xa0
   13e88:	mov	fp, r8
   13e8c:	ldr	r8, [sp, #160]	; 0xa0
   13e90:	mov	r3, r2
   13e94:	ldr	r2, [sp, #28]
   13e98:	and	r2, r2, r3
   13e9c:	str	r2, [sp, #28]
   13ea0:	b	13e00 <__assert_fail@plt+0x2cec>
   13ea4:	mov	r5, #116	; 0x74
   13ea8:	b	13e70 <__assert_fail@plt+0x2d5c>
   13eac:	mov	r5, #102	; 0x66
   13eb0:	ldr	r3, [sp, #32]
   13eb4:	cmp	r3, #0
   13eb8:	bne	14a64 <__assert_fail@plt+0x3950>
   13ebc:	mov	r6, #0
   13ec0:	b	13ba0 <__assert_fail@plt+0x2a8c>
   13ec4:	mov	r5, #118	; 0x76
   13ec8:	b	13eb0 <__assert_fail@plt+0x2d9c>
   13ecc:	mov	r7, #0
   13ed0:	mov	r6, #0
   13ed4:	b	13b10 <__assert_fail@plt+0x29fc>
   13ed8:	ldr	r3, [sp, #32]
   13edc:	cmp	r3, #0
   13ee0:	bne	14ca8 <__assert_fail@plt+0x3b94>
   13ee4:	mov	r7, r3
   13ee8:	ldr	r3, [sp, #44]	; 0x2c
   13eec:	sub	r2, fp, #2
   13ef0:	eor	r3, r3, #1
   13ef4:	clz	r2, r2
   13ef8:	lsr	r2, r2, #5
   13efc:	ands	r3, r2, r3
   13f00:	beq	14948 <__assert_fail@plt+0x3834>
   13f04:	cmp	sl, r4
   13f08:	movhi	r1, #39	; 0x27
   13f0c:	strbhi	r1, [r8, r4]
   13f10:	add	r1, r4, #1
   13f14:	cmp	sl, r1
   13f18:	movhi	r0, #36	; 0x24
   13f1c:	strbhi	r0, [r8, r1]
   13f20:	add	r1, r4, #2
   13f24:	cmp	sl, r1
   13f28:	movhi	r0, #39	; 0x27
   13f2c:	strbhi	r0, [r8, r1]
   13f30:	add	r1, r4, #3
   13f34:	cmp	sl, r1
   13f38:	bls	149a8 <__assert_fail@plt+0x3894>
   13f3c:	mov	r4, r1
   13f40:	mov	r1, #92	; 0x5c
   13f44:	strb	r1, [r8, r4]
   13f48:	mov	r1, r4
   13f4c:	str	r3, [sp, #44]	; 0x2c
   13f50:	cmp	fp, #2
   13f54:	add	r4, r4, #1
   13f58:	beq	149f0 <__assert_fail@plt+0x38dc>
   13f5c:	ldr	r0, [sp, #24]
   13f60:	add	r3, r9, #1
   13f64:	cmp	r3, r0
   13f68:	bcs	13f80 <__assert_fail@plt+0x2e6c>
   13f6c:	ldr	r0, [sp, #36]	; 0x24
   13f70:	ldrb	r3, [r0, r3]
   13f74:	sub	r3, r3, #48	; 0x30
   13f78:	cmp	r3, #9
   13f7c:	bls	14a00 <__assert_fail@plt+0x38ec>
   13f80:	mov	r5, #48	; 0x30
   13f84:	ldr	r3, [sp, #28]
   13f88:	eor	r3, r3, #1
   13f8c:	orrs	r2, r2, r3
   13f90:	mov	r3, r6
   13f94:	moveq	r6, r2
   13f98:	beq	13b14 <__assert_fail@plt+0x2a00>
   13f9c:	mov	r6, #0
   13fa0:	b	13b3c <__assert_fail@plt+0x2a28>
   13fa4:	mov	r2, #0
   13fa8:	mov	r6, r2
   13fac:	mov	r5, #98	; 0x62
   13fb0:	b	13b5c <__assert_fail@plt+0x2a48>
   13fb4:	mov	r5, #97	; 0x61
   13fb8:	b	13ebc <__assert_fail@plt+0x2da8>
   13fbc:	mov	r3, r7
   13fc0:	mov	r6, r7
   13fc4:	mov	r2, #0
   13fc8:	mov	r7, r3
   13fcc:	mov	r5, #32
   13fd0:	b	13af4 <__assert_fail@plt+0x29e0>
   13fd4:	cmp	r9, #0
   13fd8:	mov	r3, r7
   13fdc:	bne	145a4 <__assert_fail@plt+0x3490>
   13fe0:	mov	r6, r7
   13fe4:	mov	r2, r9
   13fe8:	mov	r7, r3
   13fec:	b	13af4 <__assert_fail@plt+0x29e0>
   13ff0:	mov	r6, r7
   13ff4:	b	13b10 <__assert_fail@plt+0x29fc>
   13ff8:	mov	r7, #0
   13ffc:	ldr	r3, [sp, #64]	; 0x40
   14000:	cmp	r3, #1
   14004:	bne	14660 <__assert_fail@plt+0x354c>
   14008:	bl	10fdc <__ctype_b_loc@plt>
   1400c:	ldr	r2, [sp, #64]	; 0x40
   14010:	sxth	r3, r5
   14014:	mov	ip, r2
   14018:	lsl	r3, r3, #1
   1401c:	ldr	r2, [r0]
   14020:	ldrh	r3, [r2, r3]
   14024:	and	r3, r3, #16384	; 0x4000
   14028:	cmp	r3, #0
   1402c:	ldr	r3, [sp, #28]
   14030:	movne	r6, #1
   14034:	moveq	r6, #0
   14038:	movne	r2, #0
   1403c:	andeq	r2, r3, #1
   14040:	cmp	r2, #0
   14044:	bne	14970 <__assert_fail@plt+0x385c>
   14048:	sub	r2, fp, #2
   1404c:	clz	r2, r2
   14050:	lsr	r2, r2, #5
   14054:	b	13af4 <__assert_fail@plt+0x29e0>
   14058:	cmp	r4, #0
   1405c:	bne	14d1c <__assert_fail@plt+0x3c08>
   14060:	str	r4, [sp, #28]
   14064:	cmp	sl, #0
   14068:	bne	14d60 <__assert_fail@plt+0x3c4c>
   1406c:	ldr	r3, [pc, #772]	; 14378 <__assert_fail@plt+0x3264>
   14070:	mov	r4, #1
   14074:	str	r4, [sp, #40]	; 0x28
   14078:	str	r3, [sp, #60]	; 0x3c
   1407c:	str	r4, [sp, #52]	; 0x34
   14080:	str	sl, [sp, #72]	; 0x48
   14084:	str	sl, [sp, #68]	; 0x44
   14088:	str	sl, [sp, #44]	; 0x2c
   1408c:	str	sl, [sp, #32]
   14090:	mov	r8, #2
   14094:	b	1365c <__assert_fail@plt+0x2548>
   14098:	ldr	r3, [sp, #36]	; 0x24
   1409c:	ldrb	r5, [r3, r9]
   140a0:	cmp	r5, #126	; 0x7e
   140a4:	ldrls	pc, [pc, r5, lsl #2]
   140a8:	b	13ffc <__assert_fail@plt+0x2ee8>
   140ac:	andeq	r4, r1, r0, ror #5
   140b0:	strdeq	r3, [r1], -ip
   140b4:	strdeq	r3, [r1], -ip
   140b8:	strdeq	r3, [r1], -ip
   140bc:	strdeq	r3, [r1], -ip
   140c0:	strdeq	r3, [r1], -ip
   140c4:	strdeq	r3, [r1], -ip
   140c8:	andeq	r4, r1, ip, asr #5
   140cc:			; <UNDEFINED> instruction: 0x000142b8
   140d0:			; <UNDEFINED> instruction: 0x000142b0
   140d4:	andeq	r4, r1, r8, lsr #5
   140d8:	andeq	r4, r1, r8, asr r3
   140dc:	andeq	r4, r1, r4, asr #6
   140e0:	ldrdeq	r3, [r1], -ip
   140e4:	strdeq	r3, [r1], -ip
   140e8:	strdeq	r3, [r1], -ip
   140ec:	strdeq	r3, [r1], -ip
   140f0:	strdeq	r3, [r1], -ip
   140f4:	strdeq	r3, [r1], -ip
   140f8:	strdeq	r3, [r1], -ip
   140fc:	strdeq	r3, [r1], -ip
   14100:	strdeq	r3, [r1], -ip
   14104:	strdeq	r3, [r1], -ip
   14108:	strdeq	r3, [r1], -ip
   1410c:	strdeq	r3, [r1], -ip
   14110:	strdeq	r3, [r1], -ip
   14114:	strdeq	r3, [r1], -ip
   14118:	strdeq	r3, [r1], -ip
   1411c:	strdeq	r3, [r1], -ip
   14120:	strdeq	r3, [r1], -ip
   14124:	strdeq	r3, [r1], -ip
   14128:	strdeq	r3, [r1], -ip
   1412c:	andeq	r4, r1, r4, lsr r3
   14130:	andeq	r4, r1, r0, lsr #6
   14134:	andeq	r4, r1, r0, lsr #6
   14138:	andeq	r4, r1, r0, lsl r3
   1413c:	andeq	r4, r1, r0, lsr #6
   14140:	andeq	r4, r1, r8, asr #32
   14144:	andeq	r4, r1, r0, lsr #6
   14148:	andeq	r3, r1, r0, lsl sp
   1414c:	andeq	r4, r1, r0, lsr #6
   14150:	andeq	r4, r1, r0, lsr #6
   14154:	andeq	r4, r1, r0, lsr #6
   14158:	andeq	r4, r1, r8, asr #32
   1415c:	andeq	r4, r1, r8, asr #32
   14160:	andeq	r4, r1, r8, asr #32
   14164:	andeq	r4, r1, r8, asr #32
   14168:	andeq	r4, r1, r8, asr #32
   1416c:	andeq	r4, r1, r8, asr #32
   14170:	andeq	r4, r1, r8, asr #32
   14174:	andeq	r4, r1, r8, asr #32
   14178:	andeq	r4, r1, r8, asr #32
   1417c:	andeq	r4, r1, r8, asr #32
   14180:	andeq	r4, r1, r8, asr #32
   14184:	andeq	r4, r1, r8, asr #32
   14188:	andeq	r4, r1, r8, asr #32
   1418c:	andeq	r4, r1, r8, asr #32
   14190:	andeq	r4, r1, r8, asr #32
   14194:	andeq	r4, r1, r8, asr #32
   14198:	andeq	r4, r1, r0, lsr #6
   1419c:	andeq	r4, r1, r0, lsr #6
   141a0:	andeq	r4, r1, r0, lsr #6
   141a4:	andeq	r4, r1, r0, lsr #6
   141a8:	andeq	r3, r1, r4, ror #25
   141ac:	strdeq	r3, [r1], -ip
   141b0:	andeq	r4, r1, r8, asr #32
   141b4:	andeq	r4, r1, r8, asr #32
   141b8:	andeq	r4, r1, r8, asr #32
   141bc:	andeq	r4, r1, r8, asr #32
   141c0:	andeq	r4, r1, r8, asr #32
   141c4:	andeq	r4, r1, r8, asr #32
   141c8:	andeq	r4, r1, r8, asr #32
   141cc:	andeq	r4, r1, r8, asr #32
   141d0:	andeq	r4, r1, r8, asr #32
   141d4:	andeq	r4, r1, r8, asr #32
   141d8:	andeq	r4, r1, r8, asr #32
   141dc:	andeq	r4, r1, r8, asr #32
   141e0:	andeq	r4, r1, r8, asr #32
   141e4:	andeq	r4, r1, r8, asr #32
   141e8:	andeq	r4, r1, r8, asr #32
   141ec:	andeq	r4, r1, r8, asr #32
   141f0:	andeq	r4, r1, r8, asr #32
   141f4:	andeq	r4, r1, r8, asr #32
   141f8:	andeq	r4, r1, r8, asr #32
   141fc:	andeq	r4, r1, r8, asr #32
   14200:	andeq	r4, r1, r8, asr #32
   14204:	andeq	r4, r1, r8, asr #32
   14208:	andeq	r4, r1, r8, asr #32
   1420c:	andeq	r4, r1, r8, asr #32
   14210:	andeq	r4, r1, r8, asr #32
   14214:	andeq	r4, r1, r8, asr #32
   14218:	andeq	r4, r1, r0, lsr #6
   1421c:	muleq	r1, ip, ip
   14220:	andeq	r4, r1, r8, asr #32
   14224:	andeq	r4, r1, r0, lsr #6
   14228:	andeq	r4, r1, r8, asr #32
   1422c:	andeq	r4, r1, r0, lsr #6
   14230:	andeq	r4, r1, r8, asr #32
   14234:	andeq	r4, r1, r8, asr #32
   14238:	andeq	r4, r1, r8, asr #32
   1423c:	andeq	r4, r1, r8, asr #32
   14240:	andeq	r4, r1, r8, asr #32
   14244:	andeq	r4, r1, r8, asr #32
   14248:	andeq	r4, r1, r8, asr #32
   1424c:	andeq	r4, r1, r8, asr #32
   14250:	andeq	r4, r1, r8, asr #32
   14254:	andeq	r4, r1, r8, asr #32
   14258:	andeq	r4, r1, r8, asr #32
   1425c:	andeq	r4, r1, r8, asr #32
   14260:	andeq	r4, r1, r8, asr #32
   14264:	andeq	r4, r1, r8, asr #32
   14268:	andeq	r4, r1, r8, asr #32
   1426c:	andeq	r4, r1, r8, asr #32
   14270:	andeq	r4, r1, r8, asr #32
   14274:	andeq	r4, r1, r8, asr #32
   14278:	andeq	r4, r1, r8, asr #32
   1427c:	andeq	r4, r1, r8, asr #32
   14280:	andeq	r4, r1, r8, asr #32
   14284:	andeq	r4, r1, r8, asr #32
   14288:	andeq	r4, r1, r8, asr #32
   1428c:	andeq	r4, r1, r8, asr #32
   14290:	andeq	r4, r1, r8, asr #32
   14294:	andeq	r4, r1, r8, asr #32
   14298:			; <UNDEFINED> instruction: 0x00013ab4
   1429c:	andeq	r4, r1, r0, lsr #6
   142a0:			; <UNDEFINED> instruction: 0x00013ab4
   142a4:	andeq	r4, r1, r0, lsl r3
   142a8:	mov	r3, #110	; 0x6e
   142ac:	b	13de0 <__assert_fail@plt+0x2ccc>
   142b0:	mov	r3, #116	; 0x74
   142b4:	b	13de0 <__assert_fail@plt+0x2ccc>
   142b8:	sub	r2, fp, #2
   142bc:	mov	r3, #98	; 0x62
   142c0:	clz	r2, r2
   142c4:	lsr	r2, r2, #5
   142c8:	b	13ccc <__assert_fail@plt+0x2bb8>
   142cc:	sub	r2, fp, #2
   142d0:	mov	r3, #97	; 0x61
   142d4:	clz	r2, r2
   142d8:	lsr	r2, r2, #5
   142dc:	b	13ccc <__assert_fail@plt+0x2bb8>
   142e0:	ldr	r3, [sp, #28]
   142e4:	cmp	r3, #0
   142e8:	bne	13ed8 <__assert_fail@plt+0x2dc4>
   142ec:	ldr	r3, [sp, #164]	; 0xa4
   142f0:	tst	r3, #1
   142f4:	bne	14968 <__assert_fail@plt+0x3854>
   142f8:	ldr	r6, [sp, #28]
   142fc:	sub	r2, fp, #2
   14300:	mov	r7, r6
   14304:	clz	r2, r2
   14308:	lsr	r2, r2, #5
   1430c:	b	13af4 <__assert_fail@plt+0x29e0>
   14310:	sub	r2, fp, #2
   14314:	clz	r2, r2
   14318:	lsr	r2, r2, #5
   1431c:	b	13ae0 <__assert_fail@plt+0x29cc>
   14320:	sub	r2, fp, #2
   14324:	mov	r6, #0
   14328:	clz	r2, r2
   1432c:	lsr	r2, r2, #5
   14330:	b	13ae8 <__assert_fail@plt+0x29d4>
   14334:	sub	r2, fp, #2
   14338:	clz	r2, r2
   1433c:	lsr	r2, r2, #5
   14340:	b	13ae8 <__assert_fail@plt+0x29d4>
   14344:	sub	r2, fp, #2
   14348:	mov	r3, #102	; 0x66
   1434c:	clz	r2, r2
   14350:	lsr	r2, r2, #5
   14354:	b	13ccc <__assert_fail@plt+0x2bb8>
   14358:	sub	r2, fp, #2
   1435c:	mov	r3, #118	; 0x76
   14360:	clz	r2, r2
   14364:	lsr	r2, r2, #5
   14368:	b	13ccc <__assert_fail@plt+0x2bb8>
   1436c:	andeq	r8, r2, r8, lsl #30
   14370:	andeq	r7, r1, r4, asr fp
   14374:	andeq	r7, r1, ip, lsr fp
   14378:	andeq	r7, r1, r0, asr fp
   1437c:	ldr	r3, [sp, #48]	; 0x30
   14380:	ldrb	r5, [r3]
   14384:	cmp	r5, #126	; 0x7e
   14388:	ldrls	pc, [pc, r5, lsl #2]
   1438c:	b	13ff8 <__assert_fail@plt+0x2ee4>
   14390:	ldrdeq	r3, [r1], -r8
   14394:	strdeq	r3, [r1], -r8
   14398:	strdeq	r3, [r1], -r8
   1439c:	strdeq	r3, [r1], -r8
   143a0:	strdeq	r3, [r1], -r8
   143a4:	strdeq	r3, [r1], -r8
   143a8:	strdeq	r3, [r1], -r8
   143ac:	ldrdeq	r4, [r1], -r0
   143b0:	andeq	r4, r1, r8, asr #11
   143b4:	andeq	r3, r1, r4, lsr #29
   143b8:	andeq	r3, r1, ip, ror #28
   143bc:	andeq	r3, r1, r4, asr #29
   143c0:	andeq	r3, r1, ip, lsr #29
   143c4:			; <UNDEFINED> instruction: 0x000145bc
   143c8:	strdeq	r3, [r1], -r8
   143cc:	strdeq	r3, [r1], -r8
   143d0:	strdeq	r3, [r1], -r8
   143d4:	strdeq	r3, [r1], -r8
   143d8:	strdeq	r3, [r1], -r8
   143dc:	strdeq	r3, [r1], -r8
   143e0:	strdeq	r3, [r1], -r8
   143e4:	strdeq	r3, [r1], -r8
   143e8:	strdeq	r3, [r1], -r8
   143ec:	strdeq	r3, [r1], -r8
   143f0:	strdeq	r3, [r1], -r8
   143f4:	strdeq	r3, [r1], -r8
   143f8:	strdeq	r3, [r1], -r8
   143fc:	strdeq	r3, [r1], -r8
   14400:	strdeq	r3, [r1], -r8
   14404:	strdeq	r3, [r1], -r8
   14408:	strdeq	r3, [r1], -r8
   1440c:	strdeq	r3, [r1], -r8
   14410:			; <UNDEFINED> instruction: 0x000145b4
   14414:	andeq	r3, r1, ip, asr #29
   14418:	andeq	r3, r1, ip, asr #29
   1441c:	muleq	r1, r8, r5
   14420:	andeq	r3, r1, ip, asr #29
   14424:	andeq	r4, r1, ip, lsl #11
   14428:	andeq	r3, r1, ip, asr #29
   1442c:	andeq	r3, r1, ip, lsl #26
   14430:	andeq	r3, r1, ip, asr #29
   14434:	andeq	r3, r1, ip, asr #29
   14438:	andeq	r3, r1, ip, asr #29
   1443c:	andeq	r4, r1, ip, lsl #11
   14440:	andeq	r4, r1, ip, lsl #11
   14444:	andeq	r4, r1, ip, lsl #11
   14448:	andeq	r4, r1, ip, lsl #11
   1444c:	andeq	r4, r1, ip, lsl #11
   14450:	andeq	r4, r1, ip, lsl #11
   14454:	andeq	r4, r1, ip, lsl #11
   14458:	andeq	r4, r1, ip, lsl #11
   1445c:	andeq	r4, r1, ip, lsl #11
   14460:	andeq	r4, r1, ip, lsl #11
   14464:	andeq	r4, r1, ip, lsl #11
   14468:	andeq	r4, r1, ip, lsl #11
   1446c:	andeq	r4, r1, ip, lsl #11
   14470:	andeq	r4, r1, ip, lsl #11
   14474:	andeq	r4, r1, ip, lsl #11
   14478:	andeq	r4, r1, ip, lsl #11
   1447c:	andeq	r3, r1, ip, asr #29
   14480:	andeq	r3, r1, ip, asr #29
   14484:	andeq	r3, r1, ip, asr #29
   14488:	andeq	r3, r1, ip, asr #29
   1448c:	andeq	r3, r1, r0, ror #25
   14490:	strdeq	r3, [r1], -r8
   14494:	andeq	r4, r1, ip, lsl #11
   14498:	andeq	r4, r1, ip, lsl #11
   1449c:	andeq	r4, r1, ip, lsl #11
   144a0:	andeq	r4, r1, ip, lsl #11
   144a4:	andeq	r4, r1, ip, lsl #11
   144a8:	andeq	r4, r1, ip, lsl #11
   144ac:	andeq	r4, r1, ip, lsl #11
   144b0:	andeq	r4, r1, ip, lsl #11
   144b4:	andeq	r4, r1, ip, lsl #11
   144b8:	andeq	r4, r1, ip, lsl #11
   144bc:	andeq	r4, r1, ip, lsl #11
   144c0:	andeq	r4, r1, ip, lsl #11
   144c4:	andeq	r4, r1, ip, lsl #11
   144c8:	andeq	r4, r1, ip, lsl #11
   144cc:	andeq	r4, r1, ip, lsl #11
   144d0:	andeq	r4, r1, ip, lsl #11
   144d4:	andeq	r4, r1, ip, lsl #11
   144d8:	andeq	r4, r1, ip, lsl #11
   144dc:	andeq	r4, r1, ip, lsl #11
   144e0:	andeq	r4, r1, ip, lsl #11
   144e4:	andeq	r4, r1, ip, lsl #11
   144e8:	andeq	r4, r1, ip, lsl #11
   144ec:	andeq	r4, r1, ip, lsl #11
   144f0:	andeq	r4, r1, ip, lsl #11
   144f4:	andeq	r4, r1, ip, lsl #11
   144f8:	andeq	r4, r1, ip, lsl #11
   144fc:	andeq	r3, r1, ip, asr #29
   14500:	muleq	r1, r8, ip
   14504:	andeq	r4, r1, ip, lsl #11
   14508:	andeq	r3, r1, ip, asr #29
   1450c:	andeq	r4, r1, ip, lsl #11
   14510:	andeq	r3, r1, ip, asr #29
   14514:	andeq	r4, r1, ip, lsl #11
   14518:	andeq	r4, r1, ip, lsl #11
   1451c:	andeq	r4, r1, ip, lsl #11
   14520:	andeq	r4, r1, ip, lsl #11
   14524:	andeq	r4, r1, ip, lsl #11
   14528:	andeq	r4, r1, ip, lsl #11
   1452c:	andeq	r4, r1, ip, lsl #11
   14530:	andeq	r4, r1, ip, lsl #11
   14534:	andeq	r4, r1, ip, lsl #11
   14538:	andeq	r4, r1, ip, lsl #11
   1453c:	andeq	r4, r1, ip, lsl #11
   14540:	andeq	r4, r1, ip, lsl #11
   14544:	andeq	r4, r1, ip, lsl #11
   14548:	andeq	r4, r1, ip, lsl #11
   1454c:	andeq	r4, r1, ip, lsl #11
   14550:	andeq	r4, r1, ip, lsl #11
   14554:	andeq	r4, r1, ip, lsl #11
   14558:	andeq	r4, r1, ip, lsl #11
   1455c:	andeq	r4, r1, ip, lsl #11
   14560:	andeq	r4, r1, ip, lsl #11
   14564:	andeq	r4, r1, ip, lsl #11
   14568:	andeq	r4, r1, ip, lsl #11
   1456c:	andeq	r4, r1, ip, lsl #11
   14570:	andeq	r4, r1, ip, lsl #11
   14574:	andeq	r4, r1, ip, lsl #11
   14578:	andeq	r4, r1, ip, lsl #11
   1457c:			; <UNDEFINED> instruction: 0x00013ab0
   14580:	andeq	r3, r1, ip, asr #29
   14584:			; <UNDEFINED> instruction: 0x00013ab0
   14588:	muleq	r1, r8, r5
   1458c:	mov	r6, r7
   14590:	mov	r7, #0
   14594:	b	13b10 <__assert_fail@plt+0x29fc>
   14598:	cmp	r9, #0
   1459c:	mov	r3, #0
   145a0:	beq	13fe0 <__assert_fail@plt+0x2ecc>
   145a4:	mov	r6, #0
   145a8:	mov	r7, r3
   145ac:	mov	r3, r6
   145b0:	b	13b14 <__assert_fail@plt+0x2a00>
   145b4:	mov	r3, #0
   145b8:	b	13fc0 <__assert_fail@plt+0x2eac>
   145bc:	mov	r7, #0
   145c0:	mov	r3, #114	; 0x72
   145c4:	b	13de0 <__assert_fail@plt+0x2ccc>
   145c8:	mov	r5, #98	; 0x62
   145cc:	b	13e70 <__assert_fail@plt+0x2d5c>
   145d0:	mov	r5, #97	; 0x61
   145d4:	b	13eb0 <__assert_fail@plt+0x2d9c>
   145d8:	ldr	r3, [sp, #32]
   145dc:	cmp	r3, #0
   145e0:	bne	14a28 <__assert_fail@plt+0x3914>
   145e4:	add	r9, r9, #1
   145e8:	ldr	r3, [sp, #44]	; 0x2c
   145ec:	mov	r6, #0
   145f0:	mov	r5, #92	; 0x5c
   145f4:	b	13da8 <__assert_fail@plt+0x2c94>
   145f8:	ldr	r3, [sp, #36]	; 0x24
   145fc:	ldrb	r3, [r3, #1]
   14600:	adds	r3, r3, #0
   14604:	movne	r3, #1
   14608:	b	13acc <__assert_fail@plt+0x29b8>
   1460c:	ldr	r3, [sp, #164]	; 0xa4
   14610:	ands	r3, r3, #4
   14614:	beq	14638 <__assert_fail@plt+0x3524>
   14618:	ldr	r2, [sp, #24]
   1461c:	add	r3, r9, #2
   14620:	cmp	r3, r2
   14624:	bcs	14638 <__assert_fail@plt+0x3524>
   14628:	ldr	r2, [sp, #48]	; 0x30
   1462c:	ldrb	r5, [r2, #1]
   14630:	cmp	r5, #63	; 0x3f
   14634:	beq	14a9c <__assert_fail@plt+0x3988>
   14638:	mov	r2, #0
   1463c:	mov	r6, r2
   14640:	mov	r5, #63	; 0x3f
   14644:	b	13af4 <__assert_fail@plt+0x29e0>
   14648:	ldr	r3, [sp, #32]
   1464c:	cmp	r3, #0
   14650:	bne	14a28 <__assert_fail@plt+0x3914>
   14654:	mov	r6, r3
   14658:	mov	r5, #63	; 0x3f
   1465c:	b	13b3c <__assert_fail@plt+0x2a28>
   14660:	ldr	r3, [sp, #24]
   14664:	cmn	r3, #1
   14668:	mov	r3, #0
   1466c:	str	r3, [sp, #108]	; 0x6c
   14670:	str	r3, [sp, #112]	; 0x70
   14674:	bne	14684 <__assert_fail@plt+0x3570>
   14678:	ldr	r0, [sp, #36]	; 0x24
   1467c:	bl	11000 <strlen@plt>
   14680:	str	r0, [sp, #24]
   14684:	mov	r3, #0
   14688:	str	sl, [sp, #88]	; 0x58
   1468c:	ldr	sl, [sp, #36]	; 0x24
   14690:	str	r5, [sp, #92]	; 0x5c
   14694:	mov	r5, r3
   14698:	str	r7, [sp, #96]	; 0x60
   1469c:	str	r4, [sp, #100]	; 0x64
   146a0:	str	r8, [sp, #84]	; 0x54
   146a4:	ldr	r3, [sp, #24]
   146a8:	add	r4, r9, r5
   146ac:	add	r7, sl, r4
   146b0:	sub	r2, r3, r4
   146b4:	mov	r1, r7
   146b8:	add	r3, sp, #108	; 0x6c
   146bc:	add	r0, sp, #104	; 0x68
   146c0:	bl	16868 <__assert_fail@plt+0x5754>
   146c4:	subs	r8, r0, #0
   146c8:	beq	14718 <__assert_fail@plt+0x3604>
   146cc:	cmn	r8, #1
   146d0:	beq	14a78 <__assert_fail@plt+0x3964>
   146d4:	cmn	r8, #2
   146d8:	beq	14b98 <__assert_fail@plt+0x3a84>
   146dc:	ldr	r3, [sp, #32]
   146e0:	cmp	fp, #2
   146e4:	movne	r3, #0
   146e8:	andeq	r3, r3, #1
   146ec:	cmp	r3, #0
   146f0:	bne	14878 <__assert_fail@plt+0x3764>
   146f4:	ldr	r0, [sp, #104]	; 0x68
   146f8:	bl	10f34 <iswprint@plt>
   146fc:	add	r5, r5, r8
   14700:	cmp	r0, #0
   14704:	add	r0, sp, #108	; 0x6c
   14708:	moveq	r6, #0
   1470c:	bl	10ee0 <mbsinit@plt>
   14710:	cmp	r0, #0
   14714:	beq	146a4 <__assert_fail@plt+0x3590>
   14718:	ldr	r3, [sp, #28]
   1471c:	mov	ip, r5
   14720:	eor	r2, r6, #1
   14724:	ldr	r5, [sp, #92]	; 0x5c
   14728:	ldr	r7, [sp, #96]	; 0x60
   1472c:	ldr	r4, [sp, #100]	; 0x64
   14730:	ldr	r8, [sp, #84]	; 0x54
   14734:	ldr	sl, [sp, #88]	; 0x58
   14738:	and	r2, r2, r3
   1473c:	cmp	ip, #1
   14740:	bls	14040 <__assert_fail@plt+0x2f2c>
   14744:	add	r1, ip, r9
   14748:	ldr	lr, [sp, #48]	; 0x30
   1474c:	mov	r0, #0
   14750:	str	r6, [sp, #48]	; 0x30
   14754:	mov	ip, #39	; 0x27
   14758:	ldr	r6, [sp, #44]	; 0x2c
   1475c:	b	14814 <__assert_fail@plt+0x3700>
   14760:	ldr	r0, [sp, #32]
   14764:	sub	r3, fp, #2
   14768:	cmp	r0, #0
   1476c:	clz	r3, r3
   14770:	lsr	r3, r3, #5
   14774:	bne	1497c <__assert_fail@plt+0x3868>
   14778:	eor	r0, r6, #1
   1477c:	ands	r3, r3, r0
   14780:	beq	147b0 <__assert_fail@plt+0x369c>
   14784:	add	r0, r4, #1
   14788:	cmp	sl, r4
   1478c:	strbhi	ip, [r8, r4]
   14790:	cmp	sl, r0
   14794:	movhi	r6, #36	; 0x24
   14798:	strbhi	r6, [r8, r0]
   1479c:	add	r0, r4, #2
   147a0:	mov	r6, r3
   147a4:	add	r4, r4, #3
   147a8:	cmp	sl, r0
   147ac:	strbhi	ip, [r8, r0]
   147b0:	cmp	sl, r4
   147b4:	movhi	r3, #92	; 0x5c
   147b8:	strbhi	r3, [r8, r4]
   147bc:	add	r3, r4, #1
   147c0:	cmp	sl, r3
   147c4:	lsrhi	r0, r5, #6
   147c8:	addhi	r0, r0, #48	; 0x30
   147cc:	strbhi	r0, [r8, r3]
   147d0:	add	r0, r4, #2
   147d4:	cmp	sl, r0
   147d8:	lsrhi	r3, r5, #3
   147dc:	andhi	r3, r3, #7
   147e0:	addhi	r3, r3, #48	; 0x30
   147e4:	add	r9, r9, #1
   147e8:	strbhi	r3, [r8, r0]
   147ec:	and	r5, r5, #7
   147f0:	cmp	r9, r1
   147f4:	add	r5, r5, #48	; 0x30
   147f8:	add	r4, r4, #3
   147fc:	bcs	1499c <__assert_fail@plt+0x3888>
   14800:	mov	r0, r2
   14804:	cmp	sl, r4
   14808:	strbhi	r5, [r8, r4]
   1480c:	ldrb	r5, [lr, #1]!
   14810:	add	r4, r4, #1
   14814:	cmp	r2, #0
   14818:	bne	14760 <__assert_fail@plt+0x364c>
   1481c:	eor	r3, r0, #1
   14820:	and	r3, r3, r6
   14824:	cmp	r7, #0
   14828:	uxtb	r3, r3
   1482c:	beq	14840 <__assert_fail@plt+0x372c>
   14830:	cmp	sl, r4
   14834:	movhi	r7, #92	; 0x5c
   14838:	strbhi	r7, [r8, r4]
   1483c:	add	r4, r4, #1
   14840:	add	r9, r9, #1
   14844:	cmp	r9, r1
   14848:	bcs	14990 <__assert_fail@plt+0x387c>
   1484c:	cmp	r3, #0
   14850:	beq	149bc <__assert_fail@plt+0x38a8>
   14854:	cmp	sl, r4
   14858:	add	r3, r4, #1
   1485c:	strbhi	ip, [r8, r4]
   14860:	mov	r7, #0
   14864:	cmp	sl, r3
   14868:	strbhi	ip, [r8, r3]
   1486c:	add	r4, r4, #2
   14870:	mov	r6, r7
   14874:	b	14804 <__assert_fail@plt+0x36f0>
   14878:	cmp	r8, #1
   1487c:	beq	146f4 <__assert_fail@plt+0x35e0>
   14880:	add	r1, r4, #1
   14884:	add	r3, sl, r8
   14888:	add	r1, sl, r1
   1488c:	add	r4, r3, r4
   14890:	ldrb	r3, [r1], #1
   14894:	sub	r3, r3, #91	; 0x5b
   14898:	cmp	r3, #33	; 0x21
   1489c:	ldrls	pc, [pc, r3, lsl #2]
   148a0:	b	1492c <__assert_fail@plt+0x3818>
   148a4:	andeq	r4, r1, r8, lsr r9
   148a8:	andeq	r4, r1, r8, lsr r9
   148ac:	andeq	r4, r1, ip, lsr #18
   148b0:	andeq	r4, r1, r8, lsr r9
   148b4:	andeq	r4, r1, ip, lsr #18
   148b8:	andeq	r4, r1, r8, lsr r9
   148bc:	andeq	r4, r1, ip, lsr #18
   148c0:	andeq	r4, r1, ip, lsr #18
   148c4:	andeq	r4, r1, ip, lsr #18
   148c8:	andeq	r4, r1, ip, lsr #18
   148cc:	andeq	r4, r1, ip, lsr #18
   148d0:	andeq	r4, r1, ip, lsr #18
   148d4:	andeq	r4, r1, ip, lsr #18
   148d8:	andeq	r4, r1, ip, lsr #18
   148dc:	andeq	r4, r1, ip, lsr #18
   148e0:	andeq	r4, r1, ip, lsr #18
   148e4:	andeq	r4, r1, ip, lsr #18
   148e8:	andeq	r4, r1, ip, lsr #18
   148ec:	andeq	r4, r1, ip, lsr #18
   148f0:	andeq	r4, r1, ip, lsr #18
   148f4:	andeq	r4, r1, ip, lsr #18
   148f8:	andeq	r4, r1, ip, lsr #18
   148fc:	andeq	r4, r1, ip, lsr #18
   14900:	andeq	r4, r1, ip, lsr #18
   14904:	andeq	r4, r1, ip, lsr #18
   14908:	andeq	r4, r1, ip, lsr #18
   1490c:	andeq	r4, r1, ip, lsr #18
   14910:	andeq	r4, r1, ip, lsr #18
   14914:	andeq	r4, r1, ip, lsr #18
   14918:	andeq	r4, r1, ip, lsr #18
   1491c:	andeq	r4, r1, ip, lsr #18
   14920:	andeq	r4, r1, ip, lsr #18
   14924:	andeq	r4, r1, ip, lsr #18
   14928:	andeq	r4, r1, r8, lsr r9
   1492c:	cmp	r4, r1
   14930:	bne	14890 <__assert_fail@plt+0x377c>
   14934:	b	146f4 <__assert_fail@plt+0x35e0>
   14938:	ldr	fp, [sp, #84]	; 0x54
   1493c:	ldr	sl, [sp, #88]	; 0x58
   14940:	mov	r8, #2
   14944:	b	13e00 <__assert_fail@plt+0x2cec>
   14948:	cmp	sl, r4
   1494c:	movls	r1, r4
   14950:	bls	13f50 <__assert_fail@plt+0x2e3c>
   14954:	ldr	r3, [sp, #44]	; 0x2c
   14958:	b	13f40 <__assert_fail@plt+0x2e2c>
   1495c:	str	sl, [sp, #72]	; 0x48
   14960:	ldr	sl, [sp, #32]
   14964:	b	13d78 <__assert_fail@plt+0x2c64>
   14968:	add	r9, r9, #1
   1496c:	b	1366c <__assert_fail@plt+0x2558>
   14970:	ldr	r2, [sp, #28]
   14974:	mov	r6, #0
   14978:	b	14744 <__assert_fail@plt+0x3630>
   1497c:	str	fp, [sp, #160]	; 0xa0
   14980:	str	r3, [sp, #28]
   14984:	mov	fp, r8
   14988:	ldr	r8, [sp, #160]	; 0xa0
   1498c:	b	13e00 <__assert_fail@plt+0x2cec>
   14990:	str	r6, [sp, #44]	; 0x2c
   14994:	ldr	r6, [sp, #48]	; 0x30
   14998:	b	13da8 <__assert_fail@plt+0x2c94>
   1499c:	str	r6, [sp, #44]	; 0x2c
   149a0:	ldr	r6, [sp, #48]	; 0x30
   149a4:	b	13bb4 <__assert_fail@plt+0x2aa0>
   149a8:	add	r4, r4, #4
   149ac:	str	r3, [sp, #44]	; 0x2c
   149b0:	mov	r6, #0
   149b4:	mov	r5, #48	; 0x30
   149b8:	b	13b3c <__assert_fail@plt+0x2a28>
   149bc:	mov	r7, r3
   149c0:	b	14804 <__assert_fail@plt+0x36f0>
   149c4:	ldr	r3, [pc, #-1624]	; 14374 <__assert_fail@plt+0x3260>
   149c8:	mov	r4, #1
   149cc:	str	r4, [sp, #40]	; 0x28
   149d0:	str	r4, [sp, #28]
   149d4:	str	r4, [sp, #52]	; 0x34
   149d8:	str	sl, [sp, #72]	; 0x48
   149dc:	str	sl, [sp, #68]	; 0x44
   149e0:	str	sl, [sp, #44]	; 0x2c
   149e4:	str	sl, [sp, #32]
   149e8:	str	r3, [sp, #60]	; 0x3c
   149ec:	b	1365c <__assert_fail@plt+0x2548>
   149f0:	mov	r3, r6
   149f4:	mov	r5, #48	; 0x30
   149f8:	mov	r6, #0
   149fc:	b	13b3c <__assert_fail@plt+0x2a28>
   14a00:	cmp	sl, r4
   14a04:	movhi	r3, #48	; 0x30
   14a08:	strbhi	r3, [r8, r4]
   14a0c:	add	r3, r1, #2
   14a10:	cmp	sl, r3
   14a14:	movhi	r0, #48	; 0x30
   14a18:	strbhi	r0, [r8, r3]
   14a1c:	add	r4, r1, #3
   14a20:	mov	r5, #48	; 0x30
   14a24:	b	13f84 <__assert_fail@plt+0x2e70>
   14a28:	str	fp, [sp, #160]	; 0xa0
   14a2c:	mov	fp, r8
   14a30:	ldr	r8, [sp, #160]	; 0xa0
   14a34:	b	13e00 <__assert_fail@plt+0x2cec>
   14a38:	ldr	r2, [sp, #80]	; 0x50
   14a3c:	ldrb	r3, [r2]
   14a40:	cmp	r3, #0
   14a44:	beq	1362c <__assert_fail@plt+0x2518>
   14a48:	cmp	sl, r4
   14a4c:	strbhi	r3, [fp, r4]
   14a50:	ldrb	r3, [r2, #1]!
   14a54:	add	r4, r4, #1
   14a58:	cmp	r3, #0
   14a5c:	bne	14a48 <__assert_fail@plt+0x3934>
   14a60:	b	1362c <__assert_fail@plt+0x2518>
   14a64:	str	fp, [sp, #160]	; 0xa0
   14a68:	mov	r3, #0
   14a6c:	mov	fp, r8
   14a70:	ldr	r8, [sp, #160]	; 0xa0
   14a74:	b	13e94 <__assert_fail@plt+0x2d80>
   14a78:	mov	ip, r5
   14a7c:	ldr	r7, [sp, #96]	; 0x60
   14a80:	ldr	r5, [sp, #92]	; 0x5c
   14a84:	ldr	r4, [sp, #100]	; 0x64
   14a88:	ldr	r8, [sp, #84]	; 0x54
   14a8c:	ldr	sl, [sp, #88]	; 0x58
   14a90:	ldr	r2, [sp, #28]
   14a94:	mov	r6, #0
   14a98:	b	1473c <__assert_fail@plt+0x3628>
   14a9c:	ldr	r2, [sp, #36]	; 0x24
   14aa0:	ldrb	r1, [r2, r3]
   14aa4:	sub	r2, r1, #33	; 0x21
   14aa8:	cmp	r2, #29
   14aac:	ldrls	pc, [pc, r2, lsl #2]
   14ab0:	b	14b8c <__assert_fail@plt+0x3a78>
   14ab4:	andeq	r4, r1, ip, lsr #22
   14ab8:	andeq	r4, r1, ip, lsl #23
   14abc:	andeq	r4, r1, ip, lsl #23
   14ac0:	andeq	r4, r1, ip, lsl #23
   14ac4:	andeq	r4, r1, ip, lsl #23
   14ac8:	andeq	r4, r1, ip, lsl #23
   14acc:	andeq	r4, r1, ip, lsr #22
   14ad0:	andeq	r4, r1, ip, lsr #22
   14ad4:	andeq	r4, r1, ip, lsr #22
   14ad8:	andeq	r4, r1, ip, lsl #23
   14adc:	andeq	r4, r1, ip, lsl #23
   14ae0:	andeq	r4, r1, ip, lsl #23
   14ae4:	andeq	r4, r1, ip, lsr #22
   14ae8:	andeq	r4, r1, ip, lsl #23
   14aec:	andeq	r4, r1, ip, lsr #22
   14af0:	andeq	r4, r1, ip, lsl #23
   14af4:	andeq	r4, r1, ip, lsl #23
   14af8:	andeq	r4, r1, ip, lsl #23
   14afc:	andeq	r4, r1, ip, lsl #23
   14b00:	andeq	r4, r1, ip, lsl #23
   14b04:	andeq	r4, r1, ip, lsl #23
   14b08:	andeq	r4, r1, ip, lsl #23
   14b0c:	andeq	r4, r1, ip, lsl #23
   14b10:	andeq	r4, r1, ip, lsl #23
   14b14:	andeq	r4, r1, ip, lsl #23
   14b18:	andeq	r4, r1, ip, lsl #23
   14b1c:	andeq	r4, r1, ip, lsl #23
   14b20:	andeq	r4, r1, ip, lsr #22
   14b24:	andeq	r4, r1, ip, lsr #22
   14b28:	andeq	r4, r1, ip, lsr #22
   14b2c:	ldr	r2, [sp, #32]
   14b30:	cmp	r2, #0
   14b34:	bne	14c38 <__assert_fail@plt+0x3b24>
   14b38:	cmp	sl, r4
   14b3c:	movhi	r2, #63	; 0x3f
   14b40:	strbhi	r2, [r8, r4]
   14b44:	add	r2, r4, #1
   14b48:	cmp	sl, r2
   14b4c:	movhi	r0, #34	; 0x22
   14b50:	strbhi	r0, [r8, r2]
   14b54:	add	r2, r4, #2
   14b58:	cmp	sl, r2
   14b5c:	movhi	r0, #34	; 0x22
   14b60:	strbhi	r0, [r8, r2]
   14b64:	add	r2, r4, #3
   14b68:	cmp	sl, r2
   14b6c:	movhi	r0, #63	; 0x3f
   14b70:	strbhi	r0, [r8, r2]
   14b74:	mov	r2, #0
   14b78:	add	r4, r4, #4
   14b7c:	mov	r5, r1
   14b80:	mov	r9, r3
   14b84:	mov	r6, r2
   14b88:	b	13f84 <__assert_fail@plt+0x2e70>
   14b8c:	mov	r2, #0
   14b90:	mov	r6, r2
   14b94:	b	13af4 <__assert_fail@plt+0x29e0>
   14b98:	ldr	r0, [sp, #24]
   14b9c:	mov	r1, r4
   14ba0:	cmp	r1, r0
   14ba4:	mov	r2, r7
   14ba8:	mov	r3, r5
   14bac:	mov	ip, r5
   14bb0:	ldr	r7, [sp, #96]	; 0x60
   14bb4:	ldr	r5, [sp, #92]	; 0x5c
   14bb8:	ldr	r4, [sp, #100]	; 0x64
   14bbc:	ldr	r8, [sp, #84]	; 0x54
   14bc0:	ldr	sl, [sp, #88]	; 0x58
   14bc4:	bcs	14bf8 <__assert_fail@plt+0x3ae4>
   14bc8:	ldrb	r6, [r2]
   14bcc:	cmp	r6, #0
   14bd0:	bne	14be4 <__assert_fail@plt+0x3ad0>
   14bd4:	b	14d14 <__assert_fail@plt+0x3c00>
   14bd8:	ldrb	r6, [r2, #1]!
   14bdc:	cmp	r6, #0
   14be0:	beq	14c9c <__assert_fail@plt+0x3b88>
   14be4:	add	r3, r3, #1
   14be8:	add	r1, r9, r3
   14bec:	cmp	r1, r0
   14bf0:	bcc	14bd8 <__assert_fail@plt+0x3ac4>
   14bf4:	mov	ip, r3
   14bf8:	ldr	r2, [sp, #28]
   14bfc:	mov	r6, #0
   14c00:	b	1473c <__assert_fail@plt+0x3628>
   14c04:	mov	r3, #1
   14c08:	str	r3, [sp, #40]	; 0x28
   14c0c:	str	r3, [sp, #32]
   14c10:	str	r3, [sp, #28]
   14c14:	str	r3, [sp, #52]	; 0x34
   14c18:	ldr	r3, [pc, #-2220]	; 14374 <__assert_fail@plt+0x3260>
   14c1c:	mov	r2, #0
   14c20:	str	r2, [sp, #68]	; 0x44
   14c24:	str	r2, [sp, #44]	; 0x2c
   14c28:	str	r2, [sp, #72]	; 0x48
   14c2c:	mov	r4, r2
   14c30:	str	r3, [sp, #60]	; 0x3c
   14c34:	b	1365c <__assert_fail@plt+0x2548>
   14c38:	str	fp, [sp, #160]	; 0xa0
   14c3c:	mov	fp, r8
   14c40:	ldr	r8, [sp, #160]	; 0xa0
   14c44:	b	13e0c <__assert_fail@plt+0x2cf8>
   14c48:	mov	r2, r3
   14c4c:	ldr	r3, [sp, #60]	; 0x3c
   14c50:	cmp	r3, #0
   14c54:	moveq	r2, #0
   14c58:	andne	r2, r2, #1
   14c5c:	cmp	r2, #0
   14c60:	beq	14c8c <__assert_fail@plt+0x3b78>
   14c64:	mov	r2, r3
   14c68:	ldrb	r3, [r3]
   14c6c:	cmp	r3, #0
   14c70:	beq	14c8c <__assert_fail@plt+0x3b78>
   14c74:	cmp	sl, r4
   14c78:	strbhi	r3, [fp, r4]
   14c7c:	ldrb	r3, [r2, #1]!
   14c80:	add	r4, r4, #1
   14c84:	cmp	r3, #0
   14c88:	bne	14c74 <__assert_fail@plt+0x3b60>
   14c8c:	cmp	sl, r4
   14c90:	movhi	r3, #0
   14c94:	strbhi	r3, [fp, r4]
   14c98:	b	13e4c <__assert_fail@plt+0x2d38>
   14c9c:	mov	ip, r3
   14ca0:	ldr	r2, [sp, #28]
   14ca4:	b	1473c <__assert_fail@plt+0x3628>
   14ca8:	str	fp, [sp, #160]	; 0xa0
   14cac:	mov	fp, r8
   14cb0:	ldr	r8, [sp, #160]	; 0xa0
   14cb4:	sub	r3, r8, #2
   14cb8:	clz	r3, r3
   14cbc:	lsr	r3, r3, #5
   14cc0:	str	r3, [sp, #28]
   14cc4:	b	13e00 <__assert_fail@plt+0x2cec>
   14cc8:	ldr	r3, [sp, #76]	; 0x4c
   14ccc:	mov	ip, #5
   14cd0:	str	r3, [sp, #16]
   14cd4:	ldr	r3, [sp, #80]	; 0x50
   14cd8:	ldr	r2, [sp, #36]	; 0x24
   14cdc:	str	r3, [sp, #12]
   14ce0:	ldr	r3, [sp, #56]	; 0x38
   14ce4:	ldr	r1, [sp, #72]	; 0x48
   14ce8:	str	r3, [sp, #8]
   14cec:	ldr	r3, [sp, #164]	; 0xa4
   14cf0:	mov	r0, fp
   14cf4:	str	r3, [sp, #4]
   14cf8:	str	ip, [sp]
   14cfc:	ldr	r3, [sp, #24]
   14d00:	bl	13564 <__assert_fail@plt+0x2450>
   14d04:	mov	r4, r0
   14d08:	b	13e4c <__assert_fail@plt+0x2d38>
   14d0c:	mov	r8, #2
   14d10:	b	13e00 <__assert_fail@plt+0x2cec>
   14d14:	ldr	r2, [sp, #28]
   14d18:	b	1473c <__assert_fail@plt+0x3628>
   14d1c:	mov	r3, #0
   14d20:	str	r3, [sp, #68]	; 0x44
   14d24:	str	r3, [sp, #44]	; 0x2c
   14d28:	str	r3, [sp, #72]	; 0x48
   14d2c:	str	r3, [sp, #28]
   14d30:	mov	r4, r3
   14d34:	ldr	r3, [pc, #-2500]	; 14378 <__assert_fail@plt+0x3264>
   14d38:	mov	r2, #1
   14d3c:	str	r2, [sp, #40]	; 0x28
   14d40:	str	r2, [sp, #32]
   14d44:	str	r2, [sp, #52]	; 0x34
   14d48:	str	r3, [sp, #60]	; 0x3c
   14d4c:	b	1365c <__assert_fail@plt+0x2548>
   14d50:	bl	10f10 <__stack_chk_fail@plt>
   14d54:	mov	r5, r3
   14d58:	mov	r6, #0
   14d5c:	b	13b50 <__assert_fail@plt+0x2a3c>
   14d60:	mov	r3, #0
   14d64:	mov	r2, #1
   14d68:	str	r3, [sp, #44]	; 0x2c
   14d6c:	str	r3, [sp, #72]	; 0x48
   14d70:	str	r2, [sp, #40]	; 0x28
   14d74:	b	13c6c <__assert_fail@plt+0x2b58>
   14d78:	bl	110fc <abort@plt>
   14d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d80:	sub	sp, sp, #44	; 0x2c
   14d84:	mov	r6, r0
   14d88:	mov	r4, r3
   14d8c:	mov	sl, r1
   14d90:	mov	fp, r2
   14d94:	bl	11018 <__errno_location@plt>
   14d98:	ldr	r7, [pc, #364]	; 14f0c <__assert_fail@plt+0x3df8>
   14d9c:	cmp	r6, #0
   14da0:	ldr	r5, [r7]
   14da4:	ldr	r3, [r0]
   14da8:	str	r3, [sp, #24]
   14dac:	blt	14f08 <__assert_fail@plt+0x3df4>
   14db0:	ldr	r3, [r7, #4]
   14db4:	mov	r8, r0
   14db8:	cmp	r3, r6
   14dbc:	bgt	14e08 <__assert_fail@plt+0x3cf4>
   14dc0:	cmn	r6, #-268435454	; 0xf0000002
   14dc4:	bgt	14f04 <__assert_fail@plt+0x3df0>
   14dc8:	add	r9, r6, #1
   14dcc:	add	r3, r7, #8
   14dd0:	cmp	r5, r3
   14dd4:	lsl	r1, r9, #3
   14dd8:	beq	14ee4 <__assert_fail@plt+0x3dd0>
   14ddc:	mov	r0, r5
   14de0:	bl	15b7c <__assert_fail@plt+0x4a68>
   14de4:	mov	r5, r0
   14de8:	str	r0, [r7]
   14dec:	ldr	r0, [r7, #4]
   14df0:	mov	r1, #0
   14df4:	sub	r2, r9, r0
   14df8:	add	r0, r5, r0, lsl #3
   14dfc:	lsl	r2, r2, #3
   14e00:	bl	11030 <memset@plt>
   14e04:	str	r9, [r7, #4]
   14e08:	add	r3, r5, r6, lsl #3
   14e0c:	ldr	r1, [r4, #4]
   14e10:	ldr	r7, [r3, #4]
   14e14:	ldr	r9, [r5, r6, lsl #3]
   14e18:	ldr	r2, [r4, #40]	; 0x28
   14e1c:	ldr	ip, [r4, #44]	; 0x2c
   14e20:	str	r3, [sp, #28]
   14e24:	ldr	r3, [r4]
   14e28:	orr	r1, r1, #1
   14e2c:	add	lr, r4, #8
   14e30:	str	r1, [sp, #36]	; 0x24
   14e34:	str	r1, [sp, #4]
   14e38:	str	r2, [sp, #12]
   14e3c:	str	r3, [sp]
   14e40:	mov	r0, r7
   14e44:	mov	r1, r9
   14e48:	str	ip, [sp, #16]
   14e4c:	str	lr, [sp, #8]
   14e50:	mov	r3, fp
   14e54:	mov	r2, sl
   14e58:	str	lr, [sp, #32]
   14e5c:	bl	13564 <__assert_fail@plt+0x2450>
   14e60:	cmp	r9, r0
   14e64:	bhi	14ed0 <__assert_fail@plt+0x3dbc>
   14e68:	ldr	r3, [pc, #160]	; 14f10 <__assert_fail@plt+0x3dfc>
   14e6c:	add	r9, r0, #1
   14e70:	cmp	r7, r3
   14e74:	str	r9, [r5, r6, lsl #3]
   14e78:	beq	14e84 <__assert_fail@plt+0x3d70>
   14e7c:	mov	r0, r7
   14e80:	bl	10ebc <free@plt>
   14e84:	mov	r0, r9
   14e88:	bl	15b20 <__assert_fail@plt+0x4a0c>
   14e8c:	ldr	lr, [sp, #28]
   14e90:	ldr	ip, [r4, #44]	; 0x2c
   14e94:	ldr	r5, [r4, #40]	; 0x28
   14e98:	mov	r3, fp
   14e9c:	mov	r2, sl
   14ea0:	mov	r1, r9
   14ea4:	str	r0, [lr, #4]
   14ea8:	ldr	lr, [r4]
   14eac:	ldr	r4, [sp, #32]
   14eb0:	str	ip, [sp, #16]
   14eb4:	str	r4, [sp, #8]
   14eb8:	ldr	r4, [sp, #36]	; 0x24
   14ebc:	str	r5, [sp, #12]
   14ec0:	str	r4, [sp, #4]
   14ec4:	str	lr, [sp]
   14ec8:	mov	r7, r0
   14ecc:	bl	13564 <__assert_fail@plt+0x2450>
   14ed0:	ldr	r3, [sp, #24]
   14ed4:	mov	r0, r7
   14ed8:	str	r3, [r8]
   14edc:	add	sp, sp, #44	; 0x2c
   14ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ee4:	mov	r0, #0
   14ee8:	bl	15b7c <__assert_fail@plt+0x4a68>
   14eec:	ldr	r3, [pc, #32]	; 14f14 <__assert_fail@plt+0x3e00>
   14ef0:	mov	r5, r0
   14ef4:	ldm	r3, {r0, r1}
   14ef8:	str	r5, [r7]
   14efc:	stm	r5, {r0, r1}
   14f00:	b	14dec <__assert_fail@plt+0x3cd8>
   14f04:	bl	15d68 <__assert_fail@plt+0x4c54>
   14f08:	bl	110fc <abort@plt>
   14f0c:	andeq	r9, r2, ip, lsl r1
   14f10:	andeq	r9, r2, r4, lsl #4
   14f14:	andeq	r9, r2, r4, lsr #2
   14f18:	push	{r4, r5, r6, lr}
   14f1c:	mov	r5, r0
   14f20:	bl	11018 <__errno_location@plt>
   14f24:	cmp	r5, #0
   14f28:	mov	r1, #48	; 0x30
   14f2c:	mov	r4, r0
   14f30:	ldr	r0, [pc, #16]	; 14f48 <__assert_fail@plt+0x3e34>
   14f34:	ldr	r6, [r4]
   14f38:	movne	r0, r5
   14f3c:	bl	15d28 <__assert_fail@plt+0x4c14>
   14f40:	str	r6, [r4]
   14f44:	pop	{r4, r5, r6, pc}
   14f48:	andeq	r9, r2, r4, lsl #6
   14f4c:	ldr	r3, [pc, #12]	; 14f60 <__assert_fail@plt+0x3e4c>
   14f50:	cmp	r0, #0
   14f54:	moveq	r0, r3
   14f58:	ldr	r0, [r0]
   14f5c:	bx	lr
   14f60:	andeq	r9, r2, r4, lsl #6
   14f64:	ldr	r3, [pc, #12]	; 14f78 <__assert_fail@plt+0x3e64>
   14f68:	cmp	r0, #0
   14f6c:	moveq	r0, r3
   14f70:	str	r1, [r0]
   14f74:	bx	lr
   14f78:	andeq	r9, r2, r4, lsl #6
   14f7c:	ldr	r3, [pc, #52]	; 14fb8 <__assert_fail@plt+0x3ea4>
   14f80:	cmp	r0, #0
   14f84:	moveq	r0, r3
   14f88:	add	r3, r0, #8
   14f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   14f90:	lsr	lr, r1, #5
   14f94:	and	r1, r1, #31
   14f98:	ldr	ip, [r3, lr, lsl #2]
   14f9c:	lsr	r0, ip, r1
   14fa0:	eor	r2, r2, r0
   14fa4:	and	r2, r2, #1
   14fa8:	and	r0, r0, #1
   14fac:	eor	r1, ip, r2, lsl r1
   14fb0:	str	r1, [r3, lr, lsl #2]
   14fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fb8:	andeq	r9, r2, r4, lsl #6
   14fbc:	ldr	r3, [pc, #16]	; 14fd4 <__assert_fail@plt+0x3ec0>
   14fc0:	cmp	r0, #0
   14fc4:	movne	r3, r0
   14fc8:	ldr	r0, [r3, #4]
   14fcc:	str	r1, [r3, #4]
   14fd0:	bx	lr
   14fd4:	andeq	r9, r2, r4, lsl #6
   14fd8:	ldr	r3, [pc, #44]	; 1500c <__assert_fail@plt+0x3ef8>
   14fdc:	cmp	r0, #0
   14fe0:	moveq	r0, r3
   14fe4:	mov	ip, #10
   14fe8:	cmp	r2, #0
   14fec:	cmpne	r1, #0
   14ff0:	str	ip, [r0]
   14ff4:	beq	15004 <__assert_fail@plt+0x3ef0>
   14ff8:	str	r1, [r0, #40]	; 0x28
   14ffc:	str	r2, [r0, #44]	; 0x2c
   15000:	bx	lr
   15004:	push	{r4, lr}
   15008:	bl	110fc <abort@plt>
   1500c:	andeq	r9, r2, r4, lsl #6
   15010:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15014:	sub	sp, sp, #24
   15018:	ldr	ip, [pc, #108]	; 1508c <__assert_fail@plt+0x3f78>
   1501c:	ldr	r4, [sp, #56]	; 0x38
   15020:	mov	r9, r2
   15024:	cmp	r4, #0
   15028:	moveq	r4, ip
   1502c:	mov	sl, r3
   15030:	mov	r7, r0
   15034:	mov	r8, r1
   15038:	bl	11018 <__errno_location@plt>
   1503c:	ldr	r3, [r4, #44]	; 0x2c
   15040:	mov	r1, r8
   15044:	ldr	r6, [r0]
   15048:	str	r3, [sp, #16]
   1504c:	ldr	r2, [r4, #40]	; 0x28
   15050:	add	r3, r4, #8
   15054:	str	r3, [sp, #8]
   15058:	str	r2, [sp, #12]
   1505c:	ldr	r2, [r4, #4]
   15060:	mov	r5, r0
   15064:	str	r2, [sp, #4]
   15068:	ldr	ip, [r4]
   1506c:	mov	r3, sl
   15070:	mov	r2, r9
   15074:	mov	r0, r7
   15078:	str	ip, [sp]
   1507c:	bl	13564 <__assert_fail@plt+0x2450>
   15080:	str	r6, [r5]
   15084:	add	sp, sp, #24
   15088:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1508c:	andeq	r9, r2, r4, lsl #6
   15090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15094:	cmp	r3, #0
   15098:	sub	sp, sp, #44	; 0x2c
   1509c:	ldr	r4, [pc, #192]	; 15164 <__assert_fail@plt+0x4050>
   150a0:	mov	r6, r2
   150a4:	movne	r4, r3
   150a8:	mov	r9, r1
   150ac:	mov	r8, r0
   150b0:	bl	11018 <__errno_location@plt>
   150b4:	ldr	r3, [r4, #44]	; 0x2c
   150b8:	ldr	r5, [r4, #4]
   150bc:	add	sl, r4, #8
   150c0:	cmp	r6, #0
   150c4:	orreq	r5, r5, #1
   150c8:	mov	r1, #0
   150cc:	ldr	r2, [r0]
   150d0:	str	r3, [sp, #16]
   150d4:	ldr	r3, [r4, #40]	; 0x28
   150d8:	stmib	sp, {r5, sl}
   150dc:	str	r3, [sp, #12]
   150e0:	ldr	r3, [r4]
   150e4:	mov	r7, r0
   150e8:	str	r2, [sp, #28]
   150ec:	str	r3, [sp]
   150f0:	mov	r2, r8
   150f4:	mov	r3, r9
   150f8:	mov	r0, r1
   150fc:	bl	13564 <__assert_fail@plt+0x2450>
   15100:	add	r1, r0, #1
   15104:	mov	fp, r0
   15108:	mov	r0, r1
   1510c:	str	r1, [sp, #36]	; 0x24
   15110:	bl	15b20 <__assert_fail@plt+0x4a0c>
   15114:	ldr	r3, [r4, #44]	; 0x2c
   15118:	mov	r2, r8
   1511c:	str	r3, [sp, #16]
   15120:	ldr	r3, [r4, #40]	; 0x28
   15124:	str	r5, [sp, #4]
   15128:	str	r3, [sp, #12]
   1512c:	str	sl, [sp, #8]
   15130:	ldr	ip, [r4]
   15134:	ldr	r1, [sp, #36]	; 0x24
   15138:	mov	r3, r9
   1513c:	str	ip, [sp]
   15140:	str	r0, [sp, #32]
   15144:	bl	13564 <__assert_fail@plt+0x2450>
   15148:	ldr	r2, [sp, #28]
   1514c:	cmp	r6, #0
   15150:	str	r2, [r7]
   15154:	ldr	r0, [sp, #32]
   15158:	strne	fp, [r6]
   1515c:	add	sp, sp, #44	; 0x2c
   15160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15164:	andeq	r9, r2, r4, lsl #6
   15168:	mov	r3, r2
   1516c:	mov	r2, #0
   15170:	b	15090 <__assert_fail@plt+0x3f7c>
   15174:	push	{r4, r5, r6, r7, r8, lr}
   15178:	ldr	r6, [pc, #112]	; 151f0 <__assert_fail@plt+0x40dc>
   1517c:	ldr	r3, [r6, #4]
   15180:	ldr	r7, [r6]
   15184:	cmp	r3, #1
   15188:	ble	151ac <__assert_fail@plt+0x4098>
   1518c:	sub	r5, r7, #8
   15190:	add	r5, r5, r3, lsl #3
   15194:	mov	r4, r7
   15198:	ldr	r0, [r4, #12]
   1519c:	add	r4, r4, #8
   151a0:	bl	10ebc <free@plt>
   151a4:	cmp	r4, r5
   151a8:	bne	15198 <__assert_fail@plt+0x4084>
   151ac:	ldr	r0, [r7, #4]
   151b0:	ldr	r4, [pc, #60]	; 151f4 <__assert_fail@plt+0x40e0>
   151b4:	cmp	r0, r4
   151b8:	beq	151cc <__assert_fail@plt+0x40b8>
   151bc:	bl	10ebc <free@plt>
   151c0:	mov	r3, #256	; 0x100
   151c4:	str	r4, [r6, #12]
   151c8:	str	r3, [r6, #8]
   151cc:	ldr	r4, [pc, #36]	; 151f8 <__assert_fail@plt+0x40e4>
   151d0:	cmp	r7, r4
   151d4:	beq	151e4 <__assert_fail@plt+0x40d0>
   151d8:	mov	r0, r7
   151dc:	bl	10ebc <free@plt>
   151e0:	str	r4, [r6]
   151e4:	mov	r3, #1
   151e8:	str	r3, [r6, #4]
   151ec:	pop	{r4, r5, r6, r7, r8, pc}
   151f0:	andeq	r9, r2, ip, lsl r1
   151f4:	andeq	r9, r2, r4, lsl #4
   151f8:	andeq	r9, r2, r4, lsr #2
   151fc:	ldr	r3, [pc, #4]	; 15208 <__assert_fail@plt+0x40f4>
   15200:	mvn	r2, #0
   15204:	b	14d7c <__assert_fail@plt+0x3c68>
   15208:	andeq	r9, r2, r4, lsl #6
   1520c:	ldr	r3, [pc]	; 15214 <__assert_fail@plt+0x4100>
   15210:	b	14d7c <__assert_fail@plt+0x3c68>
   15214:	andeq	r9, r2, r4, lsl #6
   15218:	mov	r1, r0
   1521c:	ldr	r3, [pc, #8]	; 1522c <__assert_fail@plt+0x4118>
   15220:	mvn	r2, #0
   15224:	mov	r0, #0
   15228:	b	14d7c <__assert_fail@plt+0x3c68>
   1522c:	andeq	r9, r2, r4, lsl #6
   15230:	mov	r2, r1
   15234:	ldr	r3, [pc, #8]	; 15244 <__assert_fail@plt+0x4130>
   15238:	mov	r1, r0
   1523c:	mov	r0, #0
   15240:	b	14d7c <__assert_fail@plt+0x3c68>
   15244:	andeq	r9, r2, r4, lsl #6
   15248:	push	{r4, r5, r6, lr}
   1524c:	sub	sp, sp, #56	; 0x38
   15250:	ldr	r4, [pc, #68]	; 1529c <__assert_fail@plt+0x4188>
   15254:	mov	r6, r2
   15258:	mov	r5, r0
   1525c:	ldr	r3, [r4]
   15260:	add	r0, sp, #4
   15264:	str	r3, [sp, #52]	; 0x34
   15268:	bl	133f4 <__assert_fail@plt+0x22e0>
   1526c:	add	r3, sp, #4
   15270:	mvn	r2, #0
   15274:	mov	r1, r6
   15278:	mov	r0, r5
   1527c:	bl	14d7c <__assert_fail@plt+0x3c68>
   15280:	ldr	r2, [sp, #52]	; 0x34
   15284:	ldr	r3, [r4]
   15288:	cmp	r2, r3
   1528c:	bne	15298 <__assert_fail@plt+0x4184>
   15290:	add	sp, sp, #56	; 0x38
   15294:	pop	{r4, r5, r6, pc}
   15298:	bl	10f10 <__stack_chk_fail@plt>
   1529c:	andeq	r8, r2, r8, lsl #30
   152a0:	push	{r4, r5, r6, r7, lr}
   152a4:	sub	sp, sp, #60	; 0x3c
   152a8:	ldr	r4, [pc, #72]	; 152f8 <__assert_fail@plt+0x41e4>
   152ac:	mov	r6, r2
   152b0:	mov	r7, r3
   152b4:	ldr	ip, [r4]
   152b8:	mov	r5, r0
   152bc:	add	r0, sp, #4
   152c0:	str	ip, [sp, #52]	; 0x34
   152c4:	bl	133f4 <__assert_fail@plt+0x22e0>
   152c8:	add	r3, sp, #4
   152cc:	mov	r2, r7
   152d0:	mov	r1, r6
   152d4:	mov	r0, r5
   152d8:	bl	14d7c <__assert_fail@plt+0x3c68>
   152dc:	ldr	r2, [sp, #52]	; 0x34
   152e0:	ldr	r3, [r4]
   152e4:	cmp	r2, r3
   152e8:	bne	152f4 <__assert_fail@plt+0x41e0>
   152ec:	add	sp, sp, #60	; 0x3c
   152f0:	pop	{r4, r5, r6, r7, pc}
   152f4:	bl	10f10 <__stack_chk_fail@plt>
   152f8:	andeq	r8, r2, r8, lsl #30
   152fc:	mov	r2, r1
   15300:	mov	r1, r0
   15304:	mov	r0, #0
   15308:	b	15248 <__assert_fail@plt+0x4134>
   1530c:	mov	r3, r2
   15310:	mov	r2, r1
   15314:	mov	r1, r0
   15318:	mov	r0, #0
   1531c:	b	152a0 <__assert_fail@plt+0x418c>
   15320:	push	{r4, r5, r6, r7, r8, r9, lr}
   15324:	mov	r4, r2
   15328:	ldr	lr, [pc, #128]	; 153b0 <__assert_fail@plt+0x429c>
   1532c:	mov	r8, r0
   15330:	mov	r9, r1
   15334:	ldm	lr!, {r0, r1, r2, r3}
   15338:	sub	sp, sp, #60	; 0x3c
   1533c:	add	ip, sp, #4
   15340:	lsr	r6, r4, #5
   15344:	stmia	ip!, {r0, r1, r2, r3}
   15348:	add	r7, sp, #12
   1534c:	ldm	lr!, {r0, r1, r2, r3}
   15350:	and	r4, r4, #31
   15354:	ldr	r5, [pc, #88]	; 153b4 <__assert_fail@plt+0x42a0>
   15358:	stmia	ip!, {r0, r1, r2, r3}
   1535c:	ldm	lr, {r0, r1, r2, r3}
   15360:	stm	ip, {r0, r1, r2, r3}
   15364:	mov	r2, r9
   15368:	ldr	r3, [r7, r6, lsl #2]
   1536c:	ldr	ip, [r5]
   15370:	mov	r1, r8
   15374:	mvn	r0, r3, lsr r4
   15378:	and	r0, r0, #1
   1537c:	str	ip, [sp, #52]	; 0x34
   15380:	eor	r4, r3, r0, lsl r4
   15384:	add	r3, sp, #4
   15388:	mov	r0, #0
   1538c:	str	r4, [r7, r6, lsl #2]
   15390:	bl	14d7c <__assert_fail@plt+0x3c68>
   15394:	ldr	r2, [sp, #52]	; 0x34
   15398:	ldr	r3, [r5]
   1539c:	cmp	r2, r3
   153a0:	bne	153ac <__assert_fail@plt+0x4298>
   153a4:	add	sp, sp, #60	; 0x3c
   153a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153ac:	bl	10f10 <__stack_chk_fail@plt>
   153b0:	andeq	r9, r2, r4, lsl #6
   153b4:	andeq	r8, r2, r8, lsl #30
   153b8:	mov	r2, r1
   153bc:	mvn	r1, #0
   153c0:	b	15320 <__assert_fail@plt+0x420c>
   153c4:	mov	r2, #58	; 0x3a
   153c8:	mvn	r1, #0
   153cc:	b	15320 <__assert_fail@plt+0x420c>
   153d0:	mov	r2, #58	; 0x3a
   153d4:	b	15320 <__assert_fail@plt+0x420c>
   153d8:	push	{r4, r5, r6, r7, r8, lr}
   153dc:	sub	sp, sp, #104	; 0x68
   153e0:	ldr	r5, [pc, #120]	; 15460 <__assert_fail@plt+0x434c>
   153e4:	mov	r6, r0
   153e8:	mov	r0, sp
   153ec:	ldr	r3, [r5]
   153f0:	mov	r7, r2
   153f4:	str	r3, [sp, #100]	; 0x64
   153f8:	bl	133f4 <__assert_fail@plt+0x22e0>
   153fc:	mov	ip, sp
   15400:	add	lr, sp, #52	; 0x34
   15404:	ldm	ip!, {r0, r1, r2, r3}
   15408:	stmia	lr!, {r0, r1, r2, r3}
   1540c:	ldm	ip!, {r0, r1, r2, r3}
   15410:	ldr	r8, [sp, #64]	; 0x40
   15414:	stmia	lr!, {r0, r1, r2, r3}
   15418:	mvn	r4, r8
   1541c:	ldm	ip, {r0, r1, r2, r3}
   15420:	and	ip, r4, #67108864	; 0x4000000
   15424:	eor	ip, ip, r8
   15428:	str	ip, [sp, #64]	; 0x40
   1542c:	stm	lr, {r0, r1, r2, r3}
   15430:	add	r3, sp, #52	; 0x34
   15434:	mvn	r2, #0
   15438:	mov	r1, r7
   1543c:	mov	r0, r6
   15440:	bl	14d7c <__assert_fail@plt+0x3c68>
   15444:	ldr	r2, [sp, #100]	; 0x64
   15448:	ldr	r3, [r5]
   1544c:	cmp	r2, r3
   15450:	bne	1545c <__assert_fail@plt+0x4348>
   15454:	add	sp, sp, #104	; 0x68
   15458:	pop	{r4, r5, r6, r7, r8, pc}
   1545c:	bl	10f10 <__stack_chk_fail@plt>
   15460:	andeq	r8, r2, r8, lsl #30
   15464:	push	{r4, r5, r6, r7, r8, r9, lr}
   15468:	mov	r6, r1
   1546c:	ldr	lr, [pc, #132]	; 154f8 <__assert_fail@plt+0x43e4>
   15470:	mov	r5, r2
   15474:	mov	r8, r0
   15478:	mov	r9, r3
   1547c:	ldm	lr!, {r0, r1, r2, r3}
   15480:	sub	sp, sp, #60	; 0x3c
   15484:	add	ip, sp, #4
   15488:	ldr	r4, [pc, #108]	; 154fc <__assert_fail@plt+0x43e8>
   1548c:	stmia	ip!, {r0, r1, r2, r3}
   15490:	mov	r7, #10
   15494:	ldm	lr!, {r0, r1, r2, r3}
   15498:	cmp	r5, #0
   1549c:	cmpne	r6, #0
   154a0:	str	r7, [sp, #4]
   154a4:	stmia	ip!, {r0, r1, r2, r3}
   154a8:	ldm	lr, {r0, r1, r2, r3}
   154ac:	ldr	lr, [r4]
   154b0:	stm	ip, {r0, r1, r2, r3}
   154b4:	str	lr, [sp, #52]	; 0x34
   154b8:	beq	154f4 <__assert_fail@plt+0x43e0>
   154bc:	add	r3, sp, #4
   154c0:	ldr	r2, [sp, #88]	; 0x58
   154c4:	mov	r1, r9
   154c8:	mov	r0, r8
   154cc:	str	r6, [sp, #44]	; 0x2c
   154d0:	str	r5, [sp, #48]	; 0x30
   154d4:	bl	14d7c <__assert_fail@plt+0x3c68>
   154d8:	ldr	r2, [sp, #52]	; 0x34
   154dc:	ldr	r3, [r4]
   154e0:	cmp	r2, r3
   154e4:	bne	154f0 <__assert_fail@plt+0x43dc>
   154e8:	add	sp, sp, #60	; 0x3c
   154ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   154f0:	bl	10f10 <__stack_chk_fail@plt>
   154f4:	bl	110fc <abort@plt>
   154f8:	andeq	r9, r2, r4, lsl #6
   154fc:	andeq	r8, r2, r8, lsl #30
   15500:	push	{lr}		; (str lr, [sp, #-4]!)
   15504:	sub	sp, sp, #12
   15508:	mvn	ip, #0
   1550c:	str	ip, [sp]
   15510:	bl	15464 <__assert_fail@plt+0x4350>
   15514:	add	sp, sp, #12
   15518:	pop	{pc}		; (ldr pc, [sp], #4)
   1551c:	push	{lr}		; (str lr, [sp, #-4]!)
   15520:	sub	sp, sp, #12
   15524:	mvn	ip, #0
   15528:	mov	r3, r2
   1552c:	str	ip, [sp]
   15530:	mov	r2, r1
   15534:	mov	r1, r0
   15538:	mov	r0, #0
   1553c:	bl	15464 <__assert_fail@plt+0x4350>
   15540:	add	sp, sp, #12
   15544:	pop	{pc}		; (ldr pc, [sp], #4)
   15548:	push	{lr}		; (str lr, [sp, #-4]!)
   1554c:	sub	sp, sp, #12
   15550:	str	r3, [sp]
   15554:	mov	r3, r2
   15558:	mov	r2, r1
   1555c:	mov	r1, r0
   15560:	mov	r0, #0
   15564:	bl	15464 <__assert_fail@plt+0x4350>
   15568:	add	sp, sp, #12
   1556c:	pop	{pc}		; (ldr pc, [sp], #4)
   15570:	ldr	r3, [pc]	; 15578 <__assert_fail@plt+0x4464>
   15574:	b	14d7c <__assert_fail@plt+0x3c68>
   15578:	andeq	r9, r2, ip, lsr #2
   1557c:	mov	r2, r1
   15580:	ldr	r3, [pc, #8]	; 15590 <__assert_fail@plt+0x447c>
   15584:	mov	r1, r0
   15588:	mov	r0, #0
   1558c:	b	14d7c <__assert_fail@plt+0x3c68>
   15590:	andeq	r9, r2, ip, lsr #2
   15594:	ldr	r3, [pc, #4]	; 155a0 <__assert_fail@plt+0x448c>
   15598:	mvn	r2, #0
   1559c:	b	14d7c <__assert_fail@plt+0x3c68>
   155a0:	andeq	r9, r2, ip, lsr #2
   155a4:	mov	r1, r0
   155a8:	ldr	r3, [pc, #8]	; 155b8 <__assert_fail@plt+0x44a4>
   155ac:	mvn	r2, #0
   155b0:	mov	r0, #0
   155b4:	b	14d7c <__assert_fail@plt+0x3c68>
   155b8:	andeq	r9, r2, ip, lsr #2
   155bc:	mov	r2, #3
   155c0:	mov	r1, #0
   155c4:	b	1661c <__assert_fail@plt+0x5508>
   155c8:	push	{r4, r5, r6, lr}
   155cc:	sub	sp, sp, #32
   155d0:	cmp	r1, #0
   155d4:	mov	r5, r0
   155d8:	ldr	r4, [sp, #48]	; 0x30
   155dc:	ldr	r6, [sp, #52]	; 0x34
   155e0:	beq	15670 <__assert_fail@plt+0x455c>
   155e4:	strd	r2, [sp]
   155e8:	mov	r3, r1
   155ec:	ldr	r2, [pc, #828]	; 15930 <__assert_fail@plt+0x481c>
   155f0:	mov	r1, #1
   155f4:	bl	11054 <__fprintf_chk@plt>
   155f8:	mov	r2, #5
   155fc:	ldr	r1, [pc, #816]	; 15934 <__assert_fail@plt+0x4820>
   15600:	mov	r0, #0
   15604:	bl	10f04 <dcgettext@plt>
   15608:	ldr	r3, [pc, #808]	; 15938 <__assert_fail@plt+0x4824>
   1560c:	ldr	r2, [pc, #808]	; 1593c <__assert_fail@plt+0x4828>
   15610:	str	r3, [sp]
   15614:	mov	r1, #1
   15618:	mov	r3, r0
   1561c:	mov	r0, r5
   15620:	bl	11054 <__fprintf_chk@plt>
   15624:	ldr	r1, [pc, #788]	; 15940 <__assert_fail@plt+0x482c>
   15628:	mov	r2, #5
   1562c:	mov	r0, #0
   15630:	bl	10f04 <dcgettext@plt>
   15634:	mov	r1, r5
   15638:	bl	10e80 <fputs_unlocked@plt>
   1563c:	cmp	r6, #9
   15640:	ldrls	pc, [pc, r6, lsl #2]
   15644:	b	15920 <__assert_fail@plt+0x480c>
   15648:	andeq	r5, r1, ip, lsr #18
   1564c:	strdeq	r5, [r1], -r4
   15650:	andeq	r5, r1, r0, lsr #14
   15654:	andeq	r5, r1, r4, asr r7
   15658:	muleq	r1, r0, r7
   1565c:	ldrdeq	r5, [r1], -r0
   15660:	andeq	r5, r1, r8, lsl r8
   15664:	andeq	r5, r1, r8, ror #16
   15668:	andeq	r5, r1, r0, asr #17
   1566c:	andeq	r5, r1, r8, lsl #13
   15670:	str	r3, [sp]
   15674:	mov	r1, #1
   15678:	mov	r3, r2
   1567c:	ldr	r2, [pc, #704]	; 15944 <__assert_fail@plt+0x4830>
   15680:	bl	11054 <__fprintf_chk@plt>
   15684:	b	155f8 <__assert_fail@plt+0x44e4>
   15688:	ldr	r1, [pc, #696]	; 15948 <__assert_fail@plt+0x4834>
   1568c:	mov	r2, #5
   15690:	mov	r0, #0
   15694:	bl	10f04 <dcgettext@plt>
   15698:	ldr	r2, [r4, #32]
   1569c:	ldr	r3, [r4, #28]
   156a0:	ldr	r1, [r4, #24]
   156a4:	str	r2, [sp, #28]
   156a8:	ldr	r2, [r4, #20]
   156ac:	str	r3, [sp, #24]
   156b0:	ldr	r3, [r4, #16]
   156b4:	str	r1, [sp, #20]
   156b8:	ldr	r1, [r4, #12]
   156bc:	str	r2, [sp, #16]
   156c0:	ldr	r2, [r4, #8]
   156c4:	str	r3, [sp, #12]
   156c8:	ldr	r3, [r4, #4]
   156cc:	str	r1, [sp, #8]
   156d0:	str	r2, [sp, #4]
   156d4:	str	r3, [sp]
   156d8:	mov	r1, #1
   156dc:	ldr	r3, [r4]
   156e0:	mov	r2, r0
   156e4:	mov	r0, r5
   156e8:	bl	11054 <__fprintf_chk@plt>
   156ec:	add	sp, sp, #32
   156f0:	pop	{r4, r5, r6, pc}
   156f4:	mov	r2, #5
   156f8:	ldr	r1, [pc, #588]	; 1594c <__assert_fail@plt+0x4838>
   156fc:	mov	r0, #0
   15700:	bl	10f04 <dcgettext@plt>
   15704:	ldr	r3, [r4]
   15708:	mov	r1, #1
   1570c:	mov	r2, r0
   15710:	mov	r0, r5
   15714:	add	sp, sp, #32
   15718:	pop	{r4, r5, r6, lr}
   1571c:	b	11054 <__fprintf_chk@plt>
   15720:	mov	r2, #5
   15724:	ldr	r1, [pc, #548]	; 15950 <__assert_fail@plt+0x483c>
   15728:	mov	r0, #0
   1572c:	bl	10f04 <dcgettext@plt>
   15730:	ldr	r2, [r4, #4]
   15734:	ldr	r3, [r4]
   15738:	mov	r1, #1
   1573c:	str	r2, [sp, #48]	; 0x30
   15740:	mov	r2, r0
   15744:	mov	r0, r5
   15748:	add	sp, sp, #32
   1574c:	pop	{r4, r5, r6, lr}
   15750:	b	11054 <__fprintf_chk@plt>
   15754:	mov	r2, #5
   15758:	ldr	r1, [pc, #500]	; 15954 <__assert_fail@plt+0x4840>
   1575c:	mov	r0, #0
   15760:	bl	10f04 <dcgettext@plt>
   15764:	ldr	r2, [r4, #8]
   15768:	ldr	r3, [r4, #4]
   1576c:	mov	r1, #1
   15770:	str	r2, [sp, #52]	; 0x34
   15774:	str	r3, [sp, #48]	; 0x30
   15778:	ldr	r3, [r4]
   1577c:	mov	r2, r0
   15780:	mov	r0, r5
   15784:	add	sp, sp, #32
   15788:	pop	{r4, r5, r6, lr}
   1578c:	b	11054 <__fprintf_chk@plt>
   15790:	mov	r2, #5
   15794:	ldr	r1, [pc, #444]	; 15958 <__assert_fail@plt+0x4844>
   15798:	mov	r0, #0
   1579c:	bl	10f04 <dcgettext@plt>
   157a0:	ldr	r1, [r4, #12]
   157a4:	ldr	r2, [r4, #8]
   157a8:	ldr	r3, [r4, #4]
   157ac:	str	r1, [sp, #8]
   157b0:	str	r2, [sp, #4]
   157b4:	str	r3, [sp]
   157b8:	mov	r1, #1
   157bc:	ldr	r3, [r4]
   157c0:	mov	r2, r0
   157c4:	mov	r0, r5
   157c8:	bl	11054 <__fprintf_chk@plt>
   157cc:	b	156ec <__assert_fail@plt+0x45d8>
   157d0:	mov	r2, #5
   157d4:	ldr	r1, [pc, #384]	; 1595c <__assert_fail@plt+0x4848>
   157d8:	mov	r0, #0
   157dc:	bl	10f04 <dcgettext@plt>
   157e0:	ldr	r3, [r4, #16]
   157e4:	ldr	r1, [r4, #12]
   157e8:	ldr	r2, [r4, #8]
   157ec:	str	r3, [sp, #12]
   157f0:	ldr	r3, [r4, #4]
   157f4:	str	r1, [sp, #8]
   157f8:	str	r2, [sp, #4]
   157fc:	str	r3, [sp]
   15800:	mov	r1, #1
   15804:	ldr	r3, [r4]
   15808:	mov	r2, r0
   1580c:	mov	r0, r5
   15810:	bl	11054 <__fprintf_chk@plt>
   15814:	b	156ec <__assert_fail@plt+0x45d8>
   15818:	mov	r2, #5
   1581c:	ldr	r1, [pc, #316]	; 15960 <__assert_fail@plt+0x484c>
   15820:	mov	r0, #0
   15824:	bl	10f04 <dcgettext@plt>
   15828:	ldr	r2, [r4, #20]
   1582c:	ldr	r3, [r4, #16]
   15830:	ldr	r1, [r4, #12]
   15834:	str	r2, [sp, #16]
   15838:	ldr	r2, [r4, #8]
   1583c:	str	r3, [sp, #12]
   15840:	ldr	r3, [r4, #4]
   15844:	str	r1, [sp, #8]
   15848:	str	r2, [sp, #4]
   1584c:	str	r3, [sp]
   15850:	mov	r1, #1
   15854:	ldr	r3, [r4]
   15858:	mov	r2, r0
   1585c:	mov	r0, r5
   15860:	bl	11054 <__fprintf_chk@plt>
   15864:	b	156ec <__assert_fail@plt+0x45d8>
   15868:	mov	r2, #5
   1586c:	ldr	r1, [pc, #240]	; 15964 <__assert_fail@plt+0x4850>
   15870:	mov	r0, #0
   15874:	bl	10f04 <dcgettext@plt>
   15878:	ldr	r1, [r4, #24]
   1587c:	ldr	r2, [r4, #20]
   15880:	ldr	r3, [r4, #16]
   15884:	str	r1, [sp, #20]
   15888:	ldr	r1, [r4, #12]
   1588c:	str	r2, [sp, #16]
   15890:	ldr	r2, [r4, #8]
   15894:	str	r3, [sp, #12]
   15898:	ldr	r3, [r4, #4]
   1589c:	str	r1, [sp, #8]
   158a0:	str	r2, [sp, #4]
   158a4:	str	r3, [sp]
   158a8:	mov	r1, #1
   158ac:	ldr	r3, [r4]
   158b0:	mov	r2, r0
   158b4:	mov	r0, r5
   158b8:	bl	11054 <__fprintf_chk@plt>
   158bc:	b	156ec <__assert_fail@plt+0x45d8>
   158c0:	mov	r2, #5
   158c4:	ldr	r1, [pc, #156]	; 15968 <__assert_fail@plt+0x4854>
   158c8:	mov	r0, #0
   158cc:	bl	10f04 <dcgettext@plt>
   158d0:	ldr	r3, [r4, #28]
   158d4:	ldr	r1, [r4, #24]
   158d8:	ldr	r2, [r4, #20]
   158dc:	str	r3, [sp, #24]
   158e0:	ldr	r3, [r4, #16]
   158e4:	str	r1, [sp, #20]
   158e8:	ldr	r1, [r4, #12]
   158ec:	str	r2, [sp, #16]
   158f0:	ldr	r2, [r4, #8]
   158f4:	str	r3, [sp, #12]
   158f8:	ldr	r3, [r4, #4]
   158fc:	str	r1, [sp, #8]
   15900:	str	r2, [sp, #4]
   15904:	str	r3, [sp]
   15908:	mov	r1, #1
   1590c:	ldr	r3, [r4]
   15910:	mov	r2, r0
   15914:	mov	r0, r5
   15918:	bl	11054 <__fprintf_chk@plt>
   1591c:	b	156ec <__assert_fail@plt+0x45d8>
   15920:	mov	r2, #5
   15924:	ldr	r1, [pc, #64]	; 1596c <__assert_fail@plt+0x4858>
   15928:	b	15690 <__assert_fail@plt+0x457c>
   1592c:	bl	110fc <abort@plt>
   15930:			; <UNDEFINED> instruction: 0x00017bbc
   15934:	ldrdeq	r7, [r1], -r0
   15938:	andeq	r0, r0, r2, ror #15
   1593c:	andeq	r7, r1, r4, lsr #29
   15940:	ldrdeq	r7, [r1], -r4
   15944:	andeq	r7, r1, r8, asr #23
   15948:	andeq	r7, r1, ip, lsr #27
   1594c:	andeq	r7, r1, r0, lsr #25
   15950:			; <UNDEFINED> instruction: 0x00017cb0
   15954:	andeq	r7, r1, r8, asr #25
   15958:	andeq	r7, r1, r4, ror #25
   1595c:	andeq	r7, r1, r4, lsl #26
   15960:	andeq	r7, r1, r8, lsr #26
   15964:	andeq	r7, r1, r0, asr sp
   15968:	andeq	r7, r1, ip, ror sp
   1596c:	andeq	r7, r1, r0, ror #27
   15970:	push	{r4, r5, lr}
   15974:	sub	sp, sp, #12
   15978:	ldr	r5, [sp, #24]
   1597c:	ldr	ip, [r5]
   15980:	cmp	ip, #0
   15984:	beq	159a0 <__assert_fail@plt+0x488c>
   15988:	mov	lr, r5
   1598c:	mov	ip, #0
   15990:	ldr	r4, [lr, #4]!
   15994:	add	ip, ip, #1
   15998:	cmp	r4, #0
   1599c:	bne	15990 <__assert_fail@plt+0x487c>
   159a0:	stm	sp, {r5, ip}
   159a4:	bl	155c8 <__assert_fail@plt+0x44b4>
   159a8:	add	sp, sp, #12
   159ac:	pop	{r4, r5, pc}
   159b0:	push	{r4, r5, r6, lr}
   159b4:	sub	sp, sp, #56	; 0x38
   159b8:	ldr	r6, [pc, #88]	; 15a18 <__assert_fail@plt+0x4904>
   159bc:	ldr	r5, [sp, #72]	; 0x48
   159c0:	add	r4, sp, #8
   159c4:	ldr	ip, [r6]
   159c8:	str	ip, [sp, #52]	; 0x34
   159cc:	mov	ip, #0
   159d0:	ldr	lr, [r5], #4
   159d4:	cmp	lr, #0
   159d8:	str	lr, [r4, #4]!
   159dc:	beq	159ec <__assert_fail@plt+0x48d8>
   159e0:	add	ip, ip, #1
   159e4:	cmp	ip, #10
   159e8:	bne	159d0 <__assert_fail@plt+0x48bc>
   159ec:	add	lr, sp, #12
   159f0:	str	ip, [sp, #4]
   159f4:	str	lr, [sp]
   159f8:	bl	155c8 <__assert_fail@plt+0x44b4>
   159fc:	ldr	r2, [sp, #52]	; 0x34
   15a00:	ldr	r3, [r6]
   15a04:	cmp	r2, r3
   15a08:	bne	15a14 <__assert_fail@plt+0x4900>
   15a0c:	add	sp, sp, #56	; 0x38
   15a10:	pop	{r4, r5, r6, pc}
   15a14:	bl	10f10 <__stack_chk_fail@plt>
   15a18:	andeq	r8, r2, r8, lsl #30
   15a1c:	push	{r3}		; (str r3, [sp, #-4]!)
   15a20:	mov	ip, #0
   15a24:	push	{r4, r5, r6, lr}
   15a28:	sub	sp, sp, #60	; 0x3c
   15a2c:	ldr	r6, [pc, #100]	; 15a98 <__assert_fail@plt+0x4984>
   15a30:	add	r5, sp, #8
   15a34:	add	r4, sp, #80	; 0x50
   15a38:	ldr	r3, [r6]
   15a3c:	str	r4, [sp, #8]
   15a40:	str	r3, [sp, #52]	; 0x34
   15a44:	ldr	r3, [sp, #76]	; 0x4c
   15a48:	ldr	lr, [r4], #4
   15a4c:	cmp	lr, #0
   15a50:	str	lr, [r5, #4]!
   15a54:	beq	15a64 <__assert_fail@plt+0x4950>
   15a58:	add	ip, ip, #1
   15a5c:	cmp	ip, #10
   15a60:	bne	15a48 <__assert_fail@plt+0x4934>
   15a64:	add	lr, sp, #12
   15a68:	str	ip, [sp, #4]
   15a6c:	str	lr, [sp]
   15a70:	bl	155c8 <__assert_fail@plt+0x44b4>
   15a74:	ldr	r2, [sp, #52]	; 0x34
   15a78:	ldr	r3, [r6]
   15a7c:	cmp	r2, r3
   15a80:	bne	15a94 <__assert_fail@plt+0x4980>
   15a84:	add	sp, sp, #60	; 0x3c
   15a88:	pop	{r4, r5, r6, lr}
   15a8c:	add	sp, sp, #4
   15a90:	bx	lr
   15a94:	bl	10f10 <__stack_chk_fail@plt>
   15a98:	andeq	r8, r2, r8, lsl #30
   15a9c:	push	{r4, lr}
   15aa0:	mov	r2, #5
   15aa4:	ldr	r1, [pc, #88]	; 15b04 <__assert_fail@plt+0x49f0>
   15aa8:	mov	r0, #0
   15aac:	bl	10f04 <dcgettext@plt>
   15ab0:	ldr	r2, [pc, #80]	; 15b08 <__assert_fail@plt+0x49f4>
   15ab4:	mov	r1, r0
   15ab8:	mov	r0, #1
   15abc:	bl	1103c <__printf_chk@plt>
   15ac0:	mov	r2, #5
   15ac4:	ldr	r1, [pc, #64]	; 15b0c <__assert_fail@plt+0x49f8>
   15ac8:	mov	r0, #0
   15acc:	bl	10f04 <dcgettext@plt>
   15ad0:	ldr	r3, [pc, #56]	; 15b10 <__assert_fail@plt+0x49fc>
   15ad4:	ldr	r2, [pc, #56]	; 15b14 <__assert_fail@plt+0x4a00>
   15ad8:	mov	r1, r0
   15adc:	mov	r0, #1
   15ae0:	bl	1103c <__printf_chk@plt>
   15ae4:	ldr	r1, [pc, #44]	; 15b18 <__assert_fail@plt+0x4a04>
   15ae8:	mov	r2, #5
   15aec:	mov	r0, #0
   15af0:	bl	10f04 <dcgettext@plt>
   15af4:	ldr	r3, [pc, #32]	; 15b1c <__assert_fail@plt+0x4a08>
   15af8:	pop	{r4, lr}
   15afc:	ldr	r1, [r3]
   15b00:	b	10e80 <fputs_unlocked@plt>
   15b04:	andeq	r7, r1, ip, lsl lr
   15b08:	andeq	r7, r1, r4, lsr lr
   15b0c:	andeq	r7, r1, ip, asr #28
   15b10:	andeq	r7, r1, r4, ror #15
   15b14:	andeq	r7, r1, ip, lsl #16
   15b18:	andeq	r7, r1, r0, ror #28
   15b1c:	andeq	r9, r2, ip, ror r1
   15b20:	push	{r4, lr}
   15b24:	mov	r4, r0
   15b28:	bl	10f94 <malloc@plt>
   15b2c:	adds	r4, r4, #0
   15b30:	movne	r4, #1
   15b34:	cmp	r0, #0
   15b38:	movne	r4, #0
   15b3c:	cmp	r4, #0
   15b40:	popeq	{r4, pc}
   15b44:	bl	15d68 <__assert_fail@plt+0x4c54>
   15b48:	push	{r4, r5, r6, lr}
   15b4c:	umull	r4, r5, r0, r1
   15b50:	adds	r3, r5, #0
   15b54:	movne	r3, #1
   15b58:	cmp	r4, #0
   15b5c:	blt	15b74 <__assert_fail@plt+0x4a60>
   15b60:	cmp	r3, #0
   15b64:	bne	15b74 <__assert_fail@plt+0x4a60>
   15b68:	mul	r0, r1, r0
   15b6c:	pop	{r4, r5, r6, lr}
   15b70:	b	15b20 <__assert_fail@plt+0x4a0c>
   15b74:	bl	15d68 <__assert_fail@plt+0x4c54>
   15b78:	b	15b20 <__assert_fail@plt+0x4a0c>
   15b7c:	adds	r3, r0, #0
   15b80:	movne	r3, #1
   15b84:	cmp	r1, #0
   15b88:	movne	r3, #0
   15b8c:	cmp	r3, #0
   15b90:	push	{r4, lr}
   15b94:	bne	15bbc <__assert_fail@plt+0x4aa8>
   15b98:	mov	r4, r1
   15b9c:	bl	10f1c <realloc@plt>
   15ba0:	adds	r4, r4, #0
   15ba4:	movne	r4, #1
   15ba8:	cmp	r0, #0
   15bac:	movne	r4, #0
   15bb0:	cmp	r4, #0
   15bb4:	popeq	{r4, pc}
   15bb8:	bl	15d68 <__assert_fail@plt+0x4c54>
   15bbc:	bl	10ebc <free@plt>
   15bc0:	mov	r0, #0
   15bc4:	pop	{r4, pc}
   15bc8:	push	{r4, r5, r6, lr}
   15bcc:	umull	r4, r5, r1, r2
   15bd0:	adds	r3, r5, #0
   15bd4:	movne	r3, #1
   15bd8:	cmp	r4, #0
   15bdc:	blt	15bf4 <__assert_fail@plt+0x4ae0>
   15be0:	cmp	r3, #0
   15be4:	bne	15bf4 <__assert_fail@plt+0x4ae0>
   15be8:	mul	r1, r2, r1
   15bec:	pop	{r4, r5, r6, lr}
   15bf0:	b	15b7c <__assert_fail@plt+0x4a68>
   15bf4:	bl	15d68 <__assert_fail@plt+0x4c54>
   15bf8:	push	{r4, r5, r6, r7, r8, lr}
   15bfc:	subs	r7, r0, #0
   15c00:	mov	r6, r1
   15c04:	mov	r5, r2
   15c08:	ldr	r4, [r1]
   15c0c:	beq	15c40 <__assert_fail@plt+0x4b2c>
   15c10:	mov	r1, r2
   15c14:	ldr	r0, [pc, #104]	; 15c84 <__assert_fail@plt+0x4b70>
   15c18:	bl	16afc <__assert_fail@plt+0x59e8>
   15c1c:	cmp	r0, r4
   15c20:	bls	15c64 <__assert_fail@plt+0x4b50>
   15c24:	add	r3, r4, #1
   15c28:	add	r4, r3, r4, lsr #1
   15c2c:	str	r4, [r6]
   15c30:	mul	r1, r5, r4
   15c34:	mov	r0, r7
   15c38:	pop	{r4, r5, r6, r7, r8, lr}
   15c3c:	b	15b7c <__assert_fail@plt+0x4a68>
   15c40:	cmp	r4, #0
   15c44:	beq	15c68 <__assert_fail@plt+0x4b54>
   15c48:	umull	r0, r1, r4, r5
   15c4c:	adds	r3, r1, #0
   15c50:	movne	r3, #1
   15c54:	cmp	r0, #0
   15c58:	blt	15c64 <__assert_fail@plt+0x4b50>
   15c5c:	cmp	r3, #0
   15c60:	beq	15c2c <__assert_fail@plt+0x4b18>
   15c64:	bl	15d68 <__assert_fail@plt+0x4c54>
   15c68:	mov	r1, r2
   15c6c:	mov	r0, #64	; 0x40
   15c70:	bl	16afc <__assert_fail@plt+0x59e8>
   15c74:	cmp	r5, #64	; 0x40
   15c78:	movls	r4, r0
   15c7c:	addhi	r4, r0, #1
   15c80:	b	15c48 <__assert_fail@plt+0x4b34>
   15c84:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   15c88:	cmp	r0, #0
   15c8c:	ldr	r3, [r1]
   15c90:	beq	15cb4 <__assert_fail@plt+0x4ba0>
   15c94:	ldr	r2, [pc, #60]	; 15cd8 <__assert_fail@plt+0x4bc4>
   15c98:	cmp	r3, r2
   15c9c:	bhi	15cd0 <__assert_fail@plt+0x4bbc>
   15ca0:	add	r2, r3, #1
   15ca4:	add	r3, r2, r3, lsr #1
   15ca8:	str	r3, [r1]
   15cac:	mov	r1, r3
   15cb0:	b	15b7c <__assert_fail@plt+0x4a68>
   15cb4:	cmp	r3, #0
   15cb8:	bne	15ccc <__assert_fail@plt+0x4bb8>
   15cbc:	mov	r3, #64	; 0x40
   15cc0:	str	r3, [r1]
   15cc4:	mov	r1, r3
   15cc8:	b	15b7c <__assert_fail@plt+0x4a68>
   15ccc:	bge	15ca8 <__assert_fail@plt+0x4b94>
   15cd0:	push	{r4, lr}
   15cd4:	bl	15d68 <__assert_fail@plt+0x4c54>
   15cd8:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   15cdc:	push	{r4, lr}
   15ce0:	mov	r4, r0
   15ce4:	bl	15b20 <__assert_fail@plt+0x4a0c>
   15ce8:	mov	r2, r4
   15cec:	mov	r1, #0
   15cf0:	pop	{r4, lr}
   15cf4:	b	11030 <memset@plt>
   15cf8:	push	{r4, r5, r6, lr}
   15cfc:	umull	r4, r5, r0, r1
   15d00:	adds	r3, r5, #0
   15d04:	movne	r3, #1
   15d08:	cmp	r4, #0
   15d0c:	blt	15d24 <__assert_fail@plt+0x4c10>
   15d10:	cmp	r3, #0
   15d14:	bne	15d24 <__assert_fail@plt+0x4c10>
   15d18:	bl	10e74 <calloc@plt>
   15d1c:	cmp	r0, #0
   15d20:	popne	{r4, r5, r6, pc}
   15d24:	bl	15d68 <__assert_fail@plt+0x4c54>
   15d28:	push	{r4, r5, r6, lr}
   15d2c:	mov	r4, r1
   15d30:	mov	r5, r0
   15d34:	mov	r0, r1
   15d38:	bl	15b20 <__assert_fail@plt+0x4a0c>
   15d3c:	mov	r2, r4
   15d40:	mov	r1, r5
   15d44:	pop	{r4, r5, r6, lr}
   15d48:	b	10ed4 <memcpy@plt>
   15d4c:	push	{r4, lr}
   15d50:	mov	r4, r0
   15d54:	bl	11000 <strlen@plt>
   15d58:	add	r1, r0, #1
   15d5c:	mov	r0, r4
   15d60:	pop	{r4, lr}
   15d64:	b	15d28 <__assert_fail@plt+0x4c14>
   15d68:	ldr	r3, [pc, #44]	; 15d9c <__assert_fail@plt+0x4c88>
   15d6c:	push	{r4, lr}
   15d70:	mov	r2, #5
   15d74:	ldr	r1, [pc, #36]	; 15da0 <__assert_fail@plt+0x4c8c>
   15d78:	mov	r0, #0
   15d7c:	ldr	r4, [r3]
   15d80:	bl	10f04 <dcgettext@plt>
   15d84:	ldr	r2, [pc, #24]	; 15da4 <__assert_fail@plt+0x4c90>
   15d88:	mov	r1, #0
   15d8c:	mov	r3, r0
   15d90:	mov	r0, r4
   15d94:	bl	10f7c <error@plt>
   15d98:	bl	110fc <abort@plt>
   15d9c:	andeq	r9, r2, r8, lsl r1
   15da0:	ldrdeq	r7, [r1], -r4
   15da4:	muleq	r1, r4, sl
   15da8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15dac:	mov	r4, r0
   15db0:	mov	r6, r1
   15db4:	mov	r9, r2
   15db8:	ldr	r1, [pc, #164]	; 15e64 <__assert_fail@plt+0x4d50>
   15dbc:	mov	r2, #5
   15dc0:	mov	r0, #0
   15dc4:	mov	r7, r3
   15dc8:	ldr	r8, [sp, #32]
   15dcc:	bl	10f04 <dcgettext@plt>
   15dd0:	mov	r1, r4
   15dd4:	mov	r2, r0
   15dd8:	mov	r0, #0
   15ddc:	bl	10f7c <error@plt>
   15de0:	mov	r2, #5
   15de4:	ldr	r1, [pc, #124]	; 15e68 <__assert_fail@plt+0x4d54>
   15de8:	mov	r0, #0
   15dec:	bl	10f04 <dcgettext@plt>
   15df0:	mov	r1, #0
   15df4:	mov	r2, r0
   15df8:	mov	r0, r1
   15dfc:	bl	10f7c <error@plt>
   15e00:	ldr	r3, [pc, #100]	; 15e6c <__assert_fail@plt+0x4d58>
   15e04:	mov	r2, #5
   15e08:	ldr	r1, [pc, #96]	; 15e70 <__assert_fail@plt+0x4d5c>
   15e0c:	mov	r0, #0
   15e10:	ldr	r4, [r3]
   15e14:	bl	10f04 <dcgettext@plt>
   15e18:	mov	r3, r9
   15e1c:	mov	r2, r6
   15e20:	mov	r1, #8
   15e24:	mov	r5, r0
   15e28:	mov	r0, #0
   15e2c:	bl	152a0 <__assert_fail@plt+0x418c>
   15e30:	mov	r3, r8
   15e34:	mov	r2, r7
   15e38:	mov	r1, #8
   15e3c:	mov	r6, r0
   15e40:	mov	r0, #1
   15e44:	bl	152a0 <__assert_fail@plt+0x418c>
   15e48:	mov	r3, r6
   15e4c:	mov	r2, r5
   15e50:	mov	r1, #0
   15e54:	str	r0, [sp, #32]
   15e58:	mov	r0, r4
   15e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e60:	b	10f7c <error@plt>
   15e64:	andeq	r7, r1, r8, ror #29
   15e68:	andeq	r7, r1, r4, lsl #30
   15e6c:	andeq	r9, r2, r8, lsl r1
   15e70:	andeq	r7, r1, r0, lsr pc
   15e74:	push	{r4, r5, r6, r7, r8, lr}
   15e78:	sub	sp, sp, #8
   15e7c:	mov	r6, r1
   15e80:	mov	r7, r2
   15e84:	mov	r8, r3
   15e88:	mov	r5, r0
   15e8c:	bl	16a28 <__assert_fail@plt+0x5914>
   15e90:	mov	r4, r0
   15e94:	bl	11018 <__errno_location@plt>
   15e98:	ldr	r0, [r0]
   15e9c:	cmp	r0, #0
   15ea0:	bne	15eb0 <__assert_fail@plt+0x4d9c>
   15ea4:	mov	r0, r4
   15ea8:	add	sp, sp, #8
   15eac:	pop	{r4, r5, r6, r7, r8, pc}
   15eb0:	str	r8, [sp]
   15eb4:	mov	r3, r7
   15eb8:	mov	r2, r6
   15ebc:	mov	r1, r5
   15ec0:	bl	15da8 <__assert_fail@plt+0x4c94>
   15ec4:	mov	r0, r4
   15ec8:	add	sp, sp, #8
   15ecc:	pop	{r4, r5, r6, r7, r8, pc}
   15ed0:	push	{r4, r5, r6, r7, r8, lr}
   15ed4:	sub	sp, sp, #8
   15ed8:	mov	r7, r1
   15edc:	mov	r8, r2
   15ee0:	mov	r5, r3
   15ee4:	mov	r6, r0
   15ee8:	bl	16aa4 <__assert_fail@plt+0x5990>
   15eec:	mov	r4, r0
   15ef0:	bl	11018 <__errno_location@plt>
   15ef4:	ldr	r0, [r0]
   15ef8:	cmp	r0, #0
   15efc:	bne	15f0c <__assert_fail@plt+0x4df8>
   15f00:	mov	r0, r4
   15f04:	add	sp, sp, #8
   15f08:	pop	{r4, r5, r6, r7, r8, pc}
   15f0c:	sub	r5, r5, #1
   15f10:	str	r5, [sp]
   15f14:	mov	r3, r8
   15f18:	sub	r2, r7, #1
   15f1c:	mov	r1, r6
   15f20:	bl	15da8 <__assert_fail@plt+0x4c94>
   15f24:	mov	r0, r4
   15f28:	add	sp, sp, #8
   15f2c:	pop	{r4, r5, r6, r7, r8, pc}
   15f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f34:	cmp	r2, #36	; 0x24
   15f38:	ldr	r7, [pc, #1580]	; 1656c <__assert_fail@plt+0x5458>
   15f3c:	sub	sp, sp, #20
   15f40:	mov	fp, r2
   15f44:	ldr	r2, [r7]
   15f48:	ldr	r9, [sp, #56]	; 0x38
   15f4c:	str	r2, [sp, #12]
   15f50:	bhi	16554 <__assert_fail@plt+0x5440>
   15f54:	cmp	r1, #0
   15f58:	mov	r6, r1
   15f5c:	mov	r5, r0
   15f60:	mov	sl, r3
   15f64:	addeq	r6, sp, #8
   15f68:	bl	11018 <__errno_location@plt>
   15f6c:	mov	r3, #0
   15f70:	str	r3, [r0]
   15f74:	mov	r8, r0
   15f78:	bl	10fdc <__ctype_b_loc@plt>
   15f7c:	ldrb	r3, [r5]
   15f80:	mov	r1, r5
   15f84:	ldr	ip, [r0]
   15f88:	b	15f90 <__assert_fail@plt+0x4e7c>
   15f8c:	ldrb	r3, [r1, #1]!
   15f90:	lsl	r2, r3, #1
   15f94:	ldrh	r0, [ip, r2]
   15f98:	ands	r4, r0, #8192	; 0x2000
   15f9c:	bne	15f8c <__assert_fail@plt+0x4e78>
   15fa0:	cmp	r3, #45	; 0x2d
   15fa4:	beq	16030 <__assert_fail@plt+0x4f1c>
   15fa8:	mov	r2, fp
   15fac:	mov	r1, r6
   15fb0:	mov	r0, r5
   15fb4:	bl	10ff4 <strtoul@plt>
   15fb8:	ldr	r3, [r6]
   15fbc:	cmp	r3, r5
   15fc0:	mov	fp, r0
   15fc4:	beq	16018 <__assert_fail@plt+0x4f04>
   15fc8:	ldr	r4, [r8]
   15fcc:	cmp	r4, #0
   15fd0:	bne	16008 <__assert_fail@plt+0x4ef4>
   15fd4:	cmp	r9, #0
   15fd8:	beq	15fe8 <__assert_fail@plt+0x4ed4>
   15fdc:	ldrb	r5, [r3]
   15fe0:	cmp	r5, #0
   15fe4:	bne	163a0 <__assert_fail@plt+0x528c>
   15fe8:	str	fp, [sl]
   15fec:	ldr	r2, [sp, #12]
   15ff0:	ldr	r3, [r7]
   15ff4:	mov	r0, r4
   15ff8:	cmp	r2, r3
   15ffc:	bne	16568 <__assert_fail@plt+0x5454>
   16000:	add	sp, sp, #20
   16004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16008:	cmp	r4, #34	; 0x22
   1600c:	bne	16030 <__assert_fail@plt+0x4f1c>
   16010:	mov	r4, #1
   16014:	b	15fd4 <__assert_fail@plt+0x4ec0>
   16018:	cmp	r9, #0
   1601c:	str	r3, [sp, #4]
   16020:	beq	16030 <__assert_fail@plt+0x4f1c>
   16024:	ldrb	r5, [r5]
   16028:	cmp	r5, #0
   1602c:	bne	16038 <__assert_fail@plt+0x4f24>
   16030:	mov	r4, #4
   16034:	b	15fec <__assert_fail@plt+0x4ed8>
   16038:	mov	r1, r5
   1603c:	mov	r0, r9
   16040:	bl	1100c <strchr@plt>
   16044:	ldr	r3, [sp, #4]
   16048:	cmp	r0, #0
   1604c:	movne	fp, #1
   16050:	beq	16030 <__assert_fail@plt+0x4f1c>
   16054:	sub	r8, r5, #69	; 0x45
   16058:	cmp	r8, #47	; 0x2f
   1605c:	ldrls	pc, [pc, r8, lsl #2]
   16060:	b	16228 <__assert_fail@plt+0x5114>
   16064:	andeq	r6, r1, r4, lsr #2
   16068:	andeq	r6, r1, r8, lsr #4
   1606c:	andeq	r6, r1, r4, lsr #2
   16070:	andeq	r6, r1, r8, lsr #4
   16074:	andeq	r6, r1, r8, lsr #4
   16078:	andeq	r6, r1, r8, lsr #4
   1607c:	andeq	r6, r1, r4, lsr #2
   16080:	andeq	r6, r1, r8, lsr #4
   16084:	andeq	r6, r1, r4, lsr #2
   16088:	andeq	r6, r1, r8, lsr #4
   1608c:	andeq	r6, r1, r8, lsr #4
   16090:	andeq	r6, r1, r4, lsr #2
   16094:	andeq	r6, r1, r8, lsr #4
   16098:	andeq	r6, r1, r8, lsr #4
   1609c:	andeq	r6, r1, r8, lsr #4
   160a0:	andeq	r6, r1, r4, lsr #2
   160a4:	andeq	r6, r1, r8, lsr #4
   160a8:	andeq	r6, r1, r8, lsr #4
   160ac:	andeq	r6, r1, r8, lsr #4
   160b0:	andeq	r6, r1, r8, lsr #4
   160b4:	andeq	r6, r1, r4, lsr #2
   160b8:	andeq	r6, r1, r4, lsr #2
   160bc:	andeq	r6, r1, r8, lsr #4
   160c0:	andeq	r6, r1, r8, lsr #4
   160c4:	andeq	r6, r1, r8, lsr #4
   160c8:	andeq	r6, r1, r8, lsr #4
   160cc:	andeq	r6, r1, r8, lsr #4
   160d0:	andeq	r6, r1, r8, lsr #4
   160d4:	andeq	r6, r1, r8, lsr #4
   160d8:	andeq	r6, r1, r8, lsr #4
   160dc:	andeq	r6, r1, r8, lsr #4
   160e0:	andeq	r6, r1, r8, lsr #4
   160e4:	andeq	r6, r1, r8, lsr #4
   160e8:	andeq	r6, r1, r8, lsr #4
   160ec:	andeq	r6, r1, r4, lsr #2
   160f0:	andeq	r6, r1, r8, lsr #4
   160f4:	andeq	r6, r1, r8, lsr #4
   160f8:	andeq	r6, r1, r8, lsr #4
   160fc:	andeq	r6, r1, r4, lsr #2
   16100:	andeq	r6, r1, r8, lsr #4
   16104:	andeq	r6, r1, r4, lsr #2
   16108:	andeq	r6, r1, r8, lsr #4
   1610c:	andeq	r6, r1, r8, lsr #4
   16110:	andeq	r6, r1, r8, lsr #4
   16114:	andeq	r6, r1, r8, lsr #4
   16118:	andeq	r6, r1, r8, lsr #4
   1611c:	andeq	r6, r1, r8, lsr #4
   16120:	andeq	r6, r1, r4, lsr #2
   16124:	mov	r0, r9
   16128:	mov	r1, #48	; 0x30
   1612c:	str	r3, [sp, #4]
   16130:	bl	1100c <strchr@plt>
   16134:	ldr	r3, [sp, #4]
   16138:	cmp	r0, #0
   1613c:	beq	16228 <__assert_fail@plt+0x5114>
   16140:	ldrb	r2, [r3, #1]
   16144:	cmp	r2, #68	; 0x44
   16148:	beq	16540 <__assert_fail@plt+0x542c>
   1614c:	cmp	r2, #105	; 0x69
   16150:	beq	163c8 <__assert_fail@plt+0x52b4>
   16154:	cmp	r2, #66	; 0x42
   16158:	beq	16540 <__assert_fail@plt+0x542c>
   1615c:	cmp	r8, #47	; 0x2f
   16160:	ldrls	pc, [pc, r8, lsl #2]
   16164:	b	163bc <__assert_fail@plt+0x52a8>
   16168:	strdeq	r6, [r1], -r8
   1616c:			; <UNDEFINED> instruction: 0x000163bc
   16170:	andeq	r6, r1, r8, lsl r3
   16174:			; <UNDEFINED> instruction: 0x000163bc
   16178:			; <UNDEFINED> instruction: 0x000163bc
   1617c:			; <UNDEFINED> instruction: 0x000163bc
   16180:	andeq	r6, r1, r4, lsl #7
   16184:			; <UNDEFINED> instruction: 0x000163bc
   16188:	andeq	r6, r1, r8, asr #9
   1618c:			; <UNDEFINED> instruction: 0x000163bc
   16190:			; <UNDEFINED> instruction: 0x000163bc
   16194:	muleq	r1, r8, r4
   16198:			; <UNDEFINED> instruction: 0x000163bc
   1619c:			; <UNDEFINED> instruction: 0x000163bc
   161a0:			; <UNDEFINED> instruction: 0x000163bc
   161a4:	andeq	r6, r1, r8, ror #8
   161a8:			; <UNDEFINED> instruction: 0x000163bc
   161ac:			; <UNDEFINED> instruction: 0x000163bc
   161b0:			; <UNDEFINED> instruction: 0x000163bc
   161b4:			; <UNDEFINED> instruction: 0x000163bc
   161b8:	andeq	r6, r1, r8, lsr r4
   161bc:	andeq	r6, r1, r4, lsl #8
   161c0:			; <UNDEFINED> instruction: 0x000163bc
   161c4:			; <UNDEFINED> instruction: 0x000163bc
   161c8:			; <UNDEFINED> instruction: 0x000163bc
   161cc:			; <UNDEFINED> instruction: 0x000163bc
   161d0:			; <UNDEFINED> instruction: 0x000163bc
   161d4:			; <UNDEFINED> instruction: 0x000163bc
   161d8:			; <UNDEFINED> instruction: 0x000163bc
   161dc:	strdeq	r6, [r1], -r0
   161e0:	andeq	r6, r1, r8, lsr r5
   161e4:			; <UNDEFINED> instruction: 0x000163bc
   161e8:			; <UNDEFINED> instruction: 0x000163bc
   161ec:			; <UNDEFINED> instruction: 0x000163bc
   161f0:	andeq	r6, r1, r8, lsl r3
   161f4:			; <UNDEFINED> instruction: 0x000163bc
   161f8:			; <UNDEFINED> instruction: 0x000163bc
   161fc:			; <UNDEFINED> instruction: 0x000163bc
   16200:	andeq	r6, r1, r4, lsl #7
   16204:			; <UNDEFINED> instruction: 0x000163bc
   16208:	andeq	r6, r1, r8, asr #9
   1620c:			; <UNDEFINED> instruction: 0x000163bc
   16210:			; <UNDEFINED> instruction: 0x000163bc
   16214:			; <UNDEFINED> instruction: 0x000163bc
   16218:			; <UNDEFINED> instruction: 0x000163bc
   1621c:			; <UNDEFINED> instruction: 0x000163bc
   16220:			; <UNDEFINED> instruction: 0x000163bc
   16224:	andeq	r6, r1, r8, ror #8
   16228:	mov	r1, #1
   1622c:	mov	r2, #1024	; 0x400
   16230:	sub	r5, r5, #66	; 0x42
   16234:	cmp	r5, #53	; 0x35
   16238:	ldrls	pc, [pc, r5, lsl #2]
   1623c:	b	163bc <__assert_fail@plt+0x52a8>
   16240:	andeq	r6, r1, r8, lsr #10
   16244:			; <UNDEFINED> instruction: 0x000163bc
   16248:			; <UNDEFINED> instruction: 0x000163bc
   1624c:	andeq	r6, r1, r0, lsl #10
   16250:			; <UNDEFINED> instruction: 0x000163bc
   16254:	andeq	r6, r1, r0, lsr #6
   16258:			; <UNDEFINED> instruction: 0x000163bc
   1625c:			; <UNDEFINED> instruction: 0x000163bc
   16260:			; <UNDEFINED> instruction: 0x000163bc
   16264:	andeq	r6, r1, ip, lsl #7
   16268:			; <UNDEFINED> instruction: 0x000163bc
   1626c:	ldrdeq	r6, [r1], -r0
   16270:			; <UNDEFINED> instruction: 0x000163bc
   16274:			; <UNDEFINED> instruction: 0x000163bc
   16278:	andeq	r6, r1, r0, lsr #9
   1627c:			; <UNDEFINED> instruction: 0x000163bc
   16280:			; <UNDEFINED> instruction: 0x000163bc
   16284:			; <UNDEFINED> instruction: 0x000163bc
   16288:	andeq	r6, r1, r0, ror r4
   1628c:			; <UNDEFINED> instruction: 0x000163bc
   16290:			; <UNDEFINED> instruction: 0x000163bc
   16294:			; <UNDEFINED> instruction: 0x000163bc
   16298:			; <UNDEFINED> instruction: 0x000163bc
   1629c:	andeq	r6, r1, r0, asr #8
   162a0:	andeq	r6, r1, ip, lsl #8
   162a4:			; <UNDEFINED> instruction: 0x000163bc
   162a8:			; <UNDEFINED> instruction: 0x000163bc
   162ac:			; <UNDEFINED> instruction: 0x000163bc
   162b0:			; <UNDEFINED> instruction: 0x000163bc
   162b4:			; <UNDEFINED> instruction: 0x000163bc
   162b8:			; <UNDEFINED> instruction: 0x000163bc
   162bc:			; <UNDEFINED> instruction: 0x000163bc
   162c0:	strdeq	r6, [r1], -r4
   162c4:	andeq	r6, r1, ip, ror #6
   162c8:			; <UNDEFINED> instruction: 0x000163bc
   162cc:			; <UNDEFINED> instruction: 0x000163bc
   162d0:			; <UNDEFINED> instruction: 0x000163bc
   162d4:	andeq	r6, r1, r0, lsr #6
   162d8:			; <UNDEFINED> instruction: 0x000163bc
   162dc:			; <UNDEFINED> instruction: 0x000163bc
   162e0:			; <UNDEFINED> instruction: 0x000163bc
   162e4:	andeq	r6, r1, ip, lsl #7
   162e8:			; <UNDEFINED> instruction: 0x000163bc
   162ec:	ldrdeq	r6, [r1], -r0
   162f0:			; <UNDEFINED> instruction: 0x000163bc
   162f4:			; <UNDEFINED> instruction: 0x000163bc
   162f8:			; <UNDEFINED> instruction: 0x000163bc
   162fc:			; <UNDEFINED> instruction: 0x000163bc
   16300:			; <UNDEFINED> instruction: 0x000163bc
   16304:			; <UNDEFINED> instruction: 0x000163bc
   16308:	andeq	r6, r1, r0, ror r4
   1630c:			; <UNDEFINED> instruction: 0x000163bc
   16310:			; <UNDEFINED> instruction: 0x000163bc
   16314:	andeq	r6, r1, r0, ror #7
   16318:	mov	r1, #1
   1631c:	mov	r2, #1024	; 0x400
   16320:	umull	ip, r0, r2, fp
   16324:	adds	r0, r0, #0
   16328:	movne	r0, #1
   1632c:	cmp	r0, #0
   16330:	bne	1654c <__assert_fail@plt+0x5438>
   16334:	mul	fp, r2, fp
   16338:	umull	ip, r0, r2, fp
   1633c:	adds	r0, r0, #0
   16340:	movne	r0, #1
   16344:	cmp	r0, #0
   16348:	bne	1654c <__assert_fail@plt+0x5438>
   1634c:	mul	fp, r2, fp
   16350:	umull	ip, r0, r2, fp
   16354:	adds	r0, r0, #0
   16358:	movne	r0, #1
   1635c:	cmp	r0, #0
   16360:	muleq	fp, r2, fp
   16364:	bne	1654c <__assert_fail@plt+0x5438>
   16368:	orr	r4, r4, r0
   1636c:	add	r2, r3, r1
   16370:	str	r2, [r6]
   16374:	ldrb	r3, [r3, r1]
   16378:	cmp	r3, #0
   1637c:	orrne	r4, r4, #2
   16380:	b	15fe8 <__assert_fail@plt+0x4ed4>
   16384:	mov	r1, #1
   16388:	mov	r2, #1024	; 0x400
   1638c:	umull	ip, r0, r2, fp
   16390:	cmp	r0, #0
   16394:	bne	164ec <__assert_fail@plt+0x53d8>
   16398:	mul	fp, r2, fp
   1639c:	b	1636c <__assert_fail@plt+0x5258>
   163a0:	mov	r1, r5
   163a4:	mov	r0, r9
   163a8:	str	r3, [sp, #4]
   163ac:	bl	1100c <strchr@plt>
   163b0:	ldr	r3, [sp, #4]
   163b4:	cmp	r0, #0
   163b8:	bne	16054 <__assert_fail@plt+0x4f40>
   163bc:	str	fp, [sl]
   163c0:	orr	r4, r4, #2
   163c4:	b	15fec <__assert_fail@plt+0x4ed8>
   163c8:	ldrb	r1, [r3, #2]
   163cc:	mov	r2, #1024	; 0x400
   163d0:	cmp	r1, #66	; 0x42
   163d4:	movne	r1, #1
   163d8:	moveq	r1, #3
   163dc:	b	16230 <__assert_fail@plt+0x511c>
   163e0:	cmp	fp, #0
   163e4:	blt	164ec <__assert_fail@plt+0x53d8>
   163e8:	lsl	fp, fp, #1
   163ec:	b	1636c <__assert_fail@plt+0x5258>
   163f0:	mov	r1, #1
   163f4:	lsrs	r2, fp, #23
   163f8:	bne	164ec <__assert_fail@plt+0x53d8>
   163fc:	lsl	fp, fp, #9
   16400:	b	1636c <__assert_fail@plt+0x5258>
   16404:	mov	r1, #1
   16408:	mov	r2, #1024	; 0x400
   1640c:	mov	r0, #7
   16410:	mov	lr, #0
   16414:	umull	r5, ip, r2, fp
   16418:	cmp	ip, #0
   1641c:	movne	lr, #1
   16420:	muleq	fp, r2, fp
   16424:	mvnne	fp, #0
   16428:	subs	r0, r0, #1
   1642c:	bne	16414 <__assert_fail@plt+0x5300>
   16430:	orr	r4, r4, lr
   16434:	b	1636c <__assert_fail@plt+0x5258>
   16438:	mov	r1, #1
   1643c:	mov	r2, #1024	; 0x400
   16440:	mov	r0, #8
   16444:	mov	lr, #0
   16448:	umull	r5, ip, r2, fp
   1644c:	cmp	ip, #0
   16450:	movne	lr, #1
   16454:	muleq	fp, r2, fp
   16458:	mvnne	fp, #0
   1645c:	subs	r0, r0, #1
   16460:	bne	16448 <__assert_fail@plt+0x5334>
   16464:	b	16430 <__assert_fail@plt+0x531c>
   16468:	mov	r1, #1
   1646c:	mov	r2, #1024	; 0x400
   16470:	mov	r0, #4
   16474:	mov	lr, #0
   16478:	umull	r5, ip, r2, fp
   1647c:	cmp	ip, #0
   16480:	movne	lr, #1
   16484:	muleq	fp, r2, fp
   16488:	mvnne	fp, #0
   1648c:	subs	r0, r0, #1
   16490:	bne	16478 <__assert_fail@plt+0x5364>
   16494:	b	16430 <__assert_fail@plt+0x531c>
   16498:	mov	r1, #1
   1649c:	mov	r2, #1024	; 0x400
   164a0:	mov	r0, #5
   164a4:	mov	lr, #0
   164a8:	umull	r5, ip, r2, fp
   164ac:	cmp	ip, #0
   164b0:	movne	lr, #1
   164b4:	muleq	fp, r2, fp
   164b8:	mvnne	fp, #0
   164bc:	subs	r0, r0, #1
   164c0:	bne	164a8 <__assert_fail@plt+0x5394>
   164c4:	b	16430 <__assert_fail@plt+0x531c>
   164c8:	mov	r1, #1
   164cc:	mov	r2, #1024	; 0x400
   164d0:	umull	ip, r0, r2, fp
   164d4:	cmp	r0, #0
   164d8:	bne	164ec <__assert_fail@plt+0x53d8>
   164dc:	mul	fp, r2, fp
   164e0:	umull	ip, r0, r2, fp
   164e4:	cmp	r0, #0
   164e8:	beq	16398 <__assert_fail@plt+0x5284>
   164ec:	mov	r4, #1
   164f0:	mvn	fp, #0
   164f4:	b	1636c <__assert_fail@plt+0x5258>
   164f8:	mov	r1, #1
   164fc:	mov	r2, #1024	; 0x400
   16500:	mov	r0, #6
   16504:	mov	lr, #0
   16508:	umull	r5, ip, r2, fp
   1650c:	cmp	ip, #0
   16510:	movne	lr, #1
   16514:	muleq	fp, r2, fp
   16518:	mvnne	fp, #0
   1651c:	subs	r0, r0, #1
   16520:	bne	16508 <__assert_fail@plt+0x53f4>
   16524:	b	16430 <__assert_fail@plt+0x531c>
   16528:	lsrs	r2, fp, #22
   1652c:	bne	164ec <__assert_fail@plt+0x53d8>
   16530:	lsl	fp, fp, #10
   16534:	b	1636c <__assert_fail@plt+0x5258>
   16538:	mov	r1, #1
   1653c:	b	1636c <__assert_fail@plt+0x5258>
   16540:	mov	r1, #2
   16544:	mov	r2, #1000	; 0x3e8
   16548:	b	16230 <__assert_fail@plt+0x511c>
   1654c:	mvn	fp, #0
   16550:	b	16368 <__assert_fail@plt+0x5254>
   16554:	ldr	r3, [pc, #20]	; 16570 <__assert_fail@plt+0x545c>
   16558:	mov	r2, #96	; 0x60
   1655c:	ldr	r1, [pc, #16]	; 16574 <__assert_fail@plt+0x5460>
   16560:	ldr	r0, [pc, #16]	; 16578 <__assert_fail@plt+0x5464>
   16564:	bl	11114 <__assert_fail@plt>
   16568:	bl	10f10 <__stack_chk_fail@plt>
   1656c:	andeq	r8, r2, r8, lsl #30
   16570:	andeq	r7, r1, r8, asr pc
   16574:	andeq	r7, r1, r4, ror #30
   16578:	andeq	r7, r1, r4, ror pc
   1657c:	push	{r4, r5, lr}
   16580:	sub	sp, sp, #12
   16584:	mov	r4, r0
   16588:	bl	11048 <fileno@plt>
   1658c:	cmp	r0, #0
   16590:	mov	r0, r4
   16594:	blt	16610 <__assert_fail@plt+0x54fc>
   16598:	bl	10fac <__freading@plt>
   1659c:	cmp	r0, #0
   165a0:	bne	165dc <__assert_fail@plt+0x54c8>
   165a4:	mov	r0, r4
   165a8:	bl	16768 <__assert_fail@plt+0x5654>
   165ac:	cmp	r0, #0
   165b0:	beq	1660c <__assert_fail@plt+0x54f8>
   165b4:	bl	11018 <__errno_location@plt>
   165b8:	mov	r5, r0
   165bc:	mov	r0, r4
   165c0:	ldr	r4, [r5]
   165c4:	bl	1106c <fclose@plt>
   165c8:	cmp	r4, #0
   165cc:	mvnne	r0, #0
   165d0:	strne	r4, [r5]
   165d4:	add	sp, sp, #12
   165d8:	pop	{r4, r5, pc}
   165dc:	mov	r0, r4
   165e0:	bl	11048 <fileno@plt>
   165e4:	mov	r3, #1
   165e8:	str	r3, [sp]
   165ec:	mov	r2, #0
   165f0:	mov	r3, #0
   165f4:	bl	10f4c <lseek64@plt>
   165f8:	mvn	r3, #0
   165fc:	mvn	r2, #0
   16600:	cmp	r1, r3
   16604:	cmpeq	r0, r2
   16608:	bne	165a4 <__assert_fail@plt+0x5490>
   1660c:	mov	r0, r4
   16610:	add	sp, sp, #12
   16614:	pop	{r4, r5, lr}
   16618:	b	1106c <fclose@plt>
   1661c:	push	{r1, r2, r3}
   16620:	push	{r4, r5, r6, r7, r8, lr}
   16624:	sub	sp, sp, #12
   16628:	ldr	r4, [pc, #300]	; 1675c <__assert_fail@plt+0x5648>
   1662c:	ldr	r3, [pc, #300]	; 16760 <__assert_fail@plt+0x564c>
   16630:	ldr	r1, [sp, #36]	; 0x24
   16634:	ldr	r2, [r4]
   16638:	cmp	r1, r3
   1663c:	add	r3, sp, #40	; 0x28
   16640:	str	r2, [sp, #4]
   16644:	str	r3, [sp]
   16648:	bne	16714 <__assert_fail@plt+0x5600>
   1664c:	ldr	r6, [pc, #272]	; 16764 <__assert_fail@plt+0x5650>
   16650:	add	r3, sp, #44	; 0x2c
   16654:	str	r3, [sp]
   16658:	ldr	r3, [r6]
   1665c:	ldr	r7, [sp, #40]	; 0x28
   16660:	cmp	r3, #0
   16664:	blt	166a8 <__assert_fail@plt+0x5594>
   16668:	mov	r2, r7
   1666c:	mov	r8, r0
   16670:	bl	11084 <fcntl64@plt>
   16674:	subs	r5, r0, #0
   16678:	blt	16724 <__assert_fail@plt+0x5610>
   1667c:	mov	r3, #1
   16680:	str	r3, [r6]
   16684:	ldr	r2, [sp, #4]
   16688:	ldr	r3, [r4]
   1668c:	mov	r0, r5
   16690:	cmp	r2, r3
   16694:	bne	16758 <__assert_fail@plt+0x5644>
   16698:	add	sp, sp, #12
   1669c:	pop	{r4, r5, r6, r7, r8, lr}
   166a0:	add	sp, sp, #12
   166a4:	bx	lr
   166a8:	mov	r2, r7
   166ac:	mov	r1, #0
   166b0:	bl	1661c <__assert_fail@plt+0x5508>
   166b4:	subs	r5, r0, #0
   166b8:	blt	16684 <__assert_fail@plt+0x5570>
   166bc:	ldr	r3, [r6]
   166c0:	cmn	r3, #1
   166c4:	bne	16684 <__assert_fail@plt+0x5570>
   166c8:	mov	r1, #1
   166cc:	mov	r0, r5
   166d0:	bl	11084 <fcntl64@plt>
   166d4:	subs	r2, r0, #0
   166d8:	blt	166f4 <__assert_fail@plt+0x55e0>
   166dc:	orr	r2, r2, #1
   166e0:	mov	r1, #2
   166e4:	mov	r0, r5
   166e8:	bl	11084 <fcntl64@plt>
   166ec:	cmn	r0, #1
   166f0:	bne	16684 <__assert_fail@plt+0x5570>
   166f4:	bl	11018 <__errno_location@plt>
   166f8:	mov	r6, r0
   166fc:	mov	r0, r5
   16700:	ldr	r7, [r6]
   16704:	mvn	r5, #0
   16708:	bl	11108 <close@plt>
   1670c:	str	r7, [r6]
   16710:	b	16684 <__assert_fail@plt+0x5570>
   16714:	ldr	r2, [sp, #40]	; 0x28
   16718:	bl	11084 <fcntl64@plt>
   1671c:	mov	r5, r0
   16720:	b	16684 <__assert_fail@plt+0x5570>
   16724:	bl	11018 <__errno_location@plt>
   16728:	ldr	r3, [r0]
   1672c:	cmp	r3, #22
   16730:	bne	1667c <__assert_fail@plt+0x5568>
   16734:	mov	r2, r7
   16738:	mov	r0, r8
   1673c:	mov	r1, #0
   16740:	bl	1661c <__assert_fail@plt+0x5508>
   16744:	subs	r5, r0, #0
   16748:	mvnge	r3, #0
   1674c:	strge	r3, [r6]
   16750:	bge	166c8 <__assert_fail@plt+0x55b4>
   16754:	b	16684 <__assert_fail@plt+0x5570>
   16758:	bl	10f10 <__stack_chk_fail@plt>
   1675c:	andeq	r8, r2, r8, lsl #30
   16760:	andeq	r0, r0, r6, lsl #8
   16764:	andeq	r9, r2, r4, lsr r3
   16768:	push	{r4, lr}
   1676c:	subs	r4, r0, #0
   16770:	sub	sp, sp, #8
   16774:	beq	16790 <__assert_fail@plt+0x567c>
   16778:	bl	10fac <__freading@plt>
   1677c:	cmp	r0, #0
   16780:	beq	16790 <__assert_fail@plt+0x567c>
   16784:	ldr	r3, [r4]
   16788:	tst	r3, #256	; 0x100
   1678c:	bne	167a0 <__assert_fail@plt+0x568c>
   16790:	mov	r0, r4
   16794:	add	sp, sp, #8
   16798:	pop	{r4, lr}
   1679c:	b	10eb0 <fflush@plt>
   167a0:	mov	r3, #1
   167a4:	str	r3, [sp]
   167a8:	mov	r2, #0
   167ac:	mov	r3, #0
   167b0:	mov	r0, r4
   167b4:	bl	167c8 <__assert_fail@plt+0x56b4>
   167b8:	mov	r0, r4
   167bc:	add	sp, sp, #8
   167c0:	pop	{r4, lr}
   167c4:	b	10eb0 <fflush@plt>
   167c8:	push	{r4, r5, r6, r7, r8, lr}
   167cc:	sub	sp, sp, #8
   167d0:	ldmib	r0, {ip, lr}
   167d4:	mov	r4, r0
   167d8:	ldr	r5, [sp, #32]
   167dc:	cmp	lr, ip
   167e0:	beq	167f8 <__assert_fail@plt+0x56e4>
   167e4:	str	r5, [sp, #32]
   167e8:	mov	r0, r4
   167ec:	add	sp, sp, #8
   167f0:	pop	{r4, r5, r6, r7, r8, lr}
   167f4:	b	11078 <fseeko64@plt>
   167f8:	ldr	lr, [r0, #20]
   167fc:	ldr	ip, [r0, #16]
   16800:	cmp	lr, ip
   16804:	bne	167e4 <__assert_fail@plt+0x56d0>
   16808:	ldr	r8, [r0, #36]	; 0x24
   1680c:	cmp	r8, #0
   16810:	bne	167e4 <__assert_fail@plt+0x56d0>
   16814:	mov	r6, r2
   16818:	mov	r7, r3
   1681c:	bl	11048 <fileno@plt>
   16820:	mov	r2, r6
   16824:	mov	r3, r7
   16828:	str	r5, [sp]
   1682c:	bl	10f4c <lseek64@plt>
   16830:	mvn	r3, #0
   16834:	mvn	r2, #0
   16838:	cmp	r1, r3
   1683c:	cmpeq	r0, r2
   16840:	beq	16860 <__assert_fail@plt+0x574c>
   16844:	ldr	r3, [r4]
   16848:	strd	r0, [r4, #80]	; 0x50
   1684c:	mov	r0, r8
   16850:	bic	r3, r3, #16
   16854:	str	r3, [r4]
   16858:	add	sp, sp, #8
   1685c:	pop	{r4, r5, r6, r7, r8, pc}
   16860:	mvn	r0, #0
   16864:	b	16858 <__assert_fail@plt+0x5744>
   16868:	push	{r4, r5, r6, r7, r8, lr}
   1686c:	subs	r7, r0, #0
   16870:	ldr	r5, [pc, #108]	; 168e4 <__assert_fail@plt+0x57d0>
   16874:	sub	sp, sp, #8
   16878:	mov	r8, r1
   1687c:	ldr	r1, [r5]
   16880:	moveq	r7, sp
   16884:	str	r1, [sp, #4]
   16888:	mov	r0, r7
   1688c:	mov	r1, r8
   16890:	mov	r6, r2
   16894:	bl	10f70 <mbrtowc@plt>
   16898:	cmp	r6, #0
   1689c:	cmnne	r0, #3
   168a0:	mov	r4, r0
   168a4:	bhi	168c4 <__assert_fail@plt+0x57b0>
   168a8:	ldr	r2, [sp, #4]
   168ac:	ldr	r3, [r5]
   168b0:	mov	r0, r4
   168b4:	cmp	r2, r3
   168b8:	bne	168e0 <__assert_fail@plt+0x57cc>
   168bc:	add	sp, sp, #8
   168c0:	pop	{r4, r5, r6, r7, r8, pc}
   168c4:	mov	r0, #0
   168c8:	bl	13188 <__assert_fail@plt+0x2074>
   168cc:	cmp	r0, #0
   168d0:	moveq	r4, #1
   168d4:	ldrbeq	r3, [r8]
   168d8:	streq	r3, [r7]
   168dc:	b	168a8 <__assert_fail@plt+0x5794>
   168e0:	bl	10f10 <__stack_chk_fail@plt>
   168e4:	andeq	r8, r2, r8, lsl #30
   168e8:	push	{r4, r5, r6, lr}
   168ec:	mov	r4, r0
   168f0:	bl	10f64 <__fpending@plt>
   168f4:	ldr	r5, [r4]
   168f8:	and	r5, r5, #32
   168fc:	mov	r6, r0
   16900:	mov	r0, r4
   16904:	bl	1657c <__assert_fail@plt+0x5468>
   16908:	cmp	r5, #0
   1690c:	mov	r4, r0
   16910:	bne	1693c <__assert_fail@plt+0x5828>
   16914:	cmp	r0, #0
   16918:	beq	16934 <__assert_fail@plt+0x5820>
   1691c:	cmp	r6, #0
   16920:	bne	16954 <__assert_fail@plt+0x5840>
   16924:	bl	11018 <__errno_location@plt>
   16928:	ldr	r4, [r0]
   1692c:	subs	r4, r4, #9
   16930:	mvnne	r4, #0
   16934:	mov	r0, r4
   16938:	pop	{r4, r5, r6, pc}
   1693c:	cmp	r0, #0
   16940:	bne	16954 <__assert_fail@plt+0x5840>
   16944:	bl	11018 <__errno_location@plt>
   16948:	str	r4, [r0]
   1694c:	mvn	r4, #0
   16950:	b	16934 <__assert_fail@plt+0x5820>
   16954:	mvn	r4, #0
   16958:	b	16934 <__assert_fail@plt+0x5820>
   1695c:	push	{r4, lr}
   16960:	mov	r0, #14
   16964:	bl	110c0 <nl_langinfo@plt>
   16968:	cmp	r0, #0
   1696c:	beq	16984 <__assert_fail@plt+0x5870>
   16970:	ldrb	r2, [r0]
   16974:	ldr	r3, [pc, #16]	; 1698c <__assert_fail@plt+0x5878>
   16978:	cmp	r2, #0
   1697c:	moveq	r0, r3
   16980:	pop	{r4, pc}
   16984:	ldr	r0, [pc]	; 1698c <__assert_fail@plt+0x5878>
   16988:	pop	{r4, pc}
   1698c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   16990:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16994:	mov	r4, r0
   16998:	mov	r8, r1
   1699c:	mov	r5, r2
   169a0:	mov	r7, r3
   169a4:	bl	11018 <__errno_location@plt>
   169a8:	mov	sl, #0
   169ac:	mov	r9, r0
   169b0:	b	169e4 <__assert_fail@plt+0x58d0>
   169b4:	bl	11000 <strlen@plt>
   169b8:	add	r6, r0, #1
   169bc:	mov	r0, r5
   169c0:	bl	11000 <strlen@plt>
   169c4:	subs	r8, r8, r6
   169c8:	add	r4, r4, r6
   169cc:	add	r0, r0, #1
   169d0:	add	r5, r5, r0
   169d4:	sub	r7, r7, r0
   169d8:	beq	16a08 <__assert_fail@plt+0x58f4>
   169dc:	cmp	r7, #0
   169e0:	beq	16a1c <__assert_fail@plt+0x5908>
   169e4:	str	sl, [r9]
   169e8:	mov	r1, r5
   169ec:	mov	r0, r4
   169f0:	bl	10f88 <strcoll@plt>
   169f4:	subs	r3, r0, #0
   169f8:	mov	r0, r4
   169fc:	beq	169b4 <__assert_fail@plt+0x58a0>
   16a00:	mov	r0, r3
   16a04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a08:	adds	r7, r7, #0
   16a0c:	movne	r7, #1
   16a10:	rsb	r3, r7, #0
   16a14:	mov	r0, r3
   16a18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a1c:	mov	r3, #1
   16a20:	mov	r0, r3
   16a24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a28:	cmp	r1, r3
   16a2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a30:	mov	r4, r1
   16a34:	mov	r5, r3
   16a38:	mov	r6, r2
   16a3c:	mov	r7, r0
   16a40:	bne	16a58 <__assert_fail@plt+0x5944>
   16a44:	mov	r2, r1
   16a48:	mov	r1, r6
   16a4c:	bl	10ef8 <memcmp@plt>
   16a50:	subs	r8, r0, #0
   16a54:	beq	16a94 <__assert_fail@plt+0x5980>
   16a58:	mov	r1, #0
   16a5c:	ldrb	sl, [r7, r4]
   16a60:	ldrb	r9, [r6, r5]
   16a64:	add	r3, r5, #1
   16a68:	strb	r1, [r7, r4]
   16a6c:	mov	r2, r6
   16a70:	strb	r1, [r6, r5]
   16a74:	mov	r0, r7
   16a78:	add	r1, r4, #1
   16a7c:	bl	16990 <__assert_fail@plt+0x587c>
   16a80:	strb	sl, [r7, r4]
   16a84:	strb	r9, [r6, r5]
   16a88:	mov	r8, r0
   16a8c:	mov	r0, r8
   16a90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a94:	bl	11018 <__errno_location@plt>
   16a98:	str	r8, [r0]
   16a9c:	mov	r0, r8
   16aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16aa4:	cmp	r1, r3
   16aa8:	push	{r4, r5, r6, r7, r8, lr}
   16aac:	mov	r4, r1
   16ab0:	mov	r5, r3
   16ab4:	mov	r6, r2
   16ab8:	mov	r7, r0
   16abc:	bne	16ae4 <__assert_fail@plt+0x59d0>
   16ac0:	mov	r2, r1
   16ac4:	mov	r1, r6
   16ac8:	bl	10ef8 <memcmp@plt>
   16acc:	subs	r8, r0, #0
   16ad0:	bne	16ae4 <__assert_fail@plt+0x59d0>
   16ad4:	bl	11018 <__errno_location@plt>
   16ad8:	str	r8, [r0]
   16adc:	mov	r0, r8
   16ae0:	pop	{r4, r5, r6, r7, r8, pc}
   16ae4:	mov	r3, r5
   16ae8:	mov	r2, r6
   16aec:	mov	r1, r4
   16af0:	mov	r0, r7
   16af4:	pop	{r4, r5, r6, r7, r8, lr}
   16af8:	b	16990 <__assert_fail@plt+0x587c>
   16afc:	subs	r2, r1, #1
   16b00:	bxeq	lr
   16b04:	bcc	16cdc <__assert_fail@plt+0x5bc8>
   16b08:	cmp	r0, r1
   16b0c:	bls	16cc0 <__assert_fail@plt+0x5bac>
   16b10:	tst	r1, r2
   16b14:	beq	16ccc <__assert_fail@plt+0x5bb8>
   16b18:	clz	r3, r0
   16b1c:	clz	r2, r1
   16b20:	sub	r3, r2, r3
   16b24:	rsbs	r3, r3, #31
   16b28:	addne	r3, r3, r3, lsl #1
   16b2c:	mov	r2, #0
   16b30:	addne	pc, pc, r3, lsl #2
   16b34:	nop			; (mov r0, r0)
   16b38:	cmp	r0, r1, lsl #31
   16b3c:	adc	r2, r2, r2
   16b40:	subcs	r0, r0, r1, lsl #31
   16b44:	cmp	r0, r1, lsl #30
   16b48:	adc	r2, r2, r2
   16b4c:	subcs	r0, r0, r1, lsl #30
   16b50:	cmp	r0, r1, lsl #29
   16b54:	adc	r2, r2, r2
   16b58:	subcs	r0, r0, r1, lsl #29
   16b5c:	cmp	r0, r1, lsl #28
   16b60:	adc	r2, r2, r2
   16b64:	subcs	r0, r0, r1, lsl #28
   16b68:	cmp	r0, r1, lsl #27
   16b6c:	adc	r2, r2, r2
   16b70:	subcs	r0, r0, r1, lsl #27
   16b74:	cmp	r0, r1, lsl #26
   16b78:	adc	r2, r2, r2
   16b7c:	subcs	r0, r0, r1, lsl #26
   16b80:	cmp	r0, r1, lsl #25
   16b84:	adc	r2, r2, r2
   16b88:	subcs	r0, r0, r1, lsl #25
   16b8c:	cmp	r0, r1, lsl #24
   16b90:	adc	r2, r2, r2
   16b94:	subcs	r0, r0, r1, lsl #24
   16b98:	cmp	r0, r1, lsl #23
   16b9c:	adc	r2, r2, r2
   16ba0:	subcs	r0, r0, r1, lsl #23
   16ba4:	cmp	r0, r1, lsl #22
   16ba8:	adc	r2, r2, r2
   16bac:	subcs	r0, r0, r1, lsl #22
   16bb0:	cmp	r0, r1, lsl #21
   16bb4:	adc	r2, r2, r2
   16bb8:	subcs	r0, r0, r1, lsl #21
   16bbc:	cmp	r0, r1, lsl #20
   16bc0:	adc	r2, r2, r2
   16bc4:	subcs	r0, r0, r1, lsl #20
   16bc8:	cmp	r0, r1, lsl #19
   16bcc:	adc	r2, r2, r2
   16bd0:	subcs	r0, r0, r1, lsl #19
   16bd4:	cmp	r0, r1, lsl #18
   16bd8:	adc	r2, r2, r2
   16bdc:	subcs	r0, r0, r1, lsl #18
   16be0:	cmp	r0, r1, lsl #17
   16be4:	adc	r2, r2, r2
   16be8:	subcs	r0, r0, r1, lsl #17
   16bec:	cmp	r0, r1, lsl #16
   16bf0:	adc	r2, r2, r2
   16bf4:	subcs	r0, r0, r1, lsl #16
   16bf8:	cmp	r0, r1, lsl #15
   16bfc:	adc	r2, r2, r2
   16c00:	subcs	r0, r0, r1, lsl #15
   16c04:	cmp	r0, r1, lsl #14
   16c08:	adc	r2, r2, r2
   16c0c:	subcs	r0, r0, r1, lsl #14
   16c10:	cmp	r0, r1, lsl #13
   16c14:	adc	r2, r2, r2
   16c18:	subcs	r0, r0, r1, lsl #13
   16c1c:	cmp	r0, r1, lsl #12
   16c20:	adc	r2, r2, r2
   16c24:	subcs	r0, r0, r1, lsl #12
   16c28:	cmp	r0, r1, lsl #11
   16c2c:	adc	r2, r2, r2
   16c30:	subcs	r0, r0, r1, lsl #11
   16c34:	cmp	r0, r1, lsl #10
   16c38:	adc	r2, r2, r2
   16c3c:	subcs	r0, r0, r1, lsl #10
   16c40:	cmp	r0, r1, lsl #9
   16c44:	adc	r2, r2, r2
   16c48:	subcs	r0, r0, r1, lsl #9
   16c4c:	cmp	r0, r1, lsl #8
   16c50:	adc	r2, r2, r2
   16c54:	subcs	r0, r0, r1, lsl #8
   16c58:	cmp	r0, r1, lsl #7
   16c5c:	adc	r2, r2, r2
   16c60:	subcs	r0, r0, r1, lsl #7
   16c64:	cmp	r0, r1, lsl #6
   16c68:	adc	r2, r2, r2
   16c6c:	subcs	r0, r0, r1, lsl #6
   16c70:	cmp	r0, r1, lsl #5
   16c74:	adc	r2, r2, r2
   16c78:	subcs	r0, r0, r1, lsl #5
   16c7c:	cmp	r0, r1, lsl #4
   16c80:	adc	r2, r2, r2
   16c84:	subcs	r0, r0, r1, lsl #4
   16c88:	cmp	r0, r1, lsl #3
   16c8c:	adc	r2, r2, r2
   16c90:	subcs	r0, r0, r1, lsl #3
   16c94:	cmp	r0, r1, lsl #2
   16c98:	adc	r2, r2, r2
   16c9c:	subcs	r0, r0, r1, lsl #2
   16ca0:	cmp	r0, r1, lsl #1
   16ca4:	adc	r2, r2, r2
   16ca8:	subcs	r0, r0, r1, lsl #1
   16cac:	cmp	r0, r1
   16cb0:	adc	r2, r2, r2
   16cb4:	subcs	r0, r0, r1
   16cb8:	mov	r0, r2
   16cbc:	bx	lr
   16cc0:	moveq	r0, #1
   16cc4:	movne	r0, #0
   16cc8:	bx	lr
   16ccc:	clz	r2, r1
   16cd0:	rsb	r2, r2, #31
   16cd4:	lsr	r0, r0, r2
   16cd8:	bx	lr
   16cdc:	cmp	r0, #0
   16ce0:	mvnne	r0, #0
   16ce4:	b	16d08 <__assert_fail@plt+0x5bf4>
   16ce8:	cmp	r1, #0
   16cec:	beq	16cdc <__assert_fail@plt+0x5bc8>
   16cf0:	push	{r0, r1, lr}
   16cf4:	bl	16afc <__assert_fail@plt+0x59e8>
   16cf8:	pop	{r1, r2, lr}
   16cfc:	mul	r3, r2, r0
   16d00:	sub	r1, r1, r3
   16d04:	bx	lr
   16d08:	push	{r1, lr}
   16d0c:	mov	r0, #8
   16d10:	bl	10e8c <raise@plt>
   16d14:	pop	{r1, pc}
   16d18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d1c:	mov	r7, r0
   16d20:	ldr	r6, [pc, #72]	; 16d70 <__assert_fail@plt+0x5c5c>
   16d24:	ldr	r5, [pc, #72]	; 16d74 <__assert_fail@plt+0x5c60>
   16d28:	add	r6, pc, r6
   16d2c:	add	r5, pc, r5
   16d30:	sub	r6, r6, r5
   16d34:	mov	r8, r1
   16d38:	mov	r9, r2
   16d3c:	bl	10e48 <fdopen@plt-0x20>
   16d40:	asrs	r6, r6, #2
   16d44:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d48:	mov	r4, #0
   16d4c:	add	r4, r4, #1
   16d50:	ldr	r3, [r5], #4
   16d54:	mov	r2, r9
   16d58:	mov	r1, r8
   16d5c:	mov	r0, r7
   16d60:	blx	r3
   16d64:	cmp	r6, r4
   16d68:	bne	16d4c <__assert_fail@plt+0x5c38>
   16d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d70:	ldrdeq	r2, [r1], -r4
   16d74:	andeq	r2, r1, ip, asr #3
   16d78:	bx	lr
   16d7c:	ldr	r3, [pc, #12]	; 16d90 <__assert_fail@plt+0x5c7c>
   16d80:	mov	r1, #0
   16d84:	add	r3, pc, r3
   16d88:	ldr	r2, [r3]
   16d8c:	b	11024 <__cxa_atexit@plt>
   16d90:	andeq	r2, r1, r0, ror r3

Disassembly of section .fini:

00016d94 <.fini>:
   16d94:	push	{r3, lr}
   16d98:	pop	{r3, pc}
