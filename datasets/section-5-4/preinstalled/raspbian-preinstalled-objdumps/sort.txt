
raspbian-preinstalled/sort:     file format elf32-littlearm


Disassembly of section .init:

00011af4 <.init>:
   11af4:	push	{r3, lr}
   11af8:	bl	14b9c <__assert_fail@plt+0x2b18>
   11afc:	pop	{r3, pc}

Disassembly of section .plt:

00011b00 <pthread_mutex_unlock@plt-0x14>:
   11b00:	push	{lr}		; (str lr, [sp, #-4]!)
   11b04:	ldr	lr, [pc, #4]	; 11b10 <pthread_mutex_unlock@plt-0x4>
   11b08:	add	lr, pc, lr
   11b0c:	ldr	pc, [lr, #8]!
   11b10:	strdeq	r4, [r2], -r0

00011b14 <pthread_mutex_unlock@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #36, 20	; 0x24000
   11b1c:	ldr	pc, [ip, #1264]!	; 0x4f0

00011b20 <fdopen@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #36, 20	; 0x24000
   11b28:	ldr	pc, [ip, #1256]!	; 0x4e8

00011b2c <calloc@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #36, 20	; 0x24000
   11b34:	ldr	pc, [ip, #1248]!	; 0x4e0

00011b38 <fputs_unlocked@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #36, 20	; 0x24000
   11b40:	ldr	pc, [ip, #1240]!	; 0x4d8

00011b44 <raise@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #36, 20	; 0x24000
   11b4c:	ldr	pc, [ip, #1232]!	; 0x4d0

00011b50 <strcmp@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #36, 20	; 0x24000
   11b58:	ldr	pc, [ip, #1224]!	; 0x4c8

00011b5c <strtol@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #36, 20	; 0x24000
   11b64:	ldr	pc, [ip, #1216]!	; 0x4c0

00011b68 <posix_fadvise64@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #36, 20	; 0x24000
   11b70:	ldr	pc, [ip, #1208]!	; 0x4b8

00011b74 <__read_chk@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #36, 20	; 0x24000
   11b7c:	ldr	pc, [ip, #1200]!	; 0x4b0

00011b80 <fflush@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #36, 20	; 0x24000
   11b88:	ldr	pc, [ip, #1192]!	; 0x4a8

00011b8c <wcwidth@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #36, 20	; 0x24000
   11b94:	ldr	pc, [ip, #1184]!	; 0x4a0

00011b98 <getuid@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #36, 20	; 0x24000
   11ba0:	ldr	pc, [ip, #1176]!	; 0x498

00011ba4 <memmove@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #36, 20	; 0x24000
   11bac:	ldr	pc, [ip, #1168]!	; 0x490

00011bb0 <free@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #36, 20	; 0x24000
   11bb8:	ldr	pc, [ip, #1160]!	; 0x488

00011bbc <pthread_mutex_lock@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #36, 20	; 0x24000
   11bc4:	ldr	pc, [ip, #1152]!	; 0x480

00011bc8 <nanosleep@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #36, 20	; 0x24000
   11bd0:	ldr	pc, [ip, #1144]!	; 0x478

00011bd4 <ferror@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #36, 20	; 0x24000
   11bdc:	ldr	pc, [ip, #1136]!	; 0x470

00011be0 <_exit@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #36, 20	; 0x24000
   11be8:	ldr	pc, [ip, #1128]!	; 0x468

00011bec <memcpy@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #36, 20	; 0x24000
   11bf4:	ldr	pc, [ip, #1120]!	; 0x460

00011bf8 <execlp@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #36, 20	; 0x24000
   11c00:	ldr	pc, [ip, #1112]!	; 0x458

00011c04 <pthread_mutex_init@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #36, 20	; 0x24000
   11c0c:	ldr	pc, [ip, #1104]!	; 0x450

00011c10 <__strtoull_internal@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #36, 20	; 0x24000
   11c18:	ldr	pc, [ip, #1096]!	; 0x448

00011c1c <mbsinit@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #36, 20	; 0x24000
   11c24:	ldr	pc, [ip, #1088]!	; 0x440

00011c28 <signal@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #36, 20	; 0x24000
   11c30:	ldr	pc, [ip, #1080]!	; 0x438

00011c34 <__sched_cpucount@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #36, 20	; 0x24000
   11c3c:	ldr	pc, [ip, #1072]!	; 0x430

00011c40 <strtold@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #36, 20	; 0x24000
   11c48:	ldr	pc, [ip, #1064]!	; 0x428

00011c4c <ftruncate64@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #36, 20	; 0x24000
   11c54:	ldr	pc, [ip, #1056]!	; 0x420

00011c58 <fwrite_unlocked@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #36, 20	; 0x24000
   11c60:	ldr	pc, [ip, #1048]!	; 0x418

00011c64 <memcmp@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #36, 20	; 0x24000
   11c6c:	ldr	pc, [ip, #1040]!	; 0x410

00011c70 <dcgettext@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #36, 20	; 0x24000
   11c78:	ldr	pc, [ip, #1032]!	; 0x408

00011c7c <__stack_chk_fail@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #36, 20	; 0x24000
   11c84:	ldr	pc, [ip, #1024]!	; 0x400

00011c88 <pthread_cond_init@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #36, 20	; 0x24000
   11c90:	ldr	pc, [ip, #1016]!	; 0x3f8

00011c94 <sysconf@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #36, 20	; 0x24000
   11c9c:	ldr	pc, [ip, #1008]!	; 0x3f0

00011ca0 <unlink@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #36, 20	; 0x24000
   11ca8:	ldr	pc, [ip, #1000]!	; 0x3e8

00011cac <dup2@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #36, 20	; 0x24000
   11cb4:	ldr	pc, [ip, #992]!	; 0x3e0

00011cb8 <getrlimit64@plt>:
   11cb8:	add	ip, pc, #0, 12
   11cbc:	add	ip, ip, #36, 20	; 0x24000
   11cc0:	ldr	pc, [ip, #984]!	; 0x3d8

00011cc4 <realloc@plt>:
   11cc4:	add	ip, pc, #0, 12
   11cc8:	add	ip, ip, #36, 20	; 0x24000
   11ccc:	ldr	pc, [ip, #976]!	; 0x3d0

00011cd0 <sigismember@plt>:
   11cd0:	add	ip, pc, #0, 12
   11cd4:	add	ip, ip, #36, 20	; 0x24000
   11cd8:	ldr	pc, [ip, #968]!	; 0x3c8

00011cdc <textdomain@plt>:
   11cdc:	add	ip, pc, #0, 12
   11ce0:	add	ip, ip, #36, 20	; 0x24000
   11ce4:	ldr	pc, [ip, #960]!	; 0x3c0

00011ce8 <iswcntrl@plt>:
   11ce8:	add	ip, pc, #0, 12
   11cec:	add	ip, ip, #36, 20	; 0x24000
   11cf0:	ldr	pc, [ip, #952]!	; 0x3b8

00011cf4 <fflush_unlocked@plt>:
   11cf4:	add	ip, pc, #0, 12
   11cf8:	add	ip, ip, #36, 20	; 0x24000
   11cfc:	ldr	pc, [ip, #944]!	; 0x3b0

00011d00 <iswprint@plt>:
   11d00:	add	ip, pc, #0, 12
   11d04:	add	ip, ip, #36, 20	; 0x24000
   11d08:	ldr	pc, [ip, #936]!	; 0x3a8

00011d0c <__fxstat64@plt>:
   11d0c:	add	ip, pc, #0, 12
   11d10:	add	ip, ip, #36, 20	; 0x24000
   11d14:	ldr	pc, [ip, #928]!	; 0x3a0

00011d18 <sigaction@plt>:
   11d18:	add	ip, pc, #0, 12
   11d1c:	add	ip, ip, #36, 20	; 0x24000
   11d20:	ldr	pc, [ip, #920]!	; 0x398

00011d24 <mkostemp64@plt>:
   11d24:	add	ip, pc, #0, 12
   11d28:	add	ip, ip, #36, 20	; 0x24000
   11d2c:	ldr	pc, [ip, #912]!	; 0x390

00011d30 <fwrite@plt>:
   11d30:	add	ip, pc, #0, 12
   11d34:	add	ip, ip, #36, 20	; 0x24000
   11d38:	ldr	pc, [ip, #904]!	; 0x388

00011d3c <lseek64@plt>:
   11d3c:	add	ip, pc, #0, 12
   11d40:	add	ip, ip, #36, 20	; 0x24000
   11d44:	ldr	pc, [ip, #896]!	; 0x380

00011d48 <__stpcpy_chk@plt>:
   11d48:	add	ip, pc, #0, 12
   11d4c:	add	ip, ip, #36, 20	; 0x24000
   11d50:	ldr	pc, [ip, #888]!	; 0x378

00011d54 <waitpid@plt>:
   11d54:	add	ip, pc, #0, 12
   11d58:	add	ip, ip, #36, 20	; 0x24000
   11d5c:	ldr	pc, [ip, #880]!	; 0x370

00011d60 <__ctype_get_mb_cur_max@plt>:
   11d60:	add	ip, pc, #0, 12
   11d64:	add	ip, ip, #36, 20	; 0x24000
   11d68:	ldr	pc, [ip, #872]!	; 0x368

00011d6c <strcpy@plt>:
   11d6c:	add	ip, pc, #0, 12
   11d70:	add	ip, ip, #36, 20	; 0x24000
   11d74:	ldr	pc, [ip, #864]!	; 0x360

00011d78 <gettimeofday@plt>:
   11d78:	add	ip, pc, #0, 12
   11d7c:	add	ip, ip, #36, 20	; 0x24000
   11d80:	ldr	pc, [ip, #856]!	; 0x358

00011d84 <pthread_sigmask@plt>:
   11d84:	add	ip, pc, #0, 12
   11d88:	add	ip, ip, #36, 20	; 0x24000
   11d8c:	ldr	pc, [ip, #848]!	; 0x350

00011d90 <pthread_create@plt>:
   11d90:	add	ip, pc, #0, 12
   11d94:	add	ip, ip, #36, 20	; 0x24000
   11d98:	ldr	pc, [ip, #840]!	; 0x348

00011d9c <__fpending@plt>:
   11d9c:	add	ip, pc, #0, 12
   11da0:	add	ip, ip, #36, 20	; 0x24000
   11da4:	ldr	pc, [ip, #832]!	; 0x340

00011da8 <mbrtowc@plt>:
   11da8:	add	ip, pc, #0, 12
   11dac:	add	ip, ip, #36, 20	; 0x24000
   11db0:	ldr	pc, [ip, #824]!	; 0x338

00011db4 <error@plt>:
   11db4:	add	ip, pc, #0, 12
   11db8:	add	ip, ip, #36, 20	; 0x24000
   11dbc:	ldr	pc, [ip, #816]!	; 0x330

00011dc0 <open64@plt>:
   11dc0:	add	ip, pc, #0, 12
   11dc4:	add	ip, ip, #36, 20	; 0x24000
   11dc8:	ldr	pc, [ip, #808]!	; 0x328

00011dcc <strcoll@plt>:
   11dcc:	add	ip, pc, #0, 12
   11dd0:	add	ip, ip, #36, 20	; 0x24000
   11dd4:	ldr	pc, [ip, #800]!	; 0x320

00011dd8 <getenv@plt>:
   11dd8:	add	ip, pc, #0, 12
   11ddc:	add	ip, ip, #36, 20	; 0x24000
   11de0:	ldr	pc, [ip, #792]!	; 0x318

00011de4 <mkstemp64@plt>:
   11de4:	add	ip, pc, #0, 12
   11de8:	add	ip, ip, #36, 20	; 0x24000
   11dec:	ldr	pc, [ip, #784]!	; 0x310

00011df0 <sysinfo@plt>:
   11df0:	add	ip, pc, #0, 12
   11df4:	add	ip, ip, #36, 20	; 0x24000
   11df8:	ldr	pc, [ip, #776]!	; 0x308

00011dfc <malloc@plt>:
   11dfc:	add	ip, pc, #0, 12
   11e00:	add	ip, ip, #36, 20	; 0x24000
   11e04:	ldr	pc, [ip, #768]!	; 0x300

00011e08 <sigaddset@plt>:
   11e08:	add	ip, pc, #0, 12
   11e0c:	add	ip, ip, #36, 20	; 0x24000
   11e10:	ldr	pc, [ip, #760]!	; 0x2f8

00011e14 <__libc_start_main@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #36, 20	; 0x24000
   11e1c:	ldr	pc, [ip, #752]!	; 0x2f0

00011e20 <__freading@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #36, 20	; 0x24000
   11e28:	ldr	pc, [ip, #744]!	; 0x2e8

00011e2c <__ctype_toupper_loc@plt>:
   11e2c:	add	ip, pc, #0, 12
   11e30:	add	ip, ip, #36, 20	; 0x24000
   11e34:	ldr	pc, [ip, #736]!	; 0x2e0

00011e38 <__gmon_start__@plt>:
   11e38:	add	ip, pc, #0, 12
   11e3c:	add	ip, ip, #36, 20	; 0x24000
   11e40:	ldr	pc, [ip, #728]!	; 0x2d8

00011e44 <getopt_long@plt>:
   11e44:	add	ip, pc, #0, 12
   11e48:	add	ip, ip, #36, 20	; 0x24000
   11e4c:	ldr	pc, [ip, #720]!	; 0x2d0

00011e50 <__ctype_b_loc@plt>:
   11e50:	add	ip, pc, #0, 12
   11e54:	add	ip, ip, #36, 20	; 0x24000
   11e58:	ldr	pc, [ip, #712]!	; 0x2c8

00011e5c <getpid@plt>:
   11e5c:	add	ip, pc, #0, 12
   11e60:	add	ip, ip, #36, 20	; 0x24000
   11e64:	ldr	pc, [ip, #704]!	; 0x2c0

00011e68 <exit@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #36, 20	; 0x24000
   11e70:	ldr	pc, [ip, #696]!	; 0x2b8

00011e74 <strtoul@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #36, 20	; 0x24000
   11e7c:	ldr	pc, [ip, #688]!	; 0x2b0

00011e80 <strlen@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #36, 20	; 0x24000
   11e88:	ldr	pc, [ip, #680]!	; 0x2a8

00011e8c <strchr@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #36, 20	; 0x24000
   11e94:	ldr	pc, [ip, #672]!	; 0x2a0

00011e98 <strxfrm@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #36, 20	; 0x24000
   11ea0:	ldr	pc, [ip, #664]!	; 0x298

00011ea4 <__errno_location@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #36, 20	; 0x24000
   11eac:	ldr	pc, [ip, #656]!	; 0x290

00011eb0 <__cxa_atexit@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #36, 20	; 0x24000
   11eb8:	ldr	pc, [ip, #648]!	; 0x288

00011ebc <setvbuf@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #36, 20	; 0x24000
   11ec4:	ldr	pc, [ip, #640]!	; 0x280

00011ec8 <getgid@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #36, 20	; 0x24000
   11ed0:	ldr	pc, [ip, #632]!	; 0x278

00011ed4 <memset@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #36, 20	; 0x24000
   11edc:	ldr	pc, [ip, #624]!	; 0x270

00011ee0 <fgetc@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #36, 20	; 0x24000
   11ee8:	ldr	pc, [ip, #616]!	; 0x268

00011eec <__printf_chk@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #36, 20	; 0x24000
   11ef4:	ldr	pc, [ip, #608]!	; 0x260

00011ef8 <write@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #36, 20	; 0x24000
   11f00:	ldr	pc, [ip, #600]!	; 0x258

00011f04 <fileno@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #36, 20	; 0x24000
   11f0c:	ldr	pc, [ip, #592]!	; 0x250

00011f10 <__fprintf_chk@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #36, 20	; 0x24000
   11f18:	ldr	pc, [ip, #584]!	; 0x248

00011f1c <memchr@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #36, 20	; 0x24000
   11f24:	ldr	pc, [ip, #576]!	; 0x240

00011f28 <fclose@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #36, 20	; 0x24000
   11f30:	ldr	pc, [ip, #568]!	; 0x238

00011f34 <pipe@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #36, 20	; 0x24000
   11f3c:	ldr	pc, [ip, #560]!	; 0x230

00011f40 <fseeko64@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #36, 20	; 0x24000
   11f48:	ldr	pc, [ip, #552]!	; 0x228

00011f4c <fcntl64@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #36, 20	; 0x24000
   11f54:	ldr	pc, [ip, #544]!	; 0x220

00011f58 <__overflow@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #36, 20	; 0x24000
   11f60:	ldr	pc, [ip, #536]!	; 0x218

00011f64 <setlocale@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #36, 20	; 0x24000
   11f6c:	ldr	pc, [ip, #528]!	; 0x210

00011f70 <sigemptyset@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #36, 20	; 0x24000
   11f78:	ldr	pc, [ip, #520]!	; 0x208

00011f7c <fork@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #36, 20	; 0x24000
   11f84:	ldr	pc, [ip, #512]!	; 0x200

00011f88 <__explicit_bzero_chk@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #36, 20	; 0x24000
   11f90:	ldr	pc, [ip, #504]!	; 0x1f8

00011f94 <strrchr@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #36, 20	; 0x24000
   11f9c:	ldr	pc, [ip, #496]!	; 0x1f0

00011fa0 <pthread_join@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #36, 20	; 0x24000
   11fa8:	ldr	pc, [ip, #488]!	; 0x1e8

00011fac <nl_langinfo@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #36, 20	; 0x24000
   11fb4:	ldr	pc, [ip, #480]!	; 0x1e0

00011fb8 <localeconv@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #36, 20	; 0x24000
   11fc0:	ldr	pc, [ip, #472]!	; 0x1d8

00011fc4 <clearerr_unlocked@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #36, 20	; 0x24000
   11fcc:	ldr	pc, [ip, #464]!	; 0x1d0

00011fd0 <getppid@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #36, 20	; 0x24000
   11fd8:	ldr	pc, [ip, #456]!	; 0x1c8

00011fdc <fopen64@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #36, 20	; 0x24000
   11fe4:	ldr	pc, [ip, #448]!	; 0x1c0

00011fe8 <qsort@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #36, 20	; 0x24000
   11ff0:	ldr	pc, [ip, #440]!	; 0x1b8

00011ff4 <pipe2@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #36, 20	; 0x24000
   11ffc:	ldr	pc, [ip, #432]!	; 0x1b0

00012000 <pthread_cond_wait@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #36, 20	; 0x24000
   12008:	ldr	pc, [ip, #424]!	; 0x1a8

0001200c <euidaccess@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #36, 20	; 0x24000
   12014:	ldr	pc, [ip, #416]!	; 0x1a0

00012018 <sched_getaffinity@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #36, 20	; 0x24000
   12020:	ldr	pc, [ip, #408]!	; 0x198

00012024 <bindtextdomain@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #36, 20	; 0x24000
   1202c:	ldr	pc, [ip, #400]!	; 0x190

00012030 <fread_unlocked@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #36, 20	; 0x24000
   12038:	ldr	pc, [ip, #392]!	; 0x188

0001203c <__xstat64@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #36, 20	; 0x24000
   12044:	ldr	pc, [ip, #384]!	; 0x180

00012048 <strncmp@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #36, 20	; 0x24000
   12050:	ldr	pc, [ip, #376]!	; 0x178

00012054 <pthread_cond_signal@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #36, 20	; 0x24000
   1205c:	ldr	pc, [ip, #368]!	; 0x170

00012060 <abort@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #36, 20	; 0x24000
   12068:	ldr	pc, [ip, #360]!	; 0x168

0001206c <close@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #36, 20	; 0x24000
   12074:	ldr	pc, [ip, #352]!	; 0x160

00012078 <dcngettext@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #36, 20	; 0x24000
   12080:	ldr	pc, [ip, #344]!	; 0x158

00012084 <__assert_fail@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #36, 20	; 0x24000
   1208c:	ldr	pc, [ip, #336]!	; 0x150

Disassembly of section .text:

00012090 <_obstack_begin@@Base-0xfd98>:
   12090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12094:	vpush	{d8-d10}
   12098:	ldr	r3, [pc, #1168]	; 12530 <__assert_fail@plt+0x4ac>
   1209c:	mov	r6, r1
   120a0:	mov	r4, #2
   120a4:	sub	sp, sp, #700	; 0x2bc
   120a8:	ldr	r3, [r3]
   120ac:	str	r0, [sp, #36]	; 0x24
   120b0:	ldr	r0, [pc, #1148]	; 12534 <__assert_fail@plt+0x4b0>
   120b4:	str	r3, [sp, #692]	; 0x2b4
   120b8:	bl	11dd8 <getenv@plt>
   120bc:	ldr	r5, [pc, #1308]	; 125e0 <__assert_fail@plt+0x55c>
   120c0:	adds	r3, r0, #0
   120c4:	movne	r3, #1
   120c8:	str	r3, [sp, #16]
   120cc:	str	r0, [sp, #60]	; 0x3c
   120d0:	bl	1cac4 <__assert_fail@plt+0xaa40>
   120d4:	sub	r3, r0, #199680	; 0x30c00
   120d8:	sub	r3, r3, #432	; 0x1b0
   120dc:	cmp	r3, #696	; 0x2b8
   120e0:	movls	r3, #0
   120e4:	movhi	r3, #1
   120e8:	ldr	r0, [r6]
   120ec:	str	r3, [sp, #24]
   120f0:	bl	1cb44 <__assert_fail@plt+0xaac0>
   120f4:	ldr	r1, [pc, #1176]	; 12594 <__assert_fail@plt+0x510>
   120f8:	mov	r0, #6
   120fc:	bl	11f64 <setlocale@plt>
   12100:	ldr	r1, [pc, #1072]	; 12538 <__assert_fail@plt+0x4b4>
   12104:	str	r0, [sp, #56]	; 0x38
   12108:	ldr	r0, [pc, #1068]	; 1253c <__assert_fail@plt+0x4b8>
   1210c:	bl	12024 <bindtextdomain@plt>
   12110:	ldr	r0, [pc, #1060]	; 1253c <__assert_fail@plt+0x4b8>
   12114:	bl	11cdc <textdomain@plt>
   12118:	ldr	r3, [pc, #1056]	; 12540 <__assert_fail@plt+0x4bc>
   1211c:	mov	r0, #3
   12120:	str	r4, [r3]
   12124:	bl	1aec8 <__assert_fail@plt+0x8e44>
   12128:	strb	r0, [r5, #1064]	; 0x428
   1212c:	mov	r0, r4
   12130:	bl	1aec8 <__assert_fail@plt+0x8e44>
   12134:	mov	fp, r0
   12138:	strb	r0, [r5, #1384]	; 0x568
   1213c:	bl	11fb8 <localeconv@plt>
   12140:	ldr	r2, [r0]
   12144:	ldrb	r3, [r2]
   12148:	cmp	r3, #0
   1214c:	str	r3, [r5, #4]
   12150:	beq	12274 <__assert_fail@plt+0x1f0>
   12154:	ldrb	r3, [r2, #1]
   12158:	cmp	r3, #0
   1215c:	bne	12274 <__assert_fail@plt+0x1f0>
   12160:	ldr	r2, [r0, #4]
   12164:	ldr	r1, [pc, #1140]	; 125e0 <__assert_fail@plt+0x55c>
   12168:	ldrb	r3, [r2]
   1216c:	cmp	r3, #0
   12170:	str	r3, [r1]
   12174:	beq	12264 <__assert_fail@plt+0x1e0>
   12178:	ldrb	r3, [r2, #1]
   1217c:	cmp	r3, #0
   12180:	bne	12264 <__assert_fail@plt+0x1e0>
   12184:	ldr	r3, [pc, #1108]	; 125e0 <__assert_fail@plt+0x55c>
   12188:	mov	r5, #0
   1218c:	ldr	r4, [pc, #944]	; 12544 <__assert_fail@plt+0x4c0>
   12190:	strb	r5, [r3, #1352]	; 0x548
   12194:	bl	11e50 <__ctype_b_loc@plt>
   12198:	sub	r9, r4, #508	; 0x1fc
   1219c:	add	r7, r4, #256	; 0x100
   121a0:	sub	r9, r9, #3
   121a4:	add	r7, r7, #1
   121a8:	mov	sl, #1
   121ac:	mov	r8, r0
   121b0:	bl	11e2c <__ctype_toupper_loc@plt>
   121b4:	mov	r3, r5
   121b8:	sub	r5, r4, #256	; 0x100
   121bc:	b	12208 <__assert_fail@plt+0x184>
   121c0:	lsr	r1, lr, #14
   121c4:	eor	r1, r1, #1
   121c8:	tst	lr, #8
   121cc:	and	r1, r1, #1
   121d0:	strb	r1, [r7, r3]
   121d4:	strb	ip, [r9, r3]
   121d8:	movne	r2, #0
   121dc:	bne	121ec <__assert_fail@plt+0x168>
   121e0:	cmp	r3, #10
   121e4:	orreq	r2, r2, #1
   121e8:	eor	r2, r2, #1
   121ec:	ldr	r1, [r0]
   121f0:	strb	r2, [r4, #1]!
   121f4:	ldr	r2, [r1, r3, lsl #2]
   121f8:	add	r3, r3, #1
   121fc:	cmp	r3, #256	; 0x100
   12200:	strb	r2, [r5, #1]!
   12204:	beq	12284 <__assert_fail@plt+0x200>
   12208:	ldr	r1, [r8]
   1220c:	lsl	r2, r3, #1
   12210:	ldrh	lr, [r1, r2]
   12214:	and	r2, lr, #1
   12218:	uxth	ip, r2
   1221c:	cmp	ip, #0
   12220:	movne	ip, #1
   12224:	bne	121c0 <__assert_fail@plt+0x13c>
   12228:	cmp	r3, #10
   1222c:	bne	121c0 <__assert_fail@plt+0x13c>
   12230:	ldrh	r3, [r1, #20]
   12234:	ldr	r2, [r0]
   12238:	ldr	r1, [pc, #928]	; 125e0 <__assert_fail@plt+0x55c>
   1223c:	strb	ip, [r4, #1]!
   12240:	lsr	r3, r3, #14
   12244:	ldr	r2, [r2, #40]	; 0x28
   12248:	eor	r3, r3, #1
   1224c:	and	r3, r3, #1
   12250:	strb	r3, [r1, #786]	; 0x312
   12254:	strb	sl, [r1, #18]
   12258:	strb	r2, [r5, #1]!
   1225c:	mov	r3, #11
   12260:	b	12208 <__assert_fail@plt+0x184>
   12264:	ldr	r2, [pc, #884]	; 125e0 <__assert_fail@plt+0x55c>
   12268:	mvn	r3, #0
   1226c:	str	r3, [r2]
   12270:	b	12184 <__assert_fail@plt+0x100>
   12274:	ldr	r2, [pc, #868]	; 125e0 <__assert_fail@plt+0x55c>
   12278:	mov	r3, #46	; 0x2e
   1227c:	str	r3, [r2, #4]
   12280:	b	12160 <__assert_fail@plt+0xdc>
   12284:	cmp	fp, #0
   12288:	beq	12344 <__assert_fail@plt+0x2c0>
   1228c:	mov	r9, #0
   12290:	ldr	sl, [pc, #800]	; 125b8 <__assert_fail@plt+0x534>
   12294:	mov	r7, r9
   12298:	add	r0, r9, #131072	; 0x20000
   1229c:	add	r0, r0, #14
   122a0:	bl	11fac <nl_langinfo@plt>
   122a4:	mov	fp, r0
   122a8:	bl	11e80 <strlen@plt>
   122ac:	mov	r4, r0
   122b0:	add	r0, r0, #1
   122b4:	bl	20424 <__assert_fail@plt+0xe3a0>
   122b8:	cmp	r4, #0
   122bc:	str	r0, [sl, r9, lsl #3]
   122c0:	add	r9, r9, #1
   122c4:	add	r3, sl, r9, lsl #3
   122c8:	str	r9, [r3, #-4]
   122cc:	beq	13094 <__assert_fail@plt+0x1010>
   122d0:	sub	lr, r4, #1
   122d4:	ldr	r5, [r8]
   122d8:	add	lr, fp, lr
   122dc:	sub	r2, fp, #1
   122e0:	mov	r4, #0
   122e4:	mov	r1, r0
   122e8:	ldrb	r3, [r2, #1]!
   122ec:	mov	fp, r1
   122f0:	lsl	ip, r3, #1
   122f4:	ldrh	ip, [r5, ip]
   122f8:	tst	ip, #1
   122fc:	bne	1231c <__assert_fail@plt+0x298>
   12300:	ldr	ip, [pc, #728]	; 125e0 <__assert_fail@plt+0x55c>
   12304:	add	r4, r4, #1
   12308:	add	r3, ip, r3
   1230c:	ldrb	r3, [r3, #264]	; 0x108
   12310:	strb	r3, [r1]
   12314:	add	r1, r0, r4
   12318:	mov	fp, r1
   1231c:	cmp	lr, r2
   12320:	bne	122e8 <__assert_fail@plt+0x264>
   12324:	cmp	r9, #12
   12328:	strb	r7, [fp]
   1232c:	bne	12298 <__assert_fail@plt+0x214>
   12330:	mov	r1, r9
   12334:	ldr	r3, [pc, #524]	; 12548 <__assert_fail@plt+0x4c4>
   12338:	mov	r2, #8
   1233c:	ldr	r0, [pc, #628]	; 125b8 <__assert_fail@plt+0x534>
   12340:	bl	11fe8 <qsort@plt>
   12344:	ldr	r9, [pc, #512]	; 1254c <__assert_fail@plt+0x4c8>
   12348:	ldr	r5, [pc, #512]	; 12550 <__assert_fail@plt+0x4cc>
   1234c:	add	r0, r9, #8
   12350:	bl	11f70 <sigemptyset@plt>
   12354:	add	r8, r9, #8
   12358:	add	r7, r5, #40	; 0x28
   1235c:	mov	r4, r5
   12360:	mov	sl, #14
   12364:	b	1236c <__assert_fail@plt+0x2e8>
   12368:	ldr	sl, [r4, #4]!
   1236c:	add	r2, sp, #464	; 0x1d0
   12370:	mov	r1, #0
   12374:	mov	r0, sl
   12378:	bl	11d18 <sigaction@plt>
   1237c:	ldr	r3, [sp, #464]	; 0x1d0
   12380:	cmp	r3, #1
   12384:	beq	12394 <__assert_fail@plt+0x310>
   12388:	mov	r1, sl
   1238c:	mov	r0, r8
   12390:	bl	11e08 <sigaddset@plt>
   12394:	cmp	r7, r4
   12398:	bne	12368 <__assert_fail@plt+0x2e4>
   1239c:	ldr	r3, [pc, #432]	; 12554 <__assert_fail@plt+0x4d0>
   123a0:	add	r1, r9, #8
   123a4:	add	r0, sp, #468	; 0x1d4
   123a8:	mov	r2, #128	; 0x80
   123ac:	str	r3, [sp, #464]	; 0x1d0
   123b0:	mov	r7, r1
   123b4:	bl	11bec <memcpy@plt>
   123b8:	mov	r3, #0
   123bc:	mov	r8, #14
   123c0:	str	r3, [sp, #596]	; 0x254
   123c4:	b	123d4 <__assert_fail@plt+0x350>
   123c8:	cmp	r4, r5
   123cc:	beq	12400 <__assert_fail@plt+0x37c>
   123d0:	ldr	r8, [r5, #4]!
   123d4:	mov	r1, r8
   123d8:	mov	r0, r7
   123dc:	bl	11cd0 <sigismember@plt>
   123e0:	cmp	r0, #0
   123e4:	beq	123c8 <__assert_fail@plt+0x344>
   123e8:	mov	r0, r8
   123ec:	mov	r2, #0
   123f0:	add	r1, sp, #464	; 0x1d0
   123f4:	bl	11d18 <sigaction@plt>
   123f8:	cmp	r4, r5
   123fc:	bne	123d0 <__assert_fail@plt+0x34c>
   12400:	mov	r1, #0
   12404:	mov	r0, #17
   12408:	bl	11c28 <signal@plt>
   1240c:	ldr	r0, [pc, #324]	; 12558 <__assert_fail@plt+0x4d4>
   12410:	bl	22c1c <_obstack_memory_used@@Base+0xbfc>
   12414:	mov	r2, #36	; 0x24
   12418:	mov	r1, #0
   1241c:	add	r0, sp, #180	; 0xb4
   12420:	bl	11ed4 <memset@plt>
   12424:	ldr	r2, [sp, #36]	; 0x24
   12428:	lsrs	r3, r2, #30
   1242c:	movne	r3, #1
   12430:	moveq	r3, #0
   12434:	lsls	r0, r2, #2
   12438:	movmi	r3, #1
   1243c:	str	r3, [sp, #40]	; 0x28
   12440:	cmp	r3, #0
   12444:	mvn	r3, #0
   12448:	str	r3, [sp, #184]	; 0xb8
   1244c:	str	r3, [sp, #176]	; 0xb0
   12450:	bne	14948 <__assert_fail@plt+0x28c4>
   12454:	bl	20424 <__assert_fail@plt+0xe3a0>
   12458:	ldr	r3, [sp, #40]	; 0x28
   1245c:	vldr	d9, [pc, #188]	; 12520 <__assert_fail@plt+0x49c>
   12460:	vldr	d8, [pc, #192]	; 12528 <__assert_fail@plt+0x4a4>
   12464:	ldr	r9, [pc, #240]	; 1255c <__assert_fail@plt+0x4d8>
   12468:	mov	r7, r3
   1246c:	str	r3, [sp, #32]
   12470:	str	r3, [sp, #28]
   12474:	mov	r4, r3
   12478:	str	r3, [sp, #52]	; 0x34
   1247c:	str	r3, [sp, #44]	; 0x2c
   12480:	str	r3, [sp, #48]	; 0x30
   12484:	str	r3, [sp, #20]
   12488:	ldr	sl, [sp, #36]	; 0x24
   1248c:	mov	fp, r0
   12490:	b	12500 <__assert_fail@plt+0x47c>
   12494:	ldr	r3, [sp, #16]
   12498:	cmp	r4, #0
   1249c:	moveq	r3, #0
   124a0:	cmp	r3, #0
   124a4:	beq	12608 <__assert_fail@plt+0x584>
   124a8:	ldr	r3, [sp, #24]
   124ac:	ldr	r2, [sp, #20]
   124b0:	eor	r3, r3, #1
   124b4:	ldr	r5, [pc, #236]	; 125a8 <__assert_fail@plt+0x524>
   124b8:	cmp	r2, #0
   124bc:	orrne	r3, r3, #1
   124c0:	cmp	r3, #0
   124c4:	ldr	r3, [r5]
   124c8:	bne	124e4 <__assert_fail@plt+0x460>
   124cc:	cmp	sl, r3
   124d0:	beq	12b2c <__assert_fail@plt+0xaa8>
   124d4:	ldr	r2, [r6, r3, lsl #2]
   124d8:	ldrb	r1, [r2]
   124dc:	cmp	r1, #45	; 0x2d
   124e0:	beq	125e4 <__assert_fail@plt+0x560>
   124e4:	cmp	sl, r3
   124e8:	ble	147f0 <__assert_fail@plt+0x276c>
   124ec:	ldr	r2, [r6, r3, lsl #2]
   124f0:	add	r3, r3, #1
   124f4:	str	r2, [fp, r4, lsl #2]
   124f8:	add	r4, r4, #1
   124fc:	str	r3, [r5]
   12500:	mvn	r3, #0
   12504:	cmn	r7, #1
   12508:	str	r3, [sp, #108]	; 0x6c
   1250c:	bne	12494 <__assert_fail@plt+0x410>
   12510:	ldr	r5, [pc, #144]	; 125a8 <__assert_fail@plt+0x524>
   12514:	ldr	r3, [r5]
   12518:	b	124e4 <__assert_fail@plt+0x460>
   1251c:	nop			; (mov r0, r0)
   12520:	andeq	r0, r0, r0
   12524:	subsmi	r0, r9, r0
   12528:	andeq	r0, r0, r0
   1252c:	mvnsmi	r0, #0
   12530:	andeq	r5, r3, r0, lsl #30
   12534:	andeq	r4, r2, ip, lsr r3
   12538:	andeq	r4, r2, ip, asr #6
   1253c:	muleq	r2, r0, r2
   12540:	andeq	r6, r3, r8, ror r2
   12544:	andeq	r6, r3, pc, ror #9
   12548:	andeq	r5, r1, r4, lsr #2
   1254c:	andeq	r6, r3, r8, lsr #15
   12550:	andeq	r2, r2, r4, lsl #27
   12554:			; <UNDEFINED> instruction: 0x000151bc
   12558:			; <UNDEFINED> instruction: 0x000168bc
   1255c:			; <UNDEFINED> instruction: 0x00022db0
   12560:	andeq	r2, r2, r0, lsr #31
   12564:	andeq	r0, r0, sl, lsl #2
   12568:			; <UNDEFINED> instruction: 0x000243b8
   1256c:	andeq	r6, r3, r4, ror r2
   12570:	andeq	r4, r2, r0, asr #7
   12574:	ldrdeq	r4, [r2], -r0
   12578:	andeq	r3, r2, r0, lsr #2
   1257c:	eoreq	r6, r0, sp, lsr #22
   12580:	strdeq	r4, [r2], -r0
   12584:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   12588:	strdeq	r4, [r2], -r8
   1258c:	andeq	r4, r2, r8, ror r8
   12590:	andeq	r4, r2, r8, lsr #14
   12594:	andeq	r3, r2, r8, lsr r8
   12598:	andeq	r4, r2, ip, ror r5
   1259c:	andeq	r4, r2, r4, ror #8
   125a0:	andeq	r2, r2, r0, asr #24
   125a4:	andeq	r4, r2, r0, lsl #9
   125a8:	andeq	r6, r3, r8, asr #5
   125ac:	andeq	r4, r2, ip, asr #10
   125b0:	andeq	r4, r2, r0, lsr r5
   125b4:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   125b8:	andeq	r6, r3, ip, ror #3
   125bc:	andeq	r6, r3, r0, ror r2
   125c0:	ldrdeq	r6, [r3], -ip
   125c4:	andeq	r4, r2, r0, lsr #11
   125c8:	andeq	r4, r2, ip, lsr #11
   125cc:	andeq	r4, r2, ip, lsl #5
   125d0:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   125d4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   125d8:	andeq	r6, r3, ip, lsl #14
   125dc:	andeq	r6, r3, r0, ror #5
   125e0:	andeq	r6, r3, r8, ror #5
   125e4:	ldrb	r1, [r2, #1]
   125e8:	cmp	r1, #111	; 0x6f
   125ec:	bne	124e4 <__assert_fail@plt+0x460>
   125f0:	ldrb	r2, [r2, #2]
   125f4:	cmp	r2, #0
   125f8:	bne	12608 <__assert_fail@plt+0x584>
   125fc:	add	r2, r3, #1
   12600:	cmp	r2, sl
   12604:	beq	124e4 <__assert_fail@plt+0x460>
   12608:	add	r3, sp, #108	; 0x6c
   1260c:	str	r3, [sp]
   12610:	ldr	r2, [pc, #-184]	; 12560 <__assert_fail@plt+0x4dc>
   12614:	mov	r3, r9
   12618:	mov	r1, r6
   1261c:	mov	r0, sl
   12620:	bl	11e44 <getopt_long@plt>
   12624:	cmn	r0, #1
   12628:	mov	r7, r0
   1262c:	beq	12510 <__assert_fail@plt+0x48c>
   12630:	ldr	r2, [pc, #-212]	; 12564 <__assert_fail@plt+0x4e0>
   12634:	add	r3, r0, #3
   12638:	cmp	r3, r2
   1263c:	ldrls	pc, [pc, r3, lsl #2]
   12640:	b	1479c <__assert_fail@plt+0x2718>
   12644:	andeq	r3, r1, r4, asr r4
   12648:	andeq	r4, r1, ip, asr r6
   1264c:	muleq	r1, ip, r7
   12650:	muleq	r1, ip, r7
   12654:	andeq	r3, r1, r8, lsr #8
   12658:	muleq	r1, ip, r7
   1265c:	muleq	r1, ip, r7
   12660:	muleq	r1, ip, r7
   12664:	muleq	r1, ip, r7
   12668:	muleq	r1, ip, r7
   1266c:	muleq	r1, ip, r7
   12670:	muleq	r1, ip, r7
   12674:	muleq	r1, ip, r7
   12678:	muleq	r1, ip, r7
   1267c:	muleq	r1, ip, r7
   12680:	muleq	r1, ip, r7
   12684:	muleq	r1, ip, r7
   12688:	muleq	r1, ip, r7
   1268c:	muleq	r1, ip, r7
   12690:	muleq	r1, ip, r7
   12694:	muleq	r1, ip, r7
   12698:	muleq	r1, ip, r7
   1269c:	muleq	r1, ip, r7
   126a0:	muleq	r1, ip, r7
   126a4:	muleq	r1, ip, r7
   126a8:	muleq	r1, ip, r7
   126ac:	muleq	r1, ip, r7
   126b0:	muleq	r1, ip, r7
   126b4:	muleq	r1, ip, r7
   126b8:	muleq	r1, ip, r7
   126bc:	muleq	r1, ip, r7
   126c0:	muleq	r1, ip, r7
   126c4:	muleq	r1, ip, r7
   126c8:	muleq	r1, ip, r7
   126cc:	muleq	r1, ip, r7
   126d0:	muleq	r1, ip, r7
   126d4:	muleq	r1, ip, r7
   126d8:	muleq	r1, ip, r7
   126dc:	muleq	r1, ip, r7
   126e0:	muleq	r1, ip, r7
   126e4:	muleq	r1, ip, r7
   126e8:	muleq	r1, ip, r7
   126ec:	muleq	r1, ip, r7
   126f0:	muleq	r1, ip, r7
   126f4:	muleq	r1, ip, r7
   126f8:	muleq	r1, ip, r7
   126fc:	muleq	r1, ip, r7
   12700:	muleq	r1, ip, r7
   12704:	muleq	r1, ip, r7
   12708:	muleq	r1, ip, r7
   1270c:	muleq	r1, ip, r7
   12710:	muleq	r1, ip, r7
   12714:	muleq	r1, ip, r7
   12718:	muleq	r1, ip, r7
   1271c:	muleq	r1, ip, r7
   12720:	muleq	r1, ip, r7
   12724:	muleq	r1, ip, r7
   12728:	muleq	r1, ip, r7
   1272c:	muleq	r1, ip, r7
   12730:	muleq	r1, ip, r7
   12734:	muleq	r1, ip, r7
   12738:	muleq	r1, ip, r7
   1273c:	muleq	r1, ip, r7
   12740:	muleq	r1, ip, r7
   12744:	muleq	r1, ip, r7
   12748:	muleq	r1, ip, r7
   1274c:	muleq	r1, ip, r7
   12750:	muleq	r1, ip, r7
   12754:	muleq	r1, ip, r7
   12758:	muleq	r1, ip, r7
   1275c:	andeq	r2, r1, ip, lsl #22
   12760:	muleq	r1, ip, r7
   12764:	muleq	r1, ip, r7
   12768:	muleq	r1, ip, r7
   1276c:	muleq	r1, ip, r7
   12770:	muleq	r1, ip, r7
   12774:	muleq	r1, ip, r7
   12778:	muleq	r1, ip, r7
   1277c:	muleq	r1, ip, r7
   12780:	muleq	r1, ip, r7
   12784:	andeq	r2, r1, r8, lsr #21
   12788:	muleq	r1, ip, r7
   1278c:	muleq	r1, ip, r7
   12790:	muleq	r1, ip, r7
   12794:	muleq	r1, ip, r7
   12798:	andeq	r2, r1, r8, lsr #21
   1279c:	andeq	r3, r1, r8, asr r3
   127a0:	andeq	r3, r1, r8, asr #6
   127a4:	muleq	r1, ip, r7
   127a8:	andeq	r2, r1, r8, lsr #21
   127ac:	muleq	r1, ip, r7
   127b0:	muleq	r1, ip, r7
   127b4:	muleq	r1, ip, r7
   127b8:	muleq	r1, ip, r7
   127bc:	muleq	r1, ip, r7
   127c0:	muleq	r1, ip, r7
   127c4:	muleq	r1, ip, r7
   127c8:	muleq	r1, ip, r7
   127cc:	muleq	r1, ip, r7
   127d0:	muleq	r1, ip, r7
   127d4:	muleq	r1, ip, r7
   127d8:	andeq	r2, r1, r8, lsr #21
   127dc:	andeq	r2, r1, ip, lsl #22
   127e0:	andeq	r2, r1, r8, lsr #21
   127e4:	muleq	r1, ip, r7
   127e8:	andeq	r2, r1, r8, lsr #21
   127ec:	andeq	r2, r1, r8, lsr #21
   127f0:	andeq	r2, r1, r8, lsr #21
   127f4:	andeq	r2, r1, r8, lsr #21
   127f8:	muleq	r1, ip, r7
   127fc:	muleq	r1, ip, r4
   12800:	muleq	r1, ip, r7
   12804:	muleq	r1, r0, r4
   12808:	andeq	r2, r1, r8, lsr #21
   1280c:	andeq	r3, r1, r0, ror #10
   12810:	muleq	r1, ip, r7
   12814:	muleq	r1, ip, r7
   12818:	andeq	r2, r1, r8, lsr #21
   1281c:	andeq	r3, r1, r8, lsr r3
   12820:	andeq	r3, r1, r8, ror #5
   12824:	ldrdeq	r3, [r1], -r8
   12828:	muleq	r1, ip, r7
   1282c:	muleq	r1, ip, r7
   12830:	muleq	r1, ip, r7
   12834:	muleq	r1, r4, r2
   12838:	andeq	r3, r1, r4, lsl #5
   1283c:	muleq	r1, ip, r7
   12840:	muleq	r1, ip, r7
   12844:	muleq	r1, ip, r7
   12848:	muleq	r1, ip, r7
   1284c:	muleq	r1, ip, r7
   12850:	muleq	r1, ip, r7
   12854:	muleq	r1, ip, r7
   12858:	muleq	r1, ip, r7
   1285c:	muleq	r1, ip, r7
   12860:	muleq	r1, ip, r7
   12864:	muleq	r1, ip, r7
   12868:	muleq	r1, ip, r7
   1286c:	muleq	r1, ip, r7
   12870:	muleq	r1, ip, r7
   12874:	muleq	r1, ip, r7
   12878:	muleq	r1, ip, r7
   1287c:	muleq	r1, ip, r7
   12880:	muleq	r1, ip, r7
   12884:	muleq	r1, ip, r7
   12888:	muleq	r1, ip, r7
   1288c:	muleq	r1, ip, r7
   12890:	muleq	r1, ip, r7
   12894:	muleq	r1, ip, r7
   12898:	muleq	r1, ip, r7
   1289c:	muleq	r1, ip, r7
   128a0:	muleq	r1, ip, r7
   128a4:	muleq	r1, ip, r7
   128a8:	muleq	r1, ip, r7
   128ac:	muleq	r1, ip, r7
   128b0:	muleq	r1, ip, r7
   128b4:	muleq	r1, ip, r7
   128b8:	muleq	r1, ip, r7
   128bc:	muleq	r1, ip, r7
   128c0:	muleq	r1, ip, r7
   128c4:	muleq	r1, ip, r7
   128c8:	muleq	r1, ip, r7
   128cc:	muleq	r1, ip, r7
   128d0:	muleq	r1, ip, r7
   128d4:	muleq	r1, ip, r7
   128d8:	muleq	r1, ip, r7
   128dc:	muleq	r1, ip, r7
   128e0:	muleq	r1, ip, r7
   128e4:	muleq	r1, ip, r7
   128e8:	muleq	r1, ip, r7
   128ec:	muleq	r1, ip, r7
   128f0:	muleq	r1, ip, r7
   128f4:	muleq	r1, ip, r7
   128f8:	muleq	r1, ip, r7
   128fc:	muleq	r1, ip, r7
   12900:	muleq	r1, ip, r7
   12904:	muleq	r1, ip, r7
   12908:	muleq	r1, ip, r7
   1290c:	muleq	r1, ip, r7
   12910:	muleq	r1, ip, r7
   12914:	muleq	r1, ip, r7
   12918:	muleq	r1, ip, r7
   1291c:	muleq	r1, ip, r7
   12920:	muleq	r1, ip, r7
   12924:	muleq	r1, ip, r7
   12928:	muleq	r1, ip, r7
   1292c:	muleq	r1, ip, r7
   12930:	muleq	r1, ip, r7
   12934:	muleq	r1, ip, r7
   12938:	muleq	r1, ip, r7
   1293c:	muleq	r1, ip, r7
   12940:	muleq	r1, ip, r7
   12944:	muleq	r1, ip, r7
   12948:	muleq	r1, ip, r7
   1294c:	muleq	r1, ip, r7
   12950:	muleq	r1, ip, r7
   12954:	muleq	r1, ip, r7
   12958:	muleq	r1, ip, r7
   1295c:	muleq	r1, ip, r7
   12960:	muleq	r1, ip, r7
   12964:	muleq	r1, ip, r7
   12968:	muleq	r1, ip, r7
   1296c:	muleq	r1, ip, r7
   12970:	muleq	r1, ip, r7
   12974:	muleq	r1, ip, r7
   12978:	muleq	r1, ip, r7
   1297c:	muleq	r1, ip, r7
   12980:	muleq	r1, ip, r7
   12984:	muleq	r1, ip, r7
   12988:	muleq	r1, ip, r7
   1298c:	muleq	r1, ip, r7
   12990:	muleq	r1, ip, r7
   12994:	muleq	r1, ip, r7
   12998:	muleq	r1, ip, r7
   1299c:	muleq	r1, ip, r7
   129a0:	muleq	r1, ip, r7
   129a4:	muleq	r1, ip, r7
   129a8:	muleq	r1, ip, r7
   129ac:	muleq	r1, ip, r7
   129b0:	muleq	r1, ip, r7
   129b4:	muleq	r1, ip, r7
   129b8:	muleq	r1, ip, r7
   129bc:	muleq	r1, ip, r7
   129c0:	muleq	r1, ip, r7
   129c4:	muleq	r1, ip, r7
   129c8:	muleq	r1, ip, r7
   129cc:	muleq	r1, ip, r7
   129d0:	muleq	r1, ip, r7
   129d4:	muleq	r1, ip, r7
   129d8:	muleq	r1, ip, r7
   129dc:	muleq	r1, ip, r7
   129e0:	muleq	r1, ip, r7
   129e4:	muleq	r1, ip, r7
   129e8:	muleq	r1, ip, r7
   129ec:	muleq	r1, ip, r7
   129f0:	muleq	r1, ip, r7
   129f4:	muleq	r1, ip, r7
   129f8:	muleq	r1, ip, r7
   129fc:	muleq	r1, ip, r7
   12a00:	muleq	r1, ip, r7
   12a04:	muleq	r1, ip, r7
   12a08:	muleq	r1, ip, r7
   12a0c:	muleq	r1, ip, r7
   12a10:	muleq	r1, ip, r7
   12a14:	muleq	r1, ip, r7
   12a18:	muleq	r1, ip, r7
   12a1c:	muleq	r1, ip, r7
   12a20:	muleq	r1, ip, r7
   12a24:	muleq	r1, ip, r7
   12a28:	muleq	r1, ip, r7
   12a2c:	muleq	r1, ip, r7
   12a30:	muleq	r1, ip, r7
   12a34:	muleq	r1, ip, r7
   12a38:	muleq	r1, ip, r7
   12a3c:	muleq	r1, ip, r7
   12a40:	muleq	r1, ip, r7
   12a44:	muleq	r1, ip, r7
   12a48:	muleq	r1, ip, r7
   12a4c:	muleq	r1, ip, r7
   12a50:	andeq	r2, r1, r8, asr #21
   12a54:	andeq	r3, r1, r0, asr r2
   12a58:	andeq	r3, r1, r0, asr #4
   12a5c:	andeq	r3, r1, r0, lsr r2
   12a60:	andeq	r3, r1, ip, lsl r1
   12a64:	strdeq	r3, [r1], -r0
   12a68:	andeq	r2, r1, r0, ror sl
   12a6c:	muleq	r1, ip, r0
   12a70:	ldr	r2, [pc, #-1292]	; 1256c <__assert_fail@plt+0x4e8>
   12a74:	ldr	r3, [pc, #-1184]	; 125dc <__assert_fail@plt+0x558>
   12a78:	ldr	r5, [pc, #-1248]	; 125a0 <__assert_fail@plt+0x51c>
   12a7c:	ldr	r2, [r2]
   12a80:	mov	r0, #1
   12a84:	str	r2, [sp, #4]
   12a88:	add	r2, r5, #912	; 0x390
   12a8c:	ldr	r1, [r3]
   12a90:	str	r0, [sp]
   12a94:	add	r3, r5, #904	; 0x388
   12a98:	ldr	r0, [pc, #-1336]	; 12568 <__assert_fail@plt+0x4e4>
   12a9c:	bl	19974 <__assert_fail@plt+0x78f0>
   12aa0:	add	r0, r5, r0
   12aa4:	ldrb	r7, [r0, #904]	; 0x388
   12aa8:	mov	r3, #0
   12aac:	mov	r2, #2
   12ab0:	add	r1, sp, #176	; 0xb0
   12ab4:	add	r0, sp, #660	; 0x294
   12ab8:	strb	r7, [sp, #660]	; 0x294
   12abc:	strb	r3, [sp, #661]	; 0x295
   12ac0:	bl	14fd4 <__assert_fail@plt+0x2f50>
   12ac4:	b	12500 <__assert_fail@plt+0x47c>
   12ac8:	ldr	r3, [pc, #-1268]	; 125dc <__assert_fail@plt+0x558>
   12acc:	ldr	r1, [r3]
   12ad0:	cmp	r1, #0
   12ad4:	moveq	r7, #99	; 0x63
   12ad8:	beq	12b0c <__assert_fail@plt+0xa88>
   12adc:	ldr	r3, [pc, #-1400]	; 1256c <__assert_fail@plt+0x4e8>
   12ae0:	ldr	r5, [pc, #-1352]	; 125a0 <__assert_fail@plt+0x51c>
   12ae4:	mov	r0, #1
   12ae8:	ldr	r3, [r3]
   12aec:	add	r2, r5, #944	; 0x3b0
   12af0:	str	r3, [sp, #4]
   12af4:	str	r0, [sp]
   12af8:	add	r3, r5, #940	; 0x3ac
   12afc:	ldr	r0, [pc, #-1428]	; 12570 <__assert_fail@plt+0x4ec>
   12b00:	bl	19974 <__assert_fail@plt+0x78f0>
   12b04:	add	r0, r5, r0
   12b08:	ldrb	r7, [r0, #940]	; 0x3ac
   12b0c:	ldr	r3, [sp, #20]
   12b10:	cmp	r3, #0
   12b14:	beq	12b20 <__assert_fail@plt+0xa9c>
   12b18:	cmp	r3, r7
   12b1c:	bne	147e8 <__assert_fail@plt+0x2764>
   12b20:	uxtb	r3, r7
   12b24:	str	r3, [sp, #20]
   12b28:	b	12500 <__assert_fail@plt+0x47c>
   12b2c:	ldr	r3, [sp, #28]
   12b30:	cmp	r3, #0
   12b34:	bne	1473c <__assert_fail@plt+0x26b8>
   12b38:	str	r3, [sp, #20]
   12b3c:	ldr	r3, [pc, #-1380]	; 125e0 <__assert_fail@plt+0x55c>
   12b40:	ldr	r1, [r3, #1060]	; 0x424
   12b44:	cmp	r1, #0
   12b48:	beq	13ee0 <__assert_fail@plt+0x1e5c>
   12b4c:	mov	r5, r1
   12b50:	mov	sl, #0
   12b54:	b	12bcc <__assert_fail@plt+0xb48>
   12b58:	ldrb	r3, [r5, #31]
   12b5c:	cmp	r3, #0
   12b60:	bne	12bdc <__assert_fail@plt+0xb58>
   12b64:	ldrb	r2, [sp, #200]	; 0xc8
   12b68:	ldrb	r0, [sp, #206]	; 0xce
   12b6c:	ldrb	r3, [sp, #202]	; 0xca
   12b70:	ldrb	ip, [sp, #201]	; 0xc9
   12b74:	strb	r2, [r5, #24]
   12b78:	ldrb	r2, [sp, #204]	; 0xcc
   12b7c:	strb	r0, [r5, #30]
   12b80:	strb	ip, [r5, #25]
   12b84:	ldrb	r0, [sp, #208]	; 0xd0
   12b88:	ldrb	ip, [sp, #205]	; 0xcd
   12b8c:	strb	r2, [r5, #28]
   12b90:	ldrb	r2, [sp, #207]	; 0xcf
   12b94:	strb	r3, [r5, #26]
   12b98:	ldrb	r3, [sp, #203]	; 0xcb
   12b9c:	strb	r0, [r5, #32]
   12ba0:	strb	r2, [r5, #31]
   12ba4:	ldr	r0, [sp, #192]	; 0xc0
   12ba8:	ldr	r2, [sp, #196]	; 0xc4
   12bac:	strb	ip, [r5, #29]
   12bb0:	strb	r3, [r5, #27]
   12bb4:	str	r0, [r5, #16]
   12bb8:	str	r2, [r5, #20]
   12bbc:	ldr	r5, [r5, #36]	; 0x24
   12bc0:	orr	sl, r3, sl
   12bc4:	cmp	r5, #0
   12bc8:	beq	12bf0 <__assert_fail@plt+0xb6c>
   12bcc:	mov	r0, r5
   12bd0:	bl	14e94 <__assert_fail@plt+0x2e10>
   12bd4:	cmp	r0, #0
   12bd8:	bne	12b58 <__assert_fail@plt+0xad4>
   12bdc:	ldrb	r3, [r5, #27]
   12be0:	ldr	r5, [r5, #36]	; 0x24
   12be4:	cmp	r5, #0
   12be8:	orr	sl, r3, sl
   12bec:	bne	12bcc <__assert_fail@plt+0xb48>
   12bf0:	mov	r6, r5
   12bf4:	ldrb	r3, [r1, #28]
   12bf8:	ldrb	r0, [r1, #26]
   12bfc:	b	12c08 <__assert_fail@plt+0xb84>
   12c00:	ldrb	r3, [r1, #26]
   12c04:	ldrb	r0, [r1, #28]
   12c08:	ldrb	ip, [r1, #29]
   12c0c:	add	r3, r3, r0
   12c10:	ldrb	r2, [r1, #32]
   12c14:	ldrb	r0, [r1, #27]
   12c18:	add	r3, r3, ip
   12c1c:	ldrb	ip, [r1, #30]
   12c20:	orr	r2, r2, r0
   12c24:	ldr	r0, [r1, #16]
   12c28:	add	r3, r3, ip
   12c2c:	cmp	r0, #0
   12c30:	orrne	r2, r2, #1
   12c34:	add	r3, r3, r2
   12c38:	cmp	r3, #1
   12c3c:	bgt	1471c <__assert_fail@plt+0x2698>
   12c40:	ldr	r1, [r1, #36]	; 0x24
   12c44:	cmp	r1, #0
   12c48:	bne	12c00 <__assert_fail@plt+0xb7c>
   12c4c:	ldr	r3, [pc, #-1652]	; 125e0 <__assert_fail@plt+0x55c>
   12c50:	ldrb	r3, [r3, #1353]	; 0x549
   12c54:	cmp	r3, #0
   12c58:	beq	13660 <__assert_fail@plt+0x15dc>
   12c5c:	ldr	r3, [sp, #20]
   12c60:	ldr	r2, [sp, #32]
   12c64:	cmp	r2, #0
   12c68:	cmpeq	r3, #0
   12c6c:	bne	1494c <__assert_fail@plt+0x28c8>
   12c70:	ldr	r3, [sp, #56]	; 0x38
   12c74:	cmp	r3, #0
   12c78:	beq	138e0 <__assert_fail@plt+0x185c>
   12c7c:	ldr	r1, [pc, #-1776]	; 12594 <__assert_fail@plt+0x510>
   12c80:	mov	r0, #3
   12c84:	bl	11f64 <setlocale@plt>
   12c88:	cmp	r0, #0
   12c8c:	beq	138e0 <__assert_fail@plt+0x185c>
   12c90:	ldr	r3, [pc, #-1720]	; 125e0 <__assert_fail@plt+0x55c>
   12c94:	mov	r2, #5
   12c98:	ldrb	r5, [r3, #1064]	; 0x428
   12c9c:	cmp	r5, #0
   12ca0:	bne	138a8 <__assert_fail@plt+0x1824>
   12ca4:	ldr	r1, [pc, #-1848]	; 12574 <__assert_fail@plt+0x4f0>
   12ca8:	mov	r0, r5
   12cac:	bl	11c70 <dcgettext@plt>
   12cb0:	ldr	r2, [pc, #-1856]	; 12578 <__assert_fail@plt+0x4f4>
   12cb4:	mov	r1, r5
   12cb8:	mov	r3, r0
   12cbc:	mov	r0, r5
   12cc0:	bl	11db4 <error@plt>
   12cc4:	add	lr, sp, #176	; 0xb0
   12cc8:	add	r3, sp, #216	; 0xd8
   12ccc:	mov	ip, r3
   12cd0:	str	r3, [sp, #16]
   12cd4:	ldm	lr!, {r0, r1, r2, r3}
   12cd8:	ldr	r5, [pc, #-1792]	; 125e0 <__assert_fail@plt+0x55c>
   12cdc:	stmia	ip!, {r0, r1, r2, r3}
   12ce0:	ldm	lr!, {r0, r1, r2, r3}
   12ce4:	ldr	r5, [r5, #1060]	; 0x424
   12ce8:	stmia	ip!, {r0, r1, r2, r3}
   12cec:	cmp	r5, #0
   12cf0:	ldm	lr, {r0, r1}
   12cf4:	movne	r9, #1
   12cf8:	strne	r4, [sp, #24]
   12cfc:	stm	ip, {r0, r1}
   12d00:	strne	sl, [sp, #28]
   12d04:	movne	r7, r6
   12d08:	bne	12e78 <__assert_fail@plt+0xdf4>
   12d0c:	b	13594 <__assert_fail@plt+0x1510>
   12d10:	ldrh	r1, [r5, #28]
   12d14:	cmp	r1, #0
   12d18:	bne	1300c <__assert_fail@plt+0xf88>
   12d1c:	cmp	r4, #0
   12d20:	ldrb	r1, [r5, #30]
   12d24:	bne	13018 <__assert_fail@plt+0xf94>
   12d28:	ldr	r0, [r5, #12]
   12d2c:	cmp	r0, #0
   12d30:	beq	13018 <__assert_fail@plt+0xf94>
   12d34:	cmp	r2, #0
   12d38:	bne	13b08 <__assert_fail@plt+0x1a84>
   12d3c:	cmp	r3, #0
   12d40:	bne	12d50 <__assert_fail@plt+0xccc>
   12d44:	ldrh	r2, [r5, #28]
   12d48:	cmp	r2, #0
   12d4c:	beq	12d80 <__assert_fail@plt+0xcfc>
   12d50:	ldr	r2, [r5]
   12d54:	ldr	r1, [r5, #8]
   12d58:	adds	r2, r2, #1
   12d5c:	moveq	r2, #1
   12d60:	adds	r1, r1, #1
   12d64:	moveq	r0, #1
   12d68:	movne	r0, #0
   12d6c:	cmp	r1, r2
   12d70:	movls	r1, r0
   12d74:	orrhi	r1, r0, #1
   12d78:	cmp	r1, #0
   12d7c:	bne	13eb4 <__assert_fail@plt+0x1e30>
   12d80:	ldr	r2, [sp, #232]	; 0xe8
   12d84:	cmp	r2, #0
   12d88:	beq	12d9c <__assert_fail@plt+0xd18>
   12d8c:	ldr	r1, [r5, #16]
   12d90:	cmp	r2, r1
   12d94:	moveq	r2, #0
   12d98:	streq	r2, [sp, #232]	; 0xe8
   12d9c:	ldr	r2, [sp, #236]	; 0xec
   12da0:	cmp	r2, #0
   12da4:	beq	12db8 <__assert_fail@plt+0xd34>
   12da8:	ldr	r1, [r5, #20]
   12dac:	cmp	r2, r1
   12db0:	moveq	r2, #0
   12db4:	streq	r2, [sp, #236]	; 0xec
   12db8:	ldrb	r4, [r5, #24]
   12dbc:	ldrb	r2, [sp, #242]	; 0xf2
   12dc0:	eor	r3, r3, #1
   12dc4:	eor	r8, r4, #1
   12dc8:	ldrb	r4, [sp, #240]	; 0xf0
   12dcc:	ldrb	r6, [r5, #25]
   12dd0:	ldrb	r1, [r5, #30]
   12dd4:	and	r3, r3, r2
   12dd8:	and	r4, r4, r8
   12ddc:	ldrb	lr, [r5, #28]
   12de0:	ldrb	ip, [r5, #29]
   12de4:	ldrb	r0, [r5, #27]
   12de8:	ldrb	r2, [r5, #32]
   12dec:	ldrb	r8, [sp, #246]	; 0xf6
   12df0:	strb	r3, [sp, #242]	; 0xf2
   12df4:	ldrb	r3, [r5, #31]
   12df8:	ldr	r5, [r5, #36]	; 0x24
   12dfc:	strb	r4, [sp, #240]	; 0xf0
   12e00:	ldrb	r4, [sp, #241]	; 0xf1
   12e04:	eor	r6, r6, #1
   12e08:	eor	r1, r1, #1
   12e0c:	and	r4, r4, r6
   12e10:	and	r1, r1, r8
   12e14:	strb	r4, [sp, #241]	; 0xf1
   12e18:	strb	r1, [sp, #246]	; 0xf6
   12e1c:	ldrb	r4, [sp, #245]	; 0xf5
   12e20:	ldrb	r1, [sp, #243]	; 0xf3
   12e24:	eor	ip, ip, #1
   12e28:	eor	r0, r0, #1
   12e2c:	ldrb	r6, [sp, #244]	; 0xf4
   12e30:	and	ip, ip, r4
   12e34:	and	r0, r0, r1
   12e38:	ldrb	r4, [sp, #248]	; 0xf8
   12e3c:	ldrb	r1, [sp, #247]	; 0xf7
   12e40:	eor	lr, lr, #1
   12e44:	eor	r2, r2, #1
   12e48:	eor	r3, r3, #1
   12e4c:	and	lr, lr, r6
   12e50:	and	r2, r2, r4
   12e54:	and	r3, r3, r1
   12e58:	cmp	r5, #0
   12e5c:	add	r9, r9, #1
   12e60:	strb	lr, [sp, #244]	; 0xf4
   12e64:	strb	ip, [sp, #245]	; 0xf5
   12e68:	strb	r0, [sp, #243]	; 0xf3
   12e6c:	strb	r2, [sp, #248]	; 0xf8
   12e70:	strb	r3, [sp, #247]	; 0xf7
   12e74:	beq	1358c <__assert_fail@plt+0x1508>
   12e78:	ldrb	r3, [r5, #33]	; 0x21
   12e7c:	ldr	r6, [r5]
   12e80:	ldr	r4, [r5, #8]
   12e84:	cmp	r3, #0
   12e88:	beq	12fc4 <__assert_fail@plt+0xf40>
   12e8c:	cmn	r6, #1
   12e90:	add	ip, sp, #632	; 0x278
   12e94:	moveq	r6, #0
   12e98:	mov	r3, #43	; 0x2b
   12e9c:	strh	r3, [ip]
   12ea0:	mov	r0, r6
   12ea4:	add	r2, sp, #608	; 0x260
   12ea8:	mov	r1, #0
   12eac:	bl	1c330 <__assert_fail@plt+0xa2ac>
   12eb0:	mov	r2, #25
   12eb4:	mov	r1, r0
   12eb8:	add	r0, sp, #632	; 0x278
   12ebc:	add	r0, r0, #1
   12ec0:	bl	11d48 <__stpcpy_chk@plt>
   12ec4:	ldr	r3, [pc, #-2384]	; 1257c <__assert_fail@plt+0x4f8>
   12ec8:	add	r2, sp, #608	; 0x260
   12ecc:	mov	r1, #0
   12ed0:	str	r3, [sp, #660]	; 0x294
   12ed4:	mov	r8, r0
   12ed8:	add	r0, r6, #1
   12edc:	bl	1c330 <__assert_fail@plt+0xa2ac>
   12ee0:	mov	r2, #24
   12ee4:	mov	r1, r0
   12ee8:	add	r0, sp, #660	; 0x294
   12eec:	add	r0, r0, #3
   12ef0:	bl	11d48 <__stpcpy_chk@plt>
   12ef4:	ldr	r3, [r5, #8]
   12ef8:	cmn	r3, #1
   12efc:	mov	r6, r0
   12f00:	beq	12f74 <__assert_fail@plt+0xef0>
   12f04:	ldr	r3, [pc, #-2444]	; 12580 <__assert_fail@plt+0x4fc>
   12f08:	mov	sl, r8
   12f0c:	add	r4, r4, #1
   12f10:	ldrh	r1, [r3]
   12f14:	ldrb	r2, [r3, #2]
   12f18:	mov	r0, r4
   12f1c:	strh	r1, [r8]
   12f20:	strb	r2, [sl, #2]!
   12f24:	mov	r1, #0
   12f28:	add	r2, sp, #608	; 0x260
   12f2c:	bl	1c330 <__assert_fail@plt+0xa2ac>
   12f30:	mov	r1, r0
   12f34:	mov	r0, sl
   12f38:	bl	11d6c <strcpy@plt>
   12f3c:	ldr	r3, [pc, #-2496]	; 12584 <__assert_fail@plt+0x500>
   12f40:	mov	r1, #0
   12f44:	add	r2, sp, #608	; 0x260
   12f48:	ldrh	r3, [r3]
   12f4c:	strh	r3, [r6], #1
   12f50:	ldr	r0, [r5, #12]
   12f54:	cmn	r0, #1
   12f58:	movne	r0, #0
   12f5c:	moveq	r0, #1
   12f60:	add	r0, r0, r4
   12f64:	bl	1c330 <__assert_fail@plt+0xa2ac>
   12f68:	mov	r1, r0
   12f6c:	mov	r0, r6
   12f70:	bl	11d6c <strcpy@plt>
   12f74:	mov	r2, #5
   12f78:	ldr	r1, [pc, #-2552]	; 12588 <__assert_fail@plt+0x504>
   12f7c:	mov	r0, #0
   12f80:	bl	11c70 <dcgettext@plt>
   12f84:	add	r1, sp, #632	; 0x278
   12f88:	mov	r4, r0
   12f8c:	mov	r0, #0
   12f90:	bl	1ed98 <__assert_fail@plt+0xcd14>
   12f94:	add	r1, sp, #660	; 0x294
   12f98:	mov	r6, r0
   12f9c:	mov	r0, #1
   12fa0:	bl	1ed98 <__assert_fail@plt+0xcd14>
   12fa4:	mov	r1, #0
   12fa8:	mov	r3, r6
   12fac:	mov	r2, r4
   12fb0:	str	r0, [sp]
   12fb4:	mov	r0, r1
   12fb8:	bl	11db4 <error@plt>
   12fbc:	ldr	r6, [r5]
   12fc0:	ldr	r4, [r5, #8]
   12fc4:	cmn	r6, #1
   12fc8:	beq	13b00 <__assert_fail@plt+0x1a7c>
   12fcc:	cmp	r4, r6
   12fd0:	bcs	13b00 <__assert_fail@plt+0x1a7c>
   12fd4:	mov	r2, #5
   12fd8:	ldr	r1, [pc, #-2644]	; 1258c <__assert_fail@plt+0x508>
   12fdc:	mov	r0, #0
   12fe0:	bl	11c70 <dcgettext@plt>
   12fe4:	mov	r1, #0
   12fe8:	mov	r3, r9
   12fec:	mov	r2, r0
   12ff0:	mov	r0, r1
   12ff4:	bl	11db4 <error@plt>
   12ff8:	ldr	r4, [r5, #8]
   12ffc:	mov	r2, #1
   13000:	ldrb	r3, [r5, #26]
   13004:	cmp	r3, #0
   13008:	beq	12d10 <__assert_fail@plt+0xc8c>
   1300c:	cmp	r4, #0
   13010:	mov	r1, #1
   13014:	beq	12d28 <__assert_fail@plt+0xca4>
   13018:	cmp	r2, #0
   1301c:	bne	13b08 <__assert_fail@plt+0x1a84>
   13020:	ldr	r2, [pc, #-2672]	; 125b8 <__assert_fail@plt+0x534>
   13024:	ldr	r2, [r2, #96]	; 0x60
   13028:	cmp	r2, #256	; 0x100
   1302c:	bne	12d3c <__assert_fail@plt+0xcb8>
   13030:	ldrb	r2, [r5, #24]
   13034:	cmp	r2, #0
   13038:	bne	13050 <__assert_fail@plt+0xfcc>
   1303c:	cmp	r1, #0
   13040:	beq	13068 <__assert_fail@plt+0xfe4>
   13044:	ldr	r2, [r5, #4]
   13048:	cmp	r2, #0
   1304c:	bne	13068 <__assert_fail@plt+0xfe4>
   13050:	ldrb	r2, [r5, #25]
   13054:	cmp	r2, #0
   13058:	bne	12d3c <__assert_fail@plt+0xcb8>
   1305c:	ldr	r2, [r5, #12]
   13060:	cmp	r2, #0
   13064:	beq	12d3c <__assert_fail@plt+0xcb8>
   13068:	mov	r2, #5
   1306c:	ldr	r1, [pc, #-2788]	; 12590 <__assert_fail@plt+0x50c>
   13070:	mov	r0, #0
   13074:	bl	11c70 <dcgettext@plt>
   13078:	mov	r1, #0
   1307c:	mov	r3, r9
   13080:	mov	r2, r0
   13084:	mov	r0, r1
   13088:	bl	11db4 <error@plt>
   1308c:	ldrb	r3, [r5, #26]
   13090:	b	12d3c <__assert_fail@plt+0xcb8>
   13094:	mov	fp, r0
   13098:	b	12324 <__assert_fail@plt+0x2a0>
   1309c:	ldr	r1, [pc, #-2760]	; 125dc <__assert_fail@plt+0x558>
   130a0:	ldr	r2, [pc, #-2836]	; 12594 <__assert_fail@plt+0x510>
   130a4:	add	r3, sp, #320	; 0x140
   130a8:	ldr	r5, [r1]
   130ac:	str	r2, [sp]
   130b0:	mov	r0, r5
   130b4:	mov	r2, #10
   130b8:	mov	r1, #0
   130bc:	ldr	r8, [sp, #108]	; 0x6c
   130c0:	bl	208ac <__assert_fail@plt+0xe828>
   130c4:	cmp	r0, #1
   130c8:	beq	14690 <__assert_fail@plt+0x260c>
   130cc:	cmp	r0, #0
   130d0:	bne	14adc <__assert_fail@plt+0x2a58>
   130d4:	ldr	r3, [sp, #320]	; 0x140
   130d8:	cmp	r3, #0
   130dc:	str	r3, [sp, #52]	; 0x34
   130e0:	bne	12500 <__assert_fail@plt+0x47c>
   130e4:	mov	r2, #5
   130e8:	ldr	r1, [pc, #-2904]	; 12598 <__assert_fail@plt+0x514>
   130ec:	b	14aa4 <__assert_fail@plt+0x2a20>
   130f0:	ldr	r3, [pc, #-2844]	; 125dc <__assert_fail@plt+0x558>
   130f4:	ldr	r0, [sp, #44]	; 0x2c
   130f8:	cmp	r0, #0
   130fc:	ldr	r5, [r3]
   13100:	beq	13114 <__assert_fail@plt+0x1090>
   13104:	mov	r1, r5
   13108:	bl	11b50 <strcmp@plt>
   1310c:	cmp	r0, #0
   13110:	bne	14ab8 <__assert_fail@plt+0x2a34>
   13114:	str	r5, [sp, #44]	; 0x2c
   13118:	b	12500 <__assert_fail@plt+0x47c>
   1311c:	ldr	r3, [pc, #-2888]	; 125dc <__assert_fail@plt+0x558>
   13120:	mov	r1, #0
   13124:	ldr	ip, [sp, #108]	; 0x6c
   13128:	ldr	r3, [r3]
   1312c:	add	r8, sp, #216	; 0xd8
   13130:	mov	r2, #10
   13134:	mov	r0, r3
   13138:	str	r3, [sp, #80]	; 0x50
   1313c:	str	r1, [sp]
   13140:	mov	r3, r8
   13144:	str	ip, [sp, #36]	; 0x24
   13148:	bl	20f90 <__assert_fail@plt+0xef0c>
   1314c:	add	r1, sp, #320	; 0x140
   13150:	mov	r5, r0
   13154:	mov	r0, #7
   13158:	bl	11cb8 <getrlimit64@plt>
   1315c:	cmp	r0, #0
   13160:	movne	lr, #17
   13164:	ldreq	r2, [sp, #320]	; 0x140
   13168:	subeq	lr, r2, #3
   1316c:	cmp	r5, #0
   13170:	bne	1394c <__assert_fail@plt+0x18c8>
   13174:	ldrd	r0, [r8]
   13178:	str	r5, [sp, #68]	; 0x44
   1317c:	ldr	ip, [pc, #-3020]	; 125b8 <__assert_fail@plt+0x534>
   13180:	str	r0, [sp, #64]	; 0x40
   13184:	ldrd	r2, [sp, #64]	; 0x40
   13188:	str	r0, [ip, #104]	; 0x68
   1318c:	cmp	r1, r3
   13190:	cmpeq	r0, r2
   13194:	bne	131b0 <__assert_fail@plt+0x112c>
   13198:	ldr	r3, [sp, #64]	; 0x40
   1319c:	cmp	r3, #1
   131a0:	bls	14a20 <__assert_fail@plt+0x299c>
   131a4:	ldr	r3, [sp, #64]	; 0x40
   131a8:	cmp	r3, lr
   131ac:	bls	12500 <__assert_fail@plt+0x47c>
   131b0:	ldr	sl, [sp, #36]	; 0x24
   131b4:	mov	r6, lr
   131b8:	mov	r2, #5
   131bc:	ldr	r1, [pc, #-3112]	; 1259c <__assert_fail@plt+0x518>
   131c0:	mov	r0, #0
   131c4:	bl	11c70 <dcgettext@plt>
   131c8:	ldr	r3, [pc, #-3120]	; 125a0 <__assert_fail@plt+0x51c>
   131cc:	add	sl, r3, sl, lsl #4
   131d0:	ldr	r4, [sl, #368]	; 0x170
   131d4:	mov	r5, r0
   131d8:	ldr	r0, [sp, #80]	; 0x50
   131dc:	bl	1eda8 <__assert_fail@plt+0xcd24>
   131e0:	mov	r1, #0
   131e4:	mov	r3, r4
   131e8:	mov	r2, r5
   131ec:	str	r0, [sp]
   131f0:	mov	r0, r1
   131f4:	bl	11db4 <error@plt>
   131f8:	mov	r2, #5
   131fc:	ldr	r1, [pc, #-3168]	; 125a4 <__assert_fail@plt+0x520>
   13200:	mov	r0, #0
   13204:	bl	11c70 <dcgettext@plt>
   13208:	add	r1, sp, #660	; 0x294
   1320c:	mov	r5, r0
   13210:	mov	r0, r6
   13214:	bl	1c2f0 <__assert_fail@plt+0xa26c>
   13218:	mov	r3, r4
   1321c:	mov	r2, r5
   13220:	mov	r1, #0
   13224:	str	r0, [sp]
   13228:	mov	r0, #2
   1322c:	bl	11db4 <error@plt>
   13230:	ldr	r3, [pc, #-3164]	; 125dc <__assert_fail@plt+0x558>
   13234:	ldr	r3, [r3]
   13238:	str	r3, [sp, #28]
   1323c:	b	12500 <__assert_fail@plt+0x47c>
   13240:	ldr	r2, [pc, #-3176]	; 125e0 <__assert_fail@plt+0x55c>
   13244:	mov	r3, #1
   13248:	strb	r3, [r2, #1353]	; 0x549
   1324c:	b	12500 <__assert_fail@plt+0x47c>
   13250:	ldr	r3, [pc, #-3192]	; 125e0 <__assert_fail@plt+0x55c>
   13254:	ldr	r0, [r3, #1048]	; 0x418
   13258:	ldr	r3, [pc, #-3204]	; 125dc <__assert_fail@plt+0x558>
   1325c:	cmp	r0, #0
   13260:	ldr	r5, [r3]
   13264:	beq	13278 <__assert_fail@plt+0x11f4>
   13268:	mov	r1, r5
   1326c:	bl	11b50 <strcmp@plt>
   13270:	cmp	r0, #0
   13274:	bne	14ac4 <__assert_fail@plt+0x2a40>
   13278:	ldr	r3, [pc, #-3232]	; 125e0 <__assert_fail@plt+0x55c>
   1327c:	str	r5, [r3, #1048]	; 0x418
   13280:	b	12500 <__assert_fail@plt+0x47c>
   13284:	ldr	r3, [pc, #-3284]	; 125b8 <__assert_fail@plt+0x534>
   13288:	mov	r2, #0
   1328c:	strb	r2, [r3, #108]	; 0x6c
   13290:	b	12500 <__assert_fail@plt+0x47c>
   13294:	ldr	r5, [pc, #-3316]	; 125a8 <__assert_fail@plt+0x524>
   13298:	ldr	r3, [pc, #-3268]	; 125dc <__assert_fail@plt+0x558>
   1329c:	ldr	r2, [r5]
   132a0:	ldr	r1, [r3]
   132a4:	sub	r3, r2, #-1073741823	; 0xc0000001
   132a8:	ldr	r3, [r6, r3, lsl #2]
   132ac:	cmp	r3, r1
   132b0:	bne	12500 <__assert_fail@plt+0x47c>
   132b4:	sub	r3, r3, #1
   132b8:	ldrb	r1, [r3, #1]!
   132bc:	sub	r0, r1, #48	; 0x30
   132c0:	cmp	r0, #9
   132c4:	bls	132b8 <__assert_fail@plt+0x1234>
   132c8:	cmp	r1, #0
   132cc:	subne	r2, r2, #1
   132d0:	str	r2, [r5]
   132d4:	b	12500 <__assert_fail@plt+0x47c>
   132d8:	ldr	r2, [pc, #-3328]	; 125e0 <__assert_fail@plt+0x55c>
   132dc:	mov	r3, #1
   132e0:	strb	r3, [r2, #1354]	; 0x54a
   132e4:	b	12500 <__assert_fail@plt+0x47c>
   132e8:	ldr	r8, [pc, #-3348]	; 125dc <__assert_fail@plt+0x558>
   132ec:	ldr	r0, [r8]
   132f0:	ldrb	r5, [r0]
   132f4:	cmp	r5, #0
   132f8:	beq	14af0 <__assert_fail@plt+0x2a6c>
   132fc:	ldrb	r3, [r0, #1]
   13300:	cmp	r3, #0
   13304:	beq	13318 <__assert_fail@plt+0x1294>
   13308:	ldr	r1, [pc, #-3428]	; 125ac <__assert_fail@plt+0x528>
   1330c:	bl	11b50 <strcmp@plt>
   13310:	subs	r5, r0, #0
   13314:	bne	14a00 <__assert_fail@plt+0x297c>
   13318:	ldr	r3, [pc, #-3432]	; 125b8 <__assert_fail@plt+0x534>
   1331c:	ldr	r2, [r3, #96]	; 0x60
   13320:	cmp	r2, #256	; 0x100
   13324:	beq	13330 <__assert_fail@plt+0x12ac>
   13328:	cmp	r2, r5
   1332c:	bne	14a98 <__assert_fail@plt+0x2a14>
   13330:	str	r5, [r3, #96]	; 0x60
   13334:	b	12500 <__assert_fail@plt+0x47c>
   13338:	ldr	r2, [pc, #-3424]	; 125e0 <__assert_fail@plt+0x55c>
   1333c:	mov	r3, #1
   13340:	strb	r3, [r2, #1355]	; 0x54b
   13344:	b	12500 <__assert_fail@plt+0x47c>
   13348:	ldr	r3, [pc, #-3444]	; 125dc <__assert_fail@plt+0x558>
   1334c:	ldr	r0, [r3]
   13350:	bl	15274 <__assert_fail@plt+0x31f0>
   13354:	b	12500 <__assert_fail@plt+0x47c>
   13358:	ldr	r1, [pc, #-3460]	; 125dc <__assert_fail@plt+0x558>
   1335c:	ldr	r2, [pc, #-3508]	; 125b0 <__assert_fail@plt+0x52c>
   13360:	ldr	ip, [sp, #108]	; 0x6c
   13364:	ldr	r5, [r1]
   13368:	add	r3, sp, #320	; 0x140
   1336c:	str	r2, [sp]
   13370:	mov	r0, r5
   13374:	mov	r2, #10
   13378:	add	r1, sp, #216	; 0xd8
   1337c:	str	ip, [sp, #36]	; 0x24
   13380:	bl	20f90 <__assert_fail@plt+0xef0c>
   13384:	cmp	r0, #0
   13388:	bne	13908 <__assert_fail@plt+0x1884>
   1338c:	ldr	r3, [sp, #216]	; 0xd8
   13390:	add	r8, sp, #328	; 0x148
   13394:	ldrb	r3, [r3, #-1]
   13398:	sub	r3, r3, #48	; 0x30
   1339c:	cmp	r3, #9
   133a0:	bhi	133cc <__assert_fail@plt+0x1348>
   133a4:	ldrd	r0, [r8, #-8]
   133a8:	ldr	r3, [pc, #-3580]	; 125b4 <__assert_fail@plt+0x530>
   133ac:	mvn	r2, #0
   133b0:	cmp	r1, r3
   133b4:	cmpeq	r0, r2
   133b8:	bhi	14620 <__assert_fail@plt+0x259c>
   133bc:	lsl	r3, r1, #10
   133c0:	orr	r3, r3, r0, lsr #22
   133c4:	lsl	r2, r0, #10
   133c8:	strd	r2, [r8, #-8]
   133cc:	ldr	ip, [pc, #-3572]	; 125e0 <__assert_fail@plt+0x55c>
   133d0:	ldrd	r2, [r8, #-8]
   133d4:	mov	r1, #0
   133d8:	ldr	r0, [ip, #1380]	; 0x564
   133dc:	cmp	r1, r3
   133e0:	cmpeq	r0, r2
   133e4:	bhi	12500 <__assert_fail@plt+0x47c>
   133e8:	mov	r1, #0
   133ec:	str	r2, [sp, #72]	; 0x48
   133f0:	str	r1, [sp, #76]	; 0x4c
   133f4:	ldrd	r0, [sp, #72]	; 0x48
   133f8:	str	r2, [ip, #1380]	; 0x564
   133fc:	cmp	r3, r1
   13400:	cmpeq	r2, r0
   13404:	bne	14620 <__assert_fail@plt+0x259c>
   13408:	ldr	r2, [pc, #-3672]	; 125b8 <__assert_fail@plt+0x534>
   1340c:	mov	r3, #18
   13410:	ldr	r2, [r2, #104]	; 0x68
   13414:	mul	r3, r3, r2
   13418:	cmp	r3, r0
   1341c:	movcc	r3, r0
   13420:	str	r3, [ip, #1380]	; 0x564
   13424:	b	12500 <__assert_fail@plt+0x47c>
   13428:	ldr	r3, [pc, #-3668]	; 125dc <__assert_fail@plt+0x558>
   1342c:	str	r3, [sp, #36]	; 0x24
   13430:	ldr	r3, [r3]
   13434:	ldrb	r2, [r3]
   13438:	cmp	r2, #43	; 0x2b
   1343c:	beq	13978 <__assert_fail@plt+0x18f4>
   13440:	ldr	r3, [sp, #36]	; 0x24
   13444:	ldr	r3, [r3]
   13448:	str	r3, [fp, r4, lsl #2]
   1344c:	add	r4, r4, #1
   13450:	b	12500 <__assert_fail@plt+0x47c>
   13454:	ldr	r3, [pc, #-3744]	; 125bc <__assert_fail@plt+0x538>
   13458:	ldr	r0, [pc, #-3744]	; 125c0 <__assert_fail@plt+0x53c>
   1345c:	ldr	r1, [pc, #-3744]	; 125c4 <__assert_fail@plt+0x540>
   13460:	ldr	r2, [pc, #-3744]	; 125c8 <__assert_fail@plt+0x544>
   13464:	mov	r4, #0
   13468:	ldr	r0, [r0]
   1346c:	ldr	r3, [r3]
   13470:	str	r1, [sp, #4]
   13474:	str	r2, [sp]
   13478:	str	r4, [sp, #8]
   1347c:	ldr	r2, [pc, #-3768]	; 125cc <__assert_fail@plt+0x548>
   13480:	ldr	r1, [pc, #-3768]	; 125d0 <__assert_fail@plt+0x54c>
   13484:	bl	20320 <__assert_fail@plt+0xe29c>
   13488:	mov	r0, r4
   1348c:	bl	11e68 <exit@plt>
   13490:	mov	r3, #1
   13494:	str	r3, [sp, #48]	; 0x30
   13498:	b	12500 <__assert_fail@plt+0x47c>
   1349c:	ldr	r3, [pc, #-3784]	; 125dc <__assert_fail@plt+0x558>
   134a0:	add	r8, sp, #136	; 0x88
   134a4:	mov	r5, r3
   134a8:	mov	r2, #40	; 0x28
   134ac:	mov	r1, #0
   134b0:	mov	r0, r8
   134b4:	str	r3, [sp, #36]	; 0x24
   134b8:	bl	11ed4 <memset@plt>
   134bc:	mvn	r3, #0
   134c0:	mov	r1, r8
   134c4:	ldr	r0, [r5]
   134c8:	ldr	r2, [pc, #-3836]	; 125d4 <__assert_fail@plt+0x550>
   134cc:	str	r3, [sp, #144]	; 0x90
   134d0:	bl	16c80 <__assert_fail@plt+0x4bfc>
   134d4:	ldr	r3, [sp, #136]	; 0x88
   134d8:	cmp	r3, #0
   134dc:	sub	r3, r3, #1
   134e0:	str	r3, [sp, #136]	; 0x88
   134e4:	beq	14afc <__assert_fail@plt+0x2a78>
   134e8:	ldrb	r2, [r0]
   134ec:	cmp	r2, #46	; 0x2e
   134f0:	ldrne	r2, [sp, #140]	; 0x8c
   134f4:	beq	14594 <__assert_fail@plt+0x2510>
   134f8:	orrs	r3, r3, r2
   134fc:	mvneq	r3, #0
   13500:	mov	r2, #0
   13504:	mov	r1, r8
   13508:	streq	r3, [sp, #136]	; 0x88
   1350c:	bl	14fd4 <__assert_fail@plt+0x2f50>
   13510:	ldrb	r3, [r0]
   13514:	cmp	r3, #44	; 0x2c
   13518:	beq	14554 <__assert_fail@plt+0x24d0>
   1351c:	mvn	r2, #0
   13520:	mov	r3, #0
   13524:	strd	r2, [sp, #144]	; 0x90
   13528:	ldrb	r3, [r0]
   1352c:	cmp	r3, #0
   13530:	bne	147d8 <__assert_fail@plt+0x2754>
   13534:	mov	r0, r8
   13538:	mov	r1, #40	; 0x28
   1353c:	bl	2062c <__assert_fail@plt+0xe5a8>
   13540:	ldr	r3, [pc, #-3944]	; 125e0 <__assert_fail@plt+0x55c>
   13544:	ldr	r2, [pc, #-3956]	; 125d8 <__assert_fail@plt+0x554>
   13548:	ldr	r3, [r3, #1060]	; 0x424
   1354c:	cmp	r3, #0
   13550:	beq	1389c <__assert_fail@plt+0x1818>
   13554:	add	r2, r3, #36	; 0x24
   13558:	ldr	r3, [r3, #36]	; 0x24
   1355c:	b	1354c <__assert_fail@plt+0x14c8>
   13560:	ldr	r3, [pc, #-3980]	; 125dc <__assert_fail@plt+0x558>
   13564:	ldr	r0, [sp, #32]
   13568:	cmp	r0, #0
   1356c:	ldr	r5, [r3]
   13570:	beq	13584 <__assert_fail@plt+0x1500>
   13574:	mov	r1, r5
   13578:	bl	11b50 <strcmp@plt>
   1357c:	cmp	r0, #0
   13580:	bne	14ad0 <__assert_fail@plt+0x2a4c>
   13584:	str	r5, [sp, #32]
   13588:	b	12500 <__assert_fail@plt+0x47c>
   1358c:	ldr	r4, [sp, #24]
   13590:	ldr	sl, [sp, #28]
   13594:	ldr	r0, [sp, #16]
   13598:	bl	14e94 <__assert_fail@plt+0x2e10>
   1359c:	ldrb	r5, [sp, #247]	; 0xf7
   135a0:	cmp	r0, #0
   135a4:	bne	13f18 <__assert_fail@plt+0x1e94>
   135a8:	ldr	r2, [pc, #-4048]	; 125e0 <__assert_fail@plt+0x55c>
   135ac:	ldrb	r3, [r2, #1355]	; 0x54b
   135b0:	cmp	r3, #0
   135b4:	bne	135c4 <__assert_fail@plt+0x1540>
   135b8:	ldrb	r3, [r2, #1354]	; 0x54a
   135bc:	cmp	r3, #0
   135c0:	strbeq	r3, [sp, #247]	; 0xf7
   135c4:	add	r1, sp, #660	; 0x294
   135c8:	ldr	r0, [sp, #16]
   135cc:	bl	14f08 <__assert_fail@plt+0x2e84>
   135d0:	add	r0, sp, #660	; 0x294
   135d4:	bl	11e80 <strlen@plt>
   135d8:	mov	r3, #5
   135dc:	str	r3, [sp]
   135e0:	ldr	r2, [pc, #2588]	; 14004 <__assert_fail@plt+0x1f80>
   135e4:	ldr	r1, [pc, #2588]	; 14008 <__assert_fail@plt+0x1f84>
   135e8:	mov	r3, r0
   135ec:	mov	r0, #0
   135f0:	bl	12078 <dcngettext@plt>
   135f4:	mov	r1, #0
   135f8:	add	r3, sp, #660	; 0x294
   135fc:	mov	r2, r0
   13600:	mov	r0, r1
   13604:	bl	11db4 <error@plt>
   13608:	cmp	r5, #0
   1360c:	strb	r5, [sp, #247]	; 0xf7
   13610:	beq	13660 <__assert_fail@plt+0x15dc>
   13614:	ldr	r3, [pc, #2532]	; 14000 <__assert_fail@plt+0x1f7c>
   13618:	ldrb	r3, [r3, #1355]	; 0x54b
   1361c:	cmp	r3, #0
   13620:	bne	13660 <__assert_fail@plt+0x15dc>
   13624:	ldr	r3, [pc, #2516]	; 14000 <__assert_fail@plt+0x1f7c>
   13628:	ldrb	r5, [r3, #1354]	; 0x54a
   1362c:	cmp	r5, #0
   13630:	bne	13660 <__assert_fail@plt+0x15dc>
   13634:	ldr	r3, [r3, #1060]	; 0x424
   13638:	cmp	r3, #0
   1363c:	beq	13660 <__assert_fail@plt+0x15dc>
   13640:	mov	r2, #5
   13644:	ldr	r1, [pc, #2396]	; 13fa8 <__assert_fail@plt+0x1f24>
   13648:	mov	r0, r5
   1364c:	bl	11c70 <dcgettext@plt>
   13650:	mov	r1, r5
   13654:	mov	r2, r0
   13658:	mov	r0, r5
   1365c:	bl	11db4 <error@plt>
   13660:	ldrb	r3, [sp, #207]	; 0xcf
   13664:	ldr	r2, [pc, #2452]	; 14000 <__assert_fail@plt+0x1f7c>
   13668:	cmp	sl, #0
   1366c:	strb	r3, [r2, #1356]	; 0x54c
   13670:	bne	13e44 <__assert_fail@plt+0x1dc0>
   13674:	ldr	r3, [pc, #2436]	; 14000 <__assert_fail@plt+0x1f7c>
   13678:	ldr	r3, [r3, #1036]	; 0x40c
   1367c:	cmp	r3, #0
   13680:	beq	13e28 <__assert_fail@plt+0x1da4>
   13684:	cmp	r4, #0
   13688:	beq	13e90 <__assert_fail@plt+0x1e0c>
   1368c:	ldr	r0, [pc, #2412]	; 14000 <__assert_fail@plt+0x1f7c>
   13690:	ldr	r2, [r0, #1380]	; 0x564
   13694:	cmp	r2, #0
   13698:	beq	136b8 <__assert_fail@plt+0x1634>
   1369c:	ldr	r1, [pc, #2548]	; 14098 <__assert_fail@plt+0x2014>
   136a0:	mov	r3, #18
   136a4:	ldr	r1, [r1, #104]	; 0x68
   136a8:	mul	r3, r3, r1
   136ac:	cmp	r3, r2
   136b0:	movcc	r3, r2
   136b4:	str	r3, [r0, #1380]	; 0x564
   136b8:	ldr	r3, [sp, #20]
   136bc:	cmp	r3, #0
   136c0:	beq	13b14 <__assert_fail@plt+0x1a90>
   136c4:	cmp	r4, #1
   136c8:	bhi	14b0c <__assert_fail@plt+0x2a88>
   136cc:	ldr	r3, [sp, #32]
   136d0:	cmp	r3, #0
   136d4:	bne	14b48 <__assert_fail@plt+0x2ac4>
   136d8:	ldr	r8, [fp]
   136dc:	ldr	r1, [pc, #2368]	; 14024 <__assert_fail@plt+0x1fa0>
   136e0:	mov	r0, r8
   136e4:	bl	16d78 <__assert_fail@plt+0x4cf4>
   136e8:	subs	r9, r0, #0
   136ec:	beq	14b58 <__assert_fail@plt+0x2ad4>
   136f0:	ldr	ip, [pc, #2312]	; 14000 <__assert_fail@plt+0x1f7c>
   136f4:	ldr	r3, [pc, #2460]	; 14098 <__assert_fail@plt+0x2014>
   136f8:	add	r1, sp, #216	; 0xd8
   136fc:	ldr	r2, [ip, #1380]	; 0x564
   13700:	ldr	r3, [r3, #112]	; 0x70
   13704:	ldrb	r6, [ip, #1354]	; 0x54a
   13708:	cmp	r2, r3
   1370c:	movcc	r2, r3
   13710:	ldr	r3, [ip, #1060]	; 0x424
   13714:	str	r1, [sp, #16]
   13718:	mov	r0, r1
   1371c:	mov	r1, #16
   13720:	str	r3, [sp, #24]
   13724:	bl	15314 <__assert_fail@plt+0x3290>
   13728:	ldr	r3, [sp, #32]
   1372c:	eor	r6, r6, #1
   13730:	mov	r7, r3
   13734:	mov	sl, #0
   13738:	mov	fp, #0
   1373c:	str	r3, [sp, #108]	; 0x6c
   13740:	mov	r2, r8
   13744:	mov	r1, r9
   13748:	ldr	r0, [sp, #16]
   1374c:	bl	18298 <__assert_fail@plt+0x6214>
   13750:	cmp	r0, #0
   13754:	beq	1469c <__assert_fail@plt+0x2618>
   13758:	ldr	r4, [sp, #216]	; 0xd8
   1375c:	ldr	r0, [sp, #228]	; 0xe4
   13760:	ldr	r5, [sp, #224]	; 0xe0
   13764:	add	r4, r4, r0
   13768:	cmp	r7, #0
   1376c:	sub	r5, r4, r5, lsl #4
   13770:	sub	r4, r4, #16
   13774:	beq	13790 <__assert_fail@plt+0x170c>
   13778:	b	13830 <__assert_fail@plt+0x17ac>
   1377c:	sub	r4, r4, #16
   13780:	mov	r1, r4
   13784:	bl	17394 <__assert_fail@plt+0x5310>
   13788:	cmp	r6, r0
   1378c:	ble	13844 <__assert_fail@plt+0x17c0>
   13790:	cmp	r5, r4
   13794:	mov	r0, r4
   13798:	bcc	1377c <__assert_fail@plt+0x16f8>
   1379c:	ldr	r3, [sp, #224]	; 0xe0
   137a0:	ldr	r2, [r4, #4]
   137a4:	adds	sl, sl, r3
   137a8:	adc	fp, fp, #0
   137ac:	cmp	r7, r2
   137b0:	bcc	13808 <__assert_fail@plt+0x1784>
   137b4:	ldr	r1, [r4]
   137b8:	ldr	r0, [sp, #108]	; 0x6c
   137bc:	bl	11bec <memcpy@plt>
   137c0:	ldr	r2, [sp, #24]
   137c4:	ldr	r3, [r4, #4]
   137c8:	cmp	r2, #0
   137cc:	str	r3, [sp, #112]	; 0x70
   137d0:	beq	13740 <__assert_fail@plt+0x16bc>
   137d4:	ldr	r0, [r4]
   137d8:	ldr	r3, [r4, #8]
   137dc:	ldr	r1, [r4, #12]
   137e0:	ldr	r2, [sp, #108]	; 0x6c
   137e4:	sub	r3, r3, r0
   137e8:	sub	r1, r1, r0
   137ec:	add	r3, r2, r3
   137f0:	add	r2, r2, r1
   137f4:	str	r3, [sp, #116]	; 0x74
   137f8:	str	r2, [sp, #120]	; 0x78
   137fc:	b	13740 <__assert_fail@plt+0x16bc>
   13800:	cmp	r2, r7
   13804:	bls	13814 <__assert_fail@plt+0x1790>
   13808:	lsls	r7, r7, #1
   1380c:	bne	13800 <__assert_fail@plt+0x177c>
   13810:	mov	r7, r2
   13814:	ldr	r0, [sp, #108]	; 0x6c
   13818:	bl	11bb0 <free@plt>
   1381c:	mov	r0, r7
   13820:	bl	20424 <__assert_fail@plt+0xe3a0>
   13824:	ldr	r2, [r4, #4]
   13828:	str	r0, [sp, #108]	; 0x6c
   1382c:	b	137b4 <__assert_fail@plt+0x1730>
   13830:	mov	r1, r4
   13834:	add	r0, sp, #108	; 0x6c
   13838:	bl	17394 <__assert_fail@plt+0x5310>
   1383c:	cmp	r6, r0
   13840:	bgt	13790 <__assert_fail@plt+0x170c>
   13844:	ldr	r3, [sp, #20]
   13848:	cmp	r3, #99	; 0x63
   1384c:	movne	r6, #0
   13850:	beq	14410 <__assert_fail@plt+0x238c>
   13854:	mov	r1, r8
   13858:	mov	r0, r9
   1385c:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   13860:	ldr	r0, [sp, #216]	; 0xd8
   13864:	bl	11bb0 <free@plt>
   13868:	eor	r3, r6, #1
   1386c:	ldr	r0, [sp, #108]	; 0x6c
   13870:	str	r3, [sp, #40]	; 0x28
   13874:	bl	11bb0 <free@plt>
   13878:	ldr	r3, [pc, #1836]	; 13fac <__assert_fail@plt+0x1f28>
   1387c:	ldr	r2, [sp, #692]	; 0x2b4
   13880:	ldr	r0, [sp, #40]	; 0x28
   13884:	ldr	r3, [r3]
   13888:	cmp	r2, r3
   1388c:	bne	147d4 <__assert_fail@plt+0x2750>
   13890:	add	sp, sp, #700	; 0x2bc
   13894:	vpop	{d8-d10}
   13898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1389c:	str	r0, [r2]
   138a0:	str	r3, [r0, #36]	; 0x24
   138a4:	b	12500 <__assert_fail@plt+0x47c>
   138a8:	ldr	r1, [pc, #1792]	; 13fb0 <__assert_fail@plt+0x1f2c>
   138ac:	mov	r0, #0
   138b0:	bl	11c70 <dcgettext@plt>
   138b4:	mov	r1, #0
   138b8:	mov	r5, r0
   138bc:	mov	r0, #3
   138c0:	bl	11f64 <setlocale@plt>
   138c4:	bl	1eda8 <__assert_fail@plt+0xcd24>
   138c8:	mov	r1, #0
   138cc:	mov	r2, r5
   138d0:	mov	r3, r0
   138d4:	mov	r0, r1
   138d8:	bl	11db4 <error@plt>
   138dc:	b	12cc4 <__assert_fail@plt+0xc40>
   138e0:	mov	r2, #5
   138e4:	ldr	r1, [pc, #1736]	; 13fb4 <__assert_fail@plt+0x1f30>
   138e8:	mov	r0, #0
   138ec:	bl	11c70 <dcgettext@plt>
   138f0:	mov	r1, #0
   138f4:	ldr	r2, [pc, #1724]	; 13fb8 <__assert_fail@plt+0x1f34>
   138f8:	mov	r3, r0
   138fc:	mov	r0, r1
   13900:	bl	11db4 <error@plt>
   13904:	b	12c90 <__assert_fail@plt+0xc0c>
   13908:	cmp	r0, #2
   1390c:	bne	13ae8 <__assert_fail@plt+0x1a64>
   13910:	ldr	r3, [sp, #216]	; 0xd8
   13914:	ldrb	r2, [r3, #-1]
   13918:	sub	r2, r2, #48	; 0x30
   1391c:	cmp	r2, #9
   13920:	bhi	13ae8 <__assert_fail@plt+0x1a64>
   13924:	ldrb	r2, [r3, #1]
   13928:	cmp	r2, #0
   1392c:	bne	13ae8 <__assert_fail@plt+0x1a64>
   13930:	ldrb	r3, [r3]
   13934:	cmp	r3, #37	; 0x25
   13938:	beq	146ac <__assert_fail@plt+0x2628>
   1393c:	cmp	r3, #98	; 0x62
   13940:	bne	13ae8 <__assert_fail@plt+0x1a64>
   13944:	add	r8, sp, #328	; 0x148
   13948:	b	133cc <__assert_fail@plt+0x1348>
   1394c:	cmp	r5, #1
   13950:	ldr	sl, [sp, #36]	; 0x24
   13954:	mov	r6, lr
   13958:	beq	131b8 <__assert_fail@plt+0x1134>
   1395c:	ldr	r3, [sp, #80]	; 0x50
   13960:	mov	r1, sl
   13964:	str	r3, [sp]
   13968:	mov	r0, r5
   1396c:	ldr	r3, [pc, #1812]	; 14088 <__assert_fail@plt+0x2004>
   13970:	mov	r2, #4
   13974:	bl	20ef8 <__assert_fail@plt+0xee74>
   13978:	ldr	r5, [pc, #1596]	; 13fbc <__assert_fail@plt+0x1f38>
   1397c:	ldr	r2, [r5]
   13980:	cmp	r2, sl
   13984:	beq	13998 <__assert_fail@plt+0x1914>
   13988:	ldr	r2, [r6, r2, lsl #2]
   1398c:	ldrb	r1, [r2]
   13990:	cmp	r1, #45	; 0x2d
   13994:	beq	1462c <__assert_fail@plt+0x25a8>
   13998:	mov	r2, #0
   1399c:	str	r2, [sp, #80]	; 0x50
   139a0:	ldr	r1, [sp, #60]	; 0x3c
   139a4:	ldr	r2, [sp, #80]	; 0x50
   139a8:	cmp	r1, #0
   139ac:	ldr	r1, [sp, #24]
   139b0:	movne	r2, #0
   139b4:	orrs	r2, r1, r2
   139b8:	str	r2, [sp, #24]
   139bc:	beq	13440 <__assert_fail@plt+0x13bc>
   139c0:	add	r8, sp, #136	; 0x88
   139c4:	mov	r2, #40	; 0x28
   139c8:	mov	r1, #0
   139cc:	mov	r0, r8
   139d0:	str	r3, [sp, #84]	; 0x54
   139d4:	bl	11ed4 <memset@plt>
   139d8:	ldr	r3, [sp, #84]	; 0x54
   139dc:	mov	r1, r8
   139e0:	add	r0, r3, #1
   139e4:	mov	r2, #0
   139e8:	mvn	r3, #0
   139ec:	str	r3, [sp, #144]	; 0x90
   139f0:	bl	16c80 <__assert_fail@plt+0x4bfc>
   139f4:	cmp	r0, #0
   139f8:	beq	146e8 <__assert_fail@plt+0x2664>
   139fc:	ldrb	r3, [r0]
   13a00:	cmp	r3, #46	; 0x2e
   13a04:	beq	146fc <__assert_fail@plt+0x2678>
   13a08:	ldrd	r2, [sp, #136]	; 0x88
   13a0c:	orrs	r3, r2, r3
   13a10:	bne	13a24 <__assert_fail@plt+0x19a0>
   13a14:	mvn	r3, #0
   13a18:	str	r3, [sp, #136]	; 0x88
   13a1c:	cmp	r0, #0
   13a20:	beq	13440 <__assert_fail@plt+0x13bc>
   13a24:	mov	r2, #0
   13a28:	mov	r1, r8
   13a2c:	bl	14fd4 <__assert_fail@plt+0x2f50>
   13a30:	ldrb	r3, [r0]
   13a34:	cmp	r3, #0
   13a38:	bne	13440 <__assert_fail@plt+0x13bc>
   13a3c:	ldr	r3, [sp, #80]	; 0x50
   13a40:	cmp	r3, #0
   13a44:	beq	13ab4 <__assert_fail@plt+0x1a30>
   13a48:	ldr	r3, [r5]
   13a4c:	ldr	r2, [pc, #1388]	; 13fc0 <__assert_fail@plt+0x1f3c>
   13a50:	add	r0, r3, #1
   13a54:	ldr	r3, [r6, r3, lsl #2]
   13a58:	add	r1, sp, #144	; 0x90
   13a5c:	str	r0, [r5]
   13a60:	add	r0, r3, #1
   13a64:	str	r3, [sp, #36]	; 0x24
   13a68:	bl	16c80 <__assert_fail@plt+0x4bfc>
   13a6c:	cmp	r0, #0
   13a70:	beq	149a4 <__assert_fail@plt+0x2920>
   13a74:	ldrb	r3, [r0]
   13a78:	cmp	r3, #46	; 0x2e
   13a7c:	beq	14990 <__assert_fail@plt+0x290c>
   13a80:	ldr	r3, [sp, #148]	; 0x94
   13a84:	cmp	r3, #0
   13a88:	bne	13a9c <__assert_fail@plt+0x1a18>
   13a8c:	ldr	r3, [sp, #144]	; 0x90
   13a90:	cmp	r3, #0
   13a94:	subne	r3, r3, #1
   13a98:	strne	r3, [sp, #144]	; 0x90
   13a9c:	mov	r2, #1
   13aa0:	mov	r1, r8
   13aa4:	bl	14fd4 <__assert_fail@plt+0x2f50>
   13aa8:	ldrb	r3, [r0]
   13aac:	cmp	r3, #0
   13ab0:	bne	149b8 <__assert_fail@plt+0x2934>
   13ab4:	mov	r3, #1
   13ab8:	mov	r0, r8
   13abc:	mov	r1, #40	; 0x28
   13ac0:	strb	r3, [sp, #169]	; 0xa9
   13ac4:	bl	2062c <__assert_fail@plt+0xe5a8>
   13ac8:	ldr	r3, [pc, #1328]	; 14000 <__assert_fail@plt+0x1f7c>
   13acc:	ldr	r2, [pc, #1316]	; 13ff8 <__assert_fail@plt+0x1f74>
   13ad0:	ldr	r3, [r3, #1060]	; 0x424
   13ad4:	cmp	r3, #0
   13ad8:	beq	1389c <__assert_fail@plt+0x1818>
   13adc:	add	r2, r3, #36	; 0x24
   13ae0:	ldr	r3, [r3, #36]	; 0x24
   13ae4:	b	13ad4 <__assert_fail@plt+0x1a50>
   13ae8:	ldr	r8, [sp, #36]	; 0x24
   13aec:	str	r5, [sp]
   13af0:	mov	r1, r8
   13af4:	ldr	r3, [pc, #1420]	; 14088 <__assert_fail@plt+0x2004>
   13af8:	mov	r2, #83	; 0x53
   13afc:	bl	20ef8 <__assert_fail@plt+0xee74>
   13b00:	mov	r2, r7
   13b04:	b	13000 <__assert_fail@plt+0xf7c>
   13b08:	cmp	r7, #0
   13b0c:	bne	12d80 <__assert_fail@plt+0xcfc>
   13b10:	b	12d3c <__assert_fail@plt+0xcb8>
   13b14:	ldr	r5, [sp, #20]
   13b18:	str	fp, [sp, #60]	; 0x3c
   13b1c:	mov	r8, fp
   13b20:	ldr	r6, [pc, #1284]	; 1402c <__assert_fail@plt+0x1fa8>
   13b24:	b	13b2c <__assert_fail@plt+0x1aa8>
   13b28:	mov	r5, r9
   13b2c:	mov	r7, r8
   13b30:	ldr	r9, [r8], #4
   13b34:	mov	r1, r6
   13b38:	mov	r0, r9
   13b3c:	bl	11b50 <strcmp@plt>
   13b40:	cmp	r0, #0
   13b44:	beq	13b5c <__assert_fail@plt+0x1ad8>
   13b48:	mov	r0, r9
   13b4c:	mov	r1, #4
   13b50:	bl	1200c <euidaccess@plt>
   13b54:	cmp	r0, #0
   13b58:	bne	14978 <__assert_fail@plt+0x28f4>
   13b5c:	add	r9, r5, #1
   13b60:	cmp	r4, r9
   13b64:	bne	13b28 <__assert_fail@plt+0x1aa4>
   13b68:	ldr	r3, [sp, #32]
   13b6c:	cmp	r3, #0
   13b70:	beq	13b9c <__assert_fail@plt+0x1b18>
   13b74:	mov	r0, r3
   13b78:	ldr	r2, [pc, #1092]	; 13fc4 <__assert_fail@plt+0x1f40>
   13b7c:	ldr	r1, [pc, #1092]	; 13fc8 <__assert_fail@plt+0x1f44>
   13b80:	bl	11dc0 <open64@plt>
   13b84:	subs	r3, r0, #0
   13b88:	blt	147a4 <__assert_fail@plt+0x2720>
   13b8c:	cmp	r3, #1
   13b90:	beq	13b9c <__assert_fail@plt+0x1b18>
   13b94:	mov	r1, #1
   13b98:	bl	17694 <__assert_fail@plt+0x5610>
   13b9c:	ldr	r3, [sp, #48]	; 0x30
   13ba0:	cmp	r3, #0
   13ba4:	bne	144cc <__assert_fail@plt+0x2448>
   13ba8:	ldr	r3, [sp, #52]	; 0x34
   13bac:	cmp	r3, #0
   13bb0:	beq	14664 <__assert_fail@plt+0x25e0>
   13bb4:	ldr	r1, [sp, #52]	; 0x34
   13bb8:	ldr	r3, [pc, #1036]	; 13fcc <__assert_fail@plt+0x1f48>
   13bbc:	mov	r2, #144	; 0x90
   13bc0:	cmp	r1, r3
   13bc4:	movcs	r1, r3
   13bc8:	vldr	d10, [pc, #968]	; 13f98 <__assert_fail@plt+0x1f14>
   13bcc:	mul	r3, r2, r1
   13bd0:	vldr	d9, [pc, #968]	; 13fa0 <__assert_fail@plt+0x1f1c>
   13bd4:	lsl	r2, r1, #1
   13bd8:	str	r3, [sp, #44]	; 0x2c
   13bdc:	mov	r3, #0
   13be0:	mov	sl, r3
   13be4:	str	r1, [sp, #36]	; 0x24
   13be8:	str	r2, [sp, #48]	; 0x30
   13bec:	str	r3, [sp, #120]	; 0x78
   13bf0:	str	r9, [sp, #24]
   13bf4:	ldr	r3, [sp, #60]	; 0x3c
   13bf8:	ldr	r1, [pc, #1060]	; 14024 <__assert_fail@plt+0x1fa0>
   13bfc:	str	r3, [sp, #28]
   13c00:	ldr	r0, [r3], #4
   13c04:	str	r3, [sp, #60]	; 0x3c
   13c08:	str	r0, [sp, #20]
   13c0c:	bl	16d78 <__assert_fail@plt+0x4cf4>
   13c10:	subs	r3, r0, #0
   13c14:	str	r3, [sp, #16]
   13c18:	beq	147bc <__assert_fail@plt+0x2738>
   13c1c:	ldr	r3, [sp, #52]	; 0x34
   13c20:	cmp	r3, #1
   13c24:	movls	r3, #24
   13c28:	strls	r3, [sp, #56]	; 0x38
   13c2c:	bhi	14194 <__assert_fail@plt+0x2110>
   13c30:	ldr	fp, [sp, #120]	; 0x78
   13c34:	cmp	fp, #0
   13c38:	beq	141bc <__assert_fail@plt+0x2138>
   13c3c:	add	r3, sp, #108	; 0x6c
   13c40:	str	r3, [sp, #28]
   13c44:	ldr	r2, [sp, #24]
   13c48:	mov	r3, #0
   13c4c:	sub	r2, r2, #1
   13c50:	str	r2, [sp, #24]
   13c54:	strb	r3, [sp, #132]	; 0x84
   13c58:	b	13d5c <__assert_fail@plt+0x1cd8>
   13c5c:	ldr	r3, [sp, #108]	; 0x6c
   13c60:	ldr	r2, [pc, #920]	; 14000 <__assert_fail@plt+0x1f7c>
   13c64:	add	r5, r3, r5
   13c68:	str	r6, [r2, #1360]	; 0x550
   13c6c:	mov	r1, #0
   13c70:	add	r0, sp, #216	; 0xd8
   13c74:	bl	17908 <__assert_fail@plt+0x5884>
   13c78:	add	sl, sl, #1
   13c7c:	mov	r6, #0
   13c80:	add	r7, r0, #9
   13c84:	ldr	r3, [sp, #116]	; 0x74
   13c88:	cmp	r3, #1
   13c8c:	bls	13dc8 <__assert_fail@plt+0x1d44>
   13c90:	ldr	r1, [sp, #48]	; 0x30
   13c94:	ldr	r0, [pc, #820]	; 13fd0 <__assert_fail@plt+0x1f4c>
   13c98:	bl	1bffc <__assert_fail@plt+0x9f78>
   13c9c:	mov	r1, #0
   13ca0:	mov	fp, r1
   13ca4:	str	r0, [sp, #464]	; 0x1d0
   13ca8:	add	r0, sp, #468	; 0x1d4
   13cac:	bl	11c04 <pthread_mutex_init@plt>
   13cb0:	mov	r1, fp
   13cb4:	add	r0, sp, #496	; 0x1f0
   13cb8:	bl	11c88 <pthread_cond_init@plt>
   13cbc:	ldr	r0, [sp, #44]	; 0x2c
   13cc0:	ldr	r9, [sp, #116]	; 0x74
   13cc4:	bl	20424 <__assert_fail@plt+0xe3a0>
   13cc8:	mov	r1, fp
   13ccc:	mov	r4, r0
   13cd0:	add	r0, r0, #48	; 0x30
   13cd4:	str	r9, [r4, #24]
   13cd8:	str	r9, [r4, #20]
   13cdc:	str	fp, [r4, #12]
   13ce0:	str	fp, [r4, #8]
   13ce4:	str	fp, [r4, #4]
   13ce8:	str	fp, [r4]
   13cec:	str	fp, [r4, #16]
   13cf0:	str	fp, [r4, #28]
   13cf4:	str	fp, [r4, #40]	; 0x28
   13cf8:	strb	fp, [r4, #44]	; 0x2c
   13cfc:	bl	11c04 <pthread_mutex_init@plt>
   13d00:	add	r8, r4, #72	; 0x48
   13d04:	mov	r0, r4
   13d08:	ldr	r4, [sp, #36]	; 0x24
   13d0c:	mov	r1, r8
   13d10:	mov	r3, r4
   13d14:	mov	r2, r5
   13d18:	stm	sp, {r9, fp}
   13d1c:	bl	15714 <__assert_fail@plt+0x3690>
   13d20:	ldr	r2, [sp, #216]	; 0xd8
   13d24:	add	r1, sp, #464	; 0x1d0
   13d28:	str	r1, [sp]
   13d2c:	str	r2, [sp, #4]
   13d30:	mov	r3, r8
   13d34:	str	r7, [sp, #8]
   13d38:	mov	r0, r5
   13d3c:	ldr	r2, [sp, #116]	; 0x74
   13d40:	mov	r1, r4
   13d44:	bl	17bd4 <__assert_fail@plt+0x5b50>
   13d48:	mov	r1, r7
   13d4c:	ldr	r0, [sp, #216]	; 0xd8
   13d50:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   13d54:	cmp	r6, #0
   13d58:	bne	14188 <__assert_fail@plt+0x2104>
   13d5c:	ldr	r2, [sp, #20]
   13d60:	ldr	r1, [sp, #16]
   13d64:	ldr	r0, [sp, #28]
   13d68:	bl	18298 <__assert_fail@plt+0x6214>
   13d6c:	cmp	r0, #0
   13d70:	beq	1409c <__assert_fail@plt+0x2018>
   13d74:	ldrb	r6, [sp, #132]	; 0x84
   13d78:	ldr	r5, [sp, #120]	; 0x78
   13d7c:	cmp	r6, #0
   13d80:	beq	13c5c <__assert_fail@plt+0x1bd8>
   13d84:	ldr	r3, [sp, #24]
   13d88:	cmp	r3, #0
   13d8c:	beq	13ddc <__assert_fail@plt+0x1d58>
   13d90:	ldrd	r2, [sp, #112]	; 0x70
   13d94:	ldr	r0, [sp, #56]	; 0x38
   13d98:	add	r1, r0, #1
   13d9c:	mul	r0, r3, r0
   13da0:	sub	r3, r5, r2
   13da4:	sub	r3, r3, r0
   13da8:	cmp	r1, r3
   13dac:	bcc	14680 <__assert_fail@plt+0x25fc>
   13db0:	ldr	r2, [sp, #108]	; 0x6c
   13db4:	mov	r3, #0
   13db8:	add	r5, r2, r5
   13dbc:	ldr	r2, [pc, #572]	; 14000 <__assert_fail@plt+0x1f7c>
   13dc0:	str	r3, [r2, #1360]	; 0x550
   13dc4:	b	13c6c <__assert_fail@plt+0x1be8>
   13dc8:	sub	r0, r5, #16
   13dcc:	mov	r2, r7
   13dd0:	ldr	r1, [sp, #216]	; 0xd8
   13dd4:	bl	17634 <__assert_fail@plt+0x55b0>
   13dd8:	b	13d48 <__assert_fail@plt+0x1cc4>
   13ddc:	ldr	r2, [sp, #124]	; 0x7c
   13de0:	ldr	r3, [sp, #108]	; 0x6c
   13de4:	orrs	r2, sl, r2
   13de8:	ldr	r2, [pc, #528]	; 14000 <__assert_fail@plt+0x1f7c>
   13dec:	ldr	r1, [sp, #24]
   13df0:	add	r5, r3, r5
   13df4:	str	r1, [r2, #1360]	; 0x550
   13df8:	bne	13c6c <__assert_fail@plt+0x1be8>
   13dfc:	ldrd	r0, [sp, #16]
   13e00:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   13e04:	ldr	r1, [pc, #456]	; 13fd4 <__assert_fail@plt+0x1f50>
   13e08:	ldr	r0, [sp, #32]
   13e0c:	bl	16d78 <__assert_fail@plt+0x4cf4>
   13e10:	cmp	r0, #0
   13e14:	beq	149f8 <__assert_fail@plt+0x2974>
   13e18:	str	r0, [sp, #216]	; 0xd8
   13e1c:	ldr	r7, [sp, #32]
   13e20:	ldr	sl, [sp, #24]
   13e24:	b	13c84 <__assert_fail@plt+0x1c00>
   13e28:	ldr	r0, [pc, #424]	; 13fd8 <__assert_fail@plt+0x1f54>
   13e2c:	bl	11dd8 <getenv@plt>
   13e30:	ldr	r3, [pc, #420]	; 13fdc <__assert_fail@plt+0x1f58>
   13e34:	cmp	r0, #0
   13e38:	moveq	r0, r3
   13e3c:	bl	15274 <__assert_fail@plt+0x31f0>
   13e40:	b	13684 <__assert_fail@plt+0x1600>
   13e44:	mov	r1, #16
   13e48:	ldr	r0, [sp, #44]	; 0x2c
   13e4c:	bl	1ee28 <__assert_fail@plt+0xcda4>
   13e50:	subs	r5, r0, #0
   13e54:	beq	149e4 <__assert_fail@plt+0x2960>
   13e58:	add	r1, sp, #660	; 0x294
   13e5c:	mov	r2, #16
   13e60:	bl	1f0a4 <__assert_fail@plt+0xd020>
   13e64:	mov	r0, r5
   13e68:	bl	1f1dc <__assert_fail@plt+0xd158>
   13e6c:	cmp	r0, #0
   13e70:	bne	14960 <__assert_fail@plt+0x28dc>
   13e74:	ldr	r0, [pc, #356]	; 13fe0 <__assert_fail@plt+0x1f5c>
   13e78:	bl	19b20 <__assert_fail@plt+0x7a9c>
   13e7c:	add	r0, sp, #660	; 0x294
   13e80:	ldr	r2, [pc, #344]	; 13fe0 <__assert_fail@plt+0x1f5c>
   13e84:	mov	r1, #16
   13e88:	bl	1a69c <__assert_fail@plt+0x8618>
   13e8c:	b	13674 <__assert_fail@plt+0x15f0>
   13e90:	mov	r0, fp
   13e94:	bl	11bb0 <free@plt>
   13e98:	mov	r0, #4
   13e9c:	bl	20424 <__assert_fail@plt+0xe3a0>
   13ea0:	ldr	r3, [pc, #388]	; 1402c <__assert_fail@plt+0x1fa8>
   13ea4:	mov	r4, #1
   13ea8:	mov	fp, r0
   13eac:	str	r3, [r0]
   13eb0:	b	1368c <__assert_fail@plt+0x1608>
   13eb4:	mov	r2, #5
   13eb8:	ldr	r1, [pc, #292]	; 13fe4 <__assert_fail@plt+0x1f60>
   13ebc:	mov	r0, #0
   13ec0:	bl	11c70 <dcgettext@plt>
   13ec4:	mov	r1, #0
   13ec8:	mov	r3, r9
   13ecc:	mov	r2, r0
   13ed0:	mov	r0, r1
   13ed4:	bl	11db4 <error@plt>
   13ed8:	ldrb	r3, [r5, #26]
   13edc:	b	12d80 <__assert_fail@plt+0xcfc>
   13ee0:	add	r0, sp, #176	; 0xb0
   13ee4:	bl	14e94 <__assert_fail@plt+0x2e10>
   13ee8:	cmp	r0, #0
   13eec:	beq	14504 <__assert_fail@plt+0x2480>
   13ef0:	ldr	r3, [pc, #264]	; 14000 <__assert_fail@plt+0x1f7c>
   13ef4:	ldrb	r3, [r3, #1353]	; 0x549
   13ef8:	cmp	r3, #0
   13efc:	movne	r6, r1
   13f00:	movne	sl, r1
   13f04:	bne	12c5c <__assert_fail@plt+0xbd8>
   13f08:	ldrb	r3, [sp, #207]	; 0xcf
   13f0c:	ldr	r2, [pc, #236]	; 14000 <__assert_fail@plt+0x1f7c>
   13f10:	strb	r3, [r2, #1356]	; 0x54c
   13f14:	b	13674 <__assert_fail@plt+0x15f0>
   13f18:	cmp	r5, #0
   13f1c:	beq	13660 <__assert_fail@plt+0x15dc>
   13f20:	ldr	r3, [pc, #216]	; 14000 <__assert_fail@plt+0x1f7c>
   13f24:	ldrb	r6, [r3, #1355]	; 0x54b
   13f28:	cmp	r6, #0
   13f2c:	bne	145c0 <__assert_fail@plt+0x253c>
   13f30:	ldrb	r3, [r3, #1354]	; 0x54a
   13f34:	cmp	r3, #0
   13f38:	beq	13624 <__assert_fail@plt+0x15a0>
   13f3c:	ldr	r3, [pc, #188]	; 14000 <__assert_fail@plt+0x1f7c>
   13f40:	ldr	r3, [r3, #1060]	; 0x424
   13f44:	cmp	r3, #0
   13f48:	beq	13624 <__assert_fail@plt+0x15a0>
   13f4c:	add	r1, sp, #660	; 0x294
   13f50:	ldr	r0, [sp, #16]
   13f54:	bl	14f08 <__assert_fail@plt+0x2e84>
   13f58:	add	r0, sp, #660	; 0x294
   13f5c:	bl	11e80 <strlen@plt>
   13f60:	mov	r3, #5
   13f64:	str	r3, [sp]
   13f68:	ldr	r2, [pc, #148]	; 14004 <__assert_fail@plt+0x1f80>
   13f6c:	ldr	r1, [pc, #148]	; 14008 <__assert_fail@plt+0x1f84>
   13f70:	mov	r3, r0
   13f74:	mov	r0, r6
   13f78:	bl	12078 <dcngettext@plt>
   13f7c:	add	r3, sp, #660	; 0x294
   13f80:	mov	r1, r6
   13f84:	mov	r2, r0
   13f88:	mov	r0, r6
   13f8c:	bl	11db4 <error@plt>
   13f90:	strb	r5, [sp, #247]	; 0xf7
   13f94:	b	13614 <__assert_fail@plt+0x1590>
   13f98:	andeq	r0, r0, r0
   13f9c:	svccc	0x00c00000
   13fa0:	andeq	r0, r0, r0
   13fa4:	svccc	0x00e80000
   13fa8:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   13fac:	andeq	r5, r3, r0, lsl #30
   13fb0:			; <UNDEFINED> instruction: 0x000246b8
   13fb4:	andeq	r4, r2, r0, lsr #13
   13fb8:	andeq	r3, r2, r0, lsr #2
   13fbc:	andeq	r6, r3, r8, asr #5
   13fc0:	andeq	r4, r2, r0, ror #6
   13fc4:			; <UNDEFINED> instruction: 0x000001b6
   13fc8:	andeq	r0, r8, r1, asr #32
   13fcc:	biceq	r1, r7, r1, ror ip
   13fd0:	andeq	r6, r1, r8, ror #16
   13fd4:	andeq	r3, r2, ip, lsl #5
   13fd8:	andeq	r4, r2, r8, lsl #16
   13fdc:	andeq	r3, r2, r8, asr lr
   13fe0:	andeq	r6, r3, r4, lsl r7
   13fe4:	andeq	r4, r2, r0, ror r7
   13fe8:	ldrdeq	r6, [r3], -r8
   13fec:	andeq	r4, r2, r8, lsr r8
   13ff0:	andeq	r6, r3, r4, ror #16
   13ff4:	andeq	r4, r2, r0, asr r8
   13ff8:	andeq	r6, r3, ip, lsl #14
   13ffc:	andeq	r4, r2, r8, asr #8
   14000:	andeq	r6, r3, r8, ror #5
   14004:	andeq	r4, r2, r0, lsr #15
   14008:			; <UNDEFINED> instruction: 0x000247bc
   1400c:			; <UNDEFINED> instruction: 0x000245bc
   14010:	ldrdeq	r6, [r3], -r0
   14014:	ldrdeq	r4, [r2], -r0
   14018:	andeq	r4, r2, ip, asr #27
   1401c:	andeq	r4, r2, ip, lsr #8
   14020:	andeq	r4, r2, r8, asr #7
   14024:	andeq	r3, r2, r0, asr #4
   14028:	andeq	r4, r2, r4, lsl #12
   1402c:	andeq	r3, r2, r8, asr #2
   14030:	andeq	r4, r2, r4, lsr #12
   14034:	andeq	r4, r2, r4, ror #12
   14038:	andeq	r4, r2, ip, lsl #13
   1403c:			; <UNDEFINED> instruction: 0x000231b8
   14040:	andeq	r4, r2, r0, ror #16
   14044:	andeq	r4, r2, ip, ror r3
   14048:	andeq	r2, r2, r0, asr #31
   1404c:	andeq	r1, r0, sp, lsl #2
   14050:	andeq	r3, r2, r4, ror #2
   14054:	andeq	r4, r2, r8, ror r5
   14058:	muleq	r2, r8, r3
   1405c:	andeq	r4, r2, ip, ror #16
   14060:	muleq	r2, ip, r1
   14064:	andeq	r4, r2, r0, asr r5
   14068:			; <UNDEFINED> instruction: 0x000244b0
   1406c:	andeq	r2, r2, r0, asr #24
   14070:	andeq	r4, r2, ip, asr #9
   14074:	andeq	r4, r2, r8, ror #9
   14078:	andeq	r4, r2, r8, ror #10
   1407c:	andeq	r4, r2, ip, lsl #10
   14080:	andeq	r4, r2, ip, asr #7
   14084:	andeq	r4, r2, ip, ror #9
   14088:			; <UNDEFINED> instruction: 0x00022db0
   1408c:	andeq	r4, r2, r0, asr #10
   14090:	andeq	r4, r2, r4, lsl r4
   14094:	andeq	r4, r2, r0, lsl r8
   14098:	andeq	r6, r3, ip, ror #3
   1409c:	ldrd	r0, [sp, #16]
   140a0:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   140a4:	ldr	r3, [sp, #24]
   140a8:	cmp	r3, #0
   140ac:	bne	13bf4 <__assert_fail@plt+0x1b70>
   140b0:	ldr	r0, [sp, #108]	; 0x6c
   140b4:	bl	11bb0 <free@plt>
   140b8:	ldr	r2, [pc, #-192]	; 14000 <__assert_fail@plt+0x1f7c>
   140bc:	lsrs	r3, sl, #29
   140c0:	movne	r3, #1
   140c4:	moveq	r3, #0
   140c8:	lsls	r0, sl, #3
   140cc:	ldr	r4, [r2, #1032]	; 0x408
   140d0:	bmi	14948 <__assert_fail@plt+0x28c4>
   140d4:	cmp	r3, #0
   140d8:	bne	14948 <__assert_fail@plt+0x28c4>
   140dc:	bl	20424 <__assert_fail@plt+0xe3a0>
   140e0:	mov	r5, r0
   140e4:	mov	r3, r0
   140e8:	b	140fc <__assert_fail@plt+0x2078>
   140ec:	add	r2, r4, #9
   140f0:	str	r4, [r3, #-4]
   140f4:	ldr	r4, [r4]
   140f8:	str	r2, [r3, #-8]
   140fc:	cmp	r4, #0
   14100:	add	r3, r3, #8
   14104:	bne	140ec <__assert_fail@plt+0x2068>
   14108:	mov	r0, r5
   1410c:	ldr	r3, [sp, #32]
   14110:	mov	r2, sl
   14114:	mov	r1, sl
   14118:	bl	18d74 <__assert_fail@plt+0x6cf0>
   1411c:	mov	r0, r5
   14120:	bl	11bb0 <free@plt>
   14124:	ldr	r3, [pc, #-300]	; 14000 <__assert_fail@plt+0x1f7c>
   14128:	ldr	r3, [r3, #1056]	; 0x420
   1412c:	cmp	r3, #0
   14130:	ble	1414c <__assert_fail@plt+0x20c8>
   14134:	mvn	r0, #0
   14138:	bl	15470 <__assert_fail@plt+0x33ec>
   1413c:	ldr	r3, [pc, #-324]	; 14000 <__assert_fail@plt+0x1f7c>
   14140:	ldr	r3, [r3, #1056]	; 0x420
   14144:	cmp	r3, #0
   14148:	bgt	14134 <__assert_fail@plt+0x20b0>
   1414c:	ldr	r3, [pc, #-340]	; 14000 <__assert_fail@plt+0x1f7c>
   14150:	ldrb	r3, [r3, #1352]	; 0x548
   14154:	cmp	r3, #0
   14158:	beq	13878 <__assert_fail@plt+0x17f4>
   1415c:	ldr	r3, [pc, #-380]	; 13fe8 <__assert_fail@plt+0x1f64>
   14160:	ldr	r0, [r3]
   14164:	bl	21998 <__assert_fail@plt+0xf914>
   14168:	cmn	r0, #1
   1416c:	bne	13878 <__assert_fail@plt+0x17f4>
   14170:	ldr	r1, [pc, #-316]	; 1403c <__assert_fail@plt+0x1fb8>
   14174:	mov	r2, #5
   14178:	mov	r0, #0
   1417c:	bl	11c70 <dcgettext@plt>
   14180:	ldr	r1, [pc, #-348]	; 1402c <__assert_fail@plt+0x1fa8>
   14184:	bl	1520c <__assert_fail@plt+0x3188>
   14188:	ldr	r0, [sp, #108]	; 0x6c
   1418c:	bl	11bb0 <free@plt>
   14190:	b	14124 <__assert_fail@plt+0x20a0>
   14194:	mov	r2, #1
   14198:	ldr	r1, [sp, #36]	; 0x24
   1419c:	mov	r3, r2
   141a0:	lsl	r3, r3, #1
   141a4:	cmp	r1, r3
   141a8:	add	r2, r2, #1
   141ac:	bhi	141a0 <__assert_fail@plt+0x211c>
   141b0:	lsl	r3, r2, #4
   141b4:	str	r3, [sp, #56]	; 0x38
   141b8:	b	13c30 <__assert_fail@plt+0x1bac>
   141bc:	ldr	r3, [sp, #56]	; 0x38
   141c0:	str	sl, [sp, #64]	; 0x40
   141c4:	add	r8, r3, #1
   141c8:	add	r7, r3, #2
   141cc:	add	r9, sp, #216	; 0xd8
   141d0:	ldr	sl, [sp, #24]
   141d4:	b	14244 <__assert_fail@plt+0x21c0>
   141d8:	ldr	r3, [r3, #1380]	; 0x564
   141dc:	cmp	r3, #0
   141e0:	bne	144a8 <__assert_fail@plt+0x2424>
   141e4:	ldr	r3, [pc, #-492]	; 14000 <__assert_fail@plt+0x1f7c>
   141e8:	mov	r4, #131072	; 0x20000
   141ec:	mov	r5, #0
   141f0:	ldr	r3, [r3, #1388]	; 0x56c
   141f4:	cmp	r3, #0
   141f8:	beq	142bc <__assert_fail@plt+0x2238>
   141fc:	mul	r6, r4, r8
   14200:	mov	r1, r8
   14204:	add	r6, r6, #1
   14208:	mov	r0, r6
   1420c:	bl	22434 <_obstack_memory_used@@Base+0x414>
   14210:	ldr	r3, [pc, #-536]	; 14000 <__assert_fail@plt+0x1f7c>
   14214:	mov	r1, #0
   14218:	cmp	r1, r5
   1421c:	ldr	r3, [r3, #1388]	; 0x56c
   14220:	cmpeq	r0, r4
   14224:	bne	144a8 <__assert_fail@plt+0x2424>
   14228:	sub	r2, r3, r7
   1422c:	cmp	r6, r2
   14230:	bcs	144a8 <__assert_fail@plt+0x2424>
   14234:	add	fp, fp, #1
   14238:	cmp	fp, sl
   1423c:	add	r7, r7, r6
   14240:	bcs	146a4 <__assert_fail@plt+0x2620>
   14244:	cmp	fp, #0
   14248:	beq	143ec <__assert_fail@plt+0x2368>
   1424c:	ldr	r3, [sp, #28]
   14250:	ldr	r1, [pc, #-556]	; 1402c <__assert_fail@plt+0x1fa8>
   14254:	ldr	r4, [r3, fp, lsl #2]
   14258:	mov	r0, r4
   1425c:	bl	11b50 <strcmp@plt>
   14260:	subs	r1, r0, #0
   14264:	bne	143d0 <__assert_fail@plt+0x234c>
   14268:	mov	r2, r9
   1426c:	mov	r0, #3
   14270:	bl	11d0c <__fxstat64@plt>
   14274:	adds	r0, r0, #0
   14278:	movne	r0, #1
   1427c:	cmp	r0, #0
   14280:	bne	149c8 <__assert_fail@plt+0x2944>
   14284:	ldr	r3, [sp, #232]	; 0xe8
   14288:	and	r3, r3, #61440	; 0xf000
   1428c:	cmp	r3, #32768	; 0x8000
   14290:	ldr	r3, [pc, #-664]	; 14000 <__assert_fail@plt+0x1f7c>
   14294:	bne	141d8 <__assert_fail@plt+0x2154>
   14298:	ldr	r3, [r3, #1388]	; 0x56c
   1429c:	ldrd	r4, [r9, #48]	; 0x30
   142a0:	cmp	r3, #0
   142a4:	bne	141fc <__assert_fail@plt+0x2178>
   142a8:	ldr	r2, [pc, #-688]	; 14000 <__assert_fail@plt+0x1f7c>
   142ac:	ldr	r3, [r2, #1380]	; 0x564
   142b0:	cmp	r3, #0
   142b4:	str	r3, [r2, #1388]	; 0x56c
   142b8:	bne	141fc <__assert_fail@plt+0x2178>
   142bc:	add	r1, sp, #88	; 0x58
   142c0:	mov	r0, #2
   142c4:	bl	11cb8 <getrlimit64@plt>
   142c8:	cmp	r0, #0
   142cc:	mvnne	r6, #0
   142d0:	bne	142f0 <__assert_fail@plt+0x226c>
   142d4:	ldrd	r2, [sp, #88]	; 0x58
   142d8:	mov	r1, #0
   142dc:	mvn	r0, #1
   142e0:	cmp	r3, r1
   142e4:	cmpeq	r2, r0
   142e8:	movls	r6, r2
   142ec:	mvnhi	r6, #0
   142f0:	add	r1, sp, #88	; 0x58
   142f4:	mov	r0, #9
   142f8:	bl	11cb8 <getrlimit64@plt>
   142fc:	cmp	r0, #0
   14300:	bne	14318 <__assert_fail@plt+0x2294>
   14304:	ldrd	r2, [sp, #88]	; 0x58
   14308:	mov	r1, #0
   1430c:	cmp	r3, r1
   14310:	cmpeq	r2, r6
   14314:	movcc	r6, r2
   14318:	add	r1, sp, #88	; 0x58
   1431c:	mov	r0, #5
   14320:	bl	11cb8 <getrlimit64@plt>
   14324:	lsr	r6, r6, #1
   14328:	cmp	r0, #0
   1432c:	bne	14360 <__assert_fail@plt+0x22dc>
   14330:	ldr	ip, [sp, #88]	; 0x58
   14334:	ldr	r3, [sp, #92]	; 0x5c
   14338:	mov	r1, #15
   1433c:	lsr	ip, ip, #4
   14340:	orr	ip, ip, r3, lsl #28
   14344:	lsr	r0, r3, #4
   14348:	umull	r2, r3, ip, r1
   1434c:	mla	r3, r1, r0, r3
   14350:	mov	r1, #0
   14354:	cmp	r3, r1
   14358:	cmpeq	r2, r6
   1435c:	rsbcc	r6, ip, ip, lsl #4
   14360:	bl	1c864 <__assert_fail@plt+0xa7e0>
   14364:	vmov.f64	d8, d0
   14368:	bl	1c7c8 <__assert_fail@plt+0xa744>
   1436c:	vmov	s15, r6
   14370:	ldr	r2, [pc, #-736]	; 14098 <__assert_fail@plt+0x2014>
   14374:	mov	r3, #18
   14378:	vcvt.f64.u32	d7, s15
   1437c:	ldr	r2, [r2, #104]	; 0x68
   14380:	mul	r3, r3, r2
   14384:	vmul.f64	d6, d0, d10
   14388:	vmul.f64	d0, d0, d9
   1438c:	vcmpe.f64	d8, d6
   14390:	vmrs	APSR_nzcv, fpscr
   14394:	vcmpe.f64	d0, d7
   14398:	vmovle.f64	d8, d6
   1439c:	vmrs	APSR_nzcv, fpscr
   143a0:	vcvtmi.u32.f64	s15, d0
   143a4:	vmovmi	r6, s15
   143a8:	vcvtmi.f64.u32	d7, s15
   143ac:	vcmpe.f64	d7, d8
   143b0:	vmrs	APSR_nzcv, fpscr
   143b4:	vcvtgt.u32.f64	s15, d8
   143b8:	vmovgt	r6, s15
   143bc:	cmp	r3, r6
   143c0:	movcs	r6, r3
   143c4:	ldr	r3, [pc, #-972]	; 14000 <__assert_fail@plt+0x1f7c>
   143c8:	str	r6, [r3, #1388]	; 0x56c
   143cc:	b	141fc <__assert_fail@plt+0x2178>
   143d0:	mov	r1, r4
   143d4:	mov	r2, r9
   143d8:	mov	r0, #3
   143dc:	bl	1203c <__xstat64@plt>
   143e0:	adds	r0, r0, #0
   143e4:	movne	r0, #1
   143e8:	b	1427c <__assert_fail@plt+0x21f8>
   143ec:	ldr	r0, [sp, #16]
   143f0:	bl	11f04 <fileno@plt>
   143f4:	mov	r2, r9
   143f8:	mov	r1, r0
   143fc:	mov	r0, #3
   14400:	bl	11d0c <__fxstat64@plt>
   14404:	adds	r0, r0, #0
   14408:	movne	r0, #1
   1440c:	b	1427c <__assert_fail@plt+0x21f8>
   14410:	ldr	r2, [sp, #228]	; 0xe4
   14414:	ldr	r3, [sp, #216]	; 0xd8
   14418:	ldr	r5, [pc, #-1040]	; 14010 <__assert_fail@plt+0x1f8c>
   1441c:	add	r3, r3, r2
   14420:	sub	r3, r3, r4
   14424:	mov	r2, #5
   14428:	asr	r3, r3, #4
   1442c:	adds	r6, sl, r3
   14430:	ldr	r1, [pc, #-1100]	; 13fec <__assert_fail@plt+0x1f68>
   14434:	mov	r0, #0
   14438:	adc	r7, fp, r3, asr #31
   1443c:	ldr	sl, [r5]
   14440:	bl	11c70 <dcgettext@plt>
   14444:	ldr	r3, [pc, #-1116]	; 13ff0 <__assert_fail@plt+0x1f6c>
   14448:	mov	r1, r7
   1444c:	add	r2, sp, #660	; 0x294
   14450:	mov	fp, r0
   14454:	mov	r0, r6
   14458:	ldr	r6, [r3]
   1445c:	bl	1c330 <__assert_fail@plt+0xa2ac>
   14460:	mov	r3, r6
   14464:	mov	r2, fp
   14468:	str	r8, [sp]
   1446c:	mov	r1, #1
   14470:	mov	r6, #0
   14474:	str	r0, [sp, #4]
   14478:	mov	r0, sl
   1447c:	bl	11f10 <__fprintf_chk@plt>
   14480:	mov	r2, #5
   14484:	ldr	r1, [pc, #-1176]	; 13ff4 <__assert_fail@plt+0x1f70>
   14488:	mov	r0, r6
   1448c:	ldr	r5, [r5]
   14490:	bl	11c70 <dcgettext@plt>
   14494:	mov	r1, r5
   14498:	mov	r2, r0
   1449c:	mov	r0, r4
   144a0:	bl	16f50 <__assert_fail@plt+0x4ecc>
   144a4:	b	13854 <__assert_fail@plt+0x17d0>
   144a8:	ldr	sl, [sp, #64]	; 0x40
   144ac:	mov	r7, r3
   144b0:	add	r3, sp, #108	; 0x6c
   144b4:	mov	r2, r7
   144b8:	mov	r0, r3
   144bc:	ldr	r1, [sp, #56]	; 0x38
   144c0:	str	r3, [sp, #28]
   144c4:	bl	15314 <__assert_fail@plt+0x3290>
   144c8:	b	13c44 <__assert_fail@plt+0x1bc0>
   144cc:	mov	r1, #8
   144d0:	mov	r0, r9
   144d4:	bl	205fc <__assert_fail@plt+0xe578>
   144d8:	mov	r3, #0
   144dc:	ldr	r2, [fp, r3, lsl #2]
   144e0:	cmp	r3, r5
   144e4:	str	r2, [r0, r3, lsl #3]
   144e8:	add	r3, r3, #1
   144ec:	bne	144dc <__assert_fail@plt+0x2458>
   144f0:	ldr	r3, [sp, #32]
   144f4:	mov	r2, r9
   144f8:	mov	r1, #0
   144fc:	bl	18d74 <__assert_fail@plt+0x6cf0>
   14500:	b	1414c <__assert_fail@plt+0x20c8>
   14504:	add	r0, sp, #176	; 0xb0
   14508:	mov	r1, #40	; 0x28
   1450c:	bl	2062c <__assert_fail@plt+0xe5a8>
   14510:	ldr	r3, [pc, #-1304]	; 14000 <__assert_fail@plt+0x1f7c>
   14514:	ldr	r2, [pc, #-1316]	; 13ff8 <__assert_fail@plt+0x1f74>
   14518:	ldr	r3, [r3, #1060]	; 0x424
   1451c:	cmp	r3, #0
   14520:	addne	r2, r3, #36	; 0x24
   14524:	ldrne	r3, [r3, #36]	; 0x24
   14528:	bne	1451c <__assert_fail@plt+0x2498>
   1452c:	str	r0, [r2]
   14530:	ldr	r2, [pc, #-1336]	; 14000 <__assert_fail@plt+0x1f7c>
   14534:	str	r3, [r0, #36]	; 0x24
   14538:	mov	r3, #1
   1453c:	ldr	r1, [r2, #1060]	; 0x424
   14540:	mov	r6, r3
   14544:	cmp	r1, #0
   14548:	ldrb	sl, [sp, #203]	; 0xcb
   1454c:	bne	12bf4 <__assert_fail@plt+0xb70>
   14550:	b	12c4c <__assert_fail@plt+0xbc8>
   14554:	add	r0, r0, #1
   14558:	ldr	r2, [pc, #-1380]	; 13ffc <__assert_fail@plt+0x1f78>
   1455c:	add	r1, sp, #144	; 0x90
   14560:	bl	16c80 <__assert_fail@plt+0x4bfc>
   14564:	ldr	r3, [sp, #144]	; 0x90
   14568:	cmp	r3, #0
   1456c:	sub	r3, r3, #1
   14570:	str	r3, [sp, #144]	; 0x90
   14574:	beq	14afc <__assert_fail@plt+0x2a78>
   14578:	ldrb	r3, [r0]
   1457c:	cmp	r3, #46	; 0x2e
   14580:	beq	14648 <__assert_fail@plt+0x25c4>
   14584:	mov	r2, #1
   14588:	mov	r1, r8
   1458c:	bl	14fd4 <__assert_fail@plt+0x2f50>
   14590:	b	13528 <__assert_fail@plt+0x14a4>
   14594:	ldr	r2, [pc, #-1368]	; 14044 <__assert_fail@plt+0x1fc0>
   14598:	add	r0, r0, #1
   1459c:	add	r1, sp, #140	; 0x8c
   145a0:	bl	16c80 <__assert_fail@plt+0x4bfc>
   145a4:	ldr	r2, [sp, #140]	; 0x8c
   145a8:	cmp	r2, #0
   145ac:	sub	r2, r2, #1
   145b0:	str	r2, [sp, #140]	; 0x8c
   145b4:	beq	147c4 <__assert_fail@plt+0x2740>
   145b8:	ldr	r3, [sp, #136]	; 0x88
   145bc:	b	134f8 <__assert_fail@plt+0x1474>
   145c0:	ldr	r3, [pc, #-1480]	; 14000 <__assert_fail@plt+0x1f7c>
   145c4:	ldr	r3, [r3, #1060]	; 0x424
   145c8:	cmp	r3, #0
   145cc:	beq	13660 <__assert_fail@plt+0x15dc>
   145d0:	add	r1, sp, #660	; 0x294
   145d4:	ldr	r0, [sp, #16]
   145d8:	bl	14f08 <__assert_fail@plt+0x2e84>
   145dc:	add	r0, sp, #660	; 0x294
   145e0:	bl	11e80 <strlen@plt>
   145e4:	mov	r3, #5
   145e8:	str	r3, [sp]
   145ec:	ldr	r2, [pc, #-1520]	; 14004 <__assert_fail@plt+0x1f80>
   145f0:	ldr	r1, [pc, #-1520]	; 14008 <__assert_fail@plt+0x1f84>
   145f4:	mov	r3, r0
   145f8:	mov	r0, #0
   145fc:	bl	12078 <dcngettext@plt>
   14600:	mov	r1, #0
   14604:	add	r3, sp, #660	; 0x294
   14608:	mov	r2, r0
   1460c:	mov	r0, r1
   14610:	bl	11db4 <error@plt>
   14614:	mov	r3, #1
   14618:	strb	r3, [sp, #247]	; 0xf7
   1461c:	b	13614 <__assert_fail@plt+0x1590>
   14620:	ldr	r8, [sp, #36]	; 0x24
   14624:	mov	r0, #1
   14628:	b	13aec <__assert_fail@plt+0x1a68>
   1462c:	ldrb	r2, [r2, #1]
   14630:	sub	r2, r2, #48	; 0x30
   14634:	cmp	r2, #9
   14638:	movhi	r2, #0
   1463c:	movls	r2, #1
   14640:	str	r2, [sp, #80]	; 0x50
   14644:	b	139a0 <__assert_fail@plt+0x191c>
   14648:	ldr	r2, [pc, #-1548]	; 14044 <__assert_fail@plt+0x1fc0>
   1464c:	add	r1, sp, #148	; 0x94
   14650:	add	r0, r0, #1
   14654:	bl	16c80 <__assert_fail@plt+0x4bfc>
   14658:	b	14584 <__assert_fail@plt+0x2500>
   1465c:	mov	r0, #0
   14660:	bl	1921c <__assert_fail@plt+0x7198>
   14664:	mov	r0, #2
   14668:	bl	1c6cc <__assert_fail@plt+0xa648>
   1466c:	cmp	r0, #8
   14670:	movcc	r3, r0
   14674:	movcs	r3, #8
   14678:	str	r3, [sp, #52]	; 0x34
   1467c:	b	13bb4 <__assert_fail@plt+0x1b30>
   14680:	ldrd	r0, [sp, #16]
   14684:	str	r2, [sp, #124]	; 0x7c
   14688:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   1468c:	b	13bf4 <__assert_fail@plt+0x1b70>
   14690:	mvn	r3, #0
   14694:	str	r3, [sp, #52]	; 0x34
   14698:	b	12500 <__assert_fail@plt+0x47c>
   1469c:	mov	r6, #1
   146a0:	b	13854 <__assert_fail@plt+0x17d0>
   146a4:	ldr	sl, [sp, #64]	; 0x40
   146a8:	b	144b0 <__assert_fail@plt+0x242c>
   146ac:	bl	1c7c8 <__assert_fail@plt+0xa744>
   146b0:	add	r8, sp, #328	; 0x148
   146b4:	ldrd	r0, [r8, #-8]
   146b8:	vmov.f64	d10, d0
   146bc:	bl	2298c <_obstack_memory_used@@Base+0x96c>
   146c0:	vmov	d7, r0, r1
   146c4:	vmul.f64	d10, d7, d10
   146c8:	vdiv.f64	d7, d10, d9
   146cc:	vcmpe.f64	d7, d8
   146d0:	vmrs	APSR_nzcv, fpscr
   146d4:	bpl	14620 <__assert_fail@plt+0x259c>
   146d8:	vmov	r0, r1, d7
   146dc:	bl	22a50 <_obstack_memory_used@@Base+0xa30>
   146e0:	strd	r0, [r8, #-8]
   146e4:	b	133cc <__assert_fail@plt+0x1348>
   146e8:	ldrd	r2, [sp, #136]	; 0x88
   146ec:	orrs	r3, r2, r3
   146f0:	mvneq	r3, #0
   146f4:	streq	r3, [sp, #136]	; 0x88
   146f8:	b	13440 <__assert_fail@plt+0x13bc>
   146fc:	mov	r2, #0
   14700:	add	r0, r0, #1
   14704:	add	r1, sp, #140	; 0x8c
   14708:	bl	16c80 <__assert_fail@plt+0x4bfc>
   1470c:	ldrd	r2, [sp, #136]	; 0x88
   14710:	orrs	r3, r2, r3
   14714:	bne	13a1c <__assert_fail@plt+0x1998>
   14718:	b	13a14 <__assert_fail@plt+0x1990>
   1471c:	mov	r3, #0
   14720:	mov	r0, r1
   14724:	strb	r3, [r1, #31]
   14728:	strh	r3, [r1, #24]
   1472c:	add	r1, sp, #660	; 0x294
   14730:	bl	14f08 <__assert_fail@plt+0x2e84>
   14734:	add	r0, sp, #660	; 0x294
   14738:	bl	15130 <__assert_fail@plt+0x30ac>
   1473c:	mov	r2, #5
   14740:	ldr	r1, [pc, #-1852]	; 1400c <__assert_fail@plt+0x1f88>
   14744:	mov	r0, #0
   14748:	bl	11c70 <dcgettext@plt>
   1474c:	ldr	r1, [fp]
   14750:	mov	r4, r0
   14754:	mov	r0, #4
   14758:	bl	1eb00 <__assert_fail@plt+0xca7c>
   1475c:	mov	r1, #0
   14760:	mov	r2, r4
   14764:	mov	r3, r0
   14768:	mov	r0, r1
   1476c:	bl	11db4 <error@plt>
   14770:	ldr	r3, [pc, #-1896]	; 14010 <__assert_fail@plt+0x1f8c>
   14774:	mov	r2, #5
   14778:	ldr	r1, [pc, #-1900]	; 14014 <__assert_fail@plt+0x1f90>
   1477c:	mov	r0, #0
   14780:	ldr	r4, [r3]
   14784:	bl	11c70 <dcgettext@plt>
   14788:	ldr	r2, [pc, #-1912]	; 14018 <__assert_fail@plt+0x1f94>
   1478c:	mov	r1, #1
   14790:	mov	r3, r0
   14794:	mov	r0, r4
   14798:	bl	11f10 <__fprintf_chk@plt>
   1479c:	mov	r0, #2
   147a0:	bl	1921c <__assert_fail@plt+0x7198>
   147a4:	ldr	r1, [pc, #-1868]	; 14060 <__assert_fail@plt+0x1fdc>
   147a8:	mov	r2, #5
   147ac:	mov	r0, #0
   147b0:	bl	11c70 <dcgettext@plt>
   147b4:	ldr	r1, [sp, #32]
   147b8:	bl	1520c <__assert_fail@plt+0x3188>
   147bc:	ldr	r0, [sp, #20]
   147c0:	bl	16e9c <__assert_fail@plt+0x4e18>
   147c4:	ldr	sl, [sp, #36]	; 0x24
   147c8:	ldr	r1, [pc, #-1972]	; 1401c <__assert_fail@plt+0x1f98>
   147cc:	ldr	r0, [sl]
   147d0:	bl	15160 <__assert_fail@plt+0x30dc>
   147d4:	bl	11c7c <__stack_chk_fail@plt>
   147d8:	ldr	sl, [sp, #36]	; 0x24
   147dc:	ldr	r1, [pc, #-1932]	; 14058 <__assert_fail@plt+0x1fd4>
   147e0:	ldr	r0, [sl]
   147e4:	bl	15160 <__assert_fail@plt+0x30dc>
   147e8:	ldr	r0, [pc, #-2000]	; 14020 <__assert_fail@plt+0x1f9c>
   147ec:	bl	15130 <__assert_fail@plt+0x30ac>
   147f0:	ldr	r3, [sp, #28]
   147f4:	cmp	r3, #0
   147f8:	beq	12b3c <__assert_fail@plt+0xab8>
   147fc:	cmp	r4, #0
   14800:	bne	1473c <__assert_fail@plt+0x26b8>
   14804:	ldr	r1, [pc, #-2024]	; 14024 <__assert_fail@plt+0x1fa0>
   14808:	ldr	r0, [sp, #28]
   1480c:	bl	16d78 <__assert_fail@plt+0x4cf4>
   14810:	subs	r5, r0, #0
   14814:	beq	1490c <__assert_fail@plt+0x2888>
   14818:	add	r0, sp, #320	; 0x140
   1481c:	bl	1f6f8 <__assert_fail@plt+0xd674>
   14820:	add	r1, sp, #320	; 0x140
   14824:	mov	r0, r5
   14828:	bl	1f7a4 <__assert_fail@plt+0xd720>
   1482c:	cmp	r0, #0
   14830:	moveq	r2, #5
   14834:	ldreq	r1, [pc, #-2068]	; 14028 <__assert_fail@plt+0x1fa4>
   14838:	beq	14920 <__assert_fail@plt+0x289c>
   1483c:	mov	r0, r5
   14840:	ldr	r1, [sp, #28]
   14844:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   14848:	ldr	r5, [sp, #320]	; 0x140
   1484c:	cmp	r5, #0
   14850:	beq	14914 <__assert_fail@plt+0x2890>
   14854:	mov	r0, fp
   14858:	bl	11bb0 <free@plt>
   1485c:	ldr	fp, [sp, #324]	; 0x144
   14860:	ldr	r6, [pc, #-2108]	; 1402c <__assert_fail@plt+0x1fa8>
   14864:	mov	r9, fp
   14868:	b	14884 <__assert_fail@plt+0x2800>
   1486c:	ldrb	r7, [sl]
   14870:	add	r4, r4, #1
   14874:	cmp	r7, #0
   14878:	beq	148d0 <__assert_fail@plt+0x284c>
   1487c:	cmp	r5, r4
   14880:	beq	12b3c <__assert_fail@plt+0xab8>
   14884:	mov	r8, r9
   14888:	ldr	sl, [r9], #4
   1488c:	mov	r1, r6
   14890:	mov	r0, sl
   14894:	bl	11b50 <strcmp@plt>
   14898:	subs	r7, r0, #0
   1489c:	bne	1486c <__assert_fail@plt+0x27e8>
   148a0:	ldr	r1, [pc, #-2168]	; 14030 <__assert_fail@plt+0x1fac>
   148a4:	mov	r2, #5
   148a8:	bl	11c70 <dcgettext@plt>
   148ac:	ldr	r1, [r8]
   148b0:	mov	r4, r0
   148b4:	mov	r0, #4
   148b8:	bl	1eb00 <__assert_fail@plt+0xca7c>
   148bc:	mov	r3, r0
   148c0:	mov	r2, r4
   148c4:	mov	r1, #0
   148c8:	mov	r0, #2
   148cc:	bl	11db4 <error@plt>
   148d0:	mov	r2, #5
   148d4:	ldr	r1, [pc, #-2216]	; 14034 <__assert_fail@plt+0x1fb0>
   148d8:	mov	r0, r7
   148dc:	bl	11c70 <dcgettext@plt>
   148e0:	ldr	r2, [sp, #28]
   148e4:	mov	r1, #3
   148e8:	mov	r5, r0
   148ec:	mov	r0, r7
   148f0:	bl	1ebdc <__assert_fail@plt+0xcb58>
   148f4:	mov	r2, r5
   148f8:	str	r4, [sp]
   148fc:	mov	r1, r7
   14900:	mov	r3, r0
   14904:	mov	r0, #2
   14908:	bl	11db4 <error@plt>
   1490c:	ldr	r0, [sp, #28]
   14910:	bl	16e9c <__assert_fail@plt+0x4e18>
   14914:	ldr	r1, [pc, #-2276]	; 14038 <__assert_fail@plt+0x1fb4>
   14918:	mov	r2, #5
   1491c:	mov	r0, r4
   14920:	bl	11c70 <dcgettext@plt>
   14924:	ldr	r1, [sp, #28]
   14928:	mov	r5, r0
   1492c:	mov	r0, #4
   14930:	bl	1eb00 <__assert_fail@plt+0xca7c>
   14934:	mov	r2, r5
   14938:	mov	r1, r4
   1493c:	mov	r3, r0
   14940:	mov	r0, #2
   14944:	bl	11db4 <error@plt>
   14948:	bl	2066c <__assert_fail@plt+0xe5e8>
   1494c:	ldr	r0, [pc, #-2236]	; 14098 <__assert_fail@plt+0x2014>
   14950:	cmp	r3, #0
   14954:	moveq	r3, #111	; 0x6f
   14958:	strb	r3, [r0, #116]!	; 0x74
   1495c:	bl	15130 <__assert_fail@plt+0x30ac>
   14960:	ldr	r1, [pc, #-2348]	; 1403c <__assert_fail@plt+0x1fb8>
   14964:	mov	r2, #5
   14968:	mov	r0, #0
   1496c:	bl	11c70 <dcgettext@plt>
   14970:	ldr	r1, [sp, #44]	; 0x2c
   14974:	bl	1520c <__assert_fail@plt+0x3188>
   14978:	ldr	r1, [pc, #-2368]	; 14040 <__assert_fail@plt+0x1fbc>
   1497c:	mov	r2, #5
   14980:	mov	r0, #0
   14984:	bl	11c70 <dcgettext@plt>
   14988:	ldr	r1, [r7]
   1498c:	bl	1520c <__assert_fail@plt+0x3188>
   14990:	ldr	r2, [pc, #-2388]	; 14044 <__assert_fail@plt+0x1fc0>
   14994:	add	r1, sp, #148	; 0x94
   14998:	add	r0, r0, #1
   1499c:	bl	16c80 <__assert_fail@plt+0x4bfc>
   149a0:	b	13a80 <__assert_fail@plt+0x19fc>
   149a4:	ldr	r3, [pc, #-2404]	; 14048 <__assert_fail@plt+0x1fc4>
   149a8:	ldr	r2, [pc, #-2404]	; 1404c <__assert_fail@plt+0x1fc8>
   149ac:	ldr	r1, [pc, #-2404]	; 14050 <__assert_fail@plt+0x1fcc>
   149b0:	ldr	r0, [pc, #-2404]	; 14054 <__assert_fail@plt+0x1fd0>
   149b4:	bl	12084 <__assert_fail@plt>
   149b8:	ldr	sl, [sp, #36]	; 0x24
   149bc:	ldr	r1, [pc, #-2412]	; 14058 <__assert_fail@plt+0x1fd4>
   149c0:	mov	r0, sl
   149c4:	bl	15160 <__assert_fail@plt+0x30dc>
   149c8:	ldr	r1, [pc, #-2420]	; 1405c <__assert_fail@plt+0x1fd8>
   149cc:	mov	r2, #5
   149d0:	mov	r0, #0
   149d4:	bl	11c70 <dcgettext@plt>
   149d8:	ldr	r3, [sp, #28]
   149dc:	ldr	r1, [r3, fp, lsl #2]
   149e0:	bl	1520c <__assert_fail@plt+0x3188>
   149e4:	ldr	r1, [pc, #-2444]	; 14060 <__assert_fail@plt+0x1fdc>
   149e8:	mov	r2, #5
   149ec:	bl	11c70 <dcgettext@plt>
   149f0:	ldr	r1, [sp, #44]	; 0x2c
   149f4:	bl	1520c <__assert_fail@plt+0x3188>
   149f8:	ldr	r0, [sp, #32]
   149fc:	bl	16e9c <__assert_fail@plt+0x4e18>
   14a00:	mov	r2, #5
   14a04:	ldr	r1, [pc, #-2472]	; 14064 <__assert_fail@plt+0x1fe0>
   14a08:	mov	r0, #0
   14a0c:	bl	11c70 <dcgettext@plt>
   14a10:	mov	r4, r0
   14a14:	ldr	r0, [r8]
   14a18:	bl	1eda8 <__assert_fail@plt+0xcd24>
   14a1c:	b	148bc <__assert_fail@plt+0x2838>
   14a20:	mov	r2, #5
   14a24:	ldr	r1, [pc, #-2500]	; 14068 <__assert_fail@plt+0x1fe4>
   14a28:	mov	r0, r5
   14a2c:	ldr	sl, [sp, #36]	; 0x24
   14a30:	bl	11c70 <dcgettext@plt>
   14a34:	ldr	r3, [pc, #-2512]	; 1406c <__assert_fail@plt+0x1fe8>
   14a38:	add	sl, r3, sl, lsl #4
   14a3c:	ldr	r4, [sl, #368]	; 0x170
   14a40:	mov	r6, r0
   14a44:	ldr	r0, [sp, #80]	; 0x50
   14a48:	bl	1eda8 <__assert_fail@plt+0xcd24>
   14a4c:	mov	r3, r4
   14a50:	mov	r2, r6
   14a54:	mov	r1, r5
   14a58:	str	r0, [sp]
   14a5c:	mov	r0, r5
   14a60:	bl	11db4 <error@plt>
   14a64:	mov	r2, #5
   14a68:	ldr	r1, [pc, #-2560]	; 14070 <__assert_fail@plt+0x1fec>
   14a6c:	mov	r0, r5
   14a70:	bl	11c70 <dcgettext@plt>
   14a74:	mov	r6, r0
   14a78:	ldr	r0, [pc, #-2572]	; 14074 <__assert_fail@plt+0x1ff0>
   14a7c:	bl	1eda8 <__assert_fail@plt+0xcd24>
   14a80:	mov	r3, r4
   14a84:	mov	r2, r6
   14a88:	mov	r1, r5
   14a8c:	str	r0, [sp]
   14a90:	mov	r0, #2
   14a94:	bl	11db4 <error@plt>
   14a98:	ldr	r1, [pc, #-2600]	; 14078 <__assert_fail@plt+0x1ff4>
   14a9c:	mov	r2, #5
   14aa0:	mov	r0, #0
   14aa4:	bl	11c70 <dcgettext@plt>
   14aa8:	mov	r1, #0
   14aac:	mov	r2, r0
   14ab0:	mov	r0, #2
   14ab4:	bl	11db4 <error@plt>
   14ab8:	mov	r2, #5
   14abc:	ldr	r1, [pc, #-2632]	; 1407c <__assert_fail@plt+0x1ff8>
   14ac0:	b	14aa0 <__assert_fail@plt+0x2a1c>
   14ac4:	mov	r2, #5
   14ac8:	ldr	r1, [pc, #-2640]	; 14080 <__assert_fail@plt+0x1ffc>
   14acc:	b	14aa0 <__assert_fail@plt+0x2a1c>
   14ad0:	mov	r2, #5
   14ad4:	ldr	r1, [pc, #-2648]	; 14084 <__assert_fail@plt+0x2000>
   14ad8:	b	14aa0 <__assert_fail@plt+0x2a1c>
   14adc:	str	r5, [sp]
   14ae0:	mov	r1, r8
   14ae4:	ldr	r3, [pc, #-2660]	; 14088 <__assert_fail@plt+0x2004>
   14ae8:	mov	r2, #7
   14aec:	bl	20ef8 <__assert_fail@plt+0xee74>
   14af0:	mov	r2, #5
   14af4:	ldr	r1, [pc, #-2672]	; 1408c <__assert_fail@plt+0x2008>
   14af8:	b	14aa0 <__assert_fail@plt+0x2a1c>
   14afc:	ldr	sl, [sp, #36]	; 0x24
   14b00:	ldr	r1, [pc, #-2680]	; 14090 <__assert_fail@plt+0x200c>
   14b04:	ldr	r0, [sl]
   14b08:	bl	15160 <__assert_fail@plt+0x30dc>
   14b0c:	mov	r2, #5
   14b10:	ldr	r1, [pc, #-2692]	; 14094 <__assert_fail@plt+0x2010>
   14b14:	mov	r0, #0
   14b18:	bl	11c70 <dcgettext@plt>
   14b1c:	ldr	r1, [fp, #4]
   14b20:	mov	r4, r0
   14b24:	mov	r0, #4
   14b28:	bl	1eb00 <__assert_fail@plt+0xca7c>
   14b2c:	ldr	r3, [sp, #20]
   14b30:	mov	r2, r4
   14b34:	str	r3, [sp]
   14b38:	mov	r1, #0
   14b3c:	mov	r3, r0
   14b40:	mov	r0, #2
   14b44:	bl	11db4 <error@plt>
   14b48:	ldr	r0, [pc, #-2744]	; 14098 <__assert_fail@plt+0x2014>
   14b4c:	ldr	r3, [sp, #20]
   14b50:	strb	r3, [r0, #128]!	; 0x80
   14b54:	bl	15130 <__assert_fail@plt+0x30ac>
   14b58:	mov	r0, r8
   14b5c:	bl	16e9c <__assert_fail@plt+0x4e18>
   14b60:	mov	fp, #0
   14b64:	mov	lr, #0
   14b68:	pop	{r1}		; (ldr r1, [sp], #4)
   14b6c:	mov	r2, sp
   14b70:	push	{r2}		; (str r2, [sp, #-4]!)
   14b74:	push	{r0}		; (str r0, [sp, #-4]!)
   14b78:	ldr	ip, [pc, #16]	; 14b90 <__assert_fail@plt+0x2b0c>
   14b7c:	push	{ip}		; (str ip, [sp, #-4]!)
   14b80:	ldr	r0, [pc, #12]	; 14b94 <__assert_fail@plt+0x2b10>
   14b84:	ldr	r3, [pc, #12]	; 14b98 <__assert_fail@plt+0x2b14>
   14b88:	bl	11e14 <__libc_start_main@plt>
   14b8c:	bl	12060 <abort@plt>
   14b90:	andeq	r2, r2, r8, lsl ip
   14b94:	muleq	r1, r0, r0
   14b98:			; <UNDEFINED> instruction: 0x00022bb8
   14b9c:	ldr	r3, [pc, #20]	; 14bb8 <__assert_fail@plt+0x2b34>
   14ba0:	ldr	r2, [pc, #20]	; 14bbc <__assert_fail@plt+0x2b38>
   14ba4:	add	r3, pc, r3
   14ba8:	ldr	r2, [r3, r2]
   14bac:	cmp	r2, #0
   14bb0:	bxeq	lr
   14bb4:	b	11e38 <__gmon_start__@plt>
   14bb8:	andeq	r1, r2, r4, asr r4
   14bbc:	andeq	r0, r0, r0, ror #3
   14bc0:	ldr	r0, [pc, #24]	; 14be0 <__assert_fail@plt+0x2b5c>
   14bc4:	ldr	r3, [pc, #24]	; 14be4 <__assert_fail@plt+0x2b60>
   14bc8:	cmp	r3, r0
   14bcc:	bxeq	lr
   14bd0:	ldr	r3, [pc, #16]	; 14be8 <__assert_fail@plt+0x2b64>
   14bd4:	cmp	r3, #0
   14bd8:	bxeq	lr
   14bdc:	bx	r3
   14be0:	andeq	r6, r3, r0, asr #5
   14be4:	andeq	r6, r3, r0, asr #5
   14be8:	andeq	r0, r0, r0
   14bec:	ldr	r0, [pc, #36]	; 14c18 <__assert_fail@plt+0x2b94>
   14bf0:	ldr	r1, [pc, #36]	; 14c1c <__assert_fail@plt+0x2b98>
   14bf4:	sub	r1, r1, r0
   14bf8:	asr	r1, r1, #2
   14bfc:	add	r1, r1, r1, lsr #31
   14c00:	asrs	r1, r1, #1
   14c04:	bxeq	lr
   14c08:	ldr	r3, [pc, #16]	; 14c20 <__assert_fail@plt+0x2b9c>
   14c0c:	cmp	r3, #0
   14c10:	bxeq	lr
   14c14:	bx	r3
   14c18:	andeq	r6, r3, r0, asr #5
   14c1c:	andeq	r6, r3, r0, asr #5
   14c20:	andeq	r0, r0, r0
   14c24:	push	{r4, lr}
   14c28:	ldr	r4, [pc, #24]	; 14c48 <__assert_fail@plt+0x2bc4>
   14c2c:	ldrb	r3, [r4]
   14c30:	cmp	r3, #0
   14c34:	popne	{r4, pc}
   14c38:	bl	14bc0 <__assert_fail@plt+0x2b3c>
   14c3c:	mov	r3, #1
   14c40:	strb	r3, [r4]
   14c44:	pop	{r4, pc}
   14c48:	andeq	r6, r3, r4, ror #5
   14c4c:	b	14bec <__assert_fail@plt+0x2b68>
   14c50:	push	{r4, lr}
   14c54:	ldr	r0, [r0, #4]
   14c58:	bl	22620 <_obstack_memory_used@@Base+0x600>
   14c5c:	mov	r0, r1
   14c60:	pop	{r4, pc}
   14c64:	ldr	r0, [r0, #4]
   14c68:	ldr	r3, [r1, #4]
   14c6c:	sub	r0, r0, r3
   14c70:	clz	r0, r0
   14c74:	lsr	r0, r0, #5
   14c78:	bx	lr
   14c7c:	push	{r4, r5, lr}
   14c80:	mov	lr, #0
   14c84:	ldr	r5, [pc, #172]	; 14d38 <__assert_fail@plt+0x2cb4>
   14c88:	ldr	r2, [r0]
   14c8c:	mov	r1, lr
   14c90:	ldr	r4, [r5]
   14c94:	ldrb	r3, [r2]
   14c98:	b	14cc0 <__assert_fail@plt+0x2c3c>
   14c9c:	cmp	r1, r3
   14ca0:	movcc	r1, r3
   14ca4:	ldrb	r3, [r2, #1]
   14ca8:	mov	lr, #0
   14cac:	cmp	r3, r4
   14cb0:	addeq	ip, r2, #2
   14cb4:	ldrbeq	r3, [r2, #2]
   14cb8:	moveq	lr, #1
   14cbc:	mov	r2, ip
   14cc0:	sub	ip, r3, #48	; 0x30
   14cc4:	cmp	ip, #9
   14cc8:	add	ip, r2, #1
   14ccc:	bls	14c9c <__assert_fail@plt+0x2c18>
   14cd0:	cmp	lr, #0
   14cd4:	subne	r2, r2, #1
   14cd8:	strne	r2, [r0]
   14cdc:	bne	14cf0 <__assert_fail@plt+0x2c6c>
   14ce0:	ldr	lr, [r5, #4]
   14ce4:	cmp	r3, lr
   14ce8:	beq	14cf8 <__assert_fail@plt+0x2c74>
   14cec:	str	r2, [r0]
   14cf0:	mov	r0, r1
   14cf4:	pop	{r4, r5, pc}
   14cf8:	ldrb	r3, [r2, #1]
   14cfc:	add	r2, r2, #2
   14d00:	sub	lr, r3, #48	; 0x30
   14d04:	cmp	lr, #9
   14d08:	movhi	r2, ip
   14d0c:	bls	14d18 <__assert_fail@plt+0x2c94>
   14d10:	b	14cec <__assert_fail@plt+0x2c68>
   14d14:	mov	r2, ip
   14d18:	mov	ip, r2
   14d1c:	cmp	r1, r3
   14d20:	movcc	r1, r3
   14d24:	ldrb	r3, [ip], #1
   14d28:	sub	lr, r3, #48	; 0x30
   14d2c:	cmp	lr, #9
   14d30:	bls	14d14 <__assert_fail@plt+0x2c90>
   14d34:	b	14cec <__assert_fail@plt+0x2c68>
   14d38:	andeq	r6, r3, r8, ror #5
   14d3c:	push	{r4, r5, lr}
   14d40:	mov	r3, r0
   14d44:	ldr	r4, [pc, #96]	; 14dac <__assert_fail@plt+0x2d28>
   14d48:	ldrb	r5, [r0]
   14d4c:	sub	sp, sp, #12
   14d50:	ldr	r2, [r4]
   14d54:	cmp	r5, #45	; 0x2d
   14d58:	addeq	r3, r3, #1
   14d5c:	mov	r0, sp
   14d60:	str	r3, [sp]
   14d64:	str	r2, [sp, #4]
   14d68:	bl	14c7c <__assert_fail@plt+0x2bf8>
   14d6c:	cmp	r0, #48	; 0x30
   14d70:	movls	r0, #0
   14d74:	bls	14d90 <__assert_fail@plt+0x2d0c>
   14d78:	ldr	r3, [sp]
   14d7c:	ldr	r2, [pc, #44]	; 14db0 <__assert_fail@plt+0x2d2c>
   14d80:	cmp	r5, #45	; 0x2d
   14d84:	ldrb	r3, [r3]
   14d88:	ldrb	r0, [r2, r3]
   14d8c:	rsbeq	r0, r0, #0
   14d90:	ldr	r2, [sp, #4]
   14d94:	ldr	r3, [r4]
   14d98:	cmp	r2, r3
   14d9c:	bne	14da8 <__assert_fail@plt+0x2d24>
   14da0:	add	sp, sp, #12
   14da4:	pop	{r4, r5, pc}
   14da8:	bl	11c7c <__stack_chk_fail@plt>
   14dac:	andeq	r5, r3, r0, lsl #30
   14db0:	andeq	r2, r2, r0, asr #24
   14db4:	push	{r4, r5, r6, r7, r8, lr}
   14db8:	ldrb	r3, [r0]
   14dbc:	ldr	r4, [pc, #200]	; 14e8c <__assert_fail@plt+0x2e08>
   14dc0:	add	r3, r4, r3
   14dc4:	ldrb	r3, [r3, #8]
   14dc8:	cmp	r3, #0
   14dcc:	beq	14de4 <__assert_fail@plt+0x2d60>
   14dd0:	ldrb	r3, [r0, #1]!
   14dd4:	add	r3, r4, r3
   14dd8:	ldrb	r3, [r3, #8]
   14ddc:	cmp	r3, #0
   14de0:	bne	14dd0 <__assert_fail@plt+0x2d4c>
   14de4:	ldr	r8, [pc, #164]	; 14e90 <__assert_fail@plt+0x2e0c>
   14de8:	mov	r7, #12
   14dec:	mov	r6, #0
   14df0:	add	r5, r6, r7
   14df4:	lsr	r5, r5, #1
   14df8:	ldr	lr, [r8, r5, lsl #3]
   14dfc:	ldrb	r2, [lr]
   14e00:	cmp	r2, #0
   14e04:	beq	14e84 <__assert_fail@plt+0x2e00>
   14e08:	ldrb	r3, [r0]
   14e0c:	add	r3, r4, r3
   14e10:	ldrb	r3, [r3, #264]	; 0x108
   14e14:	cmp	r3, r2
   14e18:	bcc	14e68 <__assert_fail@plt+0x2de4>
   14e1c:	addls	r2, r0, #1
   14e20:	bls	14e40 <__assert_fail@plt+0x2dbc>
   14e24:	b	14e7c <__assert_fail@plt+0x2df8>
   14e28:	ldrb	r3, [r3]
   14e2c:	add	r3, r4, r3
   14e30:	ldrb	r3, [r3, #264]	; 0x108
   14e34:	cmp	ip, r3
   14e38:	bhi	14e68 <__assert_fail@plt+0x2de4>
   14e3c:	bcc	14e7c <__assert_fail@plt+0x2df8>
   14e40:	ldrb	ip, [lr, #1]!
   14e44:	mov	r3, r2
   14e48:	add	r2, r2, #1
   14e4c:	cmp	ip, #0
   14e50:	bne	14e28 <__assert_fail@plt+0x2da4>
   14e54:	add	r5, r8, r5, lsl #3
   14e58:	cmp	r1, #0
   14e5c:	strne	r3, [r1]
   14e60:	ldr	r0, [r5, #4]
   14e64:	pop	{r4, r5, r6, r7, r8, pc}
   14e68:	mov	r7, r5
   14e6c:	cmp	r6, r7
   14e70:	bcc	14df0 <__assert_fail@plt+0x2d6c>
   14e74:	mov	r0, #0
   14e78:	pop	{r4, r5, r6, r7, r8, pc}
   14e7c:	add	r6, r5, #1
   14e80:	b	14e6c <__assert_fail@plt+0x2de8>
   14e84:	mov	r3, r0
   14e88:	b	14e54 <__assert_fail@plt+0x2dd0>
   14e8c:	andeq	r6, r3, r8, ror #5
   14e90:	andeq	r6, r3, ip, ror #3
   14e94:	ldr	r3, [r0, #16]
   14e98:	cmp	r3, #0
   14e9c:	beq	14eac <__assert_fail@plt+0x2e28>
   14ea0:	mov	r3, #0
   14ea4:	mov	r0, r3
   14ea8:	bx	lr
   14eac:	ldr	r2, [r0, #20]
   14eb0:	cmp	r2, #0
   14eb4:	bne	14ea4 <__assert_fail@plt+0x2e20>
   14eb8:	ldrb	r3, [r0, #24]
   14ebc:	cmp	r3, #0
   14ec0:	bne	14ea0 <__assert_fail@plt+0x2e1c>
   14ec4:	ldrb	r2, [r0, #25]
   14ec8:	cmp	r2, #0
   14ecc:	bne	14ea4 <__assert_fail@plt+0x2e20>
   14ed0:	ldrb	r3, [r0, #26]
   14ed4:	cmp	r3, #0
   14ed8:	bne	14ea0 <__assert_fail@plt+0x2e1c>
   14edc:	ldrh	r2, [r0, #28]
   14ee0:	cmp	r2, #0
   14ee4:	bne	14ea4 <__assert_fail@plt+0x2e20>
   14ee8:	ldrb	r2, [r0, #30]
   14eec:	cmp	r2, #0
   14ef0:	bne	14ea4 <__assert_fail@plt+0x2e20>
   14ef4:	ldrb	r2, [r0, #32]
   14ef8:	cmp	r2, #0
   14efc:	ldrbeq	r3, [r0, #27]
   14f00:	eoreq	r3, r3, #1
   14f04:	b	14ea4 <__assert_fail@plt+0x2e20>
   14f08:	ldrh	r3, [r0, #24]
   14f0c:	cmp	r3, #0
   14f10:	movne	r3, #98	; 0x62
   14f14:	strbne	r3, [r1], #1
   14f18:	ldr	r3, [pc, #172]	; 14fcc <__assert_fail@plt+0x2f48>
   14f1c:	ldr	r2, [r0, #16]
   14f20:	cmp	r2, r3
   14f24:	moveq	r3, #100	; 0x64
   14f28:	strbeq	r3, [r1], #1
   14f2c:	ldr	r3, [r0, #20]
   14f30:	cmp	r3, #0
   14f34:	movne	r3, #102	; 0x66
   14f38:	strbne	r3, [r1], #1
   14f3c:	ldrb	r3, [r0, #28]
   14f40:	cmp	r3, #0
   14f44:	movne	r3, #103	; 0x67
   14f48:	strbne	r3, [r1], #1
   14f4c:	ldrb	r3, [r0, #29]
   14f50:	cmp	r3, #0
   14f54:	movne	r3, #104	; 0x68
   14f58:	strbne	r3, [r1], #1
   14f5c:	ldr	r3, [pc, #108]	; 14fd0 <__assert_fail@plt+0x2f4c>
   14f60:	ldr	r2, [r0, #16]
   14f64:	cmp	r2, r3
   14f68:	moveq	r3, #105	; 0x69
   14f6c:	strbeq	r3, [r1], #1
   14f70:	ldrb	r3, [r0, #30]
   14f74:	cmp	r3, #0
   14f78:	movne	r3, #77	; 0x4d
   14f7c:	strbne	r3, [r1], #1
   14f80:	ldrb	r3, [r0, #26]
   14f84:	cmp	r3, #0
   14f88:	movne	r3, #110	; 0x6e
   14f8c:	strbne	r3, [r1], #1
   14f90:	ldrb	r3, [r0, #27]
   14f94:	cmp	r3, #0
   14f98:	movne	r3, #82	; 0x52
   14f9c:	strbne	r3, [r1], #1
   14fa0:	ldrb	r3, [r0, #31]
   14fa4:	cmp	r3, #0
   14fa8:	movne	r3, #114	; 0x72
   14fac:	strbne	r3, [r1], #1
   14fb0:	ldrb	r3, [r0, #32]
   14fb4:	cmp	r3, #0
   14fb8:	movne	r3, #86	; 0x56
   14fbc:	strbne	r3, [r1], #1
   14fc0:	mov	r3, #0
   14fc4:	strb	r3, [r1]
   14fc8:	bx	lr
   14fcc:	strdeq	r6, [r3], -r0
   14fd0:	strdeq	r6, [r3], -r0
   14fd4:	ldrb	r3, [r0]
   14fd8:	cmp	r3, #0
   14fdc:	bxeq	lr
   14fe0:	push	{r4, r5, r6, lr}
   14fe4:	mov	ip, #1
   14fe8:	ldr	lr, [pc, #304]	; 15120 <__assert_fail@plt+0x309c>
   14fec:	bic	r4, r2, #2
   14ff0:	sub	r6, lr, #512	; 0x200
   14ff4:	sub	r5, lr, #256	; 0x100
   14ff8:	sub	r2, r2, #1
   14ffc:	sub	r3, r3, #77	; 0x4d
   15000:	cmp	r3, #37	; 0x25
   15004:	ldrls	pc, [pc, r3, lsl #2]
   15008:	b	1511c <__assert_fail@plt+0x3098>
   1500c:	andeq	r5, r1, r4, lsl r1
   15010:	andeq	r5, r1, ip, lsl r1
   15014:	andeq	r5, r1, ip, lsl r1
   15018:	andeq	r5, r1, ip, lsl r1
   1501c:	andeq	r5, r1, ip, lsl r1
   15020:	andeq	r5, r1, ip, lsl #2
   15024:	andeq	r5, r1, ip, lsl r1
   15028:	andeq	r5, r1, ip, lsl r1
   1502c:	andeq	r5, r1, ip, lsl r1
   15030:	andeq	r5, r1, r4, lsl #2
   15034:	andeq	r5, r1, ip, lsl r1
   15038:	andeq	r5, r1, ip, lsl r1
   1503c:	andeq	r5, r1, ip, lsl r1
   15040:	andeq	r5, r1, ip, lsl r1
   15044:	andeq	r5, r1, ip, lsl r1
   15048:	andeq	r5, r1, ip, lsl r1
   1504c:	andeq	r5, r1, ip, lsl r1
   15050:	andeq	r5, r1, ip, lsl r1
   15054:	andeq	r5, r1, ip, lsl r1
   15058:	andeq	r5, r1, ip, lsl r1
   1505c:	andeq	r5, r1, ip, lsl r1
   15060:	strdeq	r5, [r1], -r0
   15064:	andeq	r5, r1, ip, lsl r1
   15068:	andeq	r5, r1, r8, ror #1
   1506c:	andeq	r5, r1, ip, lsl r1
   15070:	andeq	r5, r1, r0, ror #1
   15074:	ldrdeq	r5, [r1], -r8
   15078:	ldrdeq	r5, [r1], -r0
   1507c:	andeq	r5, r1, r0, asr #1
   15080:	andeq	r5, r1, ip, lsl r1
   15084:	andeq	r5, r1, ip, lsl r1
   15088:	andeq	r5, r1, ip, lsl r1
   1508c:	andeq	r5, r1, ip, lsl r1
   15090:	strheq	r5, [r1], -r8
   15094:	andeq	r5, r1, ip, lsl r1
   15098:	andeq	r5, r1, ip, lsl r1
   1509c:	andeq	r5, r1, ip, lsl r1
   150a0:	andeq	r5, r1, r4, lsr #1
   150a4:	strb	ip, [r1, #31]
   150a8:	ldrb	r3, [r0, #1]!
   150ac:	cmp	r3, #0
   150b0:	bne	14ffc <__assert_fail@plt+0x2f78>
   150b4:	pop	{r4, r5, r6, pc}
   150b8:	strb	ip, [r1, #26]
   150bc:	b	150a8 <__assert_fail@plt+0x3024>
   150c0:	ldr	r3, [r1, #16]
   150c4:	cmp	r3, #0
   150c8:	streq	lr, [r1, #16]
   150cc:	b	150a8 <__assert_fail@plt+0x3024>
   150d0:	strb	ip, [r1, #29]
   150d4:	b	150a8 <__assert_fail@plt+0x3024>
   150d8:	strb	ip, [r1, #28]
   150dc:	b	150a8 <__assert_fail@plt+0x3024>
   150e0:	str	r6, [r1, #20]
   150e4:	b	150a8 <__assert_fail@plt+0x3024>
   150e8:	str	r5, [r1, #16]
   150ec:	b	150a8 <__assert_fail@plt+0x3024>
   150f0:	cmp	r4, #0
   150f4:	strbeq	ip, [r1, #24]
   150f8:	cmp	r2, #1
   150fc:	strbls	ip, [r1, #25]
   15100:	b	150a8 <__assert_fail@plt+0x3024>
   15104:	strb	ip, [r1, #32]
   15108:	b	150a8 <__assert_fail@plt+0x3024>
   1510c:	strb	ip, [r1, #27]
   15110:	b	150a8 <__assert_fail@plt+0x3024>
   15114:	strb	ip, [r1, #30]
   15118:	b	150a8 <__assert_fail@plt+0x3024>
   1511c:	pop	{r4, r5, r6, pc}
   15120:	strdeq	r6, [r3], -r0
   15124:	ldr	r1, [r1]
   15128:	ldr	r0, [r0]
   1512c:	b	11b50 <strcmp@plt>
   15130:	push	{r4, lr}
   15134:	mov	r2, #5
   15138:	mov	r4, r0
   1513c:	ldr	r1, [pc, #24]	; 1515c <__assert_fail@plt+0x30d8>
   15140:	mov	r0, #0
   15144:	bl	11c70 <dcgettext@plt>
   15148:	mov	r3, r4
   1514c:	mov	r1, #0
   15150:	mov	r2, r0
   15154:	mov	r0, #2
   15158:	bl	11db4 <error@plt>
   1515c:	andeq	r3, r2, r0
   15160:	push	{lr}		; (str lr, [sp, #-4]!)
   15164:	mov	r5, r1
   15168:	sub	sp, sp, #12
   1516c:	mov	r6, r0
   15170:	mov	r2, #5
   15174:	ldr	r1, [pc, #60]	; 151b8 <__assert_fail@plt+0x3134>
   15178:	mov	r0, #0
   1517c:	bl	11c70 <dcgettext@plt>
   15180:	mov	r1, r5
   15184:	mov	r2, #5
   15188:	mov	r4, r0
   1518c:	mov	r0, #0
   15190:	bl	11c70 <dcgettext@plt>
   15194:	mov	r5, r0
   15198:	mov	r0, r6
   1519c:	bl	1eda8 <__assert_fail@plt+0xcd24>
   151a0:	mov	r3, r5
   151a4:	mov	r2, r4
   151a8:	mov	r1, #0
   151ac:	str	r0, [sp]
   151b0:	mov	r0, #2
   151b4:	bl	11db4 <error@plt>
   151b8:	andeq	r3, r2, r0, lsr #32
   151bc:	push	{r4, r5, r6, lr}
   151c0:	mov	r5, r0
   151c4:	ldr	r6, [pc, #60]	; 15208 <__assert_fail@plt+0x3184>
   151c8:	ldr	r4, [r6, #1032]	; 0x408
   151cc:	cmp	r4, #0
   151d0:	beq	151e8 <__assert_fail@plt+0x3164>
   151d4:	add	r0, r4, #9
   151d8:	bl	11ca0 <unlink@plt>
   151dc:	ldr	r4, [r4]
   151e0:	cmp	r4, #0
   151e4:	bne	151d4 <__assert_fail@plt+0x3150>
   151e8:	mov	r3, #0
   151ec:	mov	r0, r5
   151f0:	mov	r1, r3
   151f4:	str	r3, [r6, #1032]	; 0x408
   151f8:	bl	11c28 <signal@plt>
   151fc:	mov	r0, r5
   15200:	pop	{r4, r5, r6, lr}
   15204:	b	11b44 <raise@plt>
   15208:	andeq	r6, r3, r8, ror #5
   1520c:	push	{lr}		; (str lr, [sp, #-4]!)
   15210:	sub	sp, sp, #12
   15214:	mov	r4, r1
   15218:	mov	r6, r0
   1521c:	bl	11ea4 <__errno_location@plt>
   15220:	cmp	r4, #0
   15224:	ldr	r5, [r0]
   15228:	beq	15254 <__assert_fail@plt+0x31d0>
   1522c:	mov	r2, r4
   15230:	mov	r1, #3
   15234:	mov	r0, #0
   15238:	bl	1ebdc <__assert_fail@plt+0xcb58>
   1523c:	mov	r3, r6
   15240:	mov	r1, r5
   15244:	ldr	r2, [pc, #32]	; 1526c <__assert_fail@plt+0x31e8>
   15248:	str	r0, [sp]
   1524c:	mov	r0, #2
   15250:	bl	11db4 <error@plt>
   15254:	mov	r0, r4
   15258:	mov	r2, #5
   1525c:	ldr	r1, [pc, #12]	; 15270 <__assert_fail@plt+0x31ec>
   15260:	bl	11c70 <dcgettext@plt>
   15264:	mov	r4, r0
   15268:	b	1522c <__assert_fail@plt+0x31a8>
   1526c:	andeq	r3, r2, r4, asr r0
   15270:	andeq	r3, r2, r4, asr #32
   15274:	push	{r4, r5, r6, lr}
   15278:	mov	r5, r0
   1527c:	ldr	r4, [pc, #136]	; 1530c <__assert_fail@plt+0x3288>
   15280:	ldr	r3, [r4, #1036]	; 0x40c
   15284:	ldr	r2, [r4, #1040]	; 0x410
   15288:	ldr	r0, [r4, #1044]	; 0x414
   1528c:	cmp	r3, r2
   15290:	beq	152a4 <__assert_fail@plt+0x3220>
   15294:	add	r2, r3, #1
   15298:	str	r5, [r0, r3, lsl #2]
   1529c:	str	r2, [r4, #1036]	; 0x40c
   152a0:	pop	{r4, r5, r6, pc}
   152a4:	cmp	r0, #0
   152a8:	beq	152d8 <__assert_fail@plt+0x3254>
   152ac:	ldr	r3, [pc, #92]	; 15310 <__assert_fail@plt+0x328c>
   152b0:	cmp	r2, r3
   152b4:	bhi	152fc <__assert_fail@plt+0x3278>
   152b8:	add	r3, r2, #1
   152bc:	add	r2, r3, r2, lsr #1
   152c0:	lsl	r1, r2, #2
   152c4:	str	r2, [r4, #1040]	; 0x410
   152c8:	bl	20480 <__assert_fail@plt+0xe3fc>
   152cc:	ldr	r3, [r4, #1036]	; 0x40c
   152d0:	str	r0, [r4, #1044]	; 0x414
   152d4:	b	15294 <__assert_fail@plt+0x3210>
   152d8:	cmp	r2, #0
   152dc:	beq	15300 <__assert_fail@plt+0x327c>
   152e0:	lsrs	r3, r2, #30
   152e4:	movne	r3, #1
   152e8:	moveq	r3, #0
   152ec:	lsls	r1, r2, #2
   152f0:	bmi	152fc <__assert_fail@plt+0x3278>
   152f4:	cmp	r3, #0
   152f8:	beq	152c4 <__assert_fail@plt+0x3240>
   152fc:	bl	2066c <__assert_fail@plt+0xe5e8>
   15300:	mov	r1, #64	; 0x40
   15304:	mov	r2, #16
   15308:	b	152c4 <__assert_fail@plt+0x3240>
   1530c:	andeq	r6, r3, r8, ror #5
   15310:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   15314:	push	{r4, r5, r6, r7, r8, lr}
   15318:	mov	r7, r1
   1531c:	mov	r5, r0
   15320:	mov	r4, r2
   15324:	add	r6, r1, #1
   15328:	b	15338 <__assert_fail@plt+0x32b4>
   1532c:	lsr	r4, r4, #1
   15330:	cmp	r6, r4
   15334:	bcs	15374 <__assert_fail@plt+0x32f0>
   15338:	bic	r4, r4, #15
   1533c:	add	r4, r4, #16
   15340:	mov	r0, r4
   15344:	bl	11dfc <malloc@plt>
   15348:	cmp	r0, #0
   1534c:	str	r0, [r5]
   15350:	beq	1532c <__assert_fail@plt+0x32a8>
   15354:	mov	r3, #0
   15358:	str	r7, [r5, #20]
   1535c:	str	r4, [r5, #12]
   15360:	str	r3, [r5, #8]
   15364:	str	r3, [r5, #16]
   15368:	str	r3, [r5, #4]
   1536c:	strb	r3, [r5, #24]
   15370:	pop	{r4, r5, r6, r7, r8, pc}
   15374:	bl	2066c <__assert_fail@plt+0xe5e8>
   15378:	push	{r4, r5, r6, lr}
   1537c:	mov	r2, #0
   15380:	mov	r5, r1
   15384:	mov	r4, r0
   15388:	sub	r1, r1, r0
   1538c:	bl	1c394 <__assert_fail@plt+0xa310>
   15390:	cmp	r5, r4
   15394:	popls	{r4, r5, r6, pc}
   15398:	ldrb	r3, [r4], #1
   1539c:	cmp	r3, #9
   153a0:	addeq	r0, r0, #1
   153a4:	cmp	r5, r4
   153a8:	bne	15398 <__assert_fail@plt+0x3314>
   153ac:	pop	{r4, r5, r6, pc}
   153b0:	push	{r4, r5, r6, r7, r8, lr}
   153b4:	mov	r7, r0
   153b8:	mov	r6, r1
   153bc:	mov	r8, r2
   153c0:	bl	11ea4 <__errno_location@plt>
   153c4:	mov	r5, #0
   153c8:	mov	r2, r8
   153cc:	mov	r1, r6
   153d0:	mov	r4, r0
   153d4:	mov	r0, r7
   153d8:	str	r5, [r4]
   153dc:	bl	11e98 <strxfrm@plt>
   153e0:	ldr	r4, [r4]
   153e4:	cmp	r4, r5
   153e8:	popeq	{r4, r5, r6, r7, r8, pc}
   153ec:	mov	r2, #5
   153f0:	ldr	r1, [pc, #108]	; 15464 <__assert_fail@plt+0x33e0>
   153f4:	mov	r0, r5
   153f8:	bl	11c70 <dcgettext@plt>
   153fc:	mov	r1, r4
   15400:	mov	r2, r0
   15404:	mov	r0, r5
   15408:	bl	11db4 <error@plt>
   1540c:	mov	r2, #5
   15410:	ldr	r1, [pc, #80]	; 15468 <__assert_fail@plt+0x33e4>
   15414:	mov	r0, r5
   15418:	bl	11c70 <dcgettext@plt>
   1541c:	mov	r1, r5
   15420:	mov	r2, r0
   15424:	mov	r0, r5
   15428:	bl	11db4 <error@plt>
   1542c:	mov	r2, #5
   15430:	ldr	r1, [pc, #52]	; 1546c <__assert_fail@plt+0x33e8>
   15434:	mov	r0, r5
   15438:	bl	11c70 <dcgettext@plt>
   1543c:	mov	r2, r6
   15440:	mov	r1, #8
   15444:	mov	r4, r0
   15448:	mov	r0, r5
   1544c:	bl	1ea4c <__assert_fail@plt+0xc9c8>
   15450:	mov	r2, r4
   15454:	mov	r1, r5
   15458:	mov	r3, r0
   1545c:	mov	r0, #2
   15460:	bl	11db4 <error@plt>
   15464:	andeq	r3, r2, ip, asr r0
   15468:	andeq	r3, r2, ip, ror r0
   1546c:	andeq	r3, r2, r8, lsr #1
   15470:	push	{r4, r5, r6, lr}
   15474:	subs	r5, r0, #0
   15478:	ldr	r4, [pc, #272]	; 15590 <__assert_fail@plt+0x350c>
   1547c:	sub	sp, sp, #24
   15480:	moveq	r2, #1
   15484:	ldr	r3, [r4]
   15488:	movne	r2, #0
   1548c:	movne	r0, r5
   15490:	mvneq	r0, #0
   15494:	add	r1, sp, #4
   15498:	str	r3, [sp, #20]
   1549c:	bl	11d54 <waitpid@plt>
   154a0:	subs	r6, r0, #0
   154a4:	blt	1554c <__assert_fail@plt+0x34c8>
   154a8:	beq	154d8 <__assert_fail@plt+0x3454>
   154ac:	cmp	r5, #0
   154b0:	ldr	r5, [pc, #220]	; 15594 <__assert_fail@plt+0x3510>
   154b4:	ble	154f4 <__assert_fail@plt+0x3470>
   154b8:	ldr	r3, [sp, #4]
   154bc:	and	r2, r3, #127	; 0x7f
   154c0:	lsl	r3, r3, #16
   154c4:	orrs	r3, r2, r3, lsr #24
   154c8:	bne	15518 <__assert_fail@plt+0x3494>
   154cc:	ldr	r3, [r5, #1056]	; 0x420
   154d0:	sub	r3, r3, #1
   154d4:	str	r3, [r5, #1056]	; 0x420
   154d8:	ldr	r2, [sp, #20]
   154dc:	ldr	r3, [r4]
   154e0:	mov	r0, r6
   154e4:	cmp	r2, r3
   154e8:	bne	1558c <__assert_fail@plt+0x3508>
   154ec:	add	sp, sp, #24
   154f0:	pop	{r4, r5, r6, pc}
   154f4:	add	r1, sp, #8
   154f8:	ldr	r0, [r5, #1052]	; 0x41c
   154fc:	str	r6, [sp, #12]
   15500:	bl	1becc <__assert_fail@plt+0x9e48>
   15504:	cmp	r0, #0
   15508:	beq	154d8 <__assert_fail@plt+0x3454>
   1550c:	mov	r3, #2
   15510:	strb	r3, [r0, #8]
   15514:	b	154b8 <__assert_fail@plt+0x3434>
   15518:	mov	r2, #5
   1551c:	ldr	r1, [pc, #116]	; 15598 <__assert_fail@plt+0x3514>
   15520:	mov	r0, #0
   15524:	bl	11c70 <dcgettext@plt>
   15528:	ldr	r1, [r5, #1048]	; 0x418
   1552c:	mov	r4, r0
   15530:	mov	r0, #4
   15534:	bl	1eb00 <__assert_fail@plt+0xca7c>
   15538:	mov	r2, r4
   1553c:	mov	r1, #0
   15540:	mov	r3, r0
   15544:	mov	r0, #2
   15548:	bl	11db4 <error@plt>
   1554c:	bl	11ea4 <__errno_location@plt>
   15550:	mov	r2, #5
   15554:	ldr	r1, [pc, #64]	; 1559c <__assert_fail@plt+0x3518>
   15558:	ldr	r4, [r0]
   1555c:	mov	r0, #0
   15560:	bl	11c70 <dcgettext@plt>
   15564:	ldr	r3, [pc, #40]	; 15594 <__assert_fail@plt+0x3510>
   15568:	ldr	r1, [r3, #1048]	; 0x418
   1556c:	mov	r5, r0
   15570:	mov	r0, #4
   15574:	bl	1eb00 <__assert_fail@plt+0xca7c>
   15578:	mov	r2, r5
   1557c:	mov	r1, r4
   15580:	mov	r3, r0
   15584:	mov	r0, #2
   15588:	bl	11db4 <error@plt>
   1558c:	bl	11c7c <__stack_chk_fail@plt>
   15590:	andeq	r5, r3, r0, lsl #30
   15594:	andeq	r6, r3, r8, ror #5
   15598:	ldrdeq	r3, [r2], -ip
   1559c:	andeq	r3, r2, r8, asr #1
   155a0:	push	{r4, r5, lr}
   155a4:	sub	sp, sp, #20
   155a8:	ldr	r4, [pc, #80]	; 15600 <__assert_fail@plt+0x357c>
   155ac:	ldr	r2, [pc, #80]	; 15604 <__assert_fail@plt+0x3580>
   155b0:	mov	r5, r0
   155b4:	ldr	r3, [r4]
   155b8:	ldr	r0, [r2, #1052]	; 0x41c
   155bc:	mov	r1, sp
   155c0:	str	r3, [sp, #12]
   155c4:	str	r5, [sp, #4]
   155c8:	bl	1becc <__assert_fail@plt+0x9e48>
   155cc:	subs	r3, r0, #0
   155d0:	beq	155e4 <__assert_fail@plt+0x3560>
   155d4:	mov	r2, #2
   155d8:	mov	r0, r5
   155dc:	strb	r2, [r3, #8]
   155e0:	bl	15470 <__assert_fail@plt+0x33ec>
   155e4:	ldr	r2, [sp, #12]
   155e8:	ldr	r3, [r4]
   155ec:	cmp	r2, r3
   155f0:	bne	155fc <__assert_fail@plt+0x3578>
   155f4:	add	sp, sp, #20
   155f8:	pop	{r4, r5, pc}
   155fc:	bl	11c7c <__stack_chk_fail@plt>
   15600:	andeq	r5, r3, r0, lsl #30
   15604:	andeq	r6, r3, r8, ror #5
   15608:	ldr	r3, [pc, #136]	; 15698 <__assert_fail@plt+0x3614>
   1560c:	push	{lr}		; (str lr, [sp, #-4]!)
   15610:	sub	sp, sp, #20
   15614:	ldr	r3, [r3]
   15618:	mov	r5, r0
   1561c:	mov	r0, r1
   15620:	mov	r4, r1
   15624:	str	r3, [sp, #12]
   15628:	bl	11e80 <strlen@plt>
   1562c:	mov	r1, r4
   15630:	mov	r2, r0
   15634:	mov	r0, #2
   15638:	bl	11ef8 <write@plt>
   1563c:	cmp	r5, #0
   15640:	bne	1565c <__assert_fail@plt+0x35d8>
   15644:	mov	r2, #1
   15648:	ldr	r1, [pc, #76]	; 1569c <__assert_fail@plt+0x3618>
   1564c:	mov	r0, #2
   15650:	bl	11ef8 <write@plt>
   15654:	mov	r0, #2
   15658:	bl	11be0 <_exit@plt>
   1565c:	mov	r1, sp
   15660:	mov	r0, r5
   15664:	bl	1c264 <__assert_fail@plt+0xa1e0>
   15668:	mov	r2, #8
   1566c:	ldr	r1, [pc, #44]	; 156a0 <__assert_fail@plt+0x361c>
   15670:	mov	r4, r0
   15674:	mov	r0, #2
   15678:	bl	11ef8 <write@plt>
   1567c:	mov	r0, r4
   15680:	bl	11e80 <strlen@plt>
   15684:	mov	r1, r4
   15688:	mov	r2, r0
   1568c:	mov	r0, #2
   15690:	bl	11ef8 <write@plt>
   15694:	b	15644 <__assert_fail@plt+0x35c0>
   15698:	andeq	r5, r3, r0, lsl #30
   1569c:	andeq	r3, r2, r4, lsr #16
   156a0:	strdeq	r3, [r2], -ip
   156a4:	push	{r4, r5, lr}
   156a8:	mov	r4, r0
   156ac:	ldr	r5, [pc, #84]	; 15708 <__assert_fail@plt+0x3684>
   156b0:	sub	sp, sp, #12
   156b4:	ldr	r0, [r5, #1052]	; 0x41c
   156b8:	cmp	r0, #0
   156bc:	beq	156e0 <__assert_fail@plt+0x365c>
   156c0:	mov	r3, #1
   156c4:	strb	r3, [r4, #8]
   156c8:	mov	r1, r4
   156cc:	bl	1be74 <__assert_fail@plt+0x9df0>
   156d0:	cmp	r0, #0
   156d4:	beq	15704 <__assert_fail@plt+0x3680>
   156d8:	add	sp, sp, #12
   156dc:	pop	{r4, r5, pc}
   156e0:	str	r0, [sp]
   156e4:	mov	r1, r0
   156e8:	ldr	r3, [pc, #28]	; 1570c <__assert_fail@plt+0x3688>
   156ec:	ldr	r2, [pc, #28]	; 15710 <__assert_fail@plt+0x368c>
   156f0:	mov	r0, #47	; 0x2f
   156f4:	bl	1b848 <__assert_fail@plt+0x97c4>
   156f8:	cmp	r0, #0
   156fc:	str	r0, [r5, #1052]	; 0x41c
   15700:	bne	156c0 <__assert_fail@plt+0x363c>
   15704:	bl	2066c <__assert_fail@plt+0xe5e8>
   15708:	andeq	r6, r3, r8, ror #5
   1570c:	andeq	r4, r1, r4, ror #24
   15710:	andeq	r4, r1, r0, asr ip
   15714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15718:	sub	sp, sp, #12
   1571c:	mov	ip, r0
   15720:	ldr	r9, [sp, #48]	; 0x30
   15724:	ldrb	lr, [sp, #52]	; 0x34
   15728:	mov	r4, r1
   1572c:	lsl	r8, r9, #4
   15730:	mov	r6, r2
   15734:	mov	r5, r3
   15738:	rsb	r8, r8, #0
   1573c:	mov	r7, #0
   15740:	mov	sl, #1
   15744:	cmp	lr, #0
   15748:	ldr	r0, [ip, #40]	; 0x28
   1574c:	ldrne	r3, [ip, #20]
   15750:	ldreq	r3, [ip, #24]
   15754:	add	fp, r6, r8
   15758:	add	r1, ip, #12
   1575c:	lsr	r2, r3, #1
   15760:	sub	r3, r3, r2
   15764:	addne	r1, ip, #8
   15768:	sub	r6, fp, r2, lsl #4
   1576c:	add	r0, r0, #1
   15770:	strd	r2, [r4, #20]
   15774:	str	r1, [r4, #16]
   15778:	str	ip, [r4, #28]
   1577c:	str	r0, [r4, #40]	; 0x28
   15780:	mov	r1, #0
   15784:	str	fp, [r4, #8]
   15788:	str	fp, [r4]
   1578c:	str	r6, [r4, #12]
   15790:	str	r6, [r4, #4]
   15794:	strb	r7, [r4, #44]	; 0x2c
   15798:	add	r0, r4, #48	; 0x30
   1579c:	bl	11c04 <pthread_mutex_init@plt>
   157a0:	lsr	r1, r5, #1
   157a4:	cmp	r5, #1
   157a8:	add	ip, r4, #72	; 0x48
   157ac:	mov	r3, r1
   157b0:	sub	r5, r5, r1
   157b4:	mov	r0, r4
   157b8:	mov	r2, fp
   157bc:	mov	r1, ip
   157c0:	bls	157e4 <__assert_fail@plt+0x3760>
   157c4:	str	ip, [r4, #32]
   157c8:	stm	sp, {r9, sl}
   157cc:	bl	15714 <__assert_fail@plt+0x3690>
   157d0:	mov	ip, r4
   157d4:	mov	lr, #0
   157d8:	str	r0, [r4, #36]	; 0x24
   157dc:	mov	r4, r0
   157e0:	b	15744 <__assert_fail@plt+0x36c0>
   157e4:	mov	r0, ip
   157e8:	str	r7, [r4, #32]
   157ec:	str	r7, [r4, #36]	; 0x24
   157f0:	add	sp, sp, #12
   157f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f8:	push	{r4, r5, r6, lr}
   157fc:	mov	r4, r0
   15800:	add	r5, r0, #4
   15804:	mov	r6, r1
   15808:	mov	r0, r5
   1580c:	bl	11bbc <pthread_mutex_lock@plt>
   15810:	ldr	r0, [r4], #32
   15814:	mov	r1, r6
   15818:	bl	1c090 <__assert_fail@plt+0xa00c>
   1581c:	mov	r3, #1
   15820:	mov	r0, r4
   15824:	strb	r3, [r6, #44]	; 0x2c
   15828:	bl	12054 <pthread_cond_signal@plt>
   1582c:	mov	r0, r5
   15830:	pop	{r4, r5, r6, lr}
   15834:	b	11b14 <pthread_mutex_unlock@plt>
   15838:	ldr	r3, [pc, #344]	; 15998 <__assert_fail@plt+0x3914>
   1583c:	push	{r4, r5, lr}
   15840:	sub	r1, r1, #1
   15844:	ldr	lr, [r3, #96]	; 0x60
   15848:	add	r1, r0, r1
   1584c:	cmp	lr, #256	; 0x100
   15850:	ldr	r5, [r2]
   15854:	ldr	r4, [r2, #4]
   15858:	beq	1590c <__assert_fail@plt+0x3888>
   1585c:	cmp	r1, r0
   15860:	bls	15890 <__assert_fail@plt+0x380c>
   15864:	cmp	r5, #0
   15868:	sub	r5, r5, #1
   1586c:	beq	158bc <__assert_fail@plt+0x3838>
   15870:	mov	r3, r0
   15874:	mov	r0, r3
   15878:	ldrb	ip, [r3], #1
   1587c:	cmp	lr, ip
   15880:	beq	158a0 <__assert_fail@plt+0x381c>
   15884:	cmp	r1, r3
   15888:	mov	r0, r3
   1588c:	bhi	15874 <__assert_fail@plt+0x37f0>
   15890:	add	r0, r0, r4
   15894:	cmp	r1, r0
   15898:	movcc	r0, r1
   1589c:	pop	{r4, r5, pc}
   158a0:	cmp	r1, r0
   158a4:	bls	15890 <__assert_fail@plt+0x380c>
   158a8:	cmp	r1, r3
   158ac:	mov	r0, r3
   158b0:	bls	15890 <__assert_fail@plt+0x380c>
   158b4:	subs	r5, r5, #1
   158b8:	bcs	15870 <__assert_fail@plt+0x37ec>
   158bc:	ldrb	r3, [r2, #24]
   158c0:	cmp	r3, #0
   158c4:	beq	15890 <__assert_fail@plt+0x380c>
   158c8:	ldrb	r3, [r0]
   158cc:	ldr	lr, [pc, #200]	; 1599c <__assert_fail@plt+0x3918>
   158d0:	add	r3, lr, r3
   158d4:	ldrb	r3, [r3, #8]
   158d8:	cmp	r3, #0
   158dc:	addne	r3, r0, #1
   158e0:	beq	15890 <__assert_fail@plt+0x380c>
   158e4:	cmp	r1, r3
   158e8:	mov	r0, r3
   158ec:	bls	15890 <__assert_fail@plt+0x380c>
   158f0:	ldrb	r2, [r3]
   158f4:	add	r3, r3, #1
   158f8:	add	r2, lr, r2
   158fc:	ldrb	r2, [r2, #8]
   15900:	cmp	r2, #0
   15904:	bne	158e4 <__assert_fail@plt+0x3860>
   15908:	b	15890 <__assert_fail@plt+0x380c>
   1590c:	cmp	r1, r0
   15910:	bls	15890 <__assert_fail@plt+0x380c>
   15914:	cmp	r5, #0
   15918:	sub	r5, r5, #1
   1591c:	beq	158bc <__assert_fail@plt+0x3838>
   15920:	ldrb	r3, [r0]
   15924:	ldr	lr, [pc, #112]	; 1599c <__assert_fail@plt+0x3918>
   15928:	add	r3, lr, r3
   1592c:	ldrb	ip, [r3, #8]
   15930:	b	15940 <__assert_fail@plt+0x38bc>
   15934:	ldrb	r3, [r0]
   15938:	add	r3, lr, r3
   1593c:	ldrb	ip, [r3, #8]
   15940:	cmp	ip, #0
   15944:	beq	15958 <__assert_fail@plt+0x38d4>
   15948:	add	r0, r0, #1
   1594c:	cmp	r1, r0
   15950:	bhi	15934 <__assert_fail@plt+0x38b0>
   15954:	b	15890 <__assert_fail@plt+0x380c>
   15958:	cmp	r1, r0
   1595c:	bls	15890 <__assert_fail@plt+0x380c>
   15960:	add	r3, r0, #1
   15964:	b	1597c <__assert_fail@plt+0x38f8>
   15968:	ldrb	ip, [r3], #1
   1596c:	add	ip, lr, ip
   15970:	ldrb	ip, [ip, #8]
   15974:	cmp	ip, #0
   15978:	bne	1598c <__assert_fail@plt+0x3908>
   1597c:	cmp	r1, r3
   15980:	mov	r0, r3
   15984:	bne	15968 <__assert_fail@plt+0x38e4>
   15988:	b	15890 <__assert_fail@plt+0x380c>
   1598c:	subs	r5, r5, #1
   15990:	bcs	15940 <__assert_fail@plt+0x38bc>
   15994:	b	158bc <__assert_fail@plt+0x3838>
   15998:	andeq	r6, r3, ip, ror #3
   1599c:	andeq	r6, r3, r8, ror #5
   159a0:	ldr	r3, [pc, #412]	; 15b44 <__assert_fail@plt+0x3ac0>
   159a4:	push	{r4, r5, r6, lr}
   159a8:	sub	r1, r1, #1
   159ac:	ldr	r4, [r2, #12]
   159b0:	ldr	r6, [r2, #8]
   159b4:	ldr	r5, [r3, #96]	; 0x60
   159b8:	cmp	r4, #0
   159bc:	addeq	r6, r6, #1
   159c0:	cmp	r5, #256	; 0x100
   159c4:	add	r1, r0, r1
   159c8:	beq	15aa8 <__assert_fail@plt+0x3a24>
   159cc:	cmp	r1, r0
   159d0:	bls	15a04 <__assert_fail@plt+0x3980>
   159d4:	cmp	r6, #0
   159d8:	sub	r6, r6, #1
   159dc:	beq	15a04 <__assert_fail@plt+0x3980>
   159e0:	mov	r3, r0
   159e4:	mov	ip, r3
   159e8:	add	r3, r3, #1
   159ec:	ldrb	lr, [ip]
   159f0:	mov	r0, r3
   159f4:	cmp	r5, lr
   159f8:	beq	15a7c <__assert_fail@plt+0x39f8>
   159fc:	cmp	r1, r3
   15a00:	bhi	159e4 <__assert_fail@plt+0x3960>
   15a04:	cmp	r4, #0
   15a08:	beq	15b34 <__assert_fail@plt+0x3ab0>
   15a0c:	ldrb	r3, [r2, #25]
   15a10:	cmp	r3, #0
   15a14:	beq	15a64 <__assert_fail@plt+0x39e0>
   15a18:	cmp	r1, r0
   15a1c:	bls	15a64 <__assert_fail@plt+0x39e0>
   15a20:	ldrb	r3, [r0]
   15a24:	ldr	lr, [pc, #284]	; 15b48 <__assert_fail@plt+0x3ac4>
   15a28:	add	r3, lr, r3
   15a2c:	ldrb	r3, [r3, #8]
   15a30:	cmp	r3, #0
   15a34:	beq	15a64 <__assert_fail@plt+0x39e0>
   15a38:	add	r3, r0, #1
   15a3c:	b	15a58 <__assert_fail@plt+0x39d4>
   15a40:	ldrb	r2, [r3]
   15a44:	add	r3, r3, #1
   15a48:	add	r2, lr, r2
   15a4c:	ldrb	r2, [r2, #8]
   15a50:	cmp	r2, #0
   15a54:	beq	15a64 <__assert_fail@plt+0x39e0>
   15a58:	cmp	r1, r3
   15a5c:	mov	r0, r3
   15a60:	bne	15a40 <__assert_fail@plt+0x39bc>
   15a64:	add	r0, r0, r4
   15a68:	cmp	r1, r0
   15a6c:	movcc	ip, r1
   15a70:	movcs	ip, r0
   15a74:	mov	r0, ip
   15a78:	pop	{r4, r5, r6, pc}
   15a7c:	cmp	r1, ip
   15a80:	bls	15b3c <__assert_fail@plt+0x3ab8>
   15a84:	orrs	r3, r4, r6
   15a88:	bne	15a94 <__assert_fail@plt+0x3a10>
   15a8c:	mov	r0, ip
   15a90:	pop	{r4, r5, r6, pc}
   15a94:	cmp	r1, r0
   15a98:	bls	15a04 <__assert_fail@plt+0x3980>
   15a9c:	subs	r6, r6, #1
   15aa0:	bcc	15a04 <__assert_fail@plt+0x3980>
   15aa4:	b	159e0 <__assert_fail@plt+0x395c>
   15aa8:	cmp	r1, r0
   15aac:	bls	15a04 <__assert_fail@plt+0x3980>
   15ab0:	cmp	r6, #0
   15ab4:	sub	r5, r6, #1
   15ab8:	beq	15a04 <__assert_fail@plt+0x3980>
   15abc:	ldrb	r3, [r0]
   15ac0:	ldr	lr, [pc, #128]	; 15b48 <__assert_fail@plt+0x3ac4>
   15ac4:	add	r3, lr, r3
   15ac8:	ldrb	ip, [r3, #8]
   15acc:	b	15adc <__assert_fail@plt+0x3a58>
   15ad0:	ldrb	r3, [r0]
   15ad4:	add	r3, lr, r3
   15ad8:	ldrb	ip, [r3, #8]
   15adc:	cmp	ip, #0
   15ae0:	beq	15af4 <__assert_fail@plt+0x3a70>
   15ae4:	add	r0, r0, #1
   15ae8:	cmp	r1, r0
   15aec:	bhi	15ad0 <__assert_fail@plt+0x3a4c>
   15af0:	b	15a04 <__assert_fail@plt+0x3980>
   15af4:	cmp	r1, r0
   15af8:	bls	15a04 <__assert_fail@plt+0x3980>
   15afc:	add	r3, r0, #1
   15b00:	b	15b18 <__assert_fail@plt+0x3a94>
   15b04:	ldrb	ip, [r3], #1
   15b08:	add	ip, lr, ip
   15b0c:	ldrb	ip, [ip, #8]
   15b10:	cmp	ip, #0
   15b14:	bne	15b28 <__assert_fail@plt+0x3aa4>
   15b18:	cmp	r1, r3
   15b1c:	mov	r0, r3
   15b20:	bne	15b04 <__assert_fail@plt+0x3a80>
   15b24:	b	15a04 <__assert_fail@plt+0x3980>
   15b28:	subs	r5, r5, #1
   15b2c:	bcs	15adc <__assert_fail@plt+0x3a58>
   15b30:	b	15a04 <__assert_fail@plt+0x3980>
   15b34:	mov	ip, r0
   15b38:	b	15a8c <__assert_fail@plt+0x3a08>
   15b3c:	mov	r0, ip
   15b40:	b	15a04 <__assert_fail@plt+0x3980>
   15b44:	andeq	r6, r3, ip, ror #3
   15b48:	andeq	r6, r3, r8, ror #5
   15b4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b50:	vpush	{d8}
   15b54:	ldr	r9, [pc, #3324]	; 16858 <__assert_fail@plt+0x47d4>
   15b58:	ldr	r3, [pc, #3324]	; 1685c <__assert_fail@plt+0x47d8>
   15b5c:	mov	r2, #0
   15b60:	sub	sp, sp, #8448	; 0x2100
   15b64:	sub	sp, sp, #12
   15b68:	ldr	r6, [r0, #8]
   15b6c:	str	r2, [sp, #12]
   15b70:	str	r2, [sp, #16]
   15b74:	ldr	fp, [r1, #8]
   15b78:	add	r2, sp, #8448	; 0x2100
   15b7c:	ldr	r5, [r0, #12]
   15b80:	ldr	r4, [r1, #12]
   15b84:	ldr	sl, [r9, #1060]	; 0x424
   15b88:	ldr	r3, [r3]
   15b8c:	add	r2, r2, #4
   15b90:	str	r0, [sp, #24]
   15b94:	str	r1, [sp, #28]
   15b98:	str	r3, [r2]
   15b9c:	ldrb	r2, [r9, #1064]	; 0x428
   15ba0:	cmp	r6, r5
   15ba4:	movcc	r0, r5
   15ba8:	movcs	r0, r6
   15bac:	cmp	fp, r4
   15bb0:	movcs	r3, fp
   15bb4:	movcc	r3, r4
   15bb8:	cmp	r2, #0
   15bbc:	sub	r8, r0, r6
   15bc0:	sub	r4, r3, fp
   15bc4:	ldr	r2, [sl, #20]
   15bc8:	ldr	r5, [sl, #16]
   15bcc:	bne	15cd8 <__assert_fail@plt+0x3c54>
   15bd0:	ldrb	r1, [sl, #26]
   15bd4:	cmp	r1, #0
   15bd8:	bne	15cd8 <__assert_fail@plt+0x3c54>
   15bdc:	ldrh	r1, [sl, #28]
   15be0:	cmp	r1, #0
   15be4:	bne	15cd8 <__assert_fail@plt+0x3c54>
   15be8:	ldrb	r1, [sl, #30]
   15bec:	cmp	r1, #0
   15bf0:	bne	15cd8 <__assert_fail@plt+0x3c54>
   15bf4:	ldrb	r1, [sl, #27]
   15bf8:	cmp	r1, #0
   15bfc:	bne	15cd8 <__assert_fail@plt+0x3c54>
   15c00:	ldrb	r1, [sl, #32]
   15c04:	cmp	r1, #0
   15c08:	bne	15cd8 <__assert_fail@plt+0x3c54>
   15c0c:	cmp	r5, #0
   15c10:	beq	167a8 <__assert_fail@plt+0x4724>
   15c14:	cmp	r2, #0
   15c18:	beq	1669c <__assert_fail@plt+0x4618>
   15c1c:	cmp	r6, r0
   15c20:	bcs	15c34 <__assert_fail@plt+0x3bb0>
   15c24:	ldrb	r1, [r6]
   15c28:	ldrb	r1, [r5, r1]
   15c2c:	cmp	r1, #0
   15c30:	bne	16780 <__assert_fail@plt+0x46fc>
   15c34:	cmp	fp, r3
   15c38:	bcs	15c74 <__assert_fail@plt+0x3bf0>
   15c3c:	ldrb	r1, [fp]
   15c40:	ldrb	r1, [r5, r1]
   15c44:	cmp	r1, #0
   15c48:	addne	r1, fp, #1
   15c4c:	bne	15c68 <__assert_fail@plt+0x3be4>
   15c50:	b	16758 <__assert_fail@plt+0x46d4>
   15c54:	ldrb	ip, [r1]
   15c58:	add	r1, r1, #1
   15c5c:	ldrb	ip, [r5, ip]
   15c60:	cmp	ip, #0
   15c64:	beq	16758 <__assert_fail@plt+0x46d4>
   15c68:	cmp	r3, r1
   15c6c:	mov	fp, r1
   15c70:	bne	15c54 <__assert_fail@plt+0x3bd0>
   15c74:	cmp	r3, fp
   15c78:	movls	r3, #0
   15c7c:	movhi	r3, #1
   15c80:	cmp	r0, r6
   15c84:	rsbls	r7, r3, #0
   15c88:	rsbhi	r7, r3, #1
   15c8c:	cmp	r7, #0
   15c90:	beq	15d7c <__assert_fail@plt+0x3cf8>
   15c94:	mov	r1, r7
   15c98:	ldrb	r3, [sl, #31]
   15c9c:	cmp	r3, #0
   15ca0:	rsbne	r3, r1, #0
   15ca4:	movne	r1, r3
   15ca8:	add	r3, sp, #8448	; 0x2100
   15cac:	add	r3, r3, #4
   15cb0:	ldr	r2, [r3]
   15cb4:	ldr	r3, [pc, #2976]	; 1685c <__assert_fail@plt+0x47d8>
   15cb8:	mov	r0, r1
   15cbc:	ldr	r3, [r3]
   15cc0:	cmp	r2, r3
   15cc4:	bne	16854 <__assert_fail@plt+0x47d0>
   15cc8:	add	sp, sp, #8448	; 0x2100
   15ccc:	add	sp, sp, #12
   15cd0:	vpop	{d8}
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd8:	orrs	r1, r2, r5
   15cdc:	str	r1, [sp, #4]
   15ce0:	bne	15f40 <__assert_fail@plt+0x3ebc>
   15ce4:	ldrb	r2, [r0]
   15ce8:	str	r2, [sp, #12]
   15cec:	ldr	r2, [sp, #4]
   15cf0:	strb	r2, [r0]
   15cf4:	ldrb	r1, [r3]
   15cf8:	strb	r2, [r3]
   15cfc:	str	r1, [sp, #16]
   15d00:	ldrb	r7, [sl, #26]
   15d04:	cmp	r7, #0
   15d08:	bne	15ed4 <__assert_fail@plt+0x3e50>
   15d0c:	ldrb	r3, [sl, #28]
   15d10:	cmp	r3, #0
   15d14:	bne	16028 <__assert_fail@plt+0x3fa4>
   15d18:	ldrb	r7, [sl, #29]
   15d1c:	cmp	r7, #0
   15d20:	bne	16098 <__assert_fail@plt+0x4014>
   15d24:	ldrb	r5, [sl, #30]
   15d28:	cmp	r5, #0
   15d2c:	bne	16130 <__assert_fail@plt+0x40ac>
   15d30:	ldrb	r3, [sl, #27]
   15d34:	cmp	r3, #0
   15d38:	bne	161a8 <__assert_fail@plt+0x4124>
   15d3c:	ldrb	r3, [sl, #32]
   15d40:	cmp	r3, #0
   15d44:	beq	16190 <__assert_fail@plt+0x410c>
   15d48:	mov	r1, fp
   15d4c:	mov	r0, r6
   15d50:	bl	1ab08 <__assert_fail@plt+0x8a84>
   15d54:	mov	r7, r0
   15d58:	ldr	r3, [sp, #4]
   15d5c:	cmp	r3, #0
   15d60:	bne	15ec8 <__assert_fail@plt+0x3e44>
   15d64:	ldr	r3, [sp, #12]
   15d68:	strb	r3, [r6, r8]
   15d6c:	ldr	r3, [sp, #16]
   15d70:	strb	r3, [fp, r4]
   15d74:	cmp	r7, #0
   15d78:	bne	15c94 <__assert_fail@plt+0x3c10>
   15d7c:	ldr	sl, [sl, #36]	; 0x24
   15d80:	cmp	sl, #0
   15d84:	beq	167a0 <__assert_fail@plt+0x471c>
   15d88:	ldr	r3, [sl, #8]
   15d8c:	ldr	r2, [sp, #24]
   15d90:	cmn	r3, #1
   15d94:	ldr	r3, [sp, #28]
   15d98:	ldr	r6, [r2]
   15d9c:	ldr	r8, [r2, #4]
   15da0:	ldr	fp, [r3]
   15da4:	ldr	r7, [r3, #4]
   15da8:	beq	15e0c <__assert_fail@plt+0x3d88>
   15dac:	mov	r2, sl
   15db0:	mov	r1, r8
   15db4:	mov	r0, r6
   15db8:	bl	159a0 <__assert_fail@plt+0x391c>
   15dbc:	mov	r2, sl
   15dc0:	mov	r1, r7
   15dc4:	mov	r5, r0
   15dc8:	mov	r0, fp
   15dcc:	bl	159a0 <__assert_fail@plt+0x391c>
   15dd0:	ldr	r3, [sl]
   15dd4:	cmn	r3, #1
   15dd8:	mov	r4, r0
   15ddc:	beq	15e28 <__assert_fail@plt+0x3da4>
   15de0:	mov	r1, r8
   15de4:	mov	r0, r6
   15de8:	mov	r2, sl
   15dec:	bl	15838 <__assert_fail@plt+0x37b4>
   15df0:	mov	r2, sl
   15df4:	mov	r1, r7
   15df8:	mov	r6, r0
   15dfc:	mov	r0, fp
   15e00:	bl	15838 <__assert_fail@plt+0x37b4>
   15e04:	mov	fp, r0
   15e08:	b	15b9c <__assert_fail@plt+0x3b18>
   15e0c:	ldr	r3, [sl]
   15e10:	sub	r5, r8, #1
   15e14:	sub	r4, r7, #1
   15e18:	cmn	r3, #1
   15e1c:	add	r5, r6, r5
   15e20:	add	r4, fp, r4
   15e24:	bne	15de0 <__assert_fail@plt+0x3d5c>
   15e28:	ldrb	r3, [sl, #24]
   15e2c:	cmp	r3, #0
   15e30:	beq	15b9c <__assert_fail@plt+0x3b18>
   15e34:	cmp	r5, r6
   15e38:	bls	15e7c <__assert_fail@plt+0x3df8>
   15e3c:	ldrb	r3, [r6]
   15e40:	add	r3, r9, r3
   15e44:	ldrb	r3, [r3, #8]
   15e48:	cmp	r3, #0
   15e4c:	beq	15e7c <__assert_fail@plt+0x3df8>
   15e50:	add	r3, r6, #1
   15e54:	b	15e70 <__assert_fail@plt+0x3dec>
   15e58:	ldrb	r2, [r3]
   15e5c:	add	r3, r3, #1
   15e60:	add	r2, r9, r2
   15e64:	ldrb	r2, [r2, #8]
   15e68:	cmp	r2, #0
   15e6c:	beq	15e7c <__assert_fail@plt+0x3df8>
   15e70:	cmp	r5, r3
   15e74:	mov	r6, r3
   15e78:	bne	15e58 <__assert_fail@plt+0x3dd4>
   15e7c:	cmp	r4, fp
   15e80:	bls	15b9c <__assert_fail@plt+0x3b18>
   15e84:	ldrb	r3, [fp]
   15e88:	add	r3, r9, r3
   15e8c:	ldrb	r3, [r3, #8]
   15e90:	cmp	r3, #0
   15e94:	addne	r3, fp, #1
   15e98:	bne	15eb8 <__assert_fail@plt+0x3e34>
   15e9c:	b	15b9c <__assert_fail@plt+0x3b18>
   15ea0:	ldrb	r2, [r3]
   15ea4:	add	r3, r3, #1
   15ea8:	add	r2, r9, r2
   15eac:	ldrb	r2, [r2, #8]
   15eb0:	cmp	r2, #0
   15eb4:	beq	15b9c <__assert_fail@plt+0x3b18>
   15eb8:	cmp	r4, r3
   15ebc:	mov	fp, r3
   15ec0:	bne	15ea0 <__assert_fail@plt+0x3e1c>
   15ec4:	b	15b9c <__assert_fail@plt+0x3b18>
   15ec8:	ldr	r0, [sp, #44]	; 0x2c
   15ecc:	bl	11bb0 <free@plt>
   15ed0:	b	15d74 <__assert_fail@plt+0x3cf0>
   15ed4:	ldrb	r3, [r6]
   15ed8:	mov	r0, r6
   15edc:	add	r3, r9, r3
   15ee0:	ldrb	r3, [r3, #8]
   15ee4:	cmp	r3, #0
   15ee8:	beq	15f00 <__assert_fail@plt+0x3e7c>
   15eec:	ldrb	r3, [r0, #1]!
   15ef0:	add	r3, r9, r3
   15ef4:	ldrb	r3, [r3, #8]
   15ef8:	cmp	r3, #0
   15efc:	bne	15eec <__assert_fail@plt+0x3e68>
   15f00:	ldrb	r3, [fp]
   15f04:	mov	r1, fp
   15f08:	add	r3, r9, r3
   15f0c:	ldrb	r3, [r3, #8]
   15f10:	cmp	r3, #0
   15f14:	beq	15f2c <__assert_fail@plt+0x3ea8>
   15f18:	ldrb	r3, [r1, #1]!
   15f1c:	add	r3, r9, r3
   15f20:	ldrb	r3, [r3, #8]
   15f24:	cmp	r3, #0
   15f28:	bne	15f18 <__assert_fail@plt+0x3e94>
   15f2c:	ldr	r3, [r9]
   15f30:	ldr	r2, [r9, #4]
   15f34:	bl	1f95c <__assert_fail@plt+0xd8d8>
   15f38:	mov	r7, r0
   15f3c:	b	15d58 <__assert_fail@plt+0x3cd4>
   15f40:	add	r0, r8, r4
   15f44:	add	r0, r0, #2
   15f48:	cmp	r0, #4000	; 0xfa0
   15f4c:	movls	r3, #0
   15f50:	strls	r3, [sp, #44]	; 0x2c
   15f54:	addls	ip, sp, #452	; 0x1c4
   15f58:	bhi	16150 <__assert_fail@plt+0x40cc>
   15f5c:	add	r0, r8, #1
   15f60:	cmp	r8, #0
   15f64:	add	r0, ip, r0
   15f68:	beq	16174 <__assert_fail@plt+0x40f0>
   15f6c:	sub	r6, r6, #1
   15f70:	add	lr, r6, r8
   15f74:	mov	r8, #0
   15f78:	b	15fa0 <__assert_fail@plt+0x3f1c>
   15f7c:	ldrb	r1, [r5, r3]
   15f80:	cmp	r1, #0
   15f84:	bne	15f98 <__assert_fail@plt+0x3f14>
   15f88:	cmp	r2, #0
   15f8c:	bne	15fac <__assert_fail@plt+0x3f28>
   15f90:	strb	r3, [ip, r8]
   15f94:	add	r8, r8, #1
   15f98:	cmp	lr, r6
   15f9c:	beq	15fb4 <__assert_fail@plt+0x3f30>
   15fa0:	cmp	r5, #0
   15fa4:	ldrb	r3, [r6, #1]!
   15fa8:	bne	15f7c <__assert_fail@plt+0x3ef8>
   15fac:	ldrb	r3, [r2, r3]
   15fb0:	b	15f90 <__assert_fail@plt+0x3f0c>
   15fb4:	add	r1, ip, r8
   15fb8:	mov	r3, #0
   15fbc:	cmp	r4, #0
   15fc0:	strb	r3, [r1]
   15fc4:	beq	16188 <__assert_fail@plt+0x4104>
   15fc8:	sub	fp, fp, #1
   15fcc:	add	lr, fp, r4
   15fd0:	mov	r4, r3
   15fd4:	b	15ffc <__assert_fail@plt+0x3f78>
   15fd8:	ldrb	r1, [r5, r3]
   15fdc:	cmp	r1, #0
   15fe0:	bne	15ff4 <__assert_fail@plt+0x3f70>
   15fe4:	cmp	r2, #0
   15fe8:	bne	16008 <__assert_fail@plt+0x3f84>
   15fec:	strb	r3, [r0, r4]
   15ff0:	add	r4, r4, #1
   15ff4:	cmp	lr, fp
   15ff8:	beq	16010 <__assert_fail@plt+0x3f8c>
   15ffc:	cmp	r5, #0
   16000:	ldrb	r3, [fp, #1]!
   16004:	bne	15fd8 <__assert_fail@plt+0x3f54>
   16008:	ldrb	r3, [r2, r3]
   1600c:	b	15fec <__assert_fail@plt+0x3f68>
   16010:	add	r2, r0, r4
   16014:	mov	r3, #0
   16018:	mov	fp, r0
   1601c:	mov	r6, ip
   16020:	strb	r3, [r2]
   16024:	b	15d00 <__assert_fail@plt+0x3c7c>
   16028:	add	r1, sp, #80	; 0x50
   1602c:	mov	r0, r6
   16030:	bl	11c40 <strtold@plt>
   16034:	add	r1, sp, #84	; 0x54
   16038:	mov	r0, fp
   1603c:	vmov.f64	d8, d0
   16040:	bl	11c40 <strtold@plt>
   16044:	ldr	r3, [sp, #80]	; 0x50
   16048:	cmp	r6, r3
   1604c:	beq	16554 <__assert_fail@plt+0x44d0>
   16050:	ldr	r3, [sp, #84]	; 0x54
   16054:	cmp	fp, r3
   16058:	beq	16090 <__assert_fail@plt+0x400c>
   1605c:	vcmpe.f64	d8, d0
   16060:	vmrs	APSR_nzcv, fpscr
   16064:	bmi	1682c <__assert_fail@plt+0x47a8>
   16068:	bgt	16090 <__assert_fail@plt+0x400c>
   1606c:	vcmp.f64	d8, d0
   16070:	vmrs	APSR_nzcv, fpscr
   16074:	beq	15d58 <__assert_fail@plt+0x3cd4>
   16078:	vcmp.f64	d0, d0
   1607c:	vmrs	APSR_nzcv, fpscr
   16080:	beq	1682c <__assert_fail@plt+0x47a8>
   16084:	vcmp.f64	d8, d8
   16088:	vmrs	APSR_nzcv, fpscr
   1608c:	bne	16720 <__assert_fail@plt+0x469c>
   16090:	mov	r7, #1
   16094:	b	15d58 <__assert_fail@plt+0x3cd4>
   16098:	ldrb	r3, [r6]
   1609c:	mov	r5, r6
   160a0:	add	r3, r9, r3
   160a4:	ldrb	r3, [r3, #8]
   160a8:	cmp	r3, #0
   160ac:	beq	160c4 <__assert_fail@plt+0x4040>
   160b0:	ldrb	r3, [r5, #1]!
   160b4:	add	r3, r9, r3
   160b8:	ldrb	r3, [r3, #8]
   160bc:	cmp	r3, #0
   160c0:	bne	160b0 <__assert_fail@plt+0x402c>
   160c4:	ldrb	r3, [fp]
   160c8:	mov	r1, fp
   160cc:	add	r3, r9, r3
   160d0:	ldrb	r3, [r3, #8]
   160d4:	cmp	r3, #0
   160d8:	beq	160f0 <__assert_fail@plt+0x406c>
   160dc:	ldrb	r3, [r1, #1]!
   160e0:	add	r3, r9, r3
   160e4:	ldrb	r3, [r3, #8]
   160e8:	cmp	r3, #0
   160ec:	bne	160dc <__assert_fail@plt+0x4058>
   160f0:	mov	r0, r5
   160f4:	str	r1, [sp, #8]
   160f8:	bl	14d3c <__assert_fail@plt+0x2cb8>
   160fc:	ldr	r1, [sp, #8]
   16100:	mov	r7, r0
   16104:	mov	r0, r1
   16108:	bl	14d3c <__assert_fail@plt+0x2cb8>
   1610c:	ldr	r1, [sp, #8]
   16110:	subs	r7, r7, r0
   16114:	bne	15d58 <__assert_fail@plt+0x3cd4>
   16118:	mov	r0, r5
   1611c:	ldr	r3, [r9]
   16120:	ldr	r2, [r9, #4]
   16124:	bl	1f95c <__assert_fail@plt+0xd8d8>
   16128:	mov	r7, r0
   1612c:	b	15d58 <__assert_fail@plt+0x3cd4>
   16130:	mov	r1, r7
   16134:	mov	r0, r6
   16138:	bl	14db4 <__assert_fail@plt+0x2d30>
   1613c:	mov	r5, r0
   16140:	mov	r0, fp
   16144:	bl	14db4 <__assert_fail@plt+0x2d30>
   16148:	sub	r7, r5, r0
   1614c:	b	15d58 <__assert_fail@plt+0x3cd4>
   16150:	str	r2, [sp, #8]
   16154:	bl	20424 <__assert_fail@plt+0xe3a0>
   16158:	cmp	r8, #0
   1615c:	ldr	r2, [sp, #8]
   16160:	mov	ip, r0
   16164:	str	r0, [sp, #44]	; 0x2c
   16168:	add	r0, r8, #1
   1616c:	add	r0, ip, r0
   16170:	bne	15f6c <__assert_fail@plt+0x3ee8>
   16174:	mov	r1, ip
   16178:	mov	r3, #0
   1617c:	cmp	r4, #0
   16180:	strb	r3, [r1]
   16184:	bne	15fc8 <__assert_fail@plt+0x3f44>
   16188:	mov	r2, r0
   1618c:	b	16014 <__assert_fail@plt+0x3f90>
   16190:	cmp	r8, #0
   16194:	bne	16564 <__assert_fail@plt+0x44e0>
   16198:	adds	r7, r4, #0
   1619c:	movne	r7, #1
   161a0:	rsb	r7, r7, #0
   161a4:	b	15d58 <__assert_fail@plt+0x3cd4>
   161a8:	add	r3, sp, #296	; 0x128
   161ac:	mov	r0, r3
   161b0:	mov	r2, #156	; 0x9c
   161b4:	ldr	r1, [pc, #1700]	; 16860 <__assert_fail@plt+0x47dc>
   161b8:	bl	11bec <memcpy@plt>
   161bc:	mov	r2, #156	; 0x9c
   161c0:	mov	r1, r0
   161c4:	add	r0, sp, #140	; 0x8c
   161c8:	bl	11bec <memcpy@plt>
   161cc:	ldrb	r3, [r9, #1064]	; 0x428
   161d0:	cmp	r3, #0
   161d4:	beq	16588 <__assert_fail@plt+0x4504>
   161d8:	add	r3, r8, r4
   161dc:	mov	r0, fp
   161e0:	add	r3, r3, r3, lsl #1
   161e4:	add	r3, r3, #2
   161e8:	str	r3, [sp, #48]	; 0x30
   161ec:	add	r3, sp, #4416	; 0x1140
   161f0:	add	r3, r3, #36	; 0x24
   161f4:	str	r3, [sp, #8]
   161f8:	add	r3, r6, r8
   161fc:	str	r3, [sp, #20]
   16200:	add	r3, fp, r4
   16204:	str	r3, [sp, #32]
   16208:	mov	r3, #4000	; 0xfa0
   1620c:	add	r2, sp, #200	; 0xc8
   16210:	str	fp, [sp, #60]	; 0x3c
   16214:	str	r6, [sp, #68]	; 0x44
   16218:	str	r4, [sp, #76]	; 0x4c
   1621c:	mov	r7, r5
   16220:	mov	r4, r6
   16224:	mov	fp, r3
   16228:	mov	r6, r0
   1622c:	str	r2, [sp, #56]	; 0x38
   16230:	add	r2, sp, #140	; 0x8c
   16234:	str	r5, [sp, #36]	; 0x24
   16238:	str	r2, [sp, #52]	; 0x34
   1623c:	str	sl, [sp, #64]	; 0x40
   16240:	str	r8, [sp, #72]	; 0x48
   16244:	ldr	r3, [sp, #48]	; 0x30
   16248:	cmp	r3, fp
   1624c:	bhi	1632c <__assert_fail@plt+0x42a8>
   16250:	ldr	r3, [sp, #20]
   16254:	cmp	r3, r4
   16258:	bhi	1637c <__assert_fail@plt+0x42f8>
   1625c:	ldr	r3, [sp, #32]
   16260:	cmp	r3, r6
   16264:	bhi	16544 <__assert_fail@plt+0x44c0>
   16268:	mov	r8, #0
   1626c:	mov	r5, r8
   16270:	ldr	r3, [sp, #20]
   16274:	cmp	r3, r4
   16278:	ldr	r3, [sp, #8]
   1627c:	add	r3, r3, r5
   16280:	str	r3, [sp, #40]	; 0x28
   16284:	bls	164fc <__assert_fail@plt+0x4478>
   16288:	mov	r0, r4
   1628c:	bl	11e80 <strlen@plt>
   16290:	ldr	r3, [sp, #32]
   16294:	cmp	r3, r6
   16298:	add	r0, r0, #1
   1629c:	add	r4, r4, r0
   162a0:	bhi	164e8 <__assert_fail@plt+0x4464>
   162a4:	ldr	r3, [sp, #20]
   162a8:	ldr	r2, [sp, #32]
   162ac:	cmp	r3, r4
   162b0:	cmpls	r2, r6
   162b4:	bls	16508 <__assert_fail@plt+0x4484>
   162b8:	ldr	r2, [sp, #52]	; 0x34
   162bc:	mov	r1, r5
   162c0:	ldr	r0, [sp, #8]
   162c4:	bl	1a69c <__assert_fail@plt+0x8618>
   162c8:	ldr	r3, [sp, #56]	; 0x38
   162cc:	ldr	sl, [sp, #40]	; 0x28
   162d0:	add	r2, r3, #96	; 0x60
   162d4:	mov	r1, r8
   162d8:	mov	r0, sl
   162dc:	bl	1a69c <__assert_fail@plt+0x8618>
   162e0:	cmp	r7, #0
   162e4:	bne	16244 <__assert_fail@plt+0x41c0>
   162e8:	cmp	r8, r5
   162ec:	movcc	r2, r8
   162f0:	movcs	r2, r5
   162f4:	mov	r1, sl
   162f8:	ldr	r0, [sp, #8]
   162fc:	bl	11c64 <memcmp@plt>
   16300:	subs	r7, r0, #0
   16304:	bne	16244 <__assert_fail@plt+0x41c0>
   16308:	cmp	r8, r5
   1630c:	ldr	r3, [sp, #48]	; 0x30
   16310:	movls	r7, #0
   16314:	movhi	r7, #1
   16318:	cmp	r8, r5
   1631c:	rsbcs	r7, r7, #0
   16320:	rsbcc	r7, r7, #1
   16324:	cmp	r3, fp
   16328:	bls	16250 <__assert_fail@plt+0x41cc>
   1632c:	add	r3, fp, fp, lsl #1
   16330:	ldr	r2, [sp, #48]	; 0x30
   16334:	lsr	r3, r3, #1
   16338:	cmp	r2, r3
   1633c:	movcs	fp, r2
   16340:	movcc	fp, r3
   16344:	ldr	r0, [sp, #36]	; 0x24
   16348:	bl	11bb0 <free@plt>
   1634c:	mov	r0, fp
   16350:	bl	11dfc <malloc@plt>
   16354:	subs	r3, r0, #0
   16358:	str	r3, [sp, #36]	; 0x24
   1635c:	addeq	r3, sp, #4416	; 0x1140
   16360:	ldrne	r3, [sp, #36]	; 0x24
   16364:	addeq	r3, r3, #36	; 0x24
   16368:	str	r3, [sp, #8]
   1636c:	ldr	r3, [sp, #20]
   16370:	moveq	fp, #4000	; 0xfa0
   16374:	cmp	r3, r4
   16378:	bls	1625c <__assert_fail@plt+0x41d8>
   1637c:	mov	r2, fp
   16380:	mov	r1, r4
   16384:	ldr	r0, [sp, #8]
   16388:	bl	153b0 <__assert_fail@plt+0x332c>
   1638c:	ldr	r3, [sp, #32]
   16390:	cmp	r3, r6
   16394:	add	r5, r0, #1
   16398:	bls	16794 <__assert_fail@plt+0x4710>
   1639c:	cmp	fp, r5
   163a0:	subcs	r2, fp, r5
   163a4:	ldrcs	r3, [sp, #8]
   163a8:	addcs	r0, r3, r5
   163ac:	movcc	r0, #0
   163b0:	movcc	r2, r0
   163b4:	mov	r1, r6
   163b8:	bl	153b0 <__assert_fail@plt+0x332c>
   163bc:	add	r8, r0, #1
   163c0:	add	sl, r8, r5
   163c4:	cmp	fp, r5
   163c8:	bcs	16788 <__assert_fail@plt+0x4704>
   163cc:	ldr	r3, [pc, #1168]	; 16864 <__assert_fail@plt+0x47e0>
   163d0:	ldr	r0, [sp, #36]	; 0x24
   163d4:	cmp	sl, r3
   163d8:	addls	sl, sl, sl, lsl #1
   163dc:	lsrls	sl, sl, #1
   163e0:	bl	11bb0 <free@plt>
   163e4:	mov	r0, sl
   163e8:	bl	20424 <__assert_fail@plt+0xe3a0>
   163ec:	ldr	r3, [sp, #20]
   163f0:	cmp	r3, r4
   163f4:	str	r0, [sp, #8]
   163f8:	bls	16408 <__assert_fail@plt+0x4384>
   163fc:	mov	r2, r5
   16400:	mov	r1, r4
   16404:	bl	11e98 <strxfrm@plt>
   16408:	ldr	r3, [sp, #32]
   1640c:	cmp	r3, r6
   16410:	ldr	r3, [sp, #8]
   16414:	add	r3, r3, r5
   16418:	str	r3, [sp, #40]	; 0x28
   1641c:	bhi	164c0 <__assert_fail@plt+0x443c>
   16420:	ldr	r3, [sp, #20]
   16424:	cmp	r3, r4
   16428:	bhi	16524 <__assert_fail@plt+0x44a0>
   1642c:	str	r8, [sp, #20]
   16430:	ldr	fp, [sp, #60]	; 0x3c
   16434:	ldr	sl, [sp, #64]	; 0x40
   16438:	ldr	r6, [sp, #68]	; 0x44
   1643c:	ldr	r8, [sp, #72]	; 0x48
   16440:	ldr	r4, [sp, #76]	; 0x4c
   16444:	ldr	r3, [sp, #8]
   16448:	str	r3, [sp, #36]	; 0x24
   1644c:	ldr	r3, [sp, #56]	; 0x38
   16450:	ldr	r2, [sp, #52]	; 0x34
   16454:	add	r3, r3, #96	; 0x60
   16458:	mov	r1, r5
   1645c:	ldr	r0, [sp, #8]
   16460:	str	r3, [sp, #32]
   16464:	bl	1a69c <__assert_fail@plt+0x8618>
   16468:	add	r2, sp, #124	; 0x7c
   1646c:	add	r1, sp, #108	; 0x6c
   16470:	ldr	r0, [sp, #52]	; 0x34
   16474:	str	r2, [sp, #48]	; 0x30
   16478:	bl	1a5fc <__assert_fail@plt+0x8578>
   1647c:	ldr	r2, [sp, #32]
   16480:	ldr	r1, [sp, #20]
   16484:	ldr	r0, [sp, #40]	; 0x28
   16488:	bl	1a69c <__assert_fail@plt+0x8618>
   1648c:	ldr	r1, [sp, #48]	; 0x30
   16490:	ldr	r0, [sp, #32]
   16494:	bl	1a5fc <__assert_fail@plt+0x8578>
   16498:	ldr	r1, [sp, #48]	; 0x30
   1649c:	add	r0, sp, #108	; 0x6c
   164a0:	mov	r2, #16
   164a4:	bl	11c64 <memcmp@plt>
   164a8:	cmp	r0, #0
   164ac:	movne	r7, r0
   164b0:	beq	1670c <__assert_fail@plt+0x4688>
   164b4:	ldr	r0, [sp, #36]	; 0x24
   164b8:	bl	11bb0 <free@plt>
   164bc:	b	15d58 <__assert_fail@plt+0x3cd4>
   164c0:	mov	r0, r3
   164c4:	mov	r2, r8
   164c8:	mov	r1, r6
   164cc:	bl	11e98 <strxfrm@plt>
   164d0:	ldr	r3, [sp, #20]
   164d4:	cmp	r3, r4
   164d8:	bhi	16648 <__assert_fail@plt+0x45c4>
   164dc:	ldr	r3, [sp, #8]
   164e0:	mov	fp, sl
   164e4:	str	r3, [sp, #36]	; 0x24
   164e8:	mov	r0, r6
   164ec:	bl	11e80 <strlen@plt>
   164f0:	add	r0, r0, #1
   164f4:	add	r6, r6, r0
   164f8:	b	162a4 <__assert_fail@plt+0x4220>
   164fc:	ldr	r3, [sp, #32]
   16500:	cmp	r3, r6
   16504:	bhi	164e8 <__assert_fail@plt+0x4464>
   16508:	str	r8, [sp, #20]
   1650c:	ldr	fp, [sp, #60]	; 0x3c
   16510:	ldr	sl, [sp, #64]	; 0x40
   16514:	ldr	r6, [sp, #68]	; 0x44
   16518:	ldr	r8, [sp, #72]	; 0x48
   1651c:	ldr	r4, [sp, #76]	; 0x4c
   16520:	b	1644c <__assert_fail@plt+0x43c8>
   16524:	mov	r0, r4
   16528:	bl	11e80 <strlen@plt>
   1652c:	ldr	r3, [sp, #8]
   16530:	mov	fp, sl
   16534:	str	r3, [sp, #36]	; 0x24
   16538:	add	r0, r0, #1
   1653c:	add	r4, r4, r0
   16540:	b	162a4 <__assert_fail@plt+0x4220>
   16544:	mov	r2, fp
   16548:	ldr	r0, [sp, #8]
   1654c:	mov	r5, #0
   16550:	b	163b4 <__assert_fail@plt+0x4330>
   16554:	ldr	r7, [sp, #84]	; 0x54
   16558:	subs	r7, r7, fp
   1655c:	mvnne	r7, #0
   16560:	b	15d58 <__assert_fail@plt+0x3cd4>
   16564:	cmp	r4, #0
   16568:	beq	16090 <__assert_fail@plt+0x400c>
   1656c:	add	r3, r4, #1
   16570:	mov	r2, fp
   16574:	add	r1, r8, #1
   16578:	mov	r0, r6
   1657c:	bl	207d4 <__assert_fail@plt+0xe750>
   16580:	mov	r7, r0
   16584:	b	15d58 <__assert_fail@plt+0x3cd4>
   16588:	add	r5, sp, #140	; 0x8c
   1658c:	mov	r2, r5
   16590:	mov	r1, r8
   16594:	mov	r0, r6
   16598:	str	r3, [sp, #8]
   1659c:	add	r7, sp, #296	; 0x128
   165a0:	bl	1a69c <__assert_fail@plt+0x8618>
   165a4:	mov	r0, r5
   165a8:	add	r1, sp, #108	; 0x6c
   165ac:	bl	1a5fc <__assert_fail@plt+0x8578>
   165b0:	add	r5, sp, #124	; 0x7c
   165b4:	mov	r2, r7
   165b8:	mov	r1, r4
   165bc:	mov	r0, fp
   165c0:	bl	1a69c <__assert_fail@plt+0x8618>
   165c4:	mov	r0, r7
   165c8:	mov	r1, r5
   165cc:	bl	1a5fc <__assert_fail@plt+0x8578>
   165d0:	mov	r1, r5
   165d4:	add	r0, sp, #108	; 0x6c
   165d8:	mov	r2, #16
   165dc:	bl	11c64 <memcmp@plt>
   165e0:	subs	r7, r0, #0
   165e4:	bne	166f8 <__assert_fail@plt+0x4674>
   165e8:	mov	r5, r8
   165ec:	str	r7, [sp, #36]	; 0x24
   165f0:	str	r4, [sp, #20]
   165f4:	str	fp, [sp, #40]	; 0x28
   165f8:	str	r6, [sp, #8]
   165fc:	ldr	r3, [sp, #20]
   16600:	ldr	r1, [sp, #40]	; 0x28
   16604:	cmp	r5, r3
   16608:	movcc	r2, r5
   1660c:	movcs	r2, r3
   16610:	ldr	r0, [sp, #8]
   16614:	bl	11c64 <memcmp@plt>
   16618:	subs	r7, r0, #0
   1661c:	bne	164b4 <__assert_fail@plt+0x4430>
   16620:	ldr	r3, [sp, #20]
   16624:	ldr	r0, [sp, #36]	; 0x24
   16628:	cmp	r5, r3
   1662c:	movcs	r7, #0
   16630:	movcc	r7, #1
   16634:	cmp	r5, r3
   16638:	rsbls	r7, r7, #0
   1663c:	rsbhi	r7, r7, #1
   16640:	bl	11bb0 <free@plt>
   16644:	b	15d58 <__assert_fail@plt+0x3cd4>
   16648:	mov	r0, r4
   1664c:	bl	11e80 <strlen@plt>
   16650:	ldr	r3, [sp, #8]
   16654:	mov	fp, sl
   16658:	str	r3, [sp, #36]	; 0x24
   1665c:	add	r0, r0, #1
   16660:	add	r4, r4, r0
   16664:	mov	r0, r6
   16668:	bl	11e80 <strlen@plt>
   1666c:	add	r0, r0, #1
   16670:	add	r6, r6, r0
   16674:	b	162a4 <__assert_fail@plt+0x4220>
   16678:	cmp	r3, fp
   1667c:	cmphi	r0, r6
   16680:	bls	15c74 <__assert_fail@plt+0x3bf0>
   16684:	ldrb	r2, [r6]
   16688:	ldrb	r1, [fp]
   1668c:	subs	r2, r2, r1
   16690:	bne	16834 <__assert_fail@plt+0x47b0>
   16694:	add	fp, fp, #1
   16698:	add	r6, r6, #1
   1669c:	cmp	r6, r0
   166a0:	bcs	166b4 <__assert_fail@plt+0x4630>
   166a4:	ldrb	r2, [r6]
   166a8:	ldrb	r2, [r5, r2]
   166ac:	cmp	r2, #0
   166b0:	bne	16698 <__assert_fail@plt+0x4614>
   166b4:	cmp	fp, r3
   166b8:	bcs	15c74 <__assert_fail@plt+0x3bf0>
   166bc:	ldrb	r2, [fp]
   166c0:	ldrb	r2, [r5, r2]
   166c4:	cmp	r2, #0
   166c8:	addne	r2, fp, #1
   166cc:	bne	166e8 <__assert_fail@plt+0x4664>
   166d0:	b	16678 <__assert_fail@plt+0x45f4>
   166d4:	ldrb	r1, [r2]
   166d8:	add	r2, r2, #1
   166dc:	ldrb	r1, [r5, r1]
   166e0:	cmp	r1, #0
   166e4:	beq	16678 <__assert_fail@plt+0x45f4>
   166e8:	cmp	r3, r2
   166ec:	mov	fp, r2
   166f0:	bne	166d4 <__assert_fail@plt+0x4650>
   166f4:	b	15c74 <__assert_fail@plt+0x3bf0>
   166f8:	ldr	r3, [sp, #8]
   166fc:	str	r3, [sp, #36]	; 0x24
   16700:	ldr	r0, [sp, #36]	; 0x24
   16704:	bl	11bb0 <free@plt>
   16708:	b	15d58 <__assert_fail@plt+0x3cd4>
   1670c:	cmp	r7, #0
   16710:	beq	165fc <__assert_fail@plt+0x4578>
   16714:	ldr	r0, [sp, #36]	; 0x24
   16718:	bl	11bb0 <free@plt>
   1671c:	b	15d58 <__assert_fail@plt+0x3cd4>
   16720:	mov	r1, r7
   16724:	mov	r0, r6
   16728:	bl	11c40 <strtold@plt>
   1672c:	mov	r1, r7
   16730:	mov	r0, fp
   16734:	vstr	d0, [sp, #88]	; 0x58
   16738:	bl	11c40 <strtold@plt>
   1673c:	add	r0, sp, #88	; 0x58
   16740:	add	r1, sp, #96	; 0x60
   16744:	mov	r2, #8
   16748:	vstr	d0, [sp, #96]	; 0x60
   1674c:	bl	11c64 <memcmp@plt>
   16750:	mov	r7, r0
   16754:	b	15d58 <__assert_fail@plt+0x3cd4>
   16758:	cmp	r3, fp
   1675c:	cmphi	r0, r6
   16760:	bls	15c74 <__assert_fail@plt+0x3bf0>
   16764:	ldrb	r1, [r6]
   16768:	ldrb	ip, [fp]
   1676c:	ldrb	r1, [r2, r1]
   16770:	ldrb	ip, [r2, ip]
   16774:	subs	r1, r1, ip
   16778:	bne	15c98 <__assert_fail@plt+0x3c14>
   1677c:	add	fp, fp, #1
   16780:	add	r6, r6, #1
   16784:	b	15c1c <__assert_fail@plt+0x3b98>
   16788:	cmp	fp, sl
   1678c:	bcc	163cc <__assert_fail@plt+0x4348>
   16790:	b	16270 <__assert_fail@plt+0x41ec>
   16794:	mov	sl, r5
   16798:	mov	r8, #0
   1679c:	b	163c4 <__assert_fail@plt+0x4340>
   167a0:	mov	r1, r7
   167a4:	b	15ca8 <__assert_fail@plt+0x3c24>
   167a8:	cmp	r8, #0
   167ac:	bne	167c0 <__assert_fail@plt+0x473c>
   167b0:	adds	r4, r4, #0
   167b4:	movne	r4, #1
   167b8:	rsb	r7, r4, #0
   167bc:	b	15d74 <__assert_fail@plt+0x3cf0>
   167c0:	cmp	r4, #0
   167c4:	beq	16848 <__assert_fail@plt+0x47c4>
   167c8:	cmp	r2, #0
   167cc:	bne	1681c <__assert_fail@plt+0x4798>
   167d0:	cmp	r8, r4
   167d4:	movcc	r2, r8
   167d8:	movcs	r2, r4
   167dc:	mov	r1, fp
   167e0:	mov	r0, r6
   167e4:	bl	11c64 <memcmp@plt>
   167e8:	subs	r7, r0, #0
   167ec:	bne	15c94 <__assert_fail@plt+0x3c10>
   167f0:	cmp	r8, r4
   167f4:	bcc	1683c <__assert_fail@plt+0x47b8>
   167f8:	movne	r7, #1
   167fc:	moveq	r7, #0
   16800:	b	15d74 <__assert_fail@plt+0x3cf0>
   16804:	ldrb	r1, [r6], #1
   16808:	ldrb	ip, [fp], #1
   1680c:	ldrb	r1, [r2, r1]
   16810:	ldrb	r7, [r2, ip]
   16814:	subs	r7, r1, r7
   16818:	bne	15c94 <__assert_fail@plt+0x3c10>
   1681c:	cmp	r6, r0
   16820:	cmpcc	fp, r3
   16824:	bcc	16804 <__assert_fail@plt+0x4780>
   16828:	b	167f0 <__assert_fail@plt+0x476c>
   1682c:	mvn	r7, #0
   16830:	b	15d58 <__assert_fail@plt+0x3cd4>
   16834:	mov	r1, r2
   16838:	b	15c98 <__assert_fail@plt+0x3c14>
   1683c:	mvn	r3, #0
   16840:	mov	r1, r3
   16844:	b	15c98 <__assert_fail@plt+0x3c14>
   16848:	mov	r3, #1
   1684c:	mov	r1, r3
   16850:	b	15c98 <__assert_fail@plt+0x3c14>
   16854:	bl	11c7c <__stack_chk_fail@plt>
   16858:	andeq	r6, r3, r8, ror #5
   1685c:	andeq	r5, r3, r0, lsl #30
   16860:	andeq	r6, r3, r4, lsl r7
   16864:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   16868:	ldr	r2, [r0, #40]	; 0x28
   1686c:	ldr	r3, [r1, #40]	; 0x28
   16870:	cmp	r2, r3
   16874:	beq	16884 <__assert_fail@plt+0x4800>
   16878:	movcc	r0, #1
   1687c:	movcs	r0, #0
   16880:	bx	lr
   16884:	ldr	r3, [r0, #20]
   16888:	ldr	ip, [r0, #24]
   1688c:	ldr	r2, [r1, #20]
   16890:	ldr	r0, [r1, #24]
   16894:	add	r3, r3, ip
   16898:	add	r0, r2, r0
   1689c:	cmp	r3, r0
   168a0:	movcs	r0, #0
   168a4:	movcc	r0, #1
   168a8:	bx	lr
   168ac:	add	r1, r0, #4
   168b0:	mov	r2, #0
   168b4:	mov	r0, #2
   168b8:	b	11d84 <pthread_sigmask@plt>
   168bc:	push	{r4, r5, r6, lr}
   168c0:	sub	sp, sp, #136	; 0x88
   168c4:	ldr	r6, [pc, #148]	; 16960 <__assert_fail@plt+0x48dc>
   168c8:	ldr	r5, [pc, #148]	; 16964 <__assert_fail@plt+0x48e0>
   168cc:	ldr	r3, [r6]
   168d0:	str	r3, [sp, #132]	; 0x84
   168d4:	ldr	r3, [r5, #1032]	; 0x408
   168d8:	cmp	r3, #0
   168dc:	beq	16934 <__assert_fail@plt+0x48b0>
   168e0:	add	r1, r5, #1216	; 0x4c0
   168e4:	add	r1, r1, #8
   168e8:	add	r2, sp, #4
   168ec:	mov	r0, #0
   168f0:	bl	11d84 <pthread_sigmask@plt>
   168f4:	ldr	r4, [r5, #1032]	; 0x408
   168f8:	cmp	r4, #0
   168fc:	clz	r0, r0
   16900:	lsr	r0, r0, #5
   16904:	strb	r0, [sp]
   16908:	beq	16924 <__assert_fail@plt+0x48a0>
   1690c:	add	r0, r4, #9
   16910:	bl	11ca0 <unlink@plt>
   16914:	ldr	r4, [r4]
   16918:	cmp	r4, #0
   1691c:	bne	1690c <__assert_fail@plt+0x4888>
   16920:	ldrb	r0, [sp]
   16924:	mov	r3, #0
   16928:	cmp	r0, #0
   1692c:	str	r3, [r5, #1032]	; 0x408
   16930:	bne	16950 <__assert_fail@plt+0x48cc>
   16934:	bl	19a48 <__assert_fail@plt+0x79c4>
   16938:	ldr	r2, [sp, #132]	; 0x84
   1693c:	ldr	r3, [r6]
   16940:	cmp	r2, r3
   16944:	bne	1695c <__assert_fail@plt+0x48d8>
   16948:	add	sp, sp, #136	; 0x88
   1694c:	pop	{r4, r5, r6, pc}
   16950:	mov	r0, sp
   16954:	bl	168ac <__assert_fail@plt+0x4828>
   16958:	b	16934 <__assert_fail@plt+0x48b0>
   1695c:	bl	11c7c <__stack_chk_fail@plt>
   16960:	andeq	r5, r3, r0, lsl #30
   16964:	andeq	r6, r3, r8, ror #5
   16968:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1696c:	sub	sp, sp, #136	; 0x88
   16970:	ldr	r8, [pc, #312]	; 16ab0 <__assert_fail@plt+0x4a2c>
   16974:	ldr	r5, [pc, #312]	; 16ab4 <__assert_fail@plt+0x4a30>
   16978:	mov	r7, r0
   1697c:	ldr	r3, [r8]
   16980:	str	r3, [sp, #132]	; 0x84
   16984:	ldr	r4, [r5, #1032]	; 0x408
   16988:	add	r3, r4, #9
   1698c:	cmp	r0, r3
   16990:	beq	16a44 <__assert_fail@plt+0x49c0>
   16994:	ldr	r3, [r4]
   16998:	add	r2, r3, #9
   1699c:	cmp	r2, r7
   169a0:	beq	169b8 <__assert_fail@plt+0x4934>
   169a4:	mov	r4, r3
   169a8:	ldr	r3, [r4]
   169ac:	add	r2, r3, #9
   169b0:	cmp	r2, r7
   169b4:	bne	169a4 <__assert_fail@plt+0x4920>
   169b8:	mov	r5, r4
   169bc:	mov	r4, r3
   169c0:	ldrb	r3, [r4, #8]
   169c4:	cmp	r3, #1
   169c8:	beq	16a58 <__assert_fail@plt+0x49d4>
   169cc:	add	r2, sp, #4
   169d0:	ldr	r1, [pc, #224]	; 16ab8 <__assert_fail@plt+0x4a34>
   169d4:	mov	r0, #0
   169d8:	ldr	r6, [r4]
   169dc:	bl	11d84 <pthread_sigmask@plt>
   169e0:	clz	r3, r0
   169e4:	mov	r0, r7
   169e8:	lsr	r3, r3, #5
   169ec:	strb	r3, [sp]
   169f0:	bl	11ca0 <unlink@plt>
   169f4:	mov	r9, r0
   169f8:	bl	11ea4 <__errno_location@plt>
   169fc:	ldrb	r3, [sp]
   16a00:	cmp	r3, #0
   16a04:	ldr	sl, [r0]
   16a08:	str	r6, [r5]
   16a0c:	bne	16aa0 <__assert_fail@plt+0x4a1c>
   16a10:	cmp	r9, #0
   16a14:	bne	16a64 <__assert_fail@plt+0x49e0>
   16a18:	cmp	r6, #0
   16a1c:	mov	r0, r4
   16a20:	ldreq	r3, [pc, #148]	; 16abc <__assert_fail@plt+0x4a38>
   16a24:	streq	r5, [r3, #100]	; 0x64
   16a28:	bl	11bb0 <free@plt>
   16a2c:	ldr	r2, [sp, #132]	; 0x84
   16a30:	ldr	r3, [r8]
   16a34:	cmp	r2, r3
   16a38:	bne	16aac <__assert_fail@plt+0x4a28>
   16a3c:	add	sp, sp, #136	; 0x88
   16a40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a44:	ldrb	r3, [r4, #8]
   16a48:	add	r5, r5, #1024	; 0x400
   16a4c:	add	r5, r5, #8
   16a50:	cmp	r3, #1
   16a54:	bne	169cc <__assert_fail@plt+0x4948>
   16a58:	ldr	r0, [r4, #4]
   16a5c:	bl	155a0 <__assert_fail@plt+0x351c>
   16a60:	b	169cc <__assert_fail@plt+0x4948>
   16a64:	mov	r2, #5
   16a68:	ldr	r1, [pc, #80]	; 16ac0 <__assert_fail@plt+0x4a3c>
   16a6c:	mov	r0, #0
   16a70:	bl	11c70 <dcgettext@plt>
   16a74:	mov	r2, r7
   16a78:	mov	r1, #3
   16a7c:	mov	r9, r0
   16a80:	mov	r0, #0
   16a84:	bl	1ebdc <__assert_fail@plt+0xcb58>
   16a88:	mov	r2, r9
   16a8c:	mov	r1, sl
   16a90:	mov	r3, r0
   16a94:	mov	r0, #0
   16a98:	bl	11db4 <error@plt>
   16a9c:	b	16a18 <__assert_fail@plt+0x4994>
   16aa0:	mov	r0, sp
   16aa4:	bl	168ac <__assert_fail@plt+0x4828>
   16aa8:	b	16a10 <__assert_fail@plt+0x498c>
   16aac:	bl	11c7c <__stack_chk_fail@plt>
   16ab0:	andeq	r5, r3, r0, lsl #30
   16ab4:	andeq	r6, r3, r8, ror #5
   16ab8:			; <UNDEFINED> instruction: 0x000367b0
   16abc:	andeq	r6, r3, ip, ror #3
   16ac0:	andeq	r3, r2, r8, lsl #2
   16ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac8:	vpush	{d8}
   16acc:	ldr	r3, [pc, #412]	; 16c70 <__assert_fail@plt+0x4bec>
   16ad0:	mov	r5, r1
   16ad4:	mov	r1, #524288	; 0x80000
   16ad8:	sub	sp, sp, #148	; 0x94
   16adc:	ldr	r3, [r3]
   16ae0:	str	r0, [sp, #4]
   16ae4:	str	r3, [sp, #140]	; 0x8c
   16ae8:	bl	1c91c <__assert_fail@plt+0xa898>
   16aec:	cmp	r0, #0
   16af0:	blt	16c5c <__assert_fail@plt+0x4bd8>
   16af4:	ldr	r3, [pc, #376]	; 16c74 <__assert_fail@plt+0x4bf0>
   16af8:	ldr	r4, [pc, #376]	; 16c78 <__assert_fail@plt+0x4bf4>
   16afc:	ldr	r3, [r3, #104]	; 0x68
   16b00:	ldr	r2, [r4, #1056]	; 0x420
   16b04:	add	r3, r3, #1
   16b08:	cmp	r3, r2
   16b0c:	bcc	16c34 <__assert_fail@plt+0x4bb0>
   16b10:	bl	11ea4 <__errno_location@plt>
   16b14:	sub	r5, r5, #1
   16b18:	vldr	d8, [pc, #328]	; 16c68 <__assert_fail@plt+0x4be4>
   16b1c:	ldr	sl, [pc, #344]	; 16c7c <__assert_fail@plt+0x4bf8>
   16b20:	mov	r9, #0
   16b24:	mov	r6, r0
   16b28:	b	16b7c <__assert_fail@plt+0x4af8>
   16b2c:	cmp	r2, #0
   16b30:	str	r8, [r4, #1032]	; 0x408
   16b34:	bne	16bbc <__assert_fail@plt+0x4b38>
   16b38:	cmp	r7, #0
   16b3c:	str	fp, [r6]
   16b40:	bge	16bc8 <__assert_fail@plt+0x4b44>
   16b44:	cmp	fp, #11
   16b48:	bne	16c00 <__assert_fail@plt+0x4b7c>
   16b4c:	vmov.f64	d0, d8
   16b50:	bl	20834 <__assert_fail@plt+0xe7b0>
   16b54:	vadd.f64	d8, d8, d8
   16b58:	ldr	r3, [r4, #1056]	; 0x420
   16b5c:	cmp	r3, #0
   16b60:	ble	16b74 <__assert_fail@plt+0x4af0>
   16b64:	mov	r0, #0
   16b68:	bl	15470 <__assert_fail@plt+0x33ec>
   16b6c:	cmp	r0, #0
   16b70:	bne	16b58 <__assert_fail@plt+0x4ad4>
   16b74:	subs	r5, r5, #1
   16b78:	bcc	16bfc <__assert_fail@plt+0x4b78>
   16b7c:	add	r2, sp, #12
   16b80:	mov	r1, sl
   16b84:	mov	r0, #0
   16b88:	bl	11d84 <pthread_sigmask@plt>
   16b8c:	ldr	r8, [r4, #1032]	; 0x408
   16b90:	str	r9, [r4, #1032]	; 0x408
   16b94:	clz	r0, r0
   16b98:	lsr	r0, r0, #5
   16b9c:	strb	r0, [sp, #8]
   16ba0:	bl	11f7c <fork@plt>
   16ba4:	ldr	fp, [r6]
   16ba8:	ldrb	r2, [sp, #8]
   16bac:	subs	r7, r0, #0
   16bb0:	bne	16b2c <__assert_fail@plt+0x4aa8>
   16bb4:	cmp	r2, #0
   16bb8:	beq	16c1c <__assert_fail@plt+0x4b98>
   16bbc:	add	r0, sp, #8
   16bc0:	bl	168ac <__assert_fail@plt+0x4828>
   16bc4:	b	16b38 <__assert_fail@plt+0x4ab4>
   16bc8:	beq	16c1c <__assert_fail@plt+0x4b98>
   16bcc:	ldr	r3, [r4, #1056]	; 0x420
   16bd0:	add	r3, r3, #1
   16bd4:	str	r3, [r4, #1056]	; 0x420
   16bd8:	ldr	r3, [pc, #144]	; 16c70 <__assert_fail@plt+0x4bec>
   16bdc:	ldr	r2, [sp, #140]	; 0x8c
   16be0:	mov	r0, r7
   16be4:	ldr	r3, [r3]
   16be8:	cmp	r2, r3
   16bec:	bne	16c64 <__assert_fail@plt+0x4be0>
   16bf0:	add	sp, sp, #148	; 0x94
   16bf4:	vpop	{d8}
   16bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bfc:	ldr	fp, [r6]
   16c00:	ldr	r4, [sp, #4]
   16c04:	ldr	r0, [r4]
   16c08:	bl	1206c <close@plt>
   16c0c:	ldr	r0, [r4, #4]
   16c10:	bl	1206c <close@plt>
   16c14:	str	fp, [r6]
   16c18:	b	16bd8 <__assert_fail@plt+0x4b54>
   16c1c:	mov	r0, #0
   16c20:	bl	1206c <close@plt>
   16c24:	mov	r0, #1
   16c28:	bl	1206c <close@plt>
   16c2c:	mov	r7, #0
   16c30:	b	16bd8 <__assert_fail@plt+0x4b54>
   16c34:	mvn	r0, #0
   16c38:	bl	15470 <__assert_fail@plt+0x33ec>
   16c3c:	ldr	r3, [r4, #1056]	; 0x420
   16c40:	cmp	r3, #0
   16c44:	ble	16b10 <__assert_fail@plt+0x4a8c>
   16c48:	mov	r0, #0
   16c4c:	bl	15470 <__assert_fail@plt+0x33ec>
   16c50:	cmp	r0, #0
   16c54:	beq	16b10 <__assert_fail@plt+0x4a8c>
   16c58:	b	16c3c <__assert_fail@plt+0x4bb8>
   16c5c:	mvn	r7, #0
   16c60:	b	16bd8 <__assert_fail@plt+0x4b54>
   16c64:	bl	11c7c <__stack_chk_fail@plt>
   16c68:	andeq	r0, r0, r0
   16c6c:	svccc	0x00d00000
   16c70:	andeq	r5, r3, r0, lsl #30
   16c74:	andeq	r6, r3, ip, ror #3
   16c78:	andeq	r6, r3, r8, ror #5
   16c7c:			; <UNDEFINED> instruction: 0x000367b0
   16c80:	push	{r4, r5, r6, r7, lr}
   16c84:	sub	sp, sp, #36	; 0x24
   16c88:	ldr	r5, [pc, #220]	; 16d6c <__assert_fail@plt+0x4ce8>
   16c8c:	ldr	r3, [pc, #220]	; 16d70 <__assert_fail@plt+0x4cec>
   16c90:	mov	r6, r1
   16c94:	ldr	ip, [r5]
   16c98:	mov	r4, r2
   16c9c:	str	r3, [sp]
   16ca0:	mov	r2, #10
   16ca4:	add	r3, sp, #16
   16ca8:	add	r1, sp, #12
   16cac:	str	ip, [sp, #28]
   16cb0:	mov	r7, r0
   16cb4:	bl	20f90 <__assert_fail@plt+0xef0c>
   16cb8:	cmp	r0, #4
   16cbc:	ldrls	pc, [pc, r0, lsl #2]
   16cc0:	b	16cf8 <__assert_fail@plt+0x4c74>
   16cc4:	ldrdeq	r6, [r1], -r8
   16cc8:	strdeq	r6, [r1], -r0
   16ccc:	ldrdeq	r6, [r1], -r8
   16cd0:	strdeq	r6, [r1], -r0
   16cd4:	andeq	r6, r1, r4, lsl sp
   16cd8:	ldrd	r2, [sp, #16]
   16cdc:	mov	r1, #0
   16ce0:	cmp	r3, r1
   16ce4:	cmpeq	r2, r2
   16ce8:	str	r2, [r6]
   16cec:	beq	16cf8 <__assert_fail@plt+0x4c74>
   16cf0:	mvn	r3, #0
   16cf4:	str	r3, [r6]
   16cf8:	ldr	r0, [sp, #12]
   16cfc:	ldr	r2, [sp, #28]
   16d00:	ldr	r3, [r5]
   16d04:	cmp	r2, r3
   16d08:	bne	16d68 <__assert_fail@plt+0x4ce4>
   16d0c:	add	sp, sp, #36	; 0x24
   16d10:	pop	{r4, r5, r6, r7, pc}
   16d14:	cmp	r4, #0
   16d18:	moveq	r0, r4
   16d1c:	beq	16cfc <__assert_fail@plt+0x4c78>
   16d20:	mov	r2, #5
   16d24:	ldr	r1, [pc, #72]	; 16d74 <__assert_fail@plt+0x4cf0>
   16d28:	mov	r0, #0
   16d2c:	bl	11c70 <dcgettext@plt>
   16d30:	mov	r1, r4
   16d34:	mov	r2, #5
   16d38:	mov	r5, r0
   16d3c:	mov	r0, #0
   16d40:	bl	11c70 <dcgettext@plt>
   16d44:	mov	r4, r0
   16d48:	mov	r0, r7
   16d4c:	bl	1eda8 <__assert_fail@plt+0xcd24>
   16d50:	mov	r3, r4
   16d54:	mov	r2, r5
   16d58:	mov	r1, #0
   16d5c:	str	r0, [sp]
   16d60:	mov	r0, #2
   16d64:	bl	11db4 <error@plt>
   16d68:	bl	11c7c <__stack_chk_fail@plt>
   16d6c:	andeq	r5, r3, r0, lsl #30
   16d70:	andeq	r3, r2, r8, lsr r8
   16d74:	andeq	r3, r2, r4, lsr #2
   16d78:	push	{r4, r5, r6, lr}
   16d7c:	mov	r5, r0
   16d80:	ldrb	r3, [r1]
   16d84:	cmp	r3, #114	; 0x72
   16d88:	beq	16dc4 <__assert_fail@plt+0x4d40>
   16d8c:	cmp	r3, #119	; 0x77
   16d90:	bne	16e68 <__assert_fail@plt+0x4de4>
   16d94:	cmp	r0, #0
   16d98:	beq	16db4 <__assert_fail@plt+0x4d30>
   16d9c:	mov	r2, #0
   16da0:	mov	r3, #0
   16da4:	mov	r0, #1
   16da8:	bl	11c4c <ftruncate64@plt>
   16dac:	cmp	r0, #0
   16db0:	bne	16e28 <__assert_fail@plt+0x4da4>
   16db4:	ldr	r3, [pc, #192]	; 16e7c <__assert_fail@plt+0x4df8>
   16db8:	ldr	r4, [r3]
   16dbc:	mov	r0, r4
   16dc0:	pop	{r4, r5, r6, pc}
   16dc4:	mov	r4, r1
   16dc8:	ldr	r1, [pc, #176]	; 16e80 <__assert_fail@plt+0x4dfc>
   16dcc:	bl	11b50 <strcmp@plt>
   16dd0:	cmp	r0, #0
   16dd4:	bne	16e00 <__assert_fail@plt+0x4d7c>
   16dd8:	ldr	r3, [pc, #164]	; 16e84 <__assert_fail@plt+0x4e00>
   16ddc:	ldr	r2, [pc, #164]	; 16e88 <__assert_fail@plt+0x4e04>
   16de0:	mov	r1, #1
   16de4:	ldr	r4, [r3]
   16de8:	strb	r1, [r2, #1352]	; 0x548
   16dec:	mov	r0, r4
   16df0:	mov	r1, #2
   16df4:	bl	1aa00 <__assert_fail@plt+0x897c>
   16df8:	mov	r0, r4
   16dfc:	pop	{r4, r5, r6, pc}
   16e00:	mov	r0, r5
   16e04:	mov	r1, #524288	; 0x80000
   16e08:	bl	11dc0 <open64@plt>
   16e0c:	cmp	r0, #0
   16e10:	movlt	r4, #0
   16e14:	blt	16dec <__assert_fail@plt+0x4d68>
   16e18:	mov	r1, r4
   16e1c:	bl	11b20 <fdopen@plt>
   16e20:	mov	r4, r0
   16e24:	b	16dec <__assert_fail@plt+0x4d68>
   16e28:	bl	11ea4 <__errno_location@plt>
   16e2c:	mov	r2, #5
   16e30:	ldr	r1, [pc, #84]	; 16e8c <__assert_fail@plt+0x4e08>
   16e34:	ldr	r4, [r0]
   16e38:	mov	r0, #0
   16e3c:	bl	11c70 <dcgettext@plt>
   16e40:	mov	r2, r5
   16e44:	mov	r1, #3
   16e48:	mov	r6, r0
   16e4c:	mov	r0, #0
   16e50:	bl	1ebdc <__assert_fail@plt+0xcb58>
   16e54:	mov	r2, r6
   16e58:	mov	r1, r4
   16e5c:	mov	r3, r0
   16e60:	mov	r0, #2
   16e64:	bl	11db4 <error@plt>
   16e68:	ldr	r3, [pc, #32]	; 16e90 <__assert_fail@plt+0x4e0c>
   16e6c:	mov	r2, #972	; 0x3cc
   16e70:	ldr	r1, [pc, #28]	; 16e94 <__assert_fail@plt+0x4e10>
   16e74:	ldr	r0, [pc, #28]	; 16e98 <__assert_fail@plt+0x4e14>
   16e78:	bl	12084 <__assert_fail@plt>
   16e7c:	ldrdeq	r6, [r3], -ip
   16e80:	andeq	r3, r2, r8, asr #2
   16e84:	ldrdeq	r6, [r3], -r8
   16e88:	andeq	r6, r3, r8, ror #5
   16e8c:	andeq	r3, r2, ip, asr #2
   16e90:	andeq	r2, r2, r0, asr #26
   16e94:	andeq	r3, r2, r4, ror #2
   16e98:	andeq	r3, r2, r0, ror r1
   16e9c:	push	{r4, lr}
   16ea0:	mov	r2, #5
   16ea4:	mov	r4, r0
   16ea8:	ldr	r1, [pc, #12]	; 16ebc <__assert_fail@plt+0x4e38>
   16eac:	mov	r0, #0
   16eb0:	bl	11c70 <dcgettext@plt>
   16eb4:	mov	r1, r4
   16eb8:	bl	1520c <__assert_fail@plt+0x3188>
   16ebc:	muleq	r2, ip, r1
   16ec0:	push	{r4, r5, r6, lr}
   16ec4:	mov	r5, r1
   16ec8:	mov	r4, r0
   16ecc:	bl	11f04 <fileno@plt>
   16ed0:	cmp	r0, #0
   16ed4:	beq	16f08 <__assert_fail@plt+0x4e84>
   16ed8:	cmp	r0, #1
   16edc:	beq	16f20 <__assert_fail@plt+0x4e9c>
   16ee0:	mov	r0, r4
   16ee4:	bl	21998 <__assert_fail@plt+0xf914>
   16ee8:	cmp	r0, #0
   16eec:	popeq	{r4, r5, r6, pc}
   16ef0:	ldr	r1, [pc, #80]	; 16f48 <__assert_fail@plt+0x4ec4>
   16ef4:	mov	r2, #5
   16ef8:	mov	r0, #0
   16efc:	bl	11c70 <dcgettext@plt>
   16f00:	mov	r1, r5
   16f04:	bl	1520c <__assert_fail@plt+0x3188>
   16f08:	ldr	r3, [r4]
   16f0c:	tst	r3, #16
   16f10:	popeq	{r4, r5, r6, pc}
   16f14:	mov	r0, r4
   16f18:	pop	{r4, r5, r6, lr}
   16f1c:	b	11fc4 <clearerr_unlocked@plt>
   16f20:	mov	r0, r4
   16f24:	bl	11cf4 <fflush_unlocked@plt>
   16f28:	cmp	r0, #0
   16f2c:	popeq	{r4, r5, r6, pc}
   16f30:	ldr	r1, [pc, #20]	; 16f4c <__assert_fail@plt+0x4ec8>
   16f34:	mov	r2, #5
   16f38:	mov	r0, #0
   16f3c:	bl	11c70 <dcgettext@plt>
   16f40:	mov	r1, r5
   16f44:	bl	1520c <__assert_fail@plt+0x3188>
   16f48:			; <UNDEFINED> instruction: 0x000231b8
   16f4c:	andeq	r3, r2, r8, lsr #3
   16f50:	ldr	r3, [pc, #1056]	; 17378 <__assert_fail@plt+0x52f4>
   16f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f58:	sub	sp, sp, #28
   16f5c:	ldm	r0, {r5, r8}
   16f60:	ldr	r3, [r3]
   16f64:	subs	r7, r2, #0
   16f68:	mov	r6, r1
   16f6c:	add	r4, r5, r8
   16f70:	str	r3, [sp, #20]
   16f74:	beq	16fc4 <__assert_fail@plt+0x4f40>
   16f78:	ldr	r2, [pc, #1020]	; 1737c <__assert_fail@plt+0x52f8>
   16f7c:	mov	r3, r6
   16f80:	mov	r0, r5
   16f84:	ldrb	ip, [r2, #108]	; 0x6c
   16f88:	mov	r1, #1
   16f8c:	mov	r2, r8
   16f90:	strb	ip, [r4, #-1]
   16f94:	bl	11c58 <fwrite_unlocked@plt>
   16f98:	cmp	r8, r0
   16f9c:	moveq	r3, #0
   16fa0:	strbeq	r3, [r4, #-1]
   16fa4:	bne	17360 <__assert_fail@plt+0x52dc>
   16fa8:	ldr	r3, [pc, #968]	; 17378 <__assert_fail@plt+0x52f4>
   16fac:	ldr	r2, [sp, #20]
   16fb0:	ldr	r3, [r3]
   16fb4:	cmp	r2, r3
   16fb8:	bne	1735c <__assert_fail@plt+0x52d8>
   16fbc:	add	sp, sp, #28
   16fc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fc4:	ldr	r3, [pc, #948]	; 17380 <__assert_fail@plt+0x52fc>
   16fc8:	ldrb	r3, [r3, #1353]	; 0x549
   16fcc:	cmp	r3, #0
   16fd0:	beq	16f78 <__assert_fail@plt+0x4ef4>
   16fd4:	cmp	r5, r4
   16fd8:	mov	r9, r0
   16fdc:	bcc	17014 <__assert_fail@plt+0x4f90>
   16fe0:	b	17064 <__assert_fail@plt+0x4fe0>
   16fe4:	cmp	r4, r5
   16fe8:	movne	r1, r3
   16fec:	beq	1702c <__assert_fail@plt+0x4fa8>
   16ff0:	ldr	r2, [r6, #20]
   16ff4:	ldr	r0, [r6, #24]
   16ff8:	cmp	r0, r2
   16ffc:	addhi	r1, r2, #1
   17000:	strhi	r1, [r6, #20]
   17004:	strbhi	r3, [r2]
   17008:	bls	17038 <__assert_fail@plt+0x4fb4>
   1700c:	cmp	r4, r5
   17010:	beq	17060 <__assert_fail@plt+0x4fdc>
   17014:	ldrb	r3, [r5], #1
   17018:	cmp	r3, #9
   1701c:	bne	16fe4 <__assert_fail@plt+0x4f60>
   17020:	mov	r1, #62	; 0x3e
   17024:	mov	r3, r1
   17028:	b	16ff0 <__assert_fail@plt+0x4f6c>
   1702c:	mov	r1, #10
   17030:	mov	r3, r1
   17034:	b	16ff0 <__assert_fail@plt+0x4f6c>
   17038:	mov	r0, r6
   1703c:	bl	11f58 <__overflow@plt>
   17040:	cmn	r0, #1
   17044:	bne	1700c <__assert_fail@plt+0x4f88>
   17048:	ldr	r1, [pc, #820]	; 17384 <__assert_fail@plt+0x5300>
   1704c:	mov	r2, #5
   17050:	mov	r0, #0
   17054:	bl	11c70 <dcgettext@plt>
   17058:	mov	r1, #0
   1705c:	bl	1520c <__assert_fail@plt+0x3188>
   17060:	ldm	r9, {r5, r8}
   17064:	ldr	r3, [pc, #788]	; 17380 <__assert_fail@plt+0x52fc>
   17068:	sub	r6, r8, #1
   1706c:	ldr	fp, [pc, #788]	; 17388 <__assert_fail@plt+0x5304>
   17070:	ldr	r4, [r3, #1060]	; 0x424
   17074:	add	r6, r5, r6
   17078:	cmp	r4, #0
   1707c:	beq	172a0 <__assert_fail@plt+0x521c>
   17080:	ldr	sl, [r4]
   17084:	ldr	r3, [r4, #8]
   17088:	cmn	sl, #1
   1708c:	beq	17320 <__assert_fail@plt+0x529c>
   17090:	mov	r2, r4
   17094:	mov	r1, r8
   17098:	mov	r0, r5
   1709c:	str	r3, [sp, #4]
   170a0:	bl	15838 <__assert_fail@plt+0x37b4>
   170a4:	ldr	r3, [sp, #4]
   170a8:	cmn	r3, #1
   170ac:	mov	r7, r0
   170b0:	beq	170e0 <__assert_fail@plt+0x505c>
   170b4:	mov	r1, r8
   170b8:	mov	r2, r4
   170bc:	mov	r0, r5
   170c0:	bl	159a0 <__assert_fail@plt+0x391c>
   170c4:	mov	r6, r0
   170c8:	ldrb	r3, [r4, #24]
   170cc:	cmn	sl, #1
   170d0:	movne	sl, #0
   170d4:	moveq	sl, #1
   170d8:	tst	sl, r3
   170dc:	bne	17108 <__assert_fail@plt+0x5084>
   170e0:	ldrb	r3, [r4, #30]
   170e4:	cmp	r3, #0
   170e8:	bne	17108 <__assert_fail@plt+0x5084>
   170ec:	ldrb	r3, [r4, #26]
   170f0:	cmp	r3, #0
   170f4:	bne	17108 <__assert_fail@plt+0x5084>
   170f8:	ldrh	r3, [r4, #28]
   170fc:	cmp	r3, #0
   17100:	moveq	r0, r5
   17104:	beq	171d4 <__assert_fail@plt+0x5150>
   17108:	mov	r3, #0
   1710c:	ldrb	r8, [r6]
   17110:	strb	r3, [r6]
   17114:	ldrb	r3, [r7]
   17118:	b	17120 <__assert_fail@plt+0x509c>
   1711c:	ldrb	r3, [r7, #1]!
   17120:	ldr	r2, [pc, #600]	; 17380 <__assert_fail@plt+0x52fc>
   17124:	add	r3, r2, r3
   17128:	ldrb	r3, [r3, #8]
   1712c:	cmp	r3, #0
   17130:	bne	1711c <__assert_fail@plt+0x5098>
   17134:	cmp	r7, r6
   17138:	str	r7, [sp, #12]
   1713c:	bhi	172e4 <__assert_fail@plt+0x5260>
   17140:	ldrb	r3, [r4, #30]
   17144:	cmp	r3, #0
   17148:	bne	17330 <__assert_fail@plt+0x52ac>
   1714c:	ldrb	r3, [r4, #28]
   17150:	cmp	r3, #0
   17154:	bne	1734c <__assert_fail@plt+0x52c8>
   17158:	ldrb	r3, [r4, #26]
   1715c:	cmp	r3, #0
   17160:	bne	17170 <__assert_fail@plt+0x50ec>
   17164:	ldrb	r3, [r4, #29]
   17168:	cmp	r3, #0
   1716c:	beq	172e4 <__assert_fail@plt+0x5260>
   17170:	cmp	r7, r6
   17174:	bcs	17188 <__assert_fail@plt+0x5104>
   17178:	ldrb	r3, [r7]
   1717c:	cmp	r3, #45	; 0x2d
   17180:	addeq	r3, r7, #1
   17184:	beq	1718c <__assert_fail@plt+0x5108>
   17188:	mov	r3, r7
   1718c:	add	r0, sp, #16
   17190:	str	r3, [sp, #16]
   17194:	bl	14c7c <__assert_fail@plt+0x2bf8>
   17198:	cmp	r0, #47	; 0x2f
   1719c:	bls	171c8 <__assert_fail@plt+0x5144>
   171a0:	ldrb	r2, [r4, #29]
   171a4:	ldr	r3, [sp, #16]
   171a8:	cmp	r2, #0
   171ac:	beq	171c4 <__assert_fail@plt+0x5140>
   171b0:	ldrb	r2, [r3]
   171b4:	ldr	r1, [pc, #464]	; 1738c <__assert_fail@plt+0x5308>
   171b8:	ldrb	r2, [r1, r2]
   171bc:	cmp	r2, #0
   171c0:	addne	r3, r3, #1
   171c4:	str	r3, [sp, #12]
   171c8:	strb	r8, [r6]
   171cc:	ldr	r6, [sp, #12]
   171d0:	mov	r0, r5
   171d4:	mov	r1, r7
   171d8:	bl	15378 <__assert_fail@plt+0x32f4>
   171dc:	mov	r1, r6
   171e0:	mov	r8, r0
   171e4:	mov	r0, r7
   171e8:	bl	15378 <__assert_fail@plt+0x32f4>
   171ec:	mov	r5, r0
   171f0:	b	17218 <__assert_fail@plt+0x5194>
   171f4:	ldr	r0, [fp]
   171f8:	ldr	r2, [r0, #24]
   171fc:	ldr	r3, [r0, #20]
   17200:	cmp	r3, r2
   17204:	addcc	r2, r3, #1
   17208:	strcc	r2, [r0, #20]
   1720c:	movcc	r2, #32
   17210:	strbcc	r2, [r3]
   17214:	bcs	172ac <__assert_fail@plt+0x5228>
   17218:	subs	r8, r8, #1
   1721c:	bcs	171f4 <__assert_fail@plt+0x5170>
   17220:	cmp	r5, #0
   17224:	movne	r6, #95	; 0x5f
   17228:	beq	172c4 <__assert_fail@plt+0x5240>
   1722c:	ldr	r0, [fp]
   17230:	ldr	r3, [r0, #20]
   17234:	ldr	r2, [r0, #24]
   17238:	cmp	r3, r2
   1723c:	addcc	r2, r3, #1
   17240:	strcc	r2, [r0, #20]
   17244:	strbcc	r6, [r3]
   17248:	bcs	172b8 <__assert_fail@plt+0x5234>
   1724c:	subs	r5, r5, #1
   17250:	bne	1722c <__assert_fail@plt+0x51a8>
   17254:	ldr	r0, [fp]
   17258:	ldr	r3, [r0, #20]
   1725c:	ldr	r2, [r0, #24]
   17260:	cmp	r3, r2
   17264:	addcc	r1, r3, #1
   17268:	movcc	r2, #10
   1726c:	strcc	r1, [r0, #20]
   17270:	strbcc	r2, [r3]
   17274:	bcs	17340 <__assert_fail@plt+0x52bc>
   17278:	cmp	r4, #0
   1727c:	beq	16fa8 <__assert_fail@plt+0x4f24>
   17280:	ldr	r4, [r4, #36]	; 0x24
   17284:	cmp	r4, #0
   17288:	beq	172ec <__assert_fail@plt+0x5268>
   1728c:	ldm	r9, {r5, r8}
   17290:	cmp	r4, #0
   17294:	sub	r6, r8, #1
   17298:	add	r6, r5, r6
   1729c:	bne	17080 <__assert_fail@plt+0x4ffc>
   172a0:	mov	r7, r5
   172a4:	mov	r0, r5
   172a8:	b	171d4 <__assert_fail@plt+0x5150>
   172ac:	mov	r1, #32
   172b0:	bl	11f58 <__overflow@plt>
   172b4:	b	17218 <__assert_fail@plt+0x5194>
   172b8:	mov	r1, #95	; 0x5f
   172bc:	bl	11f58 <__overflow@plt>
   172c0:	b	1724c <__assert_fail@plt+0x51c8>
   172c4:	mov	r0, r5
   172c8:	mov	r2, #5
   172cc:	ldr	r1, [pc, #188]	; 17390 <__assert_fail@plt+0x530c>
   172d0:	bl	11c70 <dcgettext@plt>
   172d4:	mov	r1, r0
   172d8:	mov	r0, #1
   172dc:	bl	11eec <__printf_chk@plt>
   172e0:	b	17278 <__assert_fail@plt+0x51f4>
   172e4:	str	r6, [sp, #12]
   172e8:	b	171c8 <__assert_fail@plt+0x5144>
   172ec:	ldr	r2, [pc, #140]	; 17380 <__assert_fail@plt+0x52fc>
   172f0:	ldrb	r3, [r2, #1354]	; 0x54a
   172f4:	cmp	r3, #0
   172f8:	bne	16fa8 <__assert_fail@plt+0x4f24>
   172fc:	ldrb	r3, [r2, #1355]	; 0x54b
   17300:	cmp	r3, #0
   17304:	bne	16fa8 <__assert_fail@plt+0x4f24>
   17308:	ldr	r6, [r9, #4]
   1730c:	ldr	r7, [r9]
   17310:	sub	r6, r6, #1
   17314:	add	r6, r7, r6
   17318:	mov	r0, r7
   1731c:	b	171d4 <__assert_fail@plt+0x5150>
   17320:	cmn	r3, #1
   17324:	mov	r7, r5
   17328:	bne	170b4 <__assert_fail@plt+0x5030>
   1732c:	b	170c8 <__assert_fail@plt+0x5044>
   17330:	add	r1, sp, #12
   17334:	mov	r0, r7
   17338:	bl	14db4 <__assert_fail@plt+0x2d30>
   1733c:	b	171c8 <__assert_fail@plt+0x5144>
   17340:	mov	r1, #10
   17344:	bl	11f58 <__overflow@plt>
   17348:	b	17278 <__assert_fail@plt+0x51f4>
   1734c:	add	r1, sp, #12
   17350:	mov	r0, r7
   17354:	bl	11c40 <strtold@plt>
   17358:	b	171c8 <__assert_fail@plt+0x5144>
   1735c:	bl	11c7c <__stack_chk_fail@plt>
   17360:	ldr	r1, [pc, #28]	; 17384 <__assert_fail@plt+0x5300>
   17364:	mov	r2, #5
   17368:	mov	r0, #0
   1736c:	bl	11c70 <dcgettext@plt>
   17370:	mov	r1, r7
   17374:	bl	1520c <__assert_fail@plt+0x3188>
   17378:	andeq	r5, r3, r0, lsl #30
   1737c:	andeq	r6, r3, ip, ror #3
   17380:	andeq	r6, r3, r8, ror #5
   17384:	andeq	r3, r2, r8, asr #3
   17388:	ldrdeq	r6, [r3], -ip
   1738c:	andeq	r2, r2, r0, asr #24
   17390:	ldrdeq	r3, [r2], -r8
   17394:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17398:	mov	r7, r0
   1739c:	ldr	r4, [pc, #196]	; 17468 <__assert_fail@plt+0x53e4>
   173a0:	mov	r6, r1
   173a4:	ldr	r3, [r4, #1060]	; 0x424
   173a8:	cmp	r3, #0
   173ac:	beq	173d4 <__assert_fail@plt+0x5350>
   173b0:	bl	15b4c <__assert_fail@plt+0x3ac8>
   173b4:	cmp	r0, #0
   173b8:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   173bc:	ldrb	r3, [r4, #1354]	; 0x54a
   173c0:	cmp	r3, #0
   173c4:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   173c8:	ldrb	r3, [r4, #1355]	; 0x54b
   173cc:	cmp	r3, #0
   173d0:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   173d4:	ldr	r5, [r7, #4]
   173d8:	ldr	r9, [r6, #4]
   173dc:	subs	sl, r5, #1
   173e0:	sub	r8, r9, #1
   173e4:	bne	17404 <__assert_fail@plt+0x5380>
   173e8:	adds	r0, r8, #0
   173ec:	movne	r0, #1
   173f0:	rsb	r0, r0, #0
   173f4:	ldrb	r3, [r4, #1356]	; 0x54c
   173f8:	cmp	r3, #0
   173fc:	rsbne	r0, r0, #0
   17400:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17404:	cmp	r8, #0
   17408:	moveq	r0, #1
   1740c:	beq	173f4 <__assert_fail@plt+0x5370>
   17410:	ldrb	r3, [r4, #1064]	; 0x428
   17414:	ldr	r0, [r7]
   17418:	ldr	r1, [r6]
   1741c:	cmp	r3, #0
   17420:	bne	17454 <__assert_fail@plt+0x53d0>
   17424:	cmp	sl, r8
   17428:	movcc	r2, sl
   1742c:	movcs	r2, r8
   17430:	bl	11c64 <memcmp@plt>
   17434:	cmp	r0, #0
   17438:	bne	173f4 <__assert_fail@plt+0x5370>
   1743c:	cmp	sl, r8
   17440:	mvncc	r0, #0
   17444:	bcc	173f4 <__assert_fail@plt+0x5370>
   17448:	subs	r0, r5, r9
   1744c:	movne	r0, #1
   17450:	b	173f4 <__assert_fail@plt+0x5370>
   17454:	mov	r2, r1
   17458:	mov	r3, r9
   1745c:	mov	r1, r5
   17460:	bl	207d4 <__assert_fail@plt+0xe750>
   17464:	b	173f4 <__assert_fail@plt+0x5370>
   17468:	andeq	r6, r3, r8, ror #5
   1746c:	cmp	r1, #2
   17470:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17474:	mov	r8, r0
   17478:	mov	r4, r2
   1747c:	mov	r7, r3
   17480:	beq	17594 <__assert_fail@plt+0x5510>
   17484:	lsr	r5, r1, #1
   17488:	cmp	r3, #0
   1748c:	lsl	r7, r5, #4
   17490:	rsb	r7, r7, #0
   17494:	mov	r6, r1
   17498:	add	sl, r0, r7
   1749c:	sub	r9, r1, r5
   174a0:	bne	17528 <__assert_fail@plt+0x54a4>
   174a4:	mov	r1, r9
   174a8:	mov	r0, sl
   174ac:	bl	1746c <__assert_fail@plt+0x53e8>
   174b0:	cmp	r6, #3
   174b4:	bhi	1760c <__assert_fail@plt+0x5588>
   174b8:	ldmdb	r8, {r0, r1, r2, r3}
   174bc:	mov	ip, r4
   174c0:	mov	r7, sl
   174c4:	stmdb	r4, {r0, r1, r2, r3}
   174c8:	mov	r4, r8
   174cc:	mov	r8, ip
   174d0:	sub	r7, r7, #16
   174d4:	sub	r6, r8, #16
   174d8:	b	174f4 <__assert_fail@plt+0x5470>
   174dc:	ldm	r7, {r0, r1, r2, r3}
   174e0:	subs	r9, r9, #1
   174e4:	sub	r7, r7, #16
   174e8:	stm	ip, {r0, r1, r2, r3}
   174ec:	beq	17560 <__assert_fail@plt+0x54dc>
   174f0:	mov	r4, ip
   174f4:	mov	r1, r7
   174f8:	mov	r0, r6
   174fc:	bl	17394 <__assert_fail@plt+0x5310>
   17500:	sub	ip, r4, #16
   17504:	cmp	r0, #0
   17508:	bgt	174dc <__assert_fail@plt+0x5458>
   1750c:	ldm	r6, {r0, r1, r2, r3}
   17510:	subs	r5, r5, #1
   17514:	mov	r8, r6
   17518:	sub	r6, r6, #16
   1751c:	stm	ip, {r0, r1, r2, r3}
   17520:	bne	174f0 <__assert_fail@plt+0x546c>
   17524:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17528:	add	r7, r2, r7
   1752c:	mov	r0, sl
   17530:	mov	r2, r7
   17534:	mov	r3, #1
   17538:	mov	r1, r9
   1753c:	bl	1746c <__assert_fail@plt+0x53e8>
   17540:	cmp	r6, #3
   17544:	bls	174d0 <__assert_fail@plt+0x544c>
   17548:	mov	r3, #0
   1754c:	mov	r2, r4
   17550:	mov	r1, r5
   17554:	mov	r0, r8
   17558:	bl	1746c <__assert_fail@plt+0x53e8>
   1755c:	b	174d0 <__assert_fail@plt+0x544c>
   17560:	rsb	r3, r5, r5, lsl #28
   17564:	lsl	r3, r3, #4
   17568:	sub	r3, r3, #16
   1756c:	add	r8, r8, r3
   17570:	add	ip, ip, r3
   17574:	lsl	lr, r5, #4
   17578:	add	r3, r8, lr
   1757c:	add	lr, ip, lr
   17580:	ldm	r3, {r0, r1, r2, r3}
   17584:	subs	r5, r5, #1
   17588:	stm	lr, {r0, r1, r2, r3}
   1758c:	bne	17574 <__assert_fail@plt+0x54f0>
   17590:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17594:	sub	r5, r0, #32
   17598:	sub	r6, r0, #16
   1759c:	mov	r1, r5
   175a0:	mov	r0, r6
   175a4:	bl	17394 <__assert_fail@plt+0x5310>
   175a8:	cmp	r7, #0
   175ac:	bne	175d8 <__assert_fail@plt+0x5554>
   175b0:	cmp	r0, #0
   175b4:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   175b8:	ldm	r6, {r0, r1, r2, r3}
   175bc:	sub	r4, r4, #16
   175c0:	stm	r4, {r0, r1, r2, r3}
   175c4:	ldm	r5, {r0, r1, r2, r3}
   175c8:	stm	r6, {r0, r1, r2, r3}
   175cc:	ldm	r4, {r0, r1, r2, r3}
   175d0:	stm	r5, {r0, r1, r2, r3}
   175d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   175d8:	cmp	r0, #0
   175dc:	movle	r0, #0
   175e0:	movgt	r0, #1
   175e4:	mvn	r3, r0
   175e8:	sub	r0, r0, #2
   175ec:	add	r3, r8, r3, lsl #4
   175f0:	add	r8, r8, r0, lsl #4
   175f4:	ldm	r3, {r0, r1, r2, r3}
   175f8:	sub	ip, r4, #32
   175fc:	stmdb	r4, {r0, r1, r2, r3}
   17600:	ldm	r8, {r0, r1, r2, r3}
   17604:	stm	ip, {r0, r1, r2, r3}
   17608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1760c:	mov	r3, #1
   17610:	mov	r2, r4
   17614:	mov	r0, r8
   17618:	mov	r1, r5
   1761c:	bl	1746c <__assert_fail@plt+0x53e8>
   17620:	mov	r3, r4
   17624:	mov	r7, sl
   17628:	mov	r4, r8
   1762c:	mov	r8, r3
   17630:	b	174d0 <__assert_fail@plt+0x544c>
   17634:	ldr	r3, [pc, #84]	; 17690 <__assert_fail@plt+0x560c>
   17638:	push	{r4, r5, r6, r7, r8, lr}
   1763c:	mov	r7, r2
   17640:	ldrb	r2, [r3, #1354]	; 0x54a
   17644:	mov	r6, r1
   17648:	mov	r5, r0
   1764c:	cmp	r2, #0
   17650:	beq	1767c <__assert_fail@plt+0x55f8>
   17654:	ldr	r2, [r3, #1360]	; 0x550
   17658:	add	r4, r3, #1360	; 0x550
   1765c:	cmp	r2, #0
   17660:	beq	17674 <__assert_fail@plt+0x55f0>
   17664:	mov	r1, r4
   17668:	bl	17394 <__assert_fail@plt+0x5310>
   1766c:	cmp	r0, #0
   17670:	popeq	{r4, r5, r6, r7, r8, pc}
   17674:	ldm	r5, {r0, r1, r2, r3}
   17678:	stm	r4, {r0, r1, r2, r3}
   1767c:	mov	r2, r7
   17680:	mov	r1, r6
   17684:	mov	r0, r5
   17688:	pop	{r4, r5, r6, r7, r8, lr}
   1768c:	b	16f50 <__assert_fail@plt+0x4ecc>
   17690:	andeq	r6, r3, r8, ror #5
   17694:	push	{r4, lr}
   17698:	mov	r4, r0
   1769c:	bl	11cac <dup2@plt>
   176a0:	mov	r0, r4
   176a4:	pop	{r4, lr}
   176a8:	b	1206c <close@plt>
   176ac:	lsrs	r3, r1, #30
   176b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b4:	movne	r4, #1
   176b8:	moveq	r4, #0
   176bc:	mov	r7, r1
   176c0:	lsls	r3, r1, #2
   176c4:	ldr	r1, [pc, #548]	; 178f0 <__assert_fail@plt+0x586c>
   176c8:	sub	sp, sp, #28
   176cc:	movmi	r4, #1
   176d0:	ldr	r1, [r1]
   176d4:	cmp	r4, #0
   176d8:	str	r1, [sp, #20]
   176dc:	bne	178b0 <__assert_fail@plt+0x582c>
   176e0:	mov	r5, r0
   176e4:	mov	r0, r3
   176e8:	mov	r6, r2
   176ec:	bl	20424 <__assert_fail@plt+0xe3a0>
   176f0:	cmp	r7, #0
   176f4:	mov	r8, r0
   176f8:	str	r0, [r6]
   176fc:	beq	1784c <__assert_fail@plt+0x57c8>
   17700:	ldr	r9, [pc, #492]	; 178f4 <__assert_fail@plt+0x5870>
   17704:	b	17734 <__assert_fail@plt+0x56b0>
   17708:	mov	r1, r9
   1770c:	ldr	r0, [r5]
   17710:	bl	16d78 <__assert_fail@plt+0x4cf4>
   17714:	cmp	r0, #0
   17718:	str	r0, [r8, r4, lsl #2]
   1771c:	beq	177a8 <__assert_fail@plt+0x5724>
   17720:	add	r4, r4, #1
   17724:	cmp	r4, r7
   17728:	add	r5, r5, #8
   1772c:	mov	r6, r4
   17730:	beq	177a8 <__assert_fail@plt+0x5724>
   17734:	ldr	fp, [r5, #4]
   17738:	mov	r6, r4
   1773c:	cmp	fp, #0
   17740:	beq	17708 <__assert_fail@plt+0x5684>
   17744:	ldrb	r2, [fp, #8]
   17748:	cmp	r2, #0
   1774c:	beq	17708 <__assert_fail@plt+0x5684>
   17750:	cmp	r2, #1
   17754:	beq	17818 <__assert_fail@plt+0x5794>
   17758:	mov	r1, #0
   1775c:	add	r0, fp, #9
   17760:	bl	11dc0 <open64@plt>
   17764:	subs	sl, r0, #0
   17768:	blt	1780c <__assert_fail@plt+0x5788>
   1776c:	mov	r1, #9
   17770:	add	r0, sp, #12
   17774:	bl	16ac4 <__assert_fail@plt+0x4a40>
   17778:	cmn	r0, #1
   1777c:	bne	177c8 <__assert_fail@plt+0x5744>
   17780:	bl	11ea4 <__errno_location@plt>
   17784:	ldr	r5, [r0]
   17788:	mov	r7, r0
   1778c:	cmp	r5, #24
   17790:	bne	178b8 <__assert_fail@plt+0x5834>
   17794:	mov	r0, sl
   17798:	bl	1206c <close@plt>
   1779c:	mov	r3, #0
   177a0:	str	r5, [r7]
   177a4:	str	r3, [r8, r4, lsl #2]
   177a8:	ldr	r3, [pc, #320]	; 178f0 <__assert_fail@plt+0x586c>
   177ac:	ldr	r2, [sp, #20]
   177b0:	mov	r0, r6
   177b4:	ldr	r3, [r3]
   177b8:	cmp	r2, r3
   177bc:	bne	178b4 <__assert_fail@plt+0x5830>
   177c0:	add	sp, sp, #28
   177c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177c8:	cmp	r0, #0
   177cc:	beq	17854 <__assert_fail@plt+0x57d0>
   177d0:	str	r0, [fp, #4]
   177d4:	mov	r0, fp
   177d8:	bl	156a4 <__assert_fail@plt+0x3620>
   177dc:	mov	r0, sl
   177e0:	bl	1206c <close@plt>
   177e4:	ldr	r0, [sp, #16]
   177e8:	bl	1206c <close@plt>
   177ec:	mov	r1, r9
   177f0:	ldr	r0, [sp, #12]
   177f4:	bl	11b20 <fdopen@plt>
   177f8:	add	r3, r8, r4, lsl #2
   177fc:	subs	sl, r0, #0
   17800:	beq	17824 <__assert_fail@plt+0x57a0>
   17804:	str	sl, [r8, r4, lsl #2]
   17808:	b	17720 <__assert_fail@plt+0x569c>
   1780c:	mov	r3, #0
   17810:	str	r3, [r8, r4, lsl #2]
   17814:	b	177a8 <__assert_fail@plt+0x5724>
   17818:	ldr	r0, [fp, #4]
   1781c:	bl	155a0 <__assert_fail@plt+0x351c>
   17820:	b	17758 <__assert_fail@plt+0x56d4>
   17824:	str	r3, [sp, #4]
   17828:	bl	11ea4 <__errno_location@plt>
   1782c:	mov	r4, r0
   17830:	ldr	r0, [sp, #12]
   17834:	ldr	r5, [r4]
   17838:	bl	1206c <close@plt>
   1783c:	ldr	r3, [sp, #4]
   17840:	str	r5, [r4]
   17844:	str	sl, [r3]
   17848:	b	177a8 <__assert_fail@plt+0x5724>
   1784c:	mov	r6, r7
   17850:	b	177a8 <__assert_fail@plt+0x5724>
   17854:	str	r0, [sp, #4]
   17858:	ldr	r0, [sp, #12]
   1785c:	bl	1206c <close@plt>
   17860:	cmp	sl, #0
   17864:	beq	17874 <__assert_fail@plt+0x57f0>
   17868:	ldr	r1, [sp, #4]
   1786c:	mov	r0, sl
   17870:	bl	17694 <__assert_fail@plt+0x5610>
   17874:	ldr	r0, [sp, #16]
   17878:	cmp	r0, #1
   1787c:	beq	17888 <__assert_fail@plt+0x5804>
   17880:	mov	r1, #1
   17884:	bl	17694 <__assert_fail@plt+0x5610>
   17888:	ldr	r1, [pc, #104]	; 178f8 <__assert_fail@plt+0x5874>
   1788c:	mov	r3, #0
   17890:	ldr	r2, [pc, #100]	; 178fc <__assert_fail@plt+0x5878>
   17894:	ldr	r1, [r1, #1048]	; 0x418
   17898:	mov	r0, r1
   1789c:	bl	11bf8 <execlp@plt>
   178a0:	bl	11ea4 <__errno_location@plt>
   178a4:	ldr	r1, [pc, #84]	; 17900 <__assert_fail@plt+0x587c>
   178a8:	ldr	r0, [r0]
   178ac:	bl	15608 <__assert_fail@plt+0x3584>
   178b0:	bl	2066c <__assert_fail@plt+0xe5e8>
   178b4:	bl	11c7c <__stack_chk_fail@plt>
   178b8:	mov	r2, #5
   178bc:	ldr	r1, [pc, #64]	; 17904 <__assert_fail@plt+0x5880>
   178c0:	mov	r0, #0
   178c4:	bl	11c70 <dcgettext@plt>
   178c8:	ldr	r3, [pc, #40]	; 178f8 <__assert_fail@plt+0x5874>
   178cc:	ldr	r1, [r3, #1048]	; 0x418
   178d0:	mov	r4, r0
   178d4:	mov	r0, #4
   178d8:	bl	1eb00 <__assert_fail@plt+0xca7c>
   178dc:	mov	r2, r4
   178e0:	mov	r1, r5
   178e4:	mov	r3, r0
   178e8:	mov	r0, #2
   178ec:	bl	11db4 <error@plt>
   178f0:	andeq	r5, r3, r0, lsl #30
   178f4:	andeq	r3, r2, r0, asr #4
   178f8:	andeq	r6, r3, r8, ror #5
   178fc:	andeq	r3, r2, r0, lsl r2
   17900:	andeq	r3, r2, r4, lsl r2
   17904:	andeq	r3, r2, ip, ror #3
   17908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1790c:	mov	fp, r0
   17910:	ldr	r6, [pc, #596]	; 17b6c <__assert_fail@plt+0x5ae8>
   17914:	ldr	r9, [pc, #596]	; 17b70 <__assert_fail@plt+0x5aec>
   17918:	sub	sp, sp, #148	; 0x94
   1791c:	ldr	ip, [r6, #1376]	; 0x560
   17920:	ldr	r0, [r6, #1044]	; 0x414
   17924:	ldr	r2, [r9]
   17928:	str	r1, [sp, #4]
   1792c:	ldr	r8, [r0, ip, lsl #2]
   17930:	str	r2, [sp, #140]	; 0x8c
   17934:	mov	r0, r8
   17938:	bl	11e80 <strlen@plt>
   1793c:	mov	r7, r0
   17940:	add	r0, r0, #24
   17944:	bic	r0, r0, #3
   17948:	bl	20424 <__assert_fail@plt+0xe3a0>
   1794c:	mov	r2, r7
   17950:	mov	r1, r8
   17954:	add	r5, r0, #9
   17958:	mov	r4, r0
   1795c:	mov	r0, r5
   17960:	bl	11bec <memcpy@plt>
   17964:	ldr	lr, [pc, #520]	; 17b74 <__assert_fail@plt+0x5af0>
   17968:	ldr	ip, [r6, #1376]	; 0x560
   1796c:	add	sl, r5, r7
   17970:	ldm	lr!, {r0, r1, r2}
   17974:	add	ip, ip, #1
   17978:	ldr	lr, [r6, #1036]	; 0x40c
   1797c:	str	r0, [r5, r7]
   17980:	cmp	ip, lr
   17984:	str	r1, [sl, #4]
   17988:	mov	r0, #0
   1798c:	add	r1, r6, #1216	; 0x4c0
   17990:	moveq	ip, r0
   17994:	str	r2, [sl, #8]
   17998:	add	r1, r1, #8
   1799c:	add	r2, sp, #12
   179a0:	str	r0, [r4]
   179a4:	str	ip, [r6, #1376]	; 0x560
   179a8:	bl	11d84 <pthread_sigmask@plt>
   179ac:	mov	r1, #524288	; 0x80000
   179b0:	clz	r2, r0
   179b4:	mov	r0, r5
   179b8:	lsr	r2, r2, #5
   179bc:	strb	r2, [sp, #8]
   179c0:	bl	1f944 <__assert_fail@plt+0xd8c0>
   179c4:	mov	r7, r0
   179c8:	bl	11ea4 <__errno_location@plt>
   179cc:	cmp	r7, #0
   179d0:	mov	sl, r0
   179d4:	blt	17a78 <__assert_fail@plt+0x59f4>
   179d8:	ldr	r2, [pc, #408]	; 17b78 <__assert_fail@plt+0x5af4>
   179dc:	ldrb	r0, [sp, #8]
   179e0:	ldr	r1, [r2, #100]	; 0x64
   179e4:	cmp	r0, #0
   179e8:	str	r4, [r2, #100]	; 0x64
   179ec:	str	r4, [r1]
   179f0:	bne	17ab0 <__assert_fail@plt+0x5a2c>
   179f4:	ldr	r1, [r6, #1048]	; 0x418
   179f8:	mov	r2, #0
   179fc:	cmp	r1, r2
   17a00:	strb	r2, [r4, #8]
   17a04:	beq	17a24 <__assert_fail@plt+0x59a0>
   17a08:	add	r0, sp, #8
   17a0c:	mov	r1, #4
   17a10:	bl	16ac4 <__assert_fail@plt+0x4a40>
   17a14:	cmp	r0, #0
   17a18:	str	r0, [r4, #4]
   17a1c:	bgt	17a58 <__assert_fail@plt+0x59d4>
   17a20:	beq	17ad4 <__assert_fail@plt+0x5a50>
   17a24:	mov	r0, r7
   17a28:	ldr	r1, [pc, #332]	; 17b7c <__assert_fail@plt+0x5af8>
   17a2c:	bl	11b20 <fdopen@plt>
   17a30:	cmp	r0, #0
   17a34:	str	r0, [fp]
   17a38:	beq	17b24 <__assert_fail@plt+0x5aa0>
   17a3c:	ldr	r2, [sp, #140]	; 0x8c
   17a40:	ldr	r3, [r9]
   17a44:	mov	r0, r4
   17a48:	cmp	r2, r3
   17a4c:	bne	17b20 <__assert_fail@plt+0x5a9c>
   17a50:	add	sp, sp, #148	; 0x94
   17a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a58:	mov	r0, r7
   17a5c:	bl	1206c <close@plt>
   17a60:	ldr	r0, [sp, #8]
   17a64:	bl	1206c <close@plt>
   17a68:	mov	r0, r4
   17a6c:	ldr	r7, [sp, #12]
   17a70:	bl	156a4 <__assert_fail@plt+0x3620>
   17a74:	b	17a24 <__assert_fail@plt+0x59a0>
   17a78:	ldrb	r3, [sp, #8]
   17a7c:	ldr	r5, [r0]
   17a80:	cmp	r3, #0
   17a84:	bne	17ac4 <__assert_fail@plt+0x5a40>
   17a88:	ldr	r3, [sp, #4]
   17a8c:	eor	r6, r3, #1
   17a90:	cmp	r5, #24
   17a94:	orrne	r6, r6, #1
   17a98:	cmp	r6, #0
   17a9c:	bne	17b38 <__assert_fail@plt+0x5ab4>
   17aa0:	mov	r0, r4
   17aa4:	bl	11bb0 <free@plt>
   17aa8:	mov	r4, r6
   17aac:	b	17a3c <__assert_fail@plt+0x59b8>
   17ab0:	ldr	r8, [sl]
   17ab4:	add	r0, sp, #8
   17ab8:	bl	168ac <__assert_fail@plt+0x4828>
   17abc:	str	r8, [sl]
   17ac0:	b	179f4 <__assert_fail@plt+0x5970>
   17ac4:	add	r0, sp, #8
   17ac8:	bl	168ac <__assert_fail@plt+0x4828>
   17acc:	str	r5, [sl]
   17ad0:	b	17a88 <__assert_fail@plt+0x5a04>
   17ad4:	ldr	r0, [sp, #12]
   17ad8:	bl	1206c <close@plt>
   17adc:	cmp	r7, #1
   17ae0:	beq	17af0 <__assert_fail@plt+0x5a6c>
   17ae4:	mov	r0, r7
   17ae8:	mov	r1, #1
   17aec:	bl	17694 <__assert_fail@plt+0x5610>
   17af0:	ldr	r0, [sp, #8]
   17af4:	cmp	r0, #0
   17af8:	beq	17b04 <__assert_fail@plt+0x5a80>
   17afc:	mov	r1, #0
   17b00:	bl	17694 <__assert_fail@plt+0x5610>
   17b04:	ldr	r1, [r6, #1048]	; 0x418
   17b08:	mov	r2, #0
   17b0c:	mov	r0, r1
   17b10:	bl	11bf8 <execlp@plt>
   17b14:	ldr	r0, [sl]
   17b18:	ldr	r1, [pc, #96]	; 17b80 <__assert_fail@plt+0x5afc>
   17b1c:	bl	15608 <__assert_fail@plt+0x3584>
   17b20:	bl	11c7c <__stack_chk_fail@plt>
   17b24:	ldr	r1, [pc, #88]	; 17b84 <__assert_fail@plt+0x5b00>
   17b28:	mov	r2, #5
   17b2c:	bl	11c70 <dcgettext@plt>
   17b30:	mov	r1, r5
   17b34:	bl	1520c <__assert_fail@plt+0x3188>
   17b38:	mov	r2, #5
   17b3c:	ldr	r1, [pc, #68]	; 17b88 <__assert_fail@plt+0x5b04>
   17b40:	mov	r0, #0
   17b44:	bl	11c70 <dcgettext@plt>
   17b48:	mov	r1, r8
   17b4c:	mov	r4, r0
   17b50:	mov	r0, #4
   17b54:	bl	1eb00 <__assert_fail@plt+0xca7c>
   17b58:	mov	r2, r4
   17b5c:	mov	r1, r5
   17b60:	mov	r3, r0
   17b64:	mov	r0, #2
   17b68:	bl	11db4 <error@plt>
   17b6c:	andeq	r6, r3, r8, ror #5
   17b70:	andeq	r5, r3, r0, lsl #30
   17b74:			; <UNDEFINED> instruction: 0x000232b0
   17b78:	andeq	r6, r3, ip, ror #3
   17b7c:	andeq	r3, r2, ip, lsl #5
   17b80:	andeq	r3, r2, r8, ror #4
   17b84:	muleq	r2, r0, r2
   17b88:	andeq	r3, r2, r4, asr #4
   17b8c:	ldrd	r2, [r1, #4]
   17b90:	ldr	ip, [r1]
   17b94:	cmp	ip, r3
   17b98:	ldr	r3, [r1, #12]
   17b9c:	beq	17bbc <__assert_fail@plt+0x5b38>
   17ba0:	cmp	r2, r3
   17ba4:	beq	17bac <__assert_fail@plt+0x5b28>
   17ba8:	b	157f8 <__assert_fail@plt+0x3774>
   17bac:	ldr	r3, [r1, #24]
   17bb0:	cmp	r3, #0
   17bb4:	bxne	lr
   17bb8:	b	17ba8 <__assert_fail@plt+0x5b24>
   17bbc:	cmp	r2, r3
   17bc0:	bxeq	lr
   17bc4:	ldr	r3, [r1, #20]
   17bc8:	cmp	r3, #0
   17bcc:	bxne	lr
   17bd0:	b	157f8 <__assert_fail@plt+0x3774>
   17bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bd8:	mov	r4, r1
   17bdc:	ldr	r7, [r3, #20]
   17be0:	ldr	r8, [r3, #24]
   17be4:	ldr	r1, [r3, #32]
   17be8:	mov	r5, r3
   17bec:	ldr	r3, [pc, #1636]	; 18258 <__assert_fail@plt+0x61d4>
   17bf0:	sub	sp, sp, #100	; 0x64
   17bf4:	mov	r6, r0
   17bf8:	ldr	lr, [sp, #140]	; 0x8c
   17bfc:	ldr	r0, [sp, #144]	; 0x90
   17c00:	add	ip, r7, r8
   17c04:	ldr	r3, [r3]
   17c08:	ldr	fp, [sp, #136]	; 0x88
   17c0c:	lsr	r9, r4, #1
   17c10:	cmp	ip, #131072	; 0x20000
   17c14:	cmpcs	r4, #1
   17c18:	str	lr, [sp, #28]
   17c1c:	str	r2, [sp, #40]	; 0x28
   17c20:	str	r0, [sp, #32]
   17c24:	str	r6, [sp, #64]	; 0x40
   17c28:	str	r2, [sp, #72]	; 0x48
   17c2c:	str	r1, [sp, #76]	; 0x4c
   17c30:	str	r9, [sp, #68]	; 0x44
   17c34:	str	r3, [sp, #92]	; 0x5c
   17c38:	str	fp, [sp, #80]	; 0x50
   17c3c:	str	lr, [sp, #84]	; 0x54
   17c40:	str	r0, [sp, #88]	; 0x58
   17c44:	bhi	181e0 <__assert_fail@plt+0x615c>
   17c48:	ldr	r3, [sp, #40]	; 0x28
   17c4c:	lsl	r4, r7, #4
   17c50:	rsb	r4, r4, #0
   17c54:	cmp	r8, #1
   17c58:	add	r9, r6, r4
   17c5c:	sub	sl, r6, r3, lsl #4
   17c60:	bls	17c7c <__assert_fail@plt+0x5bf8>
   17c64:	lsr	r2, r7, #1
   17c68:	mov	r3, #0
   17c6c:	sub	r2, sl, r2, lsl #4
   17c70:	mov	r1, r8
   17c74:	mov	r0, r9
   17c78:	bl	1746c <__assert_fail@plt+0x53e8>
   17c7c:	cmp	r7, #1
   17c80:	bls	17c98 <__assert_fail@plt+0x5c14>
   17c84:	mov	r2, sl
   17c88:	mov	r1, r7
   17c8c:	mov	r3, #0
   17c90:	mov	r0, r6
   17c94:	bl	1746c <__assert_fail@plt+0x53e8>
   17c98:	sub	r4, r4, r8, lsl #4
   17c9c:	add	r4, r6, r4
   17ca0:	str	r4, [r5, #12]
   17ca4:	stm	r5, {r6, r9}
   17ca8:	str	r9, [r5, #8]
   17cac:	mov	r1, r5
   17cb0:	mov	r0, fp
   17cb4:	bl	157f8 <__assert_fail@plt+0x3774>
   17cb8:	add	r3, fp, #4
   17cbc:	str	r3, [sp, #36]	; 0x24
   17cc0:	add	r3, fp, #32
   17cc4:	str	r3, [sp, #52]	; 0x34
   17cc8:	str	fp, [sp, #24]
   17ccc:	ldr	r0, [sp, #36]	; 0x24
   17cd0:	bl	11bbc <pthread_mutex_lock@plt>
   17cd4:	b	17ce4 <__assert_fail@plt+0x5c60>
   17cd8:	ldr	r1, [sp, #36]	; 0x24
   17cdc:	ldr	r0, [sp, #52]	; 0x34
   17ce0:	bl	12000 <pthread_cond_wait@plt>
   17ce4:	ldr	r3, [sp, #24]
   17ce8:	ldr	r0, [r3]
   17cec:	bl	1c184 <__assert_fail@plt+0xa100>
   17cf0:	cmp	r0, #0
   17cf4:	beq	17cd8 <__assert_fail@plt+0x5c54>
   17cf8:	mov	sl, r0
   17cfc:	add	r3, sl, #48	; 0x30
   17d00:	mov	r4, r3
   17d04:	ldr	r0, [sp, #36]	; 0x24
   17d08:	str	r3, [sp, #44]	; 0x2c
   17d0c:	bl	11b14 <pthread_mutex_unlock@plt>
   17d10:	mov	r0, r4
   17d14:	bl	11bbc <pthread_mutex_lock@plt>
   17d18:	ldr	r3, [sl, #40]	; 0x28
   17d1c:	mov	r2, #0
   17d20:	cmp	r3, #0
   17d24:	strb	r2, [sl, #44]	; 0x2c
   17d28:	beq	18170 <__assert_fail@plt+0x60ec>
   17d2c:	add	r4, r3, #1
   17d30:	cmp	r3, #1
   17d34:	ldr	r3, [sp, #40]	; 0x28
   17d38:	lsl	r4, r4, #1
   17d3c:	ldr	r7, [sl]
   17d40:	lsr	r4, r3, r4
   17d44:	ldr	r8, [sl, #4]
   17d48:	add	r4, r4, #1
   17d4c:	bls	17f64 <__assert_fail@plt+0x5ee0>
   17d50:	ldr	r3, [sl, #16]
   17d54:	mov	r9, r8
   17d58:	mov	r5, r7
   17d5c:	ldr	r6, [r3]
   17d60:	b	17d84 <__assert_fail@plt+0x5d00>
   17d64:	ldr	r9, [sl, #4]
   17d68:	sub	r6, r6, #16
   17d6c:	sub	r9, r9, #16
   17d70:	str	r9, [sl, #4]
   17d74:	ldm	r9, {r0, r1, r2, r3}
   17d78:	ldr	r5, [sl]
   17d7c:	stm	r6, {r0, r1, r2, r3}
   17d80:	sub	r4, r4, #1
   17d84:	ldr	r3, [sl, #8]
   17d88:	str	r6, [sp, #20]
   17d8c:	cmp	r3, r5
   17d90:	str	r3, [sp, #48]	; 0x30
   17d94:	beq	17ec4 <__assert_fail@plt+0x5e40>
   17d98:	ldr	r3, [sl, #12]
   17d9c:	cmp	r3, r9
   17da0:	beq	17f34 <__assert_fail@plt+0x5eb0>
   17da4:	cmp	r4, #0
   17da8:	beq	17de0 <__assert_fail@plt+0x5d5c>
   17dac:	sub	r1, r9, #16
   17db0:	sub	r0, r5, #16
   17db4:	bl	17394 <__assert_fail@plt+0x5310>
   17db8:	cmp	r0, #0
   17dbc:	bgt	17d64 <__assert_fail@plt+0x5ce0>
   17dc0:	ldr	r5, [sl]
   17dc4:	sub	r6, r6, #16
   17dc8:	sub	r5, r5, #16
   17dcc:	str	r5, [sl]
   17dd0:	ldm	r5, {r0, r1, r2, r3}
   17dd4:	ldr	r9, [sl, #4]
   17dd8:	stm	r6, {r0, r1, r2, r3}
   17ddc:	b	17d80 <__assert_fail@plt+0x5cfc>
   17de0:	sub	r3, r8, r9
   17de4:	ldr	r6, [sl, #24]
   17de8:	asr	ip, r3, #4
   17dec:	sub	lr, r7, r5
   17df0:	cmp	r6, ip
   17df4:	asr	lr, lr, #4
   17df8:	ldr	fp, [sl, #20]
   17dfc:	mvnne	r4, #0
   17e00:	bne	17ee0 <__assert_fail@plt+0x5e5c>
   17e04:	mvn	r8, #1
   17e08:	mvn	r4, #0
   17e0c:	rsb	r4, r4, r4, lsl #28
   17e10:	sub	r6, r5, #16
   17e14:	add	r5, r5, r4, lsl #4
   17e18:	ldr	r4, [sp, #20]
   17e1c:	b	17e30 <__assert_fail@plt+0x5dac>
   17e20:	sub	r8, r8, #1
   17e24:	cmn	r8, #1
   17e28:	sub	r6, r6, #16
   17e2c:	beq	181a4 <__assert_fail@plt+0x6120>
   17e30:	add	r3, r5, r8, lsl #4
   17e34:	ldr	lr, [sp, #48]	; 0x30
   17e38:	ldm	r3, {r0, r1, r2, r3}
   17e3c:	sub	r4, r4, #16
   17e40:	cmp	lr, r6
   17e44:	str	r6, [sl]
   17e48:	mov	lr, r6
   17e4c:	stm	r4, {r0, r1, r2, r3}
   17e50:	bne	17e20 <__assert_fail@plt+0x5d9c>
   17e54:	ldr	r3, [sp, #48]	; 0x30
   17e58:	mov	r6, ip
   17e5c:	sub	lr, r7, r3
   17e60:	str	r4, [sp, #20]
   17e64:	asr	lr, lr, #4
   17e68:	ldr	r3, [sl, #16]
   17e6c:	ldr	r2, [sp, #20]
   17e70:	str	r2, [r3]
   17e74:	ldrb	r3, [sl, #44]	; 0x2c
   17e78:	sub	lr, fp, lr
   17e7c:	sub	ip, r6, ip
   17e80:	cmp	r3, #0
   17e84:	str	lr, [sl, #20]
   17e88:	str	ip, [sl, #24]
   17e8c:	bne	17e9c <__assert_fail@plt+0x5e18>
   17e90:	mov	r1, sl
   17e94:	ldr	r0, [sp, #24]
   17e98:	bl	17b8c <__assert_fail@plt+0x5b08>
   17e9c:	ldr	r3, [sl, #40]	; 0x28
   17ea0:	cmp	r3, #1
   17ea4:	bhi	17f00 <__assert_fail@plt+0x5e7c>
   17ea8:	ldr	r3, [sl, #20]
   17eac:	ldr	r2, [sl, #24]
   17eb0:	cmn	r3, r2
   17eb4:	beq	17ef0 <__assert_fail@plt+0x5e6c>
   17eb8:	ldr	r0, [sp, #44]	; 0x2c
   17ebc:	bl	11b14 <pthread_mutex_unlock@plt>
   17ec0:	b	17ccc <__assert_fail@plt+0x5c48>
   17ec4:	ldr	r6, [sl, #24]
   17ec8:	sub	r3, r8, r9
   17ecc:	sub	lr, r7, r5
   17ed0:	cmp	r6, r3, asr #4
   17ed4:	asr	lr, lr, #4
   17ed8:	ldr	fp, [sl, #20]
   17edc:	beq	18208 <__assert_fail@plt+0x6184>
   17ee0:	cmp	lr, fp
   17ee4:	beq	18090 <__assert_fail@plt+0x600c>
   17ee8:	asr	ip, r3, #4
   17eec:	b	17e68 <__assert_fail@plt+0x5de4>
   17ef0:	ldr	r1, [sl, #28]
   17ef4:	ldr	r0, [sp, #24]
   17ef8:	bl	157f8 <__assert_fail@plt+0x3774>
   17efc:	b	17eb8 <__assert_fail@plt+0x5e34>
   17f00:	ldr	r0, [sl, #28]
   17f04:	add	r0, r0, #48	; 0x30
   17f08:	bl	11bbc <pthread_mutex_lock@plt>
   17f0c:	ldr	r1, [sl, #28]
   17f10:	ldrb	r3, [r1, #44]	; 0x2c
   17f14:	cmp	r3, #0
   17f18:	bne	17f28 <__assert_fail@plt+0x5ea4>
   17f1c:	ldr	r0, [sp, #24]
   17f20:	bl	17b8c <__assert_fail@plt+0x5b08>
   17f24:	ldr	r1, [sl, #28]
   17f28:	add	r0, r1, #48	; 0x30
   17f2c:	bl	11b14 <pthread_mutex_unlock@plt>
   17f30:	b	17eb8 <__assert_fail@plt+0x5e34>
   17f34:	sub	r3, r8, r9
   17f38:	ldr	r6, [sl, #24]
   17f3c:	asr	ip, r3, #4
   17f40:	sub	lr, r7, r5
   17f44:	cmp	r6, ip
   17f48:	asr	lr, lr, #4
   17f4c:	ldr	fp, [sl, #20]
   17f50:	bne	17ee0 <__assert_fail@plt+0x5e5c>
   17f54:	cmp	r4, #0
   17f58:	sub	r8, r4, #1
   17f5c:	bne	17e0c <__assert_fail@plt+0x5d88>
   17f60:	b	17e68 <__assert_fail@plt+0x5de4>
   17f64:	mov	r1, r8
   17f68:	mov	r0, r7
   17f6c:	b	17fc4 <__assert_fail@plt+0x5f40>
   17f70:	ldr	r3, [sl, #12]
   17f74:	cmp	r3, r1
   17f78:	beq	18000 <__assert_fail@plt+0x5f7c>
   17f7c:	cmp	r4, #0
   17f80:	beq	18100 <__assert_fail@plt+0x607c>
   17f84:	sub	r1, r1, #16
   17f88:	sub	r0, r0, #16
   17f8c:	bl	17394 <__assert_fail@plt+0x5310>
   17f90:	ldr	r1, [sp, #28]
   17f94:	sub	r4, r4, #1
   17f98:	cmp	r0, #0
   17f9c:	ldrle	r0, [sl]
   17fa0:	ldrgt	r0, [sl, #4]
   17fa4:	suble	r0, r0, #16
   17fa8:	subgt	r0, r0, #16
   17fac:	strle	r0, [sl]
   17fb0:	strgt	r0, [sl, #4]
   17fb4:	ldrle	r2, [sp, #32]
   17fb8:	ldrgt	r2, [sp, #32]
   17fbc:	bl	17634 <__assert_fail@plt+0x55b0>
   17fc0:	ldrd	r0, [sl]
   17fc4:	ldr	r3, [sl, #8]
   17fc8:	cmp	r3, r0
   17fcc:	bne	17f70 <__assert_fail@plt+0x5eec>
   17fd0:	ldr	ip, [sl, #24]
   17fd4:	sub	r3, r8, r1
   17fd8:	sub	lr, r7, r0
   17fdc:	cmp	ip, r3, asr #4
   17fe0:	asr	lr, lr, #4
   17fe4:	mov	r6, ip
   17fe8:	ldr	fp, [sl, #20]
   17fec:	beq	1824c <__assert_fail@plt+0x61c8>
   17ff0:	cmp	lr, fp
   17ff4:	beq	18028 <__assert_fail@plt+0x5fa4>
   17ff8:	asr	ip, r3, #4
   17ffc:	b	17e74 <__assert_fail@plt+0x5df0>
   18000:	ldr	ip, [sl, #24]
   18004:	sub	r3, r8, r1
   18008:	sub	lr, r7, r0
   1800c:	cmp	ip, r3, asr #4
   18010:	mov	r6, ip
   18014:	asr	lr, lr, #4
   18018:	beq	181b8 <__assert_fail@plt+0x6134>
   1801c:	ldr	fp, [sl, #20]
   18020:	cmp	lr, fp
   18024:	bne	17ff8 <__assert_fail@plt+0x5f74>
   18028:	ldr	r2, [sl, #12]
   1802c:	cmp	r2, r1
   18030:	beq	17ff8 <__assert_fail@plt+0x5f74>
   18034:	cmp	r4, #0
   18038:	sub	r4, r4, #1
   1803c:	bne	1804c <__assert_fail@plt+0x5fc8>
   18040:	b	17ff8 <__assert_fail@plt+0x5f74>
   18044:	subs	r4, r4, #1
   18048:	bcc	18070 <__assert_fail@plt+0x5fec>
   1804c:	sub	r0, r1, #16
   18050:	str	r0, [sl, #4]
   18054:	ldr	r1, [sp, #28]
   18058:	ldr	r2, [sp, #32]
   1805c:	bl	17634 <__assert_fail@plt+0x55b0>
   18060:	ldr	r1, [sl, #4]
   18064:	ldr	r3, [sl, #12]
   18068:	cmp	r1, r3
   1806c:	bne	18044 <__assert_fail@plt+0x5fc0>
   18070:	ldr	lr, [sl]
   18074:	sub	ip, r8, r1
   18078:	sub	lr, r7, lr
   1807c:	asr	ip, ip, #4
   18080:	asr	lr, lr, #4
   18084:	ldr	fp, [sl, #20]
   18088:	ldr	r6, [sl, #24]
   1808c:	b	17e74 <__assert_fail@plt+0x5df0>
   18090:	ldr	r7, [sl, #12]
   18094:	cmp	r7, r9
   18098:	beq	17ee8 <__assert_fail@plt+0x5e64>
   1809c:	cmp	r4, #0
   180a0:	sub	r5, r4, #1
   180a4:	rsbne	r4, r4, r4, lsl #28
   180a8:	subne	ip, r9, #16
   180ac:	addne	r9, r9, r4, lsl #4
   180b0:	bne	180c8 <__assert_fail@plt+0x6044>
   180b4:	b	17ee8 <__assert_fail@plt+0x5e64>
   180b8:	sub	r5, r5, #1
   180bc:	cmn	r5, #1
   180c0:	sub	ip, ip, #16
   180c4:	beq	181d0 <__assert_fail@plt+0x614c>
   180c8:	ldr	r2, [sp, #20]
   180cc:	add	r3, r9, r5, lsl #4
   180d0:	sub	r2, r2, #16
   180d4:	mov	r4, r2
   180d8:	str	r2, [sp, #20]
   180dc:	ldm	r3, {r0, r1, r2, r3}
   180e0:	cmp	ip, r7
   180e4:	str	ip, [sl, #4]
   180e8:	str	ip, [sp, #48]	; 0x30
   180ec:	stm	r4, {r0, r1, r2, r3}
   180f0:	bne	180b8 <__assert_fail@plt+0x6034>
   180f4:	sub	ip, r8, ip
   180f8:	asr	ip, ip, #4
   180fc:	b	17e68 <__assert_fail@plt+0x5de4>
   18100:	sub	r3, r8, r1
   18104:	ldr	r6, [sl, #24]
   18108:	sub	lr, r7, r0
   1810c:	cmp	r6, r3, asr #4
   18110:	asr	lr, lr, #4
   18114:	mvnne	r4, #0
   18118:	bne	1801c <__assert_fail@plt+0x5f98>
   1811c:	mvn	r4, #1
   18120:	b	1812c <__assert_fail@plt+0x60a8>
   18124:	subs	r4, r4, #1
   18128:	bcc	18150 <__assert_fail@plt+0x60cc>
   1812c:	sub	r0, r0, #16
   18130:	str	r0, [sl]
   18134:	ldr	r2, [sp, #32]
   18138:	ldr	r1, [sp, #28]
   1813c:	bl	17634 <__assert_fail@plt+0x55b0>
   18140:	ldr	r0, [sl]
   18144:	ldr	r3, [sl, #8]
   18148:	cmp	r0, r3
   1814c:	bne	18124 <__assert_fail@plt+0x60a0>
   18150:	ldr	ip, [sl, #4]
   18154:	sub	lr, r7, r0
   18158:	sub	ip, r8, ip
   1815c:	asr	lr, lr, #4
   18160:	asr	ip, ip, #4
   18164:	ldr	fp, [sl, #20]
   18168:	ldr	r6, [sl, #24]
   1816c:	b	17e74 <__assert_fail@plt+0x5df0>
   18170:	ldr	fp, [sp, #24]
   18174:	ldr	r0, [sp, #44]	; 0x2c
   18178:	bl	11b14 <pthread_mutex_unlock@plt>
   1817c:	mov	r1, sl
   18180:	mov	r0, fp
   18184:	bl	157f8 <__assert_fail@plt+0x3774>
   18188:	ldr	r3, [pc, #200]	; 18258 <__assert_fail@plt+0x61d4>
   1818c:	ldr	r2, [sp, #92]	; 0x5c
   18190:	ldr	r3, [r3]
   18194:	cmp	r2, r3
   18198:	bne	18254 <__assert_fail@plt+0x61d0>
   1819c:	add	sp, sp, #100	; 0x64
   181a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181a4:	sub	lr, r7, lr
   181a8:	str	r4, [sp, #20]
   181ac:	mov	r6, ip
   181b0:	asr	lr, lr, #4
   181b4:	b	17e68 <__assert_fail@plt+0x5de4>
   181b8:	cmp	r4, #0
   181bc:	moveq	r6, ip
   181c0:	sub	r4, r4, #1
   181c4:	ldreq	fp, [sl, #20]
   181c8:	bne	1812c <__assert_fail@plt+0x60a8>
   181cc:	b	17e74 <__assert_fail@plt+0x5df0>
   181d0:	ldr	r4, [sp, #48]	; 0x30
   181d4:	sub	ip, r8, r4
   181d8:	asr	ip, ip, #4
   181dc:	b	17e68 <__assert_fail@plt+0x5de4>
   181e0:	add	r3, sp, #64	; 0x40
   181e4:	ldr	r2, [pc, #112]	; 1825c <__assert_fail@plt+0x61d8>
   181e8:	mov	r1, #0
   181ec:	add	r0, sp, #60	; 0x3c
   181f0:	bl	11d90 <pthread_create@plt>
   181f4:	subs	r7, r0, #0
   181f8:	beq	18210 <__assert_fail@plt+0x618c>
   181fc:	ldr	r7, [r5, #20]
   18200:	ldr	r8, [r5, #24]
   18204:	b	17c48 <__assert_fail@plt+0x5bc4>
   18208:	mov	ip, r6
   1820c:	b	17e68 <__assert_fail@plt+0x5de4>
   18210:	ldr	r3, [sp, #32]
   18214:	ldr	r0, [r5, #20]
   18218:	str	r3, [sp, #8]
   1821c:	ldr	r3, [sp, #28]
   18220:	str	fp, [sp]
   18224:	str	r3, [sp, #4]
   18228:	sub	r1, r4, r9
   1822c:	sub	r0, r6, r0, lsl #4
   18230:	ldr	r2, [sp, #40]	; 0x28
   18234:	ldr	r3, [r5, #36]	; 0x24
   18238:	bl	17bd4 <__assert_fail@plt+0x5b50>
   1823c:	mov	r1, r7
   18240:	ldr	r0, [sp, #60]	; 0x3c
   18244:	bl	11fa0 <pthread_join@plt>
   18248:	b	18188 <__assert_fail@plt+0x6104>
   1824c:	mov	r6, ip
   18250:	b	17e74 <__assert_fail@plt+0x5df0>
   18254:	bl	11c7c <__stack_chk_fail@plt>
   18258:	andeq	r5, r3, r0, lsl #30
   1825c:	andeq	r8, r1, r0, ror #4
   18260:	push	{lr}		; (str lr, [sp, #-4]!)
   18264:	sub	sp, sp, #20
   18268:	ldr	r2, [r0, #20]
   1826c:	ldr	r3, [r0, #16]
   18270:	ldr	r1, [r0, #24]
   18274:	str	r2, [sp, #4]
   18278:	str	r1, [sp, #8]
   1827c:	str	r3, [sp]
   18280:	ldrd	r2, [r0, #8]
   18284:	ldrd	r0, [r0]
   18288:	bl	17bd4 <__assert_fail@plt+0x5b50>
   1828c:	mov	r0, #0
   18290:	add	sp, sp, #20
   18294:	pop	{pc}		; (ldr pc, [sp], #4)
   18298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1829c:	sub	sp, sp, #28
   182a0:	ldrb	r8, [r0, #24]
   182a4:	cmp	r8, #0
   182a8:	bne	1846c <__assert_fail@plt+0x63e8>
   182ac:	str	r1, [sp, #16]
   182b0:	ldr	r1, [pc, #768]	; 185b8 <__assert_fail@plt+0x6534>
   182b4:	mov	r3, r0
   182b8:	ldr	r4, [r0, #4]
   182bc:	ldr	r6, [r1, #1060]	; 0x424
   182c0:	ldr	r1, [pc, #756]	; 185bc <__assert_fail@plt+0x6538>
   182c4:	str	r2, [sp, #20]
   182c8:	str	r0, [sp, #12]
   182cc:	ldr	r2, [r0, #16]
   182d0:	ldrb	r0, [r1, #108]	; 0x6c
   182d4:	ldr	r7, [r1, #112]	; 0x70
   182d8:	ldr	r1, [r3, #20]
   182dc:	cmp	r4, r2
   182e0:	str	r0, [sp]
   182e4:	str	r1, [sp, #4]
   182e8:	ldr	r5, [r3]
   182ec:	bne	18478 <__assert_fail@plt+0x63f4>
   182f0:	ldr	r3, [r3, #8]
   182f4:	ldr	r2, [sp, #12]
   182f8:	sub	r7, r7, #18
   182fc:	ldr	r8, [r2, #12]
   18300:	ldr	r2, [sp, #4]
   18304:	add	r2, r2, #1
   18308:	str	r2, [sp, #8]
   1830c:	ldr	r2, [sp, #4]
   18310:	add	sl, r5, r8
   18314:	add	r4, r5, r4
   18318:	mul	r2, r3, r2
   1831c:	cmp	r3, #0
   18320:	sub	r2, sl, r2
   18324:	sub	r8, r2, r4
   18328:	sub	sl, sl, r3, lsl #4
   1832c:	ldmne	sl, {r3, r5}
   18330:	addne	r5, r5, r3
   18334:	ldr	r3, [sp, #8]
   18338:	cmp	r8, r3
   1833c:	bls	184b4 <__assert_fail@plt+0x6430>
   18340:	ldr	r1, [sp, #8]
   18344:	sub	r0, r8, #1
   18348:	bl	22434 <_obstack_memory_used@@Base+0x414>
   1834c:	ldr	fp, [sp, #16]
   18350:	mov	r1, #1
   18354:	mov	r3, fp
   18358:	mov	r9, r0
   1835c:	mov	r2, r0
   18360:	mov	r0, r4
   18364:	bl	12030 <fread_unlocked@plt>
   18368:	cmp	r9, r0
   1836c:	sub	r8, r8, r0
   18370:	add	r9, r4, r0
   18374:	beq	183bc <__assert_fail@plt+0x6338>
   18378:	ldr	r3, [fp]
   1837c:	tst	r3, #32
   18380:	bne	1859c <__assert_fail@plt+0x6518>
   18384:	tst	r3, #16
   18388:	beq	183bc <__assert_fail@plt+0x6338>
   1838c:	ldr	r2, [sp, #12]
   18390:	mov	r1, #1
   18394:	ldr	r3, [r2]
   18398:	strb	r1, [r2, #24]
   1839c:	cmp	r3, r9
   183a0:	beq	1846c <__assert_fail@plt+0x63e8>
   183a4:	cmp	r5, r9
   183a8:	beq	183bc <__assert_fail@plt+0x6338>
   183ac:	ldrb	r3, [r9, #-1]
   183b0:	ldr	r2, [sp]
   183b4:	cmp	r3, r2
   183b8:	strbne	r2, [r9], #1
   183bc:	mov	fp, sl
   183c0:	b	183e0 <__assert_fail@plt+0x635c>
   183c4:	mov	r1, sl
   183c8:	mov	r0, r5
   183cc:	mov	r2, r6
   183d0:	bl	15838 <__assert_fail@plt+0x37b4>
   183d4:	str	r0, [fp, #-8]
   183d8:	sub	fp, fp, #16
   183dc:	mov	r5, r4
   183e0:	sub	r2, r9, r4
   183e4:	mov	r0, r4
   183e8:	ldr	r1, [sp]
   183ec:	bl	11f1c <memchr@plt>
   183f0:	mov	sl, fp
   183f4:	cmp	r0, #0
   183f8:	beq	184a0 <__assert_fail@plt+0x641c>
   183fc:	ldr	r3, [sp, #4]
   18400:	mov	r4, r0
   18404:	sub	r8, r8, r3
   18408:	mov	r3, #0
   1840c:	strb	r3, [r4], #1
   18410:	sub	sl, r4, r5
   18414:	cmp	r7, sl
   18418:	movcc	r7, sl
   1841c:	cmp	r6, #0
   18420:	str	r5, [fp, #-16]
   18424:	str	sl, [fp, #-12]
   18428:	beq	183d8 <__assert_fail@plt+0x6354>
   1842c:	ldr	r2, [r6, #8]
   18430:	cmn	r2, #1
   18434:	beq	18448 <__assert_fail@plt+0x63c4>
   18438:	mov	r2, r6
   1843c:	mov	r1, sl
   18440:	mov	r0, r5
   18444:	bl	159a0 <__assert_fail@plt+0x391c>
   18448:	ldr	r2, [r6]
   1844c:	str	r0, [fp, #-4]
   18450:	cmn	r2, #1
   18454:	bne	183c4 <__assert_fail@plt+0x6340>
   18458:	ldrb	r2, [r6, #24]
   1845c:	cmp	r2, #0
   18460:	bne	18528 <__assert_fail@plt+0x64a4>
   18464:	str	r5, [fp, #-8]
   18468:	b	183d8 <__assert_fail@plt+0x6354>
   1846c:	mov	r0, #0
   18470:	add	sp, sp, #28
   18474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18478:	sub	r4, r4, r2
   1847c:	add	r1, r5, r4
   18480:	mov	r0, r5
   18484:	bl	11ba4 <memmove@plt>
   18488:	ldr	r2, [sp, #12]
   1848c:	mov	r3, r8
   18490:	ldr	r4, [r2, #16]
   18494:	ldr	r5, [r2]
   18498:	stmib	r2, {r4, r8}
   1849c:	b	182f4 <__assert_fail@plt+0x6270>
   184a0:	ldr	r3, [sp, #12]
   184a4:	mov	r4, r9
   184a8:	ldrb	r3, [r3, #24]
   184ac:	cmp	r3, #0
   184b0:	beq	18334 <__assert_fail@plt+0x62b0>
   184b4:	ldr	r1, [sp, #12]
   184b8:	ldr	r0, [r1]
   184bc:	ldr	r8, [r1, #12]
   184c0:	sub	r2, r4, r0
   184c4:	add	r3, r0, r8
   184c8:	sub	r3, r3, sl
   184cc:	str	r2, [r1, #4]
   184d0:	asr	r3, r3, #4
   184d4:	cmp	r3, #0
   184d8:	str	r3, [r1, #8]
   184dc:	bne	1857c <__assert_fail@plt+0x64f8>
   184e0:	cmp	r0, #0
   184e4:	lsr	r3, r8, #4
   184e8:	beq	1855c <__assert_fail@plt+0x64d8>
   184ec:	ldr	r2, [pc, #204]	; 185c0 <__assert_fail@plt+0x653c>
   184f0:	cmp	r8, r2
   184f4:	bhi	185b4 <__assert_fail@plt+0x6530>
   184f8:	add	r8, r3, r8, lsr #5
   184fc:	add	r8, r8, #1
   18500:	lsl	r8, r8, #4
   18504:	mov	r1, r8
   18508:	bl	20480 <__assert_fail@plt+0xe3fc>
   1850c:	ldr	r3, [sp, #12]
   18510:	str	r8, [r3, #12]
   18514:	ldr	r4, [r3, #4]
   18518:	str	r0, [r3]
   1851c:	mov	r5, r0
   18520:	ldr	r3, [r3, #8]
   18524:	b	1830c <__assert_fail@plt+0x6288>
   18528:	ldrb	r2, [r5]
   1852c:	ldr	r3, [pc, #132]	; 185b8 <__assert_fail@plt+0x6534>
   18530:	add	r2, r3, r2
   18534:	ldrb	r2, [r2, #8]
   18538:	cmp	r2, #0
   1853c:	beq	18464 <__assert_fail@plt+0x63e0>
   18540:	ldrb	r3, [r5, #1]!
   18544:	ldr	r2, [pc, #108]	; 185b8 <__assert_fail@plt+0x6534>
   18548:	add	r3, r2, r3
   1854c:	ldrb	r3, [r3, #8]
   18550:	cmp	r3, #0
   18554:	bne	18540 <__assert_fail@plt+0x64bc>
   18558:	b	18464 <__assert_fail@plt+0x63e0>
   1855c:	cmp	r8, #15
   18560:	bls	18574 <__assert_fail@plt+0x64f0>
   18564:	lsls	r3, r3, #4
   18568:	bmi	185b4 <__assert_fail@plt+0x6530>
   1856c:	mov	r8, r3
   18570:	b	18504 <__assert_fail@plt+0x6480>
   18574:	mov	r8, #64	; 0x40
   18578:	b	18504 <__assert_fail@plt+0x6480>
   1857c:	ldr	r3, [pc, #56]	; 185bc <__assert_fail@plt+0x6538>
   18580:	sub	r4, r4, r5
   18584:	add	r7, r7, #18
   18588:	mov	r0, #1
   1858c:	str	r4, [r1, #16]
   18590:	str	r7, [r3, #112]	; 0x70
   18594:	add	sp, sp, #28
   18598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1859c:	ldr	r1, [pc, #32]	; 185c4 <__assert_fail@plt+0x6540>
   185a0:	mov	r2, #5
   185a4:	mov	r0, #0
   185a8:	bl	11c70 <dcgettext@plt>
   185ac:	ldr	r1, [sp, #20]
   185b0:	bl	1520c <__assert_fail@plt+0x3188>
   185b4:	bl	2066c <__assert_fail@plt+0xe5e8>
   185b8:	andeq	r6, r3, r8, ror #5
   185bc:	andeq	r6, r3, ip, ror #3
   185c0:	ldrbpl	r5, [r5, #-1359]	; 0xfffffab1
   185c4:			; <UNDEFINED> instruction: 0x000232bc
   185c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185cc:	mov	r4, #28
   185d0:	sub	sp, sp, #84	; 0x54
   185d4:	umull	r4, r5, r2, r4
   185d8:	str	r2, [sp, #12]
   185dc:	ldr	r2, [pc, #1744]	; 18cb4 <__assert_fail@plt+0x6c30>
   185e0:	str	r3, [sp, #32]
   185e4:	ldr	r3, [sp, #120]	; 0x78
   185e8:	ldr	ip, [r2]
   185ec:	str	r3, [sp, #36]	; 0x24
   185f0:	adds	r2, r5, #0
   185f4:	ldr	r3, [sp, #124]	; 0x7c
   185f8:	movne	r2, #1
   185fc:	cmp	r4, #0
   18600:	str	r0, [sp, #4]
   18604:	str	r1, [sp, #40]	; 0x28
   18608:	str	ip, [sp, #76]	; 0x4c
   1860c:	str	r3, [sp]
   18610:	blt	18cb0 <__assert_fail@plt+0x6c2c>
   18614:	cmp	r2, #0
   18618:	bne	18cb0 <__assert_fail@plt+0x6c2c>
   1861c:	ldr	r6, [sp, #12]
   18620:	rsb	r0, r6, r6, lsl #3
   18624:	lsl	r0, r0, #2
   18628:	bl	20424 <__assert_fail@plt+0xe3a0>
   1862c:	lsrs	r3, r6, #30
   18630:	movne	r5, #1
   18634:	moveq	r5, #0
   18638:	lsls	r4, r6, #2
   1863c:	str	r0, [sp, #8]
   18640:	bmi	18cb0 <__assert_fail@plt+0x6c2c>
   18644:	cmp	r5, #0
   18648:	bne	18cb0 <__assert_fail@plt+0x6c2c>
   1864c:	mov	r0, r4
   18650:	bl	20424 <__assert_fail@plt+0xe3a0>
   18654:	mov	fp, r0
   18658:	mov	r0, r4
   1865c:	bl	20424 <__assert_fail@plt+0xe3a0>
   18660:	str	r0, [sp, #16]
   18664:	mov	r0, r4
   18668:	bl	20424 <__assert_fail@plt+0xe3a0>
   1866c:	ldr	r2, [pc, #1604]	; 18cb8 <__assert_fail@plt+0x6c34>
   18670:	cmp	r6, #0
   18674:	str	r5, [sp, #60]	; 0x3c
   18678:	ldr	r2, [r2, #1060]	; 0x424
   1867c:	str	r2, [sp, #48]	; 0x30
   18680:	mov	sl, r0
   18684:	beq	187f4 <__assert_fail@plt+0x6770>
   18688:	ldr	r2, [sp, #4]
   1868c:	mov	r9, r5
   18690:	mov	r7, r5
   18694:	mov	sl, r6
   18698:	sub	r2, r2, #8
   1869c:	str	r2, [sp, #20]
   186a0:	str	r0, [sp, #24]
   186a4:	ldr	r3, [pc, #1548]	; 18cb8 <__assert_fail@plt+0x6c34>
   186a8:	mov	r1, sl
   186ac:	sub	r6, r9, r5
   186b0:	ldr	r0, [r3, #1380]	; 0x564
   186b4:	bl	22434 <_obstack_memory_used@@Base+0x414>
   186b8:	ldr	r3, [pc, #1532]	; 18cbc <__assert_fail@plt+0x6c38>
   186bc:	mov	r1, #16
   186c0:	ldr	r2, [r3, #112]	; 0x70
   186c4:	ldr	r3, [sp, #8]
   186c8:	add	r8, r3, r6, lsl #2
   186cc:	ldr	r3, [sp]
   186d0:	add	ip, r3, r7
   186d4:	str	ip, [sp, #12]
   186d8:	ldr	ip, [sp, #4]
   186dc:	add	r4, ip, r9
   186e0:	cmp	r0, r2
   186e4:	movcs	r2, r0
   186e8:	mov	r0, r8
   186ec:	bl	15314 <__assert_fail@plt+0x3290>
   186f0:	ldr	ip, [sp, #4]
   186f4:	ldr	r3, [sp]
   186f8:	mov	r0, r8
   186fc:	ldr	r2, [ip, r9]
   18700:	ldr	r1, [r3, r7]
   18704:	bl	18298 <__assert_fail@plt+0x6214>
   18708:	cmp	r0, #0
   1870c:	beq	18750 <__assert_fail@plt+0x66cc>
   18710:	ldr	r3, [sp, #8]
   18714:	ldr	r1, [r8, #12]
   18718:	ldr	r2, [r8, #8]
   1871c:	ldr	r3, [r3, r6, lsl #2]
   18720:	add	r5, r5, #1
   18724:	add	r3, r3, r1
   18728:	ldr	r1, [sp, #16]
   1872c:	sub	r2, r3, r2, lsl #4
   18730:	cmp	r5, sl
   18734:	sub	r3, r3, #16
   18738:	str	r2, [r1, r7]
   1873c:	str	r3, [fp, r7]
   18740:	bcs	18840 <__assert_fail@plt+0x67bc>
   18744:	lsl	r9, r5, #3
   18748:	lsl	r7, r5, #2
   1874c:	b	186a4 <__assert_fail@plt+0x6620>
   18750:	ldr	r3, [sp, #4]
   18754:	ldr	r1, [r3, r9]
   18758:	ldr	r3, [sp]
   1875c:	ldr	r0, [r3, r7]
   18760:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   18764:	ldr	r3, [sp, #40]	; 0x28
   18768:	cmp	r3, r5
   1876c:	bhi	18c84 <__assert_fail@plt+0x6c00>
   18770:	ldr	r3, [sp, #8]
   18774:	ldr	r0, [r3, r6, lsl #2]
   18778:	bl	11bb0 <free@plt>
   1877c:	sub	r2, sl, #1
   18780:	cmp	r2, r5
   18784:	bls	18ca0 <__assert_fail@plt+0x6c1c>
   18788:	ldr	r3, [sp, #20]
   1878c:	ldr	r6, [sp, #12]
   18790:	add	lr, r3, sl, lsl #3
   18794:	add	r3, r4, #8
   18798:	ldr	ip, [r6, #4]
   1879c:	ldm	r3, {r0, r1}
   187a0:	cmp	lr, r3
   187a4:	stm	r4, {r0, r1}
   187a8:	mov	r4, r3
   187ac:	str	ip, [r6], #4
   187b0:	bne	18794 <__assert_fail@plt+0x6710>
   187b4:	mov	sl, r2
   187b8:	b	186a4 <__assert_fail@plt+0x6620>
   187bc:	ldr	r3, [pc, #1268]	; 18cb8 <__assert_fail@plt+0x6c34>
   187c0:	ldr	r2, [sp, #24]
   187c4:	ldrb	r3, [r3, #1354]	; 0x54a
   187c8:	cmp	r2, #0
   187cc:	moveq	r3, #0
   187d0:	andne	r3, r3, #1
   187d4:	cmp	r3, #0
   187d8:	beq	187f4 <__assert_fail@plt+0x6770>
   187dc:	add	r0, sp, #60	; 0x3c
   187e0:	ldr	r2, [sp, #36]	; 0x24
   187e4:	ldr	r1, [sp, #32]
   187e8:	bl	16f50 <__assert_fail@plt+0x4ecc>
   187ec:	ldr	r0, [sp, #60]	; 0x3c
   187f0:	bl	11bb0 <free@plt>
   187f4:	ldrd	r0, [sp, #32]
   187f8:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   187fc:	ldr	r0, [sp]
   18800:	bl	11bb0 <free@plt>
   18804:	ldr	r0, [sp, #8]
   18808:	bl	11bb0 <free@plt>
   1880c:	mov	r0, sl
   18810:	bl	11bb0 <free@plt>
   18814:	ldr	r0, [sp, #16]
   18818:	bl	11bb0 <free@plt>
   1881c:	ldr	r3, [pc, #1168]	; 18cb4 <__assert_fail@plt+0x6c30>
   18820:	ldr	r2, [sp, #76]	; 0x4c
   18824:	ldr	r3, [r3]
   18828:	cmp	r2, r3
   1882c:	bne	18cac <__assert_fail@plt+0x6c28>
   18830:	mov	r0, fp
   18834:	add	sp, sp, #84	; 0x54
   18838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1883c:	b	11bb0 <free@plt>
   18840:	str	sl, [sp, #12]
   18844:	ldr	sl, [sp, #24]
   18848:	ldr	r1, [sp, #12]
   1884c:	cmp	r1, #0
   18850:	beq	187f4 <__assert_fail@plt+0x6770>
   18854:	sub	r3, sl, #4
   18858:	str	r3, [sp, #28]
   1885c:	mov	r2, r3
   18860:	mov	r3, #0
   18864:	str	r3, [r2, #4]!
   18868:	add	r3, r3, #1
   1886c:	cmp	r3, r1
   18870:	bne	18864 <__assert_fail@plt+0x67e0>
   18874:	ldr	r3, [sp, #12]
   18878:	cmp	r3, #1
   1887c:	beq	188c8 <__assert_fail@plt+0x6844>
   18880:	mov	r6, #1
   18884:	sub	r5, r6, #-1073741823	; 0xc0000001
   18888:	lsl	r4, r5, #2
   1888c:	add	r4, r4, #4
   18890:	ldr	r7, [sl, r5, lsl #2]
   18894:	ldr	r8, [sl, r4]
   18898:	ldr	r0, [fp, r7, lsl #2]
   1889c:	ldr	r1, [fp, r8, lsl #2]
   188a0:	bl	17394 <__assert_fail@plt+0x5310>
   188a4:	cmp	r0, #0
   188a8:	strgt	r8, [sl, r5, lsl #2]
   188ac:	movgt	r6, #1
   188b0:	strgt	r7, [sl, r4]
   188b4:	bgt	18884 <__assert_fail@plt+0x6800>
   188b8:	ldr	r3, [sp, #12]
   188bc:	add	r6, r6, #1
   188c0:	cmp	r6, r3
   188c4:	bcc	18884 <__assert_fail@plt+0x6800>
   188c8:	mov	r3, #0
   188cc:	str	r3, [sp, #44]	; 0x2c
   188d0:	str	r3, [sp, #24]
   188d4:	ldr	r3, [pc, #988]	; 18cb8 <__assert_fail@plt+0x6c34>
   188d8:	ldr	r4, [sl]
   188dc:	ldrb	r3, [r3, #1354]	; 0x54a
   188e0:	lsl	r5, r4, #2
   188e4:	add	r8, fp, r5
   188e8:	cmp	r3, #0
   188ec:	ldr	r6, [fp, r4, lsl #2]
   188f0:	beq	18a40 <__assert_fail@plt+0x69bc>
   188f4:	ldr	r3, [sp, #24]
   188f8:	cmp	r3, #0
   188fc:	beq	18a64 <__assert_fail@plt+0x69e0>
   18900:	mov	r1, r6
   18904:	mov	r0, r3
   18908:	bl	17394 <__assert_fail@plt+0x5310>
   1890c:	cmp	r0, #0
   18910:	bne	18a54 <__assert_fail@plt+0x69d0>
   18914:	ldr	r2, [sp, #16]
   18918:	ldr	r3, [r2, r5]
   1891c:	add	r2, r2, r5
   18920:	cmp	r3, r6
   18924:	subcc	r6, r6, #16
   18928:	str	r2, [sp, #20]
   1892c:	strcc	r6, [r8]
   18930:	bcc	1899c <__assert_fail@plt+0x6918>
   18934:	lsl	r6, r4, #3
   18938:	ldr	r1, [sp, #8]
   1893c:	sub	r9, r6, r4
   18940:	ldr	r3, [sp, #4]
   18944:	add	r7, r1, r9, lsl #2
   18948:	ldr	r1, [sp]
   1894c:	ldr	r2, [r3, r4, lsl #3]
   18950:	mov	r0, r7
   18954:	ldr	r1, [r1, r5]
   18958:	bl	18298 <__assert_fail@plt+0x6214>
   1895c:	ldr	r3, [sp, #4]
   18960:	ldr	r1, [sp]
   18964:	add	r3, r3, r6
   18968:	add	r2, r1, r5
   1896c:	cmp	r0, #0
   18970:	beq	18af8 <__assert_fail@plt+0x6a74>
   18974:	ldr	r3, [sp, #8]
   18978:	ldr	r2, [r7, #12]
   1897c:	ldr	r1, [r7, #8]
   18980:	ldr	r3, [r3, r9, lsl #2]
   18984:	add	r3, r3, r2
   18988:	sub	r2, r3, #16
   1898c:	sub	r3, r3, r1, lsl #4
   18990:	ldr	r1, [sp, #20]
   18994:	str	r2, [r8]
   18998:	str	r3, [r1]
   1899c:	ldr	r9, [sp, #12]
   189a0:	cmp	r9, #1
   189a4:	beq	18c58 <__assert_fail@plt+0x6bd4>
   189a8:	mov	r5, #1
   189ac:	ldr	r7, [r8]
   189b0:	mov	r6, r5
   189b4:	b	189e8 <__assert_fail@plt+0x6964>
   189b8:	cmp	r4, r8
   189bc:	movcs	r8, #0
   189c0:	movcc	r8, #1
   189c4:	cmp	r0, #0
   189c8:	movne	r8, #0
   189cc:	cmp	r8, #0
   189d0:	addeq	r6, r5, #1
   189d4:	bne	18a00 <__assert_fail@plt+0x697c>
   189d8:	add	r5, r6, r9
   189dc:	cmp	r6, r9
   189e0:	lsr	r5, r5, #1
   189e4:	bcs	18a14 <__assert_fail@plt+0x6990>
   189e8:	ldr	r8, [sl, r5, lsl #2]
   189ec:	mov	r0, r7
   189f0:	ldr	r1, [fp, r8, lsl #2]
   189f4:	bl	17394 <__assert_fail@plt+0x5310>
   189f8:	cmp	r0, #0
   189fc:	bge	189b8 <__assert_fail@plt+0x6934>
   18a00:	mov	r9, r5
   18a04:	add	r5, r6, r9
   18a08:	cmp	r6, r9
   18a0c:	lsr	r5, r5, #1
   18a10:	bcc	189e8 <__assert_fail@plt+0x6964>
   18a14:	subs	r1, r6, #1
   18a18:	beq	18a38 <__assert_fail@plt+0x69b4>
   18a1c:	ldr	r3, [sp, #28]
   18a20:	add	r6, r3, r6, lsl #2
   18a24:	mov	r3, sl
   18a28:	ldr	r2, [r3, #4]
   18a2c:	str	r2, [r3], #4
   18a30:	cmp	r3, r6
   18a34:	bne	18a28 <__assert_fail@plt+0x69a4>
   18a38:	str	r4, [sl, r1, lsl #2]
   18a3c:	b	188d4 <__assert_fail@plt+0x6850>
   18a40:	ldr	r2, [sp, #36]	; 0x24
   18a44:	ldr	r1, [sp, #32]
   18a48:	mov	r0, r6
   18a4c:	bl	16f50 <__assert_fail@plt+0x4ecc>
   18a50:	b	18914 <__assert_fail@plt+0x6890>
   18a54:	ldr	r2, [sp, #36]	; 0x24
   18a58:	ldr	r1, [sp, #32]
   18a5c:	add	r0, sp, #60	; 0x3c
   18a60:	bl	16f50 <__assert_fail@plt+0x4ecc>
   18a64:	ldr	r7, [r6, #4]
   18a68:	ldr	r3, [sp, #44]	; 0x2c
   18a6c:	ldr	r0, [sp, #60]	; 0x3c
   18a70:	cmp	r7, r3
   18a74:	bhi	18ad4 <__assert_fail@plt+0x6a50>
   18a78:	ldr	r1, [r6]
   18a7c:	mov	r2, r7
   18a80:	str	r7, [sp, #64]	; 0x40
   18a84:	bl	11bec <memcpy@plt>
   18a88:	ldr	r3, [sp, #48]	; 0x30
   18a8c:	cmp	r3, #0
   18a90:	beq	18c60 <__assert_fail@plt+0x6bdc>
   18a94:	ldr	r0, [r6]
   18a98:	ldr	r3, [r6, #8]
   18a9c:	ldr	r1, [r6, #12]
   18aa0:	ldr	r2, [sp, #60]	; 0x3c
   18aa4:	sub	r3, r3, r0
   18aa8:	add	r3, r2, r3
   18aac:	sub	r1, r1, r0
   18ab0:	add	r2, r2, r1
   18ab4:	str	r3, [sp, #68]	; 0x44
   18ab8:	add	r3, sp, #60	; 0x3c
   18abc:	str	r2, [sp, #72]	; 0x48
   18ac0:	str	r3, [sp, #24]
   18ac4:	b	18914 <__assert_fail@plt+0x6890>
   18ac8:	lsl	r3, r3, #1
   18acc:	cmp	r7, r3
   18ad0:	bls	18c98 <__assert_fail@plt+0x6c14>
   18ad4:	cmp	r3, #0
   18ad8:	bne	18ac8 <__assert_fail@plt+0x6a44>
   18adc:	bl	11bb0 <free@plt>
   18ae0:	mov	r0, r7
   18ae4:	bl	20424 <__assert_fail@plt+0xe3a0>
   18ae8:	str	r7, [sp, #44]	; 0x2c
   18aec:	ldr	r7, [r6, #4]
   18af0:	str	r0, [sp, #60]	; 0x3c
   18af4:	b	18a78 <__assert_fail@plt+0x69f4>
   18af8:	ldr	r1, [sp, #12]
   18afc:	cmp	r1, #1
   18b00:	beq	18b54 <__assert_fail@plt+0x6ad0>
   18b04:	ldr	r1, [sp, #12]
   18b08:	ldr	r2, [sp, #28]
   18b0c:	mov	r3, sl
   18b10:	add	r1, r2, r1, lsl #2
   18b14:	ldr	r2, [r3, #4]!
   18b18:	cmp	r2, r4
   18b1c:	subhi	r2, r2, #1
   18b20:	strhi	r2, [r3]
   18b24:	ldrhi	r4, [sl]
   18b28:	cmp	r1, r3
   18b2c:	bne	18b14 <__assert_fail@plt+0x6a90>
   18b30:	lsl	r6, r4, #3
   18b34:	ldr	r3, [sp, #8]
   18b38:	sub	r7, r6, r4
   18b3c:	ldr	r2, [sp]
   18b40:	add	r7, r3, r7, lsl #2
   18b44:	ldr	r3, [sp, #4]
   18b48:	lsl	r5, r4, #2
   18b4c:	add	r3, r3, r6
   18b50:	add	r2, r2, r5
   18b54:	ldr	r1, [r3]
   18b58:	ldr	r0, [r2]
   18b5c:	str	r3, [sp, #52]	; 0x34
   18b60:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   18b64:	ldr	r3, [sp, #40]	; 0x28
   18b68:	cmp	r3, r4
   18b6c:	ldr	r3, [sp, #12]
   18b70:	sub	r3, r3, #1
   18b74:	str	r3, [sp, #20]
   18b78:	ldr	r3, [sp, #52]	; 0x34
   18b7c:	bhi	18c6c <__assert_fail@plt+0x6be8>
   18b80:	ldr	r0, [r7]
   18b84:	bl	11bb0 <free@plt>
   18b88:	ldr	r3, [sp, #20]
   18b8c:	cmp	r3, r4
   18b90:	bls	18c20 <__assert_fail@plt+0x6b9c>
   18b94:	ldr	r2, [sp, #4]
   18b98:	sub	ip, r6, r4
   18b9c:	sub	r3, r2, #8
   18ba0:	add	r6, r2, r6
   18ba4:	ldr	r2, [sp, #12]
   18ba8:	ldr	r1, [sp, #8]
   18bac:	add	r8, fp, r5
   18bb0:	add	r3, r3, r2, lsl #3
   18bb4:	ldr	r2, [sp]
   18bb8:	str	sl, [sp, #52]	; 0x34
   18bbc:	add	r9, r2, r5
   18bc0:	ldr	r2, [sp, #16]
   18bc4:	add	ip, r1, ip, lsl #2
   18bc8:	add	r5, r2, r5
   18bcc:	mov	sl, r3
   18bd0:	add	r7, r6, #8
   18bd4:	ldr	r3, [r9, #4]
   18bd8:	ldm	r7, {r0, r1}
   18bdc:	add	r4, ip, #28
   18be0:	str	r3, [r9], #4
   18be4:	stm	r6, {r0, r1}
   18be8:	ldm	r4!, {r0, r1, r2, r3}
   18bec:	mov	lr, ip
   18bf0:	cmp	sl, r7
   18bf4:	mov	r6, r7
   18bf8:	stmia	lr!, {r0, r1, r2, r3}
   18bfc:	add	ip, ip, #28
   18c00:	ldm	r4, {r0, r1, r2}
   18c04:	ldr	r3, [r5, #4]
   18c08:	ldr	r4, [r8, #4]
   18c0c:	stm	lr, {r0, r1, r2}
   18c10:	str	r4, [r8], #4
   18c14:	str	r3, [r5], #4
   18c18:	bne	18bd0 <__assert_fail@plt+0x6b4c>
   18c1c:	ldr	sl, [sp, #52]	; 0x34
   18c20:	ldr	r3, [sp, #20]
   18c24:	cmp	r3, #0
   18c28:	beq	187bc <__assert_fail@plt+0x6738>
   18c2c:	ldr	r2, [sp, #12]
   18c30:	ldr	r3, [sp, #28]
   18c34:	add	r1, r3, r2, lsl #2
   18c38:	mov	r3, sl
   18c3c:	ldr	r2, [r3, #4]
   18c40:	str	r2, [r3], #4
   18c44:	cmp	r1, r3
   18c48:	bne	18c3c <__assert_fail@plt+0x6bb8>
   18c4c:	ldr	r3, [sp, #20]
   18c50:	str	r3, [sp, #12]
   18c54:	b	188d4 <__assert_fail@plt+0x6850>
   18c58:	str	r4, [sl]
   18c5c:	b	188d4 <__assert_fail@plt+0x6850>
   18c60:	add	r3, sp, #60	; 0x3c
   18c64:	str	r3, [sp, #24]
   18c68:	b	18914 <__assert_fail@plt+0x6890>
   18c6c:	ldr	r0, [r3]
   18c70:	ldr	r3, [sp, #40]	; 0x28
   18c74:	sub	r3, r3, #1
   18c78:	str	r3, [sp, #40]	; 0x28
   18c7c:	bl	16968 <__assert_fail@plt+0x48e4>
   18c80:	b	18b80 <__assert_fail@plt+0x6afc>
   18c84:	sub	r3, r3, #1
   18c88:	ldr	r0, [r4]
   18c8c:	str	r3, [sp, #40]	; 0x28
   18c90:	bl	16968 <__assert_fail@plt+0x48e4>
   18c94:	b	18770 <__assert_fail@plt+0x66ec>
   18c98:	mov	r7, r3
   18c9c:	b	18adc <__assert_fail@plt+0x6a58>
   18ca0:	ldr	sl, [sp, #24]
   18ca4:	str	r2, [sp, #12]
   18ca8:	b	18848 <__assert_fail@plt+0x67c4>
   18cac:	bl	11c7c <__stack_chk_fail@plt>
   18cb0:	bl	2066c <__assert_fail@plt+0xe5e8>
   18cb4:	andeq	r5, r3, r0, lsl #30
   18cb8:	andeq	r6, r3, r8, ror #5
   18cbc:	andeq	r6, r3, ip, ror #3
   18cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cc4:	sub	sp, sp, #20
   18cc8:	ldr	r6, [pc, #156]	; 18d6c <__assert_fail@plt+0x6ce8>
   18ccc:	mov	fp, r2
   18cd0:	mov	r8, r1
   18cd4:	ldr	ip, [r6]
   18cd8:	mov	r1, r2
   18cdc:	add	r2, sp, #8
   18ce0:	mov	r9, r3
   18ce4:	str	ip, [sp, #12]
   18ce8:	mov	r7, r0
   18cec:	ldr	sl, [sp, #56]	; 0x38
   18cf0:	bl	176ac <__assert_fail@plt+0x5628>
   18cf4:	cmp	fp, r0
   18cf8:	movhi	r4, #1
   18cfc:	movls	r4, #0
   18d00:	cmp	r0, #1
   18d04:	movhi	r4, #0
   18d08:	cmp	r4, #0
   18d0c:	mov	r5, r0
   18d10:	bne	18d50 <__assert_fail@plt+0x6ccc>
   18d14:	ldr	r2, [sp, #8]
   18d18:	mov	r3, r9
   18d1c:	mov	r0, r7
   18d20:	str	r2, [sp, #4]
   18d24:	str	sl, [sp]
   18d28:	mov	r2, r5
   18d2c:	mov	r1, r8
   18d30:	bl	185c8 <__assert_fail@plt+0x6544>
   18d34:	ldr	r2, [sp, #12]
   18d38:	ldr	r3, [r6]
   18d3c:	mov	r0, r5
   18d40:	cmp	r2, r3
   18d44:	bne	18d68 <__assert_fail@plt+0x6ce4>
   18d48:	add	sp, sp, #20
   18d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d50:	ldr	r1, [pc, #24]	; 18d70 <__assert_fail@plt+0x6cec>
   18d54:	mov	r2, #5
   18d58:	mov	r0, #0
   18d5c:	bl	11c70 <dcgettext@plt>
   18d60:	ldr	r1, [r7, r5, lsl #3]
   18d64:	bl	1520c <__assert_fail@plt+0x3188>
   18d68:	bl	11c7c <__stack_chk_fail@plt>
   18d6c:	andeq	r5, r3, r0, lsl #30
   18d70:	muleq	r2, ip, r1
   18d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d78:	mov	fp, r2
   18d7c:	ldr	sl, [pc, #1156]	; 19208 <__assert_fail@plt+0x7184>
   18d80:	ldr	ip, [pc, #1156]	; 1920c <__assert_fail@plt+0x7188>
   18d84:	sub	sp, sp, #260	; 0x104
   18d88:	ldr	r2, [sl, #104]	; 0x68
   18d8c:	ldr	ip, [ip]
   18d90:	cmp	r2, fp
   18d94:	mov	r4, r0
   18d98:	mov	r5, r1
   18d9c:	str	r3, [sp, #20]
   18da0:	str	ip, [sp, #252]	; 0xfc
   18da4:	bcs	18e80 <__assert_fail@plt+0x6dfc>
   18da8:	cmp	fp, r2
   18dac:	movcs	r7, #0
   18db0:	addcs	r3, r4, #4
   18db4:	movcs	r6, r7
   18db8:	strcs	r3, [sp, #12]
   18dbc:	bcc	1918c <__assert_fail@plt+0x7108>
   18dc0:	mov	r1, #0
   18dc4:	add	r0, sp, #144	; 0x90
   18dc8:	bl	17908 <__assert_fail@plt+0x5884>
   18dcc:	ldr	r2, [sl, #104]	; 0x68
   18dd0:	ldr	r3, [sp, #144]	; 0x90
   18dd4:	cmp	r2, r5
   18dd8:	movcs	r1, r5
   18ddc:	movcc	r1, r2
   18de0:	add	r9, r0, #9
   18de4:	mov	r8, r0
   18de8:	str	r9, [sp]
   18dec:	add	r0, r4, r6, lsl #3
   18df0:	bl	18cc0 <__assert_fail@plt+0x6c3c>
   18df4:	ldr	r2, [sl, #104]	; 0x68
   18df8:	ldr	r1, [sp, #12]
   18dfc:	str	r9, [r4, r7, lsl #3]
   18e00:	str	r8, [r1, r7, lsl #3]
   18e04:	add	r7, r7, #1
   18e08:	add	r6, r6, r0
   18e0c:	cmp	r0, r5
   18e10:	sub	r3, fp, r6
   18e14:	subls	r5, r5, r0
   18e18:	subhi	r5, r5, r5
   18e1c:	cmp	r3, r2
   18e20:	bcs	18dc0 <__assert_fail@plt+0x6d3c>
   18e24:	mov	r1, r2
   18e28:	mov	r0, r7
   18e2c:	str	r3, [sp, #16]
   18e30:	str	r2, [sp, #12]
   18e34:	bl	22620 <_obstack_memory_used@@Base+0x600>
   18e38:	ldr	r2, [sp, #12]
   18e3c:	ldr	r3, [sp, #16]
   18e40:	add	r8, r4, r7, lsl #3
   18e44:	add	r9, r4, r6, lsl #3
   18e48:	sub	r0, r2, r1
   18e4c:	cmp	r3, r0
   18e50:	bhi	190e8 <__assert_fail@plt+0x7064>
   18e54:	sub	r2, fp, r6
   18e58:	mov	r1, r9
   18e5c:	lsl	r2, r2, #3
   18e60:	mov	r0, r8
   18e64:	bl	11ba4 <memmove@plt>
   18e68:	sub	r6, r7, r6
   18e6c:	ldr	r2, [sl, #104]	; 0x68
   18e70:	add	fp, fp, r6
   18e74:	cmp	r2, fp
   18e78:	add	r5, r5, r7
   18e7c:	bcc	18da8 <__assert_fail@plt+0x6d24>
   18e80:	cmp	r5, fp
   18e84:	addcs	r3, sp, #40	; 0x28
   18e88:	strcs	r3, [sp, #12]
   18e8c:	bcs	18fac <__assert_fail@plt+0x6f28>
   18e90:	add	r7, r4, r5, lsl #3
   18e94:	mov	r6, #0
   18e98:	add	r3, sp, #40	; 0x28
   18e9c:	mov	r8, r5
   18ea0:	strd	r4, [sp, #24]
   18ea4:	add	r7, r7, #4
   18ea8:	mov	r9, r6
   18eac:	str	r3, [sp, #12]
   18eb0:	ldr	r5, [sp, #20]
   18eb4:	b	18ef8 <__assert_fail@plt+0x6e74>
   18eb8:	mov	r1, sl
   18ebc:	add	r2, sp, #144	; 0x90
   18ec0:	mov	r0, #3
   18ec4:	bl	11d0c <__fxstat64@plt>
   18ec8:	cmp	r0, #0
   18ecc:	bne	18ee4 <__assert_fail@plt+0x6e60>
   18ed0:	ldrd	r0, [sp, #240]	; 0xf0
   18ed4:	ldrd	r2, [sp, #136]	; 0x88
   18ed8:	cmp	r1, r3
   18edc:	cmpeq	r0, r2
   18ee0:	beq	18f6c <__assert_fail@plt+0x6ee8>
   18ee4:	mov	r9, #1
   18ee8:	add	r8, r8, #1
   18eec:	cmp	r8, fp
   18ef0:	add	r7, r7, #8
   18ef4:	beq	18fa8 <__assert_fail@plt+0x6f24>
   18ef8:	ldr	r4, [r7, #-4]
   18efc:	ldr	r1, [pc, #780]	; 19210 <__assert_fail@plt+0x718c>
   18f00:	mov	r0, r4
   18f04:	bl	11b50 <strcmp@plt>
   18f08:	sub	r3, r7, #4
   18f0c:	cmp	r5, #0
   18f10:	str	r3, [sp, #16]
   18f14:	mov	sl, r0
   18f18:	beq	18f40 <__assert_fail@plt+0x6ebc>
   18f1c:	mov	r1, r4
   18f20:	mov	r0, r5
   18f24:	bl	11b50 <strcmp@plt>
   18f28:	adds	r3, sl, #0
   18f2c:	movne	r3, #1
   18f30:	cmp	r0, #0
   18f34:	movne	r3, #0
   18f38:	cmp	r3, #0
   18f3c:	bne	18f84 <__assert_fail@plt+0x6f00>
   18f40:	cmp	r9, #0
   18f44:	beq	1907c <__assert_fail@plt+0x6ff8>
   18f48:	cmp	sl, #0
   18f4c:	beq	18eb8 <__assert_fail@plt+0x6e34>
   18f50:	add	r2, sp, #144	; 0x90
   18f54:	ldr	r1, [r7, #-4]
   18f58:	mov	r0, #3
   18f5c:	bl	1203c <__xstat64@plt>
   18f60:	cmp	r0, #0
   18f64:	beq	18ed0 <__assert_fail@plt+0x6e4c>
   18f68:	b	18ee4 <__assert_fail@plt+0x6e60>
   18f6c:	ldrd	r0, [sp, #144]	; 0x90
   18f70:	ldrd	r2, [sp, #40]	; 0x28
   18f74:	mov	r9, #1
   18f78:	cmp	r1, r3
   18f7c:	cmpeq	r0, r2
   18f80:	bne	18ee8 <__assert_fail@plt+0x6e64>
   18f84:	cmp	r6, #0
   18f88:	addne	sl, r6, #9
   18f8c:	beq	1915c <__assert_fail@plt+0x70d8>
   18f90:	add	r8, r8, #1
   18f94:	cmp	r8, fp
   18f98:	str	sl, [r7, #-4]
   18f9c:	str	r6, [r7]
   18fa0:	add	r7, r7, #8
   18fa4:	bne	18ef8 <__assert_fail@plt+0x6e74>
   18fa8:	ldrd	r4, [sp, #24]
   18fac:	mov	r8, fp
   18fb0:	add	r3, r4, #8
   18fb4:	str	r3, [sp, #16]
   18fb8:	ldr	r2, [sp, #12]
   18fbc:	mov	r1, r8
   18fc0:	mov	r0, r4
   18fc4:	bl	176ac <__assert_fail@plt+0x5628>
   18fc8:	cmp	r8, r0
   18fcc:	mov	sl, r0
   18fd0:	beq	19098 <__assert_fail@plt+0x7014>
   18fd4:	cmp	r0, #2
   18fd8:	bls	191ec <__assert_fail@plt+0x7168>
   18fdc:	sub	r9, sl, #-536870911	; 0xe0000001
   18fe0:	add	r9, r4, r9, lsl #3
   18fe4:	ldr	r3, [sp, #40]	; 0x28
   18fe8:	sub	sl, sl, #1
   18fec:	mov	r7, r9
   18ff0:	ldr	r1, [r4, sl, lsl #3]
   18ff4:	ldr	r0, [r3, sl, lsl #2]
   18ff8:	bl	16ec0 <__assert_fail@plt+0x4e3c>
   18ffc:	cmp	sl, #2
   19000:	movls	r1, #0
   19004:	movhi	r1, #1
   19008:	add	r0, sp, #144	; 0x90
   1900c:	bl	17908 <__assert_fail@plt+0x5884>
   19010:	sub	r9, r9, #8
   19014:	cmp	r0, #0
   19018:	beq	18fe4 <__assert_fail@plt+0x6f60>
   1901c:	cmp	r5, sl
   19020:	ldr	r3, [sp, #40]	; 0x28
   19024:	movcc	r9, r5
   19028:	movcs	r9, sl
   1902c:	add	fp, r0, #9
   19030:	sub	r8, r8, sl
   19034:	mov	r1, r9
   19038:	mov	r6, r0
   1903c:	mov	r2, sl
   19040:	str	r3, [sp, #4]
   19044:	mov	r0, r4
   19048:	ldr	r3, [sp, #144]	; 0x90
   1904c:	str	fp, [sp]
   19050:	bl	185c8 <__assert_fail@plt+0x6544>
   19054:	rsb	r9, r9, #1
   19058:	lsl	r2, r8, #3
   1905c:	str	fp, [r4]
   19060:	str	r6, [r4, #4]
   19064:	mov	r1, r7
   19068:	ldr	r0, [sp, #16]
   1906c:	bl	11ba4 <memmove@plt>
   19070:	add	r8, r8, #1
   19074:	add	r5, r5, r9
   19078:	b	18fb8 <__assert_fail@plt+0x6f34>
   1907c:	ldr	r2, [sp, #12]
   19080:	mov	r1, #1
   19084:	mov	r0, #3
   19088:	bl	11d0c <__fxstat64@plt>
   1908c:	cmp	r0, #0
   19090:	beq	18f48 <__assert_fail@plt+0x6ec4>
   19094:	b	18fa8 <__assert_fail@plt+0x6f24>
   19098:	ldr	r1, [pc, #372]	; 19214 <__assert_fail@plt+0x7190>
   1909c:	ldr	r0, [sp, #20]
   190a0:	bl	16d78 <__assert_fail@plt+0x4cf4>
   190a4:	subs	r6, r0, #0
   190a8:	bne	191ac <__assert_fail@plt+0x7128>
   190ac:	bl	11ea4 <__errno_location@plt>
   190b0:	cmp	r8, #2
   190b4:	movhi	r3, #0
   190b8:	movls	r3, #1
   190bc:	ldr	r1, [r0]
   190c0:	cmp	r1, #24
   190c4:	orrne	r3, r3, #1
   190c8:	cmp	r3, #0
   190cc:	beq	18fdc <__assert_fail@plt+0x6f58>
   190d0:	ldr	r1, [pc, #320]	; 19218 <__assert_fail@plt+0x7194>
   190d4:	mov	r0, r6
   190d8:	mov	r2, #5
   190dc:	bl	11c70 <dcgettext@plt>
   190e0:	ldr	r1, [sp, #20]
   190e4:	bl	1520c <__assert_fail@plt+0x3188>
   190e8:	add	r3, r3, r1
   190ec:	add	r3, r3, #1
   190f0:	mov	r1, #0
   190f4:	sub	r2, r3, r2
   190f8:	add	r0, sp, #144	; 0x90
   190fc:	str	r2, [sp, #12]
   19100:	bl	17908 <__assert_fail@plt+0x5884>
   19104:	ldr	r2, [sp, #12]
   19108:	add	r7, r7, #1
   1910c:	cmp	r2, r5
   19110:	movcs	r1, r5
   19114:	movcc	r1, r2
   19118:	add	r3, r0, #9
   1911c:	str	r0, [sp, #12]
   19120:	str	r3, [sp]
   19124:	mov	r0, r9
   19128:	mov	r9, r3
   1912c:	ldr	r3, [sp, #144]	; 0x90
   19130:	bl	18cc0 <__assert_fail@plt+0x6c3c>
   19134:	ldr	r3, [sp, #12]
   19138:	str	r9, [r8]
   1913c:	str	r3, [r8, #4]
   19140:	add	r8, r4, r7, lsl #3
   19144:	add	r6, r6, r0
   19148:	cmp	r0, r5
   1914c:	subls	r5, r5, r0
   19150:	subhi	r5, r5, r5
   19154:	add	r9, r4, r6, lsl #3
   19158:	b	18e54 <__assert_fail@plt+0x6dd0>
   1915c:	mov	r1, r6
   19160:	add	r0, sp, #36	; 0x24
   19164:	bl	17908 <__assert_fail@plt+0x5884>
   19168:	ldr	r3, [sp, #36]	; 0x24
   1916c:	mov	r2, #1
   19170:	mov	r1, #0
   19174:	add	sl, r0, #9
   19178:	mov	r6, r0
   1917c:	str	sl, [sp]
   19180:	sub	r0, r7, #4
   19184:	bl	18cc0 <__assert_fail@plt+0x6c3c>
   19188:	b	18f90 <__assert_fail@plt+0x6f0c>
   1918c:	mov	r1, #0
   19190:	mov	r7, r1
   19194:	mov	r6, r1
   19198:	mov	r0, r2
   1919c:	mov	r8, r4
   191a0:	mov	r9, r4
   191a4:	mov	r3, fp
   191a8:	b	18e4c <__assert_fail@plt+0x6dc8>
   191ac:	ldr	r3, [sp, #20]
   191b0:	ldr	ip, [sp, #40]	; 0x28
   191b4:	str	r3, [sp]
   191b8:	mov	r2, r8
   191bc:	mov	r3, r6
   191c0:	mov	r1, r5
   191c4:	mov	r0, r4
   191c8:	str	ip, [sp, #4]
   191cc:	bl	185c8 <__assert_fail@plt+0x6544>
   191d0:	ldr	r3, [pc, #52]	; 1920c <__assert_fail@plt+0x7188>
   191d4:	ldr	r2, [sp, #252]	; 0xfc
   191d8:	ldr	r3, [r3]
   191dc:	cmp	r2, r3
   191e0:	bne	19204 <__assert_fail@plt+0x7180>
   191e4:	add	sp, sp, #260	; 0x104
   191e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191ec:	ldr	r1, [pc, #36]	; 19218 <__assert_fail@plt+0x7194>
   191f0:	mov	r2, #5
   191f4:	mov	r0, #0
   191f8:	bl	11c70 <dcgettext@plt>
   191fc:	ldr	r1, [r4, sl, lsl #3]
   19200:	bl	1520c <__assert_fail@plt+0x3188>
   19204:	bl	11c7c <__stack_chk_fail@plt>
   19208:	andeq	r6, r3, ip, ror #3
   1920c:	andeq	r5, r3, r0, lsl #30
   19210:	andeq	r3, r2, r8, asr #2
   19214:	andeq	r3, r2, ip, lsl #5
   19218:	muleq	r2, ip, r1
   1921c:	ldr	r3, [pc, #1092]	; 19668 <__assert_fail@plt+0x75e4>
   19220:	push	{r7, lr}
   19224:	sub	sp, sp, #64	; 0x40
   19228:	ldr	r3, [r3]
   1922c:	subs	r4, r0, #0
   19230:	str	r3, [sp, #60]	; 0x3c
   19234:	beq	19270 <__assert_fail@plt+0x71ec>
   19238:	ldr	r3, [pc, #1068]	; 1966c <__assert_fail@plt+0x75e8>
   1923c:	mov	r2, #5
   19240:	ldr	r1, [pc, #1064]	; 19670 <__assert_fail@plt+0x75ec>
   19244:	mov	r0, #0
   19248:	ldr	r5, [r3]
   1924c:	bl	11c70 <dcgettext@plt>
   19250:	ldr	r3, [pc, #1052]	; 19674 <__assert_fail@plt+0x75f0>
   19254:	mov	r1, #1
   19258:	ldr	r3, [r3]
   1925c:	mov	r2, r0
   19260:	mov	r0, r5
   19264:	bl	11f10 <__fprintf_chk@plt>
   19268:	mov	r0, r4
   1926c:	bl	11e68 <exit@plt>
   19270:	mov	r2, #5
   19274:	ldr	r1, [pc, #1020]	; 19678 <__assert_fail@plt+0x75f4>
   19278:	bl	11c70 <dcgettext@plt>
   1927c:	ldr	r3, [pc, #1008]	; 19674 <__assert_fail@plt+0x75f0>
   19280:	ldr	r5, [pc, #1012]	; 1967c <__assert_fail@plt+0x75f8>
   19284:	ldr	r3, [r3]
   19288:	mov	r2, r3
   1928c:	mov	r1, r0
   19290:	mov	r0, #1
   19294:	bl	11eec <__printf_chk@plt>
   19298:	mov	r2, #5
   1929c:	ldr	r1, [pc, #988]	; 19680 <__assert_fail@plt+0x75fc>
   192a0:	mov	r0, r4
   192a4:	bl	11c70 <dcgettext@plt>
   192a8:	ldr	r1, [r5]
   192ac:	bl	11b38 <fputs_unlocked@plt>
   192b0:	mov	r2, #5
   192b4:	ldr	r1, [pc, #968]	; 19684 <__assert_fail@plt+0x7600>
   192b8:	mov	r0, r4
   192bc:	bl	11c70 <dcgettext@plt>
   192c0:	ldr	r1, [r5]
   192c4:	bl	11b38 <fputs_unlocked@plt>
   192c8:	mov	r2, #5
   192cc:	ldr	r1, [pc, #948]	; 19688 <__assert_fail@plt+0x7604>
   192d0:	mov	r0, r4
   192d4:	bl	11c70 <dcgettext@plt>
   192d8:	ldr	r1, [r5]
   192dc:	bl	11b38 <fputs_unlocked@plt>
   192e0:	mov	r2, #5
   192e4:	ldr	r1, [pc, #928]	; 1968c <__assert_fail@plt+0x7608>
   192e8:	mov	r0, r4
   192ec:	bl	11c70 <dcgettext@plt>
   192f0:	ldr	r1, [r5]
   192f4:	bl	11b38 <fputs_unlocked@plt>
   192f8:	mov	r2, #5
   192fc:	ldr	r1, [pc, #908]	; 19690 <__assert_fail@plt+0x760c>
   19300:	mov	r0, r4
   19304:	bl	11c70 <dcgettext@plt>
   19308:	ldr	r1, [r5]
   1930c:	bl	11b38 <fputs_unlocked@plt>
   19310:	mov	r2, #5
   19314:	ldr	r1, [pc, #888]	; 19694 <__assert_fail@plt+0x7610>
   19318:	mov	r0, r4
   1931c:	bl	11c70 <dcgettext@plt>
   19320:	ldr	r1, [r5]
   19324:	bl	11b38 <fputs_unlocked@plt>
   19328:	mov	r2, #5
   1932c:	ldr	r1, [pc, #868]	; 19698 <__assert_fail@plt+0x7614>
   19330:	mov	r0, r4
   19334:	bl	11c70 <dcgettext@plt>
   19338:	ldr	r1, [r5]
   1933c:	bl	11b38 <fputs_unlocked@plt>
   19340:	mov	r2, #5
   19344:	ldr	r1, [pc, #848]	; 1969c <__assert_fail@plt+0x7618>
   19348:	mov	r0, r4
   1934c:	bl	11c70 <dcgettext@plt>
   19350:	ldr	r1, [r5]
   19354:	bl	11b38 <fputs_unlocked@plt>
   19358:	mov	r2, #5
   1935c:	ldr	r1, [pc, #828]	; 196a0 <__assert_fail@plt+0x761c>
   19360:	mov	r0, r4
   19364:	bl	11c70 <dcgettext@plt>
   19368:	ldr	r1, [r5]
   1936c:	bl	11b38 <fputs_unlocked@plt>
   19370:	mov	r2, #5
   19374:	ldr	r1, [pc, #808]	; 196a4 <__assert_fail@plt+0x7620>
   19378:	mov	r0, r4
   1937c:	bl	11c70 <dcgettext@plt>
   19380:	ldr	r1, [r5]
   19384:	bl	11b38 <fputs_unlocked@plt>
   19388:	mov	r2, #5
   1938c:	ldr	r1, [pc, #788]	; 196a8 <__assert_fail@plt+0x7624>
   19390:	mov	r0, r4
   19394:	bl	11c70 <dcgettext@plt>
   19398:	ldr	r1, [r5]
   1939c:	bl	11b38 <fputs_unlocked@plt>
   193a0:	mov	r2, #5
   193a4:	ldr	r1, [pc, #768]	; 196ac <__assert_fail@plt+0x7628>
   193a8:	mov	r0, r4
   193ac:	bl	11c70 <dcgettext@plt>
   193b0:	ldr	r1, [r5]
   193b4:	bl	11b38 <fputs_unlocked@plt>
   193b8:	mov	r2, #5
   193bc:	ldr	r1, [pc, #748]	; 196b0 <__assert_fail@plt+0x762c>
   193c0:	mov	r0, r4
   193c4:	bl	11c70 <dcgettext@plt>
   193c8:	ldr	r1, [r5]
   193cc:	bl	11b38 <fputs_unlocked@plt>
   193d0:	mov	r2, #5
   193d4:	ldr	r1, [pc, #728]	; 196b4 <__assert_fail@plt+0x7630>
   193d8:	mov	r0, r4
   193dc:	bl	11c70 <dcgettext@plt>
   193e0:	ldr	r1, [r5]
   193e4:	bl	11b38 <fputs_unlocked@plt>
   193e8:	mov	r2, #5
   193ec:	ldr	r1, [pc, #708]	; 196b8 <__assert_fail@plt+0x7634>
   193f0:	mov	r0, r4
   193f4:	bl	11c70 <dcgettext@plt>
   193f8:	ldr	r1, [r5]
   193fc:	bl	11b38 <fputs_unlocked@plt>
   19400:	mov	r2, #5
   19404:	ldr	r1, [pc, #688]	; 196bc <__assert_fail@plt+0x7638>
   19408:	mov	r0, r4
   1940c:	bl	11c70 <dcgettext@plt>
   19410:	ldr	r2, [pc, #680]	; 196c0 <__assert_fail@plt+0x763c>
   19414:	mov	r1, r0
   19418:	mov	r0, #1
   1941c:	bl	11eec <__printf_chk@plt>
   19420:	mov	r2, #5
   19424:	ldr	r1, [pc, #664]	; 196c4 <__assert_fail@plt+0x7640>
   19428:	mov	r0, r4
   1942c:	bl	11c70 <dcgettext@plt>
   19430:	ldr	r1, [r5]
   19434:	bl	11b38 <fputs_unlocked@plt>
   19438:	mov	r2, #5
   1943c:	ldr	r1, [pc, #644]	; 196c8 <__assert_fail@plt+0x7644>
   19440:	mov	r0, r4
   19444:	bl	11c70 <dcgettext@plt>
   19448:	ldr	r1, [r5]
   1944c:	bl	11b38 <fputs_unlocked@plt>
   19450:	mov	r2, #5
   19454:	ldr	r1, [pc, #624]	; 196cc <__assert_fail@plt+0x7648>
   19458:	mov	r0, r4
   1945c:	bl	11c70 <dcgettext@plt>
   19460:	ldr	r1, [r5]
   19464:	bl	11b38 <fputs_unlocked@plt>
   19468:	mov	r2, #5
   1946c:	ldr	r1, [pc, #604]	; 196d0 <__assert_fail@plt+0x764c>
   19470:	mov	r0, r4
   19474:	bl	11c70 <dcgettext@plt>
   19478:	ldr	r1, [r5]
   1947c:	bl	11b38 <fputs_unlocked@plt>
   19480:	mov	r2, #5
   19484:	ldr	r1, [pc, #584]	; 196d4 <__assert_fail@plt+0x7650>
   19488:	mov	r0, r4
   1948c:	bl	11c70 <dcgettext@plt>
   19490:	ldr	r1, [r5]
   19494:	bl	11b38 <fputs_unlocked@plt>
   19498:	ldr	lr, [pc, #568]	; 196d8 <__assert_fail@plt+0x7654>
   1949c:	add	ip, sp, #4
   194a0:	ldm	lr!, {r0, r1, r2, r3}
   194a4:	stmia	ip!, {r0, r1, r2, r3}
   194a8:	ldm	lr!, {r0, r1, r2, r3}
   194ac:	ldr	r6, [sp, #4]
   194b0:	stmia	ip!, {r0, r1, r2, r3}
   194b4:	cmp	r6, #0
   194b8:	ldm	lr!, {r0, r1, r2, r3}
   194bc:	addeq	r5, sp, #4
   194c0:	stmia	ip!, {r0, r1, r2, r3}
   194c4:	ldm	lr, {r0, r1}
   194c8:	stm	ip, {r0, r1}
   194cc:	beq	194fc <__assert_fail@plt+0x7478>
   194d0:	ldr	r7, [pc, #516]	; 196dc <__assert_fail@plt+0x7658>
   194d4:	add	r5, sp, #4
   194d8:	b	194e8 <__assert_fail@plt+0x7464>
   194dc:	ldr	r6, [r5, #8]!
   194e0:	cmp	r6, #0
   194e4:	beq	194fc <__assert_fail@plt+0x7478>
   194e8:	mov	r1, r6
   194ec:	mov	r0, r7
   194f0:	bl	11b50 <strcmp@plt>
   194f4:	cmp	r0, #0
   194f8:	bne	194dc <__assert_fail@plt+0x7458>
   194fc:	ldr	r5, [r5, #4]
   19500:	mov	r2, #5
   19504:	cmp	r5, #0
   19508:	ldr	r1, [pc, #464]	; 196e0 <__assert_fail@plt+0x765c>
   1950c:	beq	195b4 <__assert_fail@plt+0x7530>
   19510:	mov	r0, #0
   19514:	bl	11c70 <dcgettext@plt>
   19518:	ldr	r3, [pc, #452]	; 196e4 <__assert_fail@plt+0x7660>
   1951c:	ldr	r2, [pc, #452]	; 196e8 <__assert_fail@plt+0x7664>
   19520:	mov	r1, r0
   19524:	mov	r0, #1
   19528:	bl	11eec <__printf_chk@plt>
   1952c:	mov	r1, #0
   19530:	mov	r0, #5
   19534:	bl	11f64 <setlocale@plt>
   19538:	cmp	r0, #0
   1953c:	ldreq	r6, [pc, #408]	; 196dc <__assert_fail@plt+0x7658>
   19540:	beq	1955c <__assert_fail@plt+0x74d8>
   19544:	mov	r2, #3
   19548:	ldr	r1, [pc, #412]	; 196ec <__assert_fail@plt+0x7668>
   1954c:	bl	12048 <strncmp@plt>
   19550:	ldr	r6, [pc, #388]	; 196dc <__assert_fail@plt+0x7658>
   19554:	cmp	r0, #0
   19558:	bne	19644 <__assert_fail@plt+0x75c0>
   1955c:	mov	r2, #5
   19560:	ldr	r1, [pc, #392]	; 196f0 <__assert_fail@plt+0x766c>
   19564:	mov	r0, #0
   19568:	bl	11c70 <dcgettext@plt>
   1956c:	ldr	r3, [pc, #360]	; 196dc <__assert_fail@plt+0x7658>
   19570:	ldr	r2, [pc, #364]	; 196e4 <__assert_fail@plt+0x7660>
   19574:	mov	r1, r0
   19578:	mov	r0, #1
   1957c:	bl	11eec <__printf_chk@plt>
   19580:	mov	r2, #5
   19584:	ldr	r1, [pc, #360]	; 196f4 <__assert_fail@plt+0x7670>
   19588:	mov	r0, #0
   1958c:	bl	11c70 <dcgettext@plt>
   19590:	ldr	r2, [pc, #352]	; 196f8 <__assert_fail@plt+0x7674>
   19594:	cmp	r5, r6
   19598:	ldr	r3, [pc, #348]	; 196fc <__assert_fail@plt+0x7678>
   1959c:	movne	r3, r2
   195a0:	mov	r1, r0
   195a4:	mov	r2, r5
   195a8:	mov	r0, #1
   195ac:	bl	11eec <__printf_chk@plt>
   195b0:	b	19268 <__assert_fail@plt+0x71e4>
   195b4:	mov	r0, r5
   195b8:	bl	11c70 <dcgettext@plt>
   195bc:	ldr	r3, [pc, #288]	; 196e4 <__assert_fail@plt+0x7660>
   195c0:	ldr	r2, [pc, #288]	; 196e8 <__assert_fail@plt+0x7664>
   195c4:	mov	r1, r0
   195c8:	mov	r0, #1
   195cc:	bl	11eec <__printf_chk@plt>
   195d0:	mov	r1, r5
   195d4:	mov	r0, #5
   195d8:	bl	11f64 <setlocale@plt>
   195dc:	cmp	r0, #0
   195e0:	beq	195f8 <__assert_fail@plt+0x7574>
   195e4:	mov	r2, #3
   195e8:	ldr	r1, [pc, #252]	; 196ec <__assert_fail@plt+0x7668>
   195ec:	bl	12048 <strncmp@plt>
   195f0:	cmp	r0, #0
   195f4:	bne	1963c <__assert_fail@plt+0x75b8>
   195f8:	mov	r2, #5
   195fc:	ldr	r1, [pc, #236]	; 196f0 <__assert_fail@plt+0x766c>
   19600:	mov	r0, #0
   19604:	bl	11c70 <dcgettext@plt>
   19608:	ldr	r3, [pc, #204]	; 196dc <__assert_fail@plt+0x7658>
   1960c:	ldr	r2, [pc, #208]	; 196e4 <__assert_fail@plt+0x7660>
   19610:	mov	r5, r3
   19614:	mov	r1, r0
   19618:	mov	r0, #1
   1961c:	bl	11eec <__printf_chk@plt>
   19620:	ldr	r1, [pc, #204]	; 196f4 <__assert_fail@plt+0x7670>
   19624:	mov	r2, #5
   19628:	mov	r0, #0
   1962c:	bl	11c70 <dcgettext@plt>
   19630:	ldr	r3, [pc, #196]	; 196fc <__assert_fail@plt+0x7678>
   19634:	mov	r1, r0
   19638:	b	195a4 <__assert_fail@plt+0x7520>
   1963c:	ldr	r6, [pc, #152]	; 196dc <__assert_fail@plt+0x7658>
   19640:	mov	r5, r6
   19644:	mov	r2, #5
   19648:	ldr	r1, [pc, #176]	; 19700 <__assert_fail@plt+0x767c>
   1964c:	mov	r0, #0
   19650:	bl	11c70 <dcgettext@plt>
   19654:	ldr	r2, [pc, #128]	; 196dc <__assert_fail@plt+0x7658>
   19658:	mov	r1, r0
   1965c:	mov	r0, #1
   19660:	bl	11eec <__printf_chk@plt>
   19664:	b	1955c <__assert_fail@plt+0x74d8>
   19668:	andeq	r5, r3, r0, lsl #30
   1966c:	ldrdeq	r6, [r3], -r0
   19670:	andeq	r3, r2, r8, asr #5
   19674:	andeq	r6, r3, r4, ror #16
   19678:	strdeq	r3, [r2], -r0
   1967c:	ldrdeq	r6, [r3], -ip
   19680:	andeq	r3, r2, r8, lsr r3
   19684:	andeq	r3, r2, r8, ror r3
   19688:			; <UNDEFINED> instruction: 0x000233b0
   1968c:	strdeq	r3, [r2], -ip
   19690:	andeq	r3, r2, r0, lsl r4
   19694:	ldrdeq	r3, [r2], -ip
   19698:			; <UNDEFINED> instruction: 0x000235b0
   1969c:	strdeq	r3, [r2], -ip
   196a0:	andeq	r3, r2, r0, lsl r7
   196a4:	andeq	r3, r2, r8, lsr #16
   196a8:	andeq	r3, r2, ip, lsr r8
   196ac:			; <UNDEFINED> instruction: 0x000238b4
   196b0:	andeq	r3, r2, ip, asr #19
   196b4:	andeq	r3, r2, r8, lsr #22
   196b8:			; <UNDEFINED> instruction: 0x00023bb8
   196bc:	muleq	r2, r0, ip
   196c0:	andeq	r3, r2, r8, asr lr
   196c4:	andeq	r3, r2, r0, ror #28
   196c8:	andeq	r3, r2, r0, lsr #29
   196cc:	ldrdeq	r3, [r2], -r0
   196d0:	andeq	r3, r2, r8, lsl #30
   196d4:	andeq	r4, r2, r4, ror #2
   196d8:	andeq	r2, r2, ip, asr #26
   196dc:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   196e0:	andeq	r4, r2, ip, asr #4
   196e4:	andeq	r4, r2, r4, ror #4
   196e8:	andeq	r4, r2, ip, lsl #5
   196ec:	muleq	r2, ip, r2
   196f0:	andeq	r4, r2, r8, ror #5
   196f4:	andeq	r4, r2, r8, lsl #6
   196f8:	andeq	r3, r2, r8, lsr r8
   196fc:	andeq	r4, r2, ip, lsr #17
   19700:	andeq	r4, r2, r0, lsr #5
   19704:	mov	r0, #1
   19708:	b	1921c <__assert_fail@plt+0x7198>
   1970c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19710:	mov	r5, r1
   19714:	sub	sp, sp, #12
   19718:	mov	r4, r2
   1971c:	str	r2, [sp]
   19720:	mov	r7, r3
   19724:	mov	sl, r0
   19728:	bl	11e80 <strlen@plt>
   1972c:	ldr	fp, [r5]
   19730:	cmp	fp, #0
   19734:	beq	197f8 <__assert_fail@plt+0x7774>
   19738:	mov	r6, #0
   1973c:	mov	r8, r0
   19740:	str	r6, [sp, #4]
   19744:	mvn	r9, #0
   19748:	b	19774 <__assert_fail@plt+0x76f0>
   1974c:	bl	11c64 <memcmp@plt>
   19750:	ldr	r3, [sp, #4]
   19754:	cmp	r0, #0
   19758:	movne	r3, #1
   1975c:	str	r3, [sp, #4]
   19760:	ldr	fp, [r5, #4]!
   19764:	add	r6, r6, #1
   19768:	cmp	fp, #0
   1976c:	add	r4, r4, r7
   19770:	beq	197d0 <__assert_fail@plt+0x774c>
   19774:	mov	r2, r8
   19778:	mov	r1, sl
   1977c:	mov	r0, fp
   19780:	bl	12048 <strncmp@plt>
   19784:	cmp	r0, #0
   19788:	mov	r0, fp
   1978c:	bne	19760 <__assert_fail@plt+0x76dc>
   19790:	bl	11e80 <strlen@plt>
   19794:	ldr	r3, [sp]
   19798:	mov	r2, r7
   1979c:	mov	r1, r4
   197a0:	cmp	r0, r8
   197a4:	mla	r0, r7, r9, r3
   197a8:	beq	197e8 <__assert_fail@plt+0x7764>
   197ac:	cmn	r9, #1
   197b0:	moveq	r9, r6
   197b4:	beq	19760 <__assert_fail@plt+0x76dc>
   197b8:	ldr	r3, [sp]
   197bc:	cmp	r3, #0
   197c0:	bne	1974c <__assert_fail@plt+0x76c8>
   197c4:	mov	r3, #1
   197c8:	str	r3, [sp, #4]
   197cc:	b	19760 <__assert_fail@plt+0x76dc>
   197d0:	ldr	r3, [sp, #4]
   197d4:	cmp	r3, #0
   197d8:	mvnne	r9, #1
   197dc:	mov	r0, r9
   197e0:	add	sp, sp, #12
   197e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e8:	mov	r9, r6
   197ec:	mov	r0, r9
   197f0:	add	sp, sp, #12
   197f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197f8:	mvn	r9, #0
   197fc:	b	197dc <__assert_fail@plt+0x7758>
   19800:	cmn	r2, #1
   19804:	push	{r4, r5, r6, lr}
   19808:	mov	r2, #5
   1980c:	sub	sp, sp, #8
   19810:	mov	r5, r1
   19814:	mov	r6, r0
   19818:	ldreq	r1, [pc, #76]	; 1986c <__assert_fail@plt+0x77e8>
   1981c:	ldrne	r1, [pc, #76]	; 19870 <__assert_fail@plt+0x77ec>
   19820:	mov	r0, #0
   19824:	bl	11c70 <dcgettext@plt>
   19828:	mov	r2, r5
   1982c:	mov	r1, #8
   19830:	mov	r4, r0
   19834:	mov	r0, #0
   19838:	bl	1ea4c <__assert_fail@plt+0xc9c8>
   1983c:	mov	r1, r6
   19840:	mov	r5, r0
   19844:	mov	r0, #1
   19848:	bl	1ed98 <__assert_fail@plt+0xcd14>
   1984c:	mov	r1, #0
   19850:	mov	r3, r5
   19854:	mov	r2, r4
   19858:	str	r0, [sp]
   1985c:	mov	r0, r1
   19860:	bl	11db4 <error@plt>
   19864:	add	sp, sp, #8
   19868:	pop	{r4, r5, r6, pc}
   1986c:	andeq	r4, r2, r0, lsl #22
   19870:	andeq	r4, r2, ip, lsl fp
   19874:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19878:	mov	r6, r0
   1987c:	ldr	sl, [pc, #224]	; 19964 <__assert_fail@plt+0x78e0>
   19880:	mov	r4, r1
   19884:	mov	r7, r2
   19888:	ldr	r1, [pc, #216]	; 19968 <__assert_fail@plt+0x78e4>
   1988c:	mov	r2, #5
   19890:	mov	r0, #0
   19894:	bl	11c70 <dcgettext@plt>
   19898:	ldr	r1, [sl]
   1989c:	bl	11b38 <fputs_unlocked@plt>
   198a0:	ldr	fp, [r6]
   198a4:	cmp	fp, #0
   198a8:	movne	r9, #0
   198ac:	movne	r5, r9
   198b0:	bne	198ec <__assert_fail@plt+0x7868>
   198b4:	b	19930 <__assert_fail@plt+0x78ac>
   198b8:	mov	r0, fp
   198bc:	bl	1eda8 <__assert_fail@plt+0xcd24>
   198c0:	ldr	r2, [pc, #164]	; 1996c <__assert_fail@plt+0x78e8>
   198c4:	mov	r1, #1
   198c8:	mov	r9, r4
   198cc:	mov	r3, r0
   198d0:	mov	r0, r8
   198d4:	bl	11f10 <__fprintf_chk@plt>
   198d8:	ldr	fp, [r6, #4]!
   198dc:	add	r5, r5, #1
   198e0:	cmp	fp, #0
   198e4:	add	r4, r4, r7
   198e8:	beq	19930 <__assert_fail@plt+0x78ac>
   198ec:	cmp	r5, #0
   198f0:	mov	r1, r4
   198f4:	mov	r2, r7
   198f8:	mov	r0, r9
   198fc:	ldr	r8, [sl]
   19900:	beq	198b8 <__assert_fail@plt+0x7834>
   19904:	bl	11c64 <memcmp@plt>
   19908:	cmp	r0, #0
   1990c:	bne	198b8 <__assert_fail@plt+0x7834>
   19910:	mov	r0, fp
   19914:	bl	1eda8 <__assert_fail@plt+0xcd24>
   19918:	ldr	r2, [pc, #80]	; 19970 <__assert_fail@plt+0x78ec>
   1991c:	mov	r1, #1
   19920:	mov	r3, r0
   19924:	mov	r0, r8
   19928:	bl	11f10 <__fprintf_chk@plt>
   1992c:	b	198d8 <__assert_fail@plt+0x7854>
   19930:	ldr	r0, [sl]
   19934:	ldr	r3, [r0, #20]
   19938:	ldr	r2, [r0, #24]
   1993c:	cmp	r3, r2
   19940:	bcs	19958 <__assert_fail@plt+0x78d4>
   19944:	add	r1, r3, #1
   19948:	mov	r2, #10
   1994c:	str	r1, [r0, #20]
   19950:	strb	r2, [r3]
   19954:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19958:	mov	r1, #10
   1995c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19960:	b	11f58 <__overflow@plt>
   19964:	ldrdeq	r6, [r3], -r0
   19968:	andeq	r4, r2, ip, lsr fp
   1996c:	andeq	r4, r2, r4, asr fp
   19970:	andeq	r4, r2, ip, asr fp
   19974:	push	{r4, r5, r6, r7, r8, lr}
   19978:	mov	r6, r1
   1997c:	mov	r4, r2
   19980:	mov	r5, r3
   19984:	mov	r7, r0
   19988:	ldr	r3, [sp, #24]
   1998c:	mov	r2, r5
   19990:	mov	r1, r4
   19994:	mov	r0, r6
   19998:	bl	1970c <__assert_fail@plt+0x7688>
   1999c:	cmp	r0, #0
   199a0:	popge	{r4, r5, r6, r7, r8, pc}
   199a4:	mov	r2, r0
   199a8:	mov	r1, r6
   199ac:	mov	r0, r7
   199b0:	bl	19800 <__assert_fail@plt+0x777c>
   199b4:	mov	r0, r4
   199b8:	ldr	r2, [sp, #24]
   199bc:	mov	r1, r5
   199c0:	bl	19874 <__assert_fail@plt+0x77f0>
   199c4:	ldr	r3, [sp, #28]
   199c8:	blx	r3
   199cc:	mvn	r0, #0
   199d0:	pop	{r4, r5, r6, r7, r8, pc}
   199d4:	push	{r4, r5, r6, r7, r8, lr}
   199d8:	ldr	r7, [r1]
   199dc:	cmp	r7, #0
   199e0:	beq	19a20 <__assert_fail@plt+0x799c>
   199e4:	mov	r6, r3
   199e8:	mov	r8, r0
   199ec:	mov	r4, r2
   199f0:	mov	r5, r1
   199f4:	b	19a04 <__assert_fail@plt+0x7980>
   199f8:	ldr	r7, [r5, #4]!
   199fc:	cmp	r7, #0
   19a00:	beq	19a20 <__assert_fail@plt+0x799c>
   19a04:	mov	r1, r4
   19a08:	mov	r2, r6
   19a0c:	mov	r0, r8
   19a10:	bl	11c64 <memcmp@plt>
   19a14:	add	r4, r4, r6
   19a18:	cmp	r0, #0
   19a1c:	bne	199f8 <__assert_fail@plt+0x7974>
   19a20:	mov	r0, r7
   19a24:	pop	{r4, r5, r6, r7, r8, pc}
   19a28:	ldr	r3, [pc, #4]	; 19a34 <__assert_fail@plt+0x79b0>
   19a2c:	str	r0, [r3]
   19a30:	bx	lr
   19a34:	andeq	r6, r3, r8, asr r8
   19a38:	ldr	r3, [pc, #4]	; 19a44 <__assert_fail@plt+0x79c0>
   19a3c:	strb	r0, [r3, #4]
   19a40:	bx	lr
   19a44:	andeq	r6, r3, r8, asr r8
   19a48:	ldr	r3, [pc, #180]	; 19b04 <__assert_fail@plt+0x7a80>
   19a4c:	push	{r4, r5, r6, lr}
   19a50:	sub	sp, sp, #8
   19a54:	ldr	r0, [r3]
   19a58:	bl	22054 <_obstack_memory_used@@Base+0x34>
   19a5c:	cmp	r0, #0
   19a60:	beq	19a88 <__assert_fail@plt+0x7a04>
   19a64:	bl	11ea4 <__errno_location@plt>
   19a68:	ldr	r5, [pc, #152]	; 19b08 <__assert_fail@plt+0x7a84>
   19a6c:	ldrb	r3, [r5, #4]
   19a70:	cmp	r3, #0
   19a74:	mov	r4, r0
   19a78:	beq	19aa4 <__assert_fail@plt+0x7a20>
   19a7c:	ldr	r3, [r0]
   19a80:	cmp	r3, #32
   19a84:	bne	19aa4 <__assert_fail@plt+0x7a20>
   19a88:	ldr	r3, [pc, #124]	; 19b0c <__assert_fail@plt+0x7a88>
   19a8c:	ldr	r0, [r3]
   19a90:	bl	22054 <_obstack_memory_used@@Base+0x34>
   19a94:	cmp	r0, #0
   19a98:	bne	19ae4 <__assert_fail@plt+0x7a60>
   19a9c:	add	sp, sp, #8
   19aa0:	pop	{r4, r5, r6, pc}
   19aa4:	mov	r2, #5
   19aa8:	ldr	r1, [pc, #96]	; 19b10 <__assert_fail@plt+0x7a8c>
   19aac:	mov	r0, #0
   19ab0:	bl	11c70 <dcgettext@plt>
   19ab4:	mov	r6, r0
   19ab8:	ldr	r0, [r5]
   19abc:	cmp	r0, #0
   19ac0:	beq	19af0 <__assert_fail@plt+0x7a6c>
   19ac4:	ldr	r4, [r4]
   19ac8:	bl	1ebc8 <__assert_fail@plt+0xcb44>
   19acc:	mov	r1, r4
   19ad0:	str	r6, [sp]
   19ad4:	ldr	r2, [pc, #56]	; 19b14 <__assert_fail@plt+0x7a90>
   19ad8:	mov	r3, r0
   19adc:	mov	r0, #0
   19ae0:	bl	11db4 <error@plt>
   19ae4:	ldr	r3, [pc, #44]	; 19b18 <__assert_fail@plt+0x7a94>
   19ae8:	ldr	r0, [r3]
   19aec:	bl	11be0 <_exit@plt>
   19af0:	mov	r3, r6
   19af4:	ldr	r1, [r4]
   19af8:	ldr	r2, [pc, #28]	; 19b1c <__assert_fail@plt+0x7a98>
   19afc:	bl	11db4 <error@plt>
   19b00:	b	19ae4 <__assert_fail@plt+0x7a60>
   19b04:	ldrdeq	r6, [r3], -ip
   19b08:	andeq	r6, r3, r8, asr r8
   19b0c:	ldrdeq	r6, [r3], -r0
   19b10:	andeq	r4, r2, r4, ror #22
   19b14:	andeq	r3, r2, r4, asr r0
   19b18:	andeq	r6, r3, r8, ror r2
   19b1c:	andeq	r3, r2, r0, lsr #2
   19b20:	push	{lr}		; (str lr, [sp, #-4]!)
   19b24:	mov	r3, #0
   19b28:	ldr	lr, [pc, #40]	; 19b58 <__assert_fail@plt+0x7ad4>
   19b2c:	ldr	ip, [pc, #40]	; 19b5c <__assert_fail@plt+0x7ad8>
   19b30:	ldr	r1, [pc, #40]	; 19b60 <__assert_fail@plt+0x7adc>
   19b34:	ldr	r2, [pc, #40]	; 19b64 <__assert_fail@plt+0x7ae0>
   19b38:	str	lr, [r0]
   19b3c:	str	ip, [r0, #4]
   19b40:	str	r1, [r0, #8]
   19b44:	str	r2, [r0, #12]
   19b48:	str	r3, [r0, #20]
   19b4c:	str	r3, [r0, #16]
   19b50:	str	r3, [r0, #24]
   19b54:	pop	{pc}		; (ldr pc, [sp], #4)
   19b58:	strbvs	r2, [r5, -r1, lsl #6]
   19b5c:	svc	0x00cdab89
   19b60:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   19b64:	eorsne	r5, r2, r6, ror r4
   19b68:	ldr	r2, [r0]
   19b6c:	mov	r3, r0
   19b70:	str	r2, [r1]
   19b74:	ldr	r2, [r3, #4]
   19b78:	mov	r0, r1
   19b7c:	str	r2, [r1, #4]
   19b80:	ldr	r2, [r3, #8]
   19b84:	str	r2, [r1, #8]
   19b88:	ldr	r3, [r3, #12]
   19b8c:	str	r3, [r1, #12]
   19b90:	bx	lr
   19b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b98:	sub	sp, sp, #20
   19b9c:	ldr	r3, [r2, #16]
   19ba0:	mov	r4, r2
   19ba4:	adds	r3, r3, r1
   19ba8:	str	r2, [sp, #12]
   19bac:	ldr	r2, [r2, #20]
   19bb0:	movcs	ip, #1
   19bb4:	movcc	ip, #0
   19bb8:	add	r2, r2, ip
   19bbc:	str	r3, [r4, #16]
   19bc0:	str	r2, [r4, #20]
   19bc4:	ldr	r3, [r4]
   19bc8:	mov	r2, r4
   19bcc:	bic	r1, r1, #3
   19bd0:	add	lr, r0, r1
   19bd4:	str	r3, [sp, #4]
   19bd8:	ldr	r3, [r2, #12]
   19bdc:	cmp	r0, lr
   19be0:	str	r3, [sp]
   19be4:	ldr	lr, [r4, #4]
   19be8:	ldr	r4, [r4, #8]
   19bec:	bcs	1a4ec <__assert_fail@plt+0x8468>
   19bf0:	sub	r1, r1, #1
   19bf4:	bic	r3, r1, #63	; 0x3f
   19bf8:	add	r2, r0, #128	; 0x80
   19bfc:	add	r9, r0, #64	; 0x40
   19c00:	add	r3, r3, r2
   19c04:	str	r3, [sp, #8]
   19c08:	ldr	r3, [sp, #4]
   19c0c:	ldr	r2, [sp]
   19c10:	add	r3, r3, #-687865856	; 0xd7000000
   19c14:	add	r3, r3, #6946816	; 0x6a0000
   19c18:	ldr	r1, [r9, #-64]	; 0xffffffc0
   19c1c:	eor	r7, r4, r2
   19c20:	add	r3, r3, #41984	; 0xa400
   19c24:	and	r7, r7, lr
   19c28:	add	r3, r3, #120	; 0x78
   19c2c:	add	r3, r3, r1
   19c30:	eor	r7, r7, r2
   19c34:	add	r7, r7, r3
   19c38:	ldr	r5, [pc, #2256]	; 1a510 <__assert_fail@plt+0x848c>
   19c3c:	add	r7, lr, r7, ror #25
   19c40:	ldr	r1, [r9, #-60]	; 0xffffffc4
   19c44:	eor	r6, lr, r4
   19c48:	and	r6, r6, r7
   19c4c:	add	r5, r2, r5
   19c50:	add	r5, r5, r1
   19c54:	eor	r6, r6, r4
   19c58:	add	r6, r6, r5
   19c5c:	ldr	r0, [pc, #2224]	; 1a514 <__assert_fail@plt+0x8490>
   19c60:	add	r6, r7, r6, ror #20
   19c64:	ldr	r1, [r9, #-56]	; 0xffffffc8
   19c68:	eor	ip, r7, lr
   19c6c:	and	ip, ip, r6
   19c70:	add	r0, r4, r0
   19c74:	add	r0, r0, r1
   19c78:	eor	ip, ip, lr
   19c7c:	add	ip, ip, r0
   19c80:	ldr	r2, [pc, #2192]	; 1a518 <__assert_fail@plt+0x8494>
   19c84:	add	ip, r6, ip, ror #15
   19c88:	ldr	r0, [r9, #-52]	; 0xffffffcc
   19c8c:	eor	r1, r7, r6
   19c90:	and	r1, r1, ip
   19c94:	add	r2, lr, r2
   19c98:	add	r2, r2, r0
   19c9c:	eor	r1, r1, r7
   19ca0:	ldr	r0, [r9, #-48]	; 0xffffffd0
   19ca4:	add	r1, r1, r2
   19ca8:	ldr	r3, [pc, #2156]	; 1a51c <__assert_fail@plt+0x8498>
   19cac:	add	r1, ip, r1, ror #10
   19cb0:	eor	r2, r6, ip
   19cb4:	add	r3, r0, r3
   19cb8:	ldr	r0, [r9, #-44]	; 0xffffffd4
   19cbc:	and	r2, r2, r1
   19cc0:	add	r7, r3, r7
   19cc4:	add	r0, r0, #1191182336	; 0x47000000
   19cc8:	eor	r3, r2, r6
   19ccc:	add	r3, r3, r7
   19cd0:	add	r0, r0, #8847360	; 0x870000
   19cd4:	add	r0, r0, #50688	; 0xc600
   19cd8:	add	r3, r1, r3, ror #25
   19cdc:	eor	r2, ip, r1
   19ce0:	add	r0, r0, #42	; 0x2a
   19ce4:	and	r2, r2, r3
   19ce8:	add	r6, r0, r6
   19cec:	ldr	r0, [r9, #-40]	; 0xffffffd8
   19cf0:	eor	r5, r2, ip
   19cf4:	add	r5, r5, r6
   19cf8:	add	r0, r0, #-1476395008	; 0xa8000000
   19cfc:	add	r0, r0, #3162112	; 0x304000
   19d00:	add	r5, r3, r5, ror #20
   19d04:	eor	r2, r1, r3
   19d08:	add	r0, r0, #1552	; 0x610
   19d0c:	and	r2, r2, r5
   19d10:	add	r0, r0, #3
   19d14:	add	ip, r0, ip
   19d18:	eor	r0, r2, r1
   19d1c:	add	r0, r0, ip
   19d20:	ldr	sl, [r9, #-36]	; 0xffffffdc
   19d24:	ldr	r2, [pc, #2036]	; 1a520 <__assert_fail@plt+0x849c>
   19d28:	add	r0, r5, r0, ror #15
   19d2c:	eor	ip, r3, r5
   19d30:	add	r2, sl, r2
   19d34:	and	ip, ip, r0
   19d38:	add	r1, r2, r1
   19d3c:	eor	r2, ip, r3
   19d40:	ldr	ip, [r9, #-32]	; 0xffffffe0
   19d44:	add	r2, r2, r1
   19d48:	add	ip, ip, #1761607680	; 0x69000000
   19d4c:	add	ip, ip, #8388608	; 0x800000
   19d50:	add	r2, r0, r2, ror #10
   19d54:	eor	r1, r5, r0
   19d58:	add	ip, ip, #38912	; 0x9800
   19d5c:	and	r1, r1, r2
   19d60:	add	ip, ip, #216	; 0xd8
   19d64:	add	r3, ip, r3
   19d68:	eor	r8, r1, r5
   19d6c:	add	r8, r8, r3
   19d70:	ldr	ip, [r9, #-28]	; 0xffffffe4
   19d74:	ldr	r1, [pc, #1960]	; 1a524 <__assert_fail@plt+0x84a0>
   19d78:	add	r8, r2, r8, ror #25
   19d7c:	eor	r3, r0, r2
   19d80:	add	r1, ip, r1
   19d84:	and	r3, r3, r8
   19d88:	add	r5, r1, r5
   19d8c:	eor	r6, r3, r0
   19d90:	ldr	r1, [r9, #-24]	; 0xffffffe8
   19d94:	add	r6, r6, r5
   19d98:	eor	r3, r2, r8
   19d9c:	add	r6, r8, r6, ror #20
   19da0:	sub	r1, r1, #41984	; 0xa400
   19da4:	sub	r1, r1, #79	; 0x4f
   19da8:	and	r3, r3, r6
   19dac:	eor	r3, r3, r2
   19db0:	add	r0, r1, r0
   19db4:	add	r0, r3, r0
   19db8:	ldr	r1, [r9, #-20]	; 0xffffffec
   19dbc:	add	ip, r6, r0, ror #15
   19dc0:	ldr	r0, [pc, #1888]	; 1a528 <__assert_fail@plt+0x84a4>
   19dc4:	eor	r3, r8, r6
   19dc8:	add	r0, r1, r0
   19dcc:	and	r3, r3, ip
   19dd0:	add	r2, r0, r2
   19dd4:	eor	r1, r3, r8
   19dd8:	add	r1, r1, r2
   19ddc:	ldr	r7, [r9, #-16]
   19de0:	ldr	r0, [pc, #1860]	; 1a52c <__assert_fail@plt+0x84a8>
   19de4:	add	r1, ip, r1, ror #10
   19de8:	eor	r2, r6, ip
   19dec:	add	r0, r7, r0
   19df0:	and	r2, r2, r1
   19df4:	add	r8, r0, r8
   19df8:	eor	r3, r2, r6
   19dfc:	add	r3, r3, r8
   19e00:	ldr	r5, [r9, #-12]
   19e04:	ldr	r0, [pc, #1828]	; 1a530 <__assert_fail@plt+0x84ac>
   19e08:	add	r3, r1, r3, ror #25
   19e0c:	eor	r2, ip, r1
   19e10:	add	r0, r5, r0
   19e14:	and	r2, r2, r3
   19e18:	add	r6, r0, r6
   19e1c:	eor	r5, r2, ip
   19e20:	add	r5, r5, r6
   19e24:	ldr	r8, [r9, #-8]
   19e28:	ldr	r6, [pc, #1796]	; 1a534 <__assert_fail@plt+0x84b0>
   19e2c:	add	r5, r3, r5, ror #20
   19e30:	eor	r2, r1, r3
   19e34:	add	r6, r8, r6
   19e38:	and	r2, r2, r5
   19e3c:	add	ip, r6, ip
   19e40:	eor	r0, r2, r1
   19e44:	add	r0, r0, ip
   19e48:	ldr	r6, [r9, #-4]
   19e4c:	ldr	r2, [pc, #1764]	; 1a538 <__assert_fail@plt+0x84b4>
   19e50:	add	r0, r5, r0, ror #15
   19e54:	eor	ip, r3, r5
   19e58:	add	r2, r6, r2
   19e5c:	and	ip, ip, r0
   19e60:	add	r1, r2, r1
   19e64:	eor	r2, ip, r3
   19e68:	add	r2, r2, r1
   19e6c:	ldr	fp, [r9, #-60]	; 0xffffffc4
   19e70:	add	r2, r0, r2, ror #10
   19e74:	ldr	ip, [pc, #1728]	; 1a53c <__assert_fail@plt+0x84b8>
   19e78:	eor	r1, r0, r2
   19e7c:	add	ip, fp, ip
   19e80:	and	r1, r1, r5
   19e84:	add	r3, ip, r3
   19e88:	eor	fp, r1, r0
   19e8c:	add	fp, fp, r3
   19e90:	ldr	ip, [r9, #-40]	; 0xffffffd8
   19e94:	add	fp, r2, fp, ror #27
   19e98:	ldr	r1, [pc, #1696]	; 1a540 <__assert_fail@plt+0x84bc>
   19e9c:	eor	r3, r2, fp
   19ea0:	add	r1, ip, r1
   19ea4:	and	r3, r3, r0
   19ea8:	eor	r3, r3, r2
   19eac:	add	r5, r1, r5
   19eb0:	add	r5, r3, r5
   19eb4:	ldr	r1, [r9, #-20]	; 0xffffffec
   19eb8:	add	r5, fp, r5, ror #23
   19ebc:	ldr	ip, [pc, #1664]	; 1a544 <__assert_fail@plt+0x84c0>
   19ec0:	eor	r3, fp, r5
   19ec4:	add	ip, r1, ip
   19ec8:	and	r3, r3, r2
   19ecc:	add	r0, ip, r0
   19ed0:	eor	ip, r3, fp
   19ed4:	add	ip, ip, r0
   19ed8:	ldr	r1, [pc, #1640]	; 1a548 <__assert_fail@plt+0x84c4>
   19edc:	add	ip, r5, ip, ror #18
   19ee0:	ldr	r0, [r9, #-64]	; 0xffffffc0
   19ee4:	eor	r3, r5, ip
   19ee8:	add	r1, r0, r1
   19eec:	and	r3, r3, fp
   19ef0:	eor	r3, r3, r5
   19ef4:	add	r2, r1, r2
   19ef8:	add	r2, r3, r2
   19efc:	ldr	r0, [r9, #-44]	; 0xffffffd4
   19f00:	add	r2, ip, r2, ror #12
   19f04:	ldr	r3, [pc, #1600]	; 1a54c <__assert_fail@plt+0x84c8>
   19f08:	eor	r1, ip, r2
   19f0c:	add	r3, r0, r3
   19f10:	and	r1, r1, r5
   19f14:	add	fp, r3, fp
   19f18:	eor	r3, r1, ip
   19f1c:	add	r3, r3, fp
   19f20:	ldr	r1, [pc, #1576]	; 1a550 <__assert_fail@plt+0x84cc>
   19f24:	add	r3, r2, r3, ror #27
   19f28:	ldr	fp, [r9, #-24]	; 0xffffffe8
   19f2c:	eor	r0, r2, r3
   19f30:	add	r1, fp, r1
   19f34:	and	r0, r0, ip
   19f38:	add	r5, r1, r5
   19f3c:	eor	r1, r0, r2
   19f40:	add	r1, r1, r5
   19f44:	ldr	r0, [pc, #1544]	; 1a554 <__assert_fail@plt+0x84d0>
   19f48:	add	r1, r3, r1, ror #23
   19f4c:	eor	r5, r3, r1
   19f50:	add	r0, r6, r0
   19f54:	and	r5, r5, r2
   19f58:	add	ip, r0, ip
   19f5c:	eor	r0, r5, r3
   19f60:	add	r0, r0, ip
   19f64:	ldr	fp, [r9, #-48]	; 0xffffffd0
   19f68:	add	r0, r1, r0, ror #18
   19f6c:	ldr	r5, [pc, #1508]	; 1a558 <__assert_fail@plt+0x84d4>
   19f70:	eor	ip, r1, r0
   19f74:	add	r5, fp, r5
   19f78:	and	ip, ip, r3
   19f7c:	eor	ip, ip, r1
   19f80:	add	r2, r5, r2
   19f84:	add	r2, ip, r2
   19f88:	ldr	fp, [r9, #-28]	; 0xffffffe4
   19f8c:	add	r2, r0, r2, ror #12
   19f90:	ldr	r5, [pc, #1476]	; 1a55c <__assert_fail@plt+0x84d8>
   19f94:	eor	ip, r0, r2
   19f98:	add	r5, fp, r5
   19f9c:	and	ip, ip, r1
   19fa0:	add	r3, r5, r3
   19fa4:	eor	fp, ip, r0
   19fa8:	add	fp, fp, r3
   19fac:	ldr	ip, [pc, #1452]	; 1a560 <__assert_fail@plt+0x84dc>
   19fb0:	add	fp, r2, fp, ror #27
   19fb4:	eor	r3, r2, fp
   19fb8:	add	ip, r8, ip
   19fbc:	and	r3, r3, r0
   19fc0:	add	r1, ip, r1
   19fc4:	eor	r5, r3, r2
   19fc8:	add	r5, r5, r1
   19fcc:	ldr	ip, [pc, #1424]	; 1a564 <__assert_fail@plt+0x84e0>
   19fd0:	add	r5, fp, r5, ror #23
   19fd4:	ldr	r1, [r9, #-52]	; 0xffffffcc
   19fd8:	eor	r3, fp, r5
   19fdc:	add	ip, r1, ip
   19fe0:	and	r3, r3, r2
   19fe4:	add	r0, ip, r0
   19fe8:	eor	ip, r3, fp
   19fec:	add	ip, ip, r0
   19ff0:	ldr	r1, [pc, #1392]	; 1a568 <__assert_fail@plt+0x84e4>
   19ff4:	add	ip, r5, ip, ror #18
   19ff8:	ldr	r0, [r9, #-32]	; 0xffffffe0
   19ffc:	eor	r3, r5, ip
   1a000:	add	r1, r0, r1
   1a004:	and	r3, r3, fp
   1a008:	eor	r3, r3, r5
   1a00c:	add	r2, r1, r2
   1a010:	add	r2, r3, r2
   1a014:	ldr	r0, [r9, #-12]
   1a018:	add	r2, ip, r2, ror #12
   1a01c:	ldr	r3, [pc, #1352]	; 1a56c <__assert_fail@plt+0x84e8>
   1a020:	eor	r1, ip, r2
   1a024:	add	r3, r0, r3
   1a028:	and	r1, r1, r5
   1a02c:	add	fp, r3, fp
   1a030:	eor	r3, r1, ip
   1a034:	add	r3, r3, fp
   1a038:	ldr	r1, [pc, #1328]	; 1a570 <__assert_fail@plt+0x84ec>
   1a03c:	add	r3, r2, r3, ror #27
   1a040:	ldr	fp, [r9, #-56]	; 0xffffffc8
   1a044:	eor	r0, r2, r3
   1a048:	add	r1, fp, r1
   1a04c:	and	r0, r0, ip
   1a050:	add	r5, r1, r5
   1a054:	eor	r1, r0, r2
   1a058:	add	r1, r1, r5
   1a05c:	ldr	r0, [pc, #1296]	; 1a574 <__assert_fail@plt+0x84f0>
   1a060:	add	r1, r3, r1, ror #23
   1a064:	eor	r5, r3, r1
   1a068:	add	r0, sl, r0
   1a06c:	and	r5, r5, r2
   1a070:	add	ip, r0, ip
   1a074:	eor	r0, r5, r3
   1a078:	add	r0, r0, ip
   1a07c:	ldr	r5, [pc, #1268]	; 1a578 <__assert_fail@plt+0x84f4>
   1a080:	add	r0, r1, r0, ror #18
   1a084:	eor	fp, r1, r0
   1a088:	add	r5, r7, r5
   1a08c:	and	ip, fp, r3
   1a090:	eor	ip, ip, r1
   1a094:	add	r2, r5, r2
   1a098:	add	r2, ip, r2
   1a09c:	ldr	r5, [pc, #1240]	; 1a57c <__assert_fail@plt+0x84f8>
   1a0a0:	ldr	ip, [r9, #-44]	; 0xffffffd4
   1a0a4:	add	r2, r0, r2, ror #12
   1a0a8:	add	r5, ip, r5
   1a0ac:	eor	fp, fp, r2
   1a0b0:	add	r3, r5, r3
   1a0b4:	ldr	ip, [r9, #-32]	; 0xffffffe0
   1a0b8:	add	r3, fp, r3
   1a0bc:	ldr	fp, [pc, #1212]	; 1a580 <__assert_fail@plt+0x84fc>
   1a0c0:	add	r3, r2, r3, ror #28
   1a0c4:	add	fp, ip, fp
   1a0c8:	eor	ip, r0, r2
   1a0cc:	eor	ip, ip, r3
   1a0d0:	add	r1, fp, r1
   1a0d4:	add	r1, ip, r1
   1a0d8:	ldr	r5, [pc, #1188]	; 1a584 <__assert_fail@plt+0x8500>
   1a0dc:	ldr	ip, [r9, #-20]	; 0xffffffec
   1a0e0:	add	r1, r3, r1, ror #21
   1a0e4:	add	r5, ip, r5
   1a0e8:	eor	ip, r2, r3
   1a0ec:	eor	ip, ip, r1
   1a0f0:	add	r0, r5, r0
   1a0f4:	add	r0, ip, r0
   1a0f8:	ldr	r5, [pc, #1160]	; 1a588 <__assert_fail@plt+0x8504>
   1a0fc:	add	r0, r1, r0, ror #16
   1a100:	add	r5, r8, r5
   1a104:	eor	fp, r3, r1
   1a108:	eor	fp, fp, r0
   1a10c:	add	r2, r5, r2
   1a110:	ldr	ip, [r9, #-60]	; 0xffffffc4
   1a114:	add	r2, fp, r2
   1a118:	ldr	fp, [pc, #1132]	; 1a58c <__assert_fail@plt+0x8508>
   1a11c:	add	r2, r0, r2, ror #9
   1a120:	add	fp, ip, fp
   1a124:	eor	ip, r1, r0
   1a128:	add	r3, fp, r3
   1a12c:	eor	fp, ip, r2
   1a130:	ldr	r5, [r9, #-48]	; 0xffffffd0
   1a134:	add	fp, fp, r3
   1a138:	ldr	ip, [pc, #1104]	; 1a590 <__assert_fail@plt+0x850c>
   1a13c:	add	fp, r2, fp, ror #28
   1a140:	add	ip, r5, ip
   1a144:	eor	r3, r0, r2
   1a148:	eor	r3, r3, fp
   1a14c:	add	r1, ip, r1
   1a150:	add	r1, r3, r1
   1a154:	ldr	ip, [pc, #1080]	; 1a594 <__assert_fail@plt+0x8510>
   1a158:	add	r1, fp, r1, ror #21
   1a15c:	add	ip, sl, ip
   1a160:	eor	r3, r2, fp
   1a164:	eor	r3, r3, r1
   1a168:	add	r0, ip, r0
   1a16c:	add	r0, r3, r0
   1a170:	ldr	ip, [r9, #-24]	; 0xffffffe8
   1a174:	ldr	r5, [pc, #1052]	; 1a598 <__assert_fail@plt+0x8514>
   1a178:	add	r0, r1, r0, ror #16
   1a17c:	eor	r3, fp, r1
   1a180:	add	r5, ip, r5
   1a184:	add	r2, r5, r2
   1a188:	eor	r5, r3, r0
   1a18c:	ldr	ip, [r9, #-12]
   1a190:	add	r5, r5, r2
   1a194:	ldr	r2, [pc, #1024]	; 1a59c <__assert_fail@plt+0x8518>
   1a198:	add	r5, r0, r5, ror #9
   1a19c:	add	r2, ip, r2
   1a1a0:	eor	ip, r1, r0
   1a1a4:	add	fp, r2, fp
   1a1a8:	eor	r2, ip, r5
   1a1ac:	add	r2, r2, fp
   1a1b0:	ldr	ip, [pc, #1000]	; 1a5a0 <__assert_fail@plt+0x851c>
   1a1b4:	ldr	fp, [r9, #-64]	; 0xffffffc0
   1a1b8:	add	r2, r5, r2, ror #28
   1a1bc:	eor	r3, r0, r5
   1a1c0:	add	ip, fp, ip
   1a1c4:	add	r1, ip, r1
   1a1c8:	eor	fp, r3, r2
   1a1cc:	add	fp, fp, r1
   1a1d0:	ldr	ip, [pc, #972]	; 1a5a4 <__assert_fail@plt+0x8520>
   1a1d4:	ldr	r1, [r9, #-52]	; 0xffffffcc
   1a1d8:	add	fp, r2, fp, ror #21
   1a1dc:	eor	r3, r5, r2
   1a1e0:	add	ip, r1, ip
   1a1e4:	add	r0, ip, r0
   1a1e8:	eor	ip, r3, fp
   1a1ec:	ldr	r1, [r9, #-40]	; 0xffffffd8
   1a1f0:	add	ip, ip, r0
   1a1f4:	ldr	r3, [pc, #940]	; 1a5a8 <__assert_fail@plt+0x8524>
   1a1f8:	add	ip, fp, ip, ror #16
   1a1fc:	add	r3, r1, r3
   1a200:	eor	r1, r2, fp
   1a204:	add	r5, r3, r5
   1a208:	eor	r3, r1, ip
   1a20c:	add	r3, r3, r5
   1a210:	ldr	r1, [r9, #-28]	; 0xffffffe4
   1a214:	ldr	r0, [pc, #912]	; 1a5ac <__assert_fail@plt+0x8528>
   1a218:	add	r3, ip, r3, ror #9
   1a21c:	add	r0, r1, r0
   1a220:	eor	r1, fp, ip
   1a224:	add	r2, r0, r2
   1a228:	eor	r5, r1, r3
   1a22c:	add	r5, r5, r2
   1a230:	ldr	r0, [pc, #888]	; 1a5b0 <__assert_fail@plt+0x852c>
   1a234:	add	r5, r3, r5, ror #28
   1a238:	eor	r2, ip, r3
   1a23c:	add	r0, r7, r0
   1a240:	add	fp, r0, fp
   1a244:	eor	r0, r2, r5
   1a248:	add	r0, r0, fp
   1a24c:	ldr	r1, [pc, #864]	; 1a5b4 <__assert_fail@plt+0x8530>
   1a250:	add	r0, r5, r0, ror #21
   1a254:	eor	r2, r3, r5
   1a258:	add	r1, r6, r1
   1a25c:	add	ip, r1, ip
   1a260:	eor	r1, r2, r0
   1a264:	ldr	fp, [r9, #-56]	; 0xffffffc8
   1a268:	add	r1, r1, ip
   1a26c:	ldr	ip, [pc, #836]	; 1a5b8 <__assert_fail@plt+0x8534>
   1a270:	add	r1, r0, r1, ror #16
   1a274:	eor	r2, r5, r0
   1a278:	add	ip, fp, ip
   1a27c:	add	r3, ip, r3
   1a280:	eor	ip, r2, r1
   1a284:	add	ip, ip, r3
   1a288:	ldr	fp, [r9, #-64]	; 0xffffffc0
   1a28c:	ldr	r2, [pc, #808]	; 1a5bc <__assert_fail@plt+0x8538>
   1a290:	add	ip, r1, ip, ror #9
   1a294:	mvn	r3, r0
   1a298:	add	r2, fp, r2
   1a29c:	orr	r3, r3, ip
   1a2a0:	add	r5, r2, r5
   1a2a4:	eor	r2, r3, r1
   1a2a8:	add	r2, r2, r5
   1a2ac:	ldr	fp, [pc, #780]	; 1a5c0 <__assert_fail@plt+0x853c>
   1a2b0:	add	r2, ip, r2, ror #26
   1a2b4:	mvn	r3, r1
   1a2b8:	add	fp, sl, fp
   1a2bc:	orr	r3, r3, r2
   1a2c0:	eor	r3, r3, ip
   1a2c4:	add	r0, fp, r0
   1a2c8:	add	r0, r3, r0
   1a2cc:	ldr	sl, [pc, #752]	; 1a5c4 <__assert_fail@plt+0x8540>
   1a2d0:	add	r0, r2, r0, ror #22
   1a2d4:	mvn	r5, ip
   1a2d8:	add	sl, r8, sl
   1a2dc:	orr	r5, r5, r0
   1a2e0:	eor	r5, r5, r2
   1a2e4:	add	r1, sl, r1
   1a2e8:	add	r1, r5, r1
   1a2ec:	ldr	r3, [pc, #724]	; 1a5c8 <__assert_fail@plt+0x8544>
   1a2f0:	ldr	r5, [r9, #-44]	; 0xffffffd4
   1a2f4:	add	r1, r0, r1, ror #17
   1a2f8:	mvn	r8, r2
   1a2fc:	add	r3, r5, r3
   1a300:	orr	r8, r8, r1
   1a304:	add	ip, r3, ip
   1a308:	eor	r8, r8, r0
   1a30c:	add	ip, r8, ip
   1a310:	ldr	sl, [pc, #692]	; 1a5cc <__assert_fail@plt+0x8548>
   1a314:	add	ip, r1, ip, ror #11
   1a318:	mvn	r5, r0
   1a31c:	add	sl, r7, sl
   1a320:	orr	r5, r5, ip
   1a324:	eor	r5, r5, r1
   1a328:	add	r2, sl, r2
   1a32c:	add	r2, r5, r2
   1a330:	ldr	fp, [pc, #664]	; 1a5d0 <__assert_fail@plt+0x854c>
   1a334:	ldr	r5, [r9, #-52]	; 0xffffffcc
   1a338:	add	r2, ip, r2, ror #26
   1a33c:	mvn	r3, r1
   1a340:	add	fp, r5, fp
   1a344:	orr	r3, r3, r2
   1a348:	eor	r3, r3, ip
   1a34c:	add	r0, fp, r0
   1a350:	add	r0, r3, r0
   1a354:	ldr	r7, [r9, #-24]	; 0xffffffe8
   1a358:	ldr	sl, [pc, #628]	; 1a5d4 <__assert_fail@plt+0x8550>
   1a35c:	add	r0, r2, r0, ror #22
   1a360:	mvn	r5, ip
   1a364:	add	sl, r7, sl
   1a368:	orr	r5, r5, r0
   1a36c:	eor	r5, r5, r2
   1a370:	add	r1, sl, r1
   1a374:	add	r1, r5, r1
   1a378:	ldr	r7, [r9, #-60]	; 0xffffffc4
   1a37c:	ldr	r3, [pc, #596]	; 1a5d8 <__assert_fail@plt+0x8554>
   1a380:	add	r1, r0, r1, ror #17
   1a384:	mvn	r5, r2
   1a388:	add	r3, r7, r3
   1a38c:	orr	r5, r5, r1
   1a390:	eor	r5, r5, r0
   1a394:	add	ip, r3, ip
   1a398:	add	ip, r5, ip
   1a39c:	ldr	sl, [pc, #568]	; 1a5dc <__assert_fail@plt+0x8558>
   1a3a0:	ldr	r5, [r9, #-32]	; 0xffffffe0
   1a3a4:	add	ip, r1, ip, ror #11
   1a3a8:	mvn	r3, r0
   1a3ac:	add	sl, r5, sl
   1a3b0:	orr	r3, r3, ip
   1a3b4:	eor	r3, r3, r1
   1a3b8:	add	r2, sl, r2
   1a3bc:	add	r2, r3, r2
   1a3c0:	ldr	fp, [pc, #536]	; 1a5e0 <__assert_fail@plt+0x855c>
   1a3c4:	add	r2, ip, r2, ror #26
   1a3c8:	mvn	r5, r1
   1a3cc:	add	fp, r6, fp
   1a3d0:	orr	r5, r5, r2
   1a3d4:	eor	r5, r5, ip
   1a3d8:	add	r0, fp, r0
   1a3dc:	add	r0, r5, r0
   1a3e0:	ldr	sl, [pc, #508]	; 1a5e4 <__assert_fail@plt+0x8560>
   1a3e4:	ldr	r5, [r9, #-40]	; 0xffffffd8
   1a3e8:	add	r0, r2, r0, ror #22
   1a3ec:	mvn	r3, ip
   1a3f0:	add	sl, r5, sl
   1a3f4:	orr	r3, r3, r0
   1a3f8:	eor	r3, r3, r2
   1a3fc:	add	r1, sl, r1
   1a400:	add	r1, r3, r1
   1a404:	ldr	r7, [r9, #-12]
   1a408:	ldr	r6, [pc, #472]	; 1a5e8 <__assert_fail@plt+0x8564>
   1a40c:	add	r1, r0, r1, ror #17
   1a410:	mvn	r5, r2
   1a414:	add	r6, r7, r6
   1a418:	orr	r5, r5, r1
   1a41c:	eor	r5, r5, r0
   1a420:	add	ip, r6, ip
   1a424:	add	ip, r5, ip
   1a428:	ldr	sl, [pc, #444]	; 1a5ec <__assert_fail@plt+0x8568>
   1a42c:	ldr	r5, [r9, #-48]	; 0xffffffd0
   1a430:	add	ip, r1, ip, ror #11
   1a434:	mvn	r3, r0
   1a438:	add	sl, r5, sl
   1a43c:	orr	r3, r3, ip
   1a440:	eor	r3, r3, r1
   1a444:	add	r2, sl, r2
   1a448:	add	r2, r3, r2
   1a44c:	ldr	r5, [r9, #-20]	; 0xffffffec
   1a450:	ldr	fp, [pc, #408]	; 1a5f0 <__assert_fail@plt+0x856c>
   1a454:	add	r2, ip, r2, ror #26
   1a458:	mvn	r3, r1
   1a45c:	orr	r3, r3, r2
   1a460:	add	fp, r5, fp
   1a464:	add	fp, fp, r0
   1a468:	eor	r0, r3, ip
   1a46c:	add	r0, r0, fp
   1a470:	ldr	r5, [r9, #-56]	; 0xffffffc8
   1a474:	ldr	sl, [pc, #376]	; 1a5f4 <__assert_fail@plt+0x8570>
   1a478:	add	r0, r2, r0, ror #22
   1a47c:	mvn	r3, ip
   1a480:	add	sl, r5, sl
   1a484:	orr	r3, r3, r0
   1a488:	add	sl, sl, r1
   1a48c:	eor	r1, r3, r2
   1a490:	add	r1, r1, sl
   1a494:	ldr	r5, [r9, #-28]	; 0xffffffe4
   1a498:	ldr	r6, [pc, #344]	; 1a5f8 <__assert_fail@plt+0x8574>
   1a49c:	add	r1, r0, r1, ror #17
   1a4a0:	mvn	r3, r2
   1a4a4:	add	r6, r5, r6
   1a4a8:	orr	r3, r3, r1
   1a4ac:	eor	r3, r3, r0
   1a4b0:	add	ip, r6, ip
   1a4b4:	add	ip, r3, ip
   1a4b8:	ldr	r3, [sp, #4]
   1a4bc:	ldr	r5, [sp, #8]
   1a4c0:	add	r3, r3, r2
   1a4c4:	ldr	r2, [sp]
   1a4c8:	add	r9, r9, #64	; 0x40
   1a4cc:	add	ip, r1, ip, ror #11
   1a4d0:	str	r3, [sp, #4]
   1a4d4:	cmp	r5, r9
   1a4d8:	add	r3, r2, r0
   1a4dc:	str	r3, [sp]
   1a4e0:	add	r4, r4, r1
   1a4e4:	add	lr, lr, ip
   1a4e8:	bne	19c08 <__assert_fail@plt+0x7b84>
   1a4ec:	ldr	r3, [sp, #12]
   1a4f0:	ldr	r2, [sp, #4]
   1a4f4:	str	r2, [r3]
   1a4f8:	ldr	r2, [sp]
   1a4fc:	str	lr, [r3, #4]
   1a500:	str	r4, [r3, #8]
   1a504:	str	r2, [r3, #12]
   1a508:	add	sp, sp, #20
   1a50c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a510:	stmia	r7, {r1, r2, r4, r6, r8, r9, sl, ip, sp, pc}^
   1a514:	strtcs	r7, [r0], #-219	; 0xffffff25
   1a518:			; <UNDEFINED> instruction: 0xc1bdceee
   1a51c:			; <UNDEFINED> instruction: 0xf57c0faf
   1a520:	stc2l	5, cr9, [r6, #-4]
   1a524:	blhi	11583e8 <optarg@@GLIBC_2.4+0x1122108>
   1a528:	ldmdbhi	ip, {r1, r2, r3, r4, r5, r7, r8, r9, sl, ip, lr, pc}^
   1a52c:	blvs	fe41e9bc <optarg@@GLIBC_2.4+0xfe3e86dc>
   1a530:	ldc2	1, cr7, [r8, #588]	; 0x24c
   1a534:	ldrbtge	r4, [r9], -lr, lsl #7
   1a538:	ldmibmi	r4!, {r0, r5, fp}
   1a53c:			; <UNDEFINED> instruction: 0xf61e2562
   1a540:	subgt	fp, r0, r0, asr #6
   1a544:			; <UNDEFINED> instruction: 0x265e5a51
   1a548:	ldmib	r6!, {r1, r3, r5, r7, r8, r9, sl, lr, pc}
   1a54c:			; <UNDEFINED> instruction: 0xd62f105d
   1a550:	subeq	r1, r4, #1392508928	; 0x53000000
   1a554:	stmiale	r1!, {r0, r7, r9, sl, sp, lr, pc}
   1a558:	ldrb	pc, [r3, r8, asr #23]	; <UNPREDICTABLE>
   1a55c:	mvncs	ip, r6, ror #27
   1a560:	teqgt	r7, #56098816	; 0x3580000
   1a564:			; <UNDEFINED> instruction: 0xf4d50d87
   1a568:	ldrbmi	r1, [sl, #-1261]	; 0xfffffb13
   1a56c:	stmibge	r3!, {r0, r2, r8, fp, sp, lr, pc}^
   1a570:	stc2l	3, cr10, [pc], #992	; 1a958 <__assert_fail@plt+0x88d4>
   1a574:			; <UNDEFINED> instruction: 0x676f02d9
   1a578:	stchi	12, cr4, [sl, #-552]!	; 0xfffffdd8
   1a57c:			; <UNDEFINED> instruction: 0xfffa3942
   1a580:	ldrbhi	pc, [r1, -r1, lsl #13]!	; <UNPREDICTABLE>
   1a584:	ldfvss	f6, [sp, #136]	; 0x88
   1a588:	vcmla.f16	d19, d5, d12, #270
   1a58c:	ldrtge	lr, [lr], #2628	; 0xa44
   1a590:	blmi	ff7ce43c <optarg@@GLIBC_2.4+0xff79815c>
   1a594:			; <UNDEFINED> instruction: 0xf6bb4b60
   1a598:	mrclt	12, 5, fp, cr15, cr0, {3}
   1a59c:	ldmcs	fp, {r1, r2, r6, r7, r9, sl, fp, ip, sp, lr}
   1a5a0:	b	fe864590 <optarg@@GLIBC_2.4+0xfe82e2b0>
   1a5a4:	strbtle	r3, [pc], #133	; 1a5ac <__assert_fail@plt+0x8528>
   1a5a8:	streq	r1, [r8], #3333	; 0xd05
   1a5ac:	ldmible	r4, {r0, r3, r4, r5, ip, lr, pc}^
   1a5b0:	ldrb	r9, [fp], r5, ror #19
   1a5b4:	svcne	0x00a27cf8
   1a5b8:	strtgt	r5, [ip], #1637	; 0x665
   1a5bc:	vld1.16	{d2-d5}, [r9], r4
   1a5c0:	msrmi	CPSR_fx, #604	; 0x25c
   1a5c4:	blge	fe523468 <optarg@@GLIBC_2.4+0xfe4ed188>
   1a5c8:	ldc2	0, cr10, [r3], {57}	; 0x39
   1a5cc:	ldrbvs	r5, [fp, #-2499]	; 0xfffff63d
   1a5d0:	svchi	0x000ccc92
   1a5d4:			; <UNDEFINED> instruction: 0xffeff47d
   1a5d8:	strhi	r5, [r4, #3537]	; 0xdd1
   1a5dc:	svcvs	0x00a87e4f
   1a5e0:	cdp2	6, 2, cr14, cr12, cr0, {7}
   1a5e4:	movwge	r4, #4884	; 0x1314
   1a5e8:	adfmi<illegal precision>p	f1, f0, f1
   1a5ec:			; <UNDEFINED> instruction: 0xf7537e82
   1a5f0:	lfmlt	f7, 1, [sl, #-212]!	; 0xffffff2c
   1a5f4:	bcs	ff60f0e8 <optarg@@GLIBC_2.4+0xff5d8e08>
   1a5f8:	bl	fe1cf444 <optarg@@GLIBC_2.4+0xfe199164>
   1a5fc:	push	{r4, r5, r6, r7, r8, lr}
   1a600:	mov	r4, r0
   1a604:	ldr	r0, [r0, #24]
   1a608:	ldr	r3, [r4, #16]
   1a60c:	cmp	r0, #56	; 0x38
   1a610:	ldr	r7, [r4, #20]
   1a614:	mov	r5, r1
   1a618:	movcc	r6, #64	; 0x40
   1a61c:	movcs	r6, #128	; 0x80
   1a620:	movcc	r2, #56	; 0x38
   1a624:	movcs	r2, #120	; 0x78
   1a628:	movcc	r1, #15
   1a62c:	movcs	r1, #31
   1a630:	movcc	lr, #14
   1a634:	movcs	lr, #30
   1a638:	adds	r3, r3, r0
   1a63c:	addcs	r7, r7, #1
   1a640:	add	lr, r4, lr, lsl #2
   1a644:	add	r1, r4, r1, lsl #2
   1a648:	lsr	ip, r3, #29
   1a64c:	strcs	r7, [r4, #20]
   1a650:	str	r3, [r4, #16]
   1a654:	orr	ip, ip, r7, lsl #3
   1a658:	lsl	r3, r3, #3
   1a65c:	add	r7, r4, #28
   1a660:	str	r3, [lr, #28]
   1a664:	sub	r2, r2, r0
   1a668:	str	ip, [r1, #28]
   1a66c:	add	r0, r7, r0
   1a670:	ldr	r1, [pc, #32]	; 1a698 <__assert_fail@plt+0x8614>
   1a674:	bl	11bec <memcpy@plt>
   1a678:	mov	r1, r6
   1a67c:	mov	r0, r7
   1a680:	mov	r2, r4
   1a684:	bl	19b94 <__assert_fail@plt+0x7b10>
   1a688:	mov	r1, r5
   1a68c:	mov	r0, r4
   1a690:	pop	{r4, r5, r6, r7, r8, lr}
   1a694:	b	19b68 <__assert_fail@plt+0x7ae4>
   1a698:	andeq	r4, r2, r0, ror fp
   1a69c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a6a0:	mov	r5, r2
   1a6a4:	ldr	r7, [r2, #24]
   1a6a8:	mov	r4, r0
   1a6ac:	cmp	r7, #0
   1a6b0:	mov	r6, r1
   1a6b4:	bne	1a798 <__assert_fail@plt+0x8714>
   1a6b8:	cmp	r6, #63	; 0x3f
   1a6bc:	bls	1a784 <__assert_fail@plt+0x8700>
   1a6c0:	tst	r4, #3
   1a6c4:	beq	1a768 <__assert_fail@plt+0x86e4>
   1a6c8:	cmp	r6, #64	; 0x40
   1a6cc:	add	r7, r5, #28
   1a6d0:	beq	1a838 <__assert_fail@plt+0x87b4>
   1a6d4:	sub	r9, r6, #65	; 0x41
   1a6d8:	lsr	r9, r9, #6
   1a6dc:	add	r8, r9, #1
   1a6e0:	add	r8, r4, r8, lsl #6
   1a6e4:	add	lr, r4, #64	; 0x40
   1a6e8:	mov	r3, r7
   1a6ec:	ldr	ip, [r4]
   1a6f0:	ldr	r0, [r4, #4]
   1a6f4:	ldr	r1, [r4, #8]
   1a6f8:	ldr	r2, [r4, #12]
   1a6fc:	add	r4, r4, #16
   1a700:	cmp	r4, lr
   1a704:	str	ip, [r3]
   1a708:	str	r0, [r3, #4]
   1a70c:	str	r1, [r3, #8]
   1a710:	str	r2, [r3, #12]
   1a714:	add	r3, r3, #16
   1a718:	bne	1a6ec <__assert_fail@plt+0x8668>
   1a71c:	mov	r2, r5
   1a720:	mov	r1, #64	; 0x40
   1a724:	mov	r0, r7
   1a728:	bl	19b94 <__assert_fail@plt+0x7b10>
   1a72c:	cmp	r4, r8
   1a730:	bne	1a6e4 <__assert_fail@plt+0x8660>
   1a734:	rsb	r9, r9, r9, lsl #26
   1a738:	sub	r6, r6, #64	; 0x40
   1a73c:	add	r6, r6, r9, lsl #6
   1a740:	ldr	r4, [r5, #24]
   1a744:	mov	r1, r8
   1a748:	add	r0, r7, r4
   1a74c:	mov	r2, r6
   1a750:	add	r4, r4, r6
   1a754:	bl	11bec <memcpy@plt>
   1a758:	cmp	r4, #63	; 0x3f
   1a75c:	bhi	1a7d8 <__assert_fail@plt+0x8754>
   1a760:	str	r4, [r5, #24]
   1a764:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a768:	bic	r7, r6, #63	; 0x3f
   1a76c:	mov	r0, r4
   1a770:	mov	r1, r7
   1a774:	mov	r2, r5
   1a778:	bl	19b94 <__assert_fail@plt+0x7b10>
   1a77c:	and	r6, r6, #63	; 0x3f
   1a780:	add	r4, r4, r7
   1a784:	cmp	r6, #0
   1a788:	movne	r8, r4
   1a78c:	addne	r7, r5, #28
   1a790:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a794:	b	1a740 <__assert_fail@plt+0x86bc>
   1a798:	rsb	r8, r7, #128	; 0x80
   1a79c:	cmp	r8, r1
   1a7a0:	movcs	r8, r1
   1a7a4:	add	r9, r2, #28
   1a7a8:	mov	r1, r4
   1a7ac:	mov	r2, r8
   1a7b0:	add	r0, r9, r7
   1a7b4:	bl	11bec <memcpy@plt>
   1a7b8:	ldr	r1, [r5, #24]
   1a7bc:	add	r1, r8, r1
   1a7c0:	cmp	r1, #64	; 0x40
   1a7c4:	str	r1, [r5, #24]
   1a7c8:	bhi	1a804 <__assert_fail@plt+0x8780>
   1a7cc:	add	r4, r4, r8
   1a7d0:	sub	r6, r6, r8
   1a7d4:	b	1a6b8 <__assert_fail@plt+0x8634>
   1a7d8:	sub	r4, r4, #64	; 0x40
   1a7dc:	mov	r2, r5
   1a7e0:	mov	r1, #64	; 0x40
   1a7e4:	mov	r0, r7
   1a7e8:	bl	19b94 <__assert_fail@plt+0x7b10>
   1a7ec:	mov	r0, r7
   1a7f0:	mov	r2, r4
   1a7f4:	add	r1, r5, #92	; 0x5c
   1a7f8:	bl	11bec <memcpy@plt>
   1a7fc:	str	r4, [r5, #24]
   1a800:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a804:	mov	r2, r5
   1a808:	mov	r0, r9
   1a80c:	bic	r1, r1, #63	; 0x3f
   1a810:	bl	19b94 <__assert_fail@plt+0x7b10>
   1a814:	ldr	r2, [r5, #24]
   1a818:	add	r1, r7, r8
   1a81c:	and	r2, r2, #63	; 0x3f
   1a820:	bic	r1, r1, #63	; 0x3f
   1a824:	add	r1, r9, r1
   1a828:	mov	r0, r9
   1a82c:	str	r2, [r5, #24]
   1a830:	bl	11bec <memcpy@plt>
   1a834:	b	1a7cc <__assert_fail@plt+0x8748>
   1a838:	mov	r8, r4
   1a83c:	b	1a740 <__assert_fail@plt+0x86bc>
   1a840:	push	{r4, r5, r6, lr}
   1a844:	sub	sp, sp, #160	; 0xa0
   1a848:	ldr	r4, [pc, #100]	; 1a8b4 <__assert_fail@plt+0x8830>
   1a84c:	ldr	lr, [pc, #100]	; 1a8b8 <__assert_fail@plt+0x8834>
   1a850:	ldr	r3, [pc, #100]	; 1a8bc <__assert_fail@plt+0x8838>
   1a854:	ldr	ip, [r4]
   1a858:	ldr	r6, [pc, #96]	; 1a8c0 <__assert_fail@plt+0x883c>
   1a85c:	str	ip, [sp, #156]	; 0x9c
   1a860:	ldr	ip, [pc, #92]	; 1a8c4 <__assert_fail@plt+0x8840>
   1a864:	mov	r5, r2
   1a868:	str	r3, [sp, #8]
   1a86c:	mov	r2, sp
   1a870:	mov	r3, #0
   1a874:	str	r3, [sp, #20]
   1a878:	str	r3, [sp, #16]
   1a87c:	str	r3, [sp, #24]
   1a880:	stm	sp, {r6, lr}
   1a884:	str	ip, [sp, #12]
   1a888:	bl	1a69c <__assert_fail@plt+0x8618>
   1a88c:	mov	r1, r5
   1a890:	mov	r0, sp
   1a894:	bl	1a5fc <__assert_fail@plt+0x8578>
   1a898:	ldr	r2, [sp, #156]	; 0x9c
   1a89c:	ldr	r3, [r4]
   1a8a0:	cmp	r2, r3
   1a8a4:	bne	1a8b0 <__assert_fail@plt+0x882c>
   1a8a8:	add	sp, sp, #160	; 0xa0
   1a8ac:	pop	{r4, r5, r6, pc}
   1a8b0:	bl	11c7c <__stack_chk_fail@plt>
   1a8b4:	andeq	r5, r3, r0, lsl #30
   1a8b8:	svc	0x00cdab89
   1a8bc:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1a8c0:	strbvs	r2, [r5, -r1, lsl #6]
   1a8c4:	eorsne	r5, r2, r6, ror r4
   1a8c8:	push	{r4, r5, r6, r7, r8, lr}
   1a8cc:	sub	sp, sp, #160	; 0xa0
   1a8d0:	ldr	r7, [pc, #268]	; 1a9e4 <__assert_fail@plt+0x8960>
   1a8d4:	mov	r5, r0
   1a8d8:	ldr	r0, [pc, #264]	; 1a9e8 <__assert_fail@plt+0x8964>
   1a8dc:	ldr	r3, [r7]
   1a8e0:	mov	r8, r1
   1a8e4:	str	r3, [sp, #156]	; 0x9c
   1a8e8:	bl	11dfc <malloc@plt>
   1a8ec:	subs	r6, r0, #0
   1a8f0:	moveq	r0, #1
   1a8f4:	beq	1a984 <__assert_fail@plt+0x8900>
   1a8f8:	ldr	r2, [pc, #236]	; 1a9ec <__assert_fail@plt+0x8968>
   1a8fc:	ldr	r3, [pc, #236]	; 1a9f0 <__assert_fail@plt+0x896c>
   1a900:	str	r2, [sp]
   1a904:	str	r3, [sp, #4]
   1a908:	ldr	r2, [pc, #228]	; 1a9f4 <__assert_fail@plt+0x8970>
   1a90c:	ldr	r3, [pc, #228]	; 1a9f8 <__assert_fail@plt+0x8974>
   1a910:	strd	r2, [sp, #8]
   1a914:	mov	r3, #0
   1a918:	str	r3, [sp, #20]
   1a91c:	str	r3, [sp, #16]
   1a920:	str	r3, [sp, #24]
   1a924:	mov	r4, #0
   1a928:	b	1a954 <__assert_fail@plt+0x88d0>
   1a92c:	rsb	r2, r4, #32768	; 0x8000
   1a930:	add	r0, r6, r4
   1a934:	mov	r3, r5
   1a938:	mov	r1, #1
   1a93c:	bl	12030 <fread_unlocked@plt>
   1a940:	add	r4, r4, r0
   1a944:	cmp	r4, #32768	; 0x8000
   1a948:	beq	1a9b0 <__assert_fail@plt+0x892c>
   1a94c:	cmp	r0, #0
   1a950:	beq	1a9c4 <__assert_fail@plt+0x8940>
   1a954:	ldr	r3, [r5]
   1a958:	tst	r3, #16
   1a95c:	beq	1a92c <__assert_fail@plt+0x88a8>
   1a960:	cmp	r4, #0
   1a964:	mov	r5, sp
   1a968:	bne	1a99c <__assert_fail@plt+0x8918>
   1a96c:	mov	r1, r8
   1a970:	mov	r0, r5
   1a974:	bl	1a5fc <__assert_fail@plt+0x8578>
   1a978:	mov	r0, r6
   1a97c:	bl	11bb0 <free@plt>
   1a980:	mov	r0, #0
   1a984:	ldr	r2, [sp, #156]	; 0x9c
   1a988:	ldr	r3, [r7]
   1a98c:	cmp	r2, r3
   1a990:	bne	1a9e0 <__assert_fail@plt+0x895c>
   1a994:	add	sp, sp, #160	; 0xa0
   1a998:	pop	{r4, r5, r6, r7, r8, pc}
   1a99c:	mov	r1, r4
   1a9a0:	mov	r2, r5
   1a9a4:	mov	r0, r6
   1a9a8:	bl	1a69c <__assert_fail@plt+0x8618>
   1a9ac:	b	1a96c <__assert_fail@plt+0x88e8>
   1a9b0:	mov	r1, r4
   1a9b4:	mov	r2, sp
   1a9b8:	mov	r0, r6
   1a9bc:	bl	19b94 <__assert_fail@plt+0x7b10>
   1a9c0:	b	1a924 <__assert_fail@plt+0x88a0>
   1a9c4:	ldr	r3, [r5]
   1a9c8:	tst	r3, #32
   1a9cc:	beq	1a960 <__assert_fail@plt+0x88dc>
   1a9d0:	mov	r0, r6
   1a9d4:	bl	11bb0 <free@plt>
   1a9d8:	mov	r0, #1
   1a9dc:	b	1a984 <__assert_fail@plt+0x8900>
   1a9e0:	bl	11c7c <__stack_chk_fail@plt>
   1a9e4:	andeq	r5, r3, r0, lsl #30
   1a9e8:	andeq	r8, r0, r8, asr #32
   1a9ec:	strbvs	r2, [r5, -r1, lsl #6]
   1a9f0:	svc	0x00cdab89
   1a9f4:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1a9f8:	eorsne	r5, r2, r6, ror r4
   1a9fc:	b	11b68 <posix_fadvise64@plt>
   1aa00:	cmp	r0, #0
   1aa04:	bxeq	lr
   1aa08:	push	{r4, lr}
   1aa0c:	sub	sp, sp, #16
   1aa10:	mov	r4, r1
   1aa14:	bl	11f04 <fileno@plt>
   1aa18:	mov	r2, #0
   1aa1c:	mov	r3, #0
   1aa20:	str	r4, [sp, #8]
   1aa24:	strd	r2, [sp]
   1aa28:	bl	11b68 <posix_fadvise64@plt>
   1aa2c:	add	sp, sp, #16
   1aa30:	pop	{r4, pc}
   1aa34:	ldr	r2, [r0]
   1aa38:	ldrb	r3, [r2]
   1aa3c:	cmp	r3, #0
   1aa40:	beq	1ab00 <__assert_fail@plt+0x8a7c>
   1aa44:	mov	r1, #0
   1aa48:	push	{lr}		; (str lr, [sp, #-4]!)
   1aa4c:	mov	ip, r1
   1aa50:	b	1aa94 <__assert_fail@plt+0x8a10>
   1aa54:	cmp	r3, #65	; 0x41
   1aa58:	bcc	1aa70 <__assert_fail@plt+0x89ec>
   1aa5c:	cmp	r3, #90	; 0x5a
   1aa60:	bls	1aacc <__assert_fail@plt+0x8a48>
   1aa64:	sub	r1, r3, #97	; 0x61
   1aa68:	cmp	r1, #25
   1aa6c:	bls	1aacc <__assert_fail@plt+0x8a48>
   1aa70:	cmp	r3, #126	; 0x7e
   1aa74:	movne	ip, #0
   1aa78:	movne	r1, ip
   1aa7c:	beq	1aacc <__assert_fail@plt+0x8a48>
   1aa80:	add	r2, r2, #1
   1aa84:	str	r2, [r0]
   1aa88:	ldrb	r3, [r2]
   1aa8c:	cmp	r3, #0
   1aa90:	beq	1aaf8 <__assert_fail@plt+0x8a74>
   1aa94:	cmp	r1, #0
   1aa98:	bne	1aa54 <__assert_fail@plt+0x89d0>
   1aa9c:	cmp	r3, #46	; 0x2e
   1aaa0:	beq	1aae4 <__assert_fail@plt+0x8a60>
   1aaa4:	cmp	r3, #90	; 0x5a
   1aaa8:	bhi	1aad4 <__assert_fail@plt+0x8a50>
   1aaac:	cmp	r3, #65	; 0x41
   1aab0:	bcs	1aa80 <__assert_fail@plt+0x89fc>
   1aab4:	sub	lr, r3, #48	; 0x30
   1aab8:	cmp	lr, #9
   1aabc:	bls	1aa80 <__assert_fail@plt+0x89fc>
   1aac0:	cmp	r3, #126	; 0x7e
   1aac4:	movne	ip, #0
   1aac8:	b	1aa80 <__assert_fail@plt+0x89fc>
   1aacc:	mov	r1, #0
   1aad0:	b	1aa80 <__assert_fail@plt+0x89fc>
   1aad4:	sub	lr, r3, #97	; 0x61
   1aad8:	cmp	lr, #25
   1aadc:	bhi	1aac0 <__assert_fail@plt+0x8a3c>
   1aae0:	b	1aa80 <__assert_fail@plt+0x89fc>
   1aae4:	cmp	ip, #0
   1aae8:	moveq	ip, r2
   1aaec:	moveq	r1, #1
   1aaf0:	movne	r1, #1
   1aaf4:	b	1aa80 <__assert_fail@plt+0x89fc>
   1aaf8:	mov	r0, ip
   1aafc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab00:	mov	r0, r3
   1ab04:	bx	lr
   1ab08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab0c:	sub	sp, sp, #36	; 0x24
   1ab10:	ldr	r6, [pc, #932]	; 1aebc <__assert_fail@plt+0x8e38>
   1ab14:	mov	r4, r0
   1ab18:	mov	r5, r1
   1ab1c:	ldr	r3, [r6]
   1ab20:	str	r3, [sp, #28]
   1ab24:	bl	11b50 <strcmp@plt>
   1ab28:	subs	r7, r0, #0
   1ab2c:	beq	1add8 <__assert_fail@plt+0x8d54>
   1ab30:	ldrb	r9, [r4]
   1ab34:	cmp	r9, #0
   1ab38:	beq	1ae48 <__assert_fail@plt+0x8dc4>
   1ab3c:	ldrb	r8, [r5]
   1ab40:	cmp	r8, #0
   1ab44:	beq	1add4 <__assert_fail@plt+0x8d50>
   1ab48:	mov	r1, r4
   1ab4c:	ldr	r0, [pc, #876]	; 1aec0 <__assert_fail@plt+0x8e3c>
   1ab50:	bl	11b50 <strcmp@plt>
   1ab54:	cmp	r0, #0
   1ab58:	beq	1ae48 <__assert_fail@plt+0x8dc4>
   1ab5c:	mov	r1, r5
   1ab60:	ldr	r0, [pc, #856]	; 1aec0 <__assert_fail@plt+0x8e3c>
   1ab64:	bl	11b50 <strcmp@plt>
   1ab68:	cmp	r0, #0
   1ab6c:	beq	1add4 <__assert_fail@plt+0x8d50>
   1ab70:	mov	r1, r4
   1ab74:	ldr	r0, [pc, #840]	; 1aec4 <__assert_fail@plt+0x8e40>
   1ab78:	bl	11b50 <strcmp@plt>
   1ab7c:	cmp	r0, #0
   1ab80:	beq	1ae48 <__assert_fail@plt+0x8dc4>
   1ab84:	mov	r1, r5
   1ab88:	ldr	r0, [pc, #820]	; 1aec4 <__assert_fail@plt+0x8e40>
   1ab8c:	bl	11b50 <strcmp@plt>
   1ab90:	cmp	r0, #0
   1ab94:	beq	1add4 <__assert_fail@plt+0x8d50>
   1ab98:	sub	r3, r9, #46	; 0x2e
   1ab9c:	clz	r3, r3
   1aba0:	lsr	r3, r3, #5
   1aba4:	cmp	r8, #46	; 0x2e
   1aba8:	moveq	r2, #0
   1abac:	andne	r2, r3, #1
   1abb0:	cmp	r2, #0
   1abb4:	bne	1ae48 <__assert_fail@plt+0x8dc4>
   1abb8:	sub	r8, r8, #46	; 0x2e
   1abbc:	clz	r8, r8
   1abc0:	lsr	r8, r8, #5
   1abc4:	cmp	r9, #46	; 0x2e
   1abc8:	moveq	r9, #0
   1abcc:	andne	r9, r8, #1
   1abd0:	cmp	r9, #0
   1abd4:	bne	1add4 <__assert_fail@plt+0x8d50>
   1abd8:	tst	r8, r3
   1abdc:	addne	r4, r4, #1
   1abe0:	addne	r5, r5, #1
   1abe4:	add	r0, sp, #20
   1abe8:	strd	r4, [sp, #20]
   1abec:	bl	1aa34 <__assert_fail@plt+0x89b0>
   1abf0:	mov	r8, r0
   1abf4:	add	r0, sp, #24
   1abf8:	bl	1aa34 <__assert_fail@plt+0x89b0>
   1abfc:	cmp	r8, #0
   1ac00:	beq	1ae60 <__assert_fail@plt+0x8ddc>
   1ac04:	cmp	r0, #0
   1ac08:	sub	r8, r8, r4
   1ac0c:	beq	1aea8 <__assert_fail@plt+0x8e24>
   1ac10:	sub	sl, r0, r5
   1ac14:	cmp	r8, sl
   1ac18:	bne	1ac40 <__assert_fail@plt+0x8bbc>
   1ac1c:	mov	r2, r8
   1ac20:	mov	r1, r5
   1ac24:	mov	r0, r4
   1ac28:	bl	12048 <strncmp@plt>
   1ac2c:	cmp	r0, #0
   1ac30:	ldreq	r8, [sp, #20]
   1ac34:	ldreq	r3, [sp, #24]
   1ac38:	subeq	r8, r8, r4
   1ac3c:	subeq	sl, r3, r5
   1ac40:	mov	r3, #0
   1ac44:	mov	r2, r3
   1ac48:	rsb	r9, r4, #1
   1ac4c:	rsb	fp, r5, #1
   1ac50:	str	r7, [sp, #8]
   1ac54:	cmp	sl, r3
   1ac58:	cmpls	r8, r2
   1ac5c:	bls	1ae84 <__assert_fail@plt+0x8e00>
   1ac60:	cmp	r8, r2
   1ac64:	sub	lr, r3, r2
   1ac68:	bls	1ace0 <__assert_fail@plt+0x8c5c>
   1ac6c:	ldrb	ip, [r4, r2]
   1ac70:	sub	r1, ip, #48	; 0x30
   1ac74:	cmp	r1, #9
   1ac78:	bls	1ace0 <__assert_fail@plt+0x8c5c>
   1ac7c:	cmp	ip, #65	; 0x41
   1ac80:	mov	r0, ip
   1ac84:	bcc	1ac9c <__assert_fail@plt+0x8c18>
   1ac88:	cmp	ip, #90	; 0x5a
   1ac8c:	bls	1ae50 <__assert_fail@plt+0x8dcc>
   1ac90:	sub	r1, ip, #97	; 0x61
   1ac94:	cmp	r1, #25
   1ac98:	bls	1ae50 <__assert_fail@plt+0x8dcc>
   1ac9c:	cmp	ip, #126	; 0x7e
   1aca0:	beq	1ae8c <__assert_fail@plt+0x8e08>
   1aca4:	add	r0, ip, #256	; 0x100
   1aca8:	add	r1, lr, r2
   1acac:	cmp	sl, r1
   1acb0:	beq	1ae7c <__assert_fail@plt+0x8df8>
   1acb4:	ldrb	r1, [r5, r3]
   1acb8:	sub	ip, r1, #48	; 0x30
   1acbc:	cmp	ip, #9
   1acc0:	bhi	1ae10 <__assert_fail@plt+0x8d8c>
   1acc4:	mov	ip, #0
   1acc8:	cmp	ip, r0
   1accc:	bne	1aea0 <__assert_fail@plt+0x8e1c>
   1acd0:	add	r2, r2, #1
   1acd4:	cmp	r8, r2
   1acd8:	add	r3, r3, #1
   1acdc:	bhi	1ac6c <__assert_fail@plt+0x8be8>
   1ace0:	cmp	sl, r3
   1ace4:	ldrb	r1, [r5, r3]
   1ace8:	bls	1acf8 <__assert_fail@plt+0x8c74>
   1acec:	sub	r0, r1, #48	; 0x30
   1acf0:	cmp	r0, #9
   1acf4:	bhi	1adf4 <__assert_fail@plt+0x8d70>
   1acf8:	ldrb	r0, [r4, r2]
   1acfc:	add	ip, r4, r2
   1ad00:	cmp	r0, #48	; 0x30
   1ad04:	bne	1ad18 <__assert_fail@plt+0x8c94>
   1ad08:	add	r2, r9, ip
   1ad0c:	ldrb	r0, [ip, #1]!
   1ad10:	cmp	r0, #48	; 0x30
   1ad14:	beq	1ad08 <__assert_fail@plt+0x8c84>
   1ad18:	cmp	r1, #48	; 0x30
   1ad1c:	bne	1ad34 <__assert_fail@plt+0x8cb0>
   1ad20:	add	ip, r5, r3
   1ad24:	add	r3, fp, ip
   1ad28:	ldrb	r1, [ip, #1]!
   1ad2c:	cmp	r1, #48	; 0x30
   1ad30:	beq	1ad24 <__assert_fail@plt+0x8ca0>
   1ad34:	sub	ip, r0, #48	; 0x30
   1ad38:	cmp	ip, #9
   1ad3c:	sub	ip, r1, #48	; 0x30
   1ad40:	bhi	1ae40 <__assert_fail@plt+0x8dbc>
   1ad44:	cmp	ip, #9
   1ad48:	bhi	1add4 <__assert_fail@plt+0x8d50>
   1ad4c:	add	ip, r4, r2
   1ad50:	str	ip, [sp, #4]
   1ad54:	mov	r7, r2
   1ad58:	add	ip, r5, r3
   1ad5c:	str	ip, [sp]
   1ad60:	mov	ip, #0
   1ad64:	str	ip, [sp, #12]
   1ad68:	ldr	ip, [sp, #12]
   1ad6c:	add	r7, r7, #1
   1ad70:	cmp	ip, #0
   1ad74:	subeq	r1, r0, r1
   1ad78:	streq	r1, [sp, #12]
   1ad7c:	ldr	r1, [sp, #4]
   1ad80:	ldr	ip, [sp]
   1ad84:	ldrb	r0, [r1, #1]!
   1ad88:	str	r1, [sp, #4]
   1ad8c:	ldrb	r1, [ip, #1]!
   1ad90:	sub	lr, r0, #48	; 0x30
   1ad94:	cmp	lr, #9
   1ad98:	str	ip, [sp]
   1ad9c:	sub	ip, r7, r2
   1ada0:	add	ip, ip, r3
   1ada4:	sub	lr, r1, #48	; 0x30
   1ada8:	bls	1adcc <__assert_fail@plt+0x8d48>
   1adac:	cmp	lr, #9
   1adb0:	bls	1ae48 <__assert_fail@plt+0x8dc4>
   1adb4:	ldr	r3, [sp, #12]
   1adb8:	cmp	r3, #0
   1adbc:	bne	1aeb4 <__assert_fail@plt+0x8e30>
   1adc0:	mov	r3, ip
   1adc4:	mov	r2, r7
   1adc8:	b	1ac54 <__assert_fail@plt+0x8bd0>
   1adcc:	cmp	lr, #9
   1add0:	bls	1ad68 <__assert_fail@plt+0x8ce4>
   1add4:	mov	r7, #1
   1add8:	ldr	r2, [sp, #28]
   1addc:	ldr	r3, [r6]
   1ade0:	mov	r0, r7
   1ade4:	cmp	r2, r3
   1ade8:	bne	1ae9c <__assert_fail@plt+0x8e18>
   1adec:	add	sp, sp, #36	; 0x24
   1adf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adf4:	cmp	r8, r2
   1adf8:	beq	1ae0c <__assert_fail@plt+0x8d88>
   1adfc:	ldrb	ip, [r4, r2]
   1ae00:	sub	r0, ip, #48	; 0x30
   1ae04:	cmp	r0, #9
   1ae08:	bhi	1ac7c <__assert_fail@plt+0x8bf8>
   1ae0c:	mov	r0, #0
   1ae10:	cmp	r1, #65	; 0x41
   1ae14:	mov	ip, r1
   1ae18:	bcc	1ae30 <__assert_fail@plt+0x8dac>
   1ae1c:	cmp	r1, #90	; 0x5a
   1ae20:	bls	1acc8 <__assert_fail@plt+0x8c44>
   1ae24:	sub	r7, r1, #97	; 0x61
   1ae28:	cmp	r7, #25
   1ae2c:	bls	1acc8 <__assert_fail@plt+0x8c44>
   1ae30:	cmp	r1, #126	; 0x7e
   1ae34:	beq	1ae94 <__assert_fail@plt+0x8e10>
   1ae38:	add	ip, r1, #256	; 0x100
   1ae3c:	b	1acc8 <__assert_fail@plt+0x8c44>
   1ae40:	cmp	ip, #9
   1ae44:	bhi	1ac54 <__assert_fail@plt+0x8bd0>
   1ae48:	mvn	r7, #0
   1ae4c:	b	1add8 <__assert_fail@plt+0x8d54>
   1ae50:	add	r1, r2, lr
   1ae54:	cmp	sl, r1
   1ae58:	bne	1acb4 <__assert_fail@plt+0x8c30>
   1ae5c:	b	1acc4 <__assert_fail@plt+0x8c40>
   1ae60:	cmp	r0, #0
   1ae64:	ldr	r8, [sp, #20]
   1ae68:	ldreq	r0, [sp, #24]
   1ae6c:	sub	r8, r8, r4
   1ae70:	subeq	sl, r0, r5
   1ae74:	beq	1ac40 <__assert_fail@plt+0x8bbc>
   1ae78:	b	1ac10 <__assert_fail@plt+0x8b8c>
   1ae7c:	mov	r7, r0
   1ae80:	b	1add8 <__assert_fail@plt+0x8d54>
   1ae84:	ldr	r7, [sp, #8]
   1ae88:	b	1add8 <__assert_fail@plt+0x8d54>
   1ae8c:	mvn	r0, #0
   1ae90:	b	1aca8 <__assert_fail@plt+0x8c24>
   1ae94:	mvn	ip, #0
   1ae98:	b	1acc8 <__assert_fail@plt+0x8c44>
   1ae9c:	bl	11c7c <__stack_chk_fail@plt>
   1aea0:	sub	r7, r0, ip
   1aea4:	b	1add8 <__assert_fail@plt+0x8d54>
   1aea8:	ldr	r3, [sp, #24]
   1aeac:	sub	sl, r3, r5
   1aeb0:	b	1ac14 <__assert_fail@plt+0x8b90>
   1aeb4:	ldr	r7, [sp, #12]
   1aeb8:	b	1add8 <__assert_fail@plt+0x8d54>
   1aebc:	andeq	r5, r3, r0, lsl #30
   1aec0:			; <UNDEFINED> instruction: 0x00024bb0
   1aec4:			; <UNDEFINED> instruction: 0x00024bb4
   1aec8:	push	{r4, lr}
   1aecc:	mov	r1, #0
   1aed0:	bl	11f64 <setlocale@plt>
   1aed4:	subs	r4, r0, #0
   1aed8:	beq	1af04 <__assert_fail@plt+0x8e80>
   1aedc:	ldr	r1, [pc, #40]	; 1af0c <__assert_fail@plt+0x8e88>
   1aee0:	bl	11b50 <strcmp@plt>
   1aee4:	cmp	r0, #0
   1aee8:	popeq	{r4, pc}
   1aeec:	mov	r0, r4
   1aef0:	ldr	r1, [pc, #24]	; 1af10 <__assert_fail@plt+0x8e8c>
   1aef4:	bl	11b50 <strcmp@plt>
   1aef8:	adds	r0, r0, #0
   1aefc:	movne	r0, #1
   1af00:	pop	{r4, pc}
   1af04:	mov	r0, #1
   1af08:	pop	{r4, pc}
   1af0c:			; <UNDEFINED> instruction: 0x00024bb8
   1af10:			; <UNDEFINED> instruction: 0x00024bbc
   1af14:	andeq	r0, r0, r0
   1af18:	cmp	r0, #10
   1af1c:	movcc	r0, #10
   1af20:	push	{r4, r5, r6, r7, r8, lr}
   1af24:	orr	r7, r0, #1
   1af28:	cmn	r7, #1
   1af2c:	beq	1afa4 <__assert_fail@plt+0x8f20>
   1af30:	ldr	r8, [pc, #116]	; 1afac <__assert_fail@plt+0x8f28>
   1af34:	umull	r2, r3, r8, r7
   1af38:	cmp	r7, #9
   1af3c:	lsr	r3, r3, #1
   1af40:	add	r3, r3, r3, lsl #1
   1af44:	sub	r3, r7, r3
   1af48:	bls	1af90 <__assert_fail@plt+0x8f0c>
   1af4c:	cmp	r3, #0
   1af50:	beq	1af98 <__assert_fail@plt+0x8f14>
   1af54:	mov	r6, #16
   1af58:	mov	r5, #9
   1af5c:	mov	r4, #3
   1af60:	b	1af70 <__assert_fail@plt+0x8eec>
   1af64:	cmp	r1, #0
   1af68:	add	r6, r6, #8
   1af6c:	beq	1af98 <__assert_fail@plt+0x8f14>
   1af70:	add	r4, r4, #2
   1af74:	mov	r1, r4
   1af78:	mov	r0, r7
   1af7c:	bl	22620 <_obstack_memory_used@@Base+0x600>
   1af80:	add	r5, r5, r6
   1af84:	cmp	r5, r7
   1af88:	mov	r3, r1
   1af8c:	bcc	1af64 <__assert_fail@plt+0x8ee0>
   1af90:	cmp	r3, #0
   1af94:	bne	1afa4 <__assert_fail@plt+0x8f20>
   1af98:	add	r7, r7, #2
   1af9c:	cmn	r7, #1
   1afa0:	bne	1af34 <__assert_fail@plt+0x8eb0>
   1afa4:	mov	r0, r7
   1afa8:	pop	{r4, r5, r6, r7, r8, pc}
   1afac:	bge	feac5a60 <optarg@@GLIBC_2.4+0xfea8f780>
   1afb0:	push	{r4, lr}
   1afb4:	ror	r0, r0, #3
   1afb8:	bl	22620 <_obstack_memory_used@@Base+0x600>
   1afbc:	mov	r0, r1
   1afc0:	pop	{r4, pc}
   1afc4:	sub	r0, r1, r0
   1afc8:	clz	r0, r0
   1afcc:	lsr	r0, r0, #5
   1afd0:	bx	lr
   1afd4:	push	{r4, lr}
   1afd8:	mov	r4, r0
   1afdc:	mov	r0, r1
   1afe0:	ldr	r3, [r4, #24]
   1afe4:	ldr	r1, [r4, #8]
   1afe8:	blx	r3
   1afec:	ldr	r3, [r4, #8]
   1aff0:	cmp	r3, r0
   1aff4:	bls	1b004 <__assert_fail@plt+0x8f80>
   1aff8:	ldr	r3, [r4]
   1affc:	add	r0, r3, r0, lsl #3
   1b000:	pop	{r4, pc}
   1b004:	bl	12060 <abort@plt>
   1b008:	push	{r4, r5, r6, r7, r8, lr}
   1b00c:	mov	r8, r2
   1b010:	mov	r5, r1
   1b014:	mov	r7, r3
   1b018:	mov	r6, r0
   1b01c:	bl	1afd4 <__assert_fail@plt+0x8f50>
   1b020:	str	r0, [r8]
   1b024:	ldr	r1, [r0]
   1b028:	cmp	r1, #0
   1b02c:	beq	1b114 <__assert_fail@plt+0x9090>
   1b030:	cmp	r1, r5
   1b034:	mov	r4, r0
   1b038:	beq	1b0d8 <__assert_fail@plt+0x9054>
   1b03c:	ldr	r3, [r6, #28]
   1b040:	mov	r0, r5
   1b044:	blx	r3
   1b048:	cmp	r0, #0
   1b04c:	ldrne	r3, [r4]
   1b050:	bne	1b0dc <__assert_fail@plt+0x9058>
   1b054:	ldr	r2, [r4, #4]
   1b058:	cmp	r2, #0
   1b05c:	beq	1b114 <__assert_fail@plt+0x9090>
   1b060:	ldr	r3, [r2]
   1b064:	cmp	r5, r3
   1b068:	bne	1b08c <__assert_fail@plt+0x9008>
   1b06c:	b	1b0ac <__assert_fail@plt+0x9028>
   1b070:	ldr	r4, [r4, #4]
   1b074:	ldr	r2, [r4, #4]
   1b078:	cmp	r2, #0
   1b07c:	beq	1b114 <__assert_fail@plt+0x9090>
   1b080:	ldr	r3, [r2]
   1b084:	cmp	r3, r5
   1b088:	beq	1b0ac <__assert_fail@plt+0x9028>
   1b08c:	mov	r1, r3
   1b090:	mov	r0, r5
   1b094:	ldr	r3, [r6, #28]
   1b098:	blx	r3
   1b09c:	cmp	r0, #0
   1b0a0:	beq	1b070 <__assert_fail@plt+0x8fec>
   1b0a4:	ldr	r2, [r4, #4]
   1b0a8:	ldr	r3, [r2]
   1b0ac:	cmp	r7, #0
   1b0b0:	beq	1b10c <__assert_fail@plt+0x9088>
   1b0b4:	ldr	r0, [r2, #4]
   1b0b8:	mov	r1, #0
   1b0bc:	str	r0, [r4, #4]
   1b0c0:	str	r1, [r2]
   1b0c4:	ldr	r1, [r6, #36]	; 0x24
   1b0c8:	mov	r0, r3
   1b0cc:	str	r1, [r2, #4]
   1b0d0:	str	r2, [r6, #36]	; 0x24
   1b0d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b0d8:	mov	r3, r1
   1b0dc:	cmp	r7, #0
   1b0e0:	beq	1b10c <__assert_fail@plt+0x9088>
   1b0e4:	ldr	r2, [r4, #4]
   1b0e8:	cmp	r2, #0
   1b0ec:	movne	ip, #0
   1b0f0:	ldmne	r2, {r0, r1}
   1b0f4:	streq	r2, [r4]
   1b0f8:	stmne	r4, {r0, r1}
   1b0fc:	strne	ip, [r2]
   1b100:	ldrne	r1, [r6, #36]	; 0x24
   1b104:	strne	r1, [r2, #4]
   1b108:	strne	r2, [r6, #36]	; 0x24
   1b10c:	mov	r0, r3
   1b110:	pop	{r4, r5, r6, r7, r8, pc}
   1b114:	mov	r3, #0
   1b118:	mov	r0, r3
   1b11c:	pop	{r4, r5, r6, r7, r8, pc}
   1b120:	ldr	r2, [pc, #164]	; 1b1cc <__assert_fail@plt+0x9148>
   1b124:	ldr	r3, [r0]
   1b128:	cmp	r3, r2
   1b12c:	beq	1b1b4 <__assert_fail@plt+0x9130>
   1b130:	vldr	s15, [r3, #8]
   1b134:	vldr	s14, [pc, #128]	; 1b1bc <__assert_fail@plt+0x9138>
   1b138:	vcmpe.f32	s15, s14
   1b13c:	vmrs	APSR_nzcv, fpscr
   1b140:	ble	1b1a8 <__assert_fail@plt+0x9124>
   1b144:	vldr	s13, [pc, #116]	; 1b1c0 <__assert_fail@plt+0x913c>
   1b148:	vcmpe.f32	s15, s13
   1b14c:	vmrs	APSR_nzcv, fpscr
   1b150:	bpl	1b1a8 <__assert_fail@plt+0x9124>
   1b154:	vldr	s13, [pc, #104]	; 1b1c4 <__assert_fail@plt+0x9140>
   1b158:	vldr	s12, [r3, #12]
   1b15c:	vcmpe.f32	s12, s13
   1b160:	vmrs	APSR_nzcv, fpscr
   1b164:	ble	1b1a8 <__assert_fail@plt+0x9124>
   1b168:	vldr	s13, [r3]
   1b16c:	vcmpe.f32	s13, #0.0
   1b170:	vmrs	APSR_nzcv, fpscr
   1b174:	blt	1b1a8 <__assert_fail@plt+0x9124>
   1b178:	vadd.f32	s14, s13, s14
   1b17c:	vldr	s13, [r3, #4]
   1b180:	vcmpe.f32	s14, s13
   1b184:	vmrs	APSR_nzcv, fpscr
   1b188:	bpl	1b1a8 <__assert_fail@plt+0x9124>
   1b18c:	vldr	s12, [pc, #52]	; 1b1c8 <__assert_fail@plt+0x9144>
   1b190:	vcmpe.f32	s13, s12
   1b194:	vmrs	APSR_nzcv, fpscr
   1b198:	bhi	1b1a8 <__assert_fail@plt+0x9124>
   1b19c:	vcmpe.f32	s15, s14
   1b1a0:	vmrs	APSR_nzcv, fpscr
   1b1a4:	bgt	1b1b4 <__assert_fail@plt+0x9130>
   1b1a8:	str	r2, [r0]
   1b1ac:	mov	r0, #0
   1b1b0:	bx	lr
   1b1b4:	mov	r0, #1
   1b1b8:	bx	lr
   1b1bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b1c0:	svccc	0x00666666
   1b1c4:	svccc	0x008ccccd
   1b1c8:	svccc	0x00800000
   1b1cc:	andeq	r4, r2, r4, asr #23
   1b1d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b1d4:	ldr	r3, [r1, #4]
   1b1d8:	ldr	r6, [r1]
   1b1dc:	cmp	r6, r3
   1b1e0:	bcs	1b2a8 <__assert_fail@plt+0x9224>
   1b1e4:	mov	r8, r2
   1b1e8:	mov	r5, r0
   1b1ec:	mov	r7, r1
   1b1f0:	add	r6, r6, #8
   1b1f4:	mov	r9, #0
   1b1f8:	b	1b208 <__assert_fail@plt+0x9184>
   1b1fc:	cmp	r3, r6
   1b200:	add	r6, r6, #8
   1b204:	bls	1b2a8 <__assert_fail@plt+0x9224>
   1b208:	ldr	sl, [r6, #-8]
   1b20c:	cmp	sl, #0
   1b210:	beq	1b1fc <__assert_fail@plt+0x9178>
   1b214:	ldr	r4, [r6, #-4]
   1b218:	cmp	r4, #0
   1b21c:	bne	1b23c <__assert_fail@plt+0x91b8>
   1b220:	b	1b28c <__assert_fail@plt+0x9208>
   1b224:	ldr	r2, [r0, #4]
   1b228:	cmp	r3, #0
   1b22c:	str	r2, [r4, #4]
   1b230:	str	r4, [r0, #4]
   1b234:	mov	r4, r3
   1b238:	beq	1b288 <__assert_fail@plt+0x9204>
   1b23c:	ldr	sl, [r4]
   1b240:	mov	r0, r5
   1b244:	mov	r1, sl
   1b248:	bl	1afd4 <__assert_fail@plt+0x8f50>
   1b24c:	ldr	r3, [r4, #4]
   1b250:	ldr	r2, [r0]
   1b254:	cmp	r2, #0
   1b258:	bne	1b224 <__assert_fail@plt+0x91a0>
   1b25c:	ldr	r1, [r5, #12]
   1b260:	str	sl, [r0]
   1b264:	add	r1, r1, #1
   1b268:	str	r1, [r5, #12]
   1b26c:	str	r2, [r4]
   1b270:	ldr	r2, [r5, #36]	; 0x24
   1b274:	cmp	r3, #0
   1b278:	str	r2, [r4, #4]
   1b27c:	str	r4, [r5, #36]	; 0x24
   1b280:	mov	r4, r3
   1b284:	bne	1b23c <__assert_fail@plt+0x91b8>
   1b288:	ldr	sl, [r6, #-8]
   1b28c:	cmp	r8, #0
   1b290:	str	r9, [r6, #-4]
   1b294:	beq	1b2b0 <__assert_fail@plt+0x922c>
   1b298:	ldr	r3, [r7, #4]
   1b29c:	cmp	r3, r6
   1b2a0:	add	r6, r6, #8
   1b2a4:	bhi	1b208 <__assert_fail@plt+0x9184>
   1b2a8:	mov	r0, #1
   1b2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b2b0:	mov	r1, sl
   1b2b4:	mov	r0, r5
   1b2b8:	bl	1afd4 <__assert_fail@plt+0x8f50>
   1b2bc:	ldr	r3, [r0]
   1b2c0:	mov	r4, r0
   1b2c4:	cmp	r3, #0
   1b2c8:	beq	1b308 <__assert_fail@plt+0x9284>
   1b2cc:	ldr	r0, [r5, #36]	; 0x24
   1b2d0:	cmp	r0, #0
   1b2d4:	beq	1b31c <__assert_fail@plt+0x9298>
   1b2d8:	ldr	r3, [r0, #4]
   1b2dc:	str	r3, [r5, #36]	; 0x24
   1b2e0:	ldr	r3, [r4, #4]
   1b2e4:	str	sl, [r0]
   1b2e8:	str	r3, [r0, #4]
   1b2ec:	str	r0, [r4, #4]
   1b2f0:	ldr	r2, [r7, #12]
   1b2f4:	str	r9, [r6, #-8]
   1b2f8:	sub	r2, r2, #1
   1b2fc:	ldr	r3, [r7, #4]
   1b300:	str	r2, [r7, #12]
   1b304:	b	1b1fc <__assert_fail@plt+0x9178>
   1b308:	ldr	r3, [r5, #12]
   1b30c:	str	sl, [r0]
   1b310:	add	r3, r3, #1
   1b314:	str	r3, [r5, #12]
   1b318:	b	1b2f0 <__assert_fail@plt+0x926c>
   1b31c:	mov	r0, #8
   1b320:	bl	11dfc <malloc@plt>
   1b324:	cmp	r0, #0
   1b328:	bne	1b2e0 <__assert_fail@plt+0x925c>
   1b32c:	mov	r0, r8
   1b330:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b334:	ldr	r0, [r0, #8]
   1b338:	bx	lr
   1b33c:	ldr	r0, [r0, #12]
   1b340:	bx	lr
   1b344:	ldr	r0, [r0, #16]
   1b348:	bx	lr
   1b34c:	ldm	r0, {r1, r3}
   1b350:	cmp	r1, r3
   1b354:	bcs	1b3bc <__assert_fail@plt+0x9338>
   1b358:	sub	ip, r3, #1
   1b35c:	sub	ip, ip, r1
   1b360:	add	r3, r1, #16
   1b364:	bic	ip, ip, #7
   1b368:	add	ip, ip, r3
   1b36c:	add	r1, r1, #8
   1b370:	mov	r0, #0
   1b374:	b	1b384 <__assert_fail@plt+0x9300>
   1b378:	add	r1, r1, #8
   1b37c:	cmp	r1, ip
   1b380:	bxeq	lr
   1b384:	ldr	r3, [r1, #-8]
   1b388:	cmp	r3, #0
   1b38c:	beq	1b378 <__assert_fail@plt+0x92f4>
   1b390:	ldr	r3, [r1, #-4]
   1b394:	mov	r2, #1
   1b398:	cmp	r3, #0
   1b39c:	beq	1b3b0 <__assert_fail@plt+0x932c>
   1b3a0:	ldr	r3, [r3, #4]
   1b3a4:	add	r2, r2, #1
   1b3a8:	cmp	r3, #0
   1b3ac:	bne	1b3a0 <__assert_fail@plt+0x931c>
   1b3b0:	cmp	r0, r2
   1b3b4:	movcc	r0, r2
   1b3b8:	b	1b378 <__assert_fail@plt+0x92f4>
   1b3bc:	mov	r0, #0
   1b3c0:	bx	lr
   1b3c4:	ldm	r0, {r1, r3}
   1b3c8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b3cc:	cmp	r1, r3
   1b3d0:	bcs	1b460 <__assert_fail@plt+0x93dc>
   1b3d4:	sub	ip, r3, #1
   1b3d8:	sub	ip, ip, r1
   1b3dc:	add	r3, r1, #16
   1b3e0:	bic	ip, ip, #7
   1b3e4:	mov	r2, #0
   1b3e8:	add	ip, ip, r3
   1b3ec:	add	r1, r1, #8
   1b3f0:	mov	lr, r2
   1b3f4:	b	1b404 <__assert_fail@plt+0x9380>
   1b3f8:	add	r1, r1, #8
   1b3fc:	cmp	r1, ip
   1b400:	beq	1b440 <__assert_fail@plt+0x93bc>
   1b404:	ldr	r3, [r1, #-8]
   1b408:	cmp	r3, #0
   1b40c:	beq	1b3f8 <__assert_fail@plt+0x9374>
   1b410:	ldr	r3, [r1, #-4]
   1b414:	add	lr, lr, #1
   1b418:	cmp	r3, #0
   1b41c:	add	r2, r2, #1
   1b420:	beq	1b3f8 <__assert_fail@plt+0x9374>
   1b424:	ldr	r3, [r3, #4]
   1b428:	add	r2, r2, #1
   1b42c:	cmp	r3, #0
   1b430:	bne	1b424 <__assert_fail@plt+0x93a0>
   1b434:	add	r1, r1, #8
   1b438:	cmp	r1, ip
   1b43c:	bne	1b404 <__assert_fail@plt+0x9380>
   1b440:	ldr	r3, [r0, #12]
   1b444:	cmp	r3, lr
   1b448:	ldreq	r0, [r0, #16]
   1b44c:	subeq	r0, r0, r2
   1b450:	clzeq	r0, r0
   1b454:	lsreq	r0, r0, #5
   1b458:	movne	r0, #0
   1b45c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b460:	mov	r2, #0
   1b464:	mov	lr, r2
   1b468:	b	1b440 <__assert_fail@plt+0x93bc>
   1b46c:	push	{r4, r5, r6, r7, lr}
   1b470:	mov	r4, r1
   1b474:	ldr	r2, [r0]
   1b478:	ldr	r1, [r0, #4]
   1b47c:	sub	sp, sp, #12
   1b480:	cmp	r2, r1
   1b484:	ldr	r3, [r0, #16]
   1b488:	ldrd	r6, [r0, #8]
   1b48c:	bcs	1b570 <__assert_fail@plt+0x94ec>
   1b490:	sub	ip, r1, #1
   1b494:	sub	ip, ip, r2
   1b498:	bic	ip, ip, #7
   1b49c:	add	r1, r2, #16
   1b4a0:	add	ip, ip, r1
   1b4a4:	add	r0, r2, #8
   1b4a8:	mov	r5, #0
   1b4ac:	b	1b4bc <__assert_fail@plt+0x9438>
   1b4b0:	add	r0, r0, #8
   1b4b4:	cmp	r0, ip
   1b4b8:	beq	1b4fc <__assert_fail@plt+0x9478>
   1b4bc:	ldr	r2, [r0, #-8]
   1b4c0:	cmp	r2, #0
   1b4c4:	beq	1b4b0 <__assert_fail@plt+0x942c>
   1b4c8:	ldr	r2, [r0, #-4]
   1b4cc:	mov	r1, #1
   1b4d0:	cmp	r2, #0
   1b4d4:	beq	1b4e8 <__assert_fail@plt+0x9464>
   1b4d8:	ldr	r2, [r2, #4]
   1b4dc:	add	r1, r1, #1
   1b4e0:	cmp	r2, #0
   1b4e4:	bne	1b4d8 <__assert_fail@plt+0x9454>
   1b4e8:	cmp	r5, r1
   1b4ec:	add	r0, r0, #8
   1b4f0:	movcc	r5, r1
   1b4f4:	cmp	r0, ip
   1b4f8:	bne	1b4bc <__assert_fail@plt+0x9438>
   1b4fc:	ldr	r2, [pc, #124]	; 1b580 <__assert_fail@plt+0x94fc>
   1b500:	mov	r1, #1
   1b504:	mov	r0, r4
   1b508:	bl	11f10 <__fprintf_chk@plt>
   1b50c:	mov	r3, r6
   1b510:	ldr	r2, [pc, #108]	; 1b584 <__assert_fail@plt+0x9500>
   1b514:	mov	r1, #1
   1b518:	mov	r0, r4
   1b51c:	bl	11f10 <__fprintf_chk@plt>
   1b520:	vmov	s15, r7
   1b524:	vldr	d5, [pc, #76]	; 1b578 <__assert_fail@plt+0x94f4>
   1b528:	mov	r3, r7
   1b52c:	ldr	r2, [pc, #84]	; 1b588 <__assert_fail@plt+0x9504>
   1b530:	vcvt.f64.u32	d6, s15
   1b534:	vmov	s15, r6
   1b538:	mov	r1, #1
   1b53c:	mov	r0, r4
   1b540:	vcvt.f64.u32	d7, s15
   1b544:	vmul.f64	d6, d6, d5
   1b548:	vdiv.f64	d5, d6, d7
   1b54c:	vstr	d5, [sp]
   1b550:	bl	11f10 <__fprintf_chk@plt>
   1b554:	mov	r3, r5
   1b558:	mov	r0, r4
   1b55c:	ldr	r2, [pc, #40]	; 1b58c <__assert_fail@plt+0x9508>
   1b560:	mov	r1, #1
   1b564:	add	sp, sp, #12
   1b568:	pop	{r4, r5, r6, r7, lr}
   1b56c:	b	11f10 <__fprintf_chk@plt>
   1b570:	mov	r5, #0
   1b574:	b	1b4fc <__assert_fail@plt+0x9478>
   1b578:	andeq	r0, r0, r0
   1b57c:	subsmi	r0, r9, r0
   1b580:	ldrdeq	r4, [r2], -r8
   1b584:	strdeq	r4, [r2], -r0
   1b588:	andeq	r4, r2, r8, lsl #24
   1b58c:	andeq	r4, r2, ip, lsr #24
   1b590:	push	{r4, r5, r6, lr}
   1b594:	mov	r6, r0
   1b598:	mov	r5, r1
   1b59c:	bl	1afd4 <__assert_fail@plt+0x8f50>
   1b5a0:	ldr	r3, [r0]
   1b5a4:	cmp	r3, #0
   1b5a8:	beq	1b5e4 <__assert_fail@plt+0x9560>
   1b5ac:	mov	r4, r0
   1b5b0:	b	1b5b8 <__assert_fail@plt+0x9534>
   1b5b4:	ldr	r3, [r4]
   1b5b8:	cmp	r3, r5
   1b5bc:	mov	r1, r3
   1b5c0:	mov	r0, r5
   1b5c4:	beq	1b5f0 <__assert_fail@plt+0x956c>
   1b5c8:	ldr	r3, [r6, #28]
   1b5cc:	blx	r3
   1b5d0:	cmp	r0, #0
   1b5d4:	bne	1b5ec <__assert_fail@plt+0x9568>
   1b5d8:	ldr	r4, [r4, #4]
   1b5dc:	cmp	r4, #0
   1b5e0:	bne	1b5b4 <__assert_fail@plt+0x9530>
   1b5e4:	mov	r0, #0
   1b5e8:	pop	{r4, r5, r6, pc}
   1b5ec:	ldr	r5, [r4]
   1b5f0:	mov	r0, r5
   1b5f4:	pop	{r4, r5, r6, pc}
   1b5f8:	ldr	r3, [r0, #16]
   1b5fc:	cmp	r3, #0
   1b600:	beq	1b650 <__assert_fail@plt+0x95cc>
   1b604:	ldr	r3, [r0]
   1b608:	ldr	r2, [r0, #4]
   1b60c:	cmp	r3, r2
   1b610:	bcs	1b648 <__assert_fail@plt+0x95c4>
   1b614:	ldr	r0, [r3]
   1b618:	cmp	r0, #0
   1b61c:	bxne	lr
   1b620:	sub	r2, r2, #1
   1b624:	sub	r2, r2, r3
   1b628:	bic	r2, r2, #7
   1b62c:	add	r2, r3, r2
   1b630:	b	1b640 <__assert_fail@plt+0x95bc>
   1b634:	ldr	r0, [r3, #8]!
   1b638:	cmp	r0, #0
   1b63c:	bxne	lr
   1b640:	cmp	r3, r2
   1b644:	bne	1b634 <__assert_fail@plt+0x95b0>
   1b648:	push	{r4, lr}
   1b64c:	bl	12060 <abort@plt>
   1b650:	mov	r0, r3
   1b654:	bx	lr
   1b658:	push	{r4, r5, r6, lr}
   1b65c:	mov	r5, r0
   1b660:	mov	r4, r1
   1b664:	bl	1afd4 <__assert_fail@plt+0x8f50>
   1b668:	mov	r2, r0
   1b66c:	mov	r3, r0
   1b670:	b	1b67c <__assert_fail@plt+0x95f8>
   1b674:	cmp	r3, #0
   1b678:	beq	1b690 <__assert_fail@plt+0x960c>
   1b67c:	ldm	r3, {r1, r3}
   1b680:	cmp	r1, r4
   1b684:	bne	1b674 <__assert_fail@plt+0x95f0>
   1b688:	cmp	r3, #0
   1b68c:	bne	1b6b8 <__assert_fail@plt+0x9634>
   1b690:	ldr	r3, [r5, #4]
   1b694:	b	1b6a4 <__assert_fail@plt+0x9620>
   1b698:	ldr	r0, [r2]
   1b69c:	cmp	r0, #0
   1b6a0:	popne	{r4, r5, r6, pc}
   1b6a4:	add	r2, r2, #8
   1b6a8:	cmp	r3, r2
   1b6ac:	bhi	1b698 <__assert_fail@plt+0x9614>
   1b6b0:	mov	r0, #0
   1b6b4:	pop	{r4, r5, r6, pc}
   1b6b8:	ldr	r0, [r3]
   1b6bc:	pop	{r4, r5, r6, pc}
   1b6c0:	push	{r4, r5, lr}
   1b6c4:	ldm	r0, {r5, lr}
   1b6c8:	cmp	lr, r5
   1b6cc:	bls	1b750 <__assert_fail@plt+0x96cc>
   1b6d0:	mov	ip, #0
   1b6d4:	ldr	r3, [r5]
   1b6d8:	cmp	r3, #0
   1b6dc:	bne	1b6f8 <__assert_fail@plt+0x9674>
   1b6e0:	add	r5, r5, #8
   1b6e4:	cmp	lr, r5
   1b6e8:	bhi	1b6d4 <__assert_fail@plt+0x9650>
   1b6ec:	mov	r2, ip
   1b6f0:	mov	r0, r2
   1b6f4:	pop	{r4, r5, pc}
   1b6f8:	cmp	r2, ip
   1b6fc:	bls	1b6ec <__assert_fail@plt+0x9668>
   1b700:	str	r3, [r1, ip, lsl #2]
   1b704:	ldr	r3, [r5, #4]
   1b708:	add	r4, ip, #1
   1b70c:	cmp	r3, #0
   1b710:	add	lr, r1, ip, lsl #2
   1b714:	beq	1b744 <__assert_fail@plt+0x96c0>
   1b718:	mov	ip, r4
   1b71c:	cmp	r2, ip
   1b720:	beq	1b6f0 <__assert_fail@plt+0x966c>
   1b724:	ldr	r4, [r3]
   1b728:	add	ip, ip, #1
   1b72c:	str	r4, [lr, #4]!
   1b730:	ldr	r3, [r3, #4]
   1b734:	cmp	r3, #0
   1b738:	bne	1b71c <__assert_fail@plt+0x9698>
   1b73c:	ldr	lr, [r0, #4]
   1b740:	b	1b6e0 <__assert_fail@plt+0x965c>
   1b744:	ldr	lr, [r0, #4]
   1b748:	mov	ip, r4
   1b74c:	b	1b6e0 <__assert_fail@plt+0x965c>
   1b750:	mov	r2, #0
   1b754:	b	1b6f0 <__assert_fail@plt+0x966c>
   1b758:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b75c:	ldr	r3, [r0, #4]
   1b760:	ldr	r8, [r0]
   1b764:	cmp	r3, r8
   1b768:	bls	1b7d0 <__assert_fail@plt+0x974c>
   1b76c:	mov	r7, r2
   1b770:	mov	r6, r1
   1b774:	mov	r9, r0
   1b778:	mov	r5, #0
   1b77c:	ldr	r0, [r8]
   1b780:	cmp	r0, #0
   1b784:	bne	1b79c <__assert_fail@plt+0x9718>
   1b788:	add	r8, r8, #8
   1b78c:	cmp	r3, r8
   1b790:	bhi	1b77c <__assert_fail@plt+0x96f8>
   1b794:	mov	r0, r5
   1b798:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b79c:	mov	r4, r8
   1b7a0:	b	1b7a8 <__assert_fail@plt+0x9724>
   1b7a4:	ldr	r0, [r4]
   1b7a8:	mov	r1, r7
   1b7ac:	blx	r6
   1b7b0:	cmp	r0, #0
   1b7b4:	beq	1b794 <__assert_fail@plt+0x9710>
   1b7b8:	ldr	r4, [r4, #4]
   1b7bc:	add	r5, r5, #1
   1b7c0:	cmp	r4, #0
   1b7c4:	bne	1b7a4 <__assert_fail@plt+0x9720>
   1b7c8:	ldr	r3, [r9, #4]
   1b7cc:	b	1b788 <__assert_fail@plt+0x9704>
   1b7d0:	mov	r5, #0
   1b7d4:	b	1b794 <__assert_fail@plt+0x9710>
   1b7d8:	push	{r4, r5, r6, lr}
   1b7dc:	mov	r4, r0
   1b7e0:	ldrb	r0, [r0]
   1b7e4:	cmp	r0, #0
   1b7e8:	beq	1b818 <__assert_fail@plt+0x9794>
   1b7ec:	mov	r5, r1
   1b7f0:	mov	r1, #0
   1b7f4:	rsb	r1, r1, r1, lsl #5
   1b7f8:	add	r0, r1, r0
   1b7fc:	mov	r1, r5
   1b800:	bl	22620 <_obstack_memory_used@@Base+0x600>
   1b804:	ldrb	r0, [r4, #1]!
   1b808:	cmp	r0, #0
   1b80c:	bne	1b7f4 <__assert_fail@plt+0x9770>
   1b810:	mov	r0, r1
   1b814:	pop	{r4, r5, r6, pc}
   1b818:	mov	r1, r0
   1b81c:	mov	r0, r1
   1b820:	pop	{r4, r5, r6, pc}
   1b824:	push	{lr}		; (str lr, [sp, #-4]!)
   1b828:	mov	ip, r0
   1b82c:	ldr	lr, [pc, #16]	; 1b844 <__assert_fail@plt+0x97c0>
   1b830:	ldm	lr!, {r0, r1, r2, r3}
   1b834:	ldr	lr, [lr]
   1b838:	stmia	ip!, {r0, r1, r2, r3}
   1b83c:	str	lr, [ip]
   1b840:	pop	{pc}		; (ldr pc, [sp], #4)
   1b844:	andeq	r4, r2, r4, asr #23
   1b848:	push	{r4, r5, r6, r7, r8, lr}
   1b84c:	sub	sp, sp, #8
   1b850:	cmp	r2, #0
   1b854:	ldr	ip, [pc, #300]	; 1b988 <__assert_fail@plt+0x9904>
   1b858:	str	r0, [sp, #4]
   1b85c:	ldr	r5, [pc, #296]	; 1b98c <__assert_fail@plt+0x9908>
   1b860:	mov	r0, #40	; 0x28
   1b864:	movne	r5, r2
   1b868:	cmp	r3, #0
   1b86c:	movne	r8, r3
   1b870:	moveq	r8, ip
   1b874:	mov	r6, r1
   1b878:	bl	11dfc <malloc@plt>
   1b87c:	subs	r4, r0, #0
   1b880:	beq	1b94c <__assert_fail@plt+0x98c8>
   1b884:	cmp	r6, #0
   1b888:	add	r0, r4, #20
   1b88c:	beq	1b928 <__assert_fail@plt+0x98a4>
   1b890:	str	r6, [r4, #20]
   1b894:	bl	1b120 <__assert_fail@plt+0x909c>
   1b898:	cmp	r0, #0
   1b89c:	beq	1b940 <__assert_fail@plt+0x98bc>
   1b8a0:	ldrb	r3, [r6, #16]
   1b8a4:	cmp	r3, #0
   1b8a8:	vldreq	s13, [r6, #8]
   1b8ac:	beq	1b958 <__assert_fail@plt+0x98d4>
   1b8b0:	ldr	r0, [sp, #4]
   1b8b4:	bl	1af18 <__assert_fail@plt+0x8e94>
   1b8b8:	lsrs	r3, r0, #30
   1b8bc:	movne	r7, #1
   1b8c0:	moveq	r7, #0
   1b8c4:	tst	r0, #536870912	; 0x20000000
   1b8c8:	mov	r6, r0
   1b8cc:	bne	1b940 <__assert_fail@plt+0x98bc>
   1b8d0:	cmp	r7, #0
   1b8d4:	bne	1b940 <__assert_fail@plt+0x98bc>
   1b8d8:	cmp	r0, #0
   1b8dc:	str	r0, [r4, #8]
   1b8e0:	beq	1b940 <__assert_fail@plt+0x98bc>
   1b8e4:	mov	r1, #8
   1b8e8:	bl	11b2c <calloc@plt>
   1b8ec:	cmp	r0, #0
   1b8f0:	str	r0, [r4]
   1b8f4:	beq	1b940 <__assert_fail@plt+0x98bc>
   1b8f8:	ldr	r3, [sp, #32]
   1b8fc:	add	r0, r0, r6, lsl #3
   1b900:	str	r0, [r4, #4]
   1b904:	str	r7, [r4, #12]
   1b908:	mov	r0, r4
   1b90c:	str	r7, [r4, #16]
   1b910:	str	r5, [r4, #24]
   1b914:	str	r8, [r4, #28]
   1b918:	str	r3, [r4, #32]
   1b91c:	str	r7, [r4, #36]	; 0x24
   1b920:	add	sp, sp, #8
   1b924:	pop	{r4, r5, r6, r7, r8, pc}
   1b928:	ldr	r3, [pc, #96]	; 1b990 <__assert_fail@plt+0x990c>
   1b92c:	str	r3, [r4, #20]
   1b930:	bl	1b120 <__assert_fail@plt+0x909c>
   1b934:	cmp	r0, #0
   1b938:	vldrne	s13, [pc, #64]	; 1b980 <__assert_fail@plt+0x98fc>
   1b93c:	bne	1b958 <__assert_fail@plt+0x98d4>
   1b940:	mov	r0, r4
   1b944:	bl	11bb0 <free@plt>
   1b948:	mov	r4, #0
   1b94c:	mov	r0, r4
   1b950:	add	sp, sp, #8
   1b954:	pop	{r4, r5, r6, r7, r8, pc}
   1b958:	vldr	s15, [sp, #4]
   1b95c:	vldr	s14, [pc, #32]	; 1b984 <__assert_fail@plt+0x9900>
   1b960:	vcvt.f32.u32	s12, s15
   1b964:	vdiv.f32	s15, s12, s13
   1b968:	vcmpe.f32	s15, s14
   1b96c:	vmrs	APSR_nzcv, fpscr
   1b970:	bge	1b940 <__assert_fail@plt+0x98bc>
   1b974:	vcvt.u32.f32	s15, s15
   1b978:	vstr	s15, [sp, #4]
   1b97c:	b	1b8b0 <__assert_fail@plt+0x982c>
   1b980:	svccc	0x004ccccd
   1b984:	svcmi	0x00800000
   1b988:	andeq	sl, r1, r4, asr #31
   1b98c:			; <UNDEFINED> instruction: 0x0001afb0
   1b990:	andeq	r4, r2, r4, asr #23
   1b994:	push	{r4, r5, r6, r7, r8, lr}
   1b998:	mov	r5, r0
   1b99c:	ldr	r6, [r0]
   1b9a0:	ldr	r2, [r0, #4]
   1b9a4:	cmp	r6, r2
   1b9a8:	addcc	r6, r6, #8
   1b9ac:	movcc	r7, #0
   1b9b0:	bcc	1b9c4 <__assert_fail@plt+0x9940>
   1b9b4:	b	1ba38 <__assert_fail@plt+0x99b4>
   1b9b8:	cmp	r2, r6
   1b9bc:	add	r6, r6, #8
   1b9c0:	bls	1ba38 <__assert_fail@plt+0x99b4>
   1b9c4:	ldr	r3, [r6, #-8]
   1b9c8:	cmp	r3, #0
   1b9cc:	beq	1b9b8 <__assert_fail@plt+0x9934>
   1b9d0:	ldr	r4, [r6, #-4]
   1b9d4:	ldr	r2, [r5, #32]
   1b9d8:	cmp	r4, #0
   1b9dc:	beq	1ba10 <__assert_fail@plt+0x998c>
   1b9e0:	cmp	r2, #0
   1b9e4:	beq	1b9f4 <__assert_fail@plt+0x9970>
   1b9e8:	ldr	r0, [r4]
   1b9ec:	blx	r2
   1b9f0:	ldr	r2, [r5, #32]
   1b9f4:	ldr	r3, [r4, #4]
   1b9f8:	ldr	r1, [r5, #36]	; 0x24
   1b9fc:	str	r7, [r4]
   1ba00:	str	r1, [r4, #4]
   1ba04:	str	r4, [r5, #36]	; 0x24
   1ba08:	subs	r4, r3, #0
   1ba0c:	bne	1b9e0 <__assert_fail@plt+0x995c>
   1ba10:	cmp	r2, #0
   1ba14:	beq	1ba20 <__assert_fail@plt+0x999c>
   1ba18:	ldr	r0, [r6, #-8]
   1ba1c:	blx	r2
   1ba20:	str	r7, [r6, #-8]
   1ba24:	str	r7, [r6, #-4]
   1ba28:	ldr	r2, [r5, #4]
   1ba2c:	cmp	r2, r6
   1ba30:	add	r6, r6, #8
   1ba34:	bhi	1b9c4 <__assert_fail@plt+0x9940>
   1ba38:	mov	r3, #0
   1ba3c:	str	r3, [r5, #12]
   1ba40:	str	r3, [r5, #16]
   1ba44:	pop	{r4, r5, r6, r7, r8, pc}
   1ba48:	ldr	r3, [r0, #32]
   1ba4c:	push	{r4, r5, r6, lr}
   1ba50:	cmp	r3, #0
   1ba54:	mov	r6, r0
   1ba58:	ldr	r5, [r0]
   1ba5c:	ldr	r3, [r0, #4]
   1ba60:	beq	1bac8 <__assert_fail@plt+0x9a44>
   1ba64:	ldr	r2, [r0, #16]
   1ba68:	cmp	r2, #0
   1ba6c:	beq	1bac8 <__assert_fail@plt+0x9a44>
   1ba70:	cmp	r5, r3
   1ba74:	bcc	1ba88 <__assert_fail@plt+0x9a04>
   1ba78:	b	1bafc <__assert_fail@plt+0x9a78>
   1ba7c:	add	r5, r5, #8
   1ba80:	cmp	r3, r5
   1ba84:	bls	1bac4 <__assert_fail@plt+0x9a40>
   1ba88:	ldr	r0, [r5]
   1ba8c:	cmp	r0, #0
   1ba90:	beq	1ba7c <__assert_fail@plt+0x99f8>
   1ba94:	mov	r4, r5
   1ba98:	b	1baa0 <__assert_fail@plt+0x9a1c>
   1ba9c:	ldr	r0, [r4]
   1baa0:	ldr	r3, [r6, #32]
   1baa4:	blx	r3
   1baa8:	ldr	r4, [r4, #4]
   1baac:	cmp	r4, #0
   1bab0:	bne	1ba9c <__assert_fail@plt+0x9a18>
   1bab4:	ldr	r3, [r6, #4]
   1bab8:	add	r5, r5, #8
   1babc:	cmp	r3, r5
   1bac0:	bhi	1ba88 <__assert_fail@plt+0x9a04>
   1bac4:	ldr	r5, [r6]
   1bac8:	cmp	r5, r3
   1bacc:	bcs	1bafc <__assert_fail@plt+0x9a78>
   1bad0:	ldr	r0, [r5, #4]
   1bad4:	cmp	r0, #0
   1bad8:	beq	1baf0 <__assert_fail@plt+0x9a6c>
   1badc:	ldr	r4, [r0, #4]
   1bae0:	bl	11bb0 <free@plt>
   1bae4:	subs	r0, r4, #0
   1bae8:	bne	1badc <__assert_fail@plt+0x9a58>
   1baec:	ldr	r3, [r6, #4]
   1baf0:	add	r5, r5, #8
   1baf4:	cmp	r3, r5
   1baf8:	bhi	1bad0 <__assert_fail@plt+0x9a4c>
   1bafc:	ldr	r0, [r6, #36]	; 0x24
   1bb00:	cmp	r0, #0
   1bb04:	beq	1bb18 <__assert_fail@plt+0x9a94>
   1bb08:	ldr	r4, [r0, #4]
   1bb0c:	bl	11bb0 <free@plt>
   1bb10:	subs	r0, r4, #0
   1bb14:	bne	1bb08 <__assert_fail@plt+0x9a84>
   1bb18:	ldr	r0, [r6]
   1bb1c:	bl	11bb0 <free@plt>
   1bb20:	mov	r0, r6
   1bb24:	pop	{r4, r5, r6, lr}
   1bb28:	b	11bb0 <free@plt>
   1bb2c:	push	{r4, r5, r6, r7, r8, lr}
   1bb30:	sub	sp, sp, #56	; 0x38
   1bb34:	ldr	r8, [r0, #20]
   1bb38:	ldr	r7, [pc, #392]	; 1bcc8 <__assert_fail@plt+0x9c44>
   1bb3c:	mov	r6, r0
   1bb40:	ldrb	r3, [r8, #16]
   1bb44:	ldr	r2, [r7]
   1bb48:	str	r1, [sp, #4]
   1bb4c:	cmp	r3, #0
   1bb50:	str	r2, [sp, #52]	; 0x34
   1bb54:	bne	1bb80 <__assert_fail@plt+0x9afc>
   1bb58:	vmov	s15, r1
   1bb5c:	vldr	s13, [r8, #8]
   1bb60:	vldr	s14, [pc, #348]	; 1bcc4 <__assert_fail@plt+0x9c40>
   1bb64:	vcvt.f32.u32	s12, s15
   1bb68:	vdiv.f32	s15, s12, s13
   1bb6c:	vcmpe.f32	s15, s14
   1bb70:	vmrs	APSR_nzcv, fpscr
   1bb74:	vcvtlt.u32.f32	s15, s15
   1bb78:	vstrlt	s15, [sp, #4]
   1bb7c:	bge	1bbb0 <__assert_fail@plt+0x9b2c>
   1bb80:	ldr	r0, [sp, #4]
   1bb84:	bl	1af18 <__assert_fail@plt+0x8e94>
   1bb88:	lsrs	r3, r0, #30
   1bb8c:	movne	r4, #1
   1bb90:	moveq	r4, #0
   1bb94:	tst	r0, #536870912	; 0x20000000
   1bb98:	movne	r4, #1
   1bb9c:	cmp	r0, #0
   1bba0:	moveq	r4, #1
   1bba4:	cmp	r4, #0
   1bba8:	mov	r5, r0
   1bbac:	beq	1bbd0 <__assert_fail@plt+0x9b4c>
   1bbb0:	mov	r4, #0
   1bbb4:	ldr	r2, [sp, #52]	; 0x34
   1bbb8:	ldr	r3, [r7]
   1bbbc:	mov	r0, r4
   1bbc0:	cmp	r2, r3
   1bbc4:	bne	1bcbc <__assert_fail@plt+0x9c38>
   1bbc8:	add	sp, sp, #56	; 0x38
   1bbcc:	pop	{r4, r5, r6, r7, r8, pc}
   1bbd0:	ldr	r3, [r6, #8]
   1bbd4:	cmp	r3, r0
   1bbd8:	beq	1bc84 <__assert_fail@plt+0x9c00>
   1bbdc:	mov	r1, #8
   1bbe0:	bl	11b2c <calloc@plt>
   1bbe4:	cmp	r0, #0
   1bbe8:	str	r0, [sp, #12]
   1bbec:	beq	1bbb0 <__assert_fail@plt+0x9b2c>
   1bbf0:	add	r0, r0, r5, lsl #3
   1bbf4:	ldr	r1, [r6, #32]
   1bbf8:	str	r0, [sp, #16]
   1bbfc:	ldr	r0, [r6, #28]
   1bc00:	ldr	ip, [r6, #24]
   1bc04:	ldr	r3, [r6, #36]	; 0x24
   1bc08:	mov	r2, r4
   1bc0c:	str	r0, [sp, #40]	; 0x28
   1bc10:	str	r1, [sp, #44]	; 0x2c
   1bc14:	add	r0, sp, #12
   1bc18:	mov	r1, r6
   1bc1c:	str	r4, [sp, #24]
   1bc20:	str	r4, [sp, #28]
   1bc24:	str	r5, [sp, #20]
   1bc28:	str	r8, [sp, #32]
   1bc2c:	str	ip, [sp, #36]	; 0x24
   1bc30:	str	r3, [sp, #48]	; 0x30
   1bc34:	bl	1b1d0 <__assert_fail@plt+0x914c>
   1bc38:	subs	r4, r0, #0
   1bc3c:	bne	1bc8c <__assert_fail@plt+0x9c08>
   1bc40:	ldr	r3, [sp, #48]	; 0x30
   1bc44:	mov	r2, #1
   1bc48:	str	r3, [r6, #36]	; 0x24
   1bc4c:	add	r1, sp, #12
   1bc50:	mov	r0, r6
   1bc54:	bl	1b1d0 <__assert_fail@plt+0x914c>
   1bc58:	cmp	r0, #0
   1bc5c:	beq	1bcc0 <__assert_fail@plt+0x9c3c>
   1bc60:	add	r1, sp, #12
   1bc64:	mov	r0, r6
   1bc68:	mov	r2, r4
   1bc6c:	bl	1b1d0 <__assert_fail@plt+0x914c>
   1bc70:	cmp	r0, #0
   1bc74:	beq	1bcc0 <__assert_fail@plt+0x9c3c>
   1bc78:	ldr	r0, [sp, #12]
   1bc7c:	bl	11bb0 <free@plt>
   1bc80:	b	1bbb4 <__assert_fail@plt+0x9b30>
   1bc84:	mov	r4, #1
   1bc88:	b	1bbb4 <__assert_fail@plt+0x9b30>
   1bc8c:	ldr	r0, [r6]
   1bc90:	bl	11bb0 <free@plt>
   1bc94:	ldrd	r2, [sp, #12]
   1bc98:	ldr	r1, [sp, #20]
   1bc9c:	str	r2, [r6]
   1bca0:	str	r3, [r6, #4]
   1bca4:	ldr	r2, [sp, #24]
   1bca8:	ldr	r3, [sp, #48]	; 0x30
   1bcac:	str	r1, [r6, #8]
   1bcb0:	str	r2, [r6, #12]
   1bcb4:	str	r3, [r6, #36]	; 0x24
   1bcb8:	b	1bbb4 <__assert_fail@plt+0x9b30>
   1bcbc:	bl	11c7c <__stack_chk_fail@plt>
   1bcc0:	bl	12060 <abort@plt>
   1bcc4:	svcmi	0x00800000
   1bcc8:	andeq	r5, r3, r0, lsl #30
   1bccc:	push	{r4, r5, r6, r7, lr}
   1bcd0:	sub	sp, sp, #12
   1bcd4:	ldr	r6, [pc, #404]	; 1be70 <__assert_fail@plt+0x9dec>
   1bcd8:	subs	r7, r1, #0
   1bcdc:	ldr	r3, [r6]
   1bce0:	str	r3, [sp, #4]
   1bce4:	beq	1be64 <__assert_fail@plt+0x9de0>
   1bce8:	mov	r5, r2
   1bcec:	mov	r3, #0
   1bcf0:	mov	r2, sp
   1bcf4:	mov	r4, r0
   1bcf8:	bl	1b008 <__assert_fail@plt+0x8f84>
   1bcfc:	cmp	r0, #0
   1bd00:	beq	1bd2c <__assert_fail@plt+0x9ca8>
   1bd04:	cmp	r5, #0
   1bd08:	moveq	r0, r5
   1bd0c:	strne	r0, [r5]
   1bd10:	movne	r0, #0
   1bd14:	ldr	r2, [sp, #4]
   1bd18:	ldr	r3, [r6]
   1bd1c:	cmp	r2, r3
   1bd20:	bne	1be68 <__assert_fail@plt+0x9de4>
   1bd24:	add	sp, sp, #12
   1bd28:	pop	{r4, r5, r6, r7, pc}
   1bd2c:	vldr	s15, [r4, #8]
   1bd30:	ldr	r3, [r4, #20]
   1bd34:	vldr	s14, [r4, #12]
   1bd38:	vcvt.f32.u32	s15, s15
   1bd3c:	vldr	s13, [r3, #8]
   1bd40:	vcvt.f32.u32	s14, s14
   1bd44:	vmul.f32	s15, s15, s13
   1bd48:	vcmpe.f32	s14, s15
   1bd4c:	vmrs	APSR_nzcv, fpscr
   1bd50:	bgt	1bd9c <__assert_fail@plt+0x9d18>
   1bd54:	ldr	r5, [sp]
   1bd58:	ldr	r3, [r5]
   1bd5c:	cmp	r3, #0
   1bd60:	beq	1bdf8 <__assert_fail@plt+0x9d74>
   1bd64:	ldr	r0, [r4, #36]	; 0x24
   1bd68:	cmp	r0, #0
   1bd6c:	beq	1be1c <__assert_fail@plt+0x9d98>
   1bd70:	ldr	r3, [r0, #4]
   1bd74:	str	r3, [r4, #36]	; 0x24
   1bd78:	ldr	r3, [r4, #16]
   1bd7c:	ldr	r2, [r5, #4]
   1bd80:	add	r3, r3, #1
   1bd84:	str	r7, [r0]
   1bd88:	str	r2, [r0, #4]
   1bd8c:	str	r0, [r5, #4]
   1bd90:	mov	r0, #1
   1bd94:	str	r3, [r4, #16]
   1bd98:	b	1bd14 <__assert_fail@plt+0x9c90>
   1bd9c:	add	r0, r4, #20
   1bda0:	bl	1b120 <__assert_fail@plt+0x909c>
   1bda4:	vldr	s15, [r4, #8]
   1bda8:	ldr	r3, [r4, #20]
   1bdac:	vldr	s14, [r4, #12]
   1bdb0:	vcvt.f32.u32	s15, s15
   1bdb4:	vldr	s13, [r3, #8]
   1bdb8:	vcvt.f32.u32	s14, s14
   1bdbc:	vmul.f32	s12, s13, s15
   1bdc0:	vcmpe.f32	s14, s12
   1bdc4:	vmrs	APSR_nzcv, fpscr
   1bdc8:	ble	1bd54 <__assert_fail@plt+0x9cd0>
   1bdcc:	vldr	s14, [r3, #12]
   1bdd0:	ldrb	r3, [r3, #16]
   1bdd4:	vmul.f32	s15, s15, s14
   1bdd8:	cmp	r3, #0
   1bddc:	vldr	s14, [pc, #136]	; 1be6c <__assert_fail@plt+0x9de8>
   1bde0:	vmuleq.f32	s15, s15, s13
   1bde4:	vcmpe.f32	s15, s14
   1bde8:	vmrs	APSR_nzcv, fpscr
   1bdec:	blt	1be30 <__assert_fail@plt+0x9dac>
   1bdf0:	mvn	r0, #0
   1bdf4:	b	1bd14 <__assert_fail@plt+0x9c90>
   1bdf8:	ldr	r2, [r4, #16]
   1bdfc:	ldr	r3, [r4, #12]
   1be00:	add	r2, r2, #1
   1be04:	add	r3, r3, #1
   1be08:	str	r7, [r5]
   1be0c:	mov	r0, #1
   1be10:	str	r2, [r4, #16]
   1be14:	str	r3, [r4, #12]
   1be18:	b	1bd14 <__assert_fail@plt+0x9c90>
   1be1c:	mov	r0, #8
   1be20:	bl	11dfc <malloc@plt>
   1be24:	cmp	r0, #0
   1be28:	beq	1bdf0 <__assert_fail@plt+0x9d6c>
   1be2c:	b	1bd78 <__assert_fail@plt+0x9cf4>
   1be30:	vcvt.u32.f32	s15, s15
   1be34:	mov	r0, r4
   1be38:	vmov	r1, s15
   1be3c:	bl	1bb2c <__assert_fail@plt+0x9aa8>
   1be40:	cmp	r0, #0
   1be44:	beq	1bdf0 <__assert_fail@plt+0x9d6c>
   1be48:	mov	r2, sp
   1be4c:	mov	r3, #0
   1be50:	mov	r1, r7
   1be54:	mov	r0, r4
   1be58:	bl	1b008 <__assert_fail@plt+0x8f84>
   1be5c:	cmp	r0, #0
   1be60:	beq	1bd54 <__assert_fail@plt+0x9cd0>
   1be64:	bl	12060 <abort@plt>
   1be68:	bl	11c7c <__stack_chk_fail@plt>
   1be6c:	svcmi	0x00800000
   1be70:	andeq	r5, r3, r0, lsl #30
   1be74:	push	{r4, r5, lr}
   1be78:	sub	sp, sp, #12
   1be7c:	ldr	r5, [pc, #68]	; 1bec8 <__assert_fail@plt+0x9e44>
   1be80:	mov	r2, sp
   1be84:	mov	r4, r1
   1be88:	ldr	r3, [r5]
   1be8c:	str	r3, [sp, #4]
   1be90:	bl	1bccc <__assert_fail@plt+0x9c48>
   1be94:	cmn	r0, #1
   1be98:	moveq	r0, #0
   1be9c:	beq	1beac <__assert_fail@plt+0x9e28>
   1bea0:	cmp	r0, #0
   1bea4:	movne	r0, r4
   1bea8:	ldreq	r0, [sp]
   1beac:	ldr	r2, [sp, #4]
   1beb0:	ldr	r3, [r5]
   1beb4:	cmp	r2, r3
   1beb8:	bne	1bec4 <__assert_fail@plt+0x9e40>
   1bebc:	add	sp, sp, #12
   1bec0:	pop	{r4, r5, pc}
   1bec4:	bl	11c7c <__stack_chk_fail@plt>
   1bec8:	andeq	r5, r3, r0, lsl #30
   1becc:	push	{r4, r5, r6, r7, lr}
   1bed0:	sub	sp, sp, #12
   1bed4:	ldr	r5, [pc, #276]	; 1bff0 <__assert_fail@plt+0x9f6c>
   1bed8:	mov	r3, #1
   1bedc:	mov	r2, sp
   1bee0:	ldr	ip, [r5]
   1bee4:	mov	r4, r0
   1bee8:	str	ip, [sp, #4]
   1beec:	bl	1b008 <__assert_fail@plt+0x8f84>
   1bef0:	subs	r6, r0, #0
   1bef4:	beq	1bf14 <__assert_fail@plt+0x9e90>
   1bef8:	ldr	r2, [sp]
   1befc:	ldr	r3, [r4, #16]
   1bf00:	ldr	r2, [r2]
   1bf04:	sub	r3, r3, #1
   1bf08:	cmp	r2, #0
   1bf0c:	str	r3, [r4, #16]
   1bf10:	beq	1bf30 <__assert_fail@plt+0x9eac>
   1bf14:	ldr	r2, [sp, #4]
   1bf18:	ldr	r3, [r5]
   1bf1c:	mov	r0, r6
   1bf20:	cmp	r2, r3
   1bf24:	bne	1bfec <__assert_fail@plt+0x9f68>
   1bf28:	add	sp, sp, #12
   1bf2c:	pop	{r4, r5, r6, r7, pc}
   1bf30:	vldr	s15, [r4, #8]
   1bf34:	ldr	r3, [r4, #12]
   1bf38:	ldr	r2, [r4, #20]
   1bf3c:	sub	r3, r3, #1
   1bf40:	vcvt.f32.u32	s14, s15
   1bf44:	vldr	s13, [r2]
   1bf48:	vmov	s15, r3
   1bf4c:	str	r3, [r4, #12]
   1bf50:	vcvt.f32.u32	s15, s15
   1bf54:	vmul.f32	s14, s14, s13
   1bf58:	vcmpe.f32	s15, s14
   1bf5c:	vmrs	APSR_nzcv, fpscr
   1bf60:	bpl	1bf14 <__assert_fail@plt+0x9e90>
   1bf64:	add	r0, r4, #20
   1bf68:	bl	1b120 <__assert_fail@plt+0x909c>
   1bf6c:	vldr	s15, [r4, #8]
   1bf70:	ldr	r3, [r4, #20]
   1bf74:	vldr	s13, [r4, #12]
   1bf78:	vcvt.f32.u32	s15, s15
   1bf7c:	vldr	s14, [r3]
   1bf80:	vcvt.f32.u32	s13, s13
   1bf84:	vmul.f32	s14, s15, s14
   1bf88:	vcmpe.f32	s13, s14
   1bf8c:	vmrs	APSR_nzcv, fpscr
   1bf90:	bpl	1bf14 <__assert_fail@plt+0x9e90>
   1bf94:	vldr	s14, [r3, #4]
   1bf98:	ldrb	r2, [r3, #16]
   1bf9c:	mov	r0, r4
   1bfa0:	vmul.f32	s15, s15, s14
   1bfa4:	cmp	r2, #0
   1bfa8:	vldreq	s14, [r3, #8]
   1bfac:	vmuleq.f32	s15, s15, s14
   1bfb0:	vcvt.u32.f32	s15, s15
   1bfb4:	vmov	r1, s15
   1bfb8:	bl	1bb2c <__assert_fail@plt+0x9aa8>
   1bfbc:	cmp	r0, #0
   1bfc0:	bne	1bf14 <__assert_fail@plt+0x9e90>
   1bfc4:	ldr	r0, [r4, #36]	; 0x24
   1bfc8:	cmp	r0, #0
   1bfcc:	beq	1bfe0 <__assert_fail@plt+0x9f5c>
   1bfd0:	ldr	r7, [r0, #4]
   1bfd4:	bl	11bb0 <free@plt>
   1bfd8:	subs	r0, r7, #0
   1bfdc:	bne	1bfd0 <__assert_fail@plt+0x9f4c>
   1bfe0:	mov	r3, #0
   1bfe4:	str	r3, [r4, #36]	; 0x24
   1bfe8:	b	1bf14 <__assert_fail@plt+0x9e90>
   1bfec:	bl	11c7c <__stack_chk_fail@plt>
   1bff0:	andeq	r5, r3, r0, lsl #30
   1bff4:	mov	r0, #0
   1bff8:	bx	lr
   1bffc:	push	{r4, r5, r6, lr}
   1c000:	mov	r6, r0
   1c004:	mov	r0, #16
   1c008:	mov	r5, r1
   1c00c:	bl	20424 <__assert_fail@plt+0xe3a0>
   1c010:	cmp	r5, #0
   1c014:	mov	r4, r0
   1c018:	beq	1c03c <__assert_fail@plt+0x9fb8>
   1c01c:	lsrs	r3, r5, #30
   1c020:	movne	r3, #1
   1c024:	moveq	r3, #0
   1c028:	lsls	r0, r5, #2
   1c02c:	bmi	1c038 <__assert_fail@plt+0x9fb4>
   1c030:	cmp	r3, #0
   1c034:	beq	1c044 <__assert_fail@plt+0x9fc0>
   1c038:	bl	2066c <__assert_fail@plt+0xe5e8>
   1c03c:	mov	r0, #4
   1c040:	mov	r5, #1
   1c044:	bl	20424 <__assert_fail@plt+0xe3a0>
   1c048:	mov	r3, #0
   1c04c:	ldr	r2, [pc, #28]	; 1c070 <__assert_fail@plt+0x9fec>
   1c050:	cmp	r6, r3
   1c054:	moveq	r6, r2
   1c058:	str	r3, [r4, #8]
   1c05c:	str	r6, [r4, #12]
   1c060:	stm	r4, {r0, r5}
   1c064:	str	r3, [r0]
   1c068:	mov	r0, r4
   1c06c:	pop	{r4, r5, r6, pc}
   1c070:	strdeq	fp, [r1], -r4
   1c074:	push	{r4, lr}
   1c078:	mov	r4, r0
   1c07c:	ldr	r0, [r0]
   1c080:	bl	11bb0 <free@plt>
   1c084:	mov	r0, r4
   1c088:	pop	{r4, lr}
   1c08c:	b	11bb0 <free@plt>
   1c090:	push	{r4, r5, r6, r7, r8, lr}
   1c094:	mov	r5, r0
   1c098:	ldmib	r0, {r3, r4}
   1c09c:	mov	r6, r1
   1c0a0:	ldr	r0, [r0]
   1c0a4:	sub	r2, r3, #1
   1c0a8:	cmp	r2, r4
   1c0ac:	bls	1c118 <__assert_fail@plt+0xa094>
   1c0b0:	add	r4, r4, #1
   1c0b4:	str	r4, [r5, #8]
   1c0b8:	str	r6, [r0, r4, lsl #2]
   1c0bc:	ldr	r6, [r5]
   1c0c0:	cmp	r4, #1
   1c0c4:	ldr	r8, [r5, #12]
   1c0c8:	ldr	r7, [r6, r4, lsl #2]
   1c0cc:	bne	1c0e8 <__assert_fail@plt+0xa064>
   1c0d0:	b	1c110 <__assert_fail@plt+0xa08c>
   1c0d4:	ldr	r3, [r6, r5, lsl #2]
   1c0d8:	cmp	r5, #1
   1c0dc:	str	r3, [r6, r4, lsl #2]
   1c0e0:	mov	r4, r5
   1c0e4:	beq	1c110 <__assert_fail@plt+0xa08c>
   1c0e8:	lsr	r5, r4, #1
   1c0ec:	mov	r1, r7
   1c0f0:	ldr	r0, [r6, r5, lsl #2]
   1c0f4:	blx	r8
   1c0f8:	add	r3, r6, r4, lsl #2
   1c0fc:	cmp	r0, #0
   1c100:	ble	1c0d4 <__assert_fail@plt+0xa050>
   1c104:	str	r7, [r3]
   1c108:	mov	r0, #0
   1c10c:	pop	{r4, r5, r6, r7, r8, pc}
   1c110:	add	r3, r6, #4
   1c114:	b	1c104 <__assert_fail@plt+0xa080>
   1c118:	cmp	r0, #0
   1c11c:	beq	1c14c <__assert_fail@plt+0xa0c8>
   1c120:	ldr	r2, [pc, #88]	; 1c180 <__assert_fail@plt+0xa0fc>
   1c124:	cmp	r3, r2
   1c128:	bhi	1c170 <__assert_fail@plt+0xa0ec>
   1c12c:	add	r2, r3, #1
   1c130:	add	r3, r2, r3, lsr #1
   1c134:	lsl	r1, r3, #2
   1c138:	str	r3, [r5, #4]
   1c13c:	bl	20480 <__assert_fail@plt+0xe3fc>
   1c140:	ldr	r4, [r5, #8]
   1c144:	str	r0, [r5]
   1c148:	b	1c0b0 <__assert_fail@plt+0xa02c>
   1c14c:	cmp	r3, #0
   1c150:	beq	1c174 <__assert_fail@plt+0xa0f0>
   1c154:	lsrs	r2, r3, #30
   1c158:	movne	r2, #1
   1c15c:	moveq	r2, #0
   1c160:	lsls	r1, r3, #2
   1c164:	bmi	1c170 <__assert_fail@plt+0xa0ec>
   1c168:	cmp	r2, #0
   1c16c:	beq	1c138 <__assert_fail@plt+0xa0b4>
   1c170:	bl	2066c <__assert_fail@plt+0xe5e8>
   1c174:	mov	r1, #64	; 0x40
   1c178:	mov	r3, #16
   1c17c:	b	1c138 <__assert_fail@plt+0xa0b4>
   1c180:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   1c184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c188:	sub	sp, sp, #20
   1c18c:	ldr	r8, [r0, #8]
   1c190:	cmp	r8, #0
   1c194:	beq	1c244 <__assert_fail@plt+0xa1c0>
   1c198:	ldr	r3, [r0]
   1c19c:	sub	r9, r8, #1
   1c1a0:	ldr	r2, [r3, r8, lsl #2]
   1c1a4:	ldr	r8, [r3, #4]
   1c1a8:	str	r9, [r0, #8]
   1c1ac:	str	r2, [r3, #4]
   1c1b0:	ldr	r4, [r0]
   1c1b4:	lsrs	r3, r9, #1
   1c1b8:	str	r3, [sp, #4]
   1c1bc:	ldr	sl, [r0, #12]
   1c1c0:	ldr	fp, [r4, #4]
   1c1c4:	beq	1c25c <__assert_fail@plt+0xa1d8>
   1c1c8:	mov	r5, #1
   1c1cc:	str	r9, [sp, #8]
   1c1d0:	str	r8, [sp, #12]
   1c1d4:	b	1c1f0 <__assert_fail@plt+0xa16c>
   1c1d8:	ldr	r2, [sp, #4]
   1c1dc:	ldr	r3, [r7]
   1c1e0:	cmp	r6, r2
   1c1e4:	str	r3, [r4, r5, lsl #2]
   1c1e8:	mov	r5, r6
   1c1ec:	bhi	1c250 <__assert_fail@plt+0xa1cc>
   1c1f0:	lsl	r6, r5, #1
   1c1f4:	ldr	r3, [sp, #8]
   1c1f8:	add	r8, r6, #1
   1c1fc:	cmp	r3, r6
   1c200:	add	r7, r4, r5, lsl #3
   1c204:	add	r9, r4, r8, lsl #2
   1c208:	bls	1c224 <__assert_fail@plt+0xa1a0>
   1c20c:	ldr	r1, [r4, r8, lsl #2]
   1c210:	ldr	r0, [r4, r5, lsl #3]
   1c214:	blx	sl
   1c218:	cmp	r0, #0
   1c21c:	movlt	r7, r9
   1c220:	movlt	r6, r8
   1c224:	mov	r1, fp
   1c228:	ldr	r0, [r7]
   1c22c:	blx	sl
   1c230:	add	r3, r4, r5, lsl #2
   1c234:	cmp	r0, #0
   1c238:	bgt	1c1d8 <__assert_fail@plt+0xa154>
   1c23c:	ldr	r8, [sp, #12]
   1c240:	str	fp, [r3]
   1c244:	mov	r0, r8
   1c248:	add	sp, sp, #20
   1c24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c250:	ldr	r8, [sp, #12]
   1c254:	mov	r3, r7
   1c258:	b	1c240 <__assert_fail@plt+0xa1bc>
   1c25c:	add	r3, r4, #4
   1c260:	b	1c240 <__assert_fail@plt+0xa1bc>
   1c264:	subs	ip, r0, #0
   1c268:	mov	r3, #0
   1c26c:	strb	r3, [r1, #11]
   1c270:	add	r0, r1, #11
   1c274:	blt	1c2a0 <__assert_fail@plt+0xa21c>
   1c278:	ldr	r1, [pc, #104]	; 1c2e8 <__assert_fail@plt+0xa264>
   1c27c:	umull	r2, r3, r1, ip
   1c280:	lsr	r3, r3, #3
   1c284:	add	r2, r3, r3, lsl #2
   1c288:	sub	r2, ip, r2, lsl #1
   1c28c:	add	r2, r2, #48	; 0x30
   1c290:	subs	ip, r3, #0
   1c294:	strb	r2, [r0, #-1]!
   1c298:	bne	1c27c <__assert_fail@plt+0xa1f8>
   1c29c:	bx	lr
   1c2a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c2a4:	ldr	lr, [pc, #64]	; 1c2ec <__assert_fail@plt+0xa268>
   1c2a8:	b	1c2b0 <__assert_fail@plt+0xa22c>
   1c2ac:	mov	r0, r1
   1c2b0:	smull	r3, r2, lr, ip
   1c2b4:	asr	r3, ip, #31
   1c2b8:	rsb	r3, r3, r2, asr #2
   1c2bc:	sub	r1, r0, #1
   1c2c0:	add	r2, r3, r3, lsl #2
   1c2c4:	sub	r2, ip, r2, lsl #1
   1c2c8:	rsb	r2, r2, #48	; 0x30
   1c2cc:	subs	ip, r3, #0
   1c2d0:	strb	r2, [r0, #-1]
   1c2d4:	bne	1c2ac <__assert_fail@plt+0xa228>
   1c2d8:	mov	r3, #45	; 0x2d
   1c2dc:	sub	r0, r0, #2
   1c2e0:	strb	r3, [r1, #-1]
   1c2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2e8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c2ec:	strbtvs	r6, [r6], -r7, ror #12
   1c2f0:	mov	r3, #0
   1c2f4:	ldr	ip, [pc, #48]	; 1c32c <__assert_fail@plt+0xa2a8>
   1c2f8:	strb	r3, [r1, #10]
   1c2fc:	add	r1, r1, #10
   1c300:	umull	r3, r2, ip, r0
   1c304:	cmp	r0, #9
   1c308:	lsr	r2, r2, #3
   1c30c:	add	r3, r2, r2, lsl #2
   1c310:	sub	r3, r0, r3, lsl #1
   1c314:	add	r3, r3, #48	; 0x30
   1c318:	mov	r0, r2
   1c31c:	strb	r3, [r1, #-1]!
   1c320:	bhi	1c300 <__assert_fail@plt+0xa27c>
   1c324:	mov	r0, r1
   1c328:	bx	lr
   1c32c:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1c330:	push	{r4, r5, r6, lr}
   1c334:	mov	r4, r0
   1c338:	mov	r5, r1
   1c33c:	add	r6, r2, #20
   1c340:	mov	r3, #0
   1c344:	strb	r3, [r2, #20]
   1c348:	mov	r0, r4
   1c34c:	mov	r1, r5
   1c350:	mov	r2, #10
   1c354:	mov	r3, #0
   1c358:	bl	22a00 <_obstack_memory_used@@Base+0x9e0>
   1c35c:	mov	r0, r4
   1c360:	mov	r1, r5
   1c364:	mov	r3, #0
   1c368:	add	r2, r2, #48	; 0x30
   1c36c:	strb	r2, [r6, #-1]!
   1c370:	mov	r2, #10
   1c374:	bl	22a00 <_obstack_memory_used@@Base+0x9e0>
   1c378:	cmp	r5, #0
   1c37c:	cmpeq	r4, #9
   1c380:	mov	r5, r1
   1c384:	mov	r4, r0
   1c388:	bhi	1c348 <__assert_fail@plt+0xa2c4>
   1c38c:	mov	r0, r6
   1c390:	pop	{r4, r5, r6, pc}
   1c394:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c398:	sub	sp, sp, #20
   1c39c:	ldr	sl, [pc, #444]	; 1c560 <__assert_fail@plt+0xa4dc>
   1c3a0:	mov	r4, r0
   1c3a4:	add	r7, r0, r1
   1c3a8:	ldr	r3, [sl]
   1c3ac:	mov	r9, r2
   1c3b0:	str	r3, [sp, #12]
   1c3b4:	bl	11d60 <__ctype_get_mb_cur_max@plt>
   1c3b8:	cmp	r0, #1
   1c3bc:	bls	1c4e8 <__assert_fail@plt+0xa464>
   1c3c0:	cmp	r4, r7
   1c3c4:	mov	r6, #0
   1c3c8:	bcs	1c4cc <__assert_fail@plt+0xa448>
   1c3cc:	and	r8, r9, #2
   1c3d0:	b	1c3f8 <__assert_fail@plt+0xa374>
   1c3d4:	cmp	r3, #37	; 0x25
   1c3d8:	bcs	1c3e8 <__assert_fail@plt+0xa364>
   1c3dc:	sub	r3, r3, #32
   1c3e0:	cmp	r3, #3
   1c3e4:	bhi	1c420 <__assert_fail@plt+0xa39c>
   1c3e8:	add	r4, r4, #1
   1c3ec:	add	r6, r6, #1
   1c3f0:	cmp	r4, r7
   1c3f4:	bcs	1c4cc <__assert_fail@plt+0xa448>
   1c3f8:	ldrb	r3, [r4]
   1c3fc:	cmp	r3, #63	; 0x3f
   1c400:	bls	1c3d4 <__assert_fail@plt+0xa350>
   1c404:	cmp	r3, #65	; 0x41
   1c408:	bcc	1c420 <__assert_fail@plt+0xa39c>
   1c40c:	cmp	r3, #95	; 0x5f
   1c410:	bls	1c3e8 <__assert_fail@plt+0xa364>
   1c414:	sub	r3, r3, #97	; 0x61
   1c418:	cmp	r3, #29
   1c41c:	bls	1c3e8 <__assert_fail@plt+0xa364>
   1c420:	mov	r3, #0
   1c424:	mvn	fp, #-2147483648	; 0x80000000
   1c428:	str	r3, [sp, #4]
   1c42c:	str	r3, [sp, #8]
   1c430:	b	1c458 <__assert_fail@plt+0xa3d4>
   1c434:	sub	r3, fp, r6
   1c438:	cmp	r3, r0
   1c43c:	blt	1c554 <__assert_fail@plt+0xa4d0>
   1c440:	add	r6, r6, r0
   1c444:	add	r0, sp, #4
   1c448:	bl	11c1c <mbsinit@plt>
   1c44c:	add	r4, r4, r5
   1c450:	cmp	r0, #0
   1c454:	bne	1c3f0 <__assert_fail@plt+0xa36c>
   1c458:	add	r3, sp, #4
   1c45c:	sub	r2, r7, r4
   1c460:	mov	r1, r4
   1c464:	mov	r0, sp
   1c468:	bl	21c84 <__assert_fail@plt+0xfc00>
   1c46c:	cmn	r0, #1
   1c470:	mov	r5, r0
   1c474:	beq	1c4c0 <__assert_fail@plt+0xa43c>
   1c478:	cmn	r0, #2
   1c47c:	beq	1c540 <__assert_fail@plt+0xa4bc>
   1c480:	cmp	r0, #0
   1c484:	ldr	r0, [sp]
   1c488:	moveq	r5, #1
   1c48c:	bl	11b8c <wcwidth@plt>
   1c490:	cmp	r0, #0
   1c494:	bge	1c434 <__assert_fail@plt+0xa3b0>
   1c498:	cmp	r8, #0
   1c49c:	bne	1c4c8 <__assert_fail@plt+0xa444>
   1c4a0:	ldr	r0, [sp]
   1c4a4:	bl	11ce8 <iswcntrl@plt>
   1c4a8:	cmp	r0, #0
   1c4ac:	bne	1c444 <__assert_fail@plt+0xa3c0>
   1c4b0:	cmn	r6, #-2147483647	; 0x80000001
   1c4b4:	beq	1c554 <__assert_fail@plt+0xa4d0>
   1c4b8:	add	r6, r6, #1
   1c4bc:	b	1c444 <__assert_fail@plt+0xa3c0>
   1c4c0:	tst	r9, #1
   1c4c4:	beq	1c3e8 <__assert_fail@plt+0xa364>
   1c4c8:	mvn	r6, #0
   1c4cc:	ldr	r2, [sp, #12]
   1c4d0:	ldr	r3, [sl]
   1c4d4:	mov	r0, r6
   1c4d8:	cmp	r2, r3
   1c4dc:	bne	1c55c <__assert_fail@plt+0xa4d8>
   1c4e0:	add	sp, sp, #20
   1c4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4e8:	cmp	r4, r7
   1c4ec:	movcs	r6, #0
   1c4f0:	bcs	1c4cc <__assert_fail@plt+0xa448>
   1c4f4:	bl	11e50 <__ctype_b_loc@plt>
   1c4f8:	mov	r6, #0
   1c4fc:	and	r9, r9, #2
   1c500:	ldr	r2, [r0]
   1c504:	ldrb	r3, [r4], #1
   1c508:	lsl	r3, r3, #1
   1c50c:	ldrh	r3, [r2, r3]
   1c510:	tst	r3, #16384	; 0x4000
   1c514:	bne	1c528 <__assert_fail@plt+0xa4a4>
   1c518:	cmp	r9, #0
   1c51c:	bne	1c4c8 <__assert_fail@plt+0xa444>
   1c520:	tst	r3, #2
   1c524:	bne	1c534 <__assert_fail@plt+0xa4b0>
   1c528:	cmn	r6, #-2147483647	; 0x80000001
   1c52c:	beq	1c4cc <__assert_fail@plt+0xa448>
   1c530:	add	r6, r6, #1
   1c534:	cmp	r7, r4
   1c538:	bne	1c504 <__assert_fail@plt+0xa480>
   1c53c:	b	1c4cc <__assert_fail@plt+0xa448>
   1c540:	tst	r9, #1
   1c544:	bne	1c4c8 <__assert_fail@plt+0xa444>
   1c548:	add	r6, r6, #1
   1c54c:	mov	r4, r7
   1c550:	b	1c3f0 <__assert_fail@plt+0xa36c>
   1c554:	mvn	r6, #-2147483648	; 0x80000000
   1c558:	b	1c4cc <__assert_fail@plt+0xa448>
   1c55c:	bl	11c7c <__stack_chk_fail@plt>
   1c560:	andeq	r5, r3, r0, lsl #30
   1c564:	push	{r4, r5, r6, lr}
   1c568:	mov	r5, r1
   1c56c:	mov	r4, r0
   1c570:	bl	11e80 <strlen@plt>
   1c574:	mov	r2, r5
   1c578:	mov	r1, r0
   1c57c:	mov	r0, r4
   1c580:	pop	{r4, r5, r6, lr}
   1c584:	b	1c394 <__assert_fail@plt+0xa310>
   1c588:	push	{r4, lr}
   1c58c:	sub	sp, sp, #136	; 0x88
   1c590:	ldr	r4, [pc, #84]	; 1c5ec <__assert_fail@plt+0xa568>
   1c594:	add	r2, sp, #4
   1c598:	mov	r1, #128	; 0x80
   1c59c:	ldr	r3, [r4]
   1c5a0:	mov	r0, #0
   1c5a4:	str	r3, [sp, #132]	; 0x84
   1c5a8:	bl	12018 <sched_getaffinity@plt>
   1c5ac:	cmp	r0, #0
   1c5b0:	beq	1c5d0 <__assert_fail@plt+0xa54c>
   1c5b4:	mov	r0, #0
   1c5b8:	ldr	r2, [sp, #132]	; 0x84
   1c5bc:	ldr	r3, [r4]
   1c5c0:	cmp	r2, r3
   1c5c4:	bne	1c5e8 <__assert_fail@plt+0xa564>
   1c5c8:	add	sp, sp, #136	; 0x88
   1c5cc:	pop	{r4, pc}
   1c5d0:	add	r1, sp, #4
   1c5d4:	mov	r0, #128	; 0x80
   1c5d8:	bl	11c34 <__sched_cpucount@plt>
   1c5dc:	cmp	r0, #0
   1c5e0:	beq	1c5b4 <__assert_fail@plt+0xa530>
   1c5e4:	b	1c5b8 <__assert_fail@plt+0xa534>
   1c5e8:	bl	11c7c <__stack_chk_fail@plt>
   1c5ec:	andeq	r5, r3, r0, lsl #30
   1c5f0:	push	{r4, lr}
   1c5f4:	sub	sp, sp, #8
   1c5f8:	ldr	r4, [pc, #200]	; 1c6c8 <__assert_fail@plt+0xa644>
   1c5fc:	ldrb	r3, [r0]
   1c600:	ldr	r2, [r4]
   1c604:	cmp	r3, #0
   1c608:	str	r2, [sp, #4]
   1c60c:	beq	1c634 <__assert_fail@plt+0xa5b0>
   1c610:	cmp	r3, #9
   1c614:	bcc	1c650 <__assert_fail@plt+0xa5cc>
   1c618:	cmp	r3, #13
   1c61c:	bls	1c628 <__assert_fail@plt+0xa5a4>
   1c620:	cmp	r3, #32
   1c624:	bne	1c650 <__assert_fail@plt+0xa5cc>
   1c628:	ldrb	r3, [r0, #1]!
   1c62c:	cmp	r3, #0
   1c630:	bne	1c610 <__assert_fail@plt+0xa58c>
   1c634:	mov	r0, #0
   1c638:	ldr	r2, [sp, #4]
   1c63c:	ldr	r3, [r4]
   1c640:	cmp	r2, r3
   1c644:	bne	1c6c4 <__assert_fail@plt+0xa640>
   1c648:	add	sp, sp, #8
   1c64c:	pop	{r4, pc}
   1c650:	sub	r3, r3, #48	; 0x30
   1c654:	cmp	r3, #9
   1c658:	bhi	1c634 <__assert_fail@plt+0xa5b0>
   1c65c:	mov	r3, #0
   1c660:	mov	r2, #10
   1c664:	mov	r1, sp
   1c668:	str	r3, [sp]
   1c66c:	bl	11e74 <strtoul@plt>
   1c670:	ldr	r2, [sp]
   1c674:	cmp	r2, #0
   1c678:	beq	1c634 <__assert_fail@plt+0xa5b0>
   1c67c:	ldrb	r3, [r2]
   1c680:	cmp	r3, #0
   1c684:	beq	1c638 <__assert_fail@plt+0xa5b4>
   1c688:	cmp	r3, #9
   1c68c:	bcc	1c6a0 <__assert_fail@plt+0xa61c>
   1c690:	cmp	r3, #13
   1c694:	bls	1c6ac <__assert_fail@plt+0xa628>
   1c698:	cmp	r3, #32
   1c69c:	beq	1c6ac <__assert_fail@plt+0xa628>
   1c6a0:	cmp	r3, #44	; 0x2c
   1c6a4:	bne	1c634 <__assert_fail@plt+0xa5b0>
   1c6a8:	b	1c638 <__assert_fail@plt+0xa5b4>
   1c6ac:	add	r2, r2, #1
   1c6b0:	str	r2, [sp]
   1c6b4:	ldrb	r3, [r2]
   1c6b8:	cmp	r3, #0
   1c6bc:	bne	1c688 <__assert_fail@plt+0xa604>
   1c6c0:	b	1c638 <__assert_fail@plt+0xa5b4>
   1c6c4:	bl	11c7c <__stack_chk_fail@plt>
   1c6c8:	andeq	r5, r3, r0, lsl #30
   1c6cc:	cmp	r0, #2
   1c6d0:	push	{r4, r5, r6, lr}
   1c6d4:	beq	1c704 <__assert_fail@plt+0xa680>
   1c6d8:	cmp	r0, #1
   1c6dc:	beq	1c7b4 <__assert_fail@plt+0xa730>
   1c6e0:	mov	r0, #83	; 0x53
   1c6e4:	bl	11c94 <sysconf@plt>
   1c6e8:	cmp	r0, #1
   1c6ec:	mov	r4, r0
   1c6f0:	beq	1c774 <__assert_fail@plt+0xa6f0>
   1c6f4:	cmp	r4, #1
   1c6f8:	movge	r0, r4
   1c6fc:	movlt	r0, #1
   1c700:	pop	{r4, r5, r6, pc}
   1c704:	ldr	r0, [pc, #176]	; 1c7bc <__assert_fail@plt+0xa738>
   1c708:	bl	11dd8 <getenv@plt>
   1c70c:	cmp	r0, #0
   1c710:	beq	1c798 <__assert_fail@plt+0xa714>
   1c714:	bl	1c5f0 <__assert_fail@plt+0xa56c>
   1c718:	mov	r5, r0
   1c71c:	ldr	r0, [pc, #156]	; 1c7c0 <__assert_fail@plt+0xa73c>
   1c720:	bl	11dd8 <getenv@plt>
   1c724:	cmp	r0, #0
   1c728:	mvneq	r4, #0
   1c72c:	beq	1c73c <__assert_fail@plt+0xa6b8>
   1c730:	bl	1c5f0 <__assert_fail@plt+0xa56c>
   1c734:	subs	r4, r0, #0
   1c738:	mvneq	r4, #0
   1c73c:	cmp	r5, #0
   1c740:	bne	1c788 <__assert_fail@plt+0xa704>
   1c744:	bl	1c588 <__assert_fail@plt+0xa504>
   1c748:	cmp	r0, #0
   1c74c:	beq	1c75c <__assert_fail@plt+0xa6d8>
   1c750:	cmp	r0, r4
   1c754:	movcs	r0, r4
   1c758:	pop	{r4, r5, r6, pc}
   1c75c:	mov	r0, #84	; 0x54
   1c760:	bl	11c94 <sysconf@plt>
   1c764:	cmp	r0, #0
   1c768:	bgt	1c750 <__assert_fail@plt+0xa6cc>
   1c76c:	mov	r0, #1
   1c770:	pop	{r4, r5, r6, pc}
   1c774:	bl	1c588 <__assert_fail@plt+0xa504>
   1c778:	cmp	r0, #0
   1c77c:	beq	1c76c <__assert_fail@plt+0xa6e8>
   1c780:	mov	r4, r0
   1c784:	b	1c6f4 <__assert_fail@plt+0xa670>
   1c788:	cmp	r4, r5
   1c78c:	movcc	r0, r4
   1c790:	movcs	r0, r5
   1c794:	pop	{r4, r5, r6, pc}
   1c798:	ldr	r0, [pc, #32]	; 1c7c0 <__assert_fail@plt+0xa73c>
   1c79c:	bl	11dd8 <getenv@plt>
   1c7a0:	cmp	r0, #0
   1c7a4:	beq	1c7b4 <__assert_fail@plt+0xa730>
   1c7a8:	bl	1c5f0 <__assert_fail@plt+0xa56c>
   1c7ac:	subs	r4, r0, #0
   1c7b0:	bne	1c744 <__assert_fail@plt+0xa6c0>
   1c7b4:	mvn	r4, #0
   1c7b8:	b	1c744 <__assert_fail@plt+0xa6c0>
   1c7bc:	andeq	r4, r2, r4, asr #24
   1c7c0:	andeq	r4, r2, r4, asr ip
   1c7c4:	andeq	r0, r0, r0
   1c7c8:	push	{r4, r5, lr}
   1c7cc:	sub	sp, sp, #76	; 0x4c
   1c7d0:	ldr	r5, [pc, #136]	; 1c860 <__assert_fail@plt+0xa7dc>
   1c7d4:	mov	r0, #85	; 0x55
   1c7d8:	ldr	r3, [r5]
   1c7dc:	str	r3, [sp, #68]	; 0x44
   1c7e0:	bl	11c94 <sysconf@plt>
   1c7e4:	mov	r4, r0
   1c7e8:	mov	r0, #30
   1c7ec:	bl	11c94 <sysconf@plt>
   1c7f0:	cmp	r4, #0
   1c7f4:	cmpge	r0, #0
   1c7f8:	bge	1c838 <__assert_fail@plt+0xa7b4>
   1c7fc:	add	r0, sp, #4
   1c800:	bl	11df0 <sysinfo@plt>
   1c804:	cmp	r0, #0
   1c808:	vldreq	s15, [sp, #20]
   1c80c:	vldrne	d0, [pc, #68]	; 1c858 <__assert_fail@plt+0xa7d4>
   1c810:	vcvteq.f64.u32	d0, s15
   1c814:	vldreq	s15, [sp, #56]	; 0x38
   1c818:	vcvteq.f64.u32	d7, s15
   1c81c:	vmuleq.f64	d0, d0, d7
   1c820:	ldr	r2, [sp, #68]	; 0x44
   1c824:	ldr	r3, [r5]
   1c828:	cmp	r2, r3
   1c82c:	bne	1c850 <__assert_fail@plt+0xa7cc>
   1c830:	add	sp, sp, #76	; 0x4c
   1c834:	pop	{r4, r5, pc}
   1c838:	vmov	s15, r4
   1c83c:	vcvt.f64.s32	d0, s15
   1c840:	vmov	s15, r0
   1c844:	vcvt.f64.s32	d7, s15
   1c848:	vmul.f64	d0, d0, d7
   1c84c:	b	1c820 <__assert_fail@plt+0xa79c>
   1c850:	bl	11c7c <__stack_chk_fail@plt>
   1c854:	nop			; (mov r0, r0)
   1c858:	andeq	r0, r0, r0
   1c85c:	orrsmi	r0, r0, r0
   1c860:	andeq	r5, r3, r0, lsl #30
   1c864:	push	{r4, r5, lr}
   1c868:	sub	sp, sp, #76	; 0x4c
   1c86c:	ldr	r5, [pc, #164]	; 1c918 <__assert_fail@plt+0xa894>
   1c870:	mov	r0, #86	; 0x56
   1c874:	ldr	r3, [r5]
   1c878:	str	r3, [sp, #68]	; 0x44
   1c87c:	bl	11c94 <sysconf@plt>
   1c880:	mov	r4, r0
   1c884:	mov	r0, #30
   1c888:	bl	11c94 <sysconf@plt>
   1c88c:	cmp	r0, #0
   1c890:	cmpge	r4, #0
   1c894:	bge	1c8f0 <__assert_fail@plt+0xa86c>
   1c898:	add	r0, sp, #4
   1c89c:	bl	11df0 <sysinfo@plt>
   1c8a0:	cmp	r0, #0
   1c8a4:	bne	1c8e0 <__assert_fail@plt+0xa85c>
   1c8a8:	vldr	s15, [sp, #24]
   1c8ac:	vcvt.f64.u32	d0, s15
   1c8b0:	vldr	s15, [sp, #32]
   1c8b4:	vcvt.f64.u32	d6, s15
   1c8b8:	vldr	s15, [sp, #56]	; 0x38
   1c8bc:	vcvt.f64.u32	d7, s15
   1c8c0:	vadd.f64	d0, d0, d6
   1c8c4:	vmul.f64	d0, d0, d7
   1c8c8:	ldr	r2, [sp, #68]	; 0x44
   1c8cc:	ldr	r3, [r5]
   1c8d0:	cmp	r2, r3
   1c8d4:	bne	1c908 <__assert_fail@plt+0xa884>
   1c8d8:	add	sp, sp, #76	; 0x4c
   1c8dc:	pop	{r4, r5, pc}
   1c8e0:	bl	1c7c8 <__assert_fail@plt+0xa744>
   1c8e4:	vldr	d7, [pc, #36]	; 1c910 <__assert_fail@plt+0xa88c>
   1c8e8:	vmul.f64	d0, d0, d7
   1c8ec:	b	1c8c8 <__assert_fail@plt+0xa844>
   1c8f0:	vmov	s15, r4
   1c8f4:	vcvt.f64.s32	d0, s15
   1c8f8:	vmov	s15, r0
   1c8fc:	vcvt.f64.s32	d7, s15
   1c900:	vmul.f64	d0, d0, d7
   1c904:	b	1c8c8 <__assert_fail@plt+0xa844>
   1c908:	bl	11c7c <__stack_chk_fail@plt>
   1c90c:	nop			; (mov r0, r0)
   1c910:	andeq	r0, r0, r0
   1c914:	svccc	0x00d00000
   1c918:	andeq	r5, r3, r0, lsl #30
   1c91c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c920:	mov	r4, r0
   1c924:	ldr	r7, [pc, #404]	; 1cac0 <__assert_fail@plt+0xaa3c>
   1c928:	mov	r6, r1
   1c92c:	ldr	r8, [r0]
   1c930:	ldr	r3, [r7]
   1c934:	ldr	r9, [r0, #4]
   1c938:	cmp	r3, #0
   1c93c:	bge	1ca6c <__assert_fail@plt+0xa9e8>
   1c940:	bic	r5, r6, #524288	; 0x80000
   1c944:	bic	r5, r5, #2048	; 0x800
   1c948:	cmp	r5, #0
   1c94c:	bne	1caa4 <__assert_fail@plt+0xaa20>
   1c950:	mov	r0, r4
   1c954:	bl	11f34 <pipe@plt>
   1c958:	cmp	r0, #0
   1c95c:	blt	1cab8 <__assert_fail@plt+0xaa34>
   1c960:	tst	r6, #2048	; 0x800
   1c964:	bne	1c978 <__assert_fail@plt+0xa8f4>
   1c968:	tst	r6, #524288	; 0x80000
   1c96c:	bne	1ca04 <__assert_fail@plt+0xa980>
   1c970:	mov	r0, r5
   1c974:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c978:	mov	r2, r5
   1c97c:	mov	r1, #3
   1c980:	ldr	r0, [r4, #4]
   1c984:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1c988:	cmp	r0, #0
   1c98c:	blt	1c9d8 <__assert_fail@plt+0xa954>
   1c990:	orr	r2, r0, #2048	; 0x800
   1c994:	mov	r1, #4
   1c998:	ldr	r0, [r4, #4]
   1c99c:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1c9a0:	cmn	r0, #1
   1c9a4:	beq	1c9d8 <__assert_fail@plt+0xa954>
   1c9a8:	mov	r2, r5
   1c9ac:	mov	r1, #3
   1c9b0:	ldr	r0, [r4]
   1c9b4:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1c9b8:	subs	r2, r0, #0
   1c9bc:	blt	1c9d8 <__assert_fail@plt+0xa954>
   1c9c0:	orr	r2, r2, #2048	; 0x800
   1c9c4:	mov	r1, #4
   1c9c8:	ldr	r0, [r4]
   1c9cc:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1c9d0:	cmn	r0, #1
   1c9d4:	bne	1c968 <__assert_fail@plt+0xa8e4>
   1c9d8:	bl	11ea4 <__errno_location@plt>
   1c9dc:	mvn	r5, #0
   1c9e0:	mov	r6, r0
   1c9e4:	ldr	r0, [r4]
   1c9e8:	ldr	r7, [r6]
   1c9ec:	bl	1206c <close@plt>
   1c9f0:	ldr	r0, [r4, #4]
   1c9f4:	bl	1206c <close@plt>
   1c9f8:	strd	r8, [r4]
   1c9fc:	str	r7, [r6]
   1ca00:	b	1c970 <__assert_fail@plt+0xa8ec>
   1ca04:	mov	r2, #0
   1ca08:	mov	r1, #1
   1ca0c:	ldr	r0, [r4, #4]
   1ca10:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1ca14:	subs	r2, r0, #0
   1ca18:	blt	1c9d8 <__assert_fail@plt+0xa954>
   1ca1c:	orr	r2, r2, #1
   1ca20:	mov	r1, #2
   1ca24:	ldr	r0, [r4, #4]
   1ca28:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1ca2c:	cmn	r0, #1
   1ca30:	beq	1c9d8 <__assert_fail@plt+0xa954>
   1ca34:	mov	r2, #0
   1ca38:	mov	r1, #1
   1ca3c:	ldr	r0, [r4]
   1ca40:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1ca44:	cmp	r0, #0
   1ca48:	blt	1c9d8 <__assert_fail@plt+0xa954>
   1ca4c:	orr	r2, r0, #1
   1ca50:	mov	r1, #2
   1ca54:	ldr	r0, [r4]
   1ca58:	bl	21a38 <__assert_fail@plt+0xf9b4>
   1ca5c:	cmn	r0, #1
   1ca60:	beq	1c9d8 <__assert_fail@plt+0xa954>
   1ca64:	mov	r0, r5
   1ca68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ca6c:	bl	11ff4 <pipe2@plt>
   1ca70:	subs	r5, r0, #0
   1ca74:	bge	1ca88 <__assert_fail@plt+0xaa04>
   1ca78:	bl	11ea4 <__errno_location@plt>
   1ca7c:	ldr	r3, [r0]
   1ca80:	cmp	r3, #38	; 0x26
   1ca84:	beq	1ca98 <__assert_fail@plt+0xaa14>
   1ca88:	mov	r3, #1
   1ca8c:	str	r3, [r7]
   1ca90:	mov	r0, r5
   1ca94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ca98:	mvn	r3, #0
   1ca9c:	str	r3, [r7]
   1caa0:	b	1c940 <__assert_fail@plt+0xa8bc>
   1caa4:	bl	11ea4 <__errno_location@plt>
   1caa8:	mov	r3, #22
   1caac:	mvn	r5, #0
   1cab0:	str	r3, [r0]
   1cab4:	b	1c970 <__assert_fail@plt+0xa8ec>
   1cab8:	mvn	r5, #0
   1cabc:	b	1c970 <__assert_fail@plt+0xa8ec>
   1cac0:	andeq	r6, r3, r0, ror #16
   1cac4:	push	{r4, lr}
   1cac8:	sub	sp, sp, #8
   1cacc:	ldr	r4, [pc, #100]	; 1cb38 <__assert_fail@plt+0xaab4>
   1cad0:	ldr	r0, [pc, #100]	; 1cb3c <__assert_fail@plt+0xaab8>
   1cad4:	ldr	r3, [r4]
   1cad8:	str	r3, [sp, #4]
   1cadc:	bl	11dd8 <getenv@plt>
   1cae0:	subs	r3, r0, #0
   1cae4:	beq	1caf4 <__assert_fail@plt+0xaa70>
   1cae8:	ldrb	r3, [r3]
   1caec:	cmp	r3, #0
   1caf0:	bne	1cb10 <__assert_fail@plt+0xaa8c>
   1caf4:	ldr	r0, [pc, #68]	; 1cb40 <__assert_fail@plt+0xaabc>
   1caf8:	ldr	r2, [sp, #4]
   1cafc:	ldr	r3, [r4]
   1cb00:	cmp	r2, r3
   1cb04:	bne	1cb34 <__assert_fail@plt+0xaab0>
   1cb08:	add	sp, sp, #8
   1cb0c:	pop	{r4, pc}
   1cb10:	mov	r2, #10
   1cb14:	mov	r1, sp
   1cb18:	bl	11b5c <strtol@plt>
   1cb1c:	ldr	r2, [sp]
   1cb20:	ldr	r3, [pc, #24]	; 1cb40 <__assert_fail@plt+0xaabc>
   1cb24:	ldrb	r2, [r2]
   1cb28:	cmp	r2, #0
   1cb2c:	movne	r0, r3
   1cb30:	b	1caf8 <__assert_fail@plt+0xaa74>
   1cb34:	bl	11c7c <__stack_chk_fail@plt>
   1cb38:	andeq	r5, r3, r0, lsl #30
   1cb3c:	andeq	r4, r2, r8, ror #24
   1cb40:	andeq	r1, r3, r9, rrx
   1cb44:	push	{r4, r5, r6, lr}
   1cb48:	subs	r4, r0, #0
   1cb4c:	beq	1cbc0 <__assert_fail@plt+0xab3c>
   1cb50:	mov	r1, #47	; 0x2f
   1cb54:	bl	11f94 <strrchr@plt>
   1cb58:	subs	r5, r0, #0
   1cb5c:	beq	1cbac <__assert_fail@plt+0xab28>
   1cb60:	add	r6, r5, #1
   1cb64:	sub	r3, r6, r4
   1cb68:	cmp	r3, #6
   1cb6c:	ble	1cbac <__assert_fail@plt+0xab28>
   1cb70:	mov	r2, #7
   1cb74:	ldr	r1, [pc, #96]	; 1cbdc <__assert_fail@plt+0xab58>
   1cb78:	sub	r0, r5, #6
   1cb7c:	bl	12048 <strncmp@plt>
   1cb80:	cmp	r0, #0
   1cb84:	bne	1cbac <__assert_fail@plt+0xab28>
   1cb88:	mov	r2, #3
   1cb8c:	ldr	r1, [pc, #76]	; 1cbe0 <__assert_fail@plt+0xab5c>
   1cb90:	mov	r0, r6
   1cb94:	bl	12048 <strncmp@plt>
   1cb98:	cmp	r0, #0
   1cb9c:	movne	r4, r6
   1cba0:	ldreq	r3, [pc, #60]	; 1cbe4 <__assert_fail@plt+0xab60>
   1cba4:	addeq	r4, r5, #4
   1cba8:	streq	r4, [r3]
   1cbac:	ldr	r2, [pc, #52]	; 1cbe8 <__assert_fail@plt+0xab64>
   1cbb0:	ldr	r3, [pc, #52]	; 1cbec <__assert_fail@plt+0xab68>
   1cbb4:	str	r4, [r2]
   1cbb8:	str	r4, [r3]
   1cbbc:	pop	{r4, r5, r6, pc}
   1cbc0:	ldr	r3, [pc, #40]	; 1cbf0 <__assert_fail@plt+0xab6c>
   1cbc4:	mov	r2, #55	; 0x37
   1cbc8:	mov	r1, #1
   1cbcc:	ldr	r3, [r3]
   1cbd0:	ldr	r0, [pc, #28]	; 1cbf4 <__assert_fail@plt+0xab70>
   1cbd4:	bl	11d30 <fwrite@plt>
   1cbd8:	bl	12060 <abort@plt>
   1cbdc:			; <UNDEFINED> instruction: 0x00024cb0
   1cbe0:			; <UNDEFINED> instruction: 0x00024cb8
   1cbe4:	andeq	r6, r3, r0, asr #5
   1cbe8:	andeq	r6, r3, r4, ror #16
   1cbec:	andeq	r6, r3, r4, asr #5
   1cbf0:	ldrdeq	r6, [r3], -r0
   1cbf4:	andeq	r4, r2, r8, ror ip
   1cbf8:	push	{r4, lr}
   1cbfc:	mov	r2, #48	; 0x30
   1cc00:	mov	r4, r1
   1cc04:	mov	r1, #0
   1cc08:	bl	11ed4 <memset@plt>
   1cc0c:	cmp	r4, #10
   1cc10:	beq	1cc1c <__assert_fail@plt+0xab98>
   1cc14:	str	r4, [r0]
   1cc18:	pop	{r4, pc}
   1cc1c:	bl	12060 <abort@plt>
   1cc20:	push	{r4, r5, r6, lr}
   1cc24:	mov	r2, #5
   1cc28:	mov	r5, r0
   1cc2c:	mov	r6, r1
   1cc30:	mov	r1, r0
   1cc34:	mov	r0, #0
   1cc38:	bl	11c70 <dcgettext@plt>
   1cc3c:	cmp	r5, r0
   1cc40:	mov	r4, r0
   1cc44:	beq	1cc50 <__assert_fail@plt+0xabcc>
   1cc48:	mov	r0, r4
   1cc4c:	pop	{r4, r5, r6, pc}
   1cc50:	bl	22288 <_obstack_memory_used@@Base+0x268>
   1cc54:	ldrb	r3, [r0]
   1cc58:	bic	r3, r3, #32
   1cc5c:	cmp	r3, #85	; 0x55
   1cc60:	bne	1ccc0 <__assert_fail@plt+0xac3c>
   1cc64:	ldrb	r3, [r0, #1]
   1cc68:	bic	r3, r3, #32
   1cc6c:	cmp	r3, #84	; 0x54
   1cc70:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cc74:	ldrb	r3, [r0, #2]
   1cc78:	bic	r3, r3, #32
   1cc7c:	cmp	r3, #70	; 0x46
   1cc80:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cc84:	ldrb	r3, [r0, #3]
   1cc88:	cmp	r3, #45	; 0x2d
   1cc8c:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cc90:	ldrb	r3, [r0, #4]
   1cc94:	cmp	r3, #56	; 0x38
   1cc98:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cc9c:	ldrb	r3, [r0, #5]
   1cca0:	cmp	r3, #0
   1cca4:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cca8:	ldrb	r2, [r4]
   1ccac:	ldr	r3, [pc, #156]	; 1cd50 <__assert_fail@plt+0xaccc>
   1ccb0:	ldr	r4, [pc, #156]	; 1cd54 <__assert_fail@plt+0xacd0>
   1ccb4:	cmp	r2, #96	; 0x60
   1ccb8:	movne	r4, r3
   1ccbc:	b	1cc48 <__assert_fail@plt+0xabc4>
   1ccc0:	cmp	r3, #71	; 0x47
   1ccc4:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1ccc8:	ldrb	r3, [r0, #1]
   1cccc:	bic	r3, r3, #32
   1ccd0:	cmp	r3, #66	; 0x42
   1ccd4:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1ccd8:	ldrb	r3, [r0, #2]
   1ccdc:	cmp	r3, #49	; 0x31
   1cce0:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cce4:	ldrb	r3, [r0, #3]
   1cce8:	cmp	r3, #56	; 0x38
   1ccec:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1ccf0:	ldrb	r3, [r0, #4]
   1ccf4:	cmp	r3, #48	; 0x30
   1ccf8:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1ccfc:	ldrb	r3, [r0, #5]
   1cd00:	cmp	r3, #51	; 0x33
   1cd04:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cd08:	ldrb	r3, [r0, #6]
   1cd0c:	cmp	r3, #48	; 0x30
   1cd10:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cd14:	ldrb	r3, [r0, #7]
   1cd18:	cmp	r3, #0
   1cd1c:	bne	1cd38 <__assert_fail@plt+0xacb4>
   1cd20:	ldrb	r2, [r4]
   1cd24:	ldr	r3, [pc, #44]	; 1cd58 <__assert_fail@plt+0xacd4>
   1cd28:	ldr	r4, [pc, #44]	; 1cd5c <__assert_fail@plt+0xacd8>
   1cd2c:	cmp	r2, #96	; 0x60
   1cd30:	movne	r4, r3
   1cd34:	b	1cc48 <__assert_fail@plt+0xabc4>
   1cd38:	ldr	r3, [pc, #32]	; 1cd60 <__assert_fail@plt+0xacdc>
   1cd3c:	ldr	r4, [pc, #32]	; 1cd64 <__assert_fail@plt+0xace0>
   1cd40:	cmp	r6, #9
   1cd44:	movne	r4, r3
   1cd48:	mov	r0, r4
   1cd4c:	pop	{r4, r5, r6, pc}
   1cd50:	andeq	r4, r2, r4, lsl sp
   1cd54:	andeq	r4, r2, r0, lsr #26
   1cd58:	andeq	r4, r2, r8, lsl sp
   1cd5c:	andeq	r4, r2, ip, lsl sp
   1cd60:	andeq	r4, r2, r4, lsr #26
   1cd64:	andeq	r4, r2, r0, lsl sp
   1cd68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd6c:	sub	sp, sp, #124	; 0x7c
   1cd70:	ldr	ip, [pc, #3576]	; 1db70 <__assert_fail@plt+0xbaec>
   1cd74:	str	r3, [sp, #24]
   1cd78:	ldr	r3, [sp, #168]	; 0xa8
   1cd7c:	ldr	ip, [ip]
   1cd80:	str	r3, [sp, #56]	; 0x38
   1cd84:	ldr	r3, [sp, #172]	; 0xac
   1cd88:	ldr	r8, [sp, #160]	; 0xa0
   1cd8c:	str	r3, [sp, #80]	; 0x50
   1cd90:	ldr	r3, [sp, #176]	; 0xb0
   1cd94:	mov	fp, r0
   1cd98:	str	r3, [sp, #76]	; 0x4c
   1cd9c:	mov	sl, r1
   1cda0:	str	r2, [sp, #36]	; 0x24
   1cda4:	str	ip, [sp, #116]	; 0x74
   1cda8:	bl	11d60 <__ctype_get_mb_cur_max@plt>
   1cdac:	ldr	r3, [sp, #164]	; 0xa4
   1cdb0:	ands	r4, r3, #2
   1cdb4:	movne	r3, #1
   1cdb8:	moveq	r3, #0
   1cdbc:	str	r3, [sp, #32]
   1cdc0:	str	r0, [sp, #64]	; 0x40
   1cdc4:	cmp	r8, #10
   1cdc8:	ldrls	pc, [pc, r8, lsl #2]
   1cdcc:	b	1e57c <__assert_fail@plt+0xc4f8>
   1cdd0:	andeq	sp, r1, r4, asr #3
   1cdd4:	andeq	sp, r1, ip, asr r2
   1cdd8:	andeq	sp, r1, ip, asr r8
   1cddc:	andeq	sp, r1, ip, ror r2
   1cde0:	andeq	sp, r1, r0, lsr r1
   1cde4:	andeq	sp, r1, r8, ror r1
   1cde8:	strdeq	sp, [r1], -r4
   1cdec:	andeq	sp, r1, ip, lsr #4
   1cdf0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cdf4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cdf8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cdfc:	cmp	r8, #10
   1ce00:	beq	1ce24 <__assert_fail@plt+0xada0>
   1ce04:	mov	r1, r8
   1ce08:	ldr	r0, [pc, #3428]	; 1db74 <__assert_fail@plt+0xbaf0>
   1ce0c:	bl	1cc20 <__assert_fail@plt+0xab9c>
   1ce10:	mov	r1, r8
   1ce14:	str	r0, [sp, #80]	; 0x50
   1ce18:	ldr	r0, [pc, #3420]	; 1db7c <__assert_fail@plt+0xbaf8>
   1ce1c:	bl	1cc20 <__assert_fail@plt+0xab9c>
   1ce20:	str	r0, [sp, #76]	; 0x4c
   1ce24:	cmp	r4, #0
   1ce28:	movne	r4, #0
   1ce2c:	beq	1e23c <__assert_fail@plt+0xc1b8>
   1ce30:	ldr	r7, [sp, #76]	; 0x4c
   1ce34:	mov	r5, #0
   1ce38:	mov	r6, #1
   1ce3c:	mov	r0, r7
   1ce40:	str	r6, [sp, #40]	; 0x28
   1ce44:	str	r5, [sp, #68]	; 0x44
   1ce48:	bl	11e80 <strlen@plt>
   1ce4c:	str	r6, [sp, #28]
   1ce50:	str	r5, [sp, #44]	; 0x2c
   1ce54:	str	r5, [sp, #72]	; 0x48
   1ce58:	str	r7, [sp, #60]	; 0x3c
   1ce5c:	str	r0, [sp, #52]	; 0x34
   1ce60:	str	r8, [sp, #160]	; 0xa0
   1ce64:	mov	r8, fp
   1ce68:	ldr	fp, [sp, #160]	; 0xa0
   1ce6c:	mov	r9, #0
   1ce70:	ldr	r3, [sp, #24]
   1ce74:	cmn	r3, #1
   1ce78:	beq	1d3e0 <__assert_fail@plt+0xb35c>
   1ce7c:	ldr	r3, [sp, #24]
   1ce80:	subs	r6, r3, r9
   1ce84:	movne	r6, #1
   1ce88:	cmp	r6, #0
   1ce8c:	beq	1d3f8 <__assert_fail@plt+0xb374>
   1ce90:	ldr	r7, [sp, #28]
   1ce94:	ldr	r0, [sp, #36]	; 0x24
   1ce98:	cmp	fp, #2
   1ce9c:	moveq	r7, #0
   1cea0:	andne	r7, r7, #1
   1cea4:	add	r3, r0, r9
   1cea8:	cmp	r7, #0
   1ceac:	str	r3, [sp, #48]	; 0x30
   1ceb0:	beq	1d89c <__assert_fail@plt+0xb818>
   1ceb4:	ldr	r2, [sp, #52]	; 0x34
   1ceb8:	cmp	r2, #0
   1cebc:	beq	1db80 <__assert_fail@plt+0xbafc>
   1cec0:	ldr	r1, [sp, #24]
   1cec4:	cmp	r2, #1
   1cec8:	mov	r3, r2
   1cecc:	movls	r3, #0
   1ced0:	movhi	r3, #1
   1ced4:	cmn	r1, #1
   1ced8:	movne	r3, #0
   1cedc:	cmp	r3, #0
   1cee0:	add	r5, r9, r2
   1cee4:	beq	1cef0 <__assert_fail@plt+0xae6c>
   1cee8:	bl	11e80 <strlen@plt>
   1ceec:	str	r0, [sp, #24]
   1cef0:	ldr	r3, [sp, #24]
   1cef4:	cmp	r5, r3
   1cef8:	bhi	1db80 <__assert_fail@plt+0xbafc>
   1cefc:	ldr	r2, [sp, #52]	; 0x34
   1cf00:	ldr	r1, [sp, #60]	; 0x3c
   1cf04:	ldr	r0, [sp, #48]	; 0x30
   1cf08:	bl	11c64 <memcmp@plt>
   1cf0c:	cmp	r0, #0
   1cf10:	bne	1db80 <__assert_fail@plt+0xbafc>
   1cf14:	ldr	r3, [sp, #32]
   1cf18:	cmp	r3, #0
   1cf1c:	bne	1e43c <__assert_fail@plt+0xc3b8>
   1cf20:	ldr	r3, [sp, #48]	; 0x30
   1cf24:	ldrb	r5, [r3]
   1cf28:	cmp	r5, #126	; 0x7e
   1cf2c:	ldrls	pc, [pc, r5, lsl #2]
   1cf30:	b	1d800 <__assert_fail@plt+0xb77c>
   1cf34:	andeq	sp, r1, ip, ror #13
   1cf38:	andeq	sp, r1, r0, lsl #16
   1cf3c:	andeq	sp, r1, r0, lsl #16
   1cf40:	andeq	sp, r1, r0, lsl #16
   1cf44:	andeq	sp, r1, r0, lsl #16
   1cf48:	andeq	sp, r1, r0, lsl #16
   1cf4c:	andeq	sp, r1, r0, lsl #16
   1cf50:			; <UNDEFINED> instruction: 0x0001d7b8
   1cf54:	andeq	sp, r1, r8, lsr #15
   1cf58:	andeq	sp, r1, r8, lsr #13
   1cf5c:	andeq	sp, r1, r0, ror r6
   1cf60:	andeq	sp, r1, r8, asr #13
   1cf64:			; <UNDEFINED> instruction: 0x0001d6b0
   1cf68:	andeq	sp, r1, r0, ror #11
   1cf6c:	andeq	sp, r1, r0, lsl #16
   1cf70:	andeq	sp, r1, r0, lsl #16
   1cf74:	andeq	sp, r1, r0, lsl #16
   1cf78:	andeq	sp, r1, r0, lsl #16
   1cf7c:	andeq	sp, r1, r0, lsl #16
   1cf80:	andeq	sp, r1, r0, lsl #16
   1cf84:	andeq	sp, r1, r0, lsl #16
   1cf88:	andeq	sp, r1, r0, lsl #16
   1cf8c:	andeq	sp, r1, r0, lsl #16
   1cf90:	andeq	sp, r1, r0, lsl #16
   1cf94:	andeq	sp, r1, r0, lsl #16
   1cf98:	andeq	sp, r1, r0, lsl #16
   1cf9c:	andeq	sp, r1, r0, lsl #16
   1cfa0:	andeq	sp, r1, r0, lsl #16
   1cfa4:	andeq	sp, r1, r0, lsl #16
   1cfa8:	andeq	sp, r1, r0, lsl #16
   1cfac:	andeq	sp, r1, r0, lsl #16
   1cfb0:	andeq	sp, r1, r0, lsl #16
   1cfb4:	andeq	sp, r1, r0, asr #15
   1cfb8:	ldrdeq	sp, [r1], -r4
   1cfbc:	ldrdeq	sp, [r1], -r4
   1cfc0:	ldrdeq	sp, [r1], -r8
   1cfc4:	ldrdeq	sp, [r1], -r4
   1cfc8:	strdeq	sp, [r1], -r4
   1cfcc:	ldrdeq	sp, [r1], -r4
   1cfd0:	andeq	sp, r1, r4, lsl r5
   1cfd4:	ldrdeq	sp, [r1], -r4
   1cfd8:	ldrdeq	sp, [r1], -r4
   1cfdc:	ldrdeq	sp, [r1], -r4
   1cfe0:	strdeq	sp, [r1], -r4
   1cfe4:	strdeq	sp, [r1], -r4
   1cfe8:	strdeq	sp, [r1], -r4
   1cfec:	strdeq	sp, [r1], -r4
   1cff0:	strdeq	sp, [r1], -r4
   1cff4:	strdeq	sp, [r1], -r4
   1cff8:	strdeq	sp, [r1], -r4
   1cffc:	strdeq	sp, [r1], -r4
   1d000:	strdeq	sp, [r1], -r4
   1d004:	strdeq	sp, [r1], -r4
   1d008:	strdeq	sp, [r1], -r4
   1d00c:	strdeq	sp, [r1], -r4
   1d010:	strdeq	sp, [r1], -r4
   1d014:	strdeq	sp, [r1], -r4
   1d018:	strdeq	sp, [r1], -r4
   1d01c:	strdeq	sp, [r1], -r4
   1d020:	ldrdeq	sp, [r1], -r4
   1d024:	ldrdeq	sp, [r1], -r4
   1d028:	ldrdeq	sp, [r1], -r4
   1d02c:	ldrdeq	sp, [r1], -r4
   1d030:	andeq	sp, r1, r8, ror #9
   1d034:	andeq	sp, r1, r0, lsl #16
   1d038:	strdeq	sp, [r1], -r4
   1d03c:	strdeq	sp, [r1], -r4
   1d040:	strdeq	sp, [r1], -r4
   1d044:	strdeq	sp, [r1], -r4
   1d048:	strdeq	sp, [r1], -r4
   1d04c:	strdeq	sp, [r1], -r4
   1d050:	strdeq	sp, [r1], -r4
   1d054:	strdeq	sp, [r1], -r4
   1d058:	strdeq	sp, [r1], -r4
   1d05c:	strdeq	sp, [r1], -r4
   1d060:	strdeq	sp, [r1], -r4
   1d064:	strdeq	sp, [r1], -r4
   1d068:	strdeq	sp, [r1], -r4
   1d06c:	strdeq	sp, [r1], -r4
   1d070:	strdeq	sp, [r1], -r4
   1d074:	strdeq	sp, [r1], -r4
   1d078:	strdeq	sp, [r1], -r4
   1d07c:	strdeq	sp, [r1], -r4
   1d080:	strdeq	sp, [r1], -r4
   1d084:	strdeq	sp, [r1], -r4
   1d088:	strdeq	sp, [r1], -r4
   1d08c:	strdeq	sp, [r1], -r4
   1d090:	strdeq	sp, [r1], -r4
   1d094:	strdeq	sp, [r1], -r4
   1d098:	strdeq	sp, [r1], -r4
   1d09c:	strdeq	sp, [r1], -r4
   1d0a0:	ldrdeq	sp, [r1], -r4
   1d0a4:	andeq	sp, r1, r0, lsr #9
   1d0a8:	strdeq	sp, [r1], -r4
   1d0ac:	ldrdeq	sp, [r1], -r4
   1d0b0:	strdeq	sp, [r1], -r4
   1d0b4:	ldrdeq	sp, [r1], -r4
   1d0b8:	strdeq	sp, [r1], -r4
   1d0bc:	strdeq	sp, [r1], -r4
   1d0c0:	strdeq	sp, [r1], -r4
   1d0c4:	strdeq	sp, [r1], -r4
   1d0c8:	strdeq	sp, [r1], -r4
   1d0cc:	strdeq	sp, [r1], -r4
   1d0d0:	strdeq	sp, [r1], -r4
   1d0d4:	strdeq	sp, [r1], -r4
   1d0d8:	strdeq	sp, [r1], -r4
   1d0dc:	strdeq	sp, [r1], -r4
   1d0e0:	strdeq	sp, [r1], -r4
   1d0e4:	strdeq	sp, [r1], -r4
   1d0e8:	strdeq	sp, [r1], -r4
   1d0ec:	strdeq	sp, [r1], -r4
   1d0f0:	strdeq	sp, [r1], -r4
   1d0f4:	strdeq	sp, [r1], -r4
   1d0f8:	strdeq	sp, [r1], -r4
   1d0fc:	strdeq	sp, [r1], -r4
   1d100:	strdeq	sp, [r1], -r4
   1d104:	strdeq	sp, [r1], -r4
   1d108:	strdeq	sp, [r1], -r4
   1d10c:	strdeq	sp, [r1], -r4
   1d110:	strdeq	sp, [r1], -r4
   1d114:	strdeq	sp, [r1], -r4
   1d118:	strdeq	sp, [r1], -r4
   1d11c:	strdeq	sp, [r1], -r4
   1d120:			; <UNDEFINED> instruction: 0x0001d2b8
   1d124:	ldrdeq	sp, [r1], -r4
   1d128:			; <UNDEFINED> instruction: 0x0001d2b8
   1d12c:	ldrdeq	sp, [r1], -r8
   1d130:	cmp	r4, #0
   1d134:	moveq	r3, #1
   1d138:	streq	r3, [sp, #28]
   1d13c:	beq	1d868 <__assert_fail@plt+0xb7e4>
   1d140:	mov	r3, #0
   1d144:	mov	r4, r3
   1d148:	mov	r2, #1
   1d14c:	str	r2, [sp, #40]	; 0x28
   1d150:	str	r3, [sp, #68]	; 0x44
   1d154:	str	r2, [sp, #32]
   1d158:	str	r2, [sp, #52]	; 0x34
   1d15c:	ldr	r3, [pc, #2584]	; 1db7c <__assert_fail@plt+0xbaf8>
   1d160:	str	r4, [sp, #44]	; 0x2c
   1d164:	str	r4, [sp, #72]	; 0x48
   1d168:	str	r4, [sp, #28]
   1d16c:	str	r3, [sp, #60]	; 0x3c
   1d170:	mov	r8, #2
   1d174:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d178:	cmp	r4, #0
   1d17c:	bne	1e408 <__assert_fail@plt+0xc384>
   1d180:	cmp	sl, #0
   1d184:	beq	1e1c8 <__assert_fail@plt+0xc144>
   1d188:	mov	r3, #34	; 0x22
   1d18c:	strb	r3, [fp]
   1d190:	ldr	r3, [pc, #2528]	; 1db78 <__assert_fail@plt+0xbaf4>
   1d194:	mov	r1, r4
   1d198:	mov	r2, #1
   1d19c:	str	r4, [sp, #68]	; 0x44
   1d1a0:	str	r2, [sp, #40]	; 0x28
   1d1a4:	mov	r4, r2
   1d1a8:	str	r1, [sp, #44]	; 0x2c
   1d1ac:	str	r1, [sp, #72]	; 0x48
   1d1b0:	str	r1, [sp, #32]
   1d1b4:	str	r2, [sp, #28]
   1d1b8:	str	r2, [sp, #52]	; 0x34
   1d1bc:	str	r3, [sp, #60]	; 0x3c
   1d1c0:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d1c4:	mov	r3, #0
   1d1c8:	str	r3, [sp, #68]	; 0x44
   1d1cc:	str	r3, [sp, #44]	; 0x2c
   1d1d0:	str	r3, [sp, #32]
   1d1d4:	str	r3, [sp, #28]
   1d1d8:	str	r3, [sp, #60]	; 0x3c
   1d1dc:	mov	r3, #1
   1d1e0:	str	r8, [sp, #72]	; 0x48
   1d1e4:	str	r8, [sp, #52]	; 0x34
   1d1e8:	mov	r4, r8
   1d1ec:	str	r3, [sp, #40]	; 0x28
   1d1f0:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d1f4:	mov	r3, #1
   1d1f8:	str	r3, [sp, #40]	; 0x28
   1d1fc:	str	r3, [sp, #32]
   1d200:	str	r3, [sp, #28]
   1d204:	str	r3, [sp, #52]	; 0x34
   1d208:	ldr	r3, [pc, #2408]	; 1db78 <__assert_fail@plt+0xbaf4>
   1d20c:	mov	r2, #0
   1d210:	mov	r4, r2
   1d214:	str	r2, [sp, #68]	; 0x44
   1d218:	str	r2, [sp, #44]	; 0x2c
   1d21c:	str	r2, [sp, #72]	; 0x48
   1d220:	str	r3, [sp, #60]	; 0x3c
   1d224:	mov	r8, #5
   1d228:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d22c:	mov	r3, #0
   1d230:	mov	r2, #1
   1d234:	str	r2, [sp, #40]	; 0x28
   1d238:	mov	r4, r3
   1d23c:	str	r3, [sp, #68]	; 0x44
   1d240:	str	r2, [sp, #28]
   1d244:	str	r3, [sp, #44]	; 0x2c
   1d248:	str	r3, [sp, #72]	; 0x48
   1d24c:	str	r3, [sp, #32]
   1d250:	str	r3, [sp, #52]	; 0x34
   1d254:	str	r3, [sp, #60]	; 0x3c
   1d258:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d25c:	mov	r2, #1
   1d260:	mov	r3, #0
   1d264:	str	r2, [sp, #40]	; 0x28
   1d268:	mov	r4, r3
   1d26c:	str	r3, [sp, #68]	; 0x44
   1d270:	str	r8, [sp, #52]	; 0x34
   1d274:	str	r2, [sp, #32]
   1d278:	b	1d15c <__assert_fail@plt+0xb0d8>
   1d27c:	mov	r3, #1
   1d280:	str	r3, [sp, #40]	; 0x28
   1d284:	str	r3, [sp, #32]
   1d288:	str	r3, [sp, #28]
   1d28c:	str	r3, [sp, #52]	; 0x34
   1d290:	ldr	r3, [pc, #2276]	; 1db7c <__assert_fail@plt+0xbaf8>
   1d294:	mov	r2, #0
   1d298:	mov	r4, r2
   1d29c:	str	r2, [sp, #68]	; 0x44
   1d2a0:	str	r2, [sp, #44]	; 0x2c
   1d2a4:	str	r2, [sp, #72]	; 0x48
   1d2a8:	str	r3, [sp, #60]	; 0x3c
   1d2ac:	mov	r8, #2
   1d2b0:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d2b4:	mov	r7, #0
   1d2b8:	ldr	r3, [sp, #24]
   1d2bc:	cmn	r3, #1
   1d2c0:	beq	1ddfc <__assert_fail@plt+0xbd78>
   1d2c4:	ldr	r3, [sp, #24]
   1d2c8:	subs	r3, r3, #1
   1d2cc:	movne	r3, #1
   1d2d0:	cmp	r3, #0
   1d2d4:	sub	r2, fp, #2
   1d2d8:	clz	r2, r2
   1d2dc:	lsr	r2, r2, #5
   1d2e0:	bne	1d4dc <__assert_fail@plt+0xb458>
   1d2e4:	cmp	r9, #0
   1d2e8:	bne	1d4dc <__assert_fail@plt+0xb458>
   1d2ec:	ldr	r3, [sp, #32]
   1d2f0:	tst	r3, r2
   1d2f4:	bne	1d5fc <__assert_fail@plt+0xb578>
   1d2f8:	ldr	r3, [sp, #28]
   1d2fc:	eor	r3, r3, #1
   1d300:	orr	r3, r2, r3
   1d304:	ldr	r2, [sp, #32]
   1d308:	eor	r3, r3, #1
   1d30c:	orrs	r3, r2, r3
   1d310:	beq	1d340 <__assert_fail@plt+0xb2bc>
   1d314:	mov	r3, #0
   1d318:	ldr	r1, [sp, #56]	; 0x38
   1d31c:	cmp	r1, #0
   1d320:	beq	1d340 <__assert_fail@plt+0xb2bc>
   1d324:	lsr	r2, r5, #5
   1d328:	and	r0, r5, #31
   1d32c:	uxtb	r2, r2
   1d330:	ldr	r1, [r1, r2, lsl #2]
   1d334:	lsr	r2, r1, r0
   1d338:	tst	r2, #1
   1d33c:	bne	1d348 <__assert_fail@plt+0xb2c4>
   1d340:	cmp	r7, #0
   1d344:	beq	1d598 <__assert_fail@plt+0xb514>
   1d348:	sub	r2, fp, #2
   1d34c:	clz	r2, r2
   1d350:	lsr	r2, r2, #5
   1d354:	ldr	r3, [sp, #32]
   1d358:	cmp	r3, #0
   1d35c:	bne	1d688 <__assert_fail@plt+0xb604>
   1d360:	ldr	r3, [sp, #44]	; 0x2c
   1d364:	eor	r3, r3, #1
   1d368:	ands	r3, r2, r3
   1d36c:	beq	1d3a4 <__assert_fail@plt+0xb320>
   1d370:	cmp	sl, r4
   1d374:	movhi	r2, #39	; 0x27
   1d378:	strbhi	r2, [r8, r4]
   1d37c:	add	r2, r4, #1
   1d380:	cmp	r2, sl
   1d384:	movcc	r1, #36	; 0x24
   1d388:	strbcc	r1, [r8, r2]
   1d38c:	add	r2, r4, #2
   1d390:	cmp	r2, sl
   1d394:	add	r4, r4, #3
   1d398:	movcc	r1, #39	; 0x27
   1d39c:	strbcc	r1, [r8, r2]
   1d3a0:	str	r3, [sp, #44]	; 0x2c
   1d3a4:	cmp	r4, sl
   1d3a8:	movcc	r3, #92	; 0x5c
   1d3ac:	strbcc	r3, [r8, r4]
   1d3b0:	add	r9, r9, #1
   1d3b4:	add	r4, r4, #1
   1d3b8:	cmp	r4, sl
   1d3bc:	ldr	r3, [sp, #40]	; 0x28
   1d3c0:	strbcc	r5, [r8, r4]
   1d3c4:	cmp	r6, #0
   1d3c8:	moveq	r3, #0
   1d3cc:	str	r3, [sp, #40]	; 0x28
   1d3d0:	ldr	r3, [sp, #24]
   1d3d4:	add	r4, r4, #1
   1d3d8:	cmn	r3, #1
   1d3dc:	bne	1ce7c <__assert_fail@plt+0xadf8>
   1d3e0:	ldr	r3, [sp, #36]	; 0x24
   1d3e4:	ldrb	r6, [r3, r9]
   1d3e8:	adds	r6, r6, #0
   1d3ec:	movne	r6, #1
   1d3f0:	cmp	r6, #0
   1d3f4:	bne	1ce90 <__assert_fail@plt+0xae0c>
   1d3f8:	str	fp, [sp, #160]	; 0xa0
   1d3fc:	mov	fp, r8
   1d400:	ldr	r8, [sp, #160]	; 0xa0
   1d404:	ldr	r1, [sp, #32]
   1d408:	cmp	r4, #0
   1d40c:	sub	r2, r8, #2
   1d410:	clz	r2, r2
   1d414:	lsr	r2, r2, #5
   1d418:	andeq	r3, r2, r1
   1d41c:	movne	r3, #0
   1d420:	cmp	r3, #0
   1d424:	bne	1e510 <__assert_fail@plt+0xc48c>
   1d428:	eor	r3, r1, #1
   1d42c:	ands	r2, r2, r3
   1d430:	beq	1e44c <__assert_fail@plt+0xc3c8>
   1d434:	ldr	r3, [sp, #68]	; 0x44
   1d438:	cmp	r3, #0
   1d43c:	beq	1e450 <__assert_fail@plt+0xc3cc>
   1d440:	ldr	r3, [sp, #40]	; 0x28
   1d444:	cmp	r3, #0
   1d448:	bne	1e4cc <__assert_fail@plt+0xc448>
   1d44c:	ldr	r3, [sp, #72]	; 0x48
   1d450:	adds	r3, r3, #0
   1d454:	movne	r3, #1
   1d458:	cmp	sl, #0
   1d45c:	movne	r3, #0
   1d460:	cmp	r3, #0
   1d464:	ldreq	r2, [sp, #68]	; 0x44
   1d468:	beq	1e450 <__assert_fail@plt+0xc3cc>
   1d46c:	ldr	sl, [sp, #72]	; 0x48
   1d470:	str	r3, [sp, #68]	; 0x44
   1d474:	ldr	r3, [pc, #1792]	; 1db7c <__assert_fail@plt+0xbaf8>
   1d478:	mov	r2, #39	; 0x27
   1d47c:	mov	r4, #1
   1d480:	str	r3, [sp, #60]	; 0x3c
   1d484:	mov	r3, #0
   1d488:	strb	r2, [fp]
   1d48c:	str	r4, [sp, #52]	; 0x34
   1d490:	mov	r8, #2
   1d494:	str	r3, [sp, #32]
   1d498:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d49c:	mov	r7, #0
   1d4a0:	cmp	fp, #2
   1d4a4:	beq	1dddc <__assert_fail@plt+0xbd58>
   1d4a8:	ldr	r3, [sp, #52]	; 0x34
   1d4ac:	ldr	r2, [sp, #28]
   1d4b0:	ldr	r1, [sp, #32]
   1d4b4:	cmp	r3, #0
   1d4b8:	andne	r2, r2, r1
   1d4bc:	moveq	r2, #0
   1d4c0:	cmp	r2, #0
   1d4c4:	moveq	r5, #92	; 0x5c
   1d4c8:	moveq	r3, r5
   1d4cc:	bne	1dde8 <__assert_fail@plt+0xbd64>
   1d4d0:	ldr	r1, [sp, #28]
   1d4d4:	cmp	r1, #0
   1d4d8:	bne	1e558 <__assert_fail@plt+0xc4d4>
   1d4dc:	mov	r6, #0
   1d4e0:	b	1d2f8 <__assert_fail@plt+0xb274>
   1d4e4:	mov	r7, #0
   1d4e8:	cmp	fp, #2
   1d4ec:	beq	1de4c <__assert_fail@plt+0xbdc8>
   1d4f0:	cmp	fp, #5
   1d4f4:	beq	1de10 <__assert_fail@plt+0xbd8c>
   1d4f8:	sub	r2, fp, #2
   1d4fc:	mov	r6, #0
   1d500:	clz	r2, r2
   1d504:	mov	r5, #63	; 0x3f
   1d508:	lsr	r2, r2, #5
   1d50c:	b	1d2f8 <__assert_fail@plt+0xb274>
   1d510:	mov	r7, #0
   1d514:	cmp	fp, #2
   1d518:	strne	r6, [sp, #68]	; 0x44
   1d51c:	movne	r2, #0
   1d520:	movne	r5, #39	; 0x27
   1d524:	bne	1d2f8 <__assert_fail@plt+0xb274>
   1d528:	ldr	r3, [sp, #32]
   1d52c:	cmp	r3, #0
   1d530:	bne	1e22c <__assert_fail@plt+0xc1a8>
   1d534:	cmp	sl, #0
   1d538:	ldr	r3, [sp, #72]	; 0x48
   1d53c:	clz	r3, r3
   1d540:	lsr	r3, r3, #5
   1d544:	moveq	r3, #0
   1d548:	cmp	r3, #0
   1d54c:	bne	1e160 <__assert_fail@plt+0xc0dc>
   1d550:	cmp	sl, r4
   1d554:	movhi	r3, #39	; 0x27
   1d558:	strbhi	r3, [r8, r4]
   1d55c:	add	r3, r4, #1
   1d560:	cmp	sl, r3
   1d564:	movhi	r2, #92	; 0x5c
   1d568:	strbhi	r2, [r8, r3]
   1d56c:	add	r3, r4, #2
   1d570:	cmp	sl, r3
   1d574:	movhi	r2, #39	; 0x27
   1d578:	strbhi	r2, [r8, r3]
   1d57c:	mov	r3, #0
   1d580:	cmp	r7, #0
   1d584:	add	r4, r4, #3
   1d588:	str	r3, [sp, #44]	; 0x2c
   1d58c:	str	r6, [sp, #68]	; 0x44
   1d590:	mov	r5, #39	; 0x27
   1d594:	bne	1d348 <__assert_fail@plt+0xb2c4>
   1d598:	ldr	r2, [sp, #44]	; 0x2c
   1d59c:	eor	r3, r3, #1
   1d5a0:	and	r3, r3, r2
   1d5a4:	add	r9, r9, #1
   1d5a8:	uxtb	r3, r3
   1d5ac:	cmp	r3, #0
   1d5b0:	beq	1d3b8 <__assert_fail@plt+0xb334>
   1d5b4:	cmp	sl, r4
   1d5b8:	movhi	r3, #39	; 0x27
   1d5bc:	strbhi	r3, [r8, r4]
   1d5c0:	add	r3, r4, #1
   1d5c4:	cmp	sl, r3
   1d5c8:	movhi	r2, #39	; 0x27
   1d5cc:	strbhi	r2, [r8, r3]
   1d5d0:	mov	r3, #0
   1d5d4:	add	r4, r4, #2
   1d5d8:	str	r3, [sp, #44]	; 0x2c
   1d5dc:	b	1d3b8 <__assert_fail@plt+0xb334>
   1d5e0:	mov	r3, #114	; 0x72
   1d5e4:	ldr	r1, [sp, #32]
   1d5e8:	sub	r2, fp, #2
   1d5ec:	clz	r2, r2
   1d5f0:	lsr	r2, r2, #5
   1d5f4:	tst	r2, r1
   1d5f8:	beq	1d4d0 <__assert_fail@plt+0xb44c>
   1d5fc:	mov	fp, r8
   1d600:	mov	r8, #2
   1d604:	ldr	r3, [sp, #28]
   1d608:	cmp	r3, #0
   1d60c:	movne	r8, #4
   1d610:	ldr	r3, [sp, #164]	; 0xa4
   1d614:	mov	ip, #0
   1d618:	bic	r3, r3, #2
   1d61c:	str	r3, [sp, #4]
   1d620:	ldr	r3, [sp, #76]	; 0x4c
   1d624:	str	r8, [sp]
   1d628:	str	r3, [sp, #16]
   1d62c:	ldr	r3, [sp, #80]	; 0x50
   1d630:	ldr	r2, [sp, #36]	; 0x24
   1d634:	str	r3, [sp, #12]
   1d638:	mov	r1, sl
   1d63c:	ldr	r3, [sp, #24]
   1d640:	mov	r0, fp
   1d644:	str	ip, [sp, #8]
   1d648:	bl	1cd68 <__assert_fail@plt+0xace4>
   1d64c:	mov	r4, r0
   1d650:	ldr	r3, [pc, #1304]	; 1db70 <__assert_fail@plt+0xbaec>
   1d654:	ldr	r2, [sp, #116]	; 0x74
   1d658:	mov	r0, r4
   1d65c:	ldr	r3, [r3]
   1d660:	cmp	r2, r3
   1d664:	bne	1e554 <__assert_fail@plt+0xc4d0>
   1d668:	add	sp, sp, #124	; 0x7c
   1d66c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d670:	mov	r5, #110	; 0x6e
   1d674:	ldr	r3, [sp, #32]
   1d678:	mov	r2, #0
   1d67c:	cmp	r3, #0
   1d680:	mov	r6, r2
   1d684:	beq	1d360 <__assert_fail@plt+0xb2dc>
   1d688:	str	fp, [sp, #160]	; 0xa0
   1d68c:	mov	fp, r8
   1d690:	ldr	r8, [sp, #160]	; 0xa0
   1d694:	mov	r3, r2
   1d698:	ldr	r2, [sp, #28]
   1d69c:	and	r2, r2, r3
   1d6a0:	str	r2, [sp, #28]
   1d6a4:	b	1d604 <__assert_fail@plt+0xb580>
   1d6a8:	mov	r5, #116	; 0x74
   1d6ac:	b	1d674 <__assert_fail@plt+0xb5f0>
   1d6b0:	mov	r5, #102	; 0x66
   1d6b4:	ldr	r3, [sp, #32]
   1d6b8:	cmp	r3, #0
   1d6bc:	bne	1e268 <__assert_fail@plt+0xc1e4>
   1d6c0:	mov	r6, #0
   1d6c4:	b	1d3a4 <__assert_fail@plt+0xb320>
   1d6c8:	mov	r5, #118	; 0x76
   1d6cc:	b	1d6b4 <__assert_fail@plt+0xb630>
   1d6d0:	mov	r7, #0
   1d6d4:	mov	r6, #0
   1d6d8:	b	1d314 <__assert_fail@plt+0xb290>
   1d6dc:	ldr	r3, [sp, #32]
   1d6e0:	cmp	r3, #0
   1d6e4:	bne	1e4ac <__assert_fail@plt+0xc428>
   1d6e8:	mov	r7, r3
   1d6ec:	ldr	r3, [sp, #44]	; 0x2c
   1d6f0:	sub	r2, fp, #2
   1d6f4:	eor	r3, r3, #1
   1d6f8:	clz	r2, r2
   1d6fc:	lsr	r2, r2, #5
   1d700:	ands	r3, r2, r3
   1d704:	beq	1e14c <__assert_fail@plt+0xc0c8>
   1d708:	cmp	sl, r4
   1d70c:	movhi	r1, #39	; 0x27
   1d710:	strbhi	r1, [r8, r4]
   1d714:	add	r1, r4, #1
   1d718:	cmp	sl, r1
   1d71c:	movhi	r0, #36	; 0x24
   1d720:	strbhi	r0, [r8, r1]
   1d724:	add	r1, r4, #2
   1d728:	cmp	sl, r1
   1d72c:	movhi	r0, #39	; 0x27
   1d730:	strbhi	r0, [r8, r1]
   1d734:	add	r1, r4, #3
   1d738:	cmp	sl, r1
   1d73c:	bls	1e1ac <__assert_fail@plt+0xc128>
   1d740:	mov	r4, r1
   1d744:	mov	r1, #92	; 0x5c
   1d748:	strb	r1, [r8, r4]
   1d74c:	mov	r1, r4
   1d750:	str	r3, [sp, #44]	; 0x2c
   1d754:	cmp	fp, #2
   1d758:	add	r4, r4, #1
   1d75c:	beq	1e1f4 <__assert_fail@plt+0xc170>
   1d760:	ldr	r0, [sp, #24]
   1d764:	add	r3, r9, #1
   1d768:	cmp	r3, r0
   1d76c:	bcs	1d784 <__assert_fail@plt+0xb700>
   1d770:	ldr	r0, [sp, #36]	; 0x24
   1d774:	ldrb	r3, [r0, r3]
   1d778:	sub	r3, r3, #48	; 0x30
   1d77c:	cmp	r3, #9
   1d780:	bls	1e204 <__assert_fail@plt+0xc180>
   1d784:	mov	r5, #48	; 0x30
   1d788:	ldr	r3, [sp, #28]
   1d78c:	eor	r3, r3, #1
   1d790:	orrs	r2, r2, r3
   1d794:	mov	r3, r6
   1d798:	moveq	r6, r2
   1d79c:	beq	1d318 <__assert_fail@plt+0xb294>
   1d7a0:	mov	r6, #0
   1d7a4:	b	1d340 <__assert_fail@plt+0xb2bc>
   1d7a8:	mov	r2, #0
   1d7ac:	mov	r6, r2
   1d7b0:	mov	r5, #98	; 0x62
   1d7b4:	b	1d360 <__assert_fail@plt+0xb2dc>
   1d7b8:	mov	r5, #97	; 0x61
   1d7bc:	b	1d6c0 <__assert_fail@plt+0xb63c>
   1d7c0:	mov	r3, r7
   1d7c4:	mov	r6, r7
   1d7c8:	mov	r2, #0
   1d7cc:	mov	r7, r3
   1d7d0:	mov	r5, #32
   1d7d4:	b	1d2f8 <__assert_fail@plt+0xb274>
   1d7d8:	cmp	r9, #0
   1d7dc:	mov	r3, r7
   1d7e0:	bne	1dda8 <__assert_fail@plt+0xbd24>
   1d7e4:	mov	r6, r7
   1d7e8:	mov	r2, r9
   1d7ec:	mov	r7, r3
   1d7f0:	b	1d2f8 <__assert_fail@plt+0xb274>
   1d7f4:	mov	r6, r7
   1d7f8:	b	1d314 <__assert_fail@plt+0xb290>
   1d7fc:	mov	r7, #0
   1d800:	ldr	r3, [sp, #64]	; 0x40
   1d804:	cmp	r3, #1
   1d808:	bne	1de64 <__assert_fail@plt+0xbde0>
   1d80c:	bl	11e50 <__ctype_b_loc@plt>
   1d810:	ldr	r2, [sp, #64]	; 0x40
   1d814:	sxth	r3, r5
   1d818:	mov	ip, r2
   1d81c:	lsl	r3, r3, #1
   1d820:	ldr	r2, [r0]
   1d824:	ldrh	r3, [r2, r3]
   1d828:	and	r3, r3, #16384	; 0x4000
   1d82c:	cmp	r3, #0
   1d830:	ldr	r3, [sp, #28]
   1d834:	movne	r6, #1
   1d838:	moveq	r6, #0
   1d83c:	movne	r2, #0
   1d840:	andeq	r2, r3, #1
   1d844:	cmp	r2, #0
   1d848:	bne	1e174 <__assert_fail@plt+0xc0f0>
   1d84c:	sub	r2, fp, #2
   1d850:	clz	r2, r2
   1d854:	lsr	r2, r2, #5
   1d858:	b	1d2f8 <__assert_fail@plt+0xb274>
   1d85c:	cmp	r4, #0
   1d860:	bne	1e520 <__assert_fail@plt+0xc49c>
   1d864:	str	r4, [sp, #28]
   1d868:	cmp	sl, #0
   1d86c:	bne	1e564 <__assert_fail@plt+0xc4e0>
   1d870:	ldr	r3, [pc, #772]	; 1db7c <__assert_fail@plt+0xbaf8>
   1d874:	mov	r4, #1
   1d878:	str	r4, [sp, #40]	; 0x28
   1d87c:	str	r3, [sp, #60]	; 0x3c
   1d880:	str	r4, [sp, #52]	; 0x34
   1d884:	str	sl, [sp, #72]	; 0x48
   1d888:	str	sl, [sp, #68]	; 0x44
   1d88c:	str	sl, [sp, #44]	; 0x2c
   1d890:	str	sl, [sp, #32]
   1d894:	mov	r8, #2
   1d898:	b	1ce60 <__assert_fail@plt+0xaddc>
   1d89c:	ldr	r3, [sp, #36]	; 0x24
   1d8a0:	ldrb	r5, [r3, r9]
   1d8a4:	cmp	r5, #126	; 0x7e
   1d8a8:	ldrls	pc, [pc, r5, lsl #2]
   1d8ac:	b	1d800 <__assert_fail@plt+0xb77c>
   1d8b0:	andeq	sp, r1, r4, ror #21
   1d8b4:	andeq	sp, r1, r0, lsl #16
   1d8b8:	andeq	sp, r1, r0, lsl #16
   1d8bc:	andeq	sp, r1, r0, lsl #16
   1d8c0:	andeq	sp, r1, r0, lsl #16
   1d8c4:	andeq	sp, r1, r0, lsl #16
   1d8c8:	andeq	sp, r1, r0, lsl #16
   1d8cc:	ldrdeq	sp, [r1], -r0
   1d8d0:			; <UNDEFINED> instruction: 0x0001dabc
   1d8d4:			; <UNDEFINED> instruction: 0x0001dab4
   1d8d8:	andeq	sp, r1, ip, lsr #21
   1d8dc:	andeq	sp, r1, ip, asr fp
   1d8e0:	andeq	sp, r1, r8, asr #22
   1d8e4:	andeq	sp, r1, r0, ror #11
   1d8e8:	andeq	sp, r1, r0, lsl #16
   1d8ec:	andeq	sp, r1, r0, lsl #16
   1d8f0:	andeq	sp, r1, r0, lsl #16
   1d8f4:	andeq	sp, r1, r0, lsl #16
   1d8f8:	andeq	sp, r1, r0, lsl #16
   1d8fc:	andeq	sp, r1, r0, lsl #16
   1d900:	andeq	sp, r1, r0, lsl #16
   1d904:	andeq	sp, r1, r0, lsl #16
   1d908:	andeq	sp, r1, r0, lsl #16
   1d90c:	andeq	sp, r1, r0, lsl #16
   1d910:	andeq	sp, r1, r0, lsl #16
   1d914:	andeq	sp, r1, r0, lsl #16
   1d918:	andeq	sp, r1, r0, lsl #16
   1d91c:	andeq	sp, r1, r0, lsl #16
   1d920:	andeq	sp, r1, r0, lsl #16
   1d924:	andeq	sp, r1, r0, lsl #16
   1d928:	andeq	sp, r1, r0, lsl #16
   1d92c:	andeq	sp, r1, r0, lsl #16
   1d930:	andeq	sp, r1, r8, lsr fp
   1d934:	andeq	sp, r1, r4, lsr #22
   1d938:	andeq	sp, r1, r4, lsr #22
   1d93c:	andeq	sp, r1, r4, lsl fp
   1d940:	andeq	sp, r1, r4, lsr #22
   1d944:	andeq	sp, r1, ip, asr #16
   1d948:	andeq	sp, r1, r4, lsr #22
   1d94c:	andeq	sp, r1, r4, lsl r5
   1d950:	andeq	sp, r1, r4, lsr #22
   1d954:	andeq	sp, r1, r4, lsr #22
   1d958:	andeq	sp, r1, r4, lsr #22
   1d95c:	andeq	sp, r1, ip, asr #16
   1d960:	andeq	sp, r1, ip, asr #16
   1d964:	andeq	sp, r1, ip, asr #16
   1d968:	andeq	sp, r1, ip, asr #16
   1d96c:	andeq	sp, r1, ip, asr #16
   1d970:	andeq	sp, r1, ip, asr #16
   1d974:	andeq	sp, r1, ip, asr #16
   1d978:	andeq	sp, r1, ip, asr #16
   1d97c:	andeq	sp, r1, ip, asr #16
   1d980:	andeq	sp, r1, ip, asr #16
   1d984:	andeq	sp, r1, ip, asr #16
   1d988:	andeq	sp, r1, ip, asr #16
   1d98c:	andeq	sp, r1, ip, asr #16
   1d990:	andeq	sp, r1, ip, asr #16
   1d994:	andeq	sp, r1, ip, asr #16
   1d998:	andeq	sp, r1, ip, asr #16
   1d99c:	andeq	sp, r1, r4, lsr #22
   1d9a0:	andeq	sp, r1, r4, lsr #22
   1d9a4:	andeq	sp, r1, r4, lsr #22
   1d9a8:	andeq	sp, r1, r4, lsr #22
   1d9ac:	andeq	sp, r1, r8, ror #9
   1d9b0:	andeq	sp, r1, r0, lsl #16
   1d9b4:	andeq	sp, r1, ip, asr #16
   1d9b8:	andeq	sp, r1, ip, asr #16
   1d9bc:	andeq	sp, r1, ip, asr #16
   1d9c0:	andeq	sp, r1, ip, asr #16
   1d9c4:	andeq	sp, r1, ip, asr #16
   1d9c8:	andeq	sp, r1, ip, asr #16
   1d9cc:	andeq	sp, r1, ip, asr #16
   1d9d0:	andeq	sp, r1, ip, asr #16
   1d9d4:	andeq	sp, r1, ip, asr #16
   1d9d8:	andeq	sp, r1, ip, asr #16
   1d9dc:	andeq	sp, r1, ip, asr #16
   1d9e0:	andeq	sp, r1, ip, asr #16
   1d9e4:	andeq	sp, r1, ip, asr #16
   1d9e8:	andeq	sp, r1, ip, asr #16
   1d9ec:	andeq	sp, r1, ip, asr #16
   1d9f0:	andeq	sp, r1, ip, asr #16
   1d9f4:	andeq	sp, r1, ip, asr #16
   1d9f8:	andeq	sp, r1, ip, asr #16
   1d9fc:	andeq	sp, r1, ip, asr #16
   1da00:	andeq	sp, r1, ip, asr #16
   1da04:	andeq	sp, r1, ip, asr #16
   1da08:	andeq	sp, r1, ip, asr #16
   1da0c:	andeq	sp, r1, ip, asr #16
   1da10:	andeq	sp, r1, ip, asr #16
   1da14:	andeq	sp, r1, ip, asr #16
   1da18:	andeq	sp, r1, ip, asr #16
   1da1c:	andeq	sp, r1, r4, lsr #22
   1da20:	andeq	sp, r1, r0, lsr #9
   1da24:	andeq	sp, r1, ip, asr #16
   1da28:	andeq	sp, r1, r4, lsr #22
   1da2c:	andeq	sp, r1, ip, asr #16
   1da30:	andeq	sp, r1, r4, lsr #22
   1da34:	andeq	sp, r1, ip, asr #16
   1da38:	andeq	sp, r1, ip, asr #16
   1da3c:	andeq	sp, r1, ip, asr #16
   1da40:	andeq	sp, r1, ip, asr #16
   1da44:	andeq	sp, r1, ip, asr #16
   1da48:	andeq	sp, r1, ip, asr #16
   1da4c:	andeq	sp, r1, ip, asr #16
   1da50:	andeq	sp, r1, ip, asr #16
   1da54:	andeq	sp, r1, ip, asr #16
   1da58:	andeq	sp, r1, ip, asr #16
   1da5c:	andeq	sp, r1, ip, asr #16
   1da60:	andeq	sp, r1, ip, asr #16
   1da64:	andeq	sp, r1, ip, asr #16
   1da68:	andeq	sp, r1, ip, asr #16
   1da6c:	andeq	sp, r1, ip, asr #16
   1da70:	andeq	sp, r1, ip, asr #16
   1da74:	andeq	sp, r1, ip, asr #16
   1da78:	andeq	sp, r1, ip, asr #16
   1da7c:	andeq	sp, r1, ip, asr #16
   1da80:	andeq	sp, r1, ip, asr #16
   1da84:	andeq	sp, r1, ip, asr #16
   1da88:	andeq	sp, r1, ip, asr #16
   1da8c:	andeq	sp, r1, ip, asr #16
   1da90:	andeq	sp, r1, ip, asr #16
   1da94:	andeq	sp, r1, ip, asr #16
   1da98:	andeq	sp, r1, ip, asr #16
   1da9c:			; <UNDEFINED> instruction: 0x0001d2b8
   1daa0:	andeq	sp, r1, r4, lsr #22
   1daa4:			; <UNDEFINED> instruction: 0x0001d2b8
   1daa8:	andeq	sp, r1, r4, lsl fp
   1daac:	mov	r3, #110	; 0x6e
   1dab0:	b	1d5e4 <__assert_fail@plt+0xb560>
   1dab4:	mov	r3, #116	; 0x74
   1dab8:	b	1d5e4 <__assert_fail@plt+0xb560>
   1dabc:	sub	r2, fp, #2
   1dac0:	mov	r3, #98	; 0x62
   1dac4:	clz	r2, r2
   1dac8:	lsr	r2, r2, #5
   1dacc:	b	1d4d0 <__assert_fail@plt+0xb44c>
   1dad0:	sub	r2, fp, #2
   1dad4:	mov	r3, #97	; 0x61
   1dad8:	clz	r2, r2
   1dadc:	lsr	r2, r2, #5
   1dae0:	b	1d4d0 <__assert_fail@plt+0xb44c>
   1dae4:	ldr	r3, [sp, #28]
   1dae8:	cmp	r3, #0
   1daec:	bne	1d6dc <__assert_fail@plt+0xb658>
   1daf0:	ldr	r3, [sp, #164]	; 0xa4
   1daf4:	tst	r3, #1
   1daf8:	bne	1e16c <__assert_fail@plt+0xc0e8>
   1dafc:	ldr	r6, [sp, #28]
   1db00:	sub	r2, fp, #2
   1db04:	mov	r7, r6
   1db08:	clz	r2, r2
   1db0c:	lsr	r2, r2, #5
   1db10:	b	1d2f8 <__assert_fail@plt+0xb274>
   1db14:	sub	r2, fp, #2
   1db18:	clz	r2, r2
   1db1c:	lsr	r2, r2, #5
   1db20:	b	1d2e4 <__assert_fail@plt+0xb260>
   1db24:	sub	r2, fp, #2
   1db28:	mov	r6, #0
   1db2c:	clz	r2, r2
   1db30:	lsr	r2, r2, #5
   1db34:	b	1d2ec <__assert_fail@plt+0xb268>
   1db38:	sub	r2, fp, #2
   1db3c:	clz	r2, r2
   1db40:	lsr	r2, r2, #5
   1db44:	b	1d2ec <__assert_fail@plt+0xb268>
   1db48:	sub	r2, fp, #2
   1db4c:	mov	r3, #102	; 0x66
   1db50:	clz	r2, r2
   1db54:	lsr	r2, r2, #5
   1db58:	b	1d4d0 <__assert_fail@plt+0xb44c>
   1db5c:	sub	r2, fp, #2
   1db60:	mov	r3, #118	; 0x76
   1db64:	clz	r2, r2
   1db68:	lsr	r2, r2, #5
   1db6c:	b	1d4d0 <__assert_fail@plt+0xb44c>
   1db70:	andeq	r5, r3, r0, lsl #30
   1db74:	andeq	r4, r2, r8, lsr #26
   1db78:	andeq	r4, r2, r0, lsl sp
   1db7c:	andeq	r4, r2, r4, lsr #26
   1db80:	ldr	r3, [sp, #48]	; 0x30
   1db84:	ldrb	r5, [r3]
   1db88:	cmp	r5, #126	; 0x7e
   1db8c:	ldrls	pc, [pc, r5, lsl #2]
   1db90:	b	1d7fc <__assert_fail@plt+0xb778>
   1db94:	ldrdeq	sp, [r1], -ip
   1db98:	strdeq	sp, [r1], -ip
   1db9c:	strdeq	sp, [r1], -ip
   1dba0:	strdeq	sp, [r1], -ip
   1dba4:	strdeq	sp, [r1], -ip
   1dba8:	strdeq	sp, [r1], -ip
   1dbac:	strdeq	sp, [r1], -ip
   1dbb0:	ldrdeq	sp, [r1], -r4
   1dbb4:	andeq	sp, r1, ip, asr #27
   1dbb8:	andeq	sp, r1, r8, lsr #13
   1dbbc:	andeq	sp, r1, r0, ror r6
   1dbc0:	andeq	sp, r1, r8, asr #13
   1dbc4:			; <UNDEFINED> instruction: 0x0001d6b0
   1dbc8:	andeq	sp, r1, r0, asr #27
   1dbcc:	strdeq	sp, [r1], -ip
   1dbd0:	strdeq	sp, [r1], -ip
   1dbd4:	strdeq	sp, [r1], -ip
   1dbd8:	strdeq	sp, [r1], -ip
   1dbdc:	strdeq	sp, [r1], -ip
   1dbe0:	strdeq	sp, [r1], -ip
   1dbe4:	strdeq	sp, [r1], -ip
   1dbe8:	strdeq	sp, [r1], -ip
   1dbec:	strdeq	sp, [r1], -ip
   1dbf0:	strdeq	sp, [r1], -ip
   1dbf4:	strdeq	sp, [r1], -ip
   1dbf8:	strdeq	sp, [r1], -ip
   1dbfc:	strdeq	sp, [r1], -ip
   1dc00:	strdeq	sp, [r1], -ip
   1dc04:	strdeq	sp, [r1], -ip
   1dc08:	strdeq	sp, [r1], -ip
   1dc0c:	strdeq	sp, [r1], -ip
   1dc10:	strdeq	sp, [r1], -ip
   1dc14:			; <UNDEFINED> instruction: 0x0001ddb8
   1dc18:	ldrdeq	sp, [r1], -r0
   1dc1c:	ldrdeq	sp, [r1], -r0
   1dc20:	muleq	r1, ip, sp
   1dc24:	ldrdeq	sp, [r1], -r0
   1dc28:	muleq	r1, r0, sp
   1dc2c:	ldrdeq	sp, [r1], -r0
   1dc30:	andeq	sp, r1, r0, lsl r5
   1dc34:	ldrdeq	sp, [r1], -r0
   1dc38:	ldrdeq	sp, [r1], -r0
   1dc3c:	ldrdeq	sp, [r1], -r0
   1dc40:	muleq	r1, r0, sp
   1dc44:	muleq	r1, r0, sp
   1dc48:	muleq	r1, r0, sp
   1dc4c:	muleq	r1, r0, sp
   1dc50:	muleq	r1, r0, sp
   1dc54:	muleq	r1, r0, sp
   1dc58:	muleq	r1, r0, sp
   1dc5c:	muleq	r1, r0, sp
   1dc60:	muleq	r1, r0, sp
   1dc64:	muleq	r1, r0, sp
   1dc68:	muleq	r1, r0, sp
   1dc6c:	muleq	r1, r0, sp
   1dc70:	muleq	r1, r0, sp
   1dc74:	muleq	r1, r0, sp
   1dc78:	muleq	r1, r0, sp
   1dc7c:	muleq	r1, r0, sp
   1dc80:	ldrdeq	sp, [r1], -r0
   1dc84:	ldrdeq	sp, [r1], -r0
   1dc88:	ldrdeq	sp, [r1], -r0
   1dc8c:	ldrdeq	sp, [r1], -r0
   1dc90:	andeq	sp, r1, r4, ror #9
   1dc94:	strdeq	sp, [r1], -ip
   1dc98:	muleq	r1, r0, sp
   1dc9c:	muleq	r1, r0, sp
   1dca0:	muleq	r1, r0, sp
   1dca4:	muleq	r1, r0, sp
   1dca8:	muleq	r1, r0, sp
   1dcac:	muleq	r1, r0, sp
   1dcb0:	muleq	r1, r0, sp
   1dcb4:	muleq	r1, r0, sp
   1dcb8:	muleq	r1, r0, sp
   1dcbc:	muleq	r1, r0, sp
   1dcc0:	muleq	r1, r0, sp
   1dcc4:	muleq	r1, r0, sp
   1dcc8:	muleq	r1, r0, sp
   1dccc:	muleq	r1, r0, sp
   1dcd0:	muleq	r1, r0, sp
   1dcd4:	muleq	r1, r0, sp
   1dcd8:	muleq	r1, r0, sp
   1dcdc:	muleq	r1, r0, sp
   1dce0:	muleq	r1, r0, sp
   1dce4:	muleq	r1, r0, sp
   1dce8:	muleq	r1, r0, sp
   1dcec:	muleq	r1, r0, sp
   1dcf0:	muleq	r1, r0, sp
   1dcf4:	muleq	r1, r0, sp
   1dcf8:	muleq	r1, r0, sp
   1dcfc:	muleq	r1, r0, sp
   1dd00:	ldrdeq	sp, [r1], -r0
   1dd04:	muleq	r1, ip, r4
   1dd08:	muleq	r1, r0, sp
   1dd0c:	ldrdeq	sp, [r1], -r0
   1dd10:	muleq	r1, r0, sp
   1dd14:	ldrdeq	sp, [r1], -r0
   1dd18:	muleq	r1, r0, sp
   1dd1c:	muleq	r1, r0, sp
   1dd20:	muleq	r1, r0, sp
   1dd24:	muleq	r1, r0, sp
   1dd28:	muleq	r1, r0, sp
   1dd2c:	muleq	r1, r0, sp
   1dd30:	muleq	r1, r0, sp
   1dd34:	muleq	r1, r0, sp
   1dd38:	muleq	r1, r0, sp
   1dd3c:	muleq	r1, r0, sp
   1dd40:	muleq	r1, r0, sp
   1dd44:	muleq	r1, r0, sp
   1dd48:	muleq	r1, r0, sp
   1dd4c:	muleq	r1, r0, sp
   1dd50:	muleq	r1, r0, sp
   1dd54:	muleq	r1, r0, sp
   1dd58:	muleq	r1, r0, sp
   1dd5c:	muleq	r1, r0, sp
   1dd60:	muleq	r1, r0, sp
   1dd64:	muleq	r1, r0, sp
   1dd68:	muleq	r1, r0, sp
   1dd6c:	muleq	r1, r0, sp
   1dd70:	muleq	r1, r0, sp
   1dd74:	muleq	r1, r0, sp
   1dd78:	muleq	r1, r0, sp
   1dd7c:	muleq	r1, r0, sp
   1dd80:			; <UNDEFINED> instruction: 0x0001d2b4
   1dd84:	ldrdeq	sp, [r1], -r0
   1dd88:			; <UNDEFINED> instruction: 0x0001d2b4
   1dd8c:	muleq	r1, ip, sp
   1dd90:	mov	r6, r7
   1dd94:	mov	r7, #0
   1dd98:	b	1d314 <__assert_fail@plt+0xb290>
   1dd9c:	cmp	r9, #0
   1dda0:	mov	r3, #0
   1dda4:	beq	1d7e4 <__assert_fail@plt+0xb760>
   1dda8:	mov	r6, #0
   1ddac:	mov	r7, r3
   1ddb0:	mov	r3, r6
   1ddb4:	b	1d318 <__assert_fail@plt+0xb294>
   1ddb8:	mov	r3, #0
   1ddbc:	b	1d7c4 <__assert_fail@plt+0xb740>
   1ddc0:	mov	r7, #0
   1ddc4:	mov	r3, #114	; 0x72
   1ddc8:	b	1d5e4 <__assert_fail@plt+0xb560>
   1ddcc:	mov	r5, #98	; 0x62
   1ddd0:	b	1d674 <__assert_fail@plt+0xb5f0>
   1ddd4:	mov	r5, #97	; 0x61
   1ddd8:	b	1d6b4 <__assert_fail@plt+0xb630>
   1dddc:	ldr	r3, [sp, #32]
   1dde0:	cmp	r3, #0
   1dde4:	bne	1e22c <__assert_fail@plt+0xc1a8>
   1dde8:	add	r9, r9, #1
   1ddec:	ldr	r3, [sp, #44]	; 0x2c
   1ddf0:	mov	r6, #0
   1ddf4:	mov	r5, #92	; 0x5c
   1ddf8:	b	1d5ac <__assert_fail@plt+0xb528>
   1ddfc:	ldr	r3, [sp, #36]	; 0x24
   1de00:	ldrb	r3, [r3, #1]
   1de04:	adds	r3, r3, #0
   1de08:	movne	r3, #1
   1de0c:	b	1d2d0 <__assert_fail@plt+0xb24c>
   1de10:	ldr	r3, [sp, #164]	; 0xa4
   1de14:	ands	r3, r3, #4
   1de18:	beq	1de3c <__assert_fail@plt+0xbdb8>
   1de1c:	ldr	r2, [sp, #24]
   1de20:	add	r3, r9, #2
   1de24:	cmp	r3, r2
   1de28:	bcs	1de3c <__assert_fail@plt+0xbdb8>
   1de2c:	ldr	r2, [sp, #48]	; 0x30
   1de30:	ldrb	r5, [r2, #1]
   1de34:	cmp	r5, #63	; 0x3f
   1de38:	beq	1e2a0 <__assert_fail@plt+0xc21c>
   1de3c:	mov	r2, #0
   1de40:	mov	r6, r2
   1de44:	mov	r5, #63	; 0x3f
   1de48:	b	1d2f8 <__assert_fail@plt+0xb274>
   1de4c:	ldr	r3, [sp, #32]
   1de50:	cmp	r3, #0
   1de54:	bne	1e22c <__assert_fail@plt+0xc1a8>
   1de58:	mov	r6, r3
   1de5c:	mov	r5, #63	; 0x3f
   1de60:	b	1d340 <__assert_fail@plt+0xb2bc>
   1de64:	ldr	r3, [sp, #24]
   1de68:	cmn	r3, #1
   1de6c:	mov	r3, #0
   1de70:	str	r3, [sp, #108]	; 0x6c
   1de74:	str	r3, [sp, #112]	; 0x70
   1de78:	bne	1de88 <__assert_fail@plt+0xbe04>
   1de7c:	ldr	r0, [sp, #36]	; 0x24
   1de80:	bl	11e80 <strlen@plt>
   1de84:	str	r0, [sp, #24]
   1de88:	mov	r3, #0
   1de8c:	str	sl, [sp, #88]	; 0x58
   1de90:	ldr	sl, [sp, #36]	; 0x24
   1de94:	str	r5, [sp, #92]	; 0x5c
   1de98:	mov	r5, r3
   1de9c:	str	r7, [sp, #96]	; 0x60
   1dea0:	str	r4, [sp, #100]	; 0x64
   1dea4:	str	r8, [sp, #84]	; 0x54
   1dea8:	ldr	r3, [sp, #24]
   1deac:	add	r4, r9, r5
   1deb0:	add	r7, sl, r4
   1deb4:	sub	r2, r3, r4
   1deb8:	mov	r1, r7
   1debc:	add	r3, sp, #108	; 0x6c
   1dec0:	add	r0, sp, #104	; 0x68
   1dec4:	bl	21c84 <__assert_fail@plt+0xfc00>
   1dec8:	subs	r8, r0, #0
   1decc:	beq	1df1c <__assert_fail@plt+0xbe98>
   1ded0:	cmn	r8, #1
   1ded4:	beq	1e27c <__assert_fail@plt+0xc1f8>
   1ded8:	cmn	r8, #2
   1dedc:	beq	1e39c <__assert_fail@plt+0xc318>
   1dee0:	ldr	r3, [sp, #32]
   1dee4:	cmp	fp, #2
   1dee8:	movne	r3, #0
   1deec:	andeq	r3, r3, #1
   1def0:	cmp	r3, #0
   1def4:	bne	1e07c <__assert_fail@plt+0xbff8>
   1def8:	ldr	r0, [sp, #104]	; 0x68
   1defc:	bl	11d00 <iswprint@plt>
   1df00:	add	r5, r5, r8
   1df04:	cmp	r0, #0
   1df08:	add	r0, sp, #108	; 0x6c
   1df0c:	moveq	r6, #0
   1df10:	bl	11c1c <mbsinit@plt>
   1df14:	cmp	r0, #0
   1df18:	beq	1dea8 <__assert_fail@plt+0xbe24>
   1df1c:	ldr	r3, [sp, #28]
   1df20:	mov	ip, r5
   1df24:	eor	r2, r6, #1
   1df28:	ldr	r5, [sp, #92]	; 0x5c
   1df2c:	ldr	r7, [sp, #96]	; 0x60
   1df30:	ldr	r4, [sp, #100]	; 0x64
   1df34:	ldr	r8, [sp, #84]	; 0x54
   1df38:	ldr	sl, [sp, #88]	; 0x58
   1df3c:	and	r2, r2, r3
   1df40:	cmp	ip, #1
   1df44:	bls	1d844 <__assert_fail@plt+0xb7c0>
   1df48:	add	r1, ip, r9
   1df4c:	ldr	lr, [sp, #48]	; 0x30
   1df50:	mov	r0, #0
   1df54:	str	r6, [sp, #48]	; 0x30
   1df58:	mov	ip, #39	; 0x27
   1df5c:	ldr	r6, [sp, #44]	; 0x2c
   1df60:	b	1e018 <__assert_fail@plt+0xbf94>
   1df64:	ldr	r0, [sp, #32]
   1df68:	sub	r3, fp, #2
   1df6c:	cmp	r0, #0
   1df70:	clz	r3, r3
   1df74:	lsr	r3, r3, #5
   1df78:	bne	1e180 <__assert_fail@plt+0xc0fc>
   1df7c:	eor	r0, r6, #1
   1df80:	ands	r3, r3, r0
   1df84:	beq	1dfb4 <__assert_fail@plt+0xbf30>
   1df88:	add	r0, r4, #1
   1df8c:	cmp	sl, r4
   1df90:	strbhi	ip, [r8, r4]
   1df94:	cmp	sl, r0
   1df98:	movhi	r6, #36	; 0x24
   1df9c:	strbhi	r6, [r8, r0]
   1dfa0:	add	r0, r4, #2
   1dfa4:	mov	r6, r3
   1dfa8:	add	r4, r4, #3
   1dfac:	cmp	sl, r0
   1dfb0:	strbhi	ip, [r8, r0]
   1dfb4:	cmp	sl, r4
   1dfb8:	movhi	r3, #92	; 0x5c
   1dfbc:	strbhi	r3, [r8, r4]
   1dfc0:	add	r3, r4, #1
   1dfc4:	cmp	sl, r3
   1dfc8:	lsrhi	r0, r5, #6
   1dfcc:	addhi	r0, r0, #48	; 0x30
   1dfd0:	strbhi	r0, [r8, r3]
   1dfd4:	add	r0, r4, #2
   1dfd8:	cmp	sl, r0
   1dfdc:	lsrhi	r3, r5, #3
   1dfe0:	andhi	r3, r3, #7
   1dfe4:	addhi	r3, r3, #48	; 0x30
   1dfe8:	add	r9, r9, #1
   1dfec:	strbhi	r3, [r8, r0]
   1dff0:	and	r5, r5, #7
   1dff4:	cmp	r9, r1
   1dff8:	add	r5, r5, #48	; 0x30
   1dffc:	add	r4, r4, #3
   1e000:	bcs	1e1a0 <__assert_fail@plt+0xc11c>
   1e004:	mov	r0, r2
   1e008:	cmp	sl, r4
   1e00c:	strbhi	r5, [r8, r4]
   1e010:	ldrb	r5, [lr, #1]!
   1e014:	add	r4, r4, #1
   1e018:	cmp	r2, #0
   1e01c:	bne	1df64 <__assert_fail@plt+0xbee0>
   1e020:	eor	r3, r0, #1
   1e024:	and	r3, r3, r6
   1e028:	cmp	r7, #0
   1e02c:	uxtb	r3, r3
   1e030:	beq	1e044 <__assert_fail@plt+0xbfc0>
   1e034:	cmp	sl, r4
   1e038:	movhi	r7, #92	; 0x5c
   1e03c:	strbhi	r7, [r8, r4]
   1e040:	add	r4, r4, #1
   1e044:	add	r9, r9, #1
   1e048:	cmp	r9, r1
   1e04c:	bcs	1e194 <__assert_fail@plt+0xc110>
   1e050:	cmp	r3, #0
   1e054:	beq	1e1c0 <__assert_fail@plt+0xc13c>
   1e058:	cmp	sl, r4
   1e05c:	add	r3, r4, #1
   1e060:	strbhi	ip, [r8, r4]
   1e064:	mov	r7, #0
   1e068:	cmp	sl, r3
   1e06c:	strbhi	ip, [r8, r3]
   1e070:	add	r4, r4, #2
   1e074:	mov	r6, r7
   1e078:	b	1e008 <__assert_fail@plt+0xbf84>
   1e07c:	cmp	r8, #1
   1e080:	beq	1def8 <__assert_fail@plt+0xbe74>
   1e084:	add	r1, r4, #1
   1e088:	add	r3, sl, r8
   1e08c:	add	r1, sl, r1
   1e090:	add	r4, r3, r4
   1e094:	ldrb	r3, [r1], #1
   1e098:	sub	r3, r3, #91	; 0x5b
   1e09c:	cmp	r3, #33	; 0x21
   1e0a0:	ldrls	pc, [pc, r3, lsl #2]
   1e0a4:	b	1e130 <__assert_fail@plt+0xc0ac>
   1e0a8:	andeq	lr, r1, ip, lsr r1
   1e0ac:	andeq	lr, r1, ip, lsr r1
   1e0b0:	andeq	lr, r1, r0, lsr r1
   1e0b4:	andeq	lr, r1, ip, lsr r1
   1e0b8:	andeq	lr, r1, r0, lsr r1
   1e0bc:	andeq	lr, r1, ip, lsr r1
   1e0c0:	andeq	lr, r1, r0, lsr r1
   1e0c4:	andeq	lr, r1, r0, lsr r1
   1e0c8:	andeq	lr, r1, r0, lsr r1
   1e0cc:	andeq	lr, r1, r0, lsr r1
   1e0d0:	andeq	lr, r1, r0, lsr r1
   1e0d4:	andeq	lr, r1, r0, lsr r1
   1e0d8:	andeq	lr, r1, r0, lsr r1
   1e0dc:	andeq	lr, r1, r0, lsr r1
   1e0e0:	andeq	lr, r1, r0, lsr r1
   1e0e4:	andeq	lr, r1, r0, lsr r1
   1e0e8:	andeq	lr, r1, r0, lsr r1
   1e0ec:	andeq	lr, r1, r0, lsr r1
   1e0f0:	andeq	lr, r1, r0, lsr r1
   1e0f4:	andeq	lr, r1, r0, lsr r1
   1e0f8:	andeq	lr, r1, r0, lsr r1
   1e0fc:	andeq	lr, r1, r0, lsr r1
   1e100:	andeq	lr, r1, r0, lsr r1
   1e104:	andeq	lr, r1, r0, lsr r1
   1e108:	andeq	lr, r1, r0, lsr r1
   1e10c:	andeq	lr, r1, r0, lsr r1
   1e110:	andeq	lr, r1, r0, lsr r1
   1e114:	andeq	lr, r1, r0, lsr r1
   1e118:	andeq	lr, r1, r0, lsr r1
   1e11c:	andeq	lr, r1, r0, lsr r1
   1e120:	andeq	lr, r1, r0, lsr r1
   1e124:	andeq	lr, r1, r0, lsr r1
   1e128:	andeq	lr, r1, r0, lsr r1
   1e12c:	andeq	lr, r1, ip, lsr r1
   1e130:	cmp	r4, r1
   1e134:	bne	1e094 <__assert_fail@plt+0xc010>
   1e138:	b	1def8 <__assert_fail@plt+0xbe74>
   1e13c:	ldr	fp, [sp, #84]	; 0x54
   1e140:	ldr	sl, [sp, #88]	; 0x58
   1e144:	mov	r8, #2
   1e148:	b	1d604 <__assert_fail@plt+0xb580>
   1e14c:	cmp	sl, r4
   1e150:	movls	r1, r4
   1e154:	bls	1d754 <__assert_fail@plt+0xb6d0>
   1e158:	ldr	r3, [sp, #44]	; 0x2c
   1e15c:	b	1d744 <__assert_fail@plt+0xb6c0>
   1e160:	str	sl, [sp, #72]	; 0x48
   1e164:	ldr	sl, [sp, #32]
   1e168:	b	1d57c <__assert_fail@plt+0xb4f8>
   1e16c:	add	r9, r9, #1
   1e170:	b	1ce70 <__assert_fail@plt+0xadec>
   1e174:	ldr	r2, [sp, #28]
   1e178:	mov	r6, #0
   1e17c:	b	1df48 <__assert_fail@plt+0xbec4>
   1e180:	str	fp, [sp, #160]	; 0xa0
   1e184:	str	r3, [sp, #28]
   1e188:	mov	fp, r8
   1e18c:	ldr	r8, [sp, #160]	; 0xa0
   1e190:	b	1d604 <__assert_fail@plt+0xb580>
   1e194:	str	r6, [sp, #44]	; 0x2c
   1e198:	ldr	r6, [sp, #48]	; 0x30
   1e19c:	b	1d5ac <__assert_fail@plt+0xb528>
   1e1a0:	str	r6, [sp, #44]	; 0x2c
   1e1a4:	ldr	r6, [sp, #48]	; 0x30
   1e1a8:	b	1d3b8 <__assert_fail@plt+0xb334>
   1e1ac:	add	r4, r4, #4
   1e1b0:	str	r3, [sp, #44]	; 0x2c
   1e1b4:	mov	r6, #0
   1e1b8:	mov	r5, #48	; 0x30
   1e1bc:	b	1d340 <__assert_fail@plt+0xb2bc>
   1e1c0:	mov	r7, r3
   1e1c4:	b	1e008 <__assert_fail@plt+0xbf84>
   1e1c8:	ldr	r3, [pc, #-1624]	; 1db78 <__assert_fail@plt+0xbaf4>
   1e1cc:	mov	r4, #1
   1e1d0:	str	r4, [sp, #40]	; 0x28
   1e1d4:	str	r4, [sp, #28]
   1e1d8:	str	r4, [sp, #52]	; 0x34
   1e1dc:	str	sl, [sp, #72]	; 0x48
   1e1e0:	str	sl, [sp, #68]	; 0x44
   1e1e4:	str	sl, [sp, #44]	; 0x2c
   1e1e8:	str	sl, [sp, #32]
   1e1ec:	str	r3, [sp, #60]	; 0x3c
   1e1f0:	b	1ce60 <__assert_fail@plt+0xaddc>
   1e1f4:	mov	r3, r6
   1e1f8:	mov	r5, #48	; 0x30
   1e1fc:	mov	r6, #0
   1e200:	b	1d340 <__assert_fail@plt+0xb2bc>
   1e204:	cmp	sl, r4
   1e208:	movhi	r3, #48	; 0x30
   1e20c:	strbhi	r3, [r8, r4]
   1e210:	add	r3, r1, #2
   1e214:	cmp	sl, r3
   1e218:	movhi	r0, #48	; 0x30
   1e21c:	strbhi	r0, [r8, r3]
   1e220:	add	r4, r1, #3
   1e224:	mov	r5, #48	; 0x30
   1e228:	b	1d788 <__assert_fail@plt+0xb704>
   1e22c:	str	fp, [sp, #160]	; 0xa0
   1e230:	mov	fp, r8
   1e234:	ldr	r8, [sp, #160]	; 0xa0
   1e238:	b	1d604 <__assert_fail@plt+0xb580>
   1e23c:	ldr	r2, [sp, #80]	; 0x50
   1e240:	ldrb	r3, [r2]
   1e244:	cmp	r3, #0
   1e248:	beq	1ce30 <__assert_fail@plt+0xadac>
   1e24c:	cmp	sl, r4
   1e250:	strbhi	r3, [fp, r4]
   1e254:	ldrb	r3, [r2, #1]!
   1e258:	add	r4, r4, #1
   1e25c:	cmp	r3, #0
   1e260:	bne	1e24c <__assert_fail@plt+0xc1c8>
   1e264:	b	1ce30 <__assert_fail@plt+0xadac>
   1e268:	str	fp, [sp, #160]	; 0xa0
   1e26c:	mov	r3, #0
   1e270:	mov	fp, r8
   1e274:	ldr	r8, [sp, #160]	; 0xa0
   1e278:	b	1d698 <__assert_fail@plt+0xb614>
   1e27c:	mov	ip, r5
   1e280:	ldr	r7, [sp, #96]	; 0x60
   1e284:	ldr	r5, [sp, #92]	; 0x5c
   1e288:	ldr	r4, [sp, #100]	; 0x64
   1e28c:	ldr	r8, [sp, #84]	; 0x54
   1e290:	ldr	sl, [sp, #88]	; 0x58
   1e294:	ldr	r2, [sp, #28]
   1e298:	mov	r6, #0
   1e29c:	b	1df40 <__assert_fail@plt+0xbebc>
   1e2a0:	ldr	r2, [sp, #36]	; 0x24
   1e2a4:	ldrb	r1, [r2, r3]
   1e2a8:	sub	r2, r1, #33	; 0x21
   1e2ac:	cmp	r2, #29
   1e2b0:	ldrls	pc, [pc, r2, lsl #2]
   1e2b4:	b	1e390 <__assert_fail@plt+0xc30c>
   1e2b8:	andeq	lr, r1, r0, lsr r3
   1e2bc:	muleq	r1, r0, r3
   1e2c0:	muleq	r1, r0, r3
   1e2c4:	muleq	r1, r0, r3
   1e2c8:	muleq	r1, r0, r3
   1e2cc:	muleq	r1, r0, r3
   1e2d0:	andeq	lr, r1, r0, lsr r3
   1e2d4:	andeq	lr, r1, r0, lsr r3
   1e2d8:	andeq	lr, r1, r0, lsr r3
   1e2dc:	muleq	r1, r0, r3
   1e2e0:	muleq	r1, r0, r3
   1e2e4:	muleq	r1, r0, r3
   1e2e8:	andeq	lr, r1, r0, lsr r3
   1e2ec:	muleq	r1, r0, r3
   1e2f0:	andeq	lr, r1, r0, lsr r3
   1e2f4:	muleq	r1, r0, r3
   1e2f8:	muleq	r1, r0, r3
   1e2fc:	muleq	r1, r0, r3
   1e300:	muleq	r1, r0, r3
   1e304:	muleq	r1, r0, r3
   1e308:	muleq	r1, r0, r3
   1e30c:	muleq	r1, r0, r3
   1e310:	muleq	r1, r0, r3
   1e314:	muleq	r1, r0, r3
   1e318:	muleq	r1, r0, r3
   1e31c:	muleq	r1, r0, r3
   1e320:	muleq	r1, r0, r3
   1e324:	andeq	lr, r1, r0, lsr r3
   1e328:	andeq	lr, r1, r0, lsr r3
   1e32c:	andeq	lr, r1, r0, lsr r3
   1e330:	ldr	r2, [sp, #32]
   1e334:	cmp	r2, #0
   1e338:	bne	1e43c <__assert_fail@plt+0xc3b8>
   1e33c:	cmp	sl, r4
   1e340:	movhi	r2, #63	; 0x3f
   1e344:	strbhi	r2, [r8, r4]
   1e348:	add	r2, r4, #1
   1e34c:	cmp	sl, r2
   1e350:	movhi	r0, #34	; 0x22
   1e354:	strbhi	r0, [r8, r2]
   1e358:	add	r2, r4, #2
   1e35c:	cmp	sl, r2
   1e360:	movhi	r0, #34	; 0x22
   1e364:	strbhi	r0, [r8, r2]
   1e368:	add	r2, r4, #3
   1e36c:	cmp	sl, r2
   1e370:	movhi	r0, #63	; 0x3f
   1e374:	strbhi	r0, [r8, r2]
   1e378:	mov	r2, #0
   1e37c:	add	r4, r4, #4
   1e380:	mov	r5, r1
   1e384:	mov	r9, r3
   1e388:	mov	r6, r2
   1e38c:	b	1d788 <__assert_fail@plt+0xb704>
   1e390:	mov	r2, #0
   1e394:	mov	r6, r2
   1e398:	b	1d2f8 <__assert_fail@plt+0xb274>
   1e39c:	ldr	r0, [sp, #24]
   1e3a0:	mov	r1, r4
   1e3a4:	cmp	r1, r0
   1e3a8:	mov	r2, r7
   1e3ac:	mov	r3, r5
   1e3b0:	mov	ip, r5
   1e3b4:	ldr	r7, [sp, #96]	; 0x60
   1e3b8:	ldr	r5, [sp, #92]	; 0x5c
   1e3bc:	ldr	r4, [sp, #100]	; 0x64
   1e3c0:	ldr	r8, [sp, #84]	; 0x54
   1e3c4:	ldr	sl, [sp, #88]	; 0x58
   1e3c8:	bcs	1e3fc <__assert_fail@plt+0xc378>
   1e3cc:	ldrb	r6, [r2]
   1e3d0:	cmp	r6, #0
   1e3d4:	bne	1e3e8 <__assert_fail@plt+0xc364>
   1e3d8:	b	1e518 <__assert_fail@plt+0xc494>
   1e3dc:	ldrb	r6, [r2, #1]!
   1e3e0:	cmp	r6, #0
   1e3e4:	beq	1e4a0 <__assert_fail@plt+0xc41c>
   1e3e8:	add	r3, r3, #1
   1e3ec:	add	r1, r9, r3
   1e3f0:	cmp	r1, r0
   1e3f4:	bcc	1e3dc <__assert_fail@plt+0xc358>
   1e3f8:	mov	ip, r3
   1e3fc:	ldr	r2, [sp, #28]
   1e400:	mov	r6, #0
   1e404:	b	1df40 <__assert_fail@plt+0xbebc>
   1e408:	mov	r3, #1
   1e40c:	str	r3, [sp, #40]	; 0x28
   1e410:	str	r3, [sp, #32]
   1e414:	str	r3, [sp, #28]
   1e418:	str	r3, [sp, #52]	; 0x34
   1e41c:	ldr	r3, [pc, #-2220]	; 1db78 <__assert_fail@plt+0xbaf4>
   1e420:	mov	r2, #0
   1e424:	str	r2, [sp, #68]	; 0x44
   1e428:	str	r2, [sp, #44]	; 0x2c
   1e42c:	str	r2, [sp, #72]	; 0x48
   1e430:	mov	r4, r2
   1e434:	str	r3, [sp, #60]	; 0x3c
   1e438:	b	1ce60 <__assert_fail@plt+0xaddc>
   1e43c:	str	fp, [sp, #160]	; 0xa0
   1e440:	mov	fp, r8
   1e444:	ldr	r8, [sp, #160]	; 0xa0
   1e448:	b	1d610 <__assert_fail@plt+0xb58c>
   1e44c:	mov	r2, r3
   1e450:	ldr	r3, [sp, #60]	; 0x3c
   1e454:	cmp	r3, #0
   1e458:	moveq	r2, #0
   1e45c:	andne	r2, r2, #1
   1e460:	cmp	r2, #0
   1e464:	beq	1e490 <__assert_fail@plt+0xc40c>
   1e468:	mov	r2, r3
   1e46c:	ldrb	r3, [r3]
   1e470:	cmp	r3, #0
   1e474:	beq	1e490 <__assert_fail@plt+0xc40c>
   1e478:	cmp	sl, r4
   1e47c:	strbhi	r3, [fp, r4]
   1e480:	ldrb	r3, [r2, #1]!
   1e484:	add	r4, r4, #1
   1e488:	cmp	r3, #0
   1e48c:	bne	1e478 <__assert_fail@plt+0xc3f4>
   1e490:	cmp	sl, r4
   1e494:	movhi	r3, #0
   1e498:	strbhi	r3, [fp, r4]
   1e49c:	b	1d650 <__assert_fail@plt+0xb5cc>
   1e4a0:	mov	ip, r3
   1e4a4:	ldr	r2, [sp, #28]
   1e4a8:	b	1df40 <__assert_fail@plt+0xbebc>
   1e4ac:	str	fp, [sp, #160]	; 0xa0
   1e4b0:	mov	fp, r8
   1e4b4:	ldr	r8, [sp, #160]	; 0xa0
   1e4b8:	sub	r3, r8, #2
   1e4bc:	clz	r3, r3
   1e4c0:	lsr	r3, r3, #5
   1e4c4:	str	r3, [sp, #28]
   1e4c8:	b	1d604 <__assert_fail@plt+0xb580>
   1e4cc:	ldr	r3, [sp, #76]	; 0x4c
   1e4d0:	mov	ip, #5
   1e4d4:	str	r3, [sp, #16]
   1e4d8:	ldr	r3, [sp, #80]	; 0x50
   1e4dc:	ldr	r2, [sp, #36]	; 0x24
   1e4e0:	str	r3, [sp, #12]
   1e4e4:	ldr	r3, [sp, #56]	; 0x38
   1e4e8:	ldr	r1, [sp, #72]	; 0x48
   1e4ec:	str	r3, [sp, #8]
   1e4f0:	ldr	r3, [sp, #164]	; 0xa4
   1e4f4:	mov	r0, fp
   1e4f8:	str	r3, [sp, #4]
   1e4fc:	str	ip, [sp]
   1e500:	ldr	r3, [sp, #24]
   1e504:	bl	1cd68 <__assert_fail@plt+0xace4>
   1e508:	mov	r4, r0
   1e50c:	b	1d650 <__assert_fail@plt+0xb5cc>
   1e510:	mov	r8, #2
   1e514:	b	1d604 <__assert_fail@plt+0xb580>
   1e518:	ldr	r2, [sp, #28]
   1e51c:	b	1df40 <__assert_fail@plt+0xbebc>
   1e520:	mov	r3, #0
   1e524:	str	r3, [sp, #68]	; 0x44
   1e528:	str	r3, [sp, #44]	; 0x2c
   1e52c:	str	r3, [sp, #72]	; 0x48
   1e530:	str	r3, [sp, #28]
   1e534:	mov	r4, r3
   1e538:	ldr	r3, [pc, #-2500]	; 1db7c <__assert_fail@plt+0xbaf8>
   1e53c:	mov	r2, #1
   1e540:	str	r2, [sp, #40]	; 0x28
   1e544:	str	r2, [sp, #32]
   1e548:	str	r2, [sp, #52]	; 0x34
   1e54c:	str	r3, [sp, #60]	; 0x3c
   1e550:	b	1ce60 <__assert_fail@plt+0xaddc>
   1e554:	bl	11c7c <__stack_chk_fail@plt>
   1e558:	mov	r5, r3
   1e55c:	mov	r6, #0
   1e560:	b	1d354 <__assert_fail@plt+0xb2d0>
   1e564:	mov	r3, #0
   1e568:	mov	r2, #1
   1e56c:	str	r3, [sp, #44]	; 0x2c
   1e570:	str	r3, [sp, #72]	; 0x48
   1e574:	str	r2, [sp, #40]	; 0x28
   1e578:	b	1d470 <__assert_fail@plt+0xb3ec>
   1e57c:	bl	12060 <abort@plt>
   1e580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e584:	sub	sp, sp, #44	; 0x2c
   1e588:	mov	r6, r0
   1e58c:	mov	r4, r3
   1e590:	mov	sl, r1
   1e594:	mov	fp, r2
   1e598:	bl	11ea4 <__errno_location@plt>
   1e59c:	ldr	r7, [pc, #364]	; 1e710 <__assert_fail@plt+0xc68c>
   1e5a0:	cmp	r6, #0
   1e5a4:	ldr	r5, [r7]
   1e5a8:	ldr	r3, [r0]
   1e5ac:	str	r3, [sp, #24]
   1e5b0:	blt	1e70c <__assert_fail@plt+0xc688>
   1e5b4:	ldr	r3, [r7, #4]
   1e5b8:	mov	r8, r0
   1e5bc:	cmp	r3, r6
   1e5c0:	bgt	1e60c <__assert_fail@plt+0xc588>
   1e5c4:	cmn	r6, #-268435454	; 0xf0000002
   1e5c8:	bgt	1e708 <__assert_fail@plt+0xc684>
   1e5cc:	add	r9, r6, #1
   1e5d0:	add	r3, r7, #8
   1e5d4:	cmp	r5, r3
   1e5d8:	lsl	r1, r9, #3
   1e5dc:	beq	1e6e8 <__assert_fail@plt+0xc664>
   1e5e0:	mov	r0, r5
   1e5e4:	bl	20480 <__assert_fail@plt+0xe3fc>
   1e5e8:	mov	r5, r0
   1e5ec:	str	r0, [r7]
   1e5f0:	ldr	r0, [r7, #4]
   1e5f4:	mov	r1, #0
   1e5f8:	sub	r2, r9, r0
   1e5fc:	add	r0, r5, r0, lsl #3
   1e600:	lsl	r2, r2, #3
   1e604:	bl	11ed4 <memset@plt>
   1e608:	str	r9, [r7, #4]
   1e60c:	add	r3, r5, r6, lsl #3
   1e610:	ldr	r1, [r4, #4]
   1e614:	ldr	r7, [r3, #4]
   1e618:	ldr	r9, [r5, r6, lsl #3]
   1e61c:	ldr	r2, [r4, #40]	; 0x28
   1e620:	ldr	ip, [r4, #44]	; 0x2c
   1e624:	str	r3, [sp, #28]
   1e628:	ldr	r3, [r4]
   1e62c:	orr	r1, r1, #1
   1e630:	add	lr, r4, #8
   1e634:	str	r1, [sp, #36]	; 0x24
   1e638:	str	r1, [sp, #4]
   1e63c:	str	r2, [sp, #12]
   1e640:	str	r3, [sp]
   1e644:	mov	r0, r7
   1e648:	mov	r1, r9
   1e64c:	str	ip, [sp, #16]
   1e650:	str	lr, [sp, #8]
   1e654:	mov	r3, fp
   1e658:	mov	r2, sl
   1e65c:	str	lr, [sp, #32]
   1e660:	bl	1cd68 <__assert_fail@plt+0xace4>
   1e664:	cmp	r9, r0
   1e668:	bhi	1e6d4 <__assert_fail@plt+0xc650>
   1e66c:	ldr	r3, [pc, #160]	; 1e714 <__assert_fail@plt+0xc690>
   1e670:	add	r9, r0, #1
   1e674:	cmp	r7, r3
   1e678:	str	r9, [r5, r6, lsl #3]
   1e67c:	beq	1e688 <__assert_fail@plt+0xc604>
   1e680:	mov	r0, r7
   1e684:	bl	11bb0 <free@plt>
   1e688:	mov	r0, r9
   1e68c:	bl	20424 <__assert_fail@plt+0xe3a0>
   1e690:	ldr	lr, [sp, #28]
   1e694:	ldr	ip, [r4, #44]	; 0x2c
   1e698:	ldr	r5, [r4, #40]	; 0x28
   1e69c:	mov	r3, fp
   1e6a0:	mov	r2, sl
   1e6a4:	mov	r1, r9
   1e6a8:	str	r0, [lr, #4]
   1e6ac:	ldr	lr, [r4]
   1e6b0:	ldr	r4, [sp, #32]
   1e6b4:	str	ip, [sp, #16]
   1e6b8:	str	r4, [sp, #8]
   1e6bc:	ldr	r4, [sp, #36]	; 0x24
   1e6c0:	str	r5, [sp, #12]
   1e6c4:	str	r4, [sp, #4]
   1e6c8:	str	lr, [sp]
   1e6cc:	mov	r7, r0
   1e6d0:	bl	1cd68 <__assert_fail@plt+0xace4>
   1e6d4:	ldr	r3, [sp, #24]
   1e6d8:	mov	r0, r7
   1e6dc:	str	r3, [r8]
   1e6e0:	add	sp, sp, #44	; 0x2c
   1e6e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6e8:	mov	r0, #0
   1e6ec:	bl	20480 <__assert_fail@plt+0xe3fc>
   1e6f0:	ldr	r3, [pc, #32]	; 1e718 <__assert_fail@plt+0xc694>
   1e6f4:	mov	r5, r0
   1e6f8:	ldm	r3, {r0, r1}
   1e6fc:	str	r5, [r7]
   1e700:	stm	r5, {r0, r1}
   1e704:	b	1e5f0 <__assert_fail@plt+0xc56c>
   1e708:	bl	2066c <__assert_fail@plt+0xe5e8>
   1e70c:	bl	12060 <abort@plt>
   1e710:	andeq	r6, r3, ip, ror r2
   1e714:	andeq	r6, r3, r8, ror #16
   1e718:	andeq	r6, r3, r4, lsl #5
   1e71c:	push	{r4, r5, r6, lr}
   1e720:	mov	r5, r0
   1e724:	bl	11ea4 <__errno_location@plt>
   1e728:	cmp	r5, #0
   1e72c:	mov	r1, #48	; 0x30
   1e730:	mov	r4, r0
   1e734:	ldr	r0, [pc, #16]	; 1e74c <__assert_fail@plt+0xc6c8>
   1e738:	ldr	r6, [r4]
   1e73c:	movne	r0, r5
   1e740:	bl	2062c <__assert_fail@plt+0xe5a8>
   1e744:	str	r6, [r4]
   1e748:	pop	{r4, r5, r6, pc}
   1e74c:	andeq	r6, r3, r8, ror #18
   1e750:	ldr	r3, [pc, #12]	; 1e764 <__assert_fail@plt+0xc6e0>
   1e754:	cmp	r0, #0
   1e758:	moveq	r0, r3
   1e75c:	ldr	r0, [r0]
   1e760:	bx	lr
   1e764:	andeq	r6, r3, r8, ror #18
   1e768:	ldr	r3, [pc, #12]	; 1e77c <__assert_fail@plt+0xc6f8>
   1e76c:	cmp	r0, #0
   1e770:	moveq	r0, r3
   1e774:	str	r1, [r0]
   1e778:	bx	lr
   1e77c:	andeq	r6, r3, r8, ror #18
   1e780:	ldr	r3, [pc, #52]	; 1e7bc <__assert_fail@plt+0xc738>
   1e784:	cmp	r0, #0
   1e788:	moveq	r0, r3
   1e78c:	add	r3, r0, #8
   1e790:	push	{lr}		; (str lr, [sp, #-4]!)
   1e794:	lsr	lr, r1, #5
   1e798:	and	r1, r1, #31
   1e79c:	ldr	ip, [r3, lr, lsl #2]
   1e7a0:	lsr	r0, ip, r1
   1e7a4:	eor	r2, r2, r0
   1e7a8:	and	r2, r2, #1
   1e7ac:	and	r0, r0, #1
   1e7b0:	eor	r1, ip, r2, lsl r1
   1e7b4:	str	r1, [r3, lr, lsl #2]
   1e7b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7bc:	andeq	r6, r3, r8, ror #18
   1e7c0:	ldr	r3, [pc, #16]	; 1e7d8 <__assert_fail@plt+0xc754>
   1e7c4:	cmp	r0, #0
   1e7c8:	movne	r3, r0
   1e7cc:	ldr	r0, [r3, #4]
   1e7d0:	str	r1, [r3, #4]
   1e7d4:	bx	lr
   1e7d8:	andeq	r6, r3, r8, ror #18
   1e7dc:	ldr	r3, [pc, #44]	; 1e810 <__assert_fail@plt+0xc78c>
   1e7e0:	cmp	r0, #0
   1e7e4:	moveq	r0, r3
   1e7e8:	mov	ip, #10
   1e7ec:	cmp	r2, #0
   1e7f0:	cmpne	r1, #0
   1e7f4:	str	ip, [r0]
   1e7f8:	beq	1e808 <__assert_fail@plt+0xc784>
   1e7fc:	str	r1, [r0, #40]	; 0x28
   1e800:	str	r2, [r0, #44]	; 0x2c
   1e804:	bx	lr
   1e808:	push	{r4, lr}
   1e80c:	bl	12060 <abort@plt>
   1e810:	andeq	r6, r3, r8, ror #18
   1e814:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e818:	sub	sp, sp, #24
   1e81c:	ldr	ip, [pc, #108]	; 1e890 <__assert_fail@plt+0xc80c>
   1e820:	ldr	r4, [sp, #56]	; 0x38
   1e824:	mov	r9, r2
   1e828:	cmp	r4, #0
   1e82c:	moveq	r4, ip
   1e830:	mov	sl, r3
   1e834:	mov	r7, r0
   1e838:	mov	r8, r1
   1e83c:	bl	11ea4 <__errno_location@plt>
   1e840:	ldr	r3, [r4, #44]	; 0x2c
   1e844:	mov	r1, r8
   1e848:	ldr	r6, [r0]
   1e84c:	str	r3, [sp, #16]
   1e850:	ldr	r2, [r4, #40]	; 0x28
   1e854:	add	r3, r4, #8
   1e858:	str	r3, [sp, #8]
   1e85c:	str	r2, [sp, #12]
   1e860:	ldr	r2, [r4, #4]
   1e864:	mov	r5, r0
   1e868:	str	r2, [sp, #4]
   1e86c:	ldr	ip, [r4]
   1e870:	mov	r3, sl
   1e874:	mov	r2, r9
   1e878:	mov	r0, r7
   1e87c:	str	ip, [sp]
   1e880:	bl	1cd68 <__assert_fail@plt+0xace4>
   1e884:	str	r6, [r5]
   1e888:	add	sp, sp, #24
   1e88c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e890:	andeq	r6, r3, r8, ror #18
   1e894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e898:	cmp	r3, #0
   1e89c:	sub	sp, sp, #44	; 0x2c
   1e8a0:	ldr	r4, [pc, #192]	; 1e968 <__assert_fail@plt+0xc8e4>
   1e8a4:	mov	r6, r2
   1e8a8:	movne	r4, r3
   1e8ac:	mov	r9, r1
   1e8b0:	mov	r8, r0
   1e8b4:	bl	11ea4 <__errno_location@plt>
   1e8b8:	ldr	r3, [r4, #44]	; 0x2c
   1e8bc:	ldr	r5, [r4, #4]
   1e8c0:	add	sl, r4, #8
   1e8c4:	cmp	r6, #0
   1e8c8:	orreq	r5, r5, #1
   1e8cc:	mov	r1, #0
   1e8d0:	ldr	r2, [r0]
   1e8d4:	str	r3, [sp, #16]
   1e8d8:	ldr	r3, [r4, #40]	; 0x28
   1e8dc:	stmib	sp, {r5, sl}
   1e8e0:	str	r3, [sp, #12]
   1e8e4:	ldr	r3, [r4]
   1e8e8:	mov	r7, r0
   1e8ec:	str	r2, [sp, #28]
   1e8f0:	str	r3, [sp]
   1e8f4:	mov	r2, r8
   1e8f8:	mov	r3, r9
   1e8fc:	mov	r0, r1
   1e900:	bl	1cd68 <__assert_fail@plt+0xace4>
   1e904:	add	r1, r0, #1
   1e908:	mov	fp, r0
   1e90c:	mov	r0, r1
   1e910:	str	r1, [sp, #36]	; 0x24
   1e914:	bl	20424 <__assert_fail@plt+0xe3a0>
   1e918:	ldr	r3, [r4, #44]	; 0x2c
   1e91c:	mov	r2, r8
   1e920:	str	r3, [sp, #16]
   1e924:	ldr	r3, [r4, #40]	; 0x28
   1e928:	str	r5, [sp, #4]
   1e92c:	str	r3, [sp, #12]
   1e930:	str	sl, [sp, #8]
   1e934:	ldr	ip, [r4]
   1e938:	ldr	r1, [sp, #36]	; 0x24
   1e93c:	mov	r3, r9
   1e940:	str	ip, [sp]
   1e944:	str	r0, [sp, #32]
   1e948:	bl	1cd68 <__assert_fail@plt+0xace4>
   1e94c:	ldr	r2, [sp, #28]
   1e950:	cmp	r6, #0
   1e954:	str	r2, [r7]
   1e958:	ldr	r0, [sp, #32]
   1e95c:	strne	fp, [r6]
   1e960:	add	sp, sp, #44	; 0x2c
   1e964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e968:	andeq	r6, r3, r8, ror #18
   1e96c:	mov	r3, r2
   1e970:	mov	r2, #0
   1e974:	b	1e894 <__assert_fail@plt+0xc810>
   1e978:	push	{r4, r5, r6, r7, r8, lr}
   1e97c:	ldr	r6, [pc, #112]	; 1e9f4 <__assert_fail@plt+0xc970>
   1e980:	ldr	r3, [r6, #4]
   1e984:	ldr	r7, [r6]
   1e988:	cmp	r3, #1
   1e98c:	ble	1e9b0 <__assert_fail@plt+0xc92c>
   1e990:	sub	r5, r7, #8
   1e994:	add	r5, r5, r3, lsl #3
   1e998:	mov	r4, r7
   1e99c:	ldr	r0, [r4, #12]
   1e9a0:	add	r4, r4, #8
   1e9a4:	bl	11bb0 <free@plt>
   1e9a8:	cmp	r4, r5
   1e9ac:	bne	1e99c <__assert_fail@plt+0xc918>
   1e9b0:	ldr	r0, [r7, #4]
   1e9b4:	ldr	r4, [pc, #60]	; 1e9f8 <__assert_fail@plt+0xc974>
   1e9b8:	cmp	r0, r4
   1e9bc:	beq	1e9d0 <__assert_fail@plt+0xc94c>
   1e9c0:	bl	11bb0 <free@plt>
   1e9c4:	mov	r3, #256	; 0x100
   1e9c8:	str	r4, [r6, #12]
   1e9cc:	str	r3, [r6, #8]
   1e9d0:	ldr	r4, [pc, #36]	; 1e9fc <__assert_fail@plt+0xc978>
   1e9d4:	cmp	r7, r4
   1e9d8:	beq	1e9e8 <__assert_fail@plt+0xc964>
   1e9dc:	mov	r0, r7
   1e9e0:	bl	11bb0 <free@plt>
   1e9e4:	str	r4, [r6]
   1e9e8:	mov	r3, #1
   1e9ec:	str	r3, [r6, #4]
   1e9f0:	pop	{r4, r5, r6, r7, r8, pc}
   1e9f4:	andeq	r6, r3, ip, ror r2
   1e9f8:	andeq	r6, r3, r8, ror #16
   1e9fc:	andeq	r6, r3, r4, lsl #5
   1ea00:	ldr	r3, [pc, #4]	; 1ea0c <__assert_fail@plt+0xc988>
   1ea04:	mvn	r2, #0
   1ea08:	b	1e580 <__assert_fail@plt+0xc4fc>
   1ea0c:	andeq	r6, r3, r8, ror #18
   1ea10:	ldr	r3, [pc]	; 1ea18 <__assert_fail@plt+0xc994>
   1ea14:	b	1e580 <__assert_fail@plt+0xc4fc>
   1ea18:	andeq	r6, r3, r8, ror #18
   1ea1c:	mov	r1, r0
   1ea20:	ldr	r3, [pc, #8]	; 1ea30 <__assert_fail@plt+0xc9ac>
   1ea24:	mvn	r2, #0
   1ea28:	mov	r0, #0
   1ea2c:	b	1e580 <__assert_fail@plt+0xc4fc>
   1ea30:	andeq	r6, r3, r8, ror #18
   1ea34:	mov	r2, r1
   1ea38:	ldr	r3, [pc, #8]	; 1ea48 <__assert_fail@plt+0xc9c4>
   1ea3c:	mov	r1, r0
   1ea40:	mov	r0, #0
   1ea44:	b	1e580 <__assert_fail@plt+0xc4fc>
   1ea48:	andeq	r6, r3, r8, ror #18
   1ea4c:	push	{r4, r5, r6, lr}
   1ea50:	sub	sp, sp, #56	; 0x38
   1ea54:	ldr	r4, [pc, #68]	; 1eaa0 <__assert_fail@plt+0xca1c>
   1ea58:	mov	r6, r2
   1ea5c:	mov	r5, r0
   1ea60:	ldr	r3, [r4]
   1ea64:	add	r0, sp, #4
   1ea68:	str	r3, [sp, #52]	; 0x34
   1ea6c:	bl	1cbf8 <__assert_fail@plt+0xab74>
   1ea70:	add	r3, sp, #4
   1ea74:	mvn	r2, #0
   1ea78:	mov	r1, r6
   1ea7c:	mov	r0, r5
   1ea80:	bl	1e580 <__assert_fail@plt+0xc4fc>
   1ea84:	ldr	r2, [sp, #52]	; 0x34
   1ea88:	ldr	r3, [r4]
   1ea8c:	cmp	r2, r3
   1ea90:	bne	1ea9c <__assert_fail@plt+0xca18>
   1ea94:	add	sp, sp, #56	; 0x38
   1ea98:	pop	{r4, r5, r6, pc}
   1ea9c:	bl	11c7c <__stack_chk_fail@plt>
   1eaa0:	andeq	r5, r3, r0, lsl #30
   1eaa4:	push	{r4, r5, r6, r7, lr}
   1eaa8:	sub	sp, sp, #60	; 0x3c
   1eaac:	ldr	r4, [pc, #72]	; 1eafc <__assert_fail@plt+0xca78>
   1eab0:	mov	r6, r2
   1eab4:	mov	r7, r3
   1eab8:	ldr	ip, [r4]
   1eabc:	mov	r5, r0
   1eac0:	add	r0, sp, #4
   1eac4:	str	ip, [sp, #52]	; 0x34
   1eac8:	bl	1cbf8 <__assert_fail@plt+0xab74>
   1eacc:	add	r3, sp, #4
   1ead0:	mov	r2, r7
   1ead4:	mov	r1, r6
   1ead8:	mov	r0, r5
   1eadc:	bl	1e580 <__assert_fail@plt+0xc4fc>
   1eae0:	ldr	r2, [sp, #52]	; 0x34
   1eae4:	ldr	r3, [r4]
   1eae8:	cmp	r2, r3
   1eaec:	bne	1eaf8 <__assert_fail@plt+0xca74>
   1eaf0:	add	sp, sp, #60	; 0x3c
   1eaf4:	pop	{r4, r5, r6, r7, pc}
   1eaf8:	bl	11c7c <__stack_chk_fail@plt>
   1eafc:	andeq	r5, r3, r0, lsl #30
   1eb00:	mov	r2, r1
   1eb04:	mov	r1, r0
   1eb08:	mov	r0, #0
   1eb0c:	b	1ea4c <__assert_fail@plt+0xc9c8>
   1eb10:	mov	r3, r2
   1eb14:	mov	r2, r1
   1eb18:	mov	r1, r0
   1eb1c:	mov	r0, #0
   1eb20:	b	1eaa4 <__assert_fail@plt+0xca20>
   1eb24:	push	{r4, r5, r6, r7, r8, r9, lr}
   1eb28:	mov	r4, r2
   1eb2c:	ldr	lr, [pc, #128]	; 1ebb4 <__assert_fail@plt+0xcb30>
   1eb30:	mov	r8, r0
   1eb34:	mov	r9, r1
   1eb38:	ldm	lr!, {r0, r1, r2, r3}
   1eb3c:	sub	sp, sp, #60	; 0x3c
   1eb40:	add	ip, sp, #4
   1eb44:	lsr	r6, r4, #5
   1eb48:	stmia	ip!, {r0, r1, r2, r3}
   1eb4c:	add	r7, sp, #12
   1eb50:	ldm	lr!, {r0, r1, r2, r3}
   1eb54:	and	r4, r4, #31
   1eb58:	ldr	r5, [pc, #88]	; 1ebb8 <__assert_fail@plt+0xcb34>
   1eb5c:	stmia	ip!, {r0, r1, r2, r3}
   1eb60:	ldm	lr, {r0, r1, r2, r3}
   1eb64:	stm	ip, {r0, r1, r2, r3}
   1eb68:	mov	r2, r9
   1eb6c:	ldr	r3, [r7, r6, lsl #2]
   1eb70:	ldr	ip, [r5]
   1eb74:	mov	r1, r8
   1eb78:	mvn	r0, r3, lsr r4
   1eb7c:	and	r0, r0, #1
   1eb80:	str	ip, [sp, #52]	; 0x34
   1eb84:	eor	r4, r3, r0, lsl r4
   1eb88:	add	r3, sp, #4
   1eb8c:	mov	r0, #0
   1eb90:	str	r4, [r7, r6, lsl #2]
   1eb94:	bl	1e580 <__assert_fail@plt+0xc4fc>
   1eb98:	ldr	r2, [sp, #52]	; 0x34
   1eb9c:	ldr	r3, [r5]
   1eba0:	cmp	r2, r3
   1eba4:	bne	1ebb0 <__assert_fail@plt+0xcb2c>
   1eba8:	add	sp, sp, #60	; 0x3c
   1ebac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ebb0:	bl	11c7c <__stack_chk_fail@plt>
   1ebb4:	andeq	r6, r3, r8, ror #18
   1ebb8:	andeq	r5, r3, r0, lsl #30
   1ebbc:	mov	r2, r1
   1ebc0:	mvn	r1, #0
   1ebc4:	b	1eb24 <__assert_fail@plt+0xcaa0>
   1ebc8:	mov	r2, #58	; 0x3a
   1ebcc:	mvn	r1, #0
   1ebd0:	b	1eb24 <__assert_fail@plt+0xcaa0>
   1ebd4:	mov	r2, #58	; 0x3a
   1ebd8:	b	1eb24 <__assert_fail@plt+0xcaa0>
   1ebdc:	push	{r4, r5, r6, r7, r8, lr}
   1ebe0:	sub	sp, sp, #104	; 0x68
   1ebe4:	ldr	r5, [pc, #120]	; 1ec64 <__assert_fail@plt+0xcbe0>
   1ebe8:	mov	r6, r0
   1ebec:	mov	r0, sp
   1ebf0:	ldr	r3, [r5]
   1ebf4:	mov	r7, r2
   1ebf8:	str	r3, [sp, #100]	; 0x64
   1ebfc:	bl	1cbf8 <__assert_fail@plt+0xab74>
   1ec00:	mov	ip, sp
   1ec04:	add	lr, sp, #52	; 0x34
   1ec08:	ldm	ip!, {r0, r1, r2, r3}
   1ec0c:	stmia	lr!, {r0, r1, r2, r3}
   1ec10:	ldm	ip!, {r0, r1, r2, r3}
   1ec14:	ldr	r8, [sp, #64]	; 0x40
   1ec18:	stmia	lr!, {r0, r1, r2, r3}
   1ec1c:	mvn	r4, r8
   1ec20:	ldm	ip, {r0, r1, r2, r3}
   1ec24:	and	ip, r4, #67108864	; 0x4000000
   1ec28:	eor	ip, ip, r8
   1ec2c:	str	ip, [sp, #64]	; 0x40
   1ec30:	stm	lr, {r0, r1, r2, r3}
   1ec34:	add	r3, sp, #52	; 0x34
   1ec38:	mvn	r2, #0
   1ec3c:	mov	r1, r7
   1ec40:	mov	r0, r6
   1ec44:	bl	1e580 <__assert_fail@plt+0xc4fc>
   1ec48:	ldr	r2, [sp, #100]	; 0x64
   1ec4c:	ldr	r3, [r5]
   1ec50:	cmp	r2, r3
   1ec54:	bne	1ec60 <__assert_fail@plt+0xcbdc>
   1ec58:	add	sp, sp, #104	; 0x68
   1ec5c:	pop	{r4, r5, r6, r7, r8, pc}
   1ec60:	bl	11c7c <__stack_chk_fail@plt>
   1ec64:	andeq	r5, r3, r0, lsl #30
   1ec68:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ec6c:	mov	r6, r1
   1ec70:	ldr	lr, [pc, #132]	; 1ecfc <__assert_fail@plt+0xcc78>
   1ec74:	mov	r5, r2
   1ec78:	mov	r8, r0
   1ec7c:	mov	r9, r3
   1ec80:	ldm	lr!, {r0, r1, r2, r3}
   1ec84:	sub	sp, sp, #60	; 0x3c
   1ec88:	add	ip, sp, #4
   1ec8c:	ldr	r4, [pc, #108]	; 1ed00 <__assert_fail@plt+0xcc7c>
   1ec90:	stmia	ip!, {r0, r1, r2, r3}
   1ec94:	mov	r7, #10
   1ec98:	ldm	lr!, {r0, r1, r2, r3}
   1ec9c:	cmp	r5, #0
   1eca0:	cmpne	r6, #0
   1eca4:	str	r7, [sp, #4]
   1eca8:	stmia	ip!, {r0, r1, r2, r3}
   1ecac:	ldm	lr, {r0, r1, r2, r3}
   1ecb0:	ldr	lr, [r4]
   1ecb4:	stm	ip, {r0, r1, r2, r3}
   1ecb8:	str	lr, [sp, #52]	; 0x34
   1ecbc:	beq	1ecf8 <__assert_fail@plt+0xcc74>
   1ecc0:	add	r3, sp, #4
   1ecc4:	ldr	r2, [sp, #88]	; 0x58
   1ecc8:	mov	r1, r9
   1eccc:	mov	r0, r8
   1ecd0:	str	r6, [sp, #44]	; 0x2c
   1ecd4:	str	r5, [sp, #48]	; 0x30
   1ecd8:	bl	1e580 <__assert_fail@plt+0xc4fc>
   1ecdc:	ldr	r2, [sp, #52]	; 0x34
   1ece0:	ldr	r3, [r4]
   1ece4:	cmp	r2, r3
   1ece8:	bne	1ecf4 <__assert_fail@plt+0xcc70>
   1ecec:	add	sp, sp, #60	; 0x3c
   1ecf0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ecf4:	bl	11c7c <__stack_chk_fail@plt>
   1ecf8:	bl	12060 <abort@plt>
   1ecfc:	andeq	r6, r3, r8, ror #18
   1ed00:	andeq	r5, r3, r0, lsl #30
   1ed04:	push	{lr}		; (str lr, [sp, #-4]!)
   1ed08:	sub	sp, sp, #12
   1ed0c:	mvn	ip, #0
   1ed10:	str	ip, [sp]
   1ed14:	bl	1ec68 <__assert_fail@plt+0xcbe4>
   1ed18:	add	sp, sp, #12
   1ed1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed20:	push	{lr}		; (str lr, [sp, #-4]!)
   1ed24:	sub	sp, sp, #12
   1ed28:	mvn	ip, #0
   1ed2c:	mov	r3, r2
   1ed30:	str	ip, [sp]
   1ed34:	mov	r2, r1
   1ed38:	mov	r1, r0
   1ed3c:	mov	r0, #0
   1ed40:	bl	1ec68 <__assert_fail@plt+0xcbe4>
   1ed44:	add	sp, sp, #12
   1ed48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed4c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ed50:	sub	sp, sp, #12
   1ed54:	str	r3, [sp]
   1ed58:	mov	r3, r2
   1ed5c:	mov	r2, r1
   1ed60:	mov	r1, r0
   1ed64:	mov	r0, #0
   1ed68:	bl	1ec68 <__assert_fail@plt+0xcbe4>
   1ed6c:	add	sp, sp, #12
   1ed70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed74:	ldr	r3, [pc]	; 1ed7c <__assert_fail@plt+0xccf8>
   1ed78:	b	1e580 <__assert_fail@plt+0xc4fc>
   1ed7c:	andeq	r6, r3, ip, lsl #5
   1ed80:	mov	r2, r1
   1ed84:	ldr	r3, [pc, #8]	; 1ed94 <__assert_fail@plt+0xcd10>
   1ed88:	mov	r1, r0
   1ed8c:	mov	r0, #0
   1ed90:	b	1e580 <__assert_fail@plt+0xc4fc>
   1ed94:	andeq	r6, r3, ip, lsl #5
   1ed98:	ldr	r3, [pc, #4]	; 1eda4 <__assert_fail@plt+0xcd20>
   1ed9c:	mvn	r2, #0
   1eda0:	b	1e580 <__assert_fail@plt+0xc4fc>
   1eda4:	andeq	r6, r3, ip, lsl #5
   1eda8:	mov	r1, r0
   1edac:	ldr	r3, [pc, #8]	; 1edbc <__assert_fail@plt+0xcd38>
   1edb0:	mvn	r2, #0
   1edb4:	mov	r0, #0
   1edb8:	b	1e580 <__assert_fail@plt+0xc4fc>
   1edbc:	andeq	r6, r3, ip, lsl #5
   1edc0:	subs	r5, r0, #0
   1edc4:	push	{r7, lr}
   1edc8:	beq	1ee18 <__assert_fail@plt+0xcd94>
   1edcc:	ldr	r3, [pc, #72]	; 1ee1c <__assert_fail@plt+0xcd98>
   1edd0:	ldr	r6, [r3]
   1edd4:	bl	11ea4 <__errno_location@plt>
   1edd8:	mov	r2, #5
   1eddc:	ldr	r4, [r0]
   1ede0:	cmp	r4, #0
   1ede4:	moveq	r0, r4
   1ede8:	ldreq	r1, [pc, #48]	; 1ee20 <__assert_fail@plt+0xcd9c>
   1edec:	ldrne	r1, [pc, #48]	; 1ee24 <__assert_fail@plt+0xcda0>
   1edf0:	movne	r0, #0
   1edf4:	bl	11c70 <dcgettext@plt>
   1edf8:	mov	r7, r0
   1edfc:	mov	r0, r5
   1ee00:	bl	1eda8 <__assert_fail@plt+0xcd24>
   1ee04:	mov	r2, r7
   1ee08:	mov	r1, r4
   1ee0c:	mov	r3, r0
   1ee10:	mov	r0, r6
   1ee14:	bl	11db4 <error@plt>
   1ee18:	bl	12060 <abort@plt>
   1ee1c:	andeq	r6, r3, r8, ror r2
   1ee20:	muleq	r2, r0, sp
   1ee24:	andeq	r4, r2, r0, lsr #27
   1ee28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee2c:	sub	sp, sp, #20
   1ee30:	ldr	r6, [pc, #576]	; 1f078 <__assert_fail@plt+0xcff4>
   1ee34:	subs	r7, r1, #0
   1ee38:	ldr	r3, [r6]
   1ee3c:	str	r3, [sp, #12]
   1ee40:	beq	1ef2c <__assert_fail@plt+0xcea8>
   1ee44:	cmp	r0, #0
   1ee48:	mov	r5, r0
   1ee4c:	beq	1eeb8 <__assert_fail@plt+0xce34>
   1ee50:	ldr	r1, [pc, #548]	; 1f07c <__assert_fail@plt+0xcff8>
   1ee54:	bl	221f0 <_obstack_memory_used@@Base+0x1d0>
   1ee58:	subs	r8, r0, #0
   1ee5c:	moveq	r4, r8
   1ee60:	beq	1ee9c <__assert_fail@plt+0xce18>
   1ee64:	ldr	r0, [pc, #532]	; 1f080 <__assert_fail@plt+0xcffc>
   1ee68:	bl	20424 <__assert_fail@plt+0xe3a0>
   1ee6c:	ldr	r2, [pc, #528]	; 1f084 <__assert_fail@plt+0xd000>
   1ee70:	cmp	r7, #2048	; 0x800
   1ee74:	movcc	r3, r7
   1ee78:	movcs	r3, #2048	; 0x800
   1ee7c:	mov	r4, r0
   1ee80:	str	r8, [r0]
   1ee84:	str	r5, [r0, #8]
   1ee88:	add	r1, r4, #12
   1ee8c:	str	r2, [r4, #4]
   1ee90:	mov	r0, r8
   1ee94:	mov	r2, #0
   1ee98:	bl	11ebc <setvbuf@plt>
   1ee9c:	ldr	r2, [sp, #12]
   1eea0:	ldr	r3, [r6]
   1eea4:	mov	r0, r4
   1eea8:	cmp	r2, r3
   1eeac:	bne	1f000 <__assert_fail@plt+0xcf7c>
   1eeb0:	add	sp, sp, #20
   1eeb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eeb8:	ldr	r0, [pc, #448]	; 1f080 <__assert_fail@plt+0xcffc>
   1eebc:	bl	20424 <__assert_fail@plt+0xe3a0>
   1eec0:	ldr	r3, [pc, #444]	; 1f084 <__assert_fail@plt+0xd000>
   1eec4:	mov	r1, r5
   1eec8:	mov	r4, r0
   1eecc:	str	r5, [r0]
   1eed0:	str	r5, [r0, #8]
   1eed4:	str	r5, [r0, #12]
   1eed8:	str	r3, [r0, #4]
   1eedc:	ldr	r0, [pc, #420]	; 1f088 <__assert_fail@plt+0xd004>
   1eee0:	bl	11dc0 <open64@plt>
   1eee4:	add	r8, r4, #16
   1eee8:	subs	r9, r0, #0
   1eeec:	blt	1ef48 <__assert_fail@plt+0xcec4>
   1eef0:	cmp	r7, #1024	; 0x400
   1eef4:	movcc	r2, r7
   1eef8:	movcs	r2, #1024	; 0x400
   1eefc:	ldr	r3, [pc, #392]	; 1f08c <__assert_fail@plt+0xd008>
   1ef00:	mov	r1, r8
   1ef04:	bl	11b74 <__read_chk@plt>
   1ef08:	ldr	sl, [pc, #384]	; 1f090 <__assert_fail@plt+0xd00c>
   1ef0c:	mov	r7, r0
   1ef10:	mov	r0, r9
   1ef14:	bl	1206c <close@plt>
   1ef18:	cmp	r7, sl
   1ef1c:	ble	1f004 <__assert_fail@plt+0xcf80>
   1ef20:	mov	r0, r8
   1ef24:	bl	1f42c <__assert_fail@plt+0xd3a8>
   1ef28:	b	1ee9c <__assert_fail@plt+0xce18>
   1ef2c:	ldr	r0, [pc, #332]	; 1f080 <__assert_fail@plt+0xcffc>
   1ef30:	bl	20424 <__assert_fail@plt+0xe3a0>
   1ef34:	ldr	r3, [pc, #328]	; 1f084 <__assert_fail@plt+0xd000>
   1ef38:	mov	r4, r0
   1ef3c:	str	r7, [r0]
   1ef40:	stmib	r0, {r3, r7}
   1ef44:	b	1ee9c <__assert_fail@plt+0xce18>
   1ef48:	add	r7, sp, #4
   1ef4c:	mov	r1, r5
   1ef50:	mov	r0, r7
   1ef54:	bl	11d78 <gettimeofday@plt>
   1ef58:	mov	r3, r7
   1ef5c:	mov	fp, #12
   1ef60:	ldm	r3!, {r0, r1}
   1ef64:	str	r0, [r4, #16]
   1ef68:	str	r1, [r8, #4]
   1ef6c:	bl	11e5c <getpid@plt>
   1ef70:	str	r0, [sp, #4]
   1ef74:	str	r0, [r4, #24]
   1ef78:	rsb	r5, fp, #1024	; 0x400
   1ef7c:	cmp	r5, #4
   1ef80:	movcs	r5, #4
   1ef84:	bl	11fd0 <getppid@plt>
   1ef88:	ldr	sl, [pc, #256]	; 1f090 <__assert_fail@plt+0xd00c>
   1ef8c:	mov	r2, r5
   1ef90:	add	r9, r5, fp
   1ef94:	mov	r1, r7
   1ef98:	str	r0, [sp, #4]
   1ef9c:	add	r0, r8, fp
   1efa0:	bl	11bec <memcpy@plt>
   1efa4:	cmp	r9, sl
   1efa8:	bhi	1ef20 <__assert_fail@plt+0xce9c>
   1efac:	rsb	r5, r9, #1024	; 0x400
   1efb0:	cmp	r5, #4
   1efb4:	movcs	r5, #4
   1efb8:	bl	11b98 <getuid@plt>
   1efbc:	add	fp, r9, r5
   1efc0:	mov	r2, r5
   1efc4:	mov	r1, r7
   1efc8:	str	r0, [sp, #4]
   1efcc:	add	r0, r8, r9
   1efd0:	bl	11bec <memcpy@plt>
   1efd4:	cmp	fp, sl
   1efd8:	bhi	1ef20 <__assert_fail@plt+0xce9c>
   1efdc:	bl	11ec8 <getgid@plt>
   1efe0:	rsb	r2, fp, #1024	; 0x400
   1efe4:	cmp	r2, #4
   1efe8:	mov	r1, r7
   1efec:	movcs	r2, #4
   1eff0:	str	r0, [sp, #4]
   1eff4:	add	r0, r8, fp
   1eff8:	bl	11bec <memcpy@plt>
   1effc:	b	1ef20 <__assert_fail@plt+0xce9c>
   1f000:	bl	11c7c <__stack_chk_fail@plt>
   1f004:	bic	r3, r7, r7, asr #31
   1f008:	rsb	r9, r3, #1024	; 0x400
   1f00c:	cmp	r9, #8
   1f010:	add	r7, sp, #4
   1f014:	movcs	r9, #8
   1f018:	mov	r1, r5
   1f01c:	add	fp, r8, r3
   1f020:	mov	r0, r7
   1f024:	add	r5, r9, r3
   1f028:	bl	11d78 <gettimeofday@plt>
   1f02c:	mov	r2, r9
   1f030:	mov	r1, r7
   1f034:	mov	r0, fp
   1f038:	bl	11bec <memcpy@plt>
   1f03c:	cmp	r5, sl
   1f040:	bgt	1ef20 <__assert_fail@plt+0xce9c>
   1f044:	rsb	r9, r5, #1024	; 0x400
   1f048:	cmp	r9, #4
   1f04c:	movcs	r9, #4
   1f050:	bl	11e5c <getpid@plt>
   1f054:	add	fp, r9, r5
   1f058:	mov	r2, r9
   1f05c:	mov	r1, r7
   1f060:	str	r0, [sp, #4]
   1f064:	add	r0, r8, r5
   1f068:	bl	11bec <memcpy@plt>
   1f06c:	cmp	fp, sl
   1f070:	bls	1ef78 <__assert_fail@plt+0xcef4>
   1f074:	b	1ef20 <__assert_fail@plt+0xce9c>
   1f078:	andeq	r5, r3, r0, lsl #30
   1f07c:	andeq	r4, r2, r0, asr #27
   1f080:	andeq	r0, r0, ip, lsl r8
   1f084:	andeq	lr, r1, r0, asr #27
   1f088:			; <UNDEFINED> instruction: 0x00024db0
   1f08c:	andeq	r0, r0, ip, lsl #16
   1f090:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f094:	str	r1, [r0, #4]
   1f098:	bx	lr
   1f09c:	str	r1, [r0, #8]
   1f0a0:	bx	lr
   1f0a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f0a8:	mov	r6, r0
   1f0ac:	ldr	r7, [r0]
   1f0b0:	mov	r5, r1
   1f0b4:	cmp	r7, #0
   1f0b8:	mov	r4, r2
   1f0bc:	beq	1f110 <__assert_fail@plt+0xd08c>
   1f0c0:	bl	11ea4 <__errno_location@plt>
   1f0c4:	mov	r8, r0
   1f0c8:	mov	r3, r7
   1f0cc:	mov	r2, r4
   1f0d0:	mov	r0, r5
   1f0d4:	mov	r1, #1
   1f0d8:	bl	12030 <fread_unlocked@plt>
   1f0dc:	ldr	r3, [r8]
   1f0e0:	subs	r4, r4, r0
   1f0e4:	add	r5, r5, r0
   1f0e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f0ec:	ldm	r6, {r1, r2}
   1f0f0:	ldr	r0, [r6, #8]
   1f0f4:	ldr	r1, [r1]
   1f0f8:	tst	r1, #32
   1f0fc:	moveq	r3, #0
   1f100:	str	r3, [r8]
   1f104:	blx	r2
   1f108:	ldr	r7, [r6]
   1f10c:	b	1f0c8 <__assert_fail@plt+0xd044>
   1f110:	mov	r8, r0
   1f114:	ldr	r7, [r8, #12]!
   1f118:	cmp	r2, r7
   1f11c:	add	r8, r8, #1040	; 0x410
   1f120:	addhi	r9, r0, #16
   1f124:	bls	1f1cc <__assert_fail@plt+0xd148>
   1f128:	rsb	r1, r7, #1024	; 0x400
   1f12c:	add	r1, r8, r1
   1f130:	mov	r0, r5
   1f134:	mov	r2, r7
   1f138:	add	r5, r5, r7
   1f13c:	bl	11bec <memcpy@plt>
   1f140:	tst	r5, #3
   1f144:	mov	r1, r8
   1f148:	mov	r0, r9
   1f14c:	sub	r4, r4, r7
   1f150:	beq	1f168 <__assert_fail@plt+0xd0e4>
   1f154:	bl	1f210 <__assert_fail@plt+0xd18c>
   1f158:	cmp	r4, #1024	; 0x400
   1f15c:	mov	r7, #1024	; 0x400
   1f160:	bhi	1f128 <__assert_fail@plt+0xd0a4>
   1f164:	b	1f1ac <__assert_fail@plt+0xd128>
   1f168:	ldr	r7, [pc, #104]	; 1f1d8 <__assert_fail@plt+0xd154>
   1f16c:	cmp	r4, r7
   1f170:	bhi	1f180 <__assert_fail@plt+0xd0fc>
   1f174:	b	1f1a0 <__assert_fail@plt+0xd11c>
   1f178:	cmp	r4, r7
   1f17c:	bls	1f1a0 <__assert_fail@plt+0xd11c>
   1f180:	mov	r1, r5
   1f184:	mov	r0, r9
   1f188:	bl	1f210 <__assert_fail@plt+0xd18c>
   1f18c:	subs	r4, r4, #1024	; 0x400
   1f190:	add	r5, r5, #1024	; 0x400
   1f194:	bne	1f178 <__assert_fail@plt+0xd0f4>
   1f198:	str	r4, [r6, #12]
   1f19c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f1a0:	mov	r0, r9
   1f1a4:	mov	r1, r8
   1f1a8:	bl	1f210 <__assert_fail@plt+0xd18c>
   1f1ac:	mov	r7, #1024	; 0x400
   1f1b0:	mov	r2, r4
   1f1b4:	mov	r1, r8
   1f1b8:	mov	r0, r5
   1f1bc:	sub	r4, r7, r4
   1f1c0:	bl	11bec <memcpy@plt>
   1f1c4:	str	r4, [r6, #12]
   1f1c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f1cc:	rsb	r3, r7, #1024	; 0x400
   1f1d0:	add	r8, r8, r3
   1f1d4:	b	1f1b0 <__assert_fail@plt+0xd12c>
   1f1d8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f1dc:	push	{r4, r5, r6, lr}
   1f1e0:	mvn	r2, #0
   1f1e4:	ldr	r5, [r0]
   1f1e8:	mov	r4, r0
   1f1ec:	ldr	r1, [pc, #24]	; 1f20c <__assert_fail@plt+0xd188>
   1f1f0:	bl	11f88 <__explicit_bzero_chk@plt>
   1f1f4:	mov	r0, r4
   1f1f8:	bl	11bb0 <free@plt>
   1f1fc:	subs	r0, r5, #0
   1f200:	popeq	{r4, r5, r6, pc}
   1f204:	pop	{r4, r5, r6, lr}
   1f208:	b	21998 <__assert_fail@plt+0xf914>
   1f20c:	andeq	r0, r0, ip, lsl r8
   1f210:	push	{r4, r5, r6, r7, lr}
   1f214:	add	ip, r1, #16
   1f218:	ldr	r5, [r0, #1032]	; 0x408
   1f21c:	ldr	r4, [r0, #1028]	; 0x404
   1f220:	add	r5, r5, #1
   1f224:	ldr	r3, [r0, #1024]	; 0x400
   1f228:	add	r6, r4, r5
   1f22c:	add	r2, r0, #16
   1f230:	add	lr, r1, #528	; 0x210
   1f234:	str	r5, [r0, #1032]	; 0x408
   1f238:	ldr	r5, [r2, #-16]
   1f23c:	ldr	r7, [r2, #496]	; 0x1f0
   1f240:	and	r4, r5, #1020	; 0x3fc
   1f244:	eor	r3, r3, r3, lsl #13
   1f248:	ldr	r4, [r0, r4]
   1f24c:	add	r3, r3, r7
   1f250:	add	r4, r3, r4
   1f254:	add	r4, r4, r6
   1f258:	str	r4, [r2, #-16]
   1f25c:	lsr	r4, r4, #8
   1f260:	and	r4, r4, #1020	; 0x3fc
   1f264:	eor	r3, r3, r3, lsr #6
   1f268:	ldr	r4, [r0, r4]
   1f26c:	add	ip, ip, #16
   1f270:	add	r5, r5, r4
   1f274:	str	r5, [ip, #-32]	; 0xffffffe0
   1f278:	ldr	r6, [r2, #-12]
   1f27c:	ldr	r7, [r2, #500]	; 0x1f4
   1f280:	and	r4, r6, #1020	; 0x3fc
   1f284:	add	r3, r3, r7
   1f288:	ldr	r7, [r0, r4]
   1f28c:	eor	r4, r3, r3, lsl #2
   1f290:	add	r3, r3, r7
   1f294:	add	r3, r3, r5
   1f298:	str	r3, [r2, #-12]
   1f29c:	lsr	r3, r3, #8
   1f2a0:	and	r3, r3, #1020	; 0x3fc
   1f2a4:	add	r2, r2, #16
   1f2a8:	ldr	r3, [r0, r3]
   1f2ac:	add	r6, r6, r3
   1f2b0:	str	r6, [ip, #-28]	; 0xffffffe4
   1f2b4:	ldr	r5, [r2, #-24]	; 0xffffffe8
   1f2b8:	ldr	r7, [r2, #488]	; 0x1e8
   1f2bc:	and	r3, r5, #1020	; 0x3fc
   1f2c0:	add	r4, r4, r7
   1f2c4:	ldr	r7, [r0, r3]
   1f2c8:	eor	r3, r4, r4, lsr #16
   1f2cc:	add	r4, r4, r7
   1f2d0:	add	r4, r4, r6
   1f2d4:	str	r4, [r2, #-24]	; 0xffffffe8
   1f2d8:	lsr	r4, r4, #8
   1f2dc:	and	r4, r4, #1020	; 0x3fc
   1f2e0:	ldr	r4, [r0, r4]
   1f2e4:	add	r5, r5, r4
   1f2e8:	str	r5, [ip, #-24]	; 0xffffffe8
   1f2ec:	ldr	r6, [r2, #-20]	; 0xffffffec
   1f2f0:	ldr	r7, [r2, #492]	; 0x1ec
   1f2f4:	and	r4, r6, #1020	; 0x3fc
   1f2f8:	add	r3, r3, r7
   1f2fc:	ldr	r4, [r0, r4]
   1f300:	add	r4, r3, r4
   1f304:	add	r4, r4, r5
   1f308:	str	r4, [r2, #-20]	; 0xffffffec
   1f30c:	lsr	r4, r4, #8
   1f310:	and	r4, r4, #1020	; 0x3fc
   1f314:	ldr	r4, [r0, r4]
   1f318:	add	r6, r6, r4
   1f31c:	str	r6, [ip, #-20]	; 0xffffffec
   1f320:	cmp	ip, lr
   1f324:	bne	1f238 <__assert_fail@plt+0xd1b4>
   1f328:	add	r1, r1, #1040	; 0x410
   1f32c:	add	r2, r0, #528	; 0x210
   1f330:	ldr	lr, [r2, #-16]
   1f334:	ldr	r5, [r2, #-528]	; 0xfffffdf0
   1f338:	and	r4, lr, #1020	; 0x3fc
   1f33c:	eor	r3, r3, r3, lsl #13
   1f340:	ldr	r4, [r0, r4]
   1f344:	add	r3, r3, r5
   1f348:	add	r4, r3, r4
   1f34c:	add	r4, r4, r6
   1f350:	str	r4, [r2, #-16]
   1f354:	lsr	r4, r4, #8
   1f358:	and	r4, r4, #1020	; 0x3fc
   1f35c:	eor	r3, r3, r3, lsr #6
   1f360:	ldr	r5, [r0, r4]
   1f364:	add	ip, ip, #16
   1f368:	add	r5, lr, r5
   1f36c:	str	r5, [ip, #-32]	; 0xffffffe0
   1f370:	ldr	r4, [r2, #-12]
   1f374:	ldr	r6, [r2, #-524]	; 0xfffffdf4
   1f378:	and	lr, r4, #1020	; 0x3fc
   1f37c:	add	r3, r3, r6
   1f380:	ldr	r6, [r0, lr]
   1f384:	eor	lr, r3, r3, lsl #2
   1f388:	add	r3, r3, r6
   1f38c:	add	r3, r3, r5
   1f390:	str	r3, [r2, #-12]
   1f394:	lsr	r3, r3, #8
   1f398:	and	r3, r3, #1020	; 0x3fc
   1f39c:	add	r2, r2, #16
   1f3a0:	ldr	r3, [r0, r3]
   1f3a4:	add	r4, r4, r3
   1f3a8:	str	r4, [ip, #-28]	; 0xffffffe4
   1f3ac:	ldr	r5, [r2, #-24]	; 0xffffffe8
   1f3b0:	ldr	r6, [r2, #-536]	; 0xfffffde8
   1f3b4:	and	r3, r5, #1020	; 0x3fc
   1f3b8:	add	lr, lr, r6
   1f3bc:	ldr	r6, [r0, r3]
   1f3c0:	eor	r3, lr, lr, lsr #16
   1f3c4:	add	lr, lr, r6
   1f3c8:	add	lr, lr, r4
   1f3cc:	str	lr, [r2, #-24]	; 0xffffffe8
   1f3d0:	lsr	lr, lr, #8
   1f3d4:	and	lr, lr, #1020	; 0x3fc
   1f3d8:	ldr	lr, [r0, lr]
   1f3dc:	add	r5, r5, lr
   1f3e0:	str	r5, [ip, #-24]	; 0xffffffe8
   1f3e4:	ldr	r4, [r2, #-20]	; 0xffffffec
   1f3e8:	ldr	r6, [r2, #-532]	; 0xfffffdec
   1f3ec:	and	lr, r4, #1020	; 0x3fc
   1f3f0:	add	r3, r3, r6
   1f3f4:	ldr	lr, [r0, lr]
   1f3f8:	add	lr, r3, lr
   1f3fc:	add	lr, lr, r5
   1f400:	str	lr, [r2, #-20]	; 0xffffffec
   1f404:	lsr	lr, lr, #8
   1f408:	and	lr, lr, #1020	; 0x3fc
   1f40c:	ldr	r6, [r0, lr]
   1f410:	add	r6, r4, r6
   1f414:	str	r6, [ip, #-20]	; 0xffffffec
   1f418:	cmp	r1, ip
   1f41c:	bne	1f330 <__assert_fail@plt+0xd2ac>
   1f420:	str	r3, [r0, #1024]	; 0x400
   1f424:	str	r6, [r0, #1028]	; 0x404
   1f428:	pop	{r4, r5, r6, r7, pc}
   1f42c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f430:	mov	r2, r0
   1f434:	ldr	r8, [pc, #452]	; 1f600 <__assert_fail@plt+0xd57c>
   1f438:	ldr	r7, [pc, #452]	; 1f604 <__assert_fail@plt+0xd580>
   1f43c:	ldr	r6, [pc, #452]	; 1f608 <__assert_fail@plt+0xd584>
   1f440:	ldr	r4, [pc, #452]	; 1f60c <__assert_fail@plt+0xd588>
   1f444:	ldr	lr, [pc, #452]	; 1f610 <__assert_fail@plt+0xd58c>
   1f448:	ldr	ip, [pc, #452]	; 1f614 <__assert_fail@plt+0xd590>
   1f44c:	ldr	r1, [pc, #452]	; 1f618 <__assert_fail@plt+0xd594>
   1f450:	ldr	r9, [pc, #452]	; 1f61c <__assert_fail@plt+0xd598>
   1f454:	add	fp, r0, #1024	; 0x400
   1f458:	mov	r3, r0
   1f45c:	ldm	r3, {r5, sl}
   1f460:	add	r3, r3, #32
   1f464:	add	r1, r1, sl
   1f468:	add	r9, r9, r5
   1f46c:	ldr	sl, [r3, #-24]	; 0xffffffe8
   1f470:	ldr	r5, [r3, #-20]	; 0xffffffec
   1f474:	eor	r9, r9, r1, lsl #11
   1f478:	add	ip, ip, sl
   1f47c:	add	r5, r9, r5
   1f480:	ldr	sl, [r3, #-16]
   1f484:	add	lr, r5, lr
   1f488:	add	r1, r1, ip
   1f48c:	ldr	r5, [r3, #-12]
   1f490:	eor	r1, r1, ip, lsr #2
   1f494:	add	ip, ip, lr
   1f498:	add	sl, r1, sl
   1f49c:	eor	ip, ip, lr, lsl #8
   1f4a0:	add	r4, sl, r4
   1f4a4:	add	r5, ip, r5
   1f4a8:	add	r6, r5, r6
   1f4ac:	add	lr, lr, r4
   1f4b0:	ldr	r5, [r3, #-8]
   1f4b4:	eor	lr, lr, r4, lsr #16
   1f4b8:	ldr	sl, [r3, #-4]
   1f4bc:	add	r4, r4, r6
   1f4c0:	add	r5, lr, r5
   1f4c4:	eor	r4, r4, r6, lsl #10
   1f4c8:	add	r7, r5, r7
   1f4cc:	add	r6, r6, r7
   1f4d0:	add	sl, r4, sl
   1f4d4:	add	r8, sl, r8
   1f4d8:	eor	r6, r6, r7, lsr #4
   1f4dc:	add	r9, r9, r6
   1f4e0:	add	r7, r7, r8
   1f4e4:	eor	r7, r7, r8, lsl #8
   1f4e8:	add	r8, r8, r9
   1f4ec:	eor	r8, r8, r9, lsr #9
   1f4f0:	add	r1, r1, r7
   1f4f4:	add	r9, r9, r1
   1f4f8:	add	ip, ip, r8
   1f4fc:	str	r4, [r3, #-16]
   1f500:	str	lr, [r3, #-20]	; 0xffffffec
   1f504:	str	r1, [r3, #-28]	; 0xffffffe4
   1f508:	str	r9, [r3, #-32]	; 0xffffffe0
   1f50c:	str	ip, [r3, #-24]	; 0xffffffe8
   1f510:	str	r7, [r3, #-8]
   1f514:	str	r8, [r3, #-4]
   1f518:	str	r6, [r3, #-12]
   1f51c:	cmp	fp, r3
   1f520:	bne	1f45c <__assert_fail@plt+0xd3d8>
   1f524:	ldm	r2, {r3, r5}
   1f528:	ldr	sl, [r2, #24]
   1f52c:	add	r2, r2, #32
   1f530:	add	r1, r1, r5
   1f534:	ldr	r5, [r2, #-24]	; 0xffffffe8
   1f538:	add	r9, r9, r3
   1f53c:	ldr	r3, [r2, #-20]	; 0xffffffec
   1f540:	add	ip, ip, r5
   1f544:	eor	r9, r9, r1, lsl #11
   1f548:	ldr	r5, [r2, #-16]
   1f54c:	add	r3, r9, r3
   1f550:	add	r1, r1, ip
   1f554:	add	lr, r3, lr
   1f558:	eor	r1, r1, ip, lsr #2
   1f55c:	ldr	r3, [r2, #-12]
   1f560:	add	ip, ip, lr
   1f564:	add	r5, r1, r5
   1f568:	eor	ip, ip, lr, lsl #8
   1f56c:	add	r4, r5, r4
   1f570:	add	r3, ip, r3
   1f574:	add	lr, lr, r4
   1f578:	add	r6, r3, r6
   1f57c:	eor	lr, lr, r4, lsr #16
   1f580:	ldr	r3, [r2, #-4]
   1f584:	add	r4, r4, r6
   1f588:	add	sl, lr, sl
   1f58c:	eor	r4, r4, r6, lsl #10
   1f590:	add	r7, sl, r7
   1f594:	add	r6, r6, r7
   1f598:	add	r3, r4, r3
   1f59c:	add	r8, r3, r8
   1f5a0:	eor	r6, r6, r7, lsr #4
   1f5a4:	add	r9, r9, r6
   1f5a8:	add	r7, r7, r8
   1f5ac:	eor	r7, r7, r8, lsl #8
   1f5b0:	add	r8, r8, r9
   1f5b4:	eor	r8, r8, r9, lsr #9
   1f5b8:	add	r1, r1, r7
   1f5bc:	add	r9, r9, r1
   1f5c0:	add	ip, ip, r8
   1f5c4:	str	r4, [r2, #-16]
   1f5c8:	str	lr, [r2, #-20]	; 0xffffffec
   1f5cc:	str	r1, [r2, #-28]	; 0xffffffe4
   1f5d0:	str	r9, [r2, #-32]	; 0xffffffe0
   1f5d4:	str	ip, [r2, #-24]	; 0xffffffe8
   1f5d8:	str	r7, [r2, #-8]
   1f5dc:	str	r8, [r2, #-4]
   1f5e0:	str	r6, [r2, #-12]
   1f5e4:	cmp	fp, r2
   1f5e8:	bne	1f524 <__assert_fail@plt+0xd4a0>
   1f5ec:	mov	r3, #0
   1f5f0:	str	r3, [r0, #1032]	; 0x408
   1f5f4:	str	r3, [r0, #1028]	; 0x404
   1f5f8:	str	r3, [r0, #1024]	; 0x400
   1f5fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f600:	rsbcc	r9, r0, r9, lsl r1
   1f604:	strbtgt	lr, [pc], #2587	; 1f60c <__assert_fail@plt+0xd588>
   1f608:	ldrge	r3, [sl, #-3145]	; 0xfffff3b7
   1f60c:	stmdble	sl!, {r3, r4, r5, r6, r9, fp, lr}
   1f610:	svceq	0x00421ad8
   1f614:	tstgt	r6, #1200	; 0x4b0
   1f618:	ldrbls	r0, [r9, #89]	; 0x59
   1f61c:	cmnne	r7, #360	; 0x168
   1f620:	push	{r4, r5, r6, lr}
   1f624:	mov	r4, r0
   1f628:	ldr	r3, [r0, #24]
   1f62c:	ldr	r6, [r0, #20]
   1f630:	cmp	r3, r6
   1f634:	sub	r5, r3, r6
   1f638:	ldrbeq	r2, [r0, #52]	; 0x34
   1f63c:	sub	r5, r5, #1
   1f640:	orreq	r2, r2, #2
   1f644:	strbeq	r2, [r0, #52]	; 0x34
   1f648:	ldr	r0, [r0, #36]	; 0x24
   1f64c:	ldr	r1, [r4, #28]
   1f650:	ldr	r2, [r4, #16]
   1f654:	add	r3, r3, r0
   1f658:	bic	r3, r3, r0
   1f65c:	sub	r0, r3, r2
   1f660:	sub	r2, r1, r2
   1f664:	cmp	r0, r2
   1f668:	str	r3, [r4, #24]
   1f66c:	ldr	r2, [r4, #72]	; 0x48
   1f670:	movhi	r3, r1
   1f674:	strhi	r1, [r4, #24]
   1f678:	ldr	r1, [r4, #68]	; 0x44
   1f67c:	str	r3, [r4, #20]
   1f680:	sub	r3, r2, r1
   1f684:	cmp	r3, #3
   1f688:	bls	1f6d0 <__assert_fail@plt+0xd64c>
   1f68c:	str	r6, [r1]
   1f690:	ldr	r1, [r4, #112]	; 0x70
   1f694:	ldr	r2, [r4, #116]	; 0x74
   1f698:	ldr	r3, [r4, #68]	; 0x44
   1f69c:	sub	r2, r2, r1
   1f6a0:	add	r3, r3, #4
   1f6a4:	cmp	r2, #3
   1f6a8:	str	r3, [r4, #68]	; 0x44
   1f6ac:	bls	1f6e4 <__assert_fail@plt+0xd660>
   1f6b0:	str	r5, [r1]
   1f6b4:	ldr	r2, [r4, #112]	; 0x70
   1f6b8:	ldr	r3, [r4]
   1f6bc:	add	r2, r2, #4
   1f6c0:	add	r3, r3, #1
   1f6c4:	str	r2, [r4, #112]	; 0x70
   1f6c8:	str	r3, [r4]
   1f6cc:	pop	{r4, r5, r6, pc}
   1f6d0:	mov	r1, #4
   1f6d4:	add	r0, r4, #56	; 0x38
   1f6d8:	bl	21e78 <_obstack_newchunk@@Base>
   1f6dc:	ldr	r1, [r4, #68]	; 0x44
   1f6e0:	b	1f68c <__assert_fail@plt+0xd608>
   1f6e4:	mov	r1, #4
   1f6e8:	add	r0, r4, #100	; 0x64
   1f6ec:	bl	21e78 <_obstack_newchunk@@Base>
   1f6f0:	ldr	r1, [r4, #112]	; 0x70
   1f6f4:	b	1f6b0 <__assert_fail@plt+0xd62c>
   1f6f8:	push	{r4, r5, r6, r7, lr}
   1f6fc:	sub	sp, sp, #12
   1f700:	ldr	r6, [pc, #100]	; 1f76c <__assert_fail@plt+0xd6e8>
   1f704:	ldr	r7, [pc, #100]	; 1f770 <__assert_fail@plt+0xd6ec>
   1f708:	mov	r4, #0
   1f70c:	mov	r5, r0
   1f710:	str	r4, [r0]
   1f714:	str	r4, [r0, #4]
   1f718:	str	r4, [r0, #8]
   1f71c:	mov	r2, r4
   1f720:	mov	r1, r4
   1f724:	mov	r3, r6
   1f728:	str	r7, [sp]
   1f72c:	add	r0, r0, #12
   1f730:	bl	21e28 <_obstack_begin@@Base>
   1f734:	mov	r3, r6
   1f738:	mov	r2, r4
   1f73c:	mov	r1, r4
   1f740:	str	r7, [sp]
   1f744:	add	r0, r5, #56	; 0x38
   1f748:	bl	21e28 <_obstack_begin@@Base>
   1f74c:	str	r7, [sp]
   1f750:	mov	r3, r6
   1f754:	add	r0, r5, #100	; 0x64
   1f758:	mov	r2, r4
   1f75c:	mov	r1, r4
   1f760:	bl	21e28 <_obstack_begin@@Base>
   1f764:	add	sp, sp, #12
   1f768:	pop	{r4, r5, r6, r7, pc}
   1f76c:	strdeq	r1, [r1], -ip
   1f770:			; <UNDEFINED> instruction: 0x00011bb0
   1f774:	push	{r4, lr}
   1f778:	mov	r1, #0
   1f77c:	mov	r4, r0
   1f780:	add	r0, r0, #12
   1f784:	bl	21fb0 <_obstack_free@@Base>
   1f788:	add	r0, r4, #56	; 0x38
   1f78c:	mov	r1, #0
   1f790:	bl	21fb0 <_obstack_free@@Base>
   1f794:	add	r0, r4, #100	; 0x64
   1f798:	mov	r1, #0
   1f79c:	pop	{r4, lr}
   1f7a0:	b	21fb0 <_obstack_free@@Base>
   1f7a4:	push	{r4, r5, r6, r7, r8, lr}
   1f7a8:	mov	r4, r1
   1f7ac:	mov	r6, r0
   1f7b0:	add	r7, r1, #12
   1f7b4:	b	1f7cc <__assert_fail@plt+0xd748>
   1f7b8:	add	r2, r3, #1
   1f7bc:	cmp	r5, #0
   1f7c0:	str	r2, [r4, #24]
   1f7c4:	strb	r5, [r3]
   1f7c8:	beq	1f900 <__assert_fail@plt+0xd87c>
   1f7cc:	mov	r0, r6
   1f7d0:	bl	11ee0 <fgetc@plt>
   1f7d4:	ldr	r3, [r4, #24]
   1f7d8:	cmn	r0, #1
   1f7dc:	mov	r5, r0
   1f7e0:	beq	1f804 <__assert_fail@plt+0xd780>
   1f7e4:	ldr	r2, [r4, #28]
   1f7e8:	cmp	r2, r3
   1f7ec:	bne	1f7b8 <__assert_fail@plt+0xd734>
   1f7f0:	mov	r1, #1
   1f7f4:	mov	r0, r7
   1f7f8:	bl	21e78 <_obstack_newchunk@@Base>
   1f7fc:	ldr	r3, [r4, #24]
   1f800:	b	1f7b8 <__assert_fail@plt+0xd734>
   1f804:	ldr	r2, [r4, #20]
   1f808:	cmp	r3, r2
   1f80c:	beq	1f834 <__assert_fail@plt+0xd7b0>
   1f810:	ldr	r2, [r4, #28]
   1f814:	cmp	r3, r2
   1f818:	beq	1f920 <__assert_fail@plt+0xd89c>
   1f81c:	add	r1, r3, #1
   1f820:	mov	r2, #0
   1f824:	str	r1, [r4, #24]
   1f828:	mov	r0, r4
   1f82c:	strb	r2, [r3]
   1f830:	bl	1f620 <__assert_fail@plt+0xd59c>
   1f834:	ldrd	r2, [r4, #68]	; 0x44
   1f838:	sub	r3, r3, r2
   1f83c:	cmp	r3, #3
   1f840:	bls	1f90c <__assert_fail@plt+0xd888>
   1f844:	mov	r3, #0
   1f848:	str	r3, [r2]
   1f84c:	ldr	r3, [r4, #68]	; 0x44
   1f850:	ldr	r1, [r4, #64]	; 0x40
   1f854:	add	r3, r3, #4
   1f858:	cmp	r3, r1
   1f85c:	ldr	r0, [r4, #80]	; 0x50
   1f860:	ldrbeq	r2, [r4, #96]	; 0x60
   1f864:	ldr	ip, [r4, #72]	; 0x48
   1f868:	str	r3, [r4, #68]	; 0x44
   1f86c:	orreq	r2, r2, #2
   1f870:	strbeq	r2, [r4, #96]	; 0x60
   1f874:	add	r3, r3, r0
   1f878:	ldr	r2, [r4, #60]	; 0x3c
   1f87c:	bic	r3, r3, r0
   1f880:	sub	r0, r3, r2
   1f884:	sub	r2, ip, r2
   1f888:	cmp	r0, r2
   1f88c:	ldr	r2, [r4, #112]	; 0x70
   1f890:	ldr	r0, [r4, #108]	; 0x6c
   1f894:	str	r3, [r4, #68]	; 0x44
   1f898:	movhi	r3, ip
   1f89c:	strhi	ip, [r4, #68]	; 0x44
   1f8a0:	cmp	r2, r0
   1f8a4:	str	r3, [r4, #64]	; 0x40
   1f8a8:	ldrbeq	r3, [r4, #140]	; 0x8c
   1f8ac:	ldr	ip, [r4, #124]	; 0x7c
   1f8b0:	str	r1, [r4, #4]
   1f8b4:	orreq	r3, r3, #2
   1f8b8:	strbeq	r3, [r4, #140]	; 0x8c
   1f8bc:	ldr	r1, [r4, #104]	; 0x68
   1f8c0:	add	r3, r2, ip
   1f8c4:	ldr	r2, [r4, #116]	; 0x74
   1f8c8:	bic	r3, r3, ip
   1f8cc:	sub	ip, r3, r1
   1f8d0:	sub	r1, r2, r1
   1f8d4:	cmp	ip, r1
   1f8d8:	str	r3, [r4, #112]	; 0x70
   1f8dc:	movhi	r3, r2
   1f8e0:	str	r0, [r4, #8]
   1f8e4:	strhi	r2, [r4, #112]	; 0x70
   1f8e8:	str	r3, [r4, #108]	; 0x6c
   1f8ec:	mov	r0, r6
   1f8f0:	bl	11bd4 <ferror@plt>
   1f8f4:	clz	r0, r0
   1f8f8:	lsr	r0, r0, #5
   1f8fc:	pop	{r4, r5, r6, r7, r8, pc}
   1f900:	mov	r0, r4
   1f904:	bl	1f620 <__assert_fail@plt+0xd59c>
   1f908:	b	1f7cc <__assert_fail@plt+0xd748>
   1f90c:	mov	r1, #4
   1f910:	add	r0, r4, #56	; 0x38
   1f914:	bl	21e78 <_obstack_newchunk@@Base>
   1f918:	ldr	r2, [r4, #68]	; 0x44
   1f91c:	b	1f844 <__assert_fail@plt+0xd7c0>
   1f920:	mov	r1, #1
   1f924:	add	r0, r4, #12
   1f928:	bl	21e78 <_obstack_newchunk@@Base>
   1f92c:	ldr	r3, [r4, #24]
   1f930:	b	1f81c <__assert_fail@plt+0xd798>
   1f934:	push	{r4, lr}
   1f938:	bl	11de4 <mkstemp64@plt>
   1f93c:	pop	{r4, lr}
   1f940:	b	1fe88 <__assert_fail@plt+0xde04>
   1f944:	push	{r4, lr}
   1f948:	mov	r4, r1
   1f94c:	bl	11d24 <mkostemp64@plt>
   1f950:	mov	r1, r4
   1f954:	pop	{r4, lr}
   1f958:	b	22194 <_obstack_memory_used@@Base+0x174>
   1f95c:	push	{r4, r5, lr}
   1f960:	ldrb	lr, [r0]
   1f964:	ldrb	ip, [r1]
   1f968:	cmp	lr, #45	; 0x2d
   1f96c:	beq	1f9ac <__assert_fail@plt+0xd928>
   1f970:	cmp	ip, #45	; 0x2d
   1f974:	bne	1fa18 <__assert_fail@plt+0xd994>
   1f978:	ldrb	r5, [r1, #1]!
   1f97c:	cmp	r5, #48	; 0x30
   1f980:	beq	1f978 <__assert_fail@plt+0xd8f4>
   1f984:	cmp	r3, r5
   1f988:	beq	1f978 <__assert_fail@plt+0xd8f4>
   1f98c:	cmp	r2, r5
   1f990:	beq	1faec <__assert_fail@plt+0xda68>
   1f994:	sub	r5, r5, #48	; 0x30
   1f998:	cmp	r5, #9
   1f99c:	bhi	1fb0c <__assert_fail@plt+0xda88>
   1f9a0:	mov	lr, #1
   1f9a4:	mov	r0, lr
   1f9a8:	pop	{r4, r5, pc}
   1f9ac:	ldrb	lr, [r0, #1]!
   1f9b0:	cmp	lr, #48	; 0x30
   1f9b4:	beq	1f9ac <__assert_fail@plt+0xd928>
   1f9b8:	cmp	r3, lr
   1f9bc:	beq	1f9ac <__assert_fail@plt+0xd928>
   1f9c0:	cmp	ip, #45	; 0x2d
   1f9c4:	beq	1fa80 <__assert_fail@plt+0xd9fc>
   1f9c8:	cmp	r2, lr
   1f9cc:	beq	1fad0 <__assert_fail@plt+0xda4c>
   1f9d0:	sub	lr, lr, #48	; 0x30
   1f9d4:	cmp	lr, #9
   1f9d8:	bhi	1f9e4 <__assert_fail@plt+0xd960>
   1f9dc:	b	1fbd0 <__assert_fail@plt+0xdb4c>
   1f9e0:	ldrb	ip, [r1, #1]!
   1f9e4:	cmp	ip, #48	; 0x30
   1f9e8:	beq	1f9e0 <__assert_fail@plt+0xd95c>
   1f9ec:	cmp	r3, ip
   1f9f0:	beq	1f9e0 <__assert_fail@plt+0xd95c>
   1f9f4:	cmp	r2, ip
   1f9f8:	beq	1fb3c <__assert_fail@plt+0xdab8>
   1f9fc:	sub	ip, ip, #48	; 0x30
   1fa00:	cmp	ip, #9
   1fa04:	movhi	lr, #0
   1fa08:	mvnls	lr, #0
   1fa0c:	mov	r0, lr
   1fa10:	pop	{r4, r5, pc}
   1fa14:	ldrb	lr, [r0, #1]!
   1fa18:	cmp	lr, #48	; 0x30
   1fa1c:	beq	1fa14 <__assert_fail@plt+0xd990>
   1fa20:	cmp	r3, lr
   1fa24:	beq	1fa14 <__assert_fail@plt+0xd990>
   1fa28:	cmp	ip, #48	; 0x30
   1fa2c:	bne	1fa3c <__assert_fail@plt+0xd9b8>
   1fa30:	ldrb	ip, [r1, #1]!
   1fa34:	cmp	ip, #48	; 0x30
   1fa38:	beq	1fa30 <__assert_fail@plt+0xd9ac>
   1fa3c:	cmp	r3, ip
   1fa40:	beq	1fa30 <__assert_fail@plt+0xd9ac>
   1fa44:	cmp	lr, ip
   1fa48:	bne	1fb58 <__assert_fail@plt+0xdad4>
   1fa4c:	sub	r4, lr, #48	; 0x30
   1fa50:	cmp	r4, #9
   1fa54:	bhi	1fb58 <__assert_fail@plt+0xdad4>
   1fa58:	ldrb	lr, [r0, #1]!
   1fa5c:	cmp	r3, lr
   1fa60:	beq	1fa58 <__assert_fail@plt+0xd9d4>
   1fa64:	ldrb	ip, [r1, #1]!
   1fa68:	cmp	r3, ip
   1fa6c:	bne	1fa44 <__assert_fail@plt+0xd9c0>
   1fa70:	ldrb	ip, [r1, #1]!
   1fa74:	cmp	r3, ip
   1fa78:	beq	1fa64 <__assert_fail@plt+0xd9e0>
   1fa7c:	b	1fa44 <__assert_fail@plt+0xd9c0>
   1fa80:	ldrb	r4, [r1, #1]!
   1fa84:	cmp	r4, #48	; 0x30
   1fa88:	beq	1fa80 <__assert_fail@plt+0xd9fc>
   1fa8c:	cmp	r3, r4
   1fa90:	beq	1fa80 <__assert_fail@plt+0xd9fc>
   1fa94:	cmp	lr, r4
   1fa98:	bne	1fbdc <__assert_fail@plt+0xdb58>
   1fa9c:	sub	ip, lr, #48	; 0x30
   1faa0:	cmp	ip, #9
   1faa4:	bhi	1fbdc <__assert_fail@plt+0xdb58>
   1faa8:	ldrb	lr, [r0, #1]!
   1faac:	cmp	r3, lr
   1fab0:	beq	1faa8 <__assert_fail@plt+0xda24>
   1fab4:	ldrb	r4, [r1, #1]!
   1fab8:	cmp	r3, r4
   1fabc:	bne	1fa94 <__assert_fail@plt+0xda10>
   1fac0:	ldrb	r4, [r1, #1]!
   1fac4:	cmp	r3, r4
   1fac8:	beq	1fab4 <__assert_fail@plt+0xda30>
   1facc:	b	1fa94 <__assert_fail@plt+0xda10>
   1fad0:	ldrb	lr, [r0, #1]!
   1fad4:	cmp	lr, #48	; 0x30
   1fad8:	bne	1f9d0 <__assert_fail@plt+0xd94c>
   1fadc:	ldrb	lr, [r0, #1]!
   1fae0:	cmp	lr, #48	; 0x30
   1fae4:	beq	1fad0 <__assert_fail@plt+0xda4c>
   1fae8:	b	1f9d0 <__assert_fail@plt+0xd94c>
   1faec:	ldrb	r5, [r1, #1]!
   1faf0:	cmp	r5, #48	; 0x30
   1faf4:	bne	1f994 <__assert_fail@plt+0xd910>
   1faf8:	ldrb	r5, [r1, #1]!
   1fafc:	cmp	r5, #48	; 0x30
   1fb00:	beq	1faec <__assert_fail@plt+0xda68>
   1fb04:	b	1f994 <__assert_fail@plt+0xd910>
   1fb08:	ldrb	lr, [r0, #1]!
   1fb0c:	cmp	lr, #48	; 0x30
   1fb10:	beq	1fb08 <__assert_fail@plt+0xda84>
   1fb14:	cmp	r3, lr
   1fb18:	beq	1fb08 <__assert_fail@plt+0xda84>
   1fb1c:	cmp	r2, lr
   1fb20:	beq	1fc60 <__assert_fail@plt+0xdbdc>
   1fb24:	sub	lr, lr, #48	; 0x30
   1fb28:	cmp	lr, #9
   1fb2c:	movhi	lr, #0
   1fb30:	movls	lr, #1
   1fb34:	mov	r0, lr
   1fb38:	pop	{r4, r5, pc}
   1fb3c:	ldrb	ip, [r1, #1]!
   1fb40:	cmp	ip, #48	; 0x30
   1fb44:	bne	1f9fc <__assert_fail@plt+0xd978>
   1fb48:	ldrb	ip, [r1, #1]!
   1fb4c:	cmp	ip, #48	; 0x30
   1fb50:	beq	1fb3c <__assert_fail@plt+0xdab8>
   1fb54:	b	1f9fc <__assert_fail@plt+0xd978>
   1fb58:	cmp	r2, lr
   1fb5c:	beq	1fc7c <__assert_fail@plt+0xdbf8>
   1fb60:	cmp	r2, ip
   1fb64:	sub	r4, lr, #48	; 0x30
   1fb68:	beq	1fcac <__assert_fail@plt+0xdc28>
   1fb6c:	cmp	r4, #9
   1fb70:	sub	lr, lr, ip
   1fb74:	sub	ip, ip, #48	; 0x30
   1fb78:	bhi	1fd20 <__assert_fail@plt+0xdc9c>
   1fb7c:	mov	r4, #0
   1fb80:	ldrb	r2, [r0, #1]!
   1fb84:	cmp	r3, r2
   1fb88:	beq	1fb80 <__assert_fail@plt+0xdafc>
   1fb8c:	sub	r2, r2, #48	; 0x30
   1fb90:	cmp	r2, #9
   1fb94:	add	r4, r4, #1
   1fb98:	bls	1fb80 <__assert_fail@plt+0xdafc>
   1fb9c:	cmp	ip, #9
   1fba0:	bhi	1fd44 <__assert_fail@plt+0xdcc0>
   1fba4:	mov	r0, #0
   1fba8:	ldrb	r2, [r1, #1]!
   1fbac:	cmp	r3, r2
   1fbb0:	beq	1fba8 <__assert_fail@plt+0xdb24>
   1fbb4:	sub	r2, r2, #48	; 0x30
   1fbb8:	cmp	r2, #9
   1fbbc:	add	r0, r0, #1
   1fbc0:	bls	1fba8 <__assert_fail@plt+0xdb24>
   1fbc4:	cmp	r0, r4
   1fbc8:	beq	1fc50 <__assert_fail@plt+0xdbcc>
   1fbcc:	bls	1f9a0 <__assert_fail@plt+0xd91c>
   1fbd0:	mvn	lr, #0
   1fbd4:	mov	r0, lr
   1fbd8:	pop	{r4, r5, pc}
   1fbdc:	cmp	r2, lr
   1fbe0:	beq	1fcc8 <__assert_fail@plt+0xdc44>
   1fbe4:	cmp	r2, r4
   1fbe8:	sub	ip, lr, #48	; 0x30
   1fbec:	beq	1fd30 <__assert_fail@plt+0xdcac>
   1fbf0:	cmp	ip, #9
   1fbf4:	sub	lr, r4, lr
   1fbf8:	sub	r4, r4, #48	; 0x30
   1fbfc:	bhi	1fde0 <__assert_fail@plt+0xdd5c>
   1fc00:	mov	ip, #0
   1fc04:	ldrb	r2, [r0, #1]!
   1fc08:	cmp	r3, r2
   1fc0c:	beq	1fc04 <__assert_fail@plt+0xdb80>
   1fc10:	sub	r2, r2, #48	; 0x30
   1fc14:	cmp	r2, #9
   1fc18:	add	ip, ip, #1
   1fc1c:	bls	1fc04 <__assert_fail@plt+0xdb80>
   1fc20:	cmp	r4, #9
   1fc24:	bhi	1fdf0 <__assert_fail@plt+0xdd6c>
   1fc28:	mov	r0, #0
   1fc2c:	ldrb	r2, [r1, #1]!
   1fc30:	cmp	r3, r2
   1fc34:	beq	1fc2c <__assert_fail@plt+0xdba8>
   1fc38:	sub	r2, r2, #48	; 0x30
   1fc3c:	cmp	r2, #9
   1fc40:	add	r0, r0, #1
   1fc44:	bls	1fc2c <__assert_fail@plt+0xdba8>
   1fc48:	cmp	r0, ip
   1fc4c:	bne	1fcc0 <__assert_fail@plt+0xdc3c>
   1fc50:	cmp	r0, #0
   1fc54:	moveq	lr, #0
   1fc58:	mov	r0, lr
   1fc5c:	pop	{r4, r5, pc}
   1fc60:	ldrb	lr, [r0, #1]!
   1fc64:	cmp	lr, #48	; 0x30
   1fc68:	bne	1fb24 <__assert_fail@plt+0xdaa0>
   1fc6c:	ldrb	lr, [r0, #1]!
   1fc70:	cmp	lr, #48	; 0x30
   1fc74:	beq	1fc60 <__assert_fail@plt+0xdbdc>
   1fc78:	b	1fb24 <__assert_fail@plt+0xdaa0>
   1fc7c:	sub	r4, ip, #48	; 0x30
   1fc80:	cmp	r4, #9
   1fc84:	bls	1fb60 <__assert_fail@plt+0xdadc>
   1fc88:	ldrb	r3, [r0]
   1fc8c:	uxtb	ip, r2
   1fc90:	ldrb	r2, [r1]
   1fc94:	cmp	r3, ip
   1fc98:	beq	1fd50 <__assert_fail@plt+0xdccc>
   1fc9c:	cmp	ip, r2
   1fca0:	beq	1fdb4 <__assert_fail@plt+0xdd30>
   1fca4:	mov	lr, #0
   1fca8:	b	1fa0c <__assert_fail@plt+0xd988>
   1fcac:	cmp	r4, #9
   1fcb0:	subls	lr, lr, r2
   1fcb4:	subls	ip, r2, #48	; 0x30
   1fcb8:	bls	1fb7c <__assert_fail@plt+0xdaf8>
   1fcbc:	b	1fc88 <__assert_fail@plt+0xdc04>
   1fcc0:	bhi	1f9a0 <__assert_fail@plt+0xd91c>
   1fcc4:	b	1fbd0 <__assert_fail@plt+0xdb4c>
   1fcc8:	sub	ip, r4, #48	; 0x30
   1fccc:	cmp	ip, #9
   1fcd0:	bls	1fbe4 <__assert_fail@plt+0xdb60>
   1fcd4:	ldrb	r3, [r1]
   1fcd8:	uxtb	ip, r2
   1fcdc:	ldrb	r2, [r0]
   1fce0:	cmp	r3, ip
   1fce4:	beq	1fe00 <__assert_fail@plt+0xdd7c>
   1fce8:	cmp	ip, r2
   1fcec:	addeq	r0, r0, #1
   1fcf0:	bne	1fca4 <__assert_fail@plt+0xdc20>
   1fcf4:	ldrb	r3, [r0]
   1fcf8:	cmp	r3, #48	; 0x30
   1fcfc:	bne	1fd0c <__assert_fail@plt+0xdc88>
   1fd00:	ldrb	r3, [r0, #1]!
   1fd04:	cmp	r3, #48	; 0x30
   1fd08:	beq	1fd00 <__assert_fail@plt+0xdc7c>
   1fd0c:	sub	lr, r3, #48	; 0x30
   1fd10:	cmp	lr, #9
   1fd14:	movhi	lr, #0
   1fd18:	mvnls	lr, #0
   1fd1c:	b	1fa0c <__assert_fail@plt+0xd988>
   1fd20:	cmp	ip, #9
   1fd24:	movls	r4, #0
   1fd28:	bls	1fba4 <__assert_fail@plt+0xdb20>
   1fd2c:	b	1fca4 <__assert_fail@plt+0xdc20>
   1fd30:	cmp	ip, #9
   1fd34:	subls	lr, r2, lr
   1fd38:	subls	r4, r2, #48	; 0x30
   1fd3c:	bls	1fc00 <__assert_fail@plt+0xdb7c>
   1fd40:	b	1fcd4 <__assert_fail@plt+0xdc50>
   1fd44:	adds	lr, r4, #0
   1fd48:	movne	lr, #1
   1fd4c:	b	1fa0c <__assert_fail@plt+0xd988>
   1fd50:	cmp	r3, r2
   1fd54:	ldrb	lr, [r0, #1]
   1fd58:	addeq	r3, r0, #1
   1fd5c:	beq	1fd84 <__assert_fail@plt+0xdd00>
   1fd60:	add	r0, r0, #1
   1fd64:	b	1fd6c <__assert_fail@plt+0xdce8>
   1fd68:	ldrb	lr, [r0, #1]!
   1fd6c:	cmp	lr, #48	; 0x30
   1fd70:	beq	1fd68 <__assert_fail@plt+0xdce4>
   1fd74:	b	1fb24 <__assert_fail@plt+0xdaa0>
   1fd78:	cmp	r2, #9
   1fd7c:	bhi	1fca4 <__assert_fail@plt+0xdc20>
   1fd80:	ldrb	lr, [r3, #1]!
   1fd84:	ldrb	ip, [r1, #1]!
   1fd88:	mov	r0, r3
   1fd8c:	sub	r2, lr, #48	; 0x30
   1fd90:	cmp	ip, lr
   1fd94:	beq	1fd78 <__assert_fail@plt+0xdcf4>
   1fd98:	cmp	r2, #9
   1fd9c:	sub	r3, ip, #48	; 0x30
   1fda0:	bhi	1fe6c <__assert_fail@plt+0xdde8>
   1fda4:	cmp	r3, #9
   1fda8:	bhi	1fd6c <__assert_fail@plt+0xdce8>
   1fdac:	sub	lr, lr, ip
   1fdb0:	b	1fa0c <__assert_fail@plt+0xd988>
   1fdb4:	add	r3, r1, #1
   1fdb8:	ldrb	ip, [r1, #1]
   1fdbc:	b	1fdc4 <__assert_fail@plt+0xdd40>
   1fdc0:	ldrb	ip, [r3, #1]!
   1fdc4:	cmp	ip, #48	; 0x30
   1fdc8:	beq	1fdc0 <__assert_fail@plt+0xdd3c>
   1fdcc:	sub	lr, ip, #48	; 0x30
   1fdd0:	cmp	lr, #9
   1fdd4:	movhi	lr, #0
   1fdd8:	mvnls	lr, #0
   1fddc:	b	1fa0c <__assert_fail@plt+0xd988>
   1fde0:	cmp	r4, #9
   1fde4:	movls	ip, #0
   1fde8:	bls	1fc28 <__assert_fail@plt+0xdba4>
   1fdec:	b	1fca4 <__assert_fail@plt+0xdc20>
   1fdf0:	adds	lr, ip, #0
   1fdf4:	movne	lr, #1
   1fdf8:	rsb	lr, lr, #0
   1fdfc:	b	1fa0c <__assert_fail@plt+0xd988>
   1fe00:	cmp	r3, r2
   1fe04:	addne	r1, r1, #1
   1fe08:	beq	1fe40 <__assert_fail@plt+0xddbc>
   1fe0c:	ldrb	r3, [r1]
   1fe10:	cmp	r3, #48	; 0x30
   1fe14:	bne	1fe24 <__assert_fail@plt+0xdda0>
   1fe18:	ldrb	r3, [r1, #1]!
   1fe1c:	cmp	r3, #48	; 0x30
   1fe20:	beq	1fe18 <__assert_fail@plt+0xdd94>
   1fe24:	sub	lr, r3, #48	; 0x30
   1fe28:	cmp	lr, #9
   1fe2c:	movhi	lr, #0
   1fe30:	movls	lr, #1
   1fe34:	b	1fa0c <__assert_fail@plt+0xd988>
   1fe38:	cmp	r3, #9
   1fe3c:	bhi	1fca4 <__assert_fail@plt+0xdc20>
   1fe40:	ldrb	lr, [r1, #1]!
   1fe44:	ldrb	ip, [r0, #1]!
   1fe48:	sub	r3, lr, #48	; 0x30
   1fe4c:	cmp	lr, ip
   1fe50:	beq	1fe38 <__assert_fail@plt+0xddb4>
   1fe54:	cmp	r3, #9
   1fe58:	sub	r3, ip, #48	; 0x30
   1fe5c:	bhi	1fe7c <__assert_fail@plt+0xddf8>
   1fe60:	cmp	r3, #9
   1fe64:	bhi	1fe0c <__assert_fail@plt+0xdd88>
   1fe68:	b	1fdac <__assert_fail@plt+0xdd28>
   1fe6c:	cmp	r3, #9
   1fe70:	movls	r3, r1
   1fe74:	bhi	1fca4 <__assert_fail@plt+0xdc20>
   1fe78:	b	1fdc4 <__assert_fail@plt+0xdd40>
   1fe7c:	cmp	r3, #9
   1fe80:	bhi	1fca4 <__assert_fail@plt+0xdc20>
   1fe84:	b	1fcf4 <__assert_fail@plt+0xdc70>
   1fe88:	cmp	r0, #2
   1fe8c:	push	{r4, r5, r6, r7, r8, lr}
   1fe90:	mov	r4, r0
   1fe94:	bls	1fea0 <__assert_fail@plt+0xde1c>
   1fe98:	mov	r0, r4
   1fe9c:	pop	{r4, r5, r6, r7, r8, pc}
   1fea0:	bl	22428 <_obstack_memory_used@@Base+0x408>
   1fea4:	mov	r7, r0
   1fea8:	bl	11ea4 <__errno_location@plt>
   1feac:	mov	r5, r0
   1feb0:	mov	r0, r4
   1feb4:	ldr	r6, [r5]
   1feb8:	mov	r4, r7
   1febc:	bl	1206c <close@plt>
   1fec0:	str	r6, [r5]
   1fec4:	mov	r0, r4
   1fec8:	pop	{r4, r5, r6, r7, r8, pc}
   1fecc:	push	{r4, r5, r6, lr}
   1fed0:	sub	sp, sp, #32
   1fed4:	cmp	r1, #0
   1fed8:	mov	r5, r0
   1fedc:	ldr	r4, [sp, #48]	; 0x30
   1fee0:	ldr	r6, [sp, #52]	; 0x34
   1fee4:	beq	1ff74 <__assert_fail@plt+0xdef0>
   1fee8:	strd	r2, [sp]
   1feec:	mov	r3, r1
   1fef0:	ldr	r2, [pc, #828]	; 20234 <__assert_fail@plt+0xe1b0>
   1fef4:	mov	r1, #1
   1fef8:	bl	11f10 <__fprintf_chk@plt>
   1fefc:	mov	r2, #5
   1ff00:	ldr	r1, [pc, #816]	; 20238 <__assert_fail@plt+0xe1b4>
   1ff04:	mov	r0, #0
   1ff08:	bl	11c70 <dcgettext@plt>
   1ff0c:	ldr	r3, [pc, #808]	; 2023c <__assert_fail@plt+0xe1b8>
   1ff10:	ldr	r2, [pc, #808]	; 20240 <__assert_fail@plt+0xe1bc>
   1ff14:	str	r3, [sp]
   1ff18:	mov	r1, #1
   1ff1c:	mov	r3, r0
   1ff20:	mov	r0, r5
   1ff24:	bl	11f10 <__fprintf_chk@plt>
   1ff28:	ldr	r1, [pc, #788]	; 20244 <__assert_fail@plt+0xe1c0>
   1ff2c:	mov	r2, #5
   1ff30:	mov	r0, #0
   1ff34:	bl	11c70 <dcgettext@plt>
   1ff38:	mov	r1, r5
   1ff3c:	bl	11b38 <fputs_unlocked@plt>
   1ff40:	cmp	r6, #9
   1ff44:	ldrls	pc, [pc, r6, lsl #2]
   1ff48:	b	20224 <__assert_fail@plt+0xe1a0>
   1ff4c:	andeq	r0, r2, r0, lsr r2
   1ff50:	strdeq	pc, [r1], -r8
   1ff54:	andeq	r0, r2, r4, lsr #32
   1ff58:	andeq	r0, r2, r8, asr r0
   1ff5c:	muleq	r2, r4, r0
   1ff60:	ldrdeq	r0, [r2], -r4
   1ff64:	andeq	r0, r2, ip, lsl r1
   1ff68:	andeq	r0, r2, ip, ror #2
   1ff6c:	andeq	r0, r2, r4, asr #3
   1ff70:	andeq	pc, r1, ip, lsl #31
   1ff74:	str	r3, [sp]
   1ff78:	mov	r1, #1
   1ff7c:	mov	r3, r2
   1ff80:	ldr	r2, [pc, #704]	; 20248 <__assert_fail@plt+0xe1c4>
   1ff84:	bl	11f10 <__fprintf_chk@plt>
   1ff88:	b	1fefc <__assert_fail@plt+0xde78>
   1ff8c:	ldr	r1, [pc, #696]	; 2024c <__assert_fail@plt+0xe1c8>
   1ff90:	mov	r2, #5
   1ff94:	mov	r0, #0
   1ff98:	bl	11c70 <dcgettext@plt>
   1ff9c:	ldr	r2, [r4, #32]
   1ffa0:	ldr	r3, [r4, #28]
   1ffa4:	ldr	r1, [r4, #24]
   1ffa8:	str	r2, [sp, #28]
   1ffac:	ldr	r2, [r4, #20]
   1ffb0:	str	r3, [sp, #24]
   1ffb4:	ldr	r3, [r4, #16]
   1ffb8:	str	r1, [sp, #20]
   1ffbc:	ldr	r1, [r4, #12]
   1ffc0:	str	r2, [sp, #16]
   1ffc4:	ldr	r2, [r4, #8]
   1ffc8:	str	r3, [sp, #12]
   1ffcc:	ldr	r3, [r4, #4]
   1ffd0:	str	r1, [sp, #8]
   1ffd4:	str	r2, [sp, #4]
   1ffd8:	str	r3, [sp]
   1ffdc:	mov	r1, #1
   1ffe0:	ldr	r3, [r4]
   1ffe4:	mov	r2, r0
   1ffe8:	mov	r0, r5
   1ffec:	bl	11f10 <__fprintf_chk@plt>
   1fff0:	add	sp, sp, #32
   1fff4:	pop	{r4, r5, r6, pc}
   1fff8:	mov	r2, #5
   1fffc:	ldr	r1, [pc, #588]	; 20250 <__assert_fail@plt+0xe1cc>
   20000:	mov	r0, #0
   20004:	bl	11c70 <dcgettext@plt>
   20008:	ldr	r3, [r4]
   2000c:	mov	r1, #1
   20010:	mov	r2, r0
   20014:	mov	r0, r5
   20018:	add	sp, sp, #32
   2001c:	pop	{r4, r5, r6, lr}
   20020:	b	11f10 <__fprintf_chk@plt>
   20024:	mov	r2, #5
   20028:	ldr	r1, [pc, #548]	; 20254 <__assert_fail@plt+0xe1d0>
   2002c:	mov	r0, #0
   20030:	bl	11c70 <dcgettext@plt>
   20034:	ldr	r2, [r4, #4]
   20038:	ldr	r3, [r4]
   2003c:	mov	r1, #1
   20040:	str	r2, [sp, #48]	; 0x30
   20044:	mov	r2, r0
   20048:	mov	r0, r5
   2004c:	add	sp, sp, #32
   20050:	pop	{r4, r5, r6, lr}
   20054:	b	11f10 <__fprintf_chk@plt>
   20058:	mov	r2, #5
   2005c:	ldr	r1, [pc, #500]	; 20258 <__assert_fail@plt+0xe1d4>
   20060:	mov	r0, #0
   20064:	bl	11c70 <dcgettext@plt>
   20068:	ldr	r2, [r4, #8]
   2006c:	ldr	r3, [r4, #4]
   20070:	mov	r1, #1
   20074:	str	r2, [sp, #52]	; 0x34
   20078:	str	r3, [sp, #48]	; 0x30
   2007c:	ldr	r3, [r4]
   20080:	mov	r2, r0
   20084:	mov	r0, r5
   20088:	add	sp, sp, #32
   2008c:	pop	{r4, r5, r6, lr}
   20090:	b	11f10 <__fprintf_chk@plt>
   20094:	mov	r2, #5
   20098:	ldr	r1, [pc, #444]	; 2025c <__assert_fail@plt+0xe1d8>
   2009c:	mov	r0, #0
   200a0:	bl	11c70 <dcgettext@plt>
   200a4:	ldr	r1, [r4, #12]
   200a8:	ldr	r2, [r4, #8]
   200ac:	ldr	r3, [r4, #4]
   200b0:	str	r1, [sp, #8]
   200b4:	str	r2, [sp, #4]
   200b8:	str	r3, [sp]
   200bc:	mov	r1, #1
   200c0:	ldr	r3, [r4]
   200c4:	mov	r2, r0
   200c8:	mov	r0, r5
   200cc:	bl	11f10 <__fprintf_chk@plt>
   200d0:	b	1fff0 <__assert_fail@plt+0xdf6c>
   200d4:	mov	r2, #5
   200d8:	ldr	r1, [pc, #384]	; 20260 <__assert_fail@plt+0xe1dc>
   200dc:	mov	r0, #0
   200e0:	bl	11c70 <dcgettext@plt>
   200e4:	ldr	r3, [r4, #16]
   200e8:	ldr	r1, [r4, #12]
   200ec:	ldr	r2, [r4, #8]
   200f0:	str	r3, [sp, #12]
   200f4:	ldr	r3, [r4, #4]
   200f8:	str	r1, [sp, #8]
   200fc:	str	r2, [sp, #4]
   20100:	str	r3, [sp]
   20104:	mov	r1, #1
   20108:	ldr	r3, [r4]
   2010c:	mov	r2, r0
   20110:	mov	r0, r5
   20114:	bl	11f10 <__fprintf_chk@plt>
   20118:	b	1fff0 <__assert_fail@plt+0xdf6c>
   2011c:	mov	r2, #5
   20120:	ldr	r1, [pc, #316]	; 20264 <__assert_fail@plt+0xe1e0>
   20124:	mov	r0, #0
   20128:	bl	11c70 <dcgettext@plt>
   2012c:	ldr	r2, [r4, #20]
   20130:	ldr	r3, [r4, #16]
   20134:	ldr	r1, [r4, #12]
   20138:	str	r2, [sp, #16]
   2013c:	ldr	r2, [r4, #8]
   20140:	str	r3, [sp, #12]
   20144:	ldr	r3, [r4, #4]
   20148:	str	r1, [sp, #8]
   2014c:	str	r2, [sp, #4]
   20150:	str	r3, [sp]
   20154:	mov	r1, #1
   20158:	ldr	r3, [r4]
   2015c:	mov	r2, r0
   20160:	mov	r0, r5
   20164:	bl	11f10 <__fprintf_chk@plt>
   20168:	b	1fff0 <__assert_fail@plt+0xdf6c>
   2016c:	mov	r2, #5
   20170:	ldr	r1, [pc, #240]	; 20268 <__assert_fail@plt+0xe1e4>
   20174:	mov	r0, #0
   20178:	bl	11c70 <dcgettext@plt>
   2017c:	ldr	r1, [r4, #24]
   20180:	ldr	r2, [r4, #20]
   20184:	ldr	r3, [r4, #16]
   20188:	str	r1, [sp, #20]
   2018c:	ldr	r1, [r4, #12]
   20190:	str	r2, [sp, #16]
   20194:	ldr	r2, [r4, #8]
   20198:	str	r3, [sp, #12]
   2019c:	ldr	r3, [r4, #4]
   201a0:	str	r1, [sp, #8]
   201a4:	str	r2, [sp, #4]
   201a8:	str	r3, [sp]
   201ac:	mov	r1, #1
   201b0:	ldr	r3, [r4]
   201b4:	mov	r2, r0
   201b8:	mov	r0, r5
   201bc:	bl	11f10 <__fprintf_chk@plt>
   201c0:	b	1fff0 <__assert_fail@plt+0xdf6c>
   201c4:	mov	r2, #5
   201c8:	ldr	r1, [pc, #156]	; 2026c <__assert_fail@plt+0xe1e8>
   201cc:	mov	r0, #0
   201d0:	bl	11c70 <dcgettext@plt>
   201d4:	ldr	r3, [r4, #28]
   201d8:	ldr	r1, [r4, #24]
   201dc:	ldr	r2, [r4, #20]
   201e0:	str	r3, [sp, #24]
   201e4:	ldr	r3, [r4, #16]
   201e8:	str	r1, [sp, #20]
   201ec:	ldr	r1, [r4, #12]
   201f0:	str	r2, [sp, #16]
   201f4:	ldr	r2, [r4, #8]
   201f8:	str	r3, [sp, #12]
   201fc:	ldr	r3, [r4, #4]
   20200:	str	r1, [sp, #8]
   20204:	str	r2, [sp, #4]
   20208:	str	r3, [sp]
   2020c:	mov	r1, #1
   20210:	ldr	r3, [r4]
   20214:	mov	r2, r0
   20218:	mov	r0, r5
   2021c:	bl	11f10 <__fprintf_chk@plt>
   20220:	b	1fff0 <__assert_fail@plt+0xdf6c>
   20224:	mov	r2, #5
   20228:	ldr	r1, [pc, #64]	; 20270 <__assert_fail@plt+0xe1ec>
   2022c:	b	1ff94 <__assert_fail@plt+0xdf10>
   20230:	bl	12060 <abort@plt>
   20234:	andeq	r4, r2, r4, asr #27
   20238:	ldrdeq	r4, [r2], -r8
   2023c:	andeq	r0, r0, r2, ror #15
   20240:	andeq	r5, r2, ip, lsr #1
   20244:	ldrdeq	r4, [r2], -ip
   20248:	ldrdeq	r4, [r2], -r0
   2024c:			; <UNDEFINED> instruction: 0x00024fb4
   20250:	andeq	r4, r2, r8, lsr #29
   20254:			; <UNDEFINED> instruction: 0x00024eb8
   20258:	ldrdeq	r4, [r2], -r0
   2025c:	andeq	r4, r2, ip, ror #29
   20260:	andeq	r4, r2, ip, lsl #30
   20264:	andeq	r4, r2, r0, lsr pc
   20268:	andeq	r4, r2, r8, asr pc
   2026c:	andeq	r4, r2, r4, lsl #31
   20270:	andeq	r4, r2, r8, ror #31
   20274:	push	{r4, r5, lr}
   20278:	sub	sp, sp, #12
   2027c:	ldr	r5, [sp, #24]
   20280:	ldr	ip, [r5]
   20284:	cmp	ip, #0
   20288:	beq	202a4 <__assert_fail@plt+0xe220>
   2028c:	mov	lr, r5
   20290:	mov	ip, #0
   20294:	ldr	r4, [lr, #4]!
   20298:	add	ip, ip, #1
   2029c:	cmp	r4, #0
   202a0:	bne	20294 <__assert_fail@plt+0xe210>
   202a4:	stm	sp, {r5, ip}
   202a8:	bl	1fecc <__assert_fail@plt+0xde48>
   202ac:	add	sp, sp, #12
   202b0:	pop	{r4, r5, pc}
   202b4:	push	{r4, r5, r6, lr}
   202b8:	sub	sp, sp, #56	; 0x38
   202bc:	ldr	r6, [pc, #88]	; 2031c <__assert_fail@plt+0xe298>
   202c0:	ldr	r5, [sp, #72]	; 0x48
   202c4:	add	r4, sp, #8
   202c8:	ldr	ip, [r6]
   202cc:	str	ip, [sp, #52]	; 0x34
   202d0:	mov	ip, #0
   202d4:	ldr	lr, [r5], #4
   202d8:	cmp	lr, #0
   202dc:	str	lr, [r4, #4]!
   202e0:	beq	202f0 <__assert_fail@plt+0xe26c>
   202e4:	add	ip, ip, #1
   202e8:	cmp	ip, #10
   202ec:	bne	202d4 <__assert_fail@plt+0xe250>
   202f0:	add	lr, sp, #12
   202f4:	str	ip, [sp, #4]
   202f8:	str	lr, [sp]
   202fc:	bl	1fecc <__assert_fail@plt+0xde48>
   20300:	ldr	r2, [sp, #52]	; 0x34
   20304:	ldr	r3, [r6]
   20308:	cmp	r2, r3
   2030c:	bne	20318 <__assert_fail@plt+0xe294>
   20310:	add	sp, sp, #56	; 0x38
   20314:	pop	{r4, r5, r6, pc}
   20318:	bl	11c7c <__stack_chk_fail@plt>
   2031c:	andeq	r5, r3, r0, lsl #30
   20320:	push	{r3}		; (str r3, [sp, #-4]!)
   20324:	mov	ip, #0
   20328:	push	{r4, r5, r6, lr}
   2032c:	sub	sp, sp, #60	; 0x3c
   20330:	ldr	r6, [pc, #100]	; 2039c <__assert_fail@plt+0xe318>
   20334:	add	r5, sp, #8
   20338:	add	r4, sp, #80	; 0x50
   2033c:	ldr	r3, [r6]
   20340:	str	r4, [sp, #8]
   20344:	str	r3, [sp, #52]	; 0x34
   20348:	ldr	r3, [sp, #76]	; 0x4c
   2034c:	ldr	lr, [r4], #4
   20350:	cmp	lr, #0
   20354:	str	lr, [r5, #4]!
   20358:	beq	20368 <__assert_fail@plt+0xe2e4>
   2035c:	add	ip, ip, #1
   20360:	cmp	ip, #10
   20364:	bne	2034c <__assert_fail@plt+0xe2c8>
   20368:	add	lr, sp, #12
   2036c:	str	ip, [sp, #4]
   20370:	str	lr, [sp]
   20374:	bl	1fecc <__assert_fail@plt+0xde48>
   20378:	ldr	r2, [sp, #52]	; 0x34
   2037c:	ldr	r3, [r6]
   20380:	cmp	r2, r3
   20384:	bne	20398 <__assert_fail@plt+0xe314>
   20388:	add	sp, sp, #60	; 0x3c
   2038c:	pop	{r4, r5, r6, lr}
   20390:	add	sp, sp, #4
   20394:	bx	lr
   20398:	bl	11c7c <__stack_chk_fail@plt>
   2039c:	andeq	r5, r3, r0, lsl #30
   203a0:	push	{r4, lr}
   203a4:	mov	r2, #5
   203a8:	ldr	r1, [pc, #88]	; 20408 <__assert_fail@plt+0xe384>
   203ac:	mov	r0, #0
   203b0:	bl	11c70 <dcgettext@plt>
   203b4:	ldr	r2, [pc, #80]	; 2040c <__assert_fail@plt+0xe388>
   203b8:	mov	r1, r0
   203bc:	mov	r0, #1
   203c0:	bl	11eec <__printf_chk@plt>
   203c4:	mov	r2, #5
   203c8:	ldr	r1, [pc, #64]	; 20410 <__assert_fail@plt+0xe38c>
   203cc:	mov	r0, #0
   203d0:	bl	11c70 <dcgettext@plt>
   203d4:	ldr	r3, [pc, #56]	; 20414 <__assert_fail@plt+0xe390>
   203d8:	ldr	r2, [pc, #56]	; 20418 <__assert_fail@plt+0xe394>
   203dc:	mov	r1, r0
   203e0:	mov	r0, #1
   203e4:	bl	11eec <__printf_chk@plt>
   203e8:	ldr	r1, [pc, #44]	; 2041c <__assert_fail@plt+0xe398>
   203ec:	mov	r2, #5
   203f0:	mov	r0, #0
   203f4:	bl	11c70 <dcgettext@plt>
   203f8:	ldr	r3, [pc, #32]	; 20420 <__assert_fail@plt+0xe39c>
   203fc:	pop	{r4, lr}
   20400:	ldr	r1, [r3]
   20404:	b	11b38 <fputs_unlocked@plt>
   20408:	andeq	r5, r2, r4, lsr #32
   2040c:	andeq	r5, r2, ip, lsr r0
   20410:	andeq	r5, r2, r4, asr r0
   20414:	andeq	r4, r2, r4, ror #4
   20418:	andeq	r4, r2, ip, lsl #5
   2041c:	andeq	r5, r2, r8, rrx
   20420:	ldrdeq	r6, [r3], -ip
   20424:	push	{r4, lr}
   20428:	mov	r4, r0
   2042c:	bl	11dfc <malloc@plt>
   20430:	adds	r4, r4, #0
   20434:	movne	r4, #1
   20438:	cmp	r0, #0
   2043c:	movne	r4, #0
   20440:	cmp	r4, #0
   20444:	popeq	{r4, pc}
   20448:	bl	2066c <__assert_fail@plt+0xe5e8>
   2044c:	push	{r4, r5, r6, lr}
   20450:	umull	r4, r5, r0, r1
   20454:	adds	r3, r5, #0
   20458:	movne	r3, #1
   2045c:	cmp	r4, #0
   20460:	blt	20478 <__assert_fail@plt+0xe3f4>
   20464:	cmp	r3, #0
   20468:	bne	20478 <__assert_fail@plt+0xe3f4>
   2046c:	mul	r0, r1, r0
   20470:	pop	{r4, r5, r6, lr}
   20474:	b	20424 <__assert_fail@plt+0xe3a0>
   20478:	bl	2066c <__assert_fail@plt+0xe5e8>
   2047c:	b	20424 <__assert_fail@plt+0xe3a0>
   20480:	adds	r3, r0, #0
   20484:	movne	r3, #1
   20488:	cmp	r1, #0
   2048c:	movne	r3, #0
   20490:	cmp	r3, #0
   20494:	push	{r4, lr}
   20498:	bne	204c0 <__assert_fail@plt+0xe43c>
   2049c:	mov	r4, r1
   204a0:	bl	11cc4 <realloc@plt>
   204a4:	adds	r4, r4, #0
   204a8:	movne	r4, #1
   204ac:	cmp	r0, #0
   204b0:	movne	r4, #0
   204b4:	cmp	r4, #0
   204b8:	popeq	{r4, pc}
   204bc:	bl	2066c <__assert_fail@plt+0xe5e8>
   204c0:	bl	11bb0 <free@plt>
   204c4:	mov	r0, #0
   204c8:	pop	{r4, pc}
   204cc:	push	{r4, r5, r6, lr}
   204d0:	umull	r4, r5, r1, r2
   204d4:	adds	r3, r5, #0
   204d8:	movne	r3, #1
   204dc:	cmp	r4, #0
   204e0:	blt	204f8 <__assert_fail@plt+0xe474>
   204e4:	cmp	r3, #0
   204e8:	bne	204f8 <__assert_fail@plt+0xe474>
   204ec:	mul	r1, r2, r1
   204f0:	pop	{r4, r5, r6, lr}
   204f4:	b	20480 <__assert_fail@plt+0xe3fc>
   204f8:	bl	2066c <__assert_fail@plt+0xe5e8>
   204fc:	push	{r4, r5, r6, r7, r8, lr}
   20500:	subs	r7, r0, #0
   20504:	mov	r6, r1
   20508:	mov	r5, r2
   2050c:	ldr	r4, [r1]
   20510:	beq	20544 <__assert_fail@plt+0xe4c0>
   20514:	mov	r1, r2
   20518:	ldr	r0, [pc, #104]	; 20588 <__assert_fail@plt+0xe504>
   2051c:	bl	22434 <_obstack_memory_used@@Base+0x414>
   20520:	cmp	r0, r4
   20524:	bls	20568 <__assert_fail@plt+0xe4e4>
   20528:	add	r3, r4, #1
   2052c:	add	r4, r3, r4, lsr #1
   20530:	str	r4, [r6]
   20534:	mul	r1, r5, r4
   20538:	mov	r0, r7
   2053c:	pop	{r4, r5, r6, r7, r8, lr}
   20540:	b	20480 <__assert_fail@plt+0xe3fc>
   20544:	cmp	r4, #0
   20548:	beq	2056c <__assert_fail@plt+0xe4e8>
   2054c:	umull	r0, r1, r4, r5
   20550:	adds	r3, r1, #0
   20554:	movne	r3, #1
   20558:	cmp	r0, #0
   2055c:	blt	20568 <__assert_fail@plt+0xe4e4>
   20560:	cmp	r3, #0
   20564:	beq	20530 <__assert_fail@plt+0xe4ac>
   20568:	bl	2066c <__assert_fail@plt+0xe5e8>
   2056c:	mov	r1, r2
   20570:	mov	r0, #64	; 0x40
   20574:	bl	22434 <_obstack_memory_used@@Base+0x414>
   20578:	cmp	r5, #64	; 0x40
   2057c:	movls	r4, r0
   20580:	addhi	r4, r0, #1
   20584:	b	2054c <__assert_fail@plt+0xe4c8>
   20588:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   2058c:	cmp	r0, #0
   20590:	ldr	r3, [r1]
   20594:	beq	205b8 <__assert_fail@plt+0xe534>
   20598:	ldr	r2, [pc, #60]	; 205dc <__assert_fail@plt+0xe558>
   2059c:	cmp	r3, r2
   205a0:	bhi	205d4 <__assert_fail@plt+0xe550>
   205a4:	add	r2, r3, #1
   205a8:	add	r3, r2, r3, lsr #1
   205ac:	str	r3, [r1]
   205b0:	mov	r1, r3
   205b4:	b	20480 <__assert_fail@plt+0xe3fc>
   205b8:	cmp	r3, #0
   205bc:	bne	205d0 <__assert_fail@plt+0xe54c>
   205c0:	mov	r3, #64	; 0x40
   205c4:	str	r3, [r1]
   205c8:	mov	r1, r3
   205cc:	b	20480 <__assert_fail@plt+0xe3fc>
   205d0:	bge	205ac <__assert_fail@plt+0xe528>
   205d4:	push	{r4, lr}
   205d8:	bl	2066c <__assert_fail@plt+0xe5e8>
   205dc:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   205e0:	push	{r4, lr}
   205e4:	mov	r4, r0
   205e8:	bl	20424 <__assert_fail@plt+0xe3a0>
   205ec:	mov	r2, r4
   205f0:	mov	r1, #0
   205f4:	pop	{r4, lr}
   205f8:	b	11ed4 <memset@plt>
   205fc:	push	{r4, r5, r6, lr}
   20600:	umull	r4, r5, r0, r1
   20604:	adds	r3, r5, #0
   20608:	movne	r3, #1
   2060c:	cmp	r4, #0
   20610:	blt	20628 <__assert_fail@plt+0xe5a4>
   20614:	cmp	r3, #0
   20618:	bne	20628 <__assert_fail@plt+0xe5a4>
   2061c:	bl	11b2c <calloc@plt>
   20620:	cmp	r0, #0
   20624:	popne	{r4, r5, r6, pc}
   20628:	bl	2066c <__assert_fail@plt+0xe5e8>
   2062c:	push	{r4, r5, r6, lr}
   20630:	mov	r4, r1
   20634:	mov	r5, r0
   20638:	mov	r0, r1
   2063c:	bl	20424 <__assert_fail@plt+0xe3a0>
   20640:	mov	r2, r4
   20644:	mov	r1, r5
   20648:	pop	{r4, r5, r6, lr}
   2064c:	b	11bec <memcpy@plt>
   20650:	push	{r4, lr}
   20654:	mov	r4, r0
   20658:	bl	11e80 <strlen@plt>
   2065c:	add	r1, r0, #1
   20660:	mov	r0, r4
   20664:	pop	{r4, lr}
   20668:	b	2062c <__assert_fail@plt+0xe5a8>
   2066c:	ldr	r3, [pc, #44]	; 206a0 <__assert_fail@plt+0xe61c>
   20670:	push	{r4, lr}
   20674:	mov	r2, #5
   20678:	ldr	r1, [pc, #36]	; 206a4 <__assert_fail@plt+0xe620>
   2067c:	mov	r0, #0
   20680:	ldr	r4, [r3]
   20684:	bl	11c70 <dcgettext@plt>
   20688:	ldr	r2, [pc, #24]	; 206a8 <__assert_fail@plt+0xe624>
   2068c:	mov	r1, #0
   20690:	mov	r3, r0
   20694:	mov	r0, r4
   20698:	bl	11db4 <error@plt>
   2069c:	bl	12060 <abort@plt>
   206a0:	andeq	r6, r3, r8, ror r2
   206a4:	ldrdeq	r5, [r2], -ip
   206a8:	andeq	r3, r2, r0, lsr #2
   206ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   206b0:	mov	r4, r0
   206b4:	mov	r6, r1
   206b8:	mov	r9, r2
   206bc:	ldr	r1, [pc, #164]	; 20768 <__assert_fail@plt+0xe6e4>
   206c0:	mov	r2, #5
   206c4:	mov	r0, #0
   206c8:	mov	r7, r3
   206cc:	ldr	r8, [sp, #32]
   206d0:	bl	11c70 <dcgettext@plt>
   206d4:	mov	r1, r4
   206d8:	mov	r2, r0
   206dc:	mov	r0, #0
   206e0:	bl	11db4 <error@plt>
   206e4:	mov	r2, #5
   206e8:	ldr	r1, [pc, #124]	; 2076c <__assert_fail@plt+0xe6e8>
   206ec:	mov	r0, #0
   206f0:	bl	11c70 <dcgettext@plt>
   206f4:	mov	r1, #0
   206f8:	mov	r2, r0
   206fc:	mov	r0, r1
   20700:	bl	11db4 <error@plt>
   20704:	ldr	r3, [pc, #100]	; 20770 <__assert_fail@plt+0xe6ec>
   20708:	mov	r2, #5
   2070c:	ldr	r1, [pc, #96]	; 20774 <__assert_fail@plt+0xe6f0>
   20710:	mov	r0, #0
   20714:	ldr	r4, [r3]
   20718:	bl	11c70 <dcgettext@plt>
   2071c:	mov	r3, r9
   20720:	mov	r2, r6
   20724:	mov	r1, #8
   20728:	mov	r5, r0
   2072c:	mov	r0, #0
   20730:	bl	1eaa4 <__assert_fail@plt+0xca20>
   20734:	mov	r3, r8
   20738:	mov	r2, r7
   2073c:	mov	r1, #8
   20740:	mov	r6, r0
   20744:	mov	r0, #1
   20748:	bl	1eaa4 <__assert_fail@plt+0xca20>
   2074c:	mov	r3, r6
   20750:	mov	r2, r5
   20754:	mov	r1, #0
   20758:	str	r0, [sp, #32]
   2075c:	mov	r0, r4
   20760:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   20764:	b	11db4 <error@plt>
   20768:	strdeq	r5, [r2], -r0
   2076c:	andeq	r5, r2, ip, lsl #2
   20770:	andeq	r6, r3, r8, ror r2
   20774:	andeq	r5, r2, r8, lsr r1
   20778:	push	{r4, r5, r6, r7, r8, lr}
   2077c:	sub	sp, sp, #8
   20780:	mov	r6, r1
   20784:	mov	r7, r2
   20788:	mov	r8, r3
   2078c:	mov	r5, r0
   20790:	bl	22354 <_obstack_memory_used@@Base+0x334>
   20794:	mov	r4, r0
   20798:	bl	11ea4 <__errno_location@plt>
   2079c:	ldr	r0, [r0]
   207a0:	cmp	r0, #0
   207a4:	bne	207b4 <__assert_fail@plt+0xe730>
   207a8:	mov	r0, r4
   207ac:	add	sp, sp, #8
   207b0:	pop	{r4, r5, r6, r7, r8, pc}
   207b4:	str	r8, [sp]
   207b8:	mov	r3, r7
   207bc:	mov	r2, r6
   207c0:	mov	r1, r5
   207c4:	bl	206ac <__assert_fail@plt+0xe628>
   207c8:	mov	r0, r4
   207cc:	add	sp, sp, #8
   207d0:	pop	{r4, r5, r6, r7, r8, pc}
   207d4:	push	{r4, r5, r6, r7, r8, lr}
   207d8:	sub	sp, sp, #8
   207dc:	mov	r7, r1
   207e0:	mov	r8, r2
   207e4:	mov	r5, r3
   207e8:	mov	r6, r0
   207ec:	bl	223d0 <_obstack_memory_used@@Base+0x3b0>
   207f0:	mov	r4, r0
   207f4:	bl	11ea4 <__errno_location@plt>
   207f8:	ldr	r0, [r0]
   207fc:	cmp	r0, #0
   20800:	bne	20810 <__assert_fail@plt+0xe78c>
   20804:	mov	r0, r4
   20808:	add	sp, sp, #8
   2080c:	pop	{r4, r5, r6, r7, r8, pc}
   20810:	sub	r5, r5, #1
   20814:	str	r5, [sp]
   20818:	mov	r3, r8
   2081c:	sub	r2, r7, #1
   20820:	mov	r1, r6
   20824:	bl	206ac <__assert_fail@plt+0xe628>
   20828:	mov	r0, r4
   2082c:	add	sp, sp, #8
   20830:	pop	{r4, r5, r6, r7, r8, pc}
   20834:	push	{r4, r5, r6, lr}
   20838:	sub	sp, sp, #16
   2083c:	ldr	r6, [pc, #100]	; 208a8 <__assert_fail@plt+0xe824>
   20840:	add	r0, sp, #4
   20844:	mov	r5, #0
   20848:	ldr	r3, [r6]
   2084c:	str	r3, [sp, #12]
   20850:	bl	220c8 <_obstack_memory_used@@Base+0xa8>
   20854:	bl	11ea4 <__errno_location@plt>
   20858:	mov	r4, r0
   2085c:	b	2086c <__assert_fail@plt+0xe7e8>
   20860:	ldr	r3, [r4]
   20864:	bics	r3, r3, #4
   20868:	bne	2089c <__assert_fail@plt+0xe818>
   2086c:	str	r5, [r4]
   20870:	mov	r1, #0
   20874:	add	r0, sp, #4
   20878:	bl	11bc8 <nanosleep@plt>
   2087c:	cmp	r0, #0
   20880:	bne	20860 <__assert_fail@plt+0xe7dc>
   20884:	ldr	r2, [sp, #12]
   20888:	ldr	r3, [r6]
   2088c:	cmp	r2, r3
   20890:	bne	208a4 <__assert_fail@plt+0xe820>
   20894:	add	sp, sp, #16
   20898:	pop	{r4, r5, r6, pc}
   2089c:	mvn	r0, #0
   208a0:	b	20884 <__assert_fail@plt+0xe800>
   208a4:	bl	11c7c <__stack_chk_fail@plt>
   208a8:	andeq	r5, r3, r0, lsl #30
   208ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208b0:	cmp	r2, #36	; 0x24
   208b4:	ldr	r7, [pc, #1580]	; 20ee8 <__assert_fail@plt+0xee64>
   208b8:	sub	sp, sp, #20
   208bc:	mov	fp, r2
   208c0:	ldr	r2, [r7]
   208c4:	ldr	r9, [sp, #56]	; 0x38
   208c8:	str	r2, [sp, #12]
   208cc:	bhi	20ed0 <__assert_fail@plt+0xee4c>
   208d0:	cmp	r1, #0
   208d4:	mov	r6, r1
   208d8:	mov	r5, r0
   208dc:	mov	sl, r3
   208e0:	addeq	r6, sp, #8
   208e4:	bl	11ea4 <__errno_location@plt>
   208e8:	mov	r3, #0
   208ec:	str	r3, [r0]
   208f0:	mov	r8, r0
   208f4:	bl	11e50 <__ctype_b_loc@plt>
   208f8:	ldrb	r3, [r5]
   208fc:	mov	r1, r5
   20900:	ldr	ip, [r0]
   20904:	b	2090c <__assert_fail@plt+0xe888>
   20908:	ldrb	r3, [r1, #1]!
   2090c:	lsl	r2, r3, #1
   20910:	ldrh	r0, [ip, r2]
   20914:	ands	r4, r0, #8192	; 0x2000
   20918:	bne	20908 <__assert_fail@plt+0xe884>
   2091c:	cmp	r3, #45	; 0x2d
   20920:	beq	209ac <__assert_fail@plt+0xe928>
   20924:	mov	r2, fp
   20928:	mov	r1, r6
   2092c:	mov	r0, r5
   20930:	bl	11e74 <strtoul@plt>
   20934:	ldr	r3, [r6]
   20938:	cmp	r3, r5
   2093c:	mov	fp, r0
   20940:	beq	20994 <__assert_fail@plt+0xe910>
   20944:	ldr	r4, [r8]
   20948:	cmp	r4, #0
   2094c:	bne	20984 <__assert_fail@plt+0xe900>
   20950:	cmp	r9, #0
   20954:	beq	20964 <__assert_fail@plt+0xe8e0>
   20958:	ldrb	r5, [r3]
   2095c:	cmp	r5, #0
   20960:	bne	20d1c <__assert_fail@plt+0xec98>
   20964:	str	fp, [sl]
   20968:	ldr	r2, [sp, #12]
   2096c:	ldr	r3, [r7]
   20970:	mov	r0, r4
   20974:	cmp	r2, r3
   20978:	bne	20ee4 <__assert_fail@plt+0xee60>
   2097c:	add	sp, sp, #20
   20980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20984:	cmp	r4, #34	; 0x22
   20988:	bne	209ac <__assert_fail@plt+0xe928>
   2098c:	mov	r4, #1
   20990:	b	20950 <__assert_fail@plt+0xe8cc>
   20994:	cmp	r9, #0
   20998:	str	r3, [sp, #4]
   2099c:	beq	209ac <__assert_fail@plt+0xe928>
   209a0:	ldrb	r5, [r5]
   209a4:	cmp	r5, #0
   209a8:	bne	209b4 <__assert_fail@plt+0xe930>
   209ac:	mov	r4, #4
   209b0:	b	20968 <__assert_fail@plt+0xe8e4>
   209b4:	mov	r1, r5
   209b8:	mov	r0, r9
   209bc:	bl	11e8c <strchr@plt>
   209c0:	ldr	r3, [sp, #4]
   209c4:	cmp	r0, #0
   209c8:	movne	fp, #1
   209cc:	beq	209ac <__assert_fail@plt+0xe928>
   209d0:	sub	r8, r5, #69	; 0x45
   209d4:	cmp	r8, #47	; 0x2f
   209d8:	ldrls	pc, [pc, r8, lsl #2]
   209dc:	b	20ba4 <__assert_fail@plt+0xeb20>
   209e0:	andeq	r0, r2, r0, lsr #21
   209e4:	andeq	r0, r2, r4, lsr #23
   209e8:	andeq	r0, r2, r0, lsr #21
   209ec:	andeq	r0, r2, r4, lsr #23
   209f0:	andeq	r0, r2, r4, lsr #23
   209f4:	andeq	r0, r2, r4, lsr #23
   209f8:	andeq	r0, r2, r0, lsr #21
   209fc:	andeq	r0, r2, r4, lsr #23
   20a00:	andeq	r0, r2, r0, lsr #21
   20a04:	andeq	r0, r2, r4, lsr #23
   20a08:	andeq	r0, r2, r4, lsr #23
   20a0c:	andeq	r0, r2, r0, lsr #21
   20a10:	andeq	r0, r2, r4, lsr #23
   20a14:	andeq	r0, r2, r4, lsr #23
   20a18:	andeq	r0, r2, r4, lsr #23
   20a1c:	andeq	r0, r2, r0, lsr #21
   20a20:	andeq	r0, r2, r4, lsr #23
   20a24:	andeq	r0, r2, r4, lsr #23
   20a28:	andeq	r0, r2, r4, lsr #23
   20a2c:	andeq	r0, r2, r4, lsr #23
   20a30:	andeq	r0, r2, r0, lsr #21
   20a34:	andeq	r0, r2, r0, lsr #21
   20a38:	andeq	r0, r2, r4, lsr #23
   20a3c:	andeq	r0, r2, r4, lsr #23
   20a40:	andeq	r0, r2, r4, lsr #23
   20a44:	andeq	r0, r2, r4, lsr #23
   20a48:	andeq	r0, r2, r4, lsr #23
   20a4c:	andeq	r0, r2, r4, lsr #23
   20a50:	andeq	r0, r2, r4, lsr #23
   20a54:	andeq	r0, r2, r4, lsr #23
   20a58:	andeq	r0, r2, r4, lsr #23
   20a5c:	andeq	r0, r2, r4, lsr #23
   20a60:	andeq	r0, r2, r4, lsr #23
   20a64:	andeq	r0, r2, r4, lsr #23
   20a68:	andeq	r0, r2, r0, lsr #21
   20a6c:	andeq	r0, r2, r4, lsr #23
   20a70:	andeq	r0, r2, r4, lsr #23
   20a74:	andeq	r0, r2, r4, lsr #23
   20a78:	andeq	r0, r2, r0, lsr #21
   20a7c:	andeq	r0, r2, r4, lsr #23
   20a80:	andeq	r0, r2, r0, lsr #21
   20a84:	andeq	r0, r2, r4, lsr #23
   20a88:	andeq	r0, r2, r4, lsr #23
   20a8c:	andeq	r0, r2, r4, lsr #23
   20a90:	andeq	r0, r2, r4, lsr #23
   20a94:	andeq	r0, r2, r4, lsr #23
   20a98:	andeq	r0, r2, r4, lsr #23
   20a9c:	andeq	r0, r2, r0, lsr #21
   20aa0:	mov	r0, r9
   20aa4:	mov	r1, #48	; 0x30
   20aa8:	str	r3, [sp, #4]
   20aac:	bl	11e8c <strchr@plt>
   20ab0:	ldr	r3, [sp, #4]
   20ab4:	cmp	r0, #0
   20ab8:	beq	20ba4 <__assert_fail@plt+0xeb20>
   20abc:	ldrb	r2, [r3, #1]
   20ac0:	cmp	r2, #68	; 0x44
   20ac4:	beq	20ebc <__assert_fail@plt+0xee38>
   20ac8:	cmp	r2, #105	; 0x69
   20acc:	beq	20d44 <__assert_fail@plt+0xecc0>
   20ad0:	cmp	r2, #66	; 0x42
   20ad4:	beq	20ebc <__assert_fail@plt+0xee38>
   20ad8:	cmp	r8, #47	; 0x2f
   20adc:	ldrls	pc, [pc, r8, lsl #2]
   20ae0:	b	20d38 <__assert_fail@plt+0xecb4>
   20ae4:	andeq	r0, r2, r4, ror lr
   20ae8:	andeq	r0, r2, r8, lsr sp
   20aec:	muleq	r2, r4, ip
   20af0:	andeq	r0, r2, r8, lsr sp
   20af4:	andeq	r0, r2, r8, lsr sp
   20af8:	andeq	r0, r2, r8, lsr sp
   20afc:	andeq	r0, r2, r0, lsl #26
   20b00:	andeq	r0, r2, r8, lsr sp
   20b04:	andeq	r0, r2, r4, asr #28
   20b08:	andeq	r0, r2, r8, lsr sp
   20b0c:	andeq	r0, r2, r8, lsr sp
   20b10:	andeq	r0, r2, r4, lsl lr
   20b14:	andeq	r0, r2, r8, lsr sp
   20b18:	andeq	r0, r2, r8, lsr sp
   20b1c:	andeq	r0, r2, r8, lsr sp
   20b20:	andeq	r0, r2, r4, ror #27
   20b24:	andeq	r0, r2, r8, lsr sp
   20b28:	andeq	r0, r2, r8, lsr sp
   20b2c:	andeq	r0, r2, r8, lsr sp
   20b30:	andeq	r0, r2, r8, lsr sp
   20b34:			; <UNDEFINED> instruction: 0x00020db4
   20b38:	andeq	r0, r2, r0, lsl #27
   20b3c:	andeq	r0, r2, r8, lsr sp
   20b40:	andeq	r0, r2, r8, lsr sp
   20b44:	andeq	r0, r2, r8, lsr sp
   20b48:	andeq	r0, r2, r8, lsr sp
   20b4c:	andeq	r0, r2, r8, lsr sp
   20b50:	andeq	r0, r2, r8, lsr sp
   20b54:	andeq	r0, r2, r8, lsr sp
   20b58:	andeq	r0, r2, ip, ror #26
   20b5c:			; <UNDEFINED> instruction: 0x00020eb4
   20b60:	andeq	r0, r2, r8, lsr sp
   20b64:	andeq	r0, r2, r8, lsr sp
   20b68:	andeq	r0, r2, r8, lsr sp
   20b6c:	muleq	r2, r4, ip
   20b70:	andeq	r0, r2, r8, lsr sp
   20b74:	andeq	r0, r2, r8, lsr sp
   20b78:	andeq	r0, r2, r8, lsr sp
   20b7c:	andeq	r0, r2, r0, lsl #26
   20b80:	andeq	r0, r2, r8, lsr sp
   20b84:	andeq	r0, r2, r4, asr #28
   20b88:	andeq	r0, r2, r8, lsr sp
   20b8c:	andeq	r0, r2, r8, lsr sp
   20b90:	andeq	r0, r2, r8, lsr sp
   20b94:	andeq	r0, r2, r8, lsr sp
   20b98:	andeq	r0, r2, r8, lsr sp
   20b9c:	andeq	r0, r2, r8, lsr sp
   20ba0:	andeq	r0, r2, r4, ror #27
   20ba4:	mov	r1, #1
   20ba8:	mov	r2, #1024	; 0x400
   20bac:	sub	r5, r5, #66	; 0x42
   20bb0:	cmp	r5, #53	; 0x35
   20bb4:	ldrls	pc, [pc, r5, lsl #2]
   20bb8:	b	20d38 <__assert_fail@plt+0xecb4>
   20bbc:	andeq	r0, r2, r4, lsr #29
   20bc0:	andeq	r0, r2, r8, lsr sp
   20bc4:	andeq	r0, r2, r8, lsr sp
   20bc8:	andeq	r0, r2, ip, ror lr
   20bcc:	andeq	r0, r2, r8, lsr sp
   20bd0:	muleq	r2, ip, ip
   20bd4:	andeq	r0, r2, r8, lsr sp
   20bd8:	andeq	r0, r2, r8, lsr sp
   20bdc:	andeq	r0, r2, r8, lsr sp
   20be0:	andeq	r0, r2, r8, lsl #26
   20be4:	andeq	r0, r2, r8, lsr sp
   20be8:	andeq	r0, r2, ip, asr #28
   20bec:	andeq	r0, r2, r8, lsr sp
   20bf0:	andeq	r0, r2, r8, lsr sp
   20bf4:	andeq	r0, r2, ip, lsl lr
   20bf8:	andeq	r0, r2, r8, lsr sp
   20bfc:	andeq	r0, r2, r8, lsr sp
   20c00:	andeq	r0, r2, r8, lsr sp
   20c04:	andeq	r0, r2, ip, ror #27
   20c08:	andeq	r0, r2, r8, lsr sp
   20c0c:	andeq	r0, r2, r8, lsr sp
   20c10:	andeq	r0, r2, r8, lsr sp
   20c14:	andeq	r0, r2, r8, lsr sp
   20c18:			; <UNDEFINED> instruction: 0x00020dbc
   20c1c:	andeq	r0, r2, r8, lsl #27
   20c20:	andeq	r0, r2, r8, lsr sp
   20c24:	andeq	r0, r2, r8, lsr sp
   20c28:	andeq	r0, r2, r8, lsr sp
   20c2c:	andeq	r0, r2, r8, lsr sp
   20c30:	andeq	r0, r2, r8, lsr sp
   20c34:	andeq	r0, r2, r8, lsr sp
   20c38:	andeq	r0, r2, r8, lsr sp
   20c3c:	andeq	r0, r2, r0, ror sp
   20c40:	andeq	r0, r2, r8, ror #25
   20c44:	andeq	r0, r2, r8, lsr sp
   20c48:	andeq	r0, r2, r8, lsr sp
   20c4c:	andeq	r0, r2, r8, lsr sp
   20c50:	muleq	r2, ip, ip
   20c54:	andeq	r0, r2, r8, lsr sp
   20c58:	andeq	r0, r2, r8, lsr sp
   20c5c:	andeq	r0, r2, r8, lsr sp
   20c60:	andeq	r0, r2, r8, lsl #26
   20c64:	andeq	r0, r2, r8, lsr sp
   20c68:	andeq	r0, r2, ip, asr #28
   20c6c:	andeq	r0, r2, r8, lsr sp
   20c70:	andeq	r0, r2, r8, lsr sp
   20c74:	andeq	r0, r2, r8, lsr sp
   20c78:	andeq	r0, r2, r8, lsr sp
   20c7c:	andeq	r0, r2, r8, lsr sp
   20c80:	andeq	r0, r2, r8, lsr sp
   20c84:	andeq	r0, r2, ip, ror #27
   20c88:	andeq	r0, r2, r8, lsr sp
   20c8c:	andeq	r0, r2, r8, lsr sp
   20c90:	andeq	r0, r2, ip, asr sp
   20c94:	mov	r1, #1
   20c98:	mov	r2, #1024	; 0x400
   20c9c:	umull	ip, r0, r2, fp
   20ca0:	adds	r0, r0, #0
   20ca4:	movne	r0, #1
   20ca8:	cmp	r0, #0
   20cac:	bne	20ec8 <__assert_fail@plt+0xee44>
   20cb0:	mul	fp, r2, fp
   20cb4:	umull	ip, r0, r2, fp
   20cb8:	adds	r0, r0, #0
   20cbc:	movne	r0, #1
   20cc0:	cmp	r0, #0
   20cc4:	bne	20ec8 <__assert_fail@plt+0xee44>
   20cc8:	mul	fp, r2, fp
   20ccc:	umull	ip, r0, r2, fp
   20cd0:	adds	r0, r0, #0
   20cd4:	movne	r0, #1
   20cd8:	cmp	r0, #0
   20cdc:	muleq	fp, r2, fp
   20ce0:	bne	20ec8 <__assert_fail@plt+0xee44>
   20ce4:	orr	r4, r4, r0
   20ce8:	add	r2, r3, r1
   20cec:	str	r2, [r6]
   20cf0:	ldrb	r3, [r3, r1]
   20cf4:	cmp	r3, #0
   20cf8:	orrne	r4, r4, #2
   20cfc:	b	20964 <__assert_fail@plt+0xe8e0>
   20d00:	mov	r1, #1
   20d04:	mov	r2, #1024	; 0x400
   20d08:	umull	ip, r0, r2, fp
   20d0c:	cmp	r0, #0
   20d10:	bne	20e68 <__assert_fail@plt+0xede4>
   20d14:	mul	fp, r2, fp
   20d18:	b	20ce8 <__assert_fail@plt+0xec64>
   20d1c:	mov	r1, r5
   20d20:	mov	r0, r9
   20d24:	str	r3, [sp, #4]
   20d28:	bl	11e8c <strchr@plt>
   20d2c:	ldr	r3, [sp, #4]
   20d30:	cmp	r0, #0
   20d34:	bne	209d0 <__assert_fail@plt+0xe94c>
   20d38:	str	fp, [sl]
   20d3c:	orr	r4, r4, #2
   20d40:	b	20968 <__assert_fail@plt+0xe8e4>
   20d44:	ldrb	r1, [r3, #2]
   20d48:	mov	r2, #1024	; 0x400
   20d4c:	cmp	r1, #66	; 0x42
   20d50:	movne	r1, #1
   20d54:	moveq	r1, #3
   20d58:	b	20bac <__assert_fail@plt+0xeb28>
   20d5c:	cmp	fp, #0
   20d60:	blt	20e68 <__assert_fail@plt+0xede4>
   20d64:	lsl	fp, fp, #1
   20d68:	b	20ce8 <__assert_fail@plt+0xec64>
   20d6c:	mov	r1, #1
   20d70:	lsrs	r2, fp, #23
   20d74:	bne	20e68 <__assert_fail@plt+0xede4>
   20d78:	lsl	fp, fp, #9
   20d7c:	b	20ce8 <__assert_fail@plt+0xec64>
   20d80:	mov	r1, #1
   20d84:	mov	r2, #1024	; 0x400
   20d88:	mov	r0, #7
   20d8c:	mov	lr, #0
   20d90:	umull	r5, ip, r2, fp
   20d94:	cmp	ip, #0
   20d98:	movne	lr, #1
   20d9c:	muleq	fp, r2, fp
   20da0:	mvnne	fp, #0
   20da4:	subs	r0, r0, #1
   20da8:	bne	20d90 <__assert_fail@plt+0xed0c>
   20dac:	orr	r4, r4, lr
   20db0:	b	20ce8 <__assert_fail@plt+0xec64>
   20db4:	mov	r1, #1
   20db8:	mov	r2, #1024	; 0x400
   20dbc:	mov	r0, #8
   20dc0:	mov	lr, #0
   20dc4:	umull	r5, ip, r2, fp
   20dc8:	cmp	ip, #0
   20dcc:	movne	lr, #1
   20dd0:	muleq	fp, r2, fp
   20dd4:	mvnne	fp, #0
   20dd8:	subs	r0, r0, #1
   20ddc:	bne	20dc4 <__assert_fail@plt+0xed40>
   20de0:	b	20dac <__assert_fail@plt+0xed28>
   20de4:	mov	r1, #1
   20de8:	mov	r2, #1024	; 0x400
   20dec:	mov	r0, #4
   20df0:	mov	lr, #0
   20df4:	umull	r5, ip, r2, fp
   20df8:	cmp	ip, #0
   20dfc:	movne	lr, #1
   20e00:	muleq	fp, r2, fp
   20e04:	mvnne	fp, #0
   20e08:	subs	r0, r0, #1
   20e0c:	bne	20df4 <__assert_fail@plt+0xed70>
   20e10:	b	20dac <__assert_fail@plt+0xed28>
   20e14:	mov	r1, #1
   20e18:	mov	r2, #1024	; 0x400
   20e1c:	mov	r0, #5
   20e20:	mov	lr, #0
   20e24:	umull	r5, ip, r2, fp
   20e28:	cmp	ip, #0
   20e2c:	movne	lr, #1
   20e30:	muleq	fp, r2, fp
   20e34:	mvnne	fp, #0
   20e38:	subs	r0, r0, #1
   20e3c:	bne	20e24 <__assert_fail@plt+0xeda0>
   20e40:	b	20dac <__assert_fail@plt+0xed28>
   20e44:	mov	r1, #1
   20e48:	mov	r2, #1024	; 0x400
   20e4c:	umull	ip, r0, r2, fp
   20e50:	cmp	r0, #0
   20e54:	bne	20e68 <__assert_fail@plt+0xede4>
   20e58:	mul	fp, r2, fp
   20e5c:	umull	ip, r0, r2, fp
   20e60:	cmp	r0, #0
   20e64:	beq	20d14 <__assert_fail@plt+0xec90>
   20e68:	mov	r4, #1
   20e6c:	mvn	fp, #0
   20e70:	b	20ce8 <__assert_fail@plt+0xec64>
   20e74:	mov	r1, #1
   20e78:	mov	r2, #1024	; 0x400
   20e7c:	mov	r0, #6
   20e80:	mov	lr, #0
   20e84:	umull	r5, ip, r2, fp
   20e88:	cmp	ip, #0
   20e8c:	movne	lr, #1
   20e90:	muleq	fp, r2, fp
   20e94:	mvnne	fp, #0
   20e98:	subs	r0, r0, #1
   20e9c:	bne	20e84 <__assert_fail@plt+0xee00>
   20ea0:	b	20dac <__assert_fail@plt+0xed28>
   20ea4:	lsrs	r2, fp, #22
   20ea8:	bne	20e68 <__assert_fail@plt+0xede4>
   20eac:	lsl	fp, fp, #10
   20eb0:	b	20ce8 <__assert_fail@plt+0xec64>
   20eb4:	mov	r1, #1
   20eb8:	b	20ce8 <__assert_fail@plt+0xec64>
   20ebc:	mov	r1, #2
   20ec0:	mov	r2, #1000	; 0x3e8
   20ec4:	b	20bac <__assert_fail@plt+0xeb28>
   20ec8:	mvn	fp, #0
   20ecc:	b	20ce4 <__assert_fail@plt+0xec60>
   20ed0:	ldr	r3, [pc, #20]	; 20eec <__assert_fail@plt+0xee68>
   20ed4:	mov	r2, #96	; 0x60
   20ed8:	ldr	r1, [pc, #16]	; 20ef0 <__assert_fail@plt+0xee6c>
   20edc:	ldr	r0, [pc, #16]	; 20ef4 <__assert_fail@plt+0xee70>
   20ee0:	bl	12084 <__assert_fail@plt>
   20ee4:	bl	11c7c <__stack_chk_fail@plt>
   20ee8:	andeq	r5, r3, r0, lsl #30
   20eec:	andeq	r5, r2, r0, ror #2
   20ef0:	andeq	r5, r2, ip, ror #2
   20ef4:	andeq	r5, r2, ip, ror r1
   20ef8:	ldr	ip, [pc, #128]	; 20f80 <__assert_fail@plt+0xeefc>
   20efc:	push	{r7, lr}
   20f00:	sub	r0, r0, #1
   20f04:	ldr	lr, [pc, #120]	; 20f84 <__assert_fail@plt+0xef00>
   20f08:	sub	sp, sp, #16
   20f0c:	ldr	r4, [ip]
   20f10:	cmp	r0, #3
   20f14:	str	r4, [sp, #12]
   20f18:	ldr	r6, [sp, #24]
   20f1c:	ldr	r5, [lr]
   20f20:	bhi	20f7c <__assert_fail@plt+0xeef8>
   20f24:	mov	ip, r1
   20f28:	cmp	ip, #0
   20f2c:	ldr	r1, [pc, #84]	; 20f88 <__assert_fail@plt+0xef04>
   20f30:	ldrlt	r4, [pc, #84]	; 20f8c <__assert_fail@plt+0xef08>
   20f34:	movlt	r3, #0
   20f38:	ldr	r1, [r1, r0, lsl #2]
   20f3c:	strblt	r2, [sp, #8]
   20f40:	mov	r0, #0
   20f44:	mov	r2, #5
   20f48:	ldrge	r7, [r3, ip, lsl #4]
   20f4c:	sublt	r4, r4, ip
   20f50:	strblt	r3, [sp, #9]
   20f54:	addlt	r7, sp, #8
   20f58:	ldrge	r4, [pc, #44]	; 20f8c <__assert_fail@plt+0xef08>
   20f5c:	bl	11c70 <dcgettext@plt>
   20f60:	str	r6, [sp, #4]
   20f64:	str	r7, [sp]
   20f68:	mov	r3, r4
   20f6c:	mov	r1, #0
   20f70:	mov	r2, r0
   20f74:	mov	r0, r5
   20f78:	bl	11db4 <error@plt>
   20f7c:	bl	12060 <abort@plt>
   20f80:	andeq	r5, r3, r0, lsl #30
   20f84:	andeq	r6, r3, r8, ror r2
   20f88:	andeq	r5, r2, r4, lsr #3
   20f8c:			; <UNDEFINED> instruction: 0x000251b4
   20f90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f94:	sub	sp, sp, #36	; 0x24
   20f98:	ldr	r5, [pc, #2536]	; 21988 <__assert_fail@plt+0xf904>
   20f9c:	mov	r9, r2
   20fa0:	cmp	r2, #36	; 0x24
   20fa4:	str	r3, [sp, #12]
   20fa8:	ldr	r2, [r5]
   20fac:	ldr	r3, [sp, #72]	; 0x48
   20fb0:	str	r2, [sp, #28]
   20fb4:	str	r3, [sp]
   20fb8:	bhi	21974 <__assert_fail@plt+0xf8f0>
   20fbc:	cmp	r1, #0
   20fc0:	mov	r4, r1
   20fc4:	mov	r6, r0
   20fc8:	addeq	r4, sp, #24
   20fcc:	bl	11ea4 <__errno_location@plt>
   20fd0:	mov	r3, #0
   20fd4:	str	r3, [r0]
   20fd8:	mov	r7, r0
   20fdc:	bl	11e50 <__ctype_b_loc@plt>
   20fe0:	ldrb	r3, [r6]
   20fe4:	mov	r1, r6
   20fe8:	ldr	r0, [r0]
   20fec:	b	20ff4 <__assert_fail@plt+0xef70>
   20ff0:	ldrb	r3, [r1, #1]!
   20ff4:	lsl	r2, r3, #1
   20ff8:	ldrh	r8, [r0, r2]
   20ffc:	ands	r8, r8, #8192	; 0x2000
   21000:	bne	20ff0 <__assert_fail@plt+0xef6c>
   21004:	cmp	r3, #45	; 0x2d
   21008:	beq	210a4 <__assert_fail@plt+0xf020>
   2100c:	mov	r2, r9
   21010:	mov	r3, r8
   21014:	mov	r1, r4
   21018:	mov	r0, r6
   2101c:	bl	11c10 <__strtoull_internal@plt>
   21020:	ldr	r9, [r4]
   21024:	cmp	r9, r6
   21028:	mov	sl, r0
   2102c:	mov	fp, r1
   21030:	beq	2108c <__assert_fail@plt+0xf008>
   21034:	ldr	r8, [r7]
   21038:	cmp	r8, #0
   2103c:	bne	2107c <__assert_fail@plt+0xeff8>
   21040:	ldr	r3, [sp]
   21044:	cmp	r3, #0
   21048:	beq	21058 <__assert_fail@plt+0xefd4>
   2104c:	ldrb	r6, [r9]
   21050:	cmp	r6, #0
   21054:	bne	2142c <__assert_fail@plt+0xf3a8>
   21058:	ldr	r3, [sp, #12]
   2105c:	strd	sl, [r3]
   21060:	ldr	r2, [sp, #28]
   21064:	ldr	r3, [r5]
   21068:	mov	r0, r8
   2106c:	cmp	r2, r3
   21070:	bne	21970 <__assert_fail@plt+0xf8ec>
   21074:	add	sp, sp, #36	; 0x24
   21078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2107c:	cmp	r8, #34	; 0x22
   21080:	bne	210a4 <__assert_fail@plt+0xf020>
   21084:	mov	r8, #1
   21088:	b	21040 <__assert_fail@plt+0xefbc>
   2108c:	ldr	r0, [sp]
   21090:	cmp	r0, #0
   21094:	beq	210a4 <__assert_fail@plt+0xf020>
   21098:	ldrb	r6, [r6]
   2109c:	cmp	r6, #0
   210a0:	bne	210ac <__assert_fail@plt+0xf028>
   210a4:	mov	r8, #4
   210a8:	b	21060 <__assert_fail@plt+0xefdc>
   210ac:	mov	r1, r6
   210b0:	bl	11e8c <strchr@plt>
   210b4:	cmp	r0, #0
   210b8:	movne	sl, #1
   210bc:	movne	fp, #0
   210c0:	beq	210a4 <__assert_fail@plt+0xf020>
   210c4:	sub	r7, r6, #69	; 0x45
   210c8:	cmp	r7, #47	; 0x2f
   210cc:	ldrls	pc, [pc, r7, lsl #2]
   210d0:	b	21290 <__assert_fail@plt+0xf20c>
   210d4:	muleq	r2, r4, r1
   210d8:	muleq	r2, r0, r2
   210dc:	muleq	r2, r4, r1
   210e0:	muleq	r2, r0, r2
   210e4:	muleq	r2, r0, r2
   210e8:	muleq	r2, r0, r2
   210ec:	muleq	r2, r4, r1
   210f0:	muleq	r2, r0, r2
   210f4:	muleq	r2, r4, r1
   210f8:	muleq	r2, r0, r2
   210fc:	muleq	r2, r0, r2
   21100:	muleq	r2, r4, r1
   21104:	muleq	r2, r0, r2
   21108:	muleq	r2, r0, r2
   2110c:	muleq	r2, r0, r2
   21110:	muleq	r2, r4, r1
   21114:	muleq	r2, r0, r2
   21118:	muleq	r2, r0, r2
   2111c:	muleq	r2, r0, r2
   21120:	muleq	r2, r0, r2
   21124:	muleq	r2, r4, r1
   21128:	muleq	r2, r4, r1
   2112c:	muleq	r2, r0, r2
   21130:	muleq	r2, r0, r2
   21134:	muleq	r2, r0, r2
   21138:	muleq	r2, r0, r2
   2113c:	muleq	r2, r0, r2
   21140:	muleq	r2, r0, r2
   21144:	muleq	r2, r0, r2
   21148:	muleq	r2, r0, r2
   2114c:	muleq	r2, r0, r2
   21150:	muleq	r2, r0, r2
   21154:	muleq	r2, r0, r2
   21158:	muleq	r2, r0, r2
   2115c:	muleq	r2, r4, r1
   21160:	muleq	r2, r0, r2
   21164:	muleq	r2, r0, r2
   21168:	muleq	r2, r0, r2
   2116c:	muleq	r2, r4, r1
   21170:	muleq	r2, r0, r2
   21174:	muleq	r2, r4, r1
   21178:	muleq	r2, r0, r2
   2117c:	muleq	r2, r0, r2
   21180:	muleq	r2, r0, r2
   21184:	muleq	r2, r0, r2
   21188:	muleq	r2, r0, r2
   2118c:	muleq	r2, r0, r2
   21190:	muleq	r2, r4, r1
   21194:	ldr	r0, [sp]
   21198:	mov	r1, #48	; 0x30
   2119c:	bl	11e8c <strchr@plt>
   211a0:	cmp	r0, #0
   211a4:	beq	21290 <__assert_fail@plt+0xf20c>
   211a8:	ldrb	r3, [r9, #1]
   211ac:	cmp	r3, #68	; 0x44
   211b0:	beq	21870 <__assert_fail@plt+0xf7ec>
   211b4:	cmp	r3, #105	; 0x69
   211b8:	beq	21450 <__assert_fail@plt+0xf3cc>
   211bc:	cmp	r3, #66	; 0x42
   211c0:	beq	21870 <__assert_fail@plt+0xf7ec>
   211c4:	cmp	r7, #47	; 0x2f
   211c8:	ldrls	pc, [pc, r7, lsl #2]
   211cc:	b	21440 <__assert_fail@plt+0xf3bc>
   211d0:	andeq	r1, r2, r4, asr r8
   211d4:	andeq	r1, r2, r0, asr #8
   211d8:	andeq	r1, r2, r4, asr #16
   211dc:	andeq	r1, r2, r0, asr #8
   211e0:	andeq	r1, r2, r0, asr #8
   211e4:	andeq	r1, r2, r0, asr #8
   211e8:	andeq	r1, r2, r4, lsr r8
   211ec:	andeq	r1, r2, r0, asr #8
   211f0:	andeq	r1, r2, r4, lsr #16
   211f4:	andeq	r1, r2, r0, asr #8
   211f8:	andeq	r1, r2, r0, asr #8
   211fc:	andeq	r1, r2, r4, lsl r8
   21200:	andeq	r1, r2, r0, asr #8
   21204:	andeq	r1, r2, r0, asr #8
   21208:	andeq	r1, r2, r0, asr #8
   2120c:	andeq	r1, r2, r4, lsl #16
   21210:	andeq	r1, r2, r0, asr #8
   21214:	andeq	r1, r2, r0, asr #8
   21218:	andeq	r1, r2, r0, asr #8
   2121c:	andeq	r1, r2, r0, asr #8
   21220:	strdeq	r1, [r2], -r4
   21224:	andeq	r1, r2, r4, ror #15
   21228:	andeq	r1, r2, r0, asr #8
   2122c:	andeq	r1, r2, r0, asr #8
   21230:	andeq	r1, r2, r0, asr #8
   21234:	andeq	r1, r2, r0, asr #8
   21238:	andeq	r1, r2, r0, asr #8
   2123c:	andeq	r1, r2, r0, asr #8
   21240:	andeq	r1, r2, r0, asr #8
   21244:	andeq	r1, r2, ip, lsl #9
   21248:	ldrdeq	r1, [r2], -ip
   2124c:	andeq	r1, r2, r0, asr #8
   21250:	andeq	r1, r2, r0, asr #8
   21254:	andeq	r1, r2, r0, asr #8
   21258:	andeq	r1, r2, r4, asr #16
   2125c:	andeq	r1, r2, r0, asr #8
   21260:	andeq	r1, r2, r0, asr #8
   21264:	andeq	r1, r2, r0, asr #8
   21268:	andeq	r1, r2, r4, lsr r8
   2126c:	andeq	r1, r2, r0, asr #8
   21270:	andeq	r1, r2, r4, lsr #16
   21274:	andeq	r1, r2, r0, asr #8
   21278:	andeq	r1, r2, r0, asr #8
   2127c:	andeq	r1, r2, r0, asr #8
   21280:	andeq	r1, r2, r0, asr #8
   21284:	andeq	r1, r2, r0, asr #8
   21288:	andeq	r1, r2, r0, asr #8
   2128c:	andeq	r1, r2, r4, lsl #16
   21290:	mov	lr, #1
   21294:	mov	r0, #1024	; 0x400
   21298:	sub	r6, r6, #66	; 0x42
   2129c:	cmp	r6, #53	; 0x35
   212a0:	ldrls	pc, [pc, r6, lsl #2]
   212a4:	b	21440 <__assert_fail@plt+0xf3bc>
   212a8:			; <UNDEFINED> instruction: 0x000214b4
   212ac:	andeq	r1, r2, r0, asr #8
   212b0:	andeq	r1, r2, r0, asr #8
   212b4:	ldrdeq	r1, [r2], -r8
   212b8:	andeq	r1, r2, r0, asr #8
   212bc:	andeq	r1, r2, r0, lsl #7
   212c0:	andeq	r1, r2, r0, asr #8
   212c4:	andeq	r1, r2, r0, asr #8
   212c8:	andeq	r1, r2, r0, asr #8
   212cc:	ldrdeq	r1, [r2], -r0
   212d0:	andeq	r1, r2, r0, asr #8
   212d4:	andeq	r1, r2, r4, ror r7
   212d8:	andeq	r1, r2, r0, asr #8
   212dc:	andeq	r1, r2, r0, asr #8
   212e0:	strdeq	r1, [r2], -r8
   212e4:	andeq	r1, r2, r0, asr #8
   212e8:	andeq	r1, r2, r0, asr #8
   212ec:	andeq	r1, r2, r0, asr #8
   212f0:	andeq	r1, r2, ip, ror r6
   212f4:	andeq	r1, r2, r0, asr #8
   212f8:	andeq	r1, r2, r0, asr #8
   212fc:	andeq	r1, r2, r0, asr #8
   21300:	andeq	r1, r2, r0, asr #8
   21304:	andeq	r1, r2, r0, lsl #12
   21308:	andeq	r1, r2, r4, asr r5
   2130c:	andeq	r1, r2, r0, asr #8
   21310:	andeq	r1, r2, r0, asr #8
   21314:	andeq	r1, r2, r0, asr #8
   21318:	andeq	r1, r2, r0, asr #8
   2131c:	andeq	r1, r2, r0, asr #8
   21320:	andeq	r1, r2, r0, asr #8
   21324:	andeq	r1, r2, r0, asr #8
   21328:	muleq	r2, r0, r4
   2132c:	andeq	r1, r2, r4, lsl r4
   21330:	andeq	r1, r2, r0, asr #8
   21334:	andeq	r1, r2, r0, asr #8
   21338:	andeq	r1, r2, r0, asr #8
   2133c:	andeq	r1, r2, r0, lsl #7
   21340:	andeq	r1, r2, r0, asr #8
   21344:	andeq	r1, r2, r0, asr #8
   21348:	andeq	r1, r2, r0, asr #8
   2134c:	ldrdeq	r1, [r2], -r0
   21350:	andeq	r1, r2, r0, asr #8
   21354:	andeq	r1, r2, r4, ror r7
   21358:	andeq	r1, r2, r0, asr #8
   2135c:	andeq	r1, r2, r0, asr #8
   21360:	andeq	r1, r2, r0, asr #8
   21364:	andeq	r1, r2, r0, asr #8
   21368:	andeq	r1, r2, r0, asr #8
   2136c:	andeq	r1, r2, r0, asr #8
   21370:	andeq	r1, r2, ip, ror r6
   21374:	andeq	r1, r2, r0, asr #8
   21378:	andeq	r1, r2, r0, asr #8
   2137c:	andeq	r1, r2, r8, ror #8
   21380:	asr	r1, r0, #31
   21384:	mov	r2, #0
   21388:	mov	r3, #0
   2138c:	cmp	fp, #0
   21390:	strd	r2, [sp]
   21394:	bne	218b4 <__assert_fail@plt+0xf830>
   21398:	ldrd	r2, [sp]
   2139c:	orrs	r3, r2, r3
   213a0:	bne	218a4 <__assert_fail@plt+0xf820>
   213a4:	mul	r3, sl, r1
   213a8:	umull	r6, r7, sl, r0
   213ac:	mla	r3, r0, fp, r3
   213b0:	ldrd	sl, [sp]
   213b4:	add	ip, r3, r7
   213b8:	cmp	ip, #0
   213bc:	mov	r7, ip
   213c0:	bne	21948 <__assert_fail@plt+0xf8c4>
   213c4:	orrs	r3, sl, fp
   213c8:	bne	218a4 <__assert_fail@plt+0xf820>
   213cc:	umull	r2, r3, r6, r0
   213d0:	mul	ip, r6, r1
   213d4:	strd	r2, [sp]
   213d8:	mla	r3, r0, r7, ip
   213dc:	ldr	r2, [sp, #4]
   213e0:	add	ip, r3, r2
   213e4:	cmp	ip, #0
   213e8:	str	ip, [sp, #4]
   213ec:	bne	21924 <__assert_fail@plt+0xf8a0>
   213f0:	orrs	r3, sl, fp
   213f4:	bne	218a4 <__assert_fail@plt+0xf820>
   213f8:	ldrd	r6, [sp]
   213fc:	mov	r3, #0
   21400:	mul	r2, r6, r1
   21404:	umull	sl, fp, r6, r0
   21408:	mla	r2, r0, r7, r2
   2140c:	add	fp, r2, fp
   21410:	orr	r8, r8, r3
   21414:	add	r3, r9, lr
   21418:	str	r3, [r4]
   2141c:	ldrb	r3, [r9, lr]
   21420:	cmp	r3, #0
   21424:	orrne	r8, r8, #2
   21428:	b	21058 <__assert_fail@plt+0xefd4>
   2142c:	mov	r1, r6
   21430:	ldr	r0, [sp]
   21434:	bl	11e8c <strchr@plt>
   21438:	cmp	r0, #0
   2143c:	bne	210c4 <__assert_fail@plt+0xf040>
   21440:	ldr	r3, [sp, #12]
   21444:	orr	r8, r8, #2
   21448:	strd	sl, [r3]
   2144c:	b	21060 <__assert_fail@plt+0xefdc>
   21450:	ldrb	r3, [r9, #2]
   21454:	mov	r0, #1024	; 0x400
   21458:	cmp	r3, #66	; 0x42
   2145c:	movne	lr, #1
   21460:	moveq	lr, #3
   21464:	b	21298 <__assert_fail@plt+0xf214>
   21468:	lsr	r3, fp, #31
   2146c:	adds	sl, sl, sl
   21470:	adc	fp, fp, fp
   21474:	cmp	r3, #0
   21478:	beq	21414 <__assert_fail@plt+0xf390>
   2147c:	mov	r8, #1
   21480:	mvn	sl, #0
   21484:	mvn	fp, #0
   21488:	b	21414 <__assert_fail@plt+0xf390>
   2148c:	mov	lr, #1
   21490:	lsr	r3, fp, #23
   21494:	cmp	r3, #0
   21498:	bne	2147c <__assert_fail@plt+0xf3f8>
   2149c:	lsl	r3, fp, #9
   214a0:	orr	r3, r3, sl, lsr #23
   214a4:	lsl	r2, sl, #9
   214a8:	mov	sl, r2
   214ac:	mov	fp, r3
   214b0:	b	21414 <__assert_fail@plt+0xf390>
   214b4:	lsr	r3, fp, #22
   214b8:	cmp	r3, #0
   214bc:	bne	2147c <__assert_fail@plt+0xf3f8>
   214c0:	lsl	r3, fp, #10
   214c4:	orr	r3, r3, sl, lsr #22
   214c8:	lsl	r2, sl, #10
   214cc:	mov	sl, r2
   214d0:	mov	fp, r3
   214d4:	b	21414 <__assert_fail@plt+0xf390>
   214d8:	mov	r6, r0
   214dc:	asr	r7, r0, #31
   214e0:	mov	r3, #0
   214e4:	mov	ip, #6
   214e8:	str	r3, [sp]
   214ec:	strd	r4, [sp, #16]
   214f0:	b	21520 <__assert_fail@plt+0xf49c>
   214f4:	orrs	r3, r2, r3
   214f8:	movne	r3, #1
   214fc:	muleq	r3, sl, r7
   21500:	strne	r3, [sp]
   21504:	mlaeq	r3, r6, fp, r3
   21508:	umulleq	sl, fp, sl, r6
   2150c:	mvnne	sl, #0
   21510:	addeq	fp, r3, fp
   21514:	mvnne	fp, #0
   21518:	subs	ip, ip, #1
   2151c:	beq	21864 <__assert_fail@plt+0xf7e0>
   21520:	cmp	fp, #0
   21524:	mov	r2, #0
   21528:	mov	r3, #0
   2152c:	beq	214f4 <__assert_fail@plt+0xf470>
   21530:	umull	r0, r1, sl, r6
   21534:	mov	r5, #0
   21538:	mov	r0, r1
   2153c:	mov	r1, r5
   21540:	umlal	r0, r1, fp, r6
   21544:	cmp	r1, r5
   21548:	movne	r2, #1
   2154c:	movne	r3, #0
   21550:	b	214f4 <__assert_fail@plt+0xf470>
   21554:	mov	r6, r0
   21558:	asr	r7, r0, #31
   2155c:	mov	r3, #0
   21560:	mov	ip, #7
   21564:	str	r3, [sp]
   21568:	strd	r4, [sp, #16]
   2156c:	b	2159c <__assert_fail@plt+0xf518>
   21570:	orrs	r3, r2, r3
   21574:	movne	r3, #1
   21578:	muleq	r3, sl, r7
   2157c:	strne	r3, [sp]
   21580:	mlaeq	r3, r6, fp, r3
   21584:	umulleq	sl, fp, sl, r6
   21588:	mvnne	sl, #0
   2158c:	addeq	fp, r3, fp
   21590:	mvnne	fp, #0
   21594:	subs	ip, ip, #1
   21598:	beq	21864 <__assert_fail@plt+0xf7e0>
   2159c:	cmp	fp, #0
   215a0:	mov	r2, #0
   215a4:	mov	r3, #0
   215a8:	beq	21570 <__assert_fail@plt+0xf4ec>
   215ac:	umull	r0, r1, sl, r6
   215b0:	mov	r5, #0
   215b4:	mov	r0, r1
   215b8:	mov	r1, r5
   215bc:	umlal	r0, r1, fp, r6
   215c0:	cmp	r1, r5
   215c4:	movne	r2, #1
   215c8:	movne	r3, #0
   215cc:	b	21570 <__assert_fail@plt+0xf4ec>
   215d0:	asr	r1, r0, #31
   215d4:	cmp	fp, #0
   215d8:	mov	r6, #0
   215dc:	mov	r7, #0
   215e0:	bne	2187c <__assert_fail@plt+0xf7f8>
   215e4:	orrs	r3, r6, r7
   215e8:	bne	2147c <__assert_fail@plt+0xf3f8>
   215ec:	mul	r3, sl, r1
   215f0:	mla	r3, r0, fp, r3
   215f4:	umull	sl, fp, sl, r0
   215f8:	add	fp, r3, fp
   215fc:	b	21414 <__assert_fail@plt+0xf390>
   21600:	mov	r6, r0
   21604:	asr	r7, r0, #31
   21608:	mov	r3, #0
   2160c:	mov	ip, #8
   21610:	str	r3, [sp]
   21614:	strd	r4, [sp, #16]
   21618:	b	21648 <__assert_fail@plt+0xf5c4>
   2161c:	orrs	r3, r2, r3
   21620:	movne	r3, #1
   21624:	muleq	r3, sl, r7
   21628:	strne	r3, [sp]
   2162c:	mlaeq	r3, r6, fp, r3
   21630:	umulleq	sl, fp, sl, r6
   21634:	mvnne	sl, #0
   21638:	addeq	fp, r3, fp
   2163c:	mvnne	fp, #0
   21640:	subs	ip, ip, #1
   21644:	beq	21864 <__assert_fail@plt+0xf7e0>
   21648:	cmp	fp, #0
   2164c:	mov	r2, #0
   21650:	mov	r3, #0
   21654:	beq	2161c <__assert_fail@plt+0xf598>
   21658:	umull	r0, r1, sl, r6
   2165c:	mov	r5, #0
   21660:	mov	r0, r1
   21664:	mov	r1, r5
   21668:	umlal	r0, r1, fp, r6
   2166c:	cmp	r1, r5
   21670:	movne	r2, #1
   21674:	movne	r3, #0
   21678:	b	2161c <__assert_fail@plt+0xf598>
   2167c:	mov	r6, r0
   21680:	asr	r7, r0, #31
   21684:	mov	r3, #0
   21688:	mov	ip, #4
   2168c:	str	r3, [sp]
   21690:	strd	r4, [sp, #16]
   21694:	b	216c4 <__assert_fail@plt+0xf640>
   21698:	orrs	r3, r2, r3
   2169c:	movne	r3, #1
   216a0:	muleq	r3, sl, r7
   216a4:	strne	r3, [sp]
   216a8:	mlaeq	r3, r6, fp, r3
   216ac:	umulleq	sl, fp, sl, r6
   216b0:	mvnne	sl, #0
   216b4:	addeq	fp, r3, fp
   216b8:	mvnne	fp, #0
   216bc:	subs	ip, ip, #1
   216c0:	beq	21864 <__assert_fail@plt+0xf7e0>
   216c4:	cmp	fp, #0
   216c8:	mov	r2, #0
   216cc:	mov	r3, #0
   216d0:	beq	21698 <__assert_fail@plt+0xf614>
   216d4:	umull	r0, r1, sl, r6
   216d8:	mov	r5, #0
   216dc:	mov	r0, r1
   216e0:	mov	r1, r5
   216e4:	umlal	r0, r1, fp, r6
   216e8:	cmp	r1, r5
   216ec:	movne	r2, #1
   216f0:	movne	r3, #0
   216f4:	b	21698 <__assert_fail@plt+0xf614>
   216f8:	mov	r6, r0
   216fc:	asr	r7, r0, #31
   21700:	mov	r3, #0
   21704:	mov	ip, #5
   21708:	str	r3, [sp]
   2170c:	strd	r4, [sp, #16]
   21710:	b	21740 <__assert_fail@plt+0xf6bc>
   21714:	orrs	r3, r2, r3
   21718:	movne	r3, #1
   2171c:	muleq	r3, sl, r7
   21720:	strne	r3, [sp]
   21724:	mlaeq	r3, r6, fp, r3
   21728:	umulleq	sl, fp, sl, r6
   2172c:	mvnne	sl, #0
   21730:	addeq	fp, r3, fp
   21734:	mvnne	fp, #0
   21738:	subs	ip, ip, #1
   2173c:	beq	21864 <__assert_fail@plt+0xf7e0>
   21740:	cmp	fp, #0
   21744:	mov	r2, #0
   21748:	mov	r3, #0
   2174c:	beq	21714 <__assert_fail@plt+0xf690>
   21750:	umull	r0, r1, sl, r6
   21754:	mov	r5, #0
   21758:	mov	r0, r1
   2175c:	mov	r1, r5
   21760:	umlal	r0, r1, fp, r6
   21764:	cmp	r1, r5
   21768:	movne	r2, #1
   2176c:	movne	r3, #0
   21770:	b	21714 <__assert_fail@plt+0xf690>
   21774:	asr	r1, r0, #31
   21778:	cmp	fp, #0
   2177c:	mov	r6, #0
   21780:	mov	r7, #0
   21784:	bne	218d8 <__assert_fail@plt+0xf854>
   21788:	orrs	r3, r6, r7
   2178c:	bne	2147c <__assert_fail@plt+0xf3f8>
   21790:	umull	r2, r3, sl, r0
   21794:	mul	ip, sl, r1
   21798:	strd	r2, [sp]
   2179c:	mla	r3, r0, fp, ip
   217a0:	ldr	r2, [sp, #4]
   217a4:	mov	sl, r6
   217a8:	add	ip, r3, r2
   217ac:	cmp	ip, #0
   217b0:	mov	fp, r7
   217b4:	str	ip, [sp, #4]
   217b8:	bne	21900 <__assert_fail@plt+0xf87c>
   217bc:	orrs	r3, sl, fp
   217c0:	bne	2147c <__assert_fail@plt+0xf3f8>
   217c4:	ldrd	r6, [sp]
   217c8:	mul	r3, r6, r1
   217cc:	umull	sl, fp, r6, r0
   217d0:	mla	r0, r0, r7, r3
   217d4:	add	fp, r0, fp
   217d8:	b	21414 <__assert_fail@plt+0xf390>
   217dc:	mov	lr, #1
   217e0:	b	21414 <__assert_fail@plt+0xf390>
   217e4:	mov	lr, #1
   217e8:	mov	r6, #1024	; 0x400
   217ec:	mov	r7, #0
   217f0:	b	2155c <__assert_fail@plt+0xf4d8>
   217f4:	mov	lr, #1
   217f8:	mov	r6, #1024	; 0x400
   217fc:	mov	r7, #0
   21800:	b	21608 <__assert_fail@plt+0xf584>
   21804:	mov	lr, #1
   21808:	mov	r6, #1024	; 0x400
   2180c:	mov	r7, #0
   21810:	b	21684 <__assert_fail@plt+0xf600>
   21814:	mov	lr, #1
   21818:	mov	r6, #1024	; 0x400
   2181c:	mov	r7, #0
   21820:	b	21700 <__assert_fail@plt+0xf67c>
   21824:	mov	lr, #1
   21828:	mov	r0, #1024	; 0x400
   2182c:	mov	r1, #0
   21830:	b	21778 <__assert_fail@plt+0xf6f4>
   21834:	mov	lr, #1
   21838:	mov	r0, #1024	; 0x400
   2183c:	mov	r1, #0
   21840:	b	215d4 <__assert_fail@plt+0xf550>
   21844:	mov	lr, #1
   21848:	mov	r0, #1024	; 0x400
   2184c:	mov	r1, #0
   21850:	b	21384 <__assert_fail@plt+0xf300>
   21854:	mov	lr, #1
   21858:	mov	r6, #1024	; 0x400
   2185c:	mov	r7, #0
   21860:	b	214e0 <__assert_fail@plt+0xf45c>
   21864:	ldrd	r4, [sp, #16]
   21868:	ldr	r3, [sp]
   2186c:	b	21410 <__assert_fail@plt+0xf38c>
   21870:	mov	lr, #2
   21874:	mov	r0, #1000	; 0x3e8
   21878:	b	21298 <__assert_fail@plt+0xf214>
   2187c:	umull	r2, r3, sl, r0
   21880:	str	r3, [sp]
   21884:	mov	r3, #0
   21888:	str	r3, [sp, #4]
   2188c:	ldrd	r2, [sp]
   21890:	umlal	r2, r3, fp, r0
   21894:	cmp	r3, #0
   21898:	movne	r6, #1
   2189c:	movne	r7, #0
   218a0:	b	215e4 <__assert_fail@plt+0xf560>
   218a4:	mov	r3, #1
   218a8:	mvn	sl, #0
   218ac:	mvn	fp, #0
   218b0:	b	21410 <__assert_fail@plt+0xf38c>
   218b4:	umull	r2, r3, sl, r0
   218b8:	mov	r7, #0
   218bc:	mov	r6, r3
   218c0:	umlal	r6, r7, fp, r0
   218c4:	cmp	r7, #0
   218c8:	movne	r2, #1
   218cc:	movne	r3, #0
   218d0:	strdne	r2, [sp]
   218d4:	b	21398 <__assert_fail@plt+0xf314>
   218d8:	umull	r2, r3, sl, r0
   218dc:	str	r3, [sp]
   218e0:	mov	r3, #0
   218e4:	str	r3, [sp, #4]
   218e8:	ldrd	r2, [sp]
   218ec:	umlal	r2, r3, fp, r0
   218f0:	cmp	r3, #0
   218f4:	movne	r6, #1
   218f8:	movne	r7, #0
   218fc:	b	21788 <__assert_fail@plt+0xf704>
   21900:	ldr	r3, [sp]
   21904:	mov	r7, #0
   21908:	umull	r2, r3, r3, r0
   2190c:	mov	r6, r3
   21910:	umlal	r6, r7, ip, r0
   21914:	cmp	r7, #0
   21918:	movne	sl, #1
   2191c:	movne	fp, #0
   21920:	b	217bc <__assert_fail@plt+0xf738>
   21924:	ldr	r3, [sp]
   21928:	mov	r7, #0
   2192c:	umull	r2, r3, r3, r0
   21930:	mov	r6, r3
   21934:	umlal	r6, r7, ip, r0
   21938:	cmp	r7, #0
   2193c:	movne	sl, #1
   21940:	movne	fp, #0
   21944:	b	213f0 <__assert_fail@plt+0xf36c>
   21948:	umull	r2, r3, r6, r0
   2194c:	str	r3, [sp]
   21950:	mov	r3, #0
   21954:	str	r3, [sp, #4]
   21958:	ldrd	r2, [sp]
   2195c:	umlal	r2, r3, ip, r0
   21960:	cmp	r3, #0
   21964:	movne	sl, #1
   21968:	movne	fp, #0
   2196c:	b	213c4 <__assert_fail@plt+0xf340>
   21970:	bl	11c7c <__stack_chk_fail@plt>
   21974:	ldr	r3, [pc, #16]	; 2198c <__assert_fail@plt+0xf908>
   21978:	mov	r2, #96	; 0x60
   2197c:	ldr	r1, [pc, #12]	; 21990 <__assert_fail@plt+0xf90c>
   21980:	ldr	r0, [pc, #12]	; 21994 <__assert_fail@plt+0xf910>
   21984:	bl	12084 <__assert_fail@plt>
   21988:	andeq	r5, r3, r0, lsl #30
   2198c:	andeq	r5, r2, ip, lsl r2
   21990:	andeq	r5, r2, ip, ror #2
   21994:	andeq	r5, r2, ip, ror r1
   21998:	push	{r4, r5, lr}
   2199c:	sub	sp, sp, #12
   219a0:	mov	r4, r0
   219a4:	bl	11f04 <fileno@plt>
   219a8:	cmp	r0, #0
   219ac:	mov	r0, r4
   219b0:	blt	21a2c <__assert_fail@plt+0xf9a8>
   219b4:	bl	11e20 <__freading@plt>
   219b8:	cmp	r0, #0
   219bc:	bne	219f8 <__assert_fail@plt+0xf974>
   219c0:	mov	r0, r4
   219c4:	bl	21b84 <__assert_fail@plt+0xfb00>
   219c8:	cmp	r0, #0
   219cc:	beq	21a28 <__assert_fail@plt+0xf9a4>
   219d0:	bl	11ea4 <__errno_location@plt>
   219d4:	mov	r5, r0
   219d8:	mov	r0, r4
   219dc:	ldr	r4, [r5]
   219e0:	bl	11f28 <fclose@plt>
   219e4:	cmp	r4, #0
   219e8:	mvnne	r0, #0
   219ec:	strne	r4, [r5]
   219f0:	add	sp, sp, #12
   219f4:	pop	{r4, r5, pc}
   219f8:	mov	r0, r4
   219fc:	bl	11f04 <fileno@plt>
   21a00:	mov	r3, #1
   21a04:	str	r3, [sp]
   21a08:	mov	r2, #0
   21a0c:	mov	r3, #0
   21a10:	bl	11d3c <lseek64@plt>
   21a14:	mvn	r3, #0
   21a18:	mvn	r2, #0
   21a1c:	cmp	r1, r3
   21a20:	cmpeq	r0, r2
   21a24:	bne	219c0 <__assert_fail@plt+0xf93c>
   21a28:	mov	r0, r4
   21a2c:	add	sp, sp, #12
   21a30:	pop	{r4, r5, lr}
   21a34:	b	11f28 <fclose@plt>
   21a38:	push	{r1, r2, r3}
   21a3c:	push	{r4, r5, r6, r7, r8, lr}
   21a40:	sub	sp, sp, #12
   21a44:	ldr	r4, [pc, #300]	; 21b78 <__assert_fail@plt+0xfaf4>
   21a48:	ldr	r3, [pc, #300]	; 21b7c <__assert_fail@plt+0xfaf8>
   21a4c:	ldr	r1, [sp, #36]	; 0x24
   21a50:	ldr	r2, [r4]
   21a54:	cmp	r1, r3
   21a58:	add	r3, sp, #40	; 0x28
   21a5c:	str	r2, [sp, #4]
   21a60:	str	r3, [sp]
   21a64:	bne	21b30 <__assert_fail@plt+0xfaac>
   21a68:	ldr	r6, [pc, #272]	; 21b80 <__assert_fail@plt+0xfafc>
   21a6c:	add	r3, sp, #44	; 0x2c
   21a70:	str	r3, [sp]
   21a74:	ldr	r3, [r6]
   21a78:	ldr	r7, [sp, #40]	; 0x28
   21a7c:	cmp	r3, #0
   21a80:	blt	21ac4 <__assert_fail@plt+0xfa40>
   21a84:	mov	r2, r7
   21a88:	mov	r8, r0
   21a8c:	bl	11f4c <fcntl64@plt>
   21a90:	subs	r5, r0, #0
   21a94:	blt	21b40 <__assert_fail@plt+0xfabc>
   21a98:	mov	r3, #1
   21a9c:	str	r3, [r6]
   21aa0:	ldr	r2, [sp, #4]
   21aa4:	ldr	r3, [r4]
   21aa8:	mov	r0, r5
   21aac:	cmp	r2, r3
   21ab0:	bne	21b74 <__assert_fail@plt+0xfaf0>
   21ab4:	add	sp, sp, #12
   21ab8:	pop	{r4, r5, r6, r7, r8, lr}
   21abc:	add	sp, sp, #12
   21ac0:	bx	lr
   21ac4:	mov	r2, r7
   21ac8:	mov	r1, #0
   21acc:	bl	21a38 <__assert_fail@plt+0xf9b4>
   21ad0:	subs	r5, r0, #0
   21ad4:	blt	21aa0 <__assert_fail@plt+0xfa1c>
   21ad8:	ldr	r3, [r6]
   21adc:	cmn	r3, #1
   21ae0:	bne	21aa0 <__assert_fail@plt+0xfa1c>
   21ae4:	mov	r1, #1
   21ae8:	mov	r0, r5
   21aec:	bl	11f4c <fcntl64@plt>
   21af0:	subs	r2, r0, #0
   21af4:	blt	21b10 <__assert_fail@plt+0xfa8c>
   21af8:	orr	r2, r2, #1
   21afc:	mov	r1, #2
   21b00:	mov	r0, r5
   21b04:	bl	11f4c <fcntl64@plt>
   21b08:	cmn	r0, #1
   21b0c:	bne	21aa0 <__assert_fail@plt+0xfa1c>
   21b10:	bl	11ea4 <__errno_location@plt>
   21b14:	mov	r6, r0
   21b18:	mov	r0, r5
   21b1c:	ldr	r7, [r6]
   21b20:	mvn	r5, #0
   21b24:	bl	1206c <close@plt>
   21b28:	str	r7, [r6]
   21b2c:	b	21aa0 <__assert_fail@plt+0xfa1c>
   21b30:	ldr	r2, [sp, #40]	; 0x28
   21b34:	bl	11f4c <fcntl64@plt>
   21b38:	mov	r5, r0
   21b3c:	b	21aa0 <__assert_fail@plt+0xfa1c>
   21b40:	bl	11ea4 <__errno_location@plt>
   21b44:	ldr	r3, [r0]
   21b48:	cmp	r3, #22
   21b4c:	bne	21a98 <__assert_fail@plt+0xfa14>
   21b50:	mov	r2, r7
   21b54:	mov	r0, r8
   21b58:	mov	r1, #0
   21b5c:	bl	21a38 <__assert_fail@plt+0xf9b4>
   21b60:	subs	r5, r0, #0
   21b64:	mvnge	r3, #0
   21b68:	strge	r3, [r6]
   21b6c:	bge	21ae4 <__assert_fail@plt+0xfa60>
   21b70:	b	21aa0 <__assert_fail@plt+0xfa1c>
   21b74:	bl	11c7c <__stack_chk_fail@plt>
   21b78:	andeq	r5, r3, r0, lsl #30
   21b7c:	andeq	r0, r0, r6, lsl #8
   21b80:	muleq	r3, r8, r9
   21b84:	push	{r4, lr}
   21b88:	subs	r4, r0, #0
   21b8c:	sub	sp, sp, #8
   21b90:	beq	21bac <__assert_fail@plt+0xfb28>
   21b94:	bl	11e20 <__freading@plt>
   21b98:	cmp	r0, #0
   21b9c:	beq	21bac <__assert_fail@plt+0xfb28>
   21ba0:	ldr	r3, [r4]
   21ba4:	tst	r3, #256	; 0x100
   21ba8:	bne	21bbc <__assert_fail@plt+0xfb38>
   21bac:	mov	r0, r4
   21bb0:	add	sp, sp, #8
   21bb4:	pop	{r4, lr}
   21bb8:	b	11b80 <fflush@plt>
   21bbc:	mov	r3, #1
   21bc0:	str	r3, [sp]
   21bc4:	mov	r2, #0
   21bc8:	mov	r3, #0
   21bcc:	mov	r0, r4
   21bd0:	bl	21be4 <__assert_fail@plt+0xfb60>
   21bd4:	mov	r0, r4
   21bd8:	add	sp, sp, #8
   21bdc:	pop	{r4, lr}
   21be0:	b	11b80 <fflush@plt>
   21be4:	push	{r4, r5, r6, r7, r8, lr}
   21be8:	sub	sp, sp, #8
   21bec:	ldmib	r0, {ip, lr}
   21bf0:	mov	r4, r0
   21bf4:	ldr	r5, [sp, #32]
   21bf8:	cmp	lr, ip
   21bfc:	beq	21c14 <__assert_fail@plt+0xfb90>
   21c00:	str	r5, [sp, #32]
   21c04:	mov	r0, r4
   21c08:	add	sp, sp, #8
   21c0c:	pop	{r4, r5, r6, r7, r8, lr}
   21c10:	b	11f40 <fseeko64@plt>
   21c14:	ldr	lr, [r0, #20]
   21c18:	ldr	ip, [r0, #16]
   21c1c:	cmp	lr, ip
   21c20:	bne	21c00 <__assert_fail@plt+0xfb7c>
   21c24:	ldr	r8, [r0, #36]	; 0x24
   21c28:	cmp	r8, #0
   21c2c:	bne	21c00 <__assert_fail@plt+0xfb7c>
   21c30:	mov	r6, r2
   21c34:	mov	r7, r3
   21c38:	bl	11f04 <fileno@plt>
   21c3c:	mov	r2, r6
   21c40:	mov	r3, r7
   21c44:	str	r5, [sp]
   21c48:	bl	11d3c <lseek64@plt>
   21c4c:	mvn	r3, #0
   21c50:	mvn	r2, #0
   21c54:	cmp	r1, r3
   21c58:	cmpeq	r0, r2
   21c5c:	beq	21c7c <__assert_fail@plt+0xfbf8>
   21c60:	ldr	r3, [r4]
   21c64:	strd	r0, [r4, #80]	; 0x50
   21c68:	mov	r0, r8
   21c6c:	bic	r3, r3, #16
   21c70:	str	r3, [r4]
   21c74:	add	sp, sp, #8
   21c78:	pop	{r4, r5, r6, r7, r8, pc}
   21c7c:	mvn	r0, #0
   21c80:	b	21c74 <__assert_fail@plt+0xfbf0>
   21c84:	push	{r4, r5, r6, r7, r8, lr}
   21c88:	subs	r7, r0, #0
   21c8c:	ldr	r5, [pc, #108]	; 21d00 <__assert_fail@plt+0xfc7c>
   21c90:	sub	sp, sp, #8
   21c94:	mov	r8, r1
   21c98:	ldr	r1, [r5]
   21c9c:	moveq	r7, sp
   21ca0:	str	r1, [sp, #4]
   21ca4:	mov	r0, r7
   21ca8:	mov	r1, r8
   21cac:	mov	r6, r2
   21cb0:	bl	11da8 <mbrtowc@plt>
   21cb4:	cmp	r6, #0
   21cb8:	cmnne	r0, #3
   21cbc:	mov	r4, r0
   21cc0:	bhi	21ce0 <__assert_fail@plt+0xfc5c>
   21cc4:	ldr	r2, [sp, #4]
   21cc8:	ldr	r3, [r5]
   21ccc:	mov	r0, r4
   21cd0:	cmp	r2, r3
   21cd4:	bne	21cfc <__assert_fail@plt+0xfc78>
   21cd8:	add	sp, sp, #8
   21cdc:	pop	{r4, r5, r6, r7, r8, pc}
   21ce0:	mov	r0, #0
   21ce4:	bl	1aec8 <__assert_fail@plt+0x8e44>
   21ce8:	cmp	r0, #0
   21cec:	moveq	r4, #1
   21cf0:	ldrbeq	r3, [r8]
   21cf4:	streq	r3, [r7]
   21cf8:	b	21cc4 <__assert_fail@plt+0xfc40>
   21cfc:	bl	11c7c <__stack_chk_fail@plt>
   21d00:	andeq	r5, r3, r0, lsl #30
   21d04:	ldr	r3, [pc, #52]	; 21d40 <__assert_fail@plt+0xfcbc>
   21d08:	push	{r4, lr}
   21d0c:	mov	r2, #5
   21d10:	ldr	r1, [pc, #44]	; 21d44 <__assert_fail@plt+0xfcc0>
   21d14:	mov	r0, #0
   21d18:	ldr	r4, [r3]
   21d1c:	bl	11c70 <dcgettext@plt>
   21d20:	ldr	r2, [pc, #32]	; 21d48 <__assert_fail@plt+0xfcc4>
   21d24:	mov	r1, #1
   21d28:	mov	r3, r0
   21d2c:	mov	r0, r4
   21d30:	bl	11f10 <__fprintf_chk@plt>
   21d34:	ldr	r3, [pc, #16]	; 21d4c <__assert_fail@plt+0xfcc8>
   21d38:	ldr	r0, [r3]
   21d3c:	bl	11e68 <exit@plt>
   21d40:	ldrdeq	r6, [r3], -r0
   21d44:	ldrdeq	r5, [r2], -ip
   21d48:	andeq	r4, r2, ip, asr #27
   21d4c:	andeq	r6, r3, r8, ror r2
   21d50:	ldrb	r2, [r0, #40]	; 0x28
   21d54:	ldr	r3, [r0, #28]
   21d58:	tst	r2, #1
   21d5c:	beq	21d68 <__assert_fail@plt+0xfce4>
   21d60:	ldr	r0, [r0, #36]	; 0x24
   21d64:	bx	r3
   21d68:	mov	r0, r1
   21d6c:	bx	r3
   21d70:	ldrb	r2, [r0, #40]	; 0x28
   21d74:	ldr	r3, [r0, #32]
   21d78:	tst	r2, #1
   21d7c:	beq	21d88 <__assert_fail@plt+0xfd04>
   21d80:	ldr	r0, [r0, #36]	; 0x24
   21d84:	bx	r3
   21d88:	mov	r0, r1
   21d8c:	bx	r3
   21d90:	push	{r4, r5, r6, lr}
   21d94:	subs	r5, r2, #0
   21d98:	ldr	r3, [pc, #128]	; 21e20 <__assert_fail@plt+0xfd9c>
   21d9c:	subne	r6, r5, #1
   21da0:	moveq	r6, #7
   21da4:	moveq	r5, #8
   21da8:	cmp	r1, #0
   21dac:	moveq	r1, r3
   21db0:	str	r6, [r0, #24]
   21db4:	str	r1, [r0]
   21db8:	mov	r4, r0
   21dbc:	bl	21d50 <__assert_fail@plt+0xfccc>
   21dc0:	cmp	r0, #0
   21dc4:	mov	r3, r0
   21dc8:	str	r0, [r4, #4]
   21dcc:	beq	21e14 <__assert_fail@plt+0xfd90>
   21dd0:	ldrb	ip, [r4, #40]	; 0x28
   21dd4:	add	r1, r0, #8
   21dd8:	ldr	r0, [r4]
   21ddc:	add	r1, r1, r6
   21de0:	rsb	r2, r5, #0
   21de4:	and	r2, r2, r1
   21de8:	bic	ip, ip, #6
   21dec:	add	r1, r3, r0
   21df0:	mov	lr, #0
   21df4:	str	r2, [r4, #8]
   21df8:	str	r2, [r4, #12]
   21dfc:	mov	r0, #1
   21e00:	str	r1, [r3]
   21e04:	str	r1, [r4, #16]
   21e08:	str	lr, [r3, #4]
   21e0c:	strb	ip, [r4, #40]	; 0x28
   21e10:	pop	{r4, r5, r6, pc}
   21e14:	ldr	r3, [pc, #8]	; 21e24 <__assert_fail@plt+0xfda0>
   21e18:	ldr	r3, [r3]
   21e1c:	blx	r3
   21e20:	andeq	r0, r0, r8, ror #31
   21e24:			; <UNDEFINED> instruction: 0x000362bc

00021e28 <_obstack_begin@@Base>:
   21e28:	push	{r4, lr}
   21e2c:	ldrb	lr, [r0, #40]	; 0x28
   21e30:	ldr	r4, [sp, #8]
   21e34:	str	r3, [r0, #28]
   21e38:	bic	lr, lr, #1
   21e3c:	str	r4, [r0, #32]
   21e40:	strb	lr, [r0, #40]	; 0x28
   21e44:	pop	{r4, lr}
   21e48:	b	21d90 <__assert_fail@plt+0xfd0c>

00021e4c <_obstack_begin_1@@Base>:
   21e4c:	push	{r4, lr}
   21e50:	ldrb	lr, [r0, #40]	; 0x28
   21e54:	ldr	r4, [sp, #8]
   21e58:	str	r3, [r0, #28]
   21e5c:	ldr	r3, [sp, #12]
   21e60:	orr	lr, lr, #1
   21e64:	str	r4, [r0, #32]
   21e68:	strb	lr, [r0, #40]	; 0x28
   21e6c:	str	r3, [r0, #36]	; 0x24
   21e70:	pop	{r4, lr}
   21e74:	b	21d90 <__assert_fail@plt+0xfd0c>

00021e78 <_obstack_newchunk@@Base>:
   21e78:	push	{r4, r5, r6, r7, r8, lr}
   21e7c:	ldr	r2, [r0, #8]
   21e80:	ldr	r6, [r0, #12]
   21e84:	ldr	r3, [r0, #24]
   21e88:	sub	r6, r6, r2
   21e8c:	adds	r1, r6, r1
   21e90:	ldr	lr, [r0]
   21e94:	movcs	ip, #1
   21e98:	movcc	ip, #0
   21e9c:	adds	r3, r3, r1
   21ea0:	movcs	r2, #1
   21ea4:	movcc	r2, #0
   21ea8:	add	r4, r3, r6, lsr #3
   21eac:	cmp	r3, lr
   21eb0:	add	r4, r4, #100	; 0x64
   21eb4:	movcc	r3, lr
   21eb8:	cmp	r3, r4
   21ebc:	eor	ip, ip, #1
   21ec0:	eor	r2, r2, #1
   21ec4:	movcs	r4, r3
   21ec8:	tst	ip, r2
   21ecc:	ldr	r7, [r0, #4]
   21ed0:	beq	21f78 <_obstack_newchunk@@Base+0x100>
   21ed4:	mov	r1, r4
   21ed8:	mov	r5, r0
   21edc:	bl	21d50 <__assert_fail@plt+0xfccc>
   21ee0:	subs	r8, r0, #0
   21ee4:	beq	21f78 <_obstack_newchunk@@Base+0x100>
   21ee8:	ldr	r1, [r5, #24]
   21eec:	mov	r2, r8
   21ef0:	add	r3, r8, r4
   21ef4:	str	r8, [r5, #4]
   21ef8:	str	r7, [r8, #4]
   21efc:	str	r3, [r5, #16]
   21f00:	str	r3, [r2], #8
   21f04:	add	r2, r2, r1
   21f08:	bic	r4, r2, r1
   21f0c:	mov	r0, r4
   21f10:	mov	r2, r6
   21f14:	ldr	r1, [r5, #8]
   21f18:	bl	11bec <memcpy@plt>
   21f1c:	ldrb	r3, [r5, #40]	; 0x28
   21f20:	tst	r3, #2
   21f24:	bne	21f44 <_obstack_newchunk@@Base+0xcc>
   21f28:	ldr	r2, [r5, #24]
   21f2c:	add	r3, r7, #8
   21f30:	add	r3, r3, r2
   21f34:	ldr	r1, [r5, #8]
   21f38:	bic	r3, r3, r2
   21f3c:	cmp	r1, r3
   21f40:	beq	21f60 <_obstack_newchunk@@Base+0xe8>
   21f44:	ldrb	r3, [r5, #40]	; 0x28
   21f48:	add	r6, r4, r6
   21f4c:	str	r6, [r5, #12]
   21f50:	bic	r3, r3, #2
   21f54:	str	r4, [r5, #8]
   21f58:	strb	r3, [r5, #40]	; 0x28
   21f5c:	pop	{r4, r5, r6, r7, r8, pc}
   21f60:	ldr	r3, [r7, #4]
   21f64:	mov	r1, r7
   21f68:	str	r3, [r8, #4]
   21f6c:	mov	r0, r5
   21f70:	bl	21d70 <__assert_fail@plt+0xfcec>
   21f74:	b	21f44 <_obstack_newchunk@@Base+0xcc>
   21f78:	ldr	r3, [pc, #4]	; 21f84 <_obstack_newchunk@@Base+0x10c>
   21f7c:	ldr	r3, [r3]
   21f80:	blx	r3
   21f84:			; <UNDEFINED> instruction: 0x000362bc

00021f88 <_obstack_allocated_p@@Base>:
   21f88:	ldr	r0, [r0, #4]
   21f8c:	cmp	r0, #0
   21f90:	bxeq	lr
   21f94:	cmp	r1, r0
   21f98:	bls	21f88 <_obstack_allocated_p@@Base>
   21f9c:	ldr	r3, [r0]
   21fa0:	cmp	r3, r1
   21fa4:	bcc	21f88 <_obstack_allocated_p@@Base>
   21fa8:	mov	r0, #1
   21fac:	bx	lr

00021fb0 <_obstack_free@@Base>:
   21fb0:	push	{r4, r5, r6, lr}
   21fb4:	mov	r6, r1
   21fb8:	ldr	r4, [r0, #4]
   21fbc:	cmp	r4, #0
   21fc0:	movne	r5, r0
   21fc4:	beq	22000 <_obstack_free@@Base+0x50>
   21fc8:	cmp	r4, r6
   21fcc:	bcs	21fdc <_obstack_free@@Base+0x2c>
   21fd0:	ldr	r2, [r4]
   21fd4:	cmp	r2, r6
   21fd8:	bcs	2200c <_obstack_free@@Base+0x5c>
   21fdc:	mov	r1, r4
   21fe0:	mov	r0, r5
   21fe4:	ldr	r4, [r4, #4]
   21fe8:	bl	21d70 <__assert_fail@plt+0xfcec>
   21fec:	ldrb	r2, [r5, #40]	; 0x28
   21ff0:	cmp	r4, #0
   21ff4:	orr	r2, r2, #2
   21ff8:	strb	r2, [r5, #40]	; 0x28
   21ffc:	bne	21fc8 <_obstack_free@@Base+0x18>
   22000:	cmp	r6, #0
   22004:	popeq	{r4, r5, r6, pc}
   22008:	bl	12060 <abort@plt>
   2200c:	str	r6, [r5, #12]
   22010:	str	r6, [r5, #8]
   22014:	str	r2, [r5, #16]
   22018:	str	r4, [r5, #4]
   2201c:	pop	{r4, r5, r6, pc}

00022020 <_obstack_memory_used@@Base>:
   22020:	ldr	r3, [r0, #4]
   22024:	cmp	r3, #0
   22028:	beq	2204c <_obstack_memory_used@@Base+0x2c>
   2202c:	mov	r0, #0
   22030:	ldr	r2, [r3]
   22034:	sub	r2, r2, r3
   22038:	ldr	r3, [r3, #4]
   2203c:	add	r0, r0, r2
   22040:	cmp	r3, #0
   22044:	bne	22030 <_obstack_memory_used@@Base+0x10>
   22048:	bx	lr
   2204c:	mov	r0, r3
   22050:	bx	lr
   22054:	push	{r4, r5, r6, lr}
   22058:	mov	r4, r0
   2205c:	bl	11d9c <__fpending@plt>
   22060:	ldr	r5, [r4]
   22064:	and	r5, r5, #32
   22068:	mov	r6, r0
   2206c:	mov	r0, r4
   22070:	bl	21998 <__assert_fail@plt+0xf914>
   22074:	cmp	r5, #0
   22078:	mov	r4, r0
   2207c:	bne	220a8 <_obstack_memory_used@@Base+0x88>
   22080:	cmp	r0, #0
   22084:	beq	220a0 <_obstack_memory_used@@Base+0x80>
   22088:	cmp	r6, #0
   2208c:	bne	220c0 <_obstack_memory_used@@Base+0xa0>
   22090:	bl	11ea4 <__errno_location@plt>
   22094:	ldr	r4, [r0]
   22098:	subs	r4, r4, #9
   2209c:	mvnne	r4, #0
   220a0:	mov	r0, r4
   220a4:	pop	{r4, r5, r6, pc}
   220a8:	cmp	r0, #0
   220ac:	bne	220c0 <_obstack_memory_used@@Base+0xa0>
   220b0:	bl	11ea4 <__errno_location@plt>
   220b4:	str	r4, [r0]
   220b8:	mvn	r4, #0
   220bc:	b	220a0 <_obstack_memory_used@@Base+0x80>
   220c0:	mvn	r4, #0
   220c4:	b	220a0 <_obstack_memory_used@@Base+0x80>
   220c8:	vldr	d7, [pc, #160]	; 22170 <_obstack_memory_used@@Base+0x150>
   220cc:	vcmpe.f64	d0, d7
   220d0:	vmrs	APSR_nzcv, fpscr
   220d4:	ble	22160 <_obstack_memory_used@@Base+0x140>
   220d8:	vldr	d7, [pc, #152]	; 22178 <_obstack_memory_used@@Base+0x158>
   220dc:	vcmpe.f64	d0, d7
   220e0:	vmrs	APSR_nzcv, fpscr
   220e4:	bmi	220f8 <_obstack_memory_used@@Base+0xd8>
   220e8:	ldr	r3, [pc, #152]	; 22188 <_obstack_memory_used@@Base+0x168>
   220ec:	mvn	r2, #-2147483648	; 0x80000000
   220f0:	strd	r2, [r0]
   220f4:	bx	lr
   220f8:	vcvt.s32.f64	s15, d0
   220fc:	vldr	d6, [pc, #124]	; 22180 <_obstack_memory_used@@Base+0x160>
   22100:	ldr	r2, [pc, #132]	; 2218c <_obstack_memory_used@@Base+0x16c>
   22104:	ldr	ip, [pc, #132]	; 22190 <_obstack_memory_used@@Base+0x170>
   22108:	vcvt.f64.s32	d5, s15
   2210c:	vsub.f64	d0, d0, d5
   22110:	vmul.f64	d0, d0, d6
   22114:	vcvt.s32.f64	s14, d0
   22118:	vcvt.f64.s32	d6, s14
   2211c:	vmov	r1, s14
   22120:	vcmpe.f64	d6, d0
   22124:	vmrs	APSR_nzcv, fpscr
   22128:	movmi	r3, #1
   2212c:	movpl	r3, #0
   22130:	add	r3, r3, r1
   22134:	smull	r2, r1, r2, r3
   22138:	asr	r2, r3, #31
   2213c:	rsb	r2, r2, r1, asr #28
   22140:	vmov	r1, s15
   22144:	add	r1, r2, r1
   22148:	mul	r2, ip, r2
   2214c:	subs	r3, r3, r2
   22150:	submi	r1, r1, #1
   22154:	addmi	r3, r3, ip
   22158:	stm	r0, {r1, r3}
   2215c:	bx	lr
   22160:	mov	r2, #-2147483648	; 0x80000000
   22164:	mov	r3, #0
   22168:	strd	r2, [r0]
   2216c:	bx	lr
   22170:	andeq	r0, r0, r0
   22174:	mvngt	r0, r0
   22178:	andeq	r0, r0, r0
   2217c:	mvnmi	r0, r0
   22180:	andeq	r0, r0, r0
   22184:	bicmi	ip, sp, r5, ror #26
   22188:	blcc	fe6d498c <optarg@@GLIBC_2.4+0xfe69e6ac>
   2218c:	ldrtmi	r2, [r8], #4001	; 0xfa1
   22190:	blcc	fe6d4998 <optarg@@GLIBC_2.4+0xfe69e6b8>
   22194:	cmp	r0, #2
   22198:	push	{r4, r5, r6, r7, r8, lr}
   2219c:	mov	r4, r0
   221a0:	bls	221ac <_obstack_memory_used@@Base+0x18c>
   221a4:	mov	r0, r4
   221a8:	pop	{r4, r5, r6, r7, r8, pc}
   221ac:	bl	221d8 <_obstack_memory_used@@Base+0x1b8>
   221b0:	mov	r7, r0
   221b4:	bl	11ea4 <__errno_location@plt>
   221b8:	mov	r5, r0
   221bc:	mov	r0, r4
   221c0:	ldr	r6, [r5]
   221c4:	mov	r4, r7
   221c8:	bl	1206c <close@plt>
   221cc:	str	r6, [r5]
   221d0:	mov	r0, r4
   221d4:	pop	{r4, r5, r6, r7, r8, pc}
   221d8:	ldr	r3, [pc, #12]	; 221ec <_obstack_memory_used@@Base+0x1cc>
   221dc:	ands	r1, r1, #524288	; 0x80000
   221e0:	movne	r1, r3
   221e4:	mov	r2, #3
   221e8:	b	21a38 <__assert_fail@plt+0xf9b4>
   221ec:	andeq	r0, r0, r6, lsl #8
   221f0:	push	{r4, r5, r6, lr}
   221f4:	mov	r5, r1
   221f8:	bl	11fdc <fopen64@plt>
   221fc:	subs	r4, r0, #0
   22200:	beq	22210 <_obstack_memory_used@@Base+0x1f0>
   22204:	bl	11f04 <fileno@plt>
   22208:	cmp	r0, #2
   2220c:	bls	22218 <_obstack_memory_used@@Base+0x1f8>
   22210:	mov	r0, r4
   22214:	pop	{r4, r5, r6, pc}
   22218:	bl	22428 <_obstack_memory_used@@Base+0x408>
   2221c:	subs	r6, r0, #0
   22220:	blt	22268 <_obstack_memory_used@@Base+0x248>
   22224:	mov	r0, r4
   22228:	bl	21998 <__assert_fail@plt+0xf914>
   2222c:	cmp	r0, #0
   22230:	bne	22248 <_obstack_memory_used@@Base+0x228>
   22234:	mov	r1, r5
   22238:	mov	r0, r6
   2223c:	bl	11b20 <fdopen@plt>
   22240:	subs	r4, r0, #0
   22244:	bne	22210 <_obstack_memory_used@@Base+0x1f0>
   22248:	bl	11ea4 <__errno_location@plt>
   2224c:	mov	r4, #0
   22250:	mov	r5, r0
   22254:	mov	r0, r6
   22258:	ldr	r6, [r5]
   2225c:	bl	1206c <close@plt>
   22260:	str	r6, [r5]
   22264:	b	22210 <_obstack_memory_used@@Base+0x1f0>
   22268:	bl	11ea4 <__errno_location@plt>
   2226c:	mov	r5, r0
   22270:	mov	r0, r4
   22274:	ldr	r6, [r5]
   22278:	mov	r4, #0
   2227c:	bl	21998 <__assert_fail@plt+0xf914>
   22280:	str	r6, [r5]
   22284:	b	22210 <_obstack_memory_used@@Base+0x1f0>
   22288:	push	{r4, lr}
   2228c:	mov	r0, #14
   22290:	bl	11fac <nl_langinfo@plt>
   22294:	cmp	r0, #0
   22298:	beq	222b0 <_obstack_memory_used@@Base+0x290>
   2229c:	ldrb	r2, [r0]
   222a0:	ldr	r3, [pc, #16]	; 222b8 <_obstack_memory_used@@Base+0x298>
   222a4:	cmp	r2, #0
   222a8:	moveq	r0, r3
   222ac:	pop	{r4, pc}
   222b0:	ldr	r0, [pc]	; 222b8 <_obstack_memory_used@@Base+0x298>
   222b4:	pop	{r4, pc}
   222b8:	andeq	r5, r2, r8, lsr #4
   222bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   222c0:	mov	r4, r0
   222c4:	mov	r8, r1
   222c8:	mov	r5, r2
   222cc:	mov	r7, r3
   222d0:	bl	11ea4 <__errno_location@plt>
   222d4:	mov	sl, #0
   222d8:	mov	r9, r0
   222dc:	b	22310 <_obstack_memory_used@@Base+0x2f0>
   222e0:	bl	11e80 <strlen@plt>
   222e4:	add	r6, r0, #1
   222e8:	mov	r0, r5
   222ec:	bl	11e80 <strlen@plt>
   222f0:	subs	r8, r8, r6
   222f4:	add	r4, r4, r6
   222f8:	add	r0, r0, #1
   222fc:	add	r5, r5, r0
   22300:	sub	r7, r7, r0
   22304:	beq	22334 <_obstack_memory_used@@Base+0x314>
   22308:	cmp	r7, #0
   2230c:	beq	22348 <_obstack_memory_used@@Base+0x328>
   22310:	str	sl, [r9]
   22314:	mov	r1, r5
   22318:	mov	r0, r4
   2231c:	bl	11dcc <strcoll@plt>
   22320:	subs	r3, r0, #0
   22324:	mov	r0, r4
   22328:	beq	222e0 <_obstack_memory_used@@Base+0x2c0>
   2232c:	mov	r0, r3
   22330:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22334:	adds	r7, r7, #0
   22338:	movne	r7, #1
   2233c:	rsb	r3, r7, #0
   22340:	mov	r0, r3
   22344:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22348:	mov	r3, #1
   2234c:	mov	r0, r3
   22350:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22354:	cmp	r1, r3
   22358:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2235c:	mov	r4, r1
   22360:	mov	r5, r3
   22364:	mov	r6, r2
   22368:	mov	r7, r0
   2236c:	bne	22384 <_obstack_memory_used@@Base+0x364>
   22370:	mov	r2, r1
   22374:	mov	r1, r6
   22378:	bl	11c64 <memcmp@plt>
   2237c:	subs	r8, r0, #0
   22380:	beq	223c0 <_obstack_memory_used@@Base+0x3a0>
   22384:	mov	r1, #0
   22388:	ldrb	sl, [r7, r4]
   2238c:	ldrb	r9, [r6, r5]
   22390:	add	r3, r5, #1
   22394:	strb	r1, [r7, r4]
   22398:	mov	r2, r6
   2239c:	strb	r1, [r6, r5]
   223a0:	mov	r0, r7
   223a4:	add	r1, r4, #1
   223a8:	bl	222bc <_obstack_memory_used@@Base+0x29c>
   223ac:	strb	sl, [r7, r4]
   223b0:	strb	r9, [r6, r5]
   223b4:	mov	r8, r0
   223b8:	mov	r0, r8
   223bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   223c0:	bl	11ea4 <__errno_location@plt>
   223c4:	str	r8, [r0]
   223c8:	mov	r0, r8
   223cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   223d0:	cmp	r1, r3
   223d4:	push	{r4, r5, r6, r7, r8, lr}
   223d8:	mov	r4, r1
   223dc:	mov	r5, r3
   223e0:	mov	r6, r2
   223e4:	mov	r7, r0
   223e8:	bne	22410 <_obstack_memory_used@@Base+0x3f0>
   223ec:	mov	r2, r1
   223f0:	mov	r1, r6
   223f4:	bl	11c64 <memcmp@plt>
   223f8:	subs	r8, r0, #0
   223fc:	bne	22410 <_obstack_memory_used@@Base+0x3f0>
   22400:	bl	11ea4 <__errno_location@plt>
   22404:	str	r8, [r0]
   22408:	mov	r0, r8
   2240c:	pop	{r4, r5, r6, r7, r8, pc}
   22410:	mov	r3, r5
   22414:	mov	r2, r6
   22418:	mov	r1, r4
   2241c:	mov	r0, r7
   22420:	pop	{r4, r5, r6, r7, r8, lr}
   22424:	b	222bc <_obstack_memory_used@@Base+0x29c>
   22428:	mov	r2, #3
   2242c:	mov	r1, #0
   22430:	b	21a38 <__assert_fail@plt+0xf9b4>
   22434:	subs	r2, r1, #1
   22438:	bxeq	lr
   2243c:	bcc	22614 <_obstack_memory_used@@Base+0x5f4>
   22440:	cmp	r0, r1
   22444:	bls	225f8 <_obstack_memory_used@@Base+0x5d8>
   22448:	tst	r1, r2
   2244c:	beq	22604 <_obstack_memory_used@@Base+0x5e4>
   22450:	clz	r3, r0
   22454:	clz	r2, r1
   22458:	sub	r3, r2, r3
   2245c:	rsbs	r3, r3, #31
   22460:	addne	r3, r3, r3, lsl #1
   22464:	mov	r2, #0
   22468:	addne	pc, pc, r3, lsl #2
   2246c:	nop			; (mov r0, r0)
   22470:	cmp	r0, r1, lsl #31
   22474:	adc	r2, r2, r2
   22478:	subcs	r0, r0, r1, lsl #31
   2247c:	cmp	r0, r1, lsl #30
   22480:	adc	r2, r2, r2
   22484:	subcs	r0, r0, r1, lsl #30
   22488:	cmp	r0, r1, lsl #29
   2248c:	adc	r2, r2, r2
   22490:	subcs	r0, r0, r1, lsl #29
   22494:	cmp	r0, r1, lsl #28
   22498:	adc	r2, r2, r2
   2249c:	subcs	r0, r0, r1, lsl #28
   224a0:	cmp	r0, r1, lsl #27
   224a4:	adc	r2, r2, r2
   224a8:	subcs	r0, r0, r1, lsl #27
   224ac:	cmp	r0, r1, lsl #26
   224b0:	adc	r2, r2, r2
   224b4:	subcs	r0, r0, r1, lsl #26
   224b8:	cmp	r0, r1, lsl #25
   224bc:	adc	r2, r2, r2
   224c0:	subcs	r0, r0, r1, lsl #25
   224c4:	cmp	r0, r1, lsl #24
   224c8:	adc	r2, r2, r2
   224cc:	subcs	r0, r0, r1, lsl #24
   224d0:	cmp	r0, r1, lsl #23
   224d4:	adc	r2, r2, r2
   224d8:	subcs	r0, r0, r1, lsl #23
   224dc:	cmp	r0, r1, lsl #22
   224e0:	adc	r2, r2, r2
   224e4:	subcs	r0, r0, r1, lsl #22
   224e8:	cmp	r0, r1, lsl #21
   224ec:	adc	r2, r2, r2
   224f0:	subcs	r0, r0, r1, lsl #21
   224f4:	cmp	r0, r1, lsl #20
   224f8:	adc	r2, r2, r2
   224fc:	subcs	r0, r0, r1, lsl #20
   22500:	cmp	r0, r1, lsl #19
   22504:	adc	r2, r2, r2
   22508:	subcs	r0, r0, r1, lsl #19
   2250c:	cmp	r0, r1, lsl #18
   22510:	adc	r2, r2, r2
   22514:	subcs	r0, r0, r1, lsl #18
   22518:	cmp	r0, r1, lsl #17
   2251c:	adc	r2, r2, r2
   22520:	subcs	r0, r0, r1, lsl #17
   22524:	cmp	r0, r1, lsl #16
   22528:	adc	r2, r2, r2
   2252c:	subcs	r0, r0, r1, lsl #16
   22530:	cmp	r0, r1, lsl #15
   22534:	adc	r2, r2, r2
   22538:	subcs	r0, r0, r1, lsl #15
   2253c:	cmp	r0, r1, lsl #14
   22540:	adc	r2, r2, r2
   22544:	subcs	r0, r0, r1, lsl #14
   22548:	cmp	r0, r1, lsl #13
   2254c:	adc	r2, r2, r2
   22550:	subcs	r0, r0, r1, lsl #13
   22554:	cmp	r0, r1, lsl #12
   22558:	adc	r2, r2, r2
   2255c:	subcs	r0, r0, r1, lsl #12
   22560:	cmp	r0, r1, lsl #11
   22564:	adc	r2, r2, r2
   22568:	subcs	r0, r0, r1, lsl #11
   2256c:	cmp	r0, r1, lsl #10
   22570:	adc	r2, r2, r2
   22574:	subcs	r0, r0, r1, lsl #10
   22578:	cmp	r0, r1, lsl #9
   2257c:	adc	r2, r2, r2
   22580:	subcs	r0, r0, r1, lsl #9
   22584:	cmp	r0, r1, lsl #8
   22588:	adc	r2, r2, r2
   2258c:	subcs	r0, r0, r1, lsl #8
   22590:	cmp	r0, r1, lsl #7
   22594:	adc	r2, r2, r2
   22598:	subcs	r0, r0, r1, lsl #7
   2259c:	cmp	r0, r1, lsl #6
   225a0:	adc	r2, r2, r2
   225a4:	subcs	r0, r0, r1, lsl #6
   225a8:	cmp	r0, r1, lsl #5
   225ac:	adc	r2, r2, r2
   225b0:	subcs	r0, r0, r1, lsl #5
   225b4:	cmp	r0, r1, lsl #4
   225b8:	adc	r2, r2, r2
   225bc:	subcs	r0, r0, r1, lsl #4
   225c0:	cmp	r0, r1, lsl #3
   225c4:	adc	r2, r2, r2
   225c8:	subcs	r0, r0, r1, lsl #3
   225cc:	cmp	r0, r1, lsl #2
   225d0:	adc	r2, r2, r2
   225d4:	subcs	r0, r0, r1, lsl #2
   225d8:	cmp	r0, r1, lsl #1
   225dc:	adc	r2, r2, r2
   225e0:	subcs	r0, r0, r1, lsl #1
   225e4:	cmp	r0, r1
   225e8:	adc	r2, r2, r2
   225ec:	subcs	r0, r0, r1
   225f0:	mov	r0, r2
   225f4:	bx	lr
   225f8:	moveq	r0, #1
   225fc:	movne	r0, #0
   22600:	bx	lr
   22604:	clz	r2, r1
   22608:	rsb	r2, r2, #31
   2260c:	lsr	r0, r0, r2
   22610:	bx	lr
   22614:	cmp	r0, #0
   22618:	mvnne	r0, #0
   2261c:	b	22a3c <_obstack_memory_used@@Base+0xa1c>
   22620:	cmp	r1, #0
   22624:	beq	22614 <_obstack_memory_used@@Base+0x5f4>
   22628:	push	{r0, r1, lr}
   2262c:	bl	22434 <_obstack_memory_used@@Base+0x414>
   22630:	pop	{r1, r2, lr}
   22634:	mul	r3, r2, r0
   22638:	sub	r1, r1, r3
   2263c:	bx	lr
   22640:	eor	r1, r1, #-2147483648	; 0x80000000
   22644:	b	2264c <_obstack_memory_used@@Base+0x62c>
   22648:	eor	r3, r3, #-2147483648	; 0x80000000
   2264c:	push	{r4, r5, lr}
   22650:	lsl	r4, r1, #1
   22654:	lsl	r5, r3, #1
   22658:	teq	r4, r5
   2265c:	teqeq	r0, r2
   22660:	orrsne	ip, r4, r0
   22664:	orrsne	ip, r5, r2
   22668:	mvnsne	ip, r4, asr #21
   2266c:	mvnsne	ip, r5, asr #21
   22670:	beq	2285c <_obstack_memory_used@@Base+0x83c>
   22674:	lsr	r4, r4, #21
   22678:	rsbs	r5, r4, r5, lsr #21
   2267c:	rsblt	r5, r5, #0
   22680:	ble	226a0 <_obstack_memory_used@@Base+0x680>
   22684:	add	r4, r4, r5
   22688:	eor	r2, r0, r2
   2268c:	eor	r3, r1, r3
   22690:	eor	r0, r2, r0
   22694:	eor	r1, r3, r1
   22698:	eor	r2, r0, r2
   2269c:	eor	r3, r1, r3
   226a0:	cmp	r5, #54	; 0x36
   226a4:	pophi	{r4, r5, pc}
   226a8:	tst	r1, #-2147483648	; 0x80000000
   226ac:	lsl	r1, r1, #12
   226b0:	mov	ip, #1048576	; 0x100000
   226b4:	orr	r1, ip, r1, lsr #12
   226b8:	beq	226c4 <_obstack_memory_used@@Base+0x6a4>
   226bc:	rsbs	r0, r0, #0
   226c0:	rsc	r1, r1, #0
   226c4:	tst	r3, #-2147483648	; 0x80000000
   226c8:	lsl	r3, r3, #12
   226cc:	orr	r3, ip, r3, lsr #12
   226d0:	beq	226dc <_obstack_memory_used@@Base+0x6bc>
   226d4:	rsbs	r2, r2, #0
   226d8:	rsc	r3, r3, #0
   226dc:	teq	r4, r5
   226e0:	beq	22844 <_obstack_memory_used@@Base+0x824>
   226e4:	sub	r4, r4, #1
   226e8:	rsbs	lr, r5, #32
   226ec:	blt	22708 <_obstack_memory_used@@Base+0x6e8>
   226f0:	lsl	ip, r2, lr
   226f4:	adds	r0, r0, r2, lsr r5
   226f8:	adc	r1, r1, #0
   226fc:	adds	r0, r0, r3, lsl lr
   22700:	adcs	r1, r1, r3, asr r5
   22704:	b	22724 <_obstack_memory_used@@Base+0x704>
   22708:	sub	r5, r5, #32
   2270c:	add	lr, lr, #32
   22710:	cmp	r2, #1
   22714:	lsl	ip, r3, lr
   22718:	orrcs	ip, ip, #2
   2271c:	adds	r0, r0, r3, asr r5
   22720:	adcs	r1, r1, r3, asr #31
   22724:	and	r5, r1, #-2147483648	; 0x80000000
   22728:	bpl	22738 <_obstack_memory_used@@Base+0x718>
   2272c:	rsbs	ip, ip, #0
   22730:	rscs	r0, r0, #0
   22734:	rsc	r1, r1, #0
   22738:	cmp	r1, #1048576	; 0x100000
   2273c:	bcc	2277c <_obstack_memory_used@@Base+0x75c>
   22740:	cmp	r1, #2097152	; 0x200000
   22744:	bcc	22764 <_obstack_memory_used@@Base+0x744>
   22748:	lsrs	r1, r1, #1
   2274c:	rrxs	r0, r0
   22750:	rrx	ip, ip
   22754:	add	r4, r4, #1
   22758:	lsl	r2, r4, #21
   2275c:	cmn	r2, #4194304	; 0x400000
   22760:	bcs	228bc <_obstack_memory_used@@Base+0x89c>
   22764:	cmp	ip, #-2147483648	; 0x80000000
   22768:	lsrseq	ip, r0, #1
   2276c:	adcs	r0, r0, #0
   22770:	adc	r1, r1, r4, lsl #20
   22774:	orr	r1, r1, r5
   22778:	pop	{r4, r5, pc}
   2277c:	lsls	ip, ip, #1
   22780:	adcs	r0, r0, r0
   22784:	adc	r1, r1, r1
   22788:	tst	r1, #1048576	; 0x100000
   2278c:	sub	r4, r4, #1
   22790:	bne	22764 <_obstack_memory_used@@Base+0x744>
   22794:	teq	r1, #0
   22798:	moveq	r1, r0
   2279c:	moveq	r0, #0
   227a0:	clz	r3, r1
   227a4:	addeq	r3, r3, #32
   227a8:	sub	r3, r3, #11
   227ac:	subs	r2, r3, #32
   227b0:	bge	227d4 <_obstack_memory_used@@Base+0x7b4>
   227b4:	adds	r2, r2, #12
   227b8:	ble	227d0 <_obstack_memory_used@@Base+0x7b0>
   227bc:	add	ip, r2, #20
   227c0:	rsb	r2, r2, #12
   227c4:	lsl	r0, r1, ip
   227c8:	lsr	r1, r1, r2
   227cc:	b	227e4 <_obstack_memory_used@@Base+0x7c4>
   227d0:	add	r2, r2, #20
   227d4:	rsble	ip, r2, #32
   227d8:	lsl	r1, r1, r2
   227dc:	orrle	r1, r1, r0, lsr ip
   227e0:	lslle	r0, r0, r2
   227e4:	subs	r4, r4, r3
   227e8:	addge	r1, r1, r4, lsl #20
   227ec:	orrge	r1, r1, r5
   227f0:	popge	{r4, r5, pc}
   227f4:	mvn	r4, r4
   227f8:	subs	r4, r4, #31
   227fc:	bge	22838 <_obstack_memory_used@@Base+0x818>
   22800:	adds	r4, r4, #12
   22804:	bgt	22820 <_obstack_memory_used@@Base+0x800>
   22808:	add	r4, r4, #20
   2280c:	rsb	r2, r4, #32
   22810:	lsr	r0, r0, r4
   22814:	orr	r0, r0, r1, lsl r2
   22818:	orr	r1, r5, r1, lsr r4
   2281c:	pop	{r4, r5, pc}
   22820:	rsb	r4, r4, #12
   22824:	rsb	r2, r4, #32
   22828:	lsr	r0, r0, r2
   2282c:	orr	r0, r0, r1, lsl r4
   22830:	mov	r1, r5
   22834:	pop	{r4, r5, pc}
   22838:	lsr	r0, r1, r4
   2283c:	mov	r1, r5
   22840:	pop	{r4, r5, pc}
   22844:	teq	r4, #0
   22848:	eor	r3, r3, #1048576	; 0x100000
   2284c:	eoreq	r1, r1, #1048576	; 0x100000
   22850:	addeq	r4, r4, #1
   22854:	subne	r5, r5, #1
   22858:	b	226e4 <_obstack_memory_used@@Base+0x6c4>
   2285c:	mvns	ip, r4, asr #21
   22860:	mvnsne	ip, r5, asr #21
   22864:	beq	228cc <_obstack_memory_used@@Base+0x8ac>
   22868:	teq	r4, r5
   2286c:	teqeq	r0, r2
   22870:	beq	22884 <_obstack_memory_used@@Base+0x864>
   22874:	orrs	ip, r4, r0
   22878:	moveq	r1, r3
   2287c:	moveq	r0, r2
   22880:	pop	{r4, r5, pc}
   22884:	teq	r1, r3
   22888:	movne	r1, #0
   2288c:	movne	r0, #0
   22890:	popne	{r4, r5, pc}
   22894:	lsrs	ip, r4, #21
   22898:	bne	228ac <_obstack_memory_used@@Base+0x88c>
   2289c:	lsls	r0, r0, #1
   228a0:	adcs	r1, r1, r1
   228a4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   228a8:	pop	{r4, r5, pc}
   228ac:	adds	r4, r4, #4194304	; 0x400000
   228b0:	addcc	r1, r1, #1048576	; 0x100000
   228b4:	popcc	{r4, r5, pc}
   228b8:	and	r5, r1, #-2147483648	; 0x80000000
   228bc:	orr	r1, r5, #2130706432	; 0x7f000000
   228c0:	orr	r1, r1, #15728640	; 0xf00000
   228c4:	mov	r0, #0
   228c8:	pop	{r4, r5, pc}
   228cc:	mvns	ip, r4, asr #21
   228d0:	movne	r1, r3
   228d4:	movne	r0, r2
   228d8:	mvnseq	ip, r5, asr #21
   228dc:	movne	r3, r1
   228e0:	movne	r2, r0
   228e4:	orrs	r4, r0, r1, lsl #12
   228e8:	orrseq	r5, r2, r3, lsl #12
   228ec:	teqeq	r1, r3
   228f0:	orrne	r1, r1, #524288	; 0x80000
   228f4:	pop	{r4, r5, pc}
   228f8:	teq	r0, #0
   228fc:	moveq	r1, #0
   22900:	bxeq	lr
   22904:	push	{r4, r5, lr}
   22908:	mov	r4, #1024	; 0x400
   2290c:	add	r4, r4, #50	; 0x32
   22910:	mov	r5, #0
   22914:	mov	r1, #0
   22918:	b	22794 <_obstack_memory_used@@Base+0x774>
   2291c:	teq	r0, #0
   22920:	moveq	r1, #0
   22924:	bxeq	lr
   22928:	push	{r4, r5, lr}
   2292c:	mov	r4, #1024	; 0x400
   22930:	add	r4, r4, #50	; 0x32
   22934:	ands	r5, r0, #-2147483648	; 0x80000000
   22938:	rsbmi	r0, r0, #0
   2293c:	mov	r1, #0
   22940:	b	22794 <_obstack_memory_used@@Base+0x774>
   22944:	lsls	r2, r0, #1
   22948:	asr	r1, r2, #3
   2294c:	rrx	r1, r1
   22950:	lsl	r0, r2, #28
   22954:	andsne	r3, r2, #-16777216	; 0xff000000
   22958:	teqne	r3, #-16777216	; 0xff000000
   2295c:	eorne	r1, r1, #939524096	; 0x38000000
   22960:	bxne	lr
   22964:	bics	r2, r2, #-16777216	; 0xff000000
   22968:	bxeq	lr
   2296c:	teq	r3, #-16777216	; 0xff000000
   22970:	orreq	r1, r1, #524288	; 0x80000
   22974:	bxeq	lr
   22978:	push	{r4, r5, lr}
   2297c:	mov	r4, #896	; 0x380
   22980:	and	r5, r1, #-2147483648	; 0x80000000
   22984:	bic	r1, r1, #-2147483648	; 0x80000000
   22988:	b	22794 <_obstack_memory_used@@Base+0x774>
   2298c:	orrs	r2, r0, r1
   22990:	bxeq	lr
   22994:	push	{r4, r5, lr}
   22998:	mov	r5, #0
   2299c:	b	229bc <_obstack_memory_used@@Base+0x99c>
   229a0:	orrs	r2, r0, r1
   229a4:	bxeq	lr
   229a8:	push	{r4, r5, lr}
   229ac:	ands	r5, r1, #-2147483648	; 0x80000000
   229b0:	bpl	229bc <_obstack_memory_used@@Base+0x99c>
   229b4:	rsbs	r0, r0, #0
   229b8:	rsc	r1, r1, #0
   229bc:	mov	r4, #1024	; 0x400
   229c0:	add	r4, r4, #50	; 0x32
   229c4:	lsrs	ip, r1, #22
   229c8:	beq	22738 <_obstack_memory_used@@Base+0x718>
   229cc:	mov	r2, #3
   229d0:	lsrs	ip, ip, #3
   229d4:	addne	r2, r2, #3
   229d8:	lsrs	ip, ip, #3
   229dc:	addne	r2, r2, #3
   229e0:	add	r2, r2, ip, lsr #3
   229e4:	rsb	r3, r2, #32
   229e8:	lsl	ip, r0, r3
   229ec:	lsr	r0, r0, r2
   229f0:	orr	r0, r0, r1, lsl r3
   229f4:	lsr	r1, r1, r2
   229f8:	add	r4, r4, r2
   229fc:	b	22738 <_obstack_memory_used@@Base+0x718>
   22a00:	cmp	r3, #0
   22a04:	cmpeq	r2, #0
   22a08:	bne	22a20 <_obstack_memory_used@@Base+0xa00>
   22a0c:	cmp	r1, #0
   22a10:	cmpeq	r0, #0
   22a14:	mvnne	r1, #0
   22a18:	mvnne	r0, #0
   22a1c:	b	22a3c <_obstack_memory_used@@Base+0xa1c>
   22a20:	sub	sp, sp, #8
   22a24:	push	{sp, lr}
   22a28:	bl	22a90 <_obstack_memory_used@@Base+0xa70>
   22a2c:	ldr	lr, [sp, #4]
   22a30:	add	sp, sp, #8
   22a34:	pop	{r2, r3}
   22a38:	bx	lr
   22a3c:	push	{r1, lr}
   22a40:	mov	r0, #8
   22a44:	bl	11b44 <raise@plt>
   22a48:	pop	{r1, pc}
   22a4c:	andeq	r0, r0, r0
   22a50:	vmov	d6, r0, r1
   22a54:	vldr	d7, [pc, #36]	; 22a80 <_obstack_memory_used@@Base+0xa60>
   22a58:	vldr	d5, [pc, #40]	; 22a88 <_obstack_memory_used@@Base+0xa68>
   22a5c:	vmul.f64	d7, d6, d7
   22a60:	vcvt.u32.f64	s14, d7
   22a64:	vcvt.f64.u32	d4, s14
   22a68:	vmov	r1, s14
   22a6c:	vmls.f64	d6, d4, d5
   22a70:	vcvt.u32.f64	s15, d6
   22a74:	vmov	r0, s15
   22a78:	bx	lr
   22a7c:	nop			; (mov r0, r0)
   22a80:	andeq	r0, r0, r0
   22a84:	ldclcc	0, cr0, [r0]
   22a88:	andeq	r0, r0, r0
   22a8c:	mvnsmi	r0, r0
   22a90:	cmp	r1, r3
   22a94:	cmpeq	r0, r2
   22a98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a9c:	mov	r4, r0
   22aa0:	movcc	r0, #0
   22aa4:	mov	r5, r1
   22aa8:	ldr	lr, [sp, #36]	; 0x24
   22aac:	movcc	r1, r0
   22ab0:	bcc	22bac <_obstack_memory_used@@Base+0xb8c>
   22ab4:	cmp	r3, #0
   22ab8:	clzeq	ip, r2
   22abc:	clzne	ip, r3
   22ac0:	addeq	ip, ip, #32
   22ac4:	cmp	r5, #0
   22ac8:	clzeq	r1, r4
   22acc:	addeq	r1, r1, #32
   22ad0:	clzne	r1, r5
   22ad4:	sub	ip, ip, r1
   22ad8:	sub	sl, ip, #32
   22adc:	lsl	r9, r3, ip
   22ae0:	rsb	fp, ip, #32
   22ae4:	orr	r9, r9, r2, lsl sl
   22ae8:	orr	r9, r9, r2, lsr fp
   22aec:	lsl	r8, r2, ip
   22af0:	cmp	r5, r9
   22af4:	cmpeq	r4, r8
   22af8:	movcc	r0, #0
   22afc:	movcc	r1, r0
   22b00:	bcc	22b1c <_obstack_memory_used@@Base+0xafc>
   22b04:	mov	r0, #1
   22b08:	subs	r4, r4, r8
   22b0c:	lsl	r1, r0, sl
   22b10:	orr	r1, r1, r0, lsr fp
   22b14:	lsl	r0, r0, ip
   22b18:	sbc	r5, r5, r9
   22b1c:	cmp	ip, #0
   22b20:	beq	22bac <_obstack_memory_used@@Base+0xb8c>
   22b24:	lsr	r6, r8, #1
   22b28:	orr	r6, r6, r9, lsl #31
   22b2c:	lsr	r7, r9, #1
   22b30:	mov	r2, ip
   22b34:	b	22b58 <_obstack_memory_used@@Base+0xb38>
   22b38:	subs	r3, r4, r6
   22b3c:	sbc	r8, r5, r7
   22b40:	adds	r3, r3, r3
   22b44:	adc	r8, r8, r8
   22b48:	adds	r4, r3, #1
   22b4c:	adc	r5, r8, #0
   22b50:	subs	r2, r2, #1
   22b54:	beq	22b74 <_obstack_memory_used@@Base+0xb54>
   22b58:	cmp	r5, r7
   22b5c:	cmpeq	r4, r6
   22b60:	bcs	22b38 <_obstack_memory_used@@Base+0xb18>
   22b64:	adds	r4, r4, r4
   22b68:	adc	r5, r5, r5
   22b6c:	subs	r2, r2, #1
   22b70:	bne	22b58 <_obstack_memory_used@@Base+0xb38>
   22b74:	lsr	r3, r4, ip
   22b78:	orr	r3, r3, r5, lsl fp
   22b7c:	lsr	r2, r5, ip
   22b80:	orr	r3, r3, r5, lsr sl
   22b84:	adds	r0, r0, r4
   22b88:	mov	r4, r3
   22b8c:	lsl	r3, r2, ip
   22b90:	orr	r3, r3, r4, lsl sl
   22b94:	lsl	ip, r4, ip
   22b98:	orr	r3, r3, r4, lsr fp
   22b9c:	adc	r1, r1, r5
   22ba0:	subs	r0, r0, ip
   22ba4:	mov	r5, r2
   22ba8:	sbc	r1, r1, r3
   22bac:	cmp	lr, #0
   22bb0:	strdne	r4, [lr]
   22bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22bb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22bbc:	mov	r7, r0
   22bc0:	ldr	r6, [pc, #72]	; 22c10 <_obstack_memory_used@@Base+0xbf0>
   22bc4:	ldr	r5, [pc, #72]	; 22c14 <_obstack_memory_used@@Base+0xbf4>
   22bc8:	add	r6, pc, r6
   22bcc:	add	r5, pc, r5
   22bd0:	sub	r6, r6, r5
   22bd4:	mov	r8, r1
   22bd8:	mov	r9, r2
   22bdc:	bl	11af4 <pthread_mutex_unlock@plt-0x20>
   22be0:	asrs	r6, r6, #2
   22be4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   22be8:	mov	r4, #0
   22bec:	add	r4, r4, #1
   22bf0:	ldr	r3, [r5], #4
   22bf4:	mov	r2, r9
   22bf8:	mov	r1, r8
   22bfc:	mov	r0, r7
   22c00:	blx	r3
   22c04:	cmp	r6, r4
   22c08:	bne	22bec <_obstack_memory_used@@Base+0xbcc>
   22c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22c10:	andeq	r3, r1, ip, lsr #6
   22c14:	andeq	r3, r1, r4, lsr #6
   22c18:	bx	lr
   22c1c:	ldr	r3, [pc, #12]	; 22c30 <_obstack_memory_used@@Base+0xc10>
   22c20:	mov	r1, #0
   22c24:	add	r3, pc, r3
   22c28:	ldr	r2, [r3]
   22c2c:	b	11eb0 <__cxa_atexit@plt>
   22c30:			; <UNDEFINED> instruction: 0x000135bc

Disassembly of section .fini:

00022c34 <.fini>:
   22c34:	push	{r3, lr}
   22c38:	pop	{r3, pc}
