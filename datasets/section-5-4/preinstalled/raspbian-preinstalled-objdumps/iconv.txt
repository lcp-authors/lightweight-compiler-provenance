
raspbian-preinstalled/iconv:     file format elf32-littlearm


Disassembly of section .init:

00011760 <.init>:
   11760:	push	{r3, lr}
   11764:	bl	123a0 <__assert_fail@plt+0x7f4>
   11768:	pop	{r3, pc}

Disassembly of section .plt:

0001176c <fdopen@plt-0x14>:
   1176c:	push	{lr}		; (str lr, [sp, #-4]!)
   11770:	ldr	lr, [pc, #4]	; 1177c <fdopen@plt-0x4>
   11774:	add	lr, pc, lr
   11778:	ldr	pc, [lr, #8]!
   1177c:	andeq	r9, r1, r4, lsl #17

00011780 <fdopen@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #102400	; 0x19000
   11788:	ldr	pc, [ip, #2180]!	; 0x884

0001178c <calloc@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #102400	; 0x19000
   11794:	ldr	pc, [ip, #2172]!	; 0x87c

00011798 <strstr@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #102400	; 0x19000
   117a0:	ldr	pc, [ip, #2164]!	; 0x874

000117a4 <raise@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #102400	; 0x19000
   117ac:	ldr	pc, [ip, #2156]!	; 0x86c

000117b0 <vasprintf@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #102400	; 0x19000
   117b8:	ldr	pc, [ip, #2148]!	; 0x864

000117bc <strverscmp@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #102400	; 0x19000
   117c4:	ldr	pc, [ip, #2140]!	; 0x85c

000117c8 <iconv_close@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #102400	; 0x19000
   117d0:	ldr	pc, [ip, #2132]!	; 0x854

000117d4 <iconv@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #102400	; 0x19000
   117dc:	ldr	pc, [ip, #2124]!	; 0x84c

000117e0 <strcmp@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #102400	; 0x19000
   117e8:	ldr	pc, [ip, #2116]!	; 0x844

000117ec <posix_spawn_file_actions_adddup2@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #102400	; 0x19000
   117f4:	ldr	pc, [ip, #2108]!	; 0x83c

000117f8 <basename@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #102400	; 0x19000
   11800:	ldr	pc, [ip, #2100]!	; 0x834

00011804 <printf@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #102400	; 0x19000
   1180c:	ldr	pc, [ip, #2092]!	; 0x82c

00011810 <fopen@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #102400	; 0x19000
   11818:	ldr	pc, [ip, #2084]!	; 0x824

0001181c <read@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #102400	; 0x19000
   11824:	ldr	pc, [ip, #2076]!	; 0x81c

00011828 <__dcgettext@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #102400	; 0x19000
   11830:	ldr	pc, [ip, #2068]!	; 0x814

00011834 <strchrnul@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #102400	; 0x19000
   1183c:	ldr	pc, [ip, #2060]!	; 0x80c

00011840 <free@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #102400	; 0x19000
   11848:	ldr	pc, [ip, #2052]!	; 0x804

0001184c <fgets@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #102400	; 0x19000
   11854:	ldr	pc, [ip, #2044]!	; 0x7fc

00011858 <ferror@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #102400	; 0x19000
   11860:	ldr	pc, [ip, #2036]!	; 0x7f4

00011864 <memcpy@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #102400	; 0x19000
   1186c:	ldr	pc, [ip, #2028]!	; 0x7ec

00011870 <__mempcpy@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #102400	; 0x19000
   11878:	ldr	pc, [ip, #2020]!	; 0x7e4

0001187c <memcmp@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #102400	; 0x19000
   11884:	ldr	pc, [ip, #2012]!	; 0x7dc

00011888 <_obstack_newchunk@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #102400	; 0x19000
   11890:	ldr	pc, [ip, #2004]!	; 0x7d4

00011894 <dcgettext@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #102400	; 0x19000
   1189c:	ldr	pc, [ip, #1996]!	; 0x7cc

000118a0 <strdup@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #102400	; 0x19000
   118a8:	ldr	pc, [ip, #1988]!	; 0x7c4

000118ac <__stack_chk_fail@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #102400	; 0x19000
   118b4:	ldr	pc, [ip, #1980]!	; 0x7bc

000118b8 <obstack_free@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #102400	; 0x19000
   118c0:	ldr	pc, [ip, #1972]!	; 0x7b4

000118c4 <_obstack_begin@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #102400	; 0x19000
   118cc:	ldr	pc, [ip, #1964]!	; 0x7ac

000118d0 <realloc@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #102400	; 0x19000
   118d8:	ldr	pc, [ip, #1956]!	; 0x7a4

000118dc <textdomain@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #102400	; 0x19000
   118e4:	ldr	pc, [ip, #1948]!	; 0x79c

000118e8 <posix_spawn_file_actions_init@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #102400	; 0x19000
   118f0:	ldr	pc, [ip, #1940]!	; 0x794

000118f4 <strcasecmp@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #102400	; 0x19000
   118fc:	ldr	pc, [ip, #1932]!	; 0x78c

00011900 <__gconv_get_cache@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #102400	; 0x19000
   11908:	ldr	pc, [ip, #1924]!	; 0x784

0001190c <__fxstat64@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #102400	; 0x19000
   11914:	ldr	pc, [ip, #1916]!	; 0x77c

00011918 <fwrite@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #102400	; 0x19000
   11920:	ldr	pc, [ip, #1908]!	; 0x774

00011924 <__gconv_get_modules_db@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #102400	; 0x19000
   1192c:	ldr	pc, [ip, #1900]!	; 0x76c

00011930 <posix_spawn_file_actions_addclose@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #102400	; 0x19000
   11938:	ldr	pc, [ip, #1892]!	; 0x764

0001193c <strcpy@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #102400	; 0x19000
   11944:	ldr	pc, [ip, #1884]!	; 0x75c

00011948 <error@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #102400	; 0x19000
   11950:	ldr	pc, [ip, #1876]!	; 0x754

00011954 <opendir@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #102400	; 0x19000
   1195c:	ldr	pc, [ip, #1868]!	; 0x74c

00011960 <getenv@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #102400	; 0x19000
   11968:	ldr	pc, [ip, #1860]!	; 0x744

0001196c <puts@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #102400	; 0x19000
   11974:	ldr	pc, [ip, #1852]!	; 0x73c

00011978 <malloc@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #102400	; 0x19000
   11980:	ldr	pc, [ip, #1844]!	; 0x734

00011984 <error_at_line@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #102400	; 0x19000
   1198c:	ldr	pc, [ip, #1836]!	; 0x72c

00011990 <iconv_open@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #102400	; 0x19000
   11998:	ldr	pc, [ip, #1828]!	; 0x724

0001199c <__libc_start_main@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #102400	; 0x19000
   119a4:	ldr	pc, [ip, #1820]!	; 0x71c

000119a8 <strsep@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #102400	; 0x19000
   119b0:	ldr	pc, [ip, #1812]!	; 0x714

000119b4 <__ctype_tolower_loc@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #102400	; 0x19000
   119bc:	ldr	pc, [ip, #1804]!	; 0x70c

000119c0 <__gmon_start__@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #102400	; 0x19000
   119c8:	ldr	pc, [ip, #1796]!	; 0x704

000119cc <open@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #102400	; 0x19000
   119d4:	ldr	pc, [ip, #1788]!	; 0x6fc

000119d8 <__ctype_b_loc@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #102400	; 0x19000
   119e0:	ldr	pc, [ip, #1780]!	; 0x6f4

000119e4 <exit@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #102400	; 0x19000
   119ec:	ldr	pc, [ip, #1772]!	; 0x6ec

000119f0 <feof@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #102400	; 0x19000
   119f8:	ldr	pc, [ip, #1764]!	; 0x6e4

000119fc <strtoul@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #102400	; 0x19000
   11a04:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a08 <strlen@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #102400	; 0x19000
   11a10:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a14 <mmap@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #102400	; 0x19000
   11a1c:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a20 <strchr@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #102400	; 0x19000
   11a28:	ldr	pc, [ip, #1732]!	; 0x6c4

00011a2c <fprintf@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #102400	; 0x19000
   11a34:	ldr	pc, [ip, #1724]!	; 0x6bc

00011a38 <__errno_location@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #102400	; 0x19000
   11a40:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a44 <argp_help@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #102400	; 0x19000
   11a4c:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a50 <snprintf@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #102400	; 0x19000
   11a58:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a5c <tsearch@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #102400	; 0x19000
   11a64:	ldr	pc, [ip, #1692]!	; 0x69c

00011a68 <memset@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #102400	; 0x19000
   11a70:	ldr	pc, [ip, #1684]!	; 0x694

00011a74 <argp_parse@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #102400	; 0x19000
   11a7c:	ldr	pc, [ip, #1676]!	; 0x68c

00011a80 <obstack_printf@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #102400	; 0x19000
   11a88:	ldr	pc, [ip, #1668]!	; 0x684

00011a8c <fscanf@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #102400	; 0x19000
   11a94:	ldr	pc, [ip, #1660]!	; 0x67c

00011a98 <posix_spawnp@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #102400	; 0x19000
   11aa0:	ldr	pc, [ip, #1652]!	; 0x674

00011aa4 <fileno@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #102400	; 0x19000
   11aac:	ldr	pc, [ip, #1644]!	; 0x66c

00011ab0 <asprintf@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #102400	; 0x19000
   11ab8:	ldr	pc, [ip, #1636]!	; 0x664

00011abc <fclose@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #102400	; 0x19000
   11ac4:	ldr	pc, [ip, #1628]!	; 0x65c

00011ac8 <pipe@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #102400	; 0x19000
   11ad0:	ldr	pc, [ip, #1620]!	; 0x654

00011ad4 <munmap@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #102400	; 0x19000
   11adc:	ldr	pc, [ip, #1612]!	; 0x64c

00011ae0 <__overflow@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #102400	; 0x19000
   11ae8:	ldr	pc, [ip, #1604]!	; 0x644

00011aec <setlocale@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #102400	; 0x19000
   11af4:	ldr	pc, [ip, #1596]!	; 0x63c

00011af8 <posix_spawn_file_actions_destroy@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #102400	; 0x19000
   11b00:	ldr	pc, [ip, #1588]!	; 0x634

00011b04 <nl_langinfo@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #102400	; 0x19000
   11b0c:	ldr	pc, [ip, #1580]!	; 0x62c

00011b10 <readdir64@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #102400	; 0x19000
   11b18:	ldr	pc, [ip, #1572]!	; 0x624

00011b1c <putc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #102400	; 0x19000
   11b24:	ldr	pc, [ip, #1564]!	; 0x61c

00011b28 <getdelim@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #102400	; 0x19000
   11b30:	ldr	pc, [ip, #1556]!	; 0x614

00011b34 <__stpcpy@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #102400	; 0x19000
   11b3c:	ldr	pc, [ip, #1548]!	; 0x60c

00011b40 <__xstat64@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #102400	; 0x19000
   11b48:	ldr	pc, [ip, #1540]!	; 0x604

00011b4c <isatty@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #102400	; 0x19000
   11b54:	ldr	pc, [ip, #1532]!	; 0x5fc

00011b58 <fputs@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #102400	; 0x19000
   11b60:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b64 <strncmp@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #102400	; 0x19000
   11b6c:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b70 <abort@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #102400	; 0x19000
   11b78:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b7c <__gconv_get_alias_db@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #102400	; 0x19000
   11b84:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b88 <twalk@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #102400	; 0x19000
   11b90:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b94 <close@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #102400	; 0x19000
   11b9c:	ldr	pc, [ip, #1484]!	; 0x5cc

00011ba0 <closedir@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #102400	; 0x19000
   11ba8:	ldr	pc, [ip, #1476]!	; 0x5c4

00011bac <__assert_fail@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #102400	; 0x19000
   11bb4:	ldr	pc, [ip, #1468]!	; 0x5bc

Disassembly of section .text:

00011bb8 <.text>:
   11bb8:	ldr	r3, [pc, #1828]	; 122e4 <__assert_fail@plt+0x738>
   11bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc0:	add	fp, sp, #32
   11bc4:	sub	sp, sp, #148	; 0x94
   11bc8:	ldr	r3, [r3]
   11bcc:	mov	r7, r0
   11bd0:	mov	r6, r1
   11bd4:	mov	r0, #6
   11bd8:	ldr	r1, [pc, #1800]	; 122e8 <__assert_fail@plt+0x73c>
   11bdc:	str	r3, [fp, #-40]	; 0xffffffd8
   11be0:	ldr	r8, [pc, #1796]	; 122ec <__assert_fail@plt+0x740>
   11be4:	bl	11aec <setlocale@plt>
   11be8:	ldr	r5, [pc, #1792]	; 122f0 <__assert_fail@plt+0x744>
   11bec:	ldr	r0, [pc, #1792]	; 122f4 <__assert_fail@plt+0x748>
   11bf0:	bl	118dc <textdomain@plt>
   11bf4:	mov	r4, #0
   11bf8:	sub	ip, fp, #156	; 0x9c
   11bfc:	mov	r3, r4
   11c00:	mov	r2, r6
   11c04:	mov	r1, r7
   11c08:	add	r0, r8, #8
   11c0c:	str	r4, [sp, #4]
   11c10:	str	ip, [sp]
   11c14:	bl	11a74 <argp_parse@plt>
   11c18:	ldr	r3, [r5, #4]
   11c1c:	cmp	r3, r4
   11c20:	str	r3, [fp, #-160]	; 0xffffff60
   11c24:	bne	11eb8 <__assert_fail@plt+0x30c>
   11c28:	ldr	r3, [pc, #1736]	; 122f8 <__assert_fail@plt+0x74c>
   11c2c:	ldr	r4, [r8, #4]
   11c30:	ldr	r3, [r3]
   11c34:	cmp	r3, #0
   11c38:	beq	11cb4 <__assert_fail@plt+0x108>
   11c3c:	mov	r1, #47	; 0x2f
   11c40:	mov	r0, r4
   11c44:	bl	11834 <strchrnul@plt>
   11c48:	ldrb	sl, [r0]
   11c4c:	cmp	sl, #47	; 0x2f
   11c50:	beq	120a8 <__assert_fail@plt+0x4fc>
   11c54:	sub	r2, r0, r4
   11c58:	add	r3, r2, #17
   11c5c:	bic	r3, r3, #7
   11c60:	sub	sp, sp, r3
   11c64:	add	r9, sp, #16
   11c68:	mov	r0, r9
   11c6c:	mov	r1, r4
   11c70:	bl	11870 <__mempcpy@plt>
   11c74:	mov	r2, #47	; 0x2f
   11c78:	mov	r3, r0
   11c7c:	strb	r2, [r3], #2
   11c80:	strb	r2, [r0, #1]
   11c84:	ldrb	r2, [r3, #-1]
   11c88:	str	r9, [r8, #4]
   11c8c:	cmp	r2, #47	; 0x2f
   11c90:	movne	r2, #44	; 0x2c
   11c94:	strbne	r2, [r3], #1
   11c98:	ldr	r2, [pc, #1628]	; 122fc <__assert_fail@plt+0x750>
   11c9c:	ldrh	ip, [r2, #4]
   11ca0:	ldrb	r1, [r2, #6]
   11ca4:	ldr	r0, [r2]
   11ca8:	strh	ip, [r3, #4]
   11cac:	strb	r1, [r3, #6]
   11cb0:	str	r0, [r3]
   11cb4:	ldr	sl, [r8]
   11cb8:	mov	r1, #47	; 0x2f
   11cbc:	mov	r0, sl
   11cc0:	bl	11a20 <strchr@plt>
   11cc4:	subs	r9, r0, #0
   11cc8:	beq	11d68 <__assert_fail@plt+0x1bc>
   11ccc:	mov	r3, #0
   11cd0:	str	r3, [sp]
   11cd4:	mov	r2, r3
   11cd8:	mov	r1, #1
   11cdc:	mov	r0, sl
   11ce0:	bl	1557c <__assert_fail@plt+0x39d0>
   11ce4:	mov	r1, #47	; 0x2f
   11ce8:	mov	r9, r0
   11cec:	mov	r0, r4
   11cf0:	bl	11a20 <strchr@plt>
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d14 <__assert_fail@plt+0x168>
   11cfc:	mov	r3, #0
   11d00:	str	r3, [sp]
   11d04:	mov	r2, r3
   11d08:	mov	r1, #1
   11d0c:	mov	r0, r4
   11d10:	bl	1557c <__assert_fail@plt+0x39d0>
   11d14:	orrs	r3, r0, r9
   11d18:	beq	11d7c <__assert_fail@plt+0x1d0>
   11d1c:	ldr	r3, [r5]
   11d20:	ldr	r2, [fp, #-156]	; 0xffffff64
   11d24:	str	r3, [sp, #12]
   11d28:	str	r6, [sp, #8]
   11d2c:	str	r7, [sp]
   11d30:	mov	r3, r0
   11d34:	str	r2, [sp, #4]
   11d38:	mov	r1, r9
   11d3c:	ldm	r8, {r0, r2}
   11d40:	bl	1329c <__assert_fail@plt+0x16f0>
   11d44:	str	r0, [fp, #-160]	; 0xffffff60
   11d48:	ldr	r3, [pc, #1428]	; 122e4 <__assert_fail@plt+0x738>
   11d4c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11d50:	ldr	r0, [fp, #-160]	; 0xffffff60
   11d54:	ldr	r3, [r3]
   11d58:	cmp	r2, r3
   11d5c:	bne	122e0 <__assert_fail@plt+0x734>
   11d60:	sub	sp, fp, #32
   11d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d68:	mov	r1, #47	; 0x2f
   11d6c:	mov	r0, r4
   11d70:	bl	11a20 <strchr@plt>
   11d74:	cmp	r0, #0
   11d78:	bne	11cfc <__assert_fail@plt+0x150>
   11d7c:	ldr	r1, [r8]
   11d80:	ldr	r0, [r8, #4]
   11d84:	bl	11990 <iconv_open@plt>
   11d88:	cmn	r0, #1
   11d8c:	mov	r9, r0
   11d90:	beq	120f0 <__assert_fail@plt+0x544>
   11d94:	ldr	r3, [fp, #-156]	; 0xffffff64
   11d98:	mov	r2, #0
   11d9c:	cmp	r3, r7
   11da0:	str	r2, [fp, #-152]	; 0xffffff68
   11da4:	beq	11ff4 <__assert_fail@plt+0x448>
   11da8:	ldr	sl, [pc, #1360]	; 12300 <__assert_fail@plt+0x754>
   11dac:	b	11e38 <__assert_fail@plt+0x28c>
   11db0:	str	r3, [sp, #4]
   11db4:	str	r4, [sp]
   11db8:	mov	r3, #2
   11dbc:	mov	r2, #1
   11dc0:	ldr	r1, [fp, #-100]	; 0xffffff9c
   11dc4:	bl	11a14 <mmap@plt>
   11dc8:	cmn	r0, #1
   11dcc:	mov	r8, r0
   11dd0:	beq	11e8c <__assert_fail@plt+0x2e0>
   11dd4:	mov	r0, r4
   11dd8:	bl	11b94 <close@plt>
   11ddc:	cmp	r0, #0
   11de0:	bne	122b0 <__assert_fail@plt+0x704>
   11de4:	ldr	r2, [r5]
   11de8:	sub	r3, fp, #152	; 0x98
   11dec:	str	r2, [sp]
   11df0:	mov	r1, r8
   11df4:	ldr	r2, [fp, #-100]	; 0xffffff9c
   11df8:	mov	r0, r9
   11dfc:	bl	127e4 <__assert_fail@plt+0xc38>
   11e00:	ldr	r1, [fp, #-100]	; 0xffffff9c
   11e04:	mov	r4, r0
   11e08:	mov	r0, r8
   11e0c:	bl	11ad4 <munmap@plt>
   11e10:	cmp	r4, #0
   11e14:	beq	11e24 <__assert_fail@plt+0x278>
   11e18:	mov	r3, #1
   11e1c:	str	r3, [fp, #-160]	; 0xffffff60
   11e20:	blt	12024 <__assert_fail@plt+0x478>
   11e24:	ldr	r3, [fp, #-156]	; 0xffffff64
   11e28:	add	r3, r3, #1
   11e2c:	cmp	r3, r7
   11e30:	str	r3, [fp, #-156]	; 0xffffff64
   11e34:	bge	12024 <__assert_fail@plt+0x478>
   11e38:	ldr	r2, [sl]
   11e3c:	ldr	r8, [r6, r3, lsl #2]
   11e40:	cmp	r2, #0
   11e44:	bne	11f98 <__assert_fail@plt+0x3ec>
   11e48:	ldr	r1, [pc, #1204]	; 12304 <__assert_fail@plt+0x758>
   11e4c:	mov	r0, r8
   11e50:	bl	117e0 <strcmp@plt>
   11e54:	subs	r4, r0, #0
   11e58:	beq	11e74 <__assert_fail@plt+0x2c8>
   11e5c:	mov	r0, r8
   11e60:	mov	r1, #0
   11e64:	bl	119cc <open@plt>
   11e68:	cmn	r0, #1
   11e6c:	mov	r4, r0
   11e70:	beq	11fb8 <__assert_fail@plt+0x40c>
   11e74:	sub	r2, fp, #148	; 0x94
   11e78:	mov	r1, r4
   11e7c:	mov	r0, #3
   11e80:	bl	1190c <__fxstat64@plt>
   11e84:	subs	r3, r0, #0
   11e88:	beq	11db0 <__assert_fail@plt+0x204>
   11e8c:	ldr	r3, [r5]
   11e90:	sub	r2, fp, #152	; 0x98
   11e94:	mov	r1, r4
   11e98:	mov	r0, r9
   11e9c:	bl	12a84 <__assert_fail@plt+0xed8>
   11ea0:	mov	r8, r0
   11ea4:	mov	r0, r4
   11ea8:	bl	11b94 <close@plt>
   11eac:	cmp	r8, #0
   11eb0:	beq	11e24 <__assert_fail@plt+0x278>
   11eb4:	b	11e18 <__assert_fail@plt+0x26c>
   11eb8:	ldr	r1, [pc, #1096]	; 12308 <__assert_fail@plt+0x75c>
   11ebc:	mov	r0, r1
   11ec0:	bl	11990 <iconv_open@plt>
   11ec4:	bl	117c8 <iconv_close@plt>
   11ec8:	bl	11900 <__gconv_get_cache@plt>
   11ecc:	cmp	r0, r4
   11ed0:	beq	11f48 <__assert_fail@plt+0x39c>
   11ed4:	bl	11900 <__gconv_get_cache@plt>
   11ed8:	ldrh	sl, [r0, #8]
   11edc:	mov	r7, r0
   11ee0:	ldrh	r8, [r0, #4]
   11ee4:	cmp	sl, r4
   11ee8:	ldrh	r6, [r0, #6]
   11eec:	beq	11f64 <__assert_fail@plt+0x3b8>
   11ef0:	add	r6, r0, r6
   11ef4:	b	11f04 <__assert_fail@plt+0x358>
   11ef8:	add	r4, r4, #1
   11efc:	cmp	r4, sl
   11f00:	bcs	11f64 <__assert_fail@plt+0x3b8>
   11f04:	lsl	r3, r4, #2
   11f08:	ldrh	r0, [r6, r3]
   11f0c:	cmp	r0, #0
   11f10:	beq	11ef8 <__assert_fail@plt+0x34c>
   11f14:	add	r0, r0, r8
   11f18:	add	r9, r7, r0
   11f1c:	mov	r0, r9
   11f20:	ldr	r1, [pc, #996]	; 1230c <__assert_fail@plt+0x760>
   11f24:	bl	117e0 <strcmp@plt>
   11f28:	cmp	r0, #0
   11f2c:	beq	11ef8 <__assert_fail@plt+0x34c>
   11f30:	mov	r0, r9
   11f34:	ldr	r2, [pc, #980]	; 12310 <__assert_fail@plt+0x764>
   11f38:	ldr	r1, [pc, #980]	; 12314 <__assert_fail@plt+0x768>
   11f3c:	bl	11a5c <tsearch@plt>
   11f40:	ldrh	sl, [r7, #8]
   11f44:	b	11ef8 <__assert_fail@plt+0x34c>
   11f48:	bl	11b7c <__gconv_get_alias_db@plt>
   11f4c:	ldr	r1, [pc, #964]	; 12318 <__assert_fail@plt+0x76c>
   11f50:	bl	11b88 <twalk@plt>
   11f54:	bl	11924 <__gconv_get_modules_db@plt>
   11f58:	cmp	r0, #0
   11f5c:	beq	11f64 <__assert_fail@plt+0x3b8>
   11f60:	bl	12630 <__assert_fail@plt+0xa84>
   11f64:	ldr	r4, [pc, #944]	; 1231c <__assert_fail@plt+0x770>
   11f68:	ldr	r0, [r4]
   11f6c:	bl	11aa4 <fileno@plt>
   11f70:	bl	11b4c <isatty@plt>
   11f74:	cmp	r0, #0
   11f78:	bne	12064 <__assert_fail@plt+0x4b8>
   11f7c:	mov	r3, #2
   11f80:	ldr	r0, [r5, #8]
   11f84:	ldr	r1, [pc, #916]	; 12320 <__assert_fail@plt+0x774>
   11f88:	str	r3, [r5, #24]
   11f8c:	bl	11b88 <twalk@plt>
   11f90:	mov	r0, #0
   11f94:	bl	119e4 <exit@plt>
   11f98:	ldr	r3, [pc, #900]	; 12324 <__assert_fail@plt+0x778>
   11f9c:	mov	r2, r8
   11fa0:	ldr	r1, [pc, #896]	; 12328 <__assert_fail@plt+0x77c>
   11fa4:	ldr	r0, [r3]
   11fa8:	bl	11a2c <fprintf@plt>
   11fac:	ldr	r3, [fp, #-156]	; 0xffffff64
   11fb0:	ldr	r8, [r6, r3, lsl #2]
   11fb4:	b	11e48 <__assert_fail@plt+0x29c>
   11fb8:	bl	11a38 <__errno_location@plt>
   11fbc:	mov	r3, #1
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #864]	; 1232c <__assert_fail@plt+0x780>
   11fc8:	str	r3, [fp, #-160]	; 0xffffff60
   11fcc:	ldr	r4, [r0]
   11fd0:	ldr	r0, [pc, #796]	; 122f4 <__assert_fail@plt+0x748>
   11fd4:	bl	11828 <__dcgettext@plt>
   11fd8:	ldr	r3, [fp, #-156]	; 0xffffff64
   11fdc:	mov	r1, r4
   11fe0:	ldr	r3, [r6, r3, lsl #2]
   11fe4:	mov	r2, r0
   11fe8:	mov	r0, #0
   11fec:	bl	11948 <error@plt>
   11ff0:	b	11e24 <__assert_fail@plt+0x278>
   11ff4:	ldr	r3, [pc, #820]	; 12330 <__assert_fail@plt+0x784>
   11ff8:	ldr	r4, [r5]
   11ffc:	ldr	r0, [r3]
   12000:	bl	11aa4 <fileno@plt>
   12004:	mov	r3, r4
   12008:	sub	r2, fp, #152	; 0x98
   1200c:	mov	r1, r0
   12010:	mov	r0, r9
   12014:	bl	12a84 <__assert_fail@plt+0xed8>
   12018:	adds	r3, r0, #0
   1201c:	movne	r3, #1
   12020:	str	r3, [fp, #-160]	; 0xffffff60
   12024:	ldr	r0, [fp, #-152]	; 0xffffff68
   12028:	cmp	r0, #0
   1202c:	beq	11d48 <__assert_fail@plt+0x19c>
   12030:	bl	11abc <fclose@plt>
   12034:	cmp	r0, #0
   12038:	beq	11d48 <__assert_fail@plt+0x19c>
   1203c:	bl	11a38 <__errno_location@plt>
   12040:	mov	r2, #5
   12044:	ldr	r1, [pc, #744]	; 12334 <__assert_fail@plt+0x788>
   12048:	ldr	r4, [r0]
   1204c:	ldr	r0, [pc, #672]	; 122f4 <__assert_fail@plt+0x748>
   12050:	bl	11828 <__dcgettext@plt>
   12054:	mov	r1, r4
   12058:	mov	r2, r0
   1205c:	mov	r0, #1
   12060:	bl	11948 <error@plt>
   12064:	mov	r2, #5
   12068:	ldr	r1, [pc, #712]	; 12338 <__assert_fail@plt+0x78c>
   1206c:	ldr	r0, [pc, #640]	; 122f4 <__assert_fail@plt+0x748>
   12070:	bl	11828 <__dcgettext@plt>
   12074:	ldr	r1, [r4]
   12078:	bl	11b58 <fputs@plt>
   1207c:	mov	r3, #2
   12080:	ldr	r1, [pc, #692]	; 1233c <__assert_fail@plt+0x790>
   12084:	ldr	r0, [r5, #8]
   12088:	str	r3, [r5, #24]
   1208c:	bl	11b88 <twalk@plt>
   12090:	ldr	r3, [r5, #24]
   12094:	cmp	r3, #0
   12098:	beq	11f90 <__assert_fail@plt+0x3e4>
   1209c:	ldr	r0, [pc, #580]	; 122e8 <__assert_fail@plt+0x73c>
   120a0:	bl	1196c <puts@plt>
   120a4:	b	11f90 <__assert_fail@plt+0x3e4>
   120a8:	add	r0, r0, #1
   120ac:	mov	r1, sl
   120b0:	bl	11834 <strchrnul@plt>
   120b4:	ldrb	r3, [r0]
   120b8:	mov	r9, r0
   120bc:	cmp	r3, #47	; 0x2f
   120c0:	beq	12124 <__assert_fail@plt+0x578>
   120c4:	sub	r2, r0, r4
   120c8:	add	r3, r2, #16
   120cc:	bic	r3, r3, #7
   120d0:	sub	sp, sp, r3
   120d4:	add	r9, sp, #16
   120d8:	mov	r0, r9
   120dc:	mov	r1, r4
   120e0:	bl	11870 <__mempcpy@plt>
   120e4:	mov	r3, r0
   120e8:	strb	sl, [r3], #1
   120ec:	b	11c84 <__assert_fail@plt+0xd8>
   120f0:	bl	11a38 <__errno_location@plt>
   120f4:	ldr	r5, [r0]
   120f8:	mov	r6, r0
   120fc:	cmp	r5, #22
   12100:	beq	12154 <__assert_fail@plt+0x5a8>
   12104:	mov	r2, #5
   12108:	ldr	r1, [pc, #560]	; 12340 <__assert_fail@plt+0x794>
   1210c:	ldr	r0, [pc, #480]	; 122f4 <__assert_fail@plt+0x748>
   12110:	bl	11828 <__dcgettext@plt>
   12114:	mov	r1, r5
   12118:	mov	r2, r0
   1211c:	mov	r0, #1
   12120:	bl	11948 <error@plt>
   12124:	bl	11a08 <strlen@plt>
   12128:	mov	r1, r4
   1212c:	add	r2, r9, r0
   12130:	sub	r2, r2, r4
   12134:	add	r3, r2, #15
   12138:	bic	r3, r3, #7
   1213c:	sub	sp, sp, r3
   12140:	add	r9, sp, #16
   12144:	mov	r0, r9
   12148:	bl	11870 <__mempcpy@plt>
   1214c:	mov	r3, r0
   12150:	b	11c84 <__assert_fail@plt+0xd8>
   12154:	ldr	r1, [r8]
   12158:	ldr	r0, [pc, #484]	; 12344 <__assert_fail@plt+0x798>
   1215c:	bl	11990 <iconv_open@plt>
   12160:	ldr	r1, [pc, #476]	; 12344 <__assert_fail@plt+0x798>
   12164:	cmn	r0, #1
   12168:	ldr	r0, [r8, #4]
   1216c:	ldreq	r7, [r6]
   12170:	movne	r7, #0
   12174:	subeq	r7, r7, #22
   12178:	clzeq	r7, r7
   1217c:	lsreq	r7, r7, #5
   12180:	bl	11990 <iconv_open@plt>
   12184:	ldr	r5, [r8]
   12188:	cmn	r0, #1
   1218c:	ldreq	r3, [r6]
   12190:	subeq	r3, r3, #22
   12194:	clzeq	r3, r3
   12198:	lsreq	r3, r3, #5
   1219c:	streq	r3, [fp, #-160]	; 0xffffff60
   121a0:	ldrb	r3, [r5]
   121a4:	cmp	r3, #0
   121a8:	beq	12254 <__assert_fail@plt+0x6a8>
   121ac:	ldrb	r3, [r4]
   121b0:	cmp	r3, #0
   121b4:	beq	12244 <__assert_fail@plt+0x698>
   121b8:	cmp	r7, #0
   121bc:	ldr	r3, [fp, #-160]	; 0xffffff60
   121c0:	mov	r2, #5
   121c4:	beq	12218 <__assert_fail@plt+0x66c>
   121c8:	cmp	r3, #0
   121cc:	beq	1228c <__assert_fail@plt+0x6e0>
   121d0:	ldr	r1, [pc, #368]	; 12348 <__assert_fail@plt+0x79c>
   121d4:	ldr	r0, [pc, #280]	; 122f4 <__assert_fail@plt+0x748>
   121d8:	bl	11828 <__dcgettext@plt>
   121dc:	mov	r1, #0
   121e0:	str	r4, [sp]
   121e4:	mov	r3, r5
   121e8:	mov	r2, r0
   121ec:	mov	r0, r1
   121f0:	bl	11948 <error@plt>
   121f4:	ldr	r3, [pc, #336]	; 1234c <__assert_fail@plt+0x7a0>
   121f8:	ldr	r1, [pc, #292]	; 12324 <__assert_fail@plt+0x778>
   121fc:	ldr	r0, [pc, #332]	; 12350 <__assert_fail@plt+0x7a4>
   12200:	mov	r2, #4
   12204:	ldr	r3, [r3]
   12208:	ldr	r1, [r1]
   1220c:	bl	11a44 <argp_help@plt>
   12210:	mov	r0, #1
   12214:	bl	119e4 <exit@plt>
   12218:	cmp	r3, #0
   1221c:	beq	12264 <__assert_fail@plt+0x6b8>
   12220:	ldr	r1, [pc, #300]	; 12354 <__assert_fail@plt+0x7a8>
   12224:	ldr	r0, [pc, #200]	; 122f4 <__assert_fail@plt+0x748>
   12228:	bl	11828 <__dcgettext@plt>
   1222c:	mov	r3, r4
   12230:	mov	r1, r7
   12234:	mov	r2, r0
   12238:	mov	r0, r7
   1223c:	bl	11948 <error@plt>
   12240:	b	121f4 <__assert_fail@plt+0x648>
   12244:	mov	r0, #14
   12248:	bl	11b04 <nl_langinfo@plt>
   1224c:	mov	r4, r0
   12250:	b	121b8 <__assert_fail@plt+0x60c>
   12254:	mov	r0, #14
   12258:	bl	11b04 <nl_langinfo@plt>
   1225c:	mov	r5, r0
   12260:	b	121ac <__assert_fail@plt+0x600>
   12264:	ldr	r1, [pc, #236]	; 12358 <__assert_fail@plt+0x7ac>
   12268:	ldr	r0, [pc, #132]	; 122f4 <__assert_fail@plt+0x748>
   1226c:	bl	11828 <__dcgettext@plt>
   12270:	ldr	r1, [fp, #-160]	; 0xffffff60
   12274:	str	r4, [sp]
   12278:	mov	r3, r5
   1227c:	mov	r2, r0
   12280:	mov	r0, r1
   12284:	bl	11948 <error@plt>
   12288:	b	121f4 <__assert_fail@plt+0x648>
   1228c:	ldr	r1, [pc, #200]	; 1235c <__assert_fail@plt+0x7b0>
   12290:	ldr	r0, [pc, #92]	; 122f4 <__assert_fail@plt+0x748>
   12294:	bl	11828 <__dcgettext@plt>
   12298:	ldr	r1, [fp, #-160]	; 0xffffff60
   1229c:	mov	r3, r5
   122a0:	mov	r2, r0
   122a4:	mov	r0, r1
   122a8:	bl	11948 <error@plt>
   122ac:	b	121f4 <__assert_fail@plt+0x648>
   122b0:	bl	11a38 <__errno_location@plt>
   122b4:	mov	r2, #5
   122b8:	ldr	r1, [pc, #160]	; 12360 <__assert_fail@plt+0x7b4>
   122bc:	ldr	r4, [r0]
   122c0:	ldr	r0, [pc, #44]	; 122f4 <__assert_fail@plt+0x748>
   122c4:	bl	11828 <__dcgettext@plt>
   122c8:	ldr	r3, [fp, #-156]	; 0xffffff64
   122cc:	mov	r1, r4
   122d0:	ldr	r3, [r6, r3, lsl #2]
   122d4:	mov	r2, r0
   122d8:	mov	r0, #1
   122dc:	bl	11948 <error@plt>
   122e0:	bl	118ac <__stack_chk_fail@plt>
   122e4:	strdeq	sl, [r2], -r8
   122e8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   122ec:	andeq	fp, r2, r0, lsl #3
   122f0:	andeq	fp, r2, ip, asr #3
   122f4:	andeq	sl, r2, r0, lsl #30
   122f8:	strdeq	fp, [r2], -r4
   122fc:	andeq	r9, r1, r8, lsl r2
   12300:	andeq	fp, r2, r4, lsl #4
   12304:	andeq	r8, r1, r0, asr #31
   12308:	andeq	r9, r1, r0, lsl #2
   1230c:			; <UNDEFINED> instruction: 0x00018fb4
   12310:			; <UNDEFINED> instruction: 0x000117bc
   12314:	ldrdeq	fp, [r2], -r4
   12318:	andeq	r2, r1, r4, ror #26
   1231c:	andeq	fp, r2, r4, asr #3
   12320:	andeq	r2, r1, ip, lsl r6
   12324:			; <UNDEFINED> instruction: 0x0002b1b8
   12328:	andeq	r9, r1, r0, lsl #6
   1232c:	andeq	r9, r1, r8, lsl #6
   12330:	andeq	fp, r2, r0, asr #3
   12334:	andeq	r9, r1, r4, asr #6
   12338:	andeq	r9, r1, r4, lsl #2
   1233c:	andeq	r2, r1, r4, lsl #24
   12340:	ldrdeq	r9, [r1], -r8
   12344:	andeq	r9, r1, r0, lsr #4
   12348:	andeq	r9, r1, r8, lsr #4
   1234c:			; <UNDEFINED> instruction: 0x0002b1b0
   12350:	andeq	fp, r2, r8, lsl #3
   12354:	andeq	r9, r1, r4, lsl #5
   12358:	andeq	r9, r1, r8, lsr #5
   1235c:	andeq	r9, r1, ip, asr r2
   12360:	andeq	r9, r1, r4, lsr #6
   12364:	mov	fp, #0
   12368:	mov	lr, #0
   1236c:	pop	{r1}		; (ldr r1, [sp], #4)
   12370:	mov	r2, sp
   12374:	push	{r2}		; (str r2, [sp, #-4]!)
   12378:	push	{r0}		; (str r0, [sp, #-4]!)
   1237c:	ldr	ip, [pc, #16]	; 12394 <__assert_fail@plt+0x7e8>
   12380:	push	{ip}		; (str ip, [sp, #-4]!)
   12384:	ldr	r0, [pc, #12]	; 12398 <__assert_fail@plt+0x7ec>
   12388:	ldr	r3, [pc, #12]	; 1239c <__assert_fail@plt+0x7f0>
   1238c:	bl	1199c <__libc_start_main@plt>
   12390:	bl	11b70 <abort@plt>
   12394:	andeq	r8, r1, r8, lsl #22
   12398:			; <UNDEFINED> instruction: 0x00011bb8
   1239c:	andeq	r8, r1, r8, lsr #21
   123a0:	ldr	r3, [pc, #20]	; 123bc <__assert_fail@plt+0x810>
   123a4:	ldr	r2, [pc, #20]	; 123c0 <__assert_fail@plt+0x814>
   123a8:	add	r3, pc, r3
   123ac:	ldr	r2, [r3, r2]
   123b0:	cmp	r2, #0
   123b4:	bxeq	lr
   123b8:	b	119c0 <__gmon_start__@plt>
   123bc:	andeq	r8, r1, r0, asr ip
   123c0:	andeq	r0, r0, r4, ror r1
   123c4:	ldr	r0, [pc, #24]	; 123e4 <__assert_fail@plt+0x838>
   123c8:	ldr	r3, [pc, #24]	; 123e8 <__assert_fail@plt+0x83c>
   123cc:	cmp	r3, r0
   123d0:	bxeq	lr
   123d4:	ldr	r3, [pc, #16]	; 123ec <__assert_fail@plt+0x840>
   123d8:	cmp	r3, #0
   123dc:	bxeq	lr
   123e0:	bx	r3
   123e4:			; <UNDEFINED> instruction: 0x0002b1b0
   123e8:			; <UNDEFINED> instruction: 0x0002b1b0
   123ec:	andeq	r0, r0, r0
   123f0:	ldr	r0, [pc, #36]	; 1241c <__assert_fail@plt+0x870>
   123f4:	ldr	r1, [pc, #36]	; 12420 <__assert_fail@plt+0x874>
   123f8:	sub	r1, r1, r0
   123fc:	asr	r1, r1, #2
   12400:	add	r1, r1, r1, lsr #31
   12404:	asrs	r1, r1, #1
   12408:	bxeq	lr
   1240c:	ldr	r3, [pc, #16]	; 12424 <__assert_fail@plt+0x878>
   12410:	cmp	r3, #0
   12414:	bxeq	lr
   12418:	bx	r3
   1241c:			; <UNDEFINED> instruction: 0x0002b1b0
   12420:			; <UNDEFINED> instruction: 0x0002b1b0
   12424:	andeq	r0, r0, r0
   12428:	push	{r4, lr}
   1242c:	ldr	r4, [pc, #24]	; 1244c <__assert_fail@plt+0x8a0>
   12430:	ldrb	r3, [r4]
   12434:	cmp	r3, #0
   12438:	popne	{r4, pc}
   1243c:	bl	123c4 <__assert_fail@plt+0x818>
   12440:	mov	r3, #1
   12444:	strb	r3, [r4]
   12448:	pop	{r4, pc}
   1244c:	andeq	fp, r2, r8, asr #3
   12450:	b	123f0 <__assert_fail@plt+0x844>
   12454:	cmp	r0, #111	; 0x6f
   12458:	beq	124a0 <__assert_fail@plt+0x8f4>
   1245c:	bgt	12480 <__assert_fail@plt+0x8d4>
   12460:	cmp	r0, #102	; 0x66
   12464:	beq	124d4 <__assert_fail@plt+0x928>
   12468:	cmp	r0, #108	; 0x6c
   1246c:	beq	124e4 <__assert_fail@plt+0x938>
   12470:	cmp	r0, #99	; 0x63
   12474:	beq	124f8 <__assert_fail@plt+0x94c>
   12478:	mov	r0, #7
   1247c:	bx	lr
   12480:	cmp	r0, #116	; 0x74
   12484:	beq	124b0 <__assert_fail@plt+0x904>
   12488:	cmp	r0, #1000	; 0x3e8
   1248c:	beq	124c0 <__assert_fail@plt+0x914>
   12490:	cmp	r0, #115	; 0x73
   12494:	moveq	r0, #0
   12498:	movne	r0, #7
   1249c:	bx	lr
   124a0:	ldr	r3, [pc, #100]	; 1250c <__assert_fail@plt+0x960>
   124a4:	mov	r0, #0
   124a8:	str	r1, [r3]
   124ac:	bx	lr
   124b0:	ldr	r3, [pc, #88]	; 12510 <__assert_fail@plt+0x964>
   124b4:	mov	r0, #0
   124b8:	str	r1, [r3, #4]
   124bc:	bx	lr
   124c0:	ldr	r3, [pc, #76]	; 12514 <__assert_fail@plt+0x968>
   124c4:	mov	r2, #1
   124c8:	mov	r0, #0
   124cc:	str	r2, [r3]
   124d0:	bx	lr
   124d4:	ldr	r3, [pc, #52]	; 12510 <__assert_fail@plt+0x964>
   124d8:	mov	r0, #0
   124dc:	str	r1, [r3]
   124e0:	bx	lr
   124e4:	ldr	r3, [pc, #32]	; 1250c <__assert_fail@plt+0x960>
   124e8:	mov	r2, #1
   124ec:	mov	r0, #0
   124f0:	str	r2, [r3, #4]
   124f4:	bx	lr
   124f8:	ldr	r3, [pc, #24]	; 12518 <__assert_fail@plt+0x96c>
   124fc:	mov	r2, #1
   12500:	mov	r0, #0
   12504:	str	r2, [r3]
   12508:	bx	lr
   1250c:	andeq	fp, r2, ip, asr #3
   12510:	andeq	fp, r2, r0, lsl #3
   12514:	andeq	fp, r2, r4, lsl #4
   12518:	strdeq	fp, [r2], -r4
   1251c:	push	{r4, lr}
   12520:	mov	r4, r0
   12524:	ldr	r3, [pc, #76]	; 12578 <__assert_fail@plt+0x9cc>
   12528:	ldr	r2, [pc, #76]	; 1257c <__assert_fail@plt+0x9d0>
   1252c:	ldr	r1, [pc, #76]	; 12580 <__assert_fail@plt+0x9d4>
   12530:	bl	11a2c <fprintf@plt>
   12534:	mov	r2, #5
   12538:	ldr	r1, [pc, #68]	; 12584 <__assert_fail@plt+0x9d8>
   1253c:	mov	r0, #0
   12540:	bl	11894 <dcgettext@plt>
   12544:	ldr	r2, [pc, #60]	; 12588 <__assert_fail@plt+0x9dc>
   12548:	mov	r1, r0
   1254c:	mov	r0, r4
   12550:	bl	11a2c <fprintf@plt>
   12554:	mov	r2, #5
   12558:	ldr	r1, [pc, #44]	; 1258c <__assert_fail@plt+0x9e0>
   1255c:	mov	r0, #0
   12560:	bl	11894 <dcgettext@plt>
   12564:	ldr	r2, [pc, #36]	; 12590 <__assert_fail@plt+0x9e4>
   12568:	mov	r1, r0
   1256c:	mov	r0, r4
   12570:	pop	{r4, lr}
   12574:	b	11a2c <fprintf@plt>
   12578:	andeq	r8, r1, ip, lsr lr
   1257c:	andeq	r8, r1, r4, asr #28
   12580:	andeq	r8, r1, r4, ror #28
   12584:	andeq	r8, r1, r0, ror lr
   12588:	andeq	r8, r1, r8, lsr pc
   1258c:	andeq	r8, r1, r0, asr #30
   12590:	andeq	r8, r1, r0, asr pc
   12594:	push	{r4, r5, lr}
   12598:	sub	sp, sp, #12
   1259c:	ldr	r4, [pc, #104]	; 1260c <__assert_fail@plt+0xa60>
   125a0:	ldr	r2, [pc, #104]	; 12610 <__assert_fail@plt+0xa64>
   125a4:	mov	r5, #0
   125a8:	ldr	r3, [r4]
   125ac:	cmp	r0, r2
   125b0:	str	r3, [sp, #4]
   125b4:	str	r5, [sp]
   125b8:	beq	125d8 <__assert_fail@plt+0xa2c>
   125bc:	ldr	r2, [sp, #4]
   125c0:	ldr	r3, [r4]
   125c4:	mov	r0, r1
   125c8:	cmp	r2, r3
   125cc:	bne	12608 <__assert_fail@plt+0xa5c>
   125d0:	add	sp, sp, #12
   125d4:	pop	{r4, r5, pc}
   125d8:	mov	r2, #5
   125dc:	ldr	r1, [pc, #48]	; 12614 <__assert_fail@plt+0xa68>
   125e0:	mov	r0, r5
   125e4:	bl	11894 <dcgettext@plt>
   125e8:	ldr	r2, [pc, #40]	; 12618 <__assert_fail@plt+0xa6c>
   125ec:	mov	r1, r0
   125f0:	mov	r0, sp
   125f4:	bl	11ab0 <asprintf@plt>
   125f8:	cmp	r0, r5
   125fc:	movlt	r1, r5
   12600:	ldrge	r1, [sp]
   12604:	b	125bc <__assert_fail@plt+0xa10>
   12608:	bl	118ac <__stack_chk_fail@plt>
   1260c:	strdeq	sl, [r2], -r8
   12610:	andeq	r0, r0, #4
   12614:	andeq	r8, r1, r0, ror #30
   12618:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1261c:	bic	r1, r1, #2
   12620:	cmp	r1, #1
   12624:	bxne	lr
   12628:	ldr	r0, [r0]
   1262c:	b	1196c <puts@plt>
   12630:	push	{r4, r5, r6, r7, r8, lr}
   12634:	mov	r4, r0
   12638:	ldr	r0, [r0, #20]
   1263c:	cmp	r0, #0
   12640:	beq	12648 <__assert_fail@plt+0xa9c>
   12644:	bl	12630 <__assert_fail@plt+0xa84>
   12648:	ldr	r0, [r4, #28]
   1264c:	cmp	r0, #0
   12650:	beq	12658 <__assert_fail@plt+0xaac>
   12654:	bl	12630 <__assert_fail@plt+0xa84>
   12658:	ldr	r6, [pc, #108]	; 126cc <__assert_fail@plt+0xb20>
   1265c:	ldr	r8, [pc, #108]	; 126d0 <__assert_fail@plt+0xb24>
   12660:	ldr	r7, [pc, #108]	; 126d4 <__assert_fail@plt+0xb28>
   12664:	b	1268c <__assert_fail@plt+0xae0>
   12668:	ldr	r5, [r4, #4]
   1266c:	mov	r1, r6
   12670:	mov	r0, r5
   12674:	bl	117e0 <strcmp@plt>
   12678:	cmp	r0, #0
   1267c:	bne	126b8 <__assert_fail@plt+0xb0c>
   12680:	ldr	r4, [r4, #24]
   12684:	cmp	r4, #0
   12688:	popeq	{r4, r5, r6, r7, r8, pc}
   1268c:	ldr	r5, [r4]
   12690:	mov	r1, r6
   12694:	mov	r0, r5
   12698:	bl	117e0 <strcmp@plt>
   1269c:	cmp	r0, #0
   126a0:	beq	12668 <__assert_fail@plt+0xabc>
   126a4:	mov	r0, r5
   126a8:	mov	r2, r8
   126ac:	mov	r1, r7
   126b0:	bl	11a5c <tsearch@plt>
   126b4:	b	12668 <__assert_fail@plt+0xabc>
   126b8:	mov	r0, r5
   126bc:	mov	r2, r8
   126c0:	mov	r1, r7
   126c4:	bl	11a5c <tsearch@plt>
   126c8:	b	12680 <__assert_fail@plt+0xad4>
   126cc:			; <UNDEFINED> instruction: 0x00018fb4
   126d0:			; <UNDEFINED> instruction: 0x000117bc
   126d4:	ldrdeq	fp, [r2], -r4
   126d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   126dc:	mov	r5, r2
   126e0:	mov	r9, r3
   126e4:	mov	r6, r0
   126e8:	mov	r4, r1
   126ec:	bl	11a38 <__errno_location@plt>
   126f0:	ldr	r3, [r5]
   126f4:	cmp	r3, #0
   126f8:	mov	r7, r0
   126fc:	ldr	r8, [r0]
   12700:	beq	12738 <__assert_fail@plt+0xb8c>
   12704:	sub	r4, r4, r6
   12708:	mov	r0, r6
   1270c:	mov	r2, r4
   12710:	mov	r1, #1
   12714:	bl	11918 <fwrite@plt>
   12718:	cmp	r4, r0
   1271c:	bhi	127a4 <__assert_fail@plt+0xbf8>
   12720:	ldr	r0, [r5]
   12724:	bl	11858 <ferror@plt>
   12728:	cmp	r0, #0
   1272c:	bne	127a4 <__assert_fail@plt+0xbf8>
   12730:	str	r8, [r7]
   12734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12738:	cmp	r9, #0
   1273c:	beq	12754 <__assert_fail@plt+0xba8>
   12740:	ldr	r1, [pc, #132]	; 127cc <__assert_fail@plt+0xc20>
   12744:	mov	r0, r9
   12748:	bl	117e0 <strcmp@plt>
   1274c:	cmp	r0, #0
   12750:	bne	12764 <__assert_fail@plt+0xbb8>
   12754:	ldr	r3, [pc, #116]	; 127d0 <__assert_fail@plt+0xc24>
   12758:	ldr	r3, [r3]
   1275c:	str	r3, [r5]
   12760:	b	12704 <__assert_fail@plt+0xb58>
   12764:	mov	r0, r9
   12768:	ldr	r1, [pc, #100]	; 127d4 <__assert_fail@plt+0xc28>
   1276c:	bl	11810 <fopen@plt>
   12770:	cmp	r0, #0
   12774:	mov	r3, r0
   12778:	str	r0, [r5]
   1277c:	bne	12704 <__assert_fail@plt+0xb58>
   12780:	mov	r2, #5
   12784:	ldr	r1, [pc, #76]	; 127d8 <__assert_fail@plt+0xc2c>
   12788:	ldr	r0, [pc, #76]	; 127dc <__assert_fail@plt+0xc30>
   1278c:	ldr	r4, [r7]
   12790:	bl	11828 <__dcgettext@plt>
   12794:	mov	r1, r4
   12798:	mov	r2, r0
   1279c:	mov	r0, #1
   127a0:	bl	11948 <error@plt>
   127a4:	mov	r2, #5
   127a8:	ldr	r1, [pc, #48]	; 127e0 <__assert_fail@plt+0xc34>
   127ac:	ldr	r0, [pc, #40]	; 127dc <__assert_fail@plt+0xc30>
   127b0:	bl	11828 <__dcgettext@plt>
   127b4:	mov	r1, #0
   127b8:	mov	r2, r0
   127bc:	mov	r0, r1
   127c0:	bl	11948 <error@plt>
   127c4:	mvn	r0, #0
   127c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   127cc:	andeq	r8, r1, r0, asr #31
   127d0:	andeq	fp, r2, r4, asr #3
   127d4:	andeq	r8, r1, r4, asr #31
   127d8:	andeq	r8, r1, r8, asr #31
   127dc:	andeq	sl, r2, r0, lsl #30
   127e0:	andeq	r8, r1, r0, ror #31
   127e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e8:	mov	r7, r0
   127ec:	sub	sp, sp, #32768	; 0x8000
   127f0:	ldr	r0, [pc, #624]	; 12a68 <__assert_fail@plt+0xebc>
   127f4:	sub	sp, sp, #44	; 0x2c
   127f8:	mov	fp, r3
   127fc:	add	r3, sp, #32768	; 0x8000
   12800:	add	r3, r3, #36	; 0x24
   12804:	ldr	r0, [r0]
   12808:	str	r1, [sp, #20]
   1280c:	str	r0, [r3]
   12810:	add	r3, sp, #32768	; 0x8000
   12814:	add	r3, r3, #80	; 0x50
   12818:	str	r2, [sp, #16]
   1281c:	str	r1, [sp, #12]
   12820:	add	r4, sp, #36	; 0x24
   12824:	ldr	sl, [r3]
   12828:	mov	r8, #0
   1282c:	mov	r6, #32768	; 0x8000
   12830:	ldr	r9, [pc, #564]	; 12a6c <__assert_fail@plt+0xec0>
   12834:	b	128d0 <__assert_fail@plt+0xd24>
   12838:	ldr	r1, [sp, #28]
   1283c:	cmp	r1, r4
   12840:	beq	1285c <__assert_fail@plt+0xcb0>
   12844:	mov	r3, sl
   12848:	mov	r2, fp
   1284c:	mov	r0, r4
   12850:	bl	126d8 <__assert_fail@plt+0xb2c>
   12854:	subs	r8, r0, #0
   12858:	bne	1299c <__assert_fail@plt+0xdf0>
   1285c:	mov	r2, #0
   12860:	str	r5, [sp]
   12864:	mov	r1, r2
   12868:	add	r3, sp, #28
   1286c:	mov	r0, r7
   12870:	str	r4, [sp, #28]
   12874:	str	r6, [sp, #32]
   12878:	bl	117d4 <iconv@plt>
   1287c:	ldr	r1, [sp, #28]
   12880:	cmp	r1, r4
   12884:	mov	r5, r0
   12888:	beq	128a4 <__assert_fail@plt+0xcf8>
   1288c:	mov	r3, sl
   12890:	mov	r2, fp
   12894:	mov	r0, r4
   12898:	bl	126d8 <__assert_fail@plt+0xb2c>
   1289c:	subs	r8, r0, #0
   128a0:	bne	1299c <__assert_fail@plt+0xdf0>
   128a4:	cmn	r5, #1
   128a8:	bne	1299c <__assert_fail@plt+0xdf0>
   128ac:	bl	11a38 <__errno_location@plt>
   128b0:	ldr	r5, [r9]
   128b4:	cmp	r5, #0
   128b8:	ldr	r3, [r0]
   128bc:	beq	128c8 <__assert_fail@plt+0xd1c>
   128c0:	cmp	r3, #84	; 0x54
   128c4:	beq	12a5c <__assert_fail@plt+0xeb0>
   128c8:	cmp	r3, #7
   128cc:	bne	12958 <__assert_fail@plt+0xdac>
   128d0:	ldr	r3, [sp, #16]
   128d4:	cmp	r3, #0
   128d8:	beq	1299c <__assert_fail@plt+0xdf0>
   128dc:	add	r5, sp, #32
   128e0:	add	r3, sp, #28
   128e4:	str	r5, [sp]
   128e8:	add	r2, sp, #16
   128ec:	add	r1, sp, #20
   128f0:	mov	r0, r7
   128f4:	str	r4, [sp, #28]
   128f8:	str	r6, [sp, #32]
   128fc:	bl	117d4 <iconv@plt>
   12900:	cmn	r0, #1
   12904:	bne	12838 <__assert_fail@plt+0xc8c>
   12908:	ldr	r3, [r9]
   1290c:	cmp	r3, #0
   12910:	beq	12924 <__assert_fail@plt+0xd78>
   12914:	bl	11a38 <__errno_location@plt>
   12918:	ldr	r3, [r0]
   1291c:	cmp	r3, #84	; 0x54
   12920:	beq	129c8 <__assert_fail@plt+0xe1c>
   12924:	ldr	r1, [sp, #28]
   12928:	cmp	r1, r4
   1292c:	beq	12948 <__assert_fail@plt+0xd9c>
   12930:	mov	r3, sl
   12934:	mov	r2, fp
   12938:	mov	r0, r4
   1293c:	bl	126d8 <__assert_fail@plt+0xb2c>
   12940:	subs	r8, r0, #0
   12944:	bne	1299c <__assert_fail@plt+0xdf0>
   12948:	bl	11a38 <__errno_location@plt>
   1294c:	ldr	r3, [r0]
   12950:	cmp	r3, #7
   12954:	beq	128d0 <__assert_fail@plt+0xd24>
   12958:	cmp	r3, #22
   1295c:	mov	r5, r0
   12960:	beq	12a50 <__assert_fail@plt+0xea4>
   12964:	cmp	r3, #84	; 0x54
   12968:	beq	129e8 <__assert_fail@plt+0xe3c>
   1296c:	cmp	r3, #9
   12970:	beq	12a28 <__assert_fail@plt+0xe7c>
   12974:	mov	r2, #5
   12978:	ldr	r1, [pc, #240]	; 12a70 <__assert_fail@plt+0xec4>
   1297c:	ldr	r0, [pc, #240]	; 12a74 <__assert_fail@plt+0xec8>
   12980:	bl	11828 <__dcgettext@plt>
   12984:	mov	r1, #0
   12988:	ldr	r3, [r5]
   1298c:	mvn	r8, #0
   12990:	mov	r2, r0
   12994:	mov	r0, r1
   12998:	bl	11948 <error@plt>
   1299c:	add	r3, sp, #32768	; 0x8000
   129a0:	add	r3, r3, #36	; 0x24
   129a4:	ldr	r2, [r3]
   129a8:	ldr	r3, [pc, #184]	; 12a68 <__assert_fail@plt+0xebc>
   129ac:	mov	r0, r8
   129b0:	ldr	r3, [r3]
   129b4:	cmp	r2, r3
   129b8:	bne	12a64 <__assert_fail@plt+0xeb8>
   129bc:	add	sp, sp, #32768	; 0x8000
   129c0:	add	sp, sp, #44	; 0x2c
   129c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129c8:	ldr	r3, [sp, #16]
   129cc:	cmp	r3, #0
   129d0:	moveq	r8, #1
   129d4:	beq	12838 <__assert_fail@plt+0xc8c>
   129d8:	mov	r3, #7
   129dc:	str	r3, [r0]
   129e0:	mov	r8, #1
   129e4:	b	12924 <__assert_fail@plt+0xd78>
   129e8:	ldr	r4, [r9]
   129ec:	cmp	r4, #0
   129f0:	bne	12a48 <__assert_fail@plt+0xe9c>
   129f4:	mov	r2, #5
   129f8:	ldr	r1, [pc, #120]	; 12a78 <__assert_fail@plt+0xecc>
   129fc:	ldr	r0, [pc, #112]	; 12a74 <__assert_fail@plt+0xec8>
   12a00:	bl	11828 <__dcgettext@plt>
   12a04:	ldr	r2, [sp, #12]
   12a08:	ldr	r3, [sp, #20]
   12a0c:	mov	r1, r4
   12a10:	sub	r3, r3, r2
   12a14:	mvn	r8, #0
   12a18:	mov	r2, r0
   12a1c:	mov	r0, r4
   12a20:	bl	11948 <error@plt>
   12a24:	b	1299c <__assert_fail@plt+0xdf0>
   12a28:	ldr	r1, [pc, #76]	; 12a7c <__assert_fail@plt+0xed0>
   12a2c:	mov	r2, #5
   12a30:	ldr	r0, [pc, #60]	; 12a74 <__assert_fail@plt+0xec8>
   12a34:	bl	11828 <__dcgettext@plt>
   12a38:	mov	r1, #0
   12a3c:	mov	r2, r0
   12a40:	mov	r0, r1
   12a44:	bl	11948 <error@plt>
   12a48:	mvn	r8, #0
   12a4c:	b	1299c <__assert_fail@plt+0xdf0>
   12a50:	mov	r2, #5
   12a54:	ldr	r1, [pc, #36]	; 12a80 <__assert_fail@plt+0xed4>
   12a58:	b	12a30 <__assert_fail@plt+0xe84>
   12a5c:	mov	r8, #1
   12a60:	b	1299c <__assert_fail@plt+0xdf0>
   12a64:	bl	118ac <__stack_chk_fail@plt>
   12a68:	strdeq	sl, [r2], -r8
   12a6c:	strdeq	fp, [r2], -r4
   12a70:	muleq	r1, ip, r0
   12a74:	andeq	sl, r2, r0, lsl #30
   12a78:	andeq	r9, r1, r8, lsl r0
   12a7c:	andeq	r9, r1, r8, ror r0
   12a80:	andeq	r9, r1, r0, asr #32
   12a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a88:	mov	r7, r1
   12a8c:	ldr	r6, [pc, #352]	; 12bf4 <__assert_fail@plt+0x1048>
   12a90:	sub	sp, sp, #20
   12a94:	mov	r9, r2
   12a98:	ldr	r1, [r6, #12]
   12a9c:	str	r0, [sp, #12]
   12aa0:	cmp	r1, #0
   12aa4:	mov	sl, r3
   12aa8:	beq	12b54 <__assert_fail@plt+0xfa8>
   12aac:	mov	r4, #0
   12ab0:	mov	fp, r4
   12ab4:	b	12ad4 <__assert_fail@plt+0xf28>
   12ab8:	cmn	r5, #1
   12abc:	add	r4, r4, r5
   12ac0:	beq	12b20 <__assert_fail@plt+0xf74>
   12ac4:	ldr	r1, [r6, #12]
   12ac8:	add	fp, fp, r5
   12acc:	cmp	r1, r4
   12ad0:	bls	12af0 <__assert_fail@plt+0xf44>
   12ad4:	sub	r2, r1, r4
   12ad8:	mov	r0, r7
   12adc:	mov	r1, fp
   12ae0:	bl	1181c <read@plt>
   12ae4:	subs	r5, r0, #0
   12ae8:	bne	12ab8 <__assert_fail@plt+0xf0c>
   12aec:	ldr	r1, [r6, #12]
   12af0:	cmp	r1, r4
   12af4:	beq	12b58 <__assert_fail@plt+0xfac>
   12af8:	str	sl, [sp]
   12afc:	mov	r3, r9
   12b00:	mov	r2, r4
   12b04:	ldr	r1, [r6, #16]
   12b08:	ldr	r0, [sp, #12]
   12b0c:	bl	127e4 <__assert_fail@plt+0xc38>
   12b10:	mov	r5, r0
   12b14:	mov	r0, r5
   12b18:	add	sp, sp, #20
   12b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b20:	bl	11a38 <__errno_location@plt>
   12b24:	mov	r2, #5
   12b28:	ldr	r1, [pc, #200]	; 12bf8 <__assert_fail@plt+0x104c>
   12b2c:	ldr	r4, [r0]
   12b30:	ldr	r0, [pc, #196]	; 12bfc <__assert_fail@plt+0x1050>
   12b34:	bl	11828 <__dcgettext@plt>
   12b38:	mov	r1, r4
   12b3c:	mov	r2, r0
   12b40:	mov	r0, #0
   12b44:	bl	11948 <error@plt>
   12b48:	mov	r0, r5
   12b4c:	add	sp, sp, #20
   12b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b54:	mov	r4, r1
   12b58:	mov	r8, r4
   12b5c:	add	r8, r8, #32768	; 0x8000
   12b60:	mov	r1, r8
   12b64:	ldr	r0, [r6, #16]
   12b68:	bl	118d0 <realloc@plt>
   12b6c:	subs	r3, r0, #0
   12b70:	beq	12bbc <__assert_fail@plt+0x1010>
   12b74:	add	fp, r3, r4
   12b78:	str	r3, [r6, #16]
   12b7c:	str	r8, [r6, #12]
   12b80:	b	12ba0 <__assert_fail@plt+0xff4>
   12b84:	cmn	r5, #1
   12b88:	add	r4, r4, r5
   12b8c:	beq	12b20 <__assert_fail@plt+0xf74>
   12b90:	ldr	r8, [r6, #12]
   12b94:	add	fp, fp, r5
   12b98:	cmp	r8, r4
   12b9c:	bls	12b5c <__assert_fail@plt+0xfb0>
   12ba0:	sub	r2, r8, r4
   12ba4:	mov	r1, fp
   12ba8:	mov	r0, r7
   12bac:	bl	1181c <read@plt>
   12bb0:	subs	r5, r0, #0
   12bb4:	bne	12b84 <__assert_fail@plt+0xfd8>
   12bb8:	b	12af8 <__assert_fail@plt+0xf4c>
   12bbc:	str	r3, [sp, #12]
   12bc0:	bl	11a38 <__errno_location@plt>
   12bc4:	mov	r2, #5
   12bc8:	ldr	r1, [pc, #48]	; 12c00 <__assert_fail@plt+0x1054>
   12bcc:	mvn	r5, #0
   12bd0:	ldr	r4, [r0]
   12bd4:	ldr	r0, [pc, #32]	; 12bfc <__assert_fail@plt+0x1050>
   12bd8:	bl	11828 <__dcgettext@plt>
   12bdc:	ldr	r3, [sp, #12]
   12be0:	mov	r1, r4
   12be4:	mov	r2, r0
   12be8:	mov	r0, r3
   12bec:	bl	11948 <error@plt>
   12bf0:	b	12b48 <__assert_fail@plt+0xf9c>
   12bf4:	andeq	fp, r2, ip, asr #3
   12bf8:	strheq	r9, [r1], -r8
   12bfc:	andeq	sl, r2, r0, lsl #30
   12c00:	ldrdeq	r9, [r1], -r8
   12c04:	bic	r1, r1, #2
   12c08:	cmp	r1, #1
   12c0c:	bxne	lr
   12c10:	push	{r4, r5, r6, r7, r8, lr}
   12c14:	ldr	r5, [r0]
   12c18:	mov	r0, r5
   12c1c:	bl	11a08 <strlen@plt>
   12c20:	cmp	r0, #0
   12c24:	popeq	{r4, r5, r6, r7, r8, pc}
   12c28:	sub	r4, r0, #1
   12c2c:	add	r3, r5, r4
   12c30:	ldrb	r2, [r5, r4]
   12c34:	cmp	r2, #47	; 0x2f
   12c38:	beq	12c44 <__assert_fail@plt+0x1098>
   12c3c:	b	12d50 <__assert_fail@plt+0x11a4>
   12c40:	mov	r4, r1
   12c44:	cmp	r4, #0
   12c48:	popeq	{r4, r5, r6, r7, r8, pc}
   12c4c:	ldrb	r2, [r3, #-1]!
   12c50:	sub	r1, r4, #1
   12c54:	cmp	r2, #47	; 0x2f
   12c58:	beq	12c40 <__assert_fail@plt+0x1094>
   12c5c:	bl	119d8 <__ctype_b_loc@plt>
   12c60:	sub	r1, r5, #1
   12c64:	mov	r2, #0
   12c68:	ldr	r0, [r0]
   12c6c:	b	12c78 <__assert_fail@plt+0x10cc>
   12c70:	cmp	r4, r2
   12c74:	bls	12cd0 <__assert_fail@plt+0x1124>
   12c78:	ldrb	r3, [r1, #1]!
   12c7c:	add	r2, r2, #1
   12c80:	lsl	r3, r3, #1
   12c84:	ldrh	r3, [r0, r3]
   12c88:	tst	r3, #8
   12c8c:	beq	12c70 <__assert_fail@plt+0x10c4>
   12c90:	ldr	r6, [pc, #192]	; 12d58 <__assert_fail@plt+0x11ac>
   12c94:	ldr	r7, [pc, #192]	; 12d5c <__assert_fail@plt+0x11b0>
   12c98:	ldr	r2, [r6, #20]
   12c9c:	ldr	r3, [r7]
   12ca0:	cmp	r2, #0
   12ca4:	moveq	r2, #1
   12ca8:	streq	r2, [r6, #20]
   12cac:	bne	12cd8 <__assert_fail@plt+0x112c>
   12cb0:	mov	r1, r4
   12cb4:	mov	r0, r5
   12cb8:	mov	r2, #1
   12cbc:	bl	11918 <fwrite@plt>
   12cc0:	ldr	r3, [r6, #24]
   12cc4:	add	r4, r3, r4
   12cc8:	str	r4, [r6, #24]
   12ccc:	pop	{r4, r5, r6, r7, r8, pc}
   12cd0:	bne	12c90 <__assert_fail@plt+0x10e4>
   12cd4:	pop	{r4, r5, r6, r7, r8, pc}
   12cd8:	mov	r1, r3
   12cdc:	mov	r0, #44	; 0x2c
   12ce0:	bl	11b1c <putc@plt>
   12ce4:	ldr	r3, [r6, #24]
   12ce8:	add	r3, r3, #1
   12cec:	cmp	r3, #2
   12cf0:	str	r3, [r6, #24]
   12cf4:	bls	12d24 <__assert_fail@plt+0x1178>
   12cf8:	add	r3, r4, r3
   12cfc:	cmp	r3, #77	; 0x4d
   12d00:	ldr	r1, [r7]
   12d04:	bhi	12d2c <__assert_fail@plt+0x1180>
   12d08:	mov	r0, #32
   12d0c:	bl	11b1c <putc@plt>
   12d10:	ldr	r2, [r6, #24]
   12d14:	ldr	r3, [r7]
   12d18:	add	r2, r2, #1
   12d1c:	str	r2, [r6, #24]
   12d20:	b	12cb0 <__assert_fail@plt+0x1104>
   12d24:	ldr	r1, [r7]
   12d28:	b	12d08 <__assert_fail@plt+0x115c>
   12d2c:	mov	r3, r1
   12d30:	mov	r2, #3
   12d34:	mov	r1, #1
   12d38:	ldr	r0, [pc, #32]	; 12d60 <__assert_fail@plt+0x11b4>
   12d3c:	bl	11918 <fwrite@plt>
   12d40:	mov	r2, #2
   12d44:	ldr	r3, [r7]
   12d48:	str	r2, [r6, #24]
   12d4c:	b	12cb0 <__assert_fail@plt+0x1104>
   12d50:	mov	r4, r0
   12d54:	b	12c5c <__assert_fail@plt+0x10b0>
   12d58:	andeq	fp, r2, ip, asr #3
   12d5c:	andeq	fp, r2, r4, asr #3
   12d60:	strdeq	r9, [r1], -ip
   12d64:	bic	r1, r1, #2
   12d68:	cmp	r1, #1
   12d6c:	bxne	lr
   12d70:	ldr	r3, [r0]
   12d74:	ldr	r2, [pc, #8]	; 12d84 <__assert_fail@plt+0x11d8>
   12d78:	ldr	r1, [pc, #8]	; 12d88 <__assert_fail@plt+0x11dc>
   12d7c:	ldr	r0, [r3]
   12d80:	b	11a5c <tsearch@plt>
   12d84:			; <UNDEFINED> instruction: 0x000117bc
   12d88:	ldrdeq	fp, [r2], -r4
   12d8c:	ldr	ip, [r1, #8]
   12d90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d94:	cmp	ip, #0
   12d98:	ble	12e6c <__assert_fail@plt+0x12c0>
   12d9c:	cmp	ip, #1
   12da0:	mov	r7, r1
   12da4:	mov	r4, r0
   12da8:	mov	r5, r2
   12dac:	ldrb	r1, [r1, #12]
   12db0:	beq	12e30 <__assert_fail@plt+0x1284>
   12db4:	add	r6, r7, #12
   12db8:	mov	r8, #1
   12dbc:	b	12dec <__assert_fail@plt+0x1240>
   12dc0:	ldr	r1, [r4, r9, lsl #2]
   12dc4:	cmp	r1, #0
   12dc8:	movne	r4, r1
   12dcc:	beq	12e0c <__assert_fail@plt+0x1260>
   12dd0:	sub	r3, r6, #10
   12dd4:	sub	r3, r3, r7
   12dd8:	cmp	ip, r3
   12ddc:	ldrb	r1, [r6, #1]
   12de0:	add	r3, r6, #1
   12de4:	ble	12e30 <__assert_fail@plt+0x1284>
   12de8:	mov	r6, r3
   12dec:	lsr	r3, r1, #3
   12df0:	and	r2, r1, #7
   12df4:	ldr	r0, [r4, r3, lsl #2]
   12df8:	lsl	r2, r8, r2
   12dfc:	tst	r0, r2
   12e00:	add	r9, r1, #32
   12e04:	add	r3, r4, r3, lsl #2
   12e08:	beq	12dc0 <__assert_fail@plt+0x1214>
   12e0c:	bic	r2, r0, r2
   12e10:	str	r2, [r3]
   12e14:	mov	r1, #1152	; 0x480
   12e18:	mov	r0, #1
   12e1c:	bl	1862c <__assert_fail@plt+0x6a80>
   12e20:	ldr	ip, [r7, #8]
   12e24:	str	r0, [r4, r9, lsl #2]
   12e28:	mov	r4, r0
   12e2c:	b	12dd0 <__assert_fail@plt+0x1224>
   12e30:	lsr	r3, r1, #3
   12e34:	and	ip, r1, #7
   12e38:	mov	r2, #1
   12e3c:	ldr	r0, [r4, r3, lsl #2]
   12e40:	lsl	r2, r2, ip
   12e44:	tst	r0, r2
   12e48:	add	r3, r4, r3, lsl #2
   12e4c:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e50:	add	r4, r4, r1, lsl #2
   12e54:	ldr	r1, [r4, #128]	; 0x80
   12e58:	cmp	r1, #0
   12e5c:	orreq	r2, r0, r2
   12e60:	streq	r2, [r3]
   12e64:	streq	r5, [r4, #128]	; 0x80
   12e68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e6c:	ldr	r3, [pc, #12]	; 12e80 <__assert_fail@plt+0x12d4>
   12e70:	mov	r2, #243	; 0xf3
   12e74:	ldr	r1, [pc, #8]	; 12e84 <__assert_fail@plt+0x12d8>
   12e78:	ldr	r0, [pc, #8]	; 12e88 <__assert_fail@plt+0x12dc>
   12e7c:	bl	11bac <__assert_fail@plt>
   12e80:	andeq	r9, r1, r8, ror #10
   12e84:	andeq	r9, r1, r0, ror #9
   12e88:	strdeq	r9, [r1], -r0
   12e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e90:	subs	r9, r2, #0
   12e94:	sub	sp, sp, #12
   12e98:	beq	12f88 <__assert_fail@plt+0x13dc>
   12e9c:	mov	sl, r3
   12ea0:	ldr	r3, [pc, #352]	; 13008 <__assert_fail@plt+0x145c>
   12ea4:	mov	r2, r0
   12ea8:	mov	r6, r1
   12eac:	mov	r7, #0
   12eb0:	mov	r8, #1
   12eb4:	ldrb	r1, [r6]
   12eb8:	ldr	fp, [r3]
   12ebc:	mov	r4, r2
   12ec0:	mov	r0, r6
   12ec4:	lsr	lr, r1, #3
   12ec8:	and	ip, r1, #7
   12ecc:	ldr	r5, [r4, lr, lsl #2]
   12ed0:	add	r1, r1, #32
   12ed4:	ands	r5, r5, r8, lsl ip
   12ed8:	ldr	r4, [r4, r1, lsl #2]
   12edc:	bne	12f30 <__assert_fail@plt+0x1384>
   12ee0:	cmp	r4, #0
   12ee4:	beq	12f00 <__assert_fail@plt+0x1354>
   12ee8:	add	r7, r7, #1
   12eec:	cmp	r9, r7
   12ef0:	bls	12fac <__assert_fail@plt+0x1400>
   12ef4:	ldrb	r1, [r6, #1]
   12ef8:	add	r6, r6, #1
   12efc:	b	12ec4 <__assert_fail@plt+0x1318>
   12f00:	cmp	fp, #0
   12f04:	sub	r6, r6, r0
   12f08:	add	r1, r7, #1
   12f0c:	beq	12fd8 <__assert_fail@plt+0x142c>
   12f10:	sub	r7, r1, r6
   12f14:	cmp	r9, r7
   12f18:	add	r6, r0, #1
   12f1c:	ldrb	r1, [r0, #1]
   12f20:	bls	12f88 <__assert_fail@plt+0x13dc>
   12f24:	mov	r0, r6
   12f28:	mov	r4, r2
   12f2c:	b	12ec4 <__assert_fail@plt+0x1318>
   12f30:	ldr	r1, [r4, #8]
   12f34:	cmp	r1, #0
   12f38:	addgt	r5, r4, #11
   12f3c:	ble	12f78 <__assert_fail@plt+0x13cc>
   12f40:	ldrd	r0, [sl, #20]
   12f44:	add	fp, r5, #1
   12f48:	cmp	r0, r1
   12f4c:	ldrb	r1, [r5, #1]
   12f50:	add	ip, r0, #1
   12f54:	strcc	ip, [sl, #20]
   12f58:	strbcc	r1, [r0]
   12f5c:	bcs	12f94 <__assert_fail@plt+0x13e8>
   12f60:	sub	r5, r5, #10
   12f64:	ldr	r1, [r4, #8]
   12f68:	sub	r5, r5, r4
   12f6c:	cmp	r1, r5
   12f70:	mov	r5, fp
   12f74:	bgt	12f40 <__assert_fail@plt+0x1394>
   12f78:	add	r7, r7, #1
   12f7c:	cmp	r9, r7
   12f80:	add	r6, r6, #1
   12f84:	bhi	12eb4 <__assert_fail@plt+0x1308>
   12f88:	mov	r0, #0
   12f8c:	add	sp, sp, #12
   12f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f94:	mov	r0, sl
   12f98:	str	r2, [sp, #4]
   12f9c:	bl	11ae0 <__overflow@plt>
   12fa0:	ldr	r2, [sp, #4]
   12fa4:	ldr	r3, [pc, #92]	; 13008 <__assert_fail@plt+0x145c>
   12fa8:	b	12f60 <__assert_fail@plt+0x13b4>
   12fac:	mov	r2, #5
   12fb0:	ldr	r1, [pc, #84]	; 1300c <__assert_fail@plt+0x1460>
   12fb4:	ldr	r0, [pc, #84]	; 13010 <__assert_fail@plt+0x1464>
   12fb8:	bl	11828 <__dcgettext@plt>
   12fbc:	mov	r1, r5
   12fc0:	mov	r2, r0
   12fc4:	mov	r0, r5
   12fc8:	bl	11948 <error@plt>
   12fcc:	mvn	r0, #0
   12fd0:	add	sp, sp, #12
   12fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fd8:	mov	r2, #5
   12fdc:	ldr	r1, [pc, #48]	; 13014 <__assert_fail@plt+0x1468>
   12fe0:	ldr	r0, [pc, #40]	; 13010 <__assert_fail@plt+0x1464>
   12fe4:	bl	11828 <__dcgettext@plt>
   12fe8:	mov	r3, r7
   12fec:	mov	r1, fp
   12ff0:	mov	r2, r0
   12ff4:	mov	r0, fp
   12ff8:	bl	11948 <error@plt>
   12ffc:	mvn	r0, #0
   13000:	add	sp, sp, #12
   13004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13008:	strdeq	fp, [r2], -r4
   1300c:	andeq	r9, r1, r0, asr #32
   13010:	andeq	sl, r2, r0, lsl #30
   13014:	andeq	r9, r1, r0, lsl #10
   13018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1301c:	mov	r9, r0
   13020:	ldr	r7, [pc, #316]	; 13164 <__assert_fail@plt+0x15b8>
   13024:	sub	sp, sp, #4
   13028:	mov	r8, r1
   1302c:	ldr	r3, [r7, #4]
   13030:	mov	sl, r2
   13034:	cmp	r3, #0
   13038:	ldr	r6, [r7]
   1303c:	beq	130dc <__assert_fail@plt+0x1530>
   13040:	mov	r4, #0
   13044:	b	13064 <__assert_fail@plt+0x14b8>
   13048:	cmn	r0, #1
   1304c:	add	r4, r4, r0
   13050:	beq	130a8 <__assert_fail@plt+0x14fc>
   13054:	ldr	r3, [r7, #4]
   13058:	add	r6, r6, r0
   1305c:	cmp	r3, r4
   13060:	bls	13080 <__assert_fail@plt+0x14d4>
   13064:	sub	r2, r3, r4
   13068:	mov	r1, r6
   1306c:	mov	r0, r8
   13070:	bl	1181c <read@plt>
   13074:	cmp	r0, #0
   13078:	bne	13048 <__assert_fail@plt+0x149c>
   1307c:	ldr	r3, [r7, #4]
   13080:	cmp	r3, r4
   13084:	ldr	r6, [r7]
   13088:	beq	130e0 <__assert_fail@plt+0x1534>
   1308c:	mov	r3, sl
   13090:	mov	r2, r4
   13094:	mov	r1, r6
   13098:	mov	r0, r9
   1309c:	add	sp, sp, #4
   130a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130a4:	b	12e8c <__assert_fail@plt+0x12e0>
   130a8:	bl	11a38 <__errno_location@plt>
   130ac:	ldr	r1, [pc, #180]	; 13168 <__assert_fail@plt+0x15bc>
   130b0:	mov	r2, #5
   130b4:	ldr	r4, [r0]
   130b8:	ldr	r0, [pc, #172]	; 1316c <__assert_fail@plt+0x15c0>
   130bc:	bl	11828 <__dcgettext@plt>
   130c0:	mov	r1, r4
   130c4:	mov	r2, r0
   130c8:	mov	r0, #0
   130cc:	bl	11948 <error@plt>
   130d0:	mvn	r0, #0
   130d4:	add	sp, sp, #4
   130d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130dc:	mov	r4, r3
   130e0:	mov	r5, r4
   130e4:	add	r4, r4, #32768	; 0x8000
   130e8:	mov	r0, r6
   130ec:	mov	r1, r4
   130f0:	bl	118d0 <realloc@plt>
   130f4:	subs	fp, r0, #0
   130f8:	beq	13154 <__assert_fail@plt+0x15a8>
   130fc:	add	r6, fp, r5
   13100:	str	fp, [r7]
   13104:	str	r4, [r7, #4]
   13108:	b	13128 <__assert_fail@plt+0x157c>
   1310c:	cmn	r0, #1
   13110:	add	r5, r5, r0
   13114:	beq	130a8 <__assert_fail@plt+0x14fc>
   13118:	ldr	r4, [r7, #4]
   1311c:	add	r6, r6, r0
   13120:	cmp	r4, r5
   13124:	bls	1314c <__assert_fail@plt+0x15a0>
   13128:	sub	r2, r4, r5
   1312c:	mov	r1, r6
   13130:	mov	r0, r8
   13134:	bl	1181c <read@plt>
   13138:	cmp	r0, #0
   1313c:	bne	1310c <__assert_fail@plt+0x1560>
   13140:	ldr	r6, [r7]
   13144:	mov	r4, r5
   13148:	b	1308c <__assert_fail@plt+0x14e0>
   1314c:	ldr	r6, [r7]
   13150:	b	130e4 <__assert_fail@plt+0x1538>
   13154:	bl	11a38 <__errno_location@plt>
   13158:	mov	r2, #5
   1315c:	ldr	r1, [pc, #12]	; 13170 <__assert_fail@plt+0x15c4>
   13160:	b	130b4 <__assert_fail@plt+0x1508>
   13164:	andeq	fp, r2, r8, ror #3
   13168:	strheq	r9, [r1], -r8
   1316c:	andeq	sl, r2, r0, lsl #30
   13170:	ldrdeq	r9, [r1], -r8
   13174:	push	{r4, r5, r6, r7, r8, r9, lr}
   13178:	mov	r7, r2
   1317c:	ldr	r6, [pc, #260]	; 13288 <__assert_fail@plt+0x16dc>
   13180:	ldr	r3, [r2]
   13184:	sub	sp, sp, #100	; 0x64
   13188:	ldr	r2, [r6]
   1318c:	cmn	r3, #2
   13190:	str	r2, [sp, #92]	; 0x5c
   13194:	beq	13260 <__assert_fail@plt+0x16b4>
   13198:	add	r2, sp, #20
   1319c:	str	r2, [sp]
   131a0:	mov	r9, r1
   131a4:	add	r2, sp, #24
   131a8:	mov	r1, #4
   131ac:	add	r5, sp, #28
   131b0:	mov	ip, #64	; 0x40
   131b4:	str	r3, [sp, #24]
   131b8:	str	r2, [sp, #8]
   131bc:	add	r3, sp, #16
   131c0:	str	r1, [sp, #12]
   131c4:	add	r2, sp, #12
   131c8:	add	r1, sp, #8
   131cc:	mov	r8, r0
   131d0:	str	r5, [sp, #16]
   131d4:	str	ip, [sp, #20]
   131d8:	bl	117d4 <iconv@plt>
   131dc:	ldr	r3, [sp, #16]
   131e0:	cmp	r3, r5
   131e4:	beq	13268 <__assert_fail@plt+0x16bc>
   131e8:	ldr	r0, [sp, #20]
   131ec:	rsb	r2, r0, #64	; 0x40
   131f0:	add	r1, r5, r2
   131f4:	cmp	r3, r1
   131f8:	str	r2, [sp, #20]
   131fc:	bne	13274 <__assert_fail@plt+0x16c8>
   13200:	rsb	r0, r0, #76	; 0x4c
   13204:	bl	1860c <__assert_fail@plt+0x6a60>
   13208:	ldr	r1, [r9]
   1320c:	ldr	r3, [r7]
   13210:	ldr	r2, [sp, #20]
   13214:	stm	r0, {r1, r3}
   13218:	mov	r4, r0
   1321c:	str	r2, [r0, #8]
   13220:	mov	r1, r5
   13224:	add	r0, r0, #12
   13228:	bl	11864 <memcpy@plt>
   1322c:	mov	r3, #0
   13230:	mov	r0, r8
   13234:	str	r3, [sp]
   13238:	mov	r2, r3
   1323c:	mov	r1, r3
   13240:	bl	117d4 <iconv@plt>
   13244:	ldr	r2, [sp, #92]	; 0x5c
   13248:	ldr	r3, [r6]
   1324c:	mov	r0, r4
   13250:	cmp	r2, r3
   13254:	bne	13270 <__assert_fail@plt+0x16c4>
   13258:	add	sp, sp, #100	; 0x64
   1325c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13260:	mov	r4, #0
   13264:	b	13244 <__assert_fail@plt+0x1698>
   13268:	mov	r4, #0
   1326c:	b	1322c <__assert_fail@plt+0x1680>
   13270:	bl	118ac <__stack_chk_fail@plt>
   13274:	ldr	r3, [pc, #16]	; 1328c <__assert_fail@plt+0x16e0>
   13278:	ldr	r2, [pc, #16]	; 13290 <__assert_fail@plt+0x16e4>
   1327c:	ldr	r1, [pc, #16]	; 13294 <__assert_fail@plt+0x16e8>
   13280:	ldr	r0, [pc, #16]	; 13298 <__assert_fail@plt+0x16ec>
   13284:	bl	11bac <__assert_fail@plt>
   13288:	strdeq	sl, [r2], -r8
   1328c:	andeq	r9, r1, r4, ror r5
   13290:	andeq	r0, r0, r6, lsr #2
   13294:	andeq	r9, r1, r0, ror #9
   13298:	andeq	r9, r1, r8, lsr #10
   1329c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132a0:	sub	sp, sp, #156	; 0x9c
   132a4:	subs	sl, r1, #0
   132a8:	ldr	r1, [pc, #1128]	; 13718 <__assert_fail@plt+0x1b6c>
   132ac:	mov	r9, r3
   132b0:	ldr	r3, [sp, #200]	; 0xc8
   132b4:	ldr	r1, [r1]
   132b8:	str	r3, [sp, #16]
   132bc:	ldr	r3, [sp, #204]	; 0xcc
   132c0:	str	r1, [sp, #148]	; 0x94
   132c4:	ldr	r4, [sp, #196]	; 0xc4
   132c8:	str	r3, [sp, #12]
   132cc:	beq	135a4 <__assert_fail@plt+0x19f8>
   132d0:	cmp	r9, #0
   132d4:	beq	1348c <__assert_fail@plt+0x18e0>
   132d8:	mov	r1, #1152	; 0x480
   132dc:	mov	r0, #1
   132e0:	bl	1862c <__assert_fail@plt+0x6a80>
   132e4:	mov	r3, #0
   132e8:	add	sl, sl, #76	; 0x4c
   132ec:	str	r3, [sp, #28]
   132f0:	add	r8, sp, #36	; 0x24
   132f4:	add	r7, sp, #32
   132f8:	add	r6, sp, #28
   132fc:	add	r5, sp, #40	; 0x28
   13300:	str	r0, [sp, #8]
   13304:	b	13324 <__assert_fail@plt+0x1778>
   13308:	ldr	r2, [sp, #36]	; 0x24
   1330c:	ldr	r1, [sp, #32]
   13310:	mov	r0, r9
   13314:	ldr	fp, [sp, #40]	; 0x28
   13318:	bl	15924 <__assert_fail@plt+0x3d78>
   1331c:	cmp	r0, #0
   13320:	bne	13590 <__assert_fail@plt+0x19e4>
   13324:	str	r5, [sp]
   13328:	mov	r3, r8
   1332c:	mov	r2, r7
   13330:	mov	r1, r6
   13334:	mov	r0, sl
   13338:	bl	184b0 <__assert_fail@plt+0x6904>
   1333c:	cmp	r0, #0
   13340:	bge	13308 <__assert_fail@plt+0x175c>
   13344:	ldr	r3, [sp, #8]
   13348:	cmp	r3, #0
   1334c:	beq	1351c <__assert_fail@plt+0x1970>
   13350:	ldr	r3, [sp, #12]
   13354:	cmp	r3, #0
   13358:	beq	13370 <__assert_fail@plt+0x17c4>
   1335c:	ldr	r1, [pc, #952]	; 1371c <__assert_fail@plt+0x1b70>
   13360:	mov	r0, r3
   13364:	bl	117e0 <strcmp@plt>
   13368:	cmp	r0, #0
   1336c:	bne	13650 <__assert_fail@plt+0x1aa4>
   13370:	ldr	r3, [pc, #936]	; 13720 <__assert_fail@plt+0x1b74>
   13374:	ldr	sl, [r3]
   13378:	ldr	r3, [sp, #192]	; 0xc0
   1337c:	cmp	r4, r3
   13380:	beq	136a0 <__assert_fail@plt+0x1af4>
   13384:	ldr	r3, [sp, #16]
   13388:	ldr	r9, [pc, #916]	; 13724 <__assert_fail@plt+0x1b78>
   1338c:	add	r7, r3, r4, lsl #2
   13390:	mov	r3, #0
   13394:	ldr	fp, [pc, #896]	; 1371c <__assert_fail@plt+0x1b70>
   13398:	str	r3, [sp, #16]
   1339c:	str	sl, [sp, #12]
   133a0:	b	13410 <__assert_fail@plt+0x1864>
   133a4:	str	r3, [sp, #4]
   133a8:	str	r6, [sp]
   133ac:	mov	r3, #2
   133b0:	mov	r2, #1
   133b4:	ldr	r1, [sp, #88]	; 0x58
   133b8:	bl	11a14 <mmap@plt>
   133bc:	cmn	r0, #1
   133c0:	mov	r8, r0
   133c4:	beq	13468 <__assert_fail@plt+0x18bc>
   133c8:	mov	r0, r6
   133cc:	bl	11b94 <close@plt>
   133d0:	cmp	r0, #0
   133d4:	bne	136d4 <__assert_fail@plt+0x1b28>
   133d8:	mov	r1, r8
   133dc:	ldr	r3, [sp, #12]
   133e0:	ldr	r2, [sp, #88]	; 0x58
   133e4:	ldr	r0, [sp, #8]
   133e8:	bl	12e8c <__assert_fail@plt+0x12e0>
   133ec:	ldr	r1, [sp, #88]	; 0x58
   133f0:	cmp	r0, #0
   133f4:	mov	r0, r8
   133f8:	blt	136cc <__assert_fail@plt+0x1b20>
   133fc:	bl	11ad4 <munmap@plt>
   13400:	ldr	r3, [sp, #192]	; 0xc0
   13404:	add	r4, r4, #1
   13408:	cmp	r3, r4
   1340c:	ble	13524 <__assert_fail@plt+0x1978>
   13410:	ldr	r3, [r9]
   13414:	mov	sl, r7
   13418:	cmp	r3, #0
   1341c:	ldr	r8, [r7], #4
   13420:	bne	13544 <__assert_fail@plt+0x1998>
   13424:	mov	r1, fp
   13428:	mov	r0, r8
   1342c:	bl	117e0 <strcmp@plt>
   13430:	subs	r6, r0, #0
   13434:	beq	13450 <__assert_fail@plt+0x18a4>
   13438:	mov	r0, r8
   1343c:	mov	r1, #0
   13440:	bl	119cc <open@plt>
   13444:	cmn	r0, #1
   13448:	mov	r6, r0
   1344c:	beq	13558 <__assert_fail@plt+0x19ac>
   13450:	mov	r2, r5
   13454:	mov	r1, r6
   13458:	mov	r0, #3
   1345c:	bl	1190c <__fxstat64@plt>
   13460:	subs	r3, r0, #0
   13464:	beq	133a4 <__assert_fail@plt+0x17f8>
   13468:	ldr	r2, [sp, #12]
   1346c:	mov	r1, r6
   13470:	ldr	r0, [sp, #8]
   13474:	bl	13018 <__assert_fail@plt+0x146c>
   13478:	cmp	r0, #0
   1347c:	mov	r0, r6
   13480:	bne	13518 <__assert_fail@plt+0x196c>
   13484:	bl	11b94 <close@plt>
   13488:	b	13400 <__assert_fail@plt+0x1854>
   1348c:	mov	r0, r2
   13490:	ldr	r1, [pc, #656]	; 13728 <__assert_fail@plt+0x1b7c>
   13494:	str	r9, [sp, #28]
   13498:	bl	11990 <iconv_open@plt>
   1349c:	cmn	r0, #1
   134a0:	mov	fp, r0
   134a4:	beq	1351c <__assert_fail@plt+0x1970>
   134a8:	mov	r1, #1152	; 0x480
   134ac:	mov	r0, #1
   134b0:	bl	1862c <__assert_fail@plt+0x6a80>
   134b4:	add	r9, sl, #76	; 0x4c
   134b8:	add	r8, sp, #36	; 0x24
   134bc:	add	r7, sp, #32
   134c0:	add	r6, sp, #28
   134c4:	add	r5, sp, #40	; 0x28
   134c8:	str	r0, [sp, #8]
   134cc:	b	134ec <__assert_fail@plt+0x1940>
   134d0:	ldr	sl, [sp, #40]	; 0x28
   134d4:	mov	r0, fp
   134d8:	add	r2, sl, #4
   134dc:	mov	r1, sl
   134e0:	bl	13174 <__assert_fail@plt+0x15c8>
   134e4:	cmp	r0, #0
   134e8:	bne	1368c <__assert_fail@plt+0x1ae0>
   134ec:	str	r5, [sp]
   134f0:	mov	r3, r8
   134f4:	mov	r2, r7
   134f8:	mov	r1, r6
   134fc:	mov	r0, r9
   13500:	bl	184b0 <__assert_fail@plt+0x6904>
   13504:	cmp	r0, #0
   13508:	bge	134d0 <__assert_fail@plt+0x1924>
   1350c:	mov	r0, fp
   13510:	bl	117c8 <iconv_close@plt>
   13514:	b	13344 <__assert_fail@plt+0x1798>
   13518:	bl	11b94 <close@plt>
   1351c:	mov	r3, #1
   13520:	str	r3, [sp, #16]
   13524:	ldr	r3, [pc, #492]	; 13718 <__assert_fail@plt+0x1b6c>
   13528:	ldr	r2, [sp, #148]	; 0x94
   1352c:	ldr	r0, [sp, #16]
   13530:	ldr	r3, [r3]
   13534:	cmp	r2, r3
   13538:	bne	13700 <__assert_fail@plt+0x1b54>
   1353c:	add	sp, sp, #156	; 0x9c
   13540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13544:	mov	r1, r8
   13548:	ldr	r0, [pc, #476]	; 1372c <__assert_fail@plt+0x1b80>
   1354c:	bl	11804 <printf@plt>
   13550:	ldr	r8, [r7, #-4]
   13554:	b	13424 <__assert_fail@plt+0x1878>
   13558:	bl	11a38 <__errno_location@plt>
   1355c:	mov	r3, #1
   13560:	mov	r2, #5
   13564:	ldr	r1, [pc, #452]	; 13730 <__assert_fail@plt+0x1b84>
   13568:	str	r3, [sp, #16]
   1356c:	ldr	r6, [r0]
   13570:	ldr	r0, [pc, #444]	; 13734 <__assert_fail@plt+0x1b88>
   13574:	bl	11828 <__dcgettext@plt>
   13578:	mov	r1, r6
   1357c:	ldr	r3, [r7, #-4]
   13580:	mov	r2, r0
   13584:	mov	r0, #0
   13588:	bl	11948 <error@plt>
   1358c:	b	13400 <__assert_fail@plt+0x1854>
   13590:	mov	r2, r0
   13594:	mov	r1, fp
   13598:	ldr	r0, [sp, #8]
   1359c:	bl	12d8c <__assert_fail@plt+0x11e0>
   135a0:	b	13324 <__assert_fail@plt+0x1778>
   135a4:	cmp	r9, #0
   135a8:	beq	13704 <__assert_fail@plt+0x1b58>
   135ac:	ldr	r1, [pc, #372]	; 13728 <__assert_fail@plt+0x1b7c>
   135b0:	str	sl, [sp, #28]
   135b4:	bl	11990 <iconv_open@plt>
   135b8:	cmn	r0, #1
   135bc:	mov	fp, r0
   135c0:	beq	1351c <__assert_fail@plt+0x1970>
   135c4:	mov	r1, #1152	; 0x480
   135c8:	mov	r0, #1
   135cc:	bl	1862c <__assert_fail@plt+0x6a80>
   135d0:	add	r9, r9, #76	; 0x4c
   135d4:	add	r8, sp, #36	; 0x24
   135d8:	add	r7, sp, #32
   135dc:	add	r6, sp, #28
   135e0:	add	r5, sp, #40	; 0x28
   135e4:	str	r0, [sp, #8]
   135e8:	b	13608 <__assert_fail@plt+0x1a5c>
   135ec:	ldr	sl, [sp, #40]	; 0x28
   135f0:	mov	r0, fp
   135f4:	add	r2, sl, #4
   135f8:	mov	r1, sl
   135fc:	bl	13174 <__assert_fail@plt+0x15c8>
   13600:	subs	r3, r0, #0
   13604:	bne	1362c <__assert_fail@plt+0x1a80>
   13608:	str	r5, [sp]
   1360c:	mov	r3, r8
   13610:	mov	r2, r7
   13614:	mov	r1, r6
   13618:	mov	r0, r9
   1361c:	bl	184b0 <__assert_fail@plt+0x6904>
   13620:	cmp	r0, #0
   13624:	bge	135ec <__assert_fail@plt+0x1a40>
   13628:	b	1350c <__assert_fail@plt+0x1960>
   1362c:	mov	r1, r3
   13630:	ldr	r0, [sp, #8]
   13634:	mov	r2, sl
   13638:	str	r3, [sp, #20]
   1363c:	bl	12d8c <__assert_fail@plt+0x11e0>
   13640:	ldr	r3, [sp, #20]
   13644:	mov	r0, r3
   13648:	bl	11840 <free@plt>
   1364c:	b	13608 <__assert_fail@plt+0x1a5c>
   13650:	ldr	r0, [sp, #12]
   13654:	ldr	r1, [pc, #220]	; 13738 <__assert_fail@plt+0x1b8c>
   13658:	bl	11810 <fopen@plt>
   1365c:	subs	sl, r0, #0
   13660:	bne	13378 <__assert_fail@plt+0x17cc>
   13664:	bl	11a38 <__errno_location@plt>
   13668:	mov	r2, #5
   1366c:	ldr	r1, [pc, #200]	; 1373c <__assert_fail@plt+0x1b90>
   13670:	ldr	r4, [r0]
   13674:	ldr	r0, [pc, #184]	; 13734 <__assert_fail@plt+0x1b88>
   13678:	bl	11828 <__dcgettext@plt>
   1367c:	mov	r1, r4
   13680:	mov	r2, r0
   13684:	mov	r0, #1
   13688:	bl	11948 <error@plt>
   1368c:	mov	r2, r0
   13690:	mov	r1, sl
   13694:	ldr	r0, [sp, #8]
   13698:	bl	12d8c <__assert_fail@plt+0x11e0>
   1369c:	b	134ec <__assert_fail@plt+0x1940>
   136a0:	ldr	r3, [pc, #152]	; 13740 <__assert_fail@plt+0x1b94>
   136a4:	ldr	r0, [r3]
   136a8:	bl	11aa4 <fileno@plt>
   136ac:	mov	r2, sl
   136b0:	mov	r1, r0
   136b4:	ldr	r0, [sp, #8]
   136b8:	bl	13018 <__assert_fail@plt+0x146c>
   136bc:	adds	r3, r0, #0
   136c0:	movne	r3, #1
   136c4:	str	r3, [sp, #16]
   136c8:	b	13524 <__assert_fail@plt+0x1978>
   136cc:	bl	11ad4 <munmap@plt>
   136d0:	b	1351c <__assert_fail@plt+0x1970>
   136d4:	bl	11a38 <__errno_location@plt>
   136d8:	mov	r2, #5
   136dc:	ldr	r1, [pc, #96]	; 13744 <__assert_fail@plt+0x1b98>
   136e0:	ldr	r4, [r0]
   136e4:	ldr	r0, [pc, #72]	; 13734 <__assert_fail@plt+0x1b88>
   136e8:	bl	11828 <__dcgettext@plt>
   136ec:	mov	r1, r4
   136f0:	ldr	r3, [sl]
   136f4:	mov	r2, r0
   136f8:	mov	r0, #1
   136fc:	bl	11948 <error@plt>
   13700:	bl	118ac <__stack_chk_fail@plt>
   13704:	ldr	r3, [pc, #60]	; 13748 <__assert_fail@plt+0x1b9c>
   13708:	mov	r2, #127	; 0x7f
   1370c:	ldr	r1, [pc, #56]	; 1374c <__assert_fail@plt+0x1ba0>
   13710:	ldr	r0, [pc, #56]	; 13750 <__assert_fail@plt+0x1ba4>
   13714:	bl	11bac <__assert_fail@plt>
   13718:	strdeq	sl, [r2], -r8
   1371c:	andeq	r8, r1, r0, asr #31
   13720:	andeq	fp, r2, r4, asr #3
   13724:	andeq	fp, r2, r4, lsl #4
   13728:	andeq	r9, r1, ip, asr #10
   1372c:	andeq	r9, r1, r0, lsl #6
   13730:	andeq	r9, r1, r8, lsl #6
   13734:	andeq	sl, r2, r0, lsl #30
   13738:	andeq	r8, r1, r4, asr #31
   1373c:	andeq	r8, r1, r8, asr #31
   13740:	andeq	fp, r2, r0, asr #3
   13744:	andeq	r9, r1, r4, lsr #6
   13748:	andeq	r9, r1, r4, lsl #11
   1374c:	andeq	r9, r1, r0, ror #9
   13750:	andeq	r9, r1, r4, asr r5
   13754:	sub	r2, r1, #3
   13758:	cmp	r2, #11
   1375c:	bhi	13824 <__assert_fail@plt+0x1c78>
   13760:	push	{r4, r5, r6, lr}
   13764:	mov	r6, r1
   13768:	cmp	r2, #5
   1376c:	ldrls	pc, [pc, r2, lsl #2]
   13770:	b	1382c <__assert_fail@plt+0x1c80>
   13774:	andeq	r3, r1, ip, lsl #15
   13778:	andeq	r3, r1, ip, lsl #15
   1377c:	andeq	r3, r1, r8, lsl #16
   13780:	andeq	r3, r1, r8, lsl #16
   13784:	andeq	r3, r1, r8, lsl #16
   13788:	andeq	r3, r1, r8, lsl #16
   1378c:	ldr	ip, [pc, #172]	; 13840 <__assert_fail@plt+0x1c94>
   13790:	ldrb	lr, [r0, #1]
   13794:	sub	r2, r1, #1
   13798:	ldrb	r5, [r0]
   1379c:	ldrb	r3, [r0, r2]
   137a0:	ldrb	r4, [ip, lr]
   137a4:	ldrb	lr, [ip, r5]
   137a8:	ldrb	r3, [ip, r3]
   137ac:	add	r4, r4, r6
   137b0:	add	lr, lr, r4
   137b4:	add	r3, r3, lr
   137b8:	cmp	r3, #35	; 0x23
   137bc:	bgt	1381c <__assert_fail@plt+0x1c70>
   137c0:	rsb	r3, r3, r3, lsl #3
   137c4:	lsl	r4, r3, #2
   137c8:	add	ip, ip, r4
   137cc:	ldr	r6, [ip, #256]	; 0x100
   137d0:	ldrb	r3, [r6]
   137d4:	cmp	r3, r5
   137d8:	bne	1381c <__assert_fail@plt+0x1c70>
   137dc:	mov	r5, r1
   137e0:	add	r0, r0, #1
   137e4:	add	r1, r6, #1
   137e8:	bl	11b64 <strncmp@plt>
   137ec:	cmp	r0, #0
   137f0:	bne	1381c <__assert_fail@plt+0x1c70>
   137f4:	ldrb	r3, [r6, r5]
   137f8:	cmp	r3, #0
   137fc:	ldreq	r0, [pc, #64]	; 13844 <__assert_fail@plt+0x1c98>
   13800:	addeq	r0, r0, r4
   13804:	pop	{r4, r5, r6, pc}
   13808:	ldr	ip, [pc, #48]	; 13840 <__assert_fail@plt+0x1c94>
   1380c:	ldrb	r3, [r0, #4]
   13810:	ldrb	r3, [ip, r3]
   13814:	add	r6, r6, r3
   13818:	b	13790 <__assert_fail@plt+0x1be4>
   1381c:	mov	r0, #0
   13820:	pop	{r4, r5, r6, pc}
   13824:	mov	r0, #0
   13828:	bx	lr
   1382c:	ldrb	r3, [r0, #8]
   13830:	ldr	ip, [pc, #8]	; 13840 <__assert_fail@plt+0x1c94>
   13834:	ldrb	r4, [ip, r3]
   13838:	add	r6, r1, r4
   1383c:	b	1380c <__assert_fail@plt+0x1c60>
   13840:	muleq	r1, r8, r5
   13844:	muleq	r1, r8, r6
   13848:	push	{r1, r2, r3}
   1384c:	push	{r4, r5, r6, r7, lr}
   13850:	sub	sp, sp, #24
   13854:	ldr	r4, [pc, #144]	; 138ec <__assert_fail@plt+0x1d40>
   13858:	add	r3, sp, #48	; 0x30
   1385c:	ldr	r6, [sp, #44]	; 0x2c
   13860:	ldr	r2, [r4]
   13864:	str	r3, [sp, #16]
   13868:	str	r2, [sp, #20]
   1386c:	mov	r5, r0
   13870:	bl	18680 <__assert_fail@plt+0x6ad4>
   13874:	mov	r1, r6
   13878:	ldr	r2, [sp, #16]
   1387c:	mov	r7, r0
   13880:	add	r0, sp, #12
   13884:	bl	117b0 <vasprintf@plt>
   13888:	cmn	r0, #1
   1388c:	beq	138e8 <__assert_fail@plt+0x1d3c>
   13890:	mov	r0, r7
   13894:	bl	18724 <__assert_fail@plt+0x6b78>
   13898:	ldr	r2, [sp, #12]
   1389c:	ldr	r3, [pc, #76]	; 138f0 <__assert_fail@plt+0x1d44>
   138a0:	mov	r1, #0
   138a4:	str	r2, [sp, #4]
   138a8:	str	r3, [sp]
   138ac:	mov	r0, r1
   138b0:	ldr	r3, [r5, #20]
   138b4:	ldr	r2, [r5, #4]
   138b8:	bl	11984 <error_at_line@plt>
   138bc:	ldr	r0, [sp, #12]
   138c0:	bl	11840 <free@plt>
   138c4:	ldr	r2, [sp, #20]
   138c8:	ldr	r3, [r4]
   138cc:	cmp	r2, r3
   138d0:	bne	138e4 <__assert_fail@plt+0x1d38>
   138d4:	add	sp, sp, #24
   138d8:	pop	{r4, r5, r6, r7, lr}
   138dc:	add	sp, sp, #12
   138e0:	bx	lr
   138e4:	bl	118ac <__stack_chk_fail@plt>
   138e8:	bl	11b70 <abort@plt>
   138ec:	strdeq	sl, [r2], -r8
   138f0:	andeq	r9, r1, r8, lsl #23
   138f4:	ldr	r3, [pc, #4076]	; 148e8 <__assert_fail@plt+0x2d3c>
   138f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138fc:	mov	r4, #0
   13900:	sub	sp, sp, #108	; 0x6c
   13904:	ldr	r3, [r3]
   13908:	str	r4, [r0, #56]	; 0x38
   1390c:	mov	r8, r0
   13910:	mov	r0, #256	; 0x100
   13914:	str	r3, [sp, #100]	; 0x64
   13918:	mov	r7, r1
   1391c:	bl	1860c <__assert_fail@plt+0x6a60>
   13920:	mov	r1, r4
   13924:	mov	r2, #256	; 0x100
   13928:	mov	sl, r0
   1392c:	bl	11a68 <memset@plt>
   13930:	ldr	r3, [pc, #4020]	; 148ec <__assert_fail@plt+0x2d40>
   13934:	add	ip, sl, #76	; 0x4c
   13938:	add	r1, sl, #32
   1393c:	mov	r2, #1
   13940:	str	r2, [sl, #28]
   13944:	str	r1, [sp, #12]
   13948:	mov	r2, r4
   1394c:	mov	r0, r1
   13950:	str	r3, [sp]
   13954:	mov	r1, r4
   13958:	ldr	r3, [pc, #3984]	; 148f0 <__assert_fail@plt+0x2d44>
   1395c:	mov	r4, ip
   13960:	str	ip, [sp, #16]
   13964:	bl	118c4 <_obstack_begin@plt>
   13968:	mov	r0, r4
   1396c:	mov	r1, #256	; 0x100
   13970:	bl	18174 <__assert_fail@plt+0x65c8>
   13974:	cmp	r0, #0
   13978:	bne	13c38 <__assert_fail@plt+0x208c>
   1397c:	add	r3, sl, #136	; 0x88
   13980:	mov	r0, r3
   13984:	mov	r1, #256	; 0x100
   13988:	str	r3, [sp, #20]
   1398c:	bl	18174 <__assert_fail@plt+0x65c8>
   13990:	subs	r3, r0, #0
   13994:	bne	13c38 <__assert_fail@plt+0x208c>
   13998:	str	r7, [sp]
   1399c:	mov	r2, r3
   139a0:	mov	r1, r3
   139a4:	mov	r0, r8
   139a8:	bl	16510 <__assert_fail@plt+0x4964>
   139ac:	ldr	fp, [r0]
   139b0:	cmp	fp, #1
   139b4:	beq	13b60 <__assert_fail@plt+0x1fb4>
   139b8:	ldr	r4, [pc, #4040]	; 14988 <__assert_fail@plt+0x2ddc>
   139bc:	ldr	r6, [pc, #3888]	; 148f4 <__assert_fail@plt+0x2d48>
   139c0:	ldr	r9, [pc, #3888]	; 148f8 <__assert_fail@plt+0x2d4c>
   139c4:	cmp	fp, #2
   139c8:	beq	13c10 <__assert_fail@plt+0x2064>
   139cc:	cmp	fp, #22
   139d0:	beq	13d58 <__assert_fail@plt+0x21ac>
   139d4:	sub	r3, fp, #31
   139d8:	cmp	r3, #2
   139dc:	subls	r5, fp, #19
   139e0:	bls	13a00 <__assert_fail@plt+0x1e54>
   139e4:	sub	r3, fp, #24
   139e8:	cmp	r3, #3
   139ec:	sub	r5, fp, #19
   139f0:	bls	13a00 <__assert_fail@plt+0x1e54>
   139f4:	cmp	fp, #38	; 0x26
   139f8:	cmpne	r5, #2
   139fc:	bhi	149f8 <__assert_fail@plt+0x2e4c>
   13a00:	mov	r3, #0
   13a04:	mov	r2, r3
   13a08:	mov	r1, r3
   13a0c:	str	r7, [sp]
   13a10:	mov	r0, r8
   13a14:	bl	16510 <__assert_fail@plt+0x4964>
   13a18:	mov	r3, r0
   13a1c:	cmp	r5, #19
   13a20:	ldrls	pc, [pc, r5, lsl #2]
   13a24:	b	15478 <__assert_fail@plt+0x38cc>
   13a28:	andeq	r5, r1, r4, asr r4
   13a2c:	andeq	r3, r1, r4, ror #25
   13a30:	andeq	r3, r1, r4, ror #25
   13a34:	andeq	r5, r1, r8, ror r4
   13a38:	andeq	r5, r1, r8, ror r4
   13a3c:	andeq	r3, r1, r4, lsl #24
   13a40:	andeq	r3, r1, r4, lsl #24
   13a44:	andeq	r3, r1, r4, lsl #24
   13a48:	andeq	r3, r1, r4, lsl #24
   13a4c:	andeq	r3, r1, r4, lsl #24
   13a50:	andeq	r5, r1, r8, ror r4
   13a54:	andeq	r5, r1, r8, ror r4
   13a58:	andeq	r3, r1, r8, asr #24
   13a5c:	andeq	r3, r1, ip, lsr #23
   13a60:	andeq	r3, r1, ip, lsr #23
   13a64:	andeq	r5, r1, r8, ror r4
   13a68:	andeq	r5, r1, r8, ror r4
   13a6c:	andeq	r5, r1, r8, ror r4
   13a70:	andeq	r5, r1, r8, ror r4
   13a74:	andeq	r3, r1, r8, asr #24
   13a78:	mov	r3, #0
   13a7c:	cmp	r4, #9
   13a80:	str	r7, [sp]
   13a84:	mov	r2, r3
   13a88:	mov	r1, r3
   13a8c:	mov	r0, r8
   13a90:	beq	14098 <__assert_fail@plt+0x24ec>
   13a94:	cmp	r4, #8
   13a98:	beq	14098 <__assert_fail@plt+0x24ec>
   13a9c:	bl	16510 <__assert_fail@plt+0x4964>
   13aa0:	ldr	r3, [r0]
   13aa4:	cmp	r3, #1
   13aa8:	beq	13b60 <__assert_fail@plt+0x1fb4>
   13aac:	str	r4, [sp, #24]
   13ab0:	cmp	r3, #3
   13ab4:	cmpne	r3, #15
   13ab8:	bne	13fdc <__assert_fail@plt+0x2430>
   13abc:	cmp	r3, #3
   13ac0:	bne	14048 <__assert_fail@plt+0x249c>
   13ac4:	ldr	r4, [r8, #40]	; 0x28
   13ac8:	ldr	r0, [sl, #44]	; 0x2c
   13acc:	add	r1, r4, #1
   13ad0:	ldr	r2, [sl, #48]	; 0x30
   13ad4:	add	r3, r0, r1
   13ad8:	cmp	r2, r3
   13adc:	bcc	1499c <__assert_fail@plt+0x2df0>
   13ae0:	mov	r2, r4
   13ae4:	ldr	r1, [r8, #36]	; 0x24
   13ae8:	bl	11864 <memcpy@plt>
   13aec:	ldr	r2, [sl, #44]	; 0x2c
   13af0:	mov	r1, #0
   13af4:	add	r3, r2, r4
   13af8:	add	r3, r3, #1
   13afc:	str	r3, [sl, #44]	; 0x2c
   13b00:	strb	r1, [r2, r4]
   13b04:	ldr	r3, [sl, #44]	; 0x2c
   13b08:	ldr	fp, [sl, #40]	; 0x28
   13b0c:	cmp	fp, r3
   13b10:	beq	14088 <__assert_fail@plt+0x24dc>
   13b14:	ldr	r2, [sl, #56]	; 0x38
   13b18:	ldr	r1, [sl, #48]	; 0x30
   13b1c:	add	r3, r3, r2
   13b20:	bic	r2, r3, r2
   13b24:	cmp	r2, r1
   13b28:	str	r2, [sl, #44]	; 0x2c
   13b2c:	mov	r3, #0
   13b30:	movhi	r2, r1
   13b34:	strhi	r1, [sl, #44]	; 0x2c
   13b38:	str	r2, [sl, #40]	; 0x28
   13b3c:	mov	r1, r3
   13b40:	mov	r2, r3
   13b44:	str	r7, [sp]
   13b48:	mov	r0, r8
   13b4c:	bl	16510 <__assert_fail@plt+0x4964>
   13b50:	ldr	r4, [r0]
   13b54:	mov	r5, r0
   13b58:	cmp	r4, #1
   13b5c:	bne	13ec4 <__assert_fail@plt+0x2318>
   13b60:	mov	r2, #5
   13b64:	ldr	r1, [pc, #3472]	; 148fc <__assert_fail@plt+0x2d50>
   13b68:	ldr	r0, [pc, #3608]	; 14988 <__assert_fail@plt+0x2ddc>
   13b6c:	bl	11828 <__dcgettext@plt>
   13b70:	mov	r1, #0
   13b74:	ldr	r3, [r8, #4]
   13b78:	mov	r2, r0
   13b7c:	mov	r0, r1
   13b80:	bl	188f0 <__assert_fail@plt+0x6d44>
   13b84:	mov	r0, r8
   13b88:	bl	16354 <__assert_fail@plt+0x47a8>
   13b8c:	ldr	r3, [pc, #3412]	; 148e8 <__assert_fail@plt+0x2d3c>
   13b90:	ldr	r2, [sp, #100]	; 0x64
   13b94:	mov	r0, sl
   13b98:	ldr	r3, [r3]
   13b9c:	cmp	r2, r3
   13ba0:	bne	15444 <__assert_fail@plt+0x3898>
   13ba4:	add	sp, sp, #108	; 0x6c
   13ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bac:	ldr	r2, [r0]
   13bb0:	cmp	r2, #16
   13bb4:	bne	13d20 <__assert_fail@plt+0x2174>
   13bb8:	cmp	fp, #32
   13bbc:	beq	15254 <__assert_fail@plt+0x36a8>
   13bc0:	ldr	r3, [r0, #4]
   13bc4:	cmp	r3, #0
   13bc8:	beq	15368 <__assert_fail@plt+0x37bc>
   13bcc:	ldr	r2, [sl, #12]
   13bd0:	cmp	r2, #0
   13bd4:	beq	151ec <__assert_fail@plt+0x3640>
   13bd8:	cmp	r2, r3
   13bdc:	bge	151ec <__assert_fail@plt+0x3640>
   13be0:	mov	r2, #5
   13be4:	ldr	r1, [pc, #3348]	; 14900 <__assert_fail@plt+0x2d54>
   13be8:	mov	r0, r4
   13bec:	bl	11828 <__dcgettext@plt>
   13bf0:	ldr	r3, [pc, #3448]	; 14970 <__assert_fail@plt+0x2dc4>
   13bf4:	ldr	r2, [pc, #3460]	; 14980 <__assert_fail@plt+0x2dd4>
   13bf8:	mov	r1, r0
   13bfc:	mov	r0, r8
   13c00:	bl	13848 <__assert_fail@plt+0x1c9c>
   13c04:	mov	r1, #0
   13c08:	mov	r0, r8
   13c0c:	bl	163f8 <__assert_fail@plt+0x484c>
   13c10:	mov	r3, #0
   13c14:	str	r7, [sp]
   13c18:	mov	r2, r3
   13c1c:	mov	r1, r3
   13c20:	mov	r0, r8
   13c24:	bl	16510 <__assert_fail@plt+0x4964>
   13c28:	ldr	fp, [r0]
   13c2c:	cmp	fp, #1
   13c30:	bne	139c4 <__assert_fail@plt+0x1e18>
   13c34:	b	13b60 <__assert_fail@plt+0x1fb4>
   13c38:	mov	r0, sl
   13c3c:	bl	11840 <free@plt>
   13c40:	mov	sl, #0
   13c44:	b	13b8c <__assert_fail@plt+0x1fe0>
   13c48:	ldr	r2, [r0]
   13c4c:	cmp	r2, #4
   13c50:	cmpne	r2, #18
   13c54:	bne	13d20 <__assert_fail@plt+0x2174>
   13c58:	ldr	r5, [r0, #8]
   13c5c:	ldr	r0, [sl, #44]	; 0x2c
   13c60:	add	r1, r5, #1
   13c64:	cmp	fp, #31
   13c68:	add	r2, r0, r1
   13c6c:	ldr	ip, [sl, #48]	; 0x30
   13c70:	beq	152c8 <__assert_fail@plt+0x371c>
   13c74:	cmp	ip, r2
   13c78:	bcc	15350 <__assert_fail@plt+0x37a4>
   13c7c:	ldr	r1, [r3, #4]
   13c80:	mov	r2, r5
   13c84:	bl	11864 <memcpy@plt>
   13c88:	ldr	r2, [sl, #44]	; 0x2c
   13c8c:	mov	r1, #0
   13c90:	add	r3, r2, r5
   13c94:	add	r3, r3, #1
   13c98:	str	r3, [sl, #44]	; 0x2c
   13c9c:	strb	r1, [r2, r5]
   13ca0:	ldrd	r2, [sl, #40]	; 0x28
   13ca4:	ldr	r0, [sl, #48]	; 0x30
   13ca8:	cmp	r2, r3
   13cac:	str	r2, [sl, #4]
   13cb0:	ldrbeq	r1, [sl, #72]	; 0x48
   13cb4:	orreq	r1, r1, #2
   13cb8:	strbeq	r1, [sl, #72]	; 0x48
   13cbc:	ldr	r1, [sl, #56]	; 0x38
   13cc0:	add	r3, r3, r1
   13cc4:	bic	r3, r3, r1
   13cc8:	cmp	r3, r0
   13ccc:	str	r3, [sl, #44]	; 0x2c
   13cd0:	movhi	r3, r0
   13cd4:	strhi	r0, [sl, #44]	; 0x2c
   13cd8:	str	r3, [sl, #40]	; 0x28
   13cdc:	mov	r1, #1
   13ce0:	b	13c08 <__assert_fail@plt+0x205c>
   13ce4:	ldr	r2, [r0]
   13ce8:	cmp	r2, #4
   13cec:	bne	13d20 <__assert_fail@plt+0x2174>
   13cf0:	ldr	r2, [r0, #8]
   13cf4:	cmp	r2, #1
   13cf8:	beq	1509c <__assert_fail@plt+0x34f0>
   13cfc:	mov	r2, #5
   13d00:	ldr	r1, [pc, #3068]	; 14904 <__assert_fail@plt+0x2d58>
   13d04:	mov	r0, r4
   13d08:	bl	11828 <__dcgettext@plt>
   13d0c:	cmp	fp, #20
   13d10:	moveq	r2, r6
   13d14:	movne	r2, r9
   13d18:	mov	r1, r0
   13d1c:	b	13d4c <__assert_fail@plt+0x21a0>
   13d20:	mov	r2, #5
   13d24:	ldr	r1, [pc, #3092]	; 14940 <__assert_fail@plt+0x2d94>
   13d28:	mov	r0, r4
   13d2c:	bl	11828 <__dcgettext@plt>
   13d30:	ldr	r1, [pc, #3024]	; 14908 <__assert_fail@plt+0x2d5c>
   13d34:	mov	r2, #5
   13d38:	mov	r5, r0
   13d3c:	mov	r0, r4
   13d40:	bl	11828 <__dcgettext@plt>
   13d44:	mov	r1, r5
   13d48:	mov	r2, r0
   13d4c:	mov	r0, r8
   13d50:	bl	13848 <__assert_fail@plt+0x1c9c>
   13d54:	b	13c04 <__assert_fail@plt+0x2058>
   13d58:	ldr	r3, [sl, #12]
   13d5c:	cmp	r3, #0
   13d60:	moveq	r2, #1
   13d64:	moveq	r3, r2
   13d68:	streq	r2, [sl, #12]
   13d6c:	ldr	r2, [sl, #8]
   13d70:	cmp	r2, #0
   13d74:	bne	149c4 <__assert_fail@plt+0x2e18>
   13d78:	str	r3, [sl, #8]
   13d7c:	mov	r1, #1
   13d80:	mov	r0, r8
   13d84:	bl	163f8 <__assert_fail@plt+0x484c>
   13d88:	mov	r3, #0
   13d8c:	str	r7, [sp]
   13d90:	mov	r2, r3
   13d94:	mov	r1, r3
   13d98:	mov	r0, r8
   13d9c:	bl	16510 <__assert_fail@plt+0x4964>
   13da0:	ldr	r4, [r0]
   13da4:	mov	r5, r0
   13da8:	cmp	r4, #1
   13dac:	beq	13b60 <__assert_fail@plt+0x1fb4>
   13db0:	ldr	r9, [pc, #3024]	; 14988 <__assert_fail@plt+0x2ddc>
   13db4:	mov	r3, #0
   13db8:	str	r3, [sp, #24]
   13dbc:	mov	r6, r3
   13dc0:	mov	r3, #1
   13dc4:	str	r3, [sp, #32]
   13dc8:	str	fp, [sp, #48]	; 0x30
   13dcc:	cmp	r4, #2
   13dd0:	beq	13f10 <__assert_fail@plt+0x2364>
   13dd4:	cmp	r4, #23
   13dd8:	beq	144d0 <__assert_fail@plt+0x2924>
   13ddc:	cmp	r4, #3
   13de0:	cmpne	r4, #15
   13de4:	bne	14460 <__assert_fail@plt+0x28b4>
   13de8:	cmp	r6, #0
   13dec:	beq	13e10 <__assert_fail@plt+0x2264>
   13df0:	ldr	r3, [sl, #36]	; 0x24
   13df4:	cmp	r3, r6
   13df8:	bcs	13f3c <__assert_fail@plt+0x2390>
   13dfc:	ldr	r3, [sl, #48]	; 0x30
   13e00:	cmp	r3, r6
   13e04:	strhi	r6, [sl, #40]	; 0x28
   13e08:	strhi	r6, [sl, #44]	; 0x2c
   13e0c:	bls	13f3c <__assert_fail@plt+0x2390>
   13e10:	cmp	r4, #3
   13e14:	bne	14480 <__assert_fail@plt+0x28d4>
   13e18:	ldr	r4, [r5, #8]
   13e1c:	ldr	r0, [sl, #44]	; 0x2c
   13e20:	add	r1, r4, #1
   13e24:	ldr	r2, [sl, #48]	; 0x30
   13e28:	add	r3, r0, r1
   13e2c:	cmp	r2, r3
   13e30:	bcc	14a7c <__assert_fail@plt+0x2ed0>
   13e34:	ldr	r1, [r5, #4]
   13e38:	mov	r2, r4
   13e3c:	bl	11864 <memcpy@plt>
   13e40:	ldr	r2, [sl, #44]	; 0x2c
   13e44:	mov	r1, #0
   13e48:	add	r3, r2, r4
   13e4c:	add	r3, r3, #1
   13e50:	str	r3, [sl, #44]	; 0x2c
   13e54:	strb	r1, [r2, r4]
   13e58:	ldr	r3, [sl, #44]	; 0x2c
   13e5c:	ldr	r6, [sl, #40]	; 0x28
   13e60:	cmp	r6, r3
   13e64:	beq	144c0 <__assert_fail@plt+0x2914>
   13e68:	ldr	r2, [sl, #56]	; 0x38
   13e6c:	ldr	r1, [sl, #48]	; 0x30
   13e70:	add	r3, r3, r2
   13e74:	bic	r2, r3, r2
   13e78:	cmp	r2, r1
   13e7c:	str	r2, [sl, #44]	; 0x2c
   13e80:	mov	r3, #0
   13e84:	movhi	r2, r1
   13e88:	strhi	r1, [sl, #44]	; 0x2c
   13e8c:	str	r2, [sl, #40]	; 0x28
   13e90:	mov	r1, r3
   13e94:	mov	r2, r3
   13e98:	str	r7, [sp]
   13e9c:	mov	r0, r8
   13ea0:	bl	16510 <__assert_fail@plt+0x4964>
   13ea4:	ldr	r4, [r0]
   13ea8:	mov	r5, r0
   13eac:	cmp	r4, #1
   13eb0:	beq	13b60 <__assert_fail@plt+0x1fb4>
   13eb4:	sub	r3, r4, #5
   13eb8:	cmp	r3, #4
   13ebc:	movhi	fp, #0
   13ec0:	bls	13a78 <__assert_fail@plt+0x1ecc>
   13ec4:	cmp	r4, #14
   13ec8:	beq	13f4c <__assert_fail@plt+0x23a0>
   13ecc:	mov	r2, #5
   13ed0:	ldr	r1, [pc, #2680]	; 14950 <__assert_fail@plt+0x2da4>
   13ed4:	mov	r0, r9
   13ed8:	bl	11828 <__dcgettext@plt>
   13edc:	ldr	r1, [pc, #2600]	; 1490c <__assert_fail@plt+0x2d60>
   13ee0:	mov	r2, #5
   13ee4:	mov	r4, r0
   13ee8:	mov	r0, r9
   13eec:	bl	11828 <__dcgettext@plt>
   13ef0:	mov	r1, r4
   13ef4:	ldr	r2, [pc, #2580]	; 14910 <__assert_fail@plt+0x2d64>
   13ef8:	mov	r3, r0
   13efc:	mov	r0, r8
   13f00:	bl	13848 <__assert_fail@plt+0x1c9c>
   13f04:	mov	r1, #0
   13f08:	mov	r0, r8
   13f0c:	bl	163f8 <__assert_fail@plt+0x484c>
   13f10:	mov	r3, #0
   13f14:	str	r7, [sp]
   13f18:	mov	r2, r3
   13f1c:	mov	r1, r3
   13f20:	mov	r0, r8
   13f24:	bl	16510 <__assert_fail@plt+0x4964>
   13f28:	ldr	r4, [r0]
   13f2c:	mov	r5, r0
   13f30:	cmp	r4, #1
   13f34:	bne	13dcc <__assert_fail@plt+0x2220>
   13f38:	b	13b60 <__assert_fail@plt+0x1fb4>
   13f3c:	mov	r1, r6
   13f40:	ldr	r0, [sp, #12]
   13f44:	bl	118b8 <obstack_free@plt>
   13f48:	b	13e10 <__assert_fail@plt+0x2264>
   13f4c:	ldr	r3, [r5, #20]
   13f50:	mov	r2, r3
   13f54:	str	r3, [sp, #28]
   13f58:	ldr	r3, [sl, #8]
   13f5c:	cmp	r2, r3
   13f60:	blt	14454 <__assert_fail@plt+0x28a8>
   13f64:	ldr	r3, [sl, #12]
   13f68:	ldr	r2, [sp, #28]
   13f6c:	cmp	r2, r3
   13f70:	ble	140b8 <__assert_fail@plt+0x250c>
   13f74:	ldr	r1, [pc, #2456]	; 14914 <__assert_fail@plt+0x2d68>
   13f78:	mov	r2, #5
   13f7c:	mov	r0, r9
   13f80:	bl	11828 <__dcgettext@plt>
   13f84:	mov	r1, r0
   13f88:	mov	r0, r8
   13f8c:	bl	13848 <__assert_fail@plt+0x1c9c>
   13f90:	mov	r1, #0
   13f94:	mov	r0, r8
   13f98:	bl	163f8 <__assert_fail@plt+0x484c>
   13f9c:	mov	r3, #0
   13fa0:	str	r7, [sp]
   13fa4:	mov	r2, r3
   13fa8:	mov	r1, r3
   13fac:	mov	r0, r8
   13fb0:	bl	16510 <__assert_fail@plt+0x4964>
   13fb4:	ldr	r4, [r0]
   13fb8:	mov	r5, r0
   13fbc:	cmp	r4, #1
   13fc0:	beq	13b60 <__assert_fail@plt+0x1fb4>
   13fc4:	mov	r3, #0
   13fc8:	str	r3, [sp, #24]
   13fcc:	mov	r6, r3
   13fd0:	mov	r3, #1
   13fd4:	str	r3, [sp, #32]
   13fd8:	b	13dcc <__assert_fail@plt+0x2220>
   13fdc:	mov	r2, #5
   13fe0:	ldr	r1, [pc, #2408]	; 14950 <__assert_fail@plt+0x2da4>
   13fe4:	mov	r0, r9
   13fe8:	bl	11828 <__dcgettext@plt>
   13fec:	mov	r2, #5
   13ff0:	ldr	r1, [pc, #2388]	; 1494c <__assert_fail@plt+0x2da0>
   13ff4:	mov	r4, r0
   13ff8:	mov	r0, r9
   13ffc:	bl	11828 <__dcgettext@plt>
   14000:	ldr	r2, [pc, #2312]	; 14910 <__assert_fail@plt+0x2d64>
   14004:	mov	r1, r4
   14008:	mov	r3, r0
   1400c:	mov	r0, r8
   14010:	bl	13848 <__assert_fail@plt+0x1c9c>
   14014:	mov	r1, #0
   14018:	mov	r0, r8
   1401c:	bl	163f8 <__assert_fail@plt+0x484c>
   14020:	mov	r3, #0
   14024:	mov	r2, r3
   14028:	mov	r1, r3
   1402c:	str	r7, [sp]
   14030:	mov	r0, r8
   14034:	bl	16510 <__assert_fail@plt+0x4964>
   14038:	ldr	r3, [r0]
   1403c:	cmp	r3, #1
   14040:	bne	13ab0 <__assert_fail@plt+0x1f04>
   14044:	b	13b60 <__assert_fail@plt+0x1fb4>
   14048:	ldr	r2, [r8, #36]	; 0x24
   1404c:	ldr	r1, [pc, #2308]	; 14958 <__assert_fail@plt+0x2dac>
   14050:	ldr	r0, [sp, #12]
   14054:	bl	11a80 <obstack_printf@plt>
   14058:	ldr	r3, [sl, #44]	; 0x2c
   1405c:	ldr	r1, [sl, #48]	; 0x30
   14060:	add	r2, r3, #1
   14064:	cmp	r2, r1
   14068:	bhi	149ac <__assert_fail@plt+0x2e00>
   1406c:	mov	r1, #0
   14070:	str	r2, [sl, #44]	; 0x2c
   14074:	strb	r1, [r3]
   14078:	ldr	fp, [sl, #40]	; 0x28
   1407c:	ldr	r3, [sl, #44]	; 0x2c
   14080:	cmp	fp, r3
   14084:	bne	13b14 <__assert_fail@plt+0x1f68>
   14088:	ldrb	r2, [sl, #72]	; 0x48
   1408c:	orr	r2, r2, #2
   14090:	strb	r2, [sl, #72]	; 0x48
   14094:	b	13b14 <__assert_fail@plt+0x1f68>
   14098:	bl	16510 <__assert_fail@plt+0x4964>
   1409c:	ldr	r3, [r0]
   140a0:	cmp	r3, #1
   140a4:	beq	13b60 <__assert_fail@plt+0x1fb4>
   140a8:	mov	r2, #2
   140ac:	str	r4, [sp, #24]
   140b0:	str	r2, [sp, #32]
   140b4:	b	13ab0 <__assert_fail@plt+0x1f04>
   140b8:	mov	r0, r6
   140bc:	bl	11a08 <strlen@plt>
   140c0:	add	r3, r5, #4
   140c4:	cmp	fp, #0
   140c8:	str	r3, [sp, #44]	; 0x2c
   140cc:	str	r0, [sp, #36]	; 0x24
   140d0:	beq	15120 <__assert_fail@plt+0x3574>
   140d4:	mov	r0, fp
   140d8:	bl	11a08 <strlen@plt>
   140dc:	ldr	r3, [sp, #36]	; 0x24
   140e0:	cmp	r3, r0
   140e4:	bne	148dc <__assert_fail@plt+0x2d30>
   140e8:	ldr	r3, [sp, #36]	; 0x24
   140ec:	sub	r3, r3, #1
   140f0:	add	r4, r6, r3
   140f4:	str	r4, [sp, #40]	; 0x28
   140f8:	bl	119d8 <__ctype_b_loc@plt>
   140fc:	ldr	r2, [sp, #24]
   14100:	cmp	r2, #5
   14104:	streq	r5, [sp, #52]	; 0x34
   14108:	ldr	r1, [r0]
   1410c:	moveq	r5, r0
   14110:	beq	14428 <__assert_fail@plt+0x287c>
   14114:	ldr	r4, [sp, #40]	; 0x28
   14118:	b	14120 <__assert_fail@plt+0x2574>
   1411c:	sub	r4, r4, #1
   14120:	ldrb	r3, [r4]
   14124:	cmp	r4, r6
   14128:	movcc	r2, #0
   1412c:	movcs	r2, #1
   14130:	lsl	r3, r3, #1
   14134:	ldrh	r3, [r1, r3]
   14138:	ands	r3, r2, r3, lsr #11
   1413c:	bne	1411c <__assert_fail@plt+0x2570>
   14140:	ldr	r3, [sp, #40]	; 0x28
   14144:	cmp	r3, r4
   14148:	sub	r4, r4, r6
   1414c:	add	r3, r4, #1
   14150:	str	r3, [sp, #40]	; 0x28
   14154:	beq	148dc <__assert_fail@plt+0x2d30>
   14158:	mov	r2, r3
   1415c:	mov	r1, fp
   14160:	mov	r0, r6
   14164:	bl	11b64 <strncmp@plt>
   14168:	subs	r3, r0, #0
   1416c:	str	r3, [sp, #52]	; 0x34
   14170:	bne	148dc <__assert_fail@plt+0x2d30>
   14174:	bl	11a38 <__errno_location@plt>
   14178:	ldr	r1, [sp, #24]
   1417c:	ldr	r3, [sp, #52]	; 0x34
   14180:	cmp	r1, #5
   14184:	movne	r4, #10
   14188:	moveq	r4, #16
   1418c:	mov	r2, r4
   14190:	add	r1, sp, #88	; 0x58
   14194:	str	r3, [r0]
   14198:	ldr	r3, [sp, #40]	; 0x28
   1419c:	str	r0, [sp, #68]	; 0x44
   141a0:	add	r0, r6, r3
   141a4:	bl	119fc <strtoul@plt>
   141a8:	ldr	r3, [sp, #88]	; 0x58
   141ac:	ldrb	r3, [r3]
   141b0:	cmp	r3, #0
   141b4:	str	r0, [sp, #56]	; 0x38
   141b8:	bne	15074 <__assert_fail@plt+0x34c8>
   141bc:	ldr	r3, [sp, #56]	; 0x38
   141c0:	cmn	r3, #1
   141c4:	bne	141d8 <__assert_fail@plt+0x262c>
   141c8:	ldr	r3, [sp, #68]	; 0x44
   141cc:	ldr	r3, [r3]
   141d0:	cmp	r3, #34	; 0x22
   141d4:	beq	15074 <__assert_fail@plt+0x34c8>
   141d8:	ldr	r3, [sp, #40]	; 0x28
   141dc:	mov	r2, r4
   141e0:	add	r1, sp, #92	; 0x5c
   141e4:	add	r0, fp, r3
   141e8:	bl	119fc <strtoul@plt>
   141ec:	cmn	r0, #1
   141f0:	str	r0, [sp, #52]	; 0x34
   141f4:	beq	15054 <__assert_fail@plt+0x34a8>
   141f8:	ldr	r3, [sp, #92]	; 0x5c
   141fc:	ldrb	r3, [r3]
   14200:	cmp	r3, #0
   14204:	bne	15074 <__assert_fail@plt+0x34c8>
   14208:	ldrd	r2, [sp, #52]	; 0x34
   1420c:	cmp	r3, r2
   14210:	bhi	153f4 <__assert_fail@plt+0x3848>
   14214:	ldr	lr, [sp, #36]	; 0x24
   14218:	mvn	r4, #4
   1421c:	sub	r3, lr, #5
   14220:	ldr	fp, [sp, #24]
   14224:	and	r3, r3, r4
   14228:	ldr	r1, [pc, #1768]	; 14918 <__assert_fail@plt+0x2d6c>
   1422c:	str	r3, [sp, #72]	; 0x48
   14230:	sub	r3, r4, r5
   14234:	ldr	ip, [sp, #28]
   14238:	cmp	fp, #5
   1423c:	str	r3, [sp, #80]	; 0x50
   14240:	ldr	r3, [sp, #40]	; 0x28
   14244:	ldr	r0, [pc, #1744]	; 1491c <__assert_fail@plt+0x2d70>
   14248:	moveq	r0, r1
   1424c:	ldr	r1, [sp, #44]	; 0x2c
   14250:	sub	r3, lr, r3
   14254:	sub	r2, ip, #1
   14258:	add	r2, r1, r2
   1425c:	str	r3, [sp, #60]	; 0x3c
   14260:	add	r3, ip, #12
   14264:	str	r6, [sp, #64]	; 0x40
   14268:	str	r5, [sp, #84]	; 0x54
   1426c:	ldr	r6, [sp, #56]	; 0x38
   14270:	str	r0, [sp, #24]
   14274:	str	r8, [sp, #56]	; 0x38
   14278:	str	r2, [sp, #28]
   1427c:	mov	r5, ip
   14280:	mov	r8, r3
   14284:	str	r7, [sp, #76]	; 0x4c
   14288:	b	143b8 <__assert_fail@plt+0x280c>
   1428c:	mov	r1, #0
   14290:	str	r2, [sl, #44]	; 0x2c
   14294:	strb	r1, [r3]
   14298:	ldr	r2, [sl, #44]	; 0x2c
   1429c:	ldr	fp, [sl, #40]	; 0x28
   142a0:	ldr	r0, [sl, #56]	; 0x38
   142a4:	cmp	fp, r2
   142a8:	mvn	ip, r0
   142ac:	ldrbeq	r1, [sl, #72]	; 0x48
   142b0:	add	r2, r2, r0
   142b4:	and	r2, r2, ip
   142b8:	orreq	r1, r1, #2
   142bc:	strbeq	r1, [sl, #72]	; 0x48
   142c0:	ldr	r1, [sl, #48]	; 0x30
   142c4:	str	r2, [sl, #44]	; 0x2c
   142c8:	cmp	r2, r1
   142cc:	subls	lr, r1, r2
   142d0:	movhi	lr, #0
   142d4:	movhi	r2, r1
   142d8:	strhi	r1, [sl, #44]	; 0x2c
   142dc:	cmp	r8, lr
   142e0:	str	r2, [sl, #40]	; 0x28
   142e4:	movle	r4, r2
   142e8:	bgt	15030 <__assert_fail@plt+0x3484>
   142ec:	add	r2, r2, r8
   142f0:	cmp	r2, r4
   142f4:	str	r2, [sl, #44]	; 0x2c
   142f8:	ldrbeq	lr, [sl, #72]	; 0x48
   142fc:	add	r2, r2, r0
   14300:	and	ip, ip, r2
   14304:	orreq	lr, lr, #2
   14308:	strbeq	lr, [sl, #72]	; 0x48
   1430c:	cmp	ip, r1
   14310:	movls	r1, ip
   14314:	add	r7, r4, #12
   14318:	strhi	r1, [sl, #44]	; 0x2c
   1431c:	strls	ip, [sl, #44]	; 0x2c
   14320:	str	r1, [sl, #40]	; 0x28
   14324:	mov	r2, r5
   14328:	mov	r0, r7
   1432c:	str	r5, [r4, #8]
   14330:	ldr	r1, [sp, #44]	; 0x2c
   14334:	bl	11864 <memcpy@plt>
   14338:	mvn	r2, #1
   1433c:	str	fp, [r4]
   14340:	str	r2, [r4, #4]
   14344:	ldrb	r2, [fp]
   14348:	cmp	r2, #80	; 0x50
   1434c:	cmpne	r2, #85	; 0x55
   14350:	bne	14360 <__assert_fail@plt+0x27b4>
   14354:	ldr	r3, [sp, #72]	; 0x48
   14358:	cmp	r3, #0
   1435c:	beq	15288 <__assert_fail@plt+0x36dc>
   14360:	mov	r1, fp
   14364:	mov	r3, r4
   14368:	ldr	r2, [sp, #36]	; 0x24
   1436c:	ldr	r0, [sp, #16]
   14370:	bl	1827c <__assert_fail@plt+0x66d0>
   14374:	mov	r3, r4
   14378:	mov	r2, r5
   1437c:	mov	r1, r7
   14380:	ldr	r0, [sp, #20]
   14384:	bl	1827c <__assert_fail@plt+0x66d0>
   14388:	ldr	r2, [sp, #28]
   1438c:	ldrb	r3, [r2]
   14390:	add	r3, r3, #1
   14394:	uxtb	r3, r3
   14398:	cmp	r3, #0
   1439c:	strb	r3, [r2]
   143a0:	beq	150b4 <__assert_fail@plt+0x3508>
   143a4:	ldr	r3, [sp, #32]
   143a8:	add	r6, r6, r3
   143ac:	ldr	r3, [sp, #52]	; 0x34
   143b0:	cmp	r3, r6
   143b4:	bcc	153ac <__assert_fail@plt+0x3800>
   143b8:	ldr	r3, [sp, #60]	; 0x3c
   143bc:	ldr	r2, [sp, #40]	; 0x28
   143c0:	str	r3, [sp]
   143c4:	ldr	r1, [sp, #24]
   143c8:	ldr	r3, [sp, #64]	; 0x40
   143cc:	str	r6, [sp, #4]
   143d0:	ldr	r0, [sp, #12]
   143d4:	bl	11a80 <obstack_printf@plt>
   143d8:	ldr	r3, [sl, #44]	; 0x2c
   143dc:	ldr	r1, [sl, #48]	; 0x30
   143e0:	add	r2, r3, #1
   143e4:	cmp	r2, r1
   143e8:	bls	1428c <__assert_fail@plt+0x26e0>
   143ec:	mov	r1, #1
   143f0:	ldr	r0, [sp, #12]
   143f4:	bl	11888 <_obstack_newchunk@plt>
   143f8:	ldr	r3, [sl, #44]	; 0x2c
   143fc:	add	r2, r3, #1
   14400:	b	1428c <__assert_fail@plt+0x26e0>
   14404:	mov	r2, #5
   14408:	ldr	r1, [pc, #1296]	; 14920 <__assert_fail@plt+0x2d74>
   1440c:	mov	r0, r9
   14410:	bl	11828 <__dcgettext@plt>
   14414:	mov	r1, r0
   14418:	mov	r0, r8
   1441c:	bl	13848 <__assert_fail@plt+0x1c9c>
   14420:	ldr	r1, [r5]
   14424:	sub	r4, r4, #1
   14428:	ldrb	r2, [r4]
   1442c:	cmp	r4, r6
   14430:	movcc	r0, #0
   14434:	movcs	r0, #1
   14438:	lsl	r2, r2, #1
   1443c:	ldrh	r2, [r1, r2]
   14440:	ands	r3, r0, r2, lsr #12
   14444:	beq	14a74 <__assert_fail@plt+0x2ec8>
   14448:	tst	r2, #2304	; 0x900
   1444c:	bne	14424 <__assert_fail@plt+0x2878>
   14450:	b	14404 <__assert_fail@plt+0x2858>
   14454:	mov	r2, #5
   14458:	ldr	r1, [pc, #1220]	; 14924 <__assert_fail@plt+0x2d78>
   1445c:	b	13f7c <__assert_fail@plt+0x23d0>
   14460:	mov	r2, #5
   14464:	ldr	r1, [pc, #1252]	; 14950 <__assert_fail@plt+0x2da4>
   14468:	mov	r0, r9
   1446c:	bl	11828 <__dcgettext@plt>
   14470:	mov	r2, #5
   14474:	ldr	r1, [pc, #1240]	; 14954 <__assert_fail@plt+0x2da8>
   14478:	mov	r4, r0
   1447c:	b	13ee8 <__assert_fail@plt+0x233c>
   14480:	ldr	r2, [r8, #36]	; 0x24
   14484:	ldr	r1, [pc, #1228]	; 14958 <__assert_fail@plt+0x2dac>
   14488:	ldr	r0, [sp, #12]
   1448c:	bl	11a80 <obstack_printf@plt>
   14490:	ldr	r3, [sl, #44]	; 0x2c
   14494:	ldr	r1, [sl, #48]	; 0x30
   14498:	add	r2, r3, #1
   1449c:	cmp	r2, r1
   144a0:	bhi	15000 <__assert_fail@plt+0x3454>
   144a4:	mov	r1, #0
   144a8:	str	r2, [sl, #44]	; 0x2c
   144ac:	strb	r1, [r3]
   144b0:	ldr	r6, [sl, #40]	; 0x28
   144b4:	ldr	r3, [sl, #44]	; 0x2c
   144b8:	cmp	r6, r3
   144bc:	bne	13e68 <__assert_fail@plt+0x22bc>
   144c0:	ldrb	r2, [sl, #72]	; 0x48
   144c4:	orr	r2, r2, #2
   144c8:	strb	r2, [sl, #72]	; 0x48
   144cc:	b	13e68 <__assert_fail@plt+0x22bc>
   144d0:	mov	r3, #0
   144d4:	str	r7, [sp]
   144d8:	mov	r2, r3
   144dc:	mov	r1, r3
   144e0:	mov	r0, r8
   144e4:	ldr	fp, [sp, #48]	; 0x30
   144e8:	bl	16510 <__assert_fail@plt+0x4964>
   144ec:	ldr	r5, [r0]
   144f0:	cmp	r5, #1
   144f4:	beq	13b60 <__assert_fail@plt+0x1fb4>
   144f8:	mov	r3, r7
   144fc:	ldr	r4, [pc, #1036]	; 14910 <__assert_fail@plt+0x2d64>
   14500:	ldr	r9, [pc, #1152]	; 14988 <__assert_fail@plt+0x2ddc>
   14504:	mov	r7, r6
   14508:	mov	r6, r3
   1450c:	cmp	r5, fp
   14510:	beq	14534 <__assert_fail@plt+0x2988>
   14514:	mov	r2, #5
   14518:	ldr	r1, [pc, #1032]	; 14928 <__assert_fail@plt+0x2d7c>
   1451c:	mov	r0, r9
   14520:	bl	11828 <__dcgettext@plt>
   14524:	mov	r2, r4
   14528:	mov	r1, r0
   1452c:	mov	r0, r8
   14530:	bl	13848 <__assert_fail@plt+0x1c9c>
   14534:	cmp	r5, fp
   14538:	movne	r1, #0
   1453c:	moveq	r1, #1
   14540:	mov	r0, r8
   14544:	bl	163f8 <__assert_fail@plt+0x484c>
   14548:	mov	r3, #0
   1454c:	str	r6, [sp]
   14550:	mov	r2, r3
   14554:	mov	r1, r3
   14558:	mov	r0, r8
   1455c:	bl	16510 <__assert_fail@plt+0x4964>
   14560:	ldr	fp, [r0]
   14564:	cmp	fp, #1
   14568:	beq	13b84 <__assert_fail@plt+0x1fd8>
   1456c:	cmp	fp, #2
   14570:	beq	14548 <__assert_fail@plt+0x299c>
   14574:	cmp	fp, #37	; 0x25
   14578:	beq	1487c <__assert_fail@plt+0x2cd0>
   1457c:	cmp	fp, #35	; 0x23
   14580:	beq	14a8c <__assert_fail@plt+0x2ee0>
   14584:	cmp	fp, #36	; 0x24
   14588:	beq	145b8 <__assert_fail@plt+0x2a0c>
   1458c:	mov	r2, #5
   14590:	ldr	r1, [pc, #916]	; 1492c <__assert_fail@plt+0x2d80>
   14594:	mov	r0, r9
   14598:	bl	11828 <__dcgettext@plt>
   1459c:	mov	r1, r0
   145a0:	mov	r0, r8
   145a4:	bl	13848 <__assert_fail@plt+0x1c9c>
   145a8:	mov	r1, #0
   145ac:	mov	r0, r8
   145b0:	bl	163f8 <__assert_fail@plt+0x484c>
   145b4:	b	14548 <__assert_fail@plt+0x299c>
   145b8:	mov	r1, #1
   145bc:	mov	r0, r8
   145c0:	bl	163f8 <__assert_fail@plt+0x484c>
   145c4:	mov	r3, #0
   145c8:	mov	r2, r3
   145cc:	mov	r1, r3
   145d0:	str	r6, [sp]
   145d4:	mov	r0, r8
   145d8:	bl	16510 <__assert_fail@plt+0x4964>
   145dc:	ldr	r4, [r0]
   145e0:	mov	r3, r0
   145e4:	cmp	r4, #1
   145e8:	beq	13b60 <__assert_fail@plt+0x1fb4>
   145ec:	mov	r5, #0
   145f0:	cmp	r4, #2
   145f4:	beq	14820 <__assert_fail@plt+0x2c74>
   145f8:	cmp	r4, #23
   145fc:	beq	14850 <__assert_fail@plt+0x2ca4>
   14600:	cmp	r4, #3
   14604:	cmpne	r4, #15
   14608:	bne	147dc <__assert_fail@plt+0x2c30>
   1460c:	cmp	r7, #0
   14610:	beq	15400 <__assert_fail@plt+0x3854>
   14614:	ldr	r2, [sl, #36]	; 0x24
   14618:	cmp	r2, r7
   1461c:	bcs	14a18 <__assert_fail@plt+0x2e6c>
   14620:	ldr	r2, [sl, #48]	; 0x30
   14624:	cmp	r2, r7
   14628:	bls	14a18 <__assert_fail@plt+0x2e6c>
   1462c:	str	r7, [sl, #40]	; 0x28
   14630:	str	r7, [sl, #44]	; 0x2c
   14634:	mov	r7, r3
   14638:	b	14718 <__assert_fail@plt+0x2b6c>
   1463c:	ldr	r4, [r7, #8]
   14640:	ldr	r0, [sl, #44]	; 0x2c
   14644:	add	r1, r4, #1
   14648:	ldr	r2, [sl, #48]	; 0x30
   1464c:	add	r3, r0, r1
   14650:	cmp	r2, r3
   14654:	bcc	14a64 <__assert_fail@plt+0x2eb8>
   14658:	ldr	r1, [r7, #4]
   1465c:	mov	r2, r4
   14660:	bl	11864 <memcpy@plt>
   14664:	ldr	r2, [sl, #44]	; 0x2c
   14668:	mov	r0, r8
   1466c:	add	r3, r2, r4
   14670:	add	r3, r3, #1
   14674:	str	r3, [sl, #44]	; 0x2c
   14678:	strb	r5, [r2, r4]
   1467c:	ldrd	r2, [sl, #40]	; 0x28
   14680:	ldr	r1, [sl, #48]	; 0x30
   14684:	cmp	r2, r3
   14688:	ldrbeq	r2, [sl, #72]	; 0x48
   1468c:	orreq	r2, r2, #2
   14690:	strbeq	r2, [sl, #72]	; 0x48
   14694:	ldr	r2, [sl, #56]	; 0x38
   14698:	add	r3, r3, r2
   1469c:	bic	r2, r3, r2
   146a0:	cmp	r2, r1
   146a4:	str	r2, [sl, #44]	; 0x2c
   146a8:	mov	r3, #0
   146ac:	movhi	r2, r1
   146b0:	strhi	r1, [sl, #44]	; 0x2c
   146b4:	str	r2, [sl, #40]	; 0x28
   146b8:	mov	r1, r3
   146bc:	mov	r2, r3
   146c0:	str	r6, [sp]
   146c4:	bl	16510 <__assert_fail@plt+0x4964>
   146c8:	ldr	r3, [r0]
   146cc:	cmp	r3, #1
   146d0:	beq	13b60 <__assert_fail@plt+0x1fb4>
   146d4:	mov	r3, #0
   146d8:	str	r6, [sp]
   146dc:	mov	r2, r3
   146e0:	mov	r1, r3
   146e4:	mov	r0, r8
   146e8:	bl	16510 <__assert_fail@plt+0x4964>
   146ec:	ldr	r4, [r0]
   146f0:	mov	r7, r0
   146f4:	cmp	r4, #1
   146f8:	beq	13b60 <__assert_fail@plt+0x1fb4>
   146fc:	cmp	r4, #2
   14700:	beq	14a34 <__assert_fail@plt+0x2e88>
   14704:	cmp	r4, #23
   14708:	beq	1484c <__assert_fail@plt+0x2ca0>
   1470c:	cmp	r4, #3
   14710:	cmpne	r4, #15
   14714:	bne	147d8 <__assert_fail@plt+0x2c2c>
   14718:	cmp	r4, #3
   1471c:	beq	1463c <__assert_fail@plt+0x2a90>
   14720:	ldr	r2, [r8, #36]	; 0x24
   14724:	ldr	r1, [pc, #556]	; 14958 <__assert_fail@plt+0x2dac>
   14728:	ldr	r0, [sp, #12]
   1472c:	bl	11a80 <obstack_printf@plt>
   14730:	ldr	r3, [sl, #44]	; 0x2c
   14734:	ldr	r1, [sl, #48]	; 0x30
   14738:	add	r2, r3, #1
   1473c:	cmp	r2, r1
   14740:	bhi	15018 <__assert_fail@plt+0x346c>
   14744:	str	r2, [sl, #44]	; 0x2c
   14748:	strb	r5, [r3]
   1474c:	ldrd	r2, [sl, #40]	; 0x28
   14750:	ldr	r1, [sl, #48]	; 0x30
   14754:	mov	r0, r8
   14758:	cmp	r2, r3
   1475c:	ldrbeq	r2, [sl, #72]	; 0x48
   14760:	orreq	r2, r2, #2
   14764:	strbeq	r2, [sl, #72]	; 0x48
   14768:	ldr	r2, [sl, #56]	; 0x38
   1476c:	add	r3, r3, r2
   14770:	bic	r2, r3, r2
   14774:	cmp	r2, r1
   14778:	str	r2, [sl, #44]	; 0x2c
   1477c:	mov	r3, #0
   14780:	movhi	r2, r1
   14784:	strhi	r1, [sl, #44]	; 0x2c
   14788:	str	r2, [sl, #40]	; 0x28
   1478c:	mov	r1, r3
   14790:	mov	r2, r3
   14794:	str	r6, [sp]
   14798:	bl	16510 <__assert_fail@plt+0x4964>
   1479c:	ldr	r3, [r0]
   147a0:	cmp	r3, #1
   147a4:	beq	13b60 <__assert_fail@plt+0x1fb4>
   147a8:	mov	r3, #0
   147ac:	mov	r2, r3
   147b0:	mov	r1, r3
   147b4:	str	r6, [sp]
   147b8:	mov	r0, r8
   147bc:	bl	16510 <__assert_fail@plt+0x4964>
   147c0:	ldr	r4, [r0]
   147c4:	mov	r3, r0
   147c8:	cmp	r4, #1
   147cc:	beq	13b60 <__assert_fail@plt+0x1fb4>
   147d0:	mov	r7, #0
   147d4:	b	145f0 <__assert_fail@plt+0x2a44>
   147d8:	mov	r7, #0
   147dc:	mov	r2, #5
   147e0:	ldr	r1, [pc, #360]	; 14950 <__assert_fail@plt+0x2da4>
   147e4:	mov	r0, r9
   147e8:	bl	11828 <__dcgettext@plt>
   147ec:	mov	r2, #5
   147f0:	ldr	r1, [pc, #348]	; 14954 <__assert_fail@plt+0x2da8>
   147f4:	mov	r4, r0
   147f8:	mov	r0, r9
   147fc:	bl	11828 <__dcgettext@plt>
   14800:	mov	r1, r4
   14804:	ldr	r2, [pc, #292]	; 14930 <__assert_fail@plt+0x2d84>
   14808:	mov	r3, r0
   1480c:	mov	r0, r8
   14810:	bl	13848 <__assert_fail@plt+0x1c9c>
   14814:	mov	r1, #0
   14818:	mov	r0, r8
   1481c:	bl	163f8 <__assert_fail@plt+0x484c>
   14820:	mov	r3, #0
   14824:	mov	r2, r3
   14828:	mov	r1, r3
   1482c:	str	r6, [sp]
   14830:	mov	r0, r8
   14834:	bl	16510 <__assert_fail@plt+0x4964>
   14838:	ldr	r4, [r0]
   1483c:	mov	r3, r0
   14840:	cmp	r4, #1
   14844:	bne	145f0 <__assert_fail@plt+0x2a44>
   14848:	b	13b60 <__assert_fail@plt+0x1fb4>
   1484c:	mov	r7, #0
   14850:	mov	r3, #0
   14854:	str	r6, [sp]
   14858:	mov	r2, r3
   1485c:	mov	r1, r3
   14860:	mov	r0, r8
   14864:	bl	16510 <__assert_fail@plt+0x4964>
   14868:	ldr	r5, [r0]
   1486c:	cmp	r5, #1
   14870:	beq	13b60 <__assert_fail@plt+0x1fb4>
   14874:	ldr	r4, [pc, #180]	; 14930 <__assert_fail@plt+0x2d84>
   14878:	b	1450c <__assert_fail@plt+0x2960>
   1487c:	mov	r3, #0
   14880:	str	r6, [sp]
   14884:	mov	r2, r3
   14888:	mov	r1, r3
   1488c:	mov	r0, r8
   14890:	bl	16510 <__assert_fail@plt+0x4964>
   14894:	ldr	r4, [r0]
   14898:	cmp	r4, #1
   1489c:	beq	13b60 <__assert_fail@plt+0x1fb4>
   148a0:	cmp	r4, #16
   148a4:	beq	148d0 <__assert_fail@plt+0x2d24>
   148a8:	mov	r2, #5
   148ac:	ldr	r1, [pc, #148]	; 14948 <__assert_fail@plt+0x2d9c>
   148b0:	mov	r0, r9
   148b4:	bl	11828 <__dcgettext@plt>
   148b8:	ldr	r2, [pc, #116]	; 14934 <__assert_fail@plt+0x2d88>
   148bc:	mov	r1, r0
   148c0:	mov	r0, r8
   148c4:	bl	13848 <__assert_fail@plt+0x1c9c>
   148c8:	cmp	r4, #16
   148cc:	b	14538 <__assert_fail@plt+0x298c>
   148d0:	ldr	r3, [r0, #4]
   148d4:	str	r3, [sl, #28]
   148d8:	b	148c8 <__assert_fail@plt+0x2d1c>
   148dc:	mov	r2, #5
   148e0:	ldr	r1, [pc, #80]	; 14938 <__assert_fail@plt+0x2d8c>
   148e4:	b	13f7c <__assert_fail@plt+0x23d0>
   148e8:	strdeq	sl, [r2], -r8
   148ec:	andeq	r1, r1, r0, asr #16
   148f0:	andeq	r1, r1, r8, ror r9
   148f4:	andeq	r9, r1, r0, lsl #22
   148f8:	andeq	r9, r1, ip, lsl #22
   148fc:			; <UNDEFINED> instruction: 0x00019fbc
   14900:	strdeq	r9, [r1], -r4
   14904:	andeq	r9, r1, r4, lsr ip
   14908:	andeq	r9, r1, r0, lsr #23
   1490c:	andeq	r9, r1, r4, lsl sp
   14910:	andeq	r9, r1, r4, lsr fp
   14914:	andeq	r9, r1, r0, asr sp
   14918:	andeq	r9, r1, r4, asr #28
   1491c:	andeq	r9, r1, r8, lsr lr
   14920:	muleq	r1, ip, sp
   14924:	andeq	r9, r1, ip, lsr #26
   14928:	andeq	r9, r1, r8, lsr #29
   1492c:	ldrdeq	r9, [r1], -r8
   14930:	andeq	r9, r1, r4, lsr #22
   14934:	andeq	r9, r1, ip, lsr pc
   14938:	andeq	r9, r1, r8, ror sp
   1493c:	andeq	r9, r1, ip, lsr fp
   14940:	andeq	r9, r1, r0, ror fp
   14944:	andeq	r9, r1, ip, lsl #23
   14948:	andeq	r9, r1, ip, lsl pc
   1494c:	andeq	r9, r1, r0, lsl #29
   14950:	ldrdeq	r9, [r1], -r0
   14954:	strdeq	r9, [r1], -r4
   14958:	andeq	r9, r1, ip, lsl #26
   1495c:	andeq	r9, r1, ip, lsl fp
   14960:	andeq	r9, r1, ip, asr #30
   14964:	ldrdeq	r9, [r1], -r8
   14968:	andeq	r9, r1, r0, asr lr
   1496c:	andeq	r9, r1, r4, ror #30
   14970:	strdeq	r9, [r1], -r4
   14974:			; <UNDEFINED> instruction: 0x00019bb0
   14978:	andeq	r9, r1, r4, lsl #28
   1497c:	ldrdeq	r9, [r1], -r0
   14980:	andeq	r9, r1, r8, ror #21
   14984:	andeq	r9, r1, r0, ror #24
   14988:	andeq	sl, r2, r0, lsl #30
   1498c:	muleq	r1, r4, r0
   14990:	andeq	r0, r0, r2, ror #3
   14994:	muleq	r1, r8, ip
   14998:			; <UNDEFINED> instruction: 0x00019cb8
   1499c:	ldr	r0, [sp, #12]
   149a0:	bl	11888 <_obstack_newchunk@plt>
   149a4:	ldr	r0, [sl, #44]	; 0x2c
   149a8:	b	13ae0 <__assert_fail@plt+0x1f34>
   149ac:	mov	r1, #1
   149b0:	ldr	r0, [sp, #12]
   149b4:	bl	11888 <_obstack_newchunk@plt>
   149b8:	ldr	r3, [sl, #44]	; 0x2c
   149bc:	add	r2, r3, #1
   149c0:	b	1406c <__assert_fail@plt+0x24c0>
   149c4:	cmp	r2, r3
   149c8:	ble	13d7c <__assert_fail@plt+0x21d0>
   149cc:	mov	r2, #5
   149d0:	ldr	r1, [pc, #-156]	; 1493c <__assert_fail@plt+0x2d90>
   149d4:	ldr	r0, [pc, #-84]	; 14988 <__assert_fail@plt+0x2ddc>
   149d8:	bl	11828 <__dcgettext@plt>
   149dc:	mov	r1, #0
   149e0:	ldr	r3, [r8, #4]
   149e4:	mov	r2, r0
   149e8:	mov	r0, r1
   149ec:	bl	188f0 <__assert_fail@plt+0x6d44>
   149f0:	ldr	r3, [sl, #12]
   149f4:	b	13d78 <__assert_fail@plt+0x21cc>
   149f8:	mov	r2, #5
   149fc:	ldr	r1, [pc, #-196]	; 14940 <__assert_fail@plt+0x2d94>
   14a00:	mov	r0, r4
   14a04:	bl	11828 <__dcgettext@plt>
   14a08:	mov	r2, #5
   14a0c:	ldr	r1, [pc, #-208]	; 14944 <__assert_fail@plt+0x2d98>
   14a10:	mov	r5, r0
   14a14:	b	13d3c <__assert_fail@plt+0x2190>
   14a18:	mov	r1, r7
   14a1c:	ldr	r0, [sp, #12]
   14a20:	str	r3, [sp, #20]
   14a24:	bl	118b8 <obstack_free@plt>
   14a28:	ldr	r3, [sp, #20]
   14a2c:	mov	r7, r3
   14a30:	b	14718 <__assert_fail@plt+0x2b6c>
   14a34:	mov	r3, #0
   14a38:	mov	r2, r3
   14a3c:	mov	r1, r3
   14a40:	str	r6, [sp]
   14a44:	mov	r0, r8
   14a48:	bl	16510 <__assert_fail@plt+0x4964>
   14a4c:	mov	r7, #0
   14a50:	ldr	r4, [r0]
   14a54:	mov	r3, r0
   14a58:	cmp	r4, #1
   14a5c:	bne	145f0 <__assert_fail@plt+0x2a44>
   14a60:	b	13b60 <__assert_fail@plt+0x1fb4>
   14a64:	ldr	r0, [sp, #12]
   14a68:	bl	11888 <_obstack_newchunk@plt>
   14a6c:	ldr	r0, [sl, #44]	; 0x2c
   14a70:	b	14658 <__assert_fail@plt+0x2aac>
   14a74:	ldr	r5, [sp, #52]	; 0x34
   14a78:	b	14140 <__assert_fail@plt+0x2594>
   14a7c:	ldr	r0, [sp, #12]
   14a80:	bl	11888 <_obstack_newchunk@plt>
   14a84:	ldr	r0, [sl, #44]	; 0x2c
   14a88:	b	13e34 <__assert_fail@plt+0x2288>
   14a8c:	mov	r1, #1
   14a90:	mov	r0, r8
   14a94:	bl	163f8 <__assert_fail@plt+0x484c>
   14a98:	mov	r3, #0
   14a9c:	str	r6, [sp]
   14aa0:	mov	r2, r3
   14aa4:	mov	r1, r3
   14aa8:	mov	r0, r8
   14aac:	bl	16510 <__assert_fail@plt+0x4964>
   14ab0:	ldr	r4, [r0]
   14ab4:	mov	r5, r0
   14ab8:	cmp	r4, #1
   14abc:	beq	13b60 <__assert_fail@plt+0x1fb4>
   14ac0:	cmp	r4, #2
   14ac4:	beq	14a98 <__assert_fail@plt+0x2eec>
   14ac8:	cmp	r4, #23
   14acc:	beq	14ed4 <__assert_fail@plt+0x3328>
   14ad0:	cmp	r4, #3
   14ad4:	cmpne	r4, #15
   14ad8:	bne	14e34 <__assert_fail@plt+0x3288>
   14adc:	cmp	r7, #0
   14ae0:	beq	14b10 <__assert_fail@plt+0x2f64>
   14ae4:	ldr	r3, [sl, #36]	; 0x24
   14ae8:	cmp	r3, r7
   14aec:	bcs	14b04 <__assert_fail@plt+0x2f58>
   14af0:	ldr	r3, [sl, #48]	; 0x30
   14af4:	cmp	r3, r7
   14af8:	strhi	r7, [sl, #40]	; 0x28
   14afc:	strhi	r7, [sl, #44]	; 0x2c
   14b00:	bhi	14b10 <__assert_fail@plt+0x2f64>
   14b04:	mov	r1, r7
   14b08:	ldr	r0, [sp, #12]
   14b0c:	bl	118b8 <obstack_free@plt>
   14b10:	cmp	r4, #3
   14b14:	bne	14e54 <__assert_fail@plt+0x32a8>
   14b18:	ldr	r4, [r5, #8]
   14b1c:	ldr	r0, [sl, #44]	; 0x2c
   14b20:	add	r1, r4, #1
   14b24:	ldr	r2, [sl, #48]	; 0x30
   14b28:	add	r3, r0, r1
   14b2c:	cmp	r2, r3
   14b30:	bcc	14fb0 <__assert_fail@plt+0x3404>
   14b34:	ldr	r1, [r5, #4]
   14b38:	mov	r2, r4
   14b3c:	bl	11864 <memcpy@plt>
   14b40:	ldr	r2, [sl, #44]	; 0x2c
   14b44:	mov	r1, #0
   14b48:	add	r3, r2, r4
   14b4c:	add	r3, r3, #1
   14b50:	str	r3, [sl, #44]	; 0x2c
   14b54:	strb	r1, [r2, r4]
   14b58:	ldr	r3, [sl, #44]	; 0x2c
   14b5c:	ldr	r7, [sl, #40]	; 0x28
   14b60:	cmp	r7, r3
   14b64:	beq	14e94 <__assert_fail@plt+0x32e8>
   14b68:	ldr	r2, [sl, #56]	; 0x38
   14b6c:	ldr	r1, [sl, #48]	; 0x30
   14b70:	add	r3, r3, r2
   14b74:	bic	r2, r3, r2
   14b78:	cmp	r2, r1
   14b7c:	str	r2, [sl, #44]	; 0x2c
   14b80:	mov	r3, #0
   14b84:	movhi	r2, r1
   14b88:	strhi	r1, [sl, #44]	; 0x2c
   14b8c:	str	r2, [sl, #40]	; 0x28
   14b90:	mov	r1, r3
   14b94:	mov	r2, r3
   14b98:	str	r6, [sp]
   14b9c:	mov	r0, r8
   14ba0:	bl	16510 <__assert_fail@plt+0x4964>
   14ba4:	ldr	r4, [r0]
   14ba8:	mov	r3, r0
   14bac:	cmp	r4, #1
   14bb0:	beq	13b60 <__assert_fail@plt+0x1fb4>
   14bb4:	cmp	r4, #6
   14bb8:	beq	14cc8 <__assert_fail@plt+0x311c>
   14bbc:	mov	r5, #0
   14bc0:	cmp	r4, #16
   14bc4:	beq	14c00 <__assert_fail@plt+0x3054>
   14bc8:	mov	r2, #5
   14bcc:	ldr	r1, [pc, #-652]	; 14948 <__assert_fail@plt+0x2d9c>
   14bd0:	mov	r0, r9
   14bd4:	bl	11828 <__dcgettext@plt>
   14bd8:	ldr	r2, [pc, #-644]	; 1495c <__assert_fail@plt+0x2db0>
   14bdc:	mov	r1, r0
   14be0:	mov	r0, r8
   14be4:	bl	13848 <__assert_fail@plt+0x1c9c>
   14be8:	sub	r1, r4, #16
   14bec:	mov	r0, r8
   14bf0:	clz	r1, r1
   14bf4:	lsr	r1, r1, #5
   14bf8:	bl	163f8 <__assert_fail@plt+0x484c>
   14bfc:	b	14a98 <__assert_fail@plt+0x2eec>
   14c00:	ldr	r3, [r3, #4]
   14c04:	mov	r0, r7
   14c08:	str	r3, [sp, #24]
   14c0c:	bl	11a08 <strlen@plt>
   14c10:	add	r3, sp, #96	; 0x60
   14c14:	mov	r1, r7
   14c18:	mov	r2, r0
   14c1c:	ldr	r0, [sp, #16]
   14c20:	bl	1839c <__assert_fail@plt+0x67f0>
   14c24:	cmp	r0, #0
   14c28:	blt	14ea4 <__assert_fail@plt+0x32f8>
   14c2c:	ldr	r3, [sp, #96]	; 0x60
   14c30:	cmp	r3, #0
   14c34:	str	r3, [sp, #20]
   14c38:	beq	14ea4 <__assert_fail@plt+0x32f8>
   14c3c:	cmp	r5, #0
   14c40:	beq	14ecc <__assert_fail@plt+0x3320>
   14c44:	mov	r0, r5
   14c48:	bl	11a08 <strlen@plt>
   14c4c:	add	r3, sp, #96	; 0x60
   14c50:	mov	r1, r5
   14c54:	mov	r2, r0
   14c58:	ldr	r0, [sp, #16]
   14c5c:	bl	1839c <__assert_fail@plt+0x67f0>
   14c60:	cmp	r0, #0
   14c64:	blt	14fc0 <__assert_fail@plt+0x3414>
   14c68:	ldr	r3, [sp, #96]	; 0x60
   14c6c:	cmp	r3, #0
   14c70:	beq	14fc0 <__assert_fail@plt+0x3414>
   14c74:	ldr	r2, [sp, #20]
   14c78:	ldr	r1, [r2, #8]
   14c7c:	ldr	r2, [r3, #8]
   14c80:	cmp	r1, r2
   14c84:	bne	1521c <__assert_fail@plt+0x3670>
   14c88:	ldr	r2, [sl, #20]
   14c8c:	ldr	r0, [sl, #24]
   14c90:	cmp	r2, r0
   14c94:	bcs	14f00 <__assert_fail@plt+0x3354>
   14c98:	ldr	r5, [sl, #16]
   14c9c:	add	r1, r2, r2, lsl #1
   14ca0:	ldr	r0, [sp, #20]
   14ca4:	add	r2, r2, #1
   14ca8:	str	r0, [r5, r1, lsl #2]
   14cac:	add	r5, r5, r1, lsl #2
   14cb0:	mov	r7, #0
   14cb4:	str	r3, [r5, #4]
   14cb8:	ldr	r3, [sp, #24]
   14cbc:	str	r3, [r5, #8]
   14cc0:	str	r2, [sl, #20]
   14cc4:	b	14be8 <__assert_fail@plt+0x303c>
   14cc8:	mov	r3, #0
   14ccc:	mov	r2, r3
   14cd0:	mov	r1, r3
   14cd4:	str	r6, [sp]
   14cd8:	mov	r0, r8
   14cdc:	bl	16510 <__assert_fail@plt+0x4964>
   14ce0:	ldr	r3, [r0]
   14ce4:	mov	r5, r0
   14ce8:	cmp	r3, #1
   14cec:	beq	13b60 <__assert_fail@plt+0x1fb4>
   14cf0:	cmp	r3, #3
   14cf4:	cmpne	r3, #15
   14cf8:	bne	14da4 <__assert_fail@plt+0x31f8>
   14cfc:	cmp	r3, #3
   14d00:	bne	14de4 <__assert_fail@plt+0x3238>
   14d04:	ldr	r4, [r0, #8]
   14d08:	ldr	r0, [sl, #44]	; 0x2c
   14d0c:	add	r1, r4, #1
   14d10:	ldr	r2, [sl, #48]	; 0x30
   14d14:	add	r3, r0, r1
   14d18:	cmp	r2, r3
   14d1c:	bcc	14f88 <__assert_fail@plt+0x33dc>
   14d20:	ldr	r1, [r5, #4]
   14d24:	mov	r2, r4
   14d28:	bl	11864 <memcpy@plt>
   14d2c:	ldr	r2, [sl, #44]	; 0x2c
   14d30:	mov	r1, #0
   14d34:	add	r3, r2, r4
   14d38:	add	r3, r3, #1
   14d3c:	str	r3, [sl, #44]	; 0x2c
   14d40:	strb	r1, [r2, r4]
   14d44:	ldr	r3, [sl, #44]	; 0x2c
   14d48:	ldr	r5, [sl, #40]	; 0x28
   14d4c:	cmp	r5, r3
   14d50:	beq	14e24 <__assert_fail@plt+0x3278>
   14d54:	ldr	r2, [sl, #56]	; 0x38
   14d58:	ldr	r1, [sl, #48]	; 0x30
   14d5c:	add	r3, r3, r2
   14d60:	bic	r2, r3, r2
   14d64:	cmp	r2, r1
   14d68:	str	r2, [sl, #44]	; 0x2c
   14d6c:	mov	r3, #0
   14d70:	movhi	r2, r1
   14d74:	strhi	r1, [sl, #44]	; 0x2c
   14d78:	str	r2, [sl, #40]	; 0x28
   14d7c:	mov	r1, r3
   14d80:	mov	r2, r3
   14d84:	str	r6, [sp]
   14d88:	mov	r0, r8
   14d8c:	bl	16510 <__assert_fail@plt+0x4964>
   14d90:	ldr	r4, [r0]
   14d94:	mov	r3, r0
   14d98:	cmp	r4, #1
   14d9c:	bne	14bc0 <__assert_fail@plt+0x3014>
   14da0:	b	13b60 <__assert_fail@plt+0x1fb4>
   14da4:	mov	r2, #5
   14da8:	ldr	r1, [pc, #-1120]	; 14950 <__assert_fail@plt+0x2da4>
   14dac:	mov	r0, r9
   14db0:	bl	11828 <__dcgettext@plt>
   14db4:	ldr	r1, [pc, #-1136]	; 1494c <__assert_fail@plt+0x2da0>
   14db8:	mov	r2, #5
   14dbc:	mov	r4, r0
   14dc0:	mov	r0, r9
   14dc4:	bl	11828 <__dcgettext@plt>
   14dc8:	mov	r1, r4
   14dcc:	ldr	r2, [pc, #-1144]	; 1495c <__assert_fail@plt+0x2db0>
   14dd0:	mov	r3, r0
   14dd4:	mov	r0, r8
   14dd8:	bl	13848 <__assert_fail@plt+0x1c9c>
   14ddc:	mov	r1, #0
   14de0:	b	14a90 <__assert_fail@plt+0x2ee4>
   14de4:	ldr	r2, [r8, #36]	; 0x24
   14de8:	ldr	r1, [pc, #-1176]	; 14958 <__assert_fail@plt+0x2dac>
   14dec:	ldr	r0, [sp, #12]
   14df0:	bl	11a80 <obstack_printf@plt>
   14df4:	ldr	r3, [sl, #44]	; 0x2c
   14df8:	ldr	r1, [sl, #48]	; 0x30
   14dfc:	add	r2, r3, #1
   14e00:	cmp	r2, r1
   14e04:	bhi	14f98 <__assert_fail@plt+0x33ec>
   14e08:	mov	r1, #0
   14e0c:	str	r2, [sl, #44]	; 0x2c
   14e10:	strb	r1, [r3]
   14e14:	ldr	r5, [sl, #40]	; 0x28
   14e18:	ldr	r3, [sl, #44]	; 0x2c
   14e1c:	cmp	r5, r3
   14e20:	bne	14d54 <__assert_fail@plt+0x31a8>
   14e24:	ldrb	r2, [sl, #72]	; 0x48
   14e28:	orr	r2, r2, #2
   14e2c:	strb	r2, [sl, #72]	; 0x48
   14e30:	b	14d54 <__assert_fail@plt+0x31a8>
   14e34:	mov	r2, #5
   14e38:	ldr	r1, [pc, #-1264]	; 14950 <__assert_fail@plt+0x2da4>
   14e3c:	mov	r0, r9
   14e40:	bl	11828 <__dcgettext@plt>
   14e44:	mov	r2, #5
   14e48:	ldr	r1, [pc, #-1276]	; 14954 <__assert_fail@plt+0x2da8>
   14e4c:	mov	r4, r0
   14e50:	b	14dc0 <__assert_fail@plt+0x3214>
   14e54:	ldr	r2, [r8, #36]	; 0x24
   14e58:	ldr	r1, [pc, #-1288]	; 14958 <__assert_fail@plt+0x2dac>
   14e5c:	ldr	r0, [sp, #12]
   14e60:	bl	11a80 <obstack_printf@plt>
   14e64:	ldr	r3, [sl, #44]	; 0x2c
   14e68:	ldr	r1, [sl, #48]	; 0x30
   14e6c:	add	r2, r3, #1
   14e70:	cmp	r2, r1
   14e74:	bhi	14fe8 <__assert_fail@plt+0x343c>
   14e78:	mov	r1, #0
   14e7c:	str	r2, [sl, #44]	; 0x2c
   14e80:	strb	r1, [r3]
   14e84:	ldr	r7, [sl, #40]	; 0x28
   14e88:	ldr	r3, [sl, #44]	; 0x2c
   14e8c:	cmp	r7, r3
   14e90:	bne	14b68 <__assert_fail@plt+0x2fbc>
   14e94:	ldrb	r2, [sl, #72]	; 0x48
   14e98:	orr	r2, r2, #2
   14e9c:	strb	r2, [sl, #72]	; 0x48
   14ea0:	b	14b68 <__assert_fail@plt+0x2fbc>
   14ea4:	mov	r2, #5
   14ea8:	ldr	r1, [pc, #-1360]	; 14960 <__assert_fail@plt+0x2db4>
   14eac:	mov	r0, r9
   14eb0:	bl	11828 <__dcgettext@plt>
   14eb4:	mov	r2, r7
   14eb8:	mov	r7, #0
   14ebc:	mov	r1, r0
   14ec0:	mov	r0, r8
   14ec4:	bl	13848 <__assert_fail@plt+0x1c9c>
   14ec8:	b	14be8 <__assert_fail@plt+0x303c>
   14ecc:	ldr	r3, [sp, #20]
   14ed0:	b	14c88 <__assert_fail@plt+0x30dc>
   14ed4:	mov	r3, #0
   14ed8:	str	r6, [sp]
   14edc:	mov	r2, r3
   14ee0:	mov	r1, r3
   14ee4:	mov	r0, r8
   14ee8:	bl	16510 <__assert_fail@plt+0x4964>
   14eec:	ldr	r5, [r0]
   14ef0:	cmp	r5, #1
   14ef4:	beq	13b60 <__assert_fail@plt+0x1fb4>
   14ef8:	ldr	r4, [pc, #-1444]	; 1495c <__assert_fail@plt+0x2db0>
   14efc:	b	1450c <__assert_fail@plt+0x2960>
   14f00:	add	r7, r2, #32
   14f04:	ldr	ip, [sl, #48]	; 0x30
   14f08:	add	r2, r7, r7, lsl #1
   14f0c:	ldr	r1, [sl, #44]	; 0x2c
   14f10:	lsl	r2, r2, #2
   14f14:	sub	lr, ip, r1
   14f18:	cmp	r2, lr
   14f1c:	bgt	151f4 <__assert_fail@plt+0x3648>
   14f20:	ldr	r5, [sl, #40]	; 0x28
   14f24:	add	r2, r1, r2
   14f28:	cmp	r2, r5
   14f2c:	str	r2, [sl, #44]	; 0x2c
   14f30:	ldrbeq	r1, [sl, #72]	; 0x48
   14f34:	add	r0, r0, r0, lsl #1
   14f38:	str	r3, [sp, #28]
   14f3c:	orreq	r1, r1, #2
   14f40:	strbeq	r1, [sl, #72]	; 0x48
   14f44:	ldr	r1, [sl, #56]	; 0x38
   14f48:	add	r2, r2, r1
   14f4c:	bic	r2, r2, r1
   14f50:	cmp	r2, ip
   14f54:	movls	ip, r2
   14f58:	strls	r2, [sl, #44]	; 0x2c
   14f5c:	strhi	ip, [sl, #44]	; 0x2c
   14f60:	lsl	r2, r0, #2
   14f64:	str	ip, [sl, #40]	; 0x28
   14f68:	ldr	r1, [sl, #16]
   14f6c:	mov	r0, r5
   14f70:	bl	11864 <memcpy@plt>
   14f74:	ldr	r2, [sl, #20]
   14f78:	str	r5, [sl, #16]
   14f7c:	str	r7, [sl, #24]
   14f80:	ldr	r3, [sp, #28]
   14f84:	b	14c9c <__assert_fail@plt+0x30f0>
   14f88:	ldr	r0, [sp, #12]
   14f8c:	bl	11888 <_obstack_newchunk@plt>
   14f90:	ldr	r0, [sl, #44]	; 0x2c
   14f94:	b	14d20 <__assert_fail@plt+0x3174>
   14f98:	mov	r1, #1
   14f9c:	ldr	r0, [sp, #12]
   14fa0:	bl	11888 <_obstack_newchunk@plt>
   14fa4:	ldr	r3, [sl, #44]	; 0x2c
   14fa8:	add	r2, r3, #1
   14fac:	b	14e08 <__assert_fail@plt+0x325c>
   14fb0:	ldr	r0, [sp, #12]
   14fb4:	bl	11888 <_obstack_newchunk@plt>
   14fb8:	ldr	r0, [sl, #44]	; 0x2c
   14fbc:	b	14b34 <__assert_fail@plt+0x2f88>
   14fc0:	mov	r2, #5
   14fc4:	ldr	r1, [pc, #-1644]	; 14960 <__assert_fail@plt+0x2db4>
   14fc8:	mov	r0, r9
   14fcc:	bl	11828 <__dcgettext@plt>
   14fd0:	mov	r2, r5
   14fd4:	mov	r7, #0
   14fd8:	mov	r1, r0
   14fdc:	mov	r0, r8
   14fe0:	bl	13848 <__assert_fail@plt+0x1c9c>
   14fe4:	b	14be8 <__assert_fail@plt+0x303c>
   14fe8:	mov	r1, #1
   14fec:	ldr	r0, [sp, #12]
   14ff0:	bl	11888 <_obstack_newchunk@plt>
   14ff4:	ldr	r3, [sl, #44]	; 0x2c
   14ff8:	add	r2, r3, #1
   14ffc:	b	14e78 <__assert_fail@plt+0x32cc>
   15000:	mov	r1, #1
   15004:	ldr	r0, [sp, #12]
   15008:	bl	11888 <_obstack_newchunk@plt>
   1500c:	ldr	r3, [sl, #44]	; 0x2c
   15010:	add	r2, r3, #1
   15014:	b	144a4 <__assert_fail@plt+0x28f8>
   15018:	mov	r1, #1
   1501c:	ldr	r0, [sp, #12]
   15020:	bl	11888 <_obstack_newchunk@plt>
   15024:	ldr	r3, [sl, #44]	; 0x2c
   15028:	add	r2, r3, #1
   1502c:	b	14744 <__assert_fail@plt+0x2b98>
   15030:	mov	r1, r8
   15034:	ldr	r0, [sp, #12]
   15038:	bl	11888 <_obstack_newchunk@plt>
   1503c:	ldr	r0, [sl, #56]	; 0x38
   15040:	ldr	r2, [sl, #44]	; 0x2c
   15044:	mvn	ip, r0
   15048:	ldr	r4, [sl, #40]	; 0x28
   1504c:	ldr	r1, [sl, #48]	; 0x30
   15050:	b	142ec <__assert_fail@plt+0x2740>
   15054:	ldr	r3, [sp, #68]	; 0x44
   15058:	ldr	r3, [r3]
   1505c:	cmp	r3, #34	; 0x22
   15060:	beq	15074 <__assert_fail@plt+0x34c8>
   15064:	ldr	r3, [sp, #92]	; 0x5c
   15068:	ldrb	r3, [r3]
   1506c:	cmp	r3, #0
   15070:	beq	14214 <__assert_fail@plt+0x2668>
   15074:	mov	r2, #5
   15078:	ldr	r1, [pc, #-1820]	; 14964 <__assert_fail@plt+0x2db8>
   1507c:	mov	r0, r9
   15080:	bl	11828 <__dcgettext@plt>
   15084:	mov	r3, fp
   15088:	mov	r2, r6
   1508c:	mov	r1, r0
   15090:	mov	r0, r8
   15094:	bl	13848 <__assert_fail@plt+0x1c9c>
   15098:	b	13f90 <__assert_fail@plt+0x23e4>
   1509c:	ldr	r3, [r0, #4]
   150a0:	cmp	fp, #20
   150a4:	ldrb	r3, [r3]
   150a8:	strbeq	r3, [r8, #29]
   150ac:	strbne	r3, [r8, #28]
   150b0:	b	13cdc <__assert_fail@plt+0x2130>
   150b4:	subs	r2, r5, #2
   150b8:	bmi	1510c <__assert_fail@plt+0x3560>
   150bc:	ldr	r1, [sp, #44]	; 0x2c
   150c0:	ldrb	r3, [r1, r2]
   150c4:	add	r3, r3, #1
   150c8:	uxtb	r3, r3
   150cc:	cmp	r3, #0
   150d0:	strb	r3, [r1, r2]
   150d4:	bne	143a4 <__assert_fail@plt+0x27f8>
   150d8:	ldr	r3, [sp, #84]	; 0x54
   150dc:	add	r2, r5, #2
   150e0:	add	r2, r3, r2
   150e4:	ldr	r1, [sp, #80]	; 0x50
   150e8:	b	15104 <__assert_fail@plt+0x3558>
   150ec:	ldrb	r3, [r2, #-1]!
   150f0:	add	r3, r3, #1
   150f4:	uxtb	r3, r3
   150f8:	cmp	r3, #0
   150fc:	strb	r3, [r2]
   15100:	bne	143a4 <__assert_fail@plt+0x27f8>
   15104:	cmn	r1, r2
   15108:	bpl	150ec <__assert_fail@plt+0x3540>
   1510c:	ldr	r8, [sp, #56]	; 0x38
   15110:	ldr	r7, [sp, #76]	; 0x4c
   15114:	mov	r2, #5
   15118:	ldr	r1, [pc, #-1976]	; 14968 <__assert_fail@plt+0x2dbc>
   1511c:	b	13f7c <__assert_fail@plt+0x23d0>
   15120:	ldr	r1, [sp, #28]
   15124:	ldr	r2, [sl, #48]	; 0x30
   15128:	ldr	r3, [sl, #44]	; 0x2c
   1512c:	add	r5, r1, #12
   15130:	sub	r1, r2, r3
   15134:	cmp	r5, r1
   15138:	bgt	15338 <__assert_fail@plt+0x378c>
   1513c:	ldr	r4, [sl, #40]	; 0x28
   15140:	add	r3, r3, r5
   15144:	cmp	r3, r4
   15148:	str	r3, [sl, #44]	; 0x2c
   1514c:	ldrbeq	r1, [sl, #72]	; 0x48
   15150:	add	r5, r4, #12
   15154:	mov	r0, r5
   15158:	orreq	r1, r1, #2
   1515c:	strbeq	r1, [sl, #72]	; 0x48
   15160:	ldr	r1, [sl, #56]	; 0x38
   15164:	add	r3, r3, r1
   15168:	bic	r3, r3, r1
   1516c:	cmp	r3, r2
   15170:	movls	r2, r3
   15174:	strls	r3, [sl, #44]	; 0x2c
   15178:	ldr	r3, [sp, #28]
   1517c:	strhi	r2, [sl, #44]	; 0x2c
   15180:	str	r2, [sl, #40]	; 0x28
   15184:	ldr	r1, [sp, #44]	; 0x2c
   15188:	str	r3, [r4, #8]
   1518c:	mov	r2, r3
   15190:	bl	11864 <memcpy@plt>
   15194:	mvn	r3, #1
   15198:	str	r6, [r4]
   1519c:	str	r3, [r4, #4]
   151a0:	ldrb	r3, [r6]
   151a4:	cmp	r3, #80	; 0x50
   151a8:	cmpne	r3, #85	; 0x55
   151ac:	bne	151c0 <__assert_fail@plt+0x3614>
   151b0:	ldr	r3, [sp, #36]	; 0x24
   151b4:	sub	r3, r3, #5
   151b8:	bics	fp, r3, #4
   151bc:	beq	153b8 <__assert_fail@plt+0x380c>
   151c0:	ldr	r2, [sp, #36]	; 0x24
   151c4:	mov	r1, r6
   151c8:	mov	r3, r4
   151cc:	ldr	r0, [sp, #16]
   151d0:	bl	1827c <__assert_fail@plt+0x66d0>
   151d4:	mov	r3, r4
   151d8:	ldr	r2, [sp, #28]
   151dc:	mov	r1, r5
   151e0:	ldr	r0, [sp, #20]
   151e4:	bl	1827c <__assert_fail@plt+0x66d0>
   151e8:	b	13f90 <__assert_fail@plt+0x23e4>
   151ec:	str	r3, [sl, #8]
   151f0:	b	13cdc <__assert_fail@plt+0x2130>
   151f4:	mov	r1, r2
   151f8:	ldr	r0, [sp, #12]
   151fc:	str	r3, [sp, #32]
   15200:	str	r2, [sp, #28]
   15204:	bl	11888 <_obstack_newchunk@plt>
   15208:	ldr	r1, [sl, #44]	; 0x2c
   1520c:	ldr	ip, [sl, #48]	; 0x30
   15210:	ldr	r0, [sl, #24]
   15214:	ldrd	r2, [sp, #28]
   15218:	b	14f20 <__assert_fail@plt+0x3374>
   1521c:	mov	r2, #5
   15220:	ldr	r1, [pc, #-2236]	; 1496c <__assert_fail@plt+0x2dc0>
   15224:	mov	r0, r9
   15228:	str	r3, [sp, #24]
   1522c:	bl	11828 <__dcgettext@plt>
   15230:	ldr	r3, [sp, #24]
   15234:	ldr	r2, [sp, #20]
   15238:	mov	r7, #0
   1523c:	ldr	r3, [r3, #8]
   15240:	ldr	r2, [r2, #8]
   15244:	mov	r1, r0
   15248:	mov	r0, r8
   1524c:	bl	13848 <__assert_fail@plt+0x1c9c>
   15250:	b	14be8 <__assert_fail@plt+0x303c>
   15254:	ldr	r2, [sl, #12]
   15258:	cmp	r2, #0
   1525c:	bne	15380 <__assert_fail@plt+0x37d4>
   15260:	ldr	r3, [r3, #4]
   15264:	cmp	r3, #0
   15268:	beq	15420 <__assert_fail@plt+0x3874>
   1526c:	ldr	r2, [sl, #8]
   15270:	cmp	r2, #0
   15274:	beq	15280 <__assert_fail@plt+0x36d4>
   15278:	cmp	r2, r3
   1527c:	bgt	13be0 <__assert_fail@plt+0x2034>
   15280:	str	r3, [sl, #12]
   15284:	b	13cdc <__assert_fail@plt+0x2130>
   15288:	ldr	r3, [sp, #68]	; 0x44
   1528c:	ldr	r2, [sp, #72]	; 0x48
   15290:	add	r1, sp, #96	; 0x60
   15294:	str	r2, [r3]
   15298:	add	r0, fp, #1
   1529c:	mov	r2, #16
   152a0:	bl	119fc <strtoul@plt>
   152a4:	ldr	r2, [sp, #96]	; 0x60
   152a8:	ldr	r3, [sp, #36]	; 0x24
   152ac:	sub	r2, r2, fp
   152b0:	cmp	r3, r2
   152b4:	str	r0, [r4, #4]
   152b8:	beq	15438 <__assert_fail@plt+0x388c>
   152bc:	mvn	r2, #1
   152c0:	str	r2, [r4, #4]
   152c4:	b	14360 <__assert_fail@plt+0x27b4>
   152c8:	cmp	ip, r2
   152cc:	bcc	15408 <__assert_fail@plt+0x385c>
   152d0:	ldr	r1, [r3, #4]
   152d4:	mov	r2, r5
   152d8:	bl	11864 <memcpy@plt>
   152dc:	ldr	r2, [sl, #44]	; 0x2c
   152e0:	mov	r1, #0
   152e4:	add	r3, r2, r5
   152e8:	add	r3, r3, #1
   152ec:	str	r3, [sl, #44]	; 0x2c
   152f0:	strb	r1, [r2, r5]
   152f4:	ldr	r3, [sl, #44]	; 0x2c
   152f8:	ldr	r1, [sl, #40]	; 0x28
   152fc:	ldr	r0, [sl, #56]	; 0x38
   15300:	cmp	r1, r3
   15304:	add	r3, r3, r0
   15308:	ldrbeq	r2, [sl, #72]	; 0x48
   1530c:	bic	r3, r3, r0
   15310:	str	r3, [sl, #44]	; 0x2c
   15314:	orreq	r2, r2, #2
   15318:	strbeq	r2, [sl, #72]	; 0x48
   1531c:	ldr	r2, [sl, #48]	; 0x30
   15320:	str	r1, [sl]
   15324:	cmp	r3, r2
   15328:	movhi	r3, r2
   1532c:	strhi	r2, [sl, #44]	; 0x2c
   15330:	str	r3, [sl, #40]	; 0x28
   15334:	b	13cdc <__assert_fail@plt+0x2130>
   15338:	mov	r1, r5
   1533c:	ldr	r0, [sp, #12]
   15340:	bl	11888 <_obstack_newchunk@plt>
   15344:	ldr	r3, [sl, #44]	; 0x2c
   15348:	ldr	r2, [sl, #48]	; 0x30
   1534c:	b	1513c <__assert_fail@plt+0x3590>
   15350:	ldr	r0, [sp, #12]
   15354:	str	r3, [sp, #24]
   15358:	bl	11888 <_obstack_newchunk@plt>
   1535c:	ldr	r0, [sl, #44]	; 0x2c
   15360:	ldr	r3, [sp, #24]
   15364:	b	13c7c <__assert_fail@plt+0x20d0>
   15368:	mov	r2, #5
   1536c:	ldr	r1, [pc, #-2552]	; 1497c <__assert_fail@plt+0x2dd0>
   15370:	mov	r0, r4
   15374:	bl	11828 <__dcgettext@plt>
   15378:	ldr	r2, [pc, #-2576]	; 14970 <__assert_fail@plt+0x2dc4>
   1537c:	b	13d18 <__assert_fail@plt+0x216c>
   15380:	str	r0, [sp, #24]
   15384:	mov	r2, #5
   15388:	ldr	r1, [pc, #-2588]	; 14974 <__assert_fail@plt+0x2dc8>
   1538c:	mov	r0, r4
   15390:	bl	11828 <__dcgettext@plt>
   15394:	ldr	r2, [pc, #-2588]	; 14980 <__assert_fail@plt+0x2dd4>
   15398:	mov	r1, r0
   1539c:	mov	r0, r8
   153a0:	bl	13848 <__assert_fail@plt+0x1c9c>
   153a4:	ldr	r3, [sp, #24]
   153a8:	b	15260 <__assert_fail@plt+0x36b4>
   153ac:	ldr	r8, [sp, #56]	; 0x38
   153b0:	ldr	r7, [sp, #76]	; 0x4c
   153b4:	b	13f90 <__assert_fail@plt+0x23e4>
   153b8:	bl	11a38 <__errno_location@plt>
   153bc:	mov	r2, #16
   153c0:	add	r1, sp, #96	; 0x60
   153c4:	str	fp, [r0]
   153c8:	add	r0, r6, #1
   153cc:	bl	119fc <strtoul@plt>
   153d0:	ldr	r3, [sp, #96]	; 0x60
   153d4:	ldr	r2, [sp, #36]	; 0x24
   153d8:	sub	r3, r3, r6
   153dc:	cmp	r2, r3
   153e0:	str	r0, [r4, #4]
   153e4:	beq	15448 <__assert_fail@plt+0x389c>
   153e8:	mvn	r3, #1
   153ec:	str	r3, [r4, #4]
   153f0:	b	151c0 <__assert_fail@plt+0x3614>
   153f4:	mov	r2, #5
   153f8:	ldr	r1, [pc, #-2696]	; 14978 <__assert_fail@plt+0x2dcc>
   153fc:	b	13f7c <__assert_fail@plt+0x23d0>
   15400:	mov	r7, r3
   15404:	b	14718 <__assert_fail@plt+0x2b6c>
   15408:	ldr	r0, [sp, #12]
   1540c:	str	r3, [sp, #24]
   15410:	bl	11888 <_obstack_newchunk@plt>
   15414:	ldr	r0, [sl, #44]	; 0x2c
   15418:	ldr	r3, [sp, #24]
   1541c:	b	152d0 <__assert_fail@plt+0x3724>
   15420:	mov	r2, #5
   15424:	ldr	r1, [pc, #-2736]	; 1497c <__assert_fail@plt+0x2dd0>
   15428:	mov	r0, r4
   1542c:	bl	11828 <__dcgettext@plt>
   15430:	ldr	r2, [pc, #-2744]	; 14980 <__assert_fail@plt+0x2dd4>
   15434:	b	13d18 <__assert_fail@plt+0x216c>
   15438:	cmp	r0, #0
   1543c:	bge	14360 <__assert_fail@plt+0x27b4>
   15440:	b	152bc <__assert_fail@plt+0x3710>
   15444:	bl	118ac <__stack_chk_fail@plt>
   15448:	cmp	r0, #0
   1544c:	bge	151c0 <__assert_fail@plt+0x3614>
   15450:	b	153e8 <__assert_fail@plt+0x383c>
   15454:	mov	r2, #5
   15458:	ldr	r1, [pc, #-2780]	; 14984 <__assert_fail@plt+0x2dd8>
   1545c:	ldr	r0, [pc, #-2780]	; 14988 <__assert_fail@plt+0x2ddc>
   15460:	bl	11828 <__dcgettext@plt>
   15464:	mov	r1, r0
   15468:	mov	r0, r8
   1546c:	bl	13848 <__assert_fail@plt+0x1c9c>
   15470:	mov	r0, #4
   15474:	bl	119e4 <exit@plt>
   15478:	ldr	r3, [pc, #-2804]	; 1498c <__assert_fail@plt+0x2de0>
   1547c:	ldr	r2, [pc, #-2804]	; 14990 <__assert_fail@plt+0x2de4>
   15480:	ldr	r1, [pc, #-2804]	; 14994 <__assert_fail@plt+0x2de8>
   15484:	ldr	r0, [pc, #-2804]	; 14998 <__assert_fail@plt+0x2dec>
   15488:	bl	11bac <__assert_fail@plt>
   1548c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15490:	add	fp, sp, #28
   15494:	ldr	r6, [pc, #216]	; 15574 <__assert_fail@plt+0x39c8>
   15498:	sub	sp, sp, #8
   1549c:	ldr	r3, [r6]
   154a0:	mov	r7, r0
   154a4:	mov	r8, r1
   154a8:	str	r3, [fp, #-32]	; 0xffffffe0
   154ac:	bl	15e38 <__assert_fail@plt+0x428c>
   154b0:	subs	r5, r0, #0
   154b4:	beq	15530 <__assert_fail@plt+0x3984>
   154b8:	mov	r0, r7
   154bc:	bl	11a08 <strlen@plt>
   154c0:	mov	r4, r0
   154c4:	mov	r0, r8
   154c8:	bl	11a08 <strlen@plt>
   154cc:	cmp	r4, #0
   154d0:	mov	r9, r0
   154d4:	beq	154e8 <__assert_fail@plt+0x393c>
   154d8:	add	r3, r7, r4
   154dc:	ldrb	r3, [r3, #-1]
   154e0:	cmp	r3, #47	; 0x2f
   154e4:	beq	1554c <__assert_fail@plt+0x39a0>
   154e8:	add	r4, r4, r9
   154ec:	add	r4, r4, #9
   154f0:	bic	r4, r4, #7
   154f4:	sub	sp, sp, r4
   154f8:	mov	r4, sp
   154fc:	mov	r1, r7
   15500:	mov	r0, r4
   15504:	bl	11b34 <__stpcpy@plt>
   15508:	mov	r3, #47	; 0x2f
   1550c:	strb	r3, [r0], #1
   15510:	add	r2, r9, #1
   15514:	mov	r1, r8
   15518:	bl	11864 <memcpy@plt>
   1551c:	mov	r0, r5
   15520:	mov	r1, r4
   15524:	ldr	r2, [pc, #76]	; 15578 <__assert_fail@plt+0x39cc>
   15528:	bl	161d8 <__assert_fail@plt+0x462c>
   1552c:	mov	r5, r0
   15530:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15534:	ldr	r3, [r6]
   15538:	mov	r0, r5
   1553c:	cmp	r2, r3
   15540:	bne	15570 <__assert_fail@plt+0x39c4>
   15544:	sub	sp, fp, #28
   15548:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1554c:	add	r4, r4, r0
   15550:	add	r4, r4, #8
   15554:	bic	r4, r4, #7
   15558:	sub	sp, sp, r4
   1555c:	mov	r4, sp
   15560:	mov	r1, r7
   15564:	mov	r0, r4
   15568:	bl	11b34 <__stpcpy@plt>
   1556c:	b	15510 <__assert_fail@plt+0x3964>
   15570:	bl	118ac <__stack_chk_fail@plt>
   15574:	strdeq	sl, [r2], -r8
   15578:	andeq	r3, r1, r4, asr r7
   1557c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15580:	add	fp, sp, #32
   15584:	ldr	r6, [pc, #872]	; 158f4 <__assert_fail@plt+0x3d48>
   15588:	sub	sp, sp, #20
   1558c:	ldr	r3, [r6]
   15590:	subs	r5, r0, #0
   15594:	str	r3, [fp, #-40]	; 0xffffffd8
   15598:	beq	15784 <__assert_fail@plt+0x3bd8>
   1559c:	mov	r8, r1
   155a0:	ldr	r1, [pc, #848]	; 158f8 <__assert_fail@plt+0x3d4c>
   155a4:	mov	r7, r2
   155a8:	bl	162c0 <__assert_fail@plt+0x4714>
   155ac:	cmp	r0, #0
   155b0:	beq	15690 <__assert_fail@plt+0x3ae4>
   155b4:	mov	r1, r8
   155b8:	bl	138f4 <__assert_fail@plt+0x1d48>
   155bc:	adds	r7, r7, #0
   155c0:	movne	r7, #1
   155c4:	cmp	r0, #0
   155c8:	movne	r7, #0
   155cc:	cmp	r7, #0
   155d0:	mov	r9, r0
   155d4:	bne	156ac <__assert_fail@plt+0x3b00>
   155d8:	cmp	r0, #0
   155dc:	beq	156d8 <__assert_fail@plt+0x3b2c>
   155e0:	ldr	r3, [r9]
   155e4:	cmp	r3, #0
   155e8:	beq	157cc <__assert_fail@plt+0x3c20>
   155ec:	ldr	r3, [fp, #4]
   155f0:	cmp	r3, #0
   155f4:	beq	15788 <__assert_fail@plt+0x3bdc>
   155f8:	ldr	r5, [pc, #764]	; 158fc <__assert_fail@plt+0x3d50>
   155fc:	add	r8, r9, #136	; 0x88
   15600:	mov	r7, #0
   15604:	sub	r4, fp, #44	; 0x2c
   15608:	b	15638 <__assert_fail@plt+0x3a8c>
   1560c:	ldr	r2, [fp, #-44]	; 0xffffffd4
   15610:	ldrb	r3, [r5]
   15614:	cmp	r2, #0
   15618:	moveq	r7, #1
   1561c:	beq	1562c <__assert_fail@plt+0x3a80>
   15620:	ldr	r2, [r2, #4]
   15624:	cmp	r2, r3
   15628:	movne	r7, #1
   1562c:	cmp	r3, #0
   15630:	add	r5, r5, #1
   15634:	beq	15668 <__assert_fail@plt+0x3abc>
   15638:	mov	r3, r4
   1563c:	mov	r2, #1
   15640:	mov	r1, r5
   15644:	mov	r0, r8
   15648:	bl	1839c <__assert_fail@plt+0x67f0>
   1564c:	cmp	r0, #0
   15650:	bge	1560c <__assert_fail@plt+0x3a60>
   15654:	ldrb	r3, [r5]
   15658:	mov	r7, #1
   1565c:	add	r5, r5, #1
   15660:	cmp	r3, #0
   15664:	bne	15638 <__assert_fail@plt+0x3a8c>
   15668:	cmp	r7, #0
   1566c:	beq	15788 <__assert_fail@plt+0x3bdc>
   15670:	ldr	r3, [pc, #648]	; 15900 <__assert_fail@plt+0x3d54>
   15674:	ldrb	r3, [r3]
   15678:	cmp	r3, #0
   1567c:	bne	157a4 <__assert_fail@plt+0x3bf8>
   15680:	ldr	r3, [pc, #636]	; 15904 <__assert_fail@plt+0x3d58>
   15684:	mov	r2, #1
   15688:	strb	r2, [r3]
   1568c:	b	15788 <__assert_fail@plt+0x3bdc>
   15690:	mov	r1, #47	; 0x2f
   15694:	mov	r0, r5
   15698:	bl	11a20 <strchr@plt>
   1569c:	cmp	r0, #0
   156a0:	beq	157e8 <__assert_fail@plt+0x3c3c>
   156a4:	cmp	r7, #0
   156a8:	beq	15784 <__assert_fail@plt+0x3bd8>
   156ac:	bl	11a38 <__errno_location@plt>
   156b0:	mov	r2, #5
   156b4:	ldr	r1, [pc, #588]	; 15908 <__assert_fail@plt+0x3d5c>
   156b8:	ldr	r4, [r0]
   156bc:	ldr	r0, [pc, #584]	; 1590c <__assert_fail@plt+0x3d60>
   156c0:	bl	11828 <__dcgettext@plt>
   156c4:	mov	r3, r5
   156c8:	mov	r1, r4
   156cc:	mov	r2, r0
   156d0:	mov	r0, #0
   156d4:	bl	188f0 <__assert_fail@plt+0x6d44>
   156d8:	mov	r1, #47	; 0x2f
   156dc:	mov	r0, r5
   156e0:	bl	11a20 <strchr@plt>
   156e4:	cmp	r0, #0
   156e8:	bne	15784 <__assert_fail@plt+0x3bd8>
   156ec:	ldr	r0, [pc, #540]	; 15910 <__assert_fail@plt+0x3d64>
   156f0:	bl	15b60 <__assert_fail@plt+0x3fb4>
   156f4:	subs	sl, r0, #0
   156f8:	beq	15784 <__assert_fail@plt+0x3bd8>
   156fc:	mov	r0, sl
   15700:	bl	15c4c <__assert_fail@plt+0x40a0>
   15704:	subs	r9, r0, #0
   15708:	beq	157dc <__assert_fail@plt+0x3c30>
   1570c:	mov	r1, r9
   15710:	ldr	r0, [pc, #504]	; 15910 <__assert_fail@plt+0x3d64>
   15714:	bl	15f64 <__assert_fail@plt+0x43b8>
   15718:	mov	r7, r0
   1571c:	ldr	r0, [r0]
   15720:	cmp	r0, #0
   15724:	beq	157c0 <__assert_fail@plt+0x3c14>
   15728:	mov	r4, r7
   1572c:	b	1573c <__assert_fail@plt+0x3b90>
   15730:	ldr	r0, [r4, #4]!
   15734:	cmp	r0, #0
   15738:	beq	157c0 <__assert_fail@plt+0x3c14>
   1573c:	mov	r1, r5
   15740:	bl	118f4 <strcasecmp@plt>
   15744:	cmp	r0, #0
   15748:	bne	15730 <__assert_fail@plt+0x3b84>
   1574c:	mov	r0, r7
   15750:	bl	160e8 <__assert_fail@plt+0x453c>
   15754:	mov	r1, r9
   15758:	ldr	r0, [pc, #432]	; 15910 <__assert_fail@plt+0x3d64>
   1575c:	bl	1548c <__assert_fail@plt+0x38e0>
   15760:	subs	r9, r0, #0
   15764:	beq	1582c <__assert_fail@plt+0x3c80>
   15768:	mov	r1, r8
   1576c:	bl	138f4 <__assert_fail@plt+0x1d48>
   15770:	mov	r9, r0
   15774:	mov	r0, sl
   15778:	bl	15e08 <__assert_fail@plt+0x425c>
   1577c:	cmp	r9, #0
   15780:	bne	155e0 <__assert_fail@plt+0x3a34>
   15784:	mov	r9, #0
   15788:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1578c:	ldr	r3, [r6]
   15790:	mov	r0, r9
   15794:	cmp	r2, r3
   15798:	bne	158f0 <__assert_fail@plt+0x3d44>
   1579c:	sub	sp, fp, #32
   157a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157a4:	mov	r2, #5
   157a8:	ldr	r1, [pc, #356]	; 15914 <__assert_fail@plt+0x3d68>
   157ac:	ldr	r0, [pc, #344]	; 1590c <__assert_fail@plt+0x3d60>
   157b0:	bl	11828 <__dcgettext@plt>
   157b4:	ldr	r1, [r9]
   157b8:	bl	18828 <__assert_fail@plt+0x6c7c>
   157bc:	b	15680 <__assert_fail@plt+0x3ad4>
   157c0:	mov	r0, r7
   157c4:	bl	160e8 <__assert_fail@plt+0x453c>
   157c8:	b	156fc <__assert_fail@plt+0x3b50>
   157cc:	mov	r0, r5
   157d0:	bl	117f8 <basename@plt>
   157d4:	str	r0, [r9]
   157d8:	b	155ec <__assert_fail@plt+0x3a40>
   157dc:	mov	r0, sl
   157e0:	bl	15e08 <__assert_fail@plt+0x425c>
   157e4:	b	15784 <__assert_fail@plt+0x3bd8>
   157e8:	ldr	r0, [pc, #296]	; 15918 <__assert_fail@plt+0x3d6c>
   157ec:	bl	11960 <getenv@plt>
   157f0:	cmp	r0, #0
   157f4:	mov	r4, r0
   157f8:	str	r0, [fp, #-44]	; 0xffffffd4
   157fc:	beq	1580c <__assert_fail@plt+0x3c60>
   15800:	ldrb	r3, [r0]
   15804:	cmp	r3, #0
   15808:	bne	15838 <__assert_fail@plt+0x3c8c>
   1580c:	mov	r1, r5
   15810:	ldr	r0, [pc, #248]	; 15910 <__assert_fail@plt+0x3d64>
   15814:	bl	1548c <__assert_fail@plt+0x38e0>
   15818:	cmp	r0, #0
   1581c:	bne	155b4 <__assert_fail@plt+0x3a08>
   15820:	cmp	r7, #0
   15824:	beq	156d8 <__assert_fail@plt+0x3b2c>
   15828:	b	156ac <__assert_fail@plt+0x3b00>
   1582c:	mov	r0, sl
   15830:	bl	15e08 <__assert_fail@plt+0x425c>
   15834:	b	15788 <__assert_fail@plt+0x3bdc>
   15838:	bl	11a08 <strlen@plt>
   1583c:	str	sp, [fp, #-48]	; 0xffffffd0
   15840:	add	r1, r0, #8
   15844:	bic	r1, r1, #7
   15848:	add	r3, r0, #17
   1584c:	sub	sp, sp, r1
   15850:	mov	r2, r0
   15854:	bic	r3, r3, #7
   15858:	mov	r0, sp
   1585c:	mov	r1, r4
   15860:	sub	sp, sp, r3
   15864:	add	r2, r2, #1
   15868:	bl	11864 <memcpy@plt>
   1586c:	mov	r9, sp
   15870:	sub	r4, fp, #44	; 0x2c
   15874:	str	r0, [fp, #-44]	; 0xffffffd4
   15878:	ldr	r1, [pc, #156]	; 1591c <__assert_fail@plt+0x3d70>
   1587c:	mov	r0, r4
   15880:	bl	119a8 <strsep@plt>
   15884:	subs	sl, r0, #0
   15888:	beq	158e8 <__assert_fail@plt+0x3d3c>
   1588c:	mov	r1, sl
   15890:	mov	r0, r9
   15894:	bl	11b34 <__stpcpy@plt>
   15898:	ldr	r2, [pc, #128]	; 15920 <__assert_fail@plt+0x3d74>
   1589c:	mov	ip, r0
   158a0:	ldm	r2!, {r0, r1}
   158a4:	ldrh	r2, [r2]
   158a8:	str	r0, [ip]
   158ac:	str	r1, [ip, #4]
   158b0:	strh	r2, [ip, #8]
   158b4:	mov	r1, r5
   158b8:	mov	r0, r9
   158bc:	bl	1548c <__assert_fail@plt+0x38e0>
   158c0:	cmp	r0, #0
   158c4:	beq	158d0 <__assert_fail@plt+0x3d24>
   158c8:	ldr	sp, [fp, #-48]	; 0xffffffd0
   158cc:	b	155b4 <__assert_fail@plt+0x3a08>
   158d0:	mov	r0, sl
   158d4:	mov	r1, r5
   158d8:	bl	1548c <__assert_fail@plt+0x38e0>
   158dc:	cmp	r0, #0
   158e0:	beq	15878 <__assert_fail@plt+0x3ccc>
   158e4:	b	158c8 <__assert_fail@plt+0x3d1c>
   158e8:	ldr	sp, [fp, #-48]	; 0xffffffd0
   158ec:	b	1580c <__assert_fail@plt+0x3c60>
   158f0:	bl	118ac <__stack_chk_fail@plt>
   158f4:	strdeq	sl, [r2], -r8
   158f8:	andeq	r3, r1, r4, asr r7
   158fc:	andeq	r9, r1, r8, lsl #21
   15900:	andeq	fp, r2, sp, lsr #3
   15904:	strdeq	fp, [r2], -r8
   15908:	andeq	sl, r1, r0, lsl r0
   1590c:	andeq	sl, r2, r0, lsl #30
   15910:	strdeq	r9, [r1], -r4
   15914:	andeq	sl, r1, r4, lsr r0
   15918:	ldrdeq	r9, [r1], -r8
   1591c:	strdeq	r9, [r1], -r0
   15920:	andeq	r9, r1, r4, ror #31
   15924:	push	{r4, lr}
   15928:	sub	sp, sp, #8
   1592c:	ldr	r4, [pc, #56]	; 1596c <__assert_fail@plt+0x3dc0>
   15930:	mov	r3, sp
   15934:	add	r0, r0, #76	; 0x4c
   15938:	ldr	ip, [r4]
   1593c:	str	ip, [sp, #4]
   15940:	bl	1839c <__assert_fail@plt+0x67f0>
   15944:	ldr	r2, [sp, #4]
   15948:	ldr	r3, [r4]
   1594c:	cmp	r0, #0
   15950:	movlt	r0, #0
   15954:	ldrge	r0, [sp]
   15958:	cmp	r2, r3
   1595c:	bne	15968 <__assert_fail@plt+0x3dbc>
   15960:	add	sp, sp, #8
   15964:	pop	{r4, pc}
   15968:	bl	118ac <__stack_chk_fail@plt>
   1596c:	strdeq	sl, [r2], -r8
   15970:	push	{r4, lr}
   15974:	sub	sp, sp, #8
   15978:	ldr	r4, [pc, #56]	; 159b8 <__assert_fail@plt+0x3e0c>
   1597c:	mov	r3, sp
   15980:	add	r0, r0, #136	; 0x88
   15984:	ldr	ip, [r4]
   15988:	str	ip, [sp, #4]
   1598c:	bl	1839c <__assert_fail@plt+0x67f0>
   15990:	ldr	r2, [sp, #4]
   15994:	ldr	r3, [r4]
   15998:	cmp	r0, #0
   1599c:	movlt	r0, #0
   159a0:	ldrge	r0, [sp]
   159a4:	cmp	r2, r3
   159a8:	bne	159b4 <__assert_fail@plt+0x3e08>
   159ac:	add	sp, sp, #8
   159b0:	pop	{r4, pc}
   159b4:	bl	118ac <__stack_chk_fail@plt>
   159b8:	strdeq	sl, [r2], -r8
   159bc:	push	{r4, r5, r6, lr}
   159c0:	sub	sp, sp, #216	; 0xd8
   159c4:	ldr	r4, [pc, #384]	; 15b4c <__assert_fail@plt+0x3fa0>
   159c8:	mov	r6, r1
   159cc:	mov	r1, #0
   159d0:	ldr	r3, [r4]
   159d4:	str	r3, [sp, #212]	; 0xd4
   159d8:	bl	119cc <open@plt>
   159dc:	subs	r5, r0, #0
   159e0:	movlt	r0, #0
   159e4:	blt	15a1c <__assert_fail@plt+0x3e70>
   159e8:	add	r2, sp, #8
   159ec:	mov	r1, r5
   159f0:	mov	r0, #3
   159f4:	bl	1190c <__fxstat64@plt>
   159f8:	cmp	r0, #0
   159fc:	blt	15a10 <__assert_fail@plt+0x3e64>
   15a00:	ldr	r3, [sp, #24]
   15a04:	and	r3, r3, #61440	; 0xf000
   15a08:	cmp	r3, #32768	; 0x8000
   15a0c:	beq	15a34 <__assert_fail@plt+0x3e88>
   15a10:	mov	r0, r5
   15a14:	bl	11b94 <close@plt>
   15a18:	mov	r0, #0
   15a1c:	ldr	r2, [sp, #212]	; 0xd4
   15a20:	ldr	r3, [r4]
   15a24:	cmp	r2, r3
   15a28:	bne	15b48 <__assert_fail@plt+0x3f9c>
   15a2c:	add	sp, sp, #216	; 0xd8
   15a30:	pop	{r4, r5, r6, pc}
   15a34:	add	r0, sp, #112	; 0x70
   15a38:	bl	11ac8 <pipe@plt>
   15a3c:	cmp	r0, #0
   15a40:	blt	15a10 <__assert_fail@plt+0x3e64>
   15a44:	ldr	r3, [pc, #260]	; 15b50 <__assert_fail@plt+0x3fa4>
   15a48:	ldr	r2, [pc, #260]	; 15b54 <__assert_fail@plt+0x3fa8>
   15a4c:	str	r3, [sp, #124]	; 0x7c
   15a50:	mov	r3, #0
   15a54:	add	r0, sp, #136	; 0x88
   15a58:	str	r6, [sp, #120]	; 0x78
   15a5c:	strd	r2, [sp, #128]	; 0x80
   15a60:	bl	118e8 <posix_spawn_file_actions_init@plt>
   15a64:	cmp	r0, #0
   15a68:	bne	15b34 <__assert_fail@plt+0x3f88>
   15a6c:	mov	r2, #1
   15a70:	ldr	r1, [sp, #116]	; 0x74
   15a74:	add	r0, sp, #136	; 0x88
   15a78:	bl	117ec <posix_spawn_file_actions_adddup2@plt>
   15a7c:	cmp	r0, #0
   15a80:	bne	15b2c <__assert_fail@plt+0x3f80>
   15a84:	ldr	r1, [sp, #116]	; 0x74
   15a88:	add	r0, sp, #136	; 0x88
   15a8c:	bl	11930 <posix_spawn_file_actions_addclose@plt>
   15a90:	cmp	r0, #0
   15a94:	bne	15b2c <__assert_fail@plt+0x3f80>
   15a98:	ldr	r1, [sp, #112]	; 0x70
   15a9c:	add	r0, sp, #136	; 0x88
   15aa0:	bl	11930 <posix_spawn_file_actions_addclose@plt>
   15aa4:	subs	r2, r0, #0
   15aa8:	bne	15b2c <__assert_fail@plt+0x3f80>
   15aac:	mov	r1, r5
   15ab0:	add	r0, sp, #136	; 0x88
   15ab4:	bl	117ec <posix_spawn_file_actions_adddup2@plt>
   15ab8:	cmp	r0, #0
   15abc:	bne	15b2c <__assert_fail@plt+0x3f80>
   15ac0:	mov	r1, r5
   15ac4:	add	r0, sp, #136	; 0x88
   15ac8:	bl	11930 <posix_spawn_file_actions_addclose@plt>
   15acc:	cmp	r0, #0
   15ad0:	bne	15b2c <__assert_fail@plt+0x3f80>
   15ad4:	ldr	r1, [pc, #124]	; 15b58 <__assert_fail@plt+0x3fac>
   15ad8:	add	r2, sp, #120	; 0x78
   15adc:	mov	r3, #0
   15ae0:	ldr	r0, [r1]
   15ae4:	str	r2, [sp]
   15ae8:	str	r0, [sp, #4]
   15aec:	mov	r1, r6
   15af0:	mov	r0, r3
   15af4:	add	r2, sp, #136	; 0x88
   15af8:	bl	11a98 <posix_spawnp@plt>
   15afc:	cmp	r0, #0
   15b00:	bne	15b2c <__assert_fail@plt+0x3f80>
   15b04:	add	r0, sp, #136	; 0x88
   15b08:	bl	11af8 <posix_spawn_file_actions_destroy@plt>
   15b0c:	ldr	r0, [sp, #116]	; 0x74
   15b10:	bl	11b94 <close@plt>
   15b14:	mov	r0, r5
   15b18:	bl	11b94 <close@plt>
   15b1c:	ldr	r1, [pc, #56]	; 15b5c <__assert_fail@plt+0x3fb0>
   15b20:	ldr	r0, [sp, #112]	; 0x70
   15b24:	bl	11780 <fdopen@plt>
   15b28:	b	15a1c <__assert_fail@plt+0x3e70>
   15b2c:	add	r0, sp, #136	; 0x88
   15b30:	bl	11af8 <posix_spawn_file_actions_destroy@plt>
   15b34:	ldr	r0, [sp, #116]	; 0x74
   15b38:	bl	11b94 <close@plt>
   15b3c:	ldr	r0, [sp, #112]	; 0x70
   15b40:	bl	11b94 <close@plt>
   15b44:	b	15a10 <__assert_fail@plt+0x3e64>
   15b48:	bl	118ac <__stack_chk_fail@plt>
   15b4c:	strdeq	sl, [r2], -r8
   15b50:	strdeq	sl, [r1], -r0
   15b54:	strdeq	sl, [r1], -r4
   15b58:			; <UNDEFINED> instruction: 0x0002b1b4
   15b5c:	strdeq	sl, [r1], -r8
   15b60:	push	{r4, r5, r6, r7, r8, lr}
   15b64:	mov	r6, r0
   15b68:	bl	11954 <opendir@plt>
   15b6c:	subs	r5, r0, #0
   15b70:	beq	15c14 <__assert_fail@plt+0x4068>
   15b74:	mov	r0, #20
   15b78:	bl	1860c <__assert_fail@plt+0x6a60>
   15b7c:	mov	r4, r0
   15b80:	mov	r0, r6
   15b84:	str	r5, [r4]
   15b88:	bl	11a08 <strlen@plt>
   15b8c:	subs	r5, r0, #0
   15b90:	beq	15be8 <__assert_fail@plt+0x403c>
   15b94:	add	r3, r6, r5
   15b98:	add	r7, r5, #1
   15b9c:	ldrb	r3, [r3, #-1]
   15ba0:	cmp	r3, #47	; 0x2f
   15ba4:	beq	15bf0 <__assert_fail@plt+0x4044>
   15ba8:	add	r0, r5, #2
   15bac:	bl	1860c <__assert_fail@plt+0x6a60>
   15bb0:	mov	r1, r6
   15bb4:	mov	r2, r5
   15bb8:	mov	r8, r0
   15bbc:	str	r0, [r4, #4]
   15bc0:	bl	11864 <memcpy@plt>
   15bc4:	mov	r3, #47	; 0x2f
   15bc8:	strb	r3, [r8, r5]
   15bcc:	mov	r3, #0
   15bd0:	str	r7, [r4, #8]
   15bd4:	strb	r3, [r8, r7]
   15bd8:	str	r3, [r4, #12]
   15bdc:	str	r3, [r4, #16]
   15be0:	mov	r0, r4
   15be4:	pop	{r4, r5, r6, r7, r8, pc}
   15be8:	mov	r7, #1
   15bec:	b	15ba8 <__assert_fail@plt+0x3ffc>
   15bf0:	mov	r0, r7
   15bf4:	bl	1860c <__assert_fail@plt+0x6a60>
   15bf8:	mov	r1, r6
   15bfc:	mov	r2, r5
   15c00:	mov	r7, r5
   15c04:	str	r0, [r4, #4]
   15c08:	mov	r8, r0
   15c0c:	bl	11864 <memcpy@plt>
   15c10:	b	15bcc <__assert_fail@plt+0x4020>
   15c14:	bl	11a38 <__errno_location@plt>
   15c18:	mov	r2, #5
   15c1c:	ldr	r1, [pc, #36]	; 15c48 <__assert_fail@plt+0x409c>
   15c20:	mov	r4, r5
   15c24:	ldr	r7, [r0]
   15c28:	mov	r0, r5
   15c2c:	bl	11894 <dcgettext@plt>
   15c30:	mov	r3, r6
   15c34:	mov	r1, r7
   15c38:	mov	r2, r0
   15c3c:	mov	r0, #1
   15c40:	bl	188f0 <__assert_fail@plt+0x6d44>
   15c44:	b	15be0 <__assert_fail@plt+0x4034>
   15c48:	strdeq	sl, [r1], -ip
   15c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c50:	mov	r4, r0
   15c54:	ldr	sl, [pc, #416]	; 15dfc <__assert_fail@plt+0x4250>
   15c58:	ldr	r8, [pc, #416]	; 15e00 <__assert_fail@plt+0x4254>
   15c5c:	ldr	r9, [pc, #416]	; 15e04 <__assert_fail@plt+0x4258>
   15c60:	sub	sp, sp, #116	; 0x74
   15c64:	ldr	r3, [sl]
   15c68:	str	r3, [sp, #108]	; 0x6c
   15c6c:	ldr	r0, [r4]
   15c70:	bl	11b10 <readdir64@plt>
   15c74:	subs	r6, r0, #0
   15c78:	beq	15d44 <__assert_fail@plt+0x4198>
   15c7c:	add	r5, r6, #19
   15c80:	mov	r0, r5
   15c84:	mov	r1, r8
   15c88:	bl	117e0 <strcmp@plt>
   15c8c:	cmp	r0, #0
   15c90:	beq	15c6c <__assert_fail@plt+0x40c0>
   15c94:	mov	r1, r9
   15c98:	mov	r0, r5
   15c9c:	bl	117e0 <strcmp@plt>
   15ca0:	cmp	r0, #0
   15ca4:	beq	15c6c <__assert_fail@plt+0x40c0>
   15ca8:	mov	r0, r5
   15cac:	bl	11a08 <strlen@plt>
   15cb0:	ldr	fp, [r4, #8]
   15cb4:	ldr	r3, [r4, #16]
   15cb8:	add	fp, fp, #1
   15cbc:	add	fp, fp, r0
   15cc0:	cmp	r3, fp
   15cc4:	mov	r7, r0
   15cc8:	ldr	r0, [r4, #12]
   15ccc:	bcc	15d80 <__assert_fail@plt+0x41d4>
   15cd0:	ldr	r1, [r4, #4]
   15cd4:	bl	11b34 <__stpcpy@plt>
   15cd8:	mov	r1, r5
   15cdc:	bl	1193c <strcpy@plt>
   15ce0:	ldrb	r3, [r6, #18]
   15ce4:	ldr	r5, [r4, #12]
   15ce8:	ldr	r6, [r4, #8]
   15cec:	cmp	r3, #0
   15cf0:	cmpne	r3, #10
   15cf4:	lslne	r3, r3, #12
   15cf8:	beq	15d60 <__assert_fail@plt+0x41b4>
   15cfc:	and	r3, r3, #61440	; 0xf000
   15d00:	cmp	r3, #32768	; 0x8000
   15d04:	bne	15c6c <__assert_fail@plt+0x40c0>
   15d08:	cmp	r7, #3
   15d0c:	add	r6, r5, r6
   15d10:	bls	15d44 <__assert_fail@plt+0x4198>
   15d14:	sub	r3, r7, #3
   15d18:	add	r2, r6, r3
   15d1c:	ldrb	r3, [r6, r3]
   15d20:	cmp	r3, #46	; 0x2e
   15d24:	beq	15dd4 <__assert_fail@plt+0x4228>
   15d28:	cmp	r7, #4
   15d2c:	beq	15d44 <__assert_fail@plt+0x4198>
   15d30:	sub	r7, r7, #4
   15d34:	add	r2, r6, r7
   15d38:	ldrb	r3, [r6, r7]
   15d3c:	cmp	r3, #46	; 0x2e
   15d40:	beq	15da8 <__assert_fail@plt+0x41fc>
   15d44:	ldr	r2, [sp, #108]	; 0x6c
   15d48:	ldr	r3, [sl]
   15d4c:	mov	r0, r6
   15d50:	cmp	r2, r3
   15d54:	bne	15df8 <__assert_fail@plt+0x424c>
   15d58:	add	sp, sp, #116	; 0x74
   15d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d60:	mov	r2, sp
   15d64:	mov	r1, r5
   15d68:	mov	r0, #3
   15d6c:	bl	11b40 <__xstat64@plt>
   15d70:	cmp	r0, #0
   15d74:	blt	15c6c <__assert_fail@plt+0x40c0>
   15d78:	ldr	r3, [sp, #16]
   15d7c:	b	15cfc <__assert_fail@plt+0x4150>
   15d80:	bl	11840 <free@plt>
   15d84:	ldr	r3, [r4, #16]
   15d88:	lsl	r3, r3, #1
   15d8c:	cmp	r3, fp
   15d90:	movcs	fp, r3
   15d94:	mov	r0, fp
   15d98:	bl	1860c <__assert_fail@plt+0x6a60>
   15d9c:	str	fp, [r4, #16]
   15da0:	str	r0, [r4, #12]
   15da4:	b	15cd0 <__assert_fail@plt+0x4124>
   15da8:	ldrb	r3, [r2, #1]
   15dac:	add	r1, r2, #1
   15db0:	cmp	r3, #98	; 0x62
   15db4:	bne	15d44 <__assert_fail@plt+0x4198>
   15db8:	ldrb	r3, [r1, #1]!
   15dbc:	cmp	r3, #122	; 0x7a
   15dc0:	bne	15d44 <__assert_fail@plt+0x4198>
   15dc4:	ldrb	r3, [r1, #1]
   15dc8:	cmp	r3, #50	; 0x32
   15dcc:	bne	15d44 <__assert_fail@plt+0x4198>
   15dd0:	b	15dec <__assert_fail@plt+0x4240>
   15dd4:	ldrb	r3, [r2, #1]
   15dd8:	cmp	r3, #103	; 0x67
   15ddc:	bne	15d28 <__assert_fail@plt+0x417c>
   15de0:	ldrb	r3, [r2, #2]
   15de4:	cmp	r3, #122	; 0x7a
   15de8:	bne	15d28 <__assert_fail@plt+0x417c>
   15dec:	mov	r3, #0
   15df0:	strb	r3, [r2]
   15df4:	b	15d44 <__assert_fail@plt+0x4198>
   15df8:	bl	118ac <__stack_chk_fail@plt>
   15dfc:	strdeq	sl, [r2], -r8
   15e00:	andeq	r9, r1, ip, lsr #7
   15e04:	andeq	sl, r1, r8, ror #3
   15e08:	push	{r4, r5, r6, lr}
   15e0c:	mov	r4, r0
   15e10:	ldr	r0, [r0, #4]
   15e14:	ldr	r5, [r4]
   15e18:	bl	11840 <free@plt>
   15e1c:	ldr	r0, [r4, #12]
   15e20:	bl	11840 <free@plt>
   15e24:	mov	r0, r4
   15e28:	bl	11840 <free@plt>
   15e2c:	mov	r0, r5
   15e30:	pop	{r4, r5, r6, lr}
   15e34:	b	11ba0 <closedir@plt>
   15e38:	push	{r4, r5, r6, r7, fp, lr}
   15e3c:	add	fp, sp, #20
   15e40:	ldr	r5, [pc, #260]	; 15f4c <__assert_fail@plt+0x43a0>
   15e44:	sub	sp, sp, #8
   15e48:	ldr	r3, [r5]
   15e4c:	mov	r6, r1
   15e50:	str	r3, [fp, #-24]	; 0xffffffe8
   15e54:	mov	r7, r0
   15e58:	bl	11a08 <strlen@plt>
   15e5c:	mov	r4, r0
   15e60:	mov	r0, r6
   15e64:	bl	11a08 <strlen@plt>
   15e68:	cmp	r4, #0
   15e6c:	beq	15e80 <__assert_fail@plt+0x42d4>
   15e70:	add	r3, r7, r4
   15e74:	ldrb	r3, [r3, #-1]
   15e78:	cmp	r3, #47	; 0x2f
   15e7c:	beq	15f24 <__assert_fail@plt+0x4378>
   15e80:	add	r4, r4, r0
   15e84:	add	r4, r4, #13
   15e88:	bic	r4, r4, #7
   15e8c:	sub	sp, sp, r4
   15e90:	mov	r4, sp
   15e94:	mov	r1, r7
   15e98:	mov	r0, r4
   15e9c:	bl	11b34 <__stpcpy@plt>
   15ea0:	mov	r3, #47	; 0x2f
   15ea4:	strb	r3, [r0], #1
   15ea8:	mov	r1, r6
   15eac:	bl	11b34 <__stpcpy@plt>
   15eb0:	ldr	r1, [pc, #152]	; 15f50 <__assert_fail@plt+0x43a4>
   15eb4:	mov	r6, r0
   15eb8:	mov	r0, r4
   15ebc:	bl	11810 <fopen@plt>
   15ec0:	cmp	r0, #0
   15ec4:	beq	15ee0 <__assert_fail@plt+0x4334>
   15ec8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15ecc:	ldr	r3, [r5]
   15ed0:	cmp	r2, r3
   15ed4:	bne	15f48 <__assert_fail@plt+0x439c>
   15ed8:	sub	sp, fp, #20
   15edc:	pop	{r4, r5, r6, r7, fp, pc}
   15ee0:	ldr	r3, [pc, #108]	; 15f54 <__assert_fail@plt+0x43a8>
   15ee4:	ldr	r1, [pc, #108]	; 15f58 <__assert_fail@plt+0x43ac>
   15ee8:	ldr	r0, [r3]
   15eec:	str	r0, [r6]
   15ef0:	mov	r0, r4
   15ef4:	bl	159bc <__assert_fail@plt+0x3e10>
   15ef8:	cmp	r0, #0
   15efc:	bne	15ec8 <__assert_fail@plt+0x431c>
   15f00:	ldr	r3, [pc, #84]	; 15f5c <__assert_fail@plt+0x43b0>
   15f04:	ldr	r1, [pc, #84]	; 15f60 <__assert_fail@plt+0x43b4>
   15f08:	ldrb	r2, [r3, #4]
   15f0c:	ldr	r0, [r3]
   15f10:	strb	r2, [r6, #4]
   15f14:	str	r0, [r6]
   15f18:	mov	r0, r4
   15f1c:	bl	159bc <__assert_fail@plt+0x3e10>
   15f20:	b	15ec8 <__assert_fail@plt+0x431c>
   15f24:	add	r4, r4, r0
   15f28:	add	r4, r4, #12
   15f2c:	bic	r4, r4, #7
   15f30:	sub	sp, sp, r4
   15f34:	mov	r4, sp
   15f38:	mov	r1, r7
   15f3c:	mov	r0, r4
   15f40:	bl	11b34 <__stpcpy@plt>
   15f44:	b	15ea8 <__assert_fail@plt+0x42fc>
   15f48:	bl	118ac <__stack_chk_fail@plt>
   15f4c:	strdeq	sl, [r2], -r8
   15f50:	andeq	sl, r1, r4, lsr r1
   15f54:	andeq	sl, r1, r8, lsr #2
   15f58:	andeq	sl, r1, r8, lsr r1
   15f5c:	andeq	sl, r1, ip, lsr #2
   15f60:	andeq	sl, r1, r0, asr #2
   15f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f68:	sub	sp, sp, #8192	; 0x2000
   15f6c:	ldr	fp, [pc, #352]	; 160d4 <__assert_fail@plt+0x4528>
   15f70:	sub	sp, sp, #20
   15f74:	add	r2, sp, #8192	; 0x2000
   15f78:	ldr	r3, [fp]
   15f7c:	add	r2, r2, #12
   15f80:	str	r3, [r2]
   15f84:	bl	15e38 <__assert_fail@plt+0x428c>
   15f88:	subs	r4, r0, #0
   15f8c:	beq	160c8 <__assert_fail@plt+0x451c>
   15f90:	mov	r6, #0
   15f94:	ldr	r8, [pc, #316]	; 160d8 <__assert_fail@plt+0x452c>
   15f98:	ldr	r9, [pc, #316]	; 160dc <__assert_fail@plt+0x4530>
   15f9c:	ldr	sl, [pc, #316]	; 160e0 <__assert_fail@plt+0x4534>
   15fa0:	mov	r7, r6
   15fa4:	mov	r0, r4
   15fa8:	bl	119f0 <feof@plt>
   15fac:	cmp	r0, #0
   15fb0:	bne	1605c <__assert_fail@plt+0x44b0>
   15fb4:	add	r5, sp, #16
   15fb8:	mov	r1, r8
   15fbc:	str	r0, [r5, #-8]!
   15fc0:	mov	r0, r4
   15fc4:	mov	r2, r5
   15fc8:	bl	11a8c <fscanf@plt>
   15fcc:	cmp	r0, #1
   15fd0:	beq	1609c <__assert_fail@plt+0x44f0>
   15fd4:	mov	r2, r5
   15fd8:	mov	r1, r9
   15fdc:	mov	r0, r4
   15fe0:	bl	11a8c <fscanf@plt>
   15fe4:	cmp	r0, #1
   15fe8:	beq	1609c <__assert_fail@plt+0x44f0>
   15fec:	add	r3, sp, #12
   15ff0:	mov	r0, r3
   15ff4:	mov	r2, r4
   15ff8:	mov	r1, #8192	; 0x2000
   15ffc:	str	r3, [sp, #4]
   16000:	bl	1184c <fgets@plt>
   16004:	cmp	r0, #0
   16008:	beq	15fa4 <__assert_fail@plt+0x43f8>
   1600c:	mov	r1, sl
   16010:	ldr	r0, [sp, #4]
   16014:	bl	11798 <strstr@plt>
   16018:	cmp	r0, #0
   1601c:	bne	1605c <__assert_fail@plt+0x44b0>
   16020:	mov	r1, #10
   16024:	ldr	r0, [sp, #4]
   16028:	bl	11a20 <strchr@plt>
   1602c:	cmp	r0, #0
   16030:	bne	15fa4 <__assert_fail@plt+0x43f8>
   16034:	mov	r2, r4
   16038:	mov	r1, #8192	; 0x2000
   1603c:	ldr	r0, [sp, #4]
   16040:	bl	1184c <fgets@plt>
   16044:	cmp	r0, #0
   16048:	bne	16020 <__assert_fail@plt+0x4474>
   1604c:	mov	r0, r4
   16050:	bl	119f0 <feof@plt>
   16054:	cmp	r0, #0
   16058:	beq	15fb4 <__assert_fail@plt+0x4408>
   1605c:	mov	r0, r4
   16060:	bl	11abc <fclose@plt>
   16064:	cmp	r6, #0
   16068:	beq	160c8 <__assert_fail@plt+0x451c>
   1606c:	mov	r3, #0
   16070:	str	r3, [r7, r6, lsl #2]
   16074:	add	r3, sp, #8192	; 0x2000
   16078:	add	r3, r3, #12
   1607c:	ldr	r2, [r3]
   16080:	ldr	r3, [fp]
   16084:	mov	r0, r7
   16088:	cmp	r2, r3
   1608c:	bne	160d0 <__assert_fail@plt+0x4524>
   16090:	add	sp, sp, #8192	; 0x2000
   16094:	add	sp, sp, #20
   16098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1609c:	add	r5, r6, #2
   160a0:	mov	r0, r7
   160a4:	lsl	r5, r5, #2
   160a8:	mov	r1, r5
   160ac:	bl	1864c <__assert_fail@plt+0x6aa0>
   160b0:	ldr	r3, [sp, #8]
   160b4:	add	r6, r6, #1
   160b8:	add	r5, r0, r5
   160bc:	mov	r7, r0
   160c0:	str	r3, [r5, #-8]
   160c4:	b	15fec <__assert_fail@plt+0x4440>
   160c8:	ldr	r7, [pc, #20]	; 160e4 <__assert_fail@plt+0x4538>
   160cc:	b	16074 <__assert_fail@plt+0x44c8>
   160d0:	bl	118ac <__stack_chk_fail@plt>
   160d4:	strdeq	sl, [r2], -r8
   160d8:	andeq	sl, r1, r8, asr #2
   160dc:	andeq	sl, r1, r0, ror #2
   160e0:	andeq	r9, r1, r4, lsr fp
   160e4:	strdeq	fp, [r2], -r0
   160e8:	ldr	r3, [pc, #56]	; 16128 <__assert_fail@plt+0x457c>
   160ec:	cmp	r0, r3
   160f0:	bxeq	lr
   160f4:	push	{r4, r5, r6, lr}
   160f8:	mov	r5, r0
   160fc:	ldr	r0, [r0]
   16100:	cmp	r0, #0
   16104:	beq	1611c <__assert_fail@plt+0x4570>
   16108:	mov	r4, r5
   1610c:	bl	11840 <free@plt>
   16110:	ldr	r0, [r4, #4]!
   16114:	cmp	r0, #0
   16118:	bne	1610c <__assert_fail@plt+0x4560>
   1611c:	mov	r0, r5
   16120:	pop	{r4, r5, r6, lr}
   16124:	b	11840 <free@plt>
   16128:	strdeq	fp, [r2], -r0
   1612c:	push	{r1, r2, r3}
   16130:	push	{r4, r5, r6, r7, lr}
   16134:	sub	sp, sp, #24
   16138:	ldr	r4, [pc, #144]	; 161d0 <__assert_fail@plt+0x4624>
   1613c:	add	r3, sp, #48	; 0x30
   16140:	ldr	r6, [sp, #44]	; 0x2c
   16144:	ldr	r2, [r4]
   16148:	str	r3, [sp, #16]
   1614c:	str	r2, [sp, #20]
   16150:	mov	r5, r0
   16154:	bl	18680 <__assert_fail@plt+0x6ad4>
   16158:	mov	r1, r6
   1615c:	ldr	r2, [sp, #16]
   16160:	mov	r7, r0
   16164:	add	r0, sp, #12
   16168:	bl	117b0 <vasprintf@plt>
   1616c:	cmn	r0, #1
   16170:	beq	161cc <__assert_fail@plt+0x4620>
   16174:	mov	r0, r7
   16178:	bl	18724 <__assert_fail@plt+0x6b78>
   1617c:	ldr	r2, [sp, #12]
   16180:	ldr	r3, [pc, #76]	; 161d4 <__assert_fail@plt+0x4628>
   16184:	mov	r1, #0
   16188:	str	r2, [sp, #4]
   1618c:	str	r3, [sp]
   16190:	mov	r0, r1
   16194:	ldr	r3, [r5, #20]
   16198:	ldr	r2, [r5, #4]
   1619c:	bl	11984 <error_at_line@plt>
   161a0:	ldr	r0, [sp, #12]
   161a4:	bl	11840 <free@plt>
   161a8:	ldr	r2, [sp, #20]
   161ac:	ldr	r3, [r4]
   161b0:	cmp	r2, r3
   161b4:	bne	161c8 <__assert_fail@plt+0x461c>
   161b8:	add	sp, sp, #24
   161bc:	pop	{r4, r5, r6, r7, lr}
   161c0:	add	sp, sp, #12
   161c4:	bx	lr
   161c8:	bl	118ac <__stack_chk_fail@plt>
   161cc:	bl	11b70 <abort@plt>
   161d0:	strdeq	sl, [r2], -r8
   161d4:	andeq	r9, r1, r8, lsl #23
   161d8:	push	{r4, r5, r6, r7, r8, lr}
   161dc:	mov	r5, r0
   161e0:	mov	r0, #68	; 0x44
   161e4:	mov	r7, r1
   161e8:	mov	r6, r2
   161ec:	bl	1860c <__assert_fail@plt+0x6a60>
   161f0:	mov	r4, r0
   161f4:	mov	r0, r7
   161f8:	str	r5, [r4]
   161fc:	bl	18594 <__assert_fail@plt+0x69e8>
   16200:	ldr	r3, [pc, #180]	; 162bc <__assert_fail@plt+0x4710>
   16204:	mov	r1, r4
   16208:	mov	r5, #0
   1620c:	mov	r2, #1
   16210:	strh	r3, [r4, #28]
   16214:	ldr	r3, [r1], #12
   16218:	str	r2, [r4, #20]
   1621c:	str	r2, [r4, #56]	; 0x38
   16220:	str	r5, [r4, #8]
   16224:	str	r5, [r4, #12]
   16228:	str	r5, [r4, #24]
   1622c:	str	r5, [r4, #60]	; 0x3c
   16230:	mov	r2, #10
   16234:	str	r0, [r4, #4]
   16238:	add	r0, r4, #8
   1623c:	bl	11b28 <getdelim@plt>
   16240:	cmp	r0, #0
   16244:	blt	1628c <__assert_fail@plt+0x46e0>
   16248:	cmp	r0, #1
   1624c:	ldr	r3, [r4, #8]
   16250:	ble	16264 <__assert_fail@plt+0x46b8>
   16254:	add	r2, r3, r0
   16258:	ldrb	r1, [r2, #-2]
   1625c:	cmp	r1, #92	; 0x5c
   16260:	beq	1627c <__assert_fail@plt+0x46d0>
   16264:	mov	r2, #0
   16268:	strb	r2, [r3, r0]
   1626c:	str	r0, [r4, #16]
   16270:	str	r6, [r4, #64]	; 0x40
   16274:	mov	r0, r4
   16278:	pop	{r4, r5, r6, r7, r8, pc}
   1627c:	ldrb	r2, [r2, #-1]
   16280:	cmp	r2, #10
   16284:	subeq	r0, r0, #2
   16288:	b	16264 <__assert_fail@plt+0x46b8>
   1628c:	bl	11a38 <__errno_location@plt>
   16290:	mov	r6, r0
   16294:	ldr	r0, [r4]
   16298:	ldr	r7, [r6]
   1629c:	bl	11abc <fclose@plt>
   162a0:	ldr	r0, [r4, #4]
   162a4:	bl	11840 <free@plt>
   162a8:	mov	r0, r4
   162ac:	bl	11840 <free@plt>
   162b0:	mov	r4, r5
   162b4:	str	r7, [r6]
   162b8:	b	16274 <__assert_fail@plt+0x46c8>
   162bc:	andeq	r5, r0, r3, lsr #24
   162c0:	push	{r4, r5, r6, lr}
   162c4:	subs	r4, r0, #0
   162c8:	mov	r5, r1
   162cc:	beq	162f4 <__assert_fail@plt+0x4748>
   162d0:	ldr	r1, [pc, #88]	; 16330 <__assert_fail@plt+0x4784>
   162d4:	bl	117e0 <strcmp@plt>
   162d8:	cmp	r0, #0
   162dc:	beq	162f4 <__assert_fail@plt+0x4748>
   162e0:	ldr	r1, [pc, #76]	; 16334 <__assert_fail@plt+0x4788>
   162e4:	mov	r0, r4
   162e8:	bl	117e0 <strcmp@plt>
   162ec:	cmp	r0, #0
   162f0:	bne	1630c <__assert_fail@plt+0x4760>
   162f4:	ldr	r3, [pc, #60]	; 16338 <__assert_fail@plt+0x478c>
   162f8:	mov	r2, r5
   162fc:	ldr	r1, [pc, #56]	; 1633c <__assert_fail@plt+0x4790>
   16300:	ldr	r0, [r3]
   16304:	pop	{r4, r5, r6, lr}
   16308:	b	161d8 <__assert_fail@plt+0x462c>
   1630c:	ldr	r1, [pc, #44]	; 16340 <__assert_fail@plt+0x4794>
   16310:	mov	r0, r4
   16314:	bl	11810 <fopen@plt>
   16318:	cmp	r0, #0
   1631c:	popeq	{r4, r5, r6, pc}
   16320:	mov	r2, r5
   16324:	mov	r1, r4
   16328:	pop	{r4, r5, r6, lr}
   1632c:	b	161d8 <__assert_fail@plt+0x462c>
   16330:	andeq	r8, r1, r0, asr #31
   16334:	andeq	sl, r1, r0, ror r1
   16338:	andeq	fp, r2, r0, asr #3
   1633c:	andeq	sl, r1, ip, ror r1
   16340:	andeq	sl, r1, r4, lsr r1
   16344:	mov	r3, #0
   16348:	str	r3, [r0, #16]
   1634c:	mov	r0, r3
   16350:	bx	lr
   16354:	push	{r4, lr}
   16358:	mov	r4, r0
   1635c:	ldr	r0, [r0]
   16360:	bl	11abc <fclose@plt>
   16364:	ldr	r0, [r4, #8]
   16368:	bl	11840 <free@plt>
   1636c:	mov	r0, r4
   16370:	pop	{r4, lr}
   16374:	b	11840 <free@plt>
   16378:	mov	r1, r0
   1637c:	push	{r4, lr}
   16380:	mov	r2, #10
   16384:	ldr	r3, [r1], #12
   16388:	mov	r4, r0
   1638c:	add	r0, r0, #8
   16390:	bl	11b28 <getdelim@plt>
   16394:	subs	r3, r0, #0
   16398:	blt	163f0 <__assert_fail@plt+0x4844>
   1639c:	ldr	r2, [r4, #20]
   163a0:	cmp	r3, #1
   163a4:	add	r2, r2, #1
   163a8:	str	r2, [r4, #20]
   163ac:	ldr	r1, [r4, #8]
   163b0:	ble	163c8 <__assert_fail@plt+0x481c>
   163b4:	add	r2, r1, r3
   163b8:	ldrb	r0, [r4, #29]
   163bc:	ldrb	ip, [r2, #-2]
   163c0:	cmp	ip, r0
   163c4:	beq	163e0 <__assert_fail@plt+0x4834>
   163c8:	mov	r2, #0
   163cc:	strb	r2, [r1, r3]
   163d0:	mov	r0, r2
   163d4:	str	r2, [r4, #24]
   163d8:	str	r3, [r4, #16]
   163dc:	pop	{r4, pc}
   163e0:	ldrb	r2, [r2, #-1]
   163e4:	cmp	r2, #10
   163e8:	subeq	r3, r3, #2
   163ec:	b	163c8 <__assert_fail@plt+0x481c>
   163f0:	mvn	r0, #0
   163f4:	pop	{r4, pc}
   163f8:	cmp	r1, #0
   163fc:	push	{r4, r5, r6, lr}
   16400:	mov	r4, r0
   16404:	beq	16494 <__assert_fail@plt+0x48e8>
   16408:	bl	119d8 <__ctype_b_loc@plt>
   1640c:	ldr	ip, [r4, #8]
   16410:	ldr	r2, [r4, #24]
   16414:	mov	r5, r0
   16418:	ldr	r0, [r0]
   1641c:	ldrb	r3, [ip, r2]
   16420:	add	r2, r2, #1
   16424:	lsl	r1, r3, #1
   16428:	ldrh	r1, [r0, r1]
   1642c:	tst	r1, #8192	; 0x2000
   16430:	beq	164b8 <__assert_fail@plt+0x490c>
   16434:	cmp	r3, #10
   16438:	beq	16494 <__assert_fail@plt+0x48e8>
   1643c:	ldrb	r1, [r4, #28]
   16440:	cmp	r1, r3
   16444:	beq	164c0 <__assert_fail@plt+0x4914>
   16448:	cmp	r3, #0
   1644c:	strne	r2, [r4, #24]
   16450:	bne	1641c <__assert_fail@plt+0x4870>
   16454:	mov	r0, r4
   16458:	bl	16378 <__assert_fail@plt+0x47cc>
   1645c:	cmp	r0, #0
   16460:	poplt	{r4, r5, r6, pc}
   16464:	ldr	r0, [r5]
   16468:	ldr	ip, [r4, #8]
   1646c:	ldr	r2, [r4, #24]
   16470:	b	1641c <__assert_fail@plt+0x4870>
   16474:	ldr	r3, [r4, #8]
   16478:	add	r3, r3, r2
   1647c:	ldrb	r3, [r3, #-1]
   16480:	cmp	r3, #10
   16484:	beq	164a4 <__assert_fail@plt+0x48f8>
   16488:	bl	16378 <__assert_fail@plt+0x47cc>
   1648c:	cmp	r0, #0
   16490:	blt	164ac <__assert_fail@plt+0x4900>
   16494:	ldr	r2, [r4, #16]
   16498:	mov	r0, r4
   1649c:	cmp	r2, #0
   164a0:	bne	16474 <__assert_fail@plt+0x48c8>
   164a4:	str	r2, [r4, #24]
   164a8:	pop	{r4, r5, r6, pc}
   164ac:	ldr	r2, [r4, #16]
   164b0:	str	r2, [r4, #24]
   164b4:	pop	{r4, r5, r6, pc}
   164b8:	cmp	r3, #10
   164bc:	beq	16494 <__assert_fail@plt+0x48e8>
   164c0:	ldr	r0, [r4]
   164c4:	bl	119f0 <feof@plt>
   164c8:	cmp	r0, #0
   164cc:	bne	16494 <__assert_fail@plt+0x48e8>
   164d0:	ldr	r1, [r4, #8]
   164d4:	ldr	r2, [r4, #24]
   164d8:	ldrb	r3, [r4, #28]
   164dc:	ldrb	r2, [r1, r2]
   164e0:	cmp	r2, r3
   164e4:	beq	16494 <__assert_fail@plt+0x48e8>
   164e8:	mov	r2, #5
   164ec:	ldr	r1, [pc, #20]	; 16508 <__assert_fail@plt+0x495c>
   164f0:	ldr	r0, [pc, #20]	; 1650c <__assert_fail@plt+0x4960>
   164f4:	bl	11828 <__dcgettext@plt>
   164f8:	mov	r1, r0
   164fc:	mov	r0, r4
   16500:	bl	1612c <__assert_fail@plt+0x4580>
   16504:	b	16494 <__assert_fail@plt+0x48e8>
   16508:	andeq	sl, r1, r4, lsl #3
   1650c:	andeq	sl, r2, r0, lsl #30
   16510:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16514:	sub	sp, sp, #60	; 0x3c
   16518:	mov	r4, r0
   1651c:	stmib	sp, {r1, r3}
   16520:	ldr	r3, [pc, #3964]	; 174a4 <__assert_fail@plt+0x58f8>
   16524:	ldr	r6, [r0, #24]
   16528:	ldr	sl, [r0, #16]
   1652c:	ldr	r3, [r3]
   16530:	str	r3, [sp, #52]	; 0x34
   16534:	b	16578 <__assert_fail@plt+0x49cc>
   16538:	ldr	r8, [r4, #8]
   1653c:	ldrb	r3, [r8, r6]
   16540:	cmp	r3, #26
   16544:	beq	16588 <__assert_fail@plt+0x49dc>
   16548:	add	r9, r6, #1
   1654c:	str	r9, [r4, #24]
   16550:	ldrb	r7, [r8, r6]
   16554:	cmp	r7, #10
   16558:	beq	165d8 <__assert_fail@plt+0x4a2c>
   1655c:	bl	119d8 <__ctype_b_loc@plt>
   16560:	lsl	r2, r7, #1
   16564:	ldr	r3, [r0]
   16568:	ldrh	r2, [r3, r2]
   1656c:	ands	r2, r2, #8192	; 0x2000
   16570:	beq	165e8 <__assert_fail@plt+0x4a3c>
   16574:	mov	r6, r9
   16578:	cmp	r6, sl
   1657c:	bne	16538 <__assert_fail@plt+0x498c>
   16580:	cmp	r6, #0
   16584:	bne	165b4 <__assert_fail@plt+0x4a08>
   16588:	mov	fp, r4
   1658c:	mov	r3, #1
   16590:	str	r3, [fp, #32]!
   16594:	ldr	r3, [pc, #3848]	; 174a4 <__assert_fail@plt+0x58f8>
   16598:	ldr	r2, [sp, #52]	; 0x34
   1659c:	mov	r0, fp
   165a0:	ldr	r3, [r3]
   165a4:	cmp	r2, r3
   165a8:	bne	1694c <__assert_fail@plt+0x4da0>
   165ac:	add	sp, sp, #60	; 0x3c
   165b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165b4:	mov	r0, r4
   165b8:	bl	16378 <__assert_fail@plt+0x47cc>
   165bc:	cmp	r0, #0
   165c0:	blt	16588 <__assert_fail@plt+0x49dc>
   165c4:	ldr	sl, [r4, #16]
   165c8:	cmp	sl, #0
   165cc:	beq	16588 <__assert_fail@plt+0x49dc>
   165d0:	ldr	r6, [r4, #24]
   165d4:	b	16538 <__assert_fail@plt+0x498c>
   165d8:	mov	fp, r4
   165dc:	mov	r3, #2
   165e0:	str	r3, [fp, #32]!
   165e4:	b	16594 <__assert_fail@plt+0x49e8>
   165e8:	ldrb	r1, [r4, #28]
   165ec:	cmp	r1, r7
   165f0:	bne	16628 <__assert_fail@plt+0x4a7c>
   165f4:	add	r8, r8, sl
   165f8:	mov	r6, sl
   165fc:	ldrb	r3, [r8, #-1]
   16600:	cmp	r3, #10
   16604:	strne	sl, [r4, #24]
   16608:	bne	16578 <__assert_fail@plt+0x49cc>
   1660c:	mov	r1, r2
   16610:	mov	r0, r4
   16614:	mov	fp, r4
   16618:	bl	163f8 <__assert_fail@plt+0x484c>
   1661c:	mov	r3, #2
   16620:	str	r3, [fp, #32]!
   16624:	b	16594 <__assert_fail@plt+0x49e8>
   16628:	mov	r1, r2
   1662c:	ldrb	r2, [r4, #29]
   16630:	mov	r5, r0
   16634:	add	fp, r4, #32
   16638:	cmp	r2, r7
   1663c:	beq	16be0 <__assert_fail@plt+0x5034>
   16640:	cmp	r7, #46	; 0x2e
   16644:	beq	166c4 <__assert_fail@plt+0x4b18>
   16648:	sub	r2, r7, #34	; 0x22
   1664c:	cmp	r2, #26
   16650:	ldrls	pc, [pc, r2, lsl #2]
   16654:	b	16734 <__assert_fail@plt+0x4b88>
   16658:	andeq	r7, r1, r4, lsr r1
   1665c:	andeq	r6, r1, r4, lsr r7
   16660:	andeq	r6, r1, r4, lsr r7
   16664:	andeq	r6, r1, r4, lsr r7
   16668:	andeq	r6, r1, r4, lsr r7
   1666c:	andeq	r6, r1, r4, lsr r7
   16670:	andeq	r7, r1, r8, lsr #2
   16674:	andeq	r7, r1, ip, lsl r1
   16678:	andeq	r6, r1, r4, lsr r7
   1667c:	andeq	r6, r1, r4, lsr r7
   16680:	andeq	r7, r1, ip, asr lr
   16684:	andeq	r7, r1, r8, ror #27
   16688:	andeq	r6, r1, r4, lsr r7
   1668c:	andeq	r6, r1, r4, lsr r7
   16690:	andeq	r7, r1, ip, lsl #9
   16694:	andeq	r7, r1, ip, lsl #9
   16698:	andeq	r7, r1, ip, lsl #9
   1669c:	andeq	r7, r1, ip, lsl #9
   166a0:	andeq	r7, r1, ip, lsl #9
   166a4:	andeq	r7, r1, ip, lsl #9
   166a8:	andeq	r7, r1, ip, lsl #9
   166ac:	andeq	r7, r1, ip, lsl #9
   166b0:	andeq	r7, r1, ip, lsl #9
   166b4:	andeq	r7, r1, ip, lsl #9
   166b8:	andeq	r6, r1, r4, lsr r7
   166bc:	andeq	r7, r1, r0, lsl #9
   166c0:	andeq	r6, r1, r0, asr r9
   166c4:	add	r6, r8, r9
   166c8:	mov	r0, r6
   166cc:	mov	r2, #10
   166d0:	ldr	r1, [pc, #3536]	; 174a8 <__assert_fail@plt+0x58fc>
   166d4:	bl	11b64 <strncmp@plt>
   166d8:	cmp	r0, #0
   166dc:	beq	1778c <__assert_fail@plt+0x5be0>
   166e0:	mov	r2, #3
   166e4:	ldr	r1, [pc, #3520]	; 174ac <__assert_fail@plt+0x5900>
   166e8:	mov	r0, r6
   166ec:	bl	11b64 <strncmp@plt>
   166f0:	cmp	r0, #0
   166f4:	beq	176a4 <__assert_fail@plt+0x5af8>
   166f8:	mov	r2, #2
   166fc:	ldr	r1, [pc, #3500]	; 174b0 <__assert_fail@plt+0x5904>
   16700:	mov	r0, r6
   16704:	bl	11b64 <strncmp@plt>
   16708:	cmp	r0, #0
   1670c:	beq	175e0 <__assert_fail@plt+0x5a34>
   16710:	mov	r2, #6
   16714:	ldr	r1, [pc, #3480]	; 174b4 <__assert_fail@plt+0x5908>
   16718:	mov	r0, r6
   1671c:	bl	11b64 <strncmp@plt>
   16720:	cmp	r0, #0
   16724:	beq	17580 <__assert_fail@plt+0x59d4>
   16728:	ldrb	r3, [r6]
   1672c:	cmp	r3, #46	; 0x2e
   16730:	beq	171e8 <__assert_fail@plt+0x563c>
   16734:	mov	r0, #56	; 0x38
   16738:	bl	1860c <__assert_fail@plt+0x6a60>
   1673c:	ldr	r2, [r4, #24]
   16740:	ldr	r3, [r4, #8]
   16744:	mov	r6, #1
   16748:	add	r3, r3, r2
   1674c:	mov	r1, #56	; 0x38
   16750:	ldrb	r3, [r3, #-1]
   16754:	mov	r7, r6
   16758:	str	r1, [sp, #4]
   1675c:	ldr	sl, [r4, #16]
   16760:	mov	r6, r5
   16764:	strb	r3, [r0]
   16768:	mov	r9, r0
   1676c:	b	167dc <__assert_fail@plt+0x4c30>
   16770:	ldr	r0, [r4, #8]
   16774:	ldrb	r3, [r0, r2]
   16778:	cmp	r3, #26
   1677c:	beq	167f0 <__assert_fail@plt+0x4c44>
   16780:	add	r3, r2, #1
   16784:	str	r3, [r4, #24]
   16788:	ldrb	r8, [r0, r2]
   1678c:	mov	ip, r8
   16790:	lsl	r2, r8, #1
   16794:	ldrh	r2, [r5, r2]
   16798:	tst	r2, #8192	; 0x2000
   1679c:	bne	17dcc <__assert_fail@plt+0x6220>
   167a0:	sub	r2, r8, #59	; 0x3b
   167a4:	cmp	r8, #34	; 0x22
   167a8:	cmpne	r2, #1
   167ac:	bls	17dcc <__assert_fail@plt+0x6220>
   167b0:	cmp	r8, #44	; 0x2c
   167b4:	beq	17dcc <__assert_fail@plt+0x6220>
   167b8:	ldrb	r2, [r4, #29]
   167bc:	cmp	r2, r8
   167c0:	beq	16844 <__assert_fail@plt+0x4c98>
   167c4:	ldr	r3, [sp, #4]
   167c8:	cmp	r7, r3
   167cc:	beq	168b4 <__assert_fail@plt+0x4d08>
   167d0:	ldr	r2, [r4, #24]
   167d4:	strb	r8, [r9, r7]
   167d8:	add	r7, r7, #1
   167dc:	cmp	sl, r2
   167e0:	ldr	r5, [r6]
   167e4:	bne	16770 <__assert_fail@plt+0x4bc4>
   167e8:	cmp	sl, #0
   167ec:	bne	168ec <__assert_fail@plt+0x4d40>
   167f0:	mov	r6, r7
   167f4:	mov	r7, r9
   167f8:	ldr	r3, [r4, #64]	; 0x40
   167fc:	mov	r1, r6
   16800:	mov	r0, r7
   16804:	blx	r3
   16808:	cmp	r0, #0
   1680c:	beq	1681c <__assert_fail@plt+0x4c70>
   16810:	ldr	r3, [r0, #8]
   16814:	cmp	r3, #0
   16818:	beq	16938 <__assert_fail@plt+0x4d8c>
   1681c:	mov	r3, #4
   16820:	str	r3, [r4, #32]
   16824:	mov	r0, r7
   16828:	add	r1, r6, #1
   1682c:	bl	1864c <__assert_fail@plt+0x6aa0>
   16830:	mov	r3, #0
   16834:	str	r6, [r4, #40]	; 0x28
   16838:	str	r0, [r4, #36]	; 0x24
   1683c:	strb	r3, [r0, r6]
   16840:	b	16594 <__assert_fail@plt+0x49e8>
   16844:	cmp	sl, r3
   16848:	beq	168d4 <__assert_fail@plt+0x4d28>
   1684c:	ldrb	r2, [r0, r3]
   16850:	cmp	r2, #26
   16854:	beq	168dc <__assert_fail@plt+0x4d30>
   16858:	add	r2, r3, #1
   1685c:	str	r2, [r4, #24]
   16860:	ldrb	r8, [r0, r3]
   16864:	cmp	r8, #10
   16868:	bne	167c4 <__assert_fail@plt+0x4c18>
   1686c:	mov	r6, r7
   16870:	mov	r7, r9
   16874:	mov	r9, r8
   16878:	ldr	r1, [pc, #3128]	; 174b8 <__assert_fail@plt+0x590c>
   1687c:	mov	r2, #5
   16880:	ldr	r0, [pc, #3156]	; 174dc <__assert_fail@plt+0x5930>
   16884:	bl	11828 <__dcgettext@plt>
   16888:	mov	r1, r0
   1688c:	mov	r0, r4
   16890:	bl	1612c <__assert_fail@plt+0x4580>
   16894:	ldr	r3, [r4, #24]
   16898:	cmp	r3, #0
   1689c:	cmnne	r9, #1
   168a0:	ldrne	r2, [r4, #8]
   168a4:	subne	r3, r3, #1
   168a8:	strne	r3, [r4, #24]
   168ac:	strbne	r9, [r2, r3]
   168b0:	b	167f8 <__assert_fail@plt+0x4c4c>
   168b4:	lsl	r3, r7, #1
   168b8:	mov	r0, r9
   168bc:	mov	r1, r3
   168c0:	str	r3, [sp, #4]
   168c4:	bl	1864c <__assert_fail@plt+0x6aa0>
   168c8:	ldr	sl, [r4, #16]
   168cc:	mov	r9, r0
   168d0:	b	167d0 <__assert_fail@plt+0x4c24>
   168d4:	cmp	sl, #0
   168d8:	bne	16910 <__assert_fail@plt+0x4d64>
   168dc:	mov	r6, r7
   168e0:	mov	r7, r9
   168e4:	mvn	r9, #0
   168e8:	b	16878 <__assert_fail@plt+0x4ccc>
   168ec:	mov	r0, r4
   168f0:	bl	16378 <__assert_fail@plt+0x47cc>
   168f4:	cmp	r0, #0
   168f8:	blt	167f0 <__assert_fail@plt+0x4c44>
   168fc:	ldr	sl, [r4, #16]
   16900:	cmp	sl, #0
   16904:	beq	167f0 <__assert_fail@plt+0x4c44>
   16908:	ldr	r2, [r4, #24]
   1690c:	b	16770 <__assert_fail@plt+0x4bc4>
   16910:	mov	r0, r4
   16914:	bl	16378 <__assert_fail@plt+0x47cc>
   16918:	cmp	r0, #0
   1691c:	blt	168dc <__assert_fail@plt+0x4d30>
   16920:	ldr	sl, [r4, #16]
   16924:	cmp	sl, #0
   16928:	beq	168dc <__assert_fail@plt+0x4d30>
   1692c:	ldr	r0, [r4, #8]
   16930:	ldr	r3, [r4, #24]
   16934:	b	1684c <__assert_fail@plt+0x4ca0>
   16938:	ldr	r3, [r0, #4]
   1693c:	mov	r0, r7
   16940:	str	r3, [r4, #32]
   16944:	bl	11840 <free@plt>
   16948:	b	16594 <__assert_fail@plt+0x49e8>
   1694c:	bl	118ac <__stack_chk_fail@plt>
   16950:	mov	r0, #56	; 0x38
   16954:	bl	1860c <__assert_fail@plt+0x6a60>
   16958:	mov	r7, #0
   1695c:	mov	r8, #56	; 0x38
   16960:	mov	r6, r0
   16964:	b	169c0 <__assert_fail@plt+0x4e14>
   16968:	ldr	r1, [r4, #8]
   1696c:	ldrb	r3, [r1, r2]
   16970:	cmp	r3, #26
   16974:	beq	169d8 <__assert_fail@plt+0x4e2c>
   16978:	add	r3, r2, #1
   1697c:	str	r3, [r4, #24]
   16980:	ldrb	ip, [r4, #29]
   16984:	ldrb	r9, [r1, r2]
   16988:	cmp	r9, ip
   1698c:	mov	sl, r9
   16990:	beq	169e8 <__assert_fail@plt+0x4e3c>
   16994:	cmp	r9, #10
   16998:	cmpne	r9, #62	; 0x3e
   1699c:	movne	r2, #1
   169a0:	moveq	r2, #0
   169a4:	cmp	r8, r7
   169a8:	beq	17dac <__assert_fail@plt+0x6200>
   169ac:	add	r3, r7, #1
   169b0:	strb	sl, [r6, r7]
   169b4:	cmp	r2, #0
   169b8:	beq	17d9c <__assert_fail@plt+0x61f0>
   169bc:	mov	r7, r3
   169c0:	ldr	r2, [r4, #24]
   169c4:	ldr	r0, [r4, #16]
   169c8:	cmp	r2, r0
   169cc:	bne	16968 <__assert_fail@plt+0x4dbc>
   169d0:	cmp	r2, #0
   169d4:	bne	16a38 <__assert_fail@plt+0x4e8c>
   169d8:	mov	r2, #1
   169dc:	mov	sl, #255	; 0xff
   169e0:	mvn	r9, #0
   169e4:	b	169a4 <__assert_fail@plt+0x4df8>
   169e8:	cmp	r3, r0
   169ec:	beq	16b94 <__assert_fail@plt+0x4fe8>
   169f0:	ldrb	r2, [r1, r3]
   169f4:	cmp	r2, #26
   169f8:	beq	16b58 <__assert_fail@plt+0x4fac>
   169fc:	add	r2, r3, #1
   16a00:	str	r2, [r4, #24]
   16a04:	ldrb	sl, [r1, r3]
   16a08:	cmp	r8, r7
   16a0c:	mov	r3, sl
   16a10:	beq	16b74 <__assert_fail@plt+0x4fc8>
   16a14:	cmp	r3, #10
   16a18:	strb	sl, [r6, r7]
   16a1c:	add	r3, r7, #1
   16a20:	beq	16a5c <__assert_fail@plt+0x4eb0>
   16a24:	cmp	r9, #62	; 0x3e
   16a28:	cmpne	r9, #10
   16a2c:	movne	r2, #1
   16a30:	moveq	r2, #0
   16a34:	b	169b4 <__assert_fail@plt+0x4e08>
   16a38:	mov	r0, r4
   16a3c:	bl	16378 <__assert_fail@plt+0x47cc>
   16a40:	cmp	r0, #0
   16a44:	blt	169d8 <__assert_fail@plt+0x4e2c>
   16a48:	ldr	r0, [r4, #16]
   16a4c:	cmp	r0, #0
   16a50:	beq	169d8 <__assert_fail@plt+0x4e2c>
   16a54:	ldr	r2, [r4, #24]
   16a58:	b	16968 <__assert_fail@plt+0x4dbc>
   16a5c:	mov	sl, r3
   16a60:	ldr	r1, [pc, #2644]	; 174bc <__assert_fail@plt+0x5910>
   16a64:	mov	r2, #5
   16a68:	ldr	r0, [pc, #2668]	; 174dc <__assert_fail@plt+0x5930>
   16a6c:	bl	11828 <__dcgettext@plt>
   16a70:	mov	r1, r0
   16a74:	mov	r0, r4
   16a78:	bl	1612c <__assert_fail@plt+0x4580>
   16a7c:	ldrb	r3, [r6]
   16a80:	cmp	r3, #85	; 0x55
   16a84:	beq	16ad4 <__assert_fail@plt+0x4f28>
   16a88:	ldr	r3, [r4, #64]	; 0x40
   16a8c:	mov	r1, r7
   16a90:	mov	r0, r6
   16a94:	blx	r3
   16a98:	cmp	r0, #0
   16a9c:	beq	16aac <__assert_fail@plt+0x4f00>
   16aa0:	ldr	r3, [r0, #8]
   16aa4:	cmp	r3, #1
   16aa8:	beq	16bc4 <__assert_fail@plt+0x5018>
   16aac:	mov	r3, #3
   16ab0:	str	r3, [r4, #32]
   16ab4:	mov	r0, r6
   16ab8:	add	r1, sl, #1
   16abc:	bl	1864c <__assert_fail@plt+0x6aa0>
   16ac0:	mov	r3, #0
   16ac4:	str	r7, [r4, #40]	; 0x28
   16ac8:	str	r0, [r4, #36]	; 0x24
   16acc:	strb	r3, [r0, sl]
   16ad0:	b	16594 <__assert_fail@plt+0x49e8>
   16ad4:	sub	r3, sl, #6
   16ad8:	bics	r3, r3, #4
   16adc:	bne	16a88 <__assert_fail@plt+0x4edc>
   16ae0:	add	r0, r6, #1
   16ae4:	add	r1, r6, r7
   16ae8:	cmp	r0, r1
   16aec:	bcs	16bd8 <__assert_fail@plt+0x502c>
   16af0:	ldrb	r3, [r6, #1]
   16af4:	ldr	ip, [r5]
   16af8:	lsl	r3, r3, #1
   16afc:	ldrh	r3, [ip, r3]
   16b00:	tst	r3, #4096	; 0x1000
   16b04:	beq	16a88 <__assert_fail@plt+0x4edc>
   16b08:	add	r3, r6, #2
   16b0c:	b	16b28 <__assert_fail@plt+0x4f7c>
   16b10:	ldrb	r2, [r3]
   16b14:	add	r3, r3, #1
   16b18:	lsl	r2, r2, #1
   16b1c:	ldrh	r2, [ip, r2]
   16b20:	tst	r2, #4096	; 0x1000
   16b24:	beq	16a88 <__assert_fail@plt+0x4edc>
   16b28:	cmp	r1, r3
   16b2c:	mov	r2, r3
   16b30:	bne	16b10 <__assert_fail@plt+0x4f64>
   16b34:	cmp	r1, r2
   16b38:	bne	16a88 <__assert_fail@plt+0x4edc>
   16b3c:	mov	r3, #15
   16b40:	str	r3, [r4, #32]
   16b44:	mov	r2, #16
   16b48:	mov	r1, #0
   16b4c:	bl	119fc <strtoul@plt>
   16b50:	str	r0, [r4, #36]	; 0x24
   16b54:	b	16594 <__assert_fail@plt+0x49e8>
   16b58:	cmp	r8, r7
   16b5c:	mvnne	r3, #0
   16b60:	strbne	r3, [r6, r7]
   16b64:	addne	r3, r7, #1
   16b68:	bne	16a24 <__assert_fail@plt+0x4e78>
   16b6c:	mov	sl, #255	; 0xff
   16b70:	mvn	r3, #0
   16b74:	lsl	r8, r8, #1
   16b78:	mov	r0, r6
   16b7c:	mov	r1, r8
   16b80:	str	r3, [sp, #4]
   16b84:	bl	1864c <__assert_fail@plt+0x6aa0>
   16b88:	ldr	r3, [sp, #4]
   16b8c:	mov	r6, r0
   16b90:	b	16a14 <__assert_fail@plt+0x4e68>
   16b94:	cmp	r0, #0
   16b98:	beq	16b58 <__assert_fail@plt+0x4fac>
   16b9c:	mov	r0, r4
   16ba0:	bl	16378 <__assert_fail@plt+0x47cc>
   16ba4:	cmp	r0, #0
   16ba8:	blt	16b58 <__assert_fail@plt+0x4fac>
   16bac:	ldr	r3, [r4, #16]
   16bb0:	cmp	r3, #0
   16bb4:	beq	16b58 <__assert_fail@plt+0x4fac>
   16bb8:	ldr	r1, [r4, #8]
   16bbc:	ldr	r3, [r4, #24]
   16bc0:	b	169f0 <__assert_fail@plt+0x4e44>
   16bc4:	ldr	r3, [r0, #4]
   16bc8:	mov	r0, r6
   16bcc:	str	r3, [r4, #32]
   16bd0:	bl	11840 <free@plt>
   16bd4:	b	16594 <__assert_fail@plt+0x49e8>
   16bd8:	mov	r2, r0
   16bdc:	b	16b34 <__assert_fail@plt+0x4f88>
   16be0:	add	r3, r4, #36	; 0x24
   16be4:	str	r3, [sp, #8]
   16be8:	add	r3, r4, #35	; 0x23
   16bec:	mov	r8, fp
   16bf0:	str	r1, [sp, #4]
   16bf4:	str	r3, [sp, #12]
   16bf8:	mov	fp, r6
   16bfc:	b	16d98 <__assert_fail@plt+0x51ec>
   16c00:	ldr	r3, [r4, #8]
   16c04:	add	r1, r3, r9
   16c08:	ldrb	r2, [r3, r9]
   16c0c:	cmp	r2, #26
   16c10:	beq	16f04 <__assert_fail@plt+0x5358>
   16c14:	add	r9, r9, #1
   16c18:	str	r9, [r4, #24]
   16c1c:	ldrb	r7, [r1]
   16c20:	cmp	r7, #100	; 0x64
   16c24:	beq	16ed0 <__assert_fail@plt+0x5324>
   16c28:	cmp	r7, #120	; 0x78
   16c2c:	movne	r6, #8
   16c30:	beq	16e8c <__assert_fail@plt+0x52e0>
   16c34:	ldr	ip, [r5]
   16c38:	lsl	r0, r7, #1
   16c3c:	cmp	r7, #47	; 0x2f
   16c40:	ldrh	r1, [ip, r0]
   16c44:	ble	1708c <__assert_fail@plt+0x54e0>
   16c48:	add	lr, r6, #48	; 0x30
   16c4c:	cmp	r7, lr
   16c50:	bge	1708c <__assert_fail@plt+0x54e0>
   16c54:	tst	r1, #2048	; 0x800
   16c58:	subne	r1, r7, #48	; 0x30
   16c5c:	bne	16c70 <__assert_fail@plt+0x50c4>
   16c60:	bl	119b4 <__ctype_tolower_loc@plt>
   16c64:	ldr	r3, [r0]
   16c68:	ldr	r1, [r3, r7, lsl #2]
   16c6c:	sub	r1, r1, #87	; 0x57
   16c70:	cmp	sl, r9
   16c74:	beq	16e5c <__assert_fail@plt+0x52b0>
   16c78:	ldr	r3, [r4, #8]
   16c7c:	add	r0, r3, r9
   16c80:	ldrb	ip, [r3, r9]
   16c84:	cmp	ip, #26
   16c88:	beq	16efc <__assert_fail@plt+0x5350>
   16c8c:	add	r9, r9, #1
   16c90:	cmp	r6, #16
   16c94:	str	r9, [r4, #24]
   16c98:	ldr	ip, [r5]
   16c9c:	ldrb	r7, [r0]
   16ca0:	beq	16e74 <__assert_fail@plt+0x52c8>
   16ca4:	lsl	r0, r7, #1
   16ca8:	cmp	r7, #47	; 0x2f
   16cac:	ldrh	lr, [ip, r0]
   16cb0:	ble	1708c <__assert_fail@plt+0x54e0>
   16cb4:	add	r0, r6, #48	; 0x30
   16cb8:	cmp	r7, r0
   16cbc:	bge	16fc8 <__assert_fail@plt+0x541c>
   16cc0:	mul	r1, r1, r6
   16cc4:	tst	lr, #2048	; 0x800
   16cc8:	subne	r1, r1, #48	; 0x30
   16ccc:	addne	r7, r7, r1
   16cd0:	bne	16cf0 <__assert_fail@plt+0x5144>
   16cd4:	str	r1, [sp, #16]
   16cd8:	bl	119b4 <__ctype_tolower_loc@plt>
   16cdc:	ldr	r1, [sp, #16]
   16ce0:	ldr	r3, [r0]
   16ce4:	ldr	r7, [r3, r7, lsl #2]
   16ce8:	sub	r7, r7, #87	; 0x57
   16cec:	add	r7, r7, r1
   16cf0:	cmp	sl, r9
   16cf4:	beq	16e30 <__assert_fail@plt+0x5284>
   16cf8:	ldr	r3, [r4, #8]
   16cfc:	ldrb	r1, [r3, r9]
   16d00:	cmp	r1, #26
   16d04:	beq	16dd0 <__assert_fail@plt+0x5224>
   16d08:	add	r1, r9, #1
   16d0c:	cmp	r6, #16
   16d10:	str	r1, [r4, #24]
   16d14:	ldrb	r3, [r3, r9]
   16d18:	beq	16d64 <__assert_fail@plt+0x51b8>
   16d1c:	ldr	r0, [r5]
   16d20:	lsl	r1, r3, #1
   16d24:	ldrh	r1, [r0, r1]
   16d28:	tst	r1, #2048	; 0x800
   16d2c:	beq	16d64 <__assert_fail@plt+0x51b8>
   16d30:	mla	r7, r7, r6, r3
   16d34:	ldr	r2, [r4, #16]
   16d38:	ldr	r3, [r4, #24]
   16d3c:	sub	r7, r7, #48	; 0x30
   16d40:	cmp	r3, r2
   16d44:	beq	16f9c <__assert_fail@plt+0x53f0>
   16d48:	ldr	r2, [r4, #8]
   16d4c:	ldrb	r1, [r2, r3]
   16d50:	cmp	r1, #26
   16d54:	beq	16ddc <__assert_fail@plt+0x5230>
   16d58:	add	r1, r3, #1
   16d5c:	str	r1, [r4, #24]
   16d60:	ldrb	r3, [r2, r3]
   16d64:	ldr	r2, [sp, #12]
   16d68:	ldr	r1, [sp, #4]
   16d6c:	strb	r7, [r2, #1]!
   16d70:	str	r2, [sp, #12]
   16d74:	ldrb	r2, [r4, #29]
   16d78:	add	r1, r1, #1
   16d7c:	str	r1, [sp, #4]
   16d80:	cmp	r2, r3
   16d84:	bne	17ddc <__assert_fail@plt+0x6230>
   16d88:	cmp	r1, #16
   16d8c:	beq	17ddc <__assert_fail@plt+0x6230>
   16d90:	ldr	r9, [r4, #24]
   16d94:	ldr	sl, [r4, #16]
   16d98:	cmp	sl, r9
   16d9c:	bne	16c00 <__assert_fail@plt+0x5054>
   16da0:	cmp	r9, #0
   16da4:	bne	16f44 <__assert_fail@plt+0x5398>
   16da8:	mov	r6, fp
   16dac:	mov	fp, r8
   16db0:	ldr	r8, [r4, #8]
   16db4:	add	r8, r8, r6
   16db8:	str	r8, [r4, #36]	; 0x24
   16dbc:	sub	r6, r9, r6
   16dc0:	mov	r3, #211	; 0xd3
   16dc4:	str	r6, [r4, #40]	; 0x28
   16dc8:	str	r3, [r4, #32]
   16dcc:	b	16594 <__assert_fail@plt+0x49e8>
   16dd0:	cmp	r6, #16
   16dd4:	mvnne	r3, #0
   16dd8:	bne	16d1c <__assert_fail@plt+0x5170>
   16ddc:	ldr	r3, [sp, #4]
   16de0:	ldr	r2, [sp, #8]
   16de4:	mov	fp, r8
   16de8:	strb	r7, [r2, r3]
   16dec:	mvn	r2, #0
   16df0:	add	r3, r3, #1
   16df4:	str	r3, [sp, #4]
   16df8:	ldr	r3, [r5]
   16dfc:	lsl	r2, r2, #1
   16e00:	ldrh	r3, [r3, r2]
   16e04:	tst	r3, #8192	; 0x2000
   16e08:	beq	16f68 <__assert_fail@plt+0x53bc>
   16e0c:	ldr	r3, [r4, #24]
   16e10:	ldr	r2, [sp, #4]
   16e14:	cmp	r3, #0
   16e18:	subne	r3, r3, #1
   16e1c:	strne	r3, [r4, #24]
   16e20:	mov	r3, #14
   16e24:	str	r2, [r4, #52]	; 0x34
   16e28:	str	r3, [r4, #32]
   16e2c:	b	16594 <__assert_fail@plt+0x49e8>
   16e30:	cmp	r9, #0
   16e34:	beq	16dd0 <__assert_fail@plt+0x5224>
   16e38:	mov	r0, r4
   16e3c:	bl	16378 <__assert_fail@plt+0x47cc>
   16e40:	cmp	r0, #0
   16e44:	blt	16dd0 <__assert_fail@plt+0x5224>
   16e48:	ldr	r3, [r4, #16]
   16e4c:	cmp	r3, #0
   16e50:	beq	16dd0 <__assert_fail@plt+0x5224>
   16e54:	ldr	r9, [r4, #24]
   16e58:	b	16cf8 <__assert_fail@plt+0x514c>
   16e5c:	cmp	r9, #0
   16e60:	bne	170a0 <__assert_fail@plt+0x54f4>
   16e64:	cmp	r6, #16
   16e68:	bne	16da8 <__assert_fail@plt+0x51fc>
   16e6c:	ldr	ip, [r5]
   16e70:	mvn	r7, #0
   16e74:	lsl	r0, r7, #1
   16e78:	ldrh	lr, [ip, r0]
   16e7c:	tst	lr, #4096	; 0x1000
   16e80:	beq	17064 <__assert_fail@plt+0x54b8>
   16e84:	ldr	sl, [r4, #16]
   16e88:	b	16cc0 <__assert_fail@plt+0x5114>
   16e8c:	cmp	r9, sl
   16e90:	beq	170d4 <__assert_fail@plt+0x5528>
   16e94:	ldrb	r2, [r3, r9]
   16e98:	add	r3, r3, r9
   16e9c:	cmp	r2, #26
   16ea0:	beq	170cc <__assert_fail@plt+0x5520>
   16ea4:	add	r9, r9, #1
   16ea8:	str	r9, [r4, #24]
   16eac:	ldrb	r7, [r3]
   16eb0:	ldr	ip, [r5]
   16eb4:	lsl	r0, r7, #1
   16eb8:	ldrh	r1, [ip, r0]
   16ebc:	tst	r1, #4096	; 0x1000
   16ec0:	beq	17064 <__assert_fail@plt+0x54b8>
   16ec4:	mov	r6, #16
   16ec8:	ldr	sl, [r4, #16]
   16ecc:	b	16c54 <__assert_fail@plt+0x50a8>
   16ed0:	cmp	r9, sl
   16ed4:	beq	16f14 <__assert_fail@plt+0x5368>
   16ed8:	ldrb	r2, [r3, r9]
   16edc:	add	r1, r3, r9
   16ee0:	cmp	r2, #26
   16ee4:	beq	16f04 <__assert_fail@plt+0x5358>
   16ee8:	add	r9, r9, #1
   16eec:	str	r9, [r4, #24]
   16ef0:	mov	r6, #10
   16ef4:	ldrb	r7, [r1]
   16ef8:	b	16c34 <__assert_fail@plt+0x5088>
   16efc:	cmp	r6, #16
   16f00:	beq	16e6c <__assert_fail@plt+0x52c0>
   16f04:	mov	r6, fp
   16f08:	mov	fp, r8
   16f0c:	mov	r8, r3
   16f10:	b	16db4 <__assert_fail@plt+0x5208>
   16f14:	cmp	r9, #0
   16f18:	beq	16f04 <__assert_fail@plt+0x5358>
   16f1c:	mov	r0, r4
   16f20:	bl	16378 <__assert_fail@plt+0x47cc>
   16f24:	cmp	r0, #0
   16f28:	blt	16f88 <__assert_fail@plt+0x53dc>
   16f2c:	ldr	sl, [r4, #16]
   16f30:	cmp	sl, #0
   16f34:	beq	16f88 <__assert_fail@plt+0x53dc>
   16f38:	ldr	r3, [r4, #8]
   16f3c:	ldr	r9, [r4, #24]
   16f40:	b	16ed8 <__assert_fail@plt+0x532c>
   16f44:	mov	r0, r4
   16f48:	bl	16378 <__assert_fail@plt+0x47cc>
   16f4c:	cmp	r0, #0
   16f50:	blt	16f88 <__assert_fail@plt+0x53dc>
   16f54:	ldr	sl, [r4, #16]
   16f58:	ldr	r9, [r4, #24]
   16f5c:	cmp	sl, #0
   16f60:	bne	16c00 <__assert_fail@plt+0x5054>
   16f64:	b	16da8 <__assert_fail@plt+0x51fc>
   16f68:	mov	r2, #5
   16f6c:	ldr	r1, [pc, #1356]	; 174c0 <__assert_fail@plt+0x5914>
   16f70:	ldr	r0, [pc, #1380]	; 174dc <__assert_fail@plt+0x5930>
   16f74:	bl	11828 <__dcgettext@plt>
   16f78:	mov	r1, r0
   16f7c:	mov	r0, r4
   16f80:	bl	1612c <__assert_fail@plt+0x4580>
   16f84:	b	16e0c <__assert_fail@plt+0x5260>
   16f88:	mov	r6, fp
   16f8c:	ldr	r9, [r4, #24]
   16f90:	mov	fp, r8
   16f94:	ldr	r8, [r4, #8]
   16f98:	b	16db4 <__assert_fail@plt+0x5208>
   16f9c:	cmp	r3, #0
   16fa0:	beq	16ddc <__assert_fail@plt+0x5230>
   16fa4:	mov	r0, r4
   16fa8:	bl	16378 <__assert_fail@plt+0x47cc>
   16fac:	cmp	r0, #0
   16fb0:	blt	16ddc <__assert_fail@plt+0x5230>
   16fb4:	ldr	r3, [r4, #16]
   16fb8:	cmp	r3, #0
   16fbc:	beq	16ddc <__assert_fail@plt+0x5230>
   16fc0:	ldr	r3, [r4, #24]
   16fc4:	b	16d48 <__assert_fail@plt+0x519c>
   16fc8:	mov	r6, fp
   16fcc:	mov	r1, ip
   16fd0:	mov	fp, r8
   16fd4:	lsl	r0, r7, #1
   16fd8:	mov	r8, r3
   16fdc:	add	r3, r8, r6
   16fe0:	str	r3, [r4, #36]	; 0x24
   16fe4:	ldrh	r3, [r1, r0]
   16fe8:	ldr	r9, [r4, #24]
   16fec:	tst	r3, #8192	; 0x2000
   16ff0:	bne	16dbc <__assert_fail@plt+0x5210>
   16ff4:	ldr	sl, [r4, #16]
   16ff8:	b	1702c <__assert_fail@plt+0x5480>
   16ffc:	ldrb	r2, [r8, r9]
   17000:	add	r3, r8, r9
   17004:	cmp	r2, #26
   17008:	beq	16dbc <__assert_fail@plt+0x5210>
   1700c:	add	r9, r9, #1
   17010:	str	r9, [r4, #24]
   17014:	ldrb	r3, [r3]
   17018:	ldr	r2, [r5]
   1701c:	lsl	r3, r3, #1
   17020:	ldrh	r3, [r2, r3]
   17024:	tst	r3, #8192	; 0x2000
   17028:	bne	16dbc <__assert_fail@plt+0x5210>
   1702c:	cmp	sl, r9
   17030:	bne	16ffc <__assert_fail@plt+0x5450>
   17034:	cmp	r9, #0
   17038:	beq	16dbc <__assert_fail@plt+0x5210>
   1703c:	mov	r0, r4
   17040:	bl	16378 <__assert_fail@plt+0x47cc>
   17044:	cmp	r0, #0
   17048:	blt	17084 <__assert_fail@plt+0x54d8>
   1704c:	ldr	sl, [r4, #16]
   17050:	ldr	r9, [r4, #24]
   17054:	cmp	sl, #0
   17058:	beq	16dbc <__assert_fail@plt+0x5210>
   1705c:	ldr	r8, [r4, #8]
   17060:	b	16ffc <__assert_fail@plt+0x5450>
   17064:	mov	r6, fp
   17068:	mov	fp, r8
   1706c:	ldr	r8, [r4, #8]
   17070:	cmn	r7, #1
   17074:	add	r3, r8, r6
   17078:	mov	r1, ip
   1707c:	str	r3, [r4, #36]	; 0x24
   17080:	bne	16fe4 <__assert_fail@plt+0x5438>
   17084:	ldr	r9, [r4, #24]
   17088:	b	16dbc <__assert_fail@plt+0x5210>
   1708c:	mov	r6, fp
   17090:	mov	r1, ip
   17094:	mov	fp, r8
   17098:	mov	r8, r3
   1709c:	b	16fdc <__assert_fail@plt+0x5430>
   170a0:	mov	r0, r4
   170a4:	str	r1, [sp, #16]
   170a8:	bl	16378 <__assert_fail@plt+0x47cc>
   170ac:	ldr	r1, [sp, #16]
   170b0:	cmp	r0, #0
   170b4:	blt	1710c <__assert_fail@plt+0x5560>
   170b8:	ldr	sl, [r4, #16]
   170bc:	ldr	r9, [r4, #24]
   170c0:	cmp	sl, #0
   170c4:	bne	16c78 <__assert_fail@plt+0x50cc>
   170c8:	b	16e64 <__assert_fail@plt+0x52b8>
   170cc:	mvn	r7, #0
   170d0:	b	16eb0 <__assert_fail@plt+0x5304>
   170d4:	cmp	r9, #0
   170d8:	beq	170cc <__assert_fail@plt+0x5520>
   170dc:	mov	r0, r4
   170e0:	bl	16378 <__assert_fail@plt+0x47cc>
   170e4:	cmp	r0, #0
   170e8:	mvnlt	r7, #0
   170ec:	ldrlt	r9, [r4, #24]
   170f0:	blt	16eb0 <__assert_fail@plt+0x5304>
   170f4:	ldr	sl, [r4, #16]
   170f8:	ldr	r9, [r4, #24]
   170fc:	cmp	sl, #0
   17100:	beq	170cc <__assert_fail@plt+0x5520>
   17104:	ldr	r3, [r4, #8]
   17108:	b	16e94 <__assert_fail@plt+0x52e8>
   1710c:	cmp	r6, #16
   17110:	ldr	r9, [r4, #24]
   17114:	bne	16da8 <__assert_fail@plt+0x51fc>
   17118:	b	16e6c <__assert_fail@plt+0x52c0>
   1711c:	mov	r3, #13
   17120:	str	r3, [r4, #32]
   17124:	b	16594 <__assert_fail@plt+0x49e8>
   17128:	mov	r3, #12
   1712c:	str	r3, [r4, #32]
   17130:	b	16594 <__assert_fail@plt+0x49e8>
   17134:	ldr	r3, [r4, #60]	; 0x3c
   17138:	mov	r0, #56	; 0x38
   1713c:	str	r3, [sp, #28]
   17140:	bl	1860c <__assert_fail@plt+0x6a60>
   17144:	ldr	r3, [r4, #56]	; 0x38
   17148:	mov	r2, #18
   1714c:	cmp	r3, #0
   17150:	str	r2, [r4, #32]
   17154:	mov	r9, r0
   17158:	bne	17344 <__assert_fail@plt+0x5798>
   1715c:	mov	r5, r3
   17160:	mov	r6, #56	; 0x38
   17164:	ldr	r3, [r4, #24]
   17168:	ldr	sl, [r4, #16]
   1716c:	b	171b4 <__assert_fail@plt+0x5608>
   17170:	ldr	r2, [r4, #8]
   17174:	add	r1, r2, r3
   17178:	ldrb	r2, [r2, r3]
   1717c:	cmp	r2, #26
   17180:	beq	17224 <__assert_fail@plt+0x5678>
   17184:	add	r3, r3, #1
   17188:	str	r3, [r4, #24]
   1718c:	ldrb	r7, [r1]
   17190:	cmp	r7, #34	; 0x22
   17194:	mov	r2, r7
   17198:	beq	172cc <__assert_fail@plt+0x5720>
   1719c:	cmp	r7, #10
   171a0:	beq	17228 <__assert_fail@plt+0x567c>
   171a4:	cmp	r5, r6
   171a8:	beq	17204 <__assert_fail@plt+0x5658>
   171ac:	strb	r7, [r9, r5]
   171b0:	add	r5, r5, #1
   171b4:	cmp	sl, r3
   171b8:	bne	17170 <__assert_fail@plt+0x55c4>
   171bc:	cmp	sl, #0
   171c0:	beq	17224 <__assert_fail@plt+0x5678>
   171c4:	mov	r0, r4
   171c8:	bl	16378 <__assert_fail@plt+0x47cc>
   171cc:	cmp	r0, #0
   171d0:	blt	17224 <__assert_fail@plt+0x5678>
   171d4:	ldr	sl, [r4, #16]
   171d8:	cmp	sl, #0
   171dc:	beq	17224 <__assert_fail@plt+0x5678>
   171e0:	ldr	r3, [r4, #24]
   171e4:	b	17170 <__assert_fail@plt+0x55c4>
   171e8:	cmp	r9, sl
   171ec:	beq	1727c <__assert_fail@plt+0x56d0>
   171f0:	add	r9, r9, #1
   171f4:	str	r9, [r4, #24]
   171f8:	mov	r3, #5
   171fc:	str	r3, [r4, #32]
   17200:	b	16594 <__assert_fail@plt+0x49e8>
   17204:	lsl	r6, r5, #1
   17208:	mov	r0, r9
   1720c:	mov	r1, r6
   17210:	bl	1864c <__assert_fail@plt+0x6aa0>
   17214:	ldr	r3, [r4, #24]
   17218:	ldr	sl, [r4, #16]
   1721c:	mov	r9, r0
   17220:	b	171ac <__assert_fail@plt+0x5600>
   17224:	mvn	r2, #0
   17228:	cmp	r5, #0
   1722c:	beq	17324 <__assert_fail@plt+0x5778>
   17230:	sub	r7, r5, #1
   17234:	ldrb	r3, [r4, #29]
   17238:	ldrb	r1, [r9, r7]
   1723c:	cmp	r1, r3
   17240:	beq	172e8 <__assert_fail@plt+0x573c>
   17244:	cmn	r2, #1
   17248:	cmpne	r2, #10
   1724c:	beq	17324 <__assert_fail@plt+0x5778>
   17250:	cmp	r6, r5
   17254:	beq	172b8 <__assert_fail@plt+0x570c>
   17258:	mov	r3, #0
   1725c:	strb	r3, [r9, r5]
   17260:	add	r5, r5, #1
   17264:	mov	r0, r9
   17268:	mov	r1, r5
   1726c:	bl	1864c <__assert_fail@plt+0x6aa0>
   17270:	str	r5, [r4, #40]	; 0x28
   17274:	str	r0, [r4, #36]	; 0x24
   17278:	b	16594 <__assert_fail@plt+0x49e8>
   1727c:	cmp	r9, #0
   17280:	beq	171f8 <__assert_fail@plt+0x564c>
   17284:	mov	r0, r4
   17288:	bl	16378 <__assert_fail@plt+0x47cc>
   1728c:	cmp	r0, #0
   17290:	blt	171f8 <__assert_fail@plt+0x564c>
   17294:	ldr	r3, [r4, #16]
   17298:	cmp	r3, #0
   1729c:	beq	171f8 <__assert_fail@plt+0x564c>
   172a0:	ldr	r9, [r4, #24]
   172a4:	ldr	r3, [r4, #8]
   172a8:	ldrb	r3, [r3, r9]
   172ac:	cmp	r3, #26
   172b0:	bne	171f0 <__assert_fail@plt+0x5644>
   172b4:	b	171f8 <__assert_fail@plt+0x564c>
   172b8:	mov	r0, r9
   172bc:	lsl	r1, r5, #1
   172c0:	bl	1864c <__assert_fail@plt+0x6aa0>
   172c4:	mov	r9, r0
   172c8:	b	17258 <__assert_fail@plt+0x56ac>
   172cc:	cmp	r5, #0
   172d0:	beq	17250 <__assert_fail@plt+0x56a4>
   172d4:	sub	r7, r5, #1
   172d8:	ldrb	r3, [r4, #29]
   172dc:	ldrb	r1, [r9, r7]
   172e0:	cmp	r1, r3
   172e4:	bne	17250 <__assert_fail@plt+0x56a4>
   172e8:	cmp	r5, #1
   172ec:	beq	17300 <__assert_fail@plt+0x5754>
   172f0:	add	r1, r9, r5
   172f4:	ldrb	r1, [r1, #-2]
   172f8:	cmp	r1, r3
   172fc:	beq	17244 <__assert_fail@plt+0x5698>
   17300:	mov	r2, #5
   17304:	ldr	r1, [pc, #440]	; 174c4 <__assert_fail@plt+0x5918>
   17308:	ldr	r0, [pc, #460]	; 174dc <__assert_fail@plt+0x5930>
   1730c:	bl	11828 <__dcgettext@plt>
   17310:	mov	r5, r7
   17314:	mov	r1, r0
   17318:	mov	r0, r4
   1731c:	bl	1612c <__assert_fail@plt+0x4580>
   17320:	b	17250 <__assert_fail@plt+0x56a4>
   17324:	mov	r2, #5
   17328:	ldr	r1, [pc, #408]	; 174c8 <__assert_fail@plt+0x591c>
   1732c:	ldr	r0, [pc, #424]	; 174dc <__assert_fail@plt+0x5930>
   17330:	bl	11828 <__dcgettext@plt>
   17334:	mov	r1, r0
   17338:	mov	r0, r4
   1733c:	bl	1612c <__assert_fail@plt+0x4580>
   17340:	b	17250 <__assert_fail@plt+0x56a4>
   17344:	ldr	r3, [sp, #28]
   17348:	cmp	r3, #0
   1734c:	ldreq	r3, [sp, #28]
   17350:	streq	r3, [sp, #16]
   17354:	bne	17470 <__assert_fail@plt+0x58c4>
   17358:	mov	r3, #0
   1735c:	ldr	sl, [r4, #16]
   17360:	str	r5, [sp, #32]
   17364:	mov	r8, r3
   17368:	mov	r6, #56	; 0x38
   1736c:	mov	r5, r3
   17370:	mov	r2, #224	; 0xe0
   17374:	str	r3, [sp, #20]
   17378:	str	r2, [sp, #24]
   1737c:	str	fp, [sp, #12]
   17380:	ldr	r3, [r4, #24]
   17384:	cmp	r3, sl
   17388:	beq	17444 <__assert_fail@plt+0x5898>
   1738c:	ldr	r2, [r4, #8]
   17390:	ldrb	r1, [r2, r3]
   17394:	cmp	r1, #26
   17398:	beq	173fc <__assert_fail@plt+0x5850>
   1739c:	add	r1, r3, #1
   173a0:	str	r1, [r4, #24]
   173a4:	ldrb	r3, [r2, r3]
   173a8:	cmp	r3, #34	; 0x22
   173ac:	mov	fp, r3
   173b0:	beq	17934 <__assert_fail@plt+0x5d88>
   173b4:	cmp	r3, #10
   173b8:	beq	173fc <__assert_fail@plt+0x5850>
   173bc:	cmp	r3, #60	; 0x3c
   173c0:	beq	178ac <__assert_fail@plt+0x5d00>
   173c4:	ldrb	r0, [r4, #29]
   173c8:	cmp	r0, r3
   173cc:	bne	17870 <__assert_fail@plt+0x5cc4>
   173d0:	cmp	sl, r1
   173d4:	beq	17844 <__assert_fail@plt+0x5c98>
   173d8:	ldr	r3, [r4, #24]
   173dc:	ldrb	r1, [r2, r3]
   173e0:	cmp	r1, #26
   173e4:	beq	173fc <__assert_fail@plt+0x5850>
   173e8:	add	r1, r3, #1
   173ec:	str	r1, [r4, #24]
   173f0:	ldrb	fp, [r2, r3]
   173f4:	cmp	fp, #10
   173f8:	bne	17870 <__assert_fail@plt+0x5cc4>
   173fc:	ldr	r1, [pc, #196]	; 174c8 <__assert_fail@plt+0x591c>
   17400:	mov	r2, #5
   17404:	ldr	r0, [pc, #208]	; 174dc <__assert_fail@plt+0x5930>
   17408:	ldr	fp, [sp, #12]
   1740c:	bl	11828 <__dcgettext@plt>
   17410:	mov	r1, r0
   17414:	mov	r0, r4
   17418:	bl	1612c <__assert_fail@plt+0x4580>
   1741c:	mov	r0, r9
   17420:	bl	11840 <free@plt>
   17424:	ldr	r0, [sp, #16]
   17428:	bl	11840 <free@plt>
   1742c:	mov	r3, #0
   17430:	str	r3, [r4, #36]	; 0x24
   17434:	str	r3, [r4, #40]	; 0x28
   17438:	str	r3, [r4, #44]	; 0x2c
   1743c:	str	r3, [r4, #48]	; 0x30
   17440:	b	16594 <__assert_fail@plt+0x49e8>
   17444:	cmp	sl, #0
   17448:	beq	173fc <__assert_fail@plt+0x5850>
   1744c:	mov	r0, r4
   17450:	bl	16378 <__assert_fail@plt+0x47cc>
   17454:	cmp	r0, #0
   17458:	blt	173fc <__assert_fail@plt+0x5850>
   1745c:	ldr	sl, [r4, #16]
   17460:	cmp	sl, #0
   17464:	beq	173fc <__assert_fail@plt+0x5850>
   17468:	ldr	r3, [r4, #24]
   1746c:	b	1738c <__assert_fail@plt+0x57e0>
   17470:	mov	r0, #224	; 0xe0
   17474:	bl	1860c <__assert_fail@plt+0x6a60>
   17478:	str	r0, [sp, #16]
   1747c:	b	17358 <__assert_fail@plt+0x57ac>
   17480:	mov	r3, #10
   17484:	str	r3, [r4, #32]
   17488:	b	16594 <__assert_fail@plt+0x49e8>
   1748c:	sub	r7, r7, #48	; 0x30
   17490:	mov	r2, #16
   17494:	str	r7, [r4, #36]	; 0x24
   17498:	str	r2, [r4, #32]
   1749c:	mov	r6, r3
   174a0:	b	17528 <__assert_fail@plt+0x597c>
   174a4:	strdeq	sl, [r2], -r8
   174a8:	ldrdeq	sl, [r1], -r4
   174ac:	andeq	sl, r1, r0, ror #3
   174b0:	andeq	sl, r1, r8, ror #3
   174b4:	andeq	sl, r1, r4, ror #3
   174b8:	andeq	sl, r1, r8, lsr #5
   174bc:	andeq	sl, r1, ip, ror #3
   174c0:	andeq	sl, r1, r4, lsr #3
   174c4:	andeq	sl, r1, r4, lsr #4
   174c8:	andeq	sl, r1, r0, asr r2
   174cc:	andeq	sl, r1, r4, ror #4
   174d0:	andeq	sl, r1, r4, lsl #5
   174d4:	andeq	r9, r1, ip, lsl #26
   174d8:	andeq	sl, r1, r8, lsl #4
   174dc:	andeq	sl, r2, r0, lsl #30
   174e0:	ldr	r3, [r4, #8]
   174e4:	ldrb	r1, [r3, r2]
   174e8:	cmp	r1, #26
   174ec:	beq	17e88 <__assert_fail@plt+0x62dc>
   174f0:	add	r1, r2, #1
   174f4:	str	r1, [r4, #24]
   174f8:	ldrb	r2, [r3, r2]
   174fc:	lsl	r1, r2, #1
   17500:	ldrh	r3, [r6, r1]
   17504:	tst	r3, #2048	; 0x800
   17508:	beq	17e68 <__assert_fail@plt+0x62bc>
   1750c:	ldr	r3, [r4, #36]	; 0x24
   17510:	ldr	sl, [r4, #16]
   17514:	mov	r6, r0
   17518:	add	r3, r3, r3, lsl #2
   1751c:	add	r2, r2, r3, lsl #1
   17520:	sub	r2, r2, #48	; 0x30
   17524:	str	r2, [r4, #36]	; 0x24
   17528:	ldr	r2, [r4, #24]
   1752c:	cmp	r2, sl
   17530:	movne	r0, r6
   17534:	bne	174e0 <__assert_fail@plt+0x5934>
   17538:	cmp	sl, #0
   1753c:	moveq	r0, r6
   17540:	mvneq	r1, #1
   17544:	mvneq	r2, #0
   17548:	beq	17500 <__assert_fail@plt+0x5954>
   1754c:	mov	r0, r4
   17550:	bl	16378 <__assert_fail@plt+0x47cc>
   17554:	cmp	r0, #0
   17558:	mvnlt	r1, #1
   1755c:	ldrlt	r0, [r5]
   17560:	mvnlt	r2, #0
   17564:	blt	17500 <__assert_fail@plt+0x5954>
   17568:	ldr	sl, [r4, #16]
   1756c:	ldr	r0, [r5]
   17570:	cmp	sl, #0
   17574:	beq	17e88 <__assert_fail@plt+0x62dc>
   17578:	ldr	r2, [r4, #24]
   1757c:	b	174e0 <__assert_fail@plt+0x5934>
   17580:	mov	r5, #6
   17584:	b	175a8 <__assert_fail@plt+0x59fc>
   17588:	ldr	r2, [r4, #8]
   1758c:	ldrb	r2, [r2, r3]
   17590:	cmp	r2, #26
   17594:	addne	r3, r3, #1
   17598:	strne	r3, [r4, #24]
   1759c:	subs	r5, r5, #1
   175a0:	beq	17698 <__assert_fail@plt+0x5aec>
   175a4:	ldr	sl, [r4, #16]
   175a8:	ldr	r3, [r4, #24]
   175ac:	cmp	r3, sl
   175b0:	bne	17588 <__assert_fail@plt+0x59dc>
   175b4:	cmp	sl, #0
   175b8:	beq	1759c <__assert_fail@plt+0x59f0>
   175bc:	mov	r0, r4
   175c0:	bl	16378 <__assert_fail@plt+0x47cc>
   175c4:	cmp	r0, #0
   175c8:	blt	1759c <__assert_fail@plt+0x59f0>
   175cc:	ldr	sl, [r4, #16]
   175d0:	cmp	sl, #0
   175d4:	beq	1759c <__assert_fail@plt+0x59f0>
   175d8:	ldr	r3, [r4, #24]
   175dc:	b	17588 <__assert_fail@plt+0x59dc>
   175e0:	cmp	r9, sl
   175e4:	beq	1762c <__assert_fail@plt+0x5a80>
   175e8:	ldr	r3, [r4, #24]
   175ec:	ldrb	r2, [r8, r3]
   175f0:	cmp	r2, #26
   175f4:	beq	17620 <__assert_fail@plt+0x5a74>
   175f8:	add	r3, r3, #1
   175fc:	str	r3, [r4, #24]
   17600:	ldr	r3, [r4, #24]
   17604:	cmp	r3, sl
   17608:	beq	1766c <__assert_fail@plt+0x5ac0>
   1760c:	ldr	r2, [r4, #8]
   17610:	ldrb	r2, [r2, r3]
   17614:	cmp	r2, #26
   17618:	addne	r3, r3, #1
   1761c:	strne	r3, [r4, #24]
   17620:	mov	r3, #6
   17624:	str	r3, [r4, #32]
   17628:	b	16594 <__assert_fail@plt+0x49e8>
   1762c:	cmp	sl, #0
   17630:	beq	17600 <__assert_fail@plt+0x5a54>
   17634:	mov	r0, r4
   17638:	bl	16378 <__assert_fail@plt+0x47cc>
   1763c:	ldr	sl, [r4, #16]
   17640:	cmp	r0, #0
   17644:	blt	17600 <__assert_fail@plt+0x5a54>
   17648:	cmp	sl, #0
   1764c:	beq	17600 <__assert_fail@plt+0x5a54>
   17650:	ldr	r3, [r4, #24]
   17654:	ldr	r2, [r4, #8]
   17658:	ldrb	r2, [r2, r3]
   1765c:	cmp	r2, #26
   17660:	bne	175f8 <__assert_fail@plt+0x5a4c>
   17664:	cmp	r3, sl
   17668:	bne	17620 <__assert_fail@plt+0x5a74>
   1766c:	cmp	sl, #0
   17670:	beq	17620 <__assert_fail@plt+0x5a74>
   17674:	mov	r0, r4
   17678:	bl	16378 <__assert_fail@plt+0x47cc>
   1767c:	cmp	r0, #0
   17680:	blt	17620 <__assert_fail@plt+0x5a74>
   17684:	ldr	r3, [r4, #16]
   17688:	cmp	r3, #0
   1768c:	beq	17620 <__assert_fail@plt+0x5a74>
   17690:	ldr	r3, [r4, #24]
   17694:	b	1760c <__assert_fail@plt+0x5a60>
   17698:	mov	r3, #8
   1769c:	str	r3, [r4, #32]
   176a0:	b	16594 <__assert_fail@plt+0x49e8>
   176a4:	cmp	r9, sl
   176a8:	beq	177ec <__assert_fail@plt+0x5c40>
   176ac:	ldrb	r3, [r6]
   176b0:	cmp	r3, #26
   176b4:	beq	17784 <__assert_fail@plt+0x5bd8>
   176b8:	add	r9, r9, #1
   176bc:	mov	r3, r9
   176c0:	str	r9, [r4, #24]
   176c4:	cmp	r3, sl
   176c8:	beq	17710 <__assert_fail@plt+0x5b64>
   176cc:	ldr	r2, [r4, #8]
   176d0:	ldrb	r2, [r2, r3]
   176d4:	cmp	r2, #26
   176d8:	beq	17704 <__assert_fail@plt+0x5b58>
   176dc:	add	r2, r3, #1
   176e0:	mov	r3, r2
   176e4:	str	r2, [r4, #24]
   176e8:	cmp	r3, sl
   176ec:	beq	17758 <__assert_fail@plt+0x5bac>
   176f0:	ldr	r2, [r4, #8]
   176f4:	ldrb	r2, [r2, r3]
   176f8:	cmp	r2, #26
   176fc:	addne	r3, r3, #1
   17700:	strne	r3, [r4, #24]
   17704:	mov	r3, #7
   17708:	str	r3, [r4, #32]
   1770c:	b	16594 <__assert_fail@plt+0x49e8>
   17710:	cmp	sl, #0
   17714:	beq	176e8 <__assert_fail@plt+0x5b3c>
   17718:	mov	r0, r4
   1771c:	bl	16378 <__assert_fail@plt+0x47cc>
   17720:	cmp	r0, #0
   17724:	ldrlt	r3, [r4, #24]
   17728:	ldrlt	sl, [r4, #16]
   1772c:	blt	176e8 <__assert_fail@plt+0x5b3c>
   17730:	ldr	sl, [r4, #16]
   17734:	ldr	r3, [r4, #24]
   17738:	cmp	sl, #0
   1773c:	beq	176e8 <__assert_fail@plt+0x5b3c>
   17740:	ldr	r2, [r4, #8]
   17744:	ldrb	r2, [r2, r3]
   17748:	cmp	r2, #26
   1774c:	bne	176dc <__assert_fail@plt+0x5b30>
   17750:	cmp	r3, sl
   17754:	bne	17704 <__assert_fail@plt+0x5b58>
   17758:	cmp	sl, #0
   1775c:	beq	17704 <__assert_fail@plt+0x5b58>
   17760:	mov	r0, r4
   17764:	bl	16378 <__assert_fail@plt+0x47cc>
   17768:	cmp	r0, #0
   1776c:	blt	17704 <__assert_fail@plt+0x5b58>
   17770:	ldr	r3, [r4, #16]
   17774:	cmp	r3, #0
   17778:	beq	17704 <__assert_fail@plt+0x5b58>
   1777c:	ldr	r3, [r4, #24]
   17780:	b	176f0 <__assert_fail@plt+0x5b44>
   17784:	ldr	r3, [r4, #24]
   17788:	b	17750 <__assert_fail@plt+0x5ba4>
   1778c:	mov	r5, #10
   17790:	b	177b4 <__assert_fail@plt+0x5c08>
   17794:	ldr	r2, [r4, #8]
   17798:	ldrb	r2, [r2, r3]
   1779c:	cmp	r2, #26
   177a0:	addne	r3, r3, #1
   177a4:	strne	r3, [r4, #24]
   177a8:	subs	r5, r5, #1
   177ac:	beq	17838 <__assert_fail@plt+0x5c8c>
   177b0:	ldr	sl, [r4, #16]
   177b4:	ldr	r3, [r4, #24]
   177b8:	cmp	r3, sl
   177bc:	bne	17794 <__assert_fail@plt+0x5be8>
   177c0:	cmp	sl, #0
   177c4:	beq	177a8 <__assert_fail@plt+0x5bfc>
   177c8:	mov	r0, r4
   177cc:	bl	16378 <__assert_fail@plt+0x47cc>
   177d0:	cmp	r0, #0
   177d4:	blt	177a8 <__assert_fail@plt+0x5bfc>
   177d8:	ldr	sl, [r4, #16]
   177dc:	cmp	sl, #0
   177e0:	beq	177a8 <__assert_fail@plt+0x5bfc>
   177e4:	ldr	r3, [r4, #24]
   177e8:	b	17794 <__assert_fail@plt+0x5be8>
   177ec:	cmp	sl, #0
   177f0:	ldreq	r3, [r4, #24]
   177f4:	beq	176c4 <__assert_fail@plt+0x5b18>
   177f8:	mov	r0, r4
   177fc:	bl	16378 <__assert_fail@plt+0x47cc>
   17800:	cmp	r0, #0
   17804:	ldrlt	r3, [r4, #24]
   17808:	ldrlt	sl, [r4, #16]
   1780c:	blt	176c4 <__assert_fail@plt+0x5b18>
   17810:	ldr	sl, [r4, #16]
   17814:	ldr	r3, [r4, #24]
   17818:	cmp	sl, #0
   1781c:	beq	176c4 <__assert_fail@plt+0x5b18>
   17820:	ldr	r2, [r4, #8]
   17824:	mov	r9, r3
   17828:	ldrb	r2, [r2, r3]
   1782c:	cmp	r2, #26
   17830:	bne	176b8 <__assert_fail@plt+0x5b0c>
   17834:	b	176c4 <__assert_fail@plt+0x5b18>
   17838:	mov	r3, #9
   1783c:	str	r3, [r4, #32]
   17840:	b	16594 <__assert_fail@plt+0x49e8>
   17844:	cmp	sl, #0
   17848:	beq	173fc <__assert_fail@plt+0x5850>
   1784c:	mov	r0, r4
   17850:	bl	16378 <__assert_fail@plt+0x47cc>
   17854:	cmp	r0, #0
   17858:	blt	173fc <__assert_fail@plt+0x5850>
   1785c:	ldr	sl, [r4, #16]
   17860:	cmp	sl, #0
   17864:	beq	173fc <__assert_fail@plt+0x5850>
   17868:	ldr	r2, [r4, #8]
   1786c:	b	173d8 <__assert_fail@plt+0x582c>
   17870:	cmp	r8, r6
   17874:	beq	17ad4 <__assert_fail@plt+0x5f28>
   17878:	ldr	r3, [sp, #28]
   1787c:	strb	fp, [r9, r8]
   17880:	cmp	r3, #0
   17884:	add	r8, r8, #1
   17888:	beq	17acc <__assert_fail@plt+0x5f20>
   1788c:	ldr	r3, [sp, #24]
   17890:	cmp	r5, r3
   17894:	beq	1799c <__assert_fail@plt+0x5df0>
   17898:	ldr	r3, [sp, #16]
   1789c:	ldr	sl, [r4, #16]
   178a0:	str	fp, [r3, r5, lsl #2]
   178a4:	add	r5, r5, #1
   178a8:	b	17380 <__assert_fail@plt+0x57d4>
   178ac:	mov	r7, r8
   178b0:	b	178fc <__assert_fail@plt+0x5d50>
   178b4:	ldr	r3, [r4, #8]
   178b8:	ldrb	r1, [r3, r2]
   178bc:	cmp	r1, #26
   178c0:	beq	173fc <__assert_fail@plt+0x5850>
   178c4:	add	r1, r2, #1
   178c8:	str	r1, [r4, #24]
   178cc:	ldrb	fp, [r3, r2]
   178d0:	cmp	fp, #62	; 0x3e
   178d4:	beq	179e0 <__assert_fail@plt+0x5e34>
   178d8:	cmp	fp, #10
   178dc:	beq	173fc <__assert_fail@plt+0x5850>
   178e0:	ldrb	r2, [r4, #29]
   178e4:	cmp	r2, fp
   178e8:	beq	17b08 <__assert_fail@plt+0x5f5c>
   178ec:	cmp	r7, r6
   178f0:	beq	17aec <__assert_fail@plt+0x5f40>
   178f4:	strb	fp, [r9, r7]
   178f8:	add	r7, r7, #1
   178fc:	ldr	r2, [r4, #24]
   17900:	cmp	r2, sl
   17904:	bne	178b4 <__assert_fail@plt+0x5d08>
   17908:	cmp	sl, #0
   1790c:	beq	173fc <__assert_fail@plt+0x5850>
   17910:	mov	r0, r4
   17914:	bl	16378 <__assert_fail@plt+0x47cc>
   17918:	cmp	r0, #0
   1791c:	blt	173fc <__assert_fail@plt+0x5850>
   17920:	ldr	sl, [r4, #16]
   17924:	cmp	sl, #0
   17928:	beq	173fc <__assert_fail@plt+0x5850>
   1792c:	ldr	r2, [r4, #24]
   17930:	b	178b4 <__assert_fail@plt+0x5d08>
   17934:	ldr	r3, [sp, #20]
   17938:	mov	r7, r5
   1793c:	cmp	r3, #0
   17940:	ldr	fp, [sp, #12]
   17944:	bne	1741c <__assert_fail@plt+0x5870>
   17948:	cmp	r8, r6
   1794c:	beq	179cc <__assert_fail@plt+0x5e20>
   17950:	ldr	r3, [sp, #28]
   17954:	add	r5, r8, #1
   17958:	cmp	r3, #0
   1795c:	mov	r3, #0
   17960:	strb	r3, [r9, r8]
   17964:	beq	17264 <__assert_fail@plt+0x56b8>
   17968:	ldr	r2, [sp, #24]
   1796c:	cmp	r7, r2
   17970:	beq	179b8 <__assert_fail@plt+0x5e0c>
   17974:	ldr	r0, [sp, #16]
   17978:	mov	r3, #0
   1797c:	lsl	r1, r7, #2
   17980:	str	r3, [r0, r7, lsl #2]
   17984:	add	r1, r1, #4
   17988:	bl	1864c <__assert_fail@plt+0x6aa0>
   1798c:	add	r3, r7, #1
   17990:	str	r3, [r4, #48]	; 0x30
   17994:	str	r0, [r4, #44]	; 0x2c
   17998:	b	17264 <__assert_fail@plt+0x56b8>
   1799c:	ldr	r0, [sp, #16]
   179a0:	lsl	r1, r5, #3
   179a4:	bl	1864c <__assert_fail@plt+0x6aa0>
   179a8:	lsl	sl, r5, #1
   179ac:	str	sl, [sp, #24]
   179b0:	str	r0, [sp, #16]
   179b4:	b	17898 <__assert_fail@plt+0x5cec>
   179b8:	ldr	r0, [sp, #16]
   179bc:	lsl	r1, r7, #3
   179c0:	bl	1864c <__assert_fail@plt+0x6aa0>
   179c4:	str	r0, [sp, #16]
   179c8:	b	17974 <__assert_fail@plt+0x5dc8>
   179cc:	mov	r0, r9
   179d0:	lsl	r1, r8, #1
   179d4:	bl	1864c <__assert_fail@plt+0x6aa0>
   179d8:	mov	r9, r0
   179dc:	b	17950 <__assert_fail@plt+0x5da4>
   179e0:	cmp	r8, r7
   179e4:	beq	17c28 <__assert_fail@plt+0x607c>
   179e8:	ldrb	r2, [r9, r8]
   179ec:	add	sl, r9, r8
   179f0:	sub	fp, r7, r8
   179f4:	cmp	r2, #85	; 0x55
   179f8:	bne	17a08 <__assert_fail@plt+0x5e5c>
   179fc:	sub	r2, fp, #5
   17a00:	bics	r3, r2, #4
   17a04:	beq	17c34 <__assert_fail@plt+0x6088>
   17a08:	mov	r2, fp
   17a0c:	mov	r1, sl
   17a10:	ldr	r0, [sp, #4]
   17a14:	bl	15924 <__assert_fail@plt+0x3d78>
   17a18:	subs	r3, r0, #0
   17a1c:	mov	r7, r3
   17a20:	beq	17b38 <__assert_fail@plt+0x5f8c>
   17a24:	ldr	r3, [sp, #28]
   17a28:	cmp	r3, #0
   17a2c:	beq	17a80 <__assert_fail@plt+0x5ed4>
   17a30:	ldr	r3, [r7, #4]
   17a34:	cmn	r3, #2
   17a38:	bne	17a58 <__assert_fail@plt+0x5eac>
   17a3c:	mov	r2, fp
   17a40:	mov	r1, sl
   17a44:	ldr	r0, [sp, #8]
   17a48:	bl	17eb4 <__assert_fail@plt+0x6308>
   17a4c:	mov	r2, r7
   17a50:	mov	r3, r0
   17a54:	str	r0, [r2, #4]
   17a58:	cmn	r3, #1
   17a5c:	beq	17bac <__assert_fail@plt+0x6000>
   17a60:	ldr	r2, [sp, #24]
   17a64:	cmp	r5, r2
   17a68:	beq	17b88 <__assert_fail@plt+0x5fdc>
   17a6c:	ldr	r2, [sp, #16]
   17a70:	str	r3, [r2, r5, lsl #2]
   17a74:	add	r5, r5, #1
   17a78:	cmp	r7, #0
   17a7c:	beq	17acc <__assert_fail@plt+0x5f20>
   17a80:	ldr	r2, [r7, #8]
   17a84:	add	fp, r8, r2
   17a88:	cmp	r6, fp
   17a8c:	bcs	17abc <__assert_fail@plt+0x5f10>
   17a90:	lsl	r6, r6, #1
   17a94:	cmp	r8, r2
   17a98:	mov	r0, r9
   17a9c:	mov	r1, r6
   17aa0:	movcc	r8, r2
   17aa4:	str	r2, [sp, #36]	; 0x24
   17aa8:	bl	1864c <__assert_fail@plt+0x6aa0>
   17aac:	ldr	r2, [sp, #36]	; 0x24
   17ab0:	add	fp, r8, r2
   17ab4:	mov	r9, r0
   17ab8:	add	sl, r0, r8
   17abc:	add	r1, r7, #12
   17ac0:	mov	r0, sl
   17ac4:	bl	11864 <memcpy@plt>
   17ac8:	mov	r8, fp
   17acc:	ldr	sl, [r4, #16]
   17ad0:	b	17380 <__assert_fail@plt+0x57d4>
   17ad4:	lsl	r6, r8, #1
   17ad8:	mov	r0, r9
   17adc:	mov	r1, r6
   17ae0:	bl	1864c <__assert_fail@plt+0x6aa0>
   17ae4:	mov	r9, r0
   17ae8:	b	17878 <__assert_fail@plt+0x5ccc>
   17aec:	lsl	r6, r7, #1
   17af0:	mov	r0, r9
   17af4:	mov	r1, r6
   17af8:	bl	1864c <__assert_fail@plt+0x6aa0>
   17afc:	ldr	sl, [r4, #16]
   17b00:	mov	r9, r0
   17b04:	b	178f4 <__assert_fail@plt+0x5d48>
   17b08:	cmp	sl, r1
   17b0c:	beq	17d30 <__assert_fail@plt+0x6184>
   17b10:	ldr	r2, [r4, #24]
   17b14:	ldrb	r1, [r3, r2]
   17b18:	cmp	r1, #26
   17b1c:	beq	173fc <__assert_fail@plt+0x5850>
   17b20:	add	r1, r2, #1
   17b24:	str	r1, [r4, #24]
   17b28:	ldrb	fp, [r3, r2]
   17b2c:	cmp	fp, #10
   17b30:	bne	178ec <__assert_fail@plt+0x5d40>
   17b34:	b	173fc <__assert_fail@plt+0x5850>
   17b38:	mov	r2, #5
   17b3c:	ldr	r1, [pc, #-1656]	; 174cc <__assert_fail@plt+0x5920>
   17b40:	ldr	r0, [pc, #-1644]	; 174dc <__assert_fail@plt+0x5930>
   17b44:	bl	11828 <__dcgettext@plt>
   17b48:	mov	r3, sl
   17b4c:	mov	r2, fp
   17b50:	mov	r1, r0
   17b54:	mov	r0, r4
   17b58:	bl	1612c <__assert_fail@plt+0x4580>
   17b5c:	ldr	r3, [sp, #28]
   17b60:	cmp	r3, #0
   17b64:	beq	17c18 <__assert_fail@plt+0x606c>
   17b68:	mov	r2, fp
   17b6c:	mov	r1, sl
   17b70:	ldr	r0, [sp, #8]
   17b74:	bl	17eb4 <__assert_fail@plt+0x6308>
   17b78:	mov	r2, #1
   17b7c:	str	r2, [sp, #20]
   17b80:	mov	r3, r0
   17b84:	b	17a58 <__assert_fail@plt+0x5eac>
   17b88:	ldr	r0, [sp, #16]
   17b8c:	lsl	r1, r5, #3
   17b90:	str	r3, [sp, #36]	; 0x24
   17b94:	bl	1864c <__assert_fail@plt+0x6aa0>
   17b98:	lsl	fp, r5, #1
   17b9c:	str	fp, [sp, #24]
   17ba0:	ldr	r3, [sp, #36]	; 0x24
   17ba4:	str	r0, [sp, #16]
   17ba8:	b	17a6c <__assert_fail@plt+0x5ec0>
   17bac:	mov	r2, #5
   17bb0:	ldr	r1, [pc, #-1768]	; 174d0 <__assert_fail@plt+0x5924>
   17bb4:	ldr	r0, [pc, #-1760]	; 174dc <__assert_fail@plt+0x5930>
   17bb8:	bl	11828 <__dcgettext@plt>
   17bbc:	mov	r3, sl
   17bc0:	mov	r2, fp
   17bc4:	mov	r1, r0
   17bc8:	mov	r0, r4
   17bcc:	bl	1612c <__assert_fail@plt+0x4580>
   17bd0:	mov	r3, #1
   17bd4:	str	r3, [sp, #20]
   17bd8:	b	17a78 <__assert_fail@plt+0x5ecc>
   17bdc:	ldr	r3, [sp, #8]
   17be0:	cmp	r3, #0
   17be4:	beq	17c18 <__assert_fail@plt+0x606c>
   17be8:	mov	r1, sl
   17bec:	mov	r0, r3
   17bf0:	bl	17ebc <__assert_fail@plt+0x6310>
   17bf4:	subs	sl, r0, #0
   17bf8:	beq	17c18 <__assert_fail@plt+0x606c>
   17bfc:	bl	11a08 <strlen@plt>
   17c00:	mov	r1, sl
   17c04:	mov	r2, r0
   17c08:	ldr	r0, [sp, #4]
   17c0c:	bl	15924 <__assert_fail@plt+0x3d78>
   17c10:	subs	fp, r0, #0
   17c14:	bne	17ce0 <__assert_fail@plt+0x6134>
   17c18:	mov	r3, #1
   17c1c:	str	r3, [sp, #20]
   17c20:	ldr	sl, [r4, #16]
   17c24:	b	17380 <__assert_fail@plt+0x57d4>
   17c28:	mov	r3, #1
   17c2c:	str	r3, [sp, #20]
   17c30:	b	17380 <__assert_fail@plt+0x57d4>
   17c34:	add	r2, r8, #1
   17c38:	add	r0, r9, r2
   17c3c:	mov	r1, r0
   17c40:	add	lr, r9, r7
   17c44:	b	17c68 <__assert_fail@plt+0x60bc>
   17c48:	ldrb	r3, [r1]
   17c4c:	ldr	ip, [sp, #32]
   17c50:	add	r1, r1, #1
   17c54:	ldr	ip, [ip]
   17c58:	lsl	r3, r3, #1
   17c5c:	ldrh	r3, [ip, r3]
   17c60:	tst	r3, #4096	; 0x1000
   17c64:	beq	17a08 <__assert_fail@plt+0x5e5c>
   17c68:	cmp	r1, lr
   17c6c:	bcc	17c48 <__assert_fail@plt+0x609c>
   17c70:	bne	17a08 <__assert_fail@plt+0x5e5c>
   17c74:	cmp	r7, r6
   17c78:	beq	17d5c <__assert_fail@plt+0x61b0>
   17c7c:	mov	r1, #0
   17c80:	strb	r1, [r9, r7]
   17c84:	mov	r2, #16
   17c88:	bl	119fc <strtoul@plt>
   17c8c:	ldr	r3, [sp, #28]
   17c90:	cmp	r3, #0
   17c94:	mov	sl, r0
   17c98:	beq	17cb4 <__assert_fail@plt+0x6108>
   17c9c:	ldr	r3, [sp, #24]
   17ca0:	cmp	r5, r3
   17ca4:	beq	17d80 <__assert_fail@plt+0x61d4>
   17ca8:	ldr	r3, [sp, #16]
   17cac:	str	sl, [r3, r5, lsl #2]
   17cb0:	add	r5, r5, #1
   17cb4:	mov	r3, sl
   17cb8:	ldr	r2, [pc, #-2028]	; 174d4 <__assert_fail@plt+0x5928>
   17cbc:	mov	r1, #10
   17cc0:	add	r0, sp, #40	; 0x28
   17cc4:	bl	11a50 <snprintf@plt>
   17cc8:	add	r1, sp, #40	; 0x28
   17ccc:	mov	r2, #9
   17cd0:	ldr	r0, [sp, #4]
   17cd4:	bl	15924 <__assert_fail@plt+0x3d78>
   17cd8:	subs	fp, r0, #0
   17cdc:	beq	17bdc <__assert_fail@plt+0x6030>
   17ce0:	ldr	r2, [fp, #8]
   17ce4:	add	sl, r8, r2
   17ce8:	cmp	sl, r6
   17cec:	bls	17d18 <__assert_fail@plt+0x616c>
   17cf0:	lsl	r6, r6, #1
   17cf4:	cmp	r8, r2
   17cf8:	mov	r0, r9
   17cfc:	mov	r1, r6
   17d00:	movcc	r8, r2
   17d04:	str	r2, [sp, #36]	; 0x24
   17d08:	bl	1864c <__assert_fail@plt+0x6aa0>
   17d0c:	ldr	r2, [sp, #36]	; 0x24
   17d10:	add	sl, r8, r2
   17d14:	mov	r9, r0
   17d18:	add	r0, r9, r8
   17d1c:	add	r1, fp, #12
   17d20:	bl	11864 <memcpy@plt>
   17d24:	mov	r8, sl
   17d28:	ldr	sl, [r4, #16]
   17d2c:	b	17380 <__assert_fail@plt+0x57d4>
   17d30:	cmp	sl, #0
   17d34:	beq	173fc <__assert_fail@plt+0x5850>
   17d38:	mov	r0, r4
   17d3c:	bl	16378 <__assert_fail@plt+0x47cc>
   17d40:	cmp	r0, #0
   17d44:	blt	173fc <__assert_fail@plt+0x5850>
   17d48:	ldr	sl, [r4, #16]
   17d4c:	cmp	sl, #0
   17d50:	beq	173fc <__assert_fail@plt+0x5850>
   17d54:	ldr	r3, [r4, #8]
   17d58:	b	17b10 <__assert_fail@plt+0x5f64>
   17d5c:	lsl	r6, r7, #1
   17d60:	mov	r0, r9
   17d64:	mov	r1, r6
   17d68:	str	r2, [sp, #36]	; 0x24
   17d6c:	bl	1864c <__assert_fail@plt+0x6aa0>
   17d70:	ldr	r2, [sp, #36]	; 0x24
   17d74:	mov	r9, r0
   17d78:	add	r0, r0, r2
   17d7c:	b	17c7c <__assert_fail@plt+0x60d0>
   17d80:	ldr	r0, [sp, #16]
   17d84:	lsl	r1, r5, #3
   17d88:	bl	1864c <__assert_fail@plt+0x6aa0>
   17d8c:	lsl	fp, r5, #1
   17d90:	str	fp, [sp, #24]
   17d94:	str	r0, [sp, #16]
   17d98:	b	17ca8 <__assert_fail@plt+0x60fc>
   17d9c:	cmp	r9, #10
   17da0:	mov	sl, r3
   17da4:	bne	16a7c <__assert_fail@plt+0x4ed0>
   17da8:	b	16a60 <__assert_fail@plt+0x4eb4>
   17dac:	lsl	r8, r8, #1
   17db0:	mov	r0, r6
   17db4:	mov	r1, r8
   17db8:	str	r2, [sp, #4]
   17dbc:	bl	1864c <__assert_fail@plt+0x6aa0>
   17dc0:	ldr	r2, [sp, #4]
   17dc4:	mov	r6, r0
   17dc8:	b	169ac <__assert_fail@plt+0x4e00>
   17dcc:	mov	r6, r7
   17dd0:	mov	r7, r9
   17dd4:	mov	r9, ip
   17dd8:	b	16894 <__assert_fail@plt+0x4ce8>
   17ddc:	mov	r2, r3
   17de0:	mov	fp, r8
   17de4:	b	16df8 <__assert_fail@plt+0x524c>
   17de8:	cmp	r9, sl
   17dec:	beq	17e30 <__assert_fail@plt+0x6284>
   17df0:	ldr	r3, [r4, #24]
   17df4:	ldrb	r2, [r8, r3]
   17df8:	cmp	r2, #26
   17dfc:	beq	17e1c <__assert_fail@plt+0x6270>
   17e00:	add	r2, r3, #1
   17e04:	str	r2, [r4, #24]
   17e08:	ldrb	r3, [r8, r3]
   17e0c:	cmp	r3, #49	; 0x31
   17e10:	moveq	r3, #17
   17e14:	streq	r3, [r4, #32]
   17e18:	beq	16594 <__assert_fail@plt+0x49e8>
   17e1c:	ldr	r3, [r4, #24]
   17e20:	cmp	r3, #1
   17e24:	subhi	r3, r3, #2
   17e28:	strhi	r3, [r4, #24]
   17e2c:	b	16734 <__assert_fail@plt+0x4b88>
   17e30:	cmp	r9, #0
   17e34:	beq	17e1c <__assert_fail@plt+0x6270>
   17e38:	mov	r0, r4
   17e3c:	bl	16378 <__assert_fail@plt+0x47cc>
   17e40:	cmp	r0, #0
   17e44:	blt	17e1c <__assert_fail@plt+0x6270>
   17e48:	ldr	r3, [r4, #16]
   17e4c:	cmp	r3, #0
   17e50:	beq	17e1c <__assert_fail@plt+0x6270>
   17e54:	ldr	r8, [r4, #8]
   17e58:	b	17df0 <__assert_fail@plt+0x6244>
   17e5c:	mov	r3, #11
   17e60:	str	r3, [r4, #32]
   17e64:	b	16594 <__assert_fail@plt+0x49e8>
   17e68:	ldrh	r3, [r0, r1]
   17e6c:	tst	r3, #1024	; 0x400
   17e70:	bne	17e94 <__assert_fail@plt+0x62e8>
   17e74:	ldr	r3, [r4, #24]
   17e78:	cmp	r3, #0
   17e7c:	subne	r3, r3, #1
   17e80:	strne	r3, [r4, #24]
   17e84:	b	16594 <__assert_fail@plt+0x49e8>
   17e88:	mvn	r1, #1
   17e8c:	mvn	r2, #0
   17e90:	b	17500 <__assert_fail@plt+0x5954>
   17e94:	mov	r2, #5
   17e98:	ldr	r1, [pc, #-2504]	; 174d8 <__assert_fail@plt+0x592c>
   17e9c:	ldr	r0, [pc, #-2504]	; 174dc <__assert_fail@plt+0x5930>
   17ea0:	bl	11828 <__dcgettext@plt>
   17ea4:	mov	r1, r0
   17ea8:	mov	r0, r4
   17eac:	bl	1612c <__assert_fail@plt+0x4580>
   17eb0:	b	17e74 <__assert_fail@plt+0x62c8>
   17eb4:	mvn	r0, #0
   17eb8:	bx	lr
   17ebc:	mov	r0, #0
   17ec0:	bx	lr
   17ec4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ec8:	mov	r9, r0
   17ecc:	ldr	r8, [sp, #40]	; 0x28
   17ed0:	mov	r6, r1
   17ed4:	mov	r0, r8
   17ed8:	mov	r1, r9
   17edc:	mov	sl, r2
   17ee0:	mov	fp, r3
   17ee4:	bl	18cf8 <__assert_fail@plt+0x714c>
   17ee8:	add	r4, r1, #1
   17eec:	add	r3, r4, r4, lsl #2
   17ef0:	lsl	r3, r3, #2
   17ef4:	add	r2, r6, r3
   17ef8:	ldr	r3, [r6, r3]
   17efc:	cmp	r3, #0
   17f00:	beq	17f70 <__assert_fail@plt+0x63c4>
   17f04:	cmp	r8, r3
   17f08:	beq	17f78 <__assert_fail@plt+0x63cc>
   17f0c:	sub	r1, r9, #2
   17f10:	mov	r0, r8
   17f14:	bl	18cf8 <__assert_fail@plt+0x714c>
   17f18:	add	r7, r1, #1
   17f1c:	sub	r9, r9, r7
   17f20:	b	17f2c <__assert_fail@plt+0x6380>
   17f24:	cmp	r5, #0
   17f28:	beq	17f70 <__assert_fail@plt+0x63c4>
   17f2c:	cmp	r7, r4
   17f30:	addcs	r4, r4, r9
   17f34:	subcc	r4, r4, r7
   17f38:	add	r2, r4, r4, lsl #2
   17f3c:	ldr	r5, [r6, r2, lsl #2]
   17f40:	add	r2, r6, r2, lsl #2
   17f44:	cmp	r8, r5
   17f48:	bne	17f24 <__assert_fail@plt+0x6378>
   17f4c:	ldr	r3, [r2, #8]
   17f50:	cmp	fp, r3
   17f54:	bne	17f24 <__assert_fail@plt+0x6378>
   17f58:	ldr	r0, [r2, #4]
   17f5c:	mov	r1, sl
   17f60:	mov	r2, fp
   17f64:	bl	1187c <memcmp@plt>
   17f68:	cmp	r0, #0
   17f6c:	bne	17f24 <__assert_fail@plt+0x6378>
   17f70:	mov	r0, r4
   17f74:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f78:	ldr	r3, [r2, #8]
   17f7c:	cmp	r3, fp
   17f80:	bne	17f0c <__assert_fail@plt+0x6360>
   17f84:	ldr	r0, [r2, #4]
   17f88:	mov	r1, sl
   17f8c:	mov	r2, fp
   17f90:	bl	1187c <memcmp@plt>
   17f94:	cmp	r0, #0
   17f98:	bne	17f0c <__assert_fail@plt+0x6360>
   17f9c:	b	17f70 <__assert_fail@plt+0x63c4>
   17fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa4:	sub	sp, sp, #20
   17fa8:	ldr	fp, [r0, #12]
   17fac:	ldr	ip, [sp, #56]	; 0x38
   17fb0:	ldr	lr, [r0, #8]
   17fb4:	ldr	r4, [sp, #60]	; 0x3c
   17fb8:	add	ip, ip, ip, lsl #2
   17fbc:	cmp	lr, #0
   17fc0:	lsl	ip, ip, #2
   17fc4:	ldr	sl, [r0]
   17fc8:	str	r3, [fp, ip]
   17fcc:	add	r3, fp, ip
   17fd0:	stmib	r3, {r1, r2, r4}
   17fd4:	ldrne	r2, [lr, #16]
   17fd8:	streq	r3, [r3, #16]
   17fdc:	strne	r2, [r3, #16]
   17fe0:	strne	r3, [lr, #16]
   17fe4:	str	r3, [r0, #8]
   17fe8:	ldr	r3, [r0, #4]
   17fec:	lsl	r2, sl, #2
   17ff0:	add	r3, r3, #1
   17ff4:	str	r3, [r0, #4]
   17ff8:	add	r3, r3, r3, lsl #2
   17ffc:	str	r2, [sp, #12]
   18000:	add	r2, r2, sl
   18004:	add	r3, r3, r3, lsl #2
   18008:	rsb	r2, r2, r2, lsl #4
   1800c:	cmp	r2, r3, lsl #2
   18010:	bcs	18090 <__assert_fail@plt+0x64e4>
   18014:	lsl	r3, sl, #1
   18018:	ldr	r9, [pc, #276]	; 18134 <__assert_fail@plt+0x6588>
   1801c:	mov	r7, r0
   18020:	orr	r8, r3, #1
   18024:	umull	r3, r2, r9, r8
   18028:	cmp	r8, #9
   1802c:	lsr	r2, r2, #1
   18030:	add	r2, r2, r2, lsl #1
   18034:	sub	r2, r8, r2
   18038:	bls	18080 <__assert_fail@plt+0x64d4>
   1803c:	cmp	r2, #0
   18040:	beq	18088 <__assert_fail@plt+0x64dc>
   18044:	mov	r6, #16
   18048:	mov	r5, #9
   1804c:	mov	r4, #3
   18050:	b	18060 <__assert_fail@plt+0x64b4>
   18054:	cmp	r1, #0
   18058:	add	r6, r6, #8
   1805c:	beq	18088 <__assert_fail@plt+0x64dc>
   18060:	add	r4, r4, #2
   18064:	mov	r1, r4
   18068:	mov	r0, r8
   1806c:	bl	18cf8 <__assert_fail@plt+0x714c>
   18070:	add	r5, r5, r6
   18074:	cmp	r8, r5
   18078:	mov	r2, r1
   1807c:	bhi	18054 <__assert_fail@plt+0x64a8>
   18080:	cmp	r2, #0
   18084:	bne	18098 <__assert_fail@plt+0x64ec>
   18088:	add	r8, r8, #2
   1808c:	b	18024 <__assert_fail@plt+0x6478>
   18090:	add	sp, sp, #20
   18094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18098:	mov	r2, #0
   1809c:	str	r8, [r7]
   180a0:	add	r0, r8, #1
   180a4:	str	r2, [r7, #4]
   180a8:	str	r2, [r7, #8]
   180ac:	mov	r1, #20
   180b0:	bl	1862c <__assert_fail@plt+0x6a80>
   180b4:	cmp	sl, #0
   180b8:	str	r0, [r7, #12]
   180bc:	beq	180e8 <__assert_fail@plt+0x653c>
   180c0:	ldr	r3, [sp, #12]
   180c4:	mov	r4, fp
   180c8:	add	r5, r3, sl
   180cc:	add	r5, fp, r5, lsl #2
   180d0:	ldr	r6, [r4, #20]
   180d4:	cmp	r6, #0
   180d8:	bne	180f8 <__assert_fail@plt+0x654c>
   180dc:	add	r4, r4, #20
   180e0:	cmp	r4, r5
   180e4:	bne	180d0 <__assert_fail@plt+0x6524>
   180e8:	mov	r0, fp
   180ec:	add	sp, sp, #20
   180f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180f4:	b	11840 <free@plt>
   180f8:	ldrd	r8, [r4, #24]
   180fc:	str	r6, [sp]
   18100:	ldr	r1, [r7, #12]
   18104:	mov	r2, r8
   18108:	mov	r3, r9
   1810c:	ldr	r0, [r7]
   18110:	bl	17ec4 <__assert_fail@plt+0x6318>
   18114:	ldr	ip, [r4, #32]
   18118:	mov	r2, r9
   1811c:	mov	r1, r8
   18120:	mov	r3, r6
   18124:	stm	sp, {r0, ip}
   18128:	mov	r0, r7
   1812c:	bl	17fa0 <__assert_fail@plt+0x63f4>
   18130:	b	180dc <__assert_fail@plt+0x6530>
   18134:	bge	feac2be8 <stdout@@GLIBC_2.4+0xfea97a24>
   18138:	cmp	r1, #0
   1813c:	beq	1816c <__assert_fail@plt+0x65c0>
   18140:	add	ip, r0, r1
   18144:	sub	r3, r0, #1
   18148:	sub	ip, ip, #1
   1814c:	mov	r0, r1
   18150:	ldrb	r2, [r3, #1]!
   18154:	cmp	r3, ip
   18158:	add	r0, r2, r0, ror #23
   1815c:	bne	18150 <__assert_fail@plt+0x65a4>
   18160:	cmp	r0, #0
   18164:	mvneq	r0, #0
   18168:	bx	lr
   1816c:	mvn	r0, #0
   18170:	bx	lr
   18174:	push	{r4, r5, r6, r7, r8, r9, lr}
   18178:	mov	r9, r0
   1817c:	ldr	r8, [pc, #200]	; 1824c <__assert_fail@plt+0x66a0>
   18180:	sub	sp, sp, #12
   18184:	orr	r7, r1, #1
   18188:	umull	r2, r3, r8, r7
   1818c:	cmp	r7, #9
   18190:	lsr	r3, r3, #1
   18194:	add	r3, r3, r3, lsl #1
   18198:	sub	r3, r7, r3
   1819c:	bls	181e4 <__assert_fail@plt+0x6638>
   181a0:	cmp	r3, #0
   181a4:	beq	181ec <__assert_fail@plt+0x6640>
   181a8:	mov	r6, #16
   181ac:	mov	r5, #9
   181b0:	mov	r4, #3
   181b4:	b	181c4 <__assert_fail@plt+0x6618>
   181b8:	cmp	r1, #0
   181bc:	add	r6, r6, #8
   181c0:	beq	181ec <__assert_fail@plt+0x6640>
   181c4:	add	r4, r4, #2
   181c8:	mov	r1, r4
   181cc:	mov	r0, r7
   181d0:	bl	18cf8 <__assert_fail@plt+0x714c>
   181d4:	add	r5, r5, r6
   181d8:	cmp	r7, r5
   181dc:	mov	r3, r1
   181e0:	bhi	181b8 <__assert_fail@plt+0x660c>
   181e4:	cmp	r3, #0
   181e8:	bne	181f4 <__assert_fail@plt+0x6648>
   181ec:	add	r7, r7, #2
   181f0:	b	18188 <__assert_fail@plt+0x65dc>
   181f4:	mov	r4, #0
   181f8:	str	r7, [r9]
   181fc:	add	r0, r7, #1
   18200:	str	r4, [r9, #4]
   18204:	str	r4, [r9, #8]
   18208:	mov	r1, #20
   1820c:	bl	1862c <__assert_fail@plt+0x6a80>
   18210:	cmp	r0, r4
   18214:	str	r0, [r9, #12]
   18218:	beq	18244 <__assert_fail@plt+0x6698>
   1821c:	ldr	r3, [pc, #44]	; 18250 <__assert_fail@plt+0x66a4>
   18220:	add	r0, r9, #16
   18224:	str	r3, [sp]
   18228:	mov	r2, r4
   1822c:	ldr	r3, [pc, #32]	; 18254 <__assert_fail@plt+0x66a8>
   18230:	mov	r1, r4
   18234:	bl	118c4 <_obstack_begin@plt>
   18238:	mov	r0, r4
   1823c:	add	sp, sp, #12
   18240:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18244:	mvn	r0, #0
   18248:	b	1823c <__assert_fail@plt+0x6690>
   1824c:	bge	feac2d00 <stdout@@GLIBC_2.4+0xfea97b3c>
   18250:	andeq	r1, r1, r0, asr #16
   18254:	andeq	r1, r1, r8, ror r9
   18258:	push	{r4, lr}
   1825c:	mov	r4, r0
   18260:	ldr	r0, [r0, #12]
   18264:	bl	11840 <free@plt>
   18268:	add	r0, r4, #16
   1826c:	mov	r1, #0
   18270:	bl	118b8 <obstack_free@plt>
   18274:	mov	r0, #0
   18278:	pop	{r4, pc}
   1827c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18280:	subs	r6, r2, #0
   18284:	sub	sp, sp, #8
   18288:	mov	r5, r0
   1828c:	mov	r9, r1
   18290:	mov	r7, r3
   18294:	beq	1838c <__assert_fail@plt+0x67e0>
   18298:	sub	r1, r6, #1
   1829c:	add	r1, r9, r1
   182a0:	sub	r3, r9, #1
   182a4:	mov	r4, r6
   182a8:	ldrb	r2, [r3, #1]!
   182ac:	cmp	r1, r3
   182b0:	add	r4, r2, r4, ror #23
   182b4:	bne	182a8 <__assert_fail@plt+0x66fc>
   182b8:	cmp	r4, #0
   182bc:	mvneq	r4, #0
   182c0:	ldr	sl, [r5, #12]
   182c4:	mov	r3, r6
   182c8:	str	r4, [sp]
   182cc:	mov	r1, sl
   182d0:	mov	r2, r9
   182d4:	ldr	r0, [r5]
   182d8:	bl	17ec4 <__assert_fail@plt+0x6318>
   182dc:	add	r3, r0, r0, lsl #2
   182e0:	mov	r8, r0
   182e4:	ldr	r3, [sl, r3, lsl #2]
   182e8:	cmp	r3, #0
   182ec:	bne	18394 <__assert_fail@plt+0x67e8>
   182f0:	ldr	r0, [r5, #28]
   182f4:	ldr	r2, [r5, #32]
   182f8:	add	r3, r0, r6
   182fc:	cmp	r2, r3
   18300:	bcc	18378 <__assert_fail@plt+0x67cc>
   18304:	mov	r2, r6
   18308:	mov	r1, r9
   1830c:	bl	11864 <memcpy@plt>
   18310:	ldr	r3, [r5, #28]
   18314:	ldr	r1, [r5, #24]
   18318:	add	r3, r3, r6
   1831c:	cmp	r3, r1
   18320:	ldr	r0, [r5, #32]
   18324:	ldrbeq	r2, [r5, #56]	; 0x38
   18328:	str	r3, [r5, #28]
   1832c:	orreq	r2, r2, #2
   18330:	strbeq	r2, [r5, #56]	; 0x38
   18334:	ldr	r2, [r5, #40]	; 0x28
   18338:	add	r3, r3, r2
   1833c:	bic	r3, r3, r2
   18340:	cmp	r3, r0
   18344:	str	r3, [r5, #28]
   18348:	movhi	r3, r0
   1834c:	strhi	r0, [r5, #28]
   18350:	str	r3, [r5, #24]
   18354:	mov	r0, r5
   18358:	str	r7, [sp, #4]
   1835c:	str	r8, [sp]
   18360:	mov	r3, r4
   18364:	mov	r2, r6
   18368:	bl	17fa0 <__assert_fail@plt+0x63f4>
   1836c:	mov	r0, #0
   18370:	add	sp, sp, #8
   18374:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18378:	add	r0, r5, #16
   1837c:	mov	r1, r6
   18380:	bl	11888 <_obstack_newchunk@plt>
   18384:	ldr	r0, [r5, #28]
   18388:	b	18304 <__assert_fail@plt+0x6758>
   1838c:	mvn	r4, #0
   18390:	b	182c0 <__assert_fail@plt+0x6714>
   18394:	mvn	r0, #0
   18398:	b	18370 <__assert_fail@plt+0x67c4>
   1839c:	cmp	r2, #0
   183a0:	push	{r4, r5, r6, lr}
   183a4:	mov	r6, r3
   183a8:	sub	sp, sp, #8
   183ac:	ldr	r5, [r0, #12]
   183b0:	beq	18420 <__assert_fail@plt+0x6874>
   183b4:	sub	r4, r2, #1
   183b8:	add	r4, r1, r4
   183bc:	sub	r3, r1, #1
   183c0:	mov	ip, r2
   183c4:	ldrb	lr, [r3, #1]!
   183c8:	cmp	r3, r4
   183cc:	add	ip, lr, ip, ror #23
   183d0:	bne	183c4 <__assert_fail@plt+0x6818>
   183d4:	cmp	ip, #0
   183d8:	mvneq	ip, #0
   183dc:	str	ip, [sp]
   183e0:	mov	r3, r2
   183e4:	ldr	r0, [r0]
   183e8:	mov	r2, r1
   183ec:	mov	r1, r5
   183f0:	bl	17ec4 <__assert_fail@plt+0x6318>
   183f4:	add	r0, r0, r0, lsl #2
   183f8:	lsl	r0, r0, #2
   183fc:	add	r2, r5, r0
   18400:	ldr	r3, [r5, r0]
   18404:	cmp	r3, #0
   18408:	movne	r0, #0
   1840c:	ldrne	r3, [r2, #12]
   18410:	mvneq	r0, #0
   18414:	strne	r3, [r6]
   18418:	add	sp, sp, #8
   1841c:	pop	{r4, r5, r6, pc}
   18420:	mvn	ip, #0
   18424:	b	183dc <__assert_fail@plt+0x6830>
   18428:	cmp	r2, #0
   1842c:	push	{r4, r5, r6, lr}
   18430:	mov	r6, r3
   18434:	sub	sp, sp, #8
   18438:	ldr	r5, [r0, #12]
   1843c:	beq	184a8 <__assert_fail@plt+0x68fc>
   18440:	sub	r4, r2, #1
   18444:	add	r4, r1, r4
   18448:	sub	r3, r1, #1
   1844c:	mov	ip, r2
   18450:	ldrb	lr, [r3, #1]!
   18454:	cmp	r3, r4
   18458:	add	ip, lr, ip, ror #23
   1845c:	bne	18450 <__assert_fail@plt+0x68a4>
   18460:	cmp	ip, #0
   18464:	mvneq	ip, #0
   18468:	str	ip, [sp]
   1846c:	mov	r3, r2
   18470:	ldr	r0, [r0]
   18474:	mov	r2, r1
   18478:	mov	r1, r5
   1847c:	bl	17ec4 <__assert_fail@plt+0x6318>
   18480:	add	r0, r0, r0, lsl #2
   18484:	lsl	r0, r0, #2
   18488:	add	r2, r5, r0
   1848c:	ldr	r3, [r5, r0]
   18490:	cmp	r3, #0
   18494:	movne	r0, #0
   18498:	mvneq	r0, #0
   1849c:	strne	r6, [r2, #12]
   184a0:	add	sp, sp, #8
   184a4:	pop	{r4, r5, r6, pc}
   184a8:	mvn	ip, #0
   184ac:	b	18468 <__assert_fail@plt+0x68bc>
   184b0:	ldr	ip, [r1]
   184b4:	ldr	r0, [r0, #8]
   184b8:	cmp	ip, #0
   184bc:	beq	184f8 <__assert_fail@plt+0x694c>
   184c0:	cmp	ip, r0
   184c4:	beq	18508 <__assert_fail@plt+0x695c>
   184c8:	ldr	r0, [ip, #16]
   184cc:	str	r0, [r1]
   184d0:	ldr	ip, [r0, #4]
   184d4:	mov	r0, #0
   184d8:	str	ip, [r2]
   184dc:	ldr	r2, [r1]
   184e0:	ldr	r1, [r2, #8]
   184e4:	ldr	r2, [r2, #12]
   184e8:	str	r1, [r3]
   184ec:	ldr	r3, [sp]
   184f0:	str	r2, [r3]
   184f4:	bx	lr
   184f8:	cmp	r0, #0
   184fc:	ldrne	r0, [r0, #16]
   18500:	strne	r0, [r1]
   18504:	bne	184d0 <__assert_fail@plt+0x6924>
   18508:	mvn	r0, #0
   1850c:	bx	lr
   18510:	push	{r4, r5, r6, r7, r8, lr}
   18514:	orr	r7, r0, #1
   18518:	ldr	r8, [pc, #112]	; 18590 <__assert_fail@plt+0x69e4>
   1851c:	umull	r2, r3, r8, r7
   18520:	cmp	r7, #9
   18524:	lsr	r3, r3, #1
   18528:	add	r3, r3, r3, lsl #1
   1852c:	sub	r3, r7, r3
   18530:	bls	18578 <__assert_fail@plt+0x69cc>
   18534:	cmp	r3, #0
   18538:	beq	18580 <__assert_fail@plt+0x69d4>
   1853c:	mov	r6, #16
   18540:	mov	r5, #9
   18544:	mov	r4, #3
   18548:	b	18558 <__assert_fail@plt+0x69ac>
   1854c:	cmp	r1, #0
   18550:	add	r6, r6, #8
   18554:	beq	18580 <__assert_fail@plt+0x69d4>
   18558:	add	r4, r4, #2
   1855c:	mov	r1, r4
   18560:	mov	r0, r7
   18564:	bl	18cf8 <__assert_fail@plt+0x714c>
   18568:	add	r5, r5, r6
   1856c:	cmp	r7, r5
   18570:	mov	r3, r1
   18574:	bhi	1854c <__assert_fail@plt+0x69a0>
   18578:	cmp	r3, #0
   1857c:	bne	18588 <__assert_fail@plt+0x69dc>
   18580:	add	r7, r7, #2
   18584:	b	1851c <__assert_fail@plt+0x6970>
   18588:	mov	r0, r7
   1858c:	pop	{r4, r5, r6, r7, r8, pc}
   18590:	bge	feac3044 <stdout@@GLIBC_2.4+0xfea97e80>
   18594:	push	{r4, lr}
   18598:	mov	r4, r0
   1859c:	bl	11a08 <strlen@plt>
   185a0:	add	r0, r0, #1
   185a4:	bl	1860c <__assert_fail@plt+0x6a60>
   185a8:	mov	r1, r4
   185ac:	pop	{r4, lr}
   185b0:	b	1193c <strcpy@plt>
   185b4:	cmp	r0, #0
   185b8:	push	{r4, lr}
   185bc:	bne	185d0 <__assert_fail@plt+0x6a24>
   185c0:	mov	r0, #1
   185c4:	bl	11978 <malloc@plt>
   185c8:	cmp	r0, #0
   185cc:	popne	{r4, pc}
   185d0:	ldr	r3, [pc, #40]	; 18600 <__assert_fail@plt+0x6a54>
   185d4:	mov	r2, #5
   185d8:	ldr	r1, [pc, #36]	; 18604 <__assert_fail@plt+0x6a58>
   185dc:	ldr	r0, [pc, #36]	; 18608 <__assert_fail@plt+0x6a5c>
   185e0:	ldr	r4, [r3]
   185e4:	bl	11828 <__dcgettext@plt>
   185e8:	mov	r1, #0
   185ec:	mov	r2, r0
   185f0:	mov	r0, r4
   185f4:	bl	11948 <error@plt>
   185f8:	mov	r0, #0
   185fc:	pop	{r4, pc}
   18600:	andeq	fp, r2, r8, lsr #3
   18604:	andeq	sl, r1, r0, asr #5
   18608:	andeq	sl, r2, r0, lsl #30
   1860c:	push	{r4, lr}
   18610:	mov	r4, r0
   18614:	bl	11978 <malloc@plt>
   18618:	cmp	r0, #0
   1861c:	popne	{r4, pc}
   18620:	mov	r0, r4
   18624:	pop	{r4, lr}
   18628:	b	185b4 <__assert_fail@plt+0x6a08>
   1862c:	push	{r4, lr}
   18630:	mov	r4, r0
   18634:	bl	1178c <calloc@plt>
   18638:	cmp	r0, #0
   1863c:	popne	{r4, pc}
   18640:	mov	r0, r4
   18644:	pop	{r4, lr}
   18648:	b	185b4 <__assert_fail@plt+0x6a08>
   1864c:	cmp	r0, #0
   18650:	push	{r4, lr}
   18654:	mov	r4, r1
   18658:	beq	18674 <__assert_fail@plt+0x6ac8>
   1865c:	bl	118d0 <realloc@plt>
   18660:	cmp	r0, #0
   18664:	popne	{r4, pc}
   18668:	mov	r0, r4
   1866c:	pop	{r4, lr}
   18670:	b	185b4 <__assert_fail@plt+0x6a08>
   18674:	mov	r0, r1
   18678:	pop	{r4, lr}
   1867c:	b	1860c <__assert_fail@plt+0x6a60>
   18680:	push	{r4, r5, r6, lr}
   18684:	bl	11a38 <__errno_location@plt>
   18688:	mov	r1, #0
   1868c:	mov	r5, r0
   18690:	mov	r0, r1
   18694:	ldr	r6, [r5]
   18698:	bl	11aec <setlocale@plt>
   1869c:	subs	r4, r0, #0
   186a0:	beq	186d0 <__assert_fail@plt+0x6b24>
   186a4:	ldr	r1, [pc, #108]	; 18718 <__assert_fail@plt+0x6b6c>
   186a8:	mov	r0, #0
   186ac:	bl	11aec <setlocale@plt>
   186b0:	subs	r1, r0, #0
   186b4:	beq	1870c <__assert_fail@plt+0x6b60>
   186b8:	str	r6, [r5]
   186bc:	mov	r0, r4
   186c0:	bl	118a0 <strdup@plt>
   186c4:	mov	r4, r0
   186c8:	mov	r0, r4
   186cc:	pop	{r4, r5, r6, pc}
   186d0:	ldr	r2, [pc, #68]	; 1871c <__assert_fail@plt+0x6b70>
   186d4:	mov	r1, r4
   186d8:	bl	11948 <error@plt>
   186dc:	ldr	r1, [pc, #52]	; 18718 <__assert_fail@plt+0x6b6c>
   186e0:	mov	r0, r4
   186e4:	bl	11aec <setlocale@plt>
   186e8:	cmp	r0, #0
   186ec:	beq	186fc <__assert_fail@plt+0x6b50>
   186f0:	str	r6, [r5]
   186f4:	mov	r0, r4
   186f8:	pop	{r4, r5, r6, pc}
   186fc:	ldr	r2, [pc, #28]	; 18720 <__assert_fail@plt+0x6b74>
   18700:	mov	r1, r4
   18704:	bl	11948 <error@plt>
   18708:	b	186f0 <__assert_fail@plt+0x6b44>
   1870c:	ldr	r2, [pc, #12]	; 18720 <__assert_fail@plt+0x6b74>
   18710:	bl	11948 <error@plt>
   18714:	b	186b8 <__assert_fail@plt+0x6b0c>
   18718:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1871c:	ldrdeq	sl, [r1], -r4
   18720:	andeq	sl, r1, ip, ror #5
   18724:	push	{r4, lr}
   18728:	subs	r4, r0, #0
   1872c:	popeq	{r4, pc}
   18730:	mov	r1, r4
   18734:	mov	r0, #0
   18738:	bl	11aec <setlocale@plt>
   1873c:	subs	r1, r0, #0
   18740:	beq	18750 <__assert_fail@plt+0x6ba4>
   18744:	mov	r0, r4
   18748:	pop	{r4, lr}
   1874c:	b	11840 <free@plt>
   18750:	mov	r3, r4
   18754:	ldr	r2, [pc, #4]	; 18760 <__assert_fail@plt+0x6bb4>
   18758:	bl	11948 <error@plt>
   1875c:	b	18744 <__assert_fail@plt+0x6b98>
   18760:	andeq	sl, r1, r4, lsl #6
   18764:	push	{r1, r2, r3}
   18768:	ldr	r3, [pc, #168]	; 18818 <__assert_fail@plt+0x6c6c>
   1876c:	push	{r4, r5, r6, r7, lr}
   18770:	sub	sp, sp, #16
   18774:	ldr	r4, [pc, #160]	; 1881c <__assert_fail@plt+0x6c70>
   18778:	ldr	r2, [r3]
   1877c:	ldr	r6, [sp, #36]	; 0x24
   18780:	ldr	r3, [r4]
   18784:	cmp	r2, #0
   18788:	str	r3, [sp, #12]
   1878c:	beq	187a0 <__assert_fail@plt+0x6bf4>
   18790:	ldr	r3, [pc, #136]	; 18820 <__assert_fail@plt+0x6c74>
   18794:	ldr	r3, [r3]
   18798:	cmp	r3, #0
   1879c:	beq	187c0 <__assert_fail@plt+0x6c14>
   187a0:	ldr	r2, [sp, #12]
   187a4:	ldr	r3, [r4]
   187a8:	cmp	r2, r3
   187ac:	bne	18810 <__assert_fail@plt+0x6c64>
   187b0:	add	sp, sp, #16
   187b4:	pop	{r4, r5, r6, r7, lr}
   187b8:	add	sp, sp, #12
   187bc:	bx	lr
   187c0:	add	r3, sp, #40	; 0x28
   187c4:	str	r3, [sp, #8]
   187c8:	mov	r5, r0
   187cc:	bl	18680 <__assert_fail@plt+0x6ad4>
   187d0:	mov	r1, r6
   187d4:	ldr	r2, [sp, #8]
   187d8:	mov	r7, r0
   187dc:	add	r0, sp, #4
   187e0:	bl	117b0 <vasprintf@plt>
   187e4:	cmn	r0, #1
   187e8:	beq	18814 <__assert_fail@plt+0x6c68>
   187ec:	mov	r0, r7
   187f0:	bl	18724 <__assert_fail@plt+0x6b78>
   187f4:	mov	r0, r5
   187f8:	ldr	r2, [sp, #4]
   187fc:	ldr	r1, [pc, #32]	; 18824 <__assert_fail@plt+0x6c78>
   18800:	bl	11a2c <fprintf@plt>
   18804:	ldr	r0, [sp, #4]
   18808:	bl	11840 <free@plt>
   1880c:	b	187a0 <__assert_fail@plt+0x6bf4>
   18810:	bl	118ac <__stack_chk_fail@plt>
   18814:	bl	11b70 <abort@plt>
   18818:	andeq	fp, r2, r4, lsl #4
   1881c:	strdeq	sl, [r2], -r8
   18820:	strdeq	fp, [r2], -ip
   18824:	andeq	sl, r1, r4, lsr #6
   18828:	push	{r0, r1, r2, r3}
   1882c:	ldr	r2, [pc, #168]	; 188dc <__assert_fail@plt+0x6d30>
   18830:	ldr	r1, [pc, #168]	; 188e0 <__assert_fail@plt+0x6d34>
   18834:	push	{r4, r5, r6, lr}
   18838:	sub	sp, sp, #16
   1883c:	ldr	r4, [pc, #160]	; 188e4 <__assert_fail@plt+0x6d38>
   18840:	ldr	r3, [r2]
   18844:	ldr	r0, [r1]
   18848:	ldr	r1, [r4]
   1884c:	add	r3, r3, #1
   18850:	cmp	r0, #0
   18854:	str	r3, [r2]
   18858:	str	r1, [sp, #12]
   1885c:	ldr	r5, [sp, #32]
   18860:	beq	18884 <__assert_fail@plt+0x6cd8>
   18864:	ldr	r2, [sp, #12]
   18868:	ldr	r3, [r4]
   1886c:	cmp	r2, r3
   18870:	bne	188d4 <__assert_fail@plt+0x6d28>
   18874:	add	sp, sp, #16
   18878:	pop	{r4, r5, r6, lr}
   1887c:	add	sp, sp, #16
   18880:	bx	lr
   18884:	add	r3, sp, #36	; 0x24
   18888:	str	r3, [sp, #8]
   1888c:	bl	18680 <__assert_fail@plt+0x6ad4>
   18890:	mov	r1, r5
   18894:	ldr	r2, [sp, #8]
   18898:	mov	r6, r0
   1889c:	add	r0, sp, #4
   188a0:	bl	117b0 <vasprintf@plt>
   188a4:	cmn	r0, #1
   188a8:	beq	188d8 <__assert_fail@plt+0x6d2c>
   188ac:	mov	r0, r6
   188b0:	bl	18724 <__assert_fail@plt+0x6b78>
   188b4:	ldr	r3, [pc, #44]	; 188e8 <__assert_fail@plt+0x6d3c>
   188b8:	ldr	r2, [sp, #4]
   188bc:	ldr	r1, [pc, #40]	; 188ec <__assert_fail@plt+0x6d40>
   188c0:	ldr	r0, [r3]
   188c4:	bl	11a2c <fprintf@plt>
   188c8:	ldr	r0, [sp, #4]
   188cc:	bl	11840 <free@plt>
   188d0:	b	18864 <__assert_fail@plt+0x6cb8>
   188d4:	bl	118ac <__stack_chk_fail@plt>
   188d8:	bl	11b70 <abort@plt>
   188dc:	andeq	fp, r2, r8, lsl #4
   188e0:	strdeq	fp, [r2], -ip
   188e4:	strdeq	sl, [r2], -r8
   188e8:			; <UNDEFINED> instruction: 0x0002b1b8
   188ec:	andeq	sl, r1, r4, lsr r3
   188f0:	push	{r2, r3}
   188f4:	adds	r2, r0, #0
   188f8:	ldr	r3, [pc, #184]	; 189b8 <__assert_fail@plt+0x6e0c>
   188fc:	ldr	ip, [pc, #184]	; 189bc <__assert_fail@plt+0x6e10>
   18900:	push	{r4, r5, r6, r7, r8, lr}
   18904:	movne	r2, #1
   18908:	ldr	r3, [r3]
   1890c:	ldr	r4, [pc, #172]	; 189c0 <__assert_fail@plt+0x6e14>
   18910:	cmp	r3, #0
   18914:	moveq	r2, #1
   18918:	ldr	r3, [ip]
   1891c:	sub	sp, sp, #16
   18920:	cmp	r2, #0
   18924:	ldr	r2, [r4]
   18928:	add	r3, r3, #1
   1892c:	str	r3, [ip]
   18930:	str	r2, [sp, #12]
   18934:	ldr	r5, [sp, #40]	; 0x28
   18938:	beq	18990 <__assert_fail@plt+0x6de4>
   1893c:	add	r3, sp, #44	; 0x2c
   18940:	mov	r7, r1
   18944:	str	r3, [sp, #8]
   18948:	mov	r6, r0
   1894c:	bl	18680 <__assert_fail@plt+0x6ad4>
   18950:	mov	r1, r5
   18954:	ldr	r2, [sp, #8]
   18958:	mov	r8, r0
   1895c:	add	r0, sp, #4
   18960:	bl	117b0 <vasprintf@plt>
   18964:	cmn	r0, #1
   18968:	beq	189b4 <__assert_fail@plt+0x6e08>
   1896c:	mov	r0, r8
   18970:	bl	18724 <__assert_fail@plt+0x6b78>
   18974:	mov	r0, r6
   18978:	mov	r1, r7
   1897c:	ldr	r3, [sp, #4]
   18980:	ldr	r2, [pc, #60]	; 189c4 <__assert_fail@plt+0x6e18>
   18984:	bl	11948 <error@plt>
   18988:	ldr	r0, [sp, #4]
   1898c:	bl	11840 <free@plt>
   18990:	ldr	r2, [sp, #12]
   18994:	ldr	r3, [r4]
   18998:	cmp	r2, r3
   1899c:	bne	189b0 <__assert_fail@plt+0x6e04>
   189a0:	add	sp, sp, #16
   189a4:	pop	{r4, r5, r6, r7, r8, lr}
   189a8:	add	sp, sp, #8
   189ac:	bx	lr
   189b0:	bl	118ac <__stack_chk_fail@plt>
   189b4:	bl	11b70 <abort@plt>
   189b8:	strdeq	fp, [r2], -ip
   189bc:	andeq	fp, r2, r0, lsl #4
   189c0:	strdeq	sl, [r2], -r8
   189c4:	andeq	sl, r1, r4, asr #6
   189c8:	ldr	ip, [pc, #200]	; 18a98 <__assert_fail@plt+0x6eec>
   189cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   189d0:	sub	sp, sp, #24
   189d4:	ldr	r5, [ip]
   189d8:	ldr	lr, [pc, #188]	; 18a9c <__assert_fail@plt+0x6ef0>
   189dc:	adds	ip, r0, #0
   189e0:	movne	ip, #1
   189e4:	ldr	r4, [pc, #180]	; 18aa0 <__assert_fail@plt+0x6ef4>
   189e8:	cmp	r5, #0
   189ec:	moveq	ip, #1
   189f0:	cmp	ip, #0
   189f4:	ldr	ip, [lr]
   189f8:	ldr	r5, [r4]
   189fc:	add	ip, ip, #1
   18a00:	str	r5, [sp, #20]
   18a04:	str	ip, [lr]
   18a08:	ldr	r5, [sp, #56]	; 0x38
   18a0c:	beq	18a78 <__assert_fail@plt+0x6ecc>
   18a10:	mov	r9, r3
   18a14:	add	r3, sp, #60	; 0x3c
   18a18:	mov	r7, r1
   18a1c:	mov	r8, r2
   18a20:	str	r3, [sp, #16]
   18a24:	mov	r6, r0
   18a28:	bl	18680 <__assert_fail@plt+0x6ad4>
   18a2c:	mov	r1, r5
   18a30:	ldr	r2, [sp, #16]
   18a34:	mov	sl, r0
   18a38:	add	r0, sp, #12
   18a3c:	bl	117b0 <vasprintf@plt>
   18a40:	cmn	r0, #1
   18a44:	beq	18a94 <__assert_fail@plt+0x6ee8>
   18a48:	mov	r0, sl
   18a4c:	bl	18724 <__assert_fail@plt+0x6b78>
   18a50:	ldr	lr, [sp, #12]
   18a54:	ldr	ip, [pc, #72]	; 18aa4 <__assert_fail@plt+0x6ef8>
   18a58:	mov	r0, r6
   18a5c:	mov	r3, r9
   18a60:	mov	r2, r8
   18a64:	mov	r1, r7
   18a68:	stm	sp, {ip, lr}
   18a6c:	bl	11984 <error_at_line@plt>
   18a70:	ldr	r0, [sp, #12]
   18a74:	bl	11840 <free@plt>
   18a78:	ldr	r2, [sp, #20]
   18a7c:	ldr	r3, [r4]
   18a80:	cmp	r2, r3
   18a84:	bne	18a90 <__assert_fail@plt+0x6ee4>
   18a88:	add	sp, sp, #24
   18a8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a90:	bl	118ac <__stack_chk_fail@plt>
   18a94:	bl	11b70 <abort@plt>
   18a98:	strdeq	fp, [r2], -ip
   18a9c:	andeq	fp, r2, r0, lsl #4
   18aa0:	strdeq	sl, [r2], -r8
   18aa4:	andeq	sl, r1, r4, asr #6
   18aa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18aac:	mov	r7, r0
   18ab0:	ldr	r6, [pc, #72]	; 18b00 <__assert_fail@plt+0x6f54>
   18ab4:	ldr	r5, [pc, #72]	; 18b04 <__assert_fail@plt+0x6f58>
   18ab8:	add	r6, pc, r6
   18abc:	add	r5, pc, r5
   18ac0:	sub	r6, r6, r5
   18ac4:	mov	r8, r1
   18ac8:	mov	r9, r2
   18acc:	bl	11760 <fdopen@plt-0x20>
   18ad0:	asrs	r6, r6, #2
   18ad4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ad8:	mov	r4, #0
   18adc:	add	r4, r4, #1
   18ae0:	ldr	r3, [r5], #4
   18ae4:	mov	r2, r9
   18ae8:	mov	r1, r8
   18aec:	mov	r0, r7
   18af0:	blx	r3
   18af4:	cmp	r6, r4
   18af8:	bne	18adc <__assert_fail@plt+0x6f30>
   18afc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b00:	andeq	r2, r1, r4, lsr r4
   18b04:	andeq	r2, r1, ip, lsr #8
   18b08:	bx	lr
   18b0c:	subs	r2, r1, #1
   18b10:	bxeq	lr
   18b14:	bcc	18cec <__assert_fail@plt+0x7140>
   18b18:	cmp	r0, r1
   18b1c:	bls	18cd0 <__assert_fail@plt+0x7124>
   18b20:	tst	r1, r2
   18b24:	beq	18cdc <__assert_fail@plt+0x7130>
   18b28:	clz	r3, r0
   18b2c:	clz	r2, r1
   18b30:	sub	r3, r2, r3
   18b34:	rsbs	r3, r3, #31
   18b38:	addne	r3, r3, r3, lsl #1
   18b3c:	mov	r2, #0
   18b40:	addne	pc, pc, r3, lsl #2
   18b44:	nop			; (mov r0, r0)
   18b48:	cmp	r0, r1, lsl #31
   18b4c:	adc	r2, r2, r2
   18b50:	subcs	r0, r0, r1, lsl #31
   18b54:	cmp	r0, r1, lsl #30
   18b58:	adc	r2, r2, r2
   18b5c:	subcs	r0, r0, r1, lsl #30
   18b60:	cmp	r0, r1, lsl #29
   18b64:	adc	r2, r2, r2
   18b68:	subcs	r0, r0, r1, lsl #29
   18b6c:	cmp	r0, r1, lsl #28
   18b70:	adc	r2, r2, r2
   18b74:	subcs	r0, r0, r1, lsl #28
   18b78:	cmp	r0, r1, lsl #27
   18b7c:	adc	r2, r2, r2
   18b80:	subcs	r0, r0, r1, lsl #27
   18b84:	cmp	r0, r1, lsl #26
   18b88:	adc	r2, r2, r2
   18b8c:	subcs	r0, r0, r1, lsl #26
   18b90:	cmp	r0, r1, lsl #25
   18b94:	adc	r2, r2, r2
   18b98:	subcs	r0, r0, r1, lsl #25
   18b9c:	cmp	r0, r1, lsl #24
   18ba0:	adc	r2, r2, r2
   18ba4:	subcs	r0, r0, r1, lsl #24
   18ba8:	cmp	r0, r1, lsl #23
   18bac:	adc	r2, r2, r2
   18bb0:	subcs	r0, r0, r1, lsl #23
   18bb4:	cmp	r0, r1, lsl #22
   18bb8:	adc	r2, r2, r2
   18bbc:	subcs	r0, r0, r1, lsl #22
   18bc0:	cmp	r0, r1, lsl #21
   18bc4:	adc	r2, r2, r2
   18bc8:	subcs	r0, r0, r1, lsl #21
   18bcc:	cmp	r0, r1, lsl #20
   18bd0:	adc	r2, r2, r2
   18bd4:	subcs	r0, r0, r1, lsl #20
   18bd8:	cmp	r0, r1, lsl #19
   18bdc:	adc	r2, r2, r2
   18be0:	subcs	r0, r0, r1, lsl #19
   18be4:	cmp	r0, r1, lsl #18
   18be8:	adc	r2, r2, r2
   18bec:	subcs	r0, r0, r1, lsl #18
   18bf0:	cmp	r0, r1, lsl #17
   18bf4:	adc	r2, r2, r2
   18bf8:	subcs	r0, r0, r1, lsl #17
   18bfc:	cmp	r0, r1, lsl #16
   18c00:	adc	r2, r2, r2
   18c04:	subcs	r0, r0, r1, lsl #16
   18c08:	cmp	r0, r1, lsl #15
   18c0c:	adc	r2, r2, r2
   18c10:	subcs	r0, r0, r1, lsl #15
   18c14:	cmp	r0, r1, lsl #14
   18c18:	adc	r2, r2, r2
   18c1c:	subcs	r0, r0, r1, lsl #14
   18c20:	cmp	r0, r1, lsl #13
   18c24:	adc	r2, r2, r2
   18c28:	subcs	r0, r0, r1, lsl #13
   18c2c:	cmp	r0, r1, lsl #12
   18c30:	adc	r2, r2, r2
   18c34:	subcs	r0, r0, r1, lsl #12
   18c38:	cmp	r0, r1, lsl #11
   18c3c:	adc	r2, r2, r2
   18c40:	subcs	r0, r0, r1, lsl #11
   18c44:	cmp	r0, r1, lsl #10
   18c48:	adc	r2, r2, r2
   18c4c:	subcs	r0, r0, r1, lsl #10
   18c50:	cmp	r0, r1, lsl #9
   18c54:	adc	r2, r2, r2
   18c58:	subcs	r0, r0, r1, lsl #9
   18c5c:	cmp	r0, r1, lsl #8
   18c60:	adc	r2, r2, r2
   18c64:	subcs	r0, r0, r1, lsl #8
   18c68:	cmp	r0, r1, lsl #7
   18c6c:	adc	r2, r2, r2
   18c70:	subcs	r0, r0, r1, lsl #7
   18c74:	cmp	r0, r1, lsl #6
   18c78:	adc	r2, r2, r2
   18c7c:	subcs	r0, r0, r1, lsl #6
   18c80:	cmp	r0, r1, lsl #5
   18c84:	adc	r2, r2, r2
   18c88:	subcs	r0, r0, r1, lsl #5
   18c8c:	cmp	r0, r1, lsl #4
   18c90:	adc	r2, r2, r2
   18c94:	subcs	r0, r0, r1, lsl #4
   18c98:	cmp	r0, r1, lsl #3
   18c9c:	adc	r2, r2, r2
   18ca0:	subcs	r0, r0, r1, lsl #3
   18ca4:	cmp	r0, r1, lsl #2
   18ca8:	adc	r2, r2, r2
   18cac:	subcs	r0, r0, r1, lsl #2
   18cb0:	cmp	r0, r1, lsl #1
   18cb4:	adc	r2, r2, r2
   18cb8:	subcs	r0, r0, r1, lsl #1
   18cbc:	cmp	r0, r1
   18cc0:	adc	r2, r2, r2
   18cc4:	subcs	r0, r0, r1
   18cc8:	mov	r0, r2
   18ccc:	bx	lr
   18cd0:	moveq	r0, #1
   18cd4:	movne	r0, #0
   18cd8:	bx	lr
   18cdc:	clz	r2, r1
   18ce0:	rsb	r2, r2, #31
   18ce4:	lsr	r0, r0, r2
   18ce8:	bx	lr
   18cec:	cmp	r0, #0
   18cf0:	mvnne	r0, #0
   18cf4:	b	18d18 <__assert_fail@plt+0x716c>
   18cf8:	cmp	r1, #0
   18cfc:	beq	18cec <__assert_fail@plt+0x7140>
   18d00:	push	{r0, r1, lr}
   18d04:	bl	18b0c <__assert_fail@plt+0x6f60>
   18d08:	pop	{r1, r2, lr}
   18d0c:	mul	r3, r2, r0
   18d10:	sub	r1, r1, r3
   18d14:	bx	lr
   18d18:	push	{r1, lr}
   18d1c:	mov	r0, #8
   18d20:	bl	117a4 <raise@plt>
   18d24:	pop	{r1, pc}

Disassembly of section .fini:

00018d28 <.fini>:
   18d28:	push	{r3, lr}
   18d2c:	pop	{r3, pc}
