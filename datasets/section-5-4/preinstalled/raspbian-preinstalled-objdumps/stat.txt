
raspbian-preinstalled/stat:     file format elf32-littlearm


Disassembly of section .init:

00011498 <.init>:
   11498:	push	{r3, lr}
   1149c:	bl	11e94 <__assert_fail@plt+0x58c>
   114a0:	pop	{r3, pc}

Disassembly of section .plt:

000114a4 <calloc@plt-0x14>:
   114a4:	push	{lr}		; (str lr, [sp, #-4]!)
   114a8:	ldr	lr, [pc, #4]	; 114b4 <calloc@plt-0x4>
   114ac:	add	lr, pc, lr
   114b0:	ldr	pc, [lr, #8]!
   114b4:	andeq	lr, r1, ip, asr #22

000114b8 <calloc@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #122880	; 0x1e000
   114c0:	ldr	pc, [ip, #2892]!	; 0xb4c

000114c4 <fputs_unlocked@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #122880	; 0x1e000
   114cc:	ldr	pc, [ip, #2884]!	; 0xb44

000114d0 <strstr@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #122880	; 0x1e000
   114d8:	ldr	pc, [ip, #2876]!	; 0xb3c

000114dc <raise@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #122880	; 0x1e000
   114e4:	ldr	pc, [ip, #2868]!	; 0xb34

000114e8 <gmtime_r@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #122880	; 0x1e000
   114f0:	ldr	pc, [ip, #2860]!	; 0xb2c

000114f4 <__getdelim@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #122880	; 0x1e000
   114fc:	ldr	pc, [ip, #2852]!	; 0xb24

00011500 <is_selinux_enabled@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #122880	; 0x1e000
   11508:	ldr	pc, [ip, #2844]!	; 0xb1c

0001150c <strcmp@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #122880	; 0x1e000
   11514:	ldr	pc, [ip, #2836]!	; 0xb14

00011518 <strtol@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #122880	; 0x1e000
   11520:	ldr	pc, [ip, #2828]!	; 0xb0c

00011524 <getpwuid@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #122880	; 0x1e000
   1152c:	ldr	pc, [ip, #2820]!	; 0xb04

00011530 <mktime@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #122880	; 0x1e000
   11538:	ldr	pc, [ip, #2812]!	; 0xafc

0001153c <fflush@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #122880	; 0x1e000
   11544:	ldr	pc, [ip, #2804]!	; 0xaf4

00011548 <free@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #122880	; 0x1e000
   11550:	ldr	pc, [ip, #2796]!	; 0xaec

00011554 <_exit@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #122880	; 0x1e000
   1155c:	ldr	pc, [ip, #2788]!	; 0xae4

00011560 <memcpy@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #122880	; 0x1e000
   11568:	ldr	pc, [ip, #2780]!	; 0xadc

0001156c <mbsinit@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #122880	; 0x1e000
   11574:	ldr	pc, [ip, #2772]!	; 0xad4

00011578 <memcmp@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #122880	; 0x1e000
   11580:	ldr	pc, [ip, #2764]!	; 0xacc

00011584 <dcgettext@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #122880	; 0x1e000
   1158c:	ldr	pc, [ip, #2756]!	; 0xac4

00011590 <__stack_chk_fail@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #122880	; 0x1e000
   11598:	ldr	pc, [ip, #2748]!	; 0xabc

0001159c <realloc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #122880	; 0x1e000
   115a4:	ldr	pc, [ip, #2740]!	; 0xab4

000115a8 <fgetfilecon@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #122880	; 0x1e000
   115b0:	ldr	pc, [ip, #2732]!	; 0xaac

000115b4 <localtime_r@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #122880	; 0x1e000
   115bc:	ldr	pc, [ip, #2724]!	; 0xaa4

000115c0 <textdomain@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #122880	; 0x1e000
   115c8:	ldr	pc, [ip, #2716]!	; 0xa9c

000115cc <chdir@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #122880	; 0x1e000
   115d4:	ldr	pc, [ip, #2708]!	; 0xa94

000115d8 <iswprint@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #122880	; 0x1e000
   115e0:	ldr	pc, [ip, #2700]!	; 0xa8c

000115e4 <tzset@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #122880	; 0x1e000
   115ec:	ldr	pc, [ip, #2692]!	; 0xa84

000115f0 <__fxstat64@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #122880	; 0x1e000
   115f8:	ldr	pc, [ip, #2684]!	; 0xa7c

000115fc <readlink@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #122880	; 0x1e000
   11604:	ldr	pc, [ip, #2676]!	; 0xa74

00011608 <fwrite@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #122880	; 0x1e000
   11610:	ldr	pc, [ip, #2668]!	; 0xa6c

00011614 <lseek64@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #122880	; 0x1e000
   1161c:	ldr	pc, [ip, #2660]!	; 0xa64

00011620 <__ctype_get_mb_cur_max@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #122880	; 0x1e000
   11628:	ldr	pc, [ip, #2652]!	; 0xa5c

0001162c <hasmntopt@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #122880	; 0x1e000
   11634:	ldr	pc, [ip, #2644]!	; 0xa54

00011638 <strcpy@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #122880	; 0x1e000
   11640:	ldr	pc, [ip, #2636]!	; 0xa4c

00011644 <__fpending@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #122880	; 0x1e000
   1164c:	ldr	pc, [ip, #2628]!	; 0xa44

00011650 <mbrtowc@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #122880	; 0x1e000
   11658:	ldr	pc, [ip, #2620]!	; 0xa3c

0001165c <error@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #122880	; 0x1e000
   11664:	ldr	pc, [ip, #2612]!	; 0xa34

00011668 <getmntent@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #122880	; 0x1e000
   11670:	ldr	pc, [ip, #2604]!	; 0xa2c

00011674 <open64@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #122880	; 0x1e000
   1167c:	ldr	pc, [ip, #2596]!	; 0xa24

00011680 <getenv@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #122880	; 0x1e000
   11688:	ldr	pc, [ip, #2588]!	; 0xa1c

0001168c <lgetfilecon@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #122880	; 0x1e000
   11694:	ldr	pc, [ip, #2580]!	; 0xa14

00011698 <malloc@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #122880	; 0x1e000
   116a0:	ldr	pc, [ip, #2572]!	; 0xa0c

000116a4 <__libc_start_main@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #122880	; 0x1e000
   116ac:	ldr	pc, [ip, #2564]!	; 0xa04

000116b0 <strftime@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #122880	; 0x1e000
   116b8:	ldr	pc, [ip, #2556]!	; 0x9fc

000116bc <__freading@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #122880	; 0x1e000
   116c4:	ldr	pc, [ip, #2548]!	; 0x9f4

000116c8 <__ctype_tolower_loc@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #122880	; 0x1e000
   116d0:	ldr	pc, [ip, #2540]!	; 0x9ec

000116d4 <__ctype_toupper_loc@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #122880	; 0x1e000
   116dc:	ldr	pc, [ip, #2532]!	; 0x9e4

000116e0 <__gmon_start__@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #122880	; 0x1e000
   116e8:	ldr	pc, [ip, #2524]!	; 0x9dc

000116ec <getopt_long@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #122880	; 0x1e000
   116f4:	ldr	pc, [ip, #2516]!	; 0x9d4

000116f8 <__ctype_b_loc@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #122880	; 0x1e000
   11700:	ldr	pc, [ip, #2508]!	; 0x9cc

00011704 <getcwd@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #122880	; 0x1e000
   1170c:	ldr	pc, [ip, #2500]!	; 0x9c4

00011710 <exit@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #122880	; 0x1e000
   11718:	ldr	pc, [ip, #2492]!	; 0x9bc

0001171c <getfilecon@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #122880	; 0x1e000
   11724:	ldr	pc, [ip, #2484]!	; 0x9b4

00011728 <strlen@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #122880	; 0x1e000
   11730:	ldr	pc, [ip, #2476]!	; 0x9ac

00011734 <strchr@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #122880	; 0x1e000
   1173c:	ldr	pc, [ip, #2468]!	; 0x9a4

00011740 <setenv@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #122880	; 0x1e000
   11748:	ldr	pc, [ip, #2460]!	; 0x99c

0001174c <openat64@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #122880	; 0x1e000
   11754:	ldr	pc, [ip, #2452]!	; 0x994

00011758 <memrchr@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #122880	; 0x1e000
   11760:	ldr	pc, [ip, #2444]!	; 0x98c

00011764 <__errno_location@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #122880	; 0x1e000
   1176c:	ldr	pc, [ip, #2436]!	; 0x984

00011770 <__sprintf_chk@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #122880	; 0x1e000
   11778:	ldr	pc, [ip, #2428]!	; 0x97c

0001177c <__cxa_atexit@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #122880	; 0x1e000
   11784:	ldr	pc, [ip, #2420]!	; 0x974

00011788 <memset@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #122880	; 0x1e000
   11790:	ldr	pc, [ip, #2412]!	; 0x96c

00011794 <__printf_chk@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #122880	; 0x1e000
   1179c:	ldr	pc, [ip, #2404]!	; 0x964

000117a0 <fileno@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #122880	; 0x1e000
   117a8:	ldr	pc, [ip, #2396]!	; 0x95c

000117ac <__fprintf_chk@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #122880	; 0x1e000
   117b4:	ldr	pc, [ip, #2388]!	; 0x954

000117b8 <memchr@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #122880	; 0x1e000
   117c0:	ldr	pc, [ip, #2380]!	; 0x94c

000117c4 <fclose@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #122880	; 0x1e000
   117cc:	ldr	pc, [ip, #2372]!	; 0x944

000117d0 <fseeko64@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #122880	; 0x1e000
   117d8:	ldr	pc, [ip, #2364]!	; 0x93c

000117dc <endmntent@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #122880	; 0x1e000
   117e4:	ldr	pc, [ip, #2356]!	; 0x934

000117e8 <fcntl64@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #122880	; 0x1e000
   117f0:	ldr	pc, [ip, #2348]!	; 0x92c

000117f4 <__overflow@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #122880	; 0x1e000
   117fc:	ldr	pc, [ip, #2340]!	; 0x924

00011800 <setlocale@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #122880	; 0x1e000
   11808:	ldr	pc, [ip, #2332]!	; 0x91c

0001180c <strrchr@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #122880	; 0x1e000
   11814:	ldr	pc, [ip, #2324]!	; 0x914

00011818 <statfs64@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #122880	; 0x1e000
   11820:	ldr	pc, [ip, #2316]!	; 0x90c

00011824 <nl_langinfo@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #122880	; 0x1e000
   1182c:	ldr	pc, [ip, #2308]!	; 0x904

00011830 <sscanf@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #122880	; 0x1e000
   11838:	ldr	pc, [ip, #2300]!	; 0x8fc

0001183c <localeconv@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #122880	; 0x1e000
   11844:	ldr	pc, [ip, #2292]!	; 0x8f4

00011848 <timegm@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #122880	; 0x1e000
   11850:	ldr	pc, [ip, #2284]!	; 0x8ec

00011854 <fchdir@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #122880	; 0x1e000
   1185c:	ldr	pc, [ip, #2276]!	; 0x8e4

00011860 <canonicalize_file_name@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #122880	; 0x1e000
   11868:	ldr	pc, [ip, #2268]!	; 0x8dc

0001186c <fopen64@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #122880	; 0x1e000
   11874:	ldr	pc, [ip, #2260]!	; 0x8d4

00011878 <freecon@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #122880	; 0x1e000
   11880:	ldr	pc, [ip, #2252]!	; 0x8cc

00011884 <setmntent@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #122880	; 0x1e000
   1188c:	ldr	pc, [ip, #2244]!	; 0x8c4

00011890 <bindtextdomain@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #122880	; 0x1e000
   11898:	ldr	pc, [ip, #2236]!	; 0x8bc

0001189c <__xstat64@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #122880	; 0x1e000
   118a4:	ldr	pc, [ip, #2228]!	; 0x8b4

000118a8 <unsetenv@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #122880	; 0x1e000
   118b0:	ldr	pc, [ip, #2220]!	; 0x8ac

000118b4 <strncmp@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #122880	; 0x1e000
   118bc:	ldr	pc, [ip, #2212]!	; 0x8a4

000118c0 <abort@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #122880	; 0x1e000
   118c8:	ldr	pc, [ip, #2204]!	; 0x89c

000118cc <close@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #122880	; 0x1e000
   118d4:	ldr	pc, [ip, #2196]!	; 0x894

000118d8 <__lxstat64@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #122880	; 0x1e000
   118e0:	ldr	pc, [ip, #2188]!	; 0x88c

000118e4 <getgrgid@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #122880	; 0x1e000
   118ec:	ldr	pc, [ip, #2180]!	; 0x884

000118f0 <__snprintf_chk@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #122880	; 0x1e000
   118f8:	ldr	pc, [ip, #2172]!	; 0x87c

000118fc <strspn@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #122880	; 0x1e000
   11904:	ldr	pc, [ip, #2164]!	; 0x874

00011908 <__assert_fail@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #122880	; 0x1e000
   11910:	ldr	pc, [ip, #2156]!	; 0x86c

Disassembly of section .text:

00011914 <.text>:
   11914:	ldr	r3, [pc, #1216]	; 11ddc <__assert_fail@plt+0x4d4>
   11918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1191c:	sub	sp, sp, #228	; 0xe4
   11920:	ldr	r3, [r3]
   11924:	mov	r6, r0
   11928:	ldr	r0, [r1]
   1192c:	str	r3, [sp, #220]	; 0xdc
   11930:	mov	r5, r1
   11934:	bl	16c78 <__assert_fail@plt+0x5370>
   11938:	ldr	r1, [pc, #1184]	; 11de0 <__assert_fail@plt+0x4d8>
   1193c:	mov	r0, #6
   11940:	bl	11800 <setlocale@plt>
   11944:	ldr	r1, [pc, #1176]	; 11de4 <__assert_fail@plt+0x4dc>
   11948:	ldr	r0, [pc, #1176]	; 11de8 <__assert_fail@plt+0x4e0>
   1194c:	bl	11890 <bindtextdomain@plt>
   11950:	ldr	r0, [pc, #1168]	; 11de8 <__assert_fail@plt+0x4e0>
   11954:	bl	115c0 <textdomain@plt>
   11958:	bl	1183c <localeconv@plt>
   1195c:	mov	fp, #0
   11960:	ldr	r2, [pc, #1156]	; 11dec <__assert_fail@plt+0x4e4>
   11964:	ldr	r9, [pc, #1156]	; 11df0 <__assert_fail@plt+0x4e8>
   11968:	str	fp, [sp, #12]
   1196c:	mov	sl, fp
   11970:	ldr	r8, [pc, #1148]	; 11df4 <__assert_fail@plt+0x4ec>
   11974:	ldr	r7, [pc, #1148]	; 11df8 <__assert_fail@plt+0x4f0>
   11978:	ldr	r3, [r0]
   1197c:	ldrb	r1, [r3]
   11980:	cmp	r1, fp
   11984:	moveq	r3, r2
   11988:	mov	r0, r3
   1198c:	str	r3, [r9, #100]	; 0x64
   11990:	bl	11728 <strlen@plt>
   11994:	str	r0, [r9, #96]	; 0x60
   11998:	ldr	r0, [pc, #1116]	; 11dfc <__assert_fail@plt+0x4f4>
   1199c:	bl	1d2f4 <__assert_fail@plt+0xb9ec>
   119a0:	mov	r4, #0
   119a4:	str	r4, [sp]
   119a8:	mov	r3, r8
   119ac:	mov	r2, r7
   119b0:	mov	r1, r5
   119b4:	mov	r0, r6
   119b8:	bl	116ec <getopt_long@plt>
   119bc:	cmn	r0, #1
   119c0:	beq	11a94 <__assert_fail@plt+0x18c>
   119c4:	cmp	r0, #99	; 0x63
   119c8:	beq	11a78 <__assert_fail@plt+0x170>
   119cc:	ble	11a00 <__assert_fail@plt+0xf8>
   119d0:	cmp	r0, #116	; 0x74
   119d4:	beq	11a6c <__assert_fail@plt+0x164>
   119d8:	cmp	r0, #256	; 0x100
   119dc:	bne	11a1c <__assert_fail@plt+0x114>
   119e0:	mov	r3, #1
   119e4:	ldr	r2, [pc, #1044]	; 11e00 <__assert_fail@plt+0x4f8>
   119e8:	strb	r3, [r9, #21]
   119ec:	ldr	r3, [pc, #1040]	; 11e04 <__assert_fail@plt+0x4fc>
   119f0:	ldr	r1, [pc, #1000]	; 11de0 <__assert_fail@plt+0x4d8>
   119f4:	ldr	fp, [r3]
   119f8:	str	r1, [r2]
   119fc:	b	119a0 <__assert_fail@plt+0x98>
   11a00:	cmn	r0, #2
   11a04:	beq	11dac <__assert_fail@plt+0x4a4>
   11a08:	cmp	r0, #76	; 0x4c
   11a0c:	bne	11a2c <__assert_fail@plt+0x124>
   11a10:	mov	r3, #1
   11a14:	strb	r3, [r9, #116]	; 0x74
   11a18:	b	119a0 <__assert_fail@plt+0x98>
   11a1c:	cmp	r0, #102	; 0x66
   11a20:	beq	11a64 <__assert_fail@plt+0x15c>
   11a24:	mov	r0, #1
   11a28:	bl	14420 <__assert_fail@plt+0x2b18>
   11a2c:	cmn	r0, #3
   11a30:	bne	11a24 <__assert_fail@plt+0x11c>
   11a34:	ldr	r1, [pc, #972]	; 11e08 <__assert_fail@plt+0x500>
   11a38:	ldr	r3, [pc, #972]	; 11e0c <__assert_fail@plt+0x504>
   11a3c:	ldr	r2, [pc, #972]	; 11e10 <__assert_fail@plt+0x508>
   11a40:	str	r4, [sp, #4]
   11a44:	ldr	r0, [r1]
   11a48:	ldr	r3, [r3]
   11a4c:	ldr	r1, [pc, #960]	; 11e14 <__assert_fail@plt+0x50c>
   11a50:	str	r2, [sp]
   11a54:	ldr	r2, [pc, #956]	; 11e18 <__assert_fail@plt+0x510>
   11a58:	bl	193dc <__assert_fail@plt+0x7ad4>
   11a5c:	mov	r0, r4
   11a60:	bl	11710 <exit@plt>
   11a64:	mov	sl, #1
   11a68:	b	119a0 <__assert_fail@plt+0x98>
   11a6c:	mov	r3, #1
   11a70:	str	r3, [sp, #12]
   11a74:	b	119a0 <__assert_fail@plt+0x98>
   11a78:	ldr	r3, [pc, #896]	; 11e00 <__assert_fail@plt+0x4f8>
   11a7c:	ldr	r2, [pc, #920]	; 11e1c <__assert_fail@plt+0x514>
   11a80:	strb	r4, [r9, #21]
   11a84:	str	r2, [r3]
   11a88:	ldr	r3, [pc, #884]	; 11e04 <__assert_fail@plt+0x4fc>
   11a8c:	ldr	fp, [r3]
   11a90:	b	119a0 <__assert_fail@plt+0x98>
   11a94:	ldr	r7, [pc, #900]	; 11e20 <__assert_fail@plt+0x518>
   11a98:	ldr	r3, [r7]
   11a9c:	cmp	r3, r6
   11aa0:	beq	11db4 <__assert_fail@plt+0x4ac>
   11aa4:	cmp	fp, #0
   11aa8:	beq	11d6c <__assert_fail@plt+0x464>
   11aac:	ldr	r1, [pc, #880]	; 11e24 <__assert_fail@plt+0x51c>
   11ab0:	mov	r0, fp
   11ab4:	bl	114d0 <strstr@plt>
   11ab8:	cmp	r0, #0
   11abc:	streq	fp, [sp, #16]
   11ac0:	beq	11b04 <__assert_fail@plt+0x1fc>
   11ac4:	ldr	r0, [pc, #860]	; 11e28 <__assert_fail@plt+0x520>
   11ac8:	bl	11680 <getenv@plt>
   11acc:	subs	r3, r0, #0
   11ad0:	str	r3, [sp, #12]
   11ad4:	beq	11d9c <__assert_fail@plt+0x494>
   11ad8:	ldr	r8, [pc, #844]	; 11e2c <__assert_fail@plt+0x524>
   11adc:	mov	r3, #4
   11ae0:	mov	r2, r8
   11ae4:	ldr	r1, [pc, #836]	; 11e30 <__assert_fail@plt+0x528>
   11ae8:	bl	14be4 <__assert_fail@plt+0x32dc>
   11aec:	cmp	r0, #0
   11af0:	blt	11d28 <__assert_fail@plt+0x420>
   11af4:	ldr	r1, [r8, r0, lsl #2]
   11af8:	mov	r0, r4
   11afc:	bl	1889c <__assert_fail@plt+0x6f94>
   11b00:	str	fp, [sp, #16]
   11b04:	ldr	r3, [r7]
   11b08:	cmp	r6, r3
   11b0c:	ble	11cb0 <__assert_fail@plt+0x3a8>
   11b10:	sub	r3, r3, #-1073741823	; 0xc0000001
   11b14:	add	r6, r5, r6, lsl #2
   11b18:	add	r5, r5, r3, lsl #2
   11b1c:	sub	r3, r6, #4
   11b20:	str	fp, [sp, #12]
   11b24:	ldr	r7, [pc, #776]	; 11e34 <__assert_fail@plt+0x52c>
   11b28:	mov	r8, #1
   11b2c:	mov	fp, r3
   11b30:	b	11b80 <__assert_fail@plt+0x278>
   11b34:	cmp	r0, #0
   11b38:	beq	11c10 <__assert_fail@plt+0x308>
   11b3c:	add	r1, sp, #128	; 0x80
   11b40:	mov	r0, r6
   11b44:	bl	11818 <statfs64@plt>
   11b48:	cmp	r0, #0
   11b4c:	bne	11cd4 <__assert_fail@plt+0x3cc>
   11b50:	add	r3, sp, #128	; 0x80
   11b54:	str	r3, [sp]
   11b58:	mov	r2, r6
   11b5c:	ldr	r3, [pc, #724]	; 11e38 <__assert_fail@plt+0x530>
   11b60:	mvn	r1, #0
   11b64:	ldr	r0, [sp, #12]
   11b68:	bl	130b0 <__assert_fail@plt+0x17a8>
   11b6c:	eor	r4, r0, #1
   11b70:	uxtb	r4, r4
   11b74:	cmp	fp, r5
   11b78:	and	r8, r8, r4
   11b7c:	beq	11cb4 <__assert_fail@plt+0x3ac>
   11b80:	ldr	r6, [r5, #4]!
   11b84:	mov	r1, r7
   11b88:	mov	r0, r6
   11b8c:	bl	1150c <strcmp@plt>
   11b90:	cmp	sl, #0
   11b94:	mov	r4, r0
   11b98:	bne	11b34 <__assert_fail@plt+0x22c>
   11b9c:	cmp	r0, #0
   11ba0:	beq	11c64 <__assert_fail@plt+0x35c>
   11ba4:	ldrb	r3, [r9, #116]	; 0x74
   11ba8:	cmp	r3, #0
   11bac:	beq	11c44 <__assert_fail@plt+0x33c>
   11bb0:	add	r4, sp, #24
   11bb4:	mov	r2, r4
   11bb8:	mov	r1, r6
   11bbc:	mov	r0, #3
   11bc0:	bl	1189c <__xstat64@plt>
   11bc4:	adds	r0, r0, #0
   11bc8:	movne	r0, #1
   11bcc:	cmp	r0, #0
   11bd0:	mvneq	r1, #0
   11bd4:	bne	11d18 <__assert_fail@plt+0x410>
   11bd8:	ldr	r0, [sp, #40]	; 0x28
   11bdc:	ldr	ip, [sp, #16]
   11be0:	and	r0, r0, #45056	; 0xb000
   11be4:	ldr	r3, [sp, #12]
   11be8:	cmp	r0, #8192	; 0x2000
   11bec:	moveq	r3, ip
   11bf0:	str	r4, [sp]
   11bf4:	mov	r0, r3
   11bf8:	mov	r2, r6
   11bfc:	ldr	r3, [pc, #568]	; 11e3c <__assert_fail@plt+0x534>
   11c00:	bl	130b0 <__assert_fail@plt+0x17a8>
   11c04:	eor	r4, r0, #1
   11c08:	uxtb	r4, r4
   11c0c:	b	11b74 <__assert_fail@plt+0x26c>
   11c10:	mov	r2, #5
   11c14:	ldr	r1, [pc, #548]	; 11e40 <__assert_fail@plt+0x538>
   11c18:	bl	11584 <dcgettext@plt>
   11c1c:	mov	r1, r6
   11c20:	str	r0, [sp, #20]
   11c24:	mov	r0, #4
   11c28:	bl	18c34 <__assert_fail@plt+0x732c>
   11c2c:	ldr	r2, [sp, #20]
   11c30:	mov	r1, r4
   11c34:	mov	r3, r0
   11c38:	mov	r0, r4
   11c3c:	bl	1165c <error@plt>
   11c40:	b	11b74 <__assert_fail@plt+0x26c>
   11c44:	add	r4, sp, #24
   11c48:	mov	r2, r4
   11c4c:	mov	r1, r6
   11c50:	mov	r0, #3
   11c54:	bl	118d8 <__lxstat64@plt>
   11c58:	adds	r0, r0, #0
   11c5c:	movne	r0, #1
   11c60:	b	11bcc <__assert_fail@plt+0x2c4>
   11c64:	add	r4, sp, #24
   11c68:	mov	r1, sl
   11c6c:	mov	r2, r4
   11c70:	mov	r0, #3
   11c74:	bl	115f0 <__fxstat64@plt>
   11c78:	subs	r1, r0, #0
   11c7c:	beq	11bd8 <__assert_fail@plt+0x2d0>
   11c80:	bl	11764 <__errno_location@plt>
   11c84:	mov	r2, #5
   11c88:	ldr	r1, [pc, #436]	; 11e44 <__assert_fail@plt+0x53c>
   11c8c:	ldr	r4, [r0]
   11c90:	mov	r0, sl
   11c94:	bl	11584 <dcgettext@plt>
   11c98:	mov	r1, r4
   11c9c:	mov	r4, sl
   11ca0:	mov	r2, r0
   11ca4:	mov	r0, sl
   11ca8:	bl	1165c <error@plt>
   11cac:	b	11b74 <__assert_fail@plt+0x26c>
   11cb0:	mov	r8, #1
   11cb4:	ldr	r3, [pc, #288]	; 11ddc <__assert_fail@plt+0x4d4>
   11cb8:	ldr	r2, [sp, #220]	; 0xdc
   11cbc:	eor	r0, r8, #1
   11cc0:	ldr	r3, [r3]
   11cc4:	cmp	r2, r3
   11cc8:	bne	11dd8 <__assert_fail@plt+0x4d0>
   11ccc:	add	sp, sp, #228	; 0xe4
   11cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cd4:	bl	11764 <__errno_location@plt>
   11cd8:	ldr	r1, [pc, #360]	; 11e48 <__assert_fail@plt+0x540>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r4, [r0]
   11ce4:	mov	r0, #0
   11ce8:	bl	11584 <dcgettext@plt>
   11cec:	mov	r1, r6
   11cf0:	str	r0, [sp, #20]
   11cf4:	mov	r0, #4
   11cf8:	bl	18c34 <__assert_fail@plt+0x732c>
   11cfc:	mov	r1, r4
   11d00:	ldr	r2, [sp, #20]
   11d04:	mov	r4, #0
   11d08:	mov	r3, r0
   11d0c:	mov	r0, #0
   11d10:	bl	1165c <error@plt>
   11d14:	b	11b74 <__assert_fail@plt+0x26c>
   11d18:	bl	11764 <__errno_location@plt>
   11d1c:	mov	r2, #5
   11d20:	ldr	r1, [pc, #292]	; 11e4c <__assert_fail@plt+0x544>
   11d24:	b	11ce0 <__assert_fail@plt+0x3d8>
   11d28:	mov	r1, #4
   11d2c:	mov	r0, r4
   11d30:	bl	1889c <__assert_fail@plt+0x6f94>
   11d34:	mov	r2, #5
   11d38:	ldr	r1, [pc, #272]	; 11e50 <__assert_fail@plt+0x548>
   11d3c:	mov	r0, r4
   11d40:	bl	11584 <dcgettext@plt>
   11d44:	mov	r8, r0
   11d48:	ldr	r0, [sp, #12]
   11d4c:	bl	18edc <__assert_fail@plt+0x75d4>
   11d50:	mov	r2, r8
   11d54:	mov	r1, r4
   11d58:	mov	r3, r0
   11d5c:	mov	r0, r4
   11d60:	bl	1165c <error@plt>
   11d64:	str	fp, [sp, #16]
   11d68:	b	11b04 <__assert_fail@plt+0x1fc>
   11d6c:	ldr	r4, [sp, #12]
   11d70:	mov	r2, fp
   11d74:	mov	r1, r4
   11d78:	mov	r0, sl
   11d7c:	bl	138ec <__assert_fail@plt+0x1fe4>
   11d80:	mov	r1, r4
   11d84:	mov	r2, #1
   11d88:	mov	fp, r0
   11d8c:	mov	r0, sl
   11d90:	bl	138ec <__assert_fail@plt+0x1fe4>
   11d94:	str	r0, [sp, #16]
   11d98:	b	11b04 <__assert_fail@plt+0x1fc>
   11d9c:	mov	r1, #4
   11da0:	bl	1889c <__assert_fail@plt+0x6f94>
   11da4:	str	fp, [sp, #16]
   11da8:	b	11b04 <__assert_fail@plt+0x1fc>
   11dac:	mov	r0, r4
   11db0:	bl	14420 <__assert_fail@plt+0x2b18>
   11db4:	mov	r2, #5
   11db8:	ldr	r1, [pc, #148]	; 11e54 <__assert_fail@plt+0x54c>
   11dbc:	mov	r0, r4
   11dc0:	bl	11584 <dcgettext@plt>
   11dc4:	mov	r1, r4
   11dc8:	mov	r2, r0
   11dcc:	mov	r0, r4
   11dd0:	bl	1165c <error@plt>
   11dd4:	b	11a24 <__assert_fail@plt+0x11c>
   11dd8:	bl	11590 <__stack_chk_fail@plt>
   11ddc:	andeq	pc, r2, r0, lsl #30
   11de0:	andeq	sp, r1, r4, asr #21
   11de4:	andeq	lr, r1, r0, lsl r8
   11de8:	andeq	lr, r1, r0, ror #14
   11dec:	andeq	lr, r1, ip, lsl #16
   11df0:	andeq	r0, r3, r0, lsl #4
   11df4:	strdeq	sp, [r1], -r0
   11df8:	andeq	lr, r1, r4, lsr r8
   11dfc:	andeq	r4, r1, r0, lsr #30
   11e00:	andeq	r0, r3, ip, lsl #3
   11e04:	strdeq	r0, [r3], -r8
   11e08:	strdeq	r0, [r3], -r4
   11e0c:	muleq	r3, r0, r1
   11e10:	andeq	lr, r1, r4, lsr #16
   11e14:	muleq	r1, ip, fp
   11e18:	andeq	lr, r1, ip, asr r7
   11e1c:	strdeq	lr, [r1], -r0
   11e20:	andeq	r0, r3, r8, ror #3
   11e24:	andeq	lr, r1, ip, asr #16
   11e28:	andeq	lr, r1, r0, asr r8
   11e2c:	strdeq	lr, [r1], -r4
   11e30:	andeq	lr, r1, ip, lsl ip
   11e34:	andeq	sp, r1, r8, ror r4
   11e38:	ldrdeq	r2, [r1], -r4
   11e3c:	andeq	r3, r1, r0, ror #26
   11e40:	andeq	lr, r1, r4, lsr #17
   11e44:	andeq	lr, r1, r4, lsl r9
   11e48:	andeq	lr, r1, r8, ror #17
   11e4c:	andeq	lr, r1, r0, lsr r9
   11e50:	andeq	lr, r1, r0, ror #16
   11e54:	andeq	lr, r1, ip, lsr r8
   11e58:	mov	fp, #0
   11e5c:	mov	lr, #0
   11e60:	pop	{r1}		; (ldr r1, [sp], #4)
   11e64:	mov	r2, sp
   11e68:	push	{r2}		; (str r2, [sp, #-4]!)
   11e6c:	push	{r0}		; (str r0, [sp, #-4]!)
   11e70:	ldr	ip, [pc, #16]	; 11e88 <__assert_fail@plt+0x580>
   11e74:	push	{ip}		; (str ip, [sp, #-4]!)
   11e78:	ldr	r0, [pc, #12]	; 11e8c <__assert_fail@plt+0x584>
   11e7c:	ldr	r3, [pc, #12]	; 11e90 <__assert_fail@plt+0x588>
   11e80:	bl	116a4 <__libc_start_main@plt>
   11e84:	bl	118c0 <abort@plt>
   11e88:	strdeq	sp, [r1], -r0
   11e8c:	andeq	r1, r1, r4, lsl r9
   11e90:	muleq	r1, r0, r2
   11e94:	ldr	r3, [pc, #20]	; 11eb0 <__assert_fail@plt+0x5a8>
   11e98:	ldr	r2, [pc, #20]	; 11eb4 <__assert_fail@plt+0x5ac>
   11e9c:	add	r3, pc, r3
   11ea0:	ldr	r2, [r3, r2]
   11ea4:	cmp	r2, #0
   11ea8:	bxeq	lr
   11eac:	b	116e0 <__gmon_start__@plt>
   11eb0:	andeq	lr, r1, ip, asr r1
   11eb4:	andeq	r0, r0, r0, lsl #3
   11eb8:	ldr	r0, [pc, #24]	; 11ed8 <__assert_fail@plt+0x5d0>
   11ebc:	ldr	r3, [pc, #24]	; 11edc <__assert_fail@plt+0x5d4>
   11ec0:	cmp	r3, r0
   11ec4:	bxeq	lr
   11ec8:	ldr	r3, [pc, #16]	; 11ee0 <__assert_fail@plt+0x5d8>
   11ecc:	cmp	r3, #0
   11ed0:	bxeq	lr
   11ed4:	bx	r3
   11ed8:	ldrdeq	r0, [r3], -ip
   11edc:	ldrdeq	r0, [r3], -ip
   11ee0:	andeq	r0, r0, r0
   11ee4:	ldr	r0, [pc, #36]	; 11f10 <__assert_fail@plt+0x608>
   11ee8:	ldr	r1, [pc, #36]	; 11f14 <__assert_fail@plt+0x60c>
   11eec:	sub	r1, r1, r0
   11ef0:	asr	r1, r1, #2
   11ef4:	add	r1, r1, r1, lsr #31
   11ef8:	asrs	r1, r1, #1
   11efc:	bxeq	lr
   11f00:	ldr	r3, [pc, #16]	; 11f18 <__assert_fail@plt+0x610>
   11f04:	cmp	r3, #0
   11f08:	bxeq	lr
   11f0c:	bx	r3
   11f10:	ldrdeq	r0, [r3], -ip
   11f14:	ldrdeq	r0, [r3], -ip
   11f18:	andeq	r0, r0, r0
   11f1c:	push	{r4, lr}
   11f20:	ldr	r4, [pc, #24]	; 11f40 <__assert_fail@plt+0x638>
   11f24:	ldrb	r3, [r4]
   11f28:	cmp	r3, #0
   11f2c:	popne	{r4, pc}
   11f30:	bl	11eb8 <__assert_fail@plt+0x5b0>
   11f34:	mov	r3, #1
   11f38:	strb	r3, [r4]
   11f3c:	pop	{r4, pc}
   11f40:	strdeq	r0, [r3], -ip
   11f44:	b	11ee4 <__assert_fail@plt+0x5dc>
   11f48:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f4c:	add	r8, r0, r1
   11f50:	add	r5, r0, #1
   11f54:	cmp	r5, r8
   11f58:	mov	fp, r3
   11f5c:	bcs	11fd8 <__assert_fail@plt+0x6d0>
   11f60:	mov	r9, r2
   11f64:	mov	r6, r5
   11f68:	ldr	sl, [pc, #120]	; 11fe8 <__assert_fail@plt+0x6e0>
   11f6c:	b	11f90 <__assert_fail@plt+0x688>
   11f70:	bl	11734 <strchr@plt>
   11f74:	mov	r3, r5
   11f78:	mov	r6, r7
   11f7c:	cmp	r0, #0
   11f80:	strbne	r4, [r3], #1
   11f84:	movne	r5, r3
   11f88:	cmp	r8, r7
   11f8c:	bls	11fd8 <__assert_fail@plt+0x6d0>
   11f90:	mov	r7, r6
   11f94:	mov	r0, sl
   11f98:	ldrb	r4, [r7], #1
   11f9c:	mov	r1, r4
   11fa0:	bl	11734 <strchr@plt>
   11fa4:	mov	r1, r4
   11fa8:	cmp	r0, #0
   11fac:	mov	r0, r9
   11fb0:	bne	11f70 <__assert_fail@plt+0x668>
   11fb4:	cmp	r6, r8
   11fb8:	bcs	11fd8 <__assert_fail@plt+0x6d0>
   11fbc:	sub	r8, r8, r6
   11fc0:	add	r8, r5, r8
   11fc4:	b	11fcc <__assert_fail@plt+0x6c4>
   11fc8:	ldrb	r4, [r6, #1]!
   11fcc:	strb	r4, [r5], #1
   11fd0:	cmp	r5, r8
   11fd4:	bne	11fc8 <__assert_fail@plt+0x6c0>
   11fd8:	mov	r1, fp
   11fdc:	mov	r0, r5
   11fe0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe4:	b	11638 <strcpy@plt>
   11fe8:	andeq	sp, r1, r8, lsl r3
   11fec:	push	{r4, r6, r7, lr}
   11ff0:	mov	r4, r0
   11ff4:	mov	r6, r2
   11ff8:	mov	r7, r3
   11ffc:	ldr	r2, [pc, #28]	; 12020 <__assert_fail@plt+0x718>
   12000:	ldr	r3, [pc, #28]	; 12024 <__assert_fail@plt+0x71c>
   12004:	bl	11f48 <__assert_fail@plt+0x640>
   12008:	mov	r2, r6
   1200c:	mov	r3, r7
   12010:	mov	r1, r4
   12014:	mov	r0, #1
   12018:	pop	{r4, r6, r7, lr}
   1201c:	b	11794 <__printf_chk@plt>
   12020:	andeq	sp, r1, r4, ror r4
   12024:	andeq	sp, r1, r0, ror r4
   12028:	push	{r4, r5, r6, lr}
   1202c:	mov	r4, r0
   12030:	mov	r5, r2
   12034:	ldr	r3, [pc, #24]	; 12054 <__assert_fail@plt+0x74c>
   12038:	ldr	r2, [pc, #24]	; 12058 <__assert_fail@plt+0x750>
   1203c:	bl	11f48 <__assert_fail@plt+0x640>
   12040:	mov	r2, r5
   12044:	mov	r1, r4
   12048:	mov	r0, #1
   1204c:	pop	{r4, r5, r6, lr}
   12050:	b	11794 <__printf_chk@plt>
   12054:	andeq	sp, r1, r0, ror fp
   12058:	andeq	sp, r1, r8, ror r4
   1205c:	push	{r4, r6, r7, lr}
   12060:	mov	r4, r0
   12064:	mov	r6, r2
   12068:	mov	r7, r3
   1206c:	ldr	r2, [pc, #28]	; 12090 <__assert_fail@plt+0x788>
   12070:	ldr	r3, [pc, #28]	; 12094 <__assert_fail@plt+0x78c>
   12074:	bl	11f48 <__assert_fail@plt+0x640>
   12078:	mov	r2, r6
   1207c:	mov	r3, r7
   12080:	mov	r1, r4
   12084:	mov	r0, #1
   12088:	pop	{r4, r6, r7, lr}
   1208c:	b	11794 <__printf_chk@plt>
   12090:	andeq	sp, r1, r0, lsl #9
   12094:	andeq	sp, r1, ip, ror r4
   12098:	push	{r4, r6, r7, lr}
   1209c:	mov	r4, r0
   120a0:	mov	r6, r2
   120a4:	mov	r7, r3
   120a8:	ldr	r2, [pc, #28]	; 120cc <__assert_fail@plt+0x7c4>
   120ac:	ldr	r3, [pc, #28]	; 120d0 <__assert_fail@plt+0x7c8>
   120b0:	bl	11f48 <__assert_fail@plt+0x640>
   120b4:	mov	r2, r6
   120b8:	mov	r3, r7
   120bc:	mov	r1, r4
   120c0:	mov	r0, #1
   120c4:	pop	{r4, r6, r7, lr}
   120c8:	b	11794 <__printf_chk@plt>
   120cc:	andeq	sp, r1, r8, lsl #9
   120d0:	andeq	sp, r1, r4, lsl #9
   120d4:	sub	r2, r2, #83	; 0x53
   120d8:	push	{r4, r5, lr}
   120dc:	mov	r4, r0
   120e0:	sub	sp, sp, #12
   120e4:	mov	r5, r1
   120e8:	cmp	r2, #33	; 0x21
   120ec:	ldrls	pc, [pc, r2, lsl #2]
   120f0:	b	12308 <__assert_fail@plt+0xa00>
   120f4:	muleq	r1, r8, r1
   120f8:	andeq	r2, r1, r0, asr #3
   120fc:	andeq	r2, r1, r8, lsl #6
   12100:	andeq	r2, r1, r8, lsl #6
   12104:	andeq	r2, r1, r8, lsl #6
   12108:	andeq	r2, r1, r8, lsl #6
   1210c:	andeq	r2, r1, r8, lsl #6
   12110:	andeq	r2, r1, r8, lsl #6
   12114:	andeq	r2, r1, r8, lsl #6
   12118:	andeq	r2, r1, r8, lsl #6
   1211c:	andeq	r2, r1, r8, lsl #6
   12120:	andeq	r2, r1, r8, lsl #6
   12124:	andeq	r2, r1, r8, lsl #6
   12128:	andeq	r2, r1, r8, lsl #6
   1212c:	andeq	r2, r1, r0, ror r2
   12130:	andeq	r2, r1, r0, lsl #5
   12134:	muleq	r1, r0, r2
   12138:	andeq	r2, r1, r0, lsr #5
   1213c:	andeq	r2, r1, r8, lsl #6
   12140:			; <UNDEFINED> instruction: 0x000122b0
   12144:	andeq	r2, r1, r8, lsl #6
   12148:	andeq	r2, r1, r8, lsl #6
   1214c:	andeq	r2, r1, r0, asr #5
   12150:	andeq	r2, r1, r8, lsl #6
   12154:	andeq	r2, r1, r8, lsl #6
   12158:	ldrdeq	r2, [r1], -r4
   1215c:	andeq	r2, r1, r8, lsl #6
   12160:	andeq	r2, r1, r8, ror #5
   12164:	andeq	r2, r1, r8, lsl #6
   12168:	andeq	r2, r1, r8, lsl #6
   1216c:	andeq	r2, r1, r8, lsl #6
   12170:	andeq	r2, r1, r8, lsl #6
   12174:	strdeq	r2, [r1], -r4
   12178:	andeq	r2, r1, ip, ror r1
   1217c:	ldr	r3, [sp, #28]
   12180:	ldr	r2, [r3]
   12184:	asr	r3, r2, #31
   12188:	bl	11fec <__assert_fail@plt+0x6e4>
   1218c:	mov	r0, #0
   12190:	add	sp, sp, #12
   12194:	pop	{r4, r5, pc}
   12198:	ldr	r3, [sp, #28]
   1219c:	ldr	r2, [r3, #60]	; 0x3c
   121a0:	asr	r3, r2, #31
   121a4:	orrs	r1, r2, r3
   121a8:	mov	r1, r5
   121ac:	ldreq	r3, [sp, #28]
   121b0:	ldreq	r2, [r3, #4]
   121b4:	asreq	r3, r2, #31
   121b8:	bl	1205c <__assert_fail@plt+0x754>
   121bc:	b	1218c <__assert_fail@plt+0x884>
   121c0:	ldr	r3, [sp, #28]
   121c4:	ldr	r2, [pc, #3016]	; 12d94 <__assert_fail@plt+0x148c>
   121c8:	ldr	r3, [r3]
   121cc:	cmp	r3, r2
   121d0:	beq	12d8c <__assert_fail@plt+0x1484>
   121d4:	ble	12408 <__assert_fail@plt+0xb00>
   121d8:	ldr	r2, [pc, #3000]	; 12d98 <__assert_fail@plt+0x1490>
   121dc:	cmp	r3, r2
   121e0:	beq	12d7c <__assert_fail@plt+0x1474>
   121e4:	ble	12628 <__assert_fail@plt+0xd20>
   121e8:	ldr	r2, [pc, #2988]	; 12d9c <__assert_fail@plt+0x1494>
   121ec:	cmp	r3, r2
   121f0:	beq	12d6c <__assert_fail@plt+0x1464>
   121f4:	ble	12750 <__assert_fail@plt+0xe48>
   121f8:	ldr	r2, [pc, #2976]	; 12da0 <__assert_fail@plt+0x1498>
   121fc:	cmp	r3, r2
   12200:	beq	12d54 <__assert_fail@plt+0x144c>
   12204:	ble	12378 <__assert_fail@plt+0xa70>
   12208:	ldr	r2, [pc, #2964]	; 12da4 <__assert_fail@plt+0x149c>
   1220c:	cmp	r3, r2
   12210:	beq	12cd4 <__assert_fail@plt+0x13cc>
   12214:	bgt	1233c <__assert_fail@plt+0xa34>
   12218:	sub	r2, r2, #15597568	; 0xee0000
   1221c:	sub	r2, r2, #61440	; 0xf000
   12220:	sub	r2, r2, #246	; 0xf6
   12224:	cmp	r3, r2
   12228:	beq	12c24 <__assert_fail@plt+0x131c>
   1222c:	add	r2, r2, #195584	; 0x2fc00
   12230:	add	r2, r2, #972	; 0x3cc
   12234:	cmp	r3, r2
   12238:	beq	12bc4 <__assert_fail@plt+0x12bc>
   1223c:	add	r2, r2, #288	; 0x120
   12240:	add	r2, r2, #-67108861	; 0xfc000003
   12244:	add	r2, r2, #66846720	; 0x3fc0000
   12248:	cmp	r3, r2
   1224c:	beq	12bbc <__assert_fail@plt+0x12b4>
   12250:	str	r3, [sp]
   12254:	mov	r2, #21
   12258:	ldr	r3, [pc, #2888]	; 12da8 <__assert_fail@plt+0x14a0>
   1225c:	mov	r1, #1
   12260:	ldr	r0, [pc, #2884]	; 12dac <__assert_fail@plt+0x14a4>
   12264:	bl	11770 <__sprintf_chk@plt>
   12268:	ldr	r2, [pc, #2876]	; 12dac <__assert_fail@plt+0x14a4>
   1226c:	b	1285c <__assert_fail@plt+0xf54>
   12270:	ldr	r3, [sp, #28]
   12274:	ldrd	r2, [r3, #24]
   12278:	bl	12098 <__assert_fail@plt+0x790>
   1227c:	b	1218c <__assert_fail@plt+0x884>
   12280:	ldr	r3, [sp, #28]
   12284:	ldrd	r2, [r3, #8]
   12288:	bl	12098 <__assert_fail@plt+0x790>
   1228c:	b	1218c <__assert_fail@plt+0x884>
   12290:	ldr	r3, [sp, #28]
   12294:	ldrd	r2, [r3, #32]
   12298:	bl	1205c <__assert_fail@plt+0x754>
   1229c:	b	1218c <__assert_fail@plt+0x884>
   122a0:	ldr	r3, [sp, #28]
   122a4:	ldrd	r2, [r3, #40]	; 0x28
   122a8:	bl	12098 <__assert_fail@plt+0x790>
   122ac:	b	1218c <__assert_fail@plt+0x884>
   122b0:	ldr	r3, [sp, #28]
   122b4:	ldrd	r2, [r3, #16]
   122b8:	bl	12098 <__assert_fail@plt+0x790>
   122bc:	b	1218c <__assert_fail@plt+0x884>
   122c0:	ldr	r3, [sp, #28]
   122c4:	ldr	r2, [r3, #52]	; 0x34
   122c8:	ldr	r3, [r3, #48]	; 0x30
   122cc:	bl	11fec <__assert_fail@plt+0x6e4>
   122d0:	b	1218c <__assert_fail@plt+0x884>
   122d4:	ldr	r3, [sp, #28]
   122d8:	ldr	r2, [r3, #56]	; 0x38
   122dc:	asr	r3, r2, #31
   122e0:	bl	1205c <__assert_fail@plt+0x754>
   122e4:	b	1218c <__assert_fail@plt+0x884>
   122e8:	ldr	r2, [sp, #24]
   122ec:	bl	12028 <__assert_fail@plt+0x720>
   122f0:	b	1218c <__assert_fail@plt+0x884>
   122f4:	ldr	r3, [sp, #28]
   122f8:	ldr	r2, [r3, #4]
   122fc:	asr	r3, r2, #31
   12300:	bl	1205c <__assert_fail@plt+0x754>
   12304:	b	1218c <__assert_fail@plt+0x884>
   12308:	ldr	r3, [pc, #2720]	; 12db0 <__assert_fail@plt+0x14a8>
   1230c:	ldr	r0, [r3]
   12310:	ldr	r3, [r0, #20]
   12314:	ldr	r2, [r0, #24]
   12318:	cmp	r3, r2
   1231c:	addcc	r1, r3, #1
   12320:	movcc	r2, #63	; 0x3f
   12324:	strcc	r1, [r0, #20]
   12328:	strbcc	r2, [r3]
   1232c:	bcc	1218c <__assert_fail@plt+0x884>
   12330:	mov	r1, #63	; 0x3f
   12334:	bl	117f4 <__overflow@plt>
   12338:	b	1218c <__assert_fail@plt+0x884>
   1233c:	ldr	r2, [pc, #2672]	; 12db4 <__assert_fail@plt+0x14ac>
   12340:	cmp	r3, r2
   12344:	beq	12c2c <__assert_fail@plt+0x1324>
   12348:	add	r2, r2, #53215232	; 0x32c0000
   1234c:	add	r2, r2, #258048	; 0x3f000
   12350:	add	r2, r2, #67	; 0x43
   12354:	cmp	r3, r2
   12358:	beq	12ac4 <__assert_fail@plt+0x11bc>
   1235c:	add	r2, r2, #-134217728	; 0xf8000000
   12360:	sub	r2, r2, #655360	; 0xa0000
   12364:	sub	r2, r2, #1296	; 0x510
   12368:	cmp	r3, r2
   1236c:	bne	12250 <__assert_fail@plt+0x948>
   12370:	ldr	r2, [pc, #2624]	; 12db8 <__assert_fail@plt+0x14b0>
   12374:	b	1285c <__assert_fail@plt+0xf54>
   12378:	ldr	r2, [pc, #2620]	; 12dbc <__assert_fail@plt+0x14b4>
   1237c:	cmp	r3, r2
   12380:	beq	12cfc <__assert_fail@plt+0x13f4>
   12384:	bgt	123cc <__assert_fail@plt+0xac4>
   12388:	sub	r2, r2, #44302336	; 0x2a40000
   1238c:	sub	r2, r2, #112640	; 0x1b800
   12390:	sub	r2, r2, #988	; 0x3dc
   12394:	cmp	r3, r2
   12398:	beq	12c1c <__assert_fail@plt+0x1314>
   1239c:	add	r2, r2, #31719424	; 0x1e40000
   123a0:	add	r2, r2, #136192	; 0x21400
   123a4:	add	r2, r2, #35	; 0x23
   123a8:	cmp	r3, r2
   123ac:	beq	12bac <__assert_fail@plt+0x12a4>
   123b0:	sub	r2, r2, #31719424	; 0x1e40000
   123b4:	sub	r2, r2, #136192	; 0x21400
   123b8:	sub	r2, r2, #38	; 0x26
   123bc:	cmp	r3, r2
   123c0:	bne	12250 <__assert_fail@plt+0x948>
   123c4:	ldr	r2, [pc, #2548]	; 12dc0 <__assert_fail@plt+0x14b8>
   123c8:	b	1285c <__assert_fail@plt+0xf54>
   123cc:	ldr	r2, [pc, #2544]	; 12dc4 <__assert_fail@plt+0x14bc>
   123d0:	cmp	r3, r2
   123d4:	beq	12bdc <__assert_fail@plt+0x12d4>
   123d8:	add	r2, r2, #847872	; 0xcf000
   123dc:	add	r2, r2, #780	; 0x30c
   123e0:	add	r2, r2, #3
   123e4:	cmp	r3, r2
   123e8:	beq	12bb4 <__assert_fail@plt+0x12ac>
   123ec:	sub	r2, r2, #53477376	; 0x3300000
   123f0:	sub	r2, r2, #139264	; 0x22000
   123f4:	sub	r2, r2, #32
   123f8:	cmp	r3, r2
   123fc:	bne	12250 <__assert_fail@plt+0x948>
   12400:	ldr	r2, [pc, #2496]	; 12dc8 <__assert_fail@plt+0x14c0>
   12404:	b	1285c <__assert_fail@plt+0xf54>
   12408:	ldr	r2, [pc, #2492]	; 12dcc <__assert_fail@plt+0x14c4>
   1240c:	cmp	r3, r2
   12410:	beq	12d84 <__assert_fail@plt+0x147c>
   12414:	ble	1250c <__assert_fail@plt+0xc04>
   12418:	ldr	r2, [pc, #2480]	; 12dd0 <__assert_fail@plt+0x14c8>
   1241c:	cmp	r3, r2
   12420:	beq	12d74 <__assert_fail@plt+0x146c>
   12424:	ble	127f0 <__assert_fail@plt+0xee8>
   12428:	ldr	r2, [pc, #2468]	; 12dd4 <__assert_fail@plt+0x14cc>
   1242c:	cmp	r3, r2
   12430:	beq	12d4c <__assert_fail@plt+0x1444>
   12434:	ble	124a4 <__assert_fail@plt+0xb9c>
   12438:	ldr	r2, [pc, #2456]	; 12dd8 <__assert_fail@plt+0x14d0>
   1243c:	cmp	r3, r2
   12440:	beq	12cf4 <__assert_fail@plt+0x13ec>
   12444:	bgt	12474 <__assert_fail@plt+0xb6c>
   12448:	ldr	r2, [pc, #2444]	; 12ddc <__assert_fail@plt+0x14d4>
   1244c:	cmp	r3, r2
   12450:	beq	12bd4 <__assert_fail@plt+0x12cc>
   12454:	ldr	r2, [pc, #2436]	; 12de0 <__assert_fail@plt+0x14d8>
   12458:	cmp	r3, r2
   1245c:	beq	12b9c <__assert_fail@plt+0x1294>
   12460:	ldr	r2, [pc, #2428]	; 12de4 <__assert_fail@plt+0x14dc>
   12464:	cmp	r3, r2
   12468:	bne	12250 <__assert_fail@plt+0x948>
   1246c:	ldr	r2, [pc, #2420]	; 12de8 <__assert_fail@plt+0x14e0>
   12470:	b	1285c <__assert_fail@plt+0xf54>
   12474:	ldr	r2, [pc, #2416]	; 12dec <__assert_fail@plt+0x14e4>
   12478:	cmp	r3, r2
   1247c:	beq	12bcc <__assert_fail@plt+0x12c4>
   12480:	add	r2, r2, #9792	; 0x2640
   12484:	add	r2, r2, #7
   12488:	cmp	r3, r2
   1248c:	beq	12ba4 <__assert_fail@plt+0x129c>
   12490:	ldr	r2, [pc, #2392]	; 12df0 <__assert_fail@plt+0x14e8>
   12494:	cmp	r3, r2
   12498:	bne	12250 <__assert_fail@plt+0x948>
   1249c:	ldr	r2, [pc, #2384]	; 12df4 <__assert_fail@plt+0x14ec>
   124a0:	b	1285c <__assert_fail@plt+0xf54>
   124a4:	ldr	r2, [pc, #2380]	; 12df8 <__assert_fail@plt+0x14f0>
   124a8:	cmp	r3, r2
   124ac:	beq	12d0c <__assert_fail@plt+0x1404>
   124b0:	bgt	124e0 <__assert_fail@plt+0xbd8>
   124b4:	ldr	r2, [pc, #2368]	; 12dfc <__assert_fail@plt+0x14f4>
   124b8:	cmp	r3, r2
   124bc:	beq	12bfc <__assert_fail@plt+0x12f4>
   124c0:	ldr	r2, [pc, #2360]	; 12e00 <__assert_fail@plt+0x14f8>
   124c4:	cmp	r3, r2
   124c8:	beq	12b8c <__assert_fail@plt+0x1284>
   124cc:	ldr	r2, [pc, #2352]	; 12e04 <__assert_fail@plt+0x14fc>
   124d0:	cmp	r3, r2
   124d4:	bne	12250 <__assert_fail@plt+0x948>
   124d8:	ldr	r2, [pc, #2344]	; 12e08 <__assert_fail@plt+0x1500>
   124dc:	b	1285c <__assert_fail@plt+0xf54>
   124e0:	ldr	r2, [pc, #2340]	; 12e0c <__assert_fail@plt+0x1504>
   124e4:	cmp	r3, r2
   124e8:	beq	12bec <__assert_fail@plt+0x12e4>
   124ec:	ldr	r2, [pc, #2332]	; 12e10 <__assert_fail@plt+0x1508>
   124f0:	cmp	r3, r2
   124f4:	beq	12b94 <__assert_fail@plt+0x128c>
   124f8:	ldr	r2, [pc, #2324]	; 12e14 <__assert_fail@plt+0x150c>
   124fc:	cmp	r3, r2
   12500:	bne	12250 <__assert_fail@plt+0x948>
   12504:	ldr	r2, [pc, #2316]	; 12e18 <__assert_fail@plt+0x1510>
   12508:	b	1285c <__assert_fail@plt+0xf54>
   1250c:	ldr	r2, [pc, #2312]	; 12e1c <__assert_fail@plt+0x1514>
   12510:	cmp	r3, r2
   12514:	beq	12d64 <__assert_fail@plt+0x145c>
   12518:	ble	12590 <__assert_fail@plt+0xc88>
   1251c:	ldr	r2, [pc, #2300]	; 12e20 <__assert_fail@plt+0x1518>
   12520:	cmp	r3, r2
   12524:	beq	12d2c <__assert_fail@plt+0x1424>
   12528:	ble	128a8 <__assert_fail@plt+0xfa0>
   1252c:	ldr	r2, [pc, #2288]	; 12e24 <__assert_fail@plt+0x151c>
   12530:	cmp	r3, r2
   12534:	beq	12d04 <__assert_fail@plt+0x13fc>
   12538:	bgt	12568 <__assert_fail@plt+0xc60>
   1253c:	ldr	r2, [pc, #2276]	; 12e28 <__assert_fail@plt+0x1520>
   12540:	cmp	r3, r2
   12544:	beq	12bf4 <__assert_fail@plt+0x12ec>
   12548:	ldr	r2, [pc, #2268]	; 12e2c <__assert_fail@plt+0x1524>
   1254c:	cmp	r3, r2
   12550:	beq	12b7c <__assert_fail@plt+0x1274>
   12554:	ldr	r2, [pc, #2260]	; 12e30 <__assert_fail@plt+0x1528>
   12558:	cmp	r3, r2
   1255c:	bne	12250 <__assert_fail@plt+0x948>
   12560:	ldr	r2, [pc, #2252]	; 12e34 <__assert_fail@plt+0x152c>
   12564:	b	1285c <__assert_fail@plt+0xf54>
   12568:	cmp	r3, #16384	; 0x4000
   1256c:	beq	12be4 <__assert_fail@plt+0x12dc>
   12570:	ldr	r2, [pc, #2240]	; 12e38 <__assert_fail@plt+0x1530>
   12574:	cmp	r3, r2
   12578:	beq	12b84 <__assert_fail@plt+0x127c>
   1257c:	sub	r2, r2, #3024	; 0xbd0
   12580:	cmp	r3, r2
   12584:	bne	12250 <__assert_fail@plt+0x948>
   12588:	ldr	r2, [pc, #2220]	; 12e3c <__assert_fail@plt+0x1534>
   1258c:	b	1285c <__assert_fail@plt+0xf54>
   12590:	ldr	r2, [pc, #2216]	; 12e40 <__assert_fail@plt+0x1538>
   12594:	cmp	r3, r2
   12598:	beq	12d24 <__assert_fail@plt+0x141c>
   1259c:	ble	12924 <__assert_fail@plt+0x101c>
   125a0:	ldr	r2, [pc, #2204]	; 12e44 <__assert_fail@plt+0x153c>
   125a4:	cmp	r3, r2
   125a8:	beq	12ccc <__assert_fail@plt+0x13c4>
   125ac:	bgt	125ec <__assert_fail@plt+0xce4>
   125b0:	sub	r2, r2, #348127232	; 0x14c00000
   125b4:	sub	r2, r2, #2097152	; 0x200000
   125b8:	sub	r2, r2, #124	; 0x7c
   125bc:	cmp	r3, r2
   125c0:	beq	12c0c <__assert_fail@plt+0x1304>
   125c4:	add	r2, r2, #24903680	; 0x17c0000
   125c8:	add	r2, r2, #247808	; 0x3c800
   125cc:	add	r2, r2, #169	; 0xa9
   125d0:	cmp	r3, r2
   125d4:	beq	12b6c <__assert_fail@plt+0x1264>
   125d8:	ldr	r2, [pc, #2152]	; 12e48 <__assert_fail@plt+0x1540>
   125dc:	cmp	r3, r2
   125e0:	bne	12250 <__assert_fail@plt+0x948>
   125e4:	ldr	r2, [pc, #2144]	; 12e4c <__assert_fail@plt+0x1544>
   125e8:	b	1285c <__assert_fail@plt+0xf54>
   125ec:	ldr	r2, [pc, #2140]	; 12e50 <__assert_fail@plt+0x1548>
   125f0:	cmp	r3, r2
   125f4:	beq	12c14 <__assert_fail@plt+0x130c>
   125f8:	add	r2, r2, #1622016	; 0x18c000
   125fc:	add	r2, r2, #10368	; 0x2880
   12600:	add	r2, r2, #61	; 0x3d
   12604:	cmp	r3, r2
   12608:	beq	12b74 <__assert_fail@plt+0x126c>
   1260c:	sub	r2, r2, #111149056	; 0x6a00000
   12610:	sub	r2, r2, #51200	; 0xc800
   12614:	sub	r2, r2, #57	; 0x39
   12618:	cmp	r3, r2
   1261c:	bne	12250 <__assert_fail@plt+0x948>
   12620:	ldr	r2, [pc, #2092]	; 12e54 <__assert_fail@plt+0x154c>
   12624:	b	1285c <__assert_fail@plt+0xf54>
   12628:	ldr	r2, [pc, #2088]	; 12e58 <__assert_fail@plt+0x1550>
   1262c:	cmp	r3, r2
   12630:	beq	12d5c <__assert_fail@plt+0x1454>
   12634:	ble	126c8 <__assert_fail@plt+0xdc0>
   12638:	ldr	r2, [pc, #2076]	; 12e5c <__assert_fail@plt+0x1554>
   1263c:	cmp	r3, r2
   12640:	beq	12d1c <__assert_fail@plt+0x1414>
   12644:	ble	129ac <__assert_fail@plt+0x10a4>
   12648:	ldr	r2, [pc, #2064]	; 12e60 <__assert_fail@plt+0x1558>
   1264c:	cmp	r3, r2
   12650:	beq	12d14 <__assert_fail@plt+0x140c>
   12654:	bgt	12694 <__assert_fail@plt+0xd8c>
   12658:	sub	r2, r2, #185597952	; 0xb100000
   1265c:	sub	r2, r2, #327680	; 0x50000
   12660:	sub	r2, r2, #800	; 0x320
   12664:	cmp	r3, r2
   12668:	beq	12c64 <__assert_fail@plt+0x135c>
   1266c:	add	r2, r2, #2544	; 0x9f0
   12670:	add	r2, r2, #134217730	; 0x8000002
   12674:	add	r2, r2, #16318464	; 0xf90000
   12678:	cmp	r3, r2
   1267c:	beq	12b5c <__assert_fail@plt+0x1254>
   12680:	ldr	r2, [pc, #2012]	; 12e64 <__assert_fail@plt+0x155c>
   12684:	cmp	r3, r2
   12688:	bne	12250 <__assert_fail@plt+0x948>
   1268c:	ldr	r2, [pc, #2004]	; 12e68 <__assert_fail@plt+0x1560>
   12690:	b	1285c <__assert_fail@plt+0xf54>
   12694:	ldr	r2, [pc, #2000]	; 12e6c <__assert_fail@plt+0x1564>
   12698:	cmp	r3, r2
   1269c:	beq	12c04 <__assert_fail@plt+0x12fc>
   126a0:	add	r2, r2, #1776	; 0x6f0
   126a4:	add	r2, r2, #7
   126a8:	cmp	r3, r2
   126ac:	beq	12b64 <__assert_fail@plt+0x125c>
   126b0:	sub	r2, r2, #5824	; 0x16c0
   126b4:	sub	r2, r2, #57	; 0x39
   126b8:	cmp	r3, r2
   126bc:	bne	12250 <__assert_fail@plt+0x948>
   126c0:	ldr	r2, [pc, #1960]	; 12e70 <__assert_fail@plt+0x1568>
   126c4:	b	1285c <__assert_fail@plt+0xf54>
   126c8:	ldr	r2, [pc, #1956]	; 12e74 <__assert_fail@plt+0x156c>
   126cc:	cmp	r3, r2
   126d0:	beq	12d44 <__assert_fail@plt+0x143c>
   126d4:	ble	12968 <__assert_fail@plt+0x1060>
   126d8:	ldr	r2, [pc, #1944]	; 12e78 <__assert_fail@plt+0x1570>
   126dc:	cmp	r3, r2
   126e0:	beq	12cdc <__assert_fail@plt+0x13d4>
   126e4:	bgt	12724 <__assert_fail@plt+0xe1c>
   126e8:	ldr	r2, [pc, #1932]	; 12e7c <__assert_fail@plt+0x1574>
   126ec:	cmp	r3, r2
   126f0:	beq	12c74 <__assert_fail@plt+0x136c>
   126f4:	add	r2, r2, #26738688	; 0x1980000
   126f8:	add	r2, r2, #203776	; 0x31c00
   126fc:	add	r2, r2, #992	; 0x3e0
   12700:	cmp	r3, r2
   12704:	beq	12b4c <__assert_fail@plt+0x1244>
   12708:	sub	r2, r2, #63963136	; 0x3d00000
   1270c:	sub	r2, r2, #47616	; 0xba00
   12710:	sub	r2, r2, #242	; 0xf2
   12714:	cmp	r3, r2
   12718:	bne	12250 <__assert_fail@plt+0x948>
   1271c:	ldr	r2, [pc, #1884]	; 12e80 <__assert_fail@plt+0x1578>
   12720:	b	1285c <__assert_fail@plt+0xf54>
   12724:	ldr	r2, [pc, #1880]	; 12e84 <__assert_fail@plt+0x157c>
   12728:	cmp	r3, r2
   1272c:	beq	12c5c <__assert_fail@plt+0x1354>
   12730:	ldr	r2, [pc, #1872]	; 12e88 <__assert_fail@plt+0x1580>
   12734:	cmp	r3, r2
   12738:	beq	12b54 <__assert_fail@plt+0x124c>
   1273c:	ldr	r2, [pc, #1864]	; 12e8c <__assert_fail@plt+0x1584>
   12740:	cmp	r3, r2
   12744:	bne	12250 <__assert_fail@plt+0x948>
   12748:	ldr	r2, [pc, #1856]	; 12e90 <__assert_fail@plt+0x1588>
   1274c:	b	1285c <__assert_fail@plt+0xf54>
   12750:	add	r2, r2, #-50331648	; 0xfd000000
   12754:	sub	r2, r2, #64256	; 0xfb00
   12758:	sub	r2, r2, #5
   1275c:	cmp	r3, r2
   12760:	beq	12d34 <__assert_fail@plt+0x142c>
   12764:	ble	128e0 <__assert_fail@plt+0xfd8>
   12768:	ldr	r2, [pc, #1828]	; 12e94 <__assert_fail@plt+0x158c>
   1276c:	cmp	r3, r2
   12770:	beq	12ce4 <__assert_fail@plt+0x13dc>
   12774:	bgt	127bc <__assert_fail@plt+0xeb4>
   12778:	add	r2, r2, #256	; 0x100
   1277c:	add	r2, r2, #-67108861	; 0xfc000003
   12780:	add	r2, r2, #51380224	; 0x3100000
   12784:	cmp	r3, r2
   12788:	beq	12c84 <__assert_fail@plt+0x137c>
   1278c:	add	r2, r2, #15597568	; 0xee0000
   12790:	add	r2, r2, #65280	; 0xff00
   12794:	add	r2, r2, #3
   12798:	cmp	r3, r2
   1279c:	beq	12b3c <__assert_fail@plt+0x1234>
   127a0:	sub	r2, r2, #16646144	; 0xfe0000
   127a4:	sub	r2, r2, #65024	; 0xfe00
   127a8:	sub	r2, r2, #10
   127ac:	cmp	r3, r2
   127b0:	bne	12250 <__assert_fail@plt+0x948>
   127b4:	ldr	r2, [pc, #1756]	; 12e98 <__assert_fail@plt+0x1590>
   127b8:	b	1285c <__assert_fail@plt+0xf54>
   127bc:	ldr	r2, [pc, #1752]	; 12e9c <__assert_fail@plt+0x1594>
   127c0:	cmp	r3, r2
   127c4:	beq	12c6c <__assert_fail@plt+0x1364>
   127c8:	add	r2, r2, #16384000	; 0xfa0000
   127cc:	add	r2, r2, #62464	; 0xf400
   127d0:	add	r2, r2, #176	; 0xb0
   127d4:	cmp	r3, r2
   127d8:	beq	12b44 <__assert_fail@plt+0x123c>
   127dc:	ldr	r2, [pc, #1724]	; 12ea0 <__assert_fail@plt+0x1598>
   127e0:	cmp	r3, r2
   127e4:	bne	12250 <__assert_fail@plt+0x948>
   127e8:	ldr	r2, [pc, #1716]	; 12ea4 <__assert_fail@plt+0x159c>
   127ec:	b	1285c <__assert_fail@plt+0xf54>
   127f0:	ldr	r2, [pc, #1712]	; 12ea8 <__assert_fail@plt+0x15a0>
   127f4:	cmp	r3, r2
   127f8:	beq	12d3c <__assert_fail@plt+0x1434>
   127fc:	ble	1286c <__assert_fail@plt+0xf64>
   12800:	ldr	r2, [pc, #1700]	; 12eac <__assert_fail@plt+0x15a4>
   12804:	cmp	r3, r2
   12808:	beq	12cec <__assert_fail@plt+0x13e4>
   1280c:	bgt	1283c <__assert_fail@plt+0xf34>
   12810:	ldr	r2, [pc, #1688]	; 12eb0 <__assert_fail@plt+0x15a8>
   12814:	cmp	r3, r2
   12818:	beq	12c94 <__assert_fail@plt+0x138c>
   1281c:	ldr	r2, [pc, #1680]	; 12eb4 <__assert_fail@plt+0x15ac>
   12820:	cmp	r3, r2
   12824:	beq	12b2c <__assert_fail@plt+0x1224>
   12828:	sub	r2, r2, #5248	; 0x1480
   1282c:	cmp	r3, r2
   12830:	bne	12250 <__assert_fail@plt+0x948>
   12834:	ldr	r2, [pc, #1660]	; 12eb8 <__assert_fail@plt+0x15b0>
   12838:	b	1285c <__assert_fail@plt+0xf54>
   1283c:	ldr	r2, [pc, #1656]	; 12ebc <__assert_fail@plt+0x15b4>
   12840:	cmp	r3, r2
   12844:	beq	12c7c <__assert_fail@plt+0x1374>
   12848:	bgt	12b34 <__assert_fail@plt+0x122c>
   1284c:	sub	r2, r2, #2368	; 0x940
   12850:	cmp	r3, r2
   12854:	ldreq	r2, [pc, #1636]	; 12ec0 <__assert_fail@plt+0x15b8>
   12858:	bne	12250 <__assert_fail@plt+0x948>
   1285c:	mov	r1, r5
   12860:	mov	r0, r4
   12864:	bl	12028 <__assert_fail@plt+0x720>
   12868:	b	1218c <__assert_fail@plt+0x884>
   1286c:	ldr	r2, [pc, #1616]	; 12ec4 <__assert_fail@plt+0x15bc>
   12870:	cmp	r3, r2
   12874:	beq	12c9c <__assert_fail@plt+0x1394>
   12878:	ble	12aa4 <__assert_fail@plt+0x119c>
   1287c:	ldr	r2, [pc, #1604]	; 12ec8 <__assert_fail@plt+0x15c0>
   12880:	cmp	r3, r2
   12884:	beq	12c8c <__assert_fail@plt+0x1384>
   12888:	ldr	r2, [pc, #1596]	; 12ecc <__assert_fail@plt+0x15c4>
   1288c:	cmp	r3, r2
   12890:	beq	12b24 <__assert_fail@plt+0x121c>
   12894:	ldr	r2, [pc, #1588]	; 12ed0 <__assert_fail@plt+0x15c8>
   12898:	cmp	r3, r2
   1289c:	bne	12250 <__assert_fail@plt+0x948>
   128a0:	ldr	r2, [pc, #1580]	; 12ed4 <__assert_fail@plt+0x15cc>
   128a4:	b	1285c <__assert_fail@plt+0xf54>
   128a8:	ldr	r2, [pc, #1576]	; 12ed8 <__assert_fail@plt+0x15d0>
   128ac:	cmp	r3, r2
   128b0:	beq	12cac <__assert_fail@plt+0x13a4>
   128b4:	ble	12a88 <__assert_fail@plt+0x1180>
   128b8:	ldr	r2, [pc, #1564]	; 12edc <__assert_fail@plt+0x15d4>
   128bc:	cmp	r3, r2
   128c0:	beq	12c44 <__assert_fail@plt+0x133c>
   128c4:	add	r2, r2, #10
   128c8:	cmp	r3, r2
   128cc:	beq	12b1c <__assert_fail@plt+0x1214>
   128d0:	cmp	r3, #1984	; 0x7c0
   128d4:	bne	12250 <__assert_fail@plt+0x948>
   128d8:	ldr	r2, [pc, #1536]	; 12ee0 <__assert_fail@plt+0x15d8>
   128dc:	b	1285c <__assert_fail@plt+0xf54>
   128e0:	add	r2, r2, #-184549376	; 0xf5000000
   128e4:	sub	r2, r2, #598016	; 0x92000
   128e8:	sub	r2, r2, #32
   128ec:	cmp	r3, r2
   128f0:	beq	12cbc <__assert_fail@plt+0x13b4>
   128f4:	ble	12a60 <__assert_fail@plt+0x1158>
   128f8:	ldr	r2, [pc, #1508]	; 12ee4 <__assert_fail@plt+0x15dc>
   128fc:	cmp	r3, r2
   12900:	beq	12c3c <__assert_fail@plt+0x1334>
   12904:	ldr	r2, [pc, #1500]	; 12ee8 <__assert_fail@plt+0x15e0>
   12908:	cmp	r3, r2
   1290c:	beq	12b14 <__assert_fail@plt+0x120c>
   12910:	ldr	r2, [pc, #1492]	; 12eec <__assert_fail@plt+0x15e4>
   12914:	cmp	r3, r2
   12918:	bne	12250 <__assert_fail@plt+0x948>
   1291c:	ldr	r2, [pc, #1484]	; 12ef0 <__assert_fail@plt+0x15e8>
   12920:	b	1285c <__assert_fail@plt+0xf54>
   12924:	ldr	r2, [pc, #1480]	; 12ef4 <__assert_fail@plt+0x15ec>
   12928:	cmp	r3, r2
   1292c:	beq	12cb4 <__assert_fail@plt+0x13ac>
   12930:	ble	12a40 <__assert_fail@plt+0x1138>
   12934:	ldr	r2, [pc, #1468]	; 12ef8 <__assert_fail@plt+0x15f0>
   12938:	cmp	r3, r2
   1293c:	beq	12c54 <__assert_fail@plt+0x134c>
   12940:	add	r2, r2, #14811136	; 0xe20000
   12944:	add	r2, r2, #28160	; 0x6e00
   12948:	add	r2, r2, #138	; 0x8a
   1294c:	cmp	r3, r2
   12950:	beq	12b0c <__assert_fail@plt+0x1204>
   12954:	ldr	r2, [pc, #1440]	; 12efc <__assert_fail@plt+0x15f4>
   12958:	cmp	r3, r2
   1295c:	bne	12250 <__assert_fail@plt+0x948>
   12960:	ldr	r2, [pc, #1432]	; 12f00 <__assert_fail@plt+0x15f8>
   12964:	b	1285c <__assert_fail@plt+0xf54>
   12968:	ldr	r2, [pc, #1428]	; 12f04 <__assert_fail@plt+0x15fc>
   1296c:	cmp	r3, r2
   12970:	beq	12ca4 <__assert_fail@plt+0x139c>
   12974:	ble	12a20 <__assert_fail@plt+0x1118>
   12978:	ldr	r2, [pc, #1416]	; 12f08 <__assert_fail@plt+0x1600>
   1297c:	cmp	r3, r2
   12980:	beq	12c4c <__assert_fail@plt+0x1344>
   12984:	add	r2, r2, #44564480	; 0x2a80000
   12988:	add	r2, r2, #66560	; 0x10400
   1298c:	add	r2, r2, #182	; 0xb6
   12990:	cmp	r3, r2
   12994:	beq	12b04 <__assert_fail@plt+0x11fc>
   12998:	ldr	r2, [pc, #1388]	; 12f0c <__assert_fail@plt+0x1604>
   1299c:	cmp	r3, r2
   129a0:	bne	12250 <__assert_fail@plt+0x948>
   129a4:	ldr	r2, [pc, #1380]	; 12f10 <__assert_fail@plt+0x1608>
   129a8:	b	1285c <__assert_fail@plt+0xf54>
   129ac:	ldr	r2, [pc, #1376]	; 12f14 <__assert_fail@plt+0x160c>
   129b0:	cmp	r3, r2
   129b4:	beq	12cc4 <__assert_fail@plt+0x13bc>
   129b8:	ble	129f8 <__assert_fail@plt+0x10f0>
   129bc:	ldr	r2, [pc, #1364]	; 12f18 <__assert_fail@plt+0x1610>
   129c0:	cmp	r3, r2
   129c4:	beq	12c34 <__assert_fail@plt+0x132c>
   129c8:	add	r2, r2, #16252928	; 0xf80000
   129cc:	add	r2, r2, #3840	; 0xf00
   129d0:	add	r2, r2, #6
   129d4:	cmp	r3, r2
   129d8:	beq	12afc <__assert_fail@plt+0x11f4>
   129dc:	sub	r2, r2, #16449536	; 0xfb0000
   129e0:	sub	r2, r2, #2592	; 0xa20
   129e4:	sub	r2, r2, #2
   129e8:	cmp	r3, r2
   129ec:	bne	12250 <__assert_fail@plt+0x948>
   129f0:	ldr	r2, [pc, #1316]	; 12f1c <__assert_fail@plt+0x1614>
   129f4:	b	1285c <__assert_fail@plt+0xf54>
   129f8:	sub	r2, r2, #94371840	; 0x5a00000
   129fc:	sub	r2, r2, #401408	; 0x62000
   12a00:	sub	r2, r2, #2144	; 0x860
   12a04:	cmp	r3, r2
   12a08:	beq	12af4 <__assert_fail@plt+0x11ec>
   12a0c:	ldr	r2, [pc, #1292]	; 12f20 <__assert_fail@plt+0x1618>
   12a10:	cmp	r3, r2
   12a14:	ldreq	r2, [pc, #1288]	; 12f24 <__assert_fail@plt+0x161c>
   12a18:	beq	1285c <__assert_fail@plt+0xf54>
   12a1c:	b	12250 <__assert_fail@plt+0x948>
   12a20:	ldr	r2, [pc, #1280]	; 12f28 <__assert_fail@plt+0x1620>
   12a24:	cmp	r3, r2
   12a28:	beq	12aec <__assert_fail@plt+0x11e4>
   12a2c:	add	r2, r2, #1
   12a30:	cmp	r3, r2
   12a34:	ldreq	r2, [pc, #1264]	; 12f2c <__assert_fail@plt+0x1624>
   12a38:	beq	1285c <__assert_fail@plt+0xf54>
   12a3c:	b	12250 <__assert_fail@plt+0x948>
   12a40:	add	r2, r2, #-268435456	; 0xf0000000
   12a44:	cmp	r3, r2
   12a48:	beq	12ae4 <__assert_fail@plt+0x11dc>
   12a4c:	ldr	r2, [pc, #1244]	; 12f30 <__assert_fail@plt+0x1628>
   12a50:	cmp	r3, r2
   12a54:	ldreq	r2, [pc, #1240]	; 12f34 <__assert_fail@plt+0x162c>
   12a58:	beq	1285c <__assert_fail@plt+0xf54>
   12a5c:	b	12250 <__assert_fail@plt+0x948>
   12a60:	sub	r2, r2, #50855936	; 0x3080000
   12a64:	sub	r2, r2, #196608	; 0x30000
   12a68:	sub	r2, r2, #776	; 0x308
   12a6c:	cmp	r3, r2
   12a70:	beq	12adc <__assert_fail@plt+0x11d4>
   12a74:	ldr	r2, [pc, #1212]	; 12f38 <__assert_fail@plt+0x1630>
   12a78:	cmp	r3, r2
   12a7c:	ldreq	r2, [pc, #1208]	; 12f3c <__assert_fail@plt+0x1634>
   12a80:	beq	1285c <__assert_fail@plt+0xf54>
   12a84:	b	12250 <__assert_fail@plt+0x948>
   12a88:	ldr	r2, [pc, #1200]	; 12f40 <__assert_fail@plt+0x1638>
   12a8c:	cmp	r3, r2
   12a90:	beq	12ad4 <__assert_fail@plt+0x11cc>
   12a94:	cmp	r3, #47	; 0x2f
   12a98:	ldreq	r2, [pc, #1188]	; 12f44 <__assert_fail@plt+0x163c>
   12a9c:	beq	1285c <__assert_fail@plt+0xf54>
   12aa0:	b	12250 <__assert_fail@plt+0x948>
   12aa4:	ldr	r2, [pc, #1180]	; 12f48 <__assert_fail@plt+0x1640>
   12aa8:	cmp	r3, r2
   12aac:	beq	12acc <__assert_fail@plt+0x11c4>
   12ab0:	ldr	r2, [pc, #1172]	; 12f4c <__assert_fail@plt+0x1644>
   12ab4:	cmp	r3, r2
   12ab8:	ldreq	r2, [pc, #1168]	; 12f50 <__assert_fail@plt+0x1648>
   12abc:	beq	1285c <__assert_fail@plt+0xf54>
   12ac0:	b	12250 <__assert_fail@plt+0x948>
   12ac4:	ldr	r2, [pc, #1160]	; 12f54 <__assert_fail@plt+0x164c>
   12ac8:	b	1285c <__assert_fail@plt+0xf54>
   12acc:	ldr	r2, [pc, #1156]	; 12f58 <__assert_fail@plt+0x1650>
   12ad0:	b	1285c <__assert_fail@plt+0xf54>
   12ad4:	ldr	r2, [pc, #1152]	; 12f5c <__assert_fail@plt+0x1654>
   12ad8:	b	1285c <__assert_fail@plt+0xf54>
   12adc:	ldr	r2, [pc, #1148]	; 12f60 <__assert_fail@plt+0x1658>
   12ae0:	b	1285c <__assert_fail@plt+0xf54>
   12ae4:	ldr	r2, [pc, #1144]	; 12f64 <__assert_fail@plt+0x165c>
   12ae8:	b	1285c <__assert_fail@plt+0xf54>
   12aec:	ldr	r2, [pc, #1140]	; 12f68 <__assert_fail@plt+0x1660>
   12af0:	b	1285c <__assert_fail@plt+0xf54>
   12af4:	ldr	r2, [pc, #1136]	; 12f6c <__assert_fail@plt+0x1664>
   12af8:	b	1285c <__assert_fail@plt+0xf54>
   12afc:	ldr	r2, [pc, #1132]	; 12f70 <__assert_fail@plt+0x1668>
   12b00:	b	1285c <__assert_fail@plt+0xf54>
   12b04:	ldr	r2, [pc, #1128]	; 12f74 <__assert_fail@plt+0x166c>
   12b08:	b	1285c <__assert_fail@plt+0xf54>
   12b0c:	ldr	r2, [pc, #1124]	; 12f78 <__assert_fail@plt+0x1670>
   12b10:	b	1285c <__assert_fail@plt+0xf54>
   12b14:	ldr	r2, [pc, #1120]	; 12f7c <__assert_fail@plt+0x1674>
   12b18:	b	1285c <__assert_fail@plt+0xf54>
   12b1c:	ldr	r2, [pc, #1116]	; 12f80 <__assert_fail@plt+0x1678>
   12b20:	b	1285c <__assert_fail@plt+0xf54>
   12b24:	ldr	r2, [pc, #1112]	; 12f84 <__assert_fail@plt+0x167c>
   12b28:	b	1285c <__assert_fail@plt+0xf54>
   12b2c:	ldr	r2, [pc, #1108]	; 12f88 <__assert_fail@plt+0x1680>
   12b30:	b	1285c <__assert_fail@plt+0xf54>
   12b34:	ldr	r2, [pc, #1104]	; 12f8c <__assert_fail@plt+0x1684>
   12b38:	b	1285c <__assert_fail@plt+0xf54>
   12b3c:	ldr	r2, [pc, #1100]	; 12f90 <__assert_fail@plt+0x1688>
   12b40:	b	1285c <__assert_fail@plt+0xf54>
   12b44:	ldr	r2, [pc, #1096]	; 12f94 <__assert_fail@plt+0x168c>
   12b48:	b	1285c <__assert_fail@plt+0xf54>
   12b4c:	ldr	r2, [pc, #1092]	; 12f98 <__assert_fail@plt+0x1690>
   12b50:	b	1285c <__assert_fail@plt+0xf54>
   12b54:	ldr	r2, [pc, #1088]	; 12f9c <__assert_fail@plt+0x1694>
   12b58:	b	1285c <__assert_fail@plt+0xf54>
   12b5c:	ldr	r2, [pc, #1084]	; 12fa0 <__assert_fail@plt+0x1698>
   12b60:	b	1285c <__assert_fail@plt+0xf54>
   12b64:	ldr	r2, [pc, #1080]	; 12fa4 <__assert_fail@plt+0x169c>
   12b68:	b	1285c <__assert_fail@plt+0xf54>
   12b6c:	ldr	r2, [pc, #1076]	; 12fa8 <__assert_fail@plt+0x16a0>
   12b70:	b	1285c <__assert_fail@plt+0xf54>
   12b74:	ldr	r2, [pc, #1072]	; 12fac <__assert_fail@plt+0x16a4>
   12b78:	b	1285c <__assert_fail@plt+0xf54>
   12b7c:	ldr	r2, [pc, #1068]	; 12fb0 <__assert_fail@plt+0x16a8>
   12b80:	b	1285c <__assert_fail@plt+0xf54>
   12b84:	ldr	r2, [pc, #820]	; 12ec0 <__assert_fail@plt+0x15b8>
   12b88:	b	1285c <__assert_fail@plt+0xf54>
   12b8c:	ldr	r2, [pc, #1056]	; 12fb4 <__assert_fail@plt+0x16ac>
   12b90:	b	1285c <__assert_fail@plt+0xf54>
   12b94:	ldr	r2, [pc, #1052]	; 12fb8 <__assert_fail@plt+0x16b0>
   12b98:	b	1285c <__assert_fail@plt+0xf54>
   12b9c:	ldr	r2, [pc, #1048]	; 12fbc <__assert_fail@plt+0x16b4>
   12ba0:	b	1285c <__assert_fail@plt+0xf54>
   12ba4:	ldr	r2, [pc, #1044]	; 12fc0 <__assert_fail@plt+0x16b8>
   12ba8:	b	1285c <__assert_fail@plt+0xf54>
   12bac:	ldr	r2, [pc, #1040]	; 12fc4 <__assert_fail@plt+0x16bc>
   12bb0:	b	1285c <__assert_fail@plt+0xf54>
   12bb4:	ldr	r2, [pc, #1036]	; 12fc8 <__assert_fail@plt+0x16c0>
   12bb8:	b	1285c <__assert_fail@plt+0xf54>
   12bbc:	ldr	r2, [pc, #1032]	; 12fcc <__assert_fail@plt+0x16c4>
   12bc0:	b	1285c <__assert_fail@plt+0xf54>
   12bc4:	ldr	r2, [pc, #1028]	; 12fd0 <__assert_fail@plt+0x16c8>
   12bc8:	b	1285c <__assert_fail@plt+0xf54>
   12bcc:	ldr	r2, [pc, #1024]	; 12fd4 <__assert_fail@plt+0x16cc>
   12bd0:	b	1285c <__assert_fail@plt+0xf54>
   12bd4:	ldr	r2, [pc, #1020]	; 12fd8 <__assert_fail@plt+0x16d0>
   12bd8:	b	1285c <__assert_fail@plt+0xf54>
   12bdc:	ldr	r2, [pc, #1016]	; 12fdc <__assert_fail@plt+0x16d4>
   12be0:	b	1285c <__assert_fail@plt+0xf54>
   12be4:	ldr	r2, [pc, #724]	; 12ec0 <__assert_fail@plt+0x15b8>
   12be8:	b	1285c <__assert_fail@plt+0xf54>
   12bec:	ldr	r2, [pc, #840]	; 12f3c <__assert_fail@plt+0x1634>
   12bf0:	b	1285c <__assert_fail@plt+0xf54>
   12bf4:	ldr	r2, [pc, #996]	; 12fe0 <__assert_fail@plt+0x16d8>
   12bf8:	b	1285c <__assert_fail@plt+0xf54>
   12bfc:	ldr	r2, [pc, #992]	; 12fe4 <__assert_fail@plt+0x16dc>
   12c00:	b	1285c <__assert_fail@plt+0xf54>
   12c04:	ldr	r2, [pc, #988]	; 12fe8 <__assert_fail@plt+0x16e0>
   12c08:	b	1285c <__assert_fail@plt+0xf54>
   12c0c:	ldr	r2, [pc, #984]	; 12fec <__assert_fail@plt+0x16e4>
   12c10:	b	1285c <__assert_fail@plt+0xf54>
   12c14:	ldr	r2, [pc, #980]	; 12ff0 <__assert_fail@plt+0x16e8>
   12c18:	b	1285c <__assert_fail@plt+0xf54>
   12c1c:	ldr	r2, [pc, #976]	; 12ff4 <__assert_fail@plt+0x16ec>
   12c20:	b	1285c <__assert_fail@plt+0xf54>
   12c24:	ldr	r2, [pc, #972]	; 12ff8 <__assert_fail@plt+0x16f0>
   12c28:	b	1285c <__assert_fail@plt+0xf54>
   12c2c:	ldr	r2, [pc, #968]	; 12ffc <__assert_fail@plt+0x16f4>
   12c30:	b	1285c <__assert_fail@plt+0xf54>
   12c34:	ldr	r2, [pc, #964]	; 13000 <__assert_fail@plt+0x16f8>
   12c38:	b	1285c <__assert_fail@plt+0xf54>
   12c3c:	ldr	r2, [pc, #960]	; 13004 <__assert_fail@plt+0x16fc>
   12c40:	b	1285c <__assert_fail@plt+0xf54>
   12c44:	ldr	r2, [pc, #956]	; 13008 <__assert_fail@plt+0x1700>
   12c48:	b	1285c <__assert_fail@plt+0xf54>
   12c4c:	ldr	r2, [pc, #952]	; 1300c <__assert_fail@plt+0x1704>
   12c50:	b	1285c <__assert_fail@plt+0xf54>
   12c54:	ldr	r2, [pc, #948]	; 13010 <__assert_fail@plt+0x1708>
   12c58:	b	1285c <__assert_fail@plt+0xf54>
   12c5c:	ldr	r2, [pc, #944]	; 13014 <__assert_fail@plt+0x170c>
   12c60:	b	1285c <__assert_fail@plt+0xf54>
   12c64:	ldr	r2, [pc, #940]	; 13018 <__assert_fail@plt+0x1710>
   12c68:	b	1285c <__assert_fail@plt+0xf54>
   12c6c:	ldr	r2, [pc, #936]	; 1301c <__assert_fail@plt+0x1714>
   12c70:	b	1285c <__assert_fail@plt+0xf54>
   12c74:	ldr	r2, [pc, #932]	; 13020 <__assert_fail@plt+0x1718>
   12c78:	b	1285c <__assert_fail@plt+0xf54>
   12c7c:	ldr	r2, [pc, #928]	; 13024 <__assert_fail@plt+0x171c>
   12c80:	b	1285c <__assert_fail@plt+0xf54>
   12c84:	ldr	r2, [pc, #924]	; 13028 <__assert_fail@plt+0x1720>
   12c88:	b	1285c <__assert_fail@plt+0xf54>
   12c8c:	ldr	r2, [pc, #920]	; 1302c <__assert_fail@plt+0x1724>
   12c90:	b	1285c <__assert_fail@plt+0xf54>
   12c94:	ldr	r2, [pc, #916]	; 13030 <__assert_fail@plt+0x1728>
   12c98:	b	1285c <__assert_fail@plt+0xf54>
   12c9c:	ldr	r2, [pc, #912]	; 13034 <__assert_fail@plt+0x172c>
   12ca0:	b	1285c <__assert_fail@plt+0xf54>
   12ca4:	ldr	r2, [pc, #908]	; 13038 <__assert_fail@plt+0x1730>
   12ca8:	b	1285c <__assert_fail@plt+0xf54>
   12cac:	ldr	r2, [pc, #904]	; 1303c <__assert_fail@plt+0x1734>
   12cb0:	b	1285c <__assert_fail@plt+0xf54>
   12cb4:	ldr	r2, [pc, #900]	; 13040 <__assert_fail@plt+0x1738>
   12cb8:	b	1285c <__assert_fail@plt+0xf54>
   12cbc:	ldr	r2, [pc, #896]	; 13044 <__assert_fail@plt+0x173c>
   12cc0:	b	1285c <__assert_fail@plt+0xf54>
   12cc4:	ldr	r2, [pc, #892]	; 13048 <__assert_fail@plt+0x1740>
   12cc8:	b	1285c <__assert_fail@plt+0xf54>
   12ccc:	ldr	r2, [pc, #888]	; 1304c <__assert_fail@plt+0x1744>
   12cd0:	b	1285c <__assert_fail@plt+0xf54>
   12cd4:	ldr	r2, [pc, #884]	; 13050 <__assert_fail@plt+0x1748>
   12cd8:	b	1285c <__assert_fail@plt+0xf54>
   12cdc:	ldr	r2, [pc, #880]	; 13054 <__assert_fail@plt+0x174c>
   12ce0:	b	1285c <__assert_fail@plt+0xf54>
   12ce4:	ldr	r2, [pc, #876]	; 13058 <__assert_fail@plt+0x1750>
   12ce8:	b	1285c <__assert_fail@plt+0xf54>
   12cec:	ldr	r2, [pc, #872]	; 1305c <__assert_fail@plt+0x1754>
   12cf0:	b	1285c <__assert_fail@plt+0xf54>
   12cf4:	ldr	r2, [pc, #868]	; 13060 <__assert_fail@plt+0x1758>
   12cf8:	b	1285c <__assert_fail@plt+0xf54>
   12cfc:	ldr	r2, [pc, #864]	; 13064 <__assert_fail@plt+0x175c>
   12d00:	b	1285c <__assert_fail@plt+0xf54>
   12d04:	ldr	r2, [pc, #860]	; 13068 <__assert_fail@plt+0x1760>
   12d08:	b	1285c <__assert_fail@plt+0xf54>
   12d0c:	ldr	r2, [pc, #856]	; 1306c <__assert_fail@plt+0x1764>
   12d10:	b	1285c <__assert_fail@plt+0xf54>
   12d14:	ldr	r2, [pc, #852]	; 13070 <__assert_fail@plt+0x1768>
   12d18:	b	1285c <__assert_fail@plt+0xf54>
   12d1c:	ldr	r2, [pc, #848]	; 13074 <__assert_fail@plt+0x176c>
   12d20:	b	1285c <__assert_fail@plt+0xf54>
   12d24:	ldr	r2, [pc, #844]	; 13078 <__assert_fail@plt+0x1770>
   12d28:	b	1285c <__assert_fail@plt+0xf54>
   12d2c:	ldr	r2, [pc, #840]	; 1307c <__assert_fail@plt+0x1774>
   12d30:	b	1285c <__assert_fail@plt+0xf54>
   12d34:	ldr	r2, [pc, #836]	; 13080 <__assert_fail@plt+0x1778>
   12d38:	b	1285c <__assert_fail@plt+0xf54>
   12d3c:	ldr	r2, [pc, #832]	; 13084 <__assert_fail@plt+0x177c>
   12d40:	b	1285c <__assert_fail@plt+0xf54>
   12d44:	ldr	r2, [pc, #828]	; 13088 <__assert_fail@plt+0x1780>
   12d48:	b	1285c <__assert_fail@plt+0xf54>
   12d4c:	ldr	r2, [pc, #824]	; 1308c <__assert_fail@plt+0x1784>
   12d50:	b	1285c <__assert_fail@plt+0xf54>
   12d54:	ldr	r2, [pc, #820]	; 13090 <__assert_fail@plt+0x1788>
   12d58:	b	1285c <__assert_fail@plt+0xf54>
   12d5c:	ldr	r2, [pc, #816]	; 13094 <__assert_fail@plt+0x178c>
   12d60:	b	1285c <__assert_fail@plt+0xf54>
   12d64:	ldr	r2, [pc, #812]	; 13098 <__assert_fail@plt+0x1790>
   12d68:	b	1285c <__assert_fail@plt+0xf54>
   12d6c:	ldr	r2, [pc, #808]	; 1309c <__assert_fail@plt+0x1794>
   12d70:	b	1285c <__assert_fail@plt+0xf54>
   12d74:	ldr	r2, [pc, #804]	; 130a0 <__assert_fail@plt+0x1798>
   12d78:	b	1285c <__assert_fail@plt+0xf54>
   12d7c:	ldr	r2, [pc, #800]	; 130a4 <__assert_fail@plt+0x179c>
   12d80:	b	1285c <__assert_fail@plt+0xf54>
   12d84:	ldr	r2, [pc, #796]	; 130a8 <__assert_fail@plt+0x17a0>
   12d88:	b	1285c <__assert_fail@plt+0xf54>
   12d8c:	ldr	r2, [pc, #792]	; 130ac <__assert_fail@plt+0x17a4>
   12d90:	b	1285c <__assert_fail@plt+0xf54>
   12d94:	msreq	SP_hyp, r5
   12d98:	movtpl	r5, #25678	; 0x644e
   12d9c:	strbtvs	r6, [r4], #-376	; 0xfffffe88
   12da0:	cmnvc	r3, #120586240	; 0x7300000
   12da4:	strbtvc	r6, [r1], #-879	; 0xfffffc91
   12da8:	andeq	sp, r1, r0, ror r8
   12dac:	andeq	r0, r3, r0, lsl #4
   12db0:	strdeq	r0, [r3], -r4
   12db4:	stmdbvc	ip, {r4, r5, r9, sl, ip, sp, lr}^
   12db8:	andeq	sp, r1, r8, lsl #16
   12dbc:	ldmdavs	r9, {r1, r5, r8, ip}
   12dc0:	andeq	sp, r1, r4, ror #11
   12dc4:	cdpvs	3, 6, cr7, cr6, cr4, {3}
   12dc8:	andeq	sp, r1, r4, lsl #13
   12dcc:	andeq	r4, r0, r6
   12dd0:	andeq	r9, r0, r2, lsr #31
   12dd4:	subeq	r4, r1, r3, asr sl
   12dd8:			; <UNDEFINED> instruction: 0x01021997
   12ddc:	sbceq	r6, r3, r0, lsl #8
   12de0:			; <UNDEFINED> instruction: 0x01021994
   12de4:	sbceq	pc, r0, lr, ror #31
   12de8:	andeq	sp, r1, ip, lsl r6
   12dec:			; <UNDEFINED> instruction: 0x012fd16d
   12df0:	tsteq	r6, r0, ror r9
   12df4:	strdeq	sp, [r1], -r4
   12df8:	andeq	lr, r0, r3, asr pc
   12dfc:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   12e00:	andeq	lr, r0, r1, asr pc
   12e04:	strdeq	sl, [r0], -r5
   12e08:	muleq	r1, r4, r4
   12e0c:	andeq	r1, r1, r4, asr r9
   12e10:	eoreq	lr, r7, fp, ror #1
   12e14:	andeq	pc, r0, pc, asr r1	; <UNPREDICTABLE>
   12e18:	andeq	sp, r1, r8, lsl #11
   12e1c:	cdp2	13, 5, cr4, cr3, cr2, {2}
   12e20:	andeq	r1, r0, pc, ror r3
   12e24:	andeq	r2, r0, r8, ror r4
   12e28:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   12e2c:	andeq	r2, r0, r8, ror #8
   12e30:	andeq	r1, r0, pc, lsl #7
   12e34:	andeq	sp, r1, ip, lsr #13
   12e38:	andeq	r4, r0, r4
   12e3c:	andeq	sp, r1, ip, lsl #14
   12e40:	blt	ff2fe138 <optarg@@GLIBC_2.4+0xff2cdf40>
   12e44:	logle<illegal precision>z	f0, f4
   12e48:	cdplt	14, 14, cr13, cr15, cr13, {5}
   12e4c:	andeq	sp, r1, ip, asr #15
   12e50:			; <UNDEFINED> instruction: 0xf97cff8c
   12e54:	andeq	sp, r1, r8, asr #11
   12e58:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   12e5c:	ldrmi	ip, [sp, #-3368]!	; 0xfffff2d8
   12e60:	rsbpl	r4, r5, #1884160	; 0x1cc000
   12e64:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   12e68:	andeq	sp, r1, r0, lsr #11
   12e6c:	movtpl	r4, #24911	; 0x614f
   12e70:	muleq	r1, ip, r6
   12e74:	bleq	ff415dbc <optarg@@GLIBC_2.4+0xff3e5bc4>
   12e78:	stmibne	r0, {r1, r9}
   12e7c:	cmnne	r6, #-1744830463	; 0x98000001
   12e80:	andeq	sp, r1, r8, lsr r6
   12e84:	blne	feb919c4 <optarg@@GLIBC_2.4+0xfeb617cc>
   12e88:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   12e8c:	stmibne	r3, {r1, r2, r5, r8, r9}
   12e90:	ldrdeq	sp, [r1], -r4
   12e94:	rsbvs	r6, r5, #112, 10	; 0x1c000000
   12e98:	andeq	sp, r1, ip, asr r7
   12e9c:	cmnvs	r7, #112, 4
   12ea0:	rsbvs	r6, r5, #478150656	; 0x1c800000
   12ea4:	andeq	sp, r1, r8, ror #15
   12ea8:	andeq	r5, r0, ip, asr #12
   12eac:			; <UNDEFINED> instruction: 0x000072b6
   12eb0:	andeq	r6, r0, r9, ror #18
   12eb4:	andeq	r7, r0, r5, ror r2
   12eb8:	andeq	sp, r1, r8, lsr #11
   12ebc:	andeq	r9, r0, r0, lsr #31
   12ec0:	andeq	sp, r1, r4, asr r6
   12ec4:	andeq	r4, r0, r8, asr r8
   12ec8:	andeq	r4, r0, sl, asr sp
   12ecc:	andeq	r5, r0, fp, ror r1
   12ed0:	andeq	r4, r0, r4, asr #26
   12ed4:	strdeq	sp, [r1], -r0
   12ed8:	andeq	r0, r0, r7, lsl #3
   12edc:	andeq	r1, r0, r3, ror r3
   12ee0:	andeq	sp, r1, r0, ror r6
   12ee4:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   12ee8:	bpl	f2d6b0 <optarg@@GLIBC_2.4+0xefd4b8>
   12eec:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   12ef0:	andeq	sp, r1, r4, ror #12
   12ef4:	strls	r5, [r4, #2294]	; 0x8f6
   12ef8:	bge	ff5fdaa8 <optarg@@GLIBC_2.4+0xff5cd8b0>
   12efc:	strge	pc, [r1, #-3317]	; 0xfffff30b
   12f00:	andeq	sp, r1, r0, asr #16
   12f04:	teqeq	r1, r8, lsr #3
   12f08:	stmdbeq	r4, {r2, r4, r5, r8, fp, ip}
   12f0c:	strbeq	r5, [r5, -r1, lsr #16]!
   12f10:	andeq	sp, r1, r0, lsl #15
   12f14:	cmpcc	r3, sl, asr #12
   12f18:	submi	r4, r9, #1232	; 0x4d0
   12f1c:	ldrdeq	sp, [r1], -r8
   12f20:	svccs	0x00c12fc1
   12f24:	andeq	sp, r1, r0, lsr #16
   12f28:	msreq	SP_hyp, r6
   12f2c:	andeq	sp, r1, r4, asr #10
   12f30:			; <UNDEFINED> instruction: 0x9123683e
   12f34:	andeq	sp, r1, r0, lsl #10
   12f38:	ldrpl	r0, [r9], #-256	; 0xffffff00
   12f3c:	andeq	sp, r1, ip, lsl r8
   12f40:			; <UNDEFINED> instruction: 0xff534d42
   12f44:	andeq	sp, r1, r8, ror #14
   12f48:	andeq	r4, r0, r4, asr #4
   12f4c:	andeq	r4, r0, fp, lsr #16
   12f50:	andeq	sp, r1, ip, lsl #12
   12f54:	andeq	sp, r1, ip, asr #14
   12f58:	andeq	sp, r1, r8, lsl #12
   12f5c:	andeq	sp, r1, r4, lsr r5
   12f60:	ldrdeq	sp, [r1], -r4
   12f64:	andeq	sp, r1, r8, ror r7
   12f68:	strdeq	sp, [r1], -r0
   12f6c:	andeq	sp, r1, r8, asr #12
   12f70:			; <UNDEFINED> instruction: 0x0001d7b8
   12f74:	andeq	sp, r1, ip, ror #11
   12f78:	andeq	sp, r1, r8, asr r8
   12f7c:	andeq	sp, r1, ip, asr r6
   12f80:			; <UNDEFINED> instruction: 0x0001d5b0
   12f84:	andeq	sp, r1, r0, asr #15
   12f88:	muleq	r1, r0, r7
   12f8c:	andeq	sp, r1, r4, lsr #14
   12f90:	andeq	sp, r1, r0, ror #9
   12f94:	andeq	sp, r1, r0, ror r5
   12f98:	andeq	sp, r1, r8, lsl r8
   12f9c:	andeq	sp, r1, r0, lsl r8
   12fa0:	muleq	r1, ip, r7
   12fa4:	andeq	sp, r1, r0, asr r8
   12fa8:	andeq	sp, r1, ip, ror #9
   12fac:	andeq	sp, r1, r4, lsr #12
   12fb0:	andeq	sp, r1, r0, asr #13
   12fb4:	andeq	sp, r1, r0, asr #11
   12fb8:	andeq	sp, r1, ip, lsl r5
   12fbc:	andeq	sp, r1, r0, lsl #16
   12fc0:	andeq	sp, r1, r0, ror #16
   12fc4:	muleq	r1, r8, r7
   12fc8:	andeq	sp, r1, r4, lsl r7
   12fcc:	ldrdeq	sp, [r1], -ip
   12fd0:	andeq	sp, r1, ip, lsr r5
   12fd4:	muleq	r1, r0, r4
   12fd8:	andeq	sp, r1, r4, lsl r5
   12fdc:	andeq	sp, r1, r4, lsl #14
   12fe0:	andeq	sp, r1, r0, lsl #11
   12fe4:	muleq	r1, ip, r4
   12fe8:	andeq	sp, r1, r4, lsr #9
   12fec:	andeq	sp, r1, ip, lsl #13
   12ff0:			; <UNDEFINED> instruction: 0x0001d7b0
   12ff4:	ldrdeq	sp, [r1], -ip
   12ff8:	andeq	sp, r1, r8, lsl #10
   12ffc:	andeq	sp, r1, r8, lsr r7
   13000:	strdeq	sp, [r1], -r4
   13004:	strdeq	sp, [r1], -r0
   13008:	andeq	sp, r1, r8, ror r5
   1300c:	andeq	sp, r1, r8, lsr #9
   13010:	andeq	sp, r1, r4, asr #14
   13014:	andeq	sp, r1, r8, ror #9
   13018:	andeq	sp, r1, r0, lsl #12
   1301c:	andeq	sp, r1, r8, lsr #10
   13020:	andeq	sp, r1, r8, asr #9
   13024:	andeq	sp, r1, r4, asr r7
   13028:			; <UNDEFINED> instruction: 0x0001d4b8
   1302c:	andeq	sp, r1, r0, ror #13
   13030:	andeq	sp, r1, r0, lsl #14
   13034:	andeq	sp, r1, r4, lsl r6
   13038:	andeq	sp, r1, r0, asr #12
   1303c:	andeq	sp, r1, r0, asr #9
   13040:	andeq	sp, r1, ip, lsr #12
   13044:	andeq	sp, r1, r8, asr #16
   13048:	andeq	sp, r1, r0, lsl #13
   1304c:	muleq	r1, r4, r5
   13050:	andeq	sp, r1, r0, lsr r7
   13054:	andeq	sp, r1, r8, ror #13
   13058:	andeq	sp, r1, r8, asr #10
   1305c:	andeq	sp, r1, r8, ror r6
   13060:	andeq	sp, r1, r0, lsr r8
   13064:	andeq	sp, r1, r0, ror r7
   13068:	andeq	sp, r1, ip, asr #13
   1306c:			; <UNDEFINED> instruction: 0x0001d5b4
   13070:	andeq	sp, r1, r4, lsl #15
   13074:	andeq	sp, r1, ip, asr r5
   13078:	andeq	sp, r1, r8, lsr r8
   1307c:	andeq	sp, r1, r4, lsr #13
   13080:	andeq	sp, r1, r8, ror #16
   13084:	strdeq	sp, [r1], -r8
   13088:	muleq	r1, r4, r6
   1308c:	andeq	sp, r1, ip, lsl #16
   13090:	andeq	sp, r1, r4, lsr #15
   13094:	andeq	sp, r1, r4, asr r5
   13098:	andeq	sp, r1, r4, asr #15
   1309c:	andeq	sp, r1, r8, ror #10
   130a0:	andeq	sp, r1, r4, lsr #16
   130a4:	andeq	sp, r1, ip, lsl r7
   130a8:	ldrdeq	sp, [r1], -r0
   130ac:	strdeq	sp, [r1], -r8
   130b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130b4:	sub	sp, sp, #36	; 0x24
   130b8:	mov	r4, r0
   130bc:	strd	r2, [sp, #20]
   130c0:	str	r1, [sp, #16]
   130c4:	bl	11728 <strlen@plt>
   130c8:	add	r0, r0, #4
   130cc:	bl	194e0 <__assert_fail@plt+0x7bd8>
   130d0:	ldrb	r3, [r4]
   130d4:	cmp	r3, #0
   130d8:	mov	r8, r0
   130dc:	beq	13650 <__assert_fail@plt+0x1d48>
   130e0:	ldr	r2, [pc, #1456]	; 13698 <__assert_fail@plt+0x1d90>
   130e4:	ldr	r7, [pc, #1456]	; 1369c <__assert_fail@plt+0x1d94>
   130e8:	add	r9, r2, #8
   130ec:	mov	r2, #0
   130f0:	str	r2, [sp, #12]
   130f4:	b	1312c <__assert_fail@plt+0x1824>
   130f8:	ldr	r0, [r7]
   130fc:	ldr	r2, [r0, #20]
   13100:	ldr	r1, [r0, #24]
   13104:	cmp	r2, r1
   13108:	bcs	132f8 <__assert_fail@plt+0x19f0>
   1310c:	mov	r5, r4
   13110:	mov	r4, r6
   13114:	add	r1, r2, #1
   13118:	str	r1, [r0, #20]
   1311c:	strb	r3, [r2]
   13120:	ldrb	r3, [r5, #1]
   13124:	cmp	r3, #0
   13128:	beq	13184 <__assert_fail@plt+0x187c>
   1312c:	cmp	r3, #37	; 0x25
   13130:	add	r6, r4, #1
   13134:	beq	131ac <__assert_fail@plt+0x18a4>
   13138:	cmp	r3, #92	; 0x5c
   1313c:	bne	130f8 <__assert_fail@plt+0x17f0>
   13140:	ldr	r2, [pc, #1368]	; 136a0 <__assert_fail@plt+0x1d98>
   13144:	ldrb	r2, [r2, #21]
   13148:	cmp	r2, #0
   1314c:	bne	13298 <__assert_fail@plt+0x1990>
   13150:	ldr	r0, [r7]
   13154:	ldr	r2, [r0, #20]
   13158:	ldr	r1, [r0, #24]
   1315c:	cmp	r2, r1
   13160:	bcs	132f8 <__assert_fail@plt+0x19f0>
   13164:	mov	r5, r4
   13168:	add	r1, r2, #1
   1316c:	str	r1, [r0, #20]
   13170:	strb	r3, [r2]
   13174:	ldrb	r3, [r5, #1]
   13178:	mov	r4, r6
   1317c:	cmp	r3, #0
   13180:	bne	1312c <__assert_fail@plt+0x1824>
   13184:	mov	r0, r8
   13188:	bl	11548 <free@plt>
   1318c:	ldr	r2, [pc, #1288]	; 1369c <__assert_fail@plt+0x1d94>
   13190:	ldr	r3, [pc, #1292]	; 136a4 <__assert_fail@plt+0x1d9c>
   13194:	ldr	r1, [r2]
   13198:	ldr	r0, [r3]
   1319c:	bl	114c4 <fputs_unlocked@plt>
   131a0:	ldr	r0, [sp, #12]
   131a4:	add	sp, sp, #36	; 0x24
   131a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131ac:	ldr	r1, [pc, #1252]	; 13698 <__assert_fail@plt+0x1d90>
   131b0:	mov	r0, r6
   131b4:	bl	118fc <strspn@plt>
   131b8:	mov	r1, r9
   131bc:	add	r0, r0, #1
   131c0:	add	fp, r4, r0
   131c4:	mov	r0, fp
   131c8:	bl	118fc <strspn@plt>
   131cc:	add	r5, fp, r0
   131d0:	ldrb	fp, [fp, r0]
   131d4:	cmp	fp, #46	; 0x2e
   131d8:	bne	131f0 <__assert_fail@plt+0x18e8>
   131dc:	add	r0, r5, #1
   131e0:	mov	r1, r9
   131e4:	bl	118fc <strspn@plt>
   131e8:	add	r0, r0, #1
   131ec:	ldrb	fp, [r5, r0]!
   131f0:	sub	r6, r5, r6
   131f4:	add	sl, r6, #1
   131f8:	mov	r1, r4
   131fc:	mov	r2, sl
   13200:	mov	r0, r8
   13204:	bl	11560 <memcpy@plt>
   13208:	cmp	fp, #0
   1320c:	beq	13258 <__assert_fail@plt+0x1950>
   13210:	cmp	fp, #37	; 0x25
   13214:	beq	1325c <__assert_fail@plt+0x1954>
   13218:	ldr	r3, [sp, #72]	; 0x48
   1321c:	mov	r2, fp
   13220:	str	r3, [sp, #4]
   13224:	ldr	r3, [sp, #20]
   13228:	mov	r1, sl
   1322c:	str	r3, [sp]
   13230:	mov	r0, r8
   13234:	ldr	r3, [sp, #16]
   13238:	ldr	ip, [sp, #24]
   1323c:	blx	ip
   13240:	ldr	r3, [sp, #12]
   13244:	add	r4, r5, #1
   13248:	orr	r0, r0, r3
   1324c:	uxtb	r3, r0
   13250:	str	r3, [sp, #12]
   13254:	b	13120 <__assert_fail@plt+0x1818>
   13258:	sub	r5, r5, #1
   1325c:	cmp	r6, #0
   13260:	bne	13658 <__assert_fail@plt+0x1d50>
   13264:	ldr	r0, [r7]
   13268:	add	r4, r5, #1
   1326c:	ldr	r3, [r0, #20]
   13270:	ldr	r2, [r0, #24]
   13274:	cmp	r3, r2
   13278:	addcc	r1, r3, #1
   1327c:	movcc	r2, #37	; 0x25
   13280:	strcc	r1, [r0, #20]
   13284:	strbcc	r2, [r3]
   13288:	bcc	13120 <__assert_fail@plt+0x1818>
   1328c:	mov	r1, #37	; 0x25
   13290:	bl	117f4 <__overflow@plt>
   13294:	b	13120 <__assert_fail@plt+0x1818>
   13298:	ldrb	fp, [r4, #1]
   1329c:	sub	r1, fp, #48	; 0x30
   132a0:	uxtb	r2, r1
   132a4:	cmp	r2, #7
   132a8:	bls	134f0 <__assert_fail@plt+0x1be8>
   132ac:	cmp	fp, #120	; 0x78
   132b0:	beq	13474 <__assert_fail@plt+0x1b6c>
   132b4:	cmp	fp, #0
   132b8:	str	r3, [sp, #28]
   132bc:	bne	1330c <__assert_fail@plt+0x1a04>
   132c0:	mov	r2, #5
   132c4:	ldr	r1, [pc, #988]	; 136a8 <__assert_fail@plt+0x1da0>
   132c8:	mov	r0, fp
   132cc:	bl	11584 <dcgettext@plt>
   132d0:	mov	r1, fp
   132d4:	mov	r2, r0
   132d8:	mov	r0, fp
   132dc:	bl	1165c <error@plt>
   132e0:	ldr	r0, [r7]
   132e4:	ldr	r3, [sp, #28]
   132e8:	ldr	r2, [r0, #20]
   132ec:	ldr	r1, [r0, #24]
   132f0:	cmp	r2, r1
   132f4:	bcc	13164 <__assert_fail@plt+0x185c>
   132f8:	mov	r1, r3
   132fc:	mov	r5, r4
   13300:	bl	117f4 <__overflow@plt>
   13304:	mov	r4, r6
   13308:	b	13120 <__assert_fail@plt+0x1818>
   1330c:	sub	r3, fp, #34	; 0x22
   13310:	mov	r5, fp
   13314:	cmp	r3, #84	; 0x54
   13318:	ldrls	pc, [pc, r3, lsl #2]
   1331c:	b	13494 <__assert_fail@plt+0x1b8c>
   13320:			; <UNDEFINED> instruction: 0x000134b8
   13324:	muleq	r1, r4, r4
   13328:	muleq	r1, r4, r4
   1332c:	muleq	r1, r4, r4
   13330:	muleq	r1, r4, r4
   13334:	muleq	r1, r4, r4
   13338:	muleq	r1, r4, r4
   1333c:	muleq	r1, r4, r4
   13340:	muleq	r1, r4, r4
   13344:	muleq	r1, r4, r4
   13348:	muleq	r1, r4, r4
   1334c:	muleq	r1, r4, r4
   13350:	muleq	r1, r4, r4
   13354:	muleq	r1, r4, r4
   13358:	muleq	r1, r4, r4
   1335c:	muleq	r1, r4, r4
   13360:	muleq	r1, r4, r4
   13364:	muleq	r1, r4, r4
   13368:	muleq	r1, r4, r4
   1336c:	muleq	r1, r4, r4
   13370:	muleq	r1, r4, r4
   13374:	muleq	r1, r4, r4
   13378:	muleq	r1, r4, r4
   1337c:	muleq	r1, r4, r4
   13380:	muleq	r1, r4, r4
   13384:	muleq	r1, r4, r4
   13388:	muleq	r1, r4, r4
   1338c:	muleq	r1, r4, r4
   13390:	muleq	r1, r4, r4
   13394:	muleq	r1, r4, r4
   13398:	muleq	r1, r4, r4
   1339c:	muleq	r1, r4, r4
   133a0:	muleq	r1, r4, r4
   133a4:	muleq	r1, r4, r4
   133a8:	muleq	r1, r4, r4
   133ac:	muleq	r1, r4, r4
   133b0:	muleq	r1, r4, r4
   133b4:	muleq	r1, r4, r4
   133b8:	muleq	r1, r4, r4
   133bc:	muleq	r1, r4, r4
   133c0:	muleq	r1, r4, r4
   133c4:	muleq	r1, r4, r4
   133c8:	muleq	r1, r4, r4
   133cc:	muleq	r1, r4, r4
   133d0:	muleq	r1, r4, r4
   133d4:	muleq	r1, r4, r4
   133d8:	muleq	r1, r4, r4
   133dc:	muleq	r1, r4, r4
   133e0:	muleq	r1, r4, r4
   133e4:	muleq	r1, r4, r4
   133e8:	muleq	r1, r4, r4
   133ec:	muleq	r1, r4, r4
   133f0:	muleq	r1, r4, r4
   133f4:	muleq	r1, r4, r4
   133f8:	muleq	r1, r4, r4
   133fc:	muleq	r1, r4, r4
   13400:	muleq	r1, r4, r4
   13404:	muleq	r1, r4, r4
   13408:			; <UNDEFINED> instruction: 0x000134b8
   1340c:	muleq	r1, r4, r4
   13410:	muleq	r1, r4, r4
   13414:	muleq	r1, r4, r4
   13418:	muleq	r1, r4, r4
   1341c:	strdeq	r3, [r1], -r0
   13420:	andeq	r3, r1, r4, ror #11
   13424:	muleq	r1, r4, r4
   13428:	muleq	r1, r4, r4
   1342c:	strdeq	r3, [r1], -ip
   13430:	andeq	r3, r1, r8, lsl #12
   13434:	muleq	r1, r4, r4
   13438:	muleq	r1, r4, r4
   1343c:	muleq	r1, r4, r4
   13440:	muleq	r1, r4, r4
   13444:	muleq	r1, r4, r4
   13448:	muleq	r1, r4, r4
   1344c:	muleq	r1, r4, r4
   13450:	andeq	r3, r1, r4, lsl r6
   13454:	muleq	r1, r4, r4
   13458:	muleq	r1, r4, r4
   1345c:	muleq	r1, r4, r4
   13460:	andeq	r3, r1, r0, lsr #12
   13464:	muleq	r1, r4, r4
   13468:	andeq	r3, r1, ip, lsr #12
   1346c:	muleq	r1, r4, r4
   13470:	andeq	r3, r1, r8, lsr r6
   13474:	bl	116f8 <__ctype_b_loc@plt>
   13478:	ldrb	r1, [r4, #2]
   1347c:	lsl	r2, r1, #1
   13480:	ldr	r3, [r0]
   13484:	ldrh	r2, [r3, r2]
   13488:	tst	r2, #4096	; 0x1000
   1348c:	bne	13550 <__assert_fail@plt+0x1c48>
   13490:	mov	r5, fp
   13494:	mov	r2, #5
   13498:	ldr	r1, [pc, #524]	; 136ac <__assert_fail@plt+0x1da4>
   1349c:	mov	r0, #0
   134a0:	bl	11584 <dcgettext@plt>
   134a4:	mov	r1, #0
   134a8:	mov	r3, fp
   134ac:	mov	r2, r0
   134b0:	mov	r0, r1
   134b4:	bl	1165c <error@plt>
   134b8:	ldr	r0, [r7]
   134bc:	add	r4, r4, #2
   134c0:	ldr	r3, [r0, #20]
   134c4:	ldr	r2, [r0, #24]
   134c8:	cmp	r3, r2
   134cc:	addcc	r2, r3, #1
   134d0:	strcc	r2, [r0, #20]
   134d4:	movcc	r5, r6
   134d8:	strbcc	fp, [r3]
   134dc:	bcc	13120 <__assert_fail@plt+0x1818>
   134e0:	mov	r1, r5
   134e4:	bl	117f4 <__overflow@plt>
   134e8:	mov	r5, r6
   134ec:	b	13120 <__assert_fail@plt+0x1818>
   134f0:	ldrb	r3, [r4, #2]
   134f4:	sub	r3, r3, #48	; 0x30
   134f8:	uxtb	r2, r3
   134fc:	cmp	r2, #7
   13500:	addhi	r4, r4, #2
   13504:	bhi	13528 <__assert_fail@plt+0x1c20>
   13508:	ldrb	r2, [r4, #3]
   1350c:	add	r1, r3, r1, lsl #3
   13510:	sub	r3, r2, #48	; 0x30
   13514:	uxtb	r2, r3
   13518:	cmp	r2, #7
   1351c:	addhi	r4, r4, #3
   13520:	addls	r1, r3, r1, lsl #3
   13524:	addls	r4, r4, #4
   13528:	ldr	r0, [r7]
   1352c:	ldr	r3, [r0, #20]
   13530:	ldr	r2, [r0, #24]
   13534:	cmp	r3, r2
   13538:	addcc	r2, r3, #1
   1353c:	strcc	r2, [r0, #20]
   13540:	strbcc	r1, [r3]
   13544:	bcs	13644 <__assert_fail@plt+0x1d3c>
   13548:	sub	r5, r4, #1
   1354c:	b	13120 <__assert_fail@plt+0x1818>
   13550:	sub	r2, r1, #97	; 0x61
   13554:	cmp	r2, #5
   13558:	subls	r1, r1, #87	; 0x57
   1355c:	bls	13570 <__assert_fail@plt+0x1c68>
   13560:	sub	r2, r1, #65	; 0x41
   13564:	cmp	r2, #5
   13568:	subls	r1, r1, #55	; 0x37
   1356c:	subhi	r1, r1, #48	; 0x30
   13570:	ldrb	r2, [r4, #3]
   13574:	lsl	r0, r2, #1
   13578:	ldrh	r3, [r3, r0]
   1357c:	tst	r3, #4096	; 0x1000
   13580:	addeq	r5, r4, #2
   13584:	beq	135b4 <__assert_fail@plt+0x1cac>
   13588:	sub	r3, r2, #97	; 0x61
   1358c:	cmp	r3, #5
   13590:	add	r5, r4, #3
   13594:	lsl	r1, r1, #4
   13598:	subls	r2, r2, #87	; 0x57
   1359c:	bls	135b0 <__assert_fail@plt+0x1ca8>
   135a0:	sub	r3, r2, #65	; 0x41
   135a4:	cmp	r3, #5
   135a8:	subls	r2, r2, #55	; 0x37
   135ac:	subhi	r2, r2, #48	; 0x30
   135b0:	add	r1, r1, r2
   135b4:	ldr	r0, [r7]
   135b8:	add	r4, r5, #1
   135bc:	ldr	r3, [r0, #20]
   135c0:	ldr	r2, [r0, #24]
   135c4:	cmp	r3, r2
   135c8:	addcc	r2, r3, #1
   135cc:	strcc	r2, [r0, #20]
   135d0:	strbcc	r1, [r3]
   135d4:	bcc	13120 <__assert_fail@plt+0x1818>
   135d8:	uxtb	r1, r1
   135dc:	bl	117f4 <__overflow@plt>
   135e0:	b	13120 <__assert_fail@plt+0x1818>
   135e4:	mov	r5, #8
   135e8:	mov	fp, r5
   135ec:	b	134b8 <__assert_fail@plt+0x1bb0>
   135f0:	mov	r5, #7
   135f4:	mov	fp, r5
   135f8:	b	134b8 <__assert_fail@plt+0x1bb0>
   135fc:	mov	r5, #27
   13600:	mov	fp, r5
   13604:	b	134b8 <__assert_fail@plt+0x1bb0>
   13608:	mov	r5, #12
   1360c:	mov	fp, r5
   13610:	b	134b8 <__assert_fail@plt+0x1bb0>
   13614:	mov	r5, #10
   13618:	mov	fp, r5
   1361c:	b	134b8 <__assert_fail@plt+0x1bb0>
   13620:	mov	r5, #13
   13624:	mov	fp, r5
   13628:	b	134b8 <__assert_fail@plt+0x1bb0>
   1362c:	mov	r5, #9
   13630:	mov	fp, r5
   13634:	b	134b8 <__assert_fail@plt+0x1bb0>
   13638:	mov	r5, #11
   1363c:	mov	fp, r5
   13640:	b	134b8 <__assert_fail@plt+0x1bb0>
   13644:	uxtb	r1, r1
   13648:	bl	117f4 <__overflow@plt>
   1364c:	b	13548 <__assert_fail@plt+0x1c40>
   13650:	str	r3, [sp, #12]
   13654:	b	13184 <__assert_fail@plt+0x187c>
   13658:	add	r6, r8, r6
   1365c:	mov	r4, #0
   13660:	mov	r2, #5
   13664:	ldr	r1, [pc, #68]	; 136b0 <__assert_fail@plt+0x1da8>
   13668:	strb	fp, [r8, sl]
   1366c:	mov	r0, r4
   13670:	strb	r4, [r6, #2]
   13674:	bl	11584 <dcgettext@plt>
   13678:	mov	r5, r0
   1367c:	mov	r0, r8
   13680:	bl	18edc <__assert_fail@plt+0x75d4>
   13684:	mov	r2, r5
   13688:	mov	r1, r4
   1368c:	mov	r3, r0
   13690:	mov	r0, #1
   13694:	bl	1165c <error@plt>
   13698:	andeq	sp, r1, r8, lsl r3
   1369c:	strdeq	r0, [r3], -r4
   136a0:	andeq	r0, r3, r0, lsl #4
   136a4:	andeq	r0, r3, ip, lsl #3
   136a8:	muleq	r1, r8, r8
   136ac:			; <UNDEFINED> instruction: 0x0001d8bc
   136b0:	andeq	sp, r1, r0, lsl #17
   136b4:	push	{r4, r5, r6, lr}
   136b8:	sub	sp, sp, #88	; 0x58
   136bc:	ldr	r6, [pc, #188]	; 13780 <__assert_fail@plt+0x1e78>
   136c0:	ldr	r5, [pc, #188]	; 13784 <__assert_fail@plt+0x1e7c>
   136c4:	add	r4, sp, #8
   136c8:	ldr	r3, [r6, #24]
   136cc:	ldr	r2, [r5]
   136d0:	cmp	r3, #0
   136d4:	str	r2, [sp, #84]	; 0x54
   136d8:	stm	r4, {r0, r1}
   136dc:	beq	13764 <__assert_fail@plt+0x1e5c>
   136e0:	mov	r1, r4
   136e4:	mov	r0, r3
   136e8:	add	r2, sp, #16
   136ec:	ldr	r4, [sp, #12]
   136f0:	bl	1a73c <__assert_fail@plt+0x8e34>
   136f4:	cmp	r0, #0
   136f8:	beq	13734 <__assert_fail@plt+0x1e2c>
   136fc:	ldr	r3, [r6, #24]
   13700:	ldr	r2, [pc, #128]	; 13788 <__assert_fail@plt+0x1e80>
   13704:	mov	r1, #61	; 0x3d
   13708:	stm	sp, {r3, r4}
   1370c:	ldr	r0, [pc, #120]	; 1378c <__assert_fail@plt+0x1e84>
   13710:	add	r3, sp, #16
   13714:	bl	16c1c <__assert_fail@plt+0x5314>
   13718:	ldr	r2, [sp, #84]	; 0x54
   1371c:	ldr	r3, [r5]
   13720:	ldr	r0, [pc, #100]	; 1378c <__assert_fail@plt+0x1e84>
   13724:	cmp	r2, r3
   13728:	bne	1377c <__assert_fail@plt+0x1e74>
   1372c:	add	sp, sp, #88	; 0x58
   13730:	pop	{r4, r5, r6, pc}
   13734:	ldr	r0, [sp, #8]
   13738:	add	r2, sp, #60	; 0x3c
   1373c:	asr	r1, r0, #31
   13740:	bl	153ac <__assert_fail@plt+0x3aa4>
   13744:	str	r4, [sp, #4]
   13748:	ldr	r3, [pc, #64]	; 13790 <__assert_fail@plt+0x1e88>
   1374c:	mov	r2, #61	; 0x3d
   13750:	mov	r1, #1
   13754:	str	r0, [sp]
   13758:	ldr	r0, [pc, #44]	; 1378c <__assert_fail@plt+0x1e84>
   1375c:	bl	11770 <__sprintf_chk@plt>
   13760:	b	13718 <__assert_fail@plt+0x1e10>
   13764:	ldr	r0, [pc, #40]	; 13794 <__assert_fail@plt+0x1e8c>
   13768:	bl	11680 <getenv@plt>
   1376c:	bl	1a4b0 <__assert_fail@plt+0x8ba8>
   13770:	mov	r3, r0
   13774:	str	r0, [r6, #24]
   13778:	b	136e0 <__assert_fail@plt+0x1dd8>
   1377c:	bl	11590 <__stack_chk_fail@plt>
   13780:	andeq	r0, r3, r0, lsl #4
   13784:	andeq	pc, r2, r0, lsl #30
   13788:	andeq	sp, r1, r4, ror #17
   1378c:	andeq	r0, r3, ip, lsl r2
   13790:	strdeq	sp, [r1], -ip
   13794:	andeq	sp, r1, r0, ror #17
   13798:	push	{r4, r5, r6, r7, r8, lr}
   1379c:	mov	r5, r0
   137a0:	ldr	r4, [pc, #308]	; 138dc <__assert_fail@plt+0x1fd4>
   137a4:	ldr	r6, [pc, #308]	; 138e0 <__assert_fail@plt+0x1fd8>
   137a8:	sub	sp, sp, #216	; 0xd8
   137ac:	ldrb	r0, [r4, #89]	; 0x59
   137b0:	ldr	r3, [r6]
   137b4:	cmp	r0, #0
   137b8:	str	r3, [sp, #212]	; 0xd4
   137bc:	beq	13888 <__assert_fail@plt+0x1f80>
   137c0:	mov	r2, sp
   137c4:	mov	r1, r5
   137c8:	mov	r0, #3
   137cc:	bl	1189c <__xstat64@plt>
   137d0:	cmp	r0, #0
   137d4:	bne	1386c <__assert_fail@plt+0x1f64>
   137d8:	ldr	r4, [r4, #92]	; 0x5c
   137dc:	cmp	r4, #0
   137e0:	bne	137f4 <__assert_fail@plt+0x1eec>
   137e4:	b	1386c <__assert_fail@plt+0x1f64>
   137e8:	ldr	r4, [r4, #28]
   137ec:	cmp	r4, #0
   137f0:	beq	1386c <__assert_fail@plt+0x1f64>
   137f4:	ldrb	r3, [r4, #24]
   137f8:	tst	r3, #1
   137fc:	beq	137e8 <__assert_fail@plt+0x1ee0>
   13800:	ldr	r7, [r4]
   13804:	ldrb	r3, [r7]
   13808:	cmp	r3, #47	; 0x2f
   1380c:	bne	137e8 <__assert_fail@plt+0x1ee0>
   13810:	mov	r1, r5
   13814:	ldr	r0, [r4, #4]
   13818:	bl	1150c <strcmp@plt>
   1381c:	cmp	r0, #0
   13820:	bne	137e8 <__assert_fail@plt+0x1ee0>
   13824:	mov	r1, r7
   13828:	add	r2, sp, #104	; 0x68
   1382c:	mov	r0, #3
   13830:	bl	1189c <__xstat64@plt>
   13834:	cmp	r0, #0
   13838:	bne	137e8 <__assert_fail@plt+0x1ee0>
   1383c:	ldrd	r0, [sp, #96]	; 0x60
   13840:	ldrd	r2, [sp, #200]	; 0xc8
   13844:	cmp	r1, r3
   13848:	cmpeq	r0, r2
   1384c:	bne	137e8 <__assert_fail@plt+0x1ee0>
   13850:	ldrd	r0, [sp]
   13854:	ldrd	r2, [sp, #104]	; 0x68
   13858:	cmp	r1, r3
   1385c:	cmpeq	r0, r2
   13860:	bne	137e8 <__assert_fail@plt+0x1ee0>
   13864:	ldr	r0, [r4]
   13868:	b	13870 <__assert_fail@plt+0x1f68>
   1386c:	mov	r0, #0
   13870:	ldr	r2, [sp, #212]	; 0xd4
   13874:	ldr	r3, [r6]
   13878:	cmp	r2, r3
   1387c:	bne	138d8 <__assert_fail@plt+0x1fd0>
   13880:	add	sp, sp, #216	; 0xd8
   13884:	pop	{r4, r5, r6, r7, r8, pc}
   13888:	bl	19d08 <__assert_fail@plt+0x8400>
   1388c:	cmp	r0, #0
   13890:	mov	r7, r0
   13894:	str	r0, [r4, #92]	; 0x5c
   13898:	beq	138a8 <__assert_fail@plt+0x1fa0>
   1389c:	mov	r3, #1
   138a0:	strb	r3, [r4, #89]	; 0x59
   138a4:	b	137c0 <__assert_fail@plt+0x1eb8>
   138a8:	bl	11764 <__errno_location@plt>
   138ac:	mov	r2, #5
   138b0:	ldr	r1, [pc, #44]	; 138e4 <__assert_fail@plt+0x1fdc>
   138b4:	ldr	r8, [r0]
   138b8:	mov	r0, r7
   138bc:	bl	11584 <dcgettext@plt>
   138c0:	mov	r1, r8
   138c4:	ldr	r2, [pc, #28]	; 138e8 <__assert_fail@plt+0x1fe0>
   138c8:	mov	r3, r0
   138cc:	mov	r0, r7
   138d0:	bl	1165c <error@plt>
   138d4:	b	1389c <__assert_fail@plt+0x1f94>
   138d8:	bl	11590 <__stack_chk_fail@plt>
   138dc:	andeq	r0, r3, r0, lsl #4
   138e0:	andeq	pc, r2, r0, lsl #30
   138e4:	andeq	sp, r1, r4, lsl #18
   138e8:	andeq	lr, r1, r4, lsl r6
   138ec:	cmp	r0, #0
   138f0:	push	{r4, r5, r6, lr}
   138f4:	mov	r4, r1
   138f8:	beq	13928 <__assert_fail@plt+0x2020>
   138fc:	cmp	r1, #0
   13900:	beq	13910 <__assert_fail@plt+0x2008>
   13904:	ldr	r0, [pc, #316]	; 13a48 <__assert_fail@plt+0x2140>
   13908:	pop	{r4, r5, r6, lr}
   1390c:	b	1970c <__assert_fail@plt+0x7e04>
   13910:	mov	r0, r1
   13914:	mov	r2, #5
   13918:	ldr	r1, [pc, #300]	; 13a4c <__assert_fail@plt+0x2144>
   1391c:	bl	11584 <dcgettext@plt>
   13920:	pop	{r4, r5, r6, lr}
   13924:	b	1970c <__assert_fail@plt+0x7e04>
   13928:	cmp	r1, #0
   1392c:	beq	13948 <__assert_fail@plt+0x2040>
   13930:	bl	11500 <is_selinux_enabled@plt>
   13934:	cmp	r0, #0
   13938:	ble	13a3c <__assert_fail@plt+0x2134>
   1393c:	ldr	r0, [pc, #268]	; 13a50 <__assert_fail@plt+0x2148>
   13940:	pop	{r4, r5, r6, lr}
   13944:	b	1970c <__assert_fail@plt+0x7e04>
   13948:	ldr	r1, [pc, #260]	; 13a54 <__assert_fail@plt+0x214c>
   1394c:	mov	r5, r2
   13950:	mov	r2, #5
   13954:	bl	11584 <dcgettext@plt>
   13958:	bl	1970c <__assert_fail@plt+0x7e04>
   1395c:	cmp	r5, #0
   13960:	movne	r2, #5
   13964:	ldrne	r1, [pc, #236]	; 13a58 <__assert_fail@plt+0x2150>
   13968:	moveq	r2, #5
   1396c:	ldreq	r1, [pc, #232]	; 13a5c <__assert_fail@plt+0x2154>
   13970:	mov	r6, r0
   13974:	movne	r0, r4
   13978:	moveq	r0, r5
   1397c:	bl	11584 <dcgettext@plt>
   13980:	mov	r1, r6
   13984:	mov	r2, r0
   13988:	ldr	r0, [pc, #208]	; 13a60 <__assert_fail@plt+0x2158>
   1398c:	bl	1979c <__assert_fail@plt+0x7e94>
   13990:	mov	r5, r0
   13994:	mov	r0, r6
   13998:	bl	11548 <free@plt>
   1399c:	mov	r2, #5
   139a0:	ldr	r1, [pc, #188]	; 13a64 <__assert_fail@plt+0x215c>
   139a4:	mov	r0, #0
   139a8:	bl	11584 <dcgettext@plt>
   139ac:	mov	r1, r5
   139b0:	mov	r2, r0
   139b4:	ldr	r0, [pc, #164]	; 13a60 <__assert_fail@plt+0x2158>
   139b8:	bl	1979c <__assert_fail@plt+0x7e94>
   139bc:	mov	r4, r0
   139c0:	mov	r0, r5
   139c4:	bl	11548 <free@plt>
   139c8:	bl	11500 <is_selinux_enabled@plt>
   139cc:	cmp	r0, #0
   139d0:	bgt	13a08 <__assert_fail@plt+0x2100>
   139d4:	mov	r2, #5
   139d8:	ldr	r1, [pc, #136]	; 13a68 <__assert_fail@plt+0x2160>
   139dc:	mov	r0, #0
   139e0:	bl	11584 <dcgettext@plt>
   139e4:	mov	r1, r4
   139e8:	mov	r2, r0
   139ec:	ldr	r0, [pc, #108]	; 13a60 <__assert_fail@plt+0x2158>
   139f0:	bl	1979c <__assert_fail@plt+0x7e94>
   139f4:	mov	r5, r0
   139f8:	mov	r0, r4
   139fc:	bl	11548 <free@plt>
   13a00:	mov	r0, r5
   13a04:	pop	{r4, r5, r6, pc}
   13a08:	mov	r2, #5
   13a0c:	ldr	r1, [pc, #88]	; 13a6c <__assert_fail@plt+0x2164>
   13a10:	mov	r0, #0
   13a14:	bl	11584 <dcgettext@plt>
   13a18:	mov	r1, r4
   13a1c:	mov	r2, r0
   13a20:	ldr	r0, [pc, #56]	; 13a60 <__assert_fail@plt+0x2158>
   13a24:	bl	1979c <__assert_fail@plt+0x7e94>
   13a28:	mov	r5, r0
   13a2c:	mov	r0, r4
   13a30:	bl	11548 <free@plt>
   13a34:	mov	r4, r5
   13a38:	b	139d4 <__assert_fail@plt+0x20cc>
   13a3c:	ldr	r0, [pc, #44]	; 13a70 <__assert_fail@plt+0x2168>
   13a40:	pop	{r4, r5, r6, lr}
   13a44:	b	1970c <__assert_fail@plt+0x7e04>
   13a48:	andeq	sp, r1, ip, lsr #6
   13a4c:	andeq	sp, r1, r0, lsr r9
   13a50:	andeq	sp, r1, r0, asr r3
   13a54:	ldrdeq	sp, [r1], -ip
   13a58:	andeq	sp, r1, r8, lsl sl
   13a5c:	andeq	sp, r1, r0, ror #20
   13a60:	andeq	sp, r1, r8, asr sl
   13a64:	andeq	sp, r1, ip, lsl #21
   13a68:	ldrdeq	sp, [r1], -r8
   13a6c:	andeq	sp, r1, r8, asr #21
   13a70:	andeq	sp, r1, r4, lsl #7
   13a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a78:	sub	sp, sp, #28
   13a7c:	mov	r7, r1
   13a80:	add	r1, sp, #24
   13a84:	mov	r9, r0
   13a88:	stmdb	r1, {r2, r3}
   13a8c:	mov	r1, #46	; 0x2e
   13a90:	mov	r2, r7
   13a94:	bl	117b8 <memchr@plt>
   13a98:	ldr	r8, [sp, #16]
   13a9c:	ldr	sl, [sp, #20]
   13aa0:	subs	r5, r0, #0
   13aa4:	beq	13c94 <__assert_fail@plt+0x238c>
   13aa8:	mov	r4, #0
   13aac:	strb	r4, [r9, r7]
   13ab0:	ldrb	r3, [r5, #1]
   13ab4:	sub	r7, r5, r9
   13ab8:	sub	r3, r3, #48	; 0x30
   13abc:	cmp	r3, #9
   13ac0:	bls	13c64 <__assert_fail@plt+0x235c>
   13ac4:	ldrb	r3, [r5, #-1]
   13ac8:	sub	r3, r3, #48	; 0x30
   13acc:	cmp	r3, #9
   13ad0:	movls	r6, #9
   13ad4:	bhi	13d18 <__assert_fail@plt+0x2410>
   13ad8:	mov	r3, #0
   13adc:	strb	r3, [r5], #-1
   13ae0:	mov	r4, r5
   13ae4:	ldrb	r3, [r5, #-1]!
   13ae8:	sub	r3, r3, #48	; 0x30
   13aec:	cmp	r3, #9
   13af0:	bls	13ae0 <__assert_fail@plt+0x21d8>
   13af4:	mov	r2, #10
   13af8:	mov	r1, #0
   13afc:	mov	r0, r4
   13b00:	bl	11518 <strtol@plt>
   13b04:	cmp	r0, #1
   13b08:	mov	r5, r0
   13b0c:	ble	13ba4 <__assert_fail@plt+0x229c>
   13b10:	ldr	r1, [pc, #556]	; 13d44 <__assert_fail@plt+0x243c>
   13b14:	ldrb	r2, [r4]
   13b18:	ldr	r3, [r1, #96]	; 0x60
   13b1c:	cmp	r2, #48	; 0x30
   13b20:	addeq	r4, r4, #1
   13b24:	cmp	r3, r0
   13b28:	sub	r7, r4, r9
   13b2c:	bcs	13ba4 <__assert_fail@plt+0x229c>
   13b30:	sub	r3, r0, r3
   13b34:	cmp	r3, #1
   13b38:	ble	13ba4 <__assert_fail@plt+0x229c>
   13b3c:	sub	r1, r3, r6
   13b40:	cmp	r1, #1
   13b44:	ble	13ba4 <__assert_fail@plt+0x229c>
   13b48:	cmp	r9, r4
   13b4c:	bcs	13d2c <__assert_fail@plt+0x2424>
   13b50:	sub	r4, r4, #1
   13b54:	sub	r3, r9, #1
   13b58:	mov	r0, r9
   13b5c:	mov	lr, #0
   13b60:	ldrb	ip, [r3, #1]!
   13b64:	mov	r2, r0
   13b68:	cmp	ip, #45	; 0x2d
   13b6c:	strbne	ip, [r2], #1
   13b70:	moveq	lr, #1
   13b74:	movne	r0, r2
   13b78:	cmp	r4, r3
   13b7c:	bne	13b60 <__assert_fail@plt+0x2258>
   13b80:	cmp	lr, #0
   13b84:	sub	r7, r0, r9
   13b88:	bne	13ba4 <__assert_fail@plt+0x229c>
   13b8c:	str	r1, [sp]
   13b90:	ldr	r3, [pc, #432]	; 13d48 <__assert_fail@plt+0x2440>
   13b94:	mvn	r2, #0
   13b98:	mov	r1, #1
   13b9c:	bl	11770 <__sprintf_chk@plt>
   13ba0:	add	r7, r7, r0
   13ba4:	cmp	r6, #8
   13ba8:	bgt	13d38 <__assert_fail@plt+0x2430>
   13bac:	mov	r3, r6
   13bb0:	mov	r4, #1
   13bb4:	add	r4, r4, r4, lsl #2
   13bb8:	add	r3, r3, #1
   13bbc:	cmp	r3, #9
   13bc0:	lsl	r4, r4, #1
   13bc4:	bne	13bb4 <__assert_fail@plt+0x22ac>
   13bc8:	mov	r1, r4
   13bcc:	mov	r0, sl
   13bd0:	bl	1ce08 <__assert_fail@plt+0xb500>
   13bd4:	mov	fp, r0
   13bd8:	adds	r3, sl, #0
   13bdc:	movne	r3, #1
   13be0:	ands	r3, r3, r8, lsr #31
   13be4:	bne	13c9c <__assert_fail@plt+0x2394>
   13be8:	mov	r1, r7
   13bec:	mov	r0, r9
   13bf0:	mov	r2, r8
   13bf4:	asr	r3, r8, #31
   13bf8:	bl	12098 <__assert_fail@plt+0x790>
   13bfc:	cmp	r6, #0
   13c00:	beq	13c5c <__assert_fail@plt+0x2354>
   13c04:	bic	r0, r0, r0, asr #31
   13c08:	cmp	r6, #9
   13c0c:	movlt	r3, r6
   13c10:	movge	r3, #9
   13c14:	cmp	r0, r5
   13c18:	sub	r6, r6, r3
   13c1c:	bge	13cfc <__assert_fail@plt+0x23f4>
   13c20:	ldr	r1, [pc, #284]	; 13d44 <__assert_fail@plt+0x243c>
   13c24:	sub	r0, r5, r0
   13c28:	ldr	r2, [r1, #96]	; 0x60
   13c2c:	cmp	r0, r2
   13c30:	addhi	r2, r3, r2
   13c34:	subhi	r2, r0, r2
   13c38:	bls	13d08 <__assert_fail@plt+0x2400>
   13c3c:	mov	r0, #0
   13c40:	stmib	sp, {r2, r6}
   13c44:	str	fp, [sp]
   13c48:	ldr	r2, [r1, #100]	; 0x64
   13c4c:	str	r0, [sp, #12]
   13c50:	ldr	r1, [pc, #244]	; 13d4c <__assert_fail@plt+0x2444>
   13c54:	mov	r0, #1
   13c58:	bl	11794 <__printf_chk@plt>
   13c5c:	add	sp, sp, #28
   13c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c64:	mov	r2, #10
   13c68:	mov	r1, r4
   13c6c:	add	r0, r5, #1
   13c70:	bl	11518 <strtol@plt>
   13c74:	subs	r6, r0, #0
   13c78:	beq	13d10 <__assert_fail@plt+0x2408>
   13c7c:	ldrb	r3, [r5, #-1]
   13c80:	sub	r3, r3, #48	; 0x30
   13c84:	cmp	r3, #9
   13c88:	movhi	r5, r4
   13c8c:	bhi	13ba4 <__assert_fail@plt+0x229c>
   13c90:	b	13ad8 <__assert_fail@plt+0x21d0>
   13c94:	mov	r6, r5
   13c98:	b	13bac <__assert_fail@plt+0x22a4>
   13c9c:	mov	r1, r4
   13ca0:	ldr	r0, [pc, #168]	; 13d50 <__assert_fail@plt+0x2448>
   13ca4:	bl	1ce08 <__assert_fail@plt+0xb500>
   13ca8:	mov	r1, r4
   13cac:	sub	fp, r0, fp
   13cb0:	mov	r0, sl
   13cb4:	bl	1d028 <__assert_fail@plt+0xb720>
   13cb8:	cmp	r1, #0
   13cbc:	subne	fp, fp, #1
   13cc0:	cmp	fp, #0
   13cc4:	addne	r8, r8, #1
   13cc8:	cmp	r8, #0
   13ccc:	bne	13be8 <__assert_fail@plt+0x22e0>
   13cd0:	mov	r1, r7
   13cd4:	mov	r0, r9
   13cd8:	ldr	r3, [pc, #116]	; 13d54 <__assert_fail@plt+0x244c>
   13cdc:	ldr	r2, [pc, #116]	; 13d58 <__assert_fail@plt+0x2450>
   13ce0:	bl	11f48 <__assert_fail@plt+0x640>
   13ce4:	mov	r1, r9
   13ce8:	mov	r2, #0
   13cec:	ldr	r3, [pc, #104]	; 13d5c <__assert_fail@plt+0x2454>
   13cf0:	mov	r0, #1
   13cf4:	bl	11794 <__printf_chk@plt>
   13cf8:	b	13bfc <__assert_fail@plt+0x22f4>
   13cfc:	mov	r2, #0
   13d00:	ldr	r1, [pc, #60]	; 13d44 <__assert_fail@plt+0x243c>
   13d04:	b	13c3c <__assert_fail@plt+0x2334>
   13d08:	mov	r2, #0
   13d0c:	b	13c3c <__assert_fail@plt+0x2334>
   13d10:	mov	r5, r6
   13d14:	b	13bac <__assert_fail@plt+0x22a4>
   13d18:	mov	r5, r4
   13d1c:	mov	fp, sl
   13d20:	mov	r6, #9
   13d24:	mov	r4, #1
   13d28:	b	13bd8 <__assert_fail@plt+0x22d0>
   13d2c:	mov	r0, r9
   13d30:	mov	r7, #0
   13d34:	b	13b8c <__assert_fail@plt+0x2284>
   13d38:	mov	fp, sl
   13d3c:	mov	r4, #1
   13d40:	b	13bd8 <__assert_fail@plt+0x22d0>
   13d44:	andeq	r0, r3, r0, lsl #4
   13d48:	andeq	sp, r1, r8, lsl #22
   13d4c:	andeq	sp, r1, r0, lsl fp
   13d50:	blcc	fe6c6558 <optarg@@GLIBC_2.4+0xfe696360>
   13d54:	andeq	sp, r1, ip, lsl #22
   13d58:	andeq	sp, r1, r8, lsl #9
   13d5c:	svclt	0x00d00000
   13d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d64:	sub	sp, sp, #76	; 0x4c
   13d68:	ldr	r4, [pc, #1660]	; 143ec <__assert_fail@plt+0x2ae4>
   13d6c:	sub	r2, r2, #65	; 0x41
   13d70:	mov	r6, r0
   13d74:	ldr	r3, [r4]
   13d78:	mov	r7, r1
   13d7c:	str	r3, [sp, #68]	; 0x44
   13d80:	ldr	r8, [sp, #112]	; 0x70
   13d84:	ldr	r5, [sp, #116]	; 0x74
   13d88:	cmp	r2, #57	; 0x39
   13d8c:	ldrls	pc, [pc, r2, lsl #2]
   13d90:	b	14280 <__assert_fail@plt+0x2978>
   13d94:	muleq	r1, r8, r1
   13d98:	andeq	r4, r1, r4, lsl #3
   13d9c:	andeq	r4, r1, r0, lsr #2
   13da0:	andeq	r4, r1, r0, lsl r1
   13da4:	andeq	r4, r1, r0, lsl #5
   13da8:	ldrdeq	r4, [r1], -ip
   13dac:	andeq	r4, r1, r4, asr #3
   13db0:	andeq	r4, r1, r0, lsl #5
   13db4:	andeq	r4, r1, r0, lsl #5
   13db8:	andeq	r4, r1, r0, lsl #5
   13dbc:	andeq	r4, r1, r0, lsl #5
   13dc0:	andeq	r4, r1, r0, lsl #5
   13dc4:	andeq	r4, r1, r0, lsl #5
   13dc8:	strdeq	r4, [r1], -ip
   13dcc:	andeq	r4, r1, r0, lsl #5
   13dd0:	andeq	r4, r1, r0, lsl #5
   13dd4:	andeq	r4, r1, r0, lsl #5
   13dd8:	andeq	r4, r1, r0, lsl #5
   13ddc:	andeq	r4, r1, r0, lsl #5
   13de0:	andeq	r4, r1, r0, ror #1
   13de4:	strheq	r4, [r1], -r8
   13de8:	andeq	r4, r1, r0, lsl #5
   13dec:	muleq	r1, ip, r0
   13df0:	muleq	r1, r0, r0
   13df4:	andeq	r4, r1, r4, lsl #1
   13df8:	andeq	r4, r1, ip, asr r0
   13dfc:	andeq	r4, r1, r0, lsl #5
   13e00:	andeq	r4, r1, r0, lsl #5
   13e04:	andeq	r4, r1, r0, lsl #5
   13e08:	andeq	r4, r1, r0, lsl #5
   13e0c:	andeq	r4, r1, r0, lsl #5
   13e10:	andeq	r4, r1, r0, lsl #5
   13e14:	andeq	r4, r1, r8, lsr #32
   13e18:	andeq	r4, r1, r8, lsl r0
   13e1c:	andeq	r4, r1, r0, lsl #5
   13e20:	andeq	r4, r1, r8
   13e24:	andeq	r4, r1, r0, lsl #5
   13e28:	andeq	r3, r1, ip, ror #31
   13e2c:	andeq	r3, r1, r4, ror #31
   13e30:	andeq	r4, r1, r0
   13e34:	ldrdeq	r3, [r1], -r4
   13e38:	andeq	r4, r1, r0, lsl #5
   13e3c:	andeq	r4, r1, r0, lsl #5
   13e40:	andeq	r4, r1, r0, lsl #5
   13e44:	andeq	r3, r1, r8, ror #30
   13e48:	andeq	r3, r1, r8, asr pc
   13e4c:	andeq	r3, r1, r8, lsr pc
   13e50:	andeq	r4, r1, r0, lsl #5
   13e54:	andeq	r4, r1, r0, lsl #5
   13e58:	andeq	r4, r1, r0, lsl #5
   13e5c:	andeq	r3, r1, r8, lsr #30
   13e60:	andeq	r3, r1, r4, lsl #30
   13e64:	andeq	r3, r1, r8, ror #29
   13e68:	andeq	r4, r1, r0, lsl #5
   13e6c:	ldrdeq	r3, [r1], -r8
   13e70:	andeq	r3, r1, ip, asr #29
   13e74:	andeq	r3, r1, r0, asr #29
   13e78:	andeq	r3, r1, ip, ror lr
   13e7c:	add	r5, r5, #88	; 0x58
   13e80:	add	r3, sp, #52	; 0x34
   13e84:	ldm	r5, {r0, r1}
   13e88:	mov	r5, #0
   13e8c:	stm	r3, {r0, r1}
   13e90:	bl	136b4 <__assert_fail@plt+0x1dac>
   13e94:	mov	r1, r7
   13e98:	mov	r2, r0
   13e9c:	mov	r0, r6
   13ea0:	bl	12028 <__assert_fail@plt+0x720>
   13ea4:	ldr	r2, [sp, #68]	; 0x44
   13ea8:	ldr	r3, [r4]
   13eac:	mov	r0, r5
   13eb0:	cmp	r2, r3
   13eb4:	bne	143e8 <__assert_fail@plt+0x2ae0>
   13eb8:	add	sp, sp, #76	; 0x4c
   13ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec0:	add	r5, r5, #80	; 0x50
   13ec4:	add	r3, sp, #36	; 0x24
   13ec8:	b	13e84 <__assert_fail@plt+0x257c>
   13ecc:	add	r5, r5, #72	; 0x48
   13ed0:	add	r3, sp, #20
   13ed4:	b	13e84 <__assert_fail@plt+0x257c>
   13ed8:	ldr	r2, [pc, #1296]	; 143f0 <__assert_fail@plt+0x2ae8>
   13edc:	bl	12028 <__assert_fail@plt+0x720>
   13ee0:	mov	r5, #0
   13ee4:	b	13ea4 <__assert_fail@plt+0x259c>
   13ee8:	ldr	r2, [r5, #24]
   13eec:	mov	r1, r7
   13ef0:	mov	r0, r6
   13ef4:	mov	r3, #0
   13ef8:	bl	1205c <__assert_fail@plt+0x754>
   13efc:	mov	r5, #0
   13f00:	b	13ea4 <__assert_fail@plt+0x259c>
   13f04:	ldrd	r2, [r5, #32]
   13f08:	mov	r5, #0
   13f0c:	bic	r3, r3, #4080	; 0xff0
   13f10:	lsl	r2, r2, #12
   13f14:	bic	r3, r3, #15
   13f18:	orr	r2, r3, r2, lsr #20
   13f1c:	mov	r3, #0
   13f20:	bl	11fec <__assert_fail@plt+0x6e4>
   13f24:	b	13ea4 <__assert_fail@plt+0x259c>
   13f28:	ldrd	r2, [r5, #48]	; 0x30
   13f2c:	bl	12098 <__assert_fail@plt+0x790>
   13f30:	mov	r5, #0
   13f34:	b	13ea4 <__assert_fail@plt+0x259c>
   13f38:	ldr	r2, [r5, #56]	; 0x38
   13f3c:	mov	r5, #0
   13f40:	sub	r3, r2, #1
   13f44:	cmp	r3, #536870912	; 0x20000000
   13f48:	movcs	r2, #512	; 0x200
   13f4c:	asr	r3, r2, #31
   13f50:	bl	1205c <__assert_fail@plt+0x754>
   13f54:	b	13ea4 <__assert_fail@plt+0x259c>
   13f58:	mov	r2, r8
   13f5c:	bl	12028 <__assert_fail@plt+0x720>
   13f60:	mov	r5, #0
   13f64:	b	13ea4 <__assert_fail@plt+0x259c>
   13f68:	ldr	r3, [pc, #1156]	; 143f4 <__assert_fail@plt+0x2aec>
   13f6c:	ldrb	r3, [r3, #116]	; 0x74
   13f70:	cmp	r3, #0
   13f74:	bne	13f88 <__assert_fail@plt+0x2680>
   13f78:	ldr	r3, [r5, #16]
   13f7c:	and	r3, r3, #61440	; 0xf000
   13f80:	cmp	r3, #40960	; 0xa000
   13f84:	beq	142b0 <__assert_fail@plt+0x29a8>
   13f88:	mov	r0, r8
   13f8c:	bl	11860 <canonicalize_file_name@plt>
   13f90:	subs	sl, r0, #0
   13f94:	beq	1434c <__assert_fail@plt+0x2a44>
   13f98:	bl	13798 <__assert_fail@plt+0x1e90>
   13f9c:	mov	r9, r0
   13fa0:	mov	r0, sl
   13fa4:	bl	11548 <free@plt>
   13fa8:	cmp	r9, #0
   13fac:	movne	r5, #0
   13fb0:	movne	sl, r5
   13fb4:	beq	142b0 <__assert_fail@plt+0x29a8>
   13fb8:	mov	r0, r6
   13fbc:	mov	r2, r9
   13fc0:	mov	r1, r7
   13fc4:	bl	12028 <__assert_fail@plt+0x720>
   13fc8:	mov	r0, sl
   13fcc:	bl	11548 <free@plt>
   13fd0:	b	13ea4 <__assert_fail@plt+0x259c>
   13fd4:	ldrd	r2, [r5, #96]	; 0x60
   13fd8:	bl	1205c <__assert_fail@plt+0x754>
   13fdc:	mov	r5, #0
   13fe0:	b	13ea4 <__assert_fail@plt+0x259c>
   13fe4:	ldr	r2, [r5, #28]
   13fe8:	b	13eec <__assert_fail@plt+0x25e4>
   13fec:	ldr	r2, [r5, #16]
   13ff0:	mov	r3, #0
   13ff4:	bl	11fec <__assert_fail@plt+0x6e4>
   13ff8:	mov	r5, #0
   13ffc:	b	13ea4 <__assert_fail@plt+0x259c>
   14000:	ldr	r2, [r5, #20]
   14004:	b	13eec <__assert_fail@plt+0x25e4>
   14008:	ldrd	r2, [r5]
   1400c:	bl	1205c <__assert_fail@plt+0x754>
   14010:	mov	r5, #0
   14014:	b	13ea4 <__assert_fail@plt+0x259c>
   14018:	ldrd	r2, [r5, #64]	; 0x40
   1401c:	bl	1205c <__assert_fail@plt+0x754>
   14020:	mov	r5, #0
   14024:	b	13ea4 <__assert_fail@plt+0x259c>
   14028:	ldr	r5, [r5, #16]
   1402c:	ldr	r3, [pc, #964]	; 143f8 <__assert_fail@plt+0x2af0>
   14030:	ldr	r2, [pc, #964]	; 143fc <__assert_fail@plt+0x2af4>
   14034:	lsl	r5, r5, #20
   14038:	bl	11f48 <__assert_fail@plt+0x640>
   1403c:	lsr	r5, r5, #20
   14040:	mov	r2, r5
   14044:	mov	r1, r6
   14048:	mov	r3, #0
   1404c:	mov	r0, #1
   14050:	bl	11794 <__printf_chk@plt>
   14054:	mov	r5, #0
   14058:	b	13ea4 <__assert_fail@plt+0x259c>
   1405c:	add	r5, r5, #88	; 0x58
   14060:	add	r3, sp, #60	; 0x3c
   14064:	ldm	r5, {r0, r1}
   14068:	mov	r5, #0
   1406c:	stm	r3, {r0, r1}
   14070:	mov	r1, r7
   14074:	mov	r0, r6
   14078:	ldm	r3, {r2, r3}
   1407c:	bl	13a74 <__assert_fail@plt+0x216c>
   14080:	b	13ea4 <__assert_fail@plt+0x259c>
   14084:	add	r5, r5, #80	; 0x50
   14088:	add	r3, sp, #44	; 0x2c
   1408c:	b	14064 <__assert_fail@plt+0x275c>
   14090:	add	r5, r5, #72	; 0x48
   14094:	add	r3, sp, #28
   14098:	b	14064 <__assert_fail@plt+0x275c>
   1409c:	add	r3, sp, #12
   140a0:	mov	r5, #0
   140a4:	str	r5, [sp, #12]
   140a8:	str	r5, [sp, #16]
   140ac:	ldm	r3, {r2, r3}
   140b0:	bl	13a74 <__assert_fail@plt+0x216c>
   140b4:	b	13ea4 <__assert_fail@plt+0x259c>
   140b8:	ldr	r0, [r5, #24]
   140bc:	bl	11524 <getpwuid@plt>
   140c0:	cmp	r0, #0
   140c4:	beq	141d4 <__assert_fail@plt+0x28cc>
   140c8:	ldr	r2, [r0]
   140cc:	mov	r1, r7
   140d0:	mov	r0, r6
   140d4:	bl	12028 <__assert_fail@plt+0x720>
   140d8:	mov	r5, #0
   140dc:	b	13ea4 <__assert_fail@plt+0x259c>
   140e0:	ldr	r3, [r5, #32]
   140e4:	ldr	r0, [r5, #36]	; 0x24
   140e8:	mov	r5, #0
   140ec:	lsr	r2, r3, #12
   140f0:	orr	r2, r2, r0, lsl #20
   140f4:	uxtb	r3, r3
   140f8:	bic	r2, r2, #255	; 0xff
   140fc:	orr	r2, r2, r3
   14100:	mov	r0, r6
   14104:	mov	r3, #0
   14108:	bl	11fec <__assert_fail@plt+0x6e4>
   1410c:	b	13ea4 <__assert_fail@plt+0x259c>
   14110:	ldrd	r2, [r5]
   14114:	bl	11fec <__assert_fail@plt+0x6e4>
   14118:	mov	r5, #0
   1411c:	b	13ea4 <__assert_fail@plt+0x259c>
   14120:	ldr	r3, [pc, #716]	; 143f4 <__assert_fail@plt+0x2aec>
   14124:	add	r1, sp, #60	; 0x3c
   14128:	mov	r0, r8
   1412c:	ldrb	r3, [r3, #116]	; 0x74
   14130:	cmp	r3, #0
   14134:	beq	142dc <__assert_fail@plt+0x29d4>
   14138:	bl	19b58 <__assert_fail@plt+0x8250>
   1413c:	lsr	r5, r0, #31
   14140:	cmp	r5, #0
   14144:	bne	142e8 <__assert_fail@plt+0x29e0>
   14148:	ldr	r3, [pc, #688]	; 14400 <__assert_fail@plt+0x2af8>
   1414c:	ldr	r2, [sp, #60]	; 0x3c
   14150:	ldrh	r1, [r3]
   14154:	ldr	r3, [pc, #680]	; 14404 <__assert_fail@plt+0x2afc>
   14158:	cmp	r2, #0
   1415c:	moveq	r2, r3
   14160:	strh	r1, [r6, r7]
   14164:	mov	r1, r6
   14168:	mov	r0, #1
   1416c:	bl	11794 <__printf_chk@plt>
   14170:	ldr	r0, [sp, #60]	; 0x3c
   14174:	cmp	r0, #0
   14178:	beq	13ea4 <__assert_fail@plt+0x259c>
   1417c:	bl	11878 <freecon@plt>
   14180:	b	13ea4 <__assert_fail@plt+0x259c>
   14184:	mov	r2, #512	; 0x200
   14188:	mov	r3, #0
   1418c:	bl	1205c <__assert_fail@plt+0x754>
   14190:	mov	r5, #0
   14194:	b	13ea4 <__assert_fail@plt+0x259c>
   14198:	ldr	r8, [pc, #596]	; 143f4 <__assert_fail@plt+0x2aec>
   1419c:	mov	r0, r5
   141a0:	add	r1, r8, #104	; 0x68
   141a4:	bl	153a4 <__assert_fail@plt+0x3a9c>
   141a8:	mov	r5, #0
   141ac:	mov	r1, r7
   141b0:	mov	r0, r6
   141b4:	add	r2, r8, #104	; 0x68
   141b8:	strb	r5, [r8, #114]	; 0x72
   141bc:	bl	12028 <__assert_fail@plt+0x720>
   141c0:	b	13ea4 <__assert_fail@plt+0x259c>
   141c4:	ldr	r0, [r5, #28]
   141c8:	bl	118e4 <getgrgid@plt>
   141cc:	cmp	r0, #0
   141d0:	bne	140c8 <__assert_fail@plt+0x27c0>
   141d4:	ldr	r2, [pc, #556]	; 14408 <__assert_fail@plt+0x2b00>
   141d8:	b	140cc <__assert_fail@plt+0x27c4>
   141dc:	mov	r0, r5
   141e0:	bl	1516c <__assert_fail@plt+0x3864>
   141e4:	mov	r1, r7
   141e8:	mov	r5, #0
   141ec:	mov	r2, r0
   141f0:	mov	r0, r6
   141f4:	bl	12028 <__assert_fail@plt+0x720>
   141f8:	b	13ea4 <__assert_fail@plt+0x259c>
   141fc:	mov	r0, #0
   14200:	bl	18884 <__assert_fail@plt+0x6f7c>
   14204:	mov	r1, r8
   14208:	bl	18c34 <__assert_fail@plt+0x732c>
   1420c:	mov	r1, r7
   14210:	mov	r2, r0
   14214:	mov	r0, r6
   14218:	bl	12028 <__assert_fail@plt+0x720>
   1421c:	ldr	r3, [r5, #16]
   14220:	and	r3, r3, #61440	; 0xf000
   14224:	cmp	r3, #40960	; 0xa000
   14228:	movne	r5, #0
   1422c:	bne	13ea4 <__assert_fail@plt+0x259c>
   14230:	ldr	r1, [r5, #48]	; 0x30
   14234:	mov	r0, r8
   14238:	bl	14b28 <__assert_fail@plt+0x3220>
   1423c:	subs	r9, r0, #0
   14240:	beq	143a4 <__assert_fail@plt+0x2a9c>
   14244:	ldr	r1, [pc, #448]	; 1440c <__assert_fail@plt+0x2b04>
   14248:	mov	r0, #1
   1424c:	bl	11794 <__printf_chk@plt>
   14250:	mov	r0, #0
   14254:	bl	18884 <__assert_fail@plt+0x6f7c>
   14258:	mov	r1, r9
   1425c:	bl	18c34 <__assert_fail@plt+0x732c>
   14260:	mov	r1, r7
   14264:	mov	r5, #0
   14268:	mov	r2, r0
   1426c:	mov	r0, r6
   14270:	bl	12028 <__assert_fail@plt+0x720>
   14274:	mov	r0, r9
   14278:	bl	11548 <free@plt>
   1427c:	b	13ea4 <__assert_fail@plt+0x259c>
   14280:	ldr	r3, [pc, #392]	; 14410 <__assert_fail@plt+0x2b08>
   14284:	ldr	r0, [r3]
   14288:	ldr	r3, [r0, #20]
   1428c:	ldr	r2, [r0, #24]
   14290:	cmp	r3, r2
   14294:	bcs	14394 <__assert_fail@plt+0x2a8c>
   14298:	add	r1, r3, #1
   1429c:	mov	r2, #63	; 0x3f
   142a0:	str	r1, [r0, #20]
   142a4:	mov	r5, #0
   142a8:	strb	r2, [r3]
   142ac:	b	13ea4 <__assert_fail@plt+0x259c>
   142b0:	mov	r1, r5
   142b4:	mov	r0, r8
   142b8:	bl	14870 <__assert_fail@plt+0x2f68>
   142bc:	subs	sl, r0, #0
   142c0:	beq	14340 <__assert_fail@plt+0x2a38>
   142c4:	bl	13798 <__assert_fail@plt+0x1e90>
   142c8:	subs	r9, r0, #0
   142cc:	moveq	r5, r9
   142d0:	movne	r5, #0
   142d4:	moveq	r9, sl
   142d8:	b	13fb8 <__assert_fail@plt+0x26b0>
   142dc:	bl	19b70 <__assert_fail@plt+0x8268>
   142e0:	lsr	r5, r0, #31
   142e4:	b	14140 <__assert_fail@plt+0x2838>
   142e8:	bl	11764 <__errno_location@plt>
   142ec:	mov	r2, #5
   142f0:	ldr	r1, [pc, #284]	; 14414 <__assert_fail@plt+0x2b0c>
   142f4:	ldr	r9, [r0]
   142f8:	mov	r0, #0
   142fc:	bl	11584 <dcgettext@plt>
   14300:	mov	r1, r8
   14304:	mov	sl, r0
   14308:	mov	r0, #4
   1430c:	bl	18c34 <__assert_fail@plt+0x732c>
   14310:	mov	r2, sl
   14314:	mov	r1, r9
   14318:	mov	r3, r0
   1431c:	mov	r0, #0
   14320:	bl	1165c <error@plt>
   14324:	ldr	r3, [pc, #212]	; 14400 <__assert_fail@plt+0x2af8>
   14328:	mov	r1, #0
   1432c:	ldr	r2, [pc, #208]	; 14404 <__assert_fail@plt+0x2afc>
   14330:	ldrh	r3, [r3]
   14334:	str	r1, [sp, #60]	; 0x3c
   14338:	strh	r3, [r6, r7]
   1433c:	b	14164 <__assert_fail@plt+0x285c>
   14340:	mov	r5, #1
   14344:	ldr	r9, [pc, #184]	; 14404 <__assert_fail@plt+0x2afc>
   14348:	b	13fb8 <__assert_fail@plt+0x26b0>
   1434c:	bl	11764 <__errno_location@plt>
   14350:	mov	r2, #5
   14354:	ldr	r1, [pc, #188]	; 14418 <__assert_fail@plt+0x2b10>
   14358:	mov	r5, #1
   1435c:	ldr	r9, [pc, #160]	; 14404 <__assert_fail@plt+0x2afc>
   14360:	ldr	fp, [r0]
   14364:	mov	r0, sl
   14368:	bl	11584 <dcgettext@plt>
   1436c:	mov	r1, r8
   14370:	str	r0, [sp, #4]
   14374:	mov	r0, #4
   14378:	bl	18c34 <__assert_fail@plt+0x732c>
   1437c:	ldr	r2, [sp, #4]
   14380:	mov	r1, fp
   14384:	mov	r3, r0
   14388:	mov	r0, sl
   1438c:	bl	1165c <error@plt>
   14390:	b	13fb8 <__assert_fail@plt+0x26b0>
   14394:	mov	r1, #63	; 0x3f
   14398:	bl	117f4 <__overflow@plt>
   1439c:	mov	r5, #0
   143a0:	b	13ea4 <__assert_fail@plt+0x259c>
   143a4:	bl	11764 <__errno_location@plt>
   143a8:	mov	r2, #5
   143ac:	ldr	r1, [pc, #104]	; 1441c <__assert_fail@plt+0x2b14>
   143b0:	mov	r5, #1
   143b4:	ldr	r6, [r0]
   143b8:	mov	r0, r9
   143bc:	bl	11584 <dcgettext@plt>
   143c0:	mov	r1, r8
   143c4:	mov	r7, r0
   143c8:	mov	r0, #4
   143cc:	bl	18c34 <__assert_fail@plt+0x732c>
   143d0:	mov	r2, r7
   143d4:	mov	r1, r6
   143d8:	mov	r3, r0
   143dc:	mov	r0, r9
   143e0:	bl	1165c <error@plt>
   143e4:	b	13ea4 <__assert_fail@plt+0x259c>
   143e8:	bl	11590 <__stack_chk_fail@plt>
   143ec:	andeq	pc, r2, r0, lsl #30
   143f0:	andeq	sp, r1, r8, ror r4
   143f4:	andeq	r0, r3, r0, lsl #4
   143f8:	andeq	sp, r1, r4, asr fp
   143fc:	andeq	sp, r1, r4, ror r4
   14400:	andeq	sp, r1, r0, ror fp
   14404:	andeq	sp, r1, r8, lsr #22
   14408:	andeq	sp, r1, r0, lsr #22
   1440c:	andeq	sp, r1, ip, asr #22
   14410:	strdeq	r0, [r3], -r4
   14414:	andeq	sp, r1, r4, ror fp
   14418:	andeq	sp, r1, r8, asr fp
   1441c:	andeq	sp, r1, ip, lsr #22
   14420:	ldr	r3, [pc, #960]	; 147e8 <__assert_fail@plt+0x2ee0>
   14424:	push	{r7, lr}
   14428:	sub	sp, sp, #64	; 0x40
   1442c:	ldr	r3, [r3]
   14430:	subs	r4, r0, #0
   14434:	str	r3, [sp, #60]	; 0x3c
   14438:	beq	14474 <__assert_fail@plt+0x2b6c>
   1443c:	ldr	r3, [pc, #936]	; 147ec <__assert_fail@plt+0x2ee4>
   14440:	mov	r2, #5
   14444:	ldr	r1, [pc, #932]	; 147f0 <__assert_fail@plt+0x2ee8>
   14448:	mov	r0, #0
   1444c:	ldr	r5, [r3]
   14450:	bl	11584 <dcgettext@plt>
   14454:	ldr	r3, [pc, #920]	; 147f4 <__assert_fail@plt+0x2eec>
   14458:	mov	r1, #1
   1445c:	ldr	r3, [r3]
   14460:	mov	r2, r0
   14464:	mov	r0, r5
   14468:	bl	117ac <__fprintf_chk@plt>
   1446c:	mov	r0, r4
   14470:	bl	11710 <exit@plt>
   14474:	mov	r2, #5
   14478:	ldr	r1, [pc, #888]	; 147f8 <__assert_fail@plt+0x2ef0>
   1447c:	bl	11584 <dcgettext@plt>
   14480:	ldr	r3, [pc, #876]	; 147f4 <__assert_fail@plt+0x2eec>
   14484:	ldr	r5, [pc, #880]	; 147fc <__assert_fail@plt+0x2ef4>
   14488:	ldr	r2, [r3]
   1448c:	mov	r1, r0
   14490:	mov	r0, #1
   14494:	bl	11794 <__printf_chk@plt>
   14498:	mov	r2, #5
   1449c:	ldr	r1, [pc, #860]	; 14800 <__assert_fail@plt+0x2ef8>
   144a0:	mov	r0, r4
   144a4:	bl	11584 <dcgettext@plt>
   144a8:	ldr	r1, [r5]
   144ac:	bl	114c4 <fputs_unlocked@plt>
   144b0:	mov	r2, #5
   144b4:	ldr	r1, [pc, #840]	; 14804 <__assert_fail@plt+0x2efc>
   144b8:	mov	r0, r4
   144bc:	bl	11584 <dcgettext@plt>
   144c0:	ldr	r1, [r5]
   144c4:	bl	114c4 <fputs_unlocked@plt>
   144c8:	mov	r2, #5
   144cc:	ldr	r1, [pc, #820]	; 14808 <__assert_fail@plt+0x2f00>
   144d0:	mov	r0, r4
   144d4:	bl	11584 <dcgettext@plt>
   144d8:	ldr	r1, [r5]
   144dc:	bl	114c4 <fputs_unlocked@plt>
   144e0:	mov	r2, #5
   144e4:	ldr	r1, [pc, #800]	; 1480c <__assert_fail@plt+0x2f04>
   144e8:	mov	r0, r4
   144ec:	bl	11584 <dcgettext@plt>
   144f0:	ldr	r1, [r5]
   144f4:	bl	114c4 <fputs_unlocked@plt>
   144f8:	mov	r2, #5
   144fc:	ldr	r1, [pc, #780]	; 14810 <__assert_fail@plt+0x2f08>
   14500:	mov	r0, r4
   14504:	bl	11584 <dcgettext@plt>
   14508:	ldr	r1, [r5]
   1450c:	bl	114c4 <fputs_unlocked@plt>
   14510:	mov	r2, #5
   14514:	ldr	r1, [pc, #760]	; 14814 <__assert_fail@plt+0x2f0c>
   14518:	mov	r0, r4
   1451c:	bl	11584 <dcgettext@plt>
   14520:	ldr	r1, [r5]
   14524:	bl	114c4 <fputs_unlocked@plt>
   14528:	mov	r2, #5
   1452c:	ldr	r1, [pc, #740]	; 14818 <__assert_fail@plt+0x2f10>
   14530:	mov	r0, r4
   14534:	bl	11584 <dcgettext@plt>
   14538:	ldr	r1, [r5]
   1453c:	bl	114c4 <fputs_unlocked@plt>
   14540:	mov	r2, #5
   14544:	ldr	r1, [pc, #720]	; 1481c <__assert_fail@plt+0x2f14>
   14548:	mov	r0, r4
   1454c:	bl	11584 <dcgettext@plt>
   14550:	ldr	r1, [r5]
   14554:	bl	114c4 <fputs_unlocked@plt>
   14558:	mov	r2, #5
   1455c:	ldr	r1, [pc, #700]	; 14820 <__assert_fail@plt+0x2f18>
   14560:	mov	r0, r4
   14564:	bl	11584 <dcgettext@plt>
   14568:	ldr	r1, [r5]
   1456c:	bl	114c4 <fputs_unlocked@plt>
   14570:	mov	r2, #5
   14574:	ldr	r1, [pc, #680]	; 14824 <__assert_fail@plt+0x2f1c>
   14578:	mov	r0, r4
   1457c:	bl	11584 <dcgettext@plt>
   14580:	ldr	r1, [r5]
   14584:	bl	114c4 <fputs_unlocked@plt>
   14588:	mov	r2, #5
   1458c:	ldr	r1, [pc, #660]	; 14828 <__assert_fail@plt+0x2f20>
   14590:	mov	r0, r4
   14594:	bl	11584 <dcgettext@plt>
   14598:	ldr	r1, [r5]
   1459c:	bl	114c4 <fputs_unlocked@plt>
   145a0:	mov	r2, #5
   145a4:	ldr	r1, [pc, #640]	; 1482c <__assert_fail@plt+0x2f24>
   145a8:	mov	r0, r4
   145ac:	bl	11584 <dcgettext@plt>
   145b0:	ldr	r1, [r5]
   145b4:	bl	114c4 <fputs_unlocked@plt>
   145b8:	mov	r2, #5
   145bc:	ldr	r1, [pc, #620]	; 14830 <__assert_fail@plt+0x2f28>
   145c0:	mov	r0, r4
   145c4:	bl	11584 <dcgettext@plt>
   145c8:	ldr	r2, [pc, #612]	; 14834 <__assert_fail@plt+0x2f2c>
   145cc:	mov	r1, r0
   145d0:	mov	r0, #1
   145d4:	bl	11794 <__printf_chk@plt>
   145d8:	mov	r2, #5
   145dc:	ldr	r1, [pc, #596]	; 14838 <__assert_fail@plt+0x2f30>
   145e0:	mov	r0, r4
   145e4:	bl	11584 <dcgettext@plt>
   145e8:	ldr	r2, [pc, #588]	; 1483c <__assert_fail@plt+0x2f34>
   145ec:	mov	r1, r0
   145f0:	mov	r0, #1
   145f4:	bl	11794 <__printf_chk@plt>
   145f8:	mov	r2, #5
   145fc:	ldr	r1, [pc, #572]	; 14840 <__assert_fail@plt+0x2f38>
   14600:	mov	r0, r4
   14604:	bl	11584 <dcgettext@plt>
   14608:	ldr	r2, [pc, #564]	; 14844 <__assert_fail@plt+0x2f3c>
   1460c:	mov	r1, r0
   14610:	mov	r0, #1
   14614:	bl	11794 <__printf_chk@plt>
   14618:	ldr	lr, [pc, #552]	; 14848 <__assert_fail@plt+0x2f40>
   1461c:	add	ip, sp, #4
   14620:	ldm	lr!, {r0, r1, r2, r3}
   14624:	stmia	ip!, {r0, r1, r2, r3}
   14628:	ldm	lr!, {r0, r1, r2, r3}
   1462c:	ldr	r6, [sp, #4]
   14630:	stmia	ip!, {r0, r1, r2, r3}
   14634:	cmp	r6, #0
   14638:	ldm	lr!, {r0, r1, r2, r3}
   1463c:	addeq	r5, sp, #4
   14640:	stmia	ip!, {r0, r1, r2, r3}
   14644:	ldm	lr, {r0, r1}
   14648:	stm	ip, {r0, r1}
   1464c:	beq	1467c <__assert_fail@plt+0x2d74>
   14650:	ldr	r7, [pc, #492]	; 14844 <__assert_fail@plt+0x2f3c>
   14654:	add	r5, sp, #4
   14658:	b	14668 <__assert_fail@plt+0x2d60>
   1465c:	ldr	r6, [r5, #8]!
   14660:	cmp	r6, #0
   14664:	beq	1467c <__assert_fail@plt+0x2d74>
   14668:	mov	r1, r6
   1466c:	mov	r0, r7
   14670:	bl	1150c <strcmp@plt>
   14674:	cmp	r0, #0
   14678:	bne	1465c <__assert_fail@plt+0x2d54>
   1467c:	ldr	r5, [r5, #4]
   14680:	mov	r2, #5
   14684:	cmp	r5, #0
   14688:	ldr	r1, [pc, #444]	; 1484c <__assert_fail@plt+0x2f44>
   1468c:	beq	14734 <__assert_fail@plt+0x2e2c>
   14690:	mov	r0, #0
   14694:	bl	11584 <dcgettext@plt>
   14698:	ldr	r3, [pc, #432]	; 14850 <__assert_fail@plt+0x2f48>
   1469c:	ldr	r2, [pc, #432]	; 14854 <__assert_fail@plt+0x2f4c>
   146a0:	mov	r1, r0
   146a4:	mov	r0, #1
   146a8:	bl	11794 <__printf_chk@plt>
   146ac:	mov	r1, #0
   146b0:	mov	r0, #5
   146b4:	bl	11800 <setlocale@plt>
   146b8:	cmp	r0, #0
   146bc:	ldreq	r6, [pc, #384]	; 14844 <__assert_fail@plt+0x2f3c>
   146c0:	beq	146dc <__assert_fail@plt+0x2dd4>
   146c4:	mov	r2, #3
   146c8:	ldr	r1, [pc, #392]	; 14858 <__assert_fail@plt+0x2f50>
   146cc:	bl	118b4 <strncmp@plt>
   146d0:	ldr	r6, [pc, #364]	; 14844 <__assert_fail@plt+0x2f3c>
   146d4:	cmp	r0, #0
   146d8:	bne	147c4 <__assert_fail@plt+0x2ebc>
   146dc:	mov	r2, #5
   146e0:	ldr	r1, [pc, #372]	; 1485c <__assert_fail@plt+0x2f54>
   146e4:	mov	r0, #0
   146e8:	bl	11584 <dcgettext@plt>
   146ec:	ldr	r3, [pc, #336]	; 14844 <__assert_fail@plt+0x2f3c>
   146f0:	ldr	r2, [pc, #344]	; 14850 <__assert_fail@plt+0x2f48>
   146f4:	mov	r1, r0
   146f8:	mov	r0, #1
   146fc:	bl	11794 <__printf_chk@plt>
   14700:	mov	r2, #5
   14704:	ldr	r1, [pc, #340]	; 14860 <__assert_fail@plt+0x2f58>
   14708:	mov	r0, #0
   1470c:	bl	11584 <dcgettext@plt>
   14710:	ldr	r2, [pc, #332]	; 14864 <__assert_fail@plt+0x2f5c>
   14714:	cmp	r5, r6
   14718:	ldr	r3, [pc, #328]	; 14868 <__assert_fail@plt+0x2f60>
   1471c:	movne	r3, r2
   14720:	mov	r1, r0
   14724:	mov	r2, r5
   14728:	mov	r0, #1
   1472c:	bl	11794 <__printf_chk@plt>
   14730:	b	1446c <__assert_fail@plt+0x2b64>
   14734:	mov	r0, r5
   14738:	bl	11584 <dcgettext@plt>
   1473c:	ldr	r3, [pc, #268]	; 14850 <__assert_fail@plt+0x2f48>
   14740:	ldr	r2, [pc, #268]	; 14854 <__assert_fail@plt+0x2f4c>
   14744:	mov	r1, r0
   14748:	mov	r0, #1
   1474c:	bl	11794 <__printf_chk@plt>
   14750:	mov	r1, r5
   14754:	mov	r0, #5
   14758:	bl	11800 <setlocale@plt>
   1475c:	cmp	r0, #0
   14760:	beq	14778 <__assert_fail@plt+0x2e70>
   14764:	mov	r2, #3
   14768:	ldr	r1, [pc, #232]	; 14858 <__assert_fail@plt+0x2f50>
   1476c:	bl	118b4 <strncmp@plt>
   14770:	cmp	r0, #0
   14774:	bne	147bc <__assert_fail@plt+0x2eb4>
   14778:	mov	r2, #5
   1477c:	ldr	r1, [pc, #216]	; 1485c <__assert_fail@plt+0x2f54>
   14780:	mov	r0, #0
   14784:	bl	11584 <dcgettext@plt>
   14788:	ldr	r3, [pc, #180]	; 14844 <__assert_fail@plt+0x2f3c>
   1478c:	ldr	r2, [pc, #188]	; 14850 <__assert_fail@plt+0x2f48>
   14790:	mov	r5, r3
   14794:	mov	r1, r0
   14798:	mov	r0, #1
   1479c:	bl	11794 <__printf_chk@plt>
   147a0:	ldr	r1, [pc, #184]	; 14860 <__assert_fail@plt+0x2f58>
   147a4:	mov	r2, #5
   147a8:	mov	r0, #0
   147ac:	bl	11584 <dcgettext@plt>
   147b0:	ldr	r3, [pc, #176]	; 14868 <__assert_fail@plt+0x2f60>
   147b4:	mov	r1, r0
   147b8:	b	14724 <__assert_fail@plt+0x2e1c>
   147bc:	ldr	r6, [pc, #128]	; 14844 <__assert_fail@plt+0x2f3c>
   147c0:	mov	r5, r6
   147c4:	mov	r2, #5
   147c8:	ldr	r1, [pc, #156]	; 1486c <__assert_fail@plt+0x2f64>
   147cc:	mov	r0, #0
   147d0:	bl	11584 <dcgettext@plt>
   147d4:	ldr	r2, [pc, #104]	; 14844 <__assert_fail@plt+0x2f3c>
   147d8:	mov	r1, r0
   147dc:	mov	r0, #1
   147e0:	bl	11794 <__printf_chk@plt>
   147e4:	b	146dc <__assert_fail@plt+0x2dd4>
   147e8:	andeq	pc, r2, r0, lsl #30
   147ec:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   147f0:	andeq	sp, r1, r4, lsr #23
   147f4:	andeq	r0, r3, r0, lsl #5
   147f8:	andeq	sp, r1, ip, asr #23
   147fc:	strdeq	r0, [r3], -r4
   14800:	andeq	sp, r1, ip, ror #23
   14804:	andeq	sp, r1, r4, lsl ip
   14808:	andeq	sp, r1, r0, ror #24
   1480c:	ldrdeq	sp, [r1], -r0
   14810:	andeq	sp, r1, r4, ror lr
   14814:	andeq	sp, r1, r4, lsr #29
   14818:	ldrdeq	sp, [r1], -ip
   1481c:	andeq	lr, r1, r0, lsl r0
   14820:	andeq	lr, r1, ip, lsr #1
   14824:	andeq	lr, r1, r4, lsl r2
   14828:	strdeq	lr, [r1], -r4
   1482c:	andeq	lr, r1, r4, ror #9
   14830:	andeq	lr, r1, r0, ror #11
   14834:	andeq	sp, r1, r0, asr r3
   14838:	andeq	lr, r1, r8, lsl r6
   1483c:	andeq	sp, r1, ip, lsr #6
   14840:	andeq	lr, r1, ip, asr r6
   14844:	muleq	r1, ip, fp
   14848:			; <UNDEFINED> instruction: 0x0001d3b8
   1484c:	andeq	lr, r1, ip, lsl r7
   14850:	andeq	lr, r1, r4, lsr r7
   14854:	andeq	lr, r1, ip, asr r7
   14858:	andeq	lr, r1, ip, ror #14
   1485c:			; <UNDEFINED> instruction: 0x0001e7b8
   14860:	ldrdeq	lr, [r1], -r8
   14864:	andeq	sp, r1, r4, asr #21
   14868:	andeq	lr, r1, r8, asr #18
   1486c:	andeq	lr, r1, r0, ror r7
   14870:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14874:	add	fp, sp, #28
   14878:	ldr	r7, [pc, #648]	; 14b08 <__assert_fail@plt+0x3200>
   1487c:	sub	sp, sp, #224	; 0xe0
   14880:	ldr	r3, [r7]
   14884:	mov	r8, r0
   14888:	sub	r0, fp, #252	; 0xfc
   1488c:	mov	r9, r1
   14890:	str	r3, [fp, #-32]	; 0xffffffe0
   14894:	bl	18ef4 <__assert_fail@plt+0x75ec>
   14898:	mov	r4, r0
   1489c:	bl	11764 <__errno_location@plt>
   148a0:	cmp	r4, #0
   148a4:	mov	r6, r0
   148a8:	bne	14ab4 <__assert_fail@plt+0x31ac>
   148ac:	ldr	r3, [r9, #16]
   148b0:	and	r3, r3, #61440	; 0xf000
   148b4:	cmp	r3, #16384	; 0x4000
   148b8:	beq	14a0c <__assert_fail@plt+0x3104>
   148bc:	mov	r0, r8
   148c0:	bl	14ff8 <__assert_fail@plt+0x36f0>
   148c4:	mov	r5, r0
   148c8:	bl	11728 <strlen@plt>
   148cc:	mov	r1, r5
   148d0:	add	r3, r0, #8
   148d4:	bic	r3, r3, #7
   148d8:	sub	sp, sp, r3
   148dc:	add	r2, r0, #1
   148e0:	mov	r0, sp
   148e4:	bl	11560 <memcpy@plt>
   148e8:	mov	r8, r0
   148ec:	mov	r0, r5
   148f0:	bl	11548 <free@plt>
   148f4:	mov	r0, r8
   148f8:	bl	115cc <chdir@plt>
   148fc:	cmp	r0, #0
   14900:	blt	14a30 <__assert_fail@plt+0x3128>
   14904:	sub	r5, fp, #244	; 0xf4
   14908:	mov	r2, r5
   1490c:	ldr	r1, [pc, #504]	; 14b0c <__assert_fail@plt+0x3204>
   14910:	mov	r0, #3
   14914:	bl	1189c <__xstat64@plt>
   14918:	cmp	r0, #0
   1491c:	blt	14a6c <__assert_fail@plt+0x3164>
   14920:	ldr	r4, [pc, #488]	; 14b10 <__assert_fail@plt+0x3208>
   14924:	b	14970 <__assert_fail@plt+0x3068>
   14928:	ldrd	r0, [fp, #-140]	; 0xffffff74
   1492c:	ldrd	r2, [fp, #-244]	; 0xffffff0c
   14930:	cmp	r1, r3
   14934:	cmpeq	r0, r2
   14938:	bne	149c8 <__assert_fail@plt+0x30c0>
   1493c:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   14940:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   14944:	cmp	r1, r3
   14948:	cmpeq	r0, r2
   1494c:	beq	149c8 <__assert_fail@plt+0x30c0>
   14950:	mov	r0, r4
   14954:	bl	115cc <chdir@plt>
   14958:	cmp	r0, #0
   1495c:	blt	14aa8 <__assert_fail@plt+0x31a0>
   14960:	mov	r2, #104	; 0x68
   14964:	sub	r1, fp, #140	; 0x8c
   14968:	mov	r0, r5
   1496c:	bl	11560 <memcpy@plt>
   14970:	sub	r2, fp, #140	; 0x8c
   14974:	mov	r1, r4
   14978:	mov	r0, #3
   1497c:	bl	1189c <__xstat64@plt>
   14980:	cmp	r0, #0
   14984:	bge	14928 <__assert_fail@plt+0x3020>
   14988:	ldr	r1, [pc, #388]	; 14b14 <__assert_fail@plt+0x320c>
   1498c:	mov	r2, #5
   14990:	mov	r0, #0
   14994:	ldr	r4, [r6]
   14998:	bl	11584 <dcgettext@plt>
   1499c:	ldr	r1, [pc, #364]	; 14b10 <__assert_fail@plt+0x3208>
   149a0:	mov	r5, r0
   149a4:	mov	r0, #4
   149a8:	bl	18c34 <__assert_fail@plt+0x732c>
   149ac:	mov	r1, r4
   149b0:	mov	r2, r5
   149b4:	mov	r4, #0
   149b8:	mov	r3, r0
   149bc:	mov	r0, #0
   149c0:	bl	1165c <error@plt>
   149c4:	b	149d0 <__assert_fail@plt+0x30c8>
   149c8:	bl	19768 <__assert_fail@plt+0x7e60>
   149cc:	mov	r4, r0
   149d0:	sub	r0, fp, #252	; 0xfc
   149d4:	ldr	r5, [r6]
   149d8:	bl	18f48 <__assert_fail@plt+0x7640>
   149dc:	cmp	r0, #0
   149e0:	bne	14ae4 <__assert_fail@plt+0x31dc>
   149e4:	sub	r0, fp, #252	; 0xfc
   149e8:	bl	18f64 <__assert_fail@plt+0x765c>
   149ec:	str	r5, [r6]
   149f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   149f4:	ldr	r3, [r7]
   149f8:	mov	r0, r4
   149fc:	cmp	r2, r3
   14a00:	bne	14ae0 <__assert_fail@plt+0x31d8>
   14a04:	sub	sp, fp, #28
   14a08:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14a0c:	sub	r5, fp, #244	; 0xf4
   14a10:	mov	r1, r9
   14a14:	mov	r2, #104	; 0x68
   14a18:	mov	r0, r5
   14a1c:	bl	11560 <memcpy@plt>
   14a20:	mov	r0, r8
   14a24:	bl	115cc <chdir@plt>
   14a28:	cmp	r0, #0
   14a2c:	bge	14920 <__assert_fail@plt+0x3018>
   14a30:	mov	r2, #5
   14a34:	ldr	r1, [pc, #220]	; 14b18 <__assert_fail@plt+0x3210>
   14a38:	mov	r0, r4
   14a3c:	ldr	r5, [r6]
   14a40:	bl	11584 <dcgettext@plt>
   14a44:	mov	r1, r8
   14a48:	mov	r6, r0
   14a4c:	mov	r0, #4
   14a50:	bl	18c34 <__assert_fail@plt+0x732c>
   14a54:	mov	r2, r6
   14a58:	mov	r1, r5
   14a5c:	mov	r3, r0
   14a60:	mov	r0, r4
   14a64:	bl	1165c <error@plt>
   14a68:	b	149f0 <__assert_fail@plt+0x30e8>
   14a6c:	mov	r2, #5
   14a70:	ldr	r1, [pc, #164]	; 14b1c <__assert_fail@plt+0x3214>
   14a74:	mov	r0, r4
   14a78:	ldr	r5, [r6]
   14a7c:	bl	11584 <dcgettext@plt>
   14a80:	mov	r1, r8
   14a84:	mov	r9, r0
   14a88:	mov	r0, #4
   14a8c:	bl	18c34 <__assert_fail@plt+0x732c>
   14a90:	mov	r2, r9
   14a94:	mov	r1, r5
   14a98:	mov	r3, r0
   14a9c:	mov	r0, r4
   14aa0:	bl	1165c <error@plt>
   14aa4:	b	149d0 <__assert_fail@plt+0x30c8>
   14aa8:	mov	r2, #5
   14aac:	ldr	r1, [pc, #100]	; 14b18 <__assert_fail@plt+0x3210>
   14ab0:	b	14990 <__assert_fail@plt+0x3088>
   14ab4:	ldr	r4, [r0]
   14ab8:	mov	r2, #5
   14abc:	ldr	r1, [pc, #92]	; 14b20 <__assert_fail@plt+0x3218>
   14ac0:	mov	r0, #0
   14ac4:	bl	11584 <dcgettext@plt>
   14ac8:	mov	r1, r4
   14acc:	mov	r4, #0
   14ad0:	mov	r2, r0
   14ad4:	mov	r0, #0
   14ad8:	bl	1165c <error@plt>
   14adc:	b	149f0 <__assert_fail@plt+0x30e8>
   14ae0:	bl	11590 <__stack_chk_fail@plt>
   14ae4:	mov	r2, #5
   14ae8:	ldr	r1, [pc, #52]	; 14b24 <__assert_fail@plt+0x321c>
   14aec:	mov	r0, #0
   14af0:	ldr	r4, [r6]
   14af4:	bl	11584 <dcgettext@plt>
   14af8:	mov	r1, r4
   14afc:	mov	r2, r0
   14b00:	mov	r0, #1
   14b04:	bl	1165c <error@plt>
   14b08:	andeq	pc, r2, r0, lsl #30
   14b0c:	andeq	lr, r1, ip, lsl #16
   14b10:	andeq	lr, r1, r4, asr sl
   14b14:	andeq	lr, r1, r0, lsr r9
   14b18:	andeq	lr, r1, ip, lsl #20
   14b1c:	andeq	lr, r1, ip, lsr #20
   14b20:	andeq	lr, r1, ip, ror #19
   14b24:	andeq	lr, r1, r8, asr sl
   14b28:	cmp	r1, #1024	; 0x400
   14b2c:	push	{r4, r5, r6, r7, r8, lr}
   14b30:	mov	r7, r0
   14b34:	ldrhi	r4, [pc, #156]	; 14bd8 <__assert_fail@plt+0x32d0>
   14b38:	addls	r4, r1, #1
   14b3c:	mov	r0, r4
   14b40:	bl	11698 <malloc@plt>
   14b44:	mov	r2, r4
   14b48:	subs	r5, r0, #0
   14b4c:	mov	r1, r5
   14b50:	mov	r0, r7
   14b54:	beq	14b9c <__assert_fail@plt+0x3294>
   14b58:	bl	115fc <readlink@plt>
   14b5c:	subs	r6, r0, #0
   14b60:	blt	14ba4 <__assert_fail@plt+0x329c>
   14b64:	cmp	r4, r6
   14b68:	mov	r0, r5
   14b6c:	bhi	14bc8 <__assert_fail@plt+0x32c0>
   14b70:	bl	11548 <free@plt>
   14b74:	cmn	r4, #-1073741823	; 0xc0000001
   14b78:	lslls	r4, r4, #1
   14b7c:	bls	14b3c <__assert_fail@plt+0x3234>
   14b80:	cmn	r4, #-2147483646	; 0x80000002
   14b84:	mvn	r4, #-2147483648	; 0x80000000
   14b88:	bls	14b3c <__assert_fail@plt+0x3234>
   14b8c:	bl	11764 <__errno_location@plt>
   14b90:	mov	r5, #0
   14b94:	mov	r3, #12
   14b98:	str	r3, [r0]
   14b9c:	mov	r0, r5
   14ba0:	pop	{r4, r5, r6, r7, r8, pc}
   14ba4:	bl	11764 <__errno_location@plt>
   14ba8:	ldr	r3, [r0]
   14bac:	cmp	r3, #34	; 0x22
   14bb0:	beq	14b64 <__assert_fail@plt+0x325c>
   14bb4:	mov	r0, r5
   14bb8:	mov	r5, #0
   14bbc:	bl	11548 <free@plt>
   14bc0:	mov	r0, r5
   14bc4:	pop	{r4, r5, r6, r7, r8, pc}
   14bc8:	mov	r3, #0
   14bcc:	strb	r3, [r5, r6]
   14bd0:	mov	r0, r5
   14bd4:	pop	{r4, r5, r6, r7, r8, pc}
   14bd8:	andeq	r0, r0, r1, lsl #8
   14bdc:	mov	r0, #1
   14be0:	b	14420 <__assert_fail@plt+0x2b18>
   14be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14be8:	mov	r5, r1
   14bec:	sub	sp, sp, #12
   14bf0:	mov	r4, r2
   14bf4:	str	r2, [sp]
   14bf8:	mov	r7, r3
   14bfc:	mov	sl, r0
   14c00:	bl	11728 <strlen@plt>
   14c04:	ldr	fp, [r5]
   14c08:	cmp	fp, #0
   14c0c:	beq	14cd0 <__assert_fail@plt+0x33c8>
   14c10:	mov	r6, #0
   14c14:	mov	r8, r0
   14c18:	str	r6, [sp, #4]
   14c1c:	mvn	r9, #0
   14c20:	b	14c4c <__assert_fail@plt+0x3344>
   14c24:	bl	11578 <memcmp@plt>
   14c28:	ldr	r3, [sp, #4]
   14c2c:	cmp	r0, #0
   14c30:	movne	r3, #1
   14c34:	str	r3, [sp, #4]
   14c38:	ldr	fp, [r5, #4]!
   14c3c:	add	r6, r6, #1
   14c40:	cmp	fp, #0
   14c44:	add	r4, r4, r7
   14c48:	beq	14ca8 <__assert_fail@plt+0x33a0>
   14c4c:	mov	r2, r8
   14c50:	mov	r1, sl
   14c54:	mov	r0, fp
   14c58:	bl	118b4 <strncmp@plt>
   14c5c:	cmp	r0, #0
   14c60:	mov	r0, fp
   14c64:	bne	14c38 <__assert_fail@plt+0x3330>
   14c68:	bl	11728 <strlen@plt>
   14c6c:	ldr	r3, [sp]
   14c70:	mov	r2, r7
   14c74:	mov	r1, r4
   14c78:	cmp	r0, r8
   14c7c:	mla	r0, r7, r9, r3
   14c80:	beq	14cc0 <__assert_fail@plt+0x33b8>
   14c84:	cmn	r9, #1
   14c88:	moveq	r9, r6
   14c8c:	beq	14c38 <__assert_fail@plt+0x3330>
   14c90:	ldr	r3, [sp]
   14c94:	cmp	r3, #0
   14c98:	bne	14c24 <__assert_fail@plt+0x331c>
   14c9c:	mov	r3, #1
   14ca0:	str	r3, [sp, #4]
   14ca4:	b	14c38 <__assert_fail@plt+0x3330>
   14ca8:	ldr	r3, [sp, #4]
   14cac:	cmp	r3, #0
   14cb0:	mvnne	r9, #1
   14cb4:	mov	r0, r9
   14cb8:	add	sp, sp, #12
   14cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cc0:	mov	r9, r6
   14cc4:	mov	r0, r9
   14cc8:	add	sp, sp, #12
   14ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd0:	mvn	r9, #0
   14cd4:	b	14cb4 <__assert_fail@plt+0x33ac>
   14cd8:	cmn	r2, #1
   14cdc:	push	{r4, r5, r6, lr}
   14ce0:	mov	r2, #5
   14ce4:	sub	sp, sp, #8
   14ce8:	mov	r5, r1
   14cec:	mov	r6, r0
   14cf0:	ldreq	r1, [pc, #76]	; 14d44 <__assert_fail@plt+0x343c>
   14cf4:	ldrne	r1, [pc, #76]	; 14d48 <__assert_fail@plt+0x3440>
   14cf8:	mov	r0, #0
   14cfc:	bl	11584 <dcgettext@plt>
   14d00:	mov	r2, r5
   14d04:	mov	r1, #8
   14d08:	mov	r4, r0
   14d0c:	mov	r0, #0
   14d10:	bl	18b80 <__assert_fail@plt+0x7278>
   14d14:	mov	r1, r6
   14d18:	mov	r5, r0
   14d1c:	mov	r0, #1
   14d20:	bl	18ecc <__assert_fail@plt+0x75c4>
   14d24:	mov	r1, #0
   14d28:	mov	r3, r5
   14d2c:	mov	r2, r4
   14d30:	str	r0, [sp]
   14d34:	mov	r0, r1
   14d38:	bl	1165c <error@plt>
   14d3c:	add	sp, sp, #8
   14d40:	pop	{r4, r5, r6, pc}
   14d44:	muleq	r1, r0, sl
   14d48:	andeq	lr, r1, ip, lsr #21
   14d4c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d50:	mov	r6, r0
   14d54:	ldr	sl, [pc, #224]	; 14e3c <__assert_fail@plt+0x3534>
   14d58:	mov	r4, r1
   14d5c:	mov	r7, r2
   14d60:	ldr	r1, [pc, #216]	; 14e40 <__assert_fail@plt+0x3538>
   14d64:	mov	r2, #5
   14d68:	mov	r0, #0
   14d6c:	bl	11584 <dcgettext@plt>
   14d70:	ldr	r1, [sl]
   14d74:	bl	114c4 <fputs_unlocked@plt>
   14d78:	ldr	fp, [r6]
   14d7c:	cmp	fp, #0
   14d80:	movne	r9, #0
   14d84:	movne	r5, r9
   14d88:	bne	14dc4 <__assert_fail@plt+0x34bc>
   14d8c:	b	14e08 <__assert_fail@plt+0x3500>
   14d90:	mov	r0, fp
   14d94:	bl	18edc <__assert_fail@plt+0x75d4>
   14d98:	ldr	r2, [pc, #164]	; 14e44 <__assert_fail@plt+0x353c>
   14d9c:	mov	r1, #1
   14da0:	mov	r9, r4
   14da4:	mov	r3, r0
   14da8:	mov	r0, r8
   14dac:	bl	117ac <__fprintf_chk@plt>
   14db0:	ldr	fp, [r6, #4]!
   14db4:	add	r5, r5, #1
   14db8:	cmp	fp, #0
   14dbc:	add	r4, r4, r7
   14dc0:	beq	14e08 <__assert_fail@plt+0x3500>
   14dc4:	cmp	r5, #0
   14dc8:	mov	r1, r4
   14dcc:	mov	r2, r7
   14dd0:	mov	r0, r9
   14dd4:	ldr	r8, [sl]
   14dd8:	beq	14d90 <__assert_fail@plt+0x3488>
   14ddc:	bl	11578 <memcmp@plt>
   14de0:	cmp	r0, #0
   14de4:	bne	14d90 <__assert_fail@plt+0x3488>
   14de8:	mov	r0, fp
   14dec:	bl	18edc <__assert_fail@plt+0x75d4>
   14df0:	ldr	r2, [pc, #80]	; 14e48 <__assert_fail@plt+0x3540>
   14df4:	mov	r1, #1
   14df8:	mov	r3, r0
   14dfc:	mov	r0, r8
   14e00:	bl	117ac <__fprintf_chk@plt>
   14e04:	b	14db0 <__assert_fail@plt+0x34a8>
   14e08:	ldr	r0, [sl]
   14e0c:	ldr	r3, [r0, #20]
   14e10:	ldr	r2, [r0, #24]
   14e14:	cmp	r3, r2
   14e18:	bcs	14e30 <__assert_fail@plt+0x3528>
   14e1c:	add	r1, r3, #1
   14e20:	mov	r2, #10
   14e24:	str	r1, [r0, #20]
   14e28:	strb	r2, [r3]
   14e2c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e30:	mov	r1, #10
   14e34:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e38:	b	117f4 <__overflow@plt>
   14e3c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   14e40:	andeq	lr, r1, ip, asr #21
   14e44:	andeq	lr, r1, r4, ror #21
   14e48:	andeq	lr, r1, ip, ror #21
   14e4c:	push	{r4, r5, r6, r7, r8, lr}
   14e50:	mov	r6, r1
   14e54:	mov	r4, r2
   14e58:	mov	r5, r3
   14e5c:	mov	r7, r0
   14e60:	ldr	r3, [sp, #24]
   14e64:	mov	r2, r5
   14e68:	mov	r1, r4
   14e6c:	mov	r0, r6
   14e70:	bl	14be4 <__assert_fail@plt+0x32dc>
   14e74:	cmp	r0, #0
   14e78:	popge	{r4, r5, r6, r7, r8, pc}
   14e7c:	mov	r2, r0
   14e80:	mov	r1, r6
   14e84:	mov	r0, r7
   14e88:	bl	14cd8 <__assert_fail@plt+0x33d0>
   14e8c:	mov	r0, r4
   14e90:	ldr	r2, [sp, #24]
   14e94:	mov	r1, r5
   14e98:	bl	14d4c <__assert_fail@plt+0x3444>
   14e9c:	ldr	r3, [sp, #28]
   14ea0:	blx	r3
   14ea4:	mvn	r0, #0
   14ea8:	pop	{r4, r5, r6, r7, r8, pc}
   14eac:	push	{r4, r5, r6, r7, r8, lr}
   14eb0:	ldr	r7, [r1]
   14eb4:	cmp	r7, #0
   14eb8:	beq	14ef8 <__assert_fail@plt+0x35f0>
   14ebc:	mov	r6, r3
   14ec0:	mov	r8, r0
   14ec4:	mov	r4, r2
   14ec8:	mov	r5, r1
   14ecc:	b	14edc <__assert_fail@plt+0x35d4>
   14ed0:	ldr	r7, [r5, #4]!
   14ed4:	cmp	r7, #0
   14ed8:	beq	14ef8 <__assert_fail@plt+0x35f0>
   14edc:	mov	r1, r4
   14ee0:	mov	r2, r6
   14ee4:	mov	r0, r8
   14ee8:	bl	11578 <memcmp@plt>
   14eec:	add	r4, r4, r6
   14ef0:	cmp	r0, #0
   14ef4:	bne	14ed0 <__assert_fail@plt+0x35c8>
   14ef8:	mov	r0, r7
   14efc:	pop	{r4, r5, r6, r7, r8, pc}
   14f00:	ldr	r3, [pc, #4]	; 14f0c <__assert_fail@plt+0x3604>
   14f04:	str	r0, [r3]
   14f08:	bx	lr
   14f0c:	andeq	r0, r3, r8, ror r2
   14f10:	ldr	r3, [pc, #4]	; 14f1c <__assert_fail@plt+0x3614>
   14f14:	strb	r0, [r3, #4]
   14f18:	bx	lr
   14f1c:	andeq	r0, r3, r8, ror r2
   14f20:	ldr	r3, [pc, #180]	; 14fdc <__assert_fail@plt+0x36d4>
   14f24:	push	{r4, r5, r6, lr}
   14f28:	sub	sp, sp, #8
   14f2c:	ldr	r0, [r3]
   14f30:	bl	1a924 <__assert_fail@plt+0x901c>
   14f34:	cmp	r0, #0
   14f38:	beq	14f60 <__assert_fail@plt+0x3658>
   14f3c:	bl	11764 <__errno_location@plt>
   14f40:	ldr	r5, [pc, #152]	; 14fe0 <__assert_fail@plt+0x36d8>
   14f44:	ldrb	r3, [r5, #4]
   14f48:	cmp	r3, #0
   14f4c:	mov	r4, r0
   14f50:	beq	14f7c <__assert_fail@plt+0x3674>
   14f54:	ldr	r3, [r0]
   14f58:	cmp	r3, #32
   14f5c:	bne	14f7c <__assert_fail@plt+0x3674>
   14f60:	ldr	r3, [pc, #124]	; 14fe4 <__assert_fail@plt+0x36dc>
   14f64:	ldr	r0, [r3]
   14f68:	bl	1a924 <__assert_fail@plt+0x901c>
   14f6c:	cmp	r0, #0
   14f70:	bne	14fbc <__assert_fail@plt+0x36b4>
   14f74:	add	sp, sp, #8
   14f78:	pop	{r4, r5, r6, pc}
   14f7c:	mov	r2, #5
   14f80:	ldr	r1, [pc, #96]	; 14fe8 <__assert_fail@plt+0x36e0>
   14f84:	mov	r0, #0
   14f88:	bl	11584 <dcgettext@plt>
   14f8c:	mov	r6, r0
   14f90:	ldr	r0, [r5]
   14f94:	cmp	r0, #0
   14f98:	beq	14fc8 <__assert_fail@plt+0x36c0>
   14f9c:	ldr	r4, [r4]
   14fa0:	bl	18cfc <__assert_fail@plt+0x73f4>
   14fa4:	mov	r1, r4
   14fa8:	str	r6, [sp]
   14fac:	ldr	r2, [pc, #56]	; 14fec <__assert_fail@plt+0x36e4>
   14fb0:	mov	r3, r0
   14fb4:	mov	r0, #0
   14fb8:	bl	1165c <error@plt>
   14fbc:	ldr	r3, [pc, #44]	; 14ff0 <__assert_fail@plt+0x36e8>
   14fc0:	ldr	r0, [r3]
   14fc4:	bl	11554 <_exit@plt>
   14fc8:	mov	r3, r6
   14fcc:	ldr	r1, [r4]
   14fd0:	ldr	r2, [pc, #28]	; 14ff4 <__assert_fail@plt+0x36ec>
   14fd4:	bl	1165c <error@plt>
   14fd8:	b	14fbc <__assert_fail@plt+0x36b4>
   14fdc:	strdeq	r0, [r3], -r4
   14fe0:	andeq	r0, r3, r8, ror r2
   14fe4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   14fe8:	strdeq	lr, [r1], -r4
   14fec:	andeq	lr, r1, r0, lsl #22
   14ff0:	muleq	r3, r8, r1
   14ff4:	andeq	lr, r1, r4, lsl r6
   14ff8:	push	{r4, lr}
   14ffc:	bl	15074 <__assert_fail@plt+0x376c>
   15000:	cmp	r0, #0
   15004:	popne	{r4, pc}
   15008:	bl	19728 <__assert_fail@plt+0x7e20>
   1500c:	push	{r4, r5, r6, lr}
   15010:	mov	r4, r0
   15014:	ldrb	ip, [r0]
   15018:	sub	r5, ip, #47	; 0x2f
   1501c:	bl	150cc <__assert_fail@plt+0x37c4>
   15020:	clz	r5, r5
   15024:	lsr	r5, r5, #5
   15028:	sub	r0, r0, r4
   1502c:	cmp	r0, r5
   15030:	popls	{r4, r5, r6, pc}
   15034:	add	r3, r4, r0
   15038:	ldrb	r3, [r3, #-1]
   1503c:	cmp	r3, #47	; 0x2f
   15040:	popne	{r4, r5, r6, pc}
   15044:	sub	r0, r0, #2
   15048:	sub	ip, r4, #1
   1504c:	add	r3, r4, r0
   15050:	add	ip, ip, r5
   15054:	rsb	r2, r4, #1
   15058:	cmp	r3, ip
   1505c:	add	r0, r2, r3
   15060:	popeq	{r4, r5, r6, pc}
   15064:	ldrb	r1, [r3], #-1
   15068:	cmp	r1, #47	; 0x2f
   1506c:	beq	15058 <__assert_fail@plt+0x3750>
   15070:	pop	{r4, r5, r6, pc}
   15074:	push	{r4, r5, r6, lr}
   15078:	mov	r6, r0
   1507c:	bl	1500c <__assert_fail@plt+0x3704>
   15080:	add	r3, r0, #1
   15084:	mov	r4, r0
   15088:	cmp	r0, #0
   1508c:	movne	r0, r3
   15090:	addeq	r0, r3, #1
   15094:	bl	11698 <malloc@plt>
   15098:	subs	r5, r0, #0
   1509c:	beq	150c4 <__assert_fail@plt+0x37bc>
   150a0:	mov	r2, r4
   150a4:	mov	r1, r6
   150a8:	bl	11560 <memcpy@plt>
   150ac:	cmp	r4, #0
   150b0:	moveq	r3, #46	; 0x2e
   150b4:	moveq	r4, #1
   150b8:	strbeq	r3, [r5]
   150bc:	mov	r3, #0
   150c0:	strb	r3, [r5, r4]
   150c4:	mov	r0, r5
   150c8:	pop	{r4, r5, r6, pc}
   150cc:	ldrb	r3, [r0]
   150d0:	cmp	r3, #47	; 0x2f
   150d4:	bne	150e4 <__assert_fail@plt+0x37dc>
   150d8:	ldrb	r3, [r0, #1]!
   150dc:	cmp	r3, #47	; 0x2f
   150e0:	beq	150d8 <__assert_fail@plt+0x37d0>
   150e4:	cmp	r3, #0
   150e8:	bxeq	lr
   150ec:	mov	r2, r0
   150f0:	mov	r1, #0
   150f4:	cmp	r3, #47	; 0x2f
   150f8:	moveq	r1, #1
   150fc:	beq	1510c <__assert_fail@plt+0x3804>
   15100:	cmp	r1, #0
   15104:	movne	r0, r2
   15108:	movne	r1, #0
   1510c:	ldrb	r3, [r2, #1]!
   15110:	cmp	r3, #0
   15114:	bne	150f4 <__assert_fail@plt+0x37ec>
   15118:	bx	lr
   1511c:	push	{r4, lr}
   15120:	mov	r4, r0
   15124:	bl	11728 <strlen@plt>
   15128:	cmp	r0, #1
   1512c:	popls	{r4, pc}
   15130:	add	r2, r4, r0
   15134:	mov	r3, r0
   15138:	ldrb	r2, [r2, #-1]
   1513c:	cmp	r2, #47	; 0x2f
   15140:	subeq	r3, r0, #2
   15144:	addeq	r3, r4, r3
   15148:	rsbeq	r1, r4, #1
   1514c:	popne	{r4, pc}
   15150:	cmp	r3, r4
   15154:	add	r0, r1, r3
   15158:	popeq	{r4, pc}
   1515c:	ldrb	r2, [r3], #-1
   15160:	cmp	r2, #47	; 0x2f
   15164:	popne	{r4, pc}
   15168:	b	15150 <__assert_fail@plt+0x3848>
   1516c:	ldr	r3, [r0, #16]
   15170:	and	r3, r3, #61440	; 0xf000
   15174:	cmp	r3, #32768	; 0x8000
   15178:	beq	151bc <__assert_fail@plt+0x38b4>
   1517c:	cmp	r3, #16384	; 0x4000
   15180:	mov	r2, #5
   15184:	beq	151f0 <__assert_fail@plt+0x38e8>
   15188:	cmp	r3, #40960	; 0xa000
   1518c:	beq	15208 <__assert_fail@plt+0x3900>
   15190:	cmp	r3, #24576	; 0x6000
   15194:	beq	15214 <__assert_fail@plt+0x390c>
   15198:	cmp	r3, #8192	; 0x2000
   1519c:	beq	151e4 <__assert_fail@plt+0x38dc>
   151a0:	cmp	r3, #4096	; 0x1000
   151a4:	beq	15220 <__assert_fail@plt+0x3918>
   151a8:	cmp	r3, #49152	; 0xc000
   151ac:	beq	151fc <__assert_fail@plt+0x38f4>
   151b0:	ldr	r1, [pc, #116]	; 1522c <__assert_fail@plt+0x3924>
   151b4:	mov	r0, #0
   151b8:	b	11584 <dcgettext@plt>
   151bc:	ldrd	r2, [r0, #48]	; 0x30
   151c0:	orrs	r3, r2, r3
   151c4:	mov	r2, #5
   151c8:	bne	151d8 <__assert_fail@plt+0x38d0>
   151cc:	ldr	r1, [pc, #92]	; 15230 <__assert_fail@plt+0x3928>
   151d0:	mov	r0, #0
   151d4:	b	11584 <dcgettext@plt>
   151d8:	ldr	r1, [pc, #84]	; 15234 <__assert_fail@plt+0x392c>
   151dc:	mov	r0, #0
   151e0:	b	11584 <dcgettext@plt>
   151e4:	ldr	r1, [pc, #76]	; 15238 <__assert_fail@plt+0x3930>
   151e8:	mov	r0, #0
   151ec:	b	11584 <dcgettext@plt>
   151f0:	ldr	r1, [pc, #68]	; 1523c <__assert_fail@plt+0x3934>
   151f4:	mov	r0, #0
   151f8:	b	11584 <dcgettext@plt>
   151fc:	ldr	r1, [pc, #60]	; 15240 <__assert_fail@plt+0x3938>
   15200:	mov	r0, #0
   15204:	b	11584 <dcgettext@plt>
   15208:	ldr	r1, [pc, #52]	; 15244 <__assert_fail@plt+0x393c>
   1520c:	mov	r0, #0
   15210:	b	11584 <dcgettext@plt>
   15214:	ldr	r1, [pc, #44]	; 15248 <__assert_fail@plt+0x3940>
   15218:	mov	r0, #0
   1521c:	b	11584 <dcgettext@plt>
   15220:	ldr	r1, [pc, #36]	; 1524c <__assert_fail@plt+0x3944>
   15224:	mov	r0, #0
   15228:	b	11584 <dcgettext@plt>
   1522c:	andeq	lr, r1, r8, ror fp
   15230:	andeq	lr, r1, r8, lsl #22
   15234:	andeq	lr, r1, ip, lsl fp
   15238:	andeq	lr, r1, r0, asr fp
   1523c:	andeq	lr, r1, ip, ror sl
   15240:	andeq	lr, r1, r0, ror fp
   15244:	andeq	lr, r1, ip, lsr #22
   15248:	andeq	lr, r1, ip, lsr fp
   1524c:	andeq	lr, r1, r8, ror #22
   15250:	and	r3, r0, #61440	; 0xf000
   15254:	cmp	r3, #32768	; 0x8000
   15258:	moveq	ip, #45	; 0x2d
   1525c:	beq	152a8 <__assert_fail@plt+0x39a0>
   15260:	cmp	r3, #16384	; 0x4000
   15264:	moveq	ip, #100	; 0x64
   15268:	beq	152a8 <__assert_fail@plt+0x39a0>
   1526c:	cmp	r3, #24576	; 0x6000
   15270:	moveq	ip, #98	; 0x62
   15274:	beq	152a8 <__assert_fail@plt+0x39a0>
   15278:	cmp	r3, #8192	; 0x2000
   1527c:	moveq	ip, #99	; 0x63
   15280:	beq	152a8 <__assert_fail@plt+0x39a0>
   15284:	cmp	r3, #40960	; 0xa000
   15288:	moveq	ip, #108	; 0x6c
   1528c:	beq	152a8 <__assert_fail@plt+0x39a0>
   15290:	cmp	r3, #4096	; 0x1000
   15294:	moveq	ip, #112	; 0x70
   15298:	beq	152a8 <__assert_fail@plt+0x39a0>
   1529c:	cmp	r3, #49152	; 0xc000
   152a0:	moveq	ip, #115	; 0x73
   152a4:	movne	ip, #63	; 0x3f
   152a8:	tst	r0, #256	; 0x100
   152ac:	movne	r2, #114	; 0x72
   152b0:	moveq	r2, #45	; 0x2d
   152b4:	tst	r0, #128	; 0x80
   152b8:	movne	r3, #119	; 0x77
   152bc:	moveq	r3, #45	; 0x2d
   152c0:	tst	r0, #2048	; 0x800
   152c4:	strb	r3, [r1, #2]
   152c8:	strb	ip, [r1]
   152cc:	strb	r2, [r1, #1]
   152d0:	and	r3, r0, #64	; 0x40
   152d4:	beq	15374 <__assert_fail@plt+0x3a6c>
   152d8:	cmp	r3, #0
   152dc:	movne	ip, #115	; 0x73
   152e0:	moveq	ip, #83	; 0x53
   152e4:	tst	r0, #32
   152e8:	movne	r2, #114	; 0x72
   152ec:	moveq	r2, #45	; 0x2d
   152f0:	tst	r0, #16
   152f4:	movne	r3, #119	; 0x77
   152f8:	moveq	r3, #45	; 0x2d
   152fc:	tst	r0, #1024	; 0x400
   15300:	strb	r3, [r1, #5]
   15304:	strb	ip, [r1, #3]
   15308:	strb	r2, [r1, #4]
   1530c:	and	r3, r0, #8
   15310:	beq	15384 <__assert_fail@plt+0x3a7c>
   15314:	cmp	r3, #0
   15318:	movne	ip, #115	; 0x73
   1531c:	moveq	ip, #83	; 0x53
   15320:	tst	r0, #4
   15324:	movne	r2, #114	; 0x72
   15328:	moveq	r2, #45	; 0x2d
   1532c:	tst	r0, #2
   15330:	movne	r3, #119	; 0x77
   15334:	moveq	r3, #45	; 0x2d
   15338:	tst	r0, #512	; 0x200
   1533c:	strb	ip, [r1, #6]
   15340:	strb	r2, [r1, #7]
   15344:	strb	r3, [r1, #8]
   15348:	and	r0, r0, #1
   1534c:	beq	15394 <__assert_fail@plt+0x3a8c>
   15350:	cmp	r0, #0
   15354:	movne	r0, #116	; 0x74
   15358:	moveq	r0, #84	; 0x54
   1535c:	mov	r2, #32
   15360:	mov	r3, #0
   15364:	strb	r0, [r1, #9]
   15368:	strb	r2, [r1, #10]
   1536c:	strb	r3, [r1, #11]
   15370:	bx	lr
   15374:	cmp	r3, #0
   15378:	movne	ip, #120	; 0x78
   1537c:	moveq	ip, #45	; 0x2d
   15380:	b	152e4 <__assert_fail@plt+0x39dc>
   15384:	cmp	r3, #0
   15388:	movne	ip, #120	; 0x78
   1538c:	moveq	ip, #45	; 0x2d
   15390:	b	15320 <__assert_fail@plt+0x3a18>
   15394:	cmp	r0, #0
   15398:	movne	r0, #120	; 0x78
   1539c:	moveq	r0, #45	; 0x2d
   153a0:	b	1535c <__assert_fail@plt+0x3a54>
   153a4:	ldr	r0, [r0, #16]
   153a8:	b	15250 <__assert_fail@plt+0x3948>
   153ac:	cmp	r0, #0
   153b0:	sbcs	r3, r1, #0
   153b4:	mov	r3, #0
   153b8:	push	{r4, r5, r6, r7, r8, lr}
   153bc:	mov	r4, r0
   153c0:	mov	r5, r1
   153c4:	strb	r3, [r2, #20]
   153c8:	add	r6, r2, #20
   153cc:	blt	1541c <__assert_fail@plt+0x3b14>
   153d0:	mov	r0, r4
   153d4:	mov	r1, r5
   153d8:	mov	r2, #10
   153dc:	mov	r3, #0
   153e0:	bl	1d048 <__assert_fail@plt+0xb740>
   153e4:	mov	r0, r4
   153e8:	mov	r1, r5
   153ec:	mov	r3, #0
   153f0:	add	r2, r2, #48	; 0x30
   153f4:	strb	r2, [r6, #-1]!
   153f8:	mov	r2, #10
   153fc:	bl	1d048 <__assert_fail@plt+0xb740>
   15400:	mov	r4, r0
   15404:	mov	r5, r1
   15408:	orrs	r3, r4, r5
   1540c:	bne	153d0 <__assert_fail@plt+0x3ac8>
   15410:	mov	r0, r6
   15414:	pop	{r4, r5, r6, r7, r8, pc}
   15418:	mov	r6, r7
   1541c:	mov	r0, r4
   15420:	mov	r1, r5
   15424:	mov	r2, #10
   15428:	mov	r3, #0
   1542c:	bl	1d048 <__assert_fail@plt+0xb740>
   15430:	mov	r0, r4
   15434:	mov	r1, r5
   15438:	mov	r3, #0
   1543c:	sub	r7, r6, #1
   15440:	rsb	r2, r2, #48	; 0x30
   15444:	strb	r2, [r6, #-1]
   15448:	mov	r2, #10
   1544c:	bl	1d048 <__assert_fail@plt+0xb740>
   15450:	mov	r4, r0
   15454:	mov	r5, r1
   15458:	orrs	r3, r4, r5
   1545c:	bne	15418 <__assert_fail@plt+0x3b10>
   15460:	mov	r3, #45	; 0x2d
   15464:	sub	r6, r6, #2
   15468:	strb	r3, [r7, #-1]
   1546c:	mov	r0, r6
   15470:	pop	{r4, r5, r6, r7, r8, pc}
   15474:	push	{r4, r5, r6, lr}
   15478:	subs	r4, r2, #0
   1547c:	mov	r6, r0
   15480:	beq	154ac <__assert_fail@plt+0x3ba4>
   15484:	mov	r5, r1
   15488:	bl	116c8 <__ctype_tolower_loc@plt>
   1548c:	add	r3, r5, r4
   15490:	add	r2, r6, r4
   15494:	ldrb	lr, [r3, #-1]!
   15498:	ldr	ip, [r0]
   1549c:	cmp	r5, r3
   154a0:	ldr	ip, [ip, lr, lsl #2]
   154a4:	strb	ip, [r2, #-1]!
   154a8:	bne	15494 <__assert_fail@plt+0x3b8c>
   154ac:	mov	r0, r6
   154b0:	pop	{r4, r5, r6, pc}
   154b4:	push	{r4, r5, r6, lr}
   154b8:	subs	r4, r2, #0
   154bc:	mov	r6, r0
   154c0:	beq	154ec <__assert_fail@plt+0x3be4>
   154c4:	mov	r5, r1
   154c8:	bl	116d4 <__ctype_toupper_loc@plt>
   154cc:	add	r3, r5, r4
   154d0:	add	r2, r6, r4
   154d4:	ldrb	lr, [r3, #-1]!
   154d8:	ldr	ip, [r0]
   154dc:	cmp	r5, r3
   154e0:	ldr	ip, [ip, lr, lsl #2]
   154e4:	strb	ip, [r2, #-1]!
   154e8:	bne	154d4 <__assert_fail@plt+0x3bcc>
   154ec:	mov	r0, r6
   154f0:	pop	{r4, r5, r6, pc}
   154f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f8:	sub	sp, sp, #1136	; 0x470
   154fc:	sub	sp, sp, #12
   15500:	ldr	r7, [r3, #40]	; 0x28
   15504:	ldr	r8, [r3, #8]
   15508:	str	r3, [sp, #28]
   1550c:	ldr	r3, [pc, #4012]	; 164c0 <__assert_fail@plt+0x4bb8>
   15510:	ldr	ip, [pc, #4012]	; 164c4 <__assert_fail@plt+0x4bbc>
   15514:	cmp	r7, #0
   15518:	ldr	r3, [r3]
   1551c:	moveq	r7, ip
   15520:	str	r3, [sp, #1140]	; 0x474
   15524:	ldrb	r3, [sp, #1184]	; 0x4a0
   15528:	cmp	r8, #12
   1552c:	mov	r9, r0
   15530:	str	r3, [sp, #24]
   15534:	ldr	r3, [sp, #1188]	; 0x4a4
   15538:	str	r1, [sp, #16]
   1553c:	str	r3, [sp, #36]	; 0x24
   15540:	ldr	r3, [sp, #1192]	; 0x4a8
   15544:	mov	r5, r2
   15548:	str	r3, [sp, #32]
   1554c:	subgt	r8, r8, #12
   15550:	bgt	1555c <__assert_fail@plt+0x3c54>
   15554:	cmp	r8, #0
   15558:	moveq	r8, #12
   1555c:	ldrb	r3, [r5]
   15560:	cmp	r3, #0
   15564:	beq	16860 <__assert_fail@plt+0x4f58>
   15568:	mov	fp, #0
   1556c:	str	r8, [sp, #44]	; 0x2c
   15570:	str	r7, [sp, #40]	; 0x28
   15574:	cmp	r3, #37	; 0x25
   15578:	beq	155f8 <__assert_fail@plt+0x3cf0>
   1557c:	ldr	r2, [sp, #16]
   15580:	sub	r2, r2, fp
   15584:	cmp	r2, #1
   15588:	bls	155d0 <__assert_fail@plt+0x3cc8>
   1558c:	add	fp, fp, #1
   15590:	cmp	r9, #0
   15594:	strbne	r3, [r9], #1
   15598:	ldrb	r3, [r5, #1]
   1559c:	add	r5, r5, #1
   155a0:	cmp	r3, #0
   155a4:	bne	15574 <__assert_fail@plt+0x3c6c>
   155a8:	ldr	r3, [sp, #16]
   155ac:	cmp	r9, #0
   155b0:	cmpne	r3, #0
   155b4:	movne	r3, #0
   155b8:	strbne	r3, [r9]
   155bc:	b	155d4 <__assert_fail@plt+0x3ccc>
   155c0:	cmp	sl, #95	; 0x5f
   155c4:	beq	168ec <__assert_fail@plt+0x4fe4>
   155c8:	cmp	r3, r2
   155cc:	bcc	16114 <__assert_fail@plt+0x480c>
   155d0:	mov	fp, #0
   155d4:	ldr	r3, [pc, #3812]	; 164c0 <__assert_fail@plt+0x4bb8>
   155d8:	ldr	r2, [sp, #1140]	; 0x474
   155dc:	mov	r0, fp
   155e0:	ldr	r3, [r3]
   155e4:	cmp	r2, r3
   155e8:	bne	16bf8 <__assert_fail@plt+0x52f0>
   155ec:	add	sp, sp, #1136	; 0x470
   155f0:	add	sp, sp, #12
   155f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155f8:	mov	r8, #0
   155fc:	ldr	r3, [sp, #24]
   15600:	mov	sl, r8
   15604:	str	r3, [sp, #20]
   15608:	ldrb	r4, [r5, #1]!
   1560c:	cmp	r4, #48	; 0x30
   15610:	mov	r7, r4
   15614:	beq	15864 <__assert_fail@plt+0x3f5c>
   15618:	bhi	1584c <__assert_fail@plt+0x3f44>
   1561c:	cmp	r4, #35	; 0x23
   15620:	moveq	r8, #1
   15624:	beq	15608 <__assert_fail@plt+0x3d00>
   15628:	cmp	r4, #45	; 0x2d
   1562c:	beq	15864 <__assert_fail@plt+0x3f5c>
   15630:	sub	r3, r4, #48	; 0x30
   15634:	cmp	r3, #9
   15638:	mvnhi	r6, #0
   1563c:	bls	15878 <__assert_fail@plt+0x3f70>
   15640:	cmp	r4, #69	; 0x45
   15644:	beq	1586c <__assert_fail@plt+0x3f64>
   15648:	cmp	r4, #79	; 0x4f
   1564c:	movne	r7, #0
   15650:	beq	1586c <__assert_fail@plt+0x3f64>
   15654:	cmp	r4, #122	; 0x7a
   15658:	ldrls	pc, [pc, r4, lsl #2]
   1565c:	b	15c34 <__assert_fail@plt+0x432c>
   15660:	andeq	r6, r1, r4, lsr r4
   15664:	andeq	r5, r1, r4, lsr ip
   15668:	andeq	r5, r1, r4, lsr ip
   1566c:	andeq	r5, r1, r4, lsr ip
   15670:	andeq	r5, r1, r4, lsr ip
   15674:	andeq	r5, r1, r4, lsr ip
   15678:	andeq	r5, r1, r4, lsr ip
   1567c:	andeq	r5, r1, r4, lsr ip
   15680:	andeq	r5, r1, r4, lsr ip
   15684:	andeq	r5, r1, r4, lsr ip
   15688:	andeq	r5, r1, r4, lsr ip
   1568c:	andeq	r5, r1, r4, lsr ip
   15690:	andeq	r5, r1, r4, lsr ip
   15694:	andeq	r5, r1, r4, lsr ip
   15698:	andeq	r5, r1, r4, lsr ip
   1569c:	andeq	r5, r1, r4, lsr ip
   156a0:	andeq	r5, r1, r4, lsr ip
   156a4:	andeq	r5, r1, r4, lsr ip
   156a8:	andeq	r5, r1, r4, lsr ip
   156ac:	andeq	r5, r1, r4, lsr ip
   156b0:	andeq	r5, r1, r4, lsr ip
   156b4:	andeq	r5, r1, r4, lsr ip
   156b8:	andeq	r5, r1, r4, lsr ip
   156bc:	andeq	r5, r1, r4, lsr ip
   156c0:	andeq	r5, r1, r4, lsr ip
   156c4:	andeq	r5, r1, r4, lsr ip
   156c8:	andeq	r5, r1, r4, lsr ip
   156cc:	andeq	r5, r1, r4, lsr ip
   156d0:	andeq	r5, r1, r4, lsr ip
   156d4:	andeq	r5, r1, r4, lsr ip
   156d8:	andeq	r5, r1, r4, lsr ip
   156dc:	andeq	r5, r1, r4, lsr ip
   156e0:	andeq	r5, r1, r4, lsr ip
   156e4:	andeq	r5, r1, r4, lsr ip
   156e8:	andeq	r5, r1, r4, lsr ip
   156ec:	andeq	r5, r1, r4, lsr ip
   156f0:	andeq	r5, r1, r4, lsr ip
   156f4:	andeq	r6, r1, r8, ror #12
   156f8:	andeq	r5, r1, r4, lsr ip
   156fc:	andeq	r5, r1, r4, lsr ip
   15700:	andeq	r5, r1, r4, lsr ip
   15704:	andeq	r5, r1, r4, lsr ip
   15708:	andeq	r5, r1, r4, lsr ip
   1570c:	andeq	r5, r1, r4, lsr ip
   15710:	andeq	r5, r1, r4, lsr ip
   15714:	andeq	r5, r1, r4, lsr ip
   15718:	andeq	r5, r1, r4, lsr ip
   1571c:	andeq	r5, r1, r4, lsr ip
   15720:	andeq	r5, r1, r4, lsr ip
   15724:	andeq	r5, r1, r4, lsr ip
   15728:	andeq	r5, r1, r4, lsr ip
   1572c:	andeq	r5, r1, r4, lsr ip
   15730:	andeq	r5, r1, r4, lsr ip
   15734:	andeq	r5, r1, r4, lsr ip
   15738:	andeq	r5, r1, r4, lsr ip
   1573c:	andeq	r5, r1, r4, lsr ip
   15740:	andeq	r5, r1, r4, lsr ip
   15744:	andeq	r5, r1, r4, lsr ip
   15748:	andeq	r6, r1, ip, asr #13
   1574c:	andeq	r5, r1, r4, lsr ip
   15750:	andeq	r5, r1, r4, lsr ip
   15754:	andeq	r5, r1, r4, lsr ip
   15758:	andeq	r5, r1, r4, lsr ip
   1575c:	andeq	r5, r1, r4, lsr ip
   15760:	andeq	r5, r1, r4, lsr ip
   15764:	andeq	r5, r1, ip, ror #19
   15768:	andeq	r6, r1, ip, lsl #11
   1576c:			; <UNDEFINED> instruction: 0x000165b0
   15770:	andeq	r6, r1, ip, asr #4
   15774:	andeq	r5, r1, r4, lsr ip
   15778:	andeq	r6, r1, r0, ror #4
   1577c:	andeq	r6, r1, r4, ror r2
   15780:	ldrdeq	r6, [r1], -ip
   15784:	andeq	r6, r1, r8, ror #8
   15788:	andeq	r5, r1, r4, lsr ip
   1578c:	andeq	r5, r1, r4, lsr ip
   15790:	andeq	r5, r1, r4, lsr ip
   15794:	strdeq	r6, [r1], -r8
   15798:	andeq	r6, r1, r4, lsl r4
   1579c:	andeq	r5, r1, r4, lsr ip
   157a0:	strdeq	r6, [r1], -r4
   157a4:	andeq	r5, r1, r4, lsr ip
   157a8:	andeq	r5, r1, r8, ror #28
   157ac:	andeq	r5, r1, r8, lsr pc
   157b0:	andeq	r6, r1, r0, lsl #14
   157b4:	andeq	r5, r1, r4, asr pc
   157b8:	andeq	r6, r1, r4, ror r2
   157bc:	strdeq	r6, [r1], -r8
   157c0:	andeq	r5, r1, r8, ror #17
   157c4:	andeq	r5, r1, ip, lsl #31
   157c8:	andeq	r6, r1, r8, asr r1
   157cc:	andeq	r5, r1, r4, lsr ip
   157d0:	andeq	r5, r1, r4, lsr ip
   157d4:	andeq	r5, r1, r4, lsr ip
   157d8:	andeq	r5, r1, r4, lsr ip
   157dc:	andeq	r5, r1, r4, lsr ip
   157e0:	andeq	r5, r1, r4, lsr ip
   157e4:	andeq	r5, r1, ip, ror #19
   157e8:	andeq	r5, r1, ip, lsl ip
   157ec:	andeq	r5, r1, r8, ror #17
   157f0:	andeq	r5, r1, ip, asr #27
   157f4:	andeq	r5, r1, r8, ror #27
   157f8:	andeq	r5, r1, r4, lsr ip
   157fc:	andeq	r6, r1, r4, ror r2
   15800:	andeq	r5, r1, ip, lsl ip
   15804:	andeq	r5, r1, r4, lsr ip
   15808:	andeq	r5, r1, r0, lsl lr
   1580c:	andeq	r5, r1, r4, asr #28
   15810:	andeq	r5, r1, r8, asr lr
   15814:	andeq	r6, r1, r4, lsr r6
   15818:	andeq	r5, r1, ip, ror #26
   1581c:	andeq	r5, r1, r4, lsr ip
   15820:	andeq	r6, r1, r0, ror #10
   15824:	andeq	r6, r1, r0, lsl #9
   15828:	strdeq	r5, [r1], -r0
   1582c:	muleq	r1, ip, sl
   15830:	andeq	r6, r1, r4, lsl #10
   15834:	andeq	r5, r1, r0, lsr #20
   15838:	andeq	r5, r1, r4, lsr ip
   1583c:	andeq	r6, r1, r8, lsl r6
   15840:	andeq	r5, r1, r8, ror #17
   15844:	andeq	r5, r1, r0, ror #23
   15848:	andeq	r5, r1, r8, asr #25
   1584c:	cmp	r4, #94	; 0x5e
   15850:	moveq	r3, #1
   15854:	streq	r3, [sp, #20]
   15858:	beq	15608 <__assert_fail@plt+0x3d00>
   1585c:	cmp	r4, #95	; 0x5f
   15860:	bne	15630 <__assert_fail@plt+0x3d28>
   15864:	mov	sl, r4
   15868:	b	15608 <__assert_fail@plt+0x3d00>
   1586c:	ldrb	r4, [r5, #1]
   15870:	add	r5, r5, #1
   15874:	b	15654 <__assert_fail@plt+0x3d4c>
   15878:	ldr	r0, [pc, #3144]	; 164c8 <__assert_fail@plt+0x4bc0>
   1587c:	mov	r6, #0
   15880:	mov	r3, r5
   15884:	cmp	r6, r0
   15888:	ldrb	r4, [r3, #1]!
   1588c:	sub	r2, r4, #48	; 0x30
   15890:	bgt	158c4 <__assert_fail@plt+0x3fbc>
   15894:	ldrb	r1, [r5]
   15898:	beq	158bc <__assert_fail@plt+0x3fb4>
   1589c:	add	r6, r6, r6, lsl #2
   158a0:	sub	r1, r1, #48	; 0x30
   158a4:	add	r6, r1, r6, lsl #1
   158a8:	mov	r5, r3
   158ac:	cmp	r2, #9
   158b0:	bls	15880 <__assert_fail@plt+0x3f78>
   158b4:	mov	r7, r4
   158b8:	b	15640 <__assert_fail@plt+0x3d38>
   158bc:	cmp	r1, #55	; 0x37
   158c0:	bls	1589c <__assert_fail@plt+0x3f94>
   158c4:	cmp	r2, #9
   158c8:	ldrbls	r4, [r5, #2]!
   158cc:	mvnls	r6, #-2147483648	; 0x80000000
   158d0:	subls	r2, r4, #48	; 0x30
   158d4:	bls	158ac <__assert_fail@plt+0x3fa4>
   158d8:	mov	r5, r3
   158dc:	mov	r7, r4
   158e0:	mvn	r6, #-2147483648	; 0x80000000
   158e4:	b	15640 <__assert_fail@plt+0x3d38>
   158e8:	cmp	r7, #79	; 0x4f
   158ec:	beq	15c34 <__assert_fail@plt+0x432c>
   158f0:	mov	r3, #0
   158f4:	str	r3, [sp, #52]	; 0x34
   158f8:	add	r8, sp, #120	; 0x78
   158fc:	ldr	r3, [pc, #3016]	; 164cc <__assert_fail@plt+0x4bc4>
   15900:	cmp	r7, #0
   15904:	strh	r3, [r8, #-12]
   15908:	subeq	r0, r8, #10
   1590c:	bne	16bfc <__assert_fail@plt+0x52f4>
   15910:	mov	ip, #0
   15914:	strb	r4, [r0]
   15918:	strb	ip, [r0, #1]
   1591c:	ldr	r3, [sp, #28]
   15920:	sub	r2, r8, #12
   15924:	mov	r1, #1024	; 0x400
   15928:	sub	r0, r8, #4
   1592c:	bl	116b0 <strftime@plt>
   15930:	cmp	r0, #0
   15934:	beq	15598 <__assert_fail@plt+0x3c90>
   15938:	bic	r2, r6, r6, asr #31
   1593c:	sub	r4, r0, #1
   15940:	ldr	r1, [sp, #16]
   15944:	cmp	r4, r2
   15948:	movcs	r3, r4
   1594c:	movcc	r3, r2
   15950:	sub	r1, r1, fp
   15954:	cmp	r1, r3
   15958:	bls	155d0 <__assert_fail@plt+0x3cc8>
   1595c:	cmp	r9, #0
   15960:	beq	159e4 <__assert_fail@plt+0x40dc>
   15964:	cmp	r4, r2
   15968:	movcs	r2, #0
   1596c:	movcc	r2, #1
   15970:	cmp	r7, #0
   15974:	moveq	r7, r2
   15978:	movne	r7, #0
   1597c:	cmp	r7, #0
   15980:	beq	159b0 <__assert_fail@plt+0x40a8>
   15984:	cmp	sl, #48	; 0x30
   15988:	sub	r2, r6, r4
   1598c:	moveq	r0, r9
   15990:	movne	r0, r9
   15994:	moveq	r1, sl
   15998:	movne	r1, #32
   1599c:	str	r3, [sp, #48]	; 0x30
   159a0:	add	r7, r9, r2
   159a4:	bl	11788 <memset@plt>
   159a8:	ldr	r3, [sp, #48]	; 0x30
   159ac:	mov	r9, r7
   159b0:	ldr	r2, [sp, #52]	; 0x34
   159b4:	cmp	r2, #0
   159b8:	bne	16844 <__assert_fail@plt+0x4f3c>
   159bc:	ldr	r2, [sp, #20]
   159c0:	sub	r1, r8, #3
   159c4:	cmp	r2, #0
   159c8:	str	r3, [sp, #20]
   159cc:	mov	r2, r4
   159d0:	mov	r0, r9
   159d4:	beq	16838 <__assert_fail@plt+0x4f30>
   159d8:	bl	154b4 <__assert_fail@plt+0x3bac>
   159dc:	ldr	r3, [sp, #20]
   159e0:	add	r9, r9, r4
   159e4:	add	fp, fp, r3
   159e8:	b	15598 <__assert_fail@plt+0x3c90>
   159ec:	cmp	r7, #0
   159f0:	bne	15c34 <__assert_fail@plt+0x432c>
   159f4:	cmp	r8, #0
   159f8:	ldr	r3, [sp, #20]
   159fc:	movne	r3, r8
   15a00:	str	r3, [sp, #20]
   15a04:	add	r8, sp, #120	; 0x78
   15a08:	ldr	r3, [pc, #2748]	; 164cc <__assert_fail@plt+0x4bc4>
   15a0c:	mov	r7, #0
   15a10:	str	r7, [sp, #52]	; 0x34
   15a14:	strh	r3, [r8, #-12]
   15a18:	sub	r0, r8, #10
   15a1c:	b	15910 <__assert_fail@plt+0x4008>
   15a20:	ldr	r3, [sp, #28]
   15a24:	mov	r2, #1
   15a28:	str	r2, [sp, #48]	; 0x30
   15a2c:	ldr	r3, [r3, #24]
   15a30:	ldr	r2, [pc, #2756]	; 164fc <__assert_fail@plt+0x4bf4>
   15a34:	add	r3, r3, #6
   15a38:	smull	r1, r2, r2, r3
   15a3c:	add	r1, r2, r3
   15a40:	asr	r2, r3, #31
   15a44:	rsb	r2, r2, r1, asr #2
   15a48:	rsb	r2, r2, r2, lsl #3
   15a4c:	sub	r3, r3, r2
   15a50:	add	r3, r3, #1
   15a54:	lsr	lr, r3, #31
   15a58:	mov	r0, #0
   15a5c:	str	r0, [sp, #52]	; 0x34
   15a60:	eor	r2, lr, #1
   15a64:	cmp	r7, #79	; 0x4f
   15a68:	movne	r2, #0
   15a6c:	andeq	r2, r2, #1
   15a70:	cmp	r2, #0
   15a74:	beq	15fcc <__assert_fail@plt+0x46c4>
   15a78:	add	r8, sp, #120	; 0x78
   15a7c:	ldr	r3, [pc, #2632]	; 164cc <__assert_fail@plt+0x4bc4>
   15a80:	mov	r2, #0
   15a84:	str	r2, [sp, #52]	; 0x34
   15a88:	strh	r3, [r8, #-12]
   15a8c:	strb	r7, [sp, #110]	; 0x6e
   15a90:	sub	r0, r8, #9
   15a94:	ldr	r7, [sp, #48]	; 0x30
   15a98:	b	15910 <__assert_fail@plt+0x4008>
   15a9c:	ldr	lr, [sp, #28]
   15aa0:	add	ip, sp, #64	; 0x40
   15aa4:	add	r8, sp, #120	; 0x78
   15aa8:	ldm	lr!, {r0, r1, r2, r3}
   15aac:	add	r4, r8, #10
   15ab0:	stmia	ip!, {r0, r1, r2, r3}
   15ab4:	ldm	lr!, {r0, r1, r2, r3}
   15ab8:	stmia	ip!, {r0, r1, r2, r3}
   15abc:	ldm	lr, {r0, r1, r2}
   15ac0:	stm	ip, {r0, r1, r2}
   15ac4:	add	r1, sp, #64	; 0x40
   15ac8:	ldr	r0, [sp, #32]
   15acc:	bl	1a7d8 <__assert_fail@plt+0x8ed0>
   15ad0:	mov	r1, r0
   15ad4:	ldr	r3, [pc, #2588]	; 164f8 <__assert_fail@plt+0x4bf0>
   15ad8:	cmp	r0, #0
   15adc:	smull	r2, r3, r3, r1
   15ae0:	asr	r2, r1, #31
   15ae4:	rsb	r2, r2, r3, asr #2
   15ae8:	add	r3, r2, r2, lsl #2
   15aec:	sub	r3, r1, r3, lsl #1
   15af0:	mov	r1, r2
   15af4:	uxtb	r3, r3
   15af8:	rsblt	r3, r3, #48	; 0x30
   15afc:	addge	r3, r3, #48	; 0x30
   15b00:	cmp	r2, #0
   15b04:	uxtb	r3, r3
   15b08:	strb	r3, [r4, #-1]!
   15b0c:	bne	15ad4 <__assert_fail@plt+0x41cc>
   15b10:	cmp	r6, #1
   15b14:	movge	r3, r6
   15b18:	movlt	r3, #1
   15b1c:	cmp	r0, #0
   15b20:	blt	167b0 <__assert_fail@plt+0x4ea8>
   15b24:	ldr	r2, [sp, #16]
   15b28:	add	r7, r8, #10
   15b2c:	cmp	sl, #45	; 0x2d
   15b30:	sub	r7, r7, r4
   15b34:	sub	r2, r2, fp
   15b38:	beq	15b4c <__assert_fail@plt+0x4244>
   15b3c:	sub	r1, r3, r7
   15b40:	cmp	r1, #0
   15b44:	str	r1, [sp, #48]	; 0x30
   15b48:	bgt	155c0 <__assert_fail@plt+0x3cb8>
   15b4c:	bic	r1, r6, r6, asr #31
   15b50:	str	r1, [sp, #48]	; 0x30
   15b54:	ldr	r1, [sp, #48]	; 0x30
   15b58:	cmp	r7, r1
   15b5c:	movcs	r8, r7
   15b60:	movcc	r8, r1
   15b64:	cmp	r8, r2
   15b68:	bcs	155d0 <__assert_fail@plt+0x3cc8>
   15b6c:	cmp	r9, #0
   15b70:	beq	15bd8 <__assert_fail@plt+0x42d0>
   15b74:	cmp	r7, r1
   15b78:	movcs	r2, #0
   15b7c:	movcc	r2, #1
   15b80:	cmp	r3, #0
   15b84:	moveq	r3, r2
   15b88:	movne	r3, #0
   15b8c:	cmp	r3, #0
   15b90:	beq	15bb8 <__assert_fail@plt+0x42b0>
   15b94:	cmp	sl, #48	; 0x30
   15b98:	sub	r2, r6, r7
   15b9c:	moveq	r0, r9
   15ba0:	movne	r0, r9
   15ba4:	moveq	r1, sl
   15ba8:	movne	r1, #32
   15bac:	add	r6, r9, r2
   15bb0:	bl	11788 <memset@plt>
   15bb4:	mov	r9, r6
   15bb8:	ldr	r3, [sp, #20]
   15bbc:	mov	r1, r4
   15bc0:	cmp	r3, #0
   15bc4:	mov	r2, r7
   15bc8:	mov	r0, r9
   15bcc:	beq	16828 <__assert_fail@plt+0x4f20>
   15bd0:	bl	154b4 <__assert_fail@plt+0x3bac>
   15bd4:	add	r9, r9, r7
   15bd8:	add	fp, fp, r8
   15bdc:	b	15598 <__assert_fail@plt+0x3c90>
   15be0:	cmp	r7, #69	; 0x45
   15be4:	beq	16960 <__assert_fail@plt+0x5058>
   15be8:	ldr	r3, [sp, #28]
   15bec:	ldr	r2, [r3, #20]
   15bf0:	ldr	r3, [pc, #2292]	; 164ec <__assert_fail@plt+0x4be4>
   15bf4:	smull	r3, r1, r3, r2
   15bf8:	asr	r3, r2, #31
   15bfc:	rsb	r3, r3, r1, asr #5
   15c00:	add	r3, r3, r3, lsl #2
   15c04:	add	r3, r3, r3, lsl #2
   15c08:	subs	r3, r2, r3, lsl #2
   15c0c:	bmi	16b20 <__assert_fail@plt+0x5218>
   15c10:	mov	r2, #2
   15c14:	str	r2, [sp, #48]	; 0x30
   15c18:	b	15a54 <__assert_fail@plt+0x414c>
   15c1c:	cmp	r8, #0
   15c20:	ldr	r3, [sp, #20]
   15c24:	movne	r3, r8
   15c28:	cmp	r7, #69	; 0x45
   15c2c:	str	r3, [sp, #20]
   15c30:	bne	158f0 <__assert_fail@plt+0x3fe8>
   15c34:	sub	r3, r5, #1
   15c38:	add	r1, r5, #1
   15c3c:	mov	r7, r3
   15c40:	sub	r4, r1, r3
   15c44:	ldrb	r2, [r3], #-1
   15c48:	cmp	r2, #37	; 0x25
   15c4c:	bne	15c3c <__assert_fail@plt+0x4334>
   15c50:	bic	r3, r6, r6, asr #31
   15c54:	ldr	r2, [sp, #16]
   15c58:	cmp	r4, r3
   15c5c:	movcs	r8, r4
   15c60:	movcc	r8, r3
   15c64:	sub	r2, r2, fp
   15c68:	cmp	r2, r8
   15c6c:	bls	155d0 <__assert_fail@plt+0x3cc8>
   15c70:	cmp	r9, #0
   15c74:	beq	15bd8 <__assert_fail@plt+0x42d0>
   15c78:	cmp	r4, r3
   15c7c:	bcs	15ca4 <__assert_fail@plt+0x439c>
   15c80:	cmp	sl, #48	; 0x30
   15c84:	sub	r2, r6, r4
   15c88:	moveq	r0, r9
   15c8c:	movne	r0, r9
   15c90:	moveq	r1, sl
   15c94:	movne	r1, #32
   15c98:	add	r6, r9, r2
   15c9c:	bl	11788 <memset@plt>
   15ca0:	mov	r9, r6
   15ca4:	ldr	r3, [sp, #20]
   15ca8:	mov	r1, r7
   15cac:	cmp	r3, #0
   15cb0:	mov	r2, r4
   15cb4:	mov	r0, r9
   15cb8:	beq	16830 <__assert_fail@plt+0x4f28>
   15cbc:	bl	154b4 <__assert_fail@plt+0x3bac>
   15cc0:	add	r9, r9, r4
   15cc4:	b	15bd8 <__assert_fail@plt+0x42d0>
   15cc8:	mov	r3, #0
   15ccc:	str	r3, [sp, #48]	; 0x30
   15cd0:	ldr	r2, [sp, #28]
   15cd4:	ldr	r3, [r2, #32]
   15cd8:	cmp	r3, #0
   15cdc:	blt	15598 <__assert_fail@plt+0x3c90>
   15ce0:	ldr	r1, [r2, #36]	; 0x24
   15ce4:	cmp	r1, #0
   15ce8:	movlt	lr, #1
   15cec:	blt	15d08 <__assert_fail@plt+0x4400>
   15cf0:	ldreq	r3, [sp, #40]	; 0x28
   15cf4:	movne	lr, #0
   15cf8:	ldrbeq	lr, [r3]
   15cfc:	subeq	lr, lr, #45	; 0x2d
   15d00:	clzeq	lr, lr
   15d04:	lsreq	lr, lr, #5
   15d08:	ldr	r0, [pc, #1984]	; 164d0 <__assert_fail@plt+0x4bc8>
   15d0c:	smull	r3, r2, r0, r1
   15d10:	ldr	r3, [pc, #1980]	; 164d4 <__assert_fail@plt+0x4bcc>
   15d14:	add	r2, r2, r1
   15d18:	smull	r3, ip, r3, r1
   15d1c:	asr	r3, r1, #31
   15d20:	rsb	r2, r3, r2, asr #5
   15d24:	add	ip, ip, r1
   15d28:	smull	r8, r0, r0, r2
   15d2c:	add	r0, r0, r2
   15d30:	asr	r8, r2, #31
   15d34:	rsb	r0, r8, r0, asr #5
   15d38:	rsb	r8, r2, r2, lsl #4
   15d3c:	rsb	r0, r0, r0, lsl #4
   15d40:	rsb	r3, r3, ip, asr #11
   15d44:	sub	r0, r2, r0, lsl #2
   15d48:	ldr	r2, [sp, #48]	; 0x30
   15d4c:	sub	r1, r1, r8, lsl #2
   15d50:	cmp	r2, #3
   15d54:	ldrls	pc, [pc, r2, lsl #2]
   15d58:	b	16c10 <__assert_fail@plt+0x5308>
   15d5c:	andeq	r6, r1, r8, ror #14
   15d60:	andeq	r6, r1, r4, asr #14
   15d64:	andeq	r6, r1, ip, lsl #14
   15d68:	andeq	r6, r1, ip, lsl #15
   15d6c:	bic	r7, r6, r6, asr #31
   15d70:	ldr	r3, [sp, #16]
   15d74:	cmp	r7, #1
   15d78:	movcc	r7, #1
   15d7c:	sub	r3, r3, fp
   15d80:	cmp	r3, r7
   15d84:	bls	155d0 <__assert_fail@plt+0x3cc8>
   15d88:	cmp	r9, #0
   15d8c:	beq	15dc4 <__assert_fail@plt+0x44bc>
   15d90:	cmp	r6, #1
   15d94:	ble	15dbc <__assert_fail@plt+0x44b4>
   15d98:	cmp	sl, #48	; 0x30
   15d9c:	sub	r2, r6, #1
   15da0:	moveq	r0, r9
   15da4:	movne	r0, r9
   15da8:	moveq	r1, sl
   15dac:	movne	r1, #32
   15db0:	add	r4, r9, r2
   15db4:	bl	11788 <memset@plt>
   15db8:	mov	r9, r4
   15dbc:	mov	r3, #10
   15dc0:	strb	r3, [r9], #1
   15dc4:	add	fp, fp, r7
   15dc8:	b	15598 <__assert_fail@plt+0x3c90>
   15dcc:	cmp	r7, #69	; 0x45
   15dd0:	beq	15c34 <__assert_fail@plt+0x432c>
   15dd4:	ldr	r3, [sp, #28]
   15dd8:	mov	r2, #2
   15ddc:	str	r2, [sp, #48]	; 0x30
   15de0:	ldr	r3, [r3, #12]
   15de4:	b	15a54 <__assert_fail@plt+0x414c>
   15de8:	cmp	r7, #69	; 0x45
   15dec:	beq	15c34 <__assert_fail@plt+0x432c>
   15df0:	ldr	r3, [sp, #28]
   15df4:	ldr	r3, [r3, #12]
   15df8:	cmp	sl, #48	; 0x30
   15dfc:	cmpne	sl, #45	; 0x2d
   15e00:	mov	r2, #2
   15e04:	movne	sl, #95	; 0x5f
   15e08:	str	r2, [sp, #48]	; 0x30
   15e0c:	b	15a54 <__assert_fail@plt+0x414c>
   15e10:	cmp	r7, #69	; 0x45
   15e14:	beq	15c34 <__assert_fail@plt+0x432c>
   15e18:	ldr	r3, [sp, #28]
   15e1c:	mov	r0, #0
   15e20:	mov	r2, #3
   15e24:	ldr	r3, [r3, #28]
   15e28:	str	r0, [sp, #52]	; 0x34
   15e2c:	cmn	r3, #1
   15e30:	movge	lr, #0
   15e34:	movlt	lr, #1
   15e38:	add	r3, r3, #1
   15e3c:	str	r2, [sp, #48]	; 0x30
   15e40:	b	15a60 <__assert_fail@plt+0x4158>
   15e44:	cmp	r7, #69	; 0x45
   15e48:	beq	15c34 <__assert_fail@plt+0x432c>
   15e4c:	ldr	r3, [sp, #28]
   15e50:	ldr	r3, [r3, #8]
   15e54:	b	15df8 <__assert_fail@plt+0x44f0>
   15e58:	cmp	r7, #69	; 0x45
   15e5c:	beq	15c34 <__assert_fail@plt+0x432c>
   15e60:	ldr	r3, [sp, #44]	; 0x2c
   15e64:	b	15df8 <__assert_fail@plt+0x44f0>
   15e68:	ldr	r3, [pc, #1640]	; 164d8 <__assert_fail@plt+0x4bd0>
   15e6c:	str	r3, [sp, #48]	; 0x30
   15e70:	ldr	r3, [sp, #1196]	; 0x4ac
   15e74:	ldr	r2, [sp, #48]	; 0x30
   15e78:	str	r3, [sp, #12]
   15e7c:	ldr	r3, [sp, #32]
   15e80:	mvn	r1, #0
   15e84:	str	r3, [sp, #8]
   15e88:	ldr	r3, [sp, #36]	; 0x24
   15e8c:	mov	r0, #0
   15e90:	str	r3, [sp, #4]
   15e94:	ldr	r3, [sp, #20]
   15e98:	str	r3, [sp]
   15e9c:	ldr	r3, [sp, #28]
   15ea0:	bl	154f4 <__assert_fail@plt+0x3bec>
   15ea4:	bic	r3, r6, r6, asr #31
   15ea8:	ldr	r2, [sp, #16]
   15eac:	sub	r8, r2, fp
   15eb0:	cmp	r0, r3
   15eb4:	movcs	r7, r0
   15eb8:	movcc	r7, r3
   15ebc:	cmp	r8, r7
   15ec0:	mov	r4, r0
   15ec4:	bls	155d0 <__assert_fail@plt+0x3cc8>
   15ec8:	cmp	r9, #0
   15ecc:	beq	15dc4 <__assert_fail@plt+0x44bc>
   15ed0:	cmp	r0, r3
   15ed4:	bcs	15efc <__assert_fail@plt+0x45f4>
   15ed8:	cmp	sl, #48	; 0x30
   15edc:	sub	r2, r6, r0
   15ee0:	moveq	r1, sl
   15ee4:	moveq	r0, r9
   15ee8:	movne	r0, r9
   15eec:	movne	r1, #32
   15ef0:	add	r6, r9, r2
   15ef4:	bl	11788 <memset@plt>
   15ef8:	mov	r9, r6
   15efc:	ldr	r3, [sp, #1196]	; 0x4ac
   15f00:	mov	r0, r9
   15f04:	str	r3, [sp, #12]
   15f08:	ldr	r3, [sp, #32]
   15f0c:	ldr	r2, [sp, #48]	; 0x30
   15f10:	str	r3, [sp, #8]
   15f14:	ldr	r3, [sp, #36]	; 0x24
   15f18:	mov	r1, r8
   15f1c:	str	r3, [sp, #4]
   15f20:	ldr	r3, [sp, #20]
   15f24:	add	r9, r9, r4
   15f28:	str	r3, [sp]
   15f2c:	ldr	r3, [sp, #28]
   15f30:	bl	154f4 <__assert_fail@plt+0x3bec>
   15f34:	b	15dc4 <__assert_fail@plt+0x44bc>
   15f38:	cmp	r7, #69	; 0x45
   15f3c:	beq	15c34 <__assert_fail@plt+0x432c>
   15f40:	ldr	r3, [sp, #28]
   15f44:	mov	r2, #2
   15f48:	str	r2, [sp, #48]	; 0x30
   15f4c:	ldr	r3, [r3]
   15f50:	b	15a54 <__assert_fail@plt+0x414c>
   15f54:	cmp	r7, #69	; 0x45
   15f58:	beq	15c34 <__assert_fail@plt+0x432c>
   15f5c:	ldr	r2, [sp, #28]
   15f60:	mov	r1, #2
   15f64:	str	r1, [sp, #48]	; 0x30
   15f68:	ldrd	r2, [r2, #24]
   15f6c:	sub	r3, r3, r2
   15f70:	ldr	r2, [pc, #1412]	; 164fc <__assert_fail@plt+0x4bf4>
   15f74:	add	r3, r3, #7
   15f78:	smull	r1, r2, r2, r3
   15f7c:	add	r2, r2, r3
   15f80:	asr	r3, r3, #31
   15f84:	rsb	r3, r3, r2, asr #2
   15f88:	b	15a54 <__assert_fail@plt+0x414c>
   15f8c:	cmp	r7, #69	; 0x45
   15f90:	beq	16960 <__assert_fail@plt+0x5058>
   15f94:	cmp	r7, #79	; 0x4f
   15f98:	beq	15c34 <__assert_fail@plt+0x432c>
   15f9c:	ldr	r3, [sp, #28]
   15fa0:	ldr	r2, [pc, #1368]	; 16500 <__assert_fail@plt+0x4bf8>
   15fa4:	mov	r0, #0
   15fa8:	ldr	lr, [r3, #20]
   15fac:	str	r0, [sp, #52]	; 0x34
   15fb0:	add	r3, lr, #1888	; 0x760
   15fb4:	cmp	lr, r2
   15fb8:	add	r3, r3, #12
   15fbc:	movge	lr, #0
   15fc0:	movlt	lr, #1
   15fc4:	mov	r2, #4
   15fc8:	str	r2, [sp, #48]	; 0x30
   15fcc:	cmp	lr, #0
   15fd0:	rsbne	r3, r3, #0
   15fd4:	add	r8, sp, #120	; 0x78
   15fd8:	add	ip, r8, #10
   15fdc:	mov	r7, r3
   15fe0:	b	15fe8 <__assert_fail@plt+0x46e0>
   15fe4:	mov	r7, r2
   15fe8:	tst	r0, #1
   15fec:	subne	r3, ip, #2
   15ff0:	sub	r4, ip, #1
   15ff4:	movne	r2, #58	; 0x3a
   15ff8:	strbne	r2, [ip, #-1]
   15ffc:	movne	ip, r4
   16000:	movne	r4, r3
   16004:	ldr	r3, [pc, #1232]	; 164dc <__assert_fail@plt+0x4bd4>
   16008:	asrs	r0, r0, #1
   1600c:	movne	r1, #1
   16010:	umull	r3, r2, r3, r7
   16014:	moveq	r1, #0
   16018:	lsr	r2, r2, #3
   1601c:	cmp	r7, #9
   16020:	orrhi	r1, r1, #1
   16024:	add	r3, r2, r2, lsl #2
   16028:	cmp	r1, #0
   1602c:	sub	r3, r7, r3, lsl #1
   16030:	add	r3, r3, #48	; 0x30
   16034:	strb	r3, [ip, #-1]
   16038:	mov	ip, r4
   1603c:	bne	15fe4 <__assert_fail@plt+0x46dc>
   16040:	ldr	r3, [sp, #48]	; 0x30
   16044:	cmp	r3, r6
   16048:	movlt	r3, r6
   1604c:	cmp	lr, #0
   16050:	bne	167b0 <__assert_fail@plt+0x4ea8>
   16054:	ldr	r2, [sp, #52]	; 0x34
   16058:	cmp	r2, #0
   1605c:	beq	15b24 <__assert_fail@plt+0x421c>
   16060:	cmp	sl, #45	; 0x2d
   16064:	beq	1696c <__assert_fail@plt+0x5064>
   16068:	mov	r2, #43	; 0x2b
   1606c:	str	r2, [sp, #52]	; 0x34
   16070:	add	r7, r8, #10
   16074:	sub	r7, r7, r4
   16078:	sub	r2, r3, r7
   1607c:	sub	r2, r2, #1
   16080:	str	r2, [sp, #48]	; 0x30
   16084:	cmp	r2, #0
   16088:	ldr	r2, [sp, #16]
   1608c:	sub	r2, r2, fp
   16090:	ble	16868 <__assert_fail@plt+0x4f60>
   16094:	cmp	sl, #95	; 0x5f
   16098:	beq	168f4 <__assert_fail@plt+0x4fec>
   1609c:	cmp	r3, r2
   160a0:	bcs	155d0 <__assert_fail@plt+0x3cc8>
   160a4:	bic	r0, r6, r6, asr #31
   160a8:	cmp	r0, #1
   160ac:	movcs	r1, r0
   160b0:	movcc	r1, #1
   160b4:	cmp	r1, r2
   160b8:	bcs	155d0 <__assert_fail@plt+0x3cc8>
   160bc:	cmp	r9, #0
   160c0:	add	fp, fp, r1
   160c4:	beq	1613c <__assert_fail@plt+0x4834>
   160c8:	cmp	r0, #1
   160cc:	movls	r2, #0
   160d0:	movhi	r2, #1
   160d4:	cmp	r3, #0
   160d8:	movne	r2, #0
   160dc:	cmp	r2, #0
   160e0:	beq	1610c <__assert_fail@plt+0x4804>
   160e4:	sub	r2, r6, #1
   160e8:	cmp	sl, #48	; 0x30
   160ec:	str	r3, [sp, #56]	; 0x38
   160f0:	mov	r0, r9
   160f4:	add	r8, r9, r2
   160f8:	beq	16bd8 <__assert_fail@plt+0x52d0>
   160fc:	mov	r1, #32
   16100:	bl	11788 <memset@plt>
   16104:	ldr	r3, [sp, #56]	; 0x38
   16108:	mov	r9, r8
   1610c:	ldr	r2, [sp, #52]	; 0x34
   16110:	strb	r2, [r9], #1
   16114:	cmp	r9, #0
   16118:	beq	1613c <__assert_fail@plt+0x4834>
   1611c:	ldr	r6, [sp, #48]	; 0x30
   16120:	mov	r0, r9
   16124:	mov	r2, r6
   16128:	mov	r1, #48	; 0x30
   1612c:	str	r3, [sp, #52]	; 0x34
   16130:	bl	11788 <memset@plt>
   16134:	ldr	r3, [sp, #52]	; 0x34
   16138:	add	r9, r9, r6
   1613c:	ldr	r2, [sp, #48]	; 0x30
   16140:	mov	r6, #0
   16144:	add	fp, fp, r2
   16148:	ldr	r2, [sp, #16]
   1614c:	str	r6, [sp, #48]	; 0x30
   16150:	sub	r2, r2, fp
   16154:	b	15b54 <__assert_fail@plt+0x424c>
   16158:	ldr	r3, [sp, #20]
   1615c:	cmp	r8, #0
   16160:	movne	r3, #0
   16164:	ldr	r0, [sp, #40]	; 0x28
   16168:	str	r3, [sp, #20]
   1616c:	bl	11728 <strlen@plt>
   16170:	bic	r3, r6, r6, asr #31
   16174:	ldr	r2, [sp, #16]
   16178:	sub	r2, r2, fp
   1617c:	cmp	r0, r3
   16180:	movcs	r4, r0
   16184:	movcc	r4, r3
   16188:	cmp	r2, r4
   1618c:	mov	r7, r0
   16190:	bls	155d0 <__assert_fail@plt+0x3cc8>
   16194:	cmp	r9, #0
   16198:	beq	161f0 <__assert_fail@plt+0x48e8>
   1619c:	cmp	r0, r3
   161a0:	bcs	161c8 <__assert_fail@plt+0x48c0>
   161a4:	cmp	sl, #48	; 0x30
   161a8:	sub	r2, r6, r0
   161ac:	moveq	r1, sl
   161b0:	moveq	r0, r9
   161b4:	movne	r0, r9
   161b8:	movne	r1, #32
   161bc:	add	r6, r9, r2
   161c0:	bl	11788 <memset@plt>
   161c4:	mov	r9, r6
   161c8:	cmp	r8, #0
   161cc:	bne	16b44 <__assert_fail@plt+0x523c>
   161d0:	ldr	r3, [sp, #20]
   161d4:	mov	r2, r7
   161d8:	cmp	r3, #0
   161dc:	ldr	r1, [sp, #40]	; 0x28
   161e0:	mov	r0, r9
   161e4:	beq	16b3c <__assert_fail@plt+0x5234>
   161e8:	bl	154b4 <__assert_fail@plt+0x3bac>
   161ec:	add	r9, r9, r7
   161f0:	add	fp, fp, r4
   161f4:	b	15598 <__assert_fail@plt+0x3c90>
   161f8:	cmp	r7, #69	; 0x45
   161fc:	beq	15c34 <__assert_fail@plt+0x432c>
   16200:	ldr	r3, [sp, #28]
   16204:	ldr	ip, [pc, #752]	; 164fc <__assert_fail@plt+0x4bf4>
   16208:	ldrd	r2, [r3, #24]
   1620c:	add	r2, r2, #6
   16210:	smull	r0, r1, ip, r2
   16214:	add	r0, r1, r2
   16218:	asr	r1, r2, #31
   1621c:	rsb	r1, r1, r0, asr #2
   16220:	mov	r0, #2
   16224:	rsb	r1, r1, r1, lsl #3
   16228:	sub	r2, r2, r1
   1622c:	sub	r3, r3, r2
   16230:	add	r3, r3, #7
   16234:	str	r0, [sp, #48]	; 0x30
   16238:	smull	r1, r2, ip, r3
   1623c:	add	r2, r2, r3
   16240:	asr	r3, r3, #31
   16244:	rsb	r3, r3, r2, asr r0
   16248:	b	15a54 <__assert_fail@plt+0x414c>
   1624c:	cmp	r7, #0
   16250:	bne	15c34 <__assert_fail@plt+0x432c>
   16254:	ldr	r3, [pc, #644]	; 164e0 <__assert_fail@plt+0x4bd8>
   16258:	str	r3, [sp, #48]	; 0x30
   1625c:	b	15e70 <__assert_fail@plt+0x4568>
   16260:	cmp	r7, #0
   16264:	bne	15c34 <__assert_fail@plt+0x432c>
   16268:	ldr	r3, [pc, #628]	; 164e4 <__assert_fail@plt+0x4bdc>
   1626c:	str	r3, [sp, #48]	; 0x30
   16270:	b	15e70 <__assert_fail@plt+0x4568>
   16274:	cmp	r7, #69	; 0x45
   16278:	beq	15c34 <__assert_fail@plt+0x432c>
   1627c:	ldr	r3, [sp, #28]
   16280:	ldr	r0, [r3, #28]
   16284:	ldr	r2, [r3, #24]
   16288:	ldr	r8, [r3, #20]
   1628c:	sub	r3, r0, r2
   16290:	str	r2, [sp, #52]	; 0x34
   16294:	add	r3, r3, #380	; 0x17c
   16298:	ldr	r2, [pc, #604]	; 164fc <__assert_fail@plt+0x4bf4>
   1629c:	add	r3, r3, #2
   162a0:	cmp	r8, #0
   162a4:	smull	r1, r2, r2, r3
   162a8:	str	r0, [sp, #48]	; 0x30
   162ac:	add	r1, r2, r3
   162b0:	asr	r2, r3, #31
   162b4:	rsb	r2, r2, r1, asr #2
   162b8:	movlt	r1, #300	; 0x12c
   162bc:	rsb	r2, r2, r2, lsl #3
   162c0:	sub	r3, r3, r2
   162c4:	sub	r3, r0, r3
   162c8:	mvnge	r1, #99	; 0x63
   162cc:	adds	r3, r3, #3
   162d0:	add	r1, r8, r1
   162d4:	bmi	169d4 <__assert_fail@plt+0x50cc>
   162d8:	tst	r1, #3
   162dc:	ldrne	r2, [pc, #524]	; 164f0 <__assert_fail@plt+0x4be8>
   162e0:	bne	16324 <__assert_fail@plt+0x4a1c>
   162e4:	ldr	r2, [pc, #512]	; 164ec <__assert_fail@plt+0x4be4>
   162e8:	smull	r2, ip, r2, r1
   162ec:	asr	r2, r1, #31
   162f0:	rsb	r0, r2, ip, asr #5
   162f4:	add	r0, r0, r0, lsl #2
   162f8:	add	r0, r0, r0, lsl #2
   162fc:	cmp	r1, r0, lsl #2
   16300:	ldrne	r2, [pc, #492]	; 164f4 <__assert_fail@plt+0x4bec>
   16304:	bne	16324 <__assert_fail@plt+0x4a1c>
   16308:	rsb	r0, r2, ip, asr #7
   1630c:	ldr	ip, [pc, #480]	; 164f4 <__assert_fail@plt+0x4bec>
   16310:	add	r0, r0, r0, lsl #2
   16314:	ldr	r2, [pc, #468]	; 164f0 <__assert_fail@plt+0x4be8>
   16318:	add	r0, r0, r0, lsl #2
   1631c:	cmp	r1, r0, lsl #4
   16320:	moveq	r2, ip
   16324:	ldr	r1, [sp, #48]	; 0x30
   16328:	sub	ip, r1, r2
   1632c:	ldr	r2, [sp, #52]	; 0x34
   16330:	ldr	r1, [pc, #452]	; 164fc <__assert_fail@plt+0x4bf4>
   16334:	sub	r2, ip, r2
   16338:	add	r2, r2, #380	; 0x17c
   1633c:	add	r2, r2, #2
   16340:	smull	r0, r1, r1, r2
   16344:	add	r0, r1, r2
   16348:	asr	r1, r2, #31
   1634c:	rsb	r1, r1, r0, asr #2
   16350:	rsb	r1, r1, r1, lsl #3
   16354:	sub	r2, r2, r1
   16358:	sub	r2, ip, r2
   1635c:	add	r2, r2, #3
   16360:	cmp	r2, #0
   16364:	movge	r3, r2
   16368:	movlt	r2, #0
   1636c:	movge	r2, #1
   16370:	cmp	r4, #71	; 0x47
   16374:	beq	16aec <__assert_fail@plt+0x51e4>
   16378:	cmp	r4, #103	; 0x67
   1637c:	bne	16ac8 <__assert_fail@plt+0x51c0>
   16380:	ldr	r0, [pc, #356]	; 164ec <__assert_fail@plt+0x4be4>
   16384:	smull	r3, r1, r0, r8
   16388:	asr	r3, r8, #31
   1638c:	rsb	r3, r3, r1, asr #5
   16390:	add	r3, r3, r3, lsl #2
   16394:	add	r3, r3, r3, lsl #2
   16398:	sub	r1, r8, r3, lsl #2
   1639c:	add	r1, r1, r2
   163a0:	smull	r3, r0, r0, r1
   163a4:	asr	r3, r1, #31
   163a8:	rsb	r3, r3, r0, asr #5
   163ac:	add	r3, r3, r3, lsl #2
   163b0:	add	r3, r3, r3, lsl #2
   163b4:	subs	r3, r1, r3, lsl #2
   163b8:	bpl	15c10 <__assert_fail@plt+0x4308>
   163bc:	ldr	r1, [pc, #316]	; 16500 <__assert_fail@plt+0x4bf8>
   163c0:	sub	r1, r1, r2
   163c4:	cmp	r1, r8
   163c8:	ble	16b2c <__assert_fail@plt+0x5224>
   163cc:	mov	r2, #2
   163d0:	rsb	r3, r3, #0
   163d4:	str	r2, [sp, #48]	; 0x30
   163d8:	b	15a54 <__assert_fail@plt+0x414c>
   163dc:	cmp	r7, #69	; 0x45
   163e0:	beq	15c34 <__assert_fail@plt+0x432c>
   163e4:	ldr	r3, [sp, #28]
   163e8:	mov	r2, #2
   163ec:	str	r2, [sp, #48]	; 0x30
   163f0:	ldr	r3, [r3, #8]
   163f4:	b	15a54 <__assert_fail@plt+0x414c>
   163f8:	cmp	r7, #69	; 0x45
   163fc:	beq	15c34 <__assert_fail@plt+0x432c>
   16400:	ldr	r3, [sp, #28]
   16404:	mov	r2, #2
   16408:	str	r2, [sp, #48]	; 0x30
   1640c:	ldr	r3, [r3, #4]
   16410:	b	15a54 <__assert_fail@plt+0x414c>
   16414:	cmp	r7, #69	; 0x45
   16418:	beq	15c34 <__assert_fail@plt+0x432c>
   1641c:	cmn	r6, #1
   16420:	bne	16a68 <__assert_fail@plt+0x5160>
   16424:	mov	r6, #9
   16428:	str	r6, [sp, #48]	; 0x30
   1642c:	ldr	r3, [sp, #1196]	; 0x4ac
   16430:	b	15a54 <__assert_fail@plt+0x414c>
   16434:	ldrb	r3, [r5, #-1]
   16438:	sub	r7, r5, #1
   1643c:	cmp	r3, #37	; 0x25
   16440:	ldr	r3, [sp, #16]
   16444:	sub	r2, r3, fp
   16448:	bic	r3, r6, r6, asr #31
   1644c:	bne	16c08 <__assert_fail@plt+0x5300>
   16450:	cmp	r3, #1
   16454:	movcs	r8, r3
   16458:	movcc	r8, #1
   1645c:	mov	r5, r7
   16460:	mov	r4, #1
   16464:	b	15c68 <__assert_fail@plt+0x4360>
   16468:	cmp	r7, #69	; 0x45
   1646c:	beq	15c34 <__assert_fail@plt+0x432c>
   16470:	mov	r2, #2
   16474:	ldr	r3, [sp, #44]	; 0x2c
   16478:	str	r2, [sp, #48]	; 0x30
   1647c:	b	15a54 <__assert_fail@plt+0x414c>
   16480:	ldr	r3, [sp, #28]
   16484:	cmp	r7, #79	; 0x4f
   16488:	ldr	r3, [r3, #16]
   1648c:	moveq	r3, #1
   16490:	streq	r3, [sp, #48]	; 0x30
   16494:	beq	15a78 <__assert_fail@plt+0x4170>
   16498:	add	r2, r3, r3, lsl #2
   1649c:	mov	r0, #0
   164a0:	add	r3, r3, r2, lsl #1
   164a4:	mov	r2, #1
   164a8:	asr	r3, r3, #5
   164ac:	str	r0, [sp, #52]	; 0x34
   164b0:	mov	lr, r0
   164b4:	add	r3, r3, #1
   164b8:	str	r2, [sp, #48]	; 0x30
   164bc:	b	15fd4 <__assert_fail@plt+0x46cc>
   164c0:	andeq	pc, r2, r0, lsl #30
   164c4:	andeq	sp, r1, r4, asr #21
   164c8:	stcleq	12, cr12, [ip], {204}	; 0xcc
   164cc:	andeq	r2, r0, r0, lsr #10
   164d0:	stmhi	r8, {r0, r3, r7, fp, pc}
   164d4:			; <UNDEFINED> instruction: 0x91a2b3c5
   164d8:	muleq	r1, ip, fp
   164dc:	stclgt	12, cr12, [ip], {205}	; 0xcd
   164e0:	muleq	r1, r0, fp
   164e4:	andeq	lr, r1, r4, lsr #23
   164e8:	andeq	lr, r1, r4, lsl #23
   164ec:	mvnpl	r8, pc, lsl r5
   164f0:	andeq	r0, r0, sp, ror #2
   164f4:	andeq	r0, r0, lr, ror #2
   164f8:	strbtvs	r6, [r6], -r7, ror #12
   164fc:	subls	r2, r9, #-1828716544	; 0x93000000
   16500:			; <UNDEFINED> instruction: 0xfffff894
   16504:	bic	r7, r6, r6, asr #31
   16508:	ldr	r3, [sp, #16]
   1650c:	cmp	r7, #1
   16510:	movcc	r7, #1
   16514:	sub	r3, r3, fp
   16518:	cmp	r3, r7
   1651c:	bls	155d0 <__assert_fail@plt+0x3cc8>
   16520:	cmp	r9, #0
   16524:	beq	15dc4 <__assert_fail@plt+0x44bc>
   16528:	cmp	r6, #1
   1652c:	ble	16554 <__assert_fail@plt+0x4c4c>
   16530:	cmp	sl, #48	; 0x30
   16534:	sub	r2, r6, #1
   16538:	moveq	r0, r9
   1653c:	movne	r0, r9
   16540:	moveq	r1, sl
   16544:	movne	r1, #32
   16548:	add	r4, r9, r2
   1654c:	bl	11788 <memset@plt>
   16550:	mov	r9, r4
   16554:	mov	r3, #9
   16558:	strb	r3, [r9], #1
   1655c:	b	15dc4 <__assert_fail@plt+0x44bc>
   16560:	mov	r3, #0
   16564:	str	r3, [sp, #52]	; 0x34
   16568:	ldr	r3, [sp, #52]	; 0x34
   1656c:	cmp	r8, #0
   16570:	movne	r3, r8
   16574:	str	r3, [sp, #52]	; 0x34
   16578:	ldr	r3, [sp, #20]
   1657c:	movne	r3, #0
   16580:	str	r3, [sp, #20]
   16584:	mov	r4, #112	; 0x70
   16588:	b	158f8 <__assert_fail@plt+0x3ff0>
   1658c:	cmp	r7, #69	; 0x45
   16590:	beq	15c34 <__assert_fail@plt+0x432c>
   16594:	ldr	r3, [sp, #20]
   16598:	cmp	r8, #0
   1659c:	movne	r3, r8
   165a0:	str	r3, [sp, #20]
   165a4:	mov	r3, #0
   165a8:	str	r3, [sp, #52]	; 0x34
   165ac:	b	158f8 <__assert_fail@plt+0x3ff0>
   165b0:	cmp	r7, #69	; 0x45
   165b4:	beq	16960 <__assert_fail@plt+0x5058>
   165b8:	ldr	r3, [sp, #28]
   165bc:	mov	r0, #0
   165c0:	ldr	lr, [pc, #-200]	; 16500 <__assert_fail@plt+0x4bf8>
   165c4:	ldr	ip, [r3, #20]
   165c8:	ldr	r3, [pc, #-228]	; 164ec <__assert_fail@plt+0x4be4>
   165cc:	str	r0, [sp, #52]	; 0x34
   165d0:	smull	r2, r3, r3, ip
   165d4:	asr	r2, ip, #31
   165d8:	rsb	r2, r2, r3, asr #5
   165dc:	add	r3, r2, #19
   165e0:	add	r2, r2, r2, lsl #2
   165e4:	cmp	r3, r0
   165e8:	add	r2, r2, r2, lsl #2
   165ec:	movle	r1, #0
   165f0:	sub	r2, ip, r2, lsl #2
   165f4:	movgt	r1, #1
   165f8:	and	r2, r1, r2, lsr #31
   165fc:	cmp	ip, lr
   16600:	sub	r3, r3, r2
   16604:	mov	r2, #2
   16608:	movge	lr, #0
   1660c:	movlt	lr, #1
   16610:	str	r2, [sp, #48]	; 0x30
   16614:	b	15a60 <__assert_fail@plt+0x4158>
   16618:	cmp	r7, #69	; 0x45
   1661c:	beq	15c34 <__assert_fail@plt+0x432c>
   16620:	ldr	r3, [sp, #28]
   16624:	mov	r2, #1
   16628:	str	r2, [sp, #48]	; 0x30
   1662c:	ldr	r3, [r3, #24]
   16630:	b	15a54 <__assert_fail@plt+0x414c>
   16634:	cmp	r7, #69	; 0x45
   16638:	beq	15c34 <__assert_fail@plt+0x432c>
   1663c:	ldr	r3, [sp, #28]
   16640:	mov	r0, #0
   16644:	mov	r2, #2
   16648:	ldr	r3, [r3, #16]
   1664c:	str	r0, [sp, #52]	; 0x34
   16650:	cmn	r3, #1
   16654:	movge	lr, #0
   16658:	movlt	lr, #1
   1665c:	add	r3, r3, #1
   16660:	str	r2, [sp, #48]	; 0x30
   16664:	b	15a60 <__assert_fail@plt+0x4158>
   16668:	bic	r3, r6, r6, asr #31
   1666c:	ldr	r2, [sp, #16]
   16670:	cmp	r3, #1
   16674:	movcs	r8, r3
   16678:	movcc	r8, #1
   1667c:	cmp	r7, #0
   16680:	sub	r2, r2, fp
   16684:	bne	16b7c <__assert_fail@plt+0x5274>
   16688:	cmp	r8, r2
   1668c:	bcs	155d0 <__assert_fail@plt+0x3cc8>
   16690:	cmp	r9, #0
   16694:	beq	15bd8 <__assert_fail@plt+0x42d0>
   16698:	cmp	r6, #1
   1669c:	ble	166c4 <__assert_fail@plt+0x4dbc>
   166a0:	sub	r2, r6, #1
   166a4:	cmp	sl, #48	; 0x30
   166a8:	add	r7, r9, r2
   166ac:	beq	16b9c <__assert_fail@plt+0x5294>
   166b0:	mov	r0, r9
   166b4:	mov	r1, #32
   166b8:	bl	11788 <memset@plt>
   166bc:	ldrb	r4, [r5]
   166c0:	mov	r9, r7
   166c4:	strb	r4, [r9], #1
   166c8:	b	15bd8 <__assert_fail@plt+0x42d0>
   166cc:	ldrb	r3, [r5, #1]
   166d0:	add	r2, r5, #1
   166d4:	cmp	r3, #58	; 0x3a
   166d8:	beq	16b58 <__assert_fail@plt+0x5250>
   166dc:	mov	r1, #1
   166e0:	str	r1, [sp, #48]	; 0x30
   166e4:	cmp	r3, #122	; 0x7a
   166e8:	moveq	r5, r2
   166ec:	beq	15cd0 <__assert_fail@plt+0x43c8>
   166f0:	b	15c34 <__assert_fail@plt+0x432c>
   166f4:	mov	r3, #1
   166f8:	str	r3, [sp, #52]	; 0x34
   166fc:	b	16568 <__assert_fail@plt+0x4c60>
   16700:	ldr	r3, [pc, #-544]	; 164e8 <__assert_fail@plt+0x4be0>
   16704:	str	r3, [sp, #48]	; 0x30
   16708:	b	15e70 <__assert_fail@plt+0x4568>
   1670c:	rsb	r2, r3, r3, lsl #5
   16710:	add	r0, r0, r0, lsl #2
   16714:	add	r3, r3, r2, lsl #2
   16718:	add	r0, r0, r0, lsl #2
   1671c:	add	ip, r3, r3, lsl #2
   16720:	mov	r2, #1
   16724:	lsl	r3, r0, #2
   16728:	add	r3, r3, ip, lsl #4
   1672c:	str	r2, [sp, #52]	; 0x34
   16730:	mov	r2, #9
   16734:	add	r3, r3, r1
   16738:	mov	r0, #20
   1673c:	str	r2, [sp, #48]	; 0x30
   16740:	b	15a60 <__assert_fail@plt+0x4158>
   16744:	add	r3, r3, r3, lsl #2
   16748:	mov	r2, #1
   1674c:	add	r3, r3, r3, lsl #2
   16750:	str	r2, [sp, #52]	; 0x34
   16754:	mov	r2, #6
   16758:	add	r3, r0, r3, lsl #2
   1675c:	str	r2, [sp, #48]	; 0x30
   16760:	mov	r0, #4
   16764:	b	15a60 <__assert_fail@plt+0x4158>
   16768:	add	r3, r3, r3, lsl #2
   1676c:	mov	r2, #1
   16770:	add	r3, r3, r3, lsl #2
   16774:	str	r2, [sp, #52]	; 0x34
   16778:	mov	r2, #5
   1677c:	add	r3, r0, r3, lsl #2
   16780:	str	r2, [sp, #48]	; 0x30
   16784:	mov	r0, #0
   16788:	b	15a60 <__assert_fail@plt+0x4158>
   1678c:	cmp	r1, #0
   16790:	bne	1670c <__assert_fail@plt+0x4e04>
   16794:	cmp	r0, #0
   16798:	bne	16744 <__assert_fail@plt+0x4e3c>
   1679c:	mov	r2, #1
   167a0:	str	r2, [sp, #52]	; 0x34
   167a4:	mov	r2, #3
   167a8:	str	r2, [sp, #48]	; 0x30
   167ac:	b	15a60 <__assert_fail@plt+0x4158>
   167b0:	cmp	sl, #45	; 0x2d
   167b4:	movne	r2, #45	; 0x2d
   167b8:	strne	r2, [sp, #52]	; 0x34
   167bc:	bne	16070 <__assert_fail@plt+0x4768>
   167c0:	bic	r1, r6, r6, asr #31
   167c4:	ldr	r2, [sp, #16]
   167c8:	cmp	r1, #1
   167cc:	movcs	r7, r1
   167d0:	movcc	r7, #1
   167d4:	sub	r2, r2, fp
   167d8:	cmp	r2, r7
   167dc:	str	r1, [sp, #48]	; 0x30
   167e0:	bls	155d0 <__assert_fail@plt+0x3cc8>
   167e4:	cmp	r9, #0
   167e8:	beq	1680c <__assert_fail@plt+0x4f04>
   167ec:	cmp	r1, #1
   167f0:	movls	r2, #0
   167f4:	movhi	r2, #1
   167f8:	cmp	r3, #0
   167fc:	movne	r2, #0
   16800:	cmp	r2, #0
   16804:	bne	16a9c <__assert_fail@plt+0x5194>
   16808:	strb	sl, [r9], #1
   1680c:	ldr	r2, [sp, #16]
   16810:	add	fp, fp, r7
   16814:	add	r7, r8, #10
   16818:	sub	r7, r7, r4
   1681c:	sub	r2, r2, fp
   16820:	mov	sl, #45	; 0x2d
   16824:	b	15b54 <__assert_fail@plt+0x424c>
   16828:	bl	11560 <memcpy@plt>
   1682c:	b	15bd4 <__assert_fail@plt+0x42cc>
   16830:	bl	11560 <memcpy@plt>
   16834:	b	15cc0 <__assert_fail@plt+0x43b8>
   16838:	bl	11560 <memcpy@plt>
   1683c:	ldr	r3, [sp, #20]
   16840:	b	159e0 <__assert_fail@plt+0x40d8>
   16844:	sub	r1, r8, #3
   16848:	mov	r2, r4
   1684c:	mov	r0, r9
   16850:	str	r3, [sp, #20]
   16854:	bl	15474 <__assert_fail@plt+0x3b6c>
   16858:	ldr	r3, [sp, #20]
   1685c:	b	159e0 <__assert_fail@plt+0x40d8>
   16860:	mov	fp, r3
   16864:	b	155a8 <__assert_fail@plt+0x3ca0>
   16868:	bic	r1, r6, r6, asr #31
   1686c:	cmp	r1, #1
   16870:	movcs	r8, r1
   16874:	movcc	r8, #1
   16878:	cmp	r8, r2
   1687c:	str	r1, [sp, #48]	; 0x30
   16880:	bcs	155d0 <__assert_fail@plt+0x3cc8>
   16884:	cmp	r9, #0
   16888:	beq	168dc <__assert_fail@plt+0x4fd4>
   1688c:	cmp	r1, #1
   16890:	movls	r2, #0
   16894:	movhi	r2, #1
   16898:	cmp	r3, #0
   1689c:	movne	r2, #0
   168a0:	cmp	r2, #0
   168a4:	beq	168d4 <__assert_fail@plt+0x4fcc>
   168a8:	sub	r2, r6, #1
   168ac:	add	r1, r9, r2
   168b0:	cmp	sl, #48	; 0x30
   168b4:	str	r1, [sp, #56]	; 0x38
   168b8:	str	r3, [sp, #60]	; 0x3c
   168bc:	mov	r0, r9
   168c0:	beq	16b88 <__assert_fail@plt+0x5280>
   168c4:	mov	r1, #32
   168c8:	bl	11788 <memset@plt>
   168cc:	ldr	r9, [sp, #56]	; 0x38
   168d0:	ldr	r3, [sp, #60]	; 0x3c
   168d4:	ldr	r2, [sp, #52]	; 0x34
   168d8:	strb	r2, [r9], #1
   168dc:	ldr	r2, [sp, #16]
   168e0:	add	fp, fp, r8
   168e4:	sub	r2, r2, fp
   168e8:	b	15b54 <__assert_fail@plt+0x424c>
   168ec:	mov	r1, #0
   168f0:	str	r1, [sp, #52]	; 0x34
   168f4:	ldr	r7, [sp, #48]	; 0x30
   168f8:	cmp	r7, r2
   168fc:	bcs	155d0 <__assert_fail@plt+0x3cc8>
   16900:	cmp	r9, #0
   16904:	beq	16924 <__assert_fail@plt+0x501c>
   16908:	mov	r0, r9
   1690c:	mov	r2, r7
   16910:	mov	r1, #32
   16914:	str	r3, [sp, #56]	; 0x38
   16918:	bl	11788 <memset@plt>
   1691c:	ldr	r3, [sp, #56]	; 0x38
   16920:	add	r9, r9, r7
   16924:	ldr	r2, [sp, #48]	; 0x30
   16928:	cmp	r2, r6
   1692c:	add	fp, fp, r2
   16930:	sublt	r6, r6, r2
   16934:	ldr	r2, [sp, #52]	; 0x34
   16938:	movge	r6, #0
   1693c:	cmp	r2, #0
   16940:	ldr	r2, [sp, #16]
   16944:	sub	r2, r2, fp
   16948:	bne	16974 <__assert_fail@plt+0x506c>
   1694c:	add	r7, r8, #10
   16950:	sub	r7, r7, r4
   16954:	str	r6, [sp, #48]	; 0x30
   16958:	mov	sl, #95	; 0x5f
   1695c:	b	15b54 <__assert_fail@plt+0x424c>
   16960:	mov	r3, #0
   16964:	str	r3, [sp, #48]	; 0x30
   16968:	b	15a78 <__assert_fail@plt+0x4170>
   1696c:	mov	sl, #43	; 0x2b
   16970:	b	167c0 <__assert_fail@plt+0x4eb8>
   16974:	cmp	r6, #1
   16978:	movcs	sl, r6
   1697c:	movcc	sl, #1
   16980:	cmp	sl, r2
   16984:	bcs	155d0 <__assert_fail@plt+0x3cc8>
   16988:	cmp	r9, #0
   1698c:	beq	169b4 <__assert_fail@plt+0x50ac>
   16990:	cmp	r6, #1
   16994:	movls	r2, #0
   16998:	movhi	r2, #1
   1699c:	cmp	r3, #0
   169a0:	movne	r2, #0
   169a4:	cmp	r2, #0
   169a8:	bne	16bb4 <__assert_fail@plt+0x52ac>
   169ac:	ldr	r2, [sp, #52]	; 0x34
   169b0:	strb	r2, [r9], #1
   169b4:	ldr	r2, [sp, #16]
   169b8:	add	fp, fp, sl
   169bc:	add	r7, r8, #10
   169c0:	sub	r7, r7, r4
   169c4:	sub	r2, r2, fp
   169c8:	str	r6, [sp, #48]	; 0x30
   169cc:	mov	sl, #95	; 0x5f
   169d0:	b	15b54 <__assert_fail@plt+0x424c>
   169d4:	sub	r0, r1, #1
   169d8:	tst	r0, #3
   169dc:	ldrne	r1, [pc, #-1268]	; 164f0 <__assert_fail@plt+0x4be8>
   169e0:	bne	16a24 <__assert_fail@plt+0x511c>
   169e4:	ldr	r3, [pc, #-1280]	; 164ec <__assert_fail@plt+0x4be4>
   169e8:	smull	r3, r2, r3, r0
   169ec:	asr	r3, r0, #31
   169f0:	rsb	r3, r3, r2, asr #5
   169f4:	add	r3, r3, r3, lsl #2
   169f8:	add	r3, r3, r3, lsl #2
   169fc:	cmp	r0, r3, lsl #2
   16a00:	ldrne	r1, [pc, #-1300]	; 164f4 <__assert_fail@plt+0x4bec>
   16a04:	bne	16a24 <__assert_fail@plt+0x511c>
   16a08:	mov	r1, #400	; 0x190
   16a0c:	bl	1d028 <__assert_fail@plt+0xb720>
   16a10:	ldr	r3, [pc, #-1320]	; 164f0 <__assert_fail@plt+0x4be8>
   16a14:	ldr	r2, [pc, #-1320]	; 164f4 <__assert_fail@plt+0x4bec>
   16a18:	cmp	r1, #0
   16a1c:	movne	r1, r3
   16a20:	moveq	r1, r2
   16a24:	ldr	r3, [sp, #48]	; 0x30
   16a28:	mvn	r2, #0
   16a2c:	add	ip, r3, r1
   16a30:	ldr	r3, [sp, #52]	; 0x34
   16a34:	ldr	r1, [pc, #-1344]	; 164fc <__assert_fail@plt+0x4bf4>
   16a38:	sub	r3, ip, r3
   16a3c:	add	r3, r3, #380	; 0x17c
   16a40:	add	r3, r3, #2
   16a44:	smull	r0, r1, r1, r3
   16a48:	add	r0, r1, r3
   16a4c:	asr	r1, r3, #31
   16a50:	rsb	r1, r1, r0, asr #2
   16a54:	rsb	r1, r1, r1, lsl #3
   16a58:	sub	r3, r3, r1
   16a5c:	sub	r3, ip, r3
   16a60:	add	r3, r3, #3
   16a64:	b	16370 <__assert_fail@plt+0x4a68>
   16a68:	cmp	r6, #8
   16a6c:	bgt	16bec <__assert_fail@plt+0x52e4>
   16a70:	ldr	r3, [sp, #1196]	; 0x4ac
   16a74:	mov	r2, r6
   16a78:	ldr	r1, [pc, #-1416]	; 164f8 <__assert_fail@plt+0x4bf0>
   16a7c:	add	r2, r2, #1
   16a80:	cmp	r2, #9
   16a84:	smull	r0, r1, r1, r3
   16a88:	asr	r3, r3, #31
   16a8c:	rsb	r3, r3, r1, asr #2
   16a90:	bne	16a78 <__assert_fail@plt+0x5170>
   16a94:	str	r6, [sp, #48]	; 0x30
   16a98:	b	15a54 <__assert_fail@plt+0x414c>
   16a9c:	str	r3, [sp, #56]	; 0x38
   16aa0:	sub	r3, r6, #1
   16aa4:	mov	r2, r3
   16aa8:	mov	r0, r9
   16aac:	mov	r1, #32
   16ab0:	str	r3, [sp, #52]	; 0x34
   16ab4:	bl	11788 <memset@plt>
   16ab8:	ldr	r3, [sp, #52]	; 0x34
   16abc:	add	r9, r9, r3
   16ac0:	ldr	r3, [sp, #56]	; 0x38
   16ac4:	b	16808 <__assert_fail@plt+0x4f00>
   16ac8:	ldr	r2, [pc, #-1492]	; 164fc <__assert_fail@plt+0x4bf4>
   16acc:	smull	r1, r2, r2, r3
   16ad0:	add	r2, r2, r3
   16ad4:	asr	r3, r3, #31
   16ad8:	rsb	r3, r3, r2, asr #2
   16adc:	mov	r2, #2
   16ae0:	add	r3, r3, #1
   16ae4:	str	r2, [sp, #48]	; 0x30
   16ae8:	b	15a54 <__assert_fail@plt+0x414c>
   16aec:	ldr	lr, [pc, #-1524]	; 16500 <__assert_fail@plt+0x4bf8>
   16af0:	add	r3, r8, #1888	; 0x760
   16af4:	sub	lr, lr, r2
   16af8:	add	r3, r3, #12
   16afc:	cmp	r8, lr
   16b00:	mov	r0, #0
   16b04:	add	r3, r3, r2
   16b08:	mov	r2, #4
   16b0c:	movge	lr, #0
   16b10:	movlt	lr, #1
   16b14:	str	r0, [sp, #52]	; 0x34
   16b18:	str	r2, [sp, #48]	; 0x30
   16b1c:	b	15a60 <__assert_fail@plt+0x4158>
   16b20:	ldr	r1, [pc, #-1576]	; 16500 <__assert_fail@plt+0x4bf8>
   16b24:	cmp	r2, r1
   16b28:	blt	163cc <__assert_fail@plt+0x4ac4>
   16b2c:	mov	r2, #2
   16b30:	add	r3, r3, #100	; 0x64
   16b34:	str	r2, [sp, #48]	; 0x30
   16b38:	b	15a54 <__assert_fail@plt+0x414c>
   16b3c:	bl	11560 <memcpy@plt>
   16b40:	b	161ec <__assert_fail@plt+0x48e4>
   16b44:	mov	r2, r7
   16b48:	ldr	r1, [sp, #40]	; 0x28
   16b4c:	mov	r0, r9
   16b50:	bl	15474 <__assert_fail@plt+0x3b6c>
   16b54:	b	161ec <__assert_fail@plt+0x48e4>
   16b58:	add	r1, r5, #2
   16b5c:	mov	r0, #1
   16b60:	mov	r2, r1
   16b64:	ldrb	r3, [r1], #1
   16b68:	add	r0, r0, #1
   16b6c:	cmp	r3, #58	; 0x3a
   16b70:	beq	16b60 <__assert_fail@plt+0x5258>
   16b74:	str	r0, [sp, #48]	; 0x30
   16b78:	b	166e4 <__assert_fail@plt+0x4ddc>
   16b7c:	mov	r7, r5
   16b80:	mov	r4, #1
   16b84:	b	15c68 <__assert_fail@plt+0x4360>
   16b88:	mov	r1, sl
   16b8c:	ldr	r9, [sp, #56]	; 0x38
   16b90:	bl	11788 <memset@plt>
   16b94:	ldr	r3, [sp, #60]	; 0x3c
   16b98:	b	168d4 <__assert_fail@plt+0x4fcc>
   16b9c:	mov	r0, r9
   16ba0:	mov	r1, sl
   16ba4:	bl	11788 <memset@plt>
   16ba8:	mov	r9, r7
   16bac:	ldrb	r4, [r5]
   16bb0:	b	166c4 <__assert_fail@plt+0x4dbc>
   16bb4:	sub	r7, r6, #1
   16bb8:	mov	r0, r9
   16bbc:	mov	r2, r7
   16bc0:	mov	r1, #32
   16bc4:	str	r3, [sp, #48]	; 0x30
   16bc8:	add	r9, r9, r7
   16bcc:	bl	11788 <memset@plt>
   16bd0:	ldr	r3, [sp, #48]	; 0x30
   16bd4:	b	169ac <__assert_fail@plt+0x50a4>
   16bd8:	mov	r1, sl
   16bdc:	bl	11788 <memset@plt>
   16be0:	mov	r9, r8
   16be4:	ldr	r3, [sp, #56]	; 0x38
   16be8:	b	1610c <__assert_fail@plt+0x4804>
   16bec:	ldr	r3, [sp, #1196]	; 0x4ac
   16bf0:	str	r6, [sp, #48]	; 0x30
   16bf4:	b	15a54 <__assert_fail@plt+0x414c>
   16bf8:	bl	11590 <__stack_chk_fail@plt>
   16bfc:	mov	r3, #0
   16c00:	str	r3, [sp, #48]	; 0x30
   16c04:	b	15a8c <__assert_fail@plt+0x4184>
   16c08:	mov	r5, r7
   16c0c:	b	15c34 <__assert_fail@plt+0x432c>
   16c10:	ldrb	r3, [r5]
   16c14:	mov	r7, r5
   16c18:	b	1643c <__assert_fail@plt+0x4b34>
   16c1c:	push	{r4, r5, lr}
   16c20:	sub	sp, sp, #28
   16c24:	ldr	r4, [pc, #72]	; 16c74 <__assert_fail@plt+0x536c>
   16c28:	ldr	ip, [sp, #44]	; 0x2c
   16c2c:	ldr	r5, [sp, #40]	; 0x28
   16c30:	ldr	lr, [r4]
   16c34:	str	ip, [sp, #12]
   16c38:	str	lr, [sp, #20]
   16c3c:	mov	ip, #0
   16c40:	add	lr, sp, #19
   16c44:	str	r5, [sp, #8]
   16c48:	str	ip, [sp]
   16c4c:	str	lr, [sp, #4]
   16c50:	strb	ip, [sp, #19]
   16c54:	bl	154f4 <__assert_fail@plt+0x3bec>
   16c58:	ldr	r2, [sp, #20]
   16c5c:	ldr	r3, [r4]
   16c60:	cmp	r2, r3
   16c64:	bne	16c70 <__assert_fail@plt+0x5368>
   16c68:	add	sp, sp, #28
   16c6c:	pop	{r4, r5, pc}
   16c70:	bl	11590 <__stack_chk_fail@plt>
   16c74:	andeq	pc, r2, r0, lsl #30
   16c78:	push	{r4, r5, r6, lr}
   16c7c:	subs	r4, r0, #0
   16c80:	beq	16cf4 <__assert_fail@plt+0x53ec>
   16c84:	mov	r1, #47	; 0x2f
   16c88:	bl	1180c <strrchr@plt>
   16c8c:	subs	r5, r0, #0
   16c90:	beq	16ce0 <__assert_fail@plt+0x53d8>
   16c94:	add	r6, r5, #1
   16c98:	sub	r3, r6, r4
   16c9c:	cmp	r3, #6
   16ca0:	ble	16ce0 <__assert_fail@plt+0x53d8>
   16ca4:	mov	r2, #7
   16ca8:	ldr	r1, [pc, #96]	; 16d10 <__assert_fail@plt+0x5408>
   16cac:	sub	r0, r5, #6
   16cb0:	bl	118b4 <strncmp@plt>
   16cb4:	cmp	r0, #0
   16cb8:	bne	16ce0 <__assert_fail@plt+0x53d8>
   16cbc:	mov	r2, #3
   16cc0:	ldr	r1, [pc, #76]	; 16d14 <__assert_fail@plt+0x540c>
   16cc4:	mov	r0, r6
   16cc8:	bl	118b4 <strncmp@plt>
   16ccc:	cmp	r0, #0
   16cd0:	movne	r4, r6
   16cd4:	ldreq	r3, [pc, #60]	; 16d18 <__assert_fail@plt+0x5410>
   16cd8:	addeq	r4, r5, #4
   16cdc:	streq	r4, [r3]
   16ce0:	ldr	r2, [pc, #52]	; 16d1c <__assert_fail@plt+0x5414>
   16ce4:	ldr	r3, [pc, #52]	; 16d20 <__assert_fail@plt+0x5418>
   16ce8:	str	r4, [r2]
   16cec:	str	r4, [r3]
   16cf0:	pop	{r4, r5, r6, pc}
   16cf4:	ldr	r3, [pc, #40]	; 16d24 <__assert_fail@plt+0x541c>
   16cf8:	mov	r2, #55	; 0x37
   16cfc:	mov	r1, #1
   16d00:	ldr	r3, [r3]
   16d04:	ldr	r0, [pc, #28]	; 16d28 <__assert_fail@plt+0x5420>
   16d08:	bl	11608 <fwrite@plt>
   16d0c:	bl	118c0 <abort@plt>
   16d10:	andeq	lr, r1, r8, ror #23
   16d14:	strdeq	lr, [r1], -r0
   16d18:	andeq	r0, r3, r0, ror #3
   16d1c:	andeq	r0, r3, r0, lsl #5
   16d20:	andeq	r0, r3, r4, ror #3
   16d24:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   16d28:			; <UNDEFINED> instruction: 0x0001ebb0
   16d2c:	push	{r4, lr}
   16d30:	mov	r2, #48	; 0x30
   16d34:	mov	r4, r1
   16d38:	mov	r1, #0
   16d3c:	bl	11788 <memset@plt>
   16d40:	cmp	r4, #10
   16d44:	beq	16d50 <__assert_fail@plt+0x5448>
   16d48:	str	r4, [r0]
   16d4c:	pop	{r4, pc}
   16d50:	bl	118c0 <abort@plt>
   16d54:	push	{r4, r5, r6, lr}
   16d58:	mov	r2, #5
   16d5c:	mov	r5, r0
   16d60:	mov	r6, r1
   16d64:	mov	r1, r0
   16d68:	mov	r0, #0
   16d6c:	bl	11584 <dcgettext@plt>
   16d70:	cmp	r5, r0
   16d74:	mov	r4, r0
   16d78:	beq	16d84 <__assert_fail@plt+0x547c>
   16d7c:	mov	r0, r4
   16d80:	pop	{r4, r5, r6, pc}
   16d84:	bl	1aa40 <__assert_fail@plt+0x9138>
   16d88:	ldrb	r3, [r0]
   16d8c:	bic	r3, r3, #32
   16d90:	cmp	r3, #85	; 0x55
   16d94:	bne	16df4 <__assert_fail@plt+0x54ec>
   16d98:	ldrb	r3, [r0, #1]
   16d9c:	bic	r3, r3, #32
   16da0:	cmp	r3, #84	; 0x54
   16da4:	bne	16e6c <__assert_fail@plt+0x5564>
   16da8:	ldrb	r3, [r0, #2]
   16dac:	bic	r3, r3, #32
   16db0:	cmp	r3, #70	; 0x46
   16db4:	bne	16e6c <__assert_fail@plt+0x5564>
   16db8:	ldrb	r3, [r0, #3]
   16dbc:	cmp	r3, #45	; 0x2d
   16dc0:	bne	16e6c <__assert_fail@plt+0x5564>
   16dc4:	ldrb	r3, [r0, #4]
   16dc8:	cmp	r3, #56	; 0x38
   16dcc:	bne	16e6c <__assert_fail@plt+0x5564>
   16dd0:	ldrb	r3, [r0, #5]
   16dd4:	cmp	r3, #0
   16dd8:	bne	16e6c <__assert_fail@plt+0x5564>
   16ddc:	ldrb	r2, [r4]
   16de0:	ldr	r3, [pc, #156]	; 16e84 <__assert_fail@plt+0x557c>
   16de4:	ldr	r4, [pc, #156]	; 16e88 <__assert_fail@plt+0x5580>
   16de8:	cmp	r2, #96	; 0x60
   16dec:	movne	r4, r3
   16df0:	b	16d7c <__assert_fail@plt+0x5474>
   16df4:	cmp	r3, #71	; 0x47
   16df8:	bne	16e6c <__assert_fail@plt+0x5564>
   16dfc:	ldrb	r3, [r0, #1]
   16e00:	bic	r3, r3, #32
   16e04:	cmp	r3, #66	; 0x42
   16e08:	bne	16e6c <__assert_fail@plt+0x5564>
   16e0c:	ldrb	r3, [r0, #2]
   16e10:	cmp	r3, #49	; 0x31
   16e14:	bne	16e6c <__assert_fail@plt+0x5564>
   16e18:	ldrb	r3, [r0, #3]
   16e1c:	cmp	r3, #56	; 0x38
   16e20:	bne	16e6c <__assert_fail@plt+0x5564>
   16e24:	ldrb	r3, [r0, #4]
   16e28:	cmp	r3, #48	; 0x30
   16e2c:	bne	16e6c <__assert_fail@plt+0x5564>
   16e30:	ldrb	r3, [r0, #5]
   16e34:	cmp	r3, #51	; 0x33
   16e38:	bne	16e6c <__assert_fail@plt+0x5564>
   16e3c:	ldrb	r3, [r0, #6]
   16e40:	cmp	r3, #48	; 0x30
   16e44:	bne	16e6c <__assert_fail@plt+0x5564>
   16e48:	ldrb	r3, [r0, #7]
   16e4c:	cmp	r3, #0
   16e50:	bne	16e6c <__assert_fail@plt+0x5564>
   16e54:	ldrb	r2, [r4]
   16e58:	ldr	r3, [pc, #44]	; 16e8c <__assert_fail@plt+0x5584>
   16e5c:	ldr	r4, [pc, #44]	; 16e90 <__assert_fail@plt+0x5588>
   16e60:	cmp	r2, #96	; 0x60
   16e64:	movne	r4, r3
   16e68:	b	16d7c <__assert_fail@plt+0x5474>
   16e6c:	ldr	r3, [pc, #32]	; 16e94 <__assert_fail@plt+0x558c>
   16e70:	ldr	r4, [pc, #32]	; 16e98 <__assert_fail@plt+0x5590>
   16e74:	cmp	r6, #9
   16e78:	movne	r4, r3
   16e7c:	mov	r0, r4
   16e80:	pop	{r4, r5, r6, pc}
   16e84:	andeq	lr, r1, ip, asr #24
   16e88:	andeq	lr, r1, r8, asr ip
   16e8c:	andeq	lr, r1, r0, asr ip
   16e90:	andeq	lr, r1, r4, asr ip
   16e94:	andeq	lr, r1, ip, asr ip
   16e98:	andeq	lr, r1, r8, asr #24
   16e9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ea0:	sub	sp, sp, #124	; 0x7c
   16ea4:	ldr	ip, [pc, #3576]	; 17ca4 <__assert_fail@plt+0x639c>
   16ea8:	str	r3, [sp, #24]
   16eac:	ldr	r3, [sp, #168]	; 0xa8
   16eb0:	ldr	ip, [ip]
   16eb4:	str	r3, [sp, #56]	; 0x38
   16eb8:	ldr	r3, [sp, #172]	; 0xac
   16ebc:	ldr	r8, [sp, #160]	; 0xa0
   16ec0:	str	r3, [sp, #80]	; 0x50
   16ec4:	ldr	r3, [sp, #176]	; 0xb0
   16ec8:	mov	fp, r0
   16ecc:	str	r3, [sp, #76]	; 0x4c
   16ed0:	mov	sl, r1
   16ed4:	str	r2, [sp, #36]	; 0x24
   16ed8:	str	ip, [sp, #116]	; 0x74
   16edc:	bl	11620 <__ctype_get_mb_cur_max@plt>
   16ee0:	ldr	r3, [sp, #164]	; 0xa4
   16ee4:	ands	r4, r3, #2
   16ee8:	movne	r3, #1
   16eec:	moveq	r3, #0
   16ef0:	str	r3, [sp, #32]
   16ef4:	str	r0, [sp, #64]	; 0x40
   16ef8:	cmp	r8, #10
   16efc:	ldrls	pc, [pc, r8, lsl #2]
   16f00:	b	186b0 <__assert_fail@plt+0x6da8>
   16f04:	strdeq	r7, [r1], -r8
   16f08:	muleq	r1, r0, r3
   16f0c:	muleq	r1, r0, r9
   16f10:			; <UNDEFINED> instruction: 0x000173b0
   16f14:	andeq	r7, r1, r4, ror #4
   16f18:	andeq	r7, r1, ip, lsr #5
   16f1c:	andeq	r7, r1, r8, lsr #6
   16f20:	andeq	r7, r1, r0, ror #6
   16f24:	andeq	r6, r1, r0, lsr pc
   16f28:	andeq	r6, r1, r0, lsr pc
   16f2c:	andeq	r6, r1, r0, lsr pc
   16f30:	cmp	r8, #10
   16f34:	beq	16f58 <__assert_fail@plt+0x5650>
   16f38:	mov	r1, r8
   16f3c:	ldr	r0, [pc, #3428]	; 17ca8 <__assert_fail@plt+0x63a0>
   16f40:	bl	16d54 <__assert_fail@plt+0x544c>
   16f44:	mov	r1, r8
   16f48:	str	r0, [sp, #80]	; 0x50
   16f4c:	ldr	r0, [pc, #3420]	; 17cb0 <__assert_fail@plt+0x63a8>
   16f50:	bl	16d54 <__assert_fail@plt+0x544c>
   16f54:	str	r0, [sp, #76]	; 0x4c
   16f58:	cmp	r4, #0
   16f5c:	movne	r4, #0
   16f60:	beq	18370 <__assert_fail@plt+0x6a68>
   16f64:	ldr	r7, [sp, #76]	; 0x4c
   16f68:	mov	r5, #0
   16f6c:	mov	r6, #1
   16f70:	mov	r0, r7
   16f74:	str	r6, [sp, #40]	; 0x28
   16f78:	str	r5, [sp, #68]	; 0x44
   16f7c:	bl	11728 <strlen@plt>
   16f80:	str	r6, [sp, #28]
   16f84:	str	r5, [sp, #44]	; 0x2c
   16f88:	str	r5, [sp, #72]	; 0x48
   16f8c:	str	r7, [sp, #60]	; 0x3c
   16f90:	str	r0, [sp, #52]	; 0x34
   16f94:	str	r8, [sp, #160]	; 0xa0
   16f98:	mov	r8, fp
   16f9c:	ldr	fp, [sp, #160]	; 0xa0
   16fa0:	mov	r9, #0
   16fa4:	ldr	r3, [sp, #24]
   16fa8:	cmn	r3, #1
   16fac:	beq	17514 <__assert_fail@plt+0x5c0c>
   16fb0:	ldr	r3, [sp, #24]
   16fb4:	subs	r6, r3, r9
   16fb8:	movne	r6, #1
   16fbc:	cmp	r6, #0
   16fc0:	beq	1752c <__assert_fail@plt+0x5c24>
   16fc4:	ldr	r7, [sp, #28]
   16fc8:	ldr	r0, [sp, #36]	; 0x24
   16fcc:	cmp	fp, #2
   16fd0:	moveq	r7, #0
   16fd4:	andne	r7, r7, #1
   16fd8:	add	r3, r0, r9
   16fdc:	cmp	r7, #0
   16fe0:	str	r3, [sp, #48]	; 0x30
   16fe4:	beq	179d0 <__assert_fail@plt+0x60c8>
   16fe8:	ldr	r2, [sp, #52]	; 0x34
   16fec:	cmp	r2, #0
   16ff0:	beq	17cb4 <__assert_fail@plt+0x63ac>
   16ff4:	ldr	r1, [sp, #24]
   16ff8:	cmp	r2, #1
   16ffc:	mov	r3, r2
   17000:	movls	r3, #0
   17004:	movhi	r3, #1
   17008:	cmn	r1, #1
   1700c:	movne	r3, #0
   17010:	cmp	r3, #0
   17014:	add	r5, r9, r2
   17018:	beq	17024 <__assert_fail@plt+0x571c>
   1701c:	bl	11728 <strlen@plt>
   17020:	str	r0, [sp, #24]
   17024:	ldr	r3, [sp, #24]
   17028:	cmp	r5, r3
   1702c:	bhi	17cb4 <__assert_fail@plt+0x63ac>
   17030:	ldr	r2, [sp, #52]	; 0x34
   17034:	ldr	r1, [sp, #60]	; 0x3c
   17038:	ldr	r0, [sp, #48]	; 0x30
   1703c:	bl	11578 <memcmp@plt>
   17040:	cmp	r0, #0
   17044:	bne	17cb4 <__assert_fail@plt+0x63ac>
   17048:	ldr	r3, [sp, #32]
   1704c:	cmp	r3, #0
   17050:	bne	18570 <__assert_fail@plt+0x6c68>
   17054:	ldr	r3, [sp, #48]	; 0x30
   17058:	ldrb	r5, [r3]
   1705c:	cmp	r5, #126	; 0x7e
   17060:	ldrls	pc, [pc, r5, lsl #2]
   17064:	b	17934 <__assert_fail@plt+0x602c>
   17068:	andeq	r7, r1, r0, lsr #16
   1706c:	andeq	r7, r1, r4, lsr r9
   17070:	andeq	r7, r1, r4, lsr r9
   17074:	andeq	r7, r1, r4, lsr r9
   17078:	andeq	r7, r1, r4, lsr r9
   1707c:	andeq	r7, r1, r4, lsr r9
   17080:	andeq	r7, r1, r4, lsr r9
   17084:	andeq	r7, r1, ip, ror #17
   17088:	ldrdeq	r7, [r1], -ip
   1708c:	ldrdeq	r7, [r1], -ip
   17090:	andeq	r7, r1, r4, lsr #15
   17094:	strdeq	r7, [r1], -ip
   17098:	andeq	r7, r1, r4, ror #15
   1709c:	andeq	r7, r1, r4, lsl r7
   170a0:	andeq	r7, r1, r4, lsr r9
   170a4:	andeq	r7, r1, r4, lsr r9
   170a8:	andeq	r7, r1, r4, lsr r9
   170ac:	andeq	r7, r1, r4, lsr r9
   170b0:	andeq	r7, r1, r4, lsr r9
   170b4:	andeq	r7, r1, r4, lsr r9
   170b8:	andeq	r7, r1, r4, lsr r9
   170bc:	andeq	r7, r1, r4, lsr r9
   170c0:	andeq	r7, r1, r4, lsr r9
   170c4:	andeq	r7, r1, r4, lsr r9
   170c8:	andeq	r7, r1, r4, lsr r9
   170cc:	andeq	r7, r1, r4, lsr r9
   170d0:	andeq	r7, r1, r4, lsr r9
   170d4:	andeq	r7, r1, r4, lsr r9
   170d8:	andeq	r7, r1, r4, lsr r9
   170dc:	andeq	r7, r1, r4, lsr r9
   170e0:	andeq	r7, r1, r4, lsr r9
   170e4:	andeq	r7, r1, r4, lsr r9
   170e8:	strdeq	r7, [r1], -r4
   170ec:	andeq	r7, r1, r8, lsl #16
   170f0:	andeq	r7, r1, r8, lsl #16
   170f4:	andeq	r7, r1, ip, lsl #18
   170f8:	andeq	r7, r1, r8, lsl #16
   170fc:	andeq	r7, r1, r8, lsr #18
   17100:	andeq	r7, r1, r8, lsl #16
   17104:	andeq	r7, r1, r8, asr #12
   17108:	andeq	r7, r1, r8, lsl #16
   1710c:	andeq	r7, r1, r8, lsl #16
   17110:	andeq	r7, r1, r8, lsl #16
   17114:	andeq	r7, r1, r8, lsr #18
   17118:	andeq	r7, r1, r8, lsr #18
   1711c:	andeq	r7, r1, r8, lsr #18
   17120:	andeq	r7, r1, r8, lsr #18
   17124:	andeq	r7, r1, r8, lsr #18
   17128:	andeq	r7, r1, r8, lsr #18
   1712c:	andeq	r7, r1, r8, lsr #18
   17130:	andeq	r7, r1, r8, lsr #18
   17134:	andeq	r7, r1, r8, lsr #18
   17138:	andeq	r7, r1, r8, lsr #18
   1713c:	andeq	r7, r1, r8, lsr #18
   17140:	andeq	r7, r1, r8, lsr #18
   17144:	andeq	r7, r1, r8, lsr #18
   17148:	andeq	r7, r1, r8, lsr #18
   1714c:	andeq	r7, r1, r8, lsr #18
   17150:	andeq	r7, r1, r8, lsr #18
   17154:	andeq	r7, r1, r8, lsl #16
   17158:	andeq	r7, r1, r8, lsl #16
   1715c:	andeq	r7, r1, r8, lsl #16
   17160:	andeq	r7, r1, r8, lsl #16
   17164:	andeq	r7, r1, ip, lsl r6
   17168:	andeq	r7, r1, r4, lsr r9
   1716c:	andeq	r7, r1, r8, lsr #18
   17170:	andeq	r7, r1, r8, lsr #18
   17174:	andeq	r7, r1, r8, lsr #18
   17178:	andeq	r7, r1, r8, lsr #18
   1717c:	andeq	r7, r1, r8, lsr #18
   17180:	andeq	r7, r1, r8, lsr #18
   17184:	andeq	r7, r1, r8, lsr #18
   17188:	andeq	r7, r1, r8, lsr #18
   1718c:	andeq	r7, r1, r8, lsr #18
   17190:	andeq	r7, r1, r8, lsr #18
   17194:	andeq	r7, r1, r8, lsr #18
   17198:	andeq	r7, r1, r8, lsr #18
   1719c:	andeq	r7, r1, r8, lsr #18
   171a0:	andeq	r7, r1, r8, lsr #18
   171a4:	andeq	r7, r1, r8, lsr #18
   171a8:	andeq	r7, r1, r8, lsr #18
   171ac:	andeq	r7, r1, r8, lsr #18
   171b0:	andeq	r7, r1, r8, lsr #18
   171b4:	andeq	r7, r1, r8, lsr #18
   171b8:	andeq	r7, r1, r8, lsr #18
   171bc:	andeq	r7, r1, r8, lsr #18
   171c0:	andeq	r7, r1, r8, lsr #18
   171c4:	andeq	r7, r1, r8, lsr #18
   171c8:	andeq	r7, r1, r8, lsr #18
   171cc:	andeq	r7, r1, r8, lsr #18
   171d0:	andeq	r7, r1, r8, lsr #18
   171d4:	andeq	r7, r1, r8, lsl #16
   171d8:	ldrdeq	r7, [r1], -r4
   171dc:	andeq	r7, r1, r8, lsr #18
   171e0:	andeq	r7, r1, r8, lsl #16
   171e4:	andeq	r7, r1, r8, lsr #18
   171e8:	andeq	r7, r1, r8, lsl #16
   171ec:	andeq	r7, r1, r8, lsr #18
   171f0:	andeq	r7, r1, r8, lsr #18
   171f4:	andeq	r7, r1, r8, lsr #18
   171f8:	andeq	r7, r1, r8, lsr #18
   171fc:	andeq	r7, r1, r8, lsr #18
   17200:	andeq	r7, r1, r8, lsr #18
   17204:	andeq	r7, r1, r8, lsr #18
   17208:	andeq	r7, r1, r8, lsr #18
   1720c:	andeq	r7, r1, r8, lsr #18
   17210:	andeq	r7, r1, r8, lsr #18
   17214:	andeq	r7, r1, r8, lsr #18
   17218:	andeq	r7, r1, r8, lsr #18
   1721c:	andeq	r7, r1, r8, lsr #18
   17220:	andeq	r7, r1, r8, lsr #18
   17224:	andeq	r7, r1, r8, lsr #18
   17228:	andeq	r7, r1, r8, lsr #18
   1722c:	andeq	r7, r1, r8, lsr #18
   17230:	andeq	r7, r1, r8, lsr #18
   17234:	andeq	r7, r1, r8, lsr #18
   17238:	andeq	r7, r1, r8, lsr #18
   1723c:	andeq	r7, r1, r8, lsr #18
   17240:	andeq	r7, r1, r8, lsr #18
   17244:	andeq	r7, r1, r8, lsr #18
   17248:	andeq	r7, r1, r8, lsr #18
   1724c:	andeq	r7, r1, r8, lsr #18
   17250:	andeq	r7, r1, r8, lsr #18
   17254:	andeq	r7, r1, ip, ror #7
   17258:	andeq	r7, r1, r8, lsl #16
   1725c:	andeq	r7, r1, ip, ror #7
   17260:	andeq	r7, r1, ip, lsl #18
   17264:	cmp	r4, #0
   17268:	moveq	r3, #1
   1726c:	streq	r3, [sp, #28]
   17270:	beq	1799c <__assert_fail@plt+0x6094>
   17274:	mov	r3, #0
   17278:	mov	r4, r3
   1727c:	mov	r2, #1
   17280:	str	r2, [sp, #40]	; 0x28
   17284:	str	r3, [sp, #68]	; 0x44
   17288:	str	r2, [sp, #32]
   1728c:	str	r2, [sp, #52]	; 0x34
   17290:	ldr	r3, [pc, #2584]	; 17cb0 <__assert_fail@plt+0x63a8>
   17294:	str	r4, [sp, #44]	; 0x2c
   17298:	str	r4, [sp, #72]	; 0x48
   1729c:	str	r4, [sp, #28]
   172a0:	str	r3, [sp, #60]	; 0x3c
   172a4:	mov	r8, #2
   172a8:	b	16f94 <__assert_fail@plt+0x568c>
   172ac:	cmp	r4, #0
   172b0:	bne	1853c <__assert_fail@plt+0x6c34>
   172b4:	cmp	sl, #0
   172b8:	beq	182fc <__assert_fail@plt+0x69f4>
   172bc:	mov	r3, #34	; 0x22
   172c0:	strb	r3, [fp]
   172c4:	ldr	r3, [pc, #2528]	; 17cac <__assert_fail@plt+0x63a4>
   172c8:	mov	r1, r4
   172cc:	mov	r2, #1
   172d0:	str	r4, [sp, #68]	; 0x44
   172d4:	str	r2, [sp, #40]	; 0x28
   172d8:	mov	r4, r2
   172dc:	str	r1, [sp, #44]	; 0x2c
   172e0:	str	r1, [sp, #72]	; 0x48
   172e4:	str	r1, [sp, #32]
   172e8:	str	r2, [sp, #28]
   172ec:	str	r2, [sp, #52]	; 0x34
   172f0:	str	r3, [sp, #60]	; 0x3c
   172f4:	b	16f94 <__assert_fail@plt+0x568c>
   172f8:	mov	r3, #0
   172fc:	str	r3, [sp, #68]	; 0x44
   17300:	str	r3, [sp, #44]	; 0x2c
   17304:	str	r3, [sp, #32]
   17308:	str	r3, [sp, #28]
   1730c:	str	r3, [sp, #60]	; 0x3c
   17310:	mov	r3, #1
   17314:	str	r8, [sp, #72]	; 0x48
   17318:	str	r8, [sp, #52]	; 0x34
   1731c:	mov	r4, r8
   17320:	str	r3, [sp, #40]	; 0x28
   17324:	b	16f94 <__assert_fail@plt+0x568c>
   17328:	mov	r3, #1
   1732c:	str	r3, [sp, #40]	; 0x28
   17330:	str	r3, [sp, #32]
   17334:	str	r3, [sp, #28]
   17338:	str	r3, [sp, #52]	; 0x34
   1733c:	ldr	r3, [pc, #2408]	; 17cac <__assert_fail@plt+0x63a4>
   17340:	mov	r2, #0
   17344:	mov	r4, r2
   17348:	str	r2, [sp, #68]	; 0x44
   1734c:	str	r2, [sp, #44]	; 0x2c
   17350:	str	r2, [sp, #72]	; 0x48
   17354:	str	r3, [sp, #60]	; 0x3c
   17358:	mov	r8, #5
   1735c:	b	16f94 <__assert_fail@plt+0x568c>
   17360:	mov	r3, #0
   17364:	mov	r2, #1
   17368:	str	r2, [sp, #40]	; 0x28
   1736c:	mov	r4, r3
   17370:	str	r3, [sp, #68]	; 0x44
   17374:	str	r2, [sp, #28]
   17378:	str	r3, [sp, #44]	; 0x2c
   1737c:	str	r3, [sp, #72]	; 0x48
   17380:	str	r3, [sp, #32]
   17384:	str	r3, [sp, #52]	; 0x34
   17388:	str	r3, [sp, #60]	; 0x3c
   1738c:	b	16f94 <__assert_fail@plt+0x568c>
   17390:	mov	r2, #1
   17394:	mov	r3, #0
   17398:	str	r2, [sp, #40]	; 0x28
   1739c:	mov	r4, r3
   173a0:	str	r3, [sp, #68]	; 0x44
   173a4:	str	r8, [sp, #52]	; 0x34
   173a8:	str	r2, [sp, #32]
   173ac:	b	17290 <__assert_fail@plt+0x5988>
   173b0:	mov	r3, #1
   173b4:	str	r3, [sp, #40]	; 0x28
   173b8:	str	r3, [sp, #32]
   173bc:	str	r3, [sp, #28]
   173c0:	str	r3, [sp, #52]	; 0x34
   173c4:	ldr	r3, [pc, #2276]	; 17cb0 <__assert_fail@plt+0x63a8>
   173c8:	mov	r2, #0
   173cc:	mov	r4, r2
   173d0:	str	r2, [sp, #68]	; 0x44
   173d4:	str	r2, [sp, #44]	; 0x2c
   173d8:	str	r2, [sp, #72]	; 0x48
   173dc:	str	r3, [sp, #60]	; 0x3c
   173e0:	mov	r8, #2
   173e4:	b	16f94 <__assert_fail@plt+0x568c>
   173e8:	mov	r7, #0
   173ec:	ldr	r3, [sp, #24]
   173f0:	cmn	r3, #1
   173f4:	beq	17f30 <__assert_fail@plt+0x6628>
   173f8:	ldr	r3, [sp, #24]
   173fc:	subs	r3, r3, #1
   17400:	movne	r3, #1
   17404:	cmp	r3, #0
   17408:	sub	r2, fp, #2
   1740c:	clz	r2, r2
   17410:	lsr	r2, r2, #5
   17414:	bne	17610 <__assert_fail@plt+0x5d08>
   17418:	cmp	r9, #0
   1741c:	bne	17610 <__assert_fail@plt+0x5d08>
   17420:	ldr	r3, [sp, #32]
   17424:	tst	r3, r2
   17428:	bne	17730 <__assert_fail@plt+0x5e28>
   1742c:	ldr	r3, [sp, #28]
   17430:	eor	r3, r3, #1
   17434:	orr	r3, r2, r3
   17438:	ldr	r2, [sp, #32]
   1743c:	eor	r3, r3, #1
   17440:	orrs	r3, r2, r3
   17444:	beq	17474 <__assert_fail@plt+0x5b6c>
   17448:	mov	r3, #0
   1744c:	ldr	r1, [sp, #56]	; 0x38
   17450:	cmp	r1, #0
   17454:	beq	17474 <__assert_fail@plt+0x5b6c>
   17458:	lsr	r2, r5, #5
   1745c:	and	r0, r5, #31
   17460:	uxtb	r2, r2
   17464:	ldr	r1, [r1, r2, lsl #2]
   17468:	lsr	r2, r1, r0
   1746c:	tst	r2, #1
   17470:	bne	1747c <__assert_fail@plt+0x5b74>
   17474:	cmp	r7, #0
   17478:	beq	176cc <__assert_fail@plt+0x5dc4>
   1747c:	sub	r2, fp, #2
   17480:	clz	r2, r2
   17484:	lsr	r2, r2, #5
   17488:	ldr	r3, [sp, #32]
   1748c:	cmp	r3, #0
   17490:	bne	177bc <__assert_fail@plt+0x5eb4>
   17494:	ldr	r3, [sp, #44]	; 0x2c
   17498:	eor	r3, r3, #1
   1749c:	ands	r3, r2, r3
   174a0:	beq	174d8 <__assert_fail@plt+0x5bd0>
   174a4:	cmp	sl, r4
   174a8:	movhi	r2, #39	; 0x27
   174ac:	strbhi	r2, [r8, r4]
   174b0:	add	r2, r4, #1
   174b4:	cmp	r2, sl
   174b8:	movcc	r1, #36	; 0x24
   174bc:	strbcc	r1, [r8, r2]
   174c0:	add	r2, r4, #2
   174c4:	cmp	r2, sl
   174c8:	add	r4, r4, #3
   174cc:	movcc	r1, #39	; 0x27
   174d0:	strbcc	r1, [r8, r2]
   174d4:	str	r3, [sp, #44]	; 0x2c
   174d8:	cmp	r4, sl
   174dc:	movcc	r3, #92	; 0x5c
   174e0:	strbcc	r3, [r8, r4]
   174e4:	add	r9, r9, #1
   174e8:	add	r4, r4, #1
   174ec:	cmp	r4, sl
   174f0:	ldr	r3, [sp, #40]	; 0x28
   174f4:	strbcc	r5, [r8, r4]
   174f8:	cmp	r6, #0
   174fc:	moveq	r3, #0
   17500:	str	r3, [sp, #40]	; 0x28
   17504:	ldr	r3, [sp, #24]
   17508:	add	r4, r4, #1
   1750c:	cmn	r3, #1
   17510:	bne	16fb0 <__assert_fail@plt+0x56a8>
   17514:	ldr	r3, [sp, #36]	; 0x24
   17518:	ldrb	r6, [r3, r9]
   1751c:	adds	r6, r6, #0
   17520:	movne	r6, #1
   17524:	cmp	r6, #0
   17528:	bne	16fc4 <__assert_fail@plt+0x56bc>
   1752c:	str	fp, [sp, #160]	; 0xa0
   17530:	mov	fp, r8
   17534:	ldr	r8, [sp, #160]	; 0xa0
   17538:	ldr	r1, [sp, #32]
   1753c:	cmp	r4, #0
   17540:	sub	r2, r8, #2
   17544:	clz	r2, r2
   17548:	lsr	r2, r2, #5
   1754c:	andeq	r3, r2, r1
   17550:	movne	r3, #0
   17554:	cmp	r3, #0
   17558:	bne	18644 <__assert_fail@plt+0x6d3c>
   1755c:	eor	r3, r1, #1
   17560:	ands	r2, r2, r3
   17564:	beq	18580 <__assert_fail@plt+0x6c78>
   17568:	ldr	r3, [sp, #68]	; 0x44
   1756c:	cmp	r3, #0
   17570:	beq	18584 <__assert_fail@plt+0x6c7c>
   17574:	ldr	r3, [sp, #40]	; 0x28
   17578:	cmp	r3, #0
   1757c:	bne	18600 <__assert_fail@plt+0x6cf8>
   17580:	ldr	r3, [sp, #72]	; 0x48
   17584:	adds	r3, r3, #0
   17588:	movne	r3, #1
   1758c:	cmp	sl, #0
   17590:	movne	r3, #0
   17594:	cmp	r3, #0
   17598:	ldreq	r2, [sp, #68]	; 0x44
   1759c:	beq	18584 <__assert_fail@plt+0x6c7c>
   175a0:	ldr	sl, [sp, #72]	; 0x48
   175a4:	str	r3, [sp, #68]	; 0x44
   175a8:	ldr	r3, [pc, #1792]	; 17cb0 <__assert_fail@plt+0x63a8>
   175ac:	mov	r2, #39	; 0x27
   175b0:	mov	r4, #1
   175b4:	str	r3, [sp, #60]	; 0x3c
   175b8:	mov	r3, #0
   175bc:	strb	r2, [fp]
   175c0:	str	r4, [sp, #52]	; 0x34
   175c4:	mov	r8, #2
   175c8:	str	r3, [sp, #32]
   175cc:	b	16f94 <__assert_fail@plt+0x568c>
   175d0:	mov	r7, #0
   175d4:	cmp	fp, #2
   175d8:	beq	17f10 <__assert_fail@plt+0x6608>
   175dc:	ldr	r3, [sp, #52]	; 0x34
   175e0:	ldr	r2, [sp, #28]
   175e4:	ldr	r1, [sp, #32]
   175e8:	cmp	r3, #0
   175ec:	andne	r2, r2, r1
   175f0:	moveq	r2, #0
   175f4:	cmp	r2, #0
   175f8:	moveq	r5, #92	; 0x5c
   175fc:	moveq	r3, r5
   17600:	bne	17f1c <__assert_fail@plt+0x6614>
   17604:	ldr	r1, [sp, #28]
   17608:	cmp	r1, #0
   1760c:	bne	1868c <__assert_fail@plt+0x6d84>
   17610:	mov	r6, #0
   17614:	b	1742c <__assert_fail@plt+0x5b24>
   17618:	mov	r7, #0
   1761c:	cmp	fp, #2
   17620:	beq	17f80 <__assert_fail@plt+0x6678>
   17624:	cmp	fp, #5
   17628:	beq	17f44 <__assert_fail@plt+0x663c>
   1762c:	sub	r2, fp, #2
   17630:	mov	r6, #0
   17634:	clz	r2, r2
   17638:	mov	r5, #63	; 0x3f
   1763c:	lsr	r2, r2, #5
   17640:	b	1742c <__assert_fail@plt+0x5b24>
   17644:	mov	r7, #0
   17648:	cmp	fp, #2
   1764c:	strne	r6, [sp, #68]	; 0x44
   17650:	movne	r2, #0
   17654:	movne	r5, #39	; 0x27
   17658:	bne	1742c <__assert_fail@plt+0x5b24>
   1765c:	ldr	r3, [sp, #32]
   17660:	cmp	r3, #0
   17664:	bne	18360 <__assert_fail@plt+0x6a58>
   17668:	cmp	sl, #0
   1766c:	ldr	r3, [sp, #72]	; 0x48
   17670:	clz	r3, r3
   17674:	lsr	r3, r3, #5
   17678:	moveq	r3, #0
   1767c:	cmp	r3, #0
   17680:	bne	18294 <__assert_fail@plt+0x698c>
   17684:	cmp	sl, r4
   17688:	movhi	r3, #39	; 0x27
   1768c:	strbhi	r3, [r8, r4]
   17690:	add	r3, r4, #1
   17694:	cmp	sl, r3
   17698:	movhi	r2, #92	; 0x5c
   1769c:	strbhi	r2, [r8, r3]
   176a0:	add	r3, r4, #2
   176a4:	cmp	sl, r3
   176a8:	movhi	r2, #39	; 0x27
   176ac:	strbhi	r2, [r8, r3]
   176b0:	mov	r3, #0
   176b4:	cmp	r7, #0
   176b8:	add	r4, r4, #3
   176bc:	str	r3, [sp, #44]	; 0x2c
   176c0:	str	r6, [sp, #68]	; 0x44
   176c4:	mov	r5, #39	; 0x27
   176c8:	bne	1747c <__assert_fail@plt+0x5b74>
   176cc:	ldr	r2, [sp, #44]	; 0x2c
   176d0:	eor	r3, r3, #1
   176d4:	and	r3, r3, r2
   176d8:	add	r9, r9, #1
   176dc:	uxtb	r3, r3
   176e0:	cmp	r3, #0
   176e4:	beq	174ec <__assert_fail@plt+0x5be4>
   176e8:	cmp	sl, r4
   176ec:	movhi	r3, #39	; 0x27
   176f0:	strbhi	r3, [r8, r4]
   176f4:	add	r3, r4, #1
   176f8:	cmp	sl, r3
   176fc:	movhi	r2, #39	; 0x27
   17700:	strbhi	r2, [r8, r3]
   17704:	mov	r3, #0
   17708:	add	r4, r4, #2
   1770c:	str	r3, [sp, #44]	; 0x2c
   17710:	b	174ec <__assert_fail@plt+0x5be4>
   17714:	mov	r3, #114	; 0x72
   17718:	ldr	r1, [sp, #32]
   1771c:	sub	r2, fp, #2
   17720:	clz	r2, r2
   17724:	lsr	r2, r2, #5
   17728:	tst	r2, r1
   1772c:	beq	17604 <__assert_fail@plt+0x5cfc>
   17730:	mov	fp, r8
   17734:	mov	r8, #2
   17738:	ldr	r3, [sp, #28]
   1773c:	cmp	r3, #0
   17740:	movne	r8, #4
   17744:	ldr	r3, [sp, #164]	; 0xa4
   17748:	mov	ip, #0
   1774c:	bic	r3, r3, #2
   17750:	str	r3, [sp, #4]
   17754:	ldr	r3, [sp, #76]	; 0x4c
   17758:	str	r8, [sp]
   1775c:	str	r3, [sp, #16]
   17760:	ldr	r3, [sp, #80]	; 0x50
   17764:	ldr	r2, [sp, #36]	; 0x24
   17768:	str	r3, [sp, #12]
   1776c:	mov	r1, sl
   17770:	ldr	r3, [sp, #24]
   17774:	mov	r0, fp
   17778:	str	ip, [sp, #8]
   1777c:	bl	16e9c <__assert_fail@plt+0x5594>
   17780:	mov	r4, r0
   17784:	ldr	r3, [pc, #1304]	; 17ca4 <__assert_fail@plt+0x639c>
   17788:	ldr	r2, [sp, #116]	; 0x74
   1778c:	mov	r0, r4
   17790:	ldr	r3, [r3]
   17794:	cmp	r2, r3
   17798:	bne	18688 <__assert_fail@plt+0x6d80>
   1779c:	add	sp, sp, #124	; 0x7c
   177a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177a4:	mov	r5, #110	; 0x6e
   177a8:	ldr	r3, [sp, #32]
   177ac:	mov	r2, #0
   177b0:	cmp	r3, #0
   177b4:	mov	r6, r2
   177b8:	beq	17494 <__assert_fail@plt+0x5b8c>
   177bc:	str	fp, [sp, #160]	; 0xa0
   177c0:	mov	fp, r8
   177c4:	ldr	r8, [sp, #160]	; 0xa0
   177c8:	mov	r3, r2
   177cc:	ldr	r2, [sp, #28]
   177d0:	and	r2, r2, r3
   177d4:	str	r2, [sp, #28]
   177d8:	b	17738 <__assert_fail@plt+0x5e30>
   177dc:	mov	r5, #116	; 0x74
   177e0:	b	177a8 <__assert_fail@plt+0x5ea0>
   177e4:	mov	r5, #102	; 0x66
   177e8:	ldr	r3, [sp, #32]
   177ec:	cmp	r3, #0
   177f0:	bne	1839c <__assert_fail@plt+0x6a94>
   177f4:	mov	r6, #0
   177f8:	b	174d8 <__assert_fail@plt+0x5bd0>
   177fc:	mov	r5, #118	; 0x76
   17800:	b	177e8 <__assert_fail@plt+0x5ee0>
   17804:	mov	r7, #0
   17808:	mov	r6, #0
   1780c:	b	17448 <__assert_fail@plt+0x5b40>
   17810:	ldr	r3, [sp, #32]
   17814:	cmp	r3, #0
   17818:	bne	185e0 <__assert_fail@plt+0x6cd8>
   1781c:	mov	r7, r3
   17820:	ldr	r3, [sp, #44]	; 0x2c
   17824:	sub	r2, fp, #2
   17828:	eor	r3, r3, #1
   1782c:	clz	r2, r2
   17830:	lsr	r2, r2, #5
   17834:	ands	r3, r2, r3
   17838:	beq	18280 <__assert_fail@plt+0x6978>
   1783c:	cmp	sl, r4
   17840:	movhi	r1, #39	; 0x27
   17844:	strbhi	r1, [r8, r4]
   17848:	add	r1, r4, #1
   1784c:	cmp	sl, r1
   17850:	movhi	r0, #36	; 0x24
   17854:	strbhi	r0, [r8, r1]
   17858:	add	r1, r4, #2
   1785c:	cmp	sl, r1
   17860:	movhi	r0, #39	; 0x27
   17864:	strbhi	r0, [r8, r1]
   17868:	add	r1, r4, #3
   1786c:	cmp	sl, r1
   17870:	bls	182e0 <__assert_fail@plt+0x69d8>
   17874:	mov	r4, r1
   17878:	mov	r1, #92	; 0x5c
   1787c:	strb	r1, [r8, r4]
   17880:	mov	r1, r4
   17884:	str	r3, [sp, #44]	; 0x2c
   17888:	cmp	fp, #2
   1788c:	add	r4, r4, #1
   17890:	beq	18328 <__assert_fail@plt+0x6a20>
   17894:	ldr	r0, [sp, #24]
   17898:	add	r3, r9, #1
   1789c:	cmp	r3, r0
   178a0:	bcs	178b8 <__assert_fail@plt+0x5fb0>
   178a4:	ldr	r0, [sp, #36]	; 0x24
   178a8:	ldrb	r3, [r0, r3]
   178ac:	sub	r3, r3, #48	; 0x30
   178b0:	cmp	r3, #9
   178b4:	bls	18338 <__assert_fail@plt+0x6a30>
   178b8:	mov	r5, #48	; 0x30
   178bc:	ldr	r3, [sp, #28]
   178c0:	eor	r3, r3, #1
   178c4:	orrs	r2, r2, r3
   178c8:	mov	r3, r6
   178cc:	moveq	r6, r2
   178d0:	beq	1744c <__assert_fail@plt+0x5b44>
   178d4:	mov	r6, #0
   178d8:	b	17474 <__assert_fail@plt+0x5b6c>
   178dc:	mov	r2, #0
   178e0:	mov	r6, r2
   178e4:	mov	r5, #98	; 0x62
   178e8:	b	17494 <__assert_fail@plt+0x5b8c>
   178ec:	mov	r5, #97	; 0x61
   178f0:	b	177f4 <__assert_fail@plt+0x5eec>
   178f4:	mov	r3, r7
   178f8:	mov	r6, r7
   178fc:	mov	r2, #0
   17900:	mov	r7, r3
   17904:	mov	r5, #32
   17908:	b	1742c <__assert_fail@plt+0x5b24>
   1790c:	cmp	r9, #0
   17910:	mov	r3, r7
   17914:	bne	17edc <__assert_fail@plt+0x65d4>
   17918:	mov	r6, r7
   1791c:	mov	r2, r9
   17920:	mov	r7, r3
   17924:	b	1742c <__assert_fail@plt+0x5b24>
   17928:	mov	r6, r7
   1792c:	b	17448 <__assert_fail@plt+0x5b40>
   17930:	mov	r7, #0
   17934:	ldr	r3, [sp, #64]	; 0x40
   17938:	cmp	r3, #1
   1793c:	bne	17f98 <__assert_fail@plt+0x6690>
   17940:	bl	116f8 <__ctype_b_loc@plt>
   17944:	ldr	r2, [sp, #64]	; 0x40
   17948:	sxth	r3, r5
   1794c:	mov	ip, r2
   17950:	lsl	r3, r3, #1
   17954:	ldr	r2, [r0]
   17958:	ldrh	r3, [r2, r3]
   1795c:	and	r3, r3, #16384	; 0x4000
   17960:	cmp	r3, #0
   17964:	ldr	r3, [sp, #28]
   17968:	movne	r6, #1
   1796c:	moveq	r6, #0
   17970:	movne	r2, #0
   17974:	andeq	r2, r3, #1
   17978:	cmp	r2, #0
   1797c:	bne	182a8 <__assert_fail@plt+0x69a0>
   17980:	sub	r2, fp, #2
   17984:	clz	r2, r2
   17988:	lsr	r2, r2, #5
   1798c:	b	1742c <__assert_fail@plt+0x5b24>
   17990:	cmp	r4, #0
   17994:	bne	18654 <__assert_fail@plt+0x6d4c>
   17998:	str	r4, [sp, #28]
   1799c:	cmp	sl, #0
   179a0:	bne	18698 <__assert_fail@plt+0x6d90>
   179a4:	ldr	r3, [pc, #772]	; 17cb0 <__assert_fail@plt+0x63a8>
   179a8:	mov	r4, #1
   179ac:	str	r4, [sp, #40]	; 0x28
   179b0:	str	r3, [sp, #60]	; 0x3c
   179b4:	str	r4, [sp, #52]	; 0x34
   179b8:	str	sl, [sp, #72]	; 0x48
   179bc:	str	sl, [sp, #68]	; 0x44
   179c0:	str	sl, [sp, #44]	; 0x2c
   179c4:	str	sl, [sp, #32]
   179c8:	mov	r8, #2
   179cc:	b	16f94 <__assert_fail@plt+0x568c>
   179d0:	ldr	r3, [sp, #36]	; 0x24
   179d4:	ldrb	r5, [r3, r9]
   179d8:	cmp	r5, #126	; 0x7e
   179dc:	ldrls	pc, [pc, r5, lsl #2]
   179e0:	b	17934 <__assert_fail@plt+0x602c>
   179e4:	andeq	r7, r1, r8, lsl ip
   179e8:	andeq	r7, r1, r4, lsr r9
   179ec:	andeq	r7, r1, r4, lsr r9
   179f0:	andeq	r7, r1, r4, lsr r9
   179f4:	andeq	r7, r1, r4, lsr r9
   179f8:	andeq	r7, r1, r4, lsr r9
   179fc:	andeq	r7, r1, r4, lsr r9
   17a00:	andeq	r7, r1, r4, lsl #24
   17a04:	strdeq	r7, [r1], -r0
   17a08:	andeq	r7, r1, r8, ror #23
   17a0c:	andeq	r7, r1, r0, ror #23
   17a10:	muleq	r1, r0, ip
   17a14:	andeq	r7, r1, ip, ror ip
   17a18:	andeq	r7, r1, r4, lsl r7
   17a1c:	andeq	r7, r1, r4, lsr r9
   17a20:	andeq	r7, r1, r4, lsr r9
   17a24:	andeq	r7, r1, r4, lsr r9
   17a28:	andeq	r7, r1, r4, lsr r9
   17a2c:	andeq	r7, r1, r4, lsr r9
   17a30:	andeq	r7, r1, r4, lsr r9
   17a34:	andeq	r7, r1, r4, lsr r9
   17a38:	andeq	r7, r1, r4, lsr r9
   17a3c:	andeq	r7, r1, r4, lsr r9
   17a40:	andeq	r7, r1, r4, lsr r9
   17a44:	andeq	r7, r1, r4, lsr r9
   17a48:	andeq	r7, r1, r4, lsr r9
   17a4c:	andeq	r7, r1, r4, lsr r9
   17a50:	andeq	r7, r1, r4, lsr r9
   17a54:	andeq	r7, r1, r4, lsr r9
   17a58:	andeq	r7, r1, r4, lsr r9
   17a5c:	andeq	r7, r1, r4, lsr r9
   17a60:	andeq	r7, r1, r4, lsr r9
   17a64:	andeq	r7, r1, ip, ror #24
   17a68:	andeq	r7, r1, r8, asr ip
   17a6c:	andeq	r7, r1, r8, asr ip
   17a70:	andeq	r7, r1, r8, asr #24
   17a74:	andeq	r7, r1, r8, asr ip
   17a78:	andeq	r7, r1, r0, lsl #19
   17a7c:	andeq	r7, r1, r8, asr ip
   17a80:	andeq	r7, r1, r8, asr #12
   17a84:	andeq	r7, r1, r8, asr ip
   17a88:	andeq	r7, r1, r8, asr ip
   17a8c:	andeq	r7, r1, r8, asr ip
   17a90:	andeq	r7, r1, r0, lsl #19
   17a94:	andeq	r7, r1, r0, lsl #19
   17a98:	andeq	r7, r1, r0, lsl #19
   17a9c:	andeq	r7, r1, r0, lsl #19
   17aa0:	andeq	r7, r1, r0, lsl #19
   17aa4:	andeq	r7, r1, r0, lsl #19
   17aa8:	andeq	r7, r1, r0, lsl #19
   17aac:	andeq	r7, r1, r0, lsl #19
   17ab0:	andeq	r7, r1, r0, lsl #19
   17ab4:	andeq	r7, r1, r0, lsl #19
   17ab8:	andeq	r7, r1, r0, lsl #19
   17abc:	andeq	r7, r1, r0, lsl #19
   17ac0:	andeq	r7, r1, r0, lsl #19
   17ac4:	andeq	r7, r1, r0, lsl #19
   17ac8:	andeq	r7, r1, r0, lsl #19
   17acc:	andeq	r7, r1, r0, lsl #19
   17ad0:	andeq	r7, r1, r8, asr ip
   17ad4:	andeq	r7, r1, r8, asr ip
   17ad8:	andeq	r7, r1, r8, asr ip
   17adc:	andeq	r7, r1, r8, asr ip
   17ae0:	andeq	r7, r1, ip, lsl r6
   17ae4:	andeq	r7, r1, r4, lsr r9
   17ae8:	andeq	r7, r1, r0, lsl #19
   17aec:	andeq	r7, r1, r0, lsl #19
   17af0:	andeq	r7, r1, r0, lsl #19
   17af4:	andeq	r7, r1, r0, lsl #19
   17af8:	andeq	r7, r1, r0, lsl #19
   17afc:	andeq	r7, r1, r0, lsl #19
   17b00:	andeq	r7, r1, r0, lsl #19
   17b04:	andeq	r7, r1, r0, lsl #19
   17b08:	andeq	r7, r1, r0, lsl #19
   17b0c:	andeq	r7, r1, r0, lsl #19
   17b10:	andeq	r7, r1, r0, lsl #19
   17b14:	andeq	r7, r1, r0, lsl #19
   17b18:	andeq	r7, r1, r0, lsl #19
   17b1c:	andeq	r7, r1, r0, lsl #19
   17b20:	andeq	r7, r1, r0, lsl #19
   17b24:	andeq	r7, r1, r0, lsl #19
   17b28:	andeq	r7, r1, r0, lsl #19
   17b2c:	andeq	r7, r1, r0, lsl #19
   17b30:	andeq	r7, r1, r0, lsl #19
   17b34:	andeq	r7, r1, r0, lsl #19
   17b38:	andeq	r7, r1, r0, lsl #19
   17b3c:	andeq	r7, r1, r0, lsl #19
   17b40:	andeq	r7, r1, r0, lsl #19
   17b44:	andeq	r7, r1, r0, lsl #19
   17b48:	andeq	r7, r1, r0, lsl #19
   17b4c:	andeq	r7, r1, r0, lsl #19
   17b50:	andeq	r7, r1, r8, asr ip
   17b54:	ldrdeq	r7, [r1], -r4
   17b58:	andeq	r7, r1, r0, lsl #19
   17b5c:	andeq	r7, r1, r8, asr ip
   17b60:	andeq	r7, r1, r0, lsl #19
   17b64:	andeq	r7, r1, r8, asr ip
   17b68:	andeq	r7, r1, r0, lsl #19
   17b6c:	andeq	r7, r1, r0, lsl #19
   17b70:	andeq	r7, r1, r0, lsl #19
   17b74:	andeq	r7, r1, r0, lsl #19
   17b78:	andeq	r7, r1, r0, lsl #19
   17b7c:	andeq	r7, r1, r0, lsl #19
   17b80:	andeq	r7, r1, r0, lsl #19
   17b84:	andeq	r7, r1, r0, lsl #19
   17b88:	andeq	r7, r1, r0, lsl #19
   17b8c:	andeq	r7, r1, r0, lsl #19
   17b90:	andeq	r7, r1, r0, lsl #19
   17b94:	andeq	r7, r1, r0, lsl #19
   17b98:	andeq	r7, r1, r0, lsl #19
   17b9c:	andeq	r7, r1, r0, lsl #19
   17ba0:	andeq	r7, r1, r0, lsl #19
   17ba4:	andeq	r7, r1, r0, lsl #19
   17ba8:	andeq	r7, r1, r0, lsl #19
   17bac:	andeq	r7, r1, r0, lsl #19
   17bb0:	andeq	r7, r1, r0, lsl #19
   17bb4:	andeq	r7, r1, r0, lsl #19
   17bb8:	andeq	r7, r1, r0, lsl #19
   17bbc:	andeq	r7, r1, r0, lsl #19
   17bc0:	andeq	r7, r1, r0, lsl #19
   17bc4:	andeq	r7, r1, r0, lsl #19
   17bc8:	andeq	r7, r1, r0, lsl #19
   17bcc:	andeq	r7, r1, r0, lsl #19
   17bd0:	andeq	r7, r1, ip, ror #7
   17bd4:	andeq	r7, r1, r8, asr ip
   17bd8:	andeq	r7, r1, ip, ror #7
   17bdc:	andeq	r7, r1, r8, asr #24
   17be0:	mov	r3, #110	; 0x6e
   17be4:	b	17718 <__assert_fail@plt+0x5e10>
   17be8:	mov	r3, #116	; 0x74
   17bec:	b	17718 <__assert_fail@plt+0x5e10>
   17bf0:	sub	r2, fp, #2
   17bf4:	mov	r3, #98	; 0x62
   17bf8:	clz	r2, r2
   17bfc:	lsr	r2, r2, #5
   17c00:	b	17604 <__assert_fail@plt+0x5cfc>
   17c04:	sub	r2, fp, #2
   17c08:	mov	r3, #97	; 0x61
   17c0c:	clz	r2, r2
   17c10:	lsr	r2, r2, #5
   17c14:	b	17604 <__assert_fail@plt+0x5cfc>
   17c18:	ldr	r3, [sp, #28]
   17c1c:	cmp	r3, #0
   17c20:	bne	17810 <__assert_fail@plt+0x5f08>
   17c24:	ldr	r3, [sp, #164]	; 0xa4
   17c28:	tst	r3, #1
   17c2c:	bne	182a0 <__assert_fail@plt+0x6998>
   17c30:	ldr	r6, [sp, #28]
   17c34:	sub	r2, fp, #2
   17c38:	mov	r7, r6
   17c3c:	clz	r2, r2
   17c40:	lsr	r2, r2, #5
   17c44:	b	1742c <__assert_fail@plt+0x5b24>
   17c48:	sub	r2, fp, #2
   17c4c:	clz	r2, r2
   17c50:	lsr	r2, r2, #5
   17c54:	b	17418 <__assert_fail@plt+0x5b10>
   17c58:	sub	r2, fp, #2
   17c5c:	mov	r6, #0
   17c60:	clz	r2, r2
   17c64:	lsr	r2, r2, #5
   17c68:	b	17420 <__assert_fail@plt+0x5b18>
   17c6c:	sub	r2, fp, #2
   17c70:	clz	r2, r2
   17c74:	lsr	r2, r2, #5
   17c78:	b	17420 <__assert_fail@plt+0x5b18>
   17c7c:	sub	r2, fp, #2
   17c80:	mov	r3, #102	; 0x66
   17c84:	clz	r2, r2
   17c88:	lsr	r2, r2, #5
   17c8c:	b	17604 <__assert_fail@plt+0x5cfc>
   17c90:	sub	r2, fp, #2
   17c94:	mov	r3, #118	; 0x76
   17c98:	clz	r2, r2
   17c9c:	lsr	r2, r2, #5
   17ca0:	b	17604 <__assert_fail@plt+0x5cfc>
   17ca4:	andeq	pc, r2, r0, lsl #30
   17ca8:	andeq	lr, r1, r0, ror #24
   17cac:	andeq	lr, r1, r8, asr #24
   17cb0:	andeq	lr, r1, ip, asr ip
   17cb4:	ldr	r3, [sp, #48]	; 0x30
   17cb8:	ldrb	r5, [r3]
   17cbc:	cmp	r5, #126	; 0x7e
   17cc0:	ldrls	pc, [pc, r5, lsl #2]
   17cc4:	b	17930 <__assert_fail@plt+0x6028>
   17cc8:	andeq	r7, r1, r0, lsl r8
   17ccc:	andeq	r7, r1, r0, lsr r9
   17cd0:	andeq	r7, r1, r0, lsr r9
   17cd4:	andeq	r7, r1, r0, lsr r9
   17cd8:	andeq	r7, r1, r0, lsr r9
   17cdc:	andeq	r7, r1, r0, lsr r9
   17ce0:	andeq	r7, r1, r0, lsr r9
   17ce4:	andeq	r7, r1, r8, lsl #30
   17ce8:	andeq	r7, r1, r0, lsl #30
   17cec:	ldrdeq	r7, [r1], -ip
   17cf0:	andeq	r7, r1, r4, lsr #15
   17cf4:	strdeq	r7, [r1], -ip
   17cf8:	andeq	r7, r1, r4, ror #15
   17cfc:	strdeq	r7, [r1], -r4
   17d00:	andeq	r7, r1, r0, lsr r9
   17d04:	andeq	r7, r1, r0, lsr r9
   17d08:	andeq	r7, r1, r0, lsr r9
   17d0c:	andeq	r7, r1, r0, lsr r9
   17d10:	andeq	r7, r1, r0, lsr r9
   17d14:	andeq	r7, r1, r0, lsr r9
   17d18:	andeq	r7, r1, r0, lsr r9
   17d1c:	andeq	r7, r1, r0, lsr r9
   17d20:	andeq	r7, r1, r0, lsr r9
   17d24:	andeq	r7, r1, r0, lsr r9
   17d28:	andeq	r7, r1, r0, lsr r9
   17d2c:	andeq	r7, r1, r0, lsr r9
   17d30:	andeq	r7, r1, r0, lsr r9
   17d34:	andeq	r7, r1, r0, lsr r9
   17d38:	andeq	r7, r1, r0, lsr r9
   17d3c:	andeq	r7, r1, r0, lsr r9
   17d40:	andeq	r7, r1, r0, lsr r9
   17d44:	andeq	r7, r1, r0, lsr r9
   17d48:	andeq	r7, r1, ip, ror #29
   17d4c:	andeq	r7, r1, r4, lsl #16
   17d50:	andeq	r7, r1, r4, lsl #16
   17d54:	ldrdeq	r7, [r1], -r0
   17d58:	andeq	r7, r1, r4, lsl #16
   17d5c:	andeq	r7, r1, r4, asr #29
   17d60:	andeq	r7, r1, r4, lsl #16
   17d64:	andeq	r7, r1, r4, asr #12
   17d68:	andeq	r7, r1, r4, lsl #16
   17d6c:	andeq	r7, r1, r4, lsl #16
   17d70:	andeq	r7, r1, r4, lsl #16
   17d74:	andeq	r7, r1, r4, asr #29
   17d78:	andeq	r7, r1, r4, asr #29
   17d7c:	andeq	r7, r1, r4, asr #29
   17d80:	andeq	r7, r1, r4, asr #29
   17d84:	andeq	r7, r1, r4, asr #29
   17d88:	andeq	r7, r1, r4, asr #29
   17d8c:	andeq	r7, r1, r4, asr #29
   17d90:	andeq	r7, r1, r4, asr #29
   17d94:	andeq	r7, r1, r4, asr #29
   17d98:	andeq	r7, r1, r4, asr #29
   17d9c:	andeq	r7, r1, r4, asr #29
   17da0:	andeq	r7, r1, r4, asr #29
   17da4:	andeq	r7, r1, r4, asr #29
   17da8:	andeq	r7, r1, r4, asr #29
   17dac:	andeq	r7, r1, r4, asr #29
   17db0:	andeq	r7, r1, r4, asr #29
   17db4:	andeq	r7, r1, r4, lsl #16
   17db8:	andeq	r7, r1, r4, lsl #16
   17dbc:	andeq	r7, r1, r4, lsl #16
   17dc0:	andeq	r7, r1, r4, lsl #16
   17dc4:	andeq	r7, r1, r8, lsl r6
   17dc8:	andeq	r7, r1, r0, lsr r9
   17dcc:	andeq	r7, r1, r4, asr #29
   17dd0:	andeq	r7, r1, r4, asr #29
   17dd4:	andeq	r7, r1, r4, asr #29
   17dd8:	andeq	r7, r1, r4, asr #29
   17ddc:	andeq	r7, r1, r4, asr #29
   17de0:	andeq	r7, r1, r4, asr #29
   17de4:	andeq	r7, r1, r4, asr #29
   17de8:	andeq	r7, r1, r4, asr #29
   17dec:	andeq	r7, r1, r4, asr #29
   17df0:	andeq	r7, r1, r4, asr #29
   17df4:	andeq	r7, r1, r4, asr #29
   17df8:	andeq	r7, r1, r4, asr #29
   17dfc:	andeq	r7, r1, r4, asr #29
   17e00:	andeq	r7, r1, r4, asr #29
   17e04:	andeq	r7, r1, r4, asr #29
   17e08:	andeq	r7, r1, r4, asr #29
   17e0c:	andeq	r7, r1, r4, asr #29
   17e10:	andeq	r7, r1, r4, asr #29
   17e14:	andeq	r7, r1, r4, asr #29
   17e18:	andeq	r7, r1, r4, asr #29
   17e1c:	andeq	r7, r1, r4, asr #29
   17e20:	andeq	r7, r1, r4, asr #29
   17e24:	andeq	r7, r1, r4, asr #29
   17e28:	andeq	r7, r1, r4, asr #29
   17e2c:	andeq	r7, r1, r4, asr #29
   17e30:	andeq	r7, r1, r4, asr #29
   17e34:	andeq	r7, r1, r4, lsl #16
   17e38:	ldrdeq	r7, [r1], -r0
   17e3c:	andeq	r7, r1, r4, asr #29
   17e40:	andeq	r7, r1, r4, lsl #16
   17e44:	andeq	r7, r1, r4, asr #29
   17e48:	andeq	r7, r1, r4, lsl #16
   17e4c:	andeq	r7, r1, r4, asr #29
   17e50:	andeq	r7, r1, r4, asr #29
   17e54:	andeq	r7, r1, r4, asr #29
   17e58:	andeq	r7, r1, r4, asr #29
   17e5c:	andeq	r7, r1, r4, asr #29
   17e60:	andeq	r7, r1, r4, asr #29
   17e64:	andeq	r7, r1, r4, asr #29
   17e68:	andeq	r7, r1, r4, asr #29
   17e6c:	andeq	r7, r1, r4, asr #29
   17e70:	andeq	r7, r1, r4, asr #29
   17e74:	andeq	r7, r1, r4, asr #29
   17e78:	andeq	r7, r1, r4, asr #29
   17e7c:	andeq	r7, r1, r4, asr #29
   17e80:	andeq	r7, r1, r4, asr #29
   17e84:	andeq	r7, r1, r4, asr #29
   17e88:	andeq	r7, r1, r4, asr #29
   17e8c:	andeq	r7, r1, r4, asr #29
   17e90:	andeq	r7, r1, r4, asr #29
   17e94:	andeq	r7, r1, r4, asr #29
   17e98:	andeq	r7, r1, r4, asr #29
   17e9c:	andeq	r7, r1, r4, asr #29
   17ea0:	andeq	r7, r1, r4, asr #29
   17ea4:	andeq	r7, r1, r4, asr #29
   17ea8:	andeq	r7, r1, r4, asr #29
   17eac:	andeq	r7, r1, r4, asr #29
   17eb0:	andeq	r7, r1, r4, asr #29
   17eb4:	andeq	r7, r1, r8, ror #7
   17eb8:	andeq	r7, r1, r4, lsl #16
   17ebc:	andeq	r7, r1, r8, ror #7
   17ec0:	ldrdeq	r7, [r1], -r0
   17ec4:	mov	r6, r7
   17ec8:	mov	r7, #0
   17ecc:	b	17448 <__assert_fail@plt+0x5b40>
   17ed0:	cmp	r9, #0
   17ed4:	mov	r3, #0
   17ed8:	beq	17918 <__assert_fail@plt+0x6010>
   17edc:	mov	r6, #0
   17ee0:	mov	r7, r3
   17ee4:	mov	r3, r6
   17ee8:	b	1744c <__assert_fail@plt+0x5b44>
   17eec:	mov	r3, #0
   17ef0:	b	178f8 <__assert_fail@plt+0x5ff0>
   17ef4:	mov	r7, #0
   17ef8:	mov	r3, #114	; 0x72
   17efc:	b	17718 <__assert_fail@plt+0x5e10>
   17f00:	mov	r5, #98	; 0x62
   17f04:	b	177a8 <__assert_fail@plt+0x5ea0>
   17f08:	mov	r5, #97	; 0x61
   17f0c:	b	177e8 <__assert_fail@plt+0x5ee0>
   17f10:	ldr	r3, [sp, #32]
   17f14:	cmp	r3, #0
   17f18:	bne	18360 <__assert_fail@plt+0x6a58>
   17f1c:	add	r9, r9, #1
   17f20:	ldr	r3, [sp, #44]	; 0x2c
   17f24:	mov	r6, #0
   17f28:	mov	r5, #92	; 0x5c
   17f2c:	b	176e0 <__assert_fail@plt+0x5dd8>
   17f30:	ldr	r3, [sp, #36]	; 0x24
   17f34:	ldrb	r3, [r3, #1]
   17f38:	adds	r3, r3, #0
   17f3c:	movne	r3, #1
   17f40:	b	17404 <__assert_fail@plt+0x5afc>
   17f44:	ldr	r3, [sp, #164]	; 0xa4
   17f48:	ands	r3, r3, #4
   17f4c:	beq	17f70 <__assert_fail@plt+0x6668>
   17f50:	ldr	r2, [sp, #24]
   17f54:	add	r3, r9, #2
   17f58:	cmp	r3, r2
   17f5c:	bcs	17f70 <__assert_fail@plt+0x6668>
   17f60:	ldr	r2, [sp, #48]	; 0x30
   17f64:	ldrb	r5, [r2, #1]
   17f68:	cmp	r5, #63	; 0x3f
   17f6c:	beq	183d4 <__assert_fail@plt+0x6acc>
   17f70:	mov	r2, #0
   17f74:	mov	r6, r2
   17f78:	mov	r5, #63	; 0x3f
   17f7c:	b	1742c <__assert_fail@plt+0x5b24>
   17f80:	ldr	r3, [sp, #32]
   17f84:	cmp	r3, #0
   17f88:	bne	18360 <__assert_fail@plt+0x6a58>
   17f8c:	mov	r6, r3
   17f90:	mov	r5, #63	; 0x3f
   17f94:	b	17474 <__assert_fail@plt+0x5b6c>
   17f98:	ldr	r3, [sp, #24]
   17f9c:	cmn	r3, #1
   17fa0:	mov	r3, #0
   17fa4:	str	r3, [sp, #108]	; 0x6c
   17fa8:	str	r3, [sp, #112]	; 0x70
   17fac:	bne	17fbc <__assert_fail@plt+0x66b4>
   17fb0:	ldr	r0, [sp, #36]	; 0x24
   17fb4:	bl	11728 <strlen@plt>
   17fb8:	str	r0, [sp, #24]
   17fbc:	mov	r3, #0
   17fc0:	str	sl, [sp, #88]	; 0x58
   17fc4:	ldr	sl, [sp, #36]	; 0x24
   17fc8:	str	r5, [sp, #92]	; 0x5c
   17fcc:	mov	r5, r3
   17fd0:	str	r7, [sp, #96]	; 0x60
   17fd4:	str	r4, [sp, #100]	; 0x64
   17fd8:	str	r8, [sp, #84]	; 0x54
   17fdc:	ldr	r3, [sp, #24]
   17fe0:	add	r4, r9, r5
   17fe4:	add	r7, sl, r4
   17fe8:	sub	r2, r3, r4
   17fec:	mov	r1, r7
   17ff0:	add	r3, sp, #108	; 0x6c
   17ff4:	add	r0, sp, #104	; 0x68
   17ff8:	bl	19ba0 <__assert_fail@plt+0x8298>
   17ffc:	subs	r8, r0, #0
   18000:	beq	18050 <__assert_fail@plt+0x6748>
   18004:	cmn	r8, #1
   18008:	beq	183b0 <__assert_fail@plt+0x6aa8>
   1800c:	cmn	r8, #2
   18010:	beq	184d0 <__assert_fail@plt+0x6bc8>
   18014:	ldr	r3, [sp, #32]
   18018:	cmp	fp, #2
   1801c:	movne	r3, #0
   18020:	andeq	r3, r3, #1
   18024:	cmp	r3, #0
   18028:	bne	181b0 <__assert_fail@plt+0x68a8>
   1802c:	ldr	r0, [sp, #104]	; 0x68
   18030:	bl	115d8 <iswprint@plt>
   18034:	add	r5, r5, r8
   18038:	cmp	r0, #0
   1803c:	add	r0, sp, #108	; 0x6c
   18040:	moveq	r6, #0
   18044:	bl	1156c <mbsinit@plt>
   18048:	cmp	r0, #0
   1804c:	beq	17fdc <__assert_fail@plt+0x66d4>
   18050:	ldr	r3, [sp, #28]
   18054:	mov	ip, r5
   18058:	eor	r2, r6, #1
   1805c:	ldr	r5, [sp, #92]	; 0x5c
   18060:	ldr	r7, [sp, #96]	; 0x60
   18064:	ldr	r4, [sp, #100]	; 0x64
   18068:	ldr	r8, [sp, #84]	; 0x54
   1806c:	ldr	sl, [sp, #88]	; 0x58
   18070:	and	r2, r2, r3
   18074:	cmp	ip, #1
   18078:	bls	17978 <__assert_fail@plt+0x6070>
   1807c:	add	r1, ip, r9
   18080:	ldr	lr, [sp, #48]	; 0x30
   18084:	mov	r0, #0
   18088:	str	r6, [sp, #48]	; 0x30
   1808c:	mov	ip, #39	; 0x27
   18090:	ldr	r6, [sp, #44]	; 0x2c
   18094:	b	1814c <__assert_fail@plt+0x6844>
   18098:	ldr	r0, [sp, #32]
   1809c:	sub	r3, fp, #2
   180a0:	cmp	r0, #0
   180a4:	clz	r3, r3
   180a8:	lsr	r3, r3, #5
   180ac:	bne	182b4 <__assert_fail@plt+0x69ac>
   180b0:	eor	r0, r6, #1
   180b4:	ands	r3, r3, r0
   180b8:	beq	180e8 <__assert_fail@plt+0x67e0>
   180bc:	add	r0, r4, #1
   180c0:	cmp	sl, r4
   180c4:	strbhi	ip, [r8, r4]
   180c8:	cmp	sl, r0
   180cc:	movhi	r6, #36	; 0x24
   180d0:	strbhi	r6, [r8, r0]
   180d4:	add	r0, r4, #2
   180d8:	mov	r6, r3
   180dc:	add	r4, r4, #3
   180e0:	cmp	sl, r0
   180e4:	strbhi	ip, [r8, r0]
   180e8:	cmp	sl, r4
   180ec:	movhi	r3, #92	; 0x5c
   180f0:	strbhi	r3, [r8, r4]
   180f4:	add	r3, r4, #1
   180f8:	cmp	sl, r3
   180fc:	lsrhi	r0, r5, #6
   18100:	addhi	r0, r0, #48	; 0x30
   18104:	strbhi	r0, [r8, r3]
   18108:	add	r0, r4, #2
   1810c:	cmp	sl, r0
   18110:	lsrhi	r3, r5, #3
   18114:	andhi	r3, r3, #7
   18118:	addhi	r3, r3, #48	; 0x30
   1811c:	add	r9, r9, #1
   18120:	strbhi	r3, [r8, r0]
   18124:	and	r5, r5, #7
   18128:	cmp	r9, r1
   1812c:	add	r5, r5, #48	; 0x30
   18130:	add	r4, r4, #3
   18134:	bcs	182d4 <__assert_fail@plt+0x69cc>
   18138:	mov	r0, r2
   1813c:	cmp	sl, r4
   18140:	strbhi	r5, [r8, r4]
   18144:	ldrb	r5, [lr, #1]!
   18148:	add	r4, r4, #1
   1814c:	cmp	r2, #0
   18150:	bne	18098 <__assert_fail@plt+0x6790>
   18154:	eor	r3, r0, #1
   18158:	and	r3, r3, r6
   1815c:	cmp	r7, #0
   18160:	uxtb	r3, r3
   18164:	beq	18178 <__assert_fail@plt+0x6870>
   18168:	cmp	sl, r4
   1816c:	movhi	r7, #92	; 0x5c
   18170:	strbhi	r7, [r8, r4]
   18174:	add	r4, r4, #1
   18178:	add	r9, r9, #1
   1817c:	cmp	r9, r1
   18180:	bcs	182c8 <__assert_fail@plt+0x69c0>
   18184:	cmp	r3, #0
   18188:	beq	182f4 <__assert_fail@plt+0x69ec>
   1818c:	cmp	sl, r4
   18190:	add	r3, r4, #1
   18194:	strbhi	ip, [r8, r4]
   18198:	mov	r7, #0
   1819c:	cmp	sl, r3
   181a0:	strbhi	ip, [r8, r3]
   181a4:	add	r4, r4, #2
   181a8:	mov	r6, r7
   181ac:	b	1813c <__assert_fail@plt+0x6834>
   181b0:	cmp	r8, #1
   181b4:	beq	1802c <__assert_fail@plt+0x6724>
   181b8:	add	r1, r4, #1
   181bc:	add	r3, sl, r8
   181c0:	add	r1, sl, r1
   181c4:	add	r4, r3, r4
   181c8:	ldrb	r3, [r1], #1
   181cc:	sub	r3, r3, #91	; 0x5b
   181d0:	cmp	r3, #33	; 0x21
   181d4:	ldrls	pc, [pc, r3, lsl #2]
   181d8:	b	18264 <__assert_fail@plt+0x695c>
   181dc:	andeq	r8, r1, r0, ror r2
   181e0:	andeq	r8, r1, r0, ror r2
   181e4:	andeq	r8, r1, r4, ror #4
   181e8:	andeq	r8, r1, r0, ror r2
   181ec:	andeq	r8, r1, r4, ror #4
   181f0:	andeq	r8, r1, r0, ror r2
   181f4:	andeq	r8, r1, r4, ror #4
   181f8:	andeq	r8, r1, r4, ror #4
   181fc:	andeq	r8, r1, r4, ror #4
   18200:	andeq	r8, r1, r4, ror #4
   18204:	andeq	r8, r1, r4, ror #4
   18208:	andeq	r8, r1, r4, ror #4
   1820c:	andeq	r8, r1, r4, ror #4
   18210:	andeq	r8, r1, r4, ror #4
   18214:	andeq	r8, r1, r4, ror #4
   18218:	andeq	r8, r1, r4, ror #4
   1821c:	andeq	r8, r1, r4, ror #4
   18220:	andeq	r8, r1, r4, ror #4
   18224:	andeq	r8, r1, r4, ror #4
   18228:	andeq	r8, r1, r4, ror #4
   1822c:	andeq	r8, r1, r4, ror #4
   18230:	andeq	r8, r1, r4, ror #4
   18234:	andeq	r8, r1, r4, ror #4
   18238:	andeq	r8, r1, r4, ror #4
   1823c:	andeq	r8, r1, r4, ror #4
   18240:	andeq	r8, r1, r4, ror #4
   18244:	andeq	r8, r1, r4, ror #4
   18248:	andeq	r8, r1, r4, ror #4
   1824c:	andeq	r8, r1, r4, ror #4
   18250:	andeq	r8, r1, r4, ror #4
   18254:	andeq	r8, r1, r4, ror #4
   18258:	andeq	r8, r1, r4, ror #4
   1825c:	andeq	r8, r1, r4, ror #4
   18260:	andeq	r8, r1, r0, ror r2
   18264:	cmp	r4, r1
   18268:	bne	181c8 <__assert_fail@plt+0x68c0>
   1826c:	b	1802c <__assert_fail@plt+0x6724>
   18270:	ldr	fp, [sp, #84]	; 0x54
   18274:	ldr	sl, [sp, #88]	; 0x58
   18278:	mov	r8, #2
   1827c:	b	17738 <__assert_fail@plt+0x5e30>
   18280:	cmp	sl, r4
   18284:	movls	r1, r4
   18288:	bls	17888 <__assert_fail@plt+0x5f80>
   1828c:	ldr	r3, [sp, #44]	; 0x2c
   18290:	b	17878 <__assert_fail@plt+0x5f70>
   18294:	str	sl, [sp, #72]	; 0x48
   18298:	ldr	sl, [sp, #32]
   1829c:	b	176b0 <__assert_fail@plt+0x5da8>
   182a0:	add	r9, r9, #1
   182a4:	b	16fa4 <__assert_fail@plt+0x569c>
   182a8:	ldr	r2, [sp, #28]
   182ac:	mov	r6, #0
   182b0:	b	1807c <__assert_fail@plt+0x6774>
   182b4:	str	fp, [sp, #160]	; 0xa0
   182b8:	str	r3, [sp, #28]
   182bc:	mov	fp, r8
   182c0:	ldr	r8, [sp, #160]	; 0xa0
   182c4:	b	17738 <__assert_fail@plt+0x5e30>
   182c8:	str	r6, [sp, #44]	; 0x2c
   182cc:	ldr	r6, [sp, #48]	; 0x30
   182d0:	b	176e0 <__assert_fail@plt+0x5dd8>
   182d4:	str	r6, [sp, #44]	; 0x2c
   182d8:	ldr	r6, [sp, #48]	; 0x30
   182dc:	b	174ec <__assert_fail@plt+0x5be4>
   182e0:	add	r4, r4, #4
   182e4:	str	r3, [sp, #44]	; 0x2c
   182e8:	mov	r6, #0
   182ec:	mov	r5, #48	; 0x30
   182f0:	b	17474 <__assert_fail@plt+0x5b6c>
   182f4:	mov	r7, r3
   182f8:	b	1813c <__assert_fail@plt+0x6834>
   182fc:	ldr	r3, [pc, #-1624]	; 17cac <__assert_fail@plt+0x63a4>
   18300:	mov	r4, #1
   18304:	str	r4, [sp, #40]	; 0x28
   18308:	str	r4, [sp, #28]
   1830c:	str	r4, [sp, #52]	; 0x34
   18310:	str	sl, [sp, #72]	; 0x48
   18314:	str	sl, [sp, #68]	; 0x44
   18318:	str	sl, [sp, #44]	; 0x2c
   1831c:	str	sl, [sp, #32]
   18320:	str	r3, [sp, #60]	; 0x3c
   18324:	b	16f94 <__assert_fail@plt+0x568c>
   18328:	mov	r3, r6
   1832c:	mov	r5, #48	; 0x30
   18330:	mov	r6, #0
   18334:	b	17474 <__assert_fail@plt+0x5b6c>
   18338:	cmp	sl, r4
   1833c:	movhi	r3, #48	; 0x30
   18340:	strbhi	r3, [r8, r4]
   18344:	add	r3, r1, #2
   18348:	cmp	sl, r3
   1834c:	movhi	r0, #48	; 0x30
   18350:	strbhi	r0, [r8, r3]
   18354:	add	r4, r1, #3
   18358:	mov	r5, #48	; 0x30
   1835c:	b	178bc <__assert_fail@plt+0x5fb4>
   18360:	str	fp, [sp, #160]	; 0xa0
   18364:	mov	fp, r8
   18368:	ldr	r8, [sp, #160]	; 0xa0
   1836c:	b	17738 <__assert_fail@plt+0x5e30>
   18370:	ldr	r2, [sp, #80]	; 0x50
   18374:	ldrb	r3, [r2]
   18378:	cmp	r3, #0
   1837c:	beq	16f64 <__assert_fail@plt+0x565c>
   18380:	cmp	sl, r4
   18384:	strbhi	r3, [fp, r4]
   18388:	ldrb	r3, [r2, #1]!
   1838c:	add	r4, r4, #1
   18390:	cmp	r3, #0
   18394:	bne	18380 <__assert_fail@plt+0x6a78>
   18398:	b	16f64 <__assert_fail@plt+0x565c>
   1839c:	str	fp, [sp, #160]	; 0xa0
   183a0:	mov	r3, #0
   183a4:	mov	fp, r8
   183a8:	ldr	r8, [sp, #160]	; 0xa0
   183ac:	b	177cc <__assert_fail@plt+0x5ec4>
   183b0:	mov	ip, r5
   183b4:	ldr	r7, [sp, #96]	; 0x60
   183b8:	ldr	r5, [sp, #92]	; 0x5c
   183bc:	ldr	r4, [sp, #100]	; 0x64
   183c0:	ldr	r8, [sp, #84]	; 0x54
   183c4:	ldr	sl, [sp, #88]	; 0x58
   183c8:	ldr	r2, [sp, #28]
   183cc:	mov	r6, #0
   183d0:	b	18074 <__assert_fail@plt+0x676c>
   183d4:	ldr	r2, [sp, #36]	; 0x24
   183d8:	ldrb	r1, [r2, r3]
   183dc:	sub	r2, r1, #33	; 0x21
   183e0:	cmp	r2, #29
   183e4:	ldrls	pc, [pc, r2, lsl #2]
   183e8:	b	184c4 <__assert_fail@plt+0x6bbc>
   183ec:	andeq	r8, r1, r4, ror #8
   183f0:	andeq	r8, r1, r4, asr #9
   183f4:	andeq	r8, r1, r4, asr #9
   183f8:	andeq	r8, r1, r4, asr #9
   183fc:	andeq	r8, r1, r4, asr #9
   18400:	andeq	r8, r1, r4, asr #9
   18404:	andeq	r8, r1, r4, ror #8
   18408:	andeq	r8, r1, r4, ror #8
   1840c:	andeq	r8, r1, r4, ror #8
   18410:	andeq	r8, r1, r4, asr #9
   18414:	andeq	r8, r1, r4, asr #9
   18418:	andeq	r8, r1, r4, asr #9
   1841c:	andeq	r8, r1, r4, ror #8
   18420:	andeq	r8, r1, r4, asr #9
   18424:	andeq	r8, r1, r4, ror #8
   18428:	andeq	r8, r1, r4, asr #9
   1842c:	andeq	r8, r1, r4, asr #9
   18430:	andeq	r8, r1, r4, asr #9
   18434:	andeq	r8, r1, r4, asr #9
   18438:	andeq	r8, r1, r4, asr #9
   1843c:	andeq	r8, r1, r4, asr #9
   18440:	andeq	r8, r1, r4, asr #9
   18444:	andeq	r8, r1, r4, asr #9
   18448:	andeq	r8, r1, r4, asr #9
   1844c:	andeq	r8, r1, r4, asr #9
   18450:	andeq	r8, r1, r4, asr #9
   18454:	andeq	r8, r1, r4, asr #9
   18458:	andeq	r8, r1, r4, ror #8
   1845c:	andeq	r8, r1, r4, ror #8
   18460:	andeq	r8, r1, r4, ror #8
   18464:	ldr	r2, [sp, #32]
   18468:	cmp	r2, #0
   1846c:	bne	18570 <__assert_fail@plt+0x6c68>
   18470:	cmp	sl, r4
   18474:	movhi	r2, #63	; 0x3f
   18478:	strbhi	r2, [r8, r4]
   1847c:	add	r2, r4, #1
   18480:	cmp	sl, r2
   18484:	movhi	r0, #34	; 0x22
   18488:	strbhi	r0, [r8, r2]
   1848c:	add	r2, r4, #2
   18490:	cmp	sl, r2
   18494:	movhi	r0, #34	; 0x22
   18498:	strbhi	r0, [r8, r2]
   1849c:	add	r2, r4, #3
   184a0:	cmp	sl, r2
   184a4:	movhi	r0, #63	; 0x3f
   184a8:	strbhi	r0, [r8, r2]
   184ac:	mov	r2, #0
   184b0:	add	r4, r4, #4
   184b4:	mov	r5, r1
   184b8:	mov	r9, r3
   184bc:	mov	r6, r2
   184c0:	b	178bc <__assert_fail@plt+0x5fb4>
   184c4:	mov	r2, #0
   184c8:	mov	r6, r2
   184cc:	b	1742c <__assert_fail@plt+0x5b24>
   184d0:	ldr	r0, [sp, #24]
   184d4:	mov	r1, r4
   184d8:	cmp	r1, r0
   184dc:	mov	r2, r7
   184e0:	mov	r3, r5
   184e4:	mov	ip, r5
   184e8:	ldr	r7, [sp, #96]	; 0x60
   184ec:	ldr	r5, [sp, #92]	; 0x5c
   184f0:	ldr	r4, [sp, #100]	; 0x64
   184f4:	ldr	r8, [sp, #84]	; 0x54
   184f8:	ldr	sl, [sp, #88]	; 0x58
   184fc:	bcs	18530 <__assert_fail@plt+0x6c28>
   18500:	ldrb	r6, [r2]
   18504:	cmp	r6, #0
   18508:	bne	1851c <__assert_fail@plt+0x6c14>
   1850c:	b	1864c <__assert_fail@plt+0x6d44>
   18510:	ldrb	r6, [r2, #1]!
   18514:	cmp	r6, #0
   18518:	beq	185d4 <__assert_fail@plt+0x6ccc>
   1851c:	add	r3, r3, #1
   18520:	add	r1, r9, r3
   18524:	cmp	r1, r0
   18528:	bcc	18510 <__assert_fail@plt+0x6c08>
   1852c:	mov	ip, r3
   18530:	ldr	r2, [sp, #28]
   18534:	mov	r6, #0
   18538:	b	18074 <__assert_fail@plt+0x676c>
   1853c:	mov	r3, #1
   18540:	str	r3, [sp, #40]	; 0x28
   18544:	str	r3, [sp, #32]
   18548:	str	r3, [sp, #28]
   1854c:	str	r3, [sp, #52]	; 0x34
   18550:	ldr	r3, [pc, #-2220]	; 17cac <__assert_fail@plt+0x63a4>
   18554:	mov	r2, #0
   18558:	str	r2, [sp, #68]	; 0x44
   1855c:	str	r2, [sp, #44]	; 0x2c
   18560:	str	r2, [sp, #72]	; 0x48
   18564:	mov	r4, r2
   18568:	str	r3, [sp, #60]	; 0x3c
   1856c:	b	16f94 <__assert_fail@plt+0x568c>
   18570:	str	fp, [sp, #160]	; 0xa0
   18574:	mov	fp, r8
   18578:	ldr	r8, [sp, #160]	; 0xa0
   1857c:	b	17744 <__assert_fail@plt+0x5e3c>
   18580:	mov	r2, r3
   18584:	ldr	r3, [sp, #60]	; 0x3c
   18588:	cmp	r3, #0
   1858c:	moveq	r2, #0
   18590:	andne	r2, r2, #1
   18594:	cmp	r2, #0
   18598:	beq	185c4 <__assert_fail@plt+0x6cbc>
   1859c:	mov	r2, r3
   185a0:	ldrb	r3, [r3]
   185a4:	cmp	r3, #0
   185a8:	beq	185c4 <__assert_fail@plt+0x6cbc>
   185ac:	cmp	sl, r4
   185b0:	strbhi	r3, [fp, r4]
   185b4:	ldrb	r3, [r2, #1]!
   185b8:	add	r4, r4, #1
   185bc:	cmp	r3, #0
   185c0:	bne	185ac <__assert_fail@plt+0x6ca4>
   185c4:	cmp	sl, r4
   185c8:	movhi	r3, #0
   185cc:	strbhi	r3, [fp, r4]
   185d0:	b	17784 <__assert_fail@plt+0x5e7c>
   185d4:	mov	ip, r3
   185d8:	ldr	r2, [sp, #28]
   185dc:	b	18074 <__assert_fail@plt+0x676c>
   185e0:	str	fp, [sp, #160]	; 0xa0
   185e4:	mov	fp, r8
   185e8:	ldr	r8, [sp, #160]	; 0xa0
   185ec:	sub	r3, r8, #2
   185f0:	clz	r3, r3
   185f4:	lsr	r3, r3, #5
   185f8:	str	r3, [sp, #28]
   185fc:	b	17738 <__assert_fail@plt+0x5e30>
   18600:	ldr	r3, [sp, #76]	; 0x4c
   18604:	mov	ip, #5
   18608:	str	r3, [sp, #16]
   1860c:	ldr	r3, [sp, #80]	; 0x50
   18610:	ldr	r2, [sp, #36]	; 0x24
   18614:	str	r3, [sp, #12]
   18618:	ldr	r3, [sp, #56]	; 0x38
   1861c:	ldr	r1, [sp, #72]	; 0x48
   18620:	str	r3, [sp, #8]
   18624:	ldr	r3, [sp, #164]	; 0xa4
   18628:	mov	r0, fp
   1862c:	str	r3, [sp, #4]
   18630:	str	ip, [sp]
   18634:	ldr	r3, [sp, #24]
   18638:	bl	16e9c <__assert_fail@plt+0x5594>
   1863c:	mov	r4, r0
   18640:	b	17784 <__assert_fail@plt+0x5e7c>
   18644:	mov	r8, #2
   18648:	b	17738 <__assert_fail@plt+0x5e30>
   1864c:	ldr	r2, [sp, #28]
   18650:	b	18074 <__assert_fail@plt+0x676c>
   18654:	mov	r3, #0
   18658:	str	r3, [sp, #68]	; 0x44
   1865c:	str	r3, [sp, #44]	; 0x2c
   18660:	str	r3, [sp, #72]	; 0x48
   18664:	str	r3, [sp, #28]
   18668:	mov	r4, r3
   1866c:	ldr	r3, [pc, #-2500]	; 17cb0 <__assert_fail@plt+0x63a8>
   18670:	mov	r2, #1
   18674:	str	r2, [sp, #40]	; 0x28
   18678:	str	r2, [sp, #32]
   1867c:	str	r2, [sp, #52]	; 0x34
   18680:	str	r3, [sp, #60]	; 0x3c
   18684:	b	16f94 <__assert_fail@plt+0x568c>
   18688:	bl	11590 <__stack_chk_fail@plt>
   1868c:	mov	r5, r3
   18690:	mov	r6, #0
   18694:	b	17488 <__assert_fail@plt+0x5b80>
   18698:	mov	r3, #0
   1869c:	mov	r2, #1
   186a0:	str	r3, [sp, #44]	; 0x2c
   186a4:	str	r3, [sp, #72]	; 0x48
   186a8:	str	r2, [sp, #40]	; 0x28
   186ac:	b	175a4 <__assert_fail@plt+0x5c9c>
   186b0:	bl	118c0 <abort@plt>
   186b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186b8:	sub	sp, sp, #44	; 0x2c
   186bc:	mov	r6, r0
   186c0:	mov	r4, r3
   186c4:	mov	sl, r1
   186c8:	mov	fp, r2
   186cc:	bl	11764 <__errno_location@plt>
   186d0:	ldr	r7, [pc, #364]	; 18844 <__assert_fail@plt+0x6f3c>
   186d4:	cmp	r6, #0
   186d8:	ldr	r5, [r7]
   186dc:	ldr	r3, [r0]
   186e0:	str	r3, [sp, #24]
   186e4:	blt	18840 <__assert_fail@plt+0x6f38>
   186e8:	ldr	r3, [r7, #4]
   186ec:	mov	r8, r0
   186f0:	cmp	r3, r6
   186f4:	bgt	18740 <__assert_fail@plt+0x6e38>
   186f8:	cmn	r6, #-268435454	; 0xf0000002
   186fc:	bgt	1883c <__assert_fail@plt+0x6f34>
   18700:	add	r9, r6, #1
   18704:	add	r3, r7, #8
   18708:	cmp	r5, r3
   1870c:	lsl	r1, r9, #3
   18710:	beq	1881c <__assert_fail@plt+0x6f14>
   18714:	mov	r0, r5
   18718:	bl	1953c <__assert_fail@plt+0x7c34>
   1871c:	mov	r5, r0
   18720:	str	r0, [r7]
   18724:	ldr	r0, [r7, #4]
   18728:	mov	r1, #0
   1872c:	sub	r2, r9, r0
   18730:	add	r0, r5, r0, lsl #3
   18734:	lsl	r2, r2, #3
   18738:	bl	11788 <memset@plt>
   1873c:	str	r9, [r7, #4]
   18740:	add	r3, r5, r6, lsl #3
   18744:	ldr	r1, [r4, #4]
   18748:	ldr	r7, [r3, #4]
   1874c:	ldr	r9, [r5, r6, lsl #3]
   18750:	ldr	r2, [r4, #40]	; 0x28
   18754:	ldr	ip, [r4, #44]	; 0x2c
   18758:	str	r3, [sp, #28]
   1875c:	ldr	r3, [r4]
   18760:	orr	r1, r1, #1
   18764:	add	lr, r4, #8
   18768:	str	r1, [sp, #36]	; 0x24
   1876c:	str	r1, [sp, #4]
   18770:	str	r2, [sp, #12]
   18774:	str	r3, [sp]
   18778:	mov	r0, r7
   1877c:	mov	r1, r9
   18780:	str	ip, [sp, #16]
   18784:	str	lr, [sp, #8]
   18788:	mov	r3, fp
   1878c:	mov	r2, sl
   18790:	str	lr, [sp, #32]
   18794:	bl	16e9c <__assert_fail@plt+0x5594>
   18798:	cmp	r9, r0
   1879c:	bhi	18808 <__assert_fail@plt+0x6f00>
   187a0:	ldr	r3, [pc, #160]	; 18848 <__assert_fail@plt+0x6f40>
   187a4:	add	r9, r0, #1
   187a8:	cmp	r7, r3
   187ac:	str	r9, [r5, r6, lsl #3]
   187b0:	beq	187bc <__assert_fail@plt+0x6eb4>
   187b4:	mov	r0, r7
   187b8:	bl	11548 <free@plt>
   187bc:	mov	r0, r9
   187c0:	bl	194e0 <__assert_fail@plt+0x7bd8>
   187c4:	ldr	lr, [sp, #28]
   187c8:	ldr	ip, [r4, #44]	; 0x2c
   187cc:	ldr	r5, [r4, #40]	; 0x28
   187d0:	mov	r3, fp
   187d4:	mov	r2, sl
   187d8:	mov	r1, r9
   187dc:	str	r0, [lr, #4]
   187e0:	ldr	lr, [r4]
   187e4:	ldr	r4, [sp, #32]
   187e8:	str	ip, [sp, #16]
   187ec:	str	r4, [sp, #8]
   187f0:	ldr	r4, [sp, #36]	; 0x24
   187f4:	str	r5, [sp, #12]
   187f8:	str	r4, [sp, #4]
   187fc:	str	lr, [sp]
   18800:	mov	r7, r0
   18804:	bl	16e9c <__assert_fail@plt+0x5594>
   18808:	ldr	r3, [sp, #24]
   1880c:	mov	r0, r7
   18810:	str	r3, [r8]
   18814:	add	sp, sp, #44	; 0x2c
   18818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1881c:	mov	r0, #0
   18820:	bl	1953c <__assert_fail@plt+0x7c34>
   18824:	ldr	r3, [pc, #32]	; 1884c <__assert_fail@plt+0x6f44>
   18828:	mov	r5, r0
   1882c:	ldm	r3, {r0, r1}
   18830:	str	r5, [r7]
   18834:	stm	r5, {r0, r1}
   18838:	b	18724 <__assert_fail@plt+0x6e1c>
   1883c:	bl	19728 <__assert_fail@plt+0x7e20>
   18840:	bl	118c0 <abort@plt>
   18844:	muleq	r3, ip, r1
   18848:	andeq	r0, r3, r4, lsl #5
   1884c:	andeq	r0, r3, r4, lsr #3
   18850:	push	{r4, r5, r6, lr}
   18854:	mov	r5, r0
   18858:	bl	11764 <__errno_location@plt>
   1885c:	cmp	r5, #0
   18860:	mov	r1, #48	; 0x30
   18864:	mov	r4, r0
   18868:	ldr	r0, [pc, #16]	; 18880 <__assert_fail@plt+0x6f78>
   1886c:	ldr	r6, [r4]
   18870:	movne	r0, r5
   18874:	bl	196e8 <__assert_fail@plt+0x7de0>
   18878:	str	r6, [r4]
   1887c:	pop	{r4, r5, r6, pc}
   18880:	andeq	r0, r3, r4, lsl #7
   18884:	ldr	r3, [pc, #12]	; 18898 <__assert_fail@plt+0x6f90>
   18888:	cmp	r0, #0
   1888c:	moveq	r0, r3
   18890:	ldr	r0, [r0]
   18894:	bx	lr
   18898:	andeq	r0, r3, r4, lsl #7
   1889c:	ldr	r3, [pc, #12]	; 188b0 <__assert_fail@plt+0x6fa8>
   188a0:	cmp	r0, #0
   188a4:	moveq	r0, r3
   188a8:	str	r1, [r0]
   188ac:	bx	lr
   188b0:	andeq	r0, r3, r4, lsl #7
   188b4:	ldr	r3, [pc, #52]	; 188f0 <__assert_fail@plt+0x6fe8>
   188b8:	cmp	r0, #0
   188bc:	moveq	r0, r3
   188c0:	add	r3, r0, #8
   188c4:	push	{lr}		; (str lr, [sp, #-4]!)
   188c8:	lsr	lr, r1, #5
   188cc:	and	r1, r1, #31
   188d0:	ldr	ip, [r3, lr, lsl #2]
   188d4:	lsr	r0, ip, r1
   188d8:	eor	r2, r2, r0
   188dc:	and	r2, r2, #1
   188e0:	and	r0, r0, #1
   188e4:	eor	r1, ip, r2, lsl r1
   188e8:	str	r1, [r3, lr, lsl #2]
   188ec:	pop	{pc}		; (ldr pc, [sp], #4)
   188f0:	andeq	r0, r3, r4, lsl #7
   188f4:	ldr	r3, [pc, #16]	; 1890c <__assert_fail@plt+0x7004>
   188f8:	cmp	r0, #0
   188fc:	movne	r3, r0
   18900:	ldr	r0, [r3, #4]
   18904:	str	r1, [r3, #4]
   18908:	bx	lr
   1890c:	andeq	r0, r3, r4, lsl #7
   18910:	ldr	r3, [pc, #44]	; 18944 <__assert_fail@plt+0x703c>
   18914:	cmp	r0, #0
   18918:	moveq	r0, r3
   1891c:	mov	ip, #10
   18920:	cmp	r2, #0
   18924:	cmpne	r1, #0
   18928:	str	ip, [r0]
   1892c:	beq	1893c <__assert_fail@plt+0x7034>
   18930:	str	r1, [r0, #40]	; 0x28
   18934:	str	r2, [r0, #44]	; 0x2c
   18938:	bx	lr
   1893c:	push	{r4, lr}
   18940:	bl	118c0 <abort@plt>
   18944:	andeq	r0, r3, r4, lsl #7
   18948:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1894c:	sub	sp, sp, #24
   18950:	ldr	ip, [pc, #108]	; 189c4 <__assert_fail@plt+0x70bc>
   18954:	ldr	r4, [sp, #56]	; 0x38
   18958:	mov	r9, r2
   1895c:	cmp	r4, #0
   18960:	moveq	r4, ip
   18964:	mov	sl, r3
   18968:	mov	r7, r0
   1896c:	mov	r8, r1
   18970:	bl	11764 <__errno_location@plt>
   18974:	ldr	r3, [r4, #44]	; 0x2c
   18978:	mov	r1, r8
   1897c:	ldr	r6, [r0]
   18980:	str	r3, [sp, #16]
   18984:	ldr	r2, [r4, #40]	; 0x28
   18988:	add	r3, r4, #8
   1898c:	str	r3, [sp, #8]
   18990:	str	r2, [sp, #12]
   18994:	ldr	r2, [r4, #4]
   18998:	mov	r5, r0
   1899c:	str	r2, [sp, #4]
   189a0:	ldr	ip, [r4]
   189a4:	mov	r3, sl
   189a8:	mov	r2, r9
   189ac:	mov	r0, r7
   189b0:	str	ip, [sp]
   189b4:	bl	16e9c <__assert_fail@plt+0x5594>
   189b8:	str	r6, [r5]
   189bc:	add	sp, sp, #24
   189c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189c4:	andeq	r0, r3, r4, lsl #7
   189c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189cc:	cmp	r3, #0
   189d0:	sub	sp, sp, #44	; 0x2c
   189d4:	ldr	r4, [pc, #192]	; 18a9c <__assert_fail@plt+0x7194>
   189d8:	mov	r6, r2
   189dc:	movne	r4, r3
   189e0:	mov	r9, r1
   189e4:	mov	r8, r0
   189e8:	bl	11764 <__errno_location@plt>
   189ec:	ldr	r3, [r4, #44]	; 0x2c
   189f0:	ldr	r5, [r4, #4]
   189f4:	add	sl, r4, #8
   189f8:	cmp	r6, #0
   189fc:	orreq	r5, r5, #1
   18a00:	mov	r1, #0
   18a04:	ldr	r2, [r0]
   18a08:	str	r3, [sp, #16]
   18a0c:	ldr	r3, [r4, #40]	; 0x28
   18a10:	stmib	sp, {r5, sl}
   18a14:	str	r3, [sp, #12]
   18a18:	ldr	r3, [r4]
   18a1c:	mov	r7, r0
   18a20:	str	r2, [sp, #28]
   18a24:	str	r3, [sp]
   18a28:	mov	r2, r8
   18a2c:	mov	r3, r9
   18a30:	mov	r0, r1
   18a34:	bl	16e9c <__assert_fail@plt+0x5594>
   18a38:	add	r1, r0, #1
   18a3c:	mov	fp, r0
   18a40:	mov	r0, r1
   18a44:	str	r1, [sp, #36]	; 0x24
   18a48:	bl	194e0 <__assert_fail@plt+0x7bd8>
   18a4c:	ldr	r3, [r4, #44]	; 0x2c
   18a50:	mov	r2, r8
   18a54:	str	r3, [sp, #16]
   18a58:	ldr	r3, [r4, #40]	; 0x28
   18a5c:	str	r5, [sp, #4]
   18a60:	str	r3, [sp, #12]
   18a64:	str	sl, [sp, #8]
   18a68:	ldr	ip, [r4]
   18a6c:	ldr	r1, [sp, #36]	; 0x24
   18a70:	mov	r3, r9
   18a74:	str	ip, [sp]
   18a78:	str	r0, [sp, #32]
   18a7c:	bl	16e9c <__assert_fail@plt+0x5594>
   18a80:	ldr	r2, [sp, #28]
   18a84:	cmp	r6, #0
   18a88:	str	r2, [r7]
   18a8c:	ldr	r0, [sp, #32]
   18a90:	strne	fp, [r6]
   18a94:	add	sp, sp, #44	; 0x2c
   18a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a9c:	andeq	r0, r3, r4, lsl #7
   18aa0:	mov	r3, r2
   18aa4:	mov	r2, #0
   18aa8:	b	189c8 <__assert_fail@plt+0x70c0>
   18aac:	push	{r4, r5, r6, r7, r8, lr}
   18ab0:	ldr	r6, [pc, #112]	; 18b28 <__assert_fail@plt+0x7220>
   18ab4:	ldr	r3, [r6, #4]
   18ab8:	ldr	r7, [r6]
   18abc:	cmp	r3, #1
   18ac0:	ble	18ae4 <__assert_fail@plt+0x71dc>
   18ac4:	sub	r5, r7, #8
   18ac8:	add	r5, r5, r3, lsl #3
   18acc:	mov	r4, r7
   18ad0:	ldr	r0, [r4, #12]
   18ad4:	add	r4, r4, #8
   18ad8:	bl	11548 <free@plt>
   18adc:	cmp	r4, r5
   18ae0:	bne	18ad0 <__assert_fail@plt+0x71c8>
   18ae4:	ldr	r0, [r7, #4]
   18ae8:	ldr	r4, [pc, #60]	; 18b2c <__assert_fail@plt+0x7224>
   18aec:	cmp	r0, r4
   18af0:	beq	18b04 <__assert_fail@plt+0x71fc>
   18af4:	bl	11548 <free@plt>
   18af8:	mov	r3, #256	; 0x100
   18afc:	str	r4, [r6, #12]
   18b00:	str	r3, [r6, #8]
   18b04:	ldr	r4, [pc, #36]	; 18b30 <__assert_fail@plt+0x7228>
   18b08:	cmp	r7, r4
   18b0c:	beq	18b1c <__assert_fail@plt+0x7214>
   18b10:	mov	r0, r7
   18b14:	bl	11548 <free@plt>
   18b18:	str	r4, [r6]
   18b1c:	mov	r3, #1
   18b20:	str	r3, [r6, #4]
   18b24:	pop	{r4, r5, r6, r7, r8, pc}
   18b28:	muleq	r3, ip, r1
   18b2c:	andeq	r0, r3, r4, lsl #5
   18b30:	andeq	r0, r3, r4, lsr #3
   18b34:	ldr	r3, [pc, #4]	; 18b40 <__assert_fail@plt+0x7238>
   18b38:	mvn	r2, #0
   18b3c:	b	186b4 <__assert_fail@plt+0x6dac>
   18b40:	andeq	r0, r3, r4, lsl #7
   18b44:	ldr	r3, [pc]	; 18b4c <__assert_fail@plt+0x7244>
   18b48:	b	186b4 <__assert_fail@plt+0x6dac>
   18b4c:	andeq	r0, r3, r4, lsl #7
   18b50:	mov	r1, r0
   18b54:	ldr	r3, [pc, #8]	; 18b64 <__assert_fail@plt+0x725c>
   18b58:	mvn	r2, #0
   18b5c:	mov	r0, #0
   18b60:	b	186b4 <__assert_fail@plt+0x6dac>
   18b64:	andeq	r0, r3, r4, lsl #7
   18b68:	mov	r2, r1
   18b6c:	ldr	r3, [pc, #8]	; 18b7c <__assert_fail@plt+0x7274>
   18b70:	mov	r1, r0
   18b74:	mov	r0, #0
   18b78:	b	186b4 <__assert_fail@plt+0x6dac>
   18b7c:	andeq	r0, r3, r4, lsl #7
   18b80:	push	{r4, r5, r6, lr}
   18b84:	sub	sp, sp, #56	; 0x38
   18b88:	ldr	r4, [pc, #68]	; 18bd4 <__assert_fail@plt+0x72cc>
   18b8c:	mov	r6, r2
   18b90:	mov	r5, r0
   18b94:	ldr	r3, [r4]
   18b98:	add	r0, sp, #4
   18b9c:	str	r3, [sp, #52]	; 0x34
   18ba0:	bl	16d2c <__assert_fail@plt+0x5424>
   18ba4:	add	r3, sp, #4
   18ba8:	mvn	r2, #0
   18bac:	mov	r1, r6
   18bb0:	mov	r0, r5
   18bb4:	bl	186b4 <__assert_fail@plt+0x6dac>
   18bb8:	ldr	r2, [sp, #52]	; 0x34
   18bbc:	ldr	r3, [r4]
   18bc0:	cmp	r2, r3
   18bc4:	bne	18bd0 <__assert_fail@plt+0x72c8>
   18bc8:	add	sp, sp, #56	; 0x38
   18bcc:	pop	{r4, r5, r6, pc}
   18bd0:	bl	11590 <__stack_chk_fail@plt>
   18bd4:	andeq	pc, r2, r0, lsl #30
   18bd8:	push	{r4, r5, r6, r7, lr}
   18bdc:	sub	sp, sp, #60	; 0x3c
   18be0:	ldr	r4, [pc, #72]	; 18c30 <__assert_fail@plt+0x7328>
   18be4:	mov	r6, r2
   18be8:	mov	r7, r3
   18bec:	ldr	ip, [r4]
   18bf0:	mov	r5, r0
   18bf4:	add	r0, sp, #4
   18bf8:	str	ip, [sp, #52]	; 0x34
   18bfc:	bl	16d2c <__assert_fail@plt+0x5424>
   18c00:	add	r3, sp, #4
   18c04:	mov	r2, r7
   18c08:	mov	r1, r6
   18c0c:	mov	r0, r5
   18c10:	bl	186b4 <__assert_fail@plt+0x6dac>
   18c14:	ldr	r2, [sp, #52]	; 0x34
   18c18:	ldr	r3, [r4]
   18c1c:	cmp	r2, r3
   18c20:	bne	18c2c <__assert_fail@plt+0x7324>
   18c24:	add	sp, sp, #60	; 0x3c
   18c28:	pop	{r4, r5, r6, r7, pc}
   18c2c:	bl	11590 <__stack_chk_fail@plt>
   18c30:	andeq	pc, r2, r0, lsl #30
   18c34:	mov	r2, r1
   18c38:	mov	r1, r0
   18c3c:	mov	r0, #0
   18c40:	b	18b80 <__assert_fail@plt+0x7278>
   18c44:	mov	r3, r2
   18c48:	mov	r2, r1
   18c4c:	mov	r1, r0
   18c50:	mov	r0, #0
   18c54:	b	18bd8 <__assert_fail@plt+0x72d0>
   18c58:	push	{r4, r5, r6, r7, r8, r9, lr}
   18c5c:	mov	r4, r2
   18c60:	ldr	lr, [pc, #128]	; 18ce8 <__assert_fail@plt+0x73e0>
   18c64:	mov	r8, r0
   18c68:	mov	r9, r1
   18c6c:	ldm	lr!, {r0, r1, r2, r3}
   18c70:	sub	sp, sp, #60	; 0x3c
   18c74:	add	ip, sp, #4
   18c78:	lsr	r6, r4, #5
   18c7c:	stmia	ip!, {r0, r1, r2, r3}
   18c80:	add	r7, sp, #12
   18c84:	ldm	lr!, {r0, r1, r2, r3}
   18c88:	and	r4, r4, #31
   18c8c:	ldr	r5, [pc, #88]	; 18cec <__assert_fail@plt+0x73e4>
   18c90:	stmia	ip!, {r0, r1, r2, r3}
   18c94:	ldm	lr, {r0, r1, r2, r3}
   18c98:	stm	ip, {r0, r1, r2, r3}
   18c9c:	mov	r2, r9
   18ca0:	ldr	r3, [r7, r6, lsl #2]
   18ca4:	ldr	ip, [r5]
   18ca8:	mov	r1, r8
   18cac:	mvn	r0, r3, lsr r4
   18cb0:	and	r0, r0, #1
   18cb4:	str	ip, [sp, #52]	; 0x34
   18cb8:	eor	r4, r3, r0, lsl r4
   18cbc:	add	r3, sp, #4
   18cc0:	mov	r0, #0
   18cc4:	str	r4, [r7, r6, lsl #2]
   18cc8:	bl	186b4 <__assert_fail@plt+0x6dac>
   18ccc:	ldr	r2, [sp, #52]	; 0x34
   18cd0:	ldr	r3, [r5]
   18cd4:	cmp	r2, r3
   18cd8:	bne	18ce4 <__assert_fail@plt+0x73dc>
   18cdc:	add	sp, sp, #60	; 0x3c
   18ce0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18ce4:	bl	11590 <__stack_chk_fail@plt>
   18ce8:	andeq	r0, r3, r4, lsl #7
   18cec:	andeq	pc, r2, r0, lsl #30
   18cf0:	mov	r2, r1
   18cf4:	mvn	r1, #0
   18cf8:	b	18c58 <__assert_fail@plt+0x7350>
   18cfc:	mov	r2, #58	; 0x3a
   18d00:	mvn	r1, #0
   18d04:	b	18c58 <__assert_fail@plt+0x7350>
   18d08:	mov	r2, #58	; 0x3a
   18d0c:	b	18c58 <__assert_fail@plt+0x7350>
   18d10:	push	{r4, r5, r6, r7, r8, lr}
   18d14:	sub	sp, sp, #104	; 0x68
   18d18:	ldr	r5, [pc, #120]	; 18d98 <__assert_fail@plt+0x7490>
   18d1c:	mov	r6, r0
   18d20:	mov	r0, sp
   18d24:	ldr	r3, [r5]
   18d28:	mov	r7, r2
   18d2c:	str	r3, [sp, #100]	; 0x64
   18d30:	bl	16d2c <__assert_fail@plt+0x5424>
   18d34:	mov	ip, sp
   18d38:	add	lr, sp, #52	; 0x34
   18d3c:	ldm	ip!, {r0, r1, r2, r3}
   18d40:	stmia	lr!, {r0, r1, r2, r3}
   18d44:	ldm	ip!, {r0, r1, r2, r3}
   18d48:	ldr	r8, [sp, #64]	; 0x40
   18d4c:	stmia	lr!, {r0, r1, r2, r3}
   18d50:	mvn	r4, r8
   18d54:	ldm	ip, {r0, r1, r2, r3}
   18d58:	and	ip, r4, #67108864	; 0x4000000
   18d5c:	eor	ip, ip, r8
   18d60:	str	ip, [sp, #64]	; 0x40
   18d64:	stm	lr, {r0, r1, r2, r3}
   18d68:	add	r3, sp, #52	; 0x34
   18d6c:	mvn	r2, #0
   18d70:	mov	r1, r7
   18d74:	mov	r0, r6
   18d78:	bl	186b4 <__assert_fail@plt+0x6dac>
   18d7c:	ldr	r2, [sp, #100]	; 0x64
   18d80:	ldr	r3, [r5]
   18d84:	cmp	r2, r3
   18d88:	bne	18d94 <__assert_fail@plt+0x748c>
   18d8c:	add	sp, sp, #104	; 0x68
   18d90:	pop	{r4, r5, r6, r7, r8, pc}
   18d94:	bl	11590 <__stack_chk_fail@plt>
   18d98:	andeq	pc, r2, r0, lsl #30
   18d9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18da0:	mov	r6, r1
   18da4:	ldr	lr, [pc, #132]	; 18e30 <__assert_fail@plt+0x7528>
   18da8:	mov	r5, r2
   18dac:	mov	r8, r0
   18db0:	mov	r9, r3
   18db4:	ldm	lr!, {r0, r1, r2, r3}
   18db8:	sub	sp, sp, #60	; 0x3c
   18dbc:	add	ip, sp, #4
   18dc0:	ldr	r4, [pc, #108]	; 18e34 <__assert_fail@plt+0x752c>
   18dc4:	stmia	ip!, {r0, r1, r2, r3}
   18dc8:	mov	r7, #10
   18dcc:	ldm	lr!, {r0, r1, r2, r3}
   18dd0:	cmp	r5, #0
   18dd4:	cmpne	r6, #0
   18dd8:	str	r7, [sp, #4]
   18ddc:	stmia	ip!, {r0, r1, r2, r3}
   18de0:	ldm	lr, {r0, r1, r2, r3}
   18de4:	ldr	lr, [r4]
   18de8:	stm	ip, {r0, r1, r2, r3}
   18dec:	str	lr, [sp, #52]	; 0x34
   18df0:	beq	18e2c <__assert_fail@plt+0x7524>
   18df4:	add	r3, sp, #4
   18df8:	ldr	r2, [sp, #88]	; 0x58
   18dfc:	mov	r1, r9
   18e00:	mov	r0, r8
   18e04:	str	r6, [sp, #44]	; 0x2c
   18e08:	str	r5, [sp, #48]	; 0x30
   18e0c:	bl	186b4 <__assert_fail@plt+0x6dac>
   18e10:	ldr	r2, [sp, #52]	; 0x34
   18e14:	ldr	r3, [r4]
   18e18:	cmp	r2, r3
   18e1c:	bne	18e28 <__assert_fail@plt+0x7520>
   18e20:	add	sp, sp, #60	; 0x3c
   18e24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18e28:	bl	11590 <__stack_chk_fail@plt>
   18e2c:	bl	118c0 <abort@plt>
   18e30:	andeq	r0, r3, r4, lsl #7
   18e34:	andeq	pc, r2, r0, lsl #30
   18e38:	push	{lr}		; (str lr, [sp, #-4]!)
   18e3c:	sub	sp, sp, #12
   18e40:	mvn	ip, #0
   18e44:	str	ip, [sp]
   18e48:	bl	18d9c <__assert_fail@plt+0x7494>
   18e4c:	add	sp, sp, #12
   18e50:	pop	{pc}		; (ldr pc, [sp], #4)
   18e54:	push	{lr}		; (str lr, [sp, #-4]!)
   18e58:	sub	sp, sp, #12
   18e5c:	mvn	ip, #0
   18e60:	mov	r3, r2
   18e64:	str	ip, [sp]
   18e68:	mov	r2, r1
   18e6c:	mov	r1, r0
   18e70:	mov	r0, #0
   18e74:	bl	18d9c <__assert_fail@plt+0x7494>
   18e78:	add	sp, sp, #12
   18e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e80:	push	{lr}		; (str lr, [sp, #-4]!)
   18e84:	sub	sp, sp, #12
   18e88:	str	r3, [sp]
   18e8c:	mov	r3, r2
   18e90:	mov	r2, r1
   18e94:	mov	r1, r0
   18e98:	mov	r0, #0
   18e9c:	bl	18d9c <__assert_fail@plt+0x7494>
   18ea0:	add	sp, sp, #12
   18ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ea8:	ldr	r3, [pc]	; 18eb0 <__assert_fail@plt+0x75a8>
   18eac:	b	186b4 <__assert_fail@plt+0x6dac>
   18eb0:	andeq	r0, r3, ip, lsr #3
   18eb4:	mov	r2, r1
   18eb8:	ldr	r3, [pc, #8]	; 18ec8 <__assert_fail@plt+0x75c0>
   18ebc:	mov	r1, r0
   18ec0:	mov	r0, #0
   18ec4:	b	186b4 <__assert_fail@plt+0x6dac>
   18ec8:	andeq	r0, r3, ip, lsr #3
   18ecc:	ldr	r3, [pc, #4]	; 18ed8 <__assert_fail@plt+0x75d0>
   18ed0:	mvn	r2, #0
   18ed4:	b	186b4 <__assert_fail@plt+0x6dac>
   18ed8:	andeq	r0, r3, ip, lsr #3
   18edc:	mov	r1, r0
   18ee0:	ldr	r3, [pc, #8]	; 18ef0 <__assert_fail@plt+0x75e8>
   18ee4:	mvn	r2, #0
   18ee8:	mov	r0, #0
   18eec:	b	186b4 <__assert_fail@plt+0x6dac>
   18ef0:	andeq	r0, r3, ip, lsr #3
   18ef4:	push	{r4, r5, r6, lr}
   18ef8:	mov	r4, #0
   18efc:	mov	r5, r0
   18f00:	str	r4, [r0, #4]
   18f04:	mov	r1, #524288	; 0x80000
   18f08:	ldr	r0, [pc, #52]	; 18f44 <__assert_fail@plt+0x763c>
   18f0c:	bl	1a998 <__assert_fail@plt+0x9090>
   18f10:	cmp	r0, r4
   18f14:	str	r0, [r5]
   18f18:	blt	18f24 <__assert_fail@plt+0x761c>
   18f1c:	mov	r0, r4
   18f20:	pop	{r4, r5, r6, pc}
   18f24:	mov	r1, r4
   18f28:	mov	r0, r4
   18f2c:	bl	11704 <getcwd@plt>
   18f30:	clz	r4, r0
   18f34:	lsr	r4, r4, #5
   18f38:	str	r0, [r5, #4]
   18f3c:	rsb	r0, r4, #0
   18f40:	pop	{r4, r5, r6, pc}
   18f44:	andeq	lr, r1, ip, lsl #16
   18f48:	ldr	r3, [r0]
   18f4c:	cmp	r3, #0
   18f50:	blt	18f5c <__assert_fail@plt+0x7654>
   18f54:	mov	r0, r3
   18f58:	b	11854 <fchdir@plt>
   18f5c:	ldr	r0, [r0, #4]
   18f60:	b	19860 <__assert_fail@plt+0x7f58>
   18f64:	push	{r4, lr}
   18f68:	mov	r4, r0
   18f6c:	ldr	r0, [r0]
   18f70:	cmp	r0, #0
   18f74:	blt	18f7c <__assert_fail@plt+0x7674>
   18f78:	bl	118cc <close@plt>
   18f7c:	ldr	r0, [r4, #4]
   18f80:	pop	{r4, lr}
   18f84:	b	11548 <free@plt>
   18f88:	push	{r4, r5, r6, lr}
   18f8c:	sub	sp, sp, #32
   18f90:	cmp	r1, #0
   18f94:	mov	r5, r0
   18f98:	ldr	r4, [sp, #48]	; 0x30
   18f9c:	ldr	r6, [sp, #52]	; 0x34
   18fa0:	beq	19030 <__assert_fail@plt+0x7728>
   18fa4:	strd	r2, [sp]
   18fa8:	mov	r3, r1
   18fac:	ldr	r2, [pc, #828]	; 192f0 <__assert_fail@plt+0x79e8>
   18fb0:	mov	r1, #1
   18fb4:	bl	117ac <__fprintf_chk@plt>
   18fb8:	mov	r2, #5
   18fbc:	ldr	r1, [pc, #816]	; 192f4 <__assert_fail@plt+0x79ec>
   18fc0:	mov	r0, #0
   18fc4:	bl	11584 <dcgettext@plt>
   18fc8:	ldr	r3, [pc, #808]	; 192f8 <__assert_fail@plt+0x79f0>
   18fcc:	ldr	r2, [pc, #808]	; 192fc <__assert_fail@plt+0x79f4>
   18fd0:	str	r3, [sp]
   18fd4:	mov	r1, #1
   18fd8:	mov	r3, r0
   18fdc:	mov	r0, r5
   18fe0:	bl	117ac <__fprintf_chk@plt>
   18fe4:	ldr	r1, [pc, #788]	; 19300 <__assert_fail@plt+0x79f8>
   18fe8:	mov	r2, #5
   18fec:	mov	r0, #0
   18ff0:	bl	11584 <dcgettext@plt>
   18ff4:	mov	r1, r5
   18ff8:	bl	114c4 <fputs_unlocked@plt>
   18ffc:	cmp	r6, #9
   19000:	ldrls	pc, [pc, r6, lsl #2]
   19004:	b	192e0 <__assert_fail@plt+0x79d8>
   19008:	andeq	r9, r1, ip, ror #5
   1900c:	strheq	r9, [r1], -r4
   19010:	andeq	r9, r1, r0, ror #1
   19014:	andeq	r9, r1, r4, lsl r1
   19018:	andeq	r9, r1, r0, asr r1
   1901c:	muleq	r1, r0, r1
   19020:	ldrdeq	r9, [r1], -r8
   19024:	andeq	r9, r1, r8, lsr #4
   19028:	andeq	r9, r1, r0, lsl #5
   1902c:	andeq	r9, r1, r8, asr #32
   19030:	str	r3, [sp]
   19034:	mov	r1, #1
   19038:	mov	r3, r2
   1903c:	ldr	r2, [pc, #704]	; 19304 <__assert_fail@plt+0x79fc>
   19040:	bl	117ac <__fprintf_chk@plt>
   19044:	b	18fb8 <__assert_fail@plt+0x76b0>
   19048:	ldr	r1, [pc, #696]	; 19308 <__assert_fail@plt+0x7a00>
   1904c:	mov	r2, #5
   19050:	mov	r0, #0
   19054:	bl	11584 <dcgettext@plt>
   19058:	ldr	r2, [r4, #32]
   1905c:	ldr	r3, [r4, #28]
   19060:	ldr	r1, [r4, #24]
   19064:	str	r2, [sp, #28]
   19068:	ldr	r2, [r4, #20]
   1906c:	str	r3, [sp, #24]
   19070:	ldr	r3, [r4, #16]
   19074:	str	r1, [sp, #20]
   19078:	ldr	r1, [r4, #12]
   1907c:	str	r2, [sp, #16]
   19080:	ldr	r2, [r4, #8]
   19084:	str	r3, [sp, #12]
   19088:	ldr	r3, [r4, #4]
   1908c:	str	r1, [sp, #8]
   19090:	str	r2, [sp, #4]
   19094:	str	r3, [sp]
   19098:	mov	r1, #1
   1909c:	ldr	r3, [r4]
   190a0:	mov	r2, r0
   190a4:	mov	r0, r5
   190a8:	bl	117ac <__fprintf_chk@plt>
   190ac:	add	sp, sp, #32
   190b0:	pop	{r4, r5, r6, pc}
   190b4:	mov	r2, #5
   190b8:	ldr	r1, [pc, #588]	; 1930c <__assert_fail@plt+0x7a04>
   190bc:	mov	r0, #0
   190c0:	bl	11584 <dcgettext@plt>
   190c4:	ldr	r3, [r4]
   190c8:	mov	r1, #1
   190cc:	mov	r2, r0
   190d0:	mov	r0, r5
   190d4:	add	sp, sp, #32
   190d8:	pop	{r4, r5, r6, lr}
   190dc:	b	117ac <__fprintf_chk@plt>
   190e0:	mov	r2, #5
   190e4:	ldr	r1, [pc, #548]	; 19310 <__assert_fail@plt+0x7a08>
   190e8:	mov	r0, #0
   190ec:	bl	11584 <dcgettext@plt>
   190f0:	ldr	r2, [r4, #4]
   190f4:	ldr	r3, [r4]
   190f8:	mov	r1, #1
   190fc:	str	r2, [sp, #48]	; 0x30
   19100:	mov	r2, r0
   19104:	mov	r0, r5
   19108:	add	sp, sp, #32
   1910c:	pop	{r4, r5, r6, lr}
   19110:	b	117ac <__fprintf_chk@plt>
   19114:	mov	r2, #5
   19118:	ldr	r1, [pc, #500]	; 19314 <__assert_fail@plt+0x7a0c>
   1911c:	mov	r0, #0
   19120:	bl	11584 <dcgettext@plt>
   19124:	ldr	r2, [r4, #8]
   19128:	ldr	r3, [r4, #4]
   1912c:	mov	r1, #1
   19130:	str	r2, [sp, #52]	; 0x34
   19134:	str	r3, [sp, #48]	; 0x30
   19138:	ldr	r3, [r4]
   1913c:	mov	r2, r0
   19140:	mov	r0, r5
   19144:	add	sp, sp, #32
   19148:	pop	{r4, r5, r6, lr}
   1914c:	b	117ac <__fprintf_chk@plt>
   19150:	mov	r2, #5
   19154:	ldr	r1, [pc, #444]	; 19318 <__assert_fail@plt+0x7a10>
   19158:	mov	r0, #0
   1915c:	bl	11584 <dcgettext@plt>
   19160:	ldr	r1, [r4, #12]
   19164:	ldr	r2, [r4, #8]
   19168:	ldr	r3, [r4, #4]
   1916c:	str	r1, [sp, #8]
   19170:	str	r2, [sp, #4]
   19174:	str	r3, [sp]
   19178:	mov	r1, #1
   1917c:	ldr	r3, [r4]
   19180:	mov	r2, r0
   19184:	mov	r0, r5
   19188:	bl	117ac <__fprintf_chk@plt>
   1918c:	b	190ac <__assert_fail@plt+0x77a4>
   19190:	mov	r2, #5
   19194:	ldr	r1, [pc, #384]	; 1931c <__assert_fail@plt+0x7a14>
   19198:	mov	r0, #0
   1919c:	bl	11584 <dcgettext@plt>
   191a0:	ldr	r3, [r4, #16]
   191a4:	ldr	r1, [r4, #12]
   191a8:	ldr	r2, [r4, #8]
   191ac:	str	r3, [sp, #12]
   191b0:	ldr	r3, [r4, #4]
   191b4:	str	r1, [sp, #8]
   191b8:	str	r2, [sp, #4]
   191bc:	str	r3, [sp]
   191c0:	mov	r1, #1
   191c4:	ldr	r3, [r4]
   191c8:	mov	r2, r0
   191cc:	mov	r0, r5
   191d0:	bl	117ac <__fprintf_chk@plt>
   191d4:	b	190ac <__assert_fail@plt+0x77a4>
   191d8:	mov	r2, #5
   191dc:	ldr	r1, [pc, #316]	; 19320 <__assert_fail@plt+0x7a18>
   191e0:	mov	r0, #0
   191e4:	bl	11584 <dcgettext@plt>
   191e8:	ldr	r2, [r4, #20]
   191ec:	ldr	r3, [r4, #16]
   191f0:	ldr	r1, [r4, #12]
   191f4:	str	r2, [sp, #16]
   191f8:	ldr	r2, [r4, #8]
   191fc:	str	r3, [sp, #12]
   19200:	ldr	r3, [r4, #4]
   19204:	str	r1, [sp, #8]
   19208:	str	r2, [sp, #4]
   1920c:	str	r3, [sp]
   19210:	mov	r1, #1
   19214:	ldr	r3, [r4]
   19218:	mov	r2, r0
   1921c:	mov	r0, r5
   19220:	bl	117ac <__fprintf_chk@plt>
   19224:	b	190ac <__assert_fail@plt+0x77a4>
   19228:	mov	r2, #5
   1922c:	ldr	r1, [pc, #240]	; 19324 <__assert_fail@plt+0x7a1c>
   19230:	mov	r0, #0
   19234:	bl	11584 <dcgettext@plt>
   19238:	ldr	r1, [r4, #24]
   1923c:	ldr	r2, [r4, #20]
   19240:	ldr	r3, [r4, #16]
   19244:	str	r1, [sp, #20]
   19248:	ldr	r1, [r4, #12]
   1924c:	str	r2, [sp, #16]
   19250:	ldr	r2, [r4, #8]
   19254:	str	r3, [sp, #12]
   19258:	ldr	r3, [r4, #4]
   1925c:	str	r1, [sp, #8]
   19260:	str	r2, [sp, #4]
   19264:	str	r3, [sp]
   19268:	mov	r1, #1
   1926c:	ldr	r3, [r4]
   19270:	mov	r2, r0
   19274:	mov	r0, r5
   19278:	bl	117ac <__fprintf_chk@plt>
   1927c:	b	190ac <__assert_fail@plt+0x77a4>
   19280:	mov	r2, #5
   19284:	ldr	r1, [pc, #156]	; 19328 <__assert_fail@plt+0x7a20>
   19288:	mov	r0, #0
   1928c:	bl	11584 <dcgettext@plt>
   19290:	ldr	r3, [r4, #28]
   19294:	ldr	r1, [r4, #24]
   19298:	ldr	r2, [r4, #20]
   1929c:	str	r3, [sp, #24]
   192a0:	ldr	r3, [r4, #16]
   192a4:	str	r1, [sp, #20]
   192a8:	ldr	r1, [r4, #12]
   192ac:	str	r2, [sp, #16]
   192b0:	ldr	r2, [r4, #8]
   192b4:	str	r3, [sp, #12]
   192b8:	ldr	r3, [r4, #4]
   192bc:	str	r1, [sp, #8]
   192c0:	str	r2, [sp, #4]
   192c4:	str	r3, [sp]
   192c8:	mov	r1, #1
   192cc:	ldr	r3, [r4]
   192d0:	mov	r2, r0
   192d4:	mov	r0, r5
   192d8:	bl	117ac <__fprintf_chk@plt>
   192dc:	b	190ac <__assert_fail@plt+0x77a4>
   192e0:	mov	r2, #5
   192e4:	ldr	r1, [pc, #64]	; 1932c <__assert_fail@plt+0x7a24>
   192e8:	b	19050 <__assert_fail@plt+0x7748>
   192ec:	bl	118c0 <abort@plt>
   192f0:	andeq	lr, r1, r8, asr #25
   192f4:	ldrdeq	lr, [r1], -ip
   192f8:	andeq	r0, r0, r2, ror #15
   192fc:			; <UNDEFINED> instruction: 0x0001efb0
   19300:	andeq	lr, r1, r0, ror #25
   19304:	ldrdeq	lr, [r1], -r4
   19308:			; <UNDEFINED> instruction: 0x0001eeb8
   1930c:	andeq	lr, r1, ip, lsr #27
   19310:			; <UNDEFINED> instruction: 0x0001edbc
   19314:	ldrdeq	lr, [r1], -r4
   19318:	strdeq	lr, [r1], -r0
   1931c:	andeq	lr, r1, r0, lsl lr
   19320:	andeq	lr, r1, r4, lsr lr
   19324:	andeq	lr, r1, ip, asr lr
   19328:	andeq	lr, r1, r8, lsl #29
   1932c:	andeq	lr, r1, ip, ror #29
   19330:	push	{r4, r5, lr}
   19334:	sub	sp, sp, #12
   19338:	ldr	r5, [sp, #24]
   1933c:	ldr	ip, [r5]
   19340:	cmp	ip, #0
   19344:	beq	19360 <__assert_fail@plt+0x7a58>
   19348:	mov	lr, r5
   1934c:	mov	ip, #0
   19350:	ldr	r4, [lr, #4]!
   19354:	add	ip, ip, #1
   19358:	cmp	r4, #0
   1935c:	bne	19350 <__assert_fail@plt+0x7a48>
   19360:	stm	sp, {r5, ip}
   19364:	bl	18f88 <__assert_fail@plt+0x7680>
   19368:	add	sp, sp, #12
   1936c:	pop	{r4, r5, pc}
   19370:	push	{r4, r5, r6, lr}
   19374:	sub	sp, sp, #56	; 0x38
   19378:	ldr	r6, [pc, #88]	; 193d8 <__assert_fail@plt+0x7ad0>
   1937c:	ldr	r5, [sp, #72]	; 0x48
   19380:	add	r4, sp, #8
   19384:	ldr	ip, [r6]
   19388:	str	ip, [sp, #52]	; 0x34
   1938c:	mov	ip, #0
   19390:	ldr	lr, [r5], #4
   19394:	cmp	lr, #0
   19398:	str	lr, [r4, #4]!
   1939c:	beq	193ac <__assert_fail@plt+0x7aa4>
   193a0:	add	ip, ip, #1
   193a4:	cmp	ip, #10
   193a8:	bne	19390 <__assert_fail@plt+0x7a88>
   193ac:	add	lr, sp, #12
   193b0:	str	ip, [sp, #4]
   193b4:	str	lr, [sp]
   193b8:	bl	18f88 <__assert_fail@plt+0x7680>
   193bc:	ldr	r2, [sp, #52]	; 0x34
   193c0:	ldr	r3, [r6]
   193c4:	cmp	r2, r3
   193c8:	bne	193d4 <__assert_fail@plt+0x7acc>
   193cc:	add	sp, sp, #56	; 0x38
   193d0:	pop	{r4, r5, r6, pc}
   193d4:	bl	11590 <__stack_chk_fail@plt>
   193d8:	andeq	pc, r2, r0, lsl #30
   193dc:	push	{r3}		; (str r3, [sp, #-4]!)
   193e0:	mov	ip, #0
   193e4:	push	{r4, r5, r6, lr}
   193e8:	sub	sp, sp, #60	; 0x3c
   193ec:	ldr	r6, [pc, #100]	; 19458 <__assert_fail@plt+0x7b50>
   193f0:	add	r5, sp, #8
   193f4:	add	r4, sp, #80	; 0x50
   193f8:	ldr	r3, [r6]
   193fc:	str	r4, [sp, #8]
   19400:	str	r3, [sp, #52]	; 0x34
   19404:	ldr	r3, [sp, #76]	; 0x4c
   19408:	ldr	lr, [r4], #4
   1940c:	cmp	lr, #0
   19410:	str	lr, [r5, #4]!
   19414:	beq	19424 <__assert_fail@plt+0x7b1c>
   19418:	add	ip, ip, #1
   1941c:	cmp	ip, #10
   19420:	bne	19408 <__assert_fail@plt+0x7b00>
   19424:	add	lr, sp, #12
   19428:	str	ip, [sp, #4]
   1942c:	str	lr, [sp]
   19430:	bl	18f88 <__assert_fail@plt+0x7680>
   19434:	ldr	r2, [sp, #52]	; 0x34
   19438:	ldr	r3, [r6]
   1943c:	cmp	r2, r3
   19440:	bne	19454 <__assert_fail@plt+0x7b4c>
   19444:	add	sp, sp, #60	; 0x3c
   19448:	pop	{r4, r5, r6, lr}
   1944c:	add	sp, sp, #4
   19450:	bx	lr
   19454:	bl	11590 <__stack_chk_fail@plt>
   19458:	andeq	pc, r2, r0, lsl #30
   1945c:	push	{r4, lr}
   19460:	mov	r2, #5
   19464:	ldr	r1, [pc, #88]	; 194c4 <__assert_fail@plt+0x7bbc>
   19468:	mov	r0, #0
   1946c:	bl	11584 <dcgettext@plt>
   19470:	ldr	r2, [pc, #80]	; 194c8 <__assert_fail@plt+0x7bc0>
   19474:	mov	r1, r0
   19478:	mov	r0, #1
   1947c:	bl	11794 <__printf_chk@plt>
   19480:	mov	r2, #5
   19484:	ldr	r1, [pc, #64]	; 194cc <__assert_fail@plt+0x7bc4>
   19488:	mov	r0, #0
   1948c:	bl	11584 <dcgettext@plt>
   19490:	ldr	r3, [pc, #56]	; 194d0 <__assert_fail@plt+0x7bc8>
   19494:	ldr	r2, [pc, #56]	; 194d4 <__assert_fail@plt+0x7bcc>
   19498:	mov	r1, r0
   1949c:	mov	r0, #1
   194a0:	bl	11794 <__printf_chk@plt>
   194a4:	ldr	r1, [pc, #44]	; 194d8 <__assert_fail@plt+0x7bd0>
   194a8:	mov	r2, #5
   194ac:	mov	r0, #0
   194b0:	bl	11584 <dcgettext@plt>
   194b4:	ldr	r3, [pc, #32]	; 194dc <__assert_fail@plt+0x7bd4>
   194b8:	pop	{r4, lr}
   194bc:	ldr	r1, [r3]
   194c0:	b	114c4 <fputs_unlocked@plt>
   194c4:	andeq	lr, r1, r8, lsr #30
   194c8:	andeq	lr, r1, r0, asr #30
   194cc:	andeq	lr, r1, r8, asr pc
   194d0:	andeq	lr, r1, r4, lsr r7
   194d4:	andeq	lr, r1, ip, asr r7
   194d8:	andeq	lr, r1, ip, ror #30
   194dc:	strdeq	r0, [r3], -r4
   194e0:	push	{r4, lr}
   194e4:	mov	r4, r0
   194e8:	bl	11698 <malloc@plt>
   194ec:	adds	r4, r4, #0
   194f0:	movne	r4, #1
   194f4:	cmp	r0, #0
   194f8:	movne	r4, #0
   194fc:	cmp	r4, #0
   19500:	popeq	{r4, pc}
   19504:	bl	19728 <__assert_fail@plt+0x7e20>
   19508:	push	{r4, r5, r6, lr}
   1950c:	umull	r4, r5, r0, r1
   19510:	adds	r3, r5, #0
   19514:	movne	r3, #1
   19518:	cmp	r4, #0
   1951c:	blt	19534 <__assert_fail@plt+0x7c2c>
   19520:	cmp	r3, #0
   19524:	bne	19534 <__assert_fail@plt+0x7c2c>
   19528:	mul	r0, r1, r0
   1952c:	pop	{r4, r5, r6, lr}
   19530:	b	194e0 <__assert_fail@plt+0x7bd8>
   19534:	bl	19728 <__assert_fail@plt+0x7e20>
   19538:	b	194e0 <__assert_fail@plt+0x7bd8>
   1953c:	adds	r3, r0, #0
   19540:	movne	r3, #1
   19544:	cmp	r1, #0
   19548:	movne	r3, #0
   1954c:	cmp	r3, #0
   19550:	push	{r4, lr}
   19554:	bne	1957c <__assert_fail@plt+0x7c74>
   19558:	mov	r4, r1
   1955c:	bl	1159c <realloc@plt>
   19560:	adds	r4, r4, #0
   19564:	movne	r4, #1
   19568:	cmp	r0, #0
   1956c:	movne	r4, #0
   19570:	cmp	r4, #0
   19574:	popeq	{r4, pc}
   19578:	bl	19728 <__assert_fail@plt+0x7e20>
   1957c:	bl	11548 <free@plt>
   19580:	mov	r0, #0
   19584:	pop	{r4, pc}
   19588:	push	{r4, r5, r6, lr}
   1958c:	umull	r4, r5, r1, r2
   19590:	adds	r3, r5, #0
   19594:	movne	r3, #1
   19598:	cmp	r4, #0
   1959c:	blt	195b4 <__assert_fail@plt+0x7cac>
   195a0:	cmp	r3, #0
   195a4:	bne	195b4 <__assert_fail@plt+0x7cac>
   195a8:	mul	r1, r2, r1
   195ac:	pop	{r4, r5, r6, lr}
   195b0:	b	1953c <__assert_fail@plt+0x7c34>
   195b4:	bl	19728 <__assert_fail@plt+0x7e20>
   195b8:	push	{r4, r5, r6, r7, r8, lr}
   195bc:	subs	r7, r0, #0
   195c0:	mov	r6, r1
   195c4:	mov	r5, r2
   195c8:	ldr	r4, [r1]
   195cc:	beq	19600 <__assert_fail@plt+0x7cf8>
   195d0:	mov	r1, r2
   195d4:	ldr	r0, [pc, #104]	; 19644 <__assert_fail@plt+0x7d3c>
   195d8:	bl	1cbfc <__assert_fail@plt+0xb2f4>
   195dc:	cmp	r0, r4
   195e0:	bls	19624 <__assert_fail@plt+0x7d1c>
   195e4:	add	r3, r4, #1
   195e8:	add	r4, r3, r4, lsr #1
   195ec:	str	r4, [r6]
   195f0:	mul	r1, r5, r4
   195f4:	mov	r0, r7
   195f8:	pop	{r4, r5, r6, r7, r8, lr}
   195fc:	b	1953c <__assert_fail@plt+0x7c34>
   19600:	cmp	r4, #0
   19604:	beq	19628 <__assert_fail@plt+0x7d20>
   19608:	umull	r0, r1, r4, r5
   1960c:	adds	r3, r1, #0
   19610:	movne	r3, #1
   19614:	cmp	r0, #0
   19618:	blt	19624 <__assert_fail@plt+0x7d1c>
   1961c:	cmp	r3, #0
   19620:	beq	195ec <__assert_fail@plt+0x7ce4>
   19624:	bl	19728 <__assert_fail@plt+0x7e20>
   19628:	mov	r1, r2
   1962c:	mov	r0, #64	; 0x40
   19630:	bl	1cbfc <__assert_fail@plt+0xb2f4>
   19634:	cmp	r5, #64	; 0x40
   19638:	movls	r4, r0
   1963c:	addhi	r4, r0, #1
   19640:	b	19608 <__assert_fail@plt+0x7d00>
   19644:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   19648:	cmp	r0, #0
   1964c:	ldr	r3, [r1]
   19650:	beq	19674 <__assert_fail@plt+0x7d6c>
   19654:	ldr	r2, [pc, #60]	; 19698 <__assert_fail@plt+0x7d90>
   19658:	cmp	r3, r2
   1965c:	bhi	19690 <__assert_fail@plt+0x7d88>
   19660:	add	r2, r3, #1
   19664:	add	r3, r2, r3, lsr #1
   19668:	str	r3, [r1]
   1966c:	mov	r1, r3
   19670:	b	1953c <__assert_fail@plt+0x7c34>
   19674:	cmp	r3, #0
   19678:	bne	1968c <__assert_fail@plt+0x7d84>
   1967c:	mov	r3, #64	; 0x40
   19680:	str	r3, [r1]
   19684:	mov	r1, r3
   19688:	b	1953c <__assert_fail@plt+0x7c34>
   1968c:	bge	19668 <__assert_fail@plt+0x7d60>
   19690:	push	{r4, lr}
   19694:	bl	19728 <__assert_fail@plt+0x7e20>
   19698:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1969c:	push	{r4, lr}
   196a0:	mov	r4, r0
   196a4:	bl	194e0 <__assert_fail@plt+0x7bd8>
   196a8:	mov	r2, r4
   196ac:	mov	r1, #0
   196b0:	pop	{r4, lr}
   196b4:	b	11788 <memset@plt>
   196b8:	push	{r4, r5, r6, lr}
   196bc:	umull	r4, r5, r0, r1
   196c0:	adds	r3, r5, #0
   196c4:	movne	r3, #1
   196c8:	cmp	r4, #0
   196cc:	blt	196e4 <__assert_fail@plt+0x7ddc>
   196d0:	cmp	r3, #0
   196d4:	bne	196e4 <__assert_fail@plt+0x7ddc>
   196d8:	bl	114b8 <calloc@plt>
   196dc:	cmp	r0, #0
   196e0:	popne	{r4, r5, r6, pc}
   196e4:	bl	19728 <__assert_fail@plt+0x7e20>
   196e8:	push	{r4, r5, r6, lr}
   196ec:	mov	r4, r1
   196f0:	mov	r5, r0
   196f4:	mov	r0, r1
   196f8:	bl	194e0 <__assert_fail@plt+0x7bd8>
   196fc:	mov	r2, r4
   19700:	mov	r1, r5
   19704:	pop	{r4, r5, r6, lr}
   19708:	b	11560 <memcpy@plt>
   1970c:	push	{r4, lr}
   19710:	mov	r4, r0
   19714:	bl	11728 <strlen@plt>
   19718:	add	r1, r0, #1
   1971c:	mov	r0, r4
   19720:	pop	{r4, lr}
   19724:	b	196e8 <__assert_fail@plt+0x7de0>
   19728:	ldr	r3, [pc, #44]	; 1975c <__assert_fail@plt+0x7e54>
   1972c:	push	{r4, lr}
   19730:	mov	r2, #5
   19734:	ldr	r1, [pc, #36]	; 19760 <__assert_fail@plt+0x7e58>
   19738:	mov	r0, #0
   1973c:	ldr	r4, [r3]
   19740:	bl	11584 <dcgettext@plt>
   19744:	ldr	r2, [pc, #24]	; 19764 <__assert_fail@plt+0x7e5c>
   19748:	mov	r1, #0
   1974c:	mov	r3, r0
   19750:	mov	r0, r4
   19754:	bl	1165c <error@plt>
   19758:	bl	118c0 <abort@plt>
   1975c:	muleq	r3, r8, r1
   19760:	andeq	lr, r1, r0, ror #31
   19764:	andeq	lr, r1, r4, lsl r6
   19768:	mov	r1, #0
   1976c:	push	{r4, lr}
   19770:	mov	r0, r1
   19774:	bl	11704 <getcwd@plt>
   19778:	subs	r4, r0, #0
   1977c:	beq	19788 <__assert_fail@plt+0x7e80>
   19780:	mov	r0, r4
   19784:	pop	{r4, pc}
   19788:	bl	11764 <__errno_location@plt>
   1978c:	ldr	r3, [r0]
   19790:	cmp	r3, #12
   19794:	bne	19780 <__assert_fail@plt+0x7e78>
   19798:	bl	19728 <__assert_fail@plt+0x7e20>
   1979c:	push	{r0, r1, r2, r3}
   197a0:	push	{r4, lr}
   197a4:	sub	sp, sp, #8
   197a8:	ldr	r4, [pc, #60]	; 197ec <__assert_fail@plt+0x7ee4>
   197ac:	add	r3, sp, #20
   197b0:	mov	r1, r3
   197b4:	ldr	r2, [r4]
   197b8:	ldr	r0, [sp, #16]
   197bc:	str	r2, [sp, #4]
   197c0:	str	r3, [sp]
   197c4:	bl	1ab9c <__assert_fail@plt+0x9294>
   197c8:	ldr	r2, [sp, #4]
   197cc:	ldr	r3, [r4]
   197d0:	cmp	r2, r3
   197d4:	bne	197e8 <__assert_fail@plt+0x7ee0>
   197d8:	add	sp, sp, #8
   197dc:	pop	{r4, lr}
   197e0:	add	sp, sp, #16
   197e4:	bx	lr
   197e8:	bl	11590 <__stack_chk_fail@plt>
   197ec:	andeq	pc, r2, r0, lsl #30
   197f0:	cmp	r0, #0
   197f4:	bxlt	lr
   197f8:	push	{r4, lr}
   197fc:	bl	118cc <close@plt>
   19800:	cmp	r0, #0
   19804:	popeq	{r4, pc}
   19808:	ldr	r3, [pc, #12]	; 1981c <__assert_fail@plt+0x7f14>
   1980c:	mov	r2, #64	; 0x40
   19810:	ldr	r1, [pc, #8]	; 19820 <__assert_fail@plt+0x7f18>
   19814:	ldr	r0, [pc, #8]	; 19824 <__assert_fail@plt+0x7f1c>
   19818:	bl	11908 <__assert_fail@plt>
   1981c:	strdeq	lr, [r1], -r4
   19820:	andeq	pc, r1, ip
   19824:	andeq	pc, r1, r0, lsr #32
   19828:	push	{r4, r5, r6, lr}
   1982c:	mov	r2, #18688	; 0x4900
   19830:	mov	r4, r0
   19834:	ldr	r0, [r0]
   19838:	bl	1174c <openat64@plt>
   1983c:	subs	r5, r0, #0
   19840:	blt	19858 <__assert_fail@plt+0x7f50>
   19844:	ldr	r0, [r4]
   19848:	bl	197f0 <__assert_fail@plt+0x7ee8>
   1984c:	str	r5, [r4]
   19850:	mov	r0, #0
   19854:	pop	{r4, r5, r6, pc}
   19858:	mvn	r0, #0
   1985c:	pop	{r4, r5, r6, pc}
   19860:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19864:	sub	sp, sp, #8
   19868:	ldr	r9, [pc, #592]	; 19ac0 <__assert_fail@plt+0x81b8>
   1986c:	mov	r7, r0
   19870:	ldr	r3, [r9]
   19874:	str	r3, [sp, #4]
   19878:	bl	115cc <chdir@plt>
   1987c:	subs	r4, r0, #0
   19880:	beq	19980 <__assert_fail@plt+0x8078>
   19884:	bl	11764 <__errno_location@plt>
   19888:	ldr	r3, [r0]
   1988c:	mov	sl, r0
   19890:	cmp	r3, #36	; 0x24
   19894:	bne	19980 <__assert_fail@plt+0x8078>
   19898:	mov	r0, r7
   1989c:	bl	11728 <strlen@plt>
   198a0:	mvn	r3, #99	; 0x63
   198a4:	str	r3, [sp]
   198a8:	subs	r6, r0, #0
   198ac:	beq	19aac <__assert_fail@plt+0x81a4>
   198b0:	cmp	r6, #4096	; 0x1000
   198b4:	bcc	19a98 <__assert_fail@plt+0x8190>
   198b8:	ldr	r1, [pc, #516]	; 19ac4 <__assert_fail@plt+0x81bc>
   198bc:	mov	r0, r7
   198c0:	bl	118fc <strspn@plt>
   198c4:	cmp	r0, #2
   198c8:	mov	r5, r0
   198cc:	beq	199cc <__assert_fail@plt+0x80c4>
   198d0:	cmp	r0, #0
   198d4:	moveq	r5, r7
   198d8:	bne	1999c <__assert_fail@plt+0x8094>
   198dc:	ldrb	r3, [r5]
   198e0:	cmp	r3, #47	; 0x2f
   198e4:	beq	19a84 <__assert_fail@plt+0x817c>
   198e8:	add	r7, r7, r6
   198ec:	cmp	r5, r7
   198f0:	bhi	19a70 <__assert_fail@plt+0x8168>
   198f4:	ldr	r6, [pc, #460]	; 19ac8 <__assert_fail@plt+0x81c0>
   198f8:	sub	r3, r7, r5
   198fc:	cmp	r3, r6
   19900:	ble	19a20 <__assert_fail@plt+0x8118>
   19904:	ldr	r8, [pc, #440]	; 19ac4 <__assert_fail@plt+0x81bc>
   19908:	b	1995c <__assert_fail@plt+0x8054>
   1990c:	sub	r3, r4, r5
   19910:	cmp	r3, r6
   19914:	mov	r3, #0
   19918:	strb	r3, [r4]
   1991c:	bgt	19a58 <__assert_fail@plt+0x8150>
   19920:	mov	r1, r5
   19924:	mov	r0, sp
   19928:	bl	19828 <__assert_fail@plt+0x7f20>
   1992c:	mov	r3, #47	; 0x2f
   19930:	strb	r3, [r4]
   19934:	cmp	r0, #0
   19938:	bne	199b4 <__assert_fail@plt+0x80ac>
   1993c:	add	r4, r4, #1
   19940:	mov	r0, r4
   19944:	mov	r1, r8
   19948:	bl	118fc <strspn@plt>
   1994c:	add	r5, r4, r0
   19950:	sub	r3, r7, r5
   19954:	cmp	r3, r6
   19958:	ble	19a20 <__assert_fail@plt+0x8118>
   1995c:	mov	r2, #4096	; 0x1000
   19960:	mov	r1, #47	; 0x2f
   19964:	mov	r0, r5
   19968:	bl	11758 <memrchr@plt>
   1996c:	subs	r4, r0, #0
   19970:	bne	1990c <__assert_fail@plt+0x8004>
   19974:	mov	r3, #36	; 0x24
   19978:	str	r3, [sl]
   1997c:	mvn	r4, #0
   19980:	ldr	r2, [sp, #4]
   19984:	ldr	r3, [r9]
   19988:	mov	r0, r4
   1998c:	cmp	r2, r3
   19990:	bne	19a6c <__assert_fail@plt+0x8164>
   19994:	add	sp, sp, #8
   19998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1999c:	ldr	r1, [pc, #288]	; 19ac4 <__assert_fail@plt+0x81bc>
   199a0:	mov	r0, sp
   199a4:	bl	19828 <__assert_fail@plt+0x7f20>
   199a8:	cmp	r0, #0
   199ac:	addeq	r5, r7, r5
   199b0:	beq	198dc <__assert_fail@plt+0x7fd4>
   199b4:	ldr	r5, [sl]
   199b8:	ldr	r0, [sp]
   199bc:	bl	197f0 <__assert_fail@plt+0x7ee8>
   199c0:	mvn	r4, #0
   199c4:	str	r5, [sl]
   199c8:	b	19980 <__assert_fail@plt+0x8078>
   199cc:	sub	r2, r6, #3
   199d0:	mov	r1, #47	; 0x2f
   199d4:	add	r0, r7, #3
   199d8:	bl	117b8 <memchr@plt>
   199dc:	subs	r4, r0, #0
   199e0:	beq	1997c <__assert_fail@plt+0x8074>
   199e4:	mov	r3, #0
   199e8:	strb	r3, [r4]
   199ec:	mov	r1, r7
   199f0:	mov	r0, sp
   199f4:	bl	19828 <__assert_fail@plt+0x7f20>
   199f8:	mov	r3, #47	; 0x2f
   199fc:	strb	r3, [r4]
   19a00:	cmp	r0, #0
   19a04:	bne	199b4 <__assert_fail@plt+0x80ac>
   19a08:	add	r4, r4, #1
   19a0c:	mov	r0, r4
   19a10:	ldr	r1, [pc, #172]	; 19ac4 <__assert_fail@plt+0x81bc>
   19a14:	bl	118fc <strspn@plt>
   19a18:	add	r5, r4, r0
   19a1c:	b	198dc <__assert_fail@plt+0x7fd4>
   19a20:	cmp	r7, r5
   19a24:	bls	19a3c <__assert_fail@plt+0x8134>
   19a28:	mov	r1, r5
   19a2c:	mov	r0, sp
   19a30:	bl	19828 <__assert_fail@plt+0x7f20>
   19a34:	cmp	r0, #0
   19a38:	bne	199b4 <__assert_fail@plt+0x80ac>
   19a3c:	ldr	r0, [sp]
   19a40:	bl	11854 <fchdir@plt>
   19a44:	subs	r4, r0, #0
   19a48:	bne	199b4 <__assert_fail@plt+0x80ac>
   19a4c:	ldr	r0, [sp]
   19a50:	bl	197f0 <__assert_fail@plt+0x7ee8>
   19a54:	b	19980 <__assert_fail@plt+0x8078>
   19a58:	ldr	r3, [pc, #108]	; 19acc <__assert_fail@plt+0x81c4>
   19a5c:	mov	r2, #179	; 0xb3
   19a60:	ldr	r1, [pc, #104]	; 19ad0 <__assert_fail@plt+0x81c8>
   19a64:	ldr	r0, [pc, #104]	; 19ad4 <__assert_fail@plt+0x81cc>
   19a68:	bl	11908 <__assert_fail@plt>
   19a6c:	bl	11590 <__stack_chk_fail@plt>
   19a70:	ldr	r3, [pc, #84]	; 19acc <__assert_fail@plt+0x81c4>
   19a74:	mov	r2, #163	; 0xa3
   19a78:	ldr	r1, [pc, #80]	; 19ad0 <__assert_fail@plt+0x81c8>
   19a7c:	ldr	r0, [pc, #84]	; 19ad8 <__assert_fail@plt+0x81d0>
   19a80:	bl	11908 <__assert_fail@plt>
   19a84:	ldr	r3, [pc, #64]	; 19acc <__assert_fail@plt+0x81c4>
   19a88:	mov	r2, #162	; 0xa2
   19a8c:	ldr	r1, [pc, #60]	; 19ad0 <__assert_fail@plt+0x81c8>
   19a90:	ldr	r0, [pc, #68]	; 19adc <__assert_fail@plt+0x81d4>
   19a94:	bl	11908 <__assert_fail@plt>
   19a98:	ldr	r3, [pc, #44]	; 19acc <__assert_fail@plt+0x81c4>
   19a9c:	mov	r2, #127	; 0x7f
   19aa0:	ldr	r1, [pc, #40]	; 19ad0 <__assert_fail@plt+0x81c8>
   19aa4:	ldr	r0, [pc, #52]	; 19ae0 <__assert_fail@plt+0x81d8>
   19aa8:	bl	11908 <__assert_fail@plt>
   19aac:	ldr	r3, [pc, #24]	; 19acc <__assert_fail@plt+0x81c4>
   19ab0:	mov	r2, #126	; 0x7e
   19ab4:	ldr	r1, [pc, #20]	; 19ad0 <__assert_fail@plt+0x81c8>
   19ab8:	ldr	r0, [pc, #36]	; 19ae4 <__assert_fail@plt+0x81dc>
   19abc:	bl	11908 <__assert_fail@plt>
   19ac0:	andeq	pc, r2, r0, lsl #30
   19ac4:	andeq	pc, r1, r4, asr #32
   19ac8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   19acc:	andeq	pc, r1, r0
   19ad0:	andeq	pc, r1, ip
   19ad4:	andeq	pc, r1, r4, rrx
   19ad8:	andeq	pc, r1, r4, asr r0	; <UNPREDICTABLE>
   19adc:	andeq	pc, r1, r8, asr #32
   19ae0:	andeq	pc, r1, r8, lsr r0	; <UNPREDICTABLE>
   19ae4:	andeq	pc, r1, r0, lsr r0	; <UNPREDICTABLE>
   19ae8:	push	{r4, r5, r6, r7, r8, lr}
   19aec:	subs	r4, r0, #0
   19af0:	beq	19b40 <__assert_fail@plt+0x8238>
   19af4:	cmp	r4, #10
   19af8:	beq	19b04 <__assert_fail@plt+0x81fc>
   19afc:	mov	r0, r4
   19b00:	pop	{r4, r5, r6, r7, r8, pc}
   19b04:	ldr	r6, [r1]
   19b08:	mov	r5, r1
   19b0c:	mov	r0, r6
   19b10:	ldr	r1, [pc, #60]	; 19b54 <__assert_fail@plt+0x824c>
   19b14:	bl	1150c <strcmp@plt>
   19b18:	subs	r7, r0, #0
   19b1c:	bne	19afc <__assert_fail@plt+0x81f4>
   19b20:	mov	r0, r6
   19b24:	bl	11878 <freecon@plt>
   19b28:	str	r7, [r5]
   19b2c:	bl	11764 <__errno_location@plt>
   19b30:	mov	r3, #61	; 0x3d
   19b34:	mvn	r4, #0
   19b38:	str	r3, [r0]
   19b3c:	b	19afc <__assert_fail@plt+0x81f4>
   19b40:	bl	11764 <__errno_location@plt>
   19b44:	mov	r3, #95	; 0x5f
   19b48:	mvn	r4, #0
   19b4c:	str	r3, [r0]
   19b50:	b	19afc <__assert_fail@plt+0x81f4>
   19b54:	andeq	pc, r1, r8, ror r0	; <UNPREDICTABLE>
   19b58:	push	{r4, lr}
   19b5c:	mov	r4, r1
   19b60:	bl	1171c <getfilecon@plt>
   19b64:	mov	r1, r4
   19b68:	pop	{r4, lr}
   19b6c:	b	19ae8 <__assert_fail@plt+0x81e0>
   19b70:	push	{r4, lr}
   19b74:	mov	r4, r1
   19b78:	bl	1168c <lgetfilecon@plt>
   19b7c:	mov	r1, r4
   19b80:	pop	{r4, lr}
   19b84:	b	19ae8 <__assert_fail@plt+0x81e0>
   19b88:	push	{r4, lr}
   19b8c:	mov	r4, r1
   19b90:	bl	115a8 <fgetfilecon@plt>
   19b94:	mov	r1, r4
   19b98:	pop	{r4, lr}
   19b9c:	b	19ae8 <__assert_fail@plt+0x81e0>
   19ba0:	push	{r4, r5, r6, r7, r8, lr}
   19ba4:	subs	r7, r0, #0
   19ba8:	ldr	r5, [pc, #108]	; 19c1c <__assert_fail@plt+0x8314>
   19bac:	sub	sp, sp, #8
   19bb0:	mov	r8, r1
   19bb4:	ldr	r1, [r5]
   19bb8:	moveq	r7, sp
   19bbc:	str	r1, [sp, #4]
   19bc0:	mov	r0, r7
   19bc4:	mov	r1, r8
   19bc8:	mov	r6, r2
   19bcc:	bl	11650 <mbrtowc@plt>
   19bd0:	cmp	r6, #0
   19bd4:	cmnne	r0, #3
   19bd8:	mov	r4, r0
   19bdc:	bhi	19bfc <__assert_fail@plt+0x82f4>
   19be0:	ldr	r2, [sp, #4]
   19be4:	ldr	r3, [r5]
   19be8:	mov	r0, r4
   19bec:	cmp	r2, r3
   19bf0:	bne	19c18 <__assert_fail@plt+0x8310>
   19bf4:	add	sp, sp, #8
   19bf8:	pop	{r4, r5, r6, r7, r8, pc}
   19bfc:	mov	r0, #0
   19c00:	bl	1a9f4 <__assert_fail@plt+0x90ec>
   19c04:	cmp	r0, #0
   19c08:	moveq	r4, #1
   19c0c:	ldrbeq	r3, [r8]
   19c10:	streq	r3, [r7]
   19c14:	b	19be0 <__assert_fail@plt+0x82d8>
   19c18:	bl	11590 <__stack_chk_fail@plt>
   19c1c:	andeq	pc, r2, r0, lsl #30
   19c20:	push	{r4, r5, r6, r7, r8, lr}
   19c24:	mov	r4, r0
   19c28:	bl	11728 <strlen@plt>
   19c2c:	mov	ip, r4
   19c30:	mov	r3, #0
   19c34:	add	r0, r0, #1
   19c38:	b	19c4c <__assert_fail@plt+0x8344>
   19c3c:	cmp	r0, r2
   19c40:	strb	r1, [ip], #1
   19c44:	popls	{r4, r5, r6, r7, r8, pc}
   19c48:	mov	r3, r2
   19c4c:	ldrb	r1, [r4, r3]
   19c50:	add	r2, r3, #1
   19c54:	cmp	r1, #92	; 0x5c
   19c58:	bne	19c3c <__assert_fail@plt+0x8334>
   19c5c:	add	lr, r3, #4
   19c60:	cmp	lr, r0
   19c64:	bcs	19c3c <__assert_fail@plt+0x8334>
   19c68:	ldrb	r5, [r4, r2]
   19c6c:	sub	r5, r5, #48	; 0x30
   19c70:	uxtb	r6, r5
   19c74:	cmp	r6, #3
   19c78:	bhi	19c3c <__assert_fail@plt+0x8334>
   19c7c:	add	r3, r4, r3
   19c80:	ldrb	r6, [r3, #2]
   19c84:	sub	r6, r6, #48	; 0x30
   19c88:	uxtb	r7, r6
   19c8c:	cmp	r7, #7
   19c90:	bhi	19c3c <__assert_fail@plt+0x8334>
   19c94:	ldrb	r3, [r3, #3]
   19c98:	sub	r3, r3, #48	; 0x30
   19c9c:	uxtb	r3, r3
   19ca0:	cmp	r3, #7
   19ca4:	bhi	19c3c <__assert_fail@plt+0x8334>
   19ca8:	add	r5, r6, r5, lsl #3
   19cac:	mov	r2, lr
   19cb0:	add	r5, r3, r5, lsl #3
   19cb4:	strb	r5, [ip], #1
   19cb8:	b	19c48 <__assert_fail@plt+0x8340>
   19cbc:	push	{r4, lr}
   19cc0:	mov	r4, r0
   19cc4:	ldr	r0, [r0]
   19cc8:	bl	11548 <free@plt>
   19ccc:	ldr	r0, [r4, #4]
   19cd0:	bl	11548 <free@plt>
   19cd4:	ldr	r0, [r4, #8]
   19cd8:	bl	11548 <free@plt>
   19cdc:	ldrb	r3, [r4, #24]
   19ce0:	tst	r3, #4
   19ce4:	bne	19cf4 <__assert_fail@plt+0x83ec>
   19ce8:	mov	r0, r4
   19cec:	pop	{r4, lr}
   19cf0:	b	11548 <free@plt>
   19cf4:	ldr	r0, [r4, #12]
   19cf8:	bl	11548 <free@plt>
   19cfc:	mov	r0, r4
   19d00:	pop	{r4, lr}
   19d04:	b	11548 <free@plt>
   19d08:	ldr	r3, [pc, #1700]	; 1a3b4 <__assert_fail@plt+0x8aac>
   19d0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d10:	sub	sp, sp, #100	; 0x64
   19d14:	ldr	r3, [r3]
   19d18:	ldr	r1, [pc, #1688]	; 1a3b8 <__assert_fail@plt+0x8ab0>
   19d1c:	ldr	r0, [pc, #1688]	; 1a3bc <__assert_fail@plt+0x8ab4>
   19d20:	str	r3, [sp, #92]	; 0x5c
   19d24:	bl	1186c <fopen64@plt>
   19d28:	subs	r5, r0, #0
   19d2c:	beq	1a0bc <__assert_fail@plt+0x87b4>
   19d30:	ldr	r7, [pc, #1672]	; 1a3c0 <__assert_fail@plt+0x8ab8>
   19d34:	ldr	r8, [pc, #1672]	; 1a3c4 <__assert_fail@plt+0x8abc>
   19d38:	ldr	sl, [pc, #1672]	; 1a3c8 <__assert_fail@plt+0x8ac0>
   19d3c:	add	r6, sp, #40	; 0x28
   19d40:	mov	r3, #0
   19d44:	str	r3, [sp, #44]	; 0x2c
   19d48:	str	r3, [sp, #48]	; 0x30
   19d4c:	mov	r3, r5
   19d50:	mov	r2, #10
   19d54:	add	r1, sp, #48	; 0x30
   19d58:	add	r0, sp, #44	; 0x2c
   19d5c:	bl	114f4 <__getdelim@plt>
   19d60:	cmn	r0, #1
   19d64:	beq	19f68 <__assert_fail@plt+0x8660>
   19d68:	add	r0, sp, #64	; 0x40
   19d6c:	add	r1, sp, #60	; 0x3c
   19d70:	add	r2, sp, #88	; 0x58
   19d74:	add	r3, sp, #84	; 0x54
   19d78:	add	ip, sp, #39	; 0x27
   19d7c:	str	r0, [sp, #12]
   19d80:	str	r1, [sp, #8]
   19d84:	str	r2, [sp, #4]
   19d88:	str	r3, [sp]
   19d8c:	str	ip, [sp, #16]
   19d90:	add	r3, sp, #56	; 0x38
   19d94:	add	r2, sp, #52	; 0x34
   19d98:	mov	r1, r7
   19d9c:	ldr	r0, [sp, #44]	; 0x2c
   19da0:	bl	11830 <sscanf@plt>
   19da4:	bic	r0, r0, #4
   19da8:	cmp	r0, #3
   19dac:	bne	19d4c <__assert_fail@plt+0x8444>
   19db0:	ldr	r3, [sp, #64]	; 0x40
   19db4:	ldr	r0, [sp, #44]	; 0x2c
   19db8:	mov	r1, r8
   19dbc:	add	r0, r0, r3
   19dc0:	bl	114d0 <strstr@plt>
   19dc4:	subs	fp, r0, #0
   19dc8:	beq	19d4c <__assert_fail@plt+0x8444>
   19dcc:	add	r2, sp, #80	; 0x50
   19dd0:	add	r3, sp, #76	; 0x4c
   19dd4:	add	r1, sp, #39	; 0x27
   19dd8:	str	r1, [sp, #8]
   19ddc:	str	r2, [sp, #4]
   19de0:	str	r3, [sp]
   19de4:	add	r2, sp, #68	; 0x44
   19de8:	add	r3, sp, #72	; 0x48
   19dec:	mov	r1, sl
   19df0:	bl	11830 <sscanf@plt>
   19df4:	bic	r9, r0, #4
   19df8:	cmp	r9, #1
   19dfc:	bne	19d4c <__assert_fail@plt+0x8444>
   19e00:	ldr	r1, [sp, #44]	; 0x2c
   19e04:	ldr	r2, [sp, #88]	; 0x58
   19e08:	mov	r3, #0
   19e0c:	strb	r3, [r1, r2]
   19e10:	ldr	r1, [sp, #44]	; 0x2c
   19e14:	ldr	r2, [sp, #64]	; 0x40
   19e18:	strb	r3, [r1, r2]
   19e1c:	ldr	r2, [sp, #72]	; 0x48
   19e20:	strb	r3, [fp, r2]
   19e24:	ldr	r2, [sp, #80]	; 0x50
   19e28:	strb	r3, [fp, r2]
   19e2c:	ldr	r0, [sp, #76]	; 0x4c
   19e30:	add	r0, fp, r0
   19e34:	bl	19c20 <__assert_fail@plt+0x8318>
   19e38:	ldr	r3, [sp, #60]	; 0x3c
   19e3c:	ldr	r0, [sp, #44]	; 0x2c
   19e40:	add	r0, r0, r3
   19e44:	bl	19c20 <__assert_fail@plt+0x8318>
   19e48:	ldr	r3, [sp, #84]	; 0x54
   19e4c:	ldr	r0, [sp, #44]	; 0x2c
   19e50:	add	r0, r0, r3
   19e54:	bl	19c20 <__assert_fail@plt+0x8318>
   19e58:	mov	r0, #32
   19e5c:	bl	194e0 <__assert_fail@plt+0x7bd8>
   19e60:	mov	r4, r0
   19e64:	ldr	r0, [sp, #76]	; 0x4c
   19e68:	add	r0, fp, r0
   19e6c:	bl	1970c <__assert_fail@plt+0x7e04>
   19e70:	ldr	r2, [sp, #44]	; 0x2c
   19e74:	ldr	r3, [sp, #60]	; 0x3c
   19e78:	str	r0, [r4]
   19e7c:	add	r0, r2, r3
   19e80:	bl	1970c <__assert_fail@plt+0x7e04>
   19e84:	ldr	r2, [sp, #44]	; 0x2c
   19e88:	ldr	r3, [sp, #84]	; 0x54
   19e8c:	str	r0, [r4, #4]
   19e90:	add	r0, r2, r3
   19e94:	bl	1970c <__assert_fail@plt+0x7e04>
   19e98:	ldr	r3, [sp, #68]	; 0x44
   19e9c:	str	r0, [r4, #8]
   19ea0:	add	r0, fp, r3
   19ea4:	bl	1970c <__assert_fail@plt+0x7e04>
   19ea8:	ldr	r3, [sp, #52]	; 0x34
   19eac:	ldr	lr, [pc, #1304]	; 1a3cc <__assert_fail@plt+0x8ac4>
   19eb0:	ldr	r2, [sp, #56]	; 0x38
   19eb4:	and	lr, lr, r3, lsl #8
   19eb8:	ldr	r1, [pc, #1296]	; 1a3d0 <__assert_fail@plt+0x8ac8>
   19ebc:	bic	r3, r3, #4080	; 0xff0
   19ec0:	bic	r3, r3, #15
   19ec4:	and	r1, r1, r2, lsl #12
   19ec8:	orr	r3, r3, r2, lsr #20
   19ecc:	ldrb	ip, [r4, #24]
   19ed0:	uxtb	r2, r2
   19ed4:	orr	r2, r2, lr
   19ed8:	orr	r2, r1, r2
   19edc:	orr	ip, ip, #4
   19ee0:	ldr	r1, [pc, #1260]	; 1a3d4 <__assert_fail@plt+0x8acc>
   19ee4:	strb	ip, [r4, #24]
   19ee8:	strd	r2, [r4, #16]
   19eec:	str	r0, [r4, #12]
   19ef0:	mov	fp, r0
   19ef4:	bl	1150c <strcmp@plt>
   19ef8:	cmp	r0, #0
   19efc:	beq	19f14 <__assert_fail@plt+0x860c>
   19f00:	ldr	r1, [pc, #1232]	; 1a3d8 <__assert_fail@plt+0x8ad0>
   19f04:	mov	r0, fp
   19f08:	bl	1150c <strcmp@plt>
   19f0c:	cmp	r0, #0
   19f10:	bne	19fb8 <__assert_fail@plt+0x86b0>
   19f14:	mov	r0, #1
   19f18:	ldrb	r9, [r4, #24]
   19f1c:	ldr	r3, [r4]
   19f20:	mov	r1, #58	; 0x3a
   19f24:	bic	r9, r9, #1
   19f28:	orr	r9, r0, r9
   19f2c:	strb	r9, [r4, #24]
   19f30:	mov	r0, r3
   19f34:	str	r3, [sp, #28]
   19f38:	bl	11734 <strchr@plt>
   19f3c:	ldr	r3, [sp, #28]
   19f40:	cmp	r0, #0
   19f44:	beq	1a098 <__assert_fail@plt+0x8790>
   19f48:	mov	r0, #1
   19f4c:	ldrb	r3, [r4, #24]
   19f50:	bic	r3, r3, #2
   19f54:	orr	r3, r3, r0, lsl #1
   19f58:	strb	r3, [r4, #24]
   19f5c:	str	r4, [r6]
   19f60:	add	r6, r4, #28
   19f64:	b	19d4c <__assert_fail@plt+0x8444>
   19f68:	ldr	r0, [sp, #44]	; 0x2c
   19f6c:	bl	11548 <free@plt>
   19f70:	ldr	r3, [r5]
   19f74:	tst	r3, #32
   19f78:	bne	1a35c <__assert_fail@plt+0x8a54>
   19f7c:	mov	r0, r5
   19f80:	bl	1ac60 <__assert_fail@plt+0x9358>
   19f84:	cmn	r0, #1
   19f88:	beq	1a2bc <__assert_fail@plt+0x89b4>
   19f8c:	mov	r3, #0
   19f90:	str	r3, [r6]
   19f94:	ldr	r5, [sp, #40]	; 0x28
   19f98:	ldr	r3, [pc, #1044]	; 1a3b4 <__assert_fail@plt+0x8aac>
   19f9c:	ldr	r2, [sp, #92]	; 0x5c
   19fa0:	mov	r0, r5
   19fa4:	ldr	r3, [r3]
   19fa8:	cmp	r2, r3
   19fac:	bne	1a3b0 <__assert_fail@plt+0x8aa8>
   19fb0:	add	sp, sp, #100	; 0x64
   19fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fb8:	ldr	r1, [pc, #1052]	; 1a3dc <__assert_fail@plt+0x8ad4>
   19fbc:	mov	r0, fp
   19fc0:	bl	1150c <strcmp@plt>
   19fc4:	cmp	r0, #0
   19fc8:	beq	19f14 <__assert_fail@plt+0x860c>
   19fcc:	ldr	r1, [pc, #1036]	; 1a3e0 <__assert_fail@plt+0x8ad8>
   19fd0:	mov	r0, fp
   19fd4:	bl	1150c <strcmp@plt>
   19fd8:	cmp	r0, #0
   19fdc:	beq	19f14 <__assert_fail@plt+0x860c>
   19fe0:	ldr	r1, [pc, #1020]	; 1a3e4 <__assert_fail@plt+0x8adc>
   19fe4:	mov	r0, fp
   19fe8:	bl	1150c <strcmp@plt>
   19fec:	cmp	r0, #0
   19ff0:	beq	19f14 <__assert_fail@plt+0x860c>
   19ff4:	ldr	r1, [pc, #1004]	; 1a3e8 <__assert_fail@plt+0x8ae0>
   19ff8:	mov	r0, fp
   19ffc:	bl	1150c <strcmp@plt>
   1a000:	cmp	r0, #0
   1a004:	beq	19f14 <__assert_fail@plt+0x860c>
   1a008:	ldr	r1, [pc, #988]	; 1a3ec <__assert_fail@plt+0x8ae4>
   1a00c:	mov	r0, fp
   1a010:	bl	1150c <strcmp@plt>
   1a014:	cmp	r0, #0
   1a018:	beq	19f14 <__assert_fail@plt+0x860c>
   1a01c:	ldr	r1, [pc, #972]	; 1a3f0 <__assert_fail@plt+0x8ae8>
   1a020:	mov	r0, fp
   1a024:	bl	1150c <strcmp@plt>
   1a028:	cmp	r0, #0
   1a02c:	beq	19f14 <__assert_fail@plt+0x860c>
   1a030:	ldr	r1, [pc, #956]	; 1a3f4 <__assert_fail@plt+0x8aec>
   1a034:	mov	r0, fp
   1a038:	bl	1150c <strcmp@plt>
   1a03c:	cmp	r0, #0
   1a040:	beq	19f14 <__assert_fail@plt+0x860c>
   1a044:	ldr	r1, [pc, #940]	; 1a3f8 <__assert_fail@plt+0x8af0>
   1a048:	mov	r0, fp
   1a04c:	bl	1150c <strcmp@plt>
   1a050:	cmp	r0, #0
   1a054:	beq	19f14 <__assert_fail@plt+0x860c>
   1a058:	ldr	r1, [pc, #924]	; 1a3fc <__assert_fail@plt+0x8af4>
   1a05c:	mov	r0, fp
   1a060:	bl	1150c <strcmp@plt>
   1a064:	cmp	r0, #0
   1a068:	beq	19f14 <__assert_fail@plt+0x860c>
   1a06c:	ldr	r1, [pc, #908]	; 1a400 <__assert_fail@plt+0x8af8>
   1a070:	mov	r0, fp
   1a074:	bl	1150c <strcmp@plt>
   1a078:	cmp	r0, #0
   1a07c:	beq	19f14 <__assert_fail@plt+0x860c>
   1a080:	ldr	r1, [pc, #892]	; 1a404 <__assert_fail@plt+0x8afc>
   1a084:	mov	r0, fp
   1a088:	bl	1150c <strcmp@plt>
   1a08c:	clz	r0, r0
   1a090:	lsr	r0, r0, #5
   1a094:	b	19f18 <__assert_fail@plt+0x8610>
   1a098:	ldrb	r2, [r3]
   1a09c:	cmp	r2, #47	; 0x2f
   1a0a0:	beq	1a320 <__assert_fail@plt+0x8a18>
   1a0a4:	mov	r1, r3
   1a0a8:	ldr	r0, [pc, #856]	; 1a408 <__assert_fail@plt+0x8b00>
   1a0ac:	bl	1150c <strcmp@plt>
   1a0b0:	clz	r0, r0
   1a0b4:	lsr	r0, r0, #5
   1a0b8:	b	19f4c <__assert_fail@plt+0x8644>
   1a0bc:	ldr	r1, [pc, #756]	; 1a3b8 <__assert_fail@plt+0x8ab0>
   1a0c0:	ldr	r0, [pc, #836]	; 1a40c <__assert_fail@plt+0x8b04>
   1a0c4:	bl	11884 <setmntent@plt>
   1a0c8:	subs	r5, r0, #0
   1a0cc:	beq	19f98 <__assert_fail@plt+0x8690>
   1a0d0:	mov	r0, r5
   1a0d4:	bl	11668 <getmntent@plt>
   1a0d8:	add	r6, sp, #40	; 0x28
   1a0dc:	ldr	r8, [pc, #812]	; 1a410 <__assert_fail@plt+0x8b08>
   1a0e0:	ldr	r7, [pc, #748]	; 1a3d4 <__assert_fail@plt+0x8acc>
   1a0e4:	ldr	sl, [pc, #748]	; 1a3d8 <__assert_fail@plt+0x8ad0>
   1a0e8:	subs	r9, r0, #0
   1a0ec:	beq	1a2ac <__assert_fail@plt+0x89a4>
   1a0f0:	mov	r1, r8
   1a0f4:	bl	1162c <hasmntopt@plt>
   1a0f8:	mov	fp, r0
   1a0fc:	mov	r0, #32
   1a100:	bl	194e0 <__assert_fail@plt+0x7bd8>
   1a104:	mov	r4, r0
   1a108:	ldr	r0, [r9]
   1a10c:	bl	1970c <__assert_fail@plt+0x7e04>
   1a110:	str	r0, [r4]
   1a114:	ldr	r0, [r9, #4]
   1a118:	bl	1970c <__assert_fail@plt+0x7e04>
   1a11c:	mov	r3, #0
   1a120:	stmib	r4, {r0, r3}
   1a124:	ldr	r0, [r9, #8]
   1a128:	bl	1970c <__assert_fail@plt+0x7e04>
   1a12c:	ldrb	r3, [r4, #24]
   1a130:	mov	r1, r7
   1a134:	orr	r3, r3, #4
   1a138:	strb	r3, [r4, #24]
   1a13c:	str	r0, [r4, #12]
   1a140:	mov	r9, r0
   1a144:	bl	1150c <strcmp@plt>
   1a148:	cmp	r0, #0
   1a14c:	beq	1a248 <__assert_fail@plt+0x8940>
   1a150:	mov	r1, sl
   1a154:	mov	r0, r9
   1a158:	bl	1150c <strcmp@plt>
   1a15c:	cmp	r0, #0
   1a160:	beq	1a248 <__assert_fail@plt+0x8940>
   1a164:	ldr	r1, [pc, #624]	; 1a3dc <__assert_fail@plt+0x8ad4>
   1a168:	mov	r0, r9
   1a16c:	bl	1150c <strcmp@plt>
   1a170:	cmp	r0, #0
   1a174:	beq	1a248 <__assert_fail@plt+0x8940>
   1a178:	ldr	r1, [pc, #608]	; 1a3e0 <__assert_fail@plt+0x8ad8>
   1a17c:	mov	r0, r9
   1a180:	bl	1150c <strcmp@plt>
   1a184:	cmp	r0, #0
   1a188:	beq	1a248 <__assert_fail@plt+0x8940>
   1a18c:	ldr	r1, [pc, #592]	; 1a3e4 <__assert_fail@plt+0x8adc>
   1a190:	mov	r0, r9
   1a194:	bl	1150c <strcmp@plt>
   1a198:	cmp	r0, #0
   1a19c:	beq	1a248 <__assert_fail@plt+0x8940>
   1a1a0:	ldr	r1, [pc, #576]	; 1a3e8 <__assert_fail@plt+0x8ae0>
   1a1a4:	mov	r0, r9
   1a1a8:	bl	1150c <strcmp@plt>
   1a1ac:	cmp	r0, #0
   1a1b0:	beq	1a248 <__assert_fail@plt+0x8940>
   1a1b4:	ldr	r1, [pc, #560]	; 1a3ec <__assert_fail@plt+0x8ae4>
   1a1b8:	mov	r0, r9
   1a1bc:	bl	1150c <strcmp@plt>
   1a1c0:	cmp	r0, #0
   1a1c4:	beq	1a248 <__assert_fail@plt+0x8940>
   1a1c8:	ldr	r1, [pc, #544]	; 1a3f0 <__assert_fail@plt+0x8ae8>
   1a1cc:	mov	r0, r9
   1a1d0:	bl	1150c <strcmp@plt>
   1a1d4:	cmp	r0, #0
   1a1d8:	beq	1a248 <__assert_fail@plt+0x8940>
   1a1dc:	ldr	r1, [pc, #528]	; 1a3f4 <__assert_fail@plt+0x8aec>
   1a1e0:	mov	r0, r9
   1a1e4:	bl	1150c <strcmp@plt>
   1a1e8:	cmp	r0, #0
   1a1ec:	beq	1a248 <__assert_fail@plt+0x8940>
   1a1f0:	ldr	r1, [pc, #512]	; 1a3f8 <__assert_fail@plt+0x8af0>
   1a1f4:	mov	r0, r9
   1a1f8:	bl	1150c <strcmp@plt>
   1a1fc:	cmp	r0, #0
   1a200:	beq	1a248 <__assert_fail@plt+0x8940>
   1a204:	ldr	r1, [pc, #496]	; 1a3fc <__assert_fail@plt+0x8af4>
   1a208:	mov	r0, r9
   1a20c:	bl	1150c <strcmp@plt>
   1a210:	cmp	r0, #0
   1a214:	beq	1a248 <__assert_fail@plt+0x8940>
   1a218:	ldr	r1, [pc, #480]	; 1a400 <__assert_fail@plt+0x8af8>
   1a21c:	mov	r0, r9
   1a220:	bl	1150c <strcmp@plt>
   1a224:	cmp	r0, #0
   1a228:	beq	1a248 <__assert_fail@plt+0x8940>
   1a22c:	ldr	r1, [pc, #464]	; 1a404 <__assert_fail@plt+0x8afc>
   1a230:	mov	r0, r9
   1a234:	bl	1150c <strcmp@plt>
   1a238:	orrs	r3, fp, r0
   1a23c:	moveq	r3, #1
   1a240:	movne	r3, #0
   1a244:	b	1a24c <__assert_fail@plt+0x8944>
   1a248:	mov	r3, #1
   1a24c:	ldrb	r2, [r4, #24]
   1a250:	ldr	fp, [r4]
   1a254:	mov	r1, #58	; 0x3a
   1a258:	bic	r2, r2, #1
   1a25c:	orr	r3, r3, r2
   1a260:	mov	r0, fp
   1a264:	strb	r3, [r4, #24]
   1a268:	bl	11734 <strchr@plt>
   1a26c:	cmp	r0, #0
   1a270:	beq	1a2fc <__assert_fail@plt+0x89f4>
   1a274:	mov	r2, #1
   1a278:	ldrb	r3, [r4, #24]
   1a27c:	mvn	r0, #0
   1a280:	mvn	r1, #0
   1a284:	bic	r3, r3, #2
   1a288:	orr	r3, r3, r2, lsl #1
   1a28c:	strd	r0, [r4, #16]
   1a290:	strb	r3, [r4, #24]
   1a294:	mov	r0, r5
   1a298:	str	r4, [r6]
   1a29c:	bl	11668 <getmntent@plt>
   1a2a0:	add	r6, r4, #28
   1a2a4:	subs	r9, r0, #0
   1a2a8:	bne	1a0f0 <__assert_fail@plt+0x87e8>
   1a2ac:	mov	r0, r5
   1a2b0:	bl	117dc <endmntent@plt>
   1a2b4:	cmp	r0, #0
   1a2b8:	bne	19f8c <__assert_fail@plt+0x8684>
   1a2bc:	bl	11764 <__errno_location@plt>
   1a2c0:	ldr	r5, [r0]
   1a2c4:	mov	r7, r0
   1a2c8:	mov	r3, #0
   1a2cc:	str	r3, [r6]
   1a2d0:	ldr	r0, [sp, #40]	; 0x28
   1a2d4:	cmp	r0, r3
   1a2d8:	beq	1a2f0 <__assert_fail@plt+0x89e8>
   1a2dc:	ldr	r4, [r0, #28]
   1a2e0:	bl	19cbc <__assert_fail@plt+0x83b4>
   1a2e4:	subs	r0, r4, #0
   1a2e8:	str	r4, [sp, #40]	; 0x28
   1a2ec:	bne	1a2dc <__assert_fail@plt+0x89d4>
   1a2f0:	str	r5, [r7]
   1a2f4:	mov	r5, #0
   1a2f8:	b	19f98 <__assert_fail@plt+0x8690>
   1a2fc:	ldrb	r3, [fp]
   1a300:	cmp	r3, #47	; 0x2f
   1a304:	beq	1a378 <__assert_fail@plt+0x8a70>
   1a308:	mov	r1, fp
   1a30c:	ldr	r0, [pc, #244]	; 1a408 <__assert_fail@plt+0x8b00>
   1a310:	bl	1150c <strcmp@plt>
   1a314:	clz	r2, r0
   1a318:	lsr	r2, r2, #5
   1a31c:	b	1a278 <__assert_fail@plt+0x8970>
   1a320:	ldrb	r2, [r3, #1]
   1a324:	cmp	r2, #47	; 0x2f
   1a328:	bne	1a0a4 <__assert_fail@plt+0x879c>
   1a32c:	ldr	r1, [pc, #224]	; 1a414 <__assert_fail@plt+0x8b0c>
   1a330:	mov	r0, fp
   1a334:	bl	1150c <strcmp@plt>
   1a338:	cmp	r0, #0
   1a33c:	beq	19f48 <__assert_fail@plt+0x8640>
   1a340:	mov	r0, fp
   1a344:	ldr	r1, [pc, #204]	; 1a418 <__assert_fail@plt+0x8b10>
   1a348:	bl	1150c <strcmp@plt>
   1a34c:	ldr	r3, [sp, #28]
   1a350:	cmp	r0, #0
   1a354:	beq	19f48 <__assert_fail@plt+0x8640>
   1a358:	b	1a0a4 <__assert_fail@plt+0x879c>
   1a35c:	bl	11764 <__errno_location@plt>
   1a360:	mov	r7, r0
   1a364:	mov	r0, r5
   1a368:	ldr	r5, [r7]
   1a36c:	bl	1ac60 <__assert_fail@plt+0x9358>
   1a370:	str	r5, [r7]
   1a374:	b	1a2c8 <__assert_fail@plt+0x89c0>
   1a378:	ldrb	r3, [fp, #1]
   1a37c:	cmp	r3, #47	; 0x2f
   1a380:	bne	1a308 <__assert_fail@plt+0x8a00>
   1a384:	ldr	r1, [pc, #136]	; 1a414 <__assert_fail@plt+0x8b0c>
   1a388:	mov	r0, r9
   1a38c:	bl	1150c <strcmp@plt>
   1a390:	cmp	r0, #0
   1a394:	beq	1a274 <__assert_fail@plt+0x896c>
   1a398:	mov	r0, r9
   1a39c:	ldr	r1, [pc, #116]	; 1a418 <__assert_fail@plt+0x8b10>
   1a3a0:	bl	1150c <strcmp@plt>
   1a3a4:	cmp	r0, #0
   1a3a8:	beq	1a274 <__assert_fail@plt+0x896c>
   1a3ac:	b	1a308 <__assert_fail@plt+0x8a00>
   1a3b0:	bl	11590 <__stack_chk_fail@plt>
   1a3b4:	andeq	pc, r2, r0, lsl #30
   1a3b8:	andeq	pc, r1, r4, lsl #1
   1a3bc:	andeq	pc, r1, r8, lsl #1
   1a3c0:	andeq	pc, r1, r0, lsr #1
   1a3c4:	andeq	pc, r1, r0, asr #1
   1a3c8:	andeq	pc, r1, r4, asr #1
   1a3cc:	andeq	pc, pc, r0, lsl #30
   1a3d0:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a3d4:	andeq	sp, r1, r0, asr #9
   1a3d8:	andeq	sp, r1, r4, asr r7
   1a3dc:	ldrdeq	pc, [r1], -ip
   1a3e0:	andeq	sp, r1, r0, ror r5
   1a3e4:	andeq	sp, r1, r0, lsl #11
   1a3e8:	andeq	sp, r1, r4, ror #11
   1a3ec:	andeq	sp, r1, r8, ror #13
   1a3f0:	muleq	r1, r8, r7
   1a3f4:	andeq	sp, r1, r8, ror #15
   1a3f8:	andeq	sp, r1, r8, ror r5
   1a3fc:	andeq	pc, r1, r4, ror #1
   1a400:	andeq	pc, r1, ip, ror #1
   1a404:	strdeq	pc, [r1], -r4
   1a408:	andeq	pc, r1, r4, lsl #2
   1a40c:	andeq	pc, r1, ip, lsl #2
   1a410:	andeq	pc, r1, r8, lsl r1	; <UNPREDICTABLE>
   1a414:	strdeq	pc, [r1], -ip
   1a418:	andeq	sp, r1, r4, lsr r5
   1a41c:	subs	r1, r0, #0
   1a420:	beq	1a430 <__assert_fail@plt+0x8b28>
   1a424:	mov	r2, #1
   1a428:	ldr	r0, [pc, #8]	; 1a438 <__assert_fail@plt+0x8b30>
   1a42c:	b	11740 <setenv@plt>
   1a430:	ldr	r0, [pc]	; 1a438 <__assert_fail@plt+0x8b30>
   1a434:	b	118a8 <unsetenv@plt>
   1a438:	andeq	sp, r1, r0, ror #17
   1a43c:	cmp	r0, #0
   1a440:	bxeq	lr
   1a444:	push	{r4, lr}
   1a448:	ldr	r4, [r0]
   1a44c:	bl	11548 <free@plt>
   1a450:	subs	r0, r4, #0
   1a454:	bne	1a448 <__assert_fail@plt+0x8b40>
   1a458:	pop	{r4, pc}
   1a45c:	push	{r4, r5, r6, r7, r8, lr}
   1a460:	mov	r5, r0
   1a464:	bl	11764 <__errno_location@plt>
   1a468:	mov	r4, r0
   1a46c:	ldrb	r0, [r5, #4]
   1a470:	ldr	r6, [r4]
   1a474:	cmp	r0, #0
   1a478:	addne	r0, r5, #5
   1a47c:	bl	1a41c <__assert_fail@plt+0x8b14>
   1a480:	cmp	r0, #0
   1a484:	beq	1a4a4 <__assert_fail@plt+0x8b9c>
   1a488:	ldr	r6, [r4]
   1a48c:	mov	r7, #0
   1a490:	mov	r0, r5
   1a494:	bl	1a43c <__assert_fail@plt+0x8b34>
   1a498:	str	r6, [r4]
   1a49c:	mov	r0, r7
   1a4a0:	pop	{r4, r5, r6, r7, r8, pc}
   1a4a4:	bl	115e4 <tzset@plt>
   1a4a8:	mov	r7, #1
   1a4ac:	b	1a490 <__assert_fail@plt+0x8b88>
   1a4b0:	push	{r4, r5, r6, r7, r8, lr}
   1a4b4:	subs	r6, r0, #0
   1a4b8:	beq	1a514 <__assert_fail@plt+0x8c0c>
   1a4bc:	bl	11728 <strlen@plt>
   1a4c0:	add	r5, r0, #1
   1a4c4:	cmp	r5, #58	; 0x3a
   1a4c8:	movcs	r0, r5
   1a4cc:	movcc	r0, #58	; 0x3a
   1a4d0:	add	r0, r0, #9
   1a4d4:	bic	r0, r0, #3
   1a4d8:	bl	11698 <malloc@plt>
   1a4dc:	subs	r4, r0, #0
   1a4e0:	beq	1a50c <__assert_fail@plt+0x8c04>
   1a4e4:	mov	r7, #0
   1a4e8:	mov	r2, #1
   1a4ec:	add	r3, r4, #5
   1a4f0:	strh	r2, [r4, #4]
   1a4f4:	mov	r1, r6
   1a4f8:	str	r7, [r4]
   1a4fc:	mov	r0, r3
   1a500:	mov	r2, r5
   1a504:	bl	11560 <memcpy@plt>
   1a508:	strb	r7, [r0, r5]
   1a50c:	mov	r0, r4
   1a510:	pop	{r4, r5, r6, r7, r8, pc}
   1a514:	mov	r0, #64	; 0x40
   1a518:	bl	11698 <malloc@plt>
   1a51c:	subs	r4, r0, #0
   1a520:	mov	r0, r4
   1a524:	strne	r6, [r4]
   1a528:	strhne	r6, [r4, #4]
   1a52c:	pop	{r4, r5, r6, r7, r8, pc}
   1a530:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a534:	ldr	r7, [r1, #40]	; 0x28
   1a538:	cmp	r7, #0
   1a53c:	beq	1a618 <__assert_fail@plt+0x8d10>
   1a540:	cmp	r1, r7
   1a544:	mov	r8, r1
   1a548:	mov	r6, r0
   1a54c:	bhi	1a55c <__assert_fail@plt+0x8c54>
   1a550:	add	r3, r1, #44	; 0x2c
   1a554:	cmp	r7, r3
   1a558:	bcc	1a618 <__assert_fail@plt+0x8d10>
   1a55c:	ldrb	r3, [r7]
   1a560:	cmp	r3, #0
   1a564:	addne	r4, r6, #5
   1a568:	beq	1a610 <__assert_fail@plt+0x8d08>
   1a56c:	mov	r1, r7
   1a570:	mov	r0, r4
   1a574:	bl	1150c <strcmp@plt>
   1a578:	add	r5, r6, #5
   1a57c:	cmp	r0, #0
   1a580:	mov	r0, r4
   1a584:	beq	1a600 <__assert_fail@plt+0x8cf8>
   1a588:	ldrb	r9, [r4]
   1a58c:	cmp	r9, #0
   1a590:	bne	1a5a8 <__assert_fail@plt+0x8ca0>
   1a594:	cmp	r5, r4
   1a598:	bne	1a624 <__assert_fail@plt+0x8d1c>
   1a59c:	ldrb	r5, [r6, #4]
   1a5a0:	cmp	r5, #0
   1a5a4:	beq	1a5d0 <__assert_fail@plt+0x8cc8>
   1a5a8:	bl	11728 <strlen@plt>
   1a5ac:	add	r0, r0, #1
   1a5b0:	ldrb	r3, [r4, r0]!
   1a5b4:	cmp	r3, #0
   1a5b8:	bne	1a56c <__assert_fail@plt+0x8c64>
   1a5bc:	ldr	r3, [r6]
   1a5c0:	cmp	r3, #0
   1a5c4:	addne	r4, r3, #5
   1a5c8:	movne	r6, r3
   1a5cc:	b	1a56c <__assert_fail@plt+0x8c64>
   1a5d0:	mov	r0, r7
   1a5d4:	bl	11728 <strlen@plt>
   1a5d8:	add	sl, r0, #1
   1a5dc:	add	r5, sl, r5
   1a5e0:	cmp	r5, #58	; 0x3a
   1a5e4:	bhi	1a650 <__assert_fail@plt+0x8d48>
   1a5e8:	mov	r1, r7
   1a5ec:	mov	r2, sl
   1a5f0:	mov	r0, r4
   1a5f4:	bl	11560 <memcpy@plt>
   1a5f8:	mov	r3, #0
   1a5fc:	strb	r3, [r4, sl]
   1a600:	mov	r9, #1
   1a604:	str	r4, [r8, #40]	; 0x28
   1a608:	mov	r0, r9
   1a60c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a610:	ldr	r4, [pc, #96]	; 1a678 <__assert_fail@plt+0x8d70>
   1a614:	b	1a600 <__assert_fail@plt+0x8cf8>
   1a618:	mov	r9, #1
   1a61c:	mov	r0, r9
   1a620:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a624:	mov	r0, r7
   1a628:	bl	11728 <strlen@plt>
   1a62c:	sub	r5, r4, r5
   1a630:	mvn	r3, r5
   1a634:	add	sl, r0, #1
   1a638:	cmp	r3, sl
   1a63c:	bcs	1a5dc <__assert_fail@plt+0x8cd4>
   1a640:	bl	11764 <__errno_location@plt>
   1a644:	mov	r3, #12
   1a648:	str	r3, [r0]
   1a64c:	b	1a608 <__assert_fail@plt+0x8d00>
   1a650:	mov	r0, r7
   1a654:	bl	1a4b0 <__assert_fail@plt+0x8ba8>
   1a658:	cmp	r0, #0
   1a65c:	str	r0, [r6]
   1a660:	moveq	r9, r0
   1a664:	beq	1a608 <__assert_fail@plt+0x8d00>
   1a668:	mov	r3, #0
   1a66c:	strb	r3, [r0, #4]
   1a670:	add	r4, r0, #5
   1a674:	b	1a600 <__assert_fail@plt+0x8cf8>
   1a678:	andeq	sp, r1, r4, asr #21
   1a67c:	push	{r4, r5, r6, lr}
   1a680:	mov	r4, r0
   1a684:	ldr	r0, [pc, #160]	; 1a72c <__assert_fail@plt+0x8e24>
   1a688:	bl	11680 <getenv@plt>
   1a68c:	ldrb	r3, [r4, #4]
   1a690:	subs	r5, r0, #0
   1a694:	beq	1a714 <__assert_fail@plt+0x8e0c>
   1a698:	cmp	r3, #0
   1a69c:	bne	1a6f4 <__assert_fail@plt+0x8dec>
   1a6a0:	mov	r0, r5
   1a6a4:	bl	1a4b0 <__assert_fail@plt+0x8ba8>
   1a6a8:	subs	r5, r0, #0
   1a6ac:	beq	1a70c <__assert_fail@plt+0x8e04>
   1a6b0:	ldrb	r0, [r4, #4]
   1a6b4:	cmp	r0, #0
   1a6b8:	addne	r0, r4, #5
   1a6bc:	bl	1a41c <__assert_fail@plt+0x8b14>
   1a6c0:	cmp	r0, #0
   1a6c4:	beq	1a720 <__assert_fail@plt+0x8e18>
   1a6c8:	bl	11764 <__errno_location@plt>
   1a6cc:	cmp	r5, #1
   1a6d0:	mov	r4, r0
   1a6d4:	ldr	r6, [r0]
   1a6d8:	beq	1a6e4 <__assert_fail@plt+0x8ddc>
   1a6dc:	mov	r0, r5
   1a6e0:	bl	1a43c <__assert_fail@plt+0x8b34>
   1a6e4:	mov	r5, #0
   1a6e8:	str	r6, [r4]
   1a6ec:	mov	r0, r5
   1a6f0:	pop	{r4, r5, r6, pc}
   1a6f4:	mov	r1, r5
   1a6f8:	add	r0, r4, #5
   1a6fc:	bl	1150c <strcmp@plt>
   1a700:	cmp	r0, #0
   1a704:	bne	1a6a0 <__assert_fail@plt+0x8d98>
   1a708:	mov	r5, #1
   1a70c:	mov	r0, r5
   1a710:	pop	{r4, r5, r6, pc}
   1a714:	cmp	r3, #0
   1a718:	beq	1a708 <__assert_fail@plt+0x8e00>
   1a71c:	b	1a6a0 <__assert_fail@plt+0x8d98>
   1a720:	bl	115e4 <tzset@plt>
   1a724:	mov	r0, r5
   1a728:	pop	{r4, r5, r6, pc}
   1a72c:	andeq	sp, r1, r0, ror #17
   1a730:	cmp	r0, #1
   1a734:	bxeq	lr
   1a738:	b	1a43c <__assert_fail@plt+0x8b34>
   1a73c:	subs	ip, r0, #0
   1a740:	push	{r4, r5, r6, r7, r8, lr}
   1a744:	mov	r5, r1
   1a748:	beq	1a7c8 <__assert_fail@plt+0x8ec0>
   1a74c:	mov	r4, r2
   1a750:	mov	r6, ip
   1a754:	bl	1a67c <__assert_fail@plt+0x8d74>
   1a758:	subs	r7, r0, #0
   1a75c:	beq	1a7a8 <__assert_fail@plt+0x8ea0>
   1a760:	mov	r0, r5
   1a764:	mov	r1, r4
   1a768:	bl	115b4 <localtime_r@plt>
   1a76c:	cmp	r0, #0
   1a770:	beq	1a798 <__assert_fail@plt+0x8e90>
   1a774:	mov	r0, r6
   1a778:	mov	r1, r4
   1a77c:	bl	1a530 <__assert_fail@plt+0x8c28>
   1a780:	cmp	r0, #0
   1a784:	beq	1a798 <__assert_fail@plt+0x8e90>
   1a788:	cmp	r7, #1
   1a78c:	bne	1a7b0 <__assert_fail@plt+0x8ea8>
   1a790:	mov	r0, r4
   1a794:	pop	{r4, r5, r6, r7, r8, pc}
   1a798:	cmp	r7, #1
   1a79c:	beq	1a7a8 <__assert_fail@plt+0x8ea0>
   1a7a0:	mov	r0, r7
   1a7a4:	bl	1a45c <__assert_fail@plt+0x8b54>
   1a7a8:	mov	r0, #0
   1a7ac:	pop	{r4, r5, r6, r7, r8, pc}
   1a7b0:	mov	r0, r7
   1a7b4:	bl	1a45c <__assert_fail@plt+0x8b54>
   1a7b8:	cmp	r0, #0
   1a7bc:	beq	1a7a8 <__assert_fail@plt+0x8ea0>
   1a7c0:	mov	r0, r4
   1a7c4:	pop	{r4, r5, r6, r7, r8, pc}
   1a7c8:	mov	r0, r5
   1a7cc:	mov	r1, r2
   1a7d0:	pop	{r4, r5, r6, r7, r8, lr}
   1a7d4:	b	114e8 <gmtime_r@plt>
   1a7d8:	push	{r4, r5, r6, r7, lr}
   1a7dc:	sub	sp, sp, #60	; 0x3c
   1a7e0:	ldr	r5, [pc, #312]	; 1a920 <__assert_fail@plt+0x9018>
   1a7e4:	subs	r7, r0, #0
   1a7e8:	mov	r4, r1
   1a7ec:	ldr	r3, [r5]
   1a7f0:	str	r3, [sp, #52]	; 0x34
   1a7f4:	beq	1a908 <__assert_fail@plt+0x9000>
   1a7f8:	bl	1a67c <__assert_fail@plt+0x8d74>
   1a7fc:	subs	r6, r0, #0
   1a800:	beq	1a914 <__assert_fail@plt+0x900c>
   1a804:	mov	r0, r4
   1a808:	bl	11530 <mktime@plt>
   1a80c:	cmn	r0, #1
   1a810:	str	r0, [sp, #4]
   1a814:	beq	1a864 <__assert_fail@plt+0x8f5c>
   1a818:	mov	r1, r4
   1a81c:	mov	r0, r7
   1a820:	bl	1a530 <__assert_fail@plt+0x8c28>
   1a824:	cmp	r0, #0
   1a828:	mvneq	r3, #0
   1a82c:	streq	r3, [sp, #4]
   1a830:	cmp	r6, #1
   1a834:	beq	1a848 <__assert_fail@plt+0x8f40>
   1a838:	mov	r0, r6
   1a83c:	bl	1a45c <__assert_fail@plt+0x8b54>
   1a840:	cmp	r0, #0
   1a844:	beq	1a914 <__assert_fail@plt+0x900c>
   1a848:	ldr	r0, [sp, #4]
   1a84c:	ldr	r2, [sp, #52]	; 0x34
   1a850:	ldr	r3, [r5]
   1a854:	cmp	r2, r3
   1a858:	bne	1a91c <__assert_fail@plt+0x9014>
   1a85c:	add	sp, sp, #60	; 0x3c
   1a860:	pop	{r4, r5, r6, r7, pc}
   1a864:	add	r1, sp, #8
   1a868:	add	r0, sp, #4
   1a86c:	bl	115b4 <localtime_r@plt>
   1a870:	cmp	r0, #0
   1a874:	beq	1a830 <__assert_fail@plt+0x8f28>
   1a878:	ldr	r0, [r4, #32]
   1a87c:	ldr	r1, [sp, #40]	; 0x28
   1a880:	clz	r2, r0
   1a884:	clz	r3, r1
   1a888:	lsr	r2, r2, #5
   1a88c:	lsr	r3, r3, #5
   1a890:	cmp	r2, r3
   1a894:	beq	1a8a4 <__assert_fail@plt+0x8f9c>
   1a898:	cmp	r0, #0
   1a89c:	cmpge	r1, #0
   1a8a0:	bge	1a830 <__assert_fail@plt+0x8f28>
   1a8a4:	ldr	r1, [sp, #24]
   1a8a8:	ldr	r0, [sp, #28]
   1a8ac:	ldr	r3, [r4, #16]
   1a8b0:	ldr	r2, [r4, #20]
   1a8b4:	eor	r3, r3, r1
   1a8b8:	eor	r2, r2, r0
   1a8bc:	ldr	r1, [r4, #12]
   1a8c0:	ldr	r0, [sp, #20]
   1a8c4:	orr	r3, r3, r2
   1a8c8:	eor	r1, r1, r0
   1a8cc:	ldr	r2, [r4, #8]
   1a8d0:	ldr	r0, [sp, #16]
   1a8d4:	orr	r3, r3, r1
   1a8d8:	eor	r2, r2, r0
   1a8dc:	ldr	r1, [r4, #4]
   1a8e0:	ldr	r0, [sp, #12]
   1a8e4:	orr	r3, r3, r2
   1a8e8:	eor	r1, r1, r0
   1a8ec:	ldr	r2, [r4]
   1a8f0:	ldr	r0, [sp, #8]
   1a8f4:	orr	r3, r3, r1
   1a8f8:	eor	r2, r2, r0
   1a8fc:	orrs	r3, r3, r2
   1a900:	beq	1a818 <__assert_fail@plt+0x8f10>
   1a904:	b	1a830 <__assert_fail@plt+0x8f28>
   1a908:	mov	r0, r1
   1a90c:	bl	11848 <timegm@plt>
   1a910:	b	1a84c <__assert_fail@plt+0x8f44>
   1a914:	mvn	r0, #0
   1a918:	b	1a84c <__assert_fail@plt+0x8f44>
   1a91c:	bl	11590 <__stack_chk_fail@plt>
   1a920:	andeq	pc, r2, r0, lsl #30
   1a924:	push	{r4, r5, r6, lr}
   1a928:	mov	r4, r0
   1a92c:	bl	11644 <__fpending@plt>
   1a930:	ldr	r5, [r4]
   1a934:	and	r5, r5, #32
   1a938:	mov	r6, r0
   1a93c:	mov	r0, r4
   1a940:	bl	1ac60 <__assert_fail@plt+0x9358>
   1a944:	cmp	r5, #0
   1a948:	mov	r4, r0
   1a94c:	bne	1a978 <__assert_fail@plt+0x9070>
   1a950:	cmp	r0, #0
   1a954:	beq	1a970 <__assert_fail@plt+0x9068>
   1a958:	cmp	r6, #0
   1a95c:	bne	1a990 <__assert_fail@plt+0x9088>
   1a960:	bl	11764 <__errno_location@plt>
   1a964:	ldr	r4, [r0]
   1a968:	subs	r4, r4, #9
   1a96c:	mvnne	r4, #0
   1a970:	mov	r0, r4
   1a974:	pop	{r4, r5, r6, pc}
   1a978:	cmp	r0, #0
   1a97c:	bne	1a990 <__assert_fail@plt+0x9088>
   1a980:	bl	11764 <__errno_location@plt>
   1a984:	str	r4, [r0]
   1a988:	mvn	r4, #0
   1a98c:	b	1a970 <__assert_fail@plt+0x9068>
   1a990:	mvn	r4, #0
   1a994:	b	1a970 <__assert_fail@plt+0x9068>
   1a998:	push	{r1, r2, r3}
   1a99c:	push	{r4, lr}
   1a9a0:	sub	sp, sp, #12
   1a9a4:	ldr	r4, [pc, #68]	; 1a9f0 <__assert_fail@plt+0x90e8>
   1a9a8:	ldr	r1, [sp, #20]
   1a9ac:	ldr	r3, [r4]
   1a9b0:	ands	r2, r1, #64	; 0x40
   1a9b4:	str	r3, [sp, #4]
   1a9b8:	ldrne	r2, [sp, #24]
   1a9bc:	addne	r3, sp, #24
   1a9c0:	strne	r3, [sp]
   1a9c4:	bl	11674 <open64@plt>
   1a9c8:	bl	1aa74 <__assert_fail@plt+0x916c>
   1a9cc:	ldr	r2, [sp, #4]
   1a9d0:	ldr	r3, [r4]
   1a9d4:	cmp	r2, r3
   1a9d8:	bne	1a9ec <__assert_fail@plt+0x90e4>
   1a9dc:	add	sp, sp, #12
   1a9e0:	pop	{r4, lr}
   1a9e4:	add	sp, sp, #12
   1a9e8:	bx	lr
   1a9ec:	bl	11590 <__stack_chk_fail@plt>
   1a9f0:	andeq	pc, r2, r0, lsl #30
   1a9f4:	push	{r4, lr}
   1a9f8:	mov	r1, #0
   1a9fc:	bl	11800 <setlocale@plt>
   1aa00:	subs	r4, r0, #0
   1aa04:	beq	1aa30 <__assert_fail@plt+0x9128>
   1aa08:	ldr	r1, [pc, #40]	; 1aa38 <__assert_fail@plt+0x9130>
   1aa0c:	bl	1150c <strcmp@plt>
   1aa10:	cmp	r0, #0
   1aa14:	popeq	{r4, pc}
   1aa18:	mov	r0, r4
   1aa1c:	ldr	r1, [pc, #24]	; 1aa3c <__assert_fail@plt+0x9134>
   1aa20:	bl	1150c <strcmp@plt>
   1aa24:	adds	r0, r0, #0
   1aa28:	movne	r0, #1
   1aa2c:	pop	{r4, pc}
   1aa30:	mov	r0, #1
   1aa34:	pop	{r4, pc}
   1aa38:	andeq	pc, r1, r0, lsr #2
   1aa3c:	andeq	pc, r1, r4, lsr #2
   1aa40:	push	{r4, lr}
   1aa44:	mov	r0, #14
   1aa48:	bl	11824 <nl_langinfo@plt>
   1aa4c:	cmp	r0, #0
   1aa50:	beq	1aa68 <__assert_fail@plt+0x9160>
   1aa54:	ldrb	r2, [r0]
   1aa58:	ldr	r3, [pc, #16]	; 1aa70 <__assert_fail@plt+0x9168>
   1aa5c:	cmp	r2, #0
   1aa60:	moveq	r0, r3
   1aa64:	pop	{r4, pc}
   1aa68:	ldr	r0, [pc]	; 1aa70 <__assert_fail@plt+0x9168>
   1aa6c:	pop	{r4, pc}
   1aa70:	andeq	pc, r1, ip, lsr #2
   1aa74:	cmp	r0, #2
   1aa78:	push	{r4, r5, r6, r7, r8, lr}
   1aa7c:	mov	r4, r0
   1aa80:	bls	1aa8c <__assert_fail@plt+0x9184>
   1aa84:	mov	r0, r4
   1aa88:	pop	{r4, r5, r6, r7, r8, pc}
   1aa8c:	bl	1ae88 <__assert_fail@plt+0x9580>
   1aa90:	mov	r7, r0
   1aa94:	bl	11764 <__errno_location@plt>
   1aa98:	mov	r5, r0
   1aa9c:	mov	r0, r4
   1aaa0:	ldr	r6, [r5]
   1aaa4:	mov	r4, r7
   1aaa8:	bl	118cc <close@plt>
   1aaac:	str	r6, [r5]
   1aab0:	mov	r0, r4
   1aab4:	pop	{r4, r5, r6, r7, r8, pc}
   1aab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aabc:	sub	sp, sp, #8
   1aac0:	ldr	r9, [pc, #208]	; 1ab98 <__assert_fail@plt+0x9290>
   1aac4:	subs	r7, r0, #0
   1aac8:	str	r1, [sp]
   1aacc:	ldr	r3, [r9]
   1aad0:	str	r3, [sp, #4]
   1aad4:	beq	1ab80 <__assert_fail@plt+0x9278>
   1aad8:	mov	r8, r1
   1aadc:	mov	r5, r1
   1aae0:	mov	r6, r7
   1aae4:	mov	r4, #0
   1aae8:	add	r5, r5, #4
   1aaec:	str	r5, [sp]
   1aaf0:	ldr	r0, [r5, #-4]
   1aaf4:	bl	11728 <strlen@plt>
   1aaf8:	adds	r4, r0, r4
   1aafc:	mvncs	r4, #0
   1ab00:	subs	r6, r6, #1
   1ab04:	bne	1aae8 <__assert_fail@plt+0x91e0>
   1ab08:	cmp	r4, #0
   1ab0c:	blt	1ab70 <__assert_fail@plt+0x9268>
   1ab10:	add	r0, r4, #1
   1ab14:	bl	194e0 <__assert_fail@plt+0x7bd8>
   1ab18:	mov	r6, r0
   1ab1c:	mov	r4, r0
   1ab20:	ldr	sl, [r8], #4
   1ab24:	mov	r0, sl
   1ab28:	bl	11728 <strlen@plt>
   1ab2c:	mov	r1, sl
   1ab30:	mov	r5, r0
   1ab34:	mov	r2, r0
   1ab38:	mov	r0, r4
   1ab3c:	bl	11560 <memcpy@plt>
   1ab40:	subs	r7, r7, #1
   1ab44:	add	r4, r4, r5
   1ab48:	bne	1ab20 <__assert_fail@plt+0x9218>
   1ab4c:	mov	r3, #0
   1ab50:	strb	r3, [r4]
   1ab54:	ldr	r2, [sp, #4]
   1ab58:	ldr	r3, [r9]
   1ab5c:	mov	r0, r6
   1ab60:	cmp	r2, r3
   1ab64:	bne	1ab94 <__assert_fail@plt+0x928c>
   1ab68:	add	sp, sp, #8
   1ab6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab70:	bl	11764 <__errno_location@plt>
   1ab74:	mov	r3, #75	; 0x4b
   1ab78:	str	r3, [r0]
   1ab7c:	b	1ab54 <__assert_fail@plt+0x924c>
   1ab80:	mov	r0, #1
   1ab84:	bl	194e0 <__assert_fail@plt+0x7bd8>
   1ab88:	mov	r4, r0
   1ab8c:	mov	r6, r0
   1ab90:	b	1ab4c <__assert_fail@plt+0x9244>
   1ab94:	bl	11590 <__stack_chk_fail@plt>
   1ab98:	andeq	pc, r2, r0, lsl #30
   1ab9c:	push	{r4, lr}
   1aba0:	sub	sp, sp, #8
   1aba4:	ldr	r4, [pc, #176]	; 1ac5c <__assert_fail@plt+0x9354>
   1aba8:	ldrb	r3, [r0]
   1abac:	ldr	r2, [r4]
   1abb0:	cmp	r3, #0
   1abb4:	str	r2, [sp, #4]
   1abb8:	beq	1ac00 <__assert_fail@plt+0x92f8>
   1abbc:	cmp	r3, #37	; 0x25
   1abc0:	bne	1ac0c <__assert_fail@plt+0x9304>
   1abc4:	ldrb	r3, [r0, #1]
   1abc8:	cmp	r3, #115	; 0x73
   1abcc:	bne	1ac0c <__assert_fail@plt+0x9304>
   1abd0:	mov	r3, #0
   1abd4:	add	lr, r0, #1
   1abd8:	b	1abf0 <__assert_fail@plt+0x92e8>
   1abdc:	cmp	ip, #37	; 0x25
   1abe0:	bne	1ac0c <__assert_fail@plt+0x9304>
   1abe4:	ldrb	ip, [lr, r3, lsl #1]
   1abe8:	cmp	ip, #115	; 0x73
   1abec:	bne	1ac0c <__assert_fail@plt+0x9304>
   1abf0:	add	r3, r3, #1
   1abf4:	ldrb	ip, [r0, r3, lsl #1]
   1abf8:	cmp	ip, #0
   1abfc:	bne	1abdc <__assert_fail@plt+0x92d4>
   1ac00:	mov	r0, r3
   1ac04:	bl	1aab8 <__assert_fail@plt+0x91b0>
   1ac08:	b	1ac28 <__assert_fail@plt+0x9320>
   1ac0c:	mov	r2, r1
   1ac10:	mov	r1, r0
   1ac14:	mov	r0, sp
   1ac18:	bl	1ae00 <__assert_fail@plt+0x94f8>
   1ac1c:	cmp	r0, #0
   1ac20:	blt	1ac40 <__assert_fail@plt+0x9338>
   1ac24:	ldr	r0, [sp]
   1ac28:	ldr	r2, [sp, #4]
   1ac2c:	ldr	r3, [r4]
   1ac30:	cmp	r2, r3
   1ac34:	bne	1ac58 <__assert_fail@plt+0x9350>
   1ac38:	add	sp, sp, #8
   1ac3c:	pop	{r4, pc}
   1ac40:	bl	11764 <__errno_location@plt>
   1ac44:	ldr	r3, [r0]
   1ac48:	cmp	r3, #12
   1ac4c:	movne	r0, #0
   1ac50:	bne	1ac28 <__assert_fail@plt+0x9320>
   1ac54:	bl	19728 <__assert_fail@plt+0x7e20>
   1ac58:	bl	11590 <__stack_chk_fail@plt>
   1ac5c:	andeq	pc, r2, r0, lsl #30
   1ac60:	push	{r4, r5, lr}
   1ac64:	sub	sp, sp, #12
   1ac68:	mov	r4, r0
   1ac6c:	bl	117a0 <fileno@plt>
   1ac70:	cmp	r0, #0
   1ac74:	mov	r0, r4
   1ac78:	blt	1acf4 <__assert_fail@plt+0x93ec>
   1ac7c:	bl	116bc <__freading@plt>
   1ac80:	cmp	r0, #0
   1ac84:	bne	1acc0 <__assert_fail@plt+0x93b8>
   1ac88:	mov	r0, r4
   1ac8c:	bl	1ad00 <__assert_fail@plt+0x93f8>
   1ac90:	cmp	r0, #0
   1ac94:	beq	1acf0 <__assert_fail@plt+0x93e8>
   1ac98:	bl	11764 <__errno_location@plt>
   1ac9c:	mov	r5, r0
   1aca0:	mov	r0, r4
   1aca4:	ldr	r4, [r5]
   1aca8:	bl	117c4 <fclose@plt>
   1acac:	cmp	r4, #0
   1acb0:	mvnne	r0, #0
   1acb4:	strne	r4, [r5]
   1acb8:	add	sp, sp, #12
   1acbc:	pop	{r4, r5, pc}
   1acc0:	mov	r0, r4
   1acc4:	bl	117a0 <fileno@plt>
   1acc8:	mov	r3, #1
   1accc:	str	r3, [sp]
   1acd0:	mov	r2, #0
   1acd4:	mov	r3, #0
   1acd8:	bl	11614 <lseek64@plt>
   1acdc:	mvn	r3, #0
   1ace0:	mvn	r2, #0
   1ace4:	cmp	r1, r3
   1ace8:	cmpeq	r0, r2
   1acec:	bne	1ac88 <__assert_fail@plt+0x9380>
   1acf0:	mov	r0, r4
   1acf4:	add	sp, sp, #12
   1acf8:	pop	{r4, r5, lr}
   1acfc:	b	117c4 <fclose@plt>
   1ad00:	push	{r4, lr}
   1ad04:	subs	r4, r0, #0
   1ad08:	sub	sp, sp, #8
   1ad0c:	beq	1ad28 <__assert_fail@plt+0x9420>
   1ad10:	bl	116bc <__freading@plt>
   1ad14:	cmp	r0, #0
   1ad18:	beq	1ad28 <__assert_fail@plt+0x9420>
   1ad1c:	ldr	r3, [r4]
   1ad20:	tst	r3, #256	; 0x100
   1ad24:	bne	1ad38 <__assert_fail@plt+0x9430>
   1ad28:	mov	r0, r4
   1ad2c:	add	sp, sp, #8
   1ad30:	pop	{r4, lr}
   1ad34:	b	1153c <fflush@plt>
   1ad38:	mov	r3, #1
   1ad3c:	str	r3, [sp]
   1ad40:	mov	r2, #0
   1ad44:	mov	r3, #0
   1ad48:	mov	r0, r4
   1ad4c:	bl	1ad60 <__assert_fail@plt+0x9458>
   1ad50:	mov	r0, r4
   1ad54:	add	sp, sp, #8
   1ad58:	pop	{r4, lr}
   1ad5c:	b	1153c <fflush@plt>
   1ad60:	push	{r4, r5, r6, r7, r8, lr}
   1ad64:	sub	sp, sp, #8
   1ad68:	ldmib	r0, {ip, lr}
   1ad6c:	mov	r4, r0
   1ad70:	ldr	r5, [sp, #32]
   1ad74:	cmp	lr, ip
   1ad78:	beq	1ad90 <__assert_fail@plt+0x9488>
   1ad7c:	str	r5, [sp, #32]
   1ad80:	mov	r0, r4
   1ad84:	add	sp, sp, #8
   1ad88:	pop	{r4, r5, r6, r7, r8, lr}
   1ad8c:	b	117d0 <fseeko64@plt>
   1ad90:	ldr	lr, [r0, #20]
   1ad94:	ldr	ip, [r0, #16]
   1ad98:	cmp	lr, ip
   1ad9c:	bne	1ad7c <__assert_fail@plt+0x9474>
   1ada0:	ldr	r8, [r0, #36]	; 0x24
   1ada4:	cmp	r8, #0
   1ada8:	bne	1ad7c <__assert_fail@plt+0x9474>
   1adac:	mov	r6, r2
   1adb0:	mov	r7, r3
   1adb4:	bl	117a0 <fileno@plt>
   1adb8:	mov	r2, r6
   1adbc:	mov	r3, r7
   1adc0:	str	r5, [sp]
   1adc4:	bl	11614 <lseek64@plt>
   1adc8:	mvn	r3, #0
   1adcc:	mvn	r2, #0
   1add0:	cmp	r1, r3
   1add4:	cmpeq	r0, r2
   1add8:	beq	1adf8 <__assert_fail@plt+0x94f0>
   1addc:	ldr	r3, [r4]
   1ade0:	strd	r0, [r4, #80]	; 0x50
   1ade4:	mov	r0, r8
   1ade8:	bic	r3, r3, #16
   1adec:	str	r3, [r4]
   1adf0:	add	sp, sp, #8
   1adf4:	pop	{r4, r5, r6, r7, r8, pc}
   1adf8:	mvn	r0, #0
   1adfc:	b	1adf0 <__assert_fail@plt+0x94e8>
   1ae00:	push	{r4, r5, lr}
   1ae04:	sub	sp, sp, #12
   1ae08:	ldr	r4, [pc, #116]	; 1ae84 <__assert_fail@plt+0x957c>
   1ae0c:	mov	r3, r2
   1ae10:	mov	r5, r0
   1ae14:	ldr	ip, [r4]
   1ae18:	mov	r2, r1
   1ae1c:	mov	r0, #0
   1ae20:	mov	r1, sp
   1ae24:	str	ip, [sp, #4]
   1ae28:	bl	1afe0 <__assert_fail@plt+0x96d8>
   1ae2c:	subs	r2, r0, #0
   1ae30:	beq	1ae60 <__assert_fail@plt+0x9558>
   1ae34:	ldr	r3, [sp]
   1ae38:	cmp	r3, #0
   1ae3c:	strge	r2, [r5]
   1ae40:	blt	1ae68 <__assert_fail@plt+0x9560>
   1ae44:	ldr	r1, [sp, #4]
   1ae48:	ldr	r2, [r4]
   1ae4c:	mov	r0, r3
   1ae50:	cmp	r1, r2
   1ae54:	bne	1ae80 <__assert_fail@plt+0x9578>
   1ae58:	add	sp, sp, #12
   1ae5c:	pop	{r4, r5, pc}
   1ae60:	mvn	r3, #0
   1ae64:	b	1ae44 <__assert_fail@plt+0x953c>
   1ae68:	bl	11548 <free@plt>
   1ae6c:	bl	11764 <__errno_location@plt>
   1ae70:	mov	r2, #75	; 0x4b
   1ae74:	mvn	r3, #0
   1ae78:	str	r2, [r0]
   1ae7c:	b	1ae44 <__assert_fail@plt+0x953c>
   1ae80:	bl	11590 <__stack_chk_fail@plt>
   1ae84:	andeq	pc, r2, r0, lsl #30
   1ae88:	mov	r2, #3
   1ae8c:	mov	r1, #0
   1ae90:	b	1ae94 <__assert_fail@plt+0x958c>
   1ae94:	push	{r1, r2, r3}
   1ae98:	push	{r4, r5, r6, r7, r8, lr}
   1ae9c:	sub	sp, sp, #12
   1aea0:	ldr	r4, [pc, #300]	; 1afd4 <__assert_fail@plt+0x96cc>
   1aea4:	ldr	r3, [pc, #300]	; 1afd8 <__assert_fail@plt+0x96d0>
   1aea8:	ldr	r1, [sp, #36]	; 0x24
   1aeac:	ldr	r2, [r4]
   1aeb0:	cmp	r1, r3
   1aeb4:	add	r3, sp, #40	; 0x28
   1aeb8:	str	r2, [sp, #4]
   1aebc:	str	r3, [sp]
   1aec0:	bne	1af8c <__assert_fail@plt+0x9684>
   1aec4:	ldr	r6, [pc, #272]	; 1afdc <__assert_fail@plt+0x96d4>
   1aec8:	add	r3, sp, #44	; 0x2c
   1aecc:	str	r3, [sp]
   1aed0:	ldr	r3, [r6]
   1aed4:	ldr	r7, [sp, #40]	; 0x28
   1aed8:	cmp	r3, #0
   1aedc:	blt	1af20 <__assert_fail@plt+0x9618>
   1aee0:	mov	r2, r7
   1aee4:	mov	r8, r0
   1aee8:	bl	117e8 <fcntl64@plt>
   1aeec:	subs	r5, r0, #0
   1aef0:	blt	1af9c <__assert_fail@plt+0x9694>
   1aef4:	mov	r3, #1
   1aef8:	str	r3, [r6]
   1aefc:	ldr	r2, [sp, #4]
   1af00:	ldr	r3, [r4]
   1af04:	mov	r0, r5
   1af08:	cmp	r2, r3
   1af0c:	bne	1afd0 <__assert_fail@plt+0x96c8>
   1af10:	add	sp, sp, #12
   1af14:	pop	{r4, r5, r6, r7, r8, lr}
   1af18:	add	sp, sp, #12
   1af1c:	bx	lr
   1af20:	mov	r2, r7
   1af24:	mov	r1, #0
   1af28:	bl	1ae94 <__assert_fail@plt+0x958c>
   1af2c:	subs	r5, r0, #0
   1af30:	blt	1aefc <__assert_fail@plt+0x95f4>
   1af34:	ldr	r3, [r6]
   1af38:	cmn	r3, #1
   1af3c:	bne	1aefc <__assert_fail@plt+0x95f4>
   1af40:	mov	r1, #1
   1af44:	mov	r0, r5
   1af48:	bl	117e8 <fcntl64@plt>
   1af4c:	subs	r2, r0, #0
   1af50:	blt	1af6c <__assert_fail@plt+0x9664>
   1af54:	orr	r2, r2, #1
   1af58:	mov	r1, #2
   1af5c:	mov	r0, r5
   1af60:	bl	117e8 <fcntl64@plt>
   1af64:	cmn	r0, #1
   1af68:	bne	1aefc <__assert_fail@plt+0x95f4>
   1af6c:	bl	11764 <__errno_location@plt>
   1af70:	mov	r6, r0
   1af74:	mov	r0, r5
   1af78:	ldr	r7, [r6]
   1af7c:	mvn	r5, #0
   1af80:	bl	118cc <close@plt>
   1af84:	str	r7, [r6]
   1af88:	b	1aefc <__assert_fail@plt+0x95f4>
   1af8c:	ldr	r2, [sp, #40]	; 0x28
   1af90:	bl	117e8 <fcntl64@plt>
   1af94:	mov	r5, r0
   1af98:	b	1aefc <__assert_fail@plt+0x95f4>
   1af9c:	bl	11764 <__errno_location@plt>
   1afa0:	ldr	r3, [r0]
   1afa4:	cmp	r3, #22
   1afa8:	bne	1aef4 <__assert_fail@plt+0x95ec>
   1afac:	mov	r2, r7
   1afb0:	mov	r0, r8
   1afb4:	mov	r1, #0
   1afb8:	bl	1ae94 <__assert_fail@plt+0x958c>
   1afbc:	subs	r5, r0, #0
   1afc0:	mvnge	r3, #0
   1afc4:	strge	r3, [r6]
   1afc8:	bge	1af40 <__assert_fail@plt+0x9638>
   1afcc:	b	1aefc <__assert_fail@plt+0x95f4>
   1afd0:	bl	11590 <__stack_chk_fail@plt>
   1afd4:	andeq	pc, r2, r0, lsl #30
   1afd8:	andeq	r0, r0, r6, lsl #8
   1afdc:			; <UNDEFINED> instruction: 0x000303b4
   1afe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afe4:	mov	r9, r2
   1afe8:	ldr	r2, [pc, #3592]	; 1bdf8 <__assert_fail@plt+0xa4f0>
   1afec:	add	fp, sp, #32
   1aff0:	sub	sp, sp, #540	; 0x21c
   1aff4:	ldr	ip, [r2]
   1aff8:	str	r0, [fp, #-504]	; 0xfffffe08
   1affc:	str	r1, [fp, #-532]	; 0xfffffdec
   1b000:	mov	r0, r9
   1b004:	sub	r2, fp, #484	; 0x1e4
   1b008:	sub	r1, fp, #364	; 0x16c
   1b00c:	mov	r4, r3
   1b010:	str	ip, [fp, #-40]	; 0xffffffd8
   1b014:	bl	1bf30 <__assert_fail@plt+0xa628>
   1b018:	cmp	r0, #0
   1b01c:	blt	1b5f4 <__assert_fail@plt+0x9cec>
   1b020:	sub	r1, fp, #484	; 0x1e4
   1b024:	mov	r0, r4
   1b028:	bl	1bdfc <__assert_fail@plt+0xa4f4>
   1b02c:	cmp	r0, #0
   1b030:	blt	1bbb0 <__assert_fail@plt+0xa2a8>
   1b034:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   1b038:	ldr	r3, [fp, #-352]	; 0xfffffea0
   1b03c:	adds	r2, r2, #7
   1b040:	mvncs	r2, #0
   1b044:	adds	r3, r3, r2
   1b048:	bcs	1b5e8 <__assert_fail@plt+0x9ce0>
   1b04c:	mov	r0, #6
   1b050:	adds	r0, r3, r0
   1b054:	bcs	1b5e8 <__assert_fail@plt+0x9ce0>
   1b058:	cmp	r0, #4000	; 0xfa0
   1b05c:	bcc	1b28c <__assert_fail@plt+0x9984>
   1b060:	cmn	r0, #1
   1b064:	beq	1b5e8 <__assert_fail@plt+0x9ce0>
   1b068:	bl	11698 <malloc@plt>
   1b06c:	subs	r3, r0, #0
   1b070:	str	r3, [fp, #-516]	; 0xfffffdfc
   1b074:	beq	1b5e8 <__assert_fail@plt+0x9ce0>
   1b078:	str	r3, [fp, #-536]	; 0xfffffde8
   1b07c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1b080:	ldr	sl, [fp, #-360]	; 0xfffffe98
   1b084:	cmp	r3, #0
   1b088:	ldr	r5, [fp, #-504]	; 0xfffffe08
   1b08c:	ldrne	r3, [fp, #-532]	; 0xfffffdec
   1b090:	ldreq	r6, [fp, #-504]	; 0xfffffe08
   1b094:	mov	r4, #0
   1b098:	ldrne	r6, [r3]
   1b09c:	mov	r3, r5
   1b0a0:	ldr	r5, [sl]
   1b0a4:	str	r4, [fp, #-528]	; 0xfffffdf0
   1b0a8:	cmp	r5, r9
   1b0ac:	beq	1b504 <__assert_fail@plt+0x9bfc>
   1b0b0:	sub	r5, r5, r9
   1b0b4:	adds	r2, r4, r5
   1b0b8:	mov	r7, r2
   1b0bc:	bcs	1b50c <__assert_fail@plt+0x9c04>
   1b0c0:	cmp	r6, r2
   1b0c4:	bcs	1b138 <__assert_fail@plt+0x9830>
   1b0c8:	cmp	r6, #0
   1b0cc:	bne	1b5fc <__assert_fail@plt+0x9cf4>
   1b0d0:	cmp	r2, #12
   1b0d4:	movls	r6, #12
   1b0d8:	bhi	1b60c <__assert_fail@plt+0x9d04>
   1b0dc:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1b0e0:	cmp	r3, r2
   1b0e4:	cmpne	r3, #0
   1b0e8:	sub	r8, r3, r2
   1b0ec:	clz	r8, r8
   1b0f0:	lsr	r8, r8, #5
   1b0f4:	bne	1b5a0 <__assert_fail@plt+0x9c98>
   1b0f8:	mov	r0, r6
   1b0fc:	str	r3, [fp, #-508]	; 0xfffffe04
   1b100:	bl	11698 <malloc@plt>
   1b104:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b108:	subs	ip, r0, #0
   1b10c:	beq	1b9c4 <__assert_fail@plt+0xa0bc>
   1b110:	cmp	r4, #0
   1b114:	moveq	r8, #0
   1b118:	cmp	r8, #0
   1b11c:	moveq	r3, ip
   1b120:	beq	1b138 <__assert_fail@plt+0x9830>
   1b124:	mov	r1, r3
   1b128:	mov	r2, r4
   1b12c:	str	ip, [fp, #-508]	; 0xfffffe04
   1b130:	bl	11560 <memcpy@plt>
   1b134:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b138:	add	r0, r3, r4
   1b13c:	mov	r2, r5
   1b140:	mov	r1, r9
   1b144:	str	r3, [fp, #-508]	; 0xfffffe04
   1b148:	bl	11560 <memcpy@plt>
   1b14c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b150:	ldr	r2, [fp, #-364]	; 0xfffffe94
   1b154:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   1b158:	cmp	r2, r1
   1b15c:	beq	1bc98 <__assert_fail@plt+0xa390>
   1b160:	ldrb	r1, [sl, #36]	; 0x24
   1b164:	ldr	r2, [sl, #40]	; 0x28
   1b168:	cmp	r1, #37	; 0x25
   1b16c:	beq	1b44c <__assert_fail@plt+0x9b44>
   1b170:	cmn	r2, #1
   1b174:	beq	1bdf4 <__assert_fail@plt+0xa4ec>
   1b178:	ldr	r9, [fp, #-480]	; 0xfffffe20
   1b17c:	cmp	r1, #110	; 0x6e
   1b180:	add	r1, r9, r2, lsl #4
   1b184:	ldr	r5, [r9, r2, lsl #4]
   1b188:	beq	1b5c4 <__assert_fail@plt+0x9cbc>
   1b18c:	ldr	r2, [sl, #8]
   1b190:	ldr	r0, [fp, #-516]	; 0xfffffdfc
   1b194:	tst	r2, #1
   1b198:	mov	r1, #37	; 0x25
   1b19c:	strb	r1, [r0]
   1b1a0:	ldrne	r0, [fp, #-516]	; 0xfffffdfc
   1b1a4:	movne	r1, #39	; 0x27
   1b1a8:	addne	r4, r0, #2
   1b1ac:	strbne	r1, [r0, #1]
   1b1b0:	addeq	r4, r0, #1
   1b1b4:	tst	r2, #2
   1b1b8:	movne	r1, #45	; 0x2d
   1b1bc:	strbne	r1, [r4], #1
   1b1c0:	tst	r2, #4
   1b1c4:	movne	r1, #43	; 0x2b
   1b1c8:	strbne	r1, [r4], #1
   1b1cc:	tst	r2, #8
   1b1d0:	movne	r1, #32
   1b1d4:	strbne	r1, [r4], #1
   1b1d8:	tst	r2, #16
   1b1dc:	movne	r1, #35	; 0x23
   1b1e0:	strbne	r1, [r4], #1
   1b1e4:	tst	r2, #64	; 0x40
   1b1e8:	movne	r1, #73	; 0x49
   1b1ec:	strbne	r1, [r4], #1
   1b1f0:	tst	r2, #32
   1b1f4:	movne	r2, #48	; 0x30
   1b1f8:	strbne	r2, [r4], #1
   1b1fc:	ldr	r1, [sl, #12]
   1b200:	ldr	r8, [sl, #16]
   1b204:	cmp	r1, r8
   1b208:	beq	1b228 <__assert_fail@plt+0x9920>
   1b20c:	sub	r8, r8, r1
   1b210:	mov	r0, r4
   1b214:	mov	r2, r8
   1b218:	str	r3, [fp, #-508]	; 0xfffffe04
   1b21c:	bl	11560 <memcpy@plt>
   1b220:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b224:	add	r4, r4, r8
   1b228:	ldr	r1, [sl, #24]
   1b22c:	ldr	r8, [sl, #28]
   1b230:	cmp	r1, r8
   1b234:	beq	1b254 <__assert_fail@plt+0x994c>
   1b238:	sub	r8, r8, r1
   1b23c:	mov	r0, r4
   1b240:	mov	r2, r8
   1b244:	str	r3, [fp, #-508]	; 0xfffffe04
   1b248:	bl	11560 <memcpy@plt>
   1b24c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b250:	add	r4, r4, r8
   1b254:	sub	r2, r5, #7
   1b258:	cmp	r2, #9
   1b25c:	ldrls	pc, [pc, r2, lsl #2]
   1b260:	b	1b2bc <__assert_fail@plt+0x99b4>
   1b264:			; <UNDEFINED> instruction: 0x0001b2b4
   1b268:			; <UNDEFINED> instruction: 0x0001b2b4
   1b26c:	andeq	fp, r1, ip, lsr #5
   1b270:	andeq	fp, r1, ip, lsr #5
   1b274:			; <UNDEFINED> instruction: 0x0001b2bc
   1b278:	andeq	fp, r1, ip, lsl r6
   1b27c:			; <UNDEFINED> instruction: 0x0001b2bc
   1b280:			; <UNDEFINED> instruction: 0x0001b2b4
   1b284:			; <UNDEFINED> instruction: 0x0001b2bc
   1b288:			; <UNDEFINED> instruction: 0x0001b2b4
   1b28c:	add	r3, r3, #13
   1b290:	bic	r3, r3, #7
   1b294:	sub	sp, sp, r3
   1b298:	add	r3, sp, #32
   1b29c:	str	r3, [fp, #-516]	; 0xfffffdfc
   1b2a0:	mov	r3, #0
   1b2a4:	str	r3, [fp, #-536]	; 0xfffffde8
   1b2a8:	b	1b07c <__assert_fail@plt+0x9774>
   1b2ac:	mov	r2, #108	; 0x6c
   1b2b0:	strb	r2, [r4], #1
   1b2b4:	mov	r2, #108	; 0x6c
   1b2b8:	strb	r2, [r4], #1
   1b2bc:	ldrb	r2, [sl, #36]	; 0x24
   1b2c0:	mov	r1, #0
   1b2c4:	strb	r1, [r4, #1]
   1b2c8:	strb	r2, [r4]
   1b2cc:	ldr	r2, [sl, #20]
   1b2d0:	cmn	r2, #1
   1b2d4:	beq	1ba74 <__assert_fail@plt+0xa16c>
   1b2d8:	ldr	r1, [r9, r2, lsl #4]
   1b2dc:	add	r2, r9, r2, lsl #4
   1b2e0:	cmp	r1, #5
   1b2e4:	bne	1bdf4 <__assert_fail@plt+0xa4ec>
   1b2e8:	ldr	r2, [r2, #8]
   1b2ec:	mov	r8, #1
   1b2f0:	str	r2, [fp, #-492]	; 0xfffffe14
   1b2f4:	ldr	r2, [sl, #32]
   1b2f8:	cmn	r2, #1
   1b2fc:	beq	1b324 <__assert_fail@plt+0x9a1c>
   1b300:	ldr	r1, [r9, r2, lsl #4]
   1b304:	add	r9, r9, r2, lsl #4
   1b308:	cmp	r1, #5
   1b30c:	bne	1bdf4 <__assert_fail@plt+0xa4ec>
   1b310:	sub	r2, fp, #36	; 0x24
   1b314:	add	r2, r2, r8, lsl #2
   1b318:	ldr	r1, [r9, #8]
   1b31c:	add	r8, r8, #1
   1b320:	str	r1, [r2, #-456]	; 0xfffffe38
   1b324:	mov	r2, #2
   1b328:	adds	r2, r7, r2
   1b32c:	str	r2, [fp, #-524]	; 0xfffffdf4
   1b330:	bcs	1baac <__assert_fail@plt+0xa1a4>
   1b334:	cmp	r6, r2
   1b338:	bcs	1bab4 <__assert_fail@plt+0xa1ac>
   1b33c:	cmp	r6, #0
   1b340:	bne	1b970 <__assert_fail@plt+0xa068>
   1b344:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1b348:	cmp	r2, #12
   1b34c:	movls	r6, #12
   1b350:	bhi	1b984 <__assert_fail@plt+0xa07c>
   1b354:	ldr	r1, [fp, #-504]	; 0xfffffe08
   1b358:	sub	r2, r3, r1
   1b35c:	cmp	r3, r1
   1b360:	cmpne	r3, #0
   1b364:	clz	r2, r2
   1b368:	lsr	r2, r2, #5
   1b36c:	str	r2, [fp, #-508]	; 0xfffffe04
   1b370:	bne	1ba7c <__assert_fail@plt+0xa174>
   1b374:	mov	r0, r6
   1b378:	str	r3, [fp, #-512]	; 0xfffffe00
   1b37c:	bl	11698 <malloc@plt>
   1b380:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1b384:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1b388:	subs	r9, r0, #0
   1b38c:	beq	1b9c4 <__assert_fail@plt+0xa0bc>
   1b390:	cmp	r7, #0
   1b394:	moveq	r2, #0
   1b398:	cmp	r2, #0
   1b39c:	beq	1b3ac <__assert_fail@plt+0x9aa4>
   1b3a0:	mov	r1, r3
   1b3a4:	mov	r2, r7
   1b3a8:	bl	11560 <memcpy@plt>
   1b3ac:	mov	r3, #0
   1b3b0:	strb	r3, [r9, r7]
   1b3b4:	bl	11764 <__errno_location@plt>
   1b3b8:	sub	r3, r5, #1
   1b3bc:	str	r3, [fp, #-520]	; 0xfffffdf8
   1b3c0:	ldr	r3, [r0]
   1b3c4:	str	r0, [fp, #-508]	; 0xfffffe04
   1b3c8:	str	r3, [fp, #-540]	; 0xfffffde4
   1b3cc:	sub	r3, r6, r7
   1b3d0:	str	r3, [fp, #-512]	; 0xfffffe00
   1b3d4:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1b3d8:	mvn	r2, #0
   1b3dc:	cmp	r3, #0
   1b3e0:	str	r2, [fp, #-496]	; 0xfffffe10
   1b3e4:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1b3e8:	movge	r5, r3
   1b3ec:	ldr	r3, [fp, #-520]	; 0xfffffdf8
   1b3f0:	mov	r1, #0
   1b3f4:	str	r1, [r2]
   1b3f8:	mvnlt	r5, #-2147483648	; 0x80000000
   1b3fc:	cmp	r3, #16
   1b400:	ldrls	pc, [pc, r3, lsl #2]
   1b404:	b	1bdf4 <__assert_fail@plt+0xa4ec>
   1b408:	andeq	fp, r1, r0, asr r9
   1b40c:	andeq	fp, r1, r0, lsr r9
   1b410:	ldrdeq	fp, [r1], -r4
   1b414:	andeq	fp, r1, r8, lsl #17
   1b418:	andeq	fp, r1, r8, lsr #12
   1b41c:	andeq	fp, r1, r8, lsr #12
   1b420:	andeq	fp, r1, r8, lsr #12
   1b424:	andeq	fp, r1, r8, lsr #12
   1b428:	andeq	fp, r1, ip, asr #14
   1b42c:	andeq	fp, r1, ip, asr #14
   1b430:	andeq	fp, r1, ip, lsr r8
   1b434:	andeq	fp, r1, ip, lsr r8
   1b438:	andeq	fp, r1, r8, lsr #12
   1b43c:	andeq	fp, r1, r8, lsr #12
   1b440:	andeq	fp, r1, r8, lsr #12
   1b444:	andeq	fp, r1, r8, lsr #12
   1b448:	andeq	fp, r1, r8, lsr #12
   1b44c:	cmn	r2, #1
   1b450:	bne	1bdf4 <__assert_fail@plt+0xa4ec>
   1b454:	mov	r2, #1
   1b458:	adds	r2, r7, r2
   1b45c:	mov	r4, r2
   1b460:	bcs	1ba9c <__assert_fail@plt+0xa194>
   1b464:	cmp	r6, r2
   1b468:	bcs	1b4dc <__assert_fail@plt+0x9bd4>
   1b46c:	cmp	r6, #0
   1b470:	bne	1b9c0 <__assert_fail@plt+0xa0b8>
   1b474:	cmp	r2, #12
   1b478:	movls	r6, #12
   1b47c:	bhi	1bbf8 <__assert_fail@plt+0xa2f0>
   1b480:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1b484:	cmp	r3, r2
   1b488:	cmpne	r3, #0
   1b48c:	sub	r5, r3, r2
   1b490:	clz	r5, r5
   1b494:	lsr	r5, r5, #5
   1b498:	bne	1bb8c <__assert_fail@plt+0xa284>
   1b49c:	mov	r0, r6
   1b4a0:	str	r3, [fp, #-508]	; 0xfffffe04
   1b4a4:	bl	11698 <malloc@plt>
   1b4a8:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b4ac:	subs	ip, r0, #0
   1b4b0:	beq	1b9c4 <__assert_fail@plt+0xa0bc>
   1b4b4:	cmp	r7, #0
   1b4b8:	moveq	r5, #0
   1b4bc:	cmp	r5, #0
   1b4c0:	moveq	r3, ip
   1b4c4:	beq	1b4dc <__assert_fail@plt+0x9bd4>
   1b4c8:	mov	r1, r3
   1b4cc:	mov	r2, r7
   1b4d0:	str	ip, [fp, #-508]	; 0xfffffe04
   1b4d4:	bl	11560 <memcpy@plt>
   1b4d8:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b4dc:	mov	r2, #37	; 0x25
   1b4e0:	strb	r2, [r3, r7]
   1b4e4:	ldr	r9, [sl, #4]
   1b4e8:	add	sl, sl, #44	; 0x2c
   1b4ec:	ldr	r2, [fp, #-528]	; 0xfffffdf0
   1b4f0:	ldr	r5, [sl]
   1b4f4:	add	r2, r2, #1
   1b4f8:	cmp	r5, r9
   1b4fc:	str	r2, [fp, #-528]	; 0xfffffdf0
   1b500:	bne	1b0b0 <__assert_fail@plt+0x97a8>
   1b504:	mov	r7, r4
   1b508:	b	1b150 <__assert_fail@plt+0x9848>
   1b50c:	cmn	r6, #1
   1b510:	beq	1bb84 <__assert_fail@plt+0xa27c>
   1b514:	mov	r5, r3
   1b518:	bl	11764 <__errno_location@plt>
   1b51c:	mov	r9, r5
   1b520:	str	r0, [fp, #-508]	; 0xfffffe04
   1b524:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1b528:	cmp	r9, r3
   1b52c:	cmpne	r9, #0
   1b530:	bne	1b9e0 <__assert_fail@plt+0xa0d8>
   1b534:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1b538:	cmp	r3, #0
   1b53c:	beq	1b548 <__assert_fail@plt+0x9c40>
   1b540:	mov	r0, r3
   1b544:	bl	11548 <free@plt>
   1b548:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1b54c:	sub	r3, fp, #348	; 0x15c
   1b550:	cmp	r0, r3
   1b554:	beq	1b55c <__assert_fail@plt+0x9c54>
   1b558:	bl	11548 <free@plt>
   1b55c:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1b560:	sub	r3, fp, #476	; 0x1dc
   1b564:	cmp	r0, r3
   1b568:	beq	1b570 <__assert_fail@plt+0x9c68>
   1b56c:	bl	11548 <free@plt>
   1b570:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1b574:	mov	r5, #0
   1b578:	mov	r3, #12
   1b57c:	str	r3, [r2]
   1b580:	ldr	r3, [pc, #2160]	; 1bdf8 <__assert_fail@plt+0xa4f0>
   1b584:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b588:	mov	r0, r5
   1b58c:	ldr	r3, [r3]
   1b590:	cmp	r2, r3
   1b594:	bne	1bde4 <__assert_fail@plt+0xa4dc>
   1b598:	sub	sp, fp, #32
   1b59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5a0:	mov	r0, r3
   1b5a4:	mov	r1, r6
   1b5a8:	str	r3, [fp, #-508]	; 0xfffffe04
   1b5ac:	bl	1159c <realloc@plt>
   1b5b0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b5b4:	cmp	r0, #0
   1b5b8:	beq	1bd7c <__assert_fail@plt+0xa474>
   1b5bc:	mov	r3, r0
   1b5c0:	b	1b138 <__assert_fail@plt+0x9830>
   1b5c4:	sub	r5, r5, #18
   1b5c8:	cmp	r5, #4
   1b5cc:	ldrls	pc, [pc, r5, lsl #2]
   1b5d0:	b	1bdf4 <__assert_fail@plt+0xa4ec>
   1b5d4:	andeq	fp, r1, r4, lsl sl
   1b5d8:	andeq	fp, r1, r4, lsl #20
   1b5dc:			; <UNDEFINED> instruction: 0x0001b9b0
   1b5e0:			; <UNDEFINED> instruction: 0x0001b9b0
   1b5e4:	andeq	fp, r1, ip, ror #19
   1b5e8:	bl	11764 <__errno_location@plt>
   1b5ec:	str	r0, [fp, #-508]	; 0xfffffe04
   1b5f0:	b	1b548 <__assert_fail@plt+0x9c40>
   1b5f4:	mov	r5, #0
   1b5f8:	b	1b580 <__assert_fail@plt+0x9c78>
   1b5fc:	blt	1b9c4 <__assert_fail@plt+0xa0bc>
   1b600:	lsl	r6, r6, #1
   1b604:	cmp	r6, r2
   1b608:	bcs	1b0dc <__assert_fail@plt+0x97d4>
   1b60c:	cmn	r2, #1
   1b610:	beq	1b514 <__assert_fail@plt+0x9c0c>
   1b614:	mov	r6, r2
   1b618:	b	1b0dc <__assert_fail@plt+0x97d4>
   1b61c:	mov	r2, #76	; 0x4c
   1b620:	strb	r2, [r4], #1
   1b624:	b	1b2bc <__assert_fail@plt+0x99b4>
   1b628:	ldr	r2, [sl, #40]	; 0x28
   1b62c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1b630:	cmp	r8, #1
   1b634:	add	r3, r3, r2, lsl #4
   1b638:	add	r0, r9, r7
   1b63c:	ldr	r3, [r3, #8]
   1b640:	beq	1b8a4 <__assert_fail@plt+0x9f9c>
   1b644:	cmp	r8, #2
   1b648:	beq	1b8f8 <__assert_fail@plt+0x9ff0>
   1b64c:	str	r3, [sp, #4]
   1b650:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1b654:	sub	r2, fp, #496	; 0x1f0
   1b658:	str	r2, [sp, #8]
   1b65c:	str	r3, [sp]
   1b660:	mov	r2, #1
   1b664:	mvn	r3, #0
   1b668:	mov	r1, r5
   1b66c:	bl	118f0 <__snprintf_chk@plt>
   1b670:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1b674:	cmp	r2, #0
   1b678:	blt	1b7a0 <__assert_fail@plt+0x9e98>
   1b67c:	cmp	r2, r5
   1b680:	mov	r3, r2
   1b684:	bcs	1b698 <__assert_fail@plt+0x9d90>
   1b688:	add	r1, r9, r2
   1b68c:	ldrb	r1, [r1, r7]
   1b690:	cmp	r1, #0
   1b694:	bne	1bdf4 <__assert_fail@plt+0xa4ec>
   1b698:	cmp	r2, r0
   1b69c:	bge	1b6a8 <__assert_fail@plt+0x9da0>
   1b6a0:	mov	r3, r0
   1b6a4:	str	r0, [fp, #-496]	; 0xfffffe10
   1b6a8:	add	r2, r3, #1
   1b6ac:	cmp	r2, r5
   1b6b0:	bcc	1bc08 <__assert_fail@plt+0xa300>
   1b6b4:	cmn	r5, #-2147483647	; 0x80000001
   1b6b8:	beq	1bc20 <__assert_fail@plt+0xa318>
   1b6bc:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1b6c0:	add	r3, r3, r2
   1b6c4:	cmp	r7, r3
   1b6c8:	mvnhi	r3, #0
   1b6cc:	cmp	r6, #0
   1b6d0:	blt	1ba24 <__assert_fail@plt+0xa11c>
   1b6d4:	lsl	r2, r6, #1
   1b6d8:	cmp	r2, r3
   1b6dc:	movcs	r3, r2
   1b6e0:	cmp	r6, r3
   1b6e4:	bcs	1b3d4 <__assert_fail@plt+0x9acc>
   1b6e8:	cmp	r2, r3
   1b6ec:	bcc	1ba30 <__assert_fail@plt+0xa128>
   1b6f0:	mov	r6, r2
   1b6f4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1b6f8:	cmp	r9, r3
   1b6fc:	cmpne	r9, #0
   1b700:	sub	r5, r9, r3
   1b704:	clz	r5, r5
   1b708:	lsr	r5, r5, #5
   1b70c:	bne	1ba40 <__assert_fail@plt+0xa138>
   1b710:	mov	r0, r6
   1b714:	bl	11698 <malloc@plt>
   1b718:	subs	r3, r0, #0
   1b71c:	beq	1b524 <__assert_fail@plt+0x9c1c>
   1b720:	cmp	r7, #0
   1b724:	moveq	r5, #0
   1b728:	cmp	r5, #0
   1b72c:	beq	1ba64 <__assert_fail@plt+0xa15c>
   1b730:	mov	r1, r9
   1b734:	mov	r2, r7
   1b738:	mov	r9, r3
   1b73c:	bl	11560 <memcpy@plt>
   1b740:	sub	r3, r6, r7
   1b744:	str	r3, [fp, #-512]	; 0xfffffe00
   1b748:	b	1b3d4 <__assert_fail@plt+0x9acc>
   1b74c:	ldr	r2, [sl, #40]	; 0x28
   1b750:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1b754:	cmp	r8, #1
   1b758:	add	r3, r3, r2, lsl #4
   1b75c:	add	r0, r9, r7
   1b760:	ldrd	r2, [r3, #8]
   1b764:	beq	1baf0 <__assert_fail@plt+0xa1e8>
   1b768:	cmp	r8, #2
   1b76c:	beq	1babc <__assert_fail@plt+0xa1b4>
   1b770:	strd	r2, [sp, #8]
   1b774:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1b778:	sub	r1, fp, #496	; 0x1f0
   1b77c:	str	r1, [sp, #16]
   1b780:	str	r3, [sp]
   1b784:	mov	r2, #1
   1b788:	mvn	r3, #0
   1b78c:	mov	r1, r5
   1b790:	bl	118f0 <__snprintf_chk@plt>
   1b794:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1b798:	cmp	r2, #0
   1b79c:	bge	1b67c <__assert_fail@plt+0x9d74>
   1b7a0:	ldrb	r3, [r4, #1]
   1b7a4:	cmp	r3, #0
   1b7a8:	movne	r3, #0
   1b7ac:	strbne	r3, [r4, #1]
   1b7b0:	bne	1b3d4 <__assert_fail@plt+0x9acc>
   1b7b4:	cmp	r0, #0
   1b7b8:	bge	1b6a0 <__assert_fail@plt+0x9d98>
   1b7bc:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b7c0:	ldr	r4, [r3]
   1b7c4:	cmp	r4, #0
   1b7c8:	bne	1b7e0 <__assert_fail@plt+0x9ed8>
   1b7cc:	ldrb	r3, [sl, #36]	; 0x24
   1b7d0:	and	r3, r3, #239	; 0xef
   1b7d4:	cmp	r3, #99	; 0x63
   1b7d8:	moveq	r4, #84	; 0x54
   1b7dc:	movne	r4, #22
   1b7e0:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1b7e4:	cmp	r9, r3
   1b7e8:	cmpne	r9, #0
   1b7ec:	bne	1bc80 <__assert_fail@plt+0xa378>
   1b7f0:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1b7f4:	cmp	r3, #0
   1b7f8:	beq	1b804 <__assert_fail@plt+0x9efc>
   1b7fc:	mov	r0, r3
   1b800:	bl	11548 <free@plt>
   1b804:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1b808:	sub	r3, fp, #348	; 0x15c
   1b80c:	cmp	r0, r3
   1b810:	beq	1b818 <__assert_fail@plt+0x9f10>
   1b814:	bl	11548 <free@plt>
   1b818:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1b81c:	sub	r3, fp, #476	; 0x1dc
   1b820:	cmp	r0, r3
   1b824:	beq	1b82c <__assert_fail@plt+0x9f24>
   1b828:	bl	11548 <free@plt>
   1b82c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1b830:	mov	r5, #0
   1b834:	str	r4, [r3]
   1b838:	b	1b580 <__assert_fail@plt+0x9c78>
   1b83c:	ldr	r2, [sl, #40]	; 0x28
   1b840:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1b844:	cmp	r8, #1
   1b848:	add	r3, r3, r2, lsl #4
   1b84c:	add	r0, r9, r7
   1b850:	ldrd	r2, [r3, #8]
   1b854:	beq	1bb54 <__assert_fail@plt+0xa24c>
   1b858:	cmp	r8, #2
   1b85c:	beq	1bb20 <__assert_fail@plt+0xa218>
   1b860:	strd	r2, [sp, #8]
   1b864:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1b868:	sub	r1, fp, #496	; 0x1f0
   1b86c:	str	r1, [sp, #16]
   1b870:	str	r3, [sp]
   1b874:	mov	r2, #1
   1b878:	mvn	r3, #0
   1b87c:	mov	r1, r5
   1b880:	bl	118f0 <__snprintf_chk@plt>
   1b884:	b	1b670 <__assert_fail@plt+0x9d68>
   1b888:	ldr	r2, [sl, #40]	; 0x28
   1b88c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1b890:	cmp	r8, #1
   1b894:	add	r3, r3, r2, lsl #4
   1b898:	add	r0, r9, r7
   1b89c:	ldrh	r3, [r3, #8]
   1b8a0:	bne	1b644 <__assert_fail@plt+0x9d3c>
   1b8a4:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1b8a8:	str	r3, [sp, #8]
   1b8ac:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1b8b0:	sub	r1, fp, #496	; 0x1f0
   1b8b4:	str	r1, [sp, #12]
   1b8b8:	str	r3, [sp]
   1b8bc:	str	r2, [sp, #4]
   1b8c0:	mvn	r3, #0
   1b8c4:	mov	r2, r8
   1b8c8:	mov	r1, r5
   1b8cc:	bl	118f0 <__snprintf_chk@plt>
   1b8d0:	b	1b670 <__assert_fail@plt+0x9d68>
   1b8d4:	ldr	r2, [sl, #40]	; 0x28
   1b8d8:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1b8dc:	cmp	r8, #1
   1b8e0:	add	r3, r3, r2, lsl #4
   1b8e4:	add	r0, r9, r7
   1b8e8:	ldrsh	r3, [r3, #8]
   1b8ec:	beq	1b8a4 <__assert_fail@plt+0x9f9c>
   1b8f0:	cmp	r8, #2
   1b8f4:	bne	1b64c <__assert_fail@plt+0x9d44>
   1b8f8:	ldr	r1, [fp, #-488]	; 0xfffffe18
   1b8fc:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1b900:	str	r3, [sp, #12]
   1b904:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1b908:	sub	ip, fp, #496	; 0x1f0
   1b90c:	str	r3, [sp]
   1b910:	str	r1, [sp, #8]
   1b914:	str	r2, [sp, #4]
   1b918:	str	ip, [sp, #16]
   1b91c:	mvn	r3, #0
   1b920:	mov	r2, #1
   1b924:	mov	r1, r5
   1b928:	bl	118f0 <__snprintf_chk@plt>
   1b92c:	b	1b670 <__assert_fail@plt+0x9d68>
   1b930:	ldr	r2, [sl, #40]	; 0x28
   1b934:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1b938:	cmp	r8, #1
   1b93c:	add	r3, r3, r2, lsl #4
   1b940:	add	r0, r9, r7
   1b944:	ldrb	r3, [r3, #8]
   1b948:	bne	1b644 <__assert_fail@plt+0x9d3c>
   1b94c:	b	1b8a4 <__assert_fail@plt+0x9f9c>
   1b950:	ldr	r2, [sl, #40]	; 0x28
   1b954:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1b958:	cmp	r8, #1
   1b95c:	add	r3, r3, r2, lsl #4
   1b960:	add	r0, r9, r7
   1b964:	ldrsb	r3, [r3, #8]
   1b968:	bne	1b644 <__assert_fail@plt+0x9d3c>
   1b96c:	b	1b8a4 <__assert_fail@plt+0x9f9c>
   1b970:	blt	1b9c4 <__assert_fail@plt+0xa0bc>
   1b974:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1b978:	lsl	r6, r6, #1
   1b97c:	cmp	r6, r2
   1b980:	bcs	1b354 <__assert_fail@plt+0x9a4c>
   1b984:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1b988:	mov	r1, #0
   1b98c:	cmn	r2, #1
   1b990:	movne	r2, #0
   1b994:	moveq	r2, #1
   1b998:	cmp	r1, r1
   1b99c:	movne	r2, #255	; 0xff
   1b9a0:	cmp	r2, r1
   1b9a4:	bne	1b514 <__assert_fail@plt+0x9c0c>
   1b9a8:	ldr	r6, [fp, #-524]	; 0xfffffdf4
   1b9ac:	b	1b354 <__assert_fail@plt+0x9a4c>
   1b9b0:	ldr	r2, [r1, #8]
   1b9b4:	mov	r4, r7
   1b9b8:	str	r7, [r2]
   1b9bc:	b	1b4e4 <__assert_fail@plt+0x9bdc>
   1b9c0:	bge	1bbec <__assert_fail@plt+0xa2e4>
   1b9c4:	mov	r9, r3
   1b9c8:	bl	11764 <__errno_location@plt>
   1b9cc:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1b9d0:	cmp	r9, r3
   1b9d4:	cmpne	r9, #0
   1b9d8:	str	r0, [fp, #-508]	; 0xfffffe04
   1b9dc:	beq	1b534 <__assert_fail@plt+0x9c2c>
   1b9e0:	mov	r0, r9
   1b9e4:	bl	11548 <free@plt>
   1b9e8:	b	1b534 <__assert_fail@plt+0x9c2c>
   1b9ec:	ldr	r2, [r1, #8]
   1b9f0:	mov	r1, #0
   1b9f4:	mov	r4, r7
   1b9f8:	str	r7, [r2]
   1b9fc:	str	r1, [r2, #4]
   1ba00:	b	1b4e4 <__assert_fail@plt+0x9bdc>
   1ba04:	ldr	r2, [r1, #8]
   1ba08:	mov	r4, r7
   1ba0c:	strh	r7, [r2]
   1ba10:	b	1b4e4 <__assert_fail@plt+0x9bdc>
   1ba14:	ldr	r2, [r1, #8]
   1ba18:	mov	r4, r7
   1ba1c:	strb	r7, [r2]
   1ba20:	b	1b4e4 <__assert_fail@plt+0x9bdc>
   1ba24:	cmn	r6, #1
   1ba28:	beq	1b3d4 <__assert_fail@plt+0x9acc>
   1ba2c:	b	1b524 <__assert_fail@plt+0x9c1c>
   1ba30:	cmn	r3, #1
   1ba34:	beq	1b524 <__assert_fail@plt+0x9c1c>
   1ba38:	mov	r6, r3
   1ba3c:	b	1b6f4 <__assert_fail@plt+0x9dec>
   1ba40:	mov	r1, r6
   1ba44:	mov	r0, r9
   1ba48:	bl	1159c <realloc@plt>
   1ba4c:	cmp	r0, #0
   1ba50:	beq	1b524 <__assert_fail@plt+0x9c1c>
   1ba54:	sub	r3, r6, r7
   1ba58:	mov	r9, r0
   1ba5c:	str	r3, [fp, #-512]	; 0xfffffe00
   1ba60:	b	1b3d4 <__assert_fail@plt+0x9acc>
   1ba64:	mov	r9, r3
   1ba68:	sub	r3, r6, r7
   1ba6c:	str	r3, [fp, #-512]	; 0xfffffe00
   1ba70:	b	1b3d4 <__assert_fail@plt+0x9acc>
   1ba74:	mov	r8, #0
   1ba78:	b	1b2f4 <__assert_fail@plt+0x99ec>
   1ba7c:	mov	r0, r3
   1ba80:	mov	r1, r6
   1ba84:	str	r3, [fp, #-508]	; 0xfffffe04
   1ba88:	bl	1159c <realloc@plt>
   1ba8c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1ba90:	subs	r9, r0, #0
   1ba94:	bne	1b3ac <__assert_fail@plt+0x9aa4>
   1ba98:	b	1b9c4 <__assert_fail@plt+0xa0bc>
   1ba9c:	cmn	r6, #1
   1baa0:	bne	1b514 <__assert_fail@plt+0x9c0c>
   1baa4:	mov	r4, r6
   1baa8:	b	1b4dc <__assert_fail@plt+0x9bd4>
   1baac:	cmn	r6, #1
   1bab0:	bne	1b514 <__assert_fail@plt+0x9c0c>
   1bab4:	mov	r9, r3
   1bab8:	b	1b3ac <__assert_fail@plt+0x9aa4>
   1babc:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1bac0:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1bac4:	strd	r2, [sp, #16]
   1bac8:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1bacc:	sub	lr, fp, #496	; 0x1f0
   1bad0:	str	r3, [sp]
   1bad4:	stmib	sp, {r1, ip}
   1bad8:	str	lr, [sp, #24]
   1badc:	mvn	r3, #0
   1bae0:	mov	r2, #1
   1bae4:	mov	r1, r5
   1bae8:	bl	118f0 <__snprintf_chk@plt>
   1baec:	b	1b670 <__assert_fail@plt+0x9d68>
   1baf0:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1baf4:	strd	r2, [sp, #8]
   1baf8:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1bafc:	sub	ip, fp, #496	; 0x1f0
   1bb00:	str	r3, [sp]
   1bb04:	str	r1, [sp, #4]
   1bb08:	str	ip, [sp, #16]
   1bb0c:	mvn	r3, #0
   1bb10:	mov	r2, r8
   1bb14:	mov	r1, r5
   1bb18:	bl	118f0 <__snprintf_chk@plt>
   1bb1c:	b	1b670 <__assert_fail@plt+0x9d68>
   1bb20:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1bb24:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1bb28:	strd	r2, [sp, #16]
   1bb2c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1bb30:	sub	lr, fp, #496	; 0x1f0
   1bb34:	str	r3, [sp]
   1bb38:	stmib	sp, {r1, ip}
   1bb3c:	str	lr, [sp, #24]
   1bb40:	mvn	r3, #0
   1bb44:	mov	r2, #1
   1bb48:	mov	r1, r5
   1bb4c:	bl	118f0 <__snprintf_chk@plt>
   1bb50:	b	1b670 <__assert_fail@plt+0x9d68>
   1bb54:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1bb58:	strd	r2, [sp, #8]
   1bb5c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1bb60:	sub	ip, fp, #496	; 0x1f0
   1bb64:	str	r3, [sp]
   1bb68:	str	r1, [sp, #4]
   1bb6c:	str	ip, [sp, #16]
   1bb70:	mvn	r3, #0
   1bb74:	mov	r2, r8
   1bb78:	mov	r1, r5
   1bb7c:	bl	118f0 <__snprintf_chk@plt>
   1bb80:	b	1b670 <__assert_fail@plt+0x9d68>
   1bb84:	mov	r7, r6
   1bb88:	b	1b138 <__assert_fail@plt+0x9830>
   1bb8c:	mov	r0, r3
   1bb90:	mov	r1, r6
   1bb94:	str	r3, [fp, #-508]	; 0xfffffe04
   1bb98:	bl	1159c <realloc@plt>
   1bb9c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1bba0:	cmp	r0, #0
   1bba4:	beq	1bd7c <__assert_fail@plt+0xa474>
   1bba8:	mov	r3, r0
   1bbac:	b	1b4dc <__assert_fail@plt+0x9bd4>
   1bbb0:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1bbb4:	sub	r3, fp, #348	; 0x15c
   1bbb8:	cmp	r0, r3
   1bbbc:	beq	1bbc4 <__assert_fail@plt+0xa2bc>
   1bbc0:	bl	11548 <free@plt>
   1bbc4:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1bbc8:	sub	r3, fp, #476	; 0x1dc
   1bbcc:	cmp	r0, r3
   1bbd0:	beq	1bbd8 <__assert_fail@plt+0xa2d0>
   1bbd4:	bl	11548 <free@plt>
   1bbd8:	bl	11764 <__errno_location@plt>
   1bbdc:	mov	r3, #22
   1bbe0:	mov	r5, #0
   1bbe4:	str	r3, [r0]
   1bbe8:	b	1b580 <__assert_fail@plt+0x9c78>
   1bbec:	lsl	r6, r6, #1
   1bbf0:	cmp	r6, r2
   1bbf4:	bcs	1b480 <__assert_fail@plt+0x9b78>
   1bbf8:	cmn	r2, #1
   1bbfc:	beq	1b514 <__assert_fail@plt+0x9c0c>
   1bc00:	mov	r6, r2
   1bc04:	b	1b480 <__assert_fail@plt+0x9b78>
   1bc08:	add	r4, r7, r3
   1bc0c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1bc10:	ldr	r2, [fp, #-540]	; 0xfffffde4
   1bc14:	str	r2, [r3]
   1bc18:	mov	r3, r9
   1bc1c:	b	1b4e4 <__assert_fail@plt+0x9bdc>
   1bc20:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1bc24:	cmp	r9, r3
   1bc28:	cmpne	r9, #0
   1bc2c:	bne	1bc8c <__assert_fail@plt+0xa384>
   1bc30:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1bc34:	cmp	r3, #0
   1bc38:	beq	1bc44 <__assert_fail@plt+0xa33c>
   1bc3c:	mov	r0, r3
   1bc40:	bl	11548 <free@plt>
   1bc44:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1bc48:	sub	r3, fp, #348	; 0x15c
   1bc4c:	cmp	r0, r3
   1bc50:	beq	1bc58 <__assert_fail@plt+0xa350>
   1bc54:	bl	11548 <free@plt>
   1bc58:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1bc5c:	sub	r3, fp, #476	; 0x1dc
   1bc60:	cmp	r0, r3
   1bc64:	beq	1bc6c <__assert_fail@plt+0xa364>
   1bc68:	bl	11548 <free@plt>
   1bc6c:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1bc70:	mov	r3, #75	; 0x4b
   1bc74:	mov	r5, #0
   1bc78:	str	r3, [r2]
   1bc7c:	b	1b580 <__assert_fail@plt+0x9c78>
   1bc80:	mov	r0, r9
   1bc84:	bl	11548 <free@plt>
   1bc88:	b	1b7f0 <__assert_fail@plt+0x9ee8>
   1bc8c:	mov	r0, r9
   1bc90:	bl	11548 <free@plt>
   1bc94:	b	1bc30 <__assert_fail@plt+0xa328>
   1bc98:	mov	r5, r3
   1bc9c:	mov	r3, #1
   1bca0:	adds	r4, r7, r3
   1bca4:	mov	r8, r7
   1bca8:	bcs	1bde8 <__assert_fail@plt+0xa4e0>
   1bcac:	cmp	r6, r4
   1bcb0:	bcs	1bd1c <__assert_fail@plt+0xa414>
   1bcb4:	cmp	r6, #0
   1bcb8:	bne	1bdc4 <__assert_fail@plt+0xa4bc>
   1bcbc:	cmp	r4, #12
   1bcc0:	movls	r6, #12
   1bcc4:	bhi	1bdd4 <__assert_fail@plt+0xa4cc>
   1bcc8:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1bccc:	cmp	r5, r3
   1bcd0:	cmpne	r5, #0
   1bcd4:	sub	r7, r5, r3
   1bcd8:	clz	r7, r7
   1bcdc:	lsr	r7, r7, #5
   1bce0:	bne	1bda8 <__assert_fail@plt+0xa4a0>
   1bce4:	mov	r0, r6
   1bce8:	bl	11698 <malloc@plt>
   1bcec:	subs	r3, r0, #0
   1bcf0:	beq	1b518 <__assert_fail@plt+0x9c10>
   1bcf4:	cmp	r8, #0
   1bcf8:	movne	r2, r7
   1bcfc:	moveq	r2, #0
   1bd00:	cmp	r2, #0
   1bd04:	moveq	r5, r3
   1bd08:	beq	1bd1c <__assert_fail@plt+0xa414>
   1bd0c:	mov	r1, r5
   1bd10:	mov	r2, r8
   1bd14:	mov	r5, r3
   1bd18:	bl	11560 <memcpy@plt>
   1bd1c:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1bd20:	cmp	r5, r3
   1bd24:	cmpne	r6, r4
   1bd28:	mov	r3, #0
   1bd2c:	strb	r3, [r5, r8]
   1bd30:	bhi	1bd90 <__assert_fail@plt+0xa488>
   1bd34:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1bd38:	cmp	r3, #0
   1bd3c:	beq	1bd48 <__assert_fail@plt+0xa440>
   1bd40:	mov	r0, r3
   1bd44:	bl	11548 <free@plt>
   1bd48:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1bd4c:	sub	r3, fp, #348	; 0x15c
   1bd50:	cmp	r0, r3
   1bd54:	beq	1bd5c <__assert_fail@plt+0xa454>
   1bd58:	bl	11548 <free@plt>
   1bd5c:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1bd60:	sub	r3, fp, #476	; 0x1dc
   1bd64:	cmp	r0, r3
   1bd68:	beq	1bd70 <__assert_fail@plt+0xa468>
   1bd6c:	bl	11548 <free@plt>
   1bd70:	ldr	r3, [fp, #-532]	; 0xfffffdec
   1bd74:	str	r8, [r3]
   1bd78:	b	1b580 <__assert_fail@plt+0x9c78>
   1bd7c:	mov	r5, r3
   1bd80:	bl	11764 <__errno_location@plt>
   1bd84:	mov	r9, r5
   1bd88:	str	r0, [fp, #-508]	; 0xfffffe04
   1bd8c:	b	1b9e0 <__assert_fail@plt+0xa0d8>
   1bd90:	mov	r0, r5
   1bd94:	mov	r1, r4
   1bd98:	bl	1159c <realloc@plt>
   1bd9c:	cmp	r0, #0
   1bda0:	movne	r5, r0
   1bda4:	b	1bd34 <__assert_fail@plt+0xa42c>
   1bda8:	mov	r1, r6
   1bdac:	mov	r0, r5
   1bdb0:	bl	1159c <realloc@plt>
   1bdb4:	cmp	r0, #0
   1bdb8:	beq	1bd80 <__assert_fail@plt+0xa478>
   1bdbc:	mov	r5, r0
   1bdc0:	b	1bd1c <__assert_fail@plt+0xa414>
   1bdc4:	blt	1b518 <__assert_fail@plt+0x9c10>
   1bdc8:	lsl	r6, r6, #1
   1bdcc:	cmp	r6, r4
   1bdd0:	bcs	1bcc8 <__assert_fail@plt+0xa3c0>
   1bdd4:	cmn	r4, #1
   1bdd8:	movne	r6, r4
   1bddc:	bne	1bcc8 <__assert_fail@plt+0xa3c0>
   1bde0:	b	1b518 <__assert_fail@plt+0x9c10>
   1bde4:	bl	11590 <__stack_chk_fail@plt>
   1bde8:	cmn	r6, #1
   1bdec:	beq	1bd1c <__assert_fail@plt+0xa414>
   1bdf0:	b	1b518 <__assert_fail@plt+0x9c10>
   1bdf4:	bl	118c0 <abort@plt>
   1bdf8:	andeq	pc, r2, r0, lsl #30
   1bdfc:	ldr	r3, [r1]
   1be00:	ldr	r2, [r1, #4]
   1be04:	cmp	r3, #0
   1be08:	beq	1bf18 <__assert_fail@plt+0xa610>
   1be0c:	push	{r4, r5, r6, lr}
   1be10:	add	r2, r2, #8
   1be14:	ldr	r6, [pc, #268]	; 1bf28 <__assert_fail@plt+0xa620>
   1be18:	ldr	lr, [pc, #268]	; 1bf2c <__assert_fail@plt+0xa624>
   1be1c:	mov	ip, #0
   1be20:	ldr	r3, [r2, #-8]
   1be24:	sub	r3, r3, #1
   1be28:	cmp	r3, #21
   1be2c:	ldrls	pc, [pc, r3, lsl #2]
   1be30:	b	1bf20 <__assert_fail@plt+0xa618>
   1be34:	ldrdeq	fp, [r1], -r0
   1be38:	ldrdeq	fp, [r1], -r0
   1be3c:	andeq	fp, r1, r4, asr #29
   1be40:	andeq	fp, r1, r4, asr #29
   1be44:	andeq	fp, r1, ip, lsl #29
   1be48:	andeq	fp, r1, ip, lsl #29
   1be4c:	andeq	fp, r1, ip, lsl #29
   1be50:	andeq	fp, r1, ip, lsl #29
   1be54:			; <UNDEFINED> instruction: 0x0001beb0
   1be58:			; <UNDEFINED> instruction: 0x0001beb0
   1be5c:	ldrdeq	fp, [r1], -ip
   1be60:	ldrdeq	fp, [r1], -ip
   1be64:	andeq	fp, r1, ip, lsl #29
   1be68:	andeq	fp, r1, ip, lsl #29
   1be6c:	strdeq	fp, [r1], -r0
   1be70:	andeq	fp, r1, r4, lsl #30
   1be74:	andeq	fp, r1, ip, lsl #29
   1be78:	andeq	fp, r1, ip, lsl #29
   1be7c:	andeq	fp, r1, ip, lsl #29
   1be80:	andeq	fp, r1, ip, lsl #29
   1be84:	andeq	fp, r1, ip, lsl #29
   1be88:	andeq	fp, r1, ip, lsl #29
   1be8c:	ldr	r3, [r0], #4
   1be90:	str	r3, [r2]
   1be94:	ldr	r3, [r1]
   1be98:	add	ip, ip, #1
   1be9c:	cmp	r3, ip
   1bea0:	add	r2, r2, #16
   1bea4:	bhi	1be20 <__assert_fail@plt+0xa518>
   1bea8:	mov	r0, #0
   1beac:	pop	{r4, r5, r6, pc}
   1beb0:	add	r0, r0, #7
   1beb4:	bic	r0, r0, #7
   1beb8:	ldrd	r4, [r0], #8
   1bebc:	strd	r4, [r2]
   1bec0:	b	1be94 <__assert_fail@plt+0xa58c>
   1bec4:	ldr	r3, [r0], #4
   1bec8:	strh	r3, [r2]
   1becc:	b	1be94 <__assert_fail@plt+0xa58c>
   1bed0:	ldr	r3, [r0], #4
   1bed4:	strb	r3, [r2]
   1bed8:	b	1be94 <__assert_fail@plt+0xa58c>
   1bedc:	add	r0, r0, #7
   1bee0:	bic	r0, r0, #7
   1bee4:	ldrd	r4, [r0], #8
   1bee8:	strd	r4, [r2]
   1beec:	b	1be94 <__assert_fail@plt+0xa58c>
   1bef0:	ldr	r3, [r0], #4
   1bef4:	cmp	r3, #0
   1bef8:	streq	lr, [r2]
   1befc:	bne	1be90 <__assert_fail@plt+0xa588>
   1bf00:	b	1be94 <__assert_fail@plt+0xa58c>
   1bf04:	ldr	r3, [r0], #4
   1bf08:	cmp	r3, #0
   1bf0c:	streq	r6, [r2]
   1bf10:	bne	1be90 <__assert_fail@plt+0xa588>
   1bf14:	b	1be94 <__assert_fail@plt+0xa58c>
   1bf18:	mov	r0, #0
   1bf1c:	bx	lr
   1bf20:	mvn	r0, #0
   1bf24:	pop	{r4, r5, r6, pc}
   1bf28:	andeq	pc, r1, r4, lsr r1	; <UNPREDICTABLE>
   1bf2c:	andeq	pc, r1, r0, asr r1	; <UNPREDICTABLE>
   1bf30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf34:	mov	sl, r2
   1bf38:	sub	sp, sp, #44	; 0x2c
   1bf3c:	mov	fp, r1
   1bf40:	mov	r3, r1
   1bf44:	mov	r1, sl
   1bf48:	mov	r2, #0
   1bf4c:	mov	ip, #7
   1bf50:	str	r2, [r3], #16
   1bf54:	str	fp, [sp, #4]
   1bf58:	str	r3, [fp, #4]
   1bf5c:	mov	r4, r2
   1bf60:	str	r2, [r1], #8
   1bf64:	str	ip, [sp, #8]
   1bf68:	mov	r7, r0
   1bf6c:	str	r3, [sp, #36]	; 0x24
   1bf70:	str	r2, [sp, #28]
   1bf74:	str	r1, [sp, #12]
   1bf78:	str	r2, [sp, #16]
   1bf7c:	str	r1, [sl, #4]
   1bf80:	str	r2, [sp, #32]
   1bf84:	mov	r9, r2
   1bf88:	str	ip, [sp, #24]
   1bf8c:	mov	fp, sl
   1bf90:	b	1bfa0 <__assert_fail@plt+0xa698>
   1bf94:	cmp	r0, #37	; 0x25
   1bf98:	mov	r5, r7
   1bf9c:	beq	1bfe0 <__assert_fail@plt+0xa6d8>
   1bfa0:	mov	r2, r7
   1bfa4:	ldrb	r0, [r7], #1
   1bfa8:	cmp	r0, #0
   1bfac:	bne	1bf94 <__assert_fail@plt+0xa68c>
   1bfb0:	add	ip, r4, r4, lsl #2
   1bfb4:	ldr	fp, [sp, #4]
   1bfb8:	add	r4, r4, ip, lsl #1
   1bfbc:	mov	r1, r0
   1bfc0:	str	r2, [r3, r4, lsl #2]
   1bfc4:	ldr	r3, [sp, #16]
   1bfc8:	str	r3, [fp, #8]
   1bfcc:	ldr	r3, [sp, #28]
   1bfd0:	str	r3, [fp, #12]
   1bfd4:	mov	r0, r1
   1bfd8:	add	sp, sp, #44	; 0x2c
   1bfdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfe0:	add	r1, r4, r4, lsl #2
   1bfe4:	mvn	r8, #0
   1bfe8:	add	r4, r4, r1, lsl #1
   1bfec:	add	r6, r3, r4, lsl #2
   1bff0:	str	r2, [r3, r4, lsl #2]
   1bff4:	str	r9, [r6, #8]
   1bff8:	str	r9, [r6, #12]
   1bffc:	str	r9, [r6, #16]
   1c000:	str	r9, [r6, #24]
   1c004:	str	r9, [r6, #28]
   1c008:	str	r8, [r6, #20]
   1c00c:	str	r8, [r6, #32]
   1c010:	str	r8, [r6, #40]	; 0x28
   1c014:	ldrb	r4, [r7]
   1c018:	sub	r0, r4, #48	; 0x30
   1c01c:	uxtb	r3, r0
   1c020:	cmp	r3, #9
   1c024:	bhi	1c070 <__assert_fail@plt+0xa768>
   1c028:	b	1c4e8 <__assert_fail@plt+0xabe0>
   1c02c:	cmp	r4, #45	; 0x2d
   1c030:	beq	1c08c <__assert_fail@plt+0xa784>
   1c034:	cmp	r4, #43	; 0x2b
   1c038:	beq	1c09c <__assert_fail@plt+0xa794>
   1c03c:	cmp	r4, #32
   1c040:	beq	1c0ac <__assert_fail@plt+0xa7a4>
   1c044:	cmp	r4, #35	; 0x23
   1c048:	beq	1c0bc <__assert_fail@plt+0xa7b4>
   1c04c:	cmp	r4, #48	; 0x30
   1c050:	beq	1c0cc <__assert_fail@plt+0xa7c4>
   1c054:	cmp	r4, #73	; 0x49
   1c058:	bne	1c0dc <__assert_fail@plt+0xa7d4>
   1c05c:	ldr	r3, [r6, #8]
   1c060:	orr	r3, r3, #64	; 0x40
   1c064:	str	r3, [r6, #8]
   1c068:	ldrb	r4, [r7]
   1c06c:	mov	r5, r7
   1c070:	cmp	r4, #39	; 0x27
   1c074:	add	r7, r5, #1
   1c078:	bne	1c02c <__assert_fail@plt+0xa724>
   1c07c:	ldr	r3, [r6, #8]
   1c080:	orr	r3, r3, #1
   1c084:	str	r3, [r6, #8]
   1c088:	b	1c068 <__assert_fail@plt+0xa760>
   1c08c:	ldr	r3, [r6, #8]
   1c090:	orr	r3, r3, #2
   1c094:	str	r3, [r6, #8]
   1c098:	b	1c068 <__assert_fail@plt+0xa760>
   1c09c:	ldr	r3, [r6, #8]
   1c0a0:	orr	r3, r3, #4
   1c0a4:	str	r3, [r6, #8]
   1c0a8:	b	1c068 <__assert_fail@plt+0xa760>
   1c0ac:	ldr	r3, [r6, #8]
   1c0b0:	orr	r3, r3, #8
   1c0b4:	str	r3, [r6, #8]
   1c0b8:	b	1c068 <__assert_fail@plt+0xa760>
   1c0bc:	ldr	r3, [r6, #8]
   1c0c0:	orr	r3, r3, #16
   1c0c4:	str	r3, [r6, #8]
   1c0c8:	b	1c068 <__assert_fail@plt+0xa760>
   1c0cc:	ldr	r3, [r6, #8]
   1c0d0:	orr	r3, r3, #32
   1c0d4:	str	r3, [r6, #8]
   1c0d8:	b	1c068 <__assert_fail@plt+0xa760>
   1c0dc:	cmp	r4, #42	; 0x2a
   1c0e0:	beq	1c2b8 <__assert_fail@plt+0xa9b0>
   1c0e4:	sub	r3, r4, #48	; 0x30
   1c0e8:	cmp	r3, #9
   1c0ec:	bls	1c8d8 <__assert_fail@plt+0xafd0>
   1c0f0:	cmp	r4, #46	; 0x2e
   1c0f4:	beq	1c350 <__assert_fail@plt+0xaa48>
   1c0f8:	add	r5, r5, #1
   1c0fc:	mov	r3, #0
   1c100:	mov	r1, #1
   1c104:	b	1c10c <__assert_fail@plt+0xa804>
   1c108:	ldrb	r4, [r5], #1
   1c10c:	cmp	r4, #104	; 0x68
   1c110:	andeq	r2, r3, #1
   1c114:	mov	r7, r5
   1c118:	orreq	r3, r3, r1, lsl r2
   1c11c:	beq	1c108 <__assert_fail@plt+0xa800>
   1c120:	cmp	r4, #76	; 0x4c
   1c124:	orreq	r3, r3, #4
   1c128:	beq	1c108 <__assert_fail@plt+0xa800>
   1c12c:	cmp	r4, #108	; 0x6c
   1c130:	addeq	r3, r3, #8
   1c134:	beq	1c108 <__assert_fail@plt+0xa800>
   1c138:	cmp	r4, #106	; 0x6a
   1c13c:	addeq	r3, r3, #16
   1c140:	beq	1c108 <__assert_fail@plt+0xa800>
   1c144:	and	r2, r4, #223	; 0xdf
   1c148:	cmp	r2, #90	; 0x5a
   1c14c:	beq	1c108 <__assert_fail@plt+0xa800>
   1c150:	cmp	r4, #116	; 0x74
   1c154:	beq	1c108 <__assert_fail@plt+0xa800>
   1c158:	sub	r2, r4, #37	; 0x25
   1c15c:	cmp	r2, #83	; 0x53
   1c160:	ldrls	pc, [pc, r2, lsl #2]
   1c164:	b	1c558 <__assert_fail@plt+0xac50>
   1c168:	andeq	ip, r1, ip, asr #8
   1c16c:	andeq	ip, r1, r8, asr r5
   1c170:	andeq	ip, r1, r8, asr r5
   1c174:	andeq	ip, r1, r8, asr r5
   1c178:	andeq	ip, r1, r8, asr r5
   1c17c:	andeq	ip, r1, r8, asr r5
   1c180:	andeq	ip, r1, r8, asr r5
   1c184:	andeq	ip, r1, r8, asr r5
   1c188:	andeq	ip, r1, r8, asr r5
   1c18c:	andeq	ip, r1, r8, asr r5
   1c190:	andeq	ip, r1, r8, asr r5
   1c194:	andeq	ip, r1, r8, asr r5
   1c198:	andeq	ip, r1, r8, asr r5
   1c19c:	andeq	ip, r1, r8, asr r5
   1c1a0:	andeq	ip, r1, r8, asr r5
   1c1a4:	andeq	ip, r1, r8, asr r5
   1c1a8:	andeq	ip, r1, r8, asr r5
   1c1ac:	andeq	ip, r1, r8, asr r5
   1c1b0:	andeq	ip, r1, r8, asr r5
   1c1b4:	andeq	ip, r1, r8, asr r5
   1c1b8:	andeq	ip, r1, r8, asr r5
   1c1bc:	andeq	ip, r1, r8, asr r5
   1c1c0:	andeq	ip, r1, r8, asr r5
   1c1c4:	andeq	ip, r1, r8, asr r5
   1c1c8:	andeq	ip, r1, r8, asr r5
   1c1cc:	andeq	ip, r1, r8, asr r5
   1c1d0:	andeq	ip, r1, r8, asr r5
   1c1d4:	andeq	ip, r1, r8, asr r5
   1c1d8:	andeq	ip, r1, r0, lsr #13
   1c1dc:	andeq	ip, r1, r8, asr r5
   1c1e0:	andeq	ip, r1, ip, ror #7
   1c1e4:	andeq	ip, r1, r8, asr r5
   1c1e8:	andeq	ip, r1, r0, lsr #13
   1c1ec:	andeq	ip, r1, r0, lsr #13
   1c1f0:	andeq	ip, r1, r0, lsr #13
   1c1f4:	andeq	ip, r1, r8, asr r5
   1c1f8:	andeq	ip, r1, r8, asr r5
   1c1fc:	andeq	ip, r1, r8, asr r5
   1c200:	andeq	ip, r1, r8, asr r5
   1c204:	andeq	ip, r1, r8, asr r5
   1c208:	andeq	ip, r1, r8, asr r5
   1c20c:	andeq	ip, r1, r8, asr r5
   1c210:	andeq	ip, r1, r8, asr r5
   1c214:	andeq	ip, r1, r8, asr r5
   1c218:	andeq	ip, r1, r8, asr r5
   1c21c:	andeq	ip, r1, r8, asr r5
   1c220:	andeq	ip, r1, r4, ror #15
   1c224:	andeq	ip, r1, r8, asr r5
   1c228:	andeq	ip, r1, r8, asr r5
   1c22c:	andeq	ip, r1, r8, asr r5
   1c230:	andeq	ip, r1, r8, asr r5
   1c234:	andeq	ip, r1, r0, lsr #15
   1c238:	andeq	ip, r1, r8, asr r5
   1c23c:	andeq	ip, r1, r8, asr r5
   1c240:	andeq	ip, r1, r8, asr r5
   1c244:	andeq	ip, r1, r8, asr r5
   1c248:	andeq	ip, r1, r8, asr r5
   1c24c:	andeq	ip, r1, r8, asr r5
   1c250:	andeq	ip, r1, r8, asr r5
   1c254:	andeq	ip, r1, r8, asr r5
   1c258:	andeq	ip, r1, r0, lsr #13
   1c25c:	andeq	ip, r1, r8, asr r5
   1c260:	andeq	ip, r1, ip, lsl #15
   1c264:	andeq	ip, r1, r8, asr #14
   1c268:	andeq	ip, r1, r0, lsr #13
   1c26c:	andeq	ip, r1, r0, lsr #13
   1c270:	andeq	ip, r1, r0, lsr #13
   1c274:	andeq	ip, r1, r8, asr r5
   1c278:	andeq	ip, r1, r8, asr #14
   1c27c:	andeq	ip, r1, r8, asr r5
   1c280:	andeq	ip, r1, r8, asr r5
   1c284:	andeq	ip, r1, r8, asr r5
   1c288:	andeq	ip, r1, r8, asr r5
   1c28c:	andeq	ip, r1, r0, lsl #16
   1c290:	andeq	ip, r1, r0, lsr #15
   1c294:	strdeq	ip, [r1], -r4
   1c298:	andeq	ip, r1, r8, asr r5
   1c29c:	andeq	ip, r1, r8, asr r5
   1c2a0:	andeq	ip, r1, r4, lsr r7
   1c2a4:	andeq	ip, r1, r8, asr r5
   1c2a8:	andeq	ip, r1, r0, lsr #15
   1c2ac:	andeq	ip, r1, r8, asr r5
   1c2b0:	andeq	ip, r1, r8, asr r5
   1c2b4:	andeq	ip, r1, r0, lsr #15
   1c2b8:	str	r5, [r6, #12]
   1c2bc:	str	r7, [r6, #16]
   1c2c0:	ldrb	r3, [r5, #1]
   1c2c4:	ldr	r2, [sp, #16]
   1c2c8:	sub	r3, r3, #48	; 0x30
   1c2cc:	cmp	r2, #0
   1c2d0:	moveq	r2, #1
   1c2d4:	str	r2, [sp, #16]
   1c2d8:	uxtb	r2, r3
   1c2dc:	cmp	r2, #9
   1c2e0:	bls	1c6c4 <__assert_fail@plt+0xadbc>
   1c2e4:	ldr	r4, [r6, #20]
   1c2e8:	cmn	r4, #1
   1c2ec:	beq	1c680 <__assert_fail@plt+0xad78>
   1c2f0:	ldr	r3, [sp, #8]
   1c2f4:	ldr	sl, [fp, #4]
   1c2f8:	cmp	r3, r4
   1c2fc:	bls	1c5e8 <__assert_fail@plt+0xace0>
   1c300:	ldr	r2, [fp]
   1c304:	cmp	r2, r4
   1c308:	bhi	1c324 <__assert_fail@plt+0xaa1c>
   1c30c:	sub	r1, sl, #16
   1c310:	add	r2, r2, #1
   1c314:	cmp	r2, r4
   1c318:	str	r9, [r1, r2, lsl #4]
   1c31c:	bls	1c310 <__assert_fail@plt+0xaa08>
   1c320:	str	r2, [fp]
   1c324:	ldr	r3, [sl, r4, lsl #4]
   1c328:	cmp	r3, #0
   1c32c:	bne	1c934 <__assert_fail@plt+0xb02c>
   1c330:	mov	r3, r7
   1c334:	mov	r2, #5
   1c338:	str	r2, [sl, r4, lsl #4]
   1c33c:	ldrb	r4, [r3], #1
   1c340:	mov	r5, r7
   1c344:	cmp	r4, #46	; 0x2e
   1c348:	mov	r7, r3
   1c34c:	bne	1c0f8 <__assert_fail@plt+0xa7f0>
   1c350:	ldrb	r3, [r5, #1]
   1c354:	cmp	r3, #42	; 0x2a
   1c358:	bne	1c5a0 <__assert_fail@plt+0xac98>
   1c35c:	add	r7, r5, #2
   1c360:	str	r5, [r6, #24]
   1c364:	str	r7, [r6, #28]
   1c368:	ldrb	r1, [r5, #2]
   1c36c:	ldr	r3, [sp, #28]
   1c370:	sub	r1, r1, #48	; 0x30
   1c374:	cmp	r3, #2
   1c378:	movcc	r3, #2
   1c37c:	str	r3, [sp, #28]
   1c380:	uxtb	r3, r1
   1c384:	cmp	r3, #9
   1c388:	bls	1cab4 <__assert_fail@plt+0xb1ac>
   1c38c:	ldr	r4, [r6, #32]
   1c390:	cmn	r4, #1
   1c394:	beq	1ca94 <__assert_fail@plt+0xb18c>
   1c398:	ldr	r3, [sp, #8]
   1c39c:	ldr	sl, [fp, #4]
   1c3a0:	cmp	r3, r4
   1c3a4:	bls	1c9b8 <__assert_fail@plt+0xb0b0>
   1c3a8:	ldr	r2, [fp]
   1c3ac:	cmp	r2, r4
   1c3b0:	bhi	1c3cc <__assert_fail@plt+0xaac4>
   1c3b4:	sub	r1, sl, #16
   1c3b8:	add	r2, r2, #1
   1c3bc:	cmp	r2, r4
   1c3c0:	str	r9, [r1, r2, lsl #4]
   1c3c4:	bls	1c3b8 <__assert_fail@plt+0xaab0>
   1c3c8:	str	r2, [fp]
   1c3cc:	ldr	r3, [sl, r4, lsl #4]
   1c3d0:	cmp	r3, #0
   1c3d4:	bne	1ca18 <__assert_fail@plt+0xb110>
   1c3d8:	mov	r3, #5
   1c3dc:	str	r3, [sl, r4, lsl #4]
   1c3e0:	mov	r5, r7
   1c3e4:	ldrb	r4, [r7]
   1c3e8:	b	1c0f8 <__assert_fail@plt+0xa7f0>
   1c3ec:	mov	r4, #99	; 0x63
   1c3f0:	mov	r3, #14
   1c3f4:	str	r3, [sp, #20]
   1c3f8:	cmn	r8, #1
   1c3fc:	strne	r8, [r6, #40]	; 0x28
   1c400:	beq	1c8b8 <__assert_fail@plt+0xafb0>
   1c404:	ldr	r3, [sp, #8]
   1c408:	ldr	sl, [fp, #4]
   1c40c:	cmp	r3, r8
   1c410:	bls	1c85c <__assert_fail@plt+0xaf54>
   1c414:	ldr	r3, [fp]
   1c418:	cmp	r3, r8
   1c41c:	bhi	1c438 <__assert_fail@plt+0xab30>
   1c420:	sub	r1, sl, #16
   1c424:	add	r3, r3, #1
   1c428:	cmp	r3, r8
   1c42c:	str	r9, [r1, r3, lsl #4]
   1c430:	bls	1c424 <__assert_fail@plt+0xab1c>
   1c434:	str	r3, [fp]
   1c438:	ldr	r3, [sl, r8, lsl #4]
   1c43c:	cmp	r3, #0
   1c440:	bne	1c844 <__assert_fail@plt+0xaf3c>
   1c444:	ldr	r3, [sp, #20]
   1c448:	str	r3, [sl, r8, lsl #4]
   1c44c:	ldr	r3, [sp, #4]
   1c450:	strb	r4, [r6, #36]	; 0x24
   1c454:	ldr	r2, [sp, #24]
   1c458:	ldr	r4, [r3]
   1c45c:	str	r5, [r6, #4]
   1c460:	add	r4, r4, #1
   1c464:	cmp	r2, r4
   1c468:	str	r4, [r3]
   1c46c:	ldrhi	r3, [r3, #4]
   1c470:	bhi	1bfa0 <__assert_fail@plt+0xa698>
   1c474:	ldr	r3, [sp, #24]
   1c478:	cmp	r3, #0
   1c47c:	blt	1cb90 <__assert_fail@plt+0xb288>
   1c480:	ldr	r3, [sp, #24]
   1c484:	ldr	r2, [pc, #1896]	; 1cbf4 <__assert_fail@plt+0xb2ec>
   1c488:	lsl	r5, r3, #1
   1c48c:	cmp	r5, r2
   1c490:	bhi	1cb90 <__assert_fail@plt+0xb288>
   1c494:	ldr	r2, [sp, #4]
   1c498:	add	r1, r3, r3, lsl #2
   1c49c:	ldr	r6, [r2, #4]
   1c4a0:	add	r1, r3, r1, lsl #1
   1c4a4:	ldr	r3, [sp, #36]	; 0x24
   1c4a8:	lsl	r1, r1, #3
   1c4ac:	cmp	r3, r6
   1c4b0:	beq	1c648 <__assert_fail@plt+0xad40>
   1c4b4:	mov	r0, r6
   1c4b8:	bl	1159c <realloc@plt>
   1c4bc:	subs	r3, r0, #0
   1c4c0:	beq	1cb90 <__assert_fail@plt+0xb288>
   1c4c4:	ldr	r2, [sp, #4]
   1c4c8:	ldm	r2, {r4, r6}
   1c4cc:	ldr	r2, [sp, #36]	; 0x24
   1c4d0:	cmp	r2, r6
   1c4d4:	beq	1c658 <__assert_fail@plt+0xad50>
   1c4d8:	ldr	r2, [sp, #4]
   1c4dc:	str	r5, [sp, #24]
   1c4e0:	str	r3, [r2, #4]
   1c4e4:	b	1bfa0 <__assert_fail@plt+0xa698>
   1c4e8:	mov	r2, r7
   1c4ec:	ldrb	r3, [r2, #1]!
   1c4f0:	sub	r1, r3, #48	; 0x30
   1c4f4:	cmp	r1, #9
   1c4f8:	bls	1c4ec <__assert_fail@plt+0xabe4>
   1c4fc:	cmp	r3, #36	; 0x24
   1c500:	mvnne	r8, #0
   1c504:	bne	1c070 <__assert_fail@plt+0xa768>
   1c508:	mov	r2, #0
   1c50c:	b	1c518 <__assert_fail@plt+0xac10>
   1c510:	cmp	ip, #9
   1c514:	bhi	1cb24 <__assert_fail@plt+0xb21c>
   1c518:	ldr	r3, [pc, #1752]	; 1cbf8 <__assert_fail@plt+0xb2f0>
   1c51c:	mov	r1, r5
   1c520:	cmp	r2, r3
   1c524:	addls	r2, r2, r2, lsl #2
   1c528:	mvnhi	r3, #0
   1c52c:	lslls	r3, r2, #1
   1c530:	ldrb	ip, [r5, #1]!
   1c534:	adds	r3, r0, r3
   1c538:	mov	r2, r3
   1c53c:	sub	r0, ip, #48	; 0x30
   1c540:	uxtb	ip, r0
   1c544:	bcc	1c510 <__assert_fail@plt+0xac08>
   1c548:	cmp	ip, #9
   1c54c:	mvn	r3, #0
   1c550:	mov	r1, r5
   1c554:	bls	1c530 <__assert_fail@plt+0xac28>
   1c558:	mov	sl, fp
   1c55c:	ldr	fp, [sp, #4]
   1c560:	ldr	r3, [sl, #4]
   1c564:	ldr	r2, [sp, #12]
   1c568:	cmp	r2, r3
   1c56c:	beq	1c578 <__assert_fail@plt+0xac70>
   1c570:	mov	r0, r3
   1c574:	bl	11548 <free@plt>
   1c578:	ldr	r0, [fp, #4]
   1c57c:	ldr	r3, [sp, #36]	; 0x24
   1c580:	cmp	r3, r0
   1c584:	beq	1c58c <__assert_fail@plt+0xac84>
   1c588:	bl	11548 <free@plt>
   1c58c:	bl	11764 <__errno_location@plt>
   1c590:	mov	r3, #22
   1c594:	mvn	r1, #0
   1c598:	str	r3, [r0]
   1c59c:	b	1bfd4 <__assert_fail@plt+0xa6cc>
   1c5a0:	str	r5, [r6, #24]
   1c5a4:	ldrb	r3, [r5, #1]
   1c5a8:	sub	r3, r3, #48	; 0x30
   1c5ac:	cmp	r3, #9
   1c5b0:	bhi	1cb6c <__assert_fail@plt+0xb264>
   1c5b4:	ldrb	r3, [r7, #1]!
   1c5b8:	sub	r3, r3, #48	; 0x30
   1c5bc:	cmp	r3, #9
   1c5c0:	bls	1c5b4 <__assert_fail@plt+0xacac>
   1c5c4:	sub	r3, r7, r5
   1c5c8:	mov	r5, r7
   1c5cc:	ldr	r2, [sp, #28]
   1c5d0:	str	r7, [r6, #28]
   1c5d4:	cmp	r2, r3
   1c5d8:	movcs	r3, r2
   1c5dc:	ldrb	r4, [r7]
   1c5e0:	str	r3, [sp, #28]
   1c5e4:	b	1c0f8 <__assert_fail@plt+0xa7f0>
   1c5e8:	ldr	r3, [sp, #8]
   1c5ec:	lsl	r3, r3, #1
   1c5f0:	cmp	r3, r4
   1c5f4:	str	r3, [sp, #8]
   1c5f8:	addls	r3, r4, #1
   1c5fc:	strls	r3, [sp, #8]
   1c600:	ldr	r3, [sp, #8]
   1c604:	cmn	r3, #-268435455	; 0xf0000001
   1c608:	bhi	1cbdc <__assert_fail@plt+0xb2d4>
   1c60c:	ldr	r2, [sp, #12]
   1c610:	lsl	r1, r3, #4
   1c614:	cmp	r2, sl
   1c618:	beq	1c974 <__assert_fail@plt+0xb06c>
   1c61c:	mov	r0, sl
   1c620:	bl	1159c <realloc@plt>
   1c624:	ldr	r3, [fp, #4]
   1c628:	subs	sl, r0, #0
   1c62c:	beq	1cbe0 <__assert_fail@plt+0xb2d8>
   1c630:	ldr	r2, [sp, #12]
   1c634:	cmp	r2, r3
   1c638:	ldr	r2, [fp]
   1c63c:	beq	1cbe8 <__assert_fail@plt+0xb2e0>
   1c640:	str	sl, [fp, #4]
   1c644:	b	1c304 <__assert_fail@plt+0xa9fc>
   1c648:	mov	r0, r1
   1c64c:	bl	11698 <malloc@plt>
   1c650:	subs	r3, r0, #0
   1c654:	beq	1ca70 <__assert_fail@plt+0xb168>
   1c658:	add	r2, r4, r4, lsl #2
   1c65c:	mov	r0, r3
   1c660:	add	r2, r4, r2, lsl #1
   1c664:	mov	r1, r6
   1c668:	lsl	r2, r2, #2
   1c66c:	bl	11560 <memcpy@plt>
   1c670:	ldr	r2, [sp, #4]
   1c674:	ldr	r4, [r2]
   1c678:	mov	r3, r0
   1c67c:	b	1c4d8 <__assert_fail@plt+0xabd0>
   1c680:	ldr	r3, [sp, #32]
   1c684:	cmn	r3, #1
   1c688:	str	r3, [r6, #20]
   1c68c:	add	r3, r3, #1
   1c690:	beq	1c558 <__assert_fail@plt+0xac50>
   1c694:	ldr	r4, [sp, #32]
   1c698:	str	r3, [sp, #32]
   1c69c:	b	1c2f0 <__assert_fail@plt+0xa9e8>
   1c6a0:	cmp	r3, #15
   1c6a4:	movgt	r3, #12
   1c6a8:	strgt	r3, [sp, #20]
   1c6ac:	bgt	1c3f8 <__assert_fail@plt+0xaaf0>
   1c6b0:	tst	r3, #4
   1c6b4:	movne	r3, #12
   1c6b8:	moveq	r3, #11
   1c6bc:	str	r3, [sp, #20]
   1c6c0:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c6c4:	mov	r1, r7
   1c6c8:	ldrb	r2, [r1, #1]!
   1c6cc:	sub	r0, r2, #48	; 0x30
   1c6d0:	cmp	r0, #9
   1c6d4:	bls	1c6c8 <__assert_fail@plt+0xadc0>
   1c6d8:	cmp	r2, #36	; 0x24
   1c6dc:	bne	1c2e4 <__assert_fail@plt+0xa9dc>
   1c6e0:	mov	r1, #0
   1c6e4:	b	1c6f0 <__assert_fail@plt+0xade8>
   1c6e8:	cmp	ip, #9
   1c6ec:	bhi	1cbac <__assert_fail@plt+0xb2a4>
   1c6f0:	ldr	r2, [pc, #1280]	; 1cbf8 <__assert_fail@plt+0xb2f0>
   1c6f4:	mov	r0, r7
   1c6f8:	cmp	r1, r2
   1c6fc:	addls	r1, r1, r1, lsl #2
   1c700:	mvnhi	r2, #0
   1c704:	lslls	r2, r1, #1
   1c708:	ldrb	ip, [r7, #1]!
   1c70c:	adds	r2, r3, r2
   1c710:	mov	r1, r2
   1c714:	sub	r3, ip, #48	; 0x30
   1c718:	uxtb	ip, r3
   1c71c:	bcc	1c6e8 <__assert_fail@plt+0xade0>
   1c720:	cmp	ip, #9
   1c724:	mvn	r2, #0
   1c728:	mov	r0, r7
   1c72c:	bls	1c708 <__assert_fail@plt+0xae00>
   1c730:	b	1c558 <__assert_fail@plt+0xac50>
   1c734:	cmp	r3, #7
   1c738:	movgt	r3, #16
   1c73c:	movle	r3, #15
   1c740:	str	r3, [sp, #20]
   1c744:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c748:	cmp	r3, #15
   1c74c:	bgt	1ca44 <__assert_fail@plt+0xb13c>
   1c750:	tst	r3, #4
   1c754:	bne	1ca44 <__assert_fail@plt+0xb13c>
   1c758:	cmp	r3, #7
   1c75c:	movgt	r3, #7
   1c760:	strgt	r3, [sp, #20]
   1c764:	bgt	1c3f8 <__assert_fail@plt+0xaaf0>
   1c768:	tst	r3, #2
   1c76c:	movne	r3, #1
   1c770:	strne	r3, [sp, #20]
   1c774:	bne	1c3f8 <__assert_fail@plt+0xaaf0>
   1c778:	tst	r3, #1
   1c77c:	movne	r3, #3
   1c780:	moveq	r3, #5
   1c784:	str	r3, [sp, #20]
   1c788:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c78c:	cmp	r3, #7
   1c790:	movgt	r3, #14
   1c794:	movle	r3, #13
   1c798:	str	r3, [sp, #20]
   1c79c:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c7a0:	cmp	r3, #15
   1c7a4:	bgt	1ca38 <__assert_fail@plt+0xb130>
   1c7a8:	tst	r3, #4
   1c7ac:	bne	1ca38 <__assert_fail@plt+0xb130>
   1c7b0:	cmp	r3, #7
   1c7b4:	movgt	r3, #8
   1c7b8:	strgt	r3, [sp, #20]
   1c7bc:	bgt	1c3f8 <__assert_fail@plt+0xaaf0>
   1c7c0:	tst	r3, #2
   1c7c4:	movne	r3, #2
   1c7c8:	strne	r3, [sp, #20]
   1c7cc:	bne	1c3f8 <__assert_fail@plt+0xaaf0>
   1c7d0:	tst	r3, #1
   1c7d4:	movne	r3, #4
   1c7d8:	moveq	r3, #6
   1c7dc:	str	r3, [sp, #20]
   1c7e0:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c7e4:	mov	r3, #16
   1c7e8:	str	r3, [sp, #20]
   1c7ec:	mov	r4, #115	; 0x73
   1c7f0:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c7f4:	mov	r3, #17
   1c7f8:	str	r3, [sp, #20]
   1c7fc:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c800:	cmp	r3, #15
   1c804:	bgt	1ca2c <__assert_fail@plt+0xb124>
   1c808:	tst	r3, #4
   1c80c:	bne	1ca2c <__assert_fail@plt+0xb124>
   1c810:	cmp	r3, #7
   1c814:	movgt	r3, #21
   1c818:	strgt	r3, [sp, #20]
   1c81c:	bgt	1c3f8 <__assert_fail@plt+0xaaf0>
   1c820:	tst	r3, #2
   1c824:	movne	r3, #18
   1c828:	strne	r3, [sp, #20]
   1c82c:	bne	1c3f8 <__assert_fail@plt+0xaaf0>
   1c830:	tst	r3, #1
   1c834:	movne	r3, #19
   1c838:	moveq	r3, #20
   1c83c:	str	r3, [sp, #20]
   1c840:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1c844:	ldr	r2, [sp, #20]
   1c848:	cmp	r3, r2
   1c84c:	beq	1c44c <__assert_fail@plt+0xab44>
   1c850:	mov	r3, sl
   1c854:	ldr	fp, [sp, #4]
   1c858:	b	1c564 <__assert_fail@plt+0xac5c>
   1c85c:	ldr	r3, [sp, #8]
   1c860:	lsl	r3, r3, #1
   1c864:	cmp	r3, r8
   1c868:	str	r3, [sp, #8]
   1c86c:	addls	r3, r8, #1
   1c870:	strls	r3, [sp, #8]
   1c874:	ldr	r3, [sp, #8]
   1c878:	cmn	r3, #-268435455	; 0xf0000001
   1c87c:	bhi	1cbdc <__assert_fail@plt+0xb2d4>
   1c880:	ldr	r2, [sp, #12]
   1c884:	lsl	r1, r3, #4
   1c888:	cmp	r2, sl
   1c88c:	beq	1c948 <__assert_fail@plt+0xb040>
   1c890:	mov	r0, sl
   1c894:	bl	1159c <realloc@plt>
   1c898:	subs	sl, r0, #0
   1c89c:	beq	1cb90 <__assert_fail@plt+0xb288>
   1c8a0:	ldr	r3, [fp, #4]
   1c8a4:	ldr	r2, [sp, #12]
   1c8a8:	cmp	r2, r3
   1c8ac:	beq	1cbd0 <__assert_fail@plt+0xb2c8>
   1c8b0:	str	sl, [fp, #4]
   1c8b4:	b	1c414 <__assert_fail@plt+0xab0c>
   1c8b8:	ldr	r3, [sp, #32]
   1c8bc:	cmn	r3, #1
   1c8c0:	str	r3, [r6, #40]	; 0x28
   1c8c4:	add	r3, r3, #1
   1c8c8:	beq	1c558 <__assert_fail@plt+0xac50>
   1c8cc:	ldr	r8, [sp, #32]
   1c8d0:	str	r3, [sp, #32]
   1c8d4:	b	1c404 <__assert_fail@plt+0xaafc>
   1c8d8:	str	r5, [r6, #12]
   1c8dc:	ldrb	r3, [r5]
   1c8e0:	sub	r3, r3, #48	; 0x30
   1c8e4:	cmp	r3, #9
   1c8e8:	bhi	1c928 <__assert_fail@plt+0xb020>
   1c8ec:	mov	r7, r5
   1c8f0:	b	1c8f8 <__assert_fail@plt+0xaff0>
   1c8f4:	mov	r7, r2
   1c8f8:	ldrb	r3, [r7, #1]
   1c8fc:	add	r2, r7, #1
   1c900:	sub	r3, r3, #48	; 0x30
   1c904:	cmp	r3, #9
   1c908:	bls	1c8f4 <__assert_fail@plt+0xafec>
   1c90c:	ldr	r3, [sp, #16]
   1c910:	sub	r5, r2, r5
   1c914:	cmp	r3, r5
   1c918:	movcc	r3, r5
   1c91c:	add	r7, r7, #2
   1c920:	mov	r5, r2
   1c924:	str	r3, [sp, #16]
   1c928:	str	r5, [r6, #16]
   1c92c:	ldrb	r4, [r5]
   1c930:	b	1c0f0 <__assert_fail@plt+0xa7e8>
   1c934:	cmp	r3, #5
   1c938:	bne	1c850 <__assert_fail@plt+0xaf48>
   1c93c:	mov	r5, r7
   1c940:	ldrb	r4, [r7], #1
   1c944:	b	1c0f0 <__assert_fail@plt+0xa7e8>
   1c948:	mov	r0, r1
   1c94c:	bl	11698 <malloc@plt>
   1c950:	subs	r3, r0, #0
   1c954:	beq	1c984 <__assert_fail@plt+0xb07c>
   1c958:	ldr	r2, [fp]
   1c95c:	mov	r1, sl
   1c960:	mov	r0, r3
   1c964:	lsl	r2, r2, #4
   1c968:	bl	11560 <memcpy@plt>
   1c96c:	mov	sl, r0
   1c970:	b	1c8b0 <__assert_fail@plt+0xafa8>
   1c974:	mov	r0, r1
   1c978:	bl	11698 <malloc@plt>
   1c97c:	subs	r3, r0, #0
   1c980:	bne	1ca50 <__assert_fail@plt+0xb148>
   1c984:	ldr	fp, [sp, #4]
   1c988:	ldr	r0, [fp, #4]
   1c98c:	ldr	r3, [sp, #36]	; 0x24
   1c990:	cmp	r3, r0
   1c994:	beq	1c99c <__assert_fail@plt+0xb094>
   1c998:	bl	11548 <free@plt>
   1c99c:	bl	11764 <__errno_location@plt>
   1c9a0:	mov	r3, #12
   1c9a4:	mvn	r1, #0
   1c9a8:	str	r3, [r0]
   1c9ac:	mov	r0, r1
   1c9b0:	add	sp, sp, #44	; 0x2c
   1c9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9b8:	ldr	r3, [sp, #8]
   1c9bc:	lsl	r3, r3, #1
   1c9c0:	cmp	r3, r4
   1c9c4:	str	r3, [sp, #8]
   1c9c8:	addls	r3, r4, #1
   1c9cc:	strls	r3, [sp, #8]
   1c9d0:	ldr	r3, [sp, #8]
   1c9d4:	cmn	r3, #-268435455	; 0xf0000001
   1c9d8:	bhi	1cbdc <__assert_fail@plt+0xb2d4>
   1c9dc:	ldr	r2, [sp, #12]
   1c9e0:	lsl	r1, r3, #4
   1c9e4:	cmp	r2, sl
   1c9e8:	beq	1cb3c <__assert_fail@plt+0xb234>
   1c9ec:	mov	r0, sl
   1c9f0:	bl	1159c <realloc@plt>
   1c9f4:	ldr	r3, [fp, #4]
   1c9f8:	subs	sl, r0, #0
   1c9fc:	beq	1cbe0 <__assert_fail@plt+0xb2d8>
   1ca00:	ldr	r2, [sp, #12]
   1ca04:	cmp	r2, r3
   1ca08:	ldr	r2, [fp]
   1ca0c:	beq	1cbc4 <__assert_fail@plt+0xb2bc>
   1ca10:	str	sl, [fp, #4]
   1ca14:	b	1c3ac <__assert_fail@plt+0xaaa4>
   1ca18:	cmp	r3, #5
   1ca1c:	bne	1c850 <__assert_fail@plt+0xaf48>
   1ca20:	ldrb	r4, [r7]
   1ca24:	mov	r5, r7
   1ca28:	b	1c0f8 <__assert_fail@plt+0xa7f0>
   1ca2c:	mov	r3, #22
   1ca30:	str	r3, [sp, #20]
   1ca34:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1ca38:	mov	r3, #10
   1ca3c:	str	r3, [sp, #20]
   1ca40:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1ca44:	mov	r3, #9
   1ca48:	str	r3, [sp, #20]
   1ca4c:	b	1c3f8 <__assert_fail@plt+0xaaf0>
   1ca50:	ldr	r2, [fp]
   1ca54:	lsl	r2, r2, #4
   1ca58:	mov	r1, sl
   1ca5c:	mov	r0, r3
   1ca60:	bl	11560 <memcpy@plt>
   1ca64:	ldr	r2, [fp]
   1ca68:	mov	sl, r0
   1ca6c:	b	1c640 <__assert_fail@plt+0xad38>
   1ca70:	mov	sl, fp
   1ca74:	ldr	r2, [sp, #12]
   1ca78:	ldr	r3, [sl, #4]
   1ca7c:	ldr	fp, [sp, #4]
   1ca80:	cmp	r2, r3
   1ca84:	beq	1c99c <__assert_fail@plt+0xb094>
   1ca88:	mov	r0, r3
   1ca8c:	bl	11548 <free@plt>
   1ca90:	b	1c988 <__assert_fail@plt+0xb080>
   1ca94:	ldr	r3, [sp, #32]
   1ca98:	cmn	r3, #1
   1ca9c:	str	r3, [r6, #32]
   1caa0:	add	r3, r3, #1
   1caa4:	beq	1c558 <__assert_fail@plt+0xac50>
   1caa8:	ldr	r4, [sp, #32]
   1caac:	str	r3, [sp, #32]
   1cab0:	b	1c398 <__assert_fail@plt+0xaa90>
   1cab4:	mov	r2, r7
   1cab8:	ldrb	r3, [r2, #1]!
   1cabc:	sub	r0, r3, #48	; 0x30
   1cac0:	cmp	r0, #9
   1cac4:	bls	1cab8 <__assert_fail@plt+0xb1b0>
   1cac8:	cmp	r3, #36	; 0x24
   1cacc:	bne	1c38c <__assert_fail@plt+0xaa84>
   1cad0:	mov	r2, #0
   1cad4:	b	1cae0 <__assert_fail@plt+0xb1d8>
   1cad8:	cmp	ip, #9
   1cadc:	bhi	1cb78 <__assert_fail@plt+0xb270>
   1cae0:	ldr	r3, [pc, #272]	; 1cbf8 <__assert_fail@plt+0xb2f0>
   1cae4:	mov	r0, r7
   1cae8:	cmp	r2, r3
   1caec:	addls	r2, r2, r2, lsl #2
   1caf0:	mvnhi	r3, #0
   1caf4:	lslls	r3, r2, #1
   1caf8:	ldrb	ip, [r7, #1]!
   1cafc:	adds	r3, r1, r3
   1cb00:	mov	r2, r3
   1cb04:	sub	r1, ip, #48	; 0x30
   1cb08:	uxtb	ip, r1
   1cb0c:	bcc	1cad8 <__assert_fail@plt+0xb1d0>
   1cb10:	cmp	ip, #9
   1cb14:	mvn	r3, #0
   1cb18:	mov	r0, r7
   1cb1c:	bls	1caf8 <__assert_fail@plt+0xb1f0>
   1cb20:	b	1c558 <__assert_fail@plt+0xac50>
   1cb24:	sub	r8, r3, #1
   1cb28:	cmn	r8, #3
   1cb2c:	bhi	1c558 <__assert_fail@plt+0xac50>
   1cb30:	add	r5, r1, #2
   1cb34:	ldrb	r4, [r1, #2]
   1cb38:	b	1c070 <__assert_fail@plt+0xa768>
   1cb3c:	mov	r0, r1
   1cb40:	bl	11698 <malloc@plt>
   1cb44:	subs	r3, r0, #0
   1cb48:	beq	1c984 <__assert_fail@plt+0xb07c>
   1cb4c:	ldr	r2, [fp]
   1cb50:	lsl	r2, r2, #4
   1cb54:	mov	r1, sl
   1cb58:	mov	r0, r3
   1cb5c:	bl	11560 <memcpy@plt>
   1cb60:	ldr	r2, [fp]
   1cb64:	mov	sl, r0
   1cb68:	b	1ca10 <__assert_fail@plt+0xb108>
   1cb6c:	mov	r5, r7
   1cb70:	mov	r3, #1
   1cb74:	b	1c5cc <__assert_fail@plt+0xacc4>
   1cb78:	sub	r4, r3, #1
   1cb7c:	cmn	r4, #3
   1cb80:	bhi	1c558 <__assert_fail@plt+0xac50>
   1cb84:	str	r4, [r6, #32]
   1cb88:	add	r7, r0, #2
   1cb8c:	b	1c398 <__assert_fail@plt+0xaa90>
   1cb90:	mov	sl, fp
   1cb94:	ldr	fp, [sp, #4]
   1cb98:	ldr	r3, [sl, #4]
   1cb9c:	ldr	r2, [sp, #12]
   1cba0:	cmp	r2, r3
   1cba4:	bne	1ca88 <__assert_fail@plt+0xb180>
   1cba8:	b	1c988 <__assert_fail@plt+0xb080>
   1cbac:	sub	r4, r2, #1
   1cbb0:	cmn	r4, #3
   1cbb4:	bhi	1c558 <__assert_fail@plt+0xac50>
   1cbb8:	str	r4, [r6, #20]
   1cbbc:	add	r7, r0, #2
   1cbc0:	b	1c2f0 <__assert_fail@plt+0xa9e8>
   1cbc4:	mov	r3, sl
   1cbc8:	ldr	sl, [sp, #12]
   1cbcc:	b	1cb50 <__assert_fail@plt+0xb248>
   1cbd0:	mov	r3, sl
   1cbd4:	mov	sl, r2
   1cbd8:	b	1c958 <__assert_fail@plt+0xb050>
   1cbdc:	mov	r3, sl
   1cbe0:	ldr	fp, [sp, #4]
   1cbe4:	b	1cb9c <__assert_fail@plt+0xb294>
   1cbe8:	mov	r3, sl
   1cbec:	ldr	sl, [sp, #12]
   1cbf0:	b	1ca54 <__assert_fail@plt+0xb14c>
   1cbf4:	ldrbeq	r7, [r1, #1117]	; 0x45d
   1cbf8:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1cbfc:	subs	r2, r1, #1
   1cc00:	bxeq	lr
   1cc04:	bcc	1cddc <__assert_fail@plt+0xb4d4>
   1cc08:	cmp	r0, r1
   1cc0c:	bls	1cdc0 <__assert_fail@plt+0xb4b8>
   1cc10:	tst	r1, r2
   1cc14:	beq	1cdcc <__assert_fail@plt+0xb4c4>
   1cc18:	clz	r3, r0
   1cc1c:	clz	r2, r1
   1cc20:	sub	r3, r2, r3
   1cc24:	rsbs	r3, r3, #31
   1cc28:	addne	r3, r3, r3, lsl #1
   1cc2c:	mov	r2, #0
   1cc30:	addne	pc, pc, r3, lsl #2
   1cc34:	nop			; (mov r0, r0)
   1cc38:	cmp	r0, r1, lsl #31
   1cc3c:	adc	r2, r2, r2
   1cc40:	subcs	r0, r0, r1, lsl #31
   1cc44:	cmp	r0, r1, lsl #30
   1cc48:	adc	r2, r2, r2
   1cc4c:	subcs	r0, r0, r1, lsl #30
   1cc50:	cmp	r0, r1, lsl #29
   1cc54:	adc	r2, r2, r2
   1cc58:	subcs	r0, r0, r1, lsl #29
   1cc5c:	cmp	r0, r1, lsl #28
   1cc60:	adc	r2, r2, r2
   1cc64:	subcs	r0, r0, r1, lsl #28
   1cc68:	cmp	r0, r1, lsl #27
   1cc6c:	adc	r2, r2, r2
   1cc70:	subcs	r0, r0, r1, lsl #27
   1cc74:	cmp	r0, r1, lsl #26
   1cc78:	adc	r2, r2, r2
   1cc7c:	subcs	r0, r0, r1, lsl #26
   1cc80:	cmp	r0, r1, lsl #25
   1cc84:	adc	r2, r2, r2
   1cc88:	subcs	r0, r0, r1, lsl #25
   1cc8c:	cmp	r0, r1, lsl #24
   1cc90:	adc	r2, r2, r2
   1cc94:	subcs	r0, r0, r1, lsl #24
   1cc98:	cmp	r0, r1, lsl #23
   1cc9c:	adc	r2, r2, r2
   1cca0:	subcs	r0, r0, r1, lsl #23
   1cca4:	cmp	r0, r1, lsl #22
   1cca8:	adc	r2, r2, r2
   1ccac:	subcs	r0, r0, r1, lsl #22
   1ccb0:	cmp	r0, r1, lsl #21
   1ccb4:	adc	r2, r2, r2
   1ccb8:	subcs	r0, r0, r1, lsl #21
   1ccbc:	cmp	r0, r1, lsl #20
   1ccc0:	adc	r2, r2, r2
   1ccc4:	subcs	r0, r0, r1, lsl #20
   1ccc8:	cmp	r0, r1, lsl #19
   1cccc:	adc	r2, r2, r2
   1ccd0:	subcs	r0, r0, r1, lsl #19
   1ccd4:	cmp	r0, r1, lsl #18
   1ccd8:	adc	r2, r2, r2
   1ccdc:	subcs	r0, r0, r1, lsl #18
   1cce0:	cmp	r0, r1, lsl #17
   1cce4:	adc	r2, r2, r2
   1cce8:	subcs	r0, r0, r1, lsl #17
   1ccec:	cmp	r0, r1, lsl #16
   1ccf0:	adc	r2, r2, r2
   1ccf4:	subcs	r0, r0, r1, lsl #16
   1ccf8:	cmp	r0, r1, lsl #15
   1ccfc:	adc	r2, r2, r2
   1cd00:	subcs	r0, r0, r1, lsl #15
   1cd04:	cmp	r0, r1, lsl #14
   1cd08:	adc	r2, r2, r2
   1cd0c:	subcs	r0, r0, r1, lsl #14
   1cd10:	cmp	r0, r1, lsl #13
   1cd14:	adc	r2, r2, r2
   1cd18:	subcs	r0, r0, r1, lsl #13
   1cd1c:	cmp	r0, r1, lsl #12
   1cd20:	adc	r2, r2, r2
   1cd24:	subcs	r0, r0, r1, lsl #12
   1cd28:	cmp	r0, r1, lsl #11
   1cd2c:	adc	r2, r2, r2
   1cd30:	subcs	r0, r0, r1, lsl #11
   1cd34:	cmp	r0, r1, lsl #10
   1cd38:	adc	r2, r2, r2
   1cd3c:	subcs	r0, r0, r1, lsl #10
   1cd40:	cmp	r0, r1, lsl #9
   1cd44:	adc	r2, r2, r2
   1cd48:	subcs	r0, r0, r1, lsl #9
   1cd4c:	cmp	r0, r1, lsl #8
   1cd50:	adc	r2, r2, r2
   1cd54:	subcs	r0, r0, r1, lsl #8
   1cd58:	cmp	r0, r1, lsl #7
   1cd5c:	adc	r2, r2, r2
   1cd60:	subcs	r0, r0, r1, lsl #7
   1cd64:	cmp	r0, r1, lsl #6
   1cd68:	adc	r2, r2, r2
   1cd6c:	subcs	r0, r0, r1, lsl #6
   1cd70:	cmp	r0, r1, lsl #5
   1cd74:	adc	r2, r2, r2
   1cd78:	subcs	r0, r0, r1, lsl #5
   1cd7c:	cmp	r0, r1, lsl #4
   1cd80:	adc	r2, r2, r2
   1cd84:	subcs	r0, r0, r1, lsl #4
   1cd88:	cmp	r0, r1, lsl #3
   1cd8c:	adc	r2, r2, r2
   1cd90:	subcs	r0, r0, r1, lsl #3
   1cd94:	cmp	r0, r1, lsl #2
   1cd98:	adc	r2, r2, r2
   1cd9c:	subcs	r0, r0, r1, lsl #2
   1cda0:	cmp	r0, r1, lsl #1
   1cda4:	adc	r2, r2, r2
   1cda8:	subcs	r0, r0, r1, lsl #1
   1cdac:	cmp	r0, r1
   1cdb0:	adc	r2, r2, r2
   1cdb4:	subcs	r0, r0, r1
   1cdb8:	mov	r0, r2
   1cdbc:	bx	lr
   1cdc0:	moveq	r0, #1
   1cdc4:	movne	r0, #0
   1cdc8:	bx	lr
   1cdcc:	clz	r2, r1
   1cdd0:	rsb	r2, r2, #31
   1cdd4:	lsr	r0, r0, r2
   1cdd8:	bx	lr
   1cddc:	cmp	r0, #0
   1cde0:	mvnne	r0, #0
   1cde4:	b	1d158 <__assert_fail@plt+0xb850>
   1cde8:	cmp	r1, #0
   1cdec:	beq	1cddc <__assert_fail@plt+0xb4d4>
   1cdf0:	push	{r0, r1, lr}
   1cdf4:	bl	1cbfc <__assert_fail@plt+0xb2f4>
   1cdf8:	pop	{r1, r2, lr}
   1cdfc:	mul	r3, r2, r0
   1ce00:	sub	r1, r1, r3
   1ce04:	bx	lr
   1ce08:	cmp	r1, #0
   1ce0c:	beq	1d018 <__assert_fail@plt+0xb710>
   1ce10:	eor	ip, r0, r1
   1ce14:	rsbmi	r1, r1, #0
   1ce18:	subs	r2, r1, #1
   1ce1c:	beq	1cfe4 <__assert_fail@plt+0xb6dc>
   1ce20:	movs	r3, r0
   1ce24:	rsbmi	r3, r0, #0
   1ce28:	cmp	r3, r1
   1ce2c:	bls	1cff0 <__assert_fail@plt+0xb6e8>
   1ce30:	tst	r1, r2
   1ce34:	beq	1d000 <__assert_fail@plt+0xb6f8>
   1ce38:	clz	r2, r3
   1ce3c:	clz	r0, r1
   1ce40:	sub	r2, r0, r2
   1ce44:	rsbs	r2, r2, #31
   1ce48:	addne	r2, r2, r2, lsl #1
   1ce4c:	mov	r0, #0
   1ce50:	addne	pc, pc, r2, lsl #2
   1ce54:	nop			; (mov r0, r0)
   1ce58:	cmp	r3, r1, lsl #31
   1ce5c:	adc	r0, r0, r0
   1ce60:	subcs	r3, r3, r1, lsl #31
   1ce64:	cmp	r3, r1, lsl #30
   1ce68:	adc	r0, r0, r0
   1ce6c:	subcs	r3, r3, r1, lsl #30
   1ce70:	cmp	r3, r1, lsl #29
   1ce74:	adc	r0, r0, r0
   1ce78:	subcs	r3, r3, r1, lsl #29
   1ce7c:	cmp	r3, r1, lsl #28
   1ce80:	adc	r0, r0, r0
   1ce84:	subcs	r3, r3, r1, lsl #28
   1ce88:	cmp	r3, r1, lsl #27
   1ce8c:	adc	r0, r0, r0
   1ce90:	subcs	r3, r3, r1, lsl #27
   1ce94:	cmp	r3, r1, lsl #26
   1ce98:	adc	r0, r0, r0
   1ce9c:	subcs	r3, r3, r1, lsl #26
   1cea0:	cmp	r3, r1, lsl #25
   1cea4:	adc	r0, r0, r0
   1cea8:	subcs	r3, r3, r1, lsl #25
   1ceac:	cmp	r3, r1, lsl #24
   1ceb0:	adc	r0, r0, r0
   1ceb4:	subcs	r3, r3, r1, lsl #24
   1ceb8:	cmp	r3, r1, lsl #23
   1cebc:	adc	r0, r0, r0
   1cec0:	subcs	r3, r3, r1, lsl #23
   1cec4:	cmp	r3, r1, lsl #22
   1cec8:	adc	r0, r0, r0
   1cecc:	subcs	r3, r3, r1, lsl #22
   1ced0:	cmp	r3, r1, lsl #21
   1ced4:	adc	r0, r0, r0
   1ced8:	subcs	r3, r3, r1, lsl #21
   1cedc:	cmp	r3, r1, lsl #20
   1cee0:	adc	r0, r0, r0
   1cee4:	subcs	r3, r3, r1, lsl #20
   1cee8:	cmp	r3, r1, lsl #19
   1ceec:	adc	r0, r0, r0
   1cef0:	subcs	r3, r3, r1, lsl #19
   1cef4:	cmp	r3, r1, lsl #18
   1cef8:	adc	r0, r0, r0
   1cefc:	subcs	r3, r3, r1, lsl #18
   1cf00:	cmp	r3, r1, lsl #17
   1cf04:	adc	r0, r0, r0
   1cf08:	subcs	r3, r3, r1, lsl #17
   1cf0c:	cmp	r3, r1, lsl #16
   1cf10:	adc	r0, r0, r0
   1cf14:	subcs	r3, r3, r1, lsl #16
   1cf18:	cmp	r3, r1, lsl #15
   1cf1c:	adc	r0, r0, r0
   1cf20:	subcs	r3, r3, r1, lsl #15
   1cf24:	cmp	r3, r1, lsl #14
   1cf28:	adc	r0, r0, r0
   1cf2c:	subcs	r3, r3, r1, lsl #14
   1cf30:	cmp	r3, r1, lsl #13
   1cf34:	adc	r0, r0, r0
   1cf38:	subcs	r3, r3, r1, lsl #13
   1cf3c:	cmp	r3, r1, lsl #12
   1cf40:	adc	r0, r0, r0
   1cf44:	subcs	r3, r3, r1, lsl #12
   1cf48:	cmp	r3, r1, lsl #11
   1cf4c:	adc	r0, r0, r0
   1cf50:	subcs	r3, r3, r1, lsl #11
   1cf54:	cmp	r3, r1, lsl #10
   1cf58:	adc	r0, r0, r0
   1cf5c:	subcs	r3, r3, r1, lsl #10
   1cf60:	cmp	r3, r1, lsl #9
   1cf64:	adc	r0, r0, r0
   1cf68:	subcs	r3, r3, r1, lsl #9
   1cf6c:	cmp	r3, r1, lsl #8
   1cf70:	adc	r0, r0, r0
   1cf74:	subcs	r3, r3, r1, lsl #8
   1cf78:	cmp	r3, r1, lsl #7
   1cf7c:	adc	r0, r0, r0
   1cf80:	subcs	r3, r3, r1, lsl #7
   1cf84:	cmp	r3, r1, lsl #6
   1cf88:	adc	r0, r0, r0
   1cf8c:	subcs	r3, r3, r1, lsl #6
   1cf90:	cmp	r3, r1, lsl #5
   1cf94:	adc	r0, r0, r0
   1cf98:	subcs	r3, r3, r1, lsl #5
   1cf9c:	cmp	r3, r1, lsl #4
   1cfa0:	adc	r0, r0, r0
   1cfa4:	subcs	r3, r3, r1, lsl #4
   1cfa8:	cmp	r3, r1, lsl #3
   1cfac:	adc	r0, r0, r0
   1cfb0:	subcs	r3, r3, r1, lsl #3
   1cfb4:	cmp	r3, r1, lsl #2
   1cfb8:	adc	r0, r0, r0
   1cfbc:	subcs	r3, r3, r1, lsl #2
   1cfc0:	cmp	r3, r1, lsl #1
   1cfc4:	adc	r0, r0, r0
   1cfc8:	subcs	r3, r3, r1, lsl #1
   1cfcc:	cmp	r3, r1
   1cfd0:	adc	r0, r0, r0
   1cfd4:	subcs	r3, r3, r1
   1cfd8:	cmp	ip, #0
   1cfdc:	rsbmi	r0, r0, #0
   1cfe0:	bx	lr
   1cfe4:	teq	ip, r0
   1cfe8:	rsbmi	r0, r0, #0
   1cfec:	bx	lr
   1cff0:	movcc	r0, #0
   1cff4:	asreq	r0, ip, #31
   1cff8:	orreq	r0, r0, #1
   1cffc:	bx	lr
   1d000:	clz	r2, r1
   1d004:	rsb	r2, r2, #31
   1d008:	cmp	ip, #0
   1d00c:	lsr	r0, r3, r2
   1d010:	rsbmi	r0, r0, #0
   1d014:	bx	lr
   1d018:	cmp	r0, #0
   1d01c:	mvngt	r0, #-2147483648	; 0x80000000
   1d020:	movlt	r0, #-2147483648	; 0x80000000
   1d024:	b	1d158 <__assert_fail@plt+0xb850>
   1d028:	cmp	r1, #0
   1d02c:	beq	1d018 <__assert_fail@plt+0xb710>
   1d030:	push	{r0, r1, lr}
   1d034:	bl	1ce10 <__assert_fail@plt+0xb508>
   1d038:	pop	{r1, r2, lr}
   1d03c:	mul	r3, r2, r0
   1d040:	sub	r1, r1, r3
   1d044:	bx	lr
   1d048:	cmp	r3, #0
   1d04c:	cmpeq	r2, #0
   1d050:	bne	1d074 <__assert_fail@plt+0xb76c>
   1d054:	cmp	r1, #0
   1d058:	movlt	r1, #-2147483648	; 0x80000000
   1d05c:	movlt	r0, #0
   1d060:	blt	1d070 <__assert_fail@plt+0xb768>
   1d064:	cmpeq	r0, #0
   1d068:	mvnne	r1, #-2147483648	; 0x80000000
   1d06c:	mvnne	r0, #0
   1d070:	b	1d158 <__assert_fail@plt+0xb850>
   1d074:	sub	sp, sp, #8
   1d078:	push	{sp, lr}
   1d07c:	cmp	r1, #0
   1d080:	blt	1d0a0 <__assert_fail@plt+0xb798>
   1d084:	cmp	r3, #0
   1d088:	blt	1d0d4 <__assert_fail@plt+0xb7cc>
   1d08c:	bl	1d168 <__assert_fail@plt+0xb860>
   1d090:	ldr	lr, [sp, #4]
   1d094:	add	sp, sp, #8
   1d098:	pop	{r2, r3}
   1d09c:	bx	lr
   1d0a0:	rsbs	r0, r0, #0
   1d0a4:	sbc	r1, r1, r1, lsl #1
   1d0a8:	cmp	r3, #0
   1d0ac:	blt	1d0f8 <__assert_fail@plt+0xb7f0>
   1d0b0:	bl	1d168 <__assert_fail@plt+0xb860>
   1d0b4:	ldr	lr, [sp, #4]
   1d0b8:	add	sp, sp, #8
   1d0bc:	pop	{r2, r3}
   1d0c0:	rsbs	r0, r0, #0
   1d0c4:	sbc	r1, r1, r1, lsl #1
   1d0c8:	rsbs	r2, r2, #0
   1d0cc:	sbc	r3, r3, r3, lsl #1
   1d0d0:	bx	lr
   1d0d4:	rsbs	r2, r2, #0
   1d0d8:	sbc	r3, r3, r3, lsl #1
   1d0dc:	bl	1d168 <__assert_fail@plt+0xb860>
   1d0e0:	ldr	lr, [sp, #4]
   1d0e4:	add	sp, sp, #8
   1d0e8:	pop	{r2, r3}
   1d0ec:	rsbs	r0, r0, #0
   1d0f0:	sbc	r1, r1, r1, lsl #1
   1d0f4:	bx	lr
   1d0f8:	rsbs	r2, r2, #0
   1d0fc:	sbc	r3, r3, r3, lsl #1
   1d100:	bl	1d168 <__assert_fail@plt+0xb860>
   1d104:	ldr	lr, [sp, #4]
   1d108:	add	sp, sp, #8
   1d10c:	pop	{r2, r3}
   1d110:	rsbs	r2, r2, #0
   1d114:	sbc	r3, r3, r3, lsl #1
   1d118:	bx	lr
   1d11c:	cmp	r3, #0
   1d120:	cmpeq	r2, #0
   1d124:	bne	1d13c <__assert_fail@plt+0xb834>
   1d128:	cmp	r1, #0
   1d12c:	cmpeq	r0, #0
   1d130:	mvnne	r1, #0
   1d134:	mvnne	r0, #0
   1d138:	b	1d158 <__assert_fail@plt+0xb850>
   1d13c:	sub	sp, sp, #8
   1d140:	push	{sp, lr}
   1d144:	bl	1d168 <__assert_fail@plt+0xb860>
   1d148:	ldr	lr, [sp, #4]
   1d14c:	add	sp, sp, #8
   1d150:	pop	{r2, r3}
   1d154:	bx	lr
   1d158:	push	{r1, lr}
   1d15c:	mov	r0, #8
   1d160:	bl	114dc <raise@plt>
   1d164:	pop	{r1, pc}
   1d168:	cmp	r1, r3
   1d16c:	cmpeq	r0, r2
   1d170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d174:	mov	r4, r0
   1d178:	movcc	r0, #0
   1d17c:	mov	r5, r1
   1d180:	ldr	lr, [sp, #36]	; 0x24
   1d184:	movcc	r1, r0
   1d188:	bcc	1d284 <__assert_fail@plt+0xb97c>
   1d18c:	cmp	r3, #0
   1d190:	clzeq	ip, r2
   1d194:	clzne	ip, r3
   1d198:	addeq	ip, ip, #32
   1d19c:	cmp	r5, #0
   1d1a0:	clzeq	r1, r4
   1d1a4:	addeq	r1, r1, #32
   1d1a8:	clzne	r1, r5
   1d1ac:	sub	ip, ip, r1
   1d1b0:	sub	sl, ip, #32
   1d1b4:	lsl	r9, r3, ip
   1d1b8:	rsb	fp, ip, #32
   1d1bc:	orr	r9, r9, r2, lsl sl
   1d1c0:	orr	r9, r9, r2, lsr fp
   1d1c4:	lsl	r8, r2, ip
   1d1c8:	cmp	r5, r9
   1d1cc:	cmpeq	r4, r8
   1d1d0:	movcc	r0, #0
   1d1d4:	movcc	r1, r0
   1d1d8:	bcc	1d1f4 <__assert_fail@plt+0xb8ec>
   1d1dc:	mov	r0, #1
   1d1e0:	subs	r4, r4, r8
   1d1e4:	lsl	r1, r0, sl
   1d1e8:	orr	r1, r1, r0, lsr fp
   1d1ec:	lsl	r0, r0, ip
   1d1f0:	sbc	r5, r5, r9
   1d1f4:	cmp	ip, #0
   1d1f8:	beq	1d284 <__assert_fail@plt+0xb97c>
   1d1fc:	lsr	r6, r8, #1
   1d200:	orr	r6, r6, r9, lsl #31
   1d204:	lsr	r7, r9, #1
   1d208:	mov	r2, ip
   1d20c:	b	1d230 <__assert_fail@plt+0xb928>
   1d210:	subs	r3, r4, r6
   1d214:	sbc	r8, r5, r7
   1d218:	adds	r3, r3, r3
   1d21c:	adc	r8, r8, r8
   1d220:	adds	r4, r3, #1
   1d224:	adc	r5, r8, #0
   1d228:	subs	r2, r2, #1
   1d22c:	beq	1d24c <__assert_fail@plt+0xb944>
   1d230:	cmp	r5, r7
   1d234:	cmpeq	r4, r6
   1d238:	bcs	1d210 <__assert_fail@plt+0xb908>
   1d23c:	adds	r4, r4, r4
   1d240:	adc	r5, r5, r5
   1d244:	subs	r2, r2, #1
   1d248:	bne	1d230 <__assert_fail@plt+0xb928>
   1d24c:	lsr	r3, r4, ip
   1d250:	orr	r3, r3, r5, lsl fp
   1d254:	lsr	r2, r5, ip
   1d258:	orr	r3, r3, r5, lsr sl
   1d25c:	adds	r0, r0, r4
   1d260:	mov	r4, r3
   1d264:	lsl	r3, r2, ip
   1d268:	orr	r3, r3, r4, lsl sl
   1d26c:	lsl	ip, r4, ip
   1d270:	orr	r3, r3, r4, lsr fp
   1d274:	adc	r1, r1, r5
   1d278:	subs	r0, r0, ip
   1d27c:	mov	r5, r2
   1d280:	sbc	r1, r1, r3
   1d284:	cmp	lr, #0
   1d288:	strdne	r4, [lr]
   1d28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d290:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d294:	mov	r7, r0
   1d298:	ldr	r6, [pc, #72]	; 1d2e8 <__assert_fail@plt+0xb9e0>
   1d29c:	ldr	r5, [pc, #72]	; 1d2ec <__assert_fail@plt+0xb9e4>
   1d2a0:	add	r6, pc, r6
   1d2a4:	add	r5, pc, r5
   1d2a8:	sub	r6, r6, r5
   1d2ac:	mov	r8, r1
   1d2b0:	mov	r9, r2
   1d2b4:	bl	11498 <calloc@plt-0x20>
   1d2b8:	asrs	r6, r6, #2
   1d2bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d2c0:	mov	r4, #0
   1d2c4:	add	r4, r4, #1
   1d2c8:	ldr	r3, [r5], #4
   1d2cc:	mov	r2, r9
   1d2d0:	mov	r1, r8
   1d2d4:	mov	r0, r7
   1d2d8:	blx	r3
   1d2dc:	cmp	r6, r4
   1d2e0:	bne	1d2c4 <__assert_fail@plt+0xb9bc>
   1d2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d2e8:	andeq	r2, r1, r4, asr ip
   1d2ec:	andeq	r2, r1, ip, asr #24
   1d2f0:	bx	lr
   1d2f4:	ldr	r3, [pc, #12]	; 1d308 <__assert_fail@plt+0xba00>
   1d2f8:	mov	r1, #0
   1d2fc:	add	r3, pc, r3
   1d300:	ldr	r2, [r3]
   1d304:	b	1177c <__cxa_atexit@plt>
   1d308:	andeq	r2, r1, r4, lsl #29

Disassembly of section .fini:

0001d30c <.fini>:
   1d30c:	push	{r3, lr}
   1d310:	pop	{r3, pc}
