
raspbian-preinstalled/factor:     file format elf32-littlearm


Disassembly of section .init:

00010e40 <.init>:
   10e40:	push	{r3, lr}
   10e44:	bl	11390 <__assert_fail@plt+0x26c>
   10e48:	pop	{r3, pc}

Disassembly of section .plt:

00010e4c <calloc@plt-0x14>:
   10e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e50:	ldr	lr, [pc, #4]	; 10e5c <calloc@plt-0x4>
   10e54:	add	lr, pc, lr
   10e58:	ldr	pc, [lr, #8]!
   10e5c:	andeq	r0, r2, r4, lsr #3

00010e60 <calloc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #32, 20	; 0x20000
   10e68:	ldr	pc, [ip, #420]!	; 0x1a4

00010e6c <fputs_unlocked@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #32, 20	; 0x20000
   10e74:	ldr	pc, [ip, #412]!	; 0x19c

00010e78 <raise@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #32, 20	; 0x20000
   10e80:	ldr	pc, [ip, #404]!	; 0x194

00010e84 <iconv_close@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #32, 20	; 0x20000
   10e8c:	ldr	pc, [ip, #396]!	; 0x18c

00010e90 <iconv@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #32, 20	; 0x20000
   10e98:	ldr	pc, [ip, #388]!	; 0x184

00010e9c <strcmp@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #32, 20	; 0x20000
   10ea4:	ldr	pc, [ip, #380]!	; 0x17c

00010ea8 <fflush@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #32, 20	; 0x20000
   10eb0:	ldr	pc, [ip, #372]!	; 0x174

00010eb4 <wcwidth@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #32, 20	; 0x20000
   10ebc:	ldr	pc, [ip, #364]!	; 0x16c

00010ec0 <memmove@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #32, 20	; 0x20000
   10ec8:	ldr	pc, [ip, #356]!	; 0x164

00010ecc <free@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #32, 20	; 0x20000
   10ed4:	ldr	pc, [ip, #348]!	; 0x15c

00010ed8 <_exit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #32, 20	; 0x20000
   10ee0:	ldr	pc, [ip, #340]!	; 0x154

00010ee4 <memcpy@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #32, 20	; 0x20000
   10eec:	ldr	pc, [ip, #332]!	; 0x14c

00010ef0 <mbsinit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #32, 20	; 0x20000
   10ef8:	ldr	pc, [ip, #324]!	; 0x144

00010efc <memcmp@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #32, 20	; 0x20000
   10f04:	ldr	pc, [ip, #316]!	; 0x13c

00010f08 <dcgettext@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #32, 20	; 0x20000
   10f10:	ldr	pc, [ip, #308]!	; 0x134

00010f14 <strdup@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #32, 20	; 0x20000
   10f1c:	ldr	pc, [ip, #300]!	; 0x12c

00010f20 <__stack_chk_fail@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #32, 20	; 0x20000
   10f28:	ldr	pc, [ip, #292]!	; 0x124

00010f2c <realloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #32, 20	; 0x20000
   10f34:	ldr	pc, [ip, #284]!	; 0x11c

00010f38 <textdomain@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #32, 20	; 0x20000
   10f40:	ldr	pc, [ip, #276]!	; 0x114

00010f44 <iswcntrl@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #32, 20	; 0x20000
   10f4c:	ldr	pc, [ip, #268]!	; 0x10c

00010f50 <iswprint@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #32, 20	; 0x20000
   10f58:	ldr	pc, [ip, #260]!	; 0x104

00010f5c <fwrite@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #32, 20	; 0x20000
   10f64:	ldr	pc, [ip, #252]!	; 0xfc

00010f68 <lseek64@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #32, 20	; 0x20000
   10f70:	ldr	pc, [ip, #244]!	; 0xf4

00010f74 <__ctype_get_mb_cur_max@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #32, 20	; 0x20000
   10f7c:	ldr	pc, [ip, #236]!	; 0xec

00010f80 <__fpending@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #32, 20	; 0x20000
   10f88:	ldr	pc, [ip, #228]!	; 0xe4

00010f8c <mbrtowc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #32, 20	; 0x20000
   10f94:	ldr	pc, [ip, #220]!	; 0xdc

00010f98 <error@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #32, 20	; 0x20000
   10fa0:	ldr	pc, [ip, #212]!	; 0xd4

00010fa4 <malloc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #32, 20	; 0x20000
   10fac:	ldr	pc, [ip, #204]!	; 0xcc

00010fb0 <iconv_open@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #32, 20	; 0x20000
   10fb8:	ldr	pc, [ip, #196]!	; 0xc4

00010fbc <__libc_start_main@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #32, 20	; 0x20000
   10fc4:	ldr	pc, [ip, #188]!	; 0xbc

00010fc8 <__freading@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #32, 20	; 0x20000
   10fd0:	ldr	pc, [ip, #180]!	; 0xb4

00010fd4 <__gmon_start__@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #32, 20	; 0x20000
   10fdc:	ldr	pc, [ip, #172]!	; 0xac

00010fe0 <getopt_long@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #32, 20	; 0x20000
   10fe8:	ldr	pc, [ip, #164]!	; 0xa4

00010fec <__ctype_b_loc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #32, 20	; 0x20000
   10ff4:	ldr	pc, [ip, #156]!	; 0x9c

00010ff8 <exit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #32, 20	; 0x20000
   11000:	ldr	pc, [ip, #148]!	; 0x94

00011004 <iswspace@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #32, 20	; 0x20000
   1100c:	ldr	pc, [ip, #140]!	; 0x8c

00011010 <strlen@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #32, 20	; 0x20000
   11018:	ldr	pc, [ip, #132]!	; 0x84

0001101c <strchr@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #32, 20	; 0x20000
   11024:	ldr	pc, [ip, #124]!	; 0x7c

00011028 <__errno_location@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #32, 20	; 0x20000
   11030:	ldr	pc, [ip, #116]!	; 0x74

00011034 <iswalnum@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #32, 20	; 0x20000
   1103c:	ldr	pc, [ip, #108]!	; 0x6c

00011040 <__sprintf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #32, 20	; 0x20000
   11048:	ldr	pc, [ip, #100]!	; 0x64

0001104c <__cxa_atexit@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #32, 20	; 0x20000
   11054:	ldr	pc, [ip, #92]!	; 0x5c

00011058 <memset@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #32, 20	; 0x20000
   11060:	ldr	pc, [ip, #84]!	; 0x54

00011064 <__printf_chk@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #32, 20	; 0x20000
   1106c:	ldr	pc, [ip, #76]!	; 0x4c

00011070 <write@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #32, 20	; 0x20000
   11078:	ldr	pc, [ip, #68]!	; 0x44

0001107c <fileno@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #32, 20	; 0x20000
   11084:	ldr	pc, [ip, #60]!	; 0x3c

00011088 <__fprintf_chk@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #32, 20	; 0x20000
   11090:	ldr	pc, [ip, #52]!	; 0x34

00011094 <memchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #32, 20	; 0x20000
   1109c:	ldr	pc, [ip, #44]!	; 0x2c

000110a0 <fclose@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #32, 20	; 0x20000
   110a8:	ldr	pc, [ip, #36]!	; 0x24

000110ac <strnlen@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #32, 20	; 0x20000
   110b4:	ldr	pc, [ip, #28]!

000110b8 <fseeko64@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #32, 20	; 0x20000
   110c0:	ldr	pc, [ip, #20]!

000110c4 <__uflow@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #32, 20	; 0x20000
   110cc:	ldr	pc, [ip, #12]!

000110d0 <setlocale@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #32, 20	; 0x20000
   110d8:	ldr	pc, [ip, #4]!

000110dc <strrchr@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #126976	; 0x1f000
   110e4:	ldr	pc, [ip, #4092]!	; 0xffc

000110e8 <nl_langinfo@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #126976	; 0x1f000
   110f0:	ldr	pc, [ip, #4084]!	; 0xff4

000110f4 <bindtextdomain@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #126976	; 0x1f000
   110fc:	ldr	pc, [ip, #4076]!	; 0xfec

00011100 <isatty@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #126976	; 0x1f000
   11108:	ldr	pc, [ip, #4068]!	; 0xfe4

0001110c <strncmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #126976	; 0x1f000
   11114:	ldr	pc, [ip, #4060]!	; 0xfdc

00011118 <abort@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #126976	; 0x1f000
   11120:	ldr	pc, [ip, #4052]!	; 0xfd4

00011124 <__assert_fail@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #126976	; 0x1f000
   1112c:	ldr	pc, [ip, #4044]!	; 0xfcc

Disassembly of section .text:

00011130 <.text>:
   11130:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11134:	sub	sp, sp, #32
   11138:	ldr	r9, [pc, #452]	; 11304 <__assert_fail@plt+0x1e0>
   1113c:	mov	r7, r0
   11140:	ldr	r0, [r1]
   11144:	ldr	r3, [r9]
   11148:	mov	r4, r1
   1114c:	str	r3, [sp, #28]
   11150:	ldr	r6, [pc, #432]	; 11308 <__assert_fail@plt+0x1e4>
   11154:	bl	16c3c <__assert_fail@plt+0x5b18>
   11158:	ldr	r1, [pc, #428]	; 1130c <__assert_fail@plt+0x1e8>
   1115c:	mov	r0, #6
   11160:	bl	110d0 <setlocale@plt>
   11164:	ldr	r1, [pc, #420]	; 11310 <__assert_fail@plt+0x1ec>
   11168:	ldr	r0, [pc, #420]	; 11314 <__assert_fail@plt+0x1f0>
   1116c:	bl	110f4 <bindtextdomain@plt>
   11170:	ldr	r0, [pc, #412]	; 11314 <__assert_fail@plt+0x1f0>
   11174:	bl	10f38 <textdomain@plt>
   11178:	ldr	r3, [r6]
   1117c:	cmp	r3, #0
   11180:	beq	11244 <__assert_fail@plt+0x120>
   11184:	ldr	r0, [pc, #396]	; 11318 <__assert_fail@plt+0x1f4>
   11188:	bl	1d1f4 <__assert_fail@plt+0xc0d0>
   1118c:	ldr	r0, [pc, #392]	; 1131c <__assert_fail@plt+0x1f8>
   11190:	bl	1d1f4 <__assert_fail@plt+0xc0d0>
   11194:	ldr	sl, [pc, #388]	; 11320 <__assert_fail@plt+0x1fc>
   11198:	ldr	r8, [pc, #364]	; 1130c <__assert_fail@plt+0x1e8>
   1119c:	mov	r5, #0
   111a0:	str	r5, [sp]
   111a4:	mov	r3, sl
   111a8:	mov	r2, r8
   111ac:	mov	r1, r4
   111b0:	mov	r0, r7
   111b4:	bl	10fe0 <getopt_long@plt>
   111b8:	cmn	r0, #1
   111bc:	beq	11258 <__assert_fail@plt+0x134>
   111c0:	cmn	r0, #2
   111c4:	beq	112f8 <__assert_fail@plt+0x1d4>
   111c8:	cmp	r0, #256	; 0x100
   111cc:	moveq	r3, #1
   111d0:	strbeq	r3, [r6, #8]
   111d4:	beq	111a0 <__assert_fail@plt+0x7c>
   111d8:	cmn	r0, #3
   111dc:	beq	111e8 <__assert_fail@plt+0xc4>
   111e0:	mov	r0, #1
   111e4:	bl	1678c <__assert_fail@plt+0x5668>
   111e8:	ldr	r2, [pc, #308]	; 11324 <__assert_fail@plt+0x200>
   111ec:	ldr	r3, [pc, #308]	; 11328 <__assert_fail@plt+0x204>
   111f0:	ldr	r1, [pc, #308]	; 1132c <__assert_fail@plt+0x208>
   111f4:	ldr	r0, [pc, #308]	; 11330 <__assert_fail@plt+0x20c>
   111f8:	ldr	r4, [r2]
   111fc:	ldr	r6, [r3]
   11200:	bl	17584 <__assert_fail@plt+0x6460>
   11204:	ldr	r1, [pc, #296]	; 11334 <__assert_fail@plt+0x210>
   11208:	mov	r7, r0
   1120c:	ldr	r0, [pc, #292]	; 11338 <__assert_fail@plt+0x214>
   11210:	bl	17584 <__assert_fail@plt+0x6460>
   11214:	ldr	r2, [pc, #288]	; 1133c <__assert_fail@plt+0x218>
   11218:	str	r7, [sp, #4]
   1121c:	str	r2, [sp]
   11220:	mov	r3, r6
   11224:	str	r5, [sp, #12]
   11228:	ldr	r2, [pc, #272]	; 11340 <__assert_fail@plt+0x21c>
   1122c:	ldr	r1, [pc, #272]	; 11344 <__assert_fail@plt+0x220>
   11230:	str	r0, [sp, #8]
   11234:	mov	r0, r4
   11238:	bl	1a7bc <__assert_fail@plt+0x9698>
   1123c:	mov	r0, #0
   11240:	bl	10ff8 <exit@plt>
   11244:	mov	r0, #1024	; 0x400
   11248:	bl	1a8c0 <__assert_fail@plt+0x979c>
   1124c:	str	r0, [r6]
   11250:	str	r0, [r6, #4]
   11254:	b	11184 <__assert_fail@plt+0x60>
   11258:	ldr	r3, [pc, #232]	; 11348 <__assert_fail@plt+0x224>
   1125c:	ldr	r6, [r3]
   11260:	cmp	r6, r7
   11264:	addlt	r6, r4, r6, lsl #2
   11268:	movlt	r5, #1
   1126c:	addlt	r4, r4, r7, lsl #2
   11270:	bge	112ac <__assert_fail@plt+0x188>
   11274:	ldr	r0, [r6], #4
   11278:	bl	16554 <__assert_fail@plt+0x5430>
   1127c:	cmp	r0, #0
   11280:	moveq	r5, #0
   11284:	cmp	r6, r4
   11288:	bne	11274 <__assert_fail@plt+0x150>
   1128c:	ldr	r2, [sp, #28]
   11290:	ldr	r3, [r9]
   11294:	eor	r0, r5, #1
   11298:	cmp	r2, r3
   1129c:	uxtb	r0, r0
   112a0:	bne	11300 <__assert_fail@plt+0x1dc>
   112a4:	add	sp, sp, #32
   112a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   112ac:	add	r0, sp, #20
   112b0:	bl	199f8 <__assert_fail@plt+0x88d4>
   112b4:	ldr	r6, [pc, #144]	; 1134c <__assert_fail@plt+0x228>
   112b8:	ldr	r4, [pc, #144]	; 11350 <__assert_fail@plt+0x22c>
   112bc:	mov	r5, #1
   112c0:	b	112d0 <__assert_fail@plt+0x1ac>
   112c4:	bl	16554 <__assert_fail@plt+0x5430>
   112c8:	and	r5, r5, r0
   112cc:	uxtb	r5, r5
   112d0:	add	r3, sp, #20
   112d4:	mov	r2, #3
   112d8:	mov	r1, r4
   112dc:	ldr	r0, [r6]
   112e0:	bl	19a08 <__assert_fail@plt+0x88e4>
   112e4:	cmn	r0, #1
   112e8:	ldr	r0, [sp, #24]
   112ec:	bne	112c4 <__assert_fail@plt+0x1a0>
   112f0:	bl	10ecc <free@plt>
   112f4:	b	1128c <__assert_fail@plt+0x168>
   112f8:	mov	r0, #0
   112fc:	bl	1678c <__assert_fail@plt+0x5668>
   11300:	bl	10f20 <__stack_chk_fail@plt>
   11304:	andeq	r0, r3, r8, lsl #30
   11308:	andeq	r1, r3, ip, ror r1
   1130c:	andeq	r0, r2, ip, lsl ip
   11310:	andeq	r0, r2, r4, ror r6
   11314:	andeq	r0, r2, r8, asr #11
   11318:	muleq	r1, r0, sl
   1131c:	andeq	r2, r1, r0, ror r2
   11320:	andeq	sp, r1, r8, ror r8
   11324:	andeq	r1, r3, r4, ror r1
   11328:	andeq	r1, r3, ip, lsl #2
   1132c:	andeq	r0, r2, r8, lsl #13
   11330:	muleq	r2, ip, r6
   11334:			; <UNDEFINED> instruction: 0x000206b0
   11338:	andeq	r0, r2, r0, asr #13
   1133c:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   11340:	andeq	r0, r2, r4, asr #11
   11344:	andeq	r0, r2, ip, lsr r4
   11348:	andeq	r1, r3, r0, ror #2
   1134c:	andeq	r1, r3, r0, ror r1
   11350:	ldrdeq	r0, [r2], -ip
   11354:	mov	fp, #0
   11358:	mov	lr, #0
   1135c:	pop	{r1}		; (ldr r1, [sp], #4)
   11360:	mov	r2, sp
   11364:	push	{r2}		; (str r2, [sp, #-4]!)
   11368:	push	{r0}		; (str r0, [sp, #-4]!)
   1136c:	ldr	ip, [pc, #16]	; 11384 <__assert_fail@plt+0x260>
   11370:	push	{ip}		; (str ip, [sp, #-4]!)
   11374:	ldr	r0, [pc, #12]	; 11388 <__assert_fail@plt+0x264>
   11378:	ldr	r3, [pc, #12]	; 1138c <__assert_fail@plt+0x268>
   1137c:	bl	10fbc <__libc_start_main@plt>
   11380:	bl	11118 <abort@plt>
   11384:	strdeq	sp, [r1], -r0
   11388:	andeq	r1, r1, r0, lsr r1
   1138c:	muleq	r1, r0, r1
   11390:	ldr	r3, [pc, #20]	; 113ac <__assert_fail@plt+0x288>
   11394:	ldr	r2, [pc, #20]	; 113b0 <__assert_fail@plt+0x28c>
   11398:	add	r3, pc, r3
   1139c:	ldr	r2, [r3, r2]
   113a0:	cmp	r2, #0
   113a4:	bxeq	lr
   113a8:	b	10fd4 <__gmon_start__@plt>
   113ac:	andeq	pc, r1, r0, ror #24
   113b0:	strdeq	r0, [r0], -ip
   113b4:	ldr	r0, [pc, #24]	; 113d4 <__assert_fail@plt+0x2b0>
   113b8:	ldr	r3, [pc, #24]	; 113d8 <__assert_fail@plt+0x2b4>
   113bc:	cmp	r3, r0
   113c0:	bxeq	lr
   113c4:	ldr	r3, [pc, #16]	; 113dc <__assert_fail@plt+0x2b8>
   113c8:	cmp	r3, #0
   113cc:	bxeq	lr
   113d0:	bx	r3
   113d4:	andeq	r1, r3, r4, asr r1
   113d8:	andeq	r1, r3, r4, asr r1
   113dc:	andeq	r0, r0, r0
   113e0:	ldr	r0, [pc, #36]	; 1140c <__assert_fail@plt+0x2e8>
   113e4:	ldr	r1, [pc, #36]	; 11410 <__assert_fail@plt+0x2ec>
   113e8:	sub	r1, r1, r0
   113ec:	asr	r1, r1, #2
   113f0:	add	r1, r1, r1, lsr #31
   113f4:	asrs	r1, r1, #1
   113f8:	bxeq	lr
   113fc:	ldr	r3, [pc, #16]	; 11414 <__assert_fail@plt+0x2f0>
   11400:	cmp	r3, #0
   11404:	bxeq	lr
   11408:	bx	r3
   1140c:	andeq	r1, r3, r4, asr r1
   11410:	andeq	r1, r3, r4, asr r1
   11414:	andeq	r0, r0, r0
   11418:	push	{r4, lr}
   1141c:	ldr	r4, [pc, #24]	; 1143c <__assert_fail@plt+0x318>
   11420:	ldrb	r3, [r4]
   11424:	cmp	r3, #0
   11428:	popne	{r4, pc}
   1142c:	bl	113b4 <__assert_fail@plt+0x290>
   11430:	mov	r3, #1
   11434:	strb	r3, [r4]
   11438:	pop	{r4, pc}
   1143c:	andeq	r1, r3, r8, ror r1
   11440:	b	113e0 <__assert_fail@plt+0x2bc>
   11444:	andeq	r0, r0, r0
   11448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1144c:	sub	sp, sp, #12
   11450:	ldrb	r8, [r0, #250]	; 0xfa
   11454:	mov	sl, r2
   11458:	mov	fp, r3
   1145c:	sub	r9, r8, #1
   11460:	add	r2, r0, #16
   11464:	add	r3, r0, #224	; 0xe0
   11468:	cmn	r9, #1
   1146c:	str	r2, [sp, #4]
   11470:	str	r3, [sp]
   11474:	beq	114e8 <__assert_fail@plt+0x3c4>
   11478:	lsl	r3, r9, #3
   1147c:	ldrd	r6, [r2, r3]
   11480:	cmp	fp, r7
   11484:	cmpeq	sl, r6
   11488:	bcs	11534 <__assert_fail@plt+0x410>
   1148c:	add	r2, r0, r8, lsl #3
   11490:	mov	ip, r2
   11494:	mov	r1, r9
   11498:	b	114b4 <__assert_fail@plt+0x390>
   1149c:	ldrd	r4, [ip], #-8
   114a0:	mov	lr, r3
   114a4:	cmp	r5, fp
   114a8:	cmpeq	r4, sl
   114ac:	bls	1150c <__assert_fail@plt+0x3e8>
   114b0:	mov	r1, r3
   114b4:	subs	r3, r1, #1
   114b8:	bcs	1149c <__assert_fail@plt+0x378>
   114bc:	add	r1, r8, #224	; 0xe0
   114c0:	add	r1, r0, r1
   114c4:	b	114cc <__assert_fail@plt+0x3a8>
   114c8:	ldrd	r6, [r2], #-8
   114cc:	strd	r6, [r2, #16]
   114d0:	sub	ip, r1, #226	; 0xe2
   114d4:	ldrb	lr, [r1, #-1]
   114d8:	sub	ip, ip, r0
   114dc:	cmp	ip, r3
   114e0:	strb	lr, [r1], #-1
   114e4:	bgt	114c8 <__assert_fail@plt+0x3a4>
   114e8:	ldr	r3, [sp, #4]
   114ec:	ldr	r2, [sp]
   114f0:	add	r8, r8, #1
   114f4:	strd	sl, [r3]
   114f8:	ldr	r3, [sp, #48]	; 0x30
   114fc:	strb	r3, [r2]
   11500:	strb	r8, [r0, #250]	; 0xfa
   11504:	add	sp, sp, #12
   11508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1150c:	beq	1153c <__assert_fail@plt+0x418>
   11510:	ldr	ip, [sp, #4]
   11514:	cmp	r9, r3
   11518:	add	ip, ip, r1, lsl #3
   1151c:	str	ip, [sp, #4]
   11520:	ldr	ip, [sp]
   11524:	add	r1, ip, r1
   11528:	str	r1, [sp]
   1152c:	bgt	114bc <__assert_fail@plt+0x398>
   11530:	b	114e8 <__assert_fail@plt+0x3c4>
   11534:	mov	lr, r9
   11538:	bne	11558 <__assert_fail@plt+0x434>
   1153c:	ldr	r2, [sp]
   11540:	ldr	r1, [sp, #48]	; 0x30
   11544:	ldrb	r3, [r2, lr]
   11548:	add	r3, r3, r1
   1154c:	strb	r3, [r2, lr]
   11550:	add	sp, sp, #12
   11554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11558:	ldr	r3, [sp, #4]
   1155c:	add	r3, r3, r8, lsl #3
   11560:	str	r3, [sp, #4]
   11564:	add	r3, r0, #224	; 0xe0
   11568:	add	r3, r3, r8
   1156c:	str	r3, [sp]
   11570:	b	114e8 <__assert_fail@plt+0x3c4>
   11574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11578:	sub	sp, sp, #228	; 0xe4
   1157c:	add	r1, sp, #304	; 0x130
   11580:	strd	r2, [sp, #128]	; 0x80
   11584:	ldrd	r4, [r1]
   11588:	str	r0, [sp, #204]	; 0xcc
   1158c:	ldr	lr, [sp, #264]	; 0x108
   11590:	rsbs	r4, r4, #0
   11594:	rsc	r5, r5, #0
   11598:	cmp	r2, #0
   1159c:	sbcs	r3, r3, #0
   115a0:	ldr	r3, [sp, #284]	; 0x11c
   115a4:	strd	r4, [sp, #120]	; 0x78
   115a8:	ldr	ip, [sp, #268]	; 0x10c
   115ac:	ldr	sl, [sp, #280]	; 0x118
   115b0:	str	r3, [sp, #64]	; 0x40
   115b4:	blt	11dbc <__assert_fail@plt+0xc98>
   115b8:	add	r3, sp, #272	; 0x110
   115bc:	ldrd	r2, [r3]
   115c0:	cmp	r2, #0
   115c4:	sbcs	r3, r3, #0
   115c8:	blt	11da8 <__assert_fail@plt+0xc84>
   115cc:	add	r3, sp, #288	; 0x120
   115d0:	ldrd	r2, [r3]
   115d4:	cmp	r2, #0
   115d8:	sbcs	r3, r3, #0
   115dc:	blt	11d94 <__assert_fail@plt+0xc70>
   115e0:	umull	r0, r1, ip, sl
   115e4:	ldr	r3, [sp, #64]	; 0x40
   115e8:	mov	r4, r0
   115ec:	mov	r5, r1
   115f0:	umlal	r4, r5, lr, r3
   115f4:	umull	r6, r7, lr, sl
   115f8:	adds	r2, r7, r4
   115fc:	mov	r4, #0
   11600:	str	r2, [sp, #8]
   11604:	adc	r2, r4, r5
   11608:	str	r2, [sp, #12]
   1160c:	ldrd	r4, [sp, #8]
   11610:	strd	r6, [sp, #208]	; 0xd0
   11614:	umull	r6, r7, ip, r3
   11618:	cmp	r1, r5
   1161c:	cmpeq	r0, r4
   11620:	bls	1162c <__assert_fail@plt+0x508>
   11624:	adds	r6, r6, #0
   11628:	adc	r7, r7, #1
   1162c:	ldr	r3, [sp, #272]	; 0x110
   11630:	umull	r4, r5, ip, r3
   11634:	umull	r2, r3, lr, r3
   11638:	mov	r0, r4
   1163c:	strd	r2, [sp, #32]
   11640:	ldr	r3, [sp, #276]	; 0x114
   11644:	mov	r1, r5
   11648:	ldr	r2, [sp, #208]	; 0xd0
   1164c:	umull	r8, r9, ip, r3
   11650:	umlal	r0, r1, lr, r3
   11654:	ldr	r3, [sp, #12]
   11658:	strd	r8, [sp, #56]	; 0x38
   1165c:	adds	r3, r3, r6
   11660:	mov	r9, #0
   11664:	adc	ip, r9, r7
   11668:	ldr	r8, [sp, #8]
   1166c:	str	ip, [sp, #140]	; 0x8c
   11670:	ldr	ip, [sp, #36]	; 0x24
   11674:	adds	r2, r9, r2
   11678:	adc	lr, r8, r9
   1167c:	adds	ip, ip, r0
   11680:	str	r3, [sp, #136]	; 0x88
   11684:	adc	r3, r9, r1
   11688:	str	ip, [sp, #16]
   1168c:	str	r3, [sp, #20]
   11690:	ldrd	r0, [sp, #16]
   11694:	str	r9, [sp, #216]	; 0xd8
   11698:	cmp	r5, r1
   1169c:	cmpeq	r4, r0
   116a0:	bls	116bc <__assert_fail@plt+0x598>
   116a4:	ldr	r3, [sp, #56]	; 0x38
   116a8:	adds	r3, r3, r9
   116ac:	str	r3, [sp, #56]	; 0x38
   116b0:	ldr	r3, [sp, #60]	; 0x3c
   116b4:	adc	r3, r3, #1
   116b8:	str	r3, [sp, #60]	; 0x3c
   116bc:	ldrd	r4, [sp, #120]	; 0x78
   116c0:	ldr	r8, [sp, #300]	; 0x12c
   116c4:	ldr	fp, [sp, #32]
   116c8:	mul	ip, r4, lr
   116cc:	umull	r0, r1, r4, r2
   116d0:	mla	ip, r2, r5, ip
   116d4:	ldr	r4, [sp, #296]	; 0x128
   116d8:	add	ip, ip, r1
   116dc:	mov	r3, #0
   116e0:	umull	r6, r7, ip, r4
   116e4:	umull	r4, r5, r0, r4
   116e8:	strd	r4, [sp, #8]
   116ec:	mov	r4, r6
   116f0:	mov	r5, r7
   116f4:	umlal	r4, r5, r0, r8
   116f8:	ldr	r9, [sp, #12]
   116fc:	adds	r8, r3, fp
   11700:	ldr	fp, [sp, #16]
   11704:	str	r8, [sp, #144]	; 0x90
   11708:	adc	r8, fp, r3
   1170c:	adds	r9, r9, r4
   11710:	adc	r4, r3, r5
   11714:	str	r9, [sp, #48]	; 0x30
   11718:	str	r4, [sp, #52]	; 0x34
   1171c:	ldrd	r4, [sp, #48]	; 0x30
   11720:	str	r8, [sp, #148]	; 0x94
   11724:	mov	r8, r0
   11728:	cmp	r7, r5
   1172c:	cmpeq	r6, r4
   11730:	ldr	r4, [sp, #20]
   11734:	mov	r7, r3
   11738:	str	r4, [sp, #220]	; 0xdc
   1173c:	ldr	r4, [sp, #300]	; 0x12c
   11740:	mov	r6, r3
   11744:	umull	r0, r1, ip, r4
   11748:	strd	r0, [sp, #16]
   1174c:	bls	11764 <__assert_fail@plt+0x640>
   11750:	adds	r1, r0, r3
   11754:	str	r1, [sp, #16]
   11758:	ldr	r1, [sp, #20]
   1175c:	adc	r1, r1, #1
   11760:	str	r1, [sp, #20]
   11764:	ldr	r4, [sp, #292]	; 0x124
   11768:	ldr	r1, [sp, #288]	; 0x120
   1176c:	umull	r4, r5, r4, r8
   11770:	umull	r0, r1, ip, r1
   11774:	strd	r4, [sp, #8]
   11778:	ldr	r4, [sp, #288]	; 0x120
   1177c:	ldr	r5, [sp, #12]
   11780:	umull	r8, r9, r8, r4
   11784:	mla	r1, r7, r4, r1
   11788:	ldr	r4, [sp, #292]	; 0x124
   1178c:	strd	r8, [sp, #208]	; 0xd0
   11790:	mla	r4, r6, r4, r5
   11794:	str	r4, [sp, #12]
   11798:	ldr	r4, [sp, #288]	; 0x120
   1179c:	mla	r6, r6, r4, r9
   117a0:	ldrd	r8, [sp, #8]
   117a4:	mov	r4, r6
   117a8:	mov	r6, #0
   117ac:	adds	fp, r8, r0
   117b0:	ldr	r8, [sp, #292]	; 0x124
   117b4:	adc	r5, r9, r1
   117b8:	umull	r8, r9, ip, r8
   117bc:	adds	ip, r4, fp
   117c0:	str	ip, [sp, #24]
   117c4:	adc	ip, r6, r5
   117c8:	str	ip, [sp, #28]
   117cc:	ldrd	r4, [sp, #24]
   117d0:	strd	r8, [sp, #32]
   117d4:	cmp	r1, r5
   117d8:	ldr	r1, [sp, #292]	; 0x124
   117dc:	cmpeq	r0, r4
   117e0:	ldr	r4, [sp, #52]	; 0x34
   117e4:	mla	r1, r7, r1, r9
   117e8:	str	r1, [sp, #36]	; 0x24
   117ec:	bls	11808 <__assert_fail@plt+0x6e4>
   117f0:	ldr	r1, [sp, #32]
   117f4:	adds	r1, r1, r6
   117f8:	str	r1, [sp, #32]
   117fc:	ldr	r1, [sp, #36]	; 0x24
   11800:	adc	r1, r1, #1
   11804:	str	r1, [sp, #36]	; 0x24
   11808:	ldr	r1, [sp, #208]	; 0xd0
   1180c:	mov	ip, #0
   11810:	ldr	r0, [sp, #24]
   11814:	adds	r1, ip, r1
   11818:	str	r1, [sp, #152]	; 0x98
   1181c:	adc	r1, r0, ip
   11820:	str	r1, [sp, #156]	; 0x9c
   11824:	ldrd	r0, [sp, #144]	; 0x90
   11828:	orrs	r2, r2, lr
   1182c:	ldrd	r8, [sp, #16]
   11830:	movne	r2, #1
   11834:	moveq	r2, ip
   11838:	adds	r0, r0, r2
   1183c:	adc	r1, r1, #0
   11840:	adds	r4, r4, r0
   11844:	adc	r6, r6, r1
   11848:	adds	r2, r4, r8
   1184c:	str	r2, [sp, #160]	; 0xa0
   11850:	adc	r2, r6, r9
   11854:	str	r2, [sp, #164]	; 0xa4
   11858:	ldrd	r4, [sp, #160]	; 0xa0
   1185c:	ldrd	r6, [sp, #136]	; 0x88
   11860:	ldrd	r8, [sp, #128]	; 0x80
   11864:	cmp	r1, r5
   11868:	cmpeq	r0, r4
   1186c:	movhi	r2, #1
   11870:	movls	r2, ip
   11874:	adds	r0, r6, r4
   11878:	adcs	r1, r7, r5
   1187c:	ldrd	r6, [sp, #152]	; 0x98
   11880:	mov	lr, ip
   11884:	movcs	lr, #1
   11888:	adds	r4, r6, r0
   1188c:	adcs	r5, r7, r1
   11890:	umull	r0, r1, r9, sl
   11894:	strd	r4, [sp, #136]	; 0x88
   11898:	umull	r4, r5, sl, r8
   1189c:	ldr	r6, [sp, #64]	; 0x40
   118a0:	str	r2, [sp, #160]	; 0xa0
   118a4:	strd	r4, [sp, #16]
   118a8:	mov	r4, r0
   118ac:	mov	r5, r1
   118b0:	umlal	r4, r5, r8, r6
   118b4:	ldr	r2, [sp, #28]
   118b8:	mov	sl, r4
   118bc:	mov	fp, r5
   118c0:	umull	r4, r5, r6, r9
   118c4:	ldr	r6, [sp, #20]
   118c8:	str	r2, [sp, #144]	; 0x90
   118cc:	mov	r2, #0
   118d0:	mov	r7, r2
   118d4:	strd	r4, [sp, #64]	; 0x40
   118d8:	movcs	r7, #1
   118dc:	mov	r8, #0
   118e0:	adds	r5, r6, sl
   118e4:	str	r5, [sp, #40]	; 0x28
   118e8:	adc	r5, r8, fp
   118ec:	str	r5, [sp, #44]	; 0x2c
   118f0:	ldrd	r4, [sp, #40]	; 0x28
   118f4:	str	ip, [sp, #208]	; 0xd0
   118f8:	str	r7, [sp, #152]	; 0x98
   118fc:	cmp	r1, r5
   11900:	cmpeq	r0, r4
   11904:	bls	11920 <__assert_fail@plt+0x7fc>
   11908:	ldr	r1, [sp, #64]	; 0x40
   1190c:	adds	r1, r1, r8
   11910:	str	r1, [sp, #64]	; 0x40
   11914:	ldr	r1, [sp, #68]	; 0x44
   11918:	adc	r1, r1, #1
   1191c:	str	r1, [sp, #68]	; 0x44
   11920:	ldrd	r6, [sp, #128]	; 0x80
   11924:	ldr	r0, [sp, #272]	; 0x110
   11928:	ldr	r4, [sp, #276]	; 0x114
   1192c:	ldr	r9, [sp, #216]	; 0xd8
   11930:	umull	r0, r1, r7, r0
   11934:	umull	r4, r5, r4, r6
   11938:	strd	r0, [sp, #24]
   1193c:	ldr	r1, [sp, #28]
   11940:	strd	r4, [sp, #48]	; 0x30
   11944:	mla	r1, r9, r7, r1
   11948:	ldr	r4, [sp, #272]	; 0x110
   1194c:	str	r1, [sp, #28]
   11950:	ldr	r1, [sp, #44]	; 0x2c
   11954:	mov	sl, #0
   11958:	str	r1, [sp, #8]
   1195c:	ldr	r1, [sp, #52]	; 0x34
   11960:	umull	r4, r5, r4, r6
   11964:	str	sl, [sp, #12]
   11968:	mov	r0, sl
   1196c:	mla	sl, sl, r6, r1
   11970:	strd	r4, [sp, #128]	; 0x80
   11974:	str	sl, [sp, #52]	; 0x34
   11978:	ldr	sl, [sp, #16]
   1197c:	ldr	r4, [sp, #40]	; 0x28
   11980:	mla	r9, r9, r6, r5
   11984:	adds	r5, r0, sl
   11988:	adc	r4, r4, r0
   1198c:	str	r5, [sp, #168]	; 0xa8
   11990:	ldr	r5, [sp, #276]	; 0x114
   11994:	ldr	r1, [sp, #24]
   11998:	str	r4, [sp, #172]	; 0xac
   1199c:	ldr	r4, [sp, #48]	; 0x30
   119a0:	umull	sl, fp, r5, r7
   119a4:	ldr	r5, [sp, #52]	; 0x34
   119a8:	adds	r4, r4, r1
   119ac:	ldr	r1, [sp, #28]
   119b0:	strd	sl, [sp, #16]
   119b4:	adc	r5, r5, r1
   119b8:	adds	r4, r9, r4
   119bc:	str	r4, [sp, #72]	; 0x48
   119c0:	adc	r4, r0, r5
   119c4:	str	r4, [sp, #76]	; 0x4c
   119c8:	ldrd	sl, [sp, #24]
   119cc:	ldrd	r4, [sp, #72]	; 0x48
   119d0:	cmp	fp, r5
   119d4:	cmpeq	sl, r4
   119d8:	mov	sl, r0
   119dc:	ldr	r0, [sp, #20]
   119e0:	mla	r1, sl, r7, r0
   119e4:	str	r1, [sp, #20]
   119e8:	bls	11a04 <__assert_fail@plt+0x8e0>
   119ec:	ldr	r1, [sp, #16]
   119f0:	adds	r1, r1, sl
   119f4:	str	r1, [sp, #16]
   119f8:	ldr	r1, [sp, #20]
   119fc:	adc	r1, r1, #1
   11a00:	str	r1, [sp, #20]
   11a04:	ldrd	r6, [sp, #72]	; 0x48
   11a08:	ldr	r1, [sp, #128]	; 0x80
   11a0c:	mov	r0, #0
   11a10:	adds	r1, r0, r1
   11a14:	str	r1, [sp, #80]	; 0x50
   11a18:	adc	r1, r6, r0
   11a1c:	str	r1, [sp, #84]	; 0x54
   11a20:	ldrd	r4, [sp, #80]	; 0x50
   11a24:	ldr	r1, [sp, #220]	; 0xdc
   11a28:	ldrd	sl, [sp, #168]	; 0xa8
   11a2c:	adds	r1, r1, r4
   11a30:	ldr	r4, [sp, #144]	; 0x90
   11a34:	adc	r3, r3, r5
   11a38:	adds	r1, r1, r4
   11a3c:	ldrd	r4, [sp, #56]	; 0x38
   11a40:	adc	r3, r3, ip
   11a44:	ldr	ip, [sp, #160]	; 0xa0
   11a48:	adds	r1, r1, r4
   11a4c:	adc	r3, r3, r5
   11a50:	adds	r1, r1, ip
   11a54:	ldr	ip, [sp, #208]	; 0xd0
   11a58:	ldrd	r4, [sp, #136]	; 0x88
   11a5c:	adc	r3, r3, ip
   11a60:	adds	r1, r1, lr
   11a64:	adc	r3, r3, r2
   11a68:	ldr	r2, [sp, #152]	; 0x98
   11a6c:	str	r7, [sp, #40]	; 0x28
   11a70:	adds	lr, r1, r2
   11a74:	adc	r8, r3, r8
   11a78:	adds	r2, r4, sl
   11a7c:	adcs	r3, r5, fp
   11a80:	ldrd	sl, [sp, #120]	; 0x78
   11a84:	strd	r2, [sp, #24]
   11a88:	ldrd	r4, [sp, #24]
   11a8c:	ldrd	r6, [sp, #8]
   11a90:	mov	r3, r0
   11a94:	mul	r1, sl, r5
   11a98:	movcs	r3, #1
   11a9c:	adds	r6, r6, r3
   11aa0:	mla	r1, r4, fp, r1
   11aa4:	umull	r2, r3, sl, r4
   11aa8:	ldrd	sl, [sp, #64]	; 0x40
   11aac:	adc	r7, r7, #0
   11ab0:	add	r1, r1, r3
   11ab4:	adds	ip, r6, sl
   11ab8:	str	ip, [sp, #176]	; 0xb0
   11abc:	ldr	ip, [sp, #296]	; 0x128
   11ac0:	umull	r4, r5, r1, ip
   11ac4:	adc	ip, r7, fp
   11ac8:	ldrd	sl, [sp, #32]
   11acc:	str	ip, [sp, #180]	; 0xb4
   11ad0:	ldr	ip, [sp, #300]	; 0x12c
   11ad4:	adds	lr, sl, lr
   11ad8:	str	lr, [sp, #88]	; 0x58
   11adc:	adc	lr, fp, r8
   11ae0:	str	lr, [sp, #92]	; 0x5c
   11ae4:	ldr	lr, [sp, #296]	; 0x128
   11ae8:	umull	r6, r7, ip, r2
   11aec:	umull	r8, r9, lr, r2
   11af0:	ldrd	sl, [sp, #88]	; 0x58
   11af4:	mov	ip, #0
   11af8:	mla	r5, ip, r1, r5
   11afc:	mla	r7, ip, r2, r7
   11b00:	mla	ip, ip, r2, r9
   11b04:	ldrd	r8, [sp, #80]	; 0x50
   11b08:	cmp	r9, fp
   11b0c:	cmpeq	r8, sl
   11b10:	movhi	lr, #1
   11b14:	movls	lr, #0
   11b18:	adds	r8, r6, r4
   11b1c:	adc	r6, r7, r5
   11b20:	adds	r8, ip, r8
   11b24:	str	r8, [sp, #96]	; 0x60
   11b28:	ldr	r8, [sp, #300]	; 0x12c
   11b2c:	str	lr, [sp, #32]
   11b30:	mov	lr, #0
   11b34:	umull	r8, r9, r8, r1
   11b38:	adc	r6, lr, r6
   11b3c:	strd	r8, [sp, #8]
   11b40:	str	r6, [sp, #100]	; 0x64
   11b44:	ldrd	r6, [sp, #96]	; 0x60
   11b48:	mla	ip, lr, r1, r9
   11b4c:	cmp	r5, r7
   11b50:	cmpeq	r4, r6
   11b54:	str	ip, [sp, #12]
   11b58:	bls	11b70 <__assert_fail@plt+0xa4c>
   11b5c:	ldr	r3, [sp, #8]
   11b60:	adds	r3, r3, lr
   11b64:	str	r3, [sp, #8]
   11b68:	adc	r3, ip, #1
   11b6c:	str	r3, [sp, #12]
   11b70:	ldr	r3, [sp, #288]	; 0x120
   11b74:	mov	r8, #0
   11b78:	ldr	ip, [sp, #100]	; 0x64
   11b7c:	umull	r4, r5, r1, r3
   11b80:	ldr	r3, [sp, #292]	; 0x124
   11b84:	umull	sl, fp, r3, r2
   11b88:	ldr	r3, [sp, #288]	; 0x120
   11b8c:	umull	r6, r7, r3, r2
   11b90:	mov	r3, #0
   11b94:	mla	fp, r2, r3, fp
   11b98:	mla	r5, r1, r3, r5
   11b9c:	mla	r2, r2, r3, r7
   11ba0:	adds	r3, sl, r4
   11ba4:	adc	r9, fp, r5
   11ba8:	adds	r2, r2, r3
   11bac:	str	r2, [sp, #104]	; 0x68
   11bb0:	adc	r9, r8, r9
   11bb4:	ldr	r2, [sp, #292]	; 0x124
   11bb8:	str	r9, [sp, #108]	; 0x6c
   11bbc:	ldrd	sl, [sp, #104]	; 0x68
   11bc0:	umull	r2, r3, r2, r1
   11bc4:	cmp	r5, fp
   11bc8:	cmpeq	r4, sl
   11bcc:	mla	r3, r1, r8, r3
   11bd0:	bls	11bdc <__assert_fail@plt+0xab8>
   11bd4:	adds	r2, r2, r8
   11bd8:	adc	r3, r3, #1
   11bdc:	ldrd	sl, [sp, #104]	; 0x68
   11be0:	ldr	r5, [sp, #40]	; 0x28
   11be4:	mov	r4, #0
   11be8:	adds	r1, fp, r5
   11bec:	str	r1, [sp, #40]	; 0x28
   11bf0:	adc	r1, r4, r0
   11bf4:	str	r1, [sp, #48]	; 0x30
   11bf8:	adds	r1, r4, r6
   11bfc:	ldrd	r6, [sp, #24]
   11c00:	str	r1, [sp, #184]	; 0xb8
   11c04:	adc	r1, sl, r4
   11c08:	str	r1, [sp, #188]	; 0xbc
   11c0c:	mov	r1, r7
   11c10:	orrs	r1, r1, r6
   11c14:	ldrd	r6, [sp, #88]	; 0x58
   11c18:	mov	r5, sl
   11c1c:	moveq	r5, r4
   11c20:	ldrd	sl, [sp, #8]
   11c24:	movne	r5, #1
   11c28:	adds	r6, r6, r5
   11c2c:	adc	r7, r7, #0
   11c30:	adds	ip, ip, r6
   11c34:	adc	r8, r8, r7
   11c38:	adds	r1, ip, sl
   11c3c:	str	r1, [sp, #112]	; 0x70
   11c40:	adc	r1, r8, fp
   11c44:	str	r1, [sp, #116]	; 0x74
   11c48:	ldrd	sl, [sp, #176]	; 0xb0
   11c4c:	ldrd	r0, [sp, #112]	; 0x70
   11c50:	mov	ip, r4
   11c54:	adds	r8, sl, r0
   11c58:	adcs	r9, fp, r1
   11c5c:	ldrd	r0, [sp, #184]	; 0xb8
   11c60:	movcs	ip, #1
   11c64:	ldrd	sl, [sp, #16]
   11c68:	adds	r4, r0, r8
   11c6c:	adcs	r5, r1, r9
   11c70:	ldr	r0, [sp, #40]	; 0x28
   11c74:	ldr	r1, [sp, #32]
   11c78:	movcs	r8, #1
   11c7c:	movcc	r8, #0
   11c80:	adds	r1, r1, r0
   11c84:	ldr	r0, [sp, #48]	; 0x30
   11c88:	adc	r0, lr, r0
   11c8c:	adds	r1, r1, sl
   11c90:	str	r1, [sp, #192]	; 0xc0
   11c94:	adc	r1, r0, fp
   11c98:	str	r1, [sp, #196]	; 0xc4
   11c9c:	ldrd	r0, [sp, #112]	; 0x70
   11ca0:	mov	lr, sl
   11ca4:	cmp	r7, r1
   11ca8:	cmpeq	r6, r0
   11cac:	ldrd	r0, [sp, #192]	; 0xc0
   11cb0:	movhi	lr, #1
   11cb4:	movls	lr, #0
   11cb8:	adds	r0, r0, lr
   11cbc:	adc	r1, r1, #0
   11cc0:	adds	r0, r0, ip
   11cc4:	adc	r1, r1, #0
   11cc8:	adds	r6, r0, r8
   11ccc:	adc	r7, r1, #0
   11cd0:	adds	r1, r6, r2
   11cd4:	adc	r3, r7, r3
   11cd8:	str	r3, [sp, #4]
   11cdc:	add	r3, sp, #288	; 0x120
   11ce0:	str	r1, [sp]
   11ce4:	ldrd	r0, [sp]
   11ce8:	ldrd	r2, [r3]
   11cec:	cmp	r3, r1
   11cf0:	cmpeq	r2, r0
   11cf4:	mov	r1, r5
   11cf8:	mov	r0, r4
   11cfc:	bcs	11d68 <__assert_fail@plt+0xc44>
   11d00:	add	r3, sp, #296	; 0x128
   11d04:	ldr	ip, [sp, #288]	; 0x120
   11d08:	ldrd	r2, [r3]
   11d0c:	cmp	r3, r5
   11d10:	cmpeq	r2, r4
   11d14:	ldr	r2, [sp, #296]	; 0x128
   11d18:	movhi	r3, #1
   11d1c:	movls	r3, #0
   11d20:	subs	r0, r4, r2
   11d24:	ldr	r2, [sp, #300]	; 0x12c
   11d28:	sbc	r1, r5, r2
   11d2c:	adds	r3, ip, r3
   11d30:	ldr	ip, [sp, #292]	; 0x124
   11d34:	mov	r2, #0
   11d38:	adc	r2, ip, r2
   11d3c:	ldr	ip, [sp]
   11d40:	subs	r3, ip, r3
   11d44:	str	r3, [sp]
   11d48:	ldr	r3, [sp, #4]
   11d4c:	sbc	r3, r3, r2
   11d50:	str	r3, [sp, #4]
   11d54:	ldr	ip, [sp, #204]	; 0xcc
   11d58:	ldrd	r2, [sp]
   11d5c:	strd	r2, [ip]
   11d60:	add	sp, sp, #228	; 0xe4
   11d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d68:	add	r2, sp, #296	; 0x128
   11d6c:	moveq	r3, #1
   11d70:	ldrd	r6, [r2]
   11d74:	movne	r3, #0
   11d78:	cmp	r7, r5
   11d7c:	cmpeq	r6, r4
   11d80:	movhi	r3, #0
   11d84:	andls	r3, r3, #1
   11d88:	cmp	r3, #0
   11d8c:	beq	11d54 <__assert_fail@plt+0xc30>
   11d90:	b	11d00 <__assert_fail@plt+0xbdc>
   11d94:	ldr	r3, [pc, #52]	; 11dd0 <__assert_fail@plt+0xcac>
   11d98:	ldr	r2, [pc, #52]	; 11dd4 <__assert_fail@plt+0xcb0>
   11d9c:	ldr	r1, [pc, #52]	; 11dd8 <__assert_fail@plt+0xcb4>
   11da0:	ldr	r0, [pc, #52]	; 11ddc <__assert_fail@plt+0xcb8>
   11da4:	bl	11124 <__assert_fail@plt>
   11da8:	ldr	r3, [pc, #32]	; 11dd0 <__assert_fail@plt+0xcac>
   11dac:	mov	r2, #1000	; 0x3e8
   11db0:	ldr	r1, [pc, #32]	; 11dd8 <__assert_fail@plt+0xcb4>
   11db4:	ldr	r0, [pc, #36]	; 11de0 <__assert_fail@plt+0xcbc>
   11db8:	bl	11124 <__assert_fail@plt>
   11dbc:	ldr	r3, [pc, #12]	; 11dd0 <__assert_fail@plt+0xcac>
   11dc0:	ldr	r2, [pc, #28]	; 11de4 <__assert_fail@plt+0xcc0>
   11dc4:	ldr	r1, [pc, #12]	; 11dd8 <__assert_fail@plt+0xcb4>
   11dc8:	ldr	r0, [pc, #24]	; 11de8 <__assert_fail@plt+0xcc4>
   11dcc:	bl	11124 <__assert_fail@plt>
   11dd0:	andeq	sp, r1, r0, lsr #4
   11dd4:	andeq	r0, r0, r9, ror #7
   11dd8:	andeq	r0, r2, r8, ror #5
   11ddc:	andeq	r0, r2, r8, lsr r3
   11de0:	andeq	r0, r2, r8, lsl r3
   11de4:	andeq	r0, r0, r7, ror #7
   11de8:	strdeq	r0, [r2], -r8
   11dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11df0:	sub	sp, sp, #116	; 0x74
   11df4:	ldrd	r4, [r1, #8]
   11df8:	ldr	ip, [sp, #160]	; 0xa0
   11dfc:	mov	lr, r2
   11e00:	strd	r4, [sp, #96]	; 0x60
   11e04:	str	r2, [sp, #108]	; 0x6c
   11e08:	ldrd	r4, [r3]
   11e0c:	ldrd	r2, [r3, #8]
   11e10:	ldrd	sl, [r1]
   11e14:	strd	r4, [sp, #56]	; 0x38
   11e18:	strd	r2, [sp, #64]	; 0x40
   11e1c:	ldrd	r2, [ip]
   11e20:	ldm	lr, {r4, r7}
   11e24:	mov	r5, #64	; 0x40
   11e28:	strd	r2, [sp, #80]	; 0x50
   11e2c:	ldrd	r2, [ip, #8]
   11e30:	str	r5, [sp, #52]	; 0x34
   11e34:	str	r0, [sp, #104]	; 0x68
   11e38:	mov	r5, r7
   11e3c:	strd	r2, [sp, #72]	; 0x48
   11e40:	ldrd	r6, [sp, #96]	; 0x60
   11e44:	b	11ea8 <__assert_fail@plt+0xd84>
   11e48:	ldrd	r2, [sp, #152]	; 0x98
   11e4c:	strd	r6, [sp, #8]
   11e50:	strd	sl, [sp, #16]
   11e54:	strd	r2, [sp, #40]	; 0x28
   11e58:	ldrd	r2, [sp, #56]	; 0x38
   11e5c:	strd	sl, [sp]
   11e60:	lsr	r4, r4, #1
   11e64:	strd	r2, [sp, #32]
   11e68:	ldrd	r2, [sp, #64]	; 0x40
   11e6c:	orr	r4, r4, r5, lsl #31
   11e70:	lsr	r5, r5, #1
   11e74:	strd	r2, [sp, #24]
   11e78:	mov	r2, r6
   11e7c:	ldr	r6, [sp, #104]	; 0x68
   11e80:	mov	r3, r7
   11e84:	mov	r0, r6
   11e88:	bl	11574 <__assert_fail@plt+0x450>
   11e8c:	ldr	r3, [sp, #52]	; 0x34
   11e90:	ldrd	r6, [r6]
   11e94:	subs	r3, r3, #1
   11e98:	str	r3, [sp, #52]	; 0x34
   11e9c:	mov	sl, r0
   11ea0:	mov	fp, r1
   11ea4:	beq	11f00 <__assert_fail@plt+0xddc>
   11ea8:	and	r8, r4, #1
   11eac:	mov	r9, #0
   11eb0:	orrs	r3, r8, r9
   11eb4:	beq	11e48 <__assert_fail@plt+0xd24>
   11eb8:	ldrd	r2, [sp, #152]	; 0x98
   11ebc:	strd	sl, [sp, #16]
   11ec0:	strd	r6, [sp, #8]
   11ec4:	strd	r2, [sp, #40]	; 0x28
   11ec8:	ldrd	r2, [sp, #56]	; 0x38
   11ecc:	ldr	r0, [sp, #104]	; 0x68
   11ed0:	strd	r2, [sp, #32]
   11ed4:	ldrd	r2, [sp, #64]	; 0x40
   11ed8:	strd	r2, [sp, #24]
   11edc:	ldrd	r2, [sp, #80]	; 0x50
   11ee0:	strd	r2, [sp]
   11ee4:	ldrd	r2, [sp, #72]	; 0x48
   11ee8:	bl	11574 <__assert_fail@plt+0x450>
   11eec:	ldr	r3, [sp, #104]	; 0x68
   11ef0:	ldrd	r2, [r3]
   11ef4:	strd	r2, [sp, #72]	; 0x48
   11ef8:	strd	r0, [sp, #80]	; 0x50
   11efc:	b	11e48 <__assert_fail@plt+0xd24>
   11f00:	ldr	r1, [sp, #108]	; 0x6c
   11f04:	mov	r2, r6
   11f08:	ldr	r5, [sp, #52]	; 0x34
   11f0c:	ldrd	r8, [r1, #8]
   11f10:	ldr	r6, [sp, #104]	; 0x68
   11f14:	orrs	r1, r8, r9
   11f18:	beq	11fe4 <__assert_fail@plt+0xec0>
   11f1c:	mov	r4, r6
   11f20:	mov	r6, r2
   11f24:	b	11f84 <__assert_fail@plt+0xe60>
   11f28:	ldrd	r2, [sp, #152]	; 0x98
   11f2c:	strd	sl, [sp, #16]
   11f30:	strd	sl, [sp]
   11f34:	strd	r2, [sp, #40]	; 0x28
   11f38:	ldrd	r2, [sp, #56]	; 0x38
   11f3c:	strd	r6, [sp, #8]
   11f40:	mov	r0, r4
   11f44:	strd	r2, [sp, #32]
   11f48:	ldrd	r2, [sp, #64]	; 0x40
   11f4c:	strd	r2, [sp, #24]
   11f50:	mov	r2, r6
   11f54:	mov	r3, r7
   11f58:	bl	11574 <__assert_fail@plt+0x450>
   11f5c:	lsr	r3, r8, #1
   11f60:	orr	r3, r3, r9, lsl #31
   11f64:	lsr	r2, r9, #1
   11f68:	mov	r8, r3
   11f6c:	mov	r9, r2
   11f70:	orrs	r3, r8, r9
   11f74:	ldrd	r6, [r4]
   11f78:	mov	sl, r0
   11f7c:	mov	fp, r1
   11f80:	beq	11fe0 <__assert_fail@plt+0xebc>
   11f84:	and	r3, r8, #1
   11f88:	str	r3, [sp, #88]	; 0x58
   11f8c:	str	r5, [sp, #92]	; 0x5c
   11f90:	ldrd	r2, [sp, #88]	; 0x58
   11f94:	orrs	r3, r2, r3
   11f98:	beq	11f28 <__assert_fail@plt+0xe04>
   11f9c:	ldrd	r2, [sp, #152]	; 0x98
   11fa0:	strd	sl, [sp, #16]
   11fa4:	strd	r6, [sp, #8]
   11fa8:	strd	r2, [sp, #40]	; 0x28
   11fac:	ldrd	r2, [sp, #56]	; 0x38
   11fb0:	mov	r0, r4
   11fb4:	strd	r2, [sp, #32]
   11fb8:	ldrd	r2, [sp, #64]	; 0x40
   11fbc:	strd	r2, [sp, #24]
   11fc0:	ldrd	r2, [sp, #80]	; 0x50
   11fc4:	strd	r2, [sp]
   11fc8:	ldrd	r2, [sp, #72]	; 0x48
   11fcc:	bl	11574 <__assert_fail@plt+0x450>
   11fd0:	ldrd	r2, [r4]
   11fd4:	strd	r2, [sp, #72]	; 0x48
   11fd8:	strd	r0, [sp, #80]	; 0x50
   11fdc:	b	11f28 <__assert_fail@plt+0xe04>
   11fe0:	mov	r6, r4
   11fe4:	ldrd	r2, [sp, #72]	; 0x48
   11fe8:	ldrd	r0, [sp, #80]	; 0x50
   11fec:	strd	r2, [r6]
   11ff0:	add	sp, sp, #116	; 0x74
   11ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ffc:	sub	sp, sp, #116	; 0x74
   12000:	ldr	r1, [pc, #460]	; 121d4 <__assert_fail@plt+0x10b0>
   12004:	ldr	r6, [sp, #164]	; 0xa4
   12008:	strd	r2, [sp, #72]	; 0x48
   1200c:	ldr	ip, [r1]
   12010:	mov	r5, r0
   12014:	strd	r2, [sp]
   12018:	str	r6, [sp, #8]
   1201c:	mov	r3, r0
   12020:	ldr	r2, [sp, #156]	; 0x9c
   12024:	add	r0, sp, #96	; 0x60
   12028:	ldr	r1, [sp, #152]	; 0x98
   1202c:	str	ip, [sp, #108]	; 0x6c
   12030:	ldr	r7, [sp, #160]	; 0xa0
   12034:	bl	11dec <__assert_fail@plt+0xcc8>
   12038:	ldrd	r2, [r6]
   1203c:	ldrd	sl, [sp, #96]	; 0x60
   12040:	strd	r2, [sp, #80]	; 0x50
   12044:	cmp	r3, r1
   12048:	cmpeq	r2, r0
   1204c:	ldrd	r2, [r6, #8]
   12050:	strd	r2, [sp, #48]	; 0x30
   12054:	beq	121b8 <__assert_fail@plt+0x1094>
   12058:	ldrd	r8, [r5, #8]
   1205c:	ldrd	r2, [r5]
   12060:	ldr	lr, [sp, #48]	; 0x30
   12064:	strd	r8, [sp, #88]	; 0x58
   12068:	ldrd	r8, [sp, #80]	; 0x50
   1206c:	subs	ip, r2, r8
   12070:	str	ip, [sp, #56]	; 0x38
   12074:	sbc	ip, r3, r9
   12078:	cmp	r9, r3
   1207c:	cmpeq	r8, r2
   12080:	ldrd	r8, [sp, #88]	; 0x58
   12084:	str	ip, [sp, #60]	; 0x3c
   12088:	movhi	ip, #1
   1208c:	movls	ip, #0
   12090:	subs	r8, r8, ip
   12094:	sbc	r9, r9, #0
   12098:	subs	ip, r8, lr
   1209c:	ldr	lr, [sp, #52]	; 0x34
   120a0:	str	ip, [sp, #64]	; 0x40
   120a4:	sbc	ip, r9, lr
   120a8:	ldrd	r8, [sp, #56]	; 0x38
   120ac:	str	ip, [sp, #68]	; 0x44
   120b0:	cmp	r1, r9
   120b4:	cmpeq	r0, r8
   120b8:	ldrd	r8, [sp, #64]	; 0x40
   120bc:	movne	ip, #0
   120c0:	moveq	ip, #1
   120c4:	cmp	fp, r9
   120c8:	cmpeq	sl, r8
   120cc:	movne	ip, #0
   120d0:	cmp	ip, #0
   120d4:	str	ip, [sp, #80]	; 0x50
   120d8:	bne	121c4 <__assert_fail@plt+0x10a0>
   120dc:	cmp	r7, #1
   120e0:	bls	12198 <__assert_fail@plt+0x1074>
   120e4:	strd	r2, [sp, #48]	; 0x30
   120e8:	mov	r3, r6
   120ec:	mov	r4, #1
   120f0:	mov	r6, r7
   120f4:	ldrd	r8, [sp, #88]	; 0x58
   120f8:	mov	r7, r3
   120fc:	b	12118 <__assert_fail@plt+0xff4>
   12100:	add	r4, r4, #1
   12104:	cmp	r6, r4
   12108:	beq	12198 <__assert_fail@plt+0x1074>
   1210c:	ldrd	r2, [r5]
   12110:	ldrd	r8, [r5, #8]
   12114:	strd	r2, [sp, #48]	; 0x30
   12118:	ldrd	r2, [sp, #72]	; 0x48
   1211c:	strd	r8, [sp, #24]
   12120:	strd	r0, [sp, #16]
   12124:	strd	r2, [sp, #40]	; 0x28
   12128:	ldrd	r2, [sp, #48]	; 0x30
   1212c:	strd	sl, [sp, #8]
   12130:	strd	r0, [sp]
   12134:	strd	r2, [sp, #32]
   12138:	add	r0, sp, #96	; 0x60
   1213c:	mov	r2, sl
   12140:	mov	r3, fp
   12144:	bl	11574 <__assert_fail@plt+0x450>
   12148:	ldrd	r2, [sp, #56]	; 0x38
   1214c:	ldrd	sl, [sp, #96]	; 0x60
   12150:	ldrd	r8, [sp, #64]	; 0x40
   12154:	cmp	r3, r1
   12158:	cmpeq	r2, r0
   1215c:	movne	r3, #0
   12160:	moveq	r3, #1
   12164:	cmp	r9, fp
   12168:	cmpeq	r8, sl
   1216c:	movne	r3, #0
   12170:	cmp	r3, #0
   12174:	bne	121c4 <__assert_fail@plt+0x10a0>
   12178:	ldrd	r2, [r7]
   1217c:	cmp	r3, r1
   12180:	cmpeq	r2, r0
   12184:	bne	12100 <__assert_fail@plt+0xfdc>
   12188:	ldrd	r2, [r7, #8]
   1218c:	cmp	r3, fp
   12190:	cmpeq	r2, sl
   12194:	bne	12100 <__assert_fail@plt+0xfdc>
   12198:	ldr	r3, [pc, #52]	; 121d4 <__assert_fail@plt+0x10b0>
   1219c:	ldr	r2, [sp, #108]	; 0x6c
   121a0:	ldr	r0, [sp, #80]	; 0x50
   121a4:	ldr	r3, [r3]
   121a8:	cmp	r2, r3
   121ac:	bne	121d0 <__assert_fail@plt+0x10ac>
   121b0:	add	sp, sp, #116	; 0x74
   121b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b8:	cmp	r3, fp
   121bc:	cmpeq	r2, sl
   121c0:	bne	12058 <__assert_fail@plt+0xf34>
   121c4:	mov	r3, #1
   121c8:	str	r3, [sp, #80]	; 0x50
   121cc:	b	12198 <__assert_fail@plt+0x1074>
   121d0:	bl	10f20 <__stack_chk_fail@plt>
   121d4:	andeq	r0, r3, r8, lsl #30
   121d8:	push	{r4, r5, r6, r7, r8, lr}
   121dc:	sub	sp, sp, #32
   121e0:	ldr	r6, [pc, #128]	; 12268 <__assert_fail@plt+0x1144>
   121e4:	add	r5, sp, #4
   121e8:	mov	r4, r2
   121ec:	ldr	r3, [r6]
   121f0:	mov	r2, r5
   121f4:	str	r3, [sp, #28]
   121f8:	bl	16bd8 <__assert_fail@plt+0x5ab4>
   121fc:	ldr	r7, [pc, #104]	; 1226c <__assert_fail@plt+0x1148>
   12200:	sub	r5, r0, r5
   12204:	rsb	r8, r5, #20
   12208:	cmp	r8, r4
   1220c:	mov	r1, r0
   12210:	ldrcs	r4, [r7, #4]
   12214:	bcs	12238 <__assert_fail@plt+0x1114>
   12218:	sub	r5, r5, #20
   1221c:	ldr	r3, [r7, #4]
   12220:	add	r5, r5, r4
   12224:	mov	r2, #48	; 0x30
   12228:	add	r4, r3, r5
   1222c:	strb	r2, [r3], #1
   12230:	cmp	r4, r3
   12234:	bne	1222c <__assert_fail@plt+0x1108>
   12238:	mov	r2, r8
   1223c:	mov	r0, r4
   12240:	bl	10ee4 <memcpy@plt>
   12244:	ldr	r2, [sp, #28]
   12248:	ldr	r3, [r6]
   1224c:	add	r4, r4, r8
   12250:	cmp	r2, r3
   12254:	str	r4, [r7, #4]
   12258:	bne	12264 <__assert_fail@plt+0x1140>
   1225c:	add	sp, sp, #32
   12260:	pop	{r4, r5, r6, r7, r8, pc}
   12264:	bl	10f20 <__stack_chk_fail@plt>
   12268:	andeq	r0, r3, r8, lsl #30
   1226c:	andeq	r1, r3, ip, ror r1
   12270:	push	{r4, r5, r6, lr}
   12274:	mov	r0, #1
   12278:	ldr	r5, [pc, #80]	; 122d0 <__assert_fail@plt+0x11ac>
   1227c:	ldm	r5, {r3, r4}
   12280:	sub	r4, r4, r3
   12284:	mov	r1, r3
   12288:	mov	r2, r4
   1228c:	bl	16b68 <__assert_fail@plt+0x5a44>
   12290:	cmp	r0, r4
   12294:	bne	122a4 <__assert_fail@plt+0x1180>
   12298:	ldr	r3, [r5]
   1229c:	str	r3, [r5, #4]
   122a0:	pop	{r4, r5, r6, pc}
   122a4:	bl	11028 <__errno_location@plt>
   122a8:	mov	r2, #5
   122ac:	ldr	r1, [pc, #32]	; 122d4 <__assert_fail@plt+0x11b0>
   122b0:	ldr	r4, [r0]
   122b4:	mov	r0, #0
   122b8:	bl	10f08 <dcgettext@plt>
   122bc:	mov	r1, r4
   122c0:	ldr	r2, [pc, #16]	; 122d8 <__assert_fail@plt+0x11b4>
   122c4:	mov	r3, r0
   122c8:	mov	r0, #1
   122cc:	bl	10f98 <error@plt>
   122d0:	andeq	r1, r3, ip, ror r1
   122d4:	andeq	r0, r2, r8, asr r3
   122d8:	andeq	r0, r2, r0, ror r7
   122dc:	push	{r4, r5, r6, r7, r8, lr}
   122e0:	mov	r4, r2
   122e4:	mov	r5, r3
   122e8:	orrs	r3, r4, r5
   122ec:	ldrd	r6, [sp, #24]
   122f0:	beq	12310 <__assert_fail@plt+0x11ec>
   122f4:	mov	r3, r0
   122f8:	ldrd	r0, [r0, #8]
   122fc:	orrs	r2, r0, r1
   12300:	bne	12328 <__assert_fail@plt+0x1204>
   12304:	strd	r6, [r3]
   12308:	strd	r4, [r3, #8]
   1230c:	pop	{r4, r5, r6, r7, r8, pc}
   12310:	mov	r1, #1
   12314:	mov	r2, r6
   12318:	mov	r3, r7
   1231c:	str	r1, [sp, #24]
   12320:	pop	{r4, r5, r6, r7, r8, lr}
   12324:	b	11448 <__assert_fail@plt+0x324>
   12328:	ldr	r3, [pc, #12]	; 1233c <__assert_fail@plt+0x1218>
   1232c:	ldr	r2, [pc, #12]	; 12340 <__assert_fail@plt+0x121c>
   12330:	ldr	r1, [pc, #12]	; 12344 <__assert_fail@plt+0x1220>
   12334:	ldr	r0, [pc, #12]	; 12348 <__assert_fail@plt+0x1224>
   12338:	bl	11124 <__assert_fail@plt>
   1233c:	andeq	sp, r1, ip, lsr #4
   12340:	andeq	r0, r0, r5, lsr r2
   12344:	andeq	r0, r2, r8, ror #5
   12348:	andeq	r0, r2, r4, ror #6
   1234c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12350:	sub	sp, sp, #60	; 0x3c
   12354:	mov	fp, #0
   12358:	ldr	ip, [sp, #96]	; 0x60
   1235c:	mov	r5, fp
   12360:	and	r4, ip, #1
   12364:	orrs	r1, r4, r5
   12368:	str	r0, [sp, #36]	; 0x24
   1236c:	ldr	lr, [sp, #100]	; 0x64
   12370:	ldrd	r4, [sp, #104]	; 0x68
   12374:	ldrd	r6, [sp, #112]	; 0x70
   12378:	bne	123b8 <__assert_fail@plt+0x1294>
   1237c:	lsr	ip, ip, #1
   12380:	orr	ip, ip, lr, lsl #31
   12384:	lsr	sl, r2, #1
   12388:	and	r0, ip, #1
   1238c:	mov	r1, fp
   12390:	orr	sl, sl, r3, lsl #31
   12394:	lsl	r7, r2, #31
   12398:	lsr	r5, r3, #1
   1239c:	orrs	r4, r0, r1
   123a0:	mov	r2, sl
   123a4:	orr	lr, r7, lr, lsr #1
   123a8:	mov	r3, r5
   123ac:	beq	1237c <__assert_fail@plt+0x1258>
   123b0:	ldrd	r4, [sp, #104]	; 0x68
   123b4:	ldrd	r6, [sp, #112]	; 0x70
   123b8:	mov	r1, lr
   123bc:	mov	r0, ip
   123c0:	mov	lr, #0
   123c4:	strd	r8, [sp, #8]
   123c8:	orr	ip, r2, r4
   123cc:	str	ip, [sp]
   123d0:	orr	ip, r3, r5
   123d4:	str	ip, [sp, #4]
   123d8:	ldrd	r8, [sp]
   123dc:	orrs	ip, r8, r9
   123e0:	beq	1250c <__assert_fail@plt+0x13e8>
   123e4:	cmp	r3, r5
   123e8:	cmpeq	r2, r4
   123ec:	bhi	1249c <__assert_fail@plt+0x1378>
   123f0:	moveq	ip, #1
   123f4:	movne	ip, #0
   123f8:	cmp	r1, r7
   123fc:	cmpeq	r0, r6
   12400:	movhi	r8, #1
   12404:	movls	r8, #0
   12408:	tst	ip, r8
   1240c:	bne	1249c <__assert_fail@plt+0x1378>
   12410:	cmp	r3, r5
   12414:	cmpeq	r2, r4
   12418:	bcc	12434 <__assert_fail@plt+0x1310>
   1241c:	cmp	r1, r7
   12420:	cmpeq	r0, r6
   12424:	movcs	ip, #0
   12428:	andcc	ip, ip, #1
   1242c:	cmp	ip, #0
   12430:	beq	125c4 <__assert_fail@plt+0x14a0>
   12434:	subs	r6, r6, r0
   12438:	sbc	r7, r7, r1
   1243c:	subs	ip, r4, r2
   12440:	str	ip, [sp, #16]
   12444:	sbc	ip, r5, r3
   12448:	str	ip, [sp, #20]
   1244c:	ldrd	r4, [sp, #16]
   12450:	strd	r2, [sp, #24]
   12454:	subs	r4, r4, r8
   12458:	sbc	r5, r5, #0
   1245c:	lsr	r3, r6, #1
   12460:	orr	r6, r3, r7, lsl #31
   12464:	lsr	ip, r7, #1
   12468:	orr	r7, ip, r4, lsl #31
   1246c:	and	r8, r6, #1
   12470:	lsr	ip, r4, #1
   12474:	mov	r9, lr
   12478:	orr	ip, ip, r5, lsl #31
   1247c:	orrs	r3, r8, r9
   12480:	lsr	r3, r5, #1
   12484:	mov	r4, ip
   12488:	mov	r5, r3
   1248c:	beq	1245c <__assert_fail@plt+0x1338>
   12490:	ldrd	r2, [sp, #24]
   12494:	strd	r8, [sp, #8]
   12498:	b	123c8 <__assert_fail@plt+0x12a4>
   1249c:	cmp	r1, r7
   124a0:	cmpeq	r0, r6
   124a4:	movcc	ip, #1
   124a8:	movcs	ip, #0
   124ac:	subs	r0, r0, r6
   124b0:	sbc	r1, r1, r7
   124b4:	subs	r8, r2, r4
   124b8:	sbc	r9, r3, r5
   124bc:	subs	r2, r8, ip
   124c0:	sbc	r3, r9, lr
   124c4:	ldrd	r8, [sp, #8]
   124c8:	strd	r4, [sp, #104]	; 0x68
   124cc:	lsr	r5, r0, #1
   124d0:	orr	r0, r5, r1, lsl #31
   124d4:	lsr	ip, r1, #1
   124d8:	orr	r1, ip, r2, lsl #31
   124dc:	and	sl, r0, #1
   124e0:	lsr	ip, r2, #1
   124e4:	mov	fp, lr
   124e8:	orr	ip, ip, r3, lsl #31
   124ec:	lsr	r5, r3, #1
   124f0:	orrs	r4, sl, fp
   124f4:	mov	r2, ip
   124f8:	mov	r3, r5
   124fc:	beq	124cc <__assert_fail@plt+0x13a8>
   12500:	ldrd	r4, [sp, #104]	; 0x68
   12504:	strd	r8, [sp, #8]
   12508:	b	123c8 <__assert_fail@plt+0x12a4>
   1250c:	and	r2, r0, #1
   12510:	mov	r3, #0
   12514:	ldr	ip, [sp, #36]	; 0x24
   12518:	orrs	r3, r2, r3
   1251c:	mov	r2, r8
   12520:	mov	r3, r9
   12524:	strd	r2, [ip]
   12528:	bne	125b4 <__assert_fail@plt+0x1490>
   1252c:	lsr	ip, r6, #1
   12530:	orr	ip, ip, r7, lsl #31
   12534:	lsr	r4, r7, #1
   12538:	mov	r7, #0
   1253c:	b	1255c <__assert_fail@plt+0x1438>
   12540:	ldr	r1, [sp]
   12544:	adds	ip, ip, r6
   12548:	adc	r4, r4, r1
   1254c:	subs	r3, r3, lr
   12550:	sbc	r2, r2, lr
   12554:	mov	r0, r3
   12558:	mov	r1, r2
   1255c:	and	sl, r0, #1
   12560:	mov	fp, r7
   12564:	orrs	r3, sl, fp
   12568:	lsr	r3, r0, #1
   1256c:	orr	r3, r3, r1, lsl #31
   12570:	lsr	r2, r1, #1
   12574:	beq	12554 <__assert_fail@plt+0x1430>
   12578:	subs	r8, r3, ip
   1257c:	sbc	r9, r2, r4
   12580:	orrs	r3, r8, r9
   12584:	asr	lr, r9, #31
   12588:	and	r3, r9, lr
   1258c:	str	r3, [sp]
   12590:	and	r6, r8, lr
   12594:	eor	r3, r8, lr
   12598:	eor	r2, r9, lr
   1259c:	bne	12540 <__assert_fail@plt+0x141c>
   125a0:	bic	r3, r0, #1
   125a4:	adds	r0, r3, #1
   125a8:	adc	r1, r1, #0
   125ac:	add	sp, sp, #60	; 0x3c
   125b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b4:	orrs	r3, r6, r7
   125b8:	bne	125d4 <__assert_fail@plt+0x14b0>
   125bc:	add	sp, sp, #60	; 0x3c
   125c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125c4:	ldr	ip, [sp, #36]	; 0x24
   125c8:	strd	r2, [ip]
   125cc:	add	sp, sp, #60	; 0x3c
   125d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125d4:	mov	r2, r0
   125d8:	mov	r3, r1
   125dc:	mov	r0, r6
   125e0:	mov	r1, r7
   125e4:	mov	r6, r2
   125e8:	mov	r7, r3
   125ec:	b	1252c <__assert_fail@plt+0x1408>
   125f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125f4:	sub	sp, sp, #20
   125f8:	ldr	ip, [sp, #72]	; 0x48
   125fc:	str	r0, [sp, #8]
   12600:	ldrd	r0, [sp, #64]	; 0x40
   12604:	str	ip, [sp, #12]
   12608:	ldr	ip, [sp, #76]	; 0x4c
   1260c:	orrs	r1, r0, r1
   12610:	str	ip, [sp, #4]
   12614:	ldrd	r0, [sp, #56]	; 0x38
   12618:	beq	12814 <__assert_fail@plt+0x16f0>
   1261c:	orrs	ip, r2, r3
   12620:	beq	127f0 <__assert_fail@plt+0x16cc>
   12624:	ldr	lr, [sp, #68]	; 0x44
   12628:	mov	ip, #0
   1262c:	mov	r4, ip
   12630:	and	r5, lr, #-16777216	; 0xff000000
   12634:	orrs	lr, r4, r5
   12638:	bne	12800 <__assert_fail@plt+0x16dc>
   1263c:	ldrd	r4, [sp, #64]	; 0x40
   12640:	mov	fp, ip
   12644:	lsl	lr, r5, #8
   12648:	orr	lr, lr, r4, lsr #24
   1264c:	mov	r6, fp
   12650:	and	r7, lr, #-16777216	; 0xff000000
   12654:	lsl	sl, r4, #8
   12658:	mov	r5, lr
   1265c:	orrs	lr, r6, r7
   12660:	mov	r4, sl
   12664:	add	ip, ip, #8
   12668:	beq	12644 <__assert_fail@plt+0x1520>
   1266c:	cmp	r4, #0
   12670:	sbcs	lr, r5, #0
   12674:	blt	12690 <__assert_fail@plt+0x156c>
   12678:	adds	r4, r4, r4
   1267c:	adc	r5, r5, r5
   12680:	cmp	r4, #0
   12684:	sbcs	lr, r5, #0
   12688:	add	ip, ip, #1
   1268c:	bge	12678 <__assert_fail@plt+0x1554>
   12690:	mov	lr, #0
   12694:	mov	r4, lr
   12698:	and	r5, r3, #-16777216	; 0xff000000
   1269c:	orrs	r4, r4, r5
   126a0:	bne	12808 <__assert_fail@plt+0x16e4>
   126a4:	mov	sl, lr
   126a8:	mov	r4, r2
   126ac:	mov	r5, r3
   126b0:	lsl	r6, r5, #8
   126b4:	orr	r6, r6, r4, lsr #24
   126b8:	mov	r8, sl
   126bc:	and	r9, r6, #-16777216	; 0xff000000
   126c0:	lsl	r7, r4, #8
   126c4:	mov	r5, r6
   126c8:	orrs	r6, r8, r9
   126cc:	mov	r4, r7
   126d0:	add	lr, lr, #8
   126d4:	beq	126b0 <__assert_fail@plt+0x158c>
   126d8:	cmp	r4, #0
   126dc:	sbcs	r6, r5, #0
   126e0:	blt	126fc <__assert_fail@plt+0x15d8>
   126e4:	adds	r4, r4, r4
   126e8:	adc	r5, r5, r5
   126ec:	cmp	r4, #0
   126f0:	sbcs	r6, r5, #0
   126f4:	add	lr, lr, #1
   126f8:	bge	126e4 <__assert_fail@plt+0x15c0>
   126fc:	sub	ip, ip, lr
   12700:	ldr	sl, [sp, #12]
   12704:	rsb	r9, ip, #64	; 0x40
   12708:	ldr	fp, [sp, #4]
   1270c:	rsb	lr, r9, #32
   12710:	lsr	r8, sl, r9
   12714:	sub	r5, r9, #32
   12718:	orr	r8, r8, fp, lsl lr
   1271c:	ldr	lr, [sp, #68]	; 0x44
   12720:	orr	r8, r8, fp, lsr r5
   12724:	lsl	r7, fp, ip
   12728:	ldr	r5, [sp, #64]	; 0x40
   1272c:	ldr	fp, [sp, #64]	; 0x40
   12730:	sub	r4, ip, #32
   12734:	lsl	lr, lr, ip
   12738:	orr	r7, r7, sl, lsl r4
   1273c:	orr	lr, lr, r5, lsl r4
   12740:	orr	r4, r8, fp, lsl ip
   12744:	rsb	r8, ip, #32
   12748:	cmp	ip, #0
   1274c:	orr	lr, lr, fp, lsr r8
   12750:	ldr	fp, [sp, #4]
   12754:	orr	r7, r7, sl, lsr r8
   12758:	orr	r5, lr, fp, lsr r9
   1275c:	lsl	r6, sl, ip
   12760:	ble	127f0 <__assert_fail@plt+0x16cc>
   12764:	mov	r8, #0
   12768:	mov	fp, r8
   1276c:	cmp	r3, r5
   12770:	cmpeq	r2, r4
   12774:	bhi	12798 <__assert_fail@plt+0x1674>
   12778:	moveq	lr, #1
   1277c:	movne	lr, #0
   12780:	cmp	r1, r7
   12784:	cmpeq	r0, r6
   12788:	movcc	lr, #0
   1278c:	andcs	lr, lr, #1
   12790:	cmp	lr, #0
   12794:	beq	127c0 <__assert_fail@plt+0x169c>
   12798:	cmp	r1, r7
   1279c:	cmpeq	r0, r6
   127a0:	movcc	lr, #1
   127a4:	movcs	lr, #0
   127a8:	subs	r0, r0, r6
   127ac:	sbc	r1, r1, r7
   127b0:	subs	r9, r2, r4
   127b4:	sbc	sl, r3, r5
   127b8:	subs	r2, r9, lr
   127bc:	sbc	r3, sl, fp
   127c0:	lsr	lr, r6, #1
   127c4:	lsr	r9, r7, #1
   127c8:	orr	r6, lr, r7, lsl #31
   127cc:	add	r8, r8, #1
   127d0:	lsr	lr, r4, #1
   127d4:	orr	r7, r9, r4, lsl #31
   127d8:	orr	lr, lr, r5, lsl #31
   127dc:	lsr	r9, r5, #1
   127e0:	cmp	ip, r8
   127e4:	mov	r4, lr
   127e8:	mov	r5, r9
   127ec:	bne	1276c <__assert_fail@plt+0x1648>
   127f0:	ldr	ip, [sp, #8]
   127f4:	strd	r2, [ip]
   127f8:	add	sp, sp, #20
   127fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12800:	ldrd	r4, [sp, #64]	; 0x40
   12804:	b	1266c <__assert_fail@plt+0x1548>
   12808:	mov	r4, r2
   1280c:	mov	r5, r3
   12810:	b	126d8 <__assert_fail@plt+0x15b4>
   12814:	ldr	r3, [pc, #12]	; 12828 <__assert_fail@plt+0x1704>
   12818:	ldr	r2, [pc, #12]	; 1282c <__assert_fail@plt+0x1708>
   1281c:	ldr	r1, [pc, #12]	; 12830 <__assert_fail@plt+0x170c>
   12820:	ldr	r0, [pc, #12]	; 12834 <__assert_fail@plt+0x1710>
   12824:	bl	11124 <__assert_fail@plt>
   12828:	andeq	sp, r1, r0, asr #4
   1282c:	andeq	r0, r0, r3, lsr #3
   12830:	andeq	r0, r2, r8, ror #5
   12834:	andeq	r0, r2, ip, ror r3
   12838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1283c:	mov	r4, r0
   12840:	mov	r5, r1
   12844:	orrs	ip, r4, r5
   12848:	mov	sl, r2
   1284c:	moveq	r0, r2
   12850:	sub	sp, sp, #20
   12854:	mov	fp, r3
   12858:	moveq	r1, r3
   1285c:	moveq	r2, #0
   12860:	beq	12964 <__assert_fail@plt+0x1840>
   12864:	add	r3, pc, #260	; 0x104
   12868:	ldrd	r2, [r3]
   1286c:	bl	1d01c <__assert_fail@plt+0xbef8>
   12870:	add	r3, pc, #248	; 0xf8
   12874:	ldrd	r2, [r3]
   12878:	strd	r0, [sp, #8]
   1287c:	mov	r0, r4
   12880:	mov	r1, r5
   12884:	bl	1d01c <__assert_fail@plt+0xbef8>
   12888:	add	r1, pc, #224	; 0xe0
   1288c:	ldrd	r0, [r1]
   12890:	mov	lr, #64	; 0x40
   12894:	mov	r6, r2
   12898:	mov	r2, #0
   1289c:	mov	r7, r3
   128a0:	mov	r4, r2
   128a4:	mov	r3, r2
   128a8:	mov	r5, r2
   128ac:	lsr	ip, r4, #1
   128b0:	orr	r4, ip, r5, lsl #31
   128b4:	lsr	ip, r0, #1
   128b8:	orr	ip, ip, r1, lsl #31
   128bc:	lsr	r8, r5, #1
   128c0:	orr	r5, r8, r0, lsl #31
   128c4:	lsr	r8, r1, #1
   128c8:	mov	r0, ip
   128cc:	mov	ip, #0
   128d0:	mov	r1, r8
   128d4:	str	ip, [sp, #4]
   128d8:	adds	ip, r2, r2
   128dc:	adc	r8, r3, r3
   128e0:	cmp	r1, r7
   128e4:	cmpeq	r0, r6
   128e8:	moveq	r9, #1
   128ec:	movne	r9, #0
   128f0:	mov	r3, r8
   128f4:	mov	r2, ip
   128f8:	bcc	12914 <__assert_fail@plt+0x17f0>
   128fc:	cmp	r5, fp
   12900:	cmpeq	r4, sl
   12904:	movhi	r9, #0
   12908:	andls	r9, r9, #1
   1290c:	cmp	r9, #0
   12910:	beq	12948 <__assert_fail@plt+0x1824>
   12914:	adds	r2, ip, #1
   12918:	adc	r3, r8, #0
   1291c:	cmp	r5, fp
   12920:	cmpeq	r4, sl
   12924:	movhi	ip, #1
   12928:	movls	ip, #0
   1292c:	subs	sl, sl, r4
   12930:	sbc	fp, fp, r5
   12934:	subs	r8, r6, r0
   12938:	sbc	r9, r7, r1
   1293c:	subs	r6, r8, ip
   12940:	mov	ip, #0
   12944:	sbc	r7, r9, ip
   12948:	subs	lr, lr, #1
   1294c:	bne	128ac <__assert_fail@plt+0x1788>
   12950:	ldrd	r0, [sp, #8]
   12954:	bl	12838 <__assert_fail@plt+0x1714>
   12958:	mov	r0, sl
   1295c:	mov	r1, fp
   12960:	mov	r2, #9
   12964:	add	sp, sp, #20
   12968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1296c:	b	121d8 <__assert_fail@plt+0x10b4>
   12970:	blcc	fe6c5178 <stdout@@GLIBC_2.4+0xfe694004>
   12974:	andeq	r0, r0, r0
   12978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1297c:	mov	sl, r2
   12980:	sub	sp, sp, #116	; 0x74
   12984:	and	r2, sl, #1
   12988:	mov	fp, r3
   1298c:	mov	r3, #0
   12990:	orrs	r3, r2, r3
   12994:	ldr	r3, [sp, #152]	; 0x98
   12998:	mov	ip, r1
   1299c:	str	r3, [sp, #104]	; 0x68
   129a0:	ldr	r3, [sp, #156]	; 0x9c
   129a4:	mov	r2, r0
   129a8:	str	r3, [sp, #108]	; 0x6c
   129ac:	ldr	r3, [sp, #160]	; 0xa0
   129b0:	ldr	lr, [sp, #168]	; 0xa8
   129b4:	str	r3, [sp, #72]	; 0x48
   129b8:	ldr	r3, [sp, #164]	; 0xa4
   129bc:	ldr	r1, [sp, #172]	; 0xac
   129c0:	str	r3, [sp, #76]	; 0x4c
   129c4:	bne	12c68 <__assert_fail@plt+0x1b44>
   129c8:	orrs	r3, sl, fp
   129cc:	beq	12c5c <__assert_fail@plt+0x1b38>
   129d0:	mov	r3, #0
   129d4:	str	r3, [sp, #44]	; 0x2c
   129d8:	ldr	r3, [sp, #108]	; 0x6c
   129dc:	mov	r6, r1
   129e0:	str	r3, [sp, #80]	; 0x50
   129e4:	ldr	r3, [sp, #104]	; 0x68
   129e8:	str	r3, [sp, #84]	; 0x54
   129ec:	umull	r4, r5, ip, r2
   129f0:	umull	r2, r3, r2, r2
   129f4:	umull	r0, r1, ip, ip
   129f8:	ldr	ip, [sp, #44]	; 0x2c
   129fc:	adds	r7, r4, r4
   12a00:	strd	r2, [sp, #48]	; 0x30
   12a04:	adc	r8, r5, r5
   12a08:	adds	r3, r3, r7
   12a0c:	str	r3, [sp]
   12a10:	adc	r3, ip, r8
   12a14:	str	r3, [sp, #4]
   12a18:	ldrd	r2, [sp]
   12a1c:	cmp	r5, r3
   12a20:	cmpeq	r4, r2
   12a24:	bls	12a30 <__assert_fail@plt+0x190c>
   12a28:	adds	r0, r0, #0
   12a2c:	adc	r1, r1, #1
   12a30:	ldrd	r4, [sp]
   12a34:	mov	ip, #0
   12a38:	ldr	r2, [sp, #48]	; 0x30
   12a3c:	adds	r3, r5, r0
   12a40:	str	r3, [sp, #16]
   12a44:	adc	r3, ip, r1
   12a48:	str	r3, [sp, #20]
   12a4c:	ldr	r3, [sp, #76]	; 0x4c
   12a50:	adds	r0, ip, r2
   12a54:	mov	r2, r4
   12a58:	mul	r4, r0, r3
   12a5c:	adc	r3, r2, ip
   12a60:	ldr	r2, [sp, #72]	; 0x48
   12a64:	umull	r0, r1, r0, r2
   12a68:	mla	r2, r2, r3, r4
   12a6c:	ldr	r3, [sp, #80]	; 0x50
   12a70:	add	r2, r2, r1
   12a74:	umull	r4, r5, r3, r0
   12a78:	strd	r4, [sp, #48]	; 0x30
   12a7c:	ldr	r4, [sp, #84]	; 0x54
   12a80:	umull	r8, r9, r0, r4
   12a84:	umull	r0, r1, r2, r4
   12a88:	mov	r7, r9
   12a8c:	umull	r8, r9, r2, r3
   12a90:	ldrd	r2, [sp, #48]	; 0x30
   12a94:	adds	r4, r2, r0
   12a98:	adc	r5, r3, r1
   12a9c:	adds	r3, r7, r4
   12aa0:	str	r3, [sp, #8]
   12aa4:	adc	r3, ip, r5
   12aa8:	str	r3, [sp, #12]
   12aac:	ldrd	r2, [sp, #8]
   12ab0:	cmp	r1, r3
   12ab4:	cmpeq	r0, r2
   12ab8:	bls	12ac4 <__assert_fail@plt+0x19a0>
   12abc:	adds	r8, r8, ip
   12ac0:	adc	r9, r9, #1
   12ac4:	ldr	r1, [sp, #12]
   12ac8:	mov	r2, #0
   12acc:	adds	r3, r1, r8
   12ad0:	str	r3, [sp, #24]
   12ad4:	adc	r3, r2, r9
   12ad8:	str	r3, [sp, #28]
   12adc:	ldrd	r0, [sp, #16]
   12ae0:	ldrd	r4, [sp, #24]
   12ae4:	subs	r2, r0, r4
   12ae8:	sbc	ip, r1, r5
   12aec:	cmp	r1, r5
   12af0:	cmpeq	r0, r4
   12af4:	bcs	12b08 <__assert_fail@plt+0x19e4>
   12af8:	ldr	r3, [sp, #104]	; 0x68
   12afc:	adds	r2, r2, r3
   12b00:	ldr	r3, [sp, #108]	; 0x6c
   12b04:	adc	ip, ip, r3
   12b08:	lsr	r3, sl, #1
   12b0c:	orr	r3, r3, fp, lsl #31
   12b10:	mov	sl, r3
   12b14:	and	r3, r3, #1
   12b18:	str	r3, [sp, #32]
   12b1c:	ldr	r3, [sp, #44]	; 0x2c
   12b20:	lsr	r1, fp, #1
   12b24:	str	r3, [sp, #36]	; 0x24
   12b28:	mov	fp, r1
   12b2c:	ldrd	r0, [sp, #32]
   12b30:	orrs	r1, r0, r1
   12b34:	beq	12c50 <__assert_fail@plt+0x1b2c>
   12b38:	umull	r0, r1, r6, r2
   12b3c:	umull	r8, r9, lr, r2
   12b40:	ldr	r3, [sp, #44]	; 0x2c
   12b44:	mov	r4, r0
   12b48:	mov	r5, r1
   12b4c:	umlal	r4, r5, lr, ip
   12b50:	umull	r6, r7, r6, ip
   12b54:	adds	lr, r9, r4
   12b58:	adc	r3, r3, r5
   12b5c:	str	lr, [sp, #56]	; 0x38
   12b60:	str	r3, [sp, #60]	; 0x3c
   12b64:	ldrd	r4, [sp, #56]	; 0x38
   12b68:	cmp	r1, r5
   12b6c:	cmpeq	r0, r4
   12b70:	bls	12b7c <__assert_fail@plt+0x1a58>
   12b74:	adds	r6, r6, #0
   12b78:	adc	r7, r7, #1
   12b7c:	ldrd	r4, [sp, #56]	; 0x38
   12b80:	mov	r3, #0
   12b84:	ldr	r0, [sp, #72]	; 0x48
   12b88:	adds	r1, r5, r6
   12b8c:	str	r1, [sp, #88]	; 0x58
   12b90:	adc	r1, r3, r7
   12b94:	str	r1, [sp, #92]	; 0x5c
   12b98:	ldr	r1, [sp, #76]	; 0x4c
   12b9c:	adds	r8, r3, r8
   12ba0:	ldr	r5, [sp, #80]	; 0x50
   12ba4:	mul	r1, r8, r1
   12ba8:	umull	r8, r9, r8, r0
   12bac:	ldr	r6, [sp, #84]	; 0x54
   12bb0:	adc	r4, r4, r3
   12bb4:	mla	r4, r0, r4, r1
   12bb8:	umull	r0, r1, r5, r8
   12bbc:	add	r4, r4, r9
   12bc0:	strd	r0, [sp, #48]	; 0x30
   12bc4:	umull	r0, r1, r8, r6
   12bc8:	ldrd	r8, [sp, #48]	; 0x30
   12bcc:	mov	lr, r1
   12bd0:	umull	r0, r1, r4, r6
   12bd4:	umull	r4, r5, r5, r4
   12bd8:	adds	r6, r8, r0
   12bdc:	adc	r7, r9, r1
   12be0:	adds	lr, lr, r6
   12be4:	adc	r3, r3, r7
   12be8:	str	lr, [sp, #64]	; 0x40
   12bec:	str	r3, [sp, #68]	; 0x44
   12bf0:	ldrd	r6, [sp, #64]	; 0x40
   12bf4:	cmp	r1, r7
   12bf8:	cmpeq	r0, r6
   12bfc:	bls	12c08 <__assert_fail@plt+0x1ae4>
   12c00:	adds	r4, r4, #0
   12c04:	adc	r5, r5, #1
   12c08:	ldr	r3, [sp, #68]	; 0x44
   12c0c:	ldrd	r0, [sp, #88]	; 0x58
   12c10:	adds	r3, r3, r4
   12c14:	str	r3, [sp, #96]	; 0x60
   12c18:	mov	r3, #0
   12c1c:	adc	r3, r3, r5
   12c20:	str	r3, [sp, #100]	; 0x64
   12c24:	ldrd	r4, [sp, #96]	; 0x60
   12c28:	subs	lr, r0, r4
   12c2c:	sbc	r6, r1, r5
   12c30:	cmp	r1, r5
   12c34:	cmpeq	r0, r4
   12c38:	bcs	129ec <__assert_fail@plt+0x18c8>
   12c3c:	ldr	r3, [sp, #104]	; 0x68
   12c40:	adds	lr, lr, r3
   12c44:	ldr	r3, [sp, #108]	; 0x6c
   12c48:	adc	r6, r6, r3
   12c4c:	b	129ec <__assert_fail@plt+0x18c8>
   12c50:	orrs	r3, sl, fp
   12c54:	bne	129ec <__assert_fail@plt+0x18c8>
   12c58:	mov	r1, r6
   12c5c:	mov	r0, lr
   12c60:	add	sp, sp, #116	; 0x74
   12c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c68:	mov	lr, r0
   12c6c:	mov	r1, ip
   12c70:	b	129d0 <__assert_fail@plt+0x18ac>
   12c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c78:	sub	sp, sp, #100	; 0x64
   12c7c:	mov	r4, r0
   12c80:	strd	r2, [sp, #72]	; 0x48
   12c84:	strd	r2, [sp, #8]
   12c88:	ldrd	r2, [sp, #160]	; 0xa0
   12c8c:	str	r0, [sp, #88]	; 0x58
   12c90:	mov	r5, r1
   12c94:	str	r1, [sp, #92]	; 0x5c
   12c98:	strd	r0, [sp]
   12c9c:	strd	r2, [sp, #16]
   12ca0:	ldrd	r0, [sp, #136]	; 0x88
   12ca4:	ldrd	r2, [sp, #144]	; 0x90
   12ca8:	bl	12978 <__assert_fail@plt+0x1854>
   12cac:	ldr	r3, [sp, #160]	; 0xa0
   12cb0:	subs	r3, r4, r3
   12cb4:	str	r3, [sp, #64]	; 0x40
   12cb8:	ldr	r3, [sp, #164]	; 0xa4
   12cbc:	sbc	r3, r5, r3
   12cc0:	str	r3, [sp, #68]	; 0x44
   12cc4:	ldrd	r2, [sp, #160]	; 0xa0
   12cc8:	cmp	r3, r1
   12ccc:	cmpeq	r2, r0
   12cd0:	ldrd	r2, [sp, #64]	; 0x40
   12cd4:	mov	sl, r0
   12cd8:	movne	r0, #0
   12cdc:	moveq	r0, #1
   12ce0:	cmp	r1, r3
   12ce4:	cmpeq	sl, r2
   12ce8:	movne	lr, r0
   12cec:	moveq	lr, #1
   12cf0:	cmp	lr, #0
   12cf4:	mov	fp, r1
   12cf8:	bne	12e88 <__assert_fail@plt+0x1d64>
   12cfc:	ldr	r3, [sp, #152]	; 0x98
   12d00:	cmp	r3, #1
   12d04:	bls	12e88 <__assert_fail@plt+0x1d64>
   12d08:	mov	ip, #1
   12d0c:	str	ip, [sp, #28]
   12d10:	str	r5, [sp, #80]	; 0x50
   12d14:	str	r4, [sp, #84]	; 0x54
   12d18:	mov	ip, lr
   12d1c:	b	12d40 <__assert_fail@plt+0x1c1c>
   12d20:	ldrd	r2, [sp, #160]	; 0xa0
   12d24:	cmp	r3, fp
   12d28:	cmpeq	r2, sl
   12d2c:	beq	12e94 <__assert_fail@plt+0x1d70>
   12d30:	ldr	r3, [sp, #152]	; 0x98
   12d34:	ldr	r2, [sp, #28]
   12d38:	cmp	r3, r2
   12d3c:	beq	12e94 <__assert_fail@plt+0x1d70>
   12d40:	umull	r4, r5, fp, sl
   12d44:	umull	r6, r7, sl, sl
   12d48:	ldr	r3, [sp, #28]
   12d4c:	adds	lr, r4, r4
   12d50:	mov	r1, r6
   12d54:	mov	r6, r7
   12d58:	mov	r0, #0
   12d5c:	adc	r7, r5, r5
   12d60:	adds	lr, r6, lr
   12d64:	adc	r6, r0, r7
   12d68:	str	lr, [sp, #32]
   12d6c:	str	r6, [sp, #36]	; 0x24
   12d70:	ldrd	r8, [sp, #32]
   12d74:	add	r3, r3, #1
   12d78:	mov	r2, r0
   12d7c:	cmp	r5, r9
   12d80:	cmpeq	r4, r8
   12d84:	mov	lr, r0
   12d88:	mov	r7, r9
   12d8c:	mov	r6, r8
   12d90:	str	r3, [sp, #28]
   12d94:	umull	r4, r5, fp, fp
   12d98:	bls	12da4 <__assert_fail@plt+0x1c80>
   12d9c:	adds	r4, r4, r0
   12da0:	adc	r5, r5, #1
   12da4:	adds	r7, r7, r4
   12da8:	adc	r3, r5, #0
   12dac:	str	r3, [sp, #44]	; 0x2c
   12db0:	ldr	r3, [sp, #76]	; 0x4c
   12db4:	adds	r0, r0, r1
   12db8:	adc	r2, r6, r2
   12dbc:	mul	r6, r0, r3
   12dc0:	ldr	r3, [sp, #72]	; 0x48
   12dc4:	str	r7, [sp, #40]	; 0x28
   12dc8:	umull	r0, r1, r0, r3
   12dcc:	mla	r2, r3, r2, r6
   12dd0:	ldr	r3, [sp, #80]	; 0x50
   12dd4:	ldr	r6, [sp, #84]	; 0x54
   12dd8:	add	r2, r2, r1
   12ddc:	umull	r4, r5, r3, r0
   12de0:	mul	r8, ip, r0
   12de4:	umull	r0, r1, r0, r6
   12de8:	umull	r6, r7, r2, r6
   12dec:	mul	r9, r2, ip
   12df0:	add	r5, r8, r5
   12df4:	add	r7, r9, r7
   12df8:	add	r8, r8, r1
   12dfc:	adds	r1, r4, r6
   12e00:	adc	r4, r5, r7
   12e04:	adds	r1, r8, r1
   12e08:	str	r1, [sp, #48]	; 0x30
   12e0c:	adc	r1, lr, r4
   12e10:	str	r1, [sp, #52]	; 0x34
   12e14:	ldrd	r4, [sp, #48]	; 0x30
   12e18:	umull	r2, r3, r2, r3
   12e1c:	cmp	r7, r5
   12e20:	cmpeq	r6, r4
   12e24:	mov	r1, r5
   12e28:	add	r3, r9, r3
   12e2c:	bls	12e38 <__assert_fail@plt+0x1d14>
   12e30:	adds	r2, r2, #0
   12e34:	adc	r3, r3, #1
   12e38:	adds	r1, r1, r2
   12e3c:	adc	r3, r3, #0
   12e40:	str	r3, [sp, #60]	; 0x3c
   12e44:	str	r1, [sp, #56]	; 0x38
   12e48:	ldrd	r2, [sp, #40]	; 0x28
   12e4c:	ldrd	r0, [sp, #56]	; 0x38
   12e50:	subs	sl, r2, r0
   12e54:	sbc	fp, r3, r1
   12e58:	cmp	r3, r1
   12e5c:	cmpeq	r2, r0
   12e60:	bcs	12e74 <__assert_fail@plt+0x1d50>
   12e64:	ldr	r3, [sp, #88]	; 0x58
   12e68:	adds	sl, sl, r3
   12e6c:	ldr	r3, [sp, #92]	; 0x5c
   12e70:	adc	fp, fp, r3
   12e74:	ldrd	r2, [sp, #64]	; 0x40
   12e78:	cmp	r3, fp
   12e7c:	cmpeq	r2, sl
   12e80:	bne	12d20 <__assert_fail@plt+0x1bfc>
   12e84:	mov	lr, #1
   12e88:	mov	r0, lr
   12e8c:	add	sp, sp, #100	; 0x64
   12e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e94:	mov	lr, ip
   12e98:	mov	r0, lr
   12e9c:	add	sp, sp, #100	; 0x64
   12ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ea8:	mov	ip, #0
   12eac:	sub	sp, sp, #412	; 0x19c
   12eb0:	subs	lr, r0, #1
   12eb4:	mov	r4, r0
   12eb8:	mov	r5, r1
   12ebc:	and	r0, lr, #1
   12ec0:	mov	r1, ip
   12ec4:	strd	r4, [sp, #32]
   12ec8:	sbc	r4, r5, #0
   12ecc:	orrs	r1, r0, r1
   12ed0:	ldr	r1, [pc, #1416]	; 13460 <__assert_fail@plt+0x233c>
   12ed4:	str	lr, [sp, #92]	; 0x5c
   12ed8:	str	r4, [sp, #104]	; 0x68
   12edc:	ldr	r1, [r1]
   12ee0:	str	r1, [sp, #404]	; 0x194
   12ee4:	bne	13430 <__assert_fail@plt+0x230c>
   12ee8:	mov	r0, lr
   12eec:	mov	r1, ip
   12ef0:	mov	lr, r4
   12ef4:	lsr	r0, r0, #1
   12ef8:	orr	r0, r0, lr, lsl #31
   12efc:	and	r2, r0, #1
   12f00:	mov	r3, ip
   12f04:	orrs	r4, r2, r3
   12f08:	lsr	lr, lr, #1
   12f0c:	add	r1, r1, #1
   12f10:	beq	12ef4 <__assert_fail@plt+0x1dd0>
   12f14:	str	r0, [sp, #124]	; 0x7c
   12f18:	str	lr, [sp, #128]	; 0x80
   12f1c:	str	r1, [sp, #120]	; 0x78
   12f20:	ldrd	r0, [sp, #32]
   12f24:	ldr	r2, [pc, #1336]	; 13464 <__assert_fail@plt+0x2340>
   12f28:	mov	lr, #0
   12f2c:	lsl	r3, r0, #24
   12f30:	strd	r0, [sp, #96]	; 0x60
   12f34:	add	r3, r2, r3, lsr #25
   12f38:	mov	sl, #0
   12f3c:	ldrb	ip, [r3, #40]	; 0x28
   12f40:	mov	fp, #0
   12f44:	strd	sl, [sp, #72]	; 0x48
   12f48:	umull	r4, r5, ip, ip
   12f4c:	adds	ip, ip, ip
   12f50:	mul	r3, r4, r1
   12f54:	umull	r6, r7, r4, r0
   12f58:	mla	r4, r0, r5, r3
   12f5c:	adc	lr, lr, lr
   12f60:	subs	ip, ip, r6
   12f64:	add	r7, r4, r7
   12f68:	sbc	lr, lr, r7
   12f6c:	umull	r6, r7, ip, ip
   12f70:	mul	r4, ip, lr
   12f74:	umull	r2, r3, r6, r0
   12f78:	adds	r5, ip, ip
   12f7c:	mul	ip, r6, r1
   12f80:	mov	r1, r3
   12f84:	ldr	r3, [sp, #32]
   12f88:	add	r7, r7, r4, lsl #1
   12f8c:	mov	r0, r2
   12f90:	mla	ip, r3, r7, ip
   12f94:	adc	lr, lr, lr
   12f98:	add	r3, ip, r1
   12f9c:	subs	ip, r5, r0
   12fa0:	sbc	lr, lr, r3
   12fa4:	umull	r6, r7, ip, ip
   12fa8:	ldr	r3, [sp, #36]	; 0x24
   12fac:	mul	r5, ip, lr
   12fb0:	adds	r1, ip, ip
   12fb4:	mul	ip, r6, r3
   12fb8:	ldr	r3, [sp, #32]
   12fbc:	ldr	r0, [sp, #32]
   12fc0:	add	r7, r7, r5, lsl #1
   12fc4:	umull	r2, r3, r6, r3
   12fc8:	mla	ip, r0, r7, ip
   12fcc:	strd	r2, [sp, #40]	; 0x28
   12fd0:	add	r3, ip, r3
   12fd4:	str	r3, [sp, #44]	; 0x2c
   12fd8:	ldrd	r2, [sp, #40]	; 0x28
   12fdc:	adc	lr, lr, lr
   12fe0:	mov	r4, #64	; 0x40
   12fe4:	subs	r1, r1, r2
   12fe8:	sbc	r3, lr, r3
   12fec:	str	r3, [sp, #88]	; 0x58
   12ff0:	ldrd	r2, [sp, #96]	; 0x60
   12ff4:	str	r1, [sp, #60]	; 0x3c
   12ff8:	mov	r6, #1
   12ffc:	mov	r7, #0
   13000:	mov	r0, sl
   13004:	mov	r1, fp
   13008:	lsr	ip, r0, #1
   1300c:	lsr	lr, r1, #1
   13010:	orr	r0, ip, r1, lsl #31
   13014:	lsr	ip, r2, #1
   13018:	orr	r1, lr, r2, lsl #31
   1301c:	lsr	lr, r3, #1
   13020:	orr	ip, ip, r3, lsl #31
   13024:	cmp	lr, r7
   13028:	cmpeq	ip, r6
   1302c:	mov	r2, ip
   13030:	mov	r3, lr
   13034:	bcc	13058 <__assert_fail@plt+0x1f34>
   13038:	moveq	ip, #1
   1303c:	movne	ip, #0
   13040:	cmp	r1, fp
   13044:	cmpeq	r0, sl
   13048:	movhi	ip, #0
   1304c:	andls	ip, ip, #1
   13050:	cmp	ip, #0
   13054:	beq	13084 <__assert_fail@plt+0x1f60>
   13058:	cmp	r1, fp
   1305c:	cmpeq	r0, sl
   13060:	movhi	ip, #1
   13064:	movls	ip, #0
   13068:	subs	sl, sl, r0
   1306c:	sbc	fp, fp, r1
   13070:	subs	lr, r6, r2
   13074:	sbc	r5, r7, r3
   13078:	subs	r6, lr, ip
   1307c:	mov	ip, #0
   13080:	sbc	r7, r5, ip
   13084:	subs	r4, r4, #1
   13088:	bne	13008 <__assert_fail@plt+0x1ee4>
   1308c:	ldrd	r6, [sp, #32]
   13090:	strd	sl, [sp, #24]
   13094:	subs	r3, r6, sl
   13098:	str	r3, [sp, #64]	; 0x40
   1309c:	sbc	r3, r7, fp
   130a0:	str	r3, [sp, #68]	; 0x44
   130a4:	ldrd	r2, [sp, #64]	; 0x40
   130a8:	cmp	r3, fp
   130ac:	cmpeq	r2, sl
   130b0:	movhi	r0, #1
   130b4:	movls	r0, #0
   130b8:	rsbs	r2, r0, #0
   130bc:	sbc	r3, r3, r3
   130c0:	mov	r0, r2
   130c4:	mov	r1, r3
   130c8:	adds	r3, sl, sl
   130cc:	strd	r0, [sp, #40]	; 0x28
   130d0:	adc	r2, fp, fp
   130d4:	and	r0, r0, r6
   130d8:	subs	r3, r3, r6
   130dc:	sbc	r2, r2, r7
   130e0:	ldr	ip, [sp, #44]	; 0x2c
   130e4:	adds	r8, r0, r3
   130e8:	ldr	r3, [sp, #120]	; 0x78
   130ec:	and	ip, ip, r7
   130f0:	str	r3, [sp, #16]
   130f4:	ldr	r3, [sp, #124]	; 0x7c
   130f8:	mov	r1, ip
   130fc:	adc	r9, r1, r2
   13100:	str	r3, [sp, #8]
   13104:	ldr	r3, [sp, #128]	; 0x80
   13108:	strd	r8, [sp]
   1310c:	str	r3, [sp, #12]
   13110:	ldr	r2, [sp, #60]	; 0x3c
   13114:	ldr	r3, [sp, #88]	; 0x58
   13118:	mov	r0, r6
   1311c:	mov	r1, r7
   13120:	bl	12c74 <__assert_fail@plt+0x1b50>
   13124:	subs	r3, r0, #0
   13128:	str	r3, [sp, #140]	; 0x8c
   1312c:	beq	13424 <__assert_fail@plt+0x2300>
   13130:	ldr	r2, [pc, #816]	; 13468 <__assert_fail@plt+0x2344>
   13134:	add	r3, sp, #144	; 0x90
   13138:	str	r2, [sp, #72]	; 0x48
   1313c:	str	r3, [sp]
   13140:	ldr	r2, [sp, #92]	; 0x5c
   13144:	ldr	r3, [sp, #104]	; 0x68
   13148:	mov	r0, #0
   1314c:	mov	r1, #0
   13150:	bl	14ea0 <__assert_fail@plt+0x3d7c>
   13154:	ldrb	r3, [sp, #394]	; 0x18a
   13158:	mov	r5, r4
   1315c:	str	fp, [sp, #132]	; 0x84
   13160:	str	r3, [sp, #64]	; 0x40
   13164:	mov	r3, #2
   13168:	str	r3, [sp, #96]	; 0x60
   1316c:	mov	r3, #0
   13170:	str	r3, [sp, #108]	; 0x6c
   13174:	str	r4, [sp, #136]	; 0x88
   13178:	strd	sl, [sp, #40]	; 0x28
   1317c:	ldr	r3, [sp, #64]	; 0x40
   13180:	cmp	r3, #0
   13184:	beq	13404 <__assert_fail@plt+0x22e0>
   13188:	add	fp, sp, #160	; 0xa0
   1318c:	mov	r7, fp
   13190:	ldrd	sl, [sp, #40]	; 0x28
   13194:	mov	r4, #0
   13198:	ldrd	r2, [r7], #8
   1319c:	ldr	r0, [sp, #92]	; 0x5c
   131a0:	ldr	r1, [sp, #104]	; 0x68
   131a4:	bl	1d01c <__assert_fail@plt+0xbef8>
   131a8:	ldr	r3, [sp, #60]	; 0x3c
   131ac:	strd	sl, [sp, #16]
   131b0:	str	r3, [sp, #8]
   131b4:	ldr	r3, [sp, #88]	; 0x58
   131b8:	add	r4, r4, #1
   131bc:	str	r3, [sp, #12]
   131c0:	ldrd	r2, [sp, #32]
   131c4:	strd	r2, [sp]
   131c8:	mov	r3, r1
   131cc:	mov	r2, r0
   131d0:	mov	r1, r9
   131d4:	mov	r0, r8
   131d8:	bl	12978 <__assert_fail@plt+0x1854>
   131dc:	ldr	r3, [sp, #64]	; 0x40
   131e0:	cmp	r4, r3
   131e4:	beq	133f4 <__assert_fail@plt+0x22d0>
   131e8:	cmp	r1, fp
   131ec:	cmpeq	r0, sl
   131f0:	bne	13198 <__assert_fail@plt+0x2074>
   131f4:	ldr	r1, [sp, #72]	; 0x48
   131f8:	ldr	r0, [sp, #108]	; 0x6c
   131fc:	mov	r3, #0
   13200:	ldrb	r2, [r1, #1]!
   13204:	ldr	lr, [sp, #40]	; 0x28
   13208:	ldr	r4, [sp, #40]	; 0x28
   1320c:	str	r1, [sp, #72]	; 0x48
   13210:	ldr	r1, [sp, #96]	; 0x60
   13214:	adds	r1, r1, r2
   13218:	adc	ip, r0, r3
   1321c:	ldr	r0, [sp, #132]	; 0x84
   13220:	umull	r6, r7, lr, r1
   13224:	umull	r2, r3, r0, r1
   13228:	ldr	lr, [sp, #136]	; 0x88
   1322c:	mov	sl, r2
   13230:	mov	r2, sl
   13234:	mla	r3, lr, r1, r3
   13238:	str	r1, [sp, #96]	; 0x60
   1323c:	mov	fp, r3
   13240:	umlal	sl, fp, r4, ip
   13244:	strd	r6, [sp, #112]	; 0x70
   13248:	mov	r1, r7
   1324c:	adds	r1, r1, sl
   13250:	str	r1, [sp, #80]	; 0x50
   13254:	adc	r1, r5, fp
   13258:	umull	r6, r7, r0, ip
   1325c:	str	r1, [sp, #84]	; 0x54
   13260:	ldrd	sl, [sp, #80]	; 0x50
   13264:	ldr	r0, [sp, #112]	; 0x70
   13268:	str	ip, [sp, #108]	; 0x6c
   1326c:	adds	r8, r0, r5
   13270:	adc	r9, r5, sl
   13274:	cmp	r3, fp
   13278:	mla	r3, lr, ip, r7
   1327c:	cmpeq	r2, sl
   13280:	mov	r7, r3
   13284:	bls	133bc <__assert_fail@plt+0x2298>
   13288:	adds	r2, r6, #0
   1328c:	adc	r3, r7, #1
   13290:	adds	r2, r2, fp
   13294:	adc	r3, r3, r5
   13298:	str	r2, [sp, #48]	; 0x30
   1329c:	str	r3, [sp, #52]	; 0x34
   132a0:	ldrd	r2, [sp, #32]
   132a4:	ldrd	r0, [sp, #48]	; 0x30
   132a8:	cmp	r3, r1
   132ac:	cmpeq	r2, r0
   132b0:	bls	1344c <__assert_fail@plt+0x2328>
   132b4:	ldrd	r2, [sp, #32]
   132b8:	ldrd	r6, [sp, #48]	; 0x30
   132bc:	mov	ip, #64	; 0x40
   132c0:	mov	r0, #0
   132c4:	mov	r1, #0
   132c8:	lsr	lr, r0, #1
   132cc:	lsr	r4, r1, #1
   132d0:	orr	r0, lr, r1, lsl #31
   132d4:	lsr	lr, r2, #1
   132d8:	orr	r1, r4, r2, lsl #31
   132dc:	lsr	r4, r3, #1
   132e0:	orr	lr, lr, r3, lsl #31
   132e4:	cmp	r4, r7
   132e8:	cmpeq	lr, r6
   132ec:	mov	r2, lr
   132f0:	mov	r3, r4
   132f4:	bcc	13318 <__assert_fail@plt+0x21f4>
   132f8:	moveq	lr, #1
   132fc:	movne	lr, #0
   13300:	cmp	r1, r9
   13304:	cmpeq	r0, r8
   13308:	movhi	lr, #0
   1330c:	andls	lr, lr, #1
   13310:	cmp	lr, #0
   13314:	beq	13340 <__assert_fail@plt+0x221c>
   13318:	cmp	r1, r9
   1331c:	cmpeq	r0, r8
   13320:	movhi	lr, #1
   13324:	movls	lr, #0
   13328:	subs	r8, r8, r0
   1332c:	sbc	r9, r9, r1
   13330:	subs	r4, r6, r2
   13334:	sbc	sl, r7, r3
   13338:	subs	r6, r4, lr
   1333c:	sbc	r7, sl, r5
   13340:	subs	ip, ip, #1
   13344:	bne	132c8 <__assert_fail@plt+0x21a4>
   13348:	strd	r6, [sp, #48]	; 0x30
   1334c:	ldrd	r2, [sp, #40]	; 0x28
   13350:	strd	r8, [sp]
   13354:	ldrd	r0, [sp, #32]
   13358:	strd	r2, [sp, #24]
   1335c:	ldr	r3, [sp, #120]	; 0x78
   13360:	ldr	r2, [sp, #60]	; 0x3c
   13364:	str	r3, [sp, #16]
   13368:	ldr	r3, [sp, #124]	; 0x7c
   1336c:	str	r3, [sp, #8]
   13370:	ldr	r3, [sp, #128]	; 0x80
   13374:	str	r3, [sp, #12]
   13378:	ldr	r3, [sp, #88]	; 0x58
   1337c:	bl	12c74 <__assert_fail@plt+0x1b50>
   13380:	cmp	r0, #0
   13384:	beq	13424 <__assert_fail@plt+0x2300>
   13388:	ldr	r3, [pc, #220]	; 1346c <__assert_fail@plt+0x2348>
   1338c:	ldr	r2, [sp, #72]	; 0x48
   13390:	cmp	r3, r2
   13394:	bne	1317c <__assert_fail@plt+0x2058>
   13398:	mov	r2, #5
   1339c:	ldr	r1, [pc, #204]	; 13470 <__assert_fail@plt+0x234c>
   133a0:	mov	r0, #0
   133a4:	bl	10f08 <dcgettext@plt>
   133a8:	mov	r1, #0
   133ac:	mov	r2, r0
   133b0:	mov	r0, r1
   133b4:	bl	10f98 <error@plt>
   133b8:	bl	11118 <abort@plt>
   133bc:	adds	r1, r6, fp
   133c0:	adc	r3, r3, r5
   133c4:	str	r1, [sp, #48]	; 0x30
   133c8:	str	r3, [sp, #52]	; 0x34
   133cc:	ldrd	r2, [sp, #48]	; 0x30
   133d0:	orrs	r3, r2, r3
   133d4:	bne	132a0 <__assert_fail@plt+0x217c>
   133d8:	mov	r0, r8
   133dc:	mov	r1, r9
   133e0:	ldrd	r2, [sp, #32]
   133e4:	bl	1d01c <__assert_fail@plt+0xbef8>
   133e8:	mov	r8, r2
   133ec:	mov	r9, r3
   133f0:	b	1334c <__assert_fail@plt+0x2228>
   133f4:	ldrd	r2, [sp, #40]	; 0x28
   133f8:	cmp	r1, r3
   133fc:	cmpeq	r0, r2
   13400:	beq	131f4 <__assert_fail@plt+0x20d0>
   13404:	ldr	r3, [pc, #84]	; 13460 <__assert_fail@plt+0x233c>
   13408:	ldr	r2, [sp, #404]	; 0x194
   1340c:	ldr	r0, [sp, #140]	; 0x8c
   13410:	ldr	r3, [r3]
   13414:	cmp	r2, r3
   13418:	bne	13448 <__assert_fail@plt+0x2324>
   1341c:	add	sp, sp, #412	; 0x19c
   13420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13424:	mov	r3, #0
   13428:	str	r3, [sp, #140]	; 0x8c
   1342c:	b	13404 <__assert_fail@plt+0x22e0>
   13430:	ldr	r3, [sp, #92]	; 0x5c
   13434:	str	ip, [sp, #120]	; 0x78
   13438:	str	r3, [sp, #124]	; 0x7c
   1343c:	ldr	r3, [sp, #104]	; 0x68
   13440:	str	r3, [sp, #128]	; 0x80
   13444:	b	12f20 <__assert_fail@plt+0x1dfc>
   13448:	bl	10f20 <__stack_chk_fail@plt>
   1344c:	ldr	r3, [pc, #32]	; 13474 <__assert_fail@plt+0x2350>
   13450:	ldr	r2, [pc, #32]	; 13478 <__assert_fail@plt+0x2354>
   13454:	ldr	r1, [pc, #32]	; 1347c <__assert_fail@plt+0x2358>
   13458:	ldr	r0, [pc, #32]	; 13480 <__assert_fail@plt+0x235c>
   1345c:	bl	11124 <__assert_fail@plt>
   13460:	andeq	r0, r3, r8, lsl #30
   13464:	andeq	sp, r1, r0, lsr #4
   13468:	andeq	sp, r1, r7, asr #5
   1346c:	andeq	sp, r1, r3, ror #10
   13470:	muleq	r2, r0, r3
   13474:	andeq	sp, r1, ip, ror #10
   13478:	strdeq	r0, [r0], -r4
   1347c:	andeq	r0, r2, r8, ror #5
   13480:	andeq	r0, r2, r4, lsl #7
   13484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13488:	cmp	r1, #0
   1348c:	sub	sp, sp, #356	; 0x164
   13490:	cmpeq	r0, #1
   13494:	strd	r0, [sp, #48]	; 0x30
   13498:	str	r3, [sp, #332]	; 0x14c
   1349c:	bls	140d4 <__assert_fail@plt+0x2fb0>
   134a0:	add	r3, r2, #1
   134a4:	str	r3, [sp, #340]	; 0x154
   134a8:	strd	r8, [sp, #232]	; 0xe8
   134ac:	ldr	r3, [sp, #340]	; 0x154
   134b0:	mov	r8, #0
   134b4:	sub	fp, r3, #1
   134b8:	mov	r9, #0
   134bc:	ldrd	r2, [sp, #48]	; 0x30
   134c0:	str	fp, [sp, #8]
   134c4:	mov	r0, r8
   134c8:	mov	r1, r9
   134cc:	mov	lr, #64	; 0x40
   134d0:	mov	r4, #1
   134d4:	mov	r5, #0
   134d8:	mov	r7, #0
   134dc:	mov	sl, r8
   134e0:	mov	fp, r9
   134e4:	lsr	ip, r0, #1
   134e8:	lsr	r6, r1, #1
   134ec:	orr	r0, ip, r1, lsl #31
   134f0:	lsr	ip, r2, #1
   134f4:	orr	r1, r6, r2, lsl #31
   134f8:	lsr	r6, r3, #1
   134fc:	orr	ip, ip, r3, lsl #31
   13500:	cmp	r6, r5
   13504:	cmpeq	ip, r4
   13508:	mov	r2, ip
   1350c:	mov	r3, r6
   13510:	bcc	13534 <__assert_fail@plt+0x2410>
   13514:	moveq	ip, #1
   13518:	movne	ip, #0
   1351c:	cmp	r1, fp
   13520:	cmpeq	r0, sl
   13524:	movhi	ip, #0
   13528:	andls	ip, ip, #1
   1352c:	cmp	ip, #0
   13530:	beq	1355c <__assert_fail@plt+0x2438>
   13534:	cmp	r1, fp
   13538:	cmpeq	r0, sl
   1353c:	movhi	ip, #1
   13540:	movls	ip, #0
   13544:	subs	sl, sl, r0
   13548:	sbc	fp, fp, r1
   1354c:	subs	r6, r4, r2
   13550:	sbc	r9, r5, r3
   13554:	subs	r4, r6, ip
   13558:	sbc	r5, r9, r7
   1355c:	subs	lr, lr, #1
   13560:	bne	134e4 <__assert_fail@plt+0x23c0>
   13564:	ldrd	r4, [sp, #48]	; 0x30
   13568:	mov	r1, fp
   1356c:	mov	r0, sl
   13570:	subs	r3, r4, sl
   13574:	str	r3, [sp, #344]	; 0x158
   13578:	sbc	r3, r5, r1
   1357c:	str	r3, [sp, #348]	; 0x15c
   13580:	add	r3, sp, #344	; 0x158
   13584:	strd	r0, [sp, #72]	; 0x48
   13588:	ldrd	r2, [r3]
   1358c:	ldr	fp, [sp, #8]
   13590:	cmp	r3, r1
   13594:	cmpeq	r2, sl
   13598:	movhi	r2, #1
   1359c:	movls	r2, #0
   135a0:	rsbs	r6, r2, #0
   135a4:	sbc	r7, r7, r7
   135a8:	mov	r3, r1
   135ac:	adds	r0, sl, sl
   135b0:	mov	r1, r4
   135b4:	and	r1, r1, r6
   135b8:	adc	ip, r3, r3
   135bc:	subs	r2, r0, r4
   135c0:	sbc	r3, ip, r5
   135c4:	and	r0, r7, r5
   135c8:	adds	r2, r1, r2
   135cc:	adc	r3, r0, r3
   135d0:	str	r2, [sp, #80]	; 0x50
   135d4:	str	r3, [sp, #84]	; 0x54
   135d8:	ldrd	r2, [sp, #80]	; 0x50
   135dc:	add	r1, sp, #312	; 0x138
   135e0:	mov	r6, lr
   135e4:	strd	r2, [sp, #200]	; 0xc8
   135e8:	strd	r2, [sp, #8]
   135ec:	mov	r2, fp
   135f0:	mov	r3, #0
   135f4:	mov	r7, #1
   135f8:	str	r7, [sp, #196]	; 0xc4
   135fc:	strd	r2, [r1]
   13600:	add	r1, sp, #312	; 0x138
   13604:	ldrd	r2, [sp, #48]	; 0x30
   13608:	ldrd	r0, [r1]
   1360c:	cmp	r3, r1
   13610:	cmpeq	r2, r0
   13614:	bls	14144 <__assert_fail@plt+0x3020>
   13618:	ldrd	r8, [sp, #48]	; 0x30
   1361c:	ldr	r2, [pc, #2876]	; 14160 <__assert_fail@plt+0x303c>
   13620:	mov	lr, #0
   13624:	lsr	r3, r8, #1
   13628:	orr	r3, r3, r9, lsl #31
   1362c:	str	r3, [sp, #308]	; 0x134
   13630:	and	r3, r3, #127	; 0x7f
   13634:	add	r3, r2, r3
   13638:	str	r6, [sp, #276]	; 0x114
   1363c:	ldrb	ip, [r3, #40]	; 0x28
   13640:	and	r3, r8, #1
   13644:	str	r3, [sp, #272]	; 0x110
   13648:	str	r9, [sp, #304]	; 0x130
   1364c:	umull	r0, r1, ip, ip
   13650:	str	r8, [sp, #100]	; 0x64
   13654:	adds	ip, ip, ip
   13658:	mul	r4, r0, r9
   1365c:	umull	r2, r3, r0, r8
   13660:	mla	r4, r8, r1, r4
   13664:	adc	lr, lr, lr
   13668:	add	r3, r4, r3
   1366c:	subs	ip, ip, r2
   13670:	sbc	r1, lr, r3
   13674:	umull	r4, r5, ip, ip
   13678:	mul	r3, ip, r1
   1367c:	mul	r0, r4, r9
   13680:	add	r5, r5, r3, lsl #1
   13684:	lsr	r3, r9, #1
   13688:	str	r3, [sp, #328]	; 0x148
   1368c:	umull	r2, r3, r4, r8
   13690:	mla	r0, r8, r5, r0
   13694:	adds	ip, ip, ip
   13698:	adc	r1, r1, r1
   1369c:	subs	ip, ip, r2
   136a0:	add	r3, r0, r3
   136a4:	umull	r4, r5, ip, ip
   136a8:	str	r9, [sp, #16]
   136ac:	sbc	r1, r1, r3
   136b0:	mul	r0, r4, r9
   136b4:	mul	r3, ip, r1
   136b8:	adds	ip, ip, ip
   136bc:	adc	r1, r1, r1
   136c0:	add	r5, r5, r3, lsl #1
   136c4:	umull	r2, r3, r4, r8
   136c8:	mla	r0, r8, r5, r0
   136cc:	subs	ip, ip, r2
   136d0:	add	r3, r0, r3
   136d4:	sbc	r3, r1, r3
   136d8:	str	r3, [sp, #144]	; 0x90
   136dc:	add	r3, sp, #312	; 0x138
   136e0:	mov	lr, ip
   136e4:	ldrd	r2, [r3]
   136e8:	subs	r1, r8, r2
   136ec:	str	r1, [sp, #136]	; 0x88
   136f0:	sbc	r1, r9, r3
   136f4:	str	r1, [sp, #140]	; 0x8c
   136f8:	subs	r1, r2, r8
   136fc:	sbc	r3, r3, r9
   13700:	str	r1, [sp, #148]	; 0x94
   13704:	str	r3, [sp, #192]	; 0xc0
   13708:	ldrd	r2, [sp, #80]	; 0x50
   1370c:	umull	r0, r1, r3, r2
   13710:	umull	r8, r9, r2, r2
   13714:	adds	r4, r0, r0
   13718:	adc	r5, r1, r1
   1371c:	adds	ip, r9, r4
   13720:	str	ip, [sp, #120]	; 0x78
   13724:	adc	ip, r6, r5
   13728:	str	ip, [sp, #124]	; 0x7c
   1372c:	ldrd	r4, [sp, #120]	; 0x78
   13730:	cmp	r1, r5
   13734:	cmpeq	r0, r4
   13738:	umull	r0, r1, r3, r3
   1373c:	bls	13748 <__assert_fail@plt+0x2624>
   13740:	adds	r0, r0, #0
   13744:	adc	r1, r1, #1
   13748:	ldrd	r4, [sp, #120]	; 0x78
   1374c:	mov	ip, #0
   13750:	adds	r3, r5, r0
   13754:	str	r3, [sp, #168]	; 0xa8
   13758:	adc	r3, ip, r1
   1375c:	adds	r2, ip, r8
   13760:	str	r3, [sp, #172]	; 0xac
   13764:	ldr	r3, [sp, #144]	; 0x90
   13768:	umull	r8, r9, r2, lr
   1376c:	mul	r1, r2, r3
   13770:	ldr	r3, [sp, #16]
   13774:	adc	sl, r4, ip
   13778:	ldr	r4, [sp, #100]	; 0x64
   1377c:	umull	r2, r3, r3, r8
   13780:	mla	sl, lr, sl, r1
   13784:	strd	r2, [sp, #184]	; 0xb8
   13788:	mla	r2, r6, r8, r3
   1378c:	add	r3, sl, r9
   13790:	umull	r0, r1, r8, r4
   13794:	umull	sl, fp, r3, r4
   13798:	str	r2, [sp, #188]	; 0xbc
   1379c:	mla	r2, ip, r8, r1
   137a0:	ldrd	r8, [sp, #184]	; 0xb8
   137a4:	mla	fp, r3, ip, fp
   137a8:	adds	r4, r8, sl
   137ac:	adc	r5, r9, fp
   137b0:	adds	r2, r2, r4
   137b4:	str	r2, [sp, #128]	; 0x80
   137b8:	ldr	r1, [sp, #16]
   137bc:	adc	r2, ip, r5
   137c0:	str	r2, [sp, #132]	; 0x84
   137c4:	ldrd	r4, [sp, #128]	; 0x80
   137c8:	umull	r0, r1, r3, r1
   137cc:	cmp	fp, r5
   137d0:	cmpeq	sl, r4
   137d4:	mla	r1, r3, r6, r1
   137d8:	bls	137e4 <__assert_fail@plt+0x26c0>
   137dc:	adds	r0, r0, ip
   137e0:	adc	r1, r1, #1
   137e4:	ldr	r3, [sp, #132]	; 0x84
   137e8:	adds	r3, r3, r0
   137ec:	str	r3, [sp, #176]	; 0xb0
   137f0:	mov	r3, #0
   137f4:	adc	r3, r3, r1
   137f8:	str	r3, [sp, #180]	; 0xb4
   137fc:	ldrd	r0, [sp, #176]	; 0xb0
   13800:	ldrd	r2, [sp, #168]	; 0xa8
   13804:	subs	ip, r2, r0
   13808:	str	ip, [sp, #88]	; 0x58
   1380c:	sbc	ip, r3, r1
   13810:	cmp	r3, r1
   13814:	cmpeq	r2, r0
   13818:	str	ip, [sp, #92]	; 0x5c
   1381c:	bcs	13838 <__assert_fail@plt+0x2714>
   13820:	ldrd	r2, [sp, #48]	; 0x30
   13824:	ldr	r1, [sp, #88]	; 0x58
   13828:	adds	r1, r1, r2
   1382c:	adc	r3, ip, r3
   13830:	str	r1, [sp, #88]	; 0x58
   13834:	str	r3, [sp, #92]	; 0x5c
   13838:	ldrd	r2, [sp, #136]	; 0x88
   1383c:	ldrd	sl, [sp, #88]	; 0x58
   13840:	ldrd	r4, [sp, #48]	; 0x30
   13844:	ldr	r1, [sp, #148]	; 0x94
   13848:	cmp	fp, r3
   1384c:	cmpeq	sl, r2
   13850:	movcc	r2, #1
   13854:	movcs	r2, #0
   13858:	rsbs	r8, r2, #0
   1385c:	ldr	ip, [sp, #192]	; 0xc0
   13860:	sbc	r9, r9, r9
   13864:	and	r2, r8, r4
   13868:	adds	r1, sl, r1
   1386c:	and	r0, r9, r5
   13870:	adc	r3, fp, ip
   13874:	adds	r2, r2, r1
   13878:	adc	r3, r0, r3
   1387c:	str	r2, [sp, #80]	; 0x50
   13880:	str	r3, [sp, #84]	; 0x54
   13884:	ldrd	r8, [sp, #80]	; 0x50
   13888:	ldrd	r2, [sp, #8]
   1388c:	mov	r0, r8
   13890:	cmp	r3, r9
   13894:	cmpeq	r2, r8
   13898:	movcc	r0, #1
   1389c:	movcs	r0, #0
   138a0:	rsbs	r0, r0, #0
   138a4:	ldr	r3, [sp, #12]
   138a8:	sbc	r1, r9, r9
   138ac:	and	sl, r0, r4
   138b0:	subs	r2, r2, r8
   138b4:	sbc	r3, r3, r9
   138b8:	adds	sl, sl, r2
   138bc:	and	r2, r1, r5
   138c0:	ldrd	r0, [sp, #72]	; 0x48
   138c4:	adc	r2, r2, r3
   138c8:	umull	r4, r5, r1, sl
   138cc:	umull	sl, fp, r0, sl
   138d0:	mov	r8, r4
   138d4:	mov	r9, r5
   138d8:	umlal	r8, r9, r0, r2
   138dc:	umull	r2, r3, r1, r2
   138e0:	adds	r1, fp, r8
   138e4:	str	r1, [sp, #104]	; 0x68
   138e8:	adc	r1, r6, r9
   138ec:	str	r1, [sp, #108]	; 0x6c
   138f0:	ldrd	r0, [sp, #104]	; 0x68
   138f4:	cmp	r5, r1
   138f8:	cmpeq	r4, r0
   138fc:	bls	13908 <__assert_fail@plt+0x27e4>
   13900:	adds	r2, r2, #0
   13904:	adc	r3, r3, #1
   13908:	ldrd	r4, [sp, #104]	; 0x68
   1390c:	mov	ip, #0
   13910:	adds	r1, r5, r2
   13914:	adc	r3, ip, r3
   13918:	str	r3, [sp, #156]	; 0x9c
   1391c:	ldr	r3, [sp, #144]	; 0x90
   13920:	adds	sl, ip, sl
   13924:	adc	r4, r4, ip
   13928:	mul	r3, sl, r3
   1392c:	umull	r8, r9, sl, lr
   13930:	mla	r4, lr, r4, r3
   13934:	ldr	r3, [sp, #16]
   13938:	str	r1, [sp, #152]	; 0x98
   1393c:	ldr	r1, [sp, #100]	; 0x64
   13940:	umull	sl, fp, r8, r3
   13944:	umull	r2, r3, r8, r1
   13948:	strd	sl, [sp, #184]	; 0xb8
   1394c:	mla	r0, r6, r8, fp
   13950:	add	fp, r4, r9
   13954:	mla	sl, ip, r8, r3
   13958:	umull	r4, r5, fp, r1
   1395c:	ldr	r3, [sp, #16]
   13960:	str	r0, [sp, #188]	; 0xbc
   13964:	mla	r5, fp, ip, r5
   13968:	umull	r8, r9, fp, r3
   1396c:	ldrd	r2, [sp, #184]	; 0xb8
   13970:	mla	r9, fp, r6, r9
   13974:	adds	r0, r2, r4
   13978:	adc	r1, r3, r5
   1397c:	adds	r3, sl, r0
   13980:	str	r3, [sp, #112]	; 0x70
   13984:	adc	r3, ip, r1
   13988:	str	r3, [sp, #116]	; 0x74
   1398c:	ldrd	r2, [sp, #112]	; 0x70
   13990:	cmp	r5, r3
   13994:	cmpeq	r4, r2
   13998:	bls	139a4 <__assert_fail@plt+0x2880>
   1399c:	adds	r8, r8, ip
   139a0:	adc	r9, r9, #1
   139a4:	ldr	r1, [sp, #116]	; 0x74
   139a8:	mov	r2, #0
   139ac:	adds	r3, r1, r8
   139b0:	str	r3, [sp, #160]	; 0xa0
   139b4:	adc	r3, r2, r9
   139b8:	str	r3, [sp, #164]	; 0xa4
   139bc:	ldrd	r0, [sp, #160]	; 0xa0
   139c0:	ldrd	r2, [sp, #152]	; 0x98
   139c4:	subs	ip, r2, r0
   139c8:	str	ip, [sp, #72]	; 0x48
   139cc:	sbc	ip, r3, r1
   139d0:	cmp	r3, r1
   139d4:	cmpeq	r2, r0
   139d8:	str	ip, [sp, #76]	; 0x4c
   139dc:	bcs	139f8 <__assert_fail@plt+0x28d4>
   139e0:	ldrd	r2, [sp, #48]	; 0x30
   139e4:	ldr	r1, [sp, #72]	; 0x48
   139e8:	adds	r1, r1, r2
   139ec:	adc	r3, ip, r3
   139f0:	str	r1, [sp, #72]	; 0x48
   139f4:	str	r3, [sp, #76]	; 0x4c
   139f8:	and	r3, r7, #31
   139fc:	cmp	r3, #1
   13a00:	beq	13bf4 <__assert_fail@plt+0x2ad0>
   13a04:	subs	r7, r7, #1
   13a08:	bne	13708 <__assert_fail@plt+0x25e4>
   13a0c:	ldr	r3, [sp, #196]	; 0xc4
   13a10:	cmp	r3, #0
   13a14:	lsl	r3, r3, #1
   13a18:	str	r3, [sp, #184]	; 0xb8
   13a1c:	beq	140b8 <__assert_fail@plt+0x2f94>
   13a20:	ldrd	sl, [sp, #80]	; 0x50
   13a24:	ldr	r0, [sp, #16]
   13a28:	strd	sl, [sp, #8]
   13a2c:	ldrd	r2, [sp, #8]
   13a30:	umull	r4, r5, r3, r2
   13a34:	umull	sl, fp, r2, r2
   13a38:	adds	ip, r4, r4
   13a3c:	adc	r8, r5, r5
   13a40:	adds	r3, fp, ip
   13a44:	str	r3, [sp, #32]
   13a48:	adc	r3, r6, r8
   13a4c:	str	r3, [sp, #36]	; 0x24
   13a50:	ldrd	r2, [sp, #32]
   13a54:	cmp	r5, r3
   13a58:	ldr	r3, [sp, #12]
   13a5c:	cmpeq	r4, r2
   13a60:	umull	r4, r5, r3, r3
   13a64:	bls	13a70 <__assert_fail@plt+0x294c>
   13a68:	adds	r4, r4, #0
   13a6c:	adc	r5, r5, #1
   13a70:	ldrd	r8, [sp, #32]
   13a74:	mov	r1, #0
   13a78:	adds	r3, r9, r4
   13a7c:	str	r3, [sp, #56]	; 0x38
   13a80:	adc	r3, r1, r5
   13a84:	str	r3, [sp, #60]	; 0x3c
   13a88:	ldr	r3, [sp, #144]	; 0x90
   13a8c:	adds	r2, r1, sl
   13a90:	adc	ip, r8, r1
   13a94:	mul	r4, r2, r3
   13a98:	umull	r2, r3, r2, lr
   13a9c:	ldr	sl, [sp, #100]	; 0x64
   13aa0:	mla	ip, lr, ip, r4
   13aa4:	umull	r8, r9, r0, r2
   13aa8:	strd	r2, [sp, #16]
   13aac:	mov	r4, r2
   13ab0:	mla	r9, r6, r2, r9
   13ab4:	umull	r4, r5, r4, sl
   13ab8:	ldr	r2, [sp, #16]
   13abc:	add	r3, ip, r3
   13ac0:	mla	r2, r1, r2, r5
   13ac4:	umull	r4, r5, r3, sl
   13ac8:	mov	fp, r5
   13acc:	mla	ip, r3, r1, fp
   13ad0:	mov	sl, r4
   13ad4:	umull	r4, r5, r0, r3
   13ad8:	strd	sl, [sp, #16]
   13adc:	str	ip, [sp, #20]
   13ae0:	ldrd	sl, [sp, #16]
   13ae4:	mla	r5, r3, r6, r5
   13ae8:	adds	ip, r8, sl
   13aec:	adc	r8, r9, fp
   13af0:	adds	r2, r2, ip
   13af4:	str	r2, [sp, #40]	; 0x28
   13af8:	adc	r2, r1, r8
   13afc:	str	r2, [sp, #44]	; 0x2c
   13b00:	ldrd	r8, [sp, #16]
   13b04:	ldrd	sl, [sp, #40]	; 0x28
   13b08:	cmp	r9, fp
   13b0c:	cmpeq	r8, sl
   13b10:	bls	13b1c <__assert_fail@plt+0x29f8>
   13b14:	adds	r4, r4, r1
   13b18:	adc	r5, r5, #1
   13b1c:	ldr	r3, [sp, #44]	; 0x2c
   13b20:	adds	r3, r3, r4
   13b24:	str	r3, [sp, #64]	; 0x40
   13b28:	mov	r3, #0
   13b2c:	adc	r3, r3, r5
   13b30:	str	r3, [sp, #68]	; 0x44
   13b34:	ldrd	r4, [sp, #64]	; 0x40
   13b38:	ldrd	r2, [sp, #56]	; 0x38
   13b3c:	subs	r1, r2, r4
   13b40:	str	r1, [sp, #24]
   13b44:	sbc	r1, r3, r5
   13b48:	cmp	r3, r5
   13b4c:	cmpeq	r2, r4
   13b50:	str	r1, [sp, #28]
   13b54:	bcs	13b74 <__assert_fail@plt+0x2a50>
   13b58:	ldrd	r2, [sp, #48]	; 0x30
   13b5c:	ldr	r1, [sp, #24]
   13b60:	adds	r1, r1, r2
   13b64:	str	r1, [sp, #24]
   13b68:	ldr	r1, [sp, #28]
   13b6c:	adc	r3, r1, r3
   13b70:	str	r3, [sp, #28]
   13b74:	ldrd	r2, [sp, #136]	; 0x88
   13b78:	ldrd	r4, [sp, #24]
   13b7c:	ldrd	r8, [sp, #48]	; 0x30
   13b80:	ldr	r1, [sp, #148]	; 0x94
   13b84:	cmp	r5, r3
   13b88:	cmpeq	r4, r2
   13b8c:	movcc	r2, #1
   13b90:	movcs	r2, #0
   13b94:	rsbs	sl, r2, #0
   13b98:	sbc	fp, fp, fp
   13b9c:	adds	r1, r4, r1
   13ba0:	ldr	r4, [sp, #192]	; 0xc0
   13ba4:	and	r2, sl, r8
   13ba8:	adc	r3, r5, r4
   13bac:	and	ip, fp, r9
   13bb0:	adds	r2, r2, r1
   13bb4:	adc	r3, ip, r3
   13bb8:	str	r3, [sp, #12]
   13bbc:	ldr	r3, [sp, #196]	; 0xc4
   13bc0:	add	r7, r7, #1
   13bc4:	cmp	r3, r7
   13bc8:	str	r2, [sp, #8]
   13bcc:	bne	13a2c <__assert_fail@plt+0x2908>
   13bd0:	ldrd	r2, [sp, #80]	; 0x50
   13bd4:	ldrd	sl, [sp, #8]
   13bd8:	str	r0, [sp, #16]
   13bdc:	strd	r2, [sp, #8]
   13be0:	ldr	r3, [sp, #184]	; 0xb8
   13be4:	strd	sl, [sp, #200]	; 0xc8
   13be8:	str	r3, [sp, #196]	; 0xc4
   13bec:	strd	sl, [sp, #80]	; 0x50
   13bf0:	b	13708 <__assert_fail@plt+0x25e4>
   13bf4:	add	r3, sp, #272	; 0x110
   13bf8:	ldrd	r2, [r3]
   13bfc:	orrs	r3, r2, r3
   13c00:	ldrd	r2, [sp, #72]	; 0x48
   13c04:	bne	13cbc <__assert_fail@plt+0x2b98>
   13c08:	lsr	r1, r2, #1
   13c0c:	orr	r1, r1, r3, lsl #31
   13c10:	lsr	r0, r3, #1
   13c14:	ldrd	r2, [sp, #48]	; 0x30
   13c18:	mov	r4, r2
   13c1c:	mov	ip, r3
   13c20:	ldr	r5, [sp, #16]
   13c24:	b	13c54 <__assert_fail@plt+0x2b30>
   13c28:	asr	r2, r9, #31
   13c2c:	and	r3, r2, r8
   13c30:	and	ip, r9, r2
   13c34:	adds	r1, r1, r3
   13c38:	eor	r3, r2, r8
   13c3c:	adc	r0, r0, ip
   13c40:	eor	ip, r9, r2
   13c44:	subs	r3, r3, r2
   13c48:	sbc	r2, ip, r2
   13c4c:	mov	r4, r3
   13c50:	mov	ip, r2
   13c54:	and	sl, r4, #1
   13c58:	mov	fp, r6
   13c5c:	orrs	r3, sl, fp
   13c60:	lsr	r3, r4, #1
   13c64:	orr	r3, r3, ip, lsl #31
   13c68:	lsr	r2, ip, #1
   13c6c:	beq	13c4c <__assert_fail@plt+0x2b28>
   13c70:	subs	r8, r3, r1
   13c74:	sbc	r9, r2, r0
   13c78:	orrs	r3, r8, r9
   13c7c:	bne	13c28 <__assert_fail@plt+0x2b04>
   13c80:	add	r3, sp, #280	; 0x118
   13c84:	str	ip, [sp, #268]	; 0x10c
   13c88:	strd	r8, [r3]
   13c8c:	add	r3, sp, #288	; 0x120
   13c90:	str	r5, [sp, #16]
   13c94:	strd	sl, [r3]
   13c98:	bic	r3, r4, #1
   13c9c:	str	r3, [sp, #264]	; 0x108
   13ca0:	add	r3, sp, #264	; 0x108
   13ca4:	ldrd	r2, [r3]
   13ca8:	orrs	r3, r2, r3
   13cac:	bne	13ccc <__assert_fail@plt+0x2ba8>
   13cb0:	ldrd	r2, [sp, #80]	; 0x50
   13cb4:	strd	r2, [sp, #200]	; 0xc8
   13cb8:	b	13a04 <__assert_fail@plt+0x28e0>
   13cbc:	orrs	r1, r2, r3
   13cc0:	ldrne	r1, [sp, #308]	; 0x134
   13cc4:	ldrne	r0, [sp, #328]	; 0x148
   13cc8:	bne	13c18 <__assert_fail@plt+0x2af4>
   13ccc:	add	r3, sp, #320	; 0x140
   13cd0:	str	r7, [sp, #336]	; 0x150
   13cd4:	ldrd	r4, [r3]
   13cd8:	mov	r7, lr
   13cdc:	ldrd	sl, [sp, #200]	; 0xc8
   13ce0:	umull	r2, r3, fp, sl
   13ce4:	umull	r8, r9, sl, sl
   13ce8:	adds	r0, r2, r2
   13cec:	adc	ip, r3, r3
   13cf0:	adds	r1, r9, r0
   13cf4:	str	r1, [sp, #216]	; 0xd8
   13cf8:	adc	r1, r6, ip
   13cfc:	str	r1, [sp, #220]	; 0xdc
   13d00:	strd	r8, [sp, #16]
   13d04:	ldrd	r8, [sp, #216]	; 0xd8
   13d08:	umull	r0, r1, fp, fp
   13d0c:	cmp	r3, r9
   13d10:	cmpeq	r2, r8
   13d14:	bls	13d20 <__assert_fail@plt+0x2bfc>
   13d18:	adds	r0, r0, #0
   13d1c:	adc	r1, r1, #1
   13d20:	ldrd	r8, [sp, #216]	; 0xd8
   13d24:	mov	ip, #0
   13d28:	ldr	r2, [sp, #16]
   13d2c:	adds	r3, r9, r0
   13d30:	str	r3, [sp, #240]	; 0xf0
   13d34:	adc	r3, ip, r1
   13d38:	str	r3, [sp, #244]	; 0xf4
   13d3c:	adds	r3, ip, r2
   13d40:	ldr	r2, [sp, #144]	; 0x90
   13d44:	ldr	sl, [sp, #304]	; 0x130
   13d48:	adc	lr, r8, ip
   13d4c:	mul	r1, r3, r2
   13d50:	umull	r2, r3, r3, r7
   13d54:	mla	lr, r7, lr, r1
   13d58:	mov	r0, r2
   13d5c:	mov	r1, r3
   13d60:	umull	r2, r3, sl, r2
   13d64:	strd	r0, [sp, #16]
   13d68:	ldr	r8, [sp, #100]	; 0x64
   13d6c:	strd	r2, [sp, #184]	; 0xb8
   13d70:	ldr	r2, [sp, #16]
   13d74:	mov	r1, r0
   13d78:	mla	r3, r6, r2, r3
   13d7c:	umull	r0, r1, r1, r8
   13d80:	str	r3, [sp, #188]	; 0xbc
   13d84:	ldr	r3, [sp, #20]
   13d88:	mla	r2, ip, r2, r1
   13d8c:	add	r3, lr, r3
   13d90:	umull	r8, r9, r3, r8
   13d94:	umull	r0, r1, sl, r3
   13d98:	mla	lr, r3, ip, r9
   13d9c:	strd	r8, [sp, #16]
   13da0:	ldrd	sl, [sp, #184]	; 0xb8
   13da4:	ldr	r9, [sp, #16]
   13da8:	str	lr, [sp, #20]
   13dac:	adds	lr, sl, r9
   13db0:	ldr	sl, [sp, #20]
   13db4:	mla	r1, r3, r6, r1
   13db8:	adc	r9, fp, sl
   13dbc:	adds	r2, r2, lr
   13dc0:	str	r2, [sp, #224]	; 0xe0
   13dc4:	adc	r2, ip, r9
   13dc8:	str	r2, [sp, #228]	; 0xe4
   13dcc:	ldrd	r8, [sp, #16]
   13dd0:	ldrd	sl, [sp, #224]	; 0xe0
   13dd4:	cmp	r9, fp
   13dd8:	cmpeq	r8, sl
   13ddc:	bls	13de8 <__assert_fail@plt+0x2cc4>
   13de0:	adds	r0, r0, ip
   13de4:	adc	r1, r1, #1
   13de8:	ldr	r3, [sp, #228]	; 0xe4
   13dec:	adds	r3, r3, r0
   13df0:	str	r3, [sp, #248]	; 0xf8
   13df4:	mov	r3, #0
   13df8:	adc	r3, r3, r1
   13dfc:	str	r3, [sp, #252]	; 0xfc
   13e00:	ldrd	r0, [sp, #248]	; 0xf8
   13e04:	ldrd	r2, [sp, #240]	; 0xf0
   13e08:	subs	ip, r2, r0
   13e0c:	str	ip, [sp, #208]	; 0xd0
   13e10:	sbc	ip, r3, r1
   13e14:	cmp	r3, r1
   13e18:	cmpeq	r2, r0
   13e1c:	str	ip, [sp, #212]	; 0xd4
   13e20:	bcs	13e3c <__assert_fail@plt+0x2d18>
   13e24:	ldrd	r2, [sp, #48]	; 0x30
   13e28:	ldr	r1, [sp, #208]	; 0xd0
   13e2c:	adds	r1, r1, r2
   13e30:	adc	r3, ip, r3
   13e34:	str	r1, [sp, #208]	; 0xd0
   13e38:	str	r3, [sp, #212]	; 0xd4
   13e3c:	ldrd	r2, [sp, #136]	; 0x88
   13e40:	ldrd	r8, [sp, #208]	; 0xd0
   13e44:	ldr	r1, [sp, #148]	; 0x94
   13e48:	ldr	ip, [sp, #192]	; 0xc0
   13e4c:	cmp	r9, r3
   13e50:	cmpeq	r8, r2
   13e54:	movcc	r2, #1
   13e58:	movcs	r2, #0
   13e5c:	ldr	r3, [sp, #48]	; 0x30
   13e60:	rsbs	sl, r2, #0
   13e64:	and	r2, sl, r3
   13e68:	ldr	r3, [sp, #52]	; 0x34
   13e6c:	sbc	fp, fp, fp
   13e70:	adds	r1, r8, r1
   13e74:	and	r0, fp, r3
   13e78:	adc	r3, r9, ip
   13e7c:	adds	r2, r2, r1
   13e80:	adc	r3, r0, r3
   13e84:	str	r2, [sp, #200]	; 0xc8
   13e88:	str	r3, [sp, #204]	; 0xcc
   13e8c:	ldrd	r8, [sp, #200]	; 0xc8
   13e90:	ldrd	sl, [sp, #8]
   13e94:	ldr	r3, [sp, #48]	; 0x30
   13e98:	cmp	fp, r9
   13e9c:	cmpeq	sl, r8
   13ea0:	movcc	r2, #1
   13ea4:	movcs	r2, #0
   13ea8:	rsbs	r0, r2, #0
   13eac:	sbc	r1, r9, r9
   13eb0:	and	r2, r0, r3
   13eb4:	strd	r0, [sp, #16]
   13eb8:	ldr	r3, [sp, #52]	; 0x34
   13ebc:	ldr	r0, [sp, #20]
   13ec0:	subs	r1, sl, r8
   13ec4:	and	r0, r0, r3
   13ec8:	sbc	r3, fp, r9
   13ecc:	adds	r1, r2, r1
   13ed0:	adc	r3, r0, r3
   13ed4:	str	r3, [sp, #236]	; 0xec
   13ed8:	add	r3, sp, #272	; 0x110
   13edc:	str	r1, [sp, #232]	; 0xe8
   13ee0:	ldrd	r2, [r3]
   13ee4:	ldrd	r8, [sp, #232]	; 0xe8
   13ee8:	orrs	r3, r2, r3
   13eec:	bne	14090 <__assert_fail@plt+0x2f6c>
   13ef0:	ldrd	r2, [sp, #48]	; 0x30
   13ef4:	lsr	r1, r8, #1
   13ef8:	orr	r1, r1, r9, lsl #31
   13efc:	lsr	r0, r9, #1
   13f00:	mov	r8, r2
   13f04:	mov	r9, r3
   13f08:	b	13f38 <__assert_fail@plt+0x2e14>
   13f0c:	asr	r2, fp, #31
   13f10:	and	r3, r2, sl
   13f14:	and	ip, fp, r2
   13f18:	adds	r1, r1, r3
   13f1c:	eor	r3, r2, sl
   13f20:	adc	r0, r0, ip
   13f24:	eor	ip, fp, r2
   13f28:	subs	r3, r3, r2
   13f2c:	sbc	r2, ip, r2
   13f30:	mov	r8, r3
   13f34:	mov	r9, r2
   13f38:	and	r4, r8, #1
   13f3c:	mov	r5, r6
   13f40:	orrs	r3, r4, r5
   13f44:	lsr	r3, r8, #1
   13f48:	orr	r3, r3, r9, lsl #31
   13f4c:	lsr	r2, r9, #1
   13f50:	beq	13f30 <__assert_fail@plt+0x2e0c>
   13f54:	subs	sl, r3, r1
   13f58:	sbc	fp, r2, r0
   13f5c:	orrs	r3, sl, fp
   13f60:	bne	13f0c <__assert_fail@plt+0x2de8>
   13f64:	add	r3, sp, #296	; 0x128
   13f68:	strd	r8, [sp, #232]	; 0xe8
   13f6c:	strd	sl, [r3]
   13f70:	bic	r3, r8, #1
   13f74:	adds	r3, r3, #1
   13f78:	str	r3, [sp, #256]	; 0x100
   13f7c:	adc	r3, r9, #0
   13f80:	str	r3, [sp, #260]	; 0x104
   13f84:	add	r3, sp, #256	; 0x100
   13f88:	ldrd	r2, [r3]
   13f8c:	cmp	r3, #0
   13f90:	cmpeq	r2, #1
   13f94:	beq	13cdc <__assert_fail@plt+0x2bb8>
   13f98:	add	r3, sp, #320	; 0x140
   13f9c:	ldrd	r0, [sp, #48]	; 0x30
   13fa0:	strd	r4, [r3]
   13fa4:	add	r3, sp, #256	; 0x100
   13fa8:	ldr	r7, [sp, #336]	; 0x150
   13fac:	ldrd	r2, [r3]
   13fb0:	cmp	r3, r1
   13fb4:	cmpeq	r2, r0
   13fb8:	beq	140a8 <__assert_fail@plt+0x2f84>
   13fbc:	add	r3, sp, #256	; 0x100
   13fc0:	ldrd	r0, [sp, #48]	; 0x30
   13fc4:	ldrd	r4, [r3]
   13fc8:	mov	r2, r4
   13fcc:	mov	r3, r5
   13fd0:	bl	1d01c <__assert_fail@plt+0xbef8>
   13fd4:	strd	r0, [sp, #48]	; 0x30
   13fd8:	add	r1, pc, #376	; 0x178
   13fdc:	ldrd	r0, [r1]
   13fe0:	cmp	r5, r1
   13fe4:	cmpeq	r4, r0
   13fe8:	bls	14000 <__assert_fail@plt+0x2edc>
   13fec:	add	r3, sp, #256	; 0x100
   13ff0:	ldrd	r0, [r3]
   13ff4:	bl	12ea4 <__assert_fail@plt+0x1d80>
   13ff8:	cmp	r0, #0
   13ffc:	beq	140e8 <__assert_fail@plt+0x2fc4>
   14000:	mov	r3, #1
   14004:	str	r3, [sp]
   14008:	add	r3, sp, #256	; 0x100
   1400c:	ldr	r0, [sp, #332]	; 0x14c
   14010:	ldrd	r2, [r3]
   14014:	bl	11448 <__assert_fail@plt+0x324>
   14018:	ldrd	r2, [sp, #48]	; 0x30
   1401c:	cmp	r3, #0
   14020:	cmpeq	r2, #1
   14024:	bls	1410c <__assert_fail@plt+0x2fe8>
   14028:	add	r1, pc, #296	; 0x128
   1402c:	ldrd	r0, [r1]
   14030:	cmp	r3, r1
   14034:	cmpeq	r2, r0
   14038:	bls	14128 <__assert_fail@plt+0x3004>
   1403c:	ldrd	r0, [sp, #48]	; 0x30
   14040:	bl	12ea4 <__assert_fail@plt+0x1d80>
   14044:	cmp	r0, #0
   14048:	bne	14128 <__assert_fail@plt+0x3004>
   1404c:	ldrd	r4, [sp, #48]	; 0x30
   14050:	ldrd	r0, [sp, #80]	; 0x50
   14054:	mov	r2, r4
   14058:	mov	r3, r5
   1405c:	bl	1d01c <__assert_fail@plt+0xbef8>
   14060:	ldrd	r0, [sp, #8]
   14064:	strd	r2, [sp, #80]	; 0x50
   14068:	mov	r2, r4
   1406c:	mov	r3, r5
   14070:	bl	1d01c <__assert_fail@plt+0xbef8>
   14074:	ldrd	r0, [sp, #200]	; 0xc8
   14078:	strd	r2, [sp, #8]
   1407c:	mov	r2, r4
   14080:	mov	r3, r5
   14084:	bl	1d01c <__assert_fail@plt+0xbef8>
   14088:	strd	r2, [sp, #200]	; 0xc8
   1408c:	b	13600 <__assert_fail@plt+0x24dc>
   14090:	orrs	r3, r8, r9
   14094:	ldrne	r1, [sp, #308]	; 0x134
   14098:	ldrne	r0, [sp, #328]	; 0x148
   1409c:	bne	13f38 <__assert_fail@plt+0x2e14>
   140a0:	add	r3, sp, #320	; 0x140
   140a4:	strd	r4, [r3]
   140a8:	ldr	r3, [sp, #340]	; 0x154
   140ac:	add	r3, r3, #1
   140b0:	str	r3, [sp, #340]	; 0x154
   140b4:	b	134ac <__assert_fail@plt+0x2388>
   140b8:	ldrd	r2, [sp, #80]	; 0x50
   140bc:	ldr	r1, [sp, #184]	; 0xb8
   140c0:	ldr	r7, [sp, #196]	; 0xc4
   140c4:	strd	r2, [sp, #200]	; 0xc8
   140c8:	str	r1, [sp, #196]	; 0xc4
   140cc:	strd	r2, [sp, #8]
   140d0:	b	13708 <__assert_fail@plt+0x25e4>
   140d4:	ldr	r3, [pc, #136]	; 14164 <__assert_fail@plt+0x3040>
   140d8:	ldr	r2, [pc, #136]	; 14168 <__assert_fail@plt+0x3044>
   140dc:	ldr	r1, [pc, #136]	; 1416c <__assert_fail@plt+0x3048>
   140e0:	ldr	r0, [pc, #136]	; 14170 <__assert_fail@plt+0x304c>
   140e4:	bl	11124 <__assert_fail@plt>
   140e8:	add	r1, sp, #256	; 0x100
   140ec:	ldr	r3, [sp, #332]	; 0x14c
   140f0:	ldr	r2, [sp, #340]	; 0x154
   140f4:	ldrd	r0, [r1]
   140f8:	bl	13484 <__assert_fail@plt+0x2360>
   140fc:	ldrd	r2, [sp, #48]	; 0x30
   14100:	cmp	r3, #0
   14104:	cmpeq	r2, #1
   14108:	bhi	14028 <__assert_fail@plt+0x2f04>
   1410c:	beq	1413c <__assert_fail@plt+0x3018>
   14110:	mov	r2, #0
   14114:	mov	r3, #0
   14118:	strd	r2, [sp, #200]	; 0xc8
   1411c:	strd	r2, [sp, #8]
   14120:	strd	r2, [sp, #80]	; 0x50
   14124:	b	13600 <__assert_fail@plt+0x24dc>
   14128:	mov	r1, #1
   1412c:	ldrd	r2, [sp, #48]	; 0x30
   14130:	ldr	r0, [sp, #332]	; 0x14c
   14134:	str	r1, [sp]
   14138:	bl	11448 <__assert_fail@plt+0x324>
   1413c:	add	sp, sp, #356	; 0x164
   14140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14144:	ldr	r3, [pc, #24]	; 14164 <__assert_fail@plt+0x3040>
   14148:	ldr	r2, [pc, #36]	; 14174 <__assert_fail@plt+0x3050>
   1414c:	ldr	r1, [pc, #24]	; 1416c <__assert_fail@plt+0x3048>
   14150:	ldr	r0, [pc, #32]	; 14178 <__assert_fail@plt+0x3054>
   14154:	bl	11124 <__assert_fail@plt>
   14158:	cmneq	sp, r8, ror sp
   1415c:	andeq	r0, r0, r0
   14160:	andeq	sp, r1, r0, lsr #4
   14164:	andeq	sp, r1, r4, ror r5
   14168:	andeq	r0, r0, r2, asr #11
   1416c:	andeq	r0, r2, r8, ror #5
   14170:	andeq	r0, r2, r4, asr #7
   14174:	andeq	r0, r0, r8, asr #11
   14178:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1417c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14180:	subs	r7, r1, #0
   14184:	ldr	r1, [pc, #3324]	; 14e88 <__assert_fail@plt+0x3d64>
   14188:	sub	sp, sp, #244	; 0xf4
   1418c:	mov	r5, r3
   14190:	ldr	r1, [r1]
   14194:	ldr	r3, [sp, #284]	; 0x11c
   14198:	cmpeq	r0, #1
   1419c:	mov	r6, r0
   141a0:	mov	r4, r2
   141a4:	str	r1, [sp, #236]	; 0xec
   141a8:	str	r3, [sp, #188]	; 0xbc
   141ac:	bls	14dc0 <__assert_fail@plt+0x3c9c>
   141b0:	mov	r0, #0
   141b4:	mov	r1, #0
   141b8:	mov	r2, #63	; 0x3f
   141bc:	strd	r0, [sp, #96]	; 0x60
   141c0:	mov	r3, #0
   141c4:	mov	r0, #1
   141c8:	mov	r1, #0
   141cc:	strd	r0, [sp, #104]	; 0x68
   141d0:	ldrd	r0, [sp, #104]	; 0x68
   141d4:	mvn	sl, #0
   141d8:	mvn	fp, #0
   141dc:	mov	lr, #0
   141e0:	strd	sl, [sp, #48]	; 0x30
   141e4:	ldr	sl, [sp, #100]	; 0x64
   141e8:	adds	fp, r0, r0
   141ec:	adc	ip, r1, r1
   141f0:	orr	r0, fp, sl, lsr #31
   141f4:	ldrd	sl, [sp, #96]	; 0x60
   141f8:	mov	r1, ip
   141fc:	adds	r8, sl, sl
   14200:	adc	r9, fp, fp
   14204:	mov	ip, fp
   14208:	cmp	r7, r1
   1420c:	mov	sl, r8
   14210:	mov	fp, r9
   14214:	cmpeq	r6, r0
   14218:	strd	sl, [sp, #96]	; 0x60
   1421c:	bcc	14240 <__assert_fail@plt+0x311c>
   14220:	moveq	ip, #1
   14224:	movne	ip, #0
   14228:	cmp	r9, r5
   1422c:	cmpeq	r8, r4
   14230:	movcc	ip, #0
   14234:	andcs	ip, ip, #1
   14238:	cmp	ip, #0
   1423c:	beq	14270 <__assert_fail@plt+0x314c>
   14240:	cmp	r9, r5
   14244:	cmpeq	r8, r4
   14248:	movcc	ip, #1
   1424c:	movcs	ip, #0
   14250:	subs	sl, r8, r4
   14254:	str	sl, [sp, #96]	; 0x60
   14258:	sbc	sl, r9, r5
   1425c:	str	sl, [sp, #100]	; 0x64
   14260:	subs	sl, r0, r6
   14264:	sbc	fp, r1, r7
   14268:	subs	r0, sl, ip
   1426c:	sbc	r1, fp, lr
   14270:	ldrd	sl, [sp, #48]	; 0x30
   14274:	subs	r2, r2, #1
   14278:	sbc	r3, r3, #0
   1427c:	cmp	r3, fp
   14280:	cmpeq	r2, sl
   14284:	bne	141e4 <__assert_fail@plt+0x30c0>
   14288:	ldrd	r8, [sp, #96]	; 0x60
   1428c:	strd	r0, [sp, #104]	; 0x68
   14290:	adds	r3, r8, r8
   14294:	str	r3, [sp, #64]	; 0x40
   14298:	adc	r3, r9, r9
   1429c:	str	r3, [sp, #68]	; 0x44
   142a0:	ldrd	r2, [sp, #64]	; 0x40
   142a4:	adds	ip, r0, r0
   142a8:	adc	r1, r1, r1
   142ac:	str	r1, [sp, #84]	; 0x54
   142b0:	mov	r1, r9
   142b4:	cmp	r1, r3
   142b8:	mov	r0, r8
   142bc:	str	ip, [sp, #80]	; 0x50
   142c0:	cmpeq	r0, r2
   142c4:	strd	r2, [sp, #56]	; 0x38
   142c8:	mov	r8, r2
   142cc:	mov	r9, r3
   142d0:	ldrd	r2, [sp, #80]	; 0x50
   142d4:	movhi	r1, #1
   142d8:	movls	r1, #0
   142dc:	adds	r2, r2, r1
   142e0:	adc	r3, r3, #0
   142e4:	cmp	r3, r7
   142e8:	cmpeq	r2, r6
   142ec:	bhi	14798 <__assert_fail@plt+0x3674>
   142f0:	moveq	r1, #1
   142f4:	movne	r1, #0
   142f8:	cmp	r5, r9
   142fc:	cmpeq	r4, r8
   14300:	movhi	r1, #0
   14304:	andls	r1, r1, #1
   14308:	cmp	r1, #0
   1430c:	bne	14798 <__assert_fail@plt+0x3674>
   14310:	orrs	r1, r6, r7
   14314:	movne	r1, #1
   14318:	moveq	r1, #0
   1431c:	cmp	r5, #0
   14320:	cmpeq	r4, #1
   14324:	movne	r1, #1
   14328:	cmp	r1, #0
   1432c:	strd	r2, [sp, #192]	; 0xc0
   14330:	strd	r2, [sp, #200]	; 0xc8
   14334:	strd	r2, [sp, #208]	; 0xd0
   14338:	beq	14b04 <__assert_fail@plt+0x39e0>
   1433c:	mov	r1, #1
   14340:	ldr	r0, [sp, #280]	; 0x118
   14344:	mov	r8, r1
   14348:	str	r1, [sp, #120]	; 0x78
   1434c:	str	r1, [sp, #124]	; 0x7c
   14350:	mov	r1, #0
   14354:	str	r8, [sp, #184]	; 0xb8
   14358:	strd	r0, [sp, #80]	; 0x50
   1435c:	ldrd	r0, [sp, #56]	; 0x38
   14360:	strd	r6, [sp, #160]	; 0xa0
   14364:	mov	sl, r0
   14368:	mov	fp, r1
   1436c:	strd	r0, [sp, #48]	; 0x30
   14370:	ldr	r0, [pc, #2836]	; 14e8c <__assert_fail@plt+0x3d68>
   14374:	lsl	r1, r4, #24
   14378:	mov	lr, #0
   1437c:	add	r1, r0, r1, lsr #25
   14380:	and	r0, r4, #1
   14384:	ldrb	ip, [r1, #40]	; 0x28
   14388:	str	r0, [sp, #152]	; 0x98
   1438c:	str	lr, [sp, #156]	; 0x9c
   14390:	strd	sl, [sp, #112]	; 0x70
   14394:	umull	r0, r1, ip, ip
   14398:	ldr	r8, [sp, #184]	; 0xb8
   1439c:	adds	ip, ip, ip
   143a0:	mul	r9, r0, r5
   143a4:	umull	r6, r7, r0, r4
   143a8:	mla	r1, r4, r1, r9
   143ac:	adc	lr, lr, lr
   143b0:	add	r1, r1, r7
   143b4:	mov	r7, r1
   143b8:	subs	r1, ip, r6
   143bc:	sbc	lr, lr, r7
   143c0:	umull	r6, r7, r1, r1
   143c4:	mul	r0, r1, lr
   143c8:	mul	r9, r6, r5
   143cc:	adds	ip, r1, r1
   143d0:	add	r1, r7, r0, lsl #1
   143d4:	umull	r6, r7, r6, r4
   143d8:	mla	r9, r4, r1, r9
   143dc:	adc	lr, lr, lr
   143e0:	add	r7, r9, r7
   143e4:	subs	r0, ip, r6
   143e8:	sbc	lr, lr, r7
   143ec:	umull	r6, r7, r0, r0
   143f0:	mul	r1, r0, lr
   143f4:	mul	r9, r6, r5
   143f8:	add	r1, r7, r1, lsl #1
   143fc:	mov	r7, r1
   14400:	adds	ip, r0, r0
   14404:	umull	r0, r1, r6, r4
   14408:	mla	r9, r4, r7, r9
   1440c:	adc	lr, lr, lr
   14410:	add	r1, r9, r1
   14414:	subs	ip, ip, r0
   14418:	str	ip, [sp, #64]	; 0x40
   1441c:	sbc	r9, lr, r1
   14420:	ldrd	r6, [sp, #160]	; 0xa0
   14424:	b	1443c <__assert_fail@plt+0x3318>
   14428:	subs	r8, r8, #1
   1442c:	ldrd	r2, [sp, #192]	; 0xc0
   14430:	beq	14668 <__assert_fail@plt+0x3544>
   14434:	and	r1, r8, #31
   14438:	str	r1, [sp, #124]	; 0x7c
   1443c:	ldr	r1, [sp, #64]	; 0x40
   14440:	strd	r2, [sp, #8]
   14444:	str	r1, [sp, #40]	; 0x28
   14448:	ldrd	r0, [sp, #56]	; 0x38
   1444c:	str	r9, [sp, #44]	; 0x2c
   14450:	strd	r4, [sp, #32]
   14454:	strd	r0, [sp, #16]
   14458:	strd	r0, [sp]
   1445c:	strd	r6, [sp, #24]
   14460:	add	r0, sp, #224	; 0xe0
   14464:	bl	11574 <__assert_fail@plt+0x450>
   14468:	ldrd	r2, [sp, #80]	; 0x50
   1446c:	ldrd	sl, [sp, #224]	; 0xe0
   14470:	strd	sl, [sp, #56]	; 0x38
   14474:	adds	sl, r0, r2
   14478:	adcs	fp, r1, r3
   1447c:	mov	r0, sl
   14480:	mov	r1, fp
   14484:	ldrd	sl, [sp, #56]	; 0x38
   14488:	movcs	ip, #1
   1448c:	movcc	ip, #0
   14490:	adds	sl, sl, ip
   14494:	adc	fp, fp, #0
   14498:	cmp	fp, r7
   1449c:	mov	r2, r0
   144a0:	mov	r3, r1
   144a4:	cmpeq	sl, r6
   144a8:	strd	r2, [sp, #56]	; 0x38
   144ac:	bhi	144d0 <__assert_fail@plt+0x33ac>
   144b0:	moveq	ip, #1
   144b4:	movne	ip, #0
   144b8:	cmp	r5, r1
   144bc:	cmpeq	r4, r0
   144c0:	movhi	ip, #0
   144c4:	andls	ip, ip, #1
   144c8:	cmp	ip, #0
   144cc:	beq	14504 <__assert_fail@plt+0x33e0>
   144d0:	cmp	r5, r1
   144d4:	cmpeq	r4, r0
   144d8:	movhi	ip, #1
   144dc:	movls	ip, #0
   144e0:	subs	r3, r0, r4
   144e4:	str	r3, [sp, #56]	; 0x38
   144e8:	sbc	r3, r1, r5
   144ec:	subs	ip, sl, ip
   144f0:	mov	r1, #0
   144f4:	sbc	r1, fp, r1
   144f8:	subs	sl, ip, r6
   144fc:	sbc	fp, r1, r7
   14500:	str	r3, [sp, #60]	; 0x3c
   14504:	ldrd	r2, [sp, #56]	; 0x38
   14508:	ldr	ip, [sp, #48]	; 0x30
   1450c:	ldr	r1, [sp, #200]	; 0xc8
   14510:	subs	ip, ip, r2
   14514:	str	ip, [sp, #72]	; 0x48
   14518:	ldr	ip, [sp, #52]	; 0x34
   1451c:	ldr	r0, [sp, #204]	; 0xcc
   14520:	sbc	ip, ip, r3
   14524:	subs	r1, r1, sl
   14528:	str	r1, [sp, #88]	; 0x58
   1452c:	sbc	r1, r0, fp
   14530:	str	r1, [sp, #92]	; 0x5c
   14534:	ldrd	r0, [sp, #48]	; 0x30
   14538:	strd	sl, [sp, #192]	; 0xc0
   1453c:	str	ip, [sp, #76]	; 0x4c
   14540:	cmp	r3, r1
   14544:	cmpeq	r2, r0
   14548:	ldrd	r2, [sp, #88]	; 0x58
   1454c:	movhi	r1, #1
   14550:	movls	r1, #0
   14554:	subs	r2, r2, r1
   14558:	sbc	r3, r3, #0
   1455c:	cmp	r2, #0
   14560:	sbcs	r1, r3, #0
   14564:	bge	14590 <__assert_fail@plt+0x346c>
   14568:	ldrd	r0, [sp, #72]	; 0x48
   1456c:	adds	sl, r4, r0
   14570:	adcs	fp, r5, r1
   14574:	movcs	ip, #1
   14578:	movcc	ip, #0
   1457c:	adds	r0, r2, ip
   14580:	adc	r1, r3, #0
   14584:	adds	r2, r0, r6
   14588:	adc	r3, r1, r7
   1458c:	strd	sl, [sp, #72]	; 0x48
   14590:	ldr	r1, [sp, #64]	; 0x40
   14594:	strd	r2, [sp, #8]
   14598:	str	r1, [sp, #40]	; 0x28
   1459c:	ldrd	r2, [sp, #96]	; 0x60
   145a0:	ldrd	r0, [sp, #72]	; 0x48
   145a4:	str	r9, [sp, #44]	; 0x2c
   145a8:	strd	r2, [sp]
   145ac:	strd	r0, [sp, #16]
   145b0:	ldrd	r2, [sp, #104]	; 0x68
   145b4:	strd	r4, [sp, #32]
   145b8:	strd	r6, [sp, #24]
   145bc:	add	r0, sp, #224	; 0xe0
   145c0:	bl	11574 <__assert_fail@plt+0x450>
   145c4:	ldr	r3, [sp, #124]	; 0x7c
   145c8:	cmp	r3, #1
   145cc:	ldrd	r2, [sp, #224]	; 0xe0
   145d0:	strd	r2, [sp, #104]	; 0x68
   145d4:	strd	r0, [sp, #96]	; 0x60
   145d8:	bne	14428 <__assert_fail@plt+0x3304>
   145dc:	ldrd	r2, [sp, #152]	; 0x98
   145e0:	orrs	r3, r2, r3
   145e4:	beq	14e38 <__assert_fail@plt+0x3d14>
   145e8:	ldrd	r2, [sp, #104]	; 0x68
   145ec:	ldrd	r0, [sp, #96]	; 0x60
   145f0:	orr	ip, r0, r2
   145f4:	orr	r3, r1, r3
   145f8:	str	ip, [sp, #128]	; 0x80
   145fc:	str	r3, [sp, #132]	; 0x84
   14600:	ldrd	r2, [sp, #128]	; 0x80
   14604:	orrs	r3, r2, r3
   14608:	beq	147d4 <__assert_fail@plt+0x36b0>
   1460c:	ldrd	r2, [sp, #96]	; 0x60
   14610:	strd	r4, [sp, #16]
   14614:	strd	r6, [sp, #8]
   14618:	strd	r2, [sp]
   1461c:	add	r0, sp, #216	; 0xd8
   14620:	ldrd	r2, [sp, #104]	; 0x68
   14624:	bl	1234c <__assert_fail@plt+0x1228>
   14628:	ldr	ip, [sp, #216]	; 0xd8
   1462c:	ldr	r2, [sp, #220]	; 0xdc
   14630:	cmp	r1, #0
   14634:	cmpeq	r0, #1
   14638:	movne	r3, #1
   1463c:	moveq	r3, #0
   14640:	orrs	r2, ip, r2
   14644:	movne	r3, #1
   14648:	cmp	r3, #0
   1464c:	bne	147ec <__assert_fail@plt+0x36c8>
   14650:	ldrd	r2, [sp, #192]	; 0xc0
   14654:	ldrd	r0, [sp, #56]	; 0x38
   14658:	subs	r8, r8, #1
   1465c:	strd	r2, [sp, #208]	; 0xd0
   14660:	strd	r0, [sp, #112]	; 0x70
   14664:	bne	14434 <__assert_fail@plt+0x3310>
   14668:	ldr	r1, [sp, #120]	; 0x78
   1466c:	strd	r2, [sp, #200]	; 0xc8
   14670:	cmp	r1, #0
   14674:	lsl	r1, r1, #1
   14678:	str	r1, [sp, #124]	; 0x7c
   1467c:	ldrd	r0, [sp, #56]	; 0x38
   14680:	beq	14b20 <__assert_fail@plt+0x39fc>
   14684:	mov	sl, r0
   14688:	mov	fp, r1
   1468c:	strd	r2, [sp, #48]	; 0x30
   14690:	ldr	r3, [sp, #64]	; 0x40
   14694:	strd	sl, [sp, #16]
   14698:	str	r3, [sp, #40]	; 0x28
   1469c:	ldrd	r2, [sp, #48]	; 0x30
   146a0:	strd	sl, [sp]
   146a4:	str	r9, [sp, #44]	; 0x2c
   146a8:	strd	r2, [sp, #8]
   146ac:	strd	r4, [sp, #32]
   146b0:	strd	r6, [sp, #24]
   146b4:	add	r0, sp, #224	; 0xe0
   146b8:	bl	11574 <__assert_fail@plt+0x450>
   146bc:	ldrd	r2, [sp, #224]	; 0xe0
   146c0:	strd	r2, [sp, #48]	; 0x30
   146c4:	ldrd	r2, [sp, #80]	; 0x50
   146c8:	adds	sl, r0, r2
   146cc:	adcs	fp, r1, r3
   146d0:	ldrd	r2, [sp, #48]	; 0x30
   146d4:	movcs	ip, #1
   146d8:	movcc	ip, #0
   146dc:	adds	r2, r2, ip
   146e0:	adc	r3, r3, #0
   146e4:	cmp	r3, r7
   146e8:	cmpeq	r2, r6
   146ec:	mov	r0, sl
   146f0:	mov	r1, fp
   146f4:	strd	r2, [sp, #48]	; 0x30
   146f8:	bhi	1471c <__assert_fail@plt+0x35f8>
   146fc:	moveq	ip, #1
   14700:	movne	ip, #0
   14704:	cmp	r5, fp
   14708:	cmpeq	r4, sl
   1470c:	movhi	ip, #0
   14710:	andls	ip, ip, #1
   14714:	cmp	ip, #0
   14718:	beq	14758 <__assert_fail@plt+0x3634>
   1471c:	ldrd	r2, [sp, #48]	; 0x30
   14720:	cmp	r5, r1
   14724:	cmpeq	r4, r0
   14728:	movhi	ip, #1
   1472c:	movls	ip, #0
   14730:	subs	sl, r0, r4
   14734:	sbc	fp, r1, r5
   14738:	subs	ip, r2, ip
   1473c:	mov	r1, #0
   14740:	sbc	r1, r3, r1
   14744:	subs	r3, ip, r6
   14748:	str	r3, [sp, #48]	; 0x30
   1474c:	sbc	r3, r1, r7
   14750:	str	r3, [sp, #52]	; 0x34
   14754:	ldrd	r2, [sp, #48]	; 0x30
   14758:	strd	r2, [sp, #192]	; 0xc0
   1475c:	ldr	r3, [sp, #120]	; 0x78
   14760:	add	r8, r8, #1
   14764:	cmp	r3, r8
   14768:	bne	14690 <__assert_fail@plt+0x356c>
   1476c:	ldrd	r2, [sp, #48]	; 0x30
   14770:	strd	sl, [sp, #112]	; 0x70
   14774:	ldrd	r0, [sp, #56]	; 0x38
   14778:	ldr	r8, [sp, #120]	; 0x78
   1477c:	strd	r2, [sp, #208]	; 0xd0
   14780:	strd	r0, [sp, #48]	; 0x30
   14784:	ldr	r1, [sp, #124]	; 0x7c
   14788:	str	r1, [sp, #120]	; 0x78
   1478c:	ldrd	r0, [sp, #112]	; 0x70
   14790:	strd	r0, [sp, #56]	; 0x38
   14794:	b	14434 <__assert_fail@plt+0x3310>
   14798:	ldrd	r8, [sp, #64]	; 0x40
   1479c:	cmp	r5, r9
   147a0:	cmpeq	r4, r8
   147a4:	movhi	r1, #1
   147a8:	movls	r1, #0
   147ac:	subs	r0, r8, r4
   147b0:	str	r0, [sp, #56]	; 0x38
   147b4:	sbc	r0, r9, r5
   147b8:	str	r0, [sp, #60]	; 0x3c
   147bc:	subs	r1, r2, r1
   147c0:	mov	r0, #0
   147c4:	sbc	r0, r3, r0
   147c8:	subs	r2, r1, r6
   147cc:	sbc	r3, r0, r7
   147d0:	b	14310 <__assert_fail@plt+0x31ec>
   147d4:	strd	r6, [sp, #216]	; 0xd8
   147d8:	mov	ip, r6
   147dc:	mov	r2, r7
   147e0:	mov	r0, r4
   147e4:	mov	r1, r5
   147e8:	b	14630 <__assert_fail@plt+0x350c>
   147ec:	ldrd	sl, [sp, #112]	; 0x70
   147f0:	str	r8, [sp, #184]	; 0xb8
   147f4:	str	r9, [sp, #160]	; 0xa0
   147f8:	b	14830 <__assert_fail@plt+0x370c>
   147fc:	strd	r4, [sp, #16]
   14800:	strd	r6, [sp, #8]
   14804:	strd	r8, [sp]
   14808:	add	r0, sp, #216	; 0xd8
   1480c:	bl	1234c <__assert_fail@plt+0x1228>
   14810:	mov	r2, r0
   14814:	mov	r3, r1
   14818:	ldrd	r0, [sp, #216]	; 0xd8
   1481c:	orrs	ip, r0, r1
   14820:	bne	149b4 <__assert_fail@plt+0x3890>
   14824:	cmp	r3, #0
   14828:	cmpeq	r2, #1
   1482c:	bne	14b28 <__assert_fail@plt+0x3a04>
   14830:	ldr	r1, [sp, #64]	; 0x40
   14834:	ldrd	r2, [sp, #208]	; 0xd0
   14838:	str	r1, [sp, #40]	; 0x28
   1483c:	ldr	r1, [sp, #160]	; 0xa0
   14840:	strd	sl, [sp, #16]
   14844:	strd	sl, [sp]
   14848:	strd	r2, [sp, #8]
   1484c:	str	r1, [sp, #44]	; 0x2c
   14850:	strd	r4, [sp, #32]
   14854:	strd	r6, [sp, #24]
   14858:	add	r0, sp, #224	; 0xe0
   1485c:	bl	11574 <__assert_fail@plt+0x450>
   14860:	ldrd	r2, [sp, #224]	; 0xe0
   14864:	strd	r2, [sp, #112]	; 0x70
   14868:	ldrd	r2, [sp, #80]	; 0x50
   1486c:	adds	sl, r0, r2
   14870:	adcs	fp, r1, r3
   14874:	ldrd	r2, [sp, #112]	; 0x70
   14878:	movcs	ip, #1
   1487c:	movcc	ip, #0
   14880:	adds	r2, r2, ip
   14884:	adc	r3, r3, #0
   14888:	cmp	r3, r7
   1488c:	cmpeq	r2, r6
   14890:	mov	r0, sl
   14894:	mov	r1, fp
   14898:	strd	r2, [sp, #112]	; 0x70
   1489c:	bhi	148c0 <__assert_fail@plt+0x379c>
   148a0:	moveq	ip, #1
   148a4:	movne	ip, #0
   148a8:	cmp	r5, fp
   148ac:	cmpeq	r4, sl
   148b0:	movhi	ip, #0
   148b4:	andls	ip, ip, #1
   148b8:	cmp	ip, #0
   148bc:	beq	148fc <__assert_fail@plt+0x37d8>
   148c0:	ldrd	r2, [sp, #112]	; 0x70
   148c4:	cmp	r5, r1
   148c8:	cmpeq	r4, r0
   148cc:	movhi	ip, #1
   148d0:	movls	ip, #0
   148d4:	subs	sl, r0, r4
   148d8:	sbc	fp, r1, r5
   148dc:	subs	ip, r2, ip
   148e0:	mov	r1, #0
   148e4:	sbc	r1, r3, r1
   148e8:	subs	r3, ip, r6
   148ec:	str	r3, [sp, #112]	; 0x70
   148f0:	sbc	r3, r1, r7
   148f4:	str	r3, [sp, #116]	; 0x74
   148f8:	ldrd	r2, [sp, #112]	; 0x70
   148fc:	strd	r2, [sp, #208]	; 0xd0
   14900:	ldrd	r2, [sp, #48]	; 0x30
   14904:	ldr	r1, [sp, #200]	; 0xc8
   14908:	ldr	ip, [sp, #112]	; 0x70
   1490c:	subs	r8, r2, sl
   14910:	sbc	r9, r3, fp
   14914:	subs	r1, r1, ip
   14918:	str	r1, [sp, #136]	; 0x88
   1491c:	ldr	r0, [sp, #204]	; 0xcc
   14920:	ldr	r1, [sp, #116]	; 0x74
   14924:	sbc	r1, r0, r1
   14928:	str	r1, [sp, #140]	; 0x8c
   1492c:	cmp	r3, fp
   14930:	cmpeq	r2, sl
   14934:	ldrd	r2, [sp, #136]	; 0x88
   14938:	movcc	r1, #1
   1493c:	movcs	r1, #0
   14940:	subs	r2, r2, r1
   14944:	sbc	r3, r3, #0
   14948:	cmp	r2, #0
   1494c:	sbcs	r1, r3, #0
   14950:	bge	1497c <__assert_fail@plt+0x3858>
   14954:	adds	r0, r4, r8
   14958:	adcs	r1, r5, r9
   1495c:	movcs	ip, #1
   14960:	movcc	ip, #0
   14964:	mov	r8, r0
   14968:	adds	r0, r2, ip
   1496c:	mov	r9, r1
   14970:	adc	r1, r3, #0
   14974:	adds	r2, r0, r6
   14978:	adc	r3, r1, r7
   1497c:	orr	r1, r2, r8
   14980:	str	r1, [sp, #144]	; 0x90
   14984:	orr	r1, r3, r9
   14988:	str	r1, [sp, #148]	; 0x94
   1498c:	ldrd	r0, [sp, #144]	; 0x90
   14990:	orrs	r1, r0, r1
   14994:	bne	147fc <__assert_fail@plt+0x36d8>
   14998:	mov	r0, r6
   1499c:	mov	r1, r7
   149a0:	orrs	ip, r0, r1
   149a4:	strd	r6, [sp, #216]	; 0xd8
   149a8:	mov	r2, r4
   149ac:	mov	r3, r5
   149b0:	beq	14824 <__assert_fail@plt+0x3700>
   149b4:	cmp	r5, r3
   149b8:	cmpeq	r4, r2
   149bc:	strd	r2, [sp, #64]	; 0x40
   149c0:	movne	r3, #0
   149c4:	moveq	r3, #1
   149c8:	cmp	r7, r1
   149cc:	cmpeq	r6, r0
   149d0:	movne	r3, #0
   149d4:	cmp	r3, #0
   149d8:	bne	14e50 <__assert_fail@plt+0x3d2c>
   149dc:	ldrd	sl, [sp, #64]	; 0x40
   149e0:	ldr	r2, [pc, #1188]	; 14e8c <__assert_fail@plt+0x3d68>
   149e4:	mov	ip, #0
   149e8:	lsl	r3, sl, #24
   149ec:	add	r3, r2, r3, lsr #25
   149f0:	mov	r2, sl
   149f4:	ldrb	lr, [r3, #40]	; 0x28
   149f8:	mov	r3, fp
   149fc:	umull	r8, r9, lr, lr
   14a00:	adds	lr, lr, lr
   14a04:	mul	r6, r8, fp
   14a08:	adc	ip, ip, ip
   14a0c:	mla	r6, sl, r9, r6
   14a10:	umull	r8, r9, r8, sl
   14a14:	subs	lr, lr, r8
   14a18:	add	r9, r6, r9
   14a1c:	sbc	ip, ip, r9
   14a20:	umull	r8, r9, lr, lr
   14a24:	mul	r7, lr, ip
   14a28:	adds	lr, lr, lr
   14a2c:	adc	r6, ip, ip
   14a30:	mul	ip, r8, fp
   14a34:	add	r9, r9, r7, lsl #1
   14a38:	mla	ip, sl, r9, ip
   14a3c:	umull	r8, r9, r8, sl
   14a40:	add	r9, ip, r9
   14a44:	subs	ip, lr, r8
   14a48:	sbc	r6, r6, r9
   14a4c:	umull	r8, r9, ip, ip
   14a50:	mul	lr, ip, r6
   14a54:	adds	ip, ip, ip
   14a58:	adc	r6, r6, r6
   14a5c:	add	r9, r9, lr, lsl #1
   14a60:	mul	lr, r8, fp
   14a64:	mla	lr, sl, r9, lr
   14a68:	umull	r8, r9, r8, sl
   14a6c:	subs	ip, ip, r8
   14a70:	add	r9, lr, r9
   14a74:	sbc	lr, r6, r9
   14a78:	mul	lr, r4, lr
   14a7c:	mla	lr, ip, r5, lr
   14a80:	umull	r4, r5, r4, ip
   14a84:	add	r5, lr, r5
   14a88:	bl	16334 <__assert_fail@plt+0x5210>
   14a8c:	cmp	r0, #0
   14a90:	bne	14e00 <__assert_fail@plt+0x3cdc>
   14a94:	ldr	r3, [sp, #280]	; 0x118
   14a98:	mov	r2, sl
   14a9c:	add	r1, r3, #1
   14aa0:	ldr	r3, [sp, #188]	; 0xbc
   14aa4:	str	r1, [sp]
   14aa8:	str	r3, [sp, #4]
   14aac:	ldrd	r0, [sp, #216]	; 0xd8
   14ab0:	mov	r3, fp
   14ab4:	bl	1417c <__assert_fail@plt+0x3058>
   14ab8:	cmp	r5, #0
   14abc:	cmpeq	r4, #1
   14ac0:	bls	14e20 <__assert_fail@plt+0x3cfc>
   14ac4:	add	r3, pc, #948	; 0x3b4
   14ac8:	ldrd	r2, [r3]
   14acc:	cmp	r5, r3
   14ad0:	cmpeq	r4, r2
   14ad4:	bls	14aec <__assert_fail@plt+0x39c8>
   14ad8:	mov	r0, r4
   14adc:	mov	r1, r5
   14ae0:	bl	12ea4 <__assert_fail@plt+0x1d80>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14e20 <__assert_fail@plt+0x3cfc>
   14aec:	mov	r1, #1
   14af0:	mov	r2, r4
   14af4:	mov	r3, r5
   14af8:	ldr	r0, [sp, #188]	; 0xbc
   14afc:	str	r1, [sp]
   14b00:	bl	11448 <__assert_fail@plt+0x324>
   14b04:	ldr	r3, [pc, #892]	; 14e88 <__assert_fail@plt+0x3d64>
   14b08:	ldr	r2, [sp, #236]	; 0xec
   14b0c:	ldr	r3, [r3]
   14b10:	cmp	r2, r3
   14b14:	bne	14e4c <__assert_fail@plt+0x3d28>
   14b18:	add	sp, sp, #244	; 0xf4
   14b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b20:	strd	r0, [sp, #112]	; 0x70
   14b24:	b	14774 <__assert_fail@plt+0x3650>
   14b28:	strd	r2, [sp, #64]	; 0x40
   14b2c:	strd	r6, [sp, #160]	; 0xa0
   14b30:	ldr	ip, [pc, #852]	; 14e8c <__assert_fail@plt+0x3d68>
   14b34:	mov	r7, r3
   14b38:	lsl	r3, r2, #24
   14b3c:	ldr	r6, [sp, #64]	; 0x40
   14b40:	add	r3, ip, r3, lsr #25
   14b44:	strd	r8, [sp, #176]	; 0xb0
   14b48:	ldrb	ip, [r3, #40]	; 0x28
   14b4c:	ldr	r9, [sp, #64]	; 0x40
   14b50:	mov	lr, #0
   14b54:	umull	r2, r3, ip, ip
   14b58:	adds	ip, ip, ip
   14b5c:	mul	r8, r2, r7
   14b60:	umull	r6, r7, r2, r6
   14b64:	mla	r3, r9, r3, r8
   14b68:	strd	r6, [sp, #112]	; 0x70
   14b6c:	add	r3, r3, r7
   14b70:	str	r3, [sp, #116]	; 0x74
   14b74:	ldrd	r6, [sp, #112]	; 0x70
   14b78:	adc	lr, lr, lr
   14b7c:	subs	ip, ip, r6
   14b80:	sbc	lr, lr, r7
   14b84:	umull	r6, r7, ip, ip
   14b88:	mul	r3, ip, lr
   14b8c:	strd	r6, [sp, #112]	; 0x70
   14b90:	adds	ip, ip, ip
   14b94:	add	r3, r7, r3, lsl #1
   14b98:	str	r3, [sp, #116]	; 0x74
   14b9c:	ldrd	r8, [sp, #112]	; 0x70
   14ba0:	ldrd	r2, [sp, #64]	; 0x40
   14ba4:	adc	lr, lr, lr
   14ba8:	mov	r7, r8
   14bac:	mul	r6, r8, r3
   14bb0:	mov	r8, r2
   14bb4:	umull	r2, r3, r7, r2
   14bb8:	ldr	r7, [sp, #116]	; 0x74
   14bbc:	subs	ip, ip, r2
   14bc0:	mla	r9, r8, r7, r6
   14bc4:	umull	r6, r7, ip, ip
   14bc8:	add	r3, r9, r3
   14bcc:	sbc	lr, lr, r3
   14bd0:	strd	r6, [sp, #112]	; 0x70
   14bd4:	mul	r3, ip, lr
   14bd8:	adds	ip, ip, ip
   14bdc:	adc	lr, lr, lr
   14be0:	add	r3, r7, r3, lsl #1
   14be4:	str	r3, [sp, #116]	; 0x74
   14be8:	ldrd	r8, [sp, #112]	; 0x70
   14bec:	ldrd	r2, [sp, #64]	; 0x40
   14bf0:	mov	r7, r8
   14bf4:	mul	r6, r8, r3
   14bf8:	mov	r8, r2
   14bfc:	umull	r2, r3, r7, r2
   14c00:	ldr	r7, [sp, #116]	; 0x74
   14c04:	subs	ip, ip, r2
   14c08:	mla	r9, r8, r7, r6
   14c0c:	ldrd	r6, [sp, #160]	; 0xa0
   14c10:	add	r3, r9, r3
   14c14:	sbc	r9, lr, r3
   14c18:	ldrd	r2, [sp, #64]	; 0x40
   14c1c:	mul	lr, r4, r9
   14c20:	cmp	r7, r3
   14c24:	mla	lr, ip, r5, lr
   14c28:	umull	r4, r5, r4, ip
   14c2c:	cmpeq	r6, r2
   14c30:	add	lr, lr, r5
   14c34:	mov	r5, lr
   14c38:	strdcc	r0, [sp, #160]	; 0xa0
   14c3c:	bcc	14cc8 <__assert_fail@plt+0x3ba4>
   14c40:	ldrd	r6, [sp, #64]	; 0x40
   14c44:	umull	r0, r1, lr, r6
   14c48:	umull	r2, r3, r4, r6
   14c4c:	strd	r0, [sp, #112]	; 0x70
   14c50:	umlal	r0, r1, r4, r7
   14c54:	mov	r6, r0
   14c58:	adds	r3, r3, r6
   14c5c:	mov	r7, r1
   14c60:	str	r3, [sp, #168]	; 0xa8
   14c64:	mov	r3, #0
   14c68:	adc	r3, r3, r7
   14c6c:	str	r3, [sp, #172]	; 0xac
   14c70:	ldrd	r6, [sp, #168]	; 0xa8
   14c74:	ldrd	r2, [sp, #112]	; 0x70
   14c78:	ldr	r1, [sp, #68]	; 0x44
   14c7c:	cmp	r3, r7
   14c80:	cmpeq	r2, r6
   14c84:	umull	r0, r1, lr, r1
   14c88:	bls	14c94 <__assert_fail@plt+0x3b70>
   14c8c:	adds	r0, r0, #0
   14c90:	adc	r1, r1, #1
   14c94:	ldrd	r6, [sp, #160]	; 0xa0
   14c98:	ldr	r2, [sp, #172]	; 0xac
   14c9c:	mov	r3, #0
   14ca0:	subs	r2, r6, r2
   14ca4:	sbc	r3, r7, r3
   14ca8:	subs	r2, r2, r0
   14cac:	sbc	r3, r3, r1
   14cb0:	mul	lr, r2, r9
   14cb4:	umull	r0, r1, r2, ip
   14cb8:	mla	r3, ip, r3, lr
   14cbc:	strd	r0, [sp, #160]	; 0xa0
   14cc0:	add	r3, r3, r1
   14cc4:	str	r3, [sp, #164]	; 0xa4
   14cc8:	ldrd	r2, [sp, #64]	; 0x40
   14ccc:	cmp	r3, #0
   14cd0:	cmpeq	r2, #1
   14cd4:	bls	14da8 <__assert_fail@plt+0x3c84>
   14cd8:	ldrd	r2, [sp, #64]	; 0x40
   14cdc:	add	r1, pc, #412	; 0x19c
   14ce0:	ldrd	r0, [r1]
   14ce4:	cmp	r3, r1
   14ce8:	cmpeq	r2, r0
   14cec:	bls	14d04 <__assert_fail@plt+0x3be0>
   14cf0:	mov	r0, r2
   14cf4:	mov	r1, r3
   14cf8:	bl	12ea4 <__assert_fail@plt+0x1d80>
   14cfc:	cmp	r0, #0
   14d00:	beq	14da8 <__assert_fail@plt+0x3c84>
   14d04:	mov	r1, #1
   14d08:	ldrd	r2, [sp, #64]	; 0x40
   14d0c:	str	r1, [sp]
   14d10:	ldr	r0, [sp, #188]	; 0xbc
   14d14:	bl	11448 <__assert_fail@plt+0x324>
   14d18:	ldrd	r2, [sp, #160]	; 0xa0
   14d1c:	orrs	r3, r2, r3
   14d20:	beq	14ab8 <__assert_fail@plt+0x3994>
   14d24:	mov	r2, r4
   14d28:	mov	r3, r5
   14d2c:	ldrd	r0, [sp, #160]	; 0xa0
   14d30:	bl	16334 <__assert_fail@plt+0x5210>
   14d34:	cmp	r0, #0
   14d38:	bne	14de4 <__assert_fail@plt+0x3cc0>
   14d3c:	ldrd	r6, [sp, #160]	; 0xa0
   14d40:	ldrd	r2, [sp, #56]	; 0x38
   14d44:	strd	r4, [sp, #16]
   14d48:	strd	r6, [sp, #8]
   14d4c:	strd	r2, [sp]
   14d50:	add	r0, sp, #192	; 0xc0
   14d54:	ldrd	r2, [sp, #192]	; 0xc0
   14d58:	bl	125f0 <__assert_fail@plt+0x14cc>
   14d5c:	ldrd	r2, [sp, #48]	; 0x30
   14d60:	strd	r4, [sp, #16]
   14d64:	strd	r6, [sp, #8]
   14d68:	strd	r2, [sp]
   14d6c:	ldrd	r2, [sp, #200]	; 0xc8
   14d70:	strd	r0, [sp, #56]	; 0x38
   14d74:	add	r0, sp, #200	; 0xc8
   14d78:	bl	125f0 <__assert_fail@plt+0x14cc>
   14d7c:	strd	sl, [sp]
   14d80:	ldrd	r2, [sp, #208]	; 0xd0
   14d84:	strd	r4, [sp, #16]
   14d88:	strd	r6, [sp, #8]
   14d8c:	strd	r0, [sp, #48]	; 0x30
   14d90:	add	r0, sp, #208	; 0xd0
   14d94:	bl	125f0 <__assert_fail@plt+0x14cc>
   14d98:	ldrd	r2, [sp, #192]	; 0xc0
   14d9c:	mov	sl, r0
   14da0:	mov	fp, r1
   14da4:	b	14370 <__assert_fail@plt+0x324c>
   14da8:	ldr	r2, [sp, #280]	; 0x118
   14dac:	ldrd	r0, [sp, #64]	; 0x40
   14db0:	ldr	r3, [sp, #188]	; 0xbc
   14db4:	add	r2, r2, #1
   14db8:	bl	13484 <__assert_fail@plt+0x2360>
   14dbc:	b	14d18 <__assert_fail@plt+0x3bf4>
   14dc0:	mov	r0, #1
   14dc4:	mov	r1, #0
   14dc8:	mov	r2, #127	; 0x7f
   14dcc:	strd	r0, [sp, #96]	; 0x60
   14dd0:	mov	r0, #0
   14dd4:	mov	r1, #0
   14dd8:	mov	r3, #0
   14ddc:	strd	r0, [sp, #104]	; 0x68
   14de0:	b	141d0 <__assert_fail@plt+0x30ac>
   14de4:	ldrd	r6, [sp, #160]	; 0xa0
   14de8:	strd	r4, [sp]
   14dec:	ldr	r0, [sp, #188]	; 0xbc
   14df0:	mov	r2, r6
   14df4:	mov	r3, r7
   14df8:	bl	122dc <__assert_fail@plt+0x11b8>
   14dfc:	b	14b04 <__assert_fail@plt+0x39e0>
   14e00:	ldrd	r2, [sp, #64]	; 0x40
   14e04:	ldr	r0, [sp, #188]	; 0xbc
   14e08:	strd	r2, [sp]
   14e0c:	ldrd	r2, [sp, #216]	; 0xd8
   14e10:	bl	122dc <__assert_fail@plt+0x11b8>
   14e14:	cmp	r5, #0
   14e18:	cmpeq	r4, #1
   14e1c:	bhi	14ac4 <__assert_fail@plt+0x39a0>
   14e20:	ldr	r3, [sp, #188]	; 0xbc
   14e24:	ldr	r2, [sp, #280]	; 0x118
   14e28:	mov	r0, r4
   14e2c:	mov	r1, r5
   14e30:	bl	13484 <__assert_fail@plt+0x2360>
   14e34:	b	14b04 <__assert_fail@plt+0x39e0>
   14e38:	ldr	r3, [pc, #80]	; 14e90 <__assert_fail@plt+0x3d6c>
   14e3c:	ldr	r2, [pc, #80]	; 14e94 <__assert_fail@plt+0x3d70>
   14e40:	ldr	r1, [pc, #80]	; 14e98 <__assert_fail@plt+0x3d74>
   14e44:	ldr	r0, [pc, #80]	; 14e9c <__assert_fail@plt+0x3d78>
   14e48:	bl	11124 <__assert_fail@plt>
   14e4c:	bl	10f20 <__stack_chk_fail@plt>
   14e50:	ldr	r3, [sp, #280]	; 0x118
   14e54:	mov	r2, r4
   14e58:	add	r3, r3, #1
   14e5c:	str	r3, [sp]
   14e60:	ldr	r3, [sp, #188]	; 0xbc
   14e64:	mov	r0, r6
   14e68:	str	r3, [sp, #4]
   14e6c:	mov	r1, r7
   14e70:	mov	r3, r5
   14e74:	bl	1417c <__assert_fail@plt+0x3058>
   14e78:	b	14b04 <__assert_fail@plt+0x39e0>
   14e7c:	nop			; (mov r0, r0)
   14e80:	cmneq	sp, r8, ror sp
   14e84:	andeq	r0, r0, r0
   14e88:	andeq	r0, r3, r8, lsl #30
   14e8c:	andeq	sp, r1, r0, lsr #4
   14e90:	muleq	r1, r0, r5
   14e94:	andeq	r0, r0, r3, ror #3
   14e98:	andeq	r0, r2, r8, ror #5
   14e9c:	ldrdeq	r0, [r2], -r8
   14ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ea4:	mov	r9, r1
   14ea8:	mov	r1, r0
   14eac:	orrs	r1, r1, r9
   14eb0:	mov	fp, r3
   14eb4:	sub	sp, sp, #84	; 0x54
   14eb8:	moveq	r3, #1
   14ebc:	movne	r3, #0
   14ec0:	cmp	fp, #0
   14ec4:	cmpeq	r2, #1
   14ec8:	ldr	ip, [sp, #120]	; 0x78
   14ecc:	mov	r8, r0
   14ed0:	andls	r1, r3, #1
   14ed4:	mov	sl, r2
   14ed8:	movhi	r1, #0
   14edc:	mov	r2, #0
   14ee0:	mov	r3, #0
   14ee4:	mov	r0, #0
   14ee8:	cmp	r1, #0
   14eec:	strd	r8, [sp, #16]
   14ef0:	str	ip, [sp, #24]
   14ef4:	strb	r0, [ip, #250]	; 0xfa
   14ef8:	strd	r2, [ip, #8]
   14efc:	beq	14f08 <__assert_fail@plt+0x3de4>
   14f00:	add	sp, sp, #84	; 0x54
   14f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f08:	and	r2, sl, #1
   14f0c:	mov	r3, r1
   14f10:	orrs	r3, r2, r3
   14f14:	bne	15084 <__assert_fail@plt+0x3f60>
   14f18:	orrs	r3, sl, fp
   14f1c:	bne	14fec <__assert_fail@plt+0x3ec8>
   14f20:	and	r2, r8, #1
   14f24:	mov	r3, r1
   14f28:	orrs	r3, r2, r3
   14f2c:	bne	1584c <__assert_fail@plt+0x4728>
   14f30:	mov	r3, r1
   14f34:	mov	ip, r1
   14f38:	mov	r2, r8
   14f3c:	mov	r0, r9
   14f40:	b	14f48 <__assert_fail@plt+0x3e24>
   14f44:	mov	r3, r1
   14f48:	lsr	r2, r2, #1
   14f4c:	orr	r2, r2, r0, lsl #31
   14f50:	and	r6, r2, #1
   14f54:	mov	r7, ip
   14f58:	orrs	r1, r6, r7
   14f5c:	lsr	r0, r0, #1
   14f60:	add	r1, r3, #1
   14f64:	beq	14f44 <__assert_fail@plt+0x3e20>
   14f68:	ldrd	r4, [sp, #16]
   14f6c:	rsb	r0, r1, #32
   14f70:	lsr	r2, r4, r1
   14f74:	orr	r2, r2, r5, lsl r0
   14f78:	sub	r0, r3, #31
   14f7c:	lsr	r1, r5, r1
   14f80:	orr	r2, r2, r5, lsr r0
   14f84:	add	r3, r3, #65	; 0x41
   14f88:	str	r2, [sp, #16]
   14f8c:	str	r1, [sp, #20]
   14f90:	str	r3, [sp]
   14f94:	mov	r2, #2
   14f98:	mov	r3, #0
   14f9c:	ldr	r0, [sp, #24]
   14fa0:	ldrd	sl, [sp, #16]
   14fa4:	bl	11448 <__assert_fail@plt+0x324>
   14fa8:	mov	r2, #0
   14fac:	mov	r3, #0
   14fb0:	mov	r5, #0
   14fb4:	strd	r2, [sp, #16]
   14fb8:	mov	r3, #26
   14fbc:	str	r3, [sp, #28]
   14fc0:	mov	r2, #3
   14fc4:	mov	r3, #0
   14fc8:	mov	r1, r5
   14fcc:	strd	r2, [sp, #8]
   14fd0:	ldr	r3, [pc, #680]	; 15280 <__assert_fail@plt+0x415c>
   14fd4:	add	r9, pc, #644	; 0x284
   14fd8:	ldrd	r8, [r9]
   14fdc:	ldr	r6, [pc, #644]	; 15268 <__assert_fail@plt+0x4144>
   14fe0:	ldr	r7, [pc, #644]	; 1526c <__assert_fail@plt+0x4148>
   14fe4:	str	r3, [sp, #76]	; 0x4c
   14fe8:	b	1524c <__assert_fail@plt+0x4128>
   14fec:	mov	r3, r1
   14ff0:	mov	r0, r1
   14ff4:	mov	r2, sl
   14ff8:	mov	r1, fp
   14ffc:	lsr	r2, r2, #1
   15000:	orr	r2, r2, r1, lsl #31
   15004:	and	r4, r2, #1
   15008:	mov	r5, r0
   1500c:	orrs	ip, r4, r5
   15010:	lsr	r1, r1, #1
   15014:	add	r3, r3, #1
   15018:	beq	14ffc <__assert_fail@plt+0x3ed8>
   1501c:	ldrd	r6, [sp, #16]
   15020:	rsb	ip, r3, #64	; 0x40
   15024:	rsb	lr, r3, #32
   15028:	lsr	r2, sl, r3
   1502c:	lsr	r0, r6, r3
   15030:	sub	r5, ip, #32
   15034:	orr	r2, r2, fp, lsl lr
   15038:	sub	r4, r3, #32
   1503c:	lsl	r1, r7, ip
   15040:	orr	r0, r0, r7, lsl lr
   15044:	orr	r2, r2, fp, lsr r4
   15048:	orr	r1, r1, r6, lsl r5
   1504c:	rsb	r5, ip, #32
   15050:	orr	r0, r0, r7, lsr r4
   15054:	lsr	lr, fp, r3
   15058:	orr	sl, r2, r6, lsl ip
   1505c:	orr	r1, r1, r6, lsr r5
   15060:	lsr	ip, r7, r3
   15064:	str	r3, [sp]
   15068:	str	r0, [sp, #16]
   1506c:	mov	r2, #2
   15070:	mov	r3, #0
   15074:	ldr	r0, [sp, #24]
   15078:	orr	fp, r1, lr
   1507c:	str	ip, [sp, #20]
   15080:	bl	11448 <__assert_fail@plt+0x324>
   15084:	ldrd	r2, [sp, #16]
   15088:	orrs	r3, r2, r3
   1508c:	beq	15854 <__assert_fail@plt+0x4730>
   15090:	ldr	r3, [pc, #488]	; 15280 <__assert_fail@plt+0x415c>
   15094:	ldr	r6, [pc, #460]	; 15268 <__assert_fail@plt+0x4144>
   15098:	mov	r7, r3
   1509c:	str	r3, [sp, #76]	; 0x4c
   150a0:	ldr	r3, [pc, #456]	; 15270 <__assert_fail@plt+0x414c>
   150a4:	ldr	r4, [pc, #448]	; 1526c <__assert_fail@plt+0x4148>
   150a8:	str	r3, [sp, #72]	; 0x48
   150ac:	mov	r3, #2
   150b0:	str	r3, [sp, #52]	; 0x34
   150b4:	mov	r2, #3
   150b8:	mov	r3, #0
   150bc:	mov	r5, #0
   150c0:	strd	sl, [sp, #56]	; 0x38
   150c4:	strd	r2, [sp, #8]
   150c8:	mov	r9, r7
   150cc:	mov	fp, r5
   150d0:	mov	r8, r6
   150d4:	str	r4, [sp, #28]
   150d8:	b	150fc <__assert_fail@plt+0x3fd8>
   150dc:	ldr	r3, [sp, #72]	; 0x48
   150e0:	ldr	r8, [r9, #16]
   150e4:	add	r9, r9, #16
   150e8:	ldrb	r2, [r3], #1
   150ec:	str	r3, [sp, #72]	; 0x48
   150f0:	ldr	r3, [r9, #4]
   150f4:	str	r2, [sp, #52]	; 0x34
   150f8:	str	r3, [sp, #28]
   150fc:	ldrd	r2, [sp, #8]
   15100:	mov	sl, r2
   15104:	str	r3, [sp, #48]	; 0x30
   15108:	ldrd	r0, [sp, #56]	; 0x38
   1510c:	ldr	r2, [sp, #28]
   15110:	mov	ip, #0
   15114:	umull	r6, r7, r0, r8
   15118:	mul	r2, r0, r2
   1511c:	umull	r4, r5, r6, sl
   15120:	mla	r2, r8, r1, r2
   15124:	ldr	r1, [sp, #48]	; 0x30
   15128:	add	lr, r2, r7
   1512c:	mov	r7, lr
   15130:	umull	r0, r1, r1, r6
   15134:	umull	r2, r3, lr, sl
   15138:	strd	r0, [sp, #64]	; 0x40
   1513c:	ldr	r1, [sp, #68]	; 0x44
   15140:	adds	r0, r0, r2
   15144:	adc	r1, r1, r3
   15148:	adds	r0, r5, r0
   1514c:	str	r0, [sp, #32]
   15150:	adc	r0, ip, r1
   15154:	str	r0, [sp, #36]	; 0x24
   15158:	ldrd	r4, [sp, #32]
   1515c:	cmp	r3, r5
   15160:	ldr	r3, [sp, #48]	; 0x30
   15164:	cmpeq	r2, r4
   15168:	mov	r1, r5
   1516c:	umull	r2, r3, lr, r3
   15170:	bls	1517c <__assert_fail@plt+0x4058>
   15174:	adds	r2, r2, ip
   15178:	adc	r3, r3, #1
   1517c:	adds	r1, r1, r2
   15180:	adc	r3, ip, r3
   15184:	str	r1, [sp, #40]	; 0x28
   15188:	str	r3, [sp, #44]	; 0x2c
   1518c:	ldrd	r2, [sp, #40]	; 0x28
   15190:	ldrd	r0, [sp, #16]
   15194:	cmp	r3, r1
   15198:	cmpeq	r2, r0
   1519c:	bhi	151d0 <__assert_fail@plt+0x40ac>
   151a0:	subs	r4, r0, r2
   151a4:	sbc	r1, r1, r3
   151a8:	ldr	r3, [sp, #28]
   151ac:	mov	lr, r2
   151b0:	mul	r3, r4, r3
   151b4:	umull	r4, r5, r4, r8
   151b8:	mla	r1, r8, r1, r3
   151bc:	ldrd	r2, [r9, #8]
   151c0:	add	r5, r1, r5
   151c4:	cmp	r5, r3
   151c8:	cmpeq	r4, r2
   151cc:	bls	157d4 <__assert_fail@plt+0x46b0>
   151d0:	ldrd	r2, [sp, #16]
   151d4:	add	fp, fp, #1
   151d8:	ldrd	r0, [sp, #8]
   151dc:	orr	r2, r2, r3
   151e0:	ldr	r3, [pc, #148]	; 1527c <__assert_fail@plt+0x4158>
   151e4:	cmp	fp, r3
   151e8:	movhi	r3, #0
   151ec:	movls	r3, #1
   151f0:	cmp	r2, #0
   151f4:	ldr	r2, [sp, #52]	; 0x34
   151f8:	moveq	r3, #0
   151fc:	adds	r0, r0, r2
   15200:	adc	r1, r1, #0
   15204:	cmp	r3, #0
   15208:	strd	r0, [sp, #8]
   1520c:	bne	150dc <__assert_fail@plt+0x3fb8>
   15210:	ldr	r3, [pc, #100]	; 1527c <__assert_fail@plt+0x4158>
   15214:	mov	r5, fp
   15218:	cmp	r5, r3
   1521c:	ldrd	sl, [sp, #56]	; 0x38
   15220:	bhi	15434 <__assert_fail@plt+0x4310>
   15224:	ldr	r0, [sp, #76]	; 0x4c
   15228:	ldr	r3, [pc, #68]	; 15274 <__assert_fail@plt+0x4150>
   1522c:	lsl	r1, r5, #4
   15230:	add	r2, r0, r1
   15234:	add	r3, r3, r5
   15238:	ldr	r7, [r2, #4]
   1523c:	ldrb	r3, [r3, #892]	; 0x37c
   15240:	ldrd	r8, [r2, #8]
   15244:	ldr	r6, [r0, r5, lsl #4]
   15248:	str	r3, [sp, #28]
   1524c:	ldr	r3, [sp, #76]	; 0x4c
   15250:	add	r4, r3, r1
   15254:	ldr	r3, [pc, #28]	; 15278 <__assert_fail@plt+0x4154>
   15258:	add	r5, r3, r5
   1525c:	b	153f8 <__assert_fail@plt+0x42d4>
   15260:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15264:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15268:	bge	feabfd1c <stdout@@GLIBC_2.4+0xfea8eba8>
   1526c:	bge	feabfd1c <stdout@@GLIBC_2.4+0xfea8eba8>
   15270:	andeq	sp, r1, sl, asr #5
   15274:	andeq	sp, r1, r0, lsr #4
   15278:	andeq	sp, r1, r8, asr #5
   1527c:	muleq	r0, fp, r2
   15280:			; <UNDEFINED> instruction: 0x0001d8b8
   15284:	ldr	lr, [r4, #20]
   15288:	ldr	ip, [r4, #16]
   1528c:	ldrd	r0, [r4, #24]
   15290:	mul	lr, sl, lr
   15294:	umull	r2, r3, ip, sl
   15298:	mla	ip, ip, fp, lr
   1529c:	add	r3, ip, r3
   152a0:	cmp	r3, r1
   152a4:	cmpeq	r2, r0
   152a8:	bls	1576c <__assert_fail@plt+0x4648>
   152ac:	ldr	lr, [r4, #36]	; 0x24
   152b0:	ldr	ip, [r4, #32]
   152b4:	ldrd	r2, [r4, #40]	; 0x28
   152b8:	mul	lr, sl, lr
   152bc:	umull	r0, r1, ip, sl
   152c0:	mla	ip, ip, fp, lr
   152c4:	add	r1, ip, r1
   152c8:	cmp	r3, r1
   152cc:	cmpeq	r2, r0
   152d0:	bcs	156f4 <__assert_fail@plt+0x45d0>
   152d4:	ldr	lr, [r4, #52]	; 0x34
   152d8:	ldr	ip, [r4, #48]	; 0x30
   152dc:	ldrd	r2, [r4, #56]	; 0x38
   152e0:	mul	lr, sl, lr
   152e4:	umull	r0, r1, ip, sl
   152e8:	mla	ip, ip, fp, lr
   152ec:	add	r1, ip, r1
   152f0:	cmp	r1, r3
   152f4:	cmpeq	r0, r2
   152f8:	bls	1566c <__assert_fail@plt+0x4548>
   152fc:	ldr	lr, [r4, #68]	; 0x44
   15300:	ldr	ip, [r4, #64]	; 0x40
   15304:	ldrd	r2, [r4, #72]	; 0x48
   15308:	mul	lr, sl, lr
   1530c:	umull	r0, r1, ip, sl
   15310:	mla	ip, ip, fp, lr
   15314:	add	r1, ip, r1
   15318:	cmp	r1, r3
   1531c:	cmpeq	r0, r2
   15320:	bls	155f0 <__assert_fail@plt+0x44cc>
   15324:	ldr	lr, [r4, #84]	; 0x54
   15328:	ldr	ip, [r4, #80]	; 0x50
   1532c:	ldrd	r2, [r4, #88]	; 0x58
   15330:	mul	lr, sl, lr
   15334:	umull	r0, r1, ip, sl
   15338:	mla	ip, ip, fp, lr
   1533c:	add	r1, ip, r1
   15340:	cmp	r1, r3
   15344:	cmpeq	r0, r2
   15348:	bls	15574 <__assert_fail@plt+0x4450>
   1534c:	ldr	lr, [r4, #100]	; 0x64
   15350:	ldr	ip, [r4, #96]	; 0x60
   15354:	ldrd	r2, [r4, #104]	; 0x68
   15358:	mul	lr, sl, lr
   1535c:	umull	r0, r1, ip, sl
   15360:	mla	ip, ip, fp, lr
   15364:	add	r1, ip, r1
   15368:	cmp	r3, r1
   1536c:	cmpeq	r2, r0
   15370:	bcs	154f8 <__assert_fail@plt+0x43d4>
   15374:	ldr	lr, [r4, #116]	; 0x74
   15378:	ldr	ip, [r4, #112]	; 0x70
   1537c:	ldrd	r2, [r4, #120]	; 0x78
   15380:	mul	lr, sl, lr
   15384:	umull	r0, r1, ip, sl
   15388:	mla	ip, ip, fp, lr
   1538c:	add	r1, ip, r1
   15390:	cmp	r1, r3
   15394:	cmpeq	r0, r2
   15398:	bls	15480 <__assert_fail@plt+0x435c>
   1539c:	ldrd	r2, [sp, #8]
   153a0:	ldr	r1, [sp, #28]
   153a4:	adds	r2, r2, r1
   153a8:	adc	r3, r3, #0
   153ac:	mul	r1, r2, r3
   153b0:	strd	r2, [sp, #8]
   153b4:	umull	r2, r3, r2, r2
   153b8:	add	r3, r3, r1, lsl #1
   153bc:	cmp	r3, fp
   153c0:	cmpeq	r2, sl
   153c4:	bhi	15434 <__assert_fail@plt+0x4310>
   153c8:	ldr	r3, [pc, #-344]	; 15278 <__assert_fail@plt+0x4154>
   153cc:	add	r5, r5, #8
   153d0:	ldr	r2, [pc, #-348]	; 1527c <__assert_fail@plt+0x4158>
   153d4:	sub	r3, r5, r3
   153d8:	cmp	r3, r2
   153dc:	bhi	15434 <__assert_fail@plt+0x4310>
   153e0:	mov	r3, #724	; 0x2d4
   153e4:	ldrd	r6, [r4, #128]	; 0x80
   153e8:	ldrb	r3, [r3, r5]
   153ec:	ldrd	r8, [r4, #136]	; 0x88
   153f0:	add	r4, r4, #128	; 0x80
   153f4:	str	r3, [sp, #28]
   153f8:	mul	r3, sl, r7
   153fc:	umull	r0, r1, sl, r6
   15400:	mla	r3, r6, fp, r3
   15404:	add	r1, r3, r1
   15408:	cmp	r1, r9
   1540c:	cmpeq	r0, r8
   15410:	bhi	15284 <__assert_fail@plt+0x4160>
   15414:	mov	r3, #1
   15418:	mov	sl, r0
   1541c:	str	r3, [sp]
   15420:	ldr	r0, [sp, #24]
   15424:	ldrd	r2, [sp, #8]
   15428:	mov	fp, r1
   1542c:	bl	11448 <__assert_fail@plt+0x324>
   15430:	b	153f8 <__assert_fail@plt+0x42d4>
   15434:	ldrd	r2, [sp, #16]
   15438:	orrs	r3, r2, r3
   1543c:	bne	1580c <__assert_fail@plt+0x46e8>
   15440:	cmp	fp, #0
   15444:	cmpeq	sl, #1
   15448:	bls	14f00 <__assert_fail@plt+0x3ddc>
   1544c:	mov	r2, sl
   15450:	mov	r3, fp
   15454:	ldrd	r0, [sp, #16]
   15458:	bl	16334 <__assert_fail@plt+0x5210>
   1545c:	cmp	r0, #0
   15460:	bne	157f4 <__assert_fail@plt+0x46d0>
   15464:	ldr	r3, [sp, #24]
   15468:	mov	r0, sl
   1546c:	mov	r1, fp
   15470:	mov	r2, #1
   15474:	add	sp, sp, #84	; 0x54
   15478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1547c:	b	13484 <__assert_fail@plt+0x2360>
   15480:	ldrd	r8, [sp, #8]
   15484:	mov	sl, r0
   15488:	mov	fp, r1
   1548c:	add	r6, r5, #7
   15490:	mov	r7, #1
   15494:	mov	ip, r5
   15498:	mov	r2, r8
   1549c:	mov	r3, r9
   154a0:	ldrb	r0, [ip, #1]!
   154a4:	mov	r1, #0
   154a8:	adds	r2, r2, r0
   154ac:	adc	r3, r3, r1
   154b0:	cmp	r6, ip
   154b4:	bne	154a0 <__assert_fail@plt+0x437c>
   154b8:	ldr	r0, [sp, #24]
   154bc:	str	r7, [sp]
   154c0:	bl	11448 <__assert_fail@plt+0x324>
   154c4:	ldr	lr, [r4, #116]	; 0x74
   154c8:	ldr	ip, [r4, #112]	; 0x70
   154cc:	ldrd	r0, [r4, #120]	; 0x78
   154d0:	mul	lr, sl, lr
   154d4:	umull	r2, r3, ip, sl
   154d8:	mla	ip, ip, fp, lr
   154dc:	add	r3, ip, r3
   154e0:	cmp	r3, r1
   154e4:	cmpeq	r2, r0
   154e8:	bhi	1539c <__assert_fail@plt+0x4278>
   154ec:	mov	sl, r2
   154f0:	mov	fp, r3
   154f4:	b	15494 <__assert_fail@plt+0x4370>
   154f8:	mov	sl, r0
   154fc:	mov	fp, r1
   15500:	add	r8, r5, #1
   15504:	add	r6, r5, #7
   15508:	mov	r7, #1
   1550c:	ldrd	r0, [sp, #8]
   15510:	mov	ip, r8
   15514:	mov	r2, r0
   15518:	mov	r3, r1
   1551c:	ldrb	r0, [ip], #1
   15520:	mov	r1, #0
   15524:	adds	r2, r2, r0
   15528:	adc	r3, r3, r1
   1552c:	cmp	ip, r6
   15530:	bne	1551c <__assert_fail@plt+0x43f8>
   15534:	ldr	r0, [sp, #24]
   15538:	str	r7, [sp]
   1553c:	bl	11448 <__assert_fail@plt+0x324>
   15540:	ldr	lr, [r4, #100]	; 0x64
   15544:	ldr	ip, [r4, #96]	; 0x60
   15548:	ldrd	r0, [r4, #104]	; 0x68
   1554c:	mul	lr, sl, lr
   15550:	umull	r2, r3, ip, sl
   15554:	mla	ip, ip, fp, lr
   15558:	add	r3, ip, r3
   1555c:	cmp	r3, r1
   15560:	cmpeq	r2, r0
   15564:	bhi	15374 <__assert_fail@plt+0x4250>
   15568:	mov	sl, r2
   1556c:	mov	fp, r3
   15570:	b	1550c <__assert_fail@plt+0x43e8>
   15574:	mov	sl, r0
   15578:	mov	fp, r1
   1557c:	add	r8, r5, #1
   15580:	add	r7, r5, #6
   15584:	mov	r6, #1
   15588:	ldrd	r0, [sp, #8]
   1558c:	mov	ip, r8
   15590:	mov	r2, r0
   15594:	mov	r3, r1
   15598:	ldrb	r0, [ip], #1
   1559c:	mov	r1, #0
   155a0:	adds	r2, r2, r0
   155a4:	adc	r3, r3, r1
   155a8:	cmp	ip, r7
   155ac:	bne	15598 <__assert_fail@plt+0x4474>
   155b0:	ldr	r0, [sp, #24]
   155b4:	str	r6, [sp]
   155b8:	bl	11448 <__assert_fail@plt+0x324>
   155bc:	ldr	lr, [r4, #84]	; 0x54
   155c0:	ldr	ip, [r4, #80]	; 0x50
   155c4:	ldrd	r0, [r4, #88]	; 0x58
   155c8:	mul	lr, sl, lr
   155cc:	umull	r2, r3, ip, sl
   155d0:	mla	ip, ip, fp, lr
   155d4:	add	r3, ip, r3
   155d8:	cmp	r3, r1
   155dc:	cmpeq	r2, r0
   155e0:	bhi	1534c <__assert_fail@plt+0x4228>
   155e4:	mov	sl, r2
   155e8:	mov	fp, r3
   155ec:	b	15588 <__assert_fail@plt+0x4464>
   155f0:	mov	sl, r0
   155f4:	mov	fp, r1
   155f8:	add	r8, r5, #1
   155fc:	add	r7, r5, #5
   15600:	mov	r6, #1
   15604:	ldrd	r0, [sp, #8]
   15608:	mov	ip, r8
   1560c:	mov	r2, r0
   15610:	mov	r3, r1
   15614:	ldrb	r0, [ip], #1
   15618:	mov	r1, #0
   1561c:	adds	r2, r2, r0
   15620:	adc	r3, r3, r1
   15624:	cmp	ip, r7
   15628:	bne	15614 <__assert_fail@plt+0x44f0>
   1562c:	ldr	r0, [sp, #24]
   15630:	str	r6, [sp]
   15634:	bl	11448 <__assert_fail@plt+0x324>
   15638:	ldr	lr, [r4, #68]	; 0x44
   1563c:	ldr	ip, [r4, #64]	; 0x40
   15640:	ldrd	r0, [r4, #72]	; 0x48
   15644:	mul	lr, sl, lr
   15648:	umull	r2, r3, ip, sl
   1564c:	mla	ip, ip, fp, lr
   15650:	add	r3, ip, r3
   15654:	cmp	r3, r1
   15658:	cmpeq	r2, r0
   1565c:	bhi	15324 <__assert_fail@plt+0x4200>
   15660:	mov	sl, r2
   15664:	mov	fp, r3
   15668:	b	15604 <__assert_fail@plt+0x44e0>
   1566c:	ldrb	r2, [r5, #1]
   15670:	ldrb	r8, [r5, #3]
   15674:	mov	r3, #0
   15678:	mov	r9, #0
   1567c:	adds	r6, r2, r8
   15680:	adc	r7, r3, r9
   15684:	ldrd	r8, [sp, #8]
   15688:	ldrb	r2, [r5, #2]
   1568c:	mov	r3, #0
   15690:	adds	r6, r6, r8
   15694:	adc	r7, r7, r9
   15698:	adds	r6, r6, r2
   1569c:	mov	sl, r0
   156a0:	mov	fp, r1
   156a4:	adc	r7, r7, r3
   156a8:	mov	r8, #1
   156ac:	mov	r2, r6
   156b0:	mov	r3, r7
   156b4:	ldr	r0, [sp, #24]
   156b8:	str	r8, [sp]
   156bc:	bl	11448 <__assert_fail@plt+0x324>
   156c0:	ldr	lr, [r4, #52]	; 0x34
   156c4:	ldr	ip, [r4, #48]	; 0x30
   156c8:	ldrd	r0, [r4, #56]	; 0x38
   156cc:	mul	lr, sl, lr
   156d0:	umull	r2, r3, ip, sl
   156d4:	mla	ip, ip, fp, lr
   156d8:	add	r3, ip, r3
   156dc:	cmp	r3, r1
   156e0:	cmpeq	r2, r0
   156e4:	bhi	152fc <__assert_fail@plt+0x41d8>
   156e8:	mov	sl, r2
   156ec:	mov	fp, r3
   156f0:	b	156ac <__assert_fail@plt+0x4588>
   156f4:	ldrb	r2, [r5, #1]
   156f8:	ldrb	r8, [r5, #2]
   156fc:	mov	r3, #0
   15700:	mov	r9, #0
   15704:	adds	r6, r2, r8
   15708:	adc	r7, r3, r9
   1570c:	ldrd	r2, [sp, #8]
   15710:	mov	sl, r0
   15714:	mov	fp, r1
   15718:	adds	r6, r6, r2
   1571c:	adc	r7, r7, r3
   15720:	mov	r8, #1
   15724:	mov	r2, r6
   15728:	mov	r3, r7
   1572c:	ldr	r0, [sp, #24]
   15730:	str	r8, [sp]
   15734:	bl	11448 <__assert_fail@plt+0x324>
   15738:	ldr	lr, [r4, #36]	; 0x24
   1573c:	ldr	ip, [r4, #32]
   15740:	ldrd	r0, [r4, #40]	; 0x28
   15744:	mul	lr, sl, lr
   15748:	umull	r2, r3, ip, sl
   1574c:	mla	ip, ip, fp, lr
   15750:	add	r3, ip, r3
   15754:	cmp	r3, r1
   15758:	cmpeq	r2, r0
   1575c:	bhi	152d4 <__assert_fail@plt+0x41b0>
   15760:	mov	sl, r2
   15764:	mov	fp, r3
   15768:	b	15724 <__assert_fail@plt+0x4600>
   1576c:	ldrd	r8, [sp, #8]
   15770:	ldrb	r0, [r5, #1]
   15774:	mov	r1, #0
   15778:	mov	sl, r2
   1577c:	adds	r6, r0, r8
   15780:	mov	fp, r3
   15784:	adc	r8, r1, r9
   15788:	mov	r7, #1
   1578c:	mov	r2, r6
   15790:	mov	r3, r8
   15794:	ldr	r0, [sp, #24]
   15798:	str	r7, [sp]
   1579c:	bl	11448 <__assert_fail@plt+0x324>
   157a0:	ldr	lr, [r4, #20]
   157a4:	ldr	ip, [r4, #16]
   157a8:	ldrd	r0, [r4, #24]
   157ac:	mul	lr, sl, lr
   157b0:	umull	r2, r3, ip, sl
   157b4:	mla	ip, ip, fp, lr
   157b8:	add	r3, ip, r3
   157bc:	cmp	r3, r1
   157c0:	cmpeq	r2, r0
   157c4:	bhi	152ac <__assert_fail@plt+0x4188>
   157c8:	mov	sl, r2
   157cc:	mov	fp, r3
   157d0:	b	1578c <__assert_fail@plt+0x4668>
   157d4:	mov	r3, #1
   157d8:	str	r3, [sp]
   157dc:	ldr	r0, [sp, #24]
   157e0:	ldrd	r2, [sp, #8]
   157e4:	strd	r4, [sp, #16]
   157e8:	strd	r6, [sp, #56]	; 0x38
   157ec:	bl	11448 <__assert_fail@plt+0x324>
   157f0:	b	15108 <__assert_fail@plt+0x3fe4>
   157f4:	strd	sl, [sp]
   157f8:	ldrd	r2, [sp, #16]
   157fc:	ldr	r0, [sp, #24]
   15800:	bl	122dc <__assert_fail@plt+0x11b8>
   15804:	add	sp, sp, #84	; 0x54
   15808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1580c:	mov	r2, sl
   15810:	mov	r3, fp
   15814:	ldrd	r0, [sp, #16]
   15818:	bl	16334 <__assert_fail@plt+0x5210>
   1581c:	cmp	r0, #0
   15820:	bne	157f4 <__assert_fail@plt+0x46d0>
   15824:	ldr	r3, [sp, #24]
   15828:	mov	ip, #1
   1582c:	str	r3, [sp, #4]
   15830:	mov	r2, sl
   15834:	mov	r3, fp
   15838:	ldrd	r0, [sp, #16]
   1583c:	str	ip, [sp]
   15840:	bl	1417c <__assert_fail@plt+0x3058>
   15844:	add	sp, sp, #84	; 0x54
   15848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1584c:	mov	r3, #64	; 0x40
   15850:	b	14f90 <__assert_fail@plt+0x3e6c>
   15854:	ldr	r3, [pc, #-1500]	; 15280 <__assert_fail@plt+0x415c>
   15858:	mov	r2, #3
   1585c:	str	r3, [sp, #76]	; 0x4c
   15860:	mov	r3, #26
   15864:	str	r3, [sp, #28]
   15868:	mov	r3, #0
   1586c:	mov	r5, #0
   15870:	add	r9, pc, #24
   15874:	ldrd	r8, [r9]
   15878:	ldr	r6, [pc, #24]	; 15898 <__assert_fail@plt+0x4774>
   1587c:	ldr	r7, [pc, #24]	; 1589c <__assert_fail@plt+0x4778>
   15880:	mov	r1, r5
   15884:	strd	r2, [sp, #8]
   15888:	b	1524c <__assert_fail@plt+0x4128>
   1588c:	nop			; (mov r0, r0)
   15890:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15894:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   15898:	bge	feac034c <stdout@@GLIBC_2.4+0xfea8f1d8>
   1589c:	bge	feac034c <stdout@@GLIBC_2.4+0xfea8f1d8>
   158a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158a4:	sub	sp, sp, #508	; 0x1fc
   158a8:	strd	r2, [sp, #104]	; 0x68
   158ac:	orrs	r3, r2, r3
   158b0:	moveq	r3, #1
   158b4:	movne	r3, #0
   158b8:	strd	r0, [sp, #48]	; 0x30
   158bc:	subs	r0, r0, r3
   158c0:	ldrd	r2, [sp, #104]	; 0x68
   158c4:	sbc	r1, r1, #0
   158c8:	strd	r0, [sp, #80]	; 0x50
   158cc:	subs	r1, r2, #1
   158d0:	sbc	r3, r3, #0
   158d4:	str	r3, [sp, #44]	; 0x2c
   158d8:	str	r1, [sp, #40]	; 0x28
   158dc:	ldr	r3, [pc, #2620]	; 16320 <__assert_fail@plt+0x51fc>
   158e0:	ldrd	r0, [sp, #40]	; 0x28
   158e4:	ldr	r3, [r3]
   158e8:	orrs	r2, r0, r1
   158ec:	str	r3, [sp, #500]	; 0x1f4
   158f0:	beq	159a4 <__assert_fail@plt+0x4880>
   158f4:	mov	r1, #0
   158f8:	and	r2, r0, #1
   158fc:	mov	r3, r1
   15900:	orrs	r3, r2, r3
   15904:	bne	162f8 <__assert_fail@plt+0x51d4>
   15908:	ldrd	r4, [sp, #40]	; 0x28
   1590c:	mov	r0, r1
   15910:	mov	r3, r4
   15914:	mov	r2, r5
   15918:	lsr	r3, r3, #1
   1591c:	orr	r3, r3, r2, lsl #31
   15920:	and	r8, r3, #1
   15924:	mov	r9, r1
   15928:	orrs	ip, r8, r9
   1592c:	lsr	r2, r2, #1
   15930:	add	r0, r0, #1
   15934:	beq	15918 <__assert_fail@plt+0x47f4>
   15938:	ldrd	r8, [sp, #40]	; 0x28
   1593c:	ldrd	r4, [sp, #80]	; 0x50
   15940:	rsb	r3, r0, #32
   15944:	lsr	r2, r8, r0
   15948:	lsr	r1, r4, r0
   1594c:	orr	r2, r2, r9, lsl r3
   15950:	orr	r1, r1, r5, lsl r3
   15954:	sub	r3, r0, #32
   15958:	str	r0, [sp, #120]	; 0x78
   1595c:	orr	r2, r2, r9, lsr r3
   15960:	orr	r1, r1, r5, lsr r3
   15964:	lsr	lr, r9, r0
   15968:	lsr	ip, r5, r0
   1596c:	rsb	r0, r0, #64	; 0x40
   15970:	ldrd	r8, [sp, #80]	; 0x50
   15974:	sub	r4, r0, #32
   15978:	str	r1, [sp, #152]	; 0x98
   1597c:	lsl	r3, r9, r0
   15980:	orr	r3, r3, r8, lsl r4
   15984:	rsb	r4, r0, #32
   15988:	orr	r2, r2, r8, lsl r0
   1598c:	orr	r3, r3, r8, lsr r4
   15990:	orr	r3, r3, lr
   15994:	str	r2, [sp, #144]	; 0x90
   15998:	str	ip, [sp, #156]	; 0x9c
   1599c:	str	r3, [sp, #148]	; 0x94
   159a0:	b	15a28 <__assert_fail@plt+0x4904>
   159a4:	ldrd	r8, [sp, #80]	; 0x50
   159a8:	mov	r1, #0
   159ac:	mov	r3, r1
   159b0:	and	r2, r8, #1
   159b4:	orrs	r3, r2, r3
   159b8:	bne	162e0 <__assert_fail@plt+0x51bc>
   159bc:	mov	r0, r1
   159c0:	mov	r3, r8
   159c4:	mov	r2, r9
   159c8:	b	159d0 <__assert_fail@plt+0x48ac>
   159cc:	mov	r1, ip
   159d0:	lsr	r3, r3, #1
   159d4:	orr	r3, r3, r2, lsl #31
   159d8:	and	r4, r3, #1
   159dc:	mov	r5, r0
   159e0:	orrs	ip, r4, r5
   159e4:	lsr	r2, r2, #1
   159e8:	add	ip, r1, #1
   159ec:	beq	159cc <__assert_fail@plt+0x48a8>
   159f0:	ldrd	r4, [sp, #80]	; 0x50
   159f4:	rsb	r2, ip, #32
   159f8:	lsr	r3, r4, ip
   159fc:	lsr	ip, r5, ip
   15a00:	orr	r3, r3, r5, lsl r2
   15a04:	sub	r2, r1, #31
   15a08:	orr	r3, r3, r5, lsr r2
   15a0c:	add	r2, r1, #65	; 0x41
   15a10:	str	r2, [sp, #120]	; 0x78
   15a14:	mov	r0, #0
   15a18:	mov	r1, #0
   15a1c:	str	r3, [sp, #144]	; 0x90
   15a20:	str	ip, [sp, #148]	; 0x94
   15a24:	strd	r0, [sp, #152]	; 0x98
   15a28:	ldrd	r8, [sp, #104]	; 0x68
   15a2c:	ldr	r2, [pc, #2288]	; 16324 <__assert_fail@plt+0x5200>
   15a30:	mov	lr, #0
   15a34:	lsl	r3, r8, #24
   15a38:	add	r3, r2, r3, lsr #25
   15a3c:	ldrb	ip, [r3, #40]	; 0x28
   15a40:	umull	r0, r1, ip, ip
   15a44:	adds	ip, ip, ip
   15a48:	mul	r4, r0, r9
   15a4c:	umull	r2, r3, r0, r8
   15a50:	mla	r4, r8, r1, r4
   15a54:	adc	lr, lr, lr
   15a58:	subs	ip, ip, r2
   15a5c:	add	r3, r4, r3
   15a60:	umull	r0, r1, ip, ip
   15a64:	sbc	lr, lr, r3
   15a68:	mul	r4, r0, r9
   15a6c:	mul	r3, ip, lr
   15a70:	adds	ip, ip, ip
   15a74:	adc	lr, lr, lr
   15a78:	add	r1, r1, r3, lsl #1
   15a7c:	umull	r2, r3, r0, r8
   15a80:	mla	r4, r8, r1, r4
   15a84:	subs	ip, ip, r2
   15a88:	add	r3, r4, r3
   15a8c:	umull	r0, r1, ip, ip
   15a90:	sbc	lr, lr, r3
   15a94:	mul	r4, r0, r9
   15a98:	mul	r3, ip, lr
   15a9c:	adds	ip, ip, ip
   15aa0:	adc	lr, lr, lr
   15aa4:	add	r1, r1, r3, lsl #1
   15aa8:	umull	r2, r3, r0, r8
   15aac:	mla	r4, r8, r1, r4
   15ab0:	subs	r1, ip, r2
   15ab4:	add	r3, r4, r3
   15ab8:	sbc	r3, lr, r3
   15abc:	str	r3, [sp, #88]	; 0x58
   15ac0:	ldrd	r2, [sp, #48]	; 0x30
   15ac4:	str	r1, [sp, #60]	; 0x3c
   15ac8:	cmp	r3, #0
   15acc:	cmpeq	r2, #1
   15ad0:	bls	1626c <__assert_fail@plt+0x5148>
   15ad4:	mov	r4, #63	; 0x3f
   15ad8:	mov	r5, #0
   15adc:	mov	r0, #0
   15ae0:	mov	r1, #0
   15ae4:	mov	r2, #1
   15ae8:	mov	r3, #0
   15aec:	mov	r9, #0
   15af0:	str	r9, [sp, #16]
   15af4:	ldrd	r8, [sp, #104]	; 0x68
   15af8:	strd	r6, [sp, #72]	; 0x48
   15afc:	adds	lr, r2, r2
   15b00:	adc	ip, r3, r3
   15b04:	adds	sl, r0, r0
   15b08:	adc	fp, r1, r1
   15b0c:	orr	r2, lr, r1, lsr #31
   15b10:	ldrd	r0, [sp, #48]	; 0x30
   15b14:	mov	r3, ip
   15b18:	cmp	r1, ip
   15b1c:	cmpeq	r0, r2
   15b20:	mov	r1, fp
   15b24:	mov	r0, sl
   15b28:	bcc	15b4c <__assert_fail@plt+0x4a28>
   15b2c:	moveq	ip, #1
   15b30:	movne	ip, #0
   15b34:	cmp	r9, fp
   15b38:	cmpeq	r8, sl
   15b3c:	movhi	ip, #0
   15b40:	andls	ip, ip, #1
   15b44:	cmp	ip, #0
   15b48:	beq	15b7c <__assert_fail@plt+0x4a58>
   15b4c:	cmp	r9, fp
   15b50:	ldrd	r6, [sp, #48]	; 0x30
   15b54:	cmpeq	r8, sl
   15b58:	movhi	ip, #1
   15b5c:	movls	ip, #0
   15b60:	subs	r0, sl, r8
   15b64:	sbc	r1, fp, r9
   15b68:	subs	lr, r2, r6
   15b6c:	sbc	r7, r3, r7
   15b70:	subs	r2, lr, ip
   15b74:	ldr	ip, [sp, #16]
   15b78:	sbc	r3, r7, ip
   15b7c:	subs	r4, r4, #1
   15b80:	sbc	r5, r5, #0
   15b84:	mvn	r7, #0
   15b88:	mvn	r6, #0
   15b8c:	cmp	r5, r7
   15b90:	cmpeq	r4, r6
   15b94:	bne	15afc <__assert_fail@plt+0x49d8>
   15b98:	adds	ip, r0, r0
   15b9c:	str	ip, [sp, #24]
   15ba0:	adc	ip, r1, r1
   15ba4:	str	ip, [sp, #28]
   15ba8:	ldrd	r8, [sp, #24]
   15bac:	adds	ip, r2, r2
   15bb0:	str	ip, [sp, #32]
   15bb4:	adc	ip, r3, r3
   15bb8:	str	ip, [sp, #36]	; 0x24
   15bbc:	cmp	r9, r1
   15bc0:	ldrd	r4, [sp, #32]
   15bc4:	cmpeq	r8, r0
   15bc8:	movcc	ip, #1
   15bcc:	movcs	ip, #0
   15bd0:	adds	r4, r4, ip
   15bd4:	adc	r5, r5, #0
   15bd8:	mov	sl, r4
   15bdc:	mov	fp, r5
   15be0:	ldrd	r4, [sp, #48]	; 0x30
   15be4:	ldrd	r6, [sp, #72]	; 0x48
   15be8:	strd	sl, [sp, #168]	; 0xa8
   15bec:	cmp	r5, fp
   15bf0:	cmpeq	r4, sl
   15bf4:	strd	r2, [sp, #184]	; 0xb8
   15bf8:	strd	r0, [sp, #176]	; 0xb0
   15bfc:	bcc	16228 <__assert_fail@plt+0x5104>
   15c00:	ldrd	r0, [sp, #104]	; 0x68
   15c04:	moveq	r3, #1
   15c08:	movne	r3, #0
   15c0c:	cmp	r1, r9
   15c10:	cmpeq	r0, r8
   15c14:	movhi	r3, #0
   15c18:	andls	r3, r3, #1
   15c1c:	cmp	r3, #0
   15c20:	strdeq	r8, [sp, #160]	; 0xa0
   15c24:	bne	16228 <__assert_fail@plt+0x5104>
   15c28:	ldr	r3, [sp, #120]	; 0x78
   15c2c:	ldrd	r4, [sp, #104]	; 0x68
   15c30:	str	r3, [sp, #8]
   15c34:	add	r3, sp, #176	; 0xb0
   15c38:	str	r3, [sp, #12]
   15c3c:	strd	r4, [sp, #192]	; 0xc0
   15c40:	add	r3, sp, #144	; 0x90
   15c44:	ldrd	r4, [sp, #48]	; 0x30
   15c48:	str	r3, [sp, #4]
   15c4c:	add	r3, sp, #160	; 0xa0
   15c50:	str	r3, [sp]
   15c54:	add	r0, sp, #192	; 0xc0
   15c58:	ldr	r3, [sp, #88]	; 0x58
   15c5c:	ldr	r2, [sp, #60]	; 0x3c
   15c60:	strd	r4, [sp, #200]	; 0xc8
   15c64:	bl	11ff8 <__assert_fail@plt+0xed4>
   15c68:	subs	r3, r0, #0
   15c6c:	str	r3, [sp, #140]	; 0x8c
   15c70:	beq	15ef8 <__assert_fail@plt+0x4dd4>
   15c74:	ldrd	r8, [sp, #40]	; 0x28
   15c78:	ldrd	r4, [sp, #80]	; 0x50
   15c7c:	ldr	ip, [pc, #1700]	; 16328 <__assert_fail@plt+0x5204>
   15c80:	add	r3, sp, #240	; 0xf0
   15c84:	str	r3, [sp]
   15c88:	mov	r2, r8
   15c8c:	mov	r3, r9
   15c90:	mov	r0, r4
   15c94:	mov	r1, r5
   15c98:	str	ip, [sp, #72]	; 0x48
   15c9c:	bl	14ea0 <__assert_fail@plt+0x3d7c>
   15ca0:	lsr	r3, r9, #1
   15ca4:	orr	r3, r3, r4, lsl #31
   15ca8:	lsr	ip, r4, #1
   15cac:	lsr	r2, r8, #1
   15cb0:	str	r3, [sp, #124]	; 0x7c
   15cb4:	orr	r3, ip, r5, lsl #31
   15cb8:	orr	r2, r2, r9, lsl #31
   15cbc:	str	r3, [sp, #128]	; 0x80
   15cc0:	lsr	r3, r5, #1
   15cc4:	str	r2, [sp, #136]	; 0x88
   15cc8:	str	r3, [sp, #132]	; 0x84
   15ccc:	mov	r2, #2
   15cd0:	mov	r3, #0
   15cd4:	mov	lr, r9
   15cd8:	strd	r2, [sp, #32]
   15cdc:	strd	r6, [sp, #96]	; 0x60
   15ce0:	ldrd	r2, [sp, #248]	; 0xf8
   15ce4:	orrs	r3, r2, r3
   15ce8:	bne	16104 <__assert_fail@plt+0x4fe0>
   15cec:	ldrb	r3, [sp, #490]	; 0x1ea
   15cf0:	cmp	r3, #0
   15cf4:	beq	15ef8 <__assert_fail@plt+0x4dd4>
   15cf8:	add	r3, sp, #216	; 0xd8
   15cfc:	mov	fp, r3
   15d00:	add	r3, sp, #208	; 0xd0
   15d04:	str	r3, [sp, #92]	; 0x5c
   15d08:	add	r3, sp, #232	; 0xe8
   15d0c:	mov	r8, r3
   15d10:	mov	r9, #0
   15d14:	add	r3, sp, #256	; 0x100
   15d18:	str	r9, [sp, #16]
   15d1c:	mov	sl, r3
   15d20:	mov	r9, fp
   15d24:	mov	fp, r8
   15d28:	mov	r1, sl
   15d2c:	ldrd	r2, [r1], #8
   15d30:	cmp	r3, #0
   15d34:	cmpeq	r2, #2
   15d38:	mov	sl, r1
   15d3c:	beq	160b4 <__assert_fail@plt+0x4f90>
   15d40:	ldr	r0, [pc, #1500]	; 16324 <__assert_fail@plt+0x5200>
   15d44:	lsl	r1, r2, #24
   15d48:	mov	lr, #0
   15d4c:	add	r1, r0, r1, lsr #25
   15d50:	ldrd	r6, [sp, #80]	; 0x50
   15d54:	ldrb	ip, [r1, #40]	; 0x28
   15d58:	umull	r4, r5, ip, ip
   15d5c:	adds	ip, ip, ip
   15d60:	mul	r8, r4, r3
   15d64:	umull	r0, r1, r4, r2
   15d68:	mla	r8, r2, r5, r8
   15d6c:	adc	lr, lr, lr
   15d70:	subs	ip, ip, r0
   15d74:	add	r1, r8, r1
   15d78:	umull	r4, r5, ip, ip
   15d7c:	sbc	lr, lr, r1
   15d80:	mul	r8, r4, r3
   15d84:	mul	r1, ip, lr
   15d88:	adds	ip, ip, ip
   15d8c:	adc	lr, lr, lr
   15d90:	add	r5, r5, r1, lsl #1
   15d94:	umull	r0, r1, r4, r2
   15d98:	mla	r8, r2, r5, r8
   15d9c:	subs	ip, ip, r0
   15da0:	add	r1, r8, r1
   15da4:	umull	r4, r5, ip, ip
   15da8:	sbc	lr, lr, r1
   15dac:	mul	r8, r4, r3
   15db0:	mul	r1, ip, lr
   15db4:	adds	ip, ip, ip
   15db8:	adc	lr, lr, lr
   15dbc:	add	r5, r5, r1, lsl #1
   15dc0:	umull	r0, r1, r4, r2
   15dc4:	mla	r8, r2, r5, r8
   15dc8:	subs	ip, ip, r0
   15dcc:	add	r1, r8, r1
   15dd0:	sbc	lr, lr, r1
   15dd4:	ldrd	r0, [sp, #40]	; 0x28
   15dd8:	cmp	r7, r3
   15ddc:	cmpeq	r6, r2
   15de0:	umull	r4, r5, r0, ip
   15de4:	mul	r1, r0, lr
   15de8:	ldr	r0, [sp, #44]	; 0x2c
   15dec:	mla	r1, ip, r0, r1
   15df0:	add	r8, r1, r5
   15df4:	mov	r5, r8
   15df8:	bcc	160d8 <__assert_fail@plt+0x4fb4>
   15dfc:	umull	r0, r1, r4, r2
   15e00:	umull	r6, r7, r8, r2
   15e04:	strd	r0, [sp, #112]	; 0x70
   15e08:	mov	r0, r6
   15e0c:	mov	r1, r7
   15e10:	umlal	r0, r1, r4, r3
   15e14:	umull	r2, r3, r8, r3
   15e18:	ldr	r8, [sp, #116]	; 0x74
   15e1c:	strd	r0, [sp, #112]	; 0x70
   15e20:	strd	r2, [sp, #24]
   15e24:	adds	r3, r8, r0
   15e28:	str	r3, [sp, #64]	; 0x40
   15e2c:	ldr	r3, [sp, #116]	; 0x74
   15e30:	mov	r0, #0
   15e34:	adc	r3, r0, r3
   15e38:	str	r3, [sp, #68]	; 0x44
   15e3c:	ldrd	r2, [sp, #64]	; 0x40
   15e40:	cmp	r7, r3
   15e44:	cmpeq	r6, r2
   15e48:	bls	15e64 <__assert_fail@plt+0x4d40>
   15e4c:	ldr	r3, [sp, #24]
   15e50:	adds	r3, r3, r0
   15e54:	str	r3, [sp, #24]
   15e58:	ldr	r3, [sp, #28]
   15e5c:	adc	r3, r3, #1
   15e60:	str	r3, [sp, #28]
   15e64:	ldrd	r2, [sp, #80]	; 0x50
   15e68:	ldrd	r6, [sp, #24]
   15e6c:	ldr	r0, [sp, #68]	; 0x44
   15e70:	mov	r1, #0
   15e74:	subs	r0, r2, r0
   15e78:	sbc	r1, r3, r1
   15e7c:	subs	r2, r0, r6
   15e80:	sbc	r1, r1, r7
   15e84:	mul	lr, r2, lr
   15e88:	umull	r2, r3, r2, ip
   15e8c:	mla	lr, ip, r1, lr
   15e90:	strd	r4, [r9, #-8]
   15e94:	add	r3, lr, r3
   15e98:	strd	r2, [r9]
   15e9c:	add	r3, sp, #176	; 0xb0
   15ea0:	str	r3, [sp, #8]
   15ea4:	ldr	r3, [sp, #60]	; 0x3c
   15ea8:	ldr	r2, [sp, #92]	; 0x5c
   15eac:	str	r3, [sp]
   15eb0:	ldr	r3, [sp, #88]	; 0x58
   15eb4:	add	r1, sp, #160	; 0xa0
   15eb8:	str	r3, [sp, #4]
   15ebc:	mov	r0, fp
   15ec0:	add	r3, sp, #192	; 0xc0
   15ec4:	bl	11dec <__assert_fail@plt+0xcc8>
   15ec8:	ldrd	r2, [sp, #176]	; 0xb0
   15ecc:	ldr	ip, [sp, #16]
   15ed0:	add	ip, ip, #1
   15ed4:	str	ip, [sp, #16]
   15ed8:	cmp	r1, r3
   15edc:	cmpeq	r0, r2
   15ee0:	strd	r0, [fp, #-8]
   15ee4:	beq	15f18 <__assert_fail@plt+0x4df4>
   15ee8:	ldrb	r3, [sp, #490]	; 0x1ea
   15eec:	ldr	r2, [sp, #16]
   15ef0:	cmp	r3, r2
   15ef4:	bhi	15d28 <__assert_fail@plt+0x4c04>
   15ef8:	ldr	r3, [pc, #1056]	; 16320 <__assert_fail@plt+0x51fc>
   15efc:	ldr	r2, [sp, #500]	; 0x1f4
   15f00:	ldr	r0, [sp, #140]	; 0x8c
   15f04:	ldr	r3, [r3]
   15f08:	cmp	r2, r3
   15f0c:	bne	1631c <__assert_fail@plt+0x51f8>
   15f10:	add	sp, sp, #508	; 0x1fc
   15f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f18:	ldrb	ip, [sp, #490]	; 0x1ea
   15f1c:	ldr	lr, [sp, #16]
   15f20:	ldrd	r0, [fp]
   15f24:	cmp	ip, lr
   15f28:	ldrd	r2, [sp, #184]	; 0xb8
   15f2c:	bls	16288 <__assert_fail@plt+0x5164>
   15f30:	cmp	r1, r3
   15f34:	cmpeq	r0, r2
   15f38:	bne	15d28 <__assert_fail@plt+0x4c04>
   15f3c:	ldr	r1, [sp, #72]	; 0x48
   15f40:	mov	r3, #0
   15f44:	ldrb	r2, [r1, #1]!
   15f48:	str	r1, [sp, #72]	; 0x48
   15f4c:	ldr	r1, [sp, #32]
   15f50:	adds	r1, r1, r2
   15f54:	str	r1, [sp, #32]
   15f58:	ldr	r1, [sp, #36]	; 0x24
   15f5c:	adc	r3, r1, r3
   15f60:	str	r3, [sp, #36]	; 0x24
   15f64:	ldrd	r0, [sp, #32]
   15f68:	ldrd	r2, [sp, #48]	; 0x30
   15f6c:	cmp	r3, r1
   15f70:	cmpeq	r2, r0
   15f74:	bls	160ec <__assert_fail@plt+0x4fc8>
   15f78:	ldrd	r0, [sp, #32]
   15f7c:	mov	r2, #63	; 0x3f
   15f80:	mov	r3, #0
   15f84:	mov	r4, #0
   15f88:	mov	r5, #0
   15f8c:	mov	r9, #0
   15f90:	str	r9, [sp, #24]
   15f94:	ldrd	sl, [sp, #104]	; 0x68
   15f98:	ldrd	r8, [sp, #48]	; 0x30
   15f9c:	strd	r8, [sp, #16]
   15fa0:	adds	lr, r0, r0
   15fa4:	adc	ip, r1, r1
   15fa8:	adds	r6, r4, r4
   15fac:	adc	r7, r5, r5
   15fb0:	orr	r0, lr, r5, lsr #31
   15fb4:	ldrd	r4, [sp, #16]
   15fb8:	mov	r1, ip
   15fbc:	cmp	r5, ip
   15fc0:	cmpeq	r4, r0
   15fc4:	mov	r5, r7
   15fc8:	mov	r4, r6
   15fcc:	bcc	15ff0 <__assert_fail@plt+0x4ecc>
   15fd0:	moveq	ip, #1
   15fd4:	movne	ip, #0
   15fd8:	cmp	fp, r7
   15fdc:	cmpeq	sl, r6
   15fe0:	movhi	ip, #0
   15fe4:	andls	ip, ip, #1
   15fe8:	cmp	ip, #0
   15fec:	beq	16020 <__assert_fail@plt+0x4efc>
   15ff0:	cmp	fp, r7
   15ff4:	ldrd	r8, [sp, #16]
   15ff8:	cmpeq	sl, r6
   15ffc:	movhi	ip, #1
   16000:	movls	ip, #0
   16004:	subs	r4, r6, sl
   16008:	sbc	r5, r7, fp
   1600c:	subs	lr, r0, r8
   16010:	sbc	r8, r1, r9
   16014:	subs	r0, lr, ip
   16018:	ldr	ip, [sp, #24]
   1601c:	sbc	r1, r8, ip
   16020:	subs	r2, r2, #1
   16024:	sbc	r3, r3, #0
   16028:	mvn	r9, #0
   1602c:	mvn	r8, #0
   16030:	cmp	r3, r9
   16034:	cmpeq	r2, r8
   16038:	bne	15fa0 <__assert_fail@plt+0x4e7c>
   1603c:	add	r3, sp, #176	; 0xb0
   16040:	str	r3, [sp, #12]
   16044:	ldr	r3, [sp, #120]	; 0x78
   16048:	strd	r0, [sp, #168]	; 0xa8
   1604c:	str	r3, [sp, #8]
   16050:	add	r3, sp, #144	; 0x90
   16054:	str	r3, [sp, #4]
   16058:	add	r3, sp, #160	; 0xa0
   1605c:	str	r3, [sp]
   16060:	ldr	r2, [sp, #60]	; 0x3c
   16064:	ldr	r3, [sp, #88]	; 0x58
   16068:	add	r0, sp, #192	; 0xc0
   1606c:	strd	r6, [sp, #96]	; 0x60
   16070:	strd	r4, [sp, #160]	; 0xa0
   16074:	bl	11ff8 <__assert_fail@plt+0xed4>
   16078:	cmp	r0, #0
   1607c:	beq	162a4 <__assert_fail@plt+0x5180>
   16080:	ldr	r3, [pc, #676]	; 1632c <__assert_fail@plt+0x5208>
   16084:	ldr	r2, [sp, #72]	; 0x48
   16088:	cmp	r3, r2
   1608c:	bne	15ce0 <__assert_fail@plt+0x4bbc>
   16090:	mov	r2, #5
   16094:	ldr	r1, [pc, #660]	; 16330 <__assert_fail@plt+0x520c>
   16098:	mov	r0, #0
   1609c:	bl	10f08 <dcgettext@plt>
   160a0:	mov	r1, #0
   160a4:	mov	r2, r0
   160a8:	mov	r0, r1
   160ac:	bl	10f98 <error@plt>
   160b0:	bl	11118 <abort@plt>
   160b4:	ldr	r3, [sp, #136]	; 0x88
   160b8:	str	r3, [r9, #-8]
   160bc:	ldr	r3, [sp, #124]	; 0x7c
   160c0:	str	r3, [r9, #-4]
   160c4:	ldr	r3, [sp, #128]	; 0x80
   160c8:	str	r3, [r9]
   160cc:	ldr	r3, [sp, #132]	; 0x84
   160d0:	str	r3, [r9, #4]
   160d4:	b	15e9c <__assert_fail@plt+0x4d78>
   160d8:	mov	r2, #0
   160dc:	mov	r3, #0
   160e0:	strd	r4, [r9, #-8]
   160e4:	strd	r2, [r9]
   160e8:	b	15e9c <__assert_fail@plt+0x4d78>
   160ec:	ldrd	r4, [sp, #32]
   160f0:	mov	r2, #127	; 0x7f
   160f4:	mov	r3, #0
   160f8:	mov	r0, #0
   160fc:	mov	r1, #0
   16100:	b	15f8c <__assert_fail@plt+0x4e68>
   16104:	ldr	ip, [sp, #240]	; 0xf0
   16108:	add	r2, sp, #176	; 0xb0
   1610c:	str	r2, [sp, #8]
   16110:	lsl	r3, ip, #24
   16114:	ldr	r2, [pc, #520]	; 16324 <__assert_fail@plt+0x5200>
   16118:	ldr	r8, [sp, #244]	; 0xf4
   1611c:	add	r3, r2, r3, lsr #25
   16120:	ldr	r2, [sp, #60]	; 0x3c
   16124:	ldrb	lr, [r3, #40]	; 0x28
   16128:	ldr	r3, [sp, #88]	; 0x58
   1612c:	str	r2, [sp]
   16130:	str	r3, [sp, #4]
   16134:	umull	r2, r3, lr, lr
   16138:	ldrd	r6, [sp, #40]	; 0x28
   1613c:	adds	lr, lr, lr
   16140:	mul	r0, r2, r8
   16144:	mov	r1, #0
   16148:	mla	r0, ip, r3, r0
   1614c:	umull	r2, r3, r2, ip
   16150:	adc	r1, r1, r1
   16154:	mov	r4, #0
   16158:	subs	lr, lr, r2
   1615c:	mov	r5, #0
   16160:	add	r3, r0, r3
   16164:	strd	r4, [sp, #216]	; 0xd8
   16168:	sbc	r4, r1, r3
   1616c:	umull	r0, r1, lr, lr
   16170:	mul	r3, lr, r4
   16174:	mul	r5, r0, r8
   16178:	add	r1, r1, r3, lsl #1
   1617c:	umull	r2, r3, r0, ip
   16180:	mla	r5, ip, r1, r5
   16184:	adds	lr, lr, lr
   16188:	adc	r4, r4, r4
   1618c:	subs	r1, lr, r2
   16190:	add	r3, r5, r3
   16194:	sbc	r0, r4, r3
   16198:	umull	r4, r5, r1, r1
   1619c:	mul	r3, r1, r0
   161a0:	mul	lr, r4, r8
   161a4:	add	r5, r5, r3, lsl #1
   161a8:	umull	r2, r3, r4, ip
   161ac:	mla	ip, ip, r5, lr
   161b0:	adds	r1, r1, r1
   161b4:	adc	r0, r0, r0
   161b8:	subs	r1, r1, r2
   161bc:	add	r3, ip, r3
   161c0:	sbc	r0, r0, r3
   161c4:	mul	r3, r1, r7
   161c8:	umull	r4, r5, r1, r6
   161cc:	mla	r0, r6, r0, r3
   161d0:	add	lr, sp, #232	; 0xe8
   161d4:	add	sl, sp, #208	; 0xd0
   161d8:	add	r5, r0, r5
   161dc:	mov	r2, sl
   161e0:	add	r3, sp, #192	; 0xc0
   161e4:	mov	r0, lr
   161e8:	add	r1, sp, #160	; 0xa0
   161ec:	mov	r8, lr
   161f0:	str	sl, [sp, #92]	; 0x5c
   161f4:	strd	r4, [sp, #208]	; 0xd0
   161f8:	bl	11dec <__assert_fail@plt+0xcc8>
   161fc:	ldrd	r2, [sp, #176]	; 0xb0
   16200:	add	r9, sp, #216	; 0xd8
   16204:	mov	fp, r9
   16208:	cmp	r1, r3
   1620c:	cmpeq	r0, r2
   16210:	strd	r0, [r8, #-8]
   16214:	beq	162ac <__assert_fail@plt+0x5188>
   16218:	ldrb	r3, [sp, #490]	; 0x1ea
   1621c:	cmp	r3, #0
   16220:	bne	15d10 <__assert_fail@plt+0x4bec>
   16224:	b	15ef8 <__assert_fail@plt+0x4dd4>
   16228:	ldrd	r2, [sp, #104]	; 0x68
   1622c:	ldrd	r4, [sp, #24]
   16230:	ldrd	r8, [sp, #48]	; 0x30
   16234:	mov	ip, r3
   16238:	subs	r0, r4, r2
   1623c:	sbc	r1, r5, r3
   16240:	cmp	r3, r5
   16244:	cmpeq	r2, r4
   16248:	movhi	ip, #1
   1624c:	movls	ip, #0
   16250:	subs	r4, sl, ip
   16254:	sbc	r5, fp, #0
   16258:	subs	r2, r4, r8
   1625c:	sbc	r3, r5, r9
   16260:	strd	r0, [sp, #160]	; 0xa0
   16264:	strd	r2, [sp, #168]	; 0xa8
   16268:	b	15c28 <__assert_fail@plt+0x4b04>
   1626c:	mov	r4, #127	; 0x7f
   16270:	mov	r5, #0
   16274:	mov	r0, #1
   16278:	mov	r1, #0
   1627c:	mov	r2, #0
   16280:	mov	r3, #0
   16284:	b	15aec <__assert_fail@plt+0x49c8>
   16288:	cmp	r1, r3
   1628c:	cmpeq	r0, r2
   16290:	movne	ip, #1
   16294:	moveq	ip, #0
   16298:	cmp	ip, #0
   1629c:	beq	15f3c <__assert_fail@plt+0x4e18>
   162a0:	b	15ef8 <__assert_fail@plt+0x4dd4>
   162a4:	str	r0, [sp, #140]	; 0x8c
   162a8:	b	15ef8 <__assert_fail@plt+0x4dd4>
   162ac:	ldrd	r0, [r8]
   162b0:	ldrd	r2, [sp, #184]	; 0xb8
   162b4:	ldrb	lr, [sp, #490]	; 0x1ea
   162b8:	cmp	r1, r3
   162bc:	cmpeq	r0, r2
   162c0:	movne	ip, #1
   162c4:	moveq	ip, #0
   162c8:	cmp	lr, #0
   162cc:	beq	16298 <__assert_fail@plt+0x5174>
   162d0:	cmp	r1, r3
   162d4:	cmpeq	r0, r2
   162d8:	bne	15d10 <__assert_fail@plt+0x4bec>
   162dc:	b	15f3c <__assert_fail@plt+0x4e18>
   162e0:	ldrd	r0, [sp, #80]	; 0x50
   162e4:	mov	r2, #64	; 0x40
   162e8:	str	r2, [sp, #120]	; 0x78
   162ec:	mov	r3, r0
   162f0:	mov	ip, r1
   162f4:	b	15a14 <__assert_fail@plt+0x48f0>
   162f8:	ldrd	r2, [sp, #80]	; 0x50
   162fc:	ldrd	r4, [sp, #40]	; 0x28
   16300:	str	r1, [sp, #120]	; 0x78
   16304:	mov	ip, r3
   16308:	mov	r1, r2
   1630c:	mov	lr, r5
   16310:	mov	r2, r4
   16314:	mov	r0, #64	; 0x40
   16318:	b	15970 <__assert_fail@plt+0x484c>
   1631c:	bl	10f20 <__stack_chk_fail@plt>
   16320:	andeq	r0, r3, r8, lsl #30
   16324:	andeq	sp, r1, r0, lsr #4
   16328:	andeq	sp, r1, r7, asr #5
   1632c:	andeq	sp, r1, r3, ror #10
   16330:	muleq	r2, r0, r3
   16334:	orrs	ip, r0, r1
   16338:	beq	16340 <__assert_fail@plt+0x521c>
   1633c:	b	158a0 <__assert_fail@plt+0x477c>
   16340:	cmp	r3, #0
   16344:	cmpeq	r2, #1
   16348:	push	{r4, r5}
   1634c:	mov	r4, r2
   16350:	mov	r5, r3
   16354:	bls	16388 <__assert_fail@plt+0x5264>
   16358:	add	r3, pc, #48	; 0x30
   1635c:	ldrd	r2, [r3]
   16360:	cmp	r5, r3
   16364:	cmpeq	r4, r2
   16368:	bls	1637c <__assert_fail@plt+0x5258>
   1636c:	mov	r0, r4
   16370:	mov	r1, r5
   16374:	pop	{r4, r5}
   16378:	b	12ea4 <__assert_fail@plt+0x1d80>
   1637c:	mov	r0, #1
   16380:	pop	{r4, r5}
   16384:	bx	lr
   16388:	mov	r0, #0
   1638c:	b	16380 <__assert_fail@plt+0x525c>
   16390:	cmneq	sp, r8, ror sp
   16394:	andeq	r0, r0, r0
   16398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1639c:	sub	sp, sp, #276	; 0x114
   163a0:	ldr	sl, [pc, #416]	; 16548 <__assert_fail@plt+0x5424>
   163a4:	ldr	r5, [pc, #416]	; 1654c <__assert_fail@plt+0x5428>
   163a8:	mov	r6, r0
   163ac:	ldr	ip, [sl]
   163b0:	mov	r7, r1
   163b4:	mov	r8, r2
   163b8:	mov	r9, r3
   163bc:	str	ip, [sp, #268]	; 0x10c
   163c0:	bl	12838 <__assert_fail@plt+0x1714>
   163c4:	ldr	ip, [r5, #4]
   163c8:	mov	fp, #58	; 0x3a
   163cc:	add	r4, sp, #8
   163d0:	mov	r3, r9
   163d4:	add	lr, ip, #1
   163d8:	strb	fp, [ip]
   163dc:	mov	r2, r8
   163e0:	mov	r0, r6
   163e4:	mov	r1, r7
   163e8:	str	r4, [sp]
   163ec:	str	lr, [r5, #4]
   163f0:	bl	14ea0 <__assert_fail@plt+0x3d7c>
   163f4:	ldrb	r3, [sp, #258]	; 0x102
   163f8:	cmp	r3, #0
   163fc:	beq	16464 <__assert_fail@plt+0x5340>
   16400:	mvn	r9, #223	; 0xdf
   16404:	sub	r9, r9, r4
   16408:	add	r6, sp, #232	; 0xe8
   1640c:	add	r7, sp, #24
   16410:	mov	r8, #32
   16414:	ldrb	r2, [r6], #1
   16418:	cmp	r2, #0
   1641c:	movne	r4, #0
   16420:	beq	16454 <__assert_fail@plt+0x5330>
   16424:	ldr	r3, [r5, #4]
   16428:	mov	r2, #0
   1642c:	add	ip, r3, #1
   16430:	strb	r8, [r3]
   16434:	ldrd	r0, [r7]
   16438:	str	ip, [r5, #4]
   1643c:	bl	121d8 <__assert_fail@plt+0x10b4>
   16440:	ldrb	r3, [r6, #-1]
   16444:	add	r4, r4, #1
   16448:	cmp	r3, r4
   1644c:	bhi	16424 <__assert_fail@plt+0x5300>
   16450:	ldrb	r3, [sp, #258]	; 0x102
   16454:	add	r2, r9, r6
   16458:	cmp	r3, r2
   1645c:	add	r7, r7, #8
   16460:	bhi	16414 <__assert_fail@plt+0x52f0>
   16464:	ldrd	r2, [sp, #16]
   16468:	ldr	r1, [r5, #4]
   1646c:	orrs	r3, r2, r3
   16470:	add	r6, r1, #1
   16474:	bne	16510 <__assert_fail@plt+0x53ec>
   16478:	ldr	r7, [pc, #208]	; 16550 <__assert_fail@plt+0x542c>
   1647c:	mov	r3, #10
   16480:	str	r6, [r5, #4]
   16484:	ldr	r0, [r7]
   16488:	strb	r3, [r1]
   1648c:	cmn	r0, #1
   16490:	ldr	r4, [r5]
   16494:	beq	16534 <__assert_fail@plt+0x5410>
   16498:	cmp	r0, #0
   1649c:	bne	16508 <__assert_fail@plt+0x53e4>
   164a0:	sub	r3, r6, r4
   164a4:	cmp	r3, #512	; 0x200
   164a8:	addcs	r4, r4, #512	; 0x200
   164ac:	bcs	164cc <__assert_fail@plt+0x53a8>
   164b0:	ldr	r2, [sp, #268]	; 0x10c
   164b4:	ldr	r3, [sl]
   164b8:	cmp	r2, r3
   164bc:	bne	16544 <__assert_fail@plt+0x5420>
   164c0:	add	sp, sp, #276	; 0x114
   164c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164c8:	mov	r4, r2
   164cc:	ldrb	r3, [r4, #-1]
   164d0:	sub	r2, r4, #1
   164d4:	cmp	r3, #10
   164d8:	bne	164c8 <__assert_fail@plt+0x53a4>
   164dc:	str	r4, [r5, #4]
   164e0:	bl	12270 <__assert_fail@plt+0x114c>
   164e4:	ldr	r3, [r5]
   164e8:	sub	r6, r6, r4
   164ec:	mov	r2, r6
   164f0:	mov	r1, r4
   164f4:	mov	r0, r3
   164f8:	bl	10ee4 <memcpy@plt>
   164fc:	add	r6, r0, r6
   16500:	str	r6, [r5, #4]
   16504:	b	164b0 <__assert_fail@plt+0x538c>
   16508:	bl	12270 <__assert_fail@plt+0x114c>
   1650c:	b	164b0 <__assert_fail@plt+0x538c>
   16510:	mov	r3, #32
   16514:	strb	r3, [r1]
   16518:	ldrd	r0, [sp, #16]
   1651c:	ldrd	r2, [sp, #8]
   16520:	str	r6, [r5, #4]
   16524:	bl	12838 <__assert_fail@plt+0x1714>
   16528:	ldr	r1, [r5, #4]
   1652c:	add	r6, r1, #1
   16530:	b	16478 <__assert_fail@plt+0x5354>
   16534:	mov	r0, #0
   16538:	bl	11100 <isatty@plt>
   1653c:	str	r0, [r7]
   16540:	b	16498 <__assert_fail@plt+0x5374>
   16544:	bl	10f20 <__stack_chk_fail@plt>
   16548:	andeq	r0, r3, r8, lsl #30
   1654c:	andeq	r1, r3, ip, ror r1
   16550:	andeq	r1, r3, r8, lsl #2
   16554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16558:	mov	r3, r0
   1655c:	ldrb	r2, [r0]
   16560:	sub	sp, sp, #28
   16564:	mov	r8, r0
   16568:	cmp	r2, #32
   1656c:	bne	1657c <__assert_fail@plt+0x5458>
   16570:	ldrb	r2, [r3, #1]!
   16574:	cmp	r2, #32
   16578:	beq	16570 <__assert_fail@plt+0x544c>
   1657c:	cmp	r2, #43	; 0x2b
   16580:	add	ip, r3, #1
   16584:	addeq	r2, r3, #2
   16588:	moveq	r3, ip
   1658c:	mov	r0, #4
   16590:	moveq	ip, r2
   16594:	mov	r2, r3
   16598:	ldrb	r1, [r2], #1
   1659c:	cmp	r1, #0
   165a0:	sub	lr, r1, #48	; 0x30
   165a4:	beq	165f0 <__assert_fail@plt+0x54cc>
   165a8:	cmp	lr, #9
   165ac:	mov	r0, #0
   165b0:	bls	16598 <__assert_fail@plt+0x5474>
   165b4:	ldr	r1, [pc, #444]	; 16778 <__assert_fail@plt+0x5654>
   165b8:	mov	r2, #5
   165bc:	mov	r0, #0
   165c0:	bl	10f08 <dcgettext@plt>
   165c4:	mov	r4, r0
   165c8:	mov	r0, r8
   165cc:	bl	199e0 <__assert_fail@plt+0x88bc>
   165d0:	mov	r1, #0
   165d4:	mov	r2, r4
   165d8:	mov	r3, r0
   165dc:	mov	r0, r1
   165e0:	bl	10f98 <error@plt>
   165e4:	mov	r0, #0
   165e8:	add	sp, sp, #28
   165ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165f0:	cmp	r0, #0
   165f4:	bne	165b4 <__assert_fail@plt+0x5490>
   165f8:	ldrb	r2, [r3]
   165fc:	mov	r5, #0
   16600:	mov	r4, r5
   16604:	cmp	r2, #0
   16608:	mov	r6, r5
   1660c:	beq	16768 <__assert_fail@plt+0x5644>
   16610:	sub	r2, r2, #48	; 0x30
   16614:	mov	r7, r5
   16618:	mov	r1, r5
   1661c:	str	r8, [sp, #12]
   16620:	str	r5, [sp, #8]
   16624:	ldr	r0, [sp, #8]
   16628:	lsl	lr, r1, #2
   1662c:	lsl	r3, r0, #2
   16630:	adds	r3, r3, r0
   16634:	orr	lr, lr, r0, lsr #30
   16638:	adc	lr, lr, r1
   1663c:	adds	sl, r3, r3
   16640:	adc	fp, lr, lr
   16644:	adds	r3, r0, r0
   16648:	str	r3, [sp]
   1664c:	adc	r3, r1, r1
   16650:	str	r3, [sp, #4]
   16654:	ldrd	r8, [sp]
   16658:	mov	r3, #0
   1665c:	cmp	fp, r9
   16660:	cmpeq	sl, r8
   16664:	movcc	lr, #1
   16668:	movcs	lr, #0
   1666c:	lsr	r9, r1, #31
   16670:	adds	r0, sl, r2
   16674:	add	r9, r9, r1, lsr #29
   16678:	lsl	r2, r7, #2
   1667c:	adcs	r1, fp, r3
   16680:	lsl	r3, r6, #2
   16684:	add	r9, lr, r9
   16688:	orr	r2, r2, r6, lsr #30
   1668c:	movcs	lr, #1
   16690:	movcc	lr, #0
   16694:	adds	r3, r3, r6
   16698:	adc	r6, r2, r7
   1669c:	add	lr, lr, r9
   166a0:	adds	r4, r3, r3
   166a4:	adc	r5, r6, r6
   166a8:	mov	r3, #0
   166ac:	adds	r6, r4, lr
   166b0:	adcs	r7, r5, r3
   166b4:	mov	r2, #0
   166b8:	mov	r3, #0
   166bc:	movcs	r2, #1
   166c0:	movcs	r3, #0
   166c4:	orrs	r3, r2, r3
   166c8:	str	r0, [sp, #8]
   166cc:	bne	166f4 <__assert_fail@plt+0x55d0>
   166d0:	ldrb	r2, [ip], #1
   166d4:	cmp	r2, #0
   166d8:	beq	16704 <__assert_fail@plt+0x55e0>
   166dc:	add	r9, pc, #140	; 0x8c
   166e0:	ldrd	r8, [r9]
   166e4:	sub	r2, r2, #48	; 0x30
   166e8:	cmp	r7, r9
   166ec:	cmpeq	r6, r8
   166f0:	bls	16624 <__assert_fail@plt+0x5500>
   166f4:	ldr	r8, [sp, #12]
   166f8:	mov	r2, #5
   166fc:	ldr	r1, [pc, #120]	; 1677c <__assert_fail@plt+0x5658>
   16700:	b	165bc <__assert_fail@plt+0x5498>
   16704:	bic	r3, r7, #-2147483648	; 0x80000000
   16708:	cmp	r3, r7
   1670c:	cmpeq	r6, r6
   16710:	ldr	r8, [sp, #12]
   16714:	ldr	r5, [sp, #8]
   16718:	mov	r4, r1
   1671c:	bne	166f8 <__assert_fail@plt+0x55d4>
   16720:	ldr	r3, [pc, #88]	; 16780 <__assert_fail@plt+0x565c>
   16724:	ldrb	r3, [r3, #8]
   16728:	cmp	r3, #0
   1672c:	bne	1674c <__assert_fail@plt+0x5628>
   16730:	mov	r0, r6
   16734:	mov	r2, r5
   16738:	mov	r3, r4
   1673c:	mov	r1, r7
   16740:	bl	16398 <__assert_fail@plt+0x5274>
   16744:	mov	r0, #1
   16748:	b	165e8 <__assert_fail@plt+0x54c4>
   1674c:	ldr	r3, [pc, #48]	; 16784 <__assert_fail@plt+0x5660>
   16750:	mov	r2, #36	; 0x24
   16754:	mov	r1, #1
   16758:	ldr	r3, [r3]
   1675c:	ldr	r0, [pc, #36]	; 16788 <__assert_fail@plt+0x5664>
   16760:	bl	10f5c <fwrite@plt>
   16764:	b	16730 <__assert_fail@plt+0x560c>
   16768:	mov	r7, r5
   1676c:	b	16720 <__assert_fail@plt+0x55fc>
   16770:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   16774:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   16778:	andeq	r0, r2, r8, lsl #8
   1677c:	andeq	r0, r2, ip, lsr #8
   16780:	andeq	r1, r3, ip, ror r1
   16784:	andeq	r1, r3, r8, ror #2
   16788:	andeq	r0, r2, r0, ror #7
   1678c:	ldr	r3, [pc, #652]	; 16a20 <__assert_fail@plt+0x58fc>
   16790:	push	{r7, lr}
   16794:	sub	sp, sp, #64	; 0x40
   16798:	ldr	r3, [r3]
   1679c:	subs	r6, r0, #0
   167a0:	str	r3, [sp, #60]	; 0x3c
   167a4:	beq	167e0 <__assert_fail@plt+0x56bc>
   167a8:	ldr	r3, [pc, #628]	; 16a24 <__assert_fail@plt+0x5900>
   167ac:	mov	r2, #5
   167b0:	ldr	r1, [pc, #624]	; 16a28 <__assert_fail@plt+0x5904>
   167b4:	mov	r0, #0
   167b8:	ldr	r4, [r3]
   167bc:	bl	10f08 <dcgettext@plt>
   167c0:	ldr	r3, [pc, #612]	; 16a2c <__assert_fail@plt+0x5908>
   167c4:	mov	r1, #1
   167c8:	ldr	r3, [r3]
   167cc:	mov	r2, r0
   167d0:	mov	r0, r4
   167d4:	bl	11088 <__fprintf_chk@plt>
   167d8:	mov	r0, r6
   167dc:	bl	10ff8 <exit@plt>
   167e0:	mov	r2, #5
   167e4:	ldr	r1, [pc, #580]	; 16a30 <__assert_fail@plt+0x590c>
   167e8:	bl	10f08 <dcgettext@plt>
   167ec:	ldr	r3, [pc, #568]	; 16a2c <__assert_fail@plt+0x5908>
   167f0:	ldr	r4, [pc, #572]	; 16a34 <__assert_fail@plt+0x5910>
   167f4:	ldr	r3, [r3]
   167f8:	mov	r2, r3
   167fc:	mov	r1, r0
   16800:	mov	r0, #1
   16804:	bl	11064 <__printf_chk@plt>
   16808:	mov	r2, #5
   1680c:	ldr	r1, [pc, #548]	; 16a38 <__assert_fail@plt+0x5914>
   16810:	mov	r0, r6
   16814:	bl	10f08 <dcgettext@plt>
   16818:	ldr	r1, [r4]
   1681c:	bl	10e6c <fputs_unlocked@plt>
   16820:	mov	r2, #5
   16824:	ldr	r1, [pc, #528]	; 16a3c <__assert_fail@plt+0x5918>
   16828:	mov	r0, r6
   1682c:	bl	10f08 <dcgettext@plt>
   16830:	ldr	r1, [r4]
   16834:	bl	10e6c <fputs_unlocked@plt>
   16838:	mov	r2, #5
   1683c:	ldr	r1, [pc, #508]	; 16a40 <__assert_fail@plt+0x591c>
   16840:	mov	r0, r6
   16844:	bl	10f08 <dcgettext@plt>
   16848:	ldr	r1, [r4]
   1684c:	bl	10e6c <fputs_unlocked@plt>
   16850:	ldr	lr, [pc, #492]	; 16a44 <__assert_fail@plt+0x5920>
   16854:	add	ip, sp, #4
   16858:	ldm	lr!, {r0, r1, r2, r3}
   1685c:	stmia	ip!, {r0, r1, r2, r3}
   16860:	ldm	lr!, {r0, r1, r2, r3}
   16864:	ldr	r5, [sp, #4]
   16868:	stmia	ip!, {r0, r1, r2, r3}
   1686c:	cmp	r5, #0
   16870:	ldm	lr!, {r0, r1, r2, r3}
   16874:	addeq	r4, sp, #4
   16878:	stmia	ip!, {r0, r1, r2, r3}
   1687c:	ldm	lr, {r0, r1}
   16880:	stm	ip, {r0, r1}
   16884:	beq	168b4 <__assert_fail@plt+0x5790>
   16888:	ldr	r7, [pc, #440]	; 16a48 <__assert_fail@plt+0x5924>
   1688c:	add	r4, sp, #4
   16890:	b	168a0 <__assert_fail@plt+0x577c>
   16894:	ldr	r5, [r4, #8]!
   16898:	cmp	r5, #0
   1689c:	beq	168b4 <__assert_fail@plt+0x5790>
   168a0:	mov	r1, r5
   168a4:	mov	r0, r7
   168a8:	bl	10e9c <strcmp@plt>
   168ac:	cmp	r0, #0
   168b0:	bne	16894 <__assert_fail@plt+0x5770>
   168b4:	ldr	r4, [r4, #4]
   168b8:	mov	r2, #5
   168bc:	cmp	r4, #0
   168c0:	ldr	r1, [pc, #388]	; 16a4c <__assert_fail@plt+0x5928>
   168c4:	beq	1696c <__assert_fail@plt+0x5848>
   168c8:	mov	r0, #0
   168cc:	bl	10f08 <dcgettext@plt>
   168d0:	ldr	r3, [pc, #376]	; 16a50 <__assert_fail@plt+0x592c>
   168d4:	ldr	r2, [pc, #376]	; 16a54 <__assert_fail@plt+0x5930>
   168d8:	mov	r1, r0
   168dc:	mov	r0, #1
   168e0:	bl	11064 <__printf_chk@plt>
   168e4:	mov	r1, #0
   168e8:	mov	r0, #5
   168ec:	bl	110d0 <setlocale@plt>
   168f0:	cmp	r0, #0
   168f4:	ldreq	r5, [pc, #332]	; 16a48 <__assert_fail@plt+0x5924>
   168f8:	beq	16914 <__assert_fail@plt+0x57f0>
   168fc:	mov	r2, #3
   16900:	ldr	r1, [pc, #336]	; 16a58 <__assert_fail@plt+0x5934>
   16904:	bl	1110c <strncmp@plt>
   16908:	ldr	r5, [pc, #312]	; 16a48 <__assert_fail@plt+0x5924>
   1690c:	cmp	r0, #0
   16910:	bne	169fc <__assert_fail@plt+0x58d8>
   16914:	mov	r2, #5
   16918:	ldr	r1, [pc, #316]	; 16a5c <__assert_fail@plt+0x5938>
   1691c:	mov	r0, #0
   16920:	bl	10f08 <dcgettext@plt>
   16924:	ldr	r3, [pc, #284]	; 16a48 <__assert_fail@plt+0x5924>
   16928:	ldr	r2, [pc, #288]	; 16a50 <__assert_fail@plt+0x592c>
   1692c:	mov	r1, r0
   16930:	mov	r0, #1
   16934:	bl	11064 <__printf_chk@plt>
   16938:	mov	r2, #5
   1693c:	ldr	r1, [pc, #284]	; 16a60 <__assert_fail@plt+0x593c>
   16940:	mov	r0, #0
   16944:	bl	10f08 <dcgettext@plt>
   16948:	ldr	r2, [pc, #276]	; 16a64 <__assert_fail@plt+0x5940>
   1694c:	cmp	r4, r5
   16950:	ldr	r3, [pc, #272]	; 16a68 <__assert_fail@plt+0x5944>
   16954:	movne	r3, r2
   16958:	mov	r1, r0
   1695c:	mov	r2, r4
   16960:	mov	r0, #1
   16964:	bl	11064 <__printf_chk@plt>
   16968:	b	167d8 <__assert_fail@plt+0x56b4>
   1696c:	mov	r0, r4
   16970:	bl	10f08 <dcgettext@plt>
   16974:	ldr	r3, [pc, #212]	; 16a50 <__assert_fail@plt+0x592c>
   16978:	ldr	r2, [pc, #212]	; 16a54 <__assert_fail@plt+0x5930>
   1697c:	mov	r1, r0
   16980:	mov	r0, #1
   16984:	bl	11064 <__printf_chk@plt>
   16988:	mov	r1, r4
   1698c:	mov	r0, #5
   16990:	bl	110d0 <setlocale@plt>
   16994:	cmp	r0, #0
   16998:	beq	169b0 <__assert_fail@plt+0x588c>
   1699c:	mov	r2, #3
   169a0:	ldr	r1, [pc, #176]	; 16a58 <__assert_fail@plt+0x5934>
   169a4:	bl	1110c <strncmp@plt>
   169a8:	cmp	r0, #0
   169ac:	bne	169f4 <__assert_fail@plt+0x58d0>
   169b0:	mov	r2, #5
   169b4:	ldr	r1, [pc, #160]	; 16a5c <__assert_fail@plt+0x5938>
   169b8:	mov	r0, #0
   169bc:	bl	10f08 <dcgettext@plt>
   169c0:	ldr	r3, [pc, #128]	; 16a48 <__assert_fail@plt+0x5924>
   169c4:	ldr	r2, [pc, #132]	; 16a50 <__assert_fail@plt+0x592c>
   169c8:	mov	r4, r3
   169cc:	mov	r1, r0
   169d0:	mov	r0, #1
   169d4:	bl	11064 <__printf_chk@plt>
   169d8:	ldr	r1, [pc, #128]	; 16a60 <__assert_fail@plt+0x593c>
   169dc:	mov	r2, #5
   169e0:	mov	r0, #0
   169e4:	bl	10f08 <dcgettext@plt>
   169e8:	ldr	r3, [pc, #120]	; 16a68 <__assert_fail@plt+0x5944>
   169ec:	mov	r1, r0
   169f0:	b	1695c <__assert_fail@plt+0x5838>
   169f4:	ldr	r5, [pc, #76]	; 16a48 <__assert_fail@plt+0x5924>
   169f8:	mov	r4, r5
   169fc:	mov	r2, #5
   16a00:	ldr	r1, [pc, #100]	; 16a6c <__assert_fail@plt+0x5948>
   16a04:	mov	r0, #0
   16a08:	bl	10f08 <dcgettext@plt>
   16a0c:	ldr	r2, [pc, #52]	; 16a48 <__assert_fail@plt+0x5924>
   16a10:	mov	r1, r0
   16a14:	mov	r0, #1
   16a18:	bl	11064 <__printf_chk@plt>
   16a1c:	b	16914 <__assert_fail@plt+0x57f0>
   16a20:	andeq	r0, r3, r8, lsl #30
   16a24:	andeq	r1, r3, r8, ror #2
   16a28:	andeq	r0, r2, r4, asr #8
   16a2c:	muleq	r3, r0, r1
   16a30:	andeq	r0, r2, ip, ror #8
   16a34:	andeq	r1, r3, r4, ror r1
   16a38:	muleq	r2, r4, r4
   16a3c:	andeq	r0, r2, ip, lsl r5
   16a40:	andeq	r0, r2, ip, asr #10
   16a44:	andeq	sp, r1, r0, asr #16
   16a48:	andeq	r0, r2, ip, lsr r4
   16a4c:	andeq	r0, r2, r4, lsl #11
   16a50:	muleq	r2, ip, r5
   16a54:	andeq	r0, r2, r4, asr #11
   16a58:	ldrdeq	r0, [r2], -r4
   16a5c:	andeq	r0, r2, r0, lsr #12
   16a60:	andeq	r0, r2, r0, asr #12
   16a64:	andeq	r0, r2, ip, lsl ip
   16a68:	andeq	r0, r2, r8, ror #13
   16a6c:	ldrdeq	r0, [r2], -r8
   16a70:	ldr	r3, [pc, #4]	; 16a7c <__assert_fail@plt+0x5958>
   16a74:	str	r0, [r3]
   16a78:	bx	lr
   16a7c:	andeq	r1, r3, r8, lsl #3
   16a80:	ldr	r3, [pc, #4]	; 16a8c <__assert_fail@plt+0x5968>
   16a84:	strb	r0, [r3, #4]
   16a88:	bx	lr
   16a8c:	andeq	r1, r3, r8, lsl #3
   16a90:	ldr	r3, [pc, #180]	; 16b4c <__assert_fail@plt+0x5a28>
   16a94:	push	{r4, r5, r6, lr}
   16a98:	sub	sp, sp, #8
   16a9c:	ldr	r0, [r3]
   16aa0:	bl	1accc <__assert_fail@plt+0x9ba8>
   16aa4:	cmp	r0, #0
   16aa8:	beq	16ad0 <__assert_fail@plt+0x59ac>
   16aac:	bl	11028 <__errno_location@plt>
   16ab0:	ldr	r5, [pc, #152]	; 16b50 <__assert_fail@plt+0x5a2c>
   16ab4:	ldrb	r3, [r5, #4]
   16ab8:	cmp	r3, #0
   16abc:	mov	r4, r0
   16ac0:	beq	16aec <__assert_fail@plt+0x59c8>
   16ac4:	ldr	r3, [r0]
   16ac8:	cmp	r3, #32
   16acc:	bne	16aec <__assert_fail@plt+0x59c8>
   16ad0:	ldr	r3, [pc, #124]	; 16b54 <__assert_fail@plt+0x5a30>
   16ad4:	ldr	r0, [r3]
   16ad8:	bl	1accc <__assert_fail@plt+0x9ba8>
   16adc:	cmp	r0, #0
   16ae0:	bne	16b2c <__assert_fail@plt+0x5a08>
   16ae4:	add	sp, sp, #8
   16ae8:	pop	{r4, r5, r6, pc}
   16aec:	mov	r2, #5
   16af0:	ldr	r1, [pc, #96]	; 16b58 <__assert_fail@plt+0x5a34>
   16af4:	mov	r0, #0
   16af8:	bl	10f08 <dcgettext@plt>
   16afc:	mov	r6, r0
   16b00:	ldr	r0, [r5]
   16b04:	cmp	r0, #0
   16b08:	beq	16b38 <__assert_fail@plt+0x5a14>
   16b0c:	ldr	r4, [r4]
   16b10:	bl	19800 <__assert_fail@plt+0x86dc>
   16b14:	mov	r1, r4
   16b18:	str	r6, [sp]
   16b1c:	ldr	r2, [pc, #56]	; 16b5c <__assert_fail@plt+0x5a38>
   16b20:	mov	r3, r0
   16b24:	mov	r0, #0
   16b28:	bl	10f98 <error@plt>
   16b2c:	ldr	r3, [pc, #44]	; 16b60 <__assert_fail@plt+0x5a3c>
   16b30:	ldr	r0, [r3]
   16b34:	bl	10ed8 <_exit@plt>
   16b38:	mov	r3, r6
   16b3c:	ldr	r1, [r4]
   16b40:	ldr	r2, [pc, #28]	; 16b64 <__assert_fail@plt+0x5a40>
   16b44:	bl	10f98 <error@plt>
   16b48:	b	16b2c <__assert_fail@plt+0x5a08>
   16b4c:	andeq	r1, r3, r4, ror r1
   16b50:	andeq	r1, r3, r8, lsl #3
   16b54:	andeq	r1, r3, r8, ror #2
   16b58:	andeq	r0, r2, r8, asr r3
   16b5c:	andeq	r0, r2, ip, ror #14
   16b60:	andeq	r1, r3, r0, lsl r1
   16b64:	andeq	r0, r2, r0, ror r7
   16b68:	push	{r4, r5, r6, r7, r8, lr}
   16b6c:	subs	r4, r2, #0
   16b70:	beq	16bd0 <__assert_fail@plt+0x5aac>
   16b74:	mov	r7, r0
   16b78:	mov	r5, r1
   16b7c:	mov	r6, #0
   16b80:	b	16b9c <__assert_fail@plt+0x5a78>
   16b84:	cmp	r0, #0
   16b88:	beq	16bbc <__assert_fail@plt+0x5a98>
   16b8c:	subs	r4, r4, r0
   16b90:	add	r6, r6, r0
   16b94:	add	r5, r5, r0
   16b98:	beq	16bb4 <__assert_fail@plt+0x5a90>
   16b9c:	mov	r2, r4
   16ba0:	mov	r1, r5
   16ba4:	mov	r0, r7
   16ba8:	bl	19db8 <__assert_fail@plt+0x8c94>
   16bac:	cmn	r0, #1
   16bb0:	bne	16b84 <__assert_fail@plt+0x5a60>
   16bb4:	mov	r0, r6
   16bb8:	pop	{r4, r5, r6, r7, r8, pc}
   16bbc:	bl	11028 <__errno_location@plt>
   16bc0:	mov	r3, #28
   16bc4:	str	r3, [r0]
   16bc8:	mov	r0, r6
   16bcc:	pop	{r4, r5, r6, r7, r8, pc}
   16bd0:	mov	r6, r4
   16bd4:	b	16bb4 <__assert_fail@plt+0x5a90>
   16bd8:	push	{r4, r5, r6, lr}
   16bdc:	mov	r4, r0
   16be0:	mov	r5, r1
   16be4:	add	r6, r2, #20
   16be8:	mov	r3, #0
   16bec:	strb	r3, [r2, #20]
   16bf0:	mov	r0, r4
   16bf4:	mov	r1, r5
   16bf8:	mov	r2, #10
   16bfc:	mov	r3, #0
   16c00:	bl	1d01c <__assert_fail@plt+0xbef8>
   16c04:	mov	r0, r4
   16c08:	mov	r1, r5
   16c0c:	mov	r3, #0
   16c10:	add	r2, r2, #48	; 0x30
   16c14:	strb	r2, [r6, #-1]!
   16c18:	mov	r2, #10
   16c1c:	bl	1d01c <__assert_fail@plt+0xbef8>
   16c20:	cmp	r5, #0
   16c24:	cmpeq	r4, #9
   16c28:	mov	r5, r1
   16c2c:	mov	r4, r0
   16c30:	bhi	16bf0 <__assert_fail@plt+0x5acc>
   16c34:	mov	r0, r6
   16c38:	pop	{r4, r5, r6, pc}
   16c3c:	push	{r4, r5, r6, lr}
   16c40:	subs	r4, r0, #0
   16c44:	beq	16cb8 <__assert_fail@plt+0x5b94>
   16c48:	mov	r1, #47	; 0x2f
   16c4c:	bl	110dc <strrchr@plt>
   16c50:	subs	r5, r0, #0
   16c54:	beq	16ca4 <__assert_fail@plt+0x5b80>
   16c58:	add	r6, r5, #1
   16c5c:	sub	r3, r6, r4
   16c60:	cmp	r3, #6
   16c64:	ble	16ca4 <__assert_fail@plt+0x5b80>
   16c68:	mov	r2, #7
   16c6c:	ldr	r1, [pc, #96]	; 16cd4 <__assert_fail@plt+0x5bb0>
   16c70:	sub	r0, r5, #6
   16c74:	bl	1110c <strncmp@plt>
   16c78:	cmp	r0, #0
   16c7c:	bne	16ca4 <__assert_fail@plt+0x5b80>
   16c80:	mov	r2, #3
   16c84:	ldr	r1, [pc, #76]	; 16cd8 <__assert_fail@plt+0x5bb4>
   16c88:	mov	r0, r6
   16c8c:	bl	1110c <strncmp@plt>
   16c90:	cmp	r0, #0
   16c94:	movne	r4, r6
   16c98:	ldreq	r3, [pc, #60]	; 16cdc <__assert_fail@plt+0x5bb8>
   16c9c:	addeq	r4, r5, #4
   16ca0:	streq	r4, [r3]
   16ca4:	ldr	r2, [pc, #52]	; 16ce0 <__assert_fail@plt+0x5bbc>
   16ca8:	ldr	r3, [pc, #52]	; 16ce4 <__assert_fail@plt+0x5bc0>
   16cac:	str	r4, [r2]
   16cb0:	str	r4, [r3]
   16cb4:	pop	{r4, r5, r6, pc}
   16cb8:	ldr	r3, [pc, #40]	; 16ce8 <__assert_fail@plt+0x5bc4>
   16cbc:	mov	r2, #55	; 0x37
   16cc0:	mov	r1, #1
   16cc4:	ldr	r3, [r3]
   16cc8:	ldr	r0, [pc, #28]	; 16cec <__assert_fail@plt+0x5bc8>
   16ccc:	bl	10f5c <fwrite@plt>
   16cd0:	bl	11118 <abort@plt>
   16cd4:	andeq	r0, r2, ip, lsr #15
   16cd8:			; <UNDEFINED> instruction: 0x000207b4
   16cdc:	andeq	r1, r3, r8, asr r1
   16ce0:	muleq	r3, r0, r1
   16ce4:	andeq	r1, r3, ip, asr r1
   16ce8:	andeq	r1, r3, r8, ror #2
   16cec:	andeq	r0, r2, r4, ror r7
   16cf0:	push	{r4, lr}
   16cf4:	mov	r2, #179	; 0xb3
   16cf8:	ldr	r3, [pc, #8]	; 16d08 <__assert_fail@plt+0x5be4>
   16cfc:	ldr	r1, [pc, #8]	; 16d0c <__assert_fail@plt+0x5be8>
   16d00:	ldr	r0, [pc, #8]	; 16d10 <__assert_fail@plt+0x5bec>
   16d04:	bl	11124 <__assert_fail@plt>
   16d08:			; <UNDEFINED> instruction: 0x000207b8
   16d0c:	andeq	r0, r2, ip, asr #15
   16d10:	ldrdeq	r0, [r2], -ip
   16d14:	ldr	r3, [pc, #1976]	; 174d4 <__assert_fail@plt+0x63b0>
   16d18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d1c:	sub	sp, sp, #124	; 0x7c
   16d20:	ldr	r3, [r3]
   16d24:	mov	r4, r0
   16d28:	mov	r0, r1
   16d2c:	mov	r1, #2
   16d30:	str	r3, [sp, #116]	; 0x74
   16d34:	bl	19e70 <__assert_fail@plt+0x8d4c>
   16d38:	ldr	r8, [pc, #1944]	; 174d8 <__assert_fail@plt+0x63b4>
   16d3c:	mov	r6, #0
   16d40:	mov	sl, r0
   16d44:	ldrb	r3, [r4]
   16d48:	cmp	r3, #0
   16d4c:	beq	16de0 <__assert_fail@plt+0x5cbc>
   16d50:	mov	r1, sl
   16d54:	mov	r0, r4
   16d58:	bl	1b878 <__assert_fail@plt+0xa754>
   16d5c:	subs	r9, r0, #0
   16d60:	beq	16de0 <__assert_fail@plt+0x5cbc>
   16d64:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   16d68:	cmp	r0, #1
   16d6c:	bhi	16e0c <__assert_fail@plt+0x5ce8>
   16d70:	mov	r0, sl
   16d74:	bl	11010 <strlen@plt>
   16d78:	cmp	r4, r9
   16d7c:	mov	r5, r0
   16d80:	bcs	16da0 <__assert_fail@plt+0x5c7c>
   16d84:	bl	10fec <__ctype_b_loc@plt>
   16d88:	ldrb	r3, [r9, #-1]
   16d8c:	lsl	r3, r3, #1
   16d90:	ldr	r2, [r0]
   16d94:	ldrh	r3, [r2, r3]
   16d98:	tst	r3, #8
   16d9c:	bne	16dc4 <__assert_fail@plt+0x5ca0>
   16da0:	ldrb	r4, [r9, r5]
   16da4:	cmp	r4, #0
   16da8:	beq	174a0 <__assert_fail@plt+0x637c>
   16dac:	bl	10fec <__ctype_b_loc@plt>
   16db0:	lsl	r4, r4, #1
   16db4:	ldr	r3, [r0]
   16db8:	ldrh	r3, [r3, r4]
   16dbc:	tst	r3, #8
   16dc0:	beq	174a0 <__assert_fail@plt+0x637c>
   16dc4:	ldrb	r3, [r9]
   16dc8:	cmp	r3, #0
   16dcc:	beq	16de0 <__assert_fail@plt+0x5cbc>
   16dd0:	add	r4, r9, #1
   16dd4:	ldrb	r3, [r4]
   16dd8:	cmp	r3, #0
   16ddc:	bne	16d50 <__assert_fail@plt+0x5c2c>
   16de0:	mov	fp, #0
   16de4:	mov	r0, sl
   16de8:	bl	10ecc <free@plt>
   16dec:	ldr	r3, [pc, #1760]	; 174d4 <__assert_fail@plt+0x63b0>
   16df0:	ldr	r2, [sp, #116]	; 0x74
   16df4:	mov	r0, fp
   16df8:	ldr	r3, [r3]
   16dfc:	cmp	r2, r3
   16e00:	bne	174d0 <__assert_fail@plt+0x63ac>
   16e04:	add	sp, sp, #124	; 0x7c
   16e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e0c:	cmp	r4, r9
   16e10:	str	r4, [sp, #20]
   16e14:	strb	r6, [sp, #4]
   16e18:	str	r6, [sp, #8]
   16e1c:	strb	r6, [sp, #16]
   16e20:	str	r6, [sp, #12]
   16e24:	movcc	r5, #1
   16e28:	bcc	16e88 <__assert_fail@plt+0x5d64>
   16e2c:	b	172f4 <__assert_fail@plt+0x61d0>
   16e30:	ldrb	r3, [r4]
   16e34:	and	r2, r3, #31
   16e38:	lsr	r3, r3, #5
   16e3c:	ldr	r3, [r8, r3, lsl #2]
   16e40:	lsr	r3, r3, r2
   16e44:	tst	r3, #1
   16e48:	beq	16f18 <__assert_fail@plt+0x5df4>
   16e4c:	str	r5, [sp, #24]
   16e50:	ldrb	r7, [r4]
   16e54:	strb	r5, [sp, #28]
   16e58:	strb	r5, [sp, #16]
   16e5c:	cmp	r7, #0
   16e60:	str	r7, [sp, #32]
   16e64:	beq	16f14 <__assert_fail@plt+0x5df0>
   16e68:	ldr	r4, [sp, #20]
   16e6c:	ldr	r3, [sp, #24]
   16e70:	strb	r6, [sp, #16]
   16e74:	add	r4, r4, r3
   16e78:	cmp	r4, r9
   16e7c:	str	r4, [sp, #20]
   16e80:	ldrb	r3, [sp, #28]
   16e84:	bcs	16f68 <__assert_fail@plt+0x5e44>
   16e88:	ldrb	r3, [sp, #4]
   16e8c:	cmp	r3, #0
   16e90:	beq	16e30 <__assert_fail@plt+0x5d0c>
   16e94:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   16e98:	mov	r1, r0
   16e9c:	mov	r0, r4
   16ea0:	bl	19e20 <__assert_fail@plt+0x8cfc>
   16ea4:	add	r3, sp, #8
   16ea8:	mov	r1, r4
   16eac:	mov	r2, r0
   16eb0:	add	r0, sp, #32
   16eb4:	bl	1abdc <__assert_fail@plt+0x9ab8>
   16eb8:	cmn	r0, #1
   16ebc:	str	r0, [sp, #24]
   16ec0:	beq	16f30 <__assert_fail@plt+0x5e0c>
   16ec4:	cmn	r0, #2
   16ec8:	beq	16f44 <__assert_fail@plt+0x5e20>
   16ecc:	cmp	r0, #0
   16ed0:	bne	16f60 <__assert_fail@plt+0x5e3c>
   16ed4:	ldr	r4, [sp, #20]
   16ed8:	str	r5, [sp, #24]
   16edc:	ldrb	r3, [r4]
   16ee0:	cmp	r3, #0
   16ee4:	bne	174bc <__assert_fail@plt+0x6398>
   16ee8:	ldr	r7, [sp, #32]
   16eec:	cmp	r7, #0
   16ef0:	bne	172a4 <__assert_fail@plt+0x6180>
   16ef4:	add	r0, sp, #8
   16ef8:	strb	r5, [sp, #28]
   16efc:	bl	10ef0 <mbsinit@plt>
   16f00:	strb	r5, [sp, #16]
   16f04:	cmp	r0, #0
   16f08:	strbne	r6, [sp, #4]
   16f0c:	cmp	r7, #0
   16f10:	bne	16e68 <__assert_fail@plt+0x5d44>
   16f14:	bl	11118 <abort@plt>
   16f18:	add	r0, sp, #8
   16f1c:	bl	10ef0 <mbsinit@plt>
   16f20:	cmp	r0, #0
   16f24:	beq	174a8 <__assert_fail@plt+0x6384>
   16f28:	strb	r5, [sp, #4]
   16f2c:	b	16e94 <__assert_fail@plt+0x5d70>
   16f30:	str	r5, [sp, #24]
   16f34:	strb	r6, [sp, #28]
   16f38:	ldr	r7, [sp, #32]
   16f3c:	ldr	r4, [sp, #20]
   16f40:	b	16e6c <__assert_fail@plt+0x5d48>
   16f44:	ldr	r4, [sp, #20]
   16f48:	mov	r0, r4
   16f4c:	bl	11010 <strlen@plt>
   16f50:	strb	r6, [sp, #28]
   16f54:	ldr	r7, [sp, #32]
   16f58:	str	r0, [sp, #24]
   16f5c:	b	16e6c <__assert_fail@plt+0x5d48>
   16f60:	ldr	r7, [sp, #32]
   16f64:	b	16ef4 <__assert_fail@plt+0x5dd0>
   16f68:	cmp	r3, #0
   16f6c:	beq	172f4 <__assert_fail@plt+0x61d0>
   16f70:	mov	r0, r7
   16f74:	bl	11034 <iswalnum@plt>
   16f78:	clz	fp, r0
   16f7c:	lsr	fp, fp, #5
   16f80:	str	r9, [sp, #20]
   16f84:	strb	r6, [sp, #4]
   16f88:	str	r6, [sp, #8]
   16f8c:	str	r6, [sp, #12]
   16f90:	strb	r6, [sp, #16]
   16f94:	str	sl, [sp, #76]	; 0x4c
   16f98:	strb	r6, [sp, #60]	; 0x3c
   16f9c:	str	r6, [sp, #64]	; 0x40
   16fa0:	strb	r6, [sp, #72]	; 0x48
   16fa4:	str	r6, [sp, #68]	; 0x44
   16fa8:	mov	r5, sl
   16fac:	mov	r7, #1
   16fb0:	b	17068 <__assert_fail@plt+0x5f44>
   16fb4:	ldrb	r3, [r5]
   16fb8:	and	r2, r3, #31
   16fbc:	lsr	r3, r3, #5
   16fc0:	ldr	r3, [r8, r3, lsl #2]
   16fc4:	lsr	r3, r3, r2
   16fc8:	tst	r3, #1
   16fcc:	beq	17244 <__assert_fail@plt+0x6120>
   16fd0:	str	r7, [sp, #80]	; 0x50
   16fd4:	ldrb	r4, [r5]
   16fd8:	strb	r7, [sp, #84]	; 0x54
   16fdc:	strb	r7, [sp, #72]	; 0x48
   16fe0:	cmp	r4, #0
   16fe4:	str	r4, [sp, #88]	; 0x58
   16fe8:	beq	170e4 <__assert_fail@plt+0x5fc0>
   16fec:	ldrb	r3, [sp, #16]
   16ff0:	cmp	r3, #0
   16ff4:	bne	17230 <__assert_fail@plt+0x610c>
   16ff8:	ldrb	r3, [sp, #4]
   16ffc:	ldr	r4, [sp, #20]
   17000:	cmp	r3, #0
   17004:	bne	171d0 <__assert_fail@plt+0x60ac>
   17008:	ldrb	r3, [r4]
   1700c:	and	r2, r3, #31
   17010:	lsr	r3, r3, #5
   17014:	ldr	r3, [r8, r3, lsl #2]
   17018:	lsr	r3, r3, r2
   1701c:	tst	r3, #1
   17020:	beq	171bc <__assert_fail@plt+0x6098>
   17024:	str	r7, [sp, #24]
   17028:	ldrb	r4, [r4]
   1702c:	strb	r7, [sp, #28]
   17030:	strb	r7, [sp, #16]
   17034:	str	r4, [sp, #32]
   17038:	cmp	r4, #0
   1703c:	beq	16f14 <__assert_fail@plt+0x5df0>
   17040:	ldr	r4, [sp, #20]
   17044:	ldr	r5, [sp, #76]	; 0x4c
   17048:	ldr	r3, [sp, #24]
   1704c:	ldr	r2, [sp, #80]	; 0x50
   17050:	add	r4, r4, r3
   17054:	add	r5, r5, r2
   17058:	strb	r6, [sp, #16]
   1705c:	strb	r6, [sp, #72]	; 0x48
   17060:	str	r4, [sp, #20]
   17064:	str	r5, [sp, #76]	; 0x4c
   17068:	ldrb	r3, [sp, #60]	; 0x3c
   1706c:	cmp	r3, #0
   17070:	beq	16fb4 <__assert_fail@plt+0x5e90>
   17074:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   17078:	mov	r1, r0
   1707c:	mov	r0, r5
   17080:	bl	19e20 <__assert_fail@plt+0x8cfc>
   17084:	add	r3, sp, #64	; 0x40
   17088:	mov	r1, r5
   1708c:	mov	r2, r0
   17090:	add	r0, sp, #88	; 0x58
   17094:	bl	1abdc <__assert_fail@plt+0x9ab8>
   17098:	cmn	r0, #1
   1709c:	str	r0, [sp, #80]	; 0x50
   170a0:	strbeq	r6, [sp, #84]	; 0x54
   170a4:	streq	r7, [sp, #80]	; 0x50
   170a8:	strbeq	r7, [sp, #72]	; 0x48
   170ac:	beq	16fec <__assert_fail@plt+0x5ec8>
   170b0:	cmn	r0, #2
   170b4:	beq	1726c <__assert_fail@plt+0x6148>
   170b8:	cmp	r0, #0
   170bc:	beq	17284 <__assert_fail@plt+0x6160>
   170c0:	ldr	r4, [sp, #88]	; 0x58
   170c4:	add	r0, sp, #64	; 0x40
   170c8:	strb	r7, [sp, #84]	; 0x54
   170cc:	bl	10ef0 <mbsinit@plt>
   170d0:	strb	r7, [sp, #72]	; 0x48
   170d4:	cmp	r0, #0
   170d8:	strbne	r6, [sp, #60]	; 0x3c
   170dc:	cmp	r4, #0
   170e0:	bne	16fec <__assert_fail@plt+0x5ec8>
   170e4:	ldrb	r3, [sp, #16]
   170e8:	cmp	r3, #0
   170ec:	bne	1737c <__assert_fail@plt+0x6258>
   170f0:	ldrb	r3, [sp, #4]
   170f4:	ldr	r4, [sp, #20]
   170f8:	cmp	r3, #0
   170fc:	bne	17314 <__assert_fail@plt+0x61f0>
   17100:	ldrb	r3, [r4]
   17104:	and	r2, r3, #31
   17108:	lsr	r3, r3, #5
   1710c:	ldr	r3, [r8, r3, lsl #2]
   17110:	lsr	r3, r3, r2
   17114:	tst	r3, #1
   17118:	beq	172fc <__assert_fail@plt+0x61d8>
   1711c:	mov	r3, #1
   17120:	str	r3, [sp, #24]
   17124:	ldrb	r4, [r4]
   17128:	strb	r3, [sp, #28]
   1712c:	strb	r3, [sp, #16]
   17130:	str	r4, [sp, #32]
   17134:	cmp	r4, #0
   17138:	beq	17158 <__assert_fail@plt+0x6034>
   1713c:	ldrb	r3, [sp, #28]
   17140:	cmp	r3, #0
   17144:	beq	17158 <__assert_fail@plt+0x6034>
   17148:	mov	r0, r4
   1714c:	bl	11034 <iswalnum@plt>
   17150:	cmp	r0, #0
   17154:	bne	17160 <__assert_fail@plt+0x603c>
   17158:	cmp	fp, #0
   1715c:	bne	16de4 <__assert_fail@plt+0x5cc0>
   17160:	str	r9, [sp, #20]
   17164:	strb	r6, [sp, #4]
   17168:	str	r6, [sp, #8]
   1716c:	str	r6, [sp, #12]
   17170:	strb	r6, [sp, #16]
   17174:	ldrb	r3, [r9]
   17178:	and	r2, r3, #31
   1717c:	lsr	r3, r3, #5
   17180:	ldr	r3, [r8, r3, lsl #2]
   17184:	lsr	r3, r3, r2
   17188:	tst	r3, #1
   1718c:	beq	17390 <__assert_fail@plt+0x626c>
   17190:	mov	r3, #1
   17194:	str	r3, [sp, #24]
   17198:	ldrb	r4, [r9]
   1719c:	strb	r3, [sp, #28]
   171a0:	strb	r3, [sp, #16]
   171a4:	str	r4, [sp, #32]
   171a8:	cmp	r4, #0
   171ac:	beq	16de0 <__assert_fail@plt+0x5cbc>
   171b0:	ldr	r4, [sp, #24]
   171b4:	add	r4, r9, r4
   171b8:	b	16d44 <__assert_fail@plt+0x5c20>
   171bc:	add	r0, sp, #8
   171c0:	bl	10ef0 <mbsinit@plt>
   171c4:	cmp	r0, #0
   171c8:	beq	174a8 <__assert_fail@plt+0x6384>
   171cc:	strb	r7, [sp, #4]
   171d0:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   171d4:	mov	r1, r0
   171d8:	mov	r0, r4
   171dc:	bl	19e20 <__assert_fail@plt+0x8cfc>
   171e0:	add	r3, sp, #8
   171e4:	mov	r1, r4
   171e8:	mov	r2, r0
   171ec:	add	r0, sp, #32
   171f0:	bl	1abdc <__assert_fail@plt+0x9ab8>
   171f4:	cmn	r0, #1
   171f8:	str	r0, [sp, #24]
   171fc:	beq	1725c <__assert_fail@plt+0x6138>
   17200:	cmn	r0, #2
   17204:	beq	172b8 <__assert_fail@plt+0x6194>
   17208:	cmp	r0, #0
   1720c:	beq	172d0 <__assert_fail@plt+0x61ac>
   17210:	ldr	r4, [sp, #32]
   17214:	add	r0, sp, #8
   17218:	strb	r7, [sp, #28]
   1721c:	bl	10ef0 <mbsinit@plt>
   17220:	strb	r7, [sp, #16]
   17224:	cmp	r0, #0
   17228:	strbne	r6, [sp, #4]
   1722c:	b	17038 <__assert_fail@plt+0x5f14>
   17230:	ldrb	r3, [sp, #28]
   17234:	cmp	r3, #0
   17238:	ldrne	r4, [sp, #32]
   1723c:	beq	17040 <__assert_fail@plt+0x5f1c>
   17240:	b	17038 <__assert_fail@plt+0x5f14>
   17244:	add	r0, sp, #64	; 0x40
   17248:	bl	10ef0 <mbsinit@plt>
   1724c:	cmp	r0, #0
   17250:	beq	174a8 <__assert_fail@plt+0x6384>
   17254:	strb	r7, [sp, #60]	; 0x3c
   17258:	b	17074 <__assert_fail@plt+0x5f50>
   1725c:	str	r7, [sp, #24]
   17260:	strb	r6, [sp, #28]
   17264:	ldr	r4, [sp, #20]
   17268:	b	17044 <__assert_fail@plt+0x5f20>
   1726c:	ldr	r0, [sp, #76]	; 0x4c
   17270:	bl	11010 <strlen@plt>
   17274:	strb	r6, [sp, #84]	; 0x54
   17278:	strb	r7, [sp, #72]	; 0x48
   1727c:	str	r0, [sp, #80]	; 0x50
   17280:	b	16fec <__assert_fail@plt+0x5ec8>
   17284:	ldr	r3, [sp, #76]	; 0x4c
   17288:	str	r7, [sp, #80]	; 0x50
   1728c:	ldrb	r3, [r3]
   17290:	cmp	r3, #0
   17294:	bne	174bc <__assert_fail@plt+0x6398>
   17298:	ldr	r4, [sp, #88]	; 0x58
   1729c:	cmp	r4, #0
   172a0:	beq	170c4 <__assert_fail@plt+0x5fa0>
   172a4:	ldr	r3, [pc, #560]	; 174dc <__assert_fail@plt+0x63b8>
   172a8:	mov	r2, #179	; 0xb3
   172ac:	ldr	r1, [pc, #556]	; 174e0 <__assert_fail@plt+0x63bc>
   172b0:	ldr	r0, [pc, #556]	; 174e4 <__assert_fail@plt+0x63c0>
   172b4:	bl	11124 <__assert_fail@plt>
   172b8:	ldr	r4, [sp, #20]
   172bc:	mov	r0, r4
   172c0:	bl	11010 <strlen@plt>
   172c4:	strb	r6, [sp, #28]
   172c8:	str	r0, [sp, #24]
   172cc:	b	17044 <__assert_fail@plt+0x5f20>
   172d0:	ldr	r4, [sp, #20]
   172d4:	str	r7, [sp, #24]
   172d8:	ldrb	r3, [r4]
   172dc:	cmp	r3, #0
   172e0:	bne	174bc <__assert_fail@plt+0x6398>
   172e4:	ldr	r4, [sp, #32]
   172e8:	cmp	r4, #0
   172ec:	beq	17214 <__assert_fail@plt+0x60f0>
   172f0:	b	172a4 <__assert_fail@plt+0x6180>
   172f4:	mov	fp, #1
   172f8:	b	16f80 <__assert_fail@plt+0x5e5c>
   172fc:	add	r0, sp, #8
   17300:	bl	10ef0 <mbsinit@plt>
   17304:	cmp	r0, #0
   17308:	beq	174a8 <__assert_fail@plt+0x6384>
   1730c:	mov	r3, #1
   17310:	strb	r3, [sp, #4]
   17314:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   17318:	mov	r1, r0
   1731c:	mov	r0, r4
   17320:	bl	19e20 <__assert_fail@plt+0x8cfc>
   17324:	add	r3, sp, #8
   17328:	mov	r1, r4
   1732c:	mov	r2, r0
   17330:	add	r0, sp, #32
   17334:	bl	1abdc <__assert_fail@plt+0x9ab8>
   17338:	cmn	r0, #1
   1733c:	str	r0, [sp, #24]
   17340:	beq	17410 <__assert_fail@plt+0x62ec>
   17344:	cmn	r0, #2
   17348:	beq	17480 <__assert_fail@plt+0x635c>
   1734c:	cmp	r0, #0
   17350:	bne	1744c <__assert_fail@plt+0x6328>
   17354:	ldr	r3, [sp, #20]
   17358:	mov	r2, #1
   1735c:	str	r2, [sp, #24]
   17360:	ldrb	r3, [r3]
   17364:	cmp	r3, #0
   17368:	bne	174bc <__assert_fail@plt+0x6398>
   1736c:	ldr	r4, [sp, #32]
   17370:	cmp	r4, #0
   17374:	beq	17450 <__assert_fail@plt+0x632c>
   17378:	bl	16cf0 <__assert_fail@plt+0x5bcc>
   1737c:	ldrb	r3, [sp, #28]
   17380:	ldr	r4, [sp, #32]
   17384:	cmp	r3, #0
   17388:	beq	1713c <__assert_fail@plt+0x6018>
   1738c:	b	17134 <__assert_fail@plt+0x6010>
   17390:	add	r0, sp, #8
   17394:	bl	10ef0 <mbsinit@plt>
   17398:	cmp	r0, #0
   1739c:	beq	174a8 <__assert_fail@plt+0x6384>
   173a0:	mov	r4, #1
   173a4:	strb	r4, [sp, #4]
   173a8:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   173ac:	mov	r1, r0
   173b0:	mov	r0, r9
   173b4:	bl	19e20 <__assert_fail@plt+0x8cfc>
   173b8:	add	r3, sp, #8
   173bc:	mov	r1, r9
   173c0:	mov	r2, r0
   173c4:	add	r0, sp, #32
   173c8:	bl	1abdc <__assert_fail@plt+0x9ab8>
   173cc:	cmn	r0, #1
   173d0:	str	r0, [sp, #24]
   173d4:	streq	r4, [sp, #24]
   173d8:	beq	171b0 <__assert_fail@plt+0x608c>
   173dc:	cmn	r0, #2
   173e0:	beq	17470 <__assert_fail@plt+0x634c>
   173e4:	cmp	r0, #0
   173e8:	bne	17428 <__assert_fail@plt+0x6304>
   173ec:	ldr	r3, [sp, #20]
   173f0:	str	r4, [sp, #24]
   173f4:	ldrb	r3, [r3]
   173f8:	cmp	r3, #0
   173fc:	bne	174bc <__assert_fail@plt+0x6398>
   17400:	ldr	r4, [sp, #32]
   17404:	cmp	r4, #0
   17408:	beq	1742c <__assert_fail@plt+0x6308>
   1740c:	b	17378 <__assert_fail@plt+0x6254>
   17410:	mov	r3, #1
   17414:	strb	r6, [sp, #28]
   17418:	str	r3, [sp, #24]
   1741c:	strb	r3, [sp, #16]
   17420:	ldr	r4, [sp, #32]
   17424:	b	1713c <__assert_fail@plt+0x6018>
   17428:	ldr	r4, [sp, #32]
   1742c:	mov	r5, #1
   17430:	add	r0, sp, #8
   17434:	strb	r5, [sp, #28]
   17438:	bl	10ef0 <mbsinit@plt>
   1743c:	strb	r5, [sp, #16]
   17440:	cmp	r0, #0
   17444:	strbne	r6, [sp, #4]
   17448:	b	171a8 <__assert_fail@plt+0x6084>
   1744c:	ldr	r4, [sp, #32]
   17450:	mov	r5, #1
   17454:	add	r0, sp, #8
   17458:	strb	r5, [sp, #28]
   1745c:	bl	10ef0 <mbsinit@plt>
   17460:	strb	r5, [sp, #16]
   17464:	cmp	r0, #0
   17468:	strbne	r6, [sp, #4]
   1746c:	b	17134 <__assert_fail@plt+0x6010>
   17470:	ldr	r0, [sp, #20]
   17474:	bl	11010 <strlen@plt>
   17478:	str	r0, [sp, #24]
   1747c:	b	171b0 <__assert_fail@plt+0x608c>
   17480:	ldr	r0, [sp, #20]
   17484:	bl	11010 <strlen@plt>
   17488:	mov	r3, #1
   1748c:	strb	r6, [sp, #28]
   17490:	strb	r3, [sp, #16]
   17494:	ldr	r4, [sp, #32]
   17498:	str	r0, [sp, #24]
   1749c:	b	1713c <__assert_fail@plt+0x6018>
   174a0:	mov	fp, #1
   174a4:	b	16de4 <__assert_fail@plt+0x5cc0>
   174a8:	ldr	r3, [pc, #44]	; 174dc <__assert_fail@plt+0x63b8>
   174ac:	mov	r2, #150	; 0x96
   174b0:	ldr	r1, [pc, #40]	; 174e0 <__assert_fail@plt+0x63bc>
   174b4:	ldr	r0, [pc, #44]	; 174e8 <__assert_fail@plt+0x63c4>
   174b8:	bl	11124 <__assert_fail@plt>
   174bc:	ldr	r3, [pc, #24]	; 174dc <__assert_fail@plt+0x63b8>
   174c0:	mov	r2, #178	; 0xb2
   174c4:	ldr	r1, [pc, #20]	; 174e0 <__assert_fail@plt+0x63bc>
   174c8:	ldr	r0, [pc, #28]	; 174ec <__assert_fail@plt+0x63c8>
   174cc:	bl	11124 <__assert_fail@plt>
   174d0:	bl	10f20 <__stack_chk_fail@plt>
   174d4:	andeq	r0, r3, r8, lsl #30
   174d8:	andeq	r0, r2, r8, ror ip
   174dc:			; <UNDEFINED> instruction: 0x000207b8
   174e0:	andeq	r0, r2, ip, asr #15
   174e4:	ldrdeq	r0, [r2], -ip
   174e8:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   174ec:	andeq	r0, r2, r8, lsl #16
   174f0:	push	{r4, r5, r6, lr}
   174f4:	mov	r1, r0
   174f8:	mov	r4, r0
   174fc:	sub	sp, sp, #8
   17500:	mov	r2, #5
   17504:	mov	r0, #0
   17508:	bl	10f08 <dcgettext@plt>
   1750c:	cmp	r4, r0
   17510:	mov	r5, r0
   17514:	beq	17528 <__assert_fail@plt+0x6404>
   17518:	mov	r1, r4
   1751c:	bl	16d14 <__assert_fail@plt+0x5bf0>
   17520:	cmp	r0, #0
   17524:	beq	17534 <__assert_fail@plt+0x6410>
   17528:	mov	r0, r5
   1752c:	add	sp, sp, #8
   17530:	pop	{r4, r5, r6, pc}
   17534:	mov	r0, r5
   17538:	bl	11010 <strlen@plt>
   1753c:	mov	r6, r0
   17540:	mov	r0, r4
   17544:	bl	11010 <strlen@plt>
   17548:	add	r0, r6, r0
   1754c:	add	r0, r0, #4
   17550:	bl	1a8c0 <__assert_fail@plt+0x979c>
   17554:	str	r5, [sp]
   17558:	str	r4, [sp, #4]
   1755c:	ldr	r3, [pc, #28]	; 17580 <__assert_fail@plt+0x645c>
   17560:	mvn	r2, #0
   17564:	mov	r1, #1
   17568:	mov	r6, r0
   1756c:	bl	11040 <__sprintf_chk@plt>
   17570:	mov	r5, r6
   17574:	mov	r0, r5
   17578:	add	sp, sp, #8
   1757c:	pop	{r4, r5, r6, pc}
   17580:	andeq	r0, r2, r0, lsr #16
   17584:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17588:	mov	r2, #5
   1758c:	sub	sp, sp, #8
   17590:	mov	r6, r0
   17594:	mov	r5, r1
   17598:	mov	r1, r0
   1759c:	mov	r0, #0
   175a0:	bl	10f08 <dcgettext@plt>
   175a4:	mov	r8, r0
   175a8:	bl	1ad8c <__assert_fail@plt+0x9c68>
   175ac:	ldr	r1, [pc, #624]	; 17824 <__assert_fail@plt+0x6700>
   175b0:	mov	r9, r0
   175b4:	bl	1ac5c <__assert_fail@plt+0x9b38>
   175b8:	subs	r4, r0, #0
   175bc:	bne	176d4 <__assert_fail@plt+0x65b0>
   175c0:	subs	r9, r5, #0
   175c4:	movne	r7, r5
   175c8:	beq	17644 <__assert_fail@plt+0x6520>
   175cc:	mov	r1, r6
   175d0:	mov	r0, r8
   175d4:	bl	10e9c <strcmp@plt>
   175d8:	cmp	r0, #0
   175dc:	beq	17638 <__assert_fail@plt+0x6514>
   175e0:	mov	r1, r6
   175e4:	mov	r0, r8
   175e8:	bl	16d14 <__assert_fail@plt+0x5bf0>
   175ec:	subs	r6, r0, #0
   175f0:	bne	17620 <__assert_fail@plt+0x64fc>
   175f4:	cmp	r5, #0
   175f8:	beq	17650 <__assert_fail@plt+0x652c>
   175fc:	mov	r1, r5
   17600:	mov	r0, r8
   17604:	bl	16d14 <__assert_fail@plt+0x5bf0>
   17608:	cmp	r0, #0
   1760c:	beq	17650 <__assert_fail@plt+0x652c>
   17610:	cmp	r6, #0
   17614:	beq	17620 <__assert_fail@plt+0x64fc>
   17618:	mov	r0, r6
   1761c:	bl	10ecc <free@plt>
   17620:	cmp	r4, #0
   17624:	moveq	r7, r8
   17628:	beq	17638 <__assert_fail@plt+0x6514>
   1762c:	mov	r0, r4
   17630:	bl	10ecc <free@plt>
   17634:	mov	r7, r8
   17638:	mov	r0, r7
   1763c:	add	sp, sp, #8
   17640:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17644:	mov	r4, r5
   17648:	mov	r7, r6
   1764c:	b	175cc <__assert_fail@plt+0x64a8>
   17650:	cmp	r9, #0
   17654:	beq	1766c <__assert_fail@plt+0x6548>
   17658:	mov	r1, r9
   1765c:	mov	r0, r8
   17660:	bl	16d14 <__assert_fail@plt+0x5bf0>
   17664:	cmp	r0, #0
   17668:	bne	17610 <__assert_fail@plt+0x64ec>
   1766c:	mov	r0, r8
   17670:	bl	11010 <strlen@plt>
   17674:	mov	r5, r0
   17678:	mov	r0, r7
   1767c:	bl	11010 <strlen@plt>
   17680:	add	r0, r5, r0
   17684:	add	r0, r0, #4
   17688:	bl	1a8c0 <__assert_fail@plt+0x979c>
   1768c:	str	r7, [sp, #4]
   17690:	str	r8, [sp]
   17694:	ldr	r3, [pc, #396]	; 17828 <__assert_fail@plt+0x6704>
   17698:	mvn	r2, #0
   1769c:	mov	r1, #1
   176a0:	mov	r5, r0
   176a4:	bl	11040 <__sprintf_chk@plt>
   176a8:	cmp	r6, #0
   176ac:	beq	176b8 <__assert_fail@plt+0x6594>
   176b0:	mov	r0, r6
   176b4:	bl	10ecc <free@plt>
   176b8:	cmp	r4, #0
   176bc:	moveq	r7, r5
   176c0:	beq	17638 <__assert_fail@plt+0x6514>
   176c4:	mov	r0, r4
   176c8:	bl	10ecc <free@plt>
   176cc:	mov	r7, r5
   176d0:	b	17638 <__assert_fail@plt+0x6514>
   176d4:	mov	r2, r9
   176d8:	ldr	r1, [pc, #324]	; 17824 <__assert_fail@plt+0x6700>
   176dc:	mov	r0, r5
   176e0:	bl	1abb0 <__assert_fail@plt+0x9a8c>
   176e4:	mov	r7, r0
   176e8:	mov	r0, r9
   176ec:	bl	11010 <strlen@plt>
   176f0:	mov	r4, r0
   176f4:	add	r0, r0, #11
   176f8:	bl	1a8c0 <__assert_fail@plt+0x979c>
   176fc:	mov	r2, r4
   17700:	mov	r1, r9
   17704:	mov	sl, r0
   17708:	bl	10ee4 <memcpy@plt>
   1770c:	ldr	r3, [pc, #280]	; 1782c <__assert_fail@plt+0x6708>
   17710:	add	ip, sl, r4
   17714:	mov	r2, sl
   17718:	ldm	r3!, {r0, r1}
   1771c:	ldrh	lr, [r3]
   17720:	ldrb	r3, [r3, #2]
   17724:	str	r0, [sl, r4]
   17728:	str	r1, [ip, #4]
   1772c:	strh	lr, [ip, #8]
   17730:	ldr	r1, [pc, #236]	; 17824 <__assert_fail@plt+0x6700>
   17734:	strb	r3, [ip, #10]
   17738:	mov	r0, r5
   1773c:	bl	1abb0 <__assert_fail@plt+0x9a8c>
   17740:	mov	r4, r0
   17744:	mov	r0, sl
   17748:	bl	10ecc <free@plt>
   1774c:	cmp	r4, #0
   17750:	beq	177f0 <__assert_fail@plt+0x66cc>
   17754:	mov	r1, #63	; 0x3f
   17758:	mov	r0, r4
   1775c:	bl	1101c <strchr@plt>
   17760:	cmp	r0, #0
   17764:	beq	177b4 <__assert_fail@plt+0x6690>
   17768:	mov	r0, r4
   1776c:	bl	10ecc <free@plt>
   17770:	cmp	r7, #0
   17774:	beq	177f8 <__assert_fail@plt+0x66d4>
   17778:	mov	r1, r6
   1777c:	mov	r0, r8
   17780:	bl	10e9c <strcmp@plt>
   17784:	cmp	r0, #0
   17788:	beq	17638 <__assert_fail@plt+0x6514>
   1778c:	mov	r9, #0
   17790:	mov	r4, r9
   17794:	mov	r1, r6
   17798:	mov	r0, r8
   1779c:	bl	16d14 <__assert_fail@plt+0x5bf0>
   177a0:	cmp	r0, #0
   177a4:	bne	1781c <__assert_fail@plt+0x66f8>
   177a8:	mov	r5, r7
   177ac:	mov	r6, r7
   177b0:	b	175f4 <__assert_fail@plt+0x64d0>
   177b4:	cmp	r7, #0
   177b8:	beq	1780c <__assert_fail@plt+0x66e8>
   177bc:	mov	r1, r6
   177c0:	mov	r0, r8
   177c4:	bl	10e9c <strcmp@plt>
   177c8:	cmp	r0, #0
   177cc:	movne	r9, r4
   177d0:	bne	17794 <__assert_fail@plt+0x6670>
   177d4:	cmp	r7, r4
   177d8:	beq	17638 <__assert_fail@plt+0x6514>
   177dc:	mov	r0, r4
   177e0:	bl	10ecc <free@plt>
   177e4:	mov	r0, r7
   177e8:	add	sp, sp, #8
   177ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177f0:	cmp	r7, #0
   177f4:	bne	17778 <__assert_fail@plt+0x6654>
   177f8:	mov	r9, #0
   177fc:	mov	r5, r9
   17800:	mov	r4, r9
   17804:	mov	r7, r6
   17808:	b	175cc <__assert_fail@plt+0x64a8>
   1780c:	mov	r5, r7
   17810:	mov	r9, r4
   17814:	mov	r7, r4
   17818:	b	175cc <__assert_fail@plt+0x64a8>
   1781c:	mov	r6, r7
   17820:	b	17618 <__assert_fail@plt+0x64f4>
   17824:	andeq	r0, r2, r8, lsr #16
   17828:	andeq	r0, r2, r0, lsr #16
   1782c:	andeq	r0, r2, r0, lsr r8
   17830:	push	{r4, lr}
   17834:	mov	r2, #48	; 0x30
   17838:	mov	r4, r1
   1783c:	mov	r1, #0
   17840:	bl	11058 <memset@plt>
   17844:	cmp	r4, #10
   17848:	beq	17854 <__assert_fail@plt+0x6730>
   1784c:	str	r4, [r0]
   17850:	pop	{r4, pc}
   17854:	bl	11118 <abort@plt>
   17858:	push	{r4, r5, r6, lr}
   1785c:	mov	r2, #5
   17860:	mov	r5, r0
   17864:	mov	r6, r1
   17868:	mov	r1, r0
   1786c:	mov	r0, #0
   17870:	bl	10f08 <dcgettext@plt>
   17874:	cmp	r5, r0
   17878:	mov	r4, r0
   1787c:	beq	17888 <__assert_fail@plt+0x6764>
   17880:	mov	r0, r4
   17884:	pop	{r4, r5, r6, pc}
   17888:	bl	1ad8c <__assert_fail@plt+0x9c68>
   1788c:	ldrb	r3, [r0]
   17890:	bic	r3, r3, #32
   17894:	cmp	r3, #85	; 0x55
   17898:	bne	178f8 <__assert_fail@plt+0x67d4>
   1789c:	ldrb	r3, [r0, #1]
   178a0:	bic	r3, r3, #32
   178a4:	cmp	r3, #84	; 0x54
   178a8:	bne	17970 <__assert_fail@plt+0x684c>
   178ac:	ldrb	r3, [r0, #2]
   178b0:	bic	r3, r3, #32
   178b4:	cmp	r3, #70	; 0x46
   178b8:	bne	17970 <__assert_fail@plt+0x684c>
   178bc:	ldrb	r3, [r0, #3]
   178c0:	cmp	r3, #45	; 0x2d
   178c4:	bne	17970 <__assert_fail@plt+0x684c>
   178c8:	ldrb	r3, [r0, #4]
   178cc:	cmp	r3, #56	; 0x38
   178d0:	bne	17970 <__assert_fail@plt+0x684c>
   178d4:	ldrb	r3, [r0, #5]
   178d8:	cmp	r3, #0
   178dc:	bne	17970 <__assert_fail@plt+0x684c>
   178e0:	ldrb	r2, [r4]
   178e4:	ldr	r3, [pc, #156]	; 17988 <__assert_fail@plt+0x6864>
   178e8:	ldr	r4, [pc, #156]	; 1798c <__assert_fail@plt+0x6868>
   178ec:	cmp	r2, #96	; 0x60
   178f0:	movne	r4, r3
   178f4:	b	17880 <__assert_fail@plt+0x675c>
   178f8:	cmp	r3, #71	; 0x47
   178fc:	bne	17970 <__assert_fail@plt+0x684c>
   17900:	ldrb	r3, [r0, #1]
   17904:	bic	r3, r3, #32
   17908:	cmp	r3, #66	; 0x42
   1790c:	bne	17970 <__assert_fail@plt+0x684c>
   17910:	ldrb	r3, [r0, #2]
   17914:	cmp	r3, #49	; 0x31
   17918:	bne	17970 <__assert_fail@plt+0x684c>
   1791c:	ldrb	r3, [r0, #3]
   17920:	cmp	r3, #56	; 0x38
   17924:	bne	17970 <__assert_fail@plt+0x684c>
   17928:	ldrb	r3, [r0, #4]
   1792c:	cmp	r3, #48	; 0x30
   17930:	bne	17970 <__assert_fail@plt+0x684c>
   17934:	ldrb	r3, [r0, #5]
   17938:	cmp	r3, #51	; 0x33
   1793c:	bne	17970 <__assert_fail@plt+0x684c>
   17940:	ldrb	r3, [r0, #6]
   17944:	cmp	r3, #48	; 0x30
   17948:	bne	17970 <__assert_fail@plt+0x684c>
   1794c:	ldrb	r3, [r0, #7]
   17950:	cmp	r3, #0
   17954:	bne	17970 <__assert_fail@plt+0x684c>
   17958:	ldrb	r2, [r4]
   1795c:	ldr	r3, [pc, #44]	; 17990 <__assert_fail@plt+0x686c>
   17960:	ldr	r4, [pc, #44]	; 17994 <__assert_fail@plt+0x6870>
   17964:	cmp	r2, #96	; 0x60
   17968:	movne	r4, r3
   1796c:	b	17880 <__assert_fail@plt+0x675c>
   17970:	ldr	r3, [pc, #32]	; 17998 <__assert_fail@plt+0x6874>
   17974:	ldr	r4, [pc, #32]	; 1799c <__assert_fail@plt+0x6878>
   17978:	cmp	r6, #9
   1797c:	movne	r4, r3
   17980:	mov	r0, r4
   17984:	pop	{r4, r5, r6, pc}
   17988:	muleq	r2, r4, r8
   1798c:	andeq	r0, r2, r0, lsr #17
   17990:	muleq	r2, r8, r8
   17994:	muleq	r2, ip, r8
   17998:	andeq	r0, r2, r4, lsr #17
   1799c:	muleq	r2, r0, r8
   179a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179a4:	sub	sp, sp, #124	; 0x7c
   179a8:	ldr	ip, [pc, #3576]	; 187a8 <__assert_fail@plt+0x7684>
   179ac:	str	r3, [sp, #24]
   179b0:	ldr	r3, [sp, #168]	; 0xa8
   179b4:	ldr	ip, [ip]
   179b8:	str	r3, [sp, #56]	; 0x38
   179bc:	ldr	r3, [sp, #172]	; 0xac
   179c0:	ldr	r8, [sp, #160]	; 0xa0
   179c4:	str	r3, [sp, #80]	; 0x50
   179c8:	ldr	r3, [sp, #176]	; 0xb0
   179cc:	mov	fp, r0
   179d0:	str	r3, [sp, #76]	; 0x4c
   179d4:	mov	sl, r1
   179d8:	str	r2, [sp, #36]	; 0x24
   179dc:	str	ip, [sp, #116]	; 0x74
   179e0:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   179e4:	ldr	r3, [sp, #164]	; 0xa4
   179e8:	ands	r4, r3, #2
   179ec:	movne	r3, #1
   179f0:	moveq	r3, #0
   179f4:	str	r3, [sp, #32]
   179f8:	str	r0, [sp, #64]	; 0x40
   179fc:	cmp	r8, #10
   17a00:	ldrls	pc, [pc, r8, lsl #2]
   17a04:	b	191b4 <__assert_fail@plt+0x8090>
   17a08:	strdeq	r7, [r1], -ip
   17a0c:	muleq	r1, r4, lr
   17a10:	muleq	r1, r4, r4
   17a14:			; <UNDEFINED> instruction: 0x00017eb4
   17a18:	andeq	r7, r1, r8, ror #26
   17a1c:			; <UNDEFINED> instruction: 0x00017db0
   17a20:	andeq	r7, r1, ip, lsr #28
   17a24:	andeq	r7, r1, r4, ror #28
   17a28:	andeq	r7, r1, r4, lsr sl
   17a2c:	andeq	r7, r1, r4, lsr sl
   17a30:	andeq	r7, r1, r4, lsr sl
   17a34:	cmp	r8, #10
   17a38:	beq	17a5c <__assert_fail@plt+0x6938>
   17a3c:	mov	r1, r8
   17a40:	ldr	r0, [pc, #3428]	; 187ac <__assert_fail@plt+0x7688>
   17a44:	bl	17858 <__assert_fail@plt+0x6734>
   17a48:	mov	r1, r8
   17a4c:	str	r0, [sp, #80]	; 0x50
   17a50:	ldr	r0, [pc, #3420]	; 187b4 <__assert_fail@plt+0x7690>
   17a54:	bl	17858 <__assert_fail@plt+0x6734>
   17a58:	str	r0, [sp, #76]	; 0x4c
   17a5c:	cmp	r4, #0
   17a60:	movne	r4, #0
   17a64:	beq	18e74 <__assert_fail@plt+0x7d50>
   17a68:	ldr	r7, [sp, #76]	; 0x4c
   17a6c:	mov	r5, #0
   17a70:	mov	r6, #1
   17a74:	mov	r0, r7
   17a78:	str	r6, [sp, #40]	; 0x28
   17a7c:	str	r5, [sp, #68]	; 0x44
   17a80:	bl	11010 <strlen@plt>
   17a84:	str	r6, [sp, #28]
   17a88:	str	r5, [sp, #44]	; 0x2c
   17a8c:	str	r5, [sp, #72]	; 0x48
   17a90:	str	r7, [sp, #60]	; 0x3c
   17a94:	str	r0, [sp, #52]	; 0x34
   17a98:	str	r8, [sp, #160]	; 0xa0
   17a9c:	mov	r8, fp
   17aa0:	ldr	fp, [sp, #160]	; 0xa0
   17aa4:	mov	r9, #0
   17aa8:	ldr	r3, [sp, #24]
   17aac:	cmn	r3, #1
   17ab0:	beq	18018 <__assert_fail@plt+0x6ef4>
   17ab4:	ldr	r3, [sp, #24]
   17ab8:	subs	r6, r3, r9
   17abc:	movne	r6, #1
   17ac0:	cmp	r6, #0
   17ac4:	beq	18030 <__assert_fail@plt+0x6f0c>
   17ac8:	ldr	r7, [sp, #28]
   17acc:	ldr	r0, [sp, #36]	; 0x24
   17ad0:	cmp	fp, #2
   17ad4:	moveq	r7, #0
   17ad8:	andne	r7, r7, #1
   17adc:	add	r3, r0, r9
   17ae0:	cmp	r7, #0
   17ae4:	str	r3, [sp, #48]	; 0x30
   17ae8:	beq	184d4 <__assert_fail@plt+0x73b0>
   17aec:	ldr	r2, [sp, #52]	; 0x34
   17af0:	cmp	r2, #0
   17af4:	beq	187b8 <__assert_fail@plt+0x7694>
   17af8:	ldr	r1, [sp, #24]
   17afc:	cmp	r2, #1
   17b00:	mov	r3, r2
   17b04:	movls	r3, #0
   17b08:	movhi	r3, #1
   17b0c:	cmn	r1, #1
   17b10:	movne	r3, #0
   17b14:	cmp	r3, #0
   17b18:	add	r5, r9, r2
   17b1c:	beq	17b28 <__assert_fail@plt+0x6a04>
   17b20:	bl	11010 <strlen@plt>
   17b24:	str	r0, [sp, #24]
   17b28:	ldr	r3, [sp, #24]
   17b2c:	cmp	r5, r3
   17b30:	bhi	187b8 <__assert_fail@plt+0x7694>
   17b34:	ldr	r2, [sp, #52]	; 0x34
   17b38:	ldr	r1, [sp, #60]	; 0x3c
   17b3c:	ldr	r0, [sp, #48]	; 0x30
   17b40:	bl	10efc <memcmp@plt>
   17b44:	cmp	r0, #0
   17b48:	bne	187b8 <__assert_fail@plt+0x7694>
   17b4c:	ldr	r3, [sp, #32]
   17b50:	cmp	r3, #0
   17b54:	bne	19074 <__assert_fail@plt+0x7f50>
   17b58:	ldr	r3, [sp, #48]	; 0x30
   17b5c:	ldrb	r5, [r3]
   17b60:	cmp	r5, #126	; 0x7e
   17b64:	ldrls	pc, [pc, r5, lsl #2]
   17b68:	b	18438 <__assert_fail@plt+0x7314>
   17b6c:	andeq	r8, r1, r4, lsr #6
   17b70:	andeq	r8, r1, r8, lsr r4
   17b74:	andeq	r8, r1, r8, lsr r4
   17b78:	andeq	r8, r1, r8, lsr r4
   17b7c:	andeq	r8, r1, r8, lsr r4
   17b80:	andeq	r8, r1, r8, lsr r4
   17b84:	andeq	r8, r1, r8, lsr r4
   17b88:	strdeq	r8, [r1], -r0
   17b8c:	andeq	r8, r1, r0, ror #7
   17b90:	andeq	r8, r1, r0, ror #5
   17b94:	andeq	r8, r1, r8, lsr #5
   17b98:	andeq	r8, r1, r0, lsl #6
   17b9c:	andeq	r8, r1, r8, ror #5
   17ba0:	andeq	r8, r1, r8, lsl r2
   17ba4:	andeq	r8, r1, r8, lsr r4
   17ba8:	andeq	r8, r1, r8, lsr r4
   17bac:	andeq	r8, r1, r8, lsr r4
   17bb0:	andeq	r8, r1, r8, lsr r4
   17bb4:	andeq	r8, r1, r8, lsr r4
   17bb8:	andeq	r8, r1, r8, lsr r4
   17bbc:	andeq	r8, r1, r8, lsr r4
   17bc0:	andeq	r8, r1, r8, lsr r4
   17bc4:	andeq	r8, r1, r8, lsr r4
   17bc8:	andeq	r8, r1, r8, lsr r4
   17bcc:	andeq	r8, r1, r8, lsr r4
   17bd0:	andeq	r8, r1, r8, lsr r4
   17bd4:	andeq	r8, r1, r8, lsr r4
   17bd8:	andeq	r8, r1, r8, lsr r4
   17bdc:	andeq	r8, r1, r8, lsr r4
   17be0:	andeq	r8, r1, r8, lsr r4
   17be4:	andeq	r8, r1, r8, lsr r4
   17be8:	andeq	r8, r1, r8, lsr r4
   17bec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17bf0:	andeq	r8, r1, ip, lsl #6
   17bf4:	andeq	r8, r1, ip, lsl #6
   17bf8:	andeq	r8, r1, r0, lsl r4
   17bfc:	andeq	r8, r1, ip, lsl #6
   17c00:	andeq	r8, r1, ip, lsr #8
   17c04:	andeq	r8, r1, ip, lsl #6
   17c08:	andeq	r8, r1, ip, asr #2
   17c0c:	andeq	r8, r1, ip, lsl #6
   17c10:	andeq	r8, r1, ip, lsl #6
   17c14:	andeq	r8, r1, ip, lsl #6
   17c18:	andeq	r8, r1, ip, lsr #8
   17c1c:	andeq	r8, r1, ip, lsr #8
   17c20:	andeq	r8, r1, ip, lsr #8
   17c24:	andeq	r8, r1, ip, lsr #8
   17c28:	andeq	r8, r1, ip, lsr #8
   17c2c:	andeq	r8, r1, ip, lsr #8
   17c30:	andeq	r8, r1, ip, lsr #8
   17c34:	andeq	r8, r1, ip, lsr #8
   17c38:	andeq	r8, r1, ip, lsr #8
   17c3c:	andeq	r8, r1, ip, lsr #8
   17c40:	andeq	r8, r1, ip, lsr #8
   17c44:	andeq	r8, r1, ip, lsr #8
   17c48:	andeq	r8, r1, ip, lsr #8
   17c4c:	andeq	r8, r1, ip, lsr #8
   17c50:	andeq	r8, r1, ip, lsr #8
   17c54:	andeq	r8, r1, ip, lsr #8
   17c58:	andeq	r8, r1, ip, lsl #6
   17c5c:	andeq	r8, r1, ip, lsl #6
   17c60:	andeq	r8, r1, ip, lsl #6
   17c64:	andeq	r8, r1, ip, lsl #6
   17c68:	andeq	r8, r1, r0, lsr #2
   17c6c:	andeq	r8, r1, r8, lsr r4
   17c70:	andeq	r8, r1, ip, lsr #8
   17c74:	andeq	r8, r1, ip, lsr #8
   17c78:	andeq	r8, r1, ip, lsr #8
   17c7c:	andeq	r8, r1, ip, lsr #8
   17c80:	andeq	r8, r1, ip, lsr #8
   17c84:	andeq	r8, r1, ip, lsr #8
   17c88:	andeq	r8, r1, ip, lsr #8
   17c8c:	andeq	r8, r1, ip, lsr #8
   17c90:	andeq	r8, r1, ip, lsr #8
   17c94:	andeq	r8, r1, ip, lsr #8
   17c98:	andeq	r8, r1, ip, lsr #8
   17c9c:	andeq	r8, r1, ip, lsr #8
   17ca0:	andeq	r8, r1, ip, lsr #8
   17ca4:	andeq	r8, r1, ip, lsr #8
   17ca8:	andeq	r8, r1, ip, lsr #8
   17cac:	andeq	r8, r1, ip, lsr #8
   17cb0:	andeq	r8, r1, ip, lsr #8
   17cb4:	andeq	r8, r1, ip, lsr #8
   17cb8:	andeq	r8, r1, ip, lsr #8
   17cbc:	andeq	r8, r1, ip, lsr #8
   17cc0:	andeq	r8, r1, ip, lsr #8
   17cc4:	andeq	r8, r1, ip, lsr #8
   17cc8:	andeq	r8, r1, ip, lsr #8
   17ccc:	andeq	r8, r1, ip, lsr #8
   17cd0:	andeq	r8, r1, ip, lsr #8
   17cd4:	andeq	r8, r1, ip, lsr #8
   17cd8:	andeq	r8, r1, ip, lsl #6
   17cdc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17ce0:	andeq	r8, r1, ip, lsr #8
   17ce4:	andeq	r8, r1, ip, lsl #6
   17ce8:	andeq	r8, r1, ip, lsr #8
   17cec:	andeq	r8, r1, ip, lsl #6
   17cf0:	andeq	r8, r1, ip, lsr #8
   17cf4:	andeq	r8, r1, ip, lsr #8
   17cf8:	andeq	r8, r1, ip, lsr #8
   17cfc:	andeq	r8, r1, ip, lsr #8
   17d00:	andeq	r8, r1, ip, lsr #8
   17d04:	andeq	r8, r1, ip, lsr #8
   17d08:	andeq	r8, r1, ip, lsr #8
   17d0c:	andeq	r8, r1, ip, lsr #8
   17d10:	andeq	r8, r1, ip, lsr #8
   17d14:	andeq	r8, r1, ip, lsr #8
   17d18:	andeq	r8, r1, ip, lsr #8
   17d1c:	andeq	r8, r1, ip, lsr #8
   17d20:	andeq	r8, r1, ip, lsr #8
   17d24:	andeq	r8, r1, ip, lsr #8
   17d28:	andeq	r8, r1, ip, lsr #8
   17d2c:	andeq	r8, r1, ip, lsr #8
   17d30:	andeq	r8, r1, ip, lsr #8
   17d34:	andeq	r8, r1, ip, lsr #8
   17d38:	andeq	r8, r1, ip, lsr #8
   17d3c:	andeq	r8, r1, ip, lsr #8
   17d40:	andeq	r8, r1, ip, lsr #8
   17d44:	andeq	r8, r1, ip, lsr #8
   17d48:	andeq	r8, r1, ip, lsr #8
   17d4c:	andeq	r8, r1, ip, lsr #8
   17d50:	andeq	r8, r1, ip, lsr #8
   17d54:	andeq	r8, r1, ip, lsr #8
   17d58:	strdeq	r7, [r1], -r0
   17d5c:	andeq	r8, r1, ip, lsl #6
   17d60:	strdeq	r7, [r1], -r0
   17d64:	andeq	r8, r1, r0, lsl r4
   17d68:	cmp	r4, #0
   17d6c:	moveq	r3, #1
   17d70:	streq	r3, [sp, #28]
   17d74:	beq	184a0 <__assert_fail@plt+0x737c>
   17d78:	mov	r3, #0
   17d7c:	mov	r4, r3
   17d80:	mov	r2, #1
   17d84:	str	r2, [sp, #40]	; 0x28
   17d88:	str	r3, [sp, #68]	; 0x44
   17d8c:	str	r2, [sp, #32]
   17d90:	str	r2, [sp, #52]	; 0x34
   17d94:	ldr	r3, [pc, #2584]	; 187b4 <__assert_fail@plt+0x7690>
   17d98:	str	r4, [sp, #44]	; 0x2c
   17d9c:	str	r4, [sp, #72]	; 0x48
   17da0:	str	r4, [sp, #28]
   17da4:	str	r3, [sp, #60]	; 0x3c
   17da8:	mov	r8, #2
   17dac:	b	17a98 <__assert_fail@plt+0x6974>
   17db0:	cmp	r4, #0
   17db4:	bne	19040 <__assert_fail@plt+0x7f1c>
   17db8:	cmp	sl, #0
   17dbc:	beq	18e00 <__assert_fail@plt+0x7cdc>
   17dc0:	mov	r3, #34	; 0x22
   17dc4:	strb	r3, [fp]
   17dc8:	ldr	r3, [pc, #2528]	; 187b0 <__assert_fail@plt+0x768c>
   17dcc:	mov	r1, r4
   17dd0:	mov	r2, #1
   17dd4:	str	r4, [sp, #68]	; 0x44
   17dd8:	str	r2, [sp, #40]	; 0x28
   17ddc:	mov	r4, r2
   17de0:	str	r1, [sp, #44]	; 0x2c
   17de4:	str	r1, [sp, #72]	; 0x48
   17de8:	str	r1, [sp, #32]
   17dec:	str	r2, [sp, #28]
   17df0:	str	r2, [sp, #52]	; 0x34
   17df4:	str	r3, [sp, #60]	; 0x3c
   17df8:	b	17a98 <__assert_fail@plt+0x6974>
   17dfc:	mov	r3, #0
   17e00:	str	r3, [sp, #68]	; 0x44
   17e04:	str	r3, [sp, #44]	; 0x2c
   17e08:	str	r3, [sp, #32]
   17e0c:	str	r3, [sp, #28]
   17e10:	str	r3, [sp, #60]	; 0x3c
   17e14:	mov	r3, #1
   17e18:	str	r8, [sp, #72]	; 0x48
   17e1c:	str	r8, [sp, #52]	; 0x34
   17e20:	mov	r4, r8
   17e24:	str	r3, [sp, #40]	; 0x28
   17e28:	b	17a98 <__assert_fail@plt+0x6974>
   17e2c:	mov	r3, #1
   17e30:	str	r3, [sp, #40]	; 0x28
   17e34:	str	r3, [sp, #32]
   17e38:	str	r3, [sp, #28]
   17e3c:	str	r3, [sp, #52]	; 0x34
   17e40:	ldr	r3, [pc, #2408]	; 187b0 <__assert_fail@plt+0x768c>
   17e44:	mov	r2, #0
   17e48:	mov	r4, r2
   17e4c:	str	r2, [sp, #68]	; 0x44
   17e50:	str	r2, [sp, #44]	; 0x2c
   17e54:	str	r2, [sp, #72]	; 0x48
   17e58:	str	r3, [sp, #60]	; 0x3c
   17e5c:	mov	r8, #5
   17e60:	b	17a98 <__assert_fail@plt+0x6974>
   17e64:	mov	r3, #0
   17e68:	mov	r2, #1
   17e6c:	str	r2, [sp, #40]	; 0x28
   17e70:	mov	r4, r3
   17e74:	str	r3, [sp, #68]	; 0x44
   17e78:	str	r2, [sp, #28]
   17e7c:	str	r3, [sp, #44]	; 0x2c
   17e80:	str	r3, [sp, #72]	; 0x48
   17e84:	str	r3, [sp, #32]
   17e88:	str	r3, [sp, #52]	; 0x34
   17e8c:	str	r3, [sp, #60]	; 0x3c
   17e90:	b	17a98 <__assert_fail@plt+0x6974>
   17e94:	mov	r2, #1
   17e98:	mov	r3, #0
   17e9c:	str	r2, [sp, #40]	; 0x28
   17ea0:	mov	r4, r3
   17ea4:	str	r3, [sp, #68]	; 0x44
   17ea8:	str	r8, [sp, #52]	; 0x34
   17eac:	str	r2, [sp, #32]
   17eb0:	b	17d94 <__assert_fail@plt+0x6c70>
   17eb4:	mov	r3, #1
   17eb8:	str	r3, [sp, #40]	; 0x28
   17ebc:	str	r3, [sp, #32]
   17ec0:	str	r3, [sp, #28]
   17ec4:	str	r3, [sp, #52]	; 0x34
   17ec8:	ldr	r3, [pc, #2276]	; 187b4 <__assert_fail@plt+0x7690>
   17ecc:	mov	r2, #0
   17ed0:	mov	r4, r2
   17ed4:	str	r2, [sp, #68]	; 0x44
   17ed8:	str	r2, [sp, #44]	; 0x2c
   17edc:	str	r2, [sp, #72]	; 0x48
   17ee0:	str	r3, [sp, #60]	; 0x3c
   17ee4:	mov	r8, #2
   17ee8:	b	17a98 <__assert_fail@plt+0x6974>
   17eec:	mov	r7, #0
   17ef0:	ldr	r3, [sp, #24]
   17ef4:	cmn	r3, #1
   17ef8:	beq	18a34 <__assert_fail@plt+0x7910>
   17efc:	ldr	r3, [sp, #24]
   17f00:	subs	r3, r3, #1
   17f04:	movne	r3, #1
   17f08:	cmp	r3, #0
   17f0c:	sub	r2, fp, #2
   17f10:	clz	r2, r2
   17f14:	lsr	r2, r2, #5
   17f18:	bne	18114 <__assert_fail@plt+0x6ff0>
   17f1c:	cmp	r9, #0
   17f20:	bne	18114 <__assert_fail@plt+0x6ff0>
   17f24:	ldr	r3, [sp, #32]
   17f28:	tst	r3, r2
   17f2c:	bne	18234 <__assert_fail@plt+0x7110>
   17f30:	ldr	r3, [sp, #28]
   17f34:	eor	r3, r3, #1
   17f38:	orr	r3, r2, r3
   17f3c:	ldr	r2, [sp, #32]
   17f40:	eor	r3, r3, #1
   17f44:	orrs	r3, r2, r3
   17f48:	beq	17f78 <__assert_fail@plt+0x6e54>
   17f4c:	mov	r3, #0
   17f50:	ldr	r1, [sp, #56]	; 0x38
   17f54:	cmp	r1, #0
   17f58:	beq	17f78 <__assert_fail@plt+0x6e54>
   17f5c:	lsr	r2, r5, #5
   17f60:	and	r0, r5, #31
   17f64:	uxtb	r2, r2
   17f68:	ldr	r1, [r1, r2, lsl #2]
   17f6c:	lsr	r2, r1, r0
   17f70:	tst	r2, #1
   17f74:	bne	17f80 <__assert_fail@plt+0x6e5c>
   17f78:	cmp	r7, #0
   17f7c:	beq	181d0 <__assert_fail@plt+0x70ac>
   17f80:	sub	r2, fp, #2
   17f84:	clz	r2, r2
   17f88:	lsr	r2, r2, #5
   17f8c:	ldr	r3, [sp, #32]
   17f90:	cmp	r3, #0
   17f94:	bne	182c0 <__assert_fail@plt+0x719c>
   17f98:	ldr	r3, [sp, #44]	; 0x2c
   17f9c:	eor	r3, r3, #1
   17fa0:	ands	r3, r2, r3
   17fa4:	beq	17fdc <__assert_fail@plt+0x6eb8>
   17fa8:	cmp	sl, r4
   17fac:	movhi	r2, #39	; 0x27
   17fb0:	strbhi	r2, [r8, r4]
   17fb4:	add	r2, r4, #1
   17fb8:	cmp	r2, sl
   17fbc:	movcc	r1, #36	; 0x24
   17fc0:	strbcc	r1, [r8, r2]
   17fc4:	add	r2, r4, #2
   17fc8:	cmp	r2, sl
   17fcc:	add	r4, r4, #3
   17fd0:	movcc	r1, #39	; 0x27
   17fd4:	strbcc	r1, [r8, r2]
   17fd8:	str	r3, [sp, #44]	; 0x2c
   17fdc:	cmp	r4, sl
   17fe0:	movcc	r3, #92	; 0x5c
   17fe4:	strbcc	r3, [r8, r4]
   17fe8:	add	r9, r9, #1
   17fec:	add	r4, r4, #1
   17ff0:	cmp	r4, sl
   17ff4:	ldr	r3, [sp, #40]	; 0x28
   17ff8:	strbcc	r5, [r8, r4]
   17ffc:	cmp	r6, #0
   18000:	moveq	r3, #0
   18004:	str	r3, [sp, #40]	; 0x28
   18008:	ldr	r3, [sp, #24]
   1800c:	add	r4, r4, #1
   18010:	cmn	r3, #1
   18014:	bne	17ab4 <__assert_fail@plt+0x6990>
   18018:	ldr	r3, [sp, #36]	; 0x24
   1801c:	ldrb	r6, [r3, r9]
   18020:	adds	r6, r6, #0
   18024:	movne	r6, #1
   18028:	cmp	r6, #0
   1802c:	bne	17ac8 <__assert_fail@plt+0x69a4>
   18030:	str	fp, [sp, #160]	; 0xa0
   18034:	mov	fp, r8
   18038:	ldr	r8, [sp, #160]	; 0xa0
   1803c:	ldr	r1, [sp, #32]
   18040:	cmp	r4, #0
   18044:	sub	r2, r8, #2
   18048:	clz	r2, r2
   1804c:	lsr	r2, r2, #5
   18050:	andeq	r3, r2, r1
   18054:	movne	r3, #0
   18058:	cmp	r3, #0
   1805c:	bne	19148 <__assert_fail@plt+0x8024>
   18060:	eor	r3, r1, #1
   18064:	ands	r2, r2, r3
   18068:	beq	19084 <__assert_fail@plt+0x7f60>
   1806c:	ldr	r3, [sp, #68]	; 0x44
   18070:	cmp	r3, #0
   18074:	beq	19088 <__assert_fail@plt+0x7f64>
   18078:	ldr	r3, [sp, #40]	; 0x28
   1807c:	cmp	r3, #0
   18080:	bne	19104 <__assert_fail@plt+0x7fe0>
   18084:	ldr	r3, [sp, #72]	; 0x48
   18088:	adds	r3, r3, #0
   1808c:	movne	r3, #1
   18090:	cmp	sl, #0
   18094:	movne	r3, #0
   18098:	cmp	r3, #0
   1809c:	ldreq	r2, [sp, #68]	; 0x44
   180a0:	beq	19088 <__assert_fail@plt+0x7f64>
   180a4:	ldr	sl, [sp, #72]	; 0x48
   180a8:	str	r3, [sp, #68]	; 0x44
   180ac:	ldr	r3, [pc, #1792]	; 187b4 <__assert_fail@plt+0x7690>
   180b0:	mov	r2, #39	; 0x27
   180b4:	mov	r4, #1
   180b8:	str	r3, [sp, #60]	; 0x3c
   180bc:	mov	r3, #0
   180c0:	strb	r2, [fp]
   180c4:	str	r4, [sp, #52]	; 0x34
   180c8:	mov	r8, #2
   180cc:	str	r3, [sp, #32]
   180d0:	b	17a98 <__assert_fail@plt+0x6974>
   180d4:	mov	r7, #0
   180d8:	cmp	fp, #2
   180dc:	beq	18a14 <__assert_fail@plt+0x78f0>
   180e0:	ldr	r3, [sp, #52]	; 0x34
   180e4:	ldr	r2, [sp, #28]
   180e8:	ldr	r1, [sp, #32]
   180ec:	cmp	r3, #0
   180f0:	andne	r2, r2, r1
   180f4:	moveq	r2, #0
   180f8:	cmp	r2, #0
   180fc:	moveq	r5, #92	; 0x5c
   18100:	moveq	r3, r5
   18104:	bne	18a20 <__assert_fail@plt+0x78fc>
   18108:	ldr	r1, [sp, #28]
   1810c:	cmp	r1, #0
   18110:	bne	19190 <__assert_fail@plt+0x806c>
   18114:	mov	r6, #0
   18118:	b	17f30 <__assert_fail@plt+0x6e0c>
   1811c:	mov	r7, #0
   18120:	cmp	fp, #2
   18124:	beq	18a84 <__assert_fail@plt+0x7960>
   18128:	cmp	fp, #5
   1812c:	beq	18a48 <__assert_fail@plt+0x7924>
   18130:	sub	r2, fp, #2
   18134:	mov	r6, #0
   18138:	clz	r2, r2
   1813c:	mov	r5, #63	; 0x3f
   18140:	lsr	r2, r2, #5
   18144:	b	17f30 <__assert_fail@plt+0x6e0c>
   18148:	mov	r7, #0
   1814c:	cmp	fp, #2
   18150:	strne	r6, [sp, #68]	; 0x44
   18154:	movne	r2, #0
   18158:	movne	r5, #39	; 0x27
   1815c:	bne	17f30 <__assert_fail@plt+0x6e0c>
   18160:	ldr	r3, [sp, #32]
   18164:	cmp	r3, #0
   18168:	bne	18e64 <__assert_fail@plt+0x7d40>
   1816c:	cmp	sl, #0
   18170:	ldr	r3, [sp, #72]	; 0x48
   18174:	clz	r3, r3
   18178:	lsr	r3, r3, #5
   1817c:	moveq	r3, #0
   18180:	cmp	r3, #0
   18184:	bne	18d98 <__assert_fail@plt+0x7c74>
   18188:	cmp	sl, r4
   1818c:	movhi	r3, #39	; 0x27
   18190:	strbhi	r3, [r8, r4]
   18194:	add	r3, r4, #1
   18198:	cmp	sl, r3
   1819c:	movhi	r2, #92	; 0x5c
   181a0:	strbhi	r2, [r8, r3]
   181a4:	add	r3, r4, #2
   181a8:	cmp	sl, r3
   181ac:	movhi	r2, #39	; 0x27
   181b0:	strbhi	r2, [r8, r3]
   181b4:	mov	r3, #0
   181b8:	cmp	r7, #0
   181bc:	add	r4, r4, #3
   181c0:	str	r3, [sp, #44]	; 0x2c
   181c4:	str	r6, [sp, #68]	; 0x44
   181c8:	mov	r5, #39	; 0x27
   181cc:	bne	17f80 <__assert_fail@plt+0x6e5c>
   181d0:	ldr	r2, [sp, #44]	; 0x2c
   181d4:	eor	r3, r3, #1
   181d8:	and	r3, r3, r2
   181dc:	add	r9, r9, #1
   181e0:	uxtb	r3, r3
   181e4:	cmp	r3, #0
   181e8:	beq	17ff0 <__assert_fail@plt+0x6ecc>
   181ec:	cmp	sl, r4
   181f0:	movhi	r3, #39	; 0x27
   181f4:	strbhi	r3, [r8, r4]
   181f8:	add	r3, r4, #1
   181fc:	cmp	sl, r3
   18200:	movhi	r2, #39	; 0x27
   18204:	strbhi	r2, [r8, r3]
   18208:	mov	r3, #0
   1820c:	add	r4, r4, #2
   18210:	str	r3, [sp, #44]	; 0x2c
   18214:	b	17ff0 <__assert_fail@plt+0x6ecc>
   18218:	mov	r3, #114	; 0x72
   1821c:	ldr	r1, [sp, #32]
   18220:	sub	r2, fp, #2
   18224:	clz	r2, r2
   18228:	lsr	r2, r2, #5
   1822c:	tst	r2, r1
   18230:	beq	18108 <__assert_fail@plt+0x6fe4>
   18234:	mov	fp, r8
   18238:	mov	r8, #2
   1823c:	ldr	r3, [sp, #28]
   18240:	cmp	r3, #0
   18244:	movne	r8, #4
   18248:	ldr	r3, [sp, #164]	; 0xa4
   1824c:	mov	ip, #0
   18250:	bic	r3, r3, #2
   18254:	str	r3, [sp, #4]
   18258:	ldr	r3, [sp, #76]	; 0x4c
   1825c:	str	r8, [sp]
   18260:	str	r3, [sp, #16]
   18264:	ldr	r3, [sp, #80]	; 0x50
   18268:	ldr	r2, [sp, #36]	; 0x24
   1826c:	str	r3, [sp, #12]
   18270:	mov	r1, sl
   18274:	ldr	r3, [sp, #24]
   18278:	mov	r0, fp
   1827c:	str	ip, [sp, #8]
   18280:	bl	179a0 <__assert_fail@plt+0x687c>
   18284:	mov	r4, r0
   18288:	ldr	r3, [pc, #1304]	; 187a8 <__assert_fail@plt+0x7684>
   1828c:	ldr	r2, [sp, #116]	; 0x74
   18290:	mov	r0, r4
   18294:	ldr	r3, [r3]
   18298:	cmp	r2, r3
   1829c:	bne	1918c <__assert_fail@plt+0x8068>
   182a0:	add	sp, sp, #124	; 0x7c
   182a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182a8:	mov	r5, #110	; 0x6e
   182ac:	ldr	r3, [sp, #32]
   182b0:	mov	r2, #0
   182b4:	cmp	r3, #0
   182b8:	mov	r6, r2
   182bc:	beq	17f98 <__assert_fail@plt+0x6e74>
   182c0:	str	fp, [sp, #160]	; 0xa0
   182c4:	mov	fp, r8
   182c8:	ldr	r8, [sp, #160]	; 0xa0
   182cc:	mov	r3, r2
   182d0:	ldr	r2, [sp, #28]
   182d4:	and	r2, r2, r3
   182d8:	str	r2, [sp, #28]
   182dc:	b	1823c <__assert_fail@plt+0x7118>
   182e0:	mov	r5, #116	; 0x74
   182e4:	b	182ac <__assert_fail@plt+0x7188>
   182e8:	mov	r5, #102	; 0x66
   182ec:	ldr	r3, [sp, #32]
   182f0:	cmp	r3, #0
   182f4:	bne	18ea0 <__assert_fail@plt+0x7d7c>
   182f8:	mov	r6, #0
   182fc:	b	17fdc <__assert_fail@plt+0x6eb8>
   18300:	mov	r5, #118	; 0x76
   18304:	b	182ec <__assert_fail@plt+0x71c8>
   18308:	mov	r7, #0
   1830c:	mov	r6, #0
   18310:	b	17f4c <__assert_fail@plt+0x6e28>
   18314:	ldr	r3, [sp, #32]
   18318:	cmp	r3, #0
   1831c:	bne	190e4 <__assert_fail@plt+0x7fc0>
   18320:	mov	r7, r3
   18324:	ldr	r3, [sp, #44]	; 0x2c
   18328:	sub	r2, fp, #2
   1832c:	eor	r3, r3, #1
   18330:	clz	r2, r2
   18334:	lsr	r2, r2, #5
   18338:	ands	r3, r2, r3
   1833c:	beq	18d84 <__assert_fail@plt+0x7c60>
   18340:	cmp	sl, r4
   18344:	movhi	r1, #39	; 0x27
   18348:	strbhi	r1, [r8, r4]
   1834c:	add	r1, r4, #1
   18350:	cmp	sl, r1
   18354:	movhi	r0, #36	; 0x24
   18358:	strbhi	r0, [r8, r1]
   1835c:	add	r1, r4, #2
   18360:	cmp	sl, r1
   18364:	movhi	r0, #39	; 0x27
   18368:	strbhi	r0, [r8, r1]
   1836c:	add	r1, r4, #3
   18370:	cmp	sl, r1
   18374:	bls	18de4 <__assert_fail@plt+0x7cc0>
   18378:	mov	r4, r1
   1837c:	mov	r1, #92	; 0x5c
   18380:	strb	r1, [r8, r4]
   18384:	mov	r1, r4
   18388:	str	r3, [sp, #44]	; 0x2c
   1838c:	cmp	fp, #2
   18390:	add	r4, r4, #1
   18394:	beq	18e2c <__assert_fail@plt+0x7d08>
   18398:	ldr	r0, [sp, #24]
   1839c:	add	r3, r9, #1
   183a0:	cmp	r3, r0
   183a4:	bcs	183bc <__assert_fail@plt+0x7298>
   183a8:	ldr	r0, [sp, #36]	; 0x24
   183ac:	ldrb	r3, [r0, r3]
   183b0:	sub	r3, r3, #48	; 0x30
   183b4:	cmp	r3, #9
   183b8:	bls	18e3c <__assert_fail@plt+0x7d18>
   183bc:	mov	r5, #48	; 0x30
   183c0:	ldr	r3, [sp, #28]
   183c4:	eor	r3, r3, #1
   183c8:	orrs	r2, r2, r3
   183cc:	mov	r3, r6
   183d0:	moveq	r6, r2
   183d4:	beq	17f50 <__assert_fail@plt+0x6e2c>
   183d8:	mov	r6, #0
   183dc:	b	17f78 <__assert_fail@plt+0x6e54>
   183e0:	mov	r2, #0
   183e4:	mov	r6, r2
   183e8:	mov	r5, #98	; 0x62
   183ec:	b	17f98 <__assert_fail@plt+0x6e74>
   183f0:	mov	r5, #97	; 0x61
   183f4:	b	182f8 <__assert_fail@plt+0x71d4>
   183f8:	mov	r3, r7
   183fc:	mov	r6, r7
   18400:	mov	r2, #0
   18404:	mov	r7, r3
   18408:	mov	r5, #32
   1840c:	b	17f30 <__assert_fail@plt+0x6e0c>
   18410:	cmp	r9, #0
   18414:	mov	r3, r7
   18418:	bne	189e0 <__assert_fail@plt+0x78bc>
   1841c:	mov	r6, r7
   18420:	mov	r2, r9
   18424:	mov	r7, r3
   18428:	b	17f30 <__assert_fail@plt+0x6e0c>
   1842c:	mov	r6, r7
   18430:	b	17f4c <__assert_fail@plt+0x6e28>
   18434:	mov	r7, #0
   18438:	ldr	r3, [sp, #64]	; 0x40
   1843c:	cmp	r3, #1
   18440:	bne	18a9c <__assert_fail@plt+0x7978>
   18444:	bl	10fec <__ctype_b_loc@plt>
   18448:	ldr	r2, [sp, #64]	; 0x40
   1844c:	sxth	r3, r5
   18450:	mov	ip, r2
   18454:	lsl	r3, r3, #1
   18458:	ldr	r2, [r0]
   1845c:	ldrh	r3, [r2, r3]
   18460:	and	r3, r3, #16384	; 0x4000
   18464:	cmp	r3, #0
   18468:	ldr	r3, [sp, #28]
   1846c:	movne	r6, #1
   18470:	moveq	r6, #0
   18474:	movne	r2, #0
   18478:	andeq	r2, r3, #1
   1847c:	cmp	r2, #0
   18480:	bne	18dac <__assert_fail@plt+0x7c88>
   18484:	sub	r2, fp, #2
   18488:	clz	r2, r2
   1848c:	lsr	r2, r2, #5
   18490:	b	17f30 <__assert_fail@plt+0x6e0c>
   18494:	cmp	r4, #0
   18498:	bne	19158 <__assert_fail@plt+0x8034>
   1849c:	str	r4, [sp, #28]
   184a0:	cmp	sl, #0
   184a4:	bne	1919c <__assert_fail@plt+0x8078>
   184a8:	ldr	r3, [pc, #772]	; 187b4 <__assert_fail@plt+0x7690>
   184ac:	mov	r4, #1
   184b0:	str	r4, [sp, #40]	; 0x28
   184b4:	str	r3, [sp, #60]	; 0x3c
   184b8:	str	r4, [sp, #52]	; 0x34
   184bc:	str	sl, [sp, #72]	; 0x48
   184c0:	str	sl, [sp, #68]	; 0x44
   184c4:	str	sl, [sp, #44]	; 0x2c
   184c8:	str	sl, [sp, #32]
   184cc:	mov	r8, #2
   184d0:	b	17a98 <__assert_fail@plt+0x6974>
   184d4:	ldr	r3, [sp, #36]	; 0x24
   184d8:	ldrb	r5, [r3, r9]
   184dc:	cmp	r5, #126	; 0x7e
   184e0:	ldrls	pc, [pc, r5, lsl #2]
   184e4:	b	18438 <__assert_fail@plt+0x7314>
   184e8:	andeq	r8, r1, ip, lsl r7
   184ec:	andeq	r8, r1, r8, lsr r4
   184f0:	andeq	r8, r1, r8, lsr r4
   184f4:	andeq	r8, r1, r8, lsr r4
   184f8:	andeq	r8, r1, r8, lsr r4
   184fc:	andeq	r8, r1, r8, lsr r4
   18500:	andeq	r8, r1, r8, lsr r4
   18504:	andeq	r8, r1, r8, lsl #14
   18508:	strdeq	r8, [r1], -r4
   1850c:	andeq	r8, r1, ip, ror #13
   18510:	andeq	r8, r1, r4, ror #13
   18514:	muleq	r1, r4, r7
   18518:	andeq	r8, r1, r0, lsl #15
   1851c:	andeq	r8, r1, r8, lsl r2
   18520:	andeq	r8, r1, r8, lsr r4
   18524:	andeq	r8, r1, r8, lsr r4
   18528:	andeq	r8, r1, r8, lsr r4
   1852c:	andeq	r8, r1, r8, lsr r4
   18530:	andeq	r8, r1, r8, lsr r4
   18534:	andeq	r8, r1, r8, lsr r4
   18538:	andeq	r8, r1, r8, lsr r4
   1853c:	andeq	r8, r1, r8, lsr r4
   18540:	andeq	r8, r1, r8, lsr r4
   18544:	andeq	r8, r1, r8, lsr r4
   18548:	andeq	r8, r1, r8, lsr r4
   1854c:	andeq	r8, r1, r8, lsr r4
   18550:	andeq	r8, r1, r8, lsr r4
   18554:	andeq	r8, r1, r8, lsr r4
   18558:	andeq	r8, r1, r8, lsr r4
   1855c:	andeq	r8, r1, r8, lsr r4
   18560:	andeq	r8, r1, r8, lsr r4
   18564:	andeq	r8, r1, r8, lsr r4
   18568:	andeq	r8, r1, r0, ror r7
   1856c:	andeq	r8, r1, ip, asr r7
   18570:	andeq	r8, r1, ip, asr r7
   18574:	andeq	r8, r1, ip, asr #14
   18578:	andeq	r8, r1, ip, asr r7
   1857c:	andeq	r8, r1, r4, lsl #9
   18580:	andeq	r8, r1, ip, asr r7
   18584:	andeq	r8, r1, ip, asr #2
   18588:	andeq	r8, r1, ip, asr r7
   1858c:	andeq	r8, r1, ip, asr r7
   18590:	andeq	r8, r1, ip, asr r7
   18594:	andeq	r8, r1, r4, lsl #9
   18598:	andeq	r8, r1, r4, lsl #9
   1859c:	andeq	r8, r1, r4, lsl #9
   185a0:	andeq	r8, r1, r4, lsl #9
   185a4:	andeq	r8, r1, r4, lsl #9
   185a8:	andeq	r8, r1, r4, lsl #9
   185ac:	andeq	r8, r1, r4, lsl #9
   185b0:	andeq	r8, r1, r4, lsl #9
   185b4:	andeq	r8, r1, r4, lsl #9
   185b8:	andeq	r8, r1, r4, lsl #9
   185bc:	andeq	r8, r1, r4, lsl #9
   185c0:	andeq	r8, r1, r4, lsl #9
   185c4:	andeq	r8, r1, r4, lsl #9
   185c8:	andeq	r8, r1, r4, lsl #9
   185cc:	andeq	r8, r1, r4, lsl #9
   185d0:	andeq	r8, r1, r4, lsl #9
   185d4:	andeq	r8, r1, ip, asr r7
   185d8:	andeq	r8, r1, ip, asr r7
   185dc:	andeq	r8, r1, ip, asr r7
   185e0:	andeq	r8, r1, ip, asr r7
   185e4:	andeq	r8, r1, r0, lsr #2
   185e8:	andeq	r8, r1, r8, lsr r4
   185ec:	andeq	r8, r1, r4, lsl #9
   185f0:	andeq	r8, r1, r4, lsl #9
   185f4:	andeq	r8, r1, r4, lsl #9
   185f8:	andeq	r8, r1, r4, lsl #9
   185fc:	andeq	r8, r1, r4, lsl #9
   18600:	andeq	r8, r1, r4, lsl #9
   18604:	andeq	r8, r1, r4, lsl #9
   18608:	andeq	r8, r1, r4, lsl #9
   1860c:	andeq	r8, r1, r4, lsl #9
   18610:	andeq	r8, r1, r4, lsl #9
   18614:	andeq	r8, r1, r4, lsl #9
   18618:	andeq	r8, r1, r4, lsl #9
   1861c:	andeq	r8, r1, r4, lsl #9
   18620:	andeq	r8, r1, r4, lsl #9
   18624:	andeq	r8, r1, r4, lsl #9
   18628:	andeq	r8, r1, r4, lsl #9
   1862c:	andeq	r8, r1, r4, lsl #9
   18630:	andeq	r8, r1, r4, lsl #9
   18634:	andeq	r8, r1, r4, lsl #9
   18638:	andeq	r8, r1, r4, lsl #9
   1863c:	andeq	r8, r1, r4, lsl #9
   18640:	andeq	r8, r1, r4, lsl #9
   18644:	andeq	r8, r1, r4, lsl #9
   18648:	andeq	r8, r1, r4, lsl #9
   1864c:	andeq	r8, r1, r4, lsl #9
   18650:	andeq	r8, r1, r4, lsl #9
   18654:	andeq	r8, r1, ip, asr r7
   18658:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1865c:	andeq	r8, r1, r4, lsl #9
   18660:	andeq	r8, r1, ip, asr r7
   18664:	andeq	r8, r1, r4, lsl #9
   18668:	andeq	r8, r1, ip, asr r7
   1866c:	andeq	r8, r1, r4, lsl #9
   18670:	andeq	r8, r1, r4, lsl #9
   18674:	andeq	r8, r1, r4, lsl #9
   18678:	andeq	r8, r1, r4, lsl #9
   1867c:	andeq	r8, r1, r4, lsl #9
   18680:	andeq	r8, r1, r4, lsl #9
   18684:	andeq	r8, r1, r4, lsl #9
   18688:	andeq	r8, r1, r4, lsl #9
   1868c:	andeq	r8, r1, r4, lsl #9
   18690:	andeq	r8, r1, r4, lsl #9
   18694:	andeq	r8, r1, r4, lsl #9
   18698:	andeq	r8, r1, r4, lsl #9
   1869c:	andeq	r8, r1, r4, lsl #9
   186a0:	andeq	r8, r1, r4, lsl #9
   186a4:	andeq	r8, r1, r4, lsl #9
   186a8:	andeq	r8, r1, r4, lsl #9
   186ac:	andeq	r8, r1, r4, lsl #9
   186b0:	andeq	r8, r1, r4, lsl #9
   186b4:	andeq	r8, r1, r4, lsl #9
   186b8:	andeq	r8, r1, r4, lsl #9
   186bc:	andeq	r8, r1, r4, lsl #9
   186c0:	andeq	r8, r1, r4, lsl #9
   186c4:	andeq	r8, r1, r4, lsl #9
   186c8:	andeq	r8, r1, r4, lsl #9
   186cc:	andeq	r8, r1, r4, lsl #9
   186d0:	andeq	r8, r1, r4, lsl #9
   186d4:	strdeq	r7, [r1], -r0
   186d8:	andeq	r8, r1, ip, asr r7
   186dc:	strdeq	r7, [r1], -r0
   186e0:	andeq	r8, r1, ip, asr #14
   186e4:	mov	r3, #110	; 0x6e
   186e8:	b	1821c <__assert_fail@plt+0x70f8>
   186ec:	mov	r3, #116	; 0x74
   186f0:	b	1821c <__assert_fail@plt+0x70f8>
   186f4:	sub	r2, fp, #2
   186f8:	mov	r3, #98	; 0x62
   186fc:	clz	r2, r2
   18700:	lsr	r2, r2, #5
   18704:	b	18108 <__assert_fail@plt+0x6fe4>
   18708:	sub	r2, fp, #2
   1870c:	mov	r3, #97	; 0x61
   18710:	clz	r2, r2
   18714:	lsr	r2, r2, #5
   18718:	b	18108 <__assert_fail@plt+0x6fe4>
   1871c:	ldr	r3, [sp, #28]
   18720:	cmp	r3, #0
   18724:	bne	18314 <__assert_fail@plt+0x71f0>
   18728:	ldr	r3, [sp, #164]	; 0xa4
   1872c:	tst	r3, #1
   18730:	bne	18da4 <__assert_fail@plt+0x7c80>
   18734:	ldr	r6, [sp, #28]
   18738:	sub	r2, fp, #2
   1873c:	mov	r7, r6
   18740:	clz	r2, r2
   18744:	lsr	r2, r2, #5
   18748:	b	17f30 <__assert_fail@plt+0x6e0c>
   1874c:	sub	r2, fp, #2
   18750:	clz	r2, r2
   18754:	lsr	r2, r2, #5
   18758:	b	17f1c <__assert_fail@plt+0x6df8>
   1875c:	sub	r2, fp, #2
   18760:	mov	r6, #0
   18764:	clz	r2, r2
   18768:	lsr	r2, r2, #5
   1876c:	b	17f24 <__assert_fail@plt+0x6e00>
   18770:	sub	r2, fp, #2
   18774:	clz	r2, r2
   18778:	lsr	r2, r2, #5
   1877c:	b	17f24 <__assert_fail@plt+0x6e00>
   18780:	sub	r2, fp, #2
   18784:	mov	r3, #102	; 0x66
   18788:	clz	r2, r2
   1878c:	lsr	r2, r2, #5
   18790:	b	18108 <__assert_fail@plt+0x6fe4>
   18794:	sub	r2, fp, #2
   18798:	mov	r3, #118	; 0x76
   1879c:	clz	r2, r2
   187a0:	lsr	r2, r2, #5
   187a4:	b	18108 <__assert_fail@plt+0x6fe4>
   187a8:	andeq	r0, r3, r8, lsl #30
   187ac:	andeq	r0, r2, r8, lsr #17
   187b0:	muleq	r2, r0, r8
   187b4:	andeq	r0, r2, r4, lsr #17
   187b8:	ldr	r3, [sp, #48]	; 0x30
   187bc:	ldrb	r5, [r3]
   187c0:	cmp	r5, #126	; 0x7e
   187c4:	ldrls	pc, [pc, r5, lsl #2]
   187c8:	b	18434 <__assert_fail@plt+0x7310>
   187cc:	andeq	r8, r1, r4, lsl r3
   187d0:	andeq	r8, r1, r4, lsr r4
   187d4:	andeq	r8, r1, r4, lsr r4
   187d8:	andeq	r8, r1, r4, lsr r4
   187dc:	andeq	r8, r1, r4, lsr r4
   187e0:	andeq	r8, r1, r4, lsr r4
   187e4:	andeq	r8, r1, r4, lsr r4
   187e8:	andeq	r8, r1, ip, lsl #20
   187ec:	andeq	r8, r1, r4, lsl #20
   187f0:	andeq	r8, r1, r0, ror #5
   187f4:	andeq	r8, r1, r8, lsr #5
   187f8:	andeq	r8, r1, r0, lsl #6
   187fc:	andeq	r8, r1, r8, ror #5
   18800:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18804:	andeq	r8, r1, r4, lsr r4
   18808:	andeq	r8, r1, r4, lsr r4
   1880c:	andeq	r8, r1, r4, lsr r4
   18810:	andeq	r8, r1, r4, lsr r4
   18814:	andeq	r8, r1, r4, lsr r4
   18818:	andeq	r8, r1, r4, lsr r4
   1881c:	andeq	r8, r1, r4, lsr r4
   18820:	andeq	r8, r1, r4, lsr r4
   18824:	andeq	r8, r1, r4, lsr r4
   18828:	andeq	r8, r1, r4, lsr r4
   1882c:	andeq	r8, r1, r4, lsr r4
   18830:	andeq	r8, r1, r4, lsr r4
   18834:	andeq	r8, r1, r4, lsr r4
   18838:	andeq	r8, r1, r4, lsr r4
   1883c:	andeq	r8, r1, r4, lsr r4
   18840:	andeq	r8, r1, r4, lsr r4
   18844:	andeq	r8, r1, r4, lsr r4
   18848:	andeq	r8, r1, r4, lsr r4
   1884c:	strdeq	r8, [r1], -r0
   18850:	andeq	r8, r1, r8, lsl #6
   18854:	andeq	r8, r1, r8, lsl #6
   18858:	ldrdeq	r8, [r1], -r4
   1885c:	andeq	r8, r1, r8, lsl #6
   18860:	andeq	r8, r1, r8, asr #19
   18864:	andeq	r8, r1, r8, lsl #6
   18868:	andeq	r8, r1, r8, asr #2
   1886c:	andeq	r8, r1, r8, lsl #6
   18870:	andeq	r8, r1, r8, lsl #6
   18874:	andeq	r8, r1, r8, lsl #6
   18878:	andeq	r8, r1, r8, asr #19
   1887c:	andeq	r8, r1, r8, asr #19
   18880:	andeq	r8, r1, r8, asr #19
   18884:	andeq	r8, r1, r8, asr #19
   18888:	andeq	r8, r1, r8, asr #19
   1888c:	andeq	r8, r1, r8, asr #19
   18890:	andeq	r8, r1, r8, asr #19
   18894:	andeq	r8, r1, r8, asr #19
   18898:	andeq	r8, r1, r8, asr #19
   1889c:	andeq	r8, r1, r8, asr #19
   188a0:	andeq	r8, r1, r8, asr #19
   188a4:	andeq	r8, r1, r8, asr #19
   188a8:	andeq	r8, r1, r8, asr #19
   188ac:	andeq	r8, r1, r8, asr #19
   188b0:	andeq	r8, r1, r8, asr #19
   188b4:	andeq	r8, r1, r8, asr #19
   188b8:	andeq	r8, r1, r8, lsl #6
   188bc:	andeq	r8, r1, r8, lsl #6
   188c0:	andeq	r8, r1, r8, lsl #6
   188c4:	andeq	r8, r1, r8, lsl #6
   188c8:	andeq	r8, r1, ip, lsl r1
   188cc:	andeq	r8, r1, r4, lsr r4
   188d0:	andeq	r8, r1, r8, asr #19
   188d4:	andeq	r8, r1, r8, asr #19
   188d8:	andeq	r8, r1, r8, asr #19
   188dc:	andeq	r8, r1, r8, asr #19
   188e0:	andeq	r8, r1, r8, asr #19
   188e4:	andeq	r8, r1, r8, asr #19
   188e8:	andeq	r8, r1, r8, asr #19
   188ec:	andeq	r8, r1, r8, asr #19
   188f0:	andeq	r8, r1, r8, asr #19
   188f4:	andeq	r8, r1, r8, asr #19
   188f8:	andeq	r8, r1, r8, asr #19
   188fc:	andeq	r8, r1, r8, asr #19
   18900:	andeq	r8, r1, r8, asr #19
   18904:	andeq	r8, r1, r8, asr #19
   18908:	andeq	r8, r1, r8, asr #19
   1890c:	andeq	r8, r1, r8, asr #19
   18910:	andeq	r8, r1, r8, asr #19
   18914:	andeq	r8, r1, r8, asr #19
   18918:	andeq	r8, r1, r8, asr #19
   1891c:	andeq	r8, r1, r8, asr #19
   18920:	andeq	r8, r1, r8, asr #19
   18924:	andeq	r8, r1, r8, asr #19
   18928:	andeq	r8, r1, r8, asr #19
   1892c:	andeq	r8, r1, r8, asr #19
   18930:	andeq	r8, r1, r8, asr #19
   18934:	andeq	r8, r1, r8, asr #19
   18938:	andeq	r8, r1, r8, lsl #6
   1893c:	ldrdeq	r8, [r1], -r4
   18940:	andeq	r8, r1, r8, asr #19
   18944:	andeq	r8, r1, r8, lsl #6
   18948:	andeq	r8, r1, r8, asr #19
   1894c:	andeq	r8, r1, r8, lsl #6
   18950:	andeq	r8, r1, r8, asr #19
   18954:	andeq	r8, r1, r8, asr #19
   18958:	andeq	r8, r1, r8, asr #19
   1895c:	andeq	r8, r1, r8, asr #19
   18960:	andeq	r8, r1, r8, asr #19
   18964:	andeq	r8, r1, r8, asr #19
   18968:	andeq	r8, r1, r8, asr #19
   1896c:	andeq	r8, r1, r8, asr #19
   18970:	andeq	r8, r1, r8, asr #19
   18974:	andeq	r8, r1, r8, asr #19
   18978:	andeq	r8, r1, r8, asr #19
   1897c:	andeq	r8, r1, r8, asr #19
   18980:	andeq	r8, r1, r8, asr #19
   18984:	andeq	r8, r1, r8, asr #19
   18988:	andeq	r8, r1, r8, asr #19
   1898c:	andeq	r8, r1, r8, asr #19
   18990:	andeq	r8, r1, r8, asr #19
   18994:	andeq	r8, r1, r8, asr #19
   18998:	andeq	r8, r1, r8, asr #19
   1899c:	andeq	r8, r1, r8, asr #19
   189a0:	andeq	r8, r1, r8, asr #19
   189a4:	andeq	r8, r1, r8, asr #19
   189a8:	andeq	r8, r1, r8, asr #19
   189ac:	andeq	r8, r1, r8, asr #19
   189b0:	andeq	r8, r1, r8, asr #19
   189b4:	andeq	r8, r1, r8, asr #19
   189b8:	andeq	r7, r1, ip, ror #29
   189bc:	andeq	r8, r1, r8, lsl #6
   189c0:	andeq	r7, r1, ip, ror #29
   189c4:	ldrdeq	r8, [r1], -r4
   189c8:	mov	r6, r7
   189cc:	mov	r7, #0
   189d0:	b	17f4c <__assert_fail@plt+0x6e28>
   189d4:	cmp	r9, #0
   189d8:	mov	r3, #0
   189dc:	beq	1841c <__assert_fail@plt+0x72f8>
   189e0:	mov	r6, #0
   189e4:	mov	r7, r3
   189e8:	mov	r3, r6
   189ec:	b	17f50 <__assert_fail@plt+0x6e2c>
   189f0:	mov	r3, #0
   189f4:	b	183fc <__assert_fail@plt+0x72d8>
   189f8:	mov	r7, #0
   189fc:	mov	r3, #114	; 0x72
   18a00:	b	1821c <__assert_fail@plt+0x70f8>
   18a04:	mov	r5, #98	; 0x62
   18a08:	b	182ac <__assert_fail@plt+0x7188>
   18a0c:	mov	r5, #97	; 0x61
   18a10:	b	182ec <__assert_fail@plt+0x71c8>
   18a14:	ldr	r3, [sp, #32]
   18a18:	cmp	r3, #0
   18a1c:	bne	18e64 <__assert_fail@plt+0x7d40>
   18a20:	add	r9, r9, #1
   18a24:	ldr	r3, [sp, #44]	; 0x2c
   18a28:	mov	r6, #0
   18a2c:	mov	r5, #92	; 0x5c
   18a30:	b	181e4 <__assert_fail@plt+0x70c0>
   18a34:	ldr	r3, [sp, #36]	; 0x24
   18a38:	ldrb	r3, [r3, #1]
   18a3c:	adds	r3, r3, #0
   18a40:	movne	r3, #1
   18a44:	b	17f08 <__assert_fail@plt+0x6de4>
   18a48:	ldr	r3, [sp, #164]	; 0xa4
   18a4c:	ands	r3, r3, #4
   18a50:	beq	18a74 <__assert_fail@plt+0x7950>
   18a54:	ldr	r2, [sp, #24]
   18a58:	add	r3, r9, #2
   18a5c:	cmp	r3, r2
   18a60:	bcs	18a74 <__assert_fail@plt+0x7950>
   18a64:	ldr	r2, [sp, #48]	; 0x30
   18a68:	ldrb	r5, [r2, #1]
   18a6c:	cmp	r5, #63	; 0x3f
   18a70:	beq	18ed8 <__assert_fail@plt+0x7db4>
   18a74:	mov	r2, #0
   18a78:	mov	r6, r2
   18a7c:	mov	r5, #63	; 0x3f
   18a80:	b	17f30 <__assert_fail@plt+0x6e0c>
   18a84:	ldr	r3, [sp, #32]
   18a88:	cmp	r3, #0
   18a8c:	bne	18e64 <__assert_fail@plt+0x7d40>
   18a90:	mov	r6, r3
   18a94:	mov	r5, #63	; 0x3f
   18a98:	b	17f78 <__assert_fail@plt+0x6e54>
   18a9c:	ldr	r3, [sp, #24]
   18aa0:	cmn	r3, #1
   18aa4:	mov	r3, #0
   18aa8:	str	r3, [sp, #108]	; 0x6c
   18aac:	str	r3, [sp, #112]	; 0x70
   18ab0:	bne	18ac0 <__assert_fail@plt+0x799c>
   18ab4:	ldr	r0, [sp, #36]	; 0x24
   18ab8:	bl	11010 <strlen@plt>
   18abc:	str	r0, [sp, #24]
   18ac0:	mov	r3, #0
   18ac4:	str	sl, [sp, #88]	; 0x58
   18ac8:	ldr	sl, [sp, #36]	; 0x24
   18acc:	str	r5, [sp, #92]	; 0x5c
   18ad0:	mov	r5, r3
   18ad4:	str	r7, [sp, #96]	; 0x60
   18ad8:	str	r4, [sp, #100]	; 0x64
   18adc:	str	r8, [sp, #84]	; 0x54
   18ae0:	ldr	r3, [sp, #24]
   18ae4:	add	r4, r9, r5
   18ae8:	add	r7, sl, r4
   18aec:	sub	r2, r3, r4
   18af0:	mov	r1, r7
   18af4:	add	r3, sp, #108	; 0x6c
   18af8:	add	r0, sp, #104	; 0x68
   18afc:	bl	1abdc <__assert_fail@plt+0x9ab8>
   18b00:	subs	r8, r0, #0
   18b04:	beq	18b54 <__assert_fail@plt+0x7a30>
   18b08:	cmn	r8, #1
   18b0c:	beq	18eb4 <__assert_fail@plt+0x7d90>
   18b10:	cmn	r8, #2
   18b14:	beq	18fd4 <__assert_fail@plt+0x7eb0>
   18b18:	ldr	r3, [sp, #32]
   18b1c:	cmp	fp, #2
   18b20:	movne	r3, #0
   18b24:	andeq	r3, r3, #1
   18b28:	cmp	r3, #0
   18b2c:	bne	18cb4 <__assert_fail@plt+0x7b90>
   18b30:	ldr	r0, [sp, #104]	; 0x68
   18b34:	bl	10f50 <iswprint@plt>
   18b38:	add	r5, r5, r8
   18b3c:	cmp	r0, #0
   18b40:	add	r0, sp, #108	; 0x6c
   18b44:	moveq	r6, #0
   18b48:	bl	10ef0 <mbsinit@plt>
   18b4c:	cmp	r0, #0
   18b50:	beq	18ae0 <__assert_fail@plt+0x79bc>
   18b54:	ldr	r3, [sp, #28]
   18b58:	mov	ip, r5
   18b5c:	eor	r2, r6, #1
   18b60:	ldr	r5, [sp, #92]	; 0x5c
   18b64:	ldr	r7, [sp, #96]	; 0x60
   18b68:	ldr	r4, [sp, #100]	; 0x64
   18b6c:	ldr	r8, [sp, #84]	; 0x54
   18b70:	ldr	sl, [sp, #88]	; 0x58
   18b74:	and	r2, r2, r3
   18b78:	cmp	ip, #1
   18b7c:	bls	1847c <__assert_fail@plt+0x7358>
   18b80:	add	r1, ip, r9
   18b84:	ldr	lr, [sp, #48]	; 0x30
   18b88:	mov	r0, #0
   18b8c:	str	r6, [sp, #48]	; 0x30
   18b90:	mov	ip, #39	; 0x27
   18b94:	ldr	r6, [sp, #44]	; 0x2c
   18b98:	b	18c50 <__assert_fail@plt+0x7b2c>
   18b9c:	ldr	r0, [sp, #32]
   18ba0:	sub	r3, fp, #2
   18ba4:	cmp	r0, #0
   18ba8:	clz	r3, r3
   18bac:	lsr	r3, r3, #5
   18bb0:	bne	18db8 <__assert_fail@plt+0x7c94>
   18bb4:	eor	r0, r6, #1
   18bb8:	ands	r3, r3, r0
   18bbc:	beq	18bec <__assert_fail@plt+0x7ac8>
   18bc0:	add	r0, r4, #1
   18bc4:	cmp	sl, r4
   18bc8:	strbhi	ip, [r8, r4]
   18bcc:	cmp	sl, r0
   18bd0:	movhi	r6, #36	; 0x24
   18bd4:	strbhi	r6, [r8, r0]
   18bd8:	add	r0, r4, #2
   18bdc:	mov	r6, r3
   18be0:	add	r4, r4, #3
   18be4:	cmp	sl, r0
   18be8:	strbhi	ip, [r8, r0]
   18bec:	cmp	sl, r4
   18bf0:	movhi	r3, #92	; 0x5c
   18bf4:	strbhi	r3, [r8, r4]
   18bf8:	add	r3, r4, #1
   18bfc:	cmp	sl, r3
   18c00:	lsrhi	r0, r5, #6
   18c04:	addhi	r0, r0, #48	; 0x30
   18c08:	strbhi	r0, [r8, r3]
   18c0c:	add	r0, r4, #2
   18c10:	cmp	sl, r0
   18c14:	lsrhi	r3, r5, #3
   18c18:	andhi	r3, r3, #7
   18c1c:	addhi	r3, r3, #48	; 0x30
   18c20:	add	r9, r9, #1
   18c24:	strbhi	r3, [r8, r0]
   18c28:	and	r5, r5, #7
   18c2c:	cmp	r9, r1
   18c30:	add	r5, r5, #48	; 0x30
   18c34:	add	r4, r4, #3
   18c38:	bcs	18dd8 <__assert_fail@plt+0x7cb4>
   18c3c:	mov	r0, r2
   18c40:	cmp	sl, r4
   18c44:	strbhi	r5, [r8, r4]
   18c48:	ldrb	r5, [lr, #1]!
   18c4c:	add	r4, r4, #1
   18c50:	cmp	r2, #0
   18c54:	bne	18b9c <__assert_fail@plt+0x7a78>
   18c58:	eor	r3, r0, #1
   18c5c:	and	r3, r3, r6
   18c60:	cmp	r7, #0
   18c64:	uxtb	r3, r3
   18c68:	beq	18c7c <__assert_fail@plt+0x7b58>
   18c6c:	cmp	sl, r4
   18c70:	movhi	r7, #92	; 0x5c
   18c74:	strbhi	r7, [r8, r4]
   18c78:	add	r4, r4, #1
   18c7c:	add	r9, r9, #1
   18c80:	cmp	r9, r1
   18c84:	bcs	18dcc <__assert_fail@plt+0x7ca8>
   18c88:	cmp	r3, #0
   18c8c:	beq	18df8 <__assert_fail@plt+0x7cd4>
   18c90:	cmp	sl, r4
   18c94:	add	r3, r4, #1
   18c98:	strbhi	ip, [r8, r4]
   18c9c:	mov	r7, #0
   18ca0:	cmp	sl, r3
   18ca4:	strbhi	ip, [r8, r3]
   18ca8:	add	r4, r4, #2
   18cac:	mov	r6, r7
   18cb0:	b	18c40 <__assert_fail@plt+0x7b1c>
   18cb4:	cmp	r8, #1
   18cb8:	beq	18b30 <__assert_fail@plt+0x7a0c>
   18cbc:	add	r1, r4, #1
   18cc0:	add	r3, sl, r8
   18cc4:	add	r1, sl, r1
   18cc8:	add	r4, r3, r4
   18ccc:	ldrb	r3, [r1], #1
   18cd0:	sub	r3, r3, #91	; 0x5b
   18cd4:	cmp	r3, #33	; 0x21
   18cd8:	ldrls	pc, [pc, r3, lsl #2]
   18cdc:	b	18d68 <__assert_fail@plt+0x7c44>
   18ce0:	andeq	r8, r1, r4, ror sp
   18ce4:	andeq	r8, r1, r4, ror sp
   18ce8:	andeq	r8, r1, r8, ror #26
   18cec:	andeq	r8, r1, r4, ror sp
   18cf0:	andeq	r8, r1, r8, ror #26
   18cf4:	andeq	r8, r1, r4, ror sp
   18cf8:	andeq	r8, r1, r8, ror #26
   18cfc:	andeq	r8, r1, r8, ror #26
   18d00:	andeq	r8, r1, r8, ror #26
   18d04:	andeq	r8, r1, r8, ror #26
   18d08:	andeq	r8, r1, r8, ror #26
   18d0c:	andeq	r8, r1, r8, ror #26
   18d10:	andeq	r8, r1, r8, ror #26
   18d14:	andeq	r8, r1, r8, ror #26
   18d18:	andeq	r8, r1, r8, ror #26
   18d1c:	andeq	r8, r1, r8, ror #26
   18d20:	andeq	r8, r1, r8, ror #26
   18d24:	andeq	r8, r1, r8, ror #26
   18d28:	andeq	r8, r1, r8, ror #26
   18d2c:	andeq	r8, r1, r8, ror #26
   18d30:	andeq	r8, r1, r8, ror #26
   18d34:	andeq	r8, r1, r8, ror #26
   18d38:	andeq	r8, r1, r8, ror #26
   18d3c:	andeq	r8, r1, r8, ror #26
   18d40:	andeq	r8, r1, r8, ror #26
   18d44:	andeq	r8, r1, r8, ror #26
   18d48:	andeq	r8, r1, r8, ror #26
   18d4c:	andeq	r8, r1, r8, ror #26
   18d50:	andeq	r8, r1, r8, ror #26
   18d54:	andeq	r8, r1, r8, ror #26
   18d58:	andeq	r8, r1, r8, ror #26
   18d5c:	andeq	r8, r1, r8, ror #26
   18d60:	andeq	r8, r1, r8, ror #26
   18d64:	andeq	r8, r1, r4, ror sp
   18d68:	cmp	r4, r1
   18d6c:	bne	18ccc <__assert_fail@plt+0x7ba8>
   18d70:	b	18b30 <__assert_fail@plt+0x7a0c>
   18d74:	ldr	fp, [sp, #84]	; 0x54
   18d78:	ldr	sl, [sp, #88]	; 0x58
   18d7c:	mov	r8, #2
   18d80:	b	1823c <__assert_fail@plt+0x7118>
   18d84:	cmp	sl, r4
   18d88:	movls	r1, r4
   18d8c:	bls	1838c <__assert_fail@plt+0x7268>
   18d90:	ldr	r3, [sp, #44]	; 0x2c
   18d94:	b	1837c <__assert_fail@plt+0x7258>
   18d98:	str	sl, [sp, #72]	; 0x48
   18d9c:	ldr	sl, [sp, #32]
   18da0:	b	181b4 <__assert_fail@plt+0x7090>
   18da4:	add	r9, r9, #1
   18da8:	b	17aa8 <__assert_fail@plt+0x6984>
   18dac:	ldr	r2, [sp, #28]
   18db0:	mov	r6, #0
   18db4:	b	18b80 <__assert_fail@plt+0x7a5c>
   18db8:	str	fp, [sp, #160]	; 0xa0
   18dbc:	str	r3, [sp, #28]
   18dc0:	mov	fp, r8
   18dc4:	ldr	r8, [sp, #160]	; 0xa0
   18dc8:	b	1823c <__assert_fail@plt+0x7118>
   18dcc:	str	r6, [sp, #44]	; 0x2c
   18dd0:	ldr	r6, [sp, #48]	; 0x30
   18dd4:	b	181e4 <__assert_fail@plt+0x70c0>
   18dd8:	str	r6, [sp, #44]	; 0x2c
   18ddc:	ldr	r6, [sp, #48]	; 0x30
   18de0:	b	17ff0 <__assert_fail@plt+0x6ecc>
   18de4:	add	r4, r4, #4
   18de8:	str	r3, [sp, #44]	; 0x2c
   18dec:	mov	r6, #0
   18df0:	mov	r5, #48	; 0x30
   18df4:	b	17f78 <__assert_fail@plt+0x6e54>
   18df8:	mov	r7, r3
   18dfc:	b	18c40 <__assert_fail@plt+0x7b1c>
   18e00:	ldr	r3, [pc, #-1624]	; 187b0 <__assert_fail@plt+0x768c>
   18e04:	mov	r4, #1
   18e08:	str	r4, [sp, #40]	; 0x28
   18e0c:	str	r4, [sp, #28]
   18e10:	str	r4, [sp, #52]	; 0x34
   18e14:	str	sl, [sp, #72]	; 0x48
   18e18:	str	sl, [sp, #68]	; 0x44
   18e1c:	str	sl, [sp, #44]	; 0x2c
   18e20:	str	sl, [sp, #32]
   18e24:	str	r3, [sp, #60]	; 0x3c
   18e28:	b	17a98 <__assert_fail@plt+0x6974>
   18e2c:	mov	r3, r6
   18e30:	mov	r5, #48	; 0x30
   18e34:	mov	r6, #0
   18e38:	b	17f78 <__assert_fail@plt+0x6e54>
   18e3c:	cmp	sl, r4
   18e40:	movhi	r3, #48	; 0x30
   18e44:	strbhi	r3, [r8, r4]
   18e48:	add	r3, r1, #2
   18e4c:	cmp	sl, r3
   18e50:	movhi	r0, #48	; 0x30
   18e54:	strbhi	r0, [r8, r3]
   18e58:	add	r4, r1, #3
   18e5c:	mov	r5, #48	; 0x30
   18e60:	b	183c0 <__assert_fail@plt+0x729c>
   18e64:	str	fp, [sp, #160]	; 0xa0
   18e68:	mov	fp, r8
   18e6c:	ldr	r8, [sp, #160]	; 0xa0
   18e70:	b	1823c <__assert_fail@plt+0x7118>
   18e74:	ldr	r2, [sp, #80]	; 0x50
   18e78:	ldrb	r3, [r2]
   18e7c:	cmp	r3, #0
   18e80:	beq	17a68 <__assert_fail@plt+0x6944>
   18e84:	cmp	sl, r4
   18e88:	strbhi	r3, [fp, r4]
   18e8c:	ldrb	r3, [r2, #1]!
   18e90:	add	r4, r4, #1
   18e94:	cmp	r3, #0
   18e98:	bne	18e84 <__assert_fail@plt+0x7d60>
   18e9c:	b	17a68 <__assert_fail@plt+0x6944>
   18ea0:	str	fp, [sp, #160]	; 0xa0
   18ea4:	mov	r3, #0
   18ea8:	mov	fp, r8
   18eac:	ldr	r8, [sp, #160]	; 0xa0
   18eb0:	b	182d0 <__assert_fail@plt+0x71ac>
   18eb4:	mov	ip, r5
   18eb8:	ldr	r7, [sp, #96]	; 0x60
   18ebc:	ldr	r5, [sp, #92]	; 0x5c
   18ec0:	ldr	r4, [sp, #100]	; 0x64
   18ec4:	ldr	r8, [sp, #84]	; 0x54
   18ec8:	ldr	sl, [sp, #88]	; 0x58
   18ecc:	ldr	r2, [sp, #28]
   18ed0:	mov	r6, #0
   18ed4:	b	18b78 <__assert_fail@plt+0x7a54>
   18ed8:	ldr	r2, [sp, #36]	; 0x24
   18edc:	ldrb	r1, [r2, r3]
   18ee0:	sub	r2, r1, #33	; 0x21
   18ee4:	cmp	r2, #29
   18ee8:	ldrls	pc, [pc, r2, lsl #2]
   18eec:	b	18fc8 <__assert_fail@plt+0x7ea4>
   18ef0:	andeq	r8, r1, r8, ror #30
   18ef4:	andeq	r8, r1, r8, asr #31
   18ef8:	andeq	r8, r1, r8, asr #31
   18efc:	andeq	r8, r1, r8, asr #31
   18f00:	andeq	r8, r1, r8, asr #31
   18f04:	andeq	r8, r1, r8, asr #31
   18f08:	andeq	r8, r1, r8, ror #30
   18f0c:	andeq	r8, r1, r8, ror #30
   18f10:	andeq	r8, r1, r8, ror #30
   18f14:	andeq	r8, r1, r8, asr #31
   18f18:	andeq	r8, r1, r8, asr #31
   18f1c:	andeq	r8, r1, r8, asr #31
   18f20:	andeq	r8, r1, r8, ror #30
   18f24:	andeq	r8, r1, r8, asr #31
   18f28:	andeq	r8, r1, r8, ror #30
   18f2c:	andeq	r8, r1, r8, asr #31
   18f30:	andeq	r8, r1, r8, asr #31
   18f34:	andeq	r8, r1, r8, asr #31
   18f38:	andeq	r8, r1, r8, asr #31
   18f3c:	andeq	r8, r1, r8, asr #31
   18f40:	andeq	r8, r1, r8, asr #31
   18f44:	andeq	r8, r1, r8, asr #31
   18f48:	andeq	r8, r1, r8, asr #31
   18f4c:	andeq	r8, r1, r8, asr #31
   18f50:	andeq	r8, r1, r8, asr #31
   18f54:	andeq	r8, r1, r8, asr #31
   18f58:	andeq	r8, r1, r8, asr #31
   18f5c:	andeq	r8, r1, r8, ror #30
   18f60:	andeq	r8, r1, r8, ror #30
   18f64:	andeq	r8, r1, r8, ror #30
   18f68:	ldr	r2, [sp, #32]
   18f6c:	cmp	r2, #0
   18f70:	bne	19074 <__assert_fail@plt+0x7f50>
   18f74:	cmp	sl, r4
   18f78:	movhi	r2, #63	; 0x3f
   18f7c:	strbhi	r2, [r8, r4]
   18f80:	add	r2, r4, #1
   18f84:	cmp	sl, r2
   18f88:	movhi	r0, #34	; 0x22
   18f8c:	strbhi	r0, [r8, r2]
   18f90:	add	r2, r4, #2
   18f94:	cmp	sl, r2
   18f98:	movhi	r0, #34	; 0x22
   18f9c:	strbhi	r0, [r8, r2]
   18fa0:	add	r2, r4, #3
   18fa4:	cmp	sl, r2
   18fa8:	movhi	r0, #63	; 0x3f
   18fac:	strbhi	r0, [r8, r2]
   18fb0:	mov	r2, #0
   18fb4:	add	r4, r4, #4
   18fb8:	mov	r5, r1
   18fbc:	mov	r9, r3
   18fc0:	mov	r6, r2
   18fc4:	b	183c0 <__assert_fail@plt+0x729c>
   18fc8:	mov	r2, #0
   18fcc:	mov	r6, r2
   18fd0:	b	17f30 <__assert_fail@plt+0x6e0c>
   18fd4:	ldr	r0, [sp, #24]
   18fd8:	mov	r1, r4
   18fdc:	cmp	r1, r0
   18fe0:	mov	r2, r7
   18fe4:	mov	r3, r5
   18fe8:	mov	ip, r5
   18fec:	ldr	r7, [sp, #96]	; 0x60
   18ff0:	ldr	r5, [sp, #92]	; 0x5c
   18ff4:	ldr	r4, [sp, #100]	; 0x64
   18ff8:	ldr	r8, [sp, #84]	; 0x54
   18ffc:	ldr	sl, [sp, #88]	; 0x58
   19000:	bcs	19034 <__assert_fail@plt+0x7f10>
   19004:	ldrb	r6, [r2]
   19008:	cmp	r6, #0
   1900c:	bne	19020 <__assert_fail@plt+0x7efc>
   19010:	b	19150 <__assert_fail@plt+0x802c>
   19014:	ldrb	r6, [r2, #1]!
   19018:	cmp	r6, #0
   1901c:	beq	190d8 <__assert_fail@plt+0x7fb4>
   19020:	add	r3, r3, #1
   19024:	add	r1, r9, r3
   19028:	cmp	r1, r0
   1902c:	bcc	19014 <__assert_fail@plt+0x7ef0>
   19030:	mov	ip, r3
   19034:	ldr	r2, [sp, #28]
   19038:	mov	r6, #0
   1903c:	b	18b78 <__assert_fail@plt+0x7a54>
   19040:	mov	r3, #1
   19044:	str	r3, [sp, #40]	; 0x28
   19048:	str	r3, [sp, #32]
   1904c:	str	r3, [sp, #28]
   19050:	str	r3, [sp, #52]	; 0x34
   19054:	ldr	r3, [pc, #-2220]	; 187b0 <__assert_fail@plt+0x768c>
   19058:	mov	r2, #0
   1905c:	str	r2, [sp, #68]	; 0x44
   19060:	str	r2, [sp, #44]	; 0x2c
   19064:	str	r2, [sp, #72]	; 0x48
   19068:	mov	r4, r2
   1906c:	str	r3, [sp, #60]	; 0x3c
   19070:	b	17a98 <__assert_fail@plt+0x6974>
   19074:	str	fp, [sp, #160]	; 0xa0
   19078:	mov	fp, r8
   1907c:	ldr	r8, [sp, #160]	; 0xa0
   19080:	b	18248 <__assert_fail@plt+0x7124>
   19084:	mov	r2, r3
   19088:	ldr	r3, [sp, #60]	; 0x3c
   1908c:	cmp	r3, #0
   19090:	moveq	r2, #0
   19094:	andne	r2, r2, #1
   19098:	cmp	r2, #0
   1909c:	beq	190c8 <__assert_fail@plt+0x7fa4>
   190a0:	mov	r2, r3
   190a4:	ldrb	r3, [r3]
   190a8:	cmp	r3, #0
   190ac:	beq	190c8 <__assert_fail@plt+0x7fa4>
   190b0:	cmp	sl, r4
   190b4:	strbhi	r3, [fp, r4]
   190b8:	ldrb	r3, [r2, #1]!
   190bc:	add	r4, r4, #1
   190c0:	cmp	r3, #0
   190c4:	bne	190b0 <__assert_fail@plt+0x7f8c>
   190c8:	cmp	sl, r4
   190cc:	movhi	r3, #0
   190d0:	strbhi	r3, [fp, r4]
   190d4:	b	18288 <__assert_fail@plt+0x7164>
   190d8:	mov	ip, r3
   190dc:	ldr	r2, [sp, #28]
   190e0:	b	18b78 <__assert_fail@plt+0x7a54>
   190e4:	str	fp, [sp, #160]	; 0xa0
   190e8:	mov	fp, r8
   190ec:	ldr	r8, [sp, #160]	; 0xa0
   190f0:	sub	r3, r8, #2
   190f4:	clz	r3, r3
   190f8:	lsr	r3, r3, #5
   190fc:	str	r3, [sp, #28]
   19100:	b	1823c <__assert_fail@plt+0x7118>
   19104:	ldr	r3, [sp, #76]	; 0x4c
   19108:	mov	ip, #5
   1910c:	str	r3, [sp, #16]
   19110:	ldr	r3, [sp, #80]	; 0x50
   19114:	ldr	r2, [sp, #36]	; 0x24
   19118:	str	r3, [sp, #12]
   1911c:	ldr	r3, [sp, #56]	; 0x38
   19120:	ldr	r1, [sp, #72]	; 0x48
   19124:	str	r3, [sp, #8]
   19128:	ldr	r3, [sp, #164]	; 0xa4
   1912c:	mov	r0, fp
   19130:	str	r3, [sp, #4]
   19134:	str	ip, [sp]
   19138:	ldr	r3, [sp, #24]
   1913c:	bl	179a0 <__assert_fail@plt+0x687c>
   19140:	mov	r4, r0
   19144:	b	18288 <__assert_fail@plt+0x7164>
   19148:	mov	r8, #2
   1914c:	b	1823c <__assert_fail@plt+0x7118>
   19150:	ldr	r2, [sp, #28]
   19154:	b	18b78 <__assert_fail@plt+0x7a54>
   19158:	mov	r3, #0
   1915c:	str	r3, [sp, #68]	; 0x44
   19160:	str	r3, [sp, #44]	; 0x2c
   19164:	str	r3, [sp, #72]	; 0x48
   19168:	str	r3, [sp, #28]
   1916c:	mov	r4, r3
   19170:	ldr	r3, [pc, #-2500]	; 187b4 <__assert_fail@plt+0x7690>
   19174:	mov	r2, #1
   19178:	str	r2, [sp, #40]	; 0x28
   1917c:	str	r2, [sp, #32]
   19180:	str	r2, [sp, #52]	; 0x34
   19184:	str	r3, [sp, #60]	; 0x3c
   19188:	b	17a98 <__assert_fail@plt+0x6974>
   1918c:	bl	10f20 <__stack_chk_fail@plt>
   19190:	mov	r5, r3
   19194:	mov	r6, #0
   19198:	b	17f8c <__assert_fail@plt+0x6e68>
   1919c:	mov	r3, #0
   191a0:	mov	r2, #1
   191a4:	str	r3, [sp, #44]	; 0x2c
   191a8:	str	r3, [sp, #72]	; 0x48
   191ac:	str	r2, [sp, #40]	; 0x28
   191b0:	b	180a8 <__assert_fail@plt+0x6f84>
   191b4:	bl	11118 <abort@plt>
   191b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191bc:	sub	sp, sp, #44	; 0x2c
   191c0:	mov	r6, r0
   191c4:	mov	r4, r3
   191c8:	mov	sl, r1
   191cc:	mov	fp, r2
   191d0:	bl	11028 <__errno_location@plt>
   191d4:	ldr	r7, [pc, #364]	; 19348 <__assert_fail@plt+0x8224>
   191d8:	cmp	r6, #0
   191dc:	ldr	r5, [r7]
   191e0:	ldr	r3, [r0]
   191e4:	str	r3, [sp, #24]
   191e8:	blt	19344 <__assert_fail@plt+0x8220>
   191ec:	ldr	r3, [r7, #4]
   191f0:	mov	r8, r0
   191f4:	cmp	r3, r6
   191f8:	bgt	19244 <__assert_fail@plt+0x8120>
   191fc:	cmn	r6, #-268435454	; 0xf0000002
   19200:	bgt	19340 <__assert_fail@plt+0x821c>
   19204:	add	r9, r6, #1
   19208:	add	r3, r7, #8
   1920c:	cmp	r5, r3
   19210:	lsl	r1, r9, #3
   19214:	beq	19320 <__assert_fail@plt+0x81fc>
   19218:	mov	r0, r5
   1921c:	bl	1a91c <__assert_fail@plt+0x97f8>
   19220:	mov	r5, r0
   19224:	str	r0, [r7]
   19228:	ldr	r0, [r7, #4]
   1922c:	mov	r1, #0
   19230:	sub	r2, r9, r0
   19234:	add	r0, r5, r0, lsl #3
   19238:	lsl	r2, r2, #3
   1923c:	bl	11058 <memset@plt>
   19240:	str	r9, [r7, #4]
   19244:	add	r3, r5, r6, lsl #3
   19248:	ldr	r1, [r4, #4]
   1924c:	ldr	r7, [r3, #4]
   19250:	ldr	r9, [r5, r6, lsl #3]
   19254:	ldr	r2, [r4, #40]	; 0x28
   19258:	ldr	ip, [r4, #44]	; 0x2c
   1925c:	str	r3, [sp, #28]
   19260:	ldr	r3, [r4]
   19264:	orr	r1, r1, #1
   19268:	add	lr, r4, #8
   1926c:	str	r1, [sp, #36]	; 0x24
   19270:	str	r1, [sp, #4]
   19274:	str	r2, [sp, #12]
   19278:	str	r3, [sp]
   1927c:	mov	r0, r7
   19280:	mov	r1, r9
   19284:	str	ip, [sp, #16]
   19288:	str	lr, [sp, #8]
   1928c:	mov	r3, fp
   19290:	mov	r2, sl
   19294:	str	lr, [sp, #32]
   19298:	bl	179a0 <__assert_fail@plt+0x687c>
   1929c:	cmp	r9, r0
   192a0:	bhi	1930c <__assert_fail@plt+0x81e8>
   192a4:	ldr	r3, [pc, #160]	; 1934c <__assert_fail@plt+0x8228>
   192a8:	add	r9, r0, #1
   192ac:	cmp	r7, r3
   192b0:	str	r9, [r5, r6, lsl #3]
   192b4:	beq	192c0 <__assert_fail@plt+0x819c>
   192b8:	mov	r0, r7
   192bc:	bl	10ecc <free@plt>
   192c0:	mov	r0, r9
   192c4:	bl	1a8c0 <__assert_fail@plt+0x979c>
   192c8:	ldr	lr, [sp, #28]
   192cc:	ldr	ip, [r4, #44]	; 0x2c
   192d0:	ldr	r5, [r4, #40]	; 0x28
   192d4:	mov	r3, fp
   192d8:	mov	r2, sl
   192dc:	mov	r1, r9
   192e0:	str	r0, [lr, #4]
   192e4:	ldr	lr, [r4]
   192e8:	ldr	r4, [sp, #32]
   192ec:	str	ip, [sp, #16]
   192f0:	str	r4, [sp, #8]
   192f4:	ldr	r4, [sp, #36]	; 0x24
   192f8:	str	r5, [sp, #12]
   192fc:	str	r4, [sp, #4]
   19300:	str	lr, [sp]
   19304:	mov	r7, r0
   19308:	bl	179a0 <__assert_fail@plt+0x687c>
   1930c:	ldr	r3, [sp, #24]
   19310:	mov	r0, r7
   19314:	str	r3, [r8]
   19318:	add	sp, sp, #44	; 0x2c
   1931c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19320:	mov	r0, #0
   19324:	bl	1a91c <__assert_fail@plt+0x97f8>
   19328:	ldr	r3, [pc, #32]	; 19350 <__assert_fail@plt+0x822c>
   1932c:	mov	r5, r0
   19330:	ldm	r3, {r0, r1}
   19334:	str	r5, [r7]
   19338:	stm	r5, {r0, r1}
   1933c:	b	19228 <__assert_fail@plt+0x8104>
   19340:	bl	1ab08 <__assert_fail@plt+0x99e4>
   19344:	bl	11118 <abort@plt>
   19348:	andeq	r1, r3, r4, lsl r1
   1934c:	muleq	r3, r4, r1
   19350:	andeq	r1, r3, ip, lsl r1
   19354:	push	{r4, r5, r6, lr}
   19358:	mov	r5, r0
   1935c:	bl	11028 <__errno_location@plt>
   19360:	cmp	r5, #0
   19364:	mov	r1, #48	; 0x30
   19368:	mov	r4, r0
   1936c:	ldr	r0, [pc, #16]	; 19384 <__assert_fail@plt+0x8260>
   19370:	ldr	r6, [r4]
   19374:	movne	r0, r5
   19378:	bl	1aac8 <__assert_fail@plt+0x99a4>
   1937c:	str	r6, [r4]
   19380:	pop	{r4, r5, r6, pc}
   19384:	muleq	r3, r4, r2
   19388:	ldr	r3, [pc, #12]	; 1939c <__assert_fail@plt+0x8278>
   1938c:	cmp	r0, #0
   19390:	moveq	r0, r3
   19394:	ldr	r0, [r0]
   19398:	bx	lr
   1939c:	muleq	r3, r4, r2
   193a0:	ldr	r3, [pc, #12]	; 193b4 <__assert_fail@plt+0x8290>
   193a4:	cmp	r0, #0
   193a8:	moveq	r0, r3
   193ac:	str	r1, [r0]
   193b0:	bx	lr
   193b4:	muleq	r3, r4, r2
   193b8:	ldr	r3, [pc, #52]	; 193f4 <__assert_fail@plt+0x82d0>
   193bc:	cmp	r0, #0
   193c0:	moveq	r0, r3
   193c4:	add	r3, r0, #8
   193c8:	push	{lr}		; (str lr, [sp, #-4]!)
   193cc:	lsr	lr, r1, #5
   193d0:	and	r1, r1, #31
   193d4:	ldr	ip, [r3, lr, lsl #2]
   193d8:	lsr	r0, ip, r1
   193dc:	eor	r2, r2, r0
   193e0:	and	r2, r2, #1
   193e4:	and	r0, r0, #1
   193e8:	eor	r1, ip, r2, lsl r1
   193ec:	str	r1, [r3, lr, lsl #2]
   193f0:	pop	{pc}		; (ldr pc, [sp], #4)
   193f4:	muleq	r3, r4, r2
   193f8:	ldr	r3, [pc, #16]	; 19410 <__assert_fail@plt+0x82ec>
   193fc:	cmp	r0, #0
   19400:	movne	r3, r0
   19404:	ldr	r0, [r3, #4]
   19408:	str	r1, [r3, #4]
   1940c:	bx	lr
   19410:	muleq	r3, r4, r2
   19414:	ldr	r3, [pc, #44]	; 19448 <__assert_fail@plt+0x8324>
   19418:	cmp	r0, #0
   1941c:	moveq	r0, r3
   19420:	mov	ip, #10
   19424:	cmp	r2, #0
   19428:	cmpne	r1, #0
   1942c:	str	ip, [r0]
   19430:	beq	19440 <__assert_fail@plt+0x831c>
   19434:	str	r1, [r0, #40]	; 0x28
   19438:	str	r2, [r0, #44]	; 0x2c
   1943c:	bx	lr
   19440:	push	{r4, lr}
   19444:	bl	11118 <abort@plt>
   19448:	muleq	r3, r4, r2
   1944c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19450:	sub	sp, sp, #24
   19454:	ldr	ip, [pc, #108]	; 194c8 <__assert_fail@plt+0x83a4>
   19458:	ldr	r4, [sp, #56]	; 0x38
   1945c:	mov	r9, r2
   19460:	cmp	r4, #0
   19464:	moveq	r4, ip
   19468:	mov	sl, r3
   1946c:	mov	r7, r0
   19470:	mov	r8, r1
   19474:	bl	11028 <__errno_location@plt>
   19478:	ldr	r3, [r4, #44]	; 0x2c
   1947c:	mov	r1, r8
   19480:	ldr	r6, [r0]
   19484:	str	r3, [sp, #16]
   19488:	ldr	r2, [r4, #40]	; 0x28
   1948c:	add	r3, r4, #8
   19490:	str	r3, [sp, #8]
   19494:	str	r2, [sp, #12]
   19498:	ldr	r2, [r4, #4]
   1949c:	mov	r5, r0
   194a0:	str	r2, [sp, #4]
   194a4:	ldr	ip, [r4]
   194a8:	mov	r3, sl
   194ac:	mov	r2, r9
   194b0:	mov	r0, r7
   194b4:	str	ip, [sp]
   194b8:	bl	179a0 <__assert_fail@plt+0x687c>
   194bc:	str	r6, [r5]
   194c0:	add	sp, sp, #24
   194c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194c8:	muleq	r3, r4, r2
   194cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194d0:	cmp	r3, #0
   194d4:	sub	sp, sp, #44	; 0x2c
   194d8:	ldr	r4, [pc, #192]	; 195a0 <__assert_fail@plt+0x847c>
   194dc:	mov	r6, r2
   194e0:	movne	r4, r3
   194e4:	mov	r9, r1
   194e8:	mov	r8, r0
   194ec:	bl	11028 <__errno_location@plt>
   194f0:	ldr	r3, [r4, #44]	; 0x2c
   194f4:	ldr	r5, [r4, #4]
   194f8:	add	sl, r4, #8
   194fc:	cmp	r6, #0
   19500:	orreq	r5, r5, #1
   19504:	mov	r1, #0
   19508:	ldr	r2, [r0]
   1950c:	str	r3, [sp, #16]
   19510:	ldr	r3, [r4, #40]	; 0x28
   19514:	stmib	sp, {r5, sl}
   19518:	str	r3, [sp, #12]
   1951c:	ldr	r3, [r4]
   19520:	mov	r7, r0
   19524:	str	r2, [sp, #28]
   19528:	str	r3, [sp]
   1952c:	mov	r2, r8
   19530:	mov	r3, r9
   19534:	mov	r0, r1
   19538:	bl	179a0 <__assert_fail@plt+0x687c>
   1953c:	add	r1, r0, #1
   19540:	mov	fp, r0
   19544:	mov	r0, r1
   19548:	str	r1, [sp, #36]	; 0x24
   1954c:	bl	1a8c0 <__assert_fail@plt+0x979c>
   19550:	ldr	r3, [r4, #44]	; 0x2c
   19554:	mov	r2, r8
   19558:	str	r3, [sp, #16]
   1955c:	ldr	r3, [r4, #40]	; 0x28
   19560:	str	r5, [sp, #4]
   19564:	str	r3, [sp, #12]
   19568:	str	sl, [sp, #8]
   1956c:	ldr	ip, [r4]
   19570:	ldr	r1, [sp, #36]	; 0x24
   19574:	mov	r3, r9
   19578:	str	ip, [sp]
   1957c:	str	r0, [sp, #32]
   19580:	bl	179a0 <__assert_fail@plt+0x687c>
   19584:	ldr	r2, [sp, #28]
   19588:	cmp	r6, #0
   1958c:	str	r2, [r7]
   19590:	ldr	r0, [sp, #32]
   19594:	strne	fp, [r6]
   19598:	add	sp, sp, #44	; 0x2c
   1959c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195a0:	muleq	r3, r4, r2
   195a4:	mov	r3, r2
   195a8:	mov	r2, #0
   195ac:	b	194cc <__assert_fail@plt+0x83a8>
   195b0:	push	{r4, r5, r6, r7, r8, lr}
   195b4:	ldr	r6, [pc, #112]	; 1962c <__assert_fail@plt+0x8508>
   195b8:	ldr	r3, [r6, #4]
   195bc:	ldr	r7, [r6]
   195c0:	cmp	r3, #1
   195c4:	ble	195e8 <__assert_fail@plt+0x84c4>
   195c8:	sub	r5, r7, #8
   195cc:	add	r5, r5, r3, lsl #3
   195d0:	mov	r4, r7
   195d4:	ldr	r0, [r4, #12]
   195d8:	add	r4, r4, #8
   195dc:	bl	10ecc <free@plt>
   195e0:	cmp	r4, r5
   195e4:	bne	195d4 <__assert_fail@plt+0x84b0>
   195e8:	ldr	r0, [r7, #4]
   195ec:	ldr	r4, [pc, #60]	; 19630 <__assert_fail@plt+0x850c>
   195f0:	cmp	r0, r4
   195f4:	beq	19608 <__assert_fail@plt+0x84e4>
   195f8:	bl	10ecc <free@plt>
   195fc:	mov	r3, #256	; 0x100
   19600:	str	r4, [r6, #12]
   19604:	str	r3, [r6, #8]
   19608:	ldr	r4, [pc, #36]	; 19634 <__assert_fail@plt+0x8510>
   1960c:	cmp	r7, r4
   19610:	beq	19620 <__assert_fail@plt+0x84fc>
   19614:	mov	r0, r7
   19618:	bl	10ecc <free@plt>
   1961c:	str	r4, [r6]
   19620:	mov	r3, #1
   19624:	str	r3, [r6, #4]
   19628:	pop	{r4, r5, r6, r7, r8, pc}
   1962c:	andeq	r1, r3, r4, lsl r1
   19630:	muleq	r3, r4, r1
   19634:	andeq	r1, r3, ip, lsl r1
   19638:	ldr	r3, [pc, #4]	; 19644 <__assert_fail@plt+0x8520>
   1963c:	mvn	r2, #0
   19640:	b	191b8 <__assert_fail@plt+0x8094>
   19644:	muleq	r3, r4, r2
   19648:	ldr	r3, [pc]	; 19650 <__assert_fail@plt+0x852c>
   1964c:	b	191b8 <__assert_fail@plt+0x8094>
   19650:	muleq	r3, r4, r2
   19654:	mov	r1, r0
   19658:	ldr	r3, [pc, #8]	; 19668 <__assert_fail@plt+0x8544>
   1965c:	mvn	r2, #0
   19660:	mov	r0, #0
   19664:	b	191b8 <__assert_fail@plt+0x8094>
   19668:	muleq	r3, r4, r2
   1966c:	mov	r2, r1
   19670:	ldr	r3, [pc, #8]	; 19680 <__assert_fail@plt+0x855c>
   19674:	mov	r1, r0
   19678:	mov	r0, #0
   1967c:	b	191b8 <__assert_fail@plt+0x8094>
   19680:	muleq	r3, r4, r2
   19684:	push	{r4, r5, r6, lr}
   19688:	sub	sp, sp, #56	; 0x38
   1968c:	ldr	r4, [pc, #68]	; 196d8 <__assert_fail@plt+0x85b4>
   19690:	mov	r6, r2
   19694:	mov	r5, r0
   19698:	ldr	r3, [r4]
   1969c:	add	r0, sp, #4
   196a0:	str	r3, [sp, #52]	; 0x34
   196a4:	bl	17830 <__assert_fail@plt+0x670c>
   196a8:	add	r3, sp, #4
   196ac:	mvn	r2, #0
   196b0:	mov	r1, r6
   196b4:	mov	r0, r5
   196b8:	bl	191b8 <__assert_fail@plt+0x8094>
   196bc:	ldr	r2, [sp, #52]	; 0x34
   196c0:	ldr	r3, [r4]
   196c4:	cmp	r2, r3
   196c8:	bne	196d4 <__assert_fail@plt+0x85b0>
   196cc:	add	sp, sp, #56	; 0x38
   196d0:	pop	{r4, r5, r6, pc}
   196d4:	bl	10f20 <__stack_chk_fail@plt>
   196d8:	andeq	r0, r3, r8, lsl #30
   196dc:	push	{r4, r5, r6, r7, lr}
   196e0:	sub	sp, sp, #60	; 0x3c
   196e4:	ldr	r4, [pc, #72]	; 19734 <__assert_fail@plt+0x8610>
   196e8:	mov	r6, r2
   196ec:	mov	r7, r3
   196f0:	ldr	ip, [r4]
   196f4:	mov	r5, r0
   196f8:	add	r0, sp, #4
   196fc:	str	ip, [sp, #52]	; 0x34
   19700:	bl	17830 <__assert_fail@plt+0x670c>
   19704:	add	r3, sp, #4
   19708:	mov	r2, r7
   1970c:	mov	r1, r6
   19710:	mov	r0, r5
   19714:	bl	191b8 <__assert_fail@plt+0x8094>
   19718:	ldr	r2, [sp, #52]	; 0x34
   1971c:	ldr	r3, [r4]
   19720:	cmp	r2, r3
   19724:	bne	19730 <__assert_fail@plt+0x860c>
   19728:	add	sp, sp, #60	; 0x3c
   1972c:	pop	{r4, r5, r6, r7, pc}
   19730:	bl	10f20 <__stack_chk_fail@plt>
   19734:	andeq	r0, r3, r8, lsl #30
   19738:	mov	r2, r1
   1973c:	mov	r1, r0
   19740:	mov	r0, #0
   19744:	b	19684 <__assert_fail@plt+0x8560>
   19748:	mov	r3, r2
   1974c:	mov	r2, r1
   19750:	mov	r1, r0
   19754:	mov	r0, #0
   19758:	b	196dc <__assert_fail@plt+0x85b8>
   1975c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19760:	mov	r4, r2
   19764:	ldr	lr, [pc, #128]	; 197ec <__assert_fail@plt+0x86c8>
   19768:	mov	r8, r0
   1976c:	mov	r9, r1
   19770:	ldm	lr!, {r0, r1, r2, r3}
   19774:	sub	sp, sp, #60	; 0x3c
   19778:	add	ip, sp, #4
   1977c:	lsr	r6, r4, #5
   19780:	stmia	ip!, {r0, r1, r2, r3}
   19784:	add	r7, sp, #12
   19788:	ldm	lr!, {r0, r1, r2, r3}
   1978c:	and	r4, r4, #31
   19790:	ldr	r5, [pc, #88]	; 197f0 <__assert_fail@plt+0x86cc>
   19794:	stmia	ip!, {r0, r1, r2, r3}
   19798:	ldm	lr, {r0, r1, r2, r3}
   1979c:	stm	ip, {r0, r1, r2, r3}
   197a0:	mov	r2, r9
   197a4:	ldr	r3, [r7, r6, lsl #2]
   197a8:	ldr	ip, [r5]
   197ac:	mov	r1, r8
   197b0:	mvn	r0, r3, lsr r4
   197b4:	and	r0, r0, #1
   197b8:	str	ip, [sp, #52]	; 0x34
   197bc:	eor	r4, r3, r0, lsl r4
   197c0:	add	r3, sp, #4
   197c4:	mov	r0, #0
   197c8:	str	r4, [r7, r6, lsl #2]
   197cc:	bl	191b8 <__assert_fail@plt+0x8094>
   197d0:	ldr	r2, [sp, #52]	; 0x34
   197d4:	ldr	r3, [r5]
   197d8:	cmp	r2, r3
   197dc:	bne	197e8 <__assert_fail@plt+0x86c4>
   197e0:	add	sp, sp, #60	; 0x3c
   197e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   197e8:	bl	10f20 <__stack_chk_fail@plt>
   197ec:	muleq	r3, r4, r2
   197f0:	andeq	r0, r3, r8, lsl #30
   197f4:	mov	r2, r1
   197f8:	mvn	r1, #0
   197fc:	b	1975c <__assert_fail@plt+0x8638>
   19800:	mov	r2, #58	; 0x3a
   19804:	mvn	r1, #0
   19808:	b	1975c <__assert_fail@plt+0x8638>
   1980c:	mov	r2, #58	; 0x3a
   19810:	b	1975c <__assert_fail@plt+0x8638>
   19814:	push	{r4, r5, r6, r7, r8, lr}
   19818:	sub	sp, sp, #104	; 0x68
   1981c:	ldr	r5, [pc, #120]	; 1989c <__assert_fail@plt+0x8778>
   19820:	mov	r6, r0
   19824:	mov	r0, sp
   19828:	ldr	r3, [r5]
   1982c:	mov	r7, r2
   19830:	str	r3, [sp, #100]	; 0x64
   19834:	bl	17830 <__assert_fail@plt+0x670c>
   19838:	mov	ip, sp
   1983c:	add	lr, sp, #52	; 0x34
   19840:	ldm	ip!, {r0, r1, r2, r3}
   19844:	stmia	lr!, {r0, r1, r2, r3}
   19848:	ldm	ip!, {r0, r1, r2, r3}
   1984c:	ldr	r8, [sp, #64]	; 0x40
   19850:	stmia	lr!, {r0, r1, r2, r3}
   19854:	mvn	r4, r8
   19858:	ldm	ip, {r0, r1, r2, r3}
   1985c:	and	ip, r4, #67108864	; 0x4000000
   19860:	eor	ip, ip, r8
   19864:	str	ip, [sp, #64]	; 0x40
   19868:	stm	lr, {r0, r1, r2, r3}
   1986c:	add	r3, sp, #52	; 0x34
   19870:	mvn	r2, #0
   19874:	mov	r1, r7
   19878:	mov	r0, r6
   1987c:	bl	191b8 <__assert_fail@plt+0x8094>
   19880:	ldr	r2, [sp, #100]	; 0x64
   19884:	ldr	r3, [r5]
   19888:	cmp	r2, r3
   1988c:	bne	19898 <__assert_fail@plt+0x8774>
   19890:	add	sp, sp, #104	; 0x68
   19894:	pop	{r4, r5, r6, r7, r8, pc}
   19898:	bl	10f20 <__stack_chk_fail@plt>
   1989c:	andeq	r0, r3, r8, lsl #30
   198a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   198a4:	mov	r6, r1
   198a8:	ldr	lr, [pc, #132]	; 19934 <__assert_fail@plt+0x8810>
   198ac:	mov	r5, r2
   198b0:	mov	r8, r0
   198b4:	mov	r9, r3
   198b8:	ldm	lr!, {r0, r1, r2, r3}
   198bc:	sub	sp, sp, #60	; 0x3c
   198c0:	add	ip, sp, #4
   198c4:	ldr	r4, [pc, #108]	; 19938 <__assert_fail@plt+0x8814>
   198c8:	stmia	ip!, {r0, r1, r2, r3}
   198cc:	mov	r7, #10
   198d0:	ldm	lr!, {r0, r1, r2, r3}
   198d4:	cmp	r5, #0
   198d8:	cmpne	r6, #0
   198dc:	str	r7, [sp, #4]
   198e0:	stmia	ip!, {r0, r1, r2, r3}
   198e4:	ldm	lr, {r0, r1, r2, r3}
   198e8:	ldr	lr, [r4]
   198ec:	stm	ip, {r0, r1, r2, r3}
   198f0:	str	lr, [sp, #52]	; 0x34
   198f4:	beq	19930 <__assert_fail@plt+0x880c>
   198f8:	add	r3, sp, #4
   198fc:	ldr	r2, [sp, #88]	; 0x58
   19900:	mov	r1, r9
   19904:	mov	r0, r8
   19908:	str	r6, [sp, #44]	; 0x2c
   1990c:	str	r5, [sp, #48]	; 0x30
   19910:	bl	191b8 <__assert_fail@plt+0x8094>
   19914:	ldr	r2, [sp, #52]	; 0x34
   19918:	ldr	r3, [r4]
   1991c:	cmp	r2, r3
   19920:	bne	1992c <__assert_fail@plt+0x8808>
   19924:	add	sp, sp, #60	; 0x3c
   19928:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1992c:	bl	10f20 <__stack_chk_fail@plt>
   19930:	bl	11118 <abort@plt>
   19934:	muleq	r3, r4, r2
   19938:	andeq	r0, r3, r8, lsl #30
   1993c:	push	{lr}		; (str lr, [sp, #-4]!)
   19940:	sub	sp, sp, #12
   19944:	mvn	ip, #0
   19948:	str	ip, [sp]
   1994c:	bl	198a0 <__assert_fail@plt+0x877c>
   19950:	add	sp, sp, #12
   19954:	pop	{pc}		; (ldr pc, [sp], #4)
   19958:	push	{lr}		; (str lr, [sp, #-4]!)
   1995c:	sub	sp, sp, #12
   19960:	mvn	ip, #0
   19964:	mov	r3, r2
   19968:	str	ip, [sp]
   1996c:	mov	r2, r1
   19970:	mov	r1, r0
   19974:	mov	r0, #0
   19978:	bl	198a0 <__assert_fail@plt+0x877c>
   1997c:	add	sp, sp, #12
   19980:	pop	{pc}		; (ldr pc, [sp], #4)
   19984:	push	{lr}		; (str lr, [sp, #-4]!)
   19988:	sub	sp, sp, #12
   1998c:	str	r3, [sp]
   19990:	mov	r3, r2
   19994:	mov	r2, r1
   19998:	mov	r1, r0
   1999c:	mov	r0, #0
   199a0:	bl	198a0 <__assert_fail@plt+0x877c>
   199a4:	add	sp, sp, #12
   199a8:	pop	{pc}		; (ldr pc, [sp], #4)
   199ac:	ldr	r3, [pc]	; 199b4 <__assert_fail@plt+0x8890>
   199b0:	b	191b8 <__assert_fail@plt+0x8094>
   199b4:	andeq	r1, r3, r4, lsr #2
   199b8:	mov	r2, r1
   199bc:	ldr	r3, [pc, #8]	; 199cc <__assert_fail@plt+0x88a8>
   199c0:	mov	r1, r0
   199c4:	mov	r0, #0
   199c8:	b	191b8 <__assert_fail@plt+0x8094>
   199cc:	andeq	r1, r3, r4, lsr #2
   199d0:	ldr	r3, [pc, #4]	; 199dc <__assert_fail@plt+0x88b8>
   199d4:	mvn	r2, #0
   199d8:	b	191b8 <__assert_fail@plt+0x8094>
   199dc:	andeq	r1, r3, r4, lsr #2
   199e0:	mov	r1, r0
   199e4:	ldr	r3, [pc, #8]	; 199f4 <__assert_fail@plt+0x88d0>
   199e8:	mvn	r2, #0
   199ec:	mov	r0, #0
   199f0:	b	191b8 <__assert_fail@plt+0x8094>
   199f4:	andeq	r1, r3, r4, lsr #2
   199f8:	mov	r3, #0
   199fc:	str	r3, [r0]
   19a00:	str	r3, [r0, #4]
   19a04:	bx	lr
   19a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a0c:	sub	sp, sp, #44	; 0x2c
   19a10:	ldr	r7, [pc, #460]	; 19be4 <__assert_fail@plt+0x8ac0>
   19a14:	add	r4, sp, #4
   19a18:	mov	r8, r1
   19a1c:	ldr	ip, [r7]
   19a20:	mov	r9, r2
   19a24:	mov	r1, #0
   19a28:	mov	r5, r0
   19a2c:	mov	r2, #32
   19a30:	mov	r0, r4
   19a34:	str	ip, [sp, #36]	; 0x24
   19a38:	mov	r6, r3
   19a3c:	bl	11058 <memset@plt>
   19a40:	cmp	r9, #0
   19a44:	addne	ip, r8, r9
   19a48:	subne	r1, r8, #1
   19a4c:	movne	lr, #1
   19a50:	subne	ip, ip, #1
   19a54:	beq	19ab4 <__assert_fail@plt+0x8990>
   19a58:	ldrb	r3, [r1, #1]!
   19a5c:	and	r0, r3, #31
   19a60:	lsr	r3, r3, #5
   19a64:	cmp	ip, r1
   19a68:	ldr	r2, [r4, r3, lsl #2]
   19a6c:	orr	r2, r2, lr, lsl r0
   19a70:	str	r2, [r4, r3, lsl #2]
   19a74:	bne	19a58 <__assert_fail@plt+0x8934>
   19a78:	ldr	r3, [r5, #4]
   19a7c:	ldr	r2, [r5, #8]
   19a80:	cmp	r3, r2
   19a84:	bcs	19ac4 <__assert_fail@plt+0x89a0>
   19a88:	add	r2, r3, #1
   19a8c:	str	r2, [r5, #4]
   19a90:	ldrb	r4, [r3]
   19a94:	lsr	r3, r4, #5
   19a98:	add	r2, sp, #40	; 0x28
   19a9c:	add	r3, r2, r3, lsl #2
   19aa0:	and	r1, r4, #31
   19aa4:	ldr	r2, [r3, #-36]	; 0xffffffdc
   19aa8:	lsr	r3, r2, r1
   19aac:	tst	r3, #1
   19ab0:	beq	19ad4 <__assert_fail@plt+0x89b0>
   19ab4:	ldr	r3, [r5, #4]
   19ab8:	ldr	r2, [r5, #8]
   19abc:	cmp	r3, r2
   19ac0:	bcc	19a88 <__assert_fail@plt+0x8964>
   19ac4:	mov	r0, r5
   19ac8:	bl	110c4 <__uflow@plt>
   19acc:	subs	r4, r0, #0
   19ad0:	bge	19a94 <__assert_fail@plt+0x8970>
   19ad4:	ldrd	sl, [r6]
   19ad8:	ldr	r8, [pc, #264]	; 19be8 <__assert_fail@plt+0x8ac4>
   19adc:	mov	r9, #0
   19ae0:	b	19b34 <__assert_fail@plt+0x8a10>
   19ae4:	cmp	r4, #0
   19ae8:	add	r1, fp, r9
   19aec:	blt	19b80 <__assert_fail@plt+0x8a5c>
   19af0:	lsr	r3, r4, #5
   19af4:	add	r2, sp, #40	; 0x28
   19af8:	add	r3, r2, r3, lsl #2
   19afc:	and	r0, r4, #31
   19b00:	ldr	r2, [r3, #-36]	; 0xffffffdc
   19b04:	lsr	r3, r2, r0
   19b08:	tst	r3, #1
   19b0c:	bne	19b80 <__assert_fail@plt+0x8a5c>
   19b10:	strb	r4, [r1]
   19b14:	ldr	r3, [r5, #4]
   19b18:	ldr	r2, [r5, #8]
   19b1c:	add	r9, r9, #1
   19b20:	cmp	r3, r2
   19b24:	bcs	19ba8 <__assert_fail@plt+0x8a84>
   19b28:	add	r2, r3, #1
   19b2c:	str	r2, [r5, #4]
   19b30:	ldrb	r4, [r3]
   19b34:	clz	r3, r9
   19b38:	lsr	r3, r3, #5
   19b3c:	ands	r3, r3, r4, lsr #31
   19b40:	bne	19bc4 <__assert_fail@plt+0x8aa0>
   19b44:	cmp	r9, sl
   19b48:	bne	19ae4 <__assert_fail@plt+0x89c0>
   19b4c:	cmp	fp, #0
   19b50:	beq	19bcc <__assert_fail@plt+0x8aa8>
   19b54:	cmp	r9, r8
   19b58:	bhi	19bdc <__assert_fail@plt+0x8ab8>
   19b5c:	add	sl, r9, #1
   19b60:	add	sl, sl, r9, lsr #1
   19b64:	mov	r0, fp
   19b68:	mov	r1, sl
   19b6c:	bl	1a91c <__assert_fail@plt+0x97f8>
   19b70:	cmp	r4, #0
   19b74:	mov	fp, r0
   19b78:	add	r1, fp, r9
   19b7c:	bge	19af0 <__assert_fail@plt+0x89cc>
   19b80:	mov	r3, #0
   19b84:	strb	r3, [r1]
   19b88:	strd	sl, [r6]
   19b8c:	ldr	r2, [sp, #36]	; 0x24
   19b90:	ldr	r3, [r7]
   19b94:	mov	r0, r9
   19b98:	cmp	r2, r3
   19b9c:	bne	19be0 <__assert_fail@plt+0x8abc>
   19ba0:	add	sp, sp, #44	; 0x2c
   19ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ba8:	mov	r0, r5
   19bac:	bl	110c4 <__uflow@plt>
   19bb0:	clz	r3, r9
   19bb4:	lsr	r3, r3, #5
   19bb8:	mov	r4, r0
   19bbc:	ands	r3, r3, r4, lsr #31
   19bc0:	beq	19b44 <__assert_fail@plt+0x8a20>
   19bc4:	mvn	r9, #0
   19bc8:	b	19b8c <__assert_fail@plt+0x8a68>
   19bcc:	cmp	r9, #0
   19bd0:	moveq	sl, #64	; 0x40
   19bd4:	beq	19b64 <__assert_fail@plt+0x8a40>
   19bd8:	bge	19b64 <__assert_fail@plt+0x8a40>
   19bdc:	bl	1ab08 <__assert_fail@plt+0x99e4>
   19be0:	bl	10f20 <__stack_chk_fail@plt>
   19be4:	andeq	r0, r3, r8, lsl #30
   19be8:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   19bec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bf0:	sub	sp, sp, #36	; 0x24
   19bf4:	mov	sl, r3
   19bf8:	str	r0, [sp]
   19bfc:	ldr	r0, [pc, #428]	; 19db0 <__assert_fail@plt+0x8c8c>
   19c00:	ldr	r3, [sp, #72]	; 0x48
   19c04:	cmp	r1, #0
   19c08:	ldr	r0, [r0]
   19c0c:	str	r3, [sp, #12]
   19c10:	ldr	r3, [sp, #76]	; 0x4c
   19c14:	mov	r9, r2
   19c18:	str	r0, [sp, #28]
   19c1c:	str	r3, [sp, #8]
   19c20:	beq	19c48 <__assert_fail@plt+0x8b24>
   19c24:	add	r5, r1, #1
   19c28:	lsrs	r3, r5, #30
   19c2c:	movne	r3, #1
   19c30:	moveq	r3, #0
   19c34:	lsls	r4, r5, #2
   19c38:	bmi	19c44 <__assert_fail@plt+0x8b20>
   19c3c:	cmp	r3, #0
   19c40:	beq	19c50 <__assert_fail@plt+0x8b2c>
   19c44:	bl	1ab08 <__assert_fail@plt+0x99e4>
   19c48:	mov	r4, #256	; 0x100
   19c4c:	mov	r5, #64	; 0x40
   19c50:	mov	r0, r4
   19c54:	bl	1a8c0 <__assert_fail@plt+0x979c>
   19c58:	mov	r6, r0
   19c5c:	mov	r0, r4
   19c60:	bl	1a8c0 <__assert_fail@plt+0x979c>
   19c64:	mov	r3, #0
   19c68:	mov	r4, r3
   19c6c:	str	r3, [sp, #20]
   19c70:	str	r3, [sp, #24]
   19c74:	mov	r7, r0
   19c78:	b	19cac <__assert_fail@plt+0x8b88>
   19c7c:	cmn	r8, #1
   19c80:	beq	19d1c <__assert_fail@plt+0x8bf8>
   19c84:	adds	fp, r8, #1
   19c88:	bmi	19c44 <__assert_fail@plt+0x8b20>
   19c8c:	mov	r0, fp
   19c90:	bl	1a8c0 <__assert_fail@plt+0x979c>
   19c94:	str	r8, [r7, r4, lsl #2]
   19c98:	mov	r2, fp
   19c9c:	ldr	r1, [sp, #24]
   19ca0:	bl	10ee4 <memcpy@plt>
   19ca4:	str	r0, [r6, r4, lsl #2]
   19ca8:	add	r4, r4, #1
   19cac:	add	r3, sp, #20
   19cb0:	mov	r2, sl
   19cb4:	mov	r1, r9
   19cb8:	ldr	r0, [sp]
   19cbc:	bl	19a08 <__assert_fail@plt+0x88e4>
   19cc0:	cmp	r4, r5
   19cc4:	mov	r8, r0
   19cc8:	bcc	19c7c <__assert_fail@plt+0x8b58>
   19ccc:	cmp	r6, #0
   19cd0:	beq	19d6c <__assert_fail@plt+0x8c48>
   19cd4:	ldr	r3, [pc, #216]	; 19db4 <__assert_fail@plt+0x8c90>
   19cd8:	cmp	r5, r3
   19cdc:	bhi	19c44 <__assert_fail@plt+0x8b20>
   19ce0:	add	r3, r5, #1
   19ce4:	add	r5, r3, r5, lsr #1
   19ce8:	lsl	r3, r5, #2
   19cec:	mov	r1, r3
   19cf0:	mov	r0, r6
   19cf4:	str	r3, [sp, #4]
   19cf8:	bl	1a91c <__assert_fail@plt+0x97f8>
   19cfc:	ldr	r3, [sp, #4]
   19d00:	mov	r1, r3
   19d04:	mov	r6, r0
   19d08:	mov	r0, r7
   19d0c:	bl	1a91c <__assert_fail@plt+0x97f8>
   19d10:	cmn	r8, #1
   19d14:	mov	r7, r0
   19d18:	bne	19c84 <__assert_fail@plt+0x8b60>
   19d1c:	mov	r3, #0
   19d20:	str	r3, [r6, r4, lsl #2]
   19d24:	ldr	r0, [sp, #24]
   19d28:	str	r3, [r7, r4, lsl #2]
   19d2c:	bl	10ecc <free@plt>
   19d30:	ldr	r3, [sp, #8]
   19d34:	cmp	r3, #0
   19d38:	ldr	r3, [sp, #12]
   19d3c:	str	r6, [r3]
   19d40:	beq	19da0 <__assert_fail@plt+0x8c7c>
   19d44:	ldr	r3, [sp, #8]
   19d48:	str	r7, [r3]
   19d4c:	ldr	r3, [pc, #92]	; 19db0 <__assert_fail@plt+0x8c8c>
   19d50:	ldr	r2, [sp, #28]
   19d54:	mov	r0, r4
   19d58:	ldr	r3, [r3]
   19d5c:	cmp	r2, r3
   19d60:	bne	19dac <__assert_fail@plt+0x8c88>
   19d64:	add	sp, sp, #36	; 0x24
   19d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d6c:	cmp	r5, #0
   19d70:	beq	19d94 <__assert_fail@plt+0x8c70>
   19d74:	lsrs	r3, r5, #30
   19d78:	movne	r2, #1
   19d7c:	moveq	r2, #0
   19d80:	lsls	r3, r5, #2
   19d84:	bmi	19c44 <__assert_fail@plt+0x8b20>
   19d88:	cmp	r2, #0
   19d8c:	beq	19cec <__assert_fail@plt+0x8bc8>
   19d90:	b	19c44 <__assert_fail@plt+0x8b20>
   19d94:	mov	r3, #64	; 0x40
   19d98:	mov	r5, #16
   19d9c:	b	19cec <__assert_fail@plt+0x8bc8>
   19da0:	mov	r0, r7
   19da4:	bl	10ecc <free@plt>
   19da8:	b	19d4c <__assert_fail@plt+0x8c28>
   19dac:	bl	10f20 <__stack_chk_fail@plt>
   19db0:	andeq	r0, r3, r8, lsl #30
   19db4:	ldrbne	r5, [r5, #-1364]	; 0xfffffaac
   19db8:	push	{r4, r5, r6, r7, r8, lr}
   19dbc:	mov	r8, r0
   19dc0:	ldr	r5, [pc, #84]	; 19e1c <__assert_fail@plt+0x8cf8>
   19dc4:	mov	r7, r1
   19dc8:	mov	r4, r2
   19dcc:	mov	r2, r4
   19dd0:	mov	r1, r7
   19dd4:	mov	r0, r8
   19dd8:	bl	11070 <write@plt>
   19ddc:	subs	r6, r0, #0
   19de0:	bge	19e14 <__assert_fail@plt+0x8cf0>
   19de4:	bl	11028 <__errno_location@plt>
   19de8:	ldr	r2, [r0]
   19dec:	cmp	r2, #4
   19df0:	beq	19dcc <__assert_fail@plt+0x8ca8>
   19df4:	cmp	r4, r5
   19df8:	sub	r3, r2, #22
   19dfc:	clz	r3, r3
   19e00:	lsr	r3, r3, #5
   19e04:	movls	r3, #0
   19e08:	cmp	r3, #0
   19e0c:	mov	r4, r5
   19e10:	bne	19dcc <__assert_fail@plt+0x8ca8>
   19e14:	mov	r0, r6
   19e18:	pop	{r4, r5, r6, r7, r8, pc}
   19e1c:	svcvc	0x00f00000	; IMB
   19e20:	push	{r4, r5, r6, lr}
   19e24:	mov	r2, r1
   19e28:	mov	r4, r1
   19e2c:	mov	r1, #0
   19e30:	mov	r5, r0
   19e34:	bl	11094 <memchr@plt>
   19e38:	cmp	r0, #0
   19e3c:	subne	r0, r0, r5
   19e40:	addne	r0, r0, #1
   19e44:	moveq	r0, r4
   19e48:	pop	{r4, r5, r6, pc}
   19e4c:	push	{r4, lr}
   19e50:	mov	r2, #170	; 0xaa
   19e54:	ldr	r3, [pc, #8]	; 19e64 <__assert_fail@plt+0x8d40>
   19e58:	ldr	r1, [pc, #8]	; 19e68 <__assert_fail@plt+0x8d44>
   19e5c:	ldr	r0, [pc, #8]	; 19e6c <__assert_fail@plt+0x8d48>
   19e60:	bl	11124 <__assert_fail@plt>
   19e64:	andeq	r0, r2, r4, lsl r9
   19e68:	andeq	r0, r2, r8, lsr #18
   19e6c:	ldrdeq	r0, [r2], -ip
   19e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e74:	sub	sp, sp, #76	; 0x4c
   19e78:	ldr	r7, [pc, #1232]	; 1a350 <__assert_fail@plt+0x922c>
   19e7c:	mov	r5, r1
   19e80:	ldr	r3, [r7]
   19e84:	str	r3, [sp, #68]	; 0x44
   19e88:	bl	10f14 <strdup@plt>
   19e8c:	subs	r6, r0, #0
   19e90:	beq	1a324 <__assert_fail@plt+0x9200>
   19e94:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   19e98:	cmp	r0, #1
   19e9c:	bls	1a0b4 <__assert_fail@plt+0x8f90>
   19ea0:	cmp	r5, #0
   19ea4:	bne	1a1a8 <__assert_fail@plt+0x9084>
   19ea8:	add	r9, sp, #16
   19eac:	mov	r0, r6
   19eb0:	str	r6, [sp, #28]
   19eb4:	bl	11010 <strlen@plt>
   19eb8:	mov	r5, #0
   19ebc:	str	r5, [sp, #16]
   19ec0:	strb	r5, [sp, #12]
   19ec4:	str	r5, [r9, #4]
   19ec8:	strb	r5, [sp, #24]
   19ecc:	add	sl, r6, r0
   19ed0:	cmp	sl, r6
   19ed4:	str	sl, [sp, #8]
   19ed8:	movhi	r4, r6
   19edc:	movhi	r8, #1
   19ee0:	bhi	19f18 <__assert_fail@plt+0x8df4>
   19ee4:	b	1a06c <__assert_fail@plt+0x8f48>
   19ee8:	ldrb	r3, [sp, #36]	; 0x24
   19eec:	cmp	r3, #0
   19ef0:	beq	19f9c <__assert_fail@plt+0x8e78>
   19ef4:	ldr	r0, [sp, #40]	; 0x28
   19ef8:	bl	11004 <iswspace@plt>
   19efc:	clz	r5, r0
   19f00:	lsr	r5, r5, #5
   19f04:	mov	r3, #0
   19f08:	cmp	r4, sl
   19f0c:	str	r4, [sp, #28]
   19f10:	strb	r3, [sp, #24]
   19f14:	bcs	1a17c <__assert_fail@plt+0x9058>
   19f18:	ldrb	r3, [sp, #12]
   19f1c:	cmp	r3, #0
   19f20:	bne	19fb8 <__assert_fail@plt+0x8e94>
   19f24:	ldrb	r3, [r4]
   19f28:	ldr	r2, [pc, #1060]	; 1a354 <__assert_fail@plt+0x9230>
   19f2c:	and	r1, r3, #31
   19f30:	lsr	r3, r3, #5
   19f34:	ldr	r3, [r2, r3, lsl #2]
   19f38:	lsr	r3, r3, r1
   19f3c:	tst	r3, #1
   19f40:	beq	19fa4 <__assert_fail@plt+0x8e80>
   19f44:	ldr	fp, [sp, #28]
   19f48:	str	r8, [sp, #32]
   19f4c:	ldr	sl, [sp, #8]
   19f50:	ldrb	r2, [r4]
   19f54:	add	r4, fp, #1
   19f58:	strb	r8, [sp, #36]	; 0x24
   19f5c:	str	r2, [sp, #40]	; 0x28
   19f60:	cmp	r5, #0
   19f64:	strb	r8, [sp, #24]
   19f68:	beq	19ee8 <__assert_fail@plt+0x8dc4>
   19f6c:	cmp	r5, #1
   19f70:	beq	1a088 <__assert_fail@plt+0x8f64>
   19f74:	cmp	r5, #2
   19f78:	bne	19f9c <__assert_fail@plt+0x8e78>
   19f7c:	ldrb	r3, [sp, #36]	; 0x24
   19f80:	cmp	r3, #0
   19f84:	beq	19f9c <__assert_fail@plt+0x8e78>
   19f88:	ldr	r0, [sp, #40]	; 0x28
   19f8c:	bl	11004 <iswspace@plt>
   19f90:	cmp	r0, #0
   19f94:	moveq	r5, #1
   19f98:	b	19f04 <__assert_fail@plt+0x8de0>
   19f9c:	mov	r5, #1
   19fa0:	b	19f04 <__assert_fail@plt+0x8de0>
   19fa4:	mov	r0, r9
   19fa8:	bl	10ef0 <mbsinit@plt>
   19fac:	cmp	r0, #0
   19fb0:	beq	1a33c <__assert_fail@plt+0x9218>
   19fb4:	strb	r8, [sp, #12]
   19fb8:	sub	r2, sl, r4
   19fbc:	mov	r1, r4
   19fc0:	mov	r3, r9
   19fc4:	add	r0, sp, #40	; 0x28
   19fc8:	bl	1abdc <__assert_fail@plt+0x9ab8>
   19fcc:	cmn	r0, #1
   19fd0:	mov	r4, r0
   19fd4:	str	r0, [sp, #32]
   19fd8:	beq	1a160 <__assert_fail@plt+0x903c>
   19fdc:	cmn	r0, #2
   19fe0:	ldr	fp, [sp, #28]
   19fe4:	beq	1a18c <__assert_fail@plt+0x9068>
   19fe8:	cmp	r0, #0
   19fec:	bne	1a010 <__assert_fail@plt+0x8eec>
   19ff0:	str	r8, [sp, #32]
   19ff4:	ldrb	r2, [fp]
   19ff8:	cmp	r2, #0
   19ffc:	bne	1a328 <__assert_fail@plt+0x9204>
   1a000:	ldr	r2, [sp, #40]	; 0x28
   1a004:	cmp	r2, #0
   1a008:	bne	1a314 <__assert_fail@plt+0x91f0>
   1a00c:	mov	r4, #1
   1a010:	mov	r0, r9
   1a014:	strb	r8, [sp, #36]	; 0x24
   1a018:	bl	10ef0 <mbsinit@plt>
   1a01c:	add	r4, fp, r4
   1a020:	ldr	sl, [sp, #8]
   1a024:	cmp	r0, #0
   1a028:	movne	r1, #0
   1a02c:	strbne	r1, [sp, #12]
   1a030:	b	19f60 <__assert_fail@plt+0x8e3c>
   1a034:	ldr	r4, [sp, #28]
   1a038:	mov	r3, #1
   1a03c:	mov	r2, #0
   1a040:	str	r3, [sp, #32]
   1a044:	strb	r3, [sp, #24]
   1a048:	strb	r2, [sp, #36]	; 0x24
   1a04c:	mov	r0, r4
   1a050:	bl	11010 <strlen@plt>
   1a054:	mov	r1, r4
   1a058:	add	r2, r0, #1
   1a05c:	mov	r0, r6
   1a060:	bl	10ec0 <memmove@plt>
   1a064:	cmp	r5, #1
   1a068:	bne	19eac <__assert_fail@plt+0x8d88>
   1a06c:	ldr	r2, [sp, #68]	; 0x44
   1a070:	ldr	r3, [r7]
   1a074:	mov	r0, r6
   1a078:	cmp	r2, r3
   1a07c:	bne	1a320 <__assert_fail@plt+0x91fc>
   1a080:	add	sp, sp, #76	; 0x4c
   1a084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a088:	ldrb	r1, [sp, #36]	; 0x24
   1a08c:	cmp	r1, #0
   1a090:	beq	19f04 <__assert_fail@plt+0x8de0>
   1a094:	ldr	r0, [sp, #40]	; 0x28
   1a098:	bl	11004 <iswspace@plt>
   1a09c:	ldr	r3, [sp, #4]
   1a0a0:	cmp	r0, #0
   1a0a4:	movne	r3, fp
   1a0a8:	str	r3, [sp, #4]
   1a0ac:	movne	r5, #2
   1a0b0:	b	19f04 <__assert_fail@plt+0x8de0>
   1a0b4:	cmp	r5, #0
   1a0b8:	beq	1a114 <__assert_fail@plt+0x8ff0>
   1a0bc:	ldrb	r4, [r6]
   1a0c0:	cmp	r4, #0
   1a0c4:	beq	1a318 <__assert_fail@plt+0x91f4>
   1a0c8:	bl	10fec <__ctype_b_loc@plt>
   1a0cc:	mov	r8, r6
   1a0d0:	ldr	r2, [r0]
   1a0d4:	b	1a0e4 <__assert_fail@plt+0x8fc0>
   1a0d8:	ldrb	r4, [r8, #1]!
   1a0dc:	cmp	r4, #0
   1a0e0:	beq	1a0f4 <__assert_fail@plt+0x8fd0>
   1a0e4:	lsl	r4, r4, #1
   1a0e8:	ldrh	r3, [r2, r4]
   1a0ec:	tst	r3, #8192	; 0x2000
   1a0f0:	bne	1a0d8 <__assert_fail@plt+0x8fb4>
   1a0f4:	mov	r0, r8
   1a0f8:	bl	11010 <strlen@plt>
   1a0fc:	mov	r1, r8
   1a100:	add	r2, r0, #1
   1a104:	mov	r0, r6
   1a108:	bl	10ec0 <memmove@plt>
   1a10c:	cmp	r5, #1
   1a110:	beq	1a06c <__assert_fail@plt+0x8f48>
   1a114:	mov	r0, r6
   1a118:	bl	11010 <strlen@plt>
   1a11c:	sub	r0, r0, #1
   1a120:	adds	r4, r6, r0
   1a124:	bcs	1a06c <__assert_fail@plt+0x8f48>
   1a128:	bl	10fec <__ctype_b_loc@plt>
   1a12c:	mov	r3, r4
   1a130:	mov	ip, #0
   1a134:	ldr	r1, [r0]
   1a138:	b	1a148 <__assert_fail@plt+0x9024>
   1a13c:	cmp	r6, r3
   1a140:	strb	ip, [r3, #1]
   1a144:	bhi	1a06c <__assert_fail@plt+0x8f48>
   1a148:	ldrb	r2, [r3], #-1
   1a14c:	lsl	r2, r2, #1
   1a150:	ldrh	r2, [r1, r2]
   1a154:	tst	r2, #8192	; 0x2000
   1a158:	bne	1a13c <__assert_fail@plt+0x9018>
   1a15c:	b	1a06c <__assert_fail@plt+0x8f48>
   1a160:	ldr	fp, [sp, #28]
   1a164:	mov	r2, #0
   1a168:	str	r8, [sp, #32]
   1a16c:	add	r4, fp, #1
   1a170:	strb	r2, [sp, #36]	; 0x24
   1a174:	ldr	sl, [sp, #8]
   1a178:	b	19f60 <__assert_fail@plt+0x8e3c>
   1a17c:	cmp	r5, #2
   1a180:	ldreq	r2, [sp, #4]
   1a184:	strbeq	r3, [r2]
   1a188:	b	1a06c <__assert_fail@plt+0x8f48>
   1a18c:	ldr	r4, [sp, #8]
   1a190:	mov	r1, #0
   1a194:	sub	r2, r4, fp
   1a198:	str	r2, [sp, #32]
   1a19c:	mov	sl, r4
   1a1a0:	strb	r1, [sp, #36]	; 0x24
   1a1a4:	b	19f60 <__assert_fail@plt+0x8e3c>
   1a1a8:	mov	r0, r6
   1a1ac:	str	r6, [sp, #28]
   1a1b0:	bl	11010 <strlen@plt>
   1a1b4:	add	r9, sp, #16
   1a1b8:	mov	r3, #0
   1a1bc:	str	r3, [sp, #16]
   1a1c0:	strb	r3, [sp, #12]
   1a1c4:	str	r3, [r9, #4]
   1a1c8:	strb	r3, [sp, #24]
   1a1cc:	add	sl, r6, r0
   1a1d0:	cmp	sl, r6
   1a1d4:	str	sl, [sp, #8]
   1a1d8:	movls	r4, r6
   1a1dc:	bls	1a04c <__assert_fail@plt+0x8f28>
   1a1e0:	ldr	fp, [pc, #364]	; 1a354 <__assert_fail@plt+0x9230>
   1a1e4:	mov	r4, r6
   1a1e8:	mov	r8, #1
   1a1ec:	b	1a258 <__assert_fail@plt+0x9134>
   1a1f0:	ldrb	r3, [r4]
   1a1f4:	and	r1, r3, #31
   1a1f8:	lsr	r3, r3, #5
   1a1fc:	ldr	r3, [fp, r3, lsl #2]
   1a200:	lsr	r3, r3, r1
   1a204:	tst	r3, #1
   1a208:	beq	1a2c0 <__assert_fail@plt+0x919c>
   1a20c:	str	r8, [sp, #32]
   1a210:	ldrb	r3, [r4]
   1a214:	ldr	r4, [sp, #28]
   1a218:	strb	r8, [sp, #36]	; 0x24
   1a21c:	mov	sl, r3
   1a220:	strb	r8, [sp, #24]
   1a224:	str	r3, [sp, #40]	; 0x28
   1a228:	mov	r0, sl
   1a22c:	bl	11004 <iswspace@plt>
   1a230:	cmp	r0, #0
   1a234:	beq	1a04c <__assert_fail@plt+0x8f28>
   1a238:	ldr	r3, [sp, #32]
   1a23c:	ldr	sl, [sp, #8]
   1a240:	add	r4, r4, r3
   1a244:	cmp	r4, sl
   1a248:	mov	r3, #0
   1a24c:	str	r4, [sp, #28]
   1a250:	strb	r3, [sp, #24]
   1a254:	bcs	1a04c <__assert_fail@plt+0x8f28>
   1a258:	ldrb	r3, [sp, #12]
   1a25c:	cmp	r3, #0
   1a260:	beq	1a1f0 <__assert_fail@plt+0x90cc>
   1a264:	sub	r2, sl, r4
   1a268:	mov	r1, r4
   1a26c:	mov	r3, r9
   1a270:	add	r0, sp, #40	; 0x28
   1a274:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1a278:	cmn	r0, #1
   1a27c:	str	r0, [sp, #32]
   1a280:	beq	1a034 <__assert_fail@plt+0x8f10>
   1a284:	cmn	r0, #2
   1a288:	ldr	r4, [sp, #28]
   1a28c:	beq	1a2d8 <__assert_fail@plt+0x91b4>
   1a290:	cmp	r0, #0
   1a294:	beq	1a2f8 <__assert_fail@plt+0x91d4>
   1a298:	ldr	sl, [sp, #40]	; 0x28
   1a29c:	mov	r0, r9
   1a2a0:	strb	r8, [sp, #36]	; 0x24
   1a2a4:	bl	10ef0 <mbsinit@plt>
   1a2a8:	cmp	r0, #0
   1a2ac:	movne	r2, #0
   1a2b0:	strbeq	r8, [sp, #24]
   1a2b4:	strbne	r8, [sp, #24]
   1a2b8:	strbne	r2, [sp, #12]
   1a2bc:	b	1a228 <__assert_fail@plt+0x9104>
   1a2c0:	mov	r0, r9
   1a2c4:	bl	10ef0 <mbsinit@plt>
   1a2c8:	cmp	r0, #0
   1a2cc:	beq	1a33c <__assert_fail@plt+0x9218>
   1a2d0:	strb	r8, [sp, #12]
   1a2d4:	b	1a264 <__assert_fail@plt+0x9140>
   1a2d8:	ldr	r3, [sp, #8]
   1a2dc:	mov	r2, #0
   1a2e0:	sub	r3, r3, r4
   1a2e4:	str	r3, [sp, #32]
   1a2e8:	mov	r3, #1
   1a2ec:	strb	r2, [sp, #36]	; 0x24
   1a2f0:	strb	r3, [sp, #24]
   1a2f4:	b	1a04c <__assert_fail@plt+0x8f28>
   1a2f8:	str	r8, [sp, #32]
   1a2fc:	ldrb	r3, [r4]
   1a300:	cmp	r3, #0
   1a304:	bne	1a328 <__assert_fail@plt+0x9204>
   1a308:	ldr	sl, [sp, #40]	; 0x28
   1a30c:	cmp	sl, #0
   1a310:	beq	1a29c <__assert_fail@plt+0x9178>
   1a314:	bl	19e4c <__assert_fail@plt+0x8d28>
   1a318:	mov	r8, r6
   1a31c:	b	1a0f4 <__assert_fail@plt+0x8fd0>
   1a320:	bl	10f20 <__stack_chk_fail@plt>
   1a324:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1a328:	ldr	r3, [pc, #40]	; 1a358 <__assert_fail@plt+0x9234>
   1a32c:	mov	r2, #169	; 0xa9
   1a330:	ldr	r1, [pc, #36]	; 1a35c <__assert_fail@plt+0x9238>
   1a334:	ldr	r0, [pc, #36]	; 1a360 <__assert_fail@plt+0x923c>
   1a338:	bl	11124 <__assert_fail@plt>
   1a33c:	ldr	r3, [pc, #20]	; 1a358 <__assert_fail@plt+0x9234>
   1a340:	mov	r2, #142	; 0x8e
   1a344:	ldr	r1, [pc, #16]	; 1a35c <__assert_fail@plt+0x9238>
   1a348:	ldr	r0, [pc, #20]	; 1a364 <__assert_fail@plt+0x9240>
   1a34c:	bl	11124 <__assert_fail@plt>
   1a350:	andeq	r0, r3, r8, lsl #30
   1a354:	andeq	r0, r2, r8, ror ip
   1a358:	andeq	r0, r2, r4, lsl r9
   1a35c:	andeq	r0, r2, r8, lsr #18
   1a360:	andeq	r0, r2, r8, lsl #16
   1a364:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1a368:	push	{r4, r5, r6, lr}
   1a36c:	sub	sp, sp, #32
   1a370:	cmp	r1, #0
   1a374:	mov	r5, r0
   1a378:	ldr	r4, [sp, #48]	; 0x30
   1a37c:	ldr	r6, [sp, #52]	; 0x34
   1a380:	beq	1a410 <__assert_fail@plt+0x92ec>
   1a384:	strd	r2, [sp]
   1a388:	mov	r3, r1
   1a38c:	ldr	r2, [pc, #828]	; 1a6d0 <__assert_fail@plt+0x95ac>
   1a390:	mov	r1, #1
   1a394:	bl	11088 <__fprintf_chk@plt>
   1a398:	mov	r2, #5
   1a39c:	ldr	r1, [pc, #816]	; 1a6d4 <__assert_fail@plt+0x95b0>
   1a3a0:	mov	r0, #0
   1a3a4:	bl	10f08 <dcgettext@plt>
   1a3a8:	ldr	r3, [pc, #808]	; 1a6d8 <__assert_fail@plt+0x95b4>
   1a3ac:	ldr	r2, [pc, #808]	; 1a6dc <__assert_fail@plt+0x95b8>
   1a3b0:	str	r3, [sp]
   1a3b4:	mov	r1, #1
   1a3b8:	mov	r3, r0
   1a3bc:	mov	r0, r5
   1a3c0:	bl	11088 <__fprintf_chk@plt>
   1a3c4:	ldr	r1, [pc, #788]	; 1a6e0 <__assert_fail@plt+0x95bc>
   1a3c8:	mov	r2, #5
   1a3cc:	mov	r0, #0
   1a3d0:	bl	10f08 <dcgettext@plt>
   1a3d4:	mov	r1, r5
   1a3d8:	bl	10e6c <fputs_unlocked@plt>
   1a3dc:	cmp	r6, #9
   1a3e0:	ldrls	pc, [pc, r6, lsl #2]
   1a3e4:	b	1a6c0 <__assert_fail@plt+0x959c>
   1a3e8:	andeq	sl, r1, ip, asr #13
   1a3ec:	muleq	r1, r4, r4
   1a3f0:	andeq	sl, r1, r0, asr #9
   1a3f4:	strdeq	sl, [r1], -r4
   1a3f8:	andeq	sl, r1, r0, lsr r5
   1a3fc:	andeq	sl, r1, r0, ror r5
   1a400:			; <UNDEFINED> instruction: 0x0001a5b8
   1a404:	andeq	sl, r1, r8, lsl #12
   1a408:	andeq	sl, r1, r0, ror #12
   1a40c:	andeq	sl, r1, r8, lsr #8
   1a410:	str	r3, [sp]
   1a414:	mov	r1, #1
   1a418:	mov	r3, r2
   1a41c:	ldr	r2, [pc, #704]	; 1a6e4 <__assert_fail@plt+0x95c0>
   1a420:	bl	11088 <__fprintf_chk@plt>
   1a424:	b	1a398 <__assert_fail@plt+0x9274>
   1a428:	ldr	r1, [pc, #696]	; 1a6e8 <__assert_fail@plt+0x95c4>
   1a42c:	mov	r2, #5
   1a430:	mov	r0, #0
   1a434:	bl	10f08 <dcgettext@plt>
   1a438:	ldr	r2, [r4, #32]
   1a43c:	ldr	r3, [r4, #28]
   1a440:	ldr	r1, [r4, #24]
   1a444:	str	r2, [sp, #28]
   1a448:	ldr	r2, [r4, #20]
   1a44c:	str	r3, [sp, #24]
   1a450:	ldr	r3, [r4, #16]
   1a454:	str	r1, [sp, #20]
   1a458:	ldr	r1, [r4, #12]
   1a45c:	str	r2, [sp, #16]
   1a460:	ldr	r2, [r4, #8]
   1a464:	str	r3, [sp, #12]
   1a468:	ldr	r3, [r4, #4]
   1a46c:	str	r1, [sp, #8]
   1a470:	str	r2, [sp, #4]
   1a474:	str	r3, [sp]
   1a478:	mov	r1, #1
   1a47c:	ldr	r3, [r4]
   1a480:	mov	r2, r0
   1a484:	mov	r0, r5
   1a488:	bl	11088 <__fprintf_chk@plt>
   1a48c:	add	sp, sp, #32
   1a490:	pop	{r4, r5, r6, pc}
   1a494:	mov	r2, #5
   1a498:	ldr	r1, [pc, #588]	; 1a6ec <__assert_fail@plt+0x95c8>
   1a49c:	mov	r0, #0
   1a4a0:	bl	10f08 <dcgettext@plt>
   1a4a4:	ldr	r3, [r4]
   1a4a8:	mov	r1, #1
   1a4ac:	mov	r2, r0
   1a4b0:	mov	r0, r5
   1a4b4:	add	sp, sp, #32
   1a4b8:	pop	{r4, r5, r6, lr}
   1a4bc:	b	11088 <__fprintf_chk@plt>
   1a4c0:	mov	r2, #5
   1a4c4:	ldr	r1, [pc, #548]	; 1a6f0 <__assert_fail@plt+0x95cc>
   1a4c8:	mov	r0, #0
   1a4cc:	bl	10f08 <dcgettext@plt>
   1a4d0:	ldr	r2, [r4, #4]
   1a4d4:	ldr	r3, [r4]
   1a4d8:	mov	r1, #1
   1a4dc:	str	r2, [sp, #48]	; 0x30
   1a4e0:	mov	r2, r0
   1a4e4:	mov	r0, r5
   1a4e8:	add	sp, sp, #32
   1a4ec:	pop	{r4, r5, r6, lr}
   1a4f0:	b	11088 <__fprintf_chk@plt>
   1a4f4:	mov	r2, #5
   1a4f8:	ldr	r1, [pc, #500]	; 1a6f4 <__assert_fail@plt+0x95d0>
   1a4fc:	mov	r0, #0
   1a500:	bl	10f08 <dcgettext@plt>
   1a504:	ldr	r2, [r4, #8]
   1a508:	ldr	r3, [r4, #4]
   1a50c:	mov	r1, #1
   1a510:	str	r2, [sp, #52]	; 0x34
   1a514:	str	r3, [sp, #48]	; 0x30
   1a518:	ldr	r3, [r4]
   1a51c:	mov	r2, r0
   1a520:	mov	r0, r5
   1a524:	add	sp, sp, #32
   1a528:	pop	{r4, r5, r6, lr}
   1a52c:	b	11088 <__fprintf_chk@plt>
   1a530:	mov	r2, #5
   1a534:	ldr	r1, [pc, #444]	; 1a6f8 <__assert_fail@plt+0x95d4>
   1a538:	mov	r0, #0
   1a53c:	bl	10f08 <dcgettext@plt>
   1a540:	ldr	r1, [r4, #12]
   1a544:	ldr	r2, [r4, #8]
   1a548:	ldr	r3, [r4, #4]
   1a54c:	str	r1, [sp, #8]
   1a550:	str	r2, [sp, #4]
   1a554:	str	r3, [sp]
   1a558:	mov	r1, #1
   1a55c:	ldr	r3, [r4]
   1a560:	mov	r2, r0
   1a564:	mov	r0, r5
   1a568:	bl	11088 <__fprintf_chk@plt>
   1a56c:	b	1a48c <__assert_fail@plt+0x9368>
   1a570:	mov	r2, #5
   1a574:	ldr	r1, [pc, #384]	; 1a6fc <__assert_fail@plt+0x95d8>
   1a578:	mov	r0, #0
   1a57c:	bl	10f08 <dcgettext@plt>
   1a580:	ldr	r3, [r4, #16]
   1a584:	ldr	r1, [r4, #12]
   1a588:	ldr	r2, [r4, #8]
   1a58c:	str	r3, [sp, #12]
   1a590:	ldr	r3, [r4, #4]
   1a594:	str	r1, [sp, #8]
   1a598:	str	r2, [sp, #4]
   1a59c:	str	r3, [sp]
   1a5a0:	mov	r1, #1
   1a5a4:	ldr	r3, [r4]
   1a5a8:	mov	r2, r0
   1a5ac:	mov	r0, r5
   1a5b0:	bl	11088 <__fprintf_chk@plt>
   1a5b4:	b	1a48c <__assert_fail@plt+0x9368>
   1a5b8:	mov	r2, #5
   1a5bc:	ldr	r1, [pc, #316]	; 1a700 <__assert_fail@plt+0x95dc>
   1a5c0:	mov	r0, #0
   1a5c4:	bl	10f08 <dcgettext@plt>
   1a5c8:	ldr	r2, [r4, #20]
   1a5cc:	ldr	r3, [r4, #16]
   1a5d0:	ldr	r1, [r4, #12]
   1a5d4:	str	r2, [sp, #16]
   1a5d8:	ldr	r2, [r4, #8]
   1a5dc:	str	r3, [sp, #12]
   1a5e0:	ldr	r3, [r4, #4]
   1a5e4:	str	r1, [sp, #8]
   1a5e8:	str	r2, [sp, #4]
   1a5ec:	str	r3, [sp]
   1a5f0:	mov	r1, #1
   1a5f4:	ldr	r3, [r4]
   1a5f8:	mov	r2, r0
   1a5fc:	mov	r0, r5
   1a600:	bl	11088 <__fprintf_chk@plt>
   1a604:	b	1a48c <__assert_fail@plt+0x9368>
   1a608:	mov	r2, #5
   1a60c:	ldr	r1, [pc, #240]	; 1a704 <__assert_fail@plt+0x95e0>
   1a610:	mov	r0, #0
   1a614:	bl	10f08 <dcgettext@plt>
   1a618:	ldr	r1, [r4, #24]
   1a61c:	ldr	r2, [r4, #20]
   1a620:	ldr	r3, [r4, #16]
   1a624:	str	r1, [sp, #20]
   1a628:	ldr	r1, [r4, #12]
   1a62c:	str	r2, [sp, #16]
   1a630:	ldr	r2, [r4, #8]
   1a634:	str	r3, [sp, #12]
   1a638:	ldr	r3, [r4, #4]
   1a63c:	str	r1, [sp, #8]
   1a640:	str	r2, [sp, #4]
   1a644:	str	r3, [sp]
   1a648:	mov	r1, #1
   1a64c:	ldr	r3, [r4]
   1a650:	mov	r2, r0
   1a654:	mov	r0, r5
   1a658:	bl	11088 <__fprintf_chk@plt>
   1a65c:	b	1a48c <__assert_fail@plt+0x9368>
   1a660:	mov	r2, #5
   1a664:	ldr	r1, [pc, #156]	; 1a708 <__assert_fail@plt+0x95e4>
   1a668:	mov	r0, #0
   1a66c:	bl	10f08 <dcgettext@plt>
   1a670:	ldr	r3, [r4, #28]
   1a674:	ldr	r1, [r4, #24]
   1a678:	ldr	r2, [r4, #20]
   1a67c:	str	r3, [sp, #24]
   1a680:	ldr	r3, [r4, #16]
   1a684:	str	r1, [sp, #20]
   1a688:	ldr	r1, [r4, #12]
   1a68c:	str	r2, [sp, #16]
   1a690:	ldr	r2, [r4, #8]
   1a694:	str	r3, [sp, #12]
   1a698:	ldr	r3, [r4, #4]
   1a69c:	str	r1, [sp, #8]
   1a6a0:	str	r2, [sp, #4]
   1a6a4:	str	r3, [sp]
   1a6a8:	mov	r1, #1
   1a6ac:	ldr	r3, [r4]
   1a6b0:	mov	r2, r0
   1a6b4:	mov	r0, r5
   1a6b8:	bl	11088 <__fprintf_chk@plt>
   1a6bc:	b	1a48c <__assert_fail@plt+0x9368>
   1a6c0:	mov	r2, #5
   1a6c4:	ldr	r1, [pc, #64]	; 1a70c <__assert_fail@plt+0x95e8>
   1a6c8:	b	1a430 <__assert_fail@plt+0x930c>
   1a6cc:	bl	11118 <abort@plt>
   1a6d0:	andeq	r0, r2, r8, lsr r9
   1a6d4:	andeq	r0, r2, ip, asr #18
   1a6d8:	andeq	r0, r0, r2, ror #15
   1a6dc:	andeq	r0, r2, r0, lsr #24
   1a6e0:	andeq	r0, r2, r0, asr r9
   1a6e4:	andeq	r0, r2, r4, asr #18
   1a6e8:	andeq	r0, r2, r8, lsr #22
   1a6ec:	andeq	r0, r2, ip, lsl sl
   1a6f0:	andeq	r0, r2, ip, lsr #20
   1a6f4:	andeq	r0, r2, r4, asr #20
   1a6f8:	andeq	r0, r2, r0, ror #20
   1a6fc:	andeq	r0, r2, r0, lsl #21
   1a700:	andeq	r0, r2, r4, lsr #21
   1a704:	andeq	r0, r2, ip, asr #21
   1a708:	strdeq	r0, [r2], -r8
   1a70c:	andeq	r0, r2, ip, asr fp
   1a710:	push	{r4, r5, lr}
   1a714:	sub	sp, sp, #12
   1a718:	ldr	r5, [sp, #24]
   1a71c:	ldr	ip, [r5]
   1a720:	cmp	ip, #0
   1a724:	beq	1a740 <__assert_fail@plt+0x961c>
   1a728:	mov	lr, r5
   1a72c:	mov	ip, #0
   1a730:	ldr	r4, [lr, #4]!
   1a734:	add	ip, ip, #1
   1a738:	cmp	r4, #0
   1a73c:	bne	1a730 <__assert_fail@plt+0x960c>
   1a740:	stm	sp, {r5, ip}
   1a744:	bl	1a368 <__assert_fail@plt+0x9244>
   1a748:	add	sp, sp, #12
   1a74c:	pop	{r4, r5, pc}
   1a750:	push	{r4, r5, r6, lr}
   1a754:	sub	sp, sp, #56	; 0x38
   1a758:	ldr	r6, [pc, #88]	; 1a7b8 <__assert_fail@plt+0x9694>
   1a75c:	ldr	r5, [sp, #72]	; 0x48
   1a760:	add	r4, sp, #8
   1a764:	ldr	ip, [r6]
   1a768:	str	ip, [sp, #52]	; 0x34
   1a76c:	mov	ip, #0
   1a770:	ldr	lr, [r5], #4
   1a774:	cmp	lr, #0
   1a778:	str	lr, [r4, #4]!
   1a77c:	beq	1a78c <__assert_fail@plt+0x9668>
   1a780:	add	ip, ip, #1
   1a784:	cmp	ip, #10
   1a788:	bne	1a770 <__assert_fail@plt+0x964c>
   1a78c:	add	lr, sp, #12
   1a790:	str	ip, [sp, #4]
   1a794:	str	lr, [sp]
   1a798:	bl	1a368 <__assert_fail@plt+0x9244>
   1a79c:	ldr	r2, [sp, #52]	; 0x34
   1a7a0:	ldr	r3, [r6]
   1a7a4:	cmp	r2, r3
   1a7a8:	bne	1a7b4 <__assert_fail@plt+0x9690>
   1a7ac:	add	sp, sp, #56	; 0x38
   1a7b0:	pop	{r4, r5, r6, pc}
   1a7b4:	bl	10f20 <__stack_chk_fail@plt>
   1a7b8:	andeq	r0, r3, r8, lsl #30
   1a7bc:	push	{r3}		; (str r3, [sp, #-4]!)
   1a7c0:	mov	ip, #0
   1a7c4:	push	{r4, r5, r6, lr}
   1a7c8:	sub	sp, sp, #60	; 0x3c
   1a7cc:	ldr	r6, [pc, #100]	; 1a838 <__assert_fail@plt+0x9714>
   1a7d0:	add	r5, sp, #8
   1a7d4:	add	r4, sp, #80	; 0x50
   1a7d8:	ldr	r3, [r6]
   1a7dc:	str	r4, [sp, #8]
   1a7e0:	str	r3, [sp, #52]	; 0x34
   1a7e4:	ldr	r3, [sp, #76]	; 0x4c
   1a7e8:	ldr	lr, [r4], #4
   1a7ec:	cmp	lr, #0
   1a7f0:	str	lr, [r5, #4]!
   1a7f4:	beq	1a804 <__assert_fail@plt+0x96e0>
   1a7f8:	add	ip, ip, #1
   1a7fc:	cmp	ip, #10
   1a800:	bne	1a7e8 <__assert_fail@plt+0x96c4>
   1a804:	add	lr, sp, #12
   1a808:	str	ip, [sp, #4]
   1a80c:	str	lr, [sp]
   1a810:	bl	1a368 <__assert_fail@plt+0x9244>
   1a814:	ldr	r2, [sp, #52]	; 0x34
   1a818:	ldr	r3, [r6]
   1a81c:	cmp	r2, r3
   1a820:	bne	1a834 <__assert_fail@plt+0x9710>
   1a824:	add	sp, sp, #60	; 0x3c
   1a828:	pop	{r4, r5, r6, lr}
   1a82c:	add	sp, sp, #4
   1a830:	bx	lr
   1a834:	bl	10f20 <__stack_chk_fail@plt>
   1a838:	andeq	r0, r3, r8, lsl #30
   1a83c:	push	{r4, lr}
   1a840:	mov	r2, #5
   1a844:	ldr	r1, [pc, #88]	; 1a8a4 <__assert_fail@plt+0x9780>
   1a848:	mov	r0, #0
   1a84c:	bl	10f08 <dcgettext@plt>
   1a850:	ldr	r2, [pc, #80]	; 1a8a8 <__assert_fail@plt+0x9784>
   1a854:	mov	r1, r0
   1a858:	mov	r0, #1
   1a85c:	bl	11064 <__printf_chk@plt>
   1a860:	mov	r2, #5
   1a864:	ldr	r1, [pc, #64]	; 1a8ac <__assert_fail@plt+0x9788>
   1a868:	mov	r0, #0
   1a86c:	bl	10f08 <dcgettext@plt>
   1a870:	ldr	r3, [pc, #56]	; 1a8b0 <__assert_fail@plt+0x978c>
   1a874:	ldr	r2, [pc, #56]	; 1a8b4 <__assert_fail@plt+0x9790>
   1a878:	mov	r1, r0
   1a87c:	mov	r0, #1
   1a880:	bl	11064 <__printf_chk@plt>
   1a884:	ldr	r1, [pc, #44]	; 1a8b8 <__assert_fail@plt+0x9794>
   1a888:	mov	r2, #5
   1a88c:	mov	r0, #0
   1a890:	bl	10f08 <dcgettext@plt>
   1a894:	ldr	r3, [pc, #32]	; 1a8bc <__assert_fail@plt+0x9798>
   1a898:	pop	{r4, lr}
   1a89c:	ldr	r1, [r3]
   1a8a0:	b	10e6c <fputs_unlocked@plt>
   1a8a4:	muleq	r2, r8, fp
   1a8a8:			; <UNDEFINED> instruction: 0x00020bb0
   1a8ac:	andeq	r0, r2, r8, asr #23
   1a8b0:	muleq	r2, ip, r5
   1a8b4:	andeq	r0, r2, r4, asr #11
   1a8b8:	ldrdeq	r0, [r2], -ip
   1a8bc:	andeq	r1, r3, r4, ror r1
   1a8c0:	push	{r4, lr}
   1a8c4:	mov	r4, r0
   1a8c8:	bl	10fa4 <malloc@plt>
   1a8cc:	adds	r4, r4, #0
   1a8d0:	movne	r4, #1
   1a8d4:	cmp	r0, #0
   1a8d8:	movne	r4, #0
   1a8dc:	cmp	r4, #0
   1a8e0:	popeq	{r4, pc}
   1a8e4:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1a8e8:	push	{r4, r5, r6, lr}
   1a8ec:	umull	r4, r5, r0, r1
   1a8f0:	adds	r3, r5, #0
   1a8f4:	movne	r3, #1
   1a8f8:	cmp	r4, #0
   1a8fc:	blt	1a914 <__assert_fail@plt+0x97f0>
   1a900:	cmp	r3, #0
   1a904:	bne	1a914 <__assert_fail@plt+0x97f0>
   1a908:	mul	r0, r1, r0
   1a90c:	pop	{r4, r5, r6, lr}
   1a910:	b	1a8c0 <__assert_fail@plt+0x979c>
   1a914:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1a918:	b	1a8c0 <__assert_fail@plt+0x979c>
   1a91c:	adds	r3, r0, #0
   1a920:	movne	r3, #1
   1a924:	cmp	r1, #0
   1a928:	movne	r3, #0
   1a92c:	cmp	r3, #0
   1a930:	push	{r4, lr}
   1a934:	bne	1a95c <__assert_fail@plt+0x9838>
   1a938:	mov	r4, r1
   1a93c:	bl	10f2c <realloc@plt>
   1a940:	adds	r4, r4, #0
   1a944:	movne	r4, #1
   1a948:	cmp	r0, #0
   1a94c:	movne	r4, #0
   1a950:	cmp	r4, #0
   1a954:	popeq	{r4, pc}
   1a958:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1a95c:	bl	10ecc <free@plt>
   1a960:	mov	r0, #0
   1a964:	pop	{r4, pc}
   1a968:	push	{r4, r5, r6, lr}
   1a96c:	umull	r4, r5, r1, r2
   1a970:	adds	r3, r5, #0
   1a974:	movne	r3, #1
   1a978:	cmp	r4, #0
   1a97c:	blt	1a994 <__assert_fail@plt+0x9870>
   1a980:	cmp	r3, #0
   1a984:	bne	1a994 <__assert_fail@plt+0x9870>
   1a988:	mul	r1, r2, r1
   1a98c:	pop	{r4, r5, r6, lr}
   1a990:	b	1a91c <__assert_fail@plt+0x97f8>
   1a994:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1a998:	push	{r4, r5, r6, r7, r8, lr}
   1a99c:	subs	r7, r0, #0
   1a9a0:	mov	r6, r1
   1a9a4:	mov	r5, r2
   1a9a8:	ldr	r4, [r1]
   1a9ac:	beq	1a9e0 <__assert_fail@plt+0x98bc>
   1a9b0:	mov	r1, r2
   1a9b4:	ldr	r0, [pc, #104]	; 1aa24 <__assert_fail@plt+0x9900>
   1a9b8:	bl	1ce10 <__assert_fail@plt+0xbcec>
   1a9bc:	cmp	r0, r4
   1a9c0:	bls	1aa04 <__assert_fail@plt+0x98e0>
   1a9c4:	add	r3, r4, #1
   1a9c8:	add	r4, r3, r4, lsr #1
   1a9cc:	str	r4, [r6]
   1a9d0:	mul	r1, r5, r4
   1a9d4:	mov	r0, r7
   1a9d8:	pop	{r4, r5, r6, r7, r8, lr}
   1a9dc:	b	1a91c <__assert_fail@plt+0x97f8>
   1a9e0:	cmp	r4, #0
   1a9e4:	beq	1aa08 <__assert_fail@plt+0x98e4>
   1a9e8:	umull	r0, r1, r4, r5
   1a9ec:	adds	r3, r1, #0
   1a9f0:	movne	r3, #1
   1a9f4:	cmp	r0, #0
   1a9f8:	blt	1aa04 <__assert_fail@plt+0x98e0>
   1a9fc:	cmp	r3, #0
   1aa00:	beq	1a9cc <__assert_fail@plt+0x98a8>
   1aa04:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1aa08:	mov	r1, r2
   1aa0c:	mov	r0, #64	; 0x40
   1aa10:	bl	1ce10 <__assert_fail@plt+0xbcec>
   1aa14:	cmp	r5, #64	; 0x40
   1aa18:	movls	r4, r0
   1aa1c:	addhi	r4, r0, #1
   1aa20:	b	1a9e8 <__assert_fail@plt+0x98c4>
   1aa24:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1aa28:	cmp	r0, #0
   1aa2c:	ldr	r3, [r1]
   1aa30:	beq	1aa54 <__assert_fail@plt+0x9930>
   1aa34:	ldr	r2, [pc, #60]	; 1aa78 <__assert_fail@plt+0x9954>
   1aa38:	cmp	r3, r2
   1aa3c:	bhi	1aa70 <__assert_fail@plt+0x994c>
   1aa40:	add	r2, r3, #1
   1aa44:	add	r3, r2, r3, lsr #1
   1aa48:	str	r3, [r1]
   1aa4c:	mov	r1, r3
   1aa50:	b	1a91c <__assert_fail@plt+0x97f8>
   1aa54:	cmp	r3, #0
   1aa58:	bne	1aa6c <__assert_fail@plt+0x9948>
   1aa5c:	mov	r3, #64	; 0x40
   1aa60:	str	r3, [r1]
   1aa64:	mov	r1, r3
   1aa68:	b	1a91c <__assert_fail@plt+0x97f8>
   1aa6c:	bge	1aa48 <__assert_fail@plt+0x9924>
   1aa70:	push	{r4, lr}
   1aa74:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1aa78:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   1aa7c:	push	{r4, lr}
   1aa80:	mov	r4, r0
   1aa84:	bl	1a8c0 <__assert_fail@plt+0x979c>
   1aa88:	mov	r2, r4
   1aa8c:	mov	r1, #0
   1aa90:	pop	{r4, lr}
   1aa94:	b	11058 <memset@plt>
   1aa98:	push	{r4, r5, r6, lr}
   1aa9c:	umull	r4, r5, r0, r1
   1aaa0:	adds	r3, r5, #0
   1aaa4:	movne	r3, #1
   1aaa8:	cmp	r4, #0
   1aaac:	blt	1aac4 <__assert_fail@plt+0x99a0>
   1aab0:	cmp	r3, #0
   1aab4:	bne	1aac4 <__assert_fail@plt+0x99a0>
   1aab8:	bl	10e60 <calloc@plt>
   1aabc:	cmp	r0, #0
   1aac0:	popne	{r4, r5, r6, pc}
   1aac4:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1aac8:	push	{r4, r5, r6, lr}
   1aacc:	mov	r4, r1
   1aad0:	mov	r5, r0
   1aad4:	mov	r0, r1
   1aad8:	bl	1a8c0 <__assert_fail@plt+0x979c>
   1aadc:	mov	r2, r4
   1aae0:	mov	r1, r5
   1aae4:	pop	{r4, r5, r6, lr}
   1aae8:	b	10ee4 <memcpy@plt>
   1aaec:	push	{r4, lr}
   1aaf0:	mov	r4, r0
   1aaf4:	bl	11010 <strlen@plt>
   1aaf8:	add	r1, r0, #1
   1aafc:	mov	r0, r4
   1ab00:	pop	{r4, lr}
   1ab04:	b	1aac8 <__assert_fail@plt+0x99a4>
   1ab08:	ldr	r3, [pc, #44]	; 1ab3c <__assert_fail@plt+0x9a18>
   1ab0c:	push	{r4, lr}
   1ab10:	mov	r2, #5
   1ab14:	ldr	r1, [pc, #36]	; 1ab40 <__assert_fail@plt+0x9a1c>
   1ab18:	mov	r0, #0
   1ab1c:	ldr	r4, [r3]
   1ab20:	bl	10f08 <dcgettext@plt>
   1ab24:	ldr	r2, [pc, #24]	; 1ab44 <__assert_fail@plt+0x9a20>
   1ab28:	mov	r1, #0
   1ab2c:	mov	r3, r0
   1ab30:	mov	r0, r4
   1ab34:	bl	10f98 <error@plt>
   1ab38:	bl	11118 <abort@plt>
   1ab3c:	andeq	r1, r3, r0, lsl r1
   1ab40:	andeq	r0, r2, r0, asr ip
   1ab44:	andeq	r0, r2, r0, ror r7
   1ab48:	push	{r4, lr}
   1ab4c:	sub	sp, sp, #8
   1ab50:	ldr	ip, [sp, #16]
   1ab54:	str	ip, [sp]
   1ab58:	bl	1c4bc <__assert_fail@plt+0xb398>
   1ab5c:	subs	r4, r0, #0
   1ab60:	blt	1ab70 <__assert_fail@plt+0x9a4c>
   1ab64:	mov	r0, r4
   1ab68:	add	sp, sp, #8
   1ab6c:	pop	{r4, pc}
   1ab70:	bl	11028 <__errno_location@plt>
   1ab74:	ldr	r3, [r0]
   1ab78:	cmp	r3, #12
   1ab7c:	bne	1ab64 <__assert_fail@plt+0x9a40>
   1ab80:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1ab84:	push	{r4, lr}
   1ab88:	bl	1c754 <__assert_fail@plt+0xb630>
   1ab8c:	subs	r4, r0, #0
   1ab90:	beq	1ab9c <__assert_fail@plt+0x9a78>
   1ab94:	mov	r0, r4
   1ab98:	pop	{r4, pc}
   1ab9c:	bl	11028 <__errno_location@plt>
   1aba0:	ldr	r3, [r0]
   1aba4:	cmp	r3, #12
   1aba8:	bne	1ab94 <__assert_fail@plt+0x9a70>
   1abac:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1abb0:	push	{r4, lr}
   1abb4:	bl	1c93c <__assert_fail@plt+0xb818>
   1abb8:	subs	r4, r0, #0
   1abbc:	beq	1abc8 <__assert_fail@plt+0x9aa4>
   1abc0:	mov	r0, r4
   1abc4:	pop	{r4, pc}
   1abc8:	bl	11028 <__errno_location@plt>
   1abcc:	ldr	r3, [r0]
   1abd0:	cmp	r3, #12
   1abd4:	bne	1abc0 <__assert_fail@plt+0x9a9c>
   1abd8:	bl	1ab08 <__assert_fail@plt+0x99e4>
   1abdc:	push	{r4, r5, r6, r7, r8, lr}
   1abe0:	subs	r7, r0, #0
   1abe4:	ldr	r5, [pc, #108]	; 1ac58 <__assert_fail@plt+0x9b34>
   1abe8:	sub	sp, sp, #8
   1abec:	mov	r8, r1
   1abf0:	ldr	r1, [r5]
   1abf4:	moveq	r7, sp
   1abf8:	str	r1, [sp, #4]
   1abfc:	mov	r0, r7
   1ac00:	mov	r1, r8
   1ac04:	mov	r6, r2
   1ac08:	bl	10f8c <mbrtowc@plt>
   1ac0c:	cmp	r6, #0
   1ac10:	cmnne	r0, #3
   1ac14:	mov	r4, r0
   1ac18:	bhi	1ac38 <__assert_fail@plt+0x9b14>
   1ac1c:	ldr	r2, [sp, #4]
   1ac20:	ldr	r3, [r5]
   1ac24:	mov	r0, r4
   1ac28:	cmp	r2, r3
   1ac2c:	bne	1ac54 <__assert_fail@plt+0x9b30>
   1ac30:	add	sp, sp, #8
   1ac34:	pop	{r4, r5, r6, r7, r8, pc}
   1ac38:	mov	r0, #0
   1ac3c:	bl	1ad40 <__assert_fail@plt+0x9c1c>
   1ac40:	cmp	r0, #0
   1ac44:	moveq	r4, #1
   1ac48:	ldrbeq	r3, [r8]
   1ac4c:	streq	r3, [r7]
   1ac50:	b	1ac1c <__assert_fail@plt+0x9af8>
   1ac54:	bl	10f20 <__stack_chk_fail@plt>
   1ac58:	andeq	r0, r3, r8, lsl #30
   1ac5c:	cmp	r0, r1
   1ac60:	beq	1acc4 <__assert_fail@plt+0x9ba0>
   1ac64:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac68:	sub	r0, r0, #1
   1ac6c:	sub	r1, r1, #1
   1ac70:	b	1ac7c <__assert_fail@plt+0x9b58>
   1ac74:	cmp	r3, r2
   1ac78:	bne	1acb4 <__assert_fail@plt+0x9b90>
   1ac7c:	ldrb	r3, [r0, #1]!
   1ac80:	sub	r2, r3, #65	; 0x41
   1ac84:	cmp	r2, #25
   1ac88:	ldrb	r2, [r1, #1]!
   1ac8c:	mov	ip, r3
   1ac90:	addls	ip, r3, #32
   1ac94:	sub	lr, r2, #65	; 0x41
   1ac98:	uxtbls	r3, ip
   1ac9c:	cmp	lr, #25
   1aca0:	mov	lr, r2
   1aca4:	addls	lr, r2, #32
   1aca8:	uxtbls	r2, lr
   1acac:	cmp	r3, #0
   1acb0:	bne	1ac74 <__assert_fail@plt+0x9b50>
   1acb4:	uxtb	ip, ip
   1acb8:	uxtb	r0, lr
   1acbc:	sub	r0, ip, r0
   1acc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc4:	mov	r0, #0
   1acc8:	bx	lr
   1accc:	push	{r4, r5, r6, lr}
   1acd0:	mov	r4, r0
   1acd4:	bl	10f80 <__fpending@plt>
   1acd8:	ldr	r5, [r4]
   1acdc:	and	r5, r5, #32
   1ace0:	mov	r6, r0
   1ace4:	mov	r0, r4
   1ace8:	bl	1ca14 <__assert_fail@plt+0xb8f0>
   1acec:	cmp	r5, #0
   1acf0:	mov	r4, r0
   1acf4:	bne	1ad20 <__assert_fail@plt+0x9bfc>
   1acf8:	cmp	r0, #0
   1acfc:	beq	1ad18 <__assert_fail@plt+0x9bf4>
   1ad00:	cmp	r6, #0
   1ad04:	bne	1ad38 <__assert_fail@plt+0x9c14>
   1ad08:	bl	11028 <__errno_location@plt>
   1ad0c:	ldr	r4, [r0]
   1ad10:	subs	r4, r4, #9
   1ad14:	mvnne	r4, #0
   1ad18:	mov	r0, r4
   1ad1c:	pop	{r4, r5, r6, pc}
   1ad20:	cmp	r0, #0
   1ad24:	bne	1ad38 <__assert_fail@plt+0x9c14>
   1ad28:	bl	11028 <__errno_location@plt>
   1ad2c:	str	r4, [r0]
   1ad30:	mvn	r4, #0
   1ad34:	b	1ad18 <__assert_fail@plt+0x9bf4>
   1ad38:	mvn	r4, #0
   1ad3c:	b	1ad18 <__assert_fail@plt+0x9bf4>
   1ad40:	push	{r4, lr}
   1ad44:	mov	r1, #0
   1ad48:	bl	110d0 <setlocale@plt>
   1ad4c:	subs	r4, r0, #0
   1ad50:	beq	1ad7c <__assert_fail@plt+0x9c58>
   1ad54:	ldr	r1, [pc, #40]	; 1ad84 <__assert_fail@plt+0x9c60>
   1ad58:	bl	10e9c <strcmp@plt>
   1ad5c:	cmp	r0, #0
   1ad60:	popeq	{r4, pc}
   1ad64:	mov	r0, r4
   1ad68:	ldr	r1, [pc, #24]	; 1ad88 <__assert_fail@plt+0x9c64>
   1ad6c:	bl	10e9c <strcmp@plt>
   1ad70:	adds	r0, r0, #0
   1ad74:	movne	r0, #1
   1ad78:	pop	{r4, pc}
   1ad7c:	mov	r0, #1
   1ad80:	pop	{r4, pc}
   1ad84:	andeq	r0, r2, r4, ror #24
   1ad88:	andeq	r0, r2, r8, ror #24
   1ad8c:	push	{r4, lr}
   1ad90:	mov	r0, #14
   1ad94:	bl	110e8 <nl_langinfo@plt>
   1ad98:	cmp	r0, #0
   1ad9c:	beq	1adb4 <__assert_fail@plt+0x9c90>
   1ada0:	ldrb	r2, [r0]
   1ada4:	ldr	r3, [pc, #16]	; 1adbc <__assert_fail@plt+0x9c98>
   1ada8:	cmp	r2, #0
   1adac:	moveq	r0, r3
   1adb0:	pop	{r4, pc}
   1adb4:	ldr	r0, [pc]	; 1adbc <__assert_fail@plt+0x9c98>
   1adb8:	pop	{r4, pc}
   1adbc:	andeq	r0, r2, r0, ror ip
   1adc0:	push	{r4, lr}
   1adc4:	mov	r4, r0
   1adc8:	bl	10eb4 <wcwidth@plt>
   1adcc:	cmp	r0, #0
   1add0:	popge	{r4, pc}
   1add4:	mov	r0, r4
   1add8:	bl	10f44 <iswcntrl@plt>
   1addc:	clz	r0, r0
   1ade0:	lsr	r0, r0, #5
   1ade4:	pop	{r4, pc}
   1ade8:	mov	r3, r1
   1adec:	push	{r4, r5, r6, lr}
   1adf0:	mov	r4, r1
   1adf4:	ldr	r1, [r3], #16
   1adf8:	ldr	r2, [r4, #4]
   1adfc:	cmp	r1, r3
   1ae00:	mov	r5, r0
   1ae04:	strne	r1, [r0]
   1ae08:	beq	1ae28 <__assert_fail@plt+0x9d04>
   1ae0c:	ldrb	r3, [r4, #8]
   1ae10:	str	r2, [r5, #4]
   1ae14:	cmp	r3, #0
   1ae18:	strb	r3, [r5, #8]
   1ae1c:	ldrne	r3, [r4, #12]
   1ae20:	strne	r3, [r5, #12]
   1ae24:	pop	{r4, r5, r6, pc}
   1ae28:	add	r3, r0, #16
   1ae2c:	mov	r0, r3
   1ae30:	bl	10ee4 <memcpy@plt>
   1ae34:	ldr	r2, [r4, #4]
   1ae38:	str	r0, [r5]
   1ae3c:	b	1ae0c <__assert_fail@plt+0x9ce8>
   1ae40:	ldr	r3, [pc, #20]	; 1ae5c <__assert_fail@plt+0x9d38>
   1ae44:	lsr	r2, r0, #5
   1ae48:	and	r0, r0, #31
   1ae4c:	ldr	r3, [r3, r2, lsl #2]
   1ae50:	lsr	r0, r3, r0
   1ae54:	and	r0, r0, #1
   1ae58:	bx	lr
   1ae5c:	andeq	r0, r2, r8, ror ip
   1ae60:	push	{r4, r5, r6, r7, r8, fp, lr}
   1ae64:	mov	r7, r2
   1ae68:	ldr	r6, [pc, #368]	; 1afe0 <__assert_fail@plt+0x9ebc>
   1ae6c:	add	fp, sp, #24
   1ae70:	lsrs	r2, r7, #30
   1ae74:	sub	sp, sp, #12
   1ae78:	ldr	lr, [r6]
   1ae7c:	movne	ip, #1
   1ae80:	moveq	ip, #0
   1ae84:	lsls	r2, r7, #2
   1ae88:	str	lr, [fp, #-32]	; 0xffffffe0
   1ae8c:	bmi	1afa0 <__assert_fail@plt+0x9e7c>
   1ae90:	cmp	ip, #0
   1ae94:	bne	1afa0 <__assert_fail@plt+0x9e7c>
   1ae98:	cmp	r2, #4016	; 0xfb0
   1ae9c:	mov	r5, r0
   1aea0:	mov	r4, r1
   1aea4:	mov	r8, r3
   1aea8:	bhi	1af90 <__assert_fail@plt+0x9e6c>
   1aeac:	add	r3, r2, #22
   1aeb0:	bic	r3, r3, #7
   1aeb4:	sub	sp, sp, r3
   1aeb8:	add	r0, sp, #15
   1aebc:	bic	r0, r0, #15
   1aec0:	cmp	r0, #0
   1aec4:	beq	1afa0 <__assert_fail@plt+0x9e7c>
   1aec8:	cmp	r7, #2
   1aecc:	mov	r3, #1
   1aed0:	str	r3, [r0, #4]
   1aed4:	movhi	r1, r4
   1aed8:	movhi	ip, #0
   1aedc:	movhi	r3, #2
   1aee0:	bls	1af28 <__assert_fail@plt+0x9e04>
   1aee4:	ldrb	r2, [r1, #1]!
   1aee8:	ldrb	lr, [r4, ip]
   1aeec:	cmp	lr, r2
   1aef0:	bne	1af0c <__assert_fail@plt+0x9de8>
   1aef4:	b	1afc4 <__assert_fail@plt+0x9ea0>
   1aef8:	ldr	lr, [r0, ip, lsl #2]
   1aefc:	sub	ip, ip, lr
   1af00:	ldrb	lr, [r4, ip]
   1af04:	cmp	lr, r2
   1af08:	beq	1afc4 <__assert_fail@plt+0x9ea0>
   1af0c:	cmp	ip, #0
   1af10:	bne	1aef8 <__assert_fail@plt+0x9dd4>
   1af14:	mov	ip, #0
   1af18:	str	r3, [r0, r3, lsl #2]
   1af1c:	add	r3, r3, #1
   1af20:	cmp	r7, r3
   1af24:	bne	1aee4 <__assert_fail@plt+0x9dc0>
   1af28:	mov	r3, #0
   1af2c:	str	r3, [r8]
   1af30:	ldrb	r2, [r5]
   1af34:	mov	r1, r5
   1af38:	cmp	r2, #0
   1af3c:	beq	1af70 <__assert_fail@plt+0x9e4c>
   1af40:	ldrb	ip, [r4, r3]
   1af44:	cmp	ip, r2
   1af48:	beq	1afa8 <__assert_fail@plt+0x9e84>
   1af4c:	cmp	r3, #0
   1af50:	addeq	r5, r5, #1
   1af54:	ldrbeq	r2, [r1, #1]
   1af58:	ldrne	ip, [r0, r3, lsl #2]
   1af5c:	addeq	r1, r1, #1
   1af60:	addne	r5, r5, ip
   1af64:	subne	r3, r3, ip
   1af68:	cmp	r2, #0
   1af6c:	bne	1af40 <__assert_fail@plt+0x9e1c>
   1af70:	bl	1cbf0 <__assert_fail@plt+0xbacc>
   1af74:	mov	r0, #1
   1af78:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1af7c:	ldr	r3, [r6]
   1af80:	cmp	r2, r3
   1af84:	bne	1afdc <__assert_fail@plt+0x9eb8>
   1af88:	sub	sp, fp, #24
   1af8c:	pop	{r4, r5, r6, r7, r8, fp, pc}
   1af90:	mov	r0, r2
   1af94:	bl	1cbb4 <__assert_fail@plt+0xba90>
   1af98:	cmp	r0, #0
   1af9c:	bne	1aec8 <__assert_fail@plt+0x9da4>
   1afa0:	mov	r0, #0
   1afa4:	b	1af78 <__assert_fail@plt+0x9e54>
   1afa8:	add	r3, r3, #1
   1afac:	cmp	r7, r3
   1afb0:	add	ip, r1, #1
   1afb4:	beq	1afd4 <__assert_fail@plt+0x9eb0>
   1afb8:	ldrb	r2, [r1, #1]
   1afbc:	mov	r1, ip
   1afc0:	b	1af38 <__assert_fail@plt+0x9e14>
   1afc4:	add	ip, ip, #1
   1afc8:	sub	r2, r3, ip
   1afcc:	str	r2, [r0, r3, lsl #2]
   1afd0:	b	1af1c <__assert_fail@plt+0x9df8>
   1afd4:	str	r5, [r8]
   1afd8:	b	1af70 <__assert_fail@plt+0x9e4c>
   1afdc:	bl	10f20 <__stack_chk_fail@plt>
   1afe0:	andeq	r0, r3, r8, lsl #30
   1afe4:	push	{r4, lr}
   1afe8:	mov	r2, #179	; 0xb3
   1afec:	ldr	r3, [pc, #8]	; 1affc <__assert_fail@plt+0x9ed8>
   1aff0:	ldr	r1, [pc, #8]	; 1b000 <__assert_fail@plt+0x9edc>
   1aff4:	ldr	r0, [pc, #8]	; 1b004 <__assert_fail@plt+0x9ee0>
   1aff8:	bl	11124 <__assert_fail@plt>
   1affc:	muleq	r2, r8, ip
   1b000:	andeq	r0, r2, ip, asr #15
   1b004:	ldrdeq	r0, [r2], -ip
   1b008:	ldr	r3, [pc, #2124]	; 1b85c <__assert_fail@plt+0xa738>
   1b00c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b010:	add	fp, sp, #32
   1b014:	sub	sp, sp, #196	; 0xc4
   1b018:	ldr	r3, [r3]
   1b01c:	str	r0, [fp, #-220]	; 0xffffff24
   1b020:	mov	r0, r1
   1b024:	mov	r7, r1
   1b028:	str	r2, [fp, #-224]	; 0xffffff20
   1b02c:	str	r3, [fp, #-40]	; 0xffffffd8
   1b030:	bl	1cc14 <__assert_fail@plt+0xbaf0>
   1b034:	mov	r2, #44	; 0x2c
   1b038:	str	r0, [fp, #-216]	; 0xffffff28
   1b03c:	umull	r0, r1, r0, r2
   1b040:	adds	r3, r1, #0
   1b044:	movne	r3, #1
   1b048:	cmp	r0, #0
   1b04c:	blt	1b40c <__assert_fail@plt+0xa2e8>
   1b050:	cmp	r3, #0
   1b054:	bne	1b40c <__assert_fail@plt+0xa2e8>
   1b058:	ldr	r3, [fp, #-216]	; 0xffffff28
   1b05c:	lsl	r4, r3, #2
   1b060:	add	r0, r4, r3
   1b064:	add	r0, r3, r0, lsl #1
   1b068:	lsl	r0, r0, #2
   1b06c:	cmp	r0, #4016	; 0xfb0
   1b070:	bhi	1b42c <__assert_fail@plt+0xa308>
   1b074:	add	r3, r0, #22
   1b078:	bic	r3, r3, #7
   1b07c:	sub	sp, sp, r3
   1b080:	add	r8, sp, #15
   1b084:	bic	r8, r8, #15
   1b088:	cmp	r8, #0
   1b08c:	beq	1b40c <__assert_fail@plt+0xa2e8>
   1b090:	ldr	r3, [fp, #-216]	; 0xffffff28
   1b094:	mov	r5, #0
   1b098:	add	r4, r4, r3
   1b09c:	str	r7, [fp, #-192]	; 0xffffff40
   1b0a0:	add	r9, r8, r4, lsl #3
   1b0a4:	str	r5, [fp, #-200]	; 0xffffff38
   1b0a8:	strb	r5, [fp, #-208]	; 0xffffff30
   1b0ac:	str	r5, [fp, #-204]	; 0xffffff34
   1b0b0:	strb	r5, [fp, #-196]	; 0xffffff3c
   1b0b4:	add	r4, r8, #16
   1b0b8:	ldr	r6, [pc, #1952]	; 1b860 <__assert_fail@plt+0xa73c>
   1b0bc:	b	1b140 <__assert_fail@plt+0xa01c>
   1b0c0:	ldrb	r3, [r7]
   1b0c4:	and	r2, r3, #31
   1b0c8:	lsr	r3, r3, #5
   1b0cc:	ldr	r3, [r6, r3, lsl #2]
   1b0d0:	lsr	r3, r3, r2
   1b0d4:	tst	r3, #1
   1b0d8:	beq	1b438 <__assert_fail@plt+0xa314>
   1b0dc:	mov	r3, #1
   1b0e0:	str	r3, [fp, #-188]	; 0xffffff44
   1b0e4:	ldrb	r7, [r7]
   1b0e8:	strb	r3, [fp, #-184]	; 0xffffff48
   1b0ec:	strb	r3, [fp, #-196]	; 0xffffff3c
   1b0f0:	str	r7, [fp, #-180]	; 0xffffff4c
   1b0f4:	cmp	r7, #0
   1b0f8:	beq	1b1b4 <__assert_fail@plt+0xa090>
   1b0fc:	mov	r3, #1
   1b100:	ldr	r1, [fp, #-192]	; 0xffffff40
   1b104:	sub	r2, fp, #176	; 0xb0
   1b108:	cmp	r1, r2
   1b10c:	ldr	r2, [fp, #-188]	; 0xffffff44
   1b110:	strne	r1, [r4, #-16]
   1b114:	beq	1b454 <__assert_fail@plt+0xa330>
   1b118:	cmp	r3, #0
   1b11c:	str	r2, [r4, #-12]
   1b120:	strb	r3, [r4, #-8]
   1b124:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   1b128:	ldr	r7, [fp, #-192]	; 0xffffff40
   1b12c:	strne	r3, [r4, #-4]
   1b130:	add	r4, r4, #40	; 0x28
   1b134:	add	r7, r7, r2
   1b138:	strb	r5, [fp, #-196]	; 0xffffff3c
   1b13c:	str	r7, [fp, #-192]	; 0xffffff40
   1b140:	ldrb	r3, [fp, #-208]	; 0xffffff30
   1b144:	cmp	r3, #0
   1b148:	beq	1b0c0 <__assert_fail@plt+0x9f9c>
   1b14c:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1b150:	mov	r1, r0
   1b154:	mov	r0, r7
   1b158:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1b15c:	sub	r3, fp, #204	; 0xcc
   1b160:	mov	r1, r7
   1b164:	mov	r2, r0
   1b168:	sub	r0, fp, #180	; 0xb4
   1b16c:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1b170:	cmn	r0, #1
   1b174:	str	r0, [fp, #-188]	; 0xffffff44
   1b178:	beq	1b46c <__assert_fail@plt+0xa348>
   1b17c:	cmn	r0, #2
   1b180:	beq	1b484 <__assert_fail@plt+0xa360>
   1b184:	cmp	r0, #0
   1b188:	beq	1b4a4 <__assert_fail@plt+0xa380>
   1b18c:	ldr	r7, [fp, #-180]	; 0xffffff4c
   1b190:	mov	sl, #1
   1b194:	sub	r0, fp, #204	; 0xcc
   1b198:	strb	sl, [fp, #-184]	; 0xffffff48
   1b19c:	bl	10ef0 <mbsinit@plt>
   1b1a0:	strb	sl, [fp, #-196]	; 0xffffff3c
   1b1a4:	cmp	r0, #0
   1b1a8:	strbne	r5, [fp, #-208]	; 0xffffff30
   1b1ac:	cmp	r7, #0
   1b1b0:	bne	1b0fc <__assert_fail@plt+0x9fd8>
   1b1b4:	ldr	r3, [fp, #-216]	; 0xffffff28
   1b1b8:	cmp	r3, #2
   1b1bc:	mov	r3, #1
   1b1c0:	str	r3, [r9, #4]
   1b1c4:	bls	1b268 <__assert_fail@plt+0xa144>
   1b1c8:	mov	sl, #2
   1b1cc:	mov	r4, r7
   1b1d0:	str	r7, [fp, #-228]	; 0xffffff1c
   1b1d4:	mov	r7, sl
   1b1d8:	ldr	sl, [fp, #-216]	; 0xffffff28
   1b1dc:	mov	r5, r8
   1b1e0:	ldrb	r6, [r5, #48]	; 0x30
   1b1e4:	b	1b214 <__assert_fail@plt+0xa0f0>
   1b1e8:	ldrb	r2, [r3, #8]
   1b1ec:	cmp	r2, #0
   1b1f0:	beq	1b224 <__assert_fail@plt+0xa100>
   1b1f4:	ldr	r3, [r3, #12]
   1b1f8:	ldr	r2, [r5, #52]	; 0x34
   1b1fc:	cmp	r2, r3
   1b200:	beq	1b248 <__assert_fail@plt+0xa124>
   1b204:	cmp	r4, #0
   1b208:	beq	1b780 <__assert_fail@plt+0xa65c>
   1b20c:	ldr	r3, [r9, r4, lsl #2]
   1b210:	sub	r4, r4, r3
   1b214:	add	r3, r4, r4, lsl #2
   1b218:	cmp	r6, #0
   1b21c:	add	r3, r8, r3, lsl #3
   1b220:	bne	1b1e8 <__assert_fail@plt+0xa0c4>
   1b224:	ldr	r2, [r5, #44]	; 0x2c
   1b228:	ldr	r1, [r3, #4]
   1b22c:	cmp	r2, r1
   1b230:	bne	1b204 <__assert_fail@plt+0xa0e0>
   1b234:	ldr	r1, [r3]
   1b238:	ldr	r0, [r5, #40]	; 0x28
   1b23c:	bl	10efc <memcmp@plt>
   1b240:	cmp	r0, #0
   1b244:	bne	1b204 <__assert_fail@plt+0xa0e0>
   1b248:	add	r4, r4, #1
   1b24c:	sub	r2, r7, r4
   1b250:	str	r2, [r9, r7, lsl #2]
   1b254:	add	r7, r7, #1
   1b258:	cmp	sl, r7
   1b25c:	add	r5, r5, #40	; 0x28
   1b260:	bne	1b1e0 <__assert_fail@plt+0xa0bc>
   1b264:	ldr	r7, [fp, #-228]	; 0xffffff1c
   1b268:	ldr	r2, [fp, #-220]	; 0xffffff24
   1b26c:	ldr	sl, [pc, #1516]	; 1b860 <__assert_fail@plt+0xa73c>
   1b270:	str	r2, [fp, #-136]	; 0xffffff78
   1b274:	str	r2, [fp, #-80]	; 0xffffffb0
   1b278:	ldr	r2, [fp, #-224]	; 0xffffff20
   1b27c:	mov	r6, #1
   1b280:	mov	r3, #0
   1b284:	str	r3, [fp, #-144]	; 0xffffff70
   1b288:	str	r3, [r2]
   1b28c:	strb	r3, [fp, #-152]	; 0xffffff68
   1b290:	str	r3, [fp, #-148]	; 0xffffff6c
   1b294:	strb	r3, [fp, #-140]	; 0xffffff74
   1b298:	strb	r3, [fp, #-96]	; 0xffffffa0
   1b29c:	str	r3, [fp, #-92]	; 0xffffffa4
   1b2a0:	strb	r3, [fp, #-84]	; 0xffffffac
   1b2a4:	str	r3, [fp, #-88]	; 0xffffffa8
   1b2a8:	cmp	r3, #0
   1b2ac:	ldreq	r5, [fp, #-80]	; 0xffffffb0
   1b2b0:	beq	1b364 <__assert_fail@plt+0xa240>
   1b2b4:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   1b2b8:	cmp	r3, #0
   1b2bc:	ldrne	r4, [fp, #-68]	; 0xffffffbc
   1b2c0:	bne	1b3a0 <__assert_fail@plt+0xa27c>
   1b2c4:	add	r3, r7, r7, lsl #2
   1b2c8:	add	r3, r8, r3, lsl #3
   1b2cc:	ldr	r2, [r3, #4]
   1b2d0:	ldr	r4, [fp, #-76]	; 0xffffffb4
   1b2d4:	cmp	r2, r4
   1b2d8:	beq	1b548 <__assert_fail@plt+0xa424>
   1b2dc:	cmp	r7, #0
   1b2e0:	bne	1b56c <__assert_fail@plt+0xa448>
   1b2e4:	ldrb	r3, [fp, #-140]	; 0xffffff74
   1b2e8:	cmp	r3, #0
   1b2ec:	bne	1b7c8 <__assert_fail@plt+0xa6a4>
   1b2f0:	ldrb	r3, [fp, #-152]	; 0xffffff68
   1b2f4:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b2f8:	cmp	r3, #0
   1b2fc:	bne	1b718 <__assert_fail@plt+0xa5f4>
   1b300:	ldrb	r3, [r4]
   1b304:	and	r2, r3, #31
   1b308:	lsr	r3, r3, #5
   1b30c:	ldr	r3, [sl, r3, lsl #2]
   1b310:	lsr	r3, r3, r2
   1b314:	tst	r3, #1
   1b318:	beq	1b704 <__assert_fail@plt+0xa5e0>
   1b31c:	str	r6, [fp, #-132]	; 0xffffff7c
   1b320:	ldrb	r4, [r4]
   1b324:	strb	r6, [fp, #-128]	; 0xffffff80
   1b328:	strb	r6, [fp, #-140]	; 0xffffff74
   1b32c:	str	r4, [fp, #-124]	; 0xffffff84
   1b330:	cmp	r4, #0
   1b334:	beq	1b604 <__assert_fail@plt+0xa4e0>
   1b338:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b33c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1b340:	ldr	r5, [fp, #-80]	; 0xffffffb0
   1b344:	add	r4, r4, r3
   1b348:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1b34c:	str	r4, [fp, #-136]	; 0xffffff78
   1b350:	add	r5, r5, r3
   1b354:	mov	r3, #0
   1b358:	str	r5, [fp, #-80]	; 0xffffffb0
   1b35c:	strb	r3, [fp, #-140]	; 0xffffff74
   1b360:	strb	r3, [fp, #-84]	; 0xffffffac
   1b364:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   1b368:	cmp	r3, #0
   1b36c:	bne	1b4e0 <__assert_fail@plt+0xa3bc>
   1b370:	ldrb	r3, [r5]
   1b374:	and	r2, r3, #31
   1b378:	lsr	r3, r3, #5
   1b37c:	ldr	r3, [sl, r3, lsl #2]
   1b380:	lsr	r3, r3, r2
   1b384:	tst	r3, #1
   1b388:	beq	1b4cc <__assert_fail@plt+0xa3a8>
   1b38c:	str	r6, [fp, #-76]	; 0xffffffb4
   1b390:	ldrb	r4, [r5]
   1b394:	strb	r6, [fp, #-72]	; 0xffffffb8
   1b398:	strb	r6, [fp, #-84]	; 0xffffffac
   1b39c:	str	r4, [fp, #-68]	; 0xffffffbc
   1b3a0:	cmp	r4, #0
   1b3a4:	beq	1b3fc <__assert_fail@plt+0xa2d8>
   1b3a8:	add	r3, r7, r7, lsl #2
   1b3ac:	add	r3, r8, r3, lsl #3
   1b3b0:	ldrb	r2, [r3, #8]
   1b3b4:	cmp	r2, #0
   1b3b8:	beq	1b2cc <__assert_fail@plt+0xa1a8>
   1b3bc:	ldr	r3, [r3, #12]
   1b3c0:	cmp	r3, r4
   1b3c4:	bne	1b2dc <__assert_fail@plt+0xa1b8>
   1b3c8:	ldr	r4, [fp, #-76]	; 0xffffffb4
   1b3cc:	ldr	r5, [fp, #-80]	; 0xffffffb0
   1b3d0:	ldr	r3, [fp, #-216]	; 0xffffff28
   1b3d4:	add	r7, r7, #1
   1b3d8:	cmp	r3, r7
   1b3dc:	add	r5, r5, r4
   1b3e0:	mov	r3, #0
   1b3e4:	str	r5, [fp, #-80]	; 0xffffffb0
   1b3e8:	strb	r3, [fp, #-84]	; 0xffffffac
   1b3ec:	bne	1b364 <__assert_fail@plt+0xa240>
   1b3f0:	ldr	r2, [fp, #-224]	; 0xffffff20
   1b3f4:	ldr	r3, [fp, #-136]	; 0xffffff78
   1b3f8:	str	r3, [r2]
   1b3fc:	mov	r0, r8
   1b400:	bl	1cbf0 <__assert_fail@plt+0xbacc>
   1b404:	mov	r0, #1
   1b408:	b	1b410 <__assert_fail@plt+0xa2ec>
   1b40c:	mov	r0, #0
   1b410:	ldr	r3, [pc, #1092]	; 1b85c <__assert_fail@plt+0xa738>
   1b414:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1b418:	ldr	r3, [r3]
   1b41c:	cmp	r2, r3
   1b420:	bne	1b858 <__assert_fail@plt+0xa734>
   1b424:	sub	sp, fp, #32
   1b428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b42c:	bl	1cbb4 <__assert_fail@plt+0xba90>
   1b430:	mov	r8, r0
   1b434:	b	1b088 <__assert_fail@plt+0x9f64>
   1b438:	sub	r0, fp, #204	; 0xcc
   1b43c:	bl	10ef0 <mbsinit@plt>
   1b440:	cmp	r0, #0
   1b444:	beq	1b830 <__assert_fail@plt+0xa70c>
   1b448:	mov	r3, #1
   1b44c:	strb	r3, [fp, #-208]	; 0xffffff30
   1b450:	b	1b14c <__assert_fail@plt+0xa028>
   1b454:	mov	r0, r4
   1b458:	bl	10ee4 <memcpy@plt>
   1b45c:	str	r4, [r4, #-16]
   1b460:	ldrb	r3, [fp, #-184]	; 0xffffff48
   1b464:	ldr	r2, [fp, #-188]	; 0xffffff44
   1b468:	b	1b118 <__assert_fail@plt+0x9ff4>
   1b46c:	mov	r3, #1
   1b470:	str	r3, [fp, #-188]	; 0xffffff44
   1b474:	strb	r3, [fp, #-196]	; 0xffffff3c
   1b478:	strb	r5, [fp, #-184]	; 0xffffff48
   1b47c:	mov	r3, #0
   1b480:	b	1b100 <__assert_fail@plt+0x9fdc>
   1b484:	ldr	r0, [fp, #-192]	; 0xffffff40
   1b488:	bl	11010 <strlen@plt>
   1b48c:	mov	r3, #1
   1b490:	strb	r3, [fp, #-196]	; 0xffffff3c
   1b494:	strb	r5, [fp, #-184]	; 0xffffff48
   1b498:	mov	r3, #0
   1b49c:	str	r0, [fp, #-188]	; 0xffffff44
   1b4a0:	b	1b100 <__assert_fail@plt+0x9fdc>
   1b4a4:	ldr	r3, [fp, #-192]	; 0xffffff40
   1b4a8:	mov	r2, #1
   1b4ac:	str	r2, [fp, #-188]	; 0xffffff44
   1b4b0:	ldrb	r3, [r3]
   1b4b4:	cmp	r3, #0
   1b4b8:	bne	1b844 <__assert_fail@plt+0xa720>
   1b4bc:	ldr	r7, [fp, #-180]	; 0xffffff4c
   1b4c0:	cmp	r7, #0
   1b4c4:	beq	1b190 <__assert_fail@plt+0xa06c>
   1b4c8:	bl	1afe4 <__assert_fail@plt+0x9ec0>
   1b4cc:	sub	r0, fp, #92	; 0x5c
   1b4d0:	bl	10ef0 <mbsinit@plt>
   1b4d4:	cmp	r0, #0
   1b4d8:	beq	1b830 <__assert_fail@plt+0xa70c>
   1b4dc:	strb	r6, [fp, #-96]	; 0xffffffa0
   1b4e0:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1b4e4:	mov	r1, r0
   1b4e8:	mov	r0, r5
   1b4ec:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1b4f0:	sub	r3, fp, #92	; 0x5c
   1b4f4:	mov	r1, r5
   1b4f8:	mov	r2, r0
   1b4fc:	sub	r0, fp, #68	; 0x44
   1b500:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1b504:	cmn	r0, #1
   1b508:	str	r0, [fp, #-76]	; 0xffffffb4
   1b50c:	beq	1b6f0 <__assert_fail@plt+0xa5cc>
   1b510:	cmn	r0, #2
   1b514:	beq	1b788 <__assert_fail@plt+0xa664>
   1b518:	cmp	r0, #0
   1b51c:	beq	1b7a4 <__assert_fail@plt+0xa680>
   1b520:	ldr	r4, [fp, #-68]	; 0xffffffbc
   1b524:	sub	r0, fp, #92	; 0x5c
   1b528:	strb	r6, [fp, #-72]	; 0xffffffb8
   1b52c:	bl	10ef0 <mbsinit@plt>
   1b530:	cmp	r0, #0
   1b534:	movne	r3, #0
   1b538:	strbeq	r6, [fp, #-84]	; 0xffffffac
   1b53c:	strbne	r6, [fp, #-84]	; 0xffffffac
   1b540:	strbne	r3, [fp, #-96]	; 0xffffffa0
   1b544:	b	1b3a0 <__assert_fail@plt+0xa27c>
   1b548:	ldr	r5, [fp, #-80]	; 0xffffffb0
   1b54c:	ldr	r0, [r3]
   1b550:	mov	r1, r5
   1b554:	mov	r2, r4
   1b558:	bl	10efc <memcmp@plt>
   1b55c:	cmp	r0, #0
   1b560:	beq	1b3d0 <__assert_fail@plt+0xa2ac>
   1b564:	cmp	r7, #0
   1b568:	beq	1b2e4 <__assert_fail@plt+0xa1c0>
   1b56c:	ldr	r5, [r9, r7, lsl #2]
   1b570:	sub	r3, r7, r5
   1b574:	cmp	r5, #0
   1b578:	str	r3, [fp, #-220]	; 0xffffff24
   1b57c:	beq	1b6e8 <__assert_fail@plt+0xa5c4>
   1b580:	ldrb	r3, [fp, #-140]	; 0xffffff74
   1b584:	cmp	r3, #0
   1b588:	ldreq	r4, [fp, #-136]	; 0xffffff78
   1b58c:	beq	1b5c0 <__assert_fail@plt+0xa49c>
   1b590:	ldrb	r3, [fp, #-128]	; 0xffffff80
   1b594:	cmp	r3, #0
   1b598:	ldrne	r4, [fp, #-124]	; 0xffffff84
   1b59c:	bne	1b5fc <__assert_fail@plt+0xa4d8>
   1b5a0:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b5a4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1b5a8:	subs	r5, r5, #1
   1b5ac:	add	r4, r4, r3
   1b5b0:	mov	r3, #0
   1b5b4:	str	r4, [fp, #-136]	; 0xffffff78
   1b5b8:	strb	r3, [fp, #-140]	; 0xffffff74
   1b5bc:	beq	1b6e4 <__assert_fail@plt+0xa5c0>
   1b5c0:	ldrb	r3, [fp, #-152]	; 0xffffff68
   1b5c4:	cmp	r3, #0
   1b5c8:	bne	1b61c <__assert_fail@plt+0xa4f8>
   1b5cc:	ldrb	r3, [r4]
   1b5d0:	and	r2, r3, #31
   1b5d4:	lsr	r3, r3, #5
   1b5d8:	ldr	r3, [sl, r3, lsl #2]
   1b5dc:	lsr	r3, r3, r2
   1b5e0:	tst	r3, #1
   1b5e4:	beq	1b608 <__assert_fail@plt+0xa4e4>
   1b5e8:	str	r6, [fp, #-132]	; 0xffffff7c
   1b5ec:	ldrb	r4, [r4]
   1b5f0:	strb	r6, [fp, #-128]	; 0xffffff80
   1b5f4:	strb	r6, [fp, #-140]	; 0xffffff74
   1b5f8:	str	r4, [fp, #-124]	; 0xffffff84
   1b5fc:	cmp	r4, #0
   1b600:	bne	1b5a0 <__assert_fail@plt+0xa47c>
   1b604:	bl	11118 <abort@plt>
   1b608:	sub	r0, fp, #148	; 0x94
   1b60c:	bl	10ef0 <mbsinit@plt>
   1b610:	cmp	r0, #0
   1b614:	beq	1b830 <__assert_fail@plt+0xa70c>
   1b618:	strb	r6, [fp, #-152]	; 0xffffff68
   1b61c:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1b620:	mov	r1, r0
   1b624:	mov	r0, r4
   1b628:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1b62c:	sub	r3, fp, #148	; 0x94
   1b630:	mov	r1, r4
   1b634:	mov	r2, r0
   1b638:	sub	r0, fp, #124	; 0x7c
   1b63c:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1b640:	cmn	r0, #1
   1b644:	str	r0, [fp, #-132]	; 0xffffff7c
   1b648:	beq	1b684 <__assert_fail@plt+0xa560>
   1b64c:	cmn	r0, #2
   1b650:	beq	1b694 <__assert_fail@plt+0xa570>
   1b654:	cmp	r0, #0
   1b658:	beq	1b6b0 <__assert_fail@plt+0xa58c>
   1b65c:	ldr	r4, [fp, #-124]	; 0xffffff84
   1b660:	sub	r0, fp, #148	; 0x94
   1b664:	strb	r6, [fp, #-128]	; 0xffffff80
   1b668:	bl	10ef0 <mbsinit@plt>
   1b66c:	cmp	r0, #0
   1b670:	movne	r3, #0
   1b674:	strbeq	r6, [fp, #-140]	; 0xffffff74
   1b678:	strbne	r6, [fp, #-140]	; 0xffffff74
   1b67c:	strbne	r3, [fp, #-152]	; 0xffffff68
   1b680:	b	1b5fc <__assert_fail@plt+0xa4d8>
   1b684:	mov	r3, #0
   1b688:	str	r6, [fp, #-132]	; 0xffffff7c
   1b68c:	strb	r3, [fp, #-128]	; 0xffffff80
   1b690:	b	1b5a0 <__assert_fail@plt+0xa47c>
   1b694:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b698:	mov	r0, r4
   1b69c:	bl	11010 <strlen@plt>
   1b6a0:	mov	r3, #0
   1b6a4:	strb	r3, [fp, #-128]	; 0xffffff80
   1b6a8:	str	r0, [fp, #-132]	; 0xffffff7c
   1b6ac:	b	1b5a4 <__assert_fail@plt+0xa480>
   1b6b0:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b6b4:	str	r6, [fp, #-132]	; 0xffffff7c
   1b6b8:	ldrb	r3, [r4]
   1b6bc:	cmp	r3, #0
   1b6c0:	bne	1b844 <__assert_fail@plt+0xa720>
   1b6c4:	ldr	r4, [fp, #-124]	; 0xffffff84
   1b6c8:	cmp	r4, #0
   1b6cc:	beq	1b660 <__assert_fail@plt+0xa53c>
   1b6d0:	ldr	r3, [pc, #396]	; 1b864 <__assert_fail@plt+0xa740>
   1b6d4:	mov	r2, #179	; 0xb3
   1b6d8:	ldr	r1, [pc, #392]	; 1b868 <__assert_fail@plt+0xa744>
   1b6dc:	ldr	r0, [pc, #392]	; 1b86c <__assert_fail@plt+0xa748>
   1b6e0:	bl	11124 <__assert_fail@plt>
   1b6e4:	ldr	r7, [fp, #-220]	; 0xffffff24
   1b6e8:	ldrb	r3, [fp, #-84]	; 0xffffffac
   1b6ec:	b	1b2a8 <__assert_fail@plt+0xa184>
   1b6f0:	mov	r3, #0
   1b6f4:	str	r6, [fp, #-76]	; 0xffffffb4
   1b6f8:	strb	r6, [fp, #-84]	; 0xffffffac
   1b6fc:	strb	r3, [fp, #-72]	; 0xffffffb8
   1b700:	b	1b2c4 <__assert_fail@plt+0xa1a0>
   1b704:	sub	r0, fp, #148	; 0x94
   1b708:	bl	10ef0 <mbsinit@plt>
   1b70c:	cmp	r0, #0
   1b710:	beq	1b830 <__assert_fail@plt+0xa70c>
   1b714:	strb	r6, [fp, #-152]	; 0xffffff68
   1b718:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1b71c:	mov	r1, r0
   1b720:	mov	r0, r4
   1b724:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1b728:	sub	r3, fp, #148	; 0x94
   1b72c:	mov	r1, r4
   1b730:	mov	r2, r0
   1b734:	sub	r0, fp, #124	; 0x7c
   1b738:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1b73c:	cmn	r0, #1
   1b740:	str	r0, [fp, #-132]	; 0xffffff7c
   1b744:	beq	1b7dc <__assert_fail@plt+0xa6b8>
   1b748:	cmn	r0, #2
   1b74c:	beq	1b7f0 <__assert_fail@plt+0xa6cc>
   1b750:	cmp	r0, #0
   1b754:	beq	1b80c <__assert_fail@plt+0xa6e8>
   1b758:	ldr	r4, [fp, #-124]	; 0xffffff84
   1b75c:	sub	r0, fp, #148	; 0x94
   1b760:	strb	r6, [fp, #-128]	; 0xffffff80
   1b764:	bl	10ef0 <mbsinit@plt>
   1b768:	cmp	r0, #0
   1b76c:	movne	r3, #0
   1b770:	strbeq	r6, [fp, #-140]	; 0xffffff74
   1b774:	strbne	r6, [fp, #-140]	; 0xffffff74
   1b778:	strbne	r3, [fp, #-152]	; 0xffffff68
   1b77c:	b	1b330 <__assert_fail@plt+0xa20c>
   1b780:	str	r7, [r9, r7, lsl #2]
   1b784:	b	1b254 <__assert_fail@plt+0xa130>
   1b788:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1b78c:	bl	11010 <strlen@plt>
   1b790:	mov	r3, #0
   1b794:	strb	r6, [fp, #-84]	; 0xffffffac
   1b798:	strb	r3, [fp, #-72]	; 0xffffffb8
   1b79c:	str	r0, [fp, #-76]	; 0xffffffb4
   1b7a0:	b	1b2c4 <__assert_fail@plt+0xa1a0>
   1b7a4:	ldr	r5, [fp, #-80]	; 0xffffffb0
   1b7a8:	str	r6, [fp, #-76]	; 0xffffffb4
   1b7ac:	ldrb	r3, [r5]
   1b7b0:	cmp	r3, #0
   1b7b4:	bne	1b844 <__assert_fail@plt+0xa720>
   1b7b8:	ldr	r4, [fp, #-68]	; 0xffffffbc
   1b7bc:	cmp	r4, #0
   1b7c0:	beq	1b524 <__assert_fail@plt+0xa400>
   1b7c4:	b	1b4c8 <__assert_fail@plt+0xa3a4>
   1b7c8:	ldrb	r3, [fp, #-128]	; 0xffffff80
   1b7cc:	cmp	r3, #0
   1b7d0:	ldrne	r4, [fp, #-124]	; 0xffffff84
   1b7d4:	beq	1b338 <__assert_fail@plt+0xa214>
   1b7d8:	b	1b330 <__assert_fail@plt+0xa20c>
   1b7dc:	mov	r3, #0
   1b7e0:	str	r6, [fp, #-132]	; 0xffffff7c
   1b7e4:	strb	r3, [fp, #-128]	; 0xffffff80
   1b7e8:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b7ec:	b	1b33c <__assert_fail@plt+0xa218>
   1b7f0:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b7f4:	mov	r0, r4
   1b7f8:	bl	11010 <strlen@plt>
   1b7fc:	mov	r3, #0
   1b800:	strb	r3, [fp, #-128]	; 0xffffff80
   1b804:	str	r0, [fp, #-132]	; 0xffffff7c
   1b808:	b	1b33c <__assert_fail@plt+0xa218>
   1b80c:	ldr	r4, [fp, #-136]	; 0xffffff78
   1b810:	str	r6, [fp, #-132]	; 0xffffff7c
   1b814:	ldrb	r3, [r4]
   1b818:	cmp	r3, #0
   1b81c:	bne	1b844 <__assert_fail@plt+0xa720>
   1b820:	ldr	r4, [fp, #-124]	; 0xffffff84
   1b824:	cmp	r4, #0
   1b828:	beq	1b75c <__assert_fail@plt+0xa638>
   1b82c:	b	1b4c8 <__assert_fail@plt+0xa3a4>
   1b830:	ldr	r3, [pc, #44]	; 1b864 <__assert_fail@plt+0xa740>
   1b834:	mov	r2, #150	; 0x96
   1b838:	ldr	r1, [pc, #40]	; 1b868 <__assert_fail@plt+0xa744>
   1b83c:	ldr	r0, [pc, #44]	; 1b870 <__assert_fail@plt+0xa74c>
   1b840:	bl	11124 <__assert_fail@plt>
   1b844:	ldr	r3, [pc, #24]	; 1b864 <__assert_fail@plt+0xa740>
   1b848:	mov	r2, #178	; 0xb2
   1b84c:	ldr	r1, [pc, #20]	; 1b868 <__assert_fail@plt+0xa744>
   1b850:	ldr	r0, [pc, #28]	; 1b874 <__assert_fail@plt+0xa750>
   1b854:	bl	11124 <__assert_fail@plt>
   1b858:	bl	10f20 <__stack_chk_fail@plt>
   1b85c:	andeq	r0, r3, r8, lsl #30
   1b860:	andeq	r0, r2, r8, ror ip
   1b864:	muleq	r2, r8, ip
   1b868:	andeq	r0, r2, ip, asr #15
   1b86c:	ldrdeq	r0, [r2], -ip
   1b870:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1b874:	andeq	r0, r2, r8, lsl #16
   1b878:	ldr	r3, [pc, #3108]	; 1c4a4 <__assert_fail@plt+0xb380>
   1b87c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b880:	sub	sp, sp, #308	; 0x134
   1b884:	ldr	r3, [r3]
   1b888:	str	r0, [sp, #4]
   1b88c:	mov	fp, r1
   1b890:	str	r3, [sp, #300]	; 0x12c
   1b894:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1b898:	cmp	r0, #1
   1b89c:	bhi	1bac8 <__assert_fail@plt+0xa9a4>
   1b8a0:	ldrb	r7, [fp]
   1b8a4:	cmp	r7, #0
   1b8a8:	beq	1ba44 <__assert_fail@plt+0xa920>
   1b8ac:	ldr	r3, [sp, #4]
   1b8b0:	ldrb	r8, [r3]
   1b8b4:	add	r3, fp, #1
   1b8b8:	str	r3, [sp, #8]
   1b8bc:	cmp	r8, #0
   1b8c0:	beq	1bac0 <__assert_fail@plt+0xa99c>
   1b8c4:	ldr	sl, [sp, #4]
   1b8c8:	mov	r5, #0
   1b8cc:	mov	ip, r5
   1b8d0:	str	r5, [sp]
   1b8d4:	mov	r9, fp
   1b8d8:	mov	lr, #1
   1b8dc:	mov	r6, sl
   1b8e0:	b	1b944 <__assert_fail@plt+0xa820>
   1b8e4:	cmp	r9, #0
   1b8e8:	str	r3, [sp, #4]
   1b8ec:	beq	1b914 <__assert_fail@plt+0xa7f0>
   1b8f0:	ldr	r3, [sp]
   1b8f4:	mov	r0, r9
   1b8f8:	sub	r1, r4, r3
   1b8fc:	bl	110ac <strnlen@plt>
   1b900:	ldr	r3, [sp, #4]
   1b904:	ldrb	r2, [r9, r0]!
   1b908:	cmp	r2, #0
   1b90c:	bne	1c1f4 <__assert_fail@plt+0xb0d0>
   1b910:	str	r4, [sp]
   1b914:	mov	r0, fp
   1b918:	bl	11010 <strlen@plt>
   1b91c:	add	r3, sp, #16
   1b920:	mov	r1, fp
   1b924:	mov	r2, r0
   1b928:	mov	r0, r6
   1b92c:	bl	1ae60 <__assert_fail@plt+0x9d3c>
   1b930:	subs	lr, r0, #0
   1b934:	bne	1c430 <__assert_fail@plt+0xb30c>
   1b938:	ldrb	r8, [sl, r5]
   1b93c:	mov	r9, lr
   1b940:	mov	ip, r4
   1b944:	add	r5, r5, #1
   1b948:	mov	r0, r6
   1b94c:	cmp	r7, r8
   1b950:	add	r6, r5, sl
   1b954:	mov	r1, r6
   1b958:	add	r4, ip, #1
   1b95c:	beq	1ba64 <__assert_fail@plt+0xa940>
   1b960:	ldrb	r8, [sl, r5]
   1b964:	cmp	r8, #0
   1b968:	beq	1bac0 <__assert_fail@plt+0xa99c>
   1b96c:	cmp	r5, #9
   1b970:	movls	r3, #0
   1b974:	andhi	r3, lr, #1
   1b978:	cmp	r3, #0
   1b97c:	beq	1b940 <__assert_fail@plt+0xa81c>
   1b980:	add	r2, r5, r5, lsl #2
   1b984:	cmp	r4, r2
   1b988:	bcs	1b8e4 <__assert_fail@plt+0xa7c0>
   1b98c:	mov	lr, r3
   1b990:	b	1b940 <__assert_fail@plt+0xa81c>
   1b994:	add	r0, sp, #24
   1b998:	bl	10ef0 <mbsinit@plt>
   1b99c:	cmp	r0, #0
   1b9a0:	beq	1c478 <__assert_fail@plt+0xb354>
   1b9a4:	mov	r5, #1
   1b9a8:	strb	r5, [sp, #20]
   1b9ac:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1b9b0:	mov	r1, r0
   1b9b4:	mov	r0, fp
   1b9b8:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1b9bc:	add	r3, sp, #24
   1b9c0:	mov	r1, fp
   1b9c4:	mov	r2, r0
   1b9c8:	add	r0, sp, #48	; 0x30
   1b9cc:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1b9d0:	cmn	r0, #1
   1b9d4:	str	r0, [sp, #40]	; 0x28
   1b9d8:	strbeq	r4, [sp, #44]	; 0x2c
   1b9dc:	streq	r5, [sp, #40]	; 0x28
   1b9e0:	strbeq	r5, [sp, #32]
   1b9e4:	beq	1bb30 <__assert_fail@plt+0xaa0c>
   1b9e8:	cmn	r0, #2
   1b9ec:	beq	1bb1c <__assert_fail@plt+0xa9f8>
   1b9f0:	cmp	r0, #0
   1b9f4:	bne	1c410 <__assert_fail@plt+0xb2ec>
   1b9f8:	ldr	r3, [sp, #36]	; 0x24
   1b9fc:	str	r5, [sp, #40]	; 0x28
   1ba00:	ldrb	r3, [r3]
   1ba04:	cmp	r3, #0
   1ba08:	bne	1c48c <__assert_fail@plt+0xb368>
   1ba0c:	ldr	r4, [sp, #48]	; 0x30
   1ba10:	cmp	r4, #0
   1ba14:	bne	1c458 <__assert_fail@plt+0xb334>
   1ba18:	mov	r5, #1
   1ba1c:	add	r0, sp, #24
   1ba20:	strb	r5, [sp, #44]	; 0x2c
   1ba24:	bl	10ef0 <mbsinit@plt>
   1ba28:	cmp	r0, #0
   1ba2c:	movne	r3, #0
   1ba30:	strbeq	r5, [sp, #32]
   1ba34:	strbne	r5, [sp, #32]
   1ba38:	strbne	r3, [sp, #20]
   1ba3c:	cmp	r4, #0
   1ba40:	bne	1bb30 <__assert_fail@plt+0xaa0c>
   1ba44:	ldr	r0, [sp, #4]
   1ba48:	ldr	r3, [pc, #2644]	; 1c4a4 <__assert_fail@plt+0xb380>
   1ba4c:	ldr	r2, [sp, #300]	; 0x12c
   1ba50:	ldr	r3, [r3]
   1ba54:	cmp	r2, r3
   1ba58:	bne	1c4a0 <__assert_fail@plt+0xb37c>
   1ba5c:	add	sp, sp, #308	; 0x134
   1ba60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba64:	ldrb	r3, [fp, #1]
   1ba68:	cmp	r3, #0
   1ba6c:	beq	1ba48 <__assert_fail@plt+0xa924>
   1ba70:	ldrb	r8, [sl, r5]
   1ba74:	cmp	r8, #0
   1ba78:	beq	1bac0 <__assert_fail@plt+0xa99c>
   1ba7c:	cmp	r3, r8
   1ba80:	add	r4, ip, #2
   1ba84:	bne	1b96c <__assert_fail@plt+0xa848>
   1ba88:	ldr	r3, [sp, #8]
   1ba8c:	add	r3, r3, #1
   1ba90:	b	1baa8 <__assert_fail@plt+0xa984>
   1ba94:	add	r3, r3, #1
   1ba98:	cmp	r2, r4
   1ba9c:	sub	r4, r3, fp
   1baa0:	add	r4, r4, ip
   1baa4:	bne	1b96c <__assert_fail@plt+0xa848>
   1baa8:	ldrb	r2, [r3]
   1baac:	cmp	r2, #0
   1bab0:	beq	1ba48 <__assert_fail@plt+0xa924>
   1bab4:	ldrb	r4, [r1, #1]!
   1bab8:	cmp	r4, #0
   1babc:	bne	1ba94 <__assert_fail@plt+0xa970>
   1bac0:	mov	r0, #0
   1bac4:	b	1ba48 <__assert_fail@plt+0xa924>
   1bac8:	ldrb	r1, [fp]
   1bacc:	ldr	r8, [pc, #2516]	; 1c4a8 <__assert_fail@plt+0xb384>
   1bad0:	str	fp, [sp, #36]	; 0x24
   1bad4:	and	r0, r1, #31
   1bad8:	lsr	r3, r1, #5
   1badc:	ldr	r2, [r8, r3, lsl #2]
   1bae0:	mov	r3, #0
   1bae4:	str	r3, [sp, #28]
   1bae8:	lsr	r2, r2, r0
   1baec:	ands	r4, r2, #1
   1baf0:	strb	r3, [sp, #20]
   1baf4:	str	r3, [sp, #24]
   1baf8:	strb	r3, [sp, #32]
   1bafc:	beq	1b994 <__assert_fail@plt+0xa870>
   1bb00:	mov	r3, #1
   1bb04:	str	r1, [sp, #48]	; 0x30
   1bb08:	mov	r4, r1
   1bb0c:	str	r3, [sp, #40]	; 0x28
   1bb10:	strb	r3, [sp, #44]	; 0x2c
   1bb14:	strb	r3, [sp, #32]
   1bb18:	b	1ba3c <__assert_fail@plt+0xa918>
   1bb1c:	ldr	r0, [sp, #36]	; 0x24
   1bb20:	bl	11010 <strlen@plt>
   1bb24:	strb	r4, [sp, #44]	; 0x2c
   1bb28:	strb	r5, [sp, #32]
   1bb2c:	str	r0, [sp, #40]	; 0x28
   1bb30:	mov	r3, #0
   1bb34:	str	r3, [sp, #12]
   1bb38:	mov	r6, r3
   1bb3c:	mov	r7, r3
   1bb40:	str	fp, [sp, #92]	; 0x5c
   1bb44:	strb	r3, [sp, #76]	; 0x4c
   1bb48:	str	r3, [sp, #80]	; 0x50
   1bb4c:	strb	r3, [sp, #88]	; 0x58
   1bb50:	strb	r3, [sp, #132]	; 0x84
   1bb54:	str	r3, [sp, #136]	; 0x88
   1bb58:	strb	r3, [sp, #144]	; 0x90
   1bb5c:	str	r3, [sp, #84]	; 0x54
   1bb60:	str	r3, [sp, #140]	; 0x8c
   1bb64:	str	fp, [sp, #8]
   1bb68:	mov	fp, r3
   1bb6c:	ldrb	r3, [sp, #132]	; 0x84
   1bb70:	mov	r1, #1
   1bb74:	str	r1, [sp]
   1bb78:	mov	r4, r1
   1bb7c:	mov	r9, r1
   1bb80:	ldr	r1, [sp, #4]
   1bb84:	cmp	r3, #0
   1bb88:	mov	r5, r1
   1bb8c:	str	r1, [sp, #148]	; 0x94
   1bb90:	bne	1be70 <__assert_fail@plt+0xad4c>
   1bb94:	ldrb	r3, [r5]
   1bb98:	and	r2, r3, #31
   1bb9c:	lsr	r3, r3, #5
   1bba0:	ldr	r3, [r8, r3, lsl #2]
   1bba4:	lsr	r3, r3, r2
   1bba8:	tst	r3, #1
   1bbac:	beq	1c1a0 <__assert_fail@plt+0xb07c>
   1bbb0:	str	r9, [sp, #152]	; 0x98
   1bbb4:	ldrb	r5, [r5]
   1bbb8:	strb	r4, [sp, #156]	; 0x9c
   1bbbc:	strb	r4, [sp, #144]	; 0x90
   1bbc0:	str	r5, [sp, #160]	; 0xa0
   1bbc4:	cmp	r5, #0
   1bbc8:	beq	1bac0 <__assert_fail@plt+0xa99c>
   1bbcc:	ldr	r3, [sp]
   1bbd0:	cmp	fp, #9
   1bbd4:	movls	r3, #0
   1bbd8:	andhi	r3, r3, #1
   1bbdc:	cmp	r3, #0
   1bbe0:	addeq	r6, r6, #1
   1bbe4:	beq	1bbfc <__assert_fail@plt+0xaad8>
   1bbe8:	add	r2, fp, fp, lsl #2
   1bbec:	cmp	r6, r2
   1bbf0:	addcc	r6, r6, #1
   1bbf4:	strcc	r3, [sp]
   1bbf8:	bcs	1c028 <__assert_fail@plt+0xaf04>
   1bbfc:	ldrb	r3, [sp, #44]	; 0x2c
   1bc00:	cmp	r3, #0
   1bc04:	beq	1bfb8 <__assert_fail@plt+0xae94>
   1bc08:	ldr	r2, [sp, #160]	; 0xa0
   1bc0c:	ldr	r3, [sp, #48]	; 0x30
   1bc10:	cmp	r2, r3
   1bc14:	bne	1be4c <__assert_fail@plt+0xad28>
   1bc18:	add	lr, sp, #132	; 0x84
   1bc1c:	add	ip, sp, #188	; 0xbc
   1bc20:	ldm	lr!, {r0, r1, r2, r3}
   1bc24:	stmia	ip!, {r0, r1, r2, r3}
   1bc28:	ldm	lr!, {r0, r1, r2, r3}
   1bc2c:	strb	r7, [sp, #200]	; 0xc8
   1bc30:	stmia	ip!, {r0, r1, r2, r3}
   1bc34:	ldm	lr!, {r0, r1, r2, r3}
   1bc38:	ldr	r5, [sp, #204]	; 0xcc
   1bc3c:	stmia	ip!, {r0, r1, r2, r3}
   1bc40:	ldm	lr, {r0, r1}
   1bc44:	ldr	r3, [sp, #208]	; 0xd0
   1bc48:	add	r5, r5, r3
   1bc4c:	stm	ip, {r0, r1}
   1bc50:	str	r5, [sp, #204]	; 0xcc
   1bc54:	ldr	r3, [sp, #8]
   1bc58:	strb	r7, [sp, #244]	; 0xf4
   1bc5c:	str	r3, [sp, #260]	; 0x104
   1bc60:	ldrb	r3, [r3]
   1bc64:	str	r7, [sp, #248]	; 0xf8
   1bc68:	strb	r7, [sp, #256]	; 0x100
   1bc6c:	and	r2, r3, #31
   1bc70:	lsr	r1, r3, #5
   1bc74:	str	r7, [sp, #252]	; 0xfc
   1bc78:	ldr	sl, [r8, r1, lsl #2]
   1bc7c:	lsr	sl, sl, r2
   1bc80:	ands	sl, sl, #1
   1bc84:	beq	1c294 <__assert_fail@plt+0xb170>
   1bc88:	mov	r5, r3
   1bc8c:	cmp	r5, #0
   1bc90:	str	r9, [sp, #264]	; 0x108
   1bc94:	str	r3, [sp, #272]	; 0x110
   1bc98:	strb	r4, [sp, #268]	; 0x10c
   1bc9c:	strb	r4, [sp, #256]	; 0x100
   1bca0:	beq	1c310 <__assert_fail@plt+0xb1ec>
   1bca4:	ldr	r5, [sp, #260]	; 0x104
   1bca8:	ldr	r3, [sp, #264]	; 0x108
   1bcac:	add	r6, r6, #1
   1bcb0:	add	r5, r5, r3
   1bcb4:	strb	r7, [sp, #256]	; 0x100
   1bcb8:	str	r5, [sp, #260]	; 0x104
   1bcbc:	b	1bda4 <__assert_fail@plt+0xac80>
   1bcc0:	ldrb	r3, [r5]
   1bcc4:	and	r2, r3, #31
   1bcc8:	lsr	r3, r3, #5
   1bccc:	ldr	r3, [r8, r3, lsl #2]
   1bcd0:	lsr	r3, r3, r2
   1bcd4:	tst	r3, #1
   1bcd8:	beq	1bf9c <__assert_fail@plt+0xae78>
   1bcdc:	str	r9, [sp, #264]	; 0x108
   1bce0:	ldrb	r5, [r5]
   1bce4:	strb	r4, [sp, #268]	; 0x10c
   1bce8:	strb	r4, [sp, #256]	; 0x100
   1bcec:	cmp	r5, #0
   1bcf0:	str	r5, [sp, #272]	; 0x110
   1bcf4:	beq	1be20 <__assert_fail@plt+0xacfc>
   1bcf8:	ldrb	r3, [sp, #200]	; 0xc8
   1bcfc:	cmp	r3, #0
   1bd00:	bne	1bf64 <__assert_fail@plt+0xae40>
   1bd04:	ldrb	r3, [sp, #188]	; 0xbc
   1bd08:	ldr	r5, [sp, #204]	; 0xcc
   1bd0c:	cmp	r3, #0
   1bd10:	addne	sl, sp, #192	; 0xc0
   1bd14:	bne	1bef8 <__assert_fail@plt+0xadd4>
   1bd18:	ldrb	r3, [r5]
   1bd1c:	and	r2, r3, #31
   1bd20:	lsr	r3, r3, #5
   1bd24:	ldr	r3, [r8, r3, lsl #2]
   1bd28:	lsr	r3, r3, r2
   1bd2c:	tst	r3, #1
   1bd30:	beq	1bee0 <__assert_fail@plt+0xadbc>
   1bd34:	str	r9, [sp, #208]	; 0xd0
   1bd38:	ldrb	r0, [r5]
   1bd3c:	strb	r4, [sp, #212]	; 0xd4
   1bd40:	strb	r4, [sp, #200]	; 0xc8
   1bd44:	mov	r5, r0
   1bd48:	str	r0, [sp, #216]	; 0xd8
   1bd4c:	cmp	r5, #0
   1bd50:	beq	1bac0 <__assert_fail@plt+0xa99c>
   1bd54:	ldrb	r3, [sp, #268]	; 0x10c
   1bd58:	cmp	r3, #0
   1bd5c:	beq	1be3c <__assert_fail@plt+0xad18>
   1bd60:	ldr	r0, [sp, #272]	; 0x110
   1bd64:	subs	r0, r0, r5
   1bd68:	movne	r0, #1
   1bd6c:	cmp	r0, #0
   1bd70:	add	r1, r6, #1
   1bd74:	bne	1be4c <__assert_fail@plt+0xad28>
   1bd78:	ldr	r3, [sp, #204]	; 0xcc
   1bd7c:	ldr	r2, [sp, #208]	; 0xd0
   1bd80:	ldr	r5, [sp, #260]	; 0x104
   1bd84:	add	r3, r3, r2
   1bd88:	ldr	r2, [sp, #264]	; 0x108
   1bd8c:	mov	r6, r1
   1bd90:	add	r5, r5, r2
   1bd94:	strb	r0, [sp, #200]	; 0xc8
   1bd98:	strb	r0, [sp, #256]	; 0x100
   1bd9c:	str	r3, [sp, #204]	; 0xcc
   1bda0:	str	r5, [sp, #260]	; 0x104
   1bda4:	ldrb	r3, [sp, #244]	; 0xf4
   1bda8:	cmp	r3, #0
   1bdac:	beq	1bcc0 <__assert_fail@plt+0xab9c>
   1bdb0:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1bdb4:	mov	r1, r0
   1bdb8:	mov	r0, r5
   1bdbc:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1bdc0:	add	r3, sp, #248	; 0xf8
   1bdc4:	mov	r1, r5
   1bdc8:	mov	r2, r0
   1bdcc:	add	r0, sp, #272	; 0x110
   1bdd0:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1bdd4:	cmn	r0, #1
   1bdd8:	str	r0, [sp, #264]	; 0x108
   1bddc:	strbeq	r7, [sp, #268]	; 0x10c
   1bde0:	streq	r9, [sp, #264]	; 0x108
   1bde4:	strbeq	r4, [sp, #256]	; 0x100
   1bde8:	beq	1bcf8 <__assert_fail@plt+0xabd4>
   1bdec:	cmn	r0, #2
   1bdf0:	beq	1c11c <__assert_fail@plt+0xaff8>
   1bdf4:	cmp	r0, #0
   1bdf8:	beq	1c134 <__assert_fail@plt+0xb010>
   1bdfc:	ldr	r5, [sp, #272]	; 0x110
   1be00:	add	r0, sp, #248	; 0xf8
   1be04:	strb	r4, [sp, #268]	; 0x10c
   1be08:	bl	10ef0 <mbsinit@plt>
   1be0c:	strb	r4, [sp, #256]	; 0x100
   1be10:	cmp	r0, #0
   1be14:	strbne	r7, [sp, #244]	; 0xf4
   1be18:	cmp	r5, #0
   1be1c:	bne	1bcf8 <__assert_fail@plt+0xabd4>
   1be20:	ldr	r0, [sp, #148]	; 0x94
   1be24:	b	1ba48 <__assert_fail@plt+0xa924>
   1be28:	ldr	r0, [sp, #204]	; 0xcc
   1be2c:	bl	11010 <strlen@plt>
   1be30:	strb	r7, [sp, #212]	; 0xd4
   1be34:	strb	r4, [sp, #200]	; 0xc8
   1be38:	str	r0, [sp, #208]	; 0xd0
   1be3c:	ldr	r2, [sp, #208]	; 0xd0
   1be40:	ldr	r3, [sp, #264]	; 0x108
   1be44:	cmp	r2, r3
   1be48:	beq	1bf84 <__assert_fail@plt+0xae60>
   1be4c:	ldr	r5, [sp, #148]	; 0x94
   1be50:	ldr	sl, [sp, #152]	; 0x98
   1be54:	ldrb	r3, [sp, #132]	; 0x84
   1be58:	add	r5, r5, sl
   1be5c:	str	r5, [sp, #148]	; 0x94
   1be60:	cmp	r3, #0
   1be64:	strb	r7, [sp, #144]	; 0x90
   1be68:	add	fp, fp, #1
   1be6c:	beq	1bb94 <__assert_fail@plt+0xaa70>
   1be70:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1be74:	mov	r1, r0
   1be78:	mov	r0, r5
   1be7c:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1be80:	add	r3, sp, #136	; 0x88
   1be84:	mov	r1, r5
   1be88:	mov	r2, r0
   1be8c:	add	r0, sp, #160	; 0xa0
   1be90:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1be94:	cmn	r0, #1
   1be98:	str	r0, [sp, #152]	; 0x98
   1be9c:	strbeq	r7, [sp, #156]	; 0x9c
   1bea0:	streq	r9, [sp, #152]	; 0x98
   1bea4:	strbeq	r4, [sp, #144]	; 0x90
   1bea8:	beq	1bffc <__assert_fail@plt+0xaed8>
   1beac:	cmn	r0, #2
   1beb0:	beq	1bfe8 <__assert_fail@plt+0xaec4>
   1beb4:	cmp	r0, #0
   1beb8:	bne	1c200 <__assert_fail@plt+0xb0dc>
   1bebc:	ldr	r5, [sp, #148]	; 0x94
   1bec0:	str	r9, [sp, #152]	; 0x98
   1bec4:	ldrb	r3, [r5]
   1bec8:	cmp	r3, #0
   1becc:	bne	1c48c <__assert_fail@plt+0xb368>
   1bed0:	ldr	r5, [sp, #160]	; 0xa0
   1bed4:	cmp	r5, #0
   1bed8:	beq	1c204 <__assert_fail@plt+0xb0e0>
   1bedc:	b	1c458 <__assert_fail@plt+0xb334>
   1bee0:	add	sl, sp, #192	; 0xc0
   1bee4:	mov	r0, sl
   1bee8:	bl	10ef0 <mbsinit@plt>
   1beec:	cmp	r0, #0
   1bef0:	beq	1c478 <__assert_fail@plt+0xb354>
   1bef4:	strb	r4, [sp, #188]	; 0xbc
   1bef8:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1befc:	mov	r1, r0
   1bf00:	mov	r0, r5
   1bf04:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1bf08:	mov	r3, sl
   1bf0c:	mov	r1, r5
   1bf10:	mov	r2, r0
   1bf14:	add	r0, sp, #216	; 0xd8
   1bf18:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1bf1c:	cmn	r0, #1
   1bf20:	str	r0, [sp, #208]	; 0xd0
   1bf24:	strbeq	r7, [sp, #212]	; 0xd4
   1bf28:	streq	r9, [sp, #208]	; 0xd0
   1bf2c:	strbeq	r4, [sp, #200]	; 0xc8
   1bf30:	beq	1be3c <__assert_fail@plt+0xad18>
   1bf34:	cmn	r0, #2
   1bf38:	beq	1be28 <__assert_fail@plt+0xad04>
   1bf3c:	cmp	r0, #0
   1bf40:	beq	1c158 <__assert_fail@plt+0xb034>
   1bf44:	ldr	r5, [sp, #216]	; 0xd8
   1bf48:	mov	r0, sl
   1bf4c:	strb	r4, [sp, #212]	; 0xd4
   1bf50:	bl	10ef0 <mbsinit@plt>
   1bf54:	strb	r4, [sp, #200]	; 0xc8
   1bf58:	cmp	r0, #0
   1bf5c:	strbne	r7, [sp, #188]	; 0xbc
   1bf60:	b	1bd4c <__assert_fail@plt+0xac28>
   1bf64:	ldrb	r3, [sp, #212]	; 0xd4
   1bf68:	cmp	r3, #0
   1bf6c:	ldrne	r5, [sp, #216]	; 0xd8
   1bf70:	bne	1bd4c <__assert_fail@plt+0xac28>
   1bf74:	ldr	r2, [sp, #208]	; 0xd0
   1bf78:	ldr	r3, [sp, #264]	; 0x108
   1bf7c:	cmp	r2, r3
   1bf80:	bne	1be4c <__assert_fail@plt+0xad28>
   1bf84:	ldr	r1, [sp, #260]	; 0x104
   1bf88:	ldr	r0, [sp, #204]	; 0xcc
   1bf8c:	bl	10efc <memcmp@plt>
   1bf90:	adds	r0, r0, #0
   1bf94:	movne	r0, #1
   1bf98:	b	1bd6c <__assert_fail@plt+0xac48>
   1bf9c:	add	r0, sp, #248	; 0xf8
   1bfa0:	bl	10ef0 <mbsinit@plt>
   1bfa4:	cmp	r0, #0
   1bfa8:	beq	1c478 <__assert_fail@plt+0xb354>
   1bfac:	strb	r4, [sp, #244]	; 0xf4
   1bfb0:	b	1bdb0 <__assert_fail@plt+0xac8c>
   1bfb4:	add	r6, r6, #1
   1bfb8:	ldr	sl, [sp, #152]	; 0x98
   1bfbc:	ldr	r3, [sp, #40]	; 0x28
   1bfc0:	ldr	r5, [sp, #148]	; 0x94
   1bfc4:	cmp	sl, r3
   1bfc8:	bne	1be54 <__assert_fail@plt+0xad30>
   1bfcc:	mov	r2, sl
   1bfd0:	mov	r0, r5
   1bfd4:	ldr	r1, [sp, #36]	; 0x24
   1bfd8:	bl	10efc <memcmp@plt>
   1bfdc:	cmp	r0, #0
   1bfe0:	bne	1be54 <__assert_fail@plt+0xad30>
   1bfe4:	b	1bc18 <__assert_fail@plt+0xaaf4>
   1bfe8:	ldr	r0, [sp, #148]	; 0x94
   1bfec:	bl	11010 <strlen@plt>
   1bff0:	strb	r7, [sp, #156]	; 0x9c
   1bff4:	strb	r4, [sp, #144]	; 0x90
   1bff8:	str	r0, [sp, #152]	; 0x98
   1bffc:	ldr	r3, [sp]
   1c000:	cmp	fp, #9
   1c004:	movls	r3, #0
   1c008:	andhi	r3, r3, #1
   1c00c:	cmp	r3, #0
   1c010:	beq	1bfb4 <__assert_fail@plt+0xae90>
   1c014:	add	r2, fp, fp, lsl #2
   1c018:	cmp	r6, r2
   1c01c:	addcc	r6, r6, #1
   1c020:	strcc	r3, [sp]
   1c024:	bcc	1bfb8 <__assert_fail@plt+0xae94>
   1c028:	ldr	r3, [sp, #12]
   1c02c:	subs	sl, r6, r3
   1c030:	ldrb	r3, [sp, #88]	; 0x58
   1c034:	beq	1c45c <__assert_fail@plt+0xb338>
   1c038:	cmp	r3, #0
   1c03c:	ldreq	r5, [sp, #92]	; 0x5c
   1c040:	beq	1c0b0 <__assert_fail@plt+0xaf8c>
   1c044:	ldrb	r3, [sp, #100]	; 0x64
   1c048:	cmp	r3, #0
   1c04c:	ldrne	r5, [sp, #104]	; 0x68
   1c050:	beq	1c090 <__assert_fail@plt+0xaf6c>
   1c054:	b	1c088 <__assert_fail@plt+0xaf64>
   1c058:	ldrb	r3, [r5]
   1c05c:	and	r2, r3, #31
   1c060:	lsr	r3, r3, #5
   1c064:	ldr	r3, [r8, r3, lsl #2]
   1c068:	lsr	r3, r3, r2
   1c06c:	tst	r3, #1
   1c070:	beq	1c17c <__assert_fail@plt+0xb058>
   1c074:	str	r9, [sp, #96]	; 0x60
   1c078:	ldrb	r5, [r5]
   1c07c:	strb	r4, [sp, #100]	; 0x64
   1c080:	strb	r4, [sp, #88]	; 0x58
   1c084:	str	r5, [sp, #104]	; 0x68
   1c088:	cmp	r5, #0
   1c08c:	beq	1c3a8 <__assert_fail@plt+0xb284>
   1c090:	ldr	r5, [sp, #92]	; 0x5c
   1c094:	ldr	r3, [sp, #96]	; 0x60
   1c098:	subs	sl, sl, #1
   1c09c:	add	r5, r5, r3
   1c0a0:	strb	r7, [sp, #88]	; 0x58
   1c0a4:	str	r5, [sp, #92]	; 0x5c
   1c0a8:	str	r5, [sp]
   1c0ac:	beq	1c228 <__assert_fail@plt+0xb104>
   1c0b0:	ldrb	r3, [sp, #76]	; 0x4c
   1c0b4:	cmp	r3, #0
   1c0b8:	beq	1c058 <__assert_fail@plt+0xaf34>
   1c0bc:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1c0c0:	mov	r1, r0
   1c0c4:	mov	r0, r5
   1c0c8:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1c0cc:	add	r3, sp, #80	; 0x50
   1c0d0:	mov	r1, r5
   1c0d4:	mov	r2, r0
   1c0d8:	add	r0, sp, #104	; 0x68
   1c0dc:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1c0e0:	cmn	r0, #1
   1c0e4:	str	r0, [sp, #96]	; 0x60
   1c0e8:	beq	1c194 <__assert_fail@plt+0xb070>
   1c0ec:	cmn	r0, #2
   1c0f0:	beq	1c1b8 <__assert_fail@plt+0xb094>
   1c0f4:	cmp	r0, #0
   1c0f8:	beq	1c1d0 <__assert_fail@plt+0xb0ac>
   1c0fc:	ldr	r5, [sp, #104]	; 0x68
   1c100:	add	r0, sp, #80	; 0x50
   1c104:	strb	r4, [sp, #100]	; 0x64
   1c108:	bl	10ef0 <mbsinit@plt>
   1c10c:	strb	r4, [sp, #88]	; 0x58
   1c110:	cmp	r0, #0
   1c114:	strbne	r7, [sp, #76]	; 0x4c
   1c118:	b	1c088 <__assert_fail@plt+0xaf64>
   1c11c:	ldr	r0, [sp, #260]	; 0x104
   1c120:	bl	11010 <strlen@plt>
   1c124:	strb	r7, [sp, #268]	; 0x10c
   1c128:	strb	r4, [sp, #256]	; 0x100
   1c12c:	str	r0, [sp, #264]	; 0x108
   1c130:	b	1bcf8 <__assert_fail@plt+0xabd4>
   1c134:	ldr	r3, [sp, #260]	; 0x104
   1c138:	str	r9, [sp, #264]	; 0x108
   1c13c:	ldrb	r3, [r3]
   1c140:	cmp	r3, #0
   1c144:	bne	1c48c <__assert_fail@plt+0xb368>
   1c148:	ldr	r5, [sp, #272]	; 0x110
   1c14c:	cmp	r5, #0
   1c150:	beq	1be00 <__assert_fail@plt+0xacdc>
   1c154:	b	1c458 <__assert_fail@plt+0xb334>
   1c158:	ldr	r3, [sp, #204]	; 0xcc
   1c15c:	str	r9, [sp, #208]	; 0xd0
   1c160:	ldrb	r3, [r3]
   1c164:	cmp	r3, #0
   1c168:	bne	1c48c <__assert_fail@plt+0xb368>
   1c16c:	ldr	r5, [sp, #216]	; 0xd8
   1c170:	cmp	r5, #0
   1c174:	beq	1bf48 <__assert_fail@plt+0xae24>
   1c178:	b	1c458 <__assert_fail@plt+0xb334>
   1c17c:	add	r0, sp, #80	; 0x50
   1c180:	bl	10ef0 <mbsinit@plt>
   1c184:	cmp	r0, #0
   1c188:	beq	1c478 <__assert_fail@plt+0xb354>
   1c18c:	strb	r4, [sp, #76]	; 0x4c
   1c190:	b	1c0bc <__assert_fail@plt+0xaf98>
   1c194:	str	r9, [sp, #96]	; 0x60
   1c198:	strb	r7, [sp, #100]	; 0x64
   1c19c:	b	1c090 <__assert_fail@plt+0xaf6c>
   1c1a0:	add	r0, sp, #136	; 0x88
   1c1a4:	bl	10ef0 <mbsinit@plt>
   1c1a8:	cmp	r0, #0
   1c1ac:	beq	1c478 <__assert_fail@plt+0xb354>
   1c1b0:	strb	r4, [sp, #132]	; 0x84
   1c1b4:	b	1be70 <__assert_fail@plt+0xad4c>
   1c1b8:	ldr	r5, [sp, #92]	; 0x5c
   1c1bc:	mov	r0, r5
   1c1c0:	bl	11010 <strlen@plt>
   1c1c4:	strb	r7, [sp, #100]	; 0x64
   1c1c8:	str	r0, [sp, #96]	; 0x60
   1c1cc:	b	1c094 <__assert_fail@plt+0xaf70>
   1c1d0:	ldr	r5, [sp, #92]	; 0x5c
   1c1d4:	str	r9, [sp, #96]	; 0x60
   1c1d8:	ldrb	r3, [r5]
   1c1dc:	cmp	r3, #0
   1c1e0:	bne	1c48c <__assert_fail@plt+0xb368>
   1c1e4:	ldr	r5, [sp, #104]	; 0x68
   1c1e8:	cmp	r5, #0
   1c1ec:	beq	1c100 <__assert_fail@plt+0xafdc>
   1c1f0:	b	1c458 <__assert_fail@plt+0xb334>
   1c1f4:	mov	lr, r3
   1c1f8:	str	r4, [sp]
   1c1fc:	b	1b940 <__assert_fail@plt+0xa81c>
   1c200:	ldr	r5, [sp, #160]	; 0xa0
   1c204:	add	r0, sp, #136	; 0x88
   1c208:	strb	r4, [sp, #156]	; 0x9c
   1c20c:	bl	10ef0 <mbsinit@plt>
   1c210:	strb	r4, [sp, #144]	; 0x90
   1c214:	cmp	r0, #0
   1c218:	strbne	r7, [sp, #132]	; 0x84
   1c21c:	b	1bbc4 <__assert_fail@plt+0xaaa0>
   1c220:	ldr	r3, [sp, #92]	; 0x5c
   1c224:	str	r3, [sp]
   1c228:	ldrb	r3, [sp, #76]	; 0x4c
   1c22c:	cmp	r3, #0
   1c230:	bne	1c328 <__assert_fail@plt+0xb204>
   1c234:	ldr	r1, [sp]
   1c238:	ldrb	r3, [r1]
   1c23c:	and	r2, r3, #31
   1c240:	lsr	r3, r3, #5
   1c244:	ldr	r3, [r8, r3, lsl #2]
   1c248:	lsr	r3, r3, r2
   1c24c:	tst	r3, #1
   1c250:	beq	1c314 <__assert_fail@plt+0xb1f0>
   1c254:	str	r9, [sp, #96]	; 0x60
   1c258:	ldrb	r5, [r1]
   1c25c:	strb	r4, [sp, #100]	; 0x64
   1c260:	strb	r4, [sp, #88]	; 0x58
   1c264:	str	r5, [sp, #104]	; 0x68
   1c268:	cmp	r5, #0
   1c26c:	beq	1c3b4 <__assert_fail@plt+0xb290>
   1c270:	ldrb	r3, [sp, #156]	; 0x9c
   1c274:	mov	r2, #1
   1c278:	str	r2, [sp]
   1c27c:	cmp	r3, #0
   1c280:	add	r3, r6, #1
   1c284:	str	r6, [sp, #12]
   1c288:	mov	r6, r3
   1c28c:	bne	1bbfc <__assert_fail@plt+0xaad8>
   1c290:	b	1bfb8 <__assert_fail@plt+0xae94>
   1c294:	add	r0, sp, #248	; 0xf8
   1c298:	bl	10ef0 <mbsinit@plt>
   1c29c:	cmp	r0, #0
   1c2a0:	beq	1c478 <__assert_fail@plt+0xb354>
   1c2a4:	strb	r4, [sp, #244]	; 0xf4
   1c2a8:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1c2ac:	ldr	r5, [sp, #8]
   1c2b0:	mov	r1, r0
   1c2b4:	mov	r0, r5
   1c2b8:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1c2bc:	add	r3, sp, #248	; 0xf8
   1c2c0:	mov	r1, r5
   1c2c4:	mov	r2, r0
   1c2c8:	add	r0, sp, #272	; 0x110
   1c2cc:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1c2d0:	cmn	r0, #1
   1c2d4:	str	r0, [sp, #264]	; 0x108
   1c2d8:	beq	1c398 <__assert_fail@plt+0xb274>
   1c2dc:	cmn	r0, #2
   1c2e0:	beq	1c3d4 <__assert_fail@plt+0xb2b0>
   1c2e4:	cmp	r0, #0
   1c2e8:	beq	1c3ec <__assert_fail@plt+0xb2c8>
   1c2ec:	ldr	r5, [sp, #272]	; 0x110
   1c2f0:	add	r0, sp, #248	; 0xf8
   1c2f4:	strb	r4, [sp, #268]	; 0x10c
   1c2f8:	bl	10ef0 <mbsinit@plt>
   1c2fc:	strb	r4, [sp, #256]	; 0x100
   1c300:	cmp	r0, #0
   1c304:	strbne	r7, [sp, #244]	; 0xf4
   1c308:	cmp	r5, #0
   1c30c:	bne	1bca4 <__assert_fail@plt+0xab80>
   1c310:	bl	11118 <abort@plt>
   1c314:	add	r0, sp, #80	; 0x50
   1c318:	bl	10ef0 <mbsinit@plt>
   1c31c:	cmp	r0, #0
   1c320:	beq	1c478 <__assert_fail@plt+0xb354>
   1c324:	strb	r4, [sp, #76]	; 0x4c
   1c328:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1c32c:	ldr	r5, [sp]
   1c330:	mov	r1, r0
   1c334:	mov	r0, r5
   1c338:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1c33c:	add	r3, sp, #80	; 0x50
   1c340:	mov	r1, r5
   1c344:	mov	r2, r0
   1c348:	add	r0, sp, #104	; 0x68
   1c34c:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1c350:	cmn	r0, #1
   1c354:	str	r0, [sp, #96]	; 0x60
   1c358:	strbeq	r7, [sp, #100]	; 0x64
   1c35c:	streq	r9, [sp, #96]	; 0x60
   1c360:	strbeq	r4, [sp, #88]	; 0x58
   1c364:	beq	1c270 <__assert_fail@plt+0xb14c>
   1c368:	cmn	r0, #2
   1c36c:	beq	1c418 <__assert_fail@plt+0xb2f4>
   1c370:	cmp	r0, #0
   1c374:	beq	1c438 <__assert_fail@plt+0xb314>
   1c378:	ldr	r5, [sp, #104]	; 0x68
   1c37c:	add	r0, sp, #80	; 0x50
   1c380:	strb	r4, [sp, #100]	; 0x64
   1c384:	bl	10ef0 <mbsinit@plt>
   1c388:	strb	r4, [sp, #88]	; 0x58
   1c38c:	cmp	r0, #0
   1c390:	strbne	r7, [sp, #76]	; 0x4c
   1c394:	b	1c268 <__assert_fail@plt+0xb144>
   1c398:	str	r9, [sp, #264]	; 0x108
   1c39c:	strb	sl, [sp, #268]	; 0x10c
   1c3a0:	ldr	r5, [sp, #260]	; 0x104
   1c3a4:	b	1bca8 <__assert_fail@plt+0xab84>
   1c3a8:	ldrb	r3, [sp, #88]	; 0x58
   1c3ac:	cmp	r3, #0
   1c3b0:	beq	1c220 <__assert_fail@plt+0xb0fc>
   1c3b4:	add	r2, sp, #16
   1c3b8:	ldrd	r0, [sp, #4]
   1c3bc:	bl	1b008 <__assert_fail@plt+0x9ee4>
   1c3c0:	subs	r3, r0, #0
   1c3c4:	str	r3, [sp]
   1c3c8:	bne	1c430 <__assert_fail@plt+0xb30c>
   1c3cc:	ldrb	r3, [sp, #156]	; 0x9c
   1c3d0:	b	1c27c <__assert_fail@plt+0xb158>
   1c3d4:	ldr	r5, [sp, #260]	; 0x104
   1c3d8:	mov	r0, r5
   1c3dc:	bl	11010 <strlen@plt>
   1c3e0:	strb	sl, [sp, #268]	; 0x10c
   1c3e4:	str	r0, [sp, #264]	; 0x108
   1c3e8:	b	1bca8 <__assert_fail@plt+0xab84>
   1c3ec:	ldr	r5, [sp, #260]	; 0x104
   1c3f0:	str	r9, [sp, #264]	; 0x108
   1c3f4:	ldrb	r3, [r5]
   1c3f8:	cmp	r3, #0
   1c3fc:	bne	1c48c <__assert_fail@plt+0xb368>
   1c400:	ldr	r5, [sp, #272]	; 0x110
   1c404:	cmp	r5, #0
   1c408:	beq	1c2f0 <__assert_fail@plt+0xb1cc>
   1c40c:	b	1c458 <__assert_fail@plt+0xb334>
   1c410:	ldr	r4, [sp, #48]	; 0x30
   1c414:	b	1ba18 <__assert_fail@plt+0xa8f4>
   1c418:	ldr	r0, [sp, #92]	; 0x5c
   1c41c:	bl	11010 <strlen@plt>
   1c420:	strb	r7, [sp, #100]	; 0x64
   1c424:	strb	r4, [sp, #88]	; 0x58
   1c428:	str	r0, [sp, #96]	; 0x60
   1c42c:	b	1c270 <__assert_fail@plt+0xb14c>
   1c430:	ldr	r0, [sp, #16]
   1c434:	b	1ba48 <__assert_fail@plt+0xa924>
   1c438:	ldr	r5, [sp, #92]	; 0x5c
   1c43c:	str	r9, [sp, #96]	; 0x60
   1c440:	ldrb	r3, [r5]
   1c444:	cmp	r3, #0
   1c448:	bne	1c48c <__assert_fail@plt+0xb368>
   1c44c:	ldr	r5, [sp, #104]	; 0x68
   1c450:	cmp	r5, #0
   1c454:	beq	1c37c <__assert_fail@plt+0xb258>
   1c458:	bl	1afe4 <__assert_fail@plt+0x9ec0>
   1c45c:	cmp	r3, #0
   1c460:	beq	1c220 <__assert_fail@plt+0xb0fc>
   1c464:	ldrb	r3, [sp, #100]	; 0x64
   1c468:	cmp	r3, #0
   1c46c:	ldrne	r5, [sp, #104]	; 0x68
   1c470:	beq	1c270 <__assert_fail@plt+0xb14c>
   1c474:	b	1c268 <__assert_fail@plt+0xb144>
   1c478:	ldr	r3, [pc, #44]	; 1c4ac <__assert_fail@plt+0xb388>
   1c47c:	mov	r2, #150	; 0x96
   1c480:	ldr	r1, [pc, #40]	; 1c4b0 <__assert_fail@plt+0xb38c>
   1c484:	ldr	r0, [pc, #40]	; 1c4b4 <__assert_fail@plt+0xb390>
   1c488:	bl	11124 <__assert_fail@plt>
   1c48c:	ldr	r3, [pc, #24]	; 1c4ac <__assert_fail@plt+0xb388>
   1c490:	mov	r2, #178	; 0xb2
   1c494:	ldr	r1, [pc, #20]	; 1c4b0 <__assert_fail@plt+0xb38c>
   1c498:	ldr	r0, [pc, #24]	; 1c4b8 <__assert_fail@plt+0xb394>
   1c49c:	bl	11124 <__assert_fail@plt>
   1c4a0:	bl	10f20 <__stack_chk_fail@plt>
   1c4a4:	andeq	r0, r3, r8, lsl #30
   1c4a8:	andeq	r0, r2, r8, ror ip
   1c4ac:	muleq	r2, r8, ip
   1c4b0:	andeq	r0, r2, ip, asr #15
   1c4b4:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1c4b8:	andeq	r0, r2, r8, lsl #16
   1c4bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4c0:	mov	r6, r2
   1c4c4:	sub	sp, sp, #4096	; 0x1000
   1c4c8:	ldr	r2, [pc, #640]	; 1c750 <__assert_fail@plt+0xb62c>
   1c4cc:	sub	sp, sp, #44	; 0x2c
   1c4d0:	add	lr, sp, #4096	; 0x1000
   1c4d4:	ldr	ip, [r2]
   1c4d8:	add	lr, lr, #36	; 0x24
   1c4dc:	mov	r4, #0
   1c4e0:	str	r4, [sp]
   1c4e4:	str	ip, [lr]
   1c4e8:	add	ip, sp, #4160	; 0x1040
   1c4ec:	add	ip, ip, #16
   1c4f0:	mov	r9, r1
   1c4f4:	ldr	ip, [ip]
   1c4f8:	mov	fp, r0
   1c4fc:	str	r3, [sp, #8]
   1c500:	mov	r0, r6
   1c504:	mov	r3, r4
   1c508:	mov	r2, r4
   1c50c:	mov	r1, r4
   1c510:	str	ip, [sp, #12]
   1c514:	bl	10e90 <iconv@plt>
   1c518:	cmp	r9, r4
   1c51c:	str	fp, [sp, #20]
   1c520:	str	r9, [sp, #24]
   1c524:	beq	1c734 <__assert_fail@plt+0xb610>
   1c528:	add	r5, sp, #36	; 0x24
   1c52c:	add	r7, sp, #28
   1c530:	add	r8, sp, #32
   1c534:	mov	sl, #4096	; 0x1000
   1c538:	b	1c550 <__assert_fail@plt+0xb42c>
   1c53c:	ldrd	r2, [sp, #24]
   1c540:	sub	r3, r3, r5
   1c544:	cmp	r2, #0
   1c548:	add	r4, r4, r3
   1c54c:	beq	1c590 <__assert_fail@plt+0xb46c>
   1c550:	str	r8, [sp]
   1c554:	mov	r3, r7
   1c558:	add	r2, sp, #24
   1c55c:	add	r1, sp, #20
   1c560:	mov	r0, r6
   1c564:	str	r5, [sp, #28]
   1c568:	str	sl, [sp, #32]
   1c56c:	bl	10e90 <iconv@plt>
   1c570:	cmn	r0, #1
   1c574:	bne	1c53c <__assert_fail@plt+0xb418>
   1c578:	bl	11028 <__errno_location@plt>
   1c57c:	ldr	r3, [r0]
   1c580:	cmp	r3, #7
   1c584:	beq	1c53c <__assert_fail@plt+0xb418>
   1c588:	cmp	r3, #22
   1c58c:	bne	1c72c <__assert_fail@plt+0xb608>
   1c590:	mov	r2, #0
   1c594:	mov	ip, #4096	; 0x1000
   1c598:	str	r8, [sp]
   1c59c:	mov	r1, r2
   1c5a0:	mov	r3, r7
   1c5a4:	mov	r0, r6
   1c5a8:	str	r5, [sp, #28]
   1c5ac:	str	ip, [sp, #32]
   1c5b0:	bl	10e90 <iconv@plt>
   1c5b4:	cmn	r0, #1
   1c5b8:	beq	1c72c <__assert_fail@plt+0xb608>
   1c5bc:	ldr	r3, [sp, #28]
   1c5c0:	sub	r5, r3, r5
   1c5c4:	adds	r4, r5, r4
   1c5c8:	beq	1c6dc <__assert_fail@plt+0xb5b8>
   1c5cc:	ldr	r3, [sp, #8]
   1c5d0:	ldr	sl, [r3]
   1c5d4:	cmp	sl, #0
   1c5d8:	beq	1c6b8 <__assert_fail@plt+0xb594>
   1c5dc:	ldr	r3, [sp, #12]
   1c5e0:	ldr	r3, [r3]
   1c5e4:	cmp	r3, r4
   1c5e8:	bcc	1c6b8 <__assert_fail@plt+0xb594>
   1c5ec:	mov	r3, #0
   1c5f0:	str	r3, [sp]
   1c5f4:	mov	r2, r3
   1c5f8:	mov	r1, r3
   1c5fc:	mov	r0, r6
   1c600:	bl	10e90 <iconv@plt>
   1c604:	add	r3, sp, #40	; 0x28
   1c608:	str	fp, [sp, #20]
   1c60c:	add	r5, sp, #24
   1c610:	str	r9, [sp, #24]
   1c614:	str	sl, [sp, #28]
   1c618:	str	r4, [sp, #32]
   1c61c:	sub	fp, r3, #20
   1c620:	b	1c648 <__assert_fail@plt+0xb524>
   1c624:	str	r8, [sp]
   1c628:	mov	r3, r7
   1c62c:	mov	r2, r5
   1c630:	mov	r1, fp
   1c634:	mov	r0, r6
   1c638:	bl	10e90 <iconv@plt>
   1c63c:	cmn	r0, #1
   1c640:	beq	1c6ec <__assert_fail@plt+0xb5c8>
   1c644:	ldr	r9, [sp, #24]
   1c648:	cmp	r9, #0
   1c64c:	bne	1c624 <__assert_fail@plt+0xb500>
   1c650:	mov	r2, #0
   1c654:	str	r8, [sp]
   1c658:	mov	r3, r7
   1c65c:	mov	r0, r6
   1c660:	mov	r1, r2
   1c664:	bl	10e90 <iconv@plt>
   1c668:	cmn	r0, #1
   1c66c:	beq	1c6fc <__assert_fail@plt+0xb5d8>
   1c670:	ldr	r3, [sp, #32]
   1c674:	cmp	r3, #0
   1c678:	bne	1c74c <__assert_fail@plt+0xb628>
   1c67c:	ldr	r2, [sp, #8]
   1c680:	str	sl, [r2]
   1c684:	ldr	r2, [sp, #12]
   1c688:	str	r4, [r2]
   1c68c:	add	r2, sp, #4096	; 0x1000
   1c690:	add	r2, r2, #36	; 0x24
   1c694:	ldr	r1, [r2]
   1c698:	ldr	r2, [pc, #176]	; 1c750 <__assert_fail@plt+0xb62c>
   1c69c:	mov	r0, r3
   1c6a0:	ldr	r2, [r2]
   1c6a4:	cmp	r1, r2
   1c6a8:	bne	1c748 <__assert_fail@plt+0xb624>
   1c6ac:	add	sp, sp, #4096	; 0x1000
   1c6b0:	add	sp, sp, #44	; 0x2c
   1c6b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6b8:	mov	r0, r4
   1c6bc:	bl	10fa4 <malloc@plt>
   1c6c0:	subs	sl, r0, #0
   1c6c4:	bne	1c5ec <__assert_fail@plt+0xb4c8>
   1c6c8:	bl	11028 <__errno_location@plt>
   1c6cc:	mov	r2, #12
   1c6d0:	mvn	r3, #0
   1c6d4:	str	r2, [r0]
   1c6d8:	b	1c68c <__assert_fail@plt+0xb568>
   1c6dc:	ldr	r3, [sp, #12]
   1c6e0:	str	r4, [r3]
   1c6e4:	mov	r3, r4
   1c6e8:	b	1c68c <__assert_fail@plt+0xb568>
   1c6ec:	bl	11028 <__errno_location@plt>
   1c6f0:	ldr	r3, [r0]
   1c6f4:	cmp	r3, #22
   1c6f8:	beq	1c650 <__assert_fail@plt+0xb52c>
   1c6fc:	ldr	r3, [sp, #8]
   1c700:	ldr	r3, [r3]
   1c704:	cmp	r3, sl
   1c708:	beq	1c72c <__assert_fail@plt+0xb608>
   1c70c:	bl	11028 <__errno_location@plt>
   1c710:	mov	r4, r0
   1c714:	mov	r0, sl
   1c718:	ldr	r5, [r4]
   1c71c:	bl	10ecc <free@plt>
   1c720:	str	r5, [r4]
   1c724:	mvn	r3, #0
   1c728:	b	1c68c <__assert_fail@plt+0xb568>
   1c72c:	mvn	r3, #0
   1c730:	b	1c68c <__assert_fail@plt+0xb568>
   1c734:	mov	r4, r9
   1c738:	add	r5, sp, #36	; 0x24
   1c73c:	add	r7, sp, #28
   1c740:	add	r8, sp, #32
   1c744:	b	1c590 <__assert_fail@plt+0xb46c>
   1c748:	bl	10f20 <__stack_chk_fail@plt>
   1c74c:	bl	11118 <abort@plt>
   1c750:	andeq	r0, r3, r8, lsl #30
   1c754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c758:	sub	sp, sp, #36	; 0x24
   1c75c:	ldr	r9, [pc, #468]	; 1c938 <__assert_fail@plt+0xb814>
   1c760:	mov	r7, r1
   1c764:	str	r0, [sp, #12]
   1c768:	ldr	r3, [r9]
   1c76c:	str	r3, [sp, #28]
   1c770:	bl	11010 <strlen@plt>
   1c774:	cmp	r0, #4096	; 0x1000
   1c778:	mov	r4, r0
   1c77c:	lslcc	r4, r0, #4
   1c780:	add	sl, r4, #1
   1c784:	str	r0, [sp, #16]
   1c788:	mov	r0, sl
   1c78c:	bl	10fa4 <malloc@plt>
   1c790:	subs	r6, r0, #0
   1c794:	beq	1c924 <__assert_fail@plt+0xb800>
   1c798:	mov	r3, #0
   1c79c:	str	r3, [sp]
   1c7a0:	mov	r2, r3
   1c7a4:	mov	r1, r3
   1c7a8:	mov	r0, r7
   1c7ac:	bl	10e90 <iconv@plt>
   1c7b0:	add	r8, sp, #24
   1c7b4:	str	r6, [sp, #20]
   1c7b8:	str	r4, [sp, #24]
   1c7bc:	b	1c820 <__assert_fail@plt+0xb6fc>
   1c7c0:	bl	11028 <__errno_location@plt>
   1c7c4:	ldr	r3, [r0]
   1c7c8:	mov	fp, r0
   1c7cc:	cmp	r3, #22
   1c7d0:	beq	1c89c <__assert_fail@plt+0xb778>
   1c7d4:	cmp	r3, #7
   1c7d8:	bne	1c8fc <__assert_fail@plt+0xb7d8>
   1c7dc:	ldr	r4, [sp, #20]
   1c7e0:	lsl	r5, sl, #1
   1c7e4:	cmp	sl, r5
   1c7e8:	sub	r4, r4, r6
   1c7ec:	bcs	1c8f4 <__assert_fail@plt+0xb7d0>
   1c7f0:	mov	r1, r5
   1c7f4:	mov	r0, r6
   1c7f8:	bl	10f2c <realloc@plt>
   1c7fc:	cmp	r0, #0
   1c800:	beq	1c8f4 <__assert_fail@plt+0xb7d0>
   1c804:	sub	r3, r5, #1
   1c808:	mov	r6, r0
   1c80c:	mov	sl, r5
   1c810:	sub	r3, r3, r4
   1c814:	add	r4, r0, r4
   1c818:	str	r3, [sp, #24]
   1c81c:	str	r4, [sp, #20]
   1c820:	str	r8, [sp]
   1c824:	add	r3, sp, #20
   1c828:	add	r2, sp, #16
   1c82c:	add	r1, sp, #12
   1c830:	mov	r0, r7
   1c834:	bl	10e90 <iconv@plt>
   1c838:	cmn	r0, #1
   1c83c:	beq	1c7c0 <__assert_fail@plt+0xb69c>
   1c840:	b	1c89c <__assert_fail@plt+0xb778>
   1c844:	bl	11028 <__errno_location@plt>
   1c848:	ldr	r3, [r0]
   1c84c:	mov	fp, r0
   1c850:	cmp	r3, #7
   1c854:	bne	1c8fc <__assert_fail@plt+0xb7d8>
   1c858:	ldr	r4, [sp, #20]
   1c85c:	lsl	r5, sl, #1
   1c860:	cmp	sl, r5
   1c864:	sub	r4, r4, r6
   1c868:	bcs	1c8f4 <__assert_fail@plt+0xb7d0>
   1c86c:	mov	r1, r5
   1c870:	mov	r0, r6
   1c874:	bl	10f2c <realloc@plt>
   1c878:	cmp	r0, #0
   1c87c:	beq	1c8f4 <__assert_fail@plt+0xb7d0>
   1c880:	sub	r3, r5, #1
   1c884:	mov	sl, r5
   1c888:	mov	r6, r0
   1c88c:	sub	r3, r3, r4
   1c890:	add	r4, r0, r4
   1c894:	str	r3, [sp, #24]
   1c898:	str	r4, [sp, #20]
   1c89c:	mov	r2, #0
   1c8a0:	str	r8, [sp]
   1c8a4:	mov	r1, r2
   1c8a8:	add	r3, sp, #20
   1c8ac:	mov	r0, r7
   1c8b0:	bl	10e90 <iconv@plt>
   1c8b4:	cmn	r0, #1
   1c8b8:	beq	1c844 <__assert_fail@plt+0xb720>
   1c8bc:	ldr	r3, [sp, #20]
   1c8c0:	mov	r2, #0
   1c8c4:	add	r1, r3, #1
   1c8c8:	str	r1, [sp, #20]
   1c8cc:	strb	r2, [r3]
   1c8d0:	ldr	r1, [sp, #20]
   1c8d4:	sub	r1, r1, r6
   1c8d8:	cmp	sl, r1
   1c8dc:	bls	1c908 <__assert_fail@plt+0xb7e4>
   1c8e0:	mov	r0, r6
   1c8e4:	bl	10f2c <realloc@plt>
   1c8e8:	cmp	r0, #0
   1c8ec:	movne	r6, r0
   1c8f0:	b	1c908 <__assert_fail@plt+0xb7e4>
   1c8f4:	mov	r3, #12
   1c8f8:	str	r3, [fp]
   1c8fc:	mov	r0, r6
   1c900:	bl	10ecc <free@plt>
   1c904:	mov	r6, #0
   1c908:	ldr	r2, [sp, #28]
   1c90c:	ldr	r3, [r9]
   1c910:	mov	r0, r6
   1c914:	cmp	r2, r3
   1c918:	bne	1c934 <__assert_fail@plt+0xb810>
   1c91c:	add	sp, sp, #36	; 0x24
   1c920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c924:	bl	11028 <__errno_location@plt>
   1c928:	mov	r3, #12
   1c92c:	str	r3, [r0]
   1c930:	b	1c908 <__assert_fail@plt+0xb7e4>
   1c934:	bl	10f20 <__stack_chk_fail@plt>
   1c938:	andeq	r0, r3, r8, lsl #30
   1c93c:	push	{r4, r5, r6, lr}
   1c940:	mov	r4, r0
   1c944:	ldrb	r3, [r0]
   1c948:	cmp	r3, #0
   1c94c:	beq	1c96c <__assert_fail@plt+0xb848>
   1c950:	mov	r6, r1
   1c954:	mov	r0, r6
   1c958:	mov	r1, r2
   1c95c:	mov	r5, r2
   1c960:	bl	1ac5c <__assert_fail@plt+0x9b38>
   1c964:	cmp	r0, #0
   1c968:	bne	1c984 <__assert_fail@plt+0xb860>
   1c96c:	mov	r0, r4
   1c970:	bl	10f14 <strdup@plt>
   1c974:	subs	r4, r0, #0
   1c978:	beq	1c9e4 <__assert_fail@plt+0xb8c0>
   1c97c:	mov	r0, r4
   1c980:	pop	{r4, r5, r6, pc}
   1c984:	mov	r0, r5
   1c988:	mov	r1, r6
   1c98c:	bl	10fb0 <iconv_open@plt>
   1c990:	cmn	r0, #1
   1c994:	mov	r5, r0
   1c998:	moveq	r4, #0
   1c99c:	beq	1c97c <__assert_fail@plt+0xb858>
   1c9a0:	mov	r0, r4
   1c9a4:	mov	r1, r5
   1c9a8:	bl	1c754 <__assert_fail@plt+0xb630>
   1c9ac:	subs	r4, r0, #0
   1c9b0:	beq	1c9f8 <__assert_fail@plt+0xb8d4>
   1c9b4:	mov	r0, r5
   1c9b8:	bl	10e84 <iconv_close@plt>
   1c9bc:	cmp	r0, #0
   1c9c0:	bge	1c97c <__assert_fail@plt+0xb858>
   1c9c4:	bl	11028 <__errno_location@plt>
   1c9c8:	mov	r5, r0
   1c9cc:	mov	r0, r4
   1c9d0:	ldr	r6, [r5]
   1c9d4:	mov	r4, #0
   1c9d8:	bl	10ecc <free@plt>
   1c9dc:	str	r6, [r5]
   1c9e0:	b	1c97c <__assert_fail@plt+0xb858>
   1c9e4:	bl	11028 <__errno_location@plt>
   1c9e8:	mov	r3, #12
   1c9ec:	str	r3, [r0]
   1c9f0:	mov	r0, r4
   1c9f4:	pop	{r4, r5, r6, pc}
   1c9f8:	bl	11028 <__errno_location@plt>
   1c9fc:	mov	r6, r0
   1ca00:	mov	r0, r5
   1ca04:	ldr	r5, [r6]
   1ca08:	bl	10e84 <iconv_close@plt>
   1ca0c:	str	r5, [r6]
   1ca10:	b	1c97c <__assert_fail@plt+0xb858>
   1ca14:	push	{r4, r5, lr}
   1ca18:	sub	sp, sp, #12
   1ca1c:	mov	r4, r0
   1ca20:	bl	1107c <fileno@plt>
   1ca24:	cmp	r0, #0
   1ca28:	mov	r0, r4
   1ca2c:	blt	1caa8 <__assert_fail@plt+0xb984>
   1ca30:	bl	10fc8 <__freading@plt>
   1ca34:	cmp	r0, #0
   1ca38:	bne	1ca74 <__assert_fail@plt+0xb950>
   1ca3c:	mov	r0, r4
   1ca40:	bl	1cab4 <__assert_fail@plt+0xb990>
   1ca44:	cmp	r0, #0
   1ca48:	beq	1caa4 <__assert_fail@plt+0xb980>
   1ca4c:	bl	11028 <__errno_location@plt>
   1ca50:	mov	r5, r0
   1ca54:	mov	r0, r4
   1ca58:	ldr	r4, [r5]
   1ca5c:	bl	110a0 <fclose@plt>
   1ca60:	cmp	r4, #0
   1ca64:	mvnne	r0, #0
   1ca68:	strne	r4, [r5]
   1ca6c:	add	sp, sp, #12
   1ca70:	pop	{r4, r5, pc}
   1ca74:	mov	r0, r4
   1ca78:	bl	1107c <fileno@plt>
   1ca7c:	mov	r3, #1
   1ca80:	str	r3, [sp]
   1ca84:	mov	r2, #0
   1ca88:	mov	r3, #0
   1ca8c:	bl	10f68 <lseek64@plt>
   1ca90:	mvn	r3, #0
   1ca94:	mvn	r2, #0
   1ca98:	cmp	r1, r3
   1ca9c:	cmpeq	r0, r2
   1caa0:	bne	1ca3c <__assert_fail@plt+0xb918>
   1caa4:	mov	r0, r4
   1caa8:	add	sp, sp, #12
   1caac:	pop	{r4, r5, lr}
   1cab0:	b	110a0 <fclose@plt>
   1cab4:	push	{r4, lr}
   1cab8:	subs	r4, r0, #0
   1cabc:	sub	sp, sp, #8
   1cac0:	beq	1cadc <__assert_fail@plt+0xb9b8>
   1cac4:	bl	10fc8 <__freading@plt>
   1cac8:	cmp	r0, #0
   1cacc:	beq	1cadc <__assert_fail@plt+0xb9b8>
   1cad0:	ldr	r3, [r4]
   1cad4:	tst	r3, #256	; 0x100
   1cad8:	bne	1caec <__assert_fail@plt+0xb9c8>
   1cadc:	mov	r0, r4
   1cae0:	add	sp, sp, #8
   1cae4:	pop	{r4, lr}
   1cae8:	b	10ea8 <fflush@plt>
   1caec:	mov	r3, #1
   1caf0:	str	r3, [sp]
   1caf4:	mov	r2, #0
   1caf8:	mov	r3, #0
   1cafc:	mov	r0, r4
   1cb00:	bl	1cb14 <__assert_fail@plt+0xb9f0>
   1cb04:	mov	r0, r4
   1cb08:	add	sp, sp, #8
   1cb0c:	pop	{r4, lr}
   1cb10:	b	10ea8 <fflush@plt>
   1cb14:	push	{r4, r5, r6, r7, r8, lr}
   1cb18:	sub	sp, sp, #8
   1cb1c:	ldmib	r0, {ip, lr}
   1cb20:	mov	r4, r0
   1cb24:	ldr	r5, [sp, #32]
   1cb28:	cmp	lr, ip
   1cb2c:	beq	1cb44 <__assert_fail@plt+0xba20>
   1cb30:	str	r5, [sp, #32]
   1cb34:	mov	r0, r4
   1cb38:	add	sp, sp, #8
   1cb3c:	pop	{r4, r5, r6, r7, r8, lr}
   1cb40:	b	110b8 <fseeko64@plt>
   1cb44:	ldr	lr, [r0, #20]
   1cb48:	ldr	ip, [r0, #16]
   1cb4c:	cmp	lr, ip
   1cb50:	bne	1cb30 <__assert_fail@plt+0xba0c>
   1cb54:	ldr	r8, [r0, #36]	; 0x24
   1cb58:	cmp	r8, #0
   1cb5c:	bne	1cb30 <__assert_fail@plt+0xba0c>
   1cb60:	mov	r6, r2
   1cb64:	mov	r7, r3
   1cb68:	bl	1107c <fileno@plt>
   1cb6c:	mov	r2, r6
   1cb70:	mov	r3, r7
   1cb74:	str	r5, [sp]
   1cb78:	bl	10f68 <lseek64@plt>
   1cb7c:	mvn	r3, #0
   1cb80:	mvn	r2, #0
   1cb84:	cmp	r1, r3
   1cb88:	cmpeq	r0, r2
   1cb8c:	beq	1cbac <__assert_fail@plt+0xba88>
   1cb90:	ldr	r3, [r4]
   1cb94:	strd	r0, [r4, #80]	; 0x50
   1cb98:	mov	r0, r8
   1cb9c:	bic	r3, r3, #16
   1cba0:	str	r3, [r4]
   1cba4:	add	sp, sp, #8
   1cba8:	pop	{r4, r5, r6, r7, r8, pc}
   1cbac:	mvn	r0, #0
   1cbb0:	b	1cba4 <__assert_fail@plt+0xba80>
   1cbb4:	mov	r3, #16
   1cbb8:	adds	r0, r0, r3
   1cbbc:	bcs	1cbe8 <__assert_fail@plt+0xbac4>
   1cbc0:	push	{r4, lr}
   1cbc4:	bl	10fa4 <malloc@plt>
   1cbc8:	subs	r2, r0, #0
   1cbcc:	addne	r3, r2, #8
   1cbd0:	bicne	r3, r3, #15
   1cbd4:	moveq	r0, #0
   1cbd8:	addne	r0, r3, #8
   1cbdc:	subne	r2, r0, r2
   1cbe0:	strbne	r2, [r3, #7]
   1cbe4:	pop	{r4, pc}
   1cbe8:	mov	r0, #0
   1cbec:	bx	lr
   1cbf0:	tst	r0, #7
   1cbf4:	bne	1cc0c <__assert_fail@plt+0xbae8>
   1cbf8:	tst	r0, #8
   1cbfc:	bxeq	lr
   1cc00:	ldrb	r3, [r0, #-1]
   1cc04:	sub	r0, r0, r3
   1cc08:	b	10ecc <free@plt>
   1cc0c:	push	{r4, lr}
   1cc10:	bl	11118 <abort@plt>
   1cc14:	push	{r4, r5, r6, r7, r8, lr}
   1cc18:	sub	sp, sp, #64	; 0x40
   1cc1c:	ldr	r7, [pc, #464]	; 1cdf4 <__assert_fail@plt+0xbcd0>
   1cc20:	mov	r4, r0
   1cc24:	ldr	r3, [r7]
   1cc28:	str	r3, [sp, #60]	; 0x3c
   1cc2c:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1cc30:	cmp	r0, #1
   1cc34:	bhi	1cc60 <__assert_fail@plt+0xbb3c>
   1cc38:	mov	r0, r4
   1cc3c:	bl	11010 <strlen@plt>
   1cc40:	mov	r5, r0
   1cc44:	ldr	r2, [sp, #60]	; 0x3c
   1cc48:	ldr	r3, [r7]
   1cc4c:	mov	r0, r5
   1cc50:	cmp	r2, r3
   1cc54:	bne	1cddc <__assert_fail@plt+0xbcb8>
   1cc58:	add	sp, sp, #64	; 0x40
   1cc5c:	pop	{r4, r5, r6, r7, r8, pc}
   1cc60:	mov	r5, #0
   1cc64:	str	r4, [sp, #20]
   1cc68:	str	r5, [sp, #12]
   1cc6c:	strb	r5, [sp, #4]
   1cc70:	str	r5, [sp, #8]
   1cc74:	strb	r5, [sp, #16]
   1cc78:	mov	r6, #1
   1cc7c:	ldr	r8, [pc, #372]	; 1cdf8 <__assert_fail@plt+0xbcd4>
   1cc80:	b	1ccd8 <__assert_fail@plt+0xbbb4>
   1cc84:	ldrb	r3, [r4]
   1cc88:	and	r2, r3, #31
   1cc8c:	lsr	r3, r3, #5
   1cc90:	ldr	r3, [r8, r3, lsl #2]
   1cc94:	lsr	r3, r3, r2
   1cc98:	tst	r3, #1
   1cc9c:	beq	1cd4c <__assert_fail@plt+0xbc28>
   1cca0:	str	r6, [sp, #24]
   1cca4:	ldrb	r4, [r4]
   1cca8:	strb	r6, [sp, #28]
   1ccac:	strb	r6, [sp, #16]
   1ccb0:	str	r4, [sp, #32]
   1ccb4:	cmp	r4, #0
   1ccb8:	beq	1cc44 <__assert_fail@plt+0xbb20>
   1ccbc:	ldr	r4, [sp, #20]
   1ccc0:	ldr	r3, [sp, #24]
   1ccc4:	add	r5, r5, #1
   1ccc8:	add	r4, r4, r3
   1cccc:	mov	r3, #0
   1ccd0:	str	r4, [sp, #20]
   1ccd4:	strb	r3, [sp, #16]
   1ccd8:	ldrb	r3, [sp, #4]
   1ccdc:	cmp	r3, #0
   1cce0:	beq	1cc84 <__assert_fail@plt+0xbb60>
   1cce4:	bl	10f74 <__ctype_get_mb_cur_max@plt>
   1cce8:	mov	r1, r0
   1ccec:	mov	r0, r4
   1ccf0:	bl	19e20 <__assert_fail@plt+0x8cfc>
   1ccf4:	add	r3, sp, #8
   1ccf8:	mov	r1, r4
   1ccfc:	mov	r2, r0
   1cd00:	add	r0, sp, #32
   1cd04:	bl	1abdc <__assert_fail@plt+0x9ab8>
   1cd08:	cmn	r0, #1
   1cd0c:	str	r0, [sp, #24]
   1cd10:	beq	1cd64 <__assert_fail@plt+0xbc40>
   1cd14:	cmn	r0, #2
   1cd18:	beq	1cd78 <__assert_fail@plt+0xbc54>
   1cd1c:	cmp	r0, #0
   1cd20:	beq	1cd94 <__assert_fail@plt+0xbc70>
   1cd24:	ldr	r4, [sp, #32]
   1cd28:	add	r0, sp, #8
   1cd2c:	strb	r6, [sp, #28]
   1cd30:	bl	10ef0 <mbsinit@plt>
   1cd34:	cmp	r0, #0
   1cd38:	movne	r3, #0
   1cd3c:	strbeq	r6, [sp, #16]
   1cd40:	strbne	r6, [sp, #16]
   1cd44:	strbne	r3, [sp, #4]
   1cd48:	b	1ccb4 <__assert_fail@plt+0xbb90>
   1cd4c:	add	r0, sp, #8
   1cd50:	bl	10ef0 <mbsinit@plt>
   1cd54:	cmp	r0, #0
   1cd58:	beq	1cdc8 <__assert_fail@plt+0xbca4>
   1cd5c:	strb	r6, [sp, #4]
   1cd60:	b	1cce4 <__assert_fail@plt+0xbbc0>
   1cd64:	mov	r3, #0
   1cd68:	str	r6, [sp, #24]
   1cd6c:	strb	r3, [sp, #28]
   1cd70:	ldr	r4, [sp, #20]
   1cd74:	b	1ccc0 <__assert_fail@plt+0xbb9c>
   1cd78:	ldr	r4, [sp, #20]
   1cd7c:	mov	r0, r4
   1cd80:	bl	11010 <strlen@plt>
   1cd84:	mov	r3, #0
   1cd88:	strb	r3, [sp, #28]
   1cd8c:	str	r0, [sp, #24]
   1cd90:	b	1ccc0 <__assert_fail@plt+0xbb9c>
   1cd94:	ldr	r4, [sp, #20]
   1cd98:	str	r6, [sp, #24]
   1cd9c:	ldrb	r3, [r4]
   1cda0:	cmp	r3, #0
   1cda4:	bne	1cde0 <__assert_fail@plt+0xbcbc>
   1cda8:	ldr	r4, [sp, #32]
   1cdac:	cmp	r4, #0
   1cdb0:	beq	1cd28 <__assert_fail@plt+0xbc04>
   1cdb4:	ldr	r3, [pc, #64]	; 1cdfc <__assert_fail@plt+0xbcd8>
   1cdb8:	mov	r2, #179	; 0xb3
   1cdbc:	ldr	r1, [pc, #60]	; 1ce00 <__assert_fail@plt+0xbcdc>
   1cdc0:	ldr	r0, [pc, #60]	; 1ce04 <__assert_fail@plt+0xbce0>
   1cdc4:	bl	11124 <__assert_fail@plt>
   1cdc8:	ldr	r3, [pc, #44]	; 1cdfc <__assert_fail@plt+0xbcd8>
   1cdcc:	mov	r2, #150	; 0x96
   1cdd0:	ldr	r1, [pc, #40]	; 1ce00 <__assert_fail@plt+0xbcdc>
   1cdd4:	ldr	r0, [pc, #44]	; 1ce08 <__assert_fail@plt+0xbce4>
   1cdd8:	bl	11124 <__assert_fail@plt>
   1cddc:	bl	10f20 <__stack_chk_fail@plt>
   1cde0:	ldr	r3, [pc, #20]	; 1cdfc <__assert_fail@plt+0xbcd8>
   1cde4:	mov	r2, #178	; 0xb2
   1cde8:	ldr	r1, [pc, #16]	; 1ce00 <__assert_fail@plt+0xbcdc>
   1cdec:	ldr	r0, [pc, #24]	; 1ce0c <__assert_fail@plt+0xbce8>
   1cdf0:	bl	11124 <__assert_fail@plt>
   1cdf4:	andeq	r0, r3, r8, lsl #30
   1cdf8:	andeq	r0, r2, r8, ror ip
   1cdfc:	andeq	r0, r2, ip, lsr #25
   1ce00:	andeq	r0, r2, ip, asr #15
   1ce04:	ldrdeq	r0, [r2], -ip
   1ce08:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1ce0c:	andeq	r0, r2, r8, lsl #16
   1ce10:	subs	r2, r1, #1
   1ce14:	bxeq	lr
   1ce18:	bcc	1cff0 <__assert_fail@plt+0xbecc>
   1ce1c:	cmp	r0, r1
   1ce20:	bls	1cfd4 <__assert_fail@plt+0xbeb0>
   1ce24:	tst	r1, r2
   1ce28:	beq	1cfe0 <__assert_fail@plt+0xbebc>
   1ce2c:	clz	r3, r0
   1ce30:	clz	r2, r1
   1ce34:	sub	r3, r2, r3
   1ce38:	rsbs	r3, r3, #31
   1ce3c:	addne	r3, r3, r3, lsl #1
   1ce40:	mov	r2, #0
   1ce44:	addne	pc, pc, r3, lsl #2
   1ce48:	nop			; (mov r0, r0)
   1ce4c:	cmp	r0, r1, lsl #31
   1ce50:	adc	r2, r2, r2
   1ce54:	subcs	r0, r0, r1, lsl #31
   1ce58:	cmp	r0, r1, lsl #30
   1ce5c:	adc	r2, r2, r2
   1ce60:	subcs	r0, r0, r1, lsl #30
   1ce64:	cmp	r0, r1, lsl #29
   1ce68:	adc	r2, r2, r2
   1ce6c:	subcs	r0, r0, r1, lsl #29
   1ce70:	cmp	r0, r1, lsl #28
   1ce74:	adc	r2, r2, r2
   1ce78:	subcs	r0, r0, r1, lsl #28
   1ce7c:	cmp	r0, r1, lsl #27
   1ce80:	adc	r2, r2, r2
   1ce84:	subcs	r0, r0, r1, lsl #27
   1ce88:	cmp	r0, r1, lsl #26
   1ce8c:	adc	r2, r2, r2
   1ce90:	subcs	r0, r0, r1, lsl #26
   1ce94:	cmp	r0, r1, lsl #25
   1ce98:	adc	r2, r2, r2
   1ce9c:	subcs	r0, r0, r1, lsl #25
   1cea0:	cmp	r0, r1, lsl #24
   1cea4:	adc	r2, r2, r2
   1cea8:	subcs	r0, r0, r1, lsl #24
   1ceac:	cmp	r0, r1, lsl #23
   1ceb0:	adc	r2, r2, r2
   1ceb4:	subcs	r0, r0, r1, lsl #23
   1ceb8:	cmp	r0, r1, lsl #22
   1cebc:	adc	r2, r2, r2
   1cec0:	subcs	r0, r0, r1, lsl #22
   1cec4:	cmp	r0, r1, lsl #21
   1cec8:	adc	r2, r2, r2
   1cecc:	subcs	r0, r0, r1, lsl #21
   1ced0:	cmp	r0, r1, lsl #20
   1ced4:	adc	r2, r2, r2
   1ced8:	subcs	r0, r0, r1, lsl #20
   1cedc:	cmp	r0, r1, lsl #19
   1cee0:	adc	r2, r2, r2
   1cee4:	subcs	r0, r0, r1, lsl #19
   1cee8:	cmp	r0, r1, lsl #18
   1ceec:	adc	r2, r2, r2
   1cef0:	subcs	r0, r0, r1, lsl #18
   1cef4:	cmp	r0, r1, lsl #17
   1cef8:	adc	r2, r2, r2
   1cefc:	subcs	r0, r0, r1, lsl #17
   1cf00:	cmp	r0, r1, lsl #16
   1cf04:	adc	r2, r2, r2
   1cf08:	subcs	r0, r0, r1, lsl #16
   1cf0c:	cmp	r0, r1, lsl #15
   1cf10:	adc	r2, r2, r2
   1cf14:	subcs	r0, r0, r1, lsl #15
   1cf18:	cmp	r0, r1, lsl #14
   1cf1c:	adc	r2, r2, r2
   1cf20:	subcs	r0, r0, r1, lsl #14
   1cf24:	cmp	r0, r1, lsl #13
   1cf28:	adc	r2, r2, r2
   1cf2c:	subcs	r0, r0, r1, lsl #13
   1cf30:	cmp	r0, r1, lsl #12
   1cf34:	adc	r2, r2, r2
   1cf38:	subcs	r0, r0, r1, lsl #12
   1cf3c:	cmp	r0, r1, lsl #11
   1cf40:	adc	r2, r2, r2
   1cf44:	subcs	r0, r0, r1, lsl #11
   1cf48:	cmp	r0, r1, lsl #10
   1cf4c:	adc	r2, r2, r2
   1cf50:	subcs	r0, r0, r1, lsl #10
   1cf54:	cmp	r0, r1, lsl #9
   1cf58:	adc	r2, r2, r2
   1cf5c:	subcs	r0, r0, r1, lsl #9
   1cf60:	cmp	r0, r1, lsl #8
   1cf64:	adc	r2, r2, r2
   1cf68:	subcs	r0, r0, r1, lsl #8
   1cf6c:	cmp	r0, r1, lsl #7
   1cf70:	adc	r2, r2, r2
   1cf74:	subcs	r0, r0, r1, lsl #7
   1cf78:	cmp	r0, r1, lsl #6
   1cf7c:	adc	r2, r2, r2
   1cf80:	subcs	r0, r0, r1, lsl #6
   1cf84:	cmp	r0, r1, lsl #5
   1cf88:	adc	r2, r2, r2
   1cf8c:	subcs	r0, r0, r1, lsl #5
   1cf90:	cmp	r0, r1, lsl #4
   1cf94:	adc	r2, r2, r2
   1cf98:	subcs	r0, r0, r1, lsl #4
   1cf9c:	cmp	r0, r1, lsl #3
   1cfa0:	adc	r2, r2, r2
   1cfa4:	subcs	r0, r0, r1, lsl #3
   1cfa8:	cmp	r0, r1, lsl #2
   1cfac:	adc	r2, r2, r2
   1cfb0:	subcs	r0, r0, r1, lsl #2
   1cfb4:	cmp	r0, r1, lsl #1
   1cfb8:	adc	r2, r2, r2
   1cfbc:	subcs	r0, r0, r1, lsl #1
   1cfc0:	cmp	r0, r1
   1cfc4:	adc	r2, r2, r2
   1cfc8:	subcs	r0, r0, r1
   1cfcc:	mov	r0, r2
   1cfd0:	bx	lr
   1cfd4:	moveq	r0, #1
   1cfd8:	movne	r0, #0
   1cfdc:	bx	lr
   1cfe0:	clz	r2, r1
   1cfe4:	rsb	r2, r2, #31
   1cfe8:	lsr	r0, r0, r2
   1cfec:	bx	lr
   1cff0:	cmp	r0, #0
   1cff4:	mvnne	r0, #0
   1cff8:	b	1d058 <__assert_fail@plt+0xbf34>
   1cffc:	cmp	r1, #0
   1d000:	beq	1cff0 <__assert_fail@plt+0xbecc>
   1d004:	push	{r0, r1, lr}
   1d008:	bl	1ce10 <__assert_fail@plt+0xbcec>
   1d00c:	pop	{r1, r2, lr}
   1d010:	mul	r3, r2, r0
   1d014:	sub	r1, r1, r3
   1d018:	bx	lr
   1d01c:	cmp	r3, #0
   1d020:	cmpeq	r2, #0
   1d024:	bne	1d03c <__assert_fail@plt+0xbf18>
   1d028:	cmp	r1, #0
   1d02c:	cmpeq	r0, #0
   1d030:	mvnne	r1, #0
   1d034:	mvnne	r0, #0
   1d038:	b	1d058 <__assert_fail@plt+0xbf34>
   1d03c:	sub	sp, sp, #8
   1d040:	push	{sp, lr}
   1d044:	bl	1d068 <__assert_fail@plt+0xbf44>
   1d048:	ldr	lr, [sp, #4]
   1d04c:	add	sp, sp, #8
   1d050:	pop	{r2, r3}
   1d054:	bx	lr
   1d058:	push	{r1, lr}
   1d05c:	mov	r0, #8
   1d060:	bl	10e78 <raise@plt>
   1d064:	pop	{r1, pc}
   1d068:	cmp	r1, r3
   1d06c:	cmpeq	r0, r2
   1d070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d074:	mov	r4, r0
   1d078:	movcc	r0, #0
   1d07c:	mov	r5, r1
   1d080:	ldr	lr, [sp, #36]	; 0x24
   1d084:	movcc	r1, r0
   1d088:	bcc	1d184 <__assert_fail@plt+0xc060>
   1d08c:	cmp	r3, #0
   1d090:	clzeq	ip, r2
   1d094:	clzne	ip, r3
   1d098:	addeq	ip, ip, #32
   1d09c:	cmp	r5, #0
   1d0a0:	clzeq	r1, r4
   1d0a4:	addeq	r1, r1, #32
   1d0a8:	clzne	r1, r5
   1d0ac:	sub	ip, ip, r1
   1d0b0:	sub	sl, ip, #32
   1d0b4:	lsl	r9, r3, ip
   1d0b8:	rsb	fp, ip, #32
   1d0bc:	orr	r9, r9, r2, lsl sl
   1d0c0:	orr	r9, r9, r2, lsr fp
   1d0c4:	lsl	r8, r2, ip
   1d0c8:	cmp	r5, r9
   1d0cc:	cmpeq	r4, r8
   1d0d0:	movcc	r0, #0
   1d0d4:	movcc	r1, r0
   1d0d8:	bcc	1d0f4 <__assert_fail@plt+0xbfd0>
   1d0dc:	mov	r0, #1
   1d0e0:	subs	r4, r4, r8
   1d0e4:	lsl	r1, r0, sl
   1d0e8:	orr	r1, r1, r0, lsr fp
   1d0ec:	lsl	r0, r0, ip
   1d0f0:	sbc	r5, r5, r9
   1d0f4:	cmp	ip, #0
   1d0f8:	beq	1d184 <__assert_fail@plt+0xc060>
   1d0fc:	lsr	r6, r8, #1
   1d100:	orr	r6, r6, r9, lsl #31
   1d104:	lsr	r7, r9, #1
   1d108:	mov	r2, ip
   1d10c:	b	1d130 <__assert_fail@plt+0xc00c>
   1d110:	subs	r3, r4, r6
   1d114:	sbc	r8, r5, r7
   1d118:	adds	r3, r3, r3
   1d11c:	adc	r8, r8, r8
   1d120:	adds	r4, r3, #1
   1d124:	adc	r5, r8, #0
   1d128:	subs	r2, r2, #1
   1d12c:	beq	1d14c <__assert_fail@plt+0xc028>
   1d130:	cmp	r5, r7
   1d134:	cmpeq	r4, r6
   1d138:	bcs	1d110 <__assert_fail@plt+0xbfec>
   1d13c:	adds	r4, r4, r4
   1d140:	adc	r5, r5, r5
   1d144:	subs	r2, r2, #1
   1d148:	bne	1d130 <__assert_fail@plt+0xc00c>
   1d14c:	lsr	r3, r4, ip
   1d150:	orr	r3, r3, r5, lsl fp
   1d154:	lsr	r2, r5, ip
   1d158:	orr	r3, r3, r5, lsr sl
   1d15c:	adds	r0, r0, r4
   1d160:	mov	r4, r3
   1d164:	lsl	r3, r2, ip
   1d168:	orr	r3, r3, r4, lsl sl
   1d16c:	lsl	ip, r4, ip
   1d170:	orr	r3, r3, r4, lsr fp
   1d174:	adc	r1, r1, r5
   1d178:	subs	r0, r0, ip
   1d17c:	mov	r5, r2
   1d180:	sbc	r1, r1, r3
   1d184:	cmp	lr, #0
   1d188:	strdne	r4, [lr]
   1d18c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d190:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d194:	mov	r7, r0
   1d198:	ldr	r6, [pc, #72]	; 1d1e8 <__assert_fail@plt+0xc0c4>
   1d19c:	ldr	r5, [pc, #72]	; 1d1ec <__assert_fail@plt+0xc0c8>
   1d1a0:	add	r6, pc, r6
   1d1a4:	add	r5, pc, r5
   1d1a8:	sub	r6, r6, r5
   1d1ac:	mov	r8, r1
   1d1b0:	mov	r9, r2
   1d1b4:	bl	10e40 <calloc@plt-0x20>
   1d1b8:	asrs	r6, r6, #2
   1d1bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d1c0:	mov	r4, #0
   1d1c4:	add	r4, r4, #1
   1d1c8:	ldr	r3, [r5], #4
   1d1cc:	mov	r2, r9
   1d1d0:	mov	r1, r8
   1d1d4:	mov	r0, r7
   1d1d8:	blx	r3
   1d1dc:	cmp	r6, r4
   1d1e0:	bne	1d1c4 <__assert_fail@plt+0xc0a0>
   1d1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d1e8:	andeq	r3, r1, ip, asr sp
   1d1ec:	andeq	r3, r1, r4, asr sp
   1d1f0:	bx	lr
   1d1f4:	ldr	r3, [pc, #12]	; 1d208 <__assert_fail@plt+0xc0e4>
   1d1f8:	mov	r1, #0
   1d1fc:	add	r3, pc, r3
   1d200:	ldr	r2, [r3]
   1d204:	b	1104c <__cxa_atexit@plt>
   1d208:	andeq	r3, r1, r0, lsl #30

Disassembly of section .fini:

0001d20c <.fini>:
   1d20c:	push	{r3, lr}
   1d210:	pop	{r3, pc}
