
raspbian-preinstalled/setkeycodes:     file format elf32-littlearm


Disassembly of section .init:

00010634 <.init>:
   10634:	push	{r3, lr}
   10638:	bl	109c4 <close@plt+0x280>
   1063c:	pop	{r3, pc}

Disassembly of section .plt:

00010640 <strcmp@plt-0x14>:
   10640:	push	{lr}		; (str lr, [sp, #-4]!)
   10644:	ldr	lr, [pc, #4]	; 10650 <strcmp@plt-0x4>
   10648:	add	lr, pc, lr
   1064c:	ldr	pc, [lr, #8]!
   10650:			; <UNDEFINED> instruction: 0x000119b0

00010654 <strcmp@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #69632	; 0x11000
   1065c:	ldr	pc, [ip, #2480]!	; 0x9b0

00010660 <strtol@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #69632	; 0x11000
   10668:	ldr	pc, [ip, #2472]!	; 0x9a8

0001066c <dcgettext@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #69632	; 0x11000
   10674:	ldr	pc, [ip, #2464]!	; 0x9a0

00010678 <__stack_chk_fail@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #69632	; 0x11000
   10680:	ldr	pc, [ip, #2456]!	; 0x998

00010684 <textdomain@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #69632	; 0x11000
   1068c:	ldr	pc, [ip, #2448]!	; 0x990

00010690 <ioctl@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #69632	; 0x11000
   10698:	ldr	pc, [ip, #2440]!	; 0x988

0001069c <__libc_start_main@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #69632	; 0x11000
   106a4:	ldr	pc, [ip, #2432]!	; 0x980

000106a8 <strerror@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #69632	; 0x11000
   106b0:	ldr	pc, [ip, #2424]!	; 0x978

000106b4 <__vfprintf_chk@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #69632	; 0x11000
   106bc:	ldr	pc, [ip, #2416]!	; 0x970

000106c0 <__gmon_start__@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #69632	; 0x11000
   106c8:	ldr	pc, [ip, #2408]!	; 0x968

000106cc <open@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #69632	; 0x11000
   106d4:	ldr	pc, [ip, #2400]!	; 0x960

000106d8 <exit@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #69632	; 0x11000
   106e0:	ldr	pc, [ip, #2392]!	; 0x958

000106e4 <__errno_location@plt>:
   106e4:	add	ip, pc, #0, 12
   106e8:	add	ip, ip, #69632	; 0x11000
   106ec:	ldr	pc, [ip, #2384]!	; 0x950

000106f0 <__printf_chk@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #69632	; 0x11000
   106f8:	ldr	pc, [ip, #2376]!	; 0x948

000106fc <__fprintf_chk@plt>:
   106fc:	add	ip, pc, #0, 12
   10700:	add	ip, ip, #69632	; 0x11000
   10704:	ldr	pc, [ip, #2368]!	; 0x940

00010708 <setlocale@plt>:
   10708:	add	ip, pc, #0, 12
   1070c:	add	ip, ip, #69632	; 0x11000
   10710:	ldr	pc, [ip, #2360]!	; 0x938

00010714 <strrchr@plt>:
   10714:	add	ip, pc, #0, 12
   10718:	add	ip, ip, #69632	; 0x11000
   1071c:	ldr	pc, [ip, #2352]!	; 0x930

00010720 <bindtextdomain@plt>:
   10720:	add	ip, pc, #0, 12
   10724:	add	ip, ip, #69632	; 0x11000
   10728:	ldr	pc, [ip, #2344]!	; 0x928

0001072c <isatty@plt>:
   1072c:	add	ip, pc, #0, 12
   10730:	add	ip, ip, #69632	; 0x11000
   10734:	ldr	pc, [ip, #2336]!	; 0x920

00010738 <abort@plt>:
   10738:	add	ip, pc, #0, 12
   1073c:	add	ip, ip, #69632	; 0x11000
   10740:	ldr	pc, [ip, #2328]!	; 0x918

00010744 <close@plt>:
   10744:	add	ip, pc, #0, 12
   10748:	add	ip, ip, #69632	; 0x11000
   1074c:	ldr	pc, [ip, #2320]!	; 0x910

Disassembly of section .text:

00010750 <.text>:
   10750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10754:	sub	sp, sp, #28
   10758:	ldr	sl, [pc, #496]	; 10950 <close@plt+0x20c>
   1075c:	ldr	r6, [r1]
   10760:	mov	r5, r0
   10764:	ldr	r3, [sl]
   10768:	mov	r0, r6
   1076c:	mov	r4, r1
   10770:	mov	r1, #47	; 0x2f
   10774:	str	r3, [sp, #20]
   10778:	bl	10714 <strrchr@plt>
   1077c:	ldr	r7, [pc, #464]	; 10954 <close@plt+0x210>
   10780:	ldr	r1, [pc, #464]	; 10958 <close@plt+0x214>
   10784:	cmp	r0, #0
   10788:	addne	r6, r0, #1
   1078c:	mov	r0, #6
   10790:	str	r6, [r7]
   10794:	bl	10708 <setlocale@plt>
   10798:	ldr	r1, [pc, #444]	; 1095c <close@plt+0x218>
   1079c:	ldr	r0, [pc, #444]	; 10960 <close@plt+0x21c>
   107a0:	bl	10720 <bindtextdomain@plt>
   107a4:	ldr	r0, [pc, #436]	; 10960 <close@plt+0x21c>
   107a8:	bl	10684 <textdomain@plt>
   107ac:	cmp	r5, #2
   107b0:	beq	108c4 <close@plt+0x180>
   107b4:	and	r0, r5, #1
   107b8:	cmp	r5, #0
   107bc:	rsblt	r0, r0, #0
   107c0:	cmp	r0, #1
   107c4:	mov	r7, r0
   107c8:	bne	108d8 <close@plt+0x194>
   107cc:	mov	r0, #0
   107d0:	bl	10b90 <close@plt+0x44c>
   107d4:	subs	r6, r0, #0
   107d8:	blt	108ec <close@plt+0x1a8>
   107dc:	cmp	r5, #2
   107e0:	ble	108a8 <close@plt+0x164>
   107e4:	ldr	r8, [pc, #376]	; 10964 <close@plt+0x220>
   107e8:	ldr	r7, [pc, #376]	; 10968 <close@plt+0x224>
   107ec:	ldr	r9, [pc, #376]	; 1096c <close@plt+0x228>
   107f0:	b	10804 <close@plt+0xc0>
   107f4:	sub	r5, r5, #2
   107f8:	cmp	r5, #2
   107fc:	add	r4, r4, #8
   10800:	ble	108a8 <close@plt+0x164>
   10804:	mov	r2, #10
   10808:	mov	r1, #0
   1080c:	ldr	r0, [r4, #8]
   10810:	bl	10660 <strtol@plt>
   10814:	mov	r2, #16
   10818:	add	r1, sp, #8
   1081c:	str	r0, [sp, #16]
   10820:	ldr	r0, [r4, #4]
   10824:	bl	10660 <strtol@plt>
   10828:	ldr	r3, [sp, #8]
   1082c:	str	r0, [sp, #12]
   10830:	ldrb	r3, [r3]
   10834:	cmp	r3, #0
   10838:	bne	10910 <close@plt+0x1cc>
   1083c:	cmp	r0, r8
   10840:	subhi	r0, r0, #57088	; 0xdf00
   10844:	subhi	r0, r0, #128	; 0x80
   10848:	strhi	r0, [sp, #12]
   1084c:	add	r2, sp, #12
   10850:	mov	r1, r7
   10854:	mov	r0, r6
   10858:	bl	10690 <ioctl@plt>
   1085c:	cmp	r0, #0
   10860:	beq	107f4 <close@plt+0xb0>
   10864:	bl	106e4 <__errno_location@plt>
   10868:	mov	r2, #5
   1086c:	mov	r1, r9
   10870:	sub	r5, r5, #2
   10874:	add	r4, r4, #8
   10878:	ldr	fp, [r0]
   1087c:	mov	r0, #0
   10880:	bl	1066c <dcgettext@plt>
   10884:	ldr	r2, [sp, #16]
   10888:	ldr	r3, [sp, #12]
   1088c:	str	r2, [sp]
   10890:	mov	r1, fp
   10894:	mov	r2, r0
   10898:	mov	r0, #1
   1089c:	bl	10d54 <close@plt+0x610>
   108a0:	cmp	r5, #2
   108a4:	bgt	10804 <close@plt+0xc0>
   108a8:	ldr	r2, [sp, #20]
   108ac:	ldr	r3, [sl]
   108b0:	mov	r0, #0
   108b4:	cmp	r2, r3
   108b8:	bne	10924 <close@plt+0x1e0>
   108bc:	add	sp, sp, #28
   108c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   108c4:	ldr	r0, [r4, #4]
   108c8:	ldr	r1, [pc, #160]	; 10970 <close@plt+0x22c>
   108cc:	bl	10654 <strcmp@plt>
   108d0:	subs	r4, r0, #0
   108d4:	beq	10928 <close@plt+0x1e4>
   108d8:	mov	r2, #5
   108dc:	ldr	r1, [pc, #144]	; 10974 <close@plt+0x230>
   108e0:	mov	r0, #0
   108e4:	bl	1066c <dcgettext@plt>
   108e8:	bl	10a78 <close@plt+0x334>
   108ec:	mov	r2, #5
   108f0:	ldr	r1, [pc, #128]	; 10978 <close@plt+0x234>
   108f4:	mov	r0, #0
   108f8:	bl	1066c <dcgettext@plt>
   108fc:	mov	r1, #0
   10900:	mov	r2, r0
   10904:	mov	r0, r7
   10908:	bl	10d54 <close@plt+0x610>
   1090c:	b	107dc <close@plt+0x98>
   10910:	mov	r2, #5
   10914:	ldr	r1, [pc, #96]	; 1097c <close@plt+0x238>
   10918:	mov	r0, #0
   1091c:	bl	1066c <dcgettext@plt>
   10920:	bl	10a78 <close@plt+0x334>
   10924:	bl	10678 <__stack_chk_fail@plt>
   10928:	mov	r2, #5
   1092c:	ldr	r1, [pc, #76]	; 10980 <close@plt+0x23c>
   10930:	bl	1066c <dcgettext@plt>
   10934:	ldr	r2, [r7]
   10938:	ldr	r3, [pc, #68]	; 10984 <close@plt+0x240>
   1093c:	mov	r1, r0
   10940:	mov	r0, #1
   10944:	bl	106f0 <__printf_chk@plt>
   10948:	mov	r0, r4
   1094c:	bl	106d8 <exit@plt>
   10950:	andeq	r1, r2, r8, lsl #30
   10954:	andeq	r2, r2, r8, ror r0
   10958:	andeq	r1, r1, r8, asr r0
   1095c:	strdeq	r0, [r1], -ip
   10960:	andeq	r0, r1, r0, lsl pc
   10964:	strdeq	sp, [r0], -pc	; <UNPREDICTABLE>
   10968:	andeq	r4, r0, sp, asr #22
   1096c:	andeq	r0, r1, r4, lsr #31
   10970:	andeq	r0, r1, r4, lsl pc
   10974:	andeq	r0, r1, r0, lsr pc
   10978:	andeq	r0, r1, r4, asr pc
   1097c:	andeq	r0, r1, ip, lsl #31
   10980:	andeq	r0, r1, r8, lsl pc
   10984:	andeq	r0, r1, r4, lsr #30
   10988:	mov	fp, #0
   1098c:	mov	lr, #0
   10990:	pop	{r1}		; (ldr r1, [sp], #4)
   10994:	mov	r2, sp
   10998:	push	{r2}		; (str r2, [sp, #-4]!)
   1099c:	push	{r0}		; (str r0, [sp, #-4]!)
   109a0:	ldr	ip, [pc, #16]	; 109b8 <close@plt+0x274>
   109a4:	push	{ip}		; (str ip, [sp, #-4]!)
   109a8:	ldr	r0, [pc, #12]	; 109bc <close@plt+0x278>
   109ac:	ldr	r3, [pc, #12]	; 109c0 <close@plt+0x27c>
   109b0:	bl	1069c <__libc_start_main@plt>
   109b4:	bl	10738 <abort@plt>
   109b8:	andeq	r0, r1, r4, asr lr
   109bc:	andeq	r0, r1, r0, asr r7
   109c0:	strdeq	r0, [r1], -r4
   109c4:	ldr	r3, [pc, #20]	; 109e0 <close@plt+0x29c>
   109c8:	ldr	r2, [pc, #20]	; 109e4 <close@plt+0x2a0>
   109cc:	add	r3, pc, r3
   109d0:	ldr	r2, [r3, r2]
   109d4:	cmp	r2, #0
   109d8:	bxeq	lr
   109dc:	b	106c0 <__gmon_start__@plt>
   109e0:	andeq	r1, r1, ip, lsr #12
   109e4:	andeq	r0, r0, r0, rrx
   109e8:	ldr	r0, [pc, #24]	; 10a08 <close@plt+0x2c4>
   109ec:	ldr	r3, [pc, #24]	; 10a0c <close@plt+0x2c8>
   109f0:	cmp	r3, r0
   109f4:	bxeq	lr
   109f8:	ldr	r3, [pc, #16]	; 10a10 <close@plt+0x2cc>
   109fc:	cmp	r3, #0
   10a00:	bxeq	lr
   10a04:	bx	r3
   10a08:	andeq	r2, r2, ip, rrx
   10a0c:	andeq	r2, r2, ip, rrx
   10a10:	andeq	r0, r0, r0
   10a14:	ldr	r0, [pc, #36]	; 10a40 <close@plt+0x2fc>
   10a18:	ldr	r1, [pc, #36]	; 10a44 <close@plt+0x300>
   10a1c:	sub	r1, r1, r0
   10a20:	asr	r1, r1, #2
   10a24:	add	r1, r1, r1, lsr #31
   10a28:	asrs	r1, r1, #1
   10a2c:	bxeq	lr
   10a30:	ldr	r3, [pc, #16]	; 10a48 <close@plt+0x304>
   10a34:	cmp	r3, #0
   10a38:	bxeq	lr
   10a3c:	bx	r3
   10a40:	andeq	r2, r2, ip, rrx
   10a44:	andeq	r2, r2, ip, rrx
   10a48:	andeq	r0, r0, r0
   10a4c:	push	{r4, lr}
   10a50:	ldr	r4, [pc, #24]	; 10a70 <close@plt+0x32c>
   10a54:	ldrb	r3, [r4]
   10a58:	cmp	r3, #0
   10a5c:	popne	{r4, pc}
   10a60:	bl	109e8 <close@plt+0x2a4>
   10a64:	mov	r3, #1
   10a68:	strb	r3, [r4]
   10a6c:	pop	{r4, pc}
   10a70:	andeq	r2, r2, r4, ror r0
   10a74:	b	10a14 <close@plt+0x2d0>
   10a78:	push	{r4, lr}
   10a7c:	mov	r3, r0
   10a80:	ldr	r4, [pc, #56]	; 10ac0 <close@plt+0x37c>
   10a84:	ldr	r2, [pc, #56]	; 10ac4 <close@plt+0x380>
   10a88:	mov	r1, #1
   10a8c:	ldr	r0, [r4]
   10a90:	bl	106fc <__fprintf_chk@plt>
   10a94:	mov	r2, #5
   10a98:	ldr	r1, [pc, #40]	; 10ac8 <close@plt+0x384>
   10a9c:	mov	r0, #0
   10aa0:	ldr	r4, [r4]
   10aa4:	bl	1066c <dcgettext@plt>
   10aa8:	mov	r1, #1
   10aac:	mov	r2, r0
   10ab0:	mov	r0, r4
   10ab4:	bl	106fc <__fprintf_chk@plt>
   10ab8:	mov	r0, #1
   10abc:	bl	106d8 <exit@plt>
   10ac0:	andeq	r2, r2, r0, ror r0
   10ac4:	andeq	r0, r1, r4, ror #28
   10ac8:	andeq	r0, r1, r4, ror lr
   10acc:	push	{r4, lr}
   10ad0:	mov	r1, #2
   10ad4:	mov	r4, r0
   10ad8:	bl	106cc <open@plt>
   10adc:	cmp	r0, #0
   10ae0:	popge	{r4, pc}
   10ae4:	mov	r1, #1
   10ae8:	mov	r0, r4
   10aec:	bl	106cc <open@plt>
   10af0:	cmp	r0, #0
   10af4:	popge	{r4, pc}
   10af8:	mov	r0, r4
   10afc:	mov	r1, #0
   10b00:	bl	106cc <open@plt>
   10b04:	orr	r0, r0, r0, asr #31
   10b08:	pop	{r4, pc}
   10b0c:	push	{r4, r5, lr}
   10b10:	sub	sp, sp, #12
   10b14:	ldr	r4, [pc, #108]	; 10b88 <close@plt+0x444>
   10b18:	mov	r3, #0
   10b1c:	strb	r3, [sp, #3]
   10b20:	ldr	r3, [r4]
   10b24:	mov	r5, r0
   10b28:	str	r3, [sp, #4]
   10b2c:	bl	1072c <isatty@plt>
   10b30:	cmp	r0, #0
   10b34:	bne	10b54 <close@plt+0x410>
   10b38:	mov	r0, #0
   10b3c:	ldr	r2, [sp, #4]
   10b40:	ldr	r3, [r4]
   10b44:	cmp	r2, r3
   10b48:	bne	10b84 <close@plt+0x440>
   10b4c:	add	sp, sp, #12
   10b50:	pop	{r4, r5, pc}
   10b54:	mov	r0, r5
   10b58:	add	r2, sp, #3
   10b5c:	ldr	r1, [pc, #40]	; 10b8c <close@plt+0x448>
   10b60:	bl	10690 <ioctl@plt>
   10b64:	cmp	r0, #0
   10b68:	bne	10b38 <close@plt+0x3f4>
   10b6c:	ldrb	r0, [sp, #3]
   10b70:	sub	r0, r0, #1
   10b74:	cmp	r0, #1
   10b78:	movhi	r0, #0
   10b7c:	movls	r0, #1
   10b80:	b	10b3c <close@plt+0x3f8>
   10b84:	bl	10678 <__stack_chk_fail@plt>
   10b88:	andeq	r1, r2, r8, lsl #30
   10b8c:	andeq	r4, r0, r3, lsr fp
   10b90:	push	{r4, r5, r6, lr}
   10b94:	subs	r5, r0, #0
   10b98:	beq	10bbc <close@plt+0x478>
   10b9c:	bl	10acc <close@plt+0x388>
   10ba0:	subs	r4, r0, #0
   10ba4:	blt	10c54 <close@plt+0x510>
   10ba8:	bl	10b0c <close@plt+0x3c8>
   10bac:	cmp	r0, #0
   10bb0:	beq	10c4c <close@plt+0x508>
   10bb4:	mov	r0, r4
   10bb8:	pop	{r4, r5, r6, pc}
   10bbc:	ldr	r5, [pc, #196]	; 10c88 <close@plt+0x544>
   10bc0:	ldr	r0, [pc, #196]	; 10c8c <close@plt+0x548>
   10bc4:	b	10bd4 <close@plt+0x490>
   10bc8:	ldr	r0, [r5], #4
   10bcc:	cmp	r0, #0
   10bd0:	beq	10c00 <close@plt+0x4bc>
   10bd4:	bl	10acc <close@plt+0x388>
   10bd8:	subs	r4, r0, #0
   10bdc:	blt	10bc8 <close@plt+0x484>
   10be0:	bl	10b0c <close@plt+0x3c8>
   10be4:	cmp	r0, #0
   10be8:	bne	10bb4 <close@plt+0x470>
   10bec:	mov	r0, r4
   10bf0:	bl	10744 <close@plt>
   10bf4:	ldr	r0, [r5], #4
   10bf8:	cmp	r0, #0
   10bfc:	bne	10bd4 <close@plt+0x490>
   10c00:	mov	r4, r0
   10c04:	mov	r0, r4
   10c08:	bl	10b0c <close@plt+0x3c8>
   10c0c:	cmp	r0, #0
   10c10:	bne	10bb4 <close@plt+0x470>
   10c14:	add	r4, r4, #1
   10c18:	cmp	r4, #3
   10c1c:	bne	10c04 <close@plt+0x4c0>
   10c20:	ldr	r3, [pc, #104]	; 10c90 <close@plt+0x54c>
   10c24:	mov	r2, #5
   10c28:	ldr	r1, [pc, #100]	; 10c94 <close@plt+0x550>
   10c2c:	ldr	r4, [r3]
   10c30:	bl	1066c <dcgettext@plt>
   10c34:	mov	r1, #1
   10c38:	mov	r2, r0
   10c3c:	mov	r0, r4
   10c40:	bl	106fc <__fprintf_chk@plt>
   10c44:	mov	r0, #1
   10c48:	bl	106d8 <exit@plt>
   10c4c:	mov	r0, r4
   10c50:	bl	10744 <close@plt>
   10c54:	ldr	r3, [pc, #52]	; 10c90 <close@plt+0x54c>
   10c58:	mov	r2, #5
   10c5c:	ldr	r1, [pc, #52]	; 10c98 <close@plt+0x554>
   10c60:	mov	r0, #0
   10c64:	ldr	r4, [r3]
   10c68:	bl	1066c <dcgettext@plt>
   10c6c:	mov	r3, r5
   10c70:	mov	r1, #1
   10c74:	mov	r2, r0
   10c78:	mov	r0, r4
   10c7c:	bl	106fc <__fprintf_chk@plt>
   10c80:	mov	r0, #1
   10c84:	bl	106d8 <exit@plt>
   10c88:	andeq	r0, r1, r4, ror #31
   10c8c:	strdeq	r0, [r1], -ip
   10c90:	andeq	r2, r2, r0, ror r0
   10c94:	andeq	r1, r1, r0, lsr #32
   10c98:	andeq	r1, r1, ip
   10c9c:	push	{r1, r2, r3}
   10ca0:	push	{r4, r5, r6, r7, lr}
   10ca4:	sub	sp, sp, #8
   10ca8:	ldr	r5, [pc, #144]	; 10d40 <close@plt+0x5fc>
   10cac:	ldr	r4, [pc, #144]	; 10d44 <close@plt+0x600>
   10cb0:	ldr	r3, [pc, #144]	; 10d48 <close@plt+0x604>
   10cb4:	ldr	r1, [r5]
   10cb8:	ldr	r7, [sp, #28]
   10cbc:	add	ip, sp, #32
   10cc0:	mov	r6, r0
   10cc4:	ldr	r3, [r3]
   10cc8:	ldr	r2, [pc, #124]	; 10d4c <close@plt+0x608>
   10ccc:	str	r1, [sp, #4]
   10cd0:	ldr	r0, [r4]
   10cd4:	mov	r1, #1
   10cd8:	str	ip, [sp]
   10cdc:	bl	106fc <__fprintf_chk@plt>
   10ce0:	mov	r2, r7
   10ce4:	ldr	r0, [r4]
   10ce8:	ldr	r3, [sp]
   10cec:	mov	r1, #1
   10cf0:	bl	106b4 <__vfprintf_chk@plt>
   10cf4:	cmp	r6, #0
   10cf8:	ble	10d1c <close@plt+0x5d8>
   10cfc:	mov	r0, r6
   10d00:	ldr	r4, [r4]
   10d04:	bl	106a8 <strerror@plt>
   10d08:	ldr	r2, [pc, #64]	; 10d50 <close@plt+0x60c>
   10d0c:	mov	r1, #1
   10d10:	mov	r3, r0
   10d14:	mov	r0, r4
   10d18:	bl	106fc <__fprintf_chk@plt>
   10d1c:	ldr	r2, [sp, #4]
   10d20:	ldr	r3, [r5]
   10d24:	cmp	r2, r3
   10d28:	bne	10d3c <close@plt+0x5f8>
   10d2c:	add	sp, sp, #8
   10d30:	pop	{r4, r5, r6, r7, lr}
   10d34:	add	sp, sp, #12
   10d38:	bx	lr
   10d3c:	bl	10678 <__stack_chk_fail@plt>
   10d40:	andeq	r1, r2, r8, lsl #30
   10d44:	andeq	r2, r2, r0, ror r0
   10d48:	andeq	r2, r2, r8, ror r0
   10d4c:	muleq	r1, ip, r0
   10d50:	andeq	r1, r1, r4, lsr #1
   10d54:	push	{r2, r3}
   10d58:	mov	r5, r1
   10d5c:	ldr	r2, [pc, #124]	; 10de0 <close@plt+0x69c>
   10d60:	push	{r7, lr}
   10d64:	sub	sp, sp, #8
   10d68:	ldr	r4, [pc, #116]	; 10de4 <close@plt+0x6a0>
   10d6c:	ldr	r3, [pc, #116]	; 10de8 <close@plt+0x6a4>
   10d70:	ldr	lr, [r2]
   10d74:	ldr	r7, [sp, #16]
   10d78:	add	ip, sp, #20
   10d7c:	ldr	r3, [r3]
   10d80:	ldr	r2, [pc, #100]	; 10dec <close@plt+0x6a8>
   10d84:	mov	r1, #1
   10d88:	mov	r6, r0
   10d8c:	ldr	r0, [r4]
   10d90:	str	lr, [sp, #4]
   10d94:	str	ip, [sp]
   10d98:	bl	106fc <__fprintf_chk@plt>
   10d9c:	mov	r2, r7
   10da0:	ldr	r0, [r4]
   10da4:	ldr	r3, [sp]
   10da8:	mov	r1, #1
   10dac:	bl	106b4 <__vfprintf_chk@plt>
   10db0:	cmp	r5, #0
   10db4:	ble	10dd8 <close@plt+0x694>
   10db8:	mov	r0, r5
   10dbc:	ldr	r4, [r4]
   10dc0:	bl	106a8 <strerror@plt>
   10dc4:	ldr	r2, [pc, #36]	; 10df0 <close@plt+0x6ac>
   10dc8:	mov	r1, #1
   10dcc:	mov	r3, r0
   10dd0:	mov	r0, r4
   10dd4:	bl	106fc <__fprintf_chk@plt>
   10dd8:	mov	r0, r6
   10ddc:	bl	106d8 <exit@plt>
   10de0:	andeq	r1, r2, r8, lsl #30
   10de4:	andeq	r2, r2, r0, ror r0
   10de8:	andeq	r2, r2, r8, ror r0
   10dec:	muleq	r1, ip, r0
   10df0:	andeq	r1, r1, r4, lsr #1
   10df4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10df8:	mov	r7, r0
   10dfc:	ldr	r6, [pc, #72]	; 10e4c <close@plt+0x708>
   10e00:	ldr	r5, [pc, #72]	; 10e50 <close@plt+0x70c>
   10e04:	add	r6, pc, r6
   10e08:	add	r5, pc, r5
   10e0c:	sub	r6, r6, r5
   10e10:	mov	r8, r1
   10e14:	mov	r9, r2
   10e18:	bl	10634 <strcmp@plt-0x20>
   10e1c:	asrs	r6, r6, #2
   10e20:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e24:	mov	r4, #0
   10e28:	add	r4, r4, #1
   10e2c:	ldr	r3, [r5], #4
   10e30:	mov	r2, r9
   10e34:	mov	r1, r8
   10e38:	mov	r0, r7
   10e3c:	blx	r3
   10e40:	cmp	r6, r4
   10e44:	bne	10e28 <close@plt+0x6e4>
   10e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e4c:	strdeq	r1, [r1], -r8
   10e50:	strdeq	r1, [r1], -r0
   10e54:	bx	lr

Disassembly of section .fini:

00010e58 <.fini>:
   10e58:	push	{r3, lr}
   10e5c:	pop	{r3, pc}
