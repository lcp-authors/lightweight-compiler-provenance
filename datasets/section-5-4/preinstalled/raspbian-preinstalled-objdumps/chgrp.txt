
raspbian-preinstalled/chgrp:     file format elf32-littlearm


Disassembly of section .init:

000110c4 <.init>:
   110c4:	push	{r3, lr}
   110c8:	bl	11948 <__assert_fail@plt+0x51c>
   110cc:	pop	{r3, pc}

Disassembly of section .plt:

000110d0 <fstatfs64@plt-0x14>:
   110d0:	push	{lr}		; (str lr, [sp, #-4]!)
   110d4:	ldr	lr, [pc, #4]	; 110e0 <fstatfs64@plt-0x4>
   110d8:	add	lr, pc, lr
   110dc:	ldr	pc, [lr, #8]!
   110e0:	andeq	sl, r1, r0, lsr #30

000110e4 <fstatfs64@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3872]!	; 0xf20

000110f0 <calloc@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3864]!	; 0xf18

000110fc <endgrent@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3856]!	; 0xf10

00011108 <fputs_unlocked@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3848]!	; 0xf08

00011114 <raise@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3840]!	; 0xf00

00011120 <strcmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3832]!	; 0xef8

0001112c <getpwuid@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3824]!	; 0xef0

00011138 <fflush@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3816]!	; 0xee8

00011144 <memmove@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3808]!	; 0xee0

00011150 <free@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3800]!	; 0xed8

0001115c <__openat64_2@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3792]!	; 0xed0

00011168 <_exit@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3784]!	; 0xec8

00011174 <memcpy@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3776]!	; 0xec0

00011180 <mbsinit@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3768]!	; 0xeb8

0001118c <memcmp@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3760]!	; 0xeb0

00011198 <stpcpy@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3752]!	; 0xea8

000111a4 <dcgettext@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3744]!	; 0xea0

000111b0 <__stack_chk_fail@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3736]!	; 0xe98

000111bc <realloc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3728]!	; 0xe90

000111c8 <textdomain@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3720]!	; 0xe88

000111d4 <__fxstatat64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3712]!	; 0xe80

000111e0 <iswprint@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3704]!	; 0xe78

000111ec <__fxstat64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3696]!	; 0xe70

000111f8 <fwrite@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3688]!	; 0xe68

00011204 <lseek64@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3680]!	; 0xe60

00011210 <__ctype_get_mb_cur_max@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3672]!	; 0xe58

0001121c <strcpy@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3664]!	; 0xe50

00011228 <__fpending@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3656]!	; 0xe48

00011234 <mbrtowc@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3648]!	; 0xe40

00011240 <error@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3640]!	; 0xe38

0001124c <open64@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3632]!	; 0xe30

00011258 <malloc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3624]!	; 0xe28

00011264 <__libc_start_main@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3616]!	; 0xe20

00011270 <__freading@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3608]!	; 0xe18

0001127c <__gmon_start__@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3600]!	; 0xe10

00011288 <getopt_long@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3592]!	; 0xe08

00011294 <__ctype_b_loc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3584]!	; 0xe00

000112a0 <exit@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ac <strtoul@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112b8 <strlen@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3560]!	; 0xde8

000112c4 <strchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3552]!	; 0xde0

000112d0 <openat64@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112dc <fchown@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3536]!	; 0xdd0

000112e8 <__errno_location@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3528]!	; 0xdc8

000112f4 <__cxa_atexit@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3520]!	; 0xdc0

00011300 <memset@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3512]!	; 0xdb8

0001130c <__printf_chk@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3504]!	; 0xdb0

00011318 <fileno@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3496]!	; 0xda8

00011324 <__fprintf_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3488]!	; 0xda0

00011330 <fclose@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3480]!	; 0xd98

0001133c <fseeko64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #106496	; 0x1a000
   11344:	ldr	pc, [ip, #3472]!	; 0xd90

00011348 <fcntl64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #106496	; 0x1a000
   11350:	ldr	pc, [ip, #3464]!	; 0xd88

00011354 <setlocale@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3456]!	; 0xd80

00011360 <strrchr@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3448]!	; 0xd78

0001136c <nl_langinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3440]!	; 0xd70

00011378 <readdir64@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3432]!	; 0xd68

00011384 <fdopendir@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3424]!	; 0xd60

00011390 <dirfd@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3416]!	; 0xd58

0001139c <fchdir@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3408]!	; 0xd50

000113a8 <qsort@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3400]!	; 0xd48

000113b4 <fchownat@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3392]!	; 0xd40

000113c0 <bindtextdomain@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3384]!	; 0xd38

000113cc <__xstat64@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3376]!	; 0xd30

000113d8 <strncmp@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3368]!	; 0xd28

000113e4 <abort@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3360]!	; 0xd20

000113f0 <close@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3352]!	; 0xd18

000113fc <__lxstat64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3344]!	; 0xd10

00011408 <closedir@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3336]!	; 0xd08

00011414 <getgrgid@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3328]!	; 0xd00

00011420 <getgrnam@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3320]!	; 0xcf8

0001142c <__assert_fail@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3312]!	; 0xcf0

Disassembly of section .text:

00011438 <fts_open@@Base-0x5fd4>:
   11438:	ldr	r3, [pc, #1128]	; 118a8 <__assert_fail@plt+0x47c>
   1143c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11440:	sub	sp, sp, #164	; 0xa4
   11444:	ldr	r3, [r3]
   11448:	mov	r7, r0
   1144c:	ldr	r0, [r1]
   11450:	str	r3, [sp, #156]	; 0x9c
   11454:	mov	r5, r1
   11458:	bl	12d80 <__assert_fail@plt+0x1954>
   1145c:	ldr	r1, [pc, #1096]	; 118ac <__assert_fail@plt+0x480>
   11460:	mov	r0, #6
   11464:	bl	11354 <setlocale@plt>
   11468:	ldr	r1, [pc, #1088]	; 118b0 <__assert_fail@plt+0x484>
   1146c:	ldr	r0, [pc, #1088]	; 118b4 <__assert_fail@plt+0x488>
   11470:	bl	113c0 <bindtextdomain@plt>
   11474:	ldr	r0, [pc, #1080]	; 118b4 <__assert_fail@plt+0x488>
   11478:	bl	111c8 <textdomain@plt>
   1147c:	ldr	r0, [pc, #1076]	; 118b8 <__assert_fail@plt+0x48c>
   11480:	bl	19dd4 <fts_children@@Base+0x1d30>
   11484:	ldr	r9, [pc, #1072]	; 118bc <__assert_fail@plt+0x490>
   11488:	add	r0, sp, #24
   1148c:	ldr	r8, [pc, #1068]	; 118c0 <__assert_fail@plt+0x494>
   11490:	ldr	fp, [pc, #1068]	; 118c4 <__assert_fail@plt+0x498>
   11494:	ldr	sl, [pc, #1068]	; 118c8 <__assert_fail@plt+0x49c>
   11498:	bl	11e44 <__assert_fail@plt+0xa18>
   1149c:	mov	r6, #16
   114a0:	mvn	r3, #0
   114a4:	str	r3, [sp, #20]
   114a8:	mov	r3, #0
   114ac:	str	r3, [sp, #16]
   114b0:	mov	r4, #0
   114b4:	str	r4, [sp]
   114b8:	mov	r3, r9
   114bc:	mov	r2, r8
   114c0:	mov	r1, r5
   114c4:	mov	r0, r7
   114c8:	bl	11288 <getopt_long@plt>
   114cc:	cmn	r0, #1
   114d0:	beq	11614 <__assert_fail@plt+0x1e8>
   114d4:	cmp	r0, #99	; 0x63
   114d8:	beq	115fc <__assert_fail@plt+0x1d0>
   114dc:	ble	11504 <__assert_fail@plt+0xd8>
   114e0:	cmp	r0, #256	; 0x100
   114e4:	beq	115f0 <__assert_fail@plt+0x1c4>
   114e8:	bgt	1153c <__assert_fail@plt+0x110>
   114ec:	cmp	r0, #104	; 0x68
   114f0:	beq	115e0 <__assert_fail@plt+0x1b4>
   114f4:	cmp	r0, #118	; 0x76
   114f8:	bne	1152c <__assert_fail@plt+0x100>
   114fc:	str	r4, [sp, #24]
   11500:	b	114b0 <__assert_fail@plt+0x84>
   11504:	cmp	r0, #72	; 0x48
   11508:	beq	115e8 <__assert_fail@plt+0x1bc>
   1150c:	ble	11560 <__assert_fail@plt+0x134>
   11510:	cmp	r0, #80	; 0x50
   11514:	beq	115d8 <__assert_fail@plt+0x1ac>
   11518:	cmp	r0, #82	; 0x52
   1151c:	bne	11550 <__assert_fail@plt+0x124>
   11520:	mov	r3, #1
   11524:	strb	r3, [sp, #28]
   11528:	b	114b0 <__assert_fail@plt+0x84>
   1152c:	cmp	r0, #102	; 0x66
   11530:	beq	11608 <__assert_fail@plt+0x1dc>
   11534:	mov	r0, #1
   11538:	bl	119fc <__assert_fail@plt+0x5d0>
   1153c:	cmp	r0, fp
   11540:	beq	115cc <__assert_fail@plt+0x1a0>
   11544:	bge	115a0 <__assert_fail@plt+0x174>
   11548:	str	r4, [sp, #16]
   1154c:	b	114b0 <__assert_fail@plt+0x84>
   11550:	cmp	r0, #76	; 0x4c
   11554:	bne	11534 <__assert_fail@plt+0x108>
   11558:	mov	r6, #2
   1155c:	b	114b0 <__assert_fail@plt+0x84>
   11560:	cmn	r0, #3
   11564:	bne	115bc <__assert_fail@plt+0x190>
   11568:	ldr	r3, [pc, #860]	; 118cc <__assert_fail@plt+0x4a0>
   1156c:	ldr	r0, [pc, #860]	; 118d0 <__assert_fail@plt+0x4a4>
   11570:	ldr	r1, [pc, #860]	; 118d4 <__assert_fail@plt+0x4a8>
   11574:	ldr	r2, [pc, #860]	; 118d8 <__assert_fail@plt+0x4ac>
   11578:	str	r4, [sp, #8]
   1157c:	ldr	r0, [r0]
   11580:	ldr	r3, [r3]
   11584:	str	r1, [sp, #4]
   11588:	str	r2, [sp]
   1158c:	ldr	r1, [pc, #840]	; 118dc <__assert_fail@plt+0x4b0>
   11590:	ldr	r2, [pc, #840]	; 118e0 <__assert_fail@plt+0x4b4>
   11594:	bl	154b8 <__assert_fail@plt+0x408c>
   11598:	mov	r0, r4
   1159c:	bl	112a0 <exit@plt>
   115a0:	cmp	r0, sl
   115a4:	bne	11534 <__assert_fail@plt+0x108>
   115a8:	ldr	r3, [pc, #820]	; 118e4 <__assert_fail@plt+0x4b8>
   115ac:	ldr	r2, [pc, #820]	; 118e8 <__assert_fail@plt+0x4bc>
   115b0:	ldr	r3, [r3]
   115b4:	str	r3, [r2]
   115b8:	b	114b0 <__assert_fail@plt+0x84>
   115bc:	cmn	r0, #2
   115c0:	bne	11534 <__assert_fail@plt+0x108>
   115c4:	mov	r0, r4
   115c8:	bl	119fc <__assert_fail@plt+0x5d0>
   115cc:	mov	r3, #1
   115d0:	str	r3, [sp, #16]
   115d4:	b	114b0 <__assert_fail@plt+0x84>
   115d8:	mov	r6, #16
   115dc:	b	114b0 <__assert_fail@plt+0x84>
   115e0:	str	r4, [sp, #20]
   115e4:	b	114b0 <__assert_fail@plt+0x84>
   115e8:	mov	r6, #17
   115ec:	b	114b0 <__assert_fail@plt+0x84>
   115f0:	mov	r3, #1
   115f4:	str	r3, [sp, #20]
   115f8:	b	114b0 <__assert_fail@plt+0x84>
   115fc:	mov	r3, #1
   11600:	str	r3, [sp, #24]
   11604:	b	114b0 <__assert_fail@plt+0x84>
   11608:	mov	r3, #1
   1160c:	strb	r3, [sp, #37]	; 0x25
   11610:	b	114b0 <__assert_fail@plt+0x84>
   11614:	ldrb	r3, [sp, #28]
   11618:	cmp	r3, r4
   1161c:	bne	116dc <__assert_fail@plt+0x2b0>
   11620:	mov	r6, #16
   11624:	ldr	r2, [pc, #700]	; 118e8 <__assert_fail@plt+0x4bc>
   11628:	ldr	r4, [pc, #700]	; 118ec <__assert_fail@plt+0x4c0>
   1162c:	ldr	r3, [sp, #20]
   11630:	ldr	r8, [r2]
   11634:	adds	r3, r3, #0
   11638:	ldr	r2, [r4]
   1163c:	movne	r3, #1
   11640:	cmp	r8, #0
   11644:	strb	r3, [sp, #36]	; 0x24
   11648:	sub	r3, r7, r2
   1164c:	beq	11714 <__assert_fail@plt+0x2e8>
   11650:	cmp	r3, #0
   11654:	ble	11848 <__assert_fail@plt+0x41c>
   11658:	add	r2, sp, #48	; 0x30
   1165c:	mov	r1, r8
   11660:	mov	r0, #3
   11664:	bl	113cc <__xstat64@plt>
   11668:	cmp	r0, #0
   1166c:	bne	1180c <__assert_fail@plt+0x3e0>
   11670:	ldr	r7, [sp, #76]	; 0x4c
   11674:	mov	r0, r7
   11678:	bl	11e88 <__assert_fail@plt+0xa5c>
   1167c:	str	r0, [sp, #44]	; 0x2c
   11680:	ldrb	r3, [sp, #28]
   11684:	ldr	r2, [sp, #16]
   11688:	tst	r2, r3
   1168c:	bne	11764 <__assert_fail@plt+0x338>
   11690:	ldr	r0, [r4]
   11694:	mvn	r2, #0
   11698:	add	r3, sp, #24
   1169c:	str	r3, [sp, #8]
   116a0:	str	r2, [sp, #4]
   116a4:	mov	r3, r7
   116a8:	str	r2, [sp]
   116ac:	add	r0, r5, r0, lsl #2
   116b0:	orr	r1, r6, #1024	; 0x400
   116b4:	bl	11f40 <__assert_fail@plt+0xb14>
   116b8:	ldr	r3, [pc, #488]	; 118a8 <__assert_fail@plt+0x47c>
   116bc:	ldr	r2, [sp, #156]	; 0x9c
   116c0:	ldr	r3, [r3]
   116c4:	cmp	r2, r3
   116c8:	eor	r0, r0, #1
   116cc:	uxtb	r0, r0
   116d0:	bne	11808 <__assert_fail@plt+0x3dc>
   116d4:	add	sp, sp, #164	; 0xa4
   116d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116dc:	cmp	r6, #16
   116e0:	bne	11624 <__assert_fail@plt+0x1f8>
   116e4:	ldr	r3, [sp, #20]
   116e8:	cmp	r3, #1
   116ec:	strne	r4, [sp, #20]
   116f0:	bne	11624 <__assert_fail@plt+0x1f8>
   116f4:	mov	r2, #5
   116f8:	ldr	r1, [pc, #496]	; 118f0 <__assert_fail@plt+0x4c4>
   116fc:	mov	r0, r4
   11700:	bl	111a4 <dcgettext@plt>
   11704:	mov	r1, r4
   11708:	mov	r2, r0
   1170c:	ldr	r0, [sp, #20]
   11710:	bl	11240 <error@plt>
   11714:	cmp	r3, #1
   11718:	ble	11848 <__assert_fail@plt+0x41c>
   1171c:	ldr	r7, [r5, r2, lsl #2]
   11720:	add	r2, r2, #1
   11724:	str	r2, [r4]
   11728:	ldrb	r3, [r7]
   1172c:	cmp	r3, #0
   11730:	bne	117f8 <__assert_fail@plt+0x3cc>
   11734:	str	r8, [sp, #44]	; 0x2c
   11738:	ldrb	r3, [r7]
   1173c:	cmp	r3, #0
   11740:	mvneq	r7, #0
   11744:	beq	11680 <__assert_fail@plt+0x254>
   11748:	mov	r0, r7
   1174c:	bl	11420 <getgrnam@plt>
   11750:	subs	r8, r0, #0
   11754:	ldrne	r7, [r8, #8]
   11758:	beq	117a0 <__assert_fail@plt+0x374>
   1175c:	bl	110fc <endgrent@plt>
   11760:	b	11680 <__assert_fail@plt+0x254>
   11764:	ldr	r0, [pc, #392]	; 118f4 <__assert_fail@plt+0x4c8>
   11768:	bl	14ffc <__assert_fail@plt+0x3bd0>
   1176c:	cmp	r0, #0
   11770:	mov	r8, r0
   11774:	str	r0, [sp, #32]
   11778:	bne	11690 <__assert_fail@plt+0x264>
   1177c:	bl	112e8 <__errno_location@plt>
   11780:	ldr	r1, [pc, #368]	; 118f8 <__assert_fail@plt+0x4cc>
   11784:	mov	r2, #5
   11788:	ldr	r4, [r0]
   1178c:	mov	r0, r8
   11790:	bl	111a4 <dcgettext@plt>
   11794:	ldr	r1, [pc, #352]	; 118fc <__assert_fail@plt+0x4d0>
   11798:	mov	r5, r0
   1179c:	b	1182c <__assert_fail@plt+0x400>
   117a0:	ldr	r2, [pc, #260]	; 118ac <__assert_fail@plt+0x480>
   117a4:	mov	r0, r7
   117a8:	str	r2, [sp]
   117ac:	add	r3, sp, #48	; 0x30
   117b0:	mov	r2, #10
   117b4:	mov	r1, r8
   117b8:	bl	158c4 <__assert_fail@plt+0x4498>
   117bc:	cmp	r0, #0
   117c0:	ldreq	r7, [sp, #48]	; 0x30
   117c4:	beq	1175c <__assert_fail@plt+0x330>
   117c8:	mov	r2, #5
   117cc:	ldr	r1, [pc, #300]	; 11900 <__assert_fail@plt+0x4d4>
   117d0:	mov	r0, r8
   117d4:	bl	111a4 <dcgettext@plt>
   117d8:	mov	r4, r0
   117dc:	mov	r0, r7
   117e0:	bl	14fe4 <__assert_fail@plt+0x3bb8>
   117e4:	mov	r2, r4
   117e8:	mov	r1, r8
   117ec:	mov	r3, r0
   117f0:	mov	r0, #1
   117f4:	bl	11240 <error@plt>
   117f8:	mov	r0, r7
   117fc:	bl	157e8 <__assert_fail@plt+0x43bc>
   11800:	mov	r8, r0
   11804:	b	11734 <__assert_fail@plt+0x308>
   11808:	bl	111b0 <__stack_chk_fail@plt>
   1180c:	bl	112e8 <__errno_location@plt>
   11810:	ldr	r1, [pc, #224]	; 118f8 <__assert_fail@plt+0x4cc>
   11814:	mov	r2, #5
   11818:	ldr	r4, [r0]
   1181c:	mov	r0, #0
   11820:	bl	111a4 <dcgettext@plt>
   11824:	mov	r1, r8
   11828:	mov	r5, r0
   1182c:	mov	r0, #4
   11830:	bl	14d3c <__assert_fail@plt+0x3910>
   11834:	mov	r2, r5
   11838:	mov	r1, r4
   1183c:	mov	r3, r0
   11840:	mov	r0, #1
   11844:	bl	11240 <error@plt>
   11848:	cmp	r2, r7
   1184c:	mov	r2, #5
   11850:	blt	11874 <__assert_fail@plt+0x448>
   11854:	ldr	r1, [pc, #168]	; 11904 <__assert_fail@plt+0x4d8>
   11858:	mov	r0, #0
   1185c:	bl	111a4 <dcgettext@plt>
   11860:	mov	r1, #0
   11864:	mov	r2, r0
   11868:	mov	r0, r1
   1186c:	bl	11240 <error@plt>
   11870:	b	11534 <__assert_fail@plt+0x108>
   11874:	ldr	r1, [pc, #140]	; 11908 <__assert_fail@plt+0x4dc>
   11878:	mov	r0, #0
   1187c:	bl	111a4 <dcgettext@plt>
   11880:	sub	r7, r7, #-1073741823	; 0xc0000001
   11884:	mov	r4, r0
   11888:	ldr	r0, [r5, r7, lsl #2]
   1188c:	bl	14fe4 <__assert_fail@plt+0x3bb8>
   11890:	mov	r1, #0
   11894:	mov	r2, r4
   11898:	mov	r3, r0
   1189c:	mov	r0, r1
   118a0:	bl	11240 <error@plt>
   118a4:	b	11534 <__assert_fail@plt+0x108>
   118a8:	andeq	fp, r2, r8, lsl #30
   118ac:	andeq	sl, r1, r4, lsr #10
   118b0:	andeq	sl, r1, r8, lsl #14
   118b4:	andeq	sl, r1, ip, asr r6
   118b8:	andeq	r2, r1, r4, asr #24
   118bc:	andeq	r9, r1, r0, lsr lr
   118c0:	andeq	sl, r1, ip, lsr r7
   118c4:	andeq	r0, r0, r2, lsl #2
   118c8:	andeq	r0, r0, r3, lsl #2
   118cc:	andeq	ip, r2, r4, lsr r1
   118d0:	muleq	r2, r4, r1
   118d4:	andeq	sl, r1, ip, lsl r7
   118d8:	andeq	sl, r1, ip, lsr #14
   118dc:	andeq	r9, r1, r0, lsl #30
   118e0:	andeq	sl, r1, r8, asr r6
   118e4:	muleq	r2, r8, r1
   118e8:	andeq	ip, r2, r0, lsr #3
   118ec:	andeq	ip, r2, r8, lsl #3
   118f0:	andeq	sl, r1, r8, asr #14
   118f4:	andeq	ip, r2, r8, lsr #3
   118f8:	andeq	sl, r1, r0, lsr #15
   118fc:	ldrdeq	sl, [r1], -r4
   11900:	andeq	sl, r1, r0, asr #15
   11904:	andeq	sl, r1, r4, ror r7
   11908:	andeq	sl, r1, r4, lsl #15
   1190c:	mov	fp, #0
   11910:	mov	lr, #0
   11914:	pop	{r1}		; (ldr r1, [sp], #4)
   11918:	mov	r2, sp
   1191c:	push	{r2}		; (str r2, [sp, #-4]!)
   11920:	push	{r0}		; (str r0, [sp, #-4]!)
   11924:	ldr	ip, [pc, #16]	; 1193c <__assert_fail@plt+0x510>
   11928:	push	{ip}		; (str ip, [sp, #-4]!)
   1192c:	ldr	r0, [pc, #12]	; 11940 <__assert_fail@plt+0x514>
   11930:	ldr	r3, [pc, #12]	; 11944 <__assert_fail@plt+0x518>
   11934:	bl	11264 <__libc_start_main@plt>
   11938:	bl	113e4 <abort@plt>
   1193c:	ldrdeq	r9, [r1], -r0
   11940:	andeq	r1, r1, r8, lsr r4
   11944:	andeq	r9, r1, r0, ror sp
   11948:	ldr	r3, [pc, #20]	; 11964 <__assert_fail@plt+0x538>
   1194c:	ldr	r2, [pc, #20]	; 11968 <__assert_fail@plt+0x53c>
   11950:	add	r3, pc, r3
   11954:	ldr	r2, [r3, r2]
   11958:	cmp	r2, #0
   1195c:	bxeq	lr
   11960:	b	1127c <__gmon_start__@plt>
   11964:	andeq	sl, r1, r8, lsr #13
   11968:	andeq	r0, r0, r8, lsr #2
   1196c:	ldr	r0, [pc, #24]	; 1198c <__assert_fail@plt+0x560>
   11970:	ldr	r3, [pc, #24]	; 11990 <__assert_fail@plt+0x564>
   11974:	cmp	r3, r0
   11978:	bxeq	lr
   1197c:	ldr	r3, [pc, #16]	; 11994 <__assert_fail@plt+0x568>
   11980:	cmp	r3, #0
   11984:	bxeq	lr
   11988:	bx	r3
   1198c:	andeq	ip, r2, ip, ror r1
   11990:	andeq	ip, r2, ip, ror r1
   11994:	andeq	r0, r0, r0
   11998:	ldr	r0, [pc, #36]	; 119c4 <__assert_fail@plt+0x598>
   1199c:	ldr	r1, [pc, #36]	; 119c8 <__assert_fail@plt+0x59c>
   119a0:	sub	r1, r1, r0
   119a4:	asr	r1, r1, #2
   119a8:	add	r1, r1, r1, lsr #31
   119ac:	asrs	r1, r1, #1
   119b0:	bxeq	lr
   119b4:	ldr	r3, [pc, #16]	; 119cc <__assert_fail@plt+0x5a0>
   119b8:	cmp	r3, #0
   119bc:	bxeq	lr
   119c0:	bx	r3
   119c4:	andeq	ip, r2, ip, ror r1
   119c8:	andeq	ip, r2, ip, ror r1
   119cc:	andeq	r0, r0, r0
   119d0:	push	{r4, lr}
   119d4:	ldr	r4, [pc, #24]	; 119f4 <__assert_fail@plt+0x5c8>
   119d8:	ldrb	r3, [r4]
   119dc:	cmp	r3, #0
   119e0:	popne	{r4, pc}
   119e4:	bl	1196c <__assert_fail@plt+0x540>
   119e8:	mov	r3, #1
   119ec:	strb	r3, [r4]
   119f0:	pop	{r4, pc}
   119f4:	muleq	r2, ip, r1
   119f8:	b	11998 <__assert_fail@plt+0x56c>
   119fc:	ldr	r3, [pc, #856]	; 11d5c <__assert_fail@plt+0x930>
   11a00:	push	{r7, lr}
   11a04:	sub	sp, sp, #64	; 0x40
   11a08:	ldr	r3, [r3]
   11a0c:	subs	r4, r0, #0
   11a10:	str	r3, [sp, #60]	; 0x3c
   11a14:	beq	11a50 <__assert_fail@plt+0x624>
   11a18:	ldr	r3, [pc, #832]	; 11d60 <__assert_fail@plt+0x934>
   11a1c:	mov	r2, #5
   11a20:	ldr	r1, [pc, #828]	; 11d64 <__assert_fail@plt+0x938>
   11a24:	mov	r0, #0
   11a28:	ldr	r5, [r3]
   11a2c:	bl	111a4 <dcgettext@plt>
   11a30:	ldr	r3, [pc, #816]	; 11d68 <__assert_fail@plt+0x93c>
   11a34:	mov	r1, #1
   11a38:	ldr	r3, [r3]
   11a3c:	mov	r2, r0
   11a40:	mov	r0, r5
   11a44:	bl	11324 <__fprintf_chk@plt>
   11a48:	mov	r0, r4
   11a4c:	bl	112a0 <exit@plt>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #784]	; 11d6c <__assert_fail@plt+0x940>
   11a58:	bl	111a4 <dcgettext@plt>
   11a5c:	ldr	r6, [pc, #772]	; 11d68 <__assert_fail@plt+0x93c>
   11a60:	ldr	r5, [pc, #776]	; 11d70 <__assert_fail@plt+0x944>
   11a64:	ldr	r3, [r6]
   11a68:	mov	r2, r3
   11a6c:	mov	r1, r0
   11a70:	mov	r0, #1
   11a74:	bl	1130c <__printf_chk@plt>
   11a78:	mov	r2, #5
   11a7c:	ldr	r1, [pc, #752]	; 11d74 <__assert_fail@plt+0x948>
   11a80:	mov	r0, r4
   11a84:	bl	111a4 <dcgettext@plt>
   11a88:	ldr	r1, [r5]
   11a8c:	bl	11108 <fputs_unlocked@plt>
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #732]	; 11d78 <__assert_fail@plt+0x94c>
   11a98:	mov	r0, r4
   11a9c:	bl	111a4 <dcgettext@plt>
   11aa0:	ldr	r1, [r5]
   11aa4:	bl	11108 <fputs_unlocked@plt>
   11aa8:	mov	r2, #5
   11aac:	ldr	r1, [pc, #712]	; 11d7c <__assert_fail@plt+0x950>
   11ab0:	mov	r0, r4
   11ab4:	bl	111a4 <dcgettext@plt>
   11ab8:	ldr	r1, [r5]
   11abc:	bl	11108 <fputs_unlocked@plt>
   11ac0:	mov	r2, #5
   11ac4:	ldr	r1, [pc, #692]	; 11d80 <__assert_fail@plt+0x954>
   11ac8:	mov	r0, r4
   11acc:	bl	111a4 <dcgettext@plt>
   11ad0:	ldr	r1, [r5]
   11ad4:	bl	11108 <fputs_unlocked@plt>
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #672]	; 11d84 <__assert_fail@plt+0x958>
   11ae0:	mov	r0, r4
   11ae4:	bl	111a4 <dcgettext@plt>
   11ae8:	ldr	r1, [r5]
   11aec:	bl	11108 <fputs_unlocked@plt>
   11af0:	mov	r2, #5
   11af4:	ldr	r1, [pc, #652]	; 11d88 <__assert_fail@plt+0x95c>
   11af8:	mov	r0, r4
   11afc:	bl	111a4 <dcgettext@plt>
   11b00:	ldr	r1, [r5]
   11b04:	bl	11108 <fputs_unlocked@plt>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #632]	; 11d8c <__assert_fail@plt+0x960>
   11b10:	mov	r0, r4
   11b14:	bl	111a4 <dcgettext@plt>
   11b18:	ldr	r1, [r5]
   11b1c:	bl	11108 <fputs_unlocked@plt>
   11b20:	mov	r2, #5
   11b24:	ldr	r1, [pc, #612]	; 11d90 <__assert_fail@plt+0x964>
   11b28:	mov	r0, r4
   11b2c:	bl	111a4 <dcgettext@plt>
   11b30:	ldr	r1, [r5]
   11b34:	bl	11108 <fputs_unlocked@plt>
   11b38:	mov	r2, #5
   11b3c:	ldr	r1, [pc, #592]	; 11d94 <__assert_fail@plt+0x968>
   11b40:	mov	r0, r4
   11b44:	bl	111a4 <dcgettext@plt>
   11b48:	ldr	r1, [r5]
   11b4c:	bl	11108 <fputs_unlocked@plt>
   11b50:	mov	r2, #5
   11b54:	ldr	r1, [pc, #572]	; 11d98 <__assert_fail@plt+0x96c>
   11b58:	mov	r0, r4
   11b5c:	bl	111a4 <dcgettext@plt>
   11b60:	ldr	r1, [r5]
   11b64:	bl	11108 <fputs_unlocked@plt>
   11b68:	mov	r2, #5
   11b6c:	ldr	r1, [pc, #552]	; 11d9c <__assert_fail@plt+0x970>
   11b70:	mov	r0, r4
   11b74:	bl	111a4 <dcgettext@plt>
   11b78:	ldr	r3, [r6]
   11b7c:	mov	r2, r3
   11b80:	mov	r1, r0
   11b84:	mov	r0, #1
   11b88:	bl	1130c <__printf_chk@plt>
   11b8c:	ldr	lr, [pc, #524]	; 11da0 <__assert_fail@plt+0x974>
   11b90:	add	ip, sp, #4
   11b94:	ldm	lr!, {r0, r1, r2, r3}
   11b98:	stmia	ip!, {r0, r1, r2, r3}
   11b9c:	ldm	lr!, {r0, r1, r2, r3}
   11ba0:	ldr	r6, [sp, #4]
   11ba4:	stmia	ip!, {r0, r1, r2, r3}
   11ba8:	cmp	r6, #0
   11bac:	ldm	lr!, {r0, r1, r2, r3}
   11bb0:	addeq	r5, sp, #4
   11bb4:	stmia	ip!, {r0, r1, r2, r3}
   11bb8:	ldm	lr, {r0, r1}
   11bbc:	stm	ip, {r0, r1}
   11bc0:	beq	11bf0 <__assert_fail@plt+0x7c4>
   11bc4:	ldr	r7, [pc, #472]	; 11da4 <__assert_fail@plt+0x978>
   11bc8:	add	r5, sp, #4
   11bcc:	b	11bdc <__assert_fail@plt+0x7b0>
   11bd0:	ldr	r6, [r5, #8]!
   11bd4:	cmp	r6, #0
   11bd8:	beq	11bf0 <__assert_fail@plt+0x7c4>
   11bdc:	mov	r1, r6
   11be0:	mov	r0, r7
   11be4:	bl	11120 <strcmp@plt>
   11be8:	cmp	r0, #0
   11bec:	bne	11bd0 <__assert_fail@plt+0x7a4>
   11bf0:	ldr	r5, [r5, #4]
   11bf4:	mov	r2, #5
   11bf8:	cmp	r5, #0
   11bfc:	ldr	r1, [pc, #420]	; 11da8 <__assert_fail@plt+0x97c>
   11c00:	beq	11ca8 <__assert_fail@plt+0x87c>
   11c04:	mov	r0, #0
   11c08:	bl	111a4 <dcgettext@plt>
   11c0c:	ldr	r3, [pc, #408]	; 11dac <__assert_fail@plt+0x980>
   11c10:	ldr	r2, [pc, #408]	; 11db0 <__assert_fail@plt+0x984>
   11c14:	mov	r1, r0
   11c18:	mov	r0, #1
   11c1c:	bl	1130c <__printf_chk@plt>
   11c20:	mov	r1, #0
   11c24:	mov	r0, #5
   11c28:	bl	11354 <setlocale@plt>
   11c2c:	cmp	r0, #0
   11c30:	ldreq	r6, [pc, #364]	; 11da4 <__assert_fail@plt+0x978>
   11c34:	beq	11c50 <__assert_fail@plt+0x824>
   11c38:	mov	r2, #3
   11c3c:	ldr	r1, [pc, #368]	; 11db4 <__assert_fail@plt+0x988>
   11c40:	bl	113d8 <strncmp@plt>
   11c44:	ldr	r6, [pc, #344]	; 11da4 <__assert_fail@plt+0x978>
   11c48:	cmp	r0, #0
   11c4c:	bne	11d38 <__assert_fail@plt+0x90c>
   11c50:	mov	r2, #5
   11c54:	ldr	r1, [pc, #348]	; 11db8 <__assert_fail@plt+0x98c>
   11c58:	mov	r0, #0
   11c5c:	bl	111a4 <dcgettext@plt>
   11c60:	ldr	r3, [pc, #316]	; 11da4 <__assert_fail@plt+0x978>
   11c64:	ldr	r2, [pc, #320]	; 11dac <__assert_fail@plt+0x980>
   11c68:	mov	r1, r0
   11c6c:	mov	r0, #1
   11c70:	bl	1130c <__printf_chk@plt>
   11c74:	mov	r2, #5
   11c78:	ldr	r1, [pc, #316]	; 11dbc <__assert_fail@plt+0x990>
   11c7c:	mov	r0, #0
   11c80:	bl	111a4 <dcgettext@plt>
   11c84:	ldr	r2, [pc, #308]	; 11dc0 <__assert_fail@plt+0x994>
   11c88:	cmp	r5, r6
   11c8c:	ldr	r3, [pc, #304]	; 11dc4 <__assert_fail@plt+0x998>
   11c90:	movne	r3, r2
   11c94:	mov	r1, r0
   11c98:	mov	r2, r5
   11c9c:	mov	r0, #1
   11ca0:	bl	1130c <__printf_chk@plt>
   11ca4:	b	11a48 <__assert_fail@plt+0x61c>
   11ca8:	mov	r0, r5
   11cac:	bl	111a4 <dcgettext@plt>
   11cb0:	ldr	r3, [pc, #244]	; 11dac <__assert_fail@plt+0x980>
   11cb4:	ldr	r2, [pc, #244]	; 11db0 <__assert_fail@plt+0x984>
   11cb8:	mov	r1, r0
   11cbc:	mov	r0, #1
   11cc0:	bl	1130c <__printf_chk@plt>
   11cc4:	mov	r1, r5
   11cc8:	mov	r0, #5
   11ccc:	bl	11354 <setlocale@plt>
   11cd0:	cmp	r0, #0
   11cd4:	beq	11cec <__assert_fail@plt+0x8c0>
   11cd8:	mov	r2, #3
   11cdc:	ldr	r1, [pc, #208]	; 11db4 <__assert_fail@plt+0x988>
   11ce0:	bl	113d8 <strncmp@plt>
   11ce4:	cmp	r0, #0
   11ce8:	bne	11d30 <__assert_fail@plt+0x904>
   11cec:	mov	r2, #5
   11cf0:	ldr	r1, [pc, #192]	; 11db8 <__assert_fail@plt+0x98c>
   11cf4:	mov	r0, #0
   11cf8:	bl	111a4 <dcgettext@plt>
   11cfc:	ldr	r3, [pc, #160]	; 11da4 <__assert_fail@plt+0x978>
   11d00:	ldr	r2, [pc, #164]	; 11dac <__assert_fail@plt+0x980>
   11d04:	mov	r5, r3
   11d08:	mov	r1, r0
   11d0c:	mov	r0, #1
   11d10:	bl	1130c <__printf_chk@plt>
   11d14:	ldr	r1, [pc, #160]	; 11dbc <__assert_fail@plt+0x990>
   11d18:	mov	r2, #5
   11d1c:	mov	r0, #0
   11d20:	bl	111a4 <dcgettext@plt>
   11d24:	ldr	r3, [pc, #152]	; 11dc4 <__assert_fail@plt+0x998>
   11d28:	mov	r1, r0
   11d2c:	b	11c98 <__assert_fail@plt+0x86c>
   11d30:	ldr	r6, [pc, #108]	; 11da4 <__assert_fail@plt+0x978>
   11d34:	mov	r5, r6
   11d38:	mov	r2, #5
   11d3c:	ldr	r1, [pc, #132]	; 11dc8 <__assert_fail@plt+0x99c>
   11d40:	mov	r0, #0
   11d44:	bl	111a4 <dcgettext@plt>
   11d48:	ldr	r2, [pc, #84]	; 11da4 <__assert_fail@plt+0x978>
   11d4c:	mov	r1, r0
   11d50:	mov	r0, #1
   11d54:	bl	1130c <__printf_chk@plt>
   11d58:	b	11c50 <__assert_fail@plt+0x824>
   11d5c:	andeq	fp, r2, r8, lsl #30
   11d60:	muleq	r2, r0, r1
   11d64:	andeq	r9, r1, r8, lsl #30
   11d68:	andeq	ip, r2, r0, asr #3
   11d6c:	andeq	r9, r1, r0, lsr pc
   11d70:	muleq	r2, r4, r1
   11d74:	andeq	r9, r1, r8, lsl #31
   11d78:	strdeq	r9, [r1], -r4
   11d7c:	andeq	sl, r1, r0, asr #1
   11d80:	andeq	sl, r1, r8, lsr #3
   11d84:	andeq	sl, r1, r0, lsr #4
   11d88:	andeq	sl, r1, r0, lsr #5
   11d8c:	andeq	sl, r1, ip, lsl #6
   11d90:	andeq	sl, r1, r4, asr r3
   11d94:	andeq	sl, r1, r8, lsr #10
   11d98:	andeq	sl, r1, r8, asr r5
   11d9c:	muleq	r1, r0, r5
   11da0:	strdeq	r9, [r1], -r8
   11da4:	andeq	r9, r1, r0, lsl #30
   11da8:	andeq	sl, r1, r8, lsl r6
   11dac:	andeq	sl, r1, r0, lsr r6
   11db0:	andeq	sl, r1, r8, asr r6
   11db4:	andeq	sl, r1, r8, ror #12
   11db8:			; <UNDEFINED> instruction: 0x0001a6b4
   11dbc:	ldrdeq	sl, [r1], -r4
   11dc0:	andeq	sl, r1, r4, lsr #10
   11dc4:	andeq	sl, r1, r0, ror #15
   11dc8:	andeq	sl, r1, ip, ror #12
   11dcc:	subs	r3, r0, #0
   11dd0:	push	{r4, r5, r6, lr}
   11dd4:	beq	11e28 <__assert_fail@plt+0x9fc>
   11dd8:	cmp	r1, #0
   11ddc:	beq	11e34 <__assert_fail@plt+0xa08>
   11de0:	mov	r4, r1
   11de4:	mov	r5, r3
   11de8:	bl	112b8 <strlen@plt>
   11dec:	mov	r6, r0
   11df0:	mov	r0, r4
   11df4:	bl	112b8 <strlen@plt>
   11df8:	add	r0, r6, r0
   11dfc:	add	r0, r0, #2
   11e00:	bl	155bc <__assert_fail@plt+0x4190>
   11e04:	mov	r1, r5
   11e08:	mov	r6, r0
   11e0c:	bl	11198 <stpcpy@plt>
   11e10:	mov	r3, #58	; 0x3a
   11e14:	mov	r1, r4
   11e18:	strb	r3, [r0], #1
   11e1c:	bl	1121c <strcpy@plt>
   11e20:	mov	r0, r6
   11e24:	pop	{r4, r5, r6, pc}
   11e28:	cmp	r1, #0
   11e2c:	beq	11e3c <__assert_fail@plt+0xa10>
   11e30:	mov	r0, r1
   11e34:	pop	{r4, r5, r6, lr}
   11e38:	b	157e8 <__assert_fail@plt+0x43bc>
   11e3c:	mov	r6, r1
   11e40:	b	11e20 <__assert_fail@plt+0x9f4>
   11e44:	mov	r3, #0
   11e48:	mov	r1, #2
   11e4c:	mov	r2, #1
   11e50:	str	r1, [r0]
   11e54:	strh	r2, [r0, #12]
   11e58:	strb	r3, [r0, #4]
   11e5c:	str	r3, [r0, #8]
   11e60:	str	r3, [r0, #16]
   11e64:	str	r3, [r0, #20]
   11e68:	bx	lr
   11e6c:	push	{r4, lr}
   11e70:	mov	r4, r0
   11e74:	ldr	r0, [r0, #16]
   11e78:	bl	11150 <free@plt>
   11e7c:	ldr	r0, [r4, #20]
   11e80:	pop	{r4, lr}
   11e84:	b	11150 <free@plt>
   11e88:	push	{r4, r5, lr}
   11e8c:	sub	sp, sp, #36	; 0x24
   11e90:	ldr	r4, [pc, #72]	; 11ee0 <__assert_fail@plt+0xab4>
   11e94:	mov	r5, r0
   11e98:	ldr	r3, [r4]
   11e9c:	str	r3, [sp, #28]
   11ea0:	bl	11414 <getgrgid@plt>
   11ea4:	subs	r1, r0, #0
   11ea8:	beq	11ecc <__assert_fail@plt+0xaa0>
   11eac:	ldr	r0, [r1]
   11eb0:	bl	157e8 <__assert_fail@plt+0x43bc>
   11eb4:	ldr	r2, [sp, #28]
   11eb8:	ldr	r3, [r4]
   11ebc:	cmp	r2, r3
   11ec0:	bne	11edc <__assert_fail@plt+0xab0>
   11ec4:	add	sp, sp, #36	; 0x24
   11ec8:	pop	{r4, r5, pc}
   11ecc:	mov	r0, r5
   11ed0:	add	r2, sp, #4
   11ed4:	bl	12d1c <__assert_fail@plt+0x18f0>
   11ed8:	b	11eb0 <__assert_fail@plt+0xa84>
   11edc:	bl	111b0 <__stack_chk_fail@plt>
   11ee0:	andeq	fp, r2, r8, lsl #30
   11ee4:	push	{r4, r5, lr}
   11ee8:	sub	sp, sp, #36	; 0x24
   11eec:	ldr	r4, [pc, #72]	; 11f3c <__assert_fail@plt+0xb10>
   11ef0:	mov	r5, r0
   11ef4:	ldr	r3, [r4]
   11ef8:	str	r3, [sp, #28]
   11efc:	bl	1112c <getpwuid@plt>
   11f00:	subs	r1, r0, #0
   11f04:	beq	11f28 <__assert_fail@plt+0xafc>
   11f08:	ldr	r0, [r1]
   11f0c:	bl	157e8 <__assert_fail@plt+0x43bc>
   11f10:	ldr	r2, [sp, #28]
   11f14:	ldr	r3, [r4]
   11f18:	cmp	r2, r3
   11f1c:	bne	11f38 <__assert_fail@plt+0xb0c>
   11f20:	add	sp, sp, #36	; 0x24
   11f24:	pop	{r4, r5, pc}
   11f28:	mov	r0, r5
   11f2c:	add	r2, sp, #4
   11f30:	bl	12d1c <__assert_fail@plt+0x18f0>
   11f34:	b	11f0c <__assert_fail@plt+0xae0>
   11f38:	bl	111b0 <__stack_chk_fail@plt>
   11f3c:	andeq	fp, r2, r8, lsl #30
   11f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f44:	sub	sp, sp, #260	; 0x104
   11f48:	ldr	ip, [pc, #3180]	; 12bbc <__assert_fail@plt+0x1790>
   11f4c:	ldr	lr, [sp, #296]	; 0x128
   11f50:	ldr	r4, [sp, #300]	; 0x12c
   11f54:	ldr	ip, [ip]
   11f58:	and	lr, lr, r4
   11f5c:	cmn	lr, #1
   11f60:	str	lr, [sp, #16]
   11f64:	str	r2, [sp, #20]
   11f68:	str	r3, [sp, #36]	; 0x24
   11f6c:	str	ip, [sp, #252]	; 0xfc
   11f70:	ldr	r6, [sp, #304]	; 0x130
   11f74:	beq	12990 <__assert_fail@plt+0x1564>
   11f78:	mov	r2, #0
   11f7c:	bl	15844 <__assert_fail@plt+0x4418>
   11f80:	mov	r3, #1
   11f84:	str	r3, [sp, #12]
   11f88:	mov	fp, r0
   11f8c:	bl	112e8 <__errno_location@plt>
   11f90:	str	r0, [sp, #28]
   11f94:	mov	r0, fp
   11f98:	bl	17928 <fts_read@@Base>
   11f9c:	subs	r9, r0, #0
   11fa0:	beq	12290 <__assert_fail@plt+0xe64>
   11fa4:	ldrh	sl, [r9, #60]	; 0x3c
   11fa8:	ldr	r3, [r9, #28]
   11fac:	sub	r7, sl, #1
   11fb0:	str	r3, [sp, #8]
   11fb4:	cmp	r7, #9
   11fb8:	ldrls	pc, [pc, r7, lsl #2]
   11fbc:	b	1207c <__assert_fail@plt+0xc50>
   11fc0:	andeq	r2, r1, r4, ror #5
   11fc4:	andeq	r2, r1, ip, lsr #4
   11fc8:	andeq	r2, r1, ip, ror r0
   11fcc:	ldrdeq	r2, [r1], -r0
   11fd0:	andeq	r2, r1, ip, ror r0
   11fd4:	andeq	r2, r1, r0, ror r0
   11fd8:	andeq	r2, r1, r8, lsl r0
   11fdc:	andeq	r2, r1, ip, ror r0
   11fe0:	andeq	r2, r1, ip, ror r0
   11fe4:	andeq	r1, r1, r8, ror #31
   11fe8:	ldr	r3, [r9, #48]	; 0x30
   11fec:	cmp	r3, #0
   11ff0:	bne	12000 <__assert_fail@plt+0xbd4>
   11ff4:	ldr	r3, [r9, #16]
   11ff8:	cmp	r3, #0
   11ffc:	beq	12a64 <__assert_fail@plt+0x1638>
   12000:	ldrb	r4, [r6, #13]
   12004:	cmp	r4, #0
   12008:	bne	12024 <__assert_fail@plt+0xbf8>
   1200c:	mov	r2, #5
   12010:	ldr	r1, [pc, #2984]	; 12bc0 <__assert_fail@plt+0x1794>
   12014:	b	123e4 <__assert_fail@plt+0xfb8>
   12018:	ldrb	r4, [r6, #13]
   1201c:	cmp	r4, #0
   12020:	beq	12880 <__assert_fail@plt+0x1454>
   12024:	mov	r3, #0
   12028:	mov	r7, r3
   1202c:	mov	r5, r3
   12030:	str	r3, [sp, #12]
   12034:	ldr	r3, [r6]
   12038:	cmp	r3, #2
   1203c:	beq	12430 <__assert_fail@plt+0x1004>
   12040:	cmp	r3, #0
   12044:	bne	12430 <__assert_fail@plt+0x1004>
   12048:	cmp	r7, #0
   1204c:	moveq	r3, #3
   12050:	streq	r3, [sp, #32]
   12054:	bne	128a4 <__assert_fail@plt+0x1478>
   12058:	cmp	r5, #0
   1205c:	bne	12824 <__assert_fail@plt+0x13f8>
   12060:	ldr	sl, [r6, #16]
   12064:	ldr	r4, [r6, #20]
   12068:	mov	r8, r5
   1206c:	b	121c8 <__assert_fail@plt+0xd9c>
   12070:	ldrb	r3, [r6, #4]
   12074:	cmp	r3, #0
   12078:	beq	11f94 <__assert_fail@plt+0xb68>
   1207c:	ldr	r3, [sp, #16]
   12080:	ldr	r8, [r9, #24]
   12084:	cmn	r3, #1
   12088:	ldrb	r4, [r6, #12]
   1208c:	add	r5, r9, #72	; 0x48
   12090:	beq	125d0 <__assert_fail@plt+0x11a4>
   12094:	cmp	r4, #0
   12098:	beq	120ac <__assert_fail@plt+0xc80>
   1209c:	ldr	r3, [r9, #88]	; 0x58
   120a0:	and	r3, r3, #61440	; 0xf000
   120a4:	cmp	r3, #40960	; 0xa000
   120a8:	beq	12904 <__assert_fail@plt+0x14d8>
   120ac:	uxth	r7, r7
   120b0:	bic	sl, sl, #2
   120b4:	ldr	r3, [sp, #296]	; 0x128
   120b8:	cmp	sl, #4
   120bc:	cmpne	r7, #1
   120c0:	movls	r7, #1
   120c4:	movhi	r7, #0
   120c8:	cmn	r3, #1
   120cc:	beq	12478 <__assert_fail@plt+0x104c>
   120d0:	ldr	r3, [r5, #24]
   120d4:	ldr	r2, [sp, #296]	; 0x128
   120d8:	cmp	r2, r3
   120dc:	beq	12478 <__assert_fail@plt+0x104c>
   120e0:	cmp	r7, #0
   120e4:	beq	12838 <__assert_fail@plt+0x140c>
   120e8:	ldr	ip, [r6, #8]
   120ec:	cmp	ip, #0
   120f0:	beq	12bb4 <__assert_fail@plt+0x1788>
   120f4:	ldrd	r0, [r5, #96]	; 0x60
   120f8:	ldrd	r2, [ip]
   120fc:	cmp	r1, r3
   12100:	cmpeq	r0, r2
   12104:	moveq	lr, #0
   12108:	bne	12bb4 <__assert_fail@plt+0x1788>
   1210c:	ldrd	r0, [r5]
   12110:	ldrd	r2, [ip, #8]
   12114:	cmp	r1, r3
   12118:	cmpeq	r0, r2
   1211c:	beq	126f4 <__assert_fail@plt+0x12c8>
   12120:	cmp	lr, #0
   12124:	beq	12838 <__assert_fail@plt+0x140c>
   12128:	ldrb	r4, [r6, #12]
   1212c:	cmp	r4, #0
   12130:	ldr	sl, [fp, #32]
   12134:	bne	124c0 <__assert_fail@plt+0x1094>
   12138:	mov	r3, #256	; 0x100
   1213c:	str	r3, [sp]
   12140:	mov	r1, r8
   12144:	mov	r0, sl
   12148:	ldr	r3, [sp, #36]	; 0x24
   1214c:	ldr	r2, [sp, #20]
   12150:	bl	113b4 <fchownat@plt>
   12154:	cmp	r0, #0
   12158:	moveq	r0, #1
   1215c:	movne	r0, #0
   12160:	beq	12174 <__assert_fail@plt+0xd48>
   12164:	ldr	r3, [sp, #28]
   12168:	ldr	r3, [r3]
   1216c:	cmp	r3, #95	; 0x5f
   12170:	beq	129e0 <__assert_fail@plt+0x15b4>
   12174:	cmp	r0, #0
   12178:	beq	1256c <__assert_fail@plt+0x1140>
   1217c:	ldr	r3, [r6]
   12180:	cmp	r3, #2
   12184:	beq	12430 <__assert_fail@plt+0x1004>
   12188:	ldr	r2, [sp, #20]
   1218c:	cmn	r2, #1
   12190:	beq	12450 <__assert_fail@plt+0x1024>
   12194:	ldr	r0, [r5, #24]
   12198:	ldr	r2, [sp, #20]
   1219c:	cmp	r2, r0
   121a0:	movne	r3, #2
   121a4:	strne	r3, [sp, #32]
   121a8:	beq	12450 <__assert_fail@plt+0x1024>
   121ac:	bl	11ee4 <__assert_fail@plt+0xab8>
   121b0:	mov	r8, r0
   121b4:	ldr	r0, [r5, #28]
   121b8:	bl	11e88 <__assert_fail@plt+0xa5c>
   121bc:	ldr	sl, [r6, #16]
   121c0:	ldr	r4, [r6, #20]
   121c4:	mov	r5, r0
   121c8:	mov	r1, r4
   121cc:	mov	r0, sl
   121d0:	bl	11dcc <__assert_fail@plt+0x9a0>
   121d4:	cmp	sl, #0
   121d8:	str	r0, [sp, #24]
   121dc:	movne	r0, r8
   121e0:	moveq	r0, #0
   121e4:	cmp	r4, #0
   121e8:	movne	r1, r5
   121ec:	moveq	r1, #0
   121f0:	bl	11dcc <__assert_fail@plt+0x9a0>
   121f4:	ldr	r3, [sp, #32]
   121f8:	cmp	r3, #3
   121fc:	mov	r7, r0
   12200:	beq	12680 <__assert_fail@plt+0x1254>
   12204:	cmp	r3, #4
   12208:	beq	1260c <__assert_fail@plt+0x11e0>
   1220c:	cmp	sl, #0
   12210:	beq	12790 <__assert_fail@plt+0x1364>
   12214:	mov	r2, #5
   12218:	ldr	r1, [pc, #2468]	; 12bc4 <__assert_fail@plt+0x1798>
   1221c:	mov	r0, #0
   12220:	bl	111a4 <dcgettext@plt>
   12224:	str	r0, [sp, #32]
   12228:	b	12628 <__assert_fail@plt+0x11fc>
   1222c:	mov	r1, r9
   12230:	mov	r0, fp
   12234:	bl	1588c <__assert_fail@plt+0x4460>
   12238:	cmp	r0, #0
   1223c:	beq	1207c <__assert_fail@plt+0xc50>
   12240:	mov	r2, #5
   12244:	ldr	r1, [pc, #2428]	; 12bc8 <__assert_fail@plt+0x179c>
   12248:	mov	r0, #0
   1224c:	bl	111a4 <dcgettext@plt>
   12250:	ldr	r2, [sp, #8]
   12254:	mov	r1, #3
   12258:	mov	r4, r0
   1225c:	mov	r0, #0
   12260:	bl	14e18 <__assert_fail@plt+0x39ec>
   12264:	mov	r1, #0
   12268:	mov	r2, r4
   1226c:	mov	r3, r0
   12270:	mov	r0, r1
   12274:	bl	11240 <error@plt>
   12278:	mov	r3, #0
   1227c:	mov	r0, fp
   12280:	str	r3, [sp, #12]
   12284:	bl	17928 <fts_read@@Base>
   12288:	subs	r9, r0, #0
   1228c:	bne	11fa4 <__assert_fail@plt+0xb78>
   12290:	ldr	r3, [sp, #28]
   12294:	ldr	r4, [r3]
   12298:	cmp	r4, #0
   1229c:	beq	122b4 <__assert_fail@plt+0xe88>
   122a0:	ldrb	r3, [r6, #13]
   122a4:	cmp	r3, #0
   122a8:	str	r3, [sp, #12]
   122ac:	strne	r9, [sp, #12]
   122b0:	beq	12a24 <__assert_fail@plt+0x15f8>
   122b4:	mov	r0, fp
   122b8:	bl	177a8 <fts_close@@Base>
   122bc:	cmp	r0, #0
   122c0:	bne	129ac <__assert_fail@plt+0x1580>
   122c4:	ldr	r3, [pc, #2288]	; 12bbc <__assert_fail@plt+0x1790>
   122c8:	ldr	r2, [sp, #252]	; 0xfc
   122cc:	ldr	r0, [sp, #12]
   122d0:	ldr	r3, [r3]
   122d4:	cmp	r2, r3
   122d8:	bne	12bb0 <__assert_fail@plt+0x1784>
   122dc:	add	sp, sp, #260	; 0x104
   122e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122e4:	ldrb	r3, [r6, #4]
   122e8:	cmp	r3, #0
   122ec:	beq	1207c <__assert_fail@plt+0xc50>
   122f0:	ldr	ip, [r6, #8]
   122f4:	cmp	ip, #0
   122f8:	beq	11f94 <__assert_fail@plt+0xb68>
   122fc:	ldrd	r0, [r9, #168]	; 0xa8
   12300:	ldrd	r2, [ip]
   12304:	cmp	r1, r3
   12308:	cmpeq	r0, r2
   1230c:	bne	11f94 <__assert_fail@plt+0xb68>
   12310:	ldrd	r2, [r9, #72]	; 0x48
   12314:	ldrd	r0, [ip, #8]
   12318:	cmp	r3, r1
   1231c:	cmpeq	r2, r0
   12320:	bne	11f94 <__assert_fail@plt+0xb68>
   12324:	ldr	r7, [sp, #8]
   12328:	ldr	r1, [pc, #2204]	; 12bcc <__assert_fail@plt+0x17a0>
   1232c:	mov	r0, r7
   12330:	bl	11120 <strcmp@plt>
   12334:	mov	r2, #5
   12338:	subs	r4, r0, #0
   1233c:	beq	12b20 <__assert_fail@plt+0x16f4>
   12340:	ldr	r1, [pc, #2184]	; 12bd0 <__assert_fail@plt+0x17a4>
   12344:	mov	r0, #0
   12348:	bl	111a4 <dcgettext@plt>
   1234c:	ldr	r2, [sp, #8]
   12350:	mov	r1, #4
   12354:	mov	r4, r0
   12358:	mov	r0, #0
   1235c:	bl	14c88 <__assert_fail@plt+0x385c>
   12360:	ldr	r2, [pc, #2148]	; 12bcc <__assert_fail@plt+0x17a0>
   12364:	mov	r1, #4
   12368:	mov	r5, r0
   1236c:	mov	r0, #1
   12370:	bl	14c88 <__assert_fail@plt+0x385c>
   12374:	mov	r1, #0
   12378:	mov	r3, r5
   1237c:	mov	r2, r4
   12380:	str	r0, [sp]
   12384:	mov	r0, r1
   12388:	bl	11240 <error@plt>
   1238c:	mov	r2, #5
   12390:	ldr	r1, [pc, #2108]	; 12bd4 <__assert_fail@plt+0x17a8>
   12394:	mov	r0, #0
   12398:	bl	111a4 <dcgettext@plt>
   1239c:	mov	r1, #0
   123a0:	mov	r2, r0
   123a4:	mov	r0, r1
   123a8:	bl	11240 <error@plt>
   123ac:	mov	r1, r9
   123b0:	mov	r2, #4
   123b4:	mov	r0, fp
   123b8:	bl	18070 <fts_set@@Base>
   123bc:	mov	r0, fp
   123c0:	bl	17928 <fts_read@@Base>
   123c4:	mov	r3, #0
   123c8:	str	r3, [sp, #12]
   123cc:	b	11f94 <__assert_fail@plt+0xb68>
   123d0:	ldrb	r4, [r6, #13]
   123d4:	cmp	r4, #0
   123d8:	bne	12024 <__assert_fail@plt+0xbf8>
   123dc:	ldr	r1, [pc, #2036]	; 12bd8 <__assert_fail@plt+0x17ac>
   123e0:	mov	r2, #5
   123e4:	mov	r0, r4
   123e8:	ldr	r5, [r9, #32]
   123ec:	bl	111a4 <dcgettext@plt>
   123f0:	ldr	r1, [sp, #8]
   123f4:	mov	r7, r0
   123f8:	mov	r0, #4
   123fc:	bl	14d3c <__assert_fail@plt+0x3910>
   12400:	mov	r2, r7
   12404:	mov	r1, r5
   12408:	mov	r3, r0
   1240c:	mov	r0, r4
   12410:	bl	11240 <error@plt>
   12414:	ldr	r3, [r6]
   12418:	mov	r5, r4
   1241c:	cmp	r3, #2
   12420:	str	r4, [sp, #12]
   12424:	mov	r7, r4
   12428:	mov	r4, #1
   1242c:	bne	12040 <__assert_fail@plt+0xc14>
   12430:	ldrb	r3, [r6, #4]
   12434:	cmp	r3, #0
   12438:	bne	11f94 <__assert_fail@plt+0xb68>
   1243c:	mov	r1, r9
   12440:	mov	r2, #4
   12444:	mov	r0, fp
   12448:	bl	18070 <fts_set@@Base>
   1244c:	b	11f94 <__assert_fail@plt+0xb68>
   12450:	ldr	r1, [sp, #36]	; 0x24
   12454:	cmn	r1, #1
   12458:	beq	12814 <__assert_fail@plt+0x13e8>
   1245c:	ldr	r2, [r5, #28]
   12460:	cmp	r1, r2
   12464:	beq	12814 <__assert_fail@plt+0x13e8>
   12468:	mov	r3, #2
   1246c:	ldr	r0, [r5, #24]
   12470:	str	r3, [sp, #32]
   12474:	b	121ac <__assert_fail@plt+0xd80>
   12478:	ldr	r3, [sp, #300]	; 0x12c
   1247c:	cmn	r3, #1
   12480:	beq	126b8 <__assert_fail@plt+0x128c>
   12484:	ldr	lr, [r5, #28]
   12488:	cmp	r7, #0
   1248c:	sub	lr, lr, r3
   12490:	clz	lr, lr
   12494:	lsr	lr, lr, #5
   12498:	beq	12120 <__assert_fail@plt+0xcf4>
   1249c:	ldr	ip, [r6, #8]
   124a0:	cmp	ip, #0
   124a4:	beq	12120 <__assert_fail@plt+0xcf4>
   124a8:	ldrd	r0, [r5, #96]	; 0x60
   124ac:	ldrd	r2, [ip]
   124b0:	cmp	r1, r3
   124b4:	cmpeq	r0, r2
   124b8:	bne	12120 <__assert_fail@plt+0xcf4>
   124bc:	b	1210c <__assert_fail@plt+0xce0>
   124c0:	ldr	r3, [sp, #16]
   124c4:	cmn	r3, #1
   124c8:	beq	12858 <__assert_fail@plt+0x142c>
   124cc:	ldr	r3, [r5, #16]
   124d0:	and	r3, r3, #61440	; 0xf000
   124d4:	cmp	r3, #32768	; 0x8000
   124d8:	beq	1282c <__assert_fail@plt+0x1400>
   124dc:	cmp	r3, #16384	; 0x4000
   124e0:	moveq	r3, #18688	; 0x4900
   124e4:	streq	r3, [sp, #24]
   124e8:	bne	12858 <__assert_fail@plt+0x142c>
   124ec:	ldr	r2, [sp, #24]
   124f0:	mov	r1, r8
   124f4:	mov	r0, sl
   124f8:	bl	1115c <__openat64_2@plt>
   124fc:	subs	r7, r0, #0
   12500:	bge	12540 <__assert_fail@plt+0x1114>
   12504:	ldr	r3, [sp, #28]
   12508:	ldr	r3, [r3]
   1250c:	cmp	r3, #13
   12510:	bne	1256c <__assert_fail@plt+0x1140>
   12514:	ldr	r3, [r5, #16]
   12518:	and	r3, r3, #61440	; 0xf000
   1251c:	cmp	r3, #32768	; 0x8000
   12520:	bne	12854 <__assert_fail@plt+0x1428>
   12524:	ldr	r3, [sp, #24]
   12528:	mov	r0, sl
   1252c:	orr	r2, r3, #1
   12530:	mov	r1, r8
   12534:	bl	1115c <__openat64_2@plt>
   12538:	subs	r7, r0, #0
   1253c:	blt	12844 <__assert_fail@plt+0x1418>
   12540:	add	r2, sp, #144	; 0x90
   12544:	mov	r1, r7
   12548:	mov	r0, #3
   1254c:	bl	111ec <__fxstat64@plt>
   12550:	subs	ip, r0, #0
   12554:	beq	127b8 <__assert_fail@plt+0x138c>
   12558:	ldr	r8, [sp, #28]
   1255c:	mov	r0, r7
   12560:	ldr	r4, [r8]
   12564:	bl	113f0 <close@plt>
   12568:	str	r4, [r8]
   1256c:	ldrb	r4, [r6, #13]
   12570:	cmp	r4, #0
   12574:	bne	126a8 <__assert_fail@plt+0x127c>
   12578:	ldr	r3, [sp, #20]
   1257c:	mov	r2, #5
   12580:	cmn	r3, #1
   12584:	ldr	r3, [sp, #28]
   12588:	ldrne	r1, [pc, #1612]	; 12bdc <__assert_fail@plt+0x17b0>
   1258c:	ldreq	r1, [pc, #1612]	; 12be0 <__assert_fail@plt+0x17b4>
   12590:	mov	r0, r4
   12594:	ldr	r7, [r3]
   12598:	bl	111a4 <dcgettext@plt>
   1259c:	ldr	r1, [sp, #8]
   125a0:	mov	r4, r0
   125a4:	mov	r0, #4
   125a8:	bl	14d3c <__assert_fail@plt+0x3910>
   125ac:	mov	r2, r4
   125b0:	mov	r1, r7
   125b4:	mov	r4, #1
   125b8:	mov	r3, r0
   125bc:	mov	r0, #0
   125c0:	mov	r7, r0
   125c4:	str	r0, [sp, #12]
   125c8:	bl	11240 <error@plt>
   125cc:	b	12034 <__assert_fail@plt+0xc08>
   125d0:	ldr	r3, [r6]
   125d4:	cmp	r3, #2
   125d8:	bne	12094 <__assert_fail@plt+0xc68>
   125dc:	ldr	r3, [r6, #8]
   125e0:	cmp	r3, #0
   125e4:	bne	12094 <__assert_fail@plt+0xc68>
   125e8:	cmp	r4, #0
   125ec:	bne	1209c <__assert_fail@plt+0xc70>
   125f0:	bic	sl, sl, #2
   125f4:	uxth	r7, r7
   125f8:	cmp	sl, #4
   125fc:	cmpne	r7, #1
   12600:	ldrls	sl, [fp, #32]
   12604:	bls	12138 <__assert_fail@plt+0xd0c>
   12608:	b	1212c <__assert_fail@plt+0xd00>
   1260c:	cmp	sl, #0
   12610:	beq	12768 <__assert_fail@plt+0x133c>
   12614:	mov	r2, #5
   12618:	ldr	r1, [pc, #1476]	; 12be4 <__assert_fail@plt+0x17b8>
   1261c:	mov	r0, #0
   12620:	bl	111a4 <dcgettext@plt>
   12624:	str	r0, [sp, #32]
   12628:	ldr	r1, [sp, #8]
   1262c:	mov	r0, #4
   12630:	bl	14d3c <__assert_fail@plt+0x3910>
   12634:	ldr	r4, [sp, #24]
   12638:	ldr	r1, [sp, #32]
   1263c:	mov	r3, r7
   12640:	str	r4, [sp]
   12644:	mov	r2, r0
   12648:	mov	r0, #1
   1264c:	bl	1130c <__printf_chk@plt>
   12650:	mov	r0, r7
   12654:	bl	11150 <free@plt>
   12658:	mov	r0, r4
   1265c:	bl	11150 <free@plt>
   12660:	mov	r0, r8
   12664:	bl	11150 <free@plt>
   12668:	mov	r0, r5
   1266c:	bl	11150 <free@plt>
   12670:	ldrb	r3, [r6, #4]
   12674:	cmp	r3, #0
   12678:	bne	11f94 <__assert_fail@plt+0xb68>
   1267c:	b	1243c <__assert_fail@plt+0x1010>
   12680:	cmp	r0, #0
   12684:	beq	129ec <__assert_fail@plt+0x15c0>
   12688:	cmp	sl, #0
   1268c:	beq	127ec <__assert_fail@plt+0x13c0>
   12690:	mov	r2, #5
   12694:	ldr	r1, [pc, #1356]	; 12be8 <__assert_fail@plt+0x17bc>
   12698:	mov	r0, #0
   1269c:	bl	111a4 <dcgettext@plt>
   126a0:	str	r0, [sp, #32]
   126a4:	b	12628 <__assert_fail@plt+0x11fc>
   126a8:	mov	r3, #0
   126ac:	str	r3, [sp, #12]
   126b0:	mov	r7, r3
   126b4:	b	12034 <__assert_fail@plt+0xc08>
   126b8:	cmp	r7, #0
   126bc:	beq	12128 <__assert_fail@plt+0xcfc>
   126c0:	ldr	ip, [r6, #8]
   126c4:	cmp	ip, #0
   126c8:	beq	12128 <__assert_fail@plt+0xcfc>
   126cc:	ldrd	r0, [r5, #96]	; 0x60
   126d0:	ldrd	r2, [ip]
   126d4:	cmp	r1, r3
   126d8:	cmpeq	r0, r2
   126dc:	bne	12128 <__assert_fail@plt+0xcfc>
   126e0:	ldrd	r2, [r5]
   126e4:	ldrd	r0, [ip, #8]
   126e8:	cmp	r3, r1
   126ec:	cmpeq	r2, r0
   126f0:	bne	12128 <__assert_fail@plt+0xcfc>
   126f4:	ldr	r7, [sp, #8]
   126f8:	ldr	r1, [pc, #1228]	; 12bcc <__assert_fail@plt+0x17a0>
   126fc:	mov	r0, r7
   12700:	bl	11120 <strcmp@plt>
   12704:	mov	r2, #5
   12708:	subs	r4, r0, #0
   1270c:	bne	12ad0 <__assert_fail@plt+0x16a4>
   12710:	ldr	r1, [pc, #1236]	; 12bec <__assert_fail@plt+0x17c0>
   12714:	bl	111a4 <dcgettext@plt>
   12718:	mov	r1, r7
   1271c:	mov	r5, r0
   12720:	mov	r0, #4
   12724:	bl	14d3c <__assert_fail@plt+0x3910>
   12728:	mov	r2, r5
   1272c:	mov	r1, r4
   12730:	mov	r3, r0
   12734:	mov	r0, r4
   12738:	bl	11240 <error@plt>
   1273c:	mov	r2, #5
   12740:	ldr	r1, [pc, #1164]	; 12bd4 <__assert_fail@plt+0x17a8>
   12744:	mov	r0, #0
   12748:	bl	111a4 <dcgettext@plt>
   1274c:	mov	r1, #0
   12750:	mov	r2, r0
   12754:	mov	r0, r1
   12758:	bl	11240 <error@plt>
   1275c:	mov	r3, #0
   12760:	str	r3, [sp, #12]
   12764:	b	11f94 <__assert_fail@plt+0xb68>
   12768:	cmp	r4, #0
   1276c:	movne	r0, sl
   12770:	movne	r2, #5
   12774:	ldrne	r1, [pc, #1140]	; 12bf0 <__assert_fail@plt+0x17c4>
   12778:	moveq	r0, r4
   1277c:	moveq	r2, #5
   12780:	ldreq	r1, [pc, #1132]	; 12bf4 <__assert_fail@plt+0x17c8>
   12784:	bl	111a4 <dcgettext@plt>
   12788:	str	r0, [sp, #32]
   1278c:	b	12628 <__assert_fail@plt+0x11fc>
   12790:	cmp	r4, #0
   12794:	movne	r0, sl
   12798:	movne	r2, #5
   1279c:	ldrne	r1, [pc, #1108]	; 12bf8 <__assert_fail@plt+0x17cc>
   127a0:	moveq	r0, r4
   127a4:	moveq	r2, #5
   127a8:	ldreq	r1, [pc, #1100]	; 12bfc <__assert_fail@plt+0x17d0>
   127ac:	bl	111a4 <dcgettext@plt>
   127b0:	str	r0, [sp, #32]
   127b4:	b	12628 <__assert_fail@plt+0x11fc>
   127b8:	ldrd	r0, [r5, #96]	; 0x60
   127bc:	ldrd	r2, [sp, #240]	; 0xf0
   127c0:	cmp	r1, r3
   127c4:	cmpeq	r0, r2
   127c8:	beq	12a7c <__assert_fail@plt+0x1650>
   127cc:	ldr	sl, [sp, #28]
   127d0:	mov	r0, r7
   127d4:	str	ip, [sp, #12]
   127d8:	ldr	r8, [sl]
   127dc:	mov	r7, ip
   127e0:	bl	113f0 <close@plt>
   127e4:	str	r8, [sl]
   127e8:	b	12034 <__assert_fail@plt+0xc08>
   127ec:	cmp	r4, #0
   127f0:	movne	r0, sl
   127f4:	movne	r2, #5
   127f8:	ldrne	r1, [pc, #1024]	; 12c00 <__assert_fail@plt+0x17d4>
   127fc:	moveq	r0, r4
   12800:	moveq	r2, #5
   12804:	ldreq	r1, [pc, #1016]	; 12c04 <__assert_fail@plt+0x17d8>
   12808:	bl	111a4 <dcgettext@plt>
   1280c:	str	r0, [sp, #32]
   12810:	b	12628 <__assert_fail@plt+0x11fc>
   12814:	cmp	r3, #0
   12818:	bne	12430 <__assert_fail@plt+0x1004>
   1281c:	mov	r3, #4
   12820:	str	r3, [sp, #32]
   12824:	ldr	r0, [r5, #24]
   12828:	b	121ac <__assert_fail@plt+0xd80>
   1282c:	mov	r3, #2304	; 0x900
   12830:	str	r3, [sp, #24]
   12834:	b	124ec <__assert_fail@plt+0x10c0>
   12838:	mov	r4, #1
   1283c:	mov	r7, r4
   12840:	b	12034 <__assert_fail@plt+0xc08>
   12844:	ldr	r3, [sp, #28]
   12848:	ldr	r3, [r3]
   1284c:	cmp	r3, #13
   12850:	bne	1256c <__assert_fail@plt+0x1140>
   12854:	ldr	sl, [fp, #32]
   12858:	mov	r3, #0
   1285c:	str	r3, [sp]
   12860:	mov	r1, r8
   12864:	mov	r0, sl
   12868:	ldr	r3, [sp, #36]	; 0x24
   1286c:	ldr	r2, [sp, #20]
   12870:	bl	113b4 <fchownat@plt>
   12874:	clz	r0, r0
   12878:	lsr	r0, r0, #5
   1287c:	b	12174 <__assert_fail@plt+0xd48>
   12880:	ldr	r2, [sp, #8]
   12884:	mov	r1, #3
   12888:	mov	r0, r4
   1288c:	ldr	r5, [r9, #32]
   12890:	bl	14e18 <__assert_fail@plt+0x39ec>
   12894:	mov	r1, r5
   12898:	ldr	r2, [pc, #872]	; 12c08 <__assert_fail@plt+0x17dc>
   1289c:	mov	r3, r0
   128a0:	b	1240c <__assert_fail@plt+0xfe0>
   128a4:	cmp	r4, #0
   128a8:	bne	12ac4 <__assert_fail@plt+0x1698>
   128ac:	cmp	r5, #0
   128b0:	moveq	r8, r5
   128b4:	beq	128d0 <__assert_fail@plt+0x14a4>
   128b8:	ldr	r0, [r5, #24]
   128bc:	bl	11ee4 <__assert_fail@plt+0xab8>
   128c0:	mov	r8, r0
   128c4:	ldr	r0, [r5, #28]
   128c8:	bl	11e88 <__assert_fail@plt+0xa5c>
   128cc:	mov	r5, r0
   128d0:	mov	r2, #5
   128d4:	ldr	r1, [pc, #816]	; 12c0c <__assert_fail@plt+0x17e0>
   128d8:	mov	r0, #0
   128dc:	bl	111a4 <dcgettext@plt>
   128e0:	ldr	r1, [sp, #8]
   128e4:	mov	r4, r0
   128e8:	mov	r0, #4
   128ec:	bl	14d3c <__assert_fail@plt+0x3910>
   128f0:	mov	r1, r4
   128f4:	mov	r2, r0
   128f8:	mov	r0, #1
   128fc:	bl	1130c <__printf_chk@plt>
   12900:	b	12660 <__assert_fail@plt+0x1234>
   12904:	mov	r5, #0
   12908:	ldr	r1, [fp, #32]
   1290c:	add	r3, sp, #40	; 0x28
   12910:	str	r5, [sp]
   12914:	mov	r2, r8
   12918:	mov	r0, #3
   1291c:	bl	111d4 <__fxstatat64@plt>
   12920:	cmp	r0, r5
   12924:	beq	12a14 <__assert_fail@plt+0x15e8>
   12928:	ldrb	r4, [r6, #13]
   1292c:	cmp	r4, #0
   12930:	movne	r7, r5
   12934:	strne	r7, [sp, #12]
   12938:	addne	r5, sp, #40	; 0x28
   1293c:	bne	12034 <__assert_fail@plt+0xc08>
   12940:	ldr	r3, [sp, #28]
   12944:	mov	r2, #5
   12948:	ldr	r1, [pc, #704]	; 12c10 <__assert_fail@plt+0x17e4>
   1294c:	mov	r0, r4
   12950:	ldr	r5, [r3]
   12954:	bl	111a4 <dcgettext@plt>
   12958:	ldr	r1, [sp, #8]
   1295c:	mov	r7, r0
   12960:	mov	r0, #4
   12964:	bl	14d3c <__assert_fail@plt+0x3910>
   12968:	mov	r2, r7
   1296c:	mov	r1, r5
   12970:	str	r4, [sp, #12]
   12974:	mov	r7, r4
   12978:	add	r5, sp, #40	; 0x28
   1297c:	mov	r3, r0
   12980:	mov	r0, r4
   12984:	bl	11240 <error@plt>
   12988:	mov	r4, #1
   1298c:	b	12034 <__assert_fail@plt+0xc08>
   12990:	ldrb	r3, [r6, #12]
   12994:	cmp	r3, #0
   12998:	bne	11f78 <__assert_fail@plt+0xb4c>
   1299c:	ldr	r3, [r6]
   129a0:	cmp	r3, #2
   129a4:	orreq	r1, r1, #8
   129a8:	b	11f78 <__assert_fail@plt+0xb4c>
   129ac:	ldr	r3, [sp, #28]
   129b0:	mov	r2, #5
   129b4:	ldr	r1, [pc, #600]	; 12c14 <__assert_fail@plt+0x17e8>
   129b8:	mov	r0, #0
   129bc:	ldr	r4, [r3]
   129c0:	bl	111a4 <dcgettext@plt>
   129c4:	mov	r1, r4
   129c8:	mov	r2, r0
   129cc:	mov	r0, #0
   129d0:	bl	11240 <error@plt>
   129d4:	mov	r3, #0
   129d8:	str	r3, [sp, #12]
   129dc:	b	122c4 <__assert_fail@plt+0xe98>
   129e0:	mov	r4, #0
   129e4:	mov	r7, #1
   129e8:	b	12034 <__assert_fail@plt+0xc08>
   129ec:	cmp	sl, #0
   129f0:	mov	r2, #5
   129f4:	beq	12a44 <__assert_fail@plt+0x1618>
   129f8:	ldr	r1, [pc, #536]	; 12c18 <__assert_fail@plt+0x17ec>
   129fc:	ldr	r7, [sp, #24]
   12a00:	bl	111a4 <dcgettext@plt>
   12a04:	mov	r3, #0
   12a08:	str	r3, [sp, #24]
   12a0c:	str	r0, [sp, #32]
   12a10:	b	12628 <__assert_fail@plt+0x11fc>
   12a14:	ldrh	sl, [r9, #60]	; 0x3c
   12a18:	add	r5, sp, #40	; 0x28
   12a1c:	sub	r7, sl, #1
   12a20:	b	120ac <__assert_fail@plt+0xc80>
   12a24:	mov	r2, #5
   12a28:	ldr	r1, [pc, #492]	; 12c1c <__assert_fail@plt+0x17f0>
   12a2c:	bl	111a4 <dcgettext@plt>
   12a30:	mov	r1, r4
   12a34:	mov	r2, r0
   12a38:	ldr	r0, [sp, #12]
   12a3c:	bl	11240 <error@plt>
   12a40:	b	122b4 <__assert_fail@plt+0xe88>
   12a44:	cmp	r4, #0
   12a48:	beq	12b50 <__assert_fail@plt+0x1724>
   12a4c:	ldr	r1, [pc, #460]	; 12c20 <__assert_fail@plt+0x17f4>
   12a50:	ldr	r7, [sp, #24]
   12a54:	bl	111a4 <dcgettext@plt>
   12a58:	str	sl, [sp, #24]
   12a5c:	str	r0, [sp, #32]
   12a60:	b	12628 <__assert_fail@plt+0x11fc>
   12a64:	mov	r2, #1
   12a68:	str	r2, [r9, #16]
   12a6c:	mov	r1, r9
   12a70:	mov	r0, fp
   12a74:	bl	18070 <fts_set@@Base>
   12a78:	b	11f94 <__assert_fail@plt+0xb68>
   12a7c:	ldrd	r0, [r5]
   12a80:	ldrd	r2, [sp, #144]	; 0x90
   12a84:	cmp	r1, r3
   12a88:	cmpeq	r0, r2
   12a8c:	bne	127cc <__assert_fail@plt+0x13a0>
   12a90:	ldr	r3, [sp, #296]	; 0x128
   12a94:	cmn	r3, #1
   12a98:	beq	12b68 <__assert_fail@plt+0x173c>
   12a9c:	ldr	r3, [sp, #168]	; 0xa8
   12aa0:	ldr	r2, [sp, #296]	; 0x128
   12aa4:	cmp	r2, r3
   12aa8:	beq	12b68 <__assert_fail@plt+0x173c>
   12aac:	ldr	r8, [sp, #28]
   12ab0:	mov	r0, r7
   12ab4:	ldr	r4, [r8]
   12ab8:	bl	113f0 <close@plt>
   12abc:	str	r4, [r8]
   12ac0:	b	1217c <__assert_fail@plt+0xd50>
   12ac4:	mov	r3, #4
   12ac8:	str	r3, [sp, #32]
   12acc:	b	12058 <__assert_fail@plt+0xc2c>
   12ad0:	ldr	r1, [pc, #248]	; 12bd0 <__assert_fail@plt+0x17a4>
   12ad4:	mov	r0, #0
   12ad8:	bl	111a4 <dcgettext@plt>
   12adc:	ldr	r2, [sp, #8]
   12ae0:	mov	r1, #4
   12ae4:	mov	r4, r0
   12ae8:	mov	r0, #0
   12aec:	bl	14c88 <__assert_fail@plt+0x385c>
   12af0:	ldr	r2, [pc, #212]	; 12bcc <__assert_fail@plt+0x17a0>
   12af4:	mov	r1, #4
   12af8:	mov	r5, r0
   12afc:	mov	r0, #1
   12b00:	bl	14c88 <__assert_fail@plt+0x385c>
   12b04:	mov	r1, #0
   12b08:	mov	r3, r5
   12b0c:	mov	r2, r4
   12b10:	str	r0, [sp]
   12b14:	mov	r0, r1
   12b18:	bl	11240 <error@plt>
   12b1c:	b	1273c <__assert_fail@plt+0x1310>
   12b20:	ldr	r1, [pc, #196]	; 12bec <__assert_fail@plt+0x17c0>
   12b24:	bl	111a4 <dcgettext@plt>
   12b28:	mov	r1, r7
   12b2c:	mov	r5, r0
   12b30:	mov	r0, #4
   12b34:	bl	14d3c <__assert_fail@plt+0x3910>
   12b38:	mov	r2, r5
   12b3c:	mov	r1, r4
   12b40:	mov	r3, r0
   12b44:	mov	r0, r4
   12b48:	bl	11240 <error@plt>
   12b4c:	b	1238c <__assert_fail@plt+0xf60>
   12b50:	ldr	r1, [pc, #172]	; 12c04 <__assert_fail@plt+0x17d8>
   12b54:	ldr	r7, [sp, #24]
   12b58:	bl	111a4 <dcgettext@plt>
   12b5c:	str	r4, [sp, #24]
   12b60:	str	r0, [sp, #32]
   12b64:	b	12628 <__assert_fail@plt+0x11fc>
   12b68:	ldr	r3, [sp, #300]	; 0x12c
   12b6c:	cmn	r3, #1
   12b70:	beq	12b84 <__assert_fail@plt+0x1758>
   12b74:	ldr	r3, [sp, #172]	; 0xac
   12b78:	ldr	r2, [sp, #300]	; 0x12c
   12b7c:	cmp	r2, r3
   12b80:	bne	12aac <__assert_fail@plt+0x1680>
   12b84:	ldr	r2, [sp, #36]	; 0x24
   12b88:	ldr	r1, [sp, #20]
   12b8c:	mov	r0, r7
   12b90:	bl	112dc <fchown@plt>
   12b94:	cmp	r0, #0
   12b98:	bne	12558 <__assert_fail@plt+0x112c>
   12b9c:	mov	r0, r7
   12ba0:	bl	113f0 <close@plt>
   12ba4:	cmp	r0, #0
   12ba8:	bne	1256c <__assert_fail@plt+0x1140>
   12bac:	b	1217c <__assert_fail@plt+0xd50>
   12bb0:	bl	111b0 <__stack_chk_fail@plt>
   12bb4:	mov	r4, r7
   12bb8:	b	12034 <__assert_fail@plt+0xc08>
   12bbc:	andeq	fp, r2, r8, lsl #30
   12bc0:	andeq	sl, r1, ip, ror r9
   12bc4:	andeq	sl, r1, ip, ror #21
   12bc8:	andeq	sl, r1, ip, lsr #19
   12bcc:	ldrdeq	sl, [r1], -r4
   12bd0:	andeq	sl, r1, ip, lsl #18
   12bd4:	andeq	sl, r1, r8, asr #18
   12bd8:	muleq	r1, r0, r9
   12bdc:	andeq	sl, r1, r0, lsl #21
   12be0:	muleq	r1, ip, sl
   12be4:	andeq	sl, r1, r4, lsr #24
   12be8:	andeq	sl, r1, r8, asr fp
   12bec:	ldrdeq	sl, [r1], -ip
   12bf0:	andeq	sl, r1, r4, asr #24
   12bf4:	andeq	sl, r1, r0, ror #24
   12bf8:	andeq	sl, r1, r4, lsl fp
   12bfc:	andeq	sl, r1, r8, lsr fp
   12c00:	andeq	sl, r1, r8, lsl #23
   12c04:			; <UNDEFINED> instruction: 0x0001abb4
   12c08:	andeq	sl, r1, r8, lsr #25
   12c0c:			; <UNDEFINED> instruction: 0x0001aab4
   12c10:	andeq	sl, r1, r8, ror #20
   12c14:	andeq	sl, r1, ip, ror ip
   12c18:	ldrdeq	sl, [r1], -r8
   12c1c:	andeq	sl, r1, ip, asr #17
   12c20:	andeq	sl, r1, r0, lsl #24
   12c24:	ldr	r3, [pc, #4]	; 12c30 <__assert_fail@plt+0x1804>
   12c28:	str	r0, [r3]
   12c2c:	bx	lr
   12c30:			; <UNDEFINED> instruction: 0x0002c1b8
   12c34:	ldr	r3, [pc, #4]	; 12c40 <__assert_fail@plt+0x1814>
   12c38:	strb	r0, [r3, #4]
   12c3c:	bx	lr
   12c40:			; <UNDEFINED> instruction: 0x0002c1b8
   12c44:	ldr	r3, [pc, #180]	; 12d00 <__assert_fail@plt+0x18d4>
   12c48:	push	{r4, r5, r6, lr}
   12c4c:	sub	sp, sp, #8
   12c50:	ldr	r0, [r3]
   12c54:	bl	18270 <fts_children@@Base+0x1cc>
   12c58:	cmp	r0, #0
   12c5c:	beq	12c84 <__assert_fail@plt+0x1858>
   12c60:	bl	112e8 <__errno_location@plt>
   12c64:	ldr	r5, [pc, #152]	; 12d04 <__assert_fail@plt+0x18d8>
   12c68:	ldrb	r3, [r5, #4]
   12c6c:	cmp	r3, #0
   12c70:	mov	r4, r0
   12c74:	beq	12ca0 <__assert_fail@plt+0x1874>
   12c78:	ldr	r3, [r0]
   12c7c:	cmp	r3, #32
   12c80:	bne	12ca0 <__assert_fail@plt+0x1874>
   12c84:	ldr	r3, [pc, #124]	; 12d08 <__assert_fail@plt+0x18dc>
   12c88:	ldr	r0, [r3]
   12c8c:	bl	18270 <fts_children@@Base+0x1cc>
   12c90:	cmp	r0, #0
   12c94:	bne	12ce0 <__assert_fail@plt+0x18b4>
   12c98:	add	sp, sp, #8
   12c9c:	pop	{r4, r5, r6, pc}
   12ca0:	mov	r2, #5
   12ca4:	ldr	r1, [pc, #96]	; 12d0c <__assert_fail@plt+0x18e0>
   12ca8:	mov	r0, #0
   12cac:	bl	111a4 <dcgettext@plt>
   12cb0:	mov	r6, r0
   12cb4:	ldr	r0, [r5]
   12cb8:	cmp	r0, #0
   12cbc:	beq	12cec <__assert_fail@plt+0x18c0>
   12cc0:	ldr	r4, [r4]
   12cc4:	bl	14e04 <__assert_fail@plt+0x39d8>
   12cc8:	mov	r1, r4
   12ccc:	str	r6, [sp]
   12cd0:	ldr	r2, [pc, #56]	; 12d10 <__assert_fail@plt+0x18e4>
   12cd4:	mov	r3, r0
   12cd8:	mov	r0, #0
   12cdc:	bl	11240 <error@plt>
   12ce0:	ldr	r3, [pc, #44]	; 12d14 <__assert_fail@plt+0x18e8>
   12ce4:	ldr	r0, [r3]
   12ce8:	bl	11168 <_exit@plt>
   12cec:	mov	r3, r6
   12cf0:	ldr	r1, [r4]
   12cf4:	ldr	r2, [pc, #28]	; 12d18 <__assert_fail@plt+0x18ec>
   12cf8:	bl	11240 <error@plt>
   12cfc:	b	12ce0 <__assert_fail@plt+0x18b4>
   12d00:	muleq	r2, r4, r1
   12d04:			; <UNDEFINED> instruction: 0x0002c1b8
   12d08:	muleq	r2, r0, r1
   12d0c:	muleq	r1, r8, ip
   12d10:	andeq	sl, r1, r4, lsr #25
   12d14:	andeq	ip, r2, r8, lsr r1
   12d18:	andeq	sl, r1, r8, lsr #25
   12d1c:	push	{r4, r5, r6, lr}
   12d20:	mov	r4, r0
   12d24:	mov	r5, r1
   12d28:	add	r6, r2, #20
   12d2c:	mov	r3, #0
   12d30:	strb	r3, [r2, #20]
   12d34:	mov	r0, r4
   12d38:	mov	r1, r5
   12d3c:	mov	r2, #10
   12d40:	mov	r3, #0
   12d44:	bl	19bfc <fts_children@@Base+0x1b58>
   12d48:	mov	r0, r4
   12d4c:	mov	r1, r5
   12d50:	mov	r3, #0
   12d54:	add	r2, r2, #48	; 0x30
   12d58:	strb	r2, [r6, #-1]!
   12d5c:	mov	r2, #10
   12d60:	bl	19bfc <fts_children@@Base+0x1b58>
   12d64:	cmp	r5, #0
   12d68:	cmpeq	r4, #9
   12d6c:	mov	r5, r1
   12d70:	mov	r4, r0
   12d74:	bhi	12d34 <__assert_fail@plt+0x1908>
   12d78:	mov	r0, r6
   12d7c:	pop	{r4, r5, r6, pc}
   12d80:	push	{r4, r5, r6, lr}
   12d84:	subs	r4, r0, #0
   12d88:	beq	12dfc <__assert_fail@plt+0x19d0>
   12d8c:	mov	r1, #47	; 0x2f
   12d90:	bl	11360 <strrchr@plt>
   12d94:	subs	r5, r0, #0
   12d98:	beq	12de8 <__assert_fail@plt+0x19bc>
   12d9c:	add	r6, r5, #1
   12da0:	sub	r3, r6, r4
   12da4:	cmp	r3, #6
   12da8:	ble	12de8 <__assert_fail@plt+0x19bc>
   12dac:	mov	r2, #7
   12db0:	ldr	r1, [pc, #96]	; 12e18 <__assert_fail@plt+0x19ec>
   12db4:	sub	r0, r5, #6
   12db8:	bl	113d8 <strncmp@plt>
   12dbc:	cmp	r0, #0
   12dc0:	bne	12de8 <__assert_fail@plt+0x19bc>
   12dc4:	mov	r2, #3
   12dc8:	ldr	r1, [pc, #76]	; 12e1c <__assert_fail@plt+0x19f0>
   12dcc:	mov	r0, r6
   12dd0:	bl	113d8 <strncmp@plt>
   12dd4:	cmp	r0, #0
   12dd8:	movne	r4, r6
   12ddc:	ldreq	r3, [pc, #60]	; 12e20 <__assert_fail@plt+0x19f4>
   12de0:	addeq	r4, r5, #4
   12de4:	streq	r4, [r3]
   12de8:	ldr	r2, [pc, #52]	; 12e24 <__assert_fail@plt+0x19f8>
   12dec:	ldr	r3, [pc, #52]	; 12e28 <__assert_fail@plt+0x19fc>
   12df0:	str	r4, [r2]
   12df4:	str	r4, [r3]
   12df8:	pop	{r4, r5, r6, pc}
   12dfc:	ldr	r3, [pc, #40]	; 12e2c <__assert_fail@plt+0x1a00>
   12e00:	mov	r2, #55	; 0x37
   12e04:	mov	r1, #1
   12e08:	ldr	r3, [r3]
   12e0c:	ldr	r0, [pc, #28]	; 12e30 <__assert_fail@plt+0x1a04>
   12e10:	bl	111f8 <fwrite@plt>
   12e14:	bl	113e4 <abort@plt>
   12e18:	andeq	sl, r1, r4, ror #25
   12e1c:	andeq	sl, r1, ip, ror #25
   12e20:	andeq	ip, r2, r0, lsl #3
   12e24:	andeq	ip, r2, r0, asr #3
   12e28:	andeq	ip, r2, r4, lsl #3
   12e2c:	muleq	r2, r0, r1
   12e30:	andeq	sl, r1, ip, lsr #25
   12e34:	push	{r4, lr}
   12e38:	mov	r2, #48	; 0x30
   12e3c:	mov	r4, r1
   12e40:	mov	r1, #0
   12e44:	bl	11300 <memset@plt>
   12e48:	cmp	r4, #10
   12e4c:	beq	12e58 <__assert_fail@plt+0x1a2c>
   12e50:	str	r4, [r0]
   12e54:	pop	{r4, pc}
   12e58:	bl	113e4 <abort@plt>
   12e5c:	push	{r4, r5, r6, lr}
   12e60:	mov	r2, #5
   12e64:	mov	r5, r0
   12e68:	mov	r6, r1
   12e6c:	mov	r1, r0
   12e70:	mov	r0, #0
   12e74:	bl	111a4 <dcgettext@plt>
   12e78:	cmp	r5, r0
   12e7c:	mov	r4, r0
   12e80:	beq	12e8c <__assert_fail@plt+0x1a60>
   12e84:	mov	r0, r4
   12e88:	pop	{r4, r5, r6, pc}
   12e8c:	bl	19624 <fts_children@@Base+0x1580>
   12e90:	ldrb	r3, [r0]
   12e94:	bic	r3, r3, #32
   12e98:	cmp	r3, #85	; 0x55
   12e9c:	bne	12efc <__assert_fail@plt+0x1ad0>
   12ea0:	ldrb	r3, [r0, #1]
   12ea4:	bic	r3, r3, #32
   12ea8:	cmp	r3, #84	; 0x54
   12eac:	bne	12f74 <__assert_fail@plt+0x1b48>
   12eb0:	ldrb	r3, [r0, #2]
   12eb4:	bic	r3, r3, #32
   12eb8:	cmp	r3, #70	; 0x46
   12ebc:	bne	12f74 <__assert_fail@plt+0x1b48>
   12ec0:	ldrb	r3, [r0, #3]
   12ec4:	cmp	r3, #45	; 0x2d
   12ec8:	bne	12f74 <__assert_fail@plt+0x1b48>
   12ecc:	ldrb	r3, [r0, #4]
   12ed0:	cmp	r3, #56	; 0x38
   12ed4:	bne	12f74 <__assert_fail@plt+0x1b48>
   12ed8:	ldrb	r3, [r0, #5]
   12edc:	cmp	r3, #0
   12ee0:	bne	12f74 <__assert_fail@plt+0x1b48>
   12ee4:	ldrb	r2, [r4]
   12ee8:	ldr	r3, [pc, #156]	; 12f8c <__assert_fail@plt+0x1b60>
   12eec:	ldr	r4, [pc, #156]	; 12f90 <__assert_fail@plt+0x1b64>
   12ef0:	cmp	r2, #96	; 0x60
   12ef4:	movne	r4, r3
   12ef8:	b	12e84 <__assert_fail@plt+0x1a58>
   12efc:	cmp	r3, #71	; 0x47
   12f00:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f04:	ldrb	r3, [r0, #1]
   12f08:	bic	r3, r3, #32
   12f0c:	cmp	r3, #66	; 0x42
   12f10:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f14:	ldrb	r3, [r0, #2]
   12f18:	cmp	r3, #49	; 0x31
   12f1c:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f20:	ldrb	r3, [r0, #3]
   12f24:	cmp	r3, #56	; 0x38
   12f28:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f2c:	ldrb	r3, [r0, #4]
   12f30:	cmp	r3, #48	; 0x30
   12f34:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f38:	ldrb	r3, [r0, #5]
   12f3c:	cmp	r3, #51	; 0x33
   12f40:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f44:	ldrb	r3, [r0, #6]
   12f48:	cmp	r3, #48	; 0x30
   12f4c:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f50:	ldrb	r3, [r0, #7]
   12f54:	cmp	r3, #0
   12f58:	bne	12f74 <__assert_fail@plt+0x1b48>
   12f5c:	ldrb	r2, [r4]
   12f60:	ldr	r3, [pc, #44]	; 12f94 <__assert_fail@plt+0x1b68>
   12f64:	ldr	r4, [pc, #44]	; 12f98 <__assert_fail@plt+0x1b6c>
   12f68:	cmp	r2, #96	; 0x60
   12f6c:	movne	r4, r3
   12f70:	b	12e84 <__assert_fail@plt+0x1a58>
   12f74:	ldr	r3, [pc, #32]	; 12f9c <__assert_fail@plt+0x1b70>
   12f78:	ldr	r4, [pc, #32]	; 12fa0 <__assert_fail@plt+0x1b74>
   12f7c:	cmp	r6, #9
   12f80:	movne	r4, r3
   12f84:	mov	r0, r4
   12f88:	pop	{r4, r5, r6, pc}
   12f8c:	andeq	sl, r1, r8, asr #26
   12f90:	andeq	sl, r1, r4, asr sp
   12f94:	andeq	sl, r1, ip, asr #26
   12f98:	andeq	sl, r1, r0, asr sp
   12f9c:	andeq	sl, r1, r8, asr sp
   12fa0:	andeq	sl, r1, r4, asr #26
   12fa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa8:	sub	sp, sp, #124	; 0x7c
   12fac:	ldr	ip, [pc, #3576]	; 13dac <__assert_fail@plt+0x2980>
   12fb0:	str	r3, [sp, #24]
   12fb4:	ldr	r3, [sp, #168]	; 0xa8
   12fb8:	ldr	ip, [ip]
   12fbc:	str	r3, [sp, #56]	; 0x38
   12fc0:	ldr	r3, [sp, #172]	; 0xac
   12fc4:	ldr	r8, [sp, #160]	; 0xa0
   12fc8:	str	r3, [sp, #80]	; 0x50
   12fcc:	ldr	r3, [sp, #176]	; 0xb0
   12fd0:	mov	fp, r0
   12fd4:	str	r3, [sp, #76]	; 0x4c
   12fd8:	mov	sl, r1
   12fdc:	str	r2, [sp, #36]	; 0x24
   12fe0:	str	ip, [sp, #116]	; 0x74
   12fe4:	bl	11210 <__ctype_get_mb_cur_max@plt>
   12fe8:	ldr	r3, [sp, #164]	; 0xa4
   12fec:	ands	r4, r3, #2
   12ff0:	movne	r3, #1
   12ff4:	moveq	r3, #0
   12ff8:	str	r3, [sp, #32]
   12ffc:	str	r0, [sp, #64]	; 0x40
   13000:	cmp	r8, #10
   13004:	ldrls	pc, [pc, r8, lsl #2]
   13008:	b	147b8 <__assert_fail@plt+0x338c>
   1300c:	andeq	r3, r1, r0, lsl #8
   13010:	muleq	r1, r8, r4
   13014:	muleq	r1, r8, sl
   13018:			; <UNDEFINED> instruction: 0x000134b8
   1301c:	andeq	r3, r1, ip, ror #6
   13020:			; <UNDEFINED> instruction: 0x000133b4
   13024:	andeq	r3, r1, r0, lsr r4
   13028:	andeq	r3, r1, r8, ror #8
   1302c:	andeq	r3, r1, r8, lsr r0
   13030:	andeq	r3, r1, r8, lsr r0
   13034:	andeq	r3, r1, r8, lsr r0
   13038:	cmp	r8, #10
   1303c:	beq	13060 <__assert_fail@plt+0x1c34>
   13040:	mov	r1, r8
   13044:	ldr	r0, [pc, #3428]	; 13db0 <__assert_fail@plt+0x2984>
   13048:	bl	12e5c <__assert_fail@plt+0x1a30>
   1304c:	mov	r1, r8
   13050:	str	r0, [sp, #80]	; 0x50
   13054:	ldr	r0, [pc, #3420]	; 13db8 <__assert_fail@plt+0x298c>
   13058:	bl	12e5c <__assert_fail@plt+0x1a30>
   1305c:	str	r0, [sp, #76]	; 0x4c
   13060:	cmp	r4, #0
   13064:	movne	r4, #0
   13068:	beq	14478 <__assert_fail@plt+0x304c>
   1306c:	ldr	r7, [sp, #76]	; 0x4c
   13070:	mov	r5, #0
   13074:	mov	r6, #1
   13078:	mov	r0, r7
   1307c:	str	r6, [sp, #40]	; 0x28
   13080:	str	r5, [sp, #68]	; 0x44
   13084:	bl	112b8 <strlen@plt>
   13088:	str	r6, [sp, #28]
   1308c:	str	r5, [sp, #44]	; 0x2c
   13090:	str	r5, [sp, #72]	; 0x48
   13094:	str	r7, [sp, #60]	; 0x3c
   13098:	str	r0, [sp, #52]	; 0x34
   1309c:	str	r8, [sp, #160]	; 0xa0
   130a0:	mov	r8, fp
   130a4:	ldr	fp, [sp, #160]	; 0xa0
   130a8:	mov	r9, #0
   130ac:	ldr	r3, [sp, #24]
   130b0:	cmn	r3, #1
   130b4:	beq	1361c <__assert_fail@plt+0x21f0>
   130b8:	ldr	r3, [sp, #24]
   130bc:	subs	r6, r3, r9
   130c0:	movne	r6, #1
   130c4:	cmp	r6, #0
   130c8:	beq	13634 <__assert_fail@plt+0x2208>
   130cc:	ldr	r7, [sp, #28]
   130d0:	ldr	r0, [sp, #36]	; 0x24
   130d4:	cmp	fp, #2
   130d8:	moveq	r7, #0
   130dc:	andne	r7, r7, #1
   130e0:	add	r3, r0, r9
   130e4:	cmp	r7, #0
   130e8:	str	r3, [sp, #48]	; 0x30
   130ec:	beq	13ad8 <__assert_fail@plt+0x26ac>
   130f0:	ldr	r2, [sp, #52]	; 0x34
   130f4:	cmp	r2, #0
   130f8:	beq	13dbc <__assert_fail@plt+0x2990>
   130fc:	ldr	r1, [sp, #24]
   13100:	cmp	r2, #1
   13104:	mov	r3, r2
   13108:	movls	r3, #0
   1310c:	movhi	r3, #1
   13110:	cmn	r1, #1
   13114:	movne	r3, #0
   13118:	cmp	r3, #0
   1311c:	add	r5, r9, r2
   13120:	beq	1312c <__assert_fail@plt+0x1d00>
   13124:	bl	112b8 <strlen@plt>
   13128:	str	r0, [sp, #24]
   1312c:	ldr	r3, [sp, #24]
   13130:	cmp	r5, r3
   13134:	bhi	13dbc <__assert_fail@plt+0x2990>
   13138:	ldr	r2, [sp, #52]	; 0x34
   1313c:	ldr	r1, [sp, #60]	; 0x3c
   13140:	ldr	r0, [sp, #48]	; 0x30
   13144:	bl	1118c <memcmp@plt>
   13148:	cmp	r0, #0
   1314c:	bne	13dbc <__assert_fail@plt+0x2990>
   13150:	ldr	r3, [sp, #32]
   13154:	cmp	r3, #0
   13158:	bne	14678 <__assert_fail@plt+0x324c>
   1315c:	ldr	r3, [sp, #48]	; 0x30
   13160:	ldrb	r5, [r3]
   13164:	cmp	r5, #126	; 0x7e
   13168:	ldrls	pc, [pc, r5, lsl #2]
   1316c:	b	13a3c <__assert_fail@plt+0x2610>
   13170:	andeq	r3, r1, r8, lsr #18
   13174:	andeq	r3, r1, ip, lsr sl
   13178:	andeq	r3, r1, ip, lsr sl
   1317c:	andeq	r3, r1, ip, lsr sl
   13180:	andeq	r3, r1, ip, lsr sl
   13184:	andeq	r3, r1, ip, lsr sl
   13188:	andeq	r3, r1, ip, lsr sl
   1318c:	strdeq	r3, [r1], -r4
   13190:	andeq	r3, r1, r4, ror #19
   13194:	andeq	r3, r1, r4, ror #17
   13198:	andeq	r3, r1, ip, lsr #17
   1319c:	andeq	r3, r1, r4, lsl #18
   131a0:	andeq	r3, r1, ip, ror #17
   131a4:	andeq	r3, r1, ip, lsl r8
   131a8:	andeq	r3, r1, ip, lsr sl
   131ac:	andeq	r3, r1, ip, lsr sl
   131b0:	andeq	r3, r1, ip, lsr sl
   131b4:	andeq	r3, r1, ip, lsr sl
   131b8:	andeq	r3, r1, ip, lsr sl
   131bc:	andeq	r3, r1, ip, lsr sl
   131c0:	andeq	r3, r1, ip, lsr sl
   131c4:	andeq	r3, r1, ip, lsr sl
   131c8:	andeq	r3, r1, ip, lsr sl
   131cc:	andeq	r3, r1, ip, lsr sl
   131d0:	andeq	r3, r1, ip, lsr sl
   131d4:	andeq	r3, r1, ip, lsr sl
   131d8:	andeq	r3, r1, ip, lsr sl
   131dc:	andeq	r3, r1, ip, lsr sl
   131e0:	andeq	r3, r1, ip, lsr sl
   131e4:	andeq	r3, r1, ip, lsr sl
   131e8:	andeq	r3, r1, ip, lsr sl
   131ec:	andeq	r3, r1, ip, lsr sl
   131f0:	strdeq	r3, [r1], -ip
   131f4:	andeq	r3, r1, r0, lsl r9
   131f8:	andeq	r3, r1, r0, lsl r9
   131fc:	andeq	r3, r1, r4, lsl sl
   13200:	andeq	r3, r1, r0, lsl r9
   13204:	andeq	r3, r1, r0, lsr sl
   13208:	andeq	r3, r1, r0, lsl r9
   1320c:	andeq	r3, r1, r0, asr r7
   13210:	andeq	r3, r1, r0, lsl r9
   13214:	andeq	r3, r1, r0, lsl r9
   13218:	andeq	r3, r1, r0, lsl r9
   1321c:	andeq	r3, r1, r0, lsr sl
   13220:	andeq	r3, r1, r0, lsr sl
   13224:	andeq	r3, r1, r0, lsr sl
   13228:	andeq	r3, r1, r0, lsr sl
   1322c:	andeq	r3, r1, r0, lsr sl
   13230:	andeq	r3, r1, r0, lsr sl
   13234:	andeq	r3, r1, r0, lsr sl
   13238:	andeq	r3, r1, r0, lsr sl
   1323c:	andeq	r3, r1, r0, lsr sl
   13240:	andeq	r3, r1, r0, lsr sl
   13244:	andeq	r3, r1, r0, lsr sl
   13248:	andeq	r3, r1, r0, lsr sl
   1324c:	andeq	r3, r1, r0, lsr sl
   13250:	andeq	r3, r1, r0, lsr sl
   13254:	andeq	r3, r1, r0, lsr sl
   13258:	andeq	r3, r1, r0, lsr sl
   1325c:	andeq	r3, r1, r0, lsl r9
   13260:	andeq	r3, r1, r0, lsl r9
   13264:	andeq	r3, r1, r0, lsl r9
   13268:	andeq	r3, r1, r0, lsl r9
   1326c:	andeq	r3, r1, r4, lsr #14
   13270:	andeq	r3, r1, ip, lsr sl
   13274:	andeq	r3, r1, r0, lsr sl
   13278:	andeq	r3, r1, r0, lsr sl
   1327c:	andeq	r3, r1, r0, lsr sl
   13280:	andeq	r3, r1, r0, lsr sl
   13284:	andeq	r3, r1, r0, lsr sl
   13288:	andeq	r3, r1, r0, lsr sl
   1328c:	andeq	r3, r1, r0, lsr sl
   13290:	andeq	r3, r1, r0, lsr sl
   13294:	andeq	r3, r1, r0, lsr sl
   13298:	andeq	r3, r1, r0, lsr sl
   1329c:	andeq	r3, r1, r0, lsr sl
   132a0:	andeq	r3, r1, r0, lsr sl
   132a4:	andeq	r3, r1, r0, lsr sl
   132a8:	andeq	r3, r1, r0, lsr sl
   132ac:	andeq	r3, r1, r0, lsr sl
   132b0:	andeq	r3, r1, r0, lsr sl
   132b4:	andeq	r3, r1, r0, lsr sl
   132b8:	andeq	r3, r1, r0, lsr sl
   132bc:	andeq	r3, r1, r0, lsr sl
   132c0:	andeq	r3, r1, r0, lsr sl
   132c4:	andeq	r3, r1, r0, lsr sl
   132c8:	andeq	r3, r1, r0, lsr sl
   132cc:	andeq	r3, r1, r0, lsr sl
   132d0:	andeq	r3, r1, r0, lsr sl
   132d4:	andeq	r3, r1, r0, lsr sl
   132d8:	andeq	r3, r1, r0, lsr sl
   132dc:	andeq	r3, r1, r0, lsl r9
   132e0:	ldrdeq	r3, [r1], -ip
   132e4:	andeq	r3, r1, r0, lsr sl
   132e8:	andeq	r3, r1, r0, lsl r9
   132ec:	andeq	r3, r1, r0, lsr sl
   132f0:	andeq	r3, r1, r0, lsl r9
   132f4:	andeq	r3, r1, r0, lsr sl
   132f8:	andeq	r3, r1, r0, lsr sl
   132fc:	andeq	r3, r1, r0, lsr sl
   13300:	andeq	r3, r1, r0, lsr sl
   13304:	andeq	r3, r1, r0, lsr sl
   13308:	andeq	r3, r1, r0, lsr sl
   1330c:	andeq	r3, r1, r0, lsr sl
   13310:	andeq	r3, r1, r0, lsr sl
   13314:	andeq	r3, r1, r0, lsr sl
   13318:	andeq	r3, r1, r0, lsr sl
   1331c:	andeq	r3, r1, r0, lsr sl
   13320:	andeq	r3, r1, r0, lsr sl
   13324:	andeq	r3, r1, r0, lsr sl
   13328:	andeq	r3, r1, r0, lsr sl
   1332c:	andeq	r3, r1, r0, lsr sl
   13330:	andeq	r3, r1, r0, lsr sl
   13334:	andeq	r3, r1, r0, lsr sl
   13338:	andeq	r3, r1, r0, lsr sl
   1333c:	andeq	r3, r1, r0, lsr sl
   13340:	andeq	r3, r1, r0, lsr sl
   13344:	andeq	r3, r1, r0, lsr sl
   13348:	andeq	r3, r1, r0, lsr sl
   1334c:	andeq	r3, r1, r0, lsr sl
   13350:	andeq	r3, r1, r0, lsr sl
   13354:	andeq	r3, r1, r0, lsr sl
   13358:	andeq	r3, r1, r0, lsr sl
   1335c:	strdeq	r3, [r1], -r4
   13360:	andeq	r3, r1, r0, lsl r9
   13364:	strdeq	r3, [r1], -r4
   13368:	andeq	r3, r1, r4, lsl sl
   1336c:	cmp	r4, #0
   13370:	moveq	r3, #1
   13374:	streq	r3, [sp, #28]
   13378:	beq	13aa4 <__assert_fail@plt+0x2678>
   1337c:	mov	r3, #0
   13380:	mov	r4, r3
   13384:	mov	r2, #1
   13388:	str	r2, [sp, #40]	; 0x28
   1338c:	str	r3, [sp, #68]	; 0x44
   13390:	str	r2, [sp, #32]
   13394:	str	r2, [sp, #52]	; 0x34
   13398:	ldr	r3, [pc, #2584]	; 13db8 <__assert_fail@plt+0x298c>
   1339c:	str	r4, [sp, #44]	; 0x2c
   133a0:	str	r4, [sp, #72]	; 0x48
   133a4:	str	r4, [sp, #28]
   133a8:	str	r3, [sp, #60]	; 0x3c
   133ac:	mov	r8, #2
   133b0:	b	1309c <__assert_fail@plt+0x1c70>
   133b4:	cmp	r4, #0
   133b8:	bne	14644 <__assert_fail@plt+0x3218>
   133bc:	cmp	sl, #0
   133c0:	beq	14404 <__assert_fail@plt+0x2fd8>
   133c4:	mov	r3, #34	; 0x22
   133c8:	strb	r3, [fp]
   133cc:	ldr	r3, [pc, #2528]	; 13db4 <__assert_fail@plt+0x2988>
   133d0:	mov	r1, r4
   133d4:	mov	r2, #1
   133d8:	str	r4, [sp, #68]	; 0x44
   133dc:	str	r2, [sp, #40]	; 0x28
   133e0:	mov	r4, r2
   133e4:	str	r1, [sp, #44]	; 0x2c
   133e8:	str	r1, [sp, #72]	; 0x48
   133ec:	str	r1, [sp, #32]
   133f0:	str	r2, [sp, #28]
   133f4:	str	r2, [sp, #52]	; 0x34
   133f8:	str	r3, [sp, #60]	; 0x3c
   133fc:	b	1309c <__assert_fail@plt+0x1c70>
   13400:	mov	r3, #0
   13404:	str	r3, [sp, #68]	; 0x44
   13408:	str	r3, [sp, #44]	; 0x2c
   1340c:	str	r3, [sp, #32]
   13410:	str	r3, [sp, #28]
   13414:	str	r3, [sp, #60]	; 0x3c
   13418:	mov	r3, #1
   1341c:	str	r8, [sp, #72]	; 0x48
   13420:	str	r8, [sp, #52]	; 0x34
   13424:	mov	r4, r8
   13428:	str	r3, [sp, #40]	; 0x28
   1342c:	b	1309c <__assert_fail@plt+0x1c70>
   13430:	mov	r3, #1
   13434:	str	r3, [sp, #40]	; 0x28
   13438:	str	r3, [sp, #32]
   1343c:	str	r3, [sp, #28]
   13440:	str	r3, [sp, #52]	; 0x34
   13444:	ldr	r3, [pc, #2408]	; 13db4 <__assert_fail@plt+0x2988>
   13448:	mov	r2, #0
   1344c:	mov	r4, r2
   13450:	str	r2, [sp, #68]	; 0x44
   13454:	str	r2, [sp, #44]	; 0x2c
   13458:	str	r2, [sp, #72]	; 0x48
   1345c:	str	r3, [sp, #60]	; 0x3c
   13460:	mov	r8, #5
   13464:	b	1309c <__assert_fail@plt+0x1c70>
   13468:	mov	r3, #0
   1346c:	mov	r2, #1
   13470:	str	r2, [sp, #40]	; 0x28
   13474:	mov	r4, r3
   13478:	str	r3, [sp, #68]	; 0x44
   1347c:	str	r2, [sp, #28]
   13480:	str	r3, [sp, #44]	; 0x2c
   13484:	str	r3, [sp, #72]	; 0x48
   13488:	str	r3, [sp, #32]
   1348c:	str	r3, [sp, #52]	; 0x34
   13490:	str	r3, [sp, #60]	; 0x3c
   13494:	b	1309c <__assert_fail@plt+0x1c70>
   13498:	mov	r2, #1
   1349c:	mov	r3, #0
   134a0:	str	r2, [sp, #40]	; 0x28
   134a4:	mov	r4, r3
   134a8:	str	r3, [sp, #68]	; 0x44
   134ac:	str	r8, [sp, #52]	; 0x34
   134b0:	str	r2, [sp, #32]
   134b4:	b	13398 <__assert_fail@plt+0x1f6c>
   134b8:	mov	r3, #1
   134bc:	str	r3, [sp, #40]	; 0x28
   134c0:	str	r3, [sp, #32]
   134c4:	str	r3, [sp, #28]
   134c8:	str	r3, [sp, #52]	; 0x34
   134cc:	ldr	r3, [pc, #2276]	; 13db8 <__assert_fail@plt+0x298c>
   134d0:	mov	r2, #0
   134d4:	mov	r4, r2
   134d8:	str	r2, [sp, #68]	; 0x44
   134dc:	str	r2, [sp, #44]	; 0x2c
   134e0:	str	r2, [sp, #72]	; 0x48
   134e4:	str	r3, [sp, #60]	; 0x3c
   134e8:	mov	r8, #2
   134ec:	b	1309c <__assert_fail@plt+0x1c70>
   134f0:	mov	r7, #0
   134f4:	ldr	r3, [sp, #24]
   134f8:	cmn	r3, #1
   134fc:	beq	14038 <__assert_fail@plt+0x2c0c>
   13500:	ldr	r3, [sp, #24]
   13504:	subs	r3, r3, #1
   13508:	movne	r3, #1
   1350c:	cmp	r3, #0
   13510:	sub	r2, fp, #2
   13514:	clz	r2, r2
   13518:	lsr	r2, r2, #5
   1351c:	bne	13718 <__assert_fail@plt+0x22ec>
   13520:	cmp	r9, #0
   13524:	bne	13718 <__assert_fail@plt+0x22ec>
   13528:	ldr	r3, [sp, #32]
   1352c:	tst	r3, r2
   13530:	bne	13838 <__assert_fail@plt+0x240c>
   13534:	ldr	r3, [sp, #28]
   13538:	eor	r3, r3, #1
   1353c:	orr	r3, r2, r3
   13540:	ldr	r2, [sp, #32]
   13544:	eor	r3, r3, #1
   13548:	orrs	r3, r2, r3
   1354c:	beq	1357c <__assert_fail@plt+0x2150>
   13550:	mov	r3, #0
   13554:	ldr	r1, [sp, #56]	; 0x38
   13558:	cmp	r1, #0
   1355c:	beq	1357c <__assert_fail@plt+0x2150>
   13560:	lsr	r2, r5, #5
   13564:	and	r0, r5, #31
   13568:	uxtb	r2, r2
   1356c:	ldr	r1, [r1, r2, lsl #2]
   13570:	lsr	r2, r1, r0
   13574:	tst	r2, #1
   13578:	bne	13584 <__assert_fail@plt+0x2158>
   1357c:	cmp	r7, #0
   13580:	beq	137d4 <__assert_fail@plt+0x23a8>
   13584:	sub	r2, fp, #2
   13588:	clz	r2, r2
   1358c:	lsr	r2, r2, #5
   13590:	ldr	r3, [sp, #32]
   13594:	cmp	r3, #0
   13598:	bne	138c4 <__assert_fail@plt+0x2498>
   1359c:	ldr	r3, [sp, #44]	; 0x2c
   135a0:	eor	r3, r3, #1
   135a4:	ands	r3, r2, r3
   135a8:	beq	135e0 <__assert_fail@plt+0x21b4>
   135ac:	cmp	sl, r4
   135b0:	movhi	r2, #39	; 0x27
   135b4:	strbhi	r2, [r8, r4]
   135b8:	add	r2, r4, #1
   135bc:	cmp	r2, sl
   135c0:	movcc	r1, #36	; 0x24
   135c4:	strbcc	r1, [r8, r2]
   135c8:	add	r2, r4, #2
   135cc:	cmp	r2, sl
   135d0:	add	r4, r4, #3
   135d4:	movcc	r1, #39	; 0x27
   135d8:	strbcc	r1, [r8, r2]
   135dc:	str	r3, [sp, #44]	; 0x2c
   135e0:	cmp	r4, sl
   135e4:	movcc	r3, #92	; 0x5c
   135e8:	strbcc	r3, [r8, r4]
   135ec:	add	r9, r9, #1
   135f0:	add	r4, r4, #1
   135f4:	cmp	r4, sl
   135f8:	ldr	r3, [sp, #40]	; 0x28
   135fc:	strbcc	r5, [r8, r4]
   13600:	cmp	r6, #0
   13604:	moveq	r3, #0
   13608:	str	r3, [sp, #40]	; 0x28
   1360c:	ldr	r3, [sp, #24]
   13610:	add	r4, r4, #1
   13614:	cmn	r3, #1
   13618:	bne	130b8 <__assert_fail@plt+0x1c8c>
   1361c:	ldr	r3, [sp, #36]	; 0x24
   13620:	ldrb	r6, [r3, r9]
   13624:	adds	r6, r6, #0
   13628:	movne	r6, #1
   1362c:	cmp	r6, #0
   13630:	bne	130cc <__assert_fail@plt+0x1ca0>
   13634:	str	fp, [sp, #160]	; 0xa0
   13638:	mov	fp, r8
   1363c:	ldr	r8, [sp, #160]	; 0xa0
   13640:	ldr	r1, [sp, #32]
   13644:	cmp	r4, #0
   13648:	sub	r2, r8, #2
   1364c:	clz	r2, r2
   13650:	lsr	r2, r2, #5
   13654:	andeq	r3, r2, r1
   13658:	movne	r3, #0
   1365c:	cmp	r3, #0
   13660:	bne	1474c <__assert_fail@plt+0x3320>
   13664:	eor	r3, r1, #1
   13668:	ands	r2, r2, r3
   1366c:	beq	14688 <__assert_fail@plt+0x325c>
   13670:	ldr	r3, [sp, #68]	; 0x44
   13674:	cmp	r3, #0
   13678:	beq	1468c <__assert_fail@plt+0x3260>
   1367c:	ldr	r3, [sp, #40]	; 0x28
   13680:	cmp	r3, #0
   13684:	bne	14708 <__assert_fail@plt+0x32dc>
   13688:	ldr	r3, [sp, #72]	; 0x48
   1368c:	adds	r3, r3, #0
   13690:	movne	r3, #1
   13694:	cmp	sl, #0
   13698:	movne	r3, #0
   1369c:	cmp	r3, #0
   136a0:	ldreq	r2, [sp, #68]	; 0x44
   136a4:	beq	1468c <__assert_fail@plt+0x3260>
   136a8:	ldr	sl, [sp, #72]	; 0x48
   136ac:	str	r3, [sp, #68]	; 0x44
   136b0:	ldr	r3, [pc, #1792]	; 13db8 <__assert_fail@plt+0x298c>
   136b4:	mov	r2, #39	; 0x27
   136b8:	mov	r4, #1
   136bc:	str	r3, [sp, #60]	; 0x3c
   136c0:	mov	r3, #0
   136c4:	strb	r2, [fp]
   136c8:	str	r4, [sp, #52]	; 0x34
   136cc:	mov	r8, #2
   136d0:	str	r3, [sp, #32]
   136d4:	b	1309c <__assert_fail@plt+0x1c70>
   136d8:	mov	r7, #0
   136dc:	cmp	fp, #2
   136e0:	beq	14018 <__assert_fail@plt+0x2bec>
   136e4:	ldr	r3, [sp, #52]	; 0x34
   136e8:	ldr	r2, [sp, #28]
   136ec:	ldr	r1, [sp, #32]
   136f0:	cmp	r3, #0
   136f4:	andne	r2, r2, r1
   136f8:	moveq	r2, #0
   136fc:	cmp	r2, #0
   13700:	moveq	r5, #92	; 0x5c
   13704:	moveq	r3, r5
   13708:	bne	14024 <__assert_fail@plt+0x2bf8>
   1370c:	ldr	r1, [sp, #28]
   13710:	cmp	r1, #0
   13714:	bne	14794 <__assert_fail@plt+0x3368>
   13718:	mov	r6, #0
   1371c:	b	13534 <__assert_fail@plt+0x2108>
   13720:	mov	r7, #0
   13724:	cmp	fp, #2
   13728:	beq	14088 <__assert_fail@plt+0x2c5c>
   1372c:	cmp	fp, #5
   13730:	beq	1404c <__assert_fail@plt+0x2c20>
   13734:	sub	r2, fp, #2
   13738:	mov	r6, #0
   1373c:	clz	r2, r2
   13740:	mov	r5, #63	; 0x3f
   13744:	lsr	r2, r2, #5
   13748:	b	13534 <__assert_fail@plt+0x2108>
   1374c:	mov	r7, #0
   13750:	cmp	fp, #2
   13754:	strne	r6, [sp, #68]	; 0x44
   13758:	movne	r2, #0
   1375c:	movne	r5, #39	; 0x27
   13760:	bne	13534 <__assert_fail@plt+0x2108>
   13764:	ldr	r3, [sp, #32]
   13768:	cmp	r3, #0
   1376c:	bne	14468 <__assert_fail@plt+0x303c>
   13770:	cmp	sl, #0
   13774:	ldr	r3, [sp, #72]	; 0x48
   13778:	clz	r3, r3
   1377c:	lsr	r3, r3, #5
   13780:	moveq	r3, #0
   13784:	cmp	r3, #0
   13788:	bne	1439c <__assert_fail@plt+0x2f70>
   1378c:	cmp	sl, r4
   13790:	movhi	r3, #39	; 0x27
   13794:	strbhi	r3, [r8, r4]
   13798:	add	r3, r4, #1
   1379c:	cmp	sl, r3
   137a0:	movhi	r2, #92	; 0x5c
   137a4:	strbhi	r2, [r8, r3]
   137a8:	add	r3, r4, #2
   137ac:	cmp	sl, r3
   137b0:	movhi	r2, #39	; 0x27
   137b4:	strbhi	r2, [r8, r3]
   137b8:	mov	r3, #0
   137bc:	cmp	r7, #0
   137c0:	add	r4, r4, #3
   137c4:	str	r3, [sp, #44]	; 0x2c
   137c8:	str	r6, [sp, #68]	; 0x44
   137cc:	mov	r5, #39	; 0x27
   137d0:	bne	13584 <__assert_fail@plt+0x2158>
   137d4:	ldr	r2, [sp, #44]	; 0x2c
   137d8:	eor	r3, r3, #1
   137dc:	and	r3, r3, r2
   137e0:	add	r9, r9, #1
   137e4:	uxtb	r3, r3
   137e8:	cmp	r3, #0
   137ec:	beq	135f4 <__assert_fail@plt+0x21c8>
   137f0:	cmp	sl, r4
   137f4:	movhi	r3, #39	; 0x27
   137f8:	strbhi	r3, [r8, r4]
   137fc:	add	r3, r4, #1
   13800:	cmp	sl, r3
   13804:	movhi	r2, #39	; 0x27
   13808:	strbhi	r2, [r8, r3]
   1380c:	mov	r3, #0
   13810:	add	r4, r4, #2
   13814:	str	r3, [sp, #44]	; 0x2c
   13818:	b	135f4 <__assert_fail@plt+0x21c8>
   1381c:	mov	r3, #114	; 0x72
   13820:	ldr	r1, [sp, #32]
   13824:	sub	r2, fp, #2
   13828:	clz	r2, r2
   1382c:	lsr	r2, r2, #5
   13830:	tst	r2, r1
   13834:	beq	1370c <__assert_fail@plt+0x22e0>
   13838:	mov	fp, r8
   1383c:	mov	r8, #2
   13840:	ldr	r3, [sp, #28]
   13844:	cmp	r3, #0
   13848:	movne	r8, #4
   1384c:	ldr	r3, [sp, #164]	; 0xa4
   13850:	mov	ip, #0
   13854:	bic	r3, r3, #2
   13858:	str	r3, [sp, #4]
   1385c:	ldr	r3, [sp, #76]	; 0x4c
   13860:	str	r8, [sp]
   13864:	str	r3, [sp, #16]
   13868:	ldr	r3, [sp, #80]	; 0x50
   1386c:	ldr	r2, [sp, #36]	; 0x24
   13870:	str	r3, [sp, #12]
   13874:	mov	r1, sl
   13878:	ldr	r3, [sp, #24]
   1387c:	mov	r0, fp
   13880:	str	ip, [sp, #8]
   13884:	bl	12fa4 <__assert_fail@plt+0x1b78>
   13888:	mov	r4, r0
   1388c:	ldr	r3, [pc, #1304]	; 13dac <__assert_fail@plt+0x2980>
   13890:	ldr	r2, [sp, #116]	; 0x74
   13894:	mov	r0, r4
   13898:	ldr	r3, [r3]
   1389c:	cmp	r2, r3
   138a0:	bne	14790 <__assert_fail@plt+0x3364>
   138a4:	add	sp, sp, #124	; 0x7c
   138a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138ac:	mov	r5, #110	; 0x6e
   138b0:	ldr	r3, [sp, #32]
   138b4:	mov	r2, #0
   138b8:	cmp	r3, #0
   138bc:	mov	r6, r2
   138c0:	beq	1359c <__assert_fail@plt+0x2170>
   138c4:	str	fp, [sp, #160]	; 0xa0
   138c8:	mov	fp, r8
   138cc:	ldr	r8, [sp, #160]	; 0xa0
   138d0:	mov	r3, r2
   138d4:	ldr	r2, [sp, #28]
   138d8:	and	r2, r2, r3
   138dc:	str	r2, [sp, #28]
   138e0:	b	13840 <__assert_fail@plt+0x2414>
   138e4:	mov	r5, #116	; 0x74
   138e8:	b	138b0 <__assert_fail@plt+0x2484>
   138ec:	mov	r5, #102	; 0x66
   138f0:	ldr	r3, [sp, #32]
   138f4:	cmp	r3, #0
   138f8:	bne	144a4 <__assert_fail@plt+0x3078>
   138fc:	mov	r6, #0
   13900:	b	135e0 <__assert_fail@plt+0x21b4>
   13904:	mov	r5, #118	; 0x76
   13908:	b	138f0 <__assert_fail@plt+0x24c4>
   1390c:	mov	r7, #0
   13910:	mov	r6, #0
   13914:	b	13550 <__assert_fail@plt+0x2124>
   13918:	ldr	r3, [sp, #32]
   1391c:	cmp	r3, #0
   13920:	bne	146e8 <__assert_fail@plt+0x32bc>
   13924:	mov	r7, r3
   13928:	ldr	r3, [sp, #44]	; 0x2c
   1392c:	sub	r2, fp, #2
   13930:	eor	r3, r3, #1
   13934:	clz	r2, r2
   13938:	lsr	r2, r2, #5
   1393c:	ands	r3, r2, r3
   13940:	beq	14388 <__assert_fail@plt+0x2f5c>
   13944:	cmp	sl, r4
   13948:	movhi	r1, #39	; 0x27
   1394c:	strbhi	r1, [r8, r4]
   13950:	add	r1, r4, #1
   13954:	cmp	sl, r1
   13958:	movhi	r0, #36	; 0x24
   1395c:	strbhi	r0, [r8, r1]
   13960:	add	r1, r4, #2
   13964:	cmp	sl, r1
   13968:	movhi	r0, #39	; 0x27
   1396c:	strbhi	r0, [r8, r1]
   13970:	add	r1, r4, #3
   13974:	cmp	sl, r1
   13978:	bls	143e8 <__assert_fail@plt+0x2fbc>
   1397c:	mov	r4, r1
   13980:	mov	r1, #92	; 0x5c
   13984:	strb	r1, [r8, r4]
   13988:	mov	r1, r4
   1398c:	str	r3, [sp, #44]	; 0x2c
   13990:	cmp	fp, #2
   13994:	add	r4, r4, #1
   13998:	beq	14430 <__assert_fail@plt+0x3004>
   1399c:	ldr	r0, [sp, #24]
   139a0:	add	r3, r9, #1
   139a4:	cmp	r3, r0
   139a8:	bcs	139c0 <__assert_fail@plt+0x2594>
   139ac:	ldr	r0, [sp, #36]	; 0x24
   139b0:	ldrb	r3, [r0, r3]
   139b4:	sub	r3, r3, #48	; 0x30
   139b8:	cmp	r3, #9
   139bc:	bls	14440 <__assert_fail@plt+0x3014>
   139c0:	mov	r5, #48	; 0x30
   139c4:	ldr	r3, [sp, #28]
   139c8:	eor	r3, r3, #1
   139cc:	orrs	r2, r2, r3
   139d0:	mov	r3, r6
   139d4:	moveq	r6, r2
   139d8:	beq	13554 <__assert_fail@plt+0x2128>
   139dc:	mov	r6, #0
   139e0:	b	1357c <__assert_fail@plt+0x2150>
   139e4:	mov	r2, #0
   139e8:	mov	r6, r2
   139ec:	mov	r5, #98	; 0x62
   139f0:	b	1359c <__assert_fail@plt+0x2170>
   139f4:	mov	r5, #97	; 0x61
   139f8:	b	138fc <__assert_fail@plt+0x24d0>
   139fc:	mov	r3, r7
   13a00:	mov	r6, r7
   13a04:	mov	r2, #0
   13a08:	mov	r7, r3
   13a0c:	mov	r5, #32
   13a10:	b	13534 <__assert_fail@plt+0x2108>
   13a14:	cmp	r9, #0
   13a18:	mov	r3, r7
   13a1c:	bne	13fe4 <__assert_fail@plt+0x2bb8>
   13a20:	mov	r6, r7
   13a24:	mov	r2, r9
   13a28:	mov	r7, r3
   13a2c:	b	13534 <__assert_fail@plt+0x2108>
   13a30:	mov	r6, r7
   13a34:	b	13550 <__assert_fail@plt+0x2124>
   13a38:	mov	r7, #0
   13a3c:	ldr	r3, [sp, #64]	; 0x40
   13a40:	cmp	r3, #1
   13a44:	bne	140a0 <__assert_fail@plt+0x2c74>
   13a48:	bl	11294 <__ctype_b_loc@plt>
   13a4c:	ldr	r2, [sp, #64]	; 0x40
   13a50:	sxth	r3, r5
   13a54:	mov	ip, r2
   13a58:	lsl	r3, r3, #1
   13a5c:	ldr	r2, [r0]
   13a60:	ldrh	r3, [r2, r3]
   13a64:	and	r3, r3, #16384	; 0x4000
   13a68:	cmp	r3, #0
   13a6c:	ldr	r3, [sp, #28]
   13a70:	movne	r6, #1
   13a74:	moveq	r6, #0
   13a78:	movne	r2, #0
   13a7c:	andeq	r2, r3, #1
   13a80:	cmp	r2, #0
   13a84:	bne	143b0 <__assert_fail@plt+0x2f84>
   13a88:	sub	r2, fp, #2
   13a8c:	clz	r2, r2
   13a90:	lsr	r2, r2, #5
   13a94:	b	13534 <__assert_fail@plt+0x2108>
   13a98:	cmp	r4, #0
   13a9c:	bne	1475c <__assert_fail@plt+0x3330>
   13aa0:	str	r4, [sp, #28]
   13aa4:	cmp	sl, #0
   13aa8:	bne	147a0 <__assert_fail@plt+0x3374>
   13aac:	ldr	r3, [pc, #772]	; 13db8 <__assert_fail@plt+0x298c>
   13ab0:	mov	r4, #1
   13ab4:	str	r4, [sp, #40]	; 0x28
   13ab8:	str	r3, [sp, #60]	; 0x3c
   13abc:	str	r4, [sp, #52]	; 0x34
   13ac0:	str	sl, [sp, #72]	; 0x48
   13ac4:	str	sl, [sp, #68]	; 0x44
   13ac8:	str	sl, [sp, #44]	; 0x2c
   13acc:	str	sl, [sp, #32]
   13ad0:	mov	r8, #2
   13ad4:	b	1309c <__assert_fail@plt+0x1c70>
   13ad8:	ldr	r3, [sp, #36]	; 0x24
   13adc:	ldrb	r5, [r3, r9]
   13ae0:	cmp	r5, #126	; 0x7e
   13ae4:	ldrls	pc, [pc, r5, lsl #2]
   13ae8:	b	13a3c <__assert_fail@plt+0x2610>
   13aec:	andeq	r3, r1, r0, lsr #26
   13af0:	andeq	r3, r1, ip, lsr sl
   13af4:	andeq	r3, r1, ip, lsr sl
   13af8:	andeq	r3, r1, ip, lsr sl
   13afc:	andeq	r3, r1, ip, lsr sl
   13b00:	andeq	r3, r1, ip, lsr sl
   13b04:	andeq	r3, r1, ip, lsr sl
   13b08:	andeq	r3, r1, ip, lsl #26
   13b0c:	strdeq	r3, [r1], -r8
   13b10:	strdeq	r3, [r1], -r0
   13b14:	andeq	r3, r1, r8, ror #25
   13b18:	muleq	r1, r8, sp
   13b1c:	andeq	r3, r1, r4, lsl #27
   13b20:	andeq	r3, r1, ip, lsl r8
   13b24:	andeq	r3, r1, ip, lsr sl
   13b28:	andeq	r3, r1, ip, lsr sl
   13b2c:	andeq	r3, r1, ip, lsr sl
   13b30:	andeq	r3, r1, ip, lsr sl
   13b34:	andeq	r3, r1, ip, lsr sl
   13b38:	andeq	r3, r1, ip, lsr sl
   13b3c:	andeq	r3, r1, ip, lsr sl
   13b40:	andeq	r3, r1, ip, lsr sl
   13b44:	andeq	r3, r1, ip, lsr sl
   13b48:	andeq	r3, r1, ip, lsr sl
   13b4c:	andeq	r3, r1, ip, lsr sl
   13b50:	andeq	r3, r1, ip, lsr sl
   13b54:	andeq	r3, r1, ip, lsr sl
   13b58:	andeq	r3, r1, ip, lsr sl
   13b5c:	andeq	r3, r1, ip, lsr sl
   13b60:	andeq	r3, r1, ip, lsr sl
   13b64:	andeq	r3, r1, ip, lsr sl
   13b68:	andeq	r3, r1, ip, lsr sl
   13b6c:	andeq	r3, r1, r4, ror sp
   13b70:	andeq	r3, r1, r0, ror #26
   13b74:	andeq	r3, r1, r0, ror #26
   13b78:	andeq	r3, r1, r0, asr sp
   13b7c:	andeq	r3, r1, r0, ror #26
   13b80:	andeq	r3, r1, r8, lsl #21
   13b84:	andeq	r3, r1, r0, ror #26
   13b88:	andeq	r3, r1, r0, asr r7
   13b8c:	andeq	r3, r1, r0, ror #26
   13b90:	andeq	r3, r1, r0, ror #26
   13b94:	andeq	r3, r1, r0, ror #26
   13b98:	andeq	r3, r1, r8, lsl #21
   13b9c:	andeq	r3, r1, r8, lsl #21
   13ba0:	andeq	r3, r1, r8, lsl #21
   13ba4:	andeq	r3, r1, r8, lsl #21
   13ba8:	andeq	r3, r1, r8, lsl #21
   13bac:	andeq	r3, r1, r8, lsl #21
   13bb0:	andeq	r3, r1, r8, lsl #21
   13bb4:	andeq	r3, r1, r8, lsl #21
   13bb8:	andeq	r3, r1, r8, lsl #21
   13bbc:	andeq	r3, r1, r8, lsl #21
   13bc0:	andeq	r3, r1, r8, lsl #21
   13bc4:	andeq	r3, r1, r8, lsl #21
   13bc8:	andeq	r3, r1, r8, lsl #21
   13bcc:	andeq	r3, r1, r8, lsl #21
   13bd0:	andeq	r3, r1, r8, lsl #21
   13bd4:	andeq	r3, r1, r8, lsl #21
   13bd8:	andeq	r3, r1, r0, ror #26
   13bdc:	andeq	r3, r1, r0, ror #26
   13be0:	andeq	r3, r1, r0, ror #26
   13be4:	andeq	r3, r1, r0, ror #26
   13be8:	andeq	r3, r1, r4, lsr #14
   13bec:	andeq	r3, r1, ip, lsr sl
   13bf0:	andeq	r3, r1, r8, lsl #21
   13bf4:	andeq	r3, r1, r8, lsl #21
   13bf8:	andeq	r3, r1, r8, lsl #21
   13bfc:	andeq	r3, r1, r8, lsl #21
   13c00:	andeq	r3, r1, r8, lsl #21
   13c04:	andeq	r3, r1, r8, lsl #21
   13c08:	andeq	r3, r1, r8, lsl #21
   13c0c:	andeq	r3, r1, r8, lsl #21
   13c10:	andeq	r3, r1, r8, lsl #21
   13c14:	andeq	r3, r1, r8, lsl #21
   13c18:	andeq	r3, r1, r8, lsl #21
   13c1c:	andeq	r3, r1, r8, lsl #21
   13c20:	andeq	r3, r1, r8, lsl #21
   13c24:	andeq	r3, r1, r8, lsl #21
   13c28:	andeq	r3, r1, r8, lsl #21
   13c2c:	andeq	r3, r1, r8, lsl #21
   13c30:	andeq	r3, r1, r8, lsl #21
   13c34:	andeq	r3, r1, r8, lsl #21
   13c38:	andeq	r3, r1, r8, lsl #21
   13c3c:	andeq	r3, r1, r8, lsl #21
   13c40:	andeq	r3, r1, r8, lsl #21
   13c44:	andeq	r3, r1, r8, lsl #21
   13c48:	andeq	r3, r1, r8, lsl #21
   13c4c:	andeq	r3, r1, r8, lsl #21
   13c50:	andeq	r3, r1, r8, lsl #21
   13c54:	andeq	r3, r1, r8, lsl #21
   13c58:	andeq	r3, r1, r0, ror #26
   13c5c:	ldrdeq	r3, [r1], -ip
   13c60:	andeq	r3, r1, r8, lsl #21
   13c64:	andeq	r3, r1, r0, ror #26
   13c68:	andeq	r3, r1, r8, lsl #21
   13c6c:	andeq	r3, r1, r0, ror #26
   13c70:	andeq	r3, r1, r8, lsl #21
   13c74:	andeq	r3, r1, r8, lsl #21
   13c78:	andeq	r3, r1, r8, lsl #21
   13c7c:	andeq	r3, r1, r8, lsl #21
   13c80:	andeq	r3, r1, r8, lsl #21
   13c84:	andeq	r3, r1, r8, lsl #21
   13c88:	andeq	r3, r1, r8, lsl #21
   13c8c:	andeq	r3, r1, r8, lsl #21
   13c90:	andeq	r3, r1, r8, lsl #21
   13c94:	andeq	r3, r1, r8, lsl #21
   13c98:	andeq	r3, r1, r8, lsl #21
   13c9c:	andeq	r3, r1, r8, lsl #21
   13ca0:	andeq	r3, r1, r8, lsl #21
   13ca4:	andeq	r3, r1, r8, lsl #21
   13ca8:	andeq	r3, r1, r8, lsl #21
   13cac:	andeq	r3, r1, r8, lsl #21
   13cb0:	andeq	r3, r1, r8, lsl #21
   13cb4:	andeq	r3, r1, r8, lsl #21
   13cb8:	andeq	r3, r1, r8, lsl #21
   13cbc:	andeq	r3, r1, r8, lsl #21
   13cc0:	andeq	r3, r1, r8, lsl #21
   13cc4:	andeq	r3, r1, r8, lsl #21
   13cc8:	andeq	r3, r1, r8, lsl #21
   13ccc:	andeq	r3, r1, r8, lsl #21
   13cd0:	andeq	r3, r1, r8, lsl #21
   13cd4:	andeq	r3, r1, r8, lsl #21
   13cd8:	strdeq	r3, [r1], -r4
   13cdc:	andeq	r3, r1, r0, ror #26
   13ce0:	strdeq	r3, [r1], -r4
   13ce4:	andeq	r3, r1, r0, asr sp
   13ce8:	mov	r3, #110	; 0x6e
   13cec:	b	13820 <__assert_fail@plt+0x23f4>
   13cf0:	mov	r3, #116	; 0x74
   13cf4:	b	13820 <__assert_fail@plt+0x23f4>
   13cf8:	sub	r2, fp, #2
   13cfc:	mov	r3, #98	; 0x62
   13d00:	clz	r2, r2
   13d04:	lsr	r2, r2, #5
   13d08:	b	1370c <__assert_fail@plt+0x22e0>
   13d0c:	sub	r2, fp, #2
   13d10:	mov	r3, #97	; 0x61
   13d14:	clz	r2, r2
   13d18:	lsr	r2, r2, #5
   13d1c:	b	1370c <__assert_fail@plt+0x22e0>
   13d20:	ldr	r3, [sp, #28]
   13d24:	cmp	r3, #0
   13d28:	bne	13918 <__assert_fail@plt+0x24ec>
   13d2c:	ldr	r3, [sp, #164]	; 0xa4
   13d30:	tst	r3, #1
   13d34:	bne	143a8 <__assert_fail@plt+0x2f7c>
   13d38:	ldr	r6, [sp, #28]
   13d3c:	sub	r2, fp, #2
   13d40:	mov	r7, r6
   13d44:	clz	r2, r2
   13d48:	lsr	r2, r2, #5
   13d4c:	b	13534 <__assert_fail@plt+0x2108>
   13d50:	sub	r2, fp, #2
   13d54:	clz	r2, r2
   13d58:	lsr	r2, r2, #5
   13d5c:	b	13520 <__assert_fail@plt+0x20f4>
   13d60:	sub	r2, fp, #2
   13d64:	mov	r6, #0
   13d68:	clz	r2, r2
   13d6c:	lsr	r2, r2, #5
   13d70:	b	13528 <__assert_fail@plt+0x20fc>
   13d74:	sub	r2, fp, #2
   13d78:	clz	r2, r2
   13d7c:	lsr	r2, r2, #5
   13d80:	b	13528 <__assert_fail@plt+0x20fc>
   13d84:	sub	r2, fp, #2
   13d88:	mov	r3, #102	; 0x66
   13d8c:	clz	r2, r2
   13d90:	lsr	r2, r2, #5
   13d94:	b	1370c <__assert_fail@plt+0x22e0>
   13d98:	sub	r2, fp, #2
   13d9c:	mov	r3, #118	; 0x76
   13da0:	clz	r2, r2
   13da4:	lsr	r2, r2, #5
   13da8:	b	1370c <__assert_fail@plt+0x22e0>
   13dac:	andeq	fp, r2, r8, lsl #30
   13db0:	andeq	sl, r1, ip, asr sp
   13db4:	andeq	sl, r1, r4, asr #26
   13db8:	andeq	sl, r1, r8, asr sp
   13dbc:	ldr	r3, [sp, #48]	; 0x30
   13dc0:	ldrb	r5, [r3]
   13dc4:	cmp	r5, #126	; 0x7e
   13dc8:	ldrls	pc, [pc, r5, lsl #2]
   13dcc:	b	13a38 <__assert_fail@plt+0x260c>
   13dd0:	andeq	r3, r1, r8, lsl r9
   13dd4:	andeq	r3, r1, r8, lsr sl
   13dd8:	andeq	r3, r1, r8, lsr sl
   13ddc:	andeq	r3, r1, r8, lsr sl
   13de0:	andeq	r3, r1, r8, lsr sl
   13de4:	andeq	r3, r1, r8, lsr sl
   13de8:	andeq	r3, r1, r8, lsr sl
   13dec:	andeq	r4, r1, r0, lsl r0
   13df0:	andeq	r4, r1, r8
   13df4:	andeq	r3, r1, r4, ror #17
   13df8:	andeq	r3, r1, ip, lsr #17
   13dfc:	andeq	r3, r1, r4, lsl #18
   13e00:	andeq	r3, r1, ip, ror #17
   13e04:	strdeq	r3, [r1], -ip
   13e08:	andeq	r3, r1, r8, lsr sl
   13e0c:	andeq	r3, r1, r8, lsr sl
   13e10:	andeq	r3, r1, r8, lsr sl
   13e14:	andeq	r3, r1, r8, lsr sl
   13e18:	andeq	r3, r1, r8, lsr sl
   13e1c:	andeq	r3, r1, r8, lsr sl
   13e20:	andeq	r3, r1, r8, lsr sl
   13e24:	andeq	r3, r1, r8, lsr sl
   13e28:	andeq	r3, r1, r8, lsr sl
   13e2c:	andeq	r3, r1, r8, lsr sl
   13e30:	andeq	r3, r1, r8, lsr sl
   13e34:	andeq	r3, r1, r8, lsr sl
   13e38:	andeq	r3, r1, r8, lsr sl
   13e3c:	andeq	r3, r1, r8, lsr sl
   13e40:	andeq	r3, r1, r8, lsr sl
   13e44:	andeq	r3, r1, r8, lsr sl
   13e48:	andeq	r3, r1, r8, lsr sl
   13e4c:	andeq	r3, r1, r8, lsr sl
   13e50:	strdeq	r3, [r1], -r4
   13e54:	andeq	r3, r1, ip, lsl #18
   13e58:	andeq	r3, r1, ip, lsl #18
   13e5c:	ldrdeq	r3, [r1], -r8
   13e60:	andeq	r3, r1, ip, lsl #18
   13e64:	andeq	r3, r1, ip, asr #31
   13e68:	andeq	r3, r1, ip, lsl #18
   13e6c:	andeq	r3, r1, ip, asr #14
   13e70:	andeq	r3, r1, ip, lsl #18
   13e74:	andeq	r3, r1, ip, lsl #18
   13e78:	andeq	r3, r1, ip, lsl #18
   13e7c:	andeq	r3, r1, ip, asr #31
   13e80:	andeq	r3, r1, ip, asr #31
   13e84:	andeq	r3, r1, ip, asr #31
   13e88:	andeq	r3, r1, ip, asr #31
   13e8c:	andeq	r3, r1, ip, asr #31
   13e90:	andeq	r3, r1, ip, asr #31
   13e94:	andeq	r3, r1, ip, asr #31
   13e98:	andeq	r3, r1, ip, asr #31
   13e9c:	andeq	r3, r1, ip, asr #31
   13ea0:	andeq	r3, r1, ip, asr #31
   13ea4:	andeq	r3, r1, ip, asr #31
   13ea8:	andeq	r3, r1, ip, asr #31
   13eac:	andeq	r3, r1, ip, asr #31
   13eb0:	andeq	r3, r1, ip, asr #31
   13eb4:	andeq	r3, r1, ip, asr #31
   13eb8:	andeq	r3, r1, ip, asr #31
   13ebc:	andeq	r3, r1, ip, lsl #18
   13ec0:	andeq	r3, r1, ip, lsl #18
   13ec4:	andeq	r3, r1, ip, lsl #18
   13ec8:	andeq	r3, r1, ip, lsl #18
   13ecc:	andeq	r3, r1, r0, lsr #14
   13ed0:	andeq	r3, r1, r8, lsr sl
   13ed4:	andeq	r3, r1, ip, asr #31
   13ed8:	andeq	r3, r1, ip, asr #31
   13edc:	andeq	r3, r1, ip, asr #31
   13ee0:	andeq	r3, r1, ip, asr #31
   13ee4:	andeq	r3, r1, ip, asr #31
   13ee8:	andeq	r3, r1, ip, asr #31
   13eec:	andeq	r3, r1, ip, asr #31
   13ef0:	andeq	r3, r1, ip, asr #31
   13ef4:	andeq	r3, r1, ip, asr #31
   13ef8:	andeq	r3, r1, ip, asr #31
   13efc:	andeq	r3, r1, ip, asr #31
   13f00:	andeq	r3, r1, ip, asr #31
   13f04:	andeq	r3, r1, ip, asr #31
   13f08:	andeq	r3, r1, ip, asr #31
   13f0c:	andeq	r3, r1, ip, asr #31
   13f10:	andeq	r3, r1, ip, asr #31
   13f14:	andeq	r3, r1, ip, asr #31
   13f18:	andeq	r3, r1, ip, asr #31
   13f1c:	andeq	r3, r1, ip, asr #31
   13f20:	andeq	r3, r1, ip, asr #31
   13f24:	andeq	r3, r1, ip, asr #31
   13f28:	andeq	r3, r1, ip, asr #31
   13f2c:	andeq	r3, r1, ip, asr #31
   13f30:	andeq	r3, r1, ip, asr #31
   13f34:	andeq	r3, r1, ip, asr #31
   13f38:	andeq	r3, r1, ip, asr #31
   13f3c:	andeq	r3, r1, ip, lsl #18
   13f40:	ldrdeq	r3, [r1], -r8
   13f44:	andeq	r3, r1, ip, asr #31
   13f48:	andeq	r3, r1, ip, lsl #18
   13f4c:	andeq	r3, r1, ip, asr #31
   13f50:	andeq	r3, r1, ip, lsl #18
   13f54:	andeq	r3, r1, ip, asr #31
   13f58:	andeq	r3, r1, ip, asr #31
   13f5c:	andeq	r3, r1, ip, asr #31
   13f60:	andeq	r3, r1, ip, asr #31
   13f64:	andeq	r3, r1, ip, asr #31
   13f68:	andeq	r3, r1, ip, asr #31
   13f6c:	andeq	r3, r1, ip, asr #31
   13f70:	andeq	r3, r1, ip, asr #31
   13f74:	andeq	r3, r1, ip, asr #31
   13f78:	andeq	r3, r1, ip, asr #31
   13f7c:	andeq	r3, r1, ip, asr #31
   13f80:	andeq	r3, r1, ip, asr #31
   13f84:	andeq	r3, r1, ip, asr #31
   13f88:	andeq	r3, r1, ip, asr #31
   13f8c:	andeq	r3, r1, ip, asr #31
   13f90:	andeq	r3, r1, ip, asr #31
   13f94:	andeq	r3, r1, ip, asr #31
   13f98:	andeq	r3, r1, ip, asr #31
   13f9c:	andeq	r3, r1, ip, asr #31
   13fa0:	andeq	r3, r1, ip, asr #31
   13fa4:	andeq	r3, r1, ip, asr #31
   13fa8:	andeq	r3, r1, ip, asr #31
   13fac:	andeq	r3, r1, ip, asr #31
   13fb0:	andeq	r3, r1, ip, asr #31
   13fb4:	andeq	r3, r1, ip, asr #31
   13fb8:	andeq	r3, r1, ip, asr #31
   13fbc:	strdeq	r3, [r1], -r0
   13fc0:	andeq	r3, r1, ip, lsl #18
   13fc4:	strdeq	r3, [r1], -r0
   13fc8:	ldrdeq	r3, [r1], -r8
   13fcc:	mov	r6, r7
   13fd0:	mov	r7, #0
   13fd4:	b	13550 <__assert_fail@plt+0x2124>
   13fd8:	cmp	r9, #0
   13fdc:	mov	r3, #0
   13fe0:	beq	13a20 <__assert_fail@plt+0x25f4>
   13fe4:	mov	r6, #0
   13fe8:	mov	r7, r3
   13fec:	mov	r3, r6
   13ff0:	b	13554 <__assert_fail@plt+0x2128>
   13ff4:	mov	r3, #0
   13ff8:	b	13a00 <__assert_fail@plt+0x25d4>
   13ffc:	mov	r7, #0
   14000:	mov	r3, #114	; 0x72
   14004:	b	13820 <__assert_fail@plt+0x23f4>
   14008:	mov	r5, #98	; 0x62
   1400c:	b	138b0 <__assert_fail@plt+0x2484>
   14010:	mov	r5, #97	; 0x61
   14014:	b	138f0 <__assert_fail@plt+0x24c4>
   14018:	ldr	r3, [sp, #32]
   1401c:	cmp	r3, #0
   14020:	bne	14468 <__assert_fail@plt+0x303c>
   14024:	add	r9, r9, #1
   14028:	ldr	r3, [sp, #44]	; 0x2c
   1402c:	mov	r6, #0
   14030:	mov	r5, #92	; 0x5c
   14034:	b	137e8 <__assert_fail@plt+0x23bc>
   14038:	ldr	r3, [sp, #36]	; 0x24
   1403c:	ldrb	r3, [r3, #1]
   14040:	adds	r3, r3, #0
   14044:	movne	r3, #1
   14048:	b	1350c <__assert_fail@plt+0x20e0>
   1404c:	ldr	r3, [sp, #164]	; 0xa4
   14050:	ands	r3, r3, #4
   14054:	beq	14078 <__assert_fail@plt+0x2c4c>
   14058:	ldr	r2, [sp, #24]
   1405c:	add	r3, r9, #2
   14060:	cmp	r3, r2
   14064:	bcs	14078 <__assert_fail@plt+0x2c4c>
   14068:	ldr	r2, [sp, #48]	; 0x30
   1406c:	ldrb	r5, [r2, #1]
   14070:	cmp	r5, #63	; 0x3f
   14074:	beq	144dc <__assert_fail@plt+0x30b0>
   14078:	mov	r2, #0
   1407c:	mov	r6, r2
   14080:	mov	r5, #63	; 0x3f
   14084:	b	13534 <__assert_fail@plt+0x2108>
   14088:	ldr	r3, [sp, #32]
   1408c:	cmp	r3, #0
   14090:	bne	14468 <__assert_fail@plt+0x303c>
   14094:	mov	r6, r3
   14098:	mov	r5, #63	; 0x3f
   1409c:	b	1357c <__assert_fail@plt+0x2150>
   140a0:	ldr	r3, [sp, #24]
   140a4:	cmn	r3, #1
   140a8:	mov	r3, #0
   140ac:	str	r3, [sp, #108]	; 0x6c
   140b0:	str	r3, [sp, #112]	; 0x70
   140b4:	bne	140c4 <__assert_fail@plt+0x2c98>
   140b8:	ldr	r0, [sp, #36]	; 0x24
   140bc:	bl	112b8 <strlen@plt>
   140c0:	str	r0, [sp, #24]
   140c4:	mov	r3, #0
   140c8:	str	sl, [sp, #88]	; 0x58
   140cc:	ldr	sl, [sp, #36]	; 0x24
   140d0:	str	r5, [sp, #92]	; 0x5c
   140d4:	mov	r5, r3
   140d8:	str	r7, [sp, #96]	; 0x60
   140dc:	str	r4, [sp, #100]	; 0x64
   140e0:	str	r8, [sp, #84]	; 0x54
   140e4:	ldr	r3, [sp, #24]
   140e8:	add	r4, r9, r5
   140ec:	add	r7, sl, r4
   140f0:	sub	r2, r3, r4
   140f4:	mov	r1, r7
   140f8:	add	r3, sp, #108	; 0x6c
   140fc:	add	r0, sp, #104	; 0x68
   14100:	bl	181f0 <fts_children@@Base+0x14c>
   14104:	subs	r8, r0, #0
   14108:	beq	14158 <__assert_fail@plt+0x2d2c>
   1410c:	cmn	r8, #1
   14110:	beq	144b8 <__assert_fail@plt+0x308c>
   14114:	cmn	r8, #2
   14118:	beq	145d8 <__assert_fail@plt+0x31ac>
   1411c:	ldr	r3, [sp, #32]
   14120:	cmp	fp, #2
   14124:	movne	r3, #0
   14128:	andeq	r3, r3, #1
   1412c:	cmp	r3, #0
   14130:	bne	142b8 <__assert_fail@plt+0x2e8c>
   14134:	ldr	r0, [sp, #104]	; 0x68
   14138:	bl	111e0 <iswprint@plt>
   1413c:	add	r5, r5, r8
   14140:	cmp	r0, #0
   14144:	add	r0, sp, #108	; 0x6c
   14148:	moveq	r6, #0
   1414c:	bl	11180 <mbsinit@plt>
   14150:	cmp	r0, #0
   14154:	beq	140e4 <__assert_fail@plt+0x2cb8>
   14158:	ldr	r3, [sp, #28]
   1415c:	mov	ip, r5
   14160:	eor	r2, r6, #1
   14164:	ldr	r5, [sp, #92]	; 0x5c
   14168:	ldr	r7, [sp, #96]	; 0x60
   1416c:	ldr	r4, [sp, #100]	; 0x64
   14170:	ldr	r8, [sp, #84]	; 0x54
   14174:	ldr	sl, [sp, #88]	; 0x58
   14178:	and	r2, r2, r3
   1417c:	cmp	ip, #1
   14180:	bls	13a80 <__assert_fail@plt+0x2654>
   14184:	add	r1, ip, r9
   14188:	ldr	lr, [sp, #48]	; 0x30
   1418c:	mov	r0, #0
   14190:	str	r6, [sp, #48]	; 0x30
   14194:	mov	ip, #39	; 0x27
   14198:	ldr	r6, [sp, #44]	; 0x2c
   1419c:	b	14254 <__assert_fail@plt+0x2e28>
   141a0:	ldr	r0, [sp, #32]
   141a4:	sub	r3, fp, #2
   141a8:	cmp	r0, #0
   141ac:	clz	r3, r3
   141b0:	lsr	r3, r3, #5
   141b4:	bne	143bc <__assert_fail@plt+0x2f90>
   141b8:	eor	r0, r6, #1
   141bc:	ands	r3, r3, r0
   141c0:	beq	141f0 <__assert_fail@plt+0x2dc4>
   141c4:	add	r0, r4, #1
   141c8:	cmp	sl, r4
   141cc:	strbhi	ip, [r8, r4]
   141d0:	cmp	sl, r0
   141d4:	movhi	r6, #36	; 0x24
   141d8:	strbhi	r6, [r8, r0]
   141dc:	add	r0, r4, #2
   141e0:	mov	r6, r3
   141e4:	add	r4, r4, #3
   141e8:	cmp	sl, r0
   141ec:	strbhi	ip, [r8, r0]
   141f0:	cmp	sl, r4
   141f4:	movhi	r3, #92	; 0x5c
   141f8:	strbhi	r3, [r8, r4]
   141fc:	add	r3, r4, #1
   14200:	cmp	sl, r3
   14204:	lsrhi	r0, r5, #6
   14208:	addhi	r0, r0, #48	; 0x30
   1420c:	strbhi	r0, [r8, r3]
   14210:	add	r0, r4, #2
   14214:	cmp	sl, r0
   14218:	lsrhi	r3, r5, #3
   1421c:	andhi	r3, r3, #7
   14220:	addhi	r3, r3, #48	; 0x30
   14224:	add	r9, r9, #1
   14228:	strbhi	r3, [r8, r0]
   1422c:	and	r5, r5, #7
   14230:	cmp	r9, r1
   14234:	add	r5, r5, #48	; 0x30
   14238:	add	r4, r4, #3
   1423c:	bcs	143dc <__assert_fail@plt+0x2fb0>
   14240:	mov	r0, r2
   14244:	cmp	sl, r4
   14248:	strbhi	r5, [r8, r4]
   1424c:	ldrb	r5, [lr, #1]!
   14250:	add	r4, r4, #1
   14254:	cmp	r2, #0
   14258:	bne	141a0 <__assert_fail@plt+0x2d74>
   1425c:	eor	r3, r0, #1
   14260:	and	r3, r3, r6
   14264:	cmp	r7, #0
   14268:	uxtb	r3, r3
   1426c:	beq	14280 <__assert_fail@plt+0x2e54>
   14270:	cmp	sl, r4
   14274:	movhi	r7, #92	; 0x5c
   14278:	strbhi	r7, [r8, r4]
   1427c:	add	r4, r4, #1
   14280:	add	r9, r9, #1
   14284:	cmp	r9, r1
   14288:	bcs	143d0 <__assert_fail@plt+0x2fa4>
   1428c:	cmp	r3, #0
   14290:	beq	143fc <__assert_fail@plt+0x2fd0>
   14294:	cmp	sl, r4
   14298:	add	r3, r4, #1
   1429c:	strbhi	ip, [r8, r4]
   142a0:	mov	r7, #0
   142a4:	cmp	sl, r3
   142a8:	strbhi	ip, [r8, r3]
   142ac:	add	r4, r4, #2
   142b0:	mov	r6, r7
   142b4:	b	14244 <__assert_fail@plt+0x2e18>
   142b8:	cmp	r8, #1
   142bc:	beq	14134 <__assert_fail@plt+0x2d08>
   142c0:	add	r1, r4, #1
   142c4:	add	r3, sl, r8
   142c8:	add	r1, sl, r1
   142cc:	add	r4, r3, r4
   142d0:	ldrb	r3, [r1], #1
   142d4:	sub	r3, r3, #91	; 0x5b
   142d8:	cmp	r3, #33	; 0x21
   142dc:	ldrls	pc, [pc, r3, lsl #2]
   142e0:	b	1436c <__assert_fail@plt+0x2f40>
   142e4:	andeq	r4, r1, r8, ror r3
   142e8:	andeq	r4, r1, r8, ror r3
   142ec:	andeq	r4, r1, ip, ror #6
   142f0:	andeq	r4, r1, r8, ror r3
   142f4:	andeq	r4, r1, ip, ror #6
   142f8:	andeq	r4, r1, r8, ror r3
   142fc:	andeq	r4, r1, ip, ror #6
   14300:	andeq	r4, r1, ip, ror #6
   14304:	andeq	r4, r1, ip, ror #6
   14308:	andeq	r4, r1, ip, ror #6
   1430c:	andeq	r4, r1, ip, ror #6
   14310:	andeq	r4, r1, ip, ror #6
   14314:	andeq	r4, r1, ip, ror #6
   14318:	andeq	r4, r1, ip, ror #6
   1431c:	andeq	r4, r1, ip, ror #6
   14320:	andeq	r4, r1, ip, ror #6
   14324:	andeq	r4, r1, ip, ror #6
   14328:	andeq	r4, r1, ip, ror #6
   1432c:	andeq	r4, r1, ip, ror #6
   14330:	andeq	r4, r1, ip, ror #6
   14334:	andeq	r4, r1, ip, ror #6
   14338:	andeq	r4, r1, ip, ror #6
   1433c:	andeq	r4, r1, ip, ror #6
   14340:	andeq	r4, r1, ip, ror #6
   14344:	andeq	r4, r1, ip, ror #6
   14348:	andeq	r4, r1, ip, ror #6
   1434c:	andeq	r4, r1, ip, ror #6
   14350:	andeq	r4, r1, ip, ror #6
   14354:	andeq	r4, r1, ip, ror #6
   14358:	andeq	r4, r1, ip, ror #6
   1435c:	andeq	r4, r1, ip, ror #6
   14360:	andeq	r4, r1, ip, ror #6
   14364:	andeq	r4, r1, ip, ror #6
   14368:	andeq	r4, r1, r8, ror r3
   1436c:	cmp	r4, r1
   14370:	bne	142d0 <__assert_fail@plt+0x2ea4>
   14374:	b	14134 <__assert_fail@plt+0x2d08>
   14378:	ldr	fp, [sp, #84]	; 0x54
   1437c:	ldr	sl, [sp, #88]	; 0x58
   14380:	mov	r8, #2
   14384:	b	13840 <__assert_fail@plt+0x2414>
   14388:	cmp	sl, r4
   1438c:	movls	r1, r4
   14390:	bls	13990 <__assert_fail@plt+0x2564>
   14394:	ldr	r3, [sp, #44]	; 0x2c
   14398:	b	13980 <__assert_fail@plt+0x2554>
   1439c:	str	sl, [sp, #72]	; 0x48
   143a0:	ldr	sl, [sp, #32]
   143a4:	b	137b8 <__assert_fail@plt+0x238c>
   143a8:	add	r9, r9, #1
   143ac:	b	130ac <__assert_fail@plt+0x1c80>
   143b0:	ldr	r2, [sp, #28]
   143b4:	mov	r6, #0
   143b8:	b	14184 <__assert_fail@plt+0x2d58>
   143bc:	str	fp, [sp, #160]	; 0xa0
   143c0:	str	r3, [sp, #28]
   143c4:	mov	fp, r8
   143c8:	ldr	r8, [sp, #160]	; 0xa0
   143cc:	b	13840 <__assert_fail@plt+0x2414>
   143d0:	str	r6, [sp, #44]	; 0x2c
   143d4:	ldr	r6, [sp, #48]	; 0x30
   143d8:	b	137e8 <__assert_fail@plt+0x23bc>
   143dc:	str	r6, [sp, #44]	; 0x2c
   143e0:	ldr	r6, [sp, #48]	; 0x30
   143e4:	b	135f4 <__assert_fail@plt+0x21c8>
   143e8:	add	r4, r4, #4
   143ec:	str	r3, [sp, #44]	; 0x2c
   143f0:	mov	r6, #0
   143f4:	mov	r5, #48	; 0x30
   143f8:	b	1357c <__assert_fail@plt+0x2150>
   143fc:	mov	r7, r3
   14400:	b	14244 <__assert_fail@plt+0x2e18>
   14404:	ldr	r3, [pc, #-1624]	; 13db4 <__assert_fail@plt+0x2988>
   14408:	mov	r4, #1
   1440c:	str	r4, [sp, #40]	; 0x28
   14410:	str	r4, [sp, #28]
   14414:	str	r4, [sp, #52]	; 0x34
   14418:	str	sl, [sp, #72]	; 0x48
   1441c:	str	sl, [sp, #68]	; 0x44
   14420:	str	sl, [sp, #44]	; 0x2c
   14424:	str	sl, [sp, #32]
   14428:	str	r3, [sp, #60]	; 0x3c
   1442c:	b	1309c <__assert_fail@plt+0x1c70>
   14430:	mov	r3, r6
   14434:	mov	r5, #48	; 0x30
   14438:	mov	r6, #0
   1443c:	b	1357c <__assert_fail@plt+0x2150>
   14440:	cmp	sl, r4
   14444:	movhi	r3, #48	; 0x30
   14448:	strbhi	r3, [r8, r4]
   1444c:	add	r3, r1, #2
   14450:	cmp	sl, r3
   14454:	movhi	r0, #48	; 0x30
   14458:	strbhi	r0, [r8, r3]
   1445c:	add	r4, r1, #3
   14460:	mov	r5, #48	; 0x30
   14464:	b	139c4 <__assert_fail@plt+0x2598>
   14468:	str	fp, [sp, #160]	; 0xa0
   1446c:	mov	fp, r8
   14470:	ldr	r8, [sp, #160]	; 0xa0
   14474:	b	13840 <__assert_fail@plt+0x2414>
   14478:	ldr	r2, [sp, #80]	; 0x50
   1447c:	ldrb	r3, [r2]
   14480:	cmp	r3, #0
   14484:	beq	1306c <__assert_fail@plt+0x1c40>
   14488:	cmp	sl, r4
   1448c:	strbhi	r3, [fp, r4]
   14490:	ldrb	r3, [r2, #1]!
   14494:	add	r4, r4, #1
   14498:	cmp	r3, #0
   1449c:	bne	14488 <__assert_fail@plt+0x305c>
   144a0:	b	1306c <__assert_fail@plt+0x1c40>
   144a4:	str	fp, [sp, #160]	; 0xa0
   144a8:	mov	r3, #0
   144ac:	mov	fp, r8
   144b0:	ldr	r8, [sp, #160]	; 0xa0
   144b4:	b	138d4 <__assert_fail@plt+0x24a8>
   144b8:	mov	ip, r5
   144bc:	ldr	r7, [sp, #96]	; 0x60
   144c0:	ldr	r5, [sp, #92]	; 0x5c
   144c4:	ldr	r4, [sp, #100]	; 0x64
   144c8:	ldr	r8, [sp, #84]	; 0x54
   144cc:	ldr	sl, [sp, #88]	; 0x58
   144d0:	ldr	r2, [sp, #28]
   144d4:	mov	r6, #0
   144d8:	b	1417c <__assert_fail@plt+0x2d50>
   144dc:	ldr	r2, [sp, #36]	; 0x24
   144e0:	ldrb	r1, [r2, r3]
   144e4:	sub	r2, r1, #33	; 0x21
   144e8:	cmp	r2, #29
   144ec:	ldrls	pc, [pc, r2, lsl #2]
   144f0:	b	145cc <__assert_fail@plt+0x31a0>
   144f4:	andeq	r4, r1, ip, ror #10
   144f8:	andeq	r4, r1, ip, asr #11
   144fc:	andeq	r4, r1, ip, asr #11
   14500:	andeq	r4, r1, ip, asr #11
   14504:	andeq	r4, r1, ip, asr #11
   14508:	andeq	r4, r1, ip, asr #11
   1450c:	andeq	r4, r1, ip, ror #10
   14510:	andeq	r4, r1, ip, ror #10
   14514:	andeq	r4, r1, ip, ror #10
   14518:	andeq	r4, r1, ip, asr #11
   1451c:	andeq	r4, r1, ip, asr #11
   14520:	andeq	r4, r1, ip, asr #11
   14524:	andeq	r4, r1, ip, ror #10
   14528:	andeq	r4, r1, ip, asr #11
   1452c:	andeq	r4, r1, ip, ror #10
   14530:	andeq	r4, r1, ip, asr #11
   14534:	andeq	r4, r1, ip, asr #11
   14538:	andeq	r4, r1, ip, asr #11
   1453c:	andeq	r4, r1, ip, asr #11
   14540:	andeq	r4, r1, ip, asr #11
   14544:	andeq	r4, r1, ip, asr #11
   14548:	andeq	r4, r1, ip, asr #11
   1454c:	andeq	r4, r1, ip, asr #11
   14550:	andeq	r4, r1, ip, asr #11
   14554:	andeq	r4, r1, ip, asr #11
   14558:	andeq	r4, r1, ip, asr #11
   1455c:	andeq	r4, r1, ip, asr #11
   14560:	andeq	r4, r1, ip, ror #10
   14564:	andeq	r4, r1, ip, ror #10
   14568:	andeq	r4, r1, ip, ror #10
   1456c:	ldr	r2, [sp, #32]
   14570:	cmp	r2, #0
   14574:	bne	14678 <__assert_fail@plt+0x324c>
   14578:	cmp	sl, r4
   1457c:	movhi	r2, #63	; 0x3f
   14580:	strbhi	r2, [r8, r4]
   14584:	add	r2, r4, #1
   14588:	cmp	sl, r2
   1458c:	movhi	r0, #34	; 0x22
   14590:	strbhi	r0, [r8, r2]
   14594:	add	r2, r4, #2
   14598:	cmp	sl, r2
   1459c:	movhi	r0, #34	; 0x22
   145a0:	strbhi	r0, [r8, r2]
   145a4:	add	r2, r4, #3
   145a8:	cmp	sl, r2
   145ac:	movhi	r0, #63	; 0x3f
   145b0:	strbhi	r0, [r8, r2]
   145b4:	mov	r2, #0
   145b8:	add	r4, r4, #4
   145bc:	mov	r5, r1
   145c0:	mov	r9, r3
   145c4:	mov	r6, r2
   145c8:	b	139c4 <__assert_fail@plt+0x2598>
   145cc:	mov	r2, #0
   145d0:	mov	r6, r2
   145d4:	b	13534 <__assert_fail@plt+0x2108>
   145d8:	ldr	r0, [sp, #24]
   145dc:	mov	r1, r4
   145e0:	cmp	r1, r0
   145e4:	mov	r2, r7
   145e8:	mov	r3, r5
   145ec:	mov	ip, r5
   145f0:	ldr	r7, [sp, #96]	; 0x60
   145f4:	ldr	r5, [sp, #92]	; 0x5c
   145f8:	ldr	r4, [sp, #100]	; 0x64
   145fc:	ldr	r8, [sp, #84]	; 0x54
   14600:	ldr	sl, [sp, #88]	; 0x58
   14604:	bcs	14638 <__assert_fail@plt+0x320c>
   14608:	ldrb	r6, [r2]
   1460c:	cmp	r6, #0
   14610:	bne	14624 <__assert_fail@plt+0x31f8>
   14614:	b	14754 <__assert_fail@plt+0x3328>
   14618:	ldrb	r6, [r2, #1]!
   1461c:	cmp	r6, #0
   14620:	beq	146dc <__assert_fail@plt+0x32b0>
   14624:	add	r3, r3, #1
   14628:	add	r1, r9, r3
   1462c:	cmp	r1, r0
   14630:	bcc	14618 <__assert_fail@plt+0x31ec>
   14634:	mov	ip, r3
   14638:	ldr	r2, [sp, #28]
   1463c:	mov	r6, #0
   14640:	b	1417c <__assert_fail@plt+0x2d50>
   14644:	mov	r3, #1
   14648:	str	r3, [sp, #40]	; 0x28
   1464c:	str	r3, [sp, #32]
   14650:	str	r3, [sp, #28]
   14654:	str	r3, [sp, #52]	; 0x34
   14658:	ldr	r3, [pc, #-2220]	; 13db4 <__assert_fail@plt+0x2988>
   1465c:	mov	r2, #0
   14660:	str	r2, [sp, #68]	; 0x44
   14664:	str	r2, [sp, #44]	; 0x2c
   14668:	str	r2, [sp, #72]	; 0x48
   1466c:	mov	r4, r2
   14670:	str	r3, [sp, #60]	; 0x3c
   14674:	b	1309c <__assert_fail@plt+0x1c70>
   14678:	str	fp, [sp, #160]	; 0xa0
   1467c:	mov	fp, r8
   14680:	ldr	r8, [sp, #160]	; 0xa0
   14684:	b	1384c <__assert_fail@plt+0x2420>
   14688:	mov	r2, r3
   1468c:	ldr	r3, [sp, #60]	; 0x3c
   14690:	cmp	r3, #0
   14694:	moveq	r2, #0
   14698:	andne	r2, r2, #1
   1469c:	cmp	r2, #0
   146a0:	beq	146cc <__assert_fail@plt+0x32a0>
   146a4:	mov	r2, r3
   146a8:	ldrb	r3, [r3]
   146ac:	cmp	r3, #0
   146b0:	beq	146cc <__assert_fail@plt+0x32a0>
   146b4:	cmp	sl, r4
   146b8:	strbhi	r3, [fp, r4]
   146bc:	ldrb	r3, [r2, #1]!
   146c0:	add	r4, r4, #1
   146c4:	cmp	r3, #0
   146c8:	bne	146b4 <__assert_fail@plt+0x3288>
   146cc:	cmp	sl, r4
   146d0:	movhi	r3, #0
   146d4:	strbhi	r3, [fp, r4]
   146d8:	b	1388c <__assert_fail@plt+0x2460>
   146dc:	mov	ip, r3
   146e0:	ldr	r2, [sp, #28]
   146e4:	b	1417c <__assert_fail@plt+0x2d50>
   146e8:	str	fp, [sp, #160]	; 0xa0
   146ec:	mov	fp, r8
   146f0:	ldr	r8, [sp, #160]	; 0xa0
   146f4:	sub	r3, r8, #2
   146f8:	clz	r3, r3
   146fc:	lsr	r3, r3, #5
   14700:	str	r3, [sp, #28]
   14704:	b	13840 <__assert_fail@plt+0x2414>
   14708:	ldr	r3, [sp, #76]	; 0x4c
   1470c:	mov	ip, #5
   14710:	str	r3, [sp, #16]
   14714:	ldr	r3, [sp, #80]	; 0x50
   14718:	ldr	r2, [sp, #36]	; 0x24
   1471c:	str	r3, [sp, #12]
   14720:	ldr	r3, [sp, #56]	; 0x38
   14724:	ldr	r1, [sp, #72]	; 0x48
   14728:	str	r3, [sp, #8]
   1472c:	ldr	r3, [sp, #164]	; 0xa4
   14730:	mov	r0, fp
   14734:	str	r3, [sp, #4]
   14738:	str	ip, [sp]
   1473c:	ldr	r3, [sp, #24]
   14740:	bl	12fa4 <__assert_fail@plt+0x1b78>
   14744:	mov	r4, r0
   14748:	b	1388c <__assert_fail@plt+0x2460>
   1474c:	mov	r8, #2
   14750:	b	13840 <__assert_fail@plt+0x2414>
   14754:	ldr	r2, [sp, #28]
   14758:	b	1417c <__assert_fail@plt+0x2d50>
   1475c:	mov	r3, #0
   14760:	str	r3, [sp, #68]	; 0x44
   14764:	str	r3, [sp, #44]	; 0x2c
   14768:	str	r3, [sp, #72]	; 0x48
   1476c:	str	r3, [sp, #28]
   14770:	mov	r4, r3
   14774:	ldr	r3, [pc, #-2500]	; 13db8 <__assert_fail@plt+0x298c>
   14778:	mov	r2, #1
   1477c:	str	r2, [sp, #40]	; 0x28
   14780:	str	r2, [sp, #32]
   14784:	str	r2, [sp, #52]	; 0x34
   14788:	str	r3, [sp, #60]	; 0x3c
   1478c:	b	1309c <__assert_fail@plt+0x1c70>
   14790:	bl	111b0 <__stack_chk_fail@plt>
   14794:	mov	r5, r3
   14798:	mov	r6, #0
   1479c:	b	13590 <__assert_fail@plt+0x2164>
   147a0:	mov	r3, #0
   147a4:	mov	r2, #1
   147a8:	str	r3, [sp, #44]	; 0x2c
   147ac:	str	r3, [sp, #72]	; 0x48
   147b0:	str	r2, [sp, #40]	; 0x28
   147b4:	b	136ac <__assert_fail@plt+0x2280>
   147b8:	bl	113e4 <abort@plt>
   147bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147c0:	sub	sp, sp, #44	; 0x2c
   147c4:	mov	r6, r0
   147c8:	mov	r4, r3
   147cc:	mov	sl, r1
   147d0:	mov	fp, r2
   147d4:	bl	112e8 <__errno_location@plt>
   147d8:	ldr	r7, [pc, #364]	; 1494c <__assert_fail@plt+0x3520>
   147dc:	cmp	r6, #0
   147e0:	ldr	r5, [r7]
   147e4:	ldr	r3, [r0]
   147e8:	str	r3, [sp, #24]
   147ec:	blt	14948 <__assert_fail@plt+0x351c>
   147f0:	ldr	r3, [r7, #4]
   147f4:	mov	r8, r0
   147f8:	cmp	r3, r6
   147fc:	bgt	14848 <__assert_fail@plt+0x341c>
   14800:	cmn	r6, #-268435454	; 0xf0000002
   14804:	bgt	14944 <__assert_fail@plt+0x3518>
   14808:	add	r9, r6, #1
   1480c:	add	r3, r7, #8
   14810:	cmp	r5, r3
   14814:	lsl	r1, r9, #3
   14818:	beq	14924 <__assert_fail@plt+0x34f8>
   1481c:	mov	r0, r5
   14820:	bl	15618 <__assert_fail@plt+0x41ec>
   14824:	mov	r5, r0
   14828:	str	r0, [r7]
   1482c:	ldr	r0, [r7, #4]
   14830:	mov	r1, #0
   14834:	sub	r2, r9, r0
   14838:	add	r0, r5, r0, lsl #3
   1483c:	lsl	r2, r2, #3
   14840:	bl	11300 <memset@plt>
   14844:	str	r9, [r7, #4]
   14848:	add	r3, r5, r6, lsl #3
   1484c:	ldr	r1, [r4, #4]
   14850:	ldr	r7, [r3, #4]
   14854:	ldr	r9, [r5, r6, lsl #3]
   14858:	ldr	r2, [r4, #40]	; 0x28
   1485c:	ldr	ip, [r4, #44]	; 0x2c
   14860:	str	r3, [sp, #28]
   14864:	ldr	r3, [r4]
   14868:	orr	r1, r1, #1
   1486c:	add	lr, r4, #8
   14870:	str	r1, [sp, #36]	; 0x24
   14874:	str	r1, [sp, #4]
   14878:	str	r2, [sp, #12]
   1487c:	str	r3, [sp]
   14880:	mov	r0, r7
   14884:	mov	r1, r9
   14888:	str	ip, [sp, #16]
   1488c:	str	lr, [sp, #8]
   14890:	mov	r3, fp
   14894:	mov	r2, sl
   14898:	str	lr, [sp, #32]
   1489c:	bl	12fa4 <__assert_fail@plt+0x1b78>
   148a0:	cmp	r9, r0
   148a4:	bhi	14910 <__assert_fail@plt+0x34e4>
   148a8:	ldr	r3, [pc, #160]	; 14950 <__assert_fail@plt+0x3524>
   148ac:	add	r9, r0, #1
   148b0:	cmp	r7, r3
   148b4:	str	r9, [r5, r6, lsl #3]
   148b8:	beq	148c4 <__assert_fail@plt+0x3498>
   148bc:	mov	r0, r7
   148c0:	bl	11150 <free@plt>
   148c4:	mov	r0, r9
   148c8:	bl	155bc <__assert_fail@plt+0x4190>
   148cc:	ldr	lr, [sp, #28]
   148d0:	ldr	ip, [r4, #44]	; 0x2c
   148d4:	ldr	r5, [r4, #40]	; 0x28
   148d8:	mov	r3, fp
   148dc:	mov	r2, sl
   148e0:	mov	r1, r9
   148e4:	str	r0, [lr, #4]
   148e8:	ldr	lr, [r4]
   148ec:	ldr	r4, [sp, #32]
   148f0:	str	ip, [sp, #16]
   148f4:	str	r4, [sp, #8]
   148f8:	ldr	r4, [sp, #36]	; 0x24
   148fc:	str	r5, [sp, #12]
   14900:	str	r4, [sp, #4]
   14904:	str	lr, [sp]
   14908:	mov	r7, r0
   1490c:	bl	12fa4 <__assert_fail@plt+0x1b78>
   14910:	ldr	r3, [sp, #24]
   14914:	mov	r0, r7
   14918:	str	r3, [r8]
   1491c:	add	sp, sp, #44	; 0x2c
   14920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14924:	mov	r0, #0
   14928:	bl	15618 <__assert_fail@plt+0x41ec>
   1492c:	ldr	r3, [pc, #32]	; 14954 <__assert_fail@plt+0x3528>
   14930:	mov	r5, r0
   14934:	ldm	r3, {r0, r1}
   14938:	str	r5, [r7]
   1493c:	stm	r5, {r0, r1}
   14940:	b	1482c <__assert_fail@plt+0x3400>
   14944:	bl	15804 <__assert_fail@plt+0x43d8>
   14948:	bl	113e4 <abort@plt>
   1494c:	andeq	ip, r2, ip, lsr r1
   14950:	andeq	ip, r2, r4, asr #3
   14954:	andeq	ip, r2, r4, asr #2
   14958:	push	{r4, r5, r6, lr}
   1495c:	mov	r5, r0
   14960:	bl	112e8 <__errno_location@plt>
   14964:	cmp	r5, #0
   14968:	mov	r1, #48	; 0x30
   1496c:	mov	r4, r0
   14970:	ldr	r0, [pc, #16]	; 14988 <__assert_fail@plt+0x355c>
   14974:	ldr	r6, [r4]
   14978:	movne	r0, r5
   1497c:	bl	157c4 <__assert_fail@plt+0x4398>
   14980:	str	r6, [r4]
   14984:	pop	{r4, r5, r6, pc}
   14988:	andeq	ip, r2, r4, asr #5
   1498c:	ldr	r3, [pc, #12]	; 149a0 <__assert_fail@plt+0x3574>
   14990:	cmp	r0, #0
   14994:	moveq	r0, r3
   14998:	ldr	r0, [r0]
   1499c:	bx	lr
   149a0:	andeq	ip, r2, r4, asr #5
   149a4:	ldr	r3, [pc, #12]	; 149b8 <__assert_fail@plt+0x358c>
   149a8:	cmp	r0, #0
   149ac:	moveq	r0, r3
   149b0:	str	r1, [r0]
   149b4:	bx	lr
   149b8:	andeq	ip, r2, r4, asr #5
   149bc:	ldr	r3, [pc, #52]	; 149f8 <__assert_fail@plt+0x35cc>
   149c0:	cmp	r0, #0
   149c4:	moveq	r0, r3
   149c8:	add	r3, r0, #8
   149cc:	push	{lr}		; (str lr, [sp, #-4]!)
   149d0:	lsr	lr, r1, #5
   149d4:	and	r1, r1, #31
   149d8:	ldr	ip, [r3, lr, lsl #2]
   149dc:	lsr	r0, ip, r1
   149e0:	eor	r2, r2, r0
   149e4:	and	r2, r2, #1
   149e8:	and	r0, r0, #1
   149ec:	eor	r1, ip, r2, lsl r1
   149f0:	str	r1, [r3, lr, lsl #2]
   149f4:	pop	{pc}		; (ldr pc, [sp], #4)
   149f8:	andeq	ip, r2, r4, asr #5
   149fc:	ldr	r3, [pc, #16]	; 14a14 <__assert_fail@plt+0x35e8>
   14a00:	cmp	r0, #0
   14a04:	movne	r3, r0
   14a08:	ldr	r0, [r3, #4]
   14a0c:	str	r1, [r3, #4]
   14a10:	bx	lr
   14a14:	andeq	ip, r2, r4, asr #5
   14a18:	ldr	r3, [pc, #44]	; 14a4c <__assert_fail@plt+0x3620>
   14a1c:	cmp	r0, #0
   14a20:	moveq	r0, r3
   14a24:	mov	ip, #10
   14a28:	cmp	r2, #0
   14a2c:	cmpne	r1, #0
   14a30:	str	ip, [r0]
   14a34:	beq	14a44 <__assert_fail@plt+0x3618>
   14a38:	str	r1, [r0, #40]	; 0x28
   14a3c:	str	r2, [r0, #44]	; 0x2c
   14a40:	bx	lr
   14a44:	push	{r4, lr}
   14a48:	bl	113e4 <abort@plt>
   14a4c:	andeq	ip, r2, r4, asr #5
   14a50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a54:	sub	sp, sp, #24
   14a58:	ldr	ip, [pc, #108]	; 14acc <__assert_fail@plt+0x36a0>
   14a5c:	ldr	r4, [sp, #56]	; 0x38
   14a60:	mov	r9, r2
   14a64:	cmp	r4, #0
   14a68:	moveq	r4, ip
   14a6c:	mov	sl, r3
   14a70:	mov	r7, r0
   14a74:	mov	r8, r1
   14a78:	bl	112e8 <__errno_location@plt>
   14a7c:	ldr	r3, [r4, #44]	; 0x2c
   14a80:	mov	r1, r8
   14a84:	ldr	r6, [r0]
   14a88:	str	r3, [sp, #16]
   14a8c:	ldr	r2, [r4, #40]	; 0x28
   14a90:	add	r3, r4, #8
   14a94:	str	r3, [sp, #8]
   14a98:	str	r2, [sp, #12]
   14a9c:	ldr	r2, [r4, #4]
   14aa0:	mov	r5, r0
   14aa4:	str	r2, [sp, #4]
   14aa8:	ldr	ip, [r4]
   14aac:	mov	r3, sl
   14ab0:	mov	r2, r9
   14ab4:	mov	r0, r7
   14ab8:	str	ip, [sp]
   14abc:	bl	12fa4 <__assert_fail@plt+0x1b78>
   14ac0:	str	r6, [r5]
   14ac4:	add	sp, sp, #24
   14ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14acc:	andeq	ip, r2, r4, asr #5
   14ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad4:	cmp	r3, #0
   14ad8:	sub	sp, sp, #44	; 0x2c
   14adc:	ldr	r4, [pc, #192]	; 14ba4 <__assert_fail@plt+0x3778>
   14ae0:	mov	r6, r2
   14ae4:	movne	r4, r3
   14ae8:	mov	r9, r1
   14aec:	mov	r8, r0
   14af0:	bl	112e8 <__errno_location@plt>
   14af4:	ldr	r3, [r4, #44]	; 0x2c
   14af8:	ldr	r5, [r4, #4]
   14afc:	add	sl, r4, #8
   14b00:	cmp	r6, #0
   14b04:	orreq	r5, r5, #1
   14b08:	mov	r1, #0
   14b0c:	ldr	r2, [r0]
   14b10:	str	r3, [sp, #16]
   14b14:	ldr	r3, [r4, #40]	; 0x28
   14b18:	stmib	sp, {r5, sl}
   14b1c:	str	r3, [sp, #12]
   14b20:	ldr	r3, [r4]
   14b24:	mov	r7, r0
   14b28:	str	r2, [sp, #28]
   14b2c:	str	r3, [sp]
   14b30:	mov	r2, r8
   14b34:	mov	r3, r9
   14b38:	mov	r0, r1
   14b3c:	bl	12fa4 <__assert_fail@plt+0x1b78>
   14b40:	add	r1, r0, #1
   14b44:	mov	fp, r0
   14b48:	mov	r0, r1
   14b4c:	str	r1, [sp, #36]	; 0x24
   14b50:	bl	155bc <__assert_fail@plt+0x4190>
   14b54:	ldr	r3, [r4, #44]	; 0x2c
   14b58:	mov	r2, r8
   14b5c:	str	r3, [sp, #16]
   14b60:	ldr	r3, [r4, #40]	; 0x28
   14b64:	str	r5, [sp, #4]
   14b68:	str	r3, [sp, #12]
   14b6c:	str	sl, [sp, #8]
   14b70:	ldr	ip, [r4]
   14b74:	ldr	r1, [sp, #36]	; 0x24
   14b78:	mov	r3, r9
   14b7c:	str	ip, [sp]
   14b80:	str	r0, [sp, #32]
   14b84:	bl	12fa4 <__assert_fail@plt+0x1b78>
   14b88:	ldr	r2, [sp, #28]
   14b8c:	cmp	r6, #0
   14b90:	str	r2, [r7]
   14b94:	ldr	r0, [sp, #32]
   14b98:	strne	fp, [r6]
   14b9c:	add	sp, sp, #44	; 0x2c
   14ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba4:	andeq	ip, r2, r4, asr #5
   14ba8:	mov	r3, r2
   14bac:	mov	r2, #0
   14bb0:	b	14ad0 <__assert_fail@plt+0x36a4>
   14bb4:	push	{r4, r5, r6, r7, r8, lr}
   14bb8:	ldr	r6, [pc, #112]	; 14c30 <__assert_fail@plt+0x3804>
   14bbc:	ldr	r3, [r6, #4]
   14bc0:	ldr	r7, [r6]
   14bc4:	cmp	r3, #1
   14bc8:	ble	14bec <__assert_fail@plt+0x37c0>
   14bcc:	sub	r5, r7, #8
   14bd0:	add	r5, r5, r3, lsl #3
   14bd4:	mov	r4, r7
   14bd8:	ldr	r0, [r4, #12]
   14bdc:	add	r4, r4, #8
   14be0:	bl	11150 <free@plt>
   14be4:	cmp	r4, r5
   14be8:	bne	14bd8 <__assert_fail@plt+0x37ac>
   14bec:	ldr	r0, [r7, #4]
   14bf0:	ldr	r4, [pc, #60]	; 14c34 <__assert_fail@plt+0x3808>
   14bf4:	cmp	r0, r4
   14bf8:	beq	14c0c <__assert_fail@plt+0x37e0>
   14bfc:	bl	11150 <free@plt>
   14c00:	mov	r3, #256	; 0x100
   14c04:	str	r4, [r6, #12]
   14c08:	str	r3, [r6, #8]
   14c0c:	ldr	r4, [pc, #36]	; 14c38 <__assert_fail@plt+0x380c>
   14c10:	cmp	r7, r4
   14c14:	beq	14c24 <__assert_fail@plt+0x37f8>
   14c18:	mov	r0, r7
   14c1c:	bl	11150 <free@plt>
   14c20:	str	r4, [r6]
   14c24:	mov	r3, #1
   14c28:	str	r3, [r6, #4]
   14c2c:	pop	{r4, r5, r6, r7, r8, pc}
   14c30:	andeq	ip, r2, ip, lsr r1
   14c34:	andeq	ip, r2, r4, asr #3
   14c38:	andeq	ip, r2, r4, asr #2
   14c3c:	ldr	r3, [pc, #4]	; 14c48 <__assert_fail@plt+0x381c>
   14c40:	mvn	r2, #0
   14c44:	b	147bc <__assert_fail@plt+0x3390>
   14c48:	andeq	ip, r2, r4, asr #5
   14c4c:	ldr	r3, [pc]	; 14c54 <__assert_fail@plt+0x3828>
   14c50:	b	147bc <__assert_fail@plt+0x3390>
   14c54:	andeq	ip, r2, r4, asr #5
   14c58:	mov	r1, r0
   14c5c:	ldr	r3, [pc, #8]	; 14c6c <__assert_fail@plt+0x3840>
   14c60:	mvn	r2, #0
   14c64:	mov	r0, #0
   14c68:	b	147bc <__assert_fail@plt+0x3390>
   14c6c:	andeq	ip, r2, r4, asr #5
   14c70:	mov	r2, r1
   14c74:	ldr	r3, [pc, #8]	; 14c84 <__assert_fail@plt+0x3858>
   14c78:	mov	r1, r0
   14c7c:	mov	r0, #0
   14c80:	b	147bc <__assert_fail@plt+0x3390>
   14c84:	andeq	ip, r2, r4, asr #5
   14c88:	push	{r4, r5, r6, lr}
   14c8c:	sub	sp, sp, #56	; 0x38
   14c90:	ldr	r4, [pc, #68]	; 14cdc <__assert_fail@plt+0x38b0>
   14c94:	mov	r6, r2
   14c98:	mov	r5, r0
   14c9c:	ldr	r3, [r4]
   14ca0:	add	r0, sp, #4
   14ca4:	str	r3, [sp, #52]	; 0x34
   14ca8:	bl	12e34 <__assert_fail@plt+0x1a08>
   14cac:	add	r3, sp, #4
   14cb0:	mvn	r2, #0
   14cb4:	mov	r1, r6
   14cb8:	mov	r0, r5
   14cbc:	bl	147bc <__assert_fail@plt+0x3390>
   14cc0:	ldr	r2, [sp, #52]	; 0x34
   14cc4:	ldr	r3, [r4]
   14cc8:	cmp	r2, r3
   14ccc:	bne	14cd8 <__assert_fail@plt+0x38ac>
   14cd0:	add	sp, sp, #56	; 0x38
   14cd4:	pop	{r4, r5, r6, pc}
   14cd8:	bl	111b0 <__stack_chk_fail@plt>
   14cdc:	andeq	fp, r2, r8, lsl #30
   14ce0:	push	{r4, r5, r6, r7, lr}
   14ce4:	sub	sp, sp, #60	; 0x3c
   14ce8:	ldr	r4, [pc, #72]	; 14d38 <__assert_fail@plt+0x390c>
   14cec:	mov	r6, r2
   14cf0:	mov	r7, r3
   14cf4:	ldr	ip, [r4]
   14cf8:	mov	r5, r0
   14cfc:	add	r0, sp, #4
   14d00:	str	ip, [sp, #52]	; 0x34
   14d04:	bl	12e34 <__assert_fail@plt+0x1a08>
   14d08:	add	r3, sp, #4
   14d0c:	mov	r2, r7
   14d10:	mov	r1, r6
   14d14:	mov	r0, r5
   14d18:	bl	147bc <__assert_fail@plt+0x3390>
   14d1c:	ldr	r2, [sp, #52]	; 0x34
   14d20:	ldr	r3, [r4]
   14d24:	cmp	r2, r3
   14d28:	bne	14d34 <__assert_fail@plt+0x3908>
   14d2c:	add	sp, sp, #60	; 0x3c
   14d30:	pop	{r4, r5, r6, r7, pc}
   14d34:	bl	111b0 <__stack_chk_fail@plt>
   14d38:	andeq	fp, r2, r8, lsl #30
   14d3c:	mov	r2, r1
   14d40:	mov	r1, r0
   14d44:	mov	r0, #0
   14d48:	b	14c88 <__assert_fail@plt+0x385c>
   14d4c:	mov	r3, r2
   14d50:	mov	r2, r1
   14d54:	mov	r1, r0
   14d58:	mov	r0, #0
   14d5c:	b	14ce0 <__assert_fail@plt+0x38b4>
   14d60:	push	{r4, r5, r6, r7, r8, r9, lr}
   14d64:	mov	r4, r2
   14d68:	ldr	lr, [pc, #128]	; 14df0 <__assert_fail@plt+0x39c4>
   14d6c:	mov	r8, r0
   14d70:	mov	r9, r1
   14d74:	ldm	lr!, {r0, r1, r2, r3}
   14d78:	sub	sp, sp, #60	; 0x3c
   14d7c:	add	ip, sp, #4
   14d80:	lsr	r6, r4, #5
   14d84:	stmia	ip!, {r0, r1, r2, r3}
   14d88:	add	r7, sp, #12
   14d8c:	ldm	lr!, {r0, r1, r2, r3}
   14d90:	and	r4, r4, #31
   14d94:	ldr	r5, [pc, #88]	; 14df4 <__assert_fail@plt+0x39c8>
   14d98:	stmia	ip!, {r0, r1, r2, r3}
   14d9c:	ldm	lr, {r0, r1, r2, r3}
   14da0:	stm	ip, {r0, r1, r2, r3}
   14da4:	mov	r2, r9
   14da8:	ldr	r3, [r7, r6, lsl #2]
   14dac:	ldr	ip, [r5]
   14db0:	mov	r1, r8
   14db4:	mvn	r0, r3, lsr r4
   14db8:	and	r0, r0, #1
   14dbc:	str	ip, [sp, #52]	; 0x34
   14dc0:	eor	r4, r3, r0, lsl r4
   14dc4:	add	r3, sp, #4
   14dc8:	mov	r0, #0
   14dcc:	str	r4, [r7, r6, lsl #2]
   14dd0:	bl	147bc <__assert_fail@plt+0x3390>
   14dd4:	ldr	r2, [sp, #52]	; 0x34
   14dd8:	ldr	r3, [r5]
   14ddc:	cmp	r2, r3
   14de0:	bne	14dec <__assert_fail@plt+0x39c0>
   14de4:	add	sp, sp, #60	; 0x3c
   14de8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14dec:	bl	111b0 <__stack_chk_fail@plt>
   14df0:	andeq	ip, r2, r4, asr #5
   14df4:	andeq	fp, r2, r8, lsl #30
   14df8:	mov	r2, r1
   14dfc:	mvn	r1, #0
   14e00:	b	14d60 <__assert_fail@plt+0x3934>
   14e04:	mov	r2, #58	; 0x3a
   14e08:	mvn	r1, #0
   14e0c:	b	14d60 <__assert_fail@plt+0x3934>
   14e10:	mov	r2, #58	; 0x3a
   14e14:	b	14d60 <__assert_fail@plt+0x3934>
   14e18:	push	{r4, r5, r6, r7, r8, lr}
   14e1c:	sub	sp, sp, #104	; 0x68
   14e20:	ldr	r5, [pc, #120]	; 14ea0 <__assert_fail@plt+0x3a74>
   14e24:	mov	r6, r0
   14e28:	mov	r0, sp
   14e2c:	ldr	r3, [r5]
   14e30:	mov	r7, r2
   14e34:	str	r3, [sp, #100]	; 0x64
   14e38:	bl	12e34 <__assert_fail@plt+0x1a08>
   14e3c:	mov	ip, sp
   14e40:	add	lr, sp, #52	; 0x34
   14e44:	ldm	ip!, {r0, r1, r2, r3}
   14e48:	stmia	lr!, {r0, r1, r2, r3}
   14e4c:	ldm	ip!, {r0, r1, r2, r3}
   14e50:	ldr	r8, [sp, #64]	; 0x40
   14e54:	stmia	lr!, {r0, r1, r2, r3}
   14e58:	mvn	r4, r8
   14e5c:	ldm	ip, {r0, r1, r2, r3}
   14e60:	and	ip, r4, #67108864	; 0x4000000
   14e64:	eor	ip, ip, r8
   14e68:	str	ip, [sp, #64]	; 0x40
   14e6c:	stm	lr, {r0, r1, r2, r3}
   14e70:	add	r3, sp, #52	; 0x34
   14e74:	mvn	r2, #0
   14e78:	mov	r1, r7
   14e7c:	mov	r0, r6
   14e80:	bl	147bc <__assert_fail@plt+0x3390>
   14e84:	ldr	r2, [sp, #100]	; 0x64
   14e88:	ldr	r3, [r5]
   14e8c:	cmp	r2, r3
   14e90:	bne	14e9c <__assert_fail@plt+0x3a70>
   14e94:	add	sp, sp, #104	; 0x68
   14e98:	pop	{r4, r5, r6, r7, r8, pc}
   14e9c:	bl	111b0 <__stack_chk_fail@plt>
   14ea0:	andeq	fp, r2, r8, lsl #30
   14ea4:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ea8:	mov	r6, r1
   14eac:	ldr	lr, [pc, #132]	; 14f38 <__assert_fail@plt+0x3b0c>
   14eb0:	mov	r5, r2
   14eb4:	mov	r8, r0
   14eb8:	mov	r9, r3
   14ebc:	ldm	lr!, {r0, r1, r2, r3}
   14ec0:	sub	sp, sp, #60	; 0x3c
   14ec4:	add	ip, sp, #4
   14ec8:	ldr	r4, [pc, #108]	; 14f3c <__assert_fail@plt+0x3b10>
   14ecc:	stmia	ip!, {r0, r1, r2, r3}
   14ed0:	mov	r7, #10
   14ed4:	ldm	lr!, {r0, r1, r2, r3}
   14ed8:	cmp	r5, #0
   14edc:	cmpne	r6, #0
   14ee0:	str	r7, [sp, #4]
   14ee4:	stmia	ip!, {r0, r1, r2, r3}
   14ee8:	ldm	lr, {r0, r1, r2, r3}
   14eec:	ldr	lr, [r4]
   14ef0:	stm	ip, {r0, r1, r2, r3}
   14ef4:	str	lr, [sp, #52]	; 0x34
   14ef8:	beq	14f34 <__assert_fail@plt+0x3b08>
   14efc:	add	r3, sp, #4
   14f00:	ldr	r2, [sp, #88]	; 0x58
   14f04:	mov	r1, r9
   14f08:	mov	r0, r8
   14f0c:	str	r6, [sp, #44]	; 0x2c
   14f10:	str	r5, [sp, #48]	; 0x30
   14f14:	bl	147bc <__assert_fail@plt+0x3390>
   14f18:	ldr	r2, [sp, #52]	; 0x34
   14f1c:	ldr	r3, [r4]
   14f20:	cmp	r2, r3
   14f24:	bne	14f30 <__assert_fail@plt+0x3b04>
   14f28:	add	sp, sp, #60	; 0x3c
   14f2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f30:	bl	111b0 <__stack_chk_fail@plt>
   14f34:	bl	113e4 <abort@plt>
   14f38:	andeq	ip, r2, r4, asr #5
   14f3c:	andeq	fp, r2, r8, lsl #30
   14f40:	push	{lr}		; (str lr, [sp, #-4]!)
   14f44:	sub	sp, sp, #12
   14f48:	mvn	ip, #0
   14f4c:	str	ip, [sp]
   14f50:	bl	14ea4 <__assert_fail@plt+0x3a78>
   14f54:	add	sp, sp, #12
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	push	{lr}		; (str lr, [sp, #-4]!)
   14f60:	sub	sp, sp, #12
   14f64:	mvn	ip, #0
   14f68:	mov	r3, r2
   14f6c:	str	ip, [sp]
   14f70:	mov	r2, r1
   14f74:	mov	r1, r0
   14f78:	mov	r0, #0
   14f7c:	bl	14ea4 <__assert_fail@plt+0x3a78>
   14f80:	add	sp, sp, #12
   14f84:	pop	{pc}		; (ldr pc, [sp], #4)
   14f88:	push	{lr}		; (str lr, [sp, #-4]!)
   14f8c:	sub	sp, sp, #12
   14f90:	str	r3, [sp]
   14f94:	mov	r3, r2
   14f98:	mov	r2, r1
   14f9c:	mov	r1, r0
   14fa0:	mov	r0, #0
   14fa4:	bl	14ea4 <__assert_fail@plt+0x3a78>
   14fa8:	add	sp, sp, #12
   14fac:	pop	{pc}		; (ldr pc, [sp], #4)
   14fb0:	ldr	r3, [pc]	; 14fb8 <__assert_fail@plt+0x3b8c>
   14fb4:	b	147bc <__assert_fail@plt+0x3390>
   14fb8:	andeq	ip, r2, ip, asr #2
   14fbc:	mov	r2, r1
   14fc0:	ldr	r3, [pc, #8]	; 14fd0 <__assert_fail@plt+0x3ba4>
   14fc4:	mov	r1, r0
   14fc8:	mov	r0, #0
   14fcc:	b	147bc <__assert_fail@plt+0x3390>
   14fd0:	andeq	ip, r2, ip, asr #2
   14fd4:	ldr	r3, [pc, #4]	; 14fe0 <__assert_fail@plt+0x3bb4>
   14fd8:	mvn	r2, #0
   14fdc:	b	147bc <__assert_fail@plt+0x3390>
   14fe0:	andeq	ip, r2, ip, asr #2
   14fe4:	mov	r1, r0
   14fe8:	ldr	r3, [pc, #8]	; 14ff8 <__assert_fail@plt+0x3bcc>
   14fec:	mvn	r2, #0
   14ff0:	mov	r0, #0
   14ff4:	b	147bc <__assert_fail@plt+0x3390>
   14ff8:	andeq	ip, r2, ip, asr #2
   14ffc:	push	{r4, r5, lr}
   15000:	sub	sp, sp, #116	; 0x74
   15004:	ldr	r5, [pc, #80]	; 1505c <__assert_fail@plt+0x3c30>
   15008:	mov	r4, r0
   1500c:	mov	r2, sp
   15010:	ldr	r3, [r5]
   15014:	ldr	r1, [pc, #68]	; 15060 <__assert_fail@plt+0x3c34>
   15018:	mov	r0, #3
   1501c:	str	r3, [sp, #108]	; 0x6c
   15020:	bl	113fc <__lxstat64@plt>
   15024:	cmp	r0, #0
   15028:	movne	r0, #0
   1502c:	ldrdeq	r2, [sp]
   15030:	ldrdeq	r0, [sp, #96]	; 0x60
   15034:	strdeq	r2, [r4, #8]
   15038:	ldr	r2, [sp, #108]	; 0x6c
   1503c:	ldr	r3, [r5]
   15040:	strdeq	r0, [r4]
   15044:	moveq	r0, r4
   15048:	cmp	r2, r3
   1504c:	bne	15058 <__assert_fail@plt+0x3c2c>
   15050:	add	sp, sp, #116	; 0x74
   15054:	pop	{r4, r5, pc}
   15058:	bl	111b0 <__stack_chk_fail@plt>
   1505c:	andeq	fp, r2, r8, lsl #30
   15060:	ldrdeq	sl, [r1], -r4
   15064:	push	{r4, r5, r6, lr}
   15068:	sub	sp, sp, #32
   1506c:	cmp	r1, #0
   15070:	mov	r5, r0
   15074:	ldr	r4, [sp, #48]	; 0x30
   15078:	ldr	r6, [sp, #52]	; 0x34
   1507c:	beq	1510c <__assert_fail@plt+0x3ce0>
   15080:	strd	r2, [sp]
   15084:	mov	r3, r1
   15088:	ldr	r2, [pc, #828]	; 153cc <__assert_fail@plt+0x3fa0>
   1508c:	mov	r1, #1
   15090:	bl	11324 <__fprintf_chk@plt>
   15094:	mov	r2, #5
   15098:	ldr	r1, [pc, #816]	; 153d0 <__assert_fail@plt+0x3fa4>
   1509c:	mov	r0, #0
   150a0:	bl	111a4 <dcgettext@plt>
   150a4:	ldr	r3, [pc, #808]	; 153d4 <__assert_fail@plt+0x3fa8>
   150a8:	ldr	r2, [pc, #808]	; 153d8 <__assert_fail@plt+0x3fac>
   150ac:	str	r3, [sp]
   150b0:	mov	r1, #1
   150b4:	mov	r3, r0
   150b8:	mov	r0, r5
   150bc:	bl	11324 <__fprintf_chk@plt>
   150c0:	ldr	r1, [pc, #788]	; 153dc <__assert_fail@plt+0x3fb0>
   150c4:	mov	r2, #5
   150c8:	mov	r0, #0
   150cc:	bl	111a4 <dcgettext@plt>
   150d0:	mov	r1, r5
   150d4:	bl	11108 <fputs_unlocked@plt>
   150d8:	cmp	r6, #9
   150dc:	ldrls	pc, [pc, r6, lsl #2]
   150e0:	b	153bc <__assert_fail@plt+0x3f90>
   150e4:	andeq	r5, r1, r8, asr #7
   150e8:	muleq	r1, r0, r1
   150ec:			; <UNDEFINED> instruction: 0x000151bc
   150f0:	strdeq	r5, [r1], -r0
   150f4:	andeq	r5, r1, ip, lsr #4
   150f8:	andeq	r5, r1, ip, ror #4
   150fc:			; <UNDEFINED> instruction: 0x000152b4
   15100:	andeq	r5, r1, r4, lsl #6
   15104:	andeq	r5, r1, ip, asr r3
   15108:	andeq	r5, r1, r4, lsr #2
   1510c:	str	r3, [sp]
   15110:	mov	r1, #1
   15114:	mov	r3, r2
   15118:	ldr	r2, [pc, #704]	; 153e0 <__assert_fail@plt+0x3fb4>
   1511c:	bl	11324 <__fprintf_chk@plt>
   15120:	b	15094 <__assert_fail@plt+0x3c68>
   15124:	ldr	r1, [pc, #696]	; 153e4 <__assert_fail@plt+0x3fb8>
   15128:	mov	r2, #5
   1512c:	mov	r0, #0
   15130:	bl	111a4 <dcgettext@plt>
   15134:	ldr	r2, [r4, #32]
   15138:	ldr	r3, [r4, #28]
   1513c:	ldr	r1, [r4, #24]
   15140:	str	r2, [sp, #28]
   15144:	ldr	r2, [r4, #20]
   15148:	str	r3, [sp, #24]
   1514c:	ldr	r3, [r4, #16]
   15150:	str	r1, [sp, #20]
   15154:	ldr	r1, [r4, #12]
   15158:	str	r2, [sp, #16]
   1515c:	ldr	r2, [r4, #8]
   15160:	str	r3, [sp, #12]
   15164:	ldr	r3, [r4, #4]
   15168:	str	r1, [sp, #8]
   1516c:	str	r2, [sp, #4]
   15170:	str	r3, [sp]
   15174:	mov	r1, #1
   15178:	ldr	r3, [r4]
   1517c:	mov	r2, r0
   15180:	mov	r0, r5
   15184:	bl	11324 <__fprintf_chk@plt>
   15188:	add	sp, sp, #32
   1518c:	pop	{r4, r5, r6, pc}
   15190:	mov	r2, #5
   15194:	ldr	r1, [pc, #588]	; 153e8 <__assert_fail@plt+0x3fbc>
   15198:	mov	r0, #0
   1519c:	bl	111a4 <dcgettext@plt>
   151a0:	ldr	r3, [r4]
   151a4:	mov	r1, #1
   151a8:	mov	r2, r0
   151ac:	mov	r0, r5
   151b0:	add	sp, sp, #32
   151b4:	pop	{r4, r5, r6, lr}
   151b8:	b	11324 <__fprintf_chk@plt>
   151bc:	mov	r2, #5
   151c0:	ldr	r1, [pc, #548]	; 153ec <__assert_fail@plt+0x3fc0>
   151c4:	mov	r0, #0
   151c8:	bl	111a4 <dcgettext@plt>
   151cc:	ldr	r2, [r4, #4]
   151d0:	ldr	r3, [r4]
   151d4:	mov	r1, #1
   151d8:	str	r2, [sp, #48]	; 0x30
   151dc:	mov	r2, r0
   151e0:	mov	r0, r5
   151e4:	add	sp, sp, #32
   151e8:	pop	{r4, r5, r6, lr}
   151ec:	b	11324 <__fprintf_chk@plt>
   151f0:	mov	r2, #5
   151f4:	ldr	r1, [pc, #500]	; 153f0 <__assert_fail@plt+0x3fc4>
   151f8:	mov	r0, #0
   151fc:	bl	111a4 <dcgettext@plt>
   15200:	ldr	r2, [r4, #8]
   15204:	ldr	r3, [r4, #4]
   15208:	mov	r1, #1
   1520c:	str	r2, [sp, #52]	; 0x34
   15210:	str	r3, [sp, #48]	; 0x30
   15214:	ldr	r3, [r4]
   15218:	mov	r2, r0
   1521c:	mov	r0, r5
   15220:	add	sp, sp, #32
   15224:	pop	{r4, r5, r6, lr}
   15228:	b	11324 <__fprintf_chk@plt>
   1522c:	mov	r2, #5
   15230:	ldr	r1, [pc, #444]	; 153f4 <__assert_fail@plt+0x3fc8>
   15234:	mov	r0, #0
   15238:	bl	111a4 <dcgettext@plt>
   1523c:	ldr	r1, [r4, #12]
   15240:	ldr	r2, [r4, #8]
   15244:	ldr	r3, [r4, #4]
   15248:	str	r1, [sp, #8]
   1524c:	str	r2, [sp, #4]
   15250:	str	r3, [sp]
   15254:	mov	r1, #1
   15258:	ldr	r3, [r4]
   1525c:	mov	r2, r0
   15260:	mov	r0, r5
   15264:	bl	11324 <__fprintf_chk@plt>
   15268:	b	15188 <__assert_fail@plt+0x3d5c>
   1526c:	mov	r2, #5
   15270:	ldr	r1, [pc, #384]	; 153f8 <__assert_fail@plt+0x3fcc>
   15274:	mov	r0, #0
   15278:	bl	111a4 <dcgettext@plt>
   1527c:	ldr	r3, [r4, #16]
   15280:	ldr	r1, [r4, #12]
   15284:	ldr	r2, [r4, #8]
   15288:	str	r3, [sp, #12]
   1528c:	ldr	r3, [r4, #4]
   15290:	str	r1, [sp, #8]
   15294:	str	r2, [sp, #4]
   15298:	str	r3, [sp]
   1529c:	mov	r1, #1
   152a0:	ldr	r3, [r4]
   152a4:	mov	r2, r0
   152a8:	mov	r0, r5
   152ac:	bl	11324 <__fprintf_chk@plt>
   152b0:	b	15188 <__assert_fail@plt+0x3d5c>
   152b4:	mov	r2, #5
   152b8:	ldr	r1, [pc, #316]	; 153fc <__assert_fail@plt+0x3fd0>
   152bc:	mov	r0, #0
   152c0:	bl	111a4 <dcgettext@plt>
   152c4:	ldr	r2, [r4, #20]
   152c8:	ldr	r3, [r4, #16]
   152cc:	ldr	r1, [r4, #12]
   152d0:	str	r2, [sp, #16]
   152d4:	ldr	r2, [r4, #8]
   152d8:	str	r3, [sp, #12]
   152dc:	ldr	r3, [r4, #4]
   152e0:	str	r1, [sp, #8]
   152e4:	str	r2, [sp, #4]
   152e8:	str	r3, [sp]
   152ec:	mov	r1, #1
   152f0:	ldr	r3, [r4]
   152f4:	mov	r2, r0
   152f8:	mov	r0, r5
   152fc:	bl	11324 <__fprintf_chk@plt>
   15300:	b	15188 <__assert_fail@plt+0x3d5c>
   15304:	mov	r2, #5
   15308:	ldr	r1, [pc, #240]	; 15400 <__assert_fail@plt+0x3fd4>
   1530c:	mov	r0, #0
   15310:	bl	111a4 <dcgettext@plt>
   15314:	ldr	r1, [r4, #24]
   15318:	ldr	r2, [r4, #20]
   1531c:	ldr	r3, [r4, #16]
   15320:	str	r1, [sp, #20]
   15324:	ldr	r1, [r4, #12]
   15328:	str	r2, [sp, #16]
   1532c:	ldr	r2, [r4, #8]
   15330:	str	r3, [sp, #12]
   15334:	ldr	r3, [r4, #4]
   15338:	str	r1, [sp, #8]
   1533c:	str	r2, [sp, #4]
   15340:	str	r3, [sp]
   15344:	mov	r1, #1
   15348:	ldr	r3, [r4]
   1534c:	mov	r2, r0
   15350:	mov	r0, r5
   15354:	bl	11324 <__fprintf_chk@plt>
   15358:	b	15188 <__assert_fail@plt+0x3d5c>
   1535c:	mov	r2, #5
   15360:	ldr	r1, [pc, #156]	; 15404 <__assert_fail@plt+0x3fd8>
   15364:	mov	r0, #0
   15368:	bl	111a4 <dcgettext@plt>
   1536c:	ldr	r3, [r4, #28]
   15370:	ldr	r1, [r4, #24]
   15374:	ldr	r2, [r4, #20]
   15378:	str	r3, [sp, #24]
   1537c:	ldr	r3, [r4, #16]
   15380:	str	r1, [sp, #20]
   15384:	ldr	r1, [r4, #12]
   15388:	str	r2, [sp, #16]
   1538c:	ldr	r2, [r4, #8]
   15390:	str	r3, [sp, #12]
   15394:	ldr	r3, [r4, #4]
   15398:	str	r1, [sp, #8]
   1539c:	str	r2, [sp, #4]
   153a0:	str	r3, [sp]
   153a4:	mov	r1, #1
   153a8:	ldr	r3, [r4]
   153ac:	mov	r2, r0
   153b0:	mov	r0, r5
   153b4:	bl	11324 <__fprintf_chk@plt>
   153b8:	b	15188 <__assert_fail@plt+0x3d5c>
   153bc:	mov	r2, #5
   153c0:	ldr	r1, [pc, #64]	; 15408 <__assert_fail@plt+0x3fdc>
   153c4:	b	1512c <__assert_fail@plt+0x3d00>
   153c8:	bl	113e4 <abort@plt>
   153cc:	andeq	sl, r1, r4, asr #27
   153d0:	ldrdeq	sl, [r1], -r8
   153d4:	andeq	r0, r0, r2, ror #15
   153d8:	andeq	fp, r1, ip, lsr #1
   153dc:	ldrdeq	sl, [r1], -ip
   153e0:	ldrdeq	sl, [r1], -r0
   153e4:			; <UNDEFINED> instruction: 0x0001afb4
   153e8:	andeq	sl, r1, r8, lsr #29
   153ec:			; <UNDEFINED> instruction: 0x0001aeb8
   153f0:	ldrdeq	sl, [r1], -r0
   153f4:	andeq	sl, r1, ip, ror #29
   153f8:	andeq	sl, r1, ip, lsl #30
   153fc:	andeq	sl, r1, r0, lsr pc
   15400:	andeq	sl, r1, r8, asr pc
   15404:	andeq	sl, r1, r4, lsl #31
   15408:	andeq	sl, r1, r8, ror #31
   1540c:	push	{r4, r5, lr}
   15410:	sub	sp, sp, #12
   15414:	ldr	r5, [sp, #24]
   15418:	ldr	ip, [r5]
   1541c:	cmp	ip, #0
   15420:	beq	1543c <__assert_fail@plt+0x4010>
   15424:	mov	lr, r5
   15428:	mov	ip, #0
   1542c:	ldr	r4, [lr, #4]!
   15430:	add	ip, ip, #1
   15434:	cmp	r4, #0
   15438:	bne	1542c <__assert_fail@plt+0x4000>
   1543c:	stm	sp, {r5, ip}
   15440:	bl	15064 <__assert_fail@plt+0x3c38>
   15444:	add	sp, sp, #12
   15448:	pop	{r4, r5, pc}
   1544c:	push	{r4, r5, r6, lr}
   15450:	sub	sp, sp, #56	; 0x38
   15454:	ldr	r6, [pc, #88]	; 154b4 <__assert_fail@plt+0x4088>
   15458:	ldr	r5, [sp, #72]	; 0x48
   1545c:	add	r4, sp, #8
   15460:	ldr	ip, [r6]
   15464:	str	ip, [sp, #52]	; 0x34
   15468:	mov	ip, #0
   1546c:	ldr	lr, [r5], #4
   15470:	cmp	lr, #0
   15474:	str	lr, [r4, #4]!
   15478:	beq	15488 <__assert_fail@plt+0x405c>
   1547c:	add	ip, ip, #1
   15480:	cmp	ip, #10
   15484:	bne	1546c <__assert_fail@plt+0x4040>
   15488:	add	lr, sp, #12
   1548c:	str	ip, [sp, #4]
   15490:	str	lr, [sp]
   15494:	bl	15064 <__assert_fail@plt+0x3c38>
   15498:	ldr	r2, [sp, #52]	; 0x34
   1549c:	ldr	r3, [r6]
   154a0:	cmp	r2, r3
   154a4:	bne	154b0 <__assert_fail@plt+0x4084>
   154a8:	add	sp, sp, #56	; 0x38
   154ac:	pop	{r4, r5, r6, pc}
   154b0:	bl	111b0 <__stack_chk_fail@plt>
   154b4:	andeq	fp, r2, r8, lsl #30
   154b8:	push	{r3}		; (str r3, [sp, #-4]!)
   154bc:	mov	ip, #0
   154c0:	push	{r4, r5, r6, lr}
   154c4:	sub	sp, sp, #60	; 0x3c
   154c8:	ldr	r6, [pc, #100]	; 15534 <__assert_fail@plt+0x4108>
   154cc:	add	r5, sp, #8
   154d0:	add	r4, sp, #80	; 0x50
   154d4:	ldr	r3, [r6]
   154d8:	str	r4, [sp, #8]
   154dc:	str	r3, [sp, #52]	; 0x34
   154e0:	ldr	r3, [sp, #76]	; 0x4c
   154e4:	ldr	lr, [r4], #4
   154e8:	cmp	lr, #0
   154ec:	str	lr, [r5, #4]!
   154f0:	beq	15500 <__assert_fail@plt+0x40d4>
   154f4:	add	ip, ip, #1
   154f8:	cmp	ip, #10
   154fc:	bne	154e4 <__assert_fail@plt+0x40b8>
   15500:	add	lr, sp, #12
   15504:	str	ip, [sp, #4]
   15508:	str	lr, [sp]
   1550c:	bl	15064 <__assert_fail@plt+0x3c38>
   15510:	ldr	r2, [sp, #52]	; 0x34
   15514:	ldr	r3, [r6]
   15518:	cmp	r2, r3
   1551c:	bne	15530 <__assert_fail@plt+0x4104>
   15520:	add	sp, sp, #60	; 0x3c
   15524:	pop	{r4, r5, r6, lr}
   15528:	add	sp, sp, #4
   1552c:	bx	lr
   15530:	bl	111b0 <__stack_chk_fail@plt>
   15534:	andeq	fp, r2, r8, lsl #30
   15538:	push	{r4, lr}
   1553c:	mov	r2, #5
   15540:	ldr	r1, [pc, #88]	; 155a0 <__assert_fail@plt+0x4174>
   15544:	mov	r0, #0
   15548:	bl	111a4 <dcgettext@plt>
   1554c:	ldr	r2, [pc, #80]	; 155a4 <__assert_fail@plt+0x4178>
   15550:	mov	r1, r0
   15554:	mov	r0, #1
   15558:	bl	1130c <__printf_chk@plt>
   1555c:	mov	r2, #5
   15560:	ldr	r1, [pc, #64]	; 155a8 <__assert_fail@plt+0x417c>
   15564:	mov	r0, #0
   15568:	bl	111a4 <dcgettext@plt>
   1556c:	ldr	r3, [pc, #56]	; 155ac <__assert_fail@plt+0x4180>
   15570:	ldr	r2, [pc, #56]	; 155b0 <__assert_fail@plt+0x4184>
   15574:	mov	r1, r0
   15578:	mov	r0, #1
   1557c:	bl	1130c <__printf_chk@plt>
   15580:	ldr	r1, [pc, #44]	; 155b4 <__assert_fail@plt+0x4188>
   15584:	mov	r2, #5
   15588:	mov	r0, #0
   1558c:	bl	111a4 <dcgettext@plt>
   15590:	ldr	r3, [pc, #32]	; 155b8 <__assert_fail@plt+0x418c>
   15594:	pop	{r4, lr}
   15598:	ldr	r1, [r3]
   1559c:	b	11108 <fputs_unlocked@plt>
   155a0:	andeq	fp, r1, r4, lsr #32
   155a4:	andeq	fp, r1, ip, lsr r0
   155a8:	andeq	fp, r1, r4, asr r0
   155ac:	andeq	sl, r1, r0, lsr r6
   155b0:	andeq	sl, r1, r8, asr r6
   155b4:	andeq	fp, r1, r8, rrx
   155b8:	muleq	r2, r4, r1
   155bc:	push	{r4, lr}
   155c0:	mov	r4, r0
   155c4:	bl	11258 <malloc@plt>
   155c8:	adds	r4, r4, #0
   155cc:	movne	r4, #1
   155d0:	cmp	r0, #0
   155d4:	movne	r4, #0
   155d8:	cmp	r4, #0
   155dc:	popeq	{r4, pc}
   155e0:	bl	15804 <__assert_fail@plt+0x43d8>
   155e4:	push	{r4, r5, r6, lr}
   155e8:	umull	r4, r5, r0, r1
   155ec:	adds	r3, r5, #0
   155f0:	movne	r3, #1
   155f4:	cmp	r4, #0
   155f8:	blt	15610 <__assert_fail@plt+0x41e4>
   155fc:	cmp	r3, #0
   15600:	bne	15610 <__assert_fail@plt+0x41e4>
   15604:	mul	r0, r1, r0
   15608:	pop	{r4, r5, r6, lr}
   1560c:	b	155bc <__assert_fail@plt+0x4190>
   15610:	bl	15804 <__assert_fail@plt+0x43d8>
   15614:	b	155bc <__assert_fail@plt+0x4190>
   15618:	adds	r3, r0, #0
   1561c:	movne	r3, #1
   15620:	cmp	r1, #0
   15624:	movne	r3, #0
   15628:	cmp	r3, #0
   1562c:	push	{r4, lr}
   15630:	bne	15658 <__assert_fail@plt+0x422c>
   15634:	mov	r4, r1
   15638:	bl	111bc <realloc@plt>
   1563c:	adds	r4, r4, #0
   15640:	movne	r4, #1
   15644:	cmp	r0, #0
   15648:	movne	r4, #0
   1564c:	cmp	r4, #0
   15650:	popeq	{r4, pc}
   15654:	bl	15804 <__assert_fail@plt+0x43d8>
   15658:	bl	11150 <free@plt>
   1565c:	mov	r0, #0
   15660:	pop	{r4, pc}
   15664:	push	{r4, r5, r6, lr}
   15668:	umull	r4, r5, r1, r2
   1566c:	adds	r3, r5, #0
   15670:	movne	r3, #1
   15674:	cmp	r4, #0
   15678:	blt	15690 <__assert_fail@plt+0x4264>
   1567c:	cmp	r3, #0
   15680:	bne	15690 <__assert_fail@plt+0x4264>
   15684:	mul	r1, r2, r1
   15688:	pop	{r4, r5, r6, lr}
   1568c:	b	15618 <__assert_fail@plt+0x41ec>
   15690:	bl	15804 <__assert_fail@plt+0x43d8>
   15694:	push	{r4, r5, r6, r7, r8, lr}
   15698:	subs	r7, r0, #0
   1569c:	mov	r6, r1
   156a0:	mov	r5, r2
   156a4:	ldr	r4, [r1]
   156a8:	beq	156dc <__assert_fail@plt+0x42b0>
   156ac:	mov	r1, r2
   156b0:	ldr	r0, [pc, #104]	; 15720 <__assert_fail@plt+0x42f4>
   156b4:	bl	199f0 <fts_children@@Base+0x194c>
   156b8:	cmp	r0, r4
   156bc:	bls	15700 <__assert_fail@plt+0x42d4>
   156c0:	add	r3, r4, #1
   156c4:	add	r4, r3, r4, lsr #1
   156c8:	str	r4, [r6]
   156cc:	mul	r1, r5, r4
   156d0:	mov	r0, r7
   156d4:	pop	{r4, r5, r6, r7, r8, lr}
   156d8:	b	15618 <__assert_fail@plt+0x41ec>
   156dc:	cmp	r4, #0
   156e0:	beq	15704 <__assert_fail@plt+0x42d8>
   156e4:	umull	r0, r1, r4, r5
   156e8:	adds	r3, r1, #0
   156ec:	movne	r3, #1
   156f0:	cmp	r0, #0
   156f4:	blt	15700 <__assert_fail@plt+0x42d4>
   156f8:	cmp	r3, #0
   156fc:	beq	156c8 <__assert_fail@plt+0x429c>
   15700:	bl	15804 <__assert_fail@plt+0x43d8>
   15704:	mov	r1, r2
   15708:	mov	r0, #64	; 0x40
   1570c:	bl	199f0 <fts_children@@Base+0x194c>
   15710:	cmp	r5, #64	; 0x40
   15714:	movls	r4, r0
   15718:	addhi	r4, r0, #1
   1571c:	b	156e4 <__assert_fail@plt+0x42b8>
   15720:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   15724:	cmp	r0, #0
   15728:	ldr	r3, [r1]
   1572c:	beq	15750 <__assert_fail@plt+0x4324>
   15730:	ldr	r2, [pc, #60]	; 15774 <__assert_fail@plt+0x4348>
   15734:	cmp	r3, r2
   15738:	bhi	1576c <__assert_fail@plt+0x4340>
   1573c:	add	r2, r3, #1
   15740:	add	r3, r2, r3, lsr #1
   15744:	str	r3, [r1]
   15748:	mov	r1, r3
   1574c:	b	15618 <__assert_fail@plt+0x41ec>
   15750:	cmp	r3, #0
   15754:	bne	15768 <__assert_fail@plt+0x433c>
   15758:	mov	r3, #64	; 0x40
   1575c:	str	r3, [r1]
   15760:	mov	r1, r3
   15764:	b	15618 <__assert_fail@plt+0x41ec>
   15768:	bge	15744 <__assert_fail@plt+0x4318>
   1576c:	push	{r4, lr}
   15770:	bl	15804 <__assert_fail@plt+0x43d8>
   15774:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   15778:	push	{r4, lr}
   1577c:	mov	r4, r0
   15780:	bl	155bc <__assert_fail@plt+0x4190>
   15784:	mov	r2, r4
   15788:	mov	r1, #0
   1578c:	pop	{r4, lr}
   15790:	b	11300 <memset@plt>
   15794:	push	{r4, r5, r6, lr}
   15798:	umull	r4, r5, r0, r1
   1579c:	adds	r3, r5, #0
   157a0:	movne	r3, #1
   157a4:	cmp	r4, #0
   157a8:	blt	157c0 <__assert_fail@plt+0x4394>
   157ac:	cmp	r3, #0
   157b0:	bne	157c0 <__assert_fail@plt+0x4394>
   157b4:	bl	110f0 <calloc@plt>
   157b8:	cmp	r0, #0
   157bc:	popne	{r4, r5, r6, pc}
   157c0:	bl	15804 <__assert_fail@plt+0x43d8>
   157c4:	push	{r4, r5, r6, lr}
   157c8:	mov	r4, r1
   157cc:	mov	r5, r0
   157d0:	mov	r0, r1
   157d4:	bl	155bc <__assert_fail@plt+0x4190>
   157d8:	mov	r2, r4
   157dc:	mov	r1, r5
   157e0:	pop	{r4, r5, r6, lr}
   157e4:	b	11174 <memcpy@plt>
   157e8:	push	{r4, lr}
   157ec:	mov	r4, r0
   157f0:	bl	112b8 <strlen@plt>
   157f4:	add	r1, r0, #1
   157f8:	mov	r0, r4
   157fc:	pop	{r4, lr}
   15800:	b	157c4 <__assert_fail@plt+0x4398>
   15804:	ldr	r3, [pc, #44]	; 15838 <__assert_fail@plt+0x440c>
   15808:	push	{r4, lr}
   1580c:	mov	r2, #5
   15810:	ldr	r1, [pc, #36]	; 1583c <__assert_fail@plt+0x4410>
   15814:	mov	r0, #0
   15818:	ldr	r4, [r3]
   1581c:	bl	111a4 <dcgettext@plt>
   15820:	ldr	r2, [pc, #24]	; 15840 <__assert_fail@plt+0x4414>
   15824:	mov	r1, #0
   15828:	mov	r3, r0
   1582c:	mov	r0, r4
   15830:	bl	11240 <error@plt>
   15834:	bl	113e4 <abort@plt>
   15838:	andeq	ip, r2, r8, lsr r1
   1583c:	ldrdeq	fp, [r1], -ip
   15840:	andeq	sl, r1, r8, lsr #25
   15844:	push	{r4, lr}
   15848:	orr	r1, r1, #512	; 0x200
   1584c:	bl	1740c <fts_open@@Base>
   15850:	cmp	r0, #0
   15854:	popne	{r4, pc}
   15858:	bl	112e8 <__errno_location@plt>
   1585c:	ldr	r3, [r0]
   15860:	cmp	r3, #22
   15864:	beq	1586c <__assert_fail@plt+0x4440>
   15868:	bl	15804 <__assert_fail@plt+0x43d8>
   1586c:	ldr	r3, [pc, #12]	; 15880 <__assert_fail@plt+0x4454>
   15870:	mov	r2, #41	; 0x29
   15874:	ldr	r1, [pc, #8]	; 15884 <__assert_fail@plt+0x4458>
   15878:	ldr	r0, [pc, #8]	; 15888 <__assert_fail@plt+0x445c>
   1587c:	bl	1142c <__assert_fail@plt>
   15880:	strdeq	fp, [r1], -r0
   15884:	strdeq	fp, [r1], -ip
   15888:	andeq	fp, r1, r8, lsl #2
   1588c:	ldr	r3, [r0, #48]	; 0x30
   15890:	and	r3, r3, #17
   15894:	cmp	r3, #16
   15898:	beq	158bc <__assert_fail@plt+0x4490>
   1589c:	cmp	r3, #17
   158a0:	beq	158ac <__assert_fail@plt+0x4480>
   158a4:	mov	r0, #0
   158a8:	bx	lr
   158ac:	ldr	r0, [r1, #48]	; 0x30
   158b0:	adds	r0, r0, #0
   158b4:	movne	r0, #1
   158b8:	bx	lr
   158bc:	mov	r0, #1
   158c0:	bx	lr
   158c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158c8:	cmp	r2, #36	; 0x24
   158cc:	ldr	r7, [pc, #1580]	; 15f00 <__assert_fail@plt+0x4ad4>
   158d0:	sub	sp, sp, #20
   158d4:	mov	fp, r2
   158d8:	ldr	r2, [r7]
   158dc:	ldr	r9, [sp, #56]	; 0x38
   158e0:	str	r2, [sp, #12]
   158e4:	bhi	15ee8 <__assert_fail@plt+0x4abc>
   158e8:	cmp	r1, #0
   158ec:	mov	r6, r1
   158f0:	mov	r5, r0
   158f4:	mov	sl, r3
   158f8:	addeq	r6, sp, #8
   158fc:	bl	112e8 <__errno_location@plt>
   15900:	mov	r3, #0
   15904:	str	r3, [r0]
   15908:	mov	r8, r0
   1590c:	bl	11294 <__ctype_b_loc@plt>
   15910:	ldrb	r3, [r5]
   15914:	mov	r1, r5
   15918:	ldr	ip, [r0]
   1591c:	b	15924 <__assert_fail@plt+0x44f8>
   15920:	ldrb	r3, [r1, #1]!
   15924:	lsl	r2, r3, #1
   15928:	ldrh	r0, [ip, r2]
   1592c:	ands	r4, r0, #8192	; 0x2000
   15930:	bne	15920 <__assert_fail@plt+0x44f4>
   15934:	cmp	r3, #45	; 0x2d
   15938:	beq	159c4 <__assert_fail@plt+0x4598>
   1593c:	mov	r2, fp
   15940:	mov	r1, r6
   15944:	mov	r0, r5
   15948:	bl	112ac <strtoul@plt>
   1594c:	ldr	r3, [r6]
   15950:	cmp	r3, r5
   15954:	mov	fp, r0
   15958:	beq	159ac <__assert_fail@plt+0x4580>
   1595c:	ldr	r4, [r8]
   15960:	cmp	r4, #0
   15964:	bne	1599c <__assert_fail@plt+0x4570>
   15968:	cmp	r9, #0
   1596c:	beq	1597c <__assert_fail@plt+0x4550>
   15970:	ldrb	r5, [r3]
   15974:	cmp	r5, #0
   15978:	bne	15d34 <__assert_fail@plt+0x4908>
   1597c:	str	fp, [sl]
   15980:	ldr	r2, [sp, #12]
   15984:	ldr	r3, [r7]
   15988:	mov	r0, r4
   1598c:	cmp	r2, r3
   15990:	bne	15efc <__assert_fail@plt+0x4ad0>
   15994:	add	sp, sp, #20
   15998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1599c:	cmp	r4, #34	; 0x22
   159a0:	bne	159c4 <__assert_fail@plt+0x4598>
   159a4:	mov	r4, #1
   159a8:	b	15968 <__assert_fail@plt+0x453c>
   159ac:	cmp	r9, #0
   159b0:	str	r3, [sp, #4]
   159b4:	beq	159c4 <__assert_fail@plt+0x4598>
   159b8:	ldrb	r5, [r5]
   159bc:	cmp	r5, #0
   159c0:	bne	159cc <__assert_fail@plt+0x45a0>
   159c4:	mov	r4, #4
   159c8:	b	15980 <__assert_fail@plt+0x4554>
   159cc:	mov	r1, r5
   159d0:	mov	r0, r9
   159d4:	bl	112c4 <strchr@plt>
   159d8:	ldr	r3, [sp, #4]
   159dc:	cmp	r0, #0
   159e0:	movne	fp, #1
   159e4:	beq	159c4 <__assert_fail@plt+0x4598>
   159e8:	sub	r8, r5, #69	; 0x45
   159ec:	cmp	r8, #47	; 0x2f
   159f0:	ldrls	pc, [pc, r8, lsl #2]
   159f4:	b	15bbc <__assert_fail@plt+0x4790>
   159f8:			; <UNDEFINED> instruction: 0x00015ab8
   159fc:			; <UNDEFINED> instruction: 0x00015bbc
   15a00:			; <UNDEFINED> instruction: 0x00015ab8
   15a04:			; <UNDEFINED> instruction: 0x00015bbc
   15a08:			; <UNDEFINED> instruction: 0x00015bbc
   15a0c:			; <UNDEFINED> instruction: 0x00015bbc
   15a10:			; <UNDEFINED> instruction: 0x00015ab8
   15a14:			; <UNDEFINED> instruction: 0x00015bbc
   15a18:			; <UNDEFINED> instruction: 0x00015ab8
   15a1c:			; <UNDEFINED> instruction: 0x00015bbc
   15a20:			; <UNDEFINED> instruction: 0x00015bbc
   15a24:			; <UNDEFINED> instruction: 0x00015ab8
   15a28:			; <UNDEFINED> instruction: 0x00015bbc
   15a2c:			; <UNDEFINED> instruction: 0x00015bbc
   15a30:			; <UNDEFINED> instruction: 0x00015bbc
   15a34:			; <UNDEFINED> instruction: 0x00015ab8
   15a38:			; <UNDEFINED> instruction: 0x00015bbc
   15a3c:			; <UNDEFINED> instruction: 0x00015bbc
   15a40:			; <UNDEFINED> instruction: 0x00015bbc
   15a44:			; <UNDEFINED> instruction: 0x00015bbc
   15a48:			; <UNDEFINED> instruction: 0x00015ab8
   15a4c:			; <UNDEFINED> instruction: 0x00015ab8
   15a50:			; <UNDEFINED> instruction: 0x00015bbc
   15a54:			; <UNDEFINED> instruction: 0x00015bbc
   15a58:			; <UNDEFINED> instruction: 0x00015bbc
   15a5c:			; <UNDEFINED> instruction: 0x00015bbc
   15a60:			; <UNDEFINED> instruction: 0x00015bbc
   15a64:			; <UNDEFINED> instruction: 0x00015bbc
   15a68:			; <UNDEFINED> instruction: 0x00015bbc
   15a6c:			; <UNDEFINED> instruction: 0x00015bbc
   15a70:			; <UNDEFINED> instruction: 0x00015bbc
   15a74:			; <UNDEFINED> instruction: 0x00015bbc
   15a78:			; <UNDEFINED> instruction: 0x00015bbc
   15a7c:			; <UNDEFINED> instruction: 0x00015bbc
   15a80:			; <UNDEFINED> instruction: 0x00015ab8
   15a84:			; <UNDEFINED> instruction: 0x00015bbc
   15a88:			; <UNDEFINED> instruction: 0x00015bbc
   15a8c:			; <UNDEFINED> instruction: 0x00015bbc
   15a90:			; <UNDEFINED> instruction: 0x00015ab8
   15a94:			; <UNDEFINED> instruction: 0x00015bbc
   15a98:			; <UNDEFINED> instruction: 0x00015ab8
   15a9c:			; <UNDEFINED> instruction: 0x00015bbc
   15aa0:			; <UNDEFINED> instruction: 0x00015bbc
   15aa4:			; <UNDEFINED> instruction: 0x00015bbc
   15aa8:			; <UNDEFINED> instruction: 0x00015bbc
   15aac:			; <UNDEFINED> instruction: 0x00015bbc
   15ab0:			; <UNDEFINED> instruction: 0x00015bbc
   15ab4:			; <UNDEFINED> instruction: 0x00015ab8
   15ab8:	mov	r0, r9
   15abc:	mov	r1, #48	; 0x30
   15ac0:	str	r3, [sp, #4]
   15ac4:	bl	112c4 <strchr@plt>
   15ac8:	ldr	r3, [sp, #4]
   15acc:	cmp	r0, #0
   15ad0:	beq	15bbc <__assert_fail@plt+0x4790>
   15ad4:	ldrb	r2, [r3, #1]
   15ad8:	cmp	r2, #68	; 0x44
   15adc:	beq	15ed4 <__assert_fail@plt+0x4aa8>
   15ae0:	cmp	r2, #105	; 0x69
   15ae4:	beq	15d5c <__assert_fail@plt+0x4930>
   15ae8:	cmp	r2, #66	; 0x42
   15aec:	beq	15ed4 <__assert_fail@plt+0x4aa8>
   15af0:	cmp	r8, #47	; 0x2f
   15af4:	ldrls	pc, [pc, r8, lsl #2]
   15af8:	b	15d50 <__assert_fail@plt+0x4924>
   15afc:	andeq	r5, r1, ip, lsl #29
   15b00:	andeq	r5, r1, r0, asr sp
   15b04:	andeq	r5, r1, ip, lsr #25
   15b08:	andeq	r5, r1, r0, asr sp
   15b0c:	andeq	r5, r1, r0, asr sp
   15b10:	andeq	r5, r1, r0, asr sp
   15b14:	andeq	r5, r1, r8, lsl sp
   15b18:	andeq	r5, r1, r0, asr sp
   15b1c:	andeq	r5, r1, ip, asr lr
   15b20:	andeq	r5, r1, r0, asr sp
   15b24:	andeq	r5, r1, r0, asr sp
   15b28:	andeq	r5, r1, ip, lsr #28
   15b2c:	andeq	r5, r1, r0, asr sp
   15b30:	andeq	r5, r1, r0, asr sp
   15b34:	andeq	r5, r1, r0, asr sp
   15b38:	strdeq	r5, [r1], -ip
   15b3c:	andeq	r5, r1, r0, asr sp
   15b40:	andeq	r5, r1, r0, asr sp
   15b44:	andeq	r5, r1, r0, asr sp
   15b48:	andeq	r5, r1, r0, asr sp
   15b4c:	andeq	r5, r1, ip, asr #27
   15b50:	muleq	r1, r8, sp
   15b54:	andeq	r5, r1, r0, asr sp
   15b58:	andeq	r5, r1, r0, asr sp
   15b5c:	andeq	r5, r1, r0, asr sp
   15b60:	andeq	r5, r1, r0, asr sp
   15b64:	andeq	r5, r1, r0, asr sp
   15b68:	andeq	r5, r1, r0, asr sp
   15b6c:	andeq	r5, r1, r0, asr sp
   15b70:	andeq	r5, r1, r4, lsl #27
   15b74:	andeq	r5, r1, ip, asr #29
   15b78:	andeq	r5, r1, r0, asr sp
   15b7c:	andeq	r5, r1, r0, asr sp
   15b80:	andeq	r5, r1, r0, asr sp
   15b84:	andeq	r5, r1, ip, lsr #25
   15b88:	andeq	r5, r1, r0, asr sp
   15b8c:	andeq	r5, r1, r0, asr sp
   15b90:	andeq	r5, r1, r0, asr sp
   15b94:	andeq	r5, r1, r8, lsl sp
   15b98:	andeq	r5, r1, r0, asr sp
   15b9c:	andeq	r5, r1, ip, asr lr
   15ba0:	andeq	r5, r1, r0, asr sp
   15ba4:	andeq	r5, r1, r0, asr sp
   15ba8:	andeq	r5, r1, r0, asr sp
   15bac:	andeq	r5, r1, r0, asr sp
   15bb0:	andeq	r5, r1, r0, asr sp
   15bb4:	andeq	r5, r1, r0, asr sp
   15bb8:	strdeq	r5, [r1], -ip
   15bbc:	mov	r1, #1
   15bc0:	mov	r2, #1024	; 0x400
   15bc4:	sub	r5, r5, #66	; 0x42
   15bc8:	cmp	r5, #53	; 0x35
   15bcc:	ldrls	pc, [pc, r5, lsl #2]
   15bd0:	b	15d50 <__assert_fail@plt+0x4924>
   15bd4:			; <UNDEFINED> instruction: 0x00015ebc
   15bd8:	andeq	r5, r1, r0, asr sp
   15bdc:	andeq	r5, r1, r0, asr sp
   15be0:	muleq	r1, r4, lr
   15be4:	andeq	r5, r1, r0, asr sp
   15be8:			; <UNDEFINED> instruction: 0x00015cb4
   15bec:	andeq	r5, r1, r0, asr sp
   15bf0:	andeq	r5, r1, r0, asr sp
   15bf4:	andeq	r5, r1, r0, asr sp
   15bf8:	andeq	r5, r1, r0, lsr #26
   15bfc:	andeq	r5, r1, r0, asr sp
   15c00:	andeq	r5, r1, r4, ror #28
   15c04:	andeq	r5, r1, r0, asr sp
   15c08:	andeq	r5, r1, r0, asr sp
   15c0c:	andeq	r5, r1, r4, lsr lr
   15c10:	andeq	r5, r1, r0, asr sp
   15c14:	andeq	r5, r1, r0, asr sp
   15c18:	andeq	r5, r1, r0, asr sp
   15c1c:	andeq	r5, r1, r4, lsl #28
   15c20:	andeq	r5, r1, r0, asr sp
   15c24:	andeq	r5, r1, r0, asr sp
   15c28:	andeq	r5, r1, r0, asr sp
   15c2c:	andeq	r5, r1, r0, asr sp
   15c30:	ldrdeq	r5, [r1], -r4
   15c34:	andeq	r5, r1, r0, lsr #27
   15c38:	andeq	r5, r1, r0, asr sp
   15c3c:	andeq	r5, r1, r0, asr sp
   15c40:	andeq	r5, r1, r0, asr sp
   15c44:	andeq	r5, r1, r0, asr sp
   15c48:	andeq	r5, r1, r0, asr sp
   15c4c:	andeq	r5, r1, r0, asr sp
   15c50:	andeq	r5, r1, r0, asr sp
   15c54:	andeq	r5, r1, r8, lsl #27
   15c58:	andeq	r5, r1, r0, lsl #26
   15c5c:	andeq	r5, r1, r0, asr sp
   15c60:	andeq	r5, r1, r0, asr sp
   15c64:	andeq	r5, r1, r0, asr sp
   15c68:			; <UNDEFINED> instruction: 0x00015cb4
   15c6c:	andeq	r5, r1, r0, asr sp
   15c70:	andeq	r5, r1, r0, asr sp
   15c74:	andeq	r5, r1, r0, asr sp
   15c78:	andeq	r5, r1, r0, lsr #26
   15c7c:	andeq	r5, r1, r0, asr sp
   15c80:	andeq	r5, r1, r4, ror #28
   15c84:	andeq	r5, r1, r0, asr sp
   15c88:	andeq	r5, r1, r0, asr sp
   15c8c:	andeq	r5, r1, r0, asr sp
   15c90:	andeq	r5, r1, r0, asr sp
   15c94:	andeq	r5, r1, r0, asr sp
   15c98:	andeq	r5, r1, r0, asr sp
   15c9c:	andeq	r5, r1, r4, lsl #28
   15ca0:	andeq	r5, r1, r0, asr sp
   15ca4:	andeq	r5, r1, r0, asr sp
   15ca8:	andeq	r5, r1, r4, ror sp
   15cac:	mov	r1, #1
   15cb0:	mov	r2, #1024	; 0x400
   15cb4:	umull	ip, r0, r2, fp
   15cb8:	adds	r0, r0, #0
   15cbc:	movne	r0, #1
   15cc0:	cmp	r0, #0
   15cc4:	bne	15ee0 <__assert_fail@plt+0x4ab4>
   15cc8:	mul	fp, r2, fp
   15ccc:	umull	ip, r0, r2, fp
   15cd0:	adds	r0, r0, #0
   15cd4:	movne	r0, #1
   15cd8:	cmp	r0, #0
   15cdc:	bne	15ee0 <__assert_fail@plt+0x4ab4>
   15ce0:	mul	fp, r2, fp
   15ce4:	umull	ip, r0, r2, fp
   15ce8:	adds	r0, r0, #0
   15cec:	movne	r0, #1
   15cf0:	cmp	r0, #0
   15cf4:	muleq	fp, r2, fp
   15cf8:	bne	15ee0 <__assert_fail@plt+0x4ab4>
   15cfc:	orr	r4, r4, r0
   15d00:	add	r2, r3, r1
   15d04:	str	r2, [r6]
   15d08:	ldrb	r3, [r3, r1]
   15d0c:	cmp	r3, #0
   15d10:	orrne	r4, r4, #2
   15d14:	b	1597c <__assert_fail@plt+0x4550>
   15d18:	mov	r1, #1
   15d1c:	mov	r2, #1024	; 0x400
   15d20:	umull	ip, r0, r2, fp
   15d24:	cmp	r0, #0
   15d28:	bne	15e80 <__assert_fail@plt+0x4a54>
   15d2c:	mul	fp, r2, fp
   15d30:	b	15d00 <__assert_fail@plt+0x48d4>
   15d34:	mov	r1, r5
   15d38:	mov	r0, r9
   15d3c:	str	r3, [sp, #4]
   15d40:	bl	112c4 <strchr@plt>
   15d44:	ldr	r3, [sp, #4]
   15d48:	cmp	r0, #0
   15d4c:	bne	159e8 <__assert_fail@plt+0x45bc>
   15d50:	str	fp, [sl]
   15d54:	orr	r4, r4, #2
   15d58:	b	15980 <__assert_fail@plt+0x4554>
   15d5c:	ldrb	r1, [r3, #2]
   15d60:	mov	r2, #1024	; 0x400
   15d64:	cmp	r1, #66	; 0x42
   15d68:	movne	r1, #1
   15d6c:	moveq	r1, #3
   15d70:	b	15bc4 <__assert_fail@plt+0x4798>
   15d74:	cmp	fp, #0
   15d78:	blt	15e80 <__assert_fail@plt+0x4a54>
   15d7c:	lsl	fp, fp, #1
   15d80:	b	15d00 <__assert_fail@plt+0x48d4>
   15d84:	mov	r1, #1
   15d88:	lsrs	r2, fp, #23
   15d8c:	bne	15e80 <__assert_fail@plt+0x4a54>
   15d90:	lsl	fp, fp, #9
   15d94:	b	15d00 <__assert_fail@plt+0x48d4>
   15d98:	mov	r1, #1
   15d9c:	mov	r2, #1024	; 0x400
   15da0:	mov	r0, #7
   15da4:	mov	lr, #0
   15da8:	umull	r5, ip, r2, fp
   15dac:	cmp	ip, #0
   15db0:	movne	lr, #1
   15db4:	muleq	fp, r2, fp
   15db8:	mvnne	fp, #0
   15dbc:	subs	r0, r0, #1
   15dc0:	bne	15da8 <__assert_fail@plt+0x497c>
   15dc4:	orr	r4, r4, lr
   15dc8:	b	15d00 <__assert_fail@plt+0x48d4>
   15dcc:	mov	r1, #1
   15dd0:	mov	r2, #1024	; 0x400
   15dd4:	mov	r0, #8
   15dd8:	mov	lr, #0
   15ddc:	umull	r5, ip, r2, fp
   15de0:	cmp	ip, #0
   15de4:	movne	lr, #1
   15de8:	muleq	fp, r2, fp
   15dec:	mvnne	fp, #0
   15df0:	subs	r0, r0, #1
   15df4:	bne	15ddc <__assert_fail@plt+0x49b0>
   15df8:	b	15dc4 <__assert_fail@plt+0x4998>
   15dfc:	mov	r1, #1
   15e00:	mov	r2, #1024	; 0x400
   15e04:	mov	r0, #4
   15e08:	mov	lr, #0
   15e0c:	umull	r5, ip, r2, fp
   15e10:	cmp	ip, #0
   15e14:	movne	lr, #1
   15e18:	muleq	fp, r2, fp
   15e1c:	mvnne	fp, #0
   15e20:	subs	r0, r0, #1
   15e24:	bne	15e0c <__assert_fail@plt+0x49e0>
   15e28:	b	15dc4 <__assert_fail@plt+0x4998>
   15e2c:	mov	r1, #1
   15e30:	mov	r2, #1024	; 0x400
   15e34:	mov	r0, #5
   15e38:	mov	lr, #0
   15e3c:	umull	r5, ip, r2, fp
   15e40:	cmp	ip, #0
   15e44:	movne	lr, #1
   15e48:	muleq	fp, r2, fp
   15e4c:	mvnne	fp, #0
   15e50:	subs	r0, r0, #1
   15e54:	bne	15e3c <__assert_fail@plt+0x4a10>
   15e58:	b	15dc4 <__assert_fail@plt+0x4998>
   15e5c:	mov	r1, #1
   15e60:	mov	r2, #1024	; 0x400
   15e64:	umull	ip, r0, r2, fp
   15e68:	cmp	r0, #0
   15e6c:	bne	15e80 <__assert_fail@plt+0x4a54>
   15e70:	mul	fp, r2, fp
   15e74:	umull	ip, r0, r2, fp
   15e78:	cmp	r0, #0
   15e7c:	beq	15d2c <__assert_fail@plt+0x4900>
   15e80:	mov	r4, #1
   15e84:	mvn	fp, #0
   15e88:	b	15d00 <__assert_fail@plt+0x48d4>
   15e8c:	mov	r1, #1
   15e90:	mov	r2, #1024	; 0x400
   15e94:	mov	r0, #6
   15e98:	mov	lr, #0
   15e9c:	umull	r5, ip, r2, fp
   15ea0:	cmp	ip, #0
   15ea4:	movne	lr, #1
   15ea8:	muleq	fp, r2, fp
   15eac:	mvnne	fp, #0
   15eb0:	subs	r0, r0, #1
   15eb4:	bne	15e9c <__assert_fail@plt+0x4a70>
   15eb8:	b	15dc4 <__assert_fail@plt+0x4998>
   15ebc:	lsrs	r2, fp, #22
   15ec0:	bne	15e80 <__assert_fail@plt+0x4a54>
   15ec4:	lsl	fp, fp, #10
   15ec8:	b	15d00 <__assert_fail@plt+0x48d4>
   15ecc:	mov	r1, #1
   15ed0:	b	15d00 <__assert_fail@plt+0x48d4>
   15ed4:	mov	r1, #2
   15ed8:	mov	r2, #1000	; 0x3e8
   15edc:	b	15bc4 <__assert_fail@plt+0x4798>
   15ee0:	mvn	fp, #0
   15ee4:	b	15cfc <__assert_fail@plt+0x48d0>
   15ee8:	ldr	r3, [pc, #20]	; 15f04 <__assert_fail@plt+0x4ad8>
   15eec:	mov	r2, #96	; 0x60
   15ef0:	ldr	r1, [pc, #16]	; 15f08 <__assert_fail@plt+0x4adc>
   15ef4:	ldr	r0, [pc, #16]	; 15f0c <__assert_fail@plt+0x4ae0>
   15ef8:	bl	1142c <__assert_fail@plt>
   15efc:	bl	111b0 <__stack_chk_fail@plt>
   15f00:	andeq	fp, r2, r8, lsl #30
   15f04:	andeq	fp, r1, r8, lsl r1
   15f08:	andeq	fp, r1, r4, lsr #2
   15f0c:	andeq	fp, r1, r4, lsr r1
   15f10:	ldrd	r2, [r1, #8]
   15f14:	push	{r4, r5}
   15f18:	ldrd	r4, [r0, #8]
   15f1c:	cmp	r5, r3
   15f20:	cmpeq	r4, r2
   15f24:	movne	r0, #0
   15f28:	bne	15f44 <__assert_fail@plt+0x4b18>
   15f2c:	ldrd	r4, [r0]
   15f30:	ldrd	r2, [r1]
   15f34:	cmp	r5, r3
   15f38:	cmpeq	r4, r2
   15f3c:	moveq	r0, #1
   15f40:	movne	r0, #0
   15f44:	pop	{r4, r5}
   15f48:	bx	lr
   15f4c:	push	{r4, lr}
   15f50:	mov	r2, r1
   15f54:	mov	r3, #0
   15f58:	ldrd	r0, [r0, #8]
   15f5c:	bl	19bfc <fts_children@@Base+0x1b58>
   15f60:	mov	r0, r2
   15f64:	pop	{r4, pc}
   15f68:	push	{r4, lr}
   15f6c:	mov	r2, r1
   15f70:	mov	r3, #0
   15f74:	ldrd	r0, [r0]
   15f78:	bl	19bfc <fts_children@@Base+0x1b58>
   15f7c:	mov	r0, r2
   15f80:	pop	{r4, pc}
   15f84:	push	{r4, r5}
   15f88:	ldrd	r2, [r1]
   15f8c:	ldrd	r4, [r0]
   15f90:	cmp	r5, r3
   15f94:	cmpeq	r4, r2
   15f98:	moveq	r0, #1
   15f9c:	movne	r0, #0
   15fa0:	pop	{r4, r5}
   15fa4:	bx	lr
   15fa8:	ldr	r2, [r0]
   15fac:	ldr	r3, [r1]
   15fb0:	ldrd	r0, [r2, #168]	; 0xa8
   15fb4:	ldrd	r2, [r3, #168]	; 0xa8
   15fb8:	cmp	r1, r3
   15fbc:	cmpeq	r0, r2
   15fc0:	bcc	15fd0 <__assert_fail@plt+0x4ba4>
   15fc4:	movhi	r0, #1
   15fc8:	movls	r0, #0
   15fcc:	bx	lr
   15fd0:	mvn	r0, #0
   15fd4:	bx	lr
   15fd8:	ldr	r3, [r0, #40]	; 0x28
   15fdc:	push	{r4, r5, r6, r7, r8, lr}
   15fe0:	cmp	r3, r2
   15fe4:	mov	r6, r0
   15fe8:	ldr	r7, [r0, #44]	; 0x2c
   15fec:	mov	r5, r2
   15ff0:	mov	r4, r1
   15ff4:	ldr	r0, [r0, #8]
   15ff8:	bcs	16020 <__assert_fail@plt+0x4bf4>
   15ffc:	add	r1, r2, #40	; 0x28
   16000:	cmn	r1, #-1073741823	; 0xc0000001
   16004:	str	r1, [r6, #40]	; 0x28
   16008:	bhi	16098 <__assert_fail@plt+0x4c6c>
   1600c:	lsl	r1, r1, #2
   16010:	bl	111bc <realloc@plt>
   16014:	cmp	r0, #0
   16018:	strne	r0, [r6, #8]
   1601c:	beq	16094 <__assert_fail@plt+0x4c68>
   16020:	cmp	r4, #0
   16024:	movne	r2, r0
   16028:	beq	1603c <__assert_fail@plt+0x4c10>
   1602c:	str	r4, [r2], #4
   16030:	ldr	r4, [r4, #8]
   16034:	cmp	r4, #0
   16038:	bne	1602c <__assert_fail@plt+0x4c00>
   1603c:	mov	r3, r7
   16040:	mov	r2, #4
   16044:	mov	r1, r5
   16048:	bl	113a8 <qsort@plt>
   1604c:	ldr	lr, [r6, #8]
   16050:	subs	r3, r5, #1
   16054:	ldr	r0, [lr]
   16058:	moveq	r2, r0
   1605c:	beq	16088 <__assert_fail@plt+0x4c5c>
   16060:	mov	ip, r0
   16064:	mov	r2, lr
   16068:	b	16070 <__assert_fail@plt+0x4c44>
   1606c:	ldr	ip, [r2]
   16070:	ldr	r1, [r2, #4]!
   16074:	subs	r3, r3, #1
   16078:	str	r1, [ip, #8]
   1607c:	bne	1606c <__assert_fail@plt+0x4c40>
   16080:	add	r5, lr, r5, lsl #2
   16084:	ldr	r2, [r5, #-4]
   16088:	mov	r3, #0
   1608c:	str	r3, [r2, #8]
   16090:	pop	{r4, r5, r6, r7, r8, pc}
   16094:	ldr	r0, [r6, #8]
   16098:	bl	11150 <free@plt>
   1609c:	mov	r3, #0
   160a0:	mov	r0, r4
   160a4:	str	r3, [r6, #8]
   160a8:	str	r3, [r6, #40]	; 0x28
   160ac:	pop	{r4, r5, r6, r7, r8, pc}
   160b0:	add	r3, r2, #184	; 0xb8
   160b4:	push	{r4, r5, r6, r7, r8, lr}
   160b8:	mov	r6, r0
   160bc:	bic	r0, r3, #7
   160c0:	mov	r5, r2
   160c4:	mov	r7, r1
   160c8:	bl	11258 <malloc@plt>
   160cc:	subs	r4, r0, #0
   160d0:	beq	1611c <__assert_fail@plt+0x4cf0>
   160d4:	mov	r1, r7
   160d8:	mov	r2, r5
   160dc:	add	r0, r4, #176	; 0xb0
   160e0:	bl	11174 <memcpy@plt>
   160e4:	add	r0, r4, r5
   160e8:	ldr	r1, [r6, #24]
   160ec:	mov	r3, #0
   160f0:	mov	r2, #3
   160f4:	strb	r3, [r0, #176]	; 0xb0
   160f8:	str	r3, [r4, #32]
   160fc:	str	r3, [r4, #12]
   16100:	strh	r3, [r4, #62]	; 0x3e
   16104:	str	r3, [r4, #16]
   16108:	str	r3, [r4, #20]
   1610c:	str	r5, [r4, #52]	; 0x34
   16110:	str	r6, [r4, #44]	; 0x2c
   16114:	str	r1, [r4, #28]
   16118:	strh	r2, [r4, #64]	; 0x40
   1611c:	mov	r0, r4
   16120:	pop	{r4, r5, r6, r7, r8, pc}
   16124:	push	{r4, r5, r6, lr}
   16128:	subs	r4, r0, #0
   1612c:	popeq	{r4, r5, r6, pc}
   16130:	ldr	r3, [r4, #12]
   16134:	ldr	r5, [r4, #8]
   16138:	subs	r0, r3, #0
   1613c:	beq	16144 <__assert_fail@plt+0x4d18>
   16140:	bl	11408 <closedir@plt>
   16144:	mov	r0, r4
   16148:	bl	11150 <free@plt>
   1614c:	subs	r4, r5, #0
   16150:	bne	16130 <__assert_fail@plt+0x4d04>
   16154:	pop	{r4, r5, r6, pc}
   16158:	push	{r4, lr}
   1615c:	mov	r4, r0
   16160:	mov	r0, r4
   16164:	bl	19590 <fts_children@@Base+0x14ec>
   16168:	cmp	r0, #0
   1616c:	mov	r0, r4
   16170:	popne	{r4, pc}
   16174:	bl	195dc <fts_children@@Base+0x1538>
   16178:	cmp	r0, #0
   1617c:	blt	16160 <__assert_fail@plt+0x4d34>
   16180:	bl	113f0 <close@plt>
   16184:	b	16160 <__assert_fail@plt+0x4d34>
   16188:	push	{r4, r5, r6, r7, r8, lr}
   1618c:	sub	sp, sp, #120	; 0x78
   16190:	ldr	r6, [r0, #44]	; 0x2c
   16194:	ldr	r5, [pc, #272]	; 162ac <__assert_fail@plt+0x4e80>
   16198:	ldr	r3, [r6, #48]	; 0x30
   1619c:	ldr	r2, [r5]
   161a0:	tst	r3, #512	; 0x200
   161a4:	str	r2, [sp, #116]	; 0x74
   161a8:	beq	1622c <__assert_fail@plt+0x4e00>
   161ac:	ldr	r4, [r6, #52]	; 0x34
   161b0:	mov	r7, r0
   161b4:	cmp	r4, #0
   161b8:	mov	r8, r1
   161bc:	beq	161e4 <__assert_fail@plt+0x4db8>
   161c0:	ldrd	r2, [r7, #72]	; 0x48
   161c4:	add	r1, sp, #8
   161c8:	mov	r0, r4
   161cc:	strd	r2, [sp, #8]
   161d0:	bl	18b00 <fts_children@@Base+0xa5c>
   161d4:	cmp	r0, #0
   161d8:	beq	16210 <__assert_fail@plt+0x4de4>
   161dc:	ldr	r6, [r0, #8]
   161e0:	b	16230 <__assert_fail@plt+0x4e04>
   161e4:	ldr	r3, [pc, #196]	; 162b0 <__assert_fail@plt+0x4e84>
   161e8:	mov	r1, r4
   161ec:	str	r3, [sp]
   161f0:	ldr	r2, [pc, #188]	; 162b4 <__assert_fail@plt+0x4e88>
   161f4:	ldr	r3, [pc, #188]	; 162b8 <__assert_fail@plt+0x4e8c>
   161f8:	mov	r0, #13
   161fc:	bl	18db8 <fts_children@@Base+0xd14>
   16200:	cmp	r0, #0
   16204:	mov	r4, r0
   16208:	str	r0, [r6, #52]	; 0x34
   1620c:	bne	161c0 <__assert_fail@plt+0x4d94>
   16210:	cmp	r8, #0
   16214:	blt	1622c <__assert_fail@plt+0x4e00>
   16218:	mov	r0, r8
   1621c:	add	r1, sp, #24
   16220:	bl	110e4 <fstatfs64@plt>
   16224:	cmp	r0, #0
   16228:	beq	1624c <__assert_fail@plt+0x4e20>
   1622c:	mov	r6, #0
   16230:	ldr	r2, [sp, #116]	; 0x74
   16234:	ldr	r3, [r5]
   16238:	mov	r0, r6
   1623c:	cmp	r2, r3
   16240:	bne	162a4 <__assert_fail@plt+0x4e78>
   16244:	add	sp, sp, #120	; 0x78
   16248:	pop	{r4, r5, r6, r7, r8, pc}
   1624c:	cmp	r4, #0
   16250:	ldr	r6, [sp, #24]
   16254:	beq	16230 <__assert_fail@plt+0x4e04>
   16258:	mov	r0, #16
   1625c:	bl	11258 <malloc@plt>
   16260:	subs	r8, r0, #0
   16264:	beq	16230 <__assert_fail@plt+0x4e04>
   16268:	ldrd	r2, [r7, #72]	; 0x48
   1626c:	str	r6, [r8, #8]
   16270:	mov	r0, r4
   16274:	strd	r2, [r8]
   16278:	mov	r1, r8
   1627c:	bl	193e4 <fts_children@@Base+0x1340>
   16280:	cmp	r0, #0
   16284:	beq	16298 <__assert_fail@plt+0x4e6c>
   16288:	cmp	r8, r0
   1628c:	bne	162a8 <__assert_fail@plt+0x4e7c>
   16290:	ldr	r6, [sp, #24]
   16294:	b	16230 <__assert_fail@plt+0x4e04>
   16298:	mov	r0, r8
   1629c:	bl	11150 <free@plt>
   162a0:	b	16290 <__assert_fail@plt+0x4e64>
   162a4:	bl	111b0 <__stack_chk_fail@plt>
   162a8:	bl	113e4 <abort@plt>
   162ac:	andeq	fp, r2, r8, lsl #30
   162b0:	andeq	r1, r1, r0, asr r1
   162b4:	andeq	r5, r1, r8, ror #30
   162b8:	andeq	r5, r1, r4, lsl #31
   162bc:	push	{r4, lr}
   162c0:	bl	16188 <__assert_fail@plt+0x4d5c>
   162c4:	ldr	r3, [pc, #112]	; 1633c <__assert_fail@plt+0x4f10>
   162c8:	cmp	r0, r3
   162cc:	beq	1632c <__assert_fail@plt+0x4f00>
   162d0:	ble	16308 <__assert_fail@plt+0x4edc>
   162d4:	ldr	r3, [pc, #100]	; 16340 <__assert_fail@plt+0x4f14>
   162d8:	cmp	r0, r3
   162dc:	beq	1632c <__assert_fail@plt+0x4f00>
   162e0:	add	r3, r3, #83886080	; 0x5000000
   162e4:	add	r3, r3, #4544	; 0x11c0
   162e8:	add	r3, r3, #51	; 0x33
   162ec:	cmp	r0, r3
   162f0:	beq	16334 <__assert_fail@plt+0x4f08>
   162f4:	ldr	r3, [pc, #72]	; 16344 <__assert_fail@plt+0x4f18>
   162f8:	cmp	r0, r3
   162fc:	moveq	r0, #2
   16300:	movne	r0, #1
   16304:	pop	{r4, pc}
   16308:	cmp	r0, #0
   1630c:	popeq	{r4, pc}
   16310:	ldr	r3, [pc, #48]	; 16348 <__assert_fail@plt+0x4f1c>
   16314:	cmp	r0, r3
   16318:	beq	1632c <__assert_fail@plt+0x4f00>
   1631c:	ldr	r3, [pc, #40]	; 1634c <__assert_fail@plt+0x4f20>
   16320:	subs	r0, r0, r3
   16324:	movne	r0, #1
   16328:	pop	{r4, pc}
   1632c:	mov	r0, #0
   16330:	pop	{r4, pc}
   16334:	mov	r0, #2
   16338:	pop	{r4, pc}
   1633c:	andeq	r9, r0, r0, lsr #31
   16340:	movtpl	r4, #24911	; 0x614f
   16344:	rsbpl	r4, r5, #1884160	; 0x1cc000
   16348:	andeq	r6, r0, r9, ror #18
   1634c:			; <UNDEFINED> instruction: 0xff534d42
   16350:	push	{r4, r5, r6, lr}
   16354:	mov	r5, r1
   16358:	ldr	r1, [r0, #32]
   1635c:	cmn	r1, #100	; 0x64
   16360:	sub	r3, r1, r5
   16364:	clz	r3, r3
   16368:	lsr	r3, r3, #5
   1636c:	moveq	r3, #0
   16370:	cmp	r3, #0
   16374:	bne	163d4 <__assert_fail@plt+0x4fa8>
   16378:	cmp	r2, #0
   1637c:	mov	r4, r0
   16380:	bne	163ac <__assert_fail@plt+0x4f80>
   16384:	ldr	r3, [r0, #48]	; 0x30
   16388:	lsr	r3, r3, #2
   1638c:	eor	r3, r3, #1
   16390:	cmp	r1, #0
   16394:	movlt	r3, #0
   16398:	andge	r3, r3, #1
   1639c:	cmp	r3, #0
   163a0:	bne	163c8 <__assert_fail@plt+0x4f9c>
   163a4:	str	r5, [r4, #32]
   163a8:	pop	{r4, r5, r6, pc}
   163ac:	add	r0, r0, #60	; 0x3c
   163b0:	bl	19598 <fts_children@@Base+0x14f4>
   163b4:	cmp	r0, #0
   163b8:	blt	163a4 <__assert_fail@plt+0x4f78>
   163bc:	bl	113f0 <close@plt>
   163c0:	str	r5, [r4, #32]
   163c4:	pop	{r4, r5, r6, pc}
   163c8:	mov	r0, r1
   163cc:	bl	113f0 <close@plt>
   163d0:	b	163c0 <__assert_fail@plt+0x4f94>
   163d4:	bl	113e4 <abort@plt>
   163d8:	ldr	r3, [r0, #48]	; 0x30
   163dc:	push	{r4, r5, r6, lr}
   163e0:	ands	r5, r3, #4
   163e4:	mov	r4, r0
   163e8:	movne	r5, #0
   163ec:	bne	16404 <__assert_fail@plt+0x4fd8>
   163f0:	tst	r3, #512	; 0x200
   163f4:	beq	16414 <__assert_fail@plt+0x4fe8>
   163f8:	mov	r2, #1
   163fc:	mvn	r1, #99	; 0x63
   16400:	bl	16350 <__assert_fail@plt+0x4f24>
   16404:	add	r0, r4, #60	; 0x3c
   16408:	bl	16158 <__assert_fail@plt+0x4d2c>
   1640c:	mov	r0, r5
   16410:	pop	{r4, r5, r6, pc}
   16414:	ldr	r0, [r0, #28]
   16418:	bl	1139c <fchdir@plt>
   1641c:	adds	r5, r0, #0
   16420:	movne	r5, #1
   16424:	b	16404 <__assert_fail@plt+0x4fd8>
   16428:	push	{r4, r5, r6, lr}
   1642c:	mov	r4, r2
   16430:	ldr	r2, [r2, #48]	; 0x30
   16434:	mov	r6, r1
   16438:	cmp	r2, #0
   1643c:	ldr	ip, [r1]
   16440:	sub	sp, sp, #8
   16444:	add	r5, r4, #72	; 0x48
   16448:	ldr	r1, [r4, #24]
   1644c:	bne	164ac <__assert_fail@plt+0x5080>
   16450:	tst	ip, #1
   16454:	beq	164ac <__assert_fail@plt+0x5080>
   16458:	mov	r2, r5
   1645c:	mov	r0, #3
   16460:	bl	113cc <__xstat64@plt>
   16464:	cmp	r0, #0
   16468:	beq	164dc <__assert_fail@plt+0x50b0>
   1646c:	bl	112e8 <__errno_location@plt>
   16470:	ldr	r3, [r0]
   16474:	mov	r6, r0
   16478:	cmp	r3, #2
   1647c:	bne	16510 <__assert_fail@plt+0x50e4>
   16480:	mov	r2, r5
   16484:	ldr	r1, [r4, #24]
   16488:	mov	r0, #3
   1648c:	bl	113fc <__lxstat64@plt>
   16490:	cmp	r0, #0
   16494:	ldrne	r3, [r6]
   16498:	bne	16510 <__assert_fail@plt+0x50e4>
   1649c:	str	r0, [r6]
   164a0:	mov	r0, #13
   164a4:	add	sp, sp, #8
   164a8:	pop	{r4, r5, r6, pc}
   164ac:	lsl	ip, ip, #30
   164b0:	orrs	r3, r3, ip, lsr #31
   164b4:	bne	16458 <__assert_fail@plt+0x502c>
   164b8:	mov	r3, #256	; 0x100
   164bc:	mov	r2, r1
   164c0:	str	r3, [sp]
   164c4:	mov	r1, r0
   164c8:	mov	r3, r5
   164cc:	mov	r0, #3
   164d0:	bl	111d4 <__fxstatat64@plt>
   164d4:	cmp	r0, #0
   164d8:	bne	16508 <__assert_fail@plt+0x50dc>
   164dc:	ldr	r3, [r4, #88]	; 0x58
   164e0:	and	r3, r3, #61440	; 0xf000
   164e4:	cmp	r3, #16384	; 0x4000
   164e8:	beq	16530 <__assert_fail@plt+0x5104>
   164ec:	cmp	r3, #40960	; 0xa000
   164f0:	beq	165ac <__assert_fail@plt+0x5180>
   164f4:	cmp	r3, #32768	; 0x8000
   164f8:	movne	r0, #3
   164fc:	moveq	r0, #8
   16500:	add	sp, sp, #8
   16504:	pop	{r4, r5, r6, pc}
   16508:	bl	112e8 <__errno_location@plt>
   1650c:	ldr	r3, [r0]
   16510:	str	r3, [r4, #32]
   16514:	mov	r0, r5
   16518:	mov	r2, #104	; 0x68
   1651c:	mov	r1, #0
   16520:	bl	11300 <memset@plt>
   16524:	mov	r0, #10
   16528:	add	sp, sp, #8
   1652c:	pop	{r4, r5, r6, pc}
   16530:	ldr	r3, [r4, #92]	; 0x5c
   16534:	cmp	r3, #1
   16538:	bls	165a4 <__assert_fail@plt+0x5178>
   1653c:	ldr	r2, [r4, #48]	; 0x30
   16540:	cmp	r2, #0
   16544:	ble	165a4 <__assert_fail@plt+0x5178>
   16548:	ldr	r2, [r6]
   1654c:	tst	r2, #32
   16550:	subeq	r3, r3, #2
   16554:	ldrb	r2, [r4, #176]	; 0xb0
   16558:	str	r3, [r4, #56]	; 0x38
   1655c:	cmp	r2, #46	; 0x2e
   16560:	bne	16584 <__assert_fail@plt+0x5158>
   16564:	ldrb	r3, [r4, #177]	; 0xb1
   16568:	cmp	r3, #0
   1656c:	beq	16590 <__assert_fail@plt+0x5164>
   16570:	ldr	r3, [r4, #176]	; 0xb0
   16574:	bic	r3, r3, #-16777216	; 0xff000000
   16578:	bic	r3, r3, #255	; 0xff
   1657c:	cmp	r3, #11776	; 0x2e00
   16580:	beq	16590 <__assert_fail@plt+0x5164>
   16584:	mov	r0, #1
   16588:	add	sp, sp, #8
   1658c:	pop	{r4, r5, r6, pc}
   16590:	ldr	r3, [r4, #48]	; 0x30
   16594:	cmp	r3, #0
   16598:	moveq	r0, #1
   1659c:	movne	r0, #5
   165a0:	b	16500 <__assert_fail@plt+0x50d4>
   165a4:	mvn	r3, #0
   165a8:	b	16554 <__assert_fail@plt+0x5128>
   165ac:	mov	r0, #12
   165b0:	b	16500 <__assert_fail@plt+0x50d4>
   165b4:	ldr	ip, [r1]
   165b8:	push	{r4, r5, r6, lr}
   165bc:	add	r3, ip, #256	; 0x100
   165c0:	add	r2, r3, r2
   165c4:	cmp	ip, r2
   165c8:	mov	r4, r0
   165cc:	ldr	r0, [r0]
   165d0:	bhi	165f8 <__assert_fail@plt+0x51cc>
   165d4:	str	r2, [r1]
   165d8:	mov	r1, r2
   165dc:	bl	111bc <realloc@plt>
   165e0:	subs	r5, r0, #0
   165e4:	movne	r3, #1
   165e8:	strne	r5, [r4]
   165ec:	beq	1661c <__assert_fail@plt+0x51f0>
   165f0:	mov	r0, r3
   165f4:	pop	{r4, r5, r6, pc}
   165f8:	mov	r5, #0
   165fc:	bl	11150 <free@plt>
   16600:	str	r5, [r4]
   16604:	bl	112e8 <__errno_location@plt>
   16608:	mov	r2, #36	; 0x24
   1660c:	mov	r3, r5
   16610:	str	r2, [r0]
   16614:	mov	r0, r3
   16618:	pop	{r4, r5, r6, pc}
   1661c:	ldr	r0, [r4]
   16620:	bl	11150 <free@plt>
   16624:	str	r5, [r4]
   16628:	mov	r3, r5
   1662c:	b	165f0 <__assert_fail@plt+0x51c4>
   16630:	ldr	r3, [pc, #104]	; 166a0 <__assert_fail@plt+0x5274>
   16634:	push	{r4, lr}
   16638:	and	r3, r3, r0
   1663c:	cmp	r3, #0
   16640:	sub	sp, sp, #8
   16644:	mov	r4, r1
   16648:	beq	1667c <__assert_fail@plt+0x5250>
   1664c:	ldr	r2, [pc, #80]	; 166a4 <__assert_fail@plt+0x5278>
   16650:	ldr	r3, [pc, #80]	; 166a8 <__assert_fail@plt+0x527c>
   16654:	str	r2, [sp]
   16658:	mov	r1, #0
   1665c:	ldr	r2, [pc, #72]	; 166ac <__assert_fail@plt+0x5280>
   16660:	mov	r0, #31
   16664:	bl	18db8 <fts_children@@Base+0xd14>
   16668:	str	r0, [r4]
   1666c:	adds	r0, r0, #0
   16670:	movne	r0, #1
   16674:	add	sp, sp, #8
   16678:	pop	{r4, pc}
   1667c:	mov	r0, #32
   16680:	bl	11258 <malloc@plt>
   16684:	cmp	r0, #0
   16688:	str	r0, [r4]
   1668c:	beq	16674 <__assert_fail@plt+0x5248>
   16690:	bl	182e4 <fts_children@@Base+0x240>
   16694:	mov	r0, #1
   16698:	add	sp, sp, #8
   1669c:	pop	{r4, pc}
   166a0:	andeq	r0, r0, r2, lsl #2
   166a4:	andeq	r1, r1, r0, asr r1
   166a8:	andeq	r5, r1, r0, lsl pc
   166ac:	andeq	r5, r1, ip, asr #30
   166b0:	lsl	r3, r1, #11
   166b4:	lsl	ip, r1, #7
   166b8:	tst	r1, #512	; 0x200
   166bc:	and	r1, r3, #32768	; 0x8000
   166c0:	and	r3, ip, #262144	; 0x40000
   166c4:	orr	r1, r1, r3
   166c8:	orr	r1, r1, #540672	; 0x84000
   166cc:	mov	r3, r2
   166d0:	orr	r1, r1, #2304	; 0x900
   166d4:	beq	166e4 <__assert_fail@plt+0x52b8>
   166d8:	mov	r2, r1
   166dc:	mov	r1, r3
   166e0:	b	19658 <fts_children@@Base+0x15b4>
   166e4:	mov	r0, r2
   166e8:	b	183dc <fts_children@@Base+0x338>
   166ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166f0:	subs	fp, r3, #0
   166f4:	ldr	r5, [pc, #500]	; 168f0 <__assert_fail@plt+0x54c4>
   166f8:	sub	sp, sp, #116	; 0x74
   166fc:	ldr	sl, [r0, #48]	; 0x30
   16700:	ldr	r3, [r5]
   16704:	mov	r6, r0
   16708:	mov	r7, r1
   1670c:	mov	r4, r2
   16710:	and	r9, sl, #4
   16714:	str	r3, [sp, #108]	; 0x6c
   16718:	beq	167ec <__assert_fail@plt+0x53c0>
   1671c:	ldr	r1, [pc, #464]	; 168f4 <__assert_fail@plt+0x54c8>
   16720:	mov	r0, fp
   16724:	bl	11120 <strcmp@plt>
   16728:	cmp	r0, #0
   1672c:	bne	167ec <__assert_fail@plt+0x53c0>
   16730:	cmp	r9, #0
   16734:	bne	16828 <__assert_fail@plt+0x53fc>
   16738:	cmp	r4, #0
   1673c:	bge	168dc <__assert_fail@plt+0x54b0>
   16740:	tst	sl, #512	; 0x200
   16744:	bne	16868 <__assert_fail@plt+0x543c>
   16748:	mov	r9, #1
   1674c:	mov	r1, sl
   16750:	mov	r2, fp
   16754:	ldr	r0, [r6, #32]
   16758:	bl	166b0 <__assert_fail@plt+0x5284>
   1675c:	subs	r8, r0, #0
   16760:	blt	168d0 <__assert_fail@plt+0x54a4>
   16764:	ldr	sl, [r6, #48]	; 0x30
   16768:	tst	sl, #2
   1676c:	beq	16808 <__assert_fail@plt+0x53dc>
   16770:	mov	r2, sp
   16774:	mov	r1, r8
   16778:	mov	r0, #3
   1677c:	bl	111ec <__fxstat64@plt>
   16780:	cmp	r0, #0
   16784:	bne	16860 <__assert_fail@plt+0x5434>
   16788:	ldrd	r0, [r7, #72]	; 0x48
   1678c:	ldrd	r2, [sp]
   16790:	cmp	r1, r3
   16794:	cmpeq	r0, r2
   16798:	bne	16854 <__assert_fail@plt+0x5428>
   1679c:	ldrd	r0, [r7, #168]	; 0xa8
   167a0:	ldrd	r2, [sp, #96]	; 0x60
   167a4:	cmp	r1, r3
   167a8:	cmpeq	r0, r2
   167ac:	bne	16854 <__assert_fail@plt+0x5428>
   167b0:	ldr	sl, [r6, #48]	; 0x30
   167b4:	tst	sl, #512	; 0x200
   167b8:	bne	168a4 <__assert_fail@plt+0x5478>
   167bc:	mov	r0, r8
   167c0:	bl	1139c <fchdir@plt>
   167c4:	mov	sl, r0
   167c8:	cmp	r4, #0
   167cc:	bge	16838 <__assert_fail@plt+0x540c>
   167d0:	bl	112e8 <__errno_location@plt>
   167d4:	mov	r4, r0
   167d8:	mov	r0, r8
   167dc:	ldr	r6, [r4]
   167e0:	bl	113f0 <close@plt>
   167e4:	str	r6, [r4]
   167e8:	b	16838 <__assert_fail@plt+0x540c>
   167ec:	cmp	r9, #0
   167f0:	bne	16828 <__assert_fail@plt+0x53fc>
   167f4:	cmp	r4, #0
   167f8:	movge	r8, r4
   167fc:	blt	1674c <__assert_fail@plt+0x5320>
   16800:	tst	sl, #2
   16804:	bne	16770 <__assert_fail@plt+0x5344>
   16808:	cmp	fp, #0
   1680c:	beq	167b4 <__assert_fail@plt+0x5388>
   16810:	mov	r0, fp
   16814:	ldr	r1, [pc, #216]	; 168f4 <__assert_fail@plt+0x54c8>
   16818:	bl	11120 <strcmp@plt>
   1681c:	cmp	r0, #0
   16820:	bne	167b4 <__assert_fail@plt+0x5388>
   16824:	b	16770 <__assert_fail@plt+0x5344>
   16828:	mvn	r3, r4
   1682c:	lsr	r3, r3, #31
   16830:	ands	sl, r3, sl, lsr #9
   16834:	bne	168c0 <__assert_fail@plt+0x5494>
   16838:	ldr	r2, [sp, #108]	; 0x6c
   1683c:	ldr	r3, [r5]
   16840:	mov	r0, sl
   16844:	cmp	r2, r3
   16848:	bne	168d8 <__assert_fail@plt+0x54ac>
   1684c:	add	sp, sp, #116	; 0x74
   16850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16854:	bl	112e8 <__errno_location@plt>
   16858:	mov	r3, #2
   1685c:	str	r3, [r0]
   16860:	mvn	sl, #0
   16864:	b	167c8 <__assert_fail@plt+0x539c>
   16868:	add	r8, r6, #60	; 0x3c
   1686c:	mov	r0, r8
   16870:	bl	19590 <fts_children@@Base+0x14ec>
   16874:	subs	r9, r0, #0
   16878:	bne	1674c <__assert_fail@plt+0x5320>
   1687c:	mov	r0, r8
   16880:	bl	195dc <fts_children@@Base+0x1538>
   16884:	ldr	sl, [r6, #48]	; 0x30
   16888:	subs	r8, r0, #0
   1688c:	blt	16748 <__assert_fail@plt+0x531c>
   16890:	tst	sl, #2
   16894:	mov	r4, r8
   16898:	mov	r9, #1
   1689c:	beq	167b4 <__assert_fail@plt+0x5388>
   168a0:	b	16770 <__assert_fail@plt+0x5344>
   168a4:	eor	r2, r9, #1
   168a8:	mov	r1, r8
   168ac:	uxtb	r2, r2
   168b0:	mov	r0, r6
   168b4:	bl	16350 <__assert_fail@plt+0x4f24>
   168b8:	mov	sl, #0
   168bc:	b	16838 <__assert_fail@plt+0x540c>
   168c0:	mov	r0, r4
   168c4:	bl	113f0 <close@plt>
   168c8:	mov	sl, #0
   168cc:	b	16838 <__assert_fail@plt+0x540c>
   168d0:	mvn	sl, #0
   168d4:	b	16838 <__assert_fail@plt+0x540c>
   168d8:	bl	111b0 <__stack_chk_fail@plt>
   168dc:	tst	sl, #2
   168e0:	mov	r8, r4
   168e4:	mov	r9, #1
   168e8:	beq	16810 <__assert_fail@plt+0x53e4>
   168ec:	b	16770 <__assert_fail@plt+0x5344>
   168f0:	andeq	fp, r2, r8, lsl #30
   168f4:	andeq	fp, r1, ip, lsl #3
   168f8:	ldr	r3, [pc, #164]	; 169a4 <__assert_fail@plt+0x5578>
   168fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16900:	and	r3, r3, r0
   16904:	cmp	r3, #0
   16908:	mov	sl, r1
   1690c:	mov	r8, r2
   16910:	beq	16978 <__assert_fail@plt+0x554c>
   16914:	mov	r0, #24
   16918:	bl	11258 <malloc@plt>
   1691c:	subs	r9, r0, #0
   16920:	beq	1699c <__assert_fail@plt+0x5570>
   16924:	ldrd	r4, [r8, #168]	; 0xa8
   16928:	ldrd	r6, [r8, #72]	; 0x48
   1692c:	str	r8, [r9, #16]
   16930:	strd	r4, [r9, #8]
   16934:	ldr	r0, [sl]
   16938:	strd	r6, [r9]
   1693c:	mov	r1, r9
   16940:	bl	193e4 <fts_children@@Base+0x1340>
   16944:	cmp	r9, r0
   16948:	mov	r4, r0
   1694c:	beq	16970 <__assert_fail@plt+0x5544>
   16950:	mov	r0, r9
   16954:	bl	11150 <free@plt>
   16958:	cmp	r4, #0
   1695c:	beq	1699c <__assert_fail@plt+0x5570>
   16960:	ldr	r2, [r4, #16]
   16964:	mov	r3, #2
   16968:	str	r2, [r8]
   1696c:	strh	r3, [r8, #60]	; 0x3c
   16970:	mov	r0, #1
   16974:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16978:	ldr	r0, [r1]
   1697c:	add	r1, r2, #72	; 0x48
   16980:	bl	18308 <fts_children@@Base+0x264>
   16984:	cmp	r0, #0
   16988:	beq	16970 <__assert_fail@plt+0x5544>
   1698c:	mov	r3, #2
   16990:	str	r8, [r8]
   16994:	strh	r3, [r8, #60]	; 0x3c
   16998:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1699c:	mov	r0, #0
   169a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169a4:	andeq	r0, r0, r2, lsl #2
   169a8:	push	{r4, r5, r6, lr}
   169ac:	sub	sp, sp, #32
   169b0:	ldr	r6, [pc, #192]	; 16a78 <__assert_fail@plt+0x564c>
   169b4:	ldr	r3, [pc, #192]	; 16a7c <__assert_fail@plt+0x5650>
   169b8:	ldr	ip, [r6]
   169bc:	and	r3, r3, r0
   169c0:	cmp	r3, #0
   169c4:	str	ip, [sp, #28]
   169c8:	bne	16a20 <__assert_fail@plt+0x55f4>
   169cc:	ldr	r3, [r2, #4]
   169d0:	cmp	r3, #0
   169d4:	beq	16a08 <__assert_fail@plt+0x55dc>
   169d8:	ldr	r0, [r3, #48]	; 0x30
   169dc:	cmp	r0, #0
   169e0:	blt	16a08 <__assert_fail@plt+0x55dc>
   169e4:	ldr	ip, [r1]
   169e8:	ldrd	r0, [ip, #16]
   169ec:	orrs	r1, r0, r1
   169f0:	beq	16a74 <__assert_fail@plt+0x5648>
   169f4:	ldrd	r4, [ip]
   169f8:	ldrd	r0, [r2, #168]	; 0xa8
   169fc:	cmp	r5, r1
   16a00:	cmpeq	r4, r0
   16a04:	beq	16a4c <__assert_fail@plt+0x5620>
   16a08:	ldr	r2, [sp, #28]
   16a0c:	ldr	r3, [r6]
   16a10:	cmp	r2, r3
   16a14:	bne	16a70 <__assert_fail@plt+0x5644>
   16a18:	add	sp, sp, #32
   16a1c:	pop	{r4, r5, r6, pc}
   16a20:	ldrd	r4, [r2, #72]	; 0x48
   16a24:	ldrd	r2, [r2, #168]	; 0xa8
   16a28:	ldr	r0, [r1]
   16a2c:	mov	r1, sp
   16a30:	strd	r4, [sp]
   16a34:	strd	r2, [sp, #8]
   16a38:	bl	1943c <fts_children@@Base+0x1398>
   16a3c:	cmp	r0, #0
   16a40:	beq	16a74 <__assert_fail@plt+0x5648>
   16a44:	bl	11150 <free@plt>
   16a48:	b	16a08 <__assert_fail@plt+0x55dc>
   16a4c:	ldrd	r4, [r2, #72]	; 0x48
   16a50:	ldrd	r0, [ip, #8]
   16a54:	cmp	r1, r5
   16a58:	cmpeq	r0, r4
   16a5c:	ldrdeq	r0, [r3, #72]	; 0x48
   16a60:	ldrdeq	r2, [r3, #168]	; 0xa8
   16a64:	strdeq	r0, [ip, #8]
   16a68:	strdeq	r2, [ip]
   16a6c:	b	16a08 <__assert_fail@plt+0x55dc>
   16a70:	bl	111b0 <__stack_chk_fail@plt>
   16a74:	bl	113e4 <abort@plt>
   16a78:	andeq	fp, r2, r8, lsl #30
   16a7c:	andeq	r0, r0, r2, lsl #2
   16a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a84:	mov	r5, r0
   16a88:	ldr	r9, [r0]
   16a8c:	sub	sp, sp, #60	; 0x3c
   16a90:	ldr	r0, [r9, #12]
   16a94:	str	r1, [sp, #36]	; 0x24
   16a98:	cmp	r0, #0
   16a9c:	str	r0, [sp, #48]	; 0x30
   16aa0:	beq	16d9c <__assert_fail@plt+0x5970>
   16aa4:	bl	11390 <dirfd@plt>
   16aa8:	subs	r3, r0, #0
   16aac:	str	r3, [sp, #44]	; 0x2c
   16ab0:	blt	1732c <__assert_fail@plt+0x5f00>
   16ab4:	ldr	r3, [r5, #44]	; 0x2c
   16ab8:	cmp	r3, #0
   16abc:	beq	17074 <__assert_fail@plt+0x5c48>
   16ac0:	ldr	r0, [r5, #48]	; 0x30
   16ac4:	mvn	r3, #0
   16ac8:	str	r3, [sp, #20]
   16acc:	mov	r3, #1
   16ad0:	str	r3, [sp, #52]	; 0x34
   16ad4:	ldr	r2, [r9, #40]	; 0x28
   16ad8:	ldr	r3, [r9, #28]
   16adc:	sub	r1, r2, #1
   16ae0:	str	r2, [sp, #4]
   16ae4:	ldrb	r3, [r3, r1]
   16ae8:	str	r1, [sp, #32]
   16aec:	mov	sl, #0
   16af0:	cmp	r3, #47	; 0x2f
   16af4:	addne	r3, r2, #1
   16af8:	strne	r3, [sp, #4]
   16afc:	strne	r2, [sp, #32]
   16b00:	ands	r0, r0, #4
   16b04:	movne	r1, #47	; 0x2f
   16b08:	ldrne	r3, [r5, #24]
   16b0c:	ldrne	r0, [sp, #32]
   16b10:	streq	r0, [sp, #24]
   16b14:	addne	r2, r3, r0
   16b18:	strbne	r1, [r3, r0]
   16b1c:	addne	r3, r2, #1
   16b20:	strne	r3, [sp, #24]
   16b24:	ldr	r3, [r9, #48]	; 0x30
   16b28:	ldr	fp, [r5, #36]	; 0x24
   16b2c:	ldr	r2, [sp, #4]
   16b30:	add	r3, r3, #1
   16b34:	str	sl, [sp, #40]	; 0x28
   16b38:	sub	fp, fp, r2
   16b3c:	str	r3, [sp, #16]
   16b40:	str	sl, [sp, #28]
   16b44:	mov	r7, sl
   16b48:	str	sl, [sp, #8]
   16b4c:	str	r9, [sp, #12]
   16b50:	b	16ba0 <__assert_fail@plt+0x5774>
   16b54:	mov	r3, #0
   16b58:	str	r3, [r4, #88]	; 0x58
   16b5c:	mov	r2, #2
   16b60:	mov	r3, #0
   16b64:	strd	r2, [r4, #120]	; 0x78
   16b68:	ldr	r3, [sp, #8]
   16b6c:	cmp	r3, #0
   16b70:	mov	r3, #0
   16b74:	str	r3, [r4, #8]
   16b78:	ldr	r3, [pc, #2148]	; 173e4 <__assert_fail@plt+0x5fb8>
   16b7c:	strne	r4, [sl, #8]
   16b80:	streq	r4, [sp, #8]
   16b84:	cmp	r7, r3
   16b88:	beq	16ca4 <__assert_fail@plt+0x5878>
   16b8c:	ldr	r3, [sp, #20]
   16b90:	add	r7, r7, #1
   16b94:	cmp	r7, r3
   16b98:	bcs	16f30 <__assert_fail@plt+0x5b04>
   16b9c:	mov	sl, r4
   16ba0:	ldr	r3, [sp, #12]
   16ba4:	ldr	r4, [r3, #12]
   16ba8:	cmp	r4, #0
   16bac:	beq	1708c <__assert_fail@plt+0x5c60>
   16bb0:	bl	112e8 <__errno_location@plt>
   16bb4:	mov	r3, #0
   16bb8:	mov	r8, r0
   16bbc:	mov	r0, r4
   16bc0:	str	r3, [r8]
   16bc4:	bl	11378 <readdir64@plt>
   16bc8:	subs	r9, r0, #0
   16bcc:	beq	17154 <__assert_fail@plt+0x5d28>
   16bd0:	ldr	r3, [r5, #48]	; 0x30
   16bd4:	tst	r3, #32
   16bd8:	bne	16be8 <__assert_fail@plt+0x57bc>
   16bdc:	ldrb	r3, [r9, #19]
   16be0:	cmp	r3, #46	; 0x2e
   16be4:	beq	16d30 <__assert_fail@plt+0x5904>
   16be8:	add	r4, r9, #19
   16bec:	mov	r0, r4
   16bf0:	bl	112b8 <strlen@plt>
   16bf4:	mov	r1, r4
   16bf8:	mov	r2, r0
   16bfc:	mov	r6, r0
   16c00:	mov	r0, r5
   16c04:	bl	160b0 <__assert_fail@plt+0x4c84>
   16c08:	subs	r4, r0, #0
   16c0c:	beq	16fdc <__assert_fail@plt+0x5bb0>
   16c10:	cmp	fp, r6
   16c14:	bls	16cb8 <__assert_fail@plt+0x588c>
   16c18:	ldr	r3, [sp, #4]
   16c1c:	adds	r6, r3, r6
   16c20:	bcs	1739c <__assert_fail@plt+0x5f70>
   16c24:	ldr	r0, [r5, #48]	; 0x30
   16c28:	ldr	r1, [r5]
   16c2c:	ldrd	r2, [r9]
   16c30:	ldr	ip, [sp, #16]
   16c34:	tst	r0, #4
   16c38:	str	r1, [r4, #4]
   16c3c:	add	r1, r4, #176	; 0xb0
   16c40:	str	ip, [r4, #48]	; 0x30
   16c44:	strd	r2, [r4, #168]	; 0xa8
   16c48:	str	r6, [r4, #40]	; 0x28
   16c4c:	streq	r1, [r4, #24]
   16c50:	bne	16d10 <__assert_fail@plt+0x58e4>
   16c54:	ldr	r3, [r5, #44]	; 0x2c
   16c58:	cmp	r3, #0
   16c5c:	beq	16c68 <__assert_fail@plt+0x583c>
   16c60:	ands	r3, r0, #1024	; 0x400
   16c64:	beq	16d7c <__assert_fail@plt+0x5950>
   16c68:	ldrb	r2, [r9, #18]
   16c6c:	and	r0, r0, #24
   16c70:	cmp	r0, #24
   16c74:	sub	r3, r2, #1
   16c78:	beq	16d50 <__assert_fail@plt+0x5924>
   16c7c:	mov	r2, #11
   16c80:	cmp	r3, #11
   16c84:	strh	r2, [r4, #60]	; 0x3c
   16c88:	bhi	16b54 <__assert_fail@plt+0x5728>
   16c8c:	ldr	r2, [pc, #1876]	; 173e8 <__assert_fail@plt+0x5fbc>
   16c90:	ldr	r1, [r2, r3, lsl #2]
   16c94:	mov	r2, #2
   16c98:	mov	r3, #0
   16c9c:	str	r1, [r4, #88]	; 0x58
   16ca0:	b	16b64 <__assert_fail@plt+0x5738>
   16ca4:	ldr	r6, [r5, #44]	; 0x2c
   16ca8:	cmp	r6, #0
   16cac:	beq	16ee4 <__assert_fail@plt+0x5ab8>
   16cb0:	ldr	r7, [pc, #1844]	; 173ec <__assert_fail@plt+0x5fc0>
   16cb4:	b	16b9c <__assert_fail@plt+0x5770>
   16cb8:	ldr	r3, [sp, #32]
   16cbc:	add	r1, r5, #36	; 0x24
   16cc0:	add	r2, r3, #2
   16cc4:	add	r2, r2, r6
   16cc8:	add	r0, r5, #24
   16ccc:	ldr	fp, [r5, #24]
   16cd0:	bl	165b4 <__assert_fail@plt+0x5188>
   16cd4:	cmp	r0, #0
   16cd8:	beq	16fdc <__assert_fail@plt+0x5bb0>
   16cdc:	ldr	r3, [r5, #24]
   16ce0:	cmp	r3, fp
   16ce4:	beq	16d94 <__assert_fail@plt+0x5968>
   16ce8:	ldr	r2, [r5, #48]	; 0x30
   16cec:	tst	r2, #4
   16cf0:	ldrne	r2, [sp, #4]
   16cf4:	addne	r3, r3, r2
   16cf8:	strne	r3, [sp, #24]
   16cfc:	ldr	fp, [r5, #36]	; 0x24
   16d00:	ldr	r3, [sp, #4]
   16d04:	str	r0, [sp, #28]
   16d08:	sub	fp, fp, r3
   16d0c:	b	16c18 <__assert_fail@plt+0x57ec>
   16d10:	ldr	r3, [r4, #28]
   16d14:	ldr	r2, [r4, #52]	; 0x34
   16d18:	str	r3, [r4, #24]
   16d1c:	add	r2, r2, #1
   16d20:	ldr	r0, [sp, #24]
   16d24:	bl	11144 <memmove@plt>
   16d28:	ldr	r0, [r5, #48]	; 0x30
   16d2c:	b	16c54 <__assert_fail@plt+0x5828>
   16d30:	ldrb	r3, [r9, #20]
   16d34:	cmp	r3, #0
   16d38:	beq	16d48 <__assert_fail@plt+0x591c>
   16d3c:	ldrh	r3, [r9, #20]
   16d40:	cmp	r3, #46	; 0x2e
   16d44:	bne	16be8 <__assert_fail@plt+0x57bc>
   16d48:	mov	r4, sl
   16d4c:	b	16b9c <__assert_fail@plt+0x5770>
   16d50:	tst	r2, #251	; 0xfb
   16d54:	beq	16c7c <__assert_fail@plt+0x5850>
   16d58:	mov	r2, #11
   16d5c:	cmp	r3, #11
   16d60:	strh	r2, [r4, #60]	; 0x3c
   16d64:	bls	16fc4 <__assert_fail@plt+0x5b98>
   16d68:	mov	r3, #0
   16d6c:	str	r3, [r4, #88]	; 0x58
   16d70:	mov	r2, #1
   16d74:	mov	r3, #0
   16d78:	b	16b64 <__assert_fail@plt+0x5738>
   16d7c:	mov	r2, r4
   16d80:	add	r1, r5, #48	; 0x30
   16d84:	ldr	r0, [r5, #32]
   16d88:	bl	16428 <__assert_fail@plt+0x4ffc>
   16d8c:	strh	r0, [r4, #60]	; 0x3c
   16d90:	b	16b68 <__assert_fail@plt+0x573c>
   16d94:	ldr	r0, [sp, #28]
   16d98:	b	16cfc <__assert_fail@plt+0x58d0>
   16d9c:	ldr	r3, [r5, #48]	; 0x30
   16da0:	ldr	r1, [r9, #24]
   16da4:	and	r2, r3, #516	; 0x204
   16da8:	cmp	r2, #512	; 0x200
   16dac:	mvnne	r0, #99	; 0x63
   16db0:	ldreq	r0, [r5, #32]
   16db4:	ands	ip, r3, #16
   16db8:	beq	16dc8 <__assert_fail@plt+0x599c>
   16dbc:	tst	r3, #1
   16dc0:	moveq	ip, #32768	; 0x8000
   16dc4:	bne	1702c <__assert_fail@plt+0x5c00>
   16dc8:	lsl	r2, r3, #7
   16dcc:	and	r2, r2, #262144	; 0x40000
   16dd0:	orr	r2, r2, ip
   16dd4:	orr	r2, r2, #540672	; 0x84000
   16dd8:	orr	r2, r2, #2304	; 0x900
   16ddc:	bl	19658 <fts_children@@Base+0x15b4>
   16de0:	subs	r3, r0, #0
   16de4:	str	r3, [sp, #44]	; 0x2c
   16de8:	movlt	r3, #0
   16dec:	strlt	r3, [r9, #12]
   16df0:	blt	17300 <__assert_fail@plt+0x5ed4>
   16df4:	bl	11384 <fdopendir@plt>
   16df8:	subs	r4, r0, #0
   16dfc:	beq	172e4 <__assert_fail@plt+0x5eb8>
   16e00:	ldrh	r3, [r9, #60]	; 0x3c
   16e04:	str	r4, [r9, #12]
   16e08:	cmp	r3, #11
   16e0c:	beq	17264 <__assert_fail@plt+0x5e38>
   16e10:	ldr	r0, [r5, #48]	; 0x30
   16e14:	tst	r0, #256	; 0x100
   16e18:	bne	171d8 <__assert_fail@plt+0x5dac>
   16e1c:	ldr	r2, [r5, #44]	; 0x2c
   16e20:	ldr	r3, [pc, #1480]	; 173f0 <__assert_fail@plt+0x5fc4>
   16e24:	cmp	r2, #0
   16e28:	mvnne	r3, #0
   16e2c:	str	r3, [sp, #20]
   16e30:	ldr	r3, [sp, #36]	; 0x24
   16e34:	cmp	r3, #2
   16e38:	beq	171c8 <__assert_fail@plt+0x5d9c>
   16e3c:	ldr	r3, [r5, #48]	; 0x30
   16e40:	and	r3, r3, #56	; 0x38
   16e44:	cmp	r3, #24
   16e48:	beq	1703c <__assert_fail@plt+0x5c10>
   16e4c:	ldr	r3, [sp, #36]	; 0x24
   16e50:	mov	r6, #1
   16e54:	sub	r7, r3, #3
   16e58:	clz	r7, r7
   16e5c:	lsr	r7, r7, #5
   16e60:	ldr	r3, [r5, #48]	; 0x30
   16e64:	tst	r3, #512	; 0x200
   16e68:	bne	17280 <__assert_fail@plt+0x5e54>
   16e6c:	mov	r3, #0
   16e70:	ldr	r2, [sp, #44]	; 0x2c
   16e74:	mov	r1, r9
   16e78:	mov	r0, r5
   16e7c:	bl	166ec <__assert_fail@plt+0x52c0>
   16e80:	cmp	r0, #0
   16e84:	beq	1707c <__assert_fail@plt+0x5c50>
   16e88:	ldrh	r4, [r9, #62]	; 0x3e
   16e8c:	tst	r7, r6
   16e90:	ldr	r6, [r9, #12]
   16e94:	orr	r4, r4, #1
   16e98:	beq	16ea8 <__assert_fail@plt+0x5a7c>
   16e9c:	bl	112e8 <__errno_location@plt>
   16ea0:	ldr	r3, [r0]
   16ea4:	str	r3, [r9, #32]
   16ea8:	strh	r4, [r9, #62]	; 0x3e
   16eac:	mov	r0, r6
   16eb0:	bl	11408 <closedir@plt>
   16eb4:	ldr	r3, [sp, #44]	; 0x2c
   16eb8:	ldr	r0, [r5, #48]	; 0x30
   16ebc:	mvn	r2, r3
   16ec0:	mov	r3, #0
   16ec4:	lsr	r2, r2, #31
   16ec8:	ands	r2, r2, r0, lsr #9
   16ecc:	str	r3, [r9, #12]
   16ed0:	bne	17364 <__assert_fail@plt+0x5f38>
   16ed4:	mov	r3, #0
   16ed8:	str	r3, [r9, #12]
   16edc:	str	r3, [sp, #52]	; 0x34
   16ee0:	b	16ad4 <__assert_fail@plt+0x56a8>
   16ee4:	ldr	r1, [sp, #44]	; 0x2c
   16ee8:	ldr	r0, [sp, #12]
   16eec:	bl	16188 <__assert_fail@plt+0x4d5c>
   16ef0:	ldr	r3, [pc, #1276]	; 173f4 <__assert_fail@plt+0x5fc8>
   16ef4:	cmp	r0, r3
   16ef8:	beq	16f1c <__assert_fail@plt+0x5af0>
   16efc:	ldr	r3, [pc, #1268]	; 173f8 <__assert_fail@plt+0x5fcc>
   16f00:	cmp	r0, r3
   16f04:	beq	16f1c <__assert_fail@plt+0x5af0>
   16f08:	ldr	r3, [pc, #1260]	; 173fc <__assert_fail@plt+0x5fd0>
   16f0c:	cmp	r0, r3
   16f10:	movne	r3, #1
   16f14:	strne	r3, [sp, #40]	; 0x28
   16f18:	bne	16cb0 <__assert_fail@plt+0x5884>
   16f1c:	ldr	r3, [sp, #20]
   16f20:	add	r7, r7, #1
   16f24:	cmp	r7, r3
   16f28:	str	r6, [sp, #40]	; 0x28
   16f2c:	bcc	16b9c <__assert_fail@plt+0x5770>
   16f30:	ldr	r3, [sp, #28]
   16f34:	ldr	r9, [sp, #12]
   16f38:	cmp	r3, #0
   16f3c:	beq	1709c <__assert_fail@plt+0x5c70>
   16f40:	ldr	r3, [r5, #4]
   16f44:	ldr	r1, [r5, #24]
   16f48:	cmp	r3, #0
   16f4c:	beq	16f7c <__assert_fail@plt+0x5b50>
   16f50:	ldr	r2, [r3, #24]
   16f54:	add	r0, r3, #176	; 0xb0
   16f58:	cmp	r2, r0
   16f5c:	ldrne	r0, [r3, #28]
   16f60:	str	r1, [r3, #28]
   16f64:	subne	r2, r2, r0
   16f68:	addne	r2, r1, r2
   16f6c:	strne	r2, [r3, #24]
   16f70:	ldr	r3, [r3, #8]
   16f74:	cmp	r3, #0
   16f78:	bne	16f50 <__assert_fail@plt+0x5b24>
   16f7c:	ldr	r3, [sp, #8]
   16f80:	b	16fb0 <__assert_fail@plt+0x5b84>
   16f84:	ldr	r2, [r3, #24]
   16f88:	cmp	r2, r0
   16f8c:	ldrne	r0, [r3, #28]
   16f90:	str	r1, [r3, #28]
   16f94:	subne	r2, r2, r0
   16f98:	addne	r2, r1, r2
   16f9c:	strne	r2, [r3, #24]
   16fa0:	ldr	r2, [r3, #8]
   16fa4:	cmp	r2, #0
   16fa8:	ldreq	r2, [r3, #4]
   16fac:	mov	r3, r2
   16fb0:	ldr	r2, [r3, #48]	; 0x30
   16fb4:	add	r0, r3, #176	; 0xb0
   16fb8:	cmp	r2, #0
   16fbc:	bge	16f84 <__assert_fail@plt+0x5b58>
   16fc0:	b	1709c <__assert_fail@plt+0x5c70>
   16fc4:	ldr	r2, [pc, #1052]	; 173e8 <__assert_fail@plt+0x5fbc>
   16fc8:	ldr	r1, [r2, r3, lsl #2]
   16fcc:	mov	r2, #1
   16fd0:	mov	r3, #0
   16fd4:	str	r1, [r4, #88]	; 0x58
   16fd8:	b	16b64 <__assert_fail@plt+0x5738>
   16fdc:	ldr	r9, [sp, #12]
   16fe0:	mov	r0, r4
   16fe4:	ldr	r4, [r8]
   16fe8:	bl	11150 <free@plt>
   16fec:	ldr	r0, [sp, #8]
   16ff0:	bl	16124 <__assert_fail@plt+0x4cf8>
   16ff4:	ldr	r0, [r9, #12]
   16ff8:	bl	11408 <closedir@plt>
   16ffc:	ldr	r3, [r5, #48]	; 0x30
   17000:	mov	r2, #0
   17004:	orr	r3, r3, #16384	; 0x4000
   17008:	mov	r1, #7
   1700c:	str	r2, [r9, #12]
   17010:	strh	r1, [r9, #60]	; 0x3c
   17014:	str	r2, [sp, #8]
   17018:	str	r3, [r5, #48]	; 0x30
   1701c:	str	r4, [r8]
   17020:	ldr	r0, [sp, #8]
   17024:	add	sp, sp, #60	; 0x3c
   17028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1702c:	ldr	ip, [r9, #48]	; 0x30
   17030:	cmp	ip, #0
   17034:	movne	ip, #32768	; 0x8000
   17038:	b	16dc8 <__assert_fail@plt+0x599c>
   1703c:	ldr	r3, [r9, #92]	; 0x5c
   17040:	cmp	r3, #2
   17044:	bne	16e4c <__assert_fail@plt+0x5a20>
   17048:	ldr	r1, [sp, #44]	; 0x2c
   1704c:	mov	r0, r9
   17050:	bl	162bc <__assert_fail@plt+0x4e90>
   17054:	cmp	r0, #0
   17058:	beq	16e4c <__assert_fail@plt+0x5a20>
   1705c:	ldr	r3, [sp, #36]	; 0x24
   17060:	cmp	r3, #3
   17064:	bne	171c8 <__assert_fail@plt+0x5d9c>
   17068:	mov	r6, #0
   1706c:	mov	r7, #1
   17070:	b	16e60 <__assert_fail@plt+0x5a34>
   17074:	ldr	r3, [pc, #884]	; 173f0 <__assert_fail@plt+0x5fc4>
   17078:	str	r3, [sp, #20]
   1707c:	mov	r3, #1
   17080:	str	r3, [sp, #52]	; 0x34
   17084:	ldr	r0, [r5, #48]	; 0x30
   17088:	b	16ad4 <__assert_fail@plt+0x56a8>
   1708c:	mov	r9, r3
   17090:	ldr	r3, [sp, #28]
   17094:	cmp	r3, #0
   17098:	bne	16f40 <__assert_fail@plt+0x5b14>
   1709c:	ldr	r3, [r5, #48]	; 0x30
   170a0:	tst	r3, #4
   170a4:	beq	170d0 <__assert_fail@plt+0x5ca4>
   170a8:	ldr	r3, [r5, #36]	; 0x24
   170ac:	ldr	r2, [sp, #4]
   170b0:	cmp	r7, #0
   170b4:	cmpne	r3, r2
   170b8:	ldreq	r3, [sp, #24]
   170bc:	subeq	r3, r3, #1
   170c0:	streq	r3, [sp, #24]
   170c4:	ldr	r2, [sp, #24]
   170c8:	mov	r3, #0
   170cc:	strb	r3, [r2]
   170d0:	ldrd	r2, [sp, #48]	; 0x30
   170d4:	cmp	r2, #0
   170d8:	movne	r3, #0
   170dc:	cmp	r3, #0
   170e0:	beq	17118 <__assert_fail@plt+0x5cec>
   170e4:	ldr	r3, [sp, #36]	; 0x24
   170e8:	cmp	r7, #0
   170ec:	cmpne	r3, #1
   170f0:	bne	17120 <__assert_fail@plt+0x5cf4>
   170f4:	ldr	r3, [r9, #48]	; 0x30
   170f8:	cmp	r3, #0
   170fc:	bne	172c4 <__assert_fail@plt+0x5e98>
   17100:	mov	r0, r5
   17104:	bl	163d8 <__assert_fail@plt+0x4fac>
   17108:	adds	r0, r0, #0
   1710c:	movne	r0, #1
   17110:	cmp	r0, #0
   17114:	bne	17374 <__assert_fail@plt+0x5f48>
   17118:	cmp	r7, #0
   1711c:	beq	17228 <__assert_fail@plt+0x5dfc>
   17120:	ldr	r3, [sp, #40]	; 0x28
   17124:	cmp	r3, #0
   17128:	bne	17198 <__assert_fail@plt+0x5d6c>
   1712c:	ldr	r3, [r5, #44]	; 0x2c
   17130:	cmp	r3, #0
   17134:	cmpne	r7, #1
   17138:	beq	17020 <__assert_fail@plt+0x5bf4>
   1713c:	mov	r2, r7
   17140:	ldr	r1, [sp, #8]
   17144:	mov	r0, r5
   17148:	add	sp, sp, #60	; 0x3c
   1714c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17150:	b	15fd8 <__assert_fail@plt+0x4bac>
   17154:	ldr	r3, [r8]
   17158:	ldr	r9, [sp, #12]
   1715c:	cmp	r3, #0
   17160:	beq	1717c <__assert_fail@plt+0x5d50>
   17164:	ldr	r2, [sp, #48]	; 0x30
   17168:	str	r3, [r9, #32]
   1716c:	orrs	r2, r2, r7
   17170:	moveq	r2, #4
   17174:	movne	r2, #7
   17178:	strh	r2, [r9, #60]	; 0x3c
   1717c:	ldr	r0, [r9, #12]
   17180:	cmp	r0, #0
   17184:	beq	17090 <__assert_fail@plt+0x5c64>
   17188:	bl	11408 <closedir@plt>
   1718c:	mov	r3, #0
   17190:	str	r3, [r9, #12]
   17194:	b	17090 <__assert_fail@plt+0x5c64>
   17198:	ldr	r3, [pc, #608]	; 17400 <__assert_fail@plt+0x5fd4>
   1719c:	mov	r2, r7
   171a0:	str	r3, [r5, #44]	; 0x2c
   171a4:	ldr	r1, [sp, #8]
   171a8:	mov	r0, r5
   171ac:	bl	15fd8 <__assert_fail@plt+0x4bac>
   171b0:	mov	r3, #0
   171b4:	str	r3, [r5, #44]	; 0x2c
   171b8:	str	r0, [sp, #8]
   171bc:	ldr	r0, [sp, #8]
   171c0:	add	sp, sp, #60	; 0x3c
   171c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c8:	mov	r3, #0
   171cc:	str	r3, [sp, #52]	; 0x34
   171d0:	ldr	r0, [r5, #48]	; 0x30
   171d4:	b	16ad4 <__assert_fail@plt+0x56a8>
   171d8:	add	r4, r5, #56	; 0x38
   171dc:	mov	r1, r4
   171e0:	mov	r2, r9
   171e4:	bl	169a8 <__assert_fail@plt+0x557c>
   171e8:	mov	r3, #0
   171ec:	mov	r2, r9
   171f0:	add	r1, r5, #48	; 0x30
   171f4:	ldr	r0, [r5, #32]
   171f8:	bl	16428 <__assert_fail@plt+0x4ffc>
   171fc:	mov	r1, r4
   17200:	mov	r2, r9
   17204:	ldr	r0, [r5, #48]	; 0x30
   17208:	bl	168f8 <__assert_fail@plt+0x54cc>
   1720c:	subs	r4, r0, #0
   17210:	bne	16e1c <__assert_fail@plt+0x59f0>
   17214:	bl	112e8 <__errno_location@plt>
   17218:	mov	r3, #12
   1721c:	str	r4, [sp, #8]
   17220:	str	r3, [r0]
   17224:	b	17020 <__assert_fail@plt+0x5bf4>
   17228:	ldr	r3, [sp, #36]	; 0x24
   1722c:	cmp	r3, #3
   17230:	bne	17248 <__assert_fail@plt+0x5e1c>
   17234:	ldrh	r3, [r9, #60]	; 0x3c
   17238:	cmp	r3, #4
   1723c:	cmpne	r3, #7
   17240:	movne	r3, #6
   17244:	strhne	r3, [r9, #60]	; 0x3c
   17248:	ldr	r0, [sp, #8]
   1724c:	bl	16124 <__assert_fail@plt+0x4cf8>
   17250:	mov	r3, #0
   17254:	str	r3, [sp, #8]
   17258:	ldr	r0, [sp, #8]
   1725c:	add	sp, sp, #60	; 0x3c
   17260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17264:	mov	r3, #0
   17268:	mov	r2, r9
   1726c:	add	r1, r5, #48	; 0x30
   17270:	ldr	r0, [r5, #32]
   17274:	bl	16428 <__assert_fail@plt+0x4ffc>
   17278:	strh	r0, [r9, #60]	; 0x3c
   1727c:	b	16e1c <__assert_fail@plt+0x59f0>
   17280:	ldr	r0, [sp, #44]	; 0x2c
   17284:	mov	r2, #3
   17288:	ldr	r1, [pc, #372]	; 17404 <__assert_fail@plt+0x5fd8>
   1728c:	bl	19798 <fts_children@@Base+0x16f4>
   17290:	subs	r3, r0, #0
   17294:	str	r3, [sp, #44]	; 0x2c
   17298:	bge	16e6c <__assert_fail@plt+0x5a40>
   1729c:	ldrh	r4, [r9, #62]	; 0x3e
   172a0:	tst	r7, r6
   172a4:	ldr	r6, [r9, #12]
   172a8:	orr	r4, r4, #1
   172ac:	bne	16e9c <__assert_fail@plt+0x5a70>
   172b0:	strh	r4, [r9, #62]	; 0x3e
   172b4:	mov	r0, r6
   172b8:	bl	11408 <closedir@plt>
   172bc:	ldr	r0, [r5, #48]	; 0x30
   172c0:	b	16ed4 <__assert_fail@plt+0x5aa8>
   172c4:	ldr	r3, [pc, #316]	; 17408 <__assert_fail@plt+0x5fdc>
   172c8:	mvn	r2, #0
   172cc:	ldr	r1, [r9, #4]
   172d0:	mov	r0, r5
   172d4:	bl	166ec <__assert_fail@plt+0x52c0>
   172d8:	adds	r0, r0, #0
   172dc:	movne	r0, #1
   172e0:	b	17110 <__assert_fail@plt+0x5ce4>
   172e4:	bl	112e8 <__errno_location@plt>
   172e8:	mov	r5, r0
   172ec:	ldr	r0, [sp, #44]	; 0x2c
   172f0:	ldr	r6, [r5]
   172f4:	bl	113f0 <close@plt>
   172f8:	str	r6, [r5]
   172fc:	str	r4, [r9, #12]
   17300:	ldr	r3, [sp, #36]	; 0x24
   17304:	cmp	r3, #3
   17308:	bne	17250 <__assert_fail@plt+0x5e24>
   1730c:	mov	r3, #4
   17310:	strh	r3, [r9, #60]	; 0x3c
   17314:	bl	112e8 <__errno_location@plt>
   17318:	mov	r3, #0
   1731c:	str	r3, [sp, #8]
   17320:	ldr	r3, [r0]
   17324:	str	r3, [r9, #32]
   17328:	b	17020 <__assert_fail@plt+0x5bf4>
   1732c:	ldr	r0, [r9, #12]
   17330:	bl	11408 <closedir@plt>
   17334:	ldr	r3, [sp, #36]	; 0x24
   17338:	mov	r4, #0
   1733c:	cmp	r3, #3
   17340:	str	r4, [r9, #12]
   17344:	bne	17250 <__assert_fail@plt+0x5e24>
   17348:	mov	r3, #4
   1734c:	strh	r3, [r9, #60]	; 0x3c
   17350:	bl	112e8 <__errno_location@plt>
   17354:	str	r4, [sp, #8]
   17358:	ldr	r3, [r0]
   1735c:	str	r3, [r9, #32]
   17360:	b	17020 <__assert_fail@plt+0x5bf4>
   17364:	ldr	r0, [sp, #44]	; 0x2c
   17368:	bl	113f0 <close@plt>
   1736c:	ldr	r0, [r5, #48]	; 0x30
   17370:	b	16ed4 <__assert_fail@plt+0x5aa8>
   17374:	ldr	r3, [r5, #48]	; 0x30
   17378:	mov	r2, #7
   1737c:	orr	r3, r3, #16384	; 0x4000
   17380:	strh	r2, [r9, #60]	; 0x3c
   17384:	ldr	r0, [sp, #8]
   17388:	str	r3, [r5, #48]	; 0x30
   1738c:	bl	16124 <__assert_fail@plt+0x4cf8>
   17390:	mov	r3, #0
   17394:	str	r3, [sp, #8]
   17398:	b	17020 <__assert_fail@plt+0x5bf4>
   1739c:	ldr	r9, [sp, #12]
   173a0:	mov	r0, r4
   173a4:	bl	11150 <free@plt>
   173a8:	ldr	r0, [sp, #8]
   173ac:	bl	16124 <__assert_fail@plt+0x4cf8>
   173b0:	ldr	r0, [r9, #12]
   173b4:	bl	11408 <closedir@plt>
   173b8:	ldr	r3, [r5, #48]	; 0x30
   173bc:	mov	r2, #0
   173c0:	orr	r3, r3, #16384	; 0x4000
   173c4:	mov	r0, #7
   173c8:	mov	r1, #36	; 0x24
   173cc:	str	r2, [r9, #12]
   173d0:	strh	r0, [r9, #60]	; 0x3c
   173d4:	str	r2, [sp, #8]
   173d8:	str	r3, [r5, #48]	; 0x30
   173dc:	str	r1, [r8]
   173e0:	b	17020 <__assert_fail@plt+0x5bf4>
   173e4:	andeq	r2, r0, r0, lsl r7
   173e8:	andeq	fp, r1, ip, asr r1
   173ec:	andeq	r2, r0, r1, lsl r7
   173f0:	andeq	r8, r1, r0, lsr #13
   173f4:	andeq	r6, r0, r9, ror #18
   173f8:			; <UNDEFINED> instruction: 0x01021994
   173fc:			; <UNDEFINED> instruction: 0xff534d42
   17400:	andeq	r5, r1, r8, lsr #31
   17404:	andeq	r0, r0, r6, lsl #8
   17408:	andeq	fp, r1, ip, lsl #3

0001740c <fts_open@@Base>:
   1740c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17410:	bic	r5, r1, #8128	; 0x1fc0
   17414:	bic	r5, r5, #63	; 0x3f
   17418:	cmp	r5, #0
   1741c:	sub	sp, sp, #20
   17420:	bne	17748 <fts_open@@Base+0x33c>
   17424:	and	r3, r1, #516	; 0x204
   17428:	cmp	r3, #516	; 0x204
   1742c:	mov	r7, r1
   17430:	beq	176dc <fts_open@@Base+0x2d0>
   17434:	ands	r5, r1, #18
   17438:	beq	176dc <fts_open@@Base+0x2d0>
   1743c:	mov	r6, r0
   17440:	mov	r1, #1
   17444:	mov	r0, #96	; 0x60
   17448:	mov	r9, r2
   1744c:	bl	110f0 <calloc@plt>
   17450:	subs	r5, r0, #0
   17454:	beq	176a0 <fts_open@@Base+0x294>
   17458:	tst	r7, #2
   1745c:	bicne	r3, r7, #512	; 0x200
   17460:	orrne	r3, r3, #4
   17464:	strne	r3, [r5, #48]	; 0x30
   17468:	ldr	r3, [r6]
   1746c:	streq	r7, [r5, #48]	; 0x30
   17470:	mvn	r2, #99	; 0x63
   17474:	cmp	r3, #0
   17478:	str	r9, [r5, #44]	; 0x2c
   1747c:	str	r2, [r5, #32]
   17480:	beq	17764 <fts_open@@Base+0x358>
   17484:	mov	r8, r6
   17488:	mov	r4, #0
   1748c:	mov	r0, r3
   17490:	bl	112b8 <strlen@plt>
   17494:	ldr	r3, [r8, #4]!
   17498:	cmp	r4, r0
   1749c:	movcc	r4, r0
   174a0:	cmp	r3, #0
   174a4:	bne	1748c <fts_open@@Base+0x80>
   174a8:	add	r2, r4, #1
   174ac:	cmp	r2, #4096	; 0x1000
   174b0:	movcc	r2, #4096	; 0x1000
   174b4:	add	r1, r5, #36	; 0x24
   174b8:	add	r0, r5, #24
   174bc:	bl	165b4 <__assert_fail@plt+0x5188>
   174c0:	subs	fp, r0, #0
   174c4:	beq	176c4 <fts_open@@Base+0x2b8>
   174c8:	ldr	sl, [r6]
   174cc:	cmp	sl, #0
   174d0:	beq	176f4 <fts_open@@Base+0x2e8>
   174d4:	mov	r2, #0
   174d8:	ldr	r1, [pc, #704]	; 177a0 <fts_open@@Base+0x394>
   174dc:	mov	r0, r5
   174e0:	bl	160b0 <__assert_fail@plt+0x4c84>
   174e4:	subs	sl, r0, #0
   174e8:	beq	176bc <fts_open@@Base+0x2b0>
   174ec:	mvn	r3, #0
   174f0:	cmp	r9, #0
   174f4:	str	r3, [sl, #48]	; 0x30
   174f8:	str	r3, [sl, #56]	; 0x38
   174fc:	ldr	r4, [r6]
   17500:	beq	17510 <fts_open@@Base+0x104>
   17504:	ldr	fp, [r5, #48]	; 0x30
   17508:	lsr	fp, fp, #10
   1750c:	and	fp, fp, #1
   17510:	cmp	r4, #0
   17514:	beq	17798 <fts_open@@Base+0x38c>
   17518:	lsr	r7, r7, #12
   1751c:	mov	r3, #0
   17520:	eor	r7, r7, #1
   17524:	and	r2, r7, #1
   17528:	str	r3, [sp, #8]
   1752c:	mov	r8, r3
   17530:	mov	r7, r3
   17534:	add	r3, r5, #48	; 0x30
   17538:	str	r2, [sp, #4]
   1753c:	str	r3, [sp, #12]
   17540:	b	17578 <fts_open@@Base+0x16c>
   17544:	cmp	r9, r1
   17548:	mov	r0, #2
   1754c:	mov	r1, #0
   17550:	mov	r3, #11
   17554:	strd	r0, [r4, #120]	; 0x78
   17558:	strh	r3, [r4, #60]	; 0x3c
   1755c:	beq	17734 <fts_open@@Base+0x328>
   17560:	str	r7, [r4, #8]
   17564:	mov	r7, r4
   17568:	ldr	r4, [r6, #4]!
   1756c:	add	r8, r8, #1
   17570:	cmp	r4, #0
   17574:	beq	17624 <fts_open@@Base+0x218>
   17578:	mov	r0, r4
   1757c:	bl	112b8 <strlen@plt>
   17580:	ldr	r3, [sp, #4]
   17584:	cmp	r0, #2
   17588:	movls	r3, #0
   1758c:	andhi	r3, r3, #1
   17590:	cmp	r3, #0
   17594:	mov	r2, r0
   17598:	bne	17704 <fts_open@@Base+0x2f8>
   1759c:	mov	r1, r4
   175a0:	mov	r0, r5
   175a4:	bl	160b0 <__assert_fail@plt+0x4c84>
   175a8:	subs	r4, r0, #0
   175ac:	beq	176ac <fts_open@@Base+0x2a0>
   175b0:	cmp	r7, #0
   175b4:	moveq	r3, #0
   175b8:	andne	r3, fp, #1
   175bc:	add	r2, r4, #176	; 0xb0
   175c0:	mov	r1, #0
   175c4:	cmp	r3, #0
   175c8:	str	r1, [r4, #48]	; 0x30
   175cc:	str	sl, [r4, #4]
   175d0:	str	r2, [r4, #24]
   175d4:	bne	17544 <fts_open@@Base+0x138>
   175d8:	mov	r2, r4
   175dc:	ldr	r1, [sp, #12]
   175e0:	ldr	r0, [r5, #32]
   175e4:	bl	16428 <__assert_fail@plt+0x4ffc>
   175e8:	cmp	r9, #0
   175ec:	strh	r0, [r4, #60]	; 0x3c
   175f0:	bne	17560 <fts_open@@Base+0x154>
   175f4:	cmp	r7, #0
   175f8:	str	r9, [r4, #8]
   175fc:	streq	r4, [sp, #8]
   17600:	moveq	r7, r4
   17604:	beq	17568 <fts_open@@Base+0x15c>
   17608:	ldr	r3, [sp, #8]
   1760c:	str	r4, [sp, #8]
   17610:	str	r4, [r3, #8]
   17614:	ldr	r4, [r6, #4]!
   17618:	add	r8, r8, #1
   1761c:	cmp	r4, #0
   17620:	bne	17578 <fts_open@@Base+0x16c>
   17624:	cmp	r9, #0
   17628:	cmpne	r8, #1
   1762c:	bls	17644 <fts_open@@Base+0x238>
   17630:	mov	r1, r7
   17634:	mov	r2, r8
   17638:	mov	r0, r5
   1763c:	bl	15fd8 <__assert_fail@plt+0x4bac>
   17640:	mov	r7, r0
   17644:	mov	r2, #0
   17648:	ldr	r1, [pc, #336]	; 177a0 <fts_open@@Base+0x394>
   1764c:	mov	r0, r5
   17650:	bl	160b0 <__assert_fail@plt+0x4c84>
   17654:	cmp	r0, #0
   17658:	str	r0, [r5]
   1765c:	beq	176ac <fts_open@@Base+0x2a0>
   17660:	mov	r2, #1
   17664:	mov	r3, #9
   17668:	str	r7, [r0, #8]
   1766c:	str	r2, [r0, #48]	; 0x30
   17670:	strh	r3, [r0, #60]	; 0x3c
   17674:	add	r1, r5, #56	; 0x38
   17678:	ldr	r0, [r5, #48]	; 0x30
   1767c:	bl	16630 <__assert_fail@plt+0x5204>
   17680:	cmp	r0, #0
   17684:	beq	176ac <fts_open@@Base+0x2a0>
   17688:	ldr	r1, [r5, #48]	; 0x30
   1768c:	tst	r1, #516	; 0x204
   17690:	beq	1776c <fts_open@@Base+0x360>
   17694:	mvn	r1, #0
   17698:	add	r0, r5, #60	; 0x3c
   1769c:	bl	19564 <fts_children@@Base+0x14c0>
   176a0:	mov	r0, r5
   176a4:	add	sp, sp, #20
   176a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176ac:	mov	r0, r7
   176b0:	bl	16124 <__assert_fail@plt+0x4cf8>
   176b4:	mov	r0, sl
   176b8:	bl	11150 <free@plt>
   176bc:	ldr	r0, [r5, #24]
   176c0:	bl	11150 <free@plt>
   176c4:	mov	r0, r5
   176c8:	bl	11150 <free@plt>
   176cc:	mov	r5, #0
   176d0:	mov	r0, r5
   176d4:	add	sp, sp, #20
   176d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176dc:	bl	112e8 <__errno_location@plt>
   176e0:	mov	r3, #22
   176e4:	str	r3, [r0]
   176e8:	mov	r0, r5
   176ec:	add	sp, sp, #20
   176f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176f4:	cmp	r9, #0
   176f8:	beq	17790 <fts_open@@Base+0x384>
   176fc:	mov	r4, sl
   17700:	b	17504 <fts_open@@Base+0xf8>
   17704:	sub	r1, r0, #1
   17708:	add	r3, r4, r1
   1770c:	ldrb	r1, [r4, r1]
   17710:	cmp	r1, #47	; 0x2f
   17714:	bne	1759c <fts_open@@Base+0x190>
   17718:	ldrb	r1, [r3, #-1]!
   1771c:	cmp	r1, #47	; 0x2f
   17720:	bne	1759c <fts_open@@Base+0x190>
   17724:	sub	r2, r2, #1
   17728:	cmp	r2, #1
   1772c:	bne	17718 <fts_open@@Base+0x30c>
   17730:	b	1759c <fts_open@@Base+0x190>
   17734:	ldr	r3, [sp, #8]
   17738:	str	r9, [r4, #8]
   1773c:	str	r4, [sp, #8]
   17740:	str	r4, [r3, #8]
   17744:	b	17614 <fts_open@@Base+0x208>
   17748:	bl	112e8 <__errno_location@plt>
   1774c:	mov	r5, #0
   17750:	mov	r3, #22
   17754:	str	r3, [r0]
   17758:	mov	r0, r5
   1775c:	add	sp, sp, #20
   17760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17764:	mov	r2, #4096	; 0x1000
   17768:	b	174b4 <fts_open@@Base+0xa8>
   1776c:	ldr	r2, [pc, #48]	; 177a4 <fts_open@@Base+0x398>
   17770:	ldr	r0, [r5, #32]
   17774:	bl	166b0 <__assert_fail@plt+0x5284>
   17778:	cmp	r0, #0
   1777c:	str	r0, [r5, #28]
   17780:	ldrlt	r3, [r5, #48]	; 0x30
   17784:	orrlt	r3, r3, #4
   17788:	strlt	r3, [r5, #48]	; 0x30
   1778c:	b	17694 <fts_open@@Base+0x288>
   17790:	mov	r7, sl
   17794:	b	17644 <fts_open@@Base+0x238>
   17798:	mov	r7, r4
   1779c:	b	17644 <fts_open@@Base+0x238>
   177a0:	andeq	sl, r1, r4, lsr #10
   177a4:	muleq	r1, r0, r1

000177a8 <fts_close@@Base>:
   177a8:	ldr	r3, [r0]
   177ac:	push	{r4, r5, r6, lr}
   177b0:	cmp	r3, #0
   177b4:	mov	r5, r0
   177b8:	beq	177f4 <fts_close@@Base+0x4c>
   177bc:	ldr	r2, [r3, #48]	; 0x30
   177c0:	cmp	r2, #0
   177c4:	blt	1790c <fts_close@@Base+0x164>
   177c8:	ldr	r4, [r3, #8]
   177cc:	mov	r0, r3
   177d0:	cmp	r4, #0
   177d4:	ldreq	r4, [r3, #4]
   177d8:	bl	11150 <free@plt>
   177dc:	mov	r3, r4
   177e0:	ldr	r2, [r4, #48]	; 0x30
   177e4:	cmp	r2, #0
   177e8:	bge	177c8 <fts_close@@Base+0x20>
   177ec:	mov	r0, r4
   177f0:	bl	11150 <free@plt>
   177f4:	ldr	r0, [r5, #4]
   177f8:	cmp	r0, #0
   177fc:	beq	17804 <fts_close@@Base+0x5c>
   17800:	bl	16124 <__assert_fail@plt+0x4cf8>
   17804:	ldr	r0, [r5, #8]
   17808:	bl	11150 <free@plt>
   1780c:	ldr	r0, [r5, #24]
   17810:	bl	11150 <free@plt>
   17814:	ldr	r3, [r5, #48]	; 0x30
   17818:	tst	r3, #512	; 0x200
   1781c:	bne	17880 <fts_close@@Base+0xd8>
   17820:	tst	r3, #4
   17824:	beq	178ac <fts_close@@Base+0x104>
   17828:	mov	r4, #0
   1782c:	add	r0, r5, #60	; 0x3c
   17830:	bl	16158 <__assert_fail@plt+0x4d2c>
   17834:	ldr	r0, [r5, #52]	; 0x34
   17838:	cmp	r0, #0
   1783c:	beq	17844 <fts_close@@Base+0x9c>
   17840:	bl	18fb8 <fts_children@@Base+0xf14>
   17844:	ldr	r2, [r5, #48]	; 0x30
   17848:	ldr	r3, [pc, #212]	; 17924 <fts_close@@Base+0x17c>
   1784c:	ldr	r0, [r5, #56]	; 0x38
   17850:	and	r3, r3, r2
   17854:	cmp	r3, #0
   17858:	beq	178a4 <fts_close@@Base+0xfc>
   1785c:	cmp	r0, #0
   17860:	beq	17868 <fts_close@@Base+0xc0>
   17864:	bl	18fb8 <fts_children@@Base+0xf14>
   17868:	mov	r0, r5
   1786c:	bl	11150 <free@plt>
   17870:	cmp	r4, #0
   17874:	bne	17914 <fts_close@@Base+0x16c>
   17878:	mov	r0, r4
   1787c:	pop	{r4, r5, r6, pc}
   17880:	ldr	r0, [r5, #32]
   17884:	cmp	r0, #0
   17888:	blt	17828 <fts_close@@Base+0x80>
   1788c:	bl	113f0 <close@plt>
   17890:	cmp	r0, #0
   17894:	beq	17828 <fts_close@@Base+0x80>
   17898:	bl	112e8 <__errno_location@plt>
   1789c:	ldr	r4, [r0]
   178a0:	b	1782c <fts_close@@Base+0x84>
   178a4:	bl	11150 <free@plt>
   178a8:	b	17868 <fts_close@@Base+0xc0>
   178ac:	ldr	r0, [r5, #28]
   178b0:	bl	1139c <fchdir@plt>
   178b4:	cmp	r0, #0
   178b8:	bne	178dc <fts_close@@Base+0x134>
   178bc:	ldr	r0, [r5, #28]
   178c0:	bl	113f0 <close@plt>
   178c4:	cmp	r0, #0
   178c8:	beq	17828 <fts_close@@Base+0x80>
   178cc:	bl	112e8 <__errno_location@plt>
   178d0:	mov	r6, r0
   178d4:	ldr	r4, [r6]
   178d8:	b	1782c <fts_close@@Base+0x84>
   178dc:	bl	112e8 <__errno_location@plt>
   178e0:	mov	r6, r0
   178e4:	ldr	r0, [r5, #28]
   178e8:	ldr	r4, [r6]
   178ec:	bl	113f0 <close@plt>
   178f0:	clz	r3, r4
   178f4:	lsr	r3, r3, #5
   178f8:	cmp	r0, #0
   178fc:	moveq	r3, #0
   17900:	cmp	r3, #0
   17904:	beq	1782c <fts_close@@Base+0x84>
   17908:	b	178d4 <fts_close@@Base+0x12c>
   1790c:	mov	r4, r3
   17910:	b	177ec <fts_close@@Base+0x44>
   17914:	bl	112e8 <__errno_location@plt>
   17918:	str	r4, [r0]
   1791c:	mvn	r4, #0
   17920:	b	17878 <fts_close@@Base+0xd0>
   17924:	andeq	r0, r0, r2, lsl #2

00017928 <fts_read@@Base>:
   17928:	push	{r4, r5, r6, r7, r8, lr}
   1792c:	ldr	r4, [r0]
   17930:	cmp	r4, #0
   17934:	beq	17a54 <fts_read@@Base+0x12c>
   17938:	ldr	r1, [r0, #48]	; 0x30
   1793c:	ands	r3, r1, #16384	; 0x4000
   17940:	bne	17a54 <fts_read@@Base+0x12c>
   17944:	ldrh	r2, [r4, #64]	; 0x40
   17948:	mov	r8, r0
   1794c:	mov	r0, #3
   17950:	cmp	r2, #1
   17954:	strh	r0, [r4, #64]	; 0x40
   17958:	beq	17d10 <fts_read@@Base+0x3e8>
   1795c:	cmp	r2, #2
   17960:	ldrh	r3, [r4, #60]	; 0x3c
   17964:	beq	17a60 <fts_read@@Base+0x138>
   17968:	cmp	r3, #1
   1796c:	bne	1799c <fts_read@@Base+0x74>
   17970:	b	17b0c <fts_read@@Base+0x1e4>
   17974:	mov	r0, r4
   17978:	str	r5, [r8]
   1797c:	bl	11150 <free@plt>
   17980:	ldr	r4, [r5, #48]	; 0x30
   17984:	cmp	r4, #0
   17988:	beq	17b54 <fts_read@@Base+0x22c>
   1798c:	ldrh	r3, [r5, #64]	; 0x40
   17990:	mov	r4, r5
   17994:	cmp	r3, #4
   17998:	bne	17c04 <fts_read@@Base+0x2dc>
   1799c:	ldr	r5, [r4, #8]
   179a0:	cmp	r5, #0
   179a4:	bne	17974 <fts_read@@Base+0x4c>
   179a8:	ldr	r6, [r4, #4]
   179ac:	ldr	r3, [r6, #12]
   179b0:	cmp	r3, #0
   179b4:	bne	17ea8 <fts_read@@Base+0x580>
   179b8:	str	r6, [r8]
   179bc:	mov	r0, r4
   179c0:	bl	11150 <free@plt>
   179c4:	ldr	r3, [r6, #48]	; 0x30
   179c8:	cmn	r3, #1
   179cc:	beq	17ddc <fts_read@@Base+0x4b4>
   179d0:	ldrh	r3, [r6, #60]	; 0x3c
   179d4:	cmp	r3, #11
   179d8:	beq	18060 <fts_read@@Base+0x738>
   179dc:	ldr	r3, [r6, #40]	; 0x28
   179e0:	ldr	r2, [r8, #24]
   179e4:	mov	r1, #0
   179e8:	strb	r1, [r2, r3]
   179ec:	ldr	r3, [r6, #48]	; 0x30
   179f0:	cmp	r3, r1
   179f4:	beq	17dfc <fts_read@@Base+0x4d4>
   179f8:	ldrh	r3, [r6, #62]	; 0x3e
   179fc:	tst	r3, #2
   17a00:	bne	17d90 <fts_read@@Base+0x468>
   17a04:	tst	r3, #1
   17a08:	beq	17f30 <fts_read@@Base+0x608>
   17a0c:	ldrh	r3, [r6, #60]	; 0x3c
   17a10:	ldr	r0, [r8, #48]	; 0x30
   17a14:	cmp	r3, #2
   17a18:	beq	17a48 <fts_read@@Base+0x120>
   17a1c:	ldr	r3, [r6, #32]
   17a20:	cmp	r3, #0
   17a24:	movne	r3, #7
   17a28:	strhne	r3, [r6, #60]	; 0x3c
   17a2c:	bne	17a48 <fts_read@@Base+0x120>
   17a30:	mov	r3, #6
   17a34:	strh	r3, [r6, #60]	; 0x3c
   17a38:	mov	r2, r6
   17a3c:	add	r1, r8, #56	; 0x38
   17a40:	bl	169a8 <__assert_fail@plt+0x557c>
   17a44:	ldr	r0, [r8, #48]	; 0x30
   17a48:	tst	r0, #16384	; 0x4000
   17a4c:	moveq	r4, r6
   17a50:	beq	17a58 <fts_read@@Base+0x130>
   17a54:	mov	r4, #0
   17a58:	mov	r0, r4
   17a5c:	pop	{r4, r5, r6, r7, r8, pc}
   17a60:	sub	r2, r3, #12
   17a64:	cmp	r2, #1
   17a68:	bls	17ca0 <fts_read@@Base+0x378>
   17a6c:	cmp	r3, #1
   17a70:	bne	1799c <fts_read@@Base+0x74>
   17a74:	tst	r1, #64	; 0x40
   17a78:	beq	17a90 <fts_read@@Base+0x168>
   17a7c:	ldrd	r6, [r4, #72]	; 0x48
   17a80:	ldrd	r2, [r8, #16]
   17a84:	cmp	r7, r3
   17a88:	cmpeq	r6, r2
   17a8c:	bne	17b14 <fts_read@@Base+0x1ec>
   17a90:	ldr	r0, [r8, #4]
   17a94:	cmp	r0, #0
   17a98:	beq	17d3c <fts_read@@Base+0x414>
   17a9c:	tst	r1, #8192	; 0x2000
   17aa0:	bne	17d28 <fts_read@@Base+0x400>
   17aa4:	ldr	r3, [r4, #24]
   17aa8:	mvn	r2, #0
   17aac:	mov	r1, r4
   17ab0:	mov	r0, r8
   17ab4:	bl	166ec <__assert_fail@plt+0x52c0>
   17ab8:	cmp	r0, #0
   17abc:	beq	17dc4 <fts_read@@Base+0x49c>
   17ac0:	bl	112e8 <__errno_location@plt>
   17ac4:	ldrh	r3, [r4, #62]	; 0x3e
   17ac8:	ldr	r5, [r8, #4]
   17acc:	orr	r3, r3, #1
   17ad0:	cmp	r5, #0
   17ad4:	ldr	r2, [r0]
   17ad8:	strh	r3, [r4, #62]	; 0x3e
   17adc:	str	r2, [r4, #32]
   17ae0:	beq	17b00 <fts_read@@Base+0x1d8>
   17ae4:	mov	r3, r5
   17ae8:	ldr	r2, [r3, #4]
   17aec:	ldr	r2, [r2, #24]
   17af0:	str	r2, [r3, #24]
   17af4:	ldr	r3, [r3, #8]
   17af8:	cmp	r3, #0
   17afc:	bne	17ae8 <fts_read@@Base+0x1c0>
   17b00:	mov	r3, #0
   17b04:	str	r3, [r8, #4]
   17b08:	b	17c0c <fts_read@@Base+0x2e4>
   17b0c:	cmp	r2, #4
   17b10:	bne	17a74 <fts_read@@Base+0x14c>
   17b14:	ldrh	r3, [r4, #62]	; 0x3e
   17b18:	tst	r3, #2
   17b1c:	bne	17ef8 <fts_read@@Base+0x5d0>
   17b20:	ldr	r0, [r8, #4]
   17b24:	cmp	r0, #0
   17b28:	beq	17b38 <fts_read@@Base+0x210>
   17b2c:	bl	16124 <__assert_fail@plt+0x4cf8>
   17b30:	mov	r3, #0
   17b34:	str	r3, [r8, #4]
   17b38:	mov	r3, #6
   17b3c:	strh	r3, [r4, #60]	; 0x3c
   17b40:	mov	r2, r4
   17b44:	add	r1, r8, #56	; 0x38
   17b48:	ldr	r0, [r8, #48]	; 0x30
   17b4c:	bl	169a8 <__assert_fail@plt+0x557c>
   17b50:	b	17a58 <fts_read@@Base+0x130>
   17b54:	mov	r0, r8
   17b58:	bl	163d8 <__assert_fail@plt+0x4fac>
   17b5c:	cmp	r0, #0
   17b60:	bne	17ee0 <fts_read@@Base+0x5b8>
   17b64:	ldr	r2, [r8, #48]	; 0x30
   17b68:	ldr	r3, [pc, #1268]	; 18064 <fts_read@@Base+0x73c>
   17b6c:	ldr	r0, [r8, #56]	; 0x38
   17b70:	and	r3, r3, r2
   17b74:	cmp	r3, #0
   17b78:	beq	17ef0 <fts_read@@Base+0x5c8>
   17b7c:	cmp	r0, #0
   17b80:	beq	17b88 <fts_read@@Base+0x260>
   17b84:	bl	18fb8 <fts_children@@Base+0xf14>
   17b88:	ldr	r2, [r5, #52]	; 0x34
   17b8c:	add	r4, r5, #176	; 0xb0
   17b90:	str	r2, [r5, #40]	; 0x28
   17b94:	mov	r1, r4
   17b98:	add	r2, r2, #1
   17b9c:	ldr	r0, [r8, #24]
   17ba0:	bl	11144 <memmove@plt>
   17ba4:	mov	r0, r4
   17ba8:	mov	r1, #47	; 0x2f
   17bac:	bl	11360 <strrchr@plt>
   17bb0:	cmp	r0, #0
   17bb4:	beq	17be4 <fts_read@@Base+0x2bc>
   17bb8:	cmp	r4, r0
   17bbc:	beq	17dcc <fts_read@@Base+0x4a4>
   17bc0:	add	r6, r0, #1
   17bc4:	mov	r0, r6
   17bc8:	bl	112b8 <strlen@plt>
   17bcc:	mov	r1, r6
   17bd0:	mov	r7, r0
   17bd4:	add	r2, r7, #1
   17bd8:	mov	r0, r4
   17bdc:	bl	11144 <memmove@plt>
   17be0:	str	r7, [r5, #52]	; 0x34
   17be4:	ldr	r3, [r8, #24]
   17be8:	add	r1, r8, #56	; 0x38
   17bec:	str	r3, [r5, #28]
   17bf0:	str	r3, [r5, #24]
   17bf4:	ldr	r0, [r8, #48]	; 0x30
   17bf8:	bl	16630 <__assert_fail@plt+0x5204>
   17bfc:	ldrh	r0, [r5, #60]	; 0x3c
   17c00:	b	17c50 <fts_read@@Base+0x328>
   17c04:	cmp	r3, #2
   17c08:	beq	17f04 <fts_read@@Base+0x5dc>
   17c0c:	ldr	r3, [r5, #4]
   17c10:	mov	ip, #47	; 0x2f
   17c14:	ldr	r2, [r8, #24]
   17c18:	ldr	r1, [r3, #40]	; 0x28
   17c1c:	ldr	r0, [r3, #28]
   17c20:	sub	r3, r1, #1
   17c24:	ldrb	r0, [r0, r3]
   17c28:	cmp	r0, ip
   17c2c:	movne	r3, r1
   17c30:	add	r0, r2, r3
   17c34:	strb	ip, [r2, r3]
   17c38:	ldr	r2, [r5, #52]	; 0x34
   17c3c:	add	r0, r0, #1
   17c40:	add	r2, r2, #1
   17c44:	add	r1, r5, #176	; 0xb0
   17c48:	bl	11144 <memmove@plt>
   17c4c:	ldrh	r0, [r5, #60]	; 0x3c
   17c50:	cmp	r0, #11
   17c54:	str	r5, [r8]
   17c58:	beq	17cd0 <fts_read@@Base+0x3a8>
   17c5c:	cmp	r0, #1
   17c60:	bne	17cec <fts_read@@Base+0x3c4>
   17c64:	ldr	r3, [r5, #48]	; 0x30
   17c68:	cmp	r3, #0
   17c6c:	beq	17d00 <fts_read@@Base+0x3d8>
   17c70:	mov	r4, r5
   17c74:	mov	r2, r5
   17c78:	add	r1, r8, #56	; 0x38
   17c7c:	ldr	r0, [r8, #48]	; 0x30
   17c80:	bl	168f8 <__assert_fail@plt+0x54cc>
   17c84:	subs	r5, r0, #0
   17c88:	bne	17a58 <fts_read@@Base+0x130>
   17c8c:	bl	112e8 <__errno_location@plt>
   17c90:	mov	r3, #12
   17c94:	mov	r4, r5
   17c98:	str	r3, [r0]
   17c9c:	b	17a58 <fts_read@@Base+0x130>
   17ca0:	mov	r3, #1
   17ca4:	mov	r2, r4
   17ca8:	add	r1, r8, #48	; 0x30
   17cac:	ldr	r0, [r8, #32]
   17cb0:	bl	16428 <__assert_fail@plt+0x4ffc>
   17cb4:	cmp	r0, #1
   17cb8:	strh	r0, [r4, #60]	; 0x3c
   17cbc:	beq	17f74 <fts_read@@Base+0x64c>
   17cc0:	cmp	r0, #11
   17cc4:	str	r4, [r8]
   17cc8:	bne	17a58 <fts_read@@Base+0x130>
   17ccc:	mov	r5, r4
   17cd0:	ldrd	r2, [r5, #120]	; 0x78
   17cd4:	cmp	r3, #0
   17cd8:	cmpeq	r2, #2
   17cdc:	beq	17e38 <fts_read@@Base+0x510>
   17ce0:	cmp	r3, #0
   17ce4:	cmpeq	r2, #1
   17ce8:	bne	18060 <fts_read@@Base+0x738>
   17cec:	mov	r4, r5
   17cf0:	mov	r0, r4
   17cf4:	pop	{r4, r5, r6, r7, r8, pc}
   17cf8:	cmp	r0, #1
   17cfc:	bne	17cec <fts_read@@Base+0x3c4>
   17d00:	ldrd	r2, [r5, #72]	; 0x48
   17d04:	mov	r4, r5
   17d08:	strd	r2, [r8, #16]
   17d0c:	b	17c74 <fts_read@@Base+0x34c>
   17d10:	mov	r2, r4
   17d14:	add	r1, r8, #48	; 0x30
   17d18:	ldr	r0, [r8, #32]
   17d1c:	bl	16428 <__assert_fail@plt+0x4ffc>
   17d20:	strh	r0, [r4, #60]	; 0x3c
   17d24:	b	17a58 <fts_read@@Base+0x130>
   17d28:	bic	r1, r1, #8192	; 0x2000
   17d2c:	str	r1, [r8, #48]	; 0x30
   17d30:	bl	16124 <__assert_fail@plt+0x4cf8>
   17d34:	mov	r3, #0
   17d38:	str	r3, [r8, #4]
   17d3c:	mov	r1, #3
   17d40:	mov	r0, r8
   17d44:	bl	16a80 <__assert_fail@plt+0x5654>
   17d48:	cmp	r0, #0
   17d4c:	mov	r5, r0
   17d50:	str	r0, [r8, #4]
   17d54:	bne	17b00 <fts_read@@Base+0x1d8>
   17d58:	ldr	r0, [r8, #48]	; 0x30
   17d5c:	tst	r0, #16384	; 0x4000
   17d60:	bne	17a54 <fts_read@@Base+0x12c>
   17d64:	ldr	r3, [r4, #32]
   17d68:	cmp	r3, #0
   17d6c:	beq	17d80 <fts_read@@Base+0x458>
   17d70:	ldrh	r3, [r4, #60]	; 0x3c
   17d74:	cmp	r3, #4
   17d78:	movne	r3, #7
   17d7c:	strhne	r3, [r4, #60]	; 0x3c
   17d80:	add	r1, r8, #56	; 0x38
   17d84:	mov	r2, r4
   17d88:	bl	169a8 <__assert_fail@plt+0x557c>
   17d8c:	b	17a58 <fts_read@@Base+0x130>
   17d90:	ldr	r3, [r8, #48]	; 0x30
   17d94:	ldr	r1, [r6, #36]	; 0x24
   17d98:	tst	r3, #4
   17d9c:	bne	17db8 <fts_read@@Base+0x490>
   17da0:	tst	r3, #512	; 0x200
   17da4:	beq	17f5c <fts_read@@Base+0x634>
   17da8:	mov	r2, #1
   17dac:	mov	r0, r8
   17db0:	bl	16350 <__assert_fail@plt+0x4f24>
   17db4:	ldr	r1, [r6, #36]	; 0x24
   17db8:	mov	r0, r1
   17dbc:	bl	113f0 <close@plt>
   17dc0:	b	17a0c <fts_read@@Base+0xe4>
   17dc4:	ldr	r5, [r8, #4]
   17dc8:	b	17b00 <fts_read@@Base+0x1d8>
   17dcc:	ldrb	r3, [r4, #1]
   17dd0:	cmp	r3, #0
   17dd4:	beq	17be4 <fts_read@@Base+0x2bc>
   17dd8:	b	17bc0 <fts_read@@Base+0x298>
   17ddc:	mov	r0, r6
   17de0:	bl	11150 <free@plt>
   17de4:	bl	112e8 <__errno_location@plt>
   17de8:	mov	r3, #0
   17dec:	mov	r4, r3
   17df0:	str	r3, [r0]
   17df4:	str	r3, [r8]
   17df8:	b	17a58 <fts_read@@Base+0x130>
   17dfc:	mov	r0, r8
   17e00:	bl	163d8 <__assert_fail@plt+0x4fac>
   17e04:	cmp	r0, #0
   17e08:	beq	17a0c <fts_read@@Base+0xe4>
   17e0c:	bl	112e8 <__errno_location@plt>
   17e10:	ldr	r3, [r8, #48]	; 0x30
   17e14:	orr	r3, r3, #16384	; 0x4000
   17e18:	ldr	r2, [r0]
   17e1c:	str	r2, [r6, #32]
   17e20:	str	r3, [r8, #48]	; 0x30
   17e24:	ldrh	r3, [r6, #60]	; 0x3c
   17e28:	cmp	r3, #2
   17e2c:	beq	17a54 <fts_read@@Base+0x12c>
   17e30:	ldr	r0, [r8, #48]	; 0x30
   17e34:	b	17a1c <fts_read@@Base+0xf4>
   17e38:	ldr	r4, [r5, #4]
   17e3c:	ldr	r0, [r8, #32]
   17e40:	ldr	r3, [r4, #56]	; 0x38
   17e44:	cmp	r3, #0
   17e48:	bne	17e5c <fts_read@@Base+0x534>
   17e4c:	ldr	r3, [r8, #48]	; 0x30
   17e50:	and	r3, r3, #24
   17e54:	cmp	r3, #24
   17e58:	beq	17fec <fts_read@@Base+0x6c4>
   17e5c:	mov	r3, #0
   17e60:	mov	r2, r5
   17e64:	add	r1, r8, #48	; 0x30
   17e68:	bl	16428 <__assert_fail@plt+0x4ffc>
   17e6c:	ldr	r3, [r5, #88]	; 0x58
   17e70:	and	r3, r3, #61440	; 0xf000
   17e74:	cmp	r3, #16384	; 0x4000
   17e78:	strh	r0, [r5, #60]	; 0x3c
   17e7c:	bne	17c5c <fts_read@@Base+0x334>
   17e80:	ldr	r3, [r5, #48]	; 0x30
   17e84:	cmp	r3, #0
   17e88:	beq	17cf8 <fts_read@@Base+0x3d0>
   17e8c:	ldr	r3, [r4, #56]	; 0x38
   17e90:	sub	r3, r3, #1
   17e94:	cmn	r3, #3
   17e98:	strls	r3, [r4, #56]	; 0x38
   17e9c:	cmp	r0, #1
   17ea0:	beq	17c70 <fts_read@@Base+0x348>
   17ea4:	b	17cec <fts_read@@Base+0x3c4>
   17ea8:	ldr	r3, [r6, #40]	; 0x28
   17eac:	ldr	r2, [r8, #24]
   17eb0:	str	r6, [r8]
   17eb4:	mov	r1, #3
   17eb8:	strb	r5, [r2, r3]
   17ebc:	mov	r0, r8
   17ec0:	bl	16a80 <__assert_fail@plt+0x5654>
   17ec4:	subs	r5, r0, #0
   17ec8:	bne	17f50 <fts_read@@Base+0x628>
   17ecc:	ldr	r3, [r8, #48]	; 0x30
   17ed0:	tst	r3, #16384	; 0x4000
   17ed4:	bne	17a54 <fts_read@@Base+0x12c>
   17ed8:	ldr	r6, [r4, #4]
   17edc:	b	179b8 <fts_read@@Base+0x90>
   17ee0:	ldr	r3, [r8, #48]	; 0x30
   17ee4:	orr	r3, r3, #16384	; 0x4000
   17ee8:	str	r3, [r8, #48]	; 0x30
   17eec:	b	17a58 <fts_read@@Base+0x130>
   17ef0:	bl	11150 <free@plt>
   17ef4:	b	17b88 <fts_read@@Base+0x260>
   17ef8:	ldr	r0, [r4, #36]	; 0x24
   17efc:	bl	113f0 <close@plt>
   17f00:	b	17b20 <fts_read@@Base+0x1f8>
   17f04:	mov	r3, #1
   17f08:	mov	r2, r5
   17f0c:	add	r1, r8, #48	; 0x30
   17f10:	ldr	r0, [r8, #32]
   17f14:	bl	16428 <__assert_fail@plt+0x4ffc>
   17f18:	cmp	r0, #1
   17f1c:	strh	r0, [r5, #60]	; 0x3c
   17f20:	beq	17fb8 <fts_read@@Base+0x690>
   17f24:	mov	r3, #3
   17f28:	strh	r3, [r5, #64]	; 0x40
   17f2c:	b	17c0c <fts_read@@Base+0x2e4>
   17f30:	ldr	r3, [pc, #304]	; 18068 <fts_read@@Base+0x740>
   17f34:	mvn	r2, #0
   17f38:	ldr	r1, [r6, #4]
   17f3c:	mov	r0, r8
   17f40:	bl	166ec <__assert_fail@plt+0x52c0>
   17f44:	cmp	r0, #0
   17f48:	beq	17a0c <fts_read@@Base+0xe4>
   17f4c:	b	17e0c <fts_read@@Base+0x4e4>
   17f50:	mov	r0, r4
   17f54:	bl	11150 <free@plt>
   17f58:	b	17c0c <fts_read@@Base+0x2e4>
   17f5c:	mov	r0, r1
   17f60:	bl	1139c <fchdir@plt>
   17f64:	cmp	r0, #0
   17f68:	bne	1800c <fts_read@@Base+0x6e4>
   17f6c:	ldr	r1, [r6, #36]	; 0x24
   17f70:	b	17db8 <fts_read@@Base+0x490>
   17f74:	ldr	r1, [r8, #48]	; 0x30
   17f78:	tst	r1, #4
   17f7c:	strne	r4, [r8]
   17f80:	movne	r5, r4
   17f84:	bne	17c64 <fts_read@@Base+0x33c>
   17f88:	ldr	r2, [pc, #220]	; 1806c <fts_read@@Base+0x744>
   17f8c:	ldr	r0, [r8, #32]
   17f90:	bl	166b0 <__assert_fail@plt+0x5284>
   17f94:	cmp	r0, #0
   17f98:	str	r0, [r4, #36]	; 0x24
   17f9c:	blt	1802c <fts_read@@Base+0x704>
   17fa0:	ldrh	r3, [r4, #62]	; 0x3e
   17fa4:	ldrh	r0, [r4, #60]	; 0x3c
   17fa8:	mov	r5, r4
   17fac:	orr	r3, r3, #2
   17fb0:	strh	r3, [r4, #62]	; 0x3e
   17fb4:	b	17c50 <fts_read@@Base+0x328>
   17fb8:	ldr	r1, [r8, #48]	; 0x30
   17fbc:	tst	r1, #4
   17fc0:	bne	17f24 <fts_read@@Base+0x5fc>
   17fc4:	ldr	r2, [pc, #160]	; 1806c <fts_read@@Base+0x744>
   17fc8:	ldr	r0, [r8, #32]
   17fcc:	bl	166b0 <__assert_fail@plt+0x5284>
   17fd0:	cmp	r0, #0
   17fd4:	str	r0, [r5, #36]	; 0x24
   17fd8:	blt	18048 <fts_read@@Base+0x720>
   17fdc:	ldrh	r3, [r5, #62]	; 0x3e
   17fe0:	orr	r3, r3, #2
   17fe4:	strh	r3, [r5, #62]	; 0x3e
   17fe8:	b	17f24 <fts_read@@Base+0x5fc>
   17fec:	mov	r1, r0
   17ff0:	mov	r0, r4
   17ff4:	bl	162bc <__assert_fail@plt+0x4e90>
   17ff8:	cmp	r0, #2
   17ffc:	ldrheq	r0, [r5, #60]	; 0x3c
   18000:	beq	17c5c <fts_read@@Base+0x334>
   18004:	ldr	r0, [r8, #32]
   18008:	b	17e5c <fts_read@@Base+0x534>
   1800c:	bl	112e8 <__errno_location@plt>
   18010:	ldr	r3, [r8, #48]	; 0x30
   18014:	ldr	r1, [r6, #36]	; 0x24
   18018:	orr	r3, r3, #16384	; 0x4000
   1801c:	ldr	r2, [r0]
   18020:	str	r2, [r6, #32]
   18024:	str	r3, [r8, #48]	; 0x30
   18028:	b	17db8 <fts_read@@Base+0x490>
   1802c:	bl	112e8 <__errno_location@plt>
   18030:	mov	r2, #7
   18034:	ldr	r3, [r0]
   18038:	strh	r2, [r4, #60]	; 0x3c
   1803c:	str	r3, [r4, #32]
   18040:	str	r4, [r8]
   18044:	b	17a58 <fts_read@@Base+0x130>
   18048:	bl	112e8 <__errno_location@plt>
   1804c:	mov	r2, #7
   18050:	ldr	r3, [r0]
   18054:	strh	r2, [r5, #60]	; 0x3c
   18058:	str	r3, [r5, #32]
   1805c:	b	17f24 <fts_read@@Base+0x5fc>
   18060:	bl	113e4 <abort@plt>
   18064:	andeq	r0, r0, r2, lsl #2
   18068:	andeq	fp, r1, ip, lsl #3
   1806c:	muleq	r1, r0, r1

00018070 <fts_set@@Base>:
   18070:	cmp	r2, #4
   18074:	bhi	18088 <fts_set@@Base+0x18>
   18078:	mov	r3, #0
   1807c:	strh	r2, [r1, #64]	; 0x40
   18080:	mov	r0, r3
   18084:	bx	lr
   18088:	push	{r4, lr}
   1808c:	bl	112e8 <__errno_location@plt>
   18090:	mov	r2, #22
   18094:	mov	r3, #1
   18098:	str	r2, [r0]
   1809c:	mov	r0, r3
   180a0:	pop	{r4, pc}

000180a4 <fts_children@@Base>:
   180a4:	push	{r4, r5, r6, r7, r8, lr}
   180a8:	mov	r4, r1
   180ac:	mov	r5, r0
   180b0:	bl	112e8 <__errno_location@plt>
   180b4:	bics	r2, r4, #8192	; 0x2000
   180b8:	mov	r7, r0
   180bc:	bne	1814c <fts_children@@Base+0xa8>
   180c0:	ldr	r6, [r5]
   180c4:	str	r2, [r0]
   180c8:	ldr	r3, [r5, #48]	; 0x30
   180cc:	ands	r0, r3, #16384	; 0x4000
   180d0:	bne	18154 <fts_children@@Base+0xb0>
   180d4:	ldrh	r3, [r6, #60]	; 0x3c
   180d8:	cmp	r3, #9
   180dc:	beq	181ac <fts_children@@Base+0x108>
   180e0:	cmp	r3, #1
   180e4:	popne	{r4, r5, r6, r7, r8, pc}
   180e8:	ldr	r0, [r5, #4]
   180ec:	cmp	r0, #0
   180f0:	beq	180f8 <fts_children@@Base+0x54>
   180f4:	bl	16124 <__assert_fail@plt+0x4cf8>
   180f8:	cmp	r4, #8192	; 0x2000
   180fc:	moveq	r8, #2
   18100:	ldreq	r3, [r5, #48]	; 0x30
   18104:	movne	r8, #1
   18108:	orreq	r3, r3, #8192	; 0x2000
   1810c:	streq	r3, [r5, #48]	; 0x30
   18110:	ldr	r3, [r6, #48]	; 0x30
   18114:	cmp	r3, #0
   18118:	bne	18138 <fts_children@@Base+0x94>
   1811c:	ldr	r3, [r6, #24]
   18120:	ldrb	r3, [r3]
   18124:	cmp	r3, #47	; 0x2f
   18128:	beq	18138 <fts_children@@Base+0x94>
   1812c:	ldr	r1, [r5, #48]	; 0x30
   18130:	ands	r4, r1, #4
   18134:	beq	1815c <fts_children@@Base+0xb8>
   18138:	mov	r1, r8
   1813c:	mov	r0, r5
   18140:	bl	16a80 <__assert_fail@plt+0x5654>
   18144:	str	r0, [r5, #4]
   18148:	pop	{r4, r5, r6, r7, r8, pc}
   1814c:	mov	r3, #22
   18150:	str	r3, [r0]
   18154:	mov	r0, #0
   18158:	pop	{r4, r5, r6, r7, r8, pc}
   1815c:	ldr	r2, [pc, #136]	; 181ec <fts_children@@Base+0x148>
   18160:	ldr	r0, [r5, #32]
   18164:	bl	166b0 <__assert_fail@plt+0x5284>
   18168:	subs	r6, r0, #0
   1816c:	blt	181c8 <fts_children@@Base+0x124>
   18170:	mov	r1, r8
   18174:	mov	r0, r5
   18178:	bl	16a80 <__assert_fail@plt+0x5654>
   1817c:	ldr	r3, [r5, #48]	; 0x30
   18180:	ands	r4, r3, #512	; 0x200
   18184:	str	r0, [r5, #4]
   18188:	bne	181b4 <fts_children@@Base+0x110>
   1818c:	mov	r0, r6
   18190:	bl	1139c <fchdir@plt>
   18194:	cmp	r0, #0
   18198:	bne	181d4 <fts_children@@Base+0x130>
   1819c:	mov	r0, r6
   181a0:	bl	113f0 <close@plt>
   181a4:	ldr	r0, [r5, #4]
   181a8:	pop	{r4, r5, r6, r7, r8, pc}
   181ac:	ldr	r0, [r6, #8]
   181b0:	pop	{r4, r5, r6, r7, r8, pc}
   181b4:	mov	r1, r6
   181b8:	mov	r2, #1
   181bc:	mov	r0, r5
   181c0:	bl	16350 <__assert_fail@plt+0x4f24>
   181c4:	b	181a4 <fts_children@@Base+0x100>
   181c8:	str	r4, [r5, #4]
   181cc:	mov	r0, r4
   181d0:	pop	{r4, r5, r6, r7, r8, pc}
   181d4:	ldr	r5, [r7]
   181d8:	mov	r0, r6
   181dc:	bl	113f0 <close@plt>
   181e0:	str	r5, [r7]
   181e4:	mov	r0, r4
   181e8:	pop	{r4, r5, r6, r7, r8, pc}
   181ec:	muleq	r1, r0, r1
   181f0:	push	{r4, r5, r6, r7, r8, lr}
   181f4:	subs	r7, r0, #0
   181f8:	ldr	r5, [pc, #108]	; 1826c <fts_children@@Base+0x1c8>
   181fc:	sub	sp, sp, #8
   18200:	mov	r8, r1
   18204:	ldr	r1, [r5]
   18208:	moveq	r7, sp
   1820c:	str	r1, [sp, #4]
   18210:	mov	r0, r7
   18214:	mov	r1, r8
   18218:	mov	r6, r2
   1821c:	bl	11234 <mbrtowc@plt>
   18220:	cmp	r6, #0
   18224:	cmnne	r0, #3
   18228:	mov	r4, r0
   1822c:	bhi	1824c <fts_children@@Base+0x1a8>
   18230:	ldr	r2, [sp, #4]
   18234:	ldr	r3, [r5]
   18238:	mov	r0, r4
   1823c:	cmp	r2, r3
   18240:	bne	18268 <fts_children@@Base+0x1c4>
   18244:	add	sp, sp, #8
   18248:	pop	{r4, r5, r6, r7, r8, pc}
   1824c:	mov	r0, #0
   18250:	bl	18438 <fts_children@@Base+0x394>
   18254:	cmp	r0, #0
   18258:	moveq	r4, #1
   1825c:	ldrbeq	r3, [r8]
   18260:	streq	r3, [r7]
   18264:	b	18230 <fts_children@@Base+0x18c>
   18268:	bl	111b0 <__stack_chk_fail@plt>
   1826c:	andeq	fp, r2, r8, lsl #30
   18270:	push	{r4, r5, r6, lr}
   18274:	mov	r4, r0
   18278:	bl	11228 <__fpending@plt>
   1827c:	ldr	r5, [r4]
   18280:	and	r5, r5, #32
   18284:	mov	r6, r0
   18288:	mov	r0, r4
   1828c:	bl	196f8 <fts_children@@Base+0x1654>
   18290:	cmp	r5, #0
   18294:	mov	r4, r0
   18298:	bne	182c4 <fts_children@@Base+0x220>
   1829c:	cmp	r0, #0
   182a0:	beq	182bc <fts_children@@Base+0x218>
   182a4:	cmp	r6, #0
   182a8:	bne	182dc <fts_children@@Base+0x238>
   182ac:	bl	112e8 <__errno_location@plt>
   182b0:	ldr	r4, [r0]
   182b4:	subs	r4, r4, #9
   182b8:	mvnne	r4, #0
   182bc:	mov	r0, r4
   182c0:	pop	{r4, r5, r6, pc}
   182c4:	cmp	r0, #0
   182c8:	bne	182dc <fts_children@@Base+0x238>
   182cc:	bl	112e8 <__errno_location@plt>
   182d0:	str	r4, [r0]
   182d4:	mvn	r4, #0
   182d8:	b	182bc <fts_children@@Base+0x218>
   182dc:	mvn	r4, #0
   182e0:	b	182bc <fts_children@@Base+0x218>
   182e4:	push	{r4, r5}
   182e8:	mov	r4, #0
   182ec:	mov	r5, #0
   182f0:	ldr	r3, [pc, #12]	; 18304 <fts_children@@Base+0x260>
   182f4:	strd	r4, [r0, #16]
   182f8:	str	r3, [r0, #24]
   182fc:	pop	{r4, r5}
   18300:	bx	lr
   18304:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   18308:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1830c:	ldr	r2, [r0, #24]
   18310:	ldr	r3, [pc, #180]	; 183cc <fts_children@@Base+0x328>
   18314:	cmp	r2, r3
   18318:	bne	183b8 <fts_children@@Base+0x314>
   1831c:	ldrd	r6, [r0, #16]
   18320:	ldrd	sl, [r1, #96]	; 0x60
   18324:	orrs	r3, r6, r7
   18328:	beq	18364 <fts_children@@Base+0x2c0>
   1832c:	ldrd	r2, [r0]
   18330:	cmp	r3, fp
   18334:	cmpeq	r2, sl
   18338:	beq	18388 <fts_children@@Base+0x2e4>
   1833c:	adds	r8, r6, #1
   18340:	adc	r9, r7, #0
   18344:	and	r2, r6, r8
   18348:	and	r3, r7, r9
   1834c:	orrs	r3, r2, r3
   18350:	strd	r8, [r0, #16]
   18354:	movne	r1, #0
   18358:	beq	183a8 <fts_children@@Base+0x304>
   1835c:	mov	r0, r1
   18360:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18364:	mov	r2, #1
   18368:	mov	r3, #0
   1836c:	strd	r2, [r0, #16]
   18370:	ldrd	r2, [r1]
   18374:	mov	r1, #0
   18378:	strd	sl, [r0]
   1837c:	strd	r2, [r0, #8]
   18380:	mov	r0, r1
   18384:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18388:	ldrd	r4, [r1]
   1838c:	ldrd	r2, [r0, #8]
   18390:	cmp	r5, r3
   18394:	cmpeq	r4, r2
   18398:	bne	1833c <fts_children@@Base+0x298>
   1839c:	mov	r1, #1
   183a0:	mov	r0, r1
   183a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183a8:	orrs	r3, r8, r9
   183ac:	bne	18370 <fts_children@@Base+0x2cc>
   183b0:	mov	r1, #1
   183b4:	b	183a0 <fts_children@@Base+0x2fc>
   183b8:	ldr	r3, [pc, #16]	; 183d0 <fts_children@@Base+0x32c>
   183bc:	mov	r2, #60	; 0x3c
   183c0:	ldr	r1, [pc, #12]	; 183d4 <fts_children@@Base+0x330>
   183c4:	ldr	r0, [pc, #12]	; 183d8 <fts_children@@Base+0x334>
   183c8:	bl	1142c <__assert_fail@plt>
   183cc:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   183d0:	muleq	r1, r4, r1
   183d4:	andeq	fp, r1, r0, lsr #3
   183d8:			; <UNDEFINED> instruction: 0x0001b1b4
   183dc:	push	{r1, r2, r3}
   183e0:	push	{r4, lr}
   183e4:	sub	sp, sp, #12
   183e8:	ldr	r4, [pc, #68]	; 18434 <fts_children@@Base+0x390>
   183ec:	ldr	r1, [sp, #20]
   183f0:	ldr	r3, [r4]
   183f4:	ands	r2, r1, #64	; 0x40
   183f8:	str	r3, [sp, #4]
   183fc:	ldrne	r2, [sp, #24]
   18400:	addne	r3, sp, #24
   18404:	strne	r3, [sp]
   18408:	bl	1124c <open64@plt>
   1840c:	bl	196b4 <fts_children@@Base+0x1610>
   18410:	ldr	r2, [sp, #4]
   18414:	ldr	r3, [r4]
   18418:	cmp	r2, r3
   1841c:	bne	18430 <fts_children@@Base+0x38c>
   18420:	add	sp, sp, #12
   18424:	pop	{r4, lr}
   18428:	add	sp, sp, #12
   1842c:	bx	lr
   18430:	bl	111b0 <__stack_chk_fail@plt>
   18434:	andeq	fp, r2, r8, lsl #30
   18438:	push	{r4, lr}
   1843c:	mov	r1, #0
   18440:	bl	11354 <setlocale@plt>
   18444:	subs	r4, r0, #0
   18448:	beq	18474 <fts_children@@Base+0x3d0>
   1844c:	ldr	r1, [pc, #40]	; 1847c <fts_children@@Base+0x3d8>
   18450:	bl	11120 <strcmp@plt>
   18454:	cmp	r0, #0
   18458:	popeq	{r4, pc}
   1845c:	mov	r0, r4
   18460:	ldr	r1, [pc, #24]	; 18480 <fts_children@@Base+0x3dc>
   18464:	bl	11120 <strcmp@plt>
   18468:	adds	r0, r0, #0
   1846c:	movne	r0, #1
   18470:	pop	{r4, pc}
   18474:	mov	r0, #1
   18478:	pop	{r4, pc}
   1847c:	andeq	fp, r1, ip, asr #3
   18480:	ldrdeq	fp, [r1], -r0
   18484:	andeq	r0, r0, r0
   18488:	cmp	r0, #10
   1848c:	movcc	r0, #10
   18490:	push	{r4, r5, r6, r7, r8, lr}
   18494:	orr	r7, r0, #1
   18498:	cmn	r7, #1
   1849c:	beq	18514 <fts_children@@Base+0x470>
   184a0:	ldr	r8, [pc, #116]	; 1851c <fts_children@@Base+0x478>
   184a4:	umull	r2, r3, r8, r7
   184a8:	cmp	r7, #9
   184ac:	lsr	r3, r3, #1
   184b0:	add	r3, r3, r3, lsl #1
   184b4:	sub	r3, r7, r3
   184b8:	bls	18500 <fts_children@@Base+0x45c>
   184bc:	cmp	r3, #0
   184c0:	beq	18508 <fts_children@@Base+0x464>
   184c4:	mov	r6, #16
   184c8:	mov	r5, #9
   184cc:	mov	r4, #3
   184d0:	b	184e0 <fts_children@@Base+0x43c>
   184d4:	cmp	r1, #0
   184d8:	add	r6, r6, #8
   184dc:	beq	18508 <fts_children@@Base+0x464>
   184e0:	add	r4, r4, #2
   184e4:	mov	r1, r4
   184e8:	mov	r0, r7
   184ec:	bl	19bdc <fts_children@@Base+0x1b38>
   184f0:	add	r5, r5, r6
   184f4:	cmp	r5, r7
   184f8:	mov	r3, r1
   184fc:	bcc	184d4 <fts_children@@Base+0x430>
   18500:	cmp	r3, #0
   18504:	bne	18514 <fts_children@@Base+0x470>
   18508:	add	r7, r7, #2
   1850c:	cmn	r7, #1
   18510:	bne	184a4 <fts_children@@Base+0x400>
   18514:	mov	r0, r7
   18518:	pop	{r4, r5, r6, r7, r8, pc}
   1851c:	bge	feac2fd0 <optarg@@GLIBC_2.4+0xfea96e38>
   18520:	push	{r4, lr}
   18524:	ror	r0, r0, #3
   18528:	bl	19bdc <fts_children@@Base+0x1b38>
   1852c:	mov	r0, r1
   18530:	pop	{r4, pc}
   18534:	sub	r0, r1, r0
   18538:	clz	r0, r0
   1853c:	lsr	r0, r0, #5
   18540:	bx	lr
   18544:	push	{r4, lr}
   18548:	mov	r4, r0
   1854c:	mov	r0, r1
   18550:	ldr	r3, [r4, #24]
   18554:	ldr	r1, [r4, #8]
   18558:	blx	r3
   1855c:	ldr	r3, [r4, #8]
   18560:	cmp	r3, r0
   18564:	bls	18574 <fts_children@@Base+0x4d0>
   18568:	ldr	r3, [r4]
   1856c:	add	r0, r3, r0, lsl #3
   18570:	pop	{r4, pc}
   18574:	bl	113e4 <abort@plt>
   18578:	push	{r4, r5, r6, r7, r8, lr}
   1857c:	mov	r8, r2
   18580:	mov	r5, r1
   18584:	mov	r7, r3
   18588:	mov	r6, r0
   1858c:	bl	18544 <fts_children@@Base+0x4a0>
   18590:	str	r0, [r8]
   18594:	ldr	r1, [r0]
   18598:	cmp	r1, #0
   1859c:	beq	18684 <fts_children@@Base+0x5e0>
   185a0:	cmp	r1, r5
   185a4:	mov	r4, r0
   185a8:	beq	18648 <fts_children@@Base+0x5a4>
   185ac:	ldr	r3, [r6, #28]
   185b0:	mov	r0, r5
   185b4:	blx	r3
   185b8:	cmp	r0, #0
   185bc:	ldrne	r3, [r4]
   185c0:	bne	1864c <fts_children@@Base+0x5a8>
   185c4:	ldr	r2, [r4, #4]
   185c8:	cmp	r2, #0
   185cc:	beq	18684 <fts_children@@Base+0x5e0>
   185d0:	ldr	r3, [r2]
   185d4:	cmp	r5, r3
   185d8:	bne	185fc <fts_children@@Base+0x558>
   185dc:	b	1861c <fts_children@@Base+0x578>
   185e0:	ldr	r4, [r4, #4]
   185e4:	ldr	r2, [r4, #4]
   185e8:	cmp	r2, #0
   185ec:	beq	18684 <fts_children@@Base+0x5e0>
   185f0:	ldr	r3, [r2]
   185f4:	cmp	r3, r5
   185f8:	beq	1861c <fts_children@@Base+0x578>
   185fc:	mov	r1, r3
   18600:	mov	r0, r5
   18604:	ldr	r3, [r6, #28]
   18608:	blx	r3
   1860c:	cmp	r0, #0
   18610:	beq	185e0 <fts_children@@Base+0x53c>
   18614:	ldr	r2, [r4, #4]
   18618:	ldr	r3, [r2]
   1861c:	cmp	r7, #0
   18620:	beq	1867c <fts_children@@Base+0x5d8>
   18624:	ldr	r0, [r2, #4]
   18628:	mov	r1, #0
   1862c:	str	r0, [r4, #4]
   18630:	str	r1, [r2]
   18634:	ldr	r1, [r6, #36]	; 0x24
   18638:	mov	r0, r3
   1863c:	str	r1, [r2, #4]
   18640:	str	r2, [r6, #36]	; 0x24
   18644:	pop	{r4, r5, r6, r7, r8, pc}
   18648:	mov	r3, r1
   1864c:	cmp	r7, #0
   18650:	beq	1867c <fts_children@@Base+0x5d8>
   18654:	ldr	r2, [r4, #4]
   18658:	cmp	r2, #0
   1865c:	movne	ip, #0
   18660:	ldmne	r2, {r0, r1}
   18664:	streq	r2, [r4]
   18668:	stmne	r4, {r0, r1}
   1866c:	strne	ip, [r2]
   18670:	ldrne	r1, [r6, #36]	; 0x24
   18674:	strne	r1, [r2, #4]
   18678:	strne	r2, [r6, #36]	; 0x24
   1867c:	mov	r0, r3
   18680:	pop	{r4, r5, r6, r7, r8, pc}
   18684:	mov	r3, #0
   18688:	mov	r0, r3
   1868c:	pop	{r4, r5, r6, r7, r8, pc}
   18690:	ldr	r2, [pc, #164]	; 1873c <fts_children@@Base+0x698>
   18694:	ldr	r3, [r0]
   18698:	cmp	r3, r2
   1869c:	beq	18724 <fts_children@@Base+0x680>
   186a0:	vldr	s15, [r3, #8]
   186a4:	vldr	s14, [pc, #128]	; 1872c <fts_children@@Base+0x688>
   186a8:	vcmpe.f32	s15, s14
   186ac:	vmrs	APSR_nzcv, fpscr
   186b0:	ble	18718 <fts_children@@Base+0x674>
   186b4:	vldr	s13, [pc, #116]	; 18730 <fts_children@@Base+0x68c>
   186b8:	vcmpe.f32	s15, s13
   186bc:	vmrs	APSR_nzcv, fpscr
   186c0:	bpl	18718 <fts_children@@Base+0x674>
   186c4:	vldr	s13, [pc, #104]	; 18734 <fts_children@@Base+0x690>
   186c8:	vldr	s12, [r3, #12]
   186cc:	vcmpe.f32	s12, s13
   186d0:	vmrs	APSR_nzcv, fpscr
   186d4:	ble	18718 <fts_children@@Base+0x674>
   186d8:	vldr	s13, [r3]
   186dc:	vcmpe.f32	s13, #0.0
   186e0:	vmrs	APSR_nzcv, fpscr
   186e4:	blt	18718 <fts_children@@Base+0x674>
   186e8:	vadd.f32	s14, s13, s14
   186ec:	vldr	s13, [r3, #4]
   186f0:	vcmpe.f32	s14, s13
   186f4:	vmrs	APSR_nzcv, fpscr
   186f8:	bpl	18718 <fts_children@@Base+0x674>
   186fc:	vldr	s12, [pc, #52]	; 18738 <fts_children@@Base+0x694>
   18700:	vcmpe.f32	s13, s12
   18704:	vmrs	APSR_nzcv, fpscr
   18708:	bhi	18718 <fts_children@@Base+0x674>
   1870c:	vcmpe.f32	s15, s14
   18710:	vmrs	APSR_nzcv, fpscr
   18714:	bgt	18724 <fts_children@@Base+0x680>
   18718:	str	r2, [r0]
   1871c:	mov	r0, #0
   18720:	bx	lr
   18724:	mov	r0, #1
   18728:	bx	lr
   1872c:	stclcc	12, cr12, [ip, #820]	; 0x334
   18730:	svccc	0x00666666
   18734:	svccc	0x008ccccd
   18738:	svccc	0x00800000
   1873c:	ldrdeq	fp, [r1], -r8
   18740:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18744:	ldr	r3, [r1, #4]
   18748:	ldr	r6, [r1]
   1874c:	cmp	r6, r3
   18750:	bcs	18818 <fts_children@@Base+0x774>
   18754:	mov	r8, r2
   18758:	mov	r5, r0
   1875c:	mov	r7, r1
   18760:	add	r6, r6, #8
   18764:	mov	r9, #0
   18768:	b	18778 <fts_children@@Base+0x6d4>
   1876c:	cmp	r3, r6
   18770:	add	r6, r6, #8
   18774:	bls	18818 <fts_children@@Base+0x774>
   18778:	ldr	sl, [r6, #-8]
   1877c:	cmp	sl, #0
   18780:	beq	1876c <fts_children@@Base+0x6c8>
   18784:	ldr	r4, [r6, #-4]
   18788:	cmp	r4, #0
   1878c:	bne	187ac <fts_children@@Base+0x708>
   18790:	b	187fc <fts_children@@Base+0x758>
   18794:	ldr	r2, [r0, #4]
   18798:	cmp	r3, #0
   1879c:	str	r2, [r4, #4]
   187a0:	str	r4, [r0, #4]
   187a4:	mov	r4, r3
   187a8:	beq	187f8 <fts_children@@Base+0x754>
   187ac:	ldr	sl, [r4]
   187b0:	mov	r0, r5
   187b4:	mov	r1, sl
   187b8:	bl	18544 <fts_children@@Base+0x4a0>
   187bc:	ldr	r3, [r4, #4]
   187c0:	ldr	r2, [r0]
   187c4:	cmp	r2, #0
   187c8:	bne	18794 <fts_children@@Base+0x6f0>
   187cc:	ldr	r1, [r5, #12]
   187d0:	str	sl, [r0]
   187d4:	add	r1, r1, #1
   187d8:	str	r1, [r5, #12]
   187dc:	str	r2, [r4]
   187e0:	ldr	r2, [r5, #36]	; 0x24
   187e4:	cmp	r3, #0
   187e8:	str	r2, [r4, #4]
   187ec:	str	r4, [r5, #36]	; 0x24
   187f0:	mov	r4, r3
   187f4:	bne	187ac <fts_children@@Base+0x708>
   187f8:	ldr	sl, [r6, #-8]
   187fc:	cmp	r8, #0
   18800:	str	r9, [r6, #-4]
   18804:	beq	18820 <fts_children@@Base+0x77c>
   18808:	ldr	r3, [r7, #4]
   1880c:	cmp	r3, r6
   18810:	add	r6, r6, #8
   18814:	bhi	18778 <fts_children@@Base+0x6d4>
   18818:	mov	r0, #1
   1881c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18820:	mov	r1, sl
   18824:	mov	r0, r5
   18828:	bl	18544 <fts_children@@Base+0x4a0>
   1882c:	ldr	r3, [r0]
   18830:	mov	r4, r0
   18834:	cmp	r3, #0
   18838:	beq	18878 <fts_children@@Base+0x7d4>
   1883c:	ldr	r0, [r5, #36]	; 0x24
   18840:	cmp	r0, #0
   18844:	beq	1888c <fts_children@@Base+0x7e8>
   18848:	ldr	r3, [r0, #4]
   1884c:	str	r3, [r5, #36]	; 0x24
   18850:	ldr	r3, [r4, #4]
   18854:	str	sl, [r0]
   18858:	str	r3, [r0, #4]
   1885c:	str	r0, [r4, #4]
   18860:	ldr	r2, [r7, #12]
   18864:	str	r9, [r6, #-8]
   18868:	sub	r2, r2, #1
   1886c:	ldr	r3, [r7, #4]
   18870:	str	r2, [r7, #12]
   18874:	b	1876c <fts_children@@Base+0x6c8>
   18878:	ldr	r3, [r5, #12]
   1887c:	str	sl, [r0]
   18880:	add	r3, r3, #1
   18884:	str	r3, [r5, #12]
   18888:	b	18860 <fts_children@@Base+0x7bc>
   1888c:	mov	r0, #8
   18890:	bl	11258 <malloc@plt>
   18894:	cmp	r0, #0
   18898:	bne	18850 <fts_children@@Base+0x7ac>
   1889c:	mov	r0, r8
   188a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188a4:	ldr	r0, [r0, #8]
   188a8:	bx	lr
   188ac:	ldr	r0, [r0, #12]
   188b0:	bx	lr
   188b4:	ldr	r0, [r0, #16]
   188b8:	bx	lr
   188bc:	ldm	r0, {r1, r3}
   188c0:	cmp	r1, r3
   188c4:	bcs	1892c <fts_children@@Base+0x888>
   188c8:	sub	ip, r3, #1
   188cc:	sub	ip, ip, r1
   188d0:	add	r3, r1, #16
   188d4:	bic	ip, ip, #7
   188d8:	add	ip, ip, r3
   188dc:	add	r1, r1, #8
   188e0:	mov	r0, #0
   188e4:	b	188f4 <fts_children@@Base+0x850>
   188e8:	add	r1, r1, #8
   188ec:	cmp	r1, ip
   188f0:	bxeq	lr
   188f4:	ldr	r3, [r1, #-8]
   188f8:	cmp	r3, #0
   188fc:	beq	188e8 <fts_children@@Base+0x844>
   18900:	ldr	r3, [r1, #-4]
   18904:	mov	r2, #1
   18908:	cmp	r3, #0
   1890c:	beq	18920 <fts_children@@Base+0x87c>
   18910:	ldr	r3, [r3, #4]
   18914:	add	r2, r2, #1
   18918:	cmp	r3, #0
   1891c:	bne	18910 <fts_children@@Base+0x86c>
   18920:	cmp	r0, r2
   18924:	movcc	r0, r2
   18928:	b	188e8 <fts_children@@Base+0x844>
   1892c:	mov	r0, #0
   18930:	bx	lr
   18934:	ldm	r0, {r1, r3}
   18938:	push	{lr}		; (str lr, [sp, #-4]!)
   1893c:	cmp	r1, r3
   18940:	bcs	189d0 <fts_children@@Base+0x92c>
   18944:	sub	ip, r3, #1
   18948:	sub	ip, ip, r1
   1894c:	add	r3, r1, #16
   18950:	bic	ip, ip, #7
   18954:	mov	r2, #0
   18958:	add	ip, ip, r3
   1895c:	add	r1, r1, #8
   18960:	mov	lr, r2
   18964:	b	18974 <fts_children@@Base+0x8d0>
   18968:	add	r1, r1, #8
   1896c:	cmp	r1, ip
   18970:	beq	189b0 <fts_children@@Base+0x90c>
   18974:	ldr	r3, [r1, #-8]
   18978:	cmp	r3, #0
   1897c:	beq	18968 <fts_children@@Base+0x8c4>
   18980:	ldr	r3, [r1, #-4]
   18984:	add	lr, lr, #1
   18988:	cmp	r3, #0
   1898c:	add	r2, r2, #1
   18990:	beq	18968 <fts_children@@Base+0x8c4>
   18994:	ldr	r3, [r3, #4]
   18998:	add	r2, r2, #1
   1899c:	cmp	r3, #0
   189a0:	bne	18994 <fts_children@@Base+0x8f0>
   189a4:	add	r1, r1, #8
   189a8:	cmp	r1, ip
   189ac:	bne	18974 <fts_children@@Base+0x8d0>
   189b0:	ldr	r3, [r0, #12]
   189b4:	cmp	r3, lr
   189b8:	ldreq	r0, [r0, #16]
   189bc:	subeq	r0, r0, r2
   189c0:	clzeq	r0, r0
   189c4:	lsreq	r0, r0, #5
   189c8:	movne	r0, #0
   189cc:	pop	{pc}		; (ldr pc, [sp], #4)
   189d0:	mov	r2, #0
   189d4:	mov	lr, r2
   189d8:	b	189b0 <fts_children@@Base+0x90c>
   189dc:	push	{r4, r5, r6, r7, lr}
   189e0:	mov	r4, r1
   189e4:	ldr	r2, [r0]
   189e8:	ldr	r1, [r0, #4]
   189ec:	sub	sp, sp, #12
   189f0:	cmp	r2, r1
   189f4:	ldr	r3, [r0, #16]
   189f8:	ldrd	r6, [r0, #8]
   189fc:	bcs	18ae0 <fts_children@@Base+0xa3c>
   18a00:	sub	ip, r1, #1
   18a04:	sub	ip, ip, r2
   18a08:	bic	ip, ip, #7
   18a0c:	add	r1, r2, #16
   18a10:	add	ip, ip, r1
   18a14:	add	r0, r2, #8
   18a18:	mov	r5, #0
   18a1c:	b	18a2c <fts_children@@Base+0x988>
   18a20:	add	r0, r0, #8
   18a24:	cmp	r0, ip
   18a28:	beq	18a6c <fts_children@@Base+0x9c8>
   18a2c:	ldr	r2, [r0, #-8]
   18a30:	cmp	r2, #0
   18a34:	beq	18a20 <fts_children@@Base+0x97c>
   18a38:	ldr	r2, [r0, #-4]
   18a3c:	mov	r1, #1
   18a40:	cmp	r2, #0
   18a44:	beq	18a58 <fts_children@@Base+0x9b4>
   18a48:	ldr	r2, [r2, #4]
   18a4c:	add	r1, r1, #1
   18a50:	cmp	r2, #0
   18a54:	bne	18a48 <fts_children@@Base+0x9a4>
   18a58:	cmp	r5, r1
   18a5c:	add	r0, r0, #8
   18a60:	movcc	r5, r1
   18a64:	cmp	r0, ip
   18a68:	bne	18a2c <fts_children@@Base+0x988>
   18a6c:	ldr	r2, [pc, #124]	; 18af0 <fts_children@@Base+0xa4c>
   18a70:	mov	r1, #1
   18a74:	mov	r0, r4
   18a78:	bl	11324 <__fprintf_chk@plt>
   18a7c:	mov	r3, r6
   18a80:	ldr	r2, [pc, #108]	; 18af4 <fts_children@@Base+0xa50>
   18a84:	mov	r1, #1
   18a88:	mov	r0, r4
   18a8c:	bl	11324 <__fprintf_chk@plt>
   18a90:	vmov	s15, r7
   18a94:	vldr	d5, [pc, #76]	; 18ae8 <fts_children@@Base+0xa44>
   18a98:	mov	r3, r7
   18a9c:	ldr	r2, [pc, #84]	; 18af8 <fts_children@@Base+0xa54>
   18aa0:	vcvt.f64.u32	d6, s15
   18aa4:	vmov	s15, r6
   18aa8:	mov	r1, #1
   18aac:	mov	r0, r4
   18ab0:	vcvt.f64.u32	d7, s15
   18ab4:	vmul.f64	d6, d6, d5
   18ab8:	vdiv.f64	d5, d6, d7
   18abc:	vstr	d5, [sp]
   18ac0:	bl	11324 <__fprintf_chk@plt>
   18ac4:	mov	r3, r5
   18ac8:	mov	r0, r4
   18acc:	ldr	r2, [pc, #40]	; 18afc <fts_children@@Base+0xa58>
   18ad0:	mov	r1, #1
   18ad4:	add	sp, sp, #12
   18ad8:	pop	{r4, r5, r6, r7, lr}
   18adc:	b	11324 <__fprintf_chk@plt>
   18ae0:	mov	r5, #0
   18ae4:	b	18a6c <fts_children@@Base+0x9c8>
   18ae8:	andeq	r0, r0, r0
   18aec:	subsmi	r0, r9, r0
   18af0:	andeq	fp, r1, ip, ror #3
   18af4:	andeq	fp, r1, r4, lsl #4
   18af8:	andeq	fp, r1, ip, lsl r2
   18afc:	andeq	fp, r1, r0, asr #4
   18b00:	push	{r4, r5, r6, lr}
   18b04:	mov	r6, r0
   18b08:	mov	r5, r1
   18b0c:	bl	18544 <fts_children@@Base+0x4a0>
   18b10:	ldr	r3, [r0]
   18b14:	cmp	r3, #0
   18b18:	beq	18b54 <fts_children@@Base+0xab0>
   18b1c:	mov	r4, r0
   18b20:	b	18b28 <fts_children@@Base+0xa84>
   18b24:	ldr	r3, [r4]
   18b28:	cmp	r3, r5
   18b2c:	mov	r1, r3
   18b30:	mov	r0, r5
   18b34:	beq	18b60 <fts_children@@Base+0xabc>
   18b38:	ldr	r3, [r6, #28]
   18b3c:	blx	r3
   18b40:	cmp	r0, #0
   18b44:	bne	18b5c <fts_children@@Base+0xab8>
   18b48:	ldr	r4, [r4, #4]
   18b4c:	cmp	r4, #0
   18b50:	bne	18b24 <fts_children@@Base+0xa80>
   18b54:	mov	r0, #0
   18b58:	pop	{r4, r5, r6, pc}
   18b5c:	ldr	r5, [r4]
   18b60:	mov	r0, r5
   18b64:	pop	{r4, r5, r6, pc}
   18b68:	ldr	r3, [r0, #16]
   18b6c:	cmp	r3, #0
   18b70:	beq	18bc0 <fts_children@@Base+0xb1c>
   18b74:	ldr	r3, [r0]
   18b78:	ldr	r2, [r0, #4]
   18b7c:	cmp	r3, r2
   18b80:	bcs	18bb8 <fts_children@@Base+0xb14>
   18b84:	ldr	r0, [r3]
   18b88:	cmp	r0, #0
   18b8c:	bxne	lr
   18b90:	sub	r2, r2, #1
   18b94:	sub	r2, r2, r3
   18b98:	bic	r2, r2, #7
   18b9c:	add	r2, r3, r2
   18ba0:	b	18bb0 <fts_children@@Base+0xb0c>
   18ba4:	ldr	r0, [r3, #8]!
   18ba8:	cmp	r0, #0
   18bac:	bxne	lr
   18bb0:	cmp	r3, r2
   18bb4:	bne	18ba4 <fts_children@@Base+0xb00>
   18bb8:	push	{r4, lr}
   18bbc:	bl	113e4 <abort@plt>
   18bc0:	mov	r0, r3
   18bc4:	bx	lr
   18bc8:	push	{r4, r5, r6, lr}
   18bcc:	mov	r5, r0
   18bd0:	mov	r4, r1
   18bd4:	bl	18544 <fts_children@@Base+0x4a0>
   18bd8:	mov	r2, r0
   18bdc:	mov	r3, r0
   18be0:	b	18bec <fts_children@@Base+0xb48>
   18be4:	cmp	r3, #0
   18be8:	beq	18c00 <fts_children@@Base+0xb5c>
   18bec:	ldm	r3, {r1, r3}
   18bf0:	cmp	r1, r4
   18bf4:	bne	18be4 <fts_children@@Base+0xb40>
   18bf8:	cmp	r3, #0
   18bfc:	bne	18c28 <fts_children@@Base+0xb84>
   18c00:	ldr	r3, [r5, #4]
   18c04:	b	18c14 <fts_children@@Base+0xb70>
   18c08:	ldr	r0, [r2]
   18c0c:	cmp	r0, #0
   18c10:	popne	{r4, r5, r6, pc}
   18c14:	add	r2, r2, #8
   18c18:	cmp	r3, r2
   18c1c:	bhi	18c08 <fts_children@@Base+0xb64>
   18c20:	mov	r0, #0
   18c24:	pop	{r4, r5, r6, pc}
   18c28:	ldr	r0, [r3]
   18c2c:	pop	{r4, r5, r6, pc}
   18c30:	push	{r4, r5, lr}
   18c34:	ldm	r0, {r5, lr}
   18c38:	cmp	lr, r5
   18c3c:	bls	18cc0 <fts_children@@Base+0xc1c>
   18c40:	mov	ip, #0
   18c44:	ldr	r3, [r5]
   18c48:	cmp	r3, #0
   18c4c:	bne	18c68 <fts_children@@Base+0xbc4>
   18c50:	add	r5, r5, #8
   18c54:	cmp	lr, r5
   18c58:	bhi	18c44 <fts_children@@Base+0xba0>
   18c5c:	mov	r2, ip
   18c60:	mov	r0, r2
   18c64:	pop	{r4, r5, pc}
   18c68:	cmp	r2, ip
   18c6c:	bls	18c5c <fts_children@@Base+0xbb8>
   18c70:	str	r3, [r1, ip, lsl #2]
   18c74:	ldr	r3, [r5, #4]
   18c78:	add	r4, ip, #1
   18c7c:	cmp	r3, #0
   18c80:	add	lr, r1, ip, lsl #2
   18c84:	beq	18cb4 <fts_children@@Base+0xc10>
   18c88:	mov	ip, r4
   18c8c:	cmp	r2, ip
   18c90:	beq	18c60 <fts_children@@Base+0xbbc>
   18c94:	ldr	r4, [r3]
   18c98:	add	ip, ip, #1
   18c9c:	str	r4, [lr, #4]!
   18ca0:	ldr	r3, [r3, #4]
   18ca4:	cmp	r3, #0
   18ca8:	bne	18c8c <fts_children@@Base+0xbe8>
   18cac:	ldr	lr, [r0, #4]
   18cb0:	b	18c50 <fts_children@@Base+0xbac>
   18cb4:	ldr	lr, [r0, #4]
   18cb8:	mov	ip, r4
   18cbc:	b	18c50 <fts_children@@Base+0xbac>
   18cc0:	mov	r2, #0
   18cc4:	b	18c60 <fts_children@@Base+0xbbc>
   18cc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ccc:	ldr	r3, [r0, #4]
   18cd0:	ldr	r8, [r0]
   18cd4:	cmp	r3, r8
   18cd8:	bls	18d40 <fts_children@@Base+0xc9c>
   18cdc:	mov	r7, r2
   18ce0:	mov	r6, r1
   18ce4:	mov	r9, r0
   18ce8:	mov	r5, #0
   18cec:	ldr	r0, [r8]
   18cf0:	cmp	r0, #0
   18cf4:	bne	18d0c <fts_children@@Base+0xc68>
   18cf8:	add	r8, r8, #8
   18cfc:	cmp	r3, r8
   18d00:	bhi	18cec <fts_children@@Base+0xc48>
   18d04:	mov	r0, r5
   18d08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d0c:	mov	r4, r8
   18d10:	b	18d18 <fts_children@@Base+0xc74>
   18d14:	ldr	r0, [r4]
   18d18:	mov	r1, r7
   18d1c:	blx	r6
   18d20:	cmp	r0, #0
   18d24:	beq	18d04 <fts_children@@Base+0xc60>
   18d28:	ldr	r4, [r4, #4]
   18d2c:	add	r5, r5, #1
   18d30:	cmp	r4, #0
   18d34:	bne	18d14 <fts_children@@Base+0xc70>
   18d38:	ldr	r3, [r9, #4]
   18d3c:	b	18cf8 <fts_children@@Base+0xc54>
   18d40:	mov	r5, #0
   18d44:	b	18d04 <fts_children@@Base+0xc60>
   18d48:	push	{r4, r5, r6, lr}
   18d4c:	mov	r4, r0
   18d50:	ldrb	r0, [r0]
   18d54:	cmp	r0, #0
   18d58:	beq	18d88 <fts_children@@Base+0xce4>
   18d5c:	mov	r5, r1
   18d60:	mov	r1, #0
   18d64:	rsb	r1, r1, r1, lsl #5
   18d68:	add	r0, r1, r0
   18d6c:	mov	r1, r5
   18d70:	bl	19bdc <fts_children@@Base+0x1b38>
   18d74:	ldrb	r0, [r4, #1]!
   18d78:	cmp	r0, #0
   18d7c:	bne	18d64 <fts_children@@Base+0xcc0>
   18d80:	mov	r0, r1
   18d84:	pop	{r4, r5, r6, pc}
   18d88:	mov	r1, r0
   18d8c:	mov	r0, r1
   18d90:	pop	{r4, r5, r6, pc}
   18d94:	push	{lr}		; (str lr, [sp, #-4]!)
   18d98:	mov	ip, r0
   18d9c:	ldr	lr, [pc, #16]	; 18db4 <fts_children@@Base+0xd10>
   18da0:	ldm	lr!, {r0, r1, r2, r3}
   18da4:	ldr	lr, [lr]
   18da8:	stmia	ip!, {r0, r1, r2, r3}
   18dac:	str	lr, [ip]
   18db0:	pop	{pc}		; (ldr pc, [sp], #4)
   18db4:	ldrdeq	fp, [r1], -r8
   18db8:	push	{r4, r5, r6, r7, r8, lr}
   18dbc:	sub	sp, sp, #8
   18dc0:	cmp	r2, #0
   18dc4:	ldr	ip, [pc, #300]	; 18ef8 <fts_children@@Base+0xe54>
   18dc8:	str	r0, [sp, #4]
   18dcc:	ldr	r5, [pc, #296]	; 18efc <fts_children@@Base+0xe58>
   18dd0:	mov	r0, #40	; 0x28
   18dd4:	movne	r5, r2
   18dd8:	cmp	r3, #0
   18ddc:	movne	r8, r3
   18de0:	moveq	r8, ip
   18de4:	mov	r6, r1
   18de8:	bl	11258 <malloc@plt>
   18dec:	subs	r4, r0, #0
   18df0:	beq	18ebc <fts_children@@Base+0xe18>
   18df4:	cmp	r6, #0
   18df8:	add	r0, r4, #20
   18dfc:	beq	18e98 <fts_children@@Base+0xdf4>
   18e00:	str	r6, [r4, #20]
   18e04:	bl	18690 <fts_children@@Base+0x5ec>
   18e08:	cmp	r0, #0
   18e0c:	beq	18eb0 <fts_children@@Base+0xe0c>
   18e10:	ldrb	r3, [r6, #16]
   18e14:	cmp	r3, #0
   18e18:	vldreq	s13, [r6, #8]
   18e1c:	beq	18ec8 <fts_children@@Base+0xe24>
   18e20:	ldr	r0, [sp, #4]
   18e24:	bl	18488 <fts_children@@Base+0x3e4>
   18e28:	lsrs	r3, r0, #30
   18e2c:	movne	r7, #1
   18e30:	moveq	r7, #0
   18e34:	tst	r0, #536870912	; 0x20000000
   18e38:	mov	r6, r0
   18e3c:	bne	18eb0 <fts_children@@Base+0xe0c>
   18e40:	cmp	r7, #0
   18e44:	bne	18eb0 <fts_children@@Base+0xe0c>
   18e48:	cmp	r0, #0
   18e4c:	str	r0, [r4, #8]
   18e50:	beq	18eb0 <fts_children@@Base+0xe0c>
   18e54:	mov	r1, #8
   18e58:	bl	110f0 <calloc@plt>
   18e5c:	cmp	r0, #0
   18e60:	str	r0, [r4]
   18e64:	beq	18eb0 <fts_children@@Base+0xe0c>
   18e68:	ldr	r3, [sp, #32]
   18e6c:	add	r0, r0, r6, lsl #3
   18e70:	str	r0, [r4, #4]
   18e74:	str	r7, [r4, #12]
   18e78:	mov	r0, r4
   18e7c:	str	r7, [r4, #16]
   18e80:	str	r5, [r4, #24]
   18e84:	str	r8, [r4, #28]
   18e88:	str	r3, [r4, #32]
   18e8c:	str	r7, [r4, #36]	; 0x24
   18e90:	add	sp, sp, #8
   18e94:	pop	{r4, r5, r6, r7, r8, pc}
   18e98:	ldr	r3, [pc, #96]	; 18f00 <fts_children@@Base+0xe5c>
   18e9c:	str	r3, [r4, #20]
   18ea0:	bl	18690 <fts_children@@Base+0x5ec>
   18ea4:	cmp	r0, #0
   18ea8:	vldrne	s13, [pc, #64]	; 18ef0 <fts_children@@Base+0xe4c>
   18eac:	bne	18ec8 <fts_children@@Base+0xe24>
   18eb0:	mov	r0, r4
   18eb4:	bl	11150 <free@plt>
   18eb8:	mov	r4, #0
   18ebc:	mov	r0, r4
   18ec0:	add	sp, sp, #8
   18ec4:	pop	{r4, r5, r6, r7, r8, pc}
   18ec8:	vldr	s15, [sp, #4]
   18ecc:	vldr	s14, [pc, #32]	; 18ef4 <fts_children@@Base+0xe50>
   18ed0:	vcvt.f32.u32	s12, s15
   18ed4:	vdiv.f32	s15, s12, s13
   18ed8:	vcmpe.f32	s15, s14
   18edc:	vmrs	APSR_nzcv, fpscr
   18ee0:	bge	18eb0 <fts_children@@Base+0xe0c>
   18ee4:	vcvt.u32.f32	s15, s15
   18ee8:	vstr	s15, [sp, #4]
   18eec:	b	18e20 <fts_children@@Base+0xd7c>
   18ef0:	svccc	0x004ccccd
   18ef4:	svcmi	0x00800000
   18ef8:	andeq	r8, r1, r4, lsr r5
   18efc:	andeq	r8, r1, r0, lsr #10
   18f00:	ldrdeq	fp, [r1], -r8
   18f04:	push	{r4, r5, r6, r7, r8, lr}
   18f08:	mov	r5, r0
   18f0c:	ldr	r6, [r0]
   18f10:	ldr	r2, [r0, #4]
   18f14:	cmp	r6, r2
   18f18:	addcc	r6, r6, #8
   18f1c:	movcc	r7, #0
   18f20:	bcc	18f34 <fts_children@@Base+0xe90>
   18f24:	b	18fa8 <fts_children@@Base+0xf04>
   18f28:	cmp	r2, r6
   18f2c:	add	r6, r6, #8
   18f30:	bls	18fa8 <fts_children@@Base+0xf04>
   18f34:	ldr	r3, [r6, #-8]
   18f38:	cmp	r3, #0
   18f3c:	beq	18f28 <fts_children@@Base+0xe84>
   18f40:	ldr	r4, [r6, #-4]
   18f44:	ldr	r2, [r5, #32]
   18f48:	cmp	r4, #0
   18f4c:	beq	18f80 <fts_children@@Base+0xedc>
   18f50:	cmp	r2, #0
   18f54:	beq	18f64 <fts_children@@Base+0xec0>
   18f58:	ldr	r0, [r4]
   18f5c:	blx	r2
   18f60:	ldr	r2, [r5, #32]
   18f64:	ldr	r3, [r4, #4]
   18f68:	ldr	r1, [r5, #36]	; 0x24
   18f6c:	str	r7, [r4]
   18f70:	str	r1, [r4, #4]
   18f74:	str	r4, [r5, #36]	; 0x24
   18f78:	subs	r4, r3, #0
   18f7c:	bne	18f50 <fts_children@@Base+0xeac>
   18f80:	cmp	r2, #0
   18f84:	beq	18f90 <fts_children@@Base+0xeec>
   18f88:	ldr	r0, [r6, #-8]
   18f8c:	blx	r2
   18f90:	str	r7, [r6, #-8]
   18f94:	str	r7, [r6, #-4]
   18f98:	ldr	r2, [r5, #4]
   18f9c:	cmp	r2, r6
   18fa0:	add	r6, r6, #8
   18fa4:	bhi	18f34 <fts_children@@Base+0xe90>
   18fa8:	mov	r3, #0
   18fac:	str	r3, [r5, #12]
   18fb0:	str	r3, [r5, #16]
   18fb4:	pop	{r4, r5, r6, r7, r8, pc}
   18fb8:	ldr	r3, [r0, #32]
   18fbc:	push	{r4, r5, r6, lr}
   18fc0:	cmp	r3, #0
   18fc4:	mov	r6, r0
   18fc8:	ldr	r5, [r0]
   18fcc:	ldr	r3, [r0, #4]
   18fd0:	beq	19038 <fts_children@@Base+0xf94>
   18fd4:	ldr	r2, [r0, #16]
   18fd8:	cmp	r2, #0
   18fdc:	beq	19038 <fts_children@@Base+0xf94>
   18fe0:	cmp	r5, r3
   18fe4:	bcc	18ff8 <fts_children@@Base+0xf54>
   18fe8:	b	1906c <fts_children@@Base+0xfc8>
   18fec:	add	r5, r5, #8
   18ff0:	cmp	r3, r5
   18ff4:	bls	19034 <fts_children@@Base+0xf90>
   18ff8:	ldr	r0, [r5]
   18ffc:	cmp	r0, #0
   19000:	beq	18fec <fts_children@@Base+0xf48>
   19004:	mov	r4, r5
   19008:	b	19010 <fts_children@@Base+0xf6c>
   1900c:	ldr	r0, [r4]
   19010:	ldr	r3, [r6, #32]
   19014:	blx	r3
   19018:	ldr	r4, [r4, #4]
   1901c:	cmp	r4, #0
   19020:	bne	1900c <fts_children@@Base+0xf68>
   19024:	ldr	r3, [r6, #4]
   19028:	add	r5, r5, #8
   1902c:	cmp	r3, r5
   19030:	bhi	18ff8 <fts_children@@Base+0xf54>
   19034:	ldr	r5, [r6]
   19038:	cmp	r5, r3
   1903c:	bcs	1906c <fts_children@@Base+0xfc8>
   19040:	ldr	r0, [r5, #4]
   19044:	cmp	r0, #0
   19048:	beq	19060 <fts_children@@Base+0xfbc>
   1904c:	ldr	r4, [r0, #4]
   19050:	bl	11150 <free@plt>
   19054:	subs	r0, r4, #0
   19058:	bne	1904c <fts_children@@Base+0xfa8>
   1905c:	ldr	r3, [r6, #4]
   19060:	add	r5, r5, #8
   19064:	cmp	r3, r5
   19068:	bhi	19040 <fts_children@@Base+0xf9c>
   1906c:	ldr	r0, [r6, #36]	; 0x24
   19070:	cmp	r0, #0
   19074:	beq	19088 <fts_children@@Base+0xfe4>
   19078:	ldr	r4, [r0, #4]
   1907c:	bl	11150 <free@plt>
   19080:	subs	r0, r4, #0
   19084:	bne	19078 <fts_children@@Base+0xfd4>
   19088:	ldr	r0, [r6]
   1908c:	bl	11150 <free@plt>
   19090:	mov	r0, r6
   19094:	pop	{r4, r5, r6, lr}
   19098:	b	11150 <free@plt>
   1909c:	push	{r4, r5, r6, r7, r8, lr}
   190a0:	sub	sp, sp, #56	; 0x38
   190a4:	ldr	r8, [r0, #20]
   190a8:	ldr	r7, [pc, #392]	; 19238 <fts_children@@Base+0x1194>
   190ac:	mov	r6, r0
   190b0:	ldrb	r3, [r8, #16]
   190b4:	ldr	r2, [r7]
   190b8:	str	r1, [sp, #4]
   190bc:	cmp	r3, #0
   190c0:	str	r2, [sp, #52]	; 0x34
   190c4:	bne	190f0 <fts_children@@Base+0x104c>
   190c8:	vmov	s15, r1
   190cc:	vldr	s13, [r8, #8]
   190d0:	vldr	s14, [pc, #348]	; 19234 <fts_children@@Base+0x1190>
   190d4:	vcvt.f32.u32	s12, s15
   190d8:	vdiv.f32	s15, s12, s13
   190dc:	vcmpe.f32	s15, s14
   190e0:	vmrs	APSR_nzcv, fpscr
   190e4:	vcvtlt.u32.f32	s15, s15
   190e8:	vstrlt	s15, [sp, #4]
   190ec:	bge	19120 <fts_children@@Base+0x107c>
   190f0:	ldr	r0, [sp, #4]
   190f4:	bl	18488 <fts_children@@Base+0x3e4>
   190f8:	lsrs	r3, r0, #30
   190fc:	movne	r4, #1
   19100:	moveq	r4, #0
   19104:	tst	r0, #536870912	; 0x20000000
   19108:	movne	r4, #1
   1910c:	cmp	r0, #0
   19110:	moveq	r4, #1
   19114:	cmp	r4, #0
   19118:	mov	r5, r0
   1911c:	beq	19140 <fts_children@@Base+0x109c>
   19120:	mov	r4, #0
   19124:	ldr	r2, [sp, #52]	; 0x34
   19128:	ldr	r3, [r7]
   1912c:	mov	r0, r4
   19130:	cmp	r2, r3
   19134:	bne	1922c <fts_children@@Base+0x1188>
   19138:	add	sp, sp, #56	; 0x38
   1913c:	pop	{r4, r5, r6, r7, r8, pc}
   19140:	ldr	r3, [r6, #8]
   19144:	cmp	r3, r0
   19148:	beq	191f4 <fts_children@@Base+0x1150>
   1914c:	mov	r1, #8
   19150:	bl	110f0 <calloc@plt>
   19154:	cmp	r0, #0
   19158:	str	r0, [sp, #12]
   1915c:	beq	19120 <fts_children@@Base+0x107c>
   19160:	add	r0, r0, r5, lsl #3
   19164:	ldr	r1, [r6, #32]
   19168:	str	r0, [sp, #16]
   1916c:	ldr	r0, [r6, #28]
   19170:	ldr	ip, [r6, #24]
   19174:	ldr	r3, [r6, #36]	; 0x24
   19178:	mov	r2, r4
   1917c:	str	r0, [sp, #40]	; 0x28
   19180:	str	r1, [sp, #44]	; 0x2c
   19184:	add	r0, sp, #12
   19188:	mov	r1, r6
   1918c:	str	r4, [sp, #24]
   19190:	str	r4, [sp, #28]
   19194:	str	r5, [sp, #20]
   19198:	str	r8, [sp, #32]
   1919c:	str	ip, [sp, #36]	; 0x24
   191a0:	str	r3, [sp, #48]	; 0x30
   191a4:	bl	18740 <fts_children@@Base+0x69c>
   191a8:	subs	r4, r0, #0
   191ac:	bne	191fc <fts_children@@Base+0x1158>
   191b0:	ldr	r3, [sp, #48]	; 0x30
   191b4:	mov	r2, #1
   191b8:	str	r3, [r6, #36]	; 0x24
   191bc:	add	r1, sp, #12
   191c0:	mov	r0, r6
   191c4:	bl	18740 <fts_children@@Base+0x69c>
   191c8:	cmp	r0, #0
   191cc:	beq	19230 <fts_children@@Base+0x118c>
   191d0:	add	r1, sp, #12
   191d4:	mov	r0, r6
   191d8:	mov	r2, r4
   191dc:	bl	18740 <fts_children@@Base+0x69c>
   191e0:	cmp	r0, #0
   191e4:	beq	19230 <fts_children@@Base+0x118c>
   191e8:	ldr	r0, [sp, #12]
   191ec:	bl	11150 <free@plt>
   191f0:	b	19124 <fts_children@@Base+0x1080>
   191f4:	mov	r4, #1
   191f8:	b	19124 <fts_children@@Base+0x1080>
   191fc:	ldr	r0, [r6]
   19200:	bl	11150 <free@plt>
   19204:	ldrd	r2, [sp, #12]
   19208:	ldr	r1, [sp, #20]
   1920c:	str	r2, [r6]
   19210:	str	r3, [r6, #4]
   19214:	ldr	r2, [sp, #24]
   19218:	ldr	r3, [sp, #48]	; 0x30
   1921c:	str	r1, [r6, #8]
   19220:	str	r2, [r6, #12]
   19224:	str	r3, [r6, #36]	; 0x24
   19228:	b	19124 <fts_children@@Base+0x1080>
   1922c:	bl	111b0 <__stack_chk_fail@plt>
   19230:	bl	113e4 <abort@plt>
   19234:	svcmi	0x00800000
   19238:	andeq	fp, r2, r8, lsl #30
   1923c:	push	{r4, r5, r6, r7, lr}
   19240:	sub	sp, sp, #12
   19244:	ldr	r6, [pc, #404]	; 193e0 <fts_children@@Base+0x133c>
   19248:	subs	r7, r1, #0
   1924c:	ldr	r3, [r6]
   19250:	str	r3, [sp, #4]
   19254:	beq	193d4 <fts_children@@Base+0x1330>
   19258:	mov	r5, r2
   1925c:	mov	r3, #0
   19260:	mov	r2, sp
   19264:	mov	r4, r0
   19268:	bl	18578 <fts_children@@Base+0x4d4>
   1926c:	cmp	r0, #0
   19270:	beq	1929c <fts_children@@Base+0x11f8>
   19274:	cmp	r5, #0
   19278:	moveq	r0, r5
   1927c:	strne	r0, [r5]
   19280:	movne	r0, #0
   19284:	ldr	r2, [sp, #4]
   19288:	ldr	r3, [r6]
   1928c:	cmp	r2, r3
   19290:	bne	193d8 <fts_children@@Base+0x1334>
   19294:	add	sp, sp, #12
   19298:	pop	{r4, r5, r6, r7, pc}
   1929c:	vldr	s15, [r4, #8]
   192a0:	ldr	r3, [r4, #20]
   192a4:	vldr	s14, [r4, #12]
   192a8:	vcvt.f32.u32	s15, s15
   192ac:	vldr	s13, [r3, #8]
   192b0:	vcvt.f32.u32	s14, s14
   192b4:	vmul.f32	s15, s15, s13
   192b8:	vcmpe.f32	s14, s15
   192bc:	vmrs	APSR_nzcv, fpscr
   192c0:	bgt	1930c <fts_children@@Base+0x1268>
   192c4:	ldr	r5, [sp]
   192c8:	ldr	r3, [r5]
   192cc:	cmp	r3, #0
   192d0:	beq	19368 <fts_children@@Base+0x12c4>
   192d4:	ldr	r0, [r4, #36]	; 0x24
   192d8:	cmp	r0, #0
   192dc:	beq	1938c <fts_children@@Base+0x12e8>
   192e0:	ldr	r3, [r0, #4]
   192e4:	str	r3, [r4, #36]	; 0x24
   192e8:	ldr	r3, [r4, #16]
   192ec:	ldr	r2, [r5, #4]
   192f0:	add	r3, r3, #1
   192f4:	str	r7, [r0]
   192f8:	str	r2, [r0, #4]
   192fc:	str	r0, [r5, #4]
   19300:	mov	r0, #1
   19304:	str	r3, [r4, #16]
   19308:	b	19284 <fts_children@@Base+0x11e0>
   1930c:	add	r0, r4, #20
   19310:	bl	18690 <fts_children@@Base+0x5ec>
   19314:	vldr	s15, [r4, #8]
   19318:	ldr	r3, [r4, #20]
   1931c:	vldr	s14, [r4, #12]
   19320:	vcvt.f32.u32	s15, s15
   19324:	vldr	s13, [r3, #8]
   19328:	vcvt.f32.u32	s14, s14
   1932c:	vmul.f32	s12, s13, s15
   19330:	vcmpe.f32	s14, s12
   19334:	vmrs	APSR_nzcv, fpscr
   19338:	ble	192c4 <fts_children@@Base+0x1220>
   1933c:	vldr	s14, [r3, #12]
   19340:	ldrb	r3, [r3, #16]
   19344:	vmul.f32	s15, s15, s14
   19348:	cmp	r3, #0
   1934c:	vldr	s14, [pc, #136]	; 193dc <fts_children@@Base+0x1338>
   19350:	vmuleq.f32	s15, s15, s13
   19354:	vcmpe.f32	s15, s14
   19358:	vmrs	APSR_nzcv, fpscr
   1935c:	blt	193a0 <fts_children@@Base+0x12fc>
   19360:	mvn	r0, #0
   19364:	b	19284 <fts_children@@Base+0x11e0>
   19368:	ldr	r2, [r4, #16]
   1936c:	ldr	r3, [r4, #12]
   19370:	add	r2, r2, #1
   19374:	add	r3, r3, #1
   19378:	str	r7, [r5]
   1937c:	mov	r0, #1
   19380:	str	r2, [r4, #16]
   19384:	str	r3, [r4, #12]
   19388:	b	19284 <fts_children@@Base+0x11e0>
   1938c:	mov	r0, #8
   19390:	bl	11258 <malloc@plt>
   19394:	cmp	r0, #0
   19398:	beq	19360 <fts_children@@Base+0x12bc>
   1939c:	b	192e8 <fts_children@@Base+0x1244>
   193a0:	vcvt.u32.f32	s15, s15
   193a4:	mov	r0, r4
   193a8:	vmov	r1, s15
   193ac:	bl	1909c <fts_children@@Base+0xff8>
   193b0:	cmp	r0, #0
   193b4:	beq	19360 <fts_children@@Base+0x12bc>
   193b8:	mov	r2, sp
   193bc:	mov	r3, #0
   193c0:	mov	r1, r7
   193c4:	mov	r0, r4
   193c8:	bl	18578 <fts_children@@Base+0x4d4>
   193cc:	cmp	r0, #0
   193d0:	beq	192c4 <fts_children@@Base+0x1220>
   193d4:	bl	113e4 <abort@plt>
   193d8:	bl	111b0 <__stack_chk_fail@plt>
   193dc:	svcmi	0x00800000
   193e0:	andeq	fp, r2, r8, lsl #30
   193e4:	push	{r4, r5, lr}
   193e8:	sub	sp, sp, #12
   193ec:	ldr	r5, [pc, #68]	; 19438 <fts_children@@Base+0x1394>
   193f0:	mov	r2, sp
   193f4:	mov	r4, r1
   193f8:	ldr	r3, [r5]
   193fc:	str	r3, [sp, #4]
   19400:	bl	1923c <fts_children@@Base+0x1198>
   19404:	cmn	r0, #1
   19408:	moveq	r0, #0
   1940c:	beq	1941c <fts_children@@Base+0x1378>
   19410:	cmp	r0, #0
   19414:	movne	r0, r4
   19418:	ldreq	r0, [sp]
   1941c:	ldr	r2, [sp, #4]
   19420:	ldr	r3, [r5]
   19424:	cmp	r2, r3
   19428:	bne	19434 <fts_children@@Base+0x1390>
   1942c:	add	sp, sp, #12
   19430:	pop	{r4, r5, pc}
   19434:	bl	111b0 <__stack_chk_fail@plt>
   19438:	andeq	fp, r2, r8, lsl #30
   1943c:	push	{r4, r5, r6, r7, lr}
   19440:	sub	sp, sp, #12
   19444:	ldr	r5, [pc, #276]	; 19560 <fts_children@@Base+0x14bc>
   19448:	mov	r3, #1
   1944c:	mov	r2, sp
   19450:	ldr	ip, [r5]
   19454:	mov	r4, r0
   19458:	str	ip, [sp, #4]
   1945c:	bl	18578 <fts_children@@Base+0x4d4>
   19460:	subs	r6, r0, #0
   19464:	beq	19484 <fts_children@@Base+0x13e0>
   19468:	ldr	r2, [sp]
   1946c:	ldr	r3, [r4, #16]
   19470:	ldr	r2, [r2]
   19474:	sub	r3, r3, #1
   19478:	cmp	r2, #0
   1947c:	str	r3, [r4, #16]
   19480:	beq	194a0 <fts_children@@Base+0x13fc>
   19484:	ldr	r2, [sp, #4]
   19488:	ldr	r3, [r5]
   1948c:	mov	r0, r6
   19490:	cmp	r2, r3
   19494:	bne	1955c <fts_children@@Base+0x14b8>
   19498:	add	sp, sp, #12
   1949c:	pop	{r4, r5, r6, r7, pc}
   194a0:	vldr	s15, [r4, #8]
   194a4:	ldr	r3, [r4, #12]
   194a8:	ldr	r2, [r4, #20]
   194ac:	sub	r3, r3, #1
   194b0:	vcvt.f32.u32	s14, s15
   194b4:	vldr	s13, [r2]
   194b8:	vmov	s15, r3
   194bc:	str	r3, [r4, #12]
   194c0:	vcvt.f32.u32	s15, s15
   194c4:	vmul.f32	s14, s14, s13
   194c8:	vcmpe.f32	s15, s14
   194cc:	vmrs	APSR_nzcv, fpscr
   194d0:	bpl	19484 <fts_children@@Base+0x13e0>
   194d4:	add	r0, r4, #20
   194d8:	bl	18690 <fts_children@@Base+0x5ec>
   194dc:	vldr	s15, [r4, #8]
   194e0:	ldr	r3, [r4, #20]
   194e4:	vldr	s13, [r4, #12]
   194e8:	vcvt.f32.u32	s15, s15
   194ec:	vldr	s14, [r3]
   194f0:	vcvt.f32.u32	s13, s13
   194f4:	vmul.f32	s14, s15, s14
   194f8:	vcmpe.f32	s13, s14
   194fc:	vmrs	APSR_nzcv, fpscr
   19500:	bpl	19484 <fts_children@@Base+0x13e0>
   19504:	vldr	s14, [r3, #4]
   19508:	ldrb	r2, [r3, #16]
   1950c:	mov	r0, r4
   19510:	vmul.f32	s15, s15, s14
   19514:	cmp	r2, #0
   19518:	vldreq	s14, [r3, #8]
   1951c:	vmuleq.f32	s15, s15, s14
   19520:	vcvt.u32.f32	s15, s15
   19524:	vmov	r1, s15
   19528:	bl	1909c <fts_children@@Base+0xff8>
   1952c:	cmp	r0, #0
   19530:	bne	19484 <fts_children@@Base+0x13e0>
   19534:	ldr	r0, [r4, #36]	; 0x24
   19538:	cmp	r0, #0
   1953c:	beq	19550 <fts_children@@Base+0x14ac>
   19540:	ldr	r7, [r0, #4]
   19544:	bl	11150 <free@plt>
   19548:	subs	r0, r7, #0
   1954c:	bne	19540 <fts_children@@Base+0x149c>
   19550:	mov	r3, #0
   19554:	str	r3, [r4, #36]	; 0x24
   19558:	b	19484 <fts_children@@Base+0x13e0>
   1955c:	bl	111b0 <__stack_chk_fail@plt>
   19560:	andeq	fp, r2, r8, lsl #30
   19564:	mov	r3, #0
   19568:	mov	r2, #1
   1956c:	str	r1, [r0]
   19570:	str	r1, [r0, #4]
   19574:	str	r1, [r0, #8]
   19578:	str	r1, [r0, #12]
   1957c:	str	r1, [r0, #16]
   19580:	strb	r2, [r0, #28]
   19584:	str	r3, [r0, #20]
   19588:	str	r3, [r0, #24]
   1958c:	bx	lr
   19590:	ldrb	r0, [r0, #28]
   19594:	bx	lr
   19598:	ldrb	ip, [r0, #28]
   1959c:	ldr	r3, [r0, #20]
   195a0:	mov	r2, r0
   195a4:	eor	ip, ip, #1
   195a8:	add	r3, ip, r3
   195ac:	and	r3, r3, #3
   195b0:	ldr	r0, [r0, r3, lsl #2]
   195b4:	str	r1, [r2, r3, lsl #2]
   195b8:	ldr	r1, [r2, #24]
   195bc:	str	r3, [r2, #20]
   195c0:	cmp	r1, r3
   195c4:	addeq	ip, ip, r1
   195c8:	andeq	ip, ip, #3
   195cc:	mov	r3, #0
   195d0:	streq	ip, [r2, #24]
   195d4:	strb	r3, [r2, #28]
   195d8:	bx	lr
   195dc:	ldrb	r3, [r0, #28]
   195e0:	cmp	r3, #0
   195e4:	bne	1961c <fts_children@@Base+0x1578>
   195e8:	ldr	r3, [r0, #20]
   195ec:	ldr	r1, [r0, #16]
   195f0:	ldr	r2, [r0, r3, lsl #2]
   195f4:	str	r1, [r0, r3, lsl #2]
   195f8:	ldr	r1, [r0, #24]
   195fc:	cmp	r3, r1
   19600:	addne	r3, r3, #3
   19604:	moveq	r3, #1
   19608:	andne	r3, r3, #3
   1960c:	strbeq	r3, [r0, #28]
   19610:	strne	r3, [r0, #20]
   19614:	mov	r0, r2
   19618:	bx	lr
   1961c:	push	{r4, lr}
   19620:	bl	113e4 <abort@plt>
   19624:	push	{r4, lr}
   19628:	mov	r0, #14
   1962c:	bl	1136c <nl_langinfo@plt>
   19630:	cmp	r0, #0
   19634:	beq	1964c <fts_children@@Base+0x15a8>
   19638:	ldrb	r2, [r0]
   1963c:	ldr	r3, [pc, #16]	; 19654 <fts_children@@Base+0x15b0>
   19640:	cmp	r2, #0
   19644:	moveq	r0, r3
   19648:	pop	{r4, pc}
   1964c:	ldr	r0, [pc]	; 19654 <fts_children@@Base+0x15b0>
   19650:	pop	{r4, pc}
   19654:	andeq	fp, r1, r8, asr r2
   19658:	push	{r2, r3}
   1965c:	push	{r4, lr}
   19660:	sub	sp, sp, #8
   19664:	ldr	r4, [pc, #68]	; 196b0 <fts_children@@Base+0x160c>
   19668:	ldr	r2, [sp, #16]
   1966c:	ands	r3, r2, #64	; 0x40
   19670:	addne	r3, sp, #20
   19674:	ldr	ip, [r4]
   19678:	strne	r3, [sp]
   1967c:	ldrne	r3, [sp, #20]
   19680:	str	ip, [sp, #4]
   19684:	bl	112d0 <openat64@plt>
   19688:	bl	196b4 <fts_children@@Base+0x1610>
   1968c:	ldr	r2, [sp, #4]
   19690:	ldr	r3, [r4]
   19694:	cmp	r2, r3
   19698:	bne	196ac <fts_children@@Base+0x1608>
   1969c:	add	sp, sp, #8
   196a0:	pop	{r4, lr}
   196a4:	add	sp, sp, #8
   196a8:	bx	lr
   196ac:	bl	111b0 <__stack_chk_fail@plt>
   196b0:	andeq	fp, r2, r8, lsl #30
   196b4:	cmp	r0, #2
   196b8:	push	{r4, r5, r6, r7, r8, lr}
   196bc:	mov	r4, r0
   196c0:	bls	196cc <fts_children@@Base+0x1628>
   196c4:	mov	r0, r4
   196c8:	pop	{r4, r5, r6, r7, r8, pc}
   196cc:	bl	199e4 <fts_children@@Base+0x1940>
   196d0:	mov	r7, r0
   196d4:	bl	112e8 <__errno_location@plt>
   196d8:	mov	r5, r0
   196dc:	mov	r0, r4
   196e0:	ldr	r6, [r5]
   196e4:	mov	r4, r7
   196e8:	bl	113f0 <close@plt>
   196ec:	str	r6, [r5]
   196f0:	mov	r0, r4
   196f4:	pop	{r4, r5, r6, r7, r8, pc}
   196f8:	push	{r4, r5, lr}
   196fc:	sub	sp, sp, #12
   19700:	mov	r4, r0
   19704:	bl	11318 <fileno@plt>
   19708:	cmp	r0, #0
   1970c:	mov	r0, r4
   19710:	blt	1978c <fts_children@@Base+0x16e8>
   19714:	bl	11270 <__freading@plt>
   19718:	cmp	r0, #0
   1971c:	bne	19758 <fts_children@@Base+0x16b4>
   19720:	mov	r0, r4
   19724:	bl	198e4 <fts_children@@Base+0x1840>
   19728:	cmp	r0, #0
   1972c:	beq	19788 <fts_children@@Base+0x16e4>
   19730:	bl	112e8 <__errno_location@plt>
   19734:	mov	r5, r0
   19738:	mov	r0, r4
   1973c:	ldr	r4, [r5]
   19740:	bl	11330 <fclose@plt>
   19744:	cmp	r4, #0
   19748:	mvnne	r0, #0
   1974c:	strne	r4, [r5]
   19750:	add	sp, sp, #12
   19754:	pop	{r4, r5, pc}
   19758:	mov	r0, r4
   1975c:	bl	11318 <fileno@plt>
   19760:	mov	r3, #1
   19764:	str	r3, [sp]
   19768:	mov	r2, #0
   1976c:	mov	r3, #0
   19770:	bl	11204 <lseek64@plt>
   19774:	mvn	r3, #0
   19778:	mvn	r2, #0
   1977c:	cmp	r1, r3
   19780:	cmpeq	r0, r2
   19784:	bne	19720 <fts_children@@Base+0x167c>
   19788:	mov	r0, r4
   1978c:	add	sp, sp, #12
   19790:	pop	{r4, r5, lr}
   19794:	b	11330 <fclose@plt>
   19798:	push	{r1, r2, r3}
   1979c:	push	{r4, r5, r6, r7, r8, lr}
   197a0:	sub	sp, sp, #12
   197a4:	ldr	r4, [pc, #300]	; 198d8 <fts_children@@Base+0x1834>
   197a8:	ldr	r3, [pc, #300]	; 198dc <fts_children@@Base+0x1838>
   197ac:	ldr	r1, [sp, #36]	; 0x24
   197b0:	ldr	r2, [r4]
   197b4:	cmp	r1, r3
   197b8:	add	r3, sp, #40	; 0x28
   197bc:	str	r2, [sp, #4]
   197c0:	str	r3, [sp]
   197c4:	bne	19890 <fts_children@@Base+0x17ec>
   197c8:	ldr	r6, [pc, #272]	; 198e0 <fts_children@@Base+0x183c>
   197cc:	add	r3, sp, #44	; 0x2c
   197d0:	str	r3, [sp]
   197d4:	ldr	r3, [r6]
   197d8:	ldr	r7, [sp, #40]	; 0x28
   197dc:	cmp	r3, #0
   197e0:	blt	19824 <fts_children@@Base+0x1780>
   197e4:	mov	r2, r7
   197e8:	mov	r8, r0
   197ec:	bl	11348 <fcntl64@plt>
   197f0:	subs	r5, r0, #0
   197f4:	blt	198a0 <fts_children@@Base+0x17fc>
   197f8:	mov	r3, #1
   197fc:	str	r3, [r6]
   19800:	ldr	r2, [sp, #4]
   19804:	ldr	r3, [r4]
   19808:	mov	r0, r5
   1980c:	cmp	r2, r3
   19810:	bne	198d4 <fts_children@@Base+0x1830>
   19814:	add	sp, sp, #12
   19818:	pop	{r4, r5, r6, r7, r8, lr}
   1981c:	add	sp, sp, #12
   19820:	bx	lr
   19824:	mov	r2, r7
   19828:	mov	r1, #0
   1982c:	bl	19798 <fts_children@@Base+0x16f4>
   19830:	subs	r5, r0, #0
   19834:	blt	19800 <fts_children@@Base+0x175c>
   19838:	ldr	r3, [r6]
   1983c:	cmn	r3, #1
   19840:	bne	19800 <fts_children@@Base+0x175c>
   19844:	mov	r1, #1
   19848:	mov	r0, r5
   1984c:	bl	11348 <fcntl64@plt>
   19850:	subs	r2, r0, #0
   19854:	blt	19870 <fts_children@@Base+0x17cc>
   19858:	orr	r2, r2, #1
   1985c:	mov	r1, #2
   19860:	mov	r0, r5
   19864:	bl	11348 <fcntl64@plt>
   19868:	cmn	r0, #1
   1986c:	bne	19800 <fts_children@@Base+0x175c>
   19870:	bl	112e8 <__errno_location@plt>
   19874:	mov	r6, r0
   19878:	mov	r0, r5
   1987c:	ldr	r7, [r6]
   19880:	mvn	r5, #0
   19884:	bl	113f0 <close@plt>
   19888:	str	r7, [r6]
   1988c:	b	19800 <fts_children@@Base+0x175c>
   19890:	ldr	r2, [sp, #40]	; 0x28
   19894:	bl	11348 <fcntl64@plt>
   19898:	mov	r5, r0
   1989c:	b	19800 <fts_children@@Base+0x175c>
   198a0:	bl	112e8 <__errno_location@plt>
   198a4:	ldr	r3, [r0]
   198a8:	cmp	r3, #22
   198ac:	bne	197f8 <fts_children@@Base+0x1754>
   198b0:	mov	r2, r7
   198b4:	mov	r0, r8
   198b8:	mov	r1, #0
   198bc:	bl	19798 <fts_children@@Base+0x16f4>
   198c0:	subs	r5, r0, #0
   198c4:	mvnge	r3, #0
   198c8:	strge	r3, [r6]
   198cc:	bge	19844 <fts_children@@Base+0x17a0>
   198d0:	b	19800 <fts_children@@Base+0x175c>
   198d4:	bl	111b0 <__stack_chk_fail@plt>
   198d8:	andeq	fp, r2, r8, lsl #30
   198dc:	andeq	r0, r0, r6, lsl #8
   198e0:	strdeq	ip, [r2], -r4
   198e4:	push	{r4, lr}
   198e8:	subs	r4, r0, #0
   198ec:	sub	sp, sp, #8
   198f0:	beq	1990c <fts_children@@Base+0x1868>
   198f4:	bl	11270 <__freading@plt>
   198f8:	cmp	r0, #0
   198fc:	beq	1990c <fts_children@@Base+0x1868>
   19900:	ldr	r3, [r4]
   19904:	tst	r3, #256	; 0x100
   19908:	bne	1991c <fts_children@@Base+0x1878>
   1990c:	mov	r0, r4
   19910:	add	sp, sp, #8
   19914:	pop	{r4, lr}
   19918:	b	11138 <fflush@plt>
   1991c:	mov	r3, #1
   19920:	str	r3, [sp]
   19924:	mov	r2, #0
   19928:	mov	r3, #0
   1992c:	mov	r0, r4
   19930:	bl	19944 <fts_children@@Base+0x18a0>
   19934:	mov	r0, r4
   19938:	add	sp, sp, #8
   1993c:	pop	{r4, lr}
   19940:	b	11138 <fflush@plt>
   19944:	push	{r4, r5, r6, r7, r8, lr}
   19948:	sub	sp, sp, #8
   1994c:	ldmib	r0, {ip, lr}
   19950:	mov	r4, r0
   19954:	ldr	r5, [sp, #32]
   19958:	cmp	lr, ip
   1995c:	beq	19974 <fts_children@@Base+0x18d0>
   19960:	str	r5, [sp, #32]
   19964:	mov	r0, r4
   19968:	add	sp, sp, #8
   1996c:	pop	{r4, r5, r6, r7, r8, lr}
   19970:	b	1133c <fseeko64@plt>
   19974:	ldr	lr, [r0, #20]
   19978:	ldr	ip, [r0, #16]
   1997c:	cmp	lr, ip
   19980:	bne	19960 <fts_children@@Base+0x18bc>
   19984:	ldr	r8, [r0, #36]	; 0x24
   19988:	cmp	r8, #0
   1998c:	bne	19960 <fts_children@@Base+0x18bc>
   19990:	mov	r6, r2
   19994:	mov	r7, r3
   19998:	bl	11318 <fileno@plt>
   1999c:	mov	r2, r6
   199a0:	mov	r3, r7
   199a4:	str	r5, [sp]
   199a8:	bl	11204 <lseek64@plt>
   199ac:	mvn	r3, #0
   199b0:	mvn	r2, #0
   199b4:	cmp	r1, r3
   199b8:	cmpeq	r0, r2
   199bc:	beq	199dc <fts_children@@Base+0x1938>
   199c0:	ldr	r3, [r4]
   199c4:	strd	r0, [r4, #80]	; 0x50
   199c8:	mov	r0, r8
   199cc:	bic	r3, r3, #16
   199d0:	str	r3, [r4]
   199d4:	add	sp, sp, #8
   199d8:	pop	{r4, r5, r6, r7, r8, pc}
   199dc:	mvn	r0, #0
   199e0:	b	199d4 <fts_children@@Base+0x1930>
   199e4:	mov	r2, #3
   199e8:	mov	r1, #0
   199ec:	b	19798 <fts_children@@Base+0x16f4>
   199f0:	subs	r2, r1, #1
   199f4:	bxeq	lr
   199f8:	bcc	19bd0 <fts_children@@Base+0x1b2c>
   199fc:	cmp	r0, r1
   19a00:	bls	19bb4 <fts_children@@Base+0x1b10>
   19a04:	tst	r1, r2
   19a08:	beq	19bc0 <fts_children@@Base+0x1b1c>
   19a0c:	clz	r3, r0
   19a10:	clz	r2, r1
   19a14:	sub	r3, r2, r3
   19a18:	rsbs	r3, r3, #31
   19a1c:	addne	r3, r3, r3, lsl #1
   19a20:	mov	r2, #0
   19a24:	addne	pc, pc, r3, lsl #2
   19a28:	nop			; (mov r0, r0)
   19a2c:	cmp	r0, r1, lsl #31
   19a30:	adc	r2, r2, r2
   19a34:	subcs	r0, r0, r1, lsl #31
   19a38:	cmp	r0, r1, lsl #30
   19a3c:	adc	r2, r2, r2
   19a40:	subcs	r0, r0, r1, lsl #30
   19a44:	cmp	r0, r1, lsl #29
   19a48:	adc	r2, r2, r2
   19a4c:	subcs	r0, r0, r1, lsl #29
   19a50:	cmp	r0, r1, lsl #28
   19a54:	adc	r2, r2, r2
   19a58:	subcs	r0, r0, r1, lsl #28
   19a5c:	cmp	r0, r1, lsl #27
   19a60:	adc	r2, r2, r2
   19a64:	subcs	r0, r0, r1, lsl #27
   19a68:	cmp	r0, r1, lsl #26
   19a6c:	adc	r2, r2, r2
   19a70:	subcs	r0, r0, r1, lsl #26
   19a74:	cmp	r0, r1, lsl #25
   19a78:	adc	r2, r2, r2
   19a7c:	subcs	r0, r0, r1, lsl #25
   19a80:	cmp	r0, r1, lsl #24
   19a84:	adc	r2, r2, r2
   19a88:	subcs	r0, r0, r1, lsl #24
   19a8c:	cmp	r0, r1, lsl #23
   19a90:	adc	r2, r2, r2
   19a94:	subcs	r0, r0, r1, lsl #23
   19a98:	cmp	r0, r1, lsl #22
   19a9c:	adc	r2, r2, r2
   19aa0:	subcs	r0, r0, r1, lsl #22
   19aa4:	cmp	r0, r1, lsl #21
   19aa8:	adc	r2, r2, r2
   19aac:	subcs	r0, r0, r1, lsl #21
   19ab0:	cmp	r0, r1, lsl #20
   19ab4:	adc	r2, r2, r2
   19ab8:	subcs	r0, r0, r1, lsl #20
   19abc:	cmp	r0, r1, lsl #19
   19ac0:	adc	r2, r2, r2
   19ac4:	subcs	r0, r0, r1, lsl #19
   19ac8:	cmp	r0, r1, lsl #18
   19acc:	adc	r2, r2, r2
   19ad0:	subcs	r0, r0, r1, lsl #18
   19ad4:	cmp	r0, r1, lsl #17
   19ad8:	adc	r2, r2, r2
   19adc:	subcs	r0, r0, r1, lsl #17
   19ae0:	cmp	r0, r1, lsl #16
   19ae4:	adc	r2, r2, r2
   19ae8:	subcs	r0, r0, r1, lsl #16
   19aec:	cmp	r0, r1, lsl #15
   19af0:	adc	r2, r2, r2
   19af4:	subcs	r0, r0, r1, lsl #15
   19af8:	cmp	r0, r1, lsl #14
   19afc:	adc	r2, r2, r2
   19b00:	subcs	r0, r0, r1, lsl #14
   19b04:	cmp	r0, r1, lsl #13
   19b08:	adc	r2, r2, r2
   19b0c:	subcs	r0, r0, r1, lsl #13
   19b10:	cmp	r0, r1, lsl #12
   19b14:	adc	r2, r2, r2
   19b18:	subcs	r0, r0, r1, lsl #12
   19b1c:	cmp	r0, r1, lsl #11
   19b20:	adc	r2, r2, r2
   19b24:	subcs	r0, r0, r1, lsl #11
   19b28:	cmp	r0, r1, lsl #10
   19b2c:	adc	r2, r2, r2
   19b30:	subcs	r0, r0, r1, lsl #10
   19b34:	cmp	r0, r1, lsl #9
   19b38:	adc	r2, r2, r2
   19b3c:	subcs	r0, r0, r1, lsl #9
   19b40:	cmp	r0, r1, lsl #8
   19b44:	adc	r2, r2, r2
   19b48:	subcs	r0, r0, r1, lsl #8
   19b4c:	cmp	r0, r1, lsl #7
   19b50:	adc	r2, r2, r2
   19b54:	subcs	r0, r0, r1, lsl #7
   19b58:	cmp	r0, r1, lsl #6
   19b5c:	adc	r2, r2, r2
   19b60:	subcs	r0, r0, r1, lsl #6
   19b64:	cmp	r0, r1, lsl #5
   19b68:	adc	r2, r2, r2
   19b6c:	subcs	r0, r0, r1, lsl #5
   19b70:	cmp	r0, r1, lsl #4
   19b74:	adc	r2, r2, r2
   19b78:	subcs	r0, r0, r1, lsl #4
   19b7c:	cmp	r0, r1, lsl #3
   19b80:	adc	r2, r2, r2
   19b84:	subcs	r0, r0, r1, lsl #3
   19b88:	cmp	r0, r1, lsl #2
   19b8c:	adc	r2, r2, r2
   19b90:	subcs	r0, r0, r1, lsl #2
   19b94:	cmp	r0, r1, lsl #1
   19b98:	adc	r2, r2, r2
   19b9c:	subcs	r0, r0, r1, lsl #1
   19ba0:	cmp	r0, r1
   19ba4:	adc	r2, r2, r2
   19ba8:	subcs	r0, r0, r1
   19bac:	mov	r0, r2
   19bb0:	bx	lr
   19bb4:	moveq	r0, #1
   19bb8:	movne	r0, #0
   19bbc:	bx	lr
   19bc0:	clz	r2, r1
   19bc4:	rsb	r2, r2, #31
   19bc8:	lsr	r0, r0, r2
   19bcc:	bx	lr
   19bd0:	cmp	r0, #0
   19bd4:	mvnne	r0, #0
   19bd8:	b	19c38 <fts_children@@Base+0x1b94>
   19bdc:	cmp	r1, #0
   19be0:	beq	19bd0 <fts_children@@Base+0x1b2c>
   19be4:	push	{r0, r1, lr}
   19be8:	bl	199f0 <fts_children@@Base+0x194c>
   19bec:	pop	{r1, r2, lr}
   19bf0:	mul	r3, r2, r0
   19bf4:	sub	r1, r1, r3
   19bf8:	bx	lr
   19bfc:	cmp	r3, #0
   19c00:	cmpeq	r2, #0
   19c04:	bne	19c1c <fts_children@@Base+0x1b78>
   19c08:	cmp	r1, #0
   19c0c:	cmpeq	r0, #0
   19c10:	mvnne	r1, #0
   19c14:	mvnne	r0, #0
   19c18:	b	19c38 <fts_children@@Base+0x1b94>
   19c1c:	sub	sp, sp, #8
   19c20:	push	{sp, lr}
   19c24:	bl	19c48 <fts_children@@Base+0x1ba4>
   19c28:	ldr	lr, [sp, #4]
   19c2c:	add	sp, sp, #8
   19c30:	pop	{r2, r3}
   19c34:	bx	lr
   19c38:	push	{r1, lr}
   19c3c:	mov	r0, #8
   19c40:	bl	11114 <raise@plt>
   19c44:	pop	{r1, pc}
   19c48:	cmp	r1, r3
   19c4c:	cmpeq	r0, r2
   19c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c54:	mov	r4, r0
   19c58:	movcc	r0, #0
   19c5c:	mov	r5, r1
   19c60:	ldr	lr, [sp, #36]	; 0x24
   19c64:	movcc	r1, r0
   19c68:	bcc	19d64 <fts_children@@Base+0x1cc0>
   19c6c:	cmp	r3, #0
   19c70:	clzeq	ip, r2
   19c74:	clzne	ip, r3
   19c78:	addeq	ip, ip, #32
   19c7c:	cmp	r5, #0
   19c80:	clzeq	r1, r4
   19c84:	addeq	r1, r1, #32
   19c88:	clzne	r1, r5
   19c8c:	sub	ip, ip, r1
   19c90:	sub	sl, ip, #32
   19c94:	lsl	r9, r3, ip
   19c98:	rsb	fp, ip, #32
   19c9c:	orr	r9, r9, r2, lsl sl
   19ca0:	orr	r9, r9, r2, lsr fp
   19ca4:	lsl	r8, r2, ip
   19ca8:	cmp	r5, r9
   19cac:	cmpeq	r4, r8
   19cb0:	movcc	r0, #0
   19cb4:	movcc	r1, r0
   19cb8:	bcc	19cd4 <fts_children@@Base+0x1c30>
   19cbc:	mov	r0, #1
   19cc0:	subs	r4, r4, r8
   19cc4:	lsl	r1, r0, sl
   19cc8:	orr	r1, r1, r0, lsr fp
   19ccc:	lsl	r0, r0, ip
   19cd0:	sbc	r5, r5, r9
   19cd4:	cmp	ip, #0
   19cd8:	beq	19d64 <fts_children@@Base+0x1cc0>
   19cdc:	lsr	r6, r8, #1
   19ce0:	orr	r6, r6, r9, lsl #31
   19ce4:	lsr	r7, r9, #1
   19ce8:	mov	r2, ip
   19cec:	b	19d10 <fts_children@@Base+0x1c6c>
   19cf0:	subs	r3, r4, r6
   19cf4:	sbc	r8, r5, r7
   19cf8:	adds	r3, r3, r3
   19cfc:	adc	r8, r8, r8
   19d00:	adds	r4, r3, #1
   19d04:	adc	r5, r8, #0
   19d08:	subs	r2, r2, #1
   19d0c:	beq	19d2c <fts_children@@Base+0x1c88>
   19d10:	cmp	r5, r7
   19d14:	cmpeq	r4, r6
   19d18:	bcs	19cf0 <fts_children@@Base+0x1c4c>
   19d1c:	adds	r4, r4, r4
   19d20:	adc	r5, r5, r5
   19d24:	subs	r2, r2, #1
   19d28:	bne	19d10 <fts_children@@Base+0x1c6c>
   19d2c:	lsr	r3, r4, ip
   19d30:	orr	r3, r3, r5, lsl fp
   19d34:	lsr	r2, r5, ip
   19d38:	orr	r3, r3, r5, lsr sl
   19d3c:	adds	r0, r0, r4
   19d40:	mov	r4, r3
   19d44:	lsl	r3, r2, ip
   19d48:	orr	r3, r3, r4, lsl sl
   19d4c:	lsl	ip, r4, ip
   19d50:	orr	r3, r3, r4, lsr fp
   19d54:	adc	r1, r1, r5
   19d58:	subs	r0, r0, ip
   19d5c:	mov	r5, r2
   19d60:	sbc	r1, r1, r3
   19d64:	cmp	lr, #0
   19d68:	strdne	r4, [lr]
   19d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d74:	mov	r7, r0
   19d78:	ldr	r6, [pc, #72]	; 19dc8 <fts_children@@Base+0x1d24>
   19d7c:	ldr	r5, [pc, #72]	; 19dcc <fts_children@@Base+0x1d28>
   19d80:	add	r6, pc, r6
   19d84:	add	r5, pc, r5
   19d88:	sub	r6, r6, r5
   19d8c:	mov	r8, r1
   19d90:	mov	r9, r2
   19d94:	bl	110c4 <fstatfs64@plt-0x20>
   19d98:	asrs	r6, r6, #2
   19d9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19da0:	mov	r4, #0
   19da4:	add	r4, r4, #1
   19da8:	ldr	r3, [r5], #4
   19dac:	mov	r2, r9
   19db0:	mov	r1, r8
   19db4:	mov	r0, r7
   19db8:	blx	r3
   19dbc:	cmp	r6, r4
   19dc0:	bne	19da4 <fts_children@@Base+0x1d00>
   19dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19dc8:	andeq	r2, r1, ip, ror r1
   19dcc:	andeq	r2, r1, r4, ror r1
   19dd0:	bx	lr
   19dd4:	ldr	r3, [pc, #12]	; 19de8 <fts_children@@Base+0x1d44>
   19dd8:	mov	r1, #0
   19ddc:	add	r3, pc, r3
   19de0:	ldr	r2, [r3]
   19de4:	b	112f4 <__cxa_atexit@plt>
   19de8:	andeq	r2, r1, ip, asr #6

Disassembly of section .fini:

00019dec <.fini>:
   19dec:	push	{r3, lr}
   19df0:	pop	{r3, pc}
