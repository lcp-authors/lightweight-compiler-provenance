
raspbian-preinstalled/cvt:     file format elf32-littlearm


Disassembly of section .init:

00010784 <.init>:
   10784:	push	{r3, lr}
   10788:	bl	11158 <abort@plt+0x8ac>
   1078c:	pop	{r3, pc}

Disassembly of section .plt:

00010790 <calloc@plt-0x14>:
   10790:	push	{lr}		; (str lr, [sp, #-4]!)
   10794:	ldr	lr, [pc, #4]	; 107a0 <calloc@plt-0x4>
   10798:	add	lr, pc, lr
   1079c:	ldr	pc, [lr, #8]!
   107a0:	andeq	r2, r1, r0, ror #16

000107a4 <calloc@plt>:
   107a4:	add	ip, pc, #0, 12
   107a8:	add	ip, ip, #73728	; 0x12000
   107ac:	ldr	pc, [ip, #2144]!	; 0x860

000107b0 <raise@plt>:
   107b0:	add	ip, pc, #0, 12
   107b4:	add	ip, ip, #73728	; 0x12000
   107b8:	ldr	pc, [ip, #2136]!	; 0x858

000107bc <strcmp@plt>:
   107bc:	add	ip, pc, #0, 12
   107c0:	add	ip, ip, #73728	; 0x12000
   107c4:	ldr	pc, [ip, #2128]!	; 0x850

000107c8 <strtol@plt>:
   107c8:	add	ip, pc, #0, 12
   107cc:	add	ip, ip, #73728	; 0x12000
   107d0:	ldr	pc, [ip, #2120]!	; 0x848

000107d4 <__vsnprintf_chk@plt>:
   107d4:	add	ip, pc, #0, 12
   107d8:	add	ip, ip, #73728	; 0x12000
   107dc:	ldr	pc, [ip, #2112]!	; 0x840

000107e0 <__stack_chk_fail@plt>:
   107e0:	add	ip, pc, #0, 12
   107e4:	add	ip, ip, #73728	; 0x12000
   107e8:	ldr	pc, [ip, #2104]!	; 0x838

000107ec <perror@plt>:
   107ec:	add	ip, pc, #0, 12
   107f0:	add	ip, ip, #73728	; 0x12000
   107f4:	ldr	pc, [ip, #2096]!	; 0x830

000107f8 <fwrite@plt>:
   107f8:	add	ip, pc, #0, 12
   107fc:	add	ip, ip, #73728	; 0x12000
   10800:	ldr	pc, [ip, #2088]!	; 0x828

00010804 <floor@plt>:
   10804:	add	ip, pc, #0, 12
   10808:	add	ip, ip, #73728	; 0x12000
   1080c:	ldr	pc, [ip, #2080]!	; 0x820

00010810 <malloc@plt>:
   10810:	add	ip, pc, #0, 12
   10814:	add	ip, ip, #73728	; 0x12000
   10818:	ldr	pc, [ip, #2072]!	; 0x818

0001081c <__libc_start_main@plt>:
   1081c:	add	ip, pc, #0, 12
   10820:	add	ip, ip, #73728	; 0x12000
   10824:	ldr	pc, [ip, #2064]!	; 0x810

00010828 <strerror@plt>:
   10828:	add	ip, pc, #0, 12
   1082c:	add	ip, ip, #73728	; 0x12000
   10830:	ldr	pc, [ip, #2056]!	; 0x808

00010834 <__vfprintf_chk@plt>:
   10834:	add	ip, pc, #0, 12
   10838:	add	ip, ip, #73728	; 0x12000
   1083c:	ldr	pc, [ip, #2048]!	; 0x800

00010840 <__gmon_start__@plt>:
   10840:	add	ip, pc, #0, 12
   10844:	add	ip, ip, #73728	; 0x12000
   10848:	ldr	pc, [ip, #2040]!	; 0x7f8

0001084c <exit@plt>:
   1084c:	add	ip, pc, #0, 12
   10850:	add	ip, ip, #73728	; 0x12000
   10854:	ldr	pc, [ip, #2032]!	; 0x7f0

00010858 <__errno_location@plt>:
   10858:	add	ip, pc, #0, 12
   1085c:	add	ip, ip, #73728	; 0x12000
   10860:	ldr	pc, [ip, #2024]!	; 0x7e8

00010864 <__vasprintf_chk@plt>:
   10864:	add	ip, pc, #0, 12
   10868:	add	ip, ip, #73728	; 0x12000
   1086c:	ldr	pc, [ip, #2016]!	; 0x7e0

00010870 <putchar@plt>:
   10870:	add	ip, pc, #0, 12
   10874:	add	ip, ip, #73728	; 0x12000
   10878:	ldr	pc, [ip, #2008]!	; 0x7d8

0001087c <__printf_chk@plt>:
   1087c:	add	ip, pc, #0, 12
   10880:	add	ip, ip, #73728	; 0x12000
   10884:	ldr	pc, [ip, #2000]!	; 0x7d0

00010888 <strtod@plt>:
   10888:	add	ip, pc, #0, 12
   1088c:	add	ip, ip, #73728	; 0x12000
   10890:	ldr	pc, [ip, #1992]!	; 0x7c8

00010894 <__fprintf_chk@plt>:
   10894:	add	ip, pc, #0, 12
   10898:	add	ip, ip, #73728	; 0x12000
   1089c:	ldr	pc, [ip, #1984]!	; 0x7c0

000108a0 <fputc@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #73728	; 0x12000
   108a8:	ldr	pc, [ip, #1976]!	; 0x7b8

000108ac <abort@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #73728	; 0x12000
   108b4:	ldr	pc, [ip, #1968]!	; 0x7b0

Disassembly of section .text:

000108b8 <.text>:
   108b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108bc:	vpush	{d8-d9}
   108c0:	sub	r3, r0, #3
   108c4:	cmp	r3, #4
   108c8:	sub	sp, sp, #52	; 0x34
   108cc:	str	r1, [sp, #44]	; 0x2c
   108d0:	bhi	10f74 <abort@plt+0x6c8>
   108d4:	vldr	s16, [pc, #284]	; 109f8 <abort@plt+0x14c>
   108d8:	mov	fp, #0
   108dc:	ldr	r8, [pc, #280]	; 109fc <abort@plt+0x150>
   108e0:	ldr	sl, [pc, #280]	; 10a00 <abort@plt+0x154>
   108e4:	ldr	r6, [sp, #44]	; 0x2c
   108e8:	mov	r7, r0
   108ec:	mov	r9, fp
   108f0:	mov	r4, #1
   108f4:	str	fp, [sp, #40]	; 0x28
   108f8:	str	fp, [sp, #36]	; 0x24
   108fc:	str	fp, [sp, #32]
   10900:	ldr	r5, [r6, #4]!
   10904:	mov	r1, r8
   10908:	mov	r0, r5
   1090c:	bl	107bc <strcmp@plt>
   10910:	cmp	r0, #0
   10914:	beq	10a20 <abort@plt+0x174>
   10918:	mov	r1, sl
   1091c:	mov	r0, r5
   10920:	bl	107bc <strcmp@plt>
   10924:	cmp	r0, #0
   10928:	beq	10a20 <abort@plt+0x174>
   1092c:	ldr	r1, [pc, #208]	; 10a04 <abort@plt+0x158>
   10930:	mov	r0, r5
   10934:	bl	107bc <strcmp@plt>
   10938:	cmp	r0, #0
   1093c:	beq	10ce4 <abort@plt+0x438>
   10940:	ldr	r1, [pc, #192]	; 10a08 <abort@plt+0x15c>
   10944:	mov	r0, r5
   10948:	bl	107bc <strcmp@plt>
   1094c:	cmp	r0, #0
   10950:	beq	10ce4 <abort@plt+0x438>
   10954:	ldr	r1, [pc, #176]	; 10a0c <abort@plt+0x160>
   10958:	mov	r0, r5
   1095c:	bl	107bc <strcmp@plt>
   10960:	cmp	r0, #0
   10964:	beq	10cec <abort@plt+0x440>
   10968:	ldr	r1, [pc, #160]	; 10a10 <abort@plt+0x164>
   1096c:	mov	r0, r5
   10970:	bl	107bc <strcmp@plt>
   10974:	cmp	r0, #0
   10978:	beq	10cec <abort@plt+0x440>
   1097c:	ldr	r1, [pc, #144]	; 10a14 <abort@plt+0x168>
   10980:	mov	r0, r5
   10984:	bl	107bc <strcmp@plt>
   10988:	cmp	r0, #0
   1098c:	beq	10f60 <abort@plt+0x6b4>
   10990:	ldr	r1, [pc, #128]	; 10a18 <abort@plt+0x16c>
   10994:	mov	r0, r5
   10998:	bl	107bc <strcmp@plt>
   1099c:	cmp	r0, #0
   109a0:	beq	10f60 <abort@plt+0x6b4>
   109a4:	ldr	r3, [sp, #32]
   109a8:	cmp	r3, #0
   109ac:	beq	10f84 <abort@plt+0x6d8>
   109b0:	ldr	r3, [sp, #36]	; 0x24
   109b4:	cmp	r3, #0
   109b8:	beq	1107c <abort@plt+0x7d0>
   109bc:	vcmp.f32	s16, #0.0
   109c0:	vmrs	APSR_nzcv, fpscr
   109c4:	bne	109e4 <abort@plt+0x138>
   109c8:	mov	r0, r5
   109cc:	mov	r1, #0
   109d0:	bl	10888 <strtod@plt>
   109d4:	vcvt.f32.f64	s16, d0
   109d8:	vcmp.f32	s16, #0.0
   109dc:	vmrs	APSR_nzcv, fpscr
   109e0:	bne	10a24 <abort@plt+0x178>
   109e4:	ldr	r3, [sp, #44]	; 0x2c
   109e8:	ldr	r0, [r3]
   109ec:	bl	1120c <abort@plt+0x960>
   109f0:	mov	r0, #1
   109f4:	b	10cd8 <abort@plt+0x42c>
   109f8:	andeq	r0, r0, r0
   109fc:	strdeq	r1, [r1], -ip
   10a00:	andeq	r2, r1, r0
   10a04:	andeq	r2, r1, ip
   10a08:	andeq	r2, r1, r0, lsl r0
   10a0c:	andeq	r2, r1, r0, lsr #32
   10a10:	andeq	r2, r1, r4, lsr #32
   10a14:	andeq	r2, r1, r0, lsr r0
   10a18:	andeq	r2, r1, r4, lsr r0
   10a1c:	rsbsmi	r0, r0, #0
   10a20:	mov	r9, #1
   10a24:	add	r4, r4, #1
   10a28:	cmp	r7, r4
   10a2c:	bne	10900 <abort@plt+0x54>
   10a30:	ldr	r3, [sp, #32]
   10a34:	ldr	r2, [sp, #36]	; 0x24
   10a38:	cmp	r2, #0
   10a3c:	cmpne	r3, #0
   10a40:	beq	10f60 <abort@plt+0x6b4>
   10a44:	vcmp.f32	s16, #0.0
   10a48:	ldr	r3, [sp, #32]
   10a4c:	vmrs	APSR_nzcv, fpscr
   10a50:	vldreq	s16, [pc, #-60]	; 10a1c <abort@plt+0x170>
   10a54:	tst	r3, #7
   10a58:	bicne	r3, r3, #7
   10a5c:	addne	r3, r3, #8
   10a60:	strne	r3, [sp, #32]
   10a64:	cmp	r9, #0
   10a68:	beq	10a8c <abort@plt+0x1e0>
   10a6c:	vcvt.f64.f32	d6, s16
   10a70:	vldr	d7, [pc, #800]	; 10d98 <abort@plt+0x4ec>
   10a74:	vdiv.f64	d9, d6, d7
   10a78:	vmov.f64	d0, d9
   10a7c:	bl	10804 <floor@plt>
   10a80:	vcmp.f64	d9, d0
   10a84:	vmrs	APSR_nzcv, fpscr
   10a88:	bne	10f48 <abort@plt+0x69c>
   10a8c:	ldr	r4, [sp, #36]	; 0x24
   10a90:	mov	r1, #3
   10a94:	mov	r0, r4
   10a98:	bl	11d6c <abort@plt+0x14c0>
   10a9c:	cmp	r1, #0
   10aa0:	beq	10cf8 <abort@plt+0x44c>
   10aa4:	ldr	r5, [sp, #36]	; 0x24
   10aa8:	mov	r1, #9
   10aac:	mov	r0, r5
   10ab0:	bl	11d6c <abort@plt+0x14c0>
   10ab4:	subs	r4, r1, #0
   10ab8:	bne	10adc <abort@plt+0x230>
   10abc:	ldr	r0, [pc, #756]	; 10db8 <abort@plt+0x50c>
   10ac0:	lsl	r3, r5, #4
   10ac4:	ldr	r2, [sp, #32]
   10ac8:	smull	r0, r1, r3, r0
   10acc:	asr	r3, r3, #31
   10ad0:	rsb	r3, r3, r1, asr #1
   10ad4:	cmp	r2, r3
   10ad8:	beq	10d14 <abort@plt+0x468>
   10adc:	ldr	r5, [sp, #36]	; 0x24
   10ae0:	mov	r1, #10
   10ae4:	mov	r0, r5
   10ae8:	bl	11d6c <abort@plt+0x14c0>
   10aec:	cmp	r1, #0
   10af0:	bne	10b14 <abort@plt+0x268>
   10af4:	ldr	r0, [pc, #704]	; 10dbc <abort@plt+0x510>
   10af8:	lsl	r3, r5, #4
   10afc:	ldr	r2, [sp, #32]
   10b00:	smull	r0, r1, r3, r0
   10b04:	asr	r3, r3, #31
   10b08:	rsb	r3, r3, r1, asr #2
   10b0c:	cmp	r2, r3
   10b10:	beq	10d14 <abort@plt+0x468>
   10b14:	ldr	r3, [sp, #36]	; 0x24
   10b18:	tst	r3, #3
   10b1c:	bne	10b3c <abort@plt+0x290>
   10b20:	add	r3, r3, r3, lsl #2
   10b24:	add	r2, r3, #3
   10b28:	cmp	r3, #0
   10b2c:	movlt	r3, r2
   10b30:	ldr	r2, [sp, #32]
   10b34:	cmp	r2, r3, asr #2
   10b38:	beq	10d14 <abort@plt+0x468>
   10b3c:	cmp	r4, #0
   10b40:	bne	10b68 <abort@plt+0x2bc>
   10b44:	ldr	r3, [sp, #36]	; 0x24
   10b48:	ldr	r0, [pc, #616]	; 10db8 <abort@plt+0x50c>
   10b4c:	ldr	r2, [sp, #32]
   10b50:	rsb	r3, r3, r3, lsl #4
   10b54:	smull	r0, r1, r3, r0
   10b58:	asr	r3, r3, #31
   10b5c:	rsb	r3, r3, r1, asr #1
   10b60:	cmp	r2, r3
   10b64:	beq	10d14 <abort@plt+0x468>
   10b68:	ldr	r3, [sp, #40]	; 0x28
   10b6c:	cmp	r3, #0
   10b70:	bne	11000 <abort@plt+0x754>
   10b74:	vldr	s14, [pc, #556]	; 10da8 <abort@plt+0x4fc>
   10b78:	vldr	s15, [pc, #556]	; 10dac <abort@plt+0x500>
   10b7c:	vcmp.f32	s16, s14
   10b80:	vmrs	APSR_nzcv, fpscr
   10b84:	vcmp.f32	s16, s15
   10b88:	moveq	r3, #0
   10b8c:	movne	r3, #1
   10b90:	vmrs	APSR_nzcv, fpscr
   10b94:	moveq	r3, #0
   10b98:	cmp	r3, #0
   10b9c:	bne	10fd0 <abort@plt+0x724>
   10ba0:	mov	r3, fp
   10ba4:	mov	r2, r9
   10ba8:	vmov.f32	s0, s16
   10bac:	ldrd	r0, [sp, #32]
   10bb0:	bl	11380 <abort@plt+0xad4>
   10bb4:	ldr	r1, [pc, #548]	; 10de0 <abort@plt+0x534>
   10bb8:	vldr	s14, [r0, #152]	; 0x98
   10bbc:	mov	r4, r0
   10bc0:	mov	r0, #1
   10bc4:	vcvt.f64.f32	d7, s14
   10bc8:	vstr	d7, [sp]
   10bcc:	ldr	r3, [r4, #44]	; 0x2c
   10bd0:	ldr	r2, [r4, #24]
   10bd4:	bl	1087c <__printf_chk@plt>
   10bd8:	ldr	r1, [pc, #480]	; 10dc0 <abort@plt+0x514>
   10bdc:	mov	r0, #1
   10be0:	bl	1087c <__printf_chk@plt>
   10be4:	vldr	s15, [r4, #148]	; 0x94
   10be8:	ldr	r1, [pc, #468]	; 10dc4 <abort@plt+0x518>
   10bec:	mov	r0, #1
   10bf0:	vcvt.f64.f32	d7, s15
   10bf4:	vmov	r2, r3, d7
   10bf8:	bl	1087c <__printf_chk@plt>
   10bfc:	vldr	s15, [r4, #20]
   10c00:	vldr	d6, [pc, #408]	; 10da0 <abort@plt+0x4f4>
   10c04:	ldr	r1, [pc, #444]	; 10dc8 <abort@plt+0x51c>
   10c08:	mov	r0, #1
   10c0c:	vcvt.f32.s32	s14, s15
   10c10:	vcvt.f64.f32	d7, s14
   10c14:	vdiv.f64	d7, d7, d6
   10c18:	vmov	r2, r3, d7
   10c1c:	bl	1087c <__printf_chk@plt>
   10c20:	mov	r0, #10
   10c24:	bl	10870 <putchar@plt>
   10c28:	cmp	r9, #0
   10c2c:	beq	10f2c <abort@plt+0x680>
   10c30:	ldrd	r2, [sp, #32]
   10c34:	ldr	r1, [pc, #400]	; 10dcc <abort@plt+0x520>
   10c38:	mov	r0, #1
   10c3c:	bl	1087c <__printf_chk@plt>
   10c40:	vldr	s14, [r4, #20]
   10c44:	vldr	d6, [pc, #340]	; 10da0 <abort@plt+0x4f4>
   10c48:	ldr	r3, [r4, #56]	; 0x38
   10c4c:	ldr	r1, [pc, #380]	; 10dd0 <abort@plt+0x524>
   10c50:	vcvt.f64.s32	d7, s14
   10c54:	str	r3, [sp, #28]
   10c58:	ldr	r3, [r4, #52]	; 0x34
   10c5c:	str	r3, [sp, #24]
   10c60:	ldr	r3, [r4, #48]	; 0x30
   10c64:	str	r3, [sp, #20]
   10c68:	vdiv.f64	d7, d7, d6
   10c6c:	ldr	r3, [r4, #44]	; 0x2c
   10c70:	str	r3, [sp, #16]
   10c74:	ldr	r0, [r4, #36]	; 0x24
   10c78:	str	r0, [sp, #12]
   10c7c:	ldr	ip, [r4, #32]
   10c80:	mov	r0, #1
   10c84:	str	ip, [sp, #8]
   10c88:	ldr	ip, [r4, #28]
   10c8c:	str	ip, [sp, #4]
   10c90:	ldr	ip, [r4, #24]
   10c94:	str	ip, [sp]
   10c98:	vmov	r2, r3, d7
   10c9c:	bl	1087c <__printf_chk@plt>
   10ca0:	ldr	r3, [r4, #64]	; 0x40
   10ca4:	tst	r3, #16
   10ca8:	bne	11040 <abort@plt+0x794>
   10cac:	tst	r3, #1
   10cb0:	bne	11068 <abort@plt+0x7bc>
   10cb4:	tst	r3, #2
   10cb8:	bne	11054 <abort@plt+0x7a8>
   10cbc:	tst	r3, #4
   10cc0:	bne	1102c <abort@plt+0x780>
   10cc4:	tst	r3, #8
   10cc8:	bne	1101c <abort@plt+0x770>
   10ccc:	mov	r0, #10
   10cd0:	bl	10870 <putchar@plt>
   10cd4:	mov	r0, #0
   10cd8:	add	sp, sp, #52	; 0x34
   10cdc:	vpop	{d8-d9}
   10ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ce4:	mov	fp, #1
   10ce8:	b	10a24 <abort@plt+0x178>
   10cec:	mov	r3, #1
   10cf0:	str	r3, [sp, #40]	; 0x28
   10cf4:	b	10a24 <abort@plt+0x178>
   10cf8:	ldr	r0, [pc, #212]	; 10dd4 <abort@plt+0x528>
   10cfc:	lsl	r3, r4, #2
   10d00:	ldr	r2, [sp, #32]
   10d04:	smull	r0, r1, r3, r0
   10d08:	sub	r3, r1, r3, asr #31
   10d0c:	cmp	r2, r3
   10d10:	bne	10aa4 <abort@plt+0x1f8>
   10d14:	vldr	s14, [pc, #144]	; 10dac <abort@plt+0x500>
   10d18:	vldr	s15, [pc, #136]	; 10da8 <abort@plt+0x4fc>
   10d1c:	vcmp.f32	s16, s14
   10d20:	vmrs	APSR_nzcv, fpscr
   10d24:	vcmp.f32	s16, s15
   10d28:	moveq	r3, #0
   10d2c:	movne	r3, #1
   10d30:	vmrs	APSR_nzcv, fpscr
   10d34:	moveq	r3, #0
   10d38:	cmp	r3, #0
   10d3c:	beq	10de4 <abort@plt+0x538>
   10d40:	vldr	s14, [pc, #104]	; 10db0 <abort@plt+0x504>
   10d44:	vldr	s15, [pc, #104]	; 10db4 <abort@plt+0x508>
   10d48:	vcmp.f32	s16, s14
   10d4c:	vmrs	APSR_nzcv, fpscr
   10d50:	vcmp.f32	s16, s15
   10d54:	moveq	r3, #0
   10d58:	movne	r3, #1
   10d5c:	vmrs	APSR_nzcv, fpscr
   10d60:	moveq	r3, #0
   10d64:	cmp	r3, #0
   10d68:	beq	10de4 <abort@plt+0x538>
   10d6c:	ldr	r3, [sp, #40]	; 0x28
   10d70:	cmp	r3, #0
   10d74:	beq	10ba0 <abort@plt+0x2f4>
   10d78:	ldr	r3, [pc, #88]	; 10dd8 <abort@plt+0x52c>
   10d7c:	mov	r2, #64	; 0x40
   10d80:	mov	r1, #1
   10d84:	ldr	r3, [r3]
   10d88:	ldr	r0, [pc, #76]	; 10ddc <abort@plt+0x530>
   10d8c:	bl	107f8 <fwrite@plt>
   10d90:	b	10ba0 <abort@plt+0x2f4>
   10d94:	nop			; (mov r0, r0)
   10d98:	andeq	r0, r0, r0
   10d9c:	submi	r0, lr, r0
   10da0:	andeq	r0, r0, r0
   10da4:	addmi	r4, pc, r0
   10da8:	rsbsmi	r0, r0, #0
   10dac:	submi	r0, r8, #0
   10db0:	adcmi	r0, sl, #0
   10db4:	addsmi	r0, r6, #0
   10db8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   10dbc:	strbtvs	r6, [r6], -r7, ror #12
   10dc0:	andeq	r2, r1, r4, lsl #2
   10dc4:	andeq	r2, r1, ip, lsl #2
   10dc8:	andeq	r2, r1, r0, lsr #2
   10dcc:	andeq	r2, r1, r0, lsr r1
   10dd0:	andeq	r2, r1, ip, asr r1
   10dd4:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   10dd8:	andeq	r3, r2, r8, ror r0
   10ddc:	strheq	r2, [r1], -r0
   10de0:	andeq	r2, r1, r8, lsr #3
   10de4:	vmov.f32	s0, s16
   10de8:	mov	r3, fp
   10dec:	mov	r2, r9
   10df0:	ldrd	r0, [sp, #32]
   10df4:	bl	11380 <abort@plt+0xad4>
   10df8:	ldr	r1, [pc, #-32]	; 10de0 <abort@plt+0x534>
   10dfc:	vldr	s14, [r0, #152]	; 0x98
   10e00:	mov	r4, r0
   10e04:	mov	r0, #1
   10e08:	vcvt.f64.f32	d7, s14
   10e0c:	vstr	d7, [sp]
   10e10:	ldr	r3, [r4, #44]	; 0x2c
   10e14:	ldr	r2, [r4, #24]
   10e18:	bl	1087c <__printf_chk@plt>
   10e1c:	vldr	s15, [r4, #24]
   10e20:	vldr	d6, [pc, #680]	; 110d0 <abort@plt+0x824>
   10e24:	ldr	r1, [pc, #692]	; 110e0 <abort@plt+0x834>
   10e28:	mov	r0, #1
   10e2c:	vcvt.f32.s32	s14, s15
   10e30:	vldr	s15, [r4, #44]	; 0x2c
   10e34:	vcvt.f32.s32	s15, s15
   10e38:	vmul.f32	s14, s14, s15
   10e3c:	vcvt.f64.f32	d7, s14
   10e40:	vdiv.f64	d7, d7, d6
   10e44:	vmov	r2, r3, d7
   10e48:	bl	1087c <__printf_chk@plt>
   10e4c:	ldr	r5, [r4, #44]	; 0x2c
   10e50:	mov	r1, #3
   10e54:	mov	r0, r5
   10e58:	bl	11d6c <abort@plt+0x14c0>
   10e5c:	cmp	r1, #0
   10e60:	bne	10e80 <abort@plt+0x5d4>
   10e64:	ldr	r2, [pc, #632]	; 110e4 <abort@plt+0x838>
   10e68:	lsl	r1, r5, #2
   10e6c:	ldr	r0, [r4, #24]
   10e70:	smull	r2, r3, r1, r2
   10e74:	sub	r1, r3, r1, asr #31
   10e78:	cmp	r1, r0
   10e7c:	beq	110ac <abort@plt+0x800>
   10e80:	mov	r1, #9
   10e84:	mov	r0, r5
   10e88:	bl	11d6c <abort@plt+0x14c0>
   10e8c:	subs	r6, r1, #0
   10e90:	bne	10eb4 <abort@plt+0x608>
   10e94:	ldr	r2, [pc, #588]	; 110e8 <abort@plt+0x83c>
   10e98:	lsl	r1, r5, #4
   10e9c:	ldr	r0, [r4, #24]
   10ea0:	smull	r2, r3, r1, r2
   10ea4:	asr	r1, r1, #31
   10ea8:	rsb	r3, r1, r3, asr #1
   10eac:	cmp	r3, r0
   10eb0:	beq	110b8 <abort@plt+0x80c>
   10eb4:	mov	r1, #10
   10eb8:	mov	r0, r5
   10ebc:	bl	11d6c <abort@plt+0x14c0>
   10ec0:	cmp	r1, #0
   10ec4:	beq	10fa4 <abort@plt+0x6f8>
   10ec8:	tst	r5, #3
   10ecc:	bne	10eec <abort@plt+0x640>
   10ed0:	add	r3, r5, r5, lsl #2
   10ed4:	add	r2, r3, #3
   10ed8:	cmp	r3, #0
   10edc:	movlt	r3, r2
   10ee0:	ldr	r2, [r4, #24]
   10ee4:	cmp	r2, r3, asr #2
   10ee8:	beq	110c4 <abort@plt+0x818>
   10eec:	cmp	r6, #0
   10ef0:	bne	10f14 <abort@plt+0x668>
   10ef4:	ldr	r2, [pc, #492]	; 110e8 <abort@plt+0x83c>
   10ef8:	rsb	r5, r5, r5, lsl #4
   10efc:	ldr	r1, [r4, #24]
   10f00:	smull	r2, r3, r5, r2
   10f04:	asr	r5, r5, #31
   10f08:	rsb	r3, r5, r3, asr #1
   10f0c:	cmp	r3, r1
   10f10:	beq	110b8 <abort@plt+0x80c>
   10f14:	cmp	r9, #0
   10f18:	bne	1109c <abort@plt+0x7f0>
   10f1c:	ldr	r1, [pc, #456]	; 110ec <abort@plt+0x840>
   10f20:	mov	r0, #1
   10f24:	bl	1087c <__printf_chk@plt>
   10f28:	b	10be4 <abort@plt+0x338>
   10f2c:	vcvt.f64.f32	d8, s16
   10f30:	ldrd	r2, [sp, #32]
   10f34:	ldr	r1, [pc, #436]	; 110f0 <abort@plt+0x844>
   10f38:	mov	r0, #1
   10f3c:	vstr	d8, [sp]
   10f40:	bl	1087c <__printf_chk@plt>
   10f44:	b	10c40 <abort@plt+0x394>
   10f48:	ldr	r3, [pc, #420]	; 110f4 <abort@plt+0x848>
   10f4c:	mov	r2, #70	; 0x46
   10f50:	mov	r1, #1
   10f54:	ldr	r3, [r3]
   10f58:	ldr	r0, [pc, #408]	; 110f8 <abort@plt+0x84c>
   10f5c:	bl	107f8 <fwrite@plt>
   10f60:	ldr	r3, [sp, #44]	; 0x2c
   10f64:	ldr	r0, [r3]
   10f68:	bl	1120c <abort@plt+0x960>
   10f6c:	mov	r0, #0
   10f70:	b	10cd8 <abort@plt+0x42c>
   10f74:	ldr	r0, [r1]
   10f78:	bl	1120c <abort@plt+0x960>
   10f7c:	mov	r0, #1
   10f80:	b	10cd8 <abort@plt+0x42c>
   10f84:	mov	r1, r3
   10f88:	mov	r0, r5
   10f8c:	mov	r2, #10
   10f90:	bl	107c8 <strtol@plt>
   10f94:	subs	r3, r0, #0
   10f98:	str	r3, [sp, #32]
   10f9c:	bne	10a24 <abort@plt+0x178>
   10fa0:	b	109e4 <abort@plt+0x138>
   10fa4:	ldr	r2, [pc, #336]	; 110fc <abort@plt+0x850>
   10fa8:	lsl	r1, r5, #4
   10fac:	ldr	r0, [r4, #24]
   10fb0:	smull	r2, r3, r1, r2
   10fb4:	asr	r1, r1, #31
   10fb8:	rsb	r3, r1, r3, asr #2
   10fbc:	cmp	r3, r0
   10fc0:	bne	10ec8 <abort@plt+0x61c>
   10fc4:	mov	r0, #65	; 0x41
   10fc8:	bl	10870 <putchar@plt>
   10fcc:	b	10f14 <abort@plt+0x668>
   10fd0:	vldr	s14, [pc, #256]	; 110d8 <abort@plt+0x82c>
   10fd4:	vldr	s15, [pc, #256]	; 110dc <abort@plt+0x830>
   10fd8:	vcmp.f32	s16, s14
   10fdc:	vmrs	APSR_nzcv, fpscr
   10fe0:	vcmp.f32	s16, s15
   10fe4:	moveq	r3, #0
   10fe8:	movne	r3, #1
   10fec:	vmrs	APSR_nzcv, fpscr
   10ff0:	moveq	r3, #0
   10ff4:	cmp	r3, #0
   10ff8:	bne	10d6c <abort@plt+0x4c0>
   10ffc:	b	10ba0 <abort@plt+0x2f4>
   11000:	ldr	r3, [pc, #236]	; 110f4 <abort@plt+0x848>
   11004:	mov	r2, #43	; 0x2b
   11008:	mov	r1, #1
   1100c:	ldr	r3, [r3]
   11010:	ldr	r0, [pc, #232]	; 11100 <abort@plt+0x854>
   11014:	bl	107f8 <fwrite@plt>
   11018:	b	10b74 <abort@plt+0x2c8>
   1101c:	ldr	r1, [pc, #224]	; 11104 <abort@plt+0x858>
   11020:	mov	r0, #1
   11024:	bl	1087c <__printf_chk@plt>
   11028:	b	10ccc <abort@plt+0x420>
   1102c:	ldr	r1, [pc, #212]	; 11108 <abort@plt+0x85c>
   11030:	mov	r0, #1
   11034:	bl	1087c <__printf_chk@plt>
   11038:	ldr	r3, [r4, #64]	; 0x40
   1103c:	b	10cc4 <abort@plt+0x418>
   11040:	ldr	r1, [pc, #196]	; 1110c <abort@plt+0x860>
   11044:	mov	r0, #1
   11048:	bl	1087c <__printf_chk@plt>
   1104c:	ldr	r3, [r4, #64]	; 0x40
   11050:	b	10cac <abort@plt+0x400>
   11054:	ldr	r1, [pc, #180]	; 11110 <abort@plt+0x864>
   11058:	mov	r0, #1
   1105c:	bl	1087c <__printf_chk@plt>
   11060:	ldr	r3, [r4, #64]	; 0x40
   11064:	b	10cbc <abort@plt+0x410>
   11068:	ldr	r1, [pc, #164]	; 11114 <abort@plt+0x868>
   1106c:	mov	r0, #1
   11070:	bl	1087c <__printf_chk@plt>
   11074:	ldr	r3, [r4, #64]	; 0x40
   11078:	b	10cb4 <abort@plt+0x408>
   1107c:	mov	r0, r5
   11080:	mov	r2, #10
   11084:	mov	r1, #0
   11088:	bl	107c8 <strtol@plt>
   1108c:	subs	r3, r0, #0
   11090:	str	r3, [sp, #36]	; 0x24
   11094:	bne	10a24 <abort@plt+0x178>
   11098:	b	109e4 <abort@plt+0x138>
   1109c:	ldr	r1, [pc, #116]	; 11118 <abort@plt+0x86c>
   110a0:	mov	r0, #1
   110a4:	bl	1087c <__printf_chk@plt>
   110a8:	b	10f1c <abort@plt+0x670>
   110ac:	mov	r0, #51	; 0x33
   110b0:	bl	10870 <putchar@plt>
   110b4:	b	10f14 <abort@plt+0x668>
   110b8:	mov	r0, #57	; 0x39
   110bc:	bl	10870 <putchar@plt>
   110c0:	b	10f14 <abort@plt+0x668>
   110c4:	mov	r0, #52	; 0x34
   110c8:	bl	10870 <putchar@plt>
   110cc:	b	10f14 <abort@plt+0x668>
   110d0:	andeq	r0, r0, r0
   110d4:	smlawbmi	lr, r0, r4, r8
   110d8:	addsmi	r0, r6, #0
   110dc:	adcmi	r0, sl, #0
   110e0:	strdeq	r2, [r1], -r4
   110e4:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   110e8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   110ec:	andeq	r2, r1, r8, lsl #2
   110f0:	andeq	r2, r1, r4, asr #2
   110f4:	andeq	r3, r2, r8, ror r0
   110f8:	andeq	r2, r1, ip, lsr r0
   110fc:	strbtvs	r6, [r6], -r7, ror #12
   11100:	andeq	r2, r1, r4, lsl #1
   11104:	andeq	r2, r1, r0, lsr #3
   11108:	muleq	r1, r8, r1
   1110c:	andeq	r2, r1, ip, ror r1
   11110:	muleq	r1, r0, r1
   11114:	andeq	r2, r1, r8, lsl #3
   11118:	andeq	r2, r1, r0, lsl #2
   1111c:	mov	fp, #0
   11120:	mov	lr, #0
   11124:	pop	{r1}		; (ldr r1, [sp], #4)
   11128:	mov	r2, sp
   1112c:	push	{r2}		; (str r2, [sp, #-4]!)
   11130:	push	{r0}		; (str r0, [sp, #-4]!)
   11134:	ldr	ip, [pc, #16]	; 1114c <abort@plt+0x8a0>
   11138:	push	{ip}		; (str ip, [sp, #-4]!)
   1113c:	ldr	r0, [pc, #12]	; 11150 <abort@plt+0x8a4>
   11140:	ldr	r3, [pc, #12]	; 11154 <abort@plt+0x8a8>
   11144:	bl	1081c <__libc_start_main@plt>
   11148:	bl	108ac <abort@plt>
   1114c:	strdeq	r1, [r1], -ip
   11150:			; <UNDEFINED> instruction: 0x000108b8
   11154:	muleq	r1, ip, sp
   11158:	ldr	r3, [pc, #20]	; 11174 <abort@plt+0x8c8>
   1115c:	ldr	r2, [pc, #20]	; 11178 <abort@plt+0x8cc>
   11160:	add	r3, pc, r3
   11164:	ldr	r2, [r3, r2]
   11168:	cmp	r2, #0
   1116c:	bxeq	lr
   11170:	b	10840 <__gmon_start__@plt>
   11174:	muleq	r1, r8, lr
   11178:	andeq	r0, r0, r8, rrx
   1117c:	ldr	r0, [pc, #24]	; 1119c <abort@plt+0x8f0>
   11180:	ldr	r3, [pc, #24]	; 111a0 <abort@plt+0x8f4>
   11184:	cmp	r3, r0
   11188:	bxeq	lr
   1118c:	ldr	r3, [pc, #16]	; 111a4 <abort@plt+0x8f8>
   11190:	cmp	r3, #0
   11194:	bxeq	lr
   11198:	bx	r3
   1119c:	andeq	r3, r2, r4, ror r0
   111a0:	andeq	r3, r2, r4, ror r0
   111a4:	andeq	r0, r0, r0
   111a8:	ldr	r0, [pc, #36]	; 111d4 <abort@plt+0x928>
   111ac:	ldr	r1, [pc, #36]	; 111d8 <abort@plt+0x92c>
   111b0:	sub	r1, r1, r0
   111b4:	asr	r1, r1, #2
   111b8:	add	r1, r1, r1, lsr #31
   111bc:	asrs	r1, r1, #1
   111c0:	bxeq	lr
   111c4:	ldr	r3, [pc, #16]	; 111dc <abort@plt+0x930>
   111c8:	cmp	r3, #0
   111cc:	bxeq	lr
   111d0:	bx	r3
   111d4:	andeq	r3, r2, r4, ror r0
   111d8:	andeq	r3, r2, r4, ror r0
   111dc:	andeq	r0, r0, r0
   111e0:	push	{r4, lr}
   111e4:	ldr	r4, [pc, #24]	; 11204 <abort@plt+0x958>
   111e8:	ldrb	r3, [r4]
   111ec:	cmp	r3, #0
   111f0:	popne	{r4, pc}
   111f4:	bl	1117c <abort@plt+0x8d0>
   111f8:	mov	r3, #1
   111fc:	strb	r3, [r4]
   11200:	pop	{r4, pc}
   11204:	andeq	r3, r2, ip, ror r0
   11208:	b	111a8 <abort@plt+0x8fc>
   1120c:	push	{r4, r5, r6, lr}
   11210:	mov	r5, r0
   11214:	ldr	r4, [pc, #176]	; 112cc <abort@plt+0xa20>
   11218:	mov	r0, #10
   1121c:	ldr	r1, [r4]
   11220:	bl	108a0 <fputc@plt>
   11224:	mov	r3, r5
   11228:	ldr	r2, [pc, #160]	; 112d0 <abort@plt+0xa24>
   1122c:	ldr	r0, [r4]
   11230:	mov	r1, #1
   11234:	bl	10894 <__fprintf_chk@plt>
   11238:	ldr	r1, [r4]
   1123c:	mov	r0, #10
   11240:	bl	108a0 <fputc@plt>
   11244:	ldr	r3, [r4]
   11248:	mov	r2, #51	; 0x33
   1124c:	mov	r1, #1
   11250:	ldr	r0, [pc, #124]	; 112d4 <abort@plt+0xa28>
   11254:	bl	107f8 <fwrite@plt>
   11258:	ldr	r3, [r4]
   1125c:	mov	r2, #80	; 0x50
   11260:	mov	r1, #1
   11264:	ldr	r0, [pc, #108]	; 112d8 <abort@plt+0xa2c>
   11268:	bl	107f8 <fwrite@plt>
   1126c:	ldr	r3, [r4]
   11270:	mov	r2, #73	; 0x49
   11274:	mov	r1, #1
   11278:	ldr	r0, [pc, #92]	; 112dc <abort@plt+0xa30>
   1127c:	bl	107f8 <fwrite@plt>
   11280:	ldr	r3, [r4]
   11284:	mov	r2, #56	; 0x38
   11288:	mov	r1, #1
   1128c:	ldr	r0, [pc, #76]	; 112e0 <abort@plt+0xa34>
   11290:	bl	107f8 <fwrite@plt>
   11294:	ldr	r3, [r4]
   11298:	mov	r2, #56	; 0x38
   1129c:	mov	r1, #1
   112a0:	ldr	r0, [pc, #60]	; 112e4 <abort@plt+0xa38>
   112a4:	bl	107f8 <fwrite@plt>
   112a8:	ldr	r1, [r4]
   112ac:	mov	r0, #10
   112b0:	bl	108a0 <fputc@plt>
   112b4:	ldr	r3, [r4]
   112b8:	mov	r2, #73	; 0x49
   112bc:	mov	r1, #1
   112c0:	ldr	r0, [pc, #32]	; 112e8 <abort@plt+0xa3c>
   112c4:	pop	{r4, r5, r6, lr}
   112c8:	b	107f8 <fwrite@plt>
   112cc:	andeq	r3, r2, r8, ror r0
   112d0:	andeq	r1, r1, ip, lsl #28
   112d4:	andeq	r1, r1, r4, asr #28
   112d8:	andeq	r1, r1, r8, ror lr
   112dc:	andeq	r1, r1, ip, asr #29
   112e0:	andeq	r1, r1, r8, lsl pc
   112e4:	andeq	r1, r1, r4, asr pc
   112e8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   112ec:	push	{r0, r1, r2, r3}
   112f0:	mov	r1, #1
   112f4:	ldr	r2, [pc, #48]	; 1132c <abort@plt+0xa80>
   112f8:	ldr	r3, [pc, #48]	; 11330 <abort@plt+0xa84>
   112fc:	push	{lr}		; (str lr, [sp, #-4]!)
   11300:	sub	sp, sp, #12
   11304:	add	ip, sp, #20
   11308:	ldr	lr, [r2]
   1130c:	ldr	r0, [r3]
   11310:	ldr	r2, [sp, #16]
   11314:	mov	r3, ip
   11318:	str	lr, [sp, #4]
   1131c:	str	ip, [sp]
   11320:	bl	10834 <__vfprintf_chk@plt>
   11324:	mov	r0, #1
   11328:	bl	1084c <exit@plt>
   1132c:	andeq	r2, r2, r8, ror #29
   11330:	andeq	r3, r2, r8, ror r0
   11334:	push	{r4, lr}
   11338:	bl	10810 <malloc@plt>
   1133c:	cmp	r0, #0
   11340:	popne	{r4, pc}
   11344:	ldr	r0, [pc, #8]	; 11354 <abort@plt+0xaa8>
   11348:	bl	107ec <perror@plt>
   1134c:	mov	r0, #1
   11350:	bl	1084c <exit@plt>
   11354:	ldrdeq	r1, [r1], -ip
   11358:	push	{r4, lr}
   1135c:	bl	107a4 <calloc@plt>
   11360:	cmp	r0, #0
   11364:	popne	{r4, pc}
   11368:	ldr	r0, [pc, #8]	; 11378 <abort@plt+0xacc>
   1136c:	bl	107ec <perror@plt>
   11370:	mov	r0, #1
   11374:	bl	1084c <exit@plt>
   11378:	andeq	r1, r1, ip, ror #31
   1137c:	andeq	r0, r0, r0
   11380:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11384:	vpush	{d8}
   11388:	ldr	r8, [pc, #984]	; 11768 <abort@plt+0xebc>
   1138c:	mov	r6, r0
   11390:	mov	r5, r1
   11394:	sub	sp, sp, #8
   11398:	ldr	ip, [r8]
   1139c:	mov	r0, #1
   113a0:	mov	r1, #156	; 0x9c
   113a4:	vmov.f32	s16, s0
   113a8:	mov	r7, r3
   113ac:	mov	r9, r2
   113b0:	str	ip, [sp, #4]
   113b4:	bl	11358 <abort@plt+0xaac>
   113b8:	vcmp.f32	s16, #0.0
   113bc:	vldr	s15, [pc, #908]	; 11750 <abort@plt+0xea4>
   113c0:	vmrs	APSR_nzcv, fpscr
   113c4:	vmoveq.f32	s16, s15
   113c8:	rsbs	r3, r6, #0
   113cc:	and	r3, r3, #7
   113d0:	mov	r4, r0
   113d4:	and	r0, r6, #7
   113d8:	rsbpl	r0, r3, #0
   113dc:	cmp	r7, #0
   113e0:	sub	r0, r6, r0
   113e4:	beq	116e8 <abort@plt+0xe3c>
   113e8:	vadd.f32	s16, s16, s16
   113ec:	add	r3, r5, r5, lsr #31
   113f0:	vldr	s7, [pc, #860]	; 11754 <abort@plt+0xea8>
   113f4:	asr	r3, r3, #1
   113f8:	str	r0, [r4, #24]
   113fc:	str	r5, [r4, #44]	; 0x2c
   11400:	ldr	ip, [pc, #868]	; 1176c <abort@plt+0xec0>
   11404:	asr	r1, r5, #31
   11408:	smull	lr, r2, ip, r5
   1140c:	sub	r2, r2, r1
   11410:	add	r2, r2, r2, lsl #1
   11414:	cmp	r5, r2
   11418:	bne	11434 <abort@plt+0xb88>
   1141c:	lsl	r2, r5, #2
   11420:	smull	lr, ip, ip, r2
   11424:	sub	ip, ip, r2, asr #31
   11428:	cmp	ip, r6
   1142c:	moveq	lr, #4
   11430:	beq	114d0 <abort@plt+0xc24>
   11434:	ldr	lr, [pc, #820]	; 11770 <abort@plt+0xec4>
   11438:	smull	ip, r2, lr, r5
   1143c:	rsb	r2, r1, r2, asr #1
   11440:	add	r2, r2, r2, lsl #3
   11444:	subs	r2, r5, r2
   11448:	bne	11468 <abort@plt+0xbbc>
   1144c:	lsl	ip, r5, #4
   11450:	smull	sl, lr, lr, ip
   11454:	asr	ip, ip, #31
   11458:	rsb	ip, ip, lr, asr #1
   1145c:	cmp	ip, r6
   11460:	moveq	lr, #5
   11464:	beq	114d0 <abort@plt+0xc24>
   11468:	ldr	ip, [pc, #772]	; 11774 <abort@plt+0xec8>
   1146c:	smull	sl, lr, ip, r5
   11470:	rsb	r1, r1, lr, asr #2
   11474:	add	r1, r1, r1, lsl #2
   11478:	cmp	r5, r1, lsl #1
   1147c:	bne	1149c <abort@plt+0xbf0>
   11480:	lsl	r1, r5, #4
   11484:	smull	lr, ip, ip, r1
   11488:	asr	r1, r1, #31
   1148c:	rsb	r1, r1, ip, asr #2
   11490:	cmp	r1, r6
   11494:	moveq	lr, #6
   11498:	beq	114d0 <abort@plt+0xc24>
   1149c:	tst	r5, #3
   114a0:	beq	116fc <abort@plt+0xe50>
   114a4:	cmp	r2, #0
   114a8:	movne	lr, #10
   114ac:	bne	114d0 <abort@plt+0xc24>
   114b0:	ldr	lr, [pc, #696]	; 11770 <abort@plt+0xec4>
   114b4:	rsb	r2, r5, r5, lsl #4
   114b8:	smull	ip, r1, lr, r2
   114bc:	asr	lr, r2, #31
   114c0:	rsb	lr, lr, r1, asr #1
   114c4:	cmp	lr, r6
   114c8:	moveq	lr, #7
   114cc:	movne	lr, #10
   114d0:	vcvt.f64.f32	d8, s16
   114d4:	vldr	d6, [pc, #580]	; 11720 <abort@plt+0xe74>
   114d8:	cmp	r9, #0
   114dc:	vdiv.f64	d7, d6, d8
   114e0:	bne	11784 <abort@plt+0xed8>
   114e4:	add	r2, r3, #3
   114e8:	vldr	d2, [pc, #568]	; 11728 <abort@plt+0xe7c>
   114ec:	vmov	s13, r2
   114f0:	add	r1, lr, #1
   114f4:	vldr	d1, [pc, #564]	; 11730 <abort@plt+0xe84>
   114f8:	vsub.f64	d7, d7, d2
   114fc:	vcvt.f32.s32	s12, s13
   11500:	vldr	s6, [pc, #592]	; 11758 <abort@plt+0xeac>
   11504:	ldr	ip, [pc, #620]	; 11778 <abort@plt+0xecc>
   11508:	vcvt.f32.f64	s14, d7
   1150c:	vadd.f32	s12, s12, s7
   11510:	vdiv.f32	s8, s14, s12
   11514:	vldr	d6, [pc, #540]	; 11738 <abort@plt+0xe8c>
   11518:	vcvt.f64.f32	d5, s8
   1151c:	vdiv.f64	d7, d2, d5
   11520:	vcvt.s32.f64	s15, d7
   11524:	vldr	s14, [pc, #560]	; 1175c <abort@plt+0xeb0>
   11528:	vmul.f32	s8, s8, s14
   1152c:	vldr	s14, [pc, #556]	; 11760 <abort@plt+0xeb4>
   11530:	vmov	r2, s15
   11534:	cmp	r1, r2
   11538:	vcvt.f64.f32	d4, s8
   1153c:	addge	r2, lr, #3
   11540:	addlt	r2, r2, #1
   11544:	add	r3, r2, r3
   11548:	vmov	s15, r3
   1154c:	add	r3, r5, #3
   11550:	add	lr, r3, lr
   11554:	vdiv.f64	d2, d4, d1
   11558:	vcvt.f32.s32	s15, s15
   1155c:	str	r3, [r4, #48]	; 0x30
   11560:	str	lr, [r4, #52]	; 0x34
   11564:	vadd.f32	s15, s15, s7
   11568:	vadd.f32	s15, s15, s14
   1156c:	vcvt.s32.f32	s15, s15
   11570:	vmov	r1, s15
   11574:	vstr	s15, [r4, #56]	; 0x38
   11578:	vsub.f64	d7, d6, d2
   1157c:	vcvt.f32.f64	s14, d7
   11580:	vmov	s15, r0
   11584:	vcmpe.f32	s14, s6
   11588:	vmrs	APSR_nzcv, fpscr
   1158c:	vcvtpl.f64.f32	d6, s14
   11590:	vldrpl	d4, [pc, #424]	; 11740 <abort@plt+0xe94>
   11594:	vmovmi.f32	s14, s6
   11598:	vldrmi	d4, [pc, #424]	; 11748 <abort@plt+0xe9c>
   1159c:	vsubpl.f64	d4, d4, d6
   115a0:	vcvt.f32.s32	s12, s15
   115a4:	vmul.f32	s14, s12, s14
   115a8:	vcvt.f64.f32	d6, s14
   115ac:	vdiv.f64	d7, d6, d4
   115b0:	vcvt.s32.f64	s15, d7
   115b4:	vmov	r3, s15
   115b8:	rsbs	lr, r3, #0
   115bc:	and	lr, lr, #15
   115c0:	and	r2, r3, #15
   115c4:	rsbpl	r2, lr, #0
   115c8:	sub	r3, r3, r2
   115cc:	add	r2, r3, r0
   115d0:	add	r3, r3, r3, lsr #31
   115d4:	lsl	lr, r2, #3
   115d8:	add	r0, r0, r3, asr #1
   115dc:	smull	r3, ip, ip, lr
   115e0:	str	r0, [r4, #32]
   115e4:	asr	lr, lr, #31
   115e8:	sub	ip, lr, ip, asr #5
   115ec:	add	r0, ip, r0
   115f0:	rsbs	ip, r0, #0
   115f4:	and	ip, ip, #7
   115f8:	and	r3, r0, #7
   115fc:	rsbpl	r3, ip, #0
   11600:	rsb	r3, r3, #8
   11604:	add	r0, r3, r0
   11608:	str	r2, [r4, #36]	; 0x24
   1160c:	str	r0, [r4, #28]
   11610:	vmov	s15, r2
   11614:	vldr	d3, [pc, #276]	; 11730 <abort@plt+0xe84>
   11618:	mul	r3, r1, r2
   1161c:	vcvt.f64.s32	d4, s15
   11620:	vcvt.f32.s32	s5, s15
   11624:	vmov	s12, r3
   11628:	ldr	r0, [pc, #332]	; 1177c <abort@plt+0xed0>
   1162c:	cmp	r7, #0
   11630:	lslne	r1, r1, #1
   11634:	vcvt.f32.s32	s12, s12
   11638:	strne	r1, [r4, #56]	; 0x38
   1163c:	vmul.f64	d4, d4, d3
   11640:	ldr	r1, [pc, #312]	; 11780 <abort@plt+0xed4>
   11644:	vcvt.f64.f32	d6, s12
   11648:	vdiv.f64	d7, d4, d5
   1164c:	vcvt.s32.f64	s15, d7
   11650:	vmov	r3, s15
   11654:	smull	r0, r2, r0, r3
   11658:	asr	r3, r3, #31
   1165c:	rsb	r3, r3, r2, asr #4
   11660:	mov	r0, sp
   11664:	rsb	r2, r3, r3, lsl #5
   11668:	add	r3, r3, r2, lsl #2
   1166c:	mov	r2, r6
   11670:	lsl	r3, r3, #1
   11674:	str	r3, [r4, #20]
   11678:	vmov	s15, r3
   1167c:	mov	r3, r5
   11680:	vcvt.f32.s32	s15, s15
   11684:	vcvt.f64.f32	d5, s15
   11688:	vdiv.f32	s9, s15, s5
   1168c:	vmul.f64	d5, d5, d3
   11690:	vdiv.f64	d7, d5, d6
   11694:	vstr	s9, [r4, #148]	; 0x94
   11698:	vcvt.f32.f64	s14, d7
   1169c:	vstr	s14, [r4, #152]	; 0x98
   116a0:	bl	11910 <abort@plt+0x1064>
   116a4:	ldr	r3, [sp]
   116a8:	cmp	r9, #0
   116ac:	str	r3, [r4, #8]
   116b0:	ldr	r3, [r4, #64]	; 0x40
   116b4:	ldr	r2, [sp, #4]
   116b8:	orrne	r3, r3, #9
   116bc:	orreq	r3, r3, #6
   116c0:	cmp	r7, #0
   116c4:	orrne	r3, r3, #16
   116c8:	str	r3, [r4, #64]	; 0x40
   116cc:	ldr	r3, [r8]
   116d0:	mov	r0, r4
   116d4:	cmp	r2, r3
   116d8:	bne	11834 <abort@plt+0xf88>
   116dc:	add	sp, sp, #8
   116e0:	vpop	{d8}
   116e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   116e8:	str	r0, [r4, #24]
   116ec:	str	r5, [r4, #44]	; 0x2c
   116f0:	mov	r3, r5
   116f4:	vldr	s7, [pc, #104]	; 11764 <abort@plt+0xeb8>
   116f8:	b	11400 <abort@plt+0xb54>
   116fc:	add	r1, r5, r5, lsl #2
   11700:	cmp	r1, #0
   11704:	add	ip, r1, #3
   11708:	movlt	r1, ip
   1170c:	cmp	r6, r1, asr #2
   11710:	moveq	lr, #7
   11714:	bne	114a4 <abort@plt+0xbf8>
   11718:	b	114d0 <abort@plt+0xc24>
   1171c:	nop			; (mov r0, r0)
   11720:	andeq	r0, r0, r0
   11724:	smlawbmi	lr, r0, r4, r8
   11728:	andeq	r0, r0, r0
   1172c:	addmi	r3, r1, r0
   11730:	andeq	r0, r0, r0
   11734:	addmi	r4, pc, r0
   11738:	andeq	r0, r0, r0
   1173c:	eorsmi	r0, lr, r0
   11740:	andeq	r0, r0, r0
   11744:	subsmi	r0, r9, r0
   11748:	andeq	r0, r0, r0
   1174c:	subsmi	r0, r4, r0
   11750:	rsbsmi	r0, r0, #0
   11754:	svccc	0x00000000
   11758:	movmi	r0, r0
   1175c:	orrsmi	r0, r6, #0
   11760:	submi	r0, r0, r0
   11764:	andeq	r0, r0, r0
   11768:	andeq	r2, r2, r8, ror #29
   1176c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   11770:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   11774:	strbtvs	r6, [r6], -r7, ror #12
   11778:	mvnpl	r8, pc, lsl r5
   1177c:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   11780:			; <UNDEFINED> instruction: 0x000121bc
   11784:	vldr	d2, [pc, #172]	; 11838 <abort@plt+0xf8c>
   11788:	vmov	s13, r3
   1178c:	vldr	s9, [pc, #196]	; 11858 <abort@plt+0xfac>
   11790:	vldr	s11, [pc, #196]	; 1185c <abort@plt+0xfb0>
   11794:	vsub.f64	d7, d7, d2
   11798:	vcvt.f32.s32	s12, s13
   1179c:	add	r3, lr, #8
   117a0:	vldr	d2, [pc, #152]	; 11840 <abort@plt+0xf94>
   117a4:	vcvt.f32.f64	s14, d7
   117a8:	vmov	s15, r0
   117ac:	vdiv.f32	s10, s14, s12
   117b0:	vcvt.f64.s32	d7, s15
   117b4:	vadd.f32	s12, s12, s7
   117b8:	vldr	d3, [pc, #136]	; 11848 <abort@plt+0xf9c>
   117bc:	vdiv.f32	s13, s9, s10
   117c0:	vldr	d4, [pc, #136]	; 11850 <abort@plt+0xfa4>
   117c4:	vadd.f64	d4, d7, d4
   117c8:	vadd.f64	d7, d7, d2
   117cc:	vcvt.s32.f64	s8, d4
   117d0:	vcvt.s32.f64	s15, d7
   117d4:	vadd.f32	s13, s13, s11
   117d8:	vcvt.f64.f32	d5, s10
   117dc:	vstr	s8, [r4, #32]
   117e0:	vcvt.s32.f32	s13, s13
   117e4:	vmov	r2, s13
   117e8:	cmp	r3, r2
   117ec:	addge	r3, lr, #9
   117f0:	vmov	r2, s15
   117f4:	vmovge	s13, r3
   117f8:	add	r3, r5, #3
   117fc:	add	lr, r3, lr
   11800:	str	lr, [r4, #52]	; 0x34
   11804:	vcvt.f32.s32	s13, s13
   11808:	str	r3, [r4, #48]	; 0x30
   1180c:	str	r2, [r4, #36]	; 0x24
   11810:	vadd.f32	s13, s12, s13
   11814:	vcvt.s32.f32	s15, s13
   11818:	vmov	r1, s15
   1181c:	vcvt.f64.s32	d7, s8
   11820:	str	r1, [r4, #56]	; 0x38
   11824:	vsub.f64	d7, d7, d3
   11828:	vcvt.s32.f64	s14, d7
   1182c:	vstr	s14, [r4, #28]
   11830:	b	11610 <abort@plt+0xd64>
   11834:	bl	107e0 <__stack_chk_fail@plt>
   11838:	andeq	r0, r0, r0
   1183c:	rsbsmi	ip, ip, r0
   11840:	andeq	r0, r0, r0
   11844:	rsbmi	r0, r4, r0
   11848:	andeq	r0, r0, r0
   1184c:	submi	r0, r0, r0
   11850:	andeq	r0, r0, r0
   11854:	subsmi	r0, r4, r0
   11858:	mvnmi	r0, #0
   1185c:	svccc	0x00800000
   11860:	mov	r3, r2
   11864:	mov	r2, r1
   11868:	mov	r1, #1
   1186c:	b	10864 <__vasprintf_chk@plt>
   11870:	push	{r1, r2, r3}
   11874:	push	{r4, lr}
   11878:	sub	sp, sp, #12
   1187c:	ldr	r4, [pc, #64]	; 118c4 <abort@plt+0x1018>
   11880:	add	ip, sp, #24
   11884:	mov	r3, ip
   11888:	ldr	r1, [r4]
   1188c:	ldr	r2, [sp, #20]
   11890:	str	r1, [sp, #4]
   11894:	mov	r1, #1
   11898:	str	ip, [sp]
   1189c:	bl	10864 <__vasprintf_chk@plt>
   118a0:	ldr	r2, [sp, #4]
   118a4:	ldr	r3, [r4]
   118a8:	cmp	r2, r3
   118ac:	bne	118c0 <abort@plt+0x1014>
   118b0:	add	sp, sp, #12
   118b4:	pop	{r4, lr}
   118b8:	add	sp, sp, #12
   118bc:	bx	lr
   118c0:	bl	107e0 <__stack_chk_fail@plt>
   118c4:	andeq	r2, r2, r8, ror #29
   118c8:	push	{r4, lr}
   118cc:	mov	r3, r2
   118d0:	mov	r2, r1
   118d4:	mov	r1, #1
   118d8:	mov	r4, r0
   118dc:	bl	10864 <__vasprintf_chk@plt>
   118e0:	cmn	r0, #1
   118e4:	beq	118f4 <abort@plt+0x1048>
   118e8:	ldr	r3, [r4]
   118ec:	cmp	r3, #0
   118f0:	popne	{r4, pc}
   118f4:	bl	10858 <__errno_location@plt>
   118f8:	ldr	r0, [r0]
   118fc:	bl	10828 <strerror@plt>
   11900:	mov	r1, r0
   11904:	ldr	r0, [pc]	; 1190c <abort@plt+0x1060>
   11908:	bl	112ec <abort@plt+0xa40>
   1190c:	andeq	r2, r1, r4, asr #3
   11910:	push	{r1, r2, r3}
   11914:	push	{r4, lr}
   11918:	sub	sp, sp, #12
   1191c:	ldr	r4, [pc, #60]	; 11960 <abort@plt+0x10b4>
   11920:	add	r3, sp, #24
   11924:	mov	r2, r3
   11928:	ldr	ip, [r4]
   1192c:	ldr	r1, [sp, #20]
   11930:	str	r3, [sp]
   11934:	str	ip, [sp, #4]
   11938:	bl	118c8 <abort@plt+0x101c>
   1193c:	ldr	r2, [sp, #4]
   11940:	ldr	r3, [r4]
   11944:	cmp	r2, r3
   11948:	bne	1195c <abort@plt+0x10b0>
   1194c:	add	sp, sp, #12
   11950:	pop	{r4, lr}
   11954:	add	sp, sp, #12
   11958:	bx	lr
   1195c:	bl	107e0 <__stack_chk_fail@plt>
   11960:	andeq	r2, r2, r8, ror #29
   11964:	push	{r4, lr}
   11968:	subs	r4, r1, #0
   1196c:	sub	sp, sp, #8
   11970:	beq	11990 <abort@plt+0x10e4>
   11974:	strd	r2, [sp]
   11978:	mvn	r3, #0
   1197c:	mov	r2, #1
   11980:	bl	107d4 <__vsnprintf_chk@plt>
   11984:	cmp	r4, r0
   11988:	suble	r4, r4, #1
   1198c:	movgt	r4, r0
   11990:	mov	r0, r4
   11994:	add	sp, sp, #8
   11998:	pop	{r4, pc}
   1199c:	push	{r2, r3}
   119a0:	push	{r4, lr}
   119a4:	sub	sp, sp, #8
   119a8:	ldr	r4, [pc, #56]	; 119e8 <abort@plt+0x113c>
   119ac:	add	r3, sp, #20
   119b0:	ldr	r2, [sp, #16]
   119b4:	ldr	ip, [r4]
   119b8:	str	r3, [sp]
   119bc:	str	ip, [sp, #4]
   119c0:	bl	11964 <abort@plt+0x10b8>
   119c4:	ldr	r2, [sp, #4]
   119c8:	ldr	r3, [r4]
   119cc:	cmp	r2, r3
   119d0:	bne	119e4 <abort@plt+0x1138>
   119d4:	add	sp, sp, #8
   119d8:	pop	{r4, lr}
   119dc:	add	sp, sp, #8
   119e0:	bx	lr
   119e4:	bl	107e0 <__stack_chk_fail@plt>
   119e8:	andeq	r2, r2, r8, ror #29
   119ec:	push	{r4, lr}
   119f0:	sub	sp, sp, #8
   119f4:	ldr	r4, [pc, #64]	; 11a3c <abort@plt+0x1190>
   119f8:	mov	r3, r1
   119fc:	mov	r2, r0
   11a00:	ldr	ip, [r4]
   11a04:	mov	r1, #1
   11a08:	mov	r0, sp
   11a0c:	str	ip, [sp, #4]
   11a10:	bl	10864 <__vasprintf_chk@plt>
   11a14:	ldr	r2, [sp, #4]
   11a18:	ldr	r3, [r4]
   11a1c:	cmn	r0, #1
   11a20:	moveq	r0, #0
   11a24:	ldrne	r0, [sp]
   11a28:	cmp	r2, r3
   11a2c:	bne	11a38 <abort@plt+0x118c>
   11a30:	add	sp, sp, #8
   11a34:	pop	{r4, pc}
   11a38:	bl	107e0 <__stack_chk_fail@plt>
   11a3c:	andeq	r2, r2, r8, ror #29
   11a40:	push	{r0, r1, r2, r3}
   11a44:	mov	r1, #1
   11a48:	push	{r4, lr}
   11a4c:	sub	sp, sp, #16
   11a50:	ldr	r4, [pc, #76]	; 11aa4 <abort@plt+0x11f8>
   11a54:	add	ip, sp, #28
   11a58:	mov	r3, ip
   11a5c:	ldr	r0, [r4]
   11a60:	ldr	r2, [sp, #24]
   11a64:	str	r0, [sp, #12]
   11a68:	add	r0, sp, #4
   11a6c:	str	ip, [sp, #8]
   11a70:	bl	10864 <__vasprintf_chk@plt>
   11a74:	ldr	r2, [sp, #12]
   11a78:	ldr	r3, [r4]
   11a7c:	cmn	r0, #1
   11a80:	moveq	r0, #0
   11a84:	ldrne	r0, [sp, #4]
   11a88:	cmp	r2, r3
   11a8c:	bne	11aa0 <abort@plt+0x11f4>
   11a90:	add	sp, sp, #16
   11a94:	pop	{r4, lr}
   11a98:	add	sp, sp, #16
   11a9c:	bx	lr
   11aa0:	bl	107e0 <__stack_chk_fail@plt>
   11aa4:	andeq	r2, r2, r8, ror #29
   11aa8:	push	{r4, lr}
   11aac:	sub	sp, sp, #8
   11ab0:	ldr	r4, [pc, #52]	; 11aec <abort@plt+0x1240>
   11ab4:	mov	r2, r1
   11ab8:	mov	r1, r0
   11abc:	ldr	r3, [r4]
   11ac0:	mov	r0, sp
   11ac4:	str	r3, [sp, #4]
   11ac8:	bl	118c8 <abort@plt+0x101c>
   11acc:	ldr	r2, [sp, #4]
   11ad0:	ldr	r3, [r4]
   11ad4:	ldr	r0, [sp]
   11ad8:	cmp	r2, r3
   11adc:	bne	11ae8 <abort@plt+0x123c>
   11ae0:	add	sp, sp, #8
   11ae4:	pop	{r4, pc}
   11ae8:	bl	107e0 <__stack_chk_fail@plt>
   11aec:	andeq	r2, r2, r8, ror #29
   11af0:	push	{r0, r1, r2, r3}
   11af4:	push	{r4, lr}
   11af8:	sub	sp, sp, #16
   11afc:	ldr	r4, [pc, #68]	; 11b48 <abort@plt+0x129c>
   11b00:	add	r3, sp, #28
   11b04:	mov	r2, r3
   11b08:	ldr	ip, [r4]
   11b0c:	ldr	r1, [sp, #24]
   11b10:	add	r0, sp, #4
   11b14:	str	r3, [sp, #8]
   11b18:	str	ip, [sp, #12]
   11b1c:	bl	118c8 <abort@plt+0x101c>
   11b20:	ldr	r2, [sp, #12]
   11b24:	ldr	r3, [r4]
   11b28:	ldr	r0, [sp, #4]
   11b2c:	cmp	r2, r3
   11b30:	bne	11b44 <abort@plt+0x1298>
   11b34:	add	sp, sp, #16
   11b38:	pop	{r4, lr}
   11b3c:	add	sp, sp, #16
   11b40:	bx	lr
   11b44:	bl	107e0 <__stack_chk_fail@plt>
   11b48:	andeq	r2, r2, r8, ror #29
   11b4c:	cmp	r1, #0
   11b50:	beq	11d5c <abort@plt+0x14b0>
   11b54:	eor	ip, r0, r1
   11b58:	rsbmi	r1, r1, #0
   11b5c:	subs	r2, r1, #1
   11b60:	beq	11d28 <abort@plt+0x147c>
   11b64:	movs	r3, r0
   11b68:	rsbmi	r3, r0, #0
   11b6c:	cmp	r3, r1
   11b70:	bls	11d34 <abort@plt+0x1488>
   11b74:	tst	r1, r2
   11b78:	beq	11d44 <abort@plt+0x1498>
   11b7c:	clz	r2, r3
   11b80:	clz	r0, r1
   11b84:	sub	r2, r0, r2
   11b88:	rsbs	r2, r2, #31
   11b8c:	addne	r2, r2, r2, lsl #1
   11b90:	mov	r0, #0
   11b94:	addne	pc, pc, r2, lsl #2
   11b98:	nop			; (mov r0, r0)
   11b9c:	cmp	r3, r1, lsl #31
   11ba0:	adc	r0, r0, r0
   11ba4:	subcs	r3, r3, r1, lsl #31
   11ba8:	cmp	r3, r1, lsl #30
   11bac:	adc	r0, r0, r0
   11bb0:	subcs	r3, r3, r1, lsl #30
   11bb4:	cmp	r3, r1, lsl #29
   11bb8:	adc	r0, r0, r0
   11bbc:	subcs	r3, r3, r1, lsl #29
   11bc0:	cmp	r3, r1, lsl #28
   11bc4:	adc	r0, r0, r0
   11bc8:	subcs	r3, r3, r1, lsl #28
   11bcc:	cmp	r3, r1, lsl #27
   11bd0:	adc	r0, r0, r0
   11bd4:	subcs	r3, r3, r1, lsl #27
   11bd8:	cmp	r3, r1, lsl #26
   11bdc:	adc	r0, r0, r0
   11be0:	subcs	r3, r3, r1, lsl #26
   11be4:	cmp	r3, r1, lsl #25
   11be8:	adc	r0, r0, r0
   11bec:	subcs	r3, r3, r1, lsl #25
   11bf0:	cmp	r3, r1, lsl #24
   11bf4:	adc	r0, r0, r0
   11bf8:	subcs	r3, r3, r1, lsl #24
   11bfc:	cmp	r3, r1, lsl #23
   11c00:	adc	r0, r0, r0
   11c04:	subcs	r3, r3, r1, lsl #23
   11c08:	cmp	r3, r1, lsl #22
   11c0c:	adc	r0, r0, r0
   11c10:	subcs	r3, r3, r1, lsl #22
   11c14:	cmp	r3, r1, lsl #21
   11c18:	adc	r0, r0, r0
   11c1c:	subcs	r3, r3, r1, lsl #21
   11c20:	cmp	r3, r1, lsl #20
   11c24:	adc	r0, r0, r0
   11c28:	subcs	r3, r3, r1, lsl #20
   11c2c:	cmp	r3, r1, lsl #19
   11c30:	adc	r0, r0, r0
   11c34:	subcs	r3, r3, r1, lsl #19
   11c38:	cmp	r3, r1, lsl #18
   11c3c:	adc	r0, r0, r0
   11c40:	subcs	r3, r3, r1, lsl #18
   11c44:	cmp	r3, r1, lsl #17
   11c48:	adc	r0, r0, r0
   11c4c:	subcs	r3, r3, r1, lsl #17
   11c50:	cmp	r3, r1, lsl #16
   11c54:	adc	r0, r0, r0
   11c58:	subcs	r3, r3, r1, lsl #16
   11c5c:	cmp	r3, r1, lsl #15
   11c60:	adc	r0, r0, r0
   11c64:	subcs	r3, r3, r1, lsl #15
   11c68:	cmp	r3, r1, lsl #14
   11c6c:	adc	r0, r0, r0
   11c70:	subcs	r3, r3, r1, lsl #14
   11c74:	cmp	r3, r1, lsl #13
   11c78:	adc	r0, r0, r0
   11c7c:	subcs	r3, r3, r1, lsl #13
   11c80:	cmp	r3, r1, lsl #12
   11c84:	adc	r0, r0, r0
   11c88:	subcs	r3, r3, r1, lsl #12
   11c8c:	cmp	r3, r1, lsl #11
   11c90:	adc	r0, r0, r0
   11c94:	subcs	r3, r3, r1, lsl #11
   11c98:	cmp	r3, r1, lsl #10
   11c9c:	adc	r0, r0, r0
   11ca0:	subcs	r3, r3, r1, lsl #10
   11ca4:	cmp	r3, r1, lsl #9
   11ca8:	adc	r0, r0, r0
   11cac:	subcs	r3, r3, r1, lsl #9
   11cb0:	cmp	r3, r1, lsl #8
   11cb4:	adc	r0, r0, r0
   11cb8:	subcs	r3, r3, r1, lsl #8
   11cbc:	cmp	r3, r1, lsl #7
   11cc0:	adc	r0, r0, r0
   11cc4:	subcs	r3, r3, r1, lsl #7
   11cc8:	cmp	r3, r1, lsl #6
   11ccc:	adc	r0, r0, r0
   11cd0:	subcs	r3, r3, r1, lsl #6
   11cd4:	cmp	r3, r1, lsl #5
   11cd8:	adc	r0, r0, r0
   11cdc:	subcs	r3, r3, r1, lsl #5
   11ce0:	cmp	r3, r1, lsl #4
   11ce4:	adc	r0, r0, r0
   11ce8:	subcs	r3, r3, r1, lsl #4
   11cec:	cmp	r3, r1, lsl #3
   11cf0:	adc	r0, r0, r0
   11cf4:	subcs	r3, r3, r1, lsl #3
   11cf8:	cmp	r3, r1, lsl #2
   11cfc:	adc	r0, r0, r0
   11d00:	subcs	r3, r3, r1, lsl #2
   11d04:	cmp	r3, r1, lsl #1
   11d08:	adc	r0, r0, r0
   11d0c:	subcs	r3, r3, r1, lsl #1
   11d10:	cmp	r3, r1
   11d14:	adc	r0, r0, r0
   11d18:	subcs	r3, r3, r1
   11d1c:	cmp	ip, #0
   11d20:	rsbmi	r0, r0, #0
   11d24:	bx	lr
   11d28:	teq	ip, r0
   11d2c:	rsbmi	r0, r0, #0
   11d30:	bx	lr
   11d34:	movcc	r0, #0
   11d38:	asreq	r0, ip, #31
   11d3c:	orreq	r0, r0, #1
   11d40:	bx	lr
   11d44:	clz	r2, r1
   11d48:	rsb	r2, r2, #31
   11d4c:	cmp	ip, #0
   11d50:	lsr	r0, r3, r2
   11d54:	rsbmi	r0, r0, #0
   11d58:	bx	lr
   11d5c:	cmp	r0, #0
   11d60:	mvngt	r0, #-2147483648	; 0x80000000
   11d64:	movlt	r0, #-2147483648	; 0x80000000
   11d68:	b	11d8c <abort@plt+0x14e0>
   11d6c:	cmp	r1, #0
   11d70:	beq	11d5c <abort@plt+0x14b0>
   11d74:	push	{r0, r1, lr}
   11d78:	bl	11b54 <abort@plt+0x12a8>
   11d7c:	pop	{r1, r2, lr}
   11d80:	mul	r3, r2, r0
   11d84:	sub	r1, r1, r3
   11d88:	bx	lr
   11d8c:	push	{r1, lr}
   11d90:	mov	r0, #8
   11d94:	bl	107b0 <raise@plt>
   11d98:	pop	{r1, pc}
   11d9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11da0:	mov	r7, r0
   11da4:	ldr	r6, [pc, #72]	; 11df4 <abort@plt+0x1548>
   11da8:	ldr	r5, [pc, #72]	; 11df8 <abort@plt+0x154c>
   11dac:	add	r6, pc, r6
   11db0:	add	r5, pc, r5
   11db4:	sub	r6, r6, r5
   11db8:	mov	r8, r1
   11dbc:	mov	r9, r2
   11dc0:	bl	10784 <calloc@plt-0x20>
   11dc4:	asrs	r6, r6, #2
   11dc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11dcc:	mov	r4, #0
   11dd0:	add	r4, r4, #1
   11dd4:	ldr	r3, [r5], #4
   11dd8:	mov	r2, r9
   11ddc:	mov	r1, r8
   11de0:	mov	r0, r7
   11de4:	blx	r3
   11de8:	cmp	r6, r4
   11dec:	bne	11dd0 <abort@plt+0x1524>
   11df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11df4:	andeq	r1, r1, r0, lsr r1
   11df8:	andeq	r1, r1, r8, lsr #2
   11dfc:	bx	lr

Disassembly of section .fini:

00011e00 <.fini>:
   11e00:	push	{r3, lr}
   11e04:	pop	{r3, pc}
