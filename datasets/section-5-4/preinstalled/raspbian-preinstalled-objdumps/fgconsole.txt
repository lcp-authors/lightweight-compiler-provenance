
raspbian-preinstalled/fgconsole:     file format elf32-littlearm


Disassembly of section .init:

00010638 <.init>:
   10638:	push	{r3, lr}
   1063c:	bl	10a04 <close@plt+0x2bc>
   10640:	pop	{r3, pc}

Disassembly of section .plt:

00010644 <dcgettext@plt-0x14>:
   10644:	push	{lr}		; (str lr, [sp, #-4]!)
   10648:	ldr	lr, [pc, #4]	; 10654 <dcgettext@plt-0x4>
   1064c:	add	lr, pc, lr
   10650:	ldr	pc, [lr, #8]!
   10654:	andeq	r1, r1, ip, lsr #19

00010658 <dcgettext@plt>:
   10658:	add	ip, pc, #0, 12
   1065c:	add	ip, ip, #69632	; 0x11000
   10660:	ldr	pc, [ip, #2476]!	; 0x9ac

00010664 <__stack_chk_fail@plt>:
   10664:	add	ip, pc, #0, 12
   10668:	add	ip, ip, #69632	; 0x11000
   1066c:	ldr	pc, [ip, #2468]!	; 0x9a4

00010670 <textdomain@plt>:
   10670:	add	ip, pc, #0, 12
   10674:	add	ip, ip, #69632	; 0x11000
   10678:	ldr	pc, [ip, #2460]!	; 0x99c

0001067c <ioctl@plt>:
   1067c:	add	ip, pc, #0, 12
   10680:	add	ip, ip, #69632	; 0x11000
   10684:	ldr	pc, [ip, #2452]!	; 0x994

00010688 <puts@plt>:
   10688:	add	ip, pc, #0, 12
   1068c:	add	ip, ip, #69632	; 0x11000
   10690:	ldr	pc, [ip, #2444]!	; 0x98c

00010694 <__libc_start_main@plt>:
   10694:	add	ip, pc, #0, 12
   10698:	add	ip, ip, #69632	; 0x11000
   1069c:	ldr	pc, [ip, #2436]!	; 0x984

000106a0 <strerror@plt>:
   106a0:	add	ip, pc, #0, 12
   106a4:	add	ip, ip, #69632	; 0x11000
   106a8:	ldr	pc, [ip, #2428]!	; 0x97c

000106ac <__vfprintf_chk@plt>:
   106ac:	add	ip, pc, #0, 12
   106b0:	add	ip, ip, #69632	; 0x11000
   106b4:	ldr	pc, [ip, #2420]!	; 0x974

000106b8 <__gmon_start__@plt>:
   106b8:	add	ip, pc, #0, 12
   106bc:	add	ip, ip, #69632	; 0x11000
   106c0:	ldr	pc, [ip, #2412]!	; 0x96c

000106c4 <open@plt>:
   106c4:	add	ip, pc, #0, 12
   106c8:	add	ip, ip, #69632	; 0x11000
   106cc:	ldr	pc, [ip, #2404]!	; 0x964

000106d0 <getopt_long@plt>:
   106d0:	add	ip, pc, #0, 12
   106d4:	add	ip, ip, #69632	; 0x11000
   106d8:	ldr	pc, [ip, #2396]!	; 0x95c

000106dc <exit@plt>:
   106dc:	add	ip, pc, #0, 12
   106e0:	add	ip, ip, #69632	; 0x11000
   106e4:	ldr	pc, [ip, #2388]!	; 0x954

000106e8 <__errno_location@plt>:
   106e8:	add	ip, pc, #0, 12
   106ec:	add	ip, ip, #69632	; 0x11000
   106f0:	ldr	pc, [ip, #2380]!	; 0x94c

000106f4 <__printf_chk@plt>:
   106f4:	add	ip, pc, #0, 12
   106f8:	add	ip, ip, #69632	; 0x11000
   106fc:	ldr	pc, [ip, #2372]!	; 0x944

00010700 <__fprintf_chk@plt>:
   10700:	add	ip, pc, #0, 12
   10704:	add	ip, ip, #69632	; 0x11000
   10708:	ldr	pc, [ip, #2364]!	; 0x93c

0001070c <setlocale@plt>:
   1070c:	add	ip, pc, #0, 12
   10710:	add	ip, ip, #69632	; 0x11000
   10714:	ldr	pc, [ip, #2356]!	; 0x934

00010718 <strrchr@plt>:
   10718:	add	ip, pc, #0, 12
   1071c:	add	ip, ip, #69632	; 0x11000
   10720:	ldr	pc, [ip, #2348]!	; 0x92c

00010724 <bindtextdomain@plt>:
   10724:	add	ip, pc, #0, 12
   10728:	add	ip, ip, #69632	; 0x11000
   1072c:	ldr	pc, [ip, #2340]!	; 0x924

00010730 <isatty@plt>:
   10730:	add	ip, pc, #0, 12
   10734:	add	ip, ip, #69632	; 0x11000
   10738:	ldr	pc, [ip, #2332]!	; 0x91c

0001073c <abort@plt>:
   1073c:	add	ip, pc, #0, 12
   10740:	add	ip, ip, #69632	; 0x11000
   10744:	ldr	pc, [ip, #2324]!	; 0x914

00010748 <close@plt>:
   10748:	add	ip, pc, #0, 12
   1074c:	add	ip, ip, #69632	; 0x11000
   10750:	ldr	pc, [ip, #2316]!	; 0x90c

Disassembly of section .text:

00010754 <.text>:
   10754:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10758:	mov	r5, r1
   1075c:	ldr	lr, [pc, #548]	; 10988 <close@plt+0x240>
   10760:	mov	r8, r0
   10764:	sub	sp, sp, #152	; 0x98
   10768:	ldm	lr!, {r0, r1, r2, r3}
   1076c:	add	ip, sp, #84	; 0x54
   10770:	ldr	r9, [pc, #532]	; 1098c <close@plt+0x244>
   10774:	mvn	r4, #0
   10778:	stmia	ip!, {r0, r1, r2, r3}
   1077c:	ldm	lr!, {r0, r1, r2, r3}
   10780:	str	r4, [sp, #12]
   10784:	ldr	r4, [r9]
   10788:	stmia	ip!, {r0, r1, r2, r3}
   1078c:	ldm	lr!, {r0, r1, r2, r3}
   10790:	str	r4, [sp, #148]	; 0x94
   10794:	ldr	sl, [pc, #500]	; 10990 <close@plt+0x248>
   10798:	stmia	ip!, {r0, r1, r2, r3}
   1079c:	mov	r4, #0
   107a0:	ldm	lr, {r0, r1, r2, r3}
   107a4:	mov	r7, r4
   107a8:	stm	ip, {r0, r1, r2, r3}
   107ac:	mov	r0, #6
   107b0:	ldr	r1, [pc, #476]	; 10994 <close@plt+0x24c>
   107b4:	bl	1070c <setlocale@plt>
   107b8:	ldr	r1, [pc, #472]	; 10998 <close@plt+0x250>
   107bc:	ldr	r0, [pc, #472]	; 1099c <close@plt+0x254>
   107c0:	bl	10724 <bindtextdomain@plt>
   107c4:	ldr	r0, [pc, #464]	; 1099c <close@plt+0x254>
   107c8:	bl	10670 <textdomain@plt>
   107cc:	ldr	r6, [r5]
   107d0:	mov	r1, #47	; 0x2f
   107d4:	mov	r0, r6
   107d8:	bl	10718 <strrchr@plt>
   107dc:	cmp	r0, #0
   107e0:	addne	r6, r0, #1
   107e4:	str	r6, [sl]
   107e8:	ldr	r6, [pc, #432]	; 109a0 <close@plt+0x258>
   107ec:	str	r7, [sp]
   107f0:	add	r3, sp, #84	; 0x54
   107f4:	mov	r2, r6
   107f8:	mov	r1, r5
   107fc:	mov	r0, r8
   10800:	bl	106d0 <getopt_long@plt>
   10804:	cmn	r0, #1
   10808:	beq	10838 <close@plt+0xf0>
   1080c:	cmp	r0, #86	; 0x56
   10810:	beq	10958 <close@plt+0x210>
   10814:	ble	1082c <close@plt+0xe4>
   10818:	cmp	r0, #104	; 0x68
   1081c:	beq	10834 <close@plt+0xec>
   10820:	cmp	r0, #110	; 0x6e
   10824:	moveq	r4, #1
   10828:	b	107ec <close@plt+0xa4>
   1082c:	cmp	r0, #63	; 0x3f
   10830:	bne	107ec <close@plt+0xa4>
   10834:	bl	10ab8 <close@plt+0x370>
   10838:	mov	r0, #0
   1083c:	bl	10bd4 <close@plt+0x48c>
   10840:	subs	r5, r0, #0
   10844:	blt	1091c <close@plt+0x1d4>
   10848:	cmp	r4, #0
   1084c:	beq	108a0 <close@plt+0x158>
   10850:	mov	r0, r5
   10854:	add	r2, sp, #12
   10858:	mov	r1, #22016	; 0x5600
   1085c:	bl	1067c <ioctl@plt>
   10860:	cmp	r0, #0
   10864:	blt	108f0 <close@plt+0x1a8>
   10868:	ldr	r3, [sp, #12]
   1086c:	cmn	r3, #1
   10870:	beq	108f0 <close@plt+0x1a8>
   10874:	ldr	r2, [sp, #12]
   10878:	ldr	r1, [pc, #292]	; 109a4 <close@plt+0x25c>
   1087c:	mov	r0, #1
   10880:	bl	106f4 <__printf_chk@plt>
   10884:	ldr	r2, [sp, #148]	; 0x94
   10888:	ldr	r3, [r9]
   1088c:	mov	r0, #0
   10890:	cmp	r2, r3
   10894:	bne	10984 <close@plt+0x23c>
   10898:	add	sp, sp, #152	; 0x98
   1089c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a0:	add	r2, sp, #24
   108a4:	ldr	r1, [pc, #252]	; 109a8 <close@plt+0x260>
   108a8:	mov	r0, r5
   108ac:	bl	1067c <ioctl@plt>
   108b0:	cmp	r0, #0
   108b4:	beq	108e4 <close@plt+0x19c>
   108b8:	mov	r0, r5
   108bc:	add	r2, sp, #16
   108c0:	ldr	r1, [pc, #228]	; 109ac <close@plt+0x264>
   108c4:	bl	1067c <ioctl@plt>
   108c8:	cmp	r0, #0
   108cc:	bne	10940 <close@plt+0x1f8>
   108d0:	ldrh	r2, [sp, #16]
   108d4:	ldr	r1, [pc, #200]	; 109a4 <close@plt+0x25c>
   108d8:	mov	r0, #1
   108dc:	bl	106f4 <__printf_chk@plt>
   108e0:	b	10884 <close@plt+0x13c>
   108e4:	ldr	r0, [pc, #196]	; 109b0 <close@plt+0x268>
   108e8:	bl	10688 <puts@plt>
   108ec:	b	10884 <close@plt+0x13c>
   108f0:	bl	106e8 <__errno_location@plt>
   108f4:	mov	r2, #5
   108f8:	ldr	r1, [pc, #180]	; 109b4 <close@plt+0x26c>
   108fc:	ldr	r4, [r0]
   10900:	mov	r0, #0
   10904:	bl	10658 <dcgettext@plt>
   10908:	mov	r1, r4
   1090c:	mov	r2, r0
   10910:	mov	r0, #2
   10914:	bl	10d98 <close@plt+0x650>
   10918:	b	10874 <close@plt+0x12c>
   1091c:	mov	r2, #5
   10920:	ldr	r1, [pc, #144]	; 109b8 <close@plt+0x270>
   10924:	mov	r0, #0
   10928:	bl	10658 <dcgettext@plt>
   1092c:	mov	r1, #0
   10930:	mov	r2, r0
   10934:	mov	r0, #1
   10938:	bl	10d98 <close@plt+0x650>
   1093c:	b	10848 <close@plt+0x100>
   10940:	bl	106e8 <__errno_location@plt>
   10944:	ldr	r2, [pc, #112]	; 109bc <close@plt+0x274>
   10948:	ldr	r1, [r0]
   1094c:	mov	r0, #1
   10950:	bl	10d98 <close@plt+0x650>
   10954:	b	108d0 <close@plt+0x188>
   10958:	mov	r2, #5
   1095c:	ldr	r1, [pc, #92]	; 109c0 <close@plt+0x278>
   10960:	mov	r0, #0
   10964:	bl	10658 <dcgettext@plt>
   10968:	ldr	r2, [sl]
   1096c:	ldr	r3, [pc, #80]	; 109c4 <close@plt+0x27c>
   10970:	mov	r1, r0
   10974:	mov	r0, #1
   10978:	bl	106f4 <__printf_chk@plt>
   1097c:	mov	r0, #0
   10980:	bl	106dc <exit@plt>
   10984:	bl	10664 <__stack_chk_fail@plt>
   10988:	andeq	r0, r1, r8, lsr #29
   1098c:	andeq	r1, r2, r8, lsl #30
   10990:	andeq	r2, r2, r8, ror r0
   10994:	strdeq	r1, [r1], -r8
   10998:			; <UNDEFINED> instruction: 0x00010fb8
   1099c:	andeq	r0, r1, ip, asr #31
   109a0:	andeq	r0, r1, r8, ror #31
   109a4:	andeq	r1, r1, ip, lsr r0
   109a8:	andeq	r5, r0, lr, lsl r4
   109ac:	andeq	r5, r0, r3, lsl #12
   109b0:	andeq	r1, r1, r0, asr #32
   109b4:	andeq	r1, r1, r4, lsr #32
   109b8:	andeq	r0, r1, ip, ror #31
   109bc:	andeq	r1, r1, r8, asr #32
   109c0:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   109c4:	ldrdeq	r0, [r1], -ip
   109c8:	mov	fp, #0
   109cc:	mov	lr, #0
   109d0:	pop	{r1}		; (ldr r1, [sp], #4)
   109d4:	mov	r2, sp
   109d8:	push	{r2}		; (str r2, [sp, #-4]!)
   109dc:	push	{r0}		; (str r0, [sp, #-4]!)
   109e0:	ldr	ip, [pc, #16]	; 109f8 <close@plt+0x2b0>
   109e4:	push	{ip}		; (str ip, [sp, #-4]!)
   109e8:	ldr	r0, [pc, #12]	; 109fc <close@plt+0x2b4>
   109ec:	ldr	r3, [pc, #12]	; 10a00 <close@plt+0x2b8>
   109f0:	bl	10694 <__libc_start_main@plt>
   109f4:	bl	1073c <abort@plt>
   109f8:	muleq	r1, r8, lr
   109fc:	andeq	r0, r1, r4, asr r7
   10a00:	andeq	r0, r1, r8, lsr lr
   10a04:	ldr	r3, [pc, #20]	; 10a20 <close@plt+0x2d8>
   10a08:	ldr	r2, [pc, #20]	; 10a24 <close@plt+0x2dc>
   10a0c:	add	r3, pc, r3
   10a10:	ldr	r2, [r3, r2]
   10a14:	cmp	r2, #0
   10a18:	bxeq	lr
   10a1c:	b	106b8 <__gmon_start__@plt>
   10a20:	andeq	r1, r1, ip, ror #11
   10a24:	andeq	r0, r0, r0, rrx
   10a28:	ldr	r0, [pc, #24]	; 10a48 <close@plt+0x300>
   10a2c:	ldr	r3, [pc, #24]	; 10a4c <close@plt+0x304>
   10a30:	cmp	r3, r0
   10a34:	bxeq	lr
   10a38:	ldr	r3, [pc, #16]	; 10a50 <close@plt+0x308>
   10a3c:	cmp	r3, #0
   10a40:	bxeq	lr
   10a44:	bx	r3
   10a48:	andeq	r2, r2, ip, rrx
   10a4c:	andeq	r2, r2, ip, rrx
   10a50:	andeq	r0, r0, r0
   10a54:	ldr	r0, [pc, #36]	; 10a80 <close@plt+0x338>
   10a58:	ldr	r1, [pc, #36]	; 10a84 <close@plt+0x33c>
   10a5c:	sub	r1, r1, r0
   10a60:	asr	r1, r1, #2
   10a64:	add	r1, r1, r1, lsr #31
   10a68:	asrs	r1, r1, #1
   10a6c:	bxeq	lr
   10a70:	ldr	r3, [pc, #16]	; 10a88 <close@plt+0x340>
   10a74:	cmp	r3, #0
   10a78:	bxeq	lr
   10a7c:	bx	r3
   10a80:	andeq	r2, r2, ip, rrx
   10a84:	andeq	r2, r2, ip, rrx
   10a88:	andeq	r0, r0, r0
   10a8c:	push	{r4, lr}
   10a90:	ldr	r4, [pc, #24]	; 10ab0 <close@plt+0x368>
   10a94:	ldrb	r3, [r4]
   10a98:	cmp	r3, #0
   10a9c:	popne	{r4, pc}
   10aa0:	bl	10a28 <close@plt+0x2e0>
   10aa4:	mov	r3, #1
   10aa8:	strb	r3, [r4]
   10aac:	pop	{r4, pc}
   10ab0:	andeq	r2, r2, r4, ror r0
   10ab4:	b	10a54 <close@plt+0x30c>
   10ab8:	ldr	r3, [pc, #64]	; 10b00 <close@plt+0x3b8>
   10abc:	push	{lr}		; (str lr, [sp, #-4]!)
   10ac0:	mov	r2, #5
   10ac4:	sub	sp, sp, #12
   10ac8:	ldr	r1, [pc, #52]	; 10b04 <close@plt+0x3bc>
   10acc:	mov	r0, #0
   10ad0:	ldr	r4, [r3]
   10ad4:	bl	10658 <dcgettext@plt>
   10ad8:	ldr	r3, [pc, #40]	; 10b08 <close@plt+0x3c0>
   10adc:	ldr	r2, [pc, #40]	; 10b0c <close@plt+0x3c4>
   10ae0:	mov	r1, #1
   10ae4:	ldr	r3, [r3]
   10ae8:	strd	r2, [sp]
   10aec:	mov	r2, r0
   10af0:	mov	r0, r4
   10af4:	bl	10700 <__fprintf_chk@plt>
   10af8:	mov	r0, #1
   10afc:	bl	106dc <exit@plt>
   10b00:	andeq	r2, r2, r0, ror r0
   10b04:	andeq	r0, r1, r8, ror #29
   10b08:	andeq	r2, r2, r8, ror r0
   10b0c:	andeq	r0, r1, r0, ror #31
   10b10:	push	{r4, lr}
   10b14:	mov	r1, #2
   10b18:	mov	r4, r0
   10b1c:	bl	106c4 <open@plt>
   10b20:	cmp	r0, #0
   10b24:	popge	{r4, pc}
   10b28:	mov	r1, #1
   10b2c:	mov	r0, r4
   10b30:	bl	106c4 <open@plt>
   10b34:	cmp	r0, #0
   10b38:	popge	{r4, pc}
   10b3c:	mov	r0, r4
   10b40:	mov	r1, #0
   10b44:	bl	106c4 <open@plt>
   10b48:	orr	r0, r0, r0, asr #31
   10b4c:	pop	{r4, pc}
   10b50:	push	{r4, r5, lr}
   10b54:	sub	sp, sp, #12
   10b58:	ldr	r4, [pc, #108]	; 10bcc <close@plt+0x484>
   10b5c:	mov	r3, #0
   10b60:	strb	r3, [sp, #3]
   10b64:	ldr	r3, [r4]
   10b68:	mov	r5, r0
   10b6c:	str	r3, [sp, #4]
   10b70:	bl	10730 <isatty@plt>
   10b74:	cmp	r0, #0
   10b78:	bne	10b98 <close@plt+0x450>
   10b7c:	mov	r0, #0
   10b80:	ldr	r2, [sp, #4]
   10b84:	ldr	r3, [r4]
   10b88:	cmp	r2, r3
   10b8c:	bne	10bc8 <close@plt+0x480>
   10b90:	add	sp, sp, #12
   10b94:	pop	{r4, r5, pc}
   10b98:	mov	r0, r5
   10b9c:	add	r2, sp, #3
   10ba0:	ldr	r1, [pc, #40]	; 10bd0 <close@plt+0x488>
   10ba4:	bl	1067c <ioctl@plt>
   10ba8:	cmp	r0, #0
   10bac:	bne	10b7c <close@plt+0x434>
   10bb0:	ldrb	r0, [sp, #3]
   10bb4:	sub	r0, r0, #1
   10bb8:	cmp	r0, #1
   10bbc:	movhi	r0, #0
   10bc0:	movls	r0, #1
   10bc4:	b	10b80 <close@plt+0x438>
   10bc8:	bl	10664 <__stack_chk_fail@plt>
   10bcc:	andeq	r1, r2, r8, lsl #30
   10bd0:	andeq	r4, r0, r3, lsr fp
   10bd4:	push	{r4, r5, r6, lr}
   10bd8:	subs	r5, r0, #0
   10bdc:	beq	10c00 <close@plt+0x4b8>
   10be0:	bl	10b10 <close@plt+0x3c8>
   10be4:	subs	r4, r0, #0
   10be8:	blt	10c98 <close@plt+0x550>
   10bec:	bl	10b50 <close@plt+0x408>
   10bf0:	cmp	r0, #0
   10bf4:	beq	10c90 <close@plt+0x548>
   10bf8:	mov	r0, r4
   10bfc:	pop	{r4, r5, r6, pc}
   10c00:	ldr	r5, [pc, #196]	; 10ccc <close@plt+0x584>
   10c04:	ldr	r0, [pc, #196]	; 10cd0 <close@plt+0x588>
   10c08:	b	10c18 <close@plt+0x4d0>
   10c0c:	ldr	r0, [r5], #4
   10c10:	cmp	r0, #0
   10c14:	beq	10c44 <close@plt+0x4fc>
   10c18:	bl	10b10 <close@plt+0x3c8>
   10c1c:	subs	r4, r0, #0
   10c20:	blt	10c0c <close@plt+0x4c4>
   10c24:	bl	10b50 <close@plt+0x408>
   10c28:	cmp	r0, #0
   10c2c:	bne	10bf8 <close@plt+0x4b0>
   10c30:	mov	r0, r4
   10c34:	bl	10748 <close@plt>
   10c38:	ldr	r0, [r5], #4
   10c3c:	cmp	r0, #0
   10c40:	bne	10c18 <close@plt+0x4d0>
   10c44:	mov	r4, r0
   10c48:	mov	r0, r4
   10c4c:	bl	10b50 <close@plt+0x408>
   10c50:	cmp	r0, #0
   10c54:	bne	10bf8 <close@plt+0x4b0>
   10c58:	add	r4, r4, #1
   10c5c:	cmp	r4, #3
   10c60:	bne	10c48 <close@plt+0x500>
   10c64:	ldr	r3, [pc, #104]	; 10cd4 <close@plt+0x58c>
   10c68:	mov	r2, #5
   10c6c:	ldr	r1, [pc, #100]	; 10cd8 <close@plt+0x590>
   10c70:	ldr	r4, [r3]
   10c74:	bl	10658 <dcgettext@plt>
   10c78:	mov	r1, #1
   10c7c:	mov	r2, r0
   10c80:	mov	r0, r4
   10c84:	bl	10700 <__fprintf_chk@plt>
   10c88:	mov	r0, #1
   10c8c:	bl	106dc <exit@plt>
   10c90:	mov	r0, r4
   10c94:	bl	10748 <close@plt>
   10c98:	ldr	r3, [pc, #52]	; 10cd4 <close@plt+0x58c>
   10c9c:	mov	r2, #5
   10ca0:	ldr	r1, [pc, #52]	; 10cdc <close@plt+0x594>
   10ca4:	mov	r0, #0
   10ca8:	ldr	r4, [r3]
   10cac:	bl	10658 <dcgettext@plt>
   10cb0:	mov	r3, r5
   10cb4:	mov	r1, #1
   10cb8:	mov	r2, r0
   10cbc:	mov	r0, r4
   10cc0:	bl	10700 <__fprintf_chk@plt>
   10cc4:	mov	r0, #1
   10cc8:	bl	106dc <exit@plt>
   10ccc:	andeq	r1, r1, r4, lsl #1
   10cd0:	muleq	r1, ip, r0
   10cd4:	andeq	r2, r2, r0, ror r0
   10cd8:	andeq	r1, r1, r0, asr #1
   10cdc:	andeq	r1, r1, ip, lsr #1
   10ce0:	push	{r1, r2, r3}
   10ce4:	push	{r4, r5, r6, r7, lr}
   10ce8:	sub	sp, sp, #8
   10cec:	ldr	r5, [pc, #144]	; 10d84 <close@plt+0x63c>
   10cf0:	ldr	r4, [pc, #144]	; 10d88 <close@plt+0x640>
   10cf4:	ldr	r3, [pc, #144]	; 10d8c <close@plt+0x644>
   10cf8:	ldr	r1, [r5]
   10cfc:	ldr	r7, [sp, #28]
   10d00:	add	ip, sp, #32
   10d04:	mov	r6, r0
   10d08:	ldr	r3, [r3]
   10d0c:	ldr	r2, [pc, #124]	; 10d90 <close@plt+0x648>
   10d10:	str	r1, [sp, #4]
   10d14:	ldr	r0, [r4]
   10d18:	mov	r1, #1
   10d1c:	str	ip, [sp]
   10d20:	bl	10700 <__fprintf_chk@plt>
   10d24:	mov	r2, r7
   10d28:	ldr	r0, [r4]
   10d2c:	ldr	r3, [sp]
   10d30:	mov	r1, #1
   10d34:	bl	106ac <__vfprintf_chk@plt>
   10d38:	cmp	r6, #0
   10d3c:	ble	10d60 <close@plt+0x618>
   10d40:	mov	r0, r6
   10d44:	ldr	r4, [r4]
   10d48:	bl	106a0 <strerror@plt>
   10d4c:	ldr	r2, [pc, #64]	; 10d94 <close@plt+0x64c>
   10d50:	mov	r1, #1
   10d54:	mov	r3, r0
   10d58:	mov	r0, r4
   10d5c:	bl	10700 <__fprintf_chk@plt>
   10d60:	ldr	r2, [sp, #4]
   10d64:	ldr	r3, [r5]
   10d68:	cmp	r2, r3
   10d6c:	bne	10d80 <close@plt+0x638>
   10d70:	add	sp, sp, #8
   10d74:	pop	{r4, r5, r6, r7, lr}
   10d78:	add	sp, sp, #12
   10d7c:	bx	lr
   10d80:	bl	10664 <__stack_chk_fail@plt>
   10d84:	andeq	r1, r2, r8, lsl #30
   10d88:	andeq	r2, r2, r0, ror r0
   10d8c:	andeq	r2, r2, r8, ror r0
   10d90:	andeq	r1, r1, ip, lsr r1
   10d94:	andeq	r1, r1, r4, asr #2
   10d98:	push	{r2, r3}
   10d9c:	mov	r5, r1
   10da0:	ldr	r2, [pc, #124]	; 10e24 <close@plt+0x6dc>
   10da4:	push	{r7, lr}
   10da8:	sub	sp, sp, #8
   10dac:	ldr	r4, [pc, #116]	; 10e28 <close@plt+0x6e0>
   10db0:	ldr	r3, [pc, #116]	; 10e2c <close@plt+0x6e4>
   10db4:	ldr	lr, [r2]
   10db8:	ldr	r7, [sp, #16]
   10dbc:	add	ip, sp, #20
   10dc0:	ldr	r3, [r3]
   10dc4:	ldr	r2, [pc, #100]	; 10e30 <close@plt+0x6e8>
   10dc8:	mov	r1, #1
   10dcc:	mov	r6, r0
   10dd0:	ldr	r0, [r4]
   10dd4:	str	lr, [sp, #4]
   10dd8:	str	ip, [sp]
   10ddc:	bl	10700 <__fprintf_chk@plt>
   10de0:	mov	r2, r7
   10de4:	ldr	r0, [r4]
   10de8:	ldr	r3, [sp]
   10dec:	mov	r1, #1
   10df0:	bl	106ac <__vfprintf_chk@plt>
   10df4:	cmp	r5, #0
   10df8:	ble	10e1c <close@plt+0x6d4>
   10dfc:	mov	r0, r5
   10e00:	ldr	r4, [r4]
   10e04:	bl	106a0 <strerror@plt>
   10e08:	ldr	r2, [pc, #36]	; 10e34 <close@plt+0x6ec>
   10e0c:	mov	r1, #1
   10e10:	mov	r3, r0
   10e14:	mov	r0, r4
   10e18:	bl	10700 <__fprintf_chk@plt>
   10e1c:	mov	r0, r6
   10e20:	bl	106dc <exit@plt>
   10e24:	andeq	r1, r2, r8, lsl #30
   10e28:	andeq	r2, r2, r0, ror r0
   10e2c:	andeq	r2, r2, r8, ror r0
   10e30:	andeq	r1, r1, ip, lsr r1
   10e34:	andeq	r1, r1, r4, asr #2
   10e38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10e3c:	mov	r7, r0
   10e40:	ldr	r6, [pc, #72]	; 10e90 <close@plt+0x748>
   10e44:	ldr	r5, [pc, #72]	; 10e94 <close@plt+0x74c>
   10e48:	add	r6, pc, r6
   10e4c:	add	r5, pc, r5
   10e50:	sub	r6, r6, r5
   10e54:	mov	r8, r1
   10e58:	mov	r9, r2
   10e5c:	bl	10638 <dcgettext@plt-0x20>
   10e60:	asrs	r6, r6, #2
   10e64:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e68:	mov	r4, #0
   10e6c:	add	r4, r4, #1
   10e70:	ldr	r3, [r5], #4
   10e74:	mov	r2, r9
   10e78:	mov	r1, r8
   10e7c:	mov	r0, r7
   10e80:	blx	r3
   10e84:	cmp	r6, r4
   10e88:	bne	10e6c <close@plt+0x724>
   10e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10e90:	strheq	r1, [r1], -r4
   10e94:	andeq	r1, r1, ip, lsr #1
   10e98:	bx	lr

Disassembly of section .fini:

00010e9c <.fini>:
   10e9c:	push	{r3, lr}
   10ea0:	pop	{r3, pc}
