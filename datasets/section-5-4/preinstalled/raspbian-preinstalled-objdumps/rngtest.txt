
raspbian-preinstalled/rngtest:     file format elf32-littlearm


Disassembly of section .init:

00008700 <.init>:
    8700:	push	{r3, lr}
    8704:	bl	885c <__assert_fail@plt+0x4c>
    8708:	pop	{r3, pc}

Disassembly of section .plt:

0000870c <strtol@plt-0x14>:
    870c:	push	{lr}		; (str lr, [sp, #-4]!)
    8710:	ldr	lr, [pc, #4]	; 871c <strtol@plt-0x4>
    8714:	add	lr, pc, lr
    8718:	ldr	pc, [lr, #8]!
    871c:	andeq	fp, r0, r0, ror #19

00008720 <strtol@plt>:
    8720:	add	ip, pc, #0, 12
    8724:	add	ip, ip, #45056	; 0xb000
    8728:	ldr	pc, [ip, #2528]!	; 0x9e0

0000872c <read@plt>:
    872c:	add	ip, pc, #0, 12
    8730:	add	ip, ip, #45056	; 0xb000
    8734:	ldr	pc, [ip, #2520]!	; 0x9d8

00008738 <uname@plt>:
    8738:	add	ip, pc, #0, 12
    873c:	add	ip, ip, #45056	; 0xb000
    8740:	ldr	pc, [ip, #2512]!	; 0x9d0

00008744 <sigaction@plt>:
    8744:	add	ip, pc, #0, 12
    8748:	add	ip, ip, #45056	; 0xb000
    874c:	ldr	pc, [ip, #2504]!	; 0x9c8

00008750 <gettimeofday@plt>:
    8750:	add	ip, pc, #0, 12
    8754:	add	ip, ip, #45056	; 0xb000
    8758:	ldr	pc, [ip, #2496]!	; 0x9c0

0000875c <__libc_start_main@plt>:
    875c:	add	ip, pc, #0, 12
    8760:	add	ip, ip, #45056	; 0xb000
    8764:	ldr	pc, [ip, #2488]!	; 0x9b8

00008768 <strerror@plt>:
    8768:	add	ip, pc, #0, 12
    876c:	add	ip, ip, #45056	; 0xb000
    8770:	ldr	pc, [ip, #2480]!	; 0x9b0

00008774 <__gmon_start__@plt>:
    8774:	add	ip, pc, #0, 12
    8778:	add	ip, ip, #45056	; 0xb000
    877c:	ldr	pc, [ip, #2472]!	; 0x9a8

00008780 <exit@plt>:
    8780:	add	ip, pc, #0, 12
    8784:	add	ip, ip, #45056	; 0xb000
    8788:	ldr	pc, [ip, #2464]!	; 0x9a0

0000878c <fprintf@plt>:
    878c:	add	ip, pc, #0, 12
    8790:	add	ip, ip, #45056	; 0xb000
    8794:	ldr	pc, [ip, #2456]!	; 0x998

00008798 <__errno_location@plt>:
    8798:	add	ip, pc, #0, 12
    879c:	add	ip, ip, #45056	; 0xb000
    87a0:	ldr	pc, [ip, #2448]!	; 0x990

000087a4 <snprintf@plt>:
    87a4:	add	ip, pc, #0, 12
    87a8:	add	ip, ip, #45056	; 0xb000
    87ac:	ldr	pc, [ip, #2440]!	; 0x988

000087b0 <memset@plt>:
    87b0:	add	ip, pc, #0, 12
    87b4:	add	ip, ip, #45056	; 0xb000
    87b8:	ldr	pc, [ip, #2432]!	; 0x980

000087bc <strncpy@plt>:
    87bc:	add	ip, pc, #0, 12
    87c0:	add	ip, ip, #45056	; 0xb000
    87c4:	ldr	pc, [ip, #2424]!	; 0x978

000087c8 <argp_parse@plt>:
    87c8:	add	ip, pc, #0, 12
    87cc:	add	ip, ip, #45056	; 0xb000
    87d0:	ldr	pc, [ip, #2416]!	; 0x970

000087d4 <write@plt>:
    87d4:	add	ip, pc, #0, 12
    87d8:	add	ip, ip, #45056	; 0xb000
    87dc:	ldr	pc, [ip, #2408]!	; 0x968

000087e0 <sigemptyset@plt>:
    87e0:	add	ip, pc, #0, 12
    87e4:	add	ip, ip, #45056	; 0xb000
    87e8:	ldr	pc, [ip, #2400]!	; 0x960

000087ec <argp_usage@plt>:
    87ec:	add	ip, pc, #0, 12
    87f0:	add	ip, ip, #45056	; 0xb000
    87f4:	ldr	pc, [ip, #2392]!	; 0x958

000087f8 <strncmp@plt>:
    87f8:	add	ip, pc, #0, 12
    87fc:	add	ip, ip, #45056	; 0xb000
    8800:	ldr	pc, [ip, #2384]!	; 0x950

00008804 <abort@plt>:
    8804:	add	ip, pc, #0, 12
    8808:	add	ip, ip, #45056	; 0xb000
    880c:	ldr	pc, [ip, #2376]!	; 0x948

00008810 <__assert_fail@plt>:
    8810:	add	ip, pc, #0, 12
    8814:	add	ip, ip, #45056	; 0xb000
    8818:	ldr	pc, [ip, #2368]!	; 0x940

Disassembly of section .text:

00008820 <.text>:
    8820:	mov	fp, #0
    8824:	mov	lr, #0
    8828:	pop	{r1}		; (ldr r1, [sp], #4)
    882c:	mov	r2, sp
    8830:	push	{r2}		; (str r2, [sp, #-4]!)
    8834:	push	{r0}		; (str r0, [sp, #-4]!)
    8838:	ldr	ip, [pc, #16]	; 8850 <__assert_fail@plt+0x40>
    883c:	push	{ip}		; (str ip, [sp, #-4]!)
    8840:	ldr	r0, [pc, #12]	; 8854 <__assert_fail@plt+0x44>
    8844:	ldr	r3, [pc, #12]	; 8858 <__assert_fail@plt+0x48>
    8848:	bl	875c <__libc_start_main@plt>
    884c:	bl	8804 <abort@plt>
    8850:	andeq	sl, r0, r4, lsl lr
    8854:	andeq	r9, r0, r4, ror r7
    8858:			; <UNDEFINED> instruction: 0x0000adb4
    885c:	ldr	r3, [pc, #20]	; 8878 <__assert_fail@plt+0x68>
    8860:	ldr	r2, [pc, #20]	; 887c <__assert_fail@plt+0x6c>
    8864:	add	r3, pc, r3
    8868:	ldr	r3, [r3, r2]
    886c:	cmp	r3, #0
    8870:	bxeq	lr
    8874:	b	8774 <__gmon_start__@plt>
    8878:	muleq	r0, r0, r8
    887c:	andeq	r0, r0, r0, rrx
    8880:	ldr	r3, [pc, #16]	; 8898 <__assert_fail@plt+0x88>
    8884:	ldrb	r2, [r3]
    8888:	cmp	r2, #0
    888c:	moveq	r2, #1
    8890:	strbeq	r2, [r3]
    8894:	bx	lr
    8898:	andeq	r4, r1, ip, ror #6
    889c:	ldr	r0, [pc, #32]	; 88c4 <__assert_fail@plt+0xb4>
    88a0:	push	{r3, lr}
    88a4:	ldr	r3, [r0]
    88a8:	cmp	r3, #0
    88ac:	popeq	{r3, pc}
    88b0:	ldr	r3, [pc, #16]	; 88c8 <__assert_fail@plt+0xb8>
    88b4:	cmp	r3, #0
    88b8:	popeq	{r3, pc}
    88bc:	blx	r3
    88c0:	pop	{r3, pc}
    88c4:	andeq	r4, r1, r8
	...
    88d0:	push	{fp, lr}
    88d4:	add	fp, sp, #4
    88d8:	sub	sp, sp, #48	; 0x30
    88dc:	str	r0, [fp, #-40]	; 0xffffffd8
    88e0:	str	r1, [fp, #-44]	; 0xffffffd4
    88e4:	str	r2, [fp, #-48]	; 0xffffffd0
    88e8:	ldr	r3, [fp, #-48]	; 0xffffffd0
    88ec:	ldr	r3, [r3, #28]
    88f0:	str	r3, [fp, #-8]
    88f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
    88f8:	sub	r3, r3, #98	; 0x62
    88fc:	cmp	r3, #18
    8900:	ldrls	pc, [pc, r3, lsl #2]
    8904:	b	8abc <__assert_fail@plt+0x2ac>
    8908:			; <UNDEFINED> instruction: 0x000089b8
    890c:	andeq	r8, r0, r4, asr r9
    8910:			; <UNDEFINED> instruction: 0x00008abc
    8914:			; <UNDEFINED> instruction: 0x00008abc
    8918:			; <UNDEFINED> instruction: 0x00008abc
    891c:			; <UNDEFINED> instruction: 0x00008abc
    8920:			; <UNDEFINED> instruction: 0x00008abc
    8924:			; <UNDEFINED> instruction: 0x00008abc
    8928:			; <UNDEFINED> instruction: 0x00008abc
    892c:			; <UNDEFINED> instruction: 0x00008abc
    8930:			; <UNDEFINED> instruction: 0x00008abc
    8934:			; <UNDEFINED> instruction: 0x00008abc
    8938:			; <UNDEFINED> instruction: 0x00008abc
    893c:			; <UNDEFINED> instruction: 0x00008abc
    8940:	andeq	r8, r0, ip, lsr #21
    8944:			; <UNDEFINED> instruction: 0x00008abc
    8948:			; <UNDEFINED> instruction: 0x00008abc
    894c:			; <UNDEFINED> instruction: 0x00008abc
    8950:	andeq	r8, r0, ip, lsl sl
    8954:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8958:	sub	r3, fp, #24
    895c:	mov	r0, r2
    8960:	mov	r1, r3
    8964:	mov	r2, #10
    8968:	bl	8720 <strtol@plt>
    896c:	str	r0, [fp, #-12]
    8970:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8974:	ldr	r3, [fp, #-44]	; 0xffffffd4
    8978:	cmp	r2, r3
    897c:	beq	899c <__assert_fail@plt+0x18c>
    8980:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8984:	ldrb	r3, [r3]
    8988:	cmp	r3, #0
    898c:	bne	899c <__assert_fail@plt+0x18c>
    8990:	ldr	r3, [fp, #-12]
    8994:	cmp	r3, #0
    8998:	bge	89a8 <__assert_fail@plt+0x198>
    899c:	ldr	r0, [fp, #-48]	; 0xffffffd0
    89a0:	bl	87ec <argp_usage@plt>
    89a4:	b	8ac4 <__assert_fail@plt+0x2b4>
    89a8:	ldr	r2, [fp, #-12]
    89ac:	ldr	r3, [fp, #-8]
    89b0:	str	r2, [r3, #20]
    89b4:	b	8ac4 <__assert_fail@plt+0x2b4>
    89b8:	ldr	r2, [fp, #-44]	; 0xffffffd4
    89bc:	sub	r3, fp, #28
    89c0:	mov	r0, r2
    89c4:	mov	r1, r3
    89c8:	mov	r2, #10
    89cc:	bl	8720 <strtol@plt>
    89d0:	str	r0, [fp, #-16]
    89d4:	ldr	r2, [fp, #-28]	; 0xffffffe4
    89d8:	ldr	r3, [fp, #-44]	; 0xffffffd4
    89dc:	cmp	r2, r3
    89e0:	beq	8a00 <__assert_fail@plt+0x1f0>
    89e4:	ldr	r3, [fp, #-28]	; 0xffffffe4
    89e8:	ldrb	r3, [r3]
    89ec:	cmp	r3, #0
    89f0:	bne	8a00 <__assert_fail@plt+0x1f0>
    89f4:	ldr	r3, [fp, #-16]
    89f8:	cmp	r3, #0
    89fc:	bge	8a0c <__assert_fail@plt+0x1fc>
    8a00:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8a04:	bl	87ec <argp_usage@plt>
    8a08:	b	8ac4 <__assert_fail@plt+0x2b4>
    8a0c:	ldr	r2, [fp, #-16]
    8a10:	ldr	r3, [fp, #-8]
    8a14:	str	r2, [r3]
    8a18:	b	8ac4 <__assert_fail@plt+0x2b4>
    8a1c:	ldr	r2, [fp, #-44]	; 0xffffffd4
    8a20:	sub	r3, fp, #32
    8a24:	mov	r0, r2
    8a28:	mov	r1, r3
    8a2c:	mov	r2, #10
    8a30:	bl	8720 <strtol@plt>
    8a34:	str	r0, [fp, #-20]	; 0xffffffec
    8a38:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8a3c:	ldr	r3, [fp, #-44]	; 0xffffffd4
    8a40:	cmp	r2, r3
    8a44:	beq	8a64 <__assert_fail@plt+0x254>
    8a48:	ldr	r3, [fp, #-32]	; 0xffffffe0
    8a4c:	ldrb	r3, [r3]
    8a50:	cmp	r3, #0
    8a54:	bne	8a64 <__assert_fail@plt+0x254>
    8a58:	ldr	r3, [fp, #-20]	; 0xffffffec
    8a5c:	cmp	r3, #0
    8a60:	bge	8a70 <__assert_fail@plt+0x260>
    8a64:	ldr	r0, [fp, #-48]	; 0xffffffd0
    8a68:	bl	87ec <argp_usage@plt>
    8a6c:	b	8ac4 <__assert_fail@plt+0x2b4>
    8a70:	ldr	r1, [fp, #-20]	; 0xffffffec
    8a74:	mov	r2, r1
    8a78:	asr	r3, r2, #31
    8a7c:	ldr	r1, [pc, #80]	; 8ad4 <__assert_fail@plt+0x2c4>
    8a80:	mul	r0, r1, r3
    8a84:	mov	r1, #0
    8a88:	mul	r1, r1, r2
    8a8c:	add	r1, r0, r1
    8a90:	ldr	r0, [pc, #60]	; 8ad4 <__assert_fail@plt+0x2c4>
    8a94:	umull	r2, r3, r2, r0
    8a98:	add	r1, r1, r3
    8a9c:	mov	r3, r1
    8aa0:	ldr	r1, [fp, #-8]
    8aa4:	strd	r2, [r1, #8]
    8aa8:	b	8ac4 <__assert_fail@plt+0x2b4>
    8aac:	ldr	r3, [fp, #-8]
    8ab0:	mov	r2, #1
    8ab4:	str	r2, [r3, #16]
    8ab8:	b	8ac4 <__assert_fail@plt+0x2b4>
    8abc:	mov	r3, #7
    8ac0:	b	8ac8 <__assert_fail@plt+0x2b8>
    8ac4:	mov	r3, #0
    8ac8:	mov	r0, r3
    8acc:	sub	sp, fp, #4
    8ad0:	pop	{fp, pc}
    8ad4:	andeq	r4, pc, r0, asr #4
    8ad8:	push	{fp}		; (str fp, [sp, #-4]!)
    8adc:	add	fp, sp, #0
    8ae0:	sub	sp, sp, #12
    8ae4:	str	r0, [fp, #-8]
    8ae8:	ldr	r3, [pc, #16]	; 8b00 <__assert_fail@plt+0x2f0>
    8aec:	ldr	r2, [fp, #-8]
    8af0:	str	r2, [r3]
    8af4:	add	sp, fp, #0
    8af8:	ldmfd	sp!, {fp}
    8afc:	bx	lr
    8b00:	andeq	r4, r1, r4, lsl r4
    8b04:	push	{r4, r5, fp, lr}
    8b08:	add	fp, sp, #12
    8b0c:	sub	sp, sp, #144	; 0x90
    8b10:	sub	r3, fp, #152	; 0x98
    8b14:	add	r3, r3, #4
    8b18:	mov	r0, r3
    8b1c:	bl	87e0 <sigemptyset@plt>
    8b20:	mov	r3, #0
    8b24:	str	r3, [fp, #-20]	; 0xffffffec
    8b28:	ldr	r3, [pc, #200]	; 8bf8 <__assert_fail@plt+0x3e8>
    8b2c:	str	r3, [fp, #-152]	; 0xffffff68
    8b30:	sub	r3, fp, #152	; 0x98
    8b34:	mov	r0, #15
    8b38:	mov	r1, r3
    8b3c:	mov	r2, #0
    8b40:	bl	8744 <sigaction@plt>
    8b44:	mov	r3, r0
    8b48:	cmp	r3, #0
    8b4c:	bge	8b90 <__assert_fail@plt+0x380>
    8b50:	ldr	r3, [pc, #164]	; 8bfc <__assert_fail@plt+0x3ec>
    8b54:	ldr	r3, [r3]
    8b58:	mov	r5, r3
    8b5c:	ldr	r4, [pc, #156]	; 8c00 <__assert_fail@plt+0x3f0>
    8b60:	bl	8798 <__errno_location@plt>
    8b64:	mov	r3, r0
    8b68:	ldr	r3, [r3]
    8b6c:	mov	r0, r3
    8b70:	bl	8768 <strerror@plt>
    8b74:	mov	r3, r0
    8b78:	mov	r0, r5
    8b7c:	mov	r1, r4
    8b80:	mov	r2, r3
    8b84:	bl	878c <fprintf@plt>
    8b88:	mov	r0, #12
    8b8c:	bl	8780 <exit@plt>
    8b90:	sub	r3, fp, #152	; 0x98
    8b94:	mov	r0, #2
    8b98:	mov	r1, r3
    8b9c:	mov	r2, #0
    8ba0:	bl	8744 <sigaction@plt>
    8ba4:	mov	r3, r0
    8ba8:	cmp	r3, #0
    8bac:	bge	8bf0 <__assert_fail@plt+0x3e0>
    8bb0:	ldr	r3, [pc, #68]	; 8bfc <__assert_fail@plt+0x3ec>
    8bb4:	ldr	r3, [r3]
    8bb8:	mov	r5, r3
    8bbc:	ldr	r4, [pc, #64]	; 8c04 <__assert_fail@plt+0x3f4>
    8bc0:	bl	8798 <__errno_location@plt>
    8bc4:	mov	r3, r0
    8bc8:	ldr	r3, [r3]
    8bcc:	mov	r0, r3
    8bd0:	bl	8768 <strerror@plt>
    8bd4:	mov	r3, r0
    8bd8:	mov	r0, r5
    8bdc:	mov	r1, r4
    8be0:	mov	r2, r3
    8be4:	bl	878c <fprintf@plt>
    8be8:	mov	r0, #12
    8bec:	bl	8780 <exit@plt>
    8bf0:	sub	sp, fp, #12
    8bf4:	pop	{r4, r5, fp, pc}
    8bf8:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
    8bfc:	andeq	r4, r1, r8, ror #6
    8c00:	andeq	fp, r0, ip, lsr #32
    8c04:	andeq	fp, r0, r0, rrx
    8c08:	push	{r4, r5, r6, fp, lr}
    8c0c:	add	fp, sp, #16
    8c10:	sub	sp, sp, #20
    8c14:	str	r0, [fp, #-32]	; 0xffffffe0
    8c18:	str	r1, [fp, #-36]	; 0xffffffdc
    8c1c:	mov	r3, #0
    8c20:	str	r3, [fp, #-24]	; 0xffffffe8
    8c24:	b	8d34 <__assert_fail@plt+0x524>
    8c28:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8c30:	add	r3, r2, r3
    8c34:	mov	r0, #0
    8c38:	mov	r1, r3
    8c3c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    8c40:	bl	872c <read@plt>
    8c44:	str	r0, [fp, #-28]	; 0xffffffe4
    8c48:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8c4c:	cmp	r3, #0
    8c50:	bge	8c98 <__assert_fail@plt+0x488>
    8c54:	ldr	r3, [pc, #348]	; 8db8 <__assert_fail@plt+0x5a8>
    8c58:	ldr	r3, [r3]
    8c5c:	cmp	r3, #0
    8c60:	beq	8c6c <__assert_fail@plt+0x45c>
    8c64:	mvn	r3, #0
    8c68:	b	8dac <__assert_fail@plt+0x59c>
    8c6c:	bl	8798 <__errno_location@plt>
    8c70:	mov	r3, r0
    8c74:	ldr	r3, [r3]
    8c78:	cmp	r3, #11
    8c7c:	beq	8d30 <__assert_fail@plt+0x520>
    8c80:	bl	8798 <__errno_location@plt>
    8c84:	mov	r3, r0
    8c88:	ldr	r3, [r3]
    8c8c:	cmp	r3, #4
    8c90:	bne	8d44 <__assert_fail@plt+0x534>
    8c94:	b	8d30 <__assert_fail@plt+0x520>
    8c98:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8c9c:	cmp	r3, #0
    8ca0:	bne	8ce8 <__assert_fail@plt+0x4d8>
    8ca4:	ldr	r3, [pc, #272]	; 8dbc <__assert_fail@plt+0x5ac>
    8ca8:	ldr	r3, [r3]
    8cac:	ldr	r3, [r3, #16]
    8cb0:	cmp	r3, #0
    8cb4:	bne	8ce0 <__assert_fail@plt+0x4d0>
    8cb8:	ldr	r3, [pc, #256]	; 8dc0 <__assert_fail@plt+0x5b0>
    8cbc:	ldr	r3, [r3]
    8cc0:	mov	r1, r3
    8cc4:	ldr	r2, [pc, #248]	; 8dc4 <__assert_fail@plt+0x5b4>
    8cc8:	ldr	r3, [pc, #248]	; 8dc8 <__assert_fail@plt+0x5b8>
    8ccc:	ldr	r3, [r3]
    8cd0:	mov	r0, r1
    8cd4:	mov	r1, r2
    8cd8:	mov	r2, r3
    8cdc:	bl	878c <fprintf@plt>
    8ce0:	mvn	r3, #0
    8ce4:	b	8dac <__assert_fail@plt+0x59c>
    8ce8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8cec:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8cf0:	add	r3, r2, r3
    8cf4:	str	r3, [fp, #-24]	; 0xffffffe8
    8cf8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8cfc:	ldr	r2, [fp, #-36]	; 0xffffffdc
    8d00:	rsb	r3, r3, r2
    8d04:	str	r3, [fp, #-36]	; 0xffffffdc
    8d08:	ldr	r3, [pc, #188]	; 8dcc <__assert_fail@plt+0x5bc>
    8d0c:	ldrd	r0, [r3, #56]	; 0x38
    8d10:	ldr	ip, [fp, #-28]	; 0xffffffe4
    8d14:	mov	r2, ip
    8d18:	asr	r3, r2, #31
    8d1c:	adds	r2, r2, r0
    8d20:	adc	r3, r3, r1
    8d24:	ldr	r1, [pc, #160]	; 8dcc <__assert_fail@plt+0x5bc>
    8d28:	strd	r2, [r1, #56]	; 0x38
    8d2c:	b	8d34 <__assert_fail@plt+0x524>
    8d30:	nop			; (mov r0, r0)
    8d34:	ldr	r3, [fp, #-36]	; 0xffffffdc
    8d38:	cmp	r3, #0
    8d3c:	bne	8c28 <__assert_fail@plt+0x418>
    8d40:	b	8d48 <__assert_fail@plt+0x538>
    8d44:	nop			; (mov r0, r0)
    8d48:	ldr	r3, [fp, #-36]	; 0xffffffdc
    8d4c:	cmp	r3, #0
    8d50:	beq	8da8 <__assert_fail@plt+0x598>
    8d54:	ldr	r3, [pc, #100]	; 8dc0 <__assert_fail@plt+0x5b0>
    8d58:	ldr	r3, [r3]
    8d5c:	mov	r6, r3
    8d60:	ldr	r5, [pc, #104]	; 8dd0 <__assert_fail@plt+0x5c0>
    8d64:	ldr	r3, [pc, #92]	; 8dc8 <__assert_fail@plt+0x5b8>
    8d68:	ldr	r4, [r3]
    8d6c:	bl	8798 <__errno_location@plt>
    8d70:	mov	r3, r0
    8d74:	ldr	r3, [r3]
    8d78:	mov	r0, r3
    8d7c:	bl	8768 <strerror@plt>
    8d80:	mov	r3, r0
    8d84:	mov	r0, r6
    8d88:	mov	r1, r5
    8d8c:	mov	r2, r4
    8d90:	bl	878c <fprintf@plt>
    8d94:	ldr	r3, [pc, #56]	; 8dd4 <__assert_fail@plt+0x5c4>
    8d98:	mov	r2, #11
    8d9c:	str	r2, [r3]
    8da0:	mvn	r3, #0
    8da4:	b	8dac <__assert_fail@plt+0x59c>
    8da8:	mov	r3, #0
    8dac:	mov	r0, r3
    8db0:	sub	sp, fp, #16
    8db4:	pop	{r4, r5, r6, fp, pc}
    8db8:	andeq	r4, r1, r4, lsl r4
    8dbc:	andeq	r4, r1, r4, lsr r3
    8dc0:	andeq	r4, r1, r8, ror #6
    8dc4:	muleq	r0, r0, r0
    8dc8:	andeq	r4, r1, r8, ror #2
    8dcc:	strdeq	r4, [r1], -r8
    8dd0:	strheq	fp, [r0], -r0
    8dd4:	andeq	r4, r1, r0, lsl r4
    8dd8:	push	{r4, r5, r6, fp, lr}
    8ddc:	add	fp, sp, #16
    8de0:	sub	sp, sp, #20
    8de4:	str	r0, [fp, #-32]	; 0xffffffe0
    8de8:	str	r1, [fp, #-36]	; 0xffffffdc
    8dec:	mov	r3, #0
    8df0:	str	r3, [fp, #-24]	; 0xffffffe8
    8df4:	b	8efc <__assert_fail@plt+0x6ec>
    8df8:	ldr	r2, [fp, #-32]	; 0xffffffe0
    8dfc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    8e00:	add	r3, r2, r3
    8e04:	mov	r0, #1
    8e08:	mov	r1, r3
    8e0c:	ldr	r2, [fp, #-36]	; 0xffffffdc
    8e10:	bl	87d4 <write@plt>
    8e14:	str	r0, [fp, #-28]	; 0xffffffe4
    8e18:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8e1c:	cmp	r3, #0
    8e20:	bge	8e68 <__assert_fail@plt+0x658>
    8e24:	ldr	r3, [pc, #340]	; 8f80 <__assert_fail@plt+0x770>
    8e28:	ldr	r3, [r3]
    8e2c:	cmp	r3, #0
    8e30:	beq	8e3c <__assert_fail@plt+0x62c>
    8e34:	mvn	r3, #0
    8e38:	b	8f74 <__assert_fail@plt+0x764>
    8e3c:	bl	8798 <__errno_location@plt>
    8e40:	mov	r3, r0
    8e44:	ldr	r3, [r3]
    8e48:	cmp	r3, #11
    8e4c:	beq	8ef8 <__assert_fail@plt+0x6e8>
    8e50:	bl	8798 <__errno_location@plt>
    8e54:	mov	r3, r0
    8e58:	ldr	r3, [r3]
    8e5c:	cmp	r3, #4
    8e60:	bne	8f0c <__assert_fail@plt+0x6fc>
    8e64:	b	8ef8 <__assert_fail@plt+0x6e8>
    8e68:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8e6c:	cmp	r3, #0
    8e70:	bne	8eb0 <__assert_fail@plt+0x6a0>
    8e74:	ldr	r3, [pc, #264]	; 8f84 <__assert_fail@plt+0x774>
    8e78:	ldr	r3, [r3]
    8e7c:	mov	r1, r3
    8e80:	ldr	r2, [pc, #256]	; 8f88 <__assert_fail@plt+0x778>
    8e84:	ldr	r3, [pc, #256]	; 8f8c <__assert_fail@plt+0x77c>
    8e88:	ldr	r3, [r3]
    8e8c:	mov	r0, r1
    8e90:	mov	r1, r2
    8e94:	mov	r2, r3
    8e98:	bl	878c <fprintf@plt>
    8e9c:	ldr	r3, [pc, #236]	; 8f90 <__assert_fail@plt+0x780>
    8ea0:	mov	r2, #11
    8ea4:	str	r2, [r3]
    8ea8:	mvn	r3, #0
    8eac:	b	8f74 <__assert_fail@plt+0x764>
    8eb0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8eb4:	ldr	r2, [fp, #-24]	; 0xffffffe8
    8eb8:	add	r3, r2, r3
    8ebc:	str	r3, [fp, #-24]	; 0xffffffe8
    8ec0:	ldr	r3, [fp, #-28]	; 0xffffffe4
    8ec4:	ldr	r2, [fp, #-36]	; 0xffffffdc
    8ec8:	rsb	r3, r3, r2
    8ecc:	str	r3, [fp, #-36]	; 0xffffffdc
    8ed0:	ldr	r3, [pc, #188]	; 8f94 <__assert_fail@plt+0x784>
    8ed4:	ldrd	r0, [r3, #64]	; 0x40
    8ed8:	ldr	ip, [fp, #-28]	; 0xffffffe4
    8edc:	mov	r2, ip
    8ee0:	asr	r3, r2, #31
    8ee4:	adds	r2, r2, r0
    8ee8:	adc	r3, r3, r1
    8eec:	ldr	r1, [pc, #160]	; 8f94 <__assert_fail@plt+0x784>
    8ef0:	strd	r2, [r1, #64]	; 0x40
    8ef4:	b	8efc <__assert_fail@plt+0x6ec>
    8ef8:	nop			; (mov r0, r0)
    8efc:	ldr	r3, [fp, #-36]	; 0xffffffdc
    8f00:	cmp	r3, #0
    8f04:	bne	8df8 <__assert_fail@plt+0x5e8>
    8f08:	b	8f10 <__assert_fail@plt+0x700>
    8f0c:	nop			; (mov r0, r0)
    8f10:	ldr	r3, [fp, #-36]	; 0xffffffdc
    8f14:	cmp	r3, #0
    8f18:	beq	8f70 <__assert_fail@plt+0x760>
    8f1c:	ldr	r3, [pc, #96]	; 8f84 <__assert_fail@plt+0x774>
    8f20:	ldr	r3, [r3]
    8f24:	mov	r6, r3
    8f28:	ldr	r5, [pc, #104]	; 8f98 <__assert_fail@plt+0x788>
    8f2c:	ldr	r3, [pc, #88]	; 8f8c <__assert_fail@plt+0x77c>
    8f30:	ldr	r4, [r3]
    8f34:	bl	8798 <__errno_location@plt>
    8f38:	mov	r3, r0
    8f3c:	ldr	r3, [r3]
    8f40:	mov	r0, r3
    8f44:	bl	8768 <strerror@plt>
    8f48:	mov	r3, r0
    8f4c:	mov	r0, r6
    8f50:	mov	r1, r5
    8f54:	mov	r2, r4
    8f58:	bl	878c <fprintf@plt>
    8f5c:	ldr	r3, [pc, #44]	; 8f90 <__assert_fail@plt+0x780>
    8f60:	mov	r2, #11
    8f64:	str	r2, [r3]
    8f68:	mvn	r3, #0
    8f6c:	b	8f74 <__assert_fail@plt+0x764>
    8f70:	mov	r3, #0
    8f74:	mov	r0, r3
    8f78:	sub	sp, fp, #16
    8f7c:	pop	{r4, r5, r6, fp, pc}
    8f80:	andeq	r4, r1, r4, lsl r4
    8f84:	andeq	r4, r1, r8, ror #6
    8f88:	andeq	fp, r0, ip, asr #1
    8f8c:	andeq	r4, r1, r8, ror #2
    8f90:	andeq	r4, r1, r0, lsl r4
    8f94:	strdeq	r4, [r1], -r8
    8f98:	andeq	fp, r0, r4, ror #1
    8f9c:	push	{fp, lr}
    8fa0:	add	fp, sp, #4
    8fa4:	ldr	r3, [pc, #52]	; 8fe0 <__assert_fail@plt+0x7d0>
    8fa8:	mov	r2, r3
    8fac:	mov	r3, #176	; 0xb0
    8fb0:	mov	r0, r2
    8fb4:	mov	r1, #0
    8fb8:	mov	r2, r3
    8fbc:	bl	87b0 <memset@plt>
    8fc0:	ldr	r0, [pc, #28]	; 8fe4 <__assert_fail@plt+0x7d4>
    8fc4:	mov	r1, #0
    8fc8:	bl	8750 <gettimeofday@plt>
    8fcc:	ldr	r3, [pc, #20]	; 8fe8 <__assert_fail@plt+0x7d8>
    8fd0:	ldr	r3, [r3]
    8fd4:	mov	r0, r3
    8fd8:	bl	a080 <__assert_fail@plt+0x1870>
    8fdc:	pop	{fp, pc}
    8fe0:	strdeq	r4, [r1], -r8
    8fe4:	andeq	r4, r1, r0, lsr #29
    8fe8:	andeq	r4, r1, r8, ror #2
    8fec:	push	{r4, r5, r6, r7, fp, lr}
    8ff0:	add	fp, sp, #20
    8ff4:	sub	sp, sp, #288	; 0x120
    8ff8:	ldr	r1, [pc, #808]	; 9328 <__assert_fail@plt+0xb18>
    8ffc:	ldr	r1, [r1]
    9000:	mov	r7, r1
    9004:	ldr	r6, [pc, #800]	; 932c <__assert_fail@plt+0xb1c>
    9008:	ldr	r1, [pc, #800]	; 9330 <__assert_fail@plt+0xb20>
    900c:	ldrd	r0, [r1, #56]	; 0x38
    9010:	lsr	ip, r0, #29
    9014:	lsl	r3, r1, #3
    9018:	orr	r3, ip, r3
    901c:	lsl	r2, r0, #3
    9020:	sub	r1, fp, #280	; 0x118
    9024:	strd	r2, [sp]
    9028:	mov	r0, r1
    902c:	mov	r1, #256	; 0x100
    9030:	ldr	r2, [pc, #764]	; 9334 <__assert_fail@plt+0xb24>
    9034:	bl	a3a0 <__assert_fail@plt+0x1b90>
    9038:	mov	r3, r0
    903c:	mov	r0, r7
    9040:	mov	r1, r6
    9044:	mov	r2, r3
    9048:	bl	878c <fprintf@plt>
    904c:	ldr	r3, [pc, #740]	; 9338 <__assert_fail@plt+0xb28>
    9050:	ldr	r3, [r3]
    9054:	ldr	r3, [r3, #16]
    9058:	cmp	r3, #0
    905c:	beq	90b4 <__assert_fail@plt+0x8a4>
    9060:	ldr	r3, [pc, #704]	; 9328 <__assert_fail@plt+0xb18>
    9064:	ldr	r3, [r3]
    9068:	mov	r7, r3
    906c:	ldr	r6, [pc, #696]	; 932c <__assert_fail@plt+0xb1c>
    9070:	ldr	r3, [pc, #696]	; 9330 <__assert_fail@plt+0xb20>
    9074:	ldrd	r2, [r3, #64]	; 0x40
    9078:	lsr	r1, r2, #29
    907c:	lsl	r5, r3, #3
    9080:	orr	r5, r1, r5
    9084:	lsl	r4, r2, #3
    9088:	sub	r3, fp, #280	; 0x118
    908c:	strd	r4, [sp]
    9090:	mov	r0, r3
    9094:	mov	r1, #256	; 0x100
    9098:	ldr	r2, [pc, #668]	; 933c <__assert_fail@plt+0xb2c>
    909c:	bl	a3a0 <__assert_fail@plt+0x1b90>
    90a0:	mov	r3, r0
    90a4:	mov	r0, r7
    90a8:	mov	r1, r6
    90ac:	mov	r2, r3
    90b0:	bl	878c <fprintf@plt>
    90b4:	ldr	r3, [pc, #620]	; 9328 <__assert_fail@plt+0xb18>
    90b8:	ldr	r3, [r3]
    90bc:	mov	r5, r3
    90c0:	ldr	r4, [pc, #612]	; 932c <__assert_fail@plt+0xb1c>
    90c4:	ldr	r3, [pc, #612]	; 9330 <__assert_fail@plt+0xb20>
    90c8:	ldrd	r2, [r3, #8]
    90cc:	sub	r1, fp, #280	; 0x118
    90d0:	strd	r2, [sp]
    90d4:	mov	r0, r1
    90d8:	mov	r1, #256	; 0x100
    90dc:	ldr	r2, [pc, #604]	; 9340 <__assert_fail@plt+0xb30>
    90e0:	bl	a3a0 <__assert_fail@plt+0x1b90>
    90e4:	mov	r3, r0
    90e8:	mov	r0, r5
    90ec:	mov	r1, r4
    90f0:	mov	r2, r3
    90f4:	bl	878c <fprintf@plt>
    90f8:	ldr	r3, [pc, #552]	; 9328 <__assert_fail@plt+0xb18>
    90fc:	ldr	r3, [r3]
    9100:	mov	r5, r3
    9104:	ldr	r4, [pc, #544]	; 932c <__assert_fail@plt+0xb1c>
    9108:	ldr	r3, [pc, #544]	; 9330 <__assert_fail@plt+0xb20>
    910c:	ldrd	r2, [r3]
    9110:	sub	r1, fp, #280	; 0x118
    9114:	strd	r2, [sp]
    9118:	mov	r0, r1
    911c:	mov	r1, #256	; 0x100
    9120:	ldr	r2, [pc, #540]	; 9344 <__assert_fail@plt+0xb34>
    9124:	bl	a3a0 <__assert_fail@plt+0x1b90>
    9128:	mov	r3, r0
    912c:	mov	r0, r5
    9130:	mov	r1, r4
    9134:	mov	r2, r3
    9138:	bl	878c <fprintf@plt>
    913c:	mov	r3, #0
    9140:	str	r3, [fp, #-24]	; 0xffffffe8
    9144:	b	91b4 <__assert_fail@plt+0x9a4>
    9148:	ldr	r3, [pc, #472]	; 9328 <__assert_fail@plt+0xb18>
    914c:	ldr	r3, [r3]
    9150:	mov	r5, r3
    9154:	ldr	r4, [pc, #464]	; 932c <__assert_fail@plt+0xb1c>
    9158:	ldr	r3, [pc, #488]	; 9348 <__assert_fail@plt+0xb38>
    915c:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9160:	ldr	ip, [r3, r2, lsl #2]
    9164:	ldr	r2, [pc, #452]	; 9330 <__assert_fail@plt+0xb20>
    9168:	ldr	r3, [fp, #-24]	; 0xffffffe8
    916c:	add	r3, r3, #2
    9170:	lsl	r3, r3, #3
    9174:	add	r3, r2, r3
    9178:	ldrd	r2, [r3]
    917c:	sub	r1, fp, #280	; 0x118
    9180:	strd	r2, [sp]
    9184:	mov	r0, r1
    9188:	mov	r1, #256	; 0x100
    918c:	mov	r2, ip
    9190:	bl	a3a0 <__assert_fail@plt+0x1b90>
    9194:	mov	r3, r0
    9198:	mov	r0, r5
    919c:	mov	r1, r4
    91a0:	mov	r2, r3
    91a4:	bl	878c <fprintf@plt>
    91a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
    91ac:	add	r3, r3, #1
    91b0:	str	r3, [fp, #-24]	; 0xffffffe8
    91b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
    91b8:	cmp	r3, #4
    91bc:	ble	9148 <__assert_fail@plt+0x938>
    91c0:	ldr	r3, [pc, #352]	; 9328 <__assert_fail@plt+0xb18>
    91c4:	ldr	r3, [r3]
    91c8:	mov	r5, r3
    91cc:	ldr	r4, [pc, #344]	; 932c <__assert_fail@plt+0xb1c>
    91d0:	sub	r1, fp, #280	; 0x118
    91d4:	ldr	r3, [pc, #368]	; 934c <__assert_fail@plt+0xb3c>
    91d8:	str	r3, [sp]
    91dc:	add	r3, pc, #316	; 0x13c
    91e0:	ldrd	r2, [r3]
    91e4:	strd	r2, [sp, #8]
    91e8:	mov	r0, r1
    91ec:	mov	r1, #256	; 0x100
    91f0:	ldr	r2, [pc, #344]	; 9350 <__assert_fail@plt+0xb40>
    91f4:	ldr	r3, [pc, #344]	; 9354 <__assert_fail@plt+0xb44>
    91f8:	bl	a59c <__assert_fail@plt+0x1d8c>
    91fc:	mov	r3, r0
    9200:	mov	r0, r5
    9204:	mov	r1, r4
    9208:	mov	r2, r3
    920c:	bl	878c <fprintf@plt>
    9210:	ldr	r3, [pc, #272]	; 9328 <__assert_fail@plt+0xb18>
    9214:	ldr	r3, [r3]
    9218:	mov	r5, r3
    921c:	ldr	r4, [pc, #264]	; 932c <__assert_fail@plt+0xb1c>
    9220:	sub	r1, fp, #280	; 0x118
    9224:	ldr	r3, [pc, #300]	; 9358 <__assert_fail@plt+0xb48>
    9228:	str	r3, [sp]
    922c:	add	r3, pc, #236	; 0xec
    9230:	ldrd	r2, [r3]
    9234:	strd	r2, [sp, #8]
    9238:	mov	r0, r1
    923c:	mov	r1, #256	; 0x100
    9240:	ldr	r2, [pc, #276]	; 935c <__assert_fail@plt+0xb4c>
    9244:	ldr	r3, [pc, #264]	; 9354 <__assert_fail@plt+0xb44>
    9248:	bl	a59c <__assert_fail@plt+0x1d8c>
    924c:	mov	r3, r0
    9250:	mov	r0, r5
    9254:	mov	r1, r4
    9258:	mov	r2, r3
    925c:	bl	878c <fprintf@plt>
    9260:	ldr	r3, [pc, #208]	; 9338 <__assert_fail@plt+0xb28>
    9264:	ldr	r3, [r3]
    9268:	ldr	r3, [r3, #16]
    926c:	cmp	r3, #0
    9270:	beq	92c4 <__assert_fail@plt+0xab4>
    9274:	ldr	r3, [pc, #172]	; 9328 <__assert_fail@plt+0xb18>
    9278:	ldr	r3, [r3]
    927c:	mov	r5, r3
    9280:	ldr	r4, [pc, #164]	; 932c <__assert_fail@plt+0xb1c>
    9284:	sub	r1, fp, #280	; 0x118
    9288:	ldr	r3, [pc, #208]	; 9360 <__assert_fail@plt+0xb50>
    928c:	str	r3, [sp]
    9290:	add	r3, pc, #136	; 0x88
    9294:	ldrd	r2, [r3]
    9298:	strd	r2, [sp, #8]
    929c:	mov	r0, r1
    92a0:	mov	r1, #256	; 0x100
    92a4:	ldr	r2, [pc, #184]	; 9364 <__assert_fail@plt+0xb54>
    92a8:	ldr	r3, [pc, #164]	; 9354 <__assert_fail@plt+0xb44>
    92ac:	bl	a59c <__assert_fail@plt+0x1d8c>
    92b0:	mov	r3, r0
    92b4:	mov	r0, r5
    92b8:	mov	r1, r4
    92bc:	mov	r2, r3
    92c0:	bl	878c <fprintf@plt>
    92c4:	sub	r3, fp, #288	; 0x120
    92c8:	mov	r0, r3
    92cc:	mov	r1, #0
    92d0:	bl	8750 <gettimeofday@plt>
    92d4:	ldr	r3, [pc, #76]	; 9328 <__assert_fail@plt+0xb18>
    92d8:	ldr	r3, [r3]
    92dc:	mov	r6, r3
    92e0:	ldr	r5, [pc, #128]	; 9368 <__assert_fail@plt+0xb58>
    92e4:	ldr	r3, [pc, #128]	; 936c <__assert_fail@plt+0xb5c>
    92e8:	ldr	r4, [r3]
    92ec:	sub	r3, fp, #288	; 0x120
    92f0:	ldr	r0, [pc, #120]	; 9370 <__assert_fail@plt+0xb60>
    92f4:	mov	r1, r3
    92f8:	bl	a7c8 <__assert_fail@plt+0x1fb8>
    92fc:	mov	r2, r0
    9300:	mov	r3, r1
    9304:	strd	r2, [sp]
    9308:	mov	r0, r6
    930c:	mov	r1, r5
    9310:	mov	r2, r4
    9314:	bl	878c <fprintf@plt>
    9318:	sub	sp, fp, #20
    931c:	pop	{r4, r5, r6, r7, fp, pc}
    9320:	andeq	r4, r0, r0, lsr #28
    9324:	andeq	r0, r0, r0
    9328:	andeq	r4, r1, r8, ror #6
    932c:	andeq	fp, r0, r4, lsl #2
    9330:	strdeq	r4, [r1], -r8
    9334:	andeq	fp, r0, r8, lsl #2
    9338:	andeq	r4, r1, r4, lsr r3
    933c:	andeq	fp, r0, r4, lsr #2
    9340:	andeq	fp, r0, r8, lsr r1
    9344:	andeq	fp, r0, r0, asr r1
    9348:	andeq	r4, r1, r4, asr r3
    934c:	andeq	r4, r1, r0, asr #28
    9350:	andeq	fp, r0, r4, ror #2
    9354:	andeq	fp, r0, r8, ror r1
    9358:	andeq	r4, r1, r0, ror #28
    935c:	andeq	fp, r0, r0, lsl #3
    9360:	andeq	r4, r1, r0, lsl #29
    9364:	muleq	r0, r4, r1
    9368:	andeq	fp, r0, ip, lsr #3
    936c:	andeq	r4, r1, r8, ror #2
    9370:	andeq	r4, r1, r0, lsr #29
    9374:	push	{fp, lr}
    9378:	add	fp, sp, #4
    937c:	sub	sp, sp, #8
    9380:	ldr	r3, [pc, #140]	; 9414 <__assert_fail@plt+0xc04>
    9384:	ldr	r3, [r3]
    9388:	ldr	r3, [r3, #16]
    938c:	cmp	r3, #0
    9390:	beq	93b8 <__assert_fail@plt+0xba8>
    9394:	sub	r3, fp, #8
    9398:	mov	r0, r3
    939c:	mov	r1, #4
    93a0:	bl	8c08 <__assert_fail@plt+0x3f8>
    93a4:	mov	r3, r0
    93a8:	cmp	r3, #0
    93ac:	beq	93b8 <__assert_fail@plt+0xba8>
    93b0:	mov	r0, #1
    93b4:	bl	8780 <exit@plt>
    93b8:	sub	r3, fp, #8
    93bc:	mov	r0, r3
    93c0:	mov	r1, #4
    93c4:	bl	8c08 <__assert_fail@plt+0x3f8>
    93c8:	mov	r3, r0
    93cc:	cmp	r3, #0
    93d0:	beq	93dc <__assert_fail@plt+0xbcc>
    93d4:	mov	r0, #1
    93d8:	bl	8780 <exit@plt>
    93dc:	ldrb	r3, [fp, #-8]
    93e0:	mov	r2, r3
    93e4:	ldrb	r3, [fp, #-7]
    93e8:	lsl	r3, r3, #8
    93ec:	orr	r2, r2, r3
    93f0:	ldrb	r3, [fp, #-6]
    93f4:	lsl	r3, r3, #16
    93f8:	orr	r2, r2, r3
    93fc:	ldrb	r3, [fp, #-5]
    9400:	lsl	r3, r3, #24
    9404:	orr	r3, r2, r3
    9408:	mov	r0, r3
    940c:	sub	sp, fp, #4
    9410:	pop	{fp, pc}
    9414:	andeq	r4, r1, r4, lsr r3
    9418:	push	{fp, lr}
    941c:	add	fp, sp, #4
    9420:	sub	sp, sp, #48	; 0x30
    9424:	mov	r3, #0
    9428:	str	r3, [fp, #-12]
    942c:	ldr	r3, [fp, #-12]
    9430:	str	r3, [fp, #-16]
    9434:	sub	r3, fp, #44	; 0x2c
    9438:	mov	r0, r3
    943c:	mov	r1, #0
    9440:	bl	8750 <gettimeofday@plt>
    9444:	b	971c <__assert_fail@plt+0xf0c>
    9448:	sub	r3, fp, #28
    944c:	mov	r0, r3
    9450:	mov	r1, #0
    9454:	bl	8750 <gettimeofday@plt>
    9458:	ldr	r0, [pc, #748]	; 974c <__assert_fail@plt+0xf3c>
    945c:	ldr	r1, [pc, #748]	; 9750 <__assert_fail@plt+0xf40>
    9460:	bl	8c08 <__assert_fail@plt+0x3f8>
    9464:	mov	r3, r0
    9468:	cmp	r3, #0
    946c:	bne	9730 <__assert_fail@plt+0xf20>
    9470:	sub	r3, fp, #36	; 0x24
    9474:	mov	r0, r3
    9478:	mov	r1, #0
    947c:	bl	8750 <gettimeofday@plt>
    9480:	sub	r2, fp, #28
    9484:	sub	r3, fp, #36	; 0x24
    9488:	mov	r0, r2
    948c:	mov	r1, r3
    9490:	bl	a7c8 <__assert_fail@plt+0x1fb8>
    9494:	mov	r2, r0
    9498:	mov	r3, r1
    949c:	ldr	r0, [pc, #688]	; 9754 <__assert_fail@plt+0xf44>
    94a0:	bl	a280 <__assert_fail@plt+0x1a70>
    94a4:	sub	r3, fp, #28
    94a8:	mov	r0, r3
    94ac:	mov	r1, #0
    94b0:	bl	8750 <gettimeofday@plt>
    94b4:	ldr	r0, [pc, #668]	; 9758 <__assert_fail@plt+0xf48>
    94b8:	ldr	r1, [pc, #652]	; 974c <__assert_fail@plt+0xf3c>
    94bc:	bl	9a6c <__assert_fail@plt+0x125c>
    94c0:	str	r0, [fp, #-20]	; 0xffffffec
    94c4:	sub	r3, fp, #36	; 0x24
    94c8:	mov	r0, r3
    94cc:	mov	r1, #0
    94d0:	bl	8750 <gettimeofday@plt>
    94d4:	sub	r2, fp, #28
    94d8:	sub	r3, fp, #36	; 0x24
    94dc:	mov	r0, r2
    94e0:	mov	r1, r3
    94e4:	bl	a7c8 <__assert_fail@plt+0x1fb8>
    94e8:	mov	r2, r0
    94ec:	mov	r3, r1
    94f0:	ldr	r0, [pc, #612]	; 975c <__assert_fail@plt+0xf4c>
    94f4:	bl	a280 <__assert_fail@plt+0x1a70>
    94f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    94fc:	cmp	r3, #0
    9500:	beq	95a8 <__assert_fail@plt+0xd98>
    9504:	ldr	r3, [pc, #596]	; 9760 <__assert_fail@plt+0xf50>
    9508:	ldrd	r0, [r3]
    950c:	mov	r2, #1
    9510:	mov	r3, #0
    9514:	adds	r2, r2, r0
    9518:	adc	r3, r3, r1
    951c:	ldr	r1, [pc, #572]	; 9760 <__assert_fail@plt+0xf50>
    9520:	strd	r2, [r1]
    9524:	mov	r3, #0
    9528:	str	r3, [fp, #-8]
    952c:	b	9598 <__assert_fail@plt+0xd88>
    9530:	ldr	r3, [pc, #556]	; 9764 <__assert_fail@plt+0xf54>
    9534:	ldr	r2, [fp, #-8]
    9538:	ldr	r2, [r3, r2, lsl #2]
    953c:	ldr	r3, [fp, #-20]	; 0xffffffec
    9540:	and	r3, r2, r3
    9544:	cmp	r3, #0
    9548:	beq	958c <__assert_fail@plt+0xd7c>
    954c:	ldr	r2, [pc, #524]	; 9760 <__assert_fail@plt+0xf50>
    9550:	ldr	r3, [fp, #-8]
    9554:	add	r3, r3, #2
    9558:	lsl	r3, r3, #3
    955c:	add	r3, r2, r3
    9560:	ldrd	r0, [r3]
    9564:	mov	r2, #1
    9568:	mov	r3, #0
    956c:	adds	r2, r2, r0
    9570:	adc	r3, r3, r1
    9574:	ldr	r0, [pc, #484]	; 9760 <__assert_fail@plt+0xf50>
    9578:	ldr	r1, [fp, #-8]
    957c:	add	r1, r1, #2
    9580:	lsl	r1, r1, #3
    9584:	add	r1, r0, r1
    9588:	strd	r2, [r1]
    958c:	ldr	r3, [fp, #-8]
    9590:	add	r3, r3, #1
    9594:	str	r3, [fp, #-8]
    9598:	ldr	r3, [fp, #-8]
    959c:	cmp	r3, #4
    95a0:	ble	9530 <__assert_fail@plt+0xd20>
    95a4:	b	9638 <__assert_fail@plt+0xe28>
    95a8:	ldr	r3, [pc, #432]	; 9760 <__assert_fail@plt+0xf50>
    95ac:	ldrd	r0, [r3, #8]
    95b0:	mov	r2, #1
    95b4:	mov	r3, #0
    95b8:	adds	r2, r2, r0
    95bc:	adc	r3, r3, r1
    95c0:	ldr	r1, [pc, #408]	; 9760 <__assert_fail@plt+0xf50>
    95c4:	strd	r2, [r1, #8]
    95c8:	ldr	r3, [pc, #408]	; 9768 <__assert_fail@plt+0xf58>
    95cc:	ldr	r3, [r3]
    95d0:	ldr	r3, [r3, #16]
    95d4:	cmp	r3, #0
    95d8:	beq	9638 <__assert_fail@plt+0xe28>
    95dc:	sub	r3, fp, #28
    95e0:	mov	r0, r3
    95e4:	mov	r1, #0
    95e8:	bl	8750 <gettimeofday@plt>
    95ec:	ldr	r0, [pc, #344]	; 974c <__assert_fail@plt+0xf3c>
    95f0:	ldr	r1, [pc, #344]	; 9750 <__assert_fail@plt+0xf40>
    95f4:	bl	8dd8 <__assert_fail@plt+0x5c8>
    95f8:	mov	r3, r0
    95fc:	cmp	r3, #0
    9600:	bne	9738 <__assert_fail@plt+0xf28>
    9604:	sub	r3, fp, #36	; 0x24
    9608:	mov	r0, r3
    960c:	mov	r1, #0
    9610:	bl	8750 <gettimeofday@plt>
    9614:	sub	r2, fp, #28
    9618:	sub	r3, fp, #36	; 0x24
    961c:	mov	r0, r2
    9620:	mov	r1, r3
    9624:	bl	a7c8 <__assert_fail@plt+0x1fb8>
    9628:	mov	r2, r0
    962c:	mov	r3, r1
    9630:	ldr	r0, [pc, #308]	; 976c <__assert_fail@plt+0xf5c>
    9634:	bl	a280 <__assert_fail@plt+0x1a70>
    9638:	ldr	r3, [pc, #296]	; 9768 <__assert_fail@plt+0xf58>
    963c:	ldr	r3, [r3]
    9640:	ldr	r3, [r3, #20]
    9644:	cmp	r3, #0
    9648:	beq	9670 <__assert_fail@plt+0xe60>
    964c:	ldr	r3, [fp, #-16]
    9650:	add	r3, r3, #1
    9654:	str	r3, [fp, #-16]
    9658:	ldr	r3, [pc, #264]	; 9768 <__assert_fail@plt+0xf58>
    965c:	ldr	r3, [r3]
    9660:	ldr	r3, [r3, #20]
    9664:	ldr	r2, [fp, #-16]
    9668:	cmp	r2, r3
    966c:	bcs	9740 <__assert_fail@plt+0xf30>
    9670:	sub	r3, fp, #52	; 0x34
    9674:	mov	r0, r3
    9678:	mov	r1, #0
    967c:	bl	8750 <gettimeofday@plt>
    9680:	ldr	r3, [pc, #224]	; 9768 <__assert_fail@plt+0xf58>
    9684:	ldr	r3, [r3]
    9688:	ldr	r3, [r3]
    968c:	cmp	r3, #0
    9690:	beq	96b8 <__assert_fail@plt+0xea8>
    9694:	ldr	r3, [fp, #-12]
    9698:	add	r3, r3, #1
    969c:	str	r3, [fp, #-12]
    96a0:	ldr	r3, [pc, #192]	; 9768 <__assert_fail@plt+0xf58>
    96a4:	ldr	r3, [r3]
    96a8:	ldr	r3, [r3]
    96ac:	ldr	r2, [fp, #-12]
    96b0:	cmp	r2, r3
    96b4:	bcs	9700 <__assert_fail@plt+0xef0>
    96b8:	ldr	r3, [pc, #168]	; 9768 <__assert_fail@plt+0xf58>
    96bc:	ldr	r3, [r3]
    96c0:	ldrd	r2, [r3, #8]
    96c4:	orrs	r1, r2, r3
    96c8:	beq	971c <__assert_fail@plt+0xf0c>
    96cc:	sub	r2, fp, #44	; 0x2c
    96d0:	sub	r3, fp, #52	; 0x34
    96d4:	mov	r0, r2
    96d8:	mov	r1, r3
    96dc:	bl	a7c8 <__assert_fail@plt+0x1fb8>
    96e0:	mov	r2, r0
    96e4:	mov	r3, r1
    96e8:	ldr	r1, [pc, #120]	; 9768 <__assert_fail@plt+0xf58>
    96ec:	ldr	r1, [r1]
    96f0:	ldrd	r0, [r1, #8]
    96f4:	cmp	r1, r3
    96f8:	cmpeq	r0, r2
    96fc:	bcs	971c <__assert_fail@plt+0xf0c>
    9700:	bl	8fec <__assert_fail@plt+0x7dc>
    9704:	sub	r3, fp, #44	; 0x2c
    9708:	mov	r0, r3
    970c:	mov	r1, #0
    9710:	bl	8750 <gettimeofday@plt>
    9714:	mov	r3, #0
    9718:	str	r3, [fp, #-12]
    971c:	ldr	r3, [pc, #76]	; 9770 <__assert_fail@plt+0xf60>
    9720:	ldr	r3, [r3]
    9724:	cmp	r3, #0
    9728:	beq	9448 <__assert_fail@plt+0xc38>
    972c:	b	9744 <__assert_fail@plt+0xf34>
    9730:	nop			; (mov r0, r0)
    9734:	b	9744 <__assert_fail@plt+0xf34>
    9738:	nop			; (mov r0, r0)
    973c:	b	9744 <__assert_fail@plt+0xf34>
    9740:	nop			; (mov r0, r0)
    9744:	sub	sp, fp, #4
    9748:	pop	{fp, pc}
    974c:	andeq	r4, r1, r0, lsr r4
    9750:	andeq	r0, r0, r4, asr #19
    9754:	andeq	r4, r1, r0, asr #28
    9758:	andeq	r4, r1, r8, lsl #7
    975c:	andeq	r4, r1, r0, ror #28
    9760:	strdeq	r4, [r1], -r8
    9764:	muleq	r0, ip, r2
    9768:	andeq	r4, r1, r4, lsr r3
    976c:	andeq	r4, r1, r0, lsl #29
    9770:	andeq	r4, r1, r4, lsl r4
    9774:	push	{fp, lr}
    9778:	add	fp, sp, #4
    977c:	sub	sp, sp, #16
    9780:	str	r0, [fp, #-8]
    9784:	str	r1, [fp, #-12]
    9788:	ldr	r3, [pc, #268]	; 989c <__assert_fail@plt+0x108c>
    978c:	ldr	r2, [pc, #268]	; 98a0 <__assert_fail@plt+0x1090>
    9790:	ldr	r2, [r2]
    9794:	mov	r1, #0
    9798:	str	r1, [sp]
    979c:	str	r2, [sp, #4]
    97a0:	mov	r0, r3
    97a4:	ldr	r1, [fp, #-8]
    97a8:	ldr	r2, [fp, #-12]
    97ac:	mov	r3, #0
    97b0:	bl	87c8 <argp_parse@plt>
    97b4:	ldr	r3, [pc, #228]	; 98a0 <__assert_fail@plt+0x1090>
    97b8:	ldr	r3, [r3]
    97bc:	ldr	r3, [r3, #16]
    97c0:	cmp	r3, #0
    97c4:	bne	97f0 <__assert_fail@plt+0xfe0>
    97c8:	ldr	r3, [pc, #212]	; 98a4 <__assert_fail@plt+0x1094>
    97cc:	ldr	r3, [r3]
    97d0:	mov	r1, r3
    97d4:	ldr	r2, [pc, #204]	; 98a8 <__assert_fail@plt+0x1098>
    97d8:	ldr	r3, [pc, #204]	; 98ac <__assert_fail@plt+0x109c>
    97dc:	ldr	r3, [r3]
    97e0:	mov	r0, r1
    97e4:	mov	r1, r2
    97e8:	mov	r2, r3
    97ec:	bl	878c <fprintf@plt>
    97f0:	bl	8b04 <__assert_fail@plt+0x2f4>
    97f4:	bl	8f9c <__assert_fail@plt+0x78c>
    97f8:	ldr	r3, [pc, #160]	; 98a0 <__assert_fail@plt+0x1090>
    97fc:	ldr	r3, [r3]
    9800:	ldr	r3, [r3, #16]
    9804:	cmp	r3, #0
    9808:	bne	9834 <__assert_fail@plt+0x1024>
    980c:	ldr	r3, [pc, #144]	; 98a4 <__assert_fail@plt+0x1094>
    9810:	ldr	r3, [r3]
    9814:	mov	r1, r3
    9818:	ldr	r2, [pc, #144]	; 98b0 <__assert_fail@plt+0x10a0>
    981c:	ldr	r3, [pc, #144]	; 98b4 <__assert_fail@plt+0x10a4>
    9820:	ldr	r3, [r3]
    9824:	mov	r0, r1
    9828:	mov	r1, r2
    982c:	mov	r2, r3
    9830:	bl	878c <fprintf@plt>
    9834:	bl	9374 <__assert_fail@plt+0xb64>
    9838:	mov	r3, r0
    983c:	ldr	r0, [pc, #116]	; 98b8 <__assert_fail@plt+0x10a8>
    9840:	mov	r1, r3
    9844:	bl	9fd0 <__assert_fail@plt+0x17c0>
    9848:	bl	9418 <__assert_fail@plt+0xc08>
    984c:	bl	8fec <__assert_fail@plt+0x7dc>
    9850:	ldr	r3, [pc, #100]	; 98bc <__assert_fail@plt+0x10ac>
    9854:	ldr	r3, [r3]
    9858:	cmp	r3, #0
    985c:	bne	988c <__assert_fail@plt+0x107c>
    9860:	ldr	r3, [pc, #88]	; 98c0 <__assert_fail@plt+0x10b0>
    9864:	ldrd	r2, [r3]
    9868:	orrs	r1, r2, r3
    986c:	bne	9880 <__assert_fail@plt+0x1070>
    9870:	ldr	r3, [pc, #72]	; 98c0 <__assert_fail@plt+0x10b0>
    9874:	ldrd	r2, [r3, #8]
    9878:	orrs	r1, r2, r3
    987c:	bne	988c <__assert_fail@plt+0x107c>
    9880:	ldr	r3, [pc, #52]	; 98bc <__assert_fail@plt+0x10ac>
    9884:	mov	r2, #1
    9888:	str	r2, [r3]
    988c:	ldr	r3, [pc, #40]	; 98bc <__assert_fail@plt+0x10ac>
    9890:	ldr	r3, [r3]
    9894:	mov	r0, r3
    9898:	bl	8780 <exit@plt>
    989c:	andeq	r4, r1, r8, lsr r3
    98a0:	andeq	r4, r1, r4, lsr r3
    98a4:	andeq	r4, r1, r8, ror #6
    98a8:	ldrdeq	fp, [r0], -r4
    98ac:	andeq	r4, r1, ip, ror #2
    98b0:	ldrdeq	fp, [r0], -ip
    98b4:	andeq	r4, r1, r8, ror #2
    98b8:	andeq	r4, r1, r8, lsl #7
    98bc:	andeq	r4, r1, r0, lsl r4
    98c0:	strdeq	r4, [r1], -r8
    98c4:	nop			; (mov r0, r0)
    98c8:	push	{fp}		; (str fp, [sp, #-4]!)
    98cc:	add	fp, sp, #0
    98d0:	sub	sp, sp, #20
    98d4:	str	r0, [fp, #-16]
    98d8:	str	r1, [fp, #-20]	; 0xffffffec
    98dc:	ldr	r3, [fp, #-20]	; 0xffffffec
    98e0:	lsr	r3, r3, #4
    98e4:	ldr	r2, [fp, #-16]
    98e8:	ldr	r2, [r2, r3, lsl #2]
    98ec:	add	r1, r2, #1
    98f0:	ldr	r2, [fp, #-16]
    98f4:	str	r1, [r2, r3, lsl #2]
    98f8:	ldr	r3, [fp, #-20]	; 0xffffffec
    98fc:	and	r3, r3, #15
    9900:	ldr	r2, [fp, #-16]
    9904:	ldr	r2, [r2, r3, lsl #2]
    9908:	add	r1, r2, #1
    990c:	ldr	r2, [fp, #-16]
    9910:	str	r1, [r2, r3, lsl #2]
    9914:	mov	r3, #7
    9918:	str	r3, [fp, #-8]
    991c:	b	9a54 <__assert_fail@plt+0x1244>
    9920:	ldr	r3, [fp, #-16]
    9924:	ldr	r2, [r3, #112]	; 0x70
    9928:	ldr	r1, [fp, #-20]	; 0xffffffec
    992c:	ldr	r3, [fp, #-8]
    9930:	lsr	r3, r1, r3
    9934:	and	r1, r3, #1
    9938:	ldr	r3, [fp, #-16]
    993c:	str	r1, [r3, #120]	; 0x78
    9940:	ldr	r3, [fp, #-16]
    9944:	ldr	r3, [r3, #120]	; 0x78
    9948:	add	r2, r2, r3
    994c:	ldr	r3, [fp, #-16]
    9950:	str	r2, [r3, #112]	; 0x70
    9954:	ldr	r3, [fp, #-16]
    9958:	ldr	r2, [r3, #120]	; 0x78
    995c:	ldr	r3, [fp, #-16]
    9960:	ldr	r3, [r3, #124]	; 0x7c
    9964:	cmp	r2, r3
    9968:	beq	9a34 <__assert_fail@plt+0x1224>
    996c:	ldr	r3, [fp, #-16]
    9970:	ldr	r3, [r3, #116]	; 0x74
    9974:	cmp	r3, #4
    9978:	bgt	99c0 <__assert_fail@plt+0x11b0>
    997c:	ldr	r3, [fp, #-16]
    9980:	ldr	r1, [r3, #116]	; 0x74
    9984:	ldr	r3, [fp, #-16]
    9988:	ldr	r2, [r3, #120]	; 0x78
    998c:	mov	r3, r2
    9990:	lsl	r3, r3, #1
    9994:	add	r3, r3, r2
    9998:	lsl	r3, r3, #1
    999c:	add	r3, r1, r3
    99a0:	ldr	r2, [fp, #-16]
    99a4:	add	r1, r3, #16
    99a8:	ldr	r2, [r2, r1, lsl #2]
    99ac:	add	r1, r2, #1
    99b0:	ldr	r2, [fp, #-16]
    99b4:	add	r3, r3, #16
    99b8:	str	r1, [r2, r3, lsl #2]
    99bc:	b	99f8 <__assert_fail@plt+0x11e8>
    99c0:	ldr	r3, [fp, #-16]
    99c4:	ldr	r2, [r3, #120]	; 0x78
    99c8:	mov	r3, r2
    99cc:	lsl	r3, r3, #1
    99d0:	add	r3, r3, r2
    99d4:	lsl	r3, r3, #1
    99d8:	add	r3, r3, #5
    99dc:	ldr	r2, [fp, #-16]
    99e0:	add	r1, r3, #16
    99e4:	ldr	r2, [r2, r1, lsl #2]
    99e8:	add	r1, r2, #1
    99ec:	ldr	r2, [fp, #-16]
    99f0:	add	r3, r3, #16
    99f4:	str	r1, [r2, r3, lsl #2]
    99f8:	ldr	r3, [fp, #-16]
    99fc:	ldr	r3, [r3, #116]	; 0x74
    9a00:	cmp	r3, #24
    9a04:	ble	9a14 <__assert_fail@plt+0x1204>
    9a08:	ldr	r3, [fp, #-16]
    9a0c:	mov	r2, #1
    9a10:	str	r2, [r3, #128]	; 0x80
    9a14:	ldr	r3, [fp, #-16]
    9a18:	mov	r2, #0
    9a1c:	str	r2, [r3, #116]	; 0x74
    9a20:	ldr	r3, [fp, #-16]
    9a24:	ldr	r2, [r3, #120]	; 0x78
    9a28:	ldr	r3, [fp, #-16]
    9a2c:	str	r2, [r3, #124]	; 0x7c
    9a30:	b	9a48 <__assert_fail@plt+0x1238>
    9a34:	ldr	r3, [fp, #-16]
    9a38:	ldr	r3, [r3, #116]	; 0x74
    9a3c:	add	r2, r3, #1
    9a40:	ldr	r3, [fp, #-16]
    9a44:	str	r2, [r3, #116]	; 0x74
    9a48:	ldr	r3, [fp, #-8]
    9a4c:	sub	r3, r3, #1
    9a50:	str	r3, [fp, #-8]
    9a54:	ldr	r3, [fp, #-8]
    9a58:	cmp	r3, #0
    9a5c:	bge	9920 <__assert_fail@plt+0x1110>
    9a60:	add	sp, fp, #0
    9a64:	ldmfd	sp!, {fp}
    9a68:	bx	lr
    9a6c:	push	{fp, lr}
    9a70:	add	fp, sp, #4
    9a74:	sub	sp, sp, #32
    9a78:	str	r0, [fp, #-32]	; 0xffffffe0
    9a7c:	str	r1, [fp, #-36]	; 0xffffffdc
    9a80:	mov	r3, #0
    9a84:	str	r3, [fp, #-16]
    9a88:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9a8c:	cmp	r3, #0
    9a90:	bne	9a9c <__assert_fail@plt+0x128c>
    9a94:	mvn	r3, #0
    9a98:	b	9f98 <__assert_fail@plt+0x1788>
    9a9c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9aa0:	cmp	r3, #0
    9aa4:	bne	9ab0 <__assert_fail@plt+0x12a0>
    9aa8:	mvn	r3, #0
    9aac:	b	9f98 <__assert_fail@plt+0x1788>
    9ab0:	ldr	r3, [fp, #-36]	; 0xffffffdc
    9ab4:	str	r3, [fp, #-20]	; 0xffffffec
    9ab8:	mov	r3, #0
    9abc:	str	r3, [fp, #-8]
    9ac0:	b	9be4 <__assert_fail@plt+0x13d4>
    9ac4:	ldr	r3, [fp, #-8]
    9ac8:	ldr	r2, [fp, #-20]	; 0xffffffec
    9acc:	add	r3, r2, r3
    9ad0:	ldrb	r3, [r3]
    9ad4:	mov	r2, r3
    9ad8:	ldr	r3, [fp, #-8]
    9adc:	add	r3, r3, #1
    9ae0:	ldr	r1, [fp, #-20]	; 0xffffffec
    9ae4:	add	r3, r1, r3
    9ae8:	ldrb	r3, [r3]
    9aec:	lsl	r3, r3, #8
    9af0:	orr	r2, r2, r3
    9af4:	ldr	r3, [fp, #-8]
    9af8:	add	r3, r3, #2
    9afc:	ldr	r1, [fp, #-20]	; 0xffffffec
    9b00:	add	r3, r1, r3
    9b04:	ldrb	r3, [r3]
    9b08:	lsl	r3, r3, #16
    9b0c:	orr	r2, r2, r3
    9b10:	ldr	r3, [fp, #-8]
    9b14:	add	r3, r3, #3
    9b18:	ldr	r1, [fp, #-20]	; 0xffffffec
    9b1c:	add	r3, r1, r3
    9b20:	ldrb	r3, [r3]
    9b24:	lsl	r3, r3, #24
    9b28:	orr	r3, r2, r3
    9b2c:	str	r3, [fp, #-24]	; 0xffffffe8
    9b30:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9b34:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9b38:	ldr	r3, [r3, #132]	; 0x84
    9b3c:	cmp	r2, r3
    9b40:	bne	9b50 <__assert_fail@plt+0x1340>
    9b44:	ldr	r3, [fp, #-16]
    9b48:	orr	r3, r3, #16
    9b4c:	str	r3, [fp, #-16]
    9b50:	ldr	r2, [fp, #-24]	; 0xffffffe8
    9b54:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9b58:	str	r2, [r3, #132]	; 0x84
    9b5c:	ldr	r3, [fp, #-8]
    9b60:	ldr	r2, [fp, #-20]	; 0xffffffec
    9b64:	add	r3, r2, r3
    9b68:	ldrb	r3, [r3]
    9b6c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    9b70:	mov	r1, r3
    9b74:	bl	98c8 <__assert_fail@plt+0x10b8>
    9b78:	ldr	r3, [fp, #-8]
    9b7c:	add	r3, r3, #1
    9b80:	ldr	r2, [fp, #-20]	; 0xffffffec
    9b84:	add	r3, r2, r3
    9b88:	ldrb	r3, [r3]
    9b8c:	ldr	r0, [fp, #-32]	; 0xffffffe0
    9b90:	mov	r1, r3
    9b94:	bl	98c8 <__assert_fail@plt+0x10b8>
    9b98:	ldr	r3, [fp, #-8]
    9b9c:	add	r3, r3, #2
    9ba0:	ldr	r2, [fp, #-20]	; 0xffffffec
    9ba4:	add	r3, r2, r3
    9ba8:	ldrb	r3, [r3]
    9bac:	ldr	r0, [fp, #-32]	; 0xffffffe0
    9bb0:	mov	r1, r3
    9bb4:	bl	98c8 <__assert_fail@plt+0x10b8>
    9bb8:	ldr	r3, [fp, #-8]
    9bbc:	add	r3, r3, #3
    9bc0:	ldr	r2, [fp, #-20]	; 0xffffffec
    9bc4:	add	r3, r2, r3
    9bc8:	ldrb	r3, [r3]
    9bcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
    9bd0:	mov	r1, r3
    9bd4:	bl	98c8 <__assert_fail@plt+0x10b8>
    9bd8:	ldr	r3, [fp, #-8]
    9bdc:	add	r3, r3, #4
    9be0:	str	r3, [fp, #-8]
    9be4:	ldr	r2, [fp, #-8]
    9be8:	ldr	r3, [pc, #948]	; 9fa4 <__assert_fail@plt+0x1794>
    9bec:	cmp	r2, r3
    9bf0:	ble	9ac4 <__assert_fail@plt+0x12b4>
    9bf4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9bf8:	ldr	r3, [r3, #116]	; 0x74
    9bfc:	cmp	r3, #4
    9c00:	bgt	9c48 <__assert_fail@plt+0x1438>
    9c04:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9c08:	ldr	r1, [r3, #116]	; 0x74
    9c0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9c10:	ldr	r2, [r3, #120]	; 0x78
    9c14:	mov	r3, r2
    9c18:	lsl	r3, r3, #1
    9c1c:	add	r3, r3, r2
    9c20:	lsl	r3, r3, #1
    9c24:	add	r3, r1, r3
    9c28:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9c2c:	add	r1, r3, #16
    9c30:	ldr	r2, [r2, r1, lsl #2]
    9c34:	add	r1, r2, #1
    9c38:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9c3c:	add	r3, r3, #16
    9c40:	str	r1, [r2, r3, lsl #2]
    9c44:	b	9c9c <__assert_fail@plt+0x148c>
    9c48:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9c4c:	ldr	r2, [r3, #120]	; 0x78
    9c50:	mov	r3, r2
    9c54:	lsl	r3, r3, #1
    9c58:	add	r3, r3, r2
    9c5c:	lsl	r3, r3, #1
    9c60:	add	r3, r3, #5
    9c64:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9c68:	add	r1, r3, #16
    9c6c:	ldr	r2, [r2, r1, lsl #2]
    9c70:	add	r1, r2, #1
    9c74:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9c78:	add	r3, r3, #16
    9c7c:	str	r1, [r2, r3, lsl #2]
    9c80:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9c84:	ldr	r3, [r3, #116]	; 0x74
    9c88:	cmp	r3, #24
    9c8c:	ble	9c9c <__assert_fail@plt+0x148c>
    9c90:	ldr	r3, [fp, #-16]
    9c94:	orr	r3, r3, #8
    9c98:	str	r3, [fp, #-16]
    9c9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9ca0:	ldr	r3, [r3, #128]	; 0x80
    9ca4:	cmp	r3, #0
    9ca8:	beq	9cc4 <__assert_fail@plt+0x14b4>
    9cac:	ldr	r3, [fp, #-16]
    9cb0:	orr	r3, r3, #8
    9cb4:	str	r3, [fp, #-16]
    9cb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9cbc:	mov	r2, #0
    9cc0:	str	r2, [r3, #128]	; 0x80
    9cc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9cc8:	ldr	r2, [r3, #112]	; 0x70
    9ccc:	ldr	r3, [pc, #724]	; 9fa8 <__assert_fail@plt+0x1798>
    9cd0:	cmp	r2, r3
    9cd4:	bgt	9cec <__assert_fail@plt+0x14dc>
    9cd8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9cdc:	ldr	r2, [r3, #112]	; 0x70
    9ce0:	ldr	r3, [pc, #708]	; 9fac <__assert_fail@plt+0x179c>
    9ce4:	cmp	r2, r3
    9ce8:	bgt	9cf8 <__assert_fail@plt+0x14e8>
    9cec:	ldr	r3, [fp, #-16]
    9cf0:	orr	r3, r3, #1
    9cf4:	str	r3, [fp, #-16]
    9cf8:	mov	r3, #0
    9cfc:	str	r3, [fp, #-8]
    9d00:	mov	r3, #0
    9d04:	str	r3, [fp, #-12]
    9d08:	b	9d40 <__assert_fail@plt+0x1530>
    9d0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9d10:	ldr	r2, [fp, #-8]
    9d14:	ldr	r3, [r3, r2, lsl #2]
    9d18:	ldr	r2, [fp, #-32]	; 0xffffffe0
    9d1c:	ldr	r1, [fp, #-8]
    9d20:	ldr	r2, [r2, r1, lsl #2]
    9d24:	mul	r3, r2, r3
    9d28:	ldr	r2, [fp, #-12]
    9d2c:	add	r3, r2, r3
    9d30:	str	r3, [fp, #-12]
    9d34:	ldr	r3, [fp, #-8]
    9d38:	add	r3, r3, #1
    9d3c:	str	r3, [fp, #-8]
    9d40:	ldr	r3, [fp, #-8]
    9d44:	cmp	r3, #15
    9d48:	ble	9d0c <__assert_fail@plt+0x14fc>
    9d4c:	ldr	r2, [fp, #-12]
    9d50:	ldr	r3, [pc, #600]	; 9fb0 <__assert_fail@plt+0x17a0>
    9d54:	cmp	r2, r3
    9d58:	bgt	9d6c <__assert_fail@plt+0x155c>
    9d5c:	ldr	r2, [fp, #-12]
    9d60:	ldr	r3, [pc, #588]	; 9fb4 <__assert_fail@plt+0x17a4>
    9d64:	cmp	r2, r3
    9d68:	bgt	9d78 <__assert_fail@plt+0x1568>
    9d6c:	ldr	r3, [fp, #-16]
    9d70:	orr	r3, r3, #2
    9d74:	str	r3, [fp, #-16]
    9d78:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9d7c:	ldr	r2, [r3, #64]	; 0x40
    9d80:	ldr	r3, [pc, #560]	; 9fb8 <__assert_fail@plt+0x17a8>
    9d84:	cmp	r2, r3
    9d88:	ble	9f28 <__assert_fail@plt+0x1718>
    9d8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9d90:	ldr	r2, [r3, #64]	; 0x40
    9d94:	ldr	r3, [pc, #544]	; 9fbc <__assert_fail@plt+0x17ac>
    9d98:	cmp	r2, r3
    9d9c:	bgt	9f28 <__assert_fail@plt+0x1718>
    9da0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9da4:	ldr	r2, [r3, #68]	; 0x44
    9da8:	ldr	r3, [pc, #528]	; 9fc0 <__assert_fail@plt+0x17b0>
    9dac:	cmp	r2, r3
    9db0:	ble	9f28 <__assert_fail@plt+0x1718>
    9db4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9db8:	ldr	r2, [r3, #68]	; 0x44
    9dbc:	ldr	r3, [pc, #512]	; 9fc4 <__assert_fail@plt+0x17b4>
    9dc0:	cmp	r2, r3
    9dc4:	bgt	9f28 <__assert_fail@plt+0x1718>
    9dc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9dcc:	ldr	r2, [r3, #72]	; 0x48
    9dd0:	ldr	r3, [pc, #496]	; 9fc8 <__assert_fail@plt+0x17b8>
    9dd4:	cmp	r2, r3
    9dd8:	ble	9f28 <__assert_fail@plt+0x1718>
    9ddc:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9de0:	ldr	r2, [r3, #72]	; 0x48
    9de4:	ldr	r3, [pc, #480]	; 9fcc <__assert_fail@plt+0x17bc>
    9de8:	cmp	r2, r3
    9dec:	bgt	9f28 <__assert_fail@plt+0x1718>
    9df0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9df4:	ldr	r3, [r3, #76]	; 0x4c
    9df8:	cmp	r3, #239	; 0xef
    9dfc:	ble	9f28 <__assert_fail@plt+0x1718>
    9e00:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e04:	ldr	r3, [r3, #76]	; 0x4c
    9e08:	cmp	r3, #384	; 0x180
    9e0c:	bgt	9f28 <__assert_fail@plt+0x1718>
    9e10:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e14:	ldr	r3, [r3, #80]	; 0x50
    9e18:	cmp	r3, #102	; 0x66
    9e1c:	ble	9f28 <__assert_fail@plt+0x1718>
    9e20:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e24:	ldr	r3, [r3, #80]	; 0x50
    9e28:	cmp	r3, #209	; 0xd1
    9e2c:	bgt	9f28 <__assert_fail@plt+0x1718>
    9e30:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e34:	ldr	r3, [r3, #84]	; 0x54
    9e38:	cmp	r3, #102	; 0x66
    9e3c:	ble	9f28 <__assert_fail@plt+0x1718>
    9e40:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e44:	ldr	r3, [r3, #84]	; 0x54
    9e48:	cmp	r3, #209	; 0xd1
    9e4c:	bgt	9f28 <__assert_fail@plt+0x1718>
    9e50:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e54:	ldr	r2, [r3, #88]	; 0x58
    9e58:	ldr	r3, [pc, #344]	; 9fb8 <__assert_fail@plt+0x17a8>
    9e5c:	cmp	r2, r3
    9e60:	ble	9f28 <__assert_fail@plt+0x1718>
    9e64:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e68:	ldr	r2, [r3, #88]	; 0x58
    9e6c:	ldr	r3, [pc, #328]	; 9fbc <__assert_fail@plt+0x17ac>
    9e70:	cmp	r2, r3
    9e74:	bgt	9f28 <__assert_fail@plt+0x1718>
    9e78:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e7c:	ldr	r2, [r3, #92]	; 0x5c
    9e80:	ldr	r3, [pc, #312]	; 9fc0 <__assert_fail@plt+0x17b0>
    9e84:	cmp	r2, r3
    9e88:	ble	9f28 <__assert_fail@plt+0x1718>
    9e8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9e90:	ldr	r2, [r3, #92]	; 0x5c
    9e94:	ldr	r3, [pc, #296]	; 9fc4 <__assert_fail@plt+0x17b4>
    9e98:	cmp	r2, r3
    9e9c:	bgt	9f28 <__assert_fail@plt+0x1718>
    9ea0:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9ea4:	ldr	r2, [r3, #96]	; 0x60
    9ea8:	ldr	r3, [pc, #280]	; 9fc8 <__assert_fail@plt+0x17b8>
    9eac:	cmp	r2, r3
    9eb0:	ble	9f28 <__assert_fail@plt+0x1718>
    9eb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9eb8:	ldr	r2, [r3, #96]	; 0x60
    9ebc:	ldr	r3, [pc, #264]	; 9fcc <__assert_fail@plt+0x17bc>
    9ec0:	cmp	r2, r3
    9ec4:	bgt	9f28 <__assert_fail@plt+0x1718>
    9ec8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9ecc:	ldr	r3, [r3, #100]	; 0x64
    9ed0:	cmp	r3, #239	; 0xef
    9ed4:	ble	9f28 <__assert_fail@plt+0x1718>
    9ed8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9edc:	ldr	r3, [r3, #100]	; 0x64
    9ee0:	cmp	r3, #384	; 0x180
    9ee4:	bgt	9f28 <__assert_fail@plt+0x1718>
    9ee8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9eec:	ldr	r3, [r3, #104]	; 0x68
    9ef0:	cmp	r3, #102	; 0x66
    9ef4:	ble	9f28 <__assert_fail@plt+0x1718>
    9ef8:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9efc:	ldr	r3, [r3, #104]	; 0x68
    9f00:	cmp	r3, #209	; 0xd1
    9f04:	bgt	9f28 <__assert_fail@plt+0x1718>
    9f08:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9f0c:	ldr	r3, [r3, #108]	; 0x6c
    9f10:	cmp	r3, #102	; 0x66
    9f14:	ble	9f28 <__assert_fail@plt+0x1718>
    9f18:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9f1c:	ldr	r3, [r3, #108]	; 0x6c
    9f20:	cmp	r3, #209	; 0xd1
    9f24:	ble	9f34 <__assert_fail@plt+0x1724>
    9f28:	ldr	r3, [fp, #-16]
    9f2c:	orr	r3, r3, #4
    9f30:	str	r3, [fp, #-16]
    9f34:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9f38:	mov	r2, r3
    9f3c:	mov	r3, #64	; 0x40
    9f40:	mov	r0, r2
    9f44:	mov	r1, #0
    9f48:	mov	r2, r3
    9f4c:	bl	87b0 <memset@plt>
    9f50:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9f54:	add	r3, r3, #64	; 0x40
    9f58:	mov	r2, r3
    9f5c:	mov	r3, #48	; 0x30
    9f60:	mov	r0, r2
    9f64:	mov	r1, #0
    9f68:	mov	r2, r3
    9f6c:	bl	87b0 <memset@plt>
    9f70:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9f74:	mov	r2, #0
    9f78:	str	r2, [r3, #112]	; 0x70
    9f7c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9f80:	mvn	r2, #0
    9f84:	str	r2, [r3, #116]	; 0x74
    9f88:	ldr	r3, [fp, #-32]	; 0xffffffe0
    9f8c:	mov	r2, #0
    9f90:	str	r2, [r3, #120]	; 0x78
    9f94:	ldr	r3, [fp, #-16]
    9f98:	mov	r0, r3
    9f9c:	sub	sp, fp, #4
    9fa0:	pop	{fp, pc}
    9fa4:	andeq	r0, r0, r3, asr #19
    9fa8:	andeq	r2, r0, r2, lsr #16
    9fac:	strdeq	r2, [r0], -sp
    9fb0:	andseq	r0, r8, r0, ror #31
    9fb4:	andseq	sp, r7, r7, lsr #20
    9fb8:	andeq	r0, r0, sl, lsl #18
    9fbc:	andeq	r0, r0, sp, ror sl
    9fc0:	andeq	r0, r0, r9, asr r4
    9fc4:	andeq	r0, r0, sl, ror #10
    9fc8:	andeq	r0, r0, lr, lsl #4
    9fcc:	ldrdeq	r0, [r0], -r3
    9fd0:	push	{fp, lr}
    9fd4:	add	fp, sp, #4
    9fd8:	sub	sp, sp, #8
    9fdc:	str	r0, [fp, #-8]
    9fe0:	str	r1, [fp, #-12]
    9fe4:	ldr	r3, [fp, #-8]
    9fe8:	cmp	r3, #0
    9fec:	beq	a074 <__assert_fail@plt+0x1864>
    9ff0:	ldr	r3, [fp, #-8]
    9ff4:	mov	r2, r3
    9ff8:	mov	r3, #64	; 0x40
    9ffc:	mov	r0, r2
    a000:	mov	r1, #0
    a004:	mov	r2, r3
    a008:	bl	87b0 <memset@plt>
    a00c:	ldr	r3, [fp, #-8]
    a010:	add	r3, r3, #64	; 0x40
    a014:	mov	r2, r3
    a018:	mov	r3, #48	; 0x30
    a01c:	mov	r0, r2
    a020:	mov	r1, #0
    a024:	mov	r2, r3
    a028:	bl	87b0 <memset@plt>
    a02c:	ldr	r3, [fp, #-8]
    a030:	mov	r2, #0
    a034:	str	r2, [r3, #128]	; 0x80
    a038:	ldr	r3, [fp, #-8]
    a03c:	mov	r2, #0
    a040:	str	r2, [r3, #112]	; 0x70
    a044:	ldr	r3, [fp, #-8]
    a048:	mvn	r2, #0
    a04c:	str	r2, [r3, #116]	; 0x74
    a050:	ldr	r3, [fp, #-8]
    a054:	mov	r2, #0
    a058:	str	r2, [r3, #120]	; 0x78
    a05c:	ldr	r3, [fp, #-8]
    a060:	mov	r2, #0
    a064:	str	r2, [r3, #124]	; 0x7c
    a068:	ldr	r3, [fp, #-8]
    a06c:	ldr	r2, [fp, #-12]
    a070:	str	r2, [r3, #132]	; 0x84
    a074:	sub	sp, fp, #4
    a078:	pop	{fp, pc}
    a07c:	andeq	r0, r0, r0
    a080:	push	{fp, lr}
    a084:	add	fp, sp, #4
    a088:	sub	sp, sp, #8
    a08c:	str	r0, [fp, #-8]
    a090:	ldr	r3, [fp, #-8]
    a094:	cmp	r3, #0
    a098:	beq	a0bc <__assert_fail@plt+0x18ac>
    a09c:	ldr	r0, [pc, #44]	; a0d0 <__assert_fail@plt+0x18c0>
    a0a0:	ldr	r1, [fp, #-8]
    a0a4:	mov	r2, #19
    a0a8:	bl	87bc <strncpy@plt>
    a0ac:	ldr	r3, [pc, #28]	; a0d0 <__assert_fail@plt+0x18c0>
    a0b0:	mov	r2, #0
    a0b4:	strb	r2, [r3, #19]
    a0b8:	b	a0c8 <__assert_fail@plt+0x18b8>
    a0bc:	ldr	r3, [pc, #12]	; a0d0 <__assert_fail@plt+0x18c0>
    a0c0:	mov	r2, #0
    a0c4:	strb	r2, [r3]
    a0c8:	sub	sp, fp, #4
    a0cc:	pop	{fp, pc}
    a0d0:	andeq	r4, r1, r8, lsl r4
    a0d4:	push	{fp, lr}
    a0d8:	add	fp, sp, #4
    a0dc:	sub	sp, sp, #40	; 0x28
    a0e0:	str	r0, [fp, #-24]	; 0xffffffe8
    a0e4:	str	r1, [fp, #-28]	; 0xffffffe4
    a0e8:	str	r2, [fp, #-32]	; 0xffffffe0
    a0ec:	str	r3, [fp, #-36]	; 0xffffffdc
    a0f0:	mov	r3, #0
    a0f4:	str	r3, [fp, #-8]
    a0f8:	ldr	r2, [pc, #376]	; a278 <__assert_fail@plt+0x1a68>
    a0fc:	sub	r3, fp, #16
    a100:	ldm	r2, {r0, r1}
    a104:	str	r0, [r3]
    a108:	add	r3, r3, #4
    a10c:	strh	r1, [r3]
    a110:	add	r3, r3, #2
    a114:	lsr	r2, r1, #16
    a118:	strb	r2, [r3]
    a11c:	b	a174 <__assert_fail@plt+0x1964>
    a120:	ldr	r3, [fp, #-8]
    a124:	add	r3, r3, #1
    a128:	str	r3, [fp, #-8]
    a12c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a130:	vldr	d6, [r3]
    a134:	vldr	d7, [pc, #308]	; a270 <__assert_fail@plt+0x1a60>
    a138:	vdiv.f64	d7, d6, d7
    a13c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a140:	vstr	d7, [r3]
    a144:	ldr	r3, [fp, #8]
    a148:	vldr	d6, [r3]
    a14c:	vldr	d7, [pc, #284]	; a270 <__assert_fail@plt+0x1a60>
    a150:	vdiv.f64	d7, d6, d7
    a154:	ldr	r3, [fp, #8]
    a158:	vstr	d7, [r3]
    a15c:	ldr	r3, [fp, #4]
    a160:	vldr	d6, [r3]
    a164:	vldr	d7, [pc, #260]	; a270 <__assert_fail@plt+0x1a60>
    a168:	vdiv.f64	d7, d6, d7
    a16c:	ldr	r3, [fp, #4]
    a170:	vstr	d7, [r3]
    a174:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a178:	vldr	d6, [r3]
    a17c:	vldr	d7, [pc, #236]	; a270 <__assert_fail@plt+0x1a60>
    a180:	vcmpe.f64	d6, d7
    a184:	vmrs	APSR_nzcv, fpscr
    a188:	movlt	r3, #0
    a18c:	movge	r3, #1
    a190:	uxtb	r3, r3
    a194:	cmp	r3, #0
    a198:	beq	a1f8 <__assert_fail@plt+0x19e8>
    a19c:	ldr	r3, [fp, #4]
    a1a0:	vldr	d6, [r3]
    a1a4:	vldr	d7, [pc, #196]	; a270 <__assert_fail@plt+0x1a60>
    a1a8:	vcmpe.f64	d6, d7
    a1ac:	vmrs	APSR_nzcv, fpscr
    a1b0:	movlt	r3, #0
    a1b4:	movge	r3, #1
    a1b8:	uxtb	r3, r3
    a1bc:	cmp	r3, #0
    a1c0:	beq	a1f8 <__assert_fail@plt+0x19e8>
    a1c4:	ldr	r3, [fp, #8]
    a1c8:	vldr	d6, [r3]
    a1cc:	vldr	d7, [pc, #156]	; a270 <__assert_fail@plt+0x1a60>
    a1d0:	vcmpe.f64	d6, d7
    a1d4:	vmrs	APSR_nzcv, fpscr
    a1d8:	movlt	r3, #0
    a1dc:	movge	r3, #1
    a1e0:	uxtb	r3, r3
    a1e4:	cmp	r3, #0
    a1e8:	beq	a1f8 <__assert_fail@plt+0x19e8>
    a1ec:	ldr	r3, [fp, #-8]
    a1f0:	cmp	r3, #6
    a1f4:	bls	a120 <__assert_fail@plt+0x1910>
    a1f8:	ldr	r3, [fp, #-8]
    a1fc:	cmp	r3, #0
    a200:	beq	a23c <__assert_fail@plt+0x1a2c>
    a204:	ldr	r2, [pc, #112]	; a27c <__assert_fail@plt+0x1a6c>
    a208:	ldr	r3, [fp, #-8]
    a20c:	sub	r1, r3, #1
    a210:	mvn	r3, #11
    a214:	sub	r0, fp, #4
    a218:	add	r1, r0, r1
    a21c:	add	r3, r1, r3
    a220:	ldrb	r3, [r3]
    a224:	ldr	r1, [fp, #-32]	; 0xffffffe0
    a228:	str	r1, [sp]
    a22c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a230:	ldr	r1, [fp, #-28]	; 0xffffffe4
    a234:	bl	87a4 <snprintf@plt>
    a238:	b	a24c <__assert_fail@plt+0x1a3c>
    a23c:	ldr	r0, [fp, #-24]	; 0xffffffe8
    a240:	ldr	r1, [fp, #-32]	; 0xffffffe0
    a244:	ldr	r2, [fp, #-28]	; 0xffffffe4
    a248:	bl	87bc <strncpy@plt>
    a24c:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a250:	sub	r3, r3, #1
    a254:	ldr	r2, [fp, #-24]	; 0xffffffe8
    a258:	add	r3, r2, r3
    a25c:	mov	r2, #0
    a260:	strb	r2, [r3]
    a264:	sub	sp, fp, #4
    a268:	pop	{fp, pc}
    a26c:	nop			; (mov r0, r0)
    a270:	andeq	r0, r0, r0
    a274:	addsmi	r0, r0, r0
    a278:			; <UNDEFINED> instruction: 0x0000b2b8
    a27c:			; <UNDEFINED> instruction: 0x0000b2b0
    a280:	push	{fp, lr}
    a284:	add	fp, sp, #4
    a288:	sub	sp, sp, #24
    a28c:	str	r0, [fp, #-16]
    a290:	strd	r2, [fp, #-28]	; 0xffffffe4
    a294:	ldr	r3, [fp, #-16]
    a298:	ldrd	r2, [r3, #16]
    a29c:	strd	r2, [fp, #-12]
    a2a0:	ldr	r3, [fp, #-16]
    a2a4:	cmp	r3, #0
    a2a8:	bne	a2c0 <__assert_fail@plt+0x1ab0>
    a2ac:	ldr	r0, [pc, #224]	; a394 <__assert_fail@plt+0x1b84>
    a2b0:	ldr	r1, [pc, #224]	; a398 <__assert_fail@plt+0x1b88>
    a2b4:	mov	r2, #88	; 0x58
    a2b8:	ldr	r3, [pc, #220]	; a39c <__assert_fail@plt+0x1b8c>
    a2bc:	bl	8810 <__assert_fail@plt>
    a2c0:	ldr	r3, [fp, #-16]
    a2c4:	ldrd	r2, [r3, #8]
    a2c8:	orrs	r1, r2, r3
    a2cc:	beq	a2e8 <__assert_fail@plt+0x1ad8>
    a2d0:	ldr	r3, [fp, #-16]
    a2d4:	ldrd	r2, [r3, #8]
    a2d8:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    a2dc:	cmp	r1, r3
    a2e0:	cmpeq	r0, r2
    a2e4:	bcs	a2f4 <__assert_fail@plt+0x1ae4>
    a2e8:	ldr	r1, [fp, #-16]
    a2ec:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a2f0:	strd	r2, [r1, #8]
    a2f4:	ldr	r3, [fp, #-16]
    a2f8:	ldrd	r0, [r3]
    a2fc:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a300:	cmp	r1, r3
    a304:	cmpeq	r0, r2
    a308:	bcs	a318 <__assert_fail@plt+0x1b08>
    a30c:	ldr	r1, [fp, #-16]
    a310:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a314:	strd	r2, [r1]
    a318:	ldr	r3, [fp, #-16]
    a31c:	ldrd	r0, [r3, #16]
    a320:	mov	r2, #1
    a324:	mov	r3, #0
    a328:	adds	r2, r2, r0
    a32c:	adc	r3, r3, r1
    a330:	ldr	r1, [fp, #-16]
    a334:	strd	r2, [r1, #16]
    a338:	ldr	r3, [fp, #-16]
    a33c:	ldrd	r2, [r3, #16]
    a340:	ldrd	r0, [fp, #-12]
    a344:	cmp	r1, r3
    a348:	cmpeq	r0, r2
    a34c:	bcs	a370 <__assert_fail@plt+0x1b60>
    a350:	ldr	r3, [fp, #-16]
    a354:	ldrd	r0, [r3, #24]
    a358:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a35c:	adds	r2, r2, r0
    a360:	adc	r3, r3, r1
    a364:	ldr	r1, [fp, #-16]
    a368:	strd	r2, [r1, #24]
    a36c:	b	a38c <__assert_fail@plt+0x1b7c>
    a370:	ldr	r1, [fp, #-16]
    a374:	ldrd	r2, [fp, #-28]	; 0xffffffe4
    a378:	strd	r2, [r1, #24]
    a37c:	ldr	r1, [fp, #-16]
    a380:	mov	r2, #1
    a384:	mov	r3, #0
    a388:	strd	r2, [r1, #16]
    a38c:	sub	sp, fp, #4
    a390:	pop	{fp, pc}
    a394:	andeq	fp, r0, r0, asr #5
    a398:	ldrdeq	fp, [r0], -r4
    a39c:	andeq	fp, r0, r8, lsr r4
    a3a0:	push	{fp, lr}
    a3a4:	add	fp, sp, #4
    a3a8:	sub	sp, sp, #32
    a3ac:	str	r0, [fp, #-8]
    a3b0:	str	r1, [fp, #-12]
    a3b4:	str	r2, [fp, #-16]
    a3b8:	ldr	r3, [fp, #-8]
    a3bc:	cmp	r3, #0
    a3c0:	beq	a3d0 <__assert_fail@plt+0x1bc0>
    a3c4:	ldr	r3, [fp, #-16]
    a3c8:	cmp	r3, #0
    a3cc:	bne	a3e4 <__assert_fail@plt+0x1bd4>
    a3d0:	ldr	r0, [pc, #96]	; a438 <__assert_fail@plt+0x1c28>
    a3d4:	ldr	r1, [pc, #96]	; a43c <__assert_fail@plt+0x1c2c>
    a3d8:	mov	r2, #103	; 0x67
    a3dc:	ldr	r3, [pc, #92]	; a440 <__assert_fail@plt+0x1c30>
    a3e0:	bl	8810 <__assert_fail@plt>
    a3e4:	ldr	r3, [fp, #-12]
    a3e8:	sub	r1, r3, #1
    a3ec:	ldr	ip, [pc, #80]	; a444 <__assert_fail@plt+0x1c34>
    a3f0:	ldr	r3, [fp, #-16]
    a3f4:	str	r3, [sp]
    a3f8:	ldrd	r2, [fp, #4]
    a3fc:	strd	r2, [sp, #8]
    a400:	ldr	r0, [fp, #-8]
    a404:	mov	r2, ip
    a408:	ldr	r3, [pc, #56]	; a448 <__assert_fail@plt+0x1c38>
    a40c:	bl	87a4 <snprintf@plt>
    a410:	ldr	r3, [fp, #-12]
    a414:	sub	r3, r3, #1
    a418:	ldr	r2, [fp, #-8]
    a41c:	add	r3, r2, r3
    a420:	mov	r2, #0
    a424:	strb	r2, [r3]
    a428:	ldr	r3, [fp, #-8]
    a42c:	mov	r0, r3
    a430:	sub	sp, fp, #4
    a434:	pop	{fp, pc}
    a438:	ldrdeq	fp, [r0], -ip
    a43c:	ldrdeq	fp, [r0], -r4
    a440:	andeq	fp, r0, r4, lsr #8
    a444:	andeq	fp, r0, r8, lsl #6
    a448:	andeq	r4, r1, r8, lsl r4
    a44c:	push	{r4, fp, lr}
    a450:	vpush	{d8}
    a454:	add	fp, sp, #16
    a458:	sub	sp, sp, #68	; 0x44
    a45c:	str	r0, [fp, #-32]	; 0xffffffe0
    a460:	str	r1, [fp, #-36]	; 0xffffffdc
    a464:	str	r2, [fp, #-40]	; 0xffffffd8
    a468:	str	r3, [fp, #-44]	; 0xffffffd4
    a46c:	add	r3, pc, #268	; 0x10c
    a470:	ldrd	r2, [r3]
    a474:	strd	r2, [fp, #-28]	; 0xffffffe4
    a478:	ldr	r3, [fp, #4]
    a47c:	cmp	r3, #0
    a480:	beq	a4a8 <__assert_fail@plt+0x1c98>
    a484:	ldr	r3, [fp, #-40]	; 0xffffffd8
    a488:	cmp	r3, #0
    a48c:	beq	a4a8 <__assert_fail@plt+0x1c98>
    a490:	ldr	r3, [fp, #-44]	; 0xffffffd4
    a494:	cmp	r3, #0
    a498:	beq	a4a8 <__assert_fail@plt+0x1c98>
    a49c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a4a0:	cmp	r3, #0
    a4a4:	bne	a4bc <__assert_fail@plt+0x1cac>
    a4a8:	ldr	r0, [pc, #216]	; a588 <__assert_fail@plt+0x1d78>
    a4ac:	ldr	r1, [pc, #216]	; a58c <__assert_fail@plt+0x1d7c>
    a4b0:	mov	r2, #116	; 0x74
    a4b4:	ldr	r3, [pc, #212]	; a590 <__assert_fail@plt+0x1d80>
    a4b8:	bl	8810 <__assert_fail@plt>
    a4bc:	ldr	r3, [fp, #4]
    a4c0:	ldrd	r2, [r3, #16]
    a4c4:	orrs	r1, r2, r3
    a4c8:	beq	a504 <__assert_fail@plt+0x1cf4>
    a4cc:	ldr	r3, [fp, #4]
    a4d0:	ldrd	r2, [r3, #24]
    a4d4:	mov	r0, r2
    a4d8:	mov	r1, r3
    a4dc:	bl	ad40 <__assert_fail@plt+0x2530>
    a4e0:	vmov	d8, r0, r1
    a4e4:	ldr	r3, [fp, #4]
    a4e8:	ldrd	r2, [r3, #16]
    a4ec:	mov	r0, r2
    a4f0:	mov	r1, r3
    a4f4:	bl	ad40 <__assert_fail@plt+0x2530>
    a4f8:	vmov	d7, r0, r1
    a4fc:	vdiv.f64	d7, d8, d7
    a500:	vstr	d7, [fp, #-28]	; 0xffffffe4
    a504:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a508:	sub	r3, r3, #1
    a50c:	ldr	r2, [fp, #-32]	; 0xffffffe0
    a510:	add	r3, r2, r3
    a514:	mov	r2, #0
    a518:	strb	r2, [r3]
    a51c:	ldr	r3, [fp, #-36]	; 0xffffffdc
    a520:	sub	lr, r3, #1
    a524:	ldr	ip, [pc, #104]	; a594 <__assert_fail@plt+0x1d84>
    a528:	ldr	r3, [fp, #4]
    a52c:	ldrd	r0, [r3, #8]
    a530:	ldr	r3, [fp, #4]
    a534:	ldrd	r2, [r3]
    a538:	ldr	r4, [fp, #-40]	; 0xffffffd8
    a53c:	str	r4, [sp]
    a540:	strd	r0, [sp, #8]
    a544:	ldrd	r0, [fp, #-28]	; 0xffffffe4
    a548:	strd	r0, [sp, #16]
    a54c:	strd	r2, [sp, #24]
    a550:	ldr	r3, [fp, #-44]	; 0xffffffd4
    a554:	str	r3, [sp, #32]
    a558:	ldr	r0, [fp, #-32]	; 0xffffffe0
    a55c:	mov	r1, lr
    a560:	mov	r2, ip
    a564:	ldr	r3, [pc, #44]	; a598 <__assert_fail@plt+0x1d88>
    a568:	bl	87a4 <snprintf@plt>
    a56c:	ldr	r3, [fp, #-32]	; 0xffffffe0
    a570:	mov	r0, r3
    a574:	sub	sp, fp, #16
    a578:	vpop	{d8}
    a57c:	pop	{r4, fp, pc}
	...
    a588:	andeq	fp, r0, r4, lsl r3
    a58c:	ldrdeq	fp, [r0], -r4
    a590:	andeq	fp, r0, r4, lsl r4
    a594:	andeq	fp, r0, ip, ror #6
    a598:	andeq	r4, r1, r8, lsl r4
    a59c:	push	{r4, r5, r6, fp, lr}
    a5a0:	vpush	{d8}
    a5a4:	add	fp, sp, #24
    a5a8:	sub	sp, sp, #108	; 0x6c
    a5ac:	str	r0, [fp, #-80]	; 0xffffffb0
    a5b0:	str	r1, [fp, #-84]	; 0xffffffac
    a5b4:	str	r2, [fp, #-88]	; 0xffffffa8
    a5b8:	str	r3, [fp, #-92]	; 0xffffffa4
    a5bc:	add	r3, pc, #476	; 0x1dc
    a5c0:	ldrd	r2, [r3]
    a5c4:	strd	r2, [fp, #-60]	; 0xffffffc4
    a5c8:	add	r3, pc, #464	; 0x1d0
    a5cc:	ldrd	r2, [r3]
    a5d0:	strd	r2, [fp, #-68]	; 0xffffffbc
    a5d4:	add	r3, pc, #452	; 0x1c4
    a5d8:	ldrd	r2, [r3]
    a5dc:	strd	r2, [fp, #-76]	; 0xffffffb4
    a5e0:	ldr	r3, [fp, #4]
    a5e4:	cmp	r3, #0
    a5e8:	beq	a604 <__assert_fail@plt+0x1df4>
    a5ec:	ldr	r3, [fp, #-88]	; 0xffffffa8
    a5f0:	cmp	r3, #0
    a5f4:	beq	a604 <__assert_fail@plt+0x1df4>
    a5f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
    a5fc:	cmp	r3, #0
    a600:	bne	a618 <__assert_fail@plt+0x1e08>
    a604:	ldr	r0, [pc, #420]	; a7b0 <__assert_fail@plt+0x1fa0>
    a608:	ldr	r1, [pc, #420]	; a7b4 <__assert_fail@plt+0x1fa4>
    a60c:	mov	r2, #137	; 0x89
    a610:	ldr	r3, [pc, #416]	; a7b8 <__assert_fail@plt+0x1fa8>
    a614:	bl	8810 <__assert_fail@plt>
    a618:	ldr	r3, [fp, #4]
    a61c:	ldrd	r2, [r3]
    a620:	orrs	r1, r2, r3
    a624:	beq	a65c <__assert_fail@plt+0x1e4c>
    a628:	ldrd	r0, [fp, #12]
    a62c:	bl	ad40 <__assert_fail@plt+0x2530>
    a630:	vmov	d6, r0, r1
    a634:	vldr	d7, [pc, #364]	; a7a8 <__assert_fail@plt+0x1f98>
    a638:	vmul.f64	d8, d6, d7
    a63c:	ldr	r3, [fp, #4]
    a640:	ldrd	r2, [r3]
    a644:	mov	r0, r2
    a648:	mov	r1, r3
    a64c:	bl	ad40 <__assert_fail@plt+0x2530>
    a650:	vmov	d7, r0, r1
    a654:	vdiv.f64	d7, d8, d7
    a658:	vstr	d7, [fp, #-68]	; 0xffffffbc
    a65c:	ldr	r3, [fp, #4]
    a660:	ldrd	r2, [r3, #8]
    a664:	orrs	r1, r2, r3
    a668:	beq	a6a0 <__assert_fail@plt+0x1e90>
    a66c:	ldrd	r0, [fp, #12]
    a670:	bl	ad40 <__assert_fail@plt+0x2530>
    a674:	vmov	d6, r0, r1
    a678:	vldr	d7, [pc, #296]	; a7a8 <__assert_fail@plt+0x1f98>
    a67c:	vmul.f64	d8, d6, d7
    a680:	ldr	r3, [fp, #4]
    a684:	ldrd	r2, [r3, #8]
    a688:	mov	r0, r2
    a68c:	mov	r1, r3
    a690:	bl	ad40 <__assert_fail@plt+0x2530>
    a694:	vmov	d7, r0, r1
    a698:	vdiv.f64	d7, d8, d7
    a69c:	vstr	d7, [fp, #-76]	; 0xffffffb4
    a6a0:	ldr	r3, [fp, #4]
    a6a4:	ldrd	r2, [r3, #16]
    a6a8:	orrs	r1, r2, r3
    a6ac:	beq	a700 <__assert_fail@plt+0x1ef0>
    a6b0:	ldrd	r0, [fp, #12]
    a6b4:	bl	ad40 <__assert_fail@plt+0x2530>
    a6b8:	vmov	d6, r0, r1
    a6bc:	vldr	d7, [pc, #228]	; a7a8 <__assert_fail@plt+0x1f98>
    a6c0:	vmul.f64	d8, d6, d7
    a6c4:	ldr	r3, [fp, #4]
    a6c8:	ldrd	r2, [r3, #16]
    a6cc:	mov	r0, r2
    a6d0:	mov	r1, r3
    a6d4:	bl	ad40 <__assert_fail@plt+0x2530>
    a6d8:	vmov	d7, r0, r1
    a6dc:	vmul.f64	d8, d8, d7
    a6e0:	ldr	r3, [fp, #4]
    a6e4:	ldrd	r2, [r3, #24]
    a6e8:	mov	r0, r2
    a6ec:	mov	r1, r3
    a6f0:	bl	ad40 <__assert_fail@plt+0x2530>
    a6f4:	vmov	d7, r0, r1
    a6f8:	vdiv.f64	d7, d8, d7
    a6fc:	vstr	d7, [fp, #-60]	; 0xffffffc4
    a700:	sub	r2, fp, #48	; 0x30
    a704:	sub	r3, fp, #68	; 0x44
    a708:	sub	r1, fp, #60	; 0x3c
    a70c:	str	r1, [sp]
    a710:	sub	r1, fp, #76	; 0x4c
    a714:	str	r1, [sp, #4]
    a718:	mov	r0, r2
    a71c:	mov	r1, #20
    a720:	ldr	r2, [fp, #-92]	; 0xffffffa4
    a724:	bl	a0d4 <__assert_fail@plt+0x18c4>
    a728:	ldr	r3, [fp, #-84]	; 0xffffffac
    a72c:	sub	r3, r3, #1
    a730:	ldr	r2, [fp, #-80]	; 0xffffffb0
    a734:	add	r3, r2, r3
    a738:	mov	r2, #0
    a73c:	strb	r2, [r3]
    a740:	ldr	r3, [fp, #-84]	; 0xffffffac
    a744:	sub	lr, r3, #1
    a748:	ldr	ip, [pc, #108]	; a7bc <__assert_fail@plt+0x1fac>
    a74c:	ldrd	r4, [fp, #-68]	; 0xffffffbc
    a750:	ldrd	r0, [fp, #-60]	; 0xffffffc4
    a754:	ldrd	r2, [fp, #-76]	; 0xffffffb4
    a758:	ldr	r6, [fp, #-88]	; 0xffffffa8
    a75c:	str	r6, [sp]
    a760:	strd	r4, [sp, #8]
    a764:	strd	r0, [sp, #16]
    a768:	strd	r2, [sp, #24]
    a76c:	sub	r3, fp, #48	; 0x30
    a770:	str	r3, [sp, #32]
    a774:	ldr	r0, [fp, #-80]	; 0xffffffb0
    a778:	mov	r1, lr
    a77c:	mov	r2, ip
    a780:	ldr	r3, [pc, #56]	; a7c0 <__assert_fail@plt+0x1fb0>
    a784:	bl	87a4 <snprintf@plt>
    a788:	ldr	r3, [fp, #-80]	; 0xffffffb0
    a78c:	mov	r0, r3
    a790:	sub	sp, fp, #24
    a794:	vpop	{d8}
    a798:	pop	{r4, r5, r6, fp, pc}
    a79c:	nop			; (mov r0, r0)
	...
    a7ac:	smlawbmi	lr, r0, r4, r8
    a7b0:	muleq	r0, r4, r3
    a7b4:	ldrdeq	fp, [r0], -r4
    a7b8:	andeq	fp, r0, r4, lsl #8
    a7bc:	ldrdeq	fp, [r0], -r8
    a7c0:	andeq	r4, r1, r8, lsl r4
    a7c4:	nop			; (mov r0, r0)
    a7c8:	push	{r4, r5, fp, lr}
    a7cc:	add	fp, sp, #12
    a7d0:	sub	sp, sp, #16
    a7d4:	str	r0, [fp, #-24]	; 0xffffffe8
    a7d8:	str	r1, [fp, #-28]	; 0xffffffe4
    a7dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a7e0:	cmp	r3, #0
    a7e4:	beq	a7f4 <__assert_fail@plt+0x1fe4>
    a7e8:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a7ec:	cmp	r3, #0
    a7f0:	bne	a808 <__assert_fail@plt+0x1ff8>
    a7f4:	ldr	r0, [pc, #180]	; a8b0 <__assert_fail@plt+0x20a0>
    a7f8:	ldr	r1, [pc, #180]	; a8b4 <__assert_fail@plt+0x20a4>
    a7fc:	mov	r2, #47	; 0x2f
    a800:	ldr	r3, [pc, #176]	; a8b8 <__assert_fail@plt+0x20a8>
    a804:	bl	8810 <__assert_fail@plt>
    a808:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a80c:	ldr	r2, [r3]
    a810:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a814:	ldr	r3, [r3]
    a818:	rsb	r1, r3, r2
    a81c:	mov	r2, r1
    a820:	asr	r3, r2, #31
    a824:	ldr	r1, [pc, #144]	; a8bc <__assert_fail@plt+0x20ac>
    a828:	mul	r0, r1, r3
    a82c:	mov	r1, #0
    a830:	mul	r1, r1, r2
    a834:	add	ip, r0, r1
    a838:	ldr	r1, [pc, #124]	; a8bc <__assert_fail@plt+0x20ac>
    a83c:	umull	r0, r1, r2, r1
    a840:	add	r3, ip, r1
    a844:	mov	r1, r3
    a848:	ldr	r3, [fp, #-28]	; 0xffffffe4
    a84c:	ldr	ip, [r3, #4]
    a850:	mov	r2, ip
    a854:	asr	r3, r2, #31
    a858:	adds	r0, r0, r2
    a85c:	adc	r1, r1, r3
    a860:	ldr	r3, [fp, #-24]	; 0xffffffe8
    a864:	ldr	ip, [r3, #4]
    a868:	mov	r2, ip
    a86c:	asr	r3, r2, #31
    a870:	subs	r2, r0, r2
    a874:	sbc	r3, r1, r3
    a878:	strd	r2, [fp, #-20]	; 0xffffffec
    a87c:	ldr	r3, [fp, #-16]
    a880:	asr	r4, r3, #31
    a884:	ldr	r3, [fp, #-16]
    a888:	asr	r5, r3, #31
    a88c:	ldrd	r2, [fp, #-20]	; 0xffffffec
    a890:	eor	r2, r2, r4
    a894:	eor	r3, r3, r5
    a898:	subs	r2, r2, r4
    a89c:	sbc	r3, r3, r5
    a8a0:	mov	r0, r2
    a8a4:	mov	r1, r3
    a8a8:	sub	sp, fp, #12
    a8ac:	pop	{r4, r5, fp, pc}
    a8b0:	andeq	fp, r0, r4, asr #8
    a8b4:	andeq	fp, r0, r0, ror r4
    a8b8:	andeq	fp, r0, r0, lsl #9
    a8bc:	andeq	r4, pc, r0, asr #4
    a8c0:	push	{fp, lr}
    a8c4:	add	fp, sp, #4
    a8c8:	sub	sp, sp, #408	; 0x198
    a8cc:	sub	r3, fp, #400	; 0x190
    a8d0:	mov	r0, r3
    a8d4:	bl	8738 <uname@plt>
    a8d8:	mov	r3, r0
    a8dc:	cmp	r3, #0
    a8e0:	beq	a8ec <__assert_fail@plt+0x20dc>
    a8e4:	mov	r3, #0
    a8e8:	b	a9ec <__assert_fail@plt+0x21dc>
    a8ec:	sub	r3, fp, #400	; 0x190
    a8f0:	mov	r0, r3
    a8f4:	ldr	r1, [pc, #252]	; a9f8 <__assert_fail@plt+0x21e8>
    a8f8:	mov	r2, #6
    a8fc:	bl	87f8 <strncmp@plt>
    a900:	mov	r3, r0
    a904:	cmp	r3, #0
    a908:	bne	a9e8 <__assert_fail@plt+0x21d8>
    a90c:	sub	r3, fp, #400	; 0x190
    a910:	add	r2, r3, #130	; 0x82
    a914:	sub	r3, fp, #404	; 0x194
    a918:	mov	r0, r2
    a91c:	mov	r1, r3
    a920:	mov	r2, #10
    a924:	bl	8720 <strtol@plt>
    a928:	str	r0, [fp, #-8]
    a92c:	ldr	r3, [fp, #-8]
    a930:	cmp	r3, #1
    a934:	ble	a948 <__assert_fail@plt+0x2138>
    a938:	ldr	r3, [fp, #-404]	; 0xfffffe6c
    a93c:	ldrb	r3, [r3]
    a940:	cmp	r3, #46	; 0x2e
    a944:	beq	a950 <__assert_fail@plt+0x2140>
    a948:	mov	r3, #0
    a94c:	b	a9ec <__assert_fail@plt+0x21dc>
    a950:	ldr	r3, [fp, #-8]
    a954:	cmp	r3, #2
    a958:	ble	a964 <__assert_fail@plt+0x2154>
    a95c:	mov	r3, #2
    a960:	b	a9ec <__assert_fail@plt+0x21dc>
    a964:	ldr	r3, [fp, #-404]	; 0xfffffe6c
    a968:	add	r3, r3, #1
    a96c:	str	r3, [fp, #-404]	; 0xfffffe6c
    a970:	ldr	r3, [fp, #-404]	; 0xfffffe6c
    a974:	str	r3, [fp, #-408]	; 0xfffffe68
    a978:	ldr	r3, [fp, #-404]	; 0xfffffe6c
    a97c:	mov	r2, r3
    a980:	sub	r3, fp, #408	; 0x198
    a984:	mov	r0, r2
    a988:	mov	r1, r3
    a98c:	mov	r2, #10
    a990:	bl	8720 <strtol@plt>
    a994:	str	r0, [fp, #-8]
    a998:	ldr	r2, [fp, #-404]	; 0xfffffe6c
    a99c:	ldr	r3, [fp, #-408]	; 0xfffffe68
    a9a0:	cmp	r2, r3
    a9a4:	beq	a9c4 <__assert_fail@plt+0x21b4>
    a9a8:	ldr	r3, [fp, #-408]	; 0xfffffe68
    a9ac:	ldrb	r3, [r3]
    a9b0:	cmp	r3, #46	; 0x2e
    a9b4:	bne	a9c4 <__assert_fail@plt+0x21b4>
    a9b8:	ldr	r3, [fp, #-8]
    a9bc:	cmp	r3, #3
    a9c0:	bgt	a9cc <__assert_fail@plt+0x21bc>
    a9c4:	mov	r3, #0
    a9c8:	b	a9ec <__assert_fail@plt+0x21dc>
    a9cc:	ldr	r3, [fp, #-8]
    a9d0:	cmp	r3, #5
    a9d4:	bgt	a9e0 <__assert_fail@plt+0x21d0>
    a9d8:	mov	r3, #1
    a9dc:	b	a9ec <__assert_fail@plt+0x21dc>
    a9e0:	mov	r3, #2
    a9e4:	b	a9ec <__assert_fail@plt+0x21dc>
    a9e8:	mov	r3, #0
    a9ec:	mov	r0, r3
    a9f0:	sub	sp, fp, #4
    a9f4:	pop	{fp, pc}
    a9f8:	andeq	fp, r0, r8, ror r4
    a9fc:	eor	r1, r1, #-2147483648	; 0x80000000
    aa00:	b	aa08 <__assert_fail@plt+0x21f8>
    aa04:	eor	r3, r3, #-2147483648	; 0x80000000
    aa08:	push	{r4, r5, lr}
    aa0c:	lsl	r4, r1, #1
    aa10:	lsl	r5, r3, #1
    aa14:	teq	r4, r5
    aa18:	teqeq	r0, r2
    aa1c:	orrsne	ip, r4, r0
    aa20:	orrsne	ip, r5, r2
    aa24:	mvnsne	ip, r4, asr #21
    aa28:	mvnsne	ip, r5, asr #21
    aa2c:	beq	ac18 <__assert_fail@plt+0x2408>
    aa30:	lsr	r4, r4, #21
    aa34:	rsbs	r5, r4, r5, lsr #21
    aa38:	rsblt	r5, r5, #0
    aa3c:	ble	aa5c <__assert_fail@plt+0x224c>
    aa40:	add	r4, r4, r5
    aa44:	eor	r2, r0, r2
    aa48:	eor	r3, r1, r3
    aa4c:	eor	r0, r2, r0
    aa50:	eor	r1, r3, r1
    aa54:	eor	r2, r0, r2
    aa58:	eor	r3, r1, r3
    aa5c:	cmp	r5, #54	; 0x36
    aa60:	pophi	{r4, r5, pc}
    aa64:	tst	r1, #-2147483648	; 0x80000000
    aa68:	lsl	r1, r1, #12
    aa6c:	mov	ip, #1048576	; 0x100000
    aa70:	orr	r1, ip, r1, lsr #12
    aa74:	beq	aa80 <__assert_fail@plt+0x2270>
    aa78:	rsbs	r0, r0, #0
    aa7c:	rsc	r1, r1, #0
    aa80:	tst	r3, #-2147483648	; 0x80000000
    aa84:	lsl	r3, r3, #12
    aa88:	orr	r3, ip, r3, lsr #12
    aa8c:	beq	aa98 <__assert_fail@plt+0x2288>
    aa90:	rsbs	r2, r2, #0
    aa94:	rsc	r3, r3, #0
    aa98:	teq	r4, r5
    aa9c:	beq	ac00 <__assert_fail@plt+0x23f0>
    aaa0:	sub	r4, r4, #1
    aaa4:	rsbs	lr, r5, #32
    aaa8:	blt	aac4 <__assert_fail@plt+0x22b4>
    aaac:	lsl	ip, r2, lr
    aab0:	adds	r0, r0, r2, lsr r5
    aab4:	adc	r1, r1, #0
    aab8:	adds	r0, r0, r3, lsl lr
    aabc:	adcs	r1, r1, r3, asr r5
    aac0:	b	aae0 <__assert_fail@plt+0x22d0>
    aac4:	sub	r5, r5, #32
    aac8:	add	lr, lr, #32
    aacc:	cmp	r2, #1
    aad0:	lsl	ip, r3, lr
    aad4:	orrcs	ip, ip, #2
    aad8:	adds	r0, r0, r3, asr r5
    aadc:	adcs	r1, r1, r3, asr #31
    aae0:	and	r5, r1, #-2147483648	; 0x80000000
    aae4:	bpl	aaf4 <__assert_fail@plt+0x22e4>
    aae8:	rsbs	ip, ip, #0
    aaec:	rscs	r0, r0, #0
    aaf0:	rsc	r1, r1, #0
    aaf4:	cmp	r1, #1048576	; 0x100000
    aaf8:	bcc	ab38 <__assert_fail@plt+0x2328>
    aafc:	cmp	r1, #2097152	; 0x200000
    ab00:	bcc	ab20 <__assert_fail@plt+0x2310>
    ab04:	lsrs	r1, r1, #1
    ab08:	rrxs	r0, r0
    ab0c:	rrx	ip, ip
    ab10:	add	r4, r4, #1
    ab14:	lsl	r2, r4, #21
    ab18:	cmn	r2, #4194304	; 0x400000
    ab1c:	bcs	ac78 <__assert_fail@plt+0x2468>
    ab20:	cmp	ip, #-2147483648	; 0x80000000
    ab24:	lsrseq	ip, r0, #1
    ab28:	adcs	r0, r0, #0
    ab2c:	adc	r1, r1, r4, lsl #20
    ab30:	orr	r1, r1, r5
    ab34:	pop	{r4, r5, pc}
    ab38:	lsls	ip, ip, #1
    ab3c:	adcs	r0, r0, r0
    ab40:	adc	r1, r1, r1
    ab44:	tst	r1, #1048576	; 0x100000
    ab48:	sub	r4, r4, #1
    ab4c:	bne	ab20 <__assert_fail@plt+0x2310>
    ab50:	teq	r1, #0
    ab54:	moveq	r1, r0
    ab58:	moveq	r0, #0
    ab5c:	clz	r3, r1
    ab60:	addeq	r3, r3, #32
    ab64:	sub	r3, r3, #11
    ab68:	subs	r2, r3, #32
    ab6c:	bge	ab90 <__assert_fail@plt+0x2380>
    ab70:	adds	r2, r2, #12
    ab74:	ble	ab8c <__assert_fail@plt+0x237c>
    ab78:	add	ip, r2, #20
    ab7c:	rsb	r2, r2, #12
    ab80:	lsl	r0, r1, ip
    ab84:	lsr	r1, r1, r2
    ab88:	b	aba0 <__assert_fail@plt+0x2390>
    ab8c:	add	r2, r2, #20
    ab90:	rsble	ip, r2, #32
    ab94:	lsl	r1, r1, r2
    ab98:	orrle	r1, r1, r0, lsr ip
    ab9c:	lslle	r0, r0, r2
    aba0:	subs	r4, r4, r3
    aba4:	addge	r1, r1, r4, lsl #20
    aba8:	orrge	r1, r1, r5
    abac:	popge	{r4, r5, pc}
    abb0:	mvn	r4, r4
    abb4:	subs	r4, r4, #31
    abb8:	bge	abf4 <__assert_fail@plt+0x23e4>
    abbc:	adds	r4, r4, #12
    abc0:	bgt	abdc <__assert_fail@plt+0x23cc>
    abc4:	add	r4, r4, #20
    abc8:	rsb	r2, r4, #32
    abcc:	lsr	r0, r0, r4
    abd0:	orr	r0, r0, r1, lsl r2
    abd4:	orr	r1, r5, r1, lsr r4
    abd8:	pop	{r4, r5, pc}
    abdc:	rsb	r4, r4, #12
    abe0:	rsb	r2, r4, #32
    abe4:	lsr	r0, r0, r2
    abe8:	orr	r0, r0, r1, lsl r4
    abec:	mov	r1, r5
    abf0:	pop	{r4, r5, pc}
    abf4:	lsr	r0, r1, r4
    abf8:	mov	r1, r5
    abfc:	pop	{r4, r5, pc}
    ac00:	teq	r4, #0
    ac04:	eor	r3, r3, #1048576	; 0x100000
    ac08:	eoreq	r1, r1, #1048576	; 0x100000
    ac0c:	addeq	r4, r4, #1
    ac10:	subne	r5, r5, #1
    ac14:	b	aaa0 <__assert_fail@plt+0x2290>
    ac18:	mvns	ip, r4, asr #21
    ac1c:	mvnsne	ip, r5, asr #21
    ac20:	beq	ac88 <__assert_fail@plt+0x2478>
    ac24:	teq	r4, r5
    ac28:	teqeq	r0, r2
    ac2c:	beq	ac40 <__assert_fail@plt+0x2430>
    ac30:	orrs	ip, r4, r0
    ac34:	moveq	r1, r3
    ac38:	moveq	r0, r2
    ac3c:	pop	{r4, r5, pc}
    ac40:	teq	r1, r3
    ac44:	movne	r1, #0
    ac48:	movne	r0, #0
    ac4c:	popne	{r4, r5, pc}
    ac50:	lsrs	ip, r4, #21
    ac54:	bne	ac68 <__assert_fail@plt+0x2458>
    ac58:	lsls	r0, r0, #1
    ac5c:	adcs	r1, r1, r1
    ac60:	orrcs	r1, r1, #-2147483648	; 0x80000000
    ac64:	pop	{r4, r5, pc}
    ac68:	adds	r4, r4, #4194304	; 0x400000
    ac6c:	addcc	r1, r1, #1048576	; 0x100000
    ac70:	popcc	{r4, r5, pc}
    ac74:	and	r5, r1, #-2147483648	; 0x80000000
    ac78:	orr	r1, r5, #2130706432	; 0x7f000000
    ac7c:	orr	r1, r1, #15728640	; 0xf00000
    ac80:	mov	r0, #0
    ac84:	pop	{r4, r5, pc}
    ac88:	mvns	ip, r4, asr #21
    ac8c:	movne	r1, r3
    ac90:	movne	r0, r2
    ac94:	mvnseq	ip, r5, asr #21
    ac98:	movne	r3, r1
    ac9c:	movne	r2, r0
    aca0:	orrs	r4, r0, r1, lsl #12
    aca4:	orrseq	r5, r2, r3, lsl #12
    aca8:	teqeq	r1, r3
    acac:	orrne	r1, r1, #524288	; 0x80000
    acb0:	pop	{r4, r5, pc}
    acb4:	teq	r0, #0
    acb8:	moveq	r1, #0
    acbc:	bxeq	lr
    acc0:	push	{r4, r5, lr}
    acc4:	mov	r4, #1024	; 0x400
    acc8:	add	r4, r4, #50	; 0x32
    accc:	mov	r5, #0
    acd0:	mov	r1, #0
    acd4:	b	ab50 <__assert_fail@plt+0x2340>
    acd8:	teq	r0, #0
    acdc:	moveq	r1, #0
    ace0:	bxeq	lr
    ace4:	push	{r4, r5, lr}
    ace8:	mov	r4, #1024	; 0x400
    acec:	add	r4, r4, #50	; 0x32
    acf0:	ands	r5, r0, #-2147483648	; 0x80000000
    acf4:	rsbmi	r0, r0, #0
    acf8:	mov	r1, #0
    acfc:	b	ab50 <__assert_fail@plt+0x2340>
    ad00:	lsls	r2, r0, #1
    ad04:	asr	r1, r2, #3
    ad08:	rrx	r1, r1
    ad0c:	lsl	r0, r2, #28
    ad10:	andsne	r3, r2, #-16777216	; 0xff000000
    ad14:	teqne	r3, #-16777216	; 0xff000000
    ad18:	eorne	r1, r1, #939524096	; 0x38000000
    ad1c:	bxne	lr
    ad20:	teq	r2, #0
    ad24:	teqne	r3, #-16777216	; 0xff000000
    ad28:	bxeq	lr
    ad2c:	push	{r4, r5, lr}
    ad30:	mov	r4, #896	; 0x380
    ad34:	and	r5, r1, #-2147483648	; 0x80000000
    ad38:	bic	r1, r1, #-2147483648	; 0x80000000
    ad3c:	b	ab50 <__assert_fail@plt+0x2340>
    ad40:	orrs	r2, r0, r1
    ad44:	bxeq	lr
    ad48:	push	{r4, r5, lr}
    ad4c:	mov	r5, #0
    ad50:	b	ad70 <__assert_fail@plt+0x2560>
    ad54:	orrs	r2, r0, r1
    ad58:	bxeq	lr
    ad5c:	push	{r4, r5, lr}
    ad60:	ands	r5, r1, #-2147483648	; 0x80000000
    ad64:	bpl	ad70 <__assert_fail@plt+0x2560>
    ad68:	rsbs	r0, r0, #0
    ad6c:	rsc	r1, r1, #0
    ad70:	mov	r4, #1024	; 0x400
    ad74:	add	r4, r4, #50	; 0x32
    ad78:	lsrs	ip, r1, #22
    ad7c:	beq	aaf4 <__assert_fail@plt+0x22e4>
    ad80:	mov	r2, #3
    ad84:	lsrs	ip, ip, #3
    ad88:	addne	r2, r2, #3
    ad8c:	lsrs	ip, ip, #3
    ad90:	addne	r2, r2, #3
    ad94:	add	r2, r2, ip, lsr #3
    ad98:	rsb	r3, r2, #32
    ad9c:	lsl	ip, r0, r3
    ada0:	lsr	r0, r0, r2
    ada4:	orr	r0, r0, r1, lsl r3
    ada8:	lsr	r1, r1, r2
    adac:	add	r4, r4, r2
    adb0:	b	aaf4 <__assert_fail@plt+0x22e4>
    adb4:	push	{r3, r4, r5, r6, r7, r8, sl, lr}
    adb8:	mov	r6, r0
    adbc:	ldr	r5, [pc, #72]	; ae0c <__assert_fail@plt+0x25fc>
    adc0:	ldr	sl, [pc, #72]	; ae10 <__assert_fail@plt+0x2600>
    adc4:	add	r5, pc, r5
    adc8:	add	sl, pc, sl
    adcc:	rsb	sl, r5, sl
    add0:	mov	r7, r1
    add4:	mov	r8, r2
    add8:	bl	8700 <strtol@plt-0x20>
    addc:	asrs	sl, sl, #2
    ade0:	popeq	{r3, r4, r5, r6, r7, r8, sl, pc}
    ade4:	mov	r4, #0
    ade8:	ldr	r3, [r5], #4
    adec:	mov	r0, r6
    adf0:	mov	r1, r7
    adf4:	mov	r2, r8
    adf8:	add	r4, r4, #1
    adfc:	blx	r3
    ae00:	cmp	r4, sl
    ae04:	bne	ade8 <__assert_fail@plt+0x25d8>
    ae08:	pop	{r3, r4, r5, r6, r7, r8, sl, pc}
    ae0c:	andeq	r9, r0, r4, lsr r2
    ae10:	andeq	r9, r0, r4, lsr r2
    ae14:	bx	lr

Disassembly of section .fini:

0000ae18 <.fini>:
    ae18:	push	{r3, lr}
    ae1c:	pop	{r3, pc}
