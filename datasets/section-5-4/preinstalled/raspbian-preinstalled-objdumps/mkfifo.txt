
raspbian-preinstalled/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

0001140c <.init>:
   1140c:	push	{r3, lr}
   11410:	bl	11c24 <__assert_fail@plt+0x414>
   11414:	pop	{r3, pc}

Disassembly of section .plt:

00011418 <fstatfs64@plt-0x14>:
   11418:	push	{lr}		; (str lr, [sp, #-4]!)
   1141c:	ldr	lr, [pc, #4]	; 11428 <fstatfs64@plt-0x4>
   11420:	add	lr, pc, lr
   11424:	ldr	pc, [lr, #8]!
   11428:	ldrdeq	r9, [r1], -r8

0001142c <fstatfs64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3032]!	; 0xbd8

00011438 <calloc@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3024]!	; 0xbd0

00011444 <fputs_unlocked@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011450 <raise@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3008]!	; 0xbc0

0001145c <is_selinux_enabled@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3000]!	; 0xbb8

00011468 <strcmp@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #2992]!	; 0xbb0

00011474 <context_type_get@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #2984]!	; 0xba8

00011480 <fflush@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #2976]!	; 0xba0

0001148c <lsetfilecon@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #2968]!	; 0xb98

00011498 <memmove@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #2960]!	; 0xb90

000114a4 <free@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #2952]!	; 0xb88

000114b0 <_exit@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #2944]!	; 0xb80

000114bc <memcpy@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #2936]!	; 0xb78

000114c8 <mbsinit@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #2928]!	; 0xb70

000114d4 <context_new@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #2920]!	; 0xb68

000114e0 <memcmp@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #2912]!	; 0xb60

000114ec <dcgettext@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #102400	; 0x19000
   114f4:	ldr	pc, [ip, #2904]!	; 0xb58

000114f8 <__stack_chk_fail@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #102400	; 0x19000
   11500:	ldr	pc, [ip, #2896]!	; 0xb50

00011504 <context_type_set@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #102400	; 0x19000
   1150c:	ldr	pc, [ip, #2888]!	; 0xb48

00011510 <realloc@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #102400	; 0x19000
   11518:	ldr	pc, [ip, #2880]!	; 0xb40

0001151c <fgetfilecon@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #102400	; 0x19000
   11524:	ldr	pc, [ip, #2872]!	; 0xb38

00011528 <textdomain@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #102400	; 0x19000
   11530:	ldr	pc, [ip, #2864]!	; 0xb30

00011534 <__fxstatat64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #102400	; 0x19000
   1153c:	ldr	pc, [ip, #2856]!	; 0xb28

00011540 <iswprint@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #102400	; 0x19000
   11548:	ldr	pc, [ip, #2848]!	; 0xb20

0001154c <__fxstat64@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #102400	; 0x19000
   11554:	ldr	pc, [ip, #2840]!	; 0xb18

00011558 <readlink@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #102400	; 0x19000
   11560:	ldr	pc, [ip, #2832]!	; 0xb10

00011564 <fwrite@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #102400	; 0x19000
   1156c:	ldr	pc, [ip, #2824]!	; 0xb08

00011570 <lseek64@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #102400	; 0x19000
   11578:	ldr	pc, [ip, #2816]!	; 0xb00

0001157c <__ctype_get_mb_cur_max@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #102400	; 0x19000
   11584:	ldr	pc, [ip, #2808]!	; 0xaf8

00011588 <matchpathcon@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #102400	; 0x19000
   11590:	ldr	pc, [ip, #2800]!	; 0xaf0

00011594 <getcon@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #102400	; 0x19000
   1159c:	ldr	pc, [ip, #2792]!	; 0xae8

000115a0 <__fpending@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #102400	; 0x19000
   115a8:	ldr	pc, [ip, #2784]!	; 0xae0

000115ac <mbrtowc@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #102400	; 0x19000
   115b4:	ldr	pc, [ip, #2776]!	; 0xad8

000115b8 <error@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #102400	; 0x19000
   115c0:	ldr	pc, [ip, #2768]!	; 0xad0

000115c4 <open64@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #102400	; 0x19000
   115cc:	ldr	pc, [ip, #2760]!	; 0xac8

000115d0 <lgetfilecon@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #102400	; 0x19000
   115d8:	ldr	pc, [ip, #2752]!	; 0xac0

000115dc <malloc@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #102400	; 0x19000
   115e4:	ldr	pc, [ip, #2744]!	; 0xab8

000115e8 <__libc_start_main@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #102400	; 0x19000
   115f0:	ldr	pc, [ip, #2736]!	; 0xab0

000115f4 <__freading@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #102400	; 0x19000
   115fc:	ldr	pc, [ip, #2728]!	; 0xaa8

00011600 <__gmon_start__@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #102400	; 0x19000
   11608:	ldr	pc, [ip, #2720]!	; 0xaa0

0001160c <context_free@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #102400	; 0x19000
   11614:	ldr	pc, [ip, #2712]!	; 0xa98

00011618 <getopt_long@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #102400	; 0x19000
   11620:	ldr	pc, [ip, #2704]!	; 0xa90

00011624 <__ctype_b_loc@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #102400	; 0x19000
   1162c:	ldr	pc, [ip, #2696]!	; 0xa88

00011630 <getcwd@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #102400	; 0x19000
   11638:	ldr	pc, [ip, #2688]!	; 0xa80

0001163c <exit@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #102400	; 0x19000
   11644:	ldr	pc, [ip, #2680]!	; 0xa78

00011648 <getfilecon@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #102400	; 0x19000
   11650:	ldr	pc, [ip, #2672]!	; 0xa70

00011654 <strlen@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #102400	; 0x19000
   1165c:	ldr	pc, [ip, #2664]!	; 0xa68

00011660 <openat64@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #102400	; 0x19000
   11668:	ldr	pc, [ip, #2656]!	; 0xa60

0001166c <setfscreatecon@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #102400	; 0x19000
   11674:	ldr	pc, [ip, #2648]!	; 0xa58

00011678 <__errno_location@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #102400	; 0x19000
   11680:	ldr	pc, [ip, #2640]!	; 0xa50

00011684 <__cxa_atexit@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #102400	; 0x19000
   1168c:	ldr	pc, [ip, #2632]!	; 0xa48

00011690 <memset@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #102400	; 0x19000
   11698:	ldr	pc, [ip, #2624]!	; 0xa40

0001169c <__printf_chk@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #102400	; 0x19000
   116a4:	ldr	pc, [ip, #2616]!	; 0xa38

000116a8 <fileno@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #102400	; 0x19000
   116b0:	ldr	pc, [ip, #2608]!	; 0xa30

000116b4 <__fprintf_chk@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #102400	; 0x19000
   116bc:	ldr	pc, [ip, #2600]!	; 0xa28

000116c0 <fclose@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #102400	; 0x19000
   116c8:	ldr	pc, [ip, #2592]!	; 0xa20

000116cc <fseeko64@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #102400	; 0x19000
   116d4:	ldr	pc, [ip, #2584]!	; 0xa18

000116d8 <fcntl64@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #102400	; 0x19000
   116e0:	ldr	pc, [ip, #2576]!	; 0xa10

000116e4 <setlocale@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #102400	; 0x19000
   116ec:	ldr	pc, [ip, #2568]!	; 0xa08

000116f0 <fsetfilecon@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #102400	; 0x19000
   116f8:	ldr	pc, [ip, #2560]!	; 0xa00

000116fc <strrchr@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #102400	; 0x19000
   11704:	ldr	pc, [ip, #2552]!	; 0x9f8

00011708 <nl_langinfo@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #102400	; 0x19000
   11710:	ldr	pc, [ip, #2544]!	; 0x9f0

00011714 <readdir64@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #102400	; 0x19000
   1171c:	ldr	pc, [ip, #2536]!	; 0x9e8

00011720 <fdopendir@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #102400	; 0x19000
   11728:	ldr	pc, [ip, #2528]!	; 0x9e0

0001172c <security_compute_create@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #102400	; 0x19000
   11734:	ldr	pc, [ip, #2520]!	; 0x9d8

00011738 <dirfd@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #102400	; 0x19000
   11740:	ldr	pc, [ip, #2512]!	; 0x9d0

00011744 <fchdir@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #102400	; 0x19000
   1174c:	ldr	pc, [ip, #2504]!	; 0x9c8

00011750 <qsort@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #102400	; 0x19000
   11758:	ldr	pc, [ip, #2496]!	; 0x9c0

0001175c <freecon@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #102400	; 0x19000
   11764:	ldr	pc, [ip, #2488]!	; 0x9b8

00011768 <bindtextdomain@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #102400	; 0x19000
   11770:	ldr	pc, [ip, #2480]!	; 0x9b0

00011774 <getfscreatecon@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #102400	; 0x19000
   1177c:	ldr	pc, [ip, #2472]!	; 0x9a8

00011780 <umask@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #102400	; 0x19000
   11788:	ldr	pc, [ip, #2464]!	; 0x9a0

0001178c <context_str@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #102400	; 0x19000
   11794:	ldr	pc, [ip, #2456]!	; 0x998

00011798 <chmod@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #102400	; 0x19000
   117a0:	ldr	pc, [ip, #2448]!	; 0x990

000117a4 <__xstat64@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #102400	; 0x19000
   117ac:	ldr	pc, [ip, #2440]!	; 0x988

000117b0 <strncmp@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #102400	; 0x19000
   117b8:	ldr	pc, [ip, #2432]!	; 0x980

000117bc <abort@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #102400	; 0x19000
   117c4:	ldr	pc, [ip, #2424]!	; 0x978

000117c8 <close@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #102400	; 0x19000
   117d0:	ldr	pc, [ip, #2416]!	; 0x970

000117d4 <__lxstat64@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #102400	; 0x19000
   117dc:	ldr	pc, [ip, #2408]!	; 0x968

000117e0 <mkfifo@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #102400	; 0x19000
   117e8:	ldr	pc, [ip, #2400]!	; 0x960

000117ec <mode_to_security_class@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #102400	; 0x19000
   117f4:	ldr	pc, [ip, #2392]!	; 0x958

000117f8 <closedir@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #102400	; 0x19000
   11800:	ldr	pc, [ip, #2384]!	; 0x950

00011804 <strspn@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #102400	; 0x19000
   1180c:	ldr	pc, [ip, #2376]!	; 0x948

00011810 <__assert_fail@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #102400	; 0x19000
   11818:	ldr	pc, [ip, #2368]!	; 0x940

Disassembly of section .text:

00011820 <fts_open@@Base-0x70ac>:
   11820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11824:	mov	r7, r0
   11828:	sub	sp, sp, #20
   1182c:	ldr	r0, [r1]
   11830:	mov	r5, r1
   11834:	bl	14734 <__assert_fail@plt+0x2f24>
   11838:	ldr	r1, [pc, #852]	; 11b94 <__assert_fail@plt+0x384>
   1183c:	mov	r0, #6
   11840:	bl	116e4 <setlocale@plt>
   11844:	mov	r6, #0
   11848:	ldr	r1, [pc, #840]	; 11b98 <__assert_fail@plt+0x388>
   1184c:	ldr	r0, [pc, #840]	; 11b9c <__assert_fail@plt+0x38c>
   11850:	ldr	r9, [pc, #840]	; 11ba0 <__assert_fail@plt+0x390>
   11854:	ldr	r8, [pc, #840]	; 11ba4 <__assert_fail@plt+0x394>
   11858:	ldr	sl, [pc, #840]	; 11ba8 <__assert_fail@plt+0x398>
   1185c:	bl	11768 <bindtextdomain@plt>
   11860:	mov	fp, r6
   11864:	ldr	r0, [pc, #816]	; 11b9c <__assert_fail@plt+0x38c>
   11868:	bl	11528 <textdomain@plt>
   1186c:	ldr	r0, [pc, #824]	; 11bac <__assert_fail@plt+0x39c>
   11870:	bl	1a35c <fts_children@@Base+0xdf8>
   11874:	str	r6, [sp, #8]
   11878:	mov	r4, #0
   1187c:	str	r4, [sp]
   11880:	mov	r3, r9
   11884:	mov	r2, r8
   11888:	mov	r1, r5
   1188c:	mov	r0, r7
   11890:	bl	11618 <getopt_long@plt>
   11894:	cmn	r0, #1
   11898:	beq	11948 <__assert_fail@plt+0x138>
   1189c:	cmn	r0, #2
   118a0:	beq	11b50 <__assert_fail@plt+0x340>
   118a4:	ble	118d0 <__assert_fail@plt+0xc0>
   118a8:	cmp	r0, #90	; 0x5a
   118ac:	bne	11908 <__assert_fail@plt+0xf8>
   118b0:	bl	1145c <is_selinux_enabled@plt>
   118b4:	ldr	r3, [sl]
   118b8:	cmp	r0, #0
   118bc:	ble	1191c <__assert_fail@plt+0x10c>
   118c0:	cmp	r3, #0
   118c4:	movne	fp, r3
   118c8:	moveq	r6, #1
   118cc:	b	11878 <__assert_fail@plt+0x68>
   118d0:	cmn	r0, #3
   118d4:	bne	11b48 <__assert_fail@plt+0x338>
   118d8:	ldr	r1, [pc, #720]	; 11bb0 <__assert_fail@plt+0x3a0>
   118dc:	ldr	r3, [pc, #720]	; 11bb4 <__assert_fail@plt+0x3a4>
   118e0:	ldr	r2, [pc, #720]	; 11bb8 <__assert_fail@plt+0x3a8>
   118e4:	str	r4, [sp, #4]
   118e8:	ldr	r0, [r1]
   118ec:	ldr	r3, [r3]
   118f0:	ldr	r1, [pc, #708]	; 11bbc <__assert_fail@plt+0x3ac>
   118f4:	str	r2, [sp]
   118f8:	ldr	r2, [pc, #704]	; 11bc0 <__assert_fail@plt+0x3b0>
   118fc:	bl	16f90 <__assert_fail@plt+0x5780>
   11900:	mov	r0, r4
   11904:	bl	1163c <exit@plt>
   11908:	cmp	r0, #109	; 0x6d
   1190c:	bne	11b48 <__assert_fail@plt+0x338>
   11910:	ldr	r3, [sl]
   11914:	str	r3, [sp, #8]
   11918:	b	11878 <__assert_fail@plt+0x68>
   1191c:	cmp	r3, #0
   11920:	beq	11878 <__assert_fail@plt+0x68>
   11924:	mov	r2, #5
   11928:	ldr	r1, [pc, #660]	; 11bc4 <__assert_fail@plt+0x3b4>
   1192c:	mov	r0, r4
   11930:	bl	114ec <dcgettext@plt>
   11934:	mov	r1, r4
   11938:	mov	r2, r0
   1193c:	mov	r0, r4
   11940:	bl	115b8 <error@plt>
   11944:	b	11878 <__assert_fail@plt+0x68>
   11948:	ldr	r8, [pc, #632]	; 11bc8 <__assert_fail@plt+0x3b8>
   1194c:	ldr	r3, [r8]
   11950:	cmp	r3, r7
   11954:	beq	11b28 <__assert_fail@plt+0x318>
   11958:	cmp	fp, #0
   1195c:	beq	119a8 <__assert_fail@plt+0x198>
   11960:	mov	r0, fp
   11964:	bl	1166c <setfscreatecon@plt>
   11968:	cmp	r0, #0
   1196c:	bge	119a8 <__assert_fail@plt+0x198>
   11970:	bl	11678 <__errno_location@plt>
   11974:	mov	r2, #5
   11978:	ldr	r1, [pc, #588]	; 11bcc <__assert_fail@plt+0x3bc>
   1197c:	ldr	r5, [r0]
   11980:	mov	r0, r4
   11984:	bl	114ec <dcgettext@plt>
   11988:	mov	r4, r0
   1198c:	mov	r0, fp
   11990:	bl	16998 <__assert_fail@plt+0x5188>
   11994:	mov	r2, r4
   11998:	mov	r1, r5
   1199c:	mov	r3, r0
   119a0:	mov	r0, #1
   119a4:	bl	115b8 <error@plt>
   119a8:	ldr	r0, [sp, #8]
   119ac:	cmp	r0, #0
   119b0:	beq	11a84 <__assert_fail@plt+0x274>
   119b4:	bl	141a4 <__assert_fail@plt+0x2994>
   119b8:	subs	sl, r0, #0
   119bc:	beq	11b78 <__assert_fail@plt+0x368>
   119c0:	mov	r0, #0
   119c4:	bl	11780 <umask@plt>
   119c8:	mov	r9, #0
   119cc:	mov	r4, r0
   119d0:	bl	11780 <umask@plt>
   119d4:	mov	r2, r4
   119d8:	mov	r3, sl
   119dc:	mov	r1, r9
   119e0:	str	r9, [sp]
   119e4:	ldr	r0, [pc, #484]	; 11bd0 <__assert_fail@plt+0x3c0>
   119e8:	bl	145d0 <__assert_fail@plt+0x2dc0>
   119ec:	mov	r4, r0
   119f0:	mov	r0, sl
   119f4:	bl	114a4 <free@plt>
   119f8:	bic	r3, r4, #508	; 0x1fc
   119fc:	bic	r3, r3, #3
   11a00:	cmp	r3, r9
   11a04:	bne	11b58 <__assert_fail@plt+0x348>
   11a08:	ldr	r3, [r8]
   11a0c:	mov	fp, #0
   11a10:	cmp	r3, r7
   11a14:	blt	11a6c <__assert_fail@plt+0x25c>
   11a18:	b	11ad4 <__assert_fail@plt+0x2c4>
   11a1c:	ldr	r3, [r8]
   11a20:	mov	r1, r4
   11a24:	ldr	r0, [r5, r3, lsl #2]
   11a28:	bl	117e0 <mkfifo@plt>
   11a2c:	subs	r9, r0, #0
   11a30:	bne	11a8c <__assert_fail@plt+0x27c>
   11a34:	ldr	r3, [sp, #8]
   11a38:	cmp	r3, #0
   11a3c:	beq	11a58 <__assert_fail@plt+0x248>
   11a40:	ldr	r3, [r8]
   11a44:	mov	r1, r4
   11a48:	ldr	r0, [r5, r3, lsl #2]
   11a4c:	bl	11798 <chmod@plt>
   11a50:	cmp	r0, #0
   11a54:	bne	11ae0 <__assert_fail@plt+0x2d0>
   11a58:	ldr	r3, [r8]
   11a5c:	add	r3, r3, #1
   11a60:	cmp	r3, r7
   11a64:	str	r3, [r8]
   11a68:	bge	11ad4 <__assert_fail@plt+0x2c4>
   11a6c:	cmp	r6, #0
   11a70:	beq	11a1c <__assert_fail@plt+0x20c>
   11a74:	ldr	r0, [r5, r3, lsl #2]
   11a78:	mov	r1, #4096	; 0x1000
   11a7c:	bl	12284 <__assert_fail@plt+0xa74>
   11a80:	b	11a1c <__assert_fail@plt+0x20c>
   11a84:	ldr	r4, [pc, #324]	; 11bd0 <__assert_fail@plt+0x3c0>
   11a88:	b	11a08 <__assert_fail@plt+0x1f8>
   11a8c:	bl	11678 <__errno_location@plt>
   11a90:	mov	r2, #5
   11a94:	ldr	r1, [pc, #312]	; 11bd4 <__assert_fail@plt+0x3c4>
   11a98:	mov	fp, #1
   11a9c:	ldr	r9, [r0]
   11aa0:	mov	r0, #0
   11aa4:	bl	114ec <dcgettext@plt>
   11aa8:	ldr	r3, [r8]
   11aac:	ldr	r1, [r5, r3, lsl #2]
   11ab0:	mov	sl, r0
   11ab4:	mov	r0, #4
   11ab8:	bl	166f0 <__assert_fail@plt+0x4ee0>
   11abc:	mov	r2, sl
   11ac0:	mov	r1, r9
   11ac4:	mov	r3, r0
   11ac8:	mov	r0, #0
   11acc:	bl	115b8 <error@plt>
   11ad0:	b	11a58 <__assert_fail@plt+0x248>
   11ad4:	mov	r0, fp
   11ad8:	add	sp, sp, #20
   11adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ae0:	bl	11678 <__errno_location@plt>
   11ae4:	mov	r2, #5
   11ae8:	ldr	r1, [pc, #232]	; 11bd8 <__assert_fail@plt+0x3c8>
   11aec:	mov	fp, #1
   11af0:	ldr	sl, [r0]
   11af4:	mov	r0, r9
   11af8:	bl	114ec <dcgettext@plt>
   11afc:	ldr	r3, [r8]
   11b00:	ldr	r1, [r5, r3, lsl #2]
   11b04:	str	r0, [sp, #12]
   11b08:	mov	r0, #4
   11b0c:	bl	166f0 <__assert_fail@plt+0x4ee0>
   11b10:	ldr	r2, [sp, #12]
   11b14:	mov	r1, sl
   11b18:	mov	r3, r0
   11b1c:	mov	r0, r9
   11b20:	bl	115b8 <error@plt>
   11b24:	b	11a58 <__assert_fail@plt+0x248>
   11b28:	mov	r2, #5
   11b2c:	ldr	r1, [pc, #168]	; 11bdc <__assert_fail@plt+0x3cc>
   11b30:	mov	r0, r4
   11b34:	bl	114ec <dcgettext@plt>
   11b38:	mov	r1, r4
   11b3c:	mov	r2, r0
   11b40:	mov	r0, r4
   11b44:	bl	115b8 <error@plt>
   11b48:	mov	r0, #1
   11b4c:	bl	11cd8 <__assert_fail@plt+0x4c8>
   11b50:	mov	r0, r4
   11b54:	bl	11cd8 <__assert_fail@plt+0x4c8>
   11b58:	mov	r2, #5
   11b5c:	ldr	r1, [pc, #124]	; 11be0 <__assert_fail@plt+0x3d0>
   11b60:	mov	r0, r9
   11b64:	bl	114ec <dcgettext@plt>
   11b68:	mov	r1, r9
   11b6c:	mov	r2, r0
   11b70:	mov	r0, #1
   11b74:	bl	115b8 <error@plt>
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [pc, #96]	; 11be4 <__assert_fail@plt+0x3d4>
   11b80:	bl	114ec <dcgettext@plt>
   11b84:	mov	r1, sl
   11b88:	mov	r2, r0
   11b8c:	mov	r0, #1
   11b90:	bl	115b8 <error@plt>
   11b94:			; <UNDEFINED> instruction: 0x0001a9bc
   11b98:	andeq	sl, r1, ip, asr #14
   11b9c:	andeq	sl, r1, r0, lsr #13
   11ba0:			; <UNDEFINED> instruction: 0x0001a3b8
   11ba4:			; <UNDEFINED> instruction: 0x0001a7bc
   11ba8:	andeq	fp, r2, r8, asr #3
   11bac:	andeq	r2, r1, ip, lsr #25
   11bb0:	andeq	fp, r2, r4, asr #3
   11bb4:	andeq	fp, r2, r8, ror #2
   11bb8:	andeq	sl, r1, ip, lsr #15
   11bbc:	andeq	sl, r1, r8, lsl #8
   11bc0:	muleq	r1, ip, r6
   11bc4:	andeq	sl, r1, r0, ror #14
   11bc8:			; <UNDEFINED> instruction: 0x0002b1b8
   11bcc:	ldrdeq	sl, [r1], -r0
   11bd0:			; <UNDEFINED> instruction: 0x000001b6
   11bd4:	andeq	sl, r1, r0, asr #16
   11bd8:	andeq	sl, r1, r8, asr r8
   11bdc:	andeq	sl, r1, r0, asr #15
   11be0:	andeq	sl, r1, r4, lsl r8
   11be4:	andeq	sl, r1, r4, lsl #16
   11be8:	mov	fp, #0
   11bec:	mov	lr, #0
   11bf0:	pop	{r1}		; (ldr r1, [sp], #4)
   11bf4:	mov	r2, sp
   11bf8:	push	{r2}		; (str r2, [sp, #-4]!)
   11bfc:	push	{r0}		; (str r0, [sp, #-4]!)
   11c00:	ldr	ip, [pc, #16]	; 11c18 <__assert_fail@plt+0x408>
   11c04:	push	{ip}		; (str ip, [sp, #-4]!)
   11c08:	ldr	r0, [pc, #12]	; 11c1c <__assert_fail@plt+0x40c>
   11c0c:	ldr	r3, [pc, #12]	; 11c20 <__assert_fail@plt+0x410>
   11c10:	bl	115e8 <__libc_start_main@plt>
   11c14:	bl	117bc <abort@plt>
   11c18:	andeq	sl, r1, r8, asr r3
   11c1c:	andeq	r1, r1, r0, lsr #16
   11c20:	strdeq	sl, [r1], -r8
   11c24:	ldr	r3, [pc, #20]	; 11c40 <__assert_fail@plt+0x430>
   11c28:	ldr	r2, [pc, #20]	; 11c44 <__assert_fail@plt+0x434>
   11c2c:	add	r3, pc, r3
   11c30:	ldr	r2, [r3, r2]
   11c34:	cmp	r2, #0
   11c38:	bxeq	lr
   11c3c:	b	11600 <__gmon_start__@plt>
   11c40:	andeq	r9, r1, ip, asr #7
   11c44:	andeq	r0, r0, ip, asr r1
   11c48:	ldr	r0, [pc, #24]	; 11c68 <__assert_fail@plt+0x458>
   11c4c:	ldr	r3, [pc, #24]	; 11c6c <__assert_fail@plt+0x45c>
   11c50:	cmp	r3, r0
   11c54:	bxeq	lr
   11c58:	ldr	r3, [pc, #16]	; 11c70 <__assert_fail@plt+0x460>
   11c5c:	cmp	r3, #0
   11c60:	bxeq	lr
   11c64:	bx	r3
   11c68:			; <UNDEFINED> instruction: 0x0002b1b0
   11c6c:			; <UNDEFINED> instruction: 0x0002b1b0
   11c70:	andeq	r0, r0, r0
   11c74:	ldr	r0, [pc, #36]	; 11ca0 <__assert_fail@plt+0x490>
   11c78:	ldr	r1, [pc, #36]	; 11ca4 <__assert_fail@plt+0x494>
   11c7c:	sub	r1, r1, r0
   11c80:	asr	r1, r1, #2
   11c84:	add	r1, r1, r1, lsr #31
   11c88:	asrs	r1, r1, #1
   11c8c:	bxeq	lr
   11c90:	ldr	r3, [pc, #16]	; 11ca8 <__assert_fail@plt+0x498>
   11c94:	cmp	r3, #0
   11c98:	bxeq	lr
   11c9c:	bx	r3
   11ca0:			; <UNDEFINED> instruction: 0x0002b1b0
   11ca4:			; <UNDEFINED> instruction: 0x0002b1b0
   11ca8:	andeq	r0, r0, r0
   11cac:	push	{r4, lr}
   11cb0:	ldr	r4, [pc, #24]	; 11cd0 <__assert_fail@plt+0x4c0>
   11cb4:	ldrb	r3, [r4]
   11cb8:	cmp	r3, #0
   11cbc:	popne	{r4, pc}
   11cc0:	bl	11c48 <__assert_fail@plt+0x438>
   11cc4:	mov	r3, #1
   11cc8:	strb	r3, [r4]
   11ccc:	pop	{r4, pc}
   11cd0:	andeq	fp, r2, ip, asr #3
   11cd4:	b	11c74 <__assert_fail@plt+0x464>
   11cd8:	ldr	r3, [pc, #720]	; 11fb0 <__assert_fail@plt+0x7a0>
   11cdc:	push	{r7, lr}
   11ce0:	sub	sp, sp, #64	; 0x40
   11ce4:	ldr	r3, [r3]
   11ce8:	subs	r4, r0, #0
   11cec:	str	r3, [sp, #60]	; 0x3c
   11cf0:	beq	11d2c <__assert_fail@plt+0x51c>
   11cf4:	ldr	r3, [pc, #696]	; 11fb4 <__assert_fail@plt+0x7a4>
   11cf8:	mov	r2, #5
   11cfc:	ldr	r1, [pc, #692]	; 11fb8 <__assert_fail@plt+0x7a8>
   11d00:	mov	r0, #0
   11d04:	ldr	r5, [r3]
   11d08:	bl	114ec <dcgettext@plt>
   11d0c:	ldr	r3, [pc, #680]	; 11fbc <__assert_fail@plt+0x7ac>
   11d10:	mov	r1, #1
   11d14:	ldr	r3, [r3]
   11d18:	mov	r2, r0
   11d1c:	mov	r0, r5
   11d20:	bl	116b4 <__fprintf_chk@plt>
   11d24:	mov	r0, r4
   11d28:	bl	1163c <exit@plt>
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #648]	; 11fc0 <__assert_fail@plt+0x7b0>
   11d34:	bl	114ec <dcgettext@plt>
   11d38:	ldr	r3, [pc, #636]	; 11fbc <__assert_fail@plt+0x7ac>
   11d3c:	ldr	r5, [pc, #640]	; 11fc4 <__assert_fail@plt+0x7b4>
   11d40:	ldr	r2, [r3]
   11d44:	mov	r1, r0
   11d48:	mov	r0, #1
   11d4c:	bl	1169c <__printf_chk@plt>
   11d50:	mov	r2, #5
   11d54:	ldr	r1, [pc, #620]	; 11fc8 <__assert_fail@plt+0x7b8>
   11d58:	mov	r0, r4
   11d5c:	bl	114ec <dcgettext@plt>
   11d60:	ldr	r1, [r5]
   11d64:	bl	11444 <fputs_unlocked@plt>
   11d68:	mov	r2, #5
   11d6c:	ldr	r1, [pc, #600]	; 11fcc <__assert_fail@plt+0x7bc>
   11d70:	mov	r0, r4
   11d74:	bl	114ec <dcgettext@plt>
   11d78:	ldr	r1, [r5]
   11d7c:	bl	11444 <fputs_unlocked@plt>
   11d80:	mov	r2, #5
   11d84:	ldr	r1, [pc, #580]	; 11fd0 <__assert_fail@plt+0x7c0>
   11d88:	mov	r0, r4
   11d8c:	bl	114ec <dcgettext@plt>
   11d90:	ldr	r1, [r5]
   11d94:	bl	11444 <fputs_unlocked@plt>
   11d98:	mov	r2, #5
   11d9c:	ldr	r1, [pc, #560]	; 11fd4 <__assert_fail@plt+0x7c4>
   11da0:	mov	r0, r4
   11da4:	bl	114ec <dcgettext@plt>
   11da8:	ldr	r1, [r5]
   11dac:	bl	11444 <fputs_unlocked@plt>
   11db0:	mov	r2, #5
   11db4:	ldr	r1, [pc, #540]	; 11fd8 <__assert_fail@plt+0x7c8>
   11db8:	mov	r0, r4
   11dbc:	bl	114ec <dcgettext@plt>
   11dc0:	ldr	r1, [r5]
   11dc4:	bl	11444 <fputs_unlocked@plt>
   11dc8:	mov	r2, #5
   11dcc:	ldr	r1, [pc, #520]	; 11fdc <__assert_fail@plt+0x7cc>
   11dd0:	mov	r0, r4
   11dd4:	bl	114ec <dcgettext@plt>
   11dd8:	ldr	r1, [r5]
   11ddc:	bl	11444 <fputs_unlocked@plt>
   11de0:	ldr	lr, [pc, #504]	; 11fe0 <__assert_fail@plt+0x7d0>
   11de4:	add	ip, sp, #4
   11de8:	ldm	lr!, {r0, r1, r2, r3}
   11dec:	stmia	ip!, {r0, r1, r2, r3}
   11df0:	ldm	lr!, {r0, r1, r2, r3}
   11df4:	ldr	r6, [sp, #4]
   11df8:	stmia	ip!, {r0, r1, r2, r3}
   11dfc:	cmp	r6, #0
   11e00:	ldm	lr!, {r0, r1, r2, r3}
   11e04:	addeq	r5, sp, #4
   11e08:	stmia	ip!, {r0, r1, r2, r3}
   11e0c:	ldm	lr, {r0, r1}
   11e10:	stm	ip, {r0, r1}
   11e14:	beq	11e44 <__assert_fail@plt+0x634>
   11e18:	ldr	r7, [pc, #452]	; 11fe4 <__assert_fail@plt+0x7d4>
   11e1c:	add	r5, sp, #4
   11e20:	b	11e30 <__assert_fail@plt+0x620>
   11e24:	ldr	r6, [r5, #8]!
   11e28:	cmp	r6, #0
   11e2c:	beq	11e44 <__assert_fail@plt+0x634>
   11e30:	mov	r1, r6
   11e34:	mov	r0, r7
   11e38:	bl	11468 <strcmp@plt>
   11e3c:	cmp	r0, #0
   11e40:	bne	11e24 <__assert_fail@plt+0x614>
   11e44:	ldr	r5, [r5, #4]
   11e48:	mov	r2, #5
   11e4c:	cmp	r5, #0
   11e50:	ldr	r1, [pc, #400]	; 11fe8 <__assert_fail@plt+0x7d8>
   11e54:	beq	11efc <__assert_fail@plt+0x6ec>
   11e58:	mov	r0, #0
   11e5c:	bl	114ec <dcgettext@plt>
   11e60:	ldr	r3, [pc, #388]	; 11fec <__assert_fail@plt+0x7dc>
   11e64:	ldr	r2, [pc, #388]	; 11ff0 <__assert_fail@plt+0x7e0>
   11e68:	mov	r1, r0
   11e6c:	mov	r0, #1
   11e70:	bl	1169c <__printf_chk@plt>
   11e74:	mov	r1, #0
   11e78:	mov	r0, #5
   11e7c:	bl	116e4 <setlocale@plt>
   11e80:	cmp	r0, #0
   11e84:	ldreq	r6, [pc, #344]	; 11fe4 <__assert_fail@plt+0x7d4>
   11e88:	beq	11ea4 <__assert_fail@plt+0x694>
   11e8c:	mov	r2, #3
   11e90:	ldr	r1, [pc, #348]	; 11ff4 <__assert_fail@plt+0x7e4>
   11e94:	bl	117b0 <strncmp@plt>
   11e98:	ldr	r6, [pc, #324]	; 11fe4 <__assert_fail@plt+0x7d4>
   11e9c:	cmp	r0, #0
   11ea0:	bne	11f8c <__assert_fail@plt+0x77c>
   11ea4:	mov	r2, #5
   11ea8:	ldr	r1, [pc, #328]	; 11ff8 <__assert_fail@plt+0x7e8>
   11eac:	mov	r0, #0
   11eb0:	bl	114ec <dcgettext@plt>
   11eb4:	ldr	r3, [pc, #296]	; 11fe4 <__assert_fail@plt+0x7d4>
   11eb8:	ldr	r2, [pc, #300]	; 11fec <__assert_fail@plt+0x7dc>
   11ebc:	mov	r1, r0
   11ec0:	mov	r0, #1
   11ec4:	bl	1169c <__printf_chk@plt>
   11ec8:	mov	r2, #5
   11ecc:	ldr	r1, [pc, #296]	; 11ffc <__assert_fail@plt+0x7ec>
   11ed0:	mov	r0, #0
   11ed4:	bl	114ec <dcgettext@plt>
   11ed8:	ldr	r2, [pc, #288]	; 12000 <__assert_fail@plt+0x7f0>
   11edc:	cmp	r5, r6
   11ee0:	ldr	r3, [pc, #284]	; 12004 <__assert_fail@plt+0x7f4>
   11ee4:	movne	r3, r2
   11ee8:	mov	r1, r0
   11eec:	mov	r2, r5
   11ef0:	mov	r0, #1
   11ef4:	bl	1169c <__printf_chk@plt>
   11ef8:	b	11d24 <__assert_fail@plt+0x514>
   11efc:	mov	r0, r5
   11f00:	bl	114ec <dcgettext@plt>
   11f04:	ldr	r3, [pc, #224]	; 11fec <__assert_fail@plt+0x7dc>
   11f08:	ldr	r2, [pc, #224]	; 11ff0 <__assert_fail@plt+0x7e0>
   11f0c:	mov	r1, r0
   11f10:	mov	r0, #1
   11f14:	bl	1169c <__printf_chk@plt>
   11f18:	mov	r1, r5
   11f1c:	mov	r0, #5
   11f20:	bl	116e4 <setlocale@plt>
   11f24:	cmp	r0, #0
   11f28:	beq	11f40 <__assert_fail@plt+0x730>
   11f2c:	mov	r2, #3
   11f30:	ldr	r1, [pc, #188]	; 11ff4 <__assert_fail@plt+0x7e4>
   11f34:	bl	117b0 <strncmp@plt>
   11f38:	cmp	r0, #0
   11f3c:	bne	11f84 <__assert_fail@plt+0x774>
   11f40:	mov	r2, #5
   11f44:	ldr	r1, [pc, #172]	; 11ff8 <__assert_fail@plt+0x7e8>
   11f48:	mov	r0, #0
   11f4c:	bl	114ec <dcgettext@plt>
   11f50:	ldr	r3, [pc, #140]	; 11fe4 <__assert_fail@plt+0x7d4>
   11f54:	ldr	r2, [pc, #144]	; 11fec <__assert_fail@plt+0x7dc>
   11f58:	mov	r5, r3
   11f5c:	mov	r1, r0
   11f60:	mov	r0, #1
   11f64:	bl	1169c <__printf_chk@plt>
   11f68:	ldr	r1, [pc, #140]	; 11ffc <__assert_fail@plt+0x7ec>
   11f6c:	mov	r2, #5
   11f70:	mov	r0, #0
   11f74:	bl	114ec <dcgettext@plt>
   11f78:	ldr	r3, [pc, #132]	; 12004 <__assert_fail@plt+0x7f4>
   11f7c:	mov	r1, r0
   11f80:	b	11eec <__assert_fail@plt+0x6dc>
   11f84:	ldr	r6, [pc, #88]	; 11fe4 <__assert_fail@plt+0x7d4>
   11f88:	mov	r5, r6
   11f8c:	mov	r2, #5
   11f90:	ldr	r1, [pc, #112]	; 12008 <__assert_fail@plt+0x7f8>
   11f94:	mov	r0, #0
   11f98:	bl	114ec <dcgettext@plt>
   11f9c:	ldr	r2, [pc, #64]	; 11fe4 <__assert_fail@plt+0x7d4>
   11fa0:	mov	r1, r0
   11fa4:	mov	r0, #1
   11fa8:	bl	1169c <__printf_chk@plt>
   11fac:	b	11ea4 <__assert_fail@plt+0x694>
   11fb0:	andeq	sl, r2, r0, lsl #30
   11fb4:	andeq	fp, r2, r0, asr #3
   11fb8:	andeq	sl, r1, r0, lsl r4
   11fbc:	ldrdeq	fp, [r2], -r8
   11fc0:	andeq	sl, r1, r8, lsr r4
   11fc4:	andeq	fp, r2, r4, asr #3
   11fc8:	andeq	sl, r1, r8, asr r4
   11fcc:	andeq	sl, r1, ip, lsl #9
   11fd0:	ldrdeq	sl, [r1], -r8
   11fd4:	andeq	sl, r1, r4, lsr #10
   11fd8:	strdeq	sl, [r1], -r4
   11fdc:	andeq	sl, r1, r4, lsr #12
   11fe0:	andeq	sl, r1, r0, lsl #7
   11fe4:	andeq	sl, r1, r8, lsl #8
   11fe8:	andeq	sl, r1, ip, asr r6
   11fec:	andeq	sl, r1, r4, ror r6
   11ff0:	muleq	r1, ip, r6
   11ff4:	andeq	sl, r1, ip, lsr #13
   11ff8:	strdeq	sl, [r1], -r8
   11ffc:	andeq	sl, r1, r8, lsl r7
   12000:			; <UNDEFINED> instruction: 0x0001a9bc
   12004:	andeq	sl, r1, r0, lsl #17
   12008:			; <UNDEFINED> instruction: 0x0001a6b0
   1200c:	push	{r4, r5, r6, r7, r8, lr}
   12010:	sub	sp, sp, #120	; 0x78
   12014:	ldr	r5, [pc, #612]	; 12280 <__assert_fail@plt+0xa70>
   12018:	mov	r3, #0
   1201c:	subs	r6, r1, #0
   12020:	ldr	r2, [r5]
   12024:	str	r3, [sp]
   12028:	str	r2, [sp, #116]	; 0x74
   1202c:	str	r3, [sp, #4]
   12030:	mov	r8, r0
   12034:	beq	12084 <__assert_fail@plt+0x874>
   12038:	add	r0, sp, #4
   1203c:	bl	11774 <getfscreatecon@plt>
   12040:	cmp	r0, #0
   12044:	blt	121e4 <__assert_fail@plt+0x9d4>
   12048:	ldr	r1, [sp, #4]
   1204c:	cmp	r1, #0
   12050:	beq	12258 <__assert_fail@plt+0xa48>
   12054:	mov	r0, r8
   12058:	bl	1148c <lsetfilecon@plt>
   1205c:	mov	r4, r0
   12060:	ldr	r0, [sp, #4]
   12064:	bl	1175c <freecon@plt>
   12068:	ldr	r2, [sp, #116]	; 0x74
   1206c:	ldr	r3, [r5]
   12070:	mov	r0, r4
   12074:	cmp	r2, r3
   12078:	bne	1227c <__assert_fail@plt+0xa6c>
   1207c:	add	sp, sp, #120	; 0x78
   12080:	pop	{r4, r5, r6, r7, r8, pc}
   12084:	mov	r1, #32768	; 0x8000
   12088:	bl	115c4 <open64@plt>
   1208c:	cmn	r0, #1
   12090:	mov	r4, r0
   12094:	beq	121a0 <__assert_fail@plt+0x990>
   12098:	mov	r1, r0
   1209c:	add	r2, sp, #8
   120a0:	mov	r0, #3
   120a4:	bl	1154c <__fxstat64@plt>
   120a8:	cmp	r0, #0
   120ac:	blt	121d8 <__assert_fail@plt+0x9c8>
   120b0:	mov	r2, sp
   120b4:	ldr	r1, [sp, #24]
   120b8:	mov	r0, r8
   120bc:	bl	11588 <matchpathcon@plt>
   120c0:	cmp	r0, #0
   120c4:	blt	1214c <__assert_fail@plt+0x93c>
   120c8:	ldr	r0, [sp]
   120cc:	bl	114d4 <context_new@plt>
   120d0:	subs	r7, r0, #0
   120d4:	beq	1215c <__assert_fail@plt+0x94c>
   120d8:	cmn	r4, #1
   120dc:	add	r1, sp, #4
   120e0:	beq	121ec <__assert_fail@plt+0x9dc>
   120e4:	mov	r0, r4
   120e8:	bl	19750 <fts_children@@Base+0x1ec>
   120ec:	cmp	r0, #0
   120f0:	blt	12244 <__assert_fail@plt+0xa34>
   120f4:	ldr	r0, [sp, #4]
   120f8:	bl	114d4 <context_new@plt>
   120fc:	subs	r6, r0, #0
   12100:	beq	1216c <__assert_fail@plt+0x95c>
   12104:	mov	r0, r7
   12108:	bl	11474 <context_type_get@plt>
   1210c:	subs	r1, r0, #0
   12110:	beq	1216c <__assert_fail@plt+0x95c>
   12114:	mov	r0, r6
   12118:	bl	11504 <context_type_set@plt>
   1211c:	cmp	r0, #0
   12120:	bne	1216c <__assert_fail@plt+0x95c>
   12124:	mov	r0, r6
   12128:	bl	1178c <context_str@plt>
   1212c:	subs	r1, r0, #0
   12130:	beq	12164 <__assert_fail@plt+0x954>
   12134:	cmn	r4, #1
   12138:	beq	1226c <__assert_fail@plt+0xa5c>
   1213c:	mov	r0, r4
   12140:	bl	116f0 <fsetfilecon@plt>
   12144:	mov	r8, r0
   12148:	b	12170 <__assert_fail@plt+0x960>
   1214c:	bl	11678 <__errno_location@plt>
   12150:	ldr	r3, [r0]
   12154:	cmp	r3, #2
   12158:	beq	12230 <__assert_fail@plt+0xa20>
   1215c:	mov	r6, #0
   12160:	mov	r7, r6
   12164:	cmn	r4, #1
   12168:	beq	1217c <__assert_fail@plt+0x96c>
   1216c:	mvn	r8, #0
   12170:	mov	r0, r4
   12174:	bl	117c8 <close@plt>
   12178:	mov	r4, r8
   1217c:	mov	r0, r7
   12180:	bl	1160c <context_free@plt>
   12184:	mov	r0, r6
   12188:	bl	1160c <context_free@plt>
   1218c:	ldr	r0, [sp]
   12190:	bl	1175c <freecon@plt>
   12194:	ldr	r0, [sp, #4]
   12198:	bl	1175c <freecon@plt>
   1219c:	b	12068 <__assert_fail@plt+0x858>
   121a0:	bl	11678 <__errno_location@plt>
   121a4:	ldr	r3, [r0]
   121a8:	cmp	r3, #40	; 0x28
   121ac:	beq	121bc <__assert_fail@plt+0x9ac>
   121b0:	mov	r6, #0
   121b4:	mov	r7, r6
   121b8:	b	1217c <__assert_fail@plt+0x96c>
   121bc:	add	r2, sp, #8
   121c0:	mov	r1, r8
   121c4:	mov	r0, #3
   121c8:	bl	117d4 <__lxstat64@plt>
   121cc:	cmp	r0, #0
   121d0:	bge	120b0 <__assert_fail@plt+0x8a0>
   121d4:	b	121b0 <__assert_fail@plt+0x9a0>
   121d8:	mov	r7, r6
   121dc:	mvn	r8, #0
   121e0:	b	12170 <__assert_fail@plt+0x960>
   121e4:	mvn	r4, #0
   121e8:	b	12068 <__assert_fail@plt+0x858>
   121ec:	mov	r0, r8
   121f0:	bl	19738 <fts_children@@Base+0x1d4>
   121f4:	cmp	r0, #0
   121f8:	blt	12250 <__assert_fail@plt+0xa40>
   121fc:	ldr	r0, [sp, #4]
   12200:	bl	114d4 <context_new@plt>
   12204:	subs	r6, r0, #0
   12208:	beq	1217c <__assert_fail@plt+0x96c>
   1220c:	mov	r0, r7
   12210:	bl	11474 <context_type_get@plt>
   12214:	subs	r1, r0, #0
   12218:	beq	1217c <__assert_fail@plt+0x96c>
   1221c:	mov	r0, r6
   12220:	bl	11504 <context_type_set@plt>
   12224:	cmp	r0, #0
   12228:	bne	1217c <__assert_fail@plt+0x96c>
   1222c:	b	12124 <__assert_fail@plt+0x914>
   12230:	mov	r3, #61	; 0x3d
   12234:	mov	r6, #0
   12238:	str	r3, [r0]
   1223c:	mov	r7, r6
   12240:	b	12164 <__assert_fail@plt+0x954>
   12244:	mov	r6, #0
   12248:	mvn	r8, #0
   1224c:	b	12170 <__assert_fail@plt+0x960>
   12250:	mov	r6, #0
   12254:	b	1217c <__assert_fail@plt+0x96c>
   12258:	bl	11678 <__errno_location@plt>
   1225c:	mov	r3, #61	; 0x3d
   12260:	mvn	r4, #0
   12264:	str	r3, [r0]
   12268:	b	12068 <__assert_fail@plt+0x858>
   1226c:	mov	r0, r8
   12270:	bl	1148c <lsetfilecon@plt>
   12274:	mov	r4, r0
   12278:	b	1217c <__assert_fail@plt+0x96c>
   1227c:	bl	114f8 <__stack_chk_fail@plt>
   12280:	andeq	sl, r2, r0, lsl #30
   12284:	push	{r4, r5, r6, r7, r8, lr}
   12288:	sub	sp, sp, #24
   1228c:	ldrb	r2, [r0]
   12290:	ldr	r7, [pc, #540]	; 124b4 <__assert_fail@plt+0xca4>
   12294:	mov	r3, #0
   12298:	cmp	r2, #47	; 0x2f
   1229c:	ldr	r2, [r7]
   122a0:	mov	r5, r0
   122a4:	mov	r6, r1
   122a8:	str	r3, [sp, #4]
   122ac:	str	r2, [sp, #20]
   122b0:	str	r3, [sp, #8]
   122b4:	beq	12400 <__assert_fail@plt+0xbf0>
   122b8:	mov	r1, #2
   122bc:	bl	12678 <__assert_fail@plt+0xe68>
   122c0:	subs	r4, r0, #0
   122c4:	movne	r5, r4
   122c8:	beq	12478 <__assert_fail@plt+0xc68>
   122cc:	add	r2, sp, #4
   122d0:	mov	r1, r6
   122d4:	mov	r0, r4
   122d8:	bl	11588 <matchpathcon@plt>
   122dc:	cmp	r0, #0
   122e0:	blt	1244c <__assert_fail@plt+0xc3c>
   122e4:	mov	r3, #0
   122e8:	mov	r0, r4
   122ec:	str	r3, [sp, #12]
   122f0:	str	r3, [sp, #16]
   122f4:	bl	12d84 <__assert_fail@plt+0x1574>
   122f8:	subs	r4, r0, #0
   122fc:	beq	1240c <__assert_fail@plt+0xbfc>
   12300:	add	r0, sp, #12
   12304:	bl	11594 <getcon@plt>
   12308:	cmp	r0, #0
   1230c:	blt	1240c <__assert_fail@plt+0xbfc>
   12310:	add	r1, sp, #16
   12314:	mov	r0, r4
   12318:	bl	19720 <fts_children@@Base+0x1bc>
   1231c:	cmp	r0, #0
   12320:	blt	1240c <__assert_fail@plt+0xbfc>
   12324:	mov	r0, r6
   12328:	bl	117ec <mode_to_security_class@plt>
   1232c:	subs	r2, r0, #0
   12330:	beq	1240c <__assert_fail@plt+0xbfc>
   12334:	add	r3, sp, #8
   12338:	ldrd	r0, [sp, #12]
   1233c:	bl	1172c <security_compute_create@plt>
   12340:	mov	r6, r0
   12344:	mov	r0, r4
   12348:	bl	114a4 <free@plt>
   1234c:	ldr	r0, [sp, #12]
   12350:	bl	1175c <freecon@plt>
   12354:	ldr	r0, [sp, #16]
   12358:	bl	1175c <freecon@plt>
   1235c:	cmp	r6, #0
   12360:	blt	1243c <__assert_fail@plt+0xc2c>
   12364:	ldr	r0, [sp, #4]
   12368:	bl	114d4 <context_new@plt>
   1236c:	subs	r6, r0, #0
   12370:	beq	1243c <__assert_fail@plt+0xc2c>
   12374:	ldr	r0, [sp, #8]
   12378:	bl	114d4 <context_new@plt>
   1237c:	subs	r4, r0, #0
   12380:	beq	12434 <__assert_fail@plt+0xc24>
   12384:	mov	r0, r6
   12388:	bl	11474 <context_type_get@plt>
   1238c:	subs	r1, r0, #0
   12390:	beq	12434 <__assert_fail@plt+0xc24>
   12394:	mov	r0, r4
   12398:	bl	11504 <context_type_set@plt>
   1239c:	cmp	r0, #0
   123a0:	bne	12434 <__assert_fail@plt+0xc24>
   123a4:	mov	r0, r4
   123a8:	bl	1178c <context_str@plt>
   123ac:	cmp	r0, #0
   123b0:	beq	12434 <__assert_fail@plt+0xc24>
   123b4:	bl	1166c <setfscreatecon@plt>
   123b8:	mov	r8, r0
   123bc:	mov	r0, r6
   123c0:	bl	1160c <context_free@plt>
   123c4:	mov	r0, r4
   123c8:	bl	1160c <context_free@plt>
   123cc:	ldr	r0, [sp, #4]
   123d0:	bl	1175c <freecon@plt>
   123d4:	ldr	r0, [sp, #8]
   123d8:	bl	1175c <freecon@plt>
   123dc:	mov	r0, r5
   123e0:	bl	114a4 <free@plt>
   123e4:	ldr	r2, [sp, #20]
   123e8:	ldr	r3, [r7]
   123ec:	mov	r0, r8
   123f0:	cmp	r2, r3
   123f4:	bne	12474 <__assert_fail@plt+0xc64>
   123f8:	add	sp, sp, #24
   123fc:	pop	{r4, r5, r6, r7, r8, pc}
   12400:	mov	r4, r0
   12404:	mov	r5, r3
   12408:	b	122cc <__assert_fail@plt+0xabc>
   1240c:	mov	r0, r4
   12410:	bl	114a4 <free@plt>
   12414:	ldr	r0, [sp, #12]
   12418:	bl	1175c <freecon@plt>
   1241c:	mov	r4, #0
   12420:	ldr	r0, [sp, #16]
   12424:	bl	1175c <freecon@plt>
   12428:	mov	r6, r4
   1242c:	mvn	r8, #0
   12430:	b	123bc <__assert_fail@plt+0xbac>
   12434:	mvn	r8, #0
   12438:	b	123bc <__assert_fail@plt+0xbac>
   1243c:	mov	r4, #0
   12440:	mov	r6, r4
   12444:	mvn	r8, #0
   12448:	b	123bc <__assert_fail@plt+0xbac>
   1244c:	bl	11678 <__errno_location@plt>
   12450:	ldr	r3, [r0]
   12454:	cmp	r3, #2
   12458:	bne	1243c <__assert_fail@plt+0xc2c>
   1245c:	mov	r3, #61	; 0x3d
   12460:	mov	r4, #0
   12464:	str	r3, [r0]
   12468:	mov	r6, r4
   1246c:	mvn	r8, #0
   12470:	b	123bc <__assert_fail@plt+0xbac>
   12474:	bl	114f8 <__stack_chk_fail@plt>
   12478:	bl	11678 <__errno_location@plt>
   1247c:	mov	r2, #5
   12480:	ldr	r1, [pc, #48]	; 124b8 <__assert_fail@plt+0xca8>
   12484:	ldr	r6, [r0]
   12488:	mov	r0, r4
   1248c:	bl	114ec <dcgettext@plt>
   12490:	mov	r1, r5
   12494:	mov	r4, r0
   12498:	mov	r0, #4
   1249c:	bl	166f0 <__assert_fail@plt+0x4ee0>
   124a0:	mov	r2, r4
   124a4:	mov	r1, r6
   124a8:	mov	r3, r0
   124ac:	mov	r0, #1
   124b0:	bl	115b8 <error@plt>
   124b4:	andeq	sl, r2, r0, lsl #30
   124b8:	strdeq	sl, [r1], -ip
   124bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   124c0:	mov	r6, r2
   124c4:	ldr	r8, [pc, #412]	; 12668 <__assert_fail@plt+0xe58>
   124c8:	ldrb	r3, [r0]
   124cc:	sub	sp, sp, #16
   124d0:	ldr	r2, [r8]
   124d4:	cmp	r3, #47	; 0x2f
   124d8:	movne	r3, r6
   124dc:	orreq	r3, r6, #1
   124e0:	cmp	r3, #0
   124e4:	mov	r5, r0
   124e8:	mov	r4, r1
   124ec:	str	r2, [sp, #12]
   124f0:	movne	r9, #0
   124f4:	beq	12614 <__assert_fail@plt+0xe04>
   124f8:	mov	r2, #0
   124fc:	cmp	r4, #0
   12500:	str	r5, [sp, #4]
   12504:	str	r2, [sp, #8]
   12508:	beq	125f4 <__assert_fail@plt+0xde4>
   1250c:	mov	r1, #16
   12510:	add	r0, sp, #4
   12514:	bl	1731c <__assert_fail@plt+0x5b0c>
   12518:	mov	r5, r0
   1251c:	b	12538 <__assert_fail@plt+0xd28>
   12520:	mov	r1, r6
   12524:	ldr	r0, [r5, #24]
   12528:	bl	1200c <__assert_fail@plt+0x7fc>
   1252c:	adds	r0, r0, #1
   12530:	movne	r0, #1
   12534:	and	r4, r4, r0
   12538:	mov	r0, r5
   1253c:	bl	18de8 <fts_read@@Base>
   12540:	subs	r7, r0, #0
   12544:	bne	12520 <__assert_fail@plt+0xd10>
   12548:	bl	11678 <__errno_location@plt>
   1254c:	ldr	sl, [r0]
   12550:	mov	r6, r0
   12554:	cmp	sl, #0
   12558:	bne	125bc <__assert_fail@plt+0xdac>
   1255c:	mov	r0, r5
   12560:	bl	18c68 <fts_close@@Base>
   12564:	cmp	r0, #0
   12568:	bne	12590 <__assert_fail@plt+0xd80>
   1256c:	mov	r0, r9
   12570:	bl	114a4 <free@plt>
   12574:	ldr	r2, [sp, #12]
   12578:	ldr	r3, [r8]
   1257c:	mov	r0, r4
   12580:	cmp	r2, r3
   12584:	bne	12664 <__assert_fail@plt+0xe54>
   12588:	add	sp, sp, #16
   1258c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12590:	mov	r2, #5
   12594:	ldr	r1, [pc, #208]	; 1266c <__assert_fail@plt+0xe5c>
   12598:	mov	r0, #0
   1259c:	ldr	r4, [r6]
   125a0:	bl	114ec <dcgettext@plt>
   125a4:	mov	r1, r4
   125a8:	mov	r4, #0
   125ac:	mov	r2, r0
   125b0:	mov	r0, #0
   125b4:	bl	115b8 <error@plt>
   125b8:	b	1256c <__assert_fail@plt+0xd5c>
   125bc:	mov	r2, #5
   125c0:	ldr	r1, [pc, #168]	; 12670 <__assert_fail@plt+0xe60>
   125c4:	mov	r0, r7
   125c8:	bl	114ec <dcgettext@plt>
   125cc:	mov	r1, sl
   125d0:	mov	r4, r7
   125d4:	mov	r2, r0
   125d8:	mov	r0, r7
   125dc:	bl	115b8 <error@plt>
   125e0:	mov	r0, r5
   125e4:	bl	18c68 <fts_close@@Base>
   125e8:	cmp	r0, #0
   125ec:	beq	1256c <__assert_fail@plt+0xd5c>
   125f0:	b	12590 <__assert_fail@plt+0xd80>
   125f4:	mov	r1, r6
   125f8:	mov	r0, r5
   125fc:	bl	1200c <__assert_fail@plt+0x7fc>
   12600:	adds	r4, r0, #1
   12604:	mov	r0, r9
   12608:	movne	r4, #1
   1260c:	bl	114a4 <free@plt>
   12610:	b	12574 <__assert_fail@plt+0xd64>
   12614:	mov	r1, #2
   12618:	bl	12678 <__assert_fail@plt+0xe68>
   1261c:	subs	r9, r0, #0
   12620:	movne	r5, r9
   12624:	bne	124f8 <__assert_fail@plt+0xce8>
   12628:	bl	11678 <__errno_location@plt>
   1262c:	mov	r2, #5
   12630:	ldr	r1, [pc, #60]	; 12674 <__assert_fail@plt+0xe64>
   12634:	ldr	r4, [r0]
   12638:	mov	r0, r9
   1263c:	bl	114ec <dcgettext@plt>
   12640:	mov	r1, r5
   12644:	mov	r6, r0
   12648:	mov	r0, #4
   1264c:	bl	166f0 <__assert_fail@plt+0x4ee0>
   12650:	mov	r2, r6
   12654:	mov	r1, r4
   12658:	mov	r3, r0
   1265c:	mov	r0, #1
   12660:	bl	115b8 <error@plt>
   12664:	bl	114f8 <__stack_chk_fail@plt>
   12668:	andeq	sl, r2, r0, lsl #30
   1266c:	andeq	sl, r1, r4, lsr #18
   12670:	andeq	sl, r1, r4, lsl r9
   12674:	strdeq	sl, [r1], -ip
   12678:	ldr	r2, [pc, #1524]	; 12c74 <__assert_fail@plt+0x1464>
   1267c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12680:	and	r9, r1, #3
   12684:	sub	sp, sp, #148	; 0x94
   12688:	sub	r3, r9, #1
   1268c:	ldr	r2, [r2]
   12690:	ands	r3, r3, r9
   12694:	str	r3, [sp, #28]
   12698:	str	r2, [sp, #140]	; 0x8c
   1269c:	bne	12b58 <__assert_fail@plt+0x1348>
   126a0:	cmp	r0, #0
   126a4:	beq	12ba4 <__assert_fail@plt+0x1394>
   126a8:	ldrb	r5, [r0]
   126ac:	cmp	r5, #0
   126b0:	beq	12b6c <__assert_fail@plt+0x135c>
   126b4:	cmp	r5, #47	; 0x2f
   126b8:	mov	r4, r1
   126bc:	str	r0, [sp, #8]
   126c0:	beq	12870 <__assert_fail@plt+0x1060>
   126c4:	bl	1739c <__assert_fail@plt+0x5b8c>
   126c8:	subs	r8, r0, #0
   126cc:	beq	12918 <__assert_fail@plt+0x1108>
   126d0:	bl	11654 <strlen@plt>
   126d4:	ldr	r3, [sp, #8]
   126d8:	cmp	r0, #4096	; 0x1000
   126dc:	mov	r6, r0
   126e0:	bcc	12b80 <__assert_fail@plt+0x1370>
   126e4:	add	r6, r8, r0
   126e8:	mov	r7, r6
   126ec:	mov	r2, #0
   126f0:	str	r2, [sp, #16]
   126f4:	str	r2, [sp, #24]
   126f8:	mov	sl, r2
   126fc:	ldrb	r2, [r3]
   12700:	and	r1, r4, #4
   12704:	str	r1, [sp, #8]
   12708:	str	r3, [sp, #20]
   1270c:	cmp	r2, #0
   12710:	beq	128bc <__assert_fail@plt+0x10ac>
   12714:	cmp	r2, #47	; 0x2f
   12718:	movne	r1, r2
   1271c:	bne	12734 <__assert_fail@plt+0xf24>
   12720:	ldrb	r1, [r3, #1]!
   12724:	cmp	r1, #47	; 0x2f
   12728:	beq	12720 <__assert_fail@plt+0xf10>
   1272c:	cmp	r1, #0
   12730:	beq	128bc <__assert_fail@plt+0x10ac>
   12734:	mov	r4, r3
   12738:	b	12740 <__assert_fail@plt+0xf30>
   1273c:	mov	r4, r5
   12740:	ldrb	r2, [r4, #1]
   12744:	add	r5, r4, #1
   12748:	cmp	r2, #0
   1274c:	cmpne	r2, #47	; 0x2f
   12750:	bne	1273c <__assert_fail@plt+0xf2c>
   12754:	cmp	r5, r3
   12758:	beq	128bc <__assert_fail@plt+0x10ac>
   1275c:	sub	fp, r5, r3
   12760:	cmp	fp, #1
   12764:	beq	128ac <__assert_fail@plt+0x109c>
   12768:	cmp	r1, #46	; 0x2e
   1276c:	cmpeq	fp, #2
   12770:	beq	12a28 <__assert_fail@plt+0x1218>
   12774:	ldrb	r2, [r6, #-1]
   12778:	cmp	r2, #47	; 0x2f
   1277c:	movne	r2, #47	; 0x2f
   12780:	strbne	r2, [r6], #1
   12784:	add	r2, r6, fp
   12788:	cmp	r7, r2
   1278c:	bhi	127cc <__assert_fail@plt+0xfbc>
   12790:	ldr	r2, [pc, #1248]	; 12c78 <__assert_fail@plt+0x1468>
   12794:	sub	r7, r7, r8
   12798:	cmp	fp, r2
   1279c:	addgt	r7, r7, #1
   127a0:	addgt	r7, fp, r7
   127a4:	addle	r7, r7, #4096	; 0x1000
   127a8:	mov	r0, r8
   127ac:	mov	r1, r7
   127b0:	str	r3, [sp, #12]
   127b4:	bl	170f0 <__assert_fail@plt+0x58e0>
   127b8:	sub	r6, r6, r8
   127bc:	ldr	r3, [sp, #12]
   127c0:	mov	r8, r0
   127c4:	add	r7, r0, r7
   127c8:	add	r6, r0, r6
   127cc:	mov	r1, r3
   127d0:	mov	r0, r6
   127d4:	mov	r2, fp
   127d8:	bl	114bc <memcpy@plt>
   127dc:	ldr	r2, [sp, #8]
   127e0:	sub	r3, r9, #2
   127e4:	cmp	r2, #0
   127e8:	clz	r3, r3
   127ec:	lsr	r3, r3, #5
   127f0:	moveq	r3, #0
   127f4:	cmp	r3, #0
   127f8:	strb	sl, [r0, fp]
   127fc:	add	r6, r0, fp
   12800:	bne	12850 <__assert_fail@plt+0x1040>
   12804:	ldr	r3, [sp, #8]
   12808:	add	fp, sp, #32
   1280c:	cmp	r3, #0
   12810:	mov	r2, fp
   12814:	mov	r1, r8
   12818:	mov	r0, #3
   1281c:	beq	12938 <__assert_fail@plt+0x1128>
   12820:	bl	117a4 <__xstat64@plt>
   12824:	adds	r0, r0, #0
   12828:	movne	r0, #1
   1282c:	cmp	r0, #0
   12830:	beq	12890 <__assert_fail@plt+0x1080>
   12834:	bl	11678 <__errno_location@plt>
   12838:	cmp	r9, #0
   1283c:	mov	fp, r0
   12840:	ldr	r3, [r0]
   12844:	beq	12aa0 <__assert_fail@plt+0x1290>
   12848:	cmp	r9, #1
   1284c:	beq	12a7c <__assert_fail@plt+0x126c>
   12850:	str	sl, [sp, #48]	; 0x30
   12854:	ldrb	r3, [r5]
   12858:	cmp	r3, #0
   1285c:	cmpne	r9, #2
   12860:	bne	12c58 <__assert_fail@plt+0x1448>
   12864:	ldrb	r2, [r5]
   12868:	mov	r3, r5
   1286c:	b	1270c <__assert_fail@plt+0xefc>
   12870:	mov	r0, #4096	; 0x1000
   12874:	bl	17094 <__assert_fail@plt+0x5884>
   12878:	ldr	r3, [sp, #8]
   1287c:	mov	r6, r0
   12880:	mov	r8, r0
   12884:	add	r7, r0, #4096	; 0x1000
   12888:	strb	r5, [r6], #1
   1288c:	b	126ec <__assert_fail@plt+0xedc>
   12890:	ldr	r3, [sp, #48]	; 0x30
   12894:	and	r3, r3, #61440	; 0xf000
   12898:	cmp	r3, #40960	; 0xa000
   1289c:	beq	12948 <__assert_fail@plt+0x1138>
   128a0:	cmp	r3, #16384	; 0x4000
   128a4:	beq	12864 <__assert_fail@plt+0x1054>
   128a8:	b	12854 <__assert_fail@plt+0x1044>
   128ac:	cmp	r1, #46	; 0x2e
   128b0:	bne	12774 <__assert_fail@plt+0xf64>
   128b4:	mov	r3, r5
   128b8:	b	1270c <__assert_fail@plt+0xefc>
   128bc:	add	r3, r8, #1
   128c0:	cmp	r6, r3
   128c4:	bls	128d4 <__assert_fail@plt+0x10c4>
   128c8:	ldrb	r3, [r6, #-1]
   128cc:	cmp	r3, #47	; 0x2f
   128d0:	beq	12c08 <__assert_fail@plt+0x13f8>
   128d4:	add	r3, r6, #1
   128d8:	cmp	r7, r3
   128dc:	mov	r3, #0
   128e0:	strb	r3, [r6]
   128e4:	beq	128fc <__assert_fail@plt+0x10ec>
   128e8:	sub	r1, r6, r8
   128ec:	mov	r0, r8
   128f0:	add	r1, r1, #1
   128f4:	bl	170f0 <__assert_fail@plt+0x58e0>
   128f8:	mov	r8, r0
   128fc:	ldr	r0, [sp, #24]
   12900:	bl	114a4 <free@plt>
   12904:	ldr	r3, [sp, #16]
   12908:	cmp	r3, #0
   1290c:	beq	12918 <__assert_fail@plt+0x1108>
   12910:	mov	r0, r3
   12914:	bl	13af8 <__assert_fail@plt+0x22e8>
   12918:	ldr	r3, [pc, #852]	; 12c74 <__assert_fail@plt+0x1464>
   1291c:	ldr	r2, [sp, #140]	; 0x8c
   12920:	mov	r0, r8
   12924:	ldr	r3, [r3]
   12928:	cmp	r2, r3
   1292c:	bne	12c70 <__assert_fail@plt+0x1460>
   12930:	add	sp, sp, #148	; 0x94
   12934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12938:	bl	117d4 <__lxstat64@plt>
   1293c:	adds	r0, r0, #0
   12940:	movne	r0, #1
   12944:	b	1282c <__assert_fail@plt+0x101c>
   12948:	ldr	r3, [sp, #16]
   1294c:	cmp	r3, #0
   12950:	beq	12b08 <__assert_fail@plt+0x12f8>
   12954:	mov	r2, fp
   12958:	ldrd	r0, [sp, #16]
   1295c:	bl	12f60 <__assert_fail@plt+0x1750>
   12960:	cmp	r0, #0
   12964:	bne	12a14 <__assert_fail@plt+0x1204>
   12968:	mov	r2, fp
   1296c:	ldrd	r0, [sp, #16]
   12970:	bl	12ef8 <__assert_fail@plt+0x16e8>
   12974:	ldr	r1, [sp, #80]	; 0x50
   12978:	mov	r0, r8
   1297c:	bl	197e8 <fts_children@@Base+0x284>
   12980:	subs	fp, r0, #0
   12984:	beq	12bc0 <__assert_fail@plt+0x13b0>
   12988:	bl	11654 <strlen@plt>
   1298c:	mov	r4, r0
   12990:	mov	r0, r5
   12994:	bl	11654 <strlen@plt>
   12998:	ldr	r3, [sp, #28]
   1299c:	cmp	r3, #0
   129a0:	add	r3, r4, r0
   129a4:	mov	r2, r0
   129a8:	add	r3, r3, #1
   129ac:	beq	12b34 <__assert_fail@plt+0x1324>
   129b0:	ldr	r1, [sp, #28]
   129b4:	cmp	r3, r1
   129b8:	bhi	12be0 <__assert_fail@plt+0x13d0>
   129bc:	mov	r1, r5
   129c0:	ldr	r5, [sp, #24]
   129c4:	add	r2, r2, #1
   129c8:	add	r0, r5, r4
   129cc:	bl	11498 <memmove@plt>
   129d0:	mov	r2, r4
   129d4:	mov	r1, fp
   129d8:	mov	r0, r5
   129dc:	bl	114bc <memcpy@plt>
   129e0:	ldrb	r3, [fp]
   129e4:	add	r2, r8, #1
   129e8:	cmp	r3, #47	; 0x2f
   129ec:	strbeq	r3, [r8]
   129f0:	moveq	r6, r2
   129f4:	str	r0, [sp, #20]
   129f8:	beq	12a04 <__assert_fail@plt+0x11f4>
   129fc:	cmp	r6, r2
   12a00:	bhi	12c14 <__assert_fail@plt+0x1404>
   12a04:	mov	r0, fp
   12a08:	bl	114a4 <free@plt>
   12a0c:	ldr	r5, [sp, #20]
   12a10:	b	12864 <__assert_fail@plt+0x1054>
   12a14:	cmp	r9, #2
   12a18:	bne	12ac8 <__assert_fail@plt+0x12b8>
   12a1c:	ldrb	r2, [r4, #1]
   12a20:	mov	r3, r5
   12a24:	b	1270c <__assert_fail@plt+0xefc>
   12a28:	ldrb	r1, [r3, #1]
   12a2c:	cmp	r1, #46	; 0x2e
   12a30:	bne	12774 <__assert_fail@plt+0xf64>
   12a34:	add	r3, r8, #1
   12a38:	cmp	r6, r3
   12a3c:	bls	128b4 <__assert_fail@plt+0x10a4>
   12a40:	sub	r1, r6, #1
   12a44:	cmp	r8, r1
   12a48:	bcs	12c4c <__assert_fail@plt+0x143c>
   12a4c:	ldrb	r3, [r6, #-2]
   12a50:	cmp	r3, #47	; 0x2f
   12a54:	beq	12c4c <__assert_fail@plt+0x143c>
   12a58:	sub	r3, r6, #2
   12a5c:	cmp	r3, r8
   12a60:	mov	r6, r3
   12a64:	beq	128b4 <__assert_fail@plt+0x10a4>
   12a68:	ldrb	r1, [r3, #-1]
   12a6c:	sub	r3, r3, #1
   12a70:	cmp	r1, #47	; 0x2f
   12a74:	beq	128b4 <__assert_fail@plt+0x10a4>
   12a78:	b	12a5c <__assert_fail@plt+0x124c>
   12a7c:	ldr	r1, [pc, #504]	; 12c7c <__assert_fail@plt+0x146c>
   12a80:	mov	r0, r5
   12a84:	str	r3, [sp, #12]
   12a88:	bl	11804 <strspn@plt>
   12a8c:	ldr	r3, [sp, #12]
   12a90:	ldrb	r2, [r5, r0]
   12a94:	cmp	r3, #2
   12a98:	cmpeq	r2, #0
   12a9c:	beq	12a1c <__assert_fail@plt+0x120c>
   12aa0:	ldr	r0, [sp, #24]
   12aa4:	str	r3, [sp, #8]
   12aa8:	bl	114a4 <free@plt>
   12aac:	mov	r0, r8
   12ab0:	bl	114a4 <free@plt>
   12ab4:	ldr	r3, [sp, #16]
   12ab8:	cmp	r3, #0
   12abc:	ldr	r3, [sp, #8]
   12ac0:	beq	12afc <__assert_fail@plt+0x12ec>
   12ac4:	b	12aec <__assert_fail@plt+0x12dc>
   12ac8:	bl	11678 <__errno_location@plt>
   12acc:	mov	r3, #40	; 0x28
   12ad0:	mov	fp, r0
   12ad4:	ldr	r0, [sp, #24]
   12ad8:	str	r3, [sp, #8]
   12adc:	bl	114a4 <free@plt>
   12ae0:	mov	r0, r8
   12ae4:	bl	114a4 <free@plt>
   12ae8:	ldr	r3, [sp, #8]
   12aec:	ldr	r0, [sp, #16]
   12af0:	str	r3, [sp, #8]
   12af4:	bl	13af8 <__assert_fail@plt+0x22e8>
   12af8:	ldr	r3, [sp, #8]
   12afc:	str	r3, [fp]
   12b00:	mov	r8, #0
   12b04:	b	12918 <__assert_fail@plt+0x1108>
   12b08:	ldr	r3, [pc, #368]	; 12c80 <__assert_fail@plt+0x1470>
   12b0c:	ldr	r1, [sp, #16]
   12b10:	str	r3, [sp]
   12b14:	ldr	r2, [pc, #360]	; 12c84 <__assert_fail@plt+0x1474>
   12b18:	ldr	r3, [pc, #360]	; 12c88 <__assert_fail@plt+0x1478>
   12b1c:	mov	r0, #7
   12b20:	bl	138f8 <__assert_fail@plt+0x20e8>
   12b24:	subs	r3, r0, #0
   12b28:	str	r3, [sp, #16]
   12b2c:	bne	12954 <__assert_fail@plt+0x1144>
   12b30:	bl	172dc <__assert_fail@plt+0x5acc>
   12b34:	cmp	r3, #4096	; 0x1000
   12b38:	movcc	r3, #4096	; 0x1000
   12b3c:	str	r0, [sp, #12]
   12b40:	mov	r0, r3
   12b44:	str	r3, [sp, #28]
   12b48:	bl	17094 <__assert_fail@plt+0x5884>
   12b4c:	ldr	r2, [sp, #12]
   12b50:	str	r0, [sp, #24]
   12b54:	b	129bc <__assert_fail@plt+0x11ac>
   12b58:	bl	11678 <__errno_location@plt>
   12b5c:	mov	r3, #22
   12b60:	mov	r8, #0
   12b64:	str	r3, [r0]
   12b68:	b	12918 <__assert_fail@plt+0x1108>
   12b6c:	bl	11678 <__errno_location@plt>
   12b70:	mov	r3, #2
   12b74:	mov	r8, r5
   12b78:	str	r3, [r0]
   12b7c:	b	12918 <__assert_fail@plt+0x1108>
   12b80:	mov	r0, r8
   12b84:	mov	r1, #4096	; 0x1000
   12b88:	str	r3, [sp, #8]
   12b8c:	bl	170f0 <__assert_fail@plt+0x58e0>
   12b90:	ldr	r3, [sp, #8]
   12b94:	mov	r8, r0
   12b98:	add	r6, r0, r6
   12b9c:	add	r7, r0, #4096	; 0x1000
   12ba0:	b	126ec <__assert_fail@plt+0xedc>
   12ba4:	str	r0, [sp, #8]
   12ba8:	bl	11678 <__errno_location@plt>
   12bac:	ldr	r3, [sp, #8]
   12bb0:	mov	r2, #22
   12bb4:	mov	r8, r3
   12bb8:	str	r2, [r0]
   12bbc:	b	12918 <__assert_fail@plt+0x1108>
   12bc0:	bl	11678 <__errno_location@plt>
   12bc4:	cmp	r9, #2
   12bc8:	mov	fp, r0
   12bcc:	ldr	r3, [r0]
   12bd0:	bne	12ad4 <__assert_fail@plt+0x12c4>
   12bd4:	cmp	r3, #12
   12bd8:	bne	12a1c <__assert_fail@plt+0x120c>
   12bdc:	b	12ad4 <__assert_fail@plt+0x12c4>
   12be0:	str	r0, [sp, #20]
   12be4:	mov	r1, r3
   12be8:	ldr	r0, [sp, #24]
   12bec:	str	r3, [sp, #12]
   12bf0:	bl	170f0 <__assert_fail@plt+0x58e0>
   12bf4:	ldr	r3, [sp, #12]
   12bf8:	ldr	r2, [sp, #20]
   12bfc:	str	r3, [sp, #28]
   12c00:	str	r0, [sp, #24]
   12c04:	b	129bc <__assert_fail@plt+0x11ac>
   12c08:	mov	r3, r6
   12c0c:	sub	r6, r6, #1
   12c10:	b	128d8 <__assert_fail@plt+0x10c8>
   12c14:	sub	r3, r6, #1
   12c18:	cmp	r8, r3
   12c1c:	bcs	12c68 <__assert_fail@plt+0x1458>
   12c20:	ldrb	r2, [r6, #-2]
   12c24:	cmp	r2, #47	; 0x2f
   12c28:	beq	12c68 <__assert_fail@plt+0x1458>
   12c2c:	sub	r3, r6, #2
   12c30:	cmp	r3, r8
   12c34:	mov	r6, r3
   12c38:	beq	12a04 <__assert_fail@plt+0x11f4>
   12c3c:	ldrb	r2, [r3, #-1]!
   12c40:	cmp	r2, #47	; 0x2f
   12c44:	beq	12a04 <__assert_fail@plt+0x11f4>
   12c48:	b	12c30 <__assert_fail@plt+0x1420>
   12c4c:	mov	r3, r5
   12c50:	mov	r6, r1
   12c54:	b	1270c <__assert_fail@plt+0xefc>
   12c58:	bl	11678 <__errno_location@plt>
   12c5c:	mov	r3, #20
   12c60:	mov	fp, r0
   12c64:	b	12aa0 <__assert_fail@plt+0x1290>
   12c68:	mov	r6, r3
   12c6c:	b	12a04 <__assert_fail@plt+0x11f4>
   12c70:	bl	114f8 <__stack_chk_fail@plt>
   12c74:	andeq	sl, r2, r0, lsl #30
   12c78:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12c7c:	andeq	sl, r1, r0, asr #18
   12c80:	andeq	r4, r1, r8, lsl #3
   12c84:	andeq	r4, r1, r4, lsr #1
   12c88:	andeq	r4, r1, ip, lsr r1
   12c8c:	ldr	r3, [pc, #4]	; 12c98 <__assert_fail@plt+0x1488>
   12c90:	str	r0, [r3]
   12c94:	bx	lr
   12c98:	ldrdeq	fp, [r2], -r0
   12c9c:	ldr	r3, [pc, #4]	; 12ca8 <__assert_fail@plt+0x1498>
   12ca0:	strb	r0, [r3, #4]
   12ca4:	bx	lr
   12ca8:	ldrdeq	fp, [r2], -r0
   12cac:	ldr	r3, [pc, #180]	; 12d68 <__assert_fail@plt+0x1558>
   12cb0:	push	{r4, r5, r6, lr}
   12cb4:	sub	sp, sp, #8
   12cb8:	ldr	r0, [r3]
   12cbc:	bl	1989c <fts_children@@Base+0x338>
   12cc0:	cmp	r0, #0
   12cc4:	beq	12cec <__assert_fail@plt+0x14dc>
   12cc8:	bl	11678 <__errno_location@plt>
   12ccc:	ldr	r5, [pc, #152]	; 12d6c <__assert_fail@plt+0x155c>
   12cd0:	ldrb	r3, [r5, #4]
   12cd4:	cmp	r3, #0
   12cd8:	mov	r4, r0
   12cdc:	beq	12d08 <__assert_fail@plt+0x14f8>
   12ce0:	ldr	r3, [r0]
   12ce4:	cmp	r3, #32
   12ce8:	bne	12d08 <__assert_fail@plt+0x14f8>
   12cec:	ldr	r3, [pc, #124]	; 12d70 <__assert_fail@plt+0x1560>
   12cf0:	ldr	r0, [r3]
   12cf4:	bl	1989c <fts_children@@Base+0x338>
   12cf8:	cmp	r0, #0
   12cfc:	bne	12d48 <__assert_fail@plt+0x1538>
   12d00:	add	sp, sp, #8
   12d04:	pop	{r4, r5, r6, pc}
   12d08:	mov	r2, #5
   12d0c:	ldr	r1, [pc, #96]	; 12d74 <__assert_fail@plt+0x1564>
   12d10:	mov	r0, #0
   12d14:	bl	114ec <dcgettext@plt>
   12d18:	mov	r6, r0
   12d1c:	ldr	r0, [r5]
   12d20:	cmp	r0, #0
   12d24:	beq	12d54 <__assert_fail@plt+0x1544>
   12d28:	ldr	r4, [r4]
   12d2c:	bl	167b8 <__assert_fail@plt+0x4fa8>
   12d30:	mov	r1, r4
   12d34:	str	r6, [sp]
   12d38:	ldr	r2, [pc, #56]	; 12d78 <__assert_fail@plt+0x1568>
   12d3c:	mov	r3, r0
   12d40:	mov	r0, #0
   12d44:	bl	115b8 <error@plt>
   12d48:	ldr	r3, [pc, #44]	; 12d7c <__assert_fail@plt+0x156c>
   12d4c:	ldr	r0, [r3]
   12d50:	bl	114b0 <_exit@plt>
   12d54:	mov	r3, r6
   12d58:	ldr	r1, [r4]
   12d5c:	ldr	r2, [pc, #28]	; 12d80 <__assert_fail@plt+0x1570>
   12d60:	bl	115b8 <error@plt>
   12d64:	b	12d48 <__assert_fail@plt+0x1538>
   12d68:	andeq	fp, r2, r4, asr #3
   12d6c:	ldrdeq	fp, [r2], -r0
   12d70:	andeq	fp, r2, r0, asr #3
   12d74:	andeq	sl, r1, r4, asr #18
   12d78:	andeq	sl, r1, r0, asr r9
   12d7c:	andeq	fp, r2, ip, ror #2
   12d80:	andeq	sl, r1, r4, asr r9
   12d84:	push	{r4, lr}
   12d88:	bl	12e00 <__assert_fail@plt+0x15f0>
   12d8c:	cmp	r0, #0
   12d90:	popne	{r4, pc}
   12d94:	bl	172dc <__assert_fail@plt+0x5acc>
   12d98:	push	{r4, r5, r6, lr}
   12d9c:	mov	r4, r0
   12da0:	ldrb	ip, [r0]
   12da4:	sub	r5, ip, #47	; 0x2f
   12da8:	bl	12e58 <__assert_fail@plt+0x1648>
   12dac:	clz	r5, r5
   12db0:	lsr	r5, r5, #5
   12db4:	sub	r0, r0, r4
   12db8:	cmp	r0, r5
   12dbc:	popls	{r4, r5, r6, pc}
   12dc0:	add	r3, r4, r0
   12dc4:	ldrb	r3, [r3, #-1]
   12dc8:	cmp	r3, #47	; 0x2f
   12dcc:	popne	{r4, r5, r6, pc}
   12dd0:	sub	r0, r0, #2
   12dd4:	sub	ip, r4, #1
   12dd8:	add	r3, r4, r0
   12ddc:	add	ip, ip, r5
   12de0:	rsb	r2, r4, #1
   12de4:	cmp	r3, ip
   12de8:	add	r0, r2, r3
   12dec:	popeq	{r4, r5, r6, pc}
   12df0:	ldrb	r1, [r3], #-1
   12df4:	cmp	r1, #47	; 0x2f
   12df8:	beq	12de4 <__assert_fail@plt+0x15d4>
   12dfc:	pop	{r4, r5, r6, pc}
   12e00:	push	{r4, r5, r6, lr}
   12e04:	mov	r6, r0
   12e08:	bl	12d98 <__assert_fail@plt+0x1588>
   12e0c:	add	r3, r0, #1
   12e10:	mov	r4, r0
   12e14:	cmp	r0, #0
   12e18:	movne	r0, r3
   12e1c:	addeq	r0, r3, #1
   12e20:	bl	115dc <malloc@plt>
   12e24:	subs	r5, r0, #0
   12e28:	beq	12e50 <__assert_fail@plt+0x1640>
   12e2c:	mov	r2, r4
   12e30:	mov	r1, r6
   12e34:	bl	114bc <memcpy@plt>
   12e38:	cmp	r4, #0
   12e3c:	moveq	r3, #46	; 0x2e
   12e40:	moveq	r4, #1
   12e44:	strbeq	r3, [r5]
   12e48:	mov	r3, #0
   12e4c:	strb	r3, [r5, r4]
   12e50:	mov	r0, r5
   12e54:	pop	{r4, r5, r6, pc}
   12e58:	ldrb	r3, [r0]
   12e5c:	cmp	r3, #47	; 0x2f
   12e60:	bne	12e70 <__assert_fail@plt+0x1660>
   12e64:	ldrb	r3, [r0, #1]!
   12e68:	cmp	r3, #47	; 0x2f
   12e6c:	beq	12e64 <__assert_fail@plt+0x1654>
   12e70:	cmp	r3, #0
   12e74:	bxeq	lr
   12e78:	mov	r2, r0
   12e7c:	mov	r1, #0
   12e80:	cmp	r3, #47	; 0x2f
   12e84:	moveq	r1, #1
   12e88:	beq	12e98 <__assert_fail@plt+0x1688>
   12e8c:	cmp	r1, #0
   12e90:	movne	r0, r2
   12e94:	movne	r1, #0
   12e98:	ldrb	r3, [r2, #1]!
   12e9c:	cmp	r3, #0
   12ea0:	bne	12e80 <__assert_fail@plt+0x1670>
   12ea4:	bx	lr
   12ea8:	push	{r4, lr}
   12eac:	mov	r4, r0
   12eb0:	bl	11654 <strlen@plt>
   12eb4:	cmp	r0, #1
   12eb8:	popls	{r4, pc}
   12ebc:	add	r2, r4, r0
   12ec0:	mov	r3, r0
   12ec4:	ldrb	r2, [r2, #-1]
   12ec8:	cmp	r2, #47	; 0x2f
   12ecc:	subeq	r3, r0, #2
   12ed0:	addeq	r3, r4, r3
   12ed4:	rsbeq	r1, r4, #1
   12ed8:	popne	{r4, pc}
   12edc:	cmp	r3, r4
   12ee0:	add	r0, r1, r3
   12ee4:	popeq	{r4, pc}
   12ee8:	ldrb	r2, [r3], #-1
   12eec:	cmp	r2, #47	; 0x2f
   12ef0:	popne	{r4, pc}
   12ef4:	b	12edc <__assert_fail@plt+0x16cc>
   12ef8:	push	{r4, r5, r6, r7, r8, lr}
   12efc:	subs	r8, r0, #0
   12f00:	popeq	{r4, r5, r6, r7, r8, pc}
   12f04:	mov	r0, #24
   12f08:	mov	r4, r1
   12f0c:	mov	r7, r2
   12f10:	bl	17094 <__assert_fail@plt+0x5884>
   12f14:	mov	r6, r0
   12f18:	mov	r0, r4
   12f1c:	bl	172c0 <__assert_fail@plt+0x5ab0>
   12f20:	ldrd	r4, [r7, #96]	; 0x60
   12f24:	ldrd	r2, [r7]
   12f28:	mov	r1, r6
   12f2c:	strd	r4, [r6, #8]
   12f30:	strd	r2, [r6, #16]
   12f34:	str	r0, [r6]
   12f38:	mov	r0, r8
   12f3c:	bl	13f24 <__assert_fail@plt+0x2714>
   12f40:	cmp	r0, #0
   12f44:	beq	12f5c <__assert_fail@plt+0x174c>
   12f48:	cmp	r6, r0
   12f4c:	popeq	{r4, r5, r6, r7, r8, pc}
   12f50:	mov	r0, r6
   12f54:	pop	{r4, r5, r6, r7, r8, lr}
   12f58:	b	14188 <__assert_fail@plt+0x2978>
   12f5c:	bl	172dc <__assert_fail@plt+0x5acc>
   12f60:	push	{r4, r5, r6, lr}
   12f64:	sub	sp, sp, #32
   12f68:	ldr	r6, [pc, #80]	; 12fc0 <__assert_fail@plt+0x17b0>
   12f6c:	subs	r3, r0, #0
   12f70:	moveq	r0, r3
   12f74:	ldr	ip, [r6]
   12f78:	str	ip, [sp, #28]
   12f7c:	beq	12fa4 <__assert_fail@plt+0x1794>
   12f80:	ldrd	r4, [r2, #96]	; 0x60
   12f84:	ldrd	r2, [r2]
   12f88:	str	r1, [sp]
   12f8c:	mov	r1, sp
   12f90:	strd	r4, [sp, #8]
   12f94:	strd	r2, [sp, #16]
   12f98:	bl	13640 <__assert_fail@plt+0x1e30>
   12f9c:	adds	r0, r0, #0
   12fa0:	movne	r0, #1
   12fa4:	ldr	r2, [sp, #28]
   12fa8:	ldr	r3, [r6]
   12fac:	cmp	r2, r3
   12fb0:	bne	12fbc <__assert_fail@plt+0x17ac>
   12fb4:	add	sp, sp, #32
   12fb8:	pop	{r4, r5, r6, pc}
   12fbc:	bl	114f8 <__stack_chk_fail@plt>
   12fc0:	andeq	sl, r2, r0, lsl #30
   12fc4:	andeq	r0, r0, r0
   12fc8:	cmp	r0, #10
   12fcc:	movcc	r0, #10
   12fd0:	push	{r4, r5, r6, r7, r8, lr}
   12fd4:	orr	r7, r0, #1
   12fd8:	cmn	r7, #1
   12fdc:	beq	13054 <__assert_fail@plt+0x1844>
   12fe0:	ldr	r8, [pc, #116]	; 1305c <__assert_fail@plt+0x184c>
   12fe4:	umull	r2, r3, r8, r7
   12fe8:	cmp	r7, #9
   12fec:	lsr	r3, r3, #1
   12ff0:	add	r3, r3, r3, lsl #1
   12ff4:	sub	r3, r7, r3
   12ff8:	bls	13040 <__assert_fail@plt+0x1830>
   12ffc:	cmp	r3, #0
   13000:	beq	13048 <__assert_fail@plt+0x1838>
   13004:	mov	r6, #16
   13008:	mov	r5, #9
   1300c:	mov	r4, #3
   13010:	b	13020 <__assert_fail@plt+0x1810>
   13014:	cmp	r1, #0
   13018:	add	r6, r6, #8
   1301c:	beq	13048 <__assert_fail@plt+0x1838>
   13020:	add	r4, r4, #2
   13024:	mov	r1, r4
   13028:	mov	r0, r7
   1302c:	bl	1a164 <fts_children@@Base+0xc00>
   13030:	add	r5, r5, r6
   13034:	cmp	r5, r7
   13038:	mov	r3, r1
   1303c:	bcc	13014 <__assert_fail@plt+0x1804>
   13040:	cmp	r3, #0
   13044:	bne	13054 <__assert_fail@plt+0x1844>
   13048:	add	r7, r7, #2
   1304c:	cmn	r7, #1
   13050:	bne	12fe4 <__assert_fail@plt+0x17d4>
   13054:	mov	r0, r7
   13058:	pop	{r4, r5, r6, r7, r8, pc}
   1305c:	bge	feabdb10 <optarg@@GLIBC_2.4+0xfea92948>
   13060:	push	{r4, lr}
   13064:	ror	r0, r0, #3
   13068:	bl	1a164 <fts_children@@Base+0xc00>
   1306c:	mov	r0, r1
   13070:	pop	{r4, pc}
   13074:	sub	r0, r1, r0
   13078:	clz	r0, r0
   1307c:	lsr	r0, r0, #5
   13080:	bx	lr
   13084:	push	{r4, lr}
   13088:	mov	r4, r0
   1308c:	mov	r0, r1
   13090:	ldr	r3, [r4, #24]
   13094:	ldr	r1, [r4, #8]
   13098:	blx	r3
   1309c:	ldr	r3, [r4, #8]
   130a0:	cmp	r3, r0
   130a4:	bls	130b4 <__assert_fail@plt+0x18a4>
   130a8:	ldr	r3, [r4]
   130ac:	add	r0, r3, r0, lsl #3
   130b0:	pop	{r4, pc}
   130b4:	bl	117bc <abort@plt>
   130b8:	push	{r4, r5, r6, r7, r8, lr}
   130bc:	mov	r8, r2
   130c0:	mov	r5, r1
   130c4:	mov	r7, r3
   130c8:	mov	r6, r0
   130cc:	bl	13084 <__assert_fail@plt+0x1874>
   130d0:	str	r0, [r8]
   130d4:	ldr	r1, [r0]
   130d8:	cmp	r1, #0
   130dc:	beq	131c4 <__assert_fail@plt+0x19b4>
   130e0:	cmp	r1, r5
   130e4:	mov	r4, r0
   130e8:	beq	13188 <__assert_fail@plt+0x1978>
   130ec:	ldr	r3, [r6, #28]
   130f0:	mov	r0, r5
   130f4:	blx	r3
   130f8:	cmp	r0, #0
   130fc:	ldrne	r3, [r4]
   13100:	bne	1318c <__assert_fail@plt+0x197c>
   13104:	ldr	r2, [r4, #4]
   13108:	cmp	r2, #0
   1310c:	beq	131c4 <__assert_fail@plt+0x19b4>
   13110:	ldr	r3, [r2]
   13114:	cmp	r5, r3
   13118:	bne	1313c <__assert_fail@plt+0x192c>
   1311c:	b	1315c <__assert_fail@plt+0x194c>
   13120:	ldr	r4, [r4, #4]
   13124:	ldr	r2, [r4, #4]
   13128:	cmp	r2, #0
   1312c:	beq	131c4 <__assert_fail@plt+0x19b4>
   13130:	ldr	r3, [r2]
   13134:	cmp	r3, r5
   13138:	beq	1315c <__assert_fail@plt+0x194c>
   1313c:	mov	r1, r3
   13140:	mov	r0, r5
   13144:	ldr	r3, [r6, #28]
   13148:	blx	r3
   1314c:	cmp	r0, #0
   13150:	beq	13120 <__assert_fail@plt+0x1910>
   13154:	ldr	r2, [r4, #4]
   13158:	ldr	r3, [r2]
   1315c:	cmp	r7, #0
   13160:	beq	131bc <__assert_fail@plt+0x19ac>
   13164:	ldr	r0, [r2, #4]
   13168:	mov	r1, #0
   1316c:	str	r0, [r4, #4]
   13170:	str	r1, [r2]
   13174:	ldr	r1, [r6, #36]	; 0x24
   13178:	mov	r0, r3
   1317c:	str	r1, [r2, #4]
   13180:	str	r2, [r6, #36]	; 0x24
   13184:	pop	{r4, r5, r6, r7, r8, pc}
   13188:	mov	r3, r1
   1318c:	cmp	r7, #0
   13190:	beq	131bc <__assert_fail@plt+0x19ac>
   13194:	ldr	r2, [r4, #4]
   13198:	cmp	r2, #0
   1319c:	movne	ip, #0
   131a0:	ldmne	r2, {r0, r1}
   131a4:	streq	r2, [r4]
   131a8:	stmne	r4, {r0, r1}
   131ac:	strne	ip, [r2]
   131b0:	ldrne	r1, [r6, #36]	; 0x24
   131b4:	strne	r1, [r2, #4]
   131b8:	strne	r2, [r6, #36]	; 0x24
   131bc:	mov	r0, r3
   131c0:	pop	{r4, r5, r6, r7, r8, pc}
   131c4:	mov	r3, #0
   131c8:	mov	r0, r3
   131cc:	pop	{r4, r5, r6, r7, r8, pc}
   131d0:	ldr	r2, [pc, #164]	; 1327c <__assert_fail@plt+0x1a6c>
   131d4:	ldr	r3, [r0]
   131d8:	cmp	r3, r2
   131dc:	beq	13264 <__assert_fail@plt+0x1a54>
   131e0:	vldr	s15, [r3, #8]
   131e4:	vldr	s14, [pc, #128]	; 1326c <__assert_fail@plt+0x1a5c>
   131e8:	vcmpe.f32	s15, s14
   131ec:	vmrs	APSR_nzcv, fpscr
   131f0:	ble	13258 <__assert_fail@plt+0x1a48>
   131f4:	vldr	s13, [pc, #116]	; 13270 <__assert_fail@plt+0x1a60>
   131f8:	vcmpe.f32	s15, s13
   131fc:	vmrs	APSR_nzcv, fpscr
   13200:	bpl	13258 <__assert_fail@plt+0x1a48>
   13204:	vldr	s13, [pc, #104]	; 13274 <__assert_fail@plt+0x1a64>
   13208:	vldr	s12, [r3, #12]
   1320c:	vcmpe.f32	s12, s13
   13210:	vmrs	APSR_nzcv, fpscr
   13214:	ble	13258 <__assert_fail@plt+0x1a48>
   13218:	vldr	s13, [r3]
   1321c:	vcmpe.f32	s13, #0.0
   13220:	vmrs	APSR_nzcv, fpscr
   13224:	blt	13258 <__assert_fail@plt+0x1a48>
   13228:	vadd.f32	s14, s13, s14
   1322c:	vldr	s13, [r3, #4]
   13230:	vcmpe.f32	s14, s13
   13234:	vmrs	APSR_nzcv, fpscr
   13238:	bpl	13258 <__assert_fail@plt+0x1a48>
   1323c:	vldr	s12, [pc, #52]	; 13278 <__assert_fail@plt+0x1a68>
   13240:	vcmpe.f32	s13, s12
   13244:	vmrs	APSR_nzcv, fpscr
   13248:	bhi	13258 <__assert_fail@plt+0x1a48>
   1324c:	vcmpe.f32	s15, s14
   13250:	vmrs	APSR_nzcv, fpscr
   13254:	bgt	13264 <__assert_fail@plt+0x1a54>
   13258:	str	r2, [r0]
   1325c:	mov	r0, #0
   13260:	bx	lr
   13264:	mov	r0, #1
   13268:	bx	lr
   1326c:	stclcc	12, cr12, [ip, #820]	; 0x334
   13270:	svccc	0x00666666
   13274:	svccc	0x008ccccd
   13278:	svccc	0x00800000
   1327c:	andeq	sl, r1, r8, asr r9
   13280:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13284:	ldr	r3, [r1, #4]
   13288:	ldr	r6, [r1]
   1328c:	cmp	r6, r3
   13290:	bcs	13358 <__assert_fail@plt+0x1b48>
   13294:	mov	r8, r2
   13298:	mov	r5, r0
   1329c:	mov	r7, r1
   132a0:	add	r6, r6, #8
   132a4:	mov	r9, #0
   132a8:	b	132b8 <__assert_fail@plt+0x1aa8>
   132ac:	cmp	r3, r6
   132b0:	add	r6, r6, #8
   132b4:	bls	13358 <__assert_fail@plt+0x1b48>
   132b8:	ldr	sl, [r6, #-8]
   132bc:	cmp	sl, #0
   132c0:	beq	132ac <__assert_fail@plt+0x1a9c>
   132c4:	ldr	r4, [r6, #-4]
   132c8:	cmp	r4, #0
   132cc:	bne	132ec <__assert_fail@plt+0x1adc>
   132d0:	b	1333c <__assert_fail@plt+0x1b2c>
   132d4:	ldr	r2, [r0, #4]
   132d8:	cmp	r3, #0
   132dc:	str	r2, [r4, #4]
   132e0:	str	r4, [r0, #4]
   132e4:	mov	r4, r3
   132e8:	beq	13338 <__assert_fail@plt+0x1b28>
   132ec:	ldr	sl, [r4]
   132f0:	mov	r0, r5
   132f4:	mov	r1, sl
   132f8:	bl	13084 <__assert_fail@plt+0x1874>
   132fc:	ldr	r3, [r4, #4]
   13300:	ldr	r2, [r0]
   13304:	cmp	r2, #0
   13308:	bne	132d4 <__assert_fail@plt+0x1ac4>
   1330c:	ldr	r1, [r5, #12]
   13310:	str	sl, [r0]
   13314:	add	r1, r1, #1
   13318:	str	r1, [r5, #12]
   1331c:	str	r2, [r4]
   13320:	ldr	r2, [r5, #36]	; 0x24
   13324:	cmp	r3, #0
   13328:	str	r2, [r4, #4]
   1332c:	str	r4, [r5, #36]	; 0x24
   13330:	mov	r4, r3
   13334:	bne	132ec <__assert_fail@plt+0x1adc>
   13338:	ldr	sl, [r6, #-8]
   1333c:	cmp	r8, #0
   13340:	str	r9, [r6, #-4]
   13344:	beq	13360 <__assert_fail@plt+0x1b50>
   13348:	ldr	r3, [r7, #4]
   1334c:	cmp	r3, r6
   13350:	add	r6, r6, #8
   13354:	bhi	132b8 <__assert_fail@plt+0x1aa8>
   13358:	mov	r0, #1
   1335c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13360:	mov	r1, sl
   13364:	mov	r0, r5
   13368:	bl	13084 <__assert_fail@plt+0x1874>
   1336c:	ldr	r3, [r0]
   13370:	mov	r4, r0
   13374:	cmp	r3, #0
   13378:	beq	133b8 <__assert_fail@plt+0x1ba8>
   1337c:	ldr	r0, [r5, #36]	; 0x24
   13380:	cmp	r0, #0
   13384:	beq	133cc <__assert_fail@plt+0x1bbc>
   13388:	ldr	r3, [r0, #4]
   1338c:	str	r3, [r5, #36]	; 0x24
   13390:	ldr	r3, [r4, #4]
   13394:	str	sl, [r0]
   13398:	str	r3, [r0, #4]
   1339c:	str	r0, [r4, #4]
   133a0:	ldr	r2, [r7, #12]
   133a4:	str	r9, [r6, #-8]
   133a8:	sub	r2, r2, #1
   133ac:	ldr	r3, [r7, #4]
   133b0:	str	r2, [r7, #12]
   133b4:	b	132ac <__assert_fail@plt+0x1a9c>
   133b8:	ldr	r3, [r5, #12]
   133bc:	str	sl, [r0]
   133c0:	add	r3, r3, #1
   133c4:	str	r3, [r5, #12]
   133c8:	b	133a0 <__assert_fail@plt+0x1b90>
   133cc:	mov	r0, #8
   133d0:	bl	115dc <malloc@plt>
   133d4:	cmp	r0, #0
   133d8:	bne	13390 <__assert_fail@plt+0x1b80>
   133dc:	mov	r0, r8
   133e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   133e4:	ldr	r0, [r0, #8]
   133e8:	bx	lr
   133ec:	ldr	r0, [r0, #12]
   133f0:	bx	lr
   133f4:	ldr	r0, [r0, #16]
   133f8:	bx	lr
   133fc:	ldm	r0, {r1, r3}
   13400:	cmp	r1, r3
   13404:	bcs	1346c <__assert_fail@plt+0x1c5c>
   13408:	sub	ip, r3, #1
   1340c:	sub	ip, ip, r1
   13410:	add	r3, r1, #16
   13414:	bic	ip, ip, #7
   13418:	add	ip, ip, r3
   1341c:	add	r1, r1, #8
   13420:	mov	r0, #0
   13424:	b	13434 <__assert_fail@plt+0x1c24>
   13428:	add	r1, r1, #8
   1342c:	cmp	r1, ip
   13430:	bxeq	lr
   13434:	ldr	r3, [r1, #-8]
   13438:	cmp	r3, #0
   1343c:	beq	13428 <__assert_fail@plt+0x1c18>
   13440:	ldr	r3, [r1, #-4]
   13444:	mov	r2, #1
   13448:	cmp	r3, #0
   1344c:	beq	13460 <__assert_fail@plt+0x1c50>
   13450:	ldr	r3, [r3, #4]
   13454:	add	r2, r2, #1
   13458:	cmp	r3, #0
   1345c:	bne	13450 <__assert_fail@plt+0x1c40>
   13460:	cmp	r0, r2
   13464:	movcc	r0, r2
   13468:	b	13428 <__assert_fail@plt+0x1c18>
   1346c:	mov	r0, #0
   13470:	bx	lr
   13474:	ldm	r0, {r1, r3}
   13478:	push	{lr}		; (str lr, [sp, #-4]!)
   1347c:	cmp	r1, r3
   13480:	bcs	13510 <__assert_fail@plt+0x1d00>
   13484:	sub	ip, r3, #1
   13488:	sub	ip, ip, r1
   1348c:	add	r3, r1, #16
   13490:	bic	ip, ip, #7
   13494:	mov	r2, #0
   13498:	add	ip, ip, r3
   1349c:	add	r1, r1, #8
   134a0:	mov	lr, r2
   134a4:	b	134b4 <__assert_fail@plt+0x1ca4>
   134a8:	add	r1, r1, #8
   134ac:	cmp	r1, ip
   134b0:	beq	134f0 <__assert_fail@plt+0x1ce0>
   134b4:	ldr	r3, [r1, #-8]
   134b8:	cmp	r3, #0
   134bc:	beq	134a8 <__assert_fail@plt+0x1c98>
   134c0:	ldr	r3, [r1, #-4]
   134c4:	add	lr, lr, #1
   134c8:	cmp	r3, #0
   134cc:	add	r2, r2, #1
   134d0:	beq	134a8 <__assert_fail@plt+0x1c98>
   134d4:	ldr	r3, [r3, #4]
   134d8:	add	r2, r2, #1
   134dc:	cmp	r3, #0
   134e0:	bne	134d4 <__assert_fail@plt+0x1cc4>
   134e4:	add	r1, r1, #8
   134e8:	cmp	r1, ip
   134ec:	bne	134b4 <__assert_fail@plt+0x1ca4>
   134f0:	ldr	r3, [r0, #12]
   134f4:	cmp	r3, lr
   134f8:	ldreq	r0, [r0, #16]
   134fc:	subeq	r0, r0, r2
   13500:	clzeq	r0, r0
   13504:	lsreq	r0, r0, #5
   13508:	movne	r0, #0
   1350c:	pop	{pc}		; (ldr pc, [sp], #4)
   13510:	mov	r2, #0
   13514:	mov	lr, r2
   13518:	b	134f0 <__assert_fail@plt+0x1ce0>
   1351c:	push	{r4, r5, r6, r7, lr}
   13520:	mov	r4, r1
   13524:	ldr	r2, [r0]
   13528:	ldr	r1, [r0, #4]
   1352c:	sub	sp, sp, #12
   13530:	cmp	r2, r1
   13534:	ldr	r3, [r0, #16]
   13538:	ldrd	r6, [r0, #8]
   1353c:	bcs	13620 <__assert_fail@plt+0x1e10>
   13540:	sub	ip, r1, #1
   13544:	sub	ip, ip, r2
   13548:	bic	ip, ip, #7
   1354c:	add	r1, r2, #16
   13550:	add	ip, ip, r1
   13554:	add	r0, r2, #8
   13558:	mov	r5, #0
   1355c:	b	1356c <__assert_fail@plt+0x1d5c>
   13560:	add	r0, r0, #8
   13564:	cmp	r0, ip
   13568:	beq	135ac <__assert_fail@plt+0x1d9c>
   1356c:	ldr	r2, [r0, #-8]
   13570:	cmp	r2, #0
   13574:	beq	13560 <__assert_fail@plt+0x1d50>
   13578:	ldr	r2, [r0, #-4]
   1357c:	mov	r1, #1
   13580:	cmp	r2, #0
   13584:	beq	13598 <__assert_fail@plt+0x1d88>
   13588:	ldr	r2, [r2, #4]
   1358c:	add	r1, r1, #1
   13590:	cmp	r2, #0
   13594:	bne	13588 <__assert_fail@plt+0x1d78>
   13598:	cmp	r5, r1
   1359c:	add	r0, r0, #8
   135a0:	movcc	r5, r1
   135a4:	cmp	r0, ip
   135a8:	bne	1356c <__assert_fail@plt+0x1d5c>
   135ac:	ldr	r2, [pc, #124]	; 13630 <__assert_fail@plt+0x1e20>
   135b0:	mov	r1, #1
   135b4:	mov	r0, r4
   135b8:	bl	116b4 <__fprintf_chk@plt>
   135bc:	mov	r3, r6
   135c0:	ldr	r2, [pc, #108]	; 13634 <__assert_fail@plt+0x1e24>
   135c4:	mov	r1, #1
   135c8:	mov	r0, r4
   135cc:	bl	116b4 <__fprintf_chk@plt>
   135d0:	vmov	s15, r7
   135d4:	vldr	d5, [pc, #76]	; 13628 <__assert_fail@plt+0x1e18>
   135d8:	mov	r3, r7
   135dc:	ldr	r2, [pc, #84]	; 13638 <__assert_fail@plt+0x1e28>
   135e0:	vcvt.f64.u32	d6, s15
   135e4:	vmov	s15, r6
   135e8:	mov	r1, #1
   135ec:	mov	r0, r4
   135f0:	vcvt.f64.u32	d7, s15
   135f4:	vmul.f64	d6, d6, d5
   135f8:	vdiv.f64	d5, d6, d7
   135fc:	vstr	d5, [sp]
   13600:	bl	116b4 <__fprintf_chk@plt>
   13604:	mov	r3, r5
   13608:	mov	r0, r4
   1360c:	ldr	r2, [pc, #40]	; 1363c <__assert_fail@plt+0x1e2c>
   13610:	mov	r1, #1
   13614:	add	sp, sp, #12
   13618:	pop	{r4, r5, r6, r7, lr}
   1361c:	b	116b4 <__fprintf_chk@plt>
   13620:	mov	r5, #0
   13624:	b	135ac <__assert_fail@plt+0x1d9c>
   13628:	andeq	r0, r0, r0
   1362c:	subsmi	r0, r9, r0
   13630:	andeq	sl, r1, ip, ror #18
   13634:	andeq	sl, r1, r4, lsl #19
   13638:	muleq	r1, ip, r9
   1363c:	andeq	sl, r1, r0, asr #19
   13640:	push	{r4, r5, r6, lr}
   13644:	mov	r6, r0
   13648:	mov	r5, r1
   1364c:	bl	13084 <__assert_fail@plt+0x1874>
   13650:	ldr	r3, [r0]
   13654:	cmp	r3, #0
   13658:	beq	13694 <__assert_fail@plt+0x1e84>
   1365c:	mov	r4, r0
   13660:	b	13668 <__assert_fail@plt+0x1e58>
   13664:	ldr	r3, [r4]
   13668:	cmp	r3, r5
   1366c:	mov	r1, r3
   13670:	mov	r0, r5
   13674:	beq	136a0 <__assert_fail@plt+0x1e90>
   13678:	ldr	r3, [r6, #28]
   1367c:	blx	r3
   13680:	cmp	r0, #0
   13684:	bne	1369c <__assert_fail@plt+0x1e8c>
   13688:	ldr	r4, [r4, #4]
   1368c:	cmp	r4, #0
   13690:	bne	13664 <__assert_fail@plt+0x1e54>
   13694:	mov	r0, #0
   13698:	pop	{r4, r5, r6, pc}
   1369c:	ldr	r5, [r4]
   136a0:	mov	r0, r5
   136a4:	pop	{r4, r5, r6, pc}
   136a8:	ldr	r3, [r0, #16]
   136ac:	cmp	r3, #0
   136b0:	beq	13700 <__assert_fail@plt+0x1ef0>
   136b4:	ldr	r3, [r0]
   136b8:	ldr	r2, [r0, #4]
   136bc:	cmp	r3, r2
   136c0:	bcs	136f8 <__assert_fail@plt+0x1ee8>
   136c4:	ldr	r0, [r3]
   136c8:	cmp	r0, #0
   136cc:	bxne	lr
   136d0:	sub	r2, r2, #1
   136d4:	sub	r2, r2, r3
   136d8:	bic	r2, r2, #7
   136dc:	add	r2, r3, r2
   136e0:	b	136f0 <__assert_fail@plt+0x1ee0>
   136e4:	ldr	r0, [r3, #8]!
   136e8:	cmp	r0, #0
   136ec:	bxne	lr
   136f0:	cmp	r3, r2
   136f4:	bne	136e4 <__assert_fail@plt+0x1ed4>
   136f8:	push	{r4, lr}
   136fc:	bl	117bc <abort@plt>
   13700:	mov	r0, r3
   13704:	bx	lr
   13708:	push	{r4, r5, r6, lr}
   1370c:	mov	r5, r0
   13710:	mov	r4, r1
   13714:	bl	13084 <__assert_fail@plt+0x1874>
   13718:	mov	r2, r0
   1371c:	mov	r3, r0
   13720:	b	1372c <__assert_fail@plt+0x1f1c>
   13724:	cmp	r3, #0
   13728:	beq	13740 <__assert_fail@plt+0x1f30>
   1372c:	ldm	r3, {r1, r3}
   13730:	cmp	r1, r4
   13734:	bne	13724 <__assert_fail@plt+0x1f14>
   13738:	cmp	r3, #0
   1373c:	bne	13768 <__assert_fail@plt+0x1f58>
   13740:	ldr	r3, [r5, #4]
   13744:	b	13754 <__assert_fail@plt+0x1f44>
   13748:	ldr	r0, [r2]
   1374c:	cmp	r0, #0
   13750:	popne	{r4, r5, r6, pc}
   13754:	add	r2, r2, #8
   13758:	cmp	r3, r2
   1375c:	bhi	13748 <__assert_fail@plt+0x1f38>
   13760:	mov	r0, #0
   13764:	pop	{r4, r5, r6, pc}
   13768:	ldr	r0, [r3]
   1376c:	pop	{r4, r5, r6, pc}
   13770:	push	{r4, r5, lr}
   13774:	ldm	r0, {r5, lr}
   13778:	cmp	lr, r5
   1377c:	bls	13800 <__assert_fail@plt+0x1ff0>
   13780:	mov	ip, #0
   13784:	ldr	r3, [r5]
   13788:	cmp	r3, #0
   1378c:	bne	137a8 <__assert_fail@plt+0x1f98>
   13790:	add	r5, r5, #8
   13794:	cmp	lr, r5
   13798:	bhi	13784 <__assert_fail@plt+0x1f74>
   1379c:	mov	r2, ip
   137a0:	mov	r0, r2
   137a4:	pop	{r4, r5, pc}
   137a8:	cmp	r2, ip
   137ac:	bls	1379c <__assert_fail@plt+0x1f8c>
   137b0:	str	r3, [r1, ip, lsl #2]
   137b4:	ldr	r3, [r5, #4]
   137b8:	add	r4, ip, #1
   137bc:	cmp	r3, #0
   137c0:	add	lr, r1, ip, lsl #2
   137c4:	beq	137f4 <__assert_fail@plt+0x1fe4>
   137c8:	mov	ip, r4
   137cc:	cmp	r2, ip
   137d0:	beq	137a0 <__assert_fail@plt+0x1f90>
   137d4:	ldr	r4, [r3]
   137d8:	add	ip, ip, #1
   137dc:	str	r4, [lr, #4]!
   137e0:	ldr	r3, [r3, #4]
   137e4:	cmp	r3, #0
   137e8:	bne	137cc <__assert_fail@plt+0x1fbc>
   137ec:	ldr	lr, [r0, #4]
   137f0:	b	13790 <__assert_fail@plt+0x1f80>
   137f4:	ldr	lr, [r0, #4]
   137f8:	mov	ip, r4
   137fc:	b	13790 <__assert_fail@plt+0x1f80>
   13800:	mov	r2, #0
   13804:	b	137a0 <__assert_fail@plt+0x1f90>
   13808:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1380c:	ldr	r3, [r0, #4]
   13810:	ldr	r8, [r0]
   13814:	cmp	r3, r8
   13818:	bls	13880 <__assert_fail@plt+0x2070>
   1381c:	mov	r7, r2
   13820:	mov	r6, r1
   13824:	mov	r9, r0
   13828:	mov	r5, #0
   1382c:	ldr	r0, [r8]
   13830:	cmp	r0, #0
   13834:	bne	1384c <__assert_fail@plt+0x203c>
   13838:	add	r8, r8, #8
   1383c:	cmp	r3, r8
   13840:	bhi	1382c <__assert_fail@plt+0x201c>
   13844:	mov	r0, r5
   13848:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1384c:	mov	r4, r8
   13850:	b	13858 <__assert_fail@plt+0x2048>
   13854:	ldr	r0, [r4]
   13858:	mov	r1, r7
   1385c:	blx	r6
   13860:	cmp	r0, #0
   13864:	beq	13844 <__assert_fail@plt+0x2034>
   13868:	ldr	r4, [r4, #4]
   1386c:	add	r5, r5, #1
   13870:	cmp	r4, #0
   13874:	bne	13854 <__assert_fail@plt+0x2044>
   13878:	ldr	r3, [r9, #4]
   1387c:	b	13838 <__assert_fail@plt+0x2028>
   13880:	mov	r5, #0
   13884:	b	13844 <__assert_fail@plt+0x2034>
   13888:	push	{r4, r5, r6, lr}
   1388c:	mov	r4, r0
   13890:	ldrb	r0, [r0]
   13894:	cmp	r0, #0
   13898:	beq	138c8 <__assert_fail@plt+0x20b8>
   1389c:	mov	r5, r1
   138a0:	mov	r1, #0
   138a4:	rsb	r1, r1, r1, lsl #5
   138a8:	add	r0, r1, r0
   138ac:	mov	r1, r5
   138b0:	bl	1a164 <fts_children@@Base+0xc00>
   138b4:	ldrb	r0, [r4, #1]!
   138b8:	cmp	r0, #0
   138bc:	bne	138a4 <__assert_fail@plt+0x2094>
   138c0:	mov	r0, r1
   138c4:	pop	{r4, r5, r6, pc}
   138c8:	mov	r1, r0
   138cc:	mov	r0, r1
   138d0:	pop	{r4, r5, r6, pc}
   138d4:	push	{lr}		; (str lr, [sp, #-4]!)
   138d8:	mov	ip, r0
   138dc:	ldr	lr, [pc, #16]	; 138f4 <__assert_fail@plt+0x20e4>
   138e0:	ldm	lr!, {r0, r1, r2, r3}
   138e4:	ldr	lr, [lr]
   138e8:	stmia	ip!, {r0, r1, r2, r3}
   138ec:	str	lr, [ip]
   138f0:	pop	{pc}		; (ldr pc, [sp], #4)
   138f4:	andeq	sl, r1, r8, asr r9
   138f8:	push	{r4, r5, r6, r7, r8, lr}
   138fc:	sub	sp, sp, #8
   13900:	cmp	r2, #0
   13904:	ldr	ip, [pc, #300]	; 13a38 <__assert_fail@plt+0x2228>
   13908:	str	r0, [sp, #4]
   1390c:	ldr	r5, [pc, #296]	; 13a3c <__assert_fail@plt+0x222c>
   13910:	mov	r0, #40	; 0x28
   13914:	movne	r5, r2
   13918:	cmp	r3, #0
   1391c:	movne	r8, r3
   13920:	moveq	r8, ip
   13924:	mov	r6, r1
   13928:	bl	115dc <malloc@plt>
   1392c:	subs	r4, r0, #0
   13930:	beq	139fc <__assert_fail@plt+0x21ec>
   13934:	cmp	r6, #0
   13938:	add	r0, r4, #20
   1393c:	beq	139d8 <__assert_fail@plt+0x21c8>
   13940:	str	r6, [r4, #20]
   13944:	bl	131d0 <__assert_fail@plt+0x19c0>
   13948:	cmp	r0, #0
   1394c:	beq	139f0 <__assert_fail@plt+0x21e0>
   13950:	ldrb	r3, [r6, #16]
   13954:	cmp	r3, #0
   13958:	vldreq	s13, [r6, #8]
   1395c:	beq	13a08 <__assert_fail@plt+0x21f8>
   13960:	ldr	r0, [sp, #4]
   13964:	bl	12fc8 <__assert_fail@plt+0x17b8>
   13968:	lsrs	r3, r0, #30
   1396c:	movne	r7, #1
   13970:	moveq	r7, #0
   13974:	tst	r0, #536870912	; 0x20000000
   13978:	mov	r6, r0
   1397c:	bne	139f0 <__assert_fail@plt+0x21e0>
   13980:	cmp	r7, #0
   13984:	bne	139f0 <__assert_fail@plt+0x21e0>
   13988:	cmp	r0, #0
   1398c:	str	r0, [r4, #8]
   13990:	beq	139f0 <__assert_fail@plt+0x21e0>
   13994:	mov	r1, #8
   13998:	bl	11438 <calloc@plt>
   1399c:	cmp	r0, #0
   139a0:	str	r0, [r4]
   139a4:	beq	139f0 <__assert_fail@plt+0x21e0>
   139a8:	ldr	r3, [sp, #32]
   139ac:	add	r0, r0, r6, lsl #3
   139b0:	str	r0, [r4, #4]
   139b4:	str	r7, [r4, #12]
   139b8:	mov	r0, r4
   139bc:	str	r7, [r4, #16]
   139c0:	str	r5, [r4, #24]
   139c4:	str	r8, [r4, #28]
   139c8:	str	r3, [r4, #32]
   139cc:	str	r7, [r4, #36]	; 0x24
   139d0:	add	sp, sp, #8
   139d4:	pop	{r4, r5, r6, r7, r8, pc}
   139d8:	ldr	r3, [pc, #96]	; 13a40 <__assert_fail@plt+0x2230>
   139dc:	str	r3, [r4, #20]
   139e0:	bl	131d0 <__assert_fail@plt+0x19c0>
   139e4:	cmp	r0, #0
   139e8:	vldrne	s13, [pc, #64]	; 13a30 <__assert_fail@plt+0x2220>
   139ec:	bne	13a08 <__assert_fail@plt+0x21f8>
   139f0:	mov	r0, r4
   139f4:	bl	114a4 <free@plt>
   139f8:	mov	r4, #0
   139fc:	mov	r0, r4
   13a00:	add	sp, sp, #8
   13a04:	pop	{r4, r5, r6, r7, r8, pc}
   13a08:	vldr	s15, [sp, #4]
   13a0c:	vldr	s14, [pc, #32]	; 13a34 <__assert_fail@plt+0x2224>
   13a10:	vcvt.f32.u32	s12, s15
   13a14:	vdiv.f32	s15, s12, s13
   13a18:	vcmpe.f32	s15, s14
   13a1c:	vmrs	APSR_nzcv, fpscr
   13a20:	bge	139f0 <__assert_fail@plt+0x21e0>
   13a24:	vcvt.u32.f32	s15, s15
   13a28:	vstr	s15, [sp, #4]
   13a2c:	b	13960 <__assert_fail@plt+0x2150>
   13a30:	svccc	0x004ccccd
   13a34:	svcmi	0x00800000
   13a38:	andeq	r3, r1, r4, ror r0
   13a3c:	andeq	r3, r1, r0, rrx
   13a40:	andeq	sl, r1, r8, asr r9
   13a44:	push	{r4, r5, r6, r7, r8, lr}
   13a48:	mov	r5, r0
   13a4c:	ldr	r6, [r0]
   13a50:	ldr	r2, [r0, #4]
   13a54:	cmp	r6, r2
   13a58:	addcc	r6, r6, #8
   13a5c:	movcc	r7, #0
   13a60:	bcc	13a74 <__assert_fail@plt+0x2264>
   13a64:	b	13ae8 <__assert_fail@plt+0x22d8>
   13a68:	cmp	r2, r6
   13a6c:	add	r6, r6, #8
   13a70:	bls	13ae8 <__assert_fail@plt+0x22d8>
   13a74:	ldr	r3, [r6, #-8]
   13a78:	cmp	r3, #0
   13a7c:	beq	13a68 <__assert_fail@plt+0x2258>
   13a80:	ldr	r4, [r6, #-4]
   13a84:	ldr	r2, [r5, #32]
   13a88:	cmp	r4, #0
   13a8c:	beq	13ac0 <__assert_fail@plt+0x22b0>
   13a90:	cmp	r2, #0
   13a94:	beq	13aa4 <__assert_fail@plt+0x2294>
   13a98:	ldr	r0, [r4]
   13a9c:	blx	r2
   13aa0:	ldr	r2, [r5, #32]
   13aa4:	ldr	r3, [r4, #4]
   13aa8:	ldr	r1, [r5, #36]	; 0x24
   13aac:	str	r7, [r4]
   13ab0:	str	r1, [r4, #4]
   13ab4:	str	r4, [r5, #36]	; 0x24
   13ab8:	subs	r4, r3, #0
   13abc:	bne	13a90 <__assert_fail@plt+0x2280>
   13ac0:	cmp	r2, #0
   13ac4:	beq	13ad0 <__assert_fail@plt+0x22c0>
   13ac8:	ldr	r0, [r6, #-8]
   13acc:	blx	r2
   13ad0:	str	r7, [r6, #-8]
   13ad4:	str	r7, [r6, #-4]
   13ad8:	ldr	r2, [r5, #4]
   13adc:	cmp	r2, r6
   13ae0:	add	r6, r6, #8
   13ae4:	bhi	13a74 <__assert_fail@plt+0x2264>
   13ae8:	mov	r3, #0
   13aec:	str	r3, [r5, #12]
   13af0:	str	r3, [r5, #16]
   13af4:	pop	{r4, r5, r6, r7, r8, pc}
   13af8:	ldr	r3, [r0, #32]
   13afc:	push	{r4, r5, r6, lr}
   13b00:	cmp	r3, #0
   13b04:	mov	r6, r0
   13b08:	ldr	r5, [r0]
   13b0c:	ldr	r3, [r0, #4]
   13b10:	beq	13b78 <__assert_fail@plt+0x2368>
   13b14:	ldr	r2, [r0, #16]
   13b18:	cmp	r2, #0
   13b1c:	beq	13b78 <__assert_fail@plt+0x2368>
   13b20:	cmp	r5, r3
   13b24:	bcc	13b38 <__assert_fail@plt+0x2328>
   13b28:	b	13bac <__assert_fail@plt+0x239c>
   13b2c:	add	r5, r5, #8
   13b30:	cmp	r3, r5
   13b34:	bls	13b74 <__assert_fail@plt+0x2364>
   13b38:	ldr	r0, [r5]
   13b3c:	cmp	r0, #0
   13b40:	beq	13b2c <__assert_fail@plt+0x231c>
   13b44:	mov	r4, r5
   13b48:	b	13b50 <__assert_fail@plt+0x2340>
   13b4c:	ldr	r0, [r4]
   13b50:	ldr	r3, [r6, #32]
   13b54:	blx	r3
   13b58:	ldr	r4, [r4, #4]
   13b5c:	cmp	r4, #0
   13b60:	bne	13b4c <__assert_fail@plt+0x233c>
   13b64:	ldr	r3, [r6, #4]
   13b68:	add	r5, r5, #8
   13b6c:	cmp	r3, r5
   13b70:	bhi	13b38 <__assert_fail@plt+0x2328>
   13b74:	ldr	r5, [r6]
   13b78:	cmp	r5, r3
   13b7c:	bcs	13bac <__assert_fail@plt+0x239c>
   13b80:	ldr	r0, [r5, #4]
   13b84:	cmp	r0, #0
   13b88:	beq	13ba0 <__assert_fail@plt+0x2390>
   13b8c:	ldr	r4, [r0, #4]
   13b90:	bl	114a4 <free@plt>
   13b94:	subs	r0, r4, #0
   13b98:	bne	13b8c <__assert_fail@plt+0x237c>
   13b9c:	ldr	r3, [r6, #4]
   13ba0:	add	r5, r5, #8
   13ba4:	cmp	r3, r5
   13ba8:	bhi	13b80 <__assert_fail@plt+0x2370>
   13bac:	ldr	r0, [r6, #36]	; 0x24
   13bb0:	cmp	r0, #0
   13bb4:	beq	13bc8 <__assert_fail@plt+0x23b8>
   13bb8:	ldr	r4, [r0, #4]
   13bbc:	bl	114a4 <free@plt>
   13bc0:	subs	r0, r4, #0
   13bc4:	bne	13bb8 <__assert_fail@plt+0x23a8>
   13bc8:	ldr	r0, [r6]
   13bcc:	bl	114a4 <free@plt>
   13bd0:	mov	r0, r6
   13bd4:	pop	{r4, r5, r6, lr}
   13bd8:	b	114a4 <free@plt>
   13bdc:	push	{r4, r5, r6, r7, r8, lr}
   13be0:	sub	sp, sp, #56	; 0x38
   13be4:	ldr	r8, [r0, #20]
   13be8:	ldr	r7, [pc, #392]	; 13d78 <__assert_fail@plt+0x2568>
   13bec:	mov	r6, r0
   13bf0:	ldrb	r3, [r8, #16]
   13bf4:	ldr	r2, [r7]
   13bf8:	str	r1, [sp, #4]
   13bfc:	cmp	r3, #0
   13c00:	str	r2, [sp, #52]	; 0x34
   13c04:	bne	13c30 <__assert_fail@plt+0x2420>
   13c08:	vmov	s15, r1
   13c0c:	vldr	s13, [r8, #8]
   13c10:	vldr	s14, [pc, #348]	; 13d74 <__assert_fail@plt+0x2564>
   13c14:	vcvt.f32.u32	s12, s15
   13c18:	vdiv.f32	s15, s12, s13
   13c1c:	vcmpe.f32	s15, s14
   13c20:	vmrs	APSR_nzcv, fpscr
   13c24:	vcvtlt.u32.f32	s15, s15
   13c28:	vstrlt	s15, [sp, #4]
   13c2c:	bge	13c60 <__assert_fail@plt+0x2450>
   13c30:	ldr	r0, [sp, #4]
   13c34:	bl	12fc8 <__assert_fail@plt+0x17b8>
   13c38:	lsrs	r3, r0, #30
   13c3c:	movne	r4, #1
   13c40:	moveq	r4, #0
   13c44:	tst	r0, #536870912	; 0x20000000
   13c48:	movne	r4, #1
   13c4c:	cmp	r0, #0
   13c50:	moveq	r4, #1
   13c54:	cmp	r4, #0
   13c58:	mov	r5, r0
   13c5c:	beq	13c80 <__assert_fail@plt+0x2470>
   13c60:	mov	r4, #0
   13c64:	ldr	r2, [sp, #52]	; 0x34
   13c68:	ldr	r3, [r7]
   13c6c:	mov	r0, r4
   13c70:	cmp	r2, r3
   13c74:	bne	13d6c <__assert_fail@plt+0x255c>
   13c78:	add	sp, sp, #56	; 0x38
   13c7c:	pop	{r4, r5, r6, r7, r8, pc}
   13c80:	ldr	r3, [r6, #8]
   13c84:	cmp	r3, r0
   13c88:	beq	13d34 <__assert_fail@plt+0x2524>
   13c8c:	mov	r1, #8
   13c90:	bl	11438 <calloc@plt>
   13c94:	cmp	r0, #0
   13c98:	str	r0, [sp, #12]
   13c9c:	beq	13c60 <__assert_fail@plt+0x2450>
   13ca0:	add	r0, r0, r5, lsl #3
   13ca4:	ldr	r1, [r6, #32]
   13ca8:	str	r0, [sp, #16]
   13cac:	ldr	r0, [r6, #28]
   13cb0:	ldr	ip, [r6, #24]
   13cb4:	ldr	r3, [r6, #36]	; 0x24
   13cb8:	mov	r2, r4
   13cbc:	str	r0, [sp, #40]	; 0x28
   13cc0:	str	r1, [sp, #44]	; 0x2c
   13cc4:	add	r0, sp, #12
   13cc8:	mov	r1, r6
   13ccc:	str	r4, [sp, #24]
   13cd0:	str	r4, [sp, #28]
   13cd4:	str	r5, [sp, #20]
   13cd8:	str	r8, [sp, #32]
   13cdc:	str	ip, [sp, #36]	; 0x24
   13ce0:	str	r3, [sp, #48]	; 0x30
   13ce4:	bl	13280 <__assert_fail@plt+0x1a70>
   13ce8:	subs	r4, r0, #0
   13cec:	bne	13d3c <__assert_fail@plt+0x252c>
   13cf0:	ldr	r3, [sp, #48]	; 0x30
   13cf4:	mov	r2, #1
   13cf8:	str	r3, [r6, #36]	; 0x24
   13cfc:	add	r1, sp, #12
   13d00:	mov	r0, r6
   13d04:	bl	13280 <__assert_fail@plt+0x1a70>
   13d08:	cmp	r0, #0
   13d0c:	beq	13d70 <__assert_fail@plt+0x2560>
   13d10:	add	r1, sp, #12
   13d14:	mov	r0, r6
   13d18:	mov	r2, r4
   13d1c:	bl	13280 <__assert_fail@plt+0x1a70>
   13d20:	cmp	r0, #0
   13d24:	beq	13d70 <__assert_fail@plt+0x2560>
   13d28:	ldr	r0, [sp, #12]
   13d2c:	bl	114a4 <free@plt>
   13d30:	b	13c64 <__assert_fail@plt+0x2454>
   13d34:	mov	r4, #1
   13d38:	b	13c64 <__assert_fail@plt+0x2454>
   13d3c:	ldr	r0, [r6]
   13d40:	bl	114a4 <free@plt>
   13d44:	ldrd	r2, [sp, #12]
   13d48:	ldr	r1, [sp, #20]
   13d4c:	str	r2, [r6]
   13d50:	str	r3, [r6, #4]
   13d54:	ldr	r2, [sp, #24]
   13d58:	ldr	r3, [sp, #48]	; 0x30
   13d5c:	str	r1, [r6, #8]
   13d60:	str	r2, [r6, #12]
   13d64:	str	r3, [r6, #36]	; 0x24
   13d68:	b	13c64 <__assert_fail@plt+0x2454>
   13d6c:	bl	114f8 <__stack_chk_fail@plt>
   13d70:	bl	117bc <abort@plt>
   13d74:	svcmi	0x00800000
   13d78:	andeq	sl, r2, r0, lsl #30
   13d7c:	push	{r4, r5, r6, r7, lr}
   13d80:	sub	sp, sp, #12
   13d84:	ldr	r6, [pc, #404]	; 13f20 <__assert_fail@plt+0x2710>
   13d88:	subs	r7, r1, #0
   13d8c:	ldr	r3, [r6]
   13d90:	str	r3, [sp, #4]
   13d94:	beq	13f14 <__assert_fail@plt+0x2704>
   13d98:	mov	r5, r2
   13d9c:	mov	r3, #0
   13da0:	mov	r2, sp
   13da4:	mov	r4, r0
   13da8:	bl	130b8 <__assert_fail@plt+0x18a8>
   13dac:	cmp	r0, #0
   13db0:	beq	13ddc <__assert_fail@plt+0x25cc>
   13db4:	cmp	r5, #0
   13db8:	moveq	r0, r5
   13dbc:	strne	r0, [r5]
   13dc0:	movne	r0, #0
   13dc4:	ldr	r2, [sp, #4]
   13dc8:	ldr	r3, [r6]
   13dcc:	cmp	r2, r3
   13dd0:	bne	13f18 <__assert_fail@plt+0x2708>
   13dd4:	add	sp, sp, #12
   13dd8:	pop	{r4, r5, r6, r7, pc}
   13ddc:	vldr	s15, [r4, #8]
   13de0:	ldr	r3, [r4, #20]
   13de4:	vldr	s14, [r4, #12]
   13de8:	vcvt.f32.u32	s15, s15
   13dec:	vldr	s13, [r3, #8]
   13df0:	vcvt.f32.u32	s14, s14
   13df4:	vmul.f32	s15, s15, s13
   13df8:	vcmpe.f32	s14, s15
   13dfc:	vmrs	APSR_nzcv, fpscr
   13e00:	bgt	13e4c <__assert_fail@plt+0x263c>
   13e04:	ldr	r5, [sp]
   13e08:	ldr	r3, [r5]
   13e0c:	cmp	r3, #0
   13e10:	beq	13ea8 <__assert_fail@plt+0x2698>
   13e14:	ldr	r0, [r4, #36]	; 0x24
   13e18:	cmp	r0, #0
   13e1c:	beq	13ecc <__assert_fail@plt+0x26bc>
   13e20:	ldr	r3, [r0, #4]
   13e24:	str	r3, [r4, #36]	; 0x24
   13e28:	ldr	r3, [r4, #16]
   13e2c:	ldr	r2, [r5, #4]
   13e30:	add	r3, r3, #1
   13e34:	str	r7, [r0]
   13e38:	str	r2, [r0, #4]
   13e3c:	str	r0, [r5, #4]
   13e40:	mov	r0, #1
   13e44:	str	r3, [r4, #16]
   13e48:	b	13dc4 <__assert_fail@plt+0x25b4>
   13e4c:	add	r0, r4, #20
   13e50:	bl	131d0 <__assert_fail@plt+0x19c0>
   13e54:	vldr	s15, [r4, #8]
   13e58:	ldr	r3, [r4, #20]
   13e5c:	vldr	s14, [r4, #12]
   13e60:	vcvt.f32.u32	s15, s15
   13e64:	vldr	s13, [r3, #8]
   13e68:	vcvt.f32.u32	s14, s14
   13e6c:	vmul.f32	s12, s13, s15
   13e70:	vcmpe.f32	s14, s12
   13e74:	vmrs	APSR_nzcv, fpscr
   13e78:	ble	13e04 <__assert_fail@plt+0x25f4>
   13e7c:	vldr	s14, [r3, #12]
   13e80:	ldrb	r3, [r3, #16]
   13e84:	vmul.f32	s15, s15, s14
   13e88:	cmp	r3, #0
   13e8c:	vldr	s14, [pc, #136]	; 13f1c <__assert_fail@plt+0x270c>
   13e90:	vmuleq.f32	s15, s15, s13
   13e94:	vcmpe.f32	s15, s14
   13e98:	vmrs	APSR_nzcv, fpscr
   13e9c:	blt	13ee0 <__assert_fail@plt+0x26d0>
   13ea0:	mvn	r0, #0
   13ea4:	b	13dc4 <__assert_fail@plt+0x25b4>
   13ea8:	ldr	r2, [r4, #16]
   13eac:	ldr	r3, [r4, #12]
   13eb0:	add	r2, r2, #1
   13eb4:	add	r3, r3, #1
   13eb8:	str	r7, [r5]
   13ebc:	mov	r0, #1
   13ec0:	str	r2, [r4, #16]
   13ec4:	str	r3, [r4, #12]
   13ec8:	b	13dc4 <__assert_fail@plt+0x25b4>
   13ecc:	mov	r0, #8
   13ed0:	bl	115dc <malloc@plt>
   13ed4:	cmp	r0, #0
   13ed8:	beq	13ea0 <__assert_fail@plt+0x2690>
   13edc:	b	13e28 <__assert_fail@plt+0x2618>
   13ee0:	vcvt.u32.f32	s15, s15
   13ee4:	mov	r0, r4
   13ee8:	vmov	r1, s15
   13eec:	bl	13bdc <__assert_fail@plt+0x23cc>
   13ef0:	cmp	r0, #0
   13ef4:	beq	13ea0 <__assert_fail@plt+0x2690>
   13ef8:	mov	r2, sp
   13efc:	mov	r3, #0
   13f00:	mov	r1, r7
   13f04:	mov	r0, r4
   13f08:	bl	130b8 <__assert_fail@plt+0x18a8>
   13f0c:	cmp	r0, #0
   13f10:	beq	13e04 <__assert_fail@plt+0x25f4>
   13f14:	bl	117bc <abort@plt>
   13f18:	bl	114f8 <__stack_chk_fail@plt>
   13f1c:	svcmi	0x00800000
   13f20:	andeq	sl, r2, r0, lsl #30
   13f24:	push	{r4, r5, lr}
   13f28:	sub	sp, sp, #12
   13f2c:	ldr	r5, [pc, #68]	; 13f78 <__assert_fail@plt+0x2768>
   13f30:	mov	r2, sp
   13f34:	mov	r4, r1
   13f38:	ldr	r3, [r5]
   13f3c:	str	r3, [sp, #4]
   13f40:	bl	13d7c <__assert_fail@plt+0x256c>
   13f44:	cmn	r0, #1
   13f48:	moveq	r0, #0
   13f4c:	beq	13f5c <__assert_fail@plt+0x274c>
   13f50:	cmp	r0, #0
   13f54:	movne	r0, r4
   13f58:	ldreq	r0, [sp]
   13f5c:	ldr	r2, [sp, #4]
   13f60:	ldr	r3, [r5]
   13f64:	cmp	r2, r3
   13f68:	bne	13f74 <__assert_fail@plt+0x2764>
   13f6c:	add	sp, sp, #12
   13f70:	pop	{r4, r5, pc}
   13f74:	bl	114f8 <__stack_chk_fail@plt>
   13f78:	andeq	sl, r2, r0, lsl #30
   13f7c:	push	{r4, r5, r6, r7, lr}
   13f80:	sub	sp, sp, #12
   13f84:	ldr	r5, [pc, #276]	; 140a0 <__assert_fail@plt+0x2890>
   13f88:	mov	r3, #1
   13f8c:	mov	r2, sp
   13f90:	ldr	ip, [r5]
   13f94:	mov	r4, r0
   13f98:	str	ip, [sp, #4]
   13f9c:	bl	130b8 <__assert_fail@plt+0x18a8>
   13fa0:	subs	r6, r0, #0
   13fa4:	beq	13fc4 <__assert_fail@plt+0x27b4>
   13fa8:	ldr	r2, [sp]
   13fac:	ldr	r3, [r4, #16]
   13fb0:	ldr	r2, [r2]
   13fb4:	sub	r3, r3, #1
   13fb8:	cmp	r2, #0
   13fbc:	str	r3, [r4, #16]
   13fc0:	beq	13fe0 <__assert_fail@plt+0x27d0>
   13fc4:	ldr	r2, [sp, #4]
   13fc8:	ldr	r3, [r5]
   13fcc:	mov	r0, r6
   13fd0:	cmp	r2, r3
   13fd4:	bne	1409c <__assert_fail@plt+0x288c>
   13fd8:	add	sp, sp, #12
   13fdc:	pop	{r4, r5, r6, r7, pc}
   13fe0:	vldr	s15, [r4, #8]
   13fe4:	ldr	r3, [r4, #12]
   13fe8:	ldr	r2, [r4, #20]
   13fec:	sub	r3, r3, #1
   13ff0:	vcvt.f32.u32	s14, s15
   13ff4:	vldr	s13, [r2]
   13ff8:	vmov	s15, r3
   13ffc:	str	r3, [r4, #12]
   14000:	vcvt.f32.u32	s15, s15
   14004:	vmul.f32	s14, s14, s13
   14008:	vcmpe.f32	s15, s14
   1400c:	vmrs	APSR_nzcv, fpscr
   14010:	bpl	13fc4 <__assert_fail@plt+0x27b4>
   14014:	add	r0, r4, #20
   14018:	bl	131d0 <__assert_fail@plt+0x19c0>
   1401c:	vldr	s15, [r4, #8]
   14020:	ldr	r3, [r4, #20]
   14024:	vldr	s13, [r4, #12]
   14028:	vcvt.f32.u32	s15, s15
   1402c:	vldr	s14, [r3]
   14030:	vcvt.f32.u32	s13, s13
   14034:	vmul.f32	s14, s15, s14
   14038:	vcmpe.f32	s13, s14
   1403c:	vmrs	APSR_nzcv, fpscr
   14040:	bpl	13fc4 <__assert_fail@plt+0x27b4>
   14044:	vldr	s14, [r3, #4]
   14048:	ldrb	r2, [r3, #16]
   1404c:	mov	r0, r4
   14050:	vmul.f32	s15, s15, s14
   14054:	cmp	r2, #0
   14058:	vldreq	s14, [r3, #8]
   1405c:	vmuleq.f32	s15, s15, s14
   14060:	vcvt.u32.f32	s15, s15
   14064:	vmov	r1, s15
   14068:	bl	13bdc <__assert_fail@plt+0x23cc>
   1406c:	cmp	r0, #0
   14070:	bne	13fc4 <__assert_fail@plt+0x27b4>
   14074:	ldr	r0, [r4, #36]	; 0x24
   14078:	cmp	r0, #0
   1407c:	beq	14090 <__assert_fail@plt+0x2880>
   14080:	ldr	r7, [r0, #4]
   14084:	bl	114a4 <free@plt>
   14088:	subs	r0, r7, #0
   1408c:	bne	14080 <__assert_fail@plt+0x2870>
   14090:	mov	r3, #0
   14094:	str	r3, [r4, #36]	; 0x24
   14098:	b	13fc4 <__assert_fail@plt+0x27b4>
   1409c:	bl	114f8 <__stack_chk_fail@plt>
   140a0:	andeq	sl, r2, r0, lsl #30
   140a4:	push	{r4, r5, r6, lr}
   140a8:	mov	r4, r0
   140ac:	ldr	r0, [r0]
   140b0:	mov	r5, r1
   140b4:	bl	19ab0 <fts_children@@Base+0x54c>
   140b8:	ldr	ip, [r4, #8]
   140bc:	mov	r2, r5
   140c0:	ldr	r1, [r4, #12]
   140c4:	mov	r3, #0
   140c8:	eor	r0, r0, ip
   140cc:	bl	1a184 <fts_children@@Base+0xc20>
   140d0:	mov	r0, r2
   140d4:	pop	{r4, r5, r6, pc}
   140d8:	push	{r4, lr}
   140dc:	mov	r2, r1
   140e0:	mov	r3, #0
   140e4:	ldrd	r0, [r0, #8]
   140e8:	bl	1a184 <fts_children@@Base+0xc20>
   140ec:	mov	r0, r2
   140f0:	pop	{r4, pc}
   140f4:	ldrd	r2, [r1, #8]
   140f8:	push	{r4, r5}
   140fc:	ldrd	r4, [r0, #8]
   14100:	cmp	r5, r3
   14104:	cmpeq	r4, r2
   14108:	beq	14118 <__assert_fail@plt+0x2908>
   1410c:	mov	r0, #0
   14110:	pop	{r4, r5}
   14114:	bx	lr
   14118:	ldrd	r4, [r0, #16]
   1411c:	ldrd	r2, [r1, #16]
   14120:	cmp	r5, r3
   14124:	cmpeq	r4, r2
   14128:	bne	1410c <__assert_fail@plt+0x28fc>
   1412c:	ldr	r1, [r1]
   14130:	ldr	r0, [r0]
   14134:	pop	{r4, r5}
   14138:	b	16b28 <__assert_fail@plt+0x5318>
   1413c:	ldrd	r2, [r1, #8]
   14140:	push	{r4, r5, r6, lr}
   14144:	ldrd	r4, [r0, #8]
   14148:	cmp	r5, r3
   1414c:	cmpeq	r4, r2
   14150:	beq	1415c <__assert_fail@plt+0x294c>
   14154:	mov	r0, #0
   14158:	pop	{r4, r5, r6, pc}
   1415c:	ldrd	r4, [r0, #16]
   14160:	ldrd	r2, [r1, #16]
   14164:	cmp	r5, r3
   14168:	cmpeq	r4, r2
   1416c:	bne	14154 <__assert_fail@plt+0x2944>
   14170:	ldr	r1, [r1]
   14174:	ldr	r0, [r0]
   14178:	bl	11468 <strcmp@plt>
   1417c:	clz	r0, r0
   14180:	lsr	r0, r0, #5
   14184:	pop	{r4, r5, r6, pc}
   14188:	push	{r4, lr}
   1418c:	mov	r4, r0
   14190:	ldr	r0, [r0]
   14194:	bl	114a4 <free@plt>
   14198:	mov	r0, r4
   1419c:	pop	{r4, lr}
   141a0:	b	114a4 <free@plt>
   141a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a8:	mov	r4, r0
   141ac:	ldrb	r3, [r0]
   141b0:	sub	r2, r3, #48	; 0x30
   141b4:	cmp	r2, #7
   141b8:	bls	14264 <__assert_fail@plt+0x2a54>
   141bc:	cmp	r3, #0
   141c0:	moveq	r0, #16
   141c4:	beq	14210 <__assert_fail@plt+0x2a00>
   141c8:	mov	r2, r4
   141cc:	mov	r0, #1
   141d0:	and	r1, r3, #239	; 0xef
   141d4:	cmp	r3, #43	; 0x2b
   141d8:	cmpne	r1, #45	; 0x2d
   141dc:	ldrb	r3, [r2, #1]!
   141e0:	moveq	r1, #1
   141e4:	movne	r1, #0
   141e8:	cmp	r3, #0
   141ec:	add	r0, r0, r1
   141f0:	bne	141d0 <__assert_fail@plt+0x29c0>
   141f4:	lsrs	r3, r0, #28
   141f8:	movne	r3, #1
   141fc:	moveq	r3, #0
   14200:	lsls	r0, r0, #4
   14204:	bmi	1453c <__assert_fail@plt+0x2d2c>
   14208:	cmp	r3, #0
   1420c:	bne	1453c <__assert_fail@plt+0x2d2c>
   14210:	ldr	r9, [pc, #808]	; 14540 <__assert_fail@plt+0x2d30>
   14214:	ldr	sl, [pc, #808]	; 14544 <__assert_fail@plt+0x2d34>
   14218:	ldr	r6, [pc, #808]	; 14548 <__assert_fail@plt+0x2d38>
   1421c:	bl	17094 <__assert_fail@plt+0x5884>
   14220:	mov	lr, #0
   14224:	mov	r5, #0
   14228:	ldrb	ip, [r4]
   1422c:	mov	r2, r4
   14230:	add	r4, r4, #1
   14234:	cmp	ip, #97	; 0x61
   14238:	beq	144ac <__assert_fail@plt+0x2c9c>
   1423c:	bls	142a0 <__assert_fail@plt+0x2a90>
   14240:	cmp	ip, #111	; 0x6f
   14244:	beq	144c4 <__assert_fail@plt+0x2cb4>
   14248:	cmp	ip, #117	; 0x75
   1424c:	beq	144bc <__assert_fail@plt+0x2cac>
   14250:	cmp	ip, #103	; 0x67
   14254:	beq	144b4 <__assert_fail@plt+0x2ca4>
   14258:	bl	114a4 <free@plt>
   1425c:	mov	r0, #0
   14260:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14264:	ldr	ip, [pc, #732]	; 14548 <__assert_fail@plt+0x2d38>
   14268:	add	r1, r0, #1
   1426c:	mov	r5, #0
   14270:	b	14284 <__assert_fail@plt+0x2a74>
   14274:	ldrb	r3, [r1], #1
   14278:	sub	r0, r3, #48	; 0x30
   1427c:	cmp	r0, #7
   14280:	bhi	144cc <__assert_fail@plt+0x2cbc>
   14284:	add	r5, r3, r5, lsl #3
   14288:	sub	r5, r5, #48	; 0x30
   1428c:	cmp	r5, ip
   14290:	mov	r2, r1
   14294:	bls	14274 <__assert_fail@plt+0x2a64>
   14298:	mov	r0, #0
   1429c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a0:	cmp	ip, #45	; 0x2d
   142a4:	beq	142b8 <__assert_fail@plt+0x2aa8>
   142a8:	cmp	ip, #61	; 0x3d
   142ac:	beq	142b8 <__assert_fail@plt+0x2aa8>
   142b0:	cmp	ip, #43	; 0x2b
   142b4:	bne	14258 <__assert_fail@plt+0x2a48>
   142b8:	add	r7, lr, #1
   142bc:	mov	r8, #3
   142c0:	add	lr, r0, lr, lsl #4
   142c4:	b	14318 <__assert_fail@plt+0x2b08>
   142c8:	cmp	r3, #117	; 0x75
   142cc:	addeq	r3, r2, #2
   142d0:	moveq	r1, #448	; 0x1c0
   142d4:	bne	143b4 <__assert_fail@plt+0x2ba4>
   142d8:	strb	ip, [lr]
   142dc:	ldrb	ip, [r2, #2]
   142e0:	mov	r2, r3
   142e4:	strb	r8, [lr, #1]
   142e8:	str	r5, [lr, #4]
   142ec:	str	r1, [lr, #8]
   142f0:	cmp	r5, #0
   142f4:	andne	r1, r1, r5
   142f8:	and	r3, ip, #239	; 0xef
   142fc:	cmp	ip, #43	; 0x2b
   14300:	cmpne	r3, #45	; 0x2d
   14304:	str	r1, [lr, #12]
   14308:	add	r3, r7, #1
   1430c:	add	lr, lr, #16
   14310:	bne	14518 <__assert_fail@plt+0x2d08>
   14314:	mov	r7, r3
   14318:	ldrb	r3, [r2, #1]
   1431c:	add	r4, r2, #1
   14320:	cmp	r3, #103	; 0x67
   14324:	beq	144a0 <__assert_fail@plt+0x2c90>
   14328:	bls	14340 <__assert_fail@plt+0x2b30>
   1432c:	cmp	r3, #111	; 0x6f
   14330:	bne	142c8 <__assert_fail@plt+0x2ab8>
   14334:	add	r3, r2, #2
   14338:	mov	r1, #7
   1433c:	b	142d8 <__assert_fail@plt+0x2ac8>
   14340:	sub	r1, r3, #48	; 0x30
   14344:	cmp	r1, #7
   14348:	addls	r4, r2, #2
   1434c:	movls	r1, #0
   14350:	bhi	143b4 <__assert_fail@plt+0x2ba4>
   14354:	add	r1, r3, r1, lsl #3
   14358:	sub	r1, r1, #48	; 0x30
   1435c:	cmp	r1, r6
   14360:	mov	r2, r4
   14364:	bhi	14258 <__assert_fail@plt+0x2a48>
   14368:	ldrb	r3, [r4]
   1436c:	add	r4, r4, #1
   14370:	sub	fp, r3, #48	; 0x30
   14374:	cmp	fp, #7
   14378:	bls	14354 <__assert_fail@plt+0x2b44>
   1437c:	cmp	r5, #0
   14380:	bne	14258 <__assert_fail@plt+0x2a48>
   14384:	cmp	r3, #0
   14388:	cmpne	r3, #44	; 0x2c
   1438c:	bne	14258 <__assert_fail@plt+0x2a48>
   14390:	ldr	r5, [pc, #432]	; 14548 <__assert_fail@plt+0x2d38>
   14394:	strb	ip, [lr]
   14398:	mov	ip, #1
   1439c:	strb	ip, [lr, #1]
   143a0:	str	r1, [lr, #8]
   143a4:	str	r6, [lr, #4]
   143a8:	mov	ip, r3
   143ac:	mov	r1, r5
   143b0:	b	142f8 <__assert_fail@plt+0x2ae8>
   143b4:	mov	fp, #1
   143b8:	mov	r1, #0
   143bc:	sub	r2, r3, #88	; 0x58
   143c0:	cmp	r2, #32
   143c4:	ldrls	pc, [pc, r2, lsl #2]
   143c8:	b	14484 <__assert_fail@plt+0x2c74>
   143cc:	andeq	r4, r1, r0, asr r4
   143d0:	andeq	r4, r1, r4, lsl #9
   143d4:	andeq	r4, r1, r4, lsl #9
   143d8:	andeq	r4, r1, r4, lsl #9
   143dc:	andeq	r4, r1, r4, lsl #9
   143e0:	andeq	r4, r1, r4, lsl #9
   143e4:	andeq	r4, r1, r4, lsl #9
   143e8:	andeq	r4, r1, r4, lsl #9
   143ec:	andeq	r4, r1, r4, lsl #9
   143f0:	andeq	r4, r1, r4, lsl #9
   143f4:	andeq	r4, r1, r4, lsl #9
   143f8:	andeq	r4, r1, r4, lsl #9
   143fc:	andeq	r4, r1, r4, lsl #9
   14400:	andeq	r4, r1, r4, lsl #9
   14404:	andeq	r4, r1, r4, lsl #9
   14408:	andeq	r4, r1, r4, lsl #9
   1440c:	andeq	r4, r1, r4, lsl #9
   14410:	andeq	r4, r1, r4, lsl #9
   14414:	andeq	r4, r1, r4, lsl #9
   14418:	andeq	r4, r1, r4, lsl #9
   1441c:	andeq	r4, r1, r4, lsl #9
   14420:	andeq	r4, r1, r4, lsl #9
   14424:	andeq	r4, r1, r4, lsl #9
   14428:	andeq	r4, r1, r4, lsl #9
   1442c:	andeq	r4, r1, r4, lsl #9
   14430:	andeq	r4, r1, r4, lsl #9
   14434:	andeq	r4, r1, ip, ror r4
   14438:	andeq	r4, r1, r4, ror r4
   1443c:	andeq	r4, r1, ip, ror #8
   14440:	andeq	r4, r1, r4, lsl #9
   14444:	andeq	r4, r1, r4, lsl #9
   14448:	andeq	r4, r1, r4, ror #8
   1444c:	andeq	r4, r1, ip, asr r4
   14450:	mov	fp, #2
   14454:	ldrb	r3, [r4, #1]!
   14458:	b	143bc <__assert_fail@plt+0x2bac>
   1445c:	orr	r1, r1, #73	; 0x49
   14460:	b	14454 <__assert_fail@plt+0x2c44>
   14464:	orr	r1, r1, #146	; 0x92
   14468:	b	14454 <__assert_fail@plt+0x2c44>
   1446c:	orr	r1, r1, #512	; 0x200
   14470:	b	14454 <__assert_fail@plt+0x2c44>
   14474:	orr	r1, r1, #3072	; 0xc00
   14478:	b	14454 <__assert_fail@plt+0x2c44>
   1447c:	orr	r1, r1, #292	; 0x124
   14480:	b	14454 <__assert_fail@plt+0x2c44>
   14484:	strb	ip, [lr]
   14488:	mov	r2, r4
   1448c:	mov	ip, r3
   14490:	strb	fp, [lr, #1]
   14494:	str	r5, [lr, #4]
   14498:	str	r1, [lr, #8]
   1449c:	b	142f0 <__assert_fail@plt+0x2ae0>
   144a0:	add	r3, r2, #2
   144a4:	mov	r1, #56	; 0x38
   144a8:	b	142d8 <__assert_fail@plt+0x2ac8>
   144ac:	ldr	r5, [pc, #148]	; 14548 <__assert_fail@plt+0x2d38>
   144b0:	b	14228 <__assert_fail@plt+0x2a18>
   144b4:	orr	r5, r5, sl
   144b8:	b	14228 <__assert_fail@plt+0x2a18>
   144bc:	orr	r5, r5, #2496	; 0x9c0
   144c0:	b	14228 <__assert_fail@plt+0x2a18>
   144c4:	orr	r5, r5, r9
   144c8:	b	14228 <__assert_fail@plt+0x2a18>
   144cc:	cmp	r3, #0
   144d0:	bne	14298 <__assert_fail@plt+0x2a88>
   144d4:	sub	r2, r2, r4
   144d8:	cmp	r2, #4
   144dc:	andle	r4, r5, #3072	; 0xc00
   144e0:	mov	r0, #32
   144e4:	mvnle	r4, r4, lsr #10
   144e8:	ldrgt	r4, [pc, #88]	; 14548 <__assert_fail@plt+0x2d38>
   144ec:	mvnle	r4, r4, lsl #10
   144f0:	bl	17094 <__assert_fail@plt+0x5884>
   144f4:	ldr	r1, [pc, #80]	; 1454c <__assert_fail@plt+0x2d3c>
   144f8:	ldr	r2, [pc, #72]	; 14548 <__assert_fail@plt+0x2d38>
   144fc:	mov	r3, #0
   14500:	str	r5, [r0, #8]
   14504:	str	r4, [r0, #12]
   14508:	strh	r1, [r0]
   1450c:	str	r2, [r0, #4]
   14510:	strb	r3, [r0, #17]
   14514:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14518:	cmp	ip, #44	; 0x2c
   1451c:	addeq	r4, r2, #1
   14520:	moveq	lr, r7
   14524:	beq	14224 <__assert_fail@plt+0x2a14>
   14528:	cmp	ip, #0
   1452c:	bne	14258 <__assert_fail@plt+0x2a48>
   14530:	add	r7, r0, r7, lsl #4
   14534:	strb	ip, [r7, #1]
   14538:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1453c:	bl	172dc <__assert_fail@plt+0x5acc>
   14540:	andeq	r0, r0, r7, lsl #4
   14544:	andeq	r0, r0, r8, lsr r4
   14548:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1454c:	andeq	r0, r0, sp, lsr r1
   14550:	push	{r4, r5, r6, lr}
   14554:	sub	sp, sp, #112	; 0x70
   14558:	ldr	r4, [pc, #100]	; 145c4 <__assert_fail@plt+0x2db4>
   1455c:	mov	r1, r0
   14560:	mov	r2, sp
   14564:	ldr	r3, [r4]
   14568:	mov	r0, #3
   1456c:	str	r3, [sp, #108]	; 0x6c
   14570:	bl	117a4 <__xstat64@plt>
   14574:	subs	r5, r0, #0
   14578:	movne	r0, #0
   1457c:	bne	145a8 <__assert_fail@plt+0x2d98>
   14580:	mov	r0, #32
   14584:	ldr	r6, [sp, #16]
   14588:	bl	17094 <__assert_fail@plt+0x5884>
   1458c:	ldr	r3, [pc, #52]	; 145c8 <__assert_fail@plt+0x2db8>
   14590:	ldr	r2, [pc, #52]	; 145cc <__assert_fail@plt+0x2dbc>
   14594:	str	r6, [r0, #8]
   14598:	strb	r5, [r0, #17]
   1459c:	strh	r2, [r0]
   145a0:	str	r3, [r0, #4]
   145a4:	str	r3, [r0, #12]
   145a8:	ldr	r2, [sp, #108]	; 0x6c
   145ac:	ldr	r3, [r4]
   145b0:	cmp	r2, r3
   145b4:	bne	145c0 <__assert_fail@plt+0x2db0>
   145b8:	add	sp, sp, #112	; 0x70
   145bc:	pop	{r4, r5, r6, pc}
   145c0:	bl	114f8 <__stack_chk_fail@plt>
   145c4:	andeq	sl, r2, r0, lsl #30
   145c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   145cc:	andeq	r0, r0, sp, lsr r1
   145d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   145d4:	ldrb	r4, [r3, #1]
   145d8:	ldr	r8, [pc, #336]	; 14730 <__assert_fail@plt+0x2f20>
   145dc:	ldr	sl, [sp, #32]
   145e0:	cmp	r4, #0
   145e4:	and	r0, r0, r8
   145e8:	beq	14728 <__assert_fail@plt+0x2f18>
   145ec:	add	r3, r3, #16
   145f0:	mvn	r2, r2
   145f4:	mov	r7, #0
   145f8:	mvn	r9, #3072	; 0xc00
   145fc:	b	14678 <__assert_fail@plt+0x2e68>
   14600:	cmp	r4, #2
   14604:	mvn	lr, #0
   14608:	beq	14718 <__assert_fail@plt+0x2f08>
   1460c:	mov	r6, r1
   14610:	cmp	r4, #3
   14614:	bne	1463c <__assert_fail@plt+0x2e2c>
   14618:	and	ip, ip, r0
   1461c:	tst	ip, #292	; 0x124
   14620:	movne	r4, #292	; 0x124
   14624:	moveq	r4, #0
   14628:	tst	ip, #146	; 0x92
   1462c:	orrne	r4, r4, #146	; 0x92
   14630:	tst	ip, #73	; 0x49
   14634:	orrne	r4, r4, #73	; 0x49
   14638:	orr	ip, r4, ip
   1463c:	cmp	r5, #0
   14640:	and	ip, ip, lr
   14644:	ldrb	r4, [r3, #-16]
   14648:	bne	146b4 <__assert_fail@plt+0x2ea4>
   1464c:	cmp	r4, #45	; 0x2d
   14650:	and	ip, ip, r2
   14654:	beq	14700 <__assert_fail@plt+0x2ef0>
   14658:	cmp	r4, #61	; 0x3d
   1465c:	beq	146d4 <__assert_fail@plt+0x2ec4>
   14660:	cmp	r4, #43	; 0x2b
   14664:	beq	1470c <__assert_fail@plt+0x2efc>
   14668:	add	r3, r3, #16
   1466c:	ldrb	r4, [r3, #-15]
   14670:	cmp	r4, #0
   14674:	beq	146f4 <__assert_fail@plt+0x2ee4>
   14678:	cmp	r1, #0
   1467c:	ldr	r5, [r3, #-12]
   14680:	ldr	ip, [r3, #-8]
   14684:	beq	14600 <__assert_fail@plt+0x2df0>
   14688:	ldr	lr, [r3, #-4]
   1468c:	cmp	r4, #2
   14690:	mvn	r6, lr
   14694:	and	r6, r6, #3072	; 0xc00
   14698:	orr	lr, lr, r9
   1469c:	bne	14610 <__assert_fail@plt+0x2e00>
   146a0:	orr	ip, ip, #73	; 0x49
   146a4:	cmp	r5, #0
   146a8:	and	ip, ip, lr
   146ac:	ldrb	r4, [r3, #-16]
   146b0:	beq	1464c <__assert_fail@plt+0x2e3c>
   146b4:	cmp	r4, #45	; 0x2d
   146b8:	and	ip, ip, r5
   146bc:	beq	14700 <__assert_fail@plt+0x2ef0>
   146c0:	cmp	r4, #61	; 0x3d
   146c4:	bne	14660 <__assert_fail@plt+0x2e50>
   146c8:	mvn	r5, r5
   146cc:	orr	r6, r6, r5
   146d0:	mvn	lr, r6
   146d4:	add	r3, r3, #16
   146d8:	ldrb	r4, [r3, #-15]
   146dc:	and	lr, lr, r8
   146e0:	and	r0, r0, r6
   146e4:	cmp	r4, #0
   146e8:	orr	r7, r7, lr
   146ec:	orr	r0, r0, ip
   146f0:	bne	14678 <__assert_fail@plt+0x2e68>
   146f4:	cmp	sl, #0
   146f8:	strne	r7, [sl]
   146fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14700:	orr	r7, r7, ip
   14704:	bic	r0, r0, ip
   14708:	b	14668 <__assert_fail@plt+0x2e58>
   1470c:	orr	r7, r7, ip
   14710:	orr	r0, r0, ip
   14714:	b	14668 <__assert_fail@plt+0x2e58>
   14718:	ands	r6, r0, #73	; 0x49
   1471c:	beq	1463c <__assert_fail@plt+0x2e2c>
   14720:	mov	r6, r1
   14724:	b	146a0 <__assert_fail@plt+0x2e90>
   14728:	mov	r7, r4
   1472c:	b	146f4 <__assert_fail@plt+0x2ee4>
   14730:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14734:	push	{r4, r5, r6, lr}
   14738:	subs	r4, r0, #0
   1473c:	beq	147b0 <__assert_fail@plt+0x2fa0>
   14740:	mov	r1, #47	; 0x2f
   14744:	bl	116fc <strrchr@plt>
   14748:	subs	r5, r0, #0
   1474c:	beq	1479c <__assert_fail@plt+0x2f8c>
   14750:	add	r6, r5, #1
   14754:	sub	r3, r6, r4
   14758:	cmp	r3, #6
   1475c:	ble	1479c <__assert_fail@plt+0x2f8c>
   14760:	mov	r2, #7
   14764:	ldr	r1, [pc, #96]	; 147cc <__assert_fail@plt+0x2fbc>
   14768:	sub	r0, r5, #6
   1476c:	bl	117b0 <strncmp@plt>
   14770:	cmp	r0, #0
   14774:	bne	1479c <__assert_fail@plt+0x2f8c>
   14778:	mov	r2, #3
   1477c:	ldr	r1, [pc, #76]	; 147d0 <__assert_fail@plt+0x2fc0>
   14780:	mov	r0, r6
   14784:	bl	117b0 <strncmp@plt>
   14788:	cmp	r0, #0
   1478c:	movne	r4, r6
   14790:	ldreq	r3, [pc, #60]	; 147d4 <__assert_fail@plt+0x2fc4>
   14794:	addeq	r4, r5, #4
   14798:	streq	r4, [r3]
   1479c:	ldr	r2, [pc, #52]	; 147d8 <__assert_fail@plt+0x2fc8>
   147a0:	ldr	r3, [pc, #52]	; 147dc <__assert_fail@plt+0x2fcc>
   147a4:	str	r4, [r2]
   147a8:	str	r4, [r3]
   147ac:	pop	{r4, r5, r6, pc}
   147b0:	ldr	r3, [pc, #40]	; 147e0 <__assert_fail@plt+0x2fd0>
   147b4:	mov	r2, #55	; 0x37
   147b8:	mov	r1, #1
   147bc:	ldr	r3, [r3]
   147c0:	ldr	r0, [pc, #28]	; 147e4 <__assert_fail@plt+0x2fd4>
   147c4:	bl	11564 <fwrite@plt>
   147c8:	bl	117bc <abort@plt>
   147cc:	andeq	sl, r1, r0, lsl sl
   147d0:	andeq	sl, r1, r8, lsl sl
   147d4:			; <UNDEFINED> instruction: 0x0002b1b0
   147d8:	ldrdeq	fp, [r2], -r8
   147dc:			; <UNDEFINED> instruction: 0x0002b1b4
   147e0:	andeq	fp, r2, r0, asr #3
   147e4:	ldrdeq	sl, [r1], -r8
   147e8:	push	{r4, lr}
   147ec:	mov	r2, #48	; 0x30
   147f0:	mov	r4, r1
   147f4:	mov	r1, #0
   147f8:	bl	11690 <memset@plt>
   147fc:	cmp	r4, #10
   14800:	beq	1480c <__assert_fail@plt+0x2ffc>
   14804:	str	r4, [r0]
   14808:	pop	{r4, pc}
   1480c:	bl	117bc <abort@plt>
   14810:	push	{r4, r5, r6, lr}
   14814:	mov	r2, #5
   14818:	mov	r5, r0
   1481c:	mov	r6, r1
   14820:	mov	r1, r0
   14824:	mov	r0, #0
   14828:	bl	114ec <dcgettext@plt>
   1482c:	cmp	r5, r0
   14830:	mov	r4, r0
   14834:	beq	14840 <__assert_fail@plt+0x3030>
   14838:	mov	r0, r4
   1483c:	pop	{r4, r5, r6, pc}
   14840:	bl	19bac <fts_children@@Base+0x648>
   14844:	ldrb	r3, [r0]
   14848:	bic	r3, r3, #32
   1484c:	cmp	r3, #85	; 0x55
   14850:	bne	148b0 <__assert_fail@plt+0x30a0>
   14854:	ldrb	r3, [r0, #1]
   14858:	bic	r3, r3, #32
   1485c:	cmp	r3, #84	; 0x54
   14860:	bne	14928 <__assert_fail@plt+0x3118>
   14864:	ldrb	r3, [r0, #2]
   14868:	bic	r3, r3, #32
   1486c:	cmp	r3, #70	; 0x46
   14870:	bne	14928 <__assert_fail@plt+0x3118>
   14874:	ldrb	r3, [r0, #3]
   14878:	cmp	r3, #45	; 0x2d
   1487c:	bne	14928 <__assert_fail@plt+0x3118>
   14880:	ldrb	r3, [r0, #4]
   14884:	cmp	r3, #56	; 0x38
   14888:	bne	14928 <__assert_fail@plt+0x3118>
   1488c:	ldrb	r3, [r0, #5]
   14890:	cmp	r3, #0
   14894:	bne	14928 <__assert_fail@plt+0x3118>
   14898:	ldrb	r2, [r4]
   1489c:	ldr	r3, [pc, #156]	; 14940 <__assert_fail@plt+0x3130>
   148a0:	ldr	r4, [pc, #156]	; 14944 <__assert_fail@plt+0x3134>
   148a4:	cmp	r2, #96	; 0x60
   148a8:	movne	r4, r3
   148ac:	b	14838 <__assert_fail@plt+0x3028>
   148b0:	cmp	r3, #71	; 0x47
   148b4:	bne	14928 <__assert_fail@plt+0x3118>
   148b8:	ldrb	r3, [r0, #1]
   148bc:	bic	r3, r3, #32
   148c0:	cmp	r3, #66	; 0x42
   148c4:	bne	14928 <__assert_fail@plt+0x3118>
   148c8:	ldrb	r3, [r0, #2]
   148cc:	cmp	r3, #49	; 0x31
   148d0:	bne	14928 <__assert_fail@plt+0x3118>
   148d4:	ldrb	r3, [r0, #3]
   148d8:	cmp	r3, #56	; 0x38
   148dc:	bne	14928 <__assert_fail@plt+0x3118>
   148e0:	ldrb	r3, [r0, #4]
   148e4:	cmp	r3, #48	; 0x30
   148e8:	bne	14928 <__assert_fail@plt+0x3118>
   148ec:	ldrb	r3, [r0, #5]
   148f0:	cmp	r3, #51	; 0x33
   148f4:	bne	14928 <__assert_fail@plt+0x3118>
   148f8:	ldrb	r3, [r0, #6]
   148fc:	cmp	r3, #48	; 0x30
   14900:	bne	14928 <__assert_fail@plt+0x3118>
   14904:	ldrb	r3, [r0, #7]
   14908:	cmp	r3, #0
   1490c:	bne	14928 <__assert_fail@plt+0x3118>
   14910:	ldrb	r2, [r4]
   14914:	ldr	r3, [pc, #44]	; 14948 <__assert_fail@plt+0x3138>
   14918:	ldr	r4, [pc, #44]	; 1494c <__assert_fail@plt+0x313c>
   1491c:	cmp	r2, #96	; 0x60
   14920:	movne	r4, r3
   14924:	b	14838 <__assert_fail@plt+0x3028>
   14928:	ldr	r3, [pc, #32]	; 14950 <__assert_fail@plt+0x3140>
   1492c:	ldr	r4, [pc, #32]	; 14954 <__assert_fail@plt+0x3144>
   14930:	cmp	r6, #9
   14934:	movne	r4, r3
   14938:	mov	r0, r4
   1493c:	pop	{r4, r5, r6, pc}
   14940:	andeq	sl, r1, r4, ror sl
   14944:	andeq	sl, r1, r0, lsl #21
   14948:	andeq	sl, r1, r8, ror sl
   1494c:	andeq	sl, r1, ip, ror sl
   14950:	andeq	sl, r1, r4, lsl #21
   14954:	andeq	sl, r1, r0, ror sl
   14958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1495c:	sub	sp, sp, #124	; 0x7c
   14960:	ldr	ip, [pc, #3576]	; 15760 <__assert_fail@plt+0x3f50>
   14964:	str	r3, [sp, #24]
   14968:	ldr	r3, [sp, #168]	; 0xa8
   1496c:	ldr	ip, [ip]
   14970:	str	r3, [sp, #56]	; 0x38
   14974:	ldr	r3, [sp, #172]	; 0xac
   14978:	ldr	r8, [sp, #160]	; 0xa0
   1497c:	str	r3, [sp, #80]	; 0x50
   14980:	ldr	r3, [sp, #176]	; 0xb0
   14984:	mov	fp, r0
   14988:	str	r3, [sp, #76]	; 0x4c
   1498c:	mov	sl, r1
   14990:	str	r2, [sp, #36]	; 0x24
   14994:	str	ip, [sp, #116]	; 0x74
   14998:	bl	1157c <__ctype_get_mb_cur_max@plt>
   1499c:	ldr	r3, [sp, #164]	; 0xa4
   149a0:	ands	r4, r3, #2
   149a4:	movne	r3, #1
   149a8:	moveq	r3, #0
   149ac:	str	r3, [sp, #32]
   149b0:	str	r0, [sp, #64]	; 0x40
   149b4:	cmp	r8, #10
   149b8:	ldrls	pc, [pc, r8, lsl #2]
   149bc:	b	1616c <__assert_fail@plt+0x495c>
   149c0:			; <UNDEFINED> instruction: 0x00014db4
   149c4:	andeq	r4, r1, ip, asr #28
   149c8:	andeq	r5, r1, ip, asr #8
   149cc:	andeq	r4, r1, ip, ror #28
   149d0:	andeq	r4, r1, r0, lsr #26
   149d4:	andeq	r4, r1, r8, ror #26
   149d8:	andeq	r4, r1, r4, ror #27
   149dc:	andeq	r4, r1, ip, lsl lr
   149e0:	andeq	r4, r1, ip, ror #19
   149e4:	andeq	r4, r1, ip, ror #19
   149e8:	andeq	r4, r1, ip, ror #19
   149ec:	cmp	r8, #10
   149f0:	beq	14a14 <__assert_fail@plt+0x3204>
   149f4:	mov	r1, r8
   149f8:	ldr	r0, [pc, #3428]	; 15764 <__assert_fail@plt+0x3f54>
   149fc:	bl	14810 <__assert_fail@plt+0x3000>
   14a00:	mov	r1, r8
   14a04:	str	r0, [sp, #80]	; 0x50
   14a08:	ldr	r0, [pc, #3420]	; 1576c <__assert_fail@plt+0x3f5c>
   14a0c:	bl	14810 <__assert_fail@plt+0x3000>
   14a10:	str	r0, [sp, #76]	; 0x4c
   14a14:	cmp	r4, #0
   14a18:	movne	r4, #0
   14a1c:	beq	15e2c <__assert_fail@plt+0x461c>
   14a20:	ldr	r7, [sp, #76]	; 0x4c
   14a24:	mov	r5, #0
   14a28:	mov	r6, #1
   14a2c:	mov	r0, r7
   14a30:	str	r6, [sp, #40]	; 0x28
   14a34:	str	r5, [sp, #68]	; 0x44
   14a38:	bl	11654 <strlen@plt>
   14a3c:	str	r6, [sp, #28]
   14a40:	str	r5, [sp, #44]	; 0x2c
   14a44:	str	r5, [sp, #72]	; 0x48
   14a48:	str	r7, [sp, #60]	; 0x3c
   14a4c:	str	r0, [sp, #52]	; 0x34
   14a50:	str	r8, [sp, #160]	; 0xa0
   14a54:	mov	r8, fp
   14a58:	ldr	fp, [sp, #160]	; 0xa0
   14a5c:	mov	r9, #0
   14a60:	ldr	r3, [sp, #24]
   14a64:	cmn	r3, #1
   14a68:	beq	14fd0 <__assert_fail@plt+0x37c0>
   14a6c:	ldr	r3, [sp, #24]
   14a70:	subs	r6, r3, r9
   14a74:	movne	r6, #1
   14a78:	cmp	r6, #0
   14a7c:	beq	14fe8 <__assert_fail@plt+0x37d8>
   14a80:	ldr	r7, [sp, #28]
   14a84:	ldr	r0, [sp, #36]	; 0x24
   14a88:	cmp	fp, #2
   14a8c:	moveq	r7, #0
   14a90:	andne	r7, r7, #1
   14a94:	add	r3, r0, r9
   14a98:	cmp	r7, #0
   14a9c:	str	r3, [sp, #48]	; 0x30
   14aa0:	beq	1548c <__assert_fail@plt+0x3c7c>
   14aa4:	ldr	r2, [sp, #52]	; 0x34
   14aa8:	cmp	r2, #0
   14aac:	beq	15770 <__assert_fail@plt+0x3f60>
   14ab0:	ldr	r1, [sp, #24]
   14ab4:	cmp	r2, #1
   14ab8:	mov	r3, r2
   14abc:	movls	r3, #0
   14ac0:	movhi	r3, #1
   14ac4:	cmn	r1, #1
   14ac8:	movne	r3, #0
   14acc:	cmp	r3, #0
   14ad0:	add	r5, r9, r2
   14ad4:	beq	14ae0 <__assert_fail@plt+0x32d0>
   14ad8:	bl	11654 <strlen@plt>
   14adc:	str	r0, [sp, #24]
   14ae0:	ldr	r3, [sp, #24]
   14ae4:	cmp	r5, r3
   14ae8:	bhi	15770 <__assert_fail@plt+0x3f60>
   14aec:	ldr	r2, [sp, #52]	; 0x34
   14af0:	ldr	r1, [sp, #60]	; 0x3c
   14af4:	ldr	r0, [sp, #48]	; 0x30
   14af8:	bl	114e0 <memcmp@plt>
   14afc:	cmp	r0, #0
   14b00:	bne	15770 <__assert_fail@plt+0x3f60>
   14b04:	ldr	r3, [sp, #32]
   14b08:	cmp	r3, #0
   14b0c:	bne	1602c <__assert_fail@plt+0x481c>
   14b10:	ldr	r3, [sp, #48]	; 0x30
   14b14:	ldrb	r5, [r3]
   14b18:	cmp	r5, #126	; 0x7e
   14b1c:	ldrls	pc, [pc, r5, lsl #2]
   14b20:	b	153f0 <__assert_fail@plt+0x3be0>
   14b24:	ldrdeq	r5, [r1], -ip
   14b28:	strdeq	r5, [r1], -r0
   14b2c:	strdeq	r5, [r1], -r0
   14b30:	strdeq	r5, [r1], -r0
   14b34:	strdeq	r5, [r1], -r0
   14b38:	strdeq	r5, [r1], -r0
   14b3c:	strdeq	r5, [r1], -r0
   14b40:	andeq	r5, r1, r8, lsr #7
   14b44:	muleq	r1, r8, r3
   14b48:	muleq	r1, r8, r2
   14b4c:	andeq	r5, r1, r0, ror #4
   14b50:			; <UNDEFINED> instruction: 0x000152b8
   14b54:	andeq	r5, r1, r0, lsr #5
   14b58:	ldrdeq	r5, [r1], -r0
   14b5c:	strdeq	r5, [r1], -r0
   14b60:	strdeq	r5, [r1], -r0
   14b64:	strdeq	r5, [r1], -r0
   14b68:	strdeq	r5, [r1], -r0
   14b6c:	strdeq	r5, [r1], -r0
   14b70:	strdeq	r5, [r1], -r0
   14b74:	strdeq	r5, [r1], -r0
   14b78:	strdeq	r5, [r1], -r0
   14b7c:	strdeq	r5, [r1], -r0
   14b80:	strdeq	r5, [r1], -r0
   14b84:	strdeq	r5, [r1], -r0
   14b88:	strdeq	r5, [r1], -r0
   14b8c:	strdeq	r5, [r1], -r0
   14b90:	strdeq	r5, [r1], -r0
   14b94:	strdeq	r5, [r1], -r0
   14b98:	strdeq	r5, [r1], -r0
   14b9c:	strdeq	r5, [r1], -r0
   14ba0:	strdeq	r5, [r1], -r0
   14ba4:			; <UNDEFINED> instruction: 0x000153b0
   14ba8:	andeq	r5, r1, r4, asr #5
   14bac:	andeq	r5, r1, r4, asr #5
   14bb0:	andeq	r5, r1, r8, asr #7
   14bb4:	andeq	r5, r1, r4, asr #5
   14bb8:	andeq	r5, r1, r4, ror #7
   14bbc:	andeq	r5, r1, r4, asr #5
   14bc0:	andeq	r5, r1, r4, lsl #2
   14bc4:	andeq	r5, r1, r4, asr #5
   14bc8:	andeq	r5, r1, r4, asr #5
   14bcc:	andeq	r5, r1, r4, asr #5
   14bd0:	andeq	r5, r1, r4, ror #7
   14bd4:	andeq	r5, r1, r4, ror #7
   14bd8:	andeq	r5, r1, r4, ror #7
   14bdc:	andeq	r5, r1, r4, ror #7
   14be0:	andeq	r5, r1, r4, ror #7
   14be4:	andeq	r5, r1, r4, ror #7
   14be8:	andeq	r5, r1, r4, ror #7
   14bec:	andeq	r5, r1, r4, ror #7
   14bf0:	andeq	r5, r1, r4, ror #7
   14bf4:	andeq	r5, r1, r4, ror #7
   14bf8:	andeq	r5, r1, r4, ror #7
   14bfc:	andeq	r5, r1, r4, ror #7
   14c00:	andeq	r5, r1, r4, ror #7
   14c04:	andeq	r5, r1, r4, ror #7
   14c08:	andeq	r5, r1, r4, ror #7
   14c0c:	andeq	r5, r1, r4, ror #7
   14c10:	andeq	r5, r1, r4, asr #5
   14c14:	andeq	r5, r1, r4, asr #5
   14c18:	andeq	r5, r1, r4, asr #5
   14c1c:	andeq	r5, r1, r4, asr #5
   14c20:	ldrdeq	r5, [r1], -r8
   14c24:	strdeq	r5, [r1], -r0
   14c28:	andeq	r5, r1, r4, ror #7
   14c2c:	andeq	r5, r1, r4, ror #7
   14c30:	andeq	r5, r1, r4, ror #7
   14c34:	andeq	r5, r1, r4, ror #7
   14c38:	andeq	r5, r1, r4, ror #7
   14c3c:	andeq	r5, r1, r4, ror #7
   14c40:	andeq	r5, r1, r4, ror #7
   14c44:	andeq	r5, r1, r4, ror #7
   14c48:	andeq	r5, r1, r4, ror #7
   14c4c:	andeq	r5, r1, r4, ror #7
   14c50:	andeq	r5, r1, r4, ror #7
   14c54:	andeq	r5, r1, r4, ror #7
   14c58:	andeq	r5, r1, r4, ror #7
   14c5c:	andeq	r5, r1, r4, ror #7
   14c60:	andeq	r5, r1, r4, ror #7
   14c64:	andeq	r5, r1, r4, ror #7
   14c68:	andeq	r5, r1, r4, ror #7
   14c6c:	andeq	r5, r1, r4, ror #7
   14c70:	andeq	r5, r1, r4, ror #7
   14c74:	andeq	r5, r1, r4, ror #7
   14c78:	andeq	r5, r1, r4, ror #7
   14c7c:	andeq	r5, r1, r4, ror #7
   14c80:	andeq	r5, r1, r4, ror #7
   14c84:	andeq	r5, r1, r4, ror #7
   14c88:	andeq	r5, r1, r4, ror #7
   14c8c:	andeq	r5, r1, r4, ror #7
   14c90:	andeq	r5, r1, r4, asr #5
   14c94:	muleq	r1, r0, r0
   14c98:	andeq	r5, r1, r4, ror #7
   14c9c:	andeq	r5, r1, r4, asr #5
   14ca0:	andeq	r5, r1, r4, ror #7
   14ca4:	andeq	r5, r1, r4, asr #5
   14ca8:	andeq	r5, r1, r4, ror #7
   14cac:	andeq	r5, r1, r4, ror #7
   14cb0:	andeq	r5, r1, r4, ror #7
   14cb4:	andeq	r5, r1, r4, ror #7
   14cb8:	andeq	r5, r1, r4, ror #7
   14cbc:	andeq	r5, r1, r4, ror #7
   14cc0:	andeq	r5, r1, r4, ror #7
   14cc4:	andeq	r5, r1, r4, ror #7
   14cc8:	andeq	r5, r1, r4, ror #7
   14ccc:	andeq	r5, r1, r4, ror #7
   14cd0:	andeq	r5, r1, r4, ror #7
   14cd4:	andeq	r5, r1, r4, ror #7
   14cd8:	andeq	r5, r1, r4, ror #7
   14cdc:	andeq	r5, r1, r4, ror #7
   14ce0:	andeq	r5, r1, r4, ror #7
   14ce4:	andeq	r5, r1, r4, ror #7
   14ce8:	andeq	r5, r1, r4, ror #7
   14cec:	andeq	r5, r1, r4, ror #7
   14cf0:	andeq	r5, r1, r4, ror #7
   14cf4:	andeq	r5, r1, r4, ror #7
   14cf8:	andeq	r5, r1, r4, ror #7
   14cfc:	andeq	r5, r1, r4, ror #7
   14d00:	andeq	r5, r1, r4, ror #7
   14d04:	andeq	r5, r1, r4, ror #7
   14d08:	andeq	r5, r1, r4, ror #7
   14d0c:	andeq	r5, r1, r4, ror #7
   14d10:	andeq	r4, r1, r8, lsr #29
   14d14:	andeq	r5, r1, r4, asr #5
   14d18:	andeq	r4, r1, r8, lsr #29
   14d1c:	andeq	r5, r1, r8, asr #7
   14d20:	cmp	r4, #0
   14d24:	moveq	r3, #1
   14d28:	streq	r3, [sp, #28]
   14d2c:	beq	15458 <__assert_fail@plt+0x3c48>
   14d30:	mov	r3, #0
   14d34:	mov	r4, r3
   14d38:	mov	r2, #1
   14d3c:	str	r2, [sp, #40]	; 0x28
   14d40:	str	r3, [sp, #68]	; 0x44
   14d44:	str	r2, [sp, #32]
   14d48:	str	r2, [sp, #52]	; 0x34
   14d4c:	ldr	r3, [pc, #2584]	; 1576c <__assert_fail@plt+0x3f5c>
   14d50:	str	r4, [sp, #44]	; 0x2c
   14d54:	str	r4, [sp, #72]	; 0x48
   14d58:	str	r4, [sp, #28]
   14d5c:	str	r3, [sp, #60]	; 0x3c
   14d60:	mov	r8, #2
   14d64:	b	14a50 <__assert_fail@plt+0x3240>
   14d68:	cmp	r4, #0
   14d6c:	bne	15ff8 <__assert_fail@plt+0x47e8>
   14d70:	cmp	sl, #0
   14d74:	beq	15db8 <__assert_fail@plt+0x45a8>
   14d78:	mov	r3, #34	; 0x22
   14d7c:	strb	r3, [fp]
   14d80:	ldr	r3, [pc, #2528]	; 15768 <__assert_fail@plt+0x3f58>
   14d84:	mov	r1, r4
   14d88:	mov	r2, #1
   14d8c:	str	r4, [sp, #68]	; 0x44
   14d90:	str	r2, [sp, #40]	; 0x28
   14d94:	mov	r4, r2
   14d98:	str	r1, [sp, #44]	; 0x2c
   14d9c:	str	r1, [sp, #72]	; 0x48
   14da0:	str	r1, [sp, #32]
   14da4:	str	r2, [sp, #28]
   14da8:	str	r2, [sp, #52]	; 0x34
   14dac:	str	r3, [sp, #60]	; 0x3c
   14db0:	b	14a50 <__assert_fail@plt+0x3240>
   14db4:	mov	r3, #0
   14db8:	str	r3, [sp, #68]	; 0x44
   14dbc:	str	r3, [sp, #44]	; 0x2c
   14dc0:	str	r3, [sp, #32]
   14dc4:	str	r3, [sp, #28]
   14dc8:	str	r3, [sp, #60]	; 0x3c
   14dcc:	mov	r3, #1
   14dd0:	str	r8, [sp, #72]	; 0x48
   14dd4:	str	r8, [sp, #52]	; 0x34
   14dd8:	mov	r4, r8
   14ddc:	str	r3, [sp, #40]	; 0x28
   14de0:	b	14a50 <__assert_fail@plt+0x3240>
   14de4:	mov	r3, #1
   14de8:	str	r3, [sp, #40]	; 0x28
   14dec:	str	r3, [sp, #32]
   14df0:	str	r3, [sp, #28]
   14df4:	str	r3, [sp, #52]	; 0x34
   14df8:	ldr	r3, [pc, #2408]	; 15768 <__assert_fail@plt+0x3f58>
   14dfc:	mov	r2, #0
   14e00:	mov	r4, r2
   14e04:	str	r2, [sp, #68]	; 0x44
   14e08:	str	r2, [sp, #44]	; 0x2c
   14e0c:	str	r2, [sp, #72]	; 0x48
   14e10:	str	r3, [sp, #60]	; 0x3c
   14e14:	mov	r8, #5
   14e18:	b	14a50 <__assert_fail@plt+0x3240>
   14e1c:	mov	r3, #0
   14e20:	mov	r2, #1
   14e24:	str	r2, [sp, #40]	; 0x28
   14e28:	mov	r4, r3
   14e2c:	str	r3, [sp, #68]	; 0x44
   14e30:	str	r2, [sp, #28]
   14e34:	str	r3, [sp, #44]	; 0x2c
   14e38:	str	r3, [sp, #72]	; 0x48
   14e3c:	str	r3, [sp, #32]
   14e40:	str	r3, [sp, #52]	; 0x34
   14e44:	str	r3, [sp, #60]	; 0x3c
   14e48:	b	14a50 <__assert_fail@plt+0x3240>
   14e4c:	mov	r2, #1
   14e50:	mov	r3, #0
   14e54:	str	r2, [sp, #40]	; 0x28
   14e58:	mov	r4, r3
   14e5c:	str	r3, [sp, #68]	; 0x44
   14e60:	str	r8, [sp, #52]	; 0x34
   14e64:	str	r2, [sp, #32]
   14e68:	b	14d4c <__assert_fail@plt+0x353c>
   14e6c:	mov	r3, #1
   14e70:	str	r3, [sp, #40]	; 0x28
   14e74:	str	r3, [sp, #32]
   14e78:	str	r3, [sp, #28]
   14e7c:	str	r3, [sp, #52]	; 0x34
   14e80:	ldr	r3, [pc, #2276]	; 1576c <__assert_fail@plt+0x3f5c>
   14e84:	mov	r2, #0
   14e88:	mov	r4, r2
   14e8c:	str	r2, [sp, #68]	; 0x44
   14e90:	str	r2, [sp, #44]	; 0x2c
   14e94:	str	r2, [sp, #72]	; 0x48
   14e98:	str	r3, [sp, #60]	; 0x3c
   14e9c:	mov	r8, #2
   14ea0:	b	14a50 <__assert_fail@plt+0x3240>
   14ea4:	mov	r7, #0
   14ea8:	ldr	r3, [sp, #24]
   14eac:	cmn	r3, #1
   14eb0:	beq	159ec <__assert_fail@plt+0x41dc>
   14eb4:	ldr	r3, [sp, #24]
   14eb8:	subs	r3, r3, #1
   14ebc:	movne	r3, #1
   14ec0:	cmp	r3, #0
   14ec4:	sub	r2, fp, #2
   14ec8:	clz	r2, r2
   14ecc:	lsr	r2, r2, #5
   14ed0:	bne	150cc <__assert_fail@plt+0x38bc>
   14ed4:	cmp	r9, #0
   14ed8:	bne	150cc <__assert_fail@plt+0x38bc>
   14edc:	ldr	r3, [sp, #32]
   14ee0:	tst	r3, r2
   14ee4:	bne	151ec <__assert_fail@plt+0x39dc>
   14ee8:	ldr	r3, [sp, #28]
   14eec:	eor	r3, r3, #1
   14ef0:	orr	r3, r2, r3
   14ef4:	ldr	r2, [sp, #32]
   14ef8:	eor	r3, r3, #1
   14efc:	orrs	r3, r2, r3
   14f00:	beq	14f30 <__assert_fail@plt+0x3720>
   14f04:	mov	r3, #0
   14f08:	ldr	r1, [sp, #56]	; 0x38
   14f0c:	cmp	r1, #0
   14f10:	beq	14f30 <__assert_fail@plt+0x3720>
   14f14:	lsr	r2, r5, #5
   14f18:	and	r0, r5, #31
   14f1c:	uxtb	r2, r2
   14f20:	ldr	r1, [r1, r2, lsl #2]
   14f24:	lsr	r2, r1, r0
   14f28:	tst	r2, #1
   14f2c:	bne	14f38 <__assert_fail@plt+0x3728>
   14f30:	cmp	r7, #0
   14f34:	beq	15188 <__assert_fail@plt+0x3978>
   14f38:	sub	r2, fp, #2
   14f3c:	clz	r2, r2
   14f40:	lsr	r2, r2, #5
   14f44:	ldr	r3, [sp, #32]
   14f48:	cmp	r3, #0
   14f4c:	bne	15278 <__assert_fail@plt+0x3a68>
   14f50:	ldr	r3, [sp, #44]	; 0x2c
   14f54:	eor	r3, r3, #1
   14f58:	ands	r3, r2, r3
   14f5c:	beq	14f94 <__assert_fail@plt+0x3784>
   14f60:	cmp	sl, r4
   14f64:	movhi	r2, #39	; 0x27
   14f68:	strbhi	r2, [r8, r4]
   14f6c:	add	r2, r4, #1
   14f70:	cmp	r2, sl
   14f74:	movcc	r1, #36	; 0x24
   14f78:	strbcc	r1, [r8, r2]
   14f7c:	add	r2, r4, #2
   14f80:	cmp	r2, sl
   14f84:	add	r4, r4, #3
   14f88:	movcc	r1, #39	; 0x27
   14f8c:	strbcc	r1, [r8, r2]
   14f90:	str	r3, [sp, #44]	; 0x2c
   14f94:	cmp	r4, sl
   14f98:	movcc	r3, #92	; 0x5c
   14f9c:	strbcc	r3, [r8, r4]
   14fa0:	add	r9, r9, #1
   14fa4:	add	r4, r4, #1
   14fa8:	cmp	r4, sl
   14fac:	ldr	r3, [sp, #40]	; 0x28
   14fb0:	strbcc	r5, [r8, r4]
   14fb4:	cmp	r6, #0
   14fb8:	moveq	r3, #0
   14fbc:	str	r3, [sp, #40]	; 0x28
   14fc0:	ldr	r3, [sp, #24]
   14fc4:	add	r4, r4, #1
   14fc8:	cmn	r3, #1
   14fcc:	bne	14a6c <__assert_fail@plt+0x325c>
   14fd0:	ldr	r3, [sp, #36]	; 0x24
   14fd4:	ldrb	r6, [r3, r9]
   14fd8:	adds	r6, r6, #0
   14fdc:	movne	r6, #1
   14fe0:	cmp	r6, #0
   14fe4:	bne	14a80 <__assert_fail@plt+0x3270>
   14fe8:	str	fp, [sp, #160]	; 0xa0
   14fec:	mov	fp, r8
   14ff0:	ldr	r8, [sp, #160]	; 0xa0
   14ff4:	ldr	r1, [sp, #32]
   14ff8:	cmp	r4, #0
   14ffc:	sub	r2, r8, #2
   15000:	clz	r2, r2
   15004:	lsr	r2, r2, #5
   15008:	andeq	r3, r2, r1
   1500c:	movne	r3, #0
   15010:	cmp	r3, #0
   15014:	bne	16100 <__assert_fail@plt+0x48f0>
   15018:	eor	r3, r1, #1
   1501c:	ands	r2, r2, r3
   15020:	beq	1603c <__assert_fail@plt+0x482c>
   15024:	ldr	r3, [sp, #68]	; 0x44
   15028:	cmp	r3, #0
   1502c:	beq	16040 <__assert_fail@plt+0x4830>
   15030:	ldr	r3, [sp, #40]	; 0x28
   15034:	cmp	r3, #0
   15038:	bne	160bc <__assert_fail@plt+0x48ac>
   1503c:	ldr	r3, [sp, #72]	; 0x48
   15040:	adds	r3, r3, #0
   15044:	movne	r3, #1
   15048:	cmp	sl, #0
   1504c:	movne	r3, #0
   15050:	cmp	r3, #0
   15054:	ldreq	r2, [sp, #68]	; 0x44
   15058:	beq	16040 <__assert_fail@plt+0x4830>
   1505c:	ldr	sl, [sp, #72]	; 0x48
   15060:	str	r3, [sp, #68]	; 0x44
   15064:	ldr	r3, [pc, #1792]	; 1576c <__assert_fail@plt+0x3f5c>
   15068:	mov	r2, #39	; 0x27
   1506c:	mov	r4, #1
   15070:	str	r3, [sp, #60]	; 0x3c
   15074:	mov	r3, #0
   15078:	strb	r2, [fp]
   1507c:	str	r4, [sp, #52]	; 0x34
   15080:	mov	r8, #2
   15084:	str	r3, [sp, #32]
   15088:	b	14a50 <__assert_fail@plt+0x3240>
   1508c:	mov	r7, #0
   15090:	cmp	fp, #2
   15094:	beq	159cc <__assert_fail@plt+0x41bc>
   15098:	ldr	r3, [sp, #52]	; 0x34
   1509c:	ldr	r2, [sp, #28]
   150a0:	ldr	r1, [sp, #32]
   150a4:	cmp	r3, #0
   150a8:	andne	r2, r2, r1
   150ac:	moveq	r2, #0
   150b0:	cmp	r2, #0
   150b4:	moveq	r5, #92	; 0x5c
   150b8:	moveq	r3, r5
   150bc:	bne	159d8 <__assert_fail@plt+0x41c8>
   150c0:	ldr	r1, [sp, #28]
   150c4:	cmp	r1, #0
   150c8:	bne	16148 <__assert_fail@plt+0x4938>
   150cc:	mov	r6, #0
   150d0:	b	14ee8 <__assert_fail@plt+0x36d8>
   150d4:	mov	r7, #0
   150d8:	cmp	fp, #2
   150dc:	beq	15a3c <__assert_fail@plt+0x422c>
   150e0:	cmp	fp, #5
   150e4:	beq	15a00 <__assert_fail@plt+0x41f0>
   150e8:	sub	r2, fp, #2
   150ec:	mov	r6, #0
   150f0:	clz	r2, r2
   150f4:	mov	r5, #63	; 0x3f
   150f8:	lsr	r2, r2, #5
   150fc:	b	14ee8 <__assert_fail@plt+0x36d8>
   15100:	mov	r7, #0
   15104:	cmp	fp, #2
   15108:	strne	r6, [sp, #68]	; 0x44
   1510c:	movne	r2, #0
   15110:	movne	r5, #39	; 0x27
   15114:	bne	14ee8 <__assert_fail@plt+0x36d8>
   15118:	ldr	r3, [sp, #32]
   1511c:	cmp	r3, #0
   15120:	bne	15e1c <__assert_fail@plt+0x460c>
   15124:	cmp	sl, #0
   15128:	ldr	r3, [sp, #72]	; 0x48
   1512c:	clz	r3, r3
   15130:	lsr	r3, r3, #5
   15134:	moveq	r3, #0
   15138:	cmp	r3, #0
   1513c:	bne	15d50 <__assert_fail@plt+0x4540>
   15140:	cmp	sl, r4
   15144:	movhi	r3, #39	; 0x27
   15148:	strbhi	r3, [r8, r4]
   1514c:	add	r3, r4, #1
   15150:	cmp	sl, r3
   15154:	movhi	r2, #92	; 0x5c
   15158:	strbhi	r2, [r8, r3]
   1515c:	add	r3, r4, #2
   15160:	cmp	sl, r3
   15164:	movhi	r2, #39	; 0x27
   15168:	strbhi	r2, [r8, r3]
   1516c:	mov	r3, #0
   15170:	cmp	r7, #0
   15174:	add	r4, r4, #3
   15178:	str	r3, [sp, #44]	; 0x2c
   1517c:	str	r6, [sp, #68]	; 0x44
   15180:	mov	r5, #39	; 0x27
   15184:	bne	14f38 <__assert_fail@plt+0x3728>
   15188:	ldr	r2, [sp, #44]	; 0x2c
   1518c:	eor	r3, r3, #1
   15190:	and	r3, r3, r2
   15194:	add	r9, r9, #1
   15198:	uxtb	r3, r3
   1519c:	cmp	r3, #0
   151a0:	beq	14fa8 <__assert_fail@plt+0x3798>
   151a4:	cmp	sl, r4
   151a8:	movhi	r3, #39	; 0x27
   151ac:	strbhi	r3, [r8, r4]
   151b0:	add	r3, r4, #1
   151b4:	cmp	sl, r3
   151b8:	movhi	r2, #39	; 0x27
   151bc:	strbhi	r2, [r8, r3]
   151c0:	mov	r3, #0
   151c4:	add	r4, r4, #2
   151c8:	str	r3, [sp, #44]	; 0x2c
   151cc:	b	14fa8 <__assert_fail@plt+0x3798>
   151d0:	mov	r3, #114	; 0x72
   151d4:	ldr	r1, [sp, #32]
   151d8:	sub	r2, fp, #2
   151dc:	clz	r2, r2
   151e0:	lsr	r2, r2, #5
   151e4:	tst	r2, r1
   151e8:	beq	150c0 <__assert_fail@plt+0x38b0>
   151ec:	mov	fp, r8
   151f0:	mov	r8, #2
   151f4:	ldr	r3, [sp, #28]
   151f8:	cmp	r3, #0
   151fc:	movne	r8, #4
   15200:	ldr	r3, [sp, #164]	; 0xa4
   15204:	mov	ip, #0
   15208:	bic	r3, r3, #2
   1520c:	str	r3, [sp, #4]
   15210:	ldr	r3, [sp, #76]	; 0x4c
   15214:	str	r8, [sp]
   15218:	str	r3, [sp, #16]
   1521c:	ldr	r3, [sp, #80]	; 0x50
   15220:	ldr	r2, [sp, #36]	; 0x24
   15224:	str	r3, [sp, #12]
   15228:	mov	r1, sl
   1522c:	ldr	r3, [sp, #24]
   15230:	mov	r0, fp
   15234:	str	ip, [sp, #8]
   15238:	bl	14958 <__assert_fail@plt+0x3148>
   1523c:	mov	r4, r0
   15240:	ldr	r3, [pc, #1304]	; 15760 <__assert_fail@plt+0x3f50>
   15244:	ldr	r2, [sp, #116]	; 0x74
   15248:	mov	r0, r4
   1524c:	ldr	r3, [r3]
   15250:	cmp	r2, r3
   15254:	bne	16144 <__assert_fail@plt+0x4934>
   15258:	add	sp, sp, #124	; 0x7c
   1525c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15260:	mov	r5, #110	; 0x6e
   15264:	ldr	r3, [sp, #32]
   15268:	mov	r2, #0
   1526c:	cmp	r3, #0
   15270:	mov	r6, r2
   15274:	beq	14f50 <__assert_fail@plt+0x3740>
   15278:	str	fp, [sp, #160]	; 0xa0
   1527c:	mov	fp, r8
   15280:	ldr	r8, [sp, #160]	; 0xa0
   15284:	mov	r3, r2
   15288:	ldr	r2, [sp, #28]
   1528c:	and	r2, r2, r3
   15290:	str	r2, [sp, #28]
   15294:	b	151f4 <__assert_fail@plt+0x39e4>
   15298:	mov	r5, #116	; 0x74
   1529c:	b	15264 <__assert_fail@plt+0x3a54>
   152a0:	mov	r5, #102	; 0x66
   152a4:	ldr	r3, [sp, #32]
   152a8:	cmp	r3, #0
   152ac:	bne	15e58 <__assert_fail@plt+0x4648>
   152b0:	mov	r6, #0
   152b4:	b	14f94 <__assert_fail@plt+0x3784>
   152b8:	mov	r5, #118	; 0x76
   152bc:	b	152a4 <__assert_fail@plt+0x3a94>
   152c0:	mov	r7, #0
   152c4:	mov	r6, #0
   152c8:	b	14f04 <__assert_fail@plt+0x36f4>
   152cc:	ldr	r3, [sp, #32]
   152d0:	cmp	r3, #0
   152d4:	bne	1609c <__assert_fail@plt+0x488c>
   152d8:	mov	r7, r3
   152dc:	ldr	r3, [sp, #44]	; 0x2c
   152e0:	sub	r2, fp, #2
   152e4:	eor	r3, r3, #1
   152e8:	clz	r2, r2
   152ec:	lsr	r2, r2, #5
   152f0:	ands	r3, r2, r3
   152f4:	beq	15d3c <__assert_fail@plt+0x452c>
   152f8:	cmp	sl, r4
   152fc:	movhi	r1, #39	; 0x27
   15300:	strbhi	r1, [r8, r4]
   15304:	add	r1, r4, #1
   15308:	cmp	sl, r1
   1530c:	movhi	r0, #36	; 0x24
   15310:	strbhi	r0, [r8, r1]
   15314:	add	r1, r4, #2
   15318:	cmp	sl, r1
   1531c:	movhi	r0, #39	; 0x27
   15320:	strbhi	r0, [r8, r1]
   15324:	add	r1, r4, #3
   15328:	cmp	sl, r1
   1532c:	bls	15d9c <__assert_fail@plt+0x458c>
   15330:	mov	r4, r1
   15334:	mov	r1, #92	; 0x5c
   15338:	strb	r1, [r8, r4]
   1533c:	mov	r1, r4
   15340:	str	r3, [sp, #44]	; 0x2c
   15344:	cmp	fp, #2
   15348:	add	r4, r4, #1
   1534c:	beq	15de4 <__assert_fail@plt+0x45d4>
   15350:	ldr	r0, [sp, #24]
   15354:	add	r3, r9, #1
   15358:	cmp	r3, r0
   1535c:	bcs	15374 <__assert_fail@plt+0x3b64>
   15360:	ldr	r0, [sp, #36]	; 0x24
   15364:	ldrb	r3, [r0, r3]
   15368:	sub	r3, r3, #48	; 0x30
   1536c:	cmp	r3, #9
   15370:	bls	15df4 <__assert_fail@plt+0x45e4>
   15374:	mov	r5, #48	; 0x30
   15378:	ldr	r3, [sp, #28]
   1537c:	eor	r3, r3, #1
   15380:	orrs	r2, r2, r3
   15384:	mov	r3, r6
   15388:	moveq	r6, r2
   1538c:	beq	14f08 <__assert_fail@plt+0x36f8>
   15390:	mov	r6, #0
   15394:	b	14f30 <__assert_fail@plt+0x3720>
   15398:	mov	r2, #0
   1539c:	mov	r6, r2
   153a0:	mov	r5, #98	; 0x62
   153a4:	b	14f50 <__assert_fail@plt+0x3740>
   153a8:	mov	r5, #97	; 0x61
   153ac:	b	152b0 <__assert_fail@plt+0x3aa0>
   153b0:	mov	r3, r7
   153b4:	mov	r6, r7
   153b8:	mov	r2, #0
   153bc:	mov	r7, r3
   153c0:	mov	r5, #32
   153c4:	b	14ee8 <__assert_fail@plt+0x36d8>
   153c8:	cmp	r9, #0
   153cc:	mov	r3, r7
   153d0:	bne	15998 <__assert_fail@plt+0x4188>
   153d4:	mov	r6, r7
   153d8:	mov	r2, r9
   153dc:	mov	r7, r3
   153e0:	b	14ee8 <__assert_fail@plt+0x36d8>
   153e4:	mov	r6, r7
   153e8:	b	14f04 <__assert_fail@plt+0x36f4>
   153ec:	mov	r7, #0
   153f0:	ldr	r3, [sp, #64]	; 0x40
   153f4:	cmp	r3, #1
   153f8:	bne	15a54 <__assert_fail@plt+0x4244>
   153fc:	bl	11624 <__ctype_b_loc@plt>
   15400:	ldr	r2, [sp, #64]	; 0x40
   15404:	sxth	r3, r5
   15408:	mov	ip, r2
   1540c:	lsl	r3, r3, #1
   15410:	ldr	r2, [r0]
   15414:	ldrh	r3, [r2, r3]
   15418:	and	r3, r3, #16384	; 0x4000
   1541c:	cmp	r3, #0
   15420:	ldr	r3, [sp, #28]
   15424:	movne	r6, #1
   15428:	moveq	r6, #0
   1542c:	movne	r2, #0
   15430:	andeq	r2, r3, #1
   15434:	cmp	r2, #0
   15438:	bne	15d64 <__assert_fail@plt+0x4554>
   1543c:	sub	r2, fp, #2
   15440:	clz	r2, r2
   15444:	lsr	r2, r2, #5
   15448:	b	14ee8 <__assert_fail@plt+0x36d8>
   1544c:	cmp	r4, #0
   15450:	bne	16110 <__assert_fail@plt+0x4900>
   15454:	str	r4, [sp, #28]
   15458:	cmp	sl, #0
   1545c:	bne	16154 <__assert_fail@plt+0x4944>
   15460:	ldr	r3, [pc, #772]	; 1576c <__assert_fail@plt+0x3f5c>
   15464:	mov	r4, #1
   15468:	str	r4, [sp, #40]	; 0x28
   1546c:	str	r3, [sp, #60]	; 0x3c
   15470:	str	r4, [sp, #52]	; 0x34
   15474:	str	sl, [sp, #72]	; 0x48
   15478:	str	sl, [sp, #68]	; 0x44
   1547c:	str	sl, [sp, #44]	; 0x2c
   15480:	str	sl, [sp, #32]
   15484:	mov	r8, #2
   15488:	b	14a50 <__assert_fail@plt+0x3240>
   1548c:	ldr	r3, [sp, #36]	; 0x24
   15490:	ldrb	r5, [r3, r9]
   15494:	cmp	r5, #126	; 0x7e
   15498:	ldrls	pc, [pc, r5, lsl #2]
   1549c:	b	153f0 <__assert_fail@plt+0x3be0>
   154a0:	ldrdeq	r5, [r1], -r4
   154a4:	strdeq	r5, [r1], -r0
   154a8:	strdeq	r5, [r1], -r0
   154ac:	strdeq	r5, [r1], -r0
   154b0:	strdeq	r5, [r1], -r0
   154b4:	strdeq	r5, [r1], -r0
   154b8:	strdeq	r5, [r1], -r0
   154bc:	andeq	r5, r1, r0, asr #13
   154c0:	andeq	r5, r1, ip, lsr #13
   154c4:	andeq	r5, r1, r4, lsr #13
   154c8:	muleq	r1, ip, r6
   154cc:	andeq	r5, r1, ip, asr #14
   154d0:	andeq	r5, r1, r8, lsr r7
   154d4:	ldrdeq	r5, [r1], -r0
   154d8:	strdeq	r5, [r1], -r0
   154dc:	strdeq	r5, [r1], -r0
   154e0:	strdeq	r5, [r1], -r0
   154e4:	strdeq	r5, [r1], -r0
   154e8:	strdeq	r5, [r1], -r0
   154ec:	strdeq	r5, [r1], -r0
   154f0:	strdeq	r5, [r1], -r0
   154f4:	strdeq	r5, [r1], -r0
   154f8:	strdeq	r5, [r1], -r0
   154fc:	strdeq	r5, [r1], -r0
   15500:	strdeq	r5, [r1], -r0
   15504:	strdeq	r5, [r1], -r0
   15508:	strdeq	r5, [r1], -r0
   1550c:	strdeq	r5, [r1], -r0
   15510:	strdeq	r5, [r1], -r0
   15514:	strdeq	r5, [r1], -r0
   15518:	strdeq	r5, [r1], -r0
   1551c:	strdeq	r5, [r1], -r0
   15520:	andeq	r5, r1, r8, lsr #14
   15524:	andeq	r5, r1, r4, lsl r7
   15528:	andeq	r5, r1, r4, lsl r7
   1552c:	andeq	r5, r1, r4, lsl #14
   15530:	andeq	r5, r1, r4, lsl r7
   15534:	andeq	r5, r1, ip, lsr r4
   15538:	andeq	r5, r1, r4, lsl r7
   1553c:	andeq	r5, r1, r4, lsl #2
   15540:	andeq	r5, r1, r4, lsl r7
   15544:	andeq	r5, r1, r4, lsl r7
   15548:	andeq	r5, r1, r4, lsl r7
   1554c:	andeq	r5, r1, ip, lsr r4
   15550:	andeq	r5, r1, ip, lsr r4
   15554:	andeq	r5, r1, ip, lsr r4
   15558:	andeq	r5, r1, ip, lsr r4
   1555c:	andeq	r5, r1, ip, lsr r4
   15560:	andeq	r5, r1, ip, lsr r4
   15564:	andeq	r5, r1, ip, lsr r4
   15568:	andeq	r5, r1, ip, lsr r4
   1556c:	andeq	r5, r1, ip, lsr r4
   15570:	andeq	r5, r1, ip, lsr r4
   15574:	andeq	r5, r1, ip, lsr r4
   15578:	andeq	r5, r1, ip, lsr r4
   1557c:	andeq	r5, r1, ip, lsr r4
   15580:	andeq	r5, r1, ip, lsr r4
   15584:	andeq	r5, r1, ip, lsr r4
   15588:	andeq	r5, r1, ip, lsr r4
   1558c:	andeq	r5, r1, r4, lsl r7
   15590:	andeq	r5, r1, r4, lsl r7
   15594:	andeq	r5, r1, r4, lsl r7
   15598:	andeq	r5, r1, r4, lsl r7
   1559c:	ldrdeq	r5, [r1], -r8
   155a0:	strdeq	r5, [r1], -r0
   155a4:	andeq	r5, r1, ip, lsr r4
   155a8:	andeq	r5, r1, ip, lsr r4
   155ac:	andeq	r5, r1, ip, lsr r4
   155b0:	andeq	r5, r1, ip, lsr r4
   155b4:	andeq	r5, r1, ip, lsr r4
   155b8:	andeq	r5, r1, ip, lsr r4
   155bc:	andeq	r5, r1, ip, lsr r4
   155c0:	andeq	r5, r1, ip, lsr r4
   155c4:	andeq	r5, r1, ip, lsr r4
   155c8:	andeq	r5, r1, ip, lsr r4
   155cc:	andeq	r5, r1, ip, lsr r4
   155d0:	andeq	r5, r1, ip, lsr r4
   155d4:	andeq	r5, r1, ip, lsr r4
   155d8:	andeq	r5, r1, ip, lsr r4
   155dc:	andeq	r5, r1, ip, lsr r4
   155e0:	andeq	r5, r1, ip, lsr r4
   155e4:	andeq	r5, r1, ip, lsr r4
   155e8:	andeq	r5, r1, ip, lsr r4
   155ec:	andeq	r5, r1, ip, lsr r4
   155f0:	andeq	r5, r1, ip, lsr r4
   155f4:	andeq	r5, r1, ip, lsr r4
   155f8:	andeq	r5, r1, ip, lsr r4
   155fc:	andeq	r5, r1, ip, lsr r4
   15600:	andeq	r5, r1, ip, lsr r4
   15604:	andeq	r5, r1, ip, lsr r4
   15608:	andeq	r5, r1, ip, lsr r4
   1560c:	andeq	r5, r1, r4, lsl r7
   15610:	muleq	r1, r0, r0
   15614:	andeq	r5, r1, ip, lsr r4
   15618:	andeq	r5, r1, r4, lsl r7
   1561c:	andeq	r5, r1, ip, lsr r4
   15620:	andeq	r5, r1, r4, lsl r7
   15624:	andeq	r5, r1, ip, lsr r4
   15628:	andeq	r5, r1, ip, lsr r4
   1562c:	andeq	r5, r1, ip, lsr r4
   15630:	andeq	r5, r1, ip, lsr r4
   15634:	andeq	r5, r1, ip, lsr r4
   15638:	andeq	r5, r1, ip, lsr r4
   1563c:	andeq	r5, r1, ip, lsr r4
   15640:	andeq	r5, r1, ip, lsr r4
   15644:	andeq	r5, r1, ip, lsr r4
   15648:	andeq	r5, r1, ip, lsr r4
   1564c:	andeq	r5, r1, ip, lsr r4
   15650:	andeq	r5, r1, ip, lsr r4
   15654:	andeq	r5, r1, ip, lsr r4
   15658:	andeq	r5, r1, ip, lsr r4
   1565c:	andeq	r5, r1, ip, lsr r4
   15660:	andeq	r5, r1, ip, lsr r4
   15664:	andeq	r5, r1, ip, lsr r4
   15668:	andeq	r5, r1, ip, lsr r4
   1566c:	andeq	r5, r1, ip, lsr r4
   15670:	andeq	r5, r1, ip, lsr r4
   15674:	andeq	r5, r1, ip, lsr r4
   15678:	andeq	r5, r1, ip, lsr r4
   1567c:	andeq	r5, r1, ip, lsr r4
   15680:	andeq	r5, r1, ip, lsr r4
   15684:	andeq	r5, r1, ip, lsr r4
   15688:	andeq	r5, r1, ip, lsr r4
   1568c:	andeq	r4, r1, r8, lsr #29
   15690:	andeq	r5, r1, r4, lsl r7
   15694:	andeq	r4, r1, r8, lsr #29
   15698:	andeq	r5, r1, r4, lsl #14
   1569c:	mov	r3, #110	; 0x6e
   156a0:	b	151d4 <__assert_fail@plt+0x39c4>
   156a4:	mov	r3, #116	; 0x74
   156a8:	b	151d4 <__assert_fail@plt+0x39c4>
   156ac:	sub	r2, fp, #2
   156b0:	mov	r3, #98	; 0x62
   156b4:	clz	r2, r2
   156b8:	lsr	r2, r2, #5
   156bc:	b	150c0 <__assert_fail@plt+0x38b0>
   156c0:	sub	r2, fp, #2
   156c4:	mov	r3, #97	; 0x61
   156c8:	clz	r2, r2
   156cc:	lsr	r2, r2, #5
   156d0:	b	150c0 <__assert_fail@plt+0x38b0>
   156d4:	ldr	r3, [sp, #28]
   156d8:	cmp	r3, #0
   156dc:	bne	152cc <__assert_fail@plt+0x3abc>
   156e0:	ldr	r3, [sp, #164]	; 0xa4
   156e4:	tst	r3, #1
   156e8:	bne	15d5c <__assert_fail@plt+0x454c>
   156ec:	ldr	r6, [sp, #28]
   156f0:	sub	r2, fp, #2
   156f4:	mov	r7, r6
   156f8:	clz	r2, r2
   156fc:	lsr	r2, r2, #5
   15700:	b	14ee8 <__assert_fail@plt+0x36d8>
   15704:	sub	r2, fp, #2
   15708:	clz	r2, r2
   1570c:	lsr	r2, r2, #5
   15710:	b	14ed4 <__assert_fail@plt+0x36c4>
   15714:	sub	r2, fp, #2
   15718:	mov	r6, #0
   1571c:	clz	r2, r2
   15720:	lsr	r2, r2, #5
   15724:	b	14edc <__assert_fail@plt+0x36cc>
   15728:	sub	r2, fp, #2
   1572c:	clz	r2, r2
   15730:	lsr	r2, r2, #5
   15734:	b	14edc <__assert_fail@plt+0x36cc>
   15738:	sub	r2, fp, #2
   1573c:	mov	r3, #102	; 0x66
   15740:	clz	r2, r2
   15744:	lsr	r2, r2, #5
   15748:	b	150c0 <__assert_fail@plt+0x38b0>
   1574c:	sub	r2, fp, #2
   15750:	mov	r3, #118	; 0x76
   15754:	clz	r2, r2
   15758:	lsr	r2, r2, #5
   1575c:	b	150c0 <__assert_fail@plt+0x38b0>
   15760:	andeq	sl, r2, r0, lsl #30
   15764:	andeq	sl, r1, r8, lsl #21
   15768:	andeq	sl, r1, r0, ror sl
   1576c:	andeq	sl, r1, r4, lsl #21
   15770:	ldr	r3, [sp, #48]	; 0x30
   15774:	ldrb	r5, [r3]
   15778:	cmp	r5, #126	; 0x7e
   1577c:	ldrls	pc, [pc, r5, lsl #2]
   15780:	b	153ec <__assert_fail@plt+0x3bdc>
   15784:	andeq	r5, r1, ip, asr #5
   15788:	andeq	r5, r1, ip, ror #7
   1578c:	andeq	r5, r1, ip, ror #7
   15790:	andeq	r5, r1, ip, ror #7
   15794:	andeq	r5, r1, ip, ror #7
   15798:	andeq	r5, r1, ip, ror #7
   1579c:	andeq	r5, r1, ip, ror #7
   157a0:	andeq	r5, r1, r4, asr #19
   157a4:			; <UNDEFINED> instruction: 0x000159bc
   157a8:	muleq	r1, r8, r2
   157ac:	andeq	r5, r1, r0, ror #4
   157b0:			; <UNDEFINED> instruction: 0x000152b8
   157b4:	andeq	r5, r1, r0, lsr #5
   157b8:			; <UNDEFINED> instruction: 0x000159b0
   157bc:	andeq	r5, r1, ip, ror #7
   157c0:	andeq	r5, r1, ip, ror #7
   157c4:	andeq	r5, r1, ip, ror #7
   157c8:	andeq	r5, r1, ip, ror #7
   157cc:	andeq	r5, r1, ip, ror #7
   157d0:	andeq	r5, r1, ip, ror #7
   157d4:	andeq	r5, r1, ip, ror #7
   157d8:	andeq	r5, r1, ip, ror #7
   157dc:	andeq	r5, r1, ip, ror #7
   157e0:	andeq	r5, r1, ip, ror #7
   157e4:	andeq	r5, r1, ip, ror #7
   157e8:	andeq	r5, r1, ip, ror #7
   157ec:	andeq	r5, r1, ip, ror #7
   157f0:	andeq	r5, r1, ip, ror #7
   157f4:	andeq	r5, r1, ip, ror #7
   157f8:	andeq	r5, r1, ip, ror #7
   157fc:	andeq	r5, r1, ip, ror #7
   15800:	andeq	r5, r1, ip, ror #7
   15804:	andeq	r5, r1, r8, lsr #19
   15808:	andeq	r5, r1, r0, asr #5
   1580c:	andeq	r5, r1, r0, asr #5
   15810:	andeq	r5, r1, ip, lsl #19
   15814:	andeq	r5, r1, r0, asr #5
   15818:	andeq	r5, r1, r0, lsl #19
   1581c:	andeq	r5, r1, r0, asr #5
   15820:	andeq	r5, r1, r0, lsl #2
   15824:	andeq	r5, r1, r0, asr #5
   15828:	andeq	r5, r1, r0, asr #5
   1582c:	andeq	r5, r1, r0, asr #5
   15830:	andeq	r5, r1, r0, lsl #19
   15834:	andeq	r5, r1, r0, lsl #19
   15838:	andeq	r5, r1, r0, lsl #19
   1583c:	andeq	r5, r1, r0, lsl #19
   15840:	andeq	r5, r1, r0, lsl #19
   15844:	andeq	r5, r1, r0, lsl #19
   15848:	andeq	r5, r1, r0, lsl #19
   1584c:	andeq	r5, r1, r0, lsl #19
   15850:	andeq	r5, r1, r0, lsl #19
   15854:	andeq	r5, r1, r0, lsl #19
   15858:	andeq	r5, r1, r0, lsl #19
   1585c:	andeq	r5, r1, r0, lsl #19
   15860:	andeq	r5, r1, r0, lsl #19
   15864:	andeq	r5, r1, r0, lsl #19
   15868:	andeq	r5, r1, r0, lsl #19
   1586c:	andeq	r5, r1, r0, lsl #19
   15870:	andeq	r5, r1, r0, asr #5
   15874:	andeq	r5, r1, r0, asr #5
   15878:	andeq	r5, r1, r0, asr #5
   1587c:	andeq	r5, r1, r0, asr #5
   15880:	ldrdeq	r5, [r1], -r4
   15884:	andeq	r5, r1, ip, ror #7
   15888:	andeq	r5, r1, r0, lsl #19
   1588c:	andeq	r5, r1, r0, lsl #19
   15890:	andeq	r5, r1, r0, lsl #19
   15894:	andeq	r5, r1, r0, lsl #19
   15898:	andeq	r5, r1, r0, lsl #19
   1589c:	andeq	r5, r1, r0, lsl #19
   158a0:	andeq	r5, r1, r0, lsl #19
   158a4:	andeq	r5, r1, r0, lsl #19
   158a8:	andeq	r5, r1, r0, lsl #19
   158ac:	andeq	r5, r1, r0, lsl #19
   158b0:	andeq	r5, r1, r0, lsl #19
   158b4:	andeq	r5, r1, r0, lsl #19
   158b8:	andeq	r5, r1, r0, lsl #19
   158bc:	andeq	r5, r1, r0, lsl #19
   158c0:	andeq	r5, r1, r0, lsl #19
   158c4:	andeq	r5, r1, r0, lsl #19
   158c8:	andeq	r5, r1, r0, lsl #19
   158cc:	andeq	r5, r1, r0, lsl #19
   158d0:	andeq	r5, r1, r0, lsl #19
   158d4:	andeq	r5, r1, r0, lsl #19
   158d8:	andeq	r5, r1, r0, lsl #19
   158dc:	andeq	r5, r1, r0, lsl #19
   158e0:	andeq	r5, r1, r0, lsl #19
   158e4:	andeq	r5, r1, r0, lsl #19
   158e8:	andeq	r5, r1, r0, lsl #19
   158ec:	andeq	r5, r1, r0, lsl #19
   158f0:	andeq	r5, r1, r0, asr #5
   158f4:	andeq	r5, r1, ip, lsl #1
   158f8:	andeq	r5, r1, r0, lsl #19
   158fc:	andeq	r5, r1, r0, asr #5
   15900:	andeq	r5, r1, r0, lsl #19
   15904:	andeq	r5, r1, r0, asr #5
   15908:	andeq	r5, r1, r0, lsl #19
   1590c:	andeq	r5, r1, r0, lsl #19
   15910:	andeq	r5, r1, r0, lsl #19
   15914:	andeq	r5, r1, r0, lsl #19
   15918:	andeq	r5, r1, r0, lsl #19
   1591c:	andeq	r5, r1, r0, lsl #19
   15920:	andeq	r5, r1, r0, lsl #19
   15924:	andeq	r5, r1, r0, lsl #19
   15928:	andeq	r5, r1, r0, lsl #19
   1592c:	andeq	r5, r1, r0, lsl #19
   15930:	andeq	r5, r1, r0, lsl #19
   15934:	andeq	r5, r1, r0, lsl #19
   15938:	andeq	r5, r1, r0, lsl #19
   1593c:	andeq	r5, r1, r0, lsl #19
   15940:	andeq	r5, r1, r0, lsl #19
   15944:	andeq	r5, r1, r0, lsl #19
   15948:	andeq	r5, r1, r0, lsl #19
   1594c:	andeq	r5, r1, r0, lsl #19
   15950:	andeq	r5, r1, r0, lsl #19
   15954:	andeq	r5, r1, r0, lsl #19
   15958:	andeq	r5, r1, r0, lsl #19
   1595c:	andeq	r5, r1, r0, lsl #19
   15960:	andeq	r5, r1, r0, lsl #19
   15964:	andeq	r5, r1, r0, lsl #19
   15968:	andeq	r5, r1, r0, lsl #19
   1596c:	andeq	r5, r1, r0, lsl #19
   15970:	andeq	r4, r1, r4, lsr #29
   15974:	andeq	r5, r1, r0, asr #5
   15978:	andeq	r4, r1, r4, lsr #29
   1597c:	andeq	r5, r1, ip, lsl #19
   15980:	mov	r6, r7
   15984:	mov	r7, #0
   15988:	b	14f04 <__assert_fail@plt+0x36f4>
   1598c:	cmp	r9, #0
   15990:	mov	r3, #0
   15994:	beq	153d4 <__assert_fail@plt+0x3bc4>
   15998:	mov	r6, #0
   1599c:	mov	r7, r3
   159a0:	mov	r3, r6
   159a4:	b	14f08 <__assert_fail@plt+0x36f8>
   159a8:	mov	r3, #0
   159ac:	b	153b4 <__assert_fail@plt+0x3ba4>
   159b0:	mov	r7, #0
   159b4:	mov	r3, #114	; 0x72
   159b8:	b	151d4 <__assert_fail@plt+0x39c4>
   159bc:	mov	r5, #98	; 0x62
   159c0:	b	15264 <__assert_fail@plt+0x3a54>
   159c4:	mov	r5, #97	; 0x61
   159c8:	b	152a4 <__assert_fail@plt+0x3a94>
   159cc:	ldr	r3, [sp, #32]
   159d0:	cmp	r3, #0
   159d4:	bne	15e1c <__assert_fail@plt+0x460c>
   159d8:	add	r9, r9, #1
   159dc:	ldr	r3, [sp, #44]	; 0x2c
   159e0:	mov	r6, #0
   159e4:	mov	r5, #92	; 0x5c
   159e8:	b	1519c <__assert_fail@plt+0x398c>
   159ec:	ldr	r3, [sp, #36]	; 0x24
   159f0:	ldrb	r3, [r3, #1]
   159f4:	adds	r3, r3, #0
   159f8:	movne	r3, #1
   159fc:	b	14ec0 <__assert_fail@plt+0x36b0>
   15a00:	ldr	r3, [sp, #164]	; 0xa4
   15a04:	ands	r3, r3, #4
   15a08:	beq	15a2c <__assert_fail@plt+0x421c>
   15a0c:	ldr	r2, [sp, #24]
   15a10:	add	r3, r9, #2
   15a14:	cmp	r3, r2
   15a18:	bcs	15a2c <__assert_fail@plt+0x421c>
   15a1c:	ldr	r2, [sp, #48]	; 0x30
   15a20:	ldrb	r5, [r2, #1]
   15a24:	cmp	r5, #63	; 0x3f
   15a28:	beq	15e90 <__assert_fail@plt+0x4680>
   15a2c:	mov	r2, #0
   15a30:	mov	r6, r2
   15a34:	mov	r5, #63	; 0x3f
   15a38:	b	14ee8 <__assert_fail@plt+0x36d8>
   15a3c:	ldr	r3, [sp, #32]
   15a40:	cmp	r3, #0
   15a44:	bne	15e1c <__assert_fail@plt+0x460c>
   15a48:	mov	r6, r3
   15a4c:	mov	r5, #63	; 0x3f
   15a50:	b	14f30 <__assert_fail@plt+0x3720>
   15a54:	ldr	r3, [sp, #24]
   15a58:	cmn	r3, #1
   15a5c:	mov	r3, #0
   15a60:	str	r3, [sp, #108]	; 0x6c
   15a64:	str	r3, [sp, #112]	; 0x70
   15a68:	bne	15a78 <__assert_fail@plt+0x4268>
   15a6c:	ldr	r0, [sp, #36]	; 0x24
   15a70:	bl	11654 <strlen@plt>
   15a74:	str	r0, [sp, #24]
   15a78:	mov	r3, #0
   15a7c:	str	sl, [sp, #88]	; 0x58
   15a80:	ldr	sl, [sp, #36]	; 0x24
   15a84:	str	r5, [sp, #92]	; 0x5c
   15a88:	mov	r5, r3
   15a8c:	str	r7, [sp, #96]	; 0x60
   15a90:	str	r4, [sp, #100]	; 0x64
   15a94:	str	r8, [sp, #84]	; 0x54
   15a98:	ldr	r3, [sp, #24]
   15a9c:	add	r4, r9, r5
   15aa0:	add	r7, sl, r4
   15aa4:	sub	r2, r3, r4
   15aa8:	mov	r1, r7
   15aac:	add	r3, sp, #108	; 0x6c
   15ab0:	add	r0, sp, #104	; 0x68
   15ab4:	bl	19768 <fts_children@@Base+0x204>
   15ab8:	subs	r8, r0, #0
   15abc:	beq	15b0c <__assert_fail@plt+0x42fc>
   15ac0:	cmn	r8, #1
   15ac4:	beq	15e6c <__assert_fail@plt+0x465c>
   15ac8:	cmn	r8, #2
   15acc:	beq	15f8c <__assert_fail@plt+0x477c>
   15ad0:	ldr	r3, [sp, #32]
   15ad4:	cmp	fp, #2
   15ad8:	movne	r3, #0
   15adc:	andeq	r3, r3, #1
   15ae0:	cmp	r3, #0
   15ae4:	bne	15c6c <__assert_fail@plt+0x445c>
   15ae8:	ldr	r0, [sp, #104]	; 0x68
   15aec:	bl	11540 <iswprint@plt>
   15af0:	add	r5, r5, r8
   15af4:	cmp	r0, #0
   15af8:	add	r0, sp, #108	; 0x6c
   15afc:	moveq	r6, #0
   15b00:	bl	114c8 <mbsinit@plt>
   15b04:	cmp	r0, #0
   15b08:	beq	15a98 <__assert_fail@plt+0x4288>
   15b0c:	ldr	r3, [sp, #28]
   15b10:	mov	ip, r5
   15b14:	eor	r2, r6, #1
   15b18:	ldr	r5, [sp, #92]	; 0x5c
   15b1c:	ldr	r7, [sp, #96]	; 0x60
   15b20:	ldr	r4, [sp, #100]	; 0x64
   15b24:	ldr	r8, [sp, #84]	; 0x54
   15b28:	ldr	sl, [sp, #88]	; 0x58
   15b2c:	and	r2, r2, r3
   15b30:	cmp	ip, #1
   15b34:	bls	15434 <__assert_fail@plt+0x3c24>
   15b38:	add	r1, ip, r9
   15b3c:	ldr	lr, [sp, #48]	; 0x30
   15b40:	mov	r0, #0
   15b44:	str	r6, [sp, #48]	; 0x30
   15b48:	mov	ip, #39	; 0x27
   15b4c:	ldr	r6, [sp, #44]	; 0x2c
   15b50:	b	15c08 <__assert_fail@plt+0x43f8>
   15b54:	ldr	r0, [sp, #32]
   15b58:	sub	r3, fp, #2
   15b5c:	cmp	r0, #0
   15b60:	clz	r3, r3
   15b64:	lsr	r3, r3, #5
   15b68:	bne	15d70 <__assert_fail@plt+0x4560>
   15b6c:	eor	r0, r6, #1
   15b70:	ands	r3, r3, r0
   15b74:	beq	15ba4 <__assert_fail@plt+0x4394>
   15b78:	add	r0, r4, #1
   15b7c:	cmp	sl, r4
   15b80:	strbhi	ip, [r8, r4]
   15b84:	cmp	sl, r0
   15b88:	movhi	r6, #36	; 0x24
   15b8c:	strbhi	r6, [r8, r0]
   15b90:	add	r0, r4, #2
   15b94:	mov	r6, r3
   15b98:	add	r4, r4, #3
   15b9c:	cmp	sl, r0
   15ba0:	strbhi	ip, [r8, r0]
   15ba4:	cmp	sl, r4
   15ba8:	movhi	r3, #92	; 0x5c
   15bac:	strbhi	r3, [r8, r4]
   15bb0:	add	r3, r4, #1
   15bb4:	cmp	sl, r3
   15bb8:	lsrhi	r0, r5, #6
   15bbc:	addhi	r0, r0, #48	; 0x30
   15bc0:	strbhi	r0, [r8, r3]
   15bc4:	add	r0, r4, #2
   15bc8:	cmp	sl, r0
   15bcc:	lsrhi	r3, r5, #3
   15bd0:	andhi	r3, r3, #7
   15bd4:	addhi	r3, r3, #48	; 0x30
   15bd8:	add	r9, r9, #1
   15bdc:	strbhi	r3, [r8, r0]
   15be0:	and	r5, r5, #7
   15be4:	cmp	r9, r1
   15be8:	add	r5, r5, #48	; 0x30
   15bec:	add	r4, r4, #3
   15bf0:	bcs	15d90 <__assert_fail@plt+0x4580>
   15bf4:	mov	r0, r2
   15bf8:	cmp	sl, r4
   15bfc:	strbhi	r5, [r8, r4]
   15c00:	ldrb	r5, [lr, #1]!
   15c04:	add	r4, r4, #1
   15c08:	cmp	r2, #0
   15c0c:	bne	15b54 <__assert_fail@plt+0x4344>
   15c10:	eor	r3, r0, #1
   15c14:	and	r3, r3, r6
   15c18:	cmp	r7, #0
   15c1c:	uxtb	r3, r3
   15c20:	beq	15c34 <__assert_fail@plt+0x4424>
   15c24:	cmp	sl, r4
   15c28:	movhi	r7, #92	; 0x5c
   15c2c:	strbhi	r7, [r8, r4]
   15c30:	add	r4, r4, #1
   15c34:	add	r9, r9, #1
   15c38:	cmp	r9, r1
   15c3c:	bcs	15d84 <__assert_fail@plt+0x4574>
   15c40:	cmp	r3, #0
   15c44:	beq	15db0 <__assert_fail@plt+0x45a0>
   15c48:	cmp	sl, r4
   15c4c:	add	r3, r4, #1
   15c50:	strbhi	ip, [r8, r4]
   15c54:	mov	r7, #0
   15c58:	cmp	sl, r3
   15c5c:	strbhi	ip, [r8, r3]
   15c60:	add	r4, r4, #2
   15c64:	mov	r6, r7
   15c68:	b	15bf8 <__assert_fail@plt+0x43e8>
   15c6c:	cmp	r8, #1
   15c70:	beq	15ae8 <__assert_fail@plt+0x42d8>
   15c74:	add	r1, r4, #1
   15c78:	add	r3, sl, r8
   15c7c:	add	r1, sl, r1
   15c80:	add	r4, r3, r4
   15c84:	ldrb	r3, [r1], #1
   15c88:	sub	r3, r3, #91	; 0x5b
   15c8c:	cmp	r3, #33	; 0x21
   15c90:	ldrls	pc, [pc, r3, lsl #2]
   15c94:	b	15d20 <__assert_fail@plt+0x4510>
   15c98:	andeq	r5, r1, ip, lsr #26
   15c9c:	andeq	r5, r1, ip, lsr #26
   15ca0:	andeq	r5, r1, r0, lsr #26
   15ca4:	andeq	r5, r1, ip, lsr #26
   15ca8:	andeq	r5, r1, r0, lsr #26
   15cac:	andeq	r5, r1, ip, lsr #26
   15cb0:	andeq	r5, r1, r0, lsr #26
   15cb4:	andeq	r5, r1, r0, lsr #26
   15cb8:	andeq	r5, r1, r0, lsr #26
   15cbc:	andeq	r5, r1, r0, lsr #26
   15cc0:	andeq	r5, r1, r0, lsr #26
   15cc4:	andeq	r5, r1, r0, lsr #26
   15cc8:	andeq	r5, r1, r0, lsr #26
   15ccc:	andeq	r5, r1, r0, lsr #26
   15cd0:	andeq	r5, r1, r0, lsr #26
   15cd4:	andeq	r5, r1, r0, lsr #26
   15cd8:	andeq	r5, r1, r0, lsr #26
   15cdc:	andeq	r5, r1, r0, lsr #26
   15ce0:	andeq	r5, r1, r0, lsr #26
   15ce4:	andeq	r5, r1, r0, lsr #26
   15ce8:	andeq	r5, r1, r0, lsr #26
   15cec:	andeq	r5, r1, r0, lsr #26
   15cf0:	andeq	r5, r1, r0, lsr #26
   15cf4:	andeq	r5, r1, r0, lsr #26
   15cf8:	andeq	r5, r1, r0, lsr #26
   15cfc:	andeq	r5, r1, r0, lsr #26
   15d00:	andeq	r5, r1, r0, lsr #26
   15d04:	andeq	r5, r1, r0, lsr #26
   15d08:	andeq	r5, r1, r0, lsr #26
   15d0c:	andeq	r5, r1, r0, lsr #26
   15d10:	andeq	r5, r1, r0, lsr #26
   15d14:	andeq	r5, r1, r0, lsr #26
   15d18:	andeq	r5, r1, r0, lsr #26
   15d1c:	andeq	r5, r1, ip, lsr #26
   15d20:	cmp	r4, r1
   15d24:	bne	15c84 <__assert_fail@plt+0x4474>
   15d28:	b	15ae8 <__assert_fail@plt+0x42d8>
   15d2c:	ldr	fp, [sp, #84]	; 0x54
   15d30:	ldr	sl, [sp, #88]	; 0x58
   15d34:	mov	r8, #2
   15d38:	b	151f4 <__assert_fail@plt+0x39e4>
   15d3c:	cmp	sl, r4
   15d40:	movls	r1, r4
   15d44:	bls	15344 <__assert_fail@plt+0x3b34>
   15d48:	ldr	r3, [sp, #44]	; 0x2c
   15d4c:	b	15334 <__assert_fail@plt+0x3b24>
   15d50:	str	sl, [sp, #72]	; 0x48
   15d54:	ldr	sl, [sp, #32]
   15d58:	b	1516c <__assert_fail@plt+0x395c>
   15d5c:	add	r9, r9, #1
   15d60:	b	14a60 <__assert_fail@plt+0x3250>
   15d64:	ldr	r2, [sp, #28]
   15d68:	mov	r6, #0
   15d6c:	b	15b38 <__assert_fail@plt+0x4328>
   15d70:	str	fp, [sp, #160]	; 0xa0
   15d74:	str	r3, [sp, #28]
   15d78:	mov	fp, r8
   15d7c:	ldr	r8, [sp, #160]	; 0xa0
   15d80:	b	151f4 <__assert_fail@plt+0x39e4>
   15d84:	str	r6, [sp, #44]	; 0x2c
   15d88:	ldr	r6, [sp, #48]	; 0x30
   15d8c:	b	1519c <__assert_fail@plt+0x398c>
   15d90:	str	r6, [sp, #44]	; 0x2c
   15d94:	ldr	r6, [sp, #48]	; 0x30
   15d98:	b	14fa8 <__assert_fail@plt+0x3798>
   15d9c:	add	r4, r4, #4
   15da0:	str	r3, [sp, #44]	; 0x2c
   15da4:	mov	r6, #0
   15da8:	mov	r5, #48	; 0x30
   15dac:	b	14f30 <__assert_fail@plt+0x3720>
   15db0:	mov	r7, r3
   15db4:	b	15bf8 <__assert_fail@plt+0x43e8>
   15db8:	ldr	r3, [pc, #-1624]	; 15768 <__assert_fail@plt+0x3f58>
   15dbc:	mov	r4, #1
   15dc0:	str	r4, [sp, #40]	; 0x28
   15dc4:	str	r4, [sp, #28]
   15dc8:	str	r4, [sp, #52]	; 0x34
   15dcc:	str	sl, [sp, #72]	; 0x48
   15dd0:	str	sl, [sp, #68]	; 0x44
   15dd4:	str	sl, [sp, #44]	; 0x2c
   15dd8:	str	sl, [sp, #32]
   15ddc:	str	r3, [sp, #60]	; 0x3c
   15de0:	b	14a50 <__assert_fail@plt+0x3240>
   15de4:	mov	r3, r6
   15de8:	mov	r5, #48	; 0x30
   15dec:	mov	r6, #0
   15df0:	b	14f30 <__assert_fail@plt+0x3720>
   15df4:	cmp	sl, r4
   15df8:	movhi	r3, #48	; 0x30
   15dfc:	strbhi	r3, [r8, r4]
   15e00:	add	r3, r1, #2
   15e04:	cmp	sl, r3
   15e08:	movhi	r0, #48	; 0x30
   15e0c:	strbhi	r0, [r8, r3]
   15e10:	add	r4, r1, #3
   15e14:	mov	r5, #48	; 0x30
   15e18:	b	15378 <__assert_fail@plt+0x3b68>
   15e1c:	str	fp, [sp, #160]	; 0xa0
   15e20:	mov	fp, r8
   15e24:	ldr	r8, [sp, #160]	; 0xa0
   15e28:	b	151f4 <__assert_fail@plt+0x39e4>
   15e2c:	ldr	r2, [sp, #80]	; 0x50
   15e30:	ldrb	r3, [r2]
   15e34:	cmp	r3, #0
   15e38:	beq	14a20 <__assert_fail@plt+0x3210>
   15e3c:	cmp	sl, r4
   15e40:	strbhi	r3, [fp, r4]
   15e44:	ldrb	r3, [r2, #1]!
   15e48:	add	r4, r4, #1
   15e4c:	cmp	r3, #0
   15e50:	bne	15e3c <__assert_fail@plt+0x462c>
   15e54:	b	14a20 <__assert_fail@plt+0x3210>
   15e58:	str	fp, [sp, #160]	; 0xa0
   15e5c:	mov	r3, #0
   15e60:	mov	fp, r8
   15e64:	ldr	r8, [sp, #160]	; 0xa0
   15e68:	b	15288 <__assert_fail@plt+0x3a78>
   15e6c:	mov	ip, r5
   15e70:	ldr	r7, [sp, #96]	; 0x60
   15e74:	ldr	r5, [sp, #92]	; 0x5c
   15e78:	ldr	r4, [sp, #100]	; 0x64
   15e7c:	ldr	r8, [sp, #84]	; 0x54
   15e80:	ldr	sl, [sp, #88]	; 0x58
   15e84:	ldr	r2, [sp, #28]
   15e88:	mov	r6, #0
   15e8c:	b	15b30 <__assert_fail@plt+0x4320>
   15e90:	ldr	r2, [sp, #36]	; 0x24
   15e94:	ldrb	r1, [r2, r3]
   15e98:	sub	r2, r1, #33	; 0x21
   15e9c:	cmp	r2, #29
   15ea0:	ldrls	pc, [pc, r2, lsl #2]
   15ea4:	b	15f80 <__assert_fail@plt+0x4770>
   15ea8:	andeq	r5, r1, r0, lsr #30
   15eac:	andeq	r5, r1, r0, lsl #31
   15eb0:	andeq	r5, r1, r0, lsl #31
   15eb4:	andeq	r5, r1, r0, lsl #31
   15eb8:	andeq	r5, r1, r0, lsl #31
   15ebc:	andeq	r5, r1, r0, lsl #31
   15ec0:	andeq	r5, r1, r0, lsr #30
   15ec4:	andeq	r5, r1, r0, lsr #30
   15ec8:	andeq	r5, r1, r0, lsr #30
   15ecc:	andeq	r5, r1, r0, lsl #31
   15ed0:	andeq	r5, r1, r0, lsl #31
   15ed4:	andeq	r5, r1, r0, lsl #31
   15ed8:	andeq	r5, r1, r0, lsr #30
   15edc:	andeq	r5, r1, r0, lsl #31
   15ee0:	andeq	r5, r1, r0, lsr #30
   15ee4:	andeq	r5, r1, r0, lsl #31
   15ee8:	andeq	r5, r1, r0, lsl #31
   15eec:	andeq	r5, r1, r0, lsl #31
   15ef0:	andeq	r5, r1, r0, lsl #31
   15ef4:	andeq	r5, r1, r0, lsl #31
   15ef8:	andeq	r5, r1, r0, lsl #31
   15efc:	andeq	r5, r1, r0, lsl #31
   15f00:	andeq	r5, r1, r0, lsl #31
   15f04:	andeq	r5, r1, r0, lsl #31
   15f08:	andeq	r5, r1, r0, lsl #31
   15f0c:	andeq	r5, r1, r0, lsl #31
   15f10:	andeq	r5, r1, r0, lsl #31
   15f14:	andeq	r5, r1, r0, lsr #30
   15f18:	andeq	r5, r1, r0, lsr #30
   15f1c:	andeq	r5, r1, r0, lsr #30
   15f20:	ldr	r2, [sp, #32]
   15f24:	cmp	r2, #0
   15f28:	bne	1602c <__assert_fail@plt+0x481c>
   15f2c:	cmp	sl, r4
   15f30:	movhi	r2, #63	; 0x3f
   15f34:	strbhi	r2, [r8, r4]
   15f38:	add	r2, r4, #1
   15f3c:	cmp	sl, r2
   15f40:	movhi	r0, #34	; 0x22
   15f44:	strbhi	r0, [r8, r2]
   15f48:	add	r2, r4, #2
   15f4c:	cmp	sl, r2
   15f50:	movhi	r0, #34	; 0x22
   15f54:	strbhi	r0, [r8, r2]
   15f58:	add	r2, r4, #3
   15f5c:	cmp	sl, r2
   15f60:	movhi	r0, #63	; 0x3f
   15f64:	strbhi	r0, [r8, r2]
   15f68:	mov	r2, #0
   15f6c:	add	r4, r4, #4
   15f70:	mov	r5, r1
   15f74:	mov	r9, r3
   15f78:	mov	r6, r2
   15f7c:	b	15378 <__assert_fail@plt+0x3b68>
   15f80:	mov	r2, #0
   15f84:	mov	r6, r2
   15f88:	b	14ee8 <__assert_fail@plt+0x36d8>
   15f8c:	ldr	r0, [sp, #24]
   15f90:	mov	r1, r4
   15f94:	cmp	r1, r0
   15f98:	mov	r2, r7
   15f9c:	mov	r3, r5
   15fa0:	mov	ip, r5
   15fa4:	ldr	r7, [sp, #96]	; 0x60
   15fa8:	ldr	r5, [sp, #92]	; 0x5c
   15fac:	ldr	r4, [sp, #100]	; 0x64
   15fb0:	ldr	r8, [sp, #84]	; 0x54
   15fb4:	ldr	sl, [sp, #88]	; 0x58
   15fb8:	bcs	15fec <__assert_fail@plt+0x47dc>
   15fbc:	ldrb	r6, [r2]
   15fc0:	cmp	r6, #0
   15fc4:	bne	15fd8 <__assert_fail@plt+0x47c8>
   15fc8:	b	16108 <__assert_fail@plt+0x48f8>
   15fcc:	ldrb	r6, [r2, #1]!
   15fd0:	cmp	r6, #0
   15fd4:	beq	16090 <__assert_fail@plt+0x4880>
   15fd8:	add	r3, r3, #1
   15fdc:	add	r1, r9, r3
   15fe0:	cmp	r1, r0
   15fe4:	bcc	15fcc <__assert_fail@plt+0x47bc>
   15fe8:	mov	ip, r3
   15fec:	ldr	r2, [sp, #28]
   15ff0:	mov	r6, #0
   15ff4:	b	15b30 <__assert_fail@plt+0x4320>
   15ff8:	mov	r3, #1
   15ffc:	str	r3, [sp, #40]	; 0x28
   16000:	str	r3, [sp, #32]
   16004:	str	r3, [sp, #28]
   16008:	str	r3, [sp, #52]	; 0x34
   1600c:	ldr	r3, [pc, #-2220]	; 15768 <__assert_fail@plt+0x3f58>
   16010:	mov	r2, #0
   16014:	str	r2, [sp, #68]	; 0x44
   16018:	str	r2, [sp, #44]	; 0x2c
   1601c:	str	r2, [sp, #72]	; 0x48
   16020:	mov	r4, r2
   16024:	str	r3, [sp, #60]	; 0x3c
   16028:	b	14a50 <__assert_fail@plt+0x3240>
   1602c:	str	fp, [sp, #160]	; 0xa0
   16030:	mov	fp, r8
   16034:	ldr	r8, [sp, #160]	; 0xa0
   16038:	b	15200 <__assert_fail@plt+0x39f0>
   1603c:	mov	r2, r3
   16040:	ldr	r3, [sp, #60]	; 0x3c
   16044:	cmp	r3, #0
   16048:	moveq	r2, #0
   1604c:	andne	r2, r2, #1
   16050:	cmp	r2, #0
   16054:	beq	16080 <__assert_fail@plt+0x4870>
   16058:	mov	r2, r3
   1605c:	ldrb	r3, [r3]
   16060:	cmp	r3, #0
   16064:	beq	16080 <__assert_fail@plt+0x4870>
   16068:	cmp	sl, r4
   1606c:	strbhi	r3, [fp, r4]
   16070:	ldrb	r3, [r2, #1]!
   16074:	add	r4, r4, #1
   16078:	cmp	r3, #0
   1607c:	bne	16068 <__assert_fail@plt+0x4858>
   16080:	cmp	sl, r4
   16084:	movhi	r3, #0
   16088:	strbhi	r3, [fp, r4]
   1608c:	b	15240 <__assert_fail@plt+0x3a30>
   16090:	mov	ip, r3
   16094:	ldr	r2, [sp, #28]
   16098:	b	15b30 <__assert_fail@plt+0x4320>
   1609c:	str	fp, [sp, #160]	; 0xa0
   160a0:	mov	fp, r8
   160a4:	ldr	r8, [sp, #160]	; 0xa0
   160a8:	sub	r3, r8, #2
   160ac:	clz	r3, r3
   160b0:	lsr	r3, r3, #5
   160b4:	str	r3, [sp, #28]
   160b8:	b	151f4 <__assert_fail@plt+0x39e4>
   160bc:	ldr	r3, [sp, #76]	; 0x4c
   160c0:	mov	ip, #5
   160c4:	str	r3, [sp, #16]
   160c8:	ldr	r3, [sp, #80]	; 0x50
   160cc:	ldr	r2, [sp, #36]	; 0x24
   160d0:	str	r3, [sp, #12]
   160d4:	ldr	r3, [sp, #56]	; 0x38
   160d8:	ldr	r1, [sp, #72]	; 0x48
   160dc:	str	r3, [sp, #8]
   160e0:	ldr	r3, [sp, #164]	; 0xa4
   160e4:	mov	r0, fp
   160e8:	str	r3, [sp, #4]
   160ec:	str	ip, [sp]
   160f0:	ldr	r3, [sp, #24]
   160f4:	bl	14958 <__assert_fail@plt+0x3148>
   160f8:	mov	r4, r0
   160fc:	b	15240 <__assert_fail@plt+0x3a30>
   16100:	mov	r8, #2
   16104:	b	151f4 <__assert_fail@plt+0x39e4>
   16108:	ldr	r2, [sp, #28]
   1610c:	b	15b30 <__assert_fail@plt+0x4320>
   16110:	mov	r3, #0
   16114:	str	r3, [sp, #68]	; 0x44
   16118:	str	r3, [sp, #44]	; 0x2c
   1611c:	str	r3, [sp, #72]	; 0x48
   16120:	str	r3, [sp, #28]
   16124:	mov	r4, r3
   16128:	ldr	r3, [pc, #-2500]	; 1576c <__assert_fail@plt+0x3f5c>
   1612c:	mov	r2, #1
   16130:	str	r2, [sp, #40]	; 0x28
   16134:	str	r2, [sp, #32]
   16138:	str	r2, [sp, #52]	; 0x34
   1613c:	str	r3, [sp, #60]	; 0x3c
   16140:	b	14a50 <__assert_fail@plt+0x3240>
   16144:	bl	114f8 <__stack_chk_fail@plt>
   16148:	mov	r5, r3
   1614c:	mov	r6, #0
   16150:	b	14f44 <__assert_fail@plt+0x3734>
   16154:	mov	r3, #0
   16158:	mov	r2, #1
   1615c:	str	r3, [sp, #44]	; 0x2c
   16160:	str	r3, [sp, #72]	; 0x48
   16164:	str	r2, [sp, #40]	; 0x28
   16168:	b	15060 <__assert_fail@plt+0x3850>
   1616c:	bl	117bc <abort@plt>
   16170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16174:	sub	sp, sp, #44	; 0x2c
   16178:	mov	r6, r0
   1617c:	mov	r4, r3
   16180:	mov	sl, r1
   16184:	mov	fp, r2
   16188:	bl	11678 <__errno_location@plt>
   1618c:	ldr	r7, [pc, #364]	; 16300 <__assert_fail@plt+0x4af0>
   16190:	cmp	r6, #0
   16194:	ldr	r5, [r7]
   16198:	ldr	r3, [r0]
   1619c:	str	r3, [sp, #24]
   161a0:	blt	162fc <__assert_fail@plt+0x4aec>
   161a4:	ldr	r3, [r7, #4]
   161a8:	mov	r8, r0
   161ac:	cmp	r3, r6
   161b0:	bgt	161fc <__assert_fail@plt+0x49ec>
   161b4:	cmn	r6, #-268435454	; 0xf0000002
   161b8:	bgt	162f8 <__assert_fail@plt+0x4ae8>
   161bc:	add	r9, r6, #1
   161c0:	add	r3, r7, #8
   161c4:	cmp	r5, r3
   161c8:	lsl	r1, r9, #3
   161cc:	beq	162d8 <__assert_fail@plt+0x4ac8>
   161d0:	mov	r0, r5
   161d4:	bl	170f0 <__assert_fail@plt+0x58e0>
   161d8:	mov	r5, r0
   161dc:	str	r0, [r7]
   161e0:	ldr	r0, [r7, #4]
   161e4:	mov	r1, #0
   161e8:	sub	r2, r9, r0
   161ec:	add	r0, r5, r0, lsl #3
   161f0:	lsl	r2, r2, #3
   161f4:	bl	11690 <memset@plt>
   161f8:	str	r9, [r7, #4]
   161fc:	add	r3, r5, r6, lsl #3
   16200:	ldr	r1, [r4, #4]
   16204:	ldr	r7, [r3, #4]
   16208:	ldr	r9, [r5, r6, lsl #3]
   1620c:	ldr	r2, [r4, #40]	; 0x28
   16210:	ldr	ip, [r4, #44]	; 0x2c
   16214:	str	r3, [sp, #28]
   16218:	ldr	r3, [r4]
   1621c:	orr	r1, r1, #1
   16220:	add	lr, r4, #8
   16224:	str	r1, [sp, #36]	; 0x24
   16228:	str	r1, [sp, #4]
   1622c:	str	r2, [sp, #12]
   16230:	str	r3, [sp]
   16234:	mov	r0, r7
   16238:	mov	r1, r9
   1623c:	str	ip, [sp, #16]
   16240:	str	lr, [sp, #8]
   16244:	mov	r3, fp
   16248:	mov	r2, sl
   1624c:	str	lr, [sp, #32]
   16250:	bl	14958 <__assert_fail@plt+0x3148>
   16254:	cmp	r9, r0
   16258:	bhi	162c4 <__assert_fail@plt+0x4ab4>
   1625c:	ldr	r3, [pc, #160]	; 16304 <__assert_fail@plt+0x4af4>
   16260:	add	r9, r0, #1
   16264:	cmp	r7, r3
   16268:	str	r9, [r5, r6, lsl #3]
   1626c:	beq	16278 <__assert_fail@plt+0x4a68>
   16270:	mov	r0, r7
   16274:	bl	114a4 <free@plt>
   16278:	mov	r0, r9
   1627c:	bl	17094 <__assert_fail@plt+0x5884>
   16280:	ldr	lr, [sp, #28]
   16284:	ldr	ip, [r4, #44]	; 0x2c
   16288:	ldr	r5, [r4, #40]	; 0x28
   1628c:	mov	r3, fp
   16290:	mov	r2, sl
   16294:	mov	r1, r9
   16298:	str	r0, [lr, #4]
   1629c:	ldr	lr, [r4]
   162a0:	ldr	r4, [sp, #32]
   162a4:	str	ip, [sp, #16]
   162a8:	str	r4, [sp, #8]
   162ac:	ldr	r4, [sp, #36]	; 0x24
   162b0:	str	r5, [sp, #12]
   162b4:	str	r4, [sp, #4]
   162b8:	str	lr, [sp]
   162bc:	mov	r7, r0
   162c0:	bl	14958 <__assert_fail@plt+0x3148>
   162c4:	ldr	r3, [sp, #24]
   162c8:	mov	r0, r7
   162cc:	str	r3, [r8]
   162d0:	add	sp, sp, #44	; 0x2c
   162d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162d8:	mov	r0, #0
   162dc:	bl	170f0 <__assert_fail@plt+0x58e0>
   162e0:	ldr	r3, [pc, #32]	; 16308 <__assert_fail@plt+0x4af8>
   162e4:	mov	r5, r0
   162e8:	ldm	r3, {r0, r1}
   162ec:	str	r5, [r7]
   162f0:	stm	r5, {r0, r1}
   162f4:	b	161e0 <__assert_fail@plt+0x49d0>
   162f8:	bl	172dc <__assert_fail@plt+0x5acc>
   162fc:	bl	117bc <abort@plt>
   16300:	andeq	fp, r2, r0, ror r1
   16304:	ldrdeq	fp, [r2], -ip
   16308:	andeq	fp, r2, r8, ror r1
   1630c:	push	{r4, r5, r6, lr}
   16310:	mov	r5, r0
   16314:	bl	11678 <__errno_location@plt>
   16318:	cmp	r5, #0
   1631c:	mov	r1, #48	; 0x30
   16320:	mov	r4, r0
   16324:	ldr	r0, [pc, #16]	; 1633c <__assert_fail@plt+0x4b2c>
   16328:	ldr	r6, [r4]
   1632c:	movne	r0, r5
   16330:	bl	1729c <__assert_fail@plt+0x5a8c>
   16334:	str	r6, [r4]
   16338:	pop	{r4, r5, r6, pc}
   1633c:	ldrdeq	fp, [r2], -ip
   16340:	ldr	r3, [pc, #12]	; 16354 <__assert_fail@plt+0x4b44>
   16344:	cmp	r0, #0
   16348:	moveq	r0, r3
   1634c:	ldr	r0, [r0]
   16350:	bx	lr
   16354:	ldrdeq	fp, [r2], -ip
   16358:	ldr	r3, [pc, #12]	; 1636c <__assert_fail@plt+0x4b5c>
   1635c:	cmp	r0, #0
   16360:	moveq	r0, r3
   16364:	str	r1, [r0]
   16368:	bx	lr
   1636c:	ldrdeq	fp, [r2], -ip
   16370:	ldr	r3, [pc, #52]	; 163ac <__assert_fail@plt+0x4b9c>
   16374:	cmp	r0, #0
   16378:	moveq	r0, r3
   1637c:	add	r3, r0, #8
   16380:	push	{lr}		; (str lr, [sp, #-4]!)
   16384:	lsr	lr, r1, #5
   16388:	and	r1, r1, #31
   1638c:	ldr	ip, [r3, lr, lsl #2]
   16390:	lsr	r0, ip, r1
   16394:	eor	r2, r2, r0
   16398:	and	r2, r2, #1
   1639c:	and	r0, r0, #1
   163a0:	eor	r1, ip, r2, lsl r1
   163a4:	str	r1, [r3, lr, lsl #2]
   163a8:	pop	{pc}		; (ldr pc, [sp], #4)
   163ac:	ldrdeq	fp, [r2], -ip
   163b0:	ldr	r3, [pc, #16]	; 163c8 <__assert_fail@plt+0x4bb8>
   163b4:	cmp	r0, #0
   163b8:	movne	r3, r0
   163bc:	ldr	r0, [r3, #4]
   163c0:	str	r1, [r3, #4]
   163c4:	bx	lr
   163c8:	ldrdeq	fp, [r2], -ip
   163cc:	ldr	r3, [pc, #44]	; 16400 <__assert_fail@plt+0x4bf0>
   163d0:	cmp	r0, #0
   163d4:	moveq	r0, r3
   163d8:	mov	ip, #10
   163dc:	cmp	r2, #0
   163e0:	cmpne	r1, #0
   163e4:	str	ip, [r0]
   163e8:	beq	163f8 <__assert_fail@plt+0x4be8>
   163ec:	str	r1, [r0, #40]	; 0x28
   163f0:	str	r2, [r0, #44]	; 0x2c
   163f4:	bx	lr
   163f8:	push	{r4, lr}
   163fc:	bl	117bc <abort@plt>
   16400:	ldrdeq	fp, [r2], -ip
   16404:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16408:	sub	sp, sp, #24
   1640c:	ldr	ip, [pc, #108]	; 16480 <__assert_fail@plt+0x4c70>
   16410:	ldr	r4, [sp, #56]	; 0x38
   16414:	mov	r9, r2
   16418:	cmp	r4, #0
   1641c:	moveq	r4, ip
   16420:	mov	sl, r3
   16424:	mov	r7, r0
   16428:	mov	r8, r1
   1642c:	bl	11678 <__errno_location@plt>
   16430:	ldr	r3, [r4, #44]	; 0x2c
   16434:	mov	r1, r8
   16438:	ldr	r6, [r0]
   1643c:	str	r3, [sp, #16]
   16440:	ldr	r2, [r4, #40]	; 0x28
   16444:	add	r3, r4, #8
   16448:	str	r3, [sp, #8]
   1644c:	str	r2, [sp, #12]
   16450:	ldr	r2, [r4, #4]
   16454:	mov	r5, r0
   16458:	str	r2, [sp, #4]
   1645c:	ldr	ip, [r4]
   16460:	mov	r3, sl
   16464:	mov	r2, r9
   16468:	mov	r0, r7
   1646c:	str	ip, [sp]
   16470:	bl	14958 <__assert_fail@plt+0x3148>
   16474:	str	r6, [r5]
   16478:	add	sp, sp, #24
   1647c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16480:	ldrdeq	fp, [r2], -ip
   16484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16488:	cmp	r3, #0
   1648c:	sub	sp, sp, #44	; 0x2c
   16490:	ldr	r4, [pc, #192]	; 16558 <__assert_fail@plt+0x4d48>
   16494:	mov	r6, r2
   16498:	movne	r4, r3
   1649c:	mov	r9, r1
   164a0:	mov	r8, r0
   164a4:	bl	11678 <__errno_location@plt>
   164a8:	ldr	r3, [r4, #44]	; 0x2c
   164ac:	ldr	r5, [r4, #4]
   164b0:	add	sl, r4, #8
   164b4:	cmp	r6, #0
   164b8:	orreq	r5, r5, #1
   164bc:	mov	r1, #0
   164c0:	ldr	r2, [r0]
   164c4:	str	r3, [sp, #16]
   164c8:	ldr	r3, [r4, #40]	; 0x28
   164cc:	stmib	sp, {r5, sl}
   164d0:	str	r3, [sp, #12]
   164d4:	ldr	r3, [r4]
   164d8:	mov	r7, r0
   164dc:	str	r2, [sp, #28]
   164e0:	str	r3, [sp]
   164e4:	mov	r2, r8
   164e8:	mov	r3, r9
   164ec:	mov	r0, r1
   164f0:	bl	14958 <__assert_fail@plt+0x3148>
   164f4:	add	r1, r0, #1
   164f8:	mov	fp, r0
   164fc:	mov	r0, r1
   16500:	str	r1, [sp, #36]	; 0x24
   16504:	bl	17094 <__assert_fail@plt+0x5884>
   16508:	ldr	r3, [r4, #44]	; 0x2c
   1650c:	mov	r2, r8
   16510:	str	r3, [sp, #16]
   16514:	ldr	r3, [r4, #40]	; 0x28
   16518:	str	r5, [sp, #4]
   1651c:	str	r3, [sp, #12]
   16520:	str	sl, [sp, #8]
   16524:	ldr	ip, [r4]
   16528:	ldr	r1, [sp, #36]	; 0x24
   1652c:	mov	r3, r9
   16530:	str	ip, [sp]
   16534:	str	r0, [sp, #32]
   16538:	bl	14958 <__assert_fail@plt+0x3148>
   1653c:	ldr	r2, [sp, #28]
   16540:	cmp	r6, #0
   16544:	str	r2, [r7]
   16548:	ldr	r0, [sp, #32]
   1654c:	strne	fp, [r6]
   16550:	add	sp, sp, #44	; 0x2c
   16554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16558:	ldrdeq	fp, [r2], -ip
   1655c:	mov	r3, r2
   16560:	mov	r2, #0
   16564:	b	16484 <__assert_fail@plt+0x4c74>
   16568:	push	{r4, r5, r6, r7, r8, lr}
   1656c:	ldr	r6, [pc, #112]	; 165e4 <__assert_fail@plt+0x4dd4>
   16570:	ldr	r3, [r6, #4]
   16574:	ldr	r7, [r6]
   16578:	cmp	r3, #1
   1657c:	ble	165a0 <__assert_fail@plt+0x4d90>
   16580:	sub	r5, r7, #8
   16584:	add	r5, r5, r3, lsl #3
   16588:	mov	r4, r7
   1658c:	ldr	r0, [r4, #12]
   16590:	add	r4, r4, #8
   16594:	bl	114a4 <free@plt>
   16598:	cmp	r4, r5
   1659c:	bne	1658c <__assert_fail@plt+0x4d7c>
   165a0:	ldr	r0, [r7, #4]
   165a4:	ldr	r4, [pc, #60]	; 165e8 <__assert_fail@plt+0x4dd8>
   165a8:	cmp	r0, r4
   165ac:	beq	165c0 <__assert_fail@plt+0x4db0>
   165b0:	bl	114a4 <free@plt>
   165b4:	mov	r3, #256	; 0x100
   165b8:	str	r4, [r6, #12]
   165bc:	str	r3, [r6, #8]
   165c0:	ldr	r4, [pc, #36]	; 165ec <__assert_fail@plt+0x4ddc>
   165c4:	cmp	r7, r4
   165c8:	beq	165d8 <__assert_fail@plt+0x4dc8>
   165cc:	mov	r0, r7
   165d0:	bl	114a4 <free@plt>
   165d4:	str	r4, [r6]
   165d8:	mov	r3, #1
   165dc:	str	r3, [r6, #4]
   165e0:	pop	{r4, r5, r6, r7, r8, pc}
   165e4:	andeq	fp, r2, r0, ror r1
   165e8:	ldrdeq	fp, [r2], -ip
   165ec:	andeq	fp, r2, r8, ror r1
   165f0:	ldr	r3, [pc, #4]	; 165fc <__assert_fail@plt+0x4dec>
   165f4:	mvn	r2, #0
   165f8:	b	16170 <__assert_fail@plt+0x4960>
   165fc:	ldrdeq	fp, [r2], -ip
   16600:	ldr	r3, [pc]	; 16608 <__assert_fail@plt+0x4df8>
   16604:	b	16170 <__assert_fail@plt+0x4960>
   16608:	ldrdeq	fp, [r2], -ip
   1660c:	mov	r1, r0
   16610:	ldr	r3, [pc, #8]	; 16620 <__assert_fail@plt+0x4e10>
   16614:	mvn	r2, #0
   16618:	mov	r0, #0
   1661c:	b	16170 <__assert_fail@plt+0x4960>
   16620:	ldrdeq	fp, [r2], -ip
   16624:	mov	r2, r1
   16628:	ldr	r3, [pc, #8]	; 16638 <__assert_fail@plt+0x4e28>
   1662c:	mov	r1, r0
   16630:	mov	r0, #0
   16634:	b	16170 <__assert_fail@plt+0x4960>
   16638:	ldrdeq	fp, [r2], -ip
   1663c:	push	{r4, r5, r6, lr}
   16640:	sub	sp, sp, #56	; 0x38
   16644:	ldr	r4, [pc, #68]	; 16690 <__assert_fail@plt+0x4e80>
   16648:	mov	r6, r2
   1664c:	mov	r5, r0
   16650:	ldr	r3, [r4]
   16654:	add	r0, sp, #4
   16658:	str	r3, [sp, #52]	; 0x34
   1665c:	bl	147e8 <__assert_fail@plt+0x2fd8>
   16660:	add	r3, sp, #4
   16664:	mvn	r2, #0
   16668:	mov	r1, r6
   1666c:	mov	r0, r5
   16670:	bl	16170 <__assert_fail@plt+0x4960>
   16674:	ldr	r2, [sp, #52]	; 0x34
   16678:	ldr	r3, [r4]
   1667c:	cmp	r2, r3
   16680:	bne	1668c <__assert_fail@plt+0x4e7c>
   16684:	add	sp, sp, #56	; 0x38
   16688:	pop	{r4, r5, r6, pc}
   1668c:	bl	114f8 <__stack_chk_fail@plt>
   16690:	andeq	sl, r2, r0, lsl #30
   16694:	push	{r4, r5, r6, r7, lr}
   16698:	sub	sp, sp, #60	; 0x3c
   1669c:	ldr	r4, [pc, #72]	; 166ec <__assert_fail@plt+0x4edc>
   166a0:	mov	r6, r2
   166a4:	mov	r7, r3
   166a8:	ldr	ip, [r4]
   166ac:	mov	r5, r0
   166b0:	add	r0, sp, #4
   166b4:	str	ip, [sp, #52]	; 0x34
   166b8:	bl	147e8 <__assert_fail@plt+0x2fd8>
   166bc:	add	r3, sp, #4
   166c0:	mov	r2, r7
   166c4:	mov	r1, r6
   166c8:	mov	r0, r5
   166cc:	bl	16170 <__assert_fail@plt+0x4960>
   166d0:	ldr	r2, [sp, #52]	; 0x34
   166d4:	ldr	r3, [r4]
   166d8:	cmp	r2, r3
   166dc:	bne	166e8 <__assert_fail@plt+0x4ed8>
   166e0:	add	sp, sp, #60	; 0x3c
   166e4:	pop	{r4, r5, r6, r7, pc}
   166e8:	bl	114f8 <__stack_chk_fail@plt>
   166ec:	andeq	sl, r2, r0, lsl #30
   166f0:	mov	r2, r1
   166f4:	mov	r1, r0
   166f8:	mov	r0, #0
   166fc:	b	1663c <__assert_fail@plt+0x4e2c>
   16700:	mov	r3, r2
   16704:	mov	r2, r1
   16708:	mov	r1, r0
   1670c:	mov	r0, #0
   16710:	b	16694 <__assert_fail@plt+0x4e84>
   16714:	push	{r4, r5, r6, r7, r8, r9, lr}
   16718:	mov	r4, r2
   1671c:	ldr	lr, [pc, #128]	; 167a4 <__assert_fail@plt+0x4f94>
   16720:	mov	r8, r0
   16724:	mov	r9, r1
   16728:	ldm	lr!, {r0, r1, r2, r3}
   1672c:	sub	sp, sp, #60	; 0x3c
   16730:	add	ip, sp, #4
   16734:	lsr	r6, r4, #5
   16738:	stmia	ip!, {r0, r1, r2, r3}
   1673c:	add	r7, sp, #12
   16740:	ldm	lr!, {r0, r1, r2, r3}
   16744:	and	r4, r4, #31
   16748:	ldr	r5, [pc, #88]	; 167a8 <__assert_fail@plt+0x4f98>
   1674c:	stmia	ip!, {r0, r1, r2, r3}
   16750:	ldm	lr, {r0, r1, r2, r3}
   16754:	stm	ip, {r0, r1, r2, r3}
   16758:	mov	r2, r9
   1675c:	ldr	r3, [r7, r6, lsl #2]
   16760:	ldr	ip, [r5]
   16764:	mov	r1, r8
   16768:	mvn	r0, r3, lsr r4
   1676c:	and	r0, r0, #1
   16770:	str	ip, [sp, #52]	; 0x34
   16774:	eor	r4, r3, r0, lsl r4
   16778:	add	r3, sp, #4
   1677c:	mov	r0, #0
   16780:	str	r4, [r7, r6, lsl #2]
   16784:	bl	16170 <__assert_fail@plt+0x4960>
   16788:	ldr	r2, [sp, #52]	; 0x34
   1678c:	ldr	r3, [r5]
   16790:	cmp	r2, r3
   16794:	bne	167a0 <__assert_fail@plt+0x4f90>
   16798:	add	sp, sp, #60	; 0x3c
   1679c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   167a0:	bl	114f8 <__stack_chk_fail@plt>
   167a4:	ldrdeq	fp, [r2], -ip
   167a8:	andeq	sl, r2, r0, lsl #30
   167ac:	mov	r2, r1
   167b0:	mvn	r1, #0
   167b4:	b	16714 <__assert_fail@plt+0x4f04>
   167b8:	mov	r2, #58	; 0x3a
   167bc:	mvn	r1, #0
   167c0:	b	16714 <__assert_fail@plt+0x4f04>
   167c4:	mov	r2, #58	; 0x3a
   167c8:	b	16714 <__assert_fail@plt+0x4f04>
   167cc:	push	{r4, r5, r6, r7, r8, lr}
   167d0:	sub	sp, sp, #104	; 0x68
   167d4:	ldr	r5, [pc, #120]	; 16854 <__assert_fail@plt+0x5044>
   167d8:	mov	r6, r0
   167dc:	mov	r0, sp
   167e0:	ldr	r3, [r5]
   167e4:	mov	r7, r2
   167e8:	str	r3, [sp, #100]	; 0x64
   167ec:	bl	147e8 <__assert_fail@plt+0x2fd8>
   167f0:	mov	ip, sp
   167f4:	add	lr, sp, #52	; 0x34
   167f8:	ldm	ip!, {r0, r1, r2, r3}
   167fc:	stmia	lr!, {r0, r1, r2, r3}
   16800:	ldm	ip!, {r0, r1, r2, r3}
   16804:	ldr	r8, [sp, #64]	; 0x40
   16808:	stmia	lr!, {r0, r1, r2, r3}
   1680c:	mvn	r4, r8
   16810:	ldm	ip, {r0, r1, r2, r3}
   16814:	and	ip, r4, #67108864	; 0x4000000
   16818:	eor	ip, ip, r8
   1681c:	str	ip, [sp, #64]	; 0x40
   16820:	stm	lr, {r0, r1, r2, r3}
   16824:	add	r3, sp, #52	; 0x34
   16828:	mvn	r2, #0
   1682c:	mov	r1, r7
   16830:	mov	r0, r6
   16834:	bl	16170 <__assert_fail@plt+0x4960>
   16838:	ldr	r2, [sp, #100]	; 0x64
   1683c:	ldr	r3, [r5]
   16840:	cmp	r2, r3
   16844:	bne	16850 <__assert_fail@plt+0x5040>
   16848:	add	sp, sp, #104	; 0x68
   1684c:	pop	{r4, r5, r6, r7, r8, pc}
   16850:	bl	114f8 <__stack_chk_fail@plt>
   16854:	andeq	sl, r2, r0, lsl #30
   16858:	push	{r4, r5, r6, r7, r8, r9, lr}
   1685c:	mov	r6, r1
   16860:	ldr	lr, [pc, #132]	; 168ec <__assert_fail@plt+0x50dc>
   16864:	mov	r5, r2
   16868:	mov	r8, r0
   1686c:	mov	r9, r3
   16870:	ldm	lr!, {r0, r1, r2, r3}
   16874:	sub	sp, sp, #60	; 0x3c
   16878:	add	ip, sp, #4
   1687c:	ldr	r4, [pc, #108]	; 168f0 <__assert_fail@plt+0x50e0>
   16880:	stmia	ip!, {r0, r1, r2, r3}
   16884:	mov	r7, #10
   16888:	ldm	lr!, {r0, r1, r2, r3}
   1688c:	cmp	r5, #0
   16890:	cmpne	r6, #0
   16894:	str	r7, [sp, #4]
   16898:	stmia	ip!, {r0, r1, r2, r3}
   1689c:	ldm	lr, {r0, r1, r2, r3}
   168a0:	ldr	lr, [r4]
   168a4:	stm	ip, {r0, r1, r2, r3}
   168a8:	str	lr, [sp, #52]	; 0x34
   168ac:	beq	168e8 <__assert_fail@plt+0x50d8>
   168b0:	add	r3, sp, #4
   168b4:	ldr	r2, [sp, #88]	; 0x58
   168b8:	mov	r1, r9
   168bc:	mov	r0, r8
   168c0:	str	r6, [sp, #44]	; 0x2c
   168c4:	str	r5, [sp, #48]	; 0x30
   168c8:	bl	16170 <__assert_fail@plt+0x4960>
   168cc:	ldr	r2, [sp, #52]	; 0x34
   168d0:	ldr	r3, [r4]
   168d4:	cmp	r2, r3
   168d8:	bne	168e4 <__assert_fail@plt+0x50d4>
   168dc:	add	sp, sp, #60	; 0x3c
   168e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   168e4:	bl	114f8 <__stack_chk_fail@plt>
   168e8:	bl	117bc <abort@plt>
   168ec:	ldrdeq	fp, [r2], -ip
   168f0:	andeq	sl, r2, r0, lsl #30
   168f4:	push	{lr}		; (str lr, [sp, #-4]!)
   168f8:	sub	sp, sp, #12
   168fc:	mvn	ip, #0
   16900:	str	ip, [sp]
   16904:	bl	16858 <__assert_fail@plt+0x5048>
   16908:	add	sp, sp, #12
   1690c:	pop	{pc}		; (ldr pc, [sp], #4)
   16910:	push	{lr}		; (str lr, [sp, #-4]!)
   16914:	sub	sp, sp, #12
   16918:	mvn	ip, #0
   1691c:	mov	r3, r2
   16920:	str	ip, [sp]
   16924:	mov	r2, r1
   16928:	mov	r1, r0
   1692c:	mov	r0, #0
   16930:	bl	16858 <__assert_fail@plt+0x5048>
   16934:	add	sp, sp, #12
   16938:	pop	{pc}		; (ldr pc, [sp], #4)
   1693c:	push	{lr}		; (str lr, [sp, #-4]!)
   16940:	sub	sp, sp, #12
   16944:	str	r3, [sp]
   16948:	mov	r3, r2
   1694c:	mov	r2, r1
   16950:	mov	r1, r0
   16954:	mov	r0, #0
   16958:	bl	16858 <__assert_fail@plt+0x5048>
   1695c:	add	sp, sp, #12
   16960:	pop	{pc}		; (ldr pc, [sp], #4)
   16964:	ldr	r3, [pc]	; 1696c <__assert_fail@plt+0x515c>
   16968:	b	16170 <__assert_fail@plt+0x4960>
   1696c:	andeq	fp, r2, r0, lsl #3
   16970:	mov	r2, r1
   16974:	ldr	r3, [pc, #8]	; 16984 <__assert_fail@plt+0x5174>
   16978:	mov	r1, r0
   1697c:	mov	r0, #0
   16980:	b	16170 <__assert_fail@plt+0x4960>
   16984:	andeq	fp, r2, r0, lsl #3
   16988:	ldr	r3, [pc, #4]	; 16994 <__assert_fail@plt+0x5184>
   1698c:	mvn	r2, #0
   16990:	b	16170 <__assert_fail@plt+0x4960>
   16994:	andeq	fp, r2, r0, lsl #3
   16998:	mov	r1, r0
   1699c:	ldr	r3, [pc, #8]	; 169ac <__assert_fail@plt+0x519c>
   169a0:	mvn	r2, #0
   169a4:	mov	r0, #0
   169a8:	b	16170 <__assert_fail@plt+0x4960>
   169ac:	andeq	fp, r2, r0, lsl #3
   169b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169b4:	mov	r9, r1
   169b8:	ldr	r4, [pc, #352]	; 16b20 <__assert_fail@plt+0x5310>
   169bc:	sub	sp, sp, #228	; 0xe4
   169c0:	mov	fp, r0
   169c4:	ldr	r1, [r4]
   169c8:	mov	r0, r9
   169cc:	mov	r8, r3
   169d0:	mov	sl, r2
   169d4:	str	r1, [sp, #220]	; 0xdc
   169d8:	bl	12e58 <__assert_fail@plt+0x1648>
   169dc:	mov	r5, r0
   169e0:	mov	r0, r8
   169e4:	bl	12e58 <__assert_fail@plt+0x1648>
   169e8:	mov	r6, r0
   169ec:	mov	r0, r5
   169f0:	bl	12ea8 <__assert_fail@plt+0x1698>
   169f4:	mov	r7, r0
   169f8:	mov	r0, r6
   169fc:	bl	12ea8 <__assert_fail@plt+0x1698>
   16a00:	cmp	r7, r0
   16a04:	beq	16a28 <__assert_fail@plt+0x5218>
   16a08:	mov	r6, #0
   16a0c:	ldr	r2, [sp, #220]	; 0xdc
   16a10:	ldr	r3, [r4]
   16a14:	mov	r0, r6
   16a18:	cmp	r2, r3
   16a1c:	bne	16b1c <__assert_fail@plt+0x530c>
   16a20:	add	sp, sp, #228	; 0xe4
   16a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a28:	mov	r2, r7
   16a2c:	mov	r1, r6
   16a30:	mov	r0, r5
   16a34:	bl	114e0 <memcmp@plt>
   16a38:	cmp	r0, #0
   16a3c:	bne	16a08 <__assert_fail@plt+0x51f8>
   16a40:	mov	r0, r9
   16a44:	bl	12d84 <__assert_fail@plt+0x1574>
   16a48:	mov	r3, #256	; 0x100
   16a4c:	str	r3, [sp]
   16a50:	mov	r1, fp
   16a54:	add	r3, sp, #8
   16a58:	mov	r2, r0
   16a5c:	mov	r5, r0
   16a60:	mov	r0, #3
   16a64:	bl	11534 <__fxstatat64@plt>
   16a68:	cmp	r0, #0
   16a6c:	bne	16b00 <__assert_fail@plt+0x52f0>
   16a70:	mov	r0, r5
   16a74:	bl	114a4 <free@plt>
   16a78:	mov	r0, r8
   16a7c:	bl	12d84 <__assert_fail@plt+0x1574>
   16a80:	mov	r3, #256	; 0x100
   16a84:	str	r3, [sp]
   16a88:	mov	r1, sl
   16a8c:	add	r3, sp, #112	; 0x70
   16a90:	mov	r2, r0
   16a94:	mov	r5, r0
   16a98:	mov	r0, #3
   16a9c:	bl	11534 <__fxstatat64@plt>
   16aa0:	cmp	r0, #0
   16aa4:	bne	16ae4 <__assert_fail@plt+0x52d4>
   16aa8:	ldrd	r0, [sp, #104]	; 0x68
   16aac:	ldrd	r2, [sp, #208]	; 0xd0
   16ab0:	cmp	r1, r3
   16ab4:	cmpeq	r0, r2
   16ab8:	movne	r6, #0
   16abc:	bne	16ad8 <__assert_fail@plt+0x52c8>
   16ac0:	ldrd	r0, [sp, #8]
   16ac4:	ldrd	r2, [sp, #112]	; 0x70
   16ac8:	cmp	r1, r3
   16acc:	cmpeq	r0, r2
   16ad0:	moveq	r6, #1
   16ad4:	movne	r6, #0
   16ad8:	mov	r0, r5
   16adc:	bl	114a4 <free@plt>
   16ae0:	b	16a0c <__assert_fail@plt+0x51fc>
   16ae4:	bl	11678 <__errno_location@plt>
   16ae8:	mov	r3, r5
   16aec:	ldr	r2, [pc, #48]	; 16b24 <__assert_fail@plt+0x5314>
   16af0:	ldr	r1, [r0]
   16af4:	mov	r0, #1
   16af8:	bl	115b8 <error@plt>
   16afc:	b	16aa8 <__assert_fail@plt+0x5298>
   16b00:	bl	11678 <__errno_location@plt>
   16b04:	mov	r3, r5
   16b08:	ldr	r2, [pc, #20]	; 16b24 <__assert_fail@plt+0x5314>
   16b0c:	ldr	r1, [r0]
   16b10:	mov	r0, #1
   16b14:	bl	115b8 <error@plt>
   16b18:	b	16a70 <__assert_fail@plt+0x5260>
   16b1c:	bl	114f8 <__stack_chk_fail@plt>
   16b20:	andeq	sl, r2, r0, lsl #30
   16b24:	andeq	sl, r1, r4, asr r9
   16b28:	mvn	r2, #99	; 0x63
   16b2c:	mov	r3, r1
   16b30:	mov	r1, r0
   16b34:	mov	r0, r2
   16b38:	b	169b0 <__assert_fail@plt+0x51a0>
   16b3c:	push	{r4, r5, r6, lr}
   16b40:	sub	sp, sp, #32
   16b44:	cmp	r1, #0
   16b48:	mov	r5, r0
   16b4c:	ldr	r4, [sp, #48]	; 0x30
   16b50:	ldr	r6, [sp, #52]	; 0x34
   16b54:	beq	16be4 <__assert_fail@plt+0x53d4>
   16b58:	strd	r2, [sp]
   16b5c:	mov	r3, r1
   16b60:	ldr	r2, [pc, #828]	; 16ea4 <__assert_fail@plt+0x5694>
   16b64:	mov	r1, #1
   16b68:	bl	116b4 <__fprintf_chk@plt>
   16b6c:	mov	r2, #5
   16b70:	ldr	r1, [pc, #816]	; 16ea8 <__assert_fail@plt+0x5698>
   16b74:	mov	r0, #0
   16b78:	bl	114ec <dcgettext@plt>
   16b7c:	ldr	r3, [pc, #808]	; 16eac <__assert_fail@plt+0x569c>
   16b80:	ldr	r2, [pc, #808]	; 16eb0 <__assert_fail@plt+0x56a0>
   16b84:	str	r3, [sp]
   16b88:	mov	r1, #1
   16b8c:	mov	r3, r0
   16b90:	mov	r0, r5
   16b94:	bl	116b4 <__fprintf_chk@plt>
   16b98:	ldr	r1, [pc, #788]	; 16eb4 <__assert_fail@plt+0x56a4>
   16b9c:	mov	r2, #5
   16ba0:	mov	r0, #0
   16ba4:	bl	114ec <dcgettext@plt>
   16ba8:	mov	r1, r5
   16bac:	bl	11444 <fputs_unlocked@plt>
   16bb0:	cmp	r6, #9
   16bb4:	ldrls	pc, [pc, r6, lsl #2]
   16bb8:	b	16e94 <__assert_fail@plt+0x5684>
   16bbc:	andeq	r6, r1, r0, lsr #29
   16bc0:	andeq	r6, r1, r8, ror #24
   16bc4:	muleq	r1, r4, ip
   16bc8:	andeq	r6, r1, r8, asr #25
   16bcc:	andeq	r6, r1, r4, lsl #26
   16bd0:	andeq	r6, r1, r4, asr #26
   16bd4:	andeq	r6, r1, ip, lsl #27
   16bd8:	ldrdeq	r6, [r1], -ip
   16bdc:	andeq	r6, r1, r4, lsr lr
   16be0:	strdeq	r6, [r1], -ip
   16be4:	str	r3, [sp]
   16be8:	mov	r1, #1
   16bec:	mov	r3, r2
   16bf0:	ldr	r2, [pc, #704]	; 16eb8 <__assert_fail@plt+0x56a8>
   16bf4:	bl	116b4 <__fprintf_chk@plt>
   16bf8:	b	16b6c <__assert_fail@plt+0x535c>
   16bfc:	ldr	r1, [pc, #696]	; 16ebc <__assert_fail@plt+0x56ac>
   16c00:	mov	r2, #5
   16c04:	mov	r0, #0
   16c08:	bl	114ec <dcgettext@plt>
   16c0c:	ldr	r2, [r4, #32]
   16c10:	ldr	r3, [r4, #28]
   16c14:	ldr	r1, [r4, #24]
   16c18:	str	r2, [sp, #28]
   16c1c:	ldr	r2, [r4, #20]
   16c20:	str	r3, [sp, #24]
   16c24:	ldr	r3, [r4, #16]
   16c28:	str	r1, [sp, #20]
   16c2c:	ldr	r1, [r4, #12]
   16c30:	str	r2, [sp, #16]
   16c34:	ldr	r2, [r4, #8]
   16c38:	str	r3, [sp, #12]
   16c3c:	ldr	r3, [r4, #4]
   16c40:	str	r1, [sp, #8]
   16c44:	str	r2, [sp, #4]
   16c48:	str	r3, [sp]
   16c4c:	mov	r1, #1
   16c50:	ldr	r3, [r4]
   16c54:	mov	r2, r0
   16c58:	mov	r0, r5
   16c5c:	bl	116b4 <__fprintf_chk@plt>
   16c60:	add	sp, sp, #32
   16c64:	pop	{r4, r5, r6, pc}
   16c68:	mov	r2, #5
   16c6c:	ldr	r1, [pc, #588]	; 16ec0 <__assert_fail@plt+0x56b0>
   16c70:	mov	r0, #0
   16c74:	bl	114ec <dcgettext@plt>
   16c78:	ldr	r3, [r4]
   16c7c:	mov	r1, #1
   16c80:	mov	r2, r0
   16c84:	mov	r0, r5
   16c88:	add	sp, sp, #32
   16c8c:	pop	{r4, r5, r6, lr}
   16c90:	b	116b4 <__fprintf_chk@plt>
   16c94:	mov	r2, #5
   16c98:	ldr	r1, [pc, #548]	; 16ec4 <__assert_fail@plt+0x56b4>
   16c9c:	mov	r0, #0
   16ca0:	bl	114ec <dcgettext@plt>
   16ca4:	ldr	r2, [r4, #4]
   16ca8:	ldr	r3, [r4]
   16cac:	mov	r1, #1
   16cb0:	str	r2, [sp, #48]	; 0x30
   16cb4:	mov	r2, r0
   16cb8:	mov	r0, r5
   16cbc:	add	sp, sp, #32
   16cc0:	pop	{r4, r5, r6, lr}
   16cc4:	b	116b4 <__fprintf_chk@plt>
   16cc8:	mov	r2, #5
   16ccc:	ldr	r1, [pc, #500]	; 16ec8 <__assert_fail@plt+0x56b8>
   16cd0:	mov	r0, #0
   16cd4:	bl	114ec <dcgettext@plt>
   16cd8:	ldr	r2, [r4, #8]
   16cdc:	ldr	r3, [r4, #4]
   16ce0:	mov	r1, #1
   16ce4:	str	r2, [sp, #52]	; 0x34
   16ce8:	str	r3, [sp, #48]	; 0x30
   16cec:	ldr	r3, [r4]
   16cf0:	mov	r2, r0
   16cf4:	mov	r0, r5
   16cf8:	add	sp, sp, #32
   16cfc:	pop	{r4, r5, r6, lr}
   16d00:	b	116b4 <__fprintf_chk@plt>
   16d04:	mov	r2, #5
   16d08:	ldr	r1, [pc, #444]	; 16ecc <__assert_fail@plt+0x56bc>
   16d0c:	mov	r0, #0
   16d10:	bl	114ec <dcgettext@plt>
   16d14:	ldr	r1, [r4, #12]
   16d18:	ldr	r2, [r4, #8]
   16d1c:	ldr	r3, [r4, #4]
   16d20:	str	r1, [sp, #8]
   16d24:	str	r2, [sp, #4]
   16d28:	str	r3, [sp]
   16d2c:	mov	r1, #1
   16d30:	ldr	r3, [r4]
   16d34:	mov	r2, r0
   16d38:	mov	r0, r5
   16d3c:	bl	116b4 <__fprintf_chk@plt>
   16d40:	b	16c60 <__assert_fail@plt+0x5450>
   16d44:	mov	r2, #5
   16d48:	ldr	r1, [pc, #384]	; 16ed0 <__assert_fail@plt+0x56c0>
   16d4c:	mov	r0, #0
   16d50:	bl	114ec <dcgettext@plt>
   16d54:	ldr	r3, [r4, #16]
   16d58:	ldr	r1, [r4, #12]
   16d5c:	ldr	r2, [r4, #8]
   16d60:	str	r3, [sp, #12]
   16d64:	ldr	r3, [r4, #4]
   16d68:	str	r1, [sp, #8]
   16d6c:	str	r2, [sp, #4]
   16d70:	str	r3, [sp]
   16d74:	mov	r1, #1
   16d78:	ldr	r3, [r4]
   16d7c:	mov	r2, r0
   16d80:	mov	r0, r5
   16d84:	bl	116b4 <__fprintf_chk@plt>
   16d88:	b	16c60 <__assert_fail@plt+0x5450>
   16d8c:	mov	r2, #5
   16d90:	ldr	r1, [pc, #316]	; 16ed4 <__assert_fail@plt+0x56c4>
   16d94:	mov	r0, #0
   16d98:	bl	114ec <dcgettext@plt>
   16d9c:	ldr	r2, [r4, #20]
   16da0:	ldr	r3, [r4, #16]
   16da4:	ldr	r1, [r4, #12]
   16da8:	str	r2, [sp, #16]
   16dac:	ldr	r2, [r4, #8]
   16db0:	str	r3, [sp, #12]
   16db4:	ldr	r3, [r4, #4]
   16db8:	str	r1, [sp, #8]
   16dbc:	str	r2, [sp, #4]
   16dc0:	str	r3, [sp]
   16dc4:	mov	r1, #1
   16dc8:	ldr	r3, [r4]
   16dcc:	mov	r2, r0
   16dd0:	mov	r0, r5
   16dd4:	bl	116b4 <__fprintf_chk@plt>
   16dd8:	b	16c60 <__assert_fail@plt+0x5450>
   16ddc:	mov	r2, #5
   16de0:	ldr	r1, [pc, #240]	; 16ed8 <__assert_fail@plt+0x56c8>
   16de4:	mov	r0, #0
   16de8:	bl	114ec <dcgettext@plt>
   16dec:	ldr	r1, [r4, #24]
   16df0:	ldr	r2, [r4, #20]
   16df4:	ldr	r3, [r4, #16]
   16df8:	str	r1, [sp, #20]
   16dfc:	ldr	r1, [r4, #12]
   16e00:	str	r2, [sp, #16]
   16e04:	ldr	r2, [r4, #8]
   16e08:	str	r3, [sp, #12]
   16e0c:	ldr	r3, [r4, #4]
   16e10:	str	r1, [sp, #8]
   16e14:	str	r2, [sp, #4]
   16e18:	str	r3, [sp]
   16e1c:	mov	r1, #1
   16e20:	ldr	r3, [r4]
   16e24:	mov	r2, r0
   16e28:	mov	r0, r5
   16e2c:	bl	116b4 <__fprintf_chk@plt>
   16e30:	b	16c60 <__assert_fail@plt+0x5450>
   16e34:	mov	r2, #5
   16e38:	ldr	r1, [pc, #156]	; 16edc <__assert_fail@plt+0x56cc>
   16e3c:	mov	r0, #0
   16e40:	bl	114ec <dcgettext@plt>
   16e44:	ldr	r3, [r4, #28]
   16e48:	ldr	r1, [r4, #24]
   16e4c:	ldr	r2, [r4, #20]
   16e50:	str	r3, [sp, #24]
   16e54:	ldr	r3, [r4, #16]
   16e58:	str	r1, [sp, #20]
   16e5c:	ldr	r1, [r4, #12]
   16e60:	str	r2, [sp, #16]
   16e64:	ldr	r2, [r4, #8]
   16e68:	str	r3, [sp, #12]
   16e6c:	ldr	r3, [r4, #4]
   16e70:	str	r1, [sp, #8]
   16e74:	str	r2, [sp, #4]
   16e78:	str	r3, [sp]
   16e7c:	mov	r1, #1
   16e80:	ldr	r3, [r4]
   16e84:	mov	r2, r0
   16e88:	mov	r0, r5
   16e8c:	bl	116b4 <__fprintf_chk@plt>
   16e90:	b	16c60 <__assert_fail@plt+0x5450>
   16e94:	mov	r2, #5
   16e98:	ldr	r1, [pc, #64]	; 16ee0 <__assert_fail@plt+0x56d0>
   16e9c:	b	16c04 <__assert_fail@plt+0x53f4>
   16ea0:	bl	117bc <abort@plt>
   16ea4:	strdeq	sl, [r1], -r0
   16ea8:	andeq	sl, r1, r4, lsl #22
   16eac:	andeq	r0, r0, r2, ror #15
   16eb0:	ldrdeq	sl, [r1], -r8
   16eb4:	andeq	sl, r1, r8, lsl #22
   16eb8:	strdeq	sl, [r1], -ip
   16ebc:	andeq	sl, r1, r0, ror #25
   16ec0:	ldrdeq	sl, [r1], -r4
   16ec4:	andeq	sl, r1, r4, ror #23
   16ec8:	strdeq	sl, [r1], -ip
   16ecc:	andeq	sl, r1, r8, lsl ip
   16ed0:	andeq	sl, r1, r8, lsr ip
   16ed4:	andeq	sl, r1, ip, asr ip
   16ed8:	andeq	sl, r1, r4, lsl #25
   16edc:			; <UNDEFINED> instruction: 0x0001acb0
   16ee0:	andeq	sl, r1, r4, lsl sp
   16ee4:	push	{r4, r5, lr}
   16ee8:	sub	sp, sp, #12
   16eec:	ldr	r5, [sp, #24]
   16ef0:	ldr	ip, [r5]
   16ef4:	cmp	ip, #0
   16ef8:	beq	16f14 <__assert_fail@plt+0x5704>
   16efc:	mov	lr, r5
   16f00:	mov	ip, #0
   16f04:	ldr	r4, [lr, #4]!
   16f08:	add	ip, ip, #1
   16f0c:	cmp	r4, #0
   16f10:	bne	16f04 <__assert_fail@plt+0x56f4>
   16f14:	stm	sp, {r5, ip}
   16f18:	bl	16b3c <__assert_fail@plt+0x532c>
   16f1c:	add	sp, sp, #12
   16f20:	pop	{r4, r5, pc}
   16f24:	push	{r4, r5, r6, lr}
   16f28:	sub	sp, sp, #56	; 0x38
   16f2c:	ldr	r6, [pc, #88]	; 16f8c <__assert_fail@plt+0x577c>
   16f30:	ldr	r5, [sp, #72]	; 0x48
   16f34:	add	r4, sp, #8
   16f38:	ldr	ip, [r6]
   16f3c:	str	ip, [sp, #52]	; 0x34
   16f40:	mov	ip, #0
   16f44:	ldr	lr, [r5], #4
   16f48:	cmp	lr, #0
   16f4c:	str	lr, [r4, #4]!
   16f50:	beq	16f60 <__assert_fail@plt+0x5750>
   16f54:	add	ip, ip, #1
   16f58:	cmp	ip, #10
   16f5c:	bne	16f44 <__assert_fail@plt+0x5734>
   16f60:	add	lr, sp, #12
   16f64:	str	ip, [sp, #4]
   16f68:	str	lr, [sp]
   16f6c:	bl	16b3c <__assert_fail@plt+0x532c>
   16f70:	ldr	r2, [sp, #52]	; 0x34
   16f74:	ldr	r3, [r6]
   16f78:	cmp	r2, r3
   16f7c:	bne	16f88 <__assert_fail@plt+0x5778>
   16f80:	add	sp, sp, #56	; 0x38
   16f84:	pop	{r4, r5, r6, pc}
   16f88:	bl	114f8 <__stack_chk_fail@plt>
   16f8c:	andeq	sl, r2, r0, lsl #30
   16f90:	push	{r3}		; (str r3, [sp, #-4]!)
   16f94:	mov	ip, #0
   16f98:	push	{r4, r5, r6, lr}
   16f9c:	sub	sp, sp, #60	; 0x3c
   16fa0:	ldr	r6, [pc, #100]	; 1700c <__assert_fail@plt+0x57fc>
   16fa4:	add	r5, sp, #8
   16fa8:	add	r4, sp, #80	; 0x50
   16fac:	ldr	r3, [r6]
   16fb0:	str	r4, [sp, #8]
   16fb4:	str	r3, [sp, #52]	; 0x34
   16fb8:	ldr	r3, [sp, #76]	; 0x4c
   16fbc:	ldr	lr, [r4], #4
   16fc0:	cmp	lr, #0
   16fc4:	str	lr, [r5, #4]!
   16fc8:	beq	16fd8 <__assert_fail@plt+0x57c8>
   16fcc:	add	ip, ip, #1
   16fd0:	cmp	ip, #10
   16fd4:	bne	16fbc <__assert_fail@plt+0x57ac>
   16fd8:	add	lr, sp, #12
   16fdc:	str	ip, [sp, #4]
   16fe0:	str	lr, [sp]
   16fe4:	bl	16b3c <__assert_fail@plt+0x532c>
   16fe8:	ldr	r2, [sp, #52]	; 0x34
   16fec:	ldr	r3, [r6]
   16ff0:	cmp	r2, r3
   16ff4:	bne	17008 <__assert_fail@plt+0x57f8>
   16ff8:	add	sp, sp, #60	; 0x3c
   16ffc:	pop	{r4, r5, r6, lr}
   17000:	add	sp, sp, #4
   17004:	bx	lr
   17008:	bl	114f8 <__stack_chk_fail@plt>
   1700c:	andeq	sl, r2, r0, lsl #30
   17010:	push	{r4, lr}
   17014:	mov	r2, #5
   17018:	ldr	r1, [pc, #88]	; 17078 <__assert_fail@plt+0x5868>
   1701c:	mov	r0, #0
   17020:	bl	114ec <dcgettext@plt>
   17024:	ldr	r2, [pc, #80]	; 1707c <__assert_fail@plt+0x586c>
   17028:	mov	r1, r0
   1702c:	mov	r0, #1
   17030:	bl	1169c <__printf_chk@plt>
   17034:	mov	r2, #5
   17038:	ldr	r1, [pc, #64]	; 17080 <__assert_fail@plt+0x5870>
   1703c:	mov	r0, #0
   17040:	bl	114ec <dcgettext@plt>
   17044:	ldr	r3, [pc, #56]	; 17084 <__assert_fail@plt+0x5874>
   17048:	ldr	r2, [pc, #56]	; 17088 <__assert_fail@plt+0x5878>
   1704c:	mov	r1, r0
   17050:	mov	r0, #1
   17054:	bl	1169c <__printf_chk@plt>
   17058:	ldr	r1, [pc, #44]	; 1708c <__assert_fail@plt+0x587c>
   1705c:	mov	r2, #5
   17060:	mov	r0, #0
   17064:	bl	114ec <dcgettext@plt>
   17068:	ldr	r3, [pc, #32]	; 17090 <__assert_fail@plt+0x5880>
   1706c:	pop	{r4, lr}
   17070:	ldr	r1, [r3]
   17074:	b	11444 <fputs_unlocked@plt>
   17078:	andeq	sl, r1, r0, asr sp
   1707c:	andeq	sl, r1, r8, ror #26
   17080:	andeq	sl, r1, r0, lsl #27
   17084:	andeq	sl, r1, r4, ror r6
   17088:	muleq	r1, ip, r6
   1708c:	muleq	r1, r4, sp
   17090:	andeq	fp, r2, r4, asr #3
   17094:	push	{r4, lr}
   17098:	mov	r4, r0
   1709c:	bl	115dc <malloc@plt>
   170a0:	adds	r4, r4, #0
   170a4:	movne	r4, #1
   170a8:	cmp	r0, #0
   170ac:	movne	r4, #0
   170b0:	cmp	r4, #0
   170b4:	popeq	{r4, pc}
   170b8:	bl	172dc <__assert_fail@plt+0x5acc>
   170bc:	push	{r4, r5, r6, lr}
   170c0:	umull	r4, r5, r0, r1
   170c4:	adds	r3, r5, #0
   170c8:	movne	r3, #1
   170cc:	cmp	r4, #0
   170d0:	blt	170e8 <__assert_fail@plt+0x58d8>
   170d4:	cmp	r3, #0
   170d8:	bne	170e8 <__assert_fail@plt+0x58d8>
   170dc:	mul	r0, r1, r0
   170e0:	pop	{r4, r5, r6, lr}
   170e4:	b	17094 <__assert_fail@plt+0x5884>
   170e8:	bl	172dc <__assert_fail@plt+0x5acc>
   170ec:	b	17094 <__assert_fail@plt+0x5884>
   170f0:	adds	r3, r0, #0
   170f4:	movne	r3, #1
   170f8:	cmp	r1, #0
   170fc:	movne	r3, #0
   17100:	cmp	r3, #0
   17104:	push	{r4, lr}
   17108:	bne	17130 <__assert_fail@plt+0x5920>
   1710c:	mov	r4, r1
   17110:	bl	11510 <realloc@plt>
   17114:	adds	r4, r4, #0
   17118:	movne	r4, #1
   1711c:	cmp	r0, #0
   17120:	movne	r4, #0
   17124:	cmp	r4, #0
   17128:	popeq	{r4, pc}
   1712c:	bl	172dc <__assert_fail@plt+0x5acc>
   17130:	bl	114a4 <free@plt>
   17134:	mov	r0, #0
   17138:	pop	{r4, pc}
   1713c:	push	{r4, r5, r6, lr}
   17140:	umull	r4, r5, r1, r2
   17144:	adds	r3, r5, #0
   17148:	movne	r3, #1
   1714c:	cmp	r4, #0
   17150:	blt	17168 <__assert_fail@plt+0x5958>
   17154:	cmp	r3, #0
   17158:	bne	17168 <__assert_fail@plt+0x5958>
   1715c:	mul	r1, r2, r1
   17160:	pop	{r4, r5, r6, lr}
   17164:	b	170f0 <__assert_fail@plt+0x58e0>
   17168:	bl	172dc <__assert_fail@plt+0x5acc>
   1716c:	push	{r4, r5, r6, r7, r8, lr}
   17170:	subs	r7, r0, #0
   17174:	mov	r6, r1
   17178:	mov	r5, r2
   1717c:	ldr	r4, [r1]
   17180:	beq	171b4 <__assert_fail@plt+0x59a4>
   17184:	mov	r1, r2
   17188:	ldr	r0, [pc, #104]	; 171f8 <__assert_fail@plt+0x59e8>
   1718c:	bl	19f78 <fts_children@@Base+0xa14>
   17190:	cmp	r0, r4
   17194:	bls	171d8 <__assert_fail@plt+0x59c8>
   17198:	add	r3, r4, #1
   1719c:	add	r4, r3, r4, lsr #1
   171a0:	str	r4, [r6]
   171a4:	mul	r1, r5, r4
   171a8:	mov	r0, r7
   171ac:	pop	{r4, r5, r6, r7, r8, lr}
   171b0:	b	170f0 <__assert_fail@plt+0x58e0>
   171b4:	cmp	r4, #0
   171b8:	beq	171dc <__assert_fail@plt+0x59cc>
   171bc:	umull	r0, r1, r4, r5
   171c0:	adds	r3, r1, #0
   171c4:	movne	r3, #1
   171c8:	cmp	r0, #0
   171cc:	blt	171d8 <__assert_fail@plt+0x59c8>
   171d0:	cmp	r3, #0
   171d4:	beq	171a0 <__assert_fail@plt+0x5990>
   171d8:	bl	172dc <__assert_fail@plt+0x5acc>
   171dc:	mov	r1, r2
   171e0:	mov	r0, #64	; 0x40
   171e4:	bl	19f78 <fts_children@@Base+0xa14>
   171e8:	cmp	r5, #64	; 0x40
   171ec:	movls	r4, r0
   171f0:	addhi	r4, r0, #1
   171f4:	b	171bc <__assert_fail@plt+0x59ac>
   171f8:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   171fc:	cmp	r0, #0
   17200:	ldr	r3, [r1]
   17204:	beq	17228 <__assert_fail@plt+0x5a18>
   17208:	ldr	r2, [pc, #60]	; 1724c <__assert_fail@plt+0x5a3c>
   1720c:	cmp	r3, r2
   17210:	bhi	17244 <__assert_fail@plt+0x5a34>
   17214:	add	r2, r3, #1
   17218:	add	r3, r2, r3, lsr #1
   1721c:	str	r3, [r1]
   17220:	mov	r1, r3
   17224:	b	170f0 <__assert_fail@plt+0x58e0>
   17228:	cmp	r3, #0
   1722c:	bne	17240 <__assert_fail@plt+0x5a30>
   17230:	mov	r3, #64	; 0x40
   17234:	str	r3, [r1]
   17238:	mov	r1, r3
   1723c:	b	170f0 <__assert_fail@plt+0x58e0>
   17240:	bge	1721c <__assert_fail@plt+0x5a0c>
   17244:	push	{r4, lr}
   17248:	bl	172dc <__assert_fail@plt+0x5acc>
   1724c:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   17250:	push	{r4, lr}
   17254:	mov	r4, r0
   17258:	bl	17094 <__assert_fail@plt+0x5884>
   1725c:	mov	r2, r4
   17260:	mov	r1, #0
   17264:	pop	{r4, lr}
   17268:	b	11690 <memset@plt>
   1726c:	push	{r4, r5, r6, lr}
   17270:	umull	r4, r5, r0, r1
   17274:	adds	r3, r5, #0
   17278:	movne	r3, #1
   1727c:	cmp	r4, #0
   17280:	blt	17298 <__assert_fail@plt+0x5a88>
   17284:	cmp	r3, #0
   17288:	bne	17298 <__assert_fail@plt+0x5a88>
   1728c:	bl	11438 <calloc@plt>
   17290:	cmp	r0, #0
   17294:	popne	{r4, r5, r6, pc}
   17298:	bl	172dc <__assert_fail@plt+0x5acc>
   1729c:	push	{r4, r5, r6, lr}
   172a0:	mov	r4, r1
   172a4:	mov	r5, r0
   172a8:	mov	r0, r1
   172ac:	bl	17094 <__assert_fail@plt+0x5884>
   172b0:	mov	r2, r4
   172b4:	mov	r1, r5
   172b8:	pop	{r4, r5, r6, lr}
   172bc:	b	114bc <memcpy@plt>
   172c0:	push	{r4, lr}
   172c4:	mov	r4, r0
   172c8:	bl	11654 <strlen@plt>
   172cc:	add	r1, r0, #1
   172d0:	mov	r0, r4
   172d4:	pop	{r4, lr}
   172d8:	b	1729c <__assert_fail@plt+0x5a8c>
   172dc:	ldr	r3, [pc, #44]	; 17310 <__assert_fail@plt+0x5b00>
   172e0:	push	{r4, lr}
   172e4:	mov	r2, #5
   172e8:	ldr	r1, [pc, #36]	; 17314 <__assert_fail@plt+0x5b04>
   172ec:	mov	r0, #0
   172f0:	ldr	r4, [r3]
   172f4:	bl	114ec <dcgettext@plt>
   172f8:	ldr	r2, [pc, #24]	; 17318 <__assert_fail@plt+0x5b08>
   172fc:	mov	r1, #0
   17300:	mov	r3, r0
   17304:	mov	r0, r4
   17308:	bl	115b8 <error@plt>
   1730c:	bl	117bc <abort@plt>
   17310:	andeq	fp, r2, ip, ror #2
   17314:	andeq	sl, r1, r8, lsl #28
   17318:	andeq	sl, r1, r4, asr r9
   1731c:	push	{r4, lr}
   17320:	orr	r1, r1, #512	; 0x200
   17324:	bl	188cc <fts_open@@Base>
   17328:	cmp	r0, #0
   1732c:	popne	{r4, pc}
   17330:	bl	11678 <__errno_location@plt>
   17334:	ldr	r3, [r0]
   17338:	cmp	r3, #22
   1733c:	beq	17344 <__assert_fail@plt+0x5b34>
   17340:	bl	172dc <__assert_fail@plt+0x5acc>
   17344:	ldr	r3, [pc, #12]	; 17358 <__assert_fail@plt+0x5b48>
   17348:	mov	r2, #41	; 0x29
   1734c:	ldr	r1, [pc, #8]	; 1735c <__assert_fail@plt+0x5b4c>
   17350:	ldr	r0, [pc, #8]	; 17360 <__assert_fail@plt+0x5b50>
   17354:	bl	11810 <__assert_fail@plt>
   17358:	andeq	sl, r1, ip, lsl lr
   1735c:	andeq	sl, r1, r8, lsr #28
   17360:	andeq	sl, r1, r4, lsr lr
   17364:	ldr	r3, [r0, #48]	; 0x30
   17368:	and	r3, r3, #17
   1736c:	cmp	r3, #16
   17370:	beq	17394 <__assert_fail@plt+0x5b84>
   17374:	cmp	r3, #17
   17378:	beq	17384 <__assert_fail@plt+0x5b74>
   1737c:	mov	r0, #0
   17380:	bx	lr
   17384:	ldr	r0, [r1, #48]	; 0x30
   17388:	adds	r0, r0, #0
   1738c:	movne	r0, #1
   17390:	bx	lr
   17394:	mov	r0, #1
   17398:	bx	lr
   1739c:	mov	r1, #0
   173a0:	push	{r4, lr}
   173a4:	mov	r0, r1
   173a8:	bl	11630 <getcwd@plt>
   173ac:	subs	r4, r0, #0
   173b0:	beq	173bc <__assert_fail@plt+0x5bac>
   173b4:	mov	r0, r4
   173b8:	pop	{r4, pc}
   173bc:	bl	11678 <__errno_location@plt>
   173c0:	ldr	r3, [r0]
   173c4:	cmp	r3, #12
   173c8:	bne	173b4 <__assert_fail@plt+0x5ba4>
   173cc:	bl	172dc <__assert_fail@plt+0x5acc>
   173d0:	ldrd	r2, [r1, #8]
   173d4:	push	{r4, r5}
   173d8:	ldrd	r4, [r0, #8]
   173dc:	cmp	r5, r3
   173e0:	cmpeq	r4, r2
   173e4:	movne	r0, #0
   173e8:	bne	17404 <__assert_fail@plt+0x5bf4>
   173ec:	ldrd	r4, [r0]
   173f0:	ldrd	r2, [r1]
   173f4:	cmp	r5, r3
   173f8:	cmpeq	r4, r2
   173fc:	moveq	r0, #1
   17400:	movne	r0, #0
   17404:	pop	{r4, r5}
   17408:	bx	lr
   1740c:	push	{r4, lr}
   17410:	mov	r2, r1
   17414:	mov	r3, #0
   17418:	ldrd	r0, [r0, #8]
   1741c:	bl	1a184 <fts_children@@Base+0xc20>
   17420:	mov	r0, r2
   17424:	pop	{r4, pc}
   17428:	push	{r4, lr}
   1742c:	mov	r2, r1
   17430:	mov	r3, #0
   17434:	ldrd	r0, [r0]
   17438:	bl	1a184 <fts_children@@Base+0xc20>
   1743c:	mov	r0, r2
   17440:	pop	{r4, pc}
   17444:	push	{r4, r5}
   17448:	ldrd	r2, [r1]
   1744c:	ldrd	r4, [r0]
   17450:	cmp	r5, r3
   17454:	cmpeq	r4, r2
   17458:	moveq	r0, #1
   1745c:	movne	r0, #0
   17460:	pop	{r4, r5}
   17464:	bx	lr
   17468:	ldr	r2, [r0]
   1746c:	ldr	r3, [r1]
   17470:	ldrd	r0, [r2, #168]	; 0xa8
   17474:	ldrd	r2, [r3, #168]	; 0xa8
   17478:	cmp	r1, r3
   1747c:	cmpeq	r0, r2
   17480:	bcc	17490 <__assert_fail@plt+0x5c80>
   17484:	movhi	r0, #1
   17488:	movls	r0, #0
   1748c:	bx	lr
   17490:	mvn	r0, #0
   17494:	bx	lr
   17498:	ldr	r3, [r0, #40]	; 0x28
   1749c:	push	{r4, r5, r6, r7, r8, lr}
   174a0:	cmp	r3, r2
   174a4:	mov	r6, r0
   174a8:	ldr	r7, [r0, #44]	; 0x2c
   174ac:	mov	r5, r2
   174b0:	mov	r4, r1
   174b4:	ldr	r0, [r0, #8]
   174b8:	bcs	174e0 <__assert_fail@plt+0x5cd0>
   174bc:	add	r1, r2, #40	; 0x28
   174c0:	cmn	r1, #-1073741823	; 0xc0000001
   174c4:	str	r1, [r6, #40]	; 0x28
   174c8:	bhi	17558 <__assert_fail@plt+0x5d48>
   174cc:	lsl	r1, r1, #2
   174d0:	bl	11510 <realloc@plt>
   174d4:	cmp	r0, #0
   174d8:	strne	r0, [r6, #8]
   174dc:	beq	17554 <__assert_fail@plt+0x5d44>
   174e0:	cmp	r4, #0
   174e4:	movne	r2, r0
   174e8:	beq	174fc <__assert_fail@plt+0x5cec>
   174ec:	str	r4, [r2], #4
   174f0:	ldr	r4, [r4, #8]
   174f4:	cmp	r4, #0
   174f8:	bne	174ec <__assert_fail@plt+0x5cdc>
   174fc:	mov	r3, r7
   17500:	mov	r2, #4
   17504:	mov	r1, r5
   17508:	bl	11750 <qsort@plt>
   1750c:	ldr	lr, [r6, #8]
   17510:	subs	r3, r5, #1
   17514:	ldr	r0, [lr]
   17518:	moveq	r2, r0
   1751c:	beq	17548 <__assert_fail@plt+0x5d38>
   17520:	mov	ip, r0
   17524:	mov	r2, lr
   17528:	b	17530 <__assert_fail@plt+0x5d20>
   1752c:	ldr	ip, [r2]
   17530:	ldr	r1, [r2, #4]!
   17534:	subs	r3, r3, #1
   17538:	str	r1, [ip, #8]
   1753c:	bne	1752c <__assert_fail@plt+0x5d1c>
   17540:	add	r5, lr, r5, lsl #2
   17544:	ldr	r2, [r5, #-4]
   17548:	mov	r3, #0
   1754c:	str	r3, [r2, #8]
   17550:	pop	{r4, r5, r6, r7, r8, pc}
   17554:	ldr	r0, [r6, #8]
   17558:	bl	114a4 <free@plt>
   1755c:	mov	r3, #0
   17560:	mov	r0, r4
   17564:	str	r3, [r6, #8]
   17568:	str	r3, [r6, #40]	; 0x28
   1756c:	pop	{r4, r5, r6, r7, r8, pc}
   17570:	add	r3, r2, #184	; 0xb8
   17574:	push	{r4, r5, r6, r7, r8, lr}
   17578:	mov	r6, r0
   1757c:	bic	r0, r3, #7
   17580:	mov	r5, r2
   17584:	mov	r7, r1
   17588:	bl	115dc <malloc@plt>
   1758c:	subs	r4, r0, #0
   17590:	beq	175dc <__assert_fail@plt+0x5dcc>
   17594:	mov	r1, r7
   17598:	mov	r2, r5
   1759c:	add	r0, r4, #176	; 0xb0
   175a0:	bl	114bc <memcpy@plt>
   175a4:	add	r0, r4, r5
   175a8:	ldr	r1, [r6, #24]
   175ac:	mov	r3, #0
   175b0:	mov	r2, #3
   175b4:	strb	r3, [r0, #176]	; 0xb0
   175b8:	str	r3, [r4, #32]
   175bc:	str	r3, [r4, #12]
   175c0:	strh	r3, [r4, #62]	; 0x3e
   175c4:	str	r3, [r4, #16]
   175c8:	str	r3, [r4, #20]
   175cc:	str	r5, [r4, #52]	; 0x34
   175d0:	str	r6, [r4, #44]	; 0x2c
   175d4:	str	r1, [r4, #28]
   175d8:	strh	r2, [r4, #64]	; 0x40
   175dc:	mov	r0, r4
   175e0:	pop	{r4, r5, r6, r7, r8, pc}
   175e4:	push	{r4, r5, r6, lr}
   175e8:	subs	r4, r0, #0
   175ec:	popeq	{r4, r5, r6, pc}
   175f0:	ldr	r3, [r4, #12]
   175f4:	ldr	r5, [r4, #8]
   175f8:	subs	r0, r3, #0
   175fc:	beq	17604 <__assert_fail@plt+0x5df4>
   17600:	bl	117f8 <closedir@plt>
   17604:	mov	r0, r4
   17608:	bl	114a4 <free@plt>
   1760c:	subs	r4, r5, #0
   17610:	bne	175f0 <__assert_fail@plt+0x5de0>
   17614:	pop	{r4, r5, r6, pc}
   17618:	push	{r4, lr}
   1761c:	mov	r4, r0
   17620:	mov	r0, r4
   17624:	bl	19b18 <fts_children@@Base+0x5b4>
   17628:	cmp	r0, #0
   1762c:	mov	r0, r4
   17630:	popne	{r4, pc}
   17634:	bl	19b64 <fts_children@@Base+0x600>
   17638:	cmp	r0, #0
   1763c:	blt	17620 <__assert_fail@plt+0x5e10>
   17640:	bl	117c8 <close@plt>
   17644:	b	17620 <__assert_fail@plt+0x5e10>
   17648:	push	{r4, r5, r6, r7, r8, lr}
   1764c:	sub	sp, sp, #120	; 0x78
   17650:	ldr	r6, [r0, #44]	; 0x2c
   17654:	ldr	r5, [pc, #272]	; 1776c <__assert_fail@plt+0x5f5c>
   17658:	ldr	r3, [r6, #48]	; 0x30
   1765c:	ldr	r2, [r5]
   17660:	tst	r3, #512	; 0x200
   17664:	str	r2, [sp, #116]	; 0x74
   17668:	beq	176ec <__assert_fail@plt+0x5edc>
   1766c:	ldr	r4, [r6, #52]	; 0x34
   17670:	mov	r7, r0
   17674:	cmp	r4, #0
   17678:	mov	r8, r1
   1767c:	beq	176a4 <__assert_fail@plt+0x5e94>
   17680:	ldrd	r2, [r7, #72]	; 0x48
   17684:	add	r1, sp, #8
   17688:	mov	r0, r4
   1768c:	strd	r2, [sp, #8]
   17690:	bl	13640 <__assert_fail@plt+0x1e30>
   17694:	cmp	r0, #0
   17698:	beq	176d0 <__assert_fail@plt+0x5ec0>
   1769c:	ldr	r6, [r0, #8]
   176a0:	b	176f0 <__assert_fail@plt+0x5ee0>
   176a4:	ldr	r3, [pc, #196]	; 17770 <__assert_fail@plt+0x5f60>
   176a8:	mov	r1, r4
   176ac:	str	r3, [sp]
   176b0:	ldr	r2, [pc, #188]	; 17774 <__assert_fail@plt+0x5f64>
   176b4:	ldr	r3, [pc, #188]	; 17778 <__assert_fail@plt+0x5f68>
   176b8:	mov	r0, #13
   176bc:	bl	138f8 <__assert_fail@plt+0x20e8>
   176c0:	cmp	r0, #0
   176c4:	mov	r4, r0
   176c8:	str	r0, [r6, #52]	; 0x34
   176cc:	bne	17680 <__assert_fail@plt+0x5e70>
   176d0:	cmp	r8, #0
   176d4:	blt	176ec <__assert_fail@plt+0x5edc>
   176d8:	mov	r0, r8
   176dc:	add	r1, sp, #24
   176e0:	bl	1142c <fstatfs64@plt>
   176e4:	cmp	r0, #0
   176e8:	beq	1770c <__assert_fail@plt+0x5efc>
   176ec:	mov	r6, #0
   176f0:	ldr	r2, [sp, #116]	; 0x74
   176f4:	ldr	r3, [r5]
   176f8:	mov	r0, r6
   176fc:	cmp	r2, r3
   17700:	bne	17764 <__assert_fail@plt+0x5f54>
   17704:	add	sp, sp, #120	; 0x78
   17708:	pop	{r4, r5, r6, r7, r8, pc}
   1770c:	cmp	r4, #0
   17710:	ldr	r6, [sp, #24]
   17714:	beq	176f0 <__assert_fail@plt+0x5ee0>
   17718:	mov	r0, #16
   1771c:	bl	115dc <malloc@plt>
   17720:	subs	r8, r0, #0
   17724:	beq	176f0 <__assert_fail@plt+0x5ee0>
   17728:	ldrd	r2, [r7, #72]	; 0x48
   1772c:	str	r6, [r8, #8]
   17730:	mov	r0, r4
   17734:	strd	r2, [r8]
   17738:	mov	r1, r8
   1773c:	bl	13f24 <__assert_fail@plt+0x2714>
   17740:	cmp	r0, #0
   17744:	beq	17758 <__assert_fail@plt+0x5f48>
   17748:	cmp	r8, r0
   1774c:	bne	17768 <__assert_fail@plt+0x5f58>
   17750:	ldr	r6, [sp, #24]
   17754:	b	176f0 <__assert_fail@plt+0x5ee0>
   17758:	mov	r0, r8
   1775c:	bl	114a4 <free@plt>
   17760:	b	17750 <__assert_fail@plt+0x5f40>
   17764:	bl	114f8 <__stack_chk_fail@plt>
   17768:	bl	117bc <abort@plt>
   1776c:	andeq	sl, r2, r0, lsl #30
   17770:	andeq	r1, r1, r4, lsr #9
   17774:	andeq	r7, r1, r8, lsr #8
   17778:	andeq	r7, r1, r4, asr #8
   1777c:	push	{r4, lr}
   17780:	bl	17648 <__assert_fail@plt+0x5e38>
   17784:	ldr	r3, [pc, #112]	; 177fc <__assert_fail@plt+0x5fec>
   17788:	cmp	r0, r3
   1778c:	beq	177ec <__assert_fail@plt+0x5fdc>
   17790:	ble	177c8 <__assert_fail@plt+0x5fb8>
   17794:	ldr	r3, [pc, #100]	; 17800 <__assert_fail@plt+0x5ff0>
   17798:	cmp	r0, r3
   1779c:	beq	177ec <__assert_fail@plt+0x5fdc>
   177a0:	add	r3, r3, #83886080	; 0x5000000
   177a4:	add	r3, r3, #4544	; 0x11c0
   177a8:	add	r3, r3, #51	; 0x33
   177ac:	cmp	r0, r3
   177b0:	beq	177f4 <__assert_fail@plt+0x5fe4>
   177b4:	ldr	r3, [pc, #72]	; 17804 <__assert_fail@plt+0x5ff4>
   177b8:	cmp	r0, r3
   177bc:	moveq	r0, #2
   177c0:	movne	r0, #1
   177c4:	pop	{r4, pc}
   177c8:	cmp	r0, #0
   177cc:	popeq	{r4, pc}
   177d0:	ldr	r3, [pc, #48]	; 17808 <__assert_fail@plt+0x5ff8>
   177d4:	cmp	r0, r3
   177d8:	beq	177ec <__assert_fail@plt+0x5fdc>
   177dc:	ldr	r3, [pc, #40]	; 1780c <__assert_fail@plt+0x5ffc>
   177e0:	subs	r0, r0, r3
   177e4:	movne	r0, #1
   177e8:	pop	{r4, pc}
   177ec:	mov	r0, #0
   177f0:	pop	{r4, pc}
   177f4:	mov	r0, #2
   177f8:	pop	{r4, pc}
   177fc:	andeq	r9, r0, r0, lsr #31
   17800:	movtpl	r4, #24911	; 0x614f
   17804:	rsbpl	r4, r5, #1884160	; 0x1cc000
   17808:	andeq	r6, r0, r9, ror #18
   1780c:			; <UNDEFINED> instruction: 0xff534d42
   17810:	push	{r4, r5, r6, lr}
   17814:	mov	r5, r1
   17818:	ldr	r1, [r0, #32]
   1781c:	cmn	r1, #100	; 0x64
   17820:	sub	r3, r1, r5
   17824:	clz	r3, r3
   17828:	lsr	r3, r3, #5
   1782c:	moveq	r3, #0
   17830:	cmp	r3, #0
   17834:	bne	17894 <__assert_fail@plt+0x6084>
   17838:	cmp	r2, #0
   1783c:	mov	r4, r0
   17840:	bne	1786c <__assert_fail@plt+0x605c>
   17844:	ldr	r3, [r0, #48]	; 0x30
   17848:	lsr	r3, r3, #2
   1784c:	eor	r3, r3, #1
   17850:	cmp	r1, #0
   17854:	movlt	r3, #0
   17858:	andge	r3, r3, #1
   1785c:	cmp	r3, #0
   17860:	bne	17888 <__assert_fail@plt+0x6078>
   17864:	str	r5, [r4, #32]
   17868:	pop	{r4, r5, r6, pc}
   1786c:	add	r0, r0, #60	; 0x3c
   17870:	bl	19b20 <fts_children@@Base+0x5bc>
   17874:	cmp	r0, #0
   17878:	blt	17864 <__assert_fail@plt+0x6054>
   1787c:	bl	117c8 <close@plt>
   17880:	str	r5, [r4, #32]
   17884:	pop	{r4, r5, r6, pc}
   17888:	mov	r0, r1
   1788c:	bl	117c8 <close@plt>
   17890:	b	17880 <__assert_fail@plt+0x6070>
   17894:	bl	117bc <abort@plt>
   17898:	ldr	r3, [r0, #48]	; 0x30
   1789c:	push	{r4, r5, r6, lr}
   178a0:	ands	r5, r3, #4
   178a4:	mov	r4, r0
   178a8:	movne	r5, #0
   178ac:	bne	178c4 <__assert_fail@plt+0x60b4>
   178b0:	tst	r3, #512	; 0x200
   178b4:	beq	178d4 <__assert_fail@plt+0x60c4>
   178b8:	mov	r2, #1
   178bc:	mvn	r1, #99	; 0x63
   178c0:	bl	17810 <__assert_fail@plt+0x6000>
   178c4:	add	r0, r4, #60	; 0x3c
   178c8:	bl	17618 <__assert_fail@plt+0x5e08>
   178cc:	mov	r0, r5
   178d0:	pop	{r4, r5, r6, pc}
   178d4:	ldr	r0, [r0, #28]
   178d8:	bl	11744 <fchdir@plt>
   178dc:	adds	r5, r0, #0
   178e0:	movne	r5, #1
   178e4:	b	178c4 <__assert_fail@plt+0x60b4>
   178e8:	push	{r4, r5, r6, lr}
   178ec:	mov	r4, r2
   178f0:	ldr	r2, [r2, #48]	; 0x30
   178f4:	mov	r6, r1
   178f8:	cmp	r2, #0
   178fc:	ldr	ip, [r1]
   17900:	sub	sp, sp, #8
   17904:	add	r5, r4, #72	; 0x48
   17908:	ldr	r1, [r4, #24]
   1790c:	bne	1796c <__assert_fail@plt+0x615c>
   17910:	tst	ip, #1
   17914:	beq	1796c <__assert_fail@plt+0x615c>
   17918:	mov	r2, r5
   1791c:	mov	r0, #3
   17920:	bl	117a4 <__xstat64@plt>
   17924:	cmp	r0, #0
   17928:	beq	1799c <__assert_fail@plt+0x618c>
   1792c:	bl	11678 <__errno_location@plt>
   17930:	ldr	r3, [r0]
   17934:	mov	r6, r0
   17938:	cmp	r3, #2
   1793c:	bne	179d0 <__assert_fail@plt+0x61c0>
   17940:	mov	r2, r5
   17944:	ldr	r1, [r4, #24]
   17948:	mov	r0, #3
   1794c:	bl	117d4 <__lxstat64@plt>
   17950:	cmp	r0, #0
   17954:	ldrne	r3, [r6]
   17958:	bne	179d0 <__assert_fail@plt+0x61c0>
   1795c:	str	r0, [r6]
   17960:	mov	r0, #13
   17964:	add	sp, sp, #8
   17968:	pop	{r4, r5, r6, pc}
   1796c:	lsl	ip, ip, #30
   17970:	orrs	r3, r3, ip, lsr #31
   17974:	bne	17918 <__assert_fail@plt+0x6108>
   17978:	mov	r3, #256	; 0x100
   1797c:	mov	r2, r1
   17980:	str	r3, [sp]
   17984:	mov	r1, r0
   17988:	mov	r3, r5
   1798c:	mov	r0, #3
   17990:	bl	11534 <__fxstatat64@plt>
   17994:	cmp	r0, #0
   17998:	bne	179c8 <__assert_fail@plt+0x61b8>
   1799c:	ldr	r3, [r4, #88]	; 0x58
   179a0:	and	r3, r3, #61440	; 0xf000
   179a4:	cmp	r3, #16384	; 0x4000
   179a8:	beq	179f0 <__assert_fail@plt+0x61e0>
   179ac:	cmp	r3, #40960	; 0xa000
   179b0:	beq	17a6c <__assert_fail@plt+0x625c>
   179b4:	cmp	r3, #32768	; 0x8000
   179b8:	movne	r0, #3
   179bc:	moveq	r0, #8
   179c0:	add	sp, sp, #8
   179c4:	pop	{r4, r5, r6, pc}
   179c8:	bl	11678 <__errno_location@plt>
   179cc:	ldr	r3, [r0]
   179d0:	str	r3, [r4, #32]
   179d4:	mov	r0, r5
   179d8:	mov	r2, #104	; 0x68
   179dc:	mov	r1, #0
   179e0:	bl	11690 <memset@plt>
   179e4:	mov	r0, #10
   179e8:	add	sp, sp, #8
   179ec:	pop	{r4, r5, r6, pc}
   179f0:	ldr	r3, [r4, #92]	; 0x5c
   179f4:	cmp	r3, #1
   179f8:	bls	17a64 <__assert_fail@plt+0x6254>
   179fc:	ldr	r2, [r4, #48]	; 0x30
   17a00:	cmp	r2, #0
   17a04:	ble	17a64 <__assert_fail@plt+0x6254>
   17a08:	ldr	r2, [r6]
   17a0c:	tst	r2, #32
   17a10:	subeq	r3, r3, #2
   17a14:	ldrb	r2, [r4, #176]	; 0xb0
   17a18:	str	r3, [r4, #56]	; 0x38
   17a1c:	cmp	r2, #46	; 0x2e
   17a20:	bne	17a44 <__assert_fail@plt+0x6234>
   17a24:	ldrb	r3, [r4, #177]	; 0xb1
   17a28:	cmp	r3, #0
   17a2c:	beq	17a50 <__assert_fail@plt+0x6240>
   17a30:	ldr	r3, [r4, #176]	; 0xb0
   17a34:	bic	r3, r3, #-16777216	; 0xff000000
   17a38:	bic	r3, r3, #255	; 0xff
   17a3c:	cmp	r3, #11776	; 0x2e00
   17a40:	beq	17a50 <__assert_fail@plt+0x6240>
   17a44:	mov	r0, #1
   17a48:	add	sp, sp, #8
   17a4c:	pop	{r4, r5, r6, pc}
   17a50:	ldr	r3, [r4, #48]	; 0x30
   17a54:	cmp	r3, #0
   17a58:	moveq	r0, #1
   17a5c:	movne	r0, #5
   17a60:	b	179c0 <__assert_fail@plt+0x61b0>
   17a64:	mvn	r3, #0
   17a68:	b	17a14 <__assert_fail@plt+0x6204>
   17a6c:	mov	r0, #12
   17a70:	b	179c0 <__assert_fail@plt+0x61b0>
   17a74:	ldr	ip, [r1]
   17a78:	push	{r4, r5, r6, lr}
   17a7c:	add	r3, ip, #256	; 0x100
   17a80:	add	r2, r3, r2
   17a84:	cmp	ip, r2
   17a88:	mov	r4, r0
   17a8c:	ldr	r0, [r0]
   17a90:	bhi	17ab8 <__assert_fail@plt+0x62a8>
   17a94:	str	r2, [r1]
   17a98:	mov	r1, r2
   17a9c:	bl	11510 <realloc@plt>
   17aa0:	subs	r5, r0, #0
   17aa4:	movne	r3, #1
   17aa8:	strne	r5, [r4]
   17aac:	beq	17adc <__assert_fail@plt+0x62cc>
   17ab0:	mov	r0, r3
   17ab4:	pop	{r4, r5, r6, pc}
   17ab8:	mov	r5, #0
   17abc:	bl	114a4 <free@plt>
   17ac0:	str	r5, [r4]
   17ac4:	bl	11678 <__errno_location@plt>
   17ac8:	mov	r2, #36	; 0x24
   17acc:	mov	r3, r5
   17ad0:	str	r2, [r0]
   17ad4:	mov	r0, r3
   17ad8:	pop	{r4, r5, r6, pc}
   17adc:	ldr	r0, [r4]
   17ae0:	bl	114a4 <free@plt>
   17ae4:	str	r5, [r4]
   17ae8:	mov	r3, r5
   17aec:	b	17ab0 <__assert_fail@plt+0x62a0>
   17af0:	ldr	r3, [pc, #104]	; 17b60 <__assert_fail@plt+0x6350>
   17af4:	push	{r4, lr}
   17af8:	and	r3, r3, r0
   17afc:	cmp	r3, #0
   17b00:	sub	sp, sp, #8
   17b04:	mov	r4, r1
   17b08:	beq	17b3c <__assert_fail@plt+0x632c>
   17b0c:	ldr	r2, [pc, #80]	; 17b64 <__assert_fail@plt+0x6354>
   17b10:	ldr	r3, [pc, #80]	; 17b68 <__assert_fail@plt+0x6358>
   17b14:	str	r2, [sp]
   17b18:	mov	r1, #0
   17b1c:	ldr	r2, [pc, #72]	; 17b6c <__assert_fail@plt+0x635c>
   17b20:	mov	r0, #31
   17b24:	bl	138f8 <__assert_fail@plt+0x20e8>
   17b28:	str	r0, [r4]
   17b2c:	adds	r0, r0, #0
   17b30:	movne	r0, #1
   17b34:	add	sp, sp, #8
   17b38:	pop	{r4, pc}
   17b3c:	mov	r0, #32
   17b40:	bl	115dc <malloc@plt>
   17b44:	cmp	r0, #0
   17b48:	str	r0, [r4]
   17b4c:	beq	17b34 <__assert_fail@plt+0x6324>
   17b50:	bl	19910 <fts_children@@Base+0x3ac>
   17b54:	mov	r0, #1
   17b58:	add	sp, sp, #8
   17b5c:	pop	{r4, pc}
   17b60:	andeq	r0, r0, r2, lsl #2
   17b64:	andeq	r1, r1, r4, lsr #9
   17b68:	ldrdeq	r7, [r1], -r0
   17b6c:	andeq	r7, r1, ip, lsl #8
   17b70:	lsl	r3, r1, #11
   17b74:	lsl	ip, r1, #7
   17b78:	tst	r1, #512	; 0x200
   17b7c:	and	r1, r3, #32768	; 0x8000
   17b80:	and	r3, ip, #262144	; 0x40000
   17b84:	orr	r1, r1, r3
   17b88:	orr	r1, r1, #540672	; 0x84000
   17b8c:	mov	r3, r2
   17b90:	orr	r1, r1, #2304	; 0x900
   17b94:	beq	17ba4 <__assert_fail@plt+0x6394>
   17b98:	mov	r2, r1
   17b9c:	mov	r1, r3
   17ba0:	b	19be0 <fts_children@@Base+0x67c>
   17ba4:	mov	r0, r2
   17ba8:	b	19a08 <fts_children@@Base+0x4a4>
   17bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bb0:	subs	fp, r3, #0
   17bb4:	ldr	r5, [pc, #500]	; 17db0 <__assert_fail@plt+0x65a0>
   17bb8:	sub	sp, sp, #116	; 0x74
   17bbc:	ldr	sl, [r0, #48]	; 0x30
   17bc0:	ldr	r3, [r5]
   17bc4:	mov	r6, r0
   17bc8:	mov	r7, r1
   17bcc:	mov	r4, r2
   17bd0:	and	r9, sl, #4
   17bd4:	str	r3, [sp, #108]	; 0x6c
   17bd8:	beq	17cac <__assert_fail@plt+0x649c>
   17bdc:	ldr	r1, [pc, #464]	; 17db4 <__assert_fail@plt+0x65a4>
   17be0:	mov	r0, fp
   17be4:	bl	11468 <strcmp@plt>
   17be8:	cmp	r0, #0
   17bec:	bne	17cac <__assert_fail@plt+0x649c>
   17bf0:	cmp	r9, #0
   17bf4:	bne	17ce8 <__assert_fail@plt+0x64d8>
   17bf8:	cmp	r4, #0
   17bfc:	bge	17d9c <__assert_fail@plt+0x658c>
   17c00:	tst	sl, #512	; 0x200
   17c04:	bne	17d28 <__assert_fail@plt+0x6518>
   17c08:	mov	r9, #1
   17c0c:	mov	r1, sl
   17c10:	mov	r2, fp
   17c14:	ldr	r0, [r6, #32]
   17c18:	bl	17b70 <__assert_fail@plt+0x6360>
   17c1c:	subs	r8, r0, #0
   17c20:	blt	17d90 <__assert_fail@plt+0x6580>
   17c24:	ldr	sl, [r6, #48]	; 0x30
   17c28:	tst	sl, #2
   17c2c:	beq	17cc8 <__assert_fail@plt+0x64b8>
   17c30:	mov	r2, sp
   17c34:	mov	r1, r8
   17c38:	mov	r0, #3
   17c3c:	bl	1154c <__fxstat64@plt>
   17c40:	cmp	r0, #0
   17c44:	bne	17d20 <__assert_fail@plt+0x6510>
   17c48:	ldrd	r0, [r7, #72]	; 0x48
   17c4c:	ldrd	r2, [sp]
   17c50:	cmp	r1, r3
   17c54:	cmpeq	r0, r2
   17c58:	bne	17d14 <__assert_fail@plt+0x6504>
   17c5c:	ldrd	r0, [r7, #168]	; 0xa8
   17c60:	ldrd	r2, [sp, #96]	; 0x60
   17c64:	cmp	r1, r3
   17c68:	cmpeq	r0, r2
   17c6c:	bne	17d14 <__assert_fail@plt+0x6504>
   17c70:	ldr	sl, [r6, #48]	; 0x30
   17c74:	tst	sl, #512	; 0x200
   17c78:	bne	17d64 <__assert_fail@plt+0x6554>
   17c7c:	mov	r0, r8
   17c80:	bl	11744 <fchdir@plt>
   17c84:	mov	sl, r0
   17c88:	cmp	r4, #0
   17c8c:	bge	17cf8 <__assert_fail@plt+0x64e8>
   17c90:	bl	11678 <__errno_location@plt>
   17c94:	mov	r4, r0
   17c98:	mov	r0, r8
   17c9c:	ldr	r6, [r4]
   17ca0:	bl	117c8 <close@plt>
   17ca4:	str	r6, [r4]
   17ca8:	b	17cf8 <__assert_fail@plt+0x64e8>
   17cac:	cmp	r9, #0
   17cb0:	bne	17ce8 <__assert_fail@plt+0x64d8>
   17cb4:	cmp	r4, #0
   17cb8:	movge	r8, r4
   17cbc:	blt	17c0c <__assert_fail@plt+0x63fc>
   17cc0:	tst	sl, #2
   17cc4:	bne	17c30 <__assert_fail@plt+0x6420>
   17cc8:	cmp	fp, #0
   17ccc:	beq	17c74 <__assert_fail@plt+0x6464>
   17cd0:	mov	r0, fp
   17cd4:	ldr	r1, [pc, #216]	; 17db4 <__assert_fail@plt+0x65a4>
   17cd8:	bl	11468 <strcmp@plt>
   17cdc:	cmp	r0, #0
   17ce0:	bne	17c74 <__assert_fail@plt+0x6464>
   17ce4:	b	17c30 <__assert_fail@plt+0x6420>
   17ce8:	mvn	r3, r4
   17cec:	lsr	r3, r3, #31
   17cf0:	ands	sl, r3, sl, lsr #9
   17cf4:	bne	17d80 <__assert_fail@plt+0x6570>
   17cf8:	ldr	r2, [sp, #108]	; 0x6c
   17cfc:	ldr	r3, [r5]
   17d00:	mov	r0, sl
   17d04:	cmp	r2, r3
   17d08:	bne	17d98 <__assert_fail@plt+0x6588>
   17d0c:	add	sp, sp, #116	; 0x74
   17d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d14:	bl	11678 <__errno_location@plt>
   17d18:	mov	r3, #2
   17d1c:	str	r3, [r0]
   17d20:	mvn	sl, #0
   17d24:	b	17c88 <__assert_fail@plt+0x6478>
   17d28:	add	r8, r6, #60	; 0x3c
   17d2c:	mov	r0, r8
   17d30:	bl	19b18 <fts_children@@Base+0x5b4>
   17d34:	subs	r9, r0, #0
   17d38:	bne	17c0c <__assert_fail@plt+0x63fc>
   17d3c:	mov	r0, r8
   17d40:	bl	19b64 <fts_children@@Base+0x600>
   17d44:	ldr	sl, [r6, #48]	; 0x30
   17d48:	subs	r8, r0, #0
   17d4c:	blt	17c08 <__assert_fail@plt+0x63f8>
   17d50:	tst	sl, #2
   17d54:	mov	r4, r8
   17d58:	mov	r9, #1
   17d5c:	beq	17c74 <__assert_fail@plt+0x6464>
   17d60:	b	17c30 <__assert_fail@plt+0x6420>
   17d64:	eor	r2, r9, #1
   17d68:	mov	r1, r8
   17d6c:	uxtb	r2, r2
   17d70:	mov	r0, r6
   17d74:	bl	17810 <__assert_fail@plt+0x6000>
   17d78:	mov	sl, #0
   17d7c:	b	17cf8 <__assert_fail@plt+0x64e8>
   17d80:	mov	r0, r4
   17d84:	bl	117c8 <close@plt>
   17d88:	mov	sl, #0
   17d8c:	b	17cf8 <__assert_fail@plt+0x64e8>
   17d90:	mvn	sl, #0
   17d94:	b	17cf8 <__assert_fail@plt+0x64e8>
   17d98:	bl	114f8 <__stack_chk_fail@plt>
   17d9c:	tst	sl, #2
   17da0:	mov	r8, r4
   17da4:	mov	r9, #1
   17da8:	beq	17cd0 <__assert_fail@plt+0x64c0>
   17dac:	b	17c30 <__assert_fail@plt+0x6420>
   17db0:	andeq	sl, r2, r0, lsl #30
   17db4:	andeq	sl, r1, r4, ror lr
   17db8:	ldr	r3, [pc, #164]	; 17e64 <__assert_fail@plt+0x6654>
   17dbc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17dc0:	and	r3, r3, r0
   17dc4:	cmp	r3, #0
   17dc8:	mov	sl, r1
   17dcc:	mov	r8, r2
   17dd0:	beq	17e38 <__assert_fail@plt+0x6628>
   17dd4:	mov	r0, #24
   17dd8:	bl	115dc <malloc@plt>
   17ddc:	subs	r9, r0, #0
   17de0:	beq	17e5c <__assert_fail@plt+0x664c>
   17de4:	ldrd	r4, [r8, #168]	; 0xa8
   17de8:	ldrd	r6, [r8, #72]	; 0x48
   17dec:	str	r8, [r9, #16]
   17df0:	strd	r4, [r9, #8]
   17df4:	ldr	r0, [sl]
   17df8:	strd	r6, [r9]
   17dfc:	mov	r1, r9
   17e00:	bl	13f24 <__assert_fail@plt+0x2714>
   17e04:	cmp	r9, r0
   17e08:	mov	r4, r0
   17e0c:	beq	17e30 <__assert_fail@plt+0x6620>
   17e10:	mov	r0, r9
   17e14:	bl	114a4 <free@plt>
   17e18:	cmp	r4, #0
   17e1c:	beq	17e5c <__assert_fail@plt+0x664c>
   17e20:	ldr	r2, [r4, #16]
   17e24:	mov	r3, #2
   17e28:	str	r2, [r8]
   17e2c:	strh	r3, [r8, #60]	; 0x3c
   17e30:	mov	r0, #1
   17e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e38:	ldr	r0, [r1]
   17e3c:	add	r1, r2, #72	; 0x48
   17e40:	bl	19934 <fts_children@@Base+0x3d0>
   17e44:	cmp	r0, #0
   17e48:	beq	17e30 <__assert_fail@plt+0x6620>
   17e4c:	mov	r3, #2
   17e50:	str	r8, [r8]
   17e54:	strh	r3, [r8, #60]	; 0x3c
   17e58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e5c:	mov	r0, #0
   17e60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17e64:	andeq	r0, r0, r2, lsl #2
   17e68:	push	{r4, r5, r6, lr}
   17e6c:	sub	sp, sp, #32
   17e70:	ldr	r6, [pc, #192]	; 17f38 <__assert_fail@plt+0x6728>
   17e74:	ldr	r3, [pc, #192]	; 17f3c <__assert_fail@plt+0x672c>
   17e78:	ldr	ip, [r6]
   17e7c:	and	r3, r3, r0
   17e80:	cmp	r3, #0
   17e84:	str	ip, [sp, #28]
   17e88:	bne	17ee0 <__assert_fail@plt+0x66d0>
   17e8c:	ldr	r3, [r2, #4]
   17e90:	cmp	r3, #0
   17e94:	beq	17ec8 <__assert_fail@plt+0x66b8>
   17e98:	ldr	r0, [r3, #48]	; 0x30
   17e9c:	cmp	r0, #0
   17ea0:	blt	17ec8 <__assert_fail@plt+0x66b8>
   17ea4:	ldr	ip, [r1]
   17ea8:	ldrd	r0, [ip, #16]
   17eac:	orrs	r1, r0, r1
   17eb0:	beq	17f34 <__assert_fail@plt+0x6724>
   17eb4:	ldrd	r4, [ip]
   17eb8:	ldrd	r0, [r2, #168]	; 0xa8
   17ebc:	cmp	r5, r1
   17ec0:	cmpeq	r4, r0
   17ec4:	beq	17f0c <__assert_fail@plt+0x66fc>
   17ec8:	ldr	r2, [sp, #28]
   17ecc:	ldr	r3, [r6]
   17ed0:	cmp	r2, r3
   17ed4:	bne	17f30 <__assert_fail@plt+0x6720>
   17ed8:	add	sp, sp, #32
   17edc:	pop	{r4, r5, r6, pc}
   17ee0:	ldrd	r4, [r2, #72]	; 0x48
   17ee4:	ldrd	r2, [r2, #168]	; 0xa8
   17ee8:	ldr	r0, [r1]
   17eec:	mov	r1, sp
   17ef0:	strd	r4, [sp]
   17ef4:	strd	r2, [sp, #8]
   17ef8:	bl	13f7c <__assert_fail@plt+0x276c>
   17efc:	cmp	r0, #0
   17f00:	beq	17f34 <__assert_fail@plt+0x6724>
   17f04:	bl	114a4 <free@plt>
   17f08:	b	17ec8 <__assert_fail@plt+0x66b8>
   17f0c:	ldrd	r4, [r2, #72]	; 0x48
   17f10:	ldrd	r0, [ip, #8]
   17f14:	cmp	r1, r5
   17f18:	cmpeq	r0, r4
   17f1c:	ldrdeq	r0, [r3, #72]	; 0x48
   17f20:	ldrdeq	r2, [r3, #168]	; 0xa8
   17f24:	strdeq	r0, [ip, #8]
   17f28:	strdeq	r2, [ip]
   17f2c:	b	17ec8 <__assert_fail@plt+0x66b8>
   17f30:	bl	114f8 <__stack_chk_fail@plt>
   17f34:	bl	117bc <abort@plt>
   17f38:	andeq	sl, r2, r0, lsl #30
   17f3c:	andeq	r0, r0, r2, lsl #2
   17f40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f44:	mov	r5, r0
   17f48:	ldr	r9, [r0]
   17f4c:	sub	sp, sp, #60	; 0x3c
   17f50:	ldr	r0, [r9, #12]
   17f54:	str	r1, [sp, #36]	; 0x24
   17f58:	cmp	r0, #0
   17f5c:	str	r0, [sp, #48]	; 0x30
   17f60:	beq	1825c <__assert_fail@plt+0x6a4c>
   17f64:	bl	11738 <dirfd@plt>
   17f68:	subs	r3, r0, #0
   17f6c:	str	r3, [sp, #44]	; 0x2c
   17f70:	blt	187ec <__assert_fail@plt+0x6fdc>
   17f74:	ldr	r3, [r5, #44]	; 0x2c
   17f78:	cmp	r3, #0
   17f7c:	beq	18534 <__assert_fail@plt+0x6d24>
   17f80:	ldr	r0, [r5, #48]	; 0x30
   17f84:	mvn	r3, #0
   17f88:	str	r3, [sp, #20]
   17f8c:	mov	r3, #1
   17f90:	str	r3, [sp, #52]	; 0x34
   17f94:	ldr	r2, [r9, #40]	; 0x28
   17f98:	ldr	r3, [r9, #28]
   17f9c:	sub	r1, r2, #1
   17fa0:	str	r2, [sp, #4]
   17fa4:	ldrb	r3, [r3, r1]
   17fa8:	str	r1, [sp, #32]
   17fac:	mov	sl, #0
   17fb0:	cmp	r3, #47	; 0x2f
   17fb4:	addne	r3, r2, #1
   17fb8:	strne	r3, [sp, #4]
   17fbc:	strne	r2, [sp, #32]
   17fc0:	ands	r0, r0, #4
   17fc4:	movne	r1, #47	; 0x2f
   17fc8:	ldrne	r3, [r5, #24]
   17fcc:	ldrne	r0, [sp, #32]
   17fd0:	streq	r0, [sp, #24]
   17fd4:	addne	r2, r3, r0
   17fd8:	strbne	r1, [r3, r0]
   17fdc:	addne	r3, r2, #1
   17fe0:	strne	r3, [sp, #24]
   17fe4:	ldr	r3, [r9, #48]	; 0x30
   17fe8:	ldr	fp, [r5, #36]	; 0x24
   17fec:	ldr	r2, [sp, #4]
   17ff0:	add	r3, r3, #1
   17ff4:	str	sl, [sp, #40]	; 0x28
   17ff8:	sub	fp, fp, r2
   17ffc:	str	r3, [sp, #16]
   18000:	str	sl, [sp, #28]
   18004:	mov	r7, sl
   18008:	str	sl, [sp, #8]
   1800c:	str	r9, [sp, #12]
   18010:	b	18060 <__assert_fail@plt+0x6850>
   18014:	mov	r3, #0
   18018:	str	r3, [r4, #88]	; 0x58
   1801c:	mov	r2, #2
   18020:	mov	r3, #0
   18024:	strd	r2, [r4, #120]	; 0x78
   18028:	ldr	r3, [sp, #8]
   1802c:	cmp	r3, #0
   18030:	mov	r3, #0
   18034:	str	r3, [r4, #8]
   18038:	ldr	r3, [pc, #2148]	; 188a4 <__assert_fail@plt+0x7094>
   1803c:	strne	r4, [sl, #8]
   18040:	streq	r4, [sp, #8]
   18044:	cmp	r7, r3
   18048:	beq	18164 <__assert_fail@plt+0x6954>
   1804c:	ldr	r3, [sp, #20]
   18050:	add	r7, r7, #1
   18054:	cmp	r7, r3
   18058:	bcs	183f0 <__assert_fail@plt+0x6be0>
   1805c:	mov	sl, r4
   18060:	ldr	r3, [sp, #12]
   18064:	ldr	r4, [r3, #12]
   18068:	cmp	r4, #0
   1806c:	beq	1854c <__assert_fail@plt+0x6d3c>
   18070:	bl	11678 <__errno_location@plt>
   18074:	mov	r3, #0
   18078:	mov	r8, r0
   1807c:	mov	r0, r4
   18080:	str	r3, [r8]
   18084:	bl	11714 <readdir64@plt>
   18088:	subs	r9, r0, #0
   1808c:	beq	18614 <__assert_fail@plt+0x6e04>
   18090:	ldr	r3, [r5, #48]	; 0x30
   18094:	tst	r3, #32
   18098:	bne	180a8 <__assert_fail@plt+0x6898>
   1809c:	ldrb	r3, [r9, #19]
   180a0:	cmp	r3, #46	; 0x2e
   180a4:	beq	181f0 <__assert_fail@plt+0x69e0>
   180a8:	add	r4, r9, #19
   180ac:	mov	r0, r4
   180b0:	bl	11654 <strlen@plt>
   180b4:	mov	r1, r4
   180b8:	mov	r2, r0
   180bc:	mov	r6, r0
   180c0:	mov	r0, r5
   180c4:	bl	17570 <__assert_fail@plt+0x5d60>
   180c8:	subs	r4, r0, #0
   180cc:	beq	1849c <__assert_fail@plt+0x6c8c>
   180d0:	cmp	fp, r6
   180d4:	bls	18178 <__assert_fail@plt+0x6968>
   180d8:	ldr	r3, [sp, #4]
   180dc:	adds	r6, r3, r6
   180e0:	bcs	1885c <__assert_fail@plt+0x704c>
   180e4:	ldr	r0, [r5, #48]	; 0x30
   180e8:	ldr	r1, [r5]
   180ec:	ldrd	r2, [r9]
   180f0:	ldr	ip, [sp, #16]
   180f4:	tst	r0, #4
   180f8:	str	r1, [r4, #4]
   180fc:	add	r1, r4, #176	; 0xb0
   18100:	str	ip, [r4, #48]	; 0x30
   18104:	strd	r2, [r4, #168]	; 0xa8
   18108:	str	r6, [r4, #40]	; 0x28
   1810c:	streq	r1, [r4, #24]
   18110:	bne	181d0 <__assert_fail@plt+0x69c0>
   18114:	ldr	r3, [r5, #44]	; 0x2c
   18118:	cmp	r3, #0
   1811c:	beq	18128 <__assert_fail@plt+0x6918>
   18120:	ands	r3, r0, #1024	; 0x400
   18124:	beq	1823c <__assert_fail@plt+0x6a2c>
   18128:	ldrb	r2, [r9, #18]
   1812c:	and	r0, r0, #24
   18130:	cmp	r0, #24
   18134:	sub	r3, r2, #1
   18138:	beq	18210 <__assert_fail@plt+0x6a00>
   1813c:	mov	r2, #11
   18140:	cmp	r3, #11
   18144:	strh	r2, [r4, #60]	; 0x3c
   18148:	bhi	18014 <__assert_fail@plt+0x6804>
   1814c:	ldr	r2, [pc, #1876]	; 188a8 <__assert_fail@plt+0x7098>
   18150:	ldr	r1, [r2, r3, lsl #2]
   18154:	mov	r2, #2
   18158:	mov	r3, #0
   1815c:	str	r1, [r4, #88]	; 0x58
   18160:	b	18024 <__assert_fail@plt+0x6814>
   18164:	ldr	r6, [r5, #44]	; 0x2c
   18168:	cmp	r6, #0
   1816c:	beq	183a4 <__assert_fail@plt+0x6b94>
   18170:	ldr	r7, [pc, #1844]	; 188ac <__assert_fail@plt+0x709c>
   18174:	b	1805c <__assert_fail@plt+0x684c>
   18178:	ldr	r3, [sp, #32]
   1817c:	add	r1, r5, #36	; 0x24
   18180:	add	r2, r3, #2
   18184:	add	r2, r2, r6
   18188:	add	r0, r5, #24
   1818c:	ldr	fp, [r5, #24]
   18190:	bl	17a74 <__assert_fail@plt+0x6264>
   18194:	cmp	r0, #0
   18198:	beq	1849c <__assert_fail@plt+0x6c8c>
   1819c:	ldr	r3, [r5, #24]
   181a0:	cmp	r3, fp
   181a4:	beq	18254 <__assert_fail@plt+0x6a44>
   181a8:	ldr	r2, [r5, #48]	; 0x30
   181ac:	tst	r2, #4
   181b0:	ldrne	r2, [sp, #4]
   181b4:	addne	r3, r3, r2
   181b8:	strne	r3, [sp, #24]
   181bc:	ldr	fp, [r5, #36]	; 0x24
   181c0:	ldr	r3, [sp, #4]
   181c4:	str	r0, [sp, #28]
   181c8:	sub	fp, fp, r3
   181cc:	b	180d8 <__assert_fail@plt+0x68c8>
   181d0:	ldr	r3, [r4, #28]
   181d4:	ldr	r2, [r4, #52]	; 0x34
   181d8:	str	r3, [r4, #24]
   181dc:	add	r2, r2, #1
   181e0:	ldr	r0, [sp, #24]
   181e4:	bl	11498 <memmove@plt>
   181e8:	ldr	r0, [r5, #48]	; 0x30
   181ec:	b	18114 <__assert_fail@plt+0x6904>
   181f0:	ldrb	r3, [r9, #20]
   181f4:	cmp	r3, #0
   181f8:	beq	18208 <__assert_fail@plt+0x69f8>
   181fc:	ldrh	r3, [r9, #20]
   18200:	cmp	r3, #46	; 0x2e
   18204:	bne	180a8 <__assert_fail@plt+0x6898>
   18208:	mov	r4, sl
   1820c:	b	1805c <__assert_fail@plt+0x684c>
   18210:	tst	r2, #251	; 0xfb
   18214:	beq	1813c <__assert_fail@plt+0x692c>
   18218:	mov	r2, #11
   1821c:	cmp	r3, #11
   18220:	strh	r2, [r4, #60]	; 0x3c
   18224:	bls	18484 <__assert_fail@plt+0x6c74>
   18228:	mov	r3, #0
   1822c:	str	r3, [r4, #88]	; 0x58
   18230:	mov	r2, #1
   18234:	mov	r3, #0
   18238:	b	18024 <__assert_fail@plt+0x6814>
   1823c:	mov	r2, r4
   18240:	add	r1, r5, #48	; 0x30
   18244:	ldr	r0, [r5, #32]
   18248:	bl	178e8 <__assert_fail@plt+0x60d8>
   1824c:	strh	r0, [r4, #60]	; 0x3c
   18250:	b	18028 <__assert_fail@plt+0x6818>
   18254:	ldr	r0, [sp, #28]
   18258:	b	181bc <__assert_fail@plt+0x69ac>
   1825c:	ldr	r3, [r5, #48]	; 0x30
   18260:	ldr	r1, [r9, #24]
   18264:	and	r2, r3, #516	; 0x204
   18268:	cmp	r2, #512	; 0x200
   1826c:	mvnne	r0, #99	; 0x63
   18270:	ldreq	r0, [r5, #32]
   18274:	ands	ip, r3, #16
   18278:	beq	18288 <__assert_fail@plt+0x6a78>
   1827c:	tst	r3, #1
   18280:	moveq	ip, #32768	; 0x8000
   18284:	bne	184ec <__assert_fail@plt+0x6cdc>
   18288:	lsl	r2, r3, #7
   1828c:	and	r2, r2, #262144	; 0x40000
   18290:	orr	r2, r2, ip
   18294:	orr	r2, r2, #540672	; 0x84000
   18298:	orr	r2, r2, #2304	; 0x900
   1829c:	bl	19be0 <fts_children@@Base+0x67c>
   182a0:	subs	r3, r0, #0
   182a4:	str	r3, [sp, #44]	; 0x2c
   182a8:	movlt	r3, #0
   182ac:	strlt	r3, [r9, #12]
   182b0:	blt	187c0 <__assert_fail@plt+0x6fb0>
   182b4:	bl	11720 <fdopendir@plt>
   182b8:	subs	r4, r0, #0
   182bc:	beq	187a4 <__assert_fail@plt+0x6f94>
   182c0:	ldrh	r3, [r9, #60]	; 0x3c
   182c4:	str	r4, [r9, #12]
   182c8:	cmp	r3, #11
   182cc:	beq	18724 <__assert_fail@plt+0x6f14>
   182d0:	ldr	r0, [r5, #48]	; 0x30
   182d4:	tst	r0, #256	; 0x100
   182d8:	bne	18698 <__assert_fail@plt+0x6e88>
   182dc:	ldr	r2, [r5, #44]	; 0x2c
   182e0:	ldr	r3, [pc, #1480]	; 188b0 <__assert_fail@plt+0x70a0>
   182e4:	cmp	r2, #0
   182e8:	mvnne	r3, #0
   182ec:	str	r3, [sp, #20]
   182f0:	ldr	r3, [sp, #36]	; 0x24
   182f4:	cmp	r3, #2
   182f8:	beq	18688 <__assert_fail@plt+0x6e78>
   182fc:	ldr	r3, [r5, #48]	; 0x30
   18300:	and	r3, r3, #56	; 0x38
   18304:	cmp	r3, #24
   18308:	beq	184fc <__assert_fail@plt+0x6cec>
   1830c:	ldr	r3, [sp, #36]	; 0x24
   18310:	mov	r6, #1
   18314:	sub	r7, r3, #3
   18318:	clz	r7, r7
   1831c:	lsr	r7, r7, #5
   18320:	ldr	r3, [r5, #48]	; 0x30
   18324:	tst	r3, #512	; 0x200
   18328:	bne	18740 <__assert_fail@plt+0x6f30>
   1832c:	mov	r3, #0
   18330:	ldr	r2, [sp, #44]	; 0x2c
   18334:	mov	r1, r9
   18338:	mov	r0, r5
   1833c:	bl	17bac <__assert_fail@plt+0x639c>
   18340:	cmp	r0, #0
   18344:	beq	1853c <__assert_fail@plt+0x6d2c>
   18348:	ldrh	r4, [r9, #62]	; 0x3e
   1834c:	tst	r7, r6
   18350:	ldr	r6, [r9, #12]
   18354:	orr	r4, r4, #1
   18358:	beq	18368 <__assert_fail@plt+0x6b58>
   1835c:	bl	11678 <__errno_location@plt>
   18360:	ldr	r3, [r0]
   18364:	str	r3, [r9, #32]
   18368:	strh	r4, [r9, #62]	; 0x3e
   1836c:	mov	r0, r6
   18370:	bl	117f8 <closedir@plt>
   18374:	ldr	r3, [sp, #44]	; 0x2c
   18378:	ldr	r0, [r5, #48]	; 0x30
   1837c:	mvn	r2, r3
   18380:	mov	r3, #0
   18384:	lsr	r2, r2, #31
   18388:	ands	r2, r2, r0, lsr #9
   1838c:	str	r3, [r9, #12]
   18390:	bne	18824 <__assert_fail@plt+0x7014>
   18394:	mov	r3, #0
   18398:	str	r3, [r9, #12]
   1839c:	str	r3, [sp, #52]	; 0x34
   183a0:	b	17f94 <__assert_fail@plt+0x6784>
   183a4:	ldr	r1, [sp, #44]	; 0x2c
   183a8:	ldr	r0, [sp, #12]
   183ac:	bl	17648 <__assert_fail@plt+0x5e38>
   183b0:	ldr	r3, [pc, #1276]	; 188b4 <__assert_fail@plt+0x70a4>
   183b4:	cmp	r0, r3
   183b8:	beq	183dc <__assert_fail@plt+0x6bcc>
   183bc:	ldr	r3, [pc, #1268]	; 188b8 <__assert_fail@plt+0x70a8>
   183c0:	cmp	r0, r3
   183c4:	beq	183dc <__assert_fail@plt+0x6bcc>
   183c8:	ldr	r3, [pc, #1260]	; 188bc <__assert_fail@plt+0x70ac>
   183cc:	cmp	r0, r3
   183d0:	movne	r3, #1
   183d4:	strne	r3, [sp, #40]	; 0x28
   183d8:	bne	18170 <__assert_fail@plt+0x6960>
   183dc:	ldr	r3, [sp, #20]
   183e0:	add	r7, r7, #1
   183e4:	cmp	r7, r3
   183e8:	str	r6, [sp, #40]	; 0x28
   183ec:	bcc	1805c <__assert_fail@plt+0x684c>
   183f0:	ldr	r3, [sp, #28]
   183f4:	ldr	r9, [sp, #12]
   183f8:	cmp	r3, #0
   183fc:	beq	1855c <__assert_fail@plt+0x6d4c>
   18400:	ldr	r3, [r5, #4]
   18404:	ldr	r1, [r5, #24]
   18408:	cmp	r3, #0
   1840c:	beq	1843c <__assert_fail@plt+0x6c2c>
   18410:	ldr	r2, [r3, #24]
   18414:	add	r0, r3, #176	; 0xb0
   18418:	cmp	r2, r0
   1841c:	ldrne	r0, [r3, #28]
   18420:	str	r1, [r3, #28]
   18424:	subne	r2, r2, r0
   18428:	addne	r2, r1, r2
   1842c:	strne	r2, [r3, #24]
   18430:	ldr	r3, [r3, #8]
   18434:	cmp	r3, #0
   18438:	bne	18410 <__assert_fail@plt+0x6c00>
   1843c:	ldr	r3, [sp, #8]
   18440:	b	18470 <__assert_fail@plt+0x6c60>
   18444:	ldr	r2, [r3, #24]
   18448:	cmp	r2, r0
   1844c:	ldrne	r0, [r3, #28]
   18450:	str	r1, [r3, #28]
   18454:	subne	r2, r2, r0
   18458:	addne	r2, r1, r2
   1845c:	strne	r2, [r3, #24]
   18460:	ldr	r2, [r3, #8]
   18464:	cmp	r2, #0
   18468:	ldreq	r2, [r3, #4]
   1846c:	mov	r3, r2
   18470:	ldr	r2, [r3, #48]	; 0x30
   18474:	add	r0, r3, #176	; 0xb0
   18478:	cmp	r2, #0
   1847c:	bge	18444 <__assert_fail@plt+0x6c34>
   18480:	b	1855c <__assert_fail@plt+0x6d4c>
   18484:	ldr	r2, [pc, #1052]	; 188a8 <__assert_fail@plt+0x7098>
   18488:	ldr	r1, [r2, r3, lsl #2]
   1848c:	mov	r2, #1
   18490:	mov	r3, #0
   18494:	str	r1, [r4, #88]	; 0x58
   18498:	b	18024 <__assert_fail@plt+0x6814>
   1849c:	ldr	r9, [sp, #12]
   184a0:	mov	r0, r4
   184a4:	ldr	r4, [r8]
   184a8:	bl	114a4 <free@plt>
   184ac:	ldr	r0, [sp, #8]
   184b0:	bl	175e4 <__assert_fail@plt+0x5dd4>
   184b4:	ldr	r0, [r9, #12]
   184b8:	bl	117f8 <closedir@plt>
   184bc:	ldr	r3, [r5, #48]	; 0x30
   184c0:	mov	r2, #0
   184c4:	orr	r3, r3, #16384	; 0x4000
   184c8:	mov	r1, #7
   184cc:	str	r2, [r9, #12]
   184d0:	strh	r1, [r9, #60]	; 0x3c
   184d4:	str	r2, [sp, #8]
   184d8:	str	r3, [r5, #48]	; 0x30
   184dc:	str	r4, [r8]
   184e0:	ldr	r0, [sp, #8]
   184e4:	add	sp, sp, #60	; 0x3c
   184e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184ec:	ldr	ip, [r9, #48]	; 0x30
   184f0:	cmp	ip, #0
   184f4:	movne	ip, #32768	; 0x8000
   184f8:	b	18288 <__assert_fail@plt+0x6a78>
   184fc:	ldr	r3, [r9, #92]	; 0x5c
   18500:	cmp	r3, #2
   18504:	bne	1830c <__assert_fail@plt+0x6afc>
   18508:	ldr	r1, [sp, #44]	; 0x2c
   1850c:	mov	r0, r9
   18510:	bl	1777c <__assert_fail@plt+0x5f6c>
   18514:	cmp	r0, #0
   18518:	beq	1830c <__assert_fail@plt+0x6afc>
   1851c:	ldr	r3, [sp, #36]	; 0x24
   18520:	cmp	r3, #3
   18524:	bne	18688 <__assert_fail@plt+0x6e78>
   18528:	mov	r6, #0
   1852c:	mov	r7, #1
   18530:	b	18320 <__assert_fail@plt+0x6b10>
   18534:	ldr	r3, [pc, #884]	; 188b0 <__assert_fail@plt+0x70a0>
   18538:	str	r3, [sp, #20]
   1853c:	mov	r3, #1
   18540:	str	r3, [sp, #52]	; 0x34
   18544:	ldr	r0, [r5, #48]	; 0x30
   18548:	b	17f94 <__assert_fail@plt+0x6784>
   1854c:	mov	r9, r3
   18550:	ldr	r3, [sp, #28]
   18554:	cmp	r3, #0
   18558:	bne	18400 <__assert_fail@plt+0x6bf0>
   1855c:	ldr	r3, [r5, #48]	; 0x30
   18560:	tst	r3, #4
   18564:	beq	18590 <__assert_fail@plt+0x6d80>
   18568:	ldr	r3, [r5, #36]	; 0x24
   1856c:	ldr	r2, [sp, #4]
   18570:	cmp	r7, #0
   18574:	cmpne	r3, r2
   18578:	ldreq	r3, [sp, #24]
   1857c:	subeq	r3, r3, #1
   18580:	streq	r3, [sp, #24]
   18584:	ldr	r2, [sp, #24]
   18588:	mov	r3, #0
   1858c:	strb	r3, [r2]
   18590:	ldrd	r2, [sp, #48]	; 0x30
   18594:	cmp	r2, #0
   18598:	movne	r3, #0
   1859c:	cmp	r3, #0
   185a0:	beq	185d8 <__assert_fail@plt+0x6dc8>
   185a4:	ldr	r3, [sp, #36]	; 0x24
   185a8:	cmp	r7, #0
   185ac:	cmpne	r3, #1
   185b0:	bne	185e0 <__assert_fail@plt+0x6dd0>
   185b4:	ldr	r3, [r9, #48]	; 0x30
   185b8:	cmp	r3, #0
   185bc:	bne	18784 <__assert_fail@plt+0x6f74>
   185c0:	mov	r0, r5
   185c4:	bl	17898 <__assert_fail@plt+0x6088>
   185c8:	adds	r0, r0, #0
   185cc:	movne	r0, #1
   185d0:	cmp	r0, #0
   185d4:	bne	18834 <__assert_fail@plt+0x7024>
   185d8:	cmp	r7, #0
   185dc:	beq	186e8 <__assert_fail@plt+0x6ed8>
   185e0:	ldr	r3, [sp, #40]	; 0x28
   185e4:	cmp	r3, #0
   185e8:	bne	18658 <__assert_fail@plt+0x6e48>
   185ec:	ldr	r3, [r5, #44]	; 0x2c
   185f0:	cmp	r3, #0
   185f4:	cmpne	r7, #1
   185f8:	beq	184e0 <__assert_fail@plt+0x6cd0>
   185fc:	mov	r2, r7
   18600:	ldr	r1, [sp, #8]
   18604:	mov	r0, r5
   18608:	add	sp, sp, #60	; 0x3c
   1860c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18610:	b	17498 <__assert_fail@plt+0x5c88>
   18614:	ldr	r3, [r8]
   18618:	ldr	r9, [sp, #12]
   1861c:	cmp	r3, #0
   18620:	beq	1863c <__assert_fail@plt+0x6e2c>
   18624:	ldr	r2, [sp, #48]	; 0x30
   18628:	str	r3, [r9, #32]
   1862c:	orrs	r2, r2, r7
   18630:	moveq	r2, #4
   18634:	movne	r2, #7
   18638:	strh	r2, [r9, #60]	; 0x3c
   1863c:	ldr	r0, [r9, #12]
   18640:	cmp	r0, #0
   18644:	beq	18550 <__assert_fail@plt+0x6d40>
   18648:	bl	117f8 <closedir@plt>
   1864c:	mov	r3, #0
   18650:	str	r3, [r9, #12]
   18654:	b	18550 <__assert_fail@plt+0x6d40>
   18658:	ldr	r3, [pc, #608]	; 188c0 <__assert_fail@plt+0x70b0>
   1865c:	mov	r2, r7
   18660:	str	r3, [r5, #44]	; 0x2c
   18664:	ldr	r1, [sp, #8]
   18668:	mov	r0, r5
   1866c:	bl	17498 <__assert_fail@plt+0x5c88>
   18670:	mov	r3, #0
   18674:	str	r3, [r5, #44]	; 0x2c
   18678:	str	r0, [sp, #8]
   1867c:	ldr	r0, [sp, #8]
   18680:	add	sp, sp, #60	; 0x3c
   18684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18688:	mov	r3, #0
   1868c:	str	r3, [sp, #52]	; 0x34
   18690:	ldr	r0, [r5, #48]	; 0x30
   18694:	b	17f94 <__assert_fail@plt+0x6784>
   18698:	add	r4, r5, #56	; 0x38
   1869c:	mov	r1, r4
   186a0:	mov	r2, r9
   186a4:	bl	17e68 <__assert_fail@plt+0x6658>
   186a8:	mov	r3, #0
   186ac:	mov	r2, r9
   186b0:	add	r1, r5, #48	; 0x30
   186b4:	ldr	r0, [r5, #32]
   186b8:	bl	178e8 <__assert_fail@plt+0x60d8>
   186bc:	mov	r1, r4
   186c0:	mov	r2, r9
   186c4:	ldr	r0, [r5, #48]	; 0x30
   186c8:	bl	17db8 <__assert_fail@plt+0x65a8>
   186cc:	subs	r4, r0, #0
   186d0:	bne	182dc <__assert_fail@plt+0x6acc>
   186d4:	bl	11678 <__errno_location@plt>
   186d8:	mov	r3, #12
   186dc:	str	r4, [sp, #8]
   186e0:	str	r3, [r0]
   186e4:	b	184e0 <__assert_fail@plt+0x6cd0>
   186e8:	ldr	r3, [sp, #36]	; 0x24
   186ec:	cmp	r3, #3
   186f0:	bne	18708 <__assert_fail@plt+0x6ef8>
   186f4:	ldrh	r3, [r9, #60]	; 0x3c
   186f8:	cmp	r3, #4
   186fc:	cmpne	r3, #7
   18700:	movne	r3, #6
   18704:	strhne	r3, [r9, #60]	; 0x3c
   18708:	ldr	r0, [sp, #8]
   1870c:	bl	175e4 <__assert_fail@plt+0x5dd4>
   18710:	mov	r3, #0
   18714:	str	r3, [sp, #8]
   18718:	ldr	r0, [sp, #8]
   1871c:	add	sp, sp, #60	; 0x3c
   18720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18724:	mov	r3, #0
   18728:	mov	r2, r9
   1872c:	add	r1, r5, #48	; 0x30
   18730:	ldr	r0, [r5, #32]
   18734:	bl	178e8 <__assert_fail@plt+0x60d8>
   18738:	strh	r0, [r9, #60]	; 0x3c
   1873c:	b	182dc <__assert_fail@plt+0x6acc>
   18740:	ldr	r0, [sp, #44]	; 0x2c
   18744:	mov	r2, #3
   18748:	ldr	r1, [pc, #372]	; 188c4 <__assert_fail@plt+0x70b4>
   1874c:	bl	19d20 <fts_children@@Base+0x7bc>
   18750:	subs	r3, r0, #0
   18754:	str	r3, [sp, #44]	; 0x2c
   18758:	bge	1832c <__assert_fail@plt+0x6b1c>
   1875c:	ldrh	r4, [r9, #62]	; 0x3e
   18760:	tst	r7, r6
   18764:	ldr	r6, [r9, #12]
   18768:	orr	r4, r4, #1
   1876c:	bne	1835c <__assert_fail@plt+0x6b4c>
   18770:	strh	r4, [r9, #62]	; 0x3e
   18774:	mov	r0, r6
   18778:	bl	117f8 <closedir@plt>
   1877c:	ldr	r0, [r5, #48]	; 0x30
   18780:	b	18394 <__assert_fail@plt+0x6b84>
   18784:	ldr	r3, [pc, #316]	; 188c8 <__assert_fail@plt+0x70b8>
   18788:	mvn	r2, #0
   1878c:	ldr	r1, [r9, #4]
   18790:	mov	r0, r5
   18794:	bl	17bac <__assert_fail@plt+0x639c>
   18798:	adds	r0, r0, #0
   1879c:	movne	r0, #1
   187a0:	b	185d0 <__assert_fail@plt+0x6dc0>
   187a4:	bl	11678 <__errno_location@plt>
   187a8:	mov	r5, r0
   187ac:	ldr	r0, [sp, #44]	; 0x2c
   187b0:	ldr	r6, [r5]
   187b4:	bl	117c8 <close@plt>
   187b8:	str	r6, [r5]
   187bc:	str	r4, [r9, #12]
   187c0:	ldr	r3, [sp, #36]	; 0x24
   187c4:	cmp	r3, #3
   187c8:	bne	18710 <__assert_fail@plt+0x6f00>
   187cc:	mov	r3, #4
   187d0:	strh	r3, [r9, #60]	; 0x3c
   187d4:	bl	11678 <__errno_location@plt>
   187d8:	mov	r3, #0
   187dc:	str	r3, [sp, #8]
   187e0:	ldr	r3, [r0]
   187e4:	str	r3, [r9, #32]
   187e8:	b	184e0 <__assert_fail@plt+0x6cd0>
   187ec:	ldr	r0, [r9, #12]
   187f0:	bl	117f8 <closedir@plt>
   187f4:	ldr	r3, [sp, #36]	; 0x24
   187f8:	mov	r4, #0
   187fc:	cmp	r3, #3
   18800:	str	r4, [r9, #12]
   18804:	bne	18710 <__assert_fail@plt+0x6f00>
   18808:	mov	r3, #4
   1880c:	strh	r3, [r9, #60]	; 0x3c
   18810:	bl	11678 <__errno_location@plt>
   18814:	str	r4, [sp, #8]
   18818:	ldr	r3, [r0]
   1881c:	str	r3, [r9, #32]
   18820:	b	184e0 <__assert_fail@plt+0x6cd0>
   18824:	ldr	r0, [sp, #44]	; 0x2c
   18828:	bl	117c8 <close@plt>
   1882c:	ldr	r0, [r5, #48]	; 0x30
   18830:	b	18394 <__assert_fail@plt+0x6b84>
   18834:	ldr	r3, [r5, #48]	; 0x30
   18838:	mov	r2, #7
   1883c:	orr	r3, r3, #16384	; 0x4000
   18840:	strh	r2, [r9, #60]	; 0x3c
   18844:	ldr	r0, [sp, #8]
   18848:	str	r3, [r5, #48]	; 0x30
   1884c:	bl	175e4 <__assert_fail@plt+0x5dd4>
   18850:	mov	r3, #0
   18854:	str	r3, [sp, #8]
   18858:	b	184e0 <__assert_fail@plt+0x6cd0>
   1885c:	ldr	r9, [sp, #12]
   18860:	mov	r0, r4
   18864:	bl	114a4 <free@plt>
   18868:	ldr	r0, [sp, #8]
   1886c:	bl	175e4 <__assert_fail@plt+0x5dd4>
   18870:	ldr	r0, [r9, #12]
   18874:	bl	117f8 <closedir@plt>
   18878:	ldr	r3, [r5, #48]	; 0x30
   1887c:	mov	r2, #0
   18880:	orr	r3, r3, #16384	; 0x4000
   18884:	mov	r0, #7
   18888:	mov	r1, #36	; 0x24
   1888c:	str	r2, [r9, #12]
   18890:	strh	r0, [r9, #60]	; 0x3c
   18894:	str	r2, [sp, #8]
   18898:	str	r3, [r5, #48]	; 0x30
   1889c:	str	r1, [r8]
   188a0:	b	184e0 <__assert_fail@plt+0x6cd0>
   188a4:	andeq	r2, r0, r0, lsl r7
   188a8:	andeq	sl, r1, r4, asr #28
   188ac:	andeq	r2, r0, r1, lsl r7
   188b0:	andeq	r8, r1, r0, lsr #13
   188b4:	andeq	r6, r0, r9, ror #18
   188b8:			; <UNDEFINED> instruction: 0x01021994
   188bc:			; <UNDEFINED> instruction: 0xff534d42
   188c0:	andeq	r7, r1, r8, ror #8
   188c4:	andeq	r0, r0, r6, lsl #8
   188c8:	andeq	sl, r1, r4, ror lr

000188cc <fts_open@@Base>:
   188cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188d0:	bic	r5, r1, #8128	; 0x1fc0
   188d4:	bic	r5, r5, #63	; 0x3f
   188d8:	cmp	r5, #0
   188dc:	sub	sp, sp, #20
   188e0:	bne	18c08 <fts_open@@Base+0x33c>
   188e4:	and	r3, r1, #516	; 0x204
   188e8:	cmp	r3, #516	; 0x204
   188ec:	mov	r7, r1
   188f0:	beq	18b9c <fts_open@@Base+0x2d0>
   188f4:	ands	r5, r1, #18
   188f8:	beq	18b9c <fts_open@@Base+0x2d0>
   188fc:	mov	r6, r0
   18900:	mov	r1, #1
   18904:	mov	r0, #96	; 0x60
   18908:	mov	r9, r2
   1890c:	bl	11438 <calloc@plt>
   18910:	subs	r5, r0, #0
   18914:	beq	18b60 <fts_open@@Base+0x294>
   18918:	tst	r7, #2
   1891c:	bicne	r3, r7, #512	; 0x200
   18920:	orrne	r3, r3, #4
   18924:	strne	r3, [r5, #48]	; 0x30
   18928:	ldr	r3, [r6]
   1892c:	streq	r7, [r5, #48]	; 0x30
   18930:	mvn	r2, #99	; 0x63
   18934:	cmp	r3, #0
   18938:	str	r9, [r5, #44]	; 0x2c
   1893c:	str	r2, [r5, #32]
   18940:	beq	18c24 <fts_open@@Base+0x358>
   18944:	mov	r8, r6
   18948:	mov	r4, #0
   1894c:	mov	r0, r3
   18950:	bl	11654 <strlen@plt>
   18954:	ldr	r3, [r8, #4]!
   18958:	cmp	r4, r0
   1895c:	movcc	r4, r0
   18960:	cmp	r3, #0
   18964:	bne	1894c <fts_open@@Base+0x80>
   18968:	add	r2, r4, #1
   1896c:	cmp	r2, #4096	; 0x1000
   18970:	movcc	r2, #4096	; 0x1000
   18974:	add	r1, r5, #36	; 0x24
   18978:	add	r0, r5, #24
   1897c:	bl	17a74 <__assert_fail@plt+0x6264>
   18980:	subs	fp, r0, #0
   18984:	beq	18b84 <fts_open@@Base+0x2b8>
   18988:	ldr	sl, [r6]
   1898c:	cmp	sl, #0
   18990:	beq	18bb4 <fts_open@@Base+0x2e8>
   18994:	mov	r2, #0
   18998:	ldr	r1, [pc, #704]	; 18c60 <fts_open@@Base+0x394>
   1899c:	mov	r0, r5
   189a0:	bl	17570 <__assert_fail@plt+0x5d60>
   189a4:	subs	sl, r0, #0
   189a8:	beq	18b7c <fts_open@@Base+0x2b0>
   189ac:	mvn	r3, #0
   189b0:	cmp	r9, #0
   189b4:	str	r3, [sl, #48]	; 0x30
   189b8:	str	r3, [sl, #56]	; 0x38
   189bc:	ldr	r4, [r6]
   189c0:	beq	189d0 <fts_open@@Base+0x104>
   189c4:	ldr	fp, [r5, #48]	; 0x30
   189c8:	lsr	fp, fp, #10
   189cc:	and	fp, fp, #1
   189d0:	cmp	r4, #0
   189d4:	beq	18c58 <fts_open@@Base+0x38c>
   189d8:	lsr	r7, r7, #12
   189dc:	mov	r3, #0
   189e0:	eor	r7, r7, #1
   189e4:	and	r2, r7, #1
   189e8:	str	r3, [sp, #8]
   189ec:	mov	r8, r3
   189f0:	mov	r7, r3
   189f4:	add	r3, r5, #48	; 0x30
   189f8:	str	r2, [sp, #4]
   189fc:	str	r3, [sp, #12]
   18a00:	b	18a38 <fts_open@@Base+0x16c>
   18a04:	cmp	r9, r1
   18a08:	mov	r0, #2
   18a0c:	mov	r1, #0
   18a10:	mov	r3, #11
   18a14:	strd	r0, [r4, #120]	; 0x78
   18a18:	strh	r3, [r4, #60]	; 0x3c
   18a1c:	beq	18bf4 <fts_open@@Base+0x328>
   18a20:	str	r7, [r4, #8]
   18a24:	mov	r7, r4
   18a28:	ldr	r4, [r6, #4]!
   18a2c:	add	r8, r8, #1
   18a30:	cmp	r4, #0
   18a34:	beq	18ae4 <fts_open@@Base+0x218>
   18a38:	mov	r0, r4
   18a3c:	bl	11654 <strlen@plt>
   18a40:	ldr	r3, [sp, #4]
   18a44:	cmp	r0, #2
   18a48:	movls	r3, #0
   18a4c:	andhi	r3, r3, #1
   18a50:	cmp	r3, #0
   18a54:	mov	r2, r0
   18a58:	bne	18bc4 <fts_open@@Base+0x2f8>
   18a5c:	mov	r1, r4
   18a60:	mov	r0, r5
   18a64:	bl	17570 <__assert_fail@plt+0x5d60>
   18a68:	subs	r4, r0, #0
   18a6c:	beq	18b6c <fts_open@@Base+0x2a0>
   18a70:	cmp	r7, #0
   18a74:	moveq	r3, #0
   18a78:	andne	r3, fp, #1
   18a7c:	add	r2, r4, #176	; 0xb0
   18a80:	mov	r1, #0
   18a84:	cmp	r3, #0
   18a88:	str	r1, [r4, #48]	; 0x30
   18a8c:	str	sl, [r4, #4]
   18a90:	str	r2, [r4, #24]
   18a94:	bne	18a04 <fts_open@@Base+0x138>
   18a98:	mov	r2, r4
   18a9c:	ldr	r1, [sp, #12]
   18aa0:	ldr	r0, [r5, #32]
   18aa4:	bl	178e8 <__assert_fail@plt+0x60d8>
   18aa8:	cmp	r9, #0
   18aac:	strh	r0, [r4, #60]	; 0x3c
   18ab0:	bne	18a20 <fts_open@@Base+0x154>
   18ab4:	cmp	r7, #0
   18ab8:	str	r9, [r4, #8]
   18abc:	streq	r4, [sp, #8]
   18ac0:	moveq	r7, r4
   18ac4:	beq	18a28 <fts_open@@Base+0x15c>
   18ac8:	ldr	r3, [sp, #8]
   18acc:	str	r4, [sp, #8]
   18ad0:	str	r4, [r3, #8]
   18ad4:	ldr	r4, [r6, #4]!
   18ad8:	add	r8, r8, #1
   18adc:	cmp	r4, #0
   18ae0:	bne	18a38 <fts_open@@Base+0x16c>
   18ae4:	cmp	r9, #0
   18ae8:	cmpne	r8, #1
   18aec:	bls	18b04 <fts_open@@Base+0x238>
   18af0:	mov	r1, r7
   18af4:	mov	r2, r8
   18af8:	mov	r0, r5
   18afc:	bl	17498 <__assert_fail@plt+0x5c88>
   18b00:	mov	r7, r0
   18b04:	mov	r2, #0
   18b08:	ldr	r1, [pc, #336]	; 18c60 <fts_open@@Base+0x394>
   18b0c:	mov	r0, r5
   18b10:	bl	17570 <__assert_fail@plt+0x5d60>
   18b14:	cmp	r0, #0
   18b18:	str	r0, [r5]
   18b1c:	beq	18b6c <fts_open@@Base+0x2a0>
   18b20:	mov	r2, #1
   18b24:	mov	r3, #9
   18b28:	str	r7, [r0, #8]
   18b2c:	str	r2, [r0, #48]	; 0x30
   18b30:	strh	r3, [r0, #60]	; 0x3c
   18b34:	add	r1, r5, #56	; 0x38
   18b38:	ldr	r0, [r5, #48]	; 0x30
   18b3c:	bl	17af0 <__assert_fail@plt+0x62e0>
   18b40:	cmp	r0, #0
   18b44:	beq	18b6c <fts_open@@Base+0x2a0>
   18b48:	ldr	r1, [r5, #48]	; 0x30
   18b4c:	tst	r1, #516	; 0x204
   18b50:	beq	18c2c <fts_open@@Base+0x360>
   18b54:	mvn	r1, #0
   18b58:	add	r0, r5, #60	; 0x3c
   18b5c:	bl	19aec <fts_children@@Base+0x588>
   18b60:	mov	r0, r5
   18b64:	add	sp, sp, #20
   18b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b6c:	mov	r0, r7
   18b70:	bl	175e4 <__assert_fail@plt+0x5dd4>
   18b74:	mov	r0, sl
   18b78:	bl	114a4 <free@plt>
   18b7c:	ldr	r0, [r5, #24]
   18b80:	bl	114a4 <free@plt>
   18b84:	mov	r0, r5
   18b88:	bl	114a4 <free@plt>
   18b8c:	mov	r5, #0
   18b90:	mov	r0, r5
   18b94:	add	sp, sp, #20
   18b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b9c:	bl	11678 <__errno_location@plt>
   18ba0:	mov	r3, #22
   18ba4:	str	r3, [r0]
   18ba8:	mov	r0, r5
   18bac:	add	sp, sp, #20
   18bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bb4:	cmp	r9, #0
   18bb8:	beq	18c50 <fts_open@@Base+0x384>
   18bbc:	mov	r4, sl
   18bc0:	b	189c4 <fts_open@@Base+0xf8>
   18bc4:	sub	r1, r0, #1
   18bc8:	add	r3, r4, r1
   18bcc:	ldrb	r1, [r4, r1]
   18bd0:	cmp	r1, #47	; 0x2f
   18bd4:	bne	18a5c <fts_open@@Base+0x190>
   18bd8:	ldrb	r1, [r3, #-1]!
   18bdc:	cmp	r1, #47	; 0x2f
   18be0:	bne	18a5c <fts_open@@Base+0x190>
   18be4:	sub	r2, r2, #1
   18be8:	cmp	r2, #1
   18bec:	bne	18bd8 <fts_open@@Base+0x30c>
   18bf0:	b	18a5c <fts_open@@Base+0x190>
   18bf4:	ldr	r3, [sp, #8]
   18bf8:	str	r9, [r4, #8]
   18bfc:	str	r4, [sp, #8]
   18c00:	str	r4, [r3, #8]
   18c04:	b	18ad4 <fts_open@@Base+0x208>
   18c08:	bl	11678 <__errno_location@plt>
   18c0c:	mov	r5, #0
   18c10:	mov	r3, #22
   18c14:	str	r3, [r0]
   18c18:	mov	r0, r5
   18c1c:	add	sp, sp, #20
   18c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c24:	mov	r2, #4096	; 0x1000
   18c28:	b	18974 <fts_open@@Base+0xa8>
   18c2c:	ldr	r2, [pc, #48]	; 18c64 <fts_open@@Base+0x398>
   18c30:	ldr	r0, [r5, #32]
   18c34:	bl	17b70 <__assert_fail@plt+0x6360>
   18c38:	cmp	r0, #0
   18c3c:	str	r0, [r5, #28]
   18c40:	ldrlt	r3, [r5, #48]	; 0x30
   18c44:	orrlt	r3, r3, #4
   18c48:	strlt	r3, [r5, #48]	; 0x30
   18c4c:	b	18b54 <fts_open@@Base+0x288>
   18c50:	mov	r7, sl
   18c54:	b	18b04 <fts_open@@Base+0x238>
   18c58:	mov	r7, r4
   18c5c:	b	18b04 <fts_open@@Base+0x238>
   18c60:			; <UNDEFINED> instruction: 0x0001a9bc
   18c64:	andeq	sl, r1, r8, ror lr

00018c68 <fts_close@@Base>:
   18c68:	ldr	r3, [r0]
   18c6c:	push	{r4, r5, r6, lr}
   18c70:	cmp	r3, #0
   18c74:	mov	r5, r0
   18c78:	beq	18cb4 <fts_close@@Base+0x4c>
   18c7c:	ldr	r2, [r3, #48]	; 0x30
   18c80:	cmp	r2, #0
   18c84:	blt	18dcc <fts_close@@Base+0x164>
   18c88:	ldr	r4, [r3, #8]
   18c8c:	mov	r0, r3
   18c90:	cmp	r4, #0
   18c94:	ldreq	r4, [r3, #4]
   18c98:	bl	114a4 <free@plt>
   18c9c:	mov	r3, r4
   18ca0:	ldr	r2, [r4, #48]	; 0x30
   18ca4:	cmp	r2, #0
   18ca8:	bge	18c88 <fts_close@@Base+0x20>
   18cac:	mov	r0, r4
   18cb0:	bl	114a4 <free@plt>
   18cb4:	ldr	r0, [r5, #4]
   18cb8:	cmp	r0, #0
   18cbc:	beq	18cc4 <fts_close@@Base+0x5c>
   18cc0:	bl	175e4 <__assert_fail@plt+0x5dd4>
   18cc4:	ldr	r0, [r5, #8]
   18cc8:	bl	114a4 <free@plt>
   18ccc:	ldr	r0, [r5, #24]
   18cd0:	bl	114a4 <free@plt>
   18cd4:	ldr	r3, [r5, #48]	; 0x30
   18cd8:	tst	r3, #512	; 0x200
   18cdc:	bne	18d40 <fts_close@@Base+0xd8>
   18ce0:	tst	r3, #4
   18ce4:	beq	18d6c <fts_close@@Base+0x104>
   18ce8:	mov	r4, #0
   18cec:	add	r0, r5, #60	; 0x3c
   18cf0:	bl	17618 <__assert_fail@plt+0x5e08>
   18cf4:	ldr	r0, [r5, #52]	; 0x34
   18cf8:	cmp	r0, #0
   18cfc:	beq	18d04 <fts_close@@Base+0x9c>
   18d00:	bl	13af8 <__assert_fail@plt+0x22e8>
   18d04:	ldr	r2, [r5, #48]	; 0x30
   18d08:	ldr	r3, [pc, #212]	; 18de4 <fts_close@@Base+0x17c>
   18d0c:	ldr	r0, [r5, #56]	; 0x38
   18d10:	and	r3, r3, r2
   18d14:	cmp	r3, #0
   18d18:	beq	18d64 <fts_close@@Base+0xfc>
   18d1c:	cmp	r0, #0
   18d20:	beq	18d28 <fts_close@@Base+0xc0>
   18d24:	bl	13af8 <__assert_fail@plt+0x22e8>
   18d28:	mov	r0, r5
   18d2c:	bl	114a4 <free@plt>
   18d30:	cmp	r4, #0
   18d34:	bne	18dd4 <fts_close@@Base+0x16c>
   18d38:	mov	r0, r4
   18d3c:	pop	{r4, r5, r6, pc}
   18d40:	ldr	r0, [r5, #32]
   18d44:	cmp	r0, #0
   18d48:	blt	18ce8 <fts_close@@Base+0x80>
   18d4c:	bl	117c8 <close@plt>
   18d50:	cmp	r0, #0
   18d54:	beq	18ce8 <fts_close@@Base+0x80>
   18d58:	bl	11678 <__errno_location@plt>
   18d5c:	ldr	r4, [r0]
   18d60:	b	18cec <fts_close@@Base+0x84>
   18d64:	bl	114a4 <free@plt>
   18d68:	b	18d28 <fts_close@@Base+0xc0>
   18d6c:	ldr	r0, [r5, #28]
   18d70:	bl	11744 <fchdir@plt>
   18d74:	cmp	r0, #0
   18d78:	bne	18d9c <fts_close@@Base+0x134>
   18d7c:	ldr	r0, [r5, #28]
   18d80:	bl	117c8 <close@plt>
   18d84:	cmp	r0, #0
   18d88:	beq	18ce8 <fts_close@@Base+0x80>
   18d8c:	bl	11678 <__errno_location@plt>
   18d90:	mov	r6, r0
   18d94:	ldr	r4, [r6]
   18d98:	b	18cec <fts_close@@Base+0x84>
   18d9c:	bl	11678 <__errno_location@plt>
   18da0:	mov	r6, r0
   18da4:	ldr	r0, [r5, #28]
   18da8:	ldr	r4, [r6]
   18dac:	bl	117c8 <close@plt>
   18db0:	clz	r3, r4
   18db4:	lsr	r3, r3, #5
   18db8:	cmp	r0, #0
   18dbc:	moveq	r3, #0
   18dc0:	cmp	r3, #0
   18dc4:	beq	18cec <fts_close@@Base+0x84>
   18dc8:	b	18d94 <fts_close@@Base+0x12c>
   18dcc:	mov	r4, r3
   18dd0:	b	18cac <fts_close@@Base+0x44>
   18dd4:	bl	11678 <__errno_location@plt>
   18dd8:	str	r4, [r0]
   18ddc:	mvn	r4, #0
   18de0:	b	18d38 <fts_close@@Base+0xd0>
   18de4:	andeq	r0, r0, r2, lsl #2

00018de8 <fts_read@@Base>:
   18de8:	push	{r4, r5, r6, r7, r8, lr}
   18dec:	ldr	r4, [r0]
   18df0:	cmp	r4, #0
   18df4:	beq	18f14 <fts_read@@Base+0x12c>
   18df8:	ldr	r1, [r0, #48]	; 0x30
   18dfc:	ands	r3, r1, #16384	; 0x4000
   18e00:	bne	18f14 <fts_read@@Base+0x12c>
   18e04:	ldrh	r2, [r4, #64]	; 0x40
   18e08:	mov	r8, r0
   18e0c:	mov	r0, #3
   18e10:	cmp	r2, #1
   18e14:	strh	r0, [r4, #64]	; 0x40
   18e18:	beq	191d0 <fts_read@@Base+0x3e8>
   18e1c:	cmp	r2, #2
   18e20:	ldrh	r3, [r4, #60]	; 0x3c
   18e24:	beq	18f20 <fts_read@@Base+0x138>
   18e28:	cmp	r3, #1
   18e2c:	bne	18e5c <fts_read@@Base+0x74>
   18e30:	b	18fcc <fts_read@@Base+0x1e4>
   18e34:	mov	r0, r4
   18e38:	str	r5, [r8]
   18e3c:	bl	114a4 <free@plt>
   18e40:	ldr	r4, [r5, #48]	; 0x30
   18e44:	cmp	r4, #0
   18e48:	beq	19014 <fts_read@@Base+0x22c>
   18e4c:	ldrh	r3, [r5, #64]	; 0x40
   18e50:	mov	r4, r5
   18e54:	cmp	r3, #4
   18e58:	bne	190c4 <fts_read@@Base+0x2dc>
   18e5c:	ldr	r5, [r4, #8]
   18e60:	cmp	r5, #0
   18e64:	bne	18e34 <fts_read@@Base+0x4c>
   18e68:	ldr	r6, [r4, #4]
   18e6c:	ldr	r3, [r6, #12]
   18e70:	cmp	r3, #0
   18e74:	bne	19368 <fts_read@@Base+0x580>
   18e78:	str	r6, [r8]
   18e7c:	mov	r0, r4
   18e80:	bl	114a4 <free@plt>
   18e84:	ldr	r3, [r6, #48]	; 0x30
   18e88:	cmn	r3, #1
   18e8c:	beq	1929c <fts_read@@Base+0x4b4>
   18e90:	ldrh	r3, [r6, #60]	; 0x3c
   18e94:	cmp	r3, #11
   18e98:	beq	19520 <fts_read@@Base+0x738>
   18e9c:	ldr	r3, [r6, #40]	; 0x28
   18ea0:	ldr	r2, [r8, #24]
   18ea4:	mov	r1, #0
   18ea8:	strb	r1, [r2, r3]
   18eac:	ldr	r3, [r6, #48]	; 0x30
   18eb0:	cmp	r3, r1
   18eb4:	beq	192bc <fts_read@@Base+0x4d4>
   18eb8:	ldrh	r3, [r6, #62]	; 0x3e
   18ebc:	tst	r3, #2
   18ec0:	bne	19250 <fts_read@@Base+0x468>
   18ec4:	tst	r3, #1
   18ec8:	beq	193f0 <fts_read@@Base+0x608>
   18ecc:	ldrh	r3, [r6, #60]	; 0x3c
   18ed0:	ldr	r0, [r8, #48]	; 0x30
   18ed4:	cmp	r3, #2
   18ed8:	beq	18f08 <fts_read@@Base+0x120>
   18edc:	ldr	r3, [r6, #32]
   18ee0:	cmp	r3, #0
   18ee4:	movne	r3, #7
   18ee8:	strhne	r3, [r6, #60]	; 0x3c
   18eec:	bne	18f08 <fts_read@@Base+0x120>
   18ef0:	mov	r3, #6
   18ef4:	strh	r3, [r6, #60]	; 0x3c
   18ef8:	mov	r2, r6
   18efc:	add	r1, r8, #56	; 0x38
   18f00:	bl	17e68 <__assert_fail@plt+0x6658>
   18f04:	ldr	r0, [r8, #48]	; 0x30
   18f08:	tst	r0, #16384	; 0x4000
   18f0c:	moveq	r4, r6
   18f10:	beq	18f18 <fts_read@@Base+0x130>
   18f14:	mov	r4, #0
   18f18:	mov	r0, r4
   18f1c:	pop	{r4, r5, r6, r7, r8, pc}
   18f20:	sub	r2, r3, #12
   18f24:	cmp	r2, #1
   18f28:	bls	19160 <fts_read@@Base+0x378>
   18f2c:	cmp	r3, #1
   18f30:	bne	18e5c <fts_read@@Base+0x74>
   18f34:	tst	r1, #64	; 0x40
   18f38:	beq	18f50 <fts_read@@Base+0x168>
   18f3c:	ldrd	r6, [r4, #72]	; 0x48
   18f40:	ldrd	r2, [r8, #16]
   18f44:	cmp	r7, r3
   18f48:	cmpeq	r6, r2
   18f4c:	bne	18fd4 <fts_read@@Base+0x1ec>
   18f50:	ldr	r0, [r8, #4]
   18f54:	cmp	r0, #0
   18f58:	beq	191fc <fts_read@@Base+0x414>
   18f5c:	tst	r1, #8192	; 0x2000
   18f60:	bne	191e8 <fts_read@@Base+0x400>
   18f64:	ldr	r3, [r4, #24]
   18f68:	mvn	r2, #0
   18f6c:	mov	r1, r4
   18f70:	mov	r0, r8
   18f74:	bl	17bac <__assert_fail@plt+0x639c>
   18f78:	cmp	r0, #0
   18f7c:	beq	19284 <fts_read@@Base+0x49c>
   18f80:	bl	11678 <__errno_location@plt>
   18f84:	ldrh	r3, [r4, #62]	; 0x3e
   18f88:	ldr	r5, [r8, #4]
   18f8c:	orr	r3, r3, #1
   18f90:	cmp	r5, #0
   18f94:	ldr	r2, [r0]
   18f98:	strh	r3, [r4, #62]	; 0x3e
   18f9c:	str	r2, [r4, #32]
   18fa0:	beq	18fc0 <fts_read@@Base+0x1d8>
   18fa4:	mov	r3, r5
   18fa8:	ldr	r2, [r3, #4]
   18fac:	ldr	r2, [r2, #24]
   18fb0:	str	r2, [r3, #24]
   18fb4:	ldr	r3, [r3, #8]
   18fb8:	cmp	r3, #0
   18fbc:	bne	18fa8 <fts_read@@Base+0x1c0>
   18fc0:	mov	r3, #0
   18fc4:	str	r3, [r8, #4]
   18fc8:	b	190cc <fts_read@@Base+0x2e4>
   18fcc:	cmp	r2, #4
   18fd0:	bne	18f34 <fts_read@@Base+0x14c>
   18fd4:	ldrh	r3, [r4, #62]	; 0x3e
   18fd8:	tst	r3, #2
   18fdc:	bne	193b8 <fts_read@@Base+0x5d0>
   18fe0:	ldr	r0, [r8, #4]
   18fe4:	cmp	r0, #0
   18fe8:	beq	18ff8 <fts_read@@Base+0x210>
   18fec:	bl	175e4 <__assert_fail@plt+0x5dd4>
   18ff0:	mov	r3, #0
   18ff4:	str	r3, [r8, #4]
   18ff8:	mov	r3, #6
   18ffc:	strh	r3, [r4, #60]	; 0x3c
   19000:	mov	r2, r4
   19004:	add	r1, r8, #56	; 0x38
   19008:	ldr	r0, [r8, #48]	; 0x30
   1900c:	bl	17e68 <__assert_fail@plt+0x6658>
   19010:	b	18f18 <fts_read@@Base+0x130>
   19014:	mov	r0, r8
   19018:	bl	17898 <__assert_fail@plt+0x6088>
   1901c:	cmp	r0, #0
   19020:	bne	193a0 <fts_read@@Base+0x5b8>
   19024:	ldr	r2, [r8, #48]	; 0x30
   19028:	ldr	r3, [pc, #1268]	; 19524 <fts_read@@Base+0x73c>
   1902c:	ldr	r0, [r8, #56]	; 0x38
   19030:	and	r3, r3, r2
   19034:	cmp	r3, #0
   19038:	beq	193b0 <fts_read@@Base+0x5c8>
   1903c:	cmp	r0, #0
   19040:	beq	19048 <fts_read@@Base+0x260>
   19044:	bl	13af8 <__assert_fail@plt+0x22e8>
   19048:	ldr	r2, [r5, #52]	; 0x34
   1904c:	add	r4, r5, #176	; 0xb0
   19050:	str	r2, [r5, #40]	; 0x28
   19054:	mov	r1, r4
   19058:	add	r2, r2, #1
   1905c:	ldr	r0, [r8, #24]
   19060:	bl	11498 <memmove@plt>
   19064:	mov	r0, r4
   19068:	mov	r1, #47	; 0x2f
   1906c:	bl	116fc <strrchr@plt>
   19070:	cmp	r0, #0
   19074:	beq	190a4 <fts_read@@Base+0x2bc>
   19078:	cmp	r4, r0
   1907c:	beq	1928c <fts_read@@Base+0x4a4>
   19080:	add	r6, r0, #1
   19084:	mov	r0, r6
   19088:	bl	11654 <strlen@plt>
   1908c:	mov	r1, r6
   19090:	mov	r7, r0
   19094:	add	r2, r7, #1
   19098:	mov	r0, r4
   1909c:	bl	11498 <memmove@plt>
   190a0:	str	r7, [r5, #52]	; 0x34
   190a4:	ldr	r3, [r8, #24]
   190a8:	add	r1, r8, #56	; 0x38
   190ac:	str	r3, [r5, #28]
   190b0:	str	r3, [r5, #24]
   190b4:	ldr	r0, [r8, #48]	; 0x30
   190b8:	bl	17af0 <__assert_fail@plt+0x62e0>
   190bc:	ldrh	r0, [r5, #60]	; 0x3c
   190c0:	b	19110 <fts_read@@Base+0x328>
   190c4:	cmp	r3, #2
   190c8:	beq	193c4 <fts_read@@Base+0x5dc>
   190cc:	ldr	r3, [r5, #4]
   190d0:	mov	ip, #47	; 0x2f
   190d4:	ldr	r2, [r8, #24]
   190d8:	ldr	r1, [r3, #40]	; 0x28
   190dc:	ldr	r0, [r3, #28]
   190e0:	sub	r3, r1, #1
   190e4:	ldrb	r0, [r0, r3]
   190e8:	cmp	r0, ip
   190ec:	movne	r3, r1
   190f0:	add	r0, r2, r3
   190f4:	strb	ip, [r2, r3]
   190f8:	ldr	r2, [r5, #52]	; 0x34
   190fc:	add	r0, r0, #1
   19100:	add	r2, r2, #1
   19104:	add	r1, r5, #176	; 0xb0
   19108:	bl	11498 <memmove@plt>
   1910c:	ldrh	r0, [r5, #60]	; 0x3c
   19110:	cmp	r0, #11
   19114:	str	r5, [r8]
   19118:	beq	19190 <fts_read@@Base+0x3a8>
   1911c:	cmp	r0, #1
   19120:	bne	191ac <fts_read@@Base+0x3c4>
   19124:	ldr	r3, [r5, #48]	; 0x30
   19128:	cmp	r3, #0
   1912c:	beq	191c0 <fts_read@@Base+0x3d8>
   19130:	mov	r4, r5
   19134:	mov	r2, r5
   19138:	add	r1, r8, #56	; 0x38
   1913c:	ldr	r0, [r8, #48]	; 0x30
   19140:	bl	17db8 <__assert_fail@plt+0x65a8>
   19144:	subs	r5, r0, #0
   19148:	bne	18f18 <fts_read@@Base+0x130>
   1914c:	bl	11678 <__errno_location@plt>
   19150:	mov	r3, #12
   19154:	mov	r4, r5
   19158:	str	r3, [r0]
   1915c:	b	18f18 <fts_read@@Base+0x130>
   19160:	mov	r3, #1
   19164:	mov	r2, r4
   19168:	add	r1, r8, #48	; 0x30
   1916c:	ldr	r0, [r8, #32]
   19170:	bl	178e8 <__assert_fail@plt+0x60d8>
   19174:	cmp	r0, #1
   19178:	strh	r0, [r4, #60]	; 0x3c
   1917c:	beq	19434 <fts_read@@Base+0x64c>
   19180:	cmp	r0, #11
   19184:	str	r4, [r8]
   19188:	bne	18f18 <fts_read@@Base+0x130>
   1918c:	mov	r5, r4
   19190:	ldrd	r2, [r5, #120]	; 0x78
   19194:	cmp	r3, #0
   19198:	cmpeq	r2, #2
   1919c:	beq	192f8 <fts_read@@Base+0x510>
   191a0:	cmp	r3, #0
   191a4:	cmpeq	r2, #1
   191a8:	bne	19520 <fts_read@@Base+0x738>
   191ac:	mov	r4, r5
   191b0:	mov	r0, r4
   191b4:	pop	{r4, r5, r6, r7, r8, pc}
   191b8:	cmp	r0, #1
   191bc:	bne	191ac <fts_read@@Base+0x3c4>
   191c0:	ldrd	r2, [r5, #72]	; 0x48
   191c4:	mov	r4, r5
   191c8:	strd	r2, [r8, #16]
   191cc:	b	19134 <fts_read@@Base+0x34c>
   191d0:	mov	r2, r4
   191d4:	add	r1, r8, #48	; 0x30
   191d8:	ldr	r0, [r8, #32]
   191dc:	bl	178e8 <__assert_fail@plt+0x60d8>
   191e0:	strh	r0, [r4, #60]	; 0x3c
   191e4:	b	18f18 <fts_read@@Base+0x130>
   191e8:	bic	r1, r1, #8192	; 0x2000
   191ec:	str	r1, [r8, #48]	; 0x30
   191f0:	bl	175e4 <__assert_fail@plt+0x5dd4>
   191f4:	mov	r3, #0
   191f8:	str	r3, [r8, #4]
   191fc:	mov	r1, #3
   19200:	mov	r0, r8
   19204:	bl	17f40 <__assert_fail@plt+0x6730>
   19208:	cmp	r0, #0
   1920c:	mov	r5, r0
   19210:	str	r0, [r8, #4]
   19214:	bne	18fc0 <fts_read@@Base+0x1d8>
   19218:	ldr	r0, [r8, #48]	; 0x30
   1921c:	tst	r0, #16384	; 0x4000
   19220:	bne	18f14 <fts_read@@Base+0x12c>
   19224:	ldr	r3, [r4, #32]
   19228:	cmp	r3, #0
   1922c:	beq	19240 <fts_read@@Base+0x458>
   19230:	ldrh	r3, [r4, #60]	; 0x3c
   19234:	cmp	r3, #4
   19238:	movne	r3, #7
   1923c:	strhne	r3, [r4, #60]	; 0x3c
   19240:	add	r1, r8, #56	; 0x38
   19244:	mov	r2, r4
   19248:	bl	17e68 <__assert_fail@plt+0x6658>
   1924c:	b	18f18 <fts_read@@Base+0x130>
   19250:	ldr	r3, [r8, #48]	; 0x30
   19254:	ldr	r1, [r6, #36]	; 0x24
   19258:	tst	r3, #4
   1925c:	bne	19278 <fts_read@@Base+0x490>
   19260:	tst	r3, #512	; 0x200
   19264:	beq	1941c <fts_read@@Base+0x634>
   19268:	mov	r2, #1
   1926c:	mov	r0, r8
   19270:	bl	17810 <__assert_fail@plt+0x6000>
   19274:	ldr	r1, [r6, #36]	; 0x24
   19278:	mov	r0, r1
   1927c:	bl	117c8 <close@plt>
   19280:	b	18ecc <fts_read@@Base+0xe4>
   19284:	ldr	r5, [r8, #4]
   19288:	b	18fc0 <fts_read@@Base+0x1d8>
   1928c:	ldrb	r3, [r4, #1]
   19290:	cmp	r3, #0
   19294:	beq	190a4 <fts_read@@Base+0x2bc>
   19298:	b	19080 <fts_read@@Base+0x298>
   1929c:	mov	r0, r6
   192a0:	bl	114a4 <free@plt>
   192a4:	bl	11678 <__errno_location@plt>
   192a8:	mov	r3, #0
   192ac:	mov	r4, r3
   192b0:	str	r3, [r0]
   192b4:	str	r3, [r8]
   192b8:	b	18f18 <fts_read@@Base+0x130>
   192bc:	mov	r0, r8
   192c0:	bl	17898 <__assert_fail@plt+0x6088>
   192c4:	cmp	r0, #0
   192c8:	beq	18ecc <fts_read@@Base+0xe4>
   192cc:	bl	11678 <__errno_location@plt>
   192d0:	ldr	r3, [r8, #48]	; 0x30
   192d4:	orr	r3, r3, #16384	; 0x4000
   192d8:	ldr	r2, [r0]
   192dc:	str	r2, [r6, #32]
   192e0:	str	r3, [r8, #48]	; 0x30
   192e4:	ldrh	r3, [r6, #60]	; 0x3c
   192e8:	cmp	r3, #2
   192ec:	beq	18f14 <fts_read@@Base+0x12c>
   192f0:	ldr	r0, [r8, #48]	; 0x30
   192f4:	b	18edc <fts_read@@Base+0xf4>
   192f8:	ldr	r4, [r5, #4]
   192fc:	ldr	r0, [r8, #32]
   19300:	ldr	r3, [r4, #56]	; 0x38
   19304:	cmp	r3, #0
   19308:	bne	1931c <fts_read@@Base+0x534>
   1930c:	ldr	r3, [r8, #48]	; 0x30
   19310:	and	r3, r3, #24
   19314:	cmp	r3, #24
   19318:	beq	194ac <fts_read@@Base+0x6c4>
   1931c:	mov	r3, #0
   19320:	mov	r2, r5
   19324:	add	r1, r8, #48	; 0x30
   19328:	bl	178e8 <__assert_fail@plt+0x60d8>
   1932c:	ldr	r3, [r5, #88]	; 0x58
   19330:	and	r3, r3, #61440	; 0xf000
   19334:	cmp	r3, #16384	; 0x4000
   19338:	strh	r0, [r5, #60]	; 0x3c
   1933c:	bne	1911c <fts_read@@Base+0x334>
   19340:	ldr	r3, [r5, #48]	; 0x30
   19344:	cmp	r3, #0
   19348:	beq	191b8 <fts_read@@Base+0x3d0>
   1934c:	ldr	r3, [r4, #56]	; 0x38
   19350:	sub	r3, r3, #1
   19354:	cmn	r3, #3
   19358:	strls	r3, [r4, #56]	; 0x38
   1935c:	cmp	r0, #1
   19360:	beq	19130 <fts_read@@Base+0x348>
   19364:	b	191ac <fts_read@@Base+0x3c4>
   19368:	ldr	r3, [r6, #40]	; 0x28
   1936c:	ldr	r2, [r8, #24]
   19370:	str	r6, [r8]
   19374:	mov	r1, #3
   19378:	strb	r5, [r2, r3]
   1937c:	mov	r0, r8
   19380:	bl	17f40 <__assert_fail@plt+0x6730>
   19384:	subs	r5, r0, #0
   19388:	bne	19410 <fts_read@@Base+0x628>
   1938c:	ldr	r3, [r8, #48]	; 0x30
   19390:	tst	r3, #16384	; 0x4000
   19394:	bne	18f14 <fts_read@@Base+0x12c>
   19398:	ldr	r6, [r4, #4]
   1939c:	b	18e78 <fts_read@@Base+0x90>
   193a0:	ldr	r3, [r8, #48]	; 0x30
   193a4:	orr	r3, r3, #16384	; 0x4000
   193a8:	str	r3, [r8, #48]	; 0x30
   193ac:	b	18f18 <fts_read@@Base+0x130>
   193b0:	bl	114a4 <free@plt>
   193b4:	b	19048 <fts_read@@Base+0x260>
   193b8:	ldr	r0, [r4, #36]	; 0x24
   193bc:	bl	117c8 <close@plt>
   193c0:	b	18fe0 <fts_read@@Base+0x1f8>
   193c4:	mov	r3, #1
   193c8:	mov	r2, r5
   193cc:	add	r1, r8, #48	; 0x30
   193d0:	ldr	r0, [r8, #32]
   193d4:	bl	178e8 <__assert_fail@plt+0x60d8>
   193d8:	cmp	r0, #1
   193dc:	strh	r0, [r5, #60]	; 0x3c
   193e0:	beq	19478 <fts_read@@Base+0x690>
   193e4:	mov	r3, #3
   193e8:	strh	r3, [r5, #64]	; 0x40
   193ec:	b	190cc <fts_read@@Base+0x2e4>
   193f0:	ldr	r3, [pc, #304]	; 19528 <fts_read@@Base+0x740>
   193f4:	mvn	r2, #0
   193f8:	ldr	r1, [r6, #4]
   193fc:	mov	r0, r8
   19400:	bl	17bac <__assert_fail@plt+0x639c>
   19404:	cmp	r0, #0
   19408:	beq	18ecc <fts_read@@Base+0xe4>
   1940c:	b	192cc <fts_read@@Base+0x4e4>
   19410:	mov	r0, r4
   19414:	bl	114a4 <free@plt>
   19418:	b	190cc <fts_read@@Base+0x2e4>
   1941c:	mov	r0, r1
   19420:	bl	11744 <fchdir@plt>
   19424:	cmp	r0, #0
   19428:	bne	194cc <fts_read@@Base+0x6e4>
   1942c:	ldr	r1, [r6, #36]	; 0x24
   19430:	b	19278 <fts_read@@Base+0x490>
   19434:	ldr	r1, [r8, #48]	; 0x30
   19438:	tst	r1, #4
   1943c:	strne	r4, [r8]
   19440:	movne	r5, r4
   19444:	bne	19124 <fts_read@@Base+0x33c>
   19448:	ldr	r2, [pc, #220]	; 1952c <fts_read@@Base+0x744>
   1944c:	ldr	r0, [r8, #32]
   19450:	bl	17b70 <__assert_fail@plt+0x6360>
   19454:	cmp	r0, #0
   19458:	str	r0, [r4, #36]	; 0x24
   1945c:	blt	194ec <fts_read@@Base+0x704>
   19460:	ldrh	r3, [r4, #62]	; 0x3e
   19464:	ldrh	r0, [r4, #60]	; 0x3c
   19468:	mov	r5, r4
   1946c:	orr	r3, r3, #2
   19470:	strh	r3, [r4, #62]	; 0x3e
   19474:	b	19110 <fts_read@@Base+0x328>
   19478:	ldr	r1, [r8, #48]	; 0x30
   1947c:	tst	r1, #4
   19480:	bne	193e4 <fts_read@@Base+0x5fc>
   19484:	ldr	r2, [pc, #160]	; 1952c <fts_read@@Base+0x744>
   19488:	ldr	r0, [r8, #32]
   1948c:	bl	17b70 <__assert_fail@plt+0x6360>
   19490:	cmp	r0, #0
   19494:	str	r0, [r5, #36]	; 0x24
   19498:	blt	19508 <fts_read@@Base+0x720>
   1949c:	ldrh	r3, [r5, #62]	; 0x3e
   194a0:	orr	r3, r3, #2
   194a4:	strh	r3, [r5, #62]	; 0x3e
   194a8:	b	193e4 <fts_read@@Base+0x5fc>
   194ac:	mov	r1, r0
   194b0:	mov	r0, r4
   194b4:	bl	1777c <__assert_fail@plt+0x5f6c>
   194b8:	cmp	r0, #2
   194bc:	ldrheq	r0, [r5, #60]	; 0x3c
   194c0:	beq	1911c <fts_read@@Base+0x334>
   194c4:	ldr	r0, [r8, #32]
   194c8:	b	1931c <fts_read@@Base+0x534>
   194cc:	bl	11678 <__errno_location@plt>
   194d0:	ldr	r3, [r8, #48]	; 0x30
   194d4:	ldr	r1, [r6, #36]	; 0x24
   194d8:	orr	r3, r3, #16384	; 0x4000
   194dc:	ldr	r2, [r0]
   194e0:	str	r2, [r6, #32]
   194e4:	str	r3, [r8, #48]	; 0x30
   194e8:	b	19278 <fts_read@@Base+0x490>
   194ec:	bl	11678 <__errno_location@plt>
   194f0:	mov	r2, #7
   194f4:	ldr	r3, [r0]
   194f8:	strh	r2, [r4, #60]	; 0x3c
   194fc:	str	r3, [r4, #32]
   19500:	str	r4, [r8]
   19504:	b	18f18 <fts_read@@Base+0x130>
   19508:	bl	11678 <__errno_location@plt>
   1950c:	mov	r2, #7
   19510:	ldr	r3, [r0]
   19514:	strh	r2, [r5, #60]	; 0x3c
   19518:	str	r3, [r5, #32]
   1951c:	b	193e4 <fts_read@@Base+0x5fc>
   19520:	bl	117bc <abort@plt>
   19524:	andeq	r0, r0, r2, lsl #2
   19528:	andeq	sl, r1, r4, ror lr
   1952c:	andeq	sl, r1, r8, ror lr

00019530 <fts_set@@Base>:
   19530:	cmp	r2, #4
   19534:	bhi	19548 <fts_set@@Base+0x18>
   19538:	mov	r3, #0
   1953c:	strh	r2, [r1, #64]	; 0x40
   19540:	mov	r0, r3
   19544:	bx	lr
   19548:	push	{r4, lr}
   1954c:	bl	11678 <__errno_location@plt>
   19550:	mov	r2, #22
   19554:	mov	r3, #1
   19558:	str	r2, [r0]
   1955c:	mov	r0, r3
   19560:	pop	{r4, pc}

00019564 <fts_children@@Base>:
   19564:	push	{r4, r5, r6, r7, r8, lr}
   19568:	mov	r4, r1
   1956c:	mov	r5, r0
   19570:	bl	11678 <__errno_location@plt>
   19574:	bics	r2, r4, #8192	; 0x2000
   19578:	mov	r7, r0
   1957c:	bne	1960c <fts_children@@Base+0xa8>
   19580:	ldr	r6, [r5]
   19584:	str	r2, [r0]
   19588:	ldr	r3, [r5, #48]	; 0x30
   1958c:	ands	r0, r3, #16384	; 0x4000
   19590:	bne	19614 <fts_children@@Base+0xb0>
   19594:	ldrh	r3, [r6, #60]	; 0x3c
   19598:	cmp	r3, #9
   1959c:	beq	1966c <fts_children@@Base+0x108>
   195a0:	cmp	r3, #1
   195a4:	popne	{r4, r5, r6, r7, r8, pc}
   195a8:	ldr	r0, [r5, #4]
   195ac:	cmp	r0, #0
   195b0:	beq	195b8 <fts_children@@Base+0x54>
   195b4:	bl	175e4 <__assert_fail@plt+0x5dd4>
   195b8:	cmp	r4, #8192	; 0x2000
   195bc:	moveq	r8, #2
   195c0:	ldreq	r3, [r5, #48]	; 0x30
   195c4:	movne	r8, #1
   195c8:	orreq	r3, r3, #8192	; 0x2000
   195cc:	streq	r3, [r5, #48]	; 0x30
   195d0:	ldr	r3, [r6, #48]	; 0x30
   195d4:	cmp	r3, #0
   195d8:	bne	195f8 <fts_children@@Base+0x94>
   195dc:	ldr	r3, [r6, #24]
   195e0:	ldrb	r3, [r3]
   195e4:	cmp	r3, #47	; 0x2f
   195e8:	beq	195f8 <fts_children@@Base+0x94>
   195ec:	ldr	r1, [r5, #48]	; 0x30
   195f0:	ands	r4, r1, #4
   195f4:	beq	1961c <fts_children@@Base+0xb8>
   195f8:	mov	r1, r8
   195fc:	mov	r0, r5
   19600:	bl	17f40 <__assert_fail@plt+0x6730>
   19604:	str	r0, [r5, #4]
   19608:	pop	{r4, r5, r6, r7, r8, pc}
   1960c:	mov	r3, #22
   19610:	str	r3, [r0]
   19614:	mov	r0, #0
   19618:	pop	{r4, r5, r6, r7, r8, pc}
   1961c:	ldr	r2, [pc, #136]	; 196ac <fts_children@@Base+0x148>
   19620:	ldr	r0, [r5, #32]
   19624:	bl	17b70 <__assert_fail@plt+0x6360>
   19628:	subs	r6, r0, #0
   1962c:	blt	19688 <fts_children@@Base+0x124>
   19630:	mov	r1, r8
   19634:	mov	r0, r5
   19638:	bl	17f40 <__assert_fail@plt+0x6730>
   1963c:	ldr	r3, [r5, #48]	; 0x30
   19640:	ands	r4, r3, #512	; 0x200
   19644:	str	r0, [r5, #4]
   19648:	bne	19674 <fts_children@@Base+0x110>
   1964c:	mov	r0, r6
   19650:	bl	11744 <fchdir@plt>
   19654:	cmp	r0, #0
   19658:	bne	19694 <fts_children@@Base+0x130>
   1965c:	mov	r0, r6
   19660:	bl	117c8 <close@plt>
   19664:	ldr	r0, [r5, #4]
   19668:	pop	{r4, r5, r6, r7, r8, pc}
   1966c:	ldr	r0, [r6, #8]
   19670:	pop	{r4, r5, r6, r7, r8, pc}
   19674:	mov	r1, r6
   19678:	mov	r2, #1
   1967c:	mov	r0, r5
   19680:	bl	17810 <__assert_fail@plt+0x6000>
   19684:	b	19664 <fts_children@@Base+0x100>
   19688:	str	r4, [r5, #4]
   1968c:	mov	r0, r4
   19690:	pop	{r4, r5, r6, r7, r8, pc}
   19694:	ldr	r5, [r7]
   19698:	mov	r0, r6
   1969c:	bl	117c8 <close@plt>
   196a0:	str	r5, [r7]
   196a4:	mov	r0, r4
   196a8:	pop	{r4, r5, r6, r7, r8, pc}
   196ac:	andeq	sl, r1, r8, ror lr
   196b0:	push	{r4, r5, r6, r7, r8, lr}
   196b4:	subs	r4, r0, #0
   196b8:	beq	19708 <fts_children@@Base+0x1a4>
   196bc:	cmp	r4, #10
   196c0:	beq	196cc <fts_children@@Base+0x168>
   196c4:	mov	r0, r4
   196c8:	pop	{r4, r5, r6, r7, r8, pc}
   196cc:	ldr	r6, [r1]
   196d0:	mov	r5, r1
   196d4:	mov	r0, r6
   196d8:	ldr	r1, [pc, #60]	; 1971c <fts_children@@Base+0x1b8>
   196dc:	bl	11468 <strcmp@plt>
   196e0:	subs	r7, r0, #0
   196e4:	bne	196c4 <fts_children@@Base+0x160>
   196e8:	mov	r0, r6
   196ec:	bl	1175c <freecon@plt>
   196f0:	str	r7, [r5]
   196f4:	bl	11678 <__errno_location@plt>
   196f8:	mov	r3, #61	; 0x3d
   196fc:	mvn	r4, #0
   19700:	str	r3, [r0]
   19704:	b	196c4 <fts_children@@Base+0x160>
   19708:	bl	11678 <__errno_location@plt>
   1970c:	mov	r3, #95	; 0x5f
   19710:	mvn	r4, #0
   19714:	str	r3, [r0]
   19718:	b	196c4 <fts_children@@Base+0x160>
   1971c:	andeq	sl, r1, ip, ror lr
   19720:	push	{r4, lr}
   19724:	mov	r4, r1
   19728:	bl	11648 <getfilecon@plt>
   1972c:	mov	r1, r4
   19730:	pop	{r4, lr}
   19734:	b	196b0 <fts_children@@Base+0x14c>
   19738:	push	{r4, lr}
   1973c:	mov	r4, r1
   19740:	bl	115d0 <lgetfilecon@plt>
   19744:	mov	r1, r4
   19748:	pop	{r4, lr}
   1974c:	b	196b0 <fts_children@@Base+0x14c>
   19750:	push	{r4, lr}
   19754:	mov	r4, r1
   19758:	bl	1151c <fgetfilecon@plt>
   1975c:	mov	r1, r4
   19760:	pop	{r4, lr}
   19764:	b	196b0 <fts_children@@Base+0x14c>
   19768:	push	{r4, r5, r6, r7, r8, lr}
   1976c:	subs	r7, r0, #0
   19770:	ldr	r5, [pc, #108]	; 197e4 <fts_children@@Base+0x280>
   19774:	sub	sp, sp, #8
   19778:	mov	r8, r1
   1977c:	ldr	r1, [r5]
   19780:	moveq	r7, sp
   19784:	str	r1, [sp, #4]
   19788:	mov	r0, r7
   1978c:	mov	r1, r8
   19790:	mov	r6, r2
   19794:	bl	115ac <mbrtowc@plt>
   19798:	cmp	r6, #0
   1979c:	cmnne	r0, #3
   197a0:	mov	r4, r0
   197a4:	bhi	197c4 <fts_children@@Base+0x260>
   197a8:	ldr	r2, [sp, #4]
   197ac:	ldr	r3, [r5]
   197b0:	mov	r0, r4
   197b4:	cmp	r2, r3
   197b8:	bne	197e0 <fts_children@@Base+0x27c>
   197bc:	add	sp, sp, #8
   197c0:	pop	{r4, r5, r6, r7, r8, pc}
   197c4:	mov	r0, #0
   197c8:	bl	19a64 <fts_children@@Base+0x500>
   197cc:	cmp	r0, #0
   197d0:	moveq	r4, #1
   197d4:	ldrbeq	r3, [r8]
   197d8:	streq	r3, [r7]
   197dc:	b	197a8 <fts_children@@Base+0x244>
   197e0:	bl	114f8 <__stack_chk_fail@plt>
   197e4:	andeq	sl, r2, r0, lsl #30
   197e8:	cmp	r1, #1024	; 0x400
   197ec:	push	{r4, r5, r6, r7, r8, lr}
   197f0:	mov	r7, r0
   197f4:	ldrhi	r4, [pc, #156]	; 19898 <fts_children@@Base+0x334>
   197f8:	addls	r4, r1, #1
   197fc:	mov	r0, r4
   19800:	bl	115dc <malloc@plt>
   19804:	mov	r2, r4
   19808:	subs	r5, r0, #0
   1980c:	mov	r1, r5
   19810:	mov	r0, r7
   19814:	beq	1985c <fts_children@@Base+0x2f8>
   19818:	bl	11558 <readlink@plt>
   1981c:	subs	r6, r0, #0
   19820:	blt	19864 <fts_children@@Base+0x300>
   19824:	cmp	r4, r6
   19828:	mov	r0, r5
   1982c:	bhi	19888 <fts_children@@Base+0x324>
   19830:	bl	114a4 <free@plt>
   19834:	cmn	r4, #-1073741823	; 0xc0000001
   19838:	lslls	r4, r4, #1
   1983c:	bls	197fc <fts_children@@Base+0x298>
   19840:	cmn	r4, #-2147483646	; 0x80000002
   19844:	mvn	r4, #-2147483648	; 0x80000000
   19848:	bls	197fc <fts_children@@Base+0x298>
   1984c:	bl	11678 <__errno_location@plt>
   19850:	mov	r5, #0
   19854:	mov	r3, #12
   19858:	str	r3, [r0]
   1985c:	mov	r0, r5
   19860:	pop	{r4, r5, r6, r7, r8, pc}
   19864:	bl	11678 <__errno_location@plt>
   19868:	ldr	r3, [r0]
   1986c:	cmp	r3, #34	; 0x22
   19870:	beq	19824 <fts_children@@Base+0x2c0>
   19874:	mov	r0, r5
   19878:	mov	r5, #0
   1987c:	bl	114a4 <free@plt>
   19880:	mov	r0, r5
   19884:	pop	{r4, r5, r6, r7, r8, pc}
   19888:	mov	r3, #0
   1988c:	strb	r3, [r5, r6]
   19890:	mov	r0, r5
   19894:	pop	{r4, r5, r6, r7, r8, pc}
   19898:	andeq	r0, r0, r1, lsl #8
   1989c:	push	{r4, r5, r6, lr}
   198a0:	mov	r4, r0
   198a4:	bl	115a0 <__fpending@plt>
   198a8:	ldr	r5, [r4]
   198ac:	and	r5, r5, #32
   198b0:	mov	r6, r0
   198b4:	mov	r0, r4
   198b8:	bl	19c80 <fts_children@@Base+0x71c>
   198bc:	cmp	r5, #0
   198c0:	mov	r4, r0
   198c4:	bne	198f0 <fts_children@@Base+0x38c>
   198c8:	cmp	r0, #0
   198cc:	beq	198e8 <fts_children@@Base+0x384>
   198d0:	cmp	r6, #0
   198d4:	bne	19908 <fts_children@@Base+0x3a4>
   198d8:	bl	11678 <__errno_location@plt>
   198dc:	ldr	r4, [r0]
   198e0:	subs	r4, r4, #9
   198e4:	mvnne	r4, #0
   198e8:	mov	r0, r4
   198ec:	pop	{r4, r5, r6, pc}
   198f0:	cmp	r0, #0
   198f4:	bne	19908 <fts_children@@Base+0x3a4>
   198f8:	bl	11678 <__errno_location@plt>
   198fc:	str	r4, [r0]
   19900:	mvn	r4, #0
   19904:	b	198e8 <fts_children@@Base+0x384>
   19908:	mvn	r4, #0
   1990c:	b	198e8 <fts_children@@Base+0x384>
   19910:	push	{r4, r5}
   19914:	mov	r4, #0
   19918:	mov	r5, #0
   1991c:	ldr	r3, [pc, #12]	; 19930 <fts_children@@Base+0x3cc>
   19920:	strd	r4, [r0, #16]
   19924:	str	r3, [r0, #24]
   19928:	pop	{r4, r5}
   1992c:	bx	lr
   19930:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19934:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19938:	ldr	r2, [r0, #24]
   1993c:	ldr	r3, [pc, #180]	; 199f8 <fts_children@@Base+0x494>
   19940:	cmp	r2, r3
   19944:	bne	199e4 <fts_children@@Base+0x480>
   19948:	ldrd	r6, [r0, #16]
   1994c:	ldrd	sl, [r1, #96]	; 0x60
   19950:	orrs	r3, r6, r7
   19954:	beq	19990 <fts_children@@Base+0x42c>
   19958:	ldrd	r2, [r0]
   1995c:	cmp	r3, fp
   19960:	cmpeq	r2, sl
   19964:	beq	199b4 <fts_children@@Base+0x450>
   19968:	adds	r8, r6, #1
   1996c:	adc	r9, r7, #0
   19970:	and	r2, r6, r8
   19974:	and	r3, r7, r9
   19978:	orrs	r3, r2, r3
   1997c:	strd	r8, [r0, #16]
   19980:	movne	r1, #0
   19984:	beq	199d4 <fts_children@@Base+0x470>
   19988:	mov	r0, r1
   1998c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19990:	mov	r2, #1
   19994:	mov	r3, #0
   19998:	strd	r2, [r0, #16]
   1999c:	ldrd	r2, [r1]
   199a0:	mov	r1, #0
   199a4:	strd	sl, [r0]
   199a8:	strd	r2, [r0, #8]
   199ac:	mov	r0, r1
   199b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199b4:	ldrd	r4, [r1]
   199b8:	ldrd	r2, [r0, #8]
   199bc:	cmp	r5, r3
   199c0:	cmpeq	r4, r2
   199c4:	bne	19968 <fts_children@@Base+0x404>
   199c8:	mov	r1, #1
   199cc:	mov	r0, r1
   199d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199d4:	orrs	r3, r8, r9
   199d8:	bne	1999c <fts_children@@Base+0x438>
   199dc:	mov	r1, #1
   199e0:	b	199cc <fts_children@@Base+0x468>
   199e4:	ldr	r3, [pc, #16]	; 199fc <fts_children@@Base+0x498>
   199e8:	mov	r2, #60	; 0x3c
   199ec:	ldr	r1, [pc, #12]	; 19a00 <fts_children@@Base+0x49c>
   199f0:	ldr	r0, [pc, #12]	; 19a04 <fts_children@@Base+0x4a0>
   199f4:	bl	11810 <__assert_fail@plt>
   199f8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   199fc:	andeq	sl, r1, r8, lsl #29
   19a00:	muleq	r1, r4, lr
   19a04:	andeq	sl, r1, r8, lsr #29
   19a08:	push	{r1, r2, r3}
   19a0c:	push	{r4, lr}
   19a10:	sub	sp, sp, #12
   19a14:	ldr	r4, [pc, #68]	; 19a60 <fts_children@@Base+0x4fc>
   19a18:	ldr	r1, [sp, #20]
   19a1c:	ldr	r3, [r4]
   19a20:	ands	r2, r1, #64	; 0x40
   19a24:	str	r3, [sp, #4]
   19a28:	ldrne	r2, [sp, #24]
   19a2c:	addne	r3, sp, #24
   19a30:	strne	r3, [sp]
   19a34:	bl	115c4 <open64@plt>
   19a38:	bl	19c3c <fts_children@@Base+0x6d8>
   19a3c:	ldr	r2, [sp, #4]
   19a40:	ldr	r3, [r4]
   19a44:	cmp	r2, r3
   19a48:	bne	19a5c <fts_children@@Base+0x4f8>
   19a4c:	add	sp, sp, #12
   19a50:	pop	{r4, lr}
   19a54:	add	sp, sp, #12
   19a58:	bx	lr
   19a5c:	bl	114f8 <__stack_chk_fail@plt>
   19a60:	andeq	sl, r2, r0, lsl #30
   19a64:	push	{r4, lr}
   19a68:	mov	r1, #0
   19a6c:	bl	116e4 <setlocale@plt>
   19a70:	subs	r4, r0, #0
   19a74:	beq	19aa0 <fts_children@@Base+0x53c>
   19a78:	ldr	r1, [pc, #40]	; 19aa8 <fts_children@@Base+0x544>
   19a7c:	bl	11468 <strcmp@plt>
   19a80:	cmp	r0, #0
   19a84:	popeq	{r4, pc}
   19a88:	mov	r0, r4
   19a8c:	ldr	r1, [pc, #24]	; 19aac <fts_children@@Base+0x548>
   19a90:	bl	11468 <strcmp@plt>
   19a94:	adds	r0, r0, #0
   19a98:	movne	r0, #1
   19a9c:	pop	{r4, pc}
   19aa0:	mov	r0, #1
   19aa4:	pop	{r4, pc}
   19aa8:	andeq	sl, r1, r0, asr #29
   19aac:	andeq	sl, r1, r4, asr #29
   19ab0:	ldrb	r3, [r0]
   19ab4:	cmp	r3, #0
   19ab8:	beq	19ae4 <fts_children@@Base+0x580>
   19abc:	mov	r2, #0
   19ac0:	push	{r4, lr}
   19ac4:	add	r2, r3, r2, ror #23
   19ac8:	ldrb	r3, [r0, #1]!
   19acc:	cmp	r3, #0
   19ad0:	bne	19ac4 <fts_children@@Base+0x560>
   19ad4:	mov	r0, r2
   19ad8:	bl	1a164 <fts_children@@Base+0xc00>
   19adc:	mov	r0, r1
   19ae0:	pop	{r4, pc}
   19ae4:	mov	r0, r3
   19ae8:	bx	lr
   19aec:	mov	r3, #0
   19af0:	mov	r2, #1
   19af4:	str	r1, [r0]
   19af8:	str	r1, [r0, #4]
   19afc:	str	r1, [r0, #8]
   19b00:	str	r1, [r0, #12]
   19b04:	str	r1, [r0, #16]
   19b08:	strb	r2, [r0, #28]
   19b0c:	str	r3, [r0, #20]
   19b10:	str	r3, [r0, #24]
   19b14:	bx	lr
   19b18:	ldrb	r0, [r0, #28]
   19b1c:	bx	lr
   19b20:	ldrb	ip, [r0, #28]
   19b24:	ldr	r3, [r0, #20]
   19b28:	mov	r2, r0
   19b2c:	eor	ip, ip, #1
   19b30:	add	r3, ip, r3
   19b34:	and	r3, r3, #3
   19b38:	ldr	r0, [r0, r3, lsl #2]
   19b3c:	str	r1, [r2, r3, lsl #2]
   19b40:	ldr	r1, [r2, #24]
   19b44:	str	r3, [r2, #20]
   19b48:	cmp	r1, r3
   19b4c:	addeq	ip, ip, r1
   19b50:	andeq	ip, ip, #3
   19b54:	mov	r3, #0
   19b58:	streq	ip, [r2, #24]
   19b5c:	strb	r3, [r2, #28]
   19b60:	bx	lr
   19b64:	ldrb	r3, [r0, #28]
   19b68:	cmp	r3, #0
   19b6c:	bne	19ba4 <fts_children@@Base+0x640>
   19b70:	ldr	r3, [r0, #20]
   19b74:	ldr	r1, [r0, #16]
   19b78:	ldr	r2, [r0, r3, lsl #2]
   19b7c:	str	r1, [r0, r3, lsl #2]
   19b80:	ldr	r1, [r0, #24]
   19b84:	cmp	r3, r1
   19b88:	addne	r3, r3, #3
   19b8c:	moveq	r3, #1
   19b90:	andne	r3, r3, #3
   19b94:	strbeq	r3, [r0, #28]
   19b98:	strne	r3, [r0, #20]
   19b9c:	mov	r0, r2
   19ba0:	bx	lr
   19ba4:	push	{r4, lr}
   19ba8:	bl	117bc <abort@plt>
   19bac:	push	{r4, lr}
   19bb0:	mov	r0, #14
   19bb4:	bl	11708 <nl_langinfo@plt>
   19bb8:	cmp	r0, #0
   19bbc:	beq	19bd4 <fts_children@@Base+0x670>
   19bc0:	ldrb	r2, [r0]
   19bc4:	ldr	r3, [pc, #16]	; 19bdc <fts_children@@Base+0x678>
   19bc8:	cmp	r2, #0
   19bcc:	moveq	r0, r3
   19bd0:	pop	{r4, pc}
   19bd4:	ldr	r0, [pc]	; 19bdc <fts_children@@Base+0x678>
   19bd8:	pop	{r4, pc}
   19bdc:	andeq	sl, r1, ip, asr #29
   19be0:	push	{r2, r3}
   19be4:	push	{r4, lr}
   19be8:	sub	sp, sp, #8
   19bec:	ldr	r4, [pc, #68]	; 19c38 <fts_children@@Base+0x6d4>
   19bf0:	ldr	r2, [sp, #16]
   19bf4:	ands	r3, r2, #64	; 0x40
   19bf8:	addne	r3, sp, #20
   19bfc:	ldr	ip, [r4]
   19c00:	strne	r3, [sp]
   19c04:	ldrne	r3, [sp, #20]
   19c08:	str	ip, [sp, #4]
   19c0c:	bl	11660 <openat64@plt>
   19c10:	bl	19c3c <fts_children@@Base+0x6d8>
   19c14:	ldr	r2, [sp, #4]
   19c18:	ldr	r3, [r4]
   19c1c:	cmp	r2, r3
   19c20:	bne	19c34 <fts_children@@Base+0x6d0>
   19c24:	add	sp, sp, #8
   19c28:	pop	{r4, lr}
   19c2c:	add	sp, sp, #8
   19c30:	bx	lr
   19c34:	bl	114f8 <__stack_chk_fail@plt>
   19c38:	andeq	sl, r2, r0, lsl #30
   19c3c:	cmp	r0, #2
   19c40:	push	{r4, r5, r6, r7, r8, lr}
   19c44:	mov	r4, r0
   19c48:	bls	19c54 <fts_children@@Base+0x6f0>
   19c4c:	mov	r0, r4
   19c50:	pop	{r4, r5, r6, r7, r8, pc}
   19c54:	bl	19f6c <fts_children@@Base+0xa08>
   19c58:	mov	r7, r0
   19c5c:	bl	11678 <__errno_location@plt>
   19c60:	mov	r5, r0
   19c64:	mov	r0, r4
   19c68:	ldr	r6, [r5]
   19c6c:	mov	r4, r7
   19c70:	bl	117c8 <close@plt>
   19c74:	str	r6, [r5]
   19c78:	mov	r0, r4
   19c7c:	pop	{r4, r5, r6, r7, r8, pc}
   19c80:	push	{r4, r5, lr}
   19c84:	sub	sp, sp, #12
   19c88:	mov	r4, r0
   19c8c:	bl	116a8 <fileno@plt>
   19c90:	cmp	r0, #0
   19c94:	mov	r0, r4
   19c98:	blt	19d14 <fts_children@@Base+0x7b0>
   19c9c:	bl	115f4 <__freading@plt>
   19ca0:	cmp	r0, #0
   19ca4:	bne	19ce0 <fts_children@@Base+0x77c>
   19ca8:	mov	r0, r4
   19cac:	bl	19e6c <fts_children@@Base+0x908>
   19cb0:	cmp	r0, #0
   19cb4:	beq	19d10 <fts_children@@Base+0x7ac>
   19cb8:	bl	11678 <__errno_location@plt>
   19cbc:	mov	r5, r0
   19cc0:	mov	r0, r4
   19cc4:	ldr	r4, [r5]
   19cc8:	bl	116c0 <fclose@plt>
   19ccc:	cmp	r4, #0
   19cd0:	mvnne	r0, #0
   19cd4:	strne	r4, [r5]
   19cd8:	add	sp, sp, #12
   19cdc:	pop	{r4, r5, pc}
   19ce0:	mov	r0, r4
   19ce4:	bl	116a8 <fileno@plt>
   19ce8:	mov	r3, #1
   19cec:	str	r3, [sp]
   19cf0:	mov	r2, #0
   19cf4:	mov	r3, #0
   19cf8:	bl	11570 <lseek64@plt>
   19cfc:	mvn	r3, #0
   19d00:	mvn	r2, #0
   19d04:	cmp	r1, r3
   19d08:	cmpeq	r0, r2
   19d0c:	bne	19ca8 <fts_children@@Base+0x744>
   19d10:	mov	r0, r4
   19d14:	add	sp, sp, #12
   19d18:	pop	{r4, r5, lr}
   19d1c:	b	116c0 <fclose@plt>
   19d20:	push	{r1, r2, r3}
   19d24:	push	{r4, r5, r6, r7, r8, lr}
   19d28:	sub	sp, sp, #12
   19d2c:	ldr	r4, [pc, #300]	; 19e60 <fts_children@@Base+0x8fc>
   19d30:	ldr	r3, [pc, #300]	; 19e64 <fts_children@@Base+0x900>
   19d34:	ldr	r1, [sp, #36]	; 0x24
   19d38:	ldr	r2, [r4]
   19d3c:	cmp	r1, r3
   19d40:	add	r3, sp, #40	; 0x28
   19d44:	str	r2, [sp, #4]
   19d48:	str	r3, [sp]
   19d4c:	bne	19e18 <fts_children@@Base+0x8b4>
   19d50:	ldr	r6, [pc, #272]	; 19e68 <fts_children@@Base+0x904>
   19d54:	add	r3, sp, #44	; 0x2c
   19d58:	str	r3, [sp]
   19d5c:	ldr	r3, [r6]
   19d60:	ldr	r7, [sp, #40]	; 0x28
   19d64:	cmp	r3, #0
   19d68:	blt	19dac <fts_children@@Base+0x848>
   19d6c:	mov	r2, r7
   19d70:	mov	r8, r0
   19d74:	bl	116d8 <fcntl64@plt>
   19d78:	subs	r5, r0, #0
   19d7c:	blt	19e28 <fts_children@@Base+0x8c4>
   19d80:	mov	r3, #1
   19d84:	str	r3, [r6]
   19d88:	ldr	r2, [sp, #4]
   19d8c:	ldr	r3, [r4]
   19d90:	mov	r0, r5
   19d94:	cmp	r2, r3
   19d98:	bne	19e5c <fts_children@@Base+0x8f8>
   19d9c:	add	sp, sp, #12
   19da0:	pop	{r4, r5, r6, r7, r8, lr}
   19da4:	add	sp, sp, #12
   19da8:	bx	lr
   19dac:	mov	r2, r7
   19db0:	mov	r1, #0
   19db4:	bl	19d20 <fts_children@@Base+0x7bc>
   19db8:	subs	r5, r0, #0
   19dbc:	blt	19d88 <fts_children@@Base+0x824>
   19dc0:	ldr	r3, [r6]
   19dc4:	cmn	r3, #1
   19dc8:	bne	19d88 <fts_children@@Base+0x824>
   19dcc:	mov	r1, #1
   19dd0:	mov	r0, r5
   19dd4:	bl	116d8 <fcntl64@plt>
   19dd8:	subs	r2, r0, #0
   19ddc:	blt	19df8 <fts_children@@Base+0x894>
   19de0:	orr	r2, r2, #1
   19de4:	mov	r1, #2
   19de8:	mov	r0, r5
   19dec:	bl	116d8 <fcntl64@plt>
   19df0:	cmn	r0, #1
   19df4:	bne	19d88 <fts_children@@Base+0x824>
   19df8:	bl	11678 <__errno_location@plt>
   19dfc:	mov	r6, r0
   19e00:	mov	r0, r5
   19e04:	ldr	r7, [r6]
   19e08:	mvn	r5, #0
   19e0c:	bl	117c8 <close@plt>
   19e10:	str	r7, [r6]
   19e14:	b	19d88 <fts_children@@Base+0x824>
   19e18:	ldr	r2, [sp, #40]	; 0x28
   19e1c:	bl	116d8 <fcntl64@plt>
   19e20:	mov	r5, r0
   19e24:	b	19d88 <fts_children@@Base+0x824>
   19e28:	bl	11678 <__errno_location@plt>
   19e2c:	ldr	r3, [r0]
   19e30:	cmp	r3, #22
   19e34:	bne	19d80 <fts_children@@Base+0x81c>
   19e38:	mov	r2, r7
   19e3c:	mov	r0, r8
   19e40:	mov	r1, #0
   19e44:	bl	19d20 <fts_children@@Base+0x7bc>
   19e48:	subs	r5, r0, #0
   19e4c:	mvnge	r3, #0
   19e50:	strge	r3, [r6]
   19e54:	bge	19dcc <fts_children@@Base+0x868>
   19e58:	b	19d88 <fts_children@@Base+0x824>
   19e5c:	bl	114f8 <__stack_chk_fail@plt>
   19e60:	andeq	sl, r2, r0, lsl #30
   19e64:	andeq	r0, r0, r6, lsl #8
   19e68:	andeq	fp, r2, ip, lsl #6
   19e6c:	push	{r4, lr}
   19e70:	subs	r4, r0, #0
   19e74:	sub	sp, sp, #8
   19e78:	beq	19e94 <fts_children@@Base+0x930>
   19e7c:	bl	115f4 <__freading@plt>
   19e80:	cmp	r0, #0
   19e84:	beq	19e94 <fts_children@@Base+0x930>
   19e88:	ldr	r3, [r4]
   19e8c:	tst	r3, #256	; 0x100
   19e90:	bne	19ea4 <fts_children@@Base+0x940>
   19e94:	mov	r0, r4
   19e98:	add	sp, sp, #8
   19e9c:	pop	{r4, lr}
   19ea0:	b	11480 <fflush@plt>
   19ea4:	mov	r3, #1
   19ea8:	str	r3, [sp]
   19eac:	mov	r2, #0
   19eb0:	mov	r3, #0
   19eb4:	mov	r0, r4
   19eb8:	bl	19ecc <fts_children@@Base+0x968>
   19ebc:	mov	r0, r4
   19ec0:	add	sp, sp, #8
   19ec4:	pop	{r4, lr}
   19ec8:	b	11480 <fflush@plt>
   19ecc:	push	{r4, r5, r6, r7, r8, lr}
   19ed0:	sub	sp, sp, #8
   19ed4:	ldmib	r0, {ip, lr}
   19ed8:	mov	r4, r0
   19edc:	ldr	r5, [sp, #32]
   19ee0:	cmp	lr, ip
   19ee4:	beq	19efc <fts_children@@Base+0x998>
   19ee8:	str	r5, [sp, #32]
   19eec:	mov	r0, r4
   19ef0:	add	sp, sp, #8
   19ef4:	pop	{r4, r5, r6, r7, r8, lr}
   19ef8:	b	116cc <fseeko64@plt>
   19efc:	ldr	lr, [r0, #20]
   19f00:	ldr	ip, [r0, #16]
   19f04:	cmp	lr, ip
   19f08:	bne	19ee8 <fts_children@@Base+0x984>
   19f0c:	ldr	r8, [r0, #36]	; 0x24
   19f10:	cmp	r8, #0
   19f14:	bne	19ee8 <fts_children@@Base+0x984>
   19f18:	mov	r6, r2
   19f1c:	mov	r7, r3
   19f20:	bl	116a8 <fileno@plt>
   19f24:	mov	r2, r6
   19f28:	mov	r3, r7
   19f2c:	str	r5, [sp]
   19f30:	bl	11570 <lseek64@plt>
   19f34:	mvn	r3, #0
   19f38:	mvn	r2, #0
   19f3c:	cmp	r1, r3
   19f40:	cmpeq	r0, r2
   19f44:	beq	19f64 <fts_children@@Base+0xa00>
   19f48:	ldr	r3, [r4]
   19f4c:	strd	r0, [r4, #80]	; 0x50
   19f50:	mov	r0, r8
   19f54:	bic	r3, r3, #16
   19f58:	str	r3, [r4]
   19f5c:	add	sp, sp, #8
   19f60:	pop	{r4, r5, r6, r7, r8, pc}
   19f64:	mvn	r0, #0
   19f68:	b	19f5c <fts_children@@Base+0x9f8>
   19f6c:	mov	r2, #3
   19f70:	mov	r1, #0
   19f74:	b	19d20 <fts_children@@Base+0x7bc>
   19f78:	subs	r2, r1, #1
   19f7c:	bxeq	lr
   19f80:	bcc	1a158 <fts_children@@Base+0xbf4>
   19f84:	cmp	r0, r1
   19f88:	bls	1a13c <fts_children@@Base+0xbd8>
   19f8c:	tst	r1, r2
   19f90:	beq	1a148 <fts_children@@Base+0xbe4>
   19f94:	clz	r3, r0
   19f98:	clz	r2, r1
   19f9c:	sub	r3, r2, r3
   19fa0:	rsbs	r3, r3, #31
   19fa4:	addne	r3, r3, r3, lsl #1
   19fa8:	mov	r2, #0
   19fac:	addne	pc, pc, r3, lsl #2
   19fb0:	nop			; (mov r0, r0)
   19fb4:	cmp	r0, r1, lsl #31
   19fb8:	adc	r2, r2, r2
   19fbc:	subcs	r0, r0, r1, lsl #31
   19fc0:	cmp	r0, r1, lsl #30
   19fc4:	adc	r2, r2, r2
   19fc8:	subcs	r0, r0, r1, lsl #30
   19fcc:	cmp	r0, r1, lsl #29
   19fd0:	adc	r2, r2, r2
   19fd4:	subcs	r0, r0, r1, lsl #29
   19fd8:	cmp	r0, r1, lsl #28
   19fdc:	adc	r2, r2, r2
   19fe0:	subcs	r0, r0, r1, lsl #28
   19fe4:	cmp	r0, r1, lsl #27
   19fe8:	adc	r2, r2, r2
   19fec:	subcs	r0, r0, r1, lsl #27
   19ff0:	cmp	r0, r1, lsl #26
   19ff4:	adc	r2, r2, r2
   19ff8:	subcs	r0, r0, r1, lsl #26
   19ffc:	cmp	r0, r1, lsl #25
   1a000:	adc	r2, r2, r2
   1a004:	subcs	r0, r0, r1, lsl #25
   1a008:	cmp	r0, r1, lsl #24
   1a00c:	adc	r2, r2, r2
   1a010:	subcs	r0, r0, r1, lsl #24
   1a014:	cmp	r0, r1, lsl #23
   1a018:	adc	r2, r2, r2
   1a01c:	subcs	r0, r0, r1, lsl #23
   1a020:	cmp	r0, r1, lsl #22
   1a024:	adc	r2, r2, r2
   1a028:	subcs	r0, r0, r1, lsl #22
   1a02c:	cmp	r0, r1, lsl #21
   1a030:	adc	r2, r2, r2
   1a034:	subcs	r0, r0, r1, lsl #21
   1a038:	cmp	r0, r1, lsl #20
   1a03c:	adc	r2, r2, r2
   1a040:	subcs	r0, r0, r1, lsl #20
   1a044:	cmp	r0, r1, lsl #19
   1a048:	adc	r2, r2, r2
   1a04c:	subcs	r0, r0, r1, lsl #19
   1a050:	cmp	r0, r1, lsl #18
   1a054:	adc	r2, r2, r2
   1a058:	subcs	r0, r0, r1, lsl #18
   1a05c:	cmp	r0, r1, lsl #17
   1a060:	adc	r2, r2, r2
   1a064:	subcs	r0, r0, r1, lsl #17
   1a068:	cmp	r0, r1, lsl #16
   1a06c:	adc	r2, r2, r2
   1a070:	subcs	r0, r0, r1, lsl #16
   1a074:	cmp	r0, r1, lsl #15
   1a078:	adc	r2, r2, r2
   1a07c:	subcs	r0, r0, r1, lsl #15
   1a080:	cmp	r0, r1, lsl #14
   1a084:	adc	r2, r2, r2
   1a088:	subcs	r0, r0, r1, lsl #14
   1a08c:	cmp	r0, r1, lsl #13
   1a090:	adc	r2, r2, r2
   1a094:	subcs	r0, r0, r1, lsl #13
   1a098:	cmp	r0, r1, lsl #12
   1a09c:	adc	r2, r2, r2
   1a0a0:	subcs	r0, r0, r1, lsl #12
   1a0a4:	cmp	r0, r1, lsl #11
   1a0a8:	adc	r2, r2, r2
   1a0ac:	subcs	r0, r0, r1, lsl #11
   1a0b0:	cmp	r0, r1, lsl #10
   1a0b4:	adc	r2, r2, r2
   1a0b8:	subcs	r0, r0, r1, lsl #10
   1a0bc:	cmp	r0, r1, lsl #9
   1a0c0:	adc	r2, r2, r2
   1a0c4:	subcs	r0, r0, r1, lsl #9
   1a0c8:	cmp	r0, r1, lsl #8
   1a0cc:	adc	r2, r2, r2
   1a0d0:	subcs	r0, r0, r1, lsl #8
   1a0d4:	cmp	r0, r1, lsl #7
   1a0d8:	adc	r2, r2, r2
   1a0dc:	subcs	r0, r0, r1, lsl #7
   1a0e0:	cmp	r0, r1, lsl #6
   1a0e4:	adc	r2, r2, r2
   1a0e8:	subcs	r0, r0, r1, lsl #6
   1a0ec:	cmp	r0, r1, lsl #5
   1a0f0:	adc	r2, r2, r2
   1a0f4:	subcs	r0, r0, r1, lsl #5
   1a0f8:	cmp	r0, r1, lsl #4
   1a0fc:	adc	r2, r2, r2
   1a100:	subcs	r0, r0, r1, lsl #4
   1a104:	cmp	r0, r1, lsl #3
   1a108:	adc	r2, r2, r2
   1a10c:	subcs	r0, r0, r1, lsl #3
   1a110:	cmp	r0, r1, lsl #2
   1a114:	adc	r2, r2, r2
   1a118:	subcs	r0, r0, r1, lsl #2
   1a11c:	cmp	r0, r1, lsl #1
   1a120:	adc	r2, r2, r2
   1a124:	subcs	r0, r0, r1, lsl #1
   1a128:	cmp	r0, r1
   1a12c:	adc	r2, r2, r2
   1a130:	subcs	r0, r0, r1
   1a134:	mov	r0, r2
   1a138:	bx	lr
   1a13c:	moveq	r0, #1
   1a140:	movne	r0, #0
   1a144:	bx	lr
   1a148:	clz	r2, r1
   1a14c:	rsb	r2, r2, #31
   1a150:	lsr	r0, r0, r2
   1a154:	bx	lr
   1a158:	cmp	r0, #0
   1a15c:	mvnne	r0, #0
   1a160:	b	1a1c0 <fts_children@@Base+0xc5c>
   1a164:	cmp	r1, #0
   1a168:	beq	1a158 <fts_children@@Base+0xbf4>
   1a16c:	push	{r0, r1, lr}
   1a170:	bl	19f78 <fts_children@@Base+0xa14>
   1a174:	pop	{r1, r2, lr}
   1a178:	mul	r3, r2, r0
   1a17c:	sub	r1, r1, r3
   1a180:	bx	lr
   1a184:	cmp	r3, #0
   1a188:	cmpeq	r2, #0
   1a18c:	bne	1a1a4 <fts_children@@Base+0xc40>
   1a190:	cmp	r1, #0
   1a194:	cmpeq	r0, #0
   1a198:	mvnne	r1, #0
   1a19c:	mvnne	r0, #0
   1a1a0:	b	1a1c0 <fts_children@@Base+0xc5c>
   1a1a4:	sub	sp, sp, #8
   1a1a8:	push	{sp, lr}
   1a1ac:	bl	1a1d0 <fts_children@@Base+0xc6c>
   1a1b0:	ldr	lr, [sp, #4]
   1a1b4:	add	sp, sp, #8
   1a1b8:	pop	{r2, r3}
   1a1bc:	bx	lr
   1a1c0:	push	{r1, lr}
   1a1c4:	mov	r0, #8
   1a1c8:	bl	11450 <raise@plt>
   1a1cc:	pop	{r1, pc}
   1a1d0:	cmp	r1, r3
   1a1d4:	cmpeq	r0, r2
   1a1d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1dc:	mov	r4, r0
   1a1e0:	movcc	r0, #0
   1a1e4:	mov	r5, r1
   1a1e8:	ldr	lr, [sp, #36]	; 0x24
   1a1ec:	movcc	r1, r0
   1a1f0:	bcc	1a2ec <fts_children@@Base+0xd88>
   1a1f4:	cmp	r3, #0
   1a1f8:	clzeq	ip, r2
   1a1fc:	clzne	ip, r3
   1a200:	addeq	ip, ip, #32
   1a204:	cmp	r5, #0
   1a208:	clzeq	r1, r4
   1a20c:	addeq	r1, r1, #32
   1a210:	clzne	r1, r5
   1a214:	sub	ip, ip, r1
   1a218:	sub	sl, ip, #32
   1a21c:	lsl	r9, r3, ip
   1a220:	rsb	fp, ip, #32
   1a224:	orr	r9, r9, r2, lsl sl
   1a228:	orr	r9, r9, r2, lsr fp
   1a22c:	lsl	r8, r2, ip
   1a230:	cmp	r5, r9
   1a234:	cmpeq	r4, r8
   1a238:	movcc	r0, #0
   1a23c:	movcc	r1, r0
   1a240:	bcc	1a25c <fts_children@@Base+0xcf8>
   1a244:	mov	r0, #1
   1a248:	subs	r4, r4, r8
   1a24c:	lsl	r1, r0, sl
   1a250:	orr	r1, r1, r0, lsr fp
   1a254:	lsl	r0, r0, ip
   1a258:	sbc	r5, r5, r9
   1a25c:	cmp	ip, #0
   1a260:	beq	1a2ec <fts_children@@Base+0xd88>
   1a264:	lsr	r6, r8, #1
   1a268:	orr	r6, r6, r9, lsl #31
   1a26c:	lsr	r7, r9, #1
   1a270:	mov	r2, ip
   1a274:	b	1a298 <fts_children@@Base+0xd34>
   1a278:	subs	r3, r4, r6
   1a27c:	sbc	r8, r5, r7
   1a280:	adds	r3, r3, r3
   1a284:	adc	r8, r8, r8
   1a288:	adds	r4, r3, #1
   1a28c:	adc	r5, r8, #0
   1a290:	subs	r2, r2, #1
   1a294:	beq	1a2b4 <fts_children@@Base+0xd50>
   1a298:	cmp	r5, r7
   1a29c:	cmpeq	r4, r6
   1a2a0:	bcs	1a278 <fts_children@@Base+0xd14>
   1a2a4:	adds	r4, r4, r4
   1a2a8:	adc	r5, r5, r5
   1a2ac:	subs	r2, r2, #1
   1a2b0:	bne	1a298 <fts_children@@Base+0xd34>
   1a2b4:	lsr	r3, r4, ip
   1a2b8:	orr	r3, r3, r5, lsl fp
   1a2bc:	lsr	r2, r5, ip
   1a2c0:	orr	r3, r3, r5, lsr sl
   1a2c4:	adds	r0, r0, r4
   1a2c8:	mov	r4, r3
   1a2cc:	lsl	r3, r2, ip
   1a2d0:	orr	r3, r3, r4, lsl sl
   1a2d4:	lsl	ip, r4, ip
   1a2d8:	orr	r3, r3, r4, lsr fp
   1a2dc:	adc	r1, r1, r5
   1a2e0:	subs	r0, r0, ip
   1a2e4:	mov	r5, r2
   1a2e8:	sbc	r1, r1, r3
   1a2ec:	cmp	lr, #0
   1a2f0:	strdne	r4, [lr]
   1a2f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a2fc:	mov	r7, r0
   1a300:	ldr	r6, [pc, #72]	; 1a350 <fts_children@@Base+0xdec>
   1a304:	ldr	r5, [pc, #72]	; 1a354 <fts_children@@Base+0xdf0>
   1a308:	add	r6, pc, r6
   1a30c:	add	r5, pc, r5
   1a310:	sub	r6, r6, r5
   1a314:	mov	r8, r1
   1a318:	mov	r9, r2
   1a31c:	bl	1140c <fstatfs64@plt-0x20>
   1a320:	asrs	r6, r6, #2
   1a324:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a328:	mov	r4, #0
   1a32c:	add	r4, r4, #1
   1a330:	ldr	r3, [r5], #4
   1a334:	mov	r2, r9
   1a338:	mov	r1, r8
   1a33c:	mov	r0, r7
   1a340:	blx	r3
   1a344:	cmp	r6, r4
   1a348:	bne	1a32c <fts_children@@Base+0xdc8>
   1a34c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a350:	andeq	r0, r1, ip, ror #23
   1a354:	andeq	r0, r1, r4, ror #23
   1a358:	bx	lr
   1a35c:	ldr	r3, [pc, #12]	; 1a370 <fts_children@@Base+0xe0c>
   1a360:	mov	r1, #0
   1a364:	add	r3, pc, r3
   1a368:	ldr	r2, [r3]
   1a36c:	b	11684 <__cxa_atexit@plt>
   1a370:	strdeq	r0, [r1], -r8

Disassembly of section .fini:

0001a374 <.fini>:
   1a374:	push	{r3, lr}
   1a378:	pop	{r3, pc}
