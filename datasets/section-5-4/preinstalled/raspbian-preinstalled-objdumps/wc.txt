
raspbian-preinstalled/wc:     file format elf32-littlearm


Disassembly of section .init:

00011060 <.init>:
   11060:	push	{r3, lr}
   11064:	bl	11e94 <__assert_fail@plt+0xb08>
   11068:	pop	{r3, pc}

Disassembly of section .plt:

0001106c <calloc@plt-0x14>:
   1106c:	push	{lr}		; (str lr, [sp, #-4]!)
   11070:	ldr	lr, [pc, #4]	; 1107c <calloc@plt-0x4>
   11074:	add	lr, pc, lr
   11078:	ldr	pc, [lr, #8]!
   1107c:	andeq	r6, r1, r4, lsl #31

00011080 <calloc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #3972]!	; 0xf84

0001108c <fputs_unlocked@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #3964]!	; 0xf7c

00011098 <raise@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #3956]!	; 0xf74

000110a4 <strcmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b0 <posix_fadvise64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3940]!	; 0xf64

000110bc <read@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110c8 <fflush@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3924]!	; 0xf54

000110d4 <wcwidth@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e0 <__memmove_chk@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3908]!	; 0xf44

000110ec <free@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3900]!	; 0xf3c

000110f8 <ferror@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3892]!	; 0xf34

00011104 <_exit@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011110 <memcpy@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3876]!	; 0xf24

0001111c <mbsinit@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3868]!	; 0xf1c

00011128 <memcmp@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3860]!	; 0xf14

00011134 <dcgettext@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011140 <__stack_chk_fail@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3844]!	; 0xf04

0001114c <sysconf@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3836]!	; 0xefc

00011158 <realloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3828]!	; 0xef4

00011164 <textdomain@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3820]!	; 0xeec

00011170 <iswcntrl@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3812]!	; 0xee4

0001117c <iswprint@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3804]!	; 0xedc

00011188 <__fxstat64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3796]!	; 0xed4

00011194 <fwrite@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3788]!	; 0xecc

000111a0 <lseek64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3780]!	; 0xec4

000111ac <__ctype_get_mb_cur_max@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3772]!	; 0xebc

000111b8 <__fpending@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111c4 <mbrtowc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3756]!	; 0xeac

000111d0 <error@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3748]!	; 0xea4

000111dc <open64@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111e8 <sysinfo@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3732]!	; 0xe94

000111f4 <malloc@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3724]!	; 0xe8c

00011200 <__libc_start_main@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3716]!	; 0xe84

0001120c <__freading@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3708]!	; 0xe7c

00011218 <__gmon_start__@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3700]!	; 0xe74

00011224 <getopt_long@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011230 <__ctype_b_loc@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3684]!	; 0xe64

0001123c <exit@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3676]!	; 0xe5c

00011248 <feof@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3668]!	; 0xe54

00011254 <iswspace@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011260 <strlen@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3652]!	; 0xe44

0001126c <strchr@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3644]!	; 0xe3c

00011278 <getpagesize@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3636]!	; 0xe34

00011284 <__errno_location@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011290 <__cxa_atexit@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3620]!	; 0xe24

0001129c <setvbuf@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112a8 <memset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3604]!	; 0xe14

000112b4 <fgetc@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c0 <__printf_chk@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3588]!	; 0xe04

000112cc <fileno@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112d8 <__fprintf_chk@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112e4 <memchr@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3564]!	; 0xdec

000112f0 <fclose@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3556]!	; 0xde4

000112fc <fseeko64@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3548]!	; 0xddc

00011308 <__overflow@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3540]!	; 0xdd4

00011314 <setlocale@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011320 <strrchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3524]!	; 0xdc4

0001132c <nl_langinfo@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3516]!	; 0xdbc

00011338 <fopen64@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3508]!	; 0xdb4

00011344 <bindtextdomain@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3500]!	; 0xdac

00011350 <getdelim@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3492]!	; 0xda4

0001135c <__xstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3484]!	; 0xd9c

00011368 <strncmp@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3476]!	; 0xd94

00011374 <abort@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011380 <close@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3460]!	; 0xd84

0001138c <__assert_fail@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #90112	; 0x16000
   11394:	ldr	pc, [ip, #3452]!	; 0xd7c

Disassembly of section .text:

00011398 <_obstack_begin@@Base-0x5368>:
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1139c:	vpush	{d8-d9}
   113a0:	ldr	r3, [pc, #2592]	; 11dc8 <__assert_fail@plt+0xa3c>
   113a4:	mov	r7, r0
   113a8:	ldr	r0, [r1]
   113ac:	sub	sp, sp, #332	; 0x14c
   113b0:	ldr	r3, [r3]
   113b4:	mov	r6, r1
   113b8:	str	r3, [sp, #324]	; 0x144
   113bc:	bl	135e4 <__assert_fail@plt+0x2258>
   113c0:	ldr	r1, [pc, #2564]	; 11dcc <__assert_fail@plt+0xa40>
   113c4:	mov	r0, #6
   113c8:	bl	11314 <setlocale@plt>
   113cc:	ldr	r1, [pc, #2556]	; 11dd0 <__assert_fail@plt+0xa44>
   113d0:	ldr	r0, [pc, #2556]	; 11dd4 <__assert_fail@plt+0xa48>
   113d4:	bl	11344 <bindtextdomain@plt>
   113d8:	ldr	r0, [pc, #2548]	; 11dd4 <__assert_fail@plt+0xa48>
   113dc:	bl	11164 <textdomain@plt>
   113e0:	ldr	r0, [pc, #2544]	; 11dd8 <__assert_fail@plt+0xa4c>
   113e4:	bl	171c4 <_obstack_memory_used@@Base+0x8cc>
   113e8:	bl	11278 <getpagesize@plt>
   113ec:	ldr	r4, [pc, #2536]	; 11ddc <__assert_fail@plt+0xa50>
   113f0:	ldr	sl, [pc, #2536]	; 11de0 <__assert_fail@plt+0xa54>
   113f4:	mov	r3, #0
   113f8:	mov	r1, r3
   113fc:	mov	r2, #1
   11400:	ldr	r9, [pc, #2524]	; 11de4 <__assert_fail@plt+0xa58>
   11404:	ldr	r8, [pc, #2524]	; 11de8 <__assert_fail@plt+0xa5c>
   11408:	ldr	fp, [pc, #2524]	; 11dec <__assert_fail@plt+0xa60>
   1140c:	str	r0, [r4, #12]
   11410:	ldr	r0, [sl]
   11414:	bl	1129c <setvbuf@plt>
   11418:	mov	r0, #0
   1141c:	mov	r1, #0
   11420:	mov	r3, #0
   11424:	strb	r3, [r4, #10]
   11428:	strb	r3, [r4, #9]
   1142c:	strb	r3, [r4, #8]
   11430:	strb	r3, [r4]
   11434:	strb	r3, [r4, #11]
   11438:	str	r3, [sp, #32]
   1143c:	strd	r0, [r4, #48]	; 0x30
   11440:	strd	r0, [r4, #40]	; 0x28
   11444:	strd	r0, [r4, #32]
   11448:	strd	r0, [r4, #24]
   1144c:	strd	r0, [r4, #16]
   11450:	mov	r5, #0
   11454:	str	r5, [sp]
   11458:	mov	r3, r9
   1145c:	mov	r2, r8
   11460:	mov	r1, r6
   11464:	mov	r0, r7
   11468:	bl	11224 <getopt_long@plt>
   1146c:	cmn	r0, #1
   11470:	beq	11540 <__assert_fail@plt+0x1b4>
   11474:	cmp	r0, #99	; 0x63
   11478:	beq	11500 <__assert_fail@plt+0x174>
   1147c:	ble	114a0 <__assert_fail@plt+0x114>
   11480:	cmp	r0, #109	; 0x6d
   11484:	beq	114f4 <__assert_fail@plt+0x168>
   11488:	ble	114d0 <__assert_fail@plt+0x144>
   1148c:	cmp	r0, #119	; 0x77
   11490:	bne	114bc <__assert_fail@plt+0x130>
   11494:	mov	r3, #1
   11498:	strb	r3, [r4, #8]
   1149c:	b	11450 <__assert_fail@plt+0xc4>
   114a0:	cmn	r0, #2
   114a4:	beq	11d08 <__assert_fail@plt+0x97c>
   114a8:	cmp	r0, #76	; 0x4c
   114ac:	bne	114e4 <__assert_fail@plt+0x158>
   114b0:	mov	r3, #1
   114b4:	strb	r3, [r4, #11]
   114b8:	b	11450 <__assert_fail@plt+0xc4>
   114bc:	cmp	r0, #256	; 0x100
   114c0:	bne	114ec <__assert_fail@plt+0x160>
   114c4:	ldr	r3, [fp]
   114c8:	str	r3, [sp, #32]
   114cc:	b	11450 <__assert_fail@plt+0xc4>
   114d0:	cmp	r0, #108	; 0x6c
   114d4:	bne	114ec <__assert_fail@plt+0x160>
   114d8:	mov	r3, #1
   114dc:	strb	r3, [r4]
   114e0:	b	11450 <__assert_fail@plt+0xc4>
   114e4:	cmn	r0, #3
   114e8:	beq	1150c <__assert_fail@plt+0x180>
   114ec:	mov	r0, #1
   114f0:	bl	12de4 <__assert_fail@plt+0x1a58>
   114f4:	mov	r3, #1
   114f8:	strb	r3, [r4, #9]
   114fc:	b	11450 <__assert_fail@plt+0xc4>
   11500:	mov	r3, #1
   11504:	strb	r3, [r4, #10]
   11508:	b	11450 <__assert_fail@plt+0xc4>
   1150c:	ldr	r3, [pc, #2268]	; 11df0 <__assert_fail@plt+0xa64>
   11510:	ldr	r1, [pc, #2268]	; 11df4 <__assert_fail@plt+0xa68>
   11514:	ldr	r2, [pc, #2268]	; 11df8 <__assert_fail@plt+0xa6c>
   11518:	str	r5, [sp, #8]
   1151c:	ldr	r0, [sl]
   11520:	ldr	r3, [r3]
   11524:	str	r1, [sp, #4]
   11528:	str	r2, [sp]
   1152c:	ldr	r1, [pc, #2248]	; 11dfc <__assert_fail@plt+0xa70>
   11530:	ldr	r2, [pc, #2248]	; 11e00 <__assert_fail@plt+0xa74>
   11534:	bl	16030 <__assert_fail@plt+0x4ca4>
   11538:	mov	r0, r5
   1153c:	bl	1123c <exit@plt>
   11540:	ldrb	r3, [r4]
   11544:	cmp	r3, r5
   11548:	bne	11558 <__assert_fail@plt+0x1cc>
   1154c:	ldrb	r3, [r4, #8]
   11550:	cmp	r3, r5
   11554:	beq	119f0 <__assert_fail@plt+0x664>
   11558:	ldr	r5, [pc, #2212]	; 11e04 <__assert_fail@plt+0xa78>
   1155c:	ldr	r3, [sp, #32]
   11560:	cmp	r3, #0
   11564:	ldr	r9, [r5]
   11568:	beq	11a24 <__assert_fail@plt+0x698>
   1156c:	cmp	r7, r9
   11570:	bgt	11d10 <__assert_fail@plt+0x984>
   11574:	ldr	r1, [pc, #2188]	; 11e08 <__assert_fail@plt+0xa7c>
   11578:	ldr	r0, [sp, #32]
   1157c:	bl	110a4 <strcmp@plt>
   11580:	cmp	r0, #0
   11584:	bne	11b10 <__assert_fail@plt+0x784>
   11588:	ldr	r3, [pc, #2172]	; 11e0c <__assert_fail@plt+0xa80>
   1158c:	ldr	r5, [r3]
   11590:	mov	r0, r5
   11594:	bl	112cc <fileno@plt>
   11598:	add	r3, sp, #72	; 0x48
   1159c:	mov	r2, r3
   115a0:	str	r3, [sp, #48]	; 0x30
   115a4:	mov	r1, r0
   115a8:	mov	r0, #3
   115ac:	bl	11188 <__fxstat64@plt>
   115b0:	cmp	r0, #0
   115b4:	bne	115c8 <__assert_fail@plt+0x23c>
   115b8:	ldr	r3, [sp, #88]	; 0x58
   115bc:	and	r3, r3, #61440	; 0xf000
   115c0:	cmp	r3, #32768	; 0x8000
   115c4:	beq	11c58 <__assert_fail@plt+0x8cc>
   115c8:	mov	r0, r5
   115cc:	bl	13144 <__assert_fail@plt+0x1db8>
   115d0:	subs	r8, r0, #0
   115d4:	beq	11db0 <__assert_fail@plt+0xa24>
   115d8:	mov	r3, #0
   115dc:	str	r3, [sp, #56]	; 0x38
   115e0:	mov	r0, #112	; 0x70
   115e4:	bl	16134 <__assert_fail@plt+0x4da8>
   115e8:	mov	r5, #1
   115ec:	mov	r3, r5
   115f0:	mov	r9, #0
   115f4:	str	r0, [sp, #64]	; 0x40
   115f8:	str	r5, [r0]
   115fc:	str	r9, [sp, #40]	; 0x28
   11600:	mov	r7, #0
   11604:	mov	r6, #1
   11608:	str	r3, [r4, #4]
   1160c:	ldr	r9, [sp, #32]
   11610:	b	116ac <__assert_fail@plt+0x320>
   11614:	ldr	r1, [pc, #2028]	; 11e08 <__assert_fail@plt+0xa7c>
   11618:	mov	r0, r5
   1161c:	bl	110a4 <strcmp@plt>
   11620:	subs	sl, r0, #0
   11624:	beq	11744 <__assert_fail@plt+0x3b8>
   11628:	ldrb	r3, [r5]
   1162c:	cmp	r3, #0
   11630:	beq	11784 <__assert_fail@plt+0x3f8>
   11634:	ldr	r3, [sp, #40]	; 0x28
   11638:	cmp	r3, #0
   1163c:	ldreq	sl, [sp, #64]	; 0x40
   11640:	bne	116f8 <__assert_fail@plt+0x36c>
   11644:	mov	r1, #0
   11648:	mov	r0, r5
   1164c:	bl	111dc <open64@plt>
   11650:	cmn	r0, #1
   11654:	beq	1198c <__assert_fail@plt+0x600>
   11658:	mov	r3, #0
   1165c:	mov	r2, #0
   11660:	mov	r1, r5
   11664:	strd	r2, [sp]
   11668:	mov	r2, sl
   1166c:	str	r0, [sp, #68]	; 0x44
   11670:	bl	1212c <__assert_fail@plt+0xda0>
   11674:	ldr	r3, [sp, #68]	; 0x44
   11678:	mov	sl, r0
   1167c:	mov	r0, r3
   11680:	bl	11380 <close@plt>
   11684:	cmp	r0, #0
   11688:	bne	1198c <__assert_fail@plt+0x600>
   1168c:	and	r6, r6, sl
   11690:	uxtb	r6, r6
   11694:	ldr	r3, [sp, #40]	; 0x28
   11698:	add	r7, r7, #1
   1169c:	cmp	r3, #0
   116a0:	moveq	r3, #1
   116a4:	ldreq	r2, [sp, #64]	; 0x40
   116a8:	streq	r3, [r2]
   116ac:	ldr	r1, [sp, #48]	; 0x30
   116b0:	mov	r0, r8
   116b4:	bl	13178 <__assert_fail@plt+0x1dec>
   116b8:	subs	r5, r0, #0
   116bc:	beq	11810 <__assert_fail@plt+0x484>
   116c0:	cmp	r9, #0
   116c4:	beq	117d8 <__assert_fail@plt+0x44c>
   116c8:	ldr	r1, [pc, #1848]	; 11e08 <__assert_fail@plt+0xa7c>
   116cc:	mov	r0, r9
   116d0:	bl	110a4 <strcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	beq	11614 <__assert_fail@plt+0x288>
   116dc:	ldrb	r3, [r5]
   116e0:	cmp	r3, #0
   116e4:	beq	11784 <__assert_fail@plt+0x3f8>
   116e8:	ldr	r3, [sp, #40]	; 0x28
   116ec:	cmp	r3, #0
   116f0:	ldreq	sl, [sp, #40]	; 0x28
   116f4:	beq	11700 <__assert_fail@plt+0x374>
   116f8:	mov	sl, #112	; 0x70
   116fc:	mul	sl, sl, r7
   11700:	ldr	r3, [sp, #64]	; 0x40
   11704:	ldr	r1, [pc, #1788]	; 11e08 <__assert_fail@plt+0xa7c>
   11708:	mov	r0, r5
   1170c:	add	sl, r3, sl
   11710:	bl	110a4 <strcmp@plt>
   11714:	cmp	r0, #0
   11718:	bne	11644 <__assert_fail@plt+0x2b8>
   1171c:	mov	r2, sl
   11720:	mvn	fp, #0
   11724:	mvn	sl, #0
   11728:	mov	r3, #1
   1172c:	strd	sl, [sp]
   11730:	mov	r1, r5
   11734:	strb	r3, [r4, #60]	; 0x3c
   11738:	bl	1212c <__assert_fail@plt+0xda0>
   1173c:	mov	sl, r0
   11740:	b	1168c <__assert_fail@plt+0x300>
   11744:	mov	r2, #5
   11748:	ldr	r1, [pc, #1728]	; 11e10 <__assert_fail@plt+0xa84>
   1174c:	bl	11134 <dcgettext@plt>
   11750:	mov	r1, r5
   11754:	mov	r6, r0
   11758:	mov	r0, #4
   1175c:	bl	155a0 <__assert_fail@plt+0x4214>
   11760:	mov	r2, r6
   11764:	mov	r1, sl
   11768:	mov	r3, r0
   1176c:	mov	r0, sl
   11770:	bl	111d0 <error@plt>
   11774:	ldrb	r3, [r5]
   11778:	cmp	r3, #0
   1177c:	movne	r6, sl
   11780:	bne	11694 <__assert_fail@plt+0x308>
   11784:	mov	r0, r8
   11788:	bl	13214 <__assert_fail@plt+0x1e88>
   1178c:	mov	r2, r9
   11790:	mov	r1, #3
   11794:	mov	r6, r0
   11798:	mov	r0, #0
   1179c:	bl	1567c <__assert_fail@plt+0x42f0>
   117a0:	mov	r2, #5
   117a4:	ldr	r1, [pc, #1640]	; 11e14 <__assert_fail@plt+0xa88>
   117a8:	mov	r5, r0
   117ac:	mov	r0, #0
   117b0:	bl	11134 <dcgettext@plt>
   117b4:	mov	r1, #0
   117b8:	str	r6, [sp]
   117bc:	mov	r3, r5
   117c0:	ldr	r2, [pc, #1616]	; 11e18 <__assert_fail@plt+0xa8c>
   117c4:	mov	r6, r1
   117c8:	str	r0, [sp, #4]
   117cc:	mov	r0, r1
   117d0:	bl	111d0 <error@plt>
   117d4:	b	11694 <__assert_fail@plt+0x308>
   117d8:	ldrb	r3, [r5]
   117dc:	cmp	r3, #0
   117e0:	bne	116e8 <__assert_fail@plt+0x35c>
   117e4:	mov	r2, #5
   117e8:	ldr	r1, [pc, #1572]	; 11e14 <__assert_fail@plt+0xa88>
   117ec:	mov	r0, r9
   117f0:	bl	11134 <dcgettext@plt>
   117f4:	ldr	r2, [pc, #1568]	; 11e1c <__assert_fail@plt+0xa90>
   117f8:	mov	r1, r9
   117fc:	mov	r6, r9
   11800:	mov	r3, r0
   11804:	mov	r0, r9
   11808:	bl	111d0 <error@plt>
   1180c:	b	11694 <__assert_fail@plt+0x308>
   11810:	ldr	r3, [sp, #72]	; 0x48
   11814:	cmp	r3, #3
   11818:	beq	11db0 <__assert_fail@plt+0xa24>
   1181c:	cmp	r3, #4
   11820:	bne	11920 <__assert_fail@plt+0x594>
   11824:	bl	11284 <__errno_location@plt>
   11828:	mov	r2, #5
   1182c:	ldr	r1, [pc, #1516]	; 11e20 <__assert_fail@plt+0xa94>
   11830:	mov	r6, r5
   11834:	ldr	r7, [r0]
   11838:	mov	r0, r5
   1183c:	bl	11134 <dcgettext@plt>
   11840:	ldr	r2, [sp, #32]
   11844:	mov	r1, #3
   11848:	mov	r9, r0
   1184c:	mov	r0, r5
   11850:	bl	1567c <__assert_fail@plt+0x42f0>
   11854:	mov	r2, r9
   11858:	mov	r1, r7
   1185c:	mov	r3, r0
   11860:	mov	r0, r5
   11864:	bl	111d0 <error@plt>
   11868:	ldr	r3, [sp, #56]	; 0x38
   1186c:	cmp	r3, #0
   11870:	bne	119c0 <__assert_fail@plt+0x634>
   11874:	mov	r0, r8
   11878:	bl	13214 <__assert_fail@plt+0x1e88>
   1187c:	cmp	r0, #1
   11880:	bls	118dc <__assert_fail@plt+0x550>
   11884:	ldrd	sl, [r4, #16]
   11888:	mov	r2, #5
   1188c:	ldr	r1, [pc, #1424]	; 11e24 <__assert_fail@plt+0xa98>
   11890:	strd	sl, [sp, #32]
   11894:	ldrd	sl, [r4, #24]
   11898:	mov	r0, #0
   1189c:	strd	sl, [sp, #40]	; 0x28
   118a0:	ldrd	sl, [r4, #32]
   118a4:	strd	sl, [sp, #48]	; 0x30
   118a8:	ldrd	sl, [r4, #40]	; 0x28
   118ac:	strd	sl, [sp, #56]	; 0x38
   118b0:	ldrd	sl, [r4, #48]	; 0x30
   118b4:	bl	11134 <dcgettext@plt>
   118b8:	ldrd	r2, [sp, #56]	; 0x38
   118bc:	strd	sl, [sp, #16]
   118c0:	strd	r2, [sp, #8]
   118c4:	ldrd	r2, [sp, #48]	; 0x30
   118c8:	strd	r2, [sp]
   118cc:	ldrd	r2, [sp, #40]	; 0x28
   118d0:	str	r0, [sp, #24]
   118d4:	ldrd	r0, [sp, #32]
   118d8:	bl	11f48 <__assert_fail@plt+0xbbc>
   118dc:	mov	r0, r8
   118e0:	bl	13234 <__assert_fail@plt+0x1ea8>
   118e4:	ldr	r0, [sp, #64]	; 0x40
   118e8:	bl	110ec <free@plt>
   118ec:	ldrb	r3, [r4, #60]	; 0x3c
   118f0:	cmp	r3, #0
   118f4:	bne	119cc <__assert_fail@plt+0x640>
   118f8:	ldr	r3, [pc, #1224]	; 11dc8 <__assert_fail@plt+0xa3c>
   118fc:	ldr	r2, [sp, #324]	; 0x144
   11900:	eor	r0, r6, #1
   11904:	ldr	r3, [r3]
   11908:	uxtb	r0, r0
   1190c:	cmp	r2, r3
   11910:	bne	11dac <__assert_fail@plt+0xa20>
   11914:	add	sp, sp, #332	; 0x14c
   11918:	vpop	{d8-d9}
   1191c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11920:	cmp	r3, #2
   11924:	beq	1193c <__assert_fail@plt+0x5b0>
   11928:	ldr	r3, [pc, #1272]	; 11e28 <__assert_fail@plt+0xa9c>
   1192c:	ldr	r2, [pc, #1272]	; 11e2c <__assert_fail@plt+0xaa0>
   11930:	ldr	r1, [pc, #1272]	; 11e30 <__assert_fail@plt+0xaa4>
   11934:	ldr	r0, [pc, #1272]	; 11e34 <__assert_fail@plt+0xaa8>
   11938:	bl	1138c <__assert_fail@plt>
   1193c:	ldr	r3, [sp, #32]
   11940:	cmp	r3, #0
   11944:	movne	r5, #0
   11948:	andeq	r5, r6, #1
   1194c:	cmp	r5, #0
   11950:	beq	11868 <__assert_fail@plt+0x4dc>
   11954:	mov	r0, r8
   11958:	bl	13214 <__assert_fail@plt+0x1e88>
   1195c:	subs	r1, r0, #0
   11960:	movne	r6, r5
   11964:	bne	11868 <__assert_fail@plt+0x4dc>
   11968:	mvn	r2, #0
   1196c:	mvn	r3, #0
   11970:	strd	r2, [sp]
   11974:	mov	r3, #1
   11978:	ldr	r2, [sp, #64]	; 0x40
   1197c:	strb	r3, [r4, #60]	; 0x3c
   11980:	bl	1212c <__assert_fail@plt+0xda0>
   11984:	mov	r6, r0
   11988:	b	11868 <__assert_fail@plt+0x4dc>
   1198c:	bl	11284 <__errno_location@plt>
   11990:	mov	sl, #0
   11994:	mov	r2, r5
   11998:	mov	r1, #3
   1199c:	ldr	r5, [r0]
   119a0:	mov	r0, sl
   119a4:	bl	1567c <__assert_fail@plt+0x42f0>
   119a8:	ldr	r2, [pc, #1132]	; 11e1c <__assert_fail@plt+0xa90>
   119ac:	mov	r1, r5
   119b0:	mov	r3, r0
   119b4:	mov	r0, sl
   119b8:	bl	111d0 <error@plt>
   119bc:	b	1168c <__assert_fail@plt+0x300>
   119c0:	add	r0, sp, #180	; 0xb4
   119c4:	bl	159b4 <__assert_fail@plt+0x4628>
   119c8:	b	11874 <__assert_fail@plt+0x4e8>
   119cc:	mov	r0, #0
   119d0:	bl	11380 <close@plt>
   119d4:	cmp	r0, #0
   119d8:	beq	118f8 <__assert_fail@plt+0x56c>
   119dc:	bl	11284 <__errno_location@plt>
   119e0:	ldr	r2, [pc, #1056]	; 11e08 <__assert_fail@plt+0xa7c>
   119e4:	ldr	r1, [r0]
   119e8:	mov	r0, #1
   119ec:	bl	111d0 <error@plt>
   119f0:	ldrb	r3, [r4, #9]
   119f4:	cmp	r3, r5
   119f8:	bne	11558 <__assert_fail@plt+0x1cc>
   119fc:	ldrb	r3, [r4, #10]
   11a00:	cmp	r3, r5
   11a04:	bne	11558 <__assert_fail@plt+0x1cc>
   11a08:	ldrb	r3, [r4, #11]
   11a0c:	cmp	r3, r5
   11a10:	moveq	r3, #1
   11a14:	strbeq	r3, [r4, #10]
   11a18:	strbeq	r3, [r4, #8]
   11a1c:	strbeq	r3, [r4]
   11a20:	b	11558 <__assert_fail@plt+0x1cc>
   11a24:	cmp	r7, r9
   11a28:	ble	11bf4 <__assert_fail@plt+0x868>
   11a2c:	add	r6, r6, r9, lsl #2
   11a30:	mov	r0, r6
   11a34:	bl	1311c <__assert_fail@plt+0x1d90>
   11a38:	sub	r9, r7, r9
   11a3c:	subs	r8, r0, #0
   11a40:	beq	11db0 <__assert_fail@plt+0xa24>
   11a44:	ldr	r3, [sp, #32]
   11a48:	str	r3, [sp, #56]	; 0x38
   11a4c:	mov	r5, #112	; 0x70
   11a50:	umull	r0, r1, r9, r5
   11a54:	adds	r3, r1, #0
   11a58:	movne	r3, #1
   11a5c:	cmp	r0, #0
   11a60:	blt	11db0 <__assert_fail@plt+0xa24>
   11a64:	cmp	r3, #0
   11a68:	bne	11db0 <__assert_fail@plt+0xa24>
   11a6c:	mul	r3, r5, r9
   11a70:	mov	r0, r3
   11a74:	str	r3, [sp, #40]	; 0x28
   11a78:	bl	16134 <__assert_fail@plt+0x4da8>
   11a7c:	cmp	r9, #1
   11a80:	str	r0, [sp, #64]	; 0x40
   11a84:	beq	11c24 <__assert_fail@plt+0x898>
   11a88:	ldr	r3, [sp, #64]	; 0x40
   11a8c:	ldr	sl, [pc, #884]	; 11e08 <__assert_fail@plt+0xa7c>
   11a90:	add	r7, r6, r9, lsl #2
   11a94:	add	fp, r3, #8
   11a98:	b	11abc <__assert_fail@plt+0x730>
   11a9c:	mov	r2, fp
   11aa0:	mov	r1, #0
   11aa4:	mov	r0, #3
   11aa8:	bl	11188 <__fxstat64@plt>
   11aac:	cmp	r6, r7
   11ab0:	str	r0, [fp, #-8]
   11ab4:	add	fp, fp, #112	; 0x70
   11ab8:	beq	11af0 <__assert_fail@plt+0x764>
   11abc:	ldr	r5, [r6], #4
   11ac0:	cmp	r5, #0
   11ac4:	beq	11a9c <__assert_fail@plt+0x710>
   11ac8:	mov	r1, sl
   11acc:	mov	r0, r5
   11ad0:	bl	110a4 <strcmp@plt>
   11ad4:	cmp	r0, #0
   11ad8:	beq	11a9c <__assert_fail@plt+0x710>
   11adc:	mov	r1, r5
   11ae0:	mov	r2, fp
   11ae4:	mov	r0, #3
   11ae8:	bl	1135c <__xstat64@plt>
   11aec:	b	11aac <__assert_fail@plt+0x720>
   11af0:	ldr	r2, [sp, #64]	; 0x40
   11af4:	ldr	r3, [r2]
   11af8:	cmp	r3, #0
   11afc:	ble	11b60 <__assert_fail@plt+0x7d4>
   11b00:	add	r2, sp, #72	; 0x48
   11b04:	mov	r3, #1
   11b08:	str	r2, [sp, #48]	; 0x30
   11b0c:	b	115fc <__assert_fail@plt+0x270>
   11b10:	ldr	r1, [pc, #800]	; 11e38 <__assert_fail@plt+0xaac>
   11b14:	ldr	r0, [sp, #32]
   11b18:	bl	11338 <fopen64@plt>
   11b1c:	subs	r5, r0, #0
   11b20:	bne	11590 <__assert_fail@plt+0x204>
   11b24:	bl	11284 <__errno_location@plt>
   11b28:	mov	r2, #5
   11b2c:	ldr	r1, [pc, #776]	; 11e3c <__assert_fail@plt+0xab0>
   11b30:	ldr	r4, [r0]
   11b34:	mov	r0, r5
   11b38:	bl	11134 <dcgettext@plt>
   11b3c:	ldr	r1, [sp, #32]
   11b40:	mov	r5, r0
   11b44:	mov	r0, #4
   11b48:	bl	155a0 <__assert_fail@plt+0x4214>
   11b4c:	mov	r2, r5
   11b50:	mov	r1, r4
   11b54:	mov	r3, r0
   11b58:	mov	r0, #1
   11b5c:	bl	111d0 <error@plt>
   11b60:	mov	r3, r2
   11b64:	ldr	r2, [sp, #40]	; 0x28
   11b68:	mov	r0, #0
   11b6c:	add	r5, r3, r2
   11b70:	mov	r1, #0
   11b74:	mov	r6, #1
   11b78:	b	11bb0 <__assert_fail@plt+0x824>
   11b7c:	ldr	r2, [r3]
   11b80:	cmp	r2, #0
   11b84:	bne	11bac <__assert_fail@plt+0x820>
   11b88:	ldr	r2, [r3, #24]
   11b8c:	and	r2, r2, #61440	; 0xf000
   11b90:	cmp	r2, #32768	; 0x8000
   11b94:	movne	r6, #7
   11b98:	bne	11bac <__assert_fail@plt+0x820>
   11b9c:	ldr	r2, [r3, #56]	; 0x38
   11ba0:	ldr	ip, [r3, #60]	; 0x3c
   11ba4:	adds	r0, r0, r2
   11ba8:	adc	r1, r1, ip
   11bac:	add	r3, r3, #112	; 0x70
   11bb0:	cmp	r3, r5
   11bb4:	bne	11b7c <__assert_fail@plt+0x7f0>
   11bb8:	mov	r5, #1
   11bbc:	b	11bd0 <__assert_fail@plt+0x844>
   11bc0:	mov	r2, #10
   11bc4:	mov	r3, #0
   11bc8:	add	r5, r5, #1
   11bcc:	bl	16fec <_obstack_memory_used@@Base+0x6f4>
   11bd0:	cmp	r1, #0
   11bd4:	cmpeq	r0, #9
   11bd8:	bhi	11bc0 <__assert_fail@plt+0x834>
   11bdc:	cmp	r5, r6
   11be0:	add	r2, sp, #72	; 0x48
   11be4:	movge	r3, r5
   11be8:	movlt	r3, r6
   11bec:	str	r2, [sp, #48]	; 0x30
   11bf0:	b	115fc <__assert_fail@plt+0x270>
   11bf4:	ldr	r0, [pc, #580]	; 11e40 <__assert_fail@plt+0xab4>
   11bf8:	bl	1311c <__assert_fail@plt+0x1d90>
   11bfc:	subs	r8, r0, #0
   11c00:	beq	11db0 <__assert_fail@plt+0xa24>
   11c04:	mov	r0, #112	; 0x70
   11c08:	bl	16134 <__assert_fail@plt+0x4da8>
   11c0c:	ldr	r6, [pc, #556]	; 11e40 <__assert_fail@plt+0xab4>
   11c10:	mov	r3, #112	; 0x70
   11c14:	str	r3, [sp, #40]	; 0x28
   11c18:	ldr	r3, [sp, #32]
   11c1c:	str	r3, [sp, #56]	; 0x38
   11c20:	str	r0, [sp, #64]	; 0x40
   11c24:	ldrb	r3, [r4]
   11c28:	ldrb	r0, [r4, #8]
   11c2c:	ldrb	r2, [r4, #9]
   11c30:	ldrb	r1, [r4, #10]
   11c34:	add	r3, r3, r0
   11c38:	add	r3, r3, r2
   11c3c:	ldrb	r2, [r4, #11]
   11c40:	add	r3, r3, r1
   11c44:	add	r3, r3, r2
   11c48:	cmp	r3, #1
   11c4c:	beq	11ce4 <__assert_fail@plt+0x958>
   11c50:	mov	r9, #1
   11c54:	b	11a88 <__assert_fail@plt+0x6fc>
   11c58:	ldr	r3, [sp, #48]	; 0x30
   11c5c:	vldr	d8, [pc, #340]	; 11db8 <__assert_fail@plt+0xa2c>
   11c60:	ldrd	r0, [r3, #48]	; 0x30
   11c64:	bl	16f8c <_obstack_memory_used@@Base+0x694>
   11c68:	vmov	d9, r0, r1
   11c6c:	bl	1352c <__assert_fail@plt+0x21a0>
   11c70:	vldr	d7, [pc, #328]	; 11dc0 <__assert_fail@plt+0xa34>
   11c74:	vmul.f64	d0, d0, d8
   11c78:	vcmpe.f64	d0, d7
   11c7c:	vmrs	APSR_nzcv, fpscr
   11c80:	ble	11cfc <__assert_fail@plt+0x970>
   11c84:	vcmpe.f64	d9, d7
   11c88:	vmrs	APSR_nzcv, fpscr
   11c8c:	bhi	115c8 <__assert_fail@plt+0x23c>
   11c90:	add	r0, sp, #180	; 0xb4
   11c94:	bl	15938 <__assert_fail@plt+0x45ac>
   11c98:	add	r1, sp, #180	; 0xb4
   11c9c:	mov	r0, r5
   11ca0:	bl	159e4 <__assert_fail@plt+0x4658>
   11ca4:	subs	r3, r0, #0
   11ca8:	str	r3, [sp, #56]	; 0x38
   11cac:	beq	11d78 <__assert_fail@plt+0x9ec>
   11cb0:	mov	r0, r5
   11cb4:	bl	163bc <__assert_fail@plt+0x5030>
   11cb8:	cmp	r0, #0
   11cbc:	bne	11d78 <__assert_fail@plt+0x9ec>
   11cc0:	ldr	r6, [sp, #184]	; 0xb8
   11cc4:	ldr	r9, [sp, #180]	; 0xb4
   11cc8:	mov	r0, r6
   11ccc:	bl	1311c <__assert_fail@plt+0x1d90>
   11cd0:	subs	r8, r0, #0
   11cd4:	beq	11db0 <__assert_fail@plt+0xa24>
   11cd8:	cmp	r9, #0
   11cdc:	bne	11a4c <__assert_fail@plt+0x6c0>
   11ce0:	b	115e0 <__assert_fail@plt+0x254>
   11ce4:	ldr	r2, [sp, #64]	; 0x40
   11ce8:	mov	r9, r3
   11cec:	str	r3, [r2]
   11cf0:	add	r2, sp, #72	; 0x48
   11cf4:	str	r2, [sp, #48]	; 0x30
   11cf8:	b	115fc <__assert_fail@plt+0x270>
   11cfc:	bl	1352c <__assert_fail@plt+0x21a0>
   11d00:	vmul.f64	d7, d0, d8
   11d04:	b	11c84 <__assert_fail@plt+0x8f8>
   11d08:	mov	r0, r5
   11d0c:	bl	12de4 <__assert_fail@plt+0x1a58>
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #296]	; 11e44 <__assert_fail@plt+0xab8>
   11d18:	mov	r0, #0
   11d1c:	bl	11134 <dcgettext@plt>
   11d20:	ldr	r3, [r5]
   11d24:	ldr	r1, [r6, r3, lsl #2]
   11d28:	mov	r4, r0
   11d2c:	mov	r0, #4
   11d30:	bl	155a0 <__assert_fail@plt+0x4214>
   11d34:	mov	r1, #0
   11d38:	mov	r2, r4
   11d3c:	mov	r3, r0
   11d40:	mov	r0, r1
   11d44:	bl	111d0 <error@plt>
   11d48:	ldr	r3, [pc, #248]	; 11e48 <__assert_fail@plt+0xabc>
   11d4c:	mov	r2, #5
   11d50:	ldr	r1, [pc, #244]	; 11e4c <__assert_fail@plt+0xac0>
   11d54:	mov	r0, #0
   11d58:	ldr	r4, [r3]
   11d5c:	bl	11134 <dcgettext@plt>
   11d60:	ldr	r2, [pc, #232]	; 11e50 <__assert_fail@plt+0xac4>
   11d64:	mov	r1, #1
   11d68:	mov	r3, r0
   11d6c:	mov	r0, r4
   11d70:	bl	112d8 <__fprintf_chk@plt>
   11d74:	b	114ec <__assert_fail@plt+0x160>
   11d78:	mov	r2, #5
   11d7c:	ldr	r1, [pc, #208]	; 11e54 <__assert_fail@plt+0xac8>
   11d80:	mov	r0, #0
   11d84:	bl	11134 <dcgettext@plt>
   11d88:	ldr	r1, [sp, #32]
   11d8c:	mov	r4, r0
   11d90:	mov	r0, #4
   11d94:	bl	155a0 <__assert_fail@plt+0x4214>
   11d98:	mov	r2, r4
   11d9c:	mov	r1, #0
   11da0:	mov	r3, r0
   11da4:	mov	r0, #1
   11da8:	bl	111d0 <error@plt>
   11dac:	bl	11140 <__stack_chk_fail@plt>
   11db0:	bl	1637c <__assert_fail@plt+0x4ff0>
   11db4:	nop			; (mov r0, r0)
   11db8:	andeq	r0, r0, r0
   11dbc:	svccc	0x00e00000
   11dc0:	andeq	r0, r0, r0
   11dc4:	cmnmi	r4, r0
   11dc8:	andeq	r7, r2, r8, lsl #30
   11dcc:	andeq	r7, r1, r4, asr lr
   11dd0:	strdeq	r7, [r1], -r0
   11dd4:	andeq	r7, r1, r4, asr #14
   11dd8:	andeq	r3, r1, ip, ror r2
   11ddc:	muleq	r2, r8, r1
   11de0:	andeq	r8, r2, ip, lsl #3
   11de4:	andeq	r7, r1, r8, lsr #4
   11de8:	andeq	r7, r1, r0, lsr #16
   11dec:	muleq	r2, r0, r1
   11df0:	andeq	r8, r2, r0, lsr #2
   11df4:	andeq	r7, r1, r4, lsl #16
   11df8:	andeq	r7, r1, r4, lsl r8
   11dfc:	ldrdeq	r7, [r1], -r4
   11e00:	andeq	r7, r1, r0, asr #14
   11e04:	andeq	r8, r2, r8, ror r1
   11e08:	andeq	r7, r1, r0, ror r8
   11e0c:	andeq	r8, r2, r8, lsl #3
   11e10:	strdeq	r7, [r1], -r8
   11e14:	andeq	r7, r1, r0, asr #18
   11e18:	andeq	r7, r1, r0, ror #18
   11e1c:	andeq	r7, r1, r0, lsr sl
   11e20:			; <UNDEFINED> instruction: 0x000178b4
   11e24:	andeq	r7, r1, r8, lsr r9
   11e28:			; <UNDEFINED> instruction: 0x000172b8
   11e2c:	andeq	r0, r0, sl, lsr #6
   11e30:	andeq	r7, r1, r4, asr #17
   11e34:	ldrdeq	r7, [r1], -r0
   11e38:	andeq	r7, r1, r4, ror r8
   11e3c:	andeq	r7, r1, r8, ror r8
   11e40:	ldrdeq	r8, [r2], -r0
   11e44:	andeq	r7, r1, r8, lsr #16
   11e48:	andeq	r8, r2, r0, lsl #3
   11e4c:	andeq	r7, r1, ip, lsr r8
   11e50:	andeq	r7, r1, r8, ror fp
   11e54:	muleq	r1, r4, r8
   11e58:	mov	fp, #0
   11e5c:	mov	lr, #0
   11e60:	pop	{r1}		; (ldr r1, [sp], #4)
   11e64:	mov	r2, sp
   11e68:	push	{r2}		; (str r2, [sp, #-4]!)
   11e6c:	push	{r0}		; (str r0, [sp, #-4]!)
   11e70:	ldr	ip, [pc, #16]	; 11e88 <__assert_fail@plt+0xafc>
   11e74:	push	{ip}		; (str ip, [sp, #-4]!)
   11e78:	ldr	r0, [pc, #12]	; 11e8c <__assert_fail@plt+0xb00>
   11e7c:	ldr	r3, [pc, #12]	; 11e90 <__assert_fail@plt+0xb04>
   11e80:	bl	11200 <__libc_start_main@plt>
   11e84:	bl	11374 <abort@plt>
   11e88:	andeq	r7, r1, r0, asr #3
   11e8c:	muleq	r1, r8, r3
   11e90:	andeq	r7, r1, r0, ror #2
   11e94:	ldr	r3, [pc, #20]	; 11eb0 <__assert_fail@plt+0xb24>
   11e98:	ldr	r2, [pc, #20]	; 11eb4 <__assert_fail@plt+0xb28>
   11e9c:	add	r3, pc, r3
   11ea0:	ldr	r2, [r3, r2]
   11ea4:	cmp	r2, #0
   11ea8:	bxeq	lr
   11eac:	b	11218 <__gmon_start__@plt>
   11eb0:	andeq	r6, r1, ip, asr r1
   11eb4:	andeq	r0, r0, r4, lsl r1
   11eb8:	ldr	r0, [pc, #24]	; 11ed8 <__assert_fail@plt+0xb4c>
   11ebc:	ldr	r3, [pc, #24]	; 11edc <__assert_fail@plt+0xb50>
   11ec0:	cmp	r3, r0
   11ec4:	bxeq	lr
   11ec8:	ldr	r3, [pc, #16]	; 11ee0 <__assert_fail@plt+0xb54>
   11ecc:	cmp	r3, #0
   11ed0:	bxeq	lr
   11ed4:	bx	r3
   11ed8:	andeq	r8, r2, ip, ror #2
   11edc:	andeq	r8, r2, ip, ror #2
   11ee0:	andeq	r0, r0, r0
   11ee4:	ldr	r0, [pc, #36]	; 11f10 <__assert_fail@plt+0xb84>
   11ee8:	ldr	r1, [pc, #36]	; 11f14 <__assert_fail@plt+0xb88>
   11eec:	sub	r1, r1, r0
   11ef0:	asr	r1, r1, #2
   11ef4:	add	r1, r1, r1, lsr #31
   11ef8:	asrs	r1, r1, #1
   11efc:	bxeq	lr
   11f00:	ldr	r3, [pc, #16]	; 11f18 <__assert_fail@plt+0xb8c>
   11f04:	cmp	r3, #0
   11f08:	bxeq	lr
   11f0c:	bx	r3
   11f10:	andeq	r8, r2, ip, ror #2
   11f14:	andeq	r8, r2, ip, ror #2
   11f18:	andeq	r0, r0, r0
   11f1c:	push	{r4, lr}
   11f20:	ldr	r4, [pc, #24]	; 11f40 <__assert_fail@plt+0xbb4>
   11f24:	ldrb	r3, [r4]
   11f28:	cmp	r3, #0
   11f2c:	popne	{r4, pc}
   11f30:	bl	11eb8 <__assert_fail@plt+0xb2c>
   11f34:	mov	r3, #1
   11f38:	strb	r3, [r4]
   11f3c:	pop	{r4, pc}
   11f40:	muleq	r2, r4, r1
   11f44:	b	11ee4 <__assert_fail@plt+0xb58>
   11f48:	push	{r4, r5, r6, r7, r8, r9, lr}
   11f4c:	mov	r8, r2
   11f50:	ldr	r4, [pc, #444]	; 12114 <__assert_fail@plt+0xd88>
   11f54:	ldr	r7, [pc, #444]	; 12118 <__assert_fail@plt+0xd8c>
   11f58:	sub	sp, sp, #36	; 0x24
   11f5c:	ldrb	r2, [r4]
   11f60:	mov	r9, r3
   11f64:	ldr	r3, [r7]
   11f68:	cmp	r2, #0
   11f6c:	str	r3, [sp, #28]
   11f70:	ldr	r5, [sp, #88]	; 0x58
   11f74:	ldreq	r6, [pc, #416]	; 1211c <__assert_fail@plt+0xd90>
   11f78:	bne	120dc <__assert_fail@plt+0xd50>
   11f7c:	ldrb	r3, [r4, #8]
   11f80:	cmp	r3, #0
   11f84:	bne	120ac <__assert_fail@plt+0xd20>
   11f88:	ldrb	r3, [r4, #9]
   11f8c:	cmp	r3, #0
   11f90:	bne	12080 <__assert_fail@plt+0xcf4>
   11f94:	ldrb	r3, [r4, #10]
   11f98:	cmp	r3, #0
   11f9c:	bne	12054 <__assert_fail@plt+0xcc8>
   11fa0:	ldrb	r3, [r4, #11]
   11fa4:	cmp	r3, #0
   11fa8:	bne	1202c <__assert_fail@plt+0xca0>
   11fac:	cmp	r5, #0
   11fb0:	beq	11fec <__assert_fail@plt+0xc60>
   11fb4:	mov	r1, #10
   11fb8:	mov	r0, r5
   11fbc:	bl	1126c <strchr@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fdc <__assert_fail@plt+0xc50>
   11fc8:	mov	r2, r5
   11fcc:	mov	r1, #3
   11fd0:	mov	r0, #0
   11fd4:	bl	1567c <__assert_fail@plt+0x42f0>
   11fd8:	mov	r5, r0
   11fdc:	mov	r2, r5
   11fe0:	ldr	r1, [pc, #312]	; 12120 <__assert_fail@plt+0xd94>
   11fe4:	mov	r0, #1
   11fe8:	bl	112c0 <__printf_chk@plt>
   11fec:	ldr	r3, [pc, #304]	; 12124 <__assert_fail@plt+0xd98>
   11ff0:	ldr	r0, [r3]
   11ff4:	ldr	r3, [r0, #20]
   11ff8:	ldr	r2, [r0, #24]
   11ffc:	cmp	r3, r2
   12000:	addcc	r1, r3, #1
   12004:	movcc	r2, #10
   12008:	strcc	r1, [r0, #20]
   1200c:	strbcc	r2, [r3]
   12010:	bcs	12104 <__assert_fail@plt+0xd78>
   12014:	ldr	r2, [sp, #28]
   12018:	ldr	r3, [r7]
   1201c:	cmp	r2, r3
   12020:	bne	12110 <__assert_fail@plt+0xd84>
   12024:	add	sp, sp, #36	; 0x24
   12028:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1202c:	add	r2, sp, #4
   12030:	ldrd	r0, [sp, #80]	; 0x50
   12034:	ldr	r4, [r4, #4]
   12038:	bl	1338c <__assert_fail@plt+0x2000>
   1203c:	mov	r2, r4
   12040:	mov	r1, r6
   12044:	mov	r3, r0
   12048:	mov	r0, #1
   1204c:	bl	112c0 <__printf_chk@plt>
   12050:	b	11fac <__assert_fail@plt+0xc20>
   12054:	add	r2, sp, #4
   12058:	ldrd	r0, [sp, #72]	; 0x48
   1205c:	ldr	r8, [r4, #4]
   12060:	bl	1338c <__assert_fail@plt+0x2000>
   12064:	mov	r1, r6
   12068:	mov	r2, r8
   1206c:	ldr	r6, [pc, #180]	; 12128 <__assert_fail@plt+0xd9c>
   12070:	mov	r3, r0
   12074:	mov	r0, #1
   12078:	bl	112c0 <__printf_chk@plt>
   1207c:	b	11fa0 <__assert_fail@plt+0xc14>
   12080:	add	r2, sp, #4
   12084:	ldrd	r0, [sp, #64]	; 0x40
   12088:	ldr	r8, [r4, #4]
   1208c:	bl	1338c <__assert_fail@plt+0x2000>
   12090:	mov	r1, r6
   12094:	mov	r2, r8
   12098:	ldr	r6, [pc, #136]	; 12128 <__assert_fail@plt+0xd9c>
   1209c:	mov	r3, r0
   120a0:	mov	r0, #1
   120a4:	bl	112c0 <__printf_chk@plt>
   120a8:	b	11f94 <__assert_fail@plt+0xc08>
   120ac:	mov	r0, r8
   120b0:	mov	r1, r9
   120b4:	add	r2, sp, #4
   120b8:	ldr	r8, [r4, #4]
   120bc:	bl	1338c <__assert_fail@plt+0x2000>
   120c0:	mov	r1, r6
   120c4:	mov	r2, r8
   120c8:	ldr	r6, [pc, #88]	; 12128 <__assert_fail@plt+0xd9c>
   120cc:	mov	r3, r0
   120d0:	mov	r0, #1
   120d4:	bl	112c0 <__printf_chk@plt>
   120d8:	b	11f88 <__assert_fail@plt+0xbfc>
   120dc:	add	r2, sp, #4
   120e0:	ldr	r6, [r4, #4]
   120e4:	bl	1338c <__assert_fail@plt+0x2000>
   120e8:	mov	r2, r6
   120ec:	ldr	r1, [pc, #40]	; 1211c <__assert_fail@plt+0xd90>
   120f0:	ldr	r6, [pc, #48]	; 12128 <__assert_fail@plt+0xd9c>
   120f4:	mov	r3, r0
   120f8:	mov	r0, #1
   120fc:	bl	112c0 <__printf_chk@plt>
   12100:	b	11f7c <__assert_fail@plt+0xbf0>
   12104:	mov	r1, #10
   12108:	bl	11308 <__overflow@plt>
   1210c:	b	12014 <__assert_fail@plt+0xc88>
   12110:	bl	11140 <__stack_chk_fail@plt>
   12114:	muleq	r2, r8, r1
   12118:	andeq	r7, r2, r8, lsl #30
   1211c:	andeq	r7, r1, r9, ror #3
   12120:	andeq	r7, r1, r0, asr #5
   12124:	andeq	r8, r2, ip, lsl #3
   12128:	andeq	r7, r1, r8, ror #3
   1212c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12130:	sub	sp, sp, #16384	; 0x4000
   12134:	sub	sp, sp, #148	; 0x94
   12138:	subs	r3, r1, #0
   1213c:	str	r3, [sp, #96]	; 0x60
   12140:	ldr	r3, [pc, #3196]	; 12dc4 <__assert_fail@plt+0x1a38>
   12144:	mov	r4, r2
   12148:	add	r2, sp, #16384	; 0x4000
   1214c:	ldr	r3, [r3]
   12150:	add	r2, r2, #140	; 0x8c
   12154:	str	r0, [sp, #88]	; 0x58
   12158:	str	r3, [r2]
   1215c:	beq	128bc <__assert_fail@plt+0x1530>
   12160:	ldr	r3, [sp, #96]	; 0x60
   12164:	str	r3, [sp, #108]	; 0x6c
   12168:	bl	111ac <__ctype_get_mb_cur_max@plt>
   1216c:	ldr	r3, [pc, #3156]	; 12dc8 <__assert_fail@plt+0x1a3c>
   12170:	ldrb	r5, [r3, #10]
   12174:	cmp	r0, #1
   12178:	bls	1236c <__assert_fail@plt+0xfe0>
   1217c:	ldrb	r3, [r3, #9]
   12180:	str	r3, [sp, #100]	; 0x64
   12184:	ldr	r1, [pc, #3132]	; 12dc8 <__assert_fail@plt+0x1a3c>
   12188:	ldrb	r3, [r1, #8]
   1218c:	cmp	r3, #0
   12190:	bne	1220c <__assert_fail@plt+0xe80>
   12194:	ldrb	r3, [r1, #11]
   12198:	cmp	r3, #0
   1219c:	str	r3, [sp, #76]	; 0x4c
   121a0:	bne	1220c <__assert_fail@plt+0xe80>
   121a4:	ldr	r2, [sp, #100]	; 0x64
   121a8:	eor	r3, r5, #1
   121ac:	orrs	r3, r3, r2
   121b0:	bne	12ba4 <__assert_fail@plt+0x1818>
   121b4:	ldrb	r3, [r1]
   121b8:	cmp	r3, #0
   121bc:	bne	12d88 <__assert_fail@plt+0x19fc>
   121c0:	ldr	r5, [r4]
   121c4:	cmp	r5, #0
   121c8:	bgt	12aa8 <__assert_fail@plt+0x171c>
   121cc:	cmp	r5, #0
   121d0:	beq	12658 <__assert_fail@plt+0x12cc>
   121d4:	mov	r2, #0
   121d8:	mov	r3, #0
   121dc:	strd	r2, [sp, #64]	; 0x40
   121e0:	mov	r2, #0
   121e4:	mov	r3, #0
   121e8:	ldr	r6, [sp, #88]	; 0x58
   121ec:	mov	r1, #2
   121f0:	strd	r2, [sp]
   121f4:	str	r1, [sp, #8]
   121f8:	mov	r0, r6
   121fc:	bl	13354 <__assert_fail@plt+0x1fc8>
   12200:	add	r7, sp, #136	; 0x88
   12204:	ldrd	r4, [sp, #64]	; 0x40
   12208:	b	1260c <__assert_fail@plt+0x1280>
   1220c:	mov	r2, #0
   12210:	mov	r3, #0
   12214:	mov	r1, #2
   12218:	strd	r2, [sp]
   1221c:	str	r1, [sp, #8]
   12220:	ldr	r0, [sp, #88]	; 0x58
   12224:	bl	13354 <__assert_fail@plt+0x1fc8>
   12228:	bl	111ac <__ctype_get_mb_cur_max@plt>
   1222c:	cmp	r0, #1
   12230:	bls	1247c <__assert_fail@plt+0x10f0>
   12234:	mov	r3, #0
   12238:	mov	r0, #0
   1223c:	mov	r1, #0
   12240:	mov	r2, r0
   12244:	mov	r4, r3
   12248:	str	r3, [sp, #124]	; 0x7c
   1224c:	str	r3, [sp, #120]	; 0x78
   12250:	mov	r7, r3
   12254:	mov	fp, r3
   12258:	mov	r3, r1
   1225c:	mov	r5, r0
   12260:	mov	r8, r1
   12264:	strd	r2, [sp, #80]	; 0x50
   12268:	strd	r2, [sp, #64]	; 0x40
   1226c:	strd	r2, [sp, #48]	; 0x30
   12270:	str	r3, [sp, #72]	; 0x48
   12274:	add	r3, sp, #136	; 0x88
   12278:	strd	r0, [sp, #40]	; 0x28
   1227c:	str	r0, [sp, #60]	; 0x3c
   12280:	str	r3, [sp, #92]	; 0x5c
   12284:	ldr	r3, [sp, #92]	; 0x5c
   12288:	rsb	r2, r4, #16384	; 0x4000
   1228c:	add	r1, r3, r4
   12290:	ldr	r0, [sp, #88]	; 0x58
   12294:	bl	15b74 <__assert_fail@plt+0x47e8>
   12298:	cmp	r0, #0
   1229c:	beq	128d4 <__assert_fail@plt+0x1548>
   122a0:	cmn	r0, #1
   122a4:	beq	12a04 <__assert_fail@plt+0x1678>
   122a8:	ldrd	r2, [sp, #64]	; 0x40
   122ac:	ldr	r6, [sp, #92]	; 0x5c
   122b0:	add	r4, r4, r0
   122b4:	adds	r2, r2, r0
   122b8:	adc	r3, r3, #0
   122bc:	str	r8, [sp, #32]
   122c0:	strd	r2, [sp, #64]	; 0x40
   122c4:	mov	r2, r7
   122c8:	add	r3, sp, #128	; 0x80
   122cc:	str	r3, [sp, #76]	; 0x4c
   122d0:	cmp	r2, #0
   122d4:	bne	12730 <__assert_fail@plt+0x13a4>
   122d8:	ldrb	r7, [r6]
   122dc:	ldr	r0, [pc, #2792]	; 12dcc <__assert_fail@plt+0x1a40>
   122e0:	and	r1, r7, #31
   122e4:	lsr	r3, r7, #5
   122e8:	ldr	r3, [r0, r3, lsl #2]
   122ec:	lsr	r3, r3, r1
   122f0:	ands	sl, r3, #1
   122f4:	beq	12730 <__assert_fail@plt+0x13a4>
   122f8:	sub	r1, r7, #9
   122fc:	str	r7, [sp, #116]	; 0x74
   12300:	cmp	r1, #23
   12304:	ldrls	pc, [pc, r1, lsl #2]
   12308:	b	12434 <__assert_fail@plt+0x10a8>
   1230c:	andeq	r2, r1, r4, lsl #7
   12310:	ldrdeq	r2, [r1], -ip
   12314:	muleq	r1, ip, r3
   12318:	strdeq	r2, [r1], -r4
   1231c:	strdeq	r2, [r1], -r4
   12320:	andeq	r2, r1, r4, lsr r4
   12324:	andeq	r2, r1, r4, lsr r4
   12328:	andeq	r2, r1, r4, lsr r4
   1232c:	andeq	r2, r1, r4, lsr r4
   12330:	andeq	r2, r1, r4, lsr r4
   12334:	andeq	r2, r1, r4, lsr r4
   12338:	andeq	r2, r1, r4, lsr r4
   1233c:	andeq	r2, r1, r4, lsr r4
   12340:	andeq	r2, r1, r4, lsr r4
   12344:	andeq	r2, r1, r4, lsr r4
   12348:	andeq	r2, r1, r4, lsr r4
   1234c:	andeq	r2, r1, r4, lsr r4
   12350:	andeq	r2, r1, r4, lsr r4
   12354:	andeq	r2, r1, r4, lsr r4
   12358:	andeq	r2, r1, r4, lsr r4
   1235c:	andeq	r2, r1, r4, lsr r4
   12360:	andeq	r2, r1, r4, lsr r4
   12364:	andeq	r2, r1, r4, lsr r4
   12368:	andeq	r2, r1, r8, lsl r4
   1236c:	cmp	r5, #0
   12370:	ldreq	r3, [pc, #2640]	; 12dc8 <__assert_fail@plt+0x1a3c>
   12374:	ldrbeq	r5, [r3, #9]
   12378:	mov	r3, #0
   1237c:	str	r3, [sp, #100]	; 0x64
   12380:	b	12184 <__assert_fail@plt+0xdf8>
   12384:	ldrd	r8, [sp, #40]	; 0x28
   12388:	bic	r1, r8, #7
   1238c:	adds	r3, r1, #8
   12390:	str	r3, [sp, #40]	; 0x28
   12394:	adc	r3, r9, #0
   12398:	str	r3, [sp, #44]	; 0x2c
   1239c:	ldrd	r0, [sp, #48]	; 0x30
   123a0:	adds	r0, r0, fp
   123a4:	adc	r1, r1, #0
   123a8:	mov	fp, #0
   123ac:	strd	r0, [sp, #48]	; 0x30
   123b0:	ldr	r3, [sp, #32]
   123b4:	adds	r5, r5, #1
   123b8:	add	r6, r6, sl
   123bc:	sub	r4, r4, sl
   123c0:	adc	r3, r3, #0
   123c4:	str	r3, [sp, #32]
   123c8:	cmp	r4, #0
   123cc:	bne	122d0 <__assert_fail@plt+0xf44>
   123d0:	mov	r7, r2
   123d4:	ldr	r8, [sp, #32]
   123d8:	b	12284 <__assert_fail@plt+0xef8>
   123dc:	ldr	r3, [sp, #60]	; 0x3c
   123e0:	adds	r3, r3, #1
   123e4:	str	r3, [sp, #60]	; 0x3c
   123e8:	ldr	r3, [sp, #72]	; 0x48
   123ec:	adc	r3, r3, #0
   123f0:	str	r3, [sp, #72]	; 0x48
   123f4:	ldrd	r0, [sp, #40]	; 0x28
   123f8:	ldrd	r8, [sp, #80]	; 0x50
   123fc:	cmp	r9, r1
   12400:	cmpeq	r8, r0
   12404:	strdcc	r0, [sp, #80]	; 0x50
   12408:	mov	r0, #0
   1240c:	mov	r1, #0
   12410:	strd	r0, [sp, #40]	; 0x28
   12414:	b	1239c <__assert_fail@plt+0x1010>
   12418:	ldr	r3, [sp, #40]	; 0x28
   1241c:	adds	r3, r3, #1
   12420:	str	r3, [sp, #40]	; 0x28
   12424:	ldr	r3, [sp, #44]	; 0x2c
   12428:	adc	r3, r3, #0
   1242c:	str	r3, [sp, #44]	; 0x2c
   12430:	b	1239c <__assert_fail@plt+0x1010>
   12434:	str	r2, [sp, #104]	; 0x68
   12438:	bl	11230 <__ctype_b_loc@plt>
   1243c:	lsl	r7, r7, #1
   12440:	ldr	r2, [sp, #104]	; 0x68
   12444:	ldr	r1, [r0]
   12448:	ldrh	r1, [r1, r7]
   1244c:	tst	r1, #16384	; 0x4000
   12450:	beq	123b0 <__assert_fail@plt+0x1024>
   12454:	ldr	r3, [sp, #40]	; 0x28
   12458:	adds	r3, r3, #1
   1245c:	str	r3, [sp, #40]	; 0x28
   12460:	ldr	r3, [sp, #44]	; 0x2c
   12464:	adc	r3, r3, #0
   12468:	tst	r1, #8192	; 0x2000
   1246c:	str	r3, [sp, #44]	; 0x2c
   12470:	bne	1239c <__assert_fail@plt+0x1010>
   12474:	mov	fp, #1
   12478:	b	123b0 <__assert_fail@plt+0x1024>
   1247c:	mov	r4, #0
   12480:	mov	r5, #0
   12484:	mov	sl, r4
   12488:	mov	fp, r5
   1248c:	mov	r6, #0
   12490:	add	r3, sp, #136	; 0x88
   12494:	strd	r4, [sp, #32]
   12498:	strd	r4, [sp, #64]	; 0x40
   1249c:	str	r4, [sp, #60]	; 0x3c
   124a0:	str	r5, [sp, #72]	; 0x48
   124a4:	str	r3, [sp, #92]	; 0x5c
   124a8:	mov	r2, #16384	; 0x4000
   124ac:	ldrd	r0, [sp, #88]	; 0x58
   124b0:	bl	15b74 <__assert_fail@plt+0x47e8>
   124b4:	cmp	r0, #0
   124b8:	beq	12a3c <__assert_fail@plt+0x16b0>
   124bc:	cmn	r0, #1
   124c0:	beq	12a70 <__assert_fail@plt+0x16e4>
   124c4:	ldrd	r2, [sp, #64]	; 0x40
   124c8:	ldr	r7, [sp, #92]	; 0x5c
   124cc:	adds	r2, r2, r0
   124d0:	adc	r3, r3, #0
   124d4:	mov	r8, r7
   124d8:	strd	r2, [sp, #64]	; 0x40
   124dc:	add	r2, r7, r0
   124e0:	mov	r7, r6
   124e4:	mov	r6, r2
   124e8:	ldrb	r3, [r8], #1
   124ec:	sub	r0, r3, #9
   124f0:	cmp	r0, #23
   124f4:	ldrls	pc, [pc, r0, lsl #2]
   124f8:	b	125c4 <__assert_fail@plt+0x1238>
   124fc:			; <UNDEFINED> instruction: 0x000125b4
   12500:	andeq	r2, r1, ip, asr r5
   12504:	andeq	r2, r1, ip, lsl #11
   12508:	andeq	r2, r1, r4, ror r5
   1250c:	andeq	r2, r1, r4, ror r5
   12510:	andeq	r2, r1, r4, asr #11
   12514:	andeq	r2, r1, r4, asr #11
   12518:	andeq	r2, r1, r4, asr #11
   1251c:	andeq	r2, r1, r4, asr #11
   12520:	andeq	r2, r1, r4, asr #11
   12524:	andeq	r2, r1, r4, asr #11
   12528:	andeq	r2, r1, r4, asr #11
   1252c:	andeq	r2, r1, r4, asr #11
   12530:	andeq	r2, r1, r4, asr #11
   12534:	andeq	r2, r1, r4, asr #11
   12538:	andeq	r2, r1, r4, asr #11
   1253c:	andeq	r2, r1, r4, asr #11
   12540:	andeq	r2, r1, r4, asr #11
   12544:	andeq	r2, r1, r4, asr #11
   12548:	andeq	r2, r1, r4, asr #11
   1254c:	andeq	r2, r1, r4, asr #11
   12550:	andeq	r2, r1, r4, asr #11
   12554:	andeq	r2, r1, r4, asr #11
   12558:	andeq	r2, r1, r8, lsr #11
   1255c:	ldr	r3, [sp, #60]	; 0x3c
   12560:	adds	r3, r3, #1
   12564:	str	r3, [sp, #60]	; 0x3c
   12568:	ldr	r3, [sp, #72]	; 0x48
   1256c:	adc	r3, r3, #0
   12570:	str	r3, [sp, #72]	; 0x48
   12574:	ldrd	r2, [sp, #32]
   12578:	cmp	r3, r5
   1257c:	cmpeq	r2, r4
   12580:	strdcc	r4, [sp, #32]
   12584:	mov	r4, #0
   12588:	mov	r5, #0
   1258c:	adds	sl, sl, r7
   12590:	adc	fp, fp, #0
   12594:	mov	r7, #0
   12598:	cmp	r6, r8
   1259c:	bne	124e8 <__assert_fail@plt+0x115c>
   125a0:	mov	r6, r7
   125a4:	b	124a8 <__assert_fail@plt+0x111c>
   125a8:	adds	r4, r4, #1
   125ac:	adc	r5, r5, #0
   125b0:	b	1258c <__assert_fail@plt+0x1200>
   125b4:	bic	r3, r4, #7
   125b8:	adds	r4, r3, #8
   125bc:	adc	r5, r5, #0
   125c0:	b	1258c <__assert_fail@plt+0x1200>
   125c4:	str	r3, [sp, #40]	; 0x28
   125c8:	bl	11230 <__ctype_b_loc@plt>
   125cc:	ldr	r3, [sp, #40]	; 0x28
   125d0:	lsl	r3, r3, #1
   125d4:	ldr	r0, [r0]
   125d8:	ldrh	r3, [r0, r3]
   125dc:	tst	r3, #16384	; 0x4000
   125e0:	beq	12598 <__assert_fail@plt+0x120c>
   125e4:	adds	r4, r4, #1
   125e8:	adc	r5, r5, #0
   125ec:	tst	r3, #8192	; 0x2000
   125f0:	bne	1258c <__assert_fail@plt+0x1200>
   125f4:	mov	r7, #1
   125f8:	b	12598 <__assert_fail@plt+0x120c>
   125fc:	cmn	r0, #1
   12600:	beq	12ac4 <__assert_fail@plt+0x1738>
   12604:	adds	r4, r4, r0
   12608:	adc	r5, r5, #0
   1260c:	mov	r2, #16384	; 0x4000
   12610:	mov	r1, r7
   12614:	mov	r0, r6
   12618:	bl	15b74 <__assert_fail@plt+0x47e8>
   1261c:	cmp	r0, #0
   12620:	bne	125fc <__assert_fail@plt+0x1270>
   12624:	mov	r2, #0
   12628:	mov	r3, #0
   1262c:	strd	r4, [sp, #64]	; 0x40
   12630:	strd	r2, [sp, #32]
   12634:	mov	r8, r3
   12638:	mov	r7, r3
   1263c:	str	r3, [sp, #72]	; 0x48
   12640:	mov	r3, #1
   12644:	mov	r5, r2
   12648:	mov	r6, r2
   1264c:	str	r2, [sp, #60]	; 0x3c
   12650:	str	r3, [sp, #76]	; 0x4c
   12654:	b	12908 <__assert_fail@plt+0x157c>
   12658:	ldr	r3, [r4, #24]
   1265c:	and	r3, r3, #53248	; 0xd000
   12660:	cmp	r3, #32768	; 0x8000
   12664:	bne	121d4 <__assert_fail@plt+0xe48>
   12668:	ldrd	sl, [r4, #56]	; 0x38
   1266c:	cmp	sl, #0
   12670:	sbcs	r3, fp, #0
   12674:	blt	121d4 <__assert_fail@plt+0xe48>
   12678:	add	r1, sp, #16384	; 0x4000
   1267c:	add	r1, r1, #184	; 0xb8
   12680:	mvn	r3, #0
   12684:	ldrd	r0, [r1]
   12688:	mvn	r2, #0
   1268c:	cmp	r1, r3
   12690:	ldr	r3, [pc, #1840]	; 12dc8 <__assert_fail@plt+0x1a3c>
   12694:	cmpeq	r0, r2
   12698:	ldr	r6, [r3, #12]
   1269c:	beq	12b34 <__assert_fail@plt+0x17a8>
   126a0:	mov	r1, r6
   126a4:	mov	r0, sl
   126a8:	bl	16c0c <_obstack_memory_used@@Base+0x314>
   126ac:	cmp	r1, #0
   126b0:	bne	12b1c <__assert_fail@plt+0x1790>
   126b4:	mov	r6, #0
   126b8:	mov	r7, #0
   126bc:	mov	r8, r6
   126c0:	mov	r9, r7
   126c4:	ldr	r1, [r4, #64]	; 0x40
   126c8:	mov	r0, sl
   126cc:	sub	r3, r1, #1
   126d0:	cmn	r3, #-536870911	; 0xe0000001
   126d4:	addls	r1, r1, #1
   126d8:	ldrhi	r1, [pc, #1776]	; 12dd0 <__assert_fail@plt+0x1a44>
   126dc:	bl	16c0c <_obstack_memory_used@@Base+0x314>
   126e0:	mov	r5, #0
   126e4:	cmp	r5, r7
   126e8:	sub	r1, sl, r1
   126ec:	cmpeq	r1, r6
   126f0:	mov	r4, r1
   126f4:	bls	121d4 <__assert_fail@plt+0xe48>
   126f8:	mov	r3, #1
   126fc:	str	r3, [sp]
   12700:	mov	r2, r1
   12704:	mov	r3, r5
   12708:	ldr	r0, [sp, #88]	; 0x58
   1270c:	bl	111a0 <lseek64@plt>
   12710:	cmp	r0, #0
   12714:	sbcs	r3, r1, #0
   12718:	blt	121d4 <__assert_fail@plt+0xe48>
   1271c:	subs	r1, r4, r8
   12720:	sbc	r3, r5, r9
   12724:	str	r1, [sp, #64]	; 0x40
   12728:	str	r3, [sp, #68]	; 0x44
   1272c:	b	121e0 <__assert_fail@plt+0xe54>
   12730:	add	r7, sp, #120	; 0x78
   12734:	ldr	ip, [sp, #76]	; 0x4c
   12738:	ldm	r7, {r0, r1}
   1273c:	mov	r3, r7
   12740:	mov	r2, r4
   12744:	stm	ip, {r0, r1}
   12748:	mov	r1, r6
   1274c:	add	r0, sp, #116	; 0x74
   12750:	bl	1655c <__assert_fail@plt+0x51d0>
   12754:	cmn	r0, #2
   12758:	mov	sl, r0
   1275c:	beq	12854 <__assert_fail@plt+0x14c8>
   12760:	cmn	r0, #1
   12764:	addeq	r6, r6, #1
   12768:	subeq	r4, r4, #1
   1276c:	moveq	r2, #1
   12770:	beq	123c8 <__assert_fail@plt+0x103c>
   12774:	mov	r0, r7
   12778:	bl	1111c <mbsinit@plt>
   1277c:	cmp	sl, #0
   12780:	streq	sl, [sp, #116]	; 0x74
   12784:	moveq	r7, #1
   12788:	clz	r2, r0
   1278c:	lsr	r2, r2, #5
   12790:	bne	127e0 <__assert_fail@plt+0x1454>
   12794:	mov	r0, sl
   12798:	str	r2, [sp, #104]	; 0x68
   1279c:	bl	1117c <iswprint@plt>
   127a0:	ldr	r2, [sp, #104]	; 0x68
   127a4:	cmp	r0, #0
   127a8:	moveq	sl, r7
   127ac:	beq	123b0 <__assert_fail@plt+0x1024>
   127b0:	ldr	r3, [pc, #1552]	; 12dc8 <__assert_fail@plt+0x1a3c>
   127b4:	ldrb	r1, [r3, #11]
   127b8:	cmp	r1, #0
   127bc:	bne	12894 <__assert_fail@plt+0x1508>
   127c0:	ldr	r0, [sp, #116]	; 0x74
   127c4:	str	r2, [sp, #104]	; 0x68
   127c8:	bl	11254 <iswspace@plt>
   127cc:	mov	sl, r7
   127d0:	ldr	r2, [sp, #104]	; 0x68
   127d4:	cmp	r0, #0
   127d8:	beq	12474 <__assert_fail@plt+0x10e8>
   127dc:	b	1239c <__assert_fail@plt+0x1010>
   127e0:	ldr	r0, [sp, #116]	; 0x74
   127e4:	sub	r1, r0, #9
   127e8:	cmp	r1, #23
   127ec:	ldrls	pc, [pc, r1, lsl #2]
   127f0:	b	12dac <__assert_fail@plt+0x1a20>
   127f4:	andeq	r2, r1, r4, lsl #7
   127f8:	ldrdeq	r2, [r1], -ip
   127fc:	muleq	r1, ip, r3
   12800:	strdeq	r2, [r1], -r4
   12804:	strdeq	r2, [r1], -r4
   12808:	andeq	r2, r1, ip, lsr #27
   1280c:	andeq	r2, r1, ip, lsr #27
   12810:	andeq	r2, r1, ip, lsr #27
   12814:	andeq	r2, r1, ip, lsr #27
   12818:	andeq	r2, r1, ip, lsr #27
   1281c:	andeq	r2, r1, ip, lsr #27
   12820:	andeq	r2, r1, ip, lsr #27
   12824:	andeq	r2, r1, ip, lsr #27
   12828:	andeq	r2, r1, ip, lsr #27
   1282c:	andeq	r2, r1, ip, lsr #27
   12830:	andeq	r2, r1, ip, lsr #27
   12834:	andeq	r2, r1, ip, lsr #27
   12838:	andeq	r2, r1, ip, lsr #27
   1283c:	andeq	r2, r1, ip, lsr #27
   12840:	andeq	r2, r1, ip, lsr #27
   12844:	andeq	r2, r1, ip, lsr #27
   12848:	andeq	r2, r1, ip, lsr #27
   1284c:	andeq	r2, r1, ip, lsr #27
   12850:	andeq	r2, r1, r8, lsl r4
   12854:	ldr	r3, [sp, #76]	; 0x4c
   12858:	cmp	r4, #0
   1285c:	ldr	r8, [sp, #32]
   12860:	ldm	r3, {r0, r1}
   12864:	stm	r7, {r0, r1}
   12868:	beq	1288c <__assert_fail@plt+0x1500>
   1286c:	cmp	r4, #16384	; 0x4000
   12870:	subeq	r4, r4, #1
   12874:	addeq	r6, r6, #1
   12878:	mov	r1, r6
   1287c:	ldr	r3, [pc, #1360]	; 12dd4 <__assert_fail@plt+0x1a48>
   12880:	mov	r2, r4
   12884:	ldr	r0, [sp, #92]	; 0x5c
   12888:	bl	110e0 <__memmove_chk@plt>
   1288c:	mov	r7, #1
   12890:	b	12284 <__assert_fail@plt+0xef8>
   12894:	mov	r0, sl
   12898:	bl	110d4 <wcwidth@plt>
   1289c:	ldr	r2, [sp, #104]	; 0x68
   128a0:	cmp	r0, #0
   128a4:	ble	127c0 <__assert_fail@plt+0x1434>
   128a8:	ldrd	r8, [sp, #40]	; 0x28
   128ac:	adds	r8, r8, r0
   128b0:	adc	r9, r9, r0, asr #31
   128b4:	strd	r8, [sp, #40]	; 0x28
   128b8:	b	127c0 <__assert_fail@plt+0x1434>
   128bc:	mov	r2, #5
   128c0:	ldr	r1, [pc, #1296]	; 12dd8 <__assert_fail@plt+0x1a4c>
   128c4:	ldr	r0, [sp, #96]	; 0x60
   128c8:	bl	11134 <dcgettext@plt>
   128cc:	str	r0, [sp, #108]	; 0x6c
   128d0:	b	12168 <__assert_fail@plt+0xddc>
   128d4:	mov	r3, #1
   128d8:	str	r3, [sp, #76]	; 0x4c
   128dc:	ldrd	r2, [sp, #80]	; 0x50
   128e0:	ldrd	r0, [sp, #40]	; 0x28
   128e4:	strd	r2, [sp, #32]
   128e8:	cmp	r3, r1
   128ec:	cmpeq	r2, r0
   128f0:	ldrd	r2, [sp, #48]	; 0x30
   128f4:	strdcc	r0, [sp, #32]
   128f8:	adds	r2, r2, fp
   128fc:	adc	r3, r3, #0
   12900:	mov	r6, r2
   12904:	mov	r7, r3
   12908:	ldr	r3, [pc, #1208]	; 12dc8 <__assert_fail@plt+0x1a3c>
   1290c:	ldr	r2, [sp, #100]	; 0x64
   12910:	ldrd	sl, [sp, #64]	; 0x40
   12914:	ldrb	r3, [r3, #9]
   12918:	ldr	r4, [sp, #60]	; 0x3c
   1291c:	ldr	r9, [sp, #72]	; 0x48
   12920:	cmp	r3, r2
   12924:	mov	r0, r4
   12928:	ldrdhi	r2, [sp, #64]	; 0x40
   1292c:	mov	r1, r9
   12930:	strd	sl, [sp, #8]
   12934:	movhi	r8, r3
   12938:	ldr	r3, [sp, #96]	; 0x60
   1293c:	movhi	r5, r2
   12940:	str	r3, [sp, #24]
   12944:	ldrd	r2, [sp, #32]
   12948:	stm	sp, {r5, r8}
   1294c:	strd	r2, [sp, #16]
   12950:	mov	r2, r6
   12954:	mov	r3, r7
   12958:	bl	11f48 <__assert_fail@plt+0xbbc>
   1295c:	ldr	r0, [pc, #1124]	; 12dc8 <__assert_fail@plt+0x1a3c>
   12960:	ldr	r1, [r0, #16]
   12964:	ldr	lr, [r0, #20]
   12968:	adds	r1, r1, r4
   1296c:	ldr	r2, [r0, #24]
   12970:	adc	lr, lr, r9
   12974:	mov	r9, r0
   12978:	ldr	r3, [r0, #32]
   1297c:	ldr	ip, [r0, #28]
   12980:	adds	r2, r2, r6
   12984:	ldr	r0, [r0, #36]	; 0x24
   12988:	ldr	r4, [r9, #40]	; 0x28
   1298c:	adc	ip, ip, r7
   12990:	adds	r5, r3, r5
   12994:	ldr	r3, [r9, #44]	; 0x2c
   12998:	adc	r8, r0, r8
   1299c:	adds	r4, r4, sl
   129a0:	adc	r3, r3, fp
   129a4:	str	r3, [r9, #44]	; 0x2c
   129a8:	add	r3, sp, #16384	; 0x4000
   129ac:	add	r3, r3, #140	; 0x8c
   129b0:	ldrd	r6, [r9, #48]	; 0x30
   129b4:	ldrd	sl, [sp, #32]
   129b8:	str	r2, [r9, #24]
   129bc:	ldr	r2, [r3]
   129c0:	ldr	r3, [pc, #1020]	; 12dc4 <__assert_fail@plt+0x1a38>
   129c4:	cmp	r7, fp
   129c8:	cmpeq	r6, sl
   129cc:	ldr	r3, [r3]
   129d0:	strdcc	sl, [r9, #48]	; 0x30
   129d4:	cmp	r2, r3
   129d8:	str	r1, [r9, #16]
   129dc:	str	lr, [r9, #20]
   129e0:	str	ip, [r9, #28]
   129e4:	str	r5, [r9, #32]
   129e8:	str	r8, [r9, #36]	; 0x24
   129ec:	str	r4, [r9, #40]	; 0x28
   129f0:	ldr	r0, [sp, #76]	; 0x4c
   129f4:	bne	12da8 <__assert_fail@plt+0x1a1c>
   129f8:	add	sp, sp, #16384	; 0x4000
   129fc:	add	sp, sp, #148	; 0x94
   12a00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a04:	bl	11284 <__errno_location@plt>
   12a08:	mov	r3, #0
   12a0c:	ldr	r2, [sp, #108]	; 0x6c
   12a10:	mov	r1, #3
   12a14:	str	r3, [sp, #76]	; 0x4c
   12a18:	ldr	r4, [r0]
   12a1c:	mov	r0, r3
   12a20:	bl	1567c <__assert_fail@plt+0x42f0>
   12a24:	mov	r1, r4
   12a28:	ldr	r2, [pc, #940]	; 12ddc <__assert_fail@plt+0x1a50>
   12a2c:	mov	r3, r0
   12a30:	mov	r0, #0
   12a34:	bl	111d0 <error@plt>
   12a38:	b	128dc <__assert_fail@plt+0x1550>
   12a3c:	mov	r3, #1
   12a40:	str	r3, [sp, #76]	; 0x4c
   12a44:	ldrd	r2, [sp, #32]
   12a48:	cmp	r3, r5
   12a4c:	cmpeq	r2, r4
   12a50:	strdcc	r4, [sp, #32]
   12a54:	adds	r2, sl, r6
   12a58:	adc	r3, fp, #0
   12a5c:	mov	r5, #0
   12a60:	mov	r6, r2
   12a64:	mov	r7, r3
   12a68:	mov	r8, r5
   12a6c:	b	12908 <__assert_fail@plt+0x157c>
   12a70:	bl	11284 <__errno_location@plt>
   12a74:	mov	r3, #0
   12a78:	ldr	r2, [sp, #108]	; 0x6c
   12a7c:	mov	r1, #3
   12a80:	str	r3, [sp, #76]	; 0x4c
   12a84:	ldr	r7, [r0]
   12a88:	mov	r0, r3
   12a8c:	bl	1567c <__assert_fail@plt+0x42f0>
   12a90:	mov	r1, r7
   12a94:	ldr	r2, [pc, #832]	; 12ddc <__assert_fail@plt+0x1a50>
   12a98:	mov	r3, r0
   12a9c:	mov	r0, #0
   12aa0:	bl	111d0 <error@plt>
   12aa4:	b	12a44 <__assert_fail@plt+0x16b8>
   12aa8:	add	r2, r4, #8
   12aac:	ldr	r1, [sp, #88]	; 0x58
   12ab0:	mov	r0, #3
   12ab4:	bl	11188 <__fxstat64@plt>
   12ab8:	mov	r5, r0
   12abc:	str	r0, [r4]
   12ac0:	b	121cc <__assert_fail@plt+0xe40>
   12ac4:	mov	r6, #0
   12ac8:	mov	r7, #0
   12acc:	strd	r4, [sp, #64]	; 0x40
   12ad0:	bl	11284 <__errno_location@plt>
   12ad4:	ldr	r2, [sp, #108]	; 0x6c
   12ad8:	mov	r1, #3
   12adc:	mov	r5, r6
   12ae0:	mov	r8, r7
   12ae4:	strd	r6, [sp, #32]
   12ae8:	str	r6, [sp, #60]	; 0x3c
   12aec:	str	r7, [sp, #72]	; 0x48
   12af0:	ldr	r4, [r0]
   12af4:	mov	r0, #0
   12af8:	bl	1567c <__assert_fail@plt+0x42f0>
   12afc:	mov	r1, r4
   12b00:	ldr	r2, [pc, #724]	; 12ddc <__assert_fail@plt+0x1a50>
   12b04:	mov	r3, r0
   12b08:	mov	r0, #0
   12b0c:	bl	111d0 <error@plt>
   12b10:	b	12908 <__assert_fail@plt+0x157c>
   12b14:	subs	sl, sl, r8
   12b18:	sbc	r5, r5, r9
   12b1c:	mov	r2, #0
   12b20:	mov	r3, #0
   12b24:	str	sl, [sp, #64]	; 0x40
   12b28:	strd	r2, [sp, #32]
   12b2c:	str	r5, [sp, #68]	; 0x44
   12b30:	b	12634 <__assert_fail@plt+0x12a8>
   12b34:	mov	r7, #1
   12b38:	mov	r2, #0
   12b3c:	mov	r3, #0
   12b40:	str	r7, [sp]
   12b44:	ldr	r0, [sp, #88]	; 0x58
   12b48:	bl	111a0 <lseek64@plt>
   12b4c:	mov	r8, r0
   12b50:	mov	r9, r1
   12b54:	mov	r0, sl
   12b58:	mov	r1, r6
   12b5c:	bl	16c0c <_obstack_memory_used@@Base+0x314>
   12b60:	cmp	r1, #0
   12b64:	beq	12db8 <__assert_fail@plt+0x1a2c>
   12b68:	cmp	sl, r8
   12b6c:	sbcs	r1, r5, r9
   12b70:	bge	12b14 <__assert_fail@plt+0x1788>
   12b74:	mov	r2, #0
   12b78:	mov	r3, #0
   12b7c:	str	r7, [sp, #76]	; 0x4c
   12b80:	strd	r2, [sp, #32]
   12b84:	strd	r2, [sp, #64]	; 0x40
   12b88:	mov	r5, r2
   12b8c:	mov	r8, r3
   12b90:	mov	r6, r2
   12b94:	mov	r7, r3
   12b98:	str	r2, [sp, #60]	; 0x3c
   12b9c:	str	r3, [sp, #72]	; 0x48
   12ba0:	b	12908 <__assert_fail@plt+0x157c>
   12ba4:	mov	r3, #0
   12ba8:	mov	r2, #0
   12bac:	mov	r1, #2
   12bb0:	strd	r2, [sp]
   12bb4:	str	r1, [sp, #8]
   12bb8:	ldr	r0, [sp, #88]	; 0x58
   12bbc:	bl	13354 <__assert_fail@plt+0x1fc8>
   12bc0:	ldr	r3, [sp, #100]	; 0x64
   12bc4:	eor	r3, r3, #1
   12bc8:	tst	r5, r3
   12bcc:	beq	12d1c <__assert_fail@plt+0x1990>
   12bd0:	ldr	r3, [pc, #496]	; 12dc8 <__assert_fail@plt+0x1a3c>
   12bd4:	ldrb	r3, [r3]
   12bd8:	cmp	r3, #0
   12bdc:	beq	121c0 <__assert_fail@plt+0xe34>
   12be0:	ldr	r8, [pc, #504]	; 12de0 <__assert_fail@plt+0x1a54>
   12be4:	mov	r2, #0
   12be8:	mov	r3, #0
   12bec:	mov	r5, #0
   12bf0:	add	sl, sp, #136	; 0x88
   12bf4:	strd	r2, [sp, #64]	; 0x40
   12bf8:	str	r2, [sp, #60]	; 0x3c
   12bfc:	str	r3, [sp, #72]	; 0x48
   12c00:	mov	r2, #16384	; 0x4000
   12c04:	mov	r1, sl
   12c08:	ldr	r0, [sp, #88]	; 0x58
   12c0c:	bl	15b74 <__assert_fail@plt+0x47e8>
   12c10:	cmp	r0, #0
   12c14:	beq	12d2c <__assert_fail@plt+0x19a0>
   12c18:	cmn	r0, #1
   12c1c:	beq	12d54 <__assert_fail@plt+0x19c8>
   12c20:	umull	r3, r6, r8, r0
   12c24:	ldrd	r2, [sp, #64]	; 0x40
   12c28:	mov	r7, #0
   12c2c:	lsr	r6, r6, #3
   12c30:	adds	r2, r2, r0
   12c34:	adc	r3, r3, #0
   12c38:	cmp	r5, #0
   12c3c:	strd	r2, [sp, #64]	; 0x40
   12c40:	add	r5, sl, r0
   12c44:	bne	12cb4 <__assert_fail@plt+0x1928>
   12c48:	cmp	r5, sl
   12c4c:	beq	12d80 <__assert_fail@plt+0x19f4>
   12c50:	ldr	r0, [sp, #60]	; 0x3c
   12c54:	ldr	r1, [sp, #72]	; 0x48
   12c58:	mov	r2, sl
   12c5c:	ldrb	r3, [r2], #1
   12c60:	sub	r3, r3, #10
   12c64:	clz	r3, r3
   12c68:	lsr	r3, r3, #5
   12c6c:	adds	r0, r0, r3
   12c70:	adc	r1, r1, #0
   12c74:	cmp	r5, r2
   12c78:	bne	12c5c <__assert_fail@plt+0x18d0>
   12c7c:	ldr	r3, [sp, #60]	; 0x3c
   12c80:	str	r0, [sp, #60]	; 0x3c
   12c84:	subs	r3, r0, r3
   12c88:	str	r3, [sp, #40]	; 0x28
   12c8c:	ldr	r3, [sp, #72]	; 0x48
   12c90:	str	r1, [sp, #72]	; 0x48
   12c94:	sbc	r3, r1, r3
   12c98:	str	r3, [sp, #44]	; 0x2c
   12c9c:	ldrd	r2, [sp, #40]	; 0x28
   12ca0:	cmp	r7, r3
   12ca4:	cmpeq	r6, r2
   12ca8:	movcs	r5, #1
   12cac:	movcc	r5, #0
   12cb0:	b	12c00 <__assert_fail@plt+0x1874>
   12cb4:	ldr	r4, [sp, #60]	; 0x3c
   12cb8:	ldr	fp, [sp, #72]	; 0x48
   12cbc:	mov	r0, sl
   12cc0:	b	12cd0 <__assert_fail@plt+0x1944>
   12cc4:	adds	r4, r4, #1
   12cc8:	adc	fp, fp, #0
   12ccc:	add	r0, r0, #1
   12cd0:	sub	r2, r5, r0
   12cd4:	mov	r1, #10
   12cd8:	bl	112e4 <memchr@plt>
   12cdc:	cmp	r0, #0
   12ce0:	bne	12cc4 <__assert_fail@plt+0x1938>
   12ce4:	ldr	r3, [sp, #60]	; 0x3c
   12ce8:	str	r4, [sp, #60]	; 0x3c
   12cec:	subs	r3, r4, r3
   12cf0:	str	r3, [sp, #32]
   12cf4:	ldr	r3, [sp, #72]	; 0x48
   12cf8:	str	fp, [sp, #72]	; 0x48
   12cfc:	sbc	r3, fp, r3
   12d00:	str	r3, [sp, #36]	; 0x24
   12d04:	ldrd	r2, [sp, #32]
   12d08:	cmp	r7, r3
   12d0c:	cmpeq	r6, r2
   12d10:	movcs	r5, #1
   12d14:	movcc	r5, #0
   12d18:	b	12c00 <__assert_fail@plt+0x1874>
   12d1c:	ldr	r3, [sp, #100]	; 0x64
   12d20:	cmp	r3, #0
   12d24:	beq	12be0 <__assert_fail@plt+0x1854>
   12d28:	b	12228 <__assert_fail@plt+0xe9c>
   12d2c:	mov	r3, #0
   12d30:	mov	r2, #0
   12d34:	mov	r8, r3
   12d38:	strd	r2, [sp, #32]
   12d3c:	mov	r7, r3
   12d40:	mov	r3, #1
   12d44:	mov	r5, r2
   12d48:	mov	r6, r2
   12d4c:	str	r3, [sp, #76]	; 0x4c
   12d50:	b	12908 <__assert_fail@plt+0x157c>
   12d54:	mov	r4, #0
   12d58:	mov	r5, #0
   12d5c:	mov	r7, r5
   12d60:	mov	r6, r4
   12d64:	bl	11284 <__errno_location@plt>
   12d68:	mov	r5, r4
   12d6c:	ldr	r2, [sp, #108]	; 0x6c
   12d70:	mov	r1, #3
   12d74:	strd	r6, [sp, #32]
   12d78:	mov	r8, r7
   12d7c:	b	12af0 <__assert_fail@plt+0x1764>
   12d80:	mov	r5, #1
   12d84:	b	12c00 <__assert_fail@plt+0x1874>
   12d88:	mov	r2, #0
   12d8c:	mov	r3, #0
   12d90:	mov	r1, #2
   12d94:	strd	r2, [sp]
   12d98:	str	r1, [sp, #8]
   12d9c:	ldr	r0, [sp, #88]	; 0x58
   12da0:	bl	13354 <__assert_fail@plt+0x1fc8>
   12da4:	b	12bd0 <__assert_fail@plt+0x1844>
   12da8:	bl	11140 <__stack_chk_fail@plt>
   12dac:	mov	r7, sl
   12db0:	mov	sl, r0
   12db4:	b	12794 <__assert_fail@plt+0x1408>
   12db8:	mov	r6, r8
   12dbc:	mov	r7, r9
   12dc0:	b	126c4 <__assert_fail@plt+0x1338>
   12dc4:	andeq	r7, r2, r8, lsl #30
   12dc8:	muleq	r2, r8, r1
   12dcc:	andeq	r7, r1, r4, lsr sl
   12dd0:	andeq	r0, r0, r1, lsl #4
   12dd4:	andeq	r4, r0, r1
   12dd8:	andeq	r7, r1, r4, asr #5
   12ddc:	andeq	r7, r1, r0, lsr sl
   12de0:	stmhi	r8, {r0, r3, r7, fp, pc}
   12de4:	ldr	r3, [pc, #724]	; 130c0 <__assert_fail@plt+0x1d34>
   12de8:	push	{r7, lr}
   12dec:	sub	sp, sp, #64	; 0x40
   12df0:	ldr	r3, [r3]
   12df4:	subs	r4, r0, #0
   12df8:	str	r3, [sp, #60]	; 0x3c
   12dfc:	beq	12e38 <__assert_fail@plt+0x1aac>
   12e00:	ldr	r3, [pc, #700]	; 130c4 <__assert_fail@plt+0x1d38>
   12e04:	mov	r2, #5
   12e08:	ldr	r1, [pc, #696]	; 130c8 <__assert_fail@plt+0x1d3c>
   12e0c:	mov	r0, #0
   12e10:	ldr	r5, [r3]
   12e14:	bl	11134 <dcgettext@plt>
   12e18:	ldr	r3, [pc, #684]	; 130cc <__assert_fail@plt+0x1d40>
   12e1c:	mov	r1, #1
   12e20:	ldr	r3, [r3]
   12e24:	mov	r2, r0
   12e28:	mov	r0, r5
   12e2c:	bl	112d8 <__fprintf_chk@plt>
   12e30:	mov	r0, r4
   12e34:	bl	1123c <exit@plt>
   12e38:	mov	r2, #5
   12e3c:	ldr	r1, [pc, #652]	; 130d0 <__assert_fail@plt+0x1d44>
   12e40:	bl	11134 <dcgettext@plt>
   12e44:	ldr	r3, [pc, #640]	; 130cc <__assert_fail@plt+0x1d40>
   12e48:	ldr	r5, [pc, #644]	; 130d4 <__assert_fail@plt+0x1d48>
   12e4c:	ldr	r3, [r3]
   12e50:	mov	r2, r3
   12e54:	mov	r1, r0
   12e58:	mov	r0, #1
   12e5c:	bl	112c0 <__printf_chk@plt>
   12e60:	mov	r2, #5
   12e64:	ldr	r1, [pc, #620]	; 130d8 <__assert_fail@plt+0x1d4c>
   12e68:	mov	r0, r4
   12e6c:	bl	11134 <dcgettext@plt>
   12e70:	ldr	r1, [r5]
   12e74:	bl	1108c <fputs_unlocked@plt>
   12e78:	mov	r2, #5
   12e7c:	ldr	r1, [pc, #600]	; 130dc <__assert_fail@plt+0x1d50>
   12e80:	mov	r0, r4
   12e84:	bl	11134 <dcgettext@plt>
   12e88:	ldr	r1, [r5]
   12e8c:	bl	1108c <fputs_unlocked@plt>
   12e90:	mov	r2, #5
   12e94:	ldr	r1, [pc, #580]	; 130e0 <__assert_fail@plt+0x1d54>
   12e98:	mov	r0, r4
   12e9c:	bl	11134 <dcgettext@plt>
   12ea0:	ldr	r1, [r5]
   12ea4:	bl	1108c <fputs_unlocked@plt>
   12ea8:	mov	r2, #5
   12eac:	ldr	r1, [pc, #560]	; 130e4 <__assert_fail@plt+0x1d58>
   12eb0:	mov	r0, r4
   12eb4:	bl	11134 <dcgettext@plt>
   12eb8:	ldr	r1, [r5]
   12ebc:	bl	1108c <fputs_unlocked@plt>
   12ec0:	mov	r2, #5
   12ec4:	ldr	r1, [pc, #540]	; 130e8 <__assert_fail@plt+0x1d5c>
   12ec8:	mov	r0, r4
   12ecc:	bl	11134 <dcgettext@plt>
   12ed0:	ldr	r1, [r5]
   12ed4:	bl	1108c <fputs_unlocked@plt>
   12ed8:	mov	r2, #5
   12edc:	ldr	r1, [pc, #520]	; 130ec <__assert_fail@plt+0x1d60>
   12ee0:	mov	r0, r4
   12ee4:	bl	11134 <dcgettext@plt>
   12ee8:	ldr	r1, [r5]
   12eec:	bl	1108c <fputs_unlocked@plt>
   12ef0:	ldr	lr, [pc, #504]	; 130f0 <__assert_fail@plt+0x1d64>
   12ef4:	add	ip, sp, #4
   12ef8:	ldm	lr!, {r0, r1, r2, r3}
   12efc:	stmia	ip!, {r0, r1, r2, r3}
   12f00:	ldm	lr!, {r0, r1, r2, r3}
   12f04:	ldr	r6, [sp, #4]
   12f08:	stmia	ip!, {r0, r1, r2, r3}
   12f0c:	cmp	r6, #0
   12f10:	ldm	lr!, {r0, r1, r2, r3}
   12f14:	addeq	r5, sp, #4
   12f18:	stmia	ip!, {r0, r1, r2, r3}
   12f1c:	ldm	lr, {r0, r1}
   12f20:	stm	ip, {r0, r1}
   12f24:	beq	12f54 <__assert_fail@plt+0x1bc8>
   12f28:	ldr	r7, [pc, #452]	; 130f4 <__assert_fail@plt+0x1d68>
   12f2c:	add	r5, sp, #4
   12f30:	b	12f40 <__assert_fail@plt+0x1bb4>
   12f34:	ldr	r6, [r5, #8]!
   12f38:	cmp	r6, #0
   12f3c:	beq	12f54 <__assert_fail@plt+0x1bc8>
   12f40:	mov	r1, r6
   12f44:	mov	r0, r7
   12f48:	bl	110a4 <strcmp@plt>
   12f4c:	cmp	r0, #0
   12f50:	bne	12f34 <__assert_fail@plt+0x1ba8>
   12f54:	ldr	r5, [r5, #4]
   12f58:	mov	r2, #5
   12f5c:	cmp	r5, #0
   12f60:	ldr	r1, [pc, #400]	; 130f8 <__assert_fail@plt+0x1d6c>
   12f64:	beq	1300c <__assert_fail@plt+0x1c80>
   12f68:	mov	r0, #0
   12f6c:	bl	11134 <dcgettext@plt>
   12f70:	ldr	r3, [pc, #388]	; 130fc <__assert_fail@plt+0x1d70>
   12f74:	ldr	r2, [pc, #388]	; 13100 <__assert_fail@plt+0x1d74>
   12f78:	mov	r1, r0
   12f7c:	mov	r0, #1
   12f80:	bl	112c0 <__printf_chk@plt>
   12f84:	mov	r1, #0
   12f88:	mov	r0, #5
   12f8c:	bl	11314 <setlocale@plt>
   12f90:	cmp	r0, #0
   12f94:	ldreq	r6, [pc, #344]	; 130f4 <__assert_fail@plt+0x1d68>
   12f98:	beq	12fb4 <__assert_fail@plt+0x1c28>
   12f9c:	mov	r2, #3
   12fa0:	ldr	r1, [pc, #348]	; 13104 <__assert_fail@plt+0x1d78>
   12fa4:	bl	11368 <strncmp@plt>
   12fa8:	ldr	r6, [pc, #324]	; 130f4 <__assert_fail@plt+0x1d68>
   12fac:	cmp	r0, #0
   12fb0:	bne	1309c <__assert_fail@plt+0x1d10>
   12fb4:	mov	r2, #5
   12fb8:	ldr	r1, [pc, #328]	; 13108 <__assert_fail@plt+0x1d7c>
   12fbc:	mov	r0, #0
   12fc0:	bl	11134 <dcgettext@plt>
   12fc4:	ldr	r3, [pc, #296]	; 130f4 <__assert_fail@plt+0x1d68>
   12fc8:	ldr	r2, [pc, #300]	; 130fc <__assert_fail@plt+0x1d70>
   12fcc:	mov	r1, r0
   12fd0:	mov	r0, #1
   12fd4:	bl	112c0 <__printf_chk@plt>
   12fd8:	mov	r2, #5
   12fdc:	ldr	r1, [pc, #296]	; 1310c <__assert_fail@plt+0x1d80>
   12fe0:	mov	r0, #0
   12fe4:	bl	11134 <dcgettext@plt>
   12fe8:	ldr	r2, [pc, #288]	; 13110 <__assert_fail@plt+0x1d84>
   12fec:	cmp	r5, r6
   12ff0:	ldr	r3, [pc, #284]	; 13114 <__assert_fail@plt+0x1d88>
   12ff4:	movne	r3, r2
   12ff8:	mov	r1, r0
   12ffc:	mov	r2, r5
   13000:	mov	r0, #1
   13004:	bl	112c0 <__printf_chk@plt>
   13008:	b	12e30 <__assert_fail@plt+0x1aa4>
   1300c:	mov	r0, r5
   13010:	bl	11134 <dcgettext@plt>
   13014:	ldr	r3, [pc, #224]	; 130fc <__assert_fail@plt+0x1d70>
   13018:	ldr	r2, [pc, #224]	; 13100 <__assert_fail@plt+0x1d74>
   1301c:	mov	r1, r0
   13020:	mov	r0, #1
   13024:	bl	112c0 <__printf_chk@plt>
   13028:	mov	r1, r5
   1302c:	mov	r0, #5
   13030:	bl	11314 <setlocale@plt>
   13034:	cmp	r0, #0
   13038:	beq	13050 <__assert_fail@plt+0x1cc4>
   1303c:	mov	r2, #3
   13040:	ldr	r1, [pc, #188]	; 13104 <__assert_fail@plt+0x1d78>
   13044:	bl	11368 <strncmp@plt>
   13048:	cmp	r0, #0
   1304c:	bne	13094 <__assert_fail@plt+0x1d08>
   13050:	mov	r2, #5
   13054:	ldr	r1, [pc, #172]	; 13108 <__assert_fail@plt+0x1d7c>
   13058:	mov	r0, #0
   1305c:	bl	11134 <dcgettext@plt>
   13060:	ldr	r3, [pc, #140]	; 130f4 <__assert_fail@plt+0x1d68>
   13064:	ldr	r2, [pc, #144]	; 130fc <__assert_fail@plt+0x1d70>
   13068:	mov	r5, r3
   1306c:	mov	r1, r0
   13070:	mov	r0, #1
   13074:	bl	112c0 <__printf_chk@plt>
   13078:	ldr	r1, [pc, #140]	; 1310c <__assert_fail@plt+0x1d80>
   1307c:	mov	r2, #5
   13080:	mov	r0, #0
   13084:	bl	11134 <dcgettext@plt>
   13088:	ldr	r3, [pc, #132]	; 13114 <__assert_fail@plt+0x1d88>
   1308c:	mov	r1, r0
   13090:	b	12ffc <__assert_fail@plt+0x1c70>
   13094:	ldr	r6, [pc, #88]	; 130f4 <__assert_fail@plt+0x1d68>
   13098:	mov	r5, r6
   1309c:	mov	r2, #5
   130a0:	ldr	r1, [pc, #112]	; 13118 <__assert_fail@plt+0x1d8c>
   130a4:	mov	r0, #0
   130a8:	bl	11134 <dcgettext@plt>
   130ac:	ldr	r2, [pc, #64]	; 130f4 <__assert_fail@plt+0x1d68>
   130b0:	mov	r1, r0
   130b4:	mov	r0, #1
   130b8:	bl	112c0 <__printf_chk@plt>
   130bc:	b	12fb4 <__assert_fail@plt+0x1c28>
   130c0:	andeq	r7, r2, r8, lsl #30
   130c4:	andeq	r8, r2, r0, lsl #3
   130c8:	ldrdeq	r7, [r1], -r8
   130cc:	andeq	r8, r2, r0, ror #3
   130d0:	andeq	r7, r1, r0, lsl #6
   130d4:	andeq	r8, r2, ip, lsl #3
   130d8:	andeq	r7, r1, r8, asr #6
   130dc:	andeq	r7, r1, r0, lsl #8
   130e0:	andeq	r7, r1, r8, lsr r4
   130e4:	andeq	r7, r1, r8, ror #10
   130e8:	muleq	r1, r8, r6
   130ec:	andeq	r7, r1, r8, asr #13
   130f0:	strdeq	r7, [r1], -r0
   130f4:	ldrdeq	r7, [r1], -r4
   130f8:	andeq	r7, r1, r0, lsl #14
   130fc:	andeq	r7, r1, r8, lsl r7
   13100:	andeq	r7, r1, r0, asr #14
   13104:	andeq	r7, r1, r0, asr r7
   13108:	muleq	r1, ip, r7
   1310c:			; <UNDEFINED> instruction: 0x000177bc
   13110:	andeq	r7, r1, r4, asr lr
   13114:	andeq	r7, r1, r4, ror r9
   13118:	andeq	r7, r1, r4, asr r7
   1311c:	push	{r4, lr}
   13120:	mov	r4, r0
   13124:	mov	r0, #24
   13128:	bl	111f4 <malloc@plt>
   1312c:	cmp	r0, #0
   13130:	movne	r3, #0
   13134:	strne	r4, [r0, #16]
   13138:	strne	r4, [r0, #20]
   1313c:	strne	r3, [r0]
   13140:	pop	{r4, pc}
   13144:	push	{r4, lr}
   13148:	mov	r4, r0
   1314c:	mov	r0, #24
   13150:	bl	111f4 <malloc@plt>
   13154:	cmp	r0, #0
   13158:	popeq	{r4, pc}
   1315c:	mov	r3, #0
   13160:	str	r4, [r0]
   13164:	str	r3, [r0, #8]
   13168:	str	r3, [r0, #12]
   1316c:	str	r3, [r0, #4]
   13170:	str	r3, [r0, #16]
   13174:	pop	{r4, pc}
   13178:	ldr	r3, [r0]
   1317c:	cmp	r3, #0
   13180:	beq	131c8 <__assert_fail@plt+0x1e3c>
   13184:	push	{r4, r5, r6, lr}
   13188:	mov	r2, #0
   1318c:	mov	r5, r1
   13190:	mov	r4, r0
   13194:	add	r1, r0, #12
   13198:	add	r0, r0, #8
   1319c:	bl	11350 <getdelim@plt>
   131a0:	cmp	r0, #0
   131a4:	blt	131f4 <__assert_fail@plt+0x1e68>
   131a8:	ldr	r2, [r4, #4]
   131ac:	mov	r3, #1
   131b0:	add	r2, r2, r3
   131b4:	str	r3, [r5]
   131b8:	ldr	r3, [r4, #8]
   131bc:	str	r2, [r4, #4]
   131c0:	mov	r0, r3
   131c4:	pop	{r4, r5, r6, pc}
   131c8:	ldr	r2, [r0, #20]
   131cc:	ldr	r3, [r2]
   131d0:	cmp	r3, #0
   131d4:	moveq	r2, #2
   131d8:	addne	r2, r2, #4
   131dc:	movne	ip, #1
   131e0:	strne	ip, [r1]
   131e4:	streq	r2, [r1]
   131e8:	strne	r2, [r0, #20]
   131ec:	mov	r0, r3
   131f0:	bx	lr
   131f4:	ldr	r0, [r4]
   131f8:	bl	11248 <feof@plt>
   131fc:	mov	r3, #0
   13200:	cmp	r0, r3
   13204:	movne	r2, #2
   13208:	moveq	r2, #4
   1320c:	str	r2, [r5]
   13210:	b	131c0 <__assert_fail@plt+0x1e34>
   13214:	ldr	r3, [r0]
   13218:	cmp	r3, #0
   1321c:	ldreq	r3, [r0, #20]
   13220:	ldrne	r0, [r0, #4]
   13224:	ldreq	r0, [r0, #16]
   13228:	subeq	r0, r3, r0
   1322c:	asreq	r0, r0, #2
   13230:	bx	lr
   13234:	ldr	r3, [r0]
   13238:	push	{r4, lr}
   1323c:	cmp	r3, #0
   13240:	mov	r4, r0
   13244:	beq	13250 <__assert_fail@plt+0x1ec4>
   13248:	ldr	r0, [r0, #8]
   1324c:	bl	110ec <free@plt>
   13250:	mov	r0, r4
   13254:	pop	{r4, lr}
   13258:	b	110ec <free@plt>
   1325c:	ldr	r3, [pc, #4]	; 13268 <__assert_fail@plt+0x1edc>
   13260:	str	r0, [r3]
   13264:	bx	lr
   13268:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1326c:	ldr	r3, [pc, #4]	; 13278 <__assert_fail@plt+0x1eec>
   13270:	strb	r0, [r3, #4]
   13274:	bx	lr
   13278:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   1327c:	ldr	r3, [pc, #180]	; 13338 <__assert_fail@plt+0x1fac>
   13280:	push	{r4, r5, r6, lr}
   13284:	sub	sp, sp, #8
   13288:	ldr	r0, [r3]
   1328c:	bl	1692c <_obstack_memory_used@@Base+0x34>
   13290:	cmp	r0, #0
   13294:	beq	132bc <__assert_fail@plt+0x1f30>
   13298:	bl	11284 <__errno_location@plt>
   1329c:	ldr	r5, [pc, #152]	; 1333c <__assert_fail@plt+0x1fb0>
   132a0:	ldrb	r3, [r5, #4]
   132a4:	cmp	r3, #0
   132a8:	mov	r4, r0
   132ac:	beq	132d8 <__assert_fail@plt+0x1f4c>
   132b0:	ldr	r3, [r0]
   132b4:	cmp	r3, #32
   132b8:	bne	132d8 <__assert_fail@plt+0x1f4c>
   132bc:	ldr	r3, [pc, #124]	; 13340 <__assert_fail@plt+0x1fb4>
   132c0:	ldr	r0, [r3]
   132c4:	bl	1692c <_obstack_memory_used@@Base+0x34>
   132c8:	cmp	r0, #0
   132cc:	bne	13318 <__assert_fail@plt+0x1f8c>
   132d0:	add	sp, sp, #8
   132d4:	pop	{r4, r5, r6, pc}
   132d8:	mov	r2, #5
   132dc:	ldr	r1, [pc, #96]	; 13344 <__assert_fail@plt+0x1fb8>
   132e0:	mov	r0, #0
   132e4:	bl	11134 <dcgettext@plt>
   132e8:	mov	r6, r0
   132ec:	ldr	r0, [r5]
   132f0:	cmp	r0, #0
   132f4:	beq	13324 <__assert_fail@plt+0x1f98>
   132f8:	ldr	r4, [r4]
   132fc:	bl	15668 <__assert_fail@plt+0x42dc>
   13300:	mov	r1, r4
   13304:	str	r6, [sp]
   13308:	ldr	r2, [pc, #56]	; 13348 <__assert_fail@plt+0x1fbc>
   1330c:	mov	r3, r0
   13310:	mov	r0, #0
   13314:	bl	111d0 <error@plt>
   13318:	ldr	r3, [pc, #44]	; 1334c <__assert_fail@plt+0x1fc0>
   1331c:	ldr	r0, [r3]
   13320:	bl	11104 <_exit@plt>
   13324:	mov	r3, r6
   13328:	ldr	r1, [r4]
   1332c:	ldr	r2, [pc, #28]	; 13350 <__assert_fail@plt+0x1fc4>
   13330:	bl	111d0 <error@plt>
   13334:	b	13318 <__assert_fail@plt+0x1f8c>
   13338:	andeq	r8, r2, ip, lsl #3
   1333c:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   13340:	andeq	r8, r2, r0, lsl #3
   13344:	andeq	r7, r1, r0, lsr #20
   13348:	andeq	r7, r1, ip, lsr #20
   1334c:	andeq	r8, r2, r4, lsr #2
   13350:	andeq	r7, r1, r0, lsr sl
   13354:	b	110b0 <posix_fadvise64@plt>
   13358:	cmp	r0, #0
   1335c:	bxeq	lr
   13360:	push	{r4, lr}
   13364:	sub	sp, sp, #16
   13368:	mov	r4, r1
   1336c:	bl	112cc <fileno@plt>
   13370:	mov	r2, #0
   13374:	mov	r3, #0
   13378:	str	r4, [sp, #8]
   1337c:	strd	r2, [sp]
   13380:	bl	110b0 <posix_fadvise64@plt>
   13384:	add	sp, sp, #16
   13388:	pop	{r4, pc}
   1338c:	push	{r4, r5, r6, lr}
   13390:	mov	r4, r0
   13394:	mov	r5, r1
   13398:	add	r6, r2, #20
   1339c:	mov	r3, #0
   133a0:	strb	r3, [r2, #20]
   133a4:	mov	r0, r4
   133a8:	mov	r1, r5
   133ac:	mov	r2, #10
   133b0:	mov	r3, #0
   133b4:	bl	16fec <_obstack_memory_used@@Base+0x6f4>
   133b8:	mov	r0, r4
   133bc:	mov	r1, r5
   133c0:	mov	r3, #0
   133c4:	add	r2, r2, #48	; 0x30
   133c8:	strb	r2, [r6, #-1]!
   133cc:	mov	r2, #10
   133d0:	bl	16fec <_obstack_memory_used@@Base+0x6f4>
   133d4:	cmp	r5, #0
   133d8:	cmpeq	r4, #9
   133dc:	mov	r5, r1
   133e0:	mov	r4, r0
   133e4:	bhi	133a4 <__assert_fail@plt+0x2018>
   133e8:	mov	r0, r6
   133ec:	pop	{r4, r5, r6, pc}
   133f0:	push	{r4, lr}
   133f4:	mov	r4, r0
   133f8:	bl	110d4 <wcwidth@plt>
   133fc:	cmp	r0, #0
   13400:	popge	{r4, pc}
   13404:	mov	r0, r4
   13408:	bl	11170 <iswcntrl@plt>
   1340c:	clz	r0, r0
   13410:	lsr	r0, r0, #5
   13414:	pop	{r4, pc}
   13418:	mov	r3, r1
   1341c:	push	{r4, r5, r6, lr}
   13420:	mov	r4, r1
   13424:	ldr	r1, [r3], #16
   13428:	ldr	r2, [r4, #4]
   1342c:	cmp	r1, r3
   13430:	mov	r5, r0
   13434:	strne	r1, [r0]
   13438:	beq	13458 <__assert_fail@plt+0x20cc>
   1343c:	ldrb	r3, [r4, #8]
   13440:	str	r2, [r5, #4]
   13444:	cmp	r3, #0
   13448:	strb	r3, [r5, #8]
   1344c:	ldrne	r3, [r4, #12]
   13450:	strne	r3, [r5, #12]
   13454:	pop	{r4, r5, r6, pc}
   13458:	add	r3, r0, #16
   1345c:	mov	r0, r3
   13460:	bl	11110 <memcpy@plt>
   13464:	ldr	r2, [r4, #4]
   13468:	str	r0, [r5]
   1346c:	b	1343c <__assert_fail@plt+0x20b0>
   13470:	ldr	r3, [pc, #20]	; 1348c <__assert_fail@plt+0x2100>
   13474:	lsr	r2, r0, #5
   13478:	and	r0, r0, #31
   1347c:	ldr	r3, [r3, r2, lsl #2]
   13480:	lsr	r0, r3, r0
   13484:	and	r0, r0, #1
   13488:	bx	lr
   1348c:	andeq	r7, r1, r4, lsr sl
   13490:	push	{r4, r5, lr}
   13494:	sub	sp, sp, #76	; 0x4c
   13498:	ldr	r5, [pc, #136]	; 13528 <__assert_fail@plt+0x219c>
   1349c:	mov	r0, #85	; 0x55
   134a0:	ldr	r3, [r5]
   134a4:	str	r3, [sp, #68]	; 0x44
   134a8:	bl	1114c <sysconf@plt>
   134ac:	mov	r4, r0
   134b0:	mov	r0, #30
   134b4:	bl	1114c <sysconf@plt>
   134b8:	cmp	r4, #0
   134bc:	cmpge	r0, #0
   134c0:	bge	13500 <__assert_fail@plt+0x2174>
   134c4:	add	r0, sp, #4
   134c8:	bl	111e8 <sysinfo@plt>
   134cc:	cmp	r0, #0
   134d0:	vldreq	s15, [sp, #20]
   134d4:	vldrne	d0, [pc, #68]	; 13520 <__assert_fail@plt+0x2194>
   134d8:	vcvteq.f64.u32	d0, s15
   134dc:	vldreq	s15, [sp, #56]	; 0x38
   134e0:	vcvteq.f64.u32	d7, s15
   134e4:	vmuleq.f64	d0, d0, d7
   134e8:	ldr	r2, [sp, #68]	; 0x44
   134ec:	ldr	r3, [r5]
   134f0:	cmp	r2, r3
   134f4:	bne	13518 <__assert_fail@plt+0x218c>
   134f8:	add	sp, sp, #76	; 0x4c
   134fc:	pop	{r4, r5, pc}
   13500:	vmov	s15, r4
   13504:	vcvt.f64.s32	d0, s15
   13508:	vmov	s15, r0
   1350c:	vcvt.f64.s32	d7, s15
   13510:	vmul.f64	d0, d0, d7
   13514:	b	134e8 <__assert_fail@plt+0x215c>
   13518:	bl	11140 <__stack_chk_fail@plt>
   1351c:	nop			; (mov r0, r0)
   13520:	andeq	r0, r0, r0
   13524:	orrsmi	r0, r0, r0
   13528:	andeq	r7, r2, r8, lsl #30
   1352c:	push	{r4, r5, lr}
   13530:	sub	sp, sp, #76	; 0x4c
   13534:	ldr	r5, [pc, #164]	; 135e0 <__assert_fail@plt+0x2254>
   13538:	mov	r0, #86	; 0x56
   1353c:	ldr	r3, [r5]
   13540:	str	r3, [sp, #68]	; 0x44
   13544:	bl	1114c <sysconf@plt>
   13548:	mov	r4, r0
   1354c:	mov	r0, #30
   13550:	bl	1114c <sysconf@plt>
   13554:	cmp	r0, #0
   13558:	cmpge	r4, #0
   1355c:	bge	135b8 <__assert_fail@plt+0x222c>
   13560:	add	r0, sp, #4
   13564:	bl	111e8 <sysinfo@plt>
   13568:	cmp	r0, #0
   1356c:	bne	135a8 <__assert_fail@plt+0x221c>
   13570:	vldr	s15, [sp, #24]
   13574:	vcvt.f64.u32	d0, s15
   13578:	vldr	s15, [sp, #32]
   1357c:	vcvt.f64.u32	d6, s15
   13580:	vldr	s15, [sp, #56]	; 0x38
   13584:	vcvt.f64.u32	d7, s15
   13588:	vadd.f64	d0, d0, d6
   1358c:	vmul.f64	d0, d0, d7
   13590:	ldr	r2, [sp, #68]	; 0x44
   13594:	ldr	r3, [r5]
   13598:	cmp	r2, r3
   1359c:	bne	135d0 <__assert_fail@plt+0x2244>
   135a0:	add	sp, sp, #76	; 0x4c
   135a4:	pop	{r4, r5, pc}
   135a8:	bl	13490 <__assert_fail@plt+0x2104>
   135ac:	vldr	d7, [pc, #36]	; 135d8 <__assert_fail@plt+0x224c>
   135b0:	vmul.f64	d0, d0, d7
   135b4:	b	13590 <__assert_fail@plt+0x2204>
   135b8:	vmov	s15, r4
   135bc:	vcvt.f64.s32	d0, s15
   135c0:	vmov	s15, r0
   135c4:	vcvt.f64.s32	d7, s15
   135c8:	vmul.f64	d0, d0, d7
   135cc:	b	13590 <__assert_fail@plt+0x2204>
   135d0:	bl	11140 <__stack_chk_fail@plt>
   135d4:	nop			; (mov r0, r0)
   135d8:	andeq	r0, r0, r0
   135dc:	svccc	0x00d00000
   135e0:	andeq	r7, r2, r8, lsl #30
   135e4:	push	{r4, r5, r6, lr}
   135e8:	subs	r4, r0, #0
   135ec:	beq	13660 <__assert_fail@plt+0x22d4>
   135f0:	mov	r1, #47	; 0x2f
   135f4:	bl	11320 <strrchr@plt>
   135f8:	subs	r5, r0, #0
   135fc:	beq	1364c <__assert_fail@plt+0x22c0>
   13600:	add	r6, r5, #1
   13604:	sub	r3, r6, r4
   13608:	cmp	r3, #6
   1360c:	ble	1364c <__assert_fail@plt+0x22c0>
   13610:	mov	r2, #7
   13614:	ldr	r1, [pc, #96]	; 1367c <__assert_fail@plt+0x22f0>
   13618:	sub	r0, r5, #6
   1361c:	bl	11368 <strncmp@plt>
   13620:	cmp	r0, #0
   13624:	bne	1364c <__assert_fail@plt+0x22c0>
   13628:	mov	r2, #3
   1362c:	ldr	r1, [pc, #76]	; 13680 <__assert_fail@plt+0x22f4>
   13630:	mov	r0, r6
   13634:	bl	11368 <strncmp@plt>
   13638:	cmp	r0, #0
   1363c:	movne	r4, r6
   13640:	ldreq	r3, [pc, #60]	; 13684 <__assert_fail@plt+0x22f8>
   13644:	addeq	r4, r5, #4
   13648:	streq	r4, [r3]
   1364c:	ldr	r2, [pc, #52]	; 13688 <__assert_fail@plt+0x22fc>
   13650:	ldr	r3, [pc, #52]	; 1368c <__assert_fail@plt+0x2300>
   13654:	str	r4, [r2]
   13658:	str	r4, [r3]
   1365c:	pop	{r4, r5, r6, pc}
   13660:	ldr	r3, [pc, #40]	; 13690 <__assert_fail@plt+0x2304>
   13664:	mov	r2, #55	; 0x37
   13668:	mov	r1, #1
   1366c:	ldr	r3, [r3]
   13670:	ldr	r0, [pc, #28]	; 13694 <__assert_fail@plt+0x2308>
   13674:	bl	11194 <fwrite@plt>
   13678:	bl	11374 <abort@plt>
   1367c:	andeq	r7, r1, ip, lsl #21
   13680:	muleq	r1, r4, sl
   13684:	andeq	r8, r2, r0, ror r1
   13688:	andeq	r8, r2, r0, ror #3
   1368c:	andeq	r8, r2, r4, ror r1
   13690:	andeq	r8, r2, r0, lsl #3
   13694:	andeq	r7, r1, r4, asr sl
   13698:	push	{r4, lr}
   1369c:	mov	r2, #48	; 0x30
   136a0:	mov	r4, r1
   136a4:	mov	r1, #0
   136a8:	bl	112a8 <memset@plt>
   136ac:	cmp	r4, #10
   136b0:	beq	136bc <__assert_fail@plt+0x2330>
   136b4:	str	r4, [r0]
   136b8:	pop	{r4, pc}
   136bc:	bl	11374 <abort@plt>
   136c0:	push	{r4, r5, r6, lr}
   136c4:	mov	r2, #5
   136c8:	mov	r5, r0
   136cc:	mov	r6, r1
   136d0:	mov	r1, r0
   136d4:	mov	r0, #0
   136d8:	bl	11134 <dcgettext@plt>
   136dc:	cmp	r5, r0
   136e0:	mov	r4, r0
   136e4:	beq	136f0 <__assert_fail@plt+0x2364>
   136e8:	mov	r0, r4
   136ec:	pop	{r4, r5, r6, pc}
   136f0:	bl	169ec <_obstack_memory_used@@Base+0xf4>
   136f4:	ldrb	r3, [r0]
   136f8:	bic	r3, r3, #32
   136fc:	cmp	r3, #85	; 0x55
   13700:	bne	13760 <__assert_fail@plt+0x23d4>
   13704:	ldrb	r3, [r0, #1]
   13708:	bic	r3, r3, #32
   1370c:	cmp	r3, #84	; 0x54
   13710:	bne	137d8 <__assert_fail@plt+0x244c>
   13714:	ldrb	r3, [r0, #2]
   13718:	bic	r3, r3, #32
   1371c:	cmp	r3, #70	; 0x46
   13720:	bne	137d8 <__assert_fail@plt+0x244c>
   13724:	ldrb	r3, [r0, #3]
   13728:	cmp	r3, #45	; 0x2d
   1372c:	bne	137d8 <__assert_fail@plt+0x244c>
   13730:	ldrb	r3, [r0, #4]
   13734:	cmp	r3, #56	; 0x38
   13738:	bne	137d8 <__assert_fail@plt+0x244c>
   1373c:	ldrb	r3, [r0, #5]
   13740:	cmp	r3, #0
   13744:	bne	137d8 <__assert_fail@plt+0x244c>
   13748:	ldrb	r2, [r4]
   1374c:	ldr	r3, [pc, #156]	; 137f0 <__assert_fail@plt+0x2464>
   13750:	ldr	r4, [pc, #156]	; 137f4 <__assert_fail@plt+0x2468>
   13754:	cmp	r2, #96	; 0x60
   13758:	movne	r4, r3
   1375c:	b	136e8 <__assert_fail@plt+0x235c>
   13760:	cmp	r3, #71	; 0x47
   13764:	bne	137d8 <__assert_fail@plt+0x244c>
   13768:	ldrb	r3, [r0, #1]
   1376c:	bic	r3, r3, #32
   13770:	cmp	r3, #66	; 0x42
   13774:	bne	137d8 <__assert_fail@plt+0x244c>
   13778:	ldrb	r3, [r0, #2]
   1377c:	cmp	r3, #49	; 0x31
   13780:	bne	137d8 <__assert_fail@plt+0x244c>
   13784:	ldrb	r3, [r0, #3]
   13788:	cmp	r3, #56	; 0x38
   1378c:	bne	137d8 <__assert_fail@plt+0x244c>
   13790:	ldrb	r3, [r0, #4]
   13794:	cmp	r3, #48	; 0x30
   13798:	bne	137d8 <__assert_fail@plt+0x244c>
   1379c:	ldrb	r3, [r0, #5]
   137a0:	cmp	r3, #51	; 0x33
   137a4:	bne	137d8 <__assert_fail@plt+0x244c>
   137a8:	ldrb	r3, [r0, #6]
   137ac:	cmp	r3, #48	; 0x30
   137b0:	bne	137d8 <__assert_fail@plt+0x244c>
   137b4:	ldrb	r3, [r0, #7]
   137b8:	cmp	r3, #0
   137bc:	bne	137d8 <__assert_fail@plt+0x244c>
   137c0:	ldrb	r2, [r4]
   137c4:	ldr	r3, [pc, #44]	; 137f8 <__assert_fail@plt+0x246c>
   137c8:	ldr	r4, [pc, #44]	; 137fc <__assert_fail@plt+0x2470>
   137cc:	cmp	r2, #96	; 0x60
   137d0:	movne	r4, r3
   137d4:	b	136e8 <__assert_fail@plt+0x235c>
   137d8:	ldr	r3, [pc, #32]	; 13800 <__assert_fail@plt+0x2474>
   137dc:	ldr	r4, [pc, #32]	; 13804 <__assert_fail@plt+0x2478>
   137e0:	cmp	r6, #9
   137e4:	movne	r4, r3
   137e8:	mov	r0, r4
   137ec:	pop	{r4, r5, r6, pc}
   137f0:	strdeq	r7, [r1], -r0
   137f4:	strdeq	r7, [r1], -ip
   137f8:	strdeq	r7, [r1], -r4
   137fc:	strdeq	r7, [r1], -r8
   13800:	andeq	r7, r1, r0, lsl #22
   13804:	andeq	r7, r1, ip, ror #21
   13808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1380c:	sub	sp, sp, #124	; 0x7c
   13810:	ldr	ip, [pc, #3576]	; 14610 <__assert_fail@plt+0x3284>
   13814:	str	r3, [sp, #24]
   13818:	ldr	r3, [sp, #168]	; 0xa8
   1381c:	ldr	ip, [ip]
   13820:	str	r3, [sp, #56]	; 0x38
   13824:	ldr	r3, [sp, #172]	; 0xac
   13828:	ldr	r8, [sp, #160]	; 0xa0
   1382c:	str	r3, [sp, #80]	; 0x50
   13830:	ldr	r3, [sp, #176]	; 0xb0
   13834:	mov	fp, r0
   13838:	str	r3, [sp, #76]	; 0x4c
   1383c:	mov	sl, r1
   13840:	str	r2, [sp, #36]	; 0x24
   13844:	str	ip, [sp, #116]	; 0x74
   13848:	bl	111ac <__ctype_get_mb_cur_max@plt>
   1384c:	ldr	r3, [sp, #164]	; 0xa4
   13850:	ands	r4, r3, #2
   13854:	movne	r3, #1
   13858:	moveq	r3, #0
   1385c:	str	r3, [sp, #32]
   13860:	str	r0, [sp, #64]	; 0x40
   13864:	cmp	r8, #10
   13868:	ldrls	pc, [pc, r8, lsl #2]
   1386c:	b	1501c <__assert_fail@plt+0x3c90>
   13870:	andeq	r3, r1, r4, ror #24
   13874:	strdeq	r3, [r1], -ip
   13878:	strdeq	r4, [r1], -ip
   1387c:	andeq	r3, r1, ip, lsl sp
   13880:	ldrdeq	r3, [r1], -r0
   13884:	andeq	r3, r1, r8, lsl ip
   13888:	muleq	r1, r4, ip
   1388c:	andeq	r3, r1, ip, asr #25
   13890:	muleq	r1, ip, r8
   13894:	muleq	r1, ip, r8
   13898:	muleq	r1, ip, r8
   1389c:	cmp	r8, #10
   138a0:	beq	138c4 <__assert_fail@plt+0x2538>
   138a4:	mov	r1, r8
   138a8:	ldr	r0, [pc, #3428]	; 14614 <__assert_fail@plt+0x3288>
   138ac:	bl	136c0 <__assert_fail@plt+0x2334>
   138b0:	mov	r1, r8
   138b4:	str	r0, [sp, #80]	; 0x50
   138b8:	ldr	r0, [pc, #3420]	; 1461c <__assert_fail@plt+0x3290>
   138bc:	bl	136c0 <__assert_fail@plt+0x2334>
   138c0:	str	r0, [sp, #76]	; 0x4c
   138c4:	cmp	r4, #0
   138c8:	movne	r4, #0
   138cc:	beq	14cdc <__assert_fail@plt+0x3950>
   138d0:	ldr	r7, [sp, #76]	; 0x4c
   138d4:	mov	r5, #0
   138d8:	mov	r6, #1
   138dc:	mov	r0, r7
   138e0:	str	r6, [sp, #40]	; 0x28
   138e4:	str	r5, [sp, #68]	; 0x44
   138e8:	bl	11260 <strlen@plt>
   138ec:	str	r6, [sp, #28]
   138f0:	str	r5, [sp, #44]	; 0x2c
   138f4:	str	r5, [sp, #72]	; 0x48
   138f8:	str	r7, [sp, #60]	; 0x3c
   138fc:	str	r0, [sp, #52]	; 0x34
   13900:	str	r8, [sp, #160]	; 0xa0
   13904:	mov	r8, fp
   13908:	ldr	fp, [sp, #160]	; 0xa0
   1390c:	mov	r9, #0
   13910:	ldr	r3, [sp, #24]
   13914:	cmn	r3, #1
   13918:	beq	13e80 <__assert_fail@plt+0x2af4>
   1391c:	ldr	r3, [sp, #24]
   13920:	subs	r6, r3, r9
   13924:	movne	r6, #1
   13928:	cmp	r6, #0
   1392c:	beq	13e98 <__assert_fail@plt+0x2b0c>
   13930:	ldr	r7, [sp, #28]
   13934:	ldr	r0, [sp, #36]	; 0x24
   13938:	cmp	fp, #2
   1393c:	moveq	r7, #0
   13940:	andne	r7, r7, #1
   13944:	add	r3, r0, r9
   13948:	cmp	r7, #0
   1394c:	str	r3, [sp, #48]	; 0x30
   13950:	beq	1433c <__assert_fail@plt+0x2fb0>
   13954:	ldr	r2, [sp, #52]	; 0x34
   13958:	cmp	r2, #0
   1395c:	beq	14620 <__assert_fail@plt+0x3294>
   13960:	ldr	r1, [sp, #24]
   13964:	cmp	r2, #1
   13968:	mov	r3, r2
   1396c:	movls	r3, #0
   13970:	movhi	r3, #1
   13974:	cmn	r1, #1
   13978:	movne	r3, #0
   1397c:	cmp	r3, #0
   13980:	add	r5, r9, r2
   13984:	beq	13990 <__assert_fail@plt+0x2604>
   13988:	bl	11260 <strlen@plt>
   1398c:	str	r0, [sp, #24]
   13990:	ldr	r3, [sp, #24]
   13994:	cmp	r5, r3
   13998:	bhi	14620 <__assert_fail@plt+0x3294>
   1399c:	ldr	r2, [sp, #52]	; 0x34
   139a0:	ldr	r1, [sp, #60]	; 0x3c
   139a4:	ldr	r0, [sp, #48]	; 0x30
   139a8:	bl	11128 <memcmp@plt>
   139ac:	cmp	r0, #0
   139b0:	bne	14620 <__assert_fail@plt+0x3294>
   139b4:	ldr	r3, [sp, #32]
   139b8:	cmp	r3, #0
   139bc:	bne	14edc <__assert_fail@plt+0x3b50>
   139c0:	ldr	r3, [sp, #48]	; 0x30
   139c4:	ldrb	r5, [r3]
   139c8:	cmp	r5, #126	; 0x7e
   139cc:	ldrls	pc, [pc, r5, lsl #2]
   139d0:	b	142a0 <__assert_fail@plt+0x2f14>
   139d4:	andeq	r4, r1, ip, lsl #3
   139d8:	andeq	r4, r1, r0, lsr #5
   139dc:	andeq	r4, r1, r0, lsr #5
   139e0:	andeq	r4, r1, r0, lsr #5
   139e4:	andeq	r4, r1, r0, lsr #5
   139e8:	andeq	r4, r1, r0, lsr #5
   139ec:	andeq	r4, r1, r0, lsr #5
   139f0:	andeq	r4, r1, r8, asr r2
   139f4:	andeq	r4, r1, r8, asr #4
   139f8:	andeq	r4, r1, r8, asr #2
   139fc:	andeq	r4, r1, r0, lsl r1
   13a00:	andeq	r4, r1, r8, ror #2
   13a04:	andeq	r4, r1, r0, asr r1
   13a08:	andeq	r4, r1, r0, lsl #1
   13a0c:	andeq	r4, r1, r0, lsr #5
   13a10:	andeq	r4, r1, r0, lsr #5
   13a14:	andeq	r4, r1, r0, lsr #5
   13a18:	andeq	r4, r1, r0, lsr #5
   13a1c:	andeq	r4, r1, r0, lsr #5
   13a20:	andeq	r4, r1, r0, lsr #5
   13a24:	andeq	r4, r1, r0, lsr #5
   13a28:	andeq	r4, r1, r0, lsr #5
   13a2c:	andeq	r4, r1, r0, lsr #5
   13a30:	andeq	r4, r1, r0, lsr #5
   13a34:	andeq	r4, r1, r0, lsr #5
   13a38:	andeq	r4, r1, r0, lsr #5
   13a3c:	andeq	r4, r1, r0, lsr #5
   13a40:	andeq	r4, r1, r0, lsr #5
   13a44:	andeq	r4, r1, r0, lsr #5
   13a48:	andeq	r4, r1, r0, lsr #5
   13a4c:	andeq	r4, r1, r0, lsr #5
   13a50:	andeq	r4, r1, r0, lsr #5
   13a54:	andeq	r4, r1, r0, ror #4
   13a58:	andeq	r4, r1, r4, ror r1
   13a5c:	andeq	r4, r1, r4, ror r1
   13a60:	andeq	r4, r1, r8, ror r2
   13a64:	andeq	r4, r1, r4, ror r1
   13a68:	muleq	r1, r4, r2
   13a6c:	andeq	r4, r1, r4, ror r1
   13a70:			; <UNDEFINED> instruction: 0x00013fb4
   13a74:	andeq	r4, r1, r4, ror r1
   13a78:	andeq	r4, r1, r4, ror r1
   13a7c:	andeq	r4, r1, r4, ror r1
   13a80:	muleq	r1, r4, r2
   13a84:	muleq	r1, r4, r2
   13a88:	muleq	r1, r4, r2
   13a8c:	muleq	r1, r4, r2
   13a90:	muleq	r1, r4, r2
   13a94:	muleq	r1, r4, r2
   13a98:	muleq	r1, r4, r2
   13a9c:	muleq	r1, r4, r2
   13aa0:	muleq	r1, r4, r2
   13aa4:	muleq	r1, r4, r2
   13aa8:	muleq	r1, r4, r2
   13aac:	muleq	r1, r4, r2
   13ab0:	muleq	r1, r4, r2
   13ab4:	muleq	r1, r4, r2
   13ab8:	muleq	r1, r4, r2
   13abc:	muleq	r1, r4, r2
   13ac0:	andeq	r4, r1, r4, ror r1
   13ac4:	andeq	r4, r1, r4, ror r1
   13ac8:	andeq	r4, r1, r4, ror r1
   13acc:	andeq	r4, r1, r4, ror r1
   13ad0:	andeq	r3, r1, r8, lsl #31
   13ad4:	andeq	r4, r1, r0, lsr #5
   13ad8:	muleq	r1, r4, r2
   13adc:	muleq	r1, r4, r2
   13ae0:	muleq	r1, r4, r2
   13ae4:	muleq	r1, r4, r2
   13ae8:	muleq	r1, r4, r2
   13aec:	muleq	r1, r4, r2
   13af0:	muleq	r1, r4, r2
   13af4:	muleq	r1, r4, r2
   13af8:	muleq	r1, r4, r2
   13afc:	muleq	r1, r4, r2
   13b00:	muleq	r1, r4, r2
   13b04:	muleq	r1, r4, r2
   13b08:	muleq	r1, r4, r2
   13b0c:	muleq	r1, r4, r2
   13b10:	muleq	r1, r4, r2
   13b14:	muleq	r1, r4, r2
   13b18:	muleq	r1, r4, r2
   13b1c:	muleq	r1, r4, r2
   13b20:	muleq	r1, r4, r2
   13b24:	muleq	r1, r4, r2
   13b28:	muleq	r1, r4, r2
   13b2c:	muleq	r1, r4, r2
   13b30:	muleq	r1, r4, r2
   13b34:	muleq	r1, r4, r2
   13b38:	muleq	r1, r4, r2
   13b3c:	muleq	r1, r4, r2
   13b40:	andeq	r4, r1, r4, ror r1
   13b44:	andeq	r3, r1, r0, asr #30
   13b48:	muleq	r1, r4, r2
   13b4c:	andeq	r4, r1, r4, ror r1
   13b50:	muleq	r1, r4, r2
   13b54:	andeq	r4, r1, r4, ror r1
   13b58:	muleq	r1, r4, r2
   13b5c:	muleq	r1, r4, r2
   13b60:	muleq	r1, r4, r2
   13b64:	muleq	r1, r4, r2
   13b68:	muleq	r1, r4, r2
   13b6c:	muleq	r1, r4, r2
   13b70:	muleq	r1, r4, r2
   13b74:	muleq	r1, r4, r2
   13b78:	muleq	r1, r4, r2
   13b7c:	muleq	r1, r4, r2
   13b80:	muleq	r1, r4, r2
   13b84:	muleq	r1, r4, r2
   13b88:	muleq	r1, r4, r2
   13b8c:	muleq	r1, r4, r2
   13b90:	muleq	r1, r4, r2
   13b94:	muleq	r1, r4, r2
   13b98:	muleq	r1, r4, r2
   13b9c:	muleq	r1, r4, r2
   13ba0:	muleq	r1, r4, r2
   13ba4:	muleq	r1, r4, r2
   13ba8:	muleq	r1, r4, r2
   13bac:	muleq	r1, r4, r2
   13bb0:	muleq	r1, r4, r2
   13bb4:	muleq	r1, r4, r2
   13bb8:	muleq	r1, r4, r2
   13bbc:	muleq	r1, r4, r2
   13bc0:	andeq	r3, r1, r8, asr sp
   13bc4:	andeq	r4, r1, r4, ror r1
   13bc8:	andeq	r3, r1, r8, asr sp
   13bcc:	andeq	r4, r1, r8, ror r2
   13bd0:	cmp	r4, #0
   13bd4:	moveq	r3, #1
   13bd8:	streq	r3, [sp, #28]
   13bdc:	beq	14308 <__assert_fail@plt+0x2f7c>
   13be0:	mov	r3, #0
   13be4:	mov	r4, r3
   13be8:	mov	r2, #1
   13bec:	str	r2, [sp, #40]	; 0x28
   13bf0:	str	r3, [sp, #68]	; 0x44
   13bf4:	str	r2, [sp, #32]
   13bf8:	str	r2, [sp, #52]	; 0x34
   13bfc:	ldr	r3, [pc, #2584]	; 1461c <__assert_fail@plt+0x3290>
   13c00:	str	r4, [sp, #44]	; 0x2c
   13c04:	str	r4, [sp, #72]	; 0x48
   13c08:	str	r4, [sp, #28]
   13c0c:	str	r3, [sp, #60]	; 0x3c
   13c10:	mov	r8, #2
   13c14:	b	13900 <__assert_fail@plt+0x2574>
   13c18:	cmp	r4, #0
   13c1c:	bne	14ea8 <__assert_fail@plt+0x3b1c>
   13c20:	cmp	sl, #0
   13c24:	beq	14c68 <__assert_fail@plt+0x38dc>
   13c28:	mov	r3, #34	; 0x22
   13c2c:	strb	r3, [fp]
   13c30:	ldr	r3, [pc, #2528]	; 14618 <__assert_fail@plt+0x328c>
   13c34:	mov	r1, r4
   13c38:	mov	r2, #1
   13c3c:	str	r4, [sp, #68]	; 0x44
   13c40:	str	r2, [sp, #40]	; 0x28
   13c44:	mov	r4, r2
   13c48:	str	r1, [sp, #44]	; 0x2c
   13c4c:	str	r1, [sp, #72]	; 0x48
   13c50:	str	r1, [sp, #32]
   13c54:	str	r2, [sp, #28]
   13c58:	str	r2, [sp, #52]	; 0x34
   13c5c:	str	r3, [sp, #60]	; 0x3c
   13c60:	b	13900 <__assert_fail@plt+0x2574>
   13c64:	mov	r3, #0
   13c68:	str	r3, [sp, #68]	; 0x44
   13c6c:	str	r3, [sp, #44]	; 0x2c
   13c70:	str	r3, [sp, #32]
   13c74:	str	r3, [sp, #28]
   13c78:	str	r3, [sp, #60]	; 0x3c
   13c7c:	mov	r3, #1
   13c80:	str	r8, [sp, #72]	; 0x48
   13c84:	str	r8, [sp, #52]	; 0x34
   13c88:	mov	r4, r8
   13c8c:	str	r3, [sp, #40]	; 0x28
   13c90:	b	13900 <__assert_fail@plt+0x2574>
   13c94:	mov	r3, #1
   13c98:	str	r3, [sp, #40]	; 0x28
   13c9c:	str	r3, [sp, #32]
   13ca0:	str	r3, [sp, #28]
   13ca4:	str	r3, [sp, #52]	; 0x34
   13ca8:	ldr	r3, [pc, #2408]	; 14618 <__assert_fail@plt+0x328c>
   13cac:	mov	r2, #0
   13cb0:	mov	r4, r2
   13cb4:	str	r2, [sp, #68]	; 0x44
   13cb8:	str	r2, [sp, #44]	; 0x2c
   13cbc:	str	r2, [sp, #72]	; 0x48
   13cc0:	str	r3, [sp, #60]	; 0x3c
   13cc4:	mov	r8, #5
   13cc8:	b	13900 <__assert_fail@plt+0x2574>
   13ccc:	mov	r3, #0
   13cd0:	mov	r2, #1
   13cd4:	str	r2, [sp, #40]	; 0x28
   13cd8:	mov	r4, r3
   13cdc:	str	r3, [sp, #68]	; 0x44
   13ce0:	str	r2, [sp, #28]
   13ce4:	str	r3, [sp, #44]	; 0x2c
   13ce8:	str	r3, [sp, #72]	; 0x48
   13cec:	str	r3, [sp, #32]
   13cf0:	str	r3, [sp, #52]	; 0x34
   13cf4:	str	r3, [sp, #60]	; 0x3c
   13cf8:	b	13900 <__assert_fail@plt+0x2574>
   13cfc:	mov	r2, #1
   13d00:	mov	r3, #0
   13d04:	str	r2, [sp, #40]	; 0x28
   13d08:	mov	r4, r3
   13d0c:	str	r3, [sp, #68]	; 0x44
   13d10:	str	r8, [sp, #52]	; 0x34
   13d14:	str	r2, [sp, #32]
   13d18:	b	13bfc <__assert_fail@plt+0x2870>
   13d1c:	mov	r3, #1
   13d20:	str	r3, [sp, #40]	; 0x28
   13d24:	str	r3, [sp, #32]
   13d28:	str	r3, [sp, #28]
   13d2c:	str	r3, [sp, #52]	; 0x34
   13d30:	ldr	r3, [pc, #2276]	; 1461c <__assert_fail@plt+0x3290>
   13d34:	mov	r2, #0
   13d38:	mov	r4, r2
   13d3c:	str	r2, [sp, #68]	; 0x44
   13d40:	str	r2, [sp, #44]	; 0x2c
   13d44:	str	r2, [sp, #72]	; 0x48
   13d48:	str	r3, [sp, #60]	; 0x3c
   13d4c:	mov	r8, #2
   13d50:	b	13900 <__assert_fail@plt+0x2574>
   13d54:	mov	r7, #0
   13d58:	ldr	r3, [sp, #24]
   13d5c:	cmn	r3, #1
   13d60:	beq	1489c <__assert_fail@plt+0x3510>
   13d64:	ldr	r3, [sp, #24]
   13d68:	subs	r3, r3, #1
   13d6c:	movne	r3, #1
   13d70:	cmp	r3, #0
   13d74:	sub	r2, fp, #2
   13d78:	clz	r2, r2
   13d7c:	lsr	r2, r2, #5
   13d80:	bne	13f7c <__assert_fail@plt+0x2bf0>
   13d84:	cmp	r9, #0
   13d88:	bne	13f7c <__assert_fail@plt+0x2bf0>
   13d8c:	ldr	r3, [sp, #32]
   13d90:	tst	r3, r2
   13d94:	bne	1409c <__assert_fail@plt+0x2d10>
   13d98:	ldr	r3, [sp, #28]
   13d9c:	eor	r3, r3, #1
   13da0:	orr	r3, r2, r3
   13da4:	ldr	r2, [sp, #32]
   13da8:	eor	r3, r3, #1
   13dac:	orrs	r3, r2, r3
   13db0:	beq	13de0 <__assert_fail@plt+0x2a54>
   13db4:	mov	r3, #0
   13db8:	ldr	r1, [sp, #56]	; 0x38
   13dbc:	cmp	r1, #0
   13dc0:	beq	13de0 <__assert_fail@plt+0x2a54>
   13dc4:	lsr	r2, r5, #5
   13dc8:	and	r0, r5, #31
   13dcc:	uxtb	r2, r2
   13dd0:	ldr	r1, [r1, r2, lsl #2]
   13dd4:	lsr	r2, r1, r0
   13dd8:	tst	r2, #1
   13ddc:	bne	13de8 <__assert_fail@plt+0x2a5c>
   13de0:	cmp	r7, #0
   13de4:	beq	14038 <__assert_fail@plt+0x2cac>
   13de8:	sub	r2, fp, #2
   13dec:	clz	r2, r2
   13df0:	lsr	r2, r2, #5
   13df4:	ldr	r3, [sp, #32]
   13df8:	cmp	r3, #0
   13dfc:	bne	14128 <__assert_fail@plt+0x2d9c>
   13e00:	ldr	r3, [sp, #44]	; 0x2c
   13e04:	eor	r3, r3, #1
   13e08:	ands	r3, r2, r3
   13e0c:	beq	13e44 <__assert_fail@plt+0x2ab8>
   13e10:	cmp	sl, r4
   13e14:	movhi	r2, #39	; 0x27
   13e18:	strbhi	r2, [r8, r4]
   13e1c:	add	r2, r4, #1
   13e20:	cmp	r2, sl
   13e24:	movcc	r1, #36	; 0x24
   13e28:	strbcc	r1, [r8, r2]
   13e2c:	add	r2, r4, #2
   13e30:	cmp	r2, sl
   13e34:	add	r4, r4, #3
   13e38:	movcc	r1, #39	; 0x27
   13e3c:	strbcc	r1, [r8, r2]
   13e40:	str	r3, [sp, #44]	; 0x2c
   13e44:	cmp	r4, sl
   13e48:	movcc	r3, #92	; 0x5c
   13e4c:	strbcc	r3, [r8, r4]
   13e50:	add	r9, r9, #1
   13e54:	add	r4, r4, #1
   13e58:	cmp	r4, sl
   13e5c:	ldr	r3, [sp, #40]	; 0x28
   13e60:	strbcc	r5, [r8, r4]
   13e64:	cmp	r6, #0
   13e68:	moveq	r3, #0
   13e6c:	str	r3, [sp, #40]	; 0x28
   13e70:	ldr	r3, [sp, #24]
   13e74:	add	r4, r4, #1
   13e78:	cmn	r3, #1
   13e7c:	bne	1391c <__assert_fail@plt+0x2590>
   13e80:	ldr	r3, [sp, #36]	; 0x24
   13e84:	ldrb	r6, [r3, r9]
   13e88:	adds	r6, r6, #0
   13e8c:	movne	r6, #1
   13e90:	cmp	r6, #0
   13e94:	bne	13930 <__assert_fail@plt+0x25a4>
   13e98:	str	fp, [sp, #160]	; 0xa0
   13e9c:	mov	fp, r8
   13ea0:	ldr	r8, [sp, #160]	; 0xa0
   13ea4:	ldr	r1, [sp, #32]
   13ea8:	cmp	r4, #0
   13eac:	sub	r2, r8, #2
   13eb0:	clz	r2, r2
   13eb4:	lsr	r2, r2, #5
   13eb8:	andeq	r3, r2, r1
   13ebc:	movne	r3, #0
   13ec0:	cmp	r3, #0
   13ec4:	bne	14fb0 <__assert_fail@plt+0x3c24>
   13ec8:	eor	r3, r1, #1
   13ecc:	ands	r2, r2, r3
   13ed0:	beq	14eec <__assert_fail@plt+0x3b60>
   13ed4:	ldr	r3, [sp, #68]	; 0x44
   13ed8:	cmp	r3, #0
   13edc:	beq	14ef0 <__assert_fail@plt+0x3b64>
   13ee0:	ldr	r3, [sp, #40]	; 0x28
   13ee4:	cmp	r3, #0
   13ee8:	bne	14f6c <__assert_fail@plt+0x3be0>
   13eec:	ldr	r3, [sp, #72]	; 0x48
   13ef0:	adds	r3, r3, #0
   13ef4:	movne	r3, #1
   13ef8:	cmp	sl, #0
   13efc:	movne	r3, #0
   13f00:	cmp	r3, #0
   13f04:	ldreq	r2, [sp, #68]	; 0x44
   13f08:	beq	14ef0 <__assert_fail@plt+0x3b64>
   13f0c:	ldr	sl, [sp, #72]	; 0x48
   13f10:	str	r3, [sp, #68]	; 0x44
   13f14:	ldr	r3, [pc, #1792]	; 1461c <__assert_fail@plt+0x3290>
   13f18:	mov	r2, #39	; 0x27
   13f1c:	mov	r4, #1
   13f20:	str	r3, [sp, #60]	; 0x3c
   13f24:	mov	r3, #0
   13f28:	strb	r2, [fp]
   13f2c:	str	r4, [sp, #52]	; 0x34
   13f30:	mov	r8, #2
   13f34:	str	r3, [sp, #32]
   13f38:	b	13900 <__assert_fail@plt+0x2574>
   13f3c:	mov	r7, #0
   13f40:	cmp	fp, #2
   13f44:	beq	1487c <__assert_fail@plt+0x34f0>
   13f48:	ldr	r3, [sp, #52]	; 0x34
   13f4c:	ldr	r2, [sp, #28]
   13f50:	ldr	r1, [sp, #32]
   13f54:	cmp	r3, #0
   13f58:	andne	r2, r2, r1
   13f5c:	moveq	r2, #0
   13f60:	cmp	r2, #0
   13f64:	moveq	r5, #92	; 0x5c
   13f68:	moveq	r3, r5
   13f6c:	bne	14888 <__assert_fail@plt+0x34fc>
   13f70:	ldr	r1, [sp, #28]
   13f74:	cmp	r1, #0
   13f78:	bne	14ff8 <__assert_fail@plt+0x3c6c>
   13f7c:	mov	r6, #0
   13f80:	b	13d98 <__assert_fail@plt+0x2a0c>
   13f84:	mov	r7, #0
   13f88:	cmp	fp, #2
   13f8c:	beq	148ec <__assert_fail@plt+0x3560>
   13f90:	cmp	fp, #5
   13f94:	beq	148b0 <__assert_fail@plt+0x3524>
   13f98:	sub	r2, fp, #2
   13f9c:	mov	r6, #0
   13fa0:	clz	r2, r2
   13fa4:	mov	r5, #63	; 0x3f
   13fa8:	lsr	r2, r2, #5
   13fac:	b	13d98 <__assert_fail@plt+0x2a0c>
   13fb0:	mov	r7, #0
   13fb4:	cmp	fp, #2
   13fb8:	strne	r6, [sp, #68]	; 0x44
   13fbc:	movne	r2, #0
   13fc0:	movne	r5, #39	; 0x27
   13fc4:	bne	13d98 <__assert_fail@plt+0x2a0c>
   13fc8:	ldr	r3, [sp, #32]
   13fcc:	cmp	r3, #0
   13fd0:	bne	14ccc <__assert_fail@plt+0x3940>
   13fd4:	cmp	sl, #0
   13fd8:	ldr	r3, [sp, #72]	; 0x48
   13fdc:	clz	r3, r3
   13fe0:	lsr	r3, r3, #5
   13fe4:	moveq	r3, #0
   13fe8:	cmp	r3, #0
   13fec:	bne	14c00 <__assert_fail@plt+0x3874>
   13ff0:	cmp	sl, r4
   13ff4:	movhi	r3, #39	; 0x27
   13ff8:	strbhi	r3, [r8, r4]
   13ffc:	add	r3, r4, #1
   14000:	cmp	sl, r3
   14004:	movhi	r2, #92	; 0x5c
   14008:	strbhi	r2, [r8, r3]
   1400c:	add	r3, r4, #2
   14010:	cmp	sl, r3
   14014:	movhi	r2, #39	; 0x27
   14018:	strbhi	r2, [r8, r3]
   1401c:	mov	r3, #0
   14020:	cmp	r7, #0
   14024:	add	r4, r4, #3
   14028:	str	r3, [sp, #44]	; 0x2c
   1402c:	str	r6, [sp, #68]	; 0x44
   14030:	mov	r5, #39	; 0x27
   14034:	bne	13de8 <__assert_fail@plt+0x2a5c>
   14038:	ldr	r2, [sp, #44]	; 0x2c
   1403c:	eor	r3, r3, #1
   14040:	and	r3, r3, r2
   14044:	add	r9, r9, #1
   14048:	uxtb	r3, r3
   1404c:	cmp	r3, #0
   14050:	beq	13e58 <__assert_fail@plt+0x2acc>
   14054:	cmp	sl, r4
   14058:	movhi	r3, #39	; 0x27
   1405c:	strbhi	r3, [r8, r4]
   14060:	add	r3, r4, #1
   14064:	cmp	sl, r3
   14068:	movhi	r2, #39	; 0x27
   1406c:	strbhi	r2, [r8, r3]
   14070:	mov	r3, #0
   14074:	add	r4, r4, #2
   14078:	str	r3, [sp, #44]	; 0x2c
   1407c:	b	13e58 <__assert_fail@plt+0x2acc>
   14080:	mov	r3, #114	; 0x72
   14084:	ldr	r1, [sp, #32]
   14088:	sub	r2, fp, #2
   1408c:	clz	r2, r2
   14090:	lsr	r2, r2, #5
   14094:	tst	r2, r1
   14098:	beq	13f70 <__assert_fail@plt+0x2be4>
   1409c:	mov	fp, r8
   140a0:	mov	r8, #2
   140a4:	ldr	r3, [sp, #28]
   140a8:	cmp	r3, #0
   140ac:	movne	r8, #4
   140b0:	ldr	r3, [sp, #164]	; 0xa4
   140b4:	mov	ip, #0
   140b8:	bic	r3, r3, #2
   140bc:	str	r3, [sp, #4]
   140c0:	ldr	r3, [sp, #76]	; 0x4c
   140c4:	str	r8, [sp]
   140c8:	str	r3, [sp, #16]
   140cc:	ldr	r3, [sp, #80]	; 0x50
   140d0:	ldr	r2, [sp, #36]	; 0x24
   140d4:	str	r3, [sp, #12]
   140d8:	mov	r1, sl
   140dc:	ldr	r3, [sp, #24]
   140e0:	mov	r0, fp
   140e4:	str	ip, [sp, #8]
   140e8:	bl	13808 <__assert_fail@plt+0x247c>
   140ec:	mov	r4, r0
   140f0:	ldr	r3, [pc, #1304]	; 14610 <__assert_fail@plt+0x3284>
   140f4:	ldr	r2, [sp, #116]	; 0x74
   140f8:	mov	r0, r4
   140fc:	ldr	r3, [r3]
   14100:	cmp	r2, r3
   14104:	bne	14ff4 <__assert_fail@plt+0x3c68>
   14108:	add	sp, sp, #124	; 0x7c
   1410c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14110:	mov	r5, #110	; 0x6e
   14114:	ldr	r3, [sp, #32]
   14118:	mov	r2, #0
   1411c:	cmp	r3, #0
   14120:	mov	r6, r2
   14124:	beq	13e00 <__assert_fail@plt+0x2a74>
   14128:	str	fp, [sp, #160]	; 0xa0
   1412c:	mov	fp, r8
   14130:	ldr	r8, [sp, #160]	; 0xa0
   14134:	mov	r3, r2
   14138:	ldr	r2, [sp, #28]
   1413c:	and	r2, r2, r3
   14140:	str	r2, [sp, #28]
   14144:	b	140a4 <__assert_fail@plt+0x2d18>
   14148:	mov	r5, #116	; 0x74
   1414c:	b	14114 <__assert_fail@plt+0x2d88>
   14150:	mov	r5, #102	; 0x66
   14154:	ldr	r3, [sp, #32]
   14158:	cmp	r3, #0
   1415c:	bne	14d08 <__assert_fail@plt+0x397c>
   14160:	mov	r6, #0
   14164:	b	13e44 <__assert_fail@plt+0x2ab8>
   14168:	mov	r5, #118	; 0x76
   1416c:	b	14154 <__assert_fail@plt+0x2dc8>
   14170:	mov	r7, #0
   14174:	mov	r6, #0
   14178:	b	13db4 <__assert_fail@plt+0x2a28>
   1417c:	ldr	r3, [sp, #32]
   14180:	cmp	r3, #0
   14184:	bne	14f4c <__assert_fail@plt+0x3bc0>
   14188:	mov	r7, r3
   1418c:	ldr	r3, [sp, #44]	; 0x2c
   14190:	sub	r2, fp, #2
   14194:	eor	r3, r3, #1
   14198:	clz	r2, r2
   1419c:	lsr	r2, r2, #5
   141a0:	ands	r3, r2, r3
   141a4:	beq	14bec <__assert_fail@plt+0x3860>
   141a8:	cmp	sl, r4
   141ac:	movhi	r1, #39	; 0x27
   141b0:	strbhi	r1, [r8, r4]
   141b4:	add	r1, r4, #1
   141b8:	cmp	sl, r1
   141bc:	movhi	r0, #36	; 0x24
   141c0:	strbhi	r0, [r8, r1]
   141c4:	add	r1, r4, #2
   141c8:	cmp	sl, r1
   141cc:	movhi	r0, #39	; 0x27
   141d0:	strbhi	r0, [r8, r1]
   141d4:	add	r1, r4, #3
   141d8:	cmp	sl, r1
   141dc:	bls	14c4c <__assert_fail@plt+0x38c0>
   141e0:	mov	r4, r1
   141e4:	mov	r1, #92	; 0x5c
   141e8:	strb	r1, [r8, r4]
   141ec:	mov	r1, r4
   141f0:	str	r3, [sp, #44]	; 0x2c
   141f4:	cmp	fp, #2
   141f8:	add	r4, r4, #1
   141fc:	beq	14c94 <__assert_fail@plt+0x3908>
   14200:	ldr	r0, [sp, #24]
   14204:	add	r3, r9, #1
   14208:	cmp	r3, r0
   1420c:	bcs	14224 <__assert_fail@plt+0x2e98>
   14210:	ldr	r0, [sp, #36]	; 0x24
   14214:	ldrb	r3, [r0, r3]
   14218:	sub	r3, r3, #48	; 0x30
   1421c:	cmp	r3, #9
   14220:	bls	14ca4 <__assert_fail@plt+0x3918>
   14224:	mov	r5, #48	; 0x30
   14228:	ldr	r3, [sp, #28]
   1422c:	eor	r3, r3, #1
   14230:	orrs	r2, r2, r3
   14234:	mov	r3, r6
   14238:	moveq	r6, r2
   1423c:	beq	13db8 <__assert_fail@plt+0x2a2c>
   14240:	mov	r6, #0
   14244:	b	13de0 <__assert_fail@plt+0x2a54>
   14248:	mov	r2, #0
   1424c:	mov	r6, r2
   14250:	mov	r5, #98	; 0x62
   14254:	b	13e00 <__assert_fail@plt+0x2a74>
   14258:	mov	r5, #97	; 0x61
   1425c:	b	14160 <__assert_fail@plt+0x2dd4>
   14260:	mov	r3, r7
   14264:	mov	r6, r7
   14268:	mov	r2, #0
   1426c:	mov	r7, r3
   14270:	mov	r5, #32
   14274:	b	13d98 <__assert_fail@plt+0x2a0c>
   14278:	cmp	r9, #0
   1427c:	mov	r3, r7
   14280:	bne	14848 <__assert_fail@plt+0x34bc>
   14284:	mov	r6, r7
   14288:	mov	r2, r9
   1428c:	mov	r7, r3
   14290:	b	13d98 <__assert_fail@plt+0x2a0c>
   14294:	mov	r6, r7
   14298:	b	13db4 <__assert_fail@plt+0x2a28>
   1429c:	mov	r7, #0
   142a0:	ldr	r3, [sp, #64]	; 0x40
   142a4:	cmp	r3, #1
   142a8:	bne	14904 <__assert_fail@plt+0x3578>
   142ac:	bl	11230 <__ctype_b_loc@plt>
   142b0:	ldr	r2, [sp, #64]	; 0x40
   142b4:	sxth	r3, r5
   142b8:	mov	ip, r2
   142bc:	lsl	r3, r3, #1
   142c0:	ldr	r2, [r0]
   142c4:	ldrh	r3, [r2, r3]
   142c8:	and	r3, r3, #16384	; 0x4000
   142cc:	cmp	r3, #0
   142d0:	ldr	r3, [sp, #28]
   142d4:	movne	r6, #1
   142d8:	moveq	r6, #0
   142dc:	movne	r2, #0
   142e0:	andeq	r2, r3, #1
   142e4:	cmp	r2, #0
   142e8:	bne	14c14 <__assert_fail@plt+0x3888>
   142ec:	sub	r2, fp, #2
   142f0:	clz	r2, r2
   142f4:	lsr	r2, r2, #5
   142f8:	b	13d98 <__assert_fail@plt+0x2a0c>
   142fc:	cmp	r4, #0
   14300:	bne	14fc0 <__assert_fail@plt+0x3c34>
   14304:	str	r4, [sp, #28]
   14308:	cmp	sl, #0
   1430c:	bne	15004 <__assert_fail@plt+0x3c78>
   14310:	ldr	r3, [pc, #772]	; 1461c <__assert_fail@plt+0x3290>
   14314:	mov	r4, #1
   14318:	str	r4, [sp, #40]	; 0x28
   1431c:	str	r3, [sp, #60]	; 0x3c
   14320:	str	r4, [sp, #52]	; 0x34
   14324:	str	sl, [sp, #72]	; 0x48
   14328:	str	sl, [sp, #68]	; 0x44
   1432c:	str	sl, [sp, #44]	; 0x2c
   14330:	str	sl, [sp, #32]
   14334:	mov	r8, #2
   14338:	b	13900 <__assert_fail@plt+0x2574>
   1433c:	ldr	r3, [sp, #36]	; 0x24
   14340:	ldrb	r5, [r3, r9]
   14344:	cmp	r5, #126	; 0x7e
   14348:	ldrls	pc, [pc, r5, lsl #2]
   1434c:	b	142a0 <__assert_fail@plt+0x2f14>
   14350:	andeq	r4, r1, r4, lsl #11
   14354:	andeq	r4, r1, r0, lsr #5
   14358:	andeq	r4, r1, r0, lsr #5
   1435c:	andeq	r4, r1, r0, lsr #5
   14360:	andeq	r4, r1, r0, lsr #5
   14364:	andeq	r4, r1, r0, lsr #5
   14368:	andeq	r4, r1, r0, lsr #5
   1436c:	andeq	r4, r1, r0, ror r5
   14370:	andeq	r4, r1, ip, asr r5
   14374:	andeq	r4, r1, r4, asr r5
   14378:	andeq	r4, r1, ip, asr #10
   1437c:	strdeq	r4, [r1], -ip
   14380:	andeq	r4, r1, r8, ror #11
   14384:	andeq	r4, r1, r0, lsl #1
   14388:	andeq	r4, r1, r0, lsr #5
   1438c:	andeq	r4, r1, r0, lsr #5
   14390:	andeq	r4, r1, r0, lsr #5
   14394:	andeq	r4, r1, r0, lsr #5
   14398:	andeq	r4, r1, r0, lsr #5
   1439c:	andeq	r4, r1, r0, lsr #5
   143a0:	andeq	r4, r1, r0, lsr #5
   143a4:	andeq	r4, r1, r0, lsr #5
   143a8:	andeq	r4, r1, r0, lsr #5
   143ac:	andeq	r4, r1, r0, lsr #5
   143b0:	andeq	r4, r1, r0, lsr #5
   143b4:	andeq	r4, r1, r0, lsr #5
   143b8:	andeq	r4, r1, r0, lsr #5
   143bc:	andeq	r4, r1, r0, lsr #5
   143c0:	andeq	r4, r1, r0, lsr #5
   143c4:	andeq	r4, r1, r0, lsr #5
   143c8:	andeq	r4, r1, r0, lsr #5
   143cc:	andeq	r4, r1, r0, lsr #5
   143d0:	ldrdeq	r4, [r1], -r8
   143d4:	andeq	r4, r1, r4, asr #11
   143d8:	andeq	r4, r1, r4, asr #11
   143dc:			; <UNDEFINED> instruction: 0x000145b4
   143e0:	andeq	r4, r1, r4, asr #11
   143e4:	andeq	r4, r1, ip, ror #5
   143e8:	andeq	r4, r1, r4, asr #11
   143ec:			; <UNDEFINED> instruction: 0x00013fb4
   143f0:	andeq	r4, r1, r4, asr #11
   143f4:	andeq	r4, r1, r4, asr #11
   143f8:	andeq	r4, r1, r4, asr #11
   143fc:	andeq	r4, r1, ip, ror #5
   14400:	andeq	r4, r1, ip, ror #5
   14404:	andeq	r4, r1, ip, ror #5
   14408:	andeq	r4, r1, ip, ror #5
   1440c:	andeq	r4, r1, ip, ror #5
   14410:	andeq	r4, r1, ip, ror #5
   14414:	andeq	r4, r1, ip, ror #5
   14418:	andeq	r4, r1, ip, ror #5
   1441c:	andeq	r4, r1, ip, ror #5
   14420:	andeq	r4, r1, ip, ror #5
   14424:	andeq	r4, r1, ip, ror #5
   14428:	andeq	r4, r1, ip, ror #5
   1442c:	andeq	r4, r1, ip, ror #5
   14430:	andeq	r4, r1, ip, ror #5
   14434:	andeq	r4, r1, ip, ror #5
   14438:	andeq	r4, r1, ip, ror #5
   1443c:	andeq	r4, r1, r4, asr #11
   14440:	andeq	r4, r1, r4, asr #11
   14444:	andeq	r4, r1, r4, asr #11
   14448:	andeq	r4, r1, r4, asr #11
   1444c:	andeq	r3, r1, r8, lsl #31
   14450:	andeq	r4, r1, r0, lsr #5
   14454:	andeq	r4, r1, ip, ror #5
   14458:	andeq	r4, r1, ip, ror #5
   1445c:	andeq	r4, r1, ip, ror #5
   14460:	andeq	r4, r1, ip, ror #5
   14464:	andeq	r4, r1, ip, ror #5
   14468:	andeq	r4, r1, ip, ror #5
   1446c:	andeq	r4, r1, ip, ror #5
   14470:	andeq	r4, r1, ip, ror #5
   14474:	andeq	r4, r1, ip, ror #5
   14478:	andeq	r4, r1, ip, ror #5
   1447c:	andeq	r4, r1, ip, ror #5
   14480:	andeq	r4, r1, ip, ror #5
   14484:	andeq	r4, r1, ip, ror #5
   14488:	andeq	r4, r1, ip, ror #5
   1448c:	andeq	r4, r1, ip, ror #5
   14490:	andeq	r4, r1, ip, ror #5
   14494:	andeq	r4, r1, ip, ror #5
   14498:	andeq	r4, r1, ip, ror #5
   1449c:	andeq	r4, r1, ip, ror #5
   144a0:	andeq	r4, r1, ip, ror #5
   144a4:	andeq	r4, r1, ip, ror #5
   144a8:	andeq	r4, r1, ip, ror #5
   144ac:	andeq	r4, r1, ip, ror #5
   144b0:	andeq	r4, r1, ip, ror #5
   144b4:	andeq	r4, r1, ip, ror #5
   144b8:	andeq	r4, r1, ip, ror #5
   144bc:	andeq	r4, r1, r4, asr #11
   144c0:	andeq	r3, r1, r0, asr #30
   144c4:	andeq	r4, r1, ip, ror #5
   144c8:	andeq	r4, r1, r4, asr #11
   144cc:	andeq	r4, r1, ip, ror #5
   144d0:	andeq	r4, r1, r4, asr #11
   144d4:	andeq	r4, r1, ip, ror #5
   144d8:	andeq	r4, r1, ip, ror #5
   144dc:	andeq	r4, r1, ip, ror #5
   144e0:	andeq	r4, r1, ip, ror #5
   144e4:	andeq	r4, r1, ip, ror #5
   144e8:	andeq	r4, r1, ip, ror #5
   144ec:	andeq	r4, r1, ip, ror #5
   144f0:	andeq	r4, r1, ip, ror #5
   144f4:	andeq	r4, r1, ip, ror #5
   144f8:	andeq	r4, r1, ip, ror #5
   144fc:	andeq	r4, r1, ip, ror #5
   14500:	andeq	r4, r1, ip, ror #5
   14504:	andeq	r4, r1, ip, ror #5
   14508:	andeq	r4, r1, ip, ror #5
   1450c:	andeq	r4, r1, ip, ror #5
   14510:	andeq	r4, r1, ip, ror #5
   14514:	andeq	r4, r1, ip, ror #5
   14518:	andeq	r4, r1, ip, ror #5
   1451c:	andeq	r4, r1, ip, ror #5
   14520:	andeq	r4, r1, ip, ror #5
   14524:	andeq	r4, r1, ip, ror #5
   14528:	andeq	r4, r1, ip, ror #5
   1452c:	andeq	r4, r1, ip, ror #5
   14530:	andeq	r4, r1, ip, ror #5
   14534:	andeq	r4, r1, ip, ror #5
   14538:	andeq	r4, r1, ip, ror #5
   1453c:	andeq	r3, r1, r8, asr sp
   14540:	andeq	r4, r1, r4, asr #11
   14544:	andeq	r3, r1, r8, asr sp
   14548:			; <UNDEFINED> instruction: 0x000145b4
   1454c:	mov	r3, #110	; 0x6e
   14550:	b	14084 <__assert_fail@plt+0x2cf8>
   14554:	mov	r3, #116	; 0x74
   14558:	b	14084 <__assert_fail@plt+0x2cf8>
   1455c:	sub	r2, fp, #2
   14560:	mov	r3, #98	; 0x62
   14564:	clz	r2, r2
   14568:	lsr	r2, r2, #5
   1456c:	b	13f70 <__assert_fail@plt+0x2be4>
   14570:	sub	r2, fp, #2
   14574:	mov	r3, #97	; 0x61
   14578:	clz	r2, r2
   1457c:	lsr	r2, r2, #5
   14580:	b	13f70 <__assert_fail@plt+0x2be4>
   14584:	ldr	r3, [sp, #28]
   14588:	cmp	r3, #0
   1458c:	bne	1417c <__assert_fail@plt+0x2df0>
   14590:	ldr	r3, [sp, #164]	; 0xa4
   14594:	tst	r3, #1
   14598:	bne	14c0c <__assert_fail@plt+0x3880>
   1459c:	ldr	r6, [sp, #28]
   145a0:	sub	r2, fp, #2
   145a4:	mov	r7, r6
   145a8:	clz	r2, r2
   145ac:	lsr	r2, r2, #5
   145b0:	b	13d98 <__assert_fail@plt+0x2a0c>
   145b4:	sub	r2, fp, #2
   145b8:	clz	r2, r2
   145bc:	lsr	r2, r2, #5
   145c0:	b	13d84 <__assert_fail@plt+0x29f8>
   145c4:	sub	r2, fp, #2
   145c8:	mov	r6, #0
   145cc:	clz	r2, r2
   145d0:	lsr	r2, r2, #5
   145d4:	b	13d8c <__assert_fail@plt+0x2a00>
   145d8:	sub	r2, fp, #2
   145dc:	clz	r2, r2
   145e0:	lsr	r2, r2, #5
   145e4:	b	13d8c <__assert_fail@plt+0x2a00>
   145e8:	sub	r2, fp, #2
   145ec:	mov	r3, #102	; 0x66
   145f0:	clz	r2, r2
   145f4:	lsr	r2, r2, #5
   145f8:	b	13f70 <__assert_fail@plt+0x2be4>
   145fc:	sub	r2, fp, #2
   14600:	mov	r3, #118	; 0x76
   14604:	clz	r2, r2
   14608:	lsr	r2, r2, #5
   1460c:	b	13f70 <__assert_fail@plt+0x2be4>
   14610:	andeq	r7, r2, r8, lsl #30
   14614:	andeq	r7, r1, r4, lsl #22
   14618:	andeq	r7, r1, ip, ror #21
   1461c:	andeq	r7, r1, r0, lsl #22
   14620:	ldr	r3, [sp, #48]	; 0x30
   14624:	ldrb	r5, [r3]
   14628:	cmp	r5, #126	; 0x7e
   1462c:	ldrls	pc, [pc, r5, lsl #2]
   14630:	b	1429c <__assert_fail@plt+0x2f10>
   14634:	andeq	r4, r1, ip, ror r1
   14638:	muleq	r1, ip, r2
   1463c:	muleq	r1, ip, r2
   14640:	muleq	r1, ip, r2
   14644:	muleq	r1, ip, r2
   14648:	muleq	r1, ip, r2
   1464c:	muleq	r1, ip, r2
   14650:	andeq	r4, r1, r4, ror r8
   14654:	andeq	r4, r1, ip, ror #16
   14658:	andeq	r4, r1, r8, asr #2
   1465c:	andeq	r4, r1, r0, lsl r1
   14660:	andeq	r4, r1, r8, ror #2
   14664:	andeq	r4, r1, r0, asr r1
   14668:	andeq	r4, r1, r0, ror #16
   1466c:	muleq	r1, ip, r2
   14670:	muleq	r1, ip, r2
   14674:	muleq	r1, ip, r2
   14678:	muleq	r1, ip, r2
   1467c:	muleq	r1, ip, r2
   14680:	muleq	r1, ip, r2
   14684:	muleq	r1, ip, r2
   14688:	muleq	r1, ip, r2
   1468c:	muleq	r1, ip, r2
   14690:	muleq	r1, ip, r2
   14694:	muleq	r1, ip, r2
   14698:	muleq	r1, ip, r2
   1469c:	muleq	r1, ip, r2
   146a0:	muleq	r1, ip, r2
   146a4:	muleq	r1, ip, r2
   146a8:	muleq	r1, ip, r2
   146ac:	muleq	r1, ip, r2
   146b0:	muleq	r1, ip, r2
   146b4:	andeq	r4, r1, r8, asr r8
   146b8:	andeq	r4, r1, r0, ror r1
   146bc:	andeq	r4, r1, r0, ror r1
   146c0:	andeq	r4, r1, ip, lsr r8
   146c4:	andeq	r4, r1, r0, ror r1
   146c8:	andeq	r4, r1, r0, lsr r8
   146cc:	andeq	r4, r1, r0, ror r1
   146d0:			; <UNDEFINED> instruction: 0x00013fb0
   146d4:	andeq	r4, r1, r0, ror r1
   146d8:	andeq	r4, r1, r0, ror r1
   146dc:	andeq	r4, r1, r0, ror r1
   146e0:	andeq	r4, r1, r0, lsr r8
   146e4:	andeq	r4, r1, r0, lsr r8
   146e8:	andeq	r4, r1, r0, lsr r8
   146ec:	andeq	r4, r1, r0, lsr r8
   146f0:	andeq	r4, r1, r0, lsr r8
   146f4:	andeq	r4, r1, r0, lsr r8
   146f8:	andeq	r4, r1, r0, lsr r8
   146fc:	andeq	r4, r1, r0, lsr r8
   14700:	andeq	r4, r1, r0, lsr r8
   14704:	andeq	r4, r1, r0, lsr r8
   14708:	andeq	r4, r1, r0, lsr r8
   1470c:	andeq	r4, r1, r0, lsr r8
   14710:	andeq	r4, r1, r0, lsr r8
   14714:	andeq	r4, r1, r0, lsr r8
   14718:	andeq	r4, r1, r0, lsr r8
   1471c:	andeq	r4, r1, r0, lsr r8
   14720:	andeq	r4, r1, r0, ror r1
   14724:	andeq	r4, r1, r0, ror r1
   14728:	andeq	r4, r1, r0, ror r1
   1472c:	andeq	r4, r1, r0, ror r1
   14730:	andeq	r3, r1, r4, lsl #31
   14734:	muleq	r1, ip, r2
   14738:	andeq	r4, r1, r0, lsr r8
   1473c:	andeq	r4, r1, r0, lsr r8
   14740:	andeq	r4, r1, r0, lsr r8
   14744:	andeq	r4, r1, r0, lsr r8
   14748:	andeq	r4, r1, r0, lsr r8
   1474c:	andeq	r4, r1, r0, lsr r8
   14750:	andeq	r4, r1, r0, lsr r8
   14754:	andeq	r4, r1, r0, lsr r8
   14758:	andeq	r4, r1, r0, lsr r8
   1475c:	andeq	r4, r1, r0, lsr r8
   14760:	andeq	r4, r1, r0, lsr r8
   14764:	andeq	r4, r1, r0, lsr r8
   14768:	andeq	r4, r1, r0, lsr r8
   1476c:	andeq	r4, r1, r0, lsr r8
   14770:	andeq	r4, r1, r0, lsr r8
   14774:	andeq	r4, r1, r0, lsr r8
   14778:	andeq	r4, r1, r0, lsr r8
   1477c:	andeq	r4, r1, r0, lsr r8
   14780:	andeq	r4, r1, r0, lsr r8
   14784:	andeq	r4, r1, r0, lsr r8
   14788:	andeq	r4, r1, r0, lsr r8
   1478c:	andeq	r4, r1, r0, lsr r8
   14790:	andeq	r4, r1, r0, lsr r8
   14794:	andeq	r4, r1, r0, lsr r8
   14798:	andeq	r4, r1, r0, lsr r8
   1479c:	andeq	r4, r1, r0, lsr r8
   147a0:	andeq	r4, r1, r0, ror r1
   147a4:	andeq	r3, r1, ip, lsr pc
   147a8:	andeq	r4, r1, r0, lsr r8
   147ac:	andeq	r4, r1, r0, ror r1
   147b0:	andeq	r4, r1, r0, lsr r8
   147b4:	andeq	r4, r1, r0, ror r1
   147b8:	andeq	r4, r1, r0, lsr r8
   147bc:	andeq	r4, r1, r0, lsr r8
   147c0:	andeq	r4, r1, r0, lsr r8
   147c4:	andeq	r4, r1, r0, lsr r8
   147c8:	andeq	r4, r1, r0, lsr r8
   147cc:	andeq	r4, r1, r0, lsr r8
   147d0:	andeq	r4, r1, r0, lsr r8
   147d4:	andeq	r4, r1, r0, lsr r8
   147d8:	andeq	r4, r1, r0, lsr r8
   147dc:	andeq	r4, r1, r0, lsr r8
   147e0:	andeq	r4, r1, r0, lsr r8
   147e4:	andeq	r4, r1, r0, lsr r8
   147e8:	andeq	r4, r1, r0, lsr r8
   147ec:	andeq	r4, r1, r0, lsr r8
   147f0:	andeq	r4, r1, r0, lsr r8
   147f4:	andeq	r4, r1, r0, lsr r8
   147f8:	andeq	r4, r1, r0, lsr r8
   147fc:	andeq	r4, r1, r0, lsr r8
   14800:	andeq	r4, r1, r0, lsr r8
   14804:	andeq	r4, r1, r0, lsr r8
   14808:	andeq	r4, r1, r0, lsr r8
   1480c:	andeq	r4, r1, r0, lsr r8
   14810:	andeq	r4, r1, r0, lsr r8
   14814:	andeq	r4, r1, r0, lsr r8
   14818:	andeq	r4, r1, r0, lsr r8
   1481c:	andeq	r4, r1, r0, lsr r8
   14820:	andeq	r3, r1, r4, asr sp
   14824:	andeq	r4, r1, r0, ror r1
   14828:	andeq	r3, r1, r4, asr sp
   1482c:	andeq	r4, r1, ip, lsr r8
   14830:	mov	r6, r7
   14834:	mov	r7, #0
   14838:	b	13db4 <__assert_fail@plt+0x2a28>
   1483c:	cmp	r9, #0
   14840:	mov	r3, #0
   14844:	beq	14284 <__assert_fail@plt+0x2ef8>
   14848:	mov	r6, #0
   1484c:	mov	r7, r3
   14850:	mov	r3, r6
   14854:	b	13db8 <__assert_fail@plt+0x2a2c>
   14858:	mov	r3, #0
   1485c:	b	14264 <__assert_fail@plt+0x2ed8>
   14860:	mov	r7, #0
   14864:	mov	r3, #114	; 0x72
   14868:	b	14084 <__assert_fail@plt+0x2cf8>
   1486c:	mov	r5, #98	; 0x62
   14870:	b	14114 <__assert_fail@plt+0x2d88>
   14874:	mov	r5, #97	; 0x61
   14878:	b	14154 <__assert_fail@plt+0x2dc8>
   1487c:	ldr	r3, [sp, #32]
   14880:	cmp	r3, #0
   14884:	bne	14ccc <__assert_fail@plt+0x3940>
   14888:	add	r9, r9, #1
   1488c:	ldr	r3, [sp, #44]	; 0x2c
   14890:	mov	r6, #0
   14894:	mov	r5, #92	; 0x5c
   14898:	b	1404c <__assert_fail@plt+0x2cc0>
   1489c:	ldr	r3, [sp, #36]	; 0x24
   148a0:	ldrb	r3, [r3, #1]
   148a4:	adds	r3, r3, #0
   148a8:	movne	r3, #1
   148ac:	b	13d70 <__assert_fail@plt+0x29e4>
   148b0:	ldr	r3, [sp, #164]	; 0xa4
   148b4:	ands	r3, r3, #4
   148b8:	beq	148dc <__assert_fail@plt+0x3550>
   148bc:	ldr	r2, [sp, #24]
   148c0:	add	r3, r9, #2
   148c4:	cmp	r3, r2
   148c8:	bcs	148dc <__assert_fail@plt+0x3550>
   148cc:	ldr	r2, [sp, #48]	; 0x30
   148d0:	ldrb	r5, [r2, #1]
   148d4:	cmp	r5, #63	; 0x3f
   148d8:	beq	14d40 <__assert_fail@plt+0x39b4>
   148dc:	mov	r2, #0
   148e0:	mov	r6, r2
   148e4:	mov	r5, #63	; 0x3f
   148e8:	b	13d98 <__assert_fail@plt+0x2a0c>
   148ec:	ldr	r3, [sp, #32]
   148f0:	cmp	r3, #0
   148f4:	bne	14ccc <__assert_fail@plt+0x3940>
   148f8:	mov	r6, r3
   148fc:	mov	r5, #63	; 0x3f
   14900:	b	13de0 <__assert_fail@plt+0x2a54>
   14904:	ldr	r3, [sp, #24]
   14908:	cmn	r3, #1
   1490c:	mov	r3, #0
   14910:	str	r3, [sp, #108]	; 0x6c
   14914:	str	r3, [sp, #112]	; 0x70
   14918:	bne	14928 <__assert_fail@plt+0x359c>
   1491c:	ldr	r0, [sp, #36]	; 0x24
   14920:	bl	11260 <strlen@plt>
   14924:	str	r0, [sp, #24]
   14928:	mov	r3, #0
   1492c:	str	sl, [sp, #88]	; 0x58
   14930:	ldr	sl, [sp, #36]	; 0x24
   14934:	str	r5, [sp, #92]	; 0x5c
   14938:	mov	r5, r3
   1493c:	str	r7, [sp, #96]	; 0x60
   14940:	str	r4, [sp, #100]	; 0x64
   14944:	str	r8, [sp, #84]	; 0x54
   14948:	ldr	r3, [sp, #24]
   1494c:	add	r4, r9, r5
   14950:	add	r7, sl, r4
   14954:	sub	r2, r3, r4
   14958:	mov	r1, r7
   1495c:	add	r3, sp, #108	; 0x6c
   14960:	add	r0, sp, #104	; 0x68
   14964:	bl	1655c <__assert_fail@plt+0x51d0>
   14968:	subs	r8, r0, #0
   1496c:	beq	149bc <__assert_fail@plt+0x3630>
   14970:	cmn	r8, #1
   14974:	beq	14d1c <__assert_fail@plt+0x3990>
   14978:	cmn	r8, #2
   1497c:	beq	14e3c <__assert_fail@plt+0x3ab0>
   14980:	ldr	r3, [sp, #32]
   14984:	cmp	fp, #2
   14988:	movne	r3, #0
   1498c:	andeq	r3, r3, #1
   14990:	cmp	r3, #0
   14994:	bne	14b1c <__assert_fail@plt+0x3790>
   14998:	ldr	r0, [sp, #104]	; 0x68
   1499c:	bl	1117c <iswprint@plt>
   149a0:	add	r5, r5, r8
   149a4:	cmp	r0, #0
   149a8:	add	r0, sp, #108	; 0x6c
   149ac:	moveq	r6, #0
   149b0:	bl	1111c <mbsinit@plt>
   149b4:	cmp	r0, #0
   149b8:	beq	14948 <__assert_fail@plt+0x35bc>
   149bc:	ldr	r3, [sp, #28]
   149c0:	mov	ip, r5
   149c4:	eor	r2, r6, #1
   149c8:	ldr	r5, [sp, #92]	; 0x5c
   149cc:	ldr	r7, [sp, #96]	; 0x60
   149d0:	ldr	r4, [sp, #100]	; 0x64
   149d4:	ldr	r8, [sp, #84]	; 0x54
   149d8:	ldr	sl, [sp, #88]	; 0x58
   149dc:	and	r2, r2, r3
   149e0:	cmp	ip, #1
   149e4:	bls	142e4 <__assert_fail@plt+0x2f58>
   149e8:	add	r1, ip, r9
   149ec:	ldr	lr, [sp, #48]	; 0x30
   149f0:	mov	r0, #0
   149f4:	str	r6, [sp, #48]	; 0x30
   149f8:	mov	ip, #39	; 0x27
   149fc:	ldr	r6, [sp, #44]	; 0x2c
   14a00:	b	14ab8 <__assert_fail@plt+0x372c>
   14a04:	ldr	r0, [sp, #32]
   14a08:	sub	r3, fp, #2
   14a0c:	cmp	r0, #0
   14a10:	clz	r3, r3
   14a14:	lsr	r3, r3, #5
   14a18:	bne	14c20 <__assert_fail@plt+0x3894>
   14a1c:	eor	r0, r6, #1
   14a20:	ands	r3, r3, r0
   14a24:	beq	14a54 <__assert_fail@plt+0x36c8>
   14a28:	add	r0, r4, #1
   14a2c:	cmp	sl, r4
   14a30:	strbhi	ip, [r8, r4]
   14a34:	cmp	sl, r0
   14a38:	movhi	r6, #36	; 0x24
   14a3c:	strbhi	r6, [r8, r0]
   14a40:	add	r0, r4, #2
   14a44:	mov	r6, r3
   14a48:	add	r4, r4, #3
   14a4c:	cmp	sl, r0
   14a50:	strbhi	ip, [r8, r0]
   14a54:	cmp	sl, r4
   14a58:	movhi	r3, #92	; 0x5c
   14a5c:	strbhi	r3, [r8, r4]
   14a60:	add	r3, r4, #1
   14a64:	cmp	sl, r3
   14a68:	lsrhi	r0, r5, #6
   14a6c:	addhi	r0, r0, #48	; 0x30
   14a70:	strbhi	r0, [r8, r3]
   14a74:	add	r0, r4, #2
   14a78:	cmp	sl, r0
   14a7c:	lsrhi	r3, r5, #3
   14a80:	andhi	r3, r3, #7
   14a84:	addhi	r3, r3, #48	; 0x30
   14a88:	add	r9, r9, #1
   14a8c:	strbhi	r3, [r8, r0]
   14a90:	and	r5, r5, #7
   14a94:	cmp	r9, r1
   14a98:	add	r5, r5, #48	; 0x30
   14a9c:	add	r4, r4, #3
   14aa0:	bcs	14c40 <__assert_fail@plt+0x38b4>
   14aa4:	mov	r0, r2
   14aa8:	cmp	sl, r4
   14aac:	strbhi	r5, [r8, r4]
   14ab0:	ldrb	r5, [lr, #1]!
   14ab4:	add	r4, r4, #1
   14ab8:	cmp	r2, #0
   14abc:	bne	14a04 <__assert_fail@plt+0x3678>
   14ac0:	eor	r3, r0, #1
   14ac4:	and	r3, r3, r6
   14ac8:	cmp	r7, #0
   14acc:	uxtb	r3, r3
   14ad0:	beq	14ae4 <__assert_fail@plt+0x3758>
   14ad4:	cmp	sl, r4
   14ad8:	movhi	r7, #92	; 0x5c
   14adc:	strbhi	r7, [r8, r4]
   14ae0:	add	r4, r4, #1
   14ae4:	add	r9, r9, #1
   14ae8:	cmp	r9, r1
   14aec:	bcs	14c34 <__assert_fail@plt+0x38a8>
   14af0:	cmp	r3, #0
   14af4:	beq	14c60 <__assert_fail@plt+0x38d4>
   14af8:	cmp	sl, r4
   14afc:	add	r3, r4, #1
   14b00:	strbhi	ip, [r8, r4]
   14b04:	mov	r7, #0
   14b08:	cmp	sl, r3
   14b0c:	strbhi	ip, [r8, r3]
   14b10:	add	r4, r4, #2
   14b14:	mov	r6, r7
   14b18:	b	14aa8 <__assert_fail@plt+0x371c>
   14b1c:	cmp	r8, #1
   14b20:	beq	14998 <__assert_fail@plt+0x360c>
   14b24:	add	r1, r4, #1
   14b28:	add	r3, sl, r8
   14b2c:	add	r1, sl, r1
   14b30:	add	r4, r3, r4
   14b34:	ldrb	r3, [r1], #1
   14b38:	sub	r3, r3, #91	; 0x5b
   14b3c:	cmp	r3, #33	; 0x21
   14b40:	ldrls	pc, [pc, r3, lsl #2]
   14b44:	b	14bd0 <__assert_fail@plt+0x3844>
   14b48:	ldrdeq	r4, [r1], -ip
   14b4c:	ldrdeq	r4, [r1], -ip
   14b50:	ldrdeq	r4, [r1], -r0
   14b54:	ldrdeq	r4, [r1], -ip
   14b58:	ldrdeq	r4, [r1], -r0
   14b5c:	ldrdeq	r4, [r1], -ip
   14b60:	ldrdeq	r4, [r1], -r0
   14b64:	ldrdeq	r4, [r1], -r0
   14b68:	ldrdeq	r4, [r1], -r0
   14b6c:	ldrdeq	r4, [r1], -r0
   14b70:	ldrdeq	r4, [r1], -r0
   14b74:	ldrdeq	r4, [r1], -r0
   14b78:	ldrdeq	r4, [r1], -r0
   14b7c:	ldrdeq	r4, [r1], -r0
   14b80:	ldrdeq	r4, [r1], -r0
   14b84:	ldrdeq	r4, [r1], -r0
   14b88:	ldrdeq	r4, [r1], -r0
   14b8c:	ldrdeq	r4, [r1], -r0
   14b90:	ldrdeq	r4, [r1], -r0
   14b94:	ldrdeq	r4, [r1], -r0
   14b98:	ldrdeq	r4, [r1], -r0
   14b9c:	ldrdeq	r4, [r1], -r0
   14ba0:	ldrdeq	r4, [r1], -r0
   14ba4:	ldrdeq	r4, [r1], -r0
   14ba8:	ldrdeq	r4, [r1], -r0
   14bac:	ldrdeq	r4, [r1], -r0
   14bb0:	ldrdeq	r4, [r1], -r0
   14bb4:	ldrdeq	r4, [r1], -r0
   14bb8:	ldrdeq	r4, [r1], -r0
   14bbc:	ldrdeq	r4, [r1], -r0
   14bc0:	ldrdeq	r4, [r1], -r0
   14bc4:	ldrdeq	r4, [r1], -r0
   14bc8:	ldrdeq	r4, [r1], -r0
   14bcc:	ldrdeq	r4, [r1], -ip
   14bd0:	cmp	r4, r1
   14bd4:	bne	14b34 <__assert_fail@plt+0x37a8>
   14bd8:	b	14998 <__assert_fail@plt+0x360c>
   14bdc:	ldr	fp, [sp, #84]	; 0x54
   14be0:	ldr	sl, [sp, #88]	; 0x58
   14be4:	mov	r8, #2
   14be8:	b	140a4 <__assert_fail@plt+0x2d18>
   14bec:	cmp	sl, r4
   14bf0:	movls	r1, r4
   14bf4:	bls	141f4 <__assert_fail@plt+0x2e68>
   14bf8:	ldr	r3, [sp, #44]	; 0x2c
   14bfc:	b	141e4 <__assert_fail@plt+0x2e58>
   14c00:	str	sl, [sp, #72]	; 0x48
   14c04:	ldr	sl, [sp, #32]
   14c08:	b	1401c <__assert_fail@plt+0x2c90>
   14c0c:	add	r9, r9, #1
   14c10:	b	13910 <__assert_fail@plt+0x2584>
   14c14:	ldr	r2, [sp, #28]
   14c18:	mov	r6, #0
   14c1c:	b	149e8 <__assert_fail@plt+0x365c>
   14c20:	str	fp, [sp, #160]	; 0xa0
   14c24:	str	r3, [sp, #28]
   14c28:	mov	fp, r8
   14c2c:	ldr	r8, [sp, #160]	; 0xa0
   14c30:	b	140a4 <__assert_fail@plt+0x2d18>
   14c34:	str	r6, [sp, #44]	; 0x2c
   14c38:	ldr	r6, [sp, #48]	; 0x30
   14c3c:	b	1404c <__assert_fail@plt+0x2cc0>
   14c40:	str	r6, [sp, #44]	; 0x2c
   14c44:	ldr	r6, [sp, #48]	; 0x30
   14c48:	b	13e58 <__assert_fail@plt+0x2acc>
   14c4c:	add	r4, r4, #4
   14c50:	str	r3, [sp, #44]	; 0x2c
   14c54:	mov	r6, #0
   14c58:	mov	r5, #48	; 0x30
   14c5c:	b	13de0 <__assert_fail@plt+0x2a54>
   14c60:	mov	r7, r3
   14c64:	b	14aa8 <__assert_fail@plt+0x371c>
   14c68:	ldr	r3, [pc, #-1624]	; 14618 <__assert_fail@plt+0x328c>
   14c6c:	mov	r4, #1
   14c70:	str	r4, [sp, #40]	; 0x28
   14c74:	str	r4, [sp, #28]
   14c78:	str	r4, [sp, #52]	; 0x34
   14c7c:	str	sl, [sp, #72]	; 0x48
   14c80:	str	sl, [sp, #68]	; 0x44
   14c84:	str	sl, [sp, #44]	; 0x2c
   14c88:	str	sl, [sp, #32]
   14c8c:	str	r3, [sp, #60]	; 0x3c
   14c90:	b	13900 <__assert_fail@plt+0x2574>
   14c94:	mov	r3, r6
   14c98:	mov	r5, #48	; 0x30
   14c9c:	mov	r6, #0
   14ca0:	b	13de0 <__assert_fail@plt+0x2a54>
   14ca4:	cmp	sl, r4
   14ca8:	movhi	r3, #48	; 0x30
   14cac:	strbhi	r3, [r8, r4]
   14cb0:	add	r3, r1, #2
   14cb4:	cmp	sl, r3
   14cb8:	movhi	r0, #48	; 0x30
   14cbc:	strbhi	r0, [r8, r3]
   14cc0:	add	r4, r1, #3
   14cc4:	mov	r5, #48	; 0x30
   14cc8:	b	14228 <__assert_fail@plt+0x2e9c>
   14ccc:	str	fp, [sp, #160]	; 0xa0
   14cd0:	mov	fp, r8
   14cd4:	ldr	r8, [sp, #160]	; 0xa0
   14cd8:	b	140a4 <__assert_fail@plt+0x2d18>
   14cdc:	ldr	r2, [sp, #80]	; 0x50
   14ce0:	ldrb	r3, [r2]
   14ce4:	cmp	r3, #0
   14ce8:	beq	138d0 <__assert_fail@plt+0x2544>
   14cec:	cmp	sl, r4
   14cf0:	strbhi	r3, [fp, r4]
   14cf4:	ldrb	r3, [r2, #1]!
   14cf8:	add	r4, r4, #1
   14cfc:	cmp	r3, #0
   14d00:	bne	14cec <__assert_fail@plt+0x3960>
   14d04:	b	138d0 <__assert_fail@plt+0x2544>
   14d08:	str	fp, [sp, #160]	; 0xa0
   14d0c:	mov	r3, #0
   14d10:	mov	fp, r8
   14d14:	ldr	r8, [sp, #160]	; 0xa0
   14d18:	b	14138 <__assert_fail@plt+0x2dac>
   14d1c:	mov	ip, r5
   14d20:	ldr	r7, [sp, #96]	; 0x60
   14d24:	ldr	r5, [sp, #92]	; 0x5c
   14d28:	ldr	r4, [sp, #100]	; 0x64
   14d2c:	ldr	r8, [sp, #84]	; 0x54
   14d30:	ldr	sl, [sp, #88]	; 0x58
   14d34:	ldr	r2, [sp, #28]
   14d38:	mov	r6, #0
   14d3c:	b	149e0 <__assert_fail@plt+0x3654>
   14d40:	ldr	r2, [sp, #36]	; 0x24
   14d44:	ldrb	r1, [r2, r3]
   14d48:	sub	r2, r1, #33	; 0x21
   14d4c:	cmp	r2, #29
   14d50:	ldrls	pc, [pc, r2, lsl #2]
   14d54:	b	14e30 <__assert_fail@plt+0x3aa4>
   14d58:	ldrdeq	r4, [r1], -r0
   14d5c:	andeq	r4, r1, r0, lsr lr
   14d60:	andeq	r4, r1, r0, lsr lr
   14d64:	andeq	r4, r1, r0, lsr lr
   14d68:	andeq	r4, r1, r0, lsr lr
   14d6c:	andeq	r4, r1, r0, lsr lr
   14d70:	ldrdeq	r4, [r1], -r0
   14d74:	ldrdeq	r4, [r1], -r0
   14d78:	ldrdeq	r4, [r1], -r0
   14d7c:	andeq	r4, r1, r0, lsr lr
   14d80:	andeq	r4, r1, r0, lsr lr
   14d84:	andeq	r4, r1, r0, lsr lr
   14d88:	ldrdeq	r4, [r1], -r0
   14d8c:	andeq	r4, r1, r0, lsr lr
   14d90:	ldrdeq	r4, [r1], -r0
   14d94:	andeq	r4, r1, r0, lsr lr
   14d98:	andeq	r4, r1, r0, lsr lr
   14d9c:	andeq	r4, r1, r0, lsr lr
   14da0:	andeq	r4, r1, r0, lsr lr
   14da4:	andeq	r4, r1, r0, lsr lr
   14da8:	andeq	r4, r1, r0, lsr lr
   14dac:	andeq	r4, r1, r0, lsr lr
   14db0:	andeq	r4, r1, r0, lsr lr
   14db4:	andeq	r4, r1, r0, lsr lr
   14db8:	andeq	r4, r1, r0, lsr lr
   14dbc:	andeq	r4, r1, r0, lsr lr
   14dc0:	andeq	r4, r1, r0, lsr lr
   14dc4:	ldrdeq	r4, [r1], -r0
   14dc8:	ldrdeq	r4, [r1], -r0
   14dcc:	ldrdeq	r4, [r1], -r0
   14dd0:	ldr	r2, [sp, #32]
   14dd4:	cmp	r2, #0
   14dd8:	bne	14edc <__assert_fail@plt+0x3b50>
   14ddc:	cmp	sl, r4
   14de0:	movhi	r2, #63	; 0x3f
   14de4:	strbhi	r2, [r8, r4]
   14de8:	add	r2, r4, #1
   14dec:	cmp	sl, r2
   14df0:	movhi	r0, #34	; 0x22
   14df4:	strbhi	r0, [r8, r2]
   14df8:	add	r2, r4, #2
   14dfc:	cmp	sl, r2
   14e00:	movhi	r0, #34	; 0x22
   14e04:	strbhi	r0, [r8, r2]
   14e08:	add	r2, r4, #3
   14e0c:	cmp	sl, r2
   14e10:	movhi	r0, #63	; 0x3f
   14e14:	strbhi	r0, [r8, r2]
   14e18:	mov	r2, #0
   14e1c:	add	r4, r4, #4
   14e20:	mov	r5, r1
   14e24:	mov	r9, r3
   14e28:	mov	r6, r2
   14e2c:	b	14228 <__assert_fail@plt+0x2e9c>
   14e30:	mov	r2, #0
   14e34:	mov	r6, r2
   14e38:	b	13d98 <__assert_fail@plt+0x2a0c>
   14e3c:	ldr	r0, [sp, #24]
   14e40:	mov	r1, r4
   14e44:	cmp	r1, r0
   14e48:	mov	r2, r7
   14e4c:	mov	r3, r5
   14e50:	mov	ip, r5
   14e54:	ldr	r7, [sp, #96]	; 0x60
   14e58:	ldr	r5, [sp, #92]	; 0x5c
   14e5c:	ldr	r4, [sp, #100]	; 0x64
   14e60:	ldr	r8, [sp, #84]	; 0x54
   14e64:	ldr	sl, [sp, #88]	; 0x58
   14e68:	bcs	14e9c <__assert_fail@plt+0x3b10>
   14e6c:	ldrb	r6, [r2]
   14e70:	cmp	r6, #0
   14e74:	bne	14e88 <__assert_fail@plt+0x3afc>
   14e78:	b	14fb8 <__assert_fail@plt+0x3c2c>
   14e7c:	ldrb	r6, [r2, #1]!
   14e80:	cmp	r6, #0
   14e84:	beq	14f40 <__assert_fail@plt+0x3bb4>
   14e88:	add	r3, r3, #1
   14e8c:	add	r1, r9, r3
   14e90:	cmp	r1, r0
   14e94:	bcc	14e7c <__assert_fail@plt+0x3af0>
   14e98:	mov	ip, r3
   14e9c:	ldr	r2, [sp, #28]
   14ea0:	mov	r6, #0
   14ea4:	b	149e0 <__assert_fail@plt+0x3654>
   14ea8:	mov	r3, #1
   14eac:	str	r3, [sp, #40]	; 0x28
   14eb0:	str	r3, [sp, #32]
   14eb4:	str	r3, [sp, #28]
   14eb8:	str	r3, [sp, #52]	; 0x34
   14ebc:	ldr	r3, [pc, #-2220]	; 14618 <__assert_fail@plt+0x328c>
   14ec0:	mov	r2, #0
   14ec4:	str	r2, [sp, #68]	; 0x44
   14ec8:	str	r2, [sp, #44]	; 0x2c
   14ecc:	str	r2, [sp, #72]	; 0x48
   14ed0:	mov	r4, r2
   14ed4:	str	r3, [sp, #60]	; 0x3c
   14ed8:	b	13900 <__assert_fail@plt+0x2574>
   14edc:	str	fp, [sp, #160]	; 0xa0
   14ee0:	mov	fp, r8
   14ee4:	ldr	r8, [sp, #160]	; 0xa0
   14ee8:	b	140b0 <__assert_fail@plt+0x2d24>
   14eec:	mov	r2, r3
   14ef0:	ldr	r3, [sp, #60]	; 0x3c
   14ef4:	cmp	r3, #0
   14ef8:	moveq	r2, #0
   14efc:	andne	r2, r2, #1
   14f00:	cmp	r2, #0
   14f04:	beq	14f30 <__assert_fail@plt+0x3ba4>
   14f08:	mov	r2, r3
   14f0c:	ldrb	r3, [r3]
   14f10:	cmp	r3, #0
   14f14:	beq	14f30 <__assert_fail@plt+0x3ba4>
   14f18:	cmp	sl, r4
   14f1c:	strbhi	r3, [fp, r4]
   14f20:	ldrb	r3, [r2, #1]!
   14f24:	add	r4, r4, #1
   14f28:	cmp	r3, #0
   14f2c:	bne	14f18 <__assert_fail@plt+0x3b8c>
   14f30:	cmp	sl, r4
   14f34:	movhi	r3, #0
   14f38:	strbhi	r3, [fp, r4]
   14f3c:	b	140f0 <__assert_fail@plt+0x2d64>
   14f40:	mov	ip, r3
   14f44:	ldr	r2, [sp, #28]
   14f48:	b	149e0 <__assert_fail@plt+0x3654>
   14f4c:	str	fp, [sp, #160]	; 0xa0
   14f50:	mov	fp, r8
   14f54:	ldr	r8, [sp, #160]	; 0xa0
   14f58:	sub	r3, r8, #2
   14f5c:	clz	r3, r3
   14f60:	lsr	r3, r3, #5
   14f64:	str	r3, [sp, #28]
   14f68:	b	140a4 <__assert_fail@plt+0x2d18>
   14f6c:	ldr	r3, [sp, #76]	; 0x4c
   14f70:	mov	ip, #5
   14f74:	str	r3, [sp, #16]
   14f78:	ldr	r3, [sp, #80]	; 0x50
   14f7c:	ldr	r2, [sp, #36]	; 0x24
   14f80:	str	r3, [sp, #12]
   14f84:	ldr	r3, [sp, #56]	; 0x38
   14f88:	ldr	r1, [sp, #72]	; 0x48
   14f8c:	str	r3, [sp, #8]
   14f90:	ldr	r3, [sp, #164]	; 0xa4
   14f94:	mov	r0, fp
   14f98:	str	r3, [sp, #4]
   14f9c:	str	ip, [sp]
   14fa0:	ldr	r3, [sp, #24]
   14fa4:	bl	13808 <__assert_fail@plt+0x247c>
   14fa8:	mov	r4, r0
   14fac:	b	140f0 <__assert_fail@plt+0x2d64>
   14fb0:	mov	r8, #2
   14fb4:	b	140a4 <__assert_fail@plt+0x2d18>
   14fb8:	ldr	r2, [sp, #28]
   14fbc:	b	149e0 <__assert_fail@plt+0x3654>
   14fc0:	mov	r3, #0
   14fc4:	str	r3, [sp, #68]	; 0x44
   14fc8:	str	r3, [sp, #44]	; 0x2c
   14fcc:	str	r3, [sp, #72]	; 0x48
   14fd0:	str	r3, [sp, #28]
   14fd4:	mov	r4, r3
   14fd8:	ldr	r3, [pc, #-2500]	; 1461c <__assert_fail@plt+0x3290>
   14fdc:	mov	r2, #1
   14fe0:	str	r2, [sp, #40]	; 0x28
   14fe4:	str	r2, [sp, #32]
   14fe8:	str	r2, [sp, #52]	; 0x34
   14fec:	str	r3, [sp, #60]	; 0x3c
   14ff0:	b	13900 <__assert_fail@plt+0x2574>
   14ff4:	bl	11140 <__stack_chk_fail@plt>
   14ff8:	mov	r5, r3
   14ffc:	mov	r6, #0
   15000:	b	13df4 <__assert_fail@plt+0x2a68>
   15004:	mov	r3, #0
   15008:	mov	r2, #1
   1500c:	str	r3, [sp, #44]	; 0x2c
   15010:	str	r3, [sp, #72]	; 0x48
   15014:	str	r2, [sp, #40]	; 0x28
   15018:	b	13f10 <__assert_fail@plt+0x2b84>
   1501c:	bl	11374 <abort@plt>
   15020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15024:	sub	sp, sp, #44	; 0x2c
   15028:	mov	r6, r0
   1502c:	mov	r4, r3
   15030:	mov	sl, r1
   15034:	mov	fp, r2
   15038:	bl	11284 <__errno_location@plt>
   1503c:	ldr	r7, [pc, #364]	; 151b0 <__assert_fail@plt+0x3e24>
   15040:	cmp	r6, #0
   15044:	ldr	r5, [r7]
   15048:	ldr	r3, [r0]
   1504c:	str	r3, [sp, #24]
   15050:	blt	151ac <__assert_fail@plt+0x3e20>
   15054:	ldr	r3, [r7, #4]
   15058:	mov	r8, r0
   1505c:	cmp	r3, r6
   15060:	bgt	150ac <__assert_fail@plt+0x3d20>
   15064:	cmn	r6, #-268435454	; 0xf0000002
   15068:	bgt	151a8 <__assert_fail@plt+0x3e1c>
   1506c:	add	r9, r6, #1
   15070:	add	r3, r7, #8
   15074:	cmp	r5, r3
   15078:	lsl	r1, r9, #3
   1507c:	beq	15188 <__assert_fail@plt+0x3dfc>
   15080:	mov	r0, r5
   15084:	bl	16190 <__assert_fail@plt+0x4e04>
   15088:	mov	r5, r0
   1508c:	str	r0, [r7]
   15090:	ldr	r0, [r7, #4]
   15094:	mov	r1, #0
   15098:	sub	r2, r9, r0
   1509c:	add	r0, r5, r0, lsl #3
   150a0:	lsl	r2, r2, #3
   150a4:	bl	112a8 <memset@plt>
   150a8:	str	r9, [r7, #4]
   150ac:	add	r3, r5, r6, lsl #3
   150b0:	ldr	r1, [r4, #4]
   150b4:	ldr	r7, [r3, #4]
   150b8:	ldr	r9, [r5, r6, lsl #3]
   150bc:	ldr	r2, [r4, #40]	; 0x28
   150c0:	ldr	ip, [r4, #44]	; 0x2c
   150c4:	str	r3, [sp, #28]
   150c8:	ldr	r3, [r4]
   150cc:	orr	r1, r1, #1
   150d0:	add	lr, r4, #8
   150d4:	str	r1, [sp, #36]	; 0x24
   150d8:	str	r1, [sp, #4]
   150dc:	str	r2, [sp, #12]
   150e0:	str	r3, [sp]
   150e4:	mov	r0, r7
   150e8:	mov	r1, r9
   150ec:	str	ip, [sp, #16]
   150f0:	str	lr, [sp, #8]
   150f4:	mov	r3, fp
   150f8:	mov	r2, sl
   150fc:	str	lr, [sp, #32]
   15100:	bl	13808 <__assert_fail@plt+0x247c>
   15104:	cmp	r9, r0
   15108:	bhi	15174 <__assert_fail@plt+0x3de8>
   1510c:	ldr	r3, [pc, #160]	; 151b4 <__assert_fail@plt+0x3e28>
   15110:	add	r9, r0, #1
   15114:	cmp	r7, r3
   15118:	str	r9, [r5, r6, lsl #3]
   1511c:	beq	15128 <__assert_fail@plt+0x3d9c>
   15120:	mov	r0, r7
   15124:	bl	110ec <free@plt>
   15128:	mov	r0, r9
   1512c:	bl	16134 <__assert_fail@plt+0x4da8>
   15130:	ldr	lr, [sp, #28]
   15134:	ldr	ip, [r4, #44]	; 0x2c
   15138:	ldr	r5, [r4, #40]	; 0x28
   1513c:	mov	r3, fp
   15140:	mov	r2, sl
   15144:	mov	r1, r9
   15148:	str	r0, [lr, #4]
   1514c:	ldr	lr, [r4]
   15150:	ldr	r4, [sp, #32]
   15154:	str	ip, [sp, #16]
   15158:	str	r4, [sp, #8]
   1515c:	ldr	r4, [sp, #36]	; 0x24
   15160:	str	r5, [sp, #12]
   15164:	str	r4, [sp, #4]
   15168:	str	lr, [sp]
   1516c:	mov	r7, r0
   15170:	bl	13808 <__assert_fail@plt+0x247c>
   15174:	ldr	r3, [sp, #24]
   15178:	mov	r0, r7
   1517c:	str	r3, [r8]
   15180:	add	sp, sp, #44	; 0x2c
   15184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15188:	mov	r0, #0
   1518c:	bl	16190 <__assert_fail@plt+0x4e04>
   15190:	ldr	r3, [pc, #32]	; 151b8 <__assert_fail@plt+0x3e2c>
   15194:	mov	r5, r0
   15198:	ldm	r3, {r0, r1}
   1519c:	str	r5, [r7]
   151a0:	stm	r5, {r0, r1}
   151a4:	b	15090 <__assert_fail@plt+0x3d04>
   151a8:	bl	1637c <__assert_fail@plt+0x4ff0>
   151ac:	bl	11374 <abort@plt>
   151b0:	andeq	r8, r2, r8, lsr #2
   151b4:	andeq	r8, r2, r4, ror #3
   151b8:	andeq	r8, r2, r0, lsr r1
   151bc:	push	{r4, r5, r6, lr}
   151c0:	mov	r5, r0
   151c4:	bl	11284 <__errno_location@plt>
   151c8:	cmp	r5, #0
   151cc:	mov	r1, #48	; 0x30
   151d0:	mov	r4, r0
   151d4:	ldr	r0, [pc, #16]	; 151ec <__assert_fail@plt+0x3e60>
   151d8:	ldr	r6, [r4]
   151dc:	movne	r0, r5
   151e0:	bl	1633c <__assert_fail@plt+0x4fb0>
   151e4:	str	r6, [r4]
   151e8:	pop	{r4, r5, r6, pc}
   151ec:	andeq	r8, r2, r4, ror #5
   151f0:	ldr	r3, [pc, #12]	; 15204 <__assert_fail@plt+0x3e78>
   151f4:	cmp	r0, #0
   151f8:	moveq	r0, r3
   151fc:	ldr	r0, [r0]
   15200:	bx	lr
   15204:	andeq	r8, r2, r4, ror #5
   15208:	ldr	r3, [pc, #12]	; 1521c <__assert_fail@plt+0x3e90>
   1520c:	cmp	r0, #0
   15210:	moveq	r0, r3
   15214:	str	r1, [r0]
   15218:	bx	lr
   1521c:	andeq	r8, r2, r4, ror #5
   15220:	ldr	r3, [pc, #52]	; 1525c <__assert_fail@plt+0x3ed0>
   15224:	cmp	r0, #0
   15228:	moveq	r0, r3
   1522c:	add	r3, r0, #8
   15230:	push	{lr}		; (str lr, [sp, #-4]!)
   15234:	lsr	lr, r1, #5
   15238:	and	r1, r1, #31
   1523c:	ldr	ip, [r3, lr, lsl #2]
   15240:	lsr	r0, ip, r1
   15244:	eor	r2, r2, r0
   15248:	and	r2, r2, #1
   1524c:	and	r0, r0, #1
   15250:	eor	r1, ip, r2, lsl r1
   15254:	str	r1, [r3, lr, lsl #2]
   15258:	pop	{pc}		; (ldr pc, [sp], #4)
   1525c:	andeq	r8, r2, r4, ror #5
   15260:	ldr	r3, [pc, #16]	; 15278 <__assert_fail@plt+0x3eec>
   15264:	cmp	r0, #0
   15268:	movne	r3, r0
   1526c:	ldr	r0, [r3, #4]
   15270:	str	r1, [r3, #4]
   15274:	bx	lr
   15278:	andeq	r8, r2, r4, ror #5
   1527c:	ldr	r3, [pc, #44]	; 152b0 <__assert_fail@plt+0x3f24>
   15280:	cmp	r0, #0
   15284:	moveq	r0, r3
   15288:	mov	ip, #10
   1528c:	cmp	r2, #0
   15290:	cmpne	r1, #0
   15294:	str	ip, [r0]
   15298:	beq	152a8 <__assert_fail@plt+0x3f1c>
   1529c:	str	r1, [r0, #40]	; 0x28
   152a0:	str	r2, [r0, #44]	; 0x2c
   152a4:	bx	lr
   152a8:	push	{r4, lr}
   152ac:	bl	11374 <abort@plt>
   152b0:	andeq	r8, r2, r4, ror #5
   152b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   152b8:	sub	sp, sp, #24
   152bc:	ldr	ip, [pc, #108]	; 15330 <__assert_fail@plt+0x3fa4>
   152c0:	ldr	r4, [sp, #56]	; 0x38
   152c4:	mov	r9, r2
   152c8:	cmp	r4, #0
   152cc:	moveq	r4, ip
   152d0:	mov	sl, r3
   152d4:	mov	r7, r0
   152d8:	mov	r8, r1
   152dc:	bl	11284 <__errno_location@plt>
   152e0:	ldr	r3, [r4, #44]	; 0x2c
   152e4:	mov	r1, r8
   152e8:	ldr	r6, [r0]
   152ec:	str	r3, [sp, #16]
   152f0:	ldr	r2, [r4, #40]	; 0x28
   152f4:	add	r3, r4, #8
   152f8:	str	r3, [sp, #8]
   152fc:	str	r2, [sp, #12]
   15300:	ldr	r2, [r4, #4]
   15304:	mov	r5, r0
   15308:	str	r2, [sp, #4]
   1530c:	ldr	ip, [r4]
   15310:	mov	r3, sl
   15314:	mov	r2, r9
   15318:	mov	r0, r7
   1531c:	str	ip, [sp]
   15320:	bl	13808 <__assert_fail@plt+0x247c>
   15324:	str	r6, [r5]
   15328:	add	sp, sp, #24
   1532c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15330:	andeq	r8, r2, r4, ror #5
   15334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15338:	cmp	r3, #0
   1533c:	sub	sp, sp, #44	; 0x2c
   15340:	ldr	r4, [pc, #192]	; 15408 <__assert_fail@plt+0x407c>
   15344:	mov	r6, r2
   15348:	movne	r4, r3
   1534c:	mov	r9, r1
   15350:	mov	r8, r0
   15354:	bl	11284 <__errno_location@plt>
   15358:	ldr	r3, [r4, #44]	; 0x2c
   1535c:	ldr	r5, [r4, #4]
   15360:	add	sl, r4, #8
   15364:	cmp	r6, #0
   15368:	orreq	r5, r5, #1
   1536c:	mov	r1, #0
   15370:	ldr	r2, [r0]
   15374:	str	r3, [sp, #16]
   15378:	ldr	r3, [r4, #40]	; 0x28
   1537c:	stmib	sp, {r5, sl}
   15380:	str	r3, [sp, #12]
   15384:	ldr	r3, [r4]
   15388:	mov	r7, r0
   1538c:	str	r2, [sp, #28]
   15390:	str	r3, [sp]
   15394:	mov	r2, r8
   15398:	mov	r3, r9
   1539c:	mov	r0, r1
   153a0:	bl	13808 <__assert_fail@plt+0x247c>
   153a4:	add	r1, r0, #1
   153a8:	mov	fp, r0
   153ac:	mov	r0, r1
   153b0:	str	r1, [sp, #36]	; 0x24
   153b4:	bl	16134 <__assert_fail@plt+0x4da8>
   153b8:	ldr	r3, [r4, #44]	; 0x2c
   153bc:	mov	r2, r8
   153c0:	str	r3, [sp, #16]
   153c4:	ldr	r3, [r4, #40]	; 0x28
   153c8:	str	r5, [sp, #4]
   153cc:	str	r3, [sp, #12]
   153d0:	str	sl, [sp, #8]
   153d4:	ldr	ip, [r4]
   153d8:	ldr	r1, [sp, #36]	; 0x24
   153dc:	mov	r3, r9
   153e0:	str	ip, [sp]
   153e4:	str	r0, [sp, #32]
   153e8:	bl	13808 <__assert_fail@plt+0x247c>
   153ec:	ldr	r2, [sp, #28]
   153f0:	cmp	r6, #0
   153f4:	str	r2, [r7]
   153f8:	ldr	r0, [sp, #32]
   153fc:	strne	fp, [r6]
   15400:	add	sp, sp, #44	; 0x2c
   15404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15408:	andeq	r8, r2, r4, ror #5
   1540c:	mov	r3, r2
   15410:	mov	r2, #0
   15414:	b	15334 <__assert_fail@plt+0x3fa8>
   15418:	push	{r4, r5, r6, r7, r8, lr}
   1541c:	ldr	r6, [pc, #112]	; 15494 <__assert_fail@plt+0x4108>
   15420:	ldr	r3, [r6, #4]
   15424:	ldr	r7, [r6]
   15428:	cmp	r3, #1
   1542c:	ble	15450 <__assert_fail@plt+0x40c4>
   15430:	sub	r5, r7, #8
   15434:	add	r5, r5, r3, lsl #3
   15438:	mov	r4, r7
   1543c:	ldr	r0, [r4, #12]
   15440:	add	r4, r4, #8
   15444:	bl	110ec <free@plt>
   15448:	cmp	r4, r5
   1544c:	bne	1543c <__assert_fail@plt+0x40b0>
   15450:	ldr	r0, [r7, #4]
   15454:	ldr	r4, [pc, #60]	; 15498 <__assert_fail@plt+0x410c>
   15458:	cmp	r0, r4
   1545c:	beq	15470 <__assert_fail@plt+0x40e4>
   15460:	bl	110ec <free@plt>
   15464:	mov	r3, #256	; 0x100
   15468:	str	r4, [r6, #12]
   1546c:	str	r3, [r6, #8]
   15470:	ldr	r4, [pc, #36]	; 1549c <__assert_fail@plt+0x4110>
   15474:	cmp	r7, r4
   15478:	beq	15488 <__assert_fail@plt+0x40fc>
   1547c:	mov	r0, r7
   15480:	bl	110ec <free@plt>
   15484:	str	r4, [r6]
   15488:	mov	r3, #1
   1548c:	str	r3, [r6, #4]
   15490:	pop	{r4, r5, r6, r7, r8, pc}
   15494:	andeq	r8, r2, r8, lsr #2
   15498:	andeq	r8, r2, r4, ror #3
   1549c:	andeq	r8, r2, r0, lsr r1
   154a0:	ldr	r3, [pc, #4]	; 154ac <__assert_fail@plt+0x4120>
   154a4:	mvn	r2, #0
   154a8:	b	15020 <__assert_fail@plt+0x3c94>
   154ac:	andeq	r8, r2, r4, ror #5
   154b0:	ldr	r3, [pc]	; 154b8 <__assert_fail@plt+0x412c>
   154b4:	b	15020 <__assert_fail@plt+0x3c94>
   154b8:	andeq	r8, r2, r4, ror #5
   154bc:	mov	r1, r0
   154c0:	ldr	r3, [pc, #8]	; 154d0 <__assert_fail@plt+0x4144>
   154c4:	mvn	r2, #0
   154c8:	mov	r0, #0
   154cc:	b	15020 <__assert_fail@plt+0x3c94>
   154d0:	andeq	r8, r2, r4, ror #5
   154d4:	mov	r2, r1
   154d8:	ldr	r3, [pc, #8]	; 154e8 <__assert_fail@plt+0x415c>
   154dc:	mov	r1, r0
   154e0:	mov	r0, #0
   154e4:	b	15020 <__assert_fail@plt+0x3c94>
   154e8:	andeq	r8, r2, r4, ror #5
   154ec:	push	{r4, r5, r6, lr}
   154f0:	sub	sp, sp, #56	; 0x38
   154f4:	ldr	r4, [pc, #68]	; 15540 <__assert_fail@plt+0x41b4>
   154f8:	mov	r6, r2
   154fc:	mov	r5, r0
   15500:	ldr	r3, [r4]
   15504:	add	r0, sp, #4
   15508:	str	r3, [sp, #52]	; 0x34
   1550c:	bl	13698 <__assert_fail@plt+0x230c>
   15510:	add	r3, sp, #4
   15514:	mvn	r2, #0
   15518:	mov	r1, r6
   1551c:	mov	r0, r5
   15520:	bl	15020 <__assert_fail@plt+0x3c94>
   15524:	ldr	r2, [sp, #52]	; 0x34
   15528:	ldr	r3, [r4]
   1552c:	cmp	r2, r3
   15530:	bne	1553c <__assert_fail@plt+0x41b0>
   15534:	add	sp, sp, #56	; 0x38
   15538:	pop	{r4, r5, r6, pc}
   1553c:	bl	11140 <__stack_chk_fail@plt>
   15540:	andeq	r7, r2, r8, lsl #30
   15544:	push	{r4, r5, r6, r7, lr}
   15548:	sub	sp, sp, #60	; 0x3c
   1554c:	ldr	r4, [pc, #72]	; 1559c <__assert_fail@plt+0x4210>
   15550:	mov	r6, r2
   15554:	mov	r7, r3
   15558:	ldr	ip, [r4]
   1555c:	mov	r5, r0
   15560:	add	r0, sp, #4
   15564:	str	ip, [sp, #52]	; 0x34
   15568:	bl	13698 <__assert_fail@plt+0x230c>
   1556c:	add	r3, sp, #4
   15570:	mov	r2, r7
   15574:	mov	r1, r6
   15578:	mov	r0, r5
   1557c:	bl	15020 <__assert_fail@plt+0x3c94>
   15580:	ldr	r2, [sp, #52]	; 0x34
   15584:	ldr	r3, [r4]
   15588:	cmp	r2, r3
   1558c:	bne	15598 <__assert_fail@plt+0x420c>
   15590:	add	sp, sp, #60	; 0x3c
   15594:	pop	{r4, r5, r6, r7, pc}
   15598:	bl	11140 <__stack_chk_fail@plt>
   1559c:	andeq	r7, r2, r8, lsl #30
   155a0:	mov	r2, r1
   155a4:	mov	r1, r0
   155a8:	mov	r0, #0
   155ac:	b	154ec <__assert_fail@plt+0x4160>
   155b0:	mov	r3, r2
   155b4:	mov	r2, r1
   155b8:	mov	r1, r0
   155bc:	mov	r0, #0
   155c0:	b	15544 <__assert_fail@plt+0x41b8>
   155c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   155c8:	mov	r4, r2
   155cc:	ldr	lr, [pc, #128]	; 15654 <__assert_fail@plt+0x42c8>
   155d0:	mov	r8, r0
   155d4:	mov	r9, r1
   155d8:	ldm	lr!, {r0, r1, r2, r3}
   155dc:	sub	sp, sp, #60	; 0x3c
   155e0:	add	ip, sp, #4
   155e4:	lsr	r6, r4, #5
   155e8:	stmia	ip!, {r0, r1, r2, r3}
   155ec:	add	r7, sp, #12
   155f0:	ldm	lr!, {r0, r1, r2, r3}
   155f4:	and	r4, r4, #31
   155f8:	ldr	r5, [pc, #88]	; 15658 <__assert_fail@plt+0x42cc>
   155fc:	stmia	ip!, {r0, r1, r2, r3}
   15600:	ldm	lr, {r0, r1, r2, r3}
   15604:	stm	ip, {r0, r1, r2, r3}
   15608:	mov	r2, r9
   1560c:	ldr	r3, [r7, r6, lsl #2]
   15610:	ldr	ip, [r5]
   15614:	mov	r1, r8
   15618:	mvn	r0, r3, lsr r4
   1561c:	and	r0, r0, #1
   15620:	str	ip, [sp, #52]	; 0x34
   15624:	eor	r4, r3, r0, lsl r4
   15628:	add	r3, sp, #4
   1562c:	mov	r0, #0
   15630:	str	r4, [r7, r6, lsl #2]
   15634:	bl	15020 <__assert_fail@plt+0x3c94>
   15638:	ldr	r2, [sp, #52]	; 0x34
   1563c:	ldr	r3, [r5]
   15640:	cmp	r2, r3
   15644:	bne	15650 <__assert_fail@plt+0x42c4>
   15648:	add	sp, sp, #60	; 0x3c
   1564c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15650:	bl	11140 <__stack_chk_fail@plt>
   15654:	andeq	r8, r2, r4, ror #5
   15658:	andeq	r7, r2, r8, lsl #30
   1565c:	mov	r2, r1
   15660:	mvn	r1, #0
   15664:	b	155c4 <__assert_fail@plt+0x4238>
   15668:	mov	r2, #58	; 0x3a
   1566c:	mvn	r1, #0
   15670:	b	155c4 <__assert_fail@plt+0x4238>
   15674:	mov	r2, #58	; 0x3a
   15678:	b	155c4 <__assert_fail@plt+0x4238>
   1567c:	push	{r4, r5, r6, r7, r8, lr}
   15680:	sub	sp, sp, #104	; 0x68
   15684:	ldr	r5, [pc, #120]	; 15704 <__assert_fail@plt+0x4378>
   15688:	mov	r6, r0
   1568c:	mov	r0, sp
   15690:	ldr	r3, [r5]
   15694:	mov	r7, r2
   15698:	str	r3, [sp, #100]	; 0x64
   1569c:	bl	13698 <__assert_fail@plt+0x230c>
   156a0:	mov	ip, sp
   156a4:	add	lr, sp, #52	; 0x34
   156a8:	ldm	ip!, {r0, r1, r2, r3}
   156ac:	stmia	lr!, {r0, r1, r2, r3}
   156b0:	ldm	ip!, {r0, r1, r2, r3}
   156b4:	ldr	r8, [sp, #64]	; 0x40
   156b8:	stmia	lr!, {r0, r1, r2, r3}
   156bc:	mvn	r4, r8
   156c0:	ldm	ip, {r0, r1, r2, r3}
   156c4:	and	ip, r4, #67108864	; 0x4000000
   156c8:	eor	ip, ip, r8
   156cc:	str	ip, [sp, #64]	; 0x40
   156d0:	stm	lr, {r0, r1, r2, r3}
   156d4:	add	r3, sp, #52	; 0x34
   156d8:	mvn	r2, #0
   156dc:	mov	r1, r7
   156e0:	mov	r0, r6
   156e4:	bl	15020 <__assert_fail@plt+0x3c94>
   156e8:	ldr	r2, [sp, #100]	; 0x64
   156ec:	ldr	r3, [r5]
   156f0:	cmp	r2, r3
   156f4:	bne	15700 <__assert_fail@plt+0x4374>
   156f8:	add	sp, sp, #104	; 0x68
   156fc:	pop	{r4, r5, r6, r7, r8, pc}
   15700:	bl	11140 <__stack_chk_fail@plt>
   15704:	andeq	r7, r2, r8, lsl #30
   15708:	push	{r4, r5, r6, r7, r8, r9, lr}
   1570c:	mov	r6, r1
   15710:	ldr	lr, [pc, #132]	; 1579c <__assert_fail@plt+0x4410>
   15714:	mov	r5, r2
   15718:	mov	r8, r0
   1571c:	mov	r9, r3
   15720:	ldm	lr!, {r0, r1, r2, r3}
   15724:	sub	sp, sp, #60	; 0x3c
   15728:	add	ip, sp, #4
   1572c:	ldr	r4, [pc, #108]	; 157a0 <__assert_fail@plt+0x4414>
   15730:	stmia	ip!, {r0, r1, r2, r3}
   15734:	mov	r7, #10
   15738:	ldm	lr!, {r0, r1, r2, r3}
   1573c:	cmp	r5, #0
   15740:	cmpne	r6, #0
   15744:	str	r7, [sp, #4]
   15748:	stmia	ip!, {r0, r1, r2, r3}
   1574c:	ldm	lr, {r0, r1, r2, r3}
   15750:	ldr	lr, [r4]
   15754:	stm	ip, {r0, r1, r2, r3}
   15758:	str	lr, [sp, #52]	; 0x34
   1575c:	beq	15798 <__assert_fail@plt+0x440c>
   15760:	add	r3, sp, #4
   15764:	ldr	r2, [sp, #88]	; 0x58
   15768:	mov	r1, r9
   1576c:	mov	r0, r8
   15770:	str	r6, [sp, #44]	; 0x2c
   15774:	str	r5, [sp, #48]	; 0x30
   15778:	bl	15020 <__assert_fail@plt+0x3c94>
   1577c:	ldr	r2, [sp, #52]	; 0x34
   15780:	ldr	r3, [r4]
   15784:	cmp	r2, r3
   15788:	bne	15794 <__assert_fail@plt+0x4408>
   1578c:	add	sp, sp, #60	; 0x3c
   15790:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15794:	bl	11140 <__stack_chk_fail@plt>
   15798:	bl	11374 <abort@plt>
   1579c:	andeq	r8, r2, r4, ror #5
   157a0:	andeq	r7, r2, r8, lsl #30
   157a4:	push	{lr}		; (str lr, [sp, #-4]!)
   157a8:	sub	sp, sp, #12
   157ac:	mvn	ip, #0
   157b0:	str	ip, [sp]
   157b4:	bl	15708 <__assert_fail@plt+0x437c>
   157b8:	add	sp, sp, #12
   157bc:	pop	{pc}		; (ldr pc, [sp], #4)
   157c0:	push	{lr}		; (str lr, [sp, #-4]!)
   157c4:	sub	sp, sp, #12
   157c8:	mvn	ip, #0
   157cc:	mov	r3, r2
   157d0:	str	ip, [sp]
   157d4:	mov	r2, r1
   157d8:	mov	r1, r0
   157dc:	mov	r0, #0
   157e0:	bl	15708 <__assert_fail@plt+0x437c>
   157e4:	add	sp, sp, #12
   157e8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ec:	push	{lr}		; (str lr, [sp, #-4]!)
   157f0:	sub	sp, sp, #12
   157f4:	str	r3, [sp]
   157f8:	mov	r3, r2
   157fc:	mov	r2, r1
   15800:	mov	r1, r0
   15804:	mov	r0, #0
   15808:	bl	15708 <__assert_fail@plt+0x437c>
   1580c:	add	sp, sp, #12
   15810:	pop	{pc}		; (ldr pc, [sp], #4)
   15814:	ldr	r3, [pc]	; 1581c <__assert_fail@plt+0x4490>
   15818:	b	15020 <__assert_fail@plt+0x3c94>
   1581c:	andeq	r8, r2, r8, lsr r1
   15820:	mov	r2, r1
   15824:	ldr	r3, [pc, #8]	; 15834 <__assert_fail@plt+0x44a8>
   15828:	mov	r1, r0
   1582c:	mov	r0, #0
   15830:	b	15020 <__assert_fail@plt+0x3c94>
   15834:	andeq	r8, r2, r8, lsr r1
   15838:	ldr	r3, [pc, #4]	; 15844 <__assert_fail@plt+0x44b8>
   1583c:	mvn	r2, #0
   15840:	b	15020 <__assert_fail@plt+0x3c94>
   15844:	andeq	r8, r2, r8, lsr r1
   15848:	mov	r1, r0
   1584c:	ldr	r3, [pc, #8]	; 1585c <__assert_fail@plt+0x44d0>
   15850:	mvn	r2, #0
   15854:	mov	r0, #0
   15858:	b	15020 <__assert_fail@plt+0x3c94>
   1585c:	andeq	r8, r2, r8, lsr r1
   15860:	push	{r4, r5, r6, lr}
   15864:	mov	r4, r0
   15868:	ldr	r3, [r0, #24]
   1586c:	ldr	r6, [r0, #20]
   15870:	cmp	r3, r6
   15874:	sub	r5, r3, r6
   15878:	ldrbeq	r2, [r0, #52]	; 0x34
   1587c:	sub	r5, r5, #1
   15880:	orreq	r2, r2, #2
   15884:	strbeq	r2, [r0, #52]	; 0x34
   15888:	ldr	r0, [r0, #36]	; 0x24
   1588c:	ldr	r1, [r4, #28]
   15890:	ldr	r2, [r4, #16]
   15894:	add	r3, r3, r0
   15898:	bic	r3, r3, r0
   1589c:	sub	r0, r3, r2
   158a0:	sub	r2, r1, r2
   158a4:	cmp	r0, r2
   158a8:	str	r3, [r4, #24]
   158ac:	ldr	r2, [r4, #72]	; 0x48
   158b0:	movhi	r3, r1
   158b4:	strhi	r1, [r4, #24]
   158b8:	ldr	r1, [r4, #68]	; 0x44
   158bc:	str	r3, [r4, #20]
   158c0:	sub	r3, r2, r1
   158c4:	cmp	r3, #3
   158c8:	bls	15910 <__assert_fail@plt+0x4584>
   158cc:	str	r6, [r1]
   158d0:	ldr	r1, [r4, #112]	; 0x70
   158d4:	ldr	r2, [r4, #116]	; 0x74
   158d8:	ldr	r3, [r4, #68]	; 0x44
   158dc:	sub	r2, r2, r1
   158e0:	add	r3, r3, #4
   158e4:	cmp	r2, #3
   158e8:	str	r3, [r4, #68]	; 0x44
   158ec:	bls	15924 <__assert_fail@plt+0x4598>
   158f0:	str	r5, [r1]
   158f4:	ldr	r2, [r4, #112]	; 0x70
   158f8:	ldr	r3, [r4]
   158fc:	add	r2, r2, #4
   15900:	add	r3, r3, #1
   15904:	str	r2, [r4, #112]	; 0x70
   15908:	str	r3, [r4]
   1590c:	pop	{r4, r5, r6, pc}
   15910:	mov	r1, #4
   15914:	add	r0, r4, #56	; 0x38
   15918:	bl	16750 <_obstack_newchunk@@Base>
   1591c:	ldr	r1, [r4, #68]	; 0x44
   15920:	b	158cc <__assert_fail@plt+0x4540>
   15924:	mov	r1, #4
   15928:	add	r0, r4, #100	; 0x64
   1592c:	bl	16750 <_obstack_newchunk@@Base>
   15930:	ldr	r1, [r4, #112]	; 0x70
   15934:	b	158f0 <__assert_fail@plt+0x4564>
   15938:	push	{r4, r5, r6, r7, lr}
   1593c:	sub	sp, sp, #12
   15940:	ldr	r6, [pc, #100]	; 159ac <__assert_fail@plt+0x4620>
   15944:	ldr	r7, [pc, #100]	; 159b0 <__assert_fail@plt+0x4624>
   15948:	mov	r4, #0
   1594c:	mov	r5, r0
   15950:	str	r4, [r0]
   15954:	str	r4, [r0, #4]
   15958:	str	r4, [r0, #8]
   1595c:	mov	r2, r4
   15960:	mov	r1, r4
   15964:	mov	r3, r6
   15968:	str	r7, [sp]
   1596c:	add	r0, r0, #12
   15970:	bl	16700 <_obstack_begin@@Base>
   15974:	mov	r3, r6
   15978:	mov	r2, r4
   1597c:	mov	r1, r4
   15980:	str	r7, [sp]
   15984:	add	r0, r5, #56	; 0x38
   15988:	bl	16700 <_obstack_begin@@Base>
   1598c:	str	r7, [sp]
   15990:	mov	r3, r6
   15994:	add	r0, r5, #100	; 0x64
   15998:	mov	r2, r4
   1599c:	mov	r1, r4
   159a0:	bl	16700 <_obstack_begin@@Base>
   159a4:	add	sp, sp, #12
   159a8:	pop	{r4, r5, r6, r7, pc}
   159ac:	strdeq	r1, [r1], -r4
   159b0:	andeq	r1, r1, ip, ror #1
   159b4:	push	{r4, lr}
   159b8:	mov	r1, #0
   159bc:	mov	r4, r0
   159c0:	add	r0, r0, #12
   159c4:	bl	16888 <_obstack_free@@Base>
   159c8:	add	r0, r4, #56	; 0x38
   159cc:	mov	r1, #0
   159d0:	bl	16888 <_obstack_free@@Base>
   159d4:	add	r0, r4, #100	; 0x64
   159d8:	mov	r1, #0
   159dc:	pop	{r4, lr}
   159e0:	b	16888 <_obstack_free@@Base>
   159e4:	push	{r4, r5, r6, r7, r8, lr}
   159e8:	mov	r4, r1
   159ec:	mov	r6, r0
   159f0:	add	r7, r1, #12
   159f4:	b	15a0c <__assert_fail@plt+0x4680>
   159f8:	add	r2, r3, #1
   159fc:	cmp	r5, #0
   15a00:	str	r2, [r4, #24]
   15a04:	strb	r5, [r3]
   15a08:	beq	15b40 <__assert_fail@plt+0x47b4>
   15a0c:	mov	r0, r6
   15a10:	bl	112b4 <fgetc@plt>
   15a14:	ldr	r3, [r4, #24]
   15a18:	cmn	r0, #1
   15a1c:	mov	r5, r0
   15a20:	beq	15a44 <__assert_fail@plt+0x46b8>
   15a24:	ldr	r2, [r4, #28]
   15a28:	cmp	r2, r3
   15a2c:	bne	159f8 <__assert_fail@plt+0x466c>
   15a30:	mov	r1, #1
   15a34:	mov	r0, r7
   15a38:	bl	16750 <_obstack_newchunk@@Base>
   15a3c:	ldr	r3, [r4, #24]
   15a40:	b	159f8 <__assert_fail@plt+0x466c>
   15a44:	ldr	r2, [r4, #20]
   15a48:	cmp	r3, r2
   15a4c:	beq	15a74 <__assert_fail@plt+0x46e8>
   15a50:	ldr	r2, [r4, #28]
   15a54:	cmp	r3, r2
   15a58:	beq	15b60 <__assert_fail@plt+0x47d4>
   15a5c:	add	r1, r3, #1
   15a60:	mov	r2, #0
   15a64:	str	r1, [r4, #24]
   15a68:	mov	r0, r4
   15a6c:	strb	r2, [r3]
   15a70:	bl	15860 <__assert_fail@plt+0x44d4>
   15a74:	ldrd	r2, [r4, #68]	; 0x44
   15a78:	sub	r3, r3, r2
   15a7c:	cmp	r3, #3
   15a80:	bls	15b4c <__assert_fail@plt+0x47c0>
   15a84:	mov	r3, #0
   15a88:	str	r3, [r2]
   15a8c:	ldr	r3, [r4, #68]	; 0x44
   15a90:	ldr	r1, [r4, #64]	; 0x40
   15a94:	add	r3, r3, #4
   15a98:	cmp	r3, r1
   15a9c:	ldr	r0, [r4, #80]	; 0x50
   15aa0:	ldrbeq	r2, [r4, #96]	; 0x60
   15aa4:	ldr	ip, [r4, #72]	; 0x48
   15aa8:	str	r3, [r4, #68]	; 0x44
   15aac:	orreq	r2, r2, #2
   15ab0:	strbeq	r2, [r4, #96]	; 0x60
   15ab4:	add	r3, r3, r0
   15ab8:	ldr	r2, [r4, #60]	; 0x3c
   15abc:	bic	r3, r3, r0
   15ac0:	sub	r0, r3, r2
   15ac4:	sub	r2, ip, r2
   15ac8:	cmp	r0, r2
   15acc:	ldr	r2, [r4, #112]	; 0x70
   15ad0:	ldr	r0, [r4, #108]	; 0x6c
   15ad4:	str	r3, [r4, #68]	; 0x44
   15ad8:	movhi	r3, ip
   15adc:	strhi	ip, [r4, #68]	; 0x44
   15ae0:	cmp	r2, r0
   15ae4:	str	r3, [r4, #64]	; 0x40
   15ae8:	ldrbeq	r3, [r4, #140]	; 0x8c
   15aec:	ldr	ip, [r4, #124]	; 0x7c
   15af0:	str	r1, [r4, #4]
   15af4:	orreq	r3, r3, #2
   15af8:	strbeq	r3, [r4, #140]	; 0x8c
   15afc:	ldr	r1, [r4, #104]	; 0x68
   15b00:	add	r3, r2, ip
   15b04:	ldr	r2, [r4, #116]	; 0x74
   15b08:	bic	r3, r3, ip
   15b0c:	sub	ip, r3, r1
   15b10:	sub	r1, r2, r1
   15b14:	cmp	ip, r1
   15b18:	str	r3, [r4, #112]	; 0x70
   15b1c:	movhi	r3, r2
   15b20:	str	r0, [r4, #8]
   15b24:	strhi	r2, [r4, #112]	; 0x70
   15b28:	str	r3, [r4, #108]	; 0x6c
   15b2c:	mov	r0, r6
   15b30:	bl	110f8 <ferror@plt>
   15b34:	clz	r0, r0
   15b38:	lsr	r0, r0, #5
   15b3c:	pop	{r4, r5, r6, r7, r8, pc}
   15b40:	mov	r0, r4
   15b44:	bl	15860 <__assert_fail@plt+0x44d4>
   15b48:	b	15a0c <__assert_fail@plt+0x4680>
   15b4c:	mov	r1, #4
   15b50:	add	r0, r4, #56	; 0x38
   15b54:	bl	16750 <_obstack_newchunk@@Base>
   15b58:	ldr	r2, [r4, #68]	; 0x44
   15b5c:	b	15a84 <__assert_fail@plt+0x46f8>
   15b60:	mov	r1, #1
   15b64:	add	r0, r4, #12
   15b68:	bl	16750 <_obstack_newchunk@@Base>
   15b6c:	ldr	r3, [r4, #24]
   15b70:	b	15a5c <__assert_fail@plt+0x46d0>
   15b74:	push	{r4, r5, r6, r7, r8, lr}
   15b78:	mov	r8, r0
   15b7c:	ldr	r5, [pc, #84]	; 15bd8 <__assert_fail@plt+0x484c>
   15b80:	mov	r7, r1
   15b84:	mov	r4, r2
   15b88:	mov	r2, r4
   15b8c:	mov	r1, r7
   15b90:	mov	r0, r8
   15b94:	bl	110bc <read@plt>
   15b98:	subs	r6, r0, #0
   15b9c:	bge	15bd0 <__assert_fail@plt+0x4844>
   15ba0:	bl	11284 <__errno_location@plt>
   15ba4:	ldr	r3, [r0]
   15ba8:	cmp	r3, #4
   15bac:	beq	15b88 <__assert_fail@plt+0x47fc>
   15bb0:	cmp	r4, r5
   15bb4:	movls	r2, #0
   15bb8:	movhi	r2, #1
   15bbc:	cmp	r3, #22
   15bc0:	movne	r2, #0
   15bc4:	cmp	r2, #0
   15bc8:	mov	r4, r5
   15bcc:	bne	15b88 <__assert_fail@plt+0x47fc>
   15bd0:	mov	r0, r6
   15bd4:	pop	{r4, r5, r6, r7, r8, pc}
   15bd8:	svcvc	0x00f00000	; IMB
   15bdc:	push	{r4, r5, r6, lr}
   15be0:	sub	sp, sp, #32
   15be4:	cmp	r1, #0
   15be8:	mov	r5, r0
   15bec:	ldr	r4, [sp, #48]	; 0x30
   15bf0:	ldr	r6, [sp, #52]	; 0x34
   15bf4:	beq	15c84 <__assert_fail@plt+0x48f8>
   15bf8:	strd	r2, [sp]
   15bfc:	mov	r3, r1
   15c00:	ldr	r2, [pc, #828]	; 15f44 <__assert_fail@plt+0x4bb8>
   15c04:	mov	r1, #1
   15c08:	bl	112d8 <__fprintf_chk@plt>
   15c0c:	mov	r2, #5
   15c10:	ldr	r1, [pc, #816]	; 15f48 <__assert_fail@plt+0x4bbc>
   15c14:	mov	r0, #0
   15c18:	bl	11134 <dcgettext@plt>
   15c1c:	ldr	r3, [pc, #808]	; 15f4c <__assert_fail@plt+0x4bc0>
   15c20:	ldr	r2, [pc, #808]	; 15f50 <__assert_fail@plt+0x4bc4>
   15c24:	str	r3, [sp]
   15c28:	mov	r1, #1
   15c2c:	mov	r3, r0
   15c30:	mov	r0, r5
   15c34:	bl	112d8 <__fprintf_chk@plt>
   15c38:	ldr	r1, [pc, #788]	; 15f54 <__assert_fail@plt+0x4bc8>
   15c3c:	mov	r2, #5
   15c40:	mov	r0, #0
   15c44:	bl	11134 <dcgettext@plt>
   15c48:	mov	r1, r5
   15c4c:	bl	1108c <fputs_unlocked@plt>
   15c50:	cmp	r6, #9
   15c54:	ldrls	pc, [pc, r6, lsl #2]
   15c58:	b	15f34 <__assert_fail@plt+0x4ba8>
   15c5c:	andeq	r5, r1, r0, asr #30
   15c60:	andeq	r5, r1, r8, lsl #26
   15c64:	andeq	r5, r1, r4, lsr sp
   15c68:	andeq	r5, r1, r8, ror #26
   15c6c:	andeq	r5, r1, r4, lsr #27
   15c70:	andeq	r5, r1, r4, ror #27
   15c74:	andeq	r5, r1, ip, lsr #28
   15c78:	andeq	r5, r1, ip, ror lr
   15c7c:	ldrdeq	r5, [r1], -r4
   15c80:	muleq	r1, ip, ip
   15c84:	str	r3, [sp]
   15c88:	mov	r1, #1
   15c8c:	mov	r3, r2
   15c90:	ldr	r2, [pc, #704]	; 15f58 <__assert_fail@plt+0x4bcc>
   15c94:	bl	112d8 <__fprintf_chk@plt>
   15c98:	b	15c0c <__assert_fail@plt+0x4880>
   15c9c:	ldr	r1, [pc, #696]	; 15f5c <__assert_fail@plt+0x4bd0>
   15ca0:	mov	r2, #5
   15ca4:	mov	r0, #0
   15ca8:	bl	11134 <dcgettext@plt>
   15cac:	ldr	r2, [r4, #32]
   15cb0:	ldr	r3, [r4, #28]
   15cb4:	ldr	r1, [r4, #24]
   15cb8:	str	r2, [sp, #28]
   15cbc:	ldr	r2, [r4, #20]
   15cc0:	str	r3, [sp, #24]
   15cc4:	ldr	r3, [r4, #16]
   15cc8:	str	r1, [sp, #20]
   15ccc:	ldr	r1, [r4, #12]
   15cd0:	str	r2, [sp, #16]
   15cd4:	ldr	r2, [r4, #8]
   15cd8:	str	r3, [sp, #12]
   15cdc:	ldr	r3, [r4, #4]
   15ce0:	str	r1, [sp, #8]
   15ce4:	str	r2, [sp, #4]
   15ce8:	str	r3, [sp]
   15cec:	mov	r1, #1
   15cf0:	ldr	r3, [r4]
   15cf4:	mov	r2, r0
   15cf8:	mov	r0, r5
   15cfc:	bl	112d8 <__fprintf_chk@plt>
   15d00:	add	sp, sp, #32
   15d04:	pop	{r4, r5, r6, pc}
   15d08:	mov	r2, #5
   15d0c:	ldr	r1, [pc, #588]	; 15f60 <__assert_fail@plt+0x4bd4>
   15d10:	mov	r0, #0
   15d14:	bl	11134 <dcgettext@plt>
   15d18:	ldr	r3, [r4]
   15d1c:	mov	r1, #1
   15d20:	mov	r2, r0
   15d24:	mov	r0, r5
   15d28:	add	sp, sp, #32
   15d2c:	pop	{r4, r5, r6, lr}
   15d30:	b	112d8 <__fprintf_chk@plt>
   15d34:	mov	r2, #5
   15d38:	ldr	r1, [pc, #548]	; 15f64 <__assert_fail@plt+0x4bd8>
   15d3c:	mov	r0, #0
   15d40:	bl	11134 <dcgettext@plt>
   15d44:	ldr	r2, [r4, #4]
   15d48:	ldr	r3, [r4]
   15d4c:	mov	r1, #1
   15d50:	str	r2, [sp, #48]	; 0x30
   15d54:	mov	r2, r0
   15d58:	mov	r0, r5
   15d5c:	add	sp, sp, #32
   15d60:	pop	{r4, r5, r6, lr}
   15d64:	b	112d8 <__fprintf_chk@plt>
   15d68:	mov	r2, #5
   15d6c:	ldr	r1, [pc, #500]	; 15f68 <__assert_fail@plt+0x4bdc>
   15d70:	mov	r0, #0
   15d74:	bl	11134 <dcgettext@plt>
   15d78:	ldr	r2, [r4, #8]
   15d7c:	ldr	r3, [r4, #4]
   15d80:	mov	r1, #1
   15d84:	str	r2, [sp, #52]	; 0x34
   15d88:	str	r3, [sp, #48]	; 0x30
   15d8c:	ldr	r3, [r4]
   15d90:	mov	r2, r0
   15d94:	mov	r0, r5
   15d98:	add	sp, sp, #32
   15d9c:	pop	{r4, r5, r6, lr}
   15da0:	b	112d8 <__fprintf_chk@plt>
   15da4:	mov	r2, #5
   15da8:	ldr	r1, [pc, #444]	; 15f6c <__assert_fail@plt+0x4be0>
   15dac:	mov	r0, #0
   15db0:	bl	11134 <dcgettext@plt>
   15db4:	ldr	r1, [r4, #12]
   15db8:	ldr	r2, [r4, #8]
   15dbc:	ldr	r3, [r4, #4]
   15dc0:	str	r1, [sp, #8]
   15dc4:	str	r2, [sp, #4]
   15dc8:	str	r3, [sp]
   15dcc:	mov	r1, #1
   15dd0:	ldr	r3, [r4]
   15dd4:	mov	r2, r0
   15dd8:	mov	r0, r5
   15ddc:	bl	112d8 <__fprintf_chk@plt>
   15de0:	b	15d00 <__assert_fail@plt+0x4974>
   15de4:	mov	r2, #5
   15de8:	ldr	r1, [pc, #384]	; 15f70 <__assert_fail@plt+0x4be4>
   15dec:	mov	r0, #0
   15df0:	bl	11134 <dcgettext@plt>
   15df4:	ldr	r3, [r4, #16]
   15df8:	ldr	r1, [r4, #12]
   15dfc:	ldr	r2, [r4, #8]
   15e00:	str	r3, [sp, #12]
   15e04:	ldr	r3, [r4, #4]
   15e08:	str	r1, [sp, #8]
   15e0c:	str	r2, [sp, #4]
   15e10:	str	r3, [sp]
   15e14:	mov	r1, #1
   15e18:	ldr	r3, [r4]
   15e1c:	mov	r2, r0
   15e20:	mov	r0, r5
   15e24:	bl	112d8 <__fprintf_chk@plt>
   15e28:	b	15d00 <__assert_fail@plt+0x4974>
   15e2c:	mov	r2, #5
   15e30:	ldr	r1, [pc, #316]	; 15f74 <__assert_fail@plt+0x4be8>
   15e34:	mov	r0, #0
   15e38:	bl	11134 <dcgettext@plt>
   15e3c:	ldr	r2, [r4, #20]
   15e40:	ldr	r3, [r4, #16]
   15e44:	ldr	r1, [r4, #12]
   15e48:	str	r2, [sp, #16]
   15e4c:	ldr	r2, [r4, #8]
   15e50:	str	r3, [sp, #12]
   15e54:	ldr	r3, [r4, #4]
   15e58:	str	r1, [sp, #8]
   15e5c:	str	r2, [sp, #4]
   15e60:	str	r3, [sp]
   15e64:	mov	r1, #1
   15e68:	ldr	r3, [r4]
   15e6c:	mov	r2, r0
   15e70:	mov	r0, r5
   15e74:	bl	112d8 <__fprintf_chk@plt>
   15e78:	b	15d00 <__assert_fail@plt+0x4974>
   15e7c:	mov	r2, #5
   15e80:	ldr	r1, [pc, #240]	; 15f78 <__assert_fail@plt+0x4bec>
   15e84:	mov	r0, #0
   15e88:	bl	11134 <dcgettext@plt>
   15e8c:	ldr	r1, [r4, #24]
   15e90:	ldr	r2, [r4, #20]
   15e94:	ldr	r3, [r4, #16]
   15e98:	str	r1, [sp, #20]
   15e9c:	ldr	r1, [r4, #12]
   15ea0:	str	r2, [sp, #16]
   15ea4:	ldr	r2, [r4, #8]
   15ea8:	str	r3, [sp, #12]
   15eac:	ldr	r3, [r4, #4]
   15eb0:	str	r1, [sp, #8]
   15eb4:	str	r2, [sp, #4]
   15eb8:	str	r3, [sp]
   15ebc:	mov	r1, #1
   15ec0:	ldr	r3, [r4]
   15ec4:	mov	r2, r0
   15ec8:	mov	r0, r5
   15ecc:	bl	112d8 <__fprintf_chk@plt>
   15ed0:	b	15d00 <__assert_fail@plt+0x4974>
   15ed4:	mov	r2, #5
   15ed8:	ldr	r1, [pc, #156]	; 15f7c <__assert_fail@plt+0x4bf0>
   15edc:	mov	r0, #0
   15ee0:	bl	11134 <dcgettext@plt>
   15ee4:	ldr	r3, [r4, #28]
   15ee8:	ldr	r1, [r4, #24]
   15eec:	ldr	r2, [r4, #20]
   15ef0:	str	r3, [sp, #24]
   15ef4:	ldr	r3, [r4, #16]
   15ef8:	str	r1, [sp, #20]
   15efc:	ldr	r1, [r4, #12]
   15f00:	str	r2, [sp, #16]
   15f04:	ldr	r2, [r4, #8]
   15f08:	str	r3, [sp, #12]
   15f0c:	ldr	r3, [r4, #4]
   15f10:	str	r1, [sp, #8]
   15f14:	str	r2, [sp, #4]
   15f18:	str	r3, [sp]
   15f1c:	mov	r1, #1
   15f20:	ldr	r3, [r4]
   15f24:	mov	r2, r0
   15f28:	mov	r0, r5
   15f2c:	bl	112d8 <__fprintf_chk@plt>
   15f30:	b	15d00 <__assert_fail@plt+0x4974>
   15f34:	mov	r2, #5
   15f38:	ldr	r1, [pc, #64]	; 15f80 <__assert_fail@plt+0x4bf4>
   15f3c:	b	15ca4 <__assert_fail@plt+0x4918>
   15f40:	bl	11374 <abort@plt>
   15f44:	andeq	r7, r1, r0, ror fp
   15f48:	andeq	r7, r1, r4, lsl #23
   15f4c:	andeq	r0, r0, r2, ror #15
   15f50:	andeq	r7, r1, r8, asr lr
   15f54:	andeq	r7, r1, r8, lsl #23
   15f58:	andeq	r7, r1, ip, ror fp
   15f5c:	andeq	r7, r1, r0, ror #26
   15f60:	andeq	r7, r1, r4, asr ip
   15f64:	andeq	r7, r1, r4, ror #24
   15f68:	andeq	r7, r1, ip, ror ip
   15f6c:	muleq	r1, r8, ip
   15f70:			; <UNDEFINED> instruction: 0x00017cb8
   15f74:	ldrdeq	r7, [r1], -ip
   15f78:	andeq	r7, r1, r4, lsl #26
   15f7c:	andeq	r7, r1, r0, lsr sp
   15f80:	muleq	r1, r4, sp
   15f84:	push	{r4, r5, lr}
   15f88:	sub	sp, sp, #12
   15f8c:	ldr	r5, [sp, #24]
   15f90:	ldr	ip, [r5]
   15f94:	cmp	ip, #0
   15f98:	beq	15fb4 <__assert_fail@plt+0x4c28>
   15f9c:	mov	lr, r5
   15fa0:	mov	ip, #0
   15fa4:	ldr	r4, [lr, #4]!
   15fa8:	add	ip, ip, #1
   15fac:	cmp	r4, #0
   15fb0:	bne	15fa4 <__assert_fail@plt+0x4c18>
   15fb4:	stm	sp, {r5, ip}
   15fb8:	bl	15bdc <__assert_fail@plt+0x4850>
   15fbc:	add	sp, sp, #12
   15fc0:	pop	{r4, r5, pc}
   15fc4:	push	{r4, r5, r6, lr}
   15fc8:	sub	sp, sp, #56	; 0x38
   15fcc:	ldr	r6, [pc, #88]	; 1602c <__assert_fail@plt+0x4ca0>
   15fd0:	ldr	r5, [sp, #72]	; 0x48
   15fd4:	add	r4, sp, #8
   15fd8:	ldr	ip, [r6]
   15fdc:	str	ip, [sp, #52]	; 0x34
   15fe0:	mov	ip, #0
   15fe4:	ldr	lr, [r5], #4
   15fe8:	cmp	lr, #0
   15fec:	str	lr, [r4, #4]!
   15ff0:	beq	16000 <__assert_fail@plt+0x4c74>
   15ff4:	add	ip, ip, #1
   15ff8:	cmp	ip, #10
   15ffc:	bne	15fe4 <__assert_fail@plt+0x4c58>
   16000:	add	lr, sp, #12
   16004:	str	ip, [sp, #4]
   16008:	str	lr, [sp]
   1600c:	bl	15bdc <__assert_fail@plt+0x4850>
   16010:	ldr	r2, [sp, #52]	; 0x34
   16014:	ldr	r3, [r6]
   16018:	cmp	r2, r3
   1601c:	bne	16028 <__assert_fail@plt+0x4c9c>
   16020:	add	sp, sp, #56	; 0x38
   16024:	pop	{r4, r5, r6, pc}
   16028:	bl	11140 <__stack_chk_fail@plt>
   1602c:	andeq	r7, r2, r8, lsl #30
   16030:	push	{r3}		; (str r3, [sp, #-4]!)
   16034:	mov	ip, #0
   16038:	push	{r4, r5, r6, lr}
   1603c:	sub	sp, sp, #60	; 0x3c
   16040:	ldr	r6, [pc, #100]	; 160ac <__assert_fail@plt+0x4d20>
   16044:	add	r5, sp, #8
   16048:	add	r4, sp, #80	; 0x50
   1604c:	ldr	r3, [r6]
   16050:	str	r4, [sp, #8]
   16054:	str	r3, [sp, #52]	; 0x34
   16058:	ldr	r3, [sp, #76]	; 0x4c
   1605c:	ldr	lr, [r4], #4
   16060:	cmp	lr, #0
   16064:	str	lr, [r5, #4]!
   16068:	beq	16078 <__assert_fail@plt+0x4cec>
   1606c:	add	ip, ip, #1
   16070:	cmp	ip, #10
   16074:	bne	1605c <__assert_fail@plt+0x4cd0>
   16078:	add	lr, sp, #12
   1607c:	str	ip, [sp, #4]
   16080:	str	lr, [sp]
   16084:	bl	15bdc <__assert_fail@plt+0x4850>
   16088:	ldr	r2, [sp, #52]	; 0x34
   1608c:	ldr	r3, [r6]
   16090:	cmp	r2, r3
   16094:	bne	160a8 <__assert_fail@plt+0x4d1c>
   16098:	add	sp, sp, #60	; 0x3c
   1609c:	pop	{r4, r5, r6, lr}
   160a0:	add	sp, sp, #4
   160a4:	bx	lr
   160a8:	bl	11140 <__stack_chk_fail@plt>
   160ac:	andeq	r7, r2, r8, lsl #30
   160b0:	push	{r4, lr}
   160b4:	mov	r2, #5
   160b8:	ldr	r1, [pc, #88]	; 16118 <__assert_fail@plt+0x4d8c>
   160bc:	mov	r0, #0
   160c0:	bl	11134 <dcgettext@plt>
   160c4:	ldr	r2, [pc, #80]	; 1611c <__assert_fail@plt+0x4d90>
   160c8:	mov	r1, r0
   160cc:	mov	r0, #1
   160d0:	bl	112c0 <__printf_chk@plt>
   160d4:	mov	r2, #5
   160d8:	ldr	r1, [pc, #64]	; 16120 <__assert_fail@plt+0x4d94>
   160dc:	mov	r0, #0
   160e0:	bl	11134 <dcgettext@plt>
   160e4:	ldr	r3, [pc, #56]	; 16124 <__assert_fail@plt+0x4d98>
   160e8:	ldr	r2, [pc, #56]	; 16128 <__assert_fail@plt+0x4d9c>
   160ec:	mov	r1, r0
   160f0:	mov	r0, #1
   160f4:	bl	112c0 <__printf_chk@plt>
   160f8:	ldr	r1, [pc, #44]	; 1612c <__assert_fail@plt+0x4da0>
   160fc:	mov	r2, #5
   16100:	mov	r0, #0
   16104:	bl	11134 <dcgettext@plt>
   16108:	ldr	r3, [pc, #32]	; 16130 <__assert_fail@plt+0x4da4>
   1610c:	pop	{r4, lr}
   16110:	ldr	r1, [r3]
   16114:	b	1108c <fputs_unlocked@plt>
   16118:	ldrdeq	r7, [r1], -r0
   1611c:	andeq	r7, r1, r8, ror #27
   16120:	andeq	r7, r1, r0, lsl #28
   16124:	andeq	r7, r1, r8, lsl r7
   16128:	andeq	r7, r1, r0, asr #14
   1612c:	andeq	r7, r1, r4, lsl lr
   16130:	andeq	r8, r2, ip, lsl #3
   16134:	push	{r4, lr}
   16138:	mov	r4, r0
   1613c:	bl	111f4 <malloc@plt>
   16140:	adds	r4, r4, #0
   16144:	movne	r4, #1
   16148:	cmp	r0, #0
   1614c:	movne	r4, #0
   16150:	cmp	r4, #0
   16154:	popeq	{r4, pc}
   16158:	bl	1637c <__assert_fail@plt+0x4ff0>
   1615c:	push	{r4, r5, r6, lr}
   16160:	umull	r4, r5, r0, r1
   16164:	adds	r3, r5, #0
   16168:	movne	r3, #1
   1616c:	cmp	r4, #0
   16170:	blt	16188 <__assert_fail@plt+0x4dfc>
   16174:	cmp	r3, #0
   16178:	bne	16188 <__assert_fail@plt+0x4dfc>
   1617c:	mul	r0, r1, r0
   16180:	pop	{r4, r5, r6, lr}
   16184:	b	16134 <__assert_fail@plt+0x4da8>
   16188:	bl	1637c <__assert_fail@plt+0x4ff0>
   1618c:	b	16134 <__assert_fail@plt+0x4da8>
   16190:	adds	r3, r0, #0
   16194:	movne	r3, #1
   16198:	cmp	r1, #0
   1619c:	movne	r3, #0
   161a0:	cmp	r3, #0
   161a4:	push	{r4, lr}
   161a8:	bne	161d0 <__assert_fail@plt+0x4e44>
   161ac:	mov	r4, r1
   161b0:	bl	11158 <realloc@plt>
   161b4:	adds	r4, r4, #0
   161b8:	movne	r4, #1
   161bc:	cmp	r0, #0
   161c0:	movne	r4, #0
   161c4:	cmp	r4, #0
   161c8:	popeq	{r4, pc}
   161cc:	bl	1637c <__assert_fail@plt+0x4ff0>
   161d0:	bl	110ec <free@plt>
   161d4:	mov	r0, #0
   161d8:	pop	{r4, pc}
   161dc:	push	{r4, r5, r6, lr}
   161e0:	umull	r4, r5, r1, r2
   161e4:	adds	r3, r5, #0
   161e8:	movne	r3, #1
   161ec:	cmp	r4, #0
   161f0:	blt	16208 <__assert_fail@plt+0x4e7c>
   161f4:	cmp	r3, #0
   161f8:	bne	16208 <__assert_fail@plt+0x4e7c>
   161fc:	mul	r1, r2, r1
   16200:	pop	{r4, r5, r6, lr}
   16204:	b	16190 <__assert_fail@plt+0x4e04>
   16208:	bl	1637c <__assert_fail@plt+0x4ff0>
   1620c:	push	{r4, r5, r6, r7, r8, lr}
   16210:	subs	r7, r0, #0
   16214:	mov	r6, r1
   16218:	mov	r5, r2
   1621c:	ldr	r4, [r1]
   16220:	beq	16254 <__assert_fail@plt+0x4ec8>
   16224:	mov	r1, r2
   16228:	ldr	r0, [pc, #104]	; 16298 <__assert_fail@plt+0x4f0c>
   1622c:	bl	16a20 <_obstack_memory_used@@Base+0x128>
   16230:	cmp	r0, r4
   16234:	bls	16278 <__assert_fail@plt+0x4eec>
   16238:	add	r3, r4, #1
   1623c:	add	r4, r3, r4, lsr #1
   16240:	str	r4, [r6]
   16244:	mul	r1, r5, r4
   16248:	mov	r0, r7
   1624c:	pop	{r4, r5, r6, r7, r8, lr}
   16250:	b	16190 <__assert_fail@plt+0x4e04>
   16254:	cmp	r4, #0
   16258:	beq	1627c <__assert_fail@plt+0x4ef0>
   1625c:	umull	r0, r1, r4, r5
   16260:	adds	r3, r1, #0
   16264:	movne	r3, #1
   16268:	cmp	r0, #0
   1626c:	blt	16278 <__assert_fail@plt+0x4eec>
   16270:	cmp	r3, #0
   16274:	beq	16240 <__assert_fail@plt+0x4eb4>
   16278:	bl	1637c <__assert_fail@plt+0x4ff0>
   1627c:	mov	r1, r2
   16280:	mov	r0, #64	; 0x40
   16284:	bl	16a20 <_obstack_memory_used@@Base+0x128>
   16288:	cmp	r5, #64	; 0x40
   1628c:	movls	r4, r0
   16290:	addhi	r4, r0, #1
   16294:	b	1625c <__assert_fail@plt+0x4ed0>
   16298:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   1629c:	cmp	r0, #0
   162a0:	ldr	r3, [r1]
   162a4:	beq	162c8 <__assert_fail@plt+0x4f3c>
   162a8:	ldr	r2, [pc, #60]	; 162ec <__assert_fail@plt+0x4f60>
   162ac:	cmp	r3, r2
   162b0:	bhi	162e4 <__assert_fail@plt+0x4f58>
   162b4:	add	r2, r3, #1
   162b8:	add	r3, r2, r3, lsr #1
   162bc:	str	r3, [r1]
   162c0:	mov	r1, r3
   162c4:	b	16190 <__assert_fail@plt+0x4e04>
   162c8:	cmp	r3, #0
   162cc:	bne	162e0 <__assert_fail@plt+0x4f54>
   162d0:	mov	r3, #64	; 0x40
   162d4:	str	r3, [r1]
   162d8:	mov	r1, r3
   162dc:	b	16190 <__assert_fail@plt+0x4e04>
   162e0:	bge	162bc <__assert_fail@plt+0x4f30>
   162e4:	push	{r4, lr}
   162e8:	bl	1637c <__assert_fail@plt+0x4ff0>
   162ec:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   162f0:	push	{r4, lr}
   162f4:	mov	r4, r0
   162f8:	bl	16134 <__assert_fail@plt+0x4da8>
   162fc:	mov	r2, r4
   16300:	mov	r1, #0
   16304:	pop	{r4, lr}
   16308:	b	112a8 <memset@plt>
   1630c:	push	{r4, r5, r6, lr}
   16310:	umull	r4, r5, r0, r1
   16314:	adds	r3, r5, #0
   16318:	movne	r3, #1
   1631c:	cmp	r4, #0
   16320:	blt	16338 <__assert_fail@plt+0x4fac>
   16324:	cmp	r3, #0
   16328:	bne	16338 <__assert_fail@plt+0x4fac>
   1632c:	bl	11080 <calloc@plt>
   16330:	cmp	r0, #0
   16334:	popne	{r4, r5, r6, pc}
   16338:	bl	1637c <__assert_fail@plt+0x4ff0>
   1633c:	push	{r4, r5, r6, lr}
   16340:	mov	r4, r1
   16344:	mov	r5, r0
   16348:	mov	r0, r1
   1634c:	bl	16134 <__assert_fail@plt+0x4da8>
   16350:	mov	r2, r4
   16354:	mov	r1, r5
   16358:	pop	{r4, r5, r6, lr}
   1635c:	b	11110 <memcpy@plt>
   16360:	push	{r4, lr}
   16364:	mov	r4, r0
   16368:	bl	11260 <strlen@plt>
   1636c:	add	r1, r0, #1
   16370:	mov	r0, r4
   16374:	pop	{r4, lr}
   16378:	b	1633c <__assert_fail@plt+0x4fb0>
   1637c:	ldr	r3, [pc, #44]	; 163b0 <__assert_fail@plt+0x5024>
   16380:	push	{r4, lr}
   16384:	mov	r2, #5
   16388:	ldr	r1, [pc, #36]	; 163b4 <__assert_fail@plt+0x5028>
   1638c:	mov	r0, #0
   16390:	ldr	r4, [r3]
   16394:	bl	11134 <dcgettext@plt>
   16398:	ldr	r2, [pc, #24]	; 163b8 <__assert_fail@plt+0x502c>
   1639c:	mov	r1, #0
   163a0:	mov	r3, r0
   163a4:	mov	r0, r4
   163a8:	bl	111d0 <error@plt>
   163ac:	bl	11374 <abort@plt>
   163b0:	andeq	r8, r2, r4, lsr #2
   163b4:	andeq	r7, r1, r8, lsl #29
   163b8:	andeq	r7, r1, r0, lsr sl
   163bc:	push	{r4, r5, lr}
   163c0:	sub	sp, sp, #12
   163c4:	mov	r4, r0
   163c8:	bl	112cc <fileno@plt>
   163cc:	cmp	r0, #0
   163d0:	mov	r0, r4
   163d4:	blt	16450 <__assert_fail@plt+0x50c4>
   163d8:	bl	1120c <__freading@plt>
   163dc:	cmp	r0, #0
   163e0:	bne	1641c <__assert_fail@plt+0x5090>
   163e4:	mov	r0, r4
   163e8:	bl	1645c <__assert_fail@plt+0x50d0>
   163ec:	cmp	r0, #0
   163f0:	beq	1644c <__assert_fail@plt+0x50c0>
   163f4:	bl	11284 <__errno_location@plt>
   163f8:	mov	r5, r0
   163fc:	mov	r0, r4
   16400:	ldr	r4, [r5]
   16404:	bl	112f0 <fclose@plt>
   16408:	cmp	r4, #0
   1640c:	mvnne	r0, #0
   16410:	strne	r4, [r5]
   16414:	add	sp, sp, #12
   16418:	pop	{r4, r5, pc}
   1641c:	mov	r0, r4
   16420:	bl	112cc <fileno@plt>
   16424:	mov	r3, #1
   16428:	str	r3, [sp]
   1642c:	mov	r2, #0
   16430:	mov	r3, #0
   16434:	bl	111a0 <lseek64@plt>
   16438:	mvn	r3, #0
   1643c:	mvn	r2, #0
   16440:	cmp	r1, r3
   16444:	cmpeq	r0, r2
   16448:	bne	163e4 <__assert_fail@plt+0x5058>
   1644c:	mov	r0, r4
   16450:	add	sp, sp, #12
   16454:	pop	{r4, r5, lr}
   16458:	b	112f0 <fclose@plt>
   1645c:	push	{r4, lr}
   16460:	subs	r4, r0, #0
   16464:	sub	sp, sp, #8
   16468:	beq	16484 <__assert_fail@plt+0x50f8>
   1646c:	bl	1120c <__freading@plt>
   16470:	cmp	r0, #0
   16474:	beq	16484 <__assert_fail@plt+0x50f8>
   16478:	ldr	r3, [r4]
   1647c:	tst	r3, #256	; 0x100
   16480:	bne	16494 <__assert_fail@plt+0x5108>
   16484:	mov	r0, r4
   16488:	add	sp, sp, #8
   1648c:	pop	{r4, lr}
   16490:	b	110c8 <fflush@plt>
   16494:	mov	r3, #1
   16498:	str	r3, [sp]
   1649c:	mov	r2, #0
   164a0:	mov	r3, #0
   164a4:	mov	r0, r4
   164a8:	bl	164bc <__assert_fail@plt+0x5130>
   164ac:	mov	r0, r4
   164b0:	add	sp, sp, #8
   164b4:	pop	{r4, lr}
   164b8:	b	110c8 <fflush@plt>
   164bc:	push	{r4, r5, r6, r7, r8, lr}
   164c0:	sub	sp, sp, #8
   164c4:	ldmib	r0, {ip, lr}
   164c8:	mov	r4, r0
   164cc:	ldr	r5, [sp, #32]
   164d0:	cmp	lr, ip
   164d4:	beq	164ec <__assert_fail@plt+0x5160>
   164d8:	str	r5, [sp, #32]
   164dc:	mov	r0, r4
   164e0:	add	sp, sp, #8
   164e4:	pop	{r4, r5, r6, r7, r8, lr}
   164e8:	b	112fc <fseeko64@plt>
   164ec:	ldr	lr, [r0, #20]
   164f0:	ldr	ip, [r0, #16]
   164f4:	cmp	lr, ip
   164f8:	bne	164d8 <__assert_fail@plt+0x514c>
   164fc:	ldr	r8, [r0, #36]	; 0x24
   16500:	cmp	r8, #0
   16504:	bne	164d8 <__assert_fail@plt+0x514c>
   16508:	mov	r6, r2
   1650c:	mov	r7, r3
   16510:	bl	112cc <fileno@plt>
   16514:	mov	r2, r6
   16518:	mov	r3, r7
   1651c:	str	r5, [sp]
   16520:	bl	111a0 <lseek64@plt>
   16524:	mvn	r3, #0
   16528:	mvn	r2, #0
   1652c:	cmp	r1, r3
   16530:	cmpeq	r0, r2
   16534:	beq	16554 <__assert_fail@plt+0x51c8>
   16538:	ldr	r3, [r4]
   1653c:	strd	r0, [r4, #80]	; 0x50
   16540:	mov	r0, r8
   16544:	bic	r3, r3, #16
   16548:	str	r3, [r4]
   1654c:	add	sp, sp, #8
   16550:	pop	{r4, r5, r6, r7, r8, pc}
   16554:	mvn	r0, #0
   16558:	b	1654c <__assert_fail@plt+0x51c0>
   1655c:	push	{r4, r5, r6, r7, r8, lr}
   16560:	subs	r7, r0, #0
   16564:	ldr	r5, [pc, #108]	; 165d8 <__assert_fail@plt+0x524c>
   16568:	sub	sp, sp, #8
   1656c:	mov	r8, r1
   16570:	ldr	r1, [r5]
   16574:	moveq	r7, sp
   16578:	str	r1, [sp, #4]
   1657c:	mov	r0, r7
   16580:	mov	r1, r8
   16584:	mov	r6, r2
   16588:	bl	111c4 <mbrtowc@plt>
   1658c:	cmp	r6, #0
   16590:	cmnne	r0, #3
   16594:	mov	r4, r0
   16598:	bhi	165b8 <__assert_fail@plt+0x522c>
   1659c:	ldr	r2, [sp, #4]
   165a0:	ldr	r3, [r5]
   165a4:	mov	r0, r4
   165a8:	cmp	r2, r3
   165ac:	bne	165d4 <__assert_fail@plt+0x5248>
   165b0:	add	sp, sp, #8
   165b4:	pop	{r4, r5, r6, r7, r8, pc}
   165b8:	mov	r0, #0
   165bc:	bl	169a0 <_obstack_memory_used@@Base+0xa8>
   165c0:	cmp	r0, #0
   165c4:	moveq	r4, #1
   165c8:	ldrbeq	r3, [r8]
   165cc:	streq	r3, [r7]
   165d0:	b	1659c <__assert_fail@plt+0x5210>
   165d4:	bl	11140 <__stack_chk_fail@plt>
   165d8:	andeq	r7, r2, r8, lsl #30
   165dc:	ldr	r3, [pc, #52]	; 16618 <__assert_fail@plt+0x528c>
   165e0:	push	{r4, lr}
   165e4:	mov	r2, #5
   165e8:	ldr	r1, [pc, #44]	; 1661c <__assert_fail@plt+0x5290>
   165ec:	mov	r0, #0
   165f0:	ldr	r4, [r3]
   165f4:	bl	11134 <dcgettext@plt>
   165f8:	ldr	r2, [pc, #32]	; 16620 <__assert_fail@plt+0x5294>
   165fc:	mov	r1, #1
   16600:	mov	r3, r0
   16604:	mov	r0, r4
   16608:	bl	112d8 <__fprintf_chk@plt>
   1660c:	ldr	r3, [pc, #16]	; 16624 <__assert_fail@plt+0x5298>
   16610:	ldr	r0, [r3]
   16614:	bl	1123c <exit@plt>
   16618:	andeq	r8, r2, r0, lsl #3
   1661c:	andeq	r7, r1, r8, lsl #29
   16620:	andeq	r7, r1, r8, ror fp
   16624:	andeq	r8, r2, r4, lsr #2
   16628:	ldrb	r2, [r0, #40]	; 0x28
   1662c:	ldr	r3, [r0, #28]
   16630:	tst	r2, #1
   16634:	beq	16640 <__assert_fail@plt+0x52b4>
   16638:	ldr	r0, [r0, #36]	; 0x24
   1663c:	bx	r3
   16640:	mov	r0, r1
   16644:	bx	r3
   16648:	ldrb	r2, [r0, #40]	; 0x28
   1664c:	ldr	r3, [r0, #32]
   16650:	tst	r2, #1
   16654:	beq	16660 <__assert_fail@plt+0x52d4>
   16658:	ldr	r0, [r0, #36]	; 0x24
   1665c:	bx	r3
   16660:	mov	r0, r1
   16664:	bx	r3
   16668:	push	{r4, r5, r6, lr}
   1666c:	subs	r5, r2, #0
   16670:	ldr	r3, [pc, #128]	; 166f8 <__assert_fail@plt+0x536c>
   16674:	subne	r6, r5, #1
   16678:	moveq	r6, #7
   1667c:	moveq	r5, #8
   16680:	cmp	r1, #0
   16684:	moveq	r1, r3
   16688:	str	r6, [r0, #24]
   1668c:	str	r1, [r0]
   16690:	mov	r4, r0
   16694:	bl	16628 <__assert_fail@plt+0x529c>
   16698:	cmp	r0, #0
   1669c:	mov	r3, r0
   166a0:	str	r0, [r4, #4]
   166a4:	beq	166ec <__assert_fail@plt+0x5360>
   166a8:	ldrb	ip, [r4, #40]	; 0x28
   166ac:	add	r1, r0, #8
   166b0:	ldr	r0, [r4]
   166b4:	add	r1, r1, r6
   166b8:	rsb	r2, r5, #0
   166bc:	and	r2, r2, r1
   166c0:	bic	ip, ip, #6
   166c4:	add	r1, r3, r0
   166c8:	mov	lr, #0
   166cc:	str	r2, [r4, #8]
   166d0:	str	r2, [r4, #12]
   166d4:	mov	r0, #1
   166d8:	str	r1, [r3]
   166dc:	str	r1, [r4, #16]
   166e0:	str	lr, [r3, #4]
   166e4:	strb	ip, [r4, #40]	; 0x28
   166e8:	pop	{r4, r5, r6, pc}
   166ec:	ldr	r3, [pc, #8]	; 166fc <__assert_fail@plt+0x5370>
   166f0:	ldr	r3, [r3]
   166f4:	blx	r3
   166f8:	andeq	r0, r0, r8, ror #31
   166fc:	andeq	r8, r2, r8, ror #2

00016700 <_obstack_begin@@Base>:
   16700:	push	{r4, lr}
   16704:	ldrb	lr, [r0, #40]	; 0x28
   16708:	ldr	r4, [sp, #8]
   1670c:	str	r3, [r0, #28]
   16710:	bic	lr, lr, #1
   16714:	str	r4, [r0, #32]
   16718:	strb	lr, [r0, #40]	; 0x28
   1671c:	pop	{r4, lr}
   16720:	b	16668 <__assert_fail@plt+0x52dc>

00016724 <_obstack_begin_1@@Base>:
   16724:	push	{r4, lr}
   16728:	ldrb	lr, [r0, #40]	; 0x28
   1672c:	ldr	r4, [sp, #8]
   16730:	str	r3, [r0, #28]
   16734:	ldr	r3, [sp, #12]
   16738:	orr	lr, lr, #1
   1673c:	str	r4, [r0, #32]
   16740:	strb	lr, [r0, #40]	; 0x28
   16744:	str	r3, [r0, #36]	; 0x24
   16748:	pop	{r4, lr}
   1674c:	b	16668 <__assert_fail@plt+0x52dc>

00016750 <_obstack_newchunk@@Base>:
   16750:	push	{r4, r5, r6, r7, r8, lr}
   16754:	ldr	r2, [r0, #8]
   16758:	ldr	r6, [r0, #12]
   1675c:	ldr	r3, [r0, #24]
   16760:	sub	r6, r6, r2
   16764:	adds	r1, r6, r1
   16768:	ldr	lr, [r0]
   1676c:	movcs	ip, #1
   16770:	movcc	ip, #0
   16774:	adds	r3, r3, r1
   16778:	movcs	r2, #1
   1677c:	movcc	r2, #0
   16780:	add	r4, r3, r6, lsr #3
   16784:	cmp	r3, lr
   16788:	add	r4, r4, #100	; 0x64
   1678c:	movcc	r3, lr
   16790:	cmp	r3, r4
   16794:	eor	ip, ip, #1
   16798:	eor	r2, r2, #1
   1679c:	movcs	r4, r3
   167a0:	tst	ip, r2
   167a4:	ldr	r7, [r0, #4]
   167a8:	beq	16850 <_obstack_newchunk@@Base+0x100>
   167ac:	mov	r1, r4
   167b0:	mov	r5, r0
   167b4:	bl	16628 <__assert_fail@plt+0x529c>
   167b8:	subs	r8, r0, #0
   167bc:	beq	16850 <_obstack_newchunk@@Base+0x100>
   167c0:	ldr	r1, [r5, #24]
   167c4:	mov	r2, r8
   167c8:	add	r3, r8, r4
   167cc:	str	r8, [r5, #4]
   167d0:	str	r7, [r8, #4]
   167d4:	str	r3, [r5, #16]
   167d8:	str	r3, [r2], #8
   167dc:	add	r2, r2, r1
   167e0:	bic	r4, r2, r1
   167e4:	mov	r0, r4
   167e8:	mov	r2, r6
   167ec:	ldr	r1, [r5, #8]
   167f0:	bl	11110 <memcpy@plt>
   167f4:	ldrb	r3, [r5, #40]	; 0x28
   167f8:	tst	r3, #2
   167fc:	bne	1681c <_obstack_newchunk@@Base+0xcc>
   16800:	ldr	r2, [r5, #24]
   16804:	add	r3, r7, #8
   16808:	add	r3, r3, r2
   1680c:	ldr	r1, [r5, #8]
   16810:	bic	r3, r3, r2
   16814:	cmp	r1, r3
   16818:	beq	16838 <_obstack_newchunk@@Base+0xe8>
   1681c:	ldrb	r3, [r5, #40]	; 0x28
   16820:	add	r6, r4, r6
   16824:	str	r6, [r5, #12]
   16828:	bic	r3, r3, #2
   1682c:	str	r4, [r5, #8]
   16830:	strb	r3, [r5, #40]	; 0x28
   16834:	pop	{r4, r5, r6, r7, r8, pc}
   16838:	ldr	r3, [r7, #4]
   1683c:	mov	r1, r7
   16840:	str	r3, [r8, #4]
   16844:	mov	r0, r5
   16848:	bl	16648 <__assert_fail@plt+0x52bc>
   1684c:	b	1681c <_obstack_newchunk@@Base+0xcc>
   16850:	ldr	r3, [pc, #4]	; 1685c <_obstack_newchunk@@Base+0x10c>
   16854:	ldr	r3, [r3]
   16858:	blx	r3
   1685c:	andeq	r8, r2, r8, ror #2

00016860 <_obstack_allocated_p@@Base>:
   16860:	ldr	r0, [r0, #4]
   16864:	cmp	r0, #0
   16868:	bxeq	lr
   1686c:	cmp	r1, r0
   16870:	bls	16860 <_obstack_allocated_p@@Base>
   16874:	ldr	r3, [r0]
   16878:	cmp	r3, r1
   1687c:	bcc	16860 <_obstack_allocated_p@@Base>
   16880:	mov	r0, #1
   16884:	bx	lr

00016888 <_obstack_free@@Base>:
   16888:	push	{r4, r5, r6, lr}
   1688c:	mov	r6, r1
   16890:	ldr	r4, [r0, #4]
   16894:	cmp	r4, #0
   16898:	movne	r5, r0
   1689c:	beq	168d8 <_obstack_free@@Base+0x50>
   168a0:	cmp	r4, r6
   168a4:	bcs	168b4 <_obstack_free@@Base+0x2c>
   168a8:	ldr	r2, [r4]
   168ac:	cmp	r2, r6
   168b0:	bcs	168e4 <_obstack_free@@Base+0x5c>
   168b4:	mov	r1, r4
   168b8:	mov	r0, r5
   168bc:	ldr	r4, [r4, #4]
   168c0:	bl	16648 <__assert_fail@plt+0x52bc>
   168c4:	ldrb	r2, [r5, #40]	; 0x28
   168c8:	cmp	r4, #0
   168cc:	orr	r2, r2, #2
   168d0:	strb	r2, [r5, #40]	; 0x28
   168d4:	bne	168a0 <_obstack_free@@Base+0x18>
   168d8:	cmp	r6, #0
   168dc:	popeq	{r4, r5, r6, pc}
   168e0:	bl	11374 <abort@plt>
   168e4:	str	r6, [r5, #12]
   168e8:	str	r6, [r5, #8]
   168ec:	str	r2, [r5, #16]
   168f0:	str	r4, [r5, #4]
   168f4:	pop	{r4, r5, r6, pc}

000168f8 <_obstack_memory_used@@Base>:
   168f8:	ldr	r3, [r0, #4]
   168fc:	cmp	r3, #0
   16900:	beq	16924 <_obstack_memory_used@@Base+0x2c>
   16904:	mov	r0, #0
   16908:	ldr	r2, [r3]
   1690c:	sub	r2, r2, r3
   16910:	ldr	r3, [r3, #4]
   16914:	add	r0, r0, r2
   16918:	cmp	r3, #0
   1691c:	bne	16908 <_obstack_memory_used@@Base+0x10>
   16920:	bx	lr
   16924:	mov	r0, r3
   16928:	bx	lr
   1692c:	push	{r4, r5, r6, lr}
   16930:	mov	r4, r0
   16934:	bl	111b8 <__fpending@plt>
   16938:	ldr	r5, [r4]
   1693c:	and	r5, r5, #32
   16940:	mov	r6, r0
   16944:	mov	r0, r4
   16948:	bl	163bc <__assert_fail@plt+0x5030>
   1694c:	cmp	r5, #0
   16950:	mov	r4, r0
   16954:	bne	16980 <_obstack_memory_used@@Base+0x88>
   16958:	cmp	r0, #0
   1695c:	beq	16978 <_obstack_memory_used@@Base+0x80>
   16960:	cmp	r6, #0
   16964:	bne	16998 <_obstack_memory_used@@Base+0xa0>
   16968:	bl	11284 <__errno_location@plt>
   1696c:	ldr	r4, [r0]
   16970:	subs	r4, r4, #9
   16974:	mvnne	r4, #0
   16978:	mov	r0, r4
   1697c:	pop	{r4, r5, r6, pc}
   16980:	cmp	r0, #0
   16984:	bne	16998 <_obstack_memory_used@@Base+0xa0>
   16988:	bl	11284 <__errno_location@plt>
   1698c:	str	r4, [r0]
   16990:	mvn	r4, #0
   16994:	b	16978 <_obstack_memory_used@@Base+0x80>
   16998:	mvn	r4, #0
   1699c:	b	16978 <_obstack_memory_used@@Base+0x80>
   169a0:	push	{r4, lr}
   169a4:	mov	r1, #0
   169a8:	bl	11314 <setlocale@plt>
   169ac:	subs	r4, r0, #0
   169b0:	beq	169dc <_obstack_memory_used@@Base+0xe4>
   169b4:	ldr	r1, [pc, #40]	; 169e4 <_obstack_memory_used@@Base+0xec>
   169b8:	bl	110a4 <strcmp@plt>
   169bc:	cmp	r0, #0
   169c0:	popeq	{r4, pc}
   169c4:	mov	r0, r4
   169c8:	ldr	r1, [pc, #24]	; 169e8 <_obstack_memory_used@@Base+0xf0>
   169cc:	bl	110a4 <strcmp@plt>
   169d0:	adds	r0, r0, #0
   169d4:	movne	r0, #1
   169d8:	pop	{r4, pc}
   169dc:	mov	r0, #1
   169e0:	pop	{r4, pc}
   169e4:	muleq	r1, ip, lr
   169e8:	andeq	r7, r1, r0, lsr #29
   169ec:	push	{r4, lr}
   169f0:	mov	r0, #14
   169f4:	bl	1132c <nl_langinfo@plt>
   169f8:	cmp	r0, #0
   169fc:	beq	16a14 <_obstack_memory_used@@Base+0x11c>
   16a00:	ldrb	r2, [r0]
   16a04:	ldr	r3, [pc, #16]	; 16a1c <_obstack_memory_used@@Base+0x124>
   16a08:	cmp	r2, #0
   16a0c:	moveq	r0, r3
   16a10:	pop	{r4, pc}
   16a14:	ldr	r0, [pc]	; 16a1c <_obstack_memory_used@@Base+0x124>
   16a18:	pop	{r4, pc}
   16a1c:	andeq	r7, r1, r8, lsr #29
   16a20:	subs	r2, r1, #1
   16a24:	bxeq	lr
   16a28:	bcc	16c00 <_obstack_memory_used@@Base+0x308>
   16a2c:	cmp	r0, r1
   16a30:	bls	16be4 <_obstack_memory_used@@Base+0x2ec>
   16a34:	tst	r1, r2
   16a38:	beq	16bf0 <_obstack_memory_used@@Base+0x2f8>
   16a3c:	clz	r3, r0
   16a40:	clz	r2, r1
   16a44:	sub	r3, r2, r3
   16a48:	rsbs	r3, r3, #31
   16a4c:	addne	r3, r3, r3, lsl #1
   16a50:	mov	r2, #0
   16a54:	addne	pc, pc, r3, lsl #2
   16a58:	nop			; (mov r0, r0)
   16a5c:	cmp	r0, r1, lsl #31
   16a60:	adc	r2, r2, r2
   16a64:	subcs	r0, r0, r1, lsl #31
   16a68:	cmp	r0, r1, lsl #30
   16a6c:	adc	r2, r2, r2
   16a70:	subcs	r0, r0, r1, lsl #30
   16a74:	cmp	r0, r1, lsl #29
   16a78:	adc	r2, r2, r2
   16a7c:	subcs	r0, r0, r1, lsl #29
   16a80:	cmp	r0, r1, lsl #28
   16a84:	adc	r2, r2, r2
   16a88:	subcs	r0, r0, r1, lsl #28
   16a8c:	cmp	r0, r1, lsl #27
   16a90:	adc	r2, r2, r2
   16a94:	subcs	r0, r0, r1, lsl #27
   16a98:	cmp	r0, r1, lsl #26
   16a9c:	adc	r2, r2, r2
   16aa0:	subcs	r0, r0, r1, lsl #26
   16aa4:	cmp	r0, r1, lsl #25
   16aa8:	adc	r2, r2, r2
   16aac:	subcs	r0, r0, r1, lsl #25
   16ab0:	cmp	r0, r1, lsl #24
   16ab4:	adc	r2, r2, r2
   16ab8:	subcs	r0, r0, r1, lsl #24
   16abc:	cmp	r0, r1, lsl #23
   16ac0:	adc	r2, r2, r2
   16ac4:	subcs	r0, r0, r1, lsl #23
   16ac8:	cmp	r0, r1, lsl #22
   16acc:	adc	r2, r2, r2
   16ad0:	subcs	r0, r0, r1, lsl #22
   16ad4:	cmp	r0, r1, lsl #21
   16ad8:	adc	r2, r2, r2
   16adc:	subcs	r0, r0, r1, lsl #21
   16ae0:	cmp	r0, r1, lsl #20
   16ae4:	adc	r2, r2, r2
   16ae8:	subcs	r0, r0, r1, lsl #20
   16aec:	cmp	r0, r1, lsl #19
   16af0:	adc	r2, r2, r2
   16af4:	subcs	r0, r0, r1, lsl #19
   16af8:	cmp	r0, r1, lsl #18
   16afc:	adc	r2, r2, r2
   16b00:	subcs	r0, r0, r1, lsl #18
   16b04:	cmp	r0, r1, lsl #17
   16b08:	adc	r2, r2, r2
   16b0c:	subcs	r0, r0, r1, lsl #17
   16b10:	cmp	r0, r1, lsl #16
   16b14:	adc	r2, r2, r2
   16b18:	subcs	r0, r0, r1, lsl #16
   16b1c:	cmp	r0, r1, lsl #15
   16b20:	adc	r2, r2, r2
   16b24:	subcs	r0, r0, r1, lsl #15
   16b28:	cmp	r0, r1, lsl #14
   16b2c:	adc	r2, r2, r2
   16b30:	subcs	r0, r0, r1, lsl #14
   16b34:	cmp	r0, r1, lsl #13
   16b38:	adc	r2, r2, r2
   16b3c:	subcs	r0, r0, r1, lsl #13
   16b40:	cmp	r0, r1, lsl #12
   16b44:	adc	r2, r2, r2
   16b48:	subcs	r0, r0, r1, lsl #12
   16b4c:	cmp	r0, r1, lsl #11
   16b50:	adc	r2, r2, r2
   16b54:	subcs	r0, r0, r1, lsl #11
   16b58:	cmp	r0, r1, lsl #10
   16b5c:	adc	r2, r2, r2
   16b60:	subcs	r0, r0, r1, lsl #10
   16b64:	cmp	r0, r1, lsl #9
   16b68:	adc	r2, r2, r2
   16b6c:	subcs	r0, r0, r1, lsl #9
   16b70:	cmp	r0, r1, lsl #8
   16b74:	adc	r2, r2, r2
   16b78:	subcs	r0, r0, r1, lsl #8
   16b7c:	cmp	r0, r1, lsl #7
   16b80:	adc	r2, r2, r2
   16b84:	subcs	r0, r0, r1, lsl #7
   16b88:	cmp	r0, r1, lsl #6
   16b8c:	adc	r2, r2, r2
   16b90:	subcs	r0, r0, r1, lsl #6
   16b94:	cmp	r0, r1, lsl #5
   16b98:	adc	r2, r2, r2
   16b9c:	subcs	r0, r0, r1, lsl #5
   16ba0:	cmp	r0, r1, lsl #4
   16ba4:	adc	r2, r2, r2
   16ba8:	subcs	r0, r0, r1, lsl #4
   16bac:	cmp	r0, r1, lsl #3
   16bb0:	adc	r2, r2, r2
   16bb4:	subcs	r0, r0, r1, lsl #3
   16bb8:	cmp	r0, r1, lsl #2
   16bbc:	adc	r2, r2, r2
   16bc0:	subcs	r0, r0, r1, lsl #2
   16bc4:	cmp	r0, r1, lsl #1
   16bc8:	adc	r2, r2, r2
   16bcc:	subcs	r0, r0, r1, lsl #1
   16bd0:	cmp	r0, r1
   16bd4:	adc	r2, r2, r2
   16bd8:	subcs	r0, r0, r1
   16bdc:	mov	r0, r2
   16be0:	bx	lr
   16be4:	moveq	r0, #1
   16be8:	movne	r0, #0
   16bec:	bx	lr
   16bf0:	clz	r2, r1
   16bf4:	rsb	r2, r2, #31
   16bf8:	lsr	r0, r0, r2
   16bfc:	bx	lr
   16c00:	cmp	r0, #0
   16c04:	mvnne	r0, #0
   16c08:	b	17028 <_obstack_memory_used@@Base+0x730>
   16c0c:	cmp	r1, #0
   16c10:	beq	16c00 <_obstack_memory_used@@Base+0x308>
   16c14:	push	{r0, r1, lr}
   16c18:	bl	16a20 <_obstack_memory_used@@Base+0x128>
   16c1c:	pop	{r1, r2, lr}
   16c20:	mul	r3, r2, r0
   16c24:	sub	r1, r1, r3
   16c28:	bx	lr
   16c2c:	eor	r1, r1, #-2147483648	; 0x80000000
   16c30:	b	16c38 <_obstack_memory_used@@Base+0x340>
   16c34:	eor	r3, r3, #-2147483648	; 0x80000000
   16c38:	push	{r4, r5, lr}
   16c3c:	lsl	r4, r1, #1
   16c40:	lsl	r5, r3, #1
   16c44:	teq	r4, r5
   16c48:	teqeq	r0, r2
   16c4c:	orrsne	ip, r4, r0
   16c50:	orrsne	ip, r5, r2
   16c54:	mvnsne	ip, r4, asr #21
   16c58:	mvnsne	ip, r5, asr #21
   16c5c:	beq	16e48 <_obstack_memory_used@@Base+0x550>
   16c60:	lsr	r4, r4, #21
   16c64:	rsbs	r5, r4, r5, lsr #21
   16c68:	rsblt	r5, r5, #0
   16c6c:	ble	16c8c <_obstack_memory_used@@Base+0x394>
   16c70:	add	r4, r4, r5
   16c74:	eor	r2, r0, r2
   16c78:	eor	r3, r1, r3
   16c7c:	eor	r0, r2, r0
   16c80:	eor	r1, r3, r1
   16c84:	eor	r2, r0, r2
   16c88:	eor	r3, r1, r3
   16c8c:	cmp	r5, #54	; 0x36
   16c90:	pophi	{r4, r5, pc}
   16c94:	tst	r1, #-2147483648	; 0x80000000
   16c98:	lsl	r1, r1, #12
   16c9c:	mov	ip, #1048576	; 0x100000
   16ca0:	orr	r1, ip, r1, lsr #12
   16ca4:	beq	16cb0 <_obstack_memory_used@@Base+0x3b8>
   16ca8:	rsbs	r0, r0, #0
   16cac:	rsc	r1, r1, #0
   16cb0:	tst	r3, #-2147483648	; 0x80000000
   16cb4:	lsl	r3, r3, #12
   16cb8:	orr	r3, ip, r3, lsr #12
   16cbc:	beq	16cc8 <_obstack_memory_used@@Base+0x3d0>
   16cc0:	rsbs	r2, r2, #0
   16cc4:	rsc	r3, r3, #0
   16cc8:	teq	r4, r5
   16ccc:	beq	16e30 <_obstack_memory_used@@Base+0x538>
   16cd0:	sub	r4, r4, #1
   16cd4:	rsbs	lr, r5, #32
   16cd8:	blt	16cf4 <_obstack_memory_used@@Base+0x3fc>
   16cdc:	lsl	ip, r2, lr
   16ce0:	adds	r0, r0, r2, lsr r5
   16ce4:	adc	r1, r1, #0
   16ce8:	adds	r0, r0, r3, lsl lr
   16cec:	adcs	r1, r1, r3, asr r5
   16cf0:	b	16d10 <_obstack_memory_used@@Base+0x418>
   16cf4:	sub	r5, r5, #32
   16cf8:	add	lr, lr, #32
   16cfc:	cmp	r2, #1
   16d00:	lsl	ip, r3, lr
   16d04:	orrcs	ip, ip, #2
   16d08:	adds	r0, r0, r3, asr r5
   16d0c:	adcs	r1, r1, r3, asr #31
   16d10:	and	r5, r1, #-2147483648	; 0x80000000
   16d14:	bpl	16d24 <_obstack_memory_used@@Base+0x42c>
   16d18:	rsbs	ip, ip, #0
   16d1c:	rscs	r0, r0, #0
   16d20:	rsc	r1, r1, #0
   16d24:	cmp	r1, #1048576	; 0x100000
   16d28:	bcc	16d68 <_obstack_memory_used@@Base+0x470>
   16d2c:	cmp	r1, #2097152	; 0x200000
   16d30:	bcc	16d50 <_obstack_memory_used@@Base+0x458>
   16d34:	lsrs	r1, r1, #1
   16d38:	rrxs	r0, r0
   16d3c:	rrx	ip, ip
   16d40:	add	r4, r4, #1
   16d44:	lsl	r2, r4, #21
   16d48:	cmn	r2, #4194304	; 0x400000
   16d4c:	bcs	16ea8 <_obstack_memory_used@@Base+0x5b0>
   16d50:	cmp	ip, #-2147483648	; 0x80000000
   16d54:	lsrseq	ip, r0, #1
   16d58:	adcs	r0, r0, #0
   16d5c:	adc	r1, r1, r4, lsl #20
   16d60:	orr	r1, r1, r5
   16d64:	pop	{r4, r5, pc}
   16d68:	lsls	ip, ip, #1
   16d6c:	adcs	r0, r0, r0
   16d70:	adc	r1, r1, r1
   16d74:	tst	r1, #1048576	; 0x100000
   16d78:	sub	r4, r4, #1
   16d7c:	bne	16d50 <_obstack_memory_used@@Base+0x458>
   16d80:	teq	r1, #0
   16d84:	moveq	r1, r0
   16d88:	moveq	r0, #0
   16d8c:	clz	r3, r1
   16d90:	addeq	r3, r3, #32
   16d94:	sub	r3, r3, #11
   16d98:	subs	r2, r3, #32
   16d9c:	bge	16dc0 <_obstack_memory_used@@Base+0x4c8>
   16da0:	adds	r2, r2, #12
   16da4:	ble	16dbc <_obstack_memory_used@@Base+0x4c4>
   16da8:	add	ip, r2, #20
   16dac:	rsb	r2, r2, #12
   16db0:	lsl	r0, r1, ip
   16db4:	lsr	r1, r1, r2
   16db8:	b	16dd0 <_obstack_memory_used@@Base+0x4d8>
   16dbc:	add	r2, r2, #20
   16dc0:	rsble	ip, r2, #32
   16dc4:	lsl	r1, r1, r2
   16dc8:	orrle	r1, r1, r0, lsr ip
   16dcc:	lslle	r0, r0, r2
   16dd0:	subs	r4, r4, r3
   16dd4:	addge	r1, r1, r4, lsl #20
   16dd8:	orrge	r1, r1, r5
   16ddc:	popge	{r4, r5, pc}
   16de0:	mvn	r4, r4
   16de4:	subs	r4, r4, #31
   16de8:	bge	16e24 <_obstack_memory_used@@Base+0x52c>
   16dec:	adds	r4, r4, #12
   16df0:	bgt	16e0c <_obstack_memory_used@@Base+0x514>
   16df4:	add	r4, r4, #20
   16df8:	rsb	r2, r4, #32
   16dfc:	lsr	r0, r0, r4
   16e00:	orr	r0, r0, r1, lsl r2
   16e04:	orr	r1, r5, r1, lsr r4
   16e08:	pop	{r4, r5, pc}
   16e0c:	rsb	r4, r4, #12
   16e10:	rsb	r2, r4, #32
   16e14:	lsr	r0, r0, r2
   16e18:	orr	r0, r0, r1, lsl r4
   16e1c:	mov	r1, r5
   16e20:	pop	{r4, r5, pc}
   16e24:	lsr	r0, r1, r4
   16e28:	mov	r1, r5
   16e2c:	pop	{r4, r5, pc}
   16e30:	teq	r4, #0
   16e34:	eor	r3, r3, #1048576	; 0x100000
   16e38:	eoreq	r1, r1, #1048576	; 0x100000
   16e3c:	addeq	r4, r4, #1
   16e40:	subne	r5, r5, #1
   16e44:	b	16cd0 <_obstack_memory_used@@Base+0x3d8>
   16e48:	mvns	ip, r4, asr #21
   16e4c:	mvnsne	ip, r5, asr #21
   16e50:	beq	16eb8 <_obstack_memory_used@@Base+0x5c0>
   16e54:	teq	r4, r5
   16e58:	teqeq	r0, r2
   16e5c:	beq	16e70 <_obstack_memory_used@@Base+0x578>
   16e60:	orrs	ip, r4, r0
   16e64:	moveq	r1, r3
   16e68:	moveq	r0, r2
   16e6c:	pop	{r4, r5, pc}
   16e70:	teq	r1, r3
   16e74:	movne	r1, #0
   16e78:	movne	r0, #0
   16e7c:	popne	{r4, r5, pc}
   16e80:	lsrs	ip, r4, #21
   16e84:	bne	16e98 <_obstack_memory_used@@Base+0x5a0>
   16e88:	lsls	r0, r0, #1
   16e8c:	adcs	r1, r1, r1
   16e90:	orrcs	r1, r1, #-2147483648	; 0x80000000
   16e94:	pop	{r4, r5, pc}
   16e98:	adds	r4, r4, #4194304	; 0x400000
   16e9c:	addcc	r1, r1, #1048576	; 0x100000
   16ea0:	popcc	{r4, r5, pc}
   16ea4:	and	r5, r1, #-2147483648	; 0x80000000
   16ea8:	orr	r1, r5, #2130706432	; 0x7f000000
   16eac:	orr	r1, r1, #15728640	; 0xf00000
   16eb0:	mov	r0, #0
   16eb4:	pop	{r4, r5, pc}
   16eb8:	mvns	ip, r4, asr #21
   16ebc:	movne	r1, r3
   16ec0:	movne	r0, r2
   16ec4:	mvnseq	ip, r5, asr #21
   16ec8:	movne	r3, r1
   16ecc:	movne	r2, r0
   16ed0:	orrs	r4, r0, r1, lsl #12
   16ed4:	orrseq	r5, r2, r3, lsl #12
   16ed8:	teqeq	r1, r3
   16edc:	orrne	r1, r1, #524288	; 0x80000
   16ee0:	pop	{r4, r5, pc}
   16ee4:	teq	r0, #0
   16ee8:	moveq	r1, #0
   16eec:	bxeq	lr
   16ef0:	push	{r4, r5, lr}
   16ef4:	mov	r4, #1024	; 0x400
   16ef8:	add	r4, r4, #50	; 0x32
   16efc:	mov	r5, #0
   16f00:	mov	r1, #0
   16f04:	b	16d80 <_obstack_memory_used@@Base+0x488>
   16f08:	teq	r0, #0
   16f0c:	moveq	r1, #0
   16f10:	bxeq	lr
   16f14:	push	{r4, r5, lr}
   16f18:	mov	r4, #1024	; 0x400
   16f1c:	add	r4, r4, #50	; 0x32
   16f20:	ands	r5, r0, #-2147483648	; 0x80000000
   16f24:	rsbmi	r0, r0, #0
   16f28:	mov	r1, #0
   16f2c:	b	16d80 <_obstack_memory_used@@Base+0x488>
   16f30:	lsls	r2, r0, #1
   16f34:	asr	r1, r2, #3
   16f38:	rrx	r1, r1
   16f3c:	lsl	r0, r2, #28
   16f40:	andsne	r3, r2, #-16777216	; 0xff000000
   16f44:	teqne	r3, #-16777216	; 0xff000000
   16f48:	eorne	r1, r1, #939524096	; 0x38000000
   16f4c:	bxne	lr
   16f50:	bics	r2, r2, #-16777216	; 0xff000000
   16f54:	bxeq	lr
   16f58:	teq	r3, #-16777216	; 0xff000000
   16f5c:	orreq	r1, r1, #524288	; 0x80000
   16f60:	bxeq	lr
   16f64:	push	{r4, r5, lr}
   16f68:	mov	r4, #896	; 0x380
   16f6c:	and	r5, r1, #-2147483648	; 0x80000000
   16f70:	bic	r1, r1, #-2147483648	; 0x80000000
   16f74:	b	16d80 <_obstack_memory_used@@Base+0x488>
   16f78:	orrs	r2, r0, r1
   16f7c:	bxeq	lr
   16f80:	push	{r4, r5, lr}
   16f84:	mov	r5, #0
   16f88:	b	16fa8 <_obstack_memory_used@@Base+0x6b0>
   16f8c:	orrs	r2, r0, r1
   16f90:	bxeq	lr
   16f94:	push	{r4, r5, lr}
   16f98:	ands	r5, r1, #-2147483648	; 0x80000000
   16f9c:	bpl	16fa8 <_obstack_memory_used@@Base+0x6b0>
   16fa0:	rsbs	r0, r0, #0
   16fa4:	rsc	r1, r1, #0
   16fa8:	mov	r4, #1024	; 0x400
   16fac:	add	r4, r4, #50	; 0x32
   16fb0:	lsrs	ip, r1, #22
   16fb4:	beq	16d24 <_obstack_memory_used@@Base+0x42c>
   16fb8:	mov	r2, #3
   16fbc:	lsrs	ip, ip, #3
   16fc0:	addne	r2, r2, #3
   16fc4:	lsrs	ip, ip, #3
   16fc8:	addne	r2, r2, #3
   16fcc:	add	r2, r2, ip, lsr #3
   16fd0:	rsb	r3, r2, #32
   16fd4:	lsl	ip, r0, r3
   16fd8:	lsr	r0, r0, r2
   16fdc:	orr	r0, r0, r1, lsl r3
   16fe0:	lsr	r1, r1, r2
   16fe4:	add	r4, r4, r2
   16fe8:	b	16d24 <_obstack_memory_used@@Base+0x42c>
   16fec:	cmp	r3, #0
   16ff0:	cmpeq	r2, #0
   16ff4:	bne	1700c <_obstack_memory_used@@Base+0x714>
   16ff8:	cmp	r1, #0
   16ffc:	cmpeq	r0, #0
   17000:	mvnne	r1, #0
   17004:	mvnne	r0, #0
   17008:	b	17028 <_obstack_memory_used@@Base+0x730>
   1700c:	sub	sp, sp, #8
   17010:	push	{sp, lr}
   17014:	bl	17038 <_obstack_memory_used@@Base+0x740>
   17018:	ldr	lr, [sp, #4]
   1701c:	add	sp, sp, #8
   17020:	pop	{r2, r3}
   17024:	bx	lr
   17028:	push	{r1, lr}
   1702c:	mov	r0, #8
   17030:	bl	11098 <raise@plt>
   17034:	pop	{r1, pc}
   17038:	cmp	r1, r3
   1703c:	cmpeq	r0, r2
   17040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17044:	mov	r4, r0
   17048:	movcc	r0, #0
   1704c:	mov	r5, r1
   17050:	ldr	lr, [sp, #36]	; 0x24
   17054:	movcc	r1, r0
   17058:	bcc	17154 <_obstack_memory_used@@Base+0x85c>
   1705c:	cmp	r3, #0
   17060:	clzeq	ip, r2
   17064:	clzne	ip, r3
   17068:	addeq	ip, ip, #32
   1706c:	cmp	r5, #0
   17070:	clzeq	r1, r4
   17074:	addeq	r1, r1, #32
   17078:	clzne	r1, r5
   1707c:	sub	ip, ip, r1
   17080:	sub	sl, ip, #32
   17084:	lsl	r9, r3, ip
   17088:	rsb	fp, ip, #32
   1708c:	orr	r9, r9, r2, lsl sl
   17090:	orr	r9, r9, r2, lsr fp
   17094:	lsl	r8, r2, ip
   17098:	cmp	r5, r9
   1709c:	cmpeq	r4, r8
   170a0:	movcc	r0, #0
   170a4:	movcc	r1, r0
   170a8:	bcc	170c4 <_obstack_memory_used@@Base+0x7cc>
   170ac:	mov	r0, #1
   170b0:	subs	r4, r4, r8
   170b4:	lsl	r1, r0, sl
   170b8:	orr	r1, r1, r0, lsr fp
   170bc:	lsl	r0, r0, ip
   170c0:	sbc	r5, r5, r9
   170c4:	cmp	ip, #0
   170c8:	beq	17154 <_obstack_memory_used@@Base+0x85c>
   170cc:	lsr	r6, r8, #1
   170d0:	orr	r6, r6, r9, lsl #31
   170d4:	lsr	r7, r9, #1
   170d8:	mov	r2, ip
   170dc:	b	17100 <_obstack_memory_used@@Base+0x808>
   170e0:	subs	r3, r4, r6
   170e4:	sbc	r8, r5, r7
   170e8:	adds	r3, r3, r3
   170ec:	adc	r8, r8, r8
   170f0:	adds	r4, r3, #1
   170f4:	adc	r5, r8, #0
   170f8:	subs	r2, r2, #1
   170fc:	beq	1711c <_obstack_memory_used@@Base+0x824>
   17100:	cmp	r5, r7
   17104:	cmpeq	r4, r6
   17108:	bcs	170e0 <_obstack_memory_used@@Base+0x7e8>
   1710c:	adds	r4, r4, r4
   17110:	adc	r5, r5, r5
   17114:	subs	r2, r2, #1
   17118:	bne	17100 <_obstack_memory_used@@Base+0x808>
   1711c:	lsr	r3, r4, ip
   17120:	orr	r3, r3, r5, lsl fp
   17124:	lsr	r2, r5, ip
   17128:	orr	r3, r3, r5, lsr sl
   1712c:	adds	r0, r0, r4
   17130:	mov	r4, r3
   17134:	lsl	r3, r2, ip
   17138:	orr	r3, r3, r4, lsl sl
   1713c:	lsl	ip, r4, ip
   17140:	orr	r3, r3, r4, lsr fp
   17144:	adc	r1, r1, r5
   17148:	subs	r0, r0, ip
   1714c:	mov	r5, r2
   17150:	sbc	r1, r1, r3
   17154:	cmp	lr, #0
   17158:	strdne	r4, [lr]
   1715c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17160:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17164:	mov	r7, r0
   17168:	ldr	r6, [pc, #72]	; 171b8 <_obstack_memory_used@@Base+0x8c0>
   1716c:	ldr	r5, [pc, #72]	; 171bc <_obstack_memory_used@@Base+0x8c4>
   17170:	add	r6, pc, r6
   17174:	add	r5, pc, r5
   17178:	sub	r6, r6, r5
   1717c:	mov	r8, r1
   17180:	mov	r9, r2
   17184:	bl	11060 <calloc@plt-0x20>
   17188:	asrs	r6, r6, #2
   1718c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17190:	mov	r4, #0
   17194:	add	r4, r4, #1
   17198:	ldr	r3, [r5], #4
   1719c:	mov	r2, r9
   171a0:	mov	r1, r8
   171a4:	mov	r0, r7
   171a8:	blx	r3
   171ac:	cmp	r6, r4
   171b0:	bne	17194 <_obstack_memory_used@@Base+0x89c>
   171b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171b8:	andeq	r0, r1, ip, lsl #27
   171bc:	andeq	r0, r1, r4, lsl #27
   171c0:	bx	lr
   171c4:	ldr	r3, [pc, #12]	; 171d8 <_obstack_memory_used@@Base+0x8e0>
   171c8:	mov	r1, #0
   171cc:	add	r3, pc, r3
   171d0:	ldr	r2, [r3]
   171d4:	b	11290 <__cxa_atexit@plt>
   171d8:	andeq	r0, r1, r8, asr #30

Disassembly of section .fini:

000171dc <.fini>:
   171dc:	push	{r3, lr}
   171e0:	pop	{r3, pc}
