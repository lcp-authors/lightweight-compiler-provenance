
raspbian-preinstalled/lsblk:     file format elf32-littlearm


Disassembly of section .init:

00012498 <.init>:
   12498:	push	{r3, lr}
   1249c:	bl	142dc <__assert_fail@plt+0x165c>
   124a0:	pop	{r3, pc}

Disassembly of section .plt:

000124a4 <mnt_table_set_parser_errcb@plt-0x14>:
   124a4:	push	{lr}		; (str lr, [sp, #-4]!)
   124a8:	ldr	lr, [pc, #4]	; 124b4 <mnt_table_set_parser_errcb@plt-0x4>
   124ac:	add	lr, pc, lr
   124b0:	ldr	pc, [lr, #8]!
   124b4:	muleq	r2, r8, r8

000124b8 <mnt_table_set_parser_errcb@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #135168	; 0x21000
   124c0:	ldr	pc, [ip, #2200]!	; 0x898

000124c4 <fdopen@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #135168	; 0x21000
   124cc:	ldr	pc, [ip, #2192]!	; 0x890

000124d0 <scols_column_set_json_type@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #135168	; 0x21000
   124d8:	ldr	pc, [ip, #2184]!	; 0x888

000124dc <calloc@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #135168	; 0x21000
   124e4:	ldr	pc, [ip, #2176]!	; 0x880

000124e8 <strstr@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #135168	; 0x21000
   124f0:	ldr	pc, [ip, #2168]!	; 0x878

000124f4 <raise@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #135168	; 0x21000
   124fc:	ldr	pc, [ip, #2160]!	; 0x870

00012500 <scols_column_set_cmpfunc@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #135168	; 0x21000
   12508:	ldr	pc, [ip, #2152]!	; 0x868

0001250c <mnt_unref_table@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #135168	; 0x21000
   12514:	ldr	pc, [ip, #2144]!	; 0x860

00012518 <scols_line_refer_data@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #135168	; 0x21000
   12520:	ldr	pc, [ip, #2136]!	; 0x858

00012524 <strcmp@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #135168	; 0x21000
   1252c:	ldr	pc, [ip, #2128]!	; 0x850

00012530 <rewinddir@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #135168	; 0x21000
   12538:	ldr	pc, [ip, #2120]!	; 0x848

0001253c <strtol@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #135168	; 0x21000
   12544:	ldr	pc, [ip, #2112]!	; 0x840

00012548 <scols_line_get_column_cell@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #135168	; 0x21000
   12550:	ldr	pc, [ip, #2104]!	; 0x838

00012554 <strcspn@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #135168	; 0x21000
   1255c:	ldr	pc, [ip, #2096]!	; 0x830

00012560 <scols_table_set_name@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #135168	; 0x21000
   12568:	ldr	pc, [ip, #2088]!	; 0x828

0001256c <blkid_probe_lookup_value@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #135168	; 0x21000
   12574:	ldr	pc, [ip, #2080]!	; 0x820

00012578 <scols_table_enable_noheadings@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #135168	; 0x21000
   12580:	ldr	pc, [ip, #2072]!	; 0x818

00012584 <read@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #135168	; 0x21000
   1258c:	ldr	pc, [ip, #2064]!	; 0x810

00012590 <scols_table_new_column@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #135168	; 0x21000
   12598:	ldr	pc, [ip, #2056]!	; 0x808

0001259c <blkid_new_probe_from_filename@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #135168	; 0x21000
   125a4:	ldr	pc, [ip, #2048]!	; 0x800

000125a8 <getuid@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #135168	; 0x21000
   125b0:	ldr	pc, [ip, #2040]!	; 0x7f8

000125b4 <scols_free_iter@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #135168	; 0x21000
   125bc:	ldr	pc, [ip, #2032]!	; 0x7f0

000125c0 <scols_cell_set_userdata@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #135168	; 0x21000
   125c8:	ldr	pc, [ip, #2024]!	; 0x7e8

000125cc <memmove@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #135168	; 0x21000
   125d4:	ldr	pc, [ip, #2016]!	; 0x7e0

000125d8 <free@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #135168	; 0x21000
   125e0:	ldr	pc, [ip, #2008]!	; 0x7d8

000125e4 <blkid_probe_enable_superblocks@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #135168	; 0x21000
   125ec:	ldr	pc, [ip, #2000]!	; 0x7d0

000125f0 <fgets@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #135168	; 0x21000
   125f8:	ldr	pc, [ip, #1992]!	; 0x7c8

000125fc <mnt_table_next_fs@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #135168	; 0x21000
   12604:	ldr	pc, [ip, #1984]!	; 0x7c0

00012608 <nanosleep@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #135168	; 0x21000
   12610:	ldr	pc, [ip, #1976]!	; 0x7b8

00012614 <scols_table_enable_raw@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #135168	; 0x21000
   1261c:	ldr	pc, [ip, #1968]!	; 0x7b0

00012620 <faccessat@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #135168	; 0x21000
   12628:	ldr	pc, [ip, #1960]!	; 0x7a8

0001262c <ferror@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #135168	; 0x21000
   12634:	ldr	pc, [ip, #1952]!	; 0x7a0

00012638 <strndup@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #135168	; 0x21000
   12640:	ldr	pc, [ip, #1944]!	; 0x798

00012644 <__openat64_2@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #135168	; 0x21000
   1264c:	ldr	pc, [ip, #1936]!	; 0x790

00012650 <_exit@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #135168	; 0x21000
   12658:	ldr	pc, [ip, #1928]!	; 0x788

0001265c <__vsnprintf_chk@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #135168	; 0x21000
   12664:	ldr	pc, [ip, #1920]!	; 0x780

00012668 <blkid_probe_enable_partitions@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #135168	; 0x21000
   12670:	ldr	pc, [ip, #1912]!	; 0x778

00012674 <memcpy@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #135168	; 0x21000
   1267c:	ldr	pc, [ip, #1904]!	; 0x770

00012680 <mnt_table_find_devno@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #135168	; 0x21000
   12688:	ldr	pc, [ip, #1896]!	; 0x768

0001268c <mnt_new_iter@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #135168	; 0x21000
   12694:	ldr	pc, [ip, #1888]!	; 0x760

00012698 <__strtoull_internal@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #135168	; 0x21000
   126a0:	ldr	pc, [ip, #1880]!	; 0x758

000126a4 <mnt_table_parse_mtab@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #135168	; 0x21000
   126ac:	ldr	pc, [ip, #1872]!	; 0x750

000126b0 <blkid_do_safeprobe@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #135168	; 0x21000
   126b8:	ldr	pc, [ip, #1864]!	; 0x748

000126bc <scols_table_is_export@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #135168	; 0x21000
   126c4:	ldr	pc, [ip, #1856]!	; 0x740

000126c8 <dcgettext@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #135168	; 0x21000
   126d0:	ldr	pc, [ip, #1848]!	; 0x738

000126d4 <strdup@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #135168	; 0x21000
   126dc:	ldr	pc, [ip, #1840]!	; 0x730

000126e0 <__stack_chk_fail@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #135168	; 0x21000
   126e8:	ldr	pc, [ip, #1832]!	; 0x728

000126ec <realloc@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #135168	; 0x21000
   126f4:	ldr	pc, [ip, #1824]!	; 0x720

000126f8 <dup@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #135168	; 0x21000
   12700:	ldr	pc, [ip, #1816]!	; 0x718

00012704 <blkid_devno_to_wholedisk@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #135168	; 0x21000
   1270c:	ldr	pc, [ip, #1808]!	; 0x710

00012710 <mnt_new_table@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #135168	; 0x21000
   12718:	ldr	pc, [ip, #1800]!	; 0x708

0001271c <textdomain@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #135168	; 0x21000
   12724:	ldr	pc, [ip, #1792]!	; 0x700

00012728 <err@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #135168	; 0x21000
   12730:	ldr	pc, [ip, #1784]!	; 0x6f8

00012734 <geteuid@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #135168	; 0x21000
   1273c:	ldr	pc, [ip, #1776]!	; 0x6f0

00012740 <vfscanf@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #135168	; 0x21000
   12748:	ldr	pc, [ip, #1768]!	; 0x6e8

0001274c <seteuid@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #135168	; 0x21000
   12754:	ldr	pc, [ip, #1760]!	; 0x6e0

00012758 <__fxstat64@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #135168	; 0x21000
   12760:	ldr	pc, [ip, #1752]!	; 0x6d8

00012764 <readlink@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #135168	; 0x21000
   1276c:	ldr	pc, [ip, #1744]!	; 0x6d0

00012770 <getegid@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #135168	; 0x21000
   12778:	ldr	pc, [ip, #1736]!	; 0x6c8

0001277c <mkostemp64@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #135168	; 0x21000
   12784:	ldr	pc, [ip, #1728]!	; 0x6c0

00012788 <ioctl@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #135168	; 0x21000
   12790:	ldr	pc, [ip, #1720]!	; 0x6b8

00012794 <udev_new@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #135168	; 0x21000
   1279c:	ldr	pc, [ip, #1712]!	; 0x6b0

000127a0 <lseek64@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #135168	; 0x21000
   127a8:	ldr	pc, [ip, #1704]!	; 0x6a8

000127ac <scols_new_table@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #135168	; 0x21000
   127b4:	ldr	pc, [ip, #1696]!	; 0x6a0

000127b8 <scols_table_enable_ascii@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #135168	; 0x21000
   127c0:	ldr	pc, [ip, #1688]!	; 0x698

000127c4 <mnt_table_parse_swaps@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #135168	; 0x21000
   127cc:	ldr	pc, [ip, #1680]!	; 0x690

000127d0 <scols_table_enable_export@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #135168	; 0x21000
   127d8:	ldr	pc, [ip, #1672]!	; 0x688

000127dc <blkid_probe_set_superblocks_flags@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #135168	; 0x21000
   127e4:	ldr	pc, [ip, #1664]!	; 0x680

000127e8 <__fpending@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #135168	; 0x21000
   127f0:	ldr	pc, [ip, #1656]!	; 0x678

000127f4 <mnt_fs_get_target@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #135168	; 0x21000
   127fc:	ldr	pc, [ip, #1648]!	; 0x670

00012800 <open64@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #135168	; 0x21000
   12808:	ldr	pc, [ip, #1640]!	; 0x668

0001280c <mnt_fs_get_root@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #135168	; 0x21000
   12814:	ldr	pc, [ip, #1632]!	; 0x660

00012818 <__asprintf_chk@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #135168	; 0x21000
   12820:	ldr	pc, [ip, #1624]!	; 0x658

00012824 <getenv@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #135168	; 0x21000
   1282c:	ldr	pc, [ip, #1616]!	; 0x650

00012830 <scols_table_is_raw@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #135168	; 0x21000
   12838:	ldr	pc, [ip, #1608]!	; 0x648

0001283c <scols_cell_get_userdata@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #135168	; 0x21000
   12844:	ldr	pc, [ip, #1600]!	; 0x640

00012848 <mnt_table_find_srcpath@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #135168	; 0x21000
   12850:	ldr	pc, [ip, #1592]!	; 0x638

00012854 <malloc@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #135168	; 0x21000
   1285c:	ldr	pc, [ip, #1584]!	; 0x630

00012860 <__libc_start_main@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #135168	; 0x21000
   12868:	ldr	pc, [ip, #1576]!	; 0x628

0001286c <readlinkat@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #135168	; 0x21000
   12874:	ldr	pc, [ip, #1568]!	; 0x620

00012878 <scols_table_new_line@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #135168	; 0x21000
   12880:	ldr	pc, [ip, #1560]!	; 0x618

00012884 <scols_unref_table@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #135168	; 0x21000
   1288c:	ldr	pc, [ip, #1552]!	; 0x610

00012890 <__vfprintf_chk@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #135168	; 0x21000
   12898:	ldr	pc, [ip, #1544]!	; 0x608

0001289c <strsep@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #135168	; 0x21000
   128a4:	ldr	pc, [ip, #1536]!	; 0x600

000128a8 <getdtablesize@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #135168	; 0x21000
   128b0:	ldr	pc, [ip, #1528]!	; 0x5f8

000128b4 <scols_table_is_json@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #135168	; 0x21000
   128bc:	ldr	pc, [ip, #1520]!	; 0x5f0

000128c0 <__ctype_tolower_loc@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #135168	; 0x21000
   128c8:	ldr	pc, [ip, #1512]!	; 0x5e8

000128cc <__gmon_start__@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #135168	; 0x21000
   128d4:	ldr	pc, [ip, #1504]!	; 0x5e0

000128d8 <getopt_long@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #135168	; 0x21000
   128e0:	ldr	pc, [ip, #1496]!	; 0x5d8

000128e4 <__ctype_b_loc@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #135168	; 0x21000
   128ec:	ldr	pc, [ip, #1488]!	; 0x5d0

000128f0 <getcwd@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #135168	; 0x21000
   128f8:	ldr	pc, [ip, #1480]!	; 0x5c8

000128fc <getpid@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #135168	; 0x21000
   12904:	ldr	pc, [ip, #1472]!	; 0x5c0

00012908 <exit@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #135168	; 0x21000
   12910:	ldr	pc, [ip, #1464]!	; 0x5b8

00012914 <syscall@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #135168	; 0x21000
   1291c:	ldr	pc, [ip, #1456]!	; 0x5b0

00012920 <udev_unref@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #135168	; 0x21000
   12928:	ldr	pc, [ip, #1448]!	; 0x5a8

0001292c <strtoul@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #135168	; 0x21000
   12934:	ldr	pc, [ip, #1440]!	; 0x5a0

00012938 <strlen@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #135168	; 0x21000
   12940:	ldr	pc, [ip, #1432]!	; 0x598

00012944 <scols_table_next_line@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #135168	; 0x21000
   1294c:	ldr	pc, [ip, #1424]!	; 0x590

00012950 <strchr@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #135168	; 0x21000
   12958:	ldr	pc, [ip, #1416]!	; 0x588

0001295c <warnx@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #135168	; 0x21000
   12964:	ldr	pc, [ip, #1408]!	; 0x580

00012968 <mnt_init_debug@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #135168	; 0x21000
   12970:	ldr	pc, [ip, #1400]!	; 0x578

00012974 <__open64_2@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #135168	; 0x21000
   1297c:	ldr	pc, [ip, #1392]!	; 0x570

00012980 <scols_line_get_cell@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #135168	; 0x21000
   12988:	ldr	pc, [ip, #1384]!	; 0x568

0001298c <mnt_new_cache@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #135168	; 0x21000
   12994:	ldr	pc, [ip, #1376]!	; 0x560

00012998 <blkid_probe_set_partitions_flags@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #135168	; 0x21000
   129a0:	ldr	pc, [ip, #1368]!	; 0x558

000129a4 <__errno_location@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #135168	; 0x21000
   129ac:	ldr	pc, [ip, #1360]!	; 0x550

000129b0 <mnt_table_set_iter@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #135168	; 0x21000
   129b8:	ldr	pc, [ip, #1352]!	; 0x548

000129bc <strncasecmp@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #135168	; 0x21000
   129c4:	ldr	pc, [ip, #1344]!	; 0x540

000129c8 <__cxa_atexit@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #135168	; 0x21000
   129d0:	ldr	pc, [ip, #1336]!	; 0x538

000129d4 <__vasprintf_chk@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #135168	; 0x21000
   129dc:	ldr	pc, [ip, #1328]!	; 0x530

000129e0 <mkdir@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #135168	; 0x21000
   129e8:	ldr	pc, [ip, #1320]!	; 0x528

000129ec <getgid@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #135168	; 0x21000
   129f4:	ldr	pc, [ip, #1312]!	; 0x520

000129f8 <__sched_cpufree@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #135168	; 0x21000
   12a00:	ldr	pc, [ip, #1304]!	; 0x518

00012a04 <memset@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #135168	; 0x21000
   12a0c:	ldr	pc, [ip, #1296]!	; 0x510

00012a10 <mnt_free_iter@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #135168	; 0x21000
   12a18:	ldr	pc, [ip, #1288]!	; 0x508

00012a1c <mnt_unref_cache@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #135168	; 0x21000
   12a24:	ldr	pc, [ip, #1280]!	; 0x500

00012a28 <strncpy@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #135168	; 0x21000
   12a30:	ldr	pc, [ip, #1272]!	; 0x4f8

00012a34 <__xpg_basename@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #135168	; 0x21000
   12a3c:	ldr	pc, [ip, #1264]!	; 0x4f0

00012a40 <scols_sort_table@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #135168	; 0x21000
   12a48:	ldr	pc, [ip, #1256]!	; 0x4e8

00012a4c <fscanf@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #135168	; 0x21000
   12a54:	ldr	pc, [ip, #1248]!	; 0x4e0

00012a58 <fgetc@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #135168	; 0x21000
   12a60:	ldr	pc, [ip, #1240]!	; 0x4d8

00012a64 <__printf_chk@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #135168	; 0x21000
   12a6c:	ldr	pc, [ip, #1232]!	; 0x4d0

00012a70 <statvfs64@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #135168	; 0x21000
   12a78:	ldr	pc, [ip, #1224]!	; 0x4c8

00012a7c <strtod@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #135168	; 0x21000
   12a84:	ldr	pc, [ip, #1216]!	; 0x4c0

00012a88 <write@plt>:
   12a88:	add	ip, pc, #0, 12
   12a8c:	add	ip, ip, #135168	; 0x21000
   12a90:	ldr	pc, [ip, #1208]!	; 0x4b8

00012a94 <__sched_cpualloc@plt>:
   12a94:	add	ip, pc, #0, 12
   12a98:	add	ip, ip, #135168	; 0x21000
   12a9c:	ldr	pc, [ip, #1200]!	; 0x4b0

00012aa0 <mnt_table_set_cache@plt>:
   12aa0:	add	ip, pc, #0, 12
   12aa4:	add	ip, ip, #135168	; 0x21000
   12aa8:	ldr	pc, [ip, #1192]!	; 0x4a8

00012aac <scols_table_enable_json@plt>:
   12aac:	add	ip, pc, #0, 12
   12ab0:	add	ip, ip, #135168	; 0x21000
   12ab4:	ldr	pc, [ip, #1184]!	; 0x4a0

00012ab8 <__fprintf_chk@plt>:
   12ab8:	add	ip, pc, #0, 12
   12abc:	add	ip, ip, #135168	; 0x21000
   12ac0:	ldr	pc, [ip, #1176]!	; 0x498

00012ac4 <access@plt>:
   12ac4:	add	ip, pc, #0, 12
   12ac8:	add	ip, ip, #135168	; 0x21000
   12acc:	ldr	pc, [ip, #1168]!	; 0x490

00012ad0 <setegid@plt>:
   12ad0:	add	ip, pc, #0, 12
   12ad4:	add	ip, ip, #135168	; 0x21000
   12ad8:	ldr	pc, [ip, #1160]!	; 0x488

00012adc <fclose@plt>:
   12adc:	add	ip, pc, #0, 12
   12ae0:	add	ip, ip, #135168	; 0x21000
   12ae4:	ldr	pc, [ip, #1152]!	; 0x480

00012ae8 <scols_cmpstr_cells@plt>:
   12ae8:	add	ip, pc, #0, 12
   12aec:	add	ip, ip, #135168	; 0x21000
   12af0:	ldr	pc, [ip, #1144]!	; 0x478

00012af4 <udev_device_new_from_subsystem_sysname@plt>:
   12af4:	add	ip, pc, #0, 12
   12af8:	add	ip, ip, #135168	; 0x21000
   12afc:	ldr	pc, [ip, #1136]!	; 0x470

00012b00 <fcntl64@plt>:
   12b00:	add	ip, pc, #0, 12
   12b04:	add	ip, ip, #135168	; 0x21000
   12b08:	ldr	pc, [ip, #1128]!	; 0x468

00012b0c <blkid_free_probe@plt>:
   12b0c:	add	ip, pc, #0, 12
   12b10:	add	ip, ip, #135168	; 0x21000
   12b14:	ldr	pc, [ip, #1120]!	; 0x460

00012b18 <setlocale@plt>:
   12b18:	add	ip, pc, #0, 12
   12b1c:	add	ip, ip, #135168	; 0x21000
   12b20:	ldr	pc, [ip, #1112]!	; 0x458

00012b24 <errx@plt>:
   12b24:	add	ip, pc, #0, 12
   12b28:	add	ip, ip, #135168	; 0x21000
   12b2c:	ldr	pc, [ip, #1104]!	; 0x450

00012b30 <mnt_fs_match_source@plt>:
   12b30:	add	ip, pc, #0, 12
   12b34:	add	ip, ip, #135168	; 0x21000
   12b38:	ldr	pc, [ip, #1096]!	; 0x448

00012b3c <strrchr@plt>:
   12b3c:	add	ip, pc, #0, 12
   12b40:	add	ip, ip, #135168	; 0x21000
   12b44:	ldr	pc, [ip, #1088]!	; 0x440

00012b48 <warn@plt>:
   12b48:	add	ip, pc, #0, 12
   12b4c:	add	ip, ip, #135168	; 0x21000
   12b50:	ldr	pc, [ip, #1080]!	; 0x438

00012b54 <scols_print_table@plt>:
   12b54:	add	ip, pc, #0, 12
   12b58:	add	ip, ip, #135168	; 0x21000
   12b5c:	ldr	pc, [ip, #1072]!	; 0x430

00012b60 <fputc@plt>:
   12b60:	add	ip, pc, #0, 12
   12b64:	add	ip, ip, #135168	; 0x21000
   12b68:	ldr	pc, [ip, #1064]!	; 0x428

00012b6c <sscanf@plt>:
   12b6c:	add	ip, pc, #0, 12
   12b70:	add	ip, ip, #135168	; 0x21000
   12b74:	ldr	pc, [ip, #1056]!	; 0x420

00012b78 <localeconv@plt>:
   12b78:	add	ip, pc, #0, 12
   12b7c:	add	ip, ip, #135168	; 0x21000
   12b80:	ldr	pc, [ip, #1048]!	; 0x418

00012b84 <readdir64@plt>:
   12b84:	add	ip, pc, #0, 12
   12b88:	add	ip, ip, #135168	; 0x21000
   12b8c:	ldr	pc, [ip, #1040]!	; 0x410

00012b90 <fdopendir@plt>:
   12b90:	add	ip, pc, #0, 12
   12b94:	add	ip, ip, #135168	; 0x21000
   12b98:	ldr	pc, [ip, #1032]!	; 0x408

00012b9c <udev_device_get_property_value@plt>:
   12b9c:	add	ip, pc, #0, 12
   12ba0:	add	ip, ip, #135168	; 0x21000
   12ba4:	ldr	pc, [ip, #1024]!	; 0x400

00012ba8 <scols_new_iter@plt>:
   12ba8:	add	ip, pc, #0, 12
   12bac:	add	ip, ip, #135168	; 0x21000
   12bb0:	ldr	pc, [ip, #1016]!	; 0x3f8

00012bb4 <dirfd@plt>:
   12bb4:	add	ip, pc, #0, 12
   12bb8:	add	ip, ip, #135168	; 0x21000
   12bbc:	ldr	pc, [ip, #1008]!	; 0x3f0

00012bc0 <__strtoll_internal@plt>:
   12bc0:	add	ip, pc, #0, 12
   12bc4:	add	ip, ip, #135168	; 0x21000
   12bc8:	ldr	pc, [ip, #1000]!	; 0x3e8

00012bcc <fopen64@plt>:
   12bcc:	add	ip, pc, #0, 12
   12bd0:	add	ip, ip, #135168	; 0x21000
   12bd4:	ldr	pc, [ip, #992]!	; 0x3e0

00012bd8 <udev_device_unref@plt>:
   12bd8:	add	ip, pc, #0, 12
   12bdc:	add	ip, ip, #135168	; 0x21000
   12be0:	ldr	pc, [ip, #984]!	; 0x3d8

00012be4 <bindtextdomain@plt>:
   12be4:	add	ip, pc, #0, 12
   12be8:	add	ip, ip, #135168	; 0x21000
   12bec:	ldr	pc, [ip, #976]!	; 0x3d0

00012bf0 <umask@plt>:
   12bf0:	add	ip, pc, #0, 12
   12bf4:	add	ip, ip, #135168	; 0x21000
   12bf8:	ldr	pc, [ip, #968]!	; 0x3c8

00012bfc <__xstat64@plt>:
   12bfc:	add	ip, pc, #0, 12
   12c00:	add	ip, ip, #135168	; 0x21000
   12c04:	ldr	pc, [ip, #960]!	; 0x3c0

00012c08 <fputs@plt>:
   12c08:	add	ip, pc, #0, 12
   12c0c:	add	ip, ip, #135168	; 0x21000
   12c10:	ldr	pc, [ip, #952]!	; 0x3b8

00012c14 <strncmp@plt>:
   12c14:	add	ip, pc, #0, 12
   12c18:	add	ip, ip, #135168	; 0x21000
   12c1c:	ldr	pc, [ip, #944]!	; 0x3b0

00012c20 <abort@plt>:
   12c20:	add	ip, pc, #0, 12
   12c24:	add	ip, ip, #135168	; 0x21000
   12c28:	ldr	pc, [ip, #936]!	; 0x3a8

00012c2c <scols_sort_table_by_tree@plt>:
   12c2c:	add	ip, pc, #0, 12
   12c30:	add	ip, ip, #135168	; 0x21000
   12c34:	ldr	pc, [ip, #928]!	; 0x3a0

00012c38 <realpath@plt>:
   12c38:	add	ip, pc, #0, 12
   12c3c:	add	ip, ip, #135168	; 0x21000
   12c40:	ldr	pc, [ip, #920]!	; 0x398

00012c44 <close@plt>:
   12c44:	add	ip, pc, #0, 12
   12c48:	add	ip, ip, #135168	; 0x21000
   12c4c:	ldr	pc, [ip, #912]!	; 0x390

00012c50 <closedir@plt>:
   12c50:	add	ip, pc, #0, 12
   12c54:	add	ip, ip, #135168	; 0x21000
   12c58:	ldr	pc, [ip, #904]!	; 0x388

00012c5c <__snprintf_chk@plt>:
   12c5c:	add	ip, pc, #0, 12
   12c60:	add	ip, ip, #135168	; 0x21000
   12c64:	ldr	pc, [ip, #896]!	; 0x380

00012c68 <scols_init_debug@plt>:
   12c68:	add	ip, pc, #0, 12
   12c6c:	add	ip, ip, #135168	; 0x21000
   12c70:	ldr	pc, [ip, #888]!	; 0x378

00012c74 <strspn@plt>:
   12c74:	add	ip, pc, #0, 12
   12c78:	add	ip, ip, #135168	; 0x21000
   12c7c:	ldr	pc, [ip, #880]!	; 0x370

00012c80 <__assert_fail@plt>:
   12c80:	add	ip, pc, #0, 12
   12c84:	add	ip, ip, #135168	; 0x21000
   12c88:	ldr	pc, [ip, #872]!	; 0x368

Disassembly of section .text:

00012c90 <.text>:
   12c90:	ldr	r2, [pc, #3220]	; 1392c <__assert_fail@plt+0xcac>
   12c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c98:	sub	sp, sp, #380	; 0x17c
   12c9c:	ldr	r2, [r2]
   12ca0:	mov	r3, #0
   12ca4:	str	r2, [sp, #372]	; 0x174
   12ca8:	mvn	r2, #0
   12cac:	str	r3, [sp, #32]
   12cb0:	str	r3, [sp, #28]
   12cb4:	str	r3, [sp, #40]	; 0x28
   12cb8:	str	r3, [sp, #48]	; 0x30
   12cbc:	str	r2, [sp, #36]	; 0x24
   12cc0:	mov	r7, r0
   12cc4:	mov	r2, #36	; 0x24
   12cc8:	mov	r8, r1
   12ccc:	add	r0, sp, #52	; 0x34
   12cd0:	mov	r1, r3
   12cd4:	mov	r3, #16
   12cd8:	str	r3, [sp, #44]	; 0x2c
   12cdc:	bl	12a04 <memset@plt>
   12ce0:	ldr	r1, [pc, #3144]	; 13930 <__assert_fail@plt+0xcb0>
   12ce4:	mov	r0, #6
   12ce8:	bl	12b18 <setlocale@plt>
   12cec:	ldr	r1, [pc, #3136]	; 13934 <__assert_fail@plt+0xcb4>
   12cf0:	ldr	r0, [pc, #3136]	; 13938 <__assert_fail@plt+0xcb8>
   12cf4:	bl	12be4 <bindtextdomain@plt>
   12cf8:	ldr	r4, [pc, #3132]	; 1393c <__assert_fail@plt+0xcbc>
   12cfc:	ldr	r0, [pc, #3124]	; 13938 <__assert_fail@plt+0xcb8>
   12d00:	bl	1271c <textdomain@plt>
   12d04:	ldr	r0, [pc, #3124]	; 13940 <__assert_fail@plt+0xcc0>
   12d08:	bl	209cc <__assert_fail@plt+0xdd4c>
   12d0c:	add	r5, sp, #28
   12d10:	ldr	r0, [pc, #3116]	; 13944 <__assert_fail@plt+0xcc4>
   12d14:	str	r5, [r4, #424]	; 0x1a8
   12d18:	bl	12824 <getenv@plt>
   12d1c:	ldr	r2, [r4]
   12d20:	ands	r2, r2, #2
   12d24:	bne	12d64 <__assert_fail@plt+0xe4>
   12d28:	cmp	r0, #0
   12d2c:	streq	r0, [r4]
   12d30:	beq	12d70 <__assert_fail@plt+0xf0>
   12d34:	add	r1, sp, #24
   12d38:	bl	1292c <strtoul@plt>
   12d3c:	mov	r5, r0
   12d40:	ldr	r0, [sp, #24]
   12d44:	cmp	r0, #0
   12d48:	beq	12d60 <__assert_fail@plt+0xe0>
   12d4c:	ldr	r1, [pc, #3300]	; 13a38 <__assert_fail@plt+0xdb8>
   12d50:	bl	12524 <strcmp@plt>
   12d54:	ldr	r3, [pc, #3052]	; 13948 <__assert_fail@plt+0xcc8>
   12d58:	cmp	r0, #0
   12d5c:	moveq	r5, r3
   12d60:	str	r5, [r4]
   12d64:	ldr	r3, [r4]
   12d68:	cmp	r3, #0
   12d6c:	bne	13438 <__assert_fail@plt+0x7b8>
   12d70:	ldr	r3, [r4]
   12d74:	ldr	r6, [pc, #3024]	; 1394c <__assert_fail@plt+0xccc>
   12d78:	ldr	r9, [pc, #3024]	; 13950 <__assert_fail@plt+0xcd0>
   12d7c:	mov	r2, #0
   12d80:	orr	r3, r3, #2
   12d84:	str	r2, [sp, #12]
   12d88:	str	r3, [r4]
   12d8c:	str	r2, [sp, #8]
   12d90:	mov	r3, #0
   12d94:	str	r3, [sp]
   12d98:	mov	r2, r9
   12d9c:	add	r3, r6, #12
   12da0:	mov	r1, r8
   12da4:	mov	r0, r7
   12da8:	bl	128d8 <getopt_long@plt>
   12dac:	cmn	r0, #1
   12db0:	beq	13484 <__assert_fail@plt+0x804>
   12db4:	cmp	r0, #67	; 0x43
   12db8:	ble	12e3c <__assert_fail@plt+0x1bc>
   12dbc:	ldr	r5, [pc, #2960]	; 13954 <__assert_fail@plt+0xcd4>
   12dc0:	add	r2, sp, #52	; 0x34
   12dc4:	mov	r3, #68	; 0x44
   12dc8:	cmp	r0, r3
   12dcc:	blt	12e18 <__assert_fail@plt+0x198>
   12dd0:	beq	12e00 <__assert_fail@plt+0x180>
   12dd4:	mov	r1, r5
   12dd8:	ldr	r3, [r1, #4]!
   12ddc:	cmp	r0, r3
   12de0:	movlt	ip, #0
   12de4:	movge	ip, #1
   12de8:	cmp	r3, #0
   12dec:	moveq	ip, #0
   12df0:	cmp	ip, #0
   12df4:	beq	12e18 <__assert_fail@plt+0x198>
   12df8:	cmp	r0, r3
   12dfc:	bne	12dd8 <__assert_fail@plt+0x158>
   12e00:	ldr	r3, [r2]
   12e04:	cmp	r3, #0
   12e08:	streq	r0, [r2]
   12e0c:	beq	12e18 <__assert_fail@plt+0x198>
   12e10:	cmp	r0, r3
   12e14:	bne	13e54 <__assert_fail@plt+0x11d4>
   12e18:	ldr	r3, [r5, #64]!	; 0x40
   12e1c:	add	r2, r2, #4
   12e20:	cmp	r0, r3
   12e24:	movlt	r1, #0
   12e28:	movge	r1, #1
   12e2c:	cmp	r3, #0
   12e30:	moveq	r1, #0
   12e34:	cmp	r1, #0
   12e38:	bne	12dc8 <__assert_fail@plt+0x148>
   12e3c:	sub	r0, r0, #68	; 0x44
   12e40:	cmp	r0, #60	; 0x3c
   12e44:	ldrls	pc, [pc, r0, lsl #2]
   12e48:	b	12fa8 <__assert_fail@plt+0x328>
   12e4c:	andeq	r3, r1, r8, lsr r3
   12e50:	andeq	r2, r1, r8, lsr #31
   12e54:	andeq	r2, r1, r8, lsr #31
   12e58:	andeq	r2, r1, r8, lsr #31
   12e5c:	andeq	r2, r1, r8, lsr #31
   12e60:	andeq	r3, r1, r4, ror #6
   12e64:	andeq	r3, r1, r4, lsr #6
   12e68:	andeq	r2, r1, r8, lsr #31
   12e6c:	andeq	r2, r1, r8, lsr #31
   12e70:	andeq	r2, r1, r8, lsr #31
   12e74:	andeq	r2, r1, r8, lsr #31
   12e78:	andeq	r3, r1, r4, lsl #6
   12e7c:	andeq	r3, r1, ip, ror #5
   12e80:	andeq	r2, r1, r8, lsr #31
   12e84:	andeq	r2, r1, r8, lsr #31
   12e88:	muleq	r1, ip, r2
   12e8c:	muleq	r1, r0, r2
   12e90:	andeq	r2, r1, r8, lsr #31
   12e94:	andeq	r3, r1, r0, lsr r2
   12e98:	andeq	r2, r1, r8, lsr #31
   12e9c:	andeq	r2, r1, r8, lsr #31
   12ea0:	andeq	r2, r1, r8, lsr #31
   12ea4:	andeq	r2, r1, r8, lsr #31
   12ea8:	andeq	r2, r1, r8, lsr #31
   12eac:	andeq	r2, r1, r8, lsr #31
   12eb0:	andeq	r2, r1, r8, lsr #31
   12eb4:	andeq	r2, r1, r8, lsr #31
   12eb8:	andeq	r2, r1, r8, lsr #31
   12ebc:	andeq	r2, r1, r8, lsr #31
   12ec0:	andeq	r3, r1, ip, lsl r2
   12ec4:	andeq	r3, r1, ip, ror r2
   12ec8:	andeq	r2, r1, r8, lsr #31
   12ecc:	andeq	r3, r1, r8, lsl #4
   12ed0:	andeq	r3, r1, r0, lsr r1
   12ed4:	strdeq	r3, [r1], -r4
   12ed8:	andeq	r2, r1, r8, lsr #31
   12edc:	andeq	r3, r1, r4, lsr #21
   12ee0:	andeq	r3, r1, r0, ror #1
   12ee4:	andeq	r2, r1, r8, lsr #31
   12ee8:	andeq	r2, r1, r8, lsr #31
   12eec:	andeq	r3, r1, ip, asr #1
   12ef0:	andeq	r3, r1, r0, lsr #1
   12ef4:	andeq	r3, r1, ip, lsl #1
   12ef8:	andeq	r3, r1, ip, ror r0
   12efc:	andeq	r3, r1, r8, rrx
   12f00:	andeq	r2, r1, r8, lsr #31
   12f04:	andeq	r3, r1, r0, asr r0
   12f08:	andeq	r3, r1, ip, lsr r0
   12f0c:	andeq	r2, r1, r0, ror #31
   12f10:	andeq	r2, r1, r8, lsr #31
   12f14:	andeq	r2, r1, r8, lsr #31
   12f18:	andeq	r2, r1, r8, lsr #31
   12f1c:	andeq	r2, r1, r8, ror #30
   12f20:	andeq	r2, r1, r8, lsr #31
   12f24:	andeq	r2, r1, r4, asr pc
   12f28:	andeq	r2, r1, r8, lsr #31
   12f2c:	andeq	r2, r1, r8, lsr #31
   12f30:	andeq	r2, r1, r8, lsr #31
   12f34:	andeq	r2, r1, r8, lsr #31
   12f38:	andeq	r2, r1, r8, lsr #31
   12f3c:	andeq	r2, r1, r0, asr #30
   12f40:	ldr	r2, [pc, #2576]	; 13958 <__assert_fail@plt+0xcd8>
   12f44:	ldr	r3, [r4, #424]	; 0x1a8
   12f48:	ldr	r2, [r2]
   12f4c:	str	r2, [r3, #12]
   12f50:	b	12d90 <__assert_fail@plt+0x110>
   12f54:	mov	r0, #0
   12f58:	bl	14658 <__assert_fail@plt+0x19d8>
   12f5c:	mov	r0, #51	; 0x33
   12f60:	bl	14658 <__assert_fail@plt+0x19d8>
   12f64:	b	12d90 <__assert_fail@plt+0x110>
   12f68:	ldr	r5, [r4, #424]	; 0x1a8
   12f6c:	ldr	r3, [pc, #2532]	; 13958 <__assert_fail@plt+0xcd8>
   12f70:	ldr	sl, [r3]
   12f74:	ldr	r3, [r5, #16]
   12f78:	mov	r0, sl
   12f7c:	bic	r3, r3, #16
   12f80:	str	r3, [r5, #16]
   12f84:	bl	12938 <strlen@plt>
   12f88:	mov	r1, r0
   12f8c:	mov	r0, sl
   12f90:	bl	14768 <__assert_fail@plt+0x1ae8>
   12f94:	ldr	r3, [r4, #424]	; 0x1a8
   12f98:	str	r0, [r5, #8]
   12f9c:	ldr	r3, [r3, #8]
   12fa0:	cmp	r3, #0
   12fa4:	bge	12d90 <__assert_fail@plt+0x110>
   12fa8:	ldr	r3, [pc, #2736]	; 13a60 <__assert_fail@plt+0xde0>
   12fac:	mov	r2, #5
   12fb0:	ldr	r1, [pc, #2468]	; 1395c <__assert_fail@plt+0xcdc>
   12fb4:	mov	r0, #0
   12fb8:	ldr	r4, [r3]
   12fbc:	bl	126c8 <dcgettext@plt>
   12fc0:	ldr	r3, [pc, #2664]	; 13a30 <__assert_fail@plt+0xdb0>
   12fc4:	mov	r1, #1
   12fc8:	ldr	r3, [r3]
   12fcc:	mov	r2, r0
   12fd0:	mov	r0, r4
   12fd4:	bl	12ab8 <__fprintf_chk@plt>
   12fd8:	mov	r0, #1
   12fdc:	bl	12908 <exit@plt>
   12fe0:	mov	r0, #0
   12fe4:	bl	14658 <__assert_fail@plt+0x19d8>
   12fe8:	mov	r0, #29
   12fec:	bl	14658 <__assert_fail@plt+0x19d8>
   12ff0:	mov	r0, #30
   12ff4:	bl	14658 <__assert_fail@plt+0x19d8>
   12ff8:	mov	r0, #31
   12ffc:	bl	14658 <__assert_fail@plt+0x19d8>
   13000:	mov	r0, #32
   13004:	bl	14658 <__assert_fail@plt+0x19d8>
   13008:	mov	r0, #33	; 0x21
   1300c:	bl	14658 <__assert_fail@plt+0x19d8>
   13010:	mov	r0, #34	; 0x22
   13014:	bl	14658 <__assert_fail@plt+0x19d8>
   13018:	mov	r0, #35	; 0x23
   1301c:	bl	14658 <__assert_fail@plt+0x19d8>
   13020:	mov	r0, #36	; 0x24
   13024:	bl	14658 <__assert_fail@plt+0x19d8>
   13028:	mov	r0, #18
   1302c:	bl	14658 <__assert_fail@plt+0x19d8>
   13030:	mov	r0, #42	; 0x2a
   13034:	bl	14658 <__assert_fail@plt+0x19d8>
   13038:	b	12d90 <__assert_fail@plt+0x110>
   1303c:	ldr	r2, [r4, #424]	; 0x1a8
   13040:	ldrb	r3, [r2, #20]
   13044:	orr	r3, r3, #4
   13048:	strb	r3, [r2, #20]
   1304c:	b	12d90 <__assert_fail@plt+0x110>
   13050:	ldr	r2, [r4, #424]	; 0x1a8
   13054:	ldr	r3, [r2, #16]
   13058:	bic	r3, r3, #16
   1305c:	orr	r3, r3, #2
   13060:	str	r3, [r2, #16]
   13064:	b	12d90 <__assert_fail@plt+0x110>
   13068:	ldr	r2, [r4, #424]	; 0x1a8
   1306c:	ldrb	r3, [r2, #20]
   13070:	orr	r3, r3, #32
   13074:	strb	r3, [r2, #20]
   13078:	b	12d90 <__assert_fail@plt+0x110>
   1307c:	ldr	r3, [pc, #2260]	; 13958 <__assert_fail@plt+0xcd8>
   13080:	ldr	r3, [r3]
   13084:	str	r3, [sp, #8]
   13088:	b	12d90 <__assert_fail@plt+0x110>
   1308c:	ldr	r2, [r4, #424]	; 0x1a8
   13090:	ldr	r3, [r2, #16]
   13094:	orr	r3, r3, #4
   13098:	str	r3, [r2, #16]
   1309c:	b	12d90 <__assert_fail@plt+0x110>
   130a0:	mov	r0, #0
   130a4:	bl	14658 <__assert_fail@plt+0x19d8>
   130a8:	mov	r0, #24
   130ac:	bl	14658 <__assert_fail@plt+0x19d8>
   130b0:	mov	r0, #26
   130b4:	bl	14658 <__assert_fail@plt+0x19d8>
   130b8:	mov	r0, #27
   130bc:	bl	14658 <__assert_fail@plt+0x19d8>
   130c0:	mov	r0, #28
   130c4:	bl	14658 <__assert_fail@plt+0x19d8>
   130c8:	b	12d90 <__assert_fail@plt+0x110>
   130cc:	ldr	r2, [r4, #424]	; 0x1a8
   130d0:	ldr	r3, [r2, #16]
   130d4:	bic	r3, r3, #16
   130d8:	str	r3, [r2, #16]
   130dc:	b	12d90 <__assert_fail@plt+0x110>
   130e0:	ldr	r2, [r4, #424]	; 0x1a8
   130e4:	ldr	r3, [r2, #16]
   130e8:	orr	r3, r3, #1
   130ec:	str	r3, [r2, #16]
   130f0:	b	12d90 <__assert_fail@plt+0x110>
   130f4:	mov	r0, #0
   130f8:	bl	14658 <__assert_fail@plt+0x19d8>
   130fc:	mov	r0, #6
   13100:	bl	14658 <__assert_fail@plt+0x19d8>
   13104:	mov	r0, #10
   13108:	bl	14658 <__assert_fail@plt+0x19d8>
   1310c:	mov	r0, #11
   13110:	bl	14658 <__assert_fail@plt+0x19d8>
   13114:	mov	r0, #4
   13118:	bl	14658 <__assert_fail@plt+0x19d8>
   1311c:	mov	r0, #8
   13120:	bl	14658 <__assert_fail@plt+0x19d8>
   13124:	mov	r0, #9
   13128:	bl	14658 <__assert_fail@plt+0x19d8>
   1312c:	b	12d90 <__assert_fail@plt+0x110>
   13130:	ldr	r3, [pc, #2080]	; 13958 <__assert_fail@plt+0xcd8>
   13134:	ldr	r5, [r3]
   13138:	cmp	r5, #0
   1313c:	str	r5, [sp, #20]
   13140:	beq	12d90 <__assert_fail@plt+0x110>
   13144:	ldrsb	r3, [r5]
   13148:	cmp	r3, #0
   1314c:	beq	12d90 <__assert_fail@plt+0x110>
   13150:	bl	129a4 <__errno_location@plt>
   13154:	add	sl, sp, #24
   13158:	str	r7, [sp, #16]
   1315c:	mov	fp, #0
   13160:	mov	r7, r0
   13164:	b	13188 <__assert_fail@plt+0x508>
   13168:	ldrsb	r1, [r2]
   1316c:	cmp	r1, #0
   13170:	beq	13200 <__assert_fail@plt+0x580>
   13174:	adds	r5, r2, #1
   13178:	beq	13200 <__assert_fail@plt+0x580>
   1317c:	ldrsb	r2, [r2, #1]
   13180:	cmp	r2, #0
   13184:	beq	13200 <__assert_fail@plt+0x580>
   13188:	mov	r2, #10
   1318c:	str	fp, [r7]
   13190:	mov	r1, sl
   13194:	mov	r0, r5
   13198:	str	fp, [sp, #24]
   1319c:	bl	1292c <strtoul@plt>
   131a0:	ldr	r2, [sp, #24]
   131a4:	cmp	r2, r5
   131a8:	beq	141b4 <__assert_fail@plt+0x1534>
   131ac:	cmp	r2, #0
   131b0:	beq	131c4 <__assert_fail@plt+0x544>
   131b4:	ldrsb	r1, [r2]
   131b8:	cmp	r1, #44	; 0x2c
   131bc:	cmpne	r1, #0
   131c0:	bne	141b4 <__assert_fail@plt+0x1534>
   131c4:	ldr	r1, [r7]
   131c8:	cmp	r1, #0
   131cc:	beq	131dc <__assert_fail@plt+0x55c>
   131d0:	sub	r1, r0, #1
   131d4:	cmn	r1, #3
   131d8:	bhi	14200 <__assert_fail@plt+0x1580>
   131dc:	ldr	r1, [r4, #428]	; 0x1ac
   131e0:	add	r5, r1, #1
   131e4:	add	r1, r4, r1, lsl #2
   131e8:	cmp	r5, #256	; 0x100
   131ec:	str	r5, [r4, #428]	; 0x1ac
   131f0:	str	r0, [r1, #432]	; 0x1b0
   131f4:	beq	141f4 <__assert_fail@plt+0x1574>
   131f8:	cmp	r2, #0
   131fc:	bne	13168 <__assert_fail@plt+0x4e8>
   13200:	ldr	r7, [sp, #16]
   13204:	b	12d90 <__assert_fail@plt+0x110>
   13208:	ldr	r2, [r4, #424]	; 0x1a8
   1320c:	ldrb	r3, [r2, #20]
   13210:	orr	r3, r3, #8
   13214:	strb	r3, [r2, #20]
   13218:	b	12d90 <__assert_fail@plt+0x110>
   1321c:	ldr	r2, [r4, #424]	; 0x1a8
   13220:	ldrb	r3, [r2, #20]
   13224:	orr	r3, r3, #1
   13228:	strb	r3, [r2, #20]
   1322c:	b	12d90 <__assert_fail@plt+0x110>
   13230:	mov	r2, #5
   13234:	ldr	r1, [pc, #1828]	; 13960 <__assert_fail@plt+0xce0>
   13238:	mov	r0, #0
   1323c:	bl	126c8 <dcgettext@plt>
   13240:	ldr	r2, [pc, #2024]	; 13a30 <__assert_fail@plt+0xdb0>
   13244:	ldr	r3, [pc, #1816]	; 13964 <__assert_fail@plt+0xce4>
   13248:	mov	fp, #0
   1324c:	ldr	r2, [r2]
   13250:	mov	r1, r0
   13254:	mov	r0, #1
   13258:	bl	12a64 <__printf_chk@plt>
   1325c:	ldr	r3, [pc, #1736]	; 1392c <__assert_fail@plt+0xcac>
   13260:	ldr	r2, [sp, #372]	; 0x174
   13264:	mov	r0, fp
   13268:	ldr	r3, [r3]
   1326c:	cmp	r2, r3
   13270:	bne	14220 <__assert_fail@plt+0x15a0>
   13274:	add	sp, sp, #380	; 0x17c
   13278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1327c:	ldr	r2, [r4, #424]	; 0x1a8
   13280:	ldrb	r3, [r2, #20]
   13284:	orr	r3, r3, #2
   13288:	strb	r3, [r2, #20]
   1328c:	b	12d90 <__assert_fail@plt+0x110>
   13290:	mov	r3, #1
   13294:	str	r3, [sp, #12]
   13298:	b	12d90 <__assert_fail@plt+0x110>
   1329c:	ldr	r2, [r4, #424]	; 0x1a8
   132a0:	mov	r0, #0
   132a4:	ldrb	r3, [r2, #20]
   132a8:	bic	r3, r3, #24
   132ac:	orr	r3, r3, #24
   132b0:	strb	r3, [r2, #20]
   132b4:	bl	14658 <__assert_fail@plt+0x19d8>
   132b8:	mov	r0, #46	; 0x2e
   132bc:	bl	14658 <__assert_fail@plt+0x19d8>
   132c0:	mov	r0, #37	; 0x25
   132c4:	bl	14658 <__assert_fail@plt+0x19d8>
   132c8:	mov	r0, #50	; 0x32
   132cc:	bl	14658 <__assert_fail@plt+0x19d8>
   132d0:	mov	r0, #22
   132d4:	bl	14658 <__assert_fail@plt+0x19d8>
   132d8:	mov	r0, #49	; 0x31
   132dc:	bl	14658 <__assert_fail@plt+0x19d8>
   132e0:	mov	r0, #47	; 0x2f
   132e4:	bl	14658 <__assert_fail@plt+0x19d8>
   132e8:	b	12d90 <__assert_fail@plt+0x110>
   132ec:	ldr	r2, [r4, #424]	; 0x1a8
   132f0:	ldr	r3, [r2, #16]
   132f4:	bic	r3, r3, #16
   132f8:	orr	r3, r3, #8
   132fc:	str	r3, [r2, #16]
   13300:	b	12d90 <__assert_fail@plt+0x110>
   13304:	ldr	r2, [pc, #1628]	; 13968 <__assert_fail@plt+0xce8>
   13308:	mov	r3, #0
   1330c:	str	r3, [r2, #4]!
   13310:	add	r3, r3, #1
   13314:	cmp	r3, #52	; 0x34
   13318:	bne	1330c <__assert_fail@plt+0x68c>
   1331c:	str	r3, [r4, #4]
   13320:	b	12d90 <__assert_fail@plt+0x110>
   13324:	ldr	r2, [r4, #424]	; 0x1a8
   13328:	ldr	r3, [r2, #16]
   1332c:	orr	r3, r3, #32
   13330:	str	r3, [r2, #16]
   13334:	b	12d90 <__assert_fail@plt+0x110>
   13338:	mov	r0, #0
   1333c:	bl	14658 <__assert_fail@plt+0x19d8>
   13340:	mov	r0, #38	; 0x26
   13344:	bl	14658 <__assert_fail@plt+0x19d8>
   13348:	mov	r0, #39	; 0x27
   1334c:	bl	14658 <__assert_fail@plt+0x19d8>
   13350:	mov	r0, #40	; 0x28
   13354:	bl	14658 <__assert_fail@plt+0x19d8>
   13358:	mov	r0, #41	; 0x29
   1335c:	bl	14658 <__assert_fail@plt+0x19d8>
   13360:	b	12d90 <__assert_fail@plt+0x110>
   13364:	ldr	r3, [pc, #1516]	; 13958 <__assert_fail@plt+0xcd8>
   13368:	ldr	r5, [r3]
   1336c:	cmp	r5, #0
   13370:	str	r5, [sp, #20]
   13374:	beq	12d90 <__assert_fail@plt+0x110>
   13378:	ldrsb	r3, [r5]
   1337c:	cmp	r3, #0
   13380:	beq	12d90 <__assert_fail@plt+0x110>
   13384:	bl	129a4 <__errno_location@plt>
   13388:	add	sl, sp, #24
   1338c:	str	r7, [sp, #16]
   13390:	mov	fp, #0
   13394:	mov	r7, r0
   13398:	b	133bc <__assert_fail@plt+0x73c>
   1339c:	ldrsb	r1, [r2]
   133a0:	cmp	r1, #0
   133a4:	beq	13200 <__assert_fail@plt+0x580>
   133a8:	adds	r5, r2, #1
   133ac:	beq	13200 <__assert_fail@plt+0x580>
   133b0:	ldrsb	r2, [r2, #1]
   133b4:	cmp	r2, #0
   133b8:	beq	13200 <__assert_fail@plt+0x580>
   133bc:	mov	r2, #10
   133c0:	str	fp, [r7]
   133c4:	mov	r1, sl
   133c8:	mov	r0, r5
   133cc:	str	fp, [sp, #24]
   133d0:	bl	1292c <strtoul@plt>
   133d4:	ldr	r2, [sp, #24]
   133d8:	cmp	r5, r2
   133dc:	beq	141b4 <__assert_fail@plt+0x1534>
   133e0:	cmp	r2, #0
   133e4:	beq	133f8 <__assert_fail@plt+0x778>
   133e8:	ldrsb	r1, [r2]
   133ec:	cmp	r1, #0
   133f0:	cmpne	r1, #44	; 0x2c
   133f4:	bne	141b4 <__assert_fail@plt+0x1534>
   133f8:	ldr	r1, [r7]
   133fc:	cmp	r1, #0
   13400:	beq	13410 <__assert_fail@plt+0x790>
   13404:	sub	r1, r0, #1
   13408:	cmn	r1, #3
   1340c:	bhi	14200 <__assert_fail@plt+0x1580>
   13410:	ldr	r1, [r4, #1456]	; 0x5b0
   13414:	add	r5, r1, #1
   13418:	add	r1, r4, r1, lsl #2
   1341c:	cmp	r5, #256	; 0x100
   13420:	str	r5, [r4, #1456]	; 0x5b0
   13424:	str	r0, [r1, #1460]	; 0x5b4
   13428:	beq	141d4 <__assert_fail@plt+0x1554>
   1342c:	cmp	r2, #0
   13430:	bne	1339c <__assert_fail@plt+0x71c>
   13434:	b	13200 <__assert_fail@plt+0x580>
   13438:	bl	125a8 <getuid@plt>
   1343c:	mov	r5, r0
   13440:	bl	12734 <geteuid@plt>
   13444:	cmp	r5, r0
   13448:	beq	1390c <__assert_fail@plt+0xc8c>
   1344c:	ldr	r3, [r4]
   13450:	ldr	r2, [pc, #1544]	; 13a60 <__assert_fail@plt+0xde0>
   13454:	orr	r3, r3, #16777216	; 0x1000000
   13458:	str	r3, [r4]
   1345c:	ldr	r5, [r2]
   13460:	bl	128fc <getpid@plt>
   13464:	ldr	r3, [pc, #1532]	; 13a68 <__assert_fail@plt+0xde8>
   13468:	ldr	r2, [pc, #1276]	; 1396c <__assert_fail@plt+0xcec>
   1346c:	str	r3, [sp]
   13470:	mov	r1, #1
   13474:	mov	r3, r0
   13478:	mov	r0, r5
   1347c:	bl	12ab8 <__fprintf_chk@plt>
   13480:	b	12d70 <__assert_fail@plt+0xf0>
   13484:	ldr	r3, [sp, #12]
   13488:	mov	r1, #4
   1348c:	cmp	r3, #0
   13490:	ldr	r0, [pc, #1540]	; 13a9c <__assert_fail@plt+0xe1c>
   13494:	ldrne	r2, [r4, #424]	; 0x1a8
   13498:	ldrne	r3, [r2, #16]
   1349c:	orrne	r3, r3, #16
   134a0:	strne	r3, [r2, #16]
   134a4:	bl	12ac4 <access@plt>
   134a8:	subs	fp, r0, #0
   134ac:	bne	14268 <__assert_fail@plt+0x15e8>
   134b0:	ldr	r3, [r4, #4]
   134b4:	cmp	r3, #0
   134b8:	bne	134f8 <__assert_fail@plt+0x878>
   134bc:	mov	r3, #3
   134c0:	mov	r2, #20
   134c4:	str	r3, [r4, #12]
   134c8:	mov	r3, #24
   134cc:	str	r2, [r4, #16]
   134d0:	str	r3, [r4, #20]
   134d4:	mov	r2, #19
   134d8:	mov	r3, #37	; 0x25
   134dc:	str	r2, [r4, #24]
   134e0:	str	r3, [r4, #28]
   134e4:	mov	r2, #7
   134e8:	mov	r3, #9
   134ec:	str	fp, [r4, #8]
   134f0:	str	r2, [r4, #4]
   134f4:	str	r3, [r4, #32]
   134f8:	ldr	r3, [sp, #8]
   134fc:	cmp	r3, #0
   13500:	beq	13528 <__assert_fail@plt+0x8a8>
   13504:	ldr	r2, [pc, #1124]	; 13970 <__assert_fail@plt+0xcf0>
   13508:	ldr	r3, [pc, #1112]	; 13968 <__assert_fail@plt+0xce8>
   1350c:	str	r2, [sp]
   13510:	ldr	r0, [sp, #8]
   13514:	add	r1, r3, #4
   13518:	mov	r2, #104	; 0x68
   1351c:	bl	1a5bc <__assert_fail@plt+0x793c>
   13520:	cmp	r0, #0
   13524:	blt	13924 <__assert_fail@plt+0xca4>
   13528:	ldr	lr, [r4, #424]	; 0x1a8
   1352c:	ldrb	r3, [lr, #20]
   13530:	tst	r3, #1
   13534:	bne	13550 <__assert_fail@plt+0x8d0>
   13538:	ldr	r2, [r4, #1456]	; 0x5b0
   1353c:	ldr	r1, [r4, #428]	; 0x1ac
   13540:	orrs	r2, r1, r2
   13544:	moveq	r2, #1
   13548:	streq	r2, [r4, #428]	; 0x1ac
   1354c:	streq	r2, [r4, #432]	; 0x1b0
   13550:	ldr	r0, [lr, #8]
   13554:	cmp	r0, #0
   13558:	movlt	r0, #3
   1355c:	strlt	r0, [lr, #8]
   13560:	tst	r3, #4
   13564:	bne	137b0 <__assert_fail@plt+0xb30>
   13568:	ldr	ip, [r4, #4]
   1356c:	cmp	ip, #0
   13570:	beq	135ac <__assert_fail@plt+0x92c>
   13574:	ldr	r3, [r4, #8]
   13578:	cmp	r3, r0
   1357c:	beq	135c8 <__assert_fail@plt+0x948>
   13580:	ldr	r2, [pc, #1004]	; 13974 <__assert_fail@plt+0xcf4>
   13584:	mov	r3, #0
   13588:	b	13598 <__assert_fail@plt+0x918>
   1358c:	ldr	r1, [r2], #4
   13590:	cmp	r1, r0
   13594:	beq	135c8 <__assert_fail@plt+0x948>
   13598:	add	r3, r3, #1
   1359c:	cmp	r3, ip
   135a0:	bne	1358c <__assert_fail@plt+0x90c>
   135a4:	cmp	r3, #104	; 0x68
   135a8:	beq	14250 <__assert_fail@plt+0x15d0>
   135ac:	add	r3, r4, ip, lsl #2
   135b0:	add	ip, ip, #1
   135b4:	str	r0, [r3, #8]
   135b8:	ldrb	r3, [lr, #20]
   135bc:	str	ip, [r4, #4]
   135c0:	orr	r3, r3, #64	; 0x40
   135c4:	strb	r3, [lr, #20]
   135c8:	bl	173fc <__assert_fail@plt+0x477c>
   135cc:	mov	r0, #0
   135d0:	bl	12c68 <scols_init_debug@plt>
   135d4:	bl	1b01c <__assert_fail@plt+0x839c>
   135d8:	ldr	r5, [r4, #424]	; 0x1a8
   135dc:	bl	127ac <scols_new_table@plt>
   135e0:	cmp	r0, #0
   135e4:	str	r0, [r5]
   135e8:	beq	14288 <__assert_fail@plt+0x1608>
   135ec:	ldr	r3, [r4, #424]	; 0x1a8
   135f0:	ldr	r1, [r3, #16]
   135f4:	ldr	r0, [r3]
   135f8:	lsr	r1, r1, #1
   135fc:	and	r1, r1, #1
   13600:	bl	12614 <scols_table_enable_raw@plt>
   13604:	ldr	r3, [r4, #424]	; 0x1a8
   13608:	ldr	r1, [r3, #16]
   1360c:	ldr	r0, [r3]
   13610:	lsr	r1, r1, #3
   13614:	and	r1, r1, #1
   13618:	bl	127d0 <scols_table_enable_export@plt>
   1361c:	ldr	r3, [r4, #424]	; 0x1a8
   13620:	ldr	r1, [r3, #16]
   13624:	ldr	r0, [r3]
   13628:	and	r1, r1, #1
   1362c:	bl	127b8 <scols_table_enable_ascii@plt>
   13630:	ldr	r3, [r4, #424]	; 0x1a8
   13634:	ldr	r1, [r3, #16]
   13638:	ldr	r0, [r3]
   1363c:	lsr	r1, r1, #5
   13640:	and	r1, r1, #1
   13644:	bl	12aac <scols_table_enable_json@plt>
   13648:	ldr	r3, [r4, #424]	; 0x1a8
   1364c:	ldr	r1, [r3, #16]
   13650:	ldr	r0, [r3]
   13654:	lsr	r1, r1, #2
   13658:	and	r1, r1, #1
   1365c:	bl	12578 <scols_table_enable_noheadings@plt>
   13660:	ldr	r3, [r4, #424]	; 0x1a8
   13664:	ldr	r2, [r3, #16]
   13668:	tst	r2, #32
   1366c:	bne	137d0 <__assert_fail@plt+0xb50>
   13670:	ldr	r3, [r4, #4]
   13674:	cmp	r3, #0
   13678:	movne	r6, #0
   1367c:	strne	r7, [sp, #8]
   13680:	bne	136d4 <__assert_fail@plt+0xa54>
   13684:	b	137e4 <__assert_fail@plt+0xb64>
   13688:	ldr	r2, [r1, #16]
   1368c:	tst	r2, #32
   13690:	beq	136c4 <__assert_fail@plt+0xa44>
   13694:	ldr	r3, [pc, #732]	; 13978 <__assert_fail@plt+0xcf8>
   13698:	add	r5, r3, r5
   1369c:	ldr	r2, [r5, #40]	; 0x28
   136a0:	cmp	r2, #3
   136a4:	beq	13784 <__assert_fail@plt+0xb04>
   136a8:	cmp	r2, #4
   136ac:	beq	137a0 <__assert_fail@plt+0xb20>
   136b0:	cmp	r2, #1
   136b4:	beq	13790 <__assert_fail@plt+0xb10>
   136b8:	mov	r0, r7
   136bc:	mov	r1, #0
   136c0:	bl	124d0 <scols_column_set_json_type@plt>
   136c4:	ldr	r3, [r4, #4]
   136c8:	add	r6, r6, #1
   136cc:	cmp	r3, r6
   136d0:	bls	137e0 <__assert_fail@plt+0xb60>
   136d4:	mov	r0, r6
   136d8:	bl	146c8 <__assert_fail@plt+0x1a48>
   136dc:	ldr	r3, [r4, #424]	; 0x1a8
   136e0:	ldr	r2, [pc, #656]	; 13978 <__assert_fail@plt+0xcf8>
   136e4:	ldr	r1, [r3, #16]
   136e8:	and	r1, r1, #16
   136ec:	lsl	r5, r0, #5
   136f0:	add	r2, r2, r5
   136f4:	orrs	r1, r1, r0
   136f8:	ldrb	r1, [r3, #20]
   136fc:	ldr	r2, [r2, #32]
   13700:	mov	r9, r0
   13704:	biceq	r2, r2, #2
   13708:	tst	r1, #64	; 0x40
   1370c:	beq	1371c <__assert_fail@plt+0xa9c>
   13710:	ldr	r1, [r3, #8]
   13714:	cmp	r1, r0
   13718:	orreq	r2, r2, #32
   1371c:	ldr	r1, [pc, #596]	; 13978 <__assert_fail@plt+0xcf8>
   13720:	ldr	r0, [r3]
   13724:	add	sl, r1, r5
   13728:	vldr	d0, [sl, #24]
   1372c:	ldr	r1, [sl, #16]
   13730:	bl	12590 <scols_table_new_column@plt>
   13734:	subs	r7, r0, #0
   13738:	beq	138f4 <__assert_fail@plt+0xc74>
   1373c:	ldr	r1, [r4, #424]	; 0x1a8
   13740:	ldr	r2, [r1, #4]
   13744:	cmp	r2, #0
   13748:	bne	13688 <__assert_fail@plt+0xa08>
   1374c:	ldr	ip, [r1, #8]
   13750:	cmp	ip, r9
   13754:	bne	13688 <__assert_fail@plt+0xa08>
   13758:	ldr	ip, [sl, #40]	; 0x28
   1375c:	str	r7, [r1, #4]
   13760:	ldr	r3, [pc, #532]	; 1397c <__assert_fail@plt+0xcfc>
   13764:	bic	r1, ip, #2
   13768:	cmp	ip, #2
   1376c:	cmpne	r1, #1
   13770:	ldr	r1, [pc, #520]	; 13980 <__assert_fail@plt+0xd00>
   13774:	moveq	r1, r3
   13778:	bl	12500 <scols_column_set_cmpfunc@plt>
   1377c:	ldr	r1, [r4, #424]	; 0x1a8
   13780:	b	13688 <__assert_fail@plt+0xa08>
   13784:	ldrb	r2, [r1, #20]
   13788:	tst	r2, #2
   1378c:	beq	136c4 <__assert_fail@plt+0xa44>
   13790:	mov	r0, r7
   13794:	mov	r1, #1
   13798:	bl	124d0 <scols_column_set_json_type@plt>
   1379c:	b	136c4 <__assert_fail@plt+0xa44>
   137a0:	mov	r0, r7
   137a4:	mov	r1, #2
   137a8:	bl	124d0 <scols_column_set_json_type@plt>
   137ac:	b	136c4 <__assert_fail@plt+0xa44>
   137b0:	ldr	r3, [lr, #16]
   137b4:	tst	r3, #16
   137b8:	ldrbeq	r3, [lr, #20]
   137bc:	orreq	r3, r3, #128	; 0x80
   137c0:	strbeq	r3, [lr, #20]
   137c4:	cmp	r0, #0
   137c8:	blt	135c8 <__assert_fail@plt+0x948>
   137cc:	b	13568 <__assert_fail@plt+0x8e8>
   137d0:	ldr	r0, [r3]
   137d4:	ldr	r1, [pc, #424]	; 13984 <__assert_fail@plt+0xd04>
   137d8:	bl	12560 <scols_table_set_name@plt>
   137dc:	b	13670 <__assert_fail@plt+0x9f0>
   137e0:	ldr	r7, [sp, #8]
   137e4:	ldr	r5, [pc, #412]	; 13988 <__assert_fail@plt+0xd08>
   137e8:	ldr	r3, [r5]
   137ec:	cmp	r3, r7
   137f0:	beq	13f24 <__assert_fail@plt+0x12a4>
   137f4:	movge	fp, #1
   137f8:	bge	1383c <__assert_fail@plt+0xbbc>
   137fc:	mov	r6, #0
   13800:	add	r2, r3, #1
   13804:	ldr	r0, [r8, r3, lsl #2]
   13808:	str	r2, [r5]
   1380c:	bl	16c10 <__assert_fail@plt+0x3f90>
   13810:	ldr	r3, [r5]
   13814:	add	r6, r6, #1
   13818:	cmp	r0, #0
   1381c:	addne	fp, fp, #1
   13820:	cmp	r3, r7
   13824:	blt	13800 <__assert_fail@plt+0xb80>
   13828:	cmp	fp, r6
   1382c:	moveq	fp, #32
   13830:	beq	1383c <__assert_fail@plt+0xbbc>
   13834:	cmp	fp, #0
   13838:	movne	fp, #64	; 0x40
   1383c:	ldr	r3, [r4, #424]	; 0x1a8
   13840:	ldr	r1, [r3, #4]
   13844:	cmp	r1, #0
   13848:	beq	13854 <__assert_fail@plt+0xbd4>
   1384c:	ldr	r0, [r3]
   13850:	bl	12a40 <scols_sort_table@plt>
   13854:	ldr	r3, [r4, #424]	; 0x1a8
   13858:	ldrsb	r2, [r3, #20]
   1385c:	cmp	r2, #0
   13860:	blt	13e48 <__assert_fail@plt+0x11c8>
   13864:	ldr	r3, [r4, #424]	; 0x1a8
   13868:	ldr	r0, [r3]
   1386c:	bl	12b54 <scols_print_table@plt>
   13870:	ldr	r3, [r4, #424]	; 0x1a8
   13874:	ldr	r2, [r3, #4]
   13878:	cmp	r2, #0
   1387c:	beq	138dc <__assert_fail@plt+0xc5c>
   13880:	ldr	r5, [r3]
   13884:	cmp	r5, #0
   13888:	beq	138dc <__assert_fail@plt+0xc5c>
   1388c:	mov	r0, #0
   13890:	bl	12ba8 <scols_new_iter@plt>
   13894:	subs	r6, r0, #0
   13898:	addne	r7, sp, #24
   1389c:	bne	138bc <__assert_fail@plt+0xc3c>
   138a0:	b	138dc <__assert_fail@plt+0xc5c>
   138a4:	ldr	r3, [r4, #424]	; 0x1a8
   138a8:	ldr	r0, [sp, #24]
   138ac:	ldr	r1, [r3, #4]
   138b0:	bl	12548 <scols_line_get_column_cell@plt>
   138b4:	bl	1283c <scols_cell_get_userdata@plt>
   138b8:	bl	125d8 <free@plt>
   138bc:	mov	r2, r7
   138c0:	mov	r1, r6
   138c4:	mov	r0, r5
   138c8:	bl	12944 <scols_table_next_line@plt>
   138cc:	cmp	r0, #0
   138d0:	beq	138a4 <__assert_fail@plt+0xc24>
   138d4:	mov	r0, r6
   138d8:	bl	125b4 <scols_free_iter@plt>
   138dc:	ldr	r3, [r4, #424]	; 0x1a8
   138e0:	ldr	r0, [r3]
   138e4:	bl	12884 <scols_unref_table@plt>
   138e8:	bl	17404 <__assert_fail@plt+0x4784>
   138ec:	bl	17c6c <__assert_fail@plt+0x4fec>
   138f0:	b	1325c <__assert_fail@plt+0x5dc>
   138f4:	mov	r2, #5
   138f8:	ldr	r1, [pc, #140]	; 1398c <__assert_fail@plt+0xd0c>
   138fc:	bl	126c8 <dcgettext@plt>
   13900:	bl	12b48 <warn@plt>
   13904:	mov	fp, #1
   13908:	b	13870 <__assert_fail@plt+0xbf0>
   1390c:	bl	129ec <getgid@plt>
   13910:	mov	r5, r0
   13914:	bl	12770 <getegid@plt>
   13918:	cmp	r5, r0
   1391c:	bne	1344c <__assert_fail@plt+0x7cc>
   13920:	b	12d70 <__assert_fail@plt+0xf0>
   13924:	mov	fp, #1
   13928:	b	1325c <__assert_fail@plt+0x5dc>
   1392c:	andeq	r3, r3, r8, lsr #24
   13930:	andeq	r1, r2, r8, lsl #25
   13934:	andeq	r1, r2, r4, lsr #24
   13938:	andeq	r1, r2, r8, lsr ip
   1393c:	andeq	r4, r3, r0, lsr r0
   13940:	andeq	r4, r1, r4, lsr #23
   13944:	andeq	r1, r2, r4, asr #24
   13948:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1394c:	muleq	r2, r8, r0
   13950:	muleq	r2, ip, r3
   13954:	andeq	r1, r2, r4, asr r2
   13958:	andeq	r4, r3, r8, lsr #32
   1395c:	andeq	r2, r2, r4, ror r3
   13960:	andeq	r2, r2, r4, asr r3
   13964:	andeq	r2, r2, r0, ror #6
   13968:	andeq	r4, r3, r4, lsr r0
   1396c:	andeq	r1, r2, r0, asr ip
   13970:	andeq	r4, r1, r8, ror #14
   13974:	andeq	r4, r3, ip, lsr r0
   13978:	strdeq	r0, [r2], -r8
   1397c:	muleq	r1, r0, r3
   13980:	andeq	r2, r1, r8, ror #21
   13984:	andeq	r2, r2, r4, lsl r4
   13988:	andeq	r4, r3, r8, lsl r0
   1398c:	andeq	r2, r2, r4, lsr #8
   13990:	andeq	r4, r3, r4, lsr #32
   13994:	andeq	r1, r2, r4, lsl sp
   13998:	andeq	r1, r2, r0, lsr #26
   1399c:	andeq	r0, r2, r8, lsl #20
   139a0:	andeq	r2, r2, r0, ror #5
   139a4:	andeq	r1, r2, r0, asr #26
   139a8:	andeq	r1, r2, r8, ror #26
   139ac:	andeq	r1, r2, r4, ror sp
   139b0:	andeq	r1, r2, r0, lsr #27
   139b4:	strdeq	r1, [r2], -r0
   139b8:	andeq	r1, r2, r8, lsr #28
   139bc:	andeq	r1, r2, ip, asr lr
   139c0:	andeq	r1, r2, r4, lsl #29
   139c4:	ldrdeq	r1, [r2], -r0
   139c8:	andeq	r1, r2, r8, lsl #30
   139cc:	andeq	r1, r2, ip, lsr pc
   139d0:	andeq	r1, r2, r4, lsl #31
   139d4:			; <UNDEFINED> instruction: 0x00021fb4
   139d8:	andeq	r1, r2, r4, ror #31
   139dc:	andeq	r2, r2, r4, lsl r0
   139e0:	andeq	r2, r2, ip, asr #32
   139e4:	andeq	r2, r2, r8, ror r0
   139e8:	andeq	r2, r2, r0, lsr #1
   139ec:	andeq	r2, r2, ip, asr #1
   139f0:	andeq	r2, r2, r0, lsl #2
   139f4:	andeq	r2, r2, r8, lsr r1
   139f8:	andeq	r2, r2, r8, ror #2
   139fc:	muleq	r2, r4, r1
   13a00:	andeq	r2, r2, ip, asr #3
   13a04:	andeq	r2, r2, r0, lsl #4
   13a08:	andeq	r2, r2, r0, lsr r2
   13a0c:	andeq	r2, r2, r0, ror r2
   13a10:	andeq	r2, r2, r4, lsl #5
   13a14:			; <UNDEFINED> instruction: 0x000222b4
   13a18:	andeq	r2, r2, r0, lsr #5
   13a1c:	muleq	r2, r4, r2
   13a20:	andeq	r2, r2, r4, asr #5
   13a24:	andeq	r2, r2, ip, ror #5
   13a28:	andeq	r2, r2, r8, lsl #6
   13a2c:	andeq	r1, r2, ip, lsl #25
   13a30:	andeq	r4, r3, r0, lsl r0
   13a34:	andeq	r2, r2, ip, lsr #10
   13a38:	andeq	r1, r2, r0, lsr #24
   13a3c:			; <UNDEFINED> instruction: 0x00021cb0
   13a40:	andeq	r2, r2, r8, asr #8
   13a44:	andeq	r4, r3, r0, ror #3
   13a48:	andeq	r4, r3, r4, ror #11
   13a4c:	muleq	r2, r0, r4
   13a50:	strdeq	r2, [r2], -ip
   13a54:	andeq	r2, r2, ip, lsl #10
   13a58:	andeq	r2, r2, r0, asr #9
   13a5c:	andeq	r2, r2, r8, asr #9
   13a60:	andeq	r4, r3, r0, lsr #32
   13a64:	andeq	r2, r2, r4, ror r4
   13a68:	andeq	r1, r2, r8, ror #9
   13a6c:	ldrdeq	r1, [r2], -r4
   13a70:	andeq	r2, r2, r8, ror r4
   13a74:	andeq	r2, r2, r4, lsl r3
   13a78:	ldrdeq	r1, [r2], -r4
   13a7c:			; <UNDEFINED> instruction: 0x00021cb8
   13a80:	andeq	r1, r2, r4, lsr #9
   13a84:	ldrdeq	r2, [r2], -r8
   13a88:	andeq	r2, r2, r4, asr r4
   13a8c:	muleq	r2, r4, r4
   13a90:	andeq	r1, r2, r0, lsr r5
   13a94:	muleq	r2, ip, r4
   13a98:	andeq	r2, r2, ip, asr #7
   13a9c:			; <UNDEFINED> instruction: 0x000223bc
   13aa0:	strdeq	r2, [r2], -r4
   13aa4:	ldr	r3, [pc, #-284]	; 13990 <__assert_fail@plt+0xd10>
   13aa8:	mov	r2, #5
   13aac:	ldr	r1, [pc, #-288]	; 13994 <__assert_fail@plt+0xd14>
   13ab0:	ldr	r6, [r3]
   13ab4:	mov	r0, #0
   13ab8:	bl	126c8 <dcgettext@plt>
   13abc:	mov	r1, r6
   13ac0:	bl	12c08 <fputs@plt>
   13ac4:	mov	r2, #5
   13ac8:	ldr	r1, [pc, #-312]	; 13998 <__assert_fail@plt+0xd18>
   13acc:	mov	r0, #0
   13ad0:	bl	126c8 <dcgettext@plt>
   13ad4:	ldr	r3, [pc, #-172]	; 13a30 <__assert_fail@plt+0xdb0>
   13ad8:	mov	r1, #1
   13adc:	mov	r5, #0
   13ae0:	ldr	r3, [r3]
   13ae4:	ldr	r4, [pc, #-336]	; 1399c <__assert_fail@plt+0xd1c>
   13ae8:	ldr	r8, [pc, #-336]	; 139a0 <__assert_fail@plt+0xd20>
   13aec:	mov	r2, r0
   13af0:	mov	r0, r6
   13af4:	bl	12ab8 <__fprintf_chk@plt>
   13af8:	mov	r1, r6
   13afc:	mov	r0, #10
   13b00:	bl	12b60 <fputc@plt>
   13b04:	mov	r2, #5
   13b08:	ldr	r1, [pc, #-364]	; 139a4 <__assert_fail@plt+0xd24>
   13b0c:	mov	r0, r5
   13b10:	bl	126c8 <dcgettext@plt>
   13b14:	mov	r1, r6
   13b18:	bl	12c08 <fputs@plt>
   13b1c:	mov	r2, #5
   13b20:	ldr	r1, [pc, #-384]	; 139a8 <__assert_fail@plt+0xd28>
   13b24:	mov	r0, r5
   13b28:	bl	126c8 <dcgettext@plt>
   13b2c:	mov	r1, r6
   13b30:	bl	12c08 <fputs@plt>
   13b34:	mov	r2, #5
   13b38:	ldr	r1, [pc, #-404]	; 139ac <__assert_fail@plt+0xd2c>
   13b3c:	mov	r0, r5
   13b40:	bl	126c8 <dcgettext@plt>
   13b44:	mov	r1, r6
   13b48:	bl	12c08 <fputs@plt>
   13b4c:	mov	r2, #5
   13b50:	ldr	r1, [pc, #-424]	; 139b0 <__assert_fail@plt+0xd30>
   13b54:	mov	r0, r5
   13b58:	bl	126c8 <dcgettext@plt>
   13b5c:	mov	r1, r6
   13b60:	bl	12c08 <fputs@plt>
   13b64:	mov	r2, #5
   13b68:	ldr	r1, [pc, #-444]	; 139b4 <__assert_fail@plt+0xd34>
   13b6c:	mov	r0, r5
   13b70:	bl	126c8 <dcgettext@plt>
   13b74:	mov	r1, r6
   13b78:	bl	12c08 <fputs@plt>
   13b7c:	mov	r2, #5
   13b80:	ldr	r1, [pc, #-464]	; 139b8 <__assert_fail@plt+0xd38>
   13b84:	mov	r0, r5
   13b88:	bl	126c8 <dcgettext@plt>
   13b8c:	mov	r1, r6
   13b90:	bl	12c08 <fputs@plt>
   13b94:	mov	r2, #5
   13b98:	ldr	r1, [pc, #-484]	; 139bc <__assert_fail@plt+0xd3c>
   13b9c:	mov	r0, r5
   13ba0:	bl	126c8 <dcgettext@plt>
   13ba4:	mov	r1, r6
   13ba8:	bl	12c08 <fputs@plt>
   13bac:	mov	r2, #5
   13bb0:	ldr	r1, [pc, #-504]	; 139c0 <__assert_fail@plt+0xd40>
   13bb4:	mov	r0, r5
   13bb8:	bl	126c8 <dcgettext@plt>
   13bbc:	mov	r1, r6
   13bc0:	bl	12c08 <fputs@plt>
   13bc4:	mov	r2, #5
   13bc8:	ldr	r1, [pc, #-524]	; 139c4 <__assert_fail@plt+0xd44>
   13bcc:	mov	r0, r5
   13bd0:	bl	126c8 <dcgettext@plt>
   13bd4:	mov	r1, r6
   13bd8:	bl	12c08 <fputs@plt>
   13bdc:	mov	r2, #5
   13be0:	ldr	r1, [pc, #-544]	; 139c8 <__assert_fail@plt+0xd48>
   13be4:	mov	r0, r5
   13be8:	bl	126c8 <dcgettext@plt>
   13bec:	mov	r1, r6
   13bf0:	bl	12c08 <fputs@plt>
   13bf4:	mov	r2, #5
   13bf8:	ldr	r1, [pc, #-564]	; 139cc <__assert_fail@plt+0xd4c>
   13bfc:	mov	r0, r5
   13c00:	bl	126c8 <dcgettext@plt>
   13c04:	mov	r1, r6
   13c08:	bl	12c08 <fputs@plt>
   13c0c:	mov	r2, #5
   13c10:	ldr	r1, [pc, #-584]	; 139d0 <__assert_fail@plt+0xd50>
   13c14:	mov	r0, r5
   13c18:	bl	126c8 <dcgettext@plt>
   13c1c:	mov	r1, r6
   13c20:	bl	12c08 <fputs@plt>
   13c24:	mov	r2, #5
   13c28:	ldr	r1, [pc, #-604]	; 139d4 <__assert_fail@plt+0xd54>
   13c2c:	mov	r0, r5
   13c30:	bl	126c8 <dcgettext@plt>
   13c34:	mov	r1, r6
   13c38:	bl	12c08 <fputs@plt>
   13c3c:	mov	r2, #5
   13c40:	ldr	r1, [pc, #-624]	; 139d8 <__assert_fail@plt+0xd58>
   13c44:	mov	r0, r5
   13c48:	bl	126c8 <dcgettext@plt>
   13c4c:	mov	r1, r6
   13c50:	bl	12c08 <fputs@plt>
   13c54:	mov	r2, #5
   13c58:	ldr	r1, [pc, #-644]	; 139dc <__assert_fail@plt+0xd5c>
   13c5c:	mov	r0, r5
   13c60:	bl	126c8 <dcgettext@plt>
   13c64:	mov	r1, r6
   13c68:	bl	12c08 <fputs@plt>
   13c6c:	mov	r2, #5
   13c70:	ldr	r1, [pc, #-664]	; 139e0 <__assert_fail@plt+0xd60>
   13c74:	mov	r0, r5
   13c78:	bl	126c8 <dcgettext@plt>
   13c7c:	mov	r1, r6
   13c80:	bl	12c08 <fputs@plt>
   13c84:	mov	r2, #5
   13c88:	ldr	r1, [pc, #-684]	; 139e4 <__assert_fail@plt+0xd64>
   13c8c:	mov	r0, r5
   13c90:	bl	126c8 <dcgettext@plt>
   13c94:	mov	r1, r6
   13c98:	bl	12c08 <fputs@plt>
   13c9c:	mov	r2, #5
   13ca0:	ldr	r1, [pc, #-704]	; 139e8 <__assert_fail@plt+0xd68>
   13ca4:	mov	r0, r5
   13ca8:	bl	126c8 <dcgettext@plt>
   13cac:	mov	r1, r6
   13cb0:	bl	12c08 <fputs@plt>
   13cb4:	mov	r2, #5
   13cb8:	ldr	r1, [pc, #-724]	; 139ec <__assert_fail@plt+0xd6c>
   13cbc:	mov	r0, r5
   13cc0:	bl	126c8 <dcgettext@plt>
   13cc4:	mov	r1, r6
   13cc8:	bl	12c08 <fputs@plt>
   13ccc:	mov	r2, #5
   13cd0:	ldr	r1, [pc, #-744]	; 139f0 <__assert_fail@plt+0xd70>
   13cd4:	mov	r0, r5
   13cd8:	bl	126c8 <dcgettext@plt>
   13cdc:	mov	r1, r6
   13ce0:	bl	12c08 <fputs@plt>
   13ce4:	mov	r2, #5
   13ce8:	ldr	r1, [pc, #-764]	; 139f4 <__assert_fail@plt+0xd74>
   13cec:	mov	r0, r5
   13cf0:	bl	126c8 <dcgettext@plt>
   13cf4:	mov	r1, r6
   13cf8:	bl	12c08 <fputs@plt>
   13cfc:	mov	r2, #5
   13d00:	ldr	r1, [pc, #-784]	; 139f8 <__assert_fail@plt+0xd78>
   13d04:	mov	r0, r5
   13d08:	bl	126c8 <dcgettext@plt>
   13d0c:	mov	r1, r6
   13d10:	bl	12c08 <fputs@plt>
   13d14:	mov	r2, #5
   13d18:	ldr	r1, [pc, #-804]	; 139fc <__assert_fail@plt+0xd7c>
   13d1c:	mov	r0, r5
   13d20:	bl	126c8 <dcgettext@plt>
   13d24:	mov	r1, r6
   13d28:	bl	12c08 <fputs@plt>
   13d2c:	mov	r2, #5
   13d30:	ldr	r1, [pc, #-824]	; 13a00 <__assert_fail@plt+0xd80>
   13d34:	mov	r0, r5
   13d38:	bl	126c8 <dcgettext@plt>
   13d3c:	mov	r1, r6
   13d40:	bl	12c08 <fputs@plt>
   13d44:	mov	r2, #5
   13d48:	ldr	r1, [pc, #-844]	; 13a04 <__assert_fail@plt+0xd84>
   13d4c:	mov	r0, r5
   13d50:	bl	126c8 <dcgettext@plt>
   13d54:	mov	r1, r6
   13d58:	bl	12c08 <fputs@plt>
   13d5c:	mov	r2, #5
   13d60:	ldr	r1, [pc, #-864]	; 13a08 <__assert_fail@plt+0xd88>
   13d64:	mov	r0, r5
   13d68:	bl	126c8 <dcgettext@plt>
   13d6c:	mov	r1, r6
   13d70:	bl	12c08 <fputs@plt>
   13d74:	mov	r1, r6
   13d78:	mov	r0, #10
   13d7c:	bl	12b60 <fputc@plt>
   13d80:	mov	r2, #5
   13d84:	ldr	r1, [pc, #-896]	; 13a0c <__assert_fail@plt+0xd8c>
   13d88:	mov	r0, r5
   13d8c:	bl	126c8 <dcgettext@plt>
   13d90:	mov	r2, #5
   13d94:	ldr	r1, [pc, #-908]	; 13a10 <__assert_fail@plt+0xd90>
   13d98:	mov	r7, r0
   13d9c:	mov	r0, r5
   13da0:	bl	126c8 <dcgettext@plt>
   13da4:	ldr	r2, [pc, #-920]	; 13a14 <__assert_fail@plt+0xd94>
   13da8:	mov	r3, r7
   13dac:	str	r2, [sp]
   13db0:	ldr	r1, [pc, #-928]	; 13a18 <__assert_fail@plt+0xd98>
   13db4:	ldr	r2, [pc, #-928]	; 13a1c <__assert_fail@plt+0xd9c>
   13db8:	str	r0, [sp, #4]
   13dbc:	mov	r0, #1
   13dc0:	bl	12a64 <__printf_chk@plt>
   13dc4:	mov	r2, #5
   13dc8:	ldr	r1, [pc, #-944]	; 13a20 <__assert_fail@plt+0xda0>
   13dcc:	mov	r0, r5
   13dd0:	bl	126c8 <dcgettext@plt>
   13dd4:	mov	r1, #1
   13dd8:	mov	r2, r0
   13ddc:	mov	r0, r6
   13de0:	bl	12ab8 <__fprintf_chk@plt>
   13de4:	ldr	r1, [r4, #20]
   13de8:	mov	r2, #5
   13dec:	mov	r0, #0
   13df0:	ldr	r7, [r4]
   13df4:	bl	126c8 <dcgettext@plt>
   13df8:	add	r5, r5, #1
   13dfc:	mov	r3, r7
   13e00:	mov	r2, r8
   13e04:	mov	r1, #1
   13e08:	add	r4, r4, #32
   13e0c:	str	r0, [sp]
   13e10:	mov	r0, r6
   13e14:	bl	12ab8 <__fprintf_chk@plt>
   13e18:	cmp	r5, #52	; 0x34
   13e1c:	bne	13de4 <__assert_fail@plt+0x1164>
   13e20:	mov	r2, #5
   13e24:	ldr	r1, [pc, #-1032]	; 13a24 <__assert_fail@plt+0xda4>
   13e28:	mov	r0, #0
   13e2c:	bl	126c8 <dcgettext@plt>
   13e30:	ldr	r2, [pc, #-1040]	; 13a28 <__assert_fail@plt+0xda8>
   13e34:	mov	r1, r0
   13e38:	mov	r0, #1
   13e3c:	bl	12a64 <__printf_chk@plt>
   13e40:	mov	r0, #0
   13e44:	bl	12908 <exit@plt>
   13e48:	ldr	r0, [r3]
   13e4c:	bl	12c2c <scols_sort_table_by_tree@plt>
   13e50:	b	13864 <__assert_fail@plt+0xbe4>
   13e54:	ldr	r7, [pc, #-1020]	; 13a60 <__assert_fail@plt+0xde0>
   13e58:	mov	r2, #5
   13e5c:	ldr	r1, [pc, #-1080]	; 13a2c <__assert_fail@plt+0xdac>
   13e60:	mov	r0, #0
   13e64:	ldr	sl, [r7]
   13e68:	bl	126c8 <dcgettext@plt>
   13e6c:	ldr	r3, [pc, #-1092]	; 13a30 <__assert_fail@plt+0xdb0>
   13e70:	mov	r1, #1
   13e74:	sub	r4, r5, #4
   13e78:	ldr	r3, [r3]
   13e7c:	add	r5, r5, #56	; 0x38
   13e80:	ldr	r8, [pc, #-1108]	; 13a34 <__assert_fail@plt+0xdb4>
   13e84:	ldr	fp, [pc, #-1108]	; 13a38 <__assert_fail@plt+0xdb8>
   13e88:	ldr	r9, [pc, #-1108]	; 13a3c <__assert_fail@plt+0xdbc>
   13e8c:	mov	r2, r0
   13e90:	mov	r0, sl
   13e94:	bl	12ab8 <__fprintf_chk@plt>
   13e98:	ldr	r0, [r4, #4]!
   13e9c:	cmp	r0, #0
   13ea0:	beq	13ef8 <__assert_fail@plt+0x1278>
   13ea4:	cmp	r0, #97	; 0x61
   13ea8:	beq	13f0c <__assert_fail@plt+0x128c>
   13eac:	add	r2, r6, #12
   13eb0:	b	13ec4 <__assert_fail@plt+0x1244>
   13eb4:	add	r2, r2, #16
   13eb8:	ldr	r1, [r2, #12]
   13ebc:	cmp	r0, r1
   13ec0:	beq	13f10 <__assert_fail@plt+0x1290>
   13ec4:	ldr	r3, [r2, #16]
   13ec8:	cmp	r3, #0
   13ecc:	bne	13eb4 <__assert_fail@plt+0x1234>
   13ed0:	sub	r3, r0, #33	; 0x21
   13ed4:	cmp	r3, #93	; 0x5d
   13ed8:	bhi	13ef0 <__assert_fail@plt+0x1270>
   13edc:	mov	r3, r0
   13ee0:	mov	r2, r9
   13ee4:	mov	r1, #1
   13ee8:	ldr	r0, [r7]
   13eec:	bl	12ab8 <__fprintf_chk@plt>
   13ef0:	cmp	r5, r4
   13ef4:	bne	13e98 <__assert_fail@plt+0x1218>
   13ef8:	ldr	r1, [r7]
   13efc:	mov	r0, #10
   13f00:	bl	12b60 <fputc@plt>
   13f04:	mov	r0, #1
   13f08:	bl	12908 <exit@plt>
   13f0c:	mov	r3, fp
   13f10:	mov	r2, r8
   13f14:	mov	r1, #1
   13f18:	ldr	r0, [r7]
   13f1c:	bl	12ab8 <__fprintf_chk@plt>
   13f20:	b	13ef0 <__assert_fail@plt+0x1270>
   13f24:	mov	r2, #280	; 0x118
   13f28:	mov	r1, #0
   13f2c:	add	r0, sp, #88	; 0x58
   13f30:	bl	12a04 <memset@plt>
   13f34:	ldr	r0, [pc, #-1276]	; 13a40 <__assert_fail@plt+0xdc0>
   13f38:	bl	1b2b0 <__assert_fail@plt+0x8630>
   13f3c:	subs	r3, r0, #0
   13f40:	str	r3, [sp, #8]
   13f44:	beq	14238 <__assert_fail@plt+0x15b8>
   13f48:	ldr	r3, [r4, #424]	; 0x1a8
   13f4c:	ldr	r1, [r3, #12]
   13f50:	bl	1b3f4 <__assert_fail@plt+0x8774>
   13f54:	mov	r1, #0
   13f58:	ldr	r0, [sp, #8]
   13f5c:	bl	1c178 <__assert_fail@plt+0x94f8>
   13f60:	subs	r6, r0, #0
   13f64:	beq	140e4 <__assert_fail@plt+0x1464>
   13f68:	ldr	r3, [r4]
   13f6c:	tst	r3, #8
   13f70:	bne	14178 <__assert_fail@plt+0x14f8>
   13f74:	ldr	r8, [pc, #-1308]	; 13a60 <__assert_fail@plt+0xde0>
   13f78:	ldr	r9, [pc, #-1308]	; 13a64 <__assert_fail@plt+0xde4>
   13f7c:	ldr	r7, [pc, #-1308]	; 13a68 <__assert_fail@plt+0xde8>
   13f80:	mov	r0, r6
   13f84:	bl	14a60 <__assert_fail@plt+0x1de0>
   13f88:	cmp	r0, #0
   13f8c:	beq	140dc <__assert_fail@plt+0x145c>
   13f90:	ldr	r3, [r4]
   13f94:	add	r5, r0, #19
   13f98:	tst	r3, #8
   13f9c:	bne	14030 <__assert_fail@plt+0x13b0>
   13fa0:	mov	r2, #0
   13fa4:	mov	r3, r5
   13fa8:	mov	r1, r2
   13fac:	add	r0, sp, #88	; 0x58
   13fb0:	bl	14d9c <__assert_fail@plt+0x211c>
   13fb4:	cmp	r0, #0
   13fb8:	bne	14024 <__assert_fail@plt+0x13a4>
   13fbc:	ldr	r1, [r4, #428]	; 0x1ac
   13fc0:	ldr	r5, [sp, #340]	; 0x154
   13fc4:	cmp	r1, #255	; 0xff
   13fc8:	bhi	14254 <__assert_fail@plt+0x15d4>
   13fcc:	cmp	r1, #0
   13fd0:	beq	13ff0 <__assert_fail@plt+0x1370>
   13fd4:	ldr	r3, [pc, #-1432]	; 13a44 <__assert_fail@plt+0xdc4>
   13fd8:	ldr	r2, [r3], #4
   13fdc:	cmp	r5, r2
   13fe0:	beq	14134 <__assert_fail@plt+0x14b4>
   13fe4:	add	r0, r0, #1
   13fe8:	cmp	r1, r0
   13fec:	bne	13fd8 <__assert_fail@plt+0x1358>
   13ff0:	ldr	r0, [r4, #1456]	; 0x5b0
   13ff4:	cmp	r0, #255	; 0xff
   13ff8:	bhi	14224 <__assert_fail@plt+0x15a4>
   13ffc:	cmp	r0, #0
   14000:	beq	140a0 <__assert_fail@plt+0x1420>
   14004:	ldr	r2, [pc, #-1476]	; 13a48 <__assert_fail@plt+0xdc8>
   14008:	mov	r3, #0
   1400c:	ldr	r1, [r2], #4
   14010:	cmp	r5, r1
   14014:	beq	14060 <__assert_fail@plt+0x13e0>
   14018:	add	r3, r3, #1
   1401c:	cmp	r0, r3
   14020:	bne	1400c <__assert_fail@plt+0x138c>
   14024:	add	r0, sp, #88	; 0x58
   14028:	bl	14574 <__assert_fail@plt+0x18f4>
   1402c:	b	13f80 <__assert_fail@plt+0x1300>
   14030:	ldr	sl, [r8]
   14034:	bl	128fc <getpid@plt>
   14038:	stm	sp, {r7, r9}
   1403c:	ldr	r2, [pc, #-1496]	; 13a6c <__assert_fail@plt+0xdec>
   14040:	mov	r1, #1
   14044:	mov	r3, r0
   14048:	mov	r0, sl
   1404c:	bl	12ab8 <__fprintf_chk@plt>
   14050:	mov	r1, r5
   14054:	ldr	r0, [pc, #-1552]	; 13a4c <__assert_fail@plt+0xdcc>
   14058:	bl	14494 <__assert_fail@plt+0x1814>
   1405c:	b	13fa0 <__assert_fail@plt+0x1320>
   14060:	ldr	r3, [r4]
   14064:	tst	r3, #4
   14068:	beq	140a0 <__assert_fail@plt+0x1420>
   1406c:	ldr	sl, [r8]
   14070:	bl	128fc <getpid@plt>
   14074:	ldr	r3, [pc, #-1572]	; 13a58 <__assert_fail@plt+0xdd8>
   14078:	mov	r1, #1
   1407c:	str	r3, [sp, #4]
   14080:	str	r7, [sp]
   14084:	ldr	r2, [pc, #-1568]	; 13a6c <__assert_fail@plt+0xdec>
   14088:	mov	r3, r0
   1408c:	mov	r0, sl
   14090:	bl	12ab8 <__fprintf_chk@plt>
   14094:	mov	r1, r5
   14098:	ldr	r0, [pc, #-1616]	; 13a50 <__assert_fail@plt+0xdd0>
   1409c:	bl	14494 <__assert_fail@plt+0x1814>
   140a0:	ldr	r3, [r4, #424]	; 0x1a8
   140a4:	ldrb	r3, [r3, #20]
   140a8:	tst	r3, #4
   140ac:	ldrne	r3, [sp, #332]	; 0x14c
   140b0:	ldreq	r3, [sp, #336]	; 0x150
   140b4:	cmp	r3, #0
   140b8:	movle	r3, #0
   140bc:	movgt	r3, #1
   140c0:	cmp	r3, #0
   140c4:	bne	14024 <__assert_fail@plt+0x13a4>
   140c8:	mov	r1, r3
   140cc:	mov	r2, #1
   140d0:	add	r0, sp, #88	; 0x58
   140d4:	bl	1658c <__assert_fail@plt+0x390c>
   140d8:	b	14024 <__assert_fail@plt+0x13a4>
   140dc:	mov	r0, r6
   140e0:	bl	12c50 <closedir@plt>
   140e4:	ldr	r0, [sp, #8]
   140e8:	bl	1b1a8 <__assert_fail@plt+0x8528>
   140ec:	ldr	r3, [r4]
   140f0:	tst	r3, #8
   140f4:	beq	1383c <__assert_fail@plt+0xbbc>
   140f8:	ldr	r3, [pc, #-1696]	; 13a60 <__assert_fail@plt+0xde0>
   140fc:	ldr	r5, [r3]
   14100:	bl	128fc <getpid@plt>
   14104:	ldr	r2, [pc, #-1704]	; 13a64 <__assert_fail@plt+0xde4>
   14108:	ldr	r3, [pc, #-1704]	; 13a68 <__assert_fail@plt+0xde8>
   1410c:	str	r2, [sp, #4]
   14110:	str	r3, [sp]
   14114:	ldr	r2, [pc, #-1712]	; 13a6c <__assert_fail@plt+0xdec>
   14118:	mov	r1, #1
   1411c:	mov	r3, r0
   14120:	mov	r0, r5
   14124:	bl	12ab8 <__fprintf_chk@plt>
   14128:	ldr	r0, [pc, #-1756]	; 13a54 <__assert_fail@plt+0xdd4>
   1412c:	bl	14494 <__assert_fail@plt+0x1814>
   14130:	b	1383c <__assert_fail@plt+0xbbc>
   14134:	ldr	r3, [r4]
   14138:	tst	r3, #4
   1413c:	beq	14024 <__assert_fail@plt+0x13a4>
   14140:	ldr	sl, [r8]
   14144:	bl	128fc <getpid@plt>
   14148:	ldr	r3, [pc, #-1784]	; 13a58 <__assert_fail@plt+0xdd8>
   1414c:	str	r7, [sp]
   14150:	str	r3, [sp, #4]
   14154:	ldr	r2, [pc, #-1776]	; 13a6c <__assert_fail@plt+0xdec>
   14158:	mov	r1, #1
   1415c:	mov	r3, r0
   14160:	mov	r0, sl
   14164:	bl	12ab8 <__fprintf_chk@plt>
   14168:	mov	r1, r5
   1416c:	ldr	r0, [pc, #-1816]	; 13a5c <__assert_fail@plt+0xddc>
   14170:	bl	14494 <__assert_fail@plt+0x1814>
   14174:	b	14024 <__assert_fail@plt+0x13a4>
   14178:	ldr	r3, [pc, #-1824]	; 13a60 <__assert_fail@plt+0xde0>
   1417c:	ldr	r5, [r3]
   14180:	bl	128fc <getpid@plt>
   14184:	ldr	r2, [pc, #-1832]	; 13a64 <__assert_fail@plt+0xde4>
   14188:	ldr	r3, [pc, #-1832]	; 13a68 <__assert_fail@plt+0xde8>
   1418c:	str	r2, [sp, #4]
   14190:	str	r3, [sp]
   14194:	ldr	r2, [pc, #-1840]	; 13a6c <__assert_fail@plt+0xdec>
   14198:	mov	r1, #1
   1419c:	mov	r3, r0
   141a0:	mov	r0, r5
   141a4:	bl	12ab8 <__fprintf_chk@plt>
   141a8:	ldr	r0, [pc, #-1856]	; 13a70 <__assert_fail@plt+0xdf0>
   141ac:	bl	14494 <__assert_fail@plt+0x1814>
   141b0:	b	13f74 <__assert_fail@plt+0x12f4>
   141b4:	mov	r2, #5
   141b8:	ldr	r1, [pc, #-1860]	; 13a7c <__assert_fail@plt+0xdfc>
   141bc:	mov	r0, #0
   141c0:	bl	126c8 <dcgettext@plt>
   141c4:	ldr	r2, [sp, #20]
   141c8:	mov	r1, r0
   141cc:	mov	r0, #1
   141d0:	bl	12b24 <errx@plt>
   141d4:	ldr	r1, [pc, #-1896]	; 13a74 <__assert_fail@plt+0xdf4>
   141d8:	mov	r2, #5
   141dc:	mov	r0, #0
   141e0:	bl	126c8 <dcgettext@plt>
   141e4:	mov	r2, r5
   141e8:	mov	r1, r0
   141ec:	mov	r0, #1
   141f0:	bl	12b24 <errx@plt>
   141f4:	mov	r2, #5
   141f8:	ldr	r1, [pc, #-1928]	; 13a78 <__assert_fail@plt+0xdf8>
   141fc:	b	141dc <__assert_fail@plt+0x155c>
   14200:	mov	r2, #5
   14204:	ldr	r1, [pc, #-1936]	; 13a7c <__assert_fail@plt+0xdfc>
   14208:	mov	r0, #0
   1420c:	bl	126c8 <dcgettext@plt>
   14210:	ldr	r2, [sp, #20]
   14214:	mov	r1, r0
   14218:	mov	r0, #1
   1421c:	bl	12728 <err@plt>
   14220:	bl	126e0 <__stack_chk_fail@plt>
   14224:	ldr	r3, [pc, #-1964]	; 13a80 <__assert_fail@plt+0xe00>
   14228:	mov	r2, #268	; 0x10c
   1422c:	ldr	r1, [pc, #-1956]	; 13a90 <__assert_fail@plt+0xe10>
   14230:	ldr	r0, [pc, #-1972]	; 13a84 <__assert_fail@plt+0xe04>
   14234:	bl	12c80 <__assert_fail@plt>
   14238:	ldr	r1, [pc, #-1976]	; 13a88 <__assert_fail@plt+0xe08>
   1423c:	mov	r2, #5
   14240:	bl	126c8 <dcgettext@plt>
   14244:	mov	r1, r0
   14248:	mov	r0, #1
   1424c:	bl	12728 <err@plt>
   14250:	bl	14630 <__assert_fail@plt+0x19b0>
   14254:	ldr	r3, [pc, #-2000]	; 13a8c <__assert_fail@plt+0xe0c>
   14258:	mov	r2, #250	; 0xfa
   1425c:	ldr	r1, [pc, #-2004]	; 13a90 <__assert_fail@plt+0xe10>
   14260:	ldr	r0, [pc, #-2004]	; 13a94 <__assert_fail@plt+0xe14>
   14264:	bl	12c80 <__assert_fail@plt>
   14268:	mov	r2, #5
   1426c:	ldr	r1, [pc, #-2012]	; 13a98 <__assert_fail@plt+0xe18>
   14270:	mov	r0, #0
   14274:	bl	126c8 <dcgettext@plt>
   14278:	ldr	r2, [pc, #-2020]	; 13a9c <__assert_fail@plt+0xe1c>
   1427c:	mov	r1, r0
   14280:	mov	r0, #1
   14284:	bl	12728 <err@plt>
   14288:	ldr	r1, [pc, #-2032]	; 13aa0 <__assert_fail@plt+0xe20>
   1428c:	mov	r2, #5
   14290:	bl	126c8 <dcgettext@plt>
   14294:	mov	r1, r0
   14298:	mov	r0, #1
   1429c:	bl	12b24 <errx@plt>
   142a0:	mov	fp, #0
   142a4:	mov	lr, #0
   142a8:	pop	{r1}		; (ldr r1, [sp], #4)
   142ac:	mov	r2, sp
   142b0:	push	{r2}		; (str r2, [sp, #-4]!)
   142b4:	push	{r0}		; (str r0, [sp, #-4]!)
   142b8:	ldr	ip, [pc, #16]	; 142d0 <__assert_fail@plt+0x1650>
   142bc:	push	{ip}		; (str ip, [sp, #-4]!)
   142c0:	ldr	r0, [pc, #12]	; 142d4 <__assert_fail@plt+0x1654>
   142c4:	ldr	r3, [pc, #12]	; 142d8 <__assert_fail@plt+0x1658>
   142c8:	bl	12860 <__libc_start_main@plt>
   142cc:	bl	12c20 <abort@plt>
   142d0:	andeq	r0, r2, r8, asr #19
   142d4:	muleq	r1, r0, ip
   142d8:	andeq	r0, r2, r8, ror #18
   142dc:	ldr	r3, [pc, #20]	; 142f8 <__assert_fail@plt+0x1678>
   142e0:	ldr	r2, [pc, #20]	; 142fc <__assert_fail@plt+0x167c>
   142e4:	add	r3, pc, r3
   142e8:	ldr	r2, [r3, r2]
   142ec:	cmp	r2, #0
   142f0:	bxeq	lr
   142f4:	b	128cc <__gmon_start__@plt>
   142f8:	andeq	pc, r1, r0, ror #20
   142fc:			; <UNDEFINED> instruction: 0x000002b0
   14300:	ldr	r0, [pc, #24]	; 14320 <__assert_fail@plt+0x16a0>
   14304:	ldr	r3, [pc, #24]	; 14324 <__assert_fail@plt+0x16a4>
   14308:	cmp	r3, r0
   1430c:	bxeq	lr
   14310:	ldr	r3, [pc, #16]	; 14328 <__assert_fail@plt+0x16a8>
   14314:	cmp	r3, #0
   14318:	bxeq	lr
   1431c:	bx	r3
   14320:	andeq	r4, r3, ip
   14324:	andeq	r4, r3, ip
   14328:	andeq	r0, r0, r0
   1432c:	ldr	r0, [pc, #36]	; 14358 <__assert_fail@plt+0x16d8>
   14330:	ldr	r1, [pc, #36]	; 1435c <__assert_fail@plt+0x16dc>
   14334:	sub	r1, r1, r0
   14338:	asr	r1, r1, #2
   1433c:	add	r1, r1, r1, lsr #31
   14340:	asrs	r1, r1, #1
   14344:	bxeq	lr
   14348:	ldr	r3, [pc, #16]	; 14360 <__assert_fail@plt+0x16e0>
   1434c:	cmp	r3, #0
   14350:	bxeq	lr
   14354:	bx	r3
   14358:	andeq	r4, r3, ip
   1435c:	andeq	r4, r3, ip
   14360:	andeq	r0, r0, r0
   14364:	push	{r4, lr}
   14368:	ldr	r4, [pc, #24]	; 14388 <__assert_fail@plt+0x1708>
   1436c:	ldrb	r3, [r4]
   14370:	cmp	r3, #0
   14374:	popne	{r4, pc}
   14378:	bl	14300 <__assert_fail@plt+0x1680>
   1437c:	mov	r3, #1
   14380:	strb	r3, [r4]
   14384:	pop	{r4, pc}
   14388:	andeq	r4, r3, ip, lsr #32
   1438c:	b	1432c <__assert_fail@plt+0x16ac>
   14390:	push	{r4, r5, r6, lr}
   14394:	mov	r5, r1
   14398:	bl	1283c <scols_cell_get_userdata@plt>
   1439c:	mov	r4, r0
   143a0:	mov	r0, r5
   143a4:	bl	1283c <scols_cell_get_userdata@plt>
   143a8:	orrs	r3, r4, r0
   143ac:	beq	143e8 <__assert_fail@plt+0x1768>
   143b0:	cmp	r4, #0
   143b4:	beq	143e0 <__assert_fail@plt+0x1760>
   143b8:	cmp	r0, #0
   143bc:	beq	143d8 <__assert_fail@plt+0x1758>
   143c0:	ldrd	r4, [r4]
   143c4:	ldrd	r2, [r0]
   143c8:	cmp	r5, r3
   143cc:	cmpeq	r4, r2
   143d0:	beq	143e8 <__assert_fail@plt+0x1768>
   143d4:	bcc	143e0 <__assert_fail@plt+0x1760>
   143d8:	mov	r0, #1
   143dc:	pop	{r4, r5, r6, pc}
   143e0:	mvn	r0, #0
   143e4:	pop	{r4, r5, r6, pc}
   143e8:	mov	r0, #0
   143ec:	pop	{r4, r5, r6, pc}
   143f0:	push	{r1, r2, r3}
   143f4:	ldr	r2, [pc, #136]	; 14484 <__assert_fail@plt+0x1804>
   143f8:	push	{r4, r5, r6, lr}
   143fc:	sub	sp, sp, #12
   14400:	ldr	r5, [pc, #128]	; 14488 <__assert_fail@plt+0x1808>
   14404:	ldr	r1, [r2]
   14408:	ldr	r4, [pc, #124]	; 1448c <__assert_fail@plt+0x180c>
   1440c:	ldr	r2, [r5]
   14410:	tst	r1, #16777216	; 0x1000000
   14414:	str	r2, [sp, #4]
   14418:	ldr	r6, [sp, #28]
   1441c:	beq	14468 <__assert_fail@plt+0x17e8>
   14420:	add	ip, sp, #32
   14424:	mov	r2, r6
   14428:	mov	r3, ip
   1442c:	mov	r1, #1
   14430:	ldr	r0, [r4]
   14434:	str	ip, [sp]
   14438:	bl	12890 <__vfprintf_chk@plt>
   1443c:	ldr	r1, [r4]
   14440:	mov	r0, #10
   14444:	bl	12b60 <fputc@plt>
   14448:	ldr	r2, [sp, #4]
   1444c:	ldr	r3, [r5]
   14450:	cmp	r2, r3
   14454:	bne	14480 <__assert_fail@plt+0x1800>
   14458:	add	sp, sp, #12
   1445c:	pop	{r4, r5, r6, lr}
   14460:	add	sp, sp, #12
   14464:	bx	lr
   14468:	mov	r3, r0
   1446c:	ldr	r2, [pc, #28]	; 14490 <__assert_fail@plt+0x1810>
   14470:	ldr	r0, [r4]
   14474:	mov	r1, #1
   14478:	bl	12ab8 <__fprintf_chk@plt>
   1447c:	b	14420 <__assert_fail@plt+0x17a0>
   14480:	bl	126e0 <__stack_chk_fail@plt>
   14484:	andeq	r4, r3, r0, lsr r0
   14488:	andeq	r3, r3, r8, lsr #24
   1448c:	andeq	r4, r3, r0, lsr #32
   14490:			; <UNDEFINED> instruction: 0x000214b4
   14494:	push	{r0, r1, r2, r3}
   14498:	push	{r4, r5, lr}
   1449c:	sub	sp, sp, #12
   144a0:	ldr	r4, [pc, #84]	; 144fc <__assert_fail@plt+0x187c>
   144a4:	ldr	r5, [pc, #84]	; 14500 <__assert_fail@plt+0x1880>
   144a8:	add	ip, sp, #28
   144ac:	ldr	r1, [r4]
   144b0:	mov	r3, ip
   144b4:	ldr	r2, [sp, #24]
   144b8:	str	r1, [sp, #4]
   144bc:	ldr	r0, [r5]
   144c0:	mov	r1, #1
   144c4:	str	ip, [sp]
   144c8:	bl	12890 <__vfprintf_chk@plt>
   144cc:	ldr	r1, [r5]
   144d0:	mov	r0, #10
   144d4:	bl	12b60 <fputc@plt>
   144d8:	ldr	r2, [sp, #4]
   144dc:	ldr	r3, [r4]
   144e0:	cmp	r2, r3
   144e4:	bne	144f8 <__assert_fail@plt+0x1878>
   144e8:	add	sp, sp, #12
   144ec:	pop	{r4, r5, lr}
   144f0:	add	sp, sp, #16
   144f4:	bx	lr
   144f8:	bl	126e0 <__stack_chk_fail@plt>
   144fc:	andeq	r3, r3, r8, lsr #24
   14500:	andeq	r4, r3, r0, lsr #32
   14504:	push	{r1, r2, r3}
   14508:	push	{r4, lr}
   1450c:	sub	sp, sp, #12
   14510:	ldr	r4, [pc, #84]	; 1456c <__assert_fail@plt+0x18ec>
   14514:	add	ip, sp, #24
   14518:	mov	r3, ip
   1451c:	ldr	r1, [r4]
   14520:	ldr	r2, [sp, #20]
   14524:	str	r1, [sp, #4]
   14528:	mov	r1, #1
   1452c:	str	ip, [sp]
   14530:	bl	129d4 <__vasprintf_chk@plt>
   14534:	cmp	r0, #0
   14538:	blt	1455c <__assert_fail@plt+0x18dc>
   1453c:	ldr	r2, [sp, #4]
   14540:	ldr	r3, [r4]
   14544:	cmp	r2, r3
   14548:	bne	14568 <__assert_fail@plt+0x18e8>
   1454c:	add	sp, sp, #12
   14550:	pop	{r4, lr}
   14554:	add	sp, sp, #12
   14558:	bx	lr
   1455c:	ldr	r1, [pc, #12]	; 14570 <__assert_fail@plt+0x18f0>
   14560:	mov	r0, #1
   14564:	bl	12728 <err@plt>
   14568:	bl	126e0 <__stack_chk_fail@plt>
   1456c:	andeq	r3, r3, r8, lsr #24
   14570:			; <UNDEFINED> instruction: 0x000214bc
   14574:	ldr	r3, [pc, #156]	; 14618 <__assert_fail@plt+0x1998>
   14578:	push	{r4, r5, lr}
   1457c:	mov	r4, r0
   14580:	ldr	r3, [r3]
   14584:	sub	sp, sp, #12
   14588:	tst	r3, #16
   1458c:	bne	145d8 <__assert_fail@plt+0x1958>
   14590:	ldr	r0, [r4, #120]	; 0x78
   14594:	bl	125d8 <free@plt>
   14598:	ldr	r0, [r4, #124]	; 0x7c
   1459c:	bl	125d8 <free@plt>
   145a0:	ldr	r0, [r4, #128]	; 0x80
   145a4:	bl	125d8 <free@plt>
   145a8:	ldr	r0, [r4, #140]	; 0x8c
   145ac:	bl	125d8 <free@plt>
   145b0:	ldr	r0, [r4, #4]
   145b4:	bl	17544 <__assert_fail@plt+0x48c4>
   145b8:	ldr	r0, [r4, #132]	; 0x84
   145bc:	bl	1b1a8 <__assert_fail@plt+0x8528>
   145c0:	mov	r0, r4
   145c4:	mov	r2, #280	; 0x118
   145c8:	mov	r1, #0
   145cc:	add	sp, sp, #12
   145d0:	pop	{r4, r5, lr}
   145d4:	b	12a04 <memset@plt>
   145d8:	ldr	r3, [pc, #60]	; 1461c <__assert_fail@plt+0x199c>
   145dc:	ldr	r5, [r3]
   145e0:	bl	128fc <getpid@plt>
   145e4:	ldr	r2, [pc, #52]	; 14620 <__assert_fail@plt+0x19a0>
   145e8:	ldr	r3, [pc, #52]	; 14624 <__assert_fail@plt+0x19a4>
   145ec:	str	r2, [sp, #4]
   145f0:	str	r3, [sp]
   145f4:	ldr	r2, [pc, #44]	; 14628 <__assert_fail@plt+0x19a8>
   145f8:	mov	r1, #1
   145fc:	mov	r3, r0
   14600:	mov	r0, r5
   14604:	bl	12ab8 <__fprintf_chk@plt>
   14608:	ldr	r1, [pc, #28]	; 1462c <__assert_fail@plt+0x19ac>
   1460c:	mov	r0, r4
   14610:	bl	143f0 <__assert_fail@plt+0x1770>
   14614:	b	14590 <__assert_fail@plt+0x1910>
   14618:	andeq	r4, r3, r0, lsr r0
   1461c:	andeq	r4, r3, r0, lsr #32
   14620:	andeq	r1, r2, r4, ror #9
   14624:	andeq	r1, r2, r8, ror #9
   14628:	ldrdeq	r1, [r2], -r4
   1462c:	strdeq	r1, [r2], -r0
   14630:	mov	r2, #5
   14634:	ldr	r1, [pc, #24]	; 14654 <__assert_fail@plt+0x19d4>
   14638:	push	{r4, lr}
   1463c:	mov	r0, #0
   14640:	bl	126c8 <dcgettext@plt>
   14644:	mov	r2, #103	; 0x67
   14648:	mov	r1, r0
   1464c:	mov	r0, #1
   14650:	bl	12b24 <errx@plt>
   14654:	strdeq	r1, [r2], -r8
   14658:	push	{r4, lr}
   1465c:	ldr	lr, [pc, #96]	; 146c4 <__assert_fail@plt+0x1a44>
   14660:	ldr	ip, [lr, #4]
   14664:	cmp	ip, #0
   14668:	beq	146b8 <__assert_fail@plt+0x1a38>
   1466c:	ldr	r3, [lr, #8]
   14670:	cmp	r0, r3
   14674:	popeq	{r4, pc}
   14678:	add	r2, lr, #12
   1467c:	mov	r3, #0
   14680:	b	14690 <__assert_fail@plt+0x1a10>
   14684:	ldr	r1, [r2], #4
   14688:	cmp	r0, r1
   1468c:	popeq	{r4, pc}
   14690:	add	r3, r3, #1
   14694:	cmp	ip, r3
   14698:	bne	14684 <__assert_fail@plt+0x1a04>
   1469c:	cmp	ip, #104	; 0x68
   146a0:	beq	146c0 <__assert_fail@plt+0x1a40>
   146a4:	add	r3, ip, #1
   146a8:	add	ip, lr, ip, lsl #2
   146ac:	str	r3, [lr, #4]
   146b0:	str	r0, [ip, #8]
   146b4:	pop	{r4, pc}
   146b8:	mov	r3, #1
   146bc:	b	146a8 <__assert_fail@plt+0x1a28>
   146c0:	bl	14630 <__assert_fail@plt+0x19b0>
   146c4:	andeq	r4, r3, r0, lsr r0
   146c8:	cmp	r0, #0
   146cc:	push	{r4, lr}
   146d0:	blt	1471c <__assert_fail@plt+0x1a9c>
   146d4:	ldr	r3, [pc, #84]	; 14730 <__assert_fail@plt+0x1ab0>
   146d8:	ldr	r2, [r3, #4]
   146dc:	cmp	r0, r2
   146e0:	bcs	14708 <__assert_fail@plt+0x1a88>
   146e4:	add	r3, r3, r0, lsl #2
   146e8:	ldr	r0, [r3, #8]
   146ec:	cmp	r0, #51	; 0x33
   146f0:	pople	{r4, pc}
   146f4:	ldr	r3, [pc, #56]	; 14734 <__assert_fail@plt+0x1ab4>
   146f8:	ldr	r2, [pc, #56]	; 14738 <__assert_fail@plt+0x1ab8>
   146fc:	ldr	r1, [pc, #56]	; 1473c <__assert_fail@plt+0x1abc>
   14700:	ldr	r0, [pc, #56]	; 14740 <__assert_fail@plt+0x1ac0>
   14704:	bl	12c80 <__assert_fail@plt>
   14708:	ldr	r3, [pc, #36]	; 14734 <__assert_fail@plt+0x1ab4>
   1470c:	ldr	r2, [pc, #48]	; 14744 <__assert_fail@plt+0x1ac4>
   14710:	ldr	r1, [pc, #36]	; 1473c <__assert_fail@plt+0x1abc>
   14714:	ldr	r0, [pc, #44]	; 14748 <__assert_fail@plt+0x1ac8>
   14718:	bl	12c80 <__assert_fail@plt>
   1471c:	ldr	r3, [pc, #16]	; 14734 <__assert_fail@plt+0x1ab4>
   14720:	ldr	r2, [pc, #36]	; 1474c <__assert_fail@plt+0x1acc>
   14724:	ldr	r1, [pc, #16]	; 1473c <__assert_fail@plt+0x1abc>
   14728:	ldr	r0, [pc, #32]	; 14750 <__assert_fail@plt+0x1ad0>
   1472c:	bl	12c80 <__assert_fail@plt>
   14730:	andeq	r4, r3, r0, lsr r0
   14734:	strdeq	r0, [r2], -r8
   14738:	andeq	r0, r0, pc, lsl r1
   1473c:	andeq	r1, r2, r0, lsr r5
   14740:	andeq	r1, r2, r8, ror #10
   14744:	andeq	r0, r0, lr, lsl r1
   14748:	andeq	r1, r2, r0, asr r5
   1474c:	andeq	r0, r0, sp, lsl r1
   14750:	andeq	r1, r2, r4, asr #10
   14754:	push	{r4, lr}
   14758:	mov	r0, #1
   1475c:	ldr	r1, [pc]	; 14764 <__assert_fail@plt+0x1ae4>
   14760:	bl	12728 <err@plt>
   14764:	muleq	r2, r0, r5
   14768:	push	{r4, r5, r6, r7, r8, lr}
   1476c:	mov	r7, r0
   14770:	ldr	r5, [pc, #104]	; 147e0 <__assert_fail@plt+0x1b60>
   14774:	ldr	r8, [pc, #104]	; 147e4 <__assert_fail@plt+0x1b64>
   14778:	mov	r6, r1
   1477c:	mov	r4, #0
   14780:	b	14794 <__assert_fail@plt+0x1b14>
   14784:	add	r4, r4, #1
   14788:	cmp	r4, #52	; 0x34
   1478c:	beq	147c0 <__assert_fail@plt+0x1b40>
   14790:	ldr	r5, [r8, r4, lsl #5]
   14794:	mov	r2, r6
   14798:	mov	r1, r5
   1479c:	mov	r0, r7
   147a0:	bl	129bc <strncasecmp@plt>
   147a4:	cmp	r0, #0
   147a8:	bne	14784 <__assert_fail@plt+0x1b04>
   147ac:	ldrsb	r3, [r5, r6]
   147b0:	cmp	r3, #0
   147b4:	bne	14784 <__assert_fail@plt+0x1b04>
   147b8:	mov	r0, r4
   147bc:	pop	{r4, r5, r6, r7, r8, pc}
   147c0:	mov	r2, #5
   147c4:	ldr	r1, [pc, #28]	; 147e8 <__assert_fail@plt+0x1b68>
   147c8:	mov	r0, #0
   147cc:	bl	126c8 <dcgettext@plt>
   147d0:	mov	r1, r7
   147d4:	bl	1295c <warnx@plt>
   147d8:	mvn	r0, #0
   147dc:	pop	{r4, r5, r6, r7, r8, pc}
   147e0:	andeq	r1, r2, r8, lsr #11
   147e4:	andeq	r0, r2, r8, lsl #20
   147e8:			; <UNDEFINED> instruction: 0x000215b0
   147ec:	push	{r4, r5, lr}
   147f0:	sub	sp, sp, #4096	; 0x1000
   147f4:	ldr	r5, [pc, #220]	; 148d8 <__assert_fail@plt+0x1c58>
   147f8:	sub	sp, sp, #20
   147fc:	add	r2, sp, #4096	; 0x1000
   14800:	ldr	r4, [r0, #120]	; 0x78
   14804:	ldr	r3, [r5]
   14808:	add	r2, r2, #12
   1480c:	cmp	r4, #0
   14810:	str	r3, [r2]
   14814:	beq	148b8 <__assert_fail@plt+0x1c38>
   14818:	mov	r2, #3
   1481c:	ldr	r1, [pc, #184]	; 148dc <__assert_fail@plt+0x1c5c>
   14820:	mov	r0, r4
   14824:	bl	12c14 <strncmp@plt>
   14828:	cmp	r0, #0
   1482c:	beq	148a0 <__assert_fail@plt+0x1c20>
   14830:	ldr	r2, [pc, #168]	; 148e0 <__assert_fail@plt+0x1c60>
   14834:	mov	r3, #4096	; 0x1000
   14838:	add	r0, sp, #12
   1483c:	stm	sp, {r2, r4}
   14840:	mov	r1, r3
   14844:	mov	r2, #1
   14848:	bl	12c5c <__snprintf_chk@plt>
   1484c:	mov	r4, #47	; 0x2f
   14850:	b	14858 <__assert_fail@plt+0x1bd8>
   14854:	strb	r4, [r0]
   14858:	mov	r1, #33	; 0x21
   1485c:	add	r0, sp, #12
   14860:	bl	12950 <strchr@plt>
   14864:	cmp	r0, #0
   14868:	bne	14854 <__assert_fail@plt+0x1bd4>
   1486c:	add	r0, sp, #12
   14870:	bl	126d4 <strdup@plt>
   14874:	cmp	r0, #0
   14878:	beq	148d0 <__assert_fail@plt+0x1c50>
   1487c:	add	r3, sp, #4096	; 0x1000
   14880:	add	r3, r3, #12
   14884:	ldr	r2, [r3]
   14888:	ldr	r3, [r5]
   1488c:	cmp	r2, r3
   14890:	bne	148cc <__assert_fail@plt+0x1c4c>
   14894:	add	sp, sp, #4096	; 0x1000
   14898:	add	sp, sp, #20
   1489c:	pop	{r4, r5, pc}
   148a0:	ldr	r3, [pc, #60]	; 148e4 <__assert_fail@plt+0x1c64>
   148a4:	mov	r1, r4
   148a8:	ldr	r3, [r3, #424]	; 0x1a8
   148ac:	ldr	r0, [r3, #12]
   148b0:	bl	18638 <__assert_fail@plt+0x59b8>
   148b4:	b	1487c <__assert_fail@plt+0x1bfc>
   148b8:	ldr	r3, [pc, #40]	; 148e8 <__assert_fail@plt+0x1c68>
   148bc:	ldr	r2, [pc, #40]	; 148ec <__assert_fail@plt+0x1c6c>
   148c0:	ldr	r1, [pc, #40]	; 148f0 <__assert_fail@plt+0x1c70>
   148c4:	ldr	r0, [pc, #40]	; 148f4 <__assert_fail@plt+0x1c74>
   148c8:	bl	12c80 <__assert_fail@plt>
   148cc:	bl	126e0 <__stack_chk_fail@plt>
   148d0:	add	r0, sp, #12
   148d4:	bl	14754 <__assert_fail@plt+0x1ad4>
   148d8:	andeq	r3, r3, r8, lsr #24
   148dc:	ldrdeq	r1, [r2], -r0
   148e0:	ldrdeq	r1, [r2], -r4
   148e4:	andeq	r4, r3, r0, lsr r0
   148e8:	andeq	r1, r2, r8, lsl #1
   148ec:	andeq	r0, r0, sp, ror #2
   148f0:	andeq	r1, r2, r0, lsr r5
   148f4:	andeq	r1, r2, r4, asr #11
   148f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148fc:	sub	sp, sp, #4096	; 0x1000
   14900:	ldr	r3, [pc, #336]	; 14a58 <__assert_fail@plt+0x1dd8>
   14904:	sub	sp, sp, #12
   14908:	add	ip, sp, #4096	; 0x1000
   1490c:	ldr	r3, [r3]
   14910:	add	ip, ip, #4
   14914:	mov	r8, r0
   14918:	add	r1, sp, #4
   1491c:	ldr	r0, [r0]
   14920:	mov	r2, #4096	; 0x1000
   14924:	str	r3, [ip]
   14928:	bl	1e640 <__assert_fail@plt+0xb9c0>
   1492c:	subs	r9, r0, #0
   14930:	beq	14a14 <__assert_fail@plt+0x1d94>
   14934:	mov	r7, #0
   14938:	mov	r6, r7
   1493c:	mov	r4, r7
   14940:	mov	sl, #58	; 0x3a
   14944:	b	149bc <__assert_fail@plt+0x1d3c>
   14948:	mov	r1, r5
   1494c:	add	r0, r4, r7
   14950:	bl	12524 <strcmp@plt>
   14954:	cmp	r0, #0
   14958:	mov	r0, r5
   1495c:	beq	149b8 <__assert_fail@plt+0x1d38>
   14960:	bl	12938 <strlen@plt>
   14964:	add	r7, r6, #2
   14968:	add	r7, r7, r0
   1496c:	mov	fp, r0
   14970:	mov	r1, r7
   14974:	mov	r0, r4
   14978:	bl	126ec <realloc@plt>
   1497c:	adds	r3, r7, #0
   14980:	movne	r3, #1
   14984:	cmp	r0, #0
   14988:	movne	r3, #0
   1498c:	cmp	r3, #0
   14990:	mov	r4, r0
   14994:	bne	14a44 <__assert_fail@plt+0x1dc4>
   14998:	add	r7, r6, #1
   1499c:	strb	sl, [r4, r6]
   149a0:	add	r0, r4, r7
   149a4:	add	r6, r7, fp
   149a8:	add	r2, fp, #1
   149ac:	mov	r1, r5
   149b0:	bl	12674 <memcpy@plt>
   149b4:	mov	r0, r5
   149b8:	bl	125d8 <free@plt>
   149bc:	mov	r2, sp
   149c0:	mov	r1, r9
   149c4:	ldr	r0, [r8]
   149c8:	bl	1e710 <__assert_fail@plt+0xba90>
   149cc:	cmp	r0, #0
   149d0:	bne	14a18 <__assert_fail@plt+0x1d98>
   149d4:	cmp	r6, #0
   149d8:	ldr	r5, [sp]
   149dc:	bne	14948 <__assert_fail@plt+0x1cc8>
   149e0:	mov	r0, r5
   149e4:	bl	12938 <strlen@plt>
   149e8:	add	r7, r0, #2
   149ec:	mov	fp, r0
   149f0:	mov	r1, r7
   149f4:	mov	r0, r4
   149f8:	bl	126ec <realloc@plt>
   149fc:	subs	r4, r0, #0
   14a00:	beq	14a44 <__assert_fail@plt+0x1dc4>
   14a04:	mov	r7, r6
   14a08:	mov	r0, r4
   14a0c:	mov	r6, fp
   14a10:	b	149a8 <__assert_fail@plt+0x1d28>
   14a14:	mov	r4, r9
   14a18:	add	r3, sp, #4096	; 0x1000
   14a1c:	add	r3, r3, #4
   14a20:	ldr	r2, [r3]
   14a24:	ldr	r3, [pc, #44]	; 14a58 <__assert_fail@plt+0x1dd8>
   14a28:	mov	r0, r4
   14a2c:	ldr	r3, [r3]
   14a30:	cmp	r2, r3
   14a34:	bne	14a54 <__assert_fail@plt+0x1dd4>
   14a38:	add	sp, sp, #4096	; 0x1000
   14a3c:	add	sp, sp, #12
   14a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a44:	mov	r2, r7
   14a48:	ldr	r1, [pc, #12]	; 14a5c <__assert_fail@plt+0x1ddc>
   14a4c:	mov	r0, #1
   14a50:	bl	12728 <err@plt>
   14a54:	bl	126e0 <__stack_chk_fail@plt>
   14a58:	andeq	r3, r3, r8, lsr #24
   14a5c:	ldrdeq	r1, [r2], -ip
   14a60:	push	{r4, r5, r6, r7, r8, lr}
   14a64:	subs	r6, r0, #0
   14a68:	beq	14ab8 <__assert_fail@plt+0x1e38>
   14a6c:	ldr	r7, [pc, #88]	; 14acc <__assert_fail@plt+0x1e4c>
   14a70:	ldr	r8, [pc, #88]	; 14ad0 <__assert_fail@plt+0x1e50>
   14a74:	mov	r0, r6
   14a78:	bl	12b84 <readdir64@plt>
   14a7c:	subs	r5, r0, #0
   14a80:	beq	14ab0 <__assert_fail@plt+0x1e30>
   14a84:	add	r4, r5, #19
   14a88:	mov	r0, r4
   14a8c:	mov	r1, r7
   14a90:	bl	12524 <strcmp@plt>
   14a94:	cmp	r0, #0
   14a98:	beq	14a74 <__assert_fail@plt+0x1df4>
   14a9c:	mov	r0, r4
   14aa0:	mov	r1, r8
   14aa4:	bl	12524 <strcmp@plt>
   14aa8:	cmp	r0, #0
   14aac:	beq	14a74 <__assert_fail@plt+0x1df4>
   14ab0:	mov	r0, r5
   14ab4:	pop	{r4, r5, r6, r7, r8, pc}
   14ab8:	ldr	r3, [pc, #20]	; 14ad4 <__assert_fail@plt+0x1e54>
   14abc:	ldr	r2, [pc, #20]	; 14ad8 <__assert_fail@plt+0x1e58>
   14ac0:	ldr	r1, [pc, #20]	; 14adc <__assert_fail@plt+0x1e5c>
   14ac4:	ldr	r0, [pc, #20]	; 14ae0 <__assert_fail@plt+0x1e60>
   14ac8:	bl	12c80 <__assert_fail@plt>
   14acc:	strdeq	r1, [r2], -ip
   14ad0:	andeq	r1, r2, r0, lsl #12
   14ad4:	muleq	r2, r8, r0
   14ad8:	andeq	r0, r0, fp, asr r1
   14adc:	andeq	r1, r2, r0, lsr r5
   14ae0:	strdeq	r1, [r2], -r8
   14ae4:	push	{r4, r6, r7, lr}
   14ae8:	mov	r6, r2
   14aec:	mov	r7, r3
   14af0:	bl	12980 <scols_line_get_cell@plt>
   14af4:	subs	r4, r0, #0
   14af8:	popeq	{r4, r6, r7, pc}
   14afc:	mov	r0, #8
   14b00:	bl	12854 <malloc@plt>
   14b04:	subs	r1, r0, #0
   14b08:	beq	14b1c <__assert_fail@plt+0x1e9c>
   14b0c:	strd	r6, [r1]
   14b10:	mov	r0, r4
   14b14:	pop	{r4, r6, r7, lr}
   14b18:	b	125c0 <scols_cell_set_userdata@plt>
   14b1c:	mov	r2, #8
   14b20:	ldr	r1, [pc, #4]	; 14b2c <__assert_fail@plt+0x1eac>
   14b24:	mov	r0, #1
   14b28:	bl	12728 <err@plt>
   14b2c:	ldrdeq	r1, [r2], -ip
   14b30:	push	{r4, r5, r6, lr}
   14b34:	sub	sp, sp, #16
   14b38:	ldr	r4, [pc, #92]	; 14b9c <__assert_fail@plt+0x1f1c>
   14b3c:	cmp	r2, #0
   14b40:	ldr	r3, [r4]
   14b44:	str	r3, [sp, #12]
   14b48:	beq	14b6c <__assert_fail@plt+0x1eec>
   14b4c:	mov	r5, r0
   14b50:	mov	r6, r1
   14b54:	mov	r0, r2
   14b58:	ldr	r1, [pc, #64]	; 14ba0 <__assert_fail@plt+0x1f20>
   14b5c:	mov	r2, sp
   14b60:	bl	12b6c <sscanf@plt>
   14b64:	cmp	r0, #1
   14b68:	beq	14b84 <__assert_fail@plt+0x1f04>
   14b6c:	ldr	r2, [sp, #12]
   14b70:	ldr	r3, [r4]
   14b74:	cmp	r2, r3
   14b78:	bne	14b98 <__assert_fail@plt+0x1f18>
   14b7c:	add	sp, sp, #16
   14b80:	pop	{r4, r5, r6, pc}
   14b84:	mov	r1, r6
   14b88:	mov	r0, r5
   14b8c:	ldrd	r2, [sp]
   14b90:	bl	14ae4 <__assert_fail@plt+0x1e64>
   14b94:	b	14b6c <__assert_fail@plt+0x1eec>
   14b98:	bl	126e0 <__stack_chk_fail@plt>
   14b9c:	andeq	r3, r3, r8, lsr #24
   14ba0:	andeq	r1, r2, r4, lsl #12
   14ba4:	ldr	r3, [pc, #292]	; 14cd0 <__assert_fail@plt+0x2050>
   14ba8:	push	{r4, r5, r6, lr}
   14bac:	ldr	r4, [r3]
   14bb0:	mov	r0, r4
   14bb4:	bl	127e8 <__fpending@plt>
   14bb8:	mov	r6, r0
   14bbc:	mov	r0, r4
   14bc0:	bl	1262c <ferror@plt>
   14bc4:	mov	r5, r0
   14bc8:	mov	r0, r4
   14bcc:	bl	12adc <fclose@plt>
   14bd0:	cmp	r5, #0
   14bd4:	mov	r4, r0
   14bd8:	bne	14c80 <__assert_fail@plt+0x2000>
   14bdc:	cmp	r0, #0
   14be0:	beq	14bfc <__assert_fail@plt+0x1f7c>
   14be4:	bl	129a4 <__errno_location@plt>
   14be8:	cmp	r6, #0
   14bec:	ldr	r3, [r0]
   14bf0:	bne	14c58 <__assert_fail@plt+0x1fd8>
   14bf4:	cmp	r3, #9
   14bf8:	bne	14c58 <__assert_fail@plt+0x1fd8>
   14bfc:	ldr	r3, [pc, #208]	; 14cd4 <__assert_fail@plt+0x2054>
   14c00:	ldr	r4, [r3]
   14c04:	mov	r0, r4
   14c08:	bl	127e8 <__fpending@plt>
   14c0c:	mov	r6, r0
   14c10:	mov	r0, r4
   14c14:	bl	1262c <ferror@plt>
   14c18:	mov	r5, r0
   14c1c:	mov	r0, r4
   14c20:	bl	12adc <fclose@plt>
   14c24:	cmp	r5, #0
   14c28:	mov	r4, r0
   14c2c:	bne	14cb4 <__assert_fail@plt+0x2034>
   14c30:	cmp	r0, #0
   14c34:	popeq	{r4, r5, r6, pc}
   14c38:	cmp	r6, #0
   14c3c:	bne	14c50 <__assert_fail@plt+0x1fd0>
   14c40:	bl	129a4 <__errno_location@plt>
   14c44:	ldr	r3, [r0]
   14c48:	cmp	r3, #9
   14c4c:	popeq	{r4, r5, r6, pc}
   14c50:	mov	r0, #1
   14c54:	bl	12650 <_exit@plt>
   14c58:	cmp	r3, #32
   14c5c:	beq	14bfc <__assert_fail@plt+0x1f7c>
   14c60:	cmp	r3, #0
   14c64:	beq	14c9c <__assert_fail@plt+0x201c>
   14c68:	mov	r2, #5
   14c6c:	ldr	r1, [pc, #100]	; 14cd8 <__assert_fail@plt+0x2058>
   14c70:	mov	r0, #0
   14c74:	bl	126c8 <dcgettext@plt>
   14c78:	bl	12b48 <warn@plt>
   14c7c:	b	14c50 <__assert_fail@plt+0x1fd0>
   14c80:	bl	129a4 <__errno_location@plt>
   14c84:	cmp	r4, #0
   14c88:	ldr	r3, [r0]
   14c8c:	bne	14c58 <__assert_fail@plt+0x1fd8>
   14c90:	cmp	r3, #32
   14c94:	strne	r4, [r0]
   14c98:	beq	14bfc <__assert_fail@plt+0x1f7c>
   14c9c:	mov	r2, #5
   14ca0:	ldr	r1, [pc, #48]	; 14cd8 <__assert_fail@plt+0x2058>
   14ca4:	mov	r0, #0
   14ca8:	bl	126c8 <dcgettext@plt>
   14cac:	bl	1295c <warnx@plt>
   14cb0:	b	14c50 <__assert_fail@plt+0x1fd0>
   14cb4:	cmp	r0, #0
   14cb8:	bne	14c50 <__assert_fail@plt+0x1fd0>
   14cbc:	bl	129a4 <__errno_location@plt>
   14cc0:	ldr	r3, [r0]
   14cc4:	cmp	r3, #32
   14cc8:	strne	r4, [r0]
   14ccc:	b	14c50 <__assert_fail@plt+0x1fd0>
   14cd0:	andeq	r4, r3, r4, lsr #32
   14cd4:	andeq	r4, r3, r0, lsr #32
   14cd8:	andeq	r1, r2, ip, lsl #12
   14cdc:	push	{r4, r5, r6, lr}
   14ce0:	sub	sp, sp, #8
   14ce4:	ldr	r5, [pc, #164]	; 14d90 <__assert_fail@plt+0x2110>
   14ce8:	subs	r6, r0, #0
   14cec:	ldr	r3, [r5]
   14cf0:	str	r3, [sp, #4]
   14cf4:	beq	14d7c <__assert_fail@plt+0x20fc>
   14cf8:	ldr	r3, [pc, #148]	; 14d94 <__assert_fail@plt+0x2114>
   14cfc:	ldr	r3, [r3, #424]	; 0x1a8
   14d00:	ldrb	r3, [r3, #20]
   14d04:	tst	r3, #32
   14d08:	bne	14d44 <__assert_fail@plt+0x20c4>
   14d0c:	bl	126d4 <strdup@plt>
   14d10:	subs	r4, r0, #0
   14d14:	strne	r4, [sp]
   14d18:	beq	14d88 <__assert_fail@plt+0x2108>
   14d1c:	mov	r6, #47	; 0x2f
   14d20:	b	14d28 <__assert_fail@plt+0x20a8>
   14d24:	strb	r6, [r0]
   14d28:	mov	r1, #33	; 0x21
   14d2c:	mov	r0, r4
   14d30:	bl	12950 <strchr@plt>
   14d34:	cmp	r0, #0
   14d38:	bne	14d24 <__assert_fail@plt+0x20a4>
   14d3c:	ldr	r4, [sp]
   14d40:	b	14d60 <__assert_fail@plt+0x20e0>
   14d44:	mov	r2, r6
   14d48:	ldr	r1, [pc, #72]	; 14d98 <__assert_fail@plt+0x2118>
   14d4c:	mov	r0, sp
   14d50:	bl	14504 <__assert_fail@plt+0x1884>
   14d54:	ldr	r4, [sp]
   14d58:	cmp	r4, #0
   14d5c:	bne	14d1c <__assert_fail@plt+0x209c>
   14d60:	ldr	r2, [sp, #4]
   14d64:	ldr	r3, [r5]
   14d68:	mov	r0, r4
   14d6c:	cmp	r2, r3
   14d70:	bne	14d84 <__assert_fail@plt+0x2104>
   14d74:	add	sp, sp, #8
   14d78:	pop	{r4, r5, r6, pc}
   14d7c:	mov	r4, r6
   14d80:	b	14d60 <__assert_fail@plt+0x20e0>
   14d84:	bl	126e0 <__stack_chk_fail@plt>
   14d88:	mov	r0, r6
   14d8c:	bl	14754 <__assert_fail@plt+0x1ad4>
   14d90:	andeq	r3, r3, r8, lsr #24
   14d94:	andeq	r4, r3, r0, lsr r0
   14d98:	ldrdeq	r1, [r2], -r4
   14d9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14da0:	mov	r9, r1
   14da4:	ldr	r5, [pc, #1420]	; 15338 <__assert_fail@plt+0x26b8>
   14da8:	sub	sp, sp, #12
   14dac:	mov	r4, r0
   14db0:	ldr	r1, [r5]
   14db4:	mov	r8, r2
   14db8:	tst	r1, #16
   14dbc:	mov	r6, r3
   14dc0:	bne	14fd8 <__assert_fail@plt+0x2358>
   14dc4:	subs	r0, r6, #0
   14dc8:	str	r9, [r4]
   14dcc:	beq	14ddc <__assert_fail@plt+0x215c>
   14dd0:	bl	126d4 <strdup@plt>
   14dd4:	cmp	r0, #0
   14dd8:	beq	15330 <__assert_fail@plt+0x26b0>
   14ddc:	adds	r3, r8, #0
   14de0:	movne	r3, #1
   14de4:	str	r0, [r4, #120]	; 0x78
   14de8:	str	r3, [r4, #136]	; 0x88
   14dec:	mov	r0, r4
   14df0:	bl	147ec <__assert_fail@plt+0x1b6c>
   14df4:	ldr	r3, [r5]
   14df8:	cmp	r0, #0
   14dfc:	str	r0, [r4, #128]	; 0x80
   14e00:	beq	151a4 <__assert_fail@plt+0x2524>
   14e04:	tst	r3, #16
   14e08:	bne	15024 <__assert_fail@plt+0x23a4>
   14e0c:	ldr	r3, [r5, #424]	; 0x1a8
   14e10:	cmp	r8, #0
   14e14:	moveq	r2, r8
   14e18:	ldr	r0, [r3, #12]
   14e1c:	ldrne	r2, [r8, #120]	; 0x78
   14e20:	ldr	r1, [r4, #120]	; 0x78
   14e24:	bl	1f1fc <__assert_fail@plt+0xc57c>
   14e28:	mov	r6, r0
   14e2c:	mov	r7, r1
   14e30:	orrs	r3, r6, r7
   14e34:	beq	15140 <__assert_fail@plt+0x24c0>
   14e38:	ldr	r3, [r5, #424]	; 0x1a8
   14e3c:	ldrb	r2, [r3, #20]
   14e40:	tst	r2, #4
   14e44:	bne	14f9c <__assert_fail@plt+0x231c>
   14e48:	cmp	r9, #0
   14e4c:	moveq	r2, r9
   14e50:	ldrne	r2, [r9, #132]	; 0x84
   14e54:	ldr	r3, [r3, #12]
   14e58:	bl	1e060 <__assert_fail@plt+0xb3e0>
   14e5c:	cmp	r0, #0
   14e60:	str	r0, [r4, #132]	; 0x84
   14e64:	beq	151f4 <__assert_fail@plt+0x2574>
   14e68:	lsr	r3, r6, #12
   14e6c:	uxtb	r1, r6
   14e70:	orr	r3, r3, r7, lsl #20
   14e74:	bic	r2, r7, #4080	; 0xff0
   14e78:	lsl	r6, r6, #12
   14e7c:	add	r7, r4, #272	; 0x110
   14e80:	bic	r2, r2, #15
   14e84:	bic	r3, r3, #255	; 0xff
   14e88:	mov	r8, #0
   14e8c:	mov	r9, #0
   14e90:	orr	r3, r3, r1
   14e94:	orr	r6, r2, r6, lsr #20
   14e98:	str	r3, [r4, #256]	; 0x100
   14e9c:	ldr	r2, [pc, #1176]	; 1533c <__assert_fail@plt+0x26bc>
   14ea0:	str	r6, [r4, #252]	; 0xfc
   14ea4:	add	r1, r4, #264	; 0x108
   14ea8:	strd	r8, [r7, #-8]
   14eac:	bl	1cb8c <__assert_fail@plt+0x9f0c>
   14eb0:	add	r1, r4, #260	; 0x104
   14eb4:	cmp	r0, #0
   14eb8:	ldr	r0, [r4, #132]	; 0x84
   14ebc:	ldrdeq	r2, [r7, #-8]
   14ec0:	lsleq	r3, r3, #9
   14ec4:	orreq	r3, r3, r2, lsr #23
   14ec8:	lsleq	r2, r2, #9
   14ecc:	strdeq	r2, [r7, #-8]
   14ed0:	ldr	r2, [pc, #1128]	; 15340 <__assert_fail@plt+0x26c0>
   14ed4:	bl	1cca4 <__assert_fail@plt+0xa024>
   14ed8:	cmp	r0, #0
   14edc:	movne	r3, #0
   14ee0:	strne	r3, [r4, #260]	; 0x104
   14ee4:	ldr	r3, [r5, #424]	; 0x1a8
   14ee8:	ldrb	r3, [r3, #20]
   14eec:	tst	r3, #1
   14ef0:	bne	14f00 <__assert_fail@plt+0x2280>
   14ef4:	ldrd	r2, [r7, #-8]
   14ef8:	orrs	r3, r2, r3
   14efc:	beq	15154 <__assert_fail@plt+0x24d4>
   14f00:	ldr	r6, [r4, #120]	; 0x78
   14f04:	mov	r2, #3
   14f08:	mov	r0, r6
   14f0c:	ldr	r1, [pc, #1072]	; 15344 <__assert_fail@plt+0x26c4>
   14f10:	bl	12c14 <strncmp@plt>
   14f14:	ldr	r3, [r4, #132]	; 0x84
   14f18:	cmp	r0, #0
   14f1c:	bne	14f44 <__assert_fail@plt+0x22c4>
   14f20:	mov	r0, r3
   14f24:	ldr	r2, [pc, #1052]	; 15348 <__assert_fail@plt+0x26c8>
   14f28:	add	r1, r4, #124	; 0x7c
   14f2c:	bl	1c690 <__assert_fail@plt+0x9a10>
   14f30:	ldr	r3, [r4, #124]	; 0x7c
   14f34:	cmp	r3, #0
   14f38:	beq	152dc <__assert_fail@plt+0x265c>
   14f3c:	ldr	r3, [r4, #132]	; 0x84
   14f40:	ldr	r6, [r4, #120]	; 0x78
   14f44:	mov	r0, r3
   14f48:	mov	r1, r6
   14f4c:	bl	1e3d8 <__assert_fail@plt+0xb758>
   14f50:	ldr	r1, [pc, #1012]	; 1534c <__assert_fail@plt+0x26cc>
   14f54:	str	r0, [r4, #240]	; 0xf0
   14f58:	ldr	r0, [r4, #132]	; 0x84
   14f5c:	bl	1d520 <__assert_fail@plt+0xa8a0>
   14f60:	ldr	r1, [pc, #1000]	; 15350 <__assert_fail@plt+0x26d0>
   14f64:	str	r0, [r4, #244]	; 0xf4
   14f68:	ldr	r0, [r4, #132]	; 0x84
   14f6c:	bl	1d520 <__assert_fail@plt+0xa8a0>
   14f70:	ldr	r3, [r5]
   14f74:	tst	r3, #16
   14f78:	str	r0, [r4, #248]	; 0xf8
   14f7c:	bne	1506c <__assert_fail@plt+0x23ec>
   14f80:	ldr	r3, [r5, #424]	; 0x1a8
   14f84:	ldrb	r3, [r3, #20]
   14f88:	tst	r3, #16
   14f8c:	bne	150d0 <__assert_fail@plt+0x2450>
   14f90:	mov	r0, #0
   14f94:	add	sp, sp, #12
   14f98:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f9c:	cmp	r8, #0
   14fa0:	moveq	r2, r8
   14fa4:	ldrne	r2, [r8, #132]	; 0x84
   14fa8:	ldr	r3, [r3, #12]
   14fac:	bl	1e060 <__assert_fail@plt+0xb3e0>
   14fb0:	cmp	r0, #0
   14fb4:	str	r0, [r4, #132]	; 0x84
   14fb8:	beq	151f4 <__assert_fail@plt+0x2574>
   14fbc:	cmp	r9, #0
   14fc0:	beq	14e68 <__assert_fail@plt+0x21e8>
   14fc4:	mov	r1, r0
   14fc8:	ldr	r0, [r9, #132]	; 0x84
   14fcc:	bl	1dd20 <__assert_fail@plt+0xb0a0>
   14fd0:	ldr	r0, [r4, #132]	; 0x84
   14fd4:	b	14e68 <__assert_fail@plt+0x21e8>
   14fd8:	ldr	r3, [pc, #884]	; 15354 <__assert_fail@plt+0x26d4>
   14fdc:	ldr	r7, [r3]
   14fe0:	bl	128fc <getpid@plt>
   14fe4:	ldr	r2, [pc, #876]	; 15358 <__assert_fail@plt+0x26d8>
   14fe8:	ldr	r3, [pc, #876]	; 1535c <__assert_fail@plt+0x26dc>
   14fec:	str	r2, [sp, #4]
   14ff0:	str	r3, [sp]
   14ff4:	ldr	r2, [pc, #868]	; 15360 <__assert_fail@plt+0x26e0>
   14ff8:	mov	r1, #1
   14ffc:	mov	r3, r0
   15000:	mov	r0, r7
   15004:	bl	12ab8 <__fprintf_chk@plt>
   15008:	str	r8, [sp]
   1500c:	mov	r3, r9
   15010:	mov	r2, r6
   15014:	ldr	r1, [pc, #840]	; 15364 <__assert_fail@plt+0x26e4>
   15018:	mov	r0, r4
   1501c:	bl	143f0 <__assert_fail@plt+0x1770>
   15020:	b	14dc4 <__assert_fail@plt+0x2144>
   15024:	ldr	r3, [pc, #808]	; 15354 <__assert_fail@plt+0x26d4>
   15028:	ldr	r6, [r3]
   1502c:	bl	128fc <getpid@plt>
   15030:	ldr	r2, [pc, #800]	; 15358 <__assert_fail@plt+0x26d8>
   15034:	ldr	r3, [pc, #800]	; 1535c <__assert_fail@plt+0x26dc>
   15038:	str	r2, [sp, #4]
   1503c:	str	r3, [sp]
   15040:	ldr	r2, [pc, #792]	; 15360 <__assert_fail@plt+0x26e0>
   15044:	mov	r1, #1
   15048:	mov	r3, r0
   1504c:	mov	r0, r6
   15050:	bl	12ab8 <__fprintf_chk@plt>
   15054:	ldr	r3, [r4, #128]	; 0x80
   15058:	ldr	r2, [r4, #120]	; 0x78
   1505c:	ldr	r1, [pc, #772]	; 15368 <__assert_fail@plt+0x26e8>
   15060:	mov	r0, r4
   15064:	bl	143f0 <__assert_fail@plt+0x1770>
   15068:	b	14e0c <__assert_fail@plt+0x218c>
   1506c:	ldr	r3, [pc, #736]	; 15354 <__assert_fail@plt+0x26d4>
   15070:	ldr	r6, [r3]
   15074:	bl	128fc <getpid@plt>
   15078:	ldr	r2, [pc, #728]	; 15358 <__assert_fail@plt+0x26d8>
   1507c:	ldr	r3, [pc, #728]	; 1535c <__assert_fail@plt+0x26dc>
   15080:	str	r2, [sp, #4]
   15084:	str	r3, [sp]
   15088:	ldr	r2, [pc, #720]	; 15360 <__assert_fail@plt+0x26e0>
   1508c:	mov	r1, #1
   15090:	mov	r3, r0
   15094:	mov	r0, r6
   15098:	bl	12ab8 <__fprintf_chk@plt>
   1509c:	ldr	r2, [r4, #248]	; 0xf8
   150a0:	ldr	r3, [r4, #244]	; 0xf4
   150a4:	ldr	r1, [pc, #704]	; 1536c <__assert_fail@plt+0x26ec>
   150a8:	str	r2, [sp, #4]
   150ac:	str	r3, [sp]
   150b0:	mov	r0, r4
   150b4:	ldr	r3, [r4, #240]	; 0xf0
   150b8:	ldr	r2, [r4, #120]	; 0x78
   150bc:	bl	143f0 <__assert_fail@plt+0x1770>
   150c0:	ldr	r3, [r5, #424]	; 0x1a8
   150c4:	ldrb	r3, [r3, #20]
   150c8:	tst	r3, #16
   150cc:	beq	150f0 <__assert_fail@plt+0x2470>
   150d0:	mov	r3, #0
   150d4:	str	r3, [sp]
   150d8:	mov	r2, r3
   150dc:	mov	r1, r3
   150e0:	ldr	r0, [r4, #132]	; 0x84
   150e4:	bl	1eafc <__assert_fail@plt+0xbe7c>
   150e8:	cmp	r0, #0
   150ec:	bne	15290 <__assert_fail@plt+0x2610>
   150f0:	ldr	r3, [r5]
   150f4:	tst	r3, #16
   150f8:	beq	14f90 <__assert_fail@plt+0x2310>
   150fc:	ldr	r3, [pc, #592]	; 15354 <__assert_fail@plt+0x26d4>
   15100:	ldr	r5, [r3]
   15104:	bl	128fc <getpid@plt>
   15108:	ldr	r2, [pc, #584]	; 15358 <__assert_fail@plt+0x26d8>
   1510c:	ldr	r3, [pc, #584]	; 1535c <__assert_fail@plt+0x26dc>
   15110:	str	r2, [sp, #4]
   15114:	str	r3, [sp]
   15118:	ldr	r2, [pc, #576]	; 15360 <__assert_fail@plt+0x26e0>
   1511c:	mov	r1, #1
   15120:	mov	r3, r0
   15124:	mov	r0, r5
   15128:	bl	12ab8 <__fprintf_chk@plt>
   1512c:	ldr	r2, [r4, #120]	; 0x78
   15130:	mov	r0, r4
   15134:	ldr	r1, [pc, #564]	; 15370 <__assert_fail@plt+0x26f0>
   15138:	bl	143f0 <__assert_fail@plt+0x1770>
   1513c:	b	14f90 <__assert_fail@plt+0x2310>
   15140:	ldr	r3, [r5]
   15144:	tst	r3, #16
   15148:	bne	15248 <__assert_fail@plt+0x25c8>
   1514c:	mvn	r0, #0
   15150:	b	14f94 <__assert_fail@plt+0x2314>
   15154:	ldr	r3, [r5]
   15158:	tst	r3, #16
   1515c:	beq	1514c <__assert_fail@plt+0x24cc>
   15160:	ldr	r3, [pc, #492]	; 15354 <__assert_fail@plt+0x26d4>
   15164:	ldr	r5, [r3]
   15168:	bl	128fc <getpid@plt>
   1516c:	ldr	r2, [pc, #484]	; 15358 <__assert_fail@plt+0x26d8>
   15170:	ldr	r3, [pc, #484]	; 1535c <__assert_fail@plt+0x26dc>
   15174:	str	r2, [sp, #4]
   15178:	str	r3, [sp]
   1517c:	ldr	r2, [pc, #476]	; 15360 <__assert_fail@plt+0x26e0>
   15180:	mov	r1, #1
   15184:	mov	r3, r0
   15188:	mov	r0, r5
   1518c:	bl	12ab8 <__fprintf_chk@plt>
   15190:	mov	r0, r4
   15194:	ldr	r1, [pc, #472]	; 15374 <__assert_fail@plt+0x26f4>
   15198:	bl	143f0 <__assert_fail@plt+0x1770>
   1519c:	mvn	r0, #0
   151a0:	b	14f94 <__assert_fail@plt+0x2314>
   151a4:	tst	r3, #16
   151a8:	beq	1514c <__assert_fail@plt+0x24cc>
   151ac:	ldr	r3, [pc, #416]	; 15354 <__assert_fail@plt+0x26d4>
   151b0:	ldr	r5, [r3]
   151b4:	bl	128fc <getpid@plt>
   151b8:	ldr	r2, [pc, #408]	; 15358 <__assert_fail@plt+0x26d8>
   151bc:	ldr	r3, [pc, #408]	; 1535c <__assert_fail@plt+0x26dc>
   151c0:	str	r2, [sp, #4]
   151c4:	str	r3, [sp]
   151c8:	ldr	r2, [pc, #400]	; 15360 <__assert_fail@plt+0x26e0>
   151cc:	mov	r1, #1
   151d0:	mov	r3, r0
   151d4:	mov	r0, r5
   151d8:	bl	12ab8 <__fprintf_chk@plt>
   151dc:	mov	r0, r4
   151e0:	ldr	r2, [r4, #120]	; 0x78
   151e4:	ldr	r1, [pc, #396]	; 15378 <__assert_fail@plt+0x26f8>
   151e8:	bl	143f0 <__assert_fail@plt+0x1770>
   151ec:	mvn	r0, #0
   151f0:	b	14f94 <__assert_fail@plt+0x2314>
   151f4:	ldr	r3, [r5]
   151f8:	tst	r3, #16
   151fc:	beq	1514c <__assert_fail@plt+0x24cc>
   15200:	ldr	r3, [pc, #332]	; 15354 <__assert_fail@plt+0x26d4>
   15204:	ldr	r5, [r3]
   15208:	bl	128fc <getpid@plt>
   1520c:	ldr	r2, [pc, #324]	; 15358 <__assert_fail@plt+0x26d8>
   15210:	ldr	r3, [pc, #324]	; 1535c <__assert_fail@plt+0x26dc>
   15214:	str	r2, [sp, #4]
   15218:	str	r3, [sp]
   1521c:	ldr	r2, [pc, #316]	; 15360 <__assert_fail@plt+0x26e0>
   15220:	mov	r1, #1
   15224:	mov	r3, r0
   15228:	mov	r0, r5
   1522c:	bl	12ab8 <__fprintf_chk@plt>
   15230:	mov	r0, r4
   15234:	ldr	r2, [r4, #120]	; 0x78
   15238:	ldr	r1, [pc, #316]	; 1537c <__assert_fail@plt+0x26fc>
   1523c:	bl	143f0 <__assert_fail@plt+0x1770>
   15240:	mvn	r0, #0
   15244:	b	14f94 <__assert_fail@plt+0x2314>
   15248:	ldr	r3, [pc, #260]	; 15354 <__assert_fail@plt+0x26d4>
   1524c:	ldr	r5, [r3]
   15250:	bl	128fc <getpid@plt>
   15254:	ldr	r2, [pc, #252]	; 15358 <__assert_fail@plt+0x26d8>
   15258:	ldr	r3, [pc, #252]	; 1535c <__assert_fail@plt+0x26dc>
   1525c:	str	r2, [sp, #4]
   15260:	str	r3, [sp]
   15264:	ldr	r2, [pc, #244]	; 15360 <__assert_fail@plt+0x26e0>
   15268:	mov	r1, #1
   1526c:	mov	r3, r0
   15270:	mov	r0, r5
   15274:	bl	12ab8 <__fprintf_chk@plt>
   15278:	mov	r0, r4
   1527c:	ldr	r2, [r4, #120]	; 0x78
   15280:	ldr	r1, [pc, #248]	; 15380 <__assert_fail@plt+0x2700>
   15284:	bl	143f0 <__assert_fail@plt+0x1770>
   15288:	mvn	r0, #0
   1528c:	b	14f94 <__assert_fail@plt+0x2314>
   15290:	ldr	r3, [r5]
   15294:	tst	r3, #16
   15298:	beq	1514c <__assert_fail@plt+0x24cc>
   1529c:	ldr	r3, [pc, #176]	; 15354 <__assert_fail@plt+0x26d4>
   152a0:	ldr	r5, [r3]
   152a4:	bl	128fc <getpid@plt>
   152a8:	ldr	r2, [pc, #168]	; 15358 <__assert_fail@plt+0x26d8>
   152ac:	ldr	r3, [pc, #168]	; 1535c <__assert_fail@plt+0x26dc>
   152b0:	str	r2, [sp, #4]
   152b4:	str	r3, [sp]
   152b8:	ldr	r2, [pc, #160]	; 15360 <__assert_fail@plt+0x26e0>
   152bc:	mov	r1, #1
   152c0:	mov	r3, r0
   152c4:	mov	r0, r5
   152c8:	bl	12ab8 <__fprintf_chk@plt>
   152cc:	mov	r0, r4
   152d0:	ldr	r1, [pc, #172]	; 15384 <__assert_fail@plt+0x2704>
   152d4:	bl	143f0 <__assert_fail@plt+0x1770>
   152d8:	b	1514c <__assert_fail@plt+0x24cc>
   152dc:	ldr	r3, [r5]
   152e0:	tst	r3, #16
   152e4:	beq	1514c <__assert_fail@plt+0x24cc>
   152e8:	ldr	r3, [pc, #100]	; 15354 <__assert_fail@plt+0x26d4>
   152ec:	ldr	r5, [r3]
   152f0:	bl	128fc <getpid@plt>
   152f4:	ldr	r2, [pc, #92]	; 15358 <__assert_fail@plt+0x26d8>
   152f8:	ldr	r3, [pc, #92]	; 1535c <__assert_fail@plt+0x26dc>
   152fc:	str	r2, [sp, #4]
   15300:	str	r3, [sp]
   15304:	ldr	r2, [pc, #84]	; 15360 <__assert_fail@plt+0x26e0>
   15308:	mov	r1, #1
   1530c:	mov	r3, r0
   15310:	mov	r0, r5
   15314:	bl	12ab8 <__fprintf_chk@plt>
   15318:	mov	r0, r4
   1531c:	ldr	r2, [r4, #120]	; 0x78
   15320:	ldr	r1, [pc, #96]	; 15388 <__assert_fail@plt+0x2708>
   15324:	bl	143f0 <__assert_fail@plt+0x1770>
   15328:	mvn	r0, #0
   1532c:	b	14f94 <__assert_fail@plt+0x2314>
   15330:	mov	r0, r6
   15334:	bl	14754 <__assert_fail@plt+0x1ad4>
   15338:	andeq	r4, r3, r0, lsr r0
   1533c:	andeq	r2, r2, r8, ror r9
   15340:			; <UNDEFINED> instruction: 0x000216bc
   15344:	ldrdeq	r1, [r2], -r0
   15348:	muleq	r2, r0, lr
   1534c:	andeq	r1, r2, r0, lsl r7
   15350:	andeq	r1, r2, r8, lsl r7
   15354:	andeq	r4, r3, r0, lsr #32
   15358:	andeq	r1, r2, r4, ror #9
   1535c:	andeq	r1, r2, r8, ror #9
   15360:	ldrdeq	r1, [r2], -r4
   15364:	andeq	r1, r2, r8, lsl r6
   15368:	andeq	r1, r2, ip, ror #12
   1536c:	andeq	r1, r2, r0, lsr #14
   15370:	andeq	r1, r2, r8, ror #14
   15374:	ldrdeq	r1, [r2], -r8
   15378:	andeq	r1, r2, ip, asr #12
   1537c:	muleq	r2, r4, r6
   15380:	andeq	r1, r2, ip, ror r6
   15384:	andeq	r1, r2, ip, asr #14
   15388:	strdeq	r1, [r2], -r4
   1538c:	push	{r4, r5, r6, lr}
   15390:	sub	sp, sp, #4096	; 0x1000
   15394:	ldr	r4, [pc, #180]	; 15450 <__assert_fail@plt+0x27d0>
   15398:	sub	sp, sp, #8
   1539c:	mov	r6, r2
   153a0:	add	r2, sp, #4096	; 0x1000
   153a4:	ldr	r3, [r4]
   153a8:	add	r2, r2, #4
   153ac:	mov	r5, r1
   153b0:	str	r3, [r2]
   153b4:	bl	12bb4 <dirfd@plt>
   153b8:	add	r1, r5, #19
   153bc:	add	r2, sp, #4
   153c0:	ldr	r3, [pc, #140]	; 15454 <__assert_fail@plt+0x27d4>
   153c4:	bl	1286c <readlinkat@plt>
   153c8:	cmp	r0, #0
   153cc:	blt	15424 <__assert_fail@plt+0x27a4>
   153d0:	add	r3, sp, #8
   153d4:	add	r3, r3, r0
   153d8:	mov	r5, #0
   153dc:	mov	r1, #47	; 0x2f
   153e0:	add	r0, sp, #4
   153e4:	strb	r5, [r3, #-4]
   153e8:	bl	12b3c <strrchr@plt>
   153ec:	cmp	r0, #0
   153f0:	beq	15424 <__assert_fail@plt+0x27a4>
   153f4:	strb	r5, [r0]
   153f8:	mov	r1, #47	; 0x2f
   153fc:	add	r0, sp, #4
   15400:	bl	12b3c <strrchr@plt>
   15404:	cmp	r0, #0
   15408:	beq	15424 <__assert_fail@plt+0x27a4>
   1540c:	add	r3, r0, #1
   15410:	mov	r2, r5
   15414:	mov	r0, r6
   15418:	mov	r1, r5
   1541c:	bl	14d9c <__assert_fail@plt+0x211c>
   15420:	b	15428 <__assert_fail@plt+0x27a8>
   15424:	mov	r0, #0
   15428:	add	r3, sp, #4096	; 0x1000
   1542c:	add	r3, r3, #4
   15430:	ldr	r2, [r3]
   15434:	ldr	r3, [r4]
   15438:	cmp	r2, r3
   1543c:	bne	1544c <__assert_fail@plt+0x27cc>
   15440:	add	sp, sp, #4096	; 0x1000
   15444:	add	sp, sp, #8
   15448:	pop	{r4, r5, r6, pc}
   1544c:	bl	126e0 <__stack_chk_fail@plt>
   15450:	andeq	r3, r3, r8, lsr #24
   15454:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1545c:	vpush	{d8-d9}
   15460:	ldr	r5, [pc, #976]	; 15838 <__assert_fail@plt+0x2bb8>
   15464:	ldr	r9, [pc, #976]	; 1583c <__assert_fail@plt+0x2bbc>
   15468:	mov	r6, r0
   1546c:	ldr	r2, [r5, #424]	; 0x1a8
   15470:	sub	sp, sp, #172	; 0xac
   15474:	ldr	r3, [r9]
   15478:	ldr	r0, [r2]
   1547c:	str	r3, [sp, #164]	; 0xa4
   15480:	bl	12878 <scols_table_new_line@plt>
   15484:	cmp	r0, #0
   15488:	str	r0, [r6, #8]
   1548c:	beq	16568 <__assert_fail@plt+0x38e8>
   15490:	ldr	r3, [r5, #4]
   15494:	cmp	r3, #0
   15498:	beq	155bc <__assert_fail@plt+0x293c>
   1549c:	vldr	d8, [pc, #908]	; 15830 <__assert_fail@plt+0x2bb0>
   154a0:	mov	r7, r0
   154a4:	mov	r4, #0
   154a8:	mov	r0, r4
   154ac:	bl	146c8 <__assert_fail@plt+0x1a48>
   154b0:	ldr	r3, [r5, #424]	; 0x1a8
   154b4:	mov	r2, #0
   154b8:	str	r2, [sp, #8]
   154bc:	ldr	fp, [r3, #8]
   154c0:	mov	r8, r0
   154c4:	cmp	r0, #51	; 0x33
   154c8:	ldrls	pc, [pc, r0, lsl #2]
   154cc:	b	155a8 <__assert_fail@plt+0x2928>
   154d0:	andeq	r5, r1, r8, ror #31
   154d4:	strdeq	r5, [r1], -ip
   154d8:	andeq	r6, r1, r8, ror r0
   154dc:	andeq	r5, r1, r4, lsl pc
   154e0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   154e4:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   154e8:	andeq	r5, r1, r8, asr #31
   154ec:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   154f0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   154f4:	muleq	r1, ip, sp
   154f8:	andeq	r5, r1, ip, asr sp
   154fc:	andeq	r5, r1, ip, ror sp
   15500:	ldrdeq	r5, [r1], -ip
   15504:	strdeq	r5, [r1], -ip
   15508:	andeq	r5, r1, ip, lsl sp
   1550c:	andeq	r5, r1, ip, lsr sp
   15510:	strdeq	r5, [r1], -r4
   15514:	andeq	r5, r1, r8, lsl fp
   15518:	andeq	r5, r1, r8, lsr fp
   1551c:	andeq	r5, r1, r4, asr fp
   15520:	ldrdeq	r5, [r1], -r4
   15524:	andeq	r5, r1, ip, lsl ip
   15528:	andeq	r5, r1, r4, asr #24
   1552c:	muleq	r1, r0, ip
   15530:	andeq	r5, r1, r8, asr #12
   15534:	andeq	r5, r1, r4, lsl #21
   15538:	ldrdeq	r5, [r1], -r8
   1553c:	ldrdeq	r5, [r1], -r8
   15540:			; <UNDEFINED> instruction: 0x000156b0
   15544:	strdeq	r5, [r1], -r4
   15548:	andeq	r5, r1, r4, lsr #14
   1554c:	andeq	r5, r1, r0, asr #14
   15550:	andeq	r5, r1, ip, asr r7
   15554:	andeq	r5, r1, r8, ror r7
   15558:	muleq	r1, r4, r7
   1555c:	andeq	r5, r1, ip, lsr #15
   15560:	andeq	r5, r1, r0, lsl r8
   15564:	andeq	r5, r1, ip, asr #18
   15568:	strdeq	r5, [r1], -r4
   1556c:	andeq	r5, r1, r4, lsr sl
   15570:	andeq	r5, r1, ip, asr sl
   15574:	strdeq	r5, [r1], -r0
   15578:	muleq	r1, ip, lr
   1557c:	ldrdeq	r5, [r1], -r0
   15580:			; <UNDEFINED> instruction: 0x00015db0
   15584:	andeq	r5, r1, r8, asr #27
   15588:	andeq	r5, r1, r8, ror #27
   1558c:	andeq	r5, r1, r0, lsr lr
   15590:	andeq	r5, r1, r4, ror #21
   15594:	andeq	r6, r1, r8, asr #32
   15598:	andeq	r6, r1, r8, lsl r0
   1559c:	muleq	r1, r8, r6
   155a0:	mov	r0, sl
   155a4:	bl	125d8 <free@plt>
   155a8:	ldr	r3, [r5, #4]
   155ac:	add	r4, r4, #1
   155b0:	cmp	r3, r4
   155b4:	ldrhi	r7, [r6, #8]
   155b8:	bhi	154a8 <__assert_fail@plt+0x2828>
   155bc:	ldr	r2, [sp, #164]	; 0xa4
   155c0:	ldr	r3, [r9]
   155c4:	cmp	r2, r3
   155c8:	bne	16580 <__assert_fail@plt+0x3900>
   155cc:	add	sp, sp, #172	; 0xac
   155d0:	vpop	{d8-d9}
   155d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155d8:	ldrd	r2, [r6, #48]	; 0x30
   155dc:	orrs	r3, r2, r3
   155e0:	bne	155a8 <__assert_fail@plt+0x2928>
   155e4:	add	r2, r6, #16
   155e8:	ldr	r1, [r6, #128]	; 0x80
   155ec:	mov	r0, #3
   155f0:	bl	12bfc <__xstat64@plt>
   155f4:	ldr	sl, [sp, #8]
   155f8:	b	1560c <__assert_fail@plt+0x298c>
   155fc:	ldr	r0, [r6, #120]	; 0x78
   15600:	bl	14cdc <__assert_fail@plt+0x205c>
   15604:	mov	sl, r0
   15608:	str	sl, [sp, #8]
   1560c:	cmp	sl, #0
   15610:	beq	155a8 <__assert_fail@plt+0x2928>
   15614:	mov	r2, sl
   15618:	mov	r0, r7
   1561c:	mov	r1, r4
   15620:	bl	12518 <scols_line_refer_data@plt>
   15624:	cmp	r0, #0
   15628:	beq	155a8 <__assert_fail@plt+0x2928>
   1562c:	ldr	r1, [pc, #524]	; 15840 <__assert_fail@plt+0x2bc0>
   15630:	mov	r2, #5
   15634:	mov	r0, #0
   15638:	bl	126c8 <dcgettext@plt>
   1563c:	mov	r1, r0
   15640:	mov	r0, #1
   15644:	bl	12728 <err@plt>
   15648:	add	r8, r6, #272	; 0x110
   1564c:	ldrd	r0, [r8, #-8]
   15650:	orrs	r2, r0, r1
   15654:	beq	155a8 <__assert_fail@plt+0x2928>
   15658:	ldrb	r3, [r3, #20]
   1565c:	mov	r2, r0
   15660:	ands	ip, r3, #2
   15664:	mov	r3, r1
   15668:	bne	161f0 <__assert_fail@plt+0x3570>
   1566c:	mov	r0, ip
   15670:	bl	1a1f8 <__assert_fail@plt+0x7578>
   15674:	str	r0, [sp, #8]
   15678:	cmp	fp, #24
   1567c:	bne	156a8 <__assert_fail@plt+0x2a28>
   15680:	ldrd	r2, [r8, #-8]
   15684:	mov	r1, r4
   15688:	mov	r0, r7
   1568c:	bl	14ae4 <__assert_fail@plt+0x1e64>
   15690:	ldr	sl, [sp, #8]
   15694:	b	1560c <__assert_fail@plt+0x298c>
   15698:	ldr	r2, [pc, #420]	; 15844 <__assert_fail@plt+0x2bc4>
   1569c:	add	r1, sp, #8
   156a0:	ldr	r0, [r6, #132]	; 0x84
   156a4:	bl	1c690 <__assert_fail@plt+0x9a10>
   156a8:	ldr	sl, [sp, #8]
   156ac:	b	1560c <__assert_fail@plt+0x298c>
   156b0:	ldrd	r2, [r6, #48]	; 0x30
   156b4:	orrs	r3, r2, r3
   156b8:	beq	16194 <__assert_fail@plt+0x3514>
   156bc:	mov	r3, #0
   156c0:	add	r1, sp, #36	; 0x24
   156c4:	ldr	r0, [r6, #32]
   156c8:	str	r3, [sp, #40]	; 0x28
   156cc:	str	r3, [sp, #36]	; 0x24
   156d0:	str	r3, [sp, #43]	; 0x2b
   156d4:	bl	1a020 <__assert_fail@plt+0x73a0>
   156d8:	subs	r8, r0, #0
   156dc:	beq	155a8 <__assert_fail@plt+0x2928>
   156e0:	bl	126d4 <strdup@plt>
   156e4:	subs	sl, r0, #0
   156e8:	beq	163b8 <__assert_fail@plt+0x3738>
   156ec:	str	sl, [sp, #8]
   156f0:	b	15614 <__assert_fail@plt+0x2994>
   156f4:	ldr	r2, [pc, #332]	; 15848 <__assert_fail@plt+0x2bc8>
   156f8:	add	r1, sp, #8
   156fc:	ldr	r0, [r6, #132]	; 0x84
   15700:	bl	1c690 <__assert_fail@plt+0x9a10>
   15704:	cmp	fp, #29
   15708:	bne	156a8 <__assert_fail@plt+0x2a28>
   1570c:	ldr	r2, [sp, #8]
   15710:	mov	r1, r4
   15714:	mov	r0, r7
   15718:	bl	14b30 <__assert_fail@plt+0x1eb0>
   1571c:	ldr	sl, [sp, #8]
   15720:	b	1560c <__assert_fail@plt+0x298c>
   15724:	ldr	r2, [pc, #288]	; 1584c <__assert_fail@plt+0x2bcc>
   15728:	add	r1, sp, #8
   1572c:	ldr	r0, [r6, #132]	; 0x84
   15730:	bl	1c690 <__assert_fail@plt+0x9a10>
   15734:	cmp	fp, #30
   15738:	bne	156a8 <__assert_fail@plt+0x2a28>
   1573c:	b	1570c <__assert_fail@plt+0x2a8c>
   15740:	ldr	r2, [pc, #264]	; 15850 <__assert_fail@plt+0x2bd0>
   15744:	add	r1, sp, #8
   15748:	ldr	r0, [r6, #132]	; 0x84
   1574c:	bl	1c690 <__assert_fail@plt+0x9a10>
   15750:	cmp	fp, #31
   15754:	bne	156a8 <__assert_fail@plt+0x2a28>
   15758:	b	1570c <__assert_fail@plt+0x2a8c>
   1575c:	ldr	r2, [pc, #240]	; 15854 <__assert_fail@plt+0x2bd4>
   15760:	add	r1, sp, #8
   15764:	ldr	r0, [r6, #132]	; 0x84
   15768:	bl	1c690 <__assert_fail@plt+0x9a10>
   1576c:	cmp	fp, #32
   15770:	bne	156a8 <__assert_fail@plt+0x2a28>
   15774:	b	1570c <__assert_fail@plt+0x2a8c>
   15778:	ldr	r2, [pc, #216]	; 15858 <__assert_fail@plt+0x2bd8>
   1577c:	add	r1, sp, #8
   15780:	ldr	r0, [r6, #132]	; 0x84
   15784:	bl	1c690 <__assert_fail@plt+0x9a10>
   15788:	cmp	fp, #33	; 0x21
   1578c:	bne	156a8 <__assert_fail@plt+0x2a28>
   15790:	b	1570c <__assert_fail@plt+0x2a8c>
   15794:	ldr	r2, [pc, #192]	; 1585c <__assert_fail@plt+0x2bdc>
   15798:	add	r1, sp, #8
   1579c:	ldr	r0, [r6, #132]	; 0x84
   157a0:	bl	1c690 <__assert_fail@plt+0x9a10>
   157a4:	ldr	sl, [sp, #8]
   157a8:	b	1560c <__assert_fail@plt+0x298c>
   157ac:	add	r1, sp, #36	; 0x24
   157b0:	ldr	r3, [pc, #168]	; 15860 <__assert_fail@plt+0x2be0>
   157b4:	mov	r2, #128	; 0x80
   157b8:	ldr	r0, [r6, #132]	; 0x84
   157bc:	bl	1c7dc <__assert_fail@plt+0x9b5c>
   157c0:	cmp	r0, #0
   157c4:	beq	155a8 <__assert_fail@plt+0x2928>
   157c8:	add	r0, sp, #36	; 0x24
   157cc:	mov	r1, #91	; 0x5b
   157d0:	bl	12950 <strchr@plt>
   157d4:	cmp	r0, #0
   157d8:	beq	155a8 <__assert_fail@plt+0x2928>
   157dc:	add	r8, r0, #1
   157e0:	mov	r0, r8
   157e4:	mov	r1, #93	; 0x5d
   157e8:	bl	12950 <strchr@plt>
   157ec:	cmp	r0, #0
   157f0:	beq	155a8 <__assert_fail@plt+0x2928>
   157f4:	mov	r3, #0
   157f8:	strb	r3, [r0]
   157fc:	mov	r0, r8
   15800:	bl	126d4 <strdup@plt>
   15804:	subs	sl, r0, #0
   15808:	bne	156ec <__assert_fail@plt+0x2a6c>
   1580c:	b	163b8 <__assert_fail@plt+0x3738>
   15810:	ldr	r2, [pc, #76]	; 15864 <__assert_fail@plt+0x2be4>
   15814:	add	r1, sp, #8
   15818:	ldr	r0, [r6, #132]	; 0x84
   1581c:	bl	1c690 <__assert_fail@plt+0x9a10>
   15820:	cmp	fp, #36	; 0x24
   15824:	bne	156a8 <__assert_fail@plt+0x2a28>
   15828:	b	1570c <__assert_fail@plt+0x2a8c>
   1582c:	nop			; (mov r0, r0)
   15830:	andeq	r0, r0, r0
   15834:	subsmi	r0, r9, r0
   15838:	andeq	r4, r3, r0, lsr r0
   1583c:	andeq	r3, r3, r8, lsr #24
   15840:	andeq	r1, r2, ip, ror sl
   15844:	andeq	r1, r2, r0, ror sl
   15848:	ldrdeq	r1, [r2], -ip
   1584c:	strdeq	r1, [r2], -r0
   15850:	andeq	r1, r2, r8, lsl #18
   15854:	andeq	r1, r2, r0, lsr #18
   15858:	andeq	r1, r2, ip, lsr r9
   1585c:	andeq	r1, r2, r8, asr r8
   15860:	andeq	r1, r2, r8, asr r9
   15864:	andeq	r1, r2, r8, ror #18
   15868:	ldrdeq	r1, [r2], -r0
   1586c:	muleq	r2, ip, r9
   15870:			; <UNDEFINED> instruction: 0x000216bc
   15874:	andeq	r1, r2, r0, lsr #20
   15878:	andeq	r1, r2, ip, asr #17
   1587c:			; <UNDEFINED> instruction: 0x000217b4
   15880:	andeq	r1, r2, r8, lsr #15
   15884:	andeq	r1, r2, r0, lsr r8
   15888:	andeq	r1, r2, r4, asr #16
   1588c:	andeq	r1, r2, r8, asr #16
   15890:	andeq	r1, r0, lr, asr r2
   15894:	andeq	r1, r2, ip, asr #16
   15898:	andeq	r2, r2, r0, ror r3
   1589c:	andeq	r1, r2, r0, lsl #17
   158a0:	muleq	r2, r0, r8
   158a4:	andeq	r1, r2, ip, ror #16
   158a8:			; <UNDEFINED> instruction: 0x000219b4
   158ac:			; <UNDEFINED> instruction: 0x000217bc
   158b0:	andeq	r1, r2, r0, asr #19
   158b4:	ldrdeq	r1, [r2], -r0
   158b8:	muleq	r2, r8, r7
   158bc:	muleq	r2, r0, r7
   158c0:	andeq	r1, r2, r4, asr sl
   158c4:	andeq	r1, r2, ip, lsl #16
   158c8:	andeq	pc, pc, r0, lsl #30
   158cc:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   158d0:	strdeq	r1, [r2], -ip
   158d4:	andeq	r1, r2, ip, lsr #17
   158d8:	andeq	r1, r2, r0, lsr #17
   158dc:	andeq	r1, r2, r4, lsr #15
   158e0:	andeq	r1, r2, ip, lsl #20
   158e4:	andeq	r1, r2, r8, lsr sl
   158e8:	andeq	r1, r2, ip, lsr #16
   158ec:	andeq	r1, r2, ip, asr #15
   158f0:	muleq	r2, r0, r9
   158f4:	andeq	r1, r2, r4, lsl #19
   158f8:	andeq	r1, r2, r0, lsr #16
   158fc:	andeq	r1, r2, ip, ror r9
   15900:	andeq	r1, r2, r4, lsl r8
   15904:	andeq	r1, r2, r8, lsr #19
   15908:	muleq	r2, r4, fp
   1590c:	andeq	r1, r2, ip, lsl #19
   15910:	andeq	r1, r2, r4, lsr #16
   15914:			; <UNDEFINED> instruction: 0x000218bc
   15918:	ldrdeq	r1, [r2], -r8
   1591c:	andeq	r1, r2, r4, ror #19
   15920:	ldrdeq	r1, [r2], -r0
   15924:	andeq	r1, r2, r4, asr #15
   15928:	andeq	r1, r2, r0, asr #15
   1592c:	ldrdeq	r1, [r2], -r4
   15930:	muleq	r2, r8, r9
   15934:	strdeq	r1, [r2], -r8
   15938:	strdeq	r1, [r2], -r0
   1593c:	andeq	r1, r2, r4, lsl #20
   15940:	andeq	r2, r2, r0, lsr #21
   15944:	ldrdeq	r1, [r2], -ip
   15948:	muleq	r2, ip, r7
   1594c:	ldr	r8, [r6, #136]	; 0x88
   15950:	cmp	r8, #0
   15954:	bne	161a8 <__assert_fail@plt+0x3528>
   15958:	ldr	sl, [r6, #120]	; 0x78
   1595c:	mov	r2, #3
   15960:	mov	r0, sl
   15964:	ldr	r1, [pc, #-260]	; 15868 <__assert_fail@plt+0x2be8>
   15968:	bl	12c14 <strncmp@plt>
   1596c:	subs	r3, r0, #0
   15970:	beq	162d8 <__assert_fail@plt+0x3658>
   15974:	mov	r2, #4
   15978:	ldr	r1, [pc, #-144]	; 158f0 <__assert_fail@plt+0x2c70>
   1597c:	mov	r0, sl
   15980:	bl	12c14 <strncmp@plt>
   15984:	cmp	r0, #0
   15988:	beq	162c0 <__assert_fail@plt+0x3640>
   1598c:	mov	r0, sl
   15990:	mov	r2, #2
   15994:	ldr	r1, [pc, #-108]	; 15930 <__assert_fail@plt+0x2cb0>
   15998:	bl	12c14 <strncmp@plt>
   1599c:	ldr	r3, [r6, #132]	; 0x84
   159a0:	subs	ip, r0, #0
   159a4:	mov	r0, r3
   159a8:	bne	1638c <__assert_fail@plt+0x370c>
   159ac:	ldr	r2, [pc, #-328]	; 1586c <__assert_fail@plt+0x2bec>
   159b0:	add	r1, sp, #24
   159b4:	str	ip, [sp, #24]
   159b8:	bl	1c690 <__assert_fail@plt+0x9a10>
   159bc:	ldr	sl, [sp, #24]
   159c0:	cmp	sl, #0
   159c4:	beq	164e8 <__assert_fail@plt+0x3868>
   159c8:	mov	fp, sl
   159cc:	b	159e4 <__assert_fail@plt+0x2d64>
   159d0:	bl	128c0 <__ctype_tolower_loc@plt>
   159d4:	uxtb	r8, r8
   159d8:	ldr	r3, [r0]
   159dc:	ldr	r3, [r3, r8, lsl #2]
   159e0:	strb	r3, [fp, #-1]
   159e4:	ldrsb	r8, [fp], #1
   159e8:	cmp	r8, #0
   159ec:	bne	159d0 <__assert_fail@plt+0x2d50>
   159f0:	b	156ec <__assert_fail@plt+0x2a6c>
   159f4:	ldr	r3, [r6, #260]	; 0x104
   159f8:	cmp	r3, #0
   159fc:	bne	1609c <__assert_fail@plt+0x341c>
   15a00:	ldr	r0, [pc, #-300]	; 158dc <__assert_fail@plt+0x2c5c>
   15a04:	bl	126d4 <strdup@plt>
   15a08:	subs	sl, r0, #0
   15a0c:	beq	15f0c <__assert_fail@plt+0x328c>
   15a10:	str	sl, [sp, #8]
   15a14:	cmp	fp, #38	; 0x26
   15a18:	bne	15614 <__assert_fail@plt+0x2994>
   15a1c:	mov	r2, sl
   15a20:	mov	r1, r4
   15a24:	mov	r0, r7
   15a28:	bl	14b30 <__assert_fail@plt+0x1eb0>
   15a2c:	ldr	sl, [sp, #8]
   15a30:	b	1560c <__assert_fail@plt+0x298c>
   15a34:	ldrb	r3, [r3, #20]
   15a38:	ldr	r0, [r6, #132]	; 0x84
   15a3c:	ldr	r2, [pc, #-468]	; 15870 <__assert_fail@plt+0x2bf0>
   15a40:	tst	r3, #2
   15a44:	beq	16168 <__assert_fail@plt+0x34e8>
   15a48:	add	r1, sp, #8
   15a4c:	bl	1c690 <__assert_fail@plt+0x9a10>
   15a50:	cmp	fp, #39	; 0x27
   15a54:	bne	156a8 <__assert_fail@plt+0x2a28>
   15a58:	b	1570c <__assert_fail@plt+0x2a8c>
   15a5c:	ldrb	r3, [r3, #20]
   15a60:	ldr	r0, [r6, #132]	; 0x84
   15a64:	ldr	r2, [pc, #-504]	; 15874 <__assert_fail@plt+0x2bf4>
   15a68:	tst	r3, #2
   15a6c:	beq	160ec <__assert_fail@plt+0x346c>
   15a70:	add	r1, sp, #8
   15a74:	bl	1c690 <__assert_fail@plt+0x9a10>
   15a78:	cmp	fp, #40	; 0x28
   15a7c:	bne	156a8 <__assert_fail@plt+0x2a28>
   15a80:	b	1570c <__assert_fail@plt+0x2a8c>
   15a84:	ldr	r3, [r6, #136]	; 0x88
   15a88:	ldr	r2, [r6, #124]	; 0x7c
   15a8c:	cmp	r3, #0
   15a90:	bne	160dc <__assert_fail@plt+0x345c>
   15a94:	cmp	r2, #0
   15a98:	ldr	r0, [r6, #132]	; 0x84
   15a9c:	beq	16430 <__assert_fail@plt+0x37b0>
   15aa0:	mov	r3, #0
   15aa4:	ldr	r2, [pc, #-564]	; 15878 <__assert_fail@plt+0x2bf8>
   15aa8:	add	r1, sp, #24
   15aac:	str	r3, [sp, #24]
   15ab0:	bl	1cca4 <__assert_fail@plt+0xa024>
   15ab4:	cmp	r0, #0
   15ab8:	bne	156a8 <__assert_fail@plt+0x2a28>
   15abc:	ldr	r2, [sp, #24]
   15ac0:	ldr	r3, [pc, #-588]	; 1587c <__assert_fail@plt+0x2bfc>
   15ac4:	cmp	r2, #0
   15ac8:	ldr	r8, [pc, #-592]	; 15880 <__assert_fail@plt+0x2c00>
   15acc:	moveq	r8, r3
   15ad0:	mov	r0, r8
   15ad4:	bl	126d4 <strdup@plt>
   15ad8:	subs	sl, r0, #0
   15adc:	bne	15608 <__assert_fail@plt+0x2988>
   15ae0:	b	163b8 <__assert_fail@plt+0x3738>
   15ae4:	add	r0, r6, #132	; 0x84
   15ae8:	bl	148f8 <__assert_fail@plt+0x1c78>
   15aec:	mov	sl, r0
   15af0:	b	15608 <__assert_fail@plt+0x2988>
   15af4:	mov	r0, r6
   15af8:	bl	17550 <__assert_fail@plt+0x48d0>
   15afc:	cmp	r0, #0
   15b00:	beq	156a8 <__assert_fail@plt+0x2a28>
   15b04:	ldr	r8, [r0, #24]
   15b08:	cmp	r8, #0
   15b0c:	beq	156a8 <__assert_fail@plt+0x2a28>
   15b10:	mov	r0, r8
   15b14:	b	156e0 <__assert_fail@plt+0x2a60>
   15b18:	mov	r0, r6
   15b1c:	bl	17550 <__assert_fail@plt+0x48d0>
   15b20:	cmp	r0, #0
   15b24:	beq	156a8 <__assert_fail@plt+0x2a28>
   15b28:	ldr	r8, [r0, #32]
   15b2c:	cmp	r8, #0
   15b30:	bne	15b10 <__assert_fail@plt+0x2e90>
   15b34:	b	156a8 <__assert_fail@plt+0x2a28>
   15b38:	ldr	r2, [pc, #-700]	; 15884 <__assert_fail@plt+0x2c04>
   15b3c:	add	r1, sp, #8
   15b40:	ldr	r0, [r6, #132]	; 0x84
   15b44:	bl	1c690 <__assert_fail@plt+0x9a10>
   15b48:	cmp	fp, #18
   15b4c:	bne	156a8 <__assert_fail@plt+0x2a28>
   15b50:	b	1570c <__assert_fail@plt+0x2a8c>
   15b54:	add	r3, sp, #24
   15b58:	mov	r8, #0
   15b5c:	ldr	r2, [pc, #-732]	; 15888 <__assert_fail@plt+0x2c08>
   15b60:	ldr	r1, [pc, #-732]	; 1588c <__assert_fail@plt+0x2c0c>
   15b64:	ldr	r0, [r6, #132]	; 0x84
   15b68:	str	r8, [sp, #24]
   15b6c:	bl	1c8ac <__assert_fail@plt+0x9c2c>
   15b70:	cmp	r0, #1
   15b74:	beq	15bac <__assert_fail@plt+0x2f2c>
   15b78:	mov	r1, r8
   15b7c:	ldr	r0, [r6, #128]	; 0x80
   15b80:	bl	12800 <open64@plt>
   15b84:	cmn	r0, #1
   15b88:	mov	sl, r0
   15b8c:	beq	15bac <__assert_fail@plt+0x2f2c>
   15b90:	add	r2, sp, #24
   15b94:	ldr	r1, [pc, #-780]	; 15890 <__assert_fail@plt+0x2c10>
   15b98:	bl	12788 <ioctl@plt>
   15b9c:	cmp	r0, #0
   15ba0:	mov	r0, sl
   15ba4:	strne	r8, [sp, #24]
   15ba8:	bl	12c44 <close@plt>
   15bac:	ldr	r3, [sp, #24]
   15bb0:	ldr	r2, [pc, #-732]	; 158dc <__assert_fail@plt+0x2c5c>
   15bb4:	cmp	r3, #0
   15bb8:	ldr	r8, [pc, #-808]	; 15898 <__assert_fail@plt+0x2c18>
   15bbc:	moveq	r8, r2
   15bc0:	mov	r0, r8
   15bc4:	bl	126d4 <strdup@plt>
   15bc8:	subs	sl, r0, #0
   15bcc:	bne	156ec <__assert_fail@plt+0x2a6c>
   15bd0:	b	163b8 <__assert_fail@plt+0x3738>
   15bd4:	add	r1, sp, #8
   15bd8:	ldr	r2, [pc, #-844]	; 15894 <__assert_fail@plt+0x2c14>
   15bdc:	ldr	r0, [r6, #132]	; 0x84
   15be0:	bl	1c690 <__assert_fail@plt+0x9a10>
   15be4:	ldr	sl, [sp, #8]
   15be8:	cmp	sl, #0
   15bec:	bne	15614 <__assert_fail@plt+0x2994>
   15bf0:	ldr	r0, [r6, #132]	; 0x84
   15bf4:	bl	1e164 <__assert_fail@plt+0xb4e4>
   15bf8:	cmp	r0, #0
   15bfc:	beq	156a8 <__assert_fail@plt+0x2a28>
   15c00:	ldr	r0, [r6, #132]	; 0x84
   15c04:	bl	1e164 <__assert_fail@plt+0xb4e4>
   15c08:	add	r1, sp, #8
   15c0c:	ldr	r2, [pc, #-896]	; 15894 <__assert_fail@plt+0x2c14>
   15c10:	bl	1c690 <__assert_fail@plt+0x9a10>
   15c14:	ldr	sl, [sp, #8]
   15c18:	b	1560c <__assert_fail@plt+0x298c>
   15c1c:	ldr	r0, [r6, #132]	; 0x84
   15c20:	bl	1e87c <__assert_fail@plt+0xbbfc>
   15c24:	cmp	r0, #0
   15c28:	beq	15efc <__assert_fail@plt+0x327c>
   15c2c:	ldr	r0, [pc, #-924]	; 15898 <__assert_fail@plt+0x2c18>
   15c30:	bl	126d4 <strdup@plt>
   15c34:	subs	sl, r0, #0
   15c38:	bne	156ec <__assert_fail@plt+0x2a6c>
   15c3c:	ldr	r0, [pc, #-940]	; 15898 <__assert_fail@plt+0x2c18>
   15c40:	bl	14754 <__assert_fail@plt+0x1ad4>
   15c44:	ldr	r3, [r6, #136]	; 0x88
   15c48:	cmp	r3, #0
   15c4c:	bne	155a8 <__assert_fail@plt+0x2928>
   15c50:	ldr	r3, [r6, #248]	; 0xf8
   15c54:	cmp	r3, #0
   15c58:	bne	155a8 <__assert_fail@plt+0x2928>
   15c5c:	mov	r0, r6
   15c60:	bl	17550 <__assert_fail@plt+0x48d0>
   15c64:	cmp	r0, #0
   15c68:	beq	15c78 <__assert_fail@plt+0x2ff8>
   15c6c:	ldr	r8, [r0, #44]	; 0x2c
   15c70:	cmp	r8, #0
   15c74:	bne	15b10 <__assert_fail@plt+0x2e90>
   15c78:	ldr	r2, [pc, #-996]	; 1589c <__assert_fail@plt+0x2c1c>
   15c7c:	add	r1, sp, #8
   15c80:	ldr	r0, [r6, #132]	; 0x84
   15c84:	bl	1c690 <__assert_fail@plt+0x9a10>
   15c88:	ldr	sl, [sp, #8]
   15c8c:	b	1560c <__assert_fail@plt+0x298c>
   15c90:	ldr	r3, [r6, #136]	; 0x88
   15c94:	cmp	r3, #0
   15c98:	bne	155a8 <__assert_fail@plt+0x2928>
   15c9c:	ldr	r3, [r6, #248]	; 0xf8
   15ca0:	cmp	r3, #0
   15ca4:	bne	155a8 <__assert_fail@plt+0x2928>
   15ca8:	mov	r0, r6
   15cac:	bl	17550 <__assert_fail@plt+0x48d0>
   15cb0:	cmp	r0, #0
   15cb4:	beq	15cc4 <__assert_fail@plt+0x3044>
   15cb8:	ldr	r8, [r0, #40]	; 0x28
   15cbc:	cmp	r8, #0
   15cc0:	bne	15b10 <__assert_fail@plt+0x2e90>
   15cc4:	ldr	r2, [pc, #-1068]	; 158a0 <__assert_fail@plt+0x2c20>
   15cc8:	add	r1, sp, #8
   15ccc:	ldr	r0, [r6, #132]	; 0x84
   15cd0:	bl	1c690 <__assert_fail@plt+0x9a10>
   15cd4:	ldr	sl, [sp, #8]
   15cd8:	b	1560c <__assert_fail@plt+0x298c>
   15cdc:	mov	r0, r6
   15ce0:	bl	17550 <__assert_fail@plt+0x48d0>
   15ce4:	cmp	r0, #0
   15ce8:	beq	156a8 <__assert_fail@plt+0x2a28>
   15cec:	ldr	r8, [r0, #8]
   15cf0:	cmp	r8, #0
   15cf4:	bne	15b10 <__assert_fail@plt+0x2e90>
   15cf8:	b	156a8 <__assert_fail@plt+0x2a28>
   15cfc:	mov	r0, r6
   15d00:	bl	17550 <__assert_fail@plt+0x48d0>
   15d04:	cmp	r0, #0
   15d08:	beq	156a8 <__assert_fail@plt+0x2a28>
   15d0c:	ldr	r8, [r0, #12]
   15d10:	cmp	r8, #0
   15d14:	bne	15b10 <__assert_fail@plt+0x2e90>
   15d18:	b	156a8 <__assert_fail@plt+0x2a28>
   15d1c:	mov	r0, r6
   15d20:	bl	17550 <__assert_fail@plt+0x48d0>
   15d24:	cmp	r0, #0
   15d28:	beq	156a8 <__assert_fail@plt+0x2a28>
   15d2c:	ldr	r8, [r0, #20]
   15d30:	cmp	r8, #0
   15d34:	bne	15b10 <__assert_fail@plt+0x2e90>
   15d38:	b	156a8 <__assert_fail@plt+0x2a28>
   15d3c:	mov	r0, r6
   15d40:	bl	17550 <__assert_fail@plt+0x48d0>
   15d44:	cmp	r0, #0
   15d48:	beq	156a8 <__assert_fail@plt+0x2a28>
   15d4c:	ldr	r8, [r0, #28]
   15d50:	cmp	r8, #0
   15d54:	bne	15b10 <__assert_fail@plt+0x2e90>
   15d58:	b	156a8 <__assert_fail@plt+0x2a28>
   15d5c:	mov	r0, r6
   15d60:	bl	17550 <__assert_fail@plt+0x48d0>
   15d64:	cmp	r0, #0
   15d68:	beq	156a8 <__assert_fail@plt+0x2a28>
   15d6c:	ldr	r8, [r0, #16]
   15d70:	cmp	r8, #0
   15d74:	bne	15b10 <__assert_fail@plt+0x2e90>
   15d78:	b	156a8 <__assert_fail@plt+0x2a28>
   15d7c:	mov	r0, r6
   15d80:	bl	17550 <__assert_fail@plt+0x48d0>
   15d84:	cmp	r0, #0
   15d88:	beq	156a8 <__assert_fail@plt+0x2a28>
   15d8c:	ldr	r8, [r0, #4]
   15d90:	cmp	r8, #0
   15d94:	bne	15b10 <__assert_fail@plt+0x2e90>
   15d98:	b	156a8 <__assert_fail@plt+0x2a28>
   15d9c:	mov	r0, r6
   15da0:	bl	16ffc <__assert_fail@plt+0x437c>
   15da4:	subs	r8, r0, #0
   15da8:	bne	156e0 <__assert_fail@plt+0x2a60>
   15dac:	b	155a8 <__assert_fail@plt+0x2928>
   15db0:	ldr	r2, [pc, #-1300]	; 158a4 <__assert_fail@plt+0x2c24>
   15db4:	add	r1, sp, #8
   15db8:	ldr	r0, [r6, #132]	; 0x84
   15dbc:	bl	1c690 <__assert_fail@plt+0x9a10>
   15dc0:	ldr	sl, [sp, #8]
   15dc4:	b	1560c <__assert_fail@plt+0x298c>
   15dc8:	ldr	r3, [r6]
   15dcc:	cmp	r3, #0
   15dd0:	beq	155a8 <__assert_fail@plt+0x2928>
   15dd4:	ldr	r0, [r3, #120]	; 0x78
   15dd8:	bl	14cdc <__assert_fail@plt+0x205c>
   15ddc:	mov	sl, r0
   15de0:	str	r0, [sp, #8]
   15de4:	b	1560c <__assert_fail@plt+0x298c>
   15de8:	add	r3, sp, #24
   15dec:	str	r3, [sp]
   15df0:	add	r2, sp, #16
   15df4:	add	r3, sp, #20
   15df8:	add	r1, sp, #12
   15dfc:	ldr	r0, [r6, #132]	; 0x84
   15e00:	bl	1eafc <__assert_fail@plt+0xbe7c>
   15e04:	cmp	r0, #0
   15e08:	bne	156a8 <__assert_fail@plt+0x2a28>
   15e0c:	ldr	r2, [sp, #24]
   15e10:	ldr	r3, [sp, #20]
   15e14:	str	r2, [sp, #4]
   15e18:	str	r3, [sp]
   15e1c:	ldr	r1, [pc, #-1404]	; 158a8 <__assert_fail@plt+0x2c28>
   15e20:	ldrd	r2, [sp, #12]
   15e24:	add	r0, sp, #8
   15e28:	bl	14504 <__assert_fail@plt+0x1884>
   15e2c:	b	156a8 <__assert_fail@plt+0x2a28>
   15e30:	ldr	r8, [r6, #132]	; 0x84
   15e34:	ldr	r1, [pc, #-1424]	; 158ac <__assert_fail@plt+0x2c2c>
   15e38:	mov	r0, r8
   15e3c:	bl	1efdc <__assert_fail@plt+0xc35c>
   15e40:	cmp	r0, #0
   15e44:	ldrne	r8, [pc, #-1440]	; 158ac <__assert_fail@plt+0x2c2c>
   15e48:	bne	15b10 <__assert_fail@plt+0x2e90>
   15e4c:	ldr	r1, [pc, #-1436]	; 158b8 <__assert_fail@plt+0x2c38>
   15e50:	mov	r0, r8
   15e54:	bl	1efdc <__assert_fail@plt+0xc35c>
   15e58:	cmp	r0, #0
   15e5c:	beq	162a4 <__assert_fail@plt+0x3624>
   15e60:	mov	r0, r8
   15e64:	ldr	r2, [pc, #-1468]	; 158b0 <__assert_fail@plt+0x2c30>
   15e68:	ldr	r1, [pc, #-1464]	; 158b8 <__assert_fail@plt+0x2c38>
   15e6c:	bl	1ef14 <__assert_fail@plt+0xc294>
   15e70:	subs	sl, r0, #0
   15e74:	beq	155a8 <__assert_fail@plt+0x2928>
   15e78:	ldr	r1, [pc, #-1484]	; 158b4 <__assert_fail@plt+0x2c34>
   15e7c:	bl	124e8 <strstr@plt>
   15e80:	ldr	r3, [pc, #-1488]	; 158b8 <__assert_fail@plt+0x2c38>
   15e84:	ldr	r8, [pc, #-1488]	; 158bc <__assert_fail@plt+0x2c3c>
   15e88:	cmp	r0, #0
   15e8c:	mov	r0, sl
   15e90:	moveq	r8, r3
   15e94:	bl	125d8 <free@plt>
   15e98:	b	15b10 <__assert_fail@plt+0x2e90>
   15e9c:	ldrb	r3, [r3, #20]
   15ea0:	ldr	r0, [r6, #132]	; 0x84
   15ea4:	ldr	r2, [pc, #-1516]	; 158c0 <__assert_fail@plt+0x2c40>
   15ea8:	tst	r3, #2
   15eac:	beq	1612c <__assert_fail@plt+0x34ac>
   15eb0:	add	r1, sp, #8
   15eb4:	bl	1c690 <__assert_fail@plt+0x9a10>
   15eb8:	cmp	fp, #42	; 0x2a
   15ebc:	beq	16374 <__assert_fail@plt+0x36f4>
   15ec0:	ldr	sl, [sp, #8]
   15ec4:	cmp	sl, #0
   15ec8:	bne	15614 <__assert_fail@plt+0x2994>
   15ecc:	b	15efc <__assert_fail@plt+0x327c>
   15ed0:	mov	r0, r6
   15ed4:	bl	17550 <__assert_fail@plt+0x48d0>
   15ed8:	cmp	r0, #0
   15edc:	beq	156a8 <__assert_fail@plt+0x2a28>
   15ee0:	ldr	r8, [r0, #36]	; 0x24
   15ee4:	cmp	r8, #0
   15ee8:	bne	15b10 <__assert_fail@plt+0x2e90>
   15eec:	b	156a8 <__assert_fail@plt+0x2a28>
   15ef0:	ldr	r3, [r6, #260]	; 0x104
   15ef4:	cmp	r3, #0
   15ef8:	bne	160bc <__assert_fail@plt+0x343c>
   15efc:	ldr	r0, [pc, #-1576]	; 158dc <__assert_fail@plt+0x2c5c>
   15f00:	bl	126d4 <strdup@plt>
   15f04:	subs	sl, r0, #0
   15f08:	bne	156ec <__assert_fail@plt+0x2a6c>
   15f0c:	ldr	r0, [pc, #-1592]	; 158dc <__assert_fail@plt+0x2c5c>
   15f10:	bl	14754 <__assert_fail@plt+0x1ad4>
   15f14:	ldr	r0, [r3]
   15f18:	bl	12830 <scols_table_is_raw@plt>
   15f1c:	cmp	r0, #0
   15f20:	bne	15f38 <__assert_fail@plt+0x32b8>
   15f24:	ldr	r3, [r5, #424]	; 0x1a8
   15f28:	ldr	r0, [r3]
   15f2c:	bl	126bc <scols_table_is_export@plt>
   15f30:	cmp	r0, #0
   15f34:	beq	16348 <__assert_fail@plt+0x36c8>
   15f38:	ldr	r3, [r6, #256]	; 0x100
   15f3c:	ldr	r2, [r6, #252]	; 0xfc
   15f40:	ldr	r1, [pc, #-1668]	; 158c4 <__assert_fail@plt+0x2c44>
   15f44:	add	r0, sp, #8
   15f48:	bl	14504 <__assert_fail@plt+0x1884>
   15f4c:	cmp	fp, #3
   15f50:	bne	156a8 <__assert_fail@plt+0x2a28>
   15f54:	ldr	r0, [r6, #256]	; 0x100
   15f58:	ldr	r3, [r6, #252]	; 0xfc
   15f5c:	ldr	ip, [pc, #-1692]	; 158c8 <__assert_fail@plt+0x2c48>
   15f60:	ldr	r1, [pc, #-1692]	; 158cc <__assert_fail@plt+0x2c4c>
   15f64:	and	ip, ip, r3, lsl #8
   15f68:	uxtb	r2, r0
   15f6c:	bic	r3, r3, #4080	; 0xff0
   15f70:	and	r1, r1, r0, lsl #12
   15f74:	orr	r2, r2, ip
   15f78:	bic	r3, r3, #15
   15f7c:	orr	r3, r3, r0, lsr #20
   15f80:	orr	r2, r1, r2
   15f84:	mov	r0, r7
   15f88:	mov	r1, r4
   15f8c:	bl	14ae4 <__assert_fail@plt+0x1e64>
   15f90:	ldr	sl, [sp, #8]
   15f94:	b	1560c <__assert_fail@plt+0x298c>
   15f98:	ldrd	r2, [r6, #152]	; 0x98
   15f9c:	orrs	r3, r2, r3
   15fa0:	beq	161c0 <__assert_fail@plt+0x3540>
   15fa4:	sub	r8, r8, #4
   15fa8:	cmp	r8, #4
   15fac:	ldrls	pc, [pc, r8, lsl #2]
   15fb0:	b	16088 <__assert_fail@plt+0x3408>
   15fb4:	andeq	r6, r1, r4, ror r2
   15fb8:	andeq	r6, r1, ip, lsl #5
   15fbc:	andeq	r6, r1, r8, lsl #1
   15fc0:	andeq	r6, r1, r4, lsr #4
   15fc4:	andeq	r6, r1, r0, lsl #4
   15fc8:	mov	r0, r6
   15fcc:	bl	17550 <__assert_fail@plt+0x48d0>
   15fd0:	cmp	r0, #0
   15fd4:	beq	156a8 <__assert_fail@plt+0x2a28>
   15fd8:	ldr	r8, [r0]
   15fdc:	cmp	r8, #0
   15fe0:	bne	15b10 <__assert_fail@plt+0x2e90>
   15fe4:	b	156a8 <__assert_fail@plt+0x2a28>
   15fe8:	ldr	r8, [r6, #124]	; 0x7c
   15fec:	cmp	r8, #0
   15ff0:	beq	155fc <__assert_fail@plt+0x297c>
   15ff4:	ldrb	r3, [r3, #20]
   15ff8:	tst	r3, #32
   15ffc:	beq	15ad0 <__assert_fail@plt+0x2e50>
   16000:	mov	r2, r8
   16004:	ldr	r1, [pc, #-1852]	; 158d0 <__assert_fail@plt+0x2c50>
   16008:	add	r0, sp, #24
   1600c:	bl	14504 <__assert_fail@plt+0x1884>
   16010:	ldr	sl, [sp, #24]
   16014:	b	15608 <__assert_fail@plt+0x2988>
   16018:	ldr	r3, [r6, #136]	; 0x88
   1601c:	cmp	r3, #0
   16020:	bne	155a8 <__assert_fail@plt+0x2928>
   16024:	ldr	r3, [r6, #248]	; 0xf8
   16028:	cmp	r3, #0
   1602c:	bne	155a8 <__assert_fail@plt+0x2928>
   16030:	ldr	r2, [pc, #-1892]	; 158d4 <__assert_fail@plt+0x2c54>
   16034:	add	r1, sp, #8
   16038:	ldr	r0, [r6, #132]	; 0x84
   1603c:	bl	1c690 <__assert_fail@plt+0x9a10>
   16040:	ldr	sl, [sp, #8]
   16044:	b	1560c <__assert_fail@plt+0x298c>
   16048:	ldr	r3, [r6, #136]	; 0x88
   1604c:	cmp	r3, #0
   16050:	bne	155a8 <__assert_fail@plt+0x2928>
   16054:	ldr	r3, [r6, #248]	; 0xf8
   16058:	cmp	r3, #0
   1605c:	bne	155a8 <__assert_fail@plt+0x2928>
   16060:	ldr	r2, [pc, #-1936]	; 158d8 <__assert_fail@plt+0x2c58>
   16064:	add	r1, sp, #8
   16068:	ldr	r0, [r6, #132]	; 0x84
   1606c:	bl	1c690 <__assert_fail@plt+0x9a10>
   16070:	ldr	sl, [sp, #8]
   16074:	b	1560c <__assert_fail@plt+0x298c>
   16078:	ldr	r8, [r6, #128]	; 0x80
   1607c:	cmp	r8, #0
   16080:	bne	15b10 <__assert_fail@plt+0x2e90>
   16084:	b	155a8 <__assert_fail@plt+0x2928>
   16088:	ldr	r0, [pc, #-1972]	; 158dc <__assert_fail@plt+0x2c5c>
   1608c:	bl	126d4 <strdup@plt>
   16090:	subs	sl, r0, #0
   16094:	bne	15608 <__assert_fail@plt+0x2988>
   16098:	b	15f0c <__assert_fail@plt+0x328c>
   1609c:	ldr	r2, [pc, #-1988]	; 158e0 <__assert_fail@plt+0x2c60>
   160a0:	add	r1, sp, #8
   160a4:	ldr	r0, [r6, #132]	; 0x84
   160a8:	bl	1c690 <__assert_fail@plt+0x9a10>
   160ac:	ldr	sl, [sp, #8]
   160b0:	cmp	sl, #0
   160b4:	bne	15a14 <__assert_fail@plt+0x2d94>
   160b8:	b	15a00 <__assert_fail@plt+0x2d80>
   160bc:	ldr	r2, [pc, #-2016]	; 158e4 <__assert_fail@plt+0x2c64>
   160c0:	add	r1, sp, #8
   160c4:	ldr	r0, [r6, #132]	; 0x84
   160c8:	bl	1c690 <__assert_fail@plt+0x9a10>
   160cc:	ldr	sl, [sp, #8]
   160d0:	cmp	sl, #0
   160d4:	bne	15614 <__assert_fail@plt+0x2994>
   160d8:	b	15efc <__assert_fail@plt+0x327c>
   160dc:	cmp	r2, #0
   160e0:	beq	155a8 <__assert_fail@plt+0x2928>
   160e4:	ldr	r0, [r6, #132]	; 0x84
   160e8:	b	15aa0 <__assert_fail@plt+0x2e20>
   160ec:	add	r1, sp, #24
   160f0:	bl	1cb8c <__assert_fail@plt+0x9f0c>
   160f4:	cmp	r0, #0
   160f8:	bne	156a8 <__assert_fail@plt+0x2a28>
   160fc:	ldrd	r2, [sp, #24]
   16100:	bl	1a1f8 <__assert_fail@plt+0x7578>
   16104:	cmp	fp, #40	; 0x28
   16108:	mov	sl, r0
   1610c:	str	r0, [sp, #8]
   16110:	bne	1560c <__assert_fail@plt+0x298c>
   16114:	ldrd	r2, [sp, #24]
   16118:	mov	r1, r4
   1611c:	mov	r0, r7
   16120:	bl	14ae4 <__assert_fail@plt+0x1e64>
   16124:	ldr	sl, [sp, #8]
   16128:	b	1560c <__assert_fail@plt+0x298c>
   1612c:	add	r1, sp, #24
   16130:	bl	1cb8c <__assert_fail@plt+0x9f0c>
   16134:	cmp	r0, #0
   16138:	bne	15ec0 <__assert_fail@plt+0x3240>
   1613c:	ldrd	r2, [sp, #24]
   16140:	bl	1a1f8 <__assert_fail@plt+0x7578>
   16144:	cmp	fp, #42	; 0x2a
   16148:	mov	sl, r0
   1614c:	str	r0, [sp, #8]
   16150:	bne	15ec4 <__assert_fail@plt+0x3244>
   16154:	ldrd	r2, [sp, #24]
   16158:	mov	r1, r4
   1615c:	mov	r0, r7
   16160:	bl	14ae4 <__assert_fail@plt+0x1e64>
   16164:	b	15ec0 <__assert_fail@plt+0x3240>
   16168:	add	r1, sp, #24
   1616c:	bl	1cb8c <__assert_fail@plt+0x9f0c>
   16170:	cmp	r0, #0
   16174:	bne	156a8 <__assert_fail@plt+0x2a28>
   16178:	ldrd	r2, [sp, #24]
   1617c:	bl	1a1f8 <__assert_fail@plt+0x7578>
   16180:	cmp	fp, #39	; 0x27
   16184:	mov	sl, r0
   16188:	str	r0, [sp, #8]
   1618c:	bne	1560c <__assert_fail@plt+0x298c>
   16190:	b	16114 <__assert_fail@plt+0x3494>
   16194:	add	r2, r6, #16
   16198:	ldr	r1, [r6, #128]	; 0x80
   1619c:	mov	r0, #3
   161a0:	bl	12bfc <__xstat64@plt>
   161a4:	b	156bc <__assert_fail@plt+0x2a3c>
   161a8:	ldr	r0, [pc, #-2228]	; 158fc <__assert_fail@plt+0x2c7c>
   161ac:	bl	126d4 <strdup@plt>
   161b0:	subs	sl, r0, #0
   161b4:	bne	156ec <__assert_fail@plt+0x2a6c>
   161b8:	ldr	r0, [pc, #-2244]	; 158fc <__assert_fail@plt+0x2c7c>
   161bc:	bl	14754 <__assert_fail@plt+0x1ad4>
   161c0:	mov	r0, r6
   161c4:	bl	16ffc <__assert_fail@plt+0x437c>
   161c8:	cmp	r0, #0
   161cc:	beq	155a8 <__assert_fail@plt+0x2928>
   161d0:	ldrb	r3, [r6, #272]	; 0x110
   161d4:	tst	r3, #2
   161d8:	bne	155a8 <__assert_fail@plt+0x2928>
   161dc:	add	r1, r6, #144	; 0x90
   161e0:	bl	12a70 <statvfs64@plt>
   161e4:	cmp	r0, #0
   161e8:	beq	15fa4 <__assert_fail@plt+0x3324>
   161ec:	b	155a8 <__assert_fail@plt+0x2928>
   161f0:	ldr	r1, [pc, #-2320]	; 158e8 <__assert_fail@plt+0x2c68>
   161f4:	add	r0, sp, #8
   161f8:	bl	14504 <__assert_fail@plt+0x1884>
   161fc:	b	15678 <__assert_fail@plt+0x29f8>
   16200:	ldrd	sl, [r6, #152]	; 0x98
   16204:	orrs	r3, sl, fp
   16208:	bne	163ec <__assert_fail@plt+0x376c>
   1620c:	ldr	r0, [pc, #-2332]	; 158f8 <__assert_fail@plt+0x2c78>
   16210:	bl	126d4 <strdup@plt>
   16214:	subs	sl, r0, #0
   16218:	bne	15608 <__assert_fail@plt+0x2988>
   1621c:	ldr	r0, [pc, #-2348]	; 158f8 <__assert_fail@plt+0x2c78>
   16220:	bl	14754 <__assert_fail@plt+0x1ad4>
   16224:	ldr	r2, [r6, #160]	; 0xa0
   16228:	ldr	r3, [r6, #152]	; 0x98
   1622c:	ldr	r0, [r6, #148]	; 0x94
   16230:	subs	r3, r3, r2
   16234:	ldr	r1, [r6, #156]	; 0x9c
   16238:	ldr	ip, [r6, #164]	; 0xa4
   1623c:	umull	r2, r3, r3, r0
   16240:	sbc	r1, r1, ip
   16244:	mla	r3, r0, r1, r3
   16248:	orrs	r1, r2, r3
   1624c:	beq	16088 <__assert_fail@plt+0x3408>
   16250:	ldr	r1, [r5, #424]	; 0x1a8
   16254:	ldrb	r1, [r1, #20]
   16258:	ands	r0, r1, #2
   1625c:	beq	163c0 <__assert_fail@plt+0x3740>
   16260:	ldr	r1, [pc, #-2432]	; 158e8 <__assert_fail@plt+0x2c68>
   16264:	add	r0, sp, #24
   16268:	bl	14504 <__assert_fail@plt+0x1884>
   1626c:	ldr	sl, [sp, #24]
   16270:	b	15608 <__assert_fail@plt+0x2988>
   16274:	ldr	r1, [r6, #148]	; 0x94
   16278:	ldr	r2, [r6, #168]	; 0xa8
   1627c:	ldr	r0, [r6, #172]	; 0xac
   16280:	umull	r2, r3, r2, r1
   16284:	mla	r3, r1, r0, r3
   16288:	b	16248 <__assert_fail@plt+0x35c8>
   1628c:	ldr	r1, [r6, #148]	; 0x94
   16290:	ldr	r2, [r6, #152]	; 0x98
   16294:	ldr	r0, [r6, #156]	; 0x9c
   16298:	umull	r2, r3, r2, r1
   1629c:	mla	r3, r1, r0, r3
   162a0:	b	16248 <__assert_fail@plt+0x35c8>
   162a4:	ldr	r1, [pc, #-2496]	; 158ec <__assert_fail@plt+0x2c6c>
   162a8:	mov	r0, r8
   162ac:	bl	1efdc <__assert_fail@plt+0xc35c>
   162b0:	cmp	r0, #0
   162b4:	beq	16444 <__assert_fail@plt+0x37c4>
   162b8:	ldr	r8, [pc, #-2516]	; 158ec <__assert_fail@plt+0x2c6c>
   162bc:	b	15b10 <__assert_fail@plt+0x2e90>
   162c0:	ldr	r0, [pc, #-2520]	; 158f0 <__assert_fail@plt+0x2c70>
   162c4:	bl	126d4 <strdup@plt>
   162c8:	subs	sl, r0, #0
   162cc:	bne	159c8 <__assert_fail@plt+0x2d48>
   162d0:	ldr	r0, [pc, #-2536]	; 158f0 <__assert_fail@plt+0x2c70>
   162d4:	bl	14754 <__assert_fail@plt+0x1ad4>
   162d8:	ldr	r2, [pc, #-2540]	; 158f4 <__assert_fail@plt+0x2c74>
   162dc:	add	r1, sp, #20
   162e0:	ldr	r0, [r6, #132]	; 0x84
   162e4:	str	r3, [sp, #20]
   162e8:	bl	1c690 <__assert_fail@plt+0x9a10>
   162ec:	cmp	r0, #0
   162f0:	ble	163cc <__assert_fail@plt+0x374c>
   162f4:	ldr	r3, [sp, #20]
   162f8:	cmp	r3, #0
   162fc:	beq	163d4 <__assert_fail@plt+0x3754>
   16300:	ldr	r1, [pc, #-2576]	; 158f8 <__assert_fail@plt+0x2c78>
   16304:	add	r0, sp, #24
   16308:	str	r3, [sp, #24]
   1630c:	bl	1289c <strsep@plt>
   16310:	subs	r8, r0, #0
   16314:	beq	163cc <__assert_fail@plt+0x374c>
   16318:	mov	r2, #4
   1631c:	ldr	r1, [pc, #-2600]	; 158fc <__assert_fail@plt+0x2c7c>
   16320:	bl	129bc <strncasecmp@plt>
   16324:	cmp	r0, #0
   16328:	strbeq	r0, [r8, #4]
   1632c:	mov	r0, r8
   16330:	bl	126d4 <strdup@plt>
   16334:	subs	sl, r0, #0
   16338:	beq	163b8 <__assert_fail@plt+0x3738>
   1633c:	ldr	r0, [sp, #20]
   16340:	bl	125d8 <free@plt>
   16344:	b	159c8 <__assert_fail@plt+0x2d48>
   16348:	ldr	r3, [r5, #424]	; 0x1a8
   1634c:	ldr	r0, [r3]
   16350:	bl	128b4 <scols_table_is_json@plt>
   16354:	cmp	r0, #0
   16358:	bne	15f38 <__assert_fail@plt+0x32b8>
   1635c:	ldr	r3, [r6, #256]	; 0x100
   16360:	ldr	r2, [r6, #252]	; 0xfc
   16364:	ldr	r1, [pc, #-2668]	; 15900 <__assert_fail@plt+0x2c80>
   16368:	add	r0, sp, #8
   1636c:	bl	14504 <__assert_fail@plt+0x1884>
   16370:	b	15f4c <__assert_fail@plt+0x32cc>
   16374:	ldr	r2, [sp, #8]
   16378:	mov	r1, r4
   1637c:	mov	r0, r7
   16380:	bl	14b30 <__assert_fail@plt+0x1eb0>
   16384:	ldr	sl, [sp, #8]
   16388:	b	15ec4 <__assert_fail@plt+0x3244>
   1638c:	ldr	r2, [pc, #-2704]	; 15904 <__assert_fail@plt+0x2c84>
   16390:	add	r1, sp, #24
   16394:	str	r8, [sp, #24]
   16398:	bl	1cca4 <__assert_fail@plt+0xa024>
   1639c:	cmp	r0, #0
   163a0:	beq	164d4 <__assert_fail@plt+0x3854>
   163a4:	ldr	r8, [pc, #-2724]	; 15908 <__assert_fail@plt+0x2c88>
   163a8:	mov	r0, r8
   163ac:	bl	126d4 <strdup@plt>
   163b0:	subs	sl, r0, #0
   163b4:	bne	159c8 <__assert_fail@plt+0x2d48>
   163b8:	mov	r0, r8
   163bc:	bl	14754 <__assert_fail@plt+0x1ad4>
   163c0:	bl	1a1f8 <__assert_fail@plt+0x7578>
   163c4:	mov	sl, r0
   163c8:	b	15608 <__assert_fail@plt+0x2988>
   163cc:	ldr	r0, [sp, #20]
   163d0:	bl	125d8 <free@plt>
   163d4:	ldr	r0, [pc, #-2768]	; 1590c <__assert_fail@plt+0x2c8c>
   163d8:	bl	126d4 <strdup@plt>
   163dc:	subs	sl, r0, #0
   163e0:	bne	159c8 <__assert_fail@plt+0x2d48>
   163e4:	ldr	r0, [pc, #-2784]	; 1590c <__assert_fail@plt+0x2c8c>
   163e8:	bl	14754 <__assert_fail@plt+0x1ad4>
   163ec:	ldrd	r0, [r6, #160]	; 0xa0
   163f0:	subs	r0, sl, r0
   163f4:	sbc	r1, fp, r1
   163f8:	bl	20780 <__assert_fail@plt+0xdb00>
   163fc:	vmov	d9, r0, r1
   16400:	mov	r0, sl
   16404:	mov	r1, fp
   16408:	bl	20780 <__assert_fail@plt+0xdb00>
   1640c:	vmov	d7, r0, r1
   16410:	ldr	r1, [pc, #-2824]	; 15910 <__assert_fail@plt+0x2c90>
   16414:	add	r0, sp, #24
   16418:	vdiv.f64	d7, d9, d7
   1641c:	vmul.f64	d7, d7, d8
   16420:	vmov	r2, r3, d7
   16424:	bl	14504 <__assert_fail@plt+0x1884>
   16428:	ldr	sl, [sp, #24]
   1642c:	b	15608 <__assert_fail@plt+0x2988>
   16430:	ldr	r2, [pc, #-2852]	; 15914 <__assert_fail@plt+0x2c94>
   16434:	add	r1, sp, #8
   16438:	bl	1c690 <__assert_fail@plt+0x9a10>
   1643c:	ldr	sl, [sp, #8]
   16440:	b	1560c <__assert_fail@plt+0x298c>
   16444:	ldr	r1, [pc, #-2868]	; 15918 <__assert_fail@plt+0x2c98>
   16448:	mov	r0, r8
   1644c:	bl	1f094 <__assert_fail@plt+0xc414>
   16450:	cmp	r0, #0
   16454:	bne	162b8 <__assert_fail@plt+0x3638>
   16458:	mov	r0, r8
   1645c:	ldr	r1, [pc, #-2888]	; 1591c <__assert_fail@plt+0x2c9c>
   16460:	bl	1f094 <__assert_fail@plt+0xc414>
   16464:	cmp	r0, #0
   16468:	ldrne	r8, [pc, #-2896]	; 15920 <__assert_fail@plt+0x2ca0>
   1646c:	bne	15b10 <__assert_fail@plt+0x2e90>
   16470:	mov	r0, r8
   16474:	ldr	r1, [pc, #-2904]	; 15924 <__assert_fail@plt+0x2ca4>
   16478:	bl	1efdc <__assert_fail@plt+0xc35c>
   1647c:	cmp	r0, #0
   16480:	ldrne	r8, [pc, #-2916]	; 15924 <__assert_fail@plt+0x2ca4>
   16484:	bne	15b10 <__assert_fail@plt+0x2e90>
   16488:	mov	r0, r8
   1648c:	ldr	r1, [pc, #-2924]	; 15928 <__assert_fail@plt+0x2ca8>
   16490:	bl	1f120 <__assert_fail@plt+0xc4a0>
   16494:	cmp	r0, #0
   16498:	ldrne	r8, [pc, #-2936]	; 15928 <__assert_fail@plt+0x2ca8>
   1649c:	bne	15b10 <__assert_fail@plt+0x2e90>
   164a0:	ldr	r1, [pc, #-2928]	; 15938 <__assert_fail@plt+0x2cb8>
   164a4:	mov	r0, r8
   164a8:	bl	1efdc <__assert_fail@plt+0xc35c>
   164ac:	cmp	r0, #0
   164b0:	bne	16500 <__assert_fail@plt+0x3880>
   164b4:	mov	r2, #4
   164b8:	ldr	r1, [pc, #-2964]	; 1592c <__assert_fail@plt+0x2cac>
   164bc:	ldr	r0, [r6, #120]	; 0x78
   164c0:	bl	12c14 <strncmp@plt>
   164c4:	cmp	r0, #0
   164c8:	ldreq	r8, [pc, #-2980]	; 1592c <__assert_fail@plt+0x2cac>
   164cc:	beq	15b10 <__assert_fail@plt+0x2e90>
   164d0:	b	155a8 <__assert_fail@plt+0x2928>
   164d4:	ldr	r0, [sp, #24]
   164d8:	bl	1825c <__assert_fail@plt+0x55dc>
   164dc:	subs	r8, r0, #0
   164e0:	bne	163a8 <__assert_fail@plt+0x3728>
   164e4:	b	163a4 <__assert_fail@plt+0x3724>
   164e8:	ldr	r0, [pc, #-3008]	; 15930 <__assert_fail@plt+0x2cb0>
   164ec:	bl	126d4 <strdup@plt>
   164f0:	subs	sl, r0, #0
   164f4:	bne	159c8 <__assert_fail@plt+0x2d48>
   164f8:	ldr	r0, [pc, #-3024]	; 15930 <__assert_fail@plt+0x2cb0>
   164fc:	bl	14754 <__assert_fail@plt+0x1ad4>
   16500:	mov	r0, r8
   16504:	ldr	r2, [pc, #-3032]	; 15934 <__assert_fail@plt+0x2cb4>
   16508:	ldr	r1, [pc, #-3032]	; 15938 <__assert_fail@plt+0x2cb8>
   1650c:	bl	1ef14 <__assert_fail@plt+0xc294>
   16510:	subs	sl, r0, #0
   16514:	beq	155a8 <__assert_fail@plt+0x2928>
   16518:	mov	r2, #4
   1651c:	ldr	r1, [pc, #-3048]	; 1593c <__assert_fail@plt+0x2cbc>
   16520:	bl	12c14 <strncmp@plt>
   16524:	cmp	r0, #0
   16528:	beq	16584 <__assert_fail@plt+0x3904>
   1652c:	mov	r2, #4
   16530:	ldr	r1, [pc, #-3056]	; 15948 <__assert_fail@plt+0x2cc8>
   16534:	mov	r0, sl
   16538:	bl	12c14 <strncmp@plt>
   1653c:	cmp	r0, #0
   16540:	beq	16584 <__assert_fail@plt+0x3904>
   16544:	ldr	r1, [pc, #-3084]	; 15940 <__assert_fail@plt+0x2cc0>
   16548:	mov	r0, sl
   1654c:	bl	124e8 <strstr@plt>
   16550:	cmp	r0, #0
   16554:	ldrne	r8, [pc, #-3100]	; 15940 <__assert_fail@plt+0x2cc0>
   16558:	beq	155a0 <__assert_fail@plt+0x2920>
   1655c:	mov	r0, sl
   16560:	bl	125d8 <free@plt>
   16564:	b	15b10 <__assert_fail@plt+0x2e90>
   16568:	ldr	r1, [pc, #-3116]	; 15944 <__assert_fail@plt+0x2cc4>
   1656c:	mov	r2, #5
   16570:	bl	126c8 <dcgettext@plt>
   16574:	mov	r1, r0
   16578:	mov	r0, #1
   1657c:	bl	12728 <err@plt>
   16580:	bl	126e0 <__stack_chk_fail@plt>
   16584:	ldr	r8, [pc, #-3140]	; 15948 <__assert_fail@plt+0x2cc8>
   16588:	b	1655c <__assert_fail@plt+0x38dc>
   1658c:	cmp	r2, #0
   16590:	push	{r4, lr}
   16594:	mov	ip, r1
   16598:	mov	r4, r0
   1659c:	beq	165ac <__assert_fail@plt+0x392c>
   165a0:	ldr	r2, [r0, #240]	; 0xf0
   165a4:	cmp	r2, #0
   165a8:	bne	165cc <__assert_fail@plt+0x394c>
   165ac:	cmp	ip, #0
   165b0:	mov	r0, r4
   165b4:	ldrne	r1, [ip, #8]
   165b8:	moveq	r1, ip
   165bc:	bl	15458 <__assert_fail@plt+0x27d8>
   165c0:	mov	r0, r4
   165c4:	pop	{r4, lr}
   165c8:	b	168e8 <__assert_fail@plt+0x3c68>
   165cc:	mov	r2, r3
   165d0:	bl	165e0 <__assert_fail@plt+0x3960>
   165d4:	mov	r0, r4
   165d8:	pop	{r4, lr}
   165dc:	b	168e8 <__assert_fail@plt+0x3c68>
   165e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165e4:	mov	r5, r0
   165e8:	ldr	fp, [pc, #720]	; 168c0 <__assert_fail@plt+0x3c40>
   165ec:	sub	sp, sp, #308	; 0x134
   165f0:	mov	sl, r1
   165f4:	ldr	r3, [fp]
   165f8:	mov	r7, r2
   165fc:	add	r0, sp, #16
   16600:	mov	r2, #280	; 0x118
   16604:	mov	r1, #0
   16608:	str	r3, [sp, #300]	; 0x12c
   1660c:	bl	12a04 <memset@plt>
   16610:	ldr	r3, [r5, #240]	; 0xf0
   16614:	cmp	r3, #0
   16618:	beq	1689c <__assert_fail@plt+0x3c1c>
   1661c:	ldr	r3, [r5, #136]	; 0x88
   16620:	cmp	r3, #0
   16624:	bne	1689c <__assert_fail@plt+0x3c1c>
   16628:	ldr	r8, [pc, #660]	; 168c4 <__assert_fail@plt+0x3c44>
   1662c:	ldr	r3, [r8]
   16630:	tst	r3, #16
   16634:	bne	1685c <__assert_fail@plt+0x3bdc>
   16638:	mov	r1, #0
   1663c:	ldr	r0, [r5, #132]	; 0x84
   16640:	bl	1c178 <__assert_fail@plt+0x94f8>
   16644:	subs	r6, r0, #0
   16648:	mvnne	r9, #0
   1664c:	beq	168a8 <__assert_fail@plt+0x3c28>
   16650:	mov	r0, r6
   16654:	bl	14a60 <__assert_fail@plt+0x1de0>
   16658:	subs	r4, r0, #0
   1665c:	beq	16718 <__assert_fail@plt+0x3a98>
   16660:	cmp	r7, #0
   16664:	beq	1667c <__assert_fail@plt+0x39fc>
   16668:	add	r1, r4, #19
   1666c:	mov	r0, r7
   16670:	bl	12524 <strcmp@plt>
   16674:	cmp	r0, #0
   16678:	bne	16650 <__assert_fail@plt+0x39d0>
   1667c:	ldr	r2, [r5, #120]	; 0x78
   16680:	mov	r1, r4
   16684:	mov	r0, r6
   16688:	bl	1e270 <__assert_fail@plt+0xb5f0>
   1668c:	cmp	r0, #0
   16690:	beq	16650 <__assert_fail@plt+0x39d0>
   16694:	ldr	r3, [r8]
   16698:	add	r4, r4, #19
   1669c:	tst	r3, #16
   166a0:	bne	167a4 <__assert_fail@plt+0x3b24>
   166a4:	ldr	r3, [r8, #424]	; 0x1a8
   166a8:	mov	r2, r5
   166ac:	ldrb	r3, [r3, #20]
   166b0:	tst	r3, #4
   166b4:	mov	r3, r4
   166b8:	beq	16748 <__assert_fail@plt+0x3ac8>
   166bc:	mov	r1, sl
   166c0:	add	r0, sp, #16
   166c4:	bl	14d9c <__assert_fail@plt+0x211c>
   166c8:	cmp	r0, #0
   166cc:	bne	166fc <__assert_fail@plt+0x3a7c>
   166d0:	cmp	sl, #0
   166d4:	beq	167ec <__assert_fail@plt+0x3b6c>
   166d8:	ldr	r1, [sl, #8]
   166dc:	add	r3, sp, #16
   166e0:	str	r3, [r5]
   166e4:	add	r0, sp, #16
   166e8:	bl	15458 <__assert_fail@plt+0x27d8>
   166ec:	ldr	r3, [r8, #424]	; 0x1a8
   166f0:	ldrb	r3, [r3, #20]
   166f4:	ands	r3, r3, #8
   166f8:	beq	16808 <__assert_fail@plt+0x3b88>
   166fc:	add	r0, sp, #16
   16700:	bl	14574 <__assert_fail@plt+0x18f4>
   16704:	mov	r0, r6
   16708:	bl	14a60 <__assert_fail@plt+0x1de0>
   1670c:	mov	r9, #0
   16710:	subs	r4, r0, #0
   16714:	bne	16660 <__assert_fail@plt+0x39e0>
   16718:	ldr	r3, [r8]
   1671c:	tst	r3, #16
   16720:	bne	1681c <__assert_fail@plt+0x3b9c>
   16724:	mov	r0, r6
   16728:	bl	12c50 <closedir@plt>
   1672c:	ldr	r2, [sp, #300]	; 0x12c
   16730:	ldr	r3, [fp]
   16734:	mov	r0, r9
   16738:	cmp	r2, r3
   1673c:	bne	168a4 <__assert_fail@plt+0x3c24>
   16740:	add	sp, sp, #308	; 0x134
   16744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16748:	mov	r1, r5
   1674c:	add	r0, sp, #16
   16750:	bl	14d9c <__assert_fail@plt+0x211c>
   16754:	cmp	r9, #0
   16758:	mov	r4, r0
   1675c:	beq	16774 <__assert_fail@plt+0x3af4>
   16760:	cmp	sl, #0
   16764:	moveq	r1, sl
   16768:	ldrne	r1, [sl, #8]
   1676c:	mov	r0, r5
   16770:	bl	15458 <__assert_fail@plt+0x27d8>
   16774:	cmp	r4, #0
   16778:	bne	166fc <__assert_fail@plt+0x3a7c>
   1677c:	ldr	r3, [r8, #424]	; 0x1a8
   16780:	ldrb	r3, [r3, #20]
   16784:	tst	r3, #8
   16788:	bne	166fc <__assert_fail@plt+0x3a7c>
   1678c:	mov	r3, r4
   16790:	mov	r2, r4
   16794:	mov	r1, r5
   16798:	add	r0, sp, #16
   1679c:	bl	1658c <__assert_fail@plt+0x390c>
   167a0:	b	166fc <__assert_fail@plt+0x3a7c>
   167a4:	ldr	r3, [pc, #284]	; 168c8 <__assert_fail@plt+0x3c48>
   167a8:	ldr	r3, [r3]
   167ac:	str	r3, [sp, #12]
   167b0:	bl	128fc <getpid@plt>
   167b4:	ldr	r2, [pc, #272]	; 168cc <__assert_fail@plt+0x3c4c>
   167b8:	mov	r1, #1
   167bc:	str	r2, [sp, #4]
   167c0:	ldr	r2, [pc, #264]	; 168d0 <__assert_fail@plt+0x3c50>
   167c4:	str	r2, [sp]
   167c8:	ldr	r2, [pc, #260]	; 168d4 <__assert_fail@plt+0x3c54>
   167cc:	mov	r3, r0
   167d0:	ldr	r0, [sp, #12]
   167d4:	bl	12ab8 <__fprintf_chk@plt>
   167d8:	mov	r2, r4
   167dc:	ldr	r1, [pc, #244]	; 168d8 <__assert_fail@plt+0x3c58>
   167e0:	mov	r0, r5
   167e4:	bl	143f0 <__assert_fail@plt+0x1770>
   167e8:	b	166a4 <__assert_fail@plt+0x3a24>
   167ec:	ldr	r3, [sp, #260]	; 0x104
   167f0:	cmp	r3, #0
   167f4:	addeq	r3, sp, #16
   167f8:	streq	r3, [r5]
   167fc:	moveq	r1, sl
   16800:	beq	166e4 <__assert_fail@plt+0x3a64>
   16804:	b	166fc <__assert_fail@plt+0x3a7c>
   16808:	mov	r2, r3
   1680c:	add	r1, sp, #16
   16810:	mov	r0, r5
   16814:	bl	1658c <__assert_fail@plt+0x390c>
   16818:	b	166fc <__assert_fail@plt+0x3a7c>
   1681c:	ldr	r3, [pc, #164]	; 168c8 <__assert_fail@plt+0x3c48>
   16820:	ldr	r4, [r3]
   16824:	bl	128fc <getpid@plt>
   16828:	ldr	r2, [pc, #156]	; 168cc <__assert_fail@plt+0x3c4c>
   1682c:	ldr	r3, [pc, #156]	; 168d0 <__assert_fail@plt+0x3c50>
   16830:	str	r2, [sp, #4]
   16834:	str	r3, [sp]
   16838:	ldr	r2, [pc, #148]	; 168d4 <__assert_fail@plt+0x3c54>
   1683c:	mov	r1, #1
   16840:	mov	r3, r0
   16844:	mov	r0, r4
   16848:	bl	12ab8 <__fprintf_chk@plt>
   1684c:	mov	r0, r5
   16850:	ldr	r1, [pc, #132]	; 168dc <__assert_fail@plt+0x3c5c>
   16854:	bl	143f0 <__assert_fail@plt+0x1770>
   16858:	b	16724 <__assert_fail@plt+0x3aa4>
   1685c:	ldr	r3, [pc, #100]	; 168c8 <__assert_fail@plt+0x3c48>
   16860:	ldr	r4, [r3]
   16864:	bl	128fc <getpid@plt>
   16868:	ldr	r2, [pc, #92]	; 168cc <__assert_fail@plt+0x3c4c>
   1686c:	ldr	r3, [pc, #92]	; 168d0 <__assert_fail@plt+0x3c50>
   16870:	str	r2, [sp, #4]
   16874:	str	r3, [sp]
   16878:	ldr	r2, [pc, #84]	; 168d4 <__assert_fail@plt+0x3c54>
   1687c:	mov	r1, #1
   16880:	mov	r3, r0
   16884:	mov	r0, r4
   16888:	bl	12ab8 <__fprintf_chk@plt>
   1688c:	ldr	r1, [pc, #76]	; 168e0 <__assert_fail@plt+0x3c60>
   16890:	mov	r0, r5
   16894:	bl	143f0 <__assert_fail@plt+0x1770>
   16898:	b	16638 <__assert_fail@plt+0x39b8>
   1689c:	mvn	r9, #0
   168a0:	b	1672c <__assert_fail@plt+0x3aac>
   168a4:	bl	126e0 <__stack_chk_fail@plt>
   168a8:	ldr	r1, [pc, #52]	; 168e4 <__assert_fail@plt+0x3c64>
   168ac:	mov	r2, #5
   168b0:	bl	126c8 <dcgettext@plt>
   168b4:	mov	r1, r0
   168b8:	mov	r0, #1
   168bc:	bl	12728 <err@plt>
   168c0:	andeq	r3, r3, r8, lsr #24
   168c4:	andeq	r4, r3, r0, lsr r0
   168c8:	andeq	r4, r3, r0, lsr #32
   168cc:	andeq	r1, r2, r4, ror #9
   168d0:	andeq	r1, r2, r8, ror #9
   168d4:	ldrdeq	r1, [r2], -r4
   168d8:	andeq	r1, r2, r4, ror #21
   168dc:	strdeq	r1, [r2], -r4
   168e0:	muleq	r2, r8, sl
   168e4:			; <UNDEFINED> instruction: 0x00021ab8
   168e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168ec:	sub	sp, sp, #300	; 0x12c
   168f0:	ldr	r8, [pc, #740]	; 16bdc <__assert_fail@plt+0x3f5c>
   168f4:	ldr	r7, [pc, #740]	; 16be0 <__assert_fail@plt+0x3f60>
   168f8:	mov	r6, r0
   168fc:	ldr	r3, [r8]
   16900:	mov	r2, #280	; 0x118
   16904:	add	r0, sp, #8
   16908:	mov	r1, #0
   1690c:	str	r3, [sp, #292]	; 0x124
   16910:	bl	12a04 <memset@plt>
   16914:	ldr	r3, [r7, #424]	; 0x1a8
   16918:	ldrb	r3, [r3, #20]
   1691c:	tst	r3, #8
   16920:	bne	16a84 <__assert_fail@plt+0x3e04>
   16924:	ldr	r2, [r7]
   16928:	tst	r2, #16
   1692c:	bne	16ab4 <__assert_fail@plt+0x3e34>
   16930:	tst	r3, #4
   16934:	bne	16aa0 <__assert_fail@plt+0x3e20>
   16938:	ldr	r3, [r6, #244]	; 0xf4
   1693c:	cmp	r3, #0
   16940:	beq	16a84 <__assert_fail@plt+0x3e04>
   16944:	ldr	r9, [pc, #664]	; 16be4 <__assert_fail@plt+0x3f64>
   16948:	mov	r1, r9
   1694c:	ldr	r0, [r6, #132]	; 0x84
   16950:	bl	1c178 <__assert_fail@plt+0x94f8>
   16954:	subs	r5, r0, #0
   16958:	beq	16a84 <__assert_fail@plt+0x3e04>
   1695c:	ldr	r3, [r7]
   16960:	tst	r3, #16
   16964:	bne	16b90 <__assert_fail@plt+0x3f10>
   16968:	ldr	sl, [pc, #632]	; 16be8 <__assert_fail@plt+0x3f68>
   1696c:	b	169b4 <__assert_fail@plt+0x3d34>
   16970:	add	r2, sp, #8
   16974:	mov	r1, r4
   16978:	mov	r0, r5
   1697c:	bl	1538c <__assert_fail@plt+0x270c>
   16980:	cmp	r0, #0
   16984:	bne	169ac <__assert_fail@plt+0x3d2c>
   16988:	ldr	r3, [r7]
   1698c:	add	r4, r4, #19
   16990:	tst	r3, #16
   16994:	bne	16b08 <__assert_fail@plt+0x3e88>
   16998:	mov	r3, r4
   1699c:	mov	r2, #1
   169a0:	mov	r1, r6
   169a4:	add	r0, sp, #8
   169a8:	bl	1658c <__assert_fail@plt+0x390c>
   169ac:	add	r0, sp, #8
   169b0:	bl	14574 <__assert_fail@plt+0x18f4>
   169b4:	mov	r0, r5
   169b8:	bl	14a60 <__assert_fail@plt+0x1de0>
   169bc:	subs	r4, r0, #0
   169c0:	beq	16a2c <__assert_fail@plt+0x3dac>
   169c4:	mov	r2, #0
   169c8:	mov	r1, r4
   169cc:	mov	r0, r5
   169d0:	bl	1e270 <__assert_fail@plt+0xb5f0>
   169d4:	subs	r2, r0, #0
   169d8:	bne	16970 <__assert_fail@plt+0x3cf0>
   169dc:	add	r4, r4, #19
   169e0:	mov	r3, r4
   169e4:	mov	r1, r6
   169e8:	add	r0, sp, #8
   169ec:	bl	14d9c <__assert_fail@plt+0x211c>
   169f0:	cmp	r0, #0
   169f4:	bne	169ac <__assert_fail@plt+0x3d2c>
   169f8:	ldr	r3, [r7]
   169fc:	tst	r3, #16
   16a00:	bne	16b4c <__assert_fail@plt+0x3ecc>
   16a04:	ldr	r2, [r7, #424]	; 0x1a8
   16a08:	mov	r3, #0
   16a0c:	mov	r1, r6
   16a10:	ldrb	r2, [r2, #20]
   16a14:	add	r0, sp, #8
   16a18:	lsr	r2, r2, #2
   16a1c:	eor	r2, r2, #1
   16a20:	and	r2, r2, #1
   16a24:	bl	1658c <__assert_fail@plt+0x390c>
   16a28:	b	169ac <__assert_fail@plt+0x3d2c>
   16a2c:	mov	r0, r5
   16a30:	bl	12c50 <closedir@plt>
   16a34:	ldr	r3, [r7]
   16a38:	tst	r3, #16
   16a3c:	beq	16a84 <__assert_fail@plt+0x3e04>
   16a40:	ldr	r3, [pc, #416]	; 16be8 <__assert_fail@plt+0x3f68>
   16a44:	ldr	r4, [r3]
   16a48:	bl	128fc <getpid@plt>
   16a4c:	ldr	r2, [pc, #408]	; 16bec <__assert_fail@plt+0x3f6c>
   16a50:	ldr	r3, [pc, #408]	; 16bf0 <__assert_fail@plt+0x3f70>
   16a54:	str	r2, [sp, #4]
   16a58:	str	r3, [sp]
   16a5c:	ldr	r2, [pc, #400]	; 16bf4 <__assert_fail@plt+0x3f74>
   16a60:	mov	r1, #1
   16a64:	mov	r3, r0
   16a68:	mov	r0, r4
   16a6c:	bl	12ab8 <__fprintf_chk@plt>
   16a70:	mov	r3, r9
   16a74:	ldr	r2, [r6, #120]	; 0x78
   16a78:	mov	r0, r6
   16a7c:	ldr	r1, [pc, #372]	; 16bf8 <__assert_fail@plt+0x3f78>
   16a80:	bl	143f0 <__assert_fail@plt+0x1770>
   16a84:	ldr	r2, [sp, #292]	; 0x124
   16a88:	ldr	r3, [r8]
   16a8c:	mov	r0, #0
   16a90:	cmp	r2, r3
   16a94:	bne	16bd8 <__assert_fail@plt+0x3f58>
   16a98:	add	sp, sp, #300	; 0x12c
   16a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa0:	ldr	r3, [r6, #248]	; 0xf8
   16aa4:	cmp	r3, #0
   16aa8:	beq	16a84 <__assert_fail@plt+0x3e04>
   16aac:	ldr	r9, [pc, #328]	; 16bfc <__assert_fail@plt+0x3f7c>
   16ab0:	b	16948 <__assert_fail@plt+0x3cc8>
   16ab4:	ldr	r3, [pc, #300]	; 16be8 <__assert_fail@plt+0x3f68>
   16ab8:	ldr	r4, [r3]
   16abc:	bl	128fc <getpid@plt>
   16ac0:	ldr	r2, [pc, #292]	; 16bec <__assert_fail@plt+0x3f6c>
   16ac4:	ldr	r3, [pc, #292]	; 16bf0 <__assert_fail@plt+0x3f70>
   16ac8:	str	r2, [sp, #4]
   16acc:	str	r3, [sp]
   16ad0:	ldr	r2, [pc, #284]	; 16bf4 <__assert_fail@plt+0x3f74>
   16ad4:	mov	r1, #1
   16ad8:	mov	r3, r0
   16adc:	mov	r0, r4
   16ae0:	bl	12ab8 <__fprintf_chk@plt>
   16ae4:	ldr	r2, [r6, #120]	; 0x78
   16ae8:	ldr	r1, [pc, #272]	; 16c00 <__assert_fail@plt+0x3f80>
   16aec:	mov	r0, r6
   16af0:	bl	143f0 <__assert_fail@plt+0x1770>
   16af4:	ldr	r3, [r7, #424]	; 0x1a8
   16af8:	ldrb	r3, [r3, #20]
   16afc:	tst	r3, #4
   16b00:	beq	16938 <__assert_fail@plt+0x3cb8>
   16b04:	b	16aa0 <__assert_fail@plt+0x3e20>
   16b08:	ldr	fp, [sl]
   16b0c:	bl	128fc <getpid@plt>
   16b10:	ldr	r3, [pc, #212]	; 16bec <__assert_fail@plt+0x3f6c>
   16b14:	ldr	r2, [pc, #216]	; 16bf4 <__assert_fail@plt+0x3f74>
   16b18:	str	r3, [sp, #4]
   16b1c:	ldr	r3, [pc, #204]	; 16bf0 <__assert_fail@plt+0x3f70>
   16b20:	mov	r1, #1
   16b24:	str	r3, [sp]
   16b28:	mov	r3, r0
   16b2c:	mov	r0, fp
   16b30:	bl	12ab8 <__fprintf_chk@plt>
   16b34:	mov	r3, r4
   16b38:	ldr	r2, [r6, #120]	; 0x78
   16b3c:	ldr	r1, [pc, #192]	; 16c04 <__assert_fail@plt+0x3f84>
   16b40:	mov	r0, r6
   16b44:	bl	143f0 <__assert_fail@plt+0x1770>
   16b48:	b	16998 <__assert_fail@plt+0x3d18>
   16b4c:	ldr	fp, [sl]
   16b50:	bl	128fc <getpid@plt>
   16b54:	ldr	r3, [pc, #144]	; 16bec <__assert_fail@plt+0x3f6c>
   16b58:	ldr	r2, [pc, #148]	; 16bf4 <__assert_fail@plt+0x3f74>
   16b5c:	str	r3, [sp, #4]
   16b60:	ldr	r3, [pc, #136]	; 16bf0 <__assert_fail@plt+0x3f70>
   16b64:	mov	r1, #1
   16b68:	str	r3, [sp]
   16b6c:	mov	r3, r0
   16b70:	mov	r0, fp
   16b74:	bl	12ab8 <__fprintf_chk@plt>
   16b78:	mov	r3, r4
   16b7c:	ldr	r2, [r6, #120]	; 0x78
   16b80:	ldr	r1, [pc, #128]	; 16c08 <__assert_fail@plt+0x3f88>
   16b84:	mov	r0, r6
   16b88:	bl	143f0 <__assert_fail@plt+0x1770>
   16b8c:	b	16a04 <__assert_fail@plt+0x3d84>
   16b90:	ldr	r3, [pc, #80]	; 16be8 <__assert_fail@plt+0x3f68>
   16b94:	ldr	r4, [r3]
   16b98:	bl	128fc <getpid@plt>
   16b9c:	ldr	r2, [pc, #72]	; 16bec <__assert_fail@plt+0x3f6c>
   16ba0:	ldr	r3, [pc, #72]	; 16bf0 <__assert_fail@plt+0x3f70>
   16ba4:	str	r2, [sp, #4]
   16ba8:	str	r3, [sp]
   16bac:	ldr	r2, [pc, #64]	; 16bf4 <__assert_fail@plt+0x3f74>
   16bb0:	mov	r1, #1
   16bb4:	mov	r3, r0
   16bb8:	mov	r0, r4
   16bbc:	bl	12ab8 <__fprintf_chk@plt>
   16bc0:	mov	r3, r9
   16bc4:	ldr	r2, [r6, #120]	; 0x78
   16bc8:	ldr	r1, [pc, #60]	; 16c0c <__assert_fail@plt+0x3f8c>
   16bcc:	mov	r0, r6
   16bd0:	bl	143f0 <__assert_fail@plt+0x1770>
   16bd4:	b	16968 <__assert_fail@plt+0x3ce8>
   16bd8:	bl	126e0 <__stack_chk_fail@plt>
   16bdc:	andeq	r3, r3, r8, lsr #24
   16be0:	andeq	r4, r3, r0, lsr r0
   16be4:	andeq	r1, r2, r0, lsl r7
   16be8:	andeq	r4, r3, r0, lsr #32
   16bec:	andeq	r1, r2, r4, ror #9
   16bf0:	andeq	r1, r2, r8, ror #9
   16bf4:	ldrdeq	r1, [r2], -r4
   16bf8:	muleq	r2, ip, fp
   16bfc:	andeq	r1, r2, r8, lsl r7
   16c00:	andeq	r1, r2, ip, lsl fp
   16c04:	andeq	r1, r2, r8, asr fp
   16c08:	andeq	r1, r2, r8, ror fp
   16c0c:	andeq	r1, r2, r4, lsr fp
   16c10:	push	{r4, r5, r6, r7, r8, r9, lr}
   16c14:	sub	sp, sp, #4736	; 0x1280
   16c18:	ldr	r6, [pc, #732]	; 16efc <__assert_fail@plt+0x427c>
   16c1c:	sub	sp, sp, #52	; 0x34
   16c20:	add	ip, sp, #4736	; 0x1280
   16c24:	ldr	r3, [r6]
   16c28:	add	ip, ip, #44	; 0x2c
   16c2c:	mov	r8, r0
   16c30:	mov	r2, #280	; 0x118
   16c34:	mov	r1, #0
   16c38:	add	r0, sp, #120	; 0x78
   16c3c:	str	r3, [ip]
   16c40:	mov	r4, #0
   16c44:	bl	12a04 <memset@plt>
   16c48:	mov	r5, #0
   16c4c:	mov	r2, #280	; 0x118
   16c50:	mov	r1, #0
   16c54:	add	r0, sp, #400	; 0x190
   16c58:	bl	12a04 <memset@plt>
   16c5c:	add	r2, sp, #16
   16c60:	mov	r1, r8
   16c64:	mov	r0, #3
   16c68:	strd	r4, [sp, #8]
   16c6c:	bl	12bfc <__xstat64@plt>
   16c70:	subs	r4, r0, #0
   16c74:	bne	16e3c <__assert_fail@plt+0x41bc>
   16c78:	ldr	r3, [sp, #32]
   16c7c:	and	r3, r3, #61440	; 0xf000
   16c80:	cmp	r3, #24576	; 0x6000
   16c84:	bne	16e3c <__assert_fail@plt+0x41bc>
   16c88:	add	r5, sp, #16
   16c8c:	add	r2, sp, #680	; 0x2a8
   16c90:	ldrd	r0, [r5, #32]
   16c94:	ldr	r3, [pc, #612]	; 16f00 <__assert_fail@plt+0x4280>
   16c98:	bl	1f950 <__assert_fail@plt+0xccd0>
   16c9c:	subs	r9, r0, #0
   16ca0:	beq	16e6c <__assert_fail@plt+0x41ec>
   16ca4:	bl	126d4 <strdup@plt>
   16ca8:	subs	r7, r0, #0
   16cac:	beq	16ef4 <__assert_fail@plt+0x4274>
   16cb0:	mov	r2, #3
   16cb4:	ldr	r1, [pc, #584]	; 16f04 <__assert_fail@plt+0x4284>
   16cb8:	bl	12c14 <strncmp@plt>
   16cbc:	cmp	r0, #0
   16cc0:	beq	16d78 <__assert_fail@plt+0x40f8>
   16cc4:	add	r3, sp, #8
   16cc8:	str	r3, [sp]
   16ccc:	add	r2, sp, #680	; 0x2a8
   16cd0:	ldr	r3, [pc, #552]	; 16f00 <__assert_fail@plt+0x4280>
   16cd4:	ldrd	r0, [r5, #32]
   16cd8:	bl	12704 <blkid_devno_to_wholedisk@plt>
   16cdc:	cmp	r0, #0
   16ce0:	bne	16ea8 <__assert_fail@plt+0x4228>
   16ce4:	ldrd	r0, [r5, #32]
   16ce8:	ldrd	r2, [sp, #8]
   16cec:	cmp	r1, r3
   16cf0:	cmpeq	r0, r2
   16cf4:	bne	16db0 <__assert_fail@plt+0x4130>
   16cf8:	add	r5, sp, #400	; 0x190
   16cfc:	mov	r0, r5
   16d00:	mov	r3, r7
   16d04:	mov	r2, r4
   16d08:	mov	r1, r4
   16d0c:	bl	14d9c <__assert_fail@plt+0x211c>
   16d10:	cmp	r0, #0
   16d14:	bne	16e64 <__assert_fail@plt+0x41e4>
   16d18:	ldr	r2, [pc, #488]	; 16f08 <__assert_fail@plt+0x4288>
   16d1c:	mov	r3, #0
   16d20:	mov	r1, r3
   16d24:	ldr	r2, [r2, #424]	; 0x1a8
   16d28:	mov	r0, r5
   16d2c:	ldrb	r2, [r2, #20]
   16d30:	lsr	r2, r2, #2
   16d34:	eor	r2, r2, #1
   16d38:	and	r2, r2, #1
   16d3c:	bl	1658c <__assert_fail@plt+0x390c>
   16d40:	mov	r0, r7
   16d44:	bl	125d8 <free@plt>
   16d48:	mov	r0, r5
   16d4c:	bl	14574 <__assert_fail@plt+0x18f4>
   16d50:	add	r3, sp, #4736	; 0x1280
   16d54:	add	r3, r3, #44	; 0x2c
   16d58:	ldr	r2, [r3]
   16d5c:	ldr	r3, [r6]
   16d60:	mov	r0, r4
   16d64:	cmp	r2, r3
   16d68:	bne	16ef0 <__assert_fail@plt+0x4270>
   16d6c:	add	sp, sp, #4736	; 0x1280
   16d70:	add	sp, sp, #52	; 0x34
   16d74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d78:	add	r5, sp, #400	; 0x190
   16d7c:	mov	r0, r5
   16d80:	mov	r3, r7
   16d84:	mov	r2, r4
   16d88:	mov	r1, r4
   16d8c:	bl	14d9c <__assert_fail@plt+0x211c>
   16d90:	cmp	r0, #0
   16d94:	beq	16d18 <__assert_fail@plt+0x4098>
   16d98:	mov	r0, r7
   16d9c:	bl	125d8 <free@plt>
   16da0:	mov	r0, r5
   16da4:	bl	14574 <__assert_fail@plt+0x18f4>
   16da8:	mvn	r4, #21
   16dac:	b	16d50 <__assert_fail@plt+0x40d0>
   16db0:	add	r3, sp, #680	; 0x2a8
   16db4:	add	r0, sp, #120	; 0x78
   16db8:	mov	r2, r4
   16dbc:	mov	r1, r4
   16dc0:	bl	14d9c <__assert_fail@plt+0x211c>
   16dc4:	cmp	r0, #0
   16dc8:	bne	16e90 <__assert_fail@plt+0x4210>
   16dcc:	add	r2, sp, #120	; 0x78
   16dd0:	add	r5, sp, #400	; 0x190
   16dd4:	mov	r0, r5
   16dd8:	mov	r3, r7
   16ddc:	mov	r1, r2
   16de0:	bl	14d9c <__assert_fail@plt+0x211c>
   16de4:	subs	r4, r0, #0
   16de8:	bne	16ed8 <__assert_fail@plt+0x4258>
   16dec:	ldr	r3, [pc, #276]	; 16f08 <__assert_fail@plt+0x4288>
   16df0:	ldr	r3, [r3, #424]	; 0x1a8
   16df4:	ldrb	r3, [r3, #20]
   16df8:	tst	r3, #4
   16dfc:	movne	r2, #1
   16e00:	ldrne	r3, [sp, #520]	; 0x208
   16e04:	movne	r1, r5
   16e08:	addne	r0, sp, #120	; 0x78
   16e0c:	moveq	r3, #0
   16e10:	moveq	r2, #1
   16e14:	addeq	r1, sp, #120	; 0x78
   16e18:	moveq	r0, r5
   16e1c:	bl	1658c <__assert_fail@plt+0x390c>
   16e20:	mov	r0, r7
   16e24:	bl	125d8 <free@plt>
   16e28:	mov	r0, r5
   16e2c:	bl	14574 <__assert_fail@plt+0x18f4>
   16e30:	add	r0, sp, #120	; 0x78
   16e34:	bl	14574 <__assert_fail@plt+0x18f4>
   16e38:	b	16d50 <__assert_fail@plt+0x40d0>
   16e3c:	mov	r2, #5
   16e40:	ldr	r1, [pc, #196]	; 16f0c <__assert_fail@plt+0x428c>
   16e44:	mov	r0, #0
   16e48:	bl	126c8 <dcgettext@plt>
   16e4c:	mov	r1, r8
   16e50:	bl	1295c <warnx@plt>
   16e54:	add	r0, sp, #400	; 0x190
   16e58:	bl	14574 <__assert_fail@plt+0x18f4>
   16e5c:	mvn	r4, #21
   16e60:	b	16d50 <__assert_fail@plt+0x40d0>
   16e64:	mvn	r4, #21
   16e68:	b	16d40 <__assert_fail@plt+0x40c0>
   16e6c:	mov	r2, #5
   16e70:	ldr	r1, [pc, #152]	; 16f10 <__assert_fail@plt+0x4290>
   16e74:	bl	126c8 <dcgettext@plt>
   16e78:	mov	r1, r8
   16e7c:	bl	12b48 <warn@plt>
   16e80:	add	r0, sp, #400	; 0x190
   16e84:	bl	14574 <__assert_fail@plt+0x18f4>
   16e88:	mvn	r4, #21
   16e8c:	b	16d50 <__assert_fail@plt+0x40d0>
   16e90:	mov	r0, r7
   16e94:	bl	125d8 <free@plt>
   16e98:	add	r0, sp, #400	; 0x190
   16e9c:	bl	14574 <__assert_fail@plt+0x18f4>
   16ea0:	mvn	r4, #21
   16ea4:	b	16e30 <__assert_fail@plt+0x41b0>
   16ea8:	mov	r2, #5
   16eac:	mov	r0, r4
   16eb0:	ldr	r1, [pc, #92]	; 16f14 <__assert_fail@plt+0x4294>
   16eb4:	bl	126c8 <dcgettext@plt>
   16eb8:	mov	r1, r8
   16ebc:	bl	12b48 <warn@plt>
   16ec0:	mov	r0, r7
   16ec4:	bl	125d8 <free@plt>
   16ec8:	add	r0, sp, #400	; 0x190
   16ecc:	bl	14574 <__assert_fail@plt+0x18f4>
   16ed0:	mvn	r4, #21
   16ed4:	b	16d50 <__assert_fail@plt+0x40d0>
   16ed8:	mov	r0, r7
   16edc:	bl	125d8 <free@plt>
   16ee0:	mov	r0, r5
   16ee4:	bl	14574 <__assert_fail@plt+0x18f4>
   16ee8:	mvn	r4, #21
   16eec:	b	16e30 <__assert_fail@plt+0x41b0>
   16ef0:	bl	126e0 <__stack_chk_fail@plt>
   16ef4:	mov	r0, r9
   16ef8:	bl	14754 <__assert_fail@plt+0x1ad4>
   16efc:	andeq	r3, r3, r8, lsr #24
   16f00:	andeq	r1, r0, r1
   16f04:	ldrdeq	r1, [r2], -r0
   16f08:	andeq	r4, r3, r0, lsr r0
   16f0c:			; <UNDEFINED> instruction: 0x00021bbc
   16f10:	ldrdeq	r1, [r2], -r4
   16f14:	strdeq	r1, [r2], -r4
   16f18:	push	{r4, r5, r6, lr}
   16f1c:	subs	r4, r1, #0
   16f20:	beq	16f44 <__assert_fail@plt+0x42c4>
   16f24:	mov	r5, r2
   16f28:	ldr	r1, [pc, #28]	; 16f4c <__assert_fail@plt+0x42cc>
   16f2c:	mov	r2, #5
   16f30:	mov	r0, #0
   16f34:	bl	126c8 <dcgettext@plt>
   16f38:	mov	r2, r5
   16f3c:	mov	r1, r4
   16f40:	bl	1295c <warnx@plt>
   16f44:	mov	r0, #1
   16f48:	pop	{r4, r5, r6, pc}
   16f4c:	andeq	r2, r2, r0, lsl #24
   16f50:	push	{r1, r2, r3}
   16f54:	subs	r3, r0, #0
   16f58:	push	{r4, r5, lr}
   16f5c:	sub	sp, sp, #8
   16f60:	ldr	r5, [pc, #128]	; 16fe8 <__assert_fail@plt+0x4368>
   16f64:	ldreq	r4, [pc, #128]	; 16fec <__assert_fail@plt+0x436c>
   16f68:	ldr	r2, [r5]
   16f6c:	str	r2, [sp, #4]
   16f70:	beq	16f88 <__assert_fail@plt+0x4308>
   16f74:	ldr	r2, [pc, #116]	; 16ff0 <__assert_fail@plt+0x4370>
   16f78:	ldr	r4, [pc, #108]	; 16fec <__assert_fail@plt+0x436c>
   16f7c:	ldr	r2, [r2]
   16f80:	tst	r2, #16777216	; 0x1000000
   16f84:	beq	16fd0 <__assert_fail@plt+0x4350>
   16f88:	add	ip, sp, #24
   16f8c:	mov	r3, ip
   16f90:	ldr	r2, [pc, #92]	; 16ff4 <__assert_fail@plt+0x4374>
   16f94:	mov	r1, #1
   16f98:	ldr	r0, [r4]
   16f9c:	str	ip, [sp]
   16fa0:	bl	12890 <__vfprintf_chk@plt>
   16fa4:	ldr	r1, [r4]
   16fa8:	mov	r0, #10
   16fac:	bl	12b60 <fputc@plt>
   16fb0:	ldr	r2, [sp, #4]
   16fb4:	ldr	r3, [r5]
   16fb8:	cmp	r2, r3
   16fbc:	bne	16fe4 <__assert_fail@plt+0x4364>
   16fc0:	add	sp, sp, #8
   16fc4:	pop	{r4, r5, lr}
   16fc8:	add	sp, sp, #12
   16fcc:	bx	lr
   16fd0:	ldr	r2, [pc, #32]	; 16ff8 <__assert_fail@plt+0x4378>
   16fd4:	ldr	r0, [r4]
   16fd8:	mov	r1, #1
   16fdc:	bl	12ab8 <__fprintf_chk@plt>
   16fe0:	b	16f88 <__assert_fail@plt+0x4308>
   16fe4:	bl	126e0 <__stack_chk_fail@plt>
   16fe8:	andeq	r3, r3, r8, lsr #24
   16fec:	andeq	r4, r3, r0, lsr #32
   16ff0:	andeq	r4, r3, r0, lsr r0
   16ff4:	andeq	r2, r2, r8, lsr #24
   16ff8:			; <UNDEFINED> instruction: 0x000214b4
   16ffc:	push	{r4, r5, r6, r7, r8, r9, lr}
   17000:	sub	sp, sp, #4096	; 0x1000
   17004:	ldr	r6, [pc, #924]	; 173a8 <__assert_fail@plt+0x4728>
   17008:	sub	sp, sp, #20
   1700c:	add	r2, sp, #4096	; 0x1000
   17010:	ldr	r3, [r6]
   17014:	add	r2, r2, #12
   17018:	subs	r4, r0, #0
   1701c:	str	r3, [r2]
   17020:	beq	17384 <__assert_fail@plt+0x4704>
   17024:	ldr	r3, [r4, #128]	; 0x80
   17028:	cmp	r3, #0
   1702c:	beq	17370 <__assert_fail@plt+0x46f0>
   17030:	ldrb	r3, [r4, #272]	; 0x110
   17034:	tst	r3, #3
   17038:	ldrne	r0, [r4, #140]	; 0x8c
   1703c:	bne	170f0 <__assert_fail@plt+0x4470>
   17040:	ldr	r5, [pc, #868]	; 173ac <__assert_fail@plt+0x472c>
   17044:	ldr	r0, [r5]
   17048:	cmp	r0, #0
   1704c:	beq	17114 <__assert_fail@plt+0x4494>
   17050:	ldr	ip, [r4, #256]	; 0x100
   17054:	ldr	r3, [r4, #252]	; 0xfc
   17058:	ldr	lr, [pc, #848]	; 173b0 <__assert_fail@plt+0x4730>
   1705c:	ldr	r2, [pc, #848]	; 173b4 <__assert_fail@plt+0x4734>
   17060:	and	lr, lr, r3, lsl #8
   17064:	uxtb	r1, ip
   17068:	bic	r3, r3, #4080	; 0xff0
   1706c:	orr	r1, r1, lr
   17070:	and	r2, r2, ip, lsl #12
   17074:	bic	r3, r3, #15
   17078:	mov	r7, #1
   1707c:	orr	r3, r3, ip, lsr #20
   17080:	orr	r2, r2, r1
   17084:	str	r7, [sp]
   17088:	bl	12680 <mnt_table_find_devno@plt>
   1708c:	subs	r8, r0, #0
   17090:	beq	17190 <__assert_fail@plt+0x4510>
   17094:	mov	r0, r8
   17098:	bl	1280c <mnt_fs_get_root@plt>
   1709c:	cmp	r0, #0
   170a0:	beq	170b4 <__assert_fail@plt+0x4434>
   170a4:	ldr	r1, [pc, #780]	; 173b8 <__assert_fail@plt+0x4738>
   170a8:	bl	12524 <strcmp@plt>
   170ac:	cmp	r0, #0
   170b0:	bne	1723c <__assert_fail@plt+0x45bc>
   170b4:	ldr	r3, [pc, #768]	; 173bc <__assert_fail@plt+0x473c>
   170b8:	ldr	r3, [r3]
   170bc:	tst	r3, #8
   170c0:	bne	171f0 <__assert_fail@plt+0x4570>
   170c4:	mov	r0, r8
   170c8:	bl	127f4 <mnt_fs_get_target@plt>
   170cc:	subs	r3, r0, #0
   170d0:	beq	172dc <__assert_fail@plt+0x465c>
   170d4:	bl	126d4 <strdup@plt>
   170d8:	cmp	r0, #0
   170dc:	beq	1739c <__assert_fail@plt+0x471c>
   170e0:	ldrb	r3, [r4, #272]	; 0x110
   170e4:	str	r0, [r4, #140]	; 0x8c
   170e8:	orr	r3, r3, #1
   170ec:	strb	r3, [r4, #272]	; 0x110
   170f0:	add	r3, sp, #4096	; 0x1000
   170f4:	add	r3, r3, #12
   170f8:	ldr	r2, [r3]
   170fc:	ldr	r3, [r6]
   17100:	cmp	r2, r3
   17104:	bne	17398 <__assert_fail@plt+0x4718>
   17108:	add	sp, sp, #4096	; 0x1000
   1710c:	add	sp, sp, #20
   17110:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17114:	bl	12710 <mnt_new_table@plt>
   17118:	cmp	r0, #0
   1711c:	mov	r3, r0
   17120:	str	r0, [r5]
   17124:	beq	170f0 <__assert_fail@plt+0x4470>
   17128:	ldr	r2, [r5, #4]
   1712c:	cmp	r2, #0
   17130:	beq	17350 <__assert_fail@plt+0x46d0>
   17134:	mov	r0, r3
   17138:	ldr	r1, [pc, #640]	; 173c0 <__assert_fail@plt+0x4740>
   1713c:	bl	124b8 <mnt_table_set_parser_errcb@plt>
   17140:	ldrd	r0, [r5]
   17144:	bl	12aa0 <mnt_table_set_cache@plt>
   17148:	ldr	r3, [pc, #628]	; 173c4 <__assert_fail@plt+0x4744>
   1714c:	ldr	r3, [r3]
   17150:	ldr	r1, [r3, #12]
   17154:	cmp	r1, #0
   17158:	beq	17180 <__assert_fail@plt+0x4500>
   1715c:	ldr	r2, [pc, #612]	; 173c8 <__assert_fail@plt+0x4748>
   17160:	mov	r3, #4096	; 0x1000
   17164:	str	r1, [sp, #4]
   17168:	str	r2, [sp]
   1716c:	mov	r1, r3
   17170:	add	r0, sp, #12
   17174:	mov	r2, #1
   17178:	bl	12c5c <__snprintf_chk@plt>
   1717c:	add	r1, sp, #12
   17180:	ldr	r0, [r5]
   17184:	bl	126a4 <mnt_table_parse_mtab@plt>
   17188:	ldr	r0, [r5]
   1718c:	b	17050 <__assert_fail@plt+0x43d0>
   17190:	mov	r2, r7
   17194:	ldr	r1, [r4, #128]	; 0x80
   17198:	ldr	r0, [r5]
   1719c:	bl	12848 <mnt_table_find_srcpath@plt>
   171a0:	subs	r8, r0, #0
   171a4:	bne	17094 <__assert_fail@plt+0x4414>
   171a8:	ldr	r0, [r5, #8]
   171ac:	ldr	r7, [r4, #128]	; 0x80
   171b0:	cmp	r0, #0
   171b4:	beq	172bc <__assert_fail@plt+0x463c>
   171b8:	mov	r1, r7
   171bc:	mov	r2, #1
   171c0:	bl	12848 <mnt_table_find_srcpath@plt>
   171c4:	cmp	r0, #0
   171c8:	beq	172d0 <__assert_fail@plt+0x4650>
   171cc:	ldr	r0, [pc, #504]	; 173cc <__assert_fail@plt+0x474c>
   171d0:	bl	126d4 <strdup@plt>
   171d4:	cmp	r0, #0
   171d8:	beq	1739c <__assert_fail@plt+0x471c>
   171dc:	ldrb	r3, [r4, #272]	; 0x110
   171e0:	str	r0, [r4, #140]	; 0x8c
   171e4:	orr	r3, r3, #2
   171e8:	strb	r3, [r4, #272]	; 0x110
   171ec:	b	170f0 <__assert_fail@plt+0x4470>
   171f0:	ldr	r3, [pc, #472]	; 173d0 <__assert_fail@plt+0x4750>
   171f4:	ldr	r5, [r3]
   171f8:	bl	128fc <getpid@plt>
   171fc:	ldr	r2, [pc, #464]	; 173d4 <__assert_fail@plt+0x4754>
   17200:	ldr	r3, [pc, #464]	; 173d8 <__assert_fail@plt+0x4758>
   17204:	str	r2, [sp, #4]
   17208:	str	r3, [sp]
   1720c:	ldr	r2, [pc, #456]	; 173dc <__assert_fail@plt+0x475c>
   17210:	mov	r1, #1
   17214:	mov	r3, r0
   17218:	mov	r0, r5
   1721c:	bl	12ab8 <__fprintf_chk@plt>
   17220:	mov	r0, r8
   17224:	bl	127f4 <mnt_fs_get_target@plt>
   17228:	ldr	r1, [pc, #432]	; 173e0 <__assert_fail@plt+0x4760>
   1722c:	mov	r2, r0
   17230:	mov	r0, r4
   17234:	bl	16f50 <__assert_fail@plt+0x42d0>
   17238:	b	170c4 <__assert_fail@plt+0x4444>
   1723c:	mov	r0, #1
   17240:	bl	1268c <mnt_new_iter@plt>
   17244:	mov	r2, r8
   17248:	ldr	r9, [pc, #360]	; 173b8 <__assert_fail@plt+0x4738>
   1724c:	mov	r1, r0
   17250:	mov	r7, r0
   17254:	ldr	r0, [r5]
   17258:	bl	129b0 <mnt_table_set_iter@plt>
   1725c:	add	r2, sp, #8
   17260:	mov	r1, r7
   17264:	ldr	r0, [r5]
   17268:	bl	125fc <mnt_table_next_fs@plt>
   1726c:	cmp	r0, #0
   17270:	bne	172b0 <__assert_fail@plt+0x4630>
   17274:	ldr	r0, [sp, #8]
   17278:	bl	1280c <mnt_fs_get_root@plt>
   1727c:	cmp	r0, #0
   17280:	beq	17294 <__assert_fail@plt+0x4614>
   17284:	mov	r1, r9
   17288:	bl	12524 <strcmp@plt>
   1728c:	cmp	r0, #0
   17290:	bne	1725c <__assert_fail@plt+0x45dc>
   17294:	ldr	r2, [r5, #4]
   17298:	ldr	r1, [r4, #128]	; 0x80
   1729c:	ldr	r0, [sp, #8]
   172a0:	bl	12b30 <mnt_fs_match_source@plt>
   172a4:	cmp	r0, #0
   172a8:	beq	1725c <__assert_fail@plt+0x45dc>
   172ac:	ldr	r8, [sp, #8]
   172b0:	mov	r0, r7
   172b4:	bl	12a10 <mnt_free_iter@plt>
   172b8:	b	170b4 <__assert_fail@plt+0x4434>
   172bc:	bl	12710 <mnt_new_table@plt>
   172c0:	cmp	r0, #0
   172c4:	mov	r3, r0
   172c8:	str	r0, [r5, #8]
   172cc:	bne	172e4 <__assert_fail@plt+0x4664>
   172d0:	mov	r0, #0
   172d4:	str	r0, [r4, #140]	; 0x8c
   172d8:	b	170f0 <__assert_fail@plt+0x4470>
   172dc:	mov	r0, r3
   172e0:	b	170e0 <__assert_fail@plt+0x4460>
   172e4:	ldr	r2, [r5, #4]
   172e8:	cmp	r2, #0
   172ec:	beq	17360 <__assert_fail@plt+0x46e0>
   172f0:	mov	r0, r3
   172f4:	ldr	r1, [pc, #196]	; 173c0 <__assert_fail@plt+0x4740>
   172f8:	bl	124b8 <mnt_table_set_parser_errcb@plt>
   172fc:	ldr	r1, [r5, #4]
   17300:	ldr	r0, [r5, #8]
   17304:	bl	12aa0 <mnt_table_set_cache@plt>
   17308:	ldr	r3, [pc, #180]	; 173c4 <__assert_fail@plt+0x4744>
   1730c:	ldr	r3, [r3]
   17310:	ldr	r1, [r3, #12]
   17314:	cmp	r1, #0
   17318:	beq	17340 <__assert_fail@plt+0x46c0>
   1731c:	ldr	r2, [pc, #192]	; 173e4 <__assert_fail@plt+0x4764>
   17320:	mov	r3, #4096	; 0x1000
   17324:	str	r1, [sp, #4]
   17328:	str	r2, [sp]
   1732c:	mov	r1, r3
   17330:	add	r0, sp, #12
   17334:	mov	r2, #1
   17338:	bl	12c5c <__snprintf_chk@plt>
   1733c:	add	r1, sp, #12
   17340:	ldr	r0, [r5, #8]
   17344:	bl	127c4 <mnt_table_parse_swaps@plt>
   17348:	ldr	r0, [r5, #8]
   1734c:	b	171b8 <__assert_fail@plt+0x4538>
   17350:	bl	1298c <mnt_new_cache@plt>
   17354:	ldr	r3, [r5]
   17358:	str	r0, [r5, #4]
   1735c:	b	17134 <__assert_fail@plt+0x44b4>
   17360:	bl	1298c <mnt_new_cache@plt>
   17364:	ldr	r3, [r5, #8]
   17368:	str	r0, [r5, #4]
   1736c:	b	172f0 <__assert_fail@plt+0x4670>
   17370:	ldr	r3, [pc, #112]	; 173e8 <__assert_fail@plt+0x4768>
   17374:	mov	r2, #51	; 0x33
   17378:	ldr	r1, [pc, #108]	; 173ec <__assert_fail@plt+0x476c>
   1737c:	ldr	r0, [pc, #108]	; 173f0 <__assert_fail@plt+0x4770>
   17380:	bl	12c80 <__assert_fail@plt>
   17384:	ldr	r3, [pc, #92]	; 173e8 <__assert_fail@plt+0x4768>
   17388:	mov	r2, #50	; 0x32
   1738c:	ldr	r1, [pc, #88]	; 173ec <__assert_fail@plt+0x476c>
   17390:	ldr	r0, [pc, #92]	; 173f4 <__assert_fail@plt+0x4774>
   17394:	bl	12c80 <__assert_fail@plt>
   17398:	bl	126e0 <__stack_chk_fail@plt>
   1739c:	ldr	r1, [pc, #84]	; 173f8 <__assert_fail@plt+0x4778>
   173a0:	mov	r0, #1
   173a4:	bl	12728 <err@plt>
   173a8:	andeq	r3, r3, r8, lsr #24
   173ac:	andeq	r4, r3, r4, ror #19
   173b0:	andeq	pc, pc, r0, lsl #30
   173b4:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   173b8:	andeq	r3, r2, ip, lsl #5
   173bc:	andeq	r4, r3, r0, lsr r0
   173c0:	andeq	r6, r1, r8, lsl pc
   173c4:	ldrdeq	r4, [r3], -r8
   173c8:	andeq	r2, r2, r4, ror #24
   173cc:	andeq	r2, r2, ip, lsl #25
   173d0:	andeq	r4, r3, r0, lsr #32
   173d4:	andeq	r2, r2, r4, ror r4
   173d8:	andeq	r1, r2, r8, ror #9
   173dc:	ldrdeq	r1, [r2], -r4
   173e0:	andeq	r2, r2, r8, lsr #24
   173e4:	andeq	r2, r2, ip, ror ip
   173e8:	andeq	r2, r2, r4, ror #23
   173ec:	andeq	r2, r2, r8, lsr ip
   173f0:	andeq	r2, r2, r4, asr ip
   173f4:	andeq	r2, r2, r0, asr ip
   173f8:	muleq	r2, r0, r5
   173fc:	mov	r0, #0
   17400:	b	12968 <mnt_init_debug@plt>
   17404:	push	{r4, lr}
   17408:	ldr	r4, [pc, #24]	; 17428 <__assert_fail@plt+0x47a8>
   1740c:	ldr	r0, [r4]
   17410:	bl	1250c <mnt_unref_table@plt>
   17414:	ldr	r0, [r4, #8]
   17418:	bl	1250c <mnt_unref_table@plt>
   1741c:	ldr	r0, [r4, #4]
   17420:	pop	{r4, lr}
   17424:	b	12a1c <mnt_unref_cache@plt>
   17428:	andeq	r4, r3, r4, ror #19
   1742c:	push	{r1, r2, r3}
   17430:	subs	r3, r0, #0
   17434:	push	{r4, r5, r6, lr}
   17438:	sub	sp, sp, #12
   1743c:	ldr	r5, [pc, #132]	; 174c8 <__assert_fail@plt+0x4848>
   17440:	ldr	r6, [sp, #28]
   17444:	ldreq	r4, [pc, #128]	; 174cc <__assert_fail@plt+0x484c>
   17448:	ldr	r2, [r5]
   1744c:	str	r2, [sp, #4]
   17450:	beq	17468 <__assert_fail@plt+0x47e8>
   17454:	ldr	r2, [pc, #116]	; 174d0 <__assert_fail@plt+0x4850>
   17458:	ldr	r4, [pc, #108]	; 174cc <__assert_fail@plt+0x484c>
   1745c:	ldr	r2, [r2]
   17460:	tst	r2, #16777216	; 0x1000000
   17464:	beq	174b0 <__assert_fail@plt+0x4830>
   17468:	add	ip, sp, #32
   1746c:	mov	r2, r6
   17470:	mov	r3, ip
   17474:	mov	r1, #1
   17478:	ldr	r0, [r4]
   1747c:	str	ip, [sp]
   17480:	bl	12890 <__vfprintf_chk@plt>
   17484:	ldr	r1, [r4]
   17488:	mov	r0, #10
   1748c:	bl	12b60 <fputc@plt>
   17490:	ldr	r2, [sp, #4]
   17494:	ldr	r3, [r5]
   17498:	cmp	r2, r3
   1749c:	bne	174c4 <__assert_fail@plt+0x4844>
   174a0:	add	sp, sp, #12
   174a4:	pop	{r4, r5, r6, lr}
   174a8:	add	sp, sp, #12
   174ac:	bx	lr
   174b0:	ldr	r2, [pc, #28]	; 174d4 <__assert_fail@plt+0x4854>
   174b4:	ldr	r0, [r4]
   174b8:	mov	r1, #1
   174bc:	bl	12ab8 <__fprintf_chk@plt>
   174c0:	b	17468 <__assert_fail@plt+0x47e8>
   174c4:	bl	126e0 <__stack_chk_fail@plt>
   174c8:	andeq	r3, r3, r8, lsr #24
   174cc:	andeq	r4, r3, r0, lsr #32
   174d0:	andeq	r4, r3, r0, lsr r0
   174d4:			; <UNDEFINED> instruction: 0x000214b4
   174d8:	push	{r4, lr}
   174dc:	mov	r4, r0
   174e0:	ldr	r0, [r0]
   174e4:	bl	125d8 <free@plt>
   174e8:	ldr	r0, [r4, #4]
   174ec:	bl	125d8 <free@plt>
   174f0:	ldr	r0, [r4, #8]
   174f4:	bl	125d8 <free@plt>
   174f8:	ldr	r0, [r4, #12]
   174fc:	bl	125d8 <free@plt>
   17500:	ldr	r0, [r4, #16]
   17504:	bl	125d8 <free@plt>
   17508:	ldr	r0, [r4, #20]
   1750c:	bl	125d8 <free@plt>
   17510:	ldr	r0, [r4, #24]
   17514:	bl	125d8 <free@plt>
   17518:	ldr	r0, [r4, #28]
   1751c:	bl	125d8 <free@plt>
   17520:	ldr	r0, [r4, #36]	; 0x24
   17524:	bl	125d8 <free@plt>
   17528:	ldr	r0, [r4, #40]	; 0x28
   1752c:	bl	125d8 <free@plt>
   17530:	ldr	r0, [r4, #44]	; 0x2c
   17534:	bl	125d8 <free@plt>
   17538:	mov	r0, r4
   1753c:	pop	{r4, lr}
   17540:	b	125d8 <free@plt>
   17544:	cmp	r0, #0
   17548:	bxeq	lr
   1754c:	b	174d8 <__assert_fail@plt+0x4858>
   17550:	push	{r4, r5, r6, r7, r8, lr}
   17554:	sub	sp, sp, #16
   17558:	ldr	r5, [pc, #1664]	; 17be0 <__assert_fail@plt+0x4f60>
   1755c:	ldrb	r2, [r0, #272]	; 0x110
   17560:	mov	r4, r0
   17564:	ldr	r3, [r5]
   17568:	tst	r2, #4
   1756c:	str	r3, [sp, #12]
   17570:	bne	17614 <__assert_fail@plt+0x4994>
   17574:	ldr	r3, [pc, #1640]	; 17be4 <__assert_fail@plt+0x4f64>
   17578:	ldr	r3, [r3]
   1757c:	ldr	r3, [r3, #12]
   17580:	cmp	r3, #0
   17584:	beq	175bc <__assert_fail@plt+0x493c>
   17588:	ldrb	r3, [r4, #272]	; 0x110
   1758c:	ldr	r6, [r4, #4]
   17590:	orr	r3, r3, #4
   17594:	cmp	r6, #0
   17598:	mov	r0, r6
   1759c:	strb	r3, [r4, #272]	; 0x110
   175a0:	beq	17624 <__assert_fail@plt+0x49a4>
   175a4:	ldr	r2, [sp, #12]
   175a8:	ldr	r3, [r5]
   175ac:	cmp	r2, r3
   175b0:	bne	17bd0 <__assert_fail@plt+0x4f50>
   175b4:	add	sp, sp, #16
   175b8:	pop	{r4, r5, r6, r7, r8, pc}
   175bc:	ldr	r6, [pc, #1572]	; 17be8 <__assert_fail@plt+0x4f68>
   175c0:	ldr	r0, [r6]
   175c4:	cmp	r0, #0
   175c8:	beq	17670 <__assert_fail@plt+0x49f0>
   175cc:	ldr	r2, [r4, #120]	; 0x78
   175d0:	ldr	r1, [pc, #1556]	; 17bec <__assert_fail@plt+0x4f6c>
   175d4:	bl	12af4 <udev_device_new_from_subsystem_sysname@plt>
   175d8:	subs	r6, r0, #0
   175dc:	beq	17588 <__assert_fail@plt+0x4908>
   175e0:	ldr	r0, [r4, #4]
   175e4:	cmp	r0, #0
   175e8:	beq	175f0 <__assert_fail@plt+0x4970>
   175ec:	bl	174d8 <__assert_fail@plt+0x4858>
   175f0:	mov	r1, #48	; 0x30
   175f4:	mov	r0, #1
   175f8:	bl	124dc <calloc@plt>
   175fc:	subs	r7, r0, #0
   17600:	bne	17684 <__assert_fail@plt+0x4a04>
   17604:	mov	r2, #48	; 0x30
   17608:	ldr	r1, [pc, #1504]	; 17bf0 <__assert_fail@plt+0x4f70>
   1760c:	mov	r0, #1
   17610:	bl	12728 <err@plt>
   17614:	ldr	r6, [r0, #4]
   17618:	cmp	r6, #0
   1761c:	mov	r0, r6
   17620:	bne	175a4 <__assert_fail@plt+0x4924>
   17624:	ldrb	r3, [r4, #272]	; 0x110
   17628:	tst	r3, #8
   1762c:	movne	r0, r6
   17630:	bne	175a4 <__assert_fail@plt+0x4924>
   17634:	add	r3, r4, #272	; 0x110
   17638:	ldrd	r2, [r3, #-8]
   1763c:	orrs	r3, r2, r3
   17640:	beq	17650 <__assert_fail@plt+0x49d0>
   17644:	bl	125a8 <getuid@plt>
   17648:	cmp	r0, #0
   1764c:	beq	178d0 <__assert_fail@plt+0x4c50>
   17650:	mov	r7, #0
   17654:	mov	r0, r7
   17658:	bl	12b0c <blkid_free_probe@plt>
   1765c:	ldrb	r3, [r4, #272]	; 0x110
   17660:	ldr	r0, [r4, #4]
   17664:	orr	r3, r3, #8
   17668:	strb	r3, [r4, #272]	; 0x110
   1766c:	b	175a4 <__assert_fail@plt+0x4924>
   17670:	bl	12794 <udev_new@plt>
   17674:	cmp	r0, #0
   17678:	str	r0, [r6]
   1767c:	beq	17588 <__assert_fail@plt+0x4908>
   17680:	b	175cc <__assert_fail@plt+0x494c>
   17684:	str	r7, [r4, #4]
   17688:	ldr	r1, [pc, #1380]	; 17bf4 <__assert_fail@plt+0x4f74>
   1768c:	mov	r0, r6
   17690:	bl	12b9c <udev_device_get_property_value@plt>
   17694:	cmp	r0, #0
   17698:	beq	176c0 <__assert_fail@plt+0x4a40>
   1769c:	bl	126d4 <strdup@plt>
   176a0:	subs	r8, r0, #0
   176a4:	beq	17bd4 <__assert_fail@plt+0x4f54>
   176a8:	str	r8, [r7, #16]
   176ac:	bl	12938 <strlen@plt>
   176b0:	mov	r1, r8
   176b4:	add	r2, r0, #1
   176b8:	mov	r0, r8
   176bc:	bl	18c54 <__assert_fail@plt+0x5fd4>
   176c0:	ldr	r1, [pc, #1328]	; 17bf8 <__assert_fail@plt+0x4f78>
   176c4:	mov	r0, r6
   176c8:	bl	12b9c <udev_device_get_property_value@plt>
   176cc:	cmp	r0, #0
   176d0:	beq	176f8 <__assert_fail@plt+0x4a78>
   176d4:	bl	126d4 <strdup@plt>
   176d8:	subs	r8, r0, #0
   176dc:	beq	17bd4 <__assert_fail@plt+0x4f54>
   176e0:	str	r8, [r7, #4]
   176e4:	bl	12938 <strlen@plt>
   176e8:	mov	r1, r8
   176ec:	add	r2, r0, #1
   176f0:	mov	r0, r8
   176f4:	bl	18c54 <__assert_fail@plt+0x5fd4>
   176f8:	ldr	r1, [pc, #1276]	; 17bfc <__assert_fail@plt+0x4f7c>
   176fc:	mov	r0, r6
   17700:	bl	12b9c <udev_device_get_property_value@plt>
   17704:	cmp	r0, #0
   17708:	beq	1771c <__assert_fail@plt+0x4a9c>
   1770c:	bl	126d4 <strdup@plt>
   17710:	cmp	r0, #0
   17714:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17718:	str	r0, [r7, #8]
   1771c:	ldr	r1, [pc, #1244]	; 17c00 <__assert_fail@plt+0x4f80>
   17720:	mov	r0, r6
   17724:	bl	12b9c <udev_device_get_property_value@plt>
   17728:	cmp	r0, #0
   1772c:	beq	17740 <__assert_fail@plt+0x4ac0>
   17730:	bl	126d4 <strdup@plt>
   17734:	cmp	r0, #0
   17738:	beq	17bd4 <__assert_fail@plt+0x4f54>
   1773c:	str	r0, [r7, #12]
   17740:	ldr	r1, [pc, #1212]	; 17c04 <__assert_fail@plt+0x4f84>
   17744:	mov	r0, r6
   17748:	bl	12b9c <udev_device_get_property_value@plt>
   1774c:	cmp	r0, #0
   17750:	beq	17778 <__assert_fail@plt+0x4af8>
   17754:	bl	126d4 <strdup@plt>
   17758:	subs	r8, r0, #0
   1775c:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17760:	str	r8, [r7, #28]
   17764:	bl	12938 <strlen@plt>
   17768:	mov	r1, r8
   1776c:	add	r2, r0, #1
   17770:	mov	r0, r8
   17774:	bl	18c54 <__assert_fail@plt+0x5fd4>
   17778:	ldr	r1, [pc, #1160]	; 17c08 <__assert_fail@plt+0x4f88>
   1777c:	mov	r0, r6
   17780:	bl	12b9c <udev_device_get_property_value@plt>
   17784:	cmp	r0, #0
   17788:	beq	1779c <__assert_fail@plt+0x4b1c>
   1778c:	bl	126d4 <strdup@plt>
   17790:	cmp	r0, #0
   17794:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17798:	str	r0, [r7]
   1779c:	ldr	r1, [pc, #1128]	; 17c0c <__assert_fail@plt+0x4f8c>
   177a0:	mov	r0, r6
   177a4:	bl	12b9c <udev_device_get_property_value@plt>
   177a8:	cmp	r0, #0
   177ac:	beq	177c0 <__assert_fail@plt+0x4b40>
   177b0:	bl	126d4 <strdup@plt>
   177b4:	cmp	r0, #0
   177b8:	beq	17bd4 <__assert_fail@plt+0x4f54>
   177bc:	str	r0, [r7, #20]
   177c0:	ldr	r1, [pc, #1096]	; 17c10 <__assert_fail@plt+0x4f90>
   177c4:	mov	r0, r6
   177c8:	bl	12b9c <udev_device_get_property_value@plt>
   177cc:	cmp	r0, #0
   177d0:	beq	177e4 <__assert_fail@plt+0x4b64>
   177d4:	bl	126d4 <strdup@plt>
   177d8:	cmp	r0, #0
   177dc:	beq	17bd4 <__assert_fail@plt+0x4f54>
   177e0:	str	r0, [r7, #24]
   177e4:	ldr	r1, [pc, #1064]	; 17c14 <__assert_fail@plt+0x4f94>
   177e8:	mov	r0, r6
   177ec:	bl	12b9c <udev_device_get_property_value@plt>
   177f0:	cmp	r0, #0
   177f4:	beq	17808 <__assert_fail@plt+0x4b88>
   177f8:	bl	126d4 <strdup@plt>
   177fc:	cmp	r0, #0
   17800:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17804:	str	r0, [r7, #32]
   17808:	ldr	r1, [pc, #1032]	; 17c18 <__assert_fail@plt+0x4f98>
   1780c:	mov	r0, r6
   17810:	bl	12b9c <udev_device_get_property_value@plt>
   17814:	cmp	r0, #0
   17818:	beq	17a98 <__assert_fail@plt+0x4e18>
   1781c:	bl	126d4 <strdup@plt>
   17820:	cmp	r0, #0
   17824:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17828:	str	r0, [r7, #36]	; 0x24
   1782c:	ldr	r1, [pc, #1000]	; 17c1c <__assert_fail@plt+0x4f9c>
   17830:	mov	r0, r6
   17834:	bl	12b9c <udev_device_get_property_value@plt>
   17838:	cmp	r0, #0
   1783c:	beq	17850 <__assert_fail@plt+0x4bd0>
   17840:	bl	126d4 <strdup@plt>
   17844:	cmp	r0, #0
   17848:	beq	17bd4 <__assert_fail@plt+0x4f54>
   1784c:	str	r0, [r7, #40]	; 0x28
   17850:	ldr	r1, [pc, #968]	; 17c20 <__assert_fail@plt+0x4fa0>
   17854:	mov	r0, r6
   17858:	bl	12b9c <udev_device_get_property_value@plt>
   1785c:	cmp	r0, #0
   17860:	beq	17874 <__assert_fail@plt+0x4bf4>
   17864:	bl	126d4 <strdup@plt>
   17868:	cmp	r0, #0
   1786c:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17870:	str	r0, [r7, #44]	; 0x2c
   17874:	mov	r0, r6
   17878:	bl	12bd8 <udev_device_unref@plt>
   1787c:	ldr	r3, [pc, #928]	; 17c24 <__assert_fail@plt+0x4fa4>
   17880:	ldr	r3, [r3]
   17884:	tst	r3, #8
   17888:	beq	17588 <__assert_fail@plt+0x4908>
   1788c:	ldr	r3, [pc, #916]	; 17c28 <__assert_fail@plt+0x4fa8>
   17890:	ldr	r6, [r3]
   17894:	bl	128fc <getpid@plt>
   17898:	ldr	r2, [pc, #908]	; 17c2c <__assert_fail@plt+0x4fac>
   1789c:	ldr	r3, [pc, #908]	; 17c30 <__assert_fail@plt+0x4fb0>
   178a0:	str	r2, [sp, #4]
   178a4:	str	r3, [sp]
   178a8:	ldr	r2, [pc, #900]	; 17c34 <__assert_fail@plt+0x4fb4>
   178ac:	mov	r1, #1
   178b0:	mov	r3, r0
   178b4:	mov	r0, r6
   178b8:	bl	12ab8 <__fprintf_chk@plt>
   178bc:	ldr	r2, [r4, #120]	; 0x78
   178c0:	ldr	r1, [pc, #880]	; 17c38 <__assert_fail@plt+0x4fb8>
   178c4:	mov	r0, r4
   178c8:	bl	1742c <__assert_fail@plt+0x47ac>
   178cc:	b	17588 <__assert_fail@plt+0x4908>
   178d0:	ldr	r0, [r4, #128]	; 0x80
   178d4:	bl	1259c <blkid_new_probe_from_filename@plt>
   178d8:	subs	r7, r0, #0
   178dc:	beq	17650 <__assert_fail@plt+0x49d0>
   178e0:	mov	r1, #1
   178e4:	bl	125e4 <blkid_probe_enable_superblocks@plt>
   178e8:	mov	r1, #42	; 0x2a
   178ec:	mov	r0, r7
   178f0:	bl	127dc <blkid_probe_set_superblocks_flags@plt>
   178f4:	mov	r1, #1
   178f8:	mov	r0, r7
   178fc:	bl	12668 <blkid_probe_enable_partitions@plt>
   17900:	mov	r1, #4
   17904:	mov	r0, r7
   17908:	bl	12998 <blkid_probe_set_partitions_flags@plt>
   1790c:	mov	r0, r7
   17910:	bl	126b0 <blkid_do_safeprobe@plt>
   17914:	cmp	r0, #0
   17918:	bne	17654 <__assert_fail@plt+0x49d4>
   1791c:	ldr	r0, [r4, #4]
   17920:	str	r6, [sp, #8]
   17924:	cmp	r0, #0
   17928:	beq	17930 <__assert_fail@plt+0x4cb0>
   1792c:	bl	174d8 <__assert_fail@plt+0x4858>
   17930:	mov	r1, #48	; 0x30
   17934:	mov	r0, #1
   17938:	bl	124dc <calloc@plt>
   1793c:	subs	r6, r0, #0
   17940:	beq	17604 <__assert_fail@plt+0x4984>
   17944:	str	r6, [r4, #4]
   17948:	add	r2, sp, #8
   1794c:	mov	r3, #0
   17950:	ldr	r1, [pc, #740]	; 17c3c <__assert_fail@plt+0x4fbc>
   17954:	mov	r0, r7
   17958:	bl	1256c <blkid_probe_lookup_value@plt>
   1795c:	cmp	r0, #0
   17960:	beq	17bb0 <__assert_fail@plt+0x4f30>
   17964:	mov	r3, #0
   17968:	add	r2, sp, #8
   1796c:	ldr	r1, [pc, #716]	; 17c40 <__assert_fail@plt+0x4fc0>
   17970:	mov	r0, r7
   17974:	bl	1256c <blkid_probe_lookup_value@plt>
   17978:	cmp	r0, #0
   1797c:	beq	17b90 <__assert_fail@plt+0x4f10>
   17980:	mov	r3, #0
   17984:	add	r2, sp, #8
   17988:	ldr	r1, [pc, #692]	; 17c44 <__assert_fail@plt+0x4fc4>
   1798c:	mov	r0, r7
   17990:	bl	1256c <blkid_probe_lookup_value@plt>
   17994:	cmp	r0, #0
   17998:	beq	17b70 <__assert_fail@plt+0x4ef0>
   1799c:	mov	r3, #0
   179a0:	add	r2, sp, #8
   179a4:	ldr	r1, [pc, #668]	; 17c48 <__assert_fail@plt+0x4fc8>
   179a8:	mov	r0, r7
   179ac:	bl	1256c <blkid_probe_lookup_value@plt>
   179b0:	cmp	r0, #0
   179b4:	beq	17b50 <__assert_fail@plt+0x4ed0>
   179b8:	mov	r3, #0
   179bc:	add	r2, sp, #8
   179c0:	ldr	r1, [pc, #644]	; 17c4c <__assert_fail@plt+0x4fcc>
   179c4:	mov	r0, r7
   179c8:	bl	1256c <blkid_probe_lookup_value@plt>
   179cc:	cmp	r0, #0
   179d0:	beq	17b30 <__assert_fail@plt+0x4eb0>
   179d4:	mov	r3, #0
   179d8:	add	r2, sp, #8
   179dc:	ldr	r1, [pc, #620]	; 17c50 <__assert_fail@plt+0x4fd0>
   179e0:	mov	r0, r7
   179e4:	bl	1256c <blkid_probe_lookup_value@plt>
   179e8:	cmp	r0, #0
   179ec:	beq	17b10 <__assert_fail@plt+0x4e90>
   179f0:	mov	r3, #0
   179f4:	add	r2, sp, #8
   179f8:	ldr	r1, [pc, #596]	; 17c54 <__assert_fail@plt+0x4fd4>
   179fc:	mov	r0, r7
   17a00:	bl	1256c <blkid_probe_lookup_value@plt>
   17a04:	cmp	r0, #0
   17a08:	beq	17af0 <__assert_fail@plt+0x4e70>
   17a0c:	mov	r3, #0
   17a10:	add	r2, sp, #8
   17a14:	ldr	r1, [pc, #572]	; 17c58 <__assert_fail@plt+0x4fd8>
   17a18:	mov	r0, r7
   17a1c:	bl	1256c <blkid_probe_lookup_value@plt>
   17a20:	cmp	r0, #0
   17a24:	beq	17ad0 <__assert_fail@plt+0x4e50>
   17a28:	add	r2, sp, #8
   17a2c:	mov	r3, #0
   17a30:	ldr	r1, [pc, #548]	; 17c5c <__assert_fail@plt+0x4fdc>
   17a34:	mov	r0, r7
   17a38:	bl	1256c <blkid_probe_lookup_value@plt>
   17a3c:	cmp	r0, #0
   17a40:	beq	17ab0 <__assert_fail@plt+0x4e30>
   17a44:	ldr	r3, [pc, #472]	; 17c24 <__assert_fail@plt+0x4fa4>
   17a48:	ldr	r3, [r3]
   17a4c:	tst	r3, #8
   17a50:	beq	17654 <__assert_fail@plt+0x49d4>
   17a54:	ldr	r3, [pc, #460]	; 17c28 <__assert_fail@plt+0x4fa8>
   17a58:	ldr	r6, [r3]
   17a5c:	bl	128fc <getpid@plt>
   17a60:	ldr	r2, [pc, #452]	; 17c2c <__assert_fail@plt+0x4fac>
   17a64:	ldr	r3, [pc, #452]	; 17c30 <__assert_fail@plt+0x4fb0>
   17a68:	str	r2, [sp, #4]
   17a6c:	str	r3, [sp]
   17a70:	ldr	r2, [pc, #444]	; 17c34 <__assert_fail@plt+0x4fb4>
   17a74:	mov	r1, #1
   17a78:	mov	r3, r0
   17a7c:	mov	r0, r6
   17a80:	bl	12ab8 <__fprintf_chk@plt>
   17a84:	ldr	r2, [r4, #120]	; 0x78
   17a88:	ldr	r1, [pc, #464]	; 17c60 <__assert_fail@plt+0x4fe0>
   17a8c:	mov	r0, r4
   17a90:	bl	1742c <__assert_fail@plt+0x47ac>
   17a94:	b	17654 <__assert_fail@plt+0x49d4>
   17a98:	ldr	r1, [pc, #452]	; 17c64 <__assert_fail@plt+0x4fe4>
   17a9c:	mov	r0, r6
   17aa0:	bl	12b9c <udev_device_get_property_value@plt>
   17aa4:	cmp	r0, #0
   17aa8:	beq	1782c <__assert_fail@plt+0x4bac>
   17aac:	b	1781c <__assert_fail@plt+0x4b9c>
   17ab0:	ldr	r0, [sp, #8]
   17ab4:	cmp	r0, #0
   17ab8:	beq	17ac8 <__assert_fail@plt+0x4e48>
   17abc:	bl	126d4 <strdup@plt>
   17ac0:	cmp	r0, #0
   17ac4:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17ac8:	str	r0, [r6, #32]
   17acc:	b	17a44 <__assert_fail@plt+0x4dc4>
   17ad0:	ldr	r0, [sp, #8]
   17ad4:	cmp	r0, #0
   17ad8:	beq	17ae8 <__assert_fail@plt+0x4e68>
   17adc:	bl	126d4 <strdup@plt>
   17ae0:	cmp	r0, #0
   17ae4:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17ae8:	str	r0, [r6, #28]
   17aec:	b	17a28 <__assert_fail@plt+0x4da8>
   17af0:	ldr	r0, [sp, #8]
   17af4:	cmp	r0, #0
   17af8:	beq	17b08 <__assert_fail@plt+0x4e88>
   17afc:	bl	126d4 <strdup@plt>
   17b00:	cmp	r0, #0
   17b04:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17b08:	str	r0, [r6, #24]
   17b0c:	b	17a0c <__assert_fail@plt+0x4d8c>
   17b10:	ldr	r0, [sp, #8]
   17b14:	cmp	r0, #0
   17b18:	beq	17b28 <__assert_fail@plt+0x4ea8>
   17b1c:	bl	126d4 <strdup@plt>
   17b20:	cmp	r0, #0
   17b24:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17b28:	str	r0, [r6, #20]
   17b2c:	b	179f0 <__assert_fail@plt+0x4d70>
   17b30:	ldr	r0, [sp, #8]
   17b34:	cmp	r0, #0
   17b38:	beq	17b48 <__assert_fail@plt+0x4ec8>
   17b3c:	bl	126d4 <strdup@plt>
   17b40:	cmp	r0, #0
   17b44:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17b48:	str	r0, [r6, #16]
   17b4c:	b	179d4 <__assert_fail@plt+0x4d54>
   17b50:	ldr	r0, [sp, #8]
   17b54:	cmp	r0, #0
   17b58:	beq	17b68 <__assert_fail@plt+0x4ee8>
   17b5c:	bl	126d4 <strdup@plt>
   17b60:	cmp	r0, #0
   17b64:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17b68:	str	r0, [r6, #12]
   17b6c:	b	179b8 <__assert_fail@plt+0x4d38>
   17b70:	ldr	r0, [sp, #8]
   17b74:	cmp	r0, #0
   17b78:	beq	17b88 <__assert_fail@plt+0x4f08>
   17b7c:	bl	126d4 <strdup@plt>
   17b80:	cmp	r0, #0
   17b84:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17b88:	str	r0, [r6, #8]
   17b8c:	b	1799c <__assert_fail@plt+0x4d1c>
   17b90:	ldr	r0, [sp, #8]
   17b94:	cmp	r0, #0
   17b98:	beq	17ba8 <__assert_fail@plt+0x4f28>
   17b9c:	bl	126d4 <strdup@plt>
   17ba0:	cmp	r0, #0
   17ba4:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17ba8:	str	r0, [r6, #4]
   17bac:	b	17980 <__assert_fail@plt+0x4d00>
   17bb0:	ldr	r0, [sp, #8]
   17bb4:	cmp	r0, #0
   17bb8:	beq	17bc8 <__assert_fail@plt+0x4f48>
   17bbc:	bl	126d4 <strdup@plt>
   17bc0:	cmp	r0, #0
   17bc4:	beq	17bd4 <__assert_fail@plt+0x4f54>
   17bc8:	str	r0, [r6]
   17bcc:	b	17964 <__assert_fail@plt+0x4ce4>
   17bd0:	bl	126e0 <__stack_chk_fail@plt>
   17bd4:	ldr	r1, [pc, #140]	; 17c68 <__assert_fail@plt+0x4fe8>
   17bd8:	mov	r0, #1
   17bdc:	bl	12728 <err@plt>
   17be0:	andeq	r3, r3, r8, lsr #24
   17be4:	ldrdeq	r4, [r3], -r8
   17be8:	strdeq	r4, [r3], -r0
   17bec:	andeq	r2, r2, r8, lsl #9
   17bf0:	ldrdeq	r1, [r2], -ip
   17bf4:	muleq	r2, r4, ip
   17bf8:	andeq	r2, r2, r4, lsr #25
   17bfc:			; <UNDEFINED> instruction: 0x00022cb4
   17c00:	andeq	r2, r2, r8, asr #25
   17c04:	ldrdeq	r2, [r2], -ip
   17c08:	strdeq	r2, [r2], -r0
   17c0c:	strdeq	r2, [r2], -ip
   17c10:	andeq	r2, r2, r0, lsl sp
   17c14:	andeq	r2, r2, r4, lsr #26
   17c18:	andeq	r2, r2, r8, lsr sp
   17c1c:	andeq	r2, r2, r8, asr sp
   17c20:	andeq	r2, r2, r8, ror #26
   17c24:	andeq	r4, r3, r0, lsr r0
   17c28:	andeq	r4, r3, r0, lsr #32
   17c2c:	andeq	r2, r2, r4, ror r4
   17c30:	andeq	r1, r2, r8, ror #9
   17c34:	ldrdeq	r1, [r2], -r4
   17c38:	andeq	r2, r2, r4, ror sp
   17c3c:	andeq	r2, r2, ip, lsl #15
   17c40:	andeq	r2, r2, r8, asr #15
   17c44:	andeq	r2, r2, r4, lsr r7
   17c48:	andeq	r2, r2, r8, ror #14
   17c4c:	andeq	r2, r2, ip, lsr #15
   17c50:	muleq	r2, r0, sp
   17c54:	andeq	r2, r2, r0, lsr #27
   17c58:			; <UNDEFINED> instruction: 0x00022db0
   17c5c:	andeq	r2, r2, r0, asr #27
   17c60:	ldrdeq	r2, [r2], -r4
   17c64:	andeq	r2, r2, r0, asr sp
   17c68:	muleq	r2, r0, r5
   17c6c:	ldr	r3, [pc, #4]	; 17c78 <__assert_fail@plt+0x4ff8>
   17c70:	ldr	r0, [r3]
   17c74:	b	12920 <udev_unref@plt>
   17c78:	strdeq	r4, [r3], -r0
   17c7c:	ldr	r1, [pc, #112]	; 17cf4 <__assert_fail@plt+0x5074>
   17c80:	ldr	ip, [pc, #112]	; 17cf8 <__assert_fail@plt+0x5078>
   17c84:	add	r1, pc, r1
   17c88:	push	{r4, r5, r6, lr}
   17c8c:	sub	sp, sp, #16
   17c90:	ldr	r5, [r1, ip]
   17c94:	mov	r4, #0
   17c98:	str	r4, [sp]
   17c9c:	ldr	r1, [r5]
   17ca0:	mov	r6, r0
   17ca4:	str	r1, [sp, #12]
   17ca8:	bl	127a0 <lseek64@plt>
   17cac:	cmp	r0, #0
   17cb0:	sbcs	r3, r1, #0
   17cb4:	movlt	r0, r4
   17cb8:	blt	17cd8 <__assert_fail@plt+0x5058>
   17cbc:	mov	r0, r6
   17cc0:	mov	r2, #1
   17cc4:	add	r1, sp, #11
   17cc8:	bl	12584 <read@plt>
   17ccc:	cmp	r0, r4
   17cd0:	movle	r0, #0
   17cd4:	movgt	r0, #1
   17cd8:	ldr	r2, [sp, #12]
   17cdc:	ldr	r3, [r5]
   17ce0:	cmp	r2, r3
   17ce4:	bne	17cf0 <__assert_fail@plt+0x5070>
   17ce8:	add	sp, sp, #16
   17cec:	pop	{r4, r5, r6, pc}
   17cf0:	bl	126e0 <__stack_chk_fail@plt>
   17cf4:	andeq	ip, r1, r0, asr #1
   17cf8:	andeq	r0, r0, r8, lsr #5
   17cfc:	ldr	r3, [pc, #96]	; 17d64 <__assert_fail@plt+0x50e4>
   17d00:	ldr	ip, [pc, #96]	; 17d68 <__assert_fail@plt+0x50e8>
   17d04:	add	r3, pc, r3
   17d08:	push	{r4, lr}
   17d0c:	sub	sp, sp, #112	; 0x70
   17d10:	ldr	r4, [r3, ip]
   17d14:	mov	r1, r0
   17d18:	mov	r2, sp
   17d1c:	ldr	r3, [r4]
   17d20:	mov	r0, #3
   17d24:	str	r3, [sp, #108]	; 0x6c
   17d28:	bl	12758 <__fxstat64@plt>
   17d2c:	ldr	r2, [sp, #108]	; 0x6c
   17d30:	ldr	r3, [r4]
   17d34:	cmp	r0, #0
   17d38:	movne	r0, #0
   17d3c:	ldreq	r0, [sp, #16]
   17d40:	andeq	r0, r0, #61440	; 0xf000
   17d44:	subeq	r0, r0, #24576	; 0x6000
   17d48:	clzeq	r0, r0
   17d4c:	lsreq	r0, r0, #5
   17d50:	cmp	r2, r3
   17d54:	bne	17d60 <__assert_fail@plt+0x50e0>
   17d58:	add	sp, sp, #112	; 0x70
   17d5c:	pop	{r4, pc}
   17d60:	bl	126e0 <__stack_chk_fail@plt>
   17d64:	andeq	ip, r1, r0, asr #32
   17d68:	andeq	r0, r0, r8, lsr #5
   17d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d70:	mov	sl, r0
   17d74:	sub	sp, sp, #12
   17d78:	mov	r8, #0
   17d7c:	mov	r9, #0
   17d80:	mov	r4, #1024	; 0x400
   17d84:	mov	r5, #0
   17d88:	b	17dcc <__assert_fail@plt+0x514c>
   17d8c:	mvn	r1, #0
   17d90:	mvn	r0, #0
   17d94:	cmp	r5, r1
   17d98:	cmpeq	r4, r0
   17d9c:	beq	17e68 <__assert_fail@plt+0x51e8>
   17da0:	mvn	r1, #-2147483648	; 0x80000000
   17da4:	mvn	r0, #1
   17da8:	cmp	r5, r1
   17dac:	cmpeq	r4, r0
   17db0:	bhi	17dbc <__assert_fail@plt+0x513c>
   17db4:	adds	r2, r4, r4
   17db8:	adc	r3, r5, r5
   17dbc:	mov	r8, r4
   17dc0:	mov	r9, r5
   17dc4:	mov	r4, r2
   17dc8:	mov	r5, r3
   17dcc:	mov	r2, r4
   17dd0:	mov	r3, r5
   17dd4:	mov	r0, sl
   17dd8:	bl	17c7c <__assert_fail@plt+0x4ffc>
   17ddc:	mvn	r2, #0
   17de0:	mov	r3, r2
   17de4:	cmp	r0, #0
   17de8:	bne	17d8c <__assert_fail@plt+0x510c>
   17dec:	mov	r1, sl
   17df0:	subs	r6, r4, #1
   17df4:	sbc	r7, r5, #0
   17df8:	cmp	r7, r9
   17dfc:	cmpeq	r6, r8
   17e00:	mov	r0, r1
   17e04:	bls	17e4c <__assert_fail@plt+0x51cc>
   17e08:	adds	fp, r4, r8
   17e0c:	adc	r3, r5, r9
   17e10:	lsr	fp, fp, #1
   17e14:	orr	fp, fp, r3, lsl #31
   17e18:	lsr	sl, r3, #1
   17e1c:	mov	r2, fp
   17e20:	mov	r3, sl
   17e24:	str	r1, [sp, #4]
   17e28:	bl	17c7c <__assert_fail@plt+0x4ffc>
   17e2c:	ldr	r1, [sp, #4]
   17e30:	cmp	r0, #0
   17e34:	moveq	r4, fp
   17e38:	moveq	r5, sl
   17e3c:	beq	17df0 <__assert_fail@plt+0x5170>
   17e40:	mov	r8, fp
   17e44:	mov	r9, sl
   17e48:	b	17df0 <__assert_fail@plt+0x5170>
   17e4c:	mov	r2, #0
   17e50:	mov	r3, #0
   17e54:	bl	17c7c <__assert_fail@plt+0x4ffc>
   17e58:	adds	r0, r8, #1
   17e5c:	adc	r1, r9, #0
   17e60:	add	sp, sp, #12
   17e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e68:	mov	r0, r4
   17e6c:	mov	r1, r5
   17e70:	add	sp, sp, #12
   17e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e78:	ldr	r3, [pc, #252]	; 17f7c <__assert_fail@plt+0x52fc>
   17e7c:	ldr	ip, [pc, #252]	; 17f80 <__assert_fail@plt+0x5300>
   17e80:	add	r3, pc, r3
   17e84:	push	{r4, r5, r6, r7, lr}
   17e88:	sub	sp, sp, #148	; 0x94
   17e8c:	ldr	r4, [r3, ip]
   17e90:	mov	r2, r1
   17e94:	mov	r5, r1
   17e98:	ldr	r3, [r4]
   17e9c:	ldr	r1, [pc, #224]	; 17f84 <__assert_fail@plt+0x5304>
   17ea0:	mov	r6, r0
   17ea4:	str	r3, [sp, #140]	; 0x8c
   17ea8:	bl	12788 <ioctl@plt>
   17eac:	cmp	r0, #0
   17eb0:	movge	ip, #0
   17eb4:	blt	17ed4 <__assert_fail@plt+0x5254>
   17eb8:	ldr	r2, [sp, #140]	; 0x8c
   17ebc:	ldr	r3, [r4]
   17ec0:	mov	r0, ip
   17ec4:	cmp	r2, r3
   17ec8:	bne	17f78 <__assert_fail@plt+0x52f8>
   17ecc:	add	sp, sp, #148	; 0x94
   17ed0:	pop	{r4, r5, r6, r7, pc}
   17ed4:	add	r7, sp, #32
   17ed8:	mov	r2, r7
   17edc:	ldr	r1, [pc, #164]	; 17f88 <__assert_fail@plt+0x5308>
   17ee0:	mov	r0, r6
   17ee4:	bl	12788 <ioctl@plt>
   17ee8:	cmp	r0, #0
   17eec:	blt	17f0c <__assert_fail@plt+0x528c>
   17ef0:	ldr	r3, [sp, #32]
   17ef4:	lsr	r2, r3, #23
   17ef8:	lsl	r3, r3, #9
   17efc:	mov	ip, #0
   17f00:	str	r2, [r5, #4]
   17f04:	str	r3, [r5]
   17f08:	b	17eb8 <__assert_fail@plt+0x5238>
   17f0c:	add	r2, sp, #4
   17f10:	ldr	r1, [pc, #116]	; 17f8c <__assert_fail@plt+0x530c>
   17f14:	mov	r0, r6
   17f18:	bl	12788 <ioctl@plt>
   17f1c:	cmp	r0, #0
   17f20:	ldrge	r3, [sp, #4]
   17f24:	bge	17ef4 <__assert_fail@plt+0x5274>
   17f28:	mov	r2, r7
   17f2c:	mov	r1, r6
   17f30:	mov	r0, #3
   17f34:	bl	12758 <__fxstat64@plt>
   17f38:	ldr	r3, [sp, #48]	; 0x30
   17f3c:	and	r3, r3, #61440	; 0xf000
   17f40:	subs	ip, r0, #0
   17f44:	bne	17f58 <__assert_fail@plt+0x52d8>
   17f48:	cmp	r3, #32768	; 0x8000
   17f4c:	ldrdeq	r2, [sp, #80]	; 0x50
   17f50:	strdeq	r2, [r5]
   17f54:	beq	17eb8 <__assert_fail@plt+0x5238>
   17f58:	cmp	r3, #24576	; 0x6000
   17f5c:	mvnne	ip, #0
   17f60:	bne	17eb8 <__assert_fail@plt+0x5238>
   17f64:	mov	r0, r6
   17f68:	bl	17d6c <__assert_fail@plt+0x50ec>
   17f6c:	mov	ip, #0
   17f70:	strd	r0, [r5]
   17f74:	b	17eb8 <__assert_fail@plt+0x5238>
   17f78:	bl	126e0 <__stack_chk_fail@plt>
   17f7c:	andeq	fp, r1, r4, asr #29
   17f80:	andeq	r0, r0, r8, lsr #5
   17f84:	andhi	r1, r4, r2, ror r2
   17f88:	andeq	r1, r0, r0, ror #4
   17f8c:	andshi	r0, ip, r4, lsl #4
   17f90:	ldr	r3, [pc, #100]	; 17ffc <__assert_fail@plt+0x537c>
   17f94:	ldr	r2, [pc, #100]	; 18000 <__assert_fail@plt+0x5380>
   17f98:	add	r3, pc, r3
   17f9c:	push	{r4, r5, lr}
   17fa0:	sub	sp, sp, #20
   17fa4:	ldr	r4, [r3, r2]
   17fa8:	mov	r5, r1
   17fac:	mov	r1, sp
   17fb0:	ldr	r3, [r4]
   17fb4:	str	r3, [sp, #12]
   17fb8:	bl	17e78 <__assert_fail@plt+0x51f8>
   17fbc:	cmp	r0, #0
   17fc0:	mvnne	r0, #0
   17fc4:	ldreq	r3, [sp]
   17fc8:	ldreq	r2, [sp, #4]
   17fcc:	lsreq	r3, r3, #9
   17fd0:	orreq	r3, r3, r2, lsl #23
   17fd4:	lsreq	r2, r2, #9
   17fd8:	streq	r3, [r5]
   17fdc:	streq	r2, [r5, #4]
   17fe0:	ldr	r2, [sp, #12]
   17fe4:	ldr	r3, [r4]
   17fe8:	cmp	r2, r3
   17fec:	bne	17ff8 <__assert_fail@plt+0x5378>
   17ff0:	add	sp, sp, #20
   17ff4:	pop	{r4, r5, pc}
   17ff8:	bl	126e0 <__stack_chk_fail@plt>
   17ffc:	andeq	fp, r1, ip, lsr #27
   18000:	andeq	r0, r0, r8, lsr #5
   18004:	mov	r2, r1
   18008:	push	{r4, lr}
   1800c:	ldr	r1, [pc, #8]	; 1801c <__assert_fail@plt+0x539c>
   18010:	bl	12788 <ioctl@plt>
   18014:	asr	r0, r0, #31
   18018:	pop	{r4, pc}
   1801c:	andeq	r1, r0, r8, ror #4
   18020:	push	{lr}		; (str lr, [sp, #-4]!)
   18024:	sub	sp, sp, #12
   18028:	add	r2, sp, #4
   1802c:	str	r1, [sp, #4]
   18030:	ldr	r1, [pc, #12]	; 18044 <__assert_fail@plt+0x53c4>
   18034:	bl	12788 <ioctl@plt>
   18038:	asr	r0, r0, #31
   1803c:	add	sp, sp, #12
   18040:	pop	{pc}		; (ldr pc, [sp], #4)
   18044:	andeq	r1, r0, fp, ror r2
   18048:	ldr	r3, [pc, #88]	; 180a8 <__assert_fail@plt+0x5428>
   1804c:	ldr	ip, [pc, #88]	; 180ac <__assert_fail@plt+0x542c>
   18050:	add	r3, pc, r3
   18054:	push	{r4, lr}
   18058:	sub	sp, sp, #8
   1805c:	ldr	r4, [r3, ip]
   18060:	mov	r2, sp
   18064:	ldr	r1, [pc, #68]	; 180b0 <__assert_fail@plt+0x5430>
   18068:	ldr	r3, [r4]
   1806c:	str	r3, [sp, #4]
   18070:	bl	12788 <ioctl@plt>
   18074:	cmp	r0, #0
   18078:	movlt	r0, #0
   1807c:	blt	1808c <__assert_fail@plt+0x540c>
   18080:	ldr	r0, [sp]
   18084:	adds	r0, r0, #0
   18088:	movne	r0, #1
   1808c:	ldr	r2, [sp, #4]
   18090:	ldr	r3, [r4]
   18094:	cmp	r2, r3
   18098:	bne	180a4 <__assert_fail@plt+0x5424>
   1809c:	add	sp, sp, #8
   180a0:	pop	{r4, pc}
   180a4:	bl	126e0 <__stack_chk_fail@plt>
   180a8:	strdeq	fp, [r1], -r4
   180ac:	andeq	r0, r0, r8, lsr #5
   180b0:	andeq	r1, r0, sl, ror r2
   180b4:	ldr	r3, [pc, #260]	; 181c0 <__assert_fail@plt+0x5540>
   180b8:	ldr	ip, [pc, #260]	; 181c4 <__assert_fail@plt+0x5544>
   180bc:	add	r3, pc, r3
   180c0:	push	{r4, r5, r6, r7, lr}
   180c4:	mov	r4, r0
   180c8:	ldr	r7, [r3, ip]
   180cc:	ldr	r0, [r0, #16]
   180d0:	sub	sp, sp, #116	; 0x74
   180d4:	and	r0, r0, #61440	; 0xf000
   180d8:	cmp	r0, #24576	; 0x6000
   180dc:	ldr	r0, [r7]
   180e0:	mov	r6, r1
   180e4:	str	r0, [sp, #108]	; 0x6c
   180e8:	orreq	r1, r2, #128	; 0x80
   180ec:	movne	r1, r2
   180f0:	mov	r0, r6
   180f4:	bl	12974 <__open64_2@plt>
   180f8:	cmp	r0, #0
   180fc:	mov	r5, r0
   18100:	bge	18120 <__assert_fail@plt+0x54a0>
   18104:	ldr	r2, [sp, #108]	; 0x6c
   18108:	ldr	r3, [r7]
   1810c:	mov	r0, r5
   18110:	cmp	r2, r3
   18114:	bne	181bc <__assert_fail@plt+0x553c>
   18118:	add	sp, sp, #116	; 0x74
   1811c:	pop	{r4, r5, r6, r7, pc}
   18120:	mov	r1, r0
   18124:	mov	r2, sp
   18128:	mov	r0, #3
   1812c:	bl	12758 <__fxstat64@plt>
   18130:	cmp	r0, #0
   18134:	blt	181a0 <__assert_fail@plt+0x5520>
   18138:	ldrd	r0, [sp]
   1813c:	ldrd	r2, [r4]
   18140:	cmp	r1, r3
   18144:	cmpeq	r0, r2
   18148:	bne	181a0 <__assert_fail@plt+0x5520>
   1814c:	ldrd	r0, [sp, #96]	; 0x60
   18150:	ldrd	r2, [r4, #96]	; 0x60
   18154:	cmp	r1, r3
   18158:	cmpeq	r0, r2
   1815c:	bne	181a0 <__assert_fail@plt+0x5520>
   18160:	ldr	r3, [r4, #16]
   18164:	and	r3, r3, #61440	; 0xf000
   18168:	cmp	r3, #24576	; 0x6000
   1816c:	bne	18104 <__assert_fail@plt+0x5484>
   18170:	mov	r0, r5
   18174:	bl	18048 <__assert_fail@plt+0x53c8>
   18178:	cmp	r0, #0
   1817c:	beq	18104 <__assert_fail@plt+0x5484>
   18180:	ldr	r1, [pc, #64]	; 181c8 <__assert_fail@plt+0x5548>
   18184:	mov	r2, #5
   18188:	add	r1, pc, r1
   1818c:	mov	r0, #0
   18190:	bl	126c8 <dcgettext@plt>
   18194:	mov	r1, r6
   18198:	bl	1295c <warnx@plt>
   1819c:	b	18104 <__assert_fail@plt+0x5484>
   181a0:	mov	r0, r5
   181a4:	bl	12c44 <close@plt>
   181a8:	bl	129a4 <__errno_location@plt>
   181ac:	mov	r3, #77	; 0x4d
   181b0:	mvn	r5, #0
   181b4:	str	r3, [r0]
   181b8:	b	18104 <__assert_fail@plt+0x5484>
   181bc:	bl	126e0 <__stack_chk_fail@plt>
   181c0:	andeq	fp, r1, r8, lsl #25
   181c4:	andeq	r0, r0, r8, lsr #5
   181c8:	andeq	sl, r0, r0, ror #24
   181cc:	push	{r4, lr}
   181d0:	mov	r2, #0
   181d4:	ldr	r1, [pc, #8]	; 181e4 <__assert_fail@plt+0x5564>
   181d8:	bl	12788 <ioctl@plt>
   181dc:	bic	r0, r0, r0, asr #31
   181e0:	pop	{r4, pc}
   181e4:	andeq	r5, r0, r1, lsr r3
   181e8:	ldr	r3, [pc, #96]	; 18250 <__assert_fail@plt+0x55d0>
   181ec:	ldr	ip, [pc, #96]	; 18254 <__assert_fail@plt+0x55d4>
   181f0:	add	r3, pc, r3
   181f4:	push	{r4, r5, r6, lr}
   181f8:	sub	sp, sp, #16
   181fc:	ldr	r4, [r3, ip]
   18200:	mov	r6, r1
   18204:	mov	r5, r2
   18208:	ldr	r3, [r4]
   1820c:	add	r2, sp, #4
   18210:	ldr	r1, [pc, #64]	; 18258 <__assert_fail@plt+0x55d8>
   18214:	str	r3, [sp, #12]
   18218:	bl	12788 <ioctl@plt>
   1821c:	cmp	r0, #0
   18220:	mvnne	r0, #0
   18224:	ldrbeq	r2, [sp, #4]
   18228:	ldrbeq	r3, [sp, #5]
   1822c:	streq	r2, [r6]
   18230:	streq	r3, [r5]
   18234:	ldr	r2, [sp, #12]
   18238:	ldr	r3, [r4]
   1823c:	cmp	r2, r3
   18240:	bne	1824c <__assert_fail@plt+0x55cc>
   18244:	add	sp, sp, #16
   18248:	pop	{r4, r5, r6, pc}
   1824c:	bl	126e0 <__stack_chk_fail@plt>
   18250:	andeq	fp, r1, r4, asr fp
   18254:	andeq	r0, r0, r8, lsr #5
   18258:	andeq	r0, r0, r1, lsl #6
   1825c:	cmp	r0, #127	; 0x7f
   18260:	addls	pc, pc, r0, lsl #2
   18264:	b	1851c <__assert_fail@plt+0x589c>
   18268:	b	18468 <__assert_fail@plt+0x57e8>
   1826c:	b	18474 <__assert_fail@plt+0x57f4>
   18270:	b	18480 <__assert_fail@plt+0x5800>
   18274:	b	1848c <__assert_fail@plt+0x580c>
   18278:	b	18498 <__assert_fail@plt+0x5818>
   1827c:	b	184a4 <__assert_fail@plt+0x5824>
   18280:	b	184b0 <__assert_fail@plt+0x5830>
   18284:	b	184bc <__assert_fail@plt+0x583c>
   18288:	b	184c8 <__assert_fail@plt+0x5848>
   1828c:	b	184d4 <__assert_fail@plt+0x5854>
   18290:	b	1851c <__assert_fail@plt+0x589c>
   18294:	b	1851c <__assert_fail@plt+0x589c>
   18298:	b	184e0 <__assert_fail@plt+0x5860>
   1829c:	b	184ec <__assert_fail@plt+0x586c>
   182a0:	b	184f8 <__assert_fail@plt+0x5878>
   182a4:	b	1851c <__assert_fail@plt+0x589c>
   182a8:	b	1851c <__assert_fail@plt+0x589c>
   182ac:	b	18504 <__assert_fail@plt+0x5884>
   182b0:	b	1851c <__assert_fail@plt+0x589c>
   182b4:	b	1851c <__assert_fail@plt+0x589c>
   182b8:	b	1851c <__assert_fail@plt+0x589c>
   182bc:	b	1851c <__assert_fail@plt+0x589c>
   182c0:	b	1851c <__assert_fail@plt+0x589c>
   182c4:	b	1851c <__assert_fail@plt+0x589c>
   182c8:	b	1851c <__assert_fail@plt+0x589c>
   182cc:	b	1851c <__assert_fail@plt+0x589c>
   182d0:	b	1851c <__assert_fail@plt+0x589c>
   182d4:	b	1851c <__assert_fail@plt+0x589c>
   182d8:	b	1851c <__assert_fail@plt+0x589c>
   182dc:	b	1851c <__assert_fail@plt+0x589c>
   182e0:	b	1851c <__assert_fail@plt+0x589c>
   182e4:	b	1851c <__assert_fail@plt+0x589c>
   182e8:	b	1851c <__assert_fail@plt+0x589c>
   182ec:	b	1851c <__assert_fail@plt+0x589c>
   182f0:	b	1851c <__assert_fail@plt+0x589c>
   182f4:	b	1851c <__assert_fail@plt+0x589c>
   182f8:	b	1851c <__assert_fail@plt+0x589c>
   182fc:	b	1851c <__assert_fail@plt+0x589c>
   18300:	b	1851c <__assert_fail@plt+0x589c>
   18304:	b	1851c <__assert_fail@plt+0x589c>
   18308:	b	1851c <__assert_fail@plt+0x589c>
   1830c:	b	1851c <__assert_fail@plt+0x589c>
   18310:	b	1851c <__assert_fail@plt+0x589c>
   18314:	b	1851c <__assert_fail@plt+0x589c>
   18318:	b	1851c <__assert_fail@plt+0x589c>
   1831c:	b	1851c <__assert_fail@plt+0x589c>
   18320:	b	1851c <__assert_fail@plt+0x589c>
   18324:	b	1851c <__assert_fail@plt+0x589c>
   18328:	b	1851c <__assert_fail@plt+0x589c>
   1832c:	b	1851c <__assert_fail@plt+0x589c>
   18330:	b	1851c <__assert_fail@plt+0x589c>
   18334:	b	1851c <__assert_fail@plt+0x589c>
   18338:	b	1851c <__assert_fail@plt+0x589c>
   1833c:	b	1851c <__assert_fail@plt+0x589c>
   18340:	b	1851c <__assert_fail@plt+0x589c>
   18344:	b	1851c <__assert_fail@plt+0x589c>
   18348:	b	1851c <__assert_fail@plt+0x589c>
   1834c:	b	1851c <__assert_fail@plt+0x589c>
   18350:	b	1851c <__assert_fail@plt+0x589c>
   18354:	b	1851c <__assert_fail@plt+0x589c>
   18358:	b	1851c <__assert_fail@plt+0x589c>
   1835c:	b	1851c <__assert_fail@plt+0x589c>
   18360:	b	1851c <__assert_fail@plt+0x589c>
   18364:	b	1851c <__assert_fail@plt+0x589c>
   18368:	b	1851c <__assert_fail@plt+0x589c>
   1836c:	b	1851c <__assert_fail@plt+0x589c>
   18370:	b	1851c <__assert_fail@plt+0x589c>
   18374:	b	1851c <__assert_fail@plt+0x589c>
   18378:	b	1851c <__assert_fail@plt+0x589c>
   1837c:	b	1851c <__assert_fail@plt+0x589c>
   18380:	b	1851c <__assert_fail@plt+0x589c>
   18384:	b	1851c <__assert_fail@plt+0x589c>
   18388:	b	1851c <__assert_fail@plt+0x589c>
   1838c:	b	1851c <__assert_fail@plt+0x589c>
   18390:	b	1851c <__assert_fail@plt+0x589c>
   18394:	b	1851c <__assert_fail@plt+0x589c>
   18398:	b	1851c <__assert_fail@plt+0x589c>
   1839c:	b	1851c <__assert_fail@plt+0x589c>
   183a0:	b	1851c <__assert_fail@plt+0x589c>
   183a4:	b	1851c <__assert_fail@plt+0x589c>
   183a8:	b	1851c <__assert_fail@plt+0x589c>
   183ac:	b	1851c <__assert_fail@plt+0x589c>
   183b0:	b	1851c <__assert_fail@plt+0x589c>
   183b4:	b	1851c <__assert_fail@plt+0x589c>
   183b8:	b	1851c <__assert_fail@plt+0x589c>
   183bc:	b	1851c <__assert_fail@plt+0x589c>
   183c0:	b	1851c <__assert_fail@plt+0x589c>
   183c4:	b	1851c <__assert_fail@plt+0x589c>
   183c8:	b	1851c <__assert_fail@plt+0x589c>
   183cc:	b	1851c <__assert_fail@plt+0x589c>
   183d0:	b	1851c <__assert_fail@plt+0x589c>
   183d4:	b	1851c <__assert_fail@plt+0x589c>
   183d8:	b	1851c <__assert_fail@plt+0x589c>
   183dc:	b	1851c <__assert_fail@plt+0x589c>
   183e0:	b	1851c <__assert_fail@plt+0x589c>
   183e4:	b	1851c <__assert_fail@plt+0x589c>
   183e8:	b	1851c <__assert_fail@plt+0x589c>
   183ec:	b	1851c <__assert_fail@plt+0x589c>
   183f0:	b	1851c <__assert_fail@plt+0x589c>
   183f4:	b	1851c <__assert_fail@plt+0x589c>
   183f8:	b	1851c <__assert_fail@plt+0x589c>
   183fc:	b	1851c <__assert_fail@plt+0x589c>
   18400:	b	1851c <__assert_fail@plt+0x589c>
   18404:	b	1851c <__assert_fail@plt+0x589c>
   18408:	b	1851c <__assert_fail@plt+0x589c>
   1840c:	b	1851c <__assert_fail@plt+0x589c>
   18410:	b	1851c <__assert_fail@plt+0x589c>
   18414:	b	1851c <__assert_fail@plt+0x589c>
   18418:	b	1851c <__assert_fail@plt+0x589c>
   1841c:	b	1851c <__assert_fail@plt+0x589c>
   18420:	b	1851c <__assert_fail@plt+0x589c>
   18424:	b	1851c <__assert_fail@plt+0x589c>
   18428:	b	1851c <__assert_fail@plt+0x589c>
   1842c:	b	1851c <__assert_fail@plt+0x589c>
   18430:	b	1851c <__assert_fail@plt+0x589c>
   18434:	b	1851c <__assert_fail@plt+0x589c>
   18438:	b	1851c <__assert_fail@plt+0x589c>
   1843c:	b	1851c <__assert_fail@plt+0x589c>
   18440:	b	1851c <__assert_fail@plt+0x589c>
   18444:	b	1851c <__assert_fail@plt+0x589c>
   18448:	b	1851c <__assert_fail@plt+0x589c>
   1844c:	b	1851c <__assert_fail@plt+0x589c>
   18450:	b	1851c <__assert_fail@plt+0x589c>
   18454:	b	1851c <__assert_fail@plt+0x589c>
   18458:	b	1851c <__assert_fail@plt+0x589c>
   1845c:	b	1851c <__assert_fail@plt+0x589c>
   18460:	b	1851c <__assert_fail@plt+0x589c>
   18464:	b	18510 <__assert_fail@plt+0x5890>
   18468:	ldr	r0, [pc, #180]	; 18524 <__assert_fail@plt+0x58a4>
   1846c:	add	r0, pc, r0
   18470:	bx	lr
   18474:	ldr	r0, [pc, #172]	; 18528 <__assert_fail@plt+0x58a8>
   18478:	add	r0, pc, r0
   1847c:	bx	lr
   18480:	ldr	r0, [pc, #164]	; 1852c <__assert_fail@plt+0x58ac>
   18484:	add	r0, pc, r0
   18488:	bx	lr
   1848c:	ldr	r0, [pc, #156]	; 18530 <__assert_fail@plt+0x58b0>
   18490:	add	r0, pc, r0
   18494:	bx	lr
   18498:	ldr	r0, [pc, #148]	; 18534 <__assert_fail@plt+0x58b4>
   1849c:	add	r0, pc, r0
   184a0:	bx	lr
   184a4:	ldr	r0, [pc, #140]	; 18538 <__assert_fail@plt+0x58b8>
   184a8:	add	r0, pc, r0
   184ac:	bx	lr
   184b0:	ldr	r0, [pc, #132]	; 1853c <__assert_fail@plt+0x58bc>
   184b4:	add	r0, pc, r0
   184b8:	bx	lr
   184bc:	ldr	r0, [pc, #124]	; 18540 <__assert_fail@plt+0x58c0>
   184c0:	add	r0, pc, r0
   184c4:	bx	lr
   184c8:	ldr	r0, [pc, #116]	; 18544 <__assert_fail@plt+0x58c4>
   184cc:	add	r0, pc, r0
   184d0:	bx	lr
   184d4:	ldr	r0, [pc, #108]	; 18548 <__assert_fail@plt+0x58c8>
   184d8:	add	r0, pc, r0
   184dc:	bx	lr
   184e0:	ldr	r0, [pc, #100]	; 1854c <__assert_fail@plt+0x58cc>
   184e4:	add	r0, pc, r0
   184e8:	bx	lr
   184ec:	ldr	r0, [pc, #92]	; 18550 <__assert_fail@plt+0x58d0>
   184f0:	add	r0, pc, r0
   184f4:	bx	lr
   184f8:	ldr	r0, [pc, #84]	; 18554 <__assert_fail@plt+0x58d4>
   184fc:	add	r0, pc, r0
   18500:	bx	lr
   18504:	ldr	r0, [pc, #76]	; 18558 <__assert_fail@plt+0x58d8>
   18508:	add	r0, pc, r0
   1850c:	bx	lr
   18510:	ldr	r0, [pc, #68]	; 1855c <__assert_fail@plt+0x58dc>
   18514:	add	r0, pc, r0
   18518:	bx	lr
   1851c:	mov	r0, #0
   18520:	bx	lr
   18524:	andeq	r9, r0, r0, lsr #14
   18528:	strdeq	sl, [r0], -r0
   1852c:	andeq	sl, r0, r0, lsl #19
   18530:	andeq	sl, r0, ip, ror r9
   18534:	andeq	sl, r0, ip, ror r9
   18538:	andeq	sl, r0, r8, ror r9
   1853c:	andeq	sl, r0, r0, ror r9
   18540:	andeq	sl, r0, ip, ror #18
   18544:	andeq	sl, r0, r8, ror #18
   18548:	andeq	sl, r0, r4, ror #18
   1854c:	andeq	sl, r0, r0, ror #18
   18550:	andeq	sl, r0, ip, asr r9
   18554:	andeq	sl, r0, ip, asr r9
   18558:	andeq	sl, r0, r4, asr r9
   1855c:	andeq	sl, r0, ip, asr #18
   18560:	ldr	r3, [pc, #196]	; 1862c <__assert_fail@plt+0x59ac>
   18564:	ldr	r2, [pc, #196]	; 18630 <__assert_fail@plt+0x59b0>
   18568:	add	r3, pc, r3
   1856c:	push	{r4, r5, r6, r7, lr}
   18570:	sub	sp, sp, #116	; 0x74
   18574:	ldr	r4, [r3, r2]
   18578:	mov	r5, r1
   1857c:	mov	r1, #47	; 0x2f
   18580:	ldr	r3, [r4]
   18584:	mov	r7, r0
   18588:	str	r3, [sp, #108]	; 0x6c
   1858c:	bl	12b3c <strrchr@plt>
   18590:	mov	r3, #0
   18594:	str	r3, [r5]
   18598:	subs	r6, r0, #0
   1859c:	beq	185d4 <__assert_fail@plt+0x5954>
   185a0:	ldr	r1, [pc, #140]	; 18634 <__assert_fail@plt+0x59b4>
   185a4:	mov	r2, #4
   185a8:	add	r1, pc, r1
   185ac:	bl	12c14 <strncmp@plt>
   185b0:	cmp	r0, #0
   185b4:	bne	185d4 <__assert_fail@plt+0x5954>
   185b8:	bl	128e4 <__ctype_b_loc@plt>
   185bc:	ldrsb	r3, [r6, #4]
   185c0:	lsl	r3, r3, #1
   185c4:	ldr	r2, [r0]
   185c8:	ldrh	r3, [r2, r3]
   185cc:	tst	r3, #2048	; 0x800
   185d0:	bne	185f0 <__assert_fail@plt+0x5970>
   185d4:	mov	r0, #0
   185d8:	ldr	r2, [sp, #108]	; 0x6c
   185dc:	ldr	r3, [r4]
   185e0:	cmp	r2, r3
   185e4:	bne	18628 <__assert_fail@plt+0x59a8>
   185e8:	add	sp, sp, #116	; 0x74
   185ec:	pop	{r4, r5, r6, r7, pc}
   185f0:	mov	r1, r7
   185f4:	mov	r2, sp
   185f8:	mov	r0, #3
   185fc:	bl	12bfc <__xstat64@plt>
   18600:	cmp	r0, #0
   18604:	bne	185d4 <__assert_fail@plt+0x5954>
   18608:	ldr	r3, [sp, #16]
   1860c:	and	r3, r3, #61440	; 0xf000
   18610:	cmp	r3, #24576	; 0x6000
   18614:	bne	185d4 <__assert_fail@plt+0x5954>
   18618:	mov	r0, #1
   1861c:	add	r6, r6, r0
   18620:	str	r6, [r5]
   18624:	b	185d8 <__assert_fail@plt+0x5958>
   18628:	bl	126e0 <__stack_chk_fail@plt>
   1862c:	ldrdeq	fp, [r1], -ip
   18630:	andeq	r0, r0, r8, lsr #5
   18634:	andeq	sl, r0, r8, asr #17
   18638:	ldr	r3, [pc, #292]	; 18764 <__assert_fail@plt+0x5ae4>
   1863c:	ldr	r2, [pc, #292]	; 18768 <__assert_fail@plt+0x5ae8>
   18640:	add	r3, pc, r3
   18644:	push	{r4, r5, r6, r7, r8, lr}
   18648:	sub	sp, sp, #520	; 0x208
   1864c:	ldr	r4, [r3, r2]
   18650:	cmp	r1, #0
   18654:	ldr	r3, [r4]
   18658:	str	r3, [sp, #516]	; 0x204
   1865c:	beq	18708 <__assert_fail@plt+0x5a88>
   18660:	ldrsb	r3, [r1]
   18664:	cmp	r3, #0
   18668:	beq	18708 <__assert_fail@plt+0x5a88>
   1866c:	cmp	r0, #0
   18670:	beq	18710 <__assert_fail@plt+0x5a90>
   18674:	ldr	r2, [pc, #240]	; 1876c <__assert_fail@plt+0x5aec>
   18678:	mov	r3, #256	; 0x100
   1867c:	add	r2, pc, r2
   18680:	add	r5, sp, #260	; 0x104
   18684:	strd	r0, [sp, #4]
   18688:	str	r2, [sp]
   1868c:	mov	r1, r3
   18690:	mov	r2, #1
   18694:	mov	r0, r5
   18698:	bl	12c5c <__snprintf_chk@plt>
   1869c:	ldr	r1, [pc, #204]	; 18770 <__assert_fail@plt+0x5af0>
   186a0:	mov	r0, r5
   186a4:	add	r1, pc, r1
   186a8:	bl	12bcc <fopen64@plt>
   186ac:	subs	r7, r0, #0
   186b0:	beq	18708 <__assert_fail@plt+0x5a88>
   186b4:	add	r8, sp, #16
   186b8:	mov	r0, r8
   186bc:	mov	r2, r7
   186c0:	mov	r1, #244	; 0xf4
   186c4:	bl	125f0 <fgets@plt>
   186c8:	subs	r6, r0, #0
   186cc:	beq	186e4 <__assert_fail@plt+0x5a64>
   186d0:	mov	r0, r8
   186d4:	bl	12938 <strlen@plt>
   186d8:	cmp	r0, #1
   186dc:	movls	r6, #0
   186e0:	bhi	1871c <__assert_fail@plt+0x5a9c>
   186e4:	mov	r0, r7
   186e8:	bl	12adc <fclose@plt>
   186ec:	ldr	r2, [sp, #516]	; 0x204
   186f0:	ldr	r3, [r4]
   186f4:	mov	r0, r6
   186f8:	cmp	r2, r3
   186fc:	bne	18760 <__assert_fail@plt+0x5ae0>
   18700:	add	sp, sp, #520	; 0x208
   18704:	pop	{r4, r5, r6, r7, r8, pc}
   18708:	mov	r6, #0
   1870c:	b	186ec <__assert_fail@plt+0x5a6c>
   18710:	ldr	r0, [pc, #92]	; 18774 <__assert_fail@plt+0x5af4>
   18714:	add	r0, pc, r0
   18718:	b	18674 <__assert_fail@plt+0x59f4>
   1871c:	add	r3, sp, #520	; 0x208
   18720:	ldr	r2, [pc, #80]	; 18778 <__assert_fail@plt+0x5af8>
   18724:	add	r0, r3, r0
   18728:	mov	ip, #0
   1872c:	mov	r3, #256	; 0x100
   18730:	add	r2, pc, r2
   18734:	str	r2, [sp]
   18738:	str	r8, [sp, #4]
   1873c:	mov	r1, r3
   18740:	strb	ip, [r0, #-505]	; 0xfffffe07
   18744:	mov	r2, #1
   18748:	mov	r0, r5
   1874c:	bl	12c5c <__snprintf_chk@plt>
   18750:	mov	r0, r5
   18754:	bl	126d4 <strdup@plt>
   18758:	mov	r6, r0
   1875c:	b	186e4 <__assert_fail@plt+0x5a64>
   18760:	bl	126e0 <__stack_chk_fail@plt>
   18764:	andeq	fp, r1, r4, lsl #14
   18768:	andeq	r0, r0, r8, lsr #5
   1876c:	strdeq	sl, [r0], -ip
   18770:	andeq	r9, r0, r4, asr #32
   18774:	andeq	r9, r0, ip, ror #10
   18778:	andeq	r9, r0, r4, asr #1
   1877c:	mov	r1, r0
   18780:	mov	r0, #0
   18784:	b	18638 <__assert_fail@plt+0x59b8>
   18788:	ldr	r3, [pc, #324]	; 188d4 <__assert_fail@plt+0x5c54>
   1878c:	ldr	r2, [pc, #324]	; 188d8 <__assert_fail@plt+0x5c58>
   18790:	add	r3, pc, r3
   18794:	push	{r4, r5, r6, r7, r8, r9, lr}
   18798:	sub	sp, sp, #4096	; 0x1000
   1879c:	ldr	r5, [r3, r2]
   187a0:	sub	sp, sp, #12
   187a4:	add	r2, sp, #4096	; 0x1000
   187a8:	add	r2, r2, #4
   187ac:	ldr	r3, [r5]
   187b0:	subs	r4, r0, #0
   187b4:	str	r3, [r2]
   187b8:	beq	1889c <__assert_fail@plt+0x5c1c>
   187bc:	ldrsb	r3, [r4]
   187c0:	cmp	r3, #47	; 0x2f
   187c4:	beq	1889c <__assert_fail@plt+0x5c1c>
   187c8:	add	r7, sp, #4
   187cc:	mov	r0, r7
   187d0:	mov	r1, #4096	; 0x1000
   187d4:	bl	128f0 <getcwd@plt>
   187d8:	subs	r6, r0, #0
   187dc:	beq	18864 <__assert_fail@plt+0x5be4>
   187e0:	ldr	r1, [pc, #244]	; 188dc <__assert_fail@plt+0x5c5c>
   187e4:	mov	r2, #2
   187e8:	add	r1, pc, r1
   187ec:	mov	r0, r4
   187f0:	bl	12c14 <strncmp@plt>
   187f4:	cmp	r0, #0
   187f8:	bne	188b0 <__assert_fail@plt+0x5c30>
   187fc:	adds	r8, r4, #2
   18800:	beq	188b0 <__assert_fail@plt+0x5c30>
   18804:	ldrsb	r3, [r8]
   18808:	cmp	r3, #0
   1880c:	beq	1888c <__assert_fail@plt+0x5c0c>
   18810:	mov	r0, r7
   18814:	bl	12938 <strlen@plt>
   18818:	mov	r4, r0
   1881c:	mov	r0, r8
   18820:	bl	12938 <strlen@plt>
   18824:	mov	r9, r0
   18828:	add	r0, r4, r0
   1882c:	add	r0, r0, #2
   18830:	bl	12854 <malloc@plt>
   18834:	subs	r6, r0, #0
   18838:	beq	18864 <__assert_fail@plt+0x5be4>
   1883c:	mov	r1, r7
   18840:	mov	r2, r4
   18844:	bl	12674 <memcpy@plt>
   18848:	add	r0, r6, r4
   1884c:	mov	r3, #47	; 0x2f
   18850:	add	r2, r9, #1
   18854:	mov	r1, r8
   18858:	add	r0, r0, #1
   1885c:	strb	r3, [r6, r4]
   18860:	bl	12674 <memcpy@plt>
   18864:	add	r3, sp, #4096	; 0x1000
   18868:	add	r3, r3, #4
   1886c:	ldr	r2, [r3]
   18870:	ldr	r3, [r5]
   18874:	mov	r0, r6
   18878:	cmp	r2, r3
   1887c:	bne	188d0 <__assert_fail@plt+0x5c50>
   18880:	add	sp, sp, #4096	; 0x1000
   18884:	add	sp, sp, #12
   18888:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1888c:	mov	r0, r7
   18890:	bl	126d4 <strdup@plt>
   18894:	mov	r6, r0
   18898:	b	18864 <__assert_fail@plt+0x5be4>
   1889c:	bl	129a4 <__errno_location@plt>
   188a0:	mov	r3, #22
   188a4:	mov	r6, #0
   188a8:	str	r3, [r0]
   188ac:	b	18864 <__assert_fail@plt+0x5be4>
   188b0:	ldr	r1, [pc, #40]	; 188e0 <__assert_fail@plt+0x5c60>
   188b4:	mov	r0, r4
   188b8:	add	r1, pc, r1
   188bc:	bl	12524 <strcmp@plt>
   188c0:	cmp	r0, #0
   188c4:	beq	1888c <__assert_fail@plt+0x5c0c>
   188c8:	mov	r8, r4
   188cc:	b	18804 <__assert_fail@plt+0x5b84>
   188d0:	bl	126e0 <__stack_chk_fail@plt>
   188d4:			; <UNDEFINED> instruction: 0x0001b5b4
   188d8:	andeq	r0, r0, r8, lsr #5
   188dc:	andeq	sl, r0, r8, lsr #13
   188e0:	andeq	r8, r0, ip, lsr sp
   188e4:	ldr	r3, [pc, #180]	; 189a0 <__assert_fail@plt+0x5d20>
   188e8:	ldr	r2, [pc, #180]	; 189a4 <__assert_fail@plt+0x5d24>
   188ec:	add	r3, pc, r3
   188f0:	push	{r4, r5, r6, lr}
   188f4:	sub	sp, sp, #8
   188f8:	ldr	r5, [r3, r2]
   188fc:	subs	r6, r0, #0
   18900:	ldr	r3, [r5]
   18904:	str	r3, [sp, #4]
   18908:	beq	18994 <__assert_fail@plt+0x5d14>
   1890c:	ldrsb	r4, [r6]
   18910:	cmp	r4, #0
   18914:	beq	18938 <__assert_fail@plt+0x5cb8>
   18918:	mov	r1, #0
   1891c:	bl	12c38 <realpath@plt>
   18920:	subs	r4, r0, #0
   18924:	beq	18974 <__assert_fail@plt+0x5cf4>
   18928:	mov	r1, sp
   1892c:	bl	18560 <__assert_fail@plt+0x58e0>
   18930:	cmp	r0, #0
   18934:	bne	18954 <__assert_fail@plt+0x5cd4>
   18938:	ldr	r2, [sp, #4]
   1893c:	ldr	r3, [r5]
   18940:	mov	r0, r4
   18944:	cmp	r2, r3
   18948:	bne	1899c <__assert_fail@plt+0x5d1c>
   1894c:	add	sp, sp, #8
   18950:	pop	{r4, r5, r6, pc}
   18954:	ldr	r0, [sp]
   18958:	bl	1877c <__assert_fail@plt+0x5afc>
   1895c:	subs	r6, r0, #0
   18960:	beq	18938 <__assert_fail@plt+0x5cb8>
   18964:	mov	r0, r4
   18968:	bl	125d8 <free@plt>
   1896c:	mov	r4, r6
   18970:	b	18938 <__assert_fail@plt+0x5cb8>
   18974:	ldr	r2, [sp, #4]
   18978:	ldr	r3, [r5]
   1897c:	cmp	r2, r3
   18980:	bne	1899c <__assert_fail@plt+0x5d1c>
   18984:	mov	r0, r6
   18988:	add	sp, sp, #8
   1898c:	pop	{r4, r5, r6, lr}
   18990:	b	126d4 <strdup@plt>
   18994:	mov	r4, r6
   18998:	b	18938 <__assert_fail@plt+0x5cb8>
   1899c:	bl	126e0 <__stack_chk_fail@plt>
   189a0:	andeq	fp, r1, r8, asr r4
   189a4:	andeq	r0, r0, r8, lsr #5
   189a8:	ldr	r3, [pc, #268]	; 18abc <__assert_fail@plt+0x5e3c>
   189ac:	ldr	r2, [pc, #268]	; 18ac0 <__assert_fail@plt+0x5e40>
   189b0:	add	r3, pc, r3
   189b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   189b8:	sub	sp, sp, #8
   189bc:	ldr	r4, [r3, r2]
   189c0:	subs	r5, r0, #0
   189c4:	ldr	r3, [r4]
   189c8:	str	r3, [sp, #4]
   189cc:	beq	18a6c <__assert_fail@plt+0x5dec>
   189d0:	ldrsb	r3, [r5]
   189d4:	cmp	r3, #0
   189d8:	beq	18a6c <__assert_fail@plt+0x5dec>
   189dc:	bl	12734 <geteuid@plt>
   189e0:	mov	r9, r0
   189e4:	bl	12770 <getegid@plt>
   189e8:	mov	r8, r0
   189ec:	bl	129ec <getgid@plt>
   189f0:	bl	12ad0 <setegid@plt>
   189f4:	cmp	r0, #0
   189f8:	blt	18a6c <__assert_fail@plt+0x5dec>
   189fc:	bl	125a8 <getuid@plt>
   18a00:	bl	1274c <seteuid@plt>
   18a04:	cmp	r0, #0
   18a08:	blt	18a6c <__assert_fail@plt+0x5dec>
   18a0c:	bl	129a4 <__errno_location@plt>
   18a10:	mov	r7, #0
   18a14:	mov	r1, r7
   18a18:	mov	r6, r0
   18a1c:	mov	r0, r5
   18a20:	str	r7, [r6]
   18a24:	bl	12c38 <realpath@plt>
   18a28:	subs	r5, r0, #0
   18a2c:	beq	18a8c <__assert_fail@plt+0x5e0c>
   18a30:	mov	r1, sp
   18a34:	bl	18560 <__assert_fail@plt+0x58e0>
   18a38:	subs	sl, r0, #0
   18a3c:	bne	18a94 <__assert_fail@plt+0x5e14>
   18a40:	mov	r0, r8
   18a44:	bl	12ad0 <setegid@plt>
   18a48:	cmp	r0, #0
   18a4c:	blt	18a64 <__assert_fail@plt+0x5de4>
   18a50:	mov	r0, r9
   18a54:	bl	1274c <seteuid@plt>
   18a58:	cmp	r0, #0
   18a5c:	strge	sl, [r6]
   18a60:	bge	18a70 <__assert_fail@plt+0x5df0>
   18a64:	mov	r0, r5
   18a68:	bl	125d8 <free@plt>
   18a6c:	mov	r5, #0
   18a70:	ldr	r2, [sp, #4]
   18a74:	ldr	r3, [r4]
   18a78:	mov	r0, r5
   18a7c:	cmp	r2, r3
   18a80:	bne	18ab8 <__assert_fail@plt+0x5e38>
   18a84:	add	sp, sp, #8
   18a88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a8c:	ldr	sl, [r6]
   18a90:	b	18a40 <__assert_fail@plt+0x5dc0>
   18a94:	ldr	r0, [sp]
   18a98:	bl	1877c <__assert_fail@plt+0x5afc>
   18a9c:	subs	sl, r0, #0
   18aa0:	beq	18a40 <__assert_fail@plt+0x5dc0>
   18aa4:	mov	r0, r5
   18aa8:	bl	125d8 <free@plt>
   18aac:	mov	r5, sl
   18ab0:	mov	sl, r7
   18ab4:	b	18a40 <__assert_fail@plt+0x5dc0>
   18ab8:	bl	126e0 <__stack_chk_fail@plt>
   18abc:	muleq	r1, r4, r3
   18ac0:	andeq	r0, r0, r8, lsr #5
   18ac4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ac8:	subs	r9, r0, #0
   18acc:	beq	18b6c <__assert_fail@plt+0x5eec>
   18ad0:	bl	12938 <strlen@plt>
   18ad4:	lsl	r0, r0, #2
   18ad8:	add	r0, r0, #1
   18adc:	bl	12854 <malloc@plt>
   18ae0:	subs	r7, r0, #0
   18ae4:	beq	18b6c <__assert_fail@plt+0x5eec>
   18ae8:	ldrsb	r8, [r9]
   18aec:	cmp	r8, #0
   18af0:	beq	18b78 <__assert_fail@plt+0x5ef8>
   18af4:	ldr	r5, [pc, #132]	; 18b80 <__assert_fail@plt+0x5f00>
   18af8:	mov	r4, r7
   18afc:	add	r5, pc, r5
   18b00:	mov	r6, #92	; 0x5c
   18b04:	mov	r1, r8
   18b08:	mov	r0, r5
   18b0c:	bl	12950 <strchr@plt>
   18b10:	uxtb	r3, r8
   18b14:	asr	r2, r8, #6
   18b18:	asr	r1, r3, #3
   18b1c:	and	r2, r2, #3
   18b20:	and	r1, r1, #7
   18b24:	and	r3, r3, #7
   18b28:	add	r2, r2, #48	; 0x30
   18b2c:	add	r1, r1, #48	; 0x30
   18b30:	add	r3, r3, #48	; 0x30
   18b34:	cmp	r0, #0
   18b38:	strbeq	r8, [r4], #1
   18b3c:	ldrsb	r8, [r9, #1]!
   18b40:	strbne	r6, [r4]
   18b44:	strbne	r2, [r4, #1]
   18b48:	strbne	r1, [r4, #2]
   18b4c:	strbne	r3, [r4, #3]
   18b50:	addne	r4, r4, #4
   18b54:	cmp	r8, #0
   18b58:	bne	18b04 <__assert_fail@plt+0x5e84>
   18b5c:	mov	r3, #0
   18b60:	strb	r3, [r4]
   18b64:	mov	r0, r7
   18b68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b6c:	mov	r7, #0
   18b70:	mov	r0, r7
   18b74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b78:	mov	r4, r7
   18b7c:	b	18b5c <__assert_fail@plt+0x5edc>
   18b80:	muleq	r0, r8, r3
   18b84:	cmp	r0, #0
   18b88:	bxeq	lr
   18b8c:	ldrsb	r3, [r0]
   18b90:	cmp	r3, #0
   18b94:	beq	18c48 <__assert_fail@plt+0x5fc8>
   18b98:	subs	r2, r2, #1
   18b9c:	beq	18c48 <__assert_fail@plt+0x5fc8>
   18ba0:	push	{r4, r5, r6, r7, lr}
   18ba4:	mov	ip, #0
   18ba8:	mov	r6, #8
   18bac:	b	18bd0 <__assert_fail@plt+0x5f50>
   18bb0:	add	r0, r0, #1
   18bb4:	add	ip, ip, #1
   18bb8:	strb	r3, [r1, #-1]
   18bbc:	ldrsb	r3, [r0]
   18bc0:	cmp	r3, #0
   18bc4:	beq	18c3c <__assert_fail@plt+0x5fbc>
   18bc8:	cmp	ip, r2
   18bcc:	bcs	18c3c <__assert_fail@plt+0x5fbc>
   18bd0:	cmp	r3, #92	; 0x5c
   18bd4:	add	r1, r1, #1
   18bd8:	bne	18bb0 <__assert_fail@plt+0x5f30>
   18bdc:	add	lr, ip, #3
   18be0:	cmp	lr, r2
   18be4:	bcs	18bb0 <__assert_fail@plt+0x5f30>
   18be8:	ldrsb	lr, [r0, #1]
   18bec:	bic	r4, lr, #7
   18bf0:	cmp	r4, #48	; 0x30
   18bf4:	bne	18bb0 <__assert_fail@plt+0x5f30>
   18bf8:	ldrsb	r4, [r0, #2]
   18bfc:	bic	r5, r4, #7
   18c00:	cmp	r5, #48	; 0x30
   18c04:	bne	18bb0 <__assert_fail@plt+0x5f30>
   18c08:	ldrsb	r5, [r0, #3]
   18c0c:	bic	r7, r5, #7
   18c10:	cmp	r7, #48	; 0x30
   18c14:	bne	18bb0 <__assert_fail@plt+0x5f30>
   18c18:	and	r3, lr, #7
   18c1c:	and	r4, r4, #7
   18c20:	smlabb	r3, r6, r3, r4
   18c24:	and	r5, r5, #7
   18c28:	add	r0, r0, #4
   18c2c:	add	r3, r5, r3, lsl #3
   18c30:	add	ip, ip, #4
   18c34:	sxtb	r3, r3
   18c38:	b	18bb8 <__assert_fail@plt+0x5f38>
   18c3c:	mov	r3, #0
   18c40:	strb	r3, [r1]
   18c44:	pop	{r4, r5, r6, r7, pc}
   18c48:	mov	r3, #0
   18c4c:	strb	r3, [r1]
   18c50:	bx	lr
   18c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c58:	subs	r5, r0, #0
   18c5c:	sub	sp, sp, #12
   18c60:	moveq	r0, r5
   18c64:	beq	18d74 <__assert_fail@plt+0x60f4>
   18c68:	mov	r9, r1
   18c6c:	sub	r8, r2, #1
   18c70:	mov	r7, r1
   18c74:	mov	r6, #0
   18c78:	b	18c8c <__assert_fail@plt+0x600c>
   18c7c:	add	r5, r5, #1
   18c80:	add	r6, r6, #1
   18c84:	strb	r4, [r7]
   18c88:	add	r7, r7, #1
   18c8c:	ldrsb	r4, [r5]
   18c90:	cmp	r4, #0
   18c94:	beq	18d64 <__assert_fail@plt+0x60e4>
   18c98:	cmp	r6, r8
   18c9c:	bcs	18d64 <__assert_fail@plt+0x60e4>
   18ca0:	cmp	r4, #92	; 0x5c
   18ca4:	bne	18c7c <__assert_fail@plt+0x5ffc>
   18ca8:	add	r3, r6, #3
   18cac:	cmp	r3, r8
   18cb0:	bcs	18c7c <__assert_fail@plt+0x5ffc>
   18cb4:	ldrsb	r3, [r5, #1]
   18cb8:	cmp	r3, #120	; 0x78
   18cbc:	bne	18c7c <__assert_fail@plt+0x5ffc>
   18cc0:	bl	128e4 <__ctype_b_loc@plt>
   18cc4:	ldrsb	r3, [r5, #2]
   18cc8:	sxth	r1, r3
   18ccc:	lsl	r2, r1, #1
   18cd0:	ldr	r0, [r0]
   18cd4:	ldrh	ip, [r0, r2]
   18cd8:	tst	ip, #4096	; 0x1000
   18cdc:	beq	18c7c <__assert_fail@plt+0x5ffc>
   18ce0:	ldrsb	sl, [r5, #3]
   18ce4:	sxth	r2, sl
   18ce8:	lsl	lr, r2, #1
   18cec:	ldrh	fp, [r0, lr]
   18cf0:	tst	fp, #4096	; 0x1000
   18cf4:	beq	18c7c <__assert_fail@plt+0x5ffc>
   18cf8:	tst	ip, #2048	; 0x800
   18cfc:	bne	18d7c <__assert_fail@plt+0x60fc>
   18d00:	stm	sp, {r1, r2}
   18d04:	bl	128c0 <__ctype_tolower_loc@plt>
   18d08:	ldr	r1, [sp]
   18d0c:	ldr	r2, [sp, #4]
   18d10:	ldr	r3, [r0]
   18d14:	ldr	r4, [r3, r1, lsl #2]
   18d18:	sub	r4, r4, #87	; 0x57
   18d1c:	lsl	r4, r4, #4
   18d20:	sxtb	r4, r4
   18d24:	tst	fp, #2048	; 0x800
   18d28:	subne	r3, sl, #48	; 0x30
   18d2c:	sxtbne	r3, r3
   18d30:	bne	18d50 <__assert_fail@plt+0x60d0>
   18d34:	str	r2, [sp]
   18d38:	bl	128c0 <__ctype_tolower_loc@plt>
   18d3c:	ldr	r2, [sp]
   18d40:	ldr	r3, [r0]
   18d44:	ldr	r3, [r3, r2, lsl #2]
   18d48:	sub	r3, r3, #87	; 0x57
   18d4c:	sxtb	r3, r3
   18d50:	orr	r3, r4, r3
   18d54:	strb	r3, [r7]
   18d58:	add	r5, r5, #4
   18d5c:	add	r6, r6, #4
   18d60:	b	18c88 <__assert_fail@plt+0x6008>
   18d64:	sub	r0, r7, r9
   18d68:	add	r0, r0, #1
   18d6c:	mov	r3, #0
   18d70:	strb	r3, [r7]
   18d74:	add	sp, sp, #12
   18d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d7c:	sub	r4, r3, #48	; 0x30
   18d80:	lsl	r4, r4, #4
   18d84:	sxtb	r4, r4
   18d88:	b	18d24 <__assert_fail@plt+0x60a4>
   18d8c:	push	{r4, r5, r6, lr}
   18d90:	subs	r4, r0, #0
   18d94:	beq	18e1c <__assert_fail@plt+0x619c>
   18d98:	ldrsb	r3, [r4]
   18d9c:	bics	r2, r3, #32
   18da0:	beq	18e0c <__assert_fail@plt+0x618c>
   18da4:	cmp	r3, #9
   18da8:	beq	18e0c <__assert_fail@plt+0x618c>
   18dac:	mov	ip, r4
   18db0:	b	18dbc <__assert_fail@plt+0x613c>
   18db4:	cmp	r3, #9
   18db8:	beq	18dc8 <__assert_fail@plt+0x6148>
   18dbc:	ldrsb	r3, [ip, #1]!
   18dc0:	bics	r2, r3, #32
   18dc4:	bne	18db4 <__assert_fail@plt+0x6134>
   18dc8:	sub	r5, ip, r4
   18dcc:	cmp	r1, #0
   18dd0:	add	r5, r5, #1
   18dd4:	beq	18ddc <__assert_fail@plt+0x615c>
   18dd8:	str	ip, [r1]
   18ddc:	cmp	r4, ip
   18de0:	beq	18e1c <__assert_fail@plt+0x619c>
   18de4:	mov	r0, r5
   18de8:	bl	12854 <malloc@plt>
   18dec:	subs	r6, r0, #0
   18df0:	beq	18e04 <__assert_fail@plt+0x6184>
   18df4:	mov	r2, r5
   18df8:	mov	r0, r4
   18dfc:	mov	r1, r6
   18e00:	bl	18b84 <__assert_fail@plt+0x5f04>
   18e04:	mov	r0, r6
   18e08:	pop	{r4, r5, r6, pc}
   18e0c:	cmp	r1, #0
   18e10:	movne	ip, r4
   18e14:	movne	r5, #1
   18e18:	bne	18dd8 <__assert_fail@plt+0x6158>
   18e1c:	mov	r6, #0
   18e20:	mov	r0, r6
   18e24:	pop	{r4, r5, r6, pc}
   18e28:	cmp	r0, #0
   18e2c:	mov	r3, #0
   18e30:	str	r3, [r1]
   18e34:	bxeq	lr
   18e38:	ldrsb	r2, [r0]
   18e3c:	cmp	r2, #47	; 0x2f
   18e40:	bne	18e7c <__assert_fail@plt+0x61fc>
   18e44:	ldrsb	r3, [r0, #1]
   18e48:	cmp	r3, #47	; 0x2f
   18e4c:	bne	18e84 <__assert_fail@plt+0x6204>
   18e50:	add	r3, r0, #1
   18e54:	b	18e64 <__assert_fail@plt+0x61e4>
   18e58:	ldrsb	r2, [r3]
   18e5c:	cmp	r2, #47	; 0x2f
   18e60:	bne	18e84 <__assert_fail@plt+0x6204>
   18e64:	cmp	r3, #0
   18e68:	mov	r0, r3
   18e6c:	bxeq	lr
   18e70:	ldrsb	r2, [r3], #1
   18e74:	cmp	r2, #47	; 0x2f
   18e78:	beq	18e58 <__assert_fail@plt+0x61d8>
   18e7c:	cmp	r2, #0
   18e80:	beq	18ec0 <__assert_fail@plt+0x6240>
   18e84:	mov	r3, #1
   18e88:	str	r3, [r1]
   18e8c:	ldrsb	r3, [r0, #1]
   18e90:	add	r2, r0, #1
   18e94:	cmp	r3, #47	; 0x2f
   18e98:	cmpne	r3, #0
   18e9c:	bxeq	lr
   18ea0:	rsb	r3, r0, #1
   18ea4:	add	ip, r2, r3
   18ea8:	str	ip, [r1]
   18eac:	ldrsb	ip, [r2, #1]!
   18eb0:	cmp	ip, #0
   18eb4:	cmpne	ip, #47	; 0x2f
   18eb8:	bne	18ea4 <__assert_fail@plt+0x6224>
   18ebc:	bx	lr
   18ec0:	mov	r0, r2
   18ec4:	bx	lr
   18ec8:	push	{r4, r5, r6, r7, r8, lr}
   18ecc:	mov	r7, r1
   18ed0:	ldrsb	r1, [r0]
   18ed4:	cmp	r1, #0
   18ed8:	movne	r5, r0
   18edc:	movne	r4, #0
   18ee0:	beq	18f4c <__assert_fail@plt+0x62cc>
   18ee4:	cmp	r1, #92	; 0x5c
   18ee8:	addne	r6, r5, r4
   18eec:	beq	18f1c <__assert_fail@plt+0x629c>
   18ef0:	mov	r0, r7
   18ef4:	bl	12950 <strchr@plt>
   18ef8:	cmp	r0, #0
   18efc:	bne	18f44 <__assert_fail@plt+0x62c4>
   18f00:	ldrsb	r1, [r6, #1]!
   18f04:	add	r4, r4, #1
   18f08:	mov	r0, r4
   18f0c:	cmp	r1, #0
   18f10:	popeq	{r4, r5, r6, r7, r8, pc}
   18f14:	cmp	r1, #92	; 0x5c
   18f18:	bne	18ef0 <__assert_fail@plt+0x6270>
   18f1c:	add	r3, r5, r4
   18f20:	ldrsb	r3, [r3, #1]
   18f24:	cmp	r3, #0
   18f28:	beq	18f44 <__assert_fail@plt+0x62c4>
   18f2c:	add	r4, r4, #2
   18f30:	mov	r0, r4
   18f34:	ldrsb	r1, [r5, r4]
   18f38:	cmp	r1, #0
   18f3c:	bne	18ee4 <__assert_fail@plt+0x6264>
   18f40:	pop	{r4, r5, r6, r7, r8, pc}
   18f44:	mov	r0, r4
   18f48:	pop	{r4, r5, r6, r7, r8, pc}
   18f4c:	mov	r0, r1
   18f50:	pop	{r4, r5, r6, r7, r8, pc}
   18f54:	ldr	ip, [pc, #244]	; 19050 <__assert_fail@plt+0x63d0>
   18f58:	push	{r4, r5, r6, r7, r8, r9, lr}
   18f5c:	add	ip, pc, ip
   18f60:	ldr	lr, [pc, #236]	; 19054 <__assert_fail@plt+0x63d4>
   18f64:	sub	sp, sp, #12
   18f68:	mov	r5, #0
   18f6c:	ldr	r7, [ip, lr]
   18f70:	mov	r4, r0
   18f74:	mov	r8, r1
   18f78:	ldr	r3, [r7]
   18f7c:	mov	r0, ip
   18f80:	mov	r9, r2
   18f84:	str	r5, [sp]
   18f88:	str	r3, [sp, #4]
   18f8c:	bl	129a4 <__errno_location@plt>
   18f90:	cmp	r4, r5
   18f94:	str	r5, [r0]
   18f98:	beq	18fa8 <__assert_fail@plt+0x6328>
   18f9c:	ldrsb	r3, [r4]
   18fa0:	cmp	r3, r5
   18fa4:	bne	18fc8 <__assert_fail@plt+0x6348>
   18fa8:	ldr	r1, [pc, #168]	; 19058 <__assert_fail@plt+0x63d8>
   18fac:	mov	r3, r4
   18fb0:	add	r1, pc, r1
   18fb4:	mov	r2, r8
   18fb8:	ldr	r0, [r1]
   18fbc:	ldr	r1, [pc, #152]	; 1905c <__assert_fail@plt+0x63dc>
   18fc0:	add	r1, pc, r1
   18fc4:	bl	12b24 <errx@plt>
   18fc8:	mov	r6, r0
   18fcc:	mov	r2, r9
   18fd0:	mov	r3, r5
   18fd4:	mov	r1, sp
   18fd8:	mov	r0, r4
   18fdc:	bl	12698 <__strtoull_internal@plt>
   18fe0:	ldr	r2, [r6]
   18fe4:	cmp	r2, r5
   18fe8:	bne	19024 <__assert_fail@plt+0x63a4>
   18fec:	ldr	r3, [sp]
   18ff0:	cmp	r3, r4
   18ff4:	beq	18fa8 <__assert_fail@plt+0x6328>
   18ff8:	cmp	r3, r5
   18ffc:	beq	1900c <__assert_fail@plt+0x638c>
   19000:	ldrsb	r3, [r3]
   19004:	cmp	r3, r5
   19008:	bne	18fa8 <__assert_fail@plt+0x6328>
   1900c:	ldr	r2, [sp, #4]
   19010:	ldr	r3, [r7]
   19014:	cmp	r2, r3
   19018:	bne	1904c <__assert_fail@plt+0x63cc>
   1901c:	add	sp, sp, #12
   19020:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19024:	ldr	r3, [pc, #52]	; 19060 <__assert_fail@plt+0x63e0>
   19028:	cmp	r2, #34	; 0x22
   1902c:	add	r3, pc, r3
   19030:	ldr	r0, [r3]
   19034:	bne	18fa8 <__assert_fail@plt+0x6328>
   19038:	ldr	r1, [pc, #36]	; 19064 <__assert_fail@plt+0x63e4>
   1903c:	mov	r3, r4
   19040:	mov	r2, r8
   19044:	add	r1, pc, r1
   19048:	bl	12728 <err@plt>
   1904c:	bl	126e0 <__stack_chk_fail@plt>
   19050:	andeq	sl, r1, r8, ror #27
   19054:	andeq	r0, r0, r8, lsr #5
   19058:	andeq	fp, r1, r0, asr r0
   1905c:	ldrdeq	r9, [r0], -ip
   19060:	ldrdeq	sl, [r1], -r4
   19064:	andeq	r9, r0, r8, asr lr
   19068:	push	{r4, lr}
   1906c:	mov	r5, r0
   19070:	mov	r4, r1
   19074:	bl	129a4 <__errno_location@plt>
   19078:	ldr	ip, [pc, #32]	; 190a0 <__assert_fail@plt+0x6420>
   1907c:	ldr	r1, [pc, #32]	; 190a4 <__assert_fail@plt+0x6424>
   19080:	add	ip, pc, ip
   19084:	mov	lr, #34	; 0x22
   19088:	mov	r3, r5
   1908c:	mov	r2, r4
   19090:	add	r1, pc, r1
   19094:	str	lr, [r0]
   19098:	ldr	r0, [ip]
   1909c:	bl	12728 <err@plt>
   190a0:	andeq	sl, r1, r0, lsl #31
   190a4:	andeq	r9, r0, ip, lsl #28
   190a8:	push	{r4, r5, r6, lr}
   190ac:	mov	r4, r0
   190b0:	mov	r5, r1
   190b4:	bl	18f54 <__assert_fail@plt+0x62d4>
   190b8:	mov	r3, #0
   190bc:	mvn	r2, #0
   190c0:	cmp	r1, r3
   190c4:	cmpeq	r0, r2
   190c8:	popls	{r4, r5, r6, pc}
   190cc:	mov	r1, r5
   190d0:	mov	r0, r4
   190d4:	bl	19068 <__assert_fail@plt+0x63e8>
   190d8:	ldr	r3, [pc, #8]	; 190e8 <__assert_fail@plt+0x6468>
   190dc:	add	r3, pc, r3
   190e0:	str	r0, [r3]
   190e4:	bx	lr
   190e8:	andeq	sl, r1, r4, lsr #30
   190ec:	ldr	r3, [pc, #1648]	; 19764 <__assert_fail@plt+0x6ae4>
   190f0:	ldr	ip, [pc, #1648]	; 19768 <__assert_fail@plt+0x6ae8>
   190f4:	add	r3, pc, r3
   190f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190fc:	mov	r5, r1
   19100:	ldr	r1, [r3, ip]
   19104:	sub	sp, sp, #52	; 0x34
   19108:	mov	ip, r1
   1910c:	mov	r8, r0
   19110:	str	r1, [sp, #24]
   19114:	mov	r0, #0
   19118:	mov	r1, #0
   1911c:	ldr	r3, [ip]
   19120:	strd	r0, [r5]
   19124:	mov	r9, r2
   19128:	str	r3, [sp, #44]	; 0x2c
   1912c:	bl	129a4 <__errno_location@plt>
   19130:	cmp	r8, #0
   19134:	mov	r4, r0
   19138:	beq	19318 <__assert_fail@plt+0x6698>
   1913c:	ldrsb	fp, [r8]
   19140:	cmp	fp, #0
   19144:	beq	19318 <__assert_fail@plt+0x6698>
   19148:	bl	128e4 <__ctype_b_loc@plt>
   1914c:	mov	r2, r8
   19150:	ldr	r1, [r0]
   19154:	b	1915c <__assert_fail@plt+0x64dc>
   19158:	ldrsb	fp, [r2, #1]!
   1915c:	uxtb	r3, fp
   19160:	lsl	r3, r3, #1
   19164:	ldrh	ip, [r1, r3]
   19168:	ands	ip, ip, #8192	; 0x2000
   1916c:	bne	19158 <__assert_fail@plt+0x64d8>
   19170:	cmp	fp, #45	; 0x2d
   19174:	beq	19318 <__assert_fail@plt+0x6698>
   19178:	add	fp, sp, #40	; 0x28
   1917c:	mov	r3, ip
   19180:	mov	r2, ip
   19184:	str	ip, [r4]
   19188:	mov	r1, fp
   1918c:	mov	r0, r8
   19190:	str	ip, [sp, #40]	; 0x28
   19194:	bl	12698 <__strtoull_internal@plt>
   19198:	ldr	sl, [sp, #40]	; 0x28
   1919c:	cmp	sl, r8
   191a0:	mov	r2, r0
   191a4:	mov	r3, r1
   191a8:	ldr	r0, [r4]
   191ac:	strd	r2, [sp, #16]
   191b0:	beq	19498 <__assert_fail@plt+0x6818>
   191b4:	cmp	r0, #0
   191b8:	bne	19340 <__assert_fail@plt+0x66c0>
   191bc:	cmp	sl, #0
   191c0:	beq	194cc <__assert_fail@plt+0x684c>
   191c4:	ldrsb	r0, [sl]
   191c8:	cmp	r0, #0
   191cc:	beq	194c0 <__assert_fail@plt+0x6840>
   191d0:	mov	r8, #0
   191d4:	mov	r2, #0
   191d8:	mov	r3, #0
   191dc:	str	r9, [sp, #32]
   191e0:	mov	r6, fp
   191e4:	mov	r9, sl
   191e8:	mov	r7, r8
   191ec:	mov	sl, r2
   191f0:	mov	fp, r3
   191f4:	str	r5, [sp, #28]
   191f8:	ldrsb	r2, [r9, #1]
   191fc:	cmp	r2, #105	; 0x69
   19200:	beq	19384 <__assert_fail@plt+0x6704>
   19204:	bic	r1, r2, #32
   19208:	cmp	r1, #66	; 0x42
   1920c:	bne	194a4 <__assert_fail@plt+0x6824>
   19210:	ldrsb	r2, [r9, #2]
   19214:	cmp	r2, #0
   19218:	beq	19688 <__assert_fail@plt+0x6a08>
   1921c:	bl	12b78 <localeconv@plt>
   19220:	cmp	r0, #0
   19224:	beq	19318 <__assert_fail@plt+0x6698>
   19228:	ldr	r2, [r0]
   1922c:	cmp	r2, #0
   19230:	beq	19318 <__assert_fail@plt+0x6698>
   19234:	mov	r0, r2
   19238:	str	r2, [sp]
   1923c:	bl	12938 <strlen@plt>
   19240:	orrs	r3, sl, fp
   19244:	mov	r5, r0
   19248:	bne	19318 <__assert_fail@plt+0x6698>
   1924c:	ldrsb	r1, [r9]
   19250:	cmp	r1, #0
   19254:	beq	19318 <__assert_fail@plt+0x6698>
   19258:	ldr	r2, [sp]
   1925c:	mov	r1, r9
   19260:	mov	r0, r2
   19264:	mov	r2, r5
   19268:	bl	12c14 <strncmp@plt>
   1926c:	cmp	r0, #0
   19270:	bne	19318 <__assert_fail@plt+0x6698>
   19274:	ldrsb	r2, [r9, r5]
   19278:	add	r5, r9, r5
   1927c:	cmp	r2, #48	; 0x30
   19280:	bne	192a0 <__assert_fail@plt+0x6620>
   19284:	add	r8, r8, #1
   19288:	sub	r1, r8, r5
   1928c:	mov	r3, r5
   19290:	add	r8, r3, r1
   19294:	ldrsb	r2, [r3, #1]!
   19298:	cmp	r2, #48	; 0x30
   1929c:	beq	19290 <__assert_fail@plt+0x6610>
   192a0:	mov	r3, #0
   192a4:	str	r7, [r4]
   192a8:	mov	r2, r3
   192ac:	mov	r1, r6
   192b0:	mov	r0, r5
   192b4:	str	r7, [sp, #40]	; 0x28
   192b8:	bl	12698 <__strtoull_internal@plt>
   192bc:	ldr	r9, [sp, #40]	; 0x28
   192c0:	cmp	r9, r5
   192c4:	mov	sl, r0
   192c8:	mov	fp, r1
   192cc:	beq	19494 <__assert_fail@plt+0x6814>
   192d0:	ldr	ip, [r4]
   192d4:	cmp	ip, #0
   192d8:	beq	19370 <__assert_fail@plt+0x66f0>
   192dc:	subs	r3, r0, #1
   192e0:	str	r3, [sp, #8]
   192e4:	sbc	r3, r1, #0
   192e8:	str	r3, [sp, #12]
   192ec:	ldrd	r2, [sp, #8]
   192f0:	mvn	r1, #0
   192f4:	mvn	r0, #2
   192f8:	cmp	r3, r1
   192fc:	cmpeq	r2, r0
   19300:	bhi	196c4 <__assert_fail@plt+0x6a44>
   19304:	cmp	r9, #0
   19308:	beq	19318 <__assert_fail@plt+0x6698>
   1930c:	ldrsb	r2, [r9]
   19310:	cmp	r2, #0
   19314:	bne	191f8 <__assert_fail@plt+0x6578>
   19318:	mov	r3, #22
   1931c:	mvn	r0, #21
   19320:	str	r3, [r4]
   19324:	ldr	r3, [sp, #24]
   19328:	ldr	r2, [sp, #44]	; 0x2c
   1932c:	ldr	r3, [r3]
   19330:	cmp	r2, r3
   19334:	bne	19760 <__assert_fail@plt+0x6ae0>
   19338:	add	sp, sp, #52	; 0x34
   1933c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19340:	subs	r6, r2, #1
   19344:	sbc	r7, r3, #0
   19348:	mvn	r3, #0
   1934c:	mvn	r2, #2
   19350:	cmp	r7, r3
   19354:	cmpeq	r6, r2
   19358:	bls	191bc <__assert_fail@plt+0x653c>
   1935c:	rsb	r0, r0, #0
   19360:	cmp	r0, #0
   19364:	bge	19324 <__assert_fail@plt+0x66a4>
   19368:	rsb	r3, r0, #0
   1936c:	b	19320 <__assert_fail@plt+0x66a0>
   19370:	orrs	r3, sl, fp
   19374:	bne	19304 <__assert_fail@plt+0x6684>
   19378:	ldrsb	r2, [r9, #1]
   1937c:	cmp	r2, #105	; 0x69
   19380:	bne	19204 <__assert_fail@plt+0x6584>
   19384:	ldrsb	r2, [r9, #2]
   19388:	bic	r2, r2, #32
   1938c:	cmp	r2, #66	; 0x42
   19390:	bne	1921c <__assert_fail@plt+0x659c>
   19394:	ldrsb	r2, [r9, #3]
   19398:	cmp	r2, #0
   1939c:	bne	1921c <__assert_fail@plt+0x659c>
   193a0:	strd	sl, [sp]
   193a4:	mov	sl, r9
   193a8:	ldr	r9, [sp, #32]
   193ac:	mov	r3, #1024	; 0x400
   193b0:	ldr	r5, [sp, #28]
   193b4:	str	r3, [sp, #28]
   193b8:	ldrsb	r7, [sl]
   193bc:	ldr	r6, [pc, #936]	; 1976c <__assert_fail@plt+0x6aec>
   193c0:	add	r6, pc, r6
   193c4:	mov	r1, r7
   193c8:	mov	r0, r6
   193cc:	bl	12950 <strchr@plt>
   193d0:	cmp	r0, #0
   193d4:	beq	196a4 <__assert_fail@plt+0x6a24>
   193d8:	sub	ip, r0, r6
   193dc:	add	fp, ip, #1
   193e0:	cmp	fp, #0
   193e4:	beq	194b0 <__assert_fail@plt+0x6830>
   193e8:	ldr	r3, [sp, #20]
   193ec:	ldr	r6, [sp, #28]
   193f0:	cmp	r3, #0
   193f4:	mov	r0, #0
   193f8:	asr	r7, r6, #31
   193fc:	mov	r1, #0
   19400:	bne	19700 <__assert_fail@plt+0x6a80>
   19404:	orrs	r3, r0, r1
   19408:	bne	194f4 <__assert_fail@plt+0x6874>
   1940c:	str	fp, [sp, #32]
   19410:	sub	ip, ip, #1
   19414:	str	r8, [sp, #36]	; 0x24
   19418:	mov	fp, r4
   1941c:	ldrd	r0, [sp, #16]
   19420:	mov	lr, r5
   19424:	mov	sl, r9
   19428:	b	19438 <__assert_fail@plt+0x67b8>
   1942c:	orrs	r3, r4, r5
   19430:	sub	ip, ip, #1
   19434:	bne	194dc <__assert_fail@plt+0x685c>
   19438:	mul	r2, r0, r7
   1943c:	cmn	ip, #1
   19440:	mla	r2, r6, r1, r2
   19444:	umull	r0, r1, r0, r6
   19448:	add	r2, r2, r1
   1944c:	mov	r1, r2
   19450:	beq	19668 <__assert_fail@plt+0x69e8>
   19454:	cmp	r2, #0
   19458:	mov	r4, #0
   1945c:	mov	r5, #0
   19460:	beq	1942c <__assert_fail@plt+0x67ac>
   19464:	umull	r2, r3, r6, r2
   19468:	umull	r8, r9, r0, r6
   1946c:	strd	r2, [sp, #8]
   19470:	mov	r8, r9
   19474:	ldr	r3, [sp, #12]
   19478:	adds	r8, r2, r8
   1947c:	mov	r2, #0
   19480:	adc	r3, r3, r2
   19484:	cmp	r3, r2
   19488:	movne	r4, #1
   1948c:	movne	r5, #0
   19490:	b	1942c <__assert_fail@plt+0x67ac>
   19494:	ldr	r0, [r4]
   19498:	cmp	r0, #0
   1949c:	beq	19318 <__assert_fail@plt+0x6698>
   194a0:	b	1935c <__assert_fail@plt+0x66dc>
   194a4:	cmp	r2, #0
   194a8:	bne	1921c <__assert_fail@plt+0x659c>
   194ac:	b	193a0 <__assert_fail@plt+0x6720>
   194b0:	cmp	r9, #0
   194b4:	movne	r0, fp
   194b8:	bne	19500 <__assert_fail@plt+0x6880>
   194bc:	mov	r0, r9
   194c0:	ldrd	r2, [sp, #16]
   194c4:	strd	r2, [r5]
   194c8:	b	19324 <__assert_fail@plt+0x66a4>
   194cc:	ldrd	r2, [sp, #16]
   194d0:	mov	r0, sl
   194d4:	strd	r2, [r5]
   194d8:	b	19324 <__assert_fail@plt+0x66a4>
   194dc:	mov	r4, fp
   194e0:	ldr	r8, [sp, #36]	; 0x24
   194e4:	ldr	fp, [sp, #32]
   194e8:	mov	r5, lr
   194ec:	mov	r9, sl
   194f0:	strd	r0, [sp, #16]
   194f4:	mvn	r0, #33	; 0x21
   194f8:	cmp	r9, #0
   194fc:	beq	19504 <__assert_fail@plt+0x6884>
   19500:	str	fp, [r9]
   19504:	ldrd	r2, [sp]
   19508:	mov	r1, r2
   1950c:	orrs	r3, r1, r3
   19510:	movne	r3, #1
   19514:	moveq	r3, #0
   19518:	cmp	fp, #0
   1951c:	moveq	r3, #0
   19520:	cmp	r3, #0
   19524:	beq	1965c <__assert_fail@plt+0x69dc>
   19528:	ldr	r3, [pc, #576]	; 19770 <__assert_fail@plt+0x6af0>
   1952c:	ldr	r1, [pc, #576]	; 19774 <__assert_fail@plt+0x6af4>
   19530:	umull	ip, r3, r3, r8
   19534:	smull	ip, r1, r1, r8
   19538:	lsr	r3, r3, #1
   1953c:	rsb	r1, r1, r8, asr #31
   19540:	add	r3, r3, r3, lsl #1
   19544:	add	r1, r1, fp
   19548:	subs	r3, r8, r3
   1954c:	sub	r6, r1, #1
   19550:	bne	196cc <__assert_fail@plt+0x6a4c>
   19554:	ldrd	r8, [sp]
   19558:	adds	r3, r8, r8
   1955c:	adc	r2, r9, r9
   19560:	adds	r3, r3, r8
   19564:	adc	r2, r2, r9
   19568:	lsl	ip, r3, #5
   1956c:	lsl	lr, r2, #5
   19570:	orr	lr, lr, r3, lsr #27
   19574:	adds	r3, r3, ip
   19578:	adc	r2, r2, lr
   1957c:	adds	r3, r8, r3
   19580:	str	r3, [sp]
   19584:	ldr	r3, [sp, #4]
   19588:	adc	r3, r3, r2
   1958c:	str	r3, [sp, #4]
   19590:	cmp	r6, #0
   19594:	blt	19318 <__assert_fail@plt+0x6698>
   19598:	beq	19640 <__assert_fail@plt+0x69c0>
   1959c:	ldr	r3, [sp, #4]
   195a0:	ldr	r8, [sp, #28]
   195a4:	cmp	r3, #0
   195a8:	mov	r6, #0
   195ac:	asr	r9, r8, #31
   195b0:	mov	r7, #0
   195b4:	bne	19734 <__assert_fail@plt+0x6ab4>
   195b8:	orrs	r3, r6, r7
   195bc:	bne	19640 <__assert_fail@plt+0x69c0>
   195c0:	sub	r1, r1, #3
   195c4:	ldrd	r2, [sp]
   195c8:	mov	lr, r4
   195cc:	str	r5, [sp, #8]
   195d0:	b	195e0 <__assert_fail@plt+0x6960>
   195d4:	orrs	ip, r6, r7
   195d8:	sub	r1, r1, #1
   195dc:	bne	19634 <__assert_fail@plt+0x69b4>
   195e0:	mul	ip, r2, r9
   195e4:	cmn	r1, #1
   195e8:	mla	ip, r8, r3, ip
   195ec:	umull	r2, r3, r2, r8
   195f0:	add	ip, ip, r3
   195f4:	mov	r3, ip
   195f8:	beq	19634 <__assert_fail@plt+0x69b4>
   195fc:	cmp	ip, #0
   19600:	mov	r6, #0
   19604:	mov	r7, #0
   19608:	beq	195d4 <__assert_fail@plt+0x6954>
   1960c:	umull	sl, fp, r2, r8
   19610:	umull	r4, r5, r8, ip
   19614:	mov	ip, fp
   19618:	adds	ip, r4, ip
   1961c:	mov	ip, #0
   19620:	adc	ip, r5, ip
   19624:	cmp	ip, #0
   19628:	movne	r6, #1
   1962c:	movne	r7, #0
   19630:	b	195d4 <__assert_fail@plt+0x6954>
   19634:	ldr	r5, [sp, #8]
   19638:	mov	r4, lr
   1963c:	strd	r2, [sp]
   19640:	ldrd	r2, [sp]
   19644:	ldr	r1, [sp, #16]
   19648:	adds	r1, r1, r2
   1964c:	str	r1, [sp, #16]
   19650:	ldr	r1, [sp, #20]
   19654:	adc	r3, r1, r3
   19658:	str	r3, [sp, #20]
   1965c:	ldrd	r2, [sp, #16]
   19660:	strd	r2, [r5]
   19664:	b	19360 <__assert_fail@plt+0x66e0>
   19668:	mov	r4, fp
   1966c:	strd	r0, [sp, #16]
   19670:	ldr	r8, [sp, #36]	; 0x24
   19674:	ldr	fp, [sp, #32]
   19678:	mov	r5, lr
   1967c:	mov	r9, sl
   19680:	mov	r0, #0
   19684:	b	194f8 <__assert_fail@plt+0x6878>
   19688:	mov	r3, #1000	; 0x3e8
   1968c:	strd	sl, [sp]
   19690:	ldr	r5, [sp, #28]
   19694:	mov	sl, r9
   19698:	str	r3, [sp, #28]
   1969c:	ldr	r9, [sp, #32]
   196a0:	b	193b8 <__assert_fail@plt+0x6738>
   196a4:	ldr	r6, [pc, #204]	; 19778 <__assert_fail@plt+0x6af8>
   196a8:	mov	r1, r7
   196ac:	add	r6, pc, r6
   196b0:	mov	r0, r6
   196b4:	bl	12950 <strchr@plt>
   196b8:	cmp	r0, #0
   196bc:	bne	193d8 <__assert_fail@plt+0x6758>
   196c0:	b	19318 <__assert_fail@plt+0x6698>
   196c4:	mov	r0, ip
   196c8:	b	1935c <__assert_fail@plt+0x66dc>
   196cc:	cmp	r3, #1
   196d0:	bne	19590 <__assert_fail@plt+0x6910>
   196d4:	ldrd	r8, [sp]
   196d8:	lsl	r2, r9, #2
   196dc:	lsl	r3, r8, #2
   196e0:	adds	r3, r3, r8
   196e4:	orr	r2, r2, r8, lsr #30
   196e8:	adc	r2, r2, r9
   196ec:	adds	r3, r3, r3
   196f0:	str	r3, [sp]
   196f4:	adc	r3, r2, r2
   196f8:	str	r3, [sp, #4]
   196fc:	b	19590 <__assert_fail@plt+0x6910>
   19700:	ldr	lr, [sp, #28]
   19704:	ldr	r3, [sp, #16]
   19708:	ldr	sl, [sp, #20]
   1970c:	umull	r2, r3, r3, lr
   19710:	str	r3, [sp, #8]
   19714:	mov	r3, #0
   19718:	str	r3, [sp, #12]
   1971c:	ldrd	r2, [sp, #8]
   19720:	umlal	r2, r3, sl, lr
   19724:	cmp	r3, #0
   19728:	movne	r0, #1
   1972c:	movne	r1, #0
   19730:	b	19404 <__assert_fail@plt+0x6784>
   19734:	ldr	r3, [sp]
   19738:	ldr	ip, [sp, #28]
   1973c:	ldr	lr, [sp, #4]
   19740:	umull	sl, fp, r3, ip
   19744:	mov	r3, #0
   19748:	mov	r2, fp
   1974c:	umlal	r2, r3, lr, ip
   19750:	cmp	r3, #0
   19754:	movne	r6, #1
   19758:	movne	r7, #0
   1975c:	b	195b8 <__assert_fail@plt+0x6938>
   19760:	bl	126e0 <__stack_chk_fail@plt>
   19764:	andeq	sl, r1, r0, asr ip
   19768:	andeq	r0, r0, r8, lsr #5
   1976c:	andeq	r9, r0, r8, ror #21
   19770:	bge	feac4224 <optarg@@GLIBC_2.4+0xfea901fc>
   19774:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   19778:	andeq	r9, r0, r8, lsl #16
   1977c:	mov	r2, #0
   19780:	b	190ec <__assert_fail@plt+0x646c>
   19784:	push	{r4, r5, r6, lr}
   19788:	subs	r5, r0, #0
   1978c:	mov	r6, r1
   19790:	beq	197fc <__assert_fail@plt+0x6b7c>
   19794:	ldrsb	r4, [r5]
   19798:	cmp	r4, #0
   1979c:	beq	19810 <__assert_fail@plt+0x6b90>
   197a0:	bl	128e4 <__ctype_b_loc@plt>
   197a4:	mov	r3, r5
   197a8:	ldr	r0, [r0]
   197ac:	b	197c4 <__assert_fail@plt+0x6b44>
   197b0:	adds	r3, r3, #1
   197b4:	beq	197fc <__assert_fail@plt+0x6b7c>
   197b8:	ldrsb	r4, [r3]
   197bc:	cmp	r4, #0
   197c0:	beq	197d8 <__assert_fail@plt+0x6b58>
   197c4:	uxtb	r4, r4
   197c8:	lsl	r4, r4, #1
   197cc:	ldrh	r2, [r0, r4]
   197d0:	tst	r2, #2048	; 0x800
   197d4:	bne	197b0 <__assert_fail@plt+0x6b30>
   197d8:	cmp	r6, #0
   197dc:	strne	r3, [r6]
   197e0:	cmp	r5, r3
   197e4:	bcs	19808 <__assert_fail@plt+0x6b88>
   197e8:	ldrsb	r3, [r3]
   197ec:	cmp	r3, #0
   197f0:	bne	19808 <__assert_fail@plt+0x6b88>
   197f4:	mov	r0, #1
   197f8:	pop	{r4, r5, r6, pc}
   197fc:	cmp	r6, #0
   19800:	movne	r3, #0
   19804:	strne	r3, [r6]
   19808:	mov	r0, #0
   1980c:	pop	{r4, r5, r6, pc}
   19810:	cmp	r1, #0
   19814:	strne	r5, [r1]
   19818:	b	19808 <__assert_fail@plt+0x6b88>
   1981c:	push	{r4, r5, r6, lr}
   19820:	subs	r5, r0, #0
   19824:	mov	r6, r1
   19828:	beq	19894 <__assert_fail@plt+0x6c14>
   1982c:	ldrsb	r4, [r5]
   19830:	cmp	r4, #0
   19834:	beq	198a8 <__assert_fail@plt+0x6c28>
   19838:	bl	128e4 <__ctype_b_loc@plt>
   1983c:	mov	r3, r5
   19840:	ldr	r0, [r0]
   19844:	b	1985c <__assert_fail@plt+0x6bdc>
   19848:	adds	r3, r3, #1
   1984c:	beq	19894 <__assert_fail@plt+0x6c14>
   19850:	ldrsb	r4, [r3]
   19854:	cmp	r4, #0
   19858:	beq	19870 <__assert_fail@plt+0x6bf0>
   1985c:	uxtb	r4, r4
   19860:	lsl	r4, r4, #1
   19864:	ldrh	r2, [r0, r4]
   19868:	tst	r2, #4096	; 0x1000
   1986c:	bne	19848 <__assert_fail@plt+0x6bc8>
   19870:	cmp	r6, #0
   19874:	strne	r3, [r6]
   19878:	cmp	r5, r3
   1987c:	bcs	198a0 <__assert_fail@plt+0x6c20>
   19880:	ldrsb	r3, [r3]
   19884:	cmp	r3, #0
   19888:	bne	198a0 <__assert_fail@plt+0x6c20>
   1988c:	mov	r0, #1
   19890:	pop	{r4, r5, r6, pc}
   19894:	cmp	r6, #0
   19898:	movne	r3, #0
   1989c:	strne	r3, [r6]
   198a0:	mov	r0, #0
   198a4:	pop	{r4, r5, r6, pc}
   198a8:	cmp	r1, #0
   198ac:	strne	r5, [r1]
   198b0:	b	198a0 <__assert_fail@plt+0x6c20>
   198b4:	push	{r1, r2, r3}
   198b8:	ldr	r3, [pc, #188]	; 1997c <__assert_fail@plt+0x6cfc>
   198bc:	ldr	r2, [pc, #188]	; 19980 <__assert_fail@plt+0x6d00>
   198c0:	add	r3, pc, r3
   198c4:	push	{r4, r5, r6, r7, r8, lr}
   198c8:	sub	sp, sp, #12
   198cc:	ldr	r7, [r3, r2]
   198d0:	ldr	r8, [sp, #36]	; 0x24
   198d4:	mov	r6, r0
   198d8:	ldr	r3, [r7]
   198dc:	add	r4, sp, #48	; 0x30
   198e0:	str	r3, [sp, #4]
   198e4:	b	19900 <__assert_fail@plt+0x6c80>
   198e8:	mov	r1, r5
   198ec:	mov	r0, r6
   198f0:	bl	12524 <strcmp@plt>
   198f4:	add	r4, r4, #8
   198f8:	cmp	r0, #0
   198fc:	beq	19938 <__assert_fail@plt+0x6cb8>
   19900:	ldr	r1, [r4, #-8]
   19904:	sub	r3, r4, #4
   19908:	cmp	r1, #0
   1990c:	str	r3, [sp]
   19910:	beq	19958 <__assert_fail@plt+0x6cd8>
   19914:	ldr	r5, [r4, #-4]
   19918:	str	r4, [sp]
   1991c:	cmp	r5, #0
   19920:	beq	19958 <__assert_fail@plt+0x6cd8>
   19924:	mov	r0, r6
   19928:	bl	12524 <strcmp@plt>
   1992c:	cmp	r0, #0
   19930:	bne	198e8 <__assert_fail@plt+0x6c68>
   19934:	mov	r0, #1
   19938:	ldr	r2, [sp, #4]
   1993c:	ldr	r3, [r7]
   19940:	cmp	r2, r3
   19944:	bne	19978 <__assert_fail@plt+0x6cf8>
   19948:	add	sp, sp, #12
   1994c:	pop	{r4, r5, r6, r7, r8, lr}
   19950:	add	sp, sp, #12
   19954:	bx	lr
   19958:	ldr	r1, [pc, #36]	; 19984 <__assert_fail@plt+0x6d04>
   1995c:	mov	r3, r6
   19960:	add	r1, pc, r1
   19964:	mov	r2, r8
   19968:	ldr	r0, [r1]
   1996c:	ldr	r1, [pc, #20]	; 19988 <__assert_fail@plt+0x6d08>
   19970:	add	r1, pc, r1
   19974:	bl	12b24 <errx@plt>
   19978:	bl	126e0 <__stack_chk_fail@plt>
   1997c:	andeq	sl, r1, r4, lsl #9
   19980:	andeq	r0, r0, r8, lsr #5
   19984:	andeq	sl, r1, r0, lsr #13
   19988:	andeq	r9, r0, ip, lsr #10
   1998c:	cmp	r1, #0
   19990:	beq	199dc <__assert_fail@plt+0x6d5c>
   19994:	ldrsb	r3, [r0]
   19998:	cmp	r3, #0
   1999c:	beq	199dc <__assert_fail@plt+0x6d5c>
   199a0:	sxtb	r2, r2
   199a4:	cmp	r3, r2
   199a8:	bxeq	lr
   199ac:	add	r1, r0, r1
   199b0:	add	r3, r0, #1
   199b4:	b	199d0 <__assert_fail@plt+0x6d50>
   199b8:	ldrsb	ip, [r3]
   199bc:	add	r3, r3, #1
   199c0:	cmp	ip, #0
   199c4:	beq	199dc <__assert_fail@plt+0x6d5c>
   199c8:	cmp	ip, r2
   199cc:	bxeq	lr
   199d0:	cmp	r3, r1
   199d4:	mov	r0, r3
   199d8:	bne	199b8 <__assert_fail@plt+0x6d38>
   199dc:	mov	r0, #0
   199e0:	bx	lr
   199e4:	push	{r4, r5, r6, lr}
   199e8:	mov	r2, #10
   199ec:	mov	r4, r0
   199f0:	mov	r5, r1
   199f4:	bl	190a8 <__assert_fail@plt+0x6428>
   199f8:	cmp	r0, #65536	; 0x10000
   199fc:	bcs	19a08 <__assert_fail@plt+0x6d88>
   19a00:	uxth	r0, r0
   19a04:	pop	{r4, r5, r6, pc}
   19a08:	mov	r1, r5
   19a0c:	mov	r0, r4
   19a10:	bl	19068 <__assert_fail@plt+0x63e8>
   19a14:	push	{r4, r5, r6, lr}
   19a18:	mov	r2, #16
   19a1c:	mov	r4, r0
   19a20:	mov	r5, r1
   19a24:	bl	190a8 <__assert_fail@plt+0x6428>
   19a28:	cmp	r0, #65536	; 0x10000
   19a2c:	bcs	19a38 <__assert_fail@plt+0x6db8>
   19a30:	uxth	r0, r0
   19a34:	pop	{r4, r5, r6, pc}
   19a38:	mov	r1, r5
   19a3c:	mov	r0, r4
   19a40:	bl	19068 <__assert_fail@plt+0x63e8>
   19a44:	mov	r2, #10
   19a48:	b	190a8 <__assert_fail@plt+0x6428>
   19a4c:	mov	r2, #16
   19a50:	b	190a8 <__assert_fail@plt+0x6428>
   19a54:	ldr	r2, [pc, #236]	; 19b48 <__assert_fail@plt+0x6ec8>
   19a58:	ldr	ip, [pc, #236]	; 19b4c <__assert_fail@plt+0x6ecc>
   19a5c:	add	r2, pc, r2
   19a60:	push	{r4, r5, r6, r7, r8, lr}
   19a64:	sub	sp, sp, #8
   19a68:	ldr	r7, [r2, ip]
   19a6c:	mov	r5, #0
   19a70:	mov	r4, r0
   19a74:	ldr	r3, [r7]
   19a78:	mov	r8, r1
   19a7c:	str	r5, [sp]
   19a80:	str	r3, [sp, #4]
   19a84:	bl	129a4 <__errno_location@plt>
   19a88:	cmp	r4, r5
   19a8c:	str	r5, [r0]
   19a90:	beq	19aa0 <__assert_fail@plt+0x6e20>
   19a94:	ldrsb	r3, [r4]
   19a98:	cmp	r3, r5
   19a9c:	bne	19ac0 <__assert_fail@plt+0x6e40>
   19aa0:	ldr	r1, [pc, #168]	; 19b50 <__assert_fail@plt+0x6ed0>
   19aa4:	mov	r3, r4
   19aa8:	add	r1, pc, r1
   19aac:	mov	r2, r8
   19ab0:	ldr	r0, [r1]
   19ab4:	ldr	r1, [pc, #152]	; 19b54 <__assert_fail@plt+0x6ed4>
   19ab8:	add	r1, pc, r1
   19abc:	bl	12b24 <errx@plt>
   19ac0:	mov	r6, r0
   19ac4:	mov	r2, #10
   19ac8:	mov	r3, r5
   19acc:	mov	r1, sp
   19ad0:	mov	r0, r4
   19ad4:	bl	12bc0 <__strtoll_internal@plt>
   19ad8:	ldr	r2, [r6]
   19adc:	cmp	r2, r5
   19ae0:	bne	19b1c <__assert_fail@plt+0x6e9c>
   19ae4:	ldr	r3, [sp]
   19ae8:	cmp	r3, r4
   19aec:	beq	19aa0 <__assert_fail@plt+0x6e20>
   19af0:	cmp	r3, r5
   19af4:	beq	19b04 <__assert_fail@plt+0x6e84>
   19af8:	ldrsb	r3, [r3]
   19afc:	cmp	r3, r5
   19b00:	bne	19aa0 <__assert_fail@plt+0x6e20>
   19b04:	ldr	r2, [sp, #4]
   19b08:	ldr	r3, [r7]
   19b0c:	cmp	r2, r3
   19b10:	bne	19b44 <__assert_fail@plt+0x6ec4>
   19b14:	add	sp, sp, #8
   19b18:	pop	{r4, r5, r6, r7, r8, pc}
   19b1c:	ldr	r3, [pc, #52]	; 19b58 <__assert_fail@plt+0x6ed8>
   19b20:	cmp	r2, #34	; 0x22
   19b24:	add	r3, pc, r3
   19b28:	ldr	r0, [r3]
   19b2c:	bne	19aa0 <__assert_fail@plt+0x6e20>
   19b30:	ldr	r1, [pc, #36]	; 19b5c <__assert_fail@plt+0x6edc>
   19b34:	mov	r3, r4
   19b38:	mov	r2, r8
   19b3c:	add	r1, pc, r1
   19b40:	bl	12728 <err@plt>
   19b44:	bl	126e0 <__stack_chk_fail@plt>
   19b48:	andeq	sl, r1, r8, ror #5
   19b4c:	andeq	r0, r0, r8, lsr #5
   19b50:	andeq	sl, r1, r8, asr r5
   19b54:	andeq	r9, r0, r4, ror #7
   19b58:	ldrdeq	sl, [r1], -ip
   19b5c:	andeq	r9, r0, r0, ror #6
   19b60:	push	{r4, r5, r6, r7, r8, lr}
   19b64:	mov	r7, r0
   19b68:	mov	r6, r1
   19b6c:	bl	19a54 <__assert_fail@plt+0x6dd4>
   19b70:	mov	r3, #0
   19b74:	mvn	r2, #0
   19b78:	adds	r4, r0, #-2147483648	; 0x80000000
   19b7c:	adc	r5, r1, #0
   19b80:	cmp	r5, r3
   19b84:	cmpeq	r4, r2
   19b88:	popls	{r4, r5, r6, r7, r8, pc}
   19b8c:	bl	129a4 <__errno_location@plt>
   19b90:	ldr	ip, [pc, #32]	; 19bb8 <__assert_fail@plt+0x6f38>
   19b94:	ldr	r1, [pc, #32]	; 19bbc <__assert_fail@plt+0x6f3c>
   19b98:	add	ip, pc, ip
   19b9c:	mov	lr, #34	; 0x22
   19ba0:	mov	r3, r7
   19ba4:	mov	r2, r6
   19ba8:	add	r1, pc, r1
   19bac:	str	lr, [r0]
   19bb0:	ldr	r0, [ip]
   19bb4:	bl	12728 <err@plt>
   19bb8:	andeq	sl, r1, r8, ror #8
   19bbc:	strdeq	r9, [r0], -r4
   19bc0:	push	{r4, r5, r6, lr}
   19bc4:	mov	r5, r0
   19bc8:	mov	r4, r1
   19bcc:	bl	19b60 <__assert_fail@plt+0x6ee0>
   19bd0:	add	r3, r0, #32768	; 0x8000
   19bd4:	cmp	r3, #65536	; 0x10000
   19bd8:	bcs	19be4 <__assert_fail@plt+0x6f64>
   19bdc:	sxth	r0, r0
   19be0:	pop	{r4, r5, r6, pc}
   19be4:	bl	129a4 <__errno_location@plt>
   19be8:	ldr	ip, [pc, #32]	; 19c10 <__assert_fail@plt+0x6f90>
   19bec:	ldr	r1, [pc, #32]	; 19c14 <__assert_fail@plt+0x6f94>
   19bf0:	add	ip, pc, ip
   19bf4:	mov	lr, #34	; 0x22
   19bf8:	mov	r3, r5
   19bfc:	mov	r2, r4
   19c00:	add	r1, pc, r1
   19c04:	str	lr, [r0]
   19c08:	ldr	r0, [ip]
   19c0c:	bl	12728 <err@plt>
   19c10:	andeq	sl, r1, r0, lsl r4
   19c14:	muleq	r0, ip, r2
   19c18:	mov	r2, #10
   19c1c:	b	18f54 <__assert_fail@plt+0x62d4>
   19c20:	mov	r2, #16
   19c24:	b	18f54 <__assert_fail@plt+0x62d4>
   19c28:	ldr	r2, [pc, #228]	; 19d14 <__assert_fail@plt+0x7094>
   19c2c:	ldr	r3, [pc, #228]	; 19d18 <__assert_fail@plt+0x7098>
   19c30:	add	r2, pc, r2
   19c34:	push	{r4, r5, r6, r7, r8, lr}
   19c38:	sub	sp, sp, #8
   19c3c:	ldr	r7, [r2, r3]
   19c40:	mov	r5, #0
   19c44:	mov	r4, r0
   19c48:	ldr	r3, [r7]
   19c4c:	mov	r8, r1
   19c50:	str	r5, [sp]
   19c54:	str	r3, [sp, #4]
   19c58:	bl	129a4 <__errno_location@plt>
   19c5c:	cmp	r4, r5
   19c60:	str	r5, [r0]
   19c64:	beq	19c74 <__assert_fail@plt+0x6ff4>
   19c68:	ldrsb	r3, [r4]
   19c6c:	cmp	r3, r5
   19c70:	bne	19c94 <__assert_fail@plt+0x7014>
   19c74:	ldr	r1, [pc, #160]	; 19d1c <__assert_fail@plt+0x709c>
   19c78:	mov	r3, r4
   19c7c:	add	r1, pc, r1
   19c80:	mov	r2, r8
   19c84:	ldr	r0, [r1]
   19c88:	ldr	r1, [pc, #144]	; 19d20 <__assert_fail@plt+0x70a0>
   19c8c:	add	r1, pc, r1
   19c90:	bl	12b24 <errx@plt>
   19c94:	mov	r6, r0
   19c98:	mov	r1, sp
   19c9c:	mov	r0, r4
   19ca0:	bl	12a7c <strtod@plt>
   19ca4:	ldr	r2, [r6]
   19ca8:	cmp	r2, r5
   19cac:	bne	19ce8 <__assert_fail@plt+0x7068>
   19cb0:	ldr	r3, [sp]
   19cb4:	cmp	r3, r4
   19cb8:	beq	19c74 <__assert_fail@plt+0x6ff4>
   19cbc:	cmp	r3, r5
   19cc0:	beq	19cd0 <__assert_fail@plt+0x7050>
   19cc4:	ldrsb	r3, [r3]
   19cc8:	cmp	r3, r5
   19ccc:	bne	19c74 <__assert_fail@plt+0x6ff4>
   19cd0:	ldr	r2, [sp, #4]
   19cd4:	ldr	r3, [r7]
   19cd8:	cmp	r2, r3
   19cdc:	bne	19d10 <__assert_fail@plt+0x7090>
   19ce0:	add	sp, sp, #8
   19ce4:	pop	{r4, r5, r6, r7, r8, pc}
   19ce8:	ldr	r3, [pc, #52]	; 19d24 <__assert_fail@plt+0x70a4>
   19cec:	cmp	r2, #34	; 0x22
   19cf0:	add	r3, pc, r3
   19cf4:	ldr	r0, [r3]
   19cf8:	bne	19c74 <__assert_fail@plt+0x6ff4>
   19cfc:	ldr	r1, [pc, #36]	; 19d28 <__assert_fail@plt+0x70a8>
   19d00:	mov	r3, r4
   19d04:	mov	r2, r8
   19d08:	add	r1, pc, r1
   19d0c:	bl	12728 <err@plt>
   19d10:	bl	126e0 <__stack_chk_fail@plt>
   19d14:	andeq	sl, r1, r4, lsl r1
   19d18:	andeq	r0, r0, r8, lsr #5
   19d1c:	andeq	sl, r1, r4, lsl #7
   19d20:	andeq	r9, r0, r0, lsl r2
   19d24:	andeq	sl, r1, r0, lsl r3
   19d28:	muleq	r0, r4, r1
   19d2c:	ldr	r2, [pc, #232]	; 19e1c <__assert_fail@plt+0x719c>
   19d30:	ldr	r3, [pc, #232]	; 19e20 <__assert_fail@plt+0x71a0>
   19d34:	add	r2, pc, r2
   19d38:	push	{r4, r5, r6, r7, r8, lr}
   19d3c:	sub	sp, sp, #8
   19d40:	ldr	r7, [r2, r3]
   19d44:	mov	r5, #0
   19d48:	mov	r4, r0
   19d4c:	ldr	r3, [r7]
   19d50:	mov	r8, r1
   19d54:	str	r5, [sp]
   19d58:	str	r3, [sp, #4]
   19d5c:	bl	129a4 <__errno_location@plt>
   19d60:	cmp	r4, r5
   19d64:	str	r5, [r0]
   19d68:	beq	19d78 <__assert_fail@plt+0x70f8>
   19d6c:	ldrsb	r3, [r4]
   19d70:	cmp	r3, r5
   19d74:	bne	19d98 <__assert_fail@plt+0x7118>
   19d78:	ldr	r1, [pc, #164]	; 19e24 <__assert_fail@plt+0x71a4>
   19d7c:	mov	r3, r4
   19d80:	add	r1, pc, r1
   19d84:	mov	r2, r8
   19d88:	ldr	r0, [r1]
   19d8c:	ldr	r1, [pc, #148]	; 19e28 <__assert_fail@plt+0x71a8>
   19d90:	add	r1, pc, r1
   19d94:	bl	12b24 <errx@plt>
   19d98:	mov	r6, r0
   19d9c:	mov	r2, #10
   19da0:	mov	r1, sp
   19da4:	mov	r0, r4
   19da8:	bl	1253c <strtol@plt>
   19dac:	ldr	r2, [r6]
   19db0:	cmp	r2, r5
   19db4:	bne	19df0 <__assert_fail@plt+0x7170>
   19db8:	ldr	r3, [sp]
   19dbc:	cmp	r3, r4
   19dc0:	beq	19d78 <__assert_fail@plt+0x70f8>
   19dc4:	cmp	r3, r5
   19dc8:	beq	19dd8 <__assert_fail@plt+0x7158>
   19dcc:	ldrsb	r3, [r3]
   19dd0:	cmp	r3, r5
   19dd4:	bne	19d78 <__assert_fail@plt+0x70f8>
   19dd8:	ldr	r2, [sp, #4]
   19ddc:	ldr	r3, [r7]
   19de0:	cmp	r2, r3
   19de4:	bne	19e18 <__assert_fail@plt+0x7198>
   19de8:	add	sp, sp, #8
   19dec:	pop	{r4, r5, r6, r7, r8, pc}
   19df0:	ldr	r3, [pc, #52]	; 19e2c <__assert_fail@plt+0x71ac>
   19df4:	cmp	r2, #34	; 0x22
   19df8:	add	r3, pc, r3
   19dfc:	ldr	r0, [r3]
   19e00:	bne	19d78 <__assert_fail@plt+0x70f8>
   19e04:	ldr	r1, [pc, #36]	; 19e30 <__assert_fail@plt+0x71b0>
   19e08:	mov	r3, r4
   19e0c:	mov	r2, r8
   19e10:	add	r1, pc, r1
   19e14:	bl	12728 <err@plt>
   19e18:	bl	126e0 <__stack_chk_fail@plt>
   19e1c:	andeq	sl, r1, r0, lsl r0
   19e20:	andeq	r0, r0, r8, lsr #5
   19e24:	andeq	sl, r1, r0, lsl #5
   19e28:	andeq	r9, r0, ip, lsl #2
   19e2c:	andeq	sl, r1, r8, lsl #4
   19e30:	andeq	r9, r0, ip, lsl #1
   19e34:	ldr	r2, [pc, #232]	; 19f24 <__assert_fail@plt+0x72a4>
   19e38:	ldr	r3, [pc, #232]	; 19f28 <__assert_fail@plt+0x72a8>
   19e3c:	add	r2, pc, r2
   19e40:	push	{r4, r5, r6, r7, r8, lr}
   19e44:	sub	sp, sp, #8
   19e48:	ldr	r7, [r2, r3]
   19e4c:	mov	r5, #0
   19e50:	mov	r4, r0
   19e54:	ldr	r3, [r7]
   19e58:	mov	r8, r1
   19e5c:	str	r5, [sp]
   19e60:	str	r3, [sp, #4]
   19e64:	bl	129a4 <__errno_location@plt>
   19e68:	cmp	r4, r5
   19e6c:	str	r5, [r0]
   19e70:	beq	19e80 <__assert_fail@plt+0x7200>
   19e74:	ldrsb	r3, [r4]
   19e78:	cmp	r3, r5
   19e7c:	bne	19ea0 <__assert_fail@plt+0x7220>
   19e80:	ldr	r1, [pc, #164]	; 19f2c <__assert_fail@plt+0x72ac>
   19e84:	mov	r3, r4
   19e88:	add	r1, pc, r1
   19e8c:	mov	r2, r8
   19e90:	ldr	r0, [r1]
   19e94:	ldr	r1, [pc, #148]	; 19f30 <__assert_fail@plt+0x72b0>
   19e98:	add	r1, pc, r1
   19e9c:	bl	12b24 <errx@plt>
   19ea0:	mov	r6, r0
   19ea4:	mov	r2, #10
   19ea8:	mov	r1, sp
   19eac:	mov	r0, r4
   19eb0:	bl	1292c <strtoul@plt>
   19eb4:	ldr	r2, [r6]
   19eb8:	cmp	r2, r5
   19ebc:	bne	19ef8 <__assert_fail@plt+0x7278>
   19ec0:	ldr	r3, [sp]
   19ec4:	cmp	r3, r4
   19ec8:	beq	19e80 <__assert_fail@plt+0x7200>
   19ecc:	cmp	r3, r5
   19ed0:	beq	19ee0 <__assert_fail@plt+0x7260>
   19ed4:	ldrsb	r3, [r3]
   19ed8:	cmp	r3, r5
   19edc:	bne	19e80 <__assert_fail@plt+0x7200>
   19ee0:	ldr	r2, [sp, #4]
   19ee4:	ldr	r3, [r7]
   19ee8:	cmp	r2, r3
   19eec:	bne	19f20 <__assert_fail@plt+0x72a0>
   19ef0:	add	sp, sp, #8
   19ef4:	pop	{r4, r5, r6, r7, r8, pc}
   19ef8:	ldr	r3, [pc, #52]	; 19f34 <__assert_fail@plt+0x72b4>
   19efc:	cmp	r2, #34	; 0x22
   19f00:	add	r3, pc, r3
   19f04:	ldr	r0, [r3]
   19f08:	bne	19e80 <__assert_fail@plt+0x7200>
   19f0c:	ldr	r1, [pc, #36]	; 19f38 <__assert_fail@plt+0x72b8>
   19f10:	mov	r3, r4
   19f14:	mov	r2, r8
   19f18:	add	r1, pc, r1
   19f1c:	bl	12728 <err@plt>
   19f20:	bl	126e0 <__stack_chk_fail@plt>
   19f24:	andeq	r9, r1, r8, lsl #30
   19f28:	andeq	r0, r0, r8, lsr #5
   19f2c:	andeq	sl, r1, r8, ror r1
   19f30:	andeq	r9, r0, r4
   19f34:	andeq	sl, r1, r0, lsl #2
   19f38:	andeq	r8, r0, r4, lsl #31
   19f3c:	ldr	r3, [pc, #140]	; 19fd0 <__assert_fail@plt+0x7350>
   19f40:	ldr	r2, [pc, #140]	; 19fd4 <__assert_fail@plt+0x7354>
   19f44:	add	r3, pc, r3
   19f48:	push	{r4, r5, r6, lr}
   19f4c:	sub	sp, sp, #16
   19f50:	ldr	r4, [r3, r2]
   19f54:	mov	r5, r1
   19f58:	mov	r1, sp
   19f5c:	ldr	r3, [r4]
   19f60:	mov	r6, r0
   19f64:	str	r3, [sp, #12]
   19f68:	bl	1977c <__assert_fail@plt+0x6afc>
   19f6c:	cmp	r0, #0
   19f70:	beq	19fb0 <__assert_fail@plt+0x7330>
   19f74:	bl	129a4 <__errno_location@plt>
   19f78:	ldr	r3, [pc, #88]	; 19fd8 <__assert_fail@plt+0x7358>
   19f7c:	mov	r2, r5
   19f80:	ldr	r1, [pc, r3]
   19f84:	ldr	r3, [r0]
   19f88:	mov	r0, r1
   19f8c:	cmp	r3, #0
   19f90:	mov	r3, r6
   19f94:	beq	19fa4 <__assert_fail@plt+0x7324>
   19f98:	ldr	r1, [pc, #60]	; 19fdc <__assert_fail@plt+0x735c>
   19f9c:	add	r1, pc, r1
   19fa0:	bl	12728 <err@plt>
   19fa4:	ldr	r1, [pc, #52]	; 19fe0 <__assert_fail@plt+0x7360>
   19fa8:	add	r1, pc, r1
   19fac:	bl	12b24 <errx@plt>
   19fb0:	ldr	r2, [sp, #12]
   19fb4:	ldr	r3, [r4]
   19fb8:	ldrd	r0, [sp]
   19fbc:	cmp	r2, r3
   19fc0:	bne	19fcc <__assert_fail@plt+0x734c>
   19fc4:	add	sp, sp, #16
   19fc8:	pop	{r4, r5, r6, pc}
   19fcc:	bl	126e0 <__stack_chk_fail@plt>
   19fd0:	andeq	r9, r1, r0, lsl #28
   19fd4:	andeq	r0, r0, r8, lsr #5
   19fd8:	andeq	sl, r1, r0, lsl #1
   19fdc:	andeq	r8, r0, r0, lsl #30
   19fe0:	strdeq	r8, [r0], -r4
   19fe4:	push	{r4, lr}
   19fe8:	mov	r4, r1
   19fec:	mov	r1, r2
   19ff0:	bl	19c28 <__assert_fail@plt+0x6fa8>
   19ff4:	vldr	d6, [pc, #28]	; 1a018 <__assert_fail@plt+0x7398>
   19ff8:	vcvt.s32.f64	s15, d0
   19ffc:	vcvt.f64.s32	d5, s15
   1a000:	vstr	s15, [r4]
   1a004:	vsub.f64	d0, d0, d5
   1a008:	vmul.f64	d0, d0, d6
   1a00c:	vcvt.s32.f64	s0, d0
   1a010:	vstr	s0, [r4, #4]
   1a014:	pop	{r4, pc}
   1a018:	andeq	r0, r0, r0
   1a01c:	smlawbmi	lr, r0, r4, r8
   1a020:	and	r2, r0, #61440	; 0xf000
   1a024:	cmp	r2, #16384	; 0x4000
   1a028:	moveq	r2, r1
   1a02c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a030:	moveq	sl, #100	; 0x64
   1a034:	mov	r3, r0
   1a038:	add	r9, r1, #1
   1a03c:	add	r8, r1, #2
   1a040:	add	r7, r1, #3
   1a044:	add	r6, r1, #4
   1a048:	add	r5, r1, #5
   1a04c:	add	r4, r1, #6
   1a050:	add	lr, r1, #7
   1a054:	add	ip, r1, #8
   1a058:	add	r0, r1, #9
   1a05c:	strbeq	sl, [r2], #10
   1a060:	beq	1a104 <__assert_fail@plt+0x7484>
   1a064:	cmp	r2, #40960	; 0xa000
   1a068:	moveq	r2, r1
   1a06c:	moveq	sl, #108	; 0x6c
   1a070:	strbeq	sl, [r2], #10
   1a074:	beq	1a104 <__assert_fail@plt+0x7484>
   1a078:	cmp	r2, #8192	; 0x2000
   1a07c:	moveq	r2, r1
   1a080:	moveq	sl, #99	; 0x63
   1a084:	strbeq	sl, [r2], #10
   1a088:	beq	1a104 <__assert_fail@plt+0x7484>
   1a08c:	cmp	r2, #24576	; 0x6000
   1a090:	moveq	r2, r1
   1a094:	moveq	sl, #98	; 0x62
   1a098:	strbeq	sl, [r2], #10
   1a09c:	beq	1a104 <__assert_fail@plt+0x7484>
   1a0a0:	cmp	r2, #49152	; 0xc000
   1a0a4:	moveq	r2, r1
   1a0a8:	moveq	sl, #115	; 0x73
   1a0ac:	strbeq	sl, [r2], #10
   1a0b0:	beq	1a104 <__assert_fail@plt+0x7484>
   1a0b4:	cmp	r2, #4096	; 0x1000
   1a0b8:	moveq	r2, r1
   1a0bc:	moveq	sl, #112	; 0x70
   1a0c0:	strbeq	sl, [r2], #10
   1a0c4:	beq	1a104 <__assert_fail@plt+0x7484>
   1a0c8:	cmp	r2, #32768	; 0x8000
   1a0cc:	moveq	r2, r1
   1a0d0:	moveq	sl, #45	; 0x2d
   1a0d4:	strbeq	sl, [r2], #10
   1a0d8:	beq	1a104 <__assert_fail@plt+0x7484>
   1a0dc:	mov	r2, r0
   1a0e0:	mov	r0, ip
   1a0e4:	mov	ip, lr
   1a0e8:	mov	lr, r4
   1a0ec:	mov	r4, r5
   1a0f0:	mov	r5, r6
   1a0f4:	mov	r6, r7
   1a0f8:	mov	r7, r8
   1a0fc:	mov	r8, r9
   1a100:	mov	r9, r1
   1a104:	tst	r3, #256	; 0x100
   1a108:	movne	fp, #114	; 0x72
   1a10c:	moveq	fp, #45	; 0x2d
   1a110:	tst	r3, #128	; 0x80
   1a114:	movne	sl, #119	; 0x77
   1a118:	moveq	sl, #45	; 0x2d
   1a11c:	tst	r3, #2048	; 0x800
   1a120:	strb	fp, [r9]
   1a124:	and	r9, r3, #64	; 0x40
   1a128:	strb	sl, [r8]
   1a12c:	beq	1a1c8 <__assert_fail@plt+0x7548>
   1a130:	cmp	r9, #0
   1a134:	movne	r9, #115	; 0x73
   1a138:	moveq	r9, #83	; 0x53
   1a13c:	tst	r3, #32
   1a140:	movne	r8, #114	; 0x72
   1a144:	moveq	r8, #45	; 0x2d
   1a148:	tst	r3, #16
   1a14c:	strb	r9, [r7]
   1a150:	movne	r7, #119	; 0x77
   1a154:	moveq	r7, #45	; 0x2d
   1a158:	tst	r3, #1024	; 0x400
   1a15c:	strb	r8, [r6]
   1a160:	and	r6, r3, #8
   1a164:	strb	r7, [r5]
   1a168:	beq	1a1d8 <__assert_fail@plt+0x7558>
   1a16c:	cmp	r6, #0
   1a170:	movne	r6, #115	; 0x73
   1a174:	moveq	r6, #83	; 0x53
   1a178:	tst	r3, #4
   1a17c:	movne	r5, #114	; 0x72
   1a180:	moveq	r5, #45	; 0x2d
   1a184:	tst	r3, #2
   1a188:	strb	r6, [r4]
   1a18c:	movne	r4, #119	; 0x77
   1a190:	moveq	r4, #45	; 0x2d
   1a194:	tst	r3, #512	; 0x200
   1a198:	strb	r5, [lr]
   1a19c:	and	r3, r3, #1
   1a1a0:	strb	r4, [ip]
   1a1a4:	beq	1a1e8 <__assert_fail@plt+0x7568>
   1a1a8:	cmp	r3, #0
   1a1ac:	movne	ip, #116	; 0x74
   1a1b0:	moveq	ip, #84	; 0x54
   1a1b4:	mov	r3, #0
   1a1b8:	strb	ip, [r0]
   1a1bc:	mov	r0, r1
   1a1c0:	strb	r3, [r2]
   1a1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1c8:	cmp	r9, #0
   1a1cc:	movne	r9, #120	; 0x78
   1a1d0:	moveq	r9, #45	; 0x2d
   1a1d4:	b	1a13c <__assert_fail@plt+0x74bc>
   1a1d8:	cmp	r6, #0
   1a1dc:	movne	r6, #120	; 0x78
   1a1e0:	moveq	r6, #45	; 0x2d
   1a1e4:	b	1a178 <__assert_fail@plt+0x74f8>
   1a1e8:	cmp	r3, #0
   1a1ec:	movne	ip, #120	; 0x78
   1a1f0:	moveq	ip, #45	; 0x2d
   1a1f4:	b	1a1b4 <__assert_fail@plt+0x7534>
   1a1f8:	ldr	r1, [pc, #680]	; 1a4a8 <__assert_fail@plt+0x7828>
   1a1fc:	ldr	ip, [pc, #680]	; 1a4ac <__assert_fail@plt+0x782c>
   1a200:	add	r1, pc, r1
   1a204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a208:	sub	sp, sp, #108	; 0x6c
   1a20c:	ldr	r8, [r1, ip]
   1a210:	tst	r0, #2
   1a214:	strd	r2, [sp, #32]
   1a218:	ldr	r1, [r8]
   1a21c:	addeq	r9, sp, #60	; 0x3c
   1a220:	str	r1, [sp, #100]	; 0x64
   1a224:	ldrd	r2, [sp, #32]
   1a228:	movne	r1, #32
   1a22c:	strbne	r1, [sp, #60]	; 0x3c
   1a230:	addne	ip, sp, #61	; 0x3d
   1a234:	addne	r9, sp, #60	; 0x3c
   1a238:	moveq	ip, r9
   1a23c:	mov	r1, #10
   1a240:	mov	sl, #1
   1a244:	sub	lr, r1, #32
   1a248:	lsl	r4, sl, r1
   1a24c:	lsl	r5, sl, lr
   1a250:	rsb	lr, r1, #32
   1a254:	orr	r5, r5, sl, lsr lr
   1a258:	cmp	r3, r5
   1a25c:	cmpeq	r2, r4
   1a260:	bcc	1a41c <__assert_fail@plt+0x779c>
   1a264:	add	r1, r1, #10
   1a268:	cmp	r1, #70	; 0x46
   1a26c:	bne	1a244 <__assert_fail@plt+0x75c4>
   1a270:	mov	lr, ip
   1a274:	strd	r2, [sp, #32]
   1a278:	mov	r4, r2
   1a27c:	tst	r0, #1
   1a280:	mov	r2, #69	; 0x45
   1a284:	bic	r5, r3, #-268435456	; 0xf0000000
   1a288:	lsr	sl, r3, #28
   1a28c:	strb	r2, [lr], #1
   1a290:	bne	1a404 <__assert_fail@plt+0x7784>
   1a294:	orrs	r3, r4, r5
   1a298:	mov	r3, #0
   1a29c:	strb	r3, [lr]
   1a2a0:	beq	1a444 <__assert_fail@plt+0x77c4>
   1a2a4:	sub	r2, r1, #20
   1a2a8:	rsb	r0, r2, #32
   1a2ac:	lsr	r3, r4, r2
   1a2b0:	sub	r1, r1, #52	; 0x34
   1a2b4:	orr	r3, r3, r5, lsl r0
   1a2b8:	orr	r3, r3, r5, lsr r1
   1a2bc:	lsr	r2, r5, r2
   1a2c0:	adds	r6, r3, #50	; 0x32
   1a2c4:	adc	r7, r2, #0
   1a2c8:	mov	r3, #0
   1a2cc:	mov	r2, #100	; 0x64
   1a2d0:	mov	r0, r6
   1a2d4:	mov	r1, r7
   1a2d8:	bl	207f4 <__assert_fail@plt+0xdb74>
   1a2dc:	cmp	r1, #0
   1a2e0:	cmpeq	r0, #10
   1a2e4:	mov	r2, r0
   1a2e8:	mov	r3, r1
   1a2ec:	addeq	sl, sl, #1
   1a2f0:	beq	1a444 <__assert_fail@plt+0x77c4>
   1a2f4:	cmp	r7, #0
   1a2f8:	cmpeq	r6, #99	; 0x63
   1a2fc:	strd	r2, [sp, #32]
   1a300:	bls	1a444 <__assert_fail@plt+0x77c4>
   1a304:	bl	12b78 <localeconv@plt>
   1a308:	ldrd	r2, [sp, #32]
   1a30c:	cmp	r0, #0
   1a310:	beq	1a48c <__assert_fail@plt+0x780c>
   1a314:	ldr	r0, [r0]
   1a318:	cmp	r0, #0
   1a31c:	beq	1a498 <__assert_fail@plt+0x7818>
   1a320:	ldrsb	r1, [r0]
   1a324:	cmp	r1, #0
   1a328:	ldreq	r0, [pc, #384]	; 1a4b0 <__assert_fail@plt+0x7830>
   1a32c:	addeq	r0, pc, r0
   1a330:	ldr	r1, [pc, #380]	; 1a4b4 <__assert_fail@plt+0x7834>
   1a334:	strd	r2, [sp, #16]
   1a338:	add	r1, pc, r1
   1a33c:	add	r4, sp, #68	; 0x44
   1a340:	mov	r3, #32
   1a344:	str	r0, [sp, #8]
   1a348:	str	r1, [sp]
   1a34c:	str	r9, [sp, #24]
   1a350:	str	sl, [sp, #4]
   1a354:	mov	r0, r4
   1a358:	mov	r1, r3
   1a35c:	mov	r2, #1
   1a360:	bl	12c5c <__snprintf_chk@plt>
   1a364:	b	1a46c <__assert_fail@plt+0x77ec>
   1a368:	ldr	r4, [pc, #328]	; 1a4b8 <__assert_fail@plt+0x7838>
   1a36c:	mvn	sl, #0
   1a370:	ldr	fp, [pc, #324]	; 1a4bc <__assert_fail@plt+0x783c>
   1a374:	umull	r2, r3, lr, r4
   1a378:	sub	r4, r1, #42	; 0x2a
   1a37c:	strd	r2, [sp, #40]	; 0x28
   1a380:	ldr	r3, [sp, #44]	; 0x2c
   1a384:	lsl	r2, sl, lr
   1a388:	lsr	r3, r3, #3
   1a38c:	str	r3, [sp, #52]	; 0x34
   1a390:	ldr	r3, [sp, #32]
   1a394:	str	r4, [sp, #48]	; 0x30
   1a398:	orr	r4, r2, sl, lsl r4
   1a39c:	lsr	r2, r3, lr
   1a3a0:	mov	r3, r2
   1a3a4:	ldr	r2, [sp, #52]	; 0x34
   1a3a8:	add	fp, pc, fp
   1a3ac:	str	r4, [sp, #40]	; 0x28
   1a3b0:	ldrsb	fp, [fp, r2]
   1a3b4:	mov	r2, r3
   1a3b8:	ldr	r3, [sp, #36]	; 0x24
   1a3bc:	rsb	r5, lr, #32
   1a3c0:	ldr	r4, [sp, #40]	; 0x28
   1a3c4:	orr	r2, r2, r3, lsl r5
   1a3c8:	orr	r4, r4, sl, lsr r5
   1a3cc:	ldr	r3, [sp, #32]
   1a3d0:	str	r4, [sp, #40]	; 0x28
   1a3d4:	cmp	r0, #0
   1a3d8:	bic	r4, r3, sl, lsl lr
   1a3dc:	ldr	r0, [sp, #36]	; 0x24
   1a3e0:	ldr	r3, [sp, #48]	; 0x30
   1a3e4:	mov	lr, ip
   1a3e8:	orr	sl, r2, r0, lsr r3
   1a3ec:	ldr	r3, [sp, #40]	; 0x28
   1a3f0:	strb	fp, [lr], #1
   1a3f4:	bic	r5, r0, r3
   1a3f8:	beq	1a294 <__assert_fail@plt+0x7614>
   1a3fc:	cmp	fp, #66	; 0x42
   1a400:	beq	1a294 <__assert_fail@plt+0x7614>
   1a404:	mov	r3, #105	; 0x69
   1a408:	strb	r3, [ip, #1]
   1a40c:	mov	r3, #66	; 0x42
   1a410:	add	lr, ip, #3
   1a414:	strb	r3, [ip, #2]
   1a418:	b	1a294 <__assert_fail@plt+0x7614>
   1a41c:	subs	lr, r1, #10
   1a420:	strd	r2, [sp, #32]
   1a424:	and	r0, r0, #1
   1a428:	bne	1a368 <__assert_fail@plt+0x76e8>
   1a42c:	ldr	sl, [sp, #32]
   1a430:	cmp	r0, #0
   1a434:	movne	r0, lr
   1a438:	mov	r3, #66	; 0x42
   1a43c:	strb	r0, [ip, #1]
   1a440:	strb	r3, [ip]
   1a444:	ldr	r2, [pc, #116]	; 1a4c0 <__assert_fail@plt+0x7840>
   1a448:	add	r4, sp, #68	; 0x44
   1a44c:	add	r2, pc, r2
   1a450:	mov	r3, #32
   1a454:	stm	sp, {r2, sl}
   1a458:	str	r9, [sp, #8]
   1a45c:	mov	r0, r4
   1a460:	mov	r1, r3
   1a464:	mov	r2, #1
   1a468:	bl	12c5c <__snprintf_chk@plt>
   1a46c:	mov	r0, r4
   1a470:	bl	126d4 <strdup@plt>
   1a474:	ldr	r2, [sp, #100]	; 0x64
   1a478:	ldr	r3, [r8]
   1a47c:	cmp	r2, r3
   1a480:	bne	1a4a4 <__assert_fail@plt+0x7824>
   1a484:	add	sp, sp, #108	; 0x6c
   1a488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a48c:	ldr	r0, [pc, #48]	; 1a4c4 <__assert_fail@plt+0x7844>
   1a490:	add	r0, pc, r0
   1a494:	b	1a330 <__assert_fail@plt+0x76b0>
   1a498:	ldr	r0, [pc, #40]	; 1a4c8 <__assert_fail@plt+0x7848>
   1a49c:	add	r0, pc, r0
   1a4a0:	b	1a330 <__assert_fail@plt+0x76b0>
   1a4a4:	bl	126e0 <__stack_chk_fail@plt>
   1a4a8:	andeq	r9, r1, r4, asr #22
   1a4ac:	andeq	r0, r0, r8, lsr #5
   1a4b0:	andeq	r7, r0, r8, asr #5
   1a4b4:	muleq	r0, r0, fp
   1a4b8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1a4bc:	andeq	r8, r0, r8, lsl fp
   1a4c0:	andeq	r8, r0, r8, lsl #21
   1a4c4:	andeq	r7, r0, r4, ror #2
   1a4c8:	andeq	r7, r0, r8, asr r1
   1a4cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a4d0:	subs	r4, r0, #0
   1a4d4:	beq	1a5a4 <__assert_fail@plt+0x7924>
   1a4d8:	ldrsb	lr, [r4]
   1a4dc:	cmp	lr, #0
   1a4e0:	beq	1a5a4 <__assert_fail@plt+0x7924>
   1a4e4:	cmp	r1, #0
   1a4e8:	clz	ip, r2
   1a4ec:	lsr	ip, ip, #5
   1a4f0:	moveq	r0, #1
   1a4f4:	movne	r0, ip
   1a4f8:	cmp	r3, #0
   1a4fc:	moveq	r0, #1
   1a500:	cmp	r0, #0
   1a504:	bne	1a5a4 <__assert_fail@plt+0x7924>
   1a508:	mov	r8, r3
   1a50c:	mov	r7, r2
   1a510:	mov	r9, r1
   1a514:	mov	r5, r0
   1a518:	b	1a574 <__assert_fail@plt+0x78f4>
   1a51c:	cmp	r3, #0
   1a520:	bne	1a560 <__assert_fail@plt+0x78e0>
   1a524:	cmn	r4, #1
   1a528:	add	r6, r4, #1
   1a52c:	beq	1a5ac <__assert_fail@plt+0x792c>
   1a530:	cmp	r0, r6
   1a534:	bcs	1a5a4 <__assert_fail@plt+0x7924>
   1a538:	sub	r1, r6, r0
   1a53c:	blx	r8
   1a540:	cmn	r0, #1
   1a544:	beq	1a5a4 <__assert_fail@plt+0x7924>
   1a548:	str	r0, [r9, r5, lsl #2]
   1a54c:	ldrsb	r3, [r6]
   1a550:	add	r5, r5, #1
   1a554:	cmp	r3, #0
   1a558:	beq	1a5ac <__assert_fail@plt+0x792c>
   1a55c:	mov	r0, #0
   1a560:	cmn	r4, #1
   1a564:	beq	1a5ac <__assert_fail@plt+0x792c>
   1a568:	ldrsb	lr, [r4, #1]!
   1a56c:	cmp	lr, #0
   1a570:	beq	1a5ac <__assert_fail@plt+0x792c>
   1a574:	cmp	r7, r5
   1a578:	mov	r6, r4
   1a57c:	bls	1a5b4 <__assert_fail@plt+0x7934>
   1a580:	cmp	r0, #0
   1a584:	moveq	r0, r4
   1a588:	cmp	lr, #44	; 0x2c
   1a58c:	ldrsb	r3, [r4, #1]
   1a590:	bne	1a51c <__assert_fail@plt+0x789c>
   1a594:	cmp	r3, #0
   1a598:	beq	1a524 <__assert_fail@plt+0x78a4>
   1a59c:	cmp	r0, r6
   1a5a0:	bcc	1a538 <__assert_fail@plt+0x78b8>
   1a5a4:	mvn	r0, #0
   1a5a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a5ac:	mov	r0, r5
   1a5b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a5b4:	mvn	r0, #1
   1a5b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a5bc:	cmp	r0, #0
   1a5c0:	beq	1a62c <__assert_fail@plt+0x79ac>
   1a5c4:	push	{r4, lr}
   1a5c8:	mov	r4, r3
   1a5cc:	cmp	r4, #0
   1a5d0:	ldrsb	ip, [r0]
   1a5d4:	clz	r3, ip
   1a5d8:	lsr	r3, r3, #5
   1a5dc:	moveq	r3, #1
   1a5e0:	cmp	r3, #0
   1a5e4:	bne	1a624 <__assert_fail@plt+0x79a4>
   1a5e8:	ldr	lr, [r4]
   1a5ec:	cmp	lr, r2
   1a5f0:	bhi	1a624 <__assert_fail@plt+0x79a4>
   1a5f4:	cmp	ip, #43	; 0x2b
   1a5f8:	strne	r3, [r4]
   1a5fc:	addeq	r0, r0, #1
   1a600:	ldr	r3, [sp, #8]
   1a604:	addeq	r1, r1, lr, lsl #2
   1a608:	subeq	r2, r2, lr
   1a60c:	bl	1a4cc <__assert_fail@plt+0x784c>
   1a610:	cmp	r0, #0
   1a614:	ldrgt	r3, [r4]
   1a618:	addgt	r3, r3, r0
   1a61c:	strgt	r3, [r4]
   1a620:	pop	{r4, pc}
   1a624:	mvn	r0, #0
   1a628:	pop	{r4, pc}
   1a62c:	mvn	r0, #0
   1a630:	bx	lr
   1a634:	cmp	r2, #0
   1a638:	clz	r3, r1
   1a63c:	lsr	r3, r3, #5
   1a640:	moveq	r3, #1
   1a644:	cmp	r0, #0
   1a648:	moveq	r3, #1
   1a64c:	cmp	r3, #0
   1a650:	bne	1a71c <__assert_fail@plt+0x7a9c>
   1a654:	push	{r4, r5, r6, r7, r8, lr}
   1a658:	mov	r6, r2
   1a65c:	mov	r2, r3
   1a660:	ldrsb	r3, [r0]
   1a664:	mov	r8, r1
   1a668:	mov	r4, r0
   1a66c:	mov	r7, #1
   1a670:	cmp	r3, #0
   1a674:	beq	1a6e4 <__assert_fail@plt+0x7a64>
   1a678:	cmp	r2, #0
   1a67c:	moveq	r2, r4
   1a680:	cmp	r3, #44	; 0x2c
   1a684:	mov	r5, r4
   1a688:	ldrsb	r3, [r4, #1]!
   1a68c:	beq	1a6ec <__assert_fail@plt+0x7a6c>
   1a690:	cmp	r3, #0
   1a694:	bne	1a70c <__assert_fail@plt+0x7a8c>
   1a698:	mov	r5, r4
   1a69c:	cmp	r2, r5
   1a6a0:	sub	r1, r5, r2
   1a6a4:	mov	r0, r2
   1a6a8:	bcs	1a704 <__assert_fail@plt+0x7a84>
   1a6ac:	blx	r6
   1a6b0:	mov	r2, r4
   1a6b4:	cmp	r0, #0
   1a6b8:	and	r1, r0, #7
   1a6bc:	poplt	{r4, r5, r6, r7, r8, pc}
   1a6c0:	ldrb	r3, [r8, r0, asr #3]
   1a6c4:	orr	r3, r3, r7, lsl r1
   1a6c8:	strb	r3, [r8, r0, asr #3]
   1a6cc:	ldrsb	r3, [r5]
   1a6d0:	cmp	r3, #0
   1a6d4:	beq	1a6e4 <__assert_fail@plt+0x7a64>
   1a6d8:	ldrsb	r3, [r4]
   1a6dc:	cmp	r3, #0
   1a6e0:	bne	1a680 <__assert_fail@plt+0x7a00>
   1a6e4:	mov	r0, #0
   1a6e8:	pop	{r4, r5, r6, r7, r8, pc}
   1a6ec:	cmp	r3, #0
   1a6f0:	moveq	r5, r4
   1a6f4:	cmp	r2, r5
   1a6f8:	sub	r1, r5, r2
   1a6fc:	mov	r0, r2
   1a700:	bcc	1a6ac <__assert_fail@plt+0x7a2c>
   1a704:	mvn	r0, #0
   1a708:	pop	{r4, r5, r6, r7, r8, pc}
   1a70c:	adds	r4, r5, #1
   1a710:	bne	1a670 <__assert_fail@plt+0x79f0>
   1a714:	mov	r0, #0
   1a718:	pop	{r4, r5, r6, r7, r8, pc}
   1a71c:	mvn	r0, #21
   1a720:	bx	lr
   1a724:	cmp	r2, #0
   1a728:	clz	r3, r1
   1a72c:	lsr	r3, r3, #5
   1a730:	moveq	r3, #1
   1a734:	cmp	r0, #0
   1a738:	moveq	r3, #1
   1a73c:	cmp	r3, #0
   1a740:	bne	1a804 <__assert_fail@plt+0x7b84>
   1a744:	push	{r4, r5, r6, r7, r8, lr}
   1a748:	mov	r6, r2
   1a74c:	mov	r2, r3
   1a750:	ldrsb	r3, [r0]
   1a754:	mov	r7, r1
   1a758:	mov	r4, r0
   1a75c:	cmp	r3, #0
   1a760:	beq	1a7cc <__assert_fail@plt+0x7b4c>
   1a764:	cmp	r2, #0
   1a768:	moveq	r2, r4
   1a76c:	cmp	r3, #44	; 0x2c
   1a770:	mov	r5, r4
   1a774:	ldrsb	r3, [r4, #1]!
   1a778:	beq	1a7d4 <__assert_fail@plt+0x7b54>
   1a77c:	cmp	r3, #0
   1a780:	bne	1a7f4 <__assert_fail@plt+0x7b74>
   1a784:	mov	r5, r4
   1a788:	cmp	r2, r5
   1a78c:	sub	r1, r5, r2
   1a790:	mov	r0, r2
   1a794:	bcs	1a7ec <__assert_fail@plt+0x7b6c>
   1a798:	blx	r6
   1a79c:	mov	r2, r4
   1a7a0:	cmp	r0, #0
   1a7a4:	poplt	{r4, r5, r6, r7, r8, pc}
   1a7a8:	ldr	r3, [r7]
   1a7ac:	orr	r3, r3, r0
   1a7b0:	str	r3, [r7]
   1a7b4:	ldrsb	r3, [r5]
   1a7b8:	cmp	r3, #0
   1a7bc:	beq	1a7cc <__assert_fail@plt+0x7b4c>
   1a7c0:	ldrsb	r3, [r4]
   1a7c4:	cmp	r3, #0
   1a7c8:	bne	1a76c <__assert_fail@plt+0x7aec>
   1a7cc:	mov	r0, #0
   1a7d0:	pop	{r4, r5, r6, r7, r8, pc}
   1a7d4:	cmp	r3, #0
   1a7d8:	moveq	r5, r4
   1a7dc:	cmp	r2, r5
   1a7e0:	sub	r1, r5, r2
   1a7e4:	mov	r0, r2
   1a7e8:	bcc	1a798 <__assert_fail@plt+0x7b18>
   1a7ec:	mvn	r0, #0
   1a7f0:	pop	{r4, r5, r6, r7, r8, pc}
   1a7f4:	adds	r4, r5, #1
   1a7f8:	bne	1a75c <__assert_fail@plt+0x7adc>
   1a7fc:	mov	r0, #0
   1a800:	pop	{r4, r5, r6, r7, r8, pc}
   1a804:	mvn	r0, #21
   1a808:	bx	lr
   1a80c:	ldr	ip, [pc, #396]	; 1a9a0 <__assert_fail@plt+0x7d20>
   1a810:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a814:	add	ip, pc, ip
   1a818:	ldr	lr, [pc, #388]	; 1a9a4 <__assert_fail@plt+0x7d24>
   1a81c:	sub	sp, sp, #8
   1a820:	mov	r9, r3
   1a824:	ldr	r5, [ip, lr]
   1a828:	mov	sl, #0
   1a82c:	subs	r4, r0, #0
   1a830:	ldr	r3, [r5]
   1a834:	mov	r7, r1
   1a838:	str	sl, [sp]
   1a83c:	mov	r1, ip
   1a840:	str	r3, [sp, #4]
   1a844:	beq	1a8b8 <__assert_fail@plt+0x7c38>
   1a848:	str	r9, [r7]
   1a84c:	str	r9, [r2]
   1a850:	mov	r6, r2
   1a854:	bl	129a4 <__errno_location@plt>
   1a858:	str	sl, [r0]
   1a85c:	ldrsb	r3, [r4]
   1a860:	mov	r8, r0
   1a864:	cmp	r3, #58	; 0x3a
   1a868:	beq	1a8d4 <__assert_fail@plt+0x7c54>
   1a86c:	mov	sl, sp
   1a870:	mov	r1, sl
   1a874:	mov	r2, #10
   1a878:	mov	r0, r4
   1a87c:	bl	1253c <strtol@plt>
   1a880:	str	r0, [r7]
   1a884:	str	r0, [r6]
   1a888:	ldr	r0, [r8]
   1a88c:	cmp	r0, #0
   1a890:	bne	1a924 <__assert_fail@plt+0x7ca4>
   1a894:	ldr	r2, [sp]
   1a898:	cmp	r2, #0
   1a89c:	cmpne	r2, r4
   1a8a0:	beq	1a924 <__assert_fail@plt+0x7ca4>
   1a8a4:	ldrsb	r3, [r2]
   1a8a8:	cmp	r3, #58	; 0x3a
   1a8ac:	beq	1a92c <__assert_fail@plt+0x7cac>
   1a8b0:	cmp	r3, #45	; 0x2d
   1a8b4:	beq	1a93c <__assert_fail@plt+0x7cbc>
   1a8b8:	mov	r0, #0
   1a8bc:	ldr	r2, [sp, #4]
   1a8c0:	ldr	r3, [r5]
   1a8c4:	cmp	r2, r3
   1a8c8:	bne	1a99c <__assert_fail@plt+0x7d1c>
   1a8cc:	add	sp, sp, #8
   1a8d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a8d4:	add	r4, r4, #1
   1a8d8:	mov	r0, r4
   1a8dc:	mov	r2, #10
   1a8e0:	mov	r1, sp
   1a8e4:	bl	1253c <strtol@plt>
   1a8e8:	str	r0, [r6]
   1a8ec:	ldr	r3, [r8]
   1a8f0:	cmp	r3, #0
   1a8f4:	bne	1a924 <__assert_fail@plt+0x7ca4>
   1a8f8:	ldr	r3, [sp]
   1a8fc:	cmp	r3, #0
   1a900:	beq	1a924 <__assert_fail@plt+0x7ca4>
   1a904:	ldrsb	r2, [r3]
   1a908:	sub	r3, r3, r4
   1a90c:	clz	r3, r3
   1a910:	cmp	r2, #0
   1a914:	lsr	r3, r3, #5
   1a918:	movne	r3, #1
   1a91c:	cmp	r3, #0
   1a920:	beq	1a8b8 <__assert_fail@plt+0x7c38>
   1a924:	mvn	r0, #0
   1a928:	b	1a8bc <__assert_fail@plt+0x7c3c>
   1a92c:	ldrsb	r3, [r2, #1]
   1a930:	cmp	r3, #0
   1a934:	streq	r9, [r6]
   1a938:	beq	1a8bc <__assert_fail@plt+0x7c3c>
   1a93c:	mov	r3, #0
   1a940:	add	r4, r2, #1
   1a944:	str	r3, [r8]
   1a948:	mov	r1, sl
   1a94c:	mov	r0, r4
   1a950:	mov	r2, #10
   1a954:	str	r3, [sp]
   1a958:	bl	1253c <strtol@plt>
   1a95c:	str	r0, [r6]
   1a960:	ldr	r3, [r8]
   1a964:	cmp	r3, #0
   1a968:	bne	1a924 <__assert_fail@plt+0x7ca4>
   1a96c:	ldr	r2, [sp]
   1a970:	cmp	r2, #0
   1a974:	beq	1a924 <__assert_fail@plt+0x7ca4>
   1a978:	ldrsb	r3, [r2]
   1a97c:	sub	r2, r2, r4
   1a980:	clz	r2, r2
   1a984:	cmp	r3, #0
   1a988:	lsr	r2, r2, #5
   1a98c:	movne	r2, #1
   1a990:	cmp	r2, #0
   1a994:	beq	1a8b8 <__assert_fail@plt+0x7c38>
   1a998:	b	1a924 <__assert_fail@plt+0x7ca4>
   1a99c:	bl	126e0 <__stack_chk_fail@plt>
   1a9a0:	andeq	r9, r1, r0, lsr r5
   1a9a4:	andeq	r0, r0, r8, lsr #5
   1a9a8:	ldr	r3, [pc, #244]	; 1aaa4 <__assert_fail@plt+0x7e24>
   1a9ac:	ldr	r2, [pc, #244]	; 1aaa8 <__assert_fail@plt+0x7e28>
   1a9b0:	add	r3, pc, r3
   1a9b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a9b8:	sub	sp, sp, #20
   1a9bc:	ldr	r9, [r3, r2]
   1a9c0:	cmp	r0, #0
   1a9c4:	cmpne	r1, #0
   1a9c8:	ldr	r3, [r9]
   1a9cc:	str	r3, [sp, #12]
   1a9d0:	beq	1aa98 <__assert_fail@plt+0x7e18>
   1a9d4:	mov	r4, r1
   1a9d8:	add	r8, sp, #4
   1a9dc:	add	r7, sp, #8
   1a9e0:	b	1aa20 <__assert_fail@plt+0x7da0>
   1a9e4:	cmp	r4, r3
   1a9e8:	bne	1aa98 <__assert_fail@plt+0x7e18>
   1a9ec:	mov	r2, r4
   1a9f0:	mov	r1, r6
   1a9f4:	mov	r0, r5
   1a9f8:	bl	12c14 <strncmp@plt>
   1a9fc:	cmp	r0, #0
   1aa00:	bne	1aa98 <__assert_fail@plt+0x7e18>
   1aa04:	adds	r0, r5, r4
   1aa08:	moveq	r3, #0
   1aa0c:	movne	r3, #1
   1aa10:	adds	r4, r6, r4
   1aa14:	moveq	r3, #0
   1aa18:	cmp	r3, #0
   1aa1c:	beq	1aa98 <__assert_fail@plt+0x7e18>
   1aa20:	mov	r1, r8
   1aa24:	bl	18e28 <__assert_fail@plt+0x61a8>
   1aa28:	mov	r1, r7
   1aa2c:	mov	r5, r0
   1aa30:	mov	r0, r4
   1aa34:	bl	18e28 <__assert_fail@plt+0x61a8>
   1aa38:	ldr	r4, [sp, #4]
   1aa3c:	ldr	r3, [sp, #8]
   1aa40:	mov	r6, r0
   1aa44:	adds	r0, r4, r3
   1aa48:	beq	1aa7c <__assert_fail@plt+0x7dfc>
   1aa4c:	cmp	r0, #1
   1aa50:	bne	1a9e4 <__assert_fail@plt+0x7d64>
   1aa54:	cmp	r5, #0
   1aa58:	beq	1aa68 <__assert_fail@plt+0x7de8>
   1aa5c:	ldrsb	r2, [r5]
   1aa60:	cmp	r2, #47	; 0x2f
   1aa64:	beq	1aa80 <__assert_fail@plt+0x7e00>
   1aa68:	cmp	r6, #0
   1aa6c:	beq	1a9e4 <__assert_fail@plt+0x7d64>
   1aa70:	ldrsb	r2, [r6]
   1aa74:	cmp	r2, #47	; 0x2f
   1aa78:	bne	1a9e4 <__assert_fail@plt+0x7d64>
   1aa7c:	mov	r0, #1
   1aa80:	ldr	r2, [sp, #12]
   1aa84:	ldr	r3, [r9]
   1aa88:	cmp	r2, r3
   1aa8c:	bne	1aaa0 <__assert_fail@plt+0x7e20>
   1aa90:	add	sp, sp, #20
   1aa94:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1aa98:	mov	r0, #0
   1aa9c:	b	1aa80 <__assert_fail@plt+0x7e00>
   1aaa0:	bl	126e0 <__stack_chk_fail@plt>
   1aaa4:	muleq	r1, r4, r3
   1aaa8:	andeq	r0, r0, r8, lsr #5
   1aaac:	orrs	r3, r0, r1
   1aab0:	beq	1ab2c <__assert_fail@plt+0x7eac>
   1aab4:	cmp	r0, #0
   1aab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aabc:	mov	r4, r1
   1aac0:	mov	r5, r0
   1aac4:	beq	1ab38 <__assert_fail@plt+0x7eb8>
   1aac8:	cmp	r1, #0
   1aacc:	beq	1ab48 <__assert_fail@plt+0x7ec8>
   1aad0:	mov	r6, r2
   1aad4:	bl	12938 <strlen@plt>
   1aad8:	mvn	r3, r0
   1aadc:	cmp	r6, r3
   1aae0:	mov	r7, r0
   1aae4:	movhi	r8, #0
   1aae8:	bhi	1ab24 <__assert_fail@plt+0x7ea4>
   1aaec:	add	r9, r6, r0
   1aaf0:	add	r0, r9, #1
   1aaf4:	bl	12854 <malloc@plt>
   1aaf8:	subs	r8, r0, #0
   1aafc:	beq	1ab24 <__assert_fail@plt+0x7ea4>
   1ab00:	mov	r1, r5
   1ab04:	mov	r2, r7
   1ab08:	bl	12674 <memcpy@plt>
   1ab0c:	mov	r2, r6
   1ab10:	mov	r1, r4
   1ab14:	add	r0, r8, r7
   1ab18:	bl	12674 <memcpy@plt>
   1ab1c:	mov	r3, #0
   1ab20:	strb	r3, [r8, r9]
   1ab24:	mov	r0, r8
   1ab28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab2c:	ldr	r0, [pc, #28]	; 1ab50 <__assert_fail@plt+0x7ed0>
   1ab30:	add	r0, pc, r0
   1ab34:	b	126d4 <strdup@plt>
   1ab38:	mov	r0, r4
   1ab3c:	mov	r1, r2
   1ab40:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab44:	b	12638 <strndup@plt>
   1ab48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ab4c:	b	126d4 <strdup@plt>
   1ab50:	andeq	r7, r0, r0, asr r1
   1ab54:	push	{r4, r5, r6, lr}
   1ab58:	subs	r4, r1, #0
   1ab5c:	mov	r5, r0
   1ab60:	moveq	r2, r4
   1ab64:	beq	1ab74 <__assert_fail@plt+0x7ef4>
   1ab68:	mov	r0, r4
   1ab6c:	bl	12938 <strlen@plt>
   1ab70:	mov	r2, r0
   1ab74:	mov	r1, r4
   1ab78:	mov	r0, r5
   1ab7c:	pop	{r4, r5, r6, lr}
   1ab80:	b	1aaac <__assert_fail@plt+0x7e2c>
   1ab84:	push	{r1, r2, r3}
   1ab88:	ldr	r1, [pc, #132]	; 1ac14 <__assert_fail@plt+0x7f94>
   1ab8c:	ldr	r3, [pc, #132]	; 1ac18 <__assert_fail@plt+0x7f98>
   1ab90:	add	r1, pc, r1
   1ab94:	push	{r4, r5, lr}
   1ab98:	mov	r5, r0
   1ab9c:	ldr	r4, [r1, r3]
   1aba0:	sub	sp, sp, #16
   1aba4:	add	ip, sp, #32
   1aba8:	ldr	r0, [r4]
   1abac:	ldr	r2, [sp, #28]
   1abb0:	str	r0, [sp, #12]
   1abb4:	mov	r3, ip
   1abb8:	add	r0, sp, #8
   1abbc:	mov	r1, #1
   1abc0:	str	ip, [sp, #4]
   1abc4:	bl	129d4 <__vasprintf_chk@plt>
   1abc8:	subs	r2, r0, #0
   1abcc:	movlt	r5, #0
   1abd0:	blt	1abec <__assert_fail@plt+0x7f6c>
   1abd4:	mov	r0, r5
   1abd8:	ldr	r1, [sp, #8]
   1abdc:	bl	1aaac <__assert_fail@plt+0x7e2c>
   1abe0:	mov	r5, r0
   1abe4:	ldr	r0, [sp, #8]
   1abe8:	bl	125d8 <free@plt>
   1abec:	ldr	r2, [sp, #12]
   1abf0:	ldr	r3, [r4]
   1abf4:	mov	r0, r5
   1abf8:	cmp	r2, r3
   1abfc:	bne	1ac10 <__assert_fail@plt+0x7f90>
   1ac00:	add	sp, sp, #16
   1ac04:	pop	{r4, r5, lr}
   1ac08:	add	sp, sp, #12
   1ac0c:	bx	lr
   1ac10:	bl	126e0 <__stack_chk_fail@plt>
   1ac14:			; <UNDEFINED> instruction: 0x000191b4
   1ac18:	andeq	r0, r0, r8, lsr #5
   1ac1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac20:	mov	r6, r0
   1ac24:	ldr	r0, [pc, #348]	; 1ad88 <__assert_fail@plt+0x8108>
   1ac28:	ldr	ip, [pc, #348]	; 1ad8c <__assert_fail@plt+0x810c>
   1ac2c:	add	r0, pc, r0
   1ac30:	ldr	r5, [r6]
   1ac34:	ldr	r8, [r0, ip]
   1ac38:	sub	sp, sp, #8
   1ac3c:	ldrsb	r4, [r5]
   1ac40:	mov	r9, r2
   1ac44:	ldr	r2, [r8]
   1ac48:	cmp	r4, #0
   1ac4c:	mov	r7, r1
   1ac50:	str	r2, [sp, #4]
   1ac54:	mov	r1, r0
   1ac58:	beq	1ad08 <__assert_fail@plt+0x8088>
   1ac5c:	mov	r0, r5
   1ac60:	mov	r1, r9
   1ac64:	mov	sl, r3
   1ac68:	bl	12c74 <strspn@plt>
   1ac6c:	add	r4, r5, r0
   1ac70:	ldrsb	r5, [r5, r0]
   1ac74:	cmp	r5, #0
   1ac78:	beq	1ad70 <__assert_fail@plt+0x80f0>
   1ac7c:	cmp	sl, #0
   1ac80:	beq	1ad24 <__assert_fail@plt+0x80a4>
   1ac84:	ldr	r0, [pc, #260]	; 1ad90 <__assert_fail@plt+0x8110>
   1ac88:	mov	r1, r5
   1ac8c:	add	r0, pc, r0
   1ac90:	bl	12950 <strchr@plt>
   1ac94:	cmp	r0, #0
   1ac98:	beq	1ad40 <__assert_fail@plt+0x80c0>
   1ac9c:	add	sl, r4, #1
   1aca0:	mov	r3, #0
   1aca4:	mov	r0, sl
   1aca8:	mov	r1, sp
   1acac:	strb	r5, [sp]
   1acb0:	strb	r3, [sp, #1]
   1acb4:	bl	18ec8 <__assert_fail@plt+0x6248>
   1acb8:	add	r3, r4, r0
   1acbc:	str	r0, [r7]
   1acc0:	ldrsb	r3, [r3, #1]
   1acc4:	subs	r5, r5, r3
   1acc8:	movne	r5, #1
   1accc:	cmp	r3, #0
   1acd0:	moveq	r5, #1
   1acd4:	cmp	r5, #0
   1acd8:	bne	1ad70 <__assert_fail@plt+0x80f0>
   1acdc:	add	r0, r0, #2
   1ace0:	add	r5, r4, r0
   1ace4:	ldrsb	r1, [r4, r0]
   1ace8:	cmp	r1, #0
   1acec:	beq	1ad00 <__assert_fail@plt+0x8080>
   1acf0:	mov	r0, r9
   1acf4:	bl	12950 <strchr@plt>
   1acf8:	cmp	r0, #0
   1acfc:	beq	1ad70 <__assert_fail@plt+0x80f0>
   1ad00:	mov	r4, sl
   1ad04:	str	r5, [r6]
   1ad08:	ldr	r2, [sp, #4]
   1ad0c:	ldr	r3, [r8]
   1ad10:	mov	r0, r4
   1ad14:	cmp	r2, r3
   1ad18:	bne	1ad84 <__assert_fail@plt+0x8104>
   1ad1c:	add	sp, sp, #8
   1ad20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad24:	mov	r1, r9
   1ad28:	mov	r0, r4
   1ad2c:	bl	12554 <strcspn@plt>
   1ad30:	add	r3, r4, r0
   1ad34:	str	r0, [r7]
   1ad38:	str	r3, [r6]
   1ad3c:	b	1ad08 <__assert_fail@plt+0x8088>
   1ad40:	mov	r1, r9
   1ad44:	mov	r0, r4
   1ad48:	bl	18ec8 <__assert_fail@plt+0x6248>
   1ad4c:	str	r0, [r7]
   1ad50:	ldrsb	r1, [r4, r0]
   1ad54:	add	r5, r4, r0
   1ad58:	cmp	r1, #0
   1ad5c:	beq	1ad7c <__assert_fail@plt+0x80fc>
   1ad60:	mov	r0, r9
   1ad64:	bl	12950 <strchr@plt>
   1ad68:	cmp	r0, #0
   1ad6c:	bne	1ad7c <__assert_fail@plt+0x80fc>
   1ad70:	str	r4, [r6]
   1ad74:	mov	r4, #0
   1ad78:	b	1ad08 <__assert_fail@plt+0x8088>
   1ad7c:	str	r5, [r6]
   1ad80:	b	1ad08 <__assert_fail@plt+0x8088>
   1ad84:	bl	126e0 <__stack_chk_fail@plt>
   1ad88:	andeq	r9, r1, r8, lsl r1
   1ad8c:	andeq	r0, r0, r8, lsr #5
   1ad90:	andeq	r8, r0, r0, asr r2
   1ad94:	push	{r4, lr}
   1ad98:	mov	r4, r0
   1ad9c:	b	1ada8 <__assert_fail@plt+0x8128>
   1ada0:	cmp	r0, #10
   1ada4:	beq	1adc0 <__assert_fail@plt+0x8140>
   1ada8:	mov	r0, r4
   1adac:	bl	12a58 <fgetc@plt>
   1adb0:	cmn	r0, #1
   1adb4:	bne	1ada0 <__assert_fail@plt+0x8120>
   1adb8:	mov	r0, #1
   1adbc:	pop	{r4, pc}
   1adc0:	mov	r0, #0
   1adc4:	pop	{r4, pc}
   1adc8:	push	{r1, r2, r3}
   1adcc:	subs	r3, r0, #0
   1add0:	ldr	r1, [pc, #168]	; 1ae80 <__assert_fail@plt+0x8200>
   1add4:	ldr	r2, [pc, #168]	; 1ae84 <__assert_fail@plt+0x8204>
   1add8:	add	r1, pc, r1
   1addc:	push	{r4, r5, r6, lr}
   1ade0:	sub	sp, sp, #12
   1ade4:	ldr	r5, [r1, r2]
   1ade8:	ldr	r6, [sp, #28]
   1adec:	ldr	r2, [r5]
   1adf0:	str	r2, [sp, #4]
   1adf4:	beq	1ae0c <__assert_fail@plt+0x818c>
   1adf8:	ldr	r2, [pc, #136]	; 1ae88 <__assert_fail@plt+0x8208>
   1adfc:	add	r2, pc, r2
   1ae00:	ldr	r2, [r2]
   1ae04:	tst	r2, #16777216	; 0x1000000
   1ae08:	beq	1ae5c <__assert_fail@plt+0x81dc>
   1ae0c:	ldr	r3, [pc, #120]	; 1ae8c <__assert_fail@plt+0x820c>
   1ae10:	ldr	r4, [r1, r3]
   1ae14:	add	ip, sp, #32
   1ae18:	mov	r2, r6
   1ae1c:	mov	r3, ip
   1ae20:	mov	r1, #1
   1ae24:	ldr	r0, [r4]
   1ae28:	str	ip, [sp]
   1ae2c:	bl	12890 <__vfprintf_chk@plt>
   1ae30:	ldr	r1, [r4]
   1ae34:	mov	r0, #10
   1ae38:	bl	12b60 <fputc@plt>
   1ae3c:	ldr	r2, [sp, #4]
   1ae40:	ldr	r3, [r5]
   1ae44:	cmp	r2, r3
   1ae48:	bne	1ae7c <__assert_fail@plt+0x81fc>
   1ae4c:	add	sp, sp, #12
   1ae50:	pop	{r4, r5, r6, lr}
   1ae54:	add	sp, sp, #12
   1ae58:	bx	lr
   1ae5c:	ldr	r0, [pc, #40]	; 1ae8c <__assert_fail@plt+0x820c>
   1ae60:	ldr	r2, [pc, #40]	; 1ae90 <__assert_fail@plt+0x8210>
   1ae64:	ldr	r4, [r1, r0]
   1ae68:	add	r2, pc, r2
   1ae6c:	mov	r1, #1
   1ae70:	ldr	r0, [r4]
   1ae74:	bl	12ab8 <__fprintf_chk@plt>
   1ae78:	b	1ae14 <__assert_fail@plt+0x8194>
   1ae7c:	bl	126e0 <__stack_chk_fail@plt>
   1ae80:	andeq	r8, r1, ip, ror #30
   1ae84:	andeq	r0, r0, r8, lsr #5
   1ae88:	strdeq	r9, [r1], -r0
   1ae8c:	andeq	r0, r0, ip, lsr #5
   1ae90:	andeq	r6, r0, r4, asr #12
   1ae94:	push	{r0, r1, r2, r3}
   1ae98:	ldr	r0, [pc, #104]	; 1af08 <__assert_fail@plt+0x8288>
   1ae9c:	ldr	r2, [pc, #104]	; 1af0c <__assert_fail@plt+0x828c>
   1aea0:	add	r0, pc, r0
   1aea4:	push	{r4, r5, lr}
   1aea8:	sub	sp, sp, #12
   1aeac:	ldr	r4, [r0, r2]
   1aeb0:	ldr	r1, [pc, #88]	; 1af10 <__assert_fail@plt+0x8290>
   1aeb4:	add	r3, sp, #28
   1aeb8:	ldr	ip, [r4]
   1aebc:	str	r3, [sp]
   1aec0:	str	ip, [sp, #4]
   1aec4:	ldr	r5, [r0, r1]
   1aec8:	ldr	r2, [sp, #24]
   1aecc:	mov	r1, #1
   1aed0:	ldr	r0, [r5]
   1aed4:	bl	12890 <__vfprintf_chk@plt>
   1aed8:	ldr	r1, [r5]
   1aedc:	mov	r0, #10
   1aee0:	bl	12b60 <fputc@plt>
   1aee4:	ldr	r2, [sp, #4]
   1aee8:	ldr	r3, [r4]
   1aeec:	cmp	r2, r3
   1aef0:	bne	1af04 <__assert_fail@plt+0x8284>
   1aef4:	add	sp, sp, #12
   1aef8:	pop	{r4, r5, lr}
   1aefc:	add	sp, sp, #16
   1af00:	bx	lr
   1af04:	bl	126e0 <__stack_chk_fail@plt>
   1af08:	andeq	r8, r1, r4, lsr #29
   1af0c:	andeq	r0, r0, r8, lsr #5
   1af10:	andeq	r0, r0, ip, lsr #5
   1af14:	ldr	r1, [r0, #12]
   1af18:	ldr	r2, [r0, #4]
   1af1c:	cmp	r1, #0
   1af20:	push	{r4, lr}
   1af24:	moveq	r4, r2
   1af28:	sub	sp, sp, #16
   1af2c:	beq	1af80 <__assert_fail@plt+0x8300>
   1af30:	cmp	r2, #0
   1af34:	beq	1afa8 <__assert_fail@plt+0x8328>
   1af38:	ldrsb	r3, [r2]
   1af3c:	ldr	ip, [pc, #116]	; 1afb8 <__assert_fail@plt+0x8338>
   1af40:	add	r4, r0, #16
   1af44:	cmp	r3, #47	; 0x2f
   1af48:	addeq	r2, r2, #1
   1af4c:	add	ip, pc, ip
   1af50:	mov	r3, #4096	; 0x1000
   1af54:	stmib	sp, {r1, r2}
   1af58:	mov	r0, r4
   1af5c:	str	ip, [sp]
   1af60:	mov	r1, r3
   1af64:	mov	r2, #1
   1af68:	bl	12c5c <__snprintf_chk@plt>
   1af6c:	cmp	r0, #0
   1af70:	movlt	r4, #0
   1af74:	blt	1af80 <__assert_fail@plt+0x8300>
   1af78:	cmp	r0, #4096	; 0x1000
   1af7c:	bge	1af8c <__assert_fail@plt+0x830c>
   1af80:	mov	r0, r4
   1af84:	add	sp, sp, #16
   1af88:	pop	{r4, pc}
   1af8c:	bl	129a4 <__errno_location@plt>
   1af90:	mov	r4, #0
   1af94:	mov	r3, #36	; 0x24
   1af98:	str	r3, [r0]
   1af9c:	mov	r0, r4
   1afa0:	add	sp, sp, #16
   1afa4:	pop	{r4, pc}
   1afa8:	mov	r4, r1
   1afac:	mov	r0, r4
   1afb0:	add	sp, sp, #16
   1afb4:	pop	{r4, pc}
   1afb8:			; <UNDEFINED> instruction: 0x00007fbc
   1afbc:	push	{r4, lr}
   1afc0:	sub	sp, sp, #8
   1afc4:	add	r4, r0, #16
   1afc8:	mov	r3, #4096	; 0x1000
   1afcc:	stm	sp, {r1, r2}
   1afd0:	mov	r0, r4
   1afd4:	mov	r1, r3
   1afd8:	mov	r2, #1
   1afdc:	bl	1265c <__vsnprintf_chk@plt>
   1afe0:	cmp	r0, #0
   1afe4:	movlt	r4, #0
   1afe8:	blt	1aff4 <__assert_fail@plt+0x8374>
   1afec:	cmp	r0, #4096	; 0x1000
   1aff0:	bge	1b000 <__assert_fail@plt+0x8380>
   1aff4:	mov	r0, r4
   1aff8:	add	sp, sp, #8
   1affc:	pop	{r4, pc}
   1b000:	bl	129a4 <__errno_location@plt>
   1b004:	mov	r4, #0
   1b008:	mov	r3, #36	; 0x24
   1b00c:	str	r3, [r0]
   1b010:	mov	r0, r4
   1b014:	add	sp, sp, #8
   1b018:	pop	{r4, pc}
   1b01c:	push	{r4, r5, r6, r7, lr}
   1b020:	sub	sp, sp, #20
   1b024:	ldr	r4, [pc, #312]	; 1b164 <__assert_fail@plt+0x84e4>
   1b028:	ldr	r3, [pc, #312]	; 1b168 <__assert_fail@plt+0x84e8>
   1b02c:	add	r4, pc, r4
   1b030:	ldr	r7, [pc, #308]	; 1b16c <__assert_fail@plt+0x84ec>
   1b034:	ldr	r5, [r4, r3]
   1b038:	add	r7, pc, r7
   1b03c:	ldr	r6, [r7]
   1b040:	ldr	r3, [r5]
   1b044:	cmp	r6, #0
   1b048:	str	r3, [sp, #12]
   1b04c:	beq	1b068 <__assert_fail@plt+0x83e8>
   1b050:	ldr	r2, [sp, #12]
   1b054:	ldr	r3, [r5]
   1b058:	cmp	r2, r3
   1b05c:	bne	1b160 <__assert_fail@plt+0x84e0>
   1b060:	add	sp, sp, #20
   1b064:	pop	{r4, r5, r6, r7, pc}
   1b068:	ldr	r0, [pc, #256]	; 1b170 <__assert_fail@plt+0x84f0>
   1b06c:	add	r0, pc, r0
   1b070:	bl	12824 <getenv@plt>
   1b074:	cmp	r0, #0
   1b078:	beq	1b0c0 <__assert_fail@plt+0x8440>
   1b07c:	mov	r2, r6
   1b080:	add	r1, sp, #8
   1b084:	bl	1292c <strtoul@plt>
   1b088:	mov	r6, r0
   1b08c:	ldr	r0, [sp, #8]
   1b090:	cmp	r0, #0
   1b094:	beq	1b0ac <__assert_fail@plt+0x842c>
   1b098:	ldr	r1, [pc, #212]	; 1b174 <__assert_fail@plt+0x84f4>
   1b09c:	add	r1, pc, r1
   1b0a0:	bl	12524 <strcmp@plt>
   1b0a4:	cmp	r0, #0
   1b0a8:	beq	1b0d4 <__assert_fail@plt+0x8454>
   1b0ac:	ldr	r3, [pc, #196]	; 1b178 <__assert_fail@plt+0x84f8>
   1b0b0:	cmp	r6, #0
   1b0b4:	add	r3, pc, r3
   1b0b8:	str	r6, [r3]
   1b0bc:	bne	1b0e0 <__assert_fail@plt+0x8460>
   1b0c0:	mov	r3, #2
   1b0c4:	ldr	r2, [pc, #176]	; 1b17c <__assert_fail@plt+0x84fc>
   1b0c8:	add	r2, pc, r2
   1b0cc:	str	r3, [r2]
   1b0d0:	b	1b050 <__assert_fail@plt+0x83d0>
   1b0d4:	ldr	r3, [pc, #164]	; 1b180 <__assert_fail@plt+0x8500>
   1b0d8:	mov	r6, r3
   1b0dc:	str	r3, [r7]
   1b0e0:	bl	125a8 <getuid@plt>
   1b0e4:	mov	r7, r0
   1b0e8:	bl	12734 <geteuid@plt>
   1b0ec:	cmp	r7, r0
   1b0f0:	beq	1b144 <__assert_fail@plt+0x84c4>
   1b0f4:	ldr	r7, [pc, #136]	; 1b184 <__assert_fail@plt+0x8504>
   1b0f8:	ldr	r2, [pc, #136]	; 1b188 <__assert_fail@plt+0x8508>
   1b0fc:	add	r7, pc, r7
   1b100:	orr	r3, r6, #16777216	; 0x1000000
   1b104:	str	r3, [r7]
   1b108:	ldr	r3, [r4, r2]
   1b10c:	ldr	r4, [r3]
   1b110:	bl	128fc <getpid@plt>
   1b114:	ldr	r3, [pc, #112]	; 1b18c <__assert_fail@plt+0x850c>
   1b118:	ldr	r2, [pc, #112]	; 1b190 <__assert_fail@plt+0x8510>
   1b11c:	add	r3, pc, r3
   1b120:	str	r3, [sp]
   1b124:	add	r2, pc, r2
   1b128:	mov	r1, #1
   1b12c:	mov	r3, r0
   1b130:	mov	r0, r4
   1b134:	bl	12ab8 <__fprintf_chk@plt>
   1b138:	ldr	r3, [r7]
   1b13c:	orr	r3, r3, #2
   1b140:	b	1b0c4 <__assert_fail@plt+0x8444>
   1b144:	bl	129ec <getgid@plt>
   1b148:	mov	r7, r0
   1b14c:	bl	12770 <getegid@plt>
   1b150:	cmp	r7, r0
   1b154:	orreq	r3, r6, #2
   1b158:	bne	1b0f4 <__assert_fail@plt+0x8474>
   1b15c:	b	1b0c4 <__assert_fail@plt+0x8444>
   1b160:	bl	126e0 <__stack_chk_fail@plt>
   1b164:	andeq	r8, r1, r8, lsl sp
   1b168:	andeq	r0, r0, r8, lsr #5
   1b16c:			; <UNDEFINED> instruction: 0x000199b4
   1b170:	andeq	r7, r0, r4, lsr #29
   1b174:	andeq	r6, r0, ip, ror fp
   1b178:	andeq	r9, r1, r8, lsr r9
   1b17c:	andeq	r9, r1, r4, lsr #18
   1b180:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1b184:	strdeq	r9, [r1], -r0
   1b188:	andeq	r0, r0, ip, lsr #5
   1b18c:	andeq	r7, r0, r4, lsl #28
   1b190:	andeq	r6, r0, r4, lsr #22
   1b194:	cmp	r0, #0
   1b198:	ldrne	r3, [r0, #8]
   1b19c:	addne	r3, r3, #1
   1b1a0:	strne	r3, [r0, #8]
   1b1a4:	bx	lr
   1b1a8:	ldr	r2, [pc, #228]	; 1b294 <__assert_fail@plt+0x8614>
   1b1ac:	push	{r4, r5, lr}
   1b1b0:	subs	r4, r0, #0
   1b1b4:	sub	sp, sp, #12
   1b1b8:	add	r2, pc, r2
   1b1bc:	beq	1b1d4 <__assert_fail@plt+0x8554>
   1b1c0:	ldr	r3, [r4, #8]
   1b1c4:	sub	r3, r3, #1
   1b1c8:	cmp	r3, #0
   1b1cc:	str	r3, [r4, #8]
   1b1d0:	ble	1b1dc <__assert_fail@plt+0x855c>
   1b1d4:	add	sp, sp, #12
   1b1d8:	pop	{r4, r5, pc}
   1b1dc:	ldr	r3, [pc, #180]	; 1b298 <__assert_fail@plt+0x8618>
   1b1e0:	add	r3, pc, r3
   1b1e4:	ldr	r3, [r3]
   1b1e8:	tst	r3, #4
   1b1ec:	bne	1b240 <__assert_fail@plt+0x85c0>
   1b1f0:	add	r3, r4, #4096	; 0x1000
   1b1f4:	ldr	r2, [r3, #16]
   1b1f8:	cmp	r2, #0
   1b1fc:	beq	1b20c <__assert_fail@plt+0x858c>
   1b200:	ldr	r3, [r3, #20]
   1b204:	mov	r0, r4
   1b208:	blx	r3
   1b20c:	ldr	r0, [r4]
   1b210:	cmp	r0, #0
   1b214:	bge	1b238 <__assert_fail@plt+0x85b8>
   1b218:	ldr	r0, [r4, #4]
   1b21c:	bl	125d8 <free@plt>
   1b220:	ldr	r0, [r4, #12]
   1b224:	bl	125d8 <free@plt>
   1b228:	mov	r0, r4
   1b22c:	add	sp, sp, #12
   1b230:	pop	{r4, r5, lr}
   1b234:	b	125d8 <free@plt>
   1b238:	bl	12c44 <close@plt>
   1b23c:	b	1b218 <__assert_fail@plt+0x8598>
   1b240:	ldr	r3, [pc, #84]	; 1b29c <__assert_fail@plt+0x861c>
   1b244:	ldr	r3, [r2, r3]
   1b248:	ldr	r5, [r3]
   1b24c:	bl	128fc <getpid@plt>
   1b250:	ldr	r2, [pc, #72]	; 1b2a0 <__assert_fail@plt+0x8620>
   1b254:	ldr	r3, [pc, #72]	; 1b2a4 <__assert_fail@plt+0x8624>
   1b258:	add	r2, pc, r2
   1b25c:	str	r2, [sp, #4]
   1b260:	ldr	r2, [pc, #64]	; 1b2a8 <__assert_fail@plt+0x8628>
   1b264:	add	r3, pc, r3
   1b268:	str	r3, [sp]
   1b26c:	add	r2, pc, r2
   1b270:	mov	r1, #1
   1b274:	mov	r3, r0
   1b278:	mov	r0, r5
   1b27c:	bl	12ab8 <__fprintf_chk@plt>
   1b280:	ldr	r1, [pc, #36]	; 1b2ac <__assert_fail@plt+0x862c>
   1b284:	mov	r0, r4
   1b288:	add	r1, pc, r1
   1b28c:	bl	1adc8 <__assert_fail@plt+0x8148>
   1b290:	b	1b1f0 <__assert_fail@plt+0x8570>
   1b294:	andeq	r8, r1, ip, lsl #23
   1b298:	andeq	r9, r1, ip, lsl #16
   1b29c:	andeq	r0, r0, ip, lsr #5
   1b2a0:	andeq	r6, r0, r4, lsl #5
   1b2a4:			; <UNDEFINED> instruction: 0x00007cbc
   1b2a8:	andeq	r6, r0, r0, ror #4
   1b2ac:	andeq	r7, r0, r0, lsr #25
   1b2b0:	push	{r0, r1, r2, r3}
   1b2b4:	mov	r0, #1
   1b2b8:	push	{r4, r5, r6, r7, lr}
   1b2bc:	sub	sp, sp, #20
   1b2c0:	ldr	r5, [pc, #264]	; 1b3d0 <__assert_fail@plt+0x8750>
   1b2c4:	ldr	r3, [pc, #264]	; 1b3d4 <__assert_fail@plt+0x8754>
   1b2c8:	add	r5, pc, r5
   1b2cc:	ldr	r1, [pc, #260]	; 1b3d8 <__assert_fail@plt+0x8758>
   1b2d0:	ldr	r6, [r5, r3]
   1b2d4:	ldr	r7, [sp, #40]	; 0x28
   1b2d8:	ldr	r3, [r6]
   1b2dc:	str	r3, [sp, #12]
   1b2e0:	bl	124dc <calloc@plt>
   1b2e4:	subs	r4, r0, #0
   1b2e8:	beq	1b344 <__assert_fail@plt+0x86c4>
   1b2ec:	ldr	r3, [pc, #232]	; 1b3dc <__assert_fail@plt+0x875c>
   1b2f0:	add	r3, pc, r3
   1b2f4:	ldr	r3, [r3]
   1b2f8:	tst	r3, #4
   1b2fc:	bne	1b368 <__assert_fail@plt+0x86e8>
   1b300:	mov	r1, #1
   1b304:	mvn	r3, #0
   1b308:	cmp	r7, #0
   1b30c:	str	r1, [r4, #8]
   1b310:	str	r3, [r4]
   1b314:	beq	1b344 <__assert_fail@plt+0x86c4>
   1b318:	add	ip, sp, #44	; 0x2c
   1b31c:	mov	r2, r7
   1b320:	mov	r3, ip
   1b324:	add	r0, r4, #4
   1b328:	str	ip, [sp, #8]
   1b32c:	bl	129d4 <__vasprintf_chk@plt>
   1b330:	cmp	r0, #0
   1b334:	blt	1b3bc <__assert_fail@plt+0x873c>
   1b338:	ldr	r3, [r4, #4]
   1b33c:	cmp	r3, #0
   1b340:	beq	1b3bc <__assert_fail@plt+0x873c>
   1b344:	ldr	r2, [sp, #12]
   1b348:	ldr	r3, [r6]
   1b34c:	mov	r0, r4
   1b350:	cmp	r2, r3
   1b354:	bne	1b3cc <__assert_fail@plt+0x874c>
   1b358:	add	sp, sp, #20
   1b35c:	pop	{r4, r5, r6, r7, lr}
   1b360:	add	sp, sp, #16
   1b364:	bx	lr
   1b368:	ldr	r3, [pc, #112]	; 1b3e0 <__assert_fail@plt+0x8760>
   1b36c:	ldr	r3, [r5, r3]
   1b370:	ldr	r5, [r3]
   1b374:	bl	128fc <getpid@plt>
   1b378:	ldr	r2, [pc, #100]	; 1b3e4 <__assert_fail@plt+0x8764>
   1b37c:	ldr	r3, [pc, #100]	; 1b3e8 <__assert_fail@plt+0x8768>
   1b380:	add	r2, pc, r2
   1b384:	str	r2, [sp, #4]
   1b388:	ldr	r2, [pc, #92]	; 1b3ec <__assert_fail@plt+0x876c>
   1b38c:	add	r3, pc, r3
   1b390:	str	r3, [sp]
   1b394:	add	r2, pc, r2
   1b398:	mov	r1, #1
   1b39c:	mov	r3, r0
   1b3a0:	mov	r0, r5
   1b3a4:	bl	12ab8 <__fprintf_chk@plt>
   1b3a8:	ldr	r1, [pc, #64]	; 1b3f0 <__assert_fail@plt+0x8770>
   1b3ac:	mov	r0, r4
   1b3b0:	add	r1, pc, r1
   1b3b4:	bl	1adc8 <__assert_fail@plt+0x8148>
   1b3b8:	b	1b300 <__assert_fail@plt+0x8680>
   1b3bc:	mov	r0, r4
   1b3c0:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1b3c4:	mov	r4, #0
   1b3c8:	b	1b344 <__assert_fail@plt+0x86c4>
   1b3cc:	bl	126e0 <__stack_chk_fail@plt>
   1b3d0:	andeq	r8, r1, ip, ror sl
   1b3d4:	andeq	r0, r0, r8, lsr #5
   1b3d8:	andeq	r1, r0, ip, lsl r0
   1b3dc:	strdeq	r9, [r1], -ip
   1b3e0:	andeq	r0, r0, ip, lsr #5
   1b3e4:	andeq	r6, r0, ip, asr r1
   1b3e8:	muleq	r0, r4, fp
   1b3ec:	andeq	r6, r0, r8, lsr r1
   1b3f0:	andeq	r7, r0, r0, lsl #23
   1b3f4:	ldr	r3, [r0]
   1b3f8:	push	{r4, r5, r6, lr}
   1b3fc:	cmp	r3, #0
   1b400:	ldr	r6, [pc, #220]	; 1b4e4 <__assert_fail@plt+0x8864>
   1b404:	sub	sp, sp, #8
   1b408:	add	r6, pc, r6
   1b40c:	bge	1b4c4 <__assert_fail@plt+0x8844>
   1b410:	cmp	r1, #0
   1b414:	mov	r5, r0
   1b418:	beq	1b4b4 <__assert_fail@plt+0x8834>
   1b41c:	mov	r0, r1
   1b420:	bl	126d4 <strdup@plt>
   1b424:	subs	r4, r0, #0
   1b428:	beq	1b4bc <__assert_fail@plt+0x883c>
   1b42c:	ldr	r0, [r5, #12]
   1b430:	bl	125d8 <free@plt>
   1b434:	ldr	r3, [pc, #172]	; 1b4e8 <__assert_fail@plt+0x8868>
   1b438:	str	r4, [r5, #12]
   1b43c:	add	r3, pc, r3
   1b440:	ldr	r0, [r3]
   1b444:	ands	r0, r0, #4
   1b448:	bne	1b454 <__assert_fail@plt+0x87d4>
   1b44c:	add	sp, sp, #8
   1b450:	pop	{r4, r5, r6, pc}
   1b454:	ldr	r3, [pc, #144]	; 1b4ec <__assert_fail@plt+0x886c>
   1b458:	ldr	r3, [r6, r3]
   1b45c:	ldr	r6, [r3]
   1b460:	bl	128fc <getpid@plt>
   1b464:	ldr	r2, [pc, #132]	; 1b4f0 <__assert_fail@plt+0x8870>
   1b468:	ldr	r3, [pc, #132]	; 1b4f4 <__assert_fail@plt+0x8874>
   1b46c:	add	r2, pc, r2
   1b470:	str	r2, [sp, #4]
   1b474:	ldr	r2, [pc, #124]	; 1b4f8 <__assert_fail@plt+0x8878>
   1b478:	add	r3, pc, r3
   1b47c:	str	r3, [sp]
   1b480:	add	r2, pc, r2
   1b484:	mov	r1, #1
   1b488:	mov	r3, r0
   1b48c:	mov	r0, r6
   1b490:	bl	12ab8 <__fprintf_chk@plt>
   1b494:	ldr	r1, [pc, #96]	; 1b4fc <__assert_fail@plt+0x887c>
   1b498:	mov	r0, r5
   1b49c:	mov	r2, r4
   1b4a0:	add	r1, pc, r1
   1b4a4:	bl	1adc8 <__assert_fail@plt+0x8148>
   1b4a8:	mov	r0, #0
   1b4ac:	add	sp, sp, #8
   1b4b0:	pop	{r4, r5, r6, pc}
   1b4b4:	mov	r4, r1
   1b4b8:	b	1b42c <__assert_fail@plt+0x87ac>
   1b4bc:	mvn	r0, #11
   1b4c0:	b	1b44c <__assert_fail@plt+0x87cc>
   1b4c4:	ldr	r3, [pc, #52]	; 1b500 <__assert_fail@plt+0x8880>
   1b4c8:	ldr	r1, [pc, #52]	; 1b504 <__assert_fail@plt+0x8884>
   1b4cc:	ldr	r0, [pc, #52]	; 1b508 <__assert_fail@plt+0x8888>
   1b4d0:	add	r3, pc, r3
   1b4d4:	mov	r2, #109	; 0x6d
   1b4d8:	add	r1, pc, r1
   1b4dc:	add	r0, pc, r0
   1b4e0:	bl	12c80 <__assert_fail@plt>
   1b4e4:	andeq	r8, r1, ip, lsr r9
   1b4e8:			; <UNDEFINED> instruction: 0x000195b0
   1b4ec:	andeq	r0, r0, ip, lsr #5
   1b4f0:	andeq	r6, r0, r0, ror r0
   1b4f4:	andeq	r7, r0, r8, lsr #21
   1b4f8:	andeq	r6, r0, ip, asr #32
   1b4fc:			; <UNDEFINED> instruction: 0x00007ab4
   1b500:	andeq	r7, r0, r0, lsl sl
   1b504:	andeq	r7, r0, r0, ror #20
   1b508:	andeq	r7, r0, r8, ror #20
   1b50c:	cmp	r0, #0
   1b510:	ldrne	r0, [r0, #12]
   1b514:	bx	lr
   1b518:	push	{r4, r5, r6, lr}
   1b51c:	subs	r5, r1, #0
   1b520:	ldr	r6, [pc, #196]	; 1b5ec <__assert_fail@plt+0x896c>
   1b524:	sub	sp, sp, #8
   1b528:	mov	r4, r0
   1b52c:	add	r6, pc, r6
   1b530:	beq	1b544 <__assert_fail@plt+0x88c4>
   1b534:	mov	r0, r5
   1b538:	bl	126d4 <strdup@plt>
   1b53c:	subs	r5, r0, #0
   1b540:	beq	1b5e4 <__assert_fail@plt+0x8964>
   1b544:	ldr	r0, [r4]
   1b548:	cmp	r0, #0
   1b54c:	blt	1b55c <__assert_fail@plt+0x88dc>
   1b550:	bl	12c44 <close@plt>
   1b554:	mvn	r3, #0
   1b558:	str	r3, [r4]
   1b55c:	ldr	r0, [r4, #4]
   1b560:	bl	125d8 <free@plt>
   1b564:	ldr	r3, [pc, #132]	; 1b5f0 <__assert_fail@plt+0x8970>
   1b568:	str	r5, [r4, #4]
   1b56c:	add	r3, pc, r3
   1b570:	ldr	r3, [r3]
   1b574:	ands	r0, r3, #4
   1b578:	bne	1b584 <__assert_fail@plt+0x8904>
   1b57c:	add	sp, sp, #8
   1b580:	pop	{r4, r5, r6, pc}
   1b584:	ldr	r3, [pc, #104]	; 1b5f4 <__assert_fail@plt+0x8974>
   1b588:	ldr	r3, [r6, r3]
   1b58c:	ldr	r6, [r3]
   1b590:	bl	128fc <getpid@plt>
   1b594:	ldr	r2, [pc, #92]	; 1b5f8 <__assert_fail@plt+0x8978>
   1b598:	ldr	r3, [pc, #92]	; 1b5fc <__assert_fail@plt+0x897c>
   1b59c:	add	r2, pc, r2
   1b5a0:	str	r2, [sp, #4]
   1b5a4:	ldr	r2, [pc, #84]	; 1b600 <__assert_fail@plt+0x8980>
   1b5a8:	add	r3, pc, r3
   1b5ac:	str	r3, [sp]
   1b5b0:	add	r2, pc, r2
   1b5b4:	mov	r1, #1
   1b5b8:	mov	r3, r0
   1b5bc:	mov	r0, r6
   1b5c0:	bl	12ab8 <__fprintf_chk@plt>
   1b5c4:	ldr	r1, [pc, #56]	; 1b604 <__assert_fail@plt+0x8984>
   1b5c8:	mov	r0, r4
   1b5cc:	mov	r2, r5
   1b5d0:	add	r1, pc, r1
   1b5d4:	bl	1adc8 <__assert_fail@plt+0x8148>
   1b5d8:	mov	r0, #0
   1b5dc:	add	sp, sp, #8
   1b5e0:	pop	{r4, r5, r6, pc}
   1b5e4:	mvn	r0, #11
   1b5e8:	b	1b57c <__assert_fail@plt+0x88fc>
   1b5ec:	andeq	r8, r1, r8, lsl r8
   1b5f0:	andeq	r9, r1, r0, lsl #9
   1b5f4:	andeq	r0, r0, ip, lsr #5
   1b5f8:	andeq	r5, r0, r0, asr #30
   1b5fc:	andeq	r7, r0, r8, ror r9
   1b600:	andeq	r5, r0, ip, lsl pc
   1b604:	muleq	r0, r8, r9
   1b608:	cmp	r0, #0
   1b60c:	ldrne	r0, [r0, #4]
   1b610:	bx	lr
   1b614:	ldr	r3, [pc, #144]	; 1b6ac <__assert_fail@plt+0x8a2c>
   1b618:	add	ip, r0, #4096	; 0x1000
   1b61c:	add	r3, pc, r3
   1b620:	str	r1, [ip, #16]
   1b624:	ldr	r3, [r3]
   1b628:	str	r2, [ip, #20]
   1b62c:	tst	r3, #4
   1b630:	ldr	r3, [pc, #120]	; 1b6b0 <__assert_fail@plt+0x8a30>
   1b634:	add	r3, pc, r3
   1b638:	bne	1b644 <__assert_fail@plt+0x89c4>
   1b63c:	mov	r0, #0
   1b640:	bx	lr
   1b644:	ldr	r2, [pc, #104]	; 1b6b4 <__assert_fail@plt+0x8a34>
   1b648:	push	{r4, r5, lr}
   1b64c:	sub	sp, sp, #12
   1b650:	ldr	r3, [r3, r2]
   1b654:	mov	r4, r0
   1b658:	ldr	r5, [r3]
   1b65c:	bl	128fc <getpid@plt>
   1b660:	ldr	r2, [pc, #80]	; 1b6b8 <__assert_fail@plt+0x8a38>
   1b664:	ldr	r3, [pc, #80]	; 1b6bc <__assert_fail@plt+0x8a3c>
   1b668:	add	r2, pc, r2
   1b66c:	str	r2, [sp, #4]
   1b670:	ldr	r2, [pc, #72]	; 1b6c0 <__assert_fail@plt+0x8a40>
   1b674:	add	r3, pc, r3
   1b678:	str	r3, [sp]
   1b67c:	add	r2, pc, r2
   1b680:	mov	r1, #1
   1b684:	mov	r3, r0
   1b688:	mov	r0, r5
   1b68c:	bl	12ab8 <__fprintf_chk@plt>
   1b690:	ldr	r1, [pc, #44]	; 1b6c4 <__assert_fail@plt+0x8a44>
   1b694:	mov	r0, r4
   1b698:	add	r1, pc, r1
   1b69c:	bl	1adc8 <__assert_fail@plt+0x8148>
   1b6a0:	mov	r0, #0
   1b6a4:	add	sp, sp, #12
   1b6a8:	pop	{r4, r5, pc}
   1b6ac:	ldrdeq	r9, [r1], -r0
   1b6b0:	andeq	r8, r1, r0, lsl r7
   1b6b4:	andeq	r0, r0, ip, lsr #5
   1b6b8:	andeq	r5, r0, r4, ror lr
   1b6bc:	andeq	r7, r0, ip, lsr #17
   1b6c0:	andeq	r5, r0, r0, asr lr
   1b6c4:	andeq	r7, r0, r0, ror #17
   1b6c8:	cmp	r0, #0
   1b6cc:	addne	r0, r0, #4096	; 0x1000
   1b6d0:	ldrne	r0, [r0, #16]
   1b6d4:	bx	lr
   1b6d8:	add	r3, r0, #4096	; 0x1000
   1b6dc:	mov	r0, #0
   1b6e0:	str	r1, [r3, #24]
   1b6e4:	bx	lr
   1b6e8:	push	{r4, r5, r6, lr}
   1b6ec:	subs	r4, r0, #0
   1b6f0:	ldr	r5, [pc, #284]	; 1b814 <__assert_fail@plt+0x8b94>
   1b6f4:	sub	sp, sp, #8
   1b6f8:	add	r5, pc, r5
   1b6fc:	beq	1b7f0 <__assert_fail@plt+0x8b70>
   1b700:	ldr	r3, [r4, #4]
   1b704:	cmp	r3, #0
   1b708:	beq	1b7cc <__assert_fail@plt+0x8b4c>
   1b70c:	ldr	r3, [r4]
   1b710:	cmp	r3, #0
   1b714:	blt	1b724 <__assert_fail@plt+0x8aa4>
   1b718:	mov	r0, r3
   1b71c:	add	sp, sp, #8
   1b720:	pop	{r4, r5, r6, pc}
   1b724:	bl	1af14 <__assert_fail@plt+0x8294>
   1b728:	subs	r6, r0, #0
   1b72c:	beq	1b7bc <__assert_fail@plt+0x8b3c>
   1b730:	ldr	r3, [pc, #224]	; 1b818 <__assert_fail@plt+0x8b98>
   1b734:	add	r3, pc, r3
   1b738:	ldr	r3, [r3]
   1b73c:	tst	r3, #4
   1b740:	bne	1b764 <__assert_fail@plt+0x8ae4>
   1b744:	mov	r0, r6
   1b748:	mov	r1, #524288	; 0x80000
   1b74c:	bl	12800 <open64@plt>
   1b750:	mov	r3, r0
   1b754:	str	r0, [r4]
   1b758:	mov	r0, r3
   1b75c:	add	sp, sp, #8
   1b760:	pop	{r4, r5, r6, pc}
   1b764:	ldr	r3, [pc, #176]	; 1b81c <__assert_fail@plt+0x8b9c>
   1b768:	ldr	r3, [r5, r3]
   1b76c:	ldr	r5, [r3]
   1b770:	bl	128fc <getpid@plt>
   1b774:	ldr	r2, [pc, #164]	; 1b820 <__assert_fail@plt+0x8ba0>
   1b778:	ldr	r3, [pc, #164]	; 1b824 <__assert_fail@plt+0x8ba4>
   1b77c:	add	r2, pc, r2
   1b780:	str	r2, [sp, #4]
   1b784:	ldr	r2, [pc, #156]	; 1b828 <__assert_fail@plt+0x8ba8>
   1b788:	add	r3, pc, r3
   1b78c:	str	r3, [sp]
   1b790:	add	r2, pc, r2
   1b794:	mov	r1, #1
   1b798:	mov	r3, r0
   1b79c:	mov	r0, r5
   1b7a0:	bl	12ab8 <__fprintf_chk@plt>
   1b7a4:	ldr	r1, [pc, #128]	; 1b82c <__assert_fail@plt+0x8bac>
   1b7a8:	mov	r2, r6
   1b7ac:	add	r1, pc, r1
   1b7b0:	mov	r0, r4
   1b7b4:	bl	1adc8 <__assert_fail@plt+0x8148>
   1b7b8:	b	1b744 <__assert_fail@plt+0x8ac4>
   1b7bc:	bl	129a4 <__errno_location@plt>
   1b7c0:	ldr	r3, [r0]
   1b7c4:	rsb	r3, r3, #0
   1b7c8:	b	1b718 <__assert_fail@plt+0x8a98>
   1b7cc:	ldr	r3, [pc, #92]	; 1b830 <__assert_fail@plt+0x8bb0>
   1b7d0:	ldr	r1, [pc, #92]	; 1b834 <__assert_fail@plt+0x8bb4>
   1b7d4:	ldr	r0, [pc, #92]	; 1b838 <__assert_fail@plt+0x8bb8>
   1b7d8:	add	r3, pc, r3
   1b7dc:	mov	r2, #201	; 0xc9
   1b7e0:	add	r3, r3, #20
   1b7e4:	add	r1, pc, r1
   1b7e8:	add	r0, pc, r0
   1b7ec:	bl	12c80 <__assert_fail@plt>
   1b7f0:	ldr	r3, [pc, #68]	; 1b83c <__assert_fail@plt+0x8bbc>
   1b7f4:	ldr	r1, [pc, #68]	; 1b840 <__assert_fail@plt+0x8bc0>
   1b7f8:	ldr	r0, [pc, #68]	; 1b844 <__assert_fail@plt+0x8bc4>
   1b7fc:	add	r3, pc, r3
   1b800:	mov	r2, #200	; 0xc8
   1b804:	add	r3, r3, #20
   1b808:	add	r1, pc, r1
   1b80c:	add	r0, pc, r0
   1b810:	bl	12c80 <__assert_fail@plt>
   1b814:	andeq	r8, r1, ip, asr #12
   1b818:			; <UNDEFINED> instruction: 0x000192b8
   1b81c:	andeq	r0, r0, ip, lsr #5
   1b820:	andeq	r5, r0, r0, ror #26
   1b824:	muleq	r0, r8, r7
   1b828:	andeq	r5, r0, ip, lsr sp
   1b82c:	strdeq	r7, [r0], -r0
   1b830:	andeq	r7, r0, r8, lsl #14
   1b834:	andeq	r7, r0, r4, asr r7
   1b838:	andeq	r7, r0, r4, lsr #15
   1b83c:	andeq	r7, r0, r4, ror #13
   1b840:	andeq	r7, r0, r0, lsr r7
   1b844:	andeq	r7, r0, ip, ror r7
   1b848:	push	{r3}		; (str r3, [sp, #-4]!)
   1b84c:	ldr	r3, [pc, #340]	; 1b9a8 <__assert_fail@plt+0x8d28>
   1b850:	ldr	ip, [pc, #340]	; 1b9ac <__assert_fail@plt+0x8d2c>
   1b854:	add	r3, pc, r3
   1b858:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b85c:	sub	sp, sp, #24
   1b860:	ldr	r8, [r3, ip]
   1b864:	ldr	r7, [sp, #52]	; 0x34
   1b868:	mov	r6, r2
   1b86c:	ldr	r2, [r8]
   1b870:	cmp	r7, #0
   1b874:	mov	r4, r1
   1b878:	str	r2, [sp, #20]
   1b87c:	beq	1b968 <__assert_fail@plt+0x8ce8>
   1b880:	add	r3, sp, #56	; 0x38
   1b884:	ldr	r5, [r0, #4]
   1b888:	mov	r1, r7
   1b88c:	mov	r2, r3
   1b890:	mov	r9, r0
   1b894:	str	r3, [sp, #16]
   1b898:	bl	1afbc <__assert_fail@plt+0x833c>
   1b89c:	cmp	r5, #0
   1b8a0:	beq	1b8b0 <__assert_fail@plt+0x8c30>
   1b8a4:	ldrsb	r3, [r5]
   1b8a8:	cmp	r3, #47	; 0x2f
   1b8ac:	addeq	r5, r5, #1
   1b8b0:	cmp	r0, #0
   1b8b4:	beq	1b8c4 <__assert_fail@plt+0x8c44>
   1b8b8:	ldrsb	r3, [r0]
   1b8bc:	cmp	r3, #47	; 0x2f
   1b8c0:	addeq	r0, r0, #1
   1b8c4:	ldr	r2, [r9, #12]
   1b8c8:	cmp	r2, #0
   1b8cc:	beq	1b954 <__assert_fail@plt+0x8cd4>
   1b8d0:	cmp	r5, #0
   1b8d4:	beq	1b940 <__assert_fail@plt+0x8cc0>
   1b8d8:	cmp	r0, #0
   1b8dc:	beq	1b934 <__assert_fail@plt+0x8cb4>
   1b8e0:	ldr	r3, [pc, #200]	; 1b9b0 <__assert_fail@plt+0x8d30>
   1b8e4:	str	r0, [sp, #12]
   1b8e8:	add	r3, pc, r3
   1b8ec:	stmib	sp, {r2, r5}
   1b8f0:	str	r3, [sp]
   1b8f4:	mov	r2, #1
   1b8f8:	mvn	r3, #0
   1b8fc:	mov	r1, r6
   1b900:	mov	r0, r4
   1b904:	bl	12c5c <__snprintf_chk@plt>
   1b908:	cmp	r0, r6
   1b90c:	bcs	1b990 <__assert_fail@plt+0x8d10>
   1b910:	ldr	r2, [sp, #20]
   1b914:	ldr	r3, [r8]
   1b918:	mov	r0, r4
   1b91c:	cmp	r2, r3
   1b920:	bne	1b9a4 <__assert_fail@plt+0x8d24>
   1b924:	add	sp, sp, #24
   1b928:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1b92c:	add	sp, sp, #4
   1b930:	bx	lr
   1b934:	ldr	r0, [pc, #120]	; 1b9b4 <__assert_fail@plt+0x8d34>
   1b938:	add	r0, pc, r0
   1b93c:	b	1b8e0 <__assert_fail@plt+0x8c60>
   1b940:	ldr	r5, [pc, #112]	; 1b9b8 <__assert_fail@plt+0x8d38>
   1b944:	cmp	r0, #0
   1b948:	add	r5, pc, r5
   1b94c:	bne	1b8e0 <__assert_fail@plt+0x8c60>
   1b950:	b	1b934 <__assert_fail@plt+0x8cb4>
   1b954:	ldr	r2, [pc, #96]	; 1b9bc <__assert_fail@plt+0x8d3c>
   1b958:	cmp	r5, #0
   1b95c:	add	r2, pc, r2
   1b960:	bne	1b8d8 <__assert_fail@plt+0x8c58>
   1b964:	b	1b940 <__assert_fail@plt+0x8cc0>
   1b968:	bl	1af14 <__assert_fail@plt+0x8294>
   1b96c:	subs	r1, r0, #0
   1b970:	moveq	r4, r1
   1b974:	beq	1b910 <__assert_fail@plt+0x8c90>
   1b978:	mov	r2, r6
   1b97c:	add	r6, r4, r6
   1b980:	mov	r0, r4
   1b984:	bl	12a28 <strncpy@plt>
   1b988:	strb	r7, [r6, #-1]
   1b98c:	b	1b910 <__assert_fail@plt+0x8c90>
   1b990:	bl	129a4 <__errno_location@plt>
   1b994:	mov	r3, #36	; 0x24
   1b998:	mov	r4, #0
   1b99c:	str	r3, [r0]
   1b9a0:	b	1b910 <__assert_fail@plt+0x8c90>
   1b9a4:	bl	126e0 <__stack_chk_fail@plt>
   1b9a8:	strdeq	r8, [r1], -r0
   1b9ac:	andeq	r0, r0, r8, lsr #5
   1b9b0:	andeq	r7, r0, r8, asr #13
   1b9b4:	andeq	r6, r0, r8, asr #6
   1b9b8:	andeq	r6, r0, r8, lsr r3
   1b9bc:	andeq	r6, r0, r4, lsr #6
   1b9c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b9c4:	sub	sp, sp, #20
   1b9c8:	ldr	r5, [pc, #296]	; 1baf8 <__assert_fail@plt+0x8e78>
   1b9cc:	ldr	r3, [pc, #296]	; 1bafc <__assert_fail@plt+0x8e7c>
   1b9d0:	add	r5, pc, r5
   1b9d4:	mov	r8, r1
   1b9d8:	ldr	r6, [r5, r3]
   1b9dc:	mov	r7, r2
   1b9e0:	mov	r9, r0
   1b9e4:	ldr	r3, [r6]
   1b9e8:	str	r3, [sp, #12]
   1b9ec:	bl	1b6e8 <__assert_fail@plt+0x8a68>
   1b9f0:	subs	r4, r0, #0
   1b9f4:	str	r0, [sp, #8]
   1b9f8:	blt	1ba2c <__assert_fail@plt+0x8dac>
   1b9fc:	ldr	r3, [pc, #252]	; 1bb00 <__assert_fail@plt+0x8e80>
   1ba00:	add	r3, pc, r3
   1ba04:	ldr	r3, [r3]
   1ba08:	tst	r3, #4
   1ba0c:	bne	1ba98 <__assert_fail@plt+0x8e18>
   1ba10:	mov	r0, r4
   1ba14:	mov	r3, #0
   1ba18:	mov	r2, r8
   1ba1c:	mov	r1, r7
   1ba20:	bl	12620 <faccessat@plt>
   1ba24:	subs	r4, r0, #0
   1ba28:	bne	1ba48 <__assert_fail@plt+0x8dc8>
   1ba2c:	ldr	r2, [sp, #12]
   1ba30:	ldr	r3, [r6]
   1ba34:	mov	r0, r4
   1ba38:	cmp	r2, r3
   1ba3c:	bne	1baf4 <__assert_fail@plt+0x8e74>
   1ba40:	add	sp, sp, #20
   1ba44:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ba48:	bl	129a4 <__errno_location@plt>
   1ba4c:	ldr	r3, [r0]
   1ba50:	cmp	r3, #2
   1ba54:	bne	1ba2c <__assert_fail@plt+0x8dac>
   1ba58:	add	r3, r9, #4096	; 0x1000
   1ba5c:	ldr	r3, [r3, #24]
   1ba60:	cmp	r3, #0
   1ba64:	beq	1ba2c <__assert_fail@plt+0x8dac>
   1ba68:	mov	r0, r9
   1ba6c:	add	r2, sp, #8
   1ba70:	mov	r1, r7
   1ba74:	blx	r3
   1ba78:	subs	r3, r0, #0
   1ba7c:	bne	1ba2c <__assert_fail@plt+0x8dac>
   1ba80:	mov	r2, r8
   1ba84:	mov	r1, r7
   1ba88:	ldr	r0, [sp, #8]
   1ba8c:	bl	12620 <faccessat@plt>
   1ba90:	mov	r4, r0
   1ba94:	b	1ba2c <__assert_fail@plt+0x8dac>
   1ba98:	ldr	r3, [pc, #100]	; 1bb04 <__assert_fail@plt+0x8e84>
   1ba9c:	ldr	r3, [r5, r3]
   1baa0:	ldr	r4, [r3]
   1baa4:	bl	128fc <getpid@plt>
   1baa8:	ldr	r2, [pc, #88]	; 1bb08 <__assert_fail@plt+0x8e88>
   1baac:	ldr	r3, [pc, #88]	; 1bb0c <__assert_fail@plt+0x8e8c>
   1bab0:	add	r2, pc, r2
   1bab4:	str	r2, [sp, #4]
   1bab8:	ldr	r2, [pc, #80]	; 1bb10 <__assert_fail@plt+0x8e90>
   1babc:	add	r3, pc, r3
   1bac0:	str	r3, [sp]
   1bac4:	add	r2, pc, r2
   1bac8:	mov	r1, #1
   1bacc:	mov	r3, r0
   1bad0:	mov	r0, r4
   1bad4:	bl	12ab8 <__fprintf_chk@plt>
   1bad8:	ldr	r1, [pc, #52]	; 1bb14 <__assert_fail@plt+0x8e94>
   1badc:	mov	r2, r7
   1bae0:	add	r1, pc, r1
   1bae4:	mov	r0, r9
   1bae8:	bl	1adc8 <__assert_fail@plt+0x8148>
   1baec:	ldr	r4, [sp, #8]
   1baf0:	b	1ba10 <__assert_fail@plt+0x8d90>
   1baf4:	bl	126e0 <__stack_chk_fail@plt>
   1baf8:	andeq	r8, r1, r4, ror r3
   1bafc:	andeq	r0, r0, r8, lsr #5
   1bb00:	andeq	r8, r1, ip, ror #31
   1bb04:	andeq	r0, r0, ip, lsr #5
   1bb08:	andeq	r5, r0, ip, lsr #20
   1bb0c:	andeq	r7, r0, r4, ror #8
   1bb10:	andeq	r5, r0, r8, lsl #20
   1bb14:	ldrdeq	r7, [r0], -ip
   1bb18:	push	{r2, r3}
   1bb1c:	ldr	r3, [pc, #104]	; 1bb8c <__assert_fail@plt+0x8f0c>
   1bb20:	ldr	r2, [pc, #104]	; 1bb90 <__assert_fail@plt+0x8f10>
   1bb24:	add	r3, pc, r3
   1bb28:	push	{r4, r5, r6, lr}
   1bb2c:	sub	sp, sp, #8
   1bb30:	ldr	r4, [r3, r2]
   1bb34:	add	ip, sp, #28
   1bb38:	mov	r2, ip
   1bb3c:	ldr	r3, [r4]
   1bb40:	mov	r6, r1
   1bb44:	ldr	r1, [sp, #24]
   1bb48:	str	r3, [sp, #4]
   1bb4c:	mov	r5, r0
   1bb50:	str	ip, [sp]
   1bb54:	bl	1afbc <__assert_fail@plt+0x833c>
   1bb58:	mov	r1, r6
   1bb5c:	mov	r2, r0
   1bb60:	mov	r0, r5
   1bb64:	bl	1b9c0 <__assert_fail@plt+0x8d40>
   1bb68:	ldr	r2, [sp, #4]
   1bb6c:	ldr	r3, [r4]
   1bb70:	cmp	r2, r3
   1bb74:	bne	1bb88 <__assert_fail@plt+0x8f08>
   1bb78:	add	sp, sp, #8
   1bb7c:	pop	{r4, r5, r6, lr}
   1bb80:	add	sp, sp, #8
   1bb84:	bx	lr
   1bb88:	bl	126e0 <__stack_chk_fail@plt>
   1bb8c:	andeq	r8, r1, r0, lsr #4
   1bb90:	andeq	r0, r0, r8, lsr #5
   1bb94:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bb98:	sub	sp, sp, #20
   1bb9c:	ldr	r5, [pc, #536]	; 1bdbc <__assert_fail@plt+0x913c>
   1bba0:	ldr	r3, [pc, #536]	; 1bdc0 <__assert_fail@plt+0x9140>
   1bba4:	add	r5, pc, r5
   1bba8:	subs	r8, r0, #0
   1bbac:	ldr	r6, [r5, r3]
   1bbb0:	mov	r7, r2
   1bbb4:	ldr	r3, [r6]
   1bbb8:	str	r3, [sp, #12]
   1bbbc:	beq	1bc1c <__assert_fail@plt+0x8f9c>
   1bbc0:	mov	r9, r1
   1bbc4:	bl	1b6e8 <__assert_fail@plt+0x8a68>
   1bbc8:	cmp	r0, #0
   1bbcc:	mov	r4, r0
   1bbd0:	str	r0, [sp, #8]
   1bbd4:	blt	1bc00 <__assert_fail@plt+0x8f80>
   1bbd8:	mov	r2, r9
   1bbdc:	mov	r1, r7
   1bbe0:	bl	12644 <__openat64_2@plt>
   1bbe4:	subs	r4, r0, #0
   1bbe8:	blt	1bc90 <__assert_fail@plt+0x9010>
   1bbec:	ldr	r3, [pc, #464]	; 1bdc4 <__assert_fail@plt+0x9144>
   1bbf0:	add	r3, pc, r3
   1bbf4:	ldr	r3, [r3]
   1bbf8:	tst	r3, #4
   1bbfc:	bne	1bd48 <__assert_fail@plt+0x90c8>
   1bc00:	ldr	r2, [sp, #12]
   1bc04:	ldr	r3, [r6]
   1bc08:	mov	r0, r4
   1bc0c:	cmp	r2, r3
   1bc10:	bne	1bdb0 <__assert_fail@plt+0x9130>
   1bc14:	add	sp, sp, #20
   1bc18:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bc1c:	mov	r0, r2
   1bc20:	bl	12974 <__open64_2@plt>
   1bc24:	ldr	r3, [pc, #412]	; 1bdc8 <__assert_fail@plt+0x9148>
   1bc28:	add	r3, pc, r3
   1bc2c:	ldr	r3, [r3]
   1bc30:	tst	r3, #4
   1bc34:	mov	r4, r0
   1bc38:	beq	1bc00 <__assert_fail@plt+0x8f80>
   1bc3c:	ldr	r3, [pc, #392]	; 1bdcc <__assert_fail@plt+0x914c>
   1bc40:	ldr	r3, [r5, r3]
   1bc44:	ldr	r5, [r3]
   1bc48:	bl	128fc <getpid@plt>
   1bc4c:	ldr	r2, [pc, #380]	; 1bdd0 <__assert_fail@plt+0x9150>
   1bc50:	ldr	r3, [pc, #380]	; 1bdd4 <__assert_fail@plt+0x9154>
   1bc54:	add	r2, pc, r2
   1bc58:	str	r2, [sp, #4]
   1bc5c:	ldr	r2, [pc, #372]	; 1bdd8 <__assert_fail@plt+0x9158>
   1bc60:	add	r3, pc, r3
   1bc64:	str	r3, [sp]
   1bc68:	add	r2, pc, r2
   1bc6c:	mov	r1, #1
   1bc70:	mov	r3, r0
   1bc74:	mov	r0, r5
   1bc78:	bl	12ab8 <__fprintf_chk@plt>
   1bc7c:	ldr	r0, [pc, #344]	; 1bddc <__assert_fail@plt+0x915c>
   1bc80:	mov	r1, r7
   1bc84:	add	r0, pc, r0
   1bc88:	bl	1ae94 <__assert_fail@plt+0x8214>
   1bc8c:	b	1bc00 <__assert_fail@plt+0x8f80>
   1bc90:	bl	129a4 <__errno_location@plt>
   1bc94:	ldr	r3, [r0]
   1bc98:	cmp	r3, #2
   1bc9c:	bne	1bbec <__assert_fail@plt+0x8f6c>
   1bca0:	add	r3, r8, #4096	; 0x1000
   1bca4:	ldr	r3, [r3, #24]
   1bca8:	cmp	r3, #0
   1bcac:	beq	1bbec <__assert_fail@plt+0x8f6c>
   1bcb0:	add	r2, sp, #8
   1bcb4:	mov	r1, r7
   1bcb8:	mov	r0, r8
   1bcbc:	blx	r3
   1bcc0:	cmp	r0, #0
   1bcc4:	bne	1bbec <__assert_fail@plt+0x8f6c>
   1bcc8:	mov	r2, r9
   1bccc:	mov	r1, r7
   1bcd0:	ldr	r0, [sp, #8]
   1bcd4:	bl	12644 <__openat64_2@plt>
   1bcd8:	ldr	r3, [pc, #256]	; 1bde0 <__assert_fail@plt+0x9160>
   1bcdc:	add	r3, pc, r3
   1bce0:	ldr	r3, [r3]
   1bce4:	tst	r3, #4
   1bce8:	mov	r9, r0
   1bcec:	beq	1bdb4 <__assert_fail@plt+0x9134>
   1bcf0:	ldr	r3, [pc, #212]	; 1bdcc <__assert_fail@plt+0x914c>
   1bcf4:	ldr	r3, [r5, r3]
   1bcf8:	ldr	r5, [r3]
   1bcfc:	bl	128fc <getpid@plt>
   1bd00:	ldr	r2, [pc, #220]	; 1bde4 <__assert_fail@plt+0x9164>
   1bd04:	ldr	r3, [pc, #220]	; 1bde8 <__assert_fail@plt+0x9168>
   1bd08:	add	r2, pc, r2
   1bd0c:	str	r2, [sp, #4]
   1bd10:	ldr	r2, [pc, #212]	; 1bdec <__assert_fail@plt+0x916c>
   1bd14:	add	r3, pc, r3
   1bd18:	str	r3, [sp]
   1bd1c:	add	r2, pc, r2
   1bd20:	mov	r1, #1
   1bd24:	mov	r3, r0
   1bd28:	mov	r0, r5
   1bd2c:	bl	12ab8 <__fprintf_chk@plt>
   1bd30:	ldr	r3, [pc, #184]	; 1bdf0 <__assert_fail@plt+0x9170>
   1bd34:	cmp	r4, r9
   1bd38:	add	r3, pc, r3
   1bd3c:	ldrne	r3, [pc, #176]	; 1bdf4 <__assert_fail@plt+0x9174>
   1bd40:	addne	r3, pc, r3
   1bd44:	b	1bd94 <__assert_fail@plt+0x9114>
   1bd48:	ldr	r3, [pc, #124]	; 1bdcc <__assert_fail@plt+0x914c>
   1bd4c:	mov	r9, r4
   1bd50:	ldr	r3, [r5, r3]
   1bd54:	ldr	r4, [r3]
   1bd58:	bl	128fc <getpid@plt>
   1bd5c:	ldr	r2, [pc, #148]	; 1bdf8 <__assert_fail@plt+0x9178>
   1bd60:	ldr	r3, [pc, #148]	; 1bdfc <__assert_fail@plt+0x917c>
   1bd64:	add	r2, pc, r2
   1bd68:	str	r2, [sp, #4]
   1bd6c:	ldr	r2, [pc, #140]	; 1be00 <__assert_fail@plt+0x9180>
   1bd70:	add	r3, pc, r3
   1bd74:	str	r3, [sp]
   1bd78:	add	r2, pc, r2
   1bd7c:	mov	r1, #1
   1bd80:	mov	r3, r0
   1bd84:	mov	r0, r4
   1bd88:	bl	12ab8 <__fprintf_chk@plt>
   1bd8c:	ldr	r3, [pc, #112]	; 1be04 <__assert_fail@plt+0x9184>
   1bd90:	add	r3, pc, r3
   1bd94:	ldr	r1, [pc, #108]	; 1be08 <__assert_fail@plt+0x9188>
   1bd98:	mov	r2, r7
   1bd9c:	mov	r0, r8
   1bda0:	add	r1, pc, r1
   1bda4:	mov	r4, r9
   1bda8:	bl	1adc8 <__assert_fail@plt+0x8148>
   1bdac:	b	1bc00 <__assert_fail@plt+0x8f80>
   1bdb0:	bl	126e0 <__stack_chk_fail@plt>
   1bdb4:	mov	r4, r0
   1bdb8:	b	1bc00 <__assert_fail@plt+0x8f80>
   1bdbc:	andeq	r8, r1, r0, lsr #3
   1bdc0:	andeq	r0, r0, r8, lsr #5
   1bdc4:	strdeq	r8, [r1], -ip
   1bdc8:	andeq	r8, r1, r4, asr #27
   1bdcc:	andeq	r0, r0, ip, lsr #5
   1bdd0:	andeq	r5, r0, r8, lsl #17
   1bdd4:	andeq	r7, r0, r0, asr #5
   1bdd8:	andeq	r5, r0, r4, ror #16
   1bddc:	andeq	r7, r0, r8, asr r3
   1bde0:	andeq	r8, r1, r0, lsl sp
   1bde4:	ldrdeq	r5, [r0], -r4
   1bde8:	andeq	r7, r0, ip, lsl #4
   1bdec:			; <UNDEFINED> instruction: 0x000057b0
   1bdf0:	andeq	r5, r0, r8, asr #30
   1bdf4:	andeq	r7, r0, ip, lsl #5
   1bdf8:	andeq	r5, r0, r8, ror r7
   1bdfc:			; <UNDEFINED> instruction: 0x000071b0
   1be00:	andeq	r5, r0, r4, asr r7
   1be04:	strdeq	r5, [r0], -r0
   1be08:	andeq	r7, r0, ip, asr #4
   1be0c:	mov	ip, r2
   1be10:	push	{r4, r5, r6, lr}
   1be14:	mov	r2, r3
   1be18:	mov	r5, r1
   1be1c:	mov	r1, ip
   1be20:	mov	r4, r0
   1be24:	bl	1afbc <__assert_fail@plt+0x833c>
   1be28:	subs	r2, r0, #0
   1be2c:	beq	1be40 <__assert_fail@plt+0x91c0>
   1be30:	mov	r1, r5
   1be34:	mov	r0, r4
   1be38:	pop	{r4, r5, r6, lr}
   1be3c:	b	1bb94 <__assert_fail@plt+0x8f14>
   1be40:	bl	129a4 <__errno_location@plt>
   1be44:	ldr	r0, [r0]
   1be48:	rsb	r0, r0, #0
   1be4c:	pop	{r4, r5, r6, pc}
   1be50:	push	{r2, r3}
   1be54:	ldr	r2, [pc, #80]	; 1beac <__assert_fail@plt+0x922c>
   1be58:	ldr	ip, [pc, #80]	; 1beb0 <__assert_fail@plt+0x9230>
   1be5c:	add	r2, pc, r2
   1be60:	push	{r4, lr}
   1be64:	sub	sp, sp, #8
   1be68:	ldr	r4, [r2, ip]
   1be6c:	add	lr, sp, #20
   1be70:	mov	r3, lr
   1be74:	ldr	ip, [r4]
   1be78:	ldr	r2, [sp, #16]
   1be7c:	str	lr, [sp]
   1be80:	str	ip, [sp, #4]
   1be84:	bl	1be0c <__assert_fail@plt+0x918c>
   1be88:	ldr	r2, [sp, #4]
   1be8c:	ldr	r3, [r4]
   1be90:	cmp	r2, r3
   1be94:	bne	1bea8 <__assert_fail@plt+0x9228>
   1be98:	add	sp, sp, #8
   1be9c:	pop	{r4, lr}
   1bea0:	add	sp, sp, #8
   1bea4:	bx	lr
   1bea8:	bl	126e0 <__stack_chk_fail@plt>
   1beac:	andeq	r7, r1, r8, ror #29
   1beb0:	andeq	r0, r0, r8, lsr #5
   1beb4:	push	{r4, r5, r6, r7, r8, lr}
   1beb8:	subs	r4, r1, #0
   1bebc:	beq	1bf78 <__assert_fail@plt+0x92f8>
   1bec0:	ldrsb	r3, [r4]
   1bec4:	cmp	r3, #0
   1bec8:	beq	1bf80 <__assert_fail@plt+0x9300>
   1becc:	ldr	r5, [pc, #180]	; 1bf88 <__assert_fail@plt+0x9308>
   1bed0:	ldr	r7, [pc, #180]	; 1bf8c <__assert_fail@plt+0x930c>
   1bed4:	ldr	lr, [pc, #180]	; 1bf90 <__assert_fail@plt+0x9310>
   1bed8:	ldr	r6, [pc, #180]	; 1bf94 <__assert_fail@plt+0x9314>
   1bedc:	mov	ip, r4
   1bee0:	mov	r1, #0
   1bee4:	b	1bf14 <__assert_fail@plt+0x9294>
   1bee8:	cmp	r3, #119	; 0x77
   1beec:	beq	1bf48 <__assert_fail@plt+0x92c8>
   1bef0:	cmp	r3, #97	; 0x61
   1bef4:	beq	1bf5c <__assert_fail@plt+0x92dc>
   1bef8:	cmp	r3, #101	; 0x65
   1befc:	orreq	r1, r1, #524288	; 0x80000
   1bf00:	cmn	ip, #1
   1bf04:	beq	1bf30 <__assert_fail@plt+0x92b0>
   1bf08:	ldrsb	r3, [ip, #1]!
   1bf0c:	cmp	r3, #0
   1bf10:	beq	1bf30 <__assert_fail@plt+0x92b0>
   1bf14:	cmp	r3, #114	; 0x72
   1bf18:	bne	1bee8 <__assert_fail@plt+0x9268>
   1bf1c:	ldrsb	r3, [ip, #1]
   1bf20:	cmp	r3, #43	; 0x2b
   1bf24:	orreq	r1, r1, #2
   1bf28:	cmn	ip, #1
   1bf2c:	bne	1bf08 <__assert_fail@plt+0x9288>
   1bf30:	bl	1bb94 <__assert_fail@plt+0x8f14>
   1bf34:	cmp	r0, #0
   1bf38:	blt	1bf70 <__assert_fail@plt+0x92f0>
   1bf3c:	mov	r1, r4
   1bf40:	pop	{r4, r5, r6, r7, r8, lr}
   1bf44:	b	124c4 <fdopen@plt>
   1bf48:	ldrsb	r3, [ip, #1]
   1bf4c:	cmp	r3, #43	; 0x2b
   1bf50:	orreq	r1, r1, r6
   1bf54:	orrne	r1, r1, lr
   1bf58:	b	1bf00 <__assert_fail@plt+0x9280>
   1bf5c:	ldrsb	r3, [ip, #1]
   1bf60:	cmp	r3, #43	; 0x2b
   1bf64:	orreq	r1, r1, r7
   1bf68:	orrne	r1, r1, r5
   1bf6c:	b	1bf00 <__assert_fail@plt+0x9280>
   1bf70:	mov	r0, #0
   1bf74:	pop	{r4, r5, r6, r7, r8, pc}
   1bf78:	mov	r1, r4
   1bf7c:	b	1bf30 <__assert_fail@plt+0x92b0>
   1bf80:	mov	r1, r3
   1bf84:	b	1bf30 <__assert_fail@plt+0x92b0>
   1bf88:	andeq	r0, r0, r1, lsl #8
   1bf8c:	andeq	r0, r0, r2, lsl #8
   1bf90:	andeq	r0, r0, r1, lsl #4
   1bf94:	andeq	r0, r0, r2, lsl #4
   1bf98:	mov	ip, r2
   1bf9c:	push	{r4, r5, r6, lr}
   1bfa0:	mov	r2, r3
   1bfa4:	mov	r5, r1
   1bfa8:	mov	r1, ip
   1bfac:	mov	r4, r0
   1bfb0:	bl	1afbc <__assert_fail@plt+0x833c>
   1bfb4:	subs	r2, r0, #0
   1bfb8:	popeq	{r4, r5, r6, pc}
   1bfbc:	mov	r1, r5
   1bfc0:	mov	r0, r4
   1bfc4:	pop	{r4, r5, r6, lr}
   1bfc8:	b	1beb4 <__assert_fail@plt+0x9234>
   1bfcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfd0:	add	fp, sp, #32
   1bfd4:	ldr	lr, [pc, #300]	; 1c108 <__assert_fail@plt+0x9488>
   1bfd8:	ldr	ip, [pc, #300]	; 1c10c <__assert_fail@plt+0x948c>
   1bfdc:	add	lr, pc, lr
   1bfe0:	sub	sp, sp, #20
   1bfe4:	ldr	ip, [lr, ip]
   1bfe8:	rsb	r6, r2, r2, lsl #3
   1bfec:	mov	r7, r1
   1bff0:	mov	r4, r2
   1bff4:	mov	r1, lr
   1bff8:	add	r2, r6, #7
   1bffc:	ldr	r1, [pc, #268]	; 1c110 <__assert_fail@plt+0x9490>
   1c000:	str	ip, [fp, #-48]	; 0xffffffd0
   1c004:	bic	r2, r2, #7
   1c008:	ldr	ip, [ip]
   1c00c:	mov	r8, #0
   1c010:	sub	sp, sp, r2
   1c014:	mov	r9, r3
   1c018:	str	r8, [r7]
   1c01c:	ldrd	r2, [fp, #4]
   1c020:	add	r1, pc, r1
   1c024:	str	ip, [fp, #-40]	; 0xffffffd8
   1c028:	bl	1bf98 <__assert_fail@plt+0x9318>
   1c02c:	subs	r5, r0, #0
   1c030:	beq	1c0ec <__assert_fail@plt+0x946c>
   1c034:	mov	r1, r6
   1c038:	mov	r2, r5
   1c03c:	mov	r0, sp
   1c040:	bl	125f0 <fgets@plt>
   1c044:	cmp	r0, #0
   1c048:	beq	1c0ec <__assert_fail@plt+0x946c>
   1c04c:	mov	r0, r5
   1c050:	bl	12adc <fclose@plt>
   1c054:	mov	r0, sp
   1c058:	bl	12938 <strlen@plt>
   1c05c:	mov	r2, #0
   1c060:	sub	r1, fp, #44	; 0x2c
   1c064:	mov	sl, sp
   1c068:	sub	r0, r0, #1
   1c06c:	ldrsb	r3, [sp, r0]
   1c070:	cmp	r3, #10
   1c074:	strbeq	r8, [sp, r0]
   1c078:	mov	r0, r4
   1c07c:	bl	1fc4c <__assert_fail@plt+0xcfcc>
   1c080:	cmp	r0, #0
   1c084:	str	r0, [r7]
   1c088:	beq	1c0fc <__assert_fail@plt+0x947c>
   1c08c:	cmp	r9, #0
   1c090:	mov	r1, r0
   1c094:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1c098:	mov	r0, sl
   1c09c:	bne	1c0cc <__assert_fail@plt+0x944c>
   1c0a0:	bl	2007c <__assert_fail@plt+0xd3fc>
   1c0a4:	cmp	r0, #0
   1c0a8:	bne	1c0dc <__assert_fail@plt+0x945c>
   1c0ac:	mov	r0, #0
   1c0b0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1c0b4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1c0b8:	ldr	r3, [r3]
   1c0bc:	cmp	r2, r3
   1c0c0:	bne	1c104 <__assert_fail@plt+0x9484>
   1c0c4:	sub	sp, fp, #32
   1c0c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0cc:	mov	r3, #0
   1c0d0:	bl	201d4 <__assert_fail@plt+0xd554>
   1c0d4:	cmp	r0, #0
   1c0d8:	beq	1c0ac <__assert_fail@plt+0x942c>
   1c0dc:	ldr	r0, [r7]
   1c0e0:	bl	1fc90 <__assert_fail@plt+0xd010>
   1c0e4:	mvn	r0, #21
   1c0e8:	b	1c0b0 <__assert_fail@plt+0x9430>
   1c0ec:	bl	129a4 <__errno_location@plt>
   1c0f0:	ldr	r0, [r0]
   1c0f4:	rsb	r0, r0, #0
   1c0f8:	b	1c0b0 <__assert_fail@plt+0x9430>
   1c0fc:	mvn	r0, #11
   1c100:	b	1c0b0 <__assert_fail@plt+0x9430>
   1c104:	bl	126e0 <__stack_chk_fail@plt>
   1c108:	andeq	r7, r1, r8, ror #26
   1c10c:	andeq	r0, r0, r8, lsr #5
   1c110:	andeq	r5, r0, r8, asr #13
   1c114:	push	{r2, r3}
   1c118:	ldr	r2, [pc, #80]	; 1c170 <__assert_fail@plt+0x94f0>
   1c11c:	ldr	ip, [pc, #80]	; 1c174 <__assert_fail@plt+0x94f4>
   1c120:	add	r2, pc, r2
   1c124:	push	{r4, lr}
   1c128:	sub	sp, sp, #8
   1c12c:	ldr	r4, [r2, ip]
   1c130:	add	lr, sp, #20
   1c134:	mov	r3, lr
   1c138:	ldr	ip, [r4]
   1c13c:	ldr	r2, [sp, #16]
   1c140:	str	lr, [sp]
   1c144:	str	ip, [sp, #4]
   1c148:	bl	1bf98 <__assert_fail@plt+0x9318>
   1c14c:	ldr	r2, [sp, #4]
   1c150:	ldr	r3, [r4]
   1c154:	cmp	r2, r3
   1c158:	bne	1c16c <__assert_fail@plt+0x94ec>
   1c15c:	add	sp, sp, #8
   1c160:	pop	{r4, lr}
   1c164:	add	sp, sp, #8
   1c168:	bx	lr
   1c16c:	bl	126e0 <__stack_chk_fail@plt>
   1c170:	andeq	r7, r1, r4, lsr #24
   1c174:	andeq	r0, r0, r8, lsr #5
   1c178:	ldr	r3, [pc, #268]	; 1c28c <__assert_fail@plt+0x960c>
   1c17c:	push	{r4, r5, r6, lr}
   1c180:	subs	r5, r1, #0
   1c184:	sub	sp, sp, #8
   1c188:	add	r3, pc, r3
   1c18c:	beq	1c1cc <__assert_fail@plt+0x954c>
   1c190:	mov	r2, r5
   1c194:	mov	r1, #524288	; 0x80000
   1c198:	bl	1bb94 <__assert_fail@plt+0x8f14>
   1c19c:	mov	r4, r0
   1c1a0:	cmp	r4, #0
   1c1a4:	blt	1c20c <__assert_fail@plt+0x958c>
   1c1a8:	mov	r0, r4
   1c1ac:	bl	12b90 <fdopendir@plt>
   1c1b0:	subs	r6, r0, #0
   1c1b4:	beq	1c280 <__assert_fail@plt+0x9600>
   1c1b8:	cmp	r5, #0
   1c1bc:	beq	1c270 <__assert_fail@plt+0x95f0>
   1c1c0:	mov	r0, r6
   1c1c4:	add	sp, sp, #8
   1c1c8:	pop	{r4, r5, r6, pc}
   1c1cc:	ldr	r2, [r0, #4]
   1c1d0:	mov	r4, r0
   1c1d4:	cmp	r2, #0
   1c1d8:	beq	1c20c <__assert_fail@plt+0x958c>
   1c1dc:	ldr	r2, [pc, #172]	; 1c290 <__assert_fail@plt+0x9610>
   1c1e0:	add	r2, pc, r2
   1c1e4:	ldr	r2, [r2]
   1c1e8:	tst	r2, #4
   1c1ec:	bne	1c21c <__assert_fail@plt+0x959c>
   1c1f0:	mov	r0, r4
   1c1f4:	bl	1b6e8 <__assert_fail@plt+0x8a68>
   1c1f8:	mov	r1, #3
   1c1fc:	bl	1fa8c <__assert_fail@plt+0xce0c>
   1c200:	mov	r4, r0
   1c204:	cmp	r4, #0
   1c208:	bge	1c1a8 <__assert_fail@plt+0x9528>
   1c20c:	mov	r6, #0
   1c210:	mov	r0, r6
   1c214:	add	sp, sp, #8
   1c218:	pop	{r4, r5, r6, pc}
   1c21c:	ldr	r2, [pc, #112]	; 1c294 <__assert_fail@plt+0x9614>
   1c220:	ldr	r3, [r3, r2]
   1c224:	ldr	r6, [r3]
   1c228:	bl	128fc <getpid@plt>
   1c22c:	ldr	r2, [pc, #100]	; 1c298 <__assert_fail@plt+0x9618>
   1c230:	ldr	r3, [pc, #100]	; 1c29c <__assert_fail@plt+0x961c>
   1c234:	add	r2, pc, r2
   1c238:	str	r2, [sp, #4]
   1c23c:	ldr	r2, [pc, #92]	; 1c2a0 <__assert_fail@plt+0x9620>
   1c240:	add	r3, pc, r3
   1c244:	str	r3, [sp]
   1c248:	add	r2, pc, r2
   1c24c:	mov	r1, #1
   1c250:	mov	r3, r0
   1c254:	mov	r0, r6
   1c258:	bl	12ab8 <__fprintf_chk@plt>
   1c25c:	ldr	r1, [pc, #64]	; 1c2a4 <__assert_fail@plt+0x9624>
   1c260:	mov	r0, r4
   1c264:	add	r1, pc, r1
   1c268:	bl	1adc8 <__assert_fail@plt+0x8148>
   1c26c:	b	1c1f0 <__assert_fail@plt+0x9570>
   1c270:	bl	12530 <rewinddir@plt>
   1c274:	mov	r0, r6
   1c278:	add	sp, sp, #8
   1c27c:	pop	{r4, r5, r6, pc}
   1c280:	mov	r0, r4
   1c284:	bl	12c44 <close@plt>
   1c288:	b	1c1c0 <__assert_fail@plt+0x9540>
   1c28c:			; <UNDEFINED> instruction: 0x00017bbc
   1c290:	andeq	r8, r1, ip, lsl #16
   1c294:	andeq	r0, r0, ip, lsr #5
   1c298:	andeq	r5, r0, r8, lsr #5
   1c29c:	andeq	r6, r0, r0, ror #25
   1c2a0:	andeq	r5, r0, r4, lsl #5
   1c2a4:	muleq	r0, r8, sp
   1c2a8:	push	{r4, lr}
   1c2ac:	mov	r4, r0
   1c2b0:	bl	1afbc <__assert_fail@plt+0x833c>
   1c2b4:	subs	r1, r0, #0
   1c2b8:	popeq	{r4, pc}
   1c2bc:	mov	r0, r4
   1c2c0:	pop	{r4, lr}
   1c2c4:	b	1c178 <__assert_fail@plt+0x94f8>
   1c2c8:	push	{r1, r2, r3}
   1c2cc:	ldr	r3, [pc, #80]	; 1c324 <__assert_fail@plt+0x96a4>
   1c2d0:	ldr	r1, [pc, #80]	; 1c328 <__assert_fail@plt+0x96a8>
   1c2d4:	add	r3, pc, r3
   1c2d8:	push	{r4, lr}
   1c2dc:	sub	sp, sp, #12
   1c2e0:	ldr	r4, [r3, r1]
   1c2e4:	add	ip, sp, #24
   1c2e8:	mov	r2, ip
   1c2ec:	ldr	r3, [r4]
   1c2f0:	ldr	r1, [sp, #20]
   1c2f4:	str	r3, [sp, #4]
   1c2f8:	str	ip, [sp]
   1c2fc:	bl	1c2a8 <__assert_fail@plt+0x9628>
   1c300:	ldr	r2, [sp, #4]
   1c304:	ldr	r3, [r4]
   1c308:	cmp	r2, r3
   1c30c:	bne	1c320 <__assert_fail@plt+0x96a0>
   1c310:	add	sp, sp, #12
   1c314:	pop	{r4, lr}
   1c318:	add	sp, sp, #12
   1c31c:	bx	lr
   1c320:	bl	126e0 <__stack_chk_fail@plt>
   1c324:	andeq	r7, r1, r0, ror sl
   1c328:	andeq	r0, r0, r8, lsr #5
   1c32c:	push	{r4, r5, r6, lr}
   1c330:	subs	r6, r3, #0
   1c334:	mov	r4, r1
   1c338:	mov	r5, r2
   1c33c:	beq	1c360 <__assert_fail@plt+0x96e0>
   1c340:	bl	1b6e8 <__assert_fail@plt+0x8a68>
   1c344:	subs	r3, r0, #0
   1c348:	blt	1c388 <__assert_fail@plt+0x9708>
   1c34c:	mov	r3, r5
   1c350:	mov	r2, r4
   1c354:	mov	r1, r6
   1c358:	pop	{r4, r5, r6, lr}
   1c35c:	b	1286c <readlinkat@plt>
   1c360:	bl	1af14 <__assert_fail@plt+0x8294>
   1c364:	cmp	r0, #0
   1c368:	beq	1c37c <__assert_fail@plt+0x96fc>
   1c36c:	mov	r2, r5
   1c370:	mov	r1, r4
   1c374:	pop	{r4, r5, r6, lr}
   1c378:	b	12764 <readlink@plt>
   1c37c:	bl	129a4 <__errno_location@plt>
   1c380:	ldr	r3, [r0]
   1c384:	rsb	r3, r3, #0
   1c388:	mov	r0, r3
   1c38c:	pop	{r4, r5, r6, pc}
   1c390:	push	{r3}		; (str r3, [sp, #-4]!)
   1c394:	ldr	r3, [pc, #132]	; 1c420 <__assert_fail@plt+0x97a0>
   1c398:	ldr	ip, [pc, #132]	; 1c424 <__assert_fail@plt+0x97a4>
   1c39c:	add	r3, pc, r3
   1c3a0:	push	{r4, r5, r6, r7, lr}
   1c3a4:	sub	sp, sp, #8
   1c3a8:	ldr	r4, [r3, ip]
   1c3ac:	add	lr, sp, #32
   1c3b0:	mov	r5, r1
   1c3b4:	ldr	ip, [r4]
   1c3b8:	mov	r7, r2
   1c3bc:	ldr	r1, [sp, #28]
   1c3c0:	mov	r2, lr
   1c3c4:	str	ip, [sp, #4]
   1c3c8:	str	lr, [sp]
   1c3cc:	mov	r6, r0
   1c3d0:	bl	1afbc <__assert_fail@plt+0x833c>
   1c3d4:	subs	r3, r0, #0
   1c3d8:	beq	1c40c <__assert_fail@plt+0x978c>
   1c3dc:	mov	r2, r7
   1c3e0:	mov	r1, r5
   1c3e4:	mov	r0, r6
   1c3e8:	bl	1c32c <__assert_fail@plt+0x96ac>
   1c3ec:	ldr	r2, [sp, #4]
   1c3f0:	ldr	r3, [r4]
   1c3f4:	cmp	r2, r3
   1c3f8:	bne	1c41c <__assert_fail@plt+0x979c>
   1c3fc:	add	sp, sp, #8
   1c400:	pop	{r4, r5, r6, r7, lr}
   1c404:	add	sp, sp, #4
   1c408:	bx	lr
   1c40c:	bl	129a4 <__errno_location@plt>
   1c410:	ldr	r0, [r0]
   1c414:	rsb	r0, r0, #0
   1c418:	b	1c3ec <__assert_fail@plt+0x976c>
   1c41c:	bl	126e0 <__stack_chk_fail@plt>
   1c420:	andeq	r7, r1, r8, lsr #19
   1c424:	andeq	r0, r0, r8, lsr #5
   1c428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c42c:	mov	r9, r3
   1c430:	ldr	r4, [pc, #400]	; 1c5c8 <__assert_fail@plt+0x9948>
   1c434:	ldr	ip, [pc, #400]	; 1c5cc <__assert_fail@plt+0x994c>
   1c438:	add	r4, pc, r4
   1c43c:	sub	sp, sp, #36	; 0x24
   1c440:	ldr	r3, [r4, ip]
   1c444:	mov	r6, r1
   1c448:	str	r3, [sp, #12]
   1c44c:	ldr	r3, [r3]
   1c450:	mov	r1, #524288	; 0x80000
   1c454:	mov	r5, r2
   1c458:	mov	r2, r9
   1c45c:	str	r3, [sp, #28]
   1c460:	bl	1bb94 <__assert_fail@plt+0x8f14>
   1c464:	mov	r7, r0
   1c468:	bl	129a4 <__errno_location@plt>
   1c46c:	cmp	r7, #0
   1c470:	mov	r8, r0
   1c474:	blt	1c5a4 <__assert_fail@plt+0x9924>
   1c478:	ldr	r3, [pc, #336]	; 1c5d0 <__assert_fail@plt+0x9950>
   1c47c:	add	r3, pc, r3
   1c480:	ldr	r3, [r3]
   1c484:	tst	r3, #4
   1c488:	bne	1c530 <__assert_fail@plt+0x98b0>
   1c48c:	mov	r2, r5
   1c490:	mov	r1, #0
   1c494:	mov	r0, r6
   1c498:	bl	12a04 <memset@plt>
   1c49c:	cmp	r5, #0
   1c4a0:	movne	r4, #0
   1c4a4:	movne	fp, r4
   1c4a8:	addne	r9, sp, #20
   1c4ac:	beq	1c5b8 <__assert_fail@plt+0x9938>
   1c4b0:	mov	r2, r5
   1c4b4:	mov	r1, r6
   1c4b8:	mov	r0, r7
   1c4bc:	bl	12584 <read@plt>
   1c4c0:	cmp	r0, #0
   1c4c4:	ble	1c4e0 <__assert_fail@plt+0x9860>
   1c4c8:	subs	r5, r5, r0
   1c4cc:	add	r6, r6, r0
   1c4d0:	add	r4, r4, r0
   1c4d4:	beq	1c5b0 <__assert_fail@plt+0x9930>
   1c4d8:	mov	fp, #0
   1c4dc:	b	1c4b0 <__assert_fail@plt+0x9830>
   1c4e0:	ldr	sl, [r8]
   1c4e4:	beq	1c4fc <__assert_fail@plt+0x987c>
   1c4e8:	cmp	sl, #4
   1c4ec:	cmpne	sl, #11
   1c4f0:	bne	1c4fc <__assert_fail@plt+0x987c>
   1c4f4:	cmp	fp, #4
   1c4f8:	ble	1c584 <__assert_fail@plt+0x9904>
   1c4fc:	cmp	r4, #0
   1c500:	mvneq	r4, #0
   1c504:	mov	r0, r7
   1c508:	bl	12c44 <close@plt>
   1c50c:	str	sl, [r8]
   1c510:	ldr	r3, [sp, #12]
   1c514:	ldr	r2, [sp, #28]
   1c518:	mov	r0, r4
   1c51c:	ldr	r3, [r3]
   1c520:	cmp	r2, r3
   1c524:	bne	1c5c4 <__assert_fail@plt+0x9944>
   1c528:	add	sp, sp, #36	; 0x24
   1c52c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c530:	ldr	r3, [pc, #156]	; 1c5d4 <__assert_fail@plt+0x9954>
   1c534:	ldr	r3, [r4, r3]
   1c538:	ldr	r4, [r3]
   1c53c:	bl	128fc <getpid@plt>
   1c540:	ldr	r2, [pc, #144]	; 1c5d8 <__assert_fail@plt+0x9958>
   1c544:	ldr	r3, [pc, #144]	; 1c5dc <__assert_fail@plt+0x995c>
   1c548:	add	r2, pc, r2
   1c54c:	str	r2, [sp, #4]
   1c550:	ldr	r2, [pc, #136]	; 1c5e0 <__assert_fail@plt+0x9960>
   1c554:	add	r3, pc, r3
   1c558:	str	r3, [sp]
   1c55c:	add	r2, pc, r2
   1c560:	mov	r1, #1
   1c564:	mov	r3, r0
   1c568:	mov	r0, r4
   1c56c:	bl	12ab8 <__fprintf_chk@plt>
   1c570:	ldr	r0, [pc, #108]	; 1c5e4 <__assert_fail@plt+0x9964>
   1c574:	mov	r1, r9
   1c578:	add	r0, pc, r0
   1c57c:	bl	1ae94 <__assert_fail@plt+0x8214>
   1c580:	b	1c48c <__assert_fail@plt+0x980c>
   1c584:	ldr	r3, [pc, #92]	; 1c5e8 <__assert_fail@plt+0x9968>
   1c588:	mov	r1, #0
   1c58c:	mov	r0, r9
   1c590:	add	fp, fp, #1
   1c594:	str	r1, [sp, #20]
   1c598:	str	r3, [sp, #24]
   1c59c:	bl	12608 <nanosleep@plt>
   1c5a0:	b	1c4b0 <__assert_fail@plt+0x9830>
   1c5a4:	ldr	r4, [r0]
   1c5a8:	rsb	r4, r4, #0
   1c5ac:	b	1c510 <__assert_fail@plt+0x9890>
   1c5b0:	ldr	sl, [r8]
   1c5b4:	b	1c504 <__assert_fail@plt+0x9884>
   1c5b8:	ldr	sl, [r8]
   1c5bc:	mov	r4, r5
   1c5c0:	b	1c504 <__assert_fail@plt+0x9884>
   1c5c4:	bl	126e0 <__stack_chk_fail@plt>
   1c5c8:	andeq	r7, r1, ip, lsl #18
   1c5cc:	andeq	r0, r0, r8, lsr #5
   1c5d0:	andeq	r8, r1, r0, ror r5
   1c5d4:	andeq	r0, r0, ip, lsr #5
   1c5d8:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   1c5dc:	andeq	r6, r0, ip, asr #19
   1c5e0:	andeq	r4, r0, r0, ror pc
   1c5e4:	muleq	r0, r8, sl
   1c5e8:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1c5ec:	push	{r4, r5, r6, lr}
   1c5f0:	mov	r5, r1
   1c5f4:	mov	r6, r2
   1c5f8:	mov	r1, r3
   1c5fc:	ldr	r2, [sp, #16]
   1c600:	mov	r4, r0
   1c604:	bl	1afbc <__assert_fail@plt+0x833c>
   1c608:	subs	r3, r0, #0
   1c60c:	beq	1c624 <__assert_fail@plt+0x99a4>
   1c610:	mov	r2, r6
   1c614:	mov	r1, r5
   1c618:	mov	r0, r4
   1c61c:	pop	{r4, r5, r6, lr}
   1c620:	b	1c428 <__assert_fail@plt+0x97a8>
   1c624:	mvn	r0, #21
   1c628:	pop	{r4, r5, r6, pc}
   1c62c:	push	{r3}		; (str r3, [sp, #-4]!)
   1c630:	ldr	r3, [pc, #80]	; 1c688 <__assert_fail@plt+0x9a08>
   1c634:	ldr	ip, [pc, #80]	; 1c68c <__assert_fail@plt+0x9a0c>
   1c638:	add	r3, pc, r3
   1c63c:	push	{r4, lr}
   1c640:	sub	sp, sp, #20
   1c644:	ldr	r4, [r3, ip]
   1c648:	add	lr, sp, #32
   1c64c:	str	lr, [sp]
   1c650:	ldr	ip, [r4]
   1c654:	ldr	r3, [sp, #28]
   1c658:	str	lr, [sp, #8]
   1c65c:	str	ip, [sp, #12]
   1c660:	bl	1c5ec <__assert_fail@plt+0x996c>
   1c664:	ldr	r2, [sp, #12]
   1c668:	ldr	r3, [r4]
   1c66c:	cmp	r2, r3
   1c670:	bne	1c684 <__assert_fail@plt+0x9a04>
   1c674:	add	sp, sp, #20
   1c678:	pop	{r4, lr}
   1c67c:	add	sp, sp, #4
   1c680:	bx	lr
   1c684:	bl	126e0 <__stack_chk_fail@plt>
   1c688:	andeq	r7, r1, ip, lsl #14
   1c68c:	andeq	r0, r0, r8, lsr #5
   1c690:	ldr	ip, [pc, #176]	; 1c748 <__assert_fail@plt+0x9ac8>
   1c694:	ldr	r3, [pc, #176]	; 1c74c <__assert_fail@plt+0x9acc>
   1c698:	add	ip, pc, ip
   1c69c:	push	{r4, r5, r6, r7, r8, lr}
   1c6a0:	sub	sp, sp, #8192	; 0x2000
   1c6a4:	ldr	r7, [ip, r3]
   1c6a8:	sub	sp, sp, #8
   1c6ac:	mov	r6, r1
   1c6b0:	add	r5, sp, #8
   1c6b4:	add	ip, sp, #8192	; 0x2000
   1c6b8:	ldr	lr, [r7]
   1c6bc:	mov	r1, #0
   1c6c0:	add	ip, ip, #4
   1c6c4:	sub	r8, r5, #4
   1c6c8:	mov	r3, r2
   1c6cc:	str	r1, [r6]
   1c6d0:	ldr	r2, [pc, #120]	; 1c750 <__assert_fail@plt+0x9ad0>
   1c6d4:	mov	r1, r8
   1c6d8:	str	lr, [ip]
   1c6dc:	bl	1c428 <__assert_fail@plt+0x97a8>
   1c6e0:	subs	r4, r0, #0
   1c6e4:	blt	1c71c <__assert_fail@plt+0x9a9c>
   1c6e8:	beq	1c6fc <__assert_fail@plt+0x9a7c>
   1c6ec:	sub	r3, r5, #5
   1c6f0:	ldrsb	r3, [r3, r4]
   1c6f4:	cmp	r3, #10
   1c6f8:	subeq	r4, r4, #1
   1c6fc:	add	r5, r5, r4
   1c700:	mov	r3, #0
   1c704:	mov	r0, r8
   1c708:	strb	r3, [r5, #-4]
   1c70c:	bl	126d4 <strdup@plt>
   1c710:	cmp	r0, #0
   1c714:	mvneq	r4, #11
   1c718:	str	r0, [r6]
   1c71c:	add	r3, sp, #8192	; 0x2000
   1c720:	add	r3, r3, #4
   1c724:	ldr	r2, [r3]
   1c728:	ldr	r3, [r7]
   1c72c:	mov	r0, r4
   1c730:	cmp	r2, r3
   1c734:	bne	1c744 <__assert_fail@plt+0x9ac4>
   1c738:	add	sp, sp, #8192	; 0x2000
   1c73c:	add	sp, sp, #8
   1c740:	pop	{r4, r5, r6, r7, r8, pc}
   1c744:	bl	126e0 <__stack_chk_fail@plt>
   1c748:	andeq	r7, r1, ip, lsr #13
   1c74c:	andeq	r0, r0, r8, lsr #5
   1c750:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   1c754:	push	{r2, r3}
   1c758:	ldr	r3, [pc, #116]	; 1c7d4 <__assert_fail@plt+0x9b54>
   1c75c:	ldr	r2, [pc, #116]	; 1c7d8 <__assert_fail@plt+0x9b58>
   1c760:	add	r3, pc, r3
   1c764:	push	{r4, r5, r6, lr}
   1c768:	sub	sp, sp, #8
   1c76c:	ldr	r4, [r3, r2]
   1c770:	add	ip, sp, #28
   1c774:	mov	r2, ip
   1c778:	ldr	r3, [r4]
   1c77c:	mov	r5, r1
   1c780:	ldr	r1, [sp, #24]
   1c784:	str	ip, [sp]
   1c788:	str	r3, [sp, #4]
   1c78c:	mov	r6, r0
   1c790:	bl	1afbc <__assert_fail@plt+0x833c>
   1c794:	subs	r2, r0, #0
   1c798:	beq	1c7c8 <__assert_fail@plt+0x9b48>
   1c79c:	mov	r1, r5
   1c7a0:	mov	r0, r6
   1c7a4:	bl	1c690 <__assert_fail@plt+0x9a10>
   1c7a8:	ldr	r2, [sp, #4]
   1c7ac:	ldr	r3, [r4]
   1c7b0:	cmp	r2, r3
   1c7b4:	bne	1c7d0 <__assert_fail@plt+0x9b50>
   1c7b8:	add	sp, sp, #8
   1c7bc:	pop	{r4, r5, r6, lr}
   1c7c0:	add	sp, sp, #8
   1c7c4:	bx	lr
   1c7c8:	mvn	r0, #21
   1c7cc:	b	1c7a8 <__assert_fail@plt+0x9b28>
   1c7d0:	bl	126e0 <__stack_chk_fail@plt>
   1c7d4:	andeq	r7, r1, r4, ror #11
   1c7d8:	andeq	r0, r0, r8, lsr #5
   1c7dc:	push	{r4, lr}
   1c7e0:	sub	r2, r2, #1
   1c7e4:	mov	r4, r1
   1c7e8:	bl	1c428 <__assert_fail@plt+0x97a8>
   1c7ec:	cmp	r0, #0
   1c7f0:	poplt	{r4, pc}
   1c7f4:	beq	1c810 <__assert_fail@plt+0x9b90>
   1c7f8:	add	r3, r4, r0
   1c7fc:	ldrsb	r2, [r3, #-1]
   1c800:	cmp	r2, #10
   1c804:	subeq	r0, r0, #1
   1c808:	movne	r4, r3
   1c80c:	addeq	r4, r4, r0
   1c810:	mov	r3, #0
   1c814:	strb	r3, [r4]
   1c818:	pop	{r4, pc}
   1c81c:	push	{r3}		; (str r3, [sp, #-4]!)
   1c820:	ldr	r3, [pc, #124]	; 1c8a4 <__assert_fail@plt+0x9c24>
   1c824:	ldr	ip, [pc, #124]	; 1c8a8 <__assert_fail@plt+0x9c28>
   1c828:	add	r3, pc, r3
   1c82c:	push	{r4, r5, r6, r7, lr}
   1c830:	sub	sp, sp, #8
   1c834:	ldr	r4, [r3, ip]
   1c838:	add	lr, sp, #32
   1c83c:	mov	r5, r1
   1c840:	ldr	ip, [r4]
   1c844:	mov	r7, r2
   1c848:	ldr	r1, [sp, #28]
   1c84c:	mov	r2, lr
   1c850:	str	ip, [sp, #4]
   1c854:	str	lr, [sp]
   1c858:	mov	r6, r0
   1c85c:	bl	1afbc <__assert_fail@plt+0x833c>
   1c860:	subs	r3, r0, #0
   1c864:	beq	1c898 <__assert_fail@plt+0x9c18>
   1c868:	mov	r2, r7
   1c86c:	mov	r1, r5
   1c870:	mov	r0, r6
   1c874:	bl	1c7dc <__assert_fail@plt+0x9b5c>
   1c878:	ldr	r2, [sp, #4]
   1c87c:	ldr	r3, [r4]
   1c880:	cmp	r2, r3
   1c884:	bne	1c8a0 <__assert_fail@plt+0x9c20>
   1c888:	add	sp, sp, #8
   1c88c:	pop	{r4, r5, r6, r7, lr}
   1c890:	add	sp, sp, #4
   1c894:	bx	lr
   1c898:	mvn	r0, #21
   1c89c:	b	1c878 <__assert_fail@plt+0x9bf8>
   1c8a0:	bl	126e0 <__stack_chk_fail@plt>
   1c8a4:	andeq	r7, r1, ip, lsl r5
   1c8a8:	andeq	r0, r0, r8, lsr #5
   1c8ac:	push	{r2, r3}
   1c8b0:	mov	r2, r1
   1c8b4:	push	{r4, r5, r6, r7, r8, lr}
   1c8b8:	mov	r7, r1
   1c8bc:	ldr	r4, [pc, #236]	; 1c9b0 <__assert_fail@plt+0x9d30>
   1c8c0:	ldr	r3, [pc, #236]	; 1c9b4 <__assert_fail@plt+0x9d34>
   1c8c4:	add	r4, pc, r4
   1c8c8:	ldr	r1, [pc, #232]	; 1c9b8 <__assert_fail@plt+0x9d38>
   1c8cc:	ldr	r5, [r4, r3]
   1c8d0:	sub	sp, sp, #16
   1c8d4:	add	r1, pc, r1
   1c8d8:	ldr	r3, [r5]
   1c8dc:	ldr	r8, [sp, #40]	; 0x28
   1c8e0:	str	r3, [sp, #12]
   1c8e4:	bl	1beb4 <__assert_fail@plt+0x9234>
   1c8e8:	subs	r6, r0, #0
   1c8ec:	beq	1c9a4 <__assert_fail@plt+0x9d24>
   1c8f0:	ldr	r3, [pc, #196]	; 1c9bc <__assert_fail@plt+0x9d3c>
   1c8f4:	add	r3, pc, r3
   1c8f8:	ldr	r3, [r3]
   1c8fc:	tst	r3, #4
   1c900:	bne	1c94c <__assert_fail@plt+0x9ccc>
   1c904:	add	r3, sp, #44	; 0x2c
   1c908:	mov	r1, r8
   1c90c:	mov	r2, r3
   1c910:	mov	r0, r6
   1c914:	str	r3, [sp, #8]
   1c918:	bl	12740 <vfscanf@plt>
   1c91c:	mov	r4, r0
   1c920:	mov	r0, r6
   1c924:	bl	12adc <fclose@plt>
   1c928:	ldr	r2, [sp, #12]
   1c92c:	ldr	r3, [r5]
   1c930:	mov	r0, r4
   1c934:	cmp	r2, r3
   1c938:	bne	1c9ac <__assert_fail@plt+0x9d2c>
   1c93c:	add	sp, sp, #16
   1c940:	pop	{r4, r5, r6, r7, r8, lr}
   1c944:	add	sp, sp, #8
   1c948:	bx	lr
   1c94c:	ldr	r3, [pc, #108]	; 1c9c0 <__assert_fail@plt+0x9d40>
   1c950:	ldr	r3, [r4, r3]
   1c954:	ldr	r4, [r3]
   1c958:	bl	128fc <getpid@plt>
   1c95c:	ldr	r2, [pc, #96]	; 1c9c4 <__assert_fail@plt+0x9d44>
   1c960:	ldr	r3, [pc, #96]	; 1c9c8 <__assert_fail@plt+0x9d48>
   1c964:	add	r2, pc, r2
   1c968:	str	r2, [sp, #4]
   1c96c:	ldr	r2, [pc, #88]	; 1c9cc <__assert_fail@plt+0x9d4c>
   1c970:	add	r3, pc, r3
   1c974:	str	r3, [sp]
   1c978:	add	r2, pc, r2
   1c97c:	mov	r1, #1
   1c980:	mov	r3, r0
   1c984:	mov	r0, r4
   1c988:	bl	12ab8 <__fprintf_chk@plt>
   1c98c:	ldr	r0, [pc, #60]	; 1c9d0 <__assert_fail@plt+0x9d50>
   1c990:	mov	r2, r7
   1c994:	mov	r1, r8
   1c998:	add	r0, pc, r0
   1c99c:	bl	1ae94 <__assert_fail@plt+0x8214>
   1c9a0:	b	1c904 <__assert_fail@plt+0x9c84>
   1c9a4:	mvn	r4, #21
   1c9a8:	b	1c928 <__assert_fail@plt+0x9ca8>
   1c9ac:	bl	126e0 <__stack_chk_fail@plt>
   1c9b0:	andeq	r7, r1, r0, lsl #9
   1c9b4:	andeq	r0, r0, r8, lsr #5
   1c9b8:	andeq	r4, r0, r4, lsl lr
   1c9bc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1c9c0:	andeq	r0, r0, ip, lsr #5
   1c9c4:	andeq	r4, r0, r8, ror fp
   1c9c8:			; <UNDEFINED> instruction: 0x000065b0
   1c9cc:	andeq	r4, r0, r4, asr fp
   1c9d0:	andeq	r6, r0, r8, lsl #13
   1c9d4:	ldr	ip, [pc, #140]	; 1ca68 <__assert_fail@plt+0x9de8>
   1c9d8:	push	{r3}		; (str r3, [sp, #-4]!)
   1c9dc:	add	ip, pc, ip
   1c9e0:	push	{r4, r5, r6, lr}
   1c9e4:	mov	r3, r2
   1c9e8:	ldr	lr, [pc, #124]	; 1ca6c <__assert_fail@plt+0x9dec>
   1c9ec:	mov	r2, r1
   1c9f0:	ldr	r1, [pc, #120]	; 1ca70 <__assert_fail@plt+0x9df0>
   1c9f4:	ldr	r4, [ip, lr]
   1c9f8:	sub	sp, sp, #12
   1c9fc:	add	r1, pc, r1
   1ca00:	ldr	ip, [r4]
   1ca04:	ldr	r5, [sp, #28]
   1ca08:	str	ip, [sp, #4]
   1ca0c:	bl	1bf98 <__assert_fail@plt+0x9318>
   1ca10:	subs	r6, r0, #0
   1ca14:	beq	1ca5c <__assert_fail@plt+0x9ddc>
   1ca18:	add	r3, sp, #32
   1ca1c:	mov	r1, r5
   1ca20:	mov	r2, r3
   1ca24:	str	r3, [sp]
   1ca28:	bl	12740 <vfscanf@plt>
   1ca2c:	mov	r5, r0
   1ca30:	mov	r0, r6
   1ca34:	bl	12adc <fclose@plt>
   1ca38:	ldr	r2, [sp, #4]
   1ca3c:	ldr	r3, [r4]
   1ca40:	mov	r0, r5
   1ca44:	cmp	r2, r3
   1ca48:	bne	1ca64 <__assert_fail@plt+0x9de4>
   1ca4c:	add	sp, sp, #12
   1ca50:	pop	{r4, r5, r6, lr}
   1ca54:	add	sp, sp, #4
   1ca58:	bx	lr
   1ca5c:	mvn	r5, #21
   1ca60:	b	1ca38 <__assert_fail@plt+0x9db8>
   1ca64:	bl	126e0 <__stack_chk_fail@plt>
   1ca68:	andeq	r7, r1, r8, ror #6
   1ca6c:	andeq	r0, r0, r8, lsr #5
   1ca70:	andeq	r4, r0, ip, ror #25
   1ca74:	ldr	r3, [pc, #124]	; 1caf8 <__assert_fail@plt+0x9e78>
   1ca78:	ldr	ip, [pc, #124]	; 1cafc <__assert_fail@plt+0x9e7c>
   1ca7c:	add	r3, pc, r3
   1ca80:	push	{r4, r5, r6, r7, lr}
   1ca84:	mov	r5, r1
   1ca88:	ldr	r4, [r3, ip]
   1ca8c:	mov	r1, r2
   1ca90:	ldr	r2, [pc, #104]	; 1cb00 <__assert_fail@plt+0x9e80>
   1ca94:	sub	sp, sp, #20
   1ca98:	ldr	ip, [r4]
   1ca9c:	mov	r6, #0
   1caa0:	mov	r7, #0
   1caa4:	add	r2, pc, r2
   1caa8:	mov	r3, sp
   1caac:	strd	r6, [sp]
   1cab0:	str	ip, [sp, #12]
   1cab4:	bl	1c8ac <__assert_fail@plt+0x9c2c>
   1cab8:	cmp	r0, #1
   1cabc:	bne	1caec <__assert_fail@plt+0x9e6c>
   1cac0:	cmp	r5, #0
   1cac4:	moveq	r0, r5
   1cac8:	ldrdne	r2, [sp]
   1cacc:	movne	r0, #0
   1cad0:	strdne	r2, [r5]
   1cad4:	ldr	r2, [sp, #12]
   1cad8:	ldr	r3, [r4]
   1cadc:	cmp	r2, r3
   1cae0:	bne	1caf4 <__assert_fail@plt+0x9e74>
   1cae4:	add	sp, sp, #20
   1cae8:	pop	{r4, r5, r6, r7, pc}
   1caec:	mvn	r0, #0
   1caf0:	b	1cad4 <__assert_fail@plt+0x9e54>
   1caf4:	bl	126e0 <__stack_chk_fail@plt>
   1caf8:	andeq	r7, r1, r8, asr #5
   1cafc:	andeq	r0, r0, r8, lsr #5
   1cb00:	muleq	r0, r0, r5
   1cb04:	push	{r2, r3}
   1cb08:	ldr	r3, [pc, #116]	; 1cb84 <__assert_fail@plt+0x9f04>
   1cb0c:	ldr	r2, [pc, #116]	; 1cb88 <__assert_fail@plt+0x9f08>
   1cb10:	add	r3, pc, r3
   1cb14:	push	{r4, r5, r6, lr}
   1cb18:	sub	sp, sp, #8
   1cb1c:	ldr	r4, [r3, r2]
   1cb20:	add	ip, sp, #28
   1cb24:	mov	r2, ip
   1cb28:	ldr	r3, [r4]
   1cb2c:	mov	r5, r1
   1cb30:	ldr	r1, [sp, #24]
   1cb34:	str	ip, [sp]
   1cb38:	str	r3, [sp, #4]
   1cb3c:	mov	r6, r0
   1cb40:	bl	1afbc <__assert_fail@plt+0x833c>
   1cb44:	subs	r2, r0, #0
   1cb48:	beq	1cb78 <__assert_fail@plt+0x9ef8>
   1cb4c:	mov	r1, r5
   1cb50:	mov	r0, r6
   1cb54:	bl	1ca74 <__assert_fail@plt+0x9df4>
   1cb58:	ldr	r2, [sp, #4]
   1cb5c:	ldr	r3, [r4]
   1cb60:	cmp	r2, r3
   1cb64:	bne	1cb80 <__assert_fail@plt+0x9f00>
   1cb68:	add	sp, sp, #8
   1cb6c:	pop	{r4, r5, r6, lr}
   1cb70:	add	sp, sp, #8
   1cb74:	bx	lr
   1cb78:	mvn	r0, #21
   1cb7c:	b	1cb58 <__assert_fail@plt+0x9ed8>
   1cb80:	bl	126e0 <__stack_chk_fail@plt>
   1cb84:	andeq	r7, r1, r4, lsr r2
   1cb88:	andeq	r0, r0, r8, lsr #5
   1cb8c:	ldr	r3, [pc, #124]	; 1cc10 <__assert_fail@plt+0x9f90>
   1cb90:	ldr	ip, [pc, #124]	; 1cc14 <__assert_fail@plt+0x9f94>
   1cb94:	add	r3, pc, r3
   1cb98:	push	{r4, r5, r6, r7, lr}
   1cb9c:	mov	r5, r1
   1cba0:	ldr	r4, [r3, ip]
   1cba4:	mov	r1, r2
   1cba8:	ldr	r2, [pc, #104]	; 1cc18 <__assert_fail@plt+0x9f98>
   1cbac:	sub	sp, sp, #20
   1cbb0:	ldr	ip, [r4]
   1cbb4:	mov	r6, #0
   1cbb8:	mov	r7, #0
   1cbbc:	add	r2, pc, r2
   1cbc0:	mov	r3, sp
   1cbc4:	strd	r6, [sp]
   1cbc8:	str	ip, [sp, #12]
   1cbcc:	bl	1c8ac <__assert_fail@plt+0x9c2c>
   1cbd0:	cmp	r0, #1
   1cbd4:	bne	1cc04 <__assert_fail@plt+0x9f84>
   1cbd8:	cmp	r5, #0
   1cbdc:	moveq	r0, r5
   1cbe0:	ldrdne	r2, [sp]
   1cbe4:	movne	r0, #0
   1cbe8:	strdne	r2, [r5]
   1cbec:	ldr	r2, [sp, #12]
   1cbf0:	ldr	r3, [r4]
   1cbf4:	cmp	r2, r3
   1cbf8:	bne	1cc0c <__assert_fail@plt+0x9f8c>
   1cbfc:	add	sp, sp, #20
   1cc00:	pop	{r4, r5, r6, r7, pc}
   1cc04:	mvn	r0, #0
   1cc08:	b	1cbec <__assert_fail@plt+0x9f6c>
   1cc0c:	bl	126e0 <__stack_chk_fail@plt>
   1cc10:			; <UNDEFINED> instruction: 0x000171b0
   1cc14:	andeq	r0, r0, r8, lsr #5
   1cc18:	andeq	r4, r0, r0, asr #20
   1cc1c:	push	{r2, r3}
   1cc20:	ldr	r3, [pc, #116]	; 1cc9c <__assert_fail@plt+0xa01c>
   1cc24:	ldr	r2, [pc, #116]	; 1cca0 <__assert_fail@plt+0xa020>
   1cc28:	add	r3, pc, r3
   1cc2c:	push	{r4, r5, r6, lr}
   1cc30:	sub	sp, sp, #8
   1cc34:	ldr	r4, [r3, r2]
   1cc38:	add	ip, sp, #28
   1cc3c:	mov	r2, ip
   1cc40:	ldr	r3, [r4]
   1cc44:	mov	r5, r1
   1cc48:	ldr	r1, [sp, #24]
   1cc4c:	str	ip, [sp]
   1cc50:	str	r3, [sp, #4]
   1cc54:	mov	r6, r0
   1cc58:	bl	1afbc <__assert_fail@plt+0x833c>
   1cc5c:	subs	r2, r0, #0
   1cc60:	beq	1cc90 <__assert_fail@plt+0xa010>
   1cc64:	mov	r1, r5
   1cc68:	mov	r0, r6
   1cc6c:	bl	1cb8c <__assert_fail@plt+0x9f0c>
   1cc70:	ldr	r2, [sp, #4]
   1cc74:	ldr	r3, [r4]
   1cc78:	cmp	r2, r3
   1cc7c:	bne	1cc98 <__assert_fail@plt+0xa018>
   1cc80:	add	sp, sp, #8
   1cc84:	pop	{r4, r5, r6, lr}
   1cc88:	add	sp, sp, #8
   1cc8c:	bx	lr
   1cc90:	mvn	r0, #21
   1cc94:	b	1cc70 <__assert_fail@plt+0x9ff0>
   1cc98:	bl	126e0 <__stack_chk_fail@plt>
   1cc9c:	andeq	r7, r1, ip, lsl r1
   1cca0:	andeq	r0, r0, r8, lsr #5
   1cca4:	ldr	ip, [pc, #120]	; 1cd24 <__assert_fail@plt+0xa0a4>
   1cca8:	ldr	r3, [pc, #120]	; 1cd28 <__assert_fail@plt+0xa0a8>
   1ccac:	add	ip, pc, ip
   1ccb0:	push	{r4, r5, r6, lr}
   1ccb4:	mov	r6, r1
   1ccb8:	ldr	r5, [ip, r3]
   1ccbc:	mov	r1, r2
   1ccc0:	ldr	r2, [pc, #100]	; 1cd2c <__assert_fail@plt+0xa0ac>
   1ccc4:	sub	sp, sp, #8
   1ccc8:	ldr	lr, [r5]
   1cccc:	mov	r4, #0
   1ccd0:	mov	r3, sp
   1ccd4:	add	r2, pc, r2
   1ccd8:	str	lr, [sp, #4]
   1ccdc:	str	r4, [sp]
   1cce0:	bl	1c8ac <__assert_fail@plt+0x9c2c>
   1cce4:	cmp	r0, #1
   1cce8:	bne	1cd18 <__assert_fail@plt+0xa098>
   1ccec:	cmp	r6, r4
   1ccf0:	moveq	r0, r6
   1ccf4:	ldrne	r3, [sp]
   1ccf8:	movne	r0, r4
   1ccfc:	strne	r3, [r6]
   1cd00:	ldr	r2, [sp, #4]
   1cd04:	ldr	r3, [r5]
   1cd08:	cmp	r2, r3
   1cd0c:	bne	1cd20 <__assert_fail@plt+0xa0a0>
   1cd10:	add	sp, sp, #8
   1cd14:	pop	{r4, r5, r6, pc}
   1cd18:	mvn	r0, #0
   1cd1c:	b	1cd00 <__assert_fail@plt+0xa080>
   1cd20:	bl	126e0 <__stack_chk_fail@plt>
   1cd24:	muleq	r1, r8, r0
   1cd28:	andeq	r0, r0, r8, lsr #5
   1cd2c:	andeq	r4, r0, r8, ror #22
   1cd30:	push	{r2, r3}
   1cd34:	ldr	r3, [pc, #116]	; 1cdb0 <__assert_fail@plt+0xa130>
   1cd38:	ldr	r2, [pc, #116]	; 1cdb4 <__assert_fail@plt+0xa134>
   1cd3c:	add	r3, pc, r3
   1cd40:	push	{r4, r5, r6, lr}
   1cd44:	sub	sp, sp, #8
   1cd48:	ldr	r4, [r3, r2]
   1cd4c:	add	ip, sp, #28
   1cd50:	mov	r2, ip
   1cd54:	ldr	r3, [r4]
   1cd58:	mov	r5, r1
   1cd5c:	ldr	r1, [sp, #24]
   1cd60:	str	ip, [sp]
   1cd64:	str	r3, [sp, #4]
   1cd68:	mov	r6, r0
   1cd6c:	bl	1afbc <__assert_fail@plt+0x833c>
   1cd70:	subs	r2, r0, #0
   1cd74:	beq	1cda4 <__assert_fail@plt+0xa124>
   1cd78:	mov	r1, r5
   1cd7c:	mov	r0, r6
   1cd80:	bl	1cca4 <__assert_fail@plt+0xa024>
   1cd84:	ldr	r2, [sp, #4]
   1cd88:	ldr	r3, [r4]
   1cd8c:	cmp	r2, r3
   1cd90:	bne	1cdac <__assert_fail@plt+0xa12c>
   1cd94:	add	sp, sp, #8
   1cd98:	pop	{r4, r5, r6, lr}
   1cd9c:	add	sp, sp, #8
   1cda0:	bx	lr
   1cda4:	mvn	r0, #21
   1cda8:	b	1cd84 <__assert_fail@plt+0xa104>
   1cdac:	bl	126e0 <__stack_chk_fail@plt>
   1cdb0:	andeq	r7, r1, r8
   1cdb4:	andeq	r0, r0, r8, lsr #5
   1cdb8:	ldr	ip, [pc, #112]	; 1ce30 <__assert_fail@plt+0xa1b0>
   1cdbc:	ldr	r3, [pc, #112]	; 1ce34 <__assert_fail@plt+0xa1b4>
   1cdc0:	add	ip, pc, ip
   1cdc4:	push	{r4, r5, lr}
   1cdc8:	mov	r5, r1
   1cdcc:	ldr	r4, [ip, r3]
   1cdd0:	mov	r1, r2
   1cdd4:	ldr	r2, [pc, #92]	; 1ce38 <__assert_fail@plt+0xa1b8>
   1cdd8:	sub	sp, sp, #12
   1cddc:	ldr	lr, [r4]
   1cde0:	mov	r3, sp
   1cde4:	add	r2, pc, r2
   1cde8:	str	lr, [sp, #4]
   1cdec:	bl	1c8ac <__assert_fail@plt+0x9c2c>
   1cdf0:	cmp	r0, #1
   1cdf4:	bne	1ce24 <__assert_fail@plt+0xa1a4>
   1cdf8:	cmp	r5, #0
   1cdfc:	moveq	r0, r5
   1ce00:	ldrne	r3, [sp]
   1ce04:	movne	r0, #0
   1ce08:	strne	r3, [r5]
   1ce0c:	ldr	r2, [sp, #4]
   1ce10:	ldr	r3, [r4]
   1ce14:	cmp	r2, r3
   1ce18:	bne	1ce2c <__assert_fail@plt+0xa1ac>
   1ce1c:	add	sp, sp, #12
   1ce20:	pop	{r4, r5, pc}
   1ce24:	mvn	r0, #0
   1ce28:	b	1ce0c <__assert_fail@plt+0xa18c>
   1ce2c:	bl	126e0 <__stack_chk_fail@plt>
   1ce30:	andeq	r6, r1, r4, lsl #31
   1ce34:	andeq	r0, r0, r8, lsr #5
   1ce38:	andeq	r6, r0, r8, asr r2
   1ce3c:	push	{r2, r3}
   1ce40:	ldr	r3, [pc, #116]	; 1cebc <__assert_fail@plt+0xa23c>
   1ce44:	ldr	r2, [pc, #116]	; 1cec0 <__assert_fail@plt+0xa240>
   1ce48:	add	r3, pc, r3
   1ce4c:	push	{r4, r5, r6, lr}
   1ce50:	sub	sp, sp, #8
   1ce54:	ldr	r4, [r3, r2]
   1ce58:	add	ip, sp, #28
   1ce5c:	mov	r2, ip
   1ce60:	ldr	r3, [r4]
   1ce64:	mov	r5, r1
   1ce68:	ldr	r1, [sp, #24]
   1ce6c:	str	ip, [sp]
   1ce70:	str	r3, [sp, #4]
   1ce74:	mov	r6, r0
   1ce78:	bl	1afbc <__assert_fail@plt+0x833c>
   1ce7c:	subs	r2, r0, #0
   1ce80:	beq	1ceb0 <__assert_fail@plt+0xa230>
   1ce84:	mov	r1, r5
   1ce88:	mov	r0, r6
   1ce8c:	bl	1cdb8 <__assert_fail@plt+0xa138>
   1ce90:	ldr	r2, [sp, #4]
   1ce94:	ldr	r3, [r4]
   1ce98:	cmp	r2, r3
   1ce9c:	bne	1ceb8 <__assert_fail@plt+0xa238>
   1cea0:	add	sp, sp, #8
   1cea4:	pop	{r4, r5, r6, lr}
   1cea8:	add	sp, sp, #8
   1ceac:	bx	lr
   1ceb0:	mvn	r0, #21
   1ceb4:	b	1ce90 <__assert_fail@plt+0xa210>
   1ceb8:	bl	126e0 <__stack_chk_fail@plt>
   1cebc:	strdeq	r6, [r1], -ip
   1cec0:	andeq	r0, r0, r8, lsr #5
   1cec4:	ldr	ip, [pc, #168]	; 1cf74 <__assert_fail@plt+0xa2f4>
   1cec8:	ldr	r3, [pc, #168]	; 1cf78 <__assert_fail@plt+0xa2f8>
   1cecc:	add	ip, pc, ip
   1ced0:	push	{r4, r5, lr}
   1ced4:	sub	sp, sp, #28
   1ced8:	ldr	r5, [ip, r3]
   1cedc:	mov	r4, r1
   1cee0:	add	r3, sp, #16
   1cee4:	mov	r1, r2
   1cee8:	ldr	r2, [pc, #140]	; 1cf7c <__assert_fail@plt+0xa2fc>
   1ceec:	str	r3, [sp]
   1cef0:	ldr	lr, [r5]
   1cef4:	add	r3, sp, #12
   1cef8:	add	r2, pc, r2
   1cefc:	str	lr, [sp, #20]
   1cf00:	bl	1c8ac <__assert_fail@plt+0x9c2c>
   1cf04:	cmp	r0, #2
   1cf08:	bne	1cf68 <__assert_fail@plt+0xa2e8>
   1cf0c:	cmp	r4, #0
   1cf10:	moveq	r0, r4
   1cf14:	beq	1cf50 <__assert_fail@plt+0xa2d0>
   1cf18:	ldr	r0, [sp, #16]
   1cf1c:	ldr	r3, [sp, #12]
   1cf20:	ldr	ip, [pc, #88]	; 1cf80 <__assert_fail@plt+0xa300>
   1cf24:	ldr	r2, [pc, #88]	; 1cf84 <__assert_fail@plt+0xa304>
   1cf28:	uxtb	r1, r0
   1cf2c:	and	ip, ip, r3, lsl #8
   1cf30:	bic	r3, r3, #4080	; 0xff0
   1cf34:	and	r2, r2, r0, lsl #12
   1cf38:	orr	r1, r1, ip
   1cf3c:	bic	r3, r3, #15
   1cf40:	orr	r3, r3, r0, lsr #20
   1cf44:	orr	r2, r2, r1
   1cf48:	mov	r0, #0
   1cf4c:	strd	r2, [r4]
   1cf50:	ldr	r2, [sp, #20]
   1cf54:	ldr	r3, [r5]
   1cf58:	cmp	r2, r3
   1cf5c:	bne	1cf70 <__assert_fail@plt+0xa2f0>
   1cf60:	add	sp, sp, #28
   1cf64:	pop	{r4, r5, pc}
   1cf68:	mvn	r0, #0
   1cf6c:	b	1cf50 <__assert_fail@plt+0xa2d0>
   1cf70:	bl	126e0 <__stack_chk_fail@plt>
   1cf74:	andeq	r6, r1, r8, ror lr
   1cf78:	andeq	r0, r0, r8, lsr #5
   1cf7c:	andeq	r6, r0, r8, asr #2
   1cf80:	andeq	pc, pc, r0, lsl #30
   1cf84:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1cf88:	push	{r2, r3}
   1cf8c:	ldr	r3, [pc, #116]	; 1d008 <__assert_fail@plt+0xa388>
   1cf90:	ldr	r2, [pc, #116]	; 1d00c <__assert_fail@plt+0xa38c>
   1cf94:	add	r3, pc, r3
   1cf98:	push	{r4, r5, r6, lr}
   1cf9c:	sub	sp, sp, #8
   1cfa0:	ldr	r4, [r3, r2]
   1cfa4:	add	ip, sp, #28
   1cfa8:	mov	r2, ip
   1cfac:	ldr	r3, [r4]
   1cfb0:	mov	r5, r1
   1cfb4:	ldr	r1, [sp, #24]
   1cfb8:	str	ip, [sp]
   1cfbc:	str	r3, [sp, #4]
   1cfc0:	mov	r6, r0
   1cfc4:	bl	1afbc <__assert_fail@plt+0x833c>
   1cfc8:	subs	r2, r0, #0
   1cfcc:	beq	1cffc <__assert_fail@plt+0xa37c>
   1cfd0:	mov	r1, r5
   1cfd4:	mov	r0, r6
   1cfd8:	bl	1cec4 <__assert_fail@plt+0xa244>
   1cfdc:	ldr	r2, [sp, #4]
   1cfe0:	ldr	r3, [r4]
   1cfe4:	cmp	r2, r3
   1cfe8:	bne	1d004 <__assert_fail@plt+0xa384>
   1cfec:	add	sp, sp, #8
   1cff0:	pop	{r4, r5, r6, lr}
   1cff4:	add	sp, sp, #8
   1cff8:	bx	lr
   1cffc:	mvn	r0, #21
   1d000:	b	1cfdc <__assert_fail@plt+0xa35c>
   1d004:	bl	126e0 <__stack_chk_fail@plt>
   1d008:			; <UNDEFINED> instruction: 0x00016db0
   1d00c:	andeq	r0, r0, r8, lsr #5
   1d010:	ldr	r3, [pc, #284]	; 1d134 <__assert_fail@plt+0xa4b4>
   1d014:	ldr	ip, [pc, #284]	; 1d138 <__assert_fail@plt+0xa4b8>
   1d018:	add	r3, pc, r3
   1d01c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d020:	sub	sp, sp, #20
   1d024:	ldr	r8, [r3, ip]
   1d028:	mov	r6, r1
   1d02c:	ldr	r1, [pc, #264]	; 1d13c <__assert_fail@plt+0xa4bc>
   1d030:	ldr	r3, [r8]
   1d034:	str	r3, [sp, #12]
   1d038:	bl	1bb94 <__assert_fail@plt+0x8f14>
   1d03c:	mov	r7, r0
   1d040:	bl	129a4 <__errno_location@plt>
   1d044:	cmp	r7, #0
   1d048:	mov	r5, r0
   1d04c:	blt	1d11c <__assert_fail@plt+0xa49c>
   1d050:	mov	r0, r6
   1d054:	bl	12938 <strlen@plt>
   1d058:	subs	r4, r0, #0
   1d05c:	beq	1d0d4 <__assert_fail@plt+0xa454>
   1d060:	mov	r9, #0
   1d064:	add	sl, sp, #4
   1d068:	str	r9, [r5]
   1d06c:	mov	r2, r4
   1d070:	mov	r1, r6
   1d074:	mov	r0, r7
   1d078:	bl	12a88 <write@plt>
   1d07c:	cmp	r0, #0
   1d080:	ble	1d100 <__assert_fail@plt+0xa480>
   1d084:	subs	r4, r4, r0
   1d088:	ldr	fp, [r5]
   1d08c:	beq	1d0b8 <__assert_fail@plt+0xa438>
   1d090:	cmp	fp, #11
   1d094:	add	r6, r6, r0
   1d098:	bne	1d068 <__assert_fail@plt+0xa3e8>
   1d09c:	ldr	r3, [pc, #156]	; 1d140 <__assert_fail@plt+0xa4c0>
   1d0a0:	mov	r1, #0
   1d0a4:	mov	r0, sl
   1d0a8:	str	r9, [sp, #4]
   1d0ac:	str	r3, [sp, #8]
   1d0b0:	bl	12608 <nanosleep@plt>
   1d0b4:	b	1d068 <__assert_fail@plt+0xa3e8>
   1d0b8:	cmp	fp, #11
   1d0bc:	bne	1d0d8 <__assert_fail@plt+0xa458>
   1d0c0:	ldr	r3, [pc, #120]	; 1d140 <__assert_fail@plt+0xa4c0>
   1d0c4:	mov	r1, r4
   1d0c8:	add	r0, sp, #4
   1d0cc:	stmib	sp, {r1, r3}
   1d0d0:	bl	12608 <nanosleep@plt>
   1d0d4:	ldr	fp, [r5]
   1d0d8:	mov	r0, r7
   1d0dc:	bl	12c44 <close@plt>
   1d0e0:	str	fp, [r5]
   1d0e4:	ldr	r2, [sp, #12]
   1d0e8:	ldr	r3, [r8]
   1d0ec:	mov	r0, r4
   1d0f0:	cmp	r2, r3
   1d0f4:	bne	1d130 <__assert_fail@plt+0xa4b0>
   1d0f8:	add	sp, sp, #20
   1d0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d100:	ldr	fp, [r5]
   1d104:	cmp	fp, #4
   1d108:	cmpne	fp, #11
   1d10c:	bne	1d128 <__assert_fail@plt+0xa4a8>
   1d110:	cmp	fp, #11
   1d114:	bne	1d068 <__assert_fail@plt+0xa3e8>
   1d118:	b	1d09c <__assert_fail@plt+0xa41c>
   1d11c:	ldr	r4, [r0]
   1d120:	rsb	r4, r4, #0
   1d124:	b	1d0e4 <__assert_fail@plt+0xa464>
   1d128:	mvn	r4, #0
   1d12c:	b	1d0d8 <__assert_fail@plt+0xa458>
   1d130:	bl	126e0 <__stack_chk_fail@plt>
   1d134:	andeq	r6, r1, ip, lsr #26
   1d138:	andeq	r0, r0, r8, lsr #5
   1d13c:	andeq	r0, r8, r1
   1d140:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1d144:	push	{r2, r3}
   1d148:	ldr	r3, [pc, #116]	; 1d1c4 <__assert_fail@plt+0xa544>
   1d14c:	ldr	r2, [pc, #116]	; 1d1c8 <__assert_fail@plt+0xa548>
   1d150:	add	r3, pc, r3
   1d154:	push	{r4, r5, r6, lr}
   1d158:	sub	sp, sp, #8
   1d15c:	ldr	r4, [r3, r2]
   1d160:	add	ip, sp, #28
   1d164:	mov	r2, ip
   1d168:	ldr	r3, [r4]
   1d16c:	mov	r5, r1
   1d170:	ldr	r1, [sp, #24]
   1d174:	str	ip, [sp]
   1d178:	str	r3, [sp, #4]
   1d17c:	mov	r6, r0
   1d180:	bl	1afbc <__assert_fail@plt+0x833c>
   1d184:	subs	r2, r0, #0
   1d188:	beq	1d1b8 <__assert_fail@plt+0xa538>
   1d18c:	mov	r1, r5
   1d190:	mov	r0, r6
   1d194:	bl	1d010 <__assert_fail@plt+0xa390>
   1d198:	ldr	r2, [sp, #4]
   1d19c:	ldr	r3, [r4]
   1d1a0:	cmp	r2, r3
   1d1a4:	bne	1d1c0 <__assert_fail@plt+0xa540>
   1d1a8:	add	sp, sp, #8
   1d1ac:	pop	{r4, r5, r6, lr}
   1d1b0:	add	sp, sp, #8
   1d1b4:	bx	lr
   1d1b8:	mvn	r0, #21
   1d1bc:	b	1d198 <__assert_fail@plt+0xa518>
   1d1c0:	bl	126e0 <__stack_chk_fail@plt>
   1d1c4:	strdeq	r6, [r1], -r4
   1d1c8:	andeq	r0, r0, r8, lsr #5
   1d1cc:	ldr	ip, [pc, #328]	; 1d31c <__assert_fail@plt+0xa69c>
   1d1d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1d4:	add	ip, pc, ip
   1d1d8:	ldr	lr, [pc, #320]	; 1d320 <__assert_fail@plt+0xa6a0>
   1d1dc:	sub	sp, sp, #60	; 0x3c
   1d1e0:	mov	r9, r3
   1d1e4:	ldr	r7, [ip, lr]
   1d1e8:	mov	r3, ip
   1d1ec:	ldr	r1, [pc, #304]	; 1d324 <__assert_fail@plt+0xa6a4>
   1d1f0:	ldr	r3, [r7]
   1d1f4:	mov	r8, r2
   1d1f8:	ldr	r2, [sp, #96]	; 0x60
   1d1fc:	str	r3, [sp, #52]	; 0x34
   1d200:	bl	1bb94 <__assert_fail@plt+0x8f14>
   1d204:	mov	r6, r0
   1d208:	bl	129a4 <__errno_location@plt>
   1d20c:	cmp	r6, #0
   1d210:	mov	r5, r0
   1d214:	blt	1d304 <__assert_fail@plt+0xa684>
   1d218:	ldr	r2, [pc, #264]	; 1d328 <__assert_fail@plt+0xa6a8>
   1d21c:	mov	r3, #21
   1d220:	add	r2, pc, r2
   1d224:	strd	r8, [sp, #8]
   1d228:	str	r2, [sp]
   1d22c:	add	r0, sp, #28
   1d230:	mov	r1, r3
   1d234:	mov	r2, #1
   1d238:	mov	r8, r0
   1d23c:	bl	12c5c <__snprintf_chk@plt>
   1d240:	mov	r9, #0
   1d244:	add	sl, sp, #20
   1d248:	mov	r4, r0
   1d24c:	str	r9, [r5]
   1d250:	mov	r2, r4
   1d254:	mov	r1, r8
   1d258:	mov	r0, r6
   1d25c:	bl	12a88 <write@plt>
   1d260:	cmp	r0, #0
   1d264:	ble	1d29c <__assert_fail@plt+0xa61c>
   1d268:	subs	r4, r4, r0
   1d26c:	ldr	fp, [r5]
   1d270:	beq	1d2b8 <__assert_fail@plt+0xa638>
   1d274:	cmp	fp, #11
   1d278:	add	r8, r8, r0
   1d27c:	bne	1d24c <__assert_fail@plt+0xa5cc>
   1d280:	ldr	r3, [pc, #164]	; 1d32c <__assert_fail@plt+0xa6ac>
   1d284:	mov	r1, #0
   1d288:	mov	r0, sl
   1d28c:	str	r9, [sp, #20]
   1d290:	str	r3, [sp, #24]
   1d294:	bl	12608 <nanosleep@plt>
   1d298:	b	1d24c <__assert_fail@plt+0xa5cc>
   1d29c:	ldr	fp, [r5]
   1d2a0:	cmp	fp, #4
   1d2a4:	cmpne	fp, #11
   1d2a8:	bne	1d310 <__assert_fail@plt+0xa690>
   1d2ac:	cmp	fp, #11
   1d2b0:	bne	1d24c <__assert_fail@plt+0xa5cc>
   1d2b4:	b	1d280 <__assert_fail@plt+0xa600>
   1d2b8:	cmp	fp, #11
   1d2bc:	bne	1d2dc <__assert_fail@plt+0xa65c>
   1d2c0:	ldr	r3, [pc, #100]	; 1d32c <__assert_fail@plt+0xa6ac>
   1d2c4:	mov	r1, r4
   1d2c8:	add	r0, sp, #20
   1d2cc:	str	r4, [sp, #20]
   1d2d0:	str	r3, [sp, #24]
   1d2d4:	bl	12608 <nanosleep@plt>
   1d2d8:	ldr	fp, [r5]
   1d2dc:	mov	r0, r6
   1d2e0:	bl	12c44 <close@plt>
   1d2e4:	str	fp, [r5]
   1d2e8:	ldr	r2, [sp, #52]	; 0x34
   1d2ec:	ldr	r3, [r7]
   1d2f0:	mov	r0, r4
   1d2f4:	cmp	r2, r3
   1d2f8:	bne	1d318 <__assert_fail@plt+0xa698>
   1d2fc:	add	sp, sp, #60	; 0x3c
   1d300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d304:	ldr	r4, [r0]
   1d308:	rsb	r4, r4, #0
   1d30c:	b	1d2e8 <__assert_fail@plt+0xa668>
   1d310:	mvn	r4, #0
   1d314:	b	1d2dc <__assert_fail@plt+0xa65c>
   1d318:	bl	126e0 <__stack_chk_fail@plt>
   1d31c:	andeq	r6, r1, r0, ror fp
   1d320:	andeq	r0, r0, r8, lsr #5
   1d324:	andeq	r0, r8, r1
   1d328:	andeq	r5, r0, r4, lsl lr
   1d32c:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1d330:	ldr	ip, [pc, #328]	; 1d480 <__assert_fail@plt+0xa800>
   1d334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d338:	add	ip, pc, ip
   1d33c:	ldr	lr, [pc, #320]	; 1d484 <__assert_fail@plt+0xa804>
   1d340:	sub	sp, sp, #76	; 0x4c
   1d344:	mov	r9, r3
   1d348:	ldr	r7, [ip, lr]
   1d34c:	mov	r3, ip
   1d350:	ldr	r1, [pc, #304]	; 1d488 <__assert_fail@plt+0xa808>
   1d354:	ldr	r3, [r7]
   1d358:	mov	r8, r2
   1d35c:	ldr	r2, [sp, #112]	; 0x70
   1d360:	str	r3, [sp, #68]	; 0x44
   1d364:	bl	1bb94 <__assert_fail@plt+0x8f14>
   1d368:	mov	r6, r0
   1d36c:	bl	129a4 <__errno_location@plt>
   1d370:	cmp	r6, #0
   1d374:	mov	r5, r0
   1d378:	blt	1d468 <__assert_fail@plt+0xa7e8>
   1d37c:	ldr	r2, [pc, #264]	; 1d48c <__assert_fail@plt+0xa80c>
   1d380:	mov	r3, #37	; 0x25
   1d384:	add	r2, pc, r2
   1d388:	strd	r8, [sp, #8]
   1d38c:	str	r2, [sp]
   1d390:	add	r0, sp, #28
   1d394:	mov	r1, r3
   1d398:	mov	r2, #1
   1d39c:	mov	r8, r0
   1d3a0:	bl	12c5c <__snprintf_chk@plt>
   1d3a4:	mov	r9, #0
   1d3a8:	add	sl, sp, #20
   1d3ac:	mov	r4, r0
   1d3b0:	str	r9, [r5]
   1d3b4:	mov	r2, r4
   1d3b8:	mov	r1, r8
   1d3bc:	mov	r0, r6
   1d3c0:	bl	12a88 <write@plt>
   1d3c4:	cmp	r0, #0
   1d3c8:	ble	1d400 <__assert_fail@plt+0xa780>
   1d3cc:	subs	r4, r4, r0
   1d3d0:	ldr	fp, [r5]
   1d3d4:	beq	1d41c <__assert_fail@plt+0xa79c>
   1d3d8:	cmp	fp, #11
   1d3dc:	add	r8, r8, r0
   1d3e0:	bne	1d3b0 <__assert_fail@plt+0xa730>
   1d3e4:	ldr	r3, [pc, #164]	; 1d490 <__assert_fail@plt+0xa810>
   1d3e8:	mov	r1, #0
   1d3ec:	mov	r0, sl
   1d3f0:	str	r9, [sp, #20]
   1d3f4:	str	r3, [sp, #24]
   1d3f8:	bl	12608 <nanosleep@plt>
   1d3fc:	b	1d3b0 <__assert_fail@plt+0xa730>
   1d400:	ldr	fp, [r5]
   1d404:	cmp	fp, #4
   1d408:	cmpne	fp, #11
   1d40c:	bne	1d474 <__assert_fail@plt+0xa7f4>
   1d410:	cmp	fp, #11
   1d414:	bne	1d3b0 <__assert_fail@plt+0xa730>
   1d418:	b	1d3e4 <__assert_fail@plt+0xa764>
   1d41c:	cmp	fp, #11
   1d420:	bne	1d440 <__assert_fail@plt+0xa7c0>
   1d424:	ldr	r3, [pc, #100]	; 1d490 <__assert_fail@plt+0xa810>
   1d428:	mov	r1, r4
   1d42c:	add	r0, sp, #20
   1d430:	str	r4, [sp, #20]
   1d434:	str	r3, [sp, #24]
   1d438:	bl	12608 <nanosleep@plt>
   1d43c:	ldr	fp, [r5]
   1d440:	mov	r0, r6
   1d444:	bl	12c44 <close@plt>
   1d448:	str	fp, [r5]
   1d44c:	ldr	r2, [sp, #68]	; 0x44
   1d450:	ldr	r3, [r7]
   1d454:	mov	r0, r4
   1d458:	cmp	r2, r3
   1d45c:	bne	1d47c <__assert_fail@plt+0xa7fc>
   1d460:	add	sp, sp, #76	; 0x4c
   1d464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d468:	ldr	r4, [r0]
   1d46c:	rsb	r4, r4, #0
   1d470:	b	1d44c <__assert_fail@plt+0xa7cc>
   1d474:	mvn	r4, #0
   1d478:	b	1d440 <__assert_fail@plt+0xa7c0>
   1d47c:	bl	126e0 <__stack_chk_fail@plt>
   1d480:	andeq	r6, r1, ip, lsl #20
   1d484:	andeq	r0, r0, r8, lsr #5
   1d488:	andeq	r0, r8, r1
   1d48c:	andeq	r4, r0, r8, ror r2
   1d490:	cdpeq	2, 14, cr11, cr6, cr0, {4}
   1d494:	ldr	r1, [pc, #124]	; 1d518 <__assert_fail@plt+0xa898>
   1d498:	ldr	ip, [pc, #124]	; 1d51c <__assert_fail@plt+0xa89c>
   1d49c:	add	r1, pc, r1
   1d4a0:	push	{r4, r5, r6, r7, lr}
   1d4a4:	sub	sp, sp, #20
   1d4a8:	ldr	r6, [r1, ip]
   1d4ac:	add	lr, sp, #44	; 0x2c
   1d4b0:	mov	r5, r3
   1d4b4:	mov	r3, r1
   1d4b8:	ldr	r3, [r6]
   1d4bc:	mov	r4, r2
   1d4c0:	ldr	r1, [sp, #40]	; 0x28
   1d4c4:	mov	r2, lr
   1d4c8:	str	lr, [sp, #8]
   1d4cc:	str	r3, [sp, #12]
   1d4d0:	mov	r7, r0
   1d4d4:	bl	1afbc <__assert_fail@plt+0x833c>
   1d4d8:	cmp	r0, #0
   1d4dc:	beq	1d50c <__assert_fail@plt+0xa88c>
   1d4e0:	str	r0, [sp]
   1d4e4:	mov	r2, r4
   1d4e8:	mov	r3, r5
   1d4ec:	mov	r0, r7
   1d4f0:	bl	1d330 <__assert_fail@plt+0xa6b0>
   1d4f4:	ldr	r2, [sp, #12]
   1d4f8:	ldr	r3, [r6]
   1d4fc:	cmp	r2, r3
   1d500:	bne	1d514 <__assert_fail@plt+0xa894>
   1d504:	add	sp, sp, #20
   1d508:	pop	{r4, r5, r6, r7, pc}
   1d50c:	mvn	r0, #21
   1d510:	b	1d4f4 <__assert_fail@plt+0xa874>
   1d514:	bl	126e0 <__stack_chk_fail@plt>
   1d518:	andeq	r6, r1, r8, lsr #17
   1d51c:	andeq	r0, r0, r8, lsr #5
   1d520:	push	{r4, r5, r6, r7, r8, lr}
   1d524:	bl	1c178 <__assert_fail@plt+0x94f8>
   1d528:	subs	r6, r0, #0
   1d52c:	moveq	r5, r6
   1d530:	beq	1d590 <__assert_fail@plt+0xa910>
   1d534:	ldr	r8, [pc, #92]	; 1d598 <__assert_fail@plt+0xa918>
   1d538:	ldr	r7, [pc, #92]	; 1d59c <__assert_fail@plt+0xa91c>
   1d53c:	mov	r5, #0
   1d540:	add	r8, pc, r8
   1d544:	add	r7, pc, r7
   1d548:	mov	r0, r6
   1d54c:	bl	12b84 <readdir64@plt>
   1d550:	mov	r1, r8
   1d554:	cmp	r0, #0
   1d558:	add	r4, r0, #19
   1d55c:	mov	r0, r4
   1d560:	beq	1d588 <__assert_fail@plt+0xa908>
   1d564:	bl	12524 <strcmp@plt>
   1d568:	mov	r1, r7
   1d56c:	cmp	r0, #0
   1d570:	mov	r0, r4
   1d574:	beq	1d548 <__assert_fail@plt+0xa8c8>
   1d578:	bl	12524 <strcmp@plt>
   1d57c:	cmp	r0, #0
   1d580:	addne	r5, r5, #1
   1d584:	b	1d548 <__assert_fail@plt+0xa8c8>
   1d588:	mov	r0, r6
   1d58c:	bl	12c50 <closedir@plt>
   1d590:	mov	r0, r5
   1d594:	pop	{r4, r5, r6, r7, r8, pc}
   1d598:	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
   1d59c:	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
   1d5a0:	push	{r1, r2, r3}
   1d5a4:	ldr	r3, [pc, #104]	; 1d614 <__assert_fail@plt+0xa994>
   1d5a8:	ldr	r1, [pc, #104]	; 1d618 <__assert_fail@plt+0xa998>
   1d5ac:	add	r3, pc, r3
   1d5b0:	push	{r4, r5, lr}
   1d5b4:	sub	sp, sp, #8
   1d5b8:	ldr	r4, [r3, r1]
   1d5bc:	add	ip, sp, #24
   1d5c0:	ldr	r1, [sp, #20]
   1d5c4:	ldr	r3, [r4]
   1d5c8:	mov	r2, ip
   1d5cc:	str	ip, [sp]
   1d5d0:	mov	r5, r0
   1d5d4:	str	r3, [sp, #4]
   1d5d8:	bl	1afbc <__assert_fail@plt+0x833c>
   1d5dc:	subs	r1, r0, #0
   1d5e0:	moveq	r0, r1
   1d5e4:	beq	1d5f0 <__assert_fail@plt+0xa970>
   1d5e8:	mov	r0, r5
   1d5ec:	bl	1d520 <__assert_fail@plt+0xa8a0>
   1d5f0:	ldr	r2, [sp, #4]
   1d5f4:	ldr	r3, [r4]
   1d5f8:	cmp	r2, r3
   1d5fc:	bne	1d610 <__assert_fail@plt+0xa990>
   1d600:	add	sp, sp, #8
   1d604:	pop	{r4, r5, lr}
   1d608:	add	sp, sp, #12
   1d60c:	bx	lr
   1d610:	bl	126e0 <__stack_chk_fail@plt>
   1d614:	muleq	r1, r8, r7
   1d618:	andeq	r0, r0, r8, lsr #5
   1d61c:	ldr	r3, [pc, #184]	; 1d6dc <__assert_fail@plt+0xaa5c>
   1d620:	push	{r4, r5, r6, lr}
   1d624:	add	r3, pc, r3
   1d628:	ldr	lr, [pc, #176]	; 1d6e0 <__assert_fail@plt+0xaa60>
   1d62c:	sub	sp, sp, #4096	; 0x1000
   1d630:	sub	sp, sp, #24
   1d634:	ldr	r5, [r3, lr]
   1d638:	mov	r6, r2
   1d63c:	add	r2, sp, #4096	; 0x1000
   1d640:	add	r2, r2, #20
   1d644:	ldr	r3, [r5]
   1d648:	subs	ip, r1, #0
   1d64c:	str	r3, [r2]
   1d650:	beq	1d6d0 <__assert_fail@plt+0xaa50>
   1d654:	cmp	r0, #0
   1d658:	beq	1d6c0 <__assert_fail@plt+0xaa40>
   1d65c:	ldrsb	r3, [ip]
   1d660:	ldr	r2, [pc, #124]	; 1d6e4 <__assert_fail@plt+0xaa64>
   1d664:	add	r4, sp, #20
   1d668:	cmp	r3, #47	; 0x2f
   1d66c:	addeq	ip, ip, #1
   1d670:	add	r2, pc, r2
   1d674:	mov	r3, #4096	; 0x1000
   1d678:	stmib	sp, {r0, ip}
   1d67c:	str	r2, [sp]
   1d680:	mov	r1, r3
   1d684:	mov	r0, r4
   1d688:	mov	r2, #1
   1d68c:	bl	12c5c <__snprintf_chk@plt>
   1d690:	mov	r1, r6
   1d694:	mov	r0, r4
   1d698:	bl	12bcc <fopen64@plt>
   1d69c:	add	r3, sp, #4096	; 0x1000
   1d6a0:	add	r3, r3, #20
   1d6a4:	ldr	r2, [r3]
   1d6a8:	ldr	r3, [r5]
   1d6ac:	cmp	r2, r3
   1d6b0:	bne	1d6d8 <__assert_fail@plt+0xaa58>
   1d6b4:	add	sp, sp, #4096	; 0x1000
   1d6b8:	add	sp, sp, #24
   1d6bc:	pop	{r4, r5, r6, pc}
   1d6c0:	mov	r1, r6
   1d6c4:	mov	r0, ip
   1d6c8:	bl	12bcc <fopen64@plt>
   1d6cc:	b	1d69c <__assert_fail@plt+0xaa1c>
   1d6d0:	mov	r0, ip
   1d6d4:	b	1d69c <__assert_fail@plt+0xaa1c>
   1d6d8:	bl	126e0 <__stack_chk_fail@plt>
   1d6dc:	andeq	r6, r1, r0, lsr #14
   1d6e0:	andeq	r0, r0, r8, lsr #5
   1d6e4:	muleq	r0, r8, r8
   1d6e8:	push	{r3}		; (str r3, [sp, #-4]!)
   1d6ec:	ldr	r3, [pc, #88]	; 1d74c <__assert_fail@plt+0xaacc>
   1d6f0:	ldr	ip, [pc, #88]	; 1d750 <__assert_fail@plt+0xaad0>
   1d6f4:	add	r3, pc, r3
   1d6f8:	push	{r4, lr}
   1d6fc:	sub	sp, sp, #20
   1d700:	ldr	r4, [r3, ip]
   1d704:	ldr	lr, [sp, #28]
   1d708:	add	ip, sp, #32
   1d70c:	str	lr, [sp]
   1d710:	ldr	r3, [r4]
   1d714:	str	ip, [sp, #4]
   1d718:	str	r3, [sp, #12]
   1d71c:	mov	r3, #0
   1d720:	str	ip, [sp, #8]
   1d724:	bl	1bfcc <__assert_fail@plt+0x934c>
   1d728:	ldr	r2, [sp, #12]
   1d72c:	ldr	r3, [r4]
   1d730:	cmp	r2, r3
   1d734:	bne	1d748 <__assert_fail@plt+0xaac8>
   1d738:	add	sp, sp, #20
   1d73c:	pop	{r4, lr}
   1d740:	add	sp, sp, #4
   1d744:	bx	lr
   1d748:	bl	126e0 <__stack_chk_fail@plt>
   1d74c:	andeq	r6, r1, r0, asr r6
   1d750:	andeq	r0, r0, r8, lsr #5
   1d754:	push	{r3}		; (str r3, [sp, #-4]!)
   1d758:	ldr	r3, [pc, #88]	; 1d7b8 <__assert_fail@plt+0xab38>
   1d75c:	ldr	ip, [pc, #88]	; 1d7bc <__assert_fail@plt+0xab3c>
   1d760:	add	r3, pc, r3
   1d764:	push	{r4, lr}
   1d768:	sub	sp, sp, #20
   1d76c:	ldr	r4, [r3, ip]
   1d770:	ldr	lr, [sp, #28]
   1d774:	add	ip, sp, #32
   1d778:	str	lr, [sp]
   1d77c:	ldr	r3, [r4]
   1d780:	str	ip, [sp, #4]
   1d784:	str	r3, [sp, #12]
   1d788:	mov	r3, #1
   1d78c:	str	ip, [sp, #8]
   1d790:	bl	1bfcc <__assert_fail@plt+0x934c>
   1d794:	ldr	r2, [sp, #12]
   1d798:	ldr	r3, [r4]
   1d79c:	cmp	r2, r3
   1d7a0:	bne	1d7b4 <__assert_fail@plt+0xab34>
   1d7a4:	add	sp, sp, #20
   1d7a8:	pop	{r4, lr}
   1d7ac:	add	sp, sp, #4
   1d7b0:	bx	lr
   1d7b4:	bl	126e0 <__stack_chk_fail@plt>
   1d7b8:	andeq	r6, r1, r4, ror #11
   1d7bc:	andeq	r0, r0, r8, lsr #5
   1d7c0:	push	{r1, r2, r3}
   1d7c4:	subs	r3, r0, #0
   1d7c8:	ldr	r1, [pc, #168]	; 1d878 <__assert_fail@plt+0xabf8>
   1d7cc:	ldr	r2, [pc, #168]	; 1d87c <__assert_fail@plt+0xabfc>
   1d7d0:	add	r1, pc, r1
   1d7d4:	push	{r4, r5, r6, lr}
   1d7d8:	sub	sp, sp, #12
   1d7dc:	ldr	r5, [r1, r2]
   1d7e0:	ldr	r6, [sp, #28]
   1d7e4:	ldr	r2, [r5]
   1d7e8:	str	r2, [sp, #4]
   1d7ec:	beq	1d804 <__assert_fail@plt+0xab84>
   1d7f0:	ldr	r2, [pc, #136]	; 1d880 <__assert_fail@plt+0xac00>
   1d7f4:	add	r2, pc, r2
   1d7f8:	ldr	r2, [r2]
   1d7fc:	tst	r2, #16777216	; 0x1000000
   1d800:	beq	1d854 <__assert_fail@plt+0xabd4>
   1d804:	ldr	r3, [pc, #120]	; 1d884 <__assert_fail@plt+0xac04>
   1d808:	ldr	r4, [r1, r3]
   1d80c:	add	ip, sp, #32
   1d810:	mov	r2, r6
   1d814:	mov	r3, ip
   1d818:	mov	r1, #1
   1d81c:	ldr	r0, [r4]
   1d820:	str	ip, [sp]
   1d824:	bl	12890 <__vfprintf_chk@plt>
   1d828:	ldr	r1, [r4]
   1d82c:	mov	r0, #10
   1d830:	bl	12b60 <fputc@plt>
   1d834:	ldr	r2, [sp, #4]
   1d838:	ldr	r3, [r5]
   1d83c:	cmp	r2, r3
   1d840:	bne	1d874 <__assert_fail@plt+0xabf4>
   1d844:	add	sp, sp, #12
   1d848:	pop	{r4, r5, r6, lr}
   1d84c:	add	sp, sp, #12
   1d850:	bx	lr
   1d854:	ldr	r0, [pc, #40]	; 1d884 <__assert_fail@plt+0xac04>
   1d858:	ldr	r2, [pc, #40]	; 1d888 <__assert_fail@plt+0xac08>
   1d85c:	ldr	r4, [r1, r0]
   1d860:	add	r2, pc, r2
   1d864:	mov	r1, #1
   1d868:	ldr	r0, [r4]
   1d86c:	bl	12ab8 <__fprintf_chk@plt>
   1d870:	b	1d80c <__assert_fail@plt+0xab8c>
   1d874:	bl	126e0 <__stack_chk_fail@plt>
   1d878:	andeq	r6, r1, r4, ror r5
   1d87c:	andeq	r0, r0, r8, lsr #5
   1d880:	strdeq	r7, [r1], -ip
   1d884:	andeq	r0, r0, ip, lsr #5
   1d888:	andeq	r3, r0, ip, asr #24
   1d88c:	ldr	r3, [pc, #184]	; 1d94c <__assert_fail@plt+0xaccc>
   1d890:	push	{r4, r5, lr}
   1d894:	subs	r4, r0, #0
   1d898:	sub	sp, sp, #12
   1d89c:	add	r3, pc, r3
   1d8a0:	beq	1d8f0 <__assert_fail@plt+0xac70>
   1d8a4:	ldr	r2, [pc, #164]	; 1d950 <__assert_fail@plt+0xacd0>
   1d8a8:	add	r2, pc, r2
   1d8ac:	ldr	r2, [r2]
   1d8b0:	tst	r2, #4
   1d8b4:	bne	1d8f8 <__assert_fail@plt+0xac78>
   1d8b8:	mov	r0, r4
   1d8bc:	bl	1b6c8 <__assert_fail@plt+0x8a48>
   1d8c0:	subs	r5, r0, #0
   1d8c4:	beq	1d8f0 <__assert_fail@plt+0xac70>
   1d8c8:	ldr	r0, [r5, #8]
   1d8cc:	bl	1b194 <__assert_fail@plt+0x8514>
   1d8d0:	mov	r0, r5
   1d8d4:	bl	125d8 <free@plt>
   1d8d8:	mov	r2, #0
   1d8dc:	mov	r0, r4
   1d8e0:	mov	r1, r2
   1d8e4:	add	sp, sp, #12
   1d8e8:	pop	{r4, r5, lr}
   1d8ec:	b	1b614 <__assert_fail@plt+0x8994>
   1d8f0:	add	sp, sp, #12
   1d8f4:	pop	{r4, r5, pc}
   1d8f8:	ldr	r2, [pc, #84]	; 1d954 <__assert_fail@plt+0xacd4>
   1d8fc:	ldr	r3, [r3, r2]
   1d900:	ldr	r5, [r3]
   1d904:	bl	128fc <getpid@plt>
   1d908:	ldr	r2, [pc, #72]	; 1d958 <__assert_fail@plt+0xacd8>
   1d90c:	ldr	r3, [pc, #72]	; 1d95c <__assert_fail@plt+0xacdc>
   1d910:	add	r2, pc, r2
   1d914:	str	r2, [sp, #4]
   1d918:	ldr	r2, [pc, #64]	; 1d960 <__assert_fail@plt+0xace0>
   1d91c:	add	r3, pc, r3
   1d920:	str	r3, [sp]
   1d924:	add	r2, pc, r2
   1d928:	mov	r1, #1
   1d92c:	mov	r3, r0
   1d930:	mov	r0, r5
   1d934:	bl	12ab8 <__fprintf_chk@plt>
   1d938:	ldr	r1, [pc, #36]	; 1d964 <__assert_fail@plt+0xace4>
   1d93c:	mov	r0, r4
   1d940:	add	r1, pc, r1
   1d944:	bl	1d7c0 <__assert_fail@plt+0xab40>
   1d948:	b	1d8b8 <__assert_fail@plt+0xac38>
   1d94c:	andeq	r6, r1, r8, lsr #9
   1d950:	andeq	r7, r1, r8, asr #2
   1d954:	andeq	r0, r0, ip, lsr #5
   1d958:	andeq	r3, r0, ip, asr #23
   1d95c:	andeq	r5, r0, r8, asr #14
   1d960:	andeq	r3, r0, r8, lsr #23
   1d964:	andeq	r5, r0, ip, lsr #14
   1d968:	push	{r4, r5, r6, r7, r8, lr}
   1d96c:	mov	r7, r0
   1d970:	ldr	r6, [pc, #76]	; 1d9c4 <__assert_fail@plt+0xad44>
   1d974:	ldr	r8, [pc, #76]	; 1d9c8 <__assert_fail@plt+0xad48>
   1d978:	add	r6, pc, r6
   1d97c:	add	r8, pc, r8
   1d980:	mov	r0, r7
   1d984:	bl	12b84 <readdir64@plt>
   1d988:	mov	r1, r6
   1d98c:	subs	r5, r0, #0
   1d990:	add	r4, r5, #19
   1d994:	mov	r0, r4
   1d998:	beq	1d9bc <__assert_fail@plt+0xad3c>
   1d99c:	bl	12524 <strcmp@plt>
   1d9a0:	mov	r1, r8
   1d9a4:	cmp	r0, #0
   1d9a8:	mov	r0, r4
   1d9ac:	beq	1d980 <__assert_fail@plt+0xad00>
   1d9b0:	bl	12524 <strcmp@plt>
   1d9b4:	cmp	r0, #0
   1d9b8:	beq	1d980 <__assert_fail@plt+0xad00>
   1d9bc:	mov	r0, r5
   1d9c0:	pop	{r4, r5, r6, r7, r8, pc}
   1d9c4:	andeq	r3, r0, ip, ror ip
   1d9c8:	andeq	r3, r0, ip, ror ip
   1d9cc:	ldr	r3, [pc, #196]	; 1da98 <__assert_fail@plt+0xae18>
   1d9d0:	ldr	r2, [pc, #196]	; 1da9c <__assert_fail@plt+0xae1c>
   1d9d4:	add	r3, pc, r3
   1d9d8:	push	{r4, r5, r6, r7, lr}
   1d9dc:	sub	sp, sp, #20
   1d9e0:	ldr	r6, [r3, r2]
   1d9e4:	ldr	r1, [pc, #180]	; 1daa0 <__assert_fail@plt+0xae20>
   1d9e8:	mov	r4, #0
   1d9ec:	ldr	r3, [r6]
   1d9f0:	add	r1, pc, r1
   1d9f4:	str	r4, [sp, #4]
   1d9f8:	str	r4, [sp, #8]
   1d9fc:	str	r3, [sp, #12]
   1da00:	bl	12bcc <fopen64@plt>
   1da04:	subs	r7, r0, #0
   1da08:	beq	1da88 <__assert_fail@plt+0xae08>
   1da0c:	ldr	r1, [pc, #144]	; 1daa4 <__assert_fail@plt+0xae24>
   1da10:	add	r3, sp, #8
   1da14:	add	r2, sp, #4
   1da18:	add	r1, pc, r1
   1da1c:	bl	12a4c <fscanf@plt>
   1da20:	cmp	r0, #2
   1da24:	movne	r5, r4
   1da28:	beq	1da54 <__assert_fail@plt+0xadd4>
   1da2c:	mov	r0, r7
   1da30:	bl	12adc <fclose@plt>
   1da34:	ldr	r2, [sp, #12]
   1da38:	ldr	r3, [r6]
   1da3c:	mov	r0, r4
   1da40:	cmp	r2, r3
   1da44:	mov	r1, r5
   1da48:	bne	1da94 <__assert_fail@plt+0xae14>
   1da4c:	add	sp, sp, #20
   1da50:	pop	{r4, r5, r6, r7, pc}
   1da54:	ldr	r1, [sp, #8]
   1da58:	ldr	r5, [sp, #4]
   1da5c:	ldr	r2, [pc, #68]	; 1daa8 <__assert_fail@plt+0xae28>
   1da60:	sub	r4, r4, #1048576	; 0x100000
   1da64:	and	r2, r2, r5, lsl #8
   1da68:	uxtb	r3, r1
   1da6c:	bic	r5, r5, #4080	; 0xff0
   1da70:	orr	r3, r3, r2
   1da74:	bic	r5, r5, #15
   1da78:	and	r4, r4, r1, lsl #12
   1da7c:	orr	r5, r5, r1, lsr #20
   1da80:	orr	r4, r4, r3
   1da84:	b	1da2c <__assert_fail@plt+0xadac>
   1da88:	mov	r4, r7
   1da8c:	mov	r5, r7
   1da90:	b	1da34 <__assert_fail@plt+0xadb4>
   1da94:	bl	126e0 <__stack_chk_fail@plt>
   1da98:	andeq	r6, r1, r0, ror r3
   1da9c:	andeq	r0, r0, r8, lsr #5
   1daa0:	strdeq	r3, [r0], -r8
   1daa4:	andeq	r5, r0, r8, lsr #12
   1daa8:	andeq	pc, pc, r0, lsl #30
   1daac:	push	{r4, r5, r6, r7, r8, r9, lr}
   1dab0:	sub	sp, sp, #12
   1dab4:	mov	r6, r1
   1dab8:	mov	r7, r2
   1dabc:	mov	r8, r0
   1dac0:	bl	1b6c8 <__assert_fail@plt+0x8a48>
   1dac4:	ldr	r4, [pc, #188]	; 1db88 <__assert_fail@plt+0xaf08>
   1dac8:	add	r4, pc, r4
   1dacc:	cmp	r0, #0
   1dad0:	beq	1dafc <__assert_fail@plt+0xae7c>
   1dad4:	ldr	r5, [r0, #8]
   1dad8:	cmp	r5, #0
   1dadc:	beq	1dafc <__assert_fail@plt+0xae7c>
   1dae0:	ldr	r1, [pc, #164]	; 1db8c <__assert_fail@plt+0xaf0c>
   1dae4:	mov	r2, #6
   1dae8:	add	r1, pc, r1
   1daec:	mov	r0, r6
   1daf0:	bl	12c14 <strncmp@plt>
   1daf4:	subs	r9, r0, #0
   1daf8:	beq	1db08 <__assert_fail@plt+0xae88>
   1dafc:	mov	r0, #1
   1db00:	add	sp, sp, #12
   1db04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1db08:	mov	r0, r5
   1db0c:	bl	1b6e8 <__assert_fail@plt+0x8a68>
   1db10:	cmp	r0, #0
   1db14:	str	r0, [r7]
   1db18:	blt	1dafc <__assert_fail@plt+0xae7c>
   1db1c:	ldr	r3, [pc, #108]	; 1db90 <__assert_fail@plt+0xaf10>
   1db20:	ldr	r0, [pc, r3]
   1db24:	ands	r0, r0, #4
   1db28:	beq	1db00 <__assert_fail@plt+0xae80>
   1db2c:	ldr	r3, [pc, #96]	; 1db94 <__assert_fail@plt+0xaf14>
   1db30:	ldr	r3, [r4, r3]
   1db34:	ldr	r4, [r3]
   1db38:	bl	128fc <getpid@plt>
   1db3c:	ldr	r2, [pc, #84]	; 1db98 <__assert_fail@plt+0xaf18>
   1db40:	ldr	r3, [pc, #84]	; 1db9c <__assert_fail@plt+0xaf1c>
   1db44:	add	r2, pc, r2
   1db48:	str	r2, [sp, #4]
   1db4c:	ldr	r2, [pc, #76]	; 1dba0 <__assert_fail@plt+0xaf20>
   1db50:	add	r3, pc, r3
   1db54:	str	r3, [sp]
   1db58:	add	r2, pc, r2
   1db5c:	mov	r1, #1
   1db60:	mov	r3, r0
   1db64:	mov	r0, r4
   1db68:	bl	12ab8 <__fprintf_chk@plt>
   1db6c:	ldr	r1, [pc, #48]	; 1dba4 <__assert_fail@plt+0xaf24>
   1db70:	mov	r0, r8
   1db74:	mov	r2, r6
   1db78:	add	r1, pc, r1
   1db7c:	bl	1d7c0 <__assert_fail@plt+0xab40>
   1db80:	mov	r0, r9
   1db84:	b	1db00 <__assert_fail@plt+0xae80>
   1db88:	andeq	r6, r1, ip, ror r2
   1db8c:	andeq	r5, r0, ip, lsl #11
   1db90:	ldrdeq	r6, [r1], -r0
   1db94:	andeq	r0, r0, ip, lsr #5
   1db98:	muleq	r0, r8, r9
   1db9c:	andeq	r5, r0, r4, lsl r5
   1dba0:	andeq	r3, r0, r4, ror r9
   1dba4:	andeq	r5, r0, r4, lsl #10
   1dba8:	push	{r4, r5, r6, r7, lr}
   1dbac:	sub	sp, sp, #20
   1dbb0:	ldr	r4, [pc, #312]	; 1dcf0 <__assert_fail@plt+0xb070>
   1dbb4:	ldr	r3, [pc, #312]	; 1dcf4 <__assert_fail@plt+0xb074>
   1dbb8:	add	r4, pc, r4
   1dbbc:	ldr	r7, [pc, #308]	; 1dcf8 <__assert_fail@plt+0xb078>
   1dbc0:	ldr	r5, [r4, r3]
   1dbc4:	add	r7, pc, r7
   1dbc8:	ldr	r6, [r7]
   1dbcc:	ldr	r3, [r5]
   1dbd0:	cmp	r6, #0
   1dbd4:	str	r3, [sp, #12]
   1dbd8:	beq	1dbf4 <__assert_fail@plt+0xaf74>
   1dbdc:	ldr	r2, [sp, #12]
   1dbe0:	ldr	r3, [r5]
   1dbe4:	cmp	r2, r3
   1dbe8:	bne	1dcec <__assert_fail@plt+0xb06c>
   1dbec:	add	sp, sp, #20
   1dbf0:	pop	{r4, r5, r6, r7, pc}
   1dbf4:	ldr	r0, [pc, #256]	; 1dcfc <__assert_fail@plt+0xb07c>
   1dbf8:	add	r0, pc, r0
   1dbfc:	bl	12824 <getenv@plt>
   1dc00:	cmp	r0, #0
   1dc04:	beq	1dc4c <__assert_fail@plt+0xafcc>
   1dc08:	mov	r2, r6
   1dc0c:	add	r1, sp, #8
   1dc10:	bl	1292c <strtoul@plt>
   1dc14:	mov	r6, r0
   1dc18:	ldr	r0, [sp, #8]
   1dc1c:	cmp	r0, #0
   1dc20:	beq	1dc38 <__assert_fail@plt+0xafb8>
   1dc24:	ldr	r1, [pc, #212]	; 1dd00 <__assert_fail@plt+0xb080>
   1dc28:	add	r1, pc, r1
   1dc2c:	bl	12524 <strcmp@plt>
   1dc30:	cmp	r0, #0
   1dc34:	beq	1dc60 <__assert_fail@plt+0xafe0>
   1dc38:	ldr	r3, [pc, #196]	; 1dd04 <__assert_fail@plt+0xb084>
   1dc3c:	cmp	r6, #0
   1dc40:	add	r3, pc, r3
   1dc44:	str	r6, [r3]
   1dc48:	bne	1dc6c <__assert_fail@plt+0xafec>
   1dc4c:	mov	r3, #2
   1dc50:	ldr	r2, [pc, #176]	; 1dd08 <__assert_fail@plt+0xb088>
   1dc54:	add	r2, pc, r2
   1dc58:	str	r3, [r2]
   1dc5c:	b	1dbdc <__assert_fail@plt+0xaf5c>
   1dc60:	ldr	r3, [pc, #164]	; 1dd0c <__assert_fail@plt+0xb08c>
   1dc64:	mov	r6, r3
   1dc68:	str	r3, [r7]
   1dc6c:	bl	125a8 <getuid@plt>
   1dc70:	mov	r7, r0
   1dc74:	bl	12734 <geteuid@plt>
   1dc78:	cmp	r7, r0
   1dc7c:	beq	1dcd0 <__assert_fail@plt+0xb050>
   1dc80:	ldr	r7, [pc, #136]	; 1dd10 <__assert_fail@plt+0xb090>
   1dc84:	ldr	r2, [pc, #136]	; 1dd14 <__assert_fail@plt+0xb094>
   1dc88:	add	r7, pc, r7
   1dc8c:	orr	r3, r6, #16777216	; 0x1000000
   1dc90:	str	r3, [r7]
   1dc94:	ldr	r3, [r4, r2]
   1dc98:	ldr	r4, [r3]
   1dc9c:	bl	128fc <getpid@plt>
   1dca0:	ldr	r3, [pc, #112]	; 1dd18 <__assert_fail@plt+0xb098>
   1dca4:	ldr	r2, [pc, #112]	; 1dd1c <__assert_fail@plt+0xb09c>
   1dca8:	add	r3, pc, r3
   1dcac:	str	r3, [sp]
   1dcb0:	add	r2, pc, r2
   1dcb4:	mov	r1, #1
   1dcb8:	mov	r3, r0
   1dcbc:	mov	r0, r4
   1dcc0:	bl	12ab8 <__fprintf_chk@plt>
   1dcc4:	ldr	r3, [r7]
   1dcc8:	orr	r3, r3, #2
   1dccc:	b	1dc50 <__assert_fail@plt+0xafd0>
   1dcd0:	bl	129ec <getgid@plt>
   1dcd4:	mov	r7, r0
   1dcd8:	bl	12770 <getegid@plt>
   1dcdc:	cmp	r7, r0
   1dce0:	orreq	r3, r6, #2
   1dce4:	bne	1dc80 <__assert_fail@plt+0xb000>
   1dce8:	b	1dc50 <__assert_fail@plt+0xafd0>
   1dcec:	bl	126e0 <__stack_chk_fail@plt>
   1dcf0:	andeq	r6, r1, ip, lsl #3
   1dcf4:	andeq	r0, r0, r8, lsr #5
   1dcf8:	andeq	r6, r1, ip, lsr #28
   1dcfc:	muleq	r0, ip, r4
   1dd00:	strdeq	r3, [r0], -r0
   1dd04:			; <UNDEFINED> instruction: 0x00016db0
   1dd08:	muleq	r1, ip, sp
   1dd0c:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1dd10:	andeq	r6, r1, r8, ror #26
   1dd14:	andeq	r0, r0, ip, lsr #5
   1dd18:			; <UNDEFINED> instruction: 0x000053bc
   1dd1c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   1dd20:	push	{r4, r5, r6, r7, r8, lr}
   1dd24:	sub	sp, sp, #8
   1dd28:	mov	r7, r0
   1dd2c:	mov	r6, r1
   1dd30:	bl	1b6c8 <__assert_fail@plt+0x8a48>
   1dd34:	cmp	r7, #0
   1dd38:	ldr	r8, [pc, #196]	; 1de04 <__assert_fail@plt+0xb184>
   1dd3c:	moveq	r4, #1
   1dd40:	add	r8, pc, r8
   1dd44:	clz	r3, r0
   1dd48:	lsr	r3, r3, #5
   1dd4c:	movne	r4, r3
   1dd50:	cmp	r4, #0
   1dd54:	bne	1ddfc <__assert_fail@plt+0xb17c>
   1dd58:	mov	r5, r0
   1dd5c:	ldr	r0, [r0, #8]
   1dd60:	cmp	r0, #0
   1dd64:	beq	1dd70 <__assert_fail@plt+0xb0f0>
   1dd68:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1dd6c:	str	r4, [r5, #8]
   1dd70:	cmp	r6, #0
   1dd74:	streq	r6, [r5, #8]
   1dd78:	beq	1dd88 <__assert_fail@plt+0xb108>
   1dd7c:	mov	r0, r6
   1dd80:	bl	1b194 <__assert_fail@plt+0x8514>
   1dd84:	str	r6, [r5, #8]
   1dd88:	ldr	r3, [pc, #120]	; 1de08 <__assert_fail@plt+0xb188>
   1dd8c:	ldr	r0, [pc, r3]
   1dd90:	ands	r0, r0, #4
   1dd94:	bne	1dda0 <__assert_fail@plt+0xb120>
   1dd98:	add	sp, sp, #8
   1dd9c:	pop	{r4, r5, r6, r7, r8, pc}
   1dda0:	ldr	r3, [pc, #100]	; 1de0c <__assert_fail@plt+0xb18c>
   1dda4:	ldr	r3, [r8, r3]
   1dda8:	ldr	r4, [r3]
   1ddac:	bl	128fc <getpid@plt>
   1ddb0:	ldr	r2, [pc, #88]	; 1de10 <__assert_fail@plt+0xb190>
   1ddb4:	ldr	r3, [pc, #88]	; 1de14 <__assert_fail@plt+0xb194>
   1ddb8:	add	r2, pc, r2
   1ddbc:	str	r2, [sp, #4]
   1ddc0:	ldr	r2, [pc, #80]	; 1de18 <__assert_fail@plt+0xb198>
   1ddc4:	add	r3, pc, r3
   1ddc8:	str	r3, [sp]
   1ddcc:	add	r2, pc, r2
   1ddd0:	mov	r1, #1
   1ddd4:	mov	r3, r0
   1ddd8:	mov	r0, r4
   1dddc:	bl	12ab8 <__fprintf_chk@plt>
   1dde0:	ldr	r1, [pc, #52]	; 1de1c <__assert_fail@plt+0xb19c>
   1dde4:	mov	r0, r7
   1dde8:	add	r1, pc, r1
   1ddec:	bl	1d7c0 <__assert_fail@plt+0xab40>
   1ddf0:	mov	r0, #0
   1ddf4:	add	sp, sp, #8
   1ddf8:	pop	{r4, r5, r6, r7, r8, pc}
   1ddfc:	mvn	r0, #21
   1de00:	b	1dd98 <__assert_fail@plt+0xb118>
   1de04:	andeq	r6, r1, r4
   1de08:	andeq	r6, r1, r4, ror #24
   1de0c:	andeq	r0, r0, ip, lsr #5
   1de10:	andeq	r3, r0, r4, lsr #14
   1de14:	andeq	r5, r0, r0, lsr #5
   1de18:	andeq	r3, r0, r0, lsl #14
   1de1c:			; <UNDEFINED> instruction: 0x000052bc
   1de20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de24:	mov	r5, r3
   1de28:	ldr	r6, [pc, #496]	; 1e020 <__assert_fail@plt+0xb3a0>
   1de2c:	ldr	r1, [pc, #496]	; 1e024 <__assert_fail@plt+0xb3a4>
   1de30:	add	r6, pc, r6
   1de34:	lsr	r3, r2, #12
   1de38:	ldr	r7, [r6, r1]
   1de3c:	lsl	lr, r2, #12
   1de40:	orr	r3, r3, r5, lsl #20
   1de44:	bic	r1, r5, #4080	; 0xff0
   1de48:	bic	r3, r3, #255	; 0xff
   1de4c:	mov	r4, r2
   1de50:	bic	r1, r1, #15
   1de54:	uxtb	r2, r2
   1de58:	sub	sp, sp, #84	; 0x54
   1de5c:	orr	r2, r3, r2
   1de60:	orr	r1, r1, lr, lsr #20
   1de64:	ldr	ip, [pc, #444]	; 1e028 <__assert_fail@plt+0xb3a8>
   1de68:	ldr	lr, [r7]
   1de6c:	add	ip, pc, ip
   1de70:	mov	r3, #46	; 0x2e
   1de74:	stmib	sp, {r1, r2}
   1de78:	add	r2, sp, #28
   1de7c:	mov	r1, r3
   1de80:	mov	r8, r0
   1de84:	str	r2, [sp, #20]
   1de88:	mov	r0, r2
   1de8c:	str	ip, [sp]
   1de90:	mov	r2, #1
   1de94:	str	lr, [sp, #76]	; 0x4c
   1de98:	ldr	sl, [sp, #120]	; 0x78
   1de9c:	bl	12c5c <__snprintf_chk@plt>
   1dea0:	ldr	r1, [sp, #20]
   1dea4:	mov	r0, r8
   1dea8:	bl	1b518 <__assert_fail@plt+0x8898>
   1deac:	subs	r9, r0, #0
   1deb0:	beq	1ded0 <__assert_fail@plt+0xb250>
   1deb4:	ldr	r2, [sp, #76]	; 0x4c
   1deb8:	ldr	r3, [r7]
   1debc:	mov	r0, r9
   1dec0:	cmp	r2, r3
   1dec4:	bne	1e01c <__assert_fail@plt+0xb39c>
   1dec8:	add	sp, sp, #84	; 0x54
   1decc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ded0:	mov	r0, r8
   1ded4:	bl	1b6e8 <__assert_fail@plt+0x8a68>
   1ded8:	cmp	r0, #0
   1dedc:	movlt	r9, r0
   1dee0:	blt	1deb4 <__assert_fail@plt+0xb234>
   1dee4:	mov	r0, r8
   1dee8:	bl	1b6c8 <__assert_fail@plt+0x8a48>
   1deec:	subs	fp, r0, #0
   1def0:	beq	1df70 <__assert_fail@plt+0xb2f0>
   1def4:	ldr	r3, [pc, #304]	; 1e02c <__assert_fail@plt+0xb3ac>
   1def8:	add	r3, pc, r3
   1defc:	ldr	r3, [r3]
   1df00:	tst	r3, #4
   1df04:	bne	1df1c <__assert_fail@plt+0xb29c>
   1df08:	strd	r4, [fp]
   1df0c:	mov	r1, sl
   1df10:	mov	r0, r8
   1df14:	bl	1dd20 <__assert_fail@plt+0xb0a0>
   1df18:	b	1deb4 <__assert_fail@plt+0xb234>
   1df1c:	ldr	r3, [pc, #268]	; 1e030 <__assert_fail@plt+0xb3b0>
   1df20:	ldr	r3, [r6, r3]
   1df24:	ldr	r6, [r3]
   1df28:	bl	128fc <getpid@plt>
   1df2c:	ldr	r2, [pc, #256]	; 1e034 <__assert_fail@plt+0xb3b4>
   1df30:	ldr	r3, [pc, #256]	; 1e038 <__assert_fail@plt+0xb3b8>
   1df34:	add	r2, pc, r2
   1df38:	str	r2, [sp, #4]
   1df3c:	ldr	r2, [pc, #248]	; 1e03c <__assert_fail@plt+0xb3bc>
   1df40:	add	r3, pc, r3
   1df44:	str	r3, [sp]
   1df48:	add	r2, pc, r2
   1df4c:	mov	r1, #1
   1df50:	mov	r3, r0
   1df54:	mov	r0, r6
   1df58:	bl	12ab8 <__fprintf_chk@plt>
   1df5c:	ldr	r1, [pc, #220]	; 1e040 <__assert_fail@plt+0xb3c0>
   1df60:	mov	r0, r8
   1df64:	add	r1, pc, r1
   1df68:	bl	1d7c0 <__assert_fail@plt+0xab40>
   1df6c:	b	1df08 <__assert_fail@plt+0xb288>
   1df70:	ldr	r3, [pc, #204]	; 1e044 <__assert_fail@plt+0xb3c4>
   1df74:	add	r3, pc, r3
   1df78:	ldr	r3, [r3]
   1df7c:	tst	r3, #4
   1df80:	bne	1dfc0 <__assert_fail@plt+0xb340>
   1df84:	mov	r1, #32
   1df88:	mov	r0, #1
   1df8c:	bl	124dc <calloc@plt>
   1df90:	subs	fp, r0, #0
   1df94:	beq	1e014 <__assert_fail@plt+0xb394>
   1df98:	ldr	r2, [pc, #168]	; 1e048 <__assert_fail@plt+0xb3c8>
   1df9c:	mov	r1, fp
   1dfa0:	add	r2, pc, r2
   1dfa4:	mov	r0, r8
   1dfa8:	bl	1b614 <__assert_fail@plt+0x8994>
   1dfac:	ldr	r1, [pc, #152]	; 1e04c <__assert_fail@plt+0xb3cc>
   1dfb0:	mov	r0, r8
   1dfb4:	add	r1, pc, r1
   1dfb8:	bl	1b6d8 <__assert_fail@plt+0x8a58>
   1dfbc:	b	1def4 <__assert_fail@plt+0xb274>
   1dfc0:	ldr	r3, [pc, #104]	; 1e030 <__assert_fail@plt+0xb3b0>
   1dfc4:	ldr	r3, [r6, r3]
   1dfc8:	ldr	fp, [r3]
   1dfcc:	bl	128fc <getpid@plt>
   1dfd0:	ldr	r2, [pc, #120]	; 1e050 <__assert_fail@plt+0xb3d0>
   1dfd4:	ldr	r3, [pc, #120]	; 1e054 <__assert_fail@plt+0xb3d4>
   1dfd8:	add	r2, pc, r2
   1dfdc:	str	r2, [sp, #4]
   1dfe0:	ldr	r2, [pc, #112]	; 1e058 <__assert_fail@plt+0xb3d8>
   1dfe4:	add	r3, pc, r3
   1dfe8:	str	r3, [sp]
   1dfec:	add	r2, pc, r2
   1dff0:	mov	r1, #1
   1dff4:	mov	r3, r0
   1dff8:	mov	r0, fp
   1dffc:	bl	12ab8 <__fprintf_chk@plt>
   1e000:	ldr	r1, [pc, #84]	; 1e05c <__assert_fail@plt+0xb3dc>
   1e004:	mov	r0, r8
   1e008:	add	r1, pc, r1
   1e00c:	bl	1d7c0 <__assert_fail@plt+0xab40>
   1e010:	b	1df84 <__assert_fail@plt+0xb304>
   1e014:	mvn	r9, #11
   1e018:	b	1deb4 <__assert_fail@plt+0xb234>
   1e01c:	bl	126e0 <__stack_chk_fail@plt>
   1e020:	andeq	r5, r1, r4, lsl pc
   1e024:	andeq	r0, r0, r8, lsr #5
   1e028:	andeq	r5, r0, r4, asr #4
   1e02c:	strdeq	r6, [r1], -r8
   1e030:	andeq	r0, r0, ip, lsr #5
   1e034:	andeq	r3, r0, r8, lsr #11
   1e038:	andeq	r5, r0, r4, lsr #2
   1e03c:	andeq	r3, r0, r4, lsl #11
   1e040:	andeq	r5, r0, ip, ror r1
   1e044:	andeq	r6, r1, ip, ror sl
   1e048:			; <UNDEFINED> instruction: 0xfffff8e4
   1e04c:			; <UNDEFINED> instruction: 0xfffffaf0
   1e050:	andeq	r3, r0, r4, lsl #10
   1e054:	andeq	r5, r0, r0, lsl #1
   1e058:	andeq	r3, r0, r0, ror #9
   1e05c:	andeq	r5, r0, r0, asr #1
   1e060:	push	{r4, r5, r6, r7, r8, r9, lr}
   1e064:	mov	r8, r0
   1e068:	sub	sp, sp, #12
   1e06c:	mov	r0, #0
   1e070:	mov	r9, r1
   1e074:	mov	r7, r2
   1e078:	mov	r5, r3
   1e07c:	bl	1b2b0 <__assert_fail@plt+0x8630>
   1e080:	ldr	r6, [pc, #192]	; 1e148 <__assert_fail@plt+0xb4c8>
   1e084:	add	r6, pc, r6
   1e088:	subs	r4, r0, #0
   1e08c:	beq	1e0d0 <__assert_fail@plt+0xb450>
   1e090:	cmp	r5, #0
   1e094:	beq	1e0a0 <__assert_fail@plt+0xb420>
   1e098:	mov	r1, r5
   1e09c:	bl	1b3f4 <__assert_fail@plt+0x8774>
   1e0a0:	str	r7, [sp]
   1e0a4:	mov	r2, r8
   1e0a8:	mov	r3, r9
   1e0ac:	mov	r0, r4
   1e0b0:	bl	1de20 <__assert_fail@plt+0xb1a0>
   1e0b4:	cmp	r0, #0
   1e0b8:	bne	1e138 <__assert_fail@plt+0xb4b8>
   1e0bc:	ldr	r3, [pc, #136]	; 1e14c <__assert_fail@plt+0xb4cc>
   1e0c0:	add	r3, pc, r3
   1e0c4:	ldr	r3, [r3]
   1e0c8:	tst	r3, #4
   1e0cc:	bne	1e0dc <__assert_fail@plt+0xb45c>
   1e0d0:	mov	r0, r4
   1e0d4:	add	sp, sp, #12
   1e0d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e0dc:	ldr	r3, [pc, #108]	; 1e150 <__assert_fail@plt+0xb4d0>
   1e0e0:	ldr	r3, [r6, r3]
   1e0e4:	ldr	r5, [r3]
   1e0e8:	bl	128fc <getpid@plt>
   1e0ec:	ldr	r2, [pc, #96]	; 1e154 <__assert_fail@plt+0xb4d4>
   1e0f0:	ldr	r3, [pc, #96]	; 1e158 <__assert_fail@plt+0xb4d8>
   1e0f4:	add	r2, pc, r2
   1e0f8:	str	r2, [sp, #4]
   1e0fc:	ldr	r2, [pc, #88]	; 1e15c <__assert_fail@plt+0xb4dc>
   1e100:	add	r3, pc, r3
   1e104:	str	r3, [sp]
   1e108:	add	r2, pc, r2
   1e10c:	mov	r1, #1
   1e110:	mov	r3, r0
   1e114:	mov	r0, r5
   1e118:	bl	12ab8 <__fprintf_chk@plt>
   1e11c:	ldr	r1, [pc, #60]	; 1e160 <__assert_fail@plt+0xb4e0>
   1e120:	mov	r0, r4
   1e124:	add	r1, pc, r1
   1e128:	bl	1d7c0 <__assert_fail@plt+0xab40>
   1e12c:	mov	r0, r4
   1e130:	add	sp, sp, #12
   1e134:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1e138:	mov	r0, r4
   1e13c:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1e140:	mov	r4, #0
   1e144:	b	1e0d0 <__assert_fail@plt+0xb450>
   1e148:	andeq	r5, r1, r0, asr #25
   1e14c:	andeq	r6, r1, r0, lsr r9
   1e150:	andeq	r0, r0, ip, lsr #5
   1e154:	andeq	r3, r0, r8, ror #7
   1e158:	andeq	r4, r0, r4, ror #30
   1e15c:	andeq	r3, r0, r4, asr #7
   1e160:	andeq	r4, r0, ip, lsl #28
   1e164:	push	{r4, lr}
   1e168:	bl	1b6c8 <__assert_fail@plt+0x8a48>
   1e16c:	cmp	r0, #0
   1e170:	ldrne	r0, [r0, #8]
   1e174:	pop	{r4, pc}
   1e178:	ldr	ip, [pc, #228]	; 1e264 <__assert_fail@plt+0xb5e4>
   1e17c:	ldr	r3, [pc, #228]	; 1e268 <__assert_fail@plt+0xb5e8>
   1e180:	add	ip, pc, ip
   1e184:	push	{r4, r5, r6, r7, r8, lr}
   1e188:	sub	sp, sp, #4096	; 0x1000
   1e18c:	ldr	r7, [ip, r3]
   1e190:	sub	sp, sp, #8
   1e194:	add	r4, sp, #8
   1e198:	add	ip, sp, #4096	; 0x1000
   1e19c:	ldr	lr, [r7]
   1e1a0:	add	ip, ip, #4
   1e1a4:	sub	r6, r4, #4
   1e1a8:	mov	r5, r1
   1e1ac:	mov	r8, r2
   1e1b0:	mov	r1, r6
   1e1b4:	mov	r3, #0
   1e1b8:	ldr	r2, [pc, #172]	; 1e26c <__assert_fail@plt+0xb5ec>
   1e1bc:	str	lr, [ip]
   1e1c0:	bl	1c32c <__assert_fail@plt+0x96ac>
   1e1c4:	cmp	r0, #0
   1e1c8:	blt	1e258 <__assert_fail@plt+0xb5d8>
   1e1cc:	add	r4, r4, r0
   1e1d0:	mov	r3, #0
   1e1d4:	mov	r0, r6
   1e1d8:	mov	r1, #47	; 0x2f
   1e1dc:	strb	r3, [r4, #-4]
   1e1e0:	bl	12b3c <strrchr@plt>
   1e1e4:	cmp	r0, #0
   1e1e8:	beq	1e258 <__assert_fail@plt+0xb5d8>
   1e1ec:	add	r4, r0, #1
   1e1f0:	mov	r0, r4
   1e1f4:	bl	12938 <strlen@plt>
   1e1f8:	add	r2, r0, #1
   1e1fc:	cmp	r2, r8
   1e200:	bhi	1e258 <__assert_fail@plt+0xb5d8>
   1e204:	mov	r1, r4
   1e208:	mov	r0, r5
   1e20c:	bl	12674 <memcpy@plt>
   1e210:	mov	r4, #47	; 0x2f
   1e214:	b	1e21c <__assert_fail@plt+0xb59c>
   1e218:	strb	r4, [r0]
   1e21c:	mov	r1, #33	; 0x21
   1e220:	mov	r0, r5
   1e224:	bl	12950 <strchr@plt>
   1e228:	cmp	r0, #0
   1e22c:	bne	1e218 <__assert_fail@plt+0xb598>
   1e230:	add	r3, sp, #4096	; 0x1000
   1e234:	add	r3, r3, #4
   1e238:	ldr	r2, [r3]
   1e23c:	ldr	r3, [r7]
   1e240:	mov	r0, r5
   1e244:	cmp	r2, r3
   1e248:	bne	1e260 <__assert_fail@plt+0xb5e0>
   1e24c:	add	sp, sp, #4096	; 0x1000
   1e250:	add	sp, sp, #8
   1e254:	pop	{r4, r5, r6, r7, r8, pc}
   1e258:	mov	r5, #0
   1e25c:	b	1e230 <__assert_fail@plt+0xb5b0>
   1e260:	bl	126e0 <__stack_chk_fail@plt>
   1e264:	andeq	r5, r1, r4, asr #23
   1e268:	andeq	r0, r0, r8, lsr #5
   1e26c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e270:	ldr	r3, [pc, #336]	; 1e3c8 <__assert_fail@plt+0xb748>
   1e274:	push	{r4, r5, r6, r7, lr}
   1e278:	mov	r5, r1
   1e27c:	ldr	r1, [pc, #328]	; 1e3cc <__assert_fail@plt+0xb74c>
   1e280:	add	r3, pc, r3
   1e284:	ldrb	ip, [r5, #18]
   1e288:	ldr	r6, [r3, r1]
   1e28c:	sub	sp, sp, #284	; 0x11c
   1e290:	and	r1, ip, #251	; 0xfb
   1e294:	cmp	ip, #10
   1e298:	cmpne	r1, #0
   1e29c:	ldr	r1, [r6]
   1e2a0:	str	r1, [sp, #276]	; 0x114
   1e2a4:	bne	1e2e0 <__assert_fail@plt+0xb660>
   1e2a8:	cmp	r2, #0
   1e2ac:	mov	r4, r2
   1e2b0:	beq	1e354 <__assert_fail@plt+0xb6d4>
   1e2b4:	ldrsb	r1, [r2]
   1e2b8:	cmp	r1, #47	; 0x2f
   1e2bc:	beq	1e33c <__assert_fail@plt+0xb6bc>
   1e2c0:	mov	r0, r4
   1e2c4:	bl	12938 <strlen@plt>
   1e2c8:	add	r5, r5, #19
   1e2cc:	mov	r7, r0
   1e2d0:	mov	r0, r5
   1e2d4:	bl	12938 <strlen@plt>
   1e2d8:	cmp	r7, r0
   1e2dc:	bcc	1e2fc <__assert_fail@plt+0xb67c>
   1e2e0:	mov	r0, #0
   1e2e4:	ldr	r2, [sp, #276]	; 0x114
   1e2e8:	ldr	r3, [r6]
   1e2ec:	cmp	r2, r3
   1e2f0:	bne	1e3c4 <__assert_fail@plt+0xb744>
   1e2f4:	add	sp, sp, #284	; 0x11c
   1e2f8:	pop	{r4, r5, r6, r7, pc}
   1e2fc:	mov	r0, r4
   1e300:	mov	r2, r7
   1e304:	mov	r1, r5
   1e308:	bl	12c14 <strncmp@plt>
   1e30c:	cmp	r0, #0
   1e310:	bne	1e2e0 <__assert_fail@plt+0xb660>
   1e314:	bl	128e4 <__ctype_b_loc@plt>
   1e318:	ldrsb	r3, [r5, r7]
   1e31c:	cmp	r3, #112	; 0x70
   1e320:	ldr	r2, [r0]
   1e324:	beq	1e3a4 <__assert_fail@plt+0xb724>
   1e328:	lsl	r3, r3, #1
   1e32c:	ldrh	r0, [r2, r3]
   1e330:	lsr	r0, r0, #11
   1e334:	and	r0, r0, #1
   1e338:	b	1e2e4 <__assert_fail@plt+0xb664>
   1e33c:	mov	r0, r2
   1e340:	bl	12b3c <strrchr@plt>
   1e344:	cmp	r0, #0
   1e348:	beq	1e2e4 <__assert_fail@plt+0xb664>
   1e34c:	add	r4, r0, #1
   1e350:	b	1e2c0 <__assert_fail@plt+0xb640>
   1e354:	ldr	r2, [pc, #116]	; 1e3d0 <__assert_fail@plt+0xb750>
   1e358:	add	r5, r5, #19
   1e35c:	add	r2, pc, r2
   1e360:	ldr	r3, [pc, #108]	; 1e3d4 <__assert_fail@plt+0xb754>
   1e364:	stm	sp, {r2, r5}
   1e368:	add	r5, sp, #12
   1e36c:	mov	r1, r3
   1e370:	mov	r2, #1
   1e374:	mov	r7, r0
   1e378:	mov	r0, r5
   1e37c:	bl	12c5c <__snprintf_chk@plt>
   1e380:	mov	r0, r7
   1e384:	bl	12bb4 <dirfd@plt>
   1e388:	mov	r3, r4
   1e38c:	mov	r1, r5
   1e390:	mov	r2, #4
   1e394:	bl	12620 <faccessat@plt>
   1e398:	clz	r0, r0
   1e39c:	lsr	r0, r0, #5
   1e3a0:	b	1e2e4 <__assert_fail@plt+0xb664>
   1e3a4:	add	r5, r5, r7
   1e3a8:	ldrsb	r1, [r5, #1]
   1e3ac:	lsl	r1, r1, #1
   1e3b0:	ldrh	r1, [r2, r1]
   1e3b4:	tst	r1, #2048	; 0x800
   1e3b8:	movne	r0, #1
   1e3bc:	bne	1e2e4 <__assert_fail@plt+0xb664>
   1e3c0:	b	1e328 <__assert_fail@plt+0xb6a8>
   1e3c4:	bl	126e0 <__stack_chk_fail@plt>
   1e3c8:	andeq	r5, r1, r4, asr #21
   1e3cc:	andeq	r0, r0, r8, lsr #5
   1e3d0:	muleq	r0, r8, sp
   1e3d4:	andeq	r0, r0, r6, lsl #2
   1e3d8:	push	{r4, r5, r6, lr}
   1e3dc:	mov	r6, r1
   1e3e0:	mov	r1, #0
   1e3e4:	bl	1c178 <__assert_fail@plt+0x94f8>
   1e3e8:	subs	r4, r0, #0
   1e3ec:	movne	r5, #0
   1e3f0:	bne	1e404 <__assert_fail@plt+0xb784>
   1e3f4:	b	1e428 <__assert_fail@plt+0xb7a8>
   1e3f8:	bl	1e270 <__assert_fail@plt+0xb5f0>
   1e3fc:	cmp	r0, #0
   1e400:	addne	r5, r5, #1
   1e404:	mov	r0, r4
   1e408:	bl	1d968 <__assert_fail@plt+0xace8>
   1e40c:	mov	r2, r6
   1e410:	subs	r1, r0, #0
   1e414:	mov	r0, r4
   1e418:	bne	1e3f8 <__assert_fail@plt+0xb778>
   1e41c:	bl	12c50 <closedir@plt>
   1e420:	mov	r0, r5
   1e424:	pop	{r4, r5, r6, pc}
   1e428:	mov	r5, r4
   1e42c:	mov	r0, r5
   1e430:	pop	{r4, r5, r6, pc}
   1e434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e438:	mov	r7, #0
   1e43c:	ldr	r9, [pc, #344]	; 1e59c <__assert_fail@plt+0xb91c>
   1e440:	ldr	r3, [pc, #344]	; 1e5a0 <__assert_fail@plt+0xb920>
   1e444:	add	r9, pc, r9
   1e448:	sub	sp, sp, #36	; 0x24
   1e44c:	ldr	sl, [r9, r3]
   1e450:	mov	r8, r1
   1e454:	mov	r1, r7
   1e458:	ldr	r3, [sl]
   1e45c:	str	r7, [sp, #16]
   1e460:	str	r3, [sp, #28]
   1e464:	str	r7, [sp, #20]
   1e468:	mov	r6, r0
   1e46c:	bl	1c178 <__assert_fail@plt+0x94f8>
   1e470:	subs	r5, r0, #0
   1e474:	beq	1e58c <__assert_fail@plt+0xb90c>
   1e478:	ldr	r7, [pc, #292]	; 1e5a4 <__assert_fail@plt+0xb924>
   1e47c:	ldr	fp, [pc, #292]	; 1e5a8 <__assert_fail@plt+0xb928>
   1e480:	add	r7, pc, r7
   1e484:	add	fp, pc, fp
   1e488:	mov	r0, r5
   1e48c:	bl	1d968 <__assert_fail@plt+0xace8>
   1e490:	subs	r4, r0, #0
   1e494:	beq	1e4f8 <__assert_fail@plt+0xb878>
   1e498:	mov	r2, #0
   1e49c:	mov	r1, r4
   1e4a0:	mov	r0, r5
   1e4a4:	bl	1e270 <__assert_fail@plt+0xb5f0>
   1e4a8:	cmp	r0, #0
   1e4ac:	beq	1e488 <__assert_fail@plt+0xb808>
   1e4b0:	add	r4, r4, #19
   1e4b4:	mov	r3, r4
   1e4b8:	mov	r2, r7
   1e4bc:	add	r1, sp, #12
   1e4c0:	mov	r0, r6
   1e4c4:	bl	1cd30 <__assert_fail@plt+0xa0b0>
   1e4c8:	cmp	r0, #0
   1e4cc:	bne	1e488 <__assert_fail@plt+0xb808>
   1e4d0:	ldr	r3, [sp, #12]
   1e4d4:	cmp	r3, r8
   1e4d8:	bne	1e488 <__assert_fail@plt+0xb808>
   1e4dc:	mov	r3, r4
   1e4e0:	mov	r2, fp
   1e4e4:	add	r1, sp, #16
   1e4e8:	mov	r0, r6
   1e4ec:	bl	1cf88 <__assert_fail@plt+0xa308>
   1e4f0:	cmp	r0, #0
   1e4f4:	bne	1e488 <__assert_fail@plt+0xb808>
   1e4f8:	mov	r0, r5
   1e4fc:	bl	12c50 <closedir@plt>
   1e500:	ldr	r3, [pc, #164]	; 1e5ac <__assert_fail@plt+0xb92c>
   1e504:	add	r3, pc, r3
   1e508:	ldr	r3, [r3]
   1e50c:	tst	r3, #4
   1e510:	bne	1e530 <__assert_fail@plt+0xb8b0>
   1e514:	ldrd	r0, [sp, #16]
   1e518:	ldr	r2, [sp, #28]
   1e51c:	ldr	r3, [sl]
   1e520:	cmp	r2, r3
   1e524:	bne	1e598 <__assert_fail@plt+0xb918>
   1e528:	add	sp, sp, #36	; 0x24
   1e52c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e530:	ldr	r3, [pc, #120]	; 1e5b0 <__assert_fail@plt+0xb930>
   1e534:	ldr	r3, [r9, r3]
   1e538:	ldr	r4, [r3]
   1e53c:	bl	128fc <getpid@plt>
   1e540:	ldr	r2, [pc, #108]	; 1e5b4 <__assert_fail@plt+0xb934>
   1e544:	ldr	r3, [pc, #108]	; 1e5b8 <__assert_fail@plt+0xb938>
   1e548:	add	r2, pc, r2
   1e54c:	str	r2, [sp, #4]
   1e550:	ldr	r2, [pc, #100]	; 1e5bc <__assert_fail@plt+0xb93c>
   1e554:	add	r3, pc, r3
   1e558:	str	r3, [sp]
   1e55c:	add	r2, pc, r2
   1e560:	mov	r1, #1
   1e564:	mov	r3, r0
   1e568:	mov	r0, r4
   1e56c:	bl	12ab8 <__fprintf_chk@plt>
   1e570:	ldr	r1, [pc, #72]	; 1e5c0 <__assert_fail@plt+0xb940>
   1e574:	mov	r2, r8
   1e578:	mov	r0, r6
   1e57c:	ldr	r3, [sp, #16]
   1e580:	add	r1, pc, r1
   1e584:	bl	1d7c0 <__assert_fail@plt+0xab40>
   1e588:	b	1e514 <__assert_fail@plt+0xb894>
   1e58c:	mov	r0, r7
   1e590:	mov	r1, r7
   1e594:	b	1e518 <__assert_fail@plt+0xb898>
   1e598:	bl	126e0 <__stack_chk_fail@plt>
   1e59c:	andeq	r5, r1, r0, lsl #18
   1e5a0:	andeq	r0, r0, r8, lsr #5
   1e5a4:	andeq	r4, r0, r0, lsl #25
   1e5a8:	muleq	r0, ip, sp
   1e5ac:	andeq	r6, r1, ip, ror #9
   1e5b0:	andeq	r0, r0, ip, lsr #5
   1e5b4:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   1e5b8:	andeq	r4, r0, r0, lsl fp
   1e5bc:	andeq	r2, r0, r0, ror pc
   1e5c0:	muleq	r0, r0, fp
   1e5c4:	ldr	r1, [pc, #112]	; 1e63c <__assert_fail@plt+0xb9bc>
   1e5c8:	push	{r4, r5, r6, lr}
   1e5cc:	add	r1, pc, r1
   1e5d0:	bl	1c178 <__assert_fail@plt+0x94f8>
   1e5d4:	subs	r5, r0, #0
   1e5d8:	beq	1e634 <__assert_fail@plt+0xb9b4>
   1e5dc:	mov	r4, #0
   1e5e0:	b	1e5f4 <__assert_fail@plt+0xb974>
   1e5e4:	cmp	r4, #0
   1e5e8:	bne	1e618 <__assert_fail@plt+0xb998>
   1e5ec:	bl	126d4 <strdup@plt>
   1e5f0:	mov	r4, r0
   1e5f4:	mov	r0, r5
   1e5f8:	bl	1d968 <__assert_fail@plt+0xace8>
   1e5fc:	cmp	r0, #0
   1e600:	add	r0, r0, #19
   1e604:	bne	1e5e4 <__assert_fail@plt+0xb964>
   1e608:	mov	r0, r5
   1e60c:	bl	12c50 <closedir@plt>
   1e610:	mov	r0, r4
   1e614:	pop	{r4, r5, r6, pc}
   1e618:	mov	r0, r4
   1e61c:	bl	125d8 <free@plt>
   1e620:	mov	r4, #0
   1e624:	mov	r0, r5
   1e628:	bl	12c50 <closedir@plt>
   1e62c:	mov	r0, r4
   1e630:	pop	{r4, r5, r6, pc}
   1e634:	mov	r4, r5
   1e638:	b	1e610 <__assert_fail@plt+0xb990>
   1e63c:	andeq	r3, r0, r4, asr #2
   1e640:	push	{r4, r5, r6, r7, r8, lr}
   1e644:	mov	r3, #0
   1e648:	mov	r7, r0
   1e64c:	mov	r4, r1
   1e650:	mov	r6, r2
   1e654:	bl	1c32c <__assert_fail@plt+0x96ac>
   1e658:	subs	r5, r0, #0
   1e65c:	ble	1e6e8 <__assert_fail@plt+0xba68>
   1e660:	add	r3, r5, #16
   1e664:	cmp	r3, r6
   1e668:	bhi	1e6e8 <__assert_fail@plt+0xba68>
   1e66c:	mov	r3, #0
   1e670:	mov	r0, r7
   1e674:	strb	r3, [r4, r5]
   1e678:	bl	1b50c <__assert_fail@plt+0x888c>
   1e67c:	add	r6, r5, #1
   1e680:	subs	r7, r0, #0
   1e684:	beq	1e6f4 <__assert_fail@plt+0xba74>
   1e688:	bl	12938 <strlen@plt>
   1e68c:	mov	r2, r6
   1e690:	mov	r1, r4
   1e694:	mov	r5, r0
   1e698:	add	r0, r0, #15
   1e69c:	add	r0, r4, r0
   1e6a0:	bl	125cc <memmove@plt>
   1e6a4:	mov	r2, r5
   1e6a8:	mov	r1, r7
   1e6ac:	mov	r0, r4
   1e6b0:	bl	12674 <memcpy@plt>
   1e6b4:	add	r3, r4, r5
   1e6b8:	ldr	ip, [pc, #76]	; 1e70c <__assert_fail@plt+0xba8c>
   1e6bc:	add	ip, pc, ip
   1e6c0:	ldm	ip!, {r0, r1, r2}
   1e6c4:	ldrh	lr, [ip]
   1e6c8:	ldrb	ip, [ip, #2]
   1e6cc:	str	r0, [r3]
   1e6d0:	str	r1, [r3, #4]
   1e6d4:	str	r2, [r3, #8]
   1e6d8:	strh	lr, [r3, #12]
   1e6dc:	strb	ip, [r3, #14]
   1e6e0:	mov	r0, r4
   1e6e4:	pop	{r4, r5, r6, r7, r8, pc}
   1e6e8:	mov	r4, #0
   1e6ec:	mov	r0, r4
   1e6f0:	pop	{r4, r5, r6, r7, r8, pc}
   1e6f4:	mov	r2, r6
   1e6f8:	mov	r1, r4
   1e6fc:	add	r0, r4, #15
   1e700:	bl	125cc <memmove@plt>
   1e704:	mov	r3, r4
   1e708:	b	1e6b8 <__assert_fail@plt+0xba38>
   1e70c:	andeq	r4, r0, r0, ror sl
   1e710:	ldr	r3, [pc, #340]	; 1e86c <__assert_fail@plt+0xbbec>
   1e714:	ldr	ip, [pc, #340]	; 1e870 <__assert_fail@plt+0xbbf0>
   1e718:	add	r3, pc, r3
   1e71c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e720:	sub	sp, sp, #4096	; 0x1000
   1e724:	ldr	ip, [r3, ip]
   1e728:	sub	sp, sp, #20
   1e72c:	cmp	r2, #0
   1e730:	clz	r0, r1
   1e734:	lsr	r0, r0, #5
   1e738:	add	r3, sp, #4096	; 0x1000
   1e73c:	movne	r5, r0
   1e740:	moveq	r5, #1
   1e744:	ldr	r0, [ip]
   1e748:	add	r3, r3, #12
   1e74c:	cmp	r5, #0
   1e750:	str	ip, [sp, #4]
   1e754:	str	r0, [r3]
   1e758:	bne	1e860 <__assert_fail@plt+0xbbe0>
   1e75c:	str	r5, [r2]
   1e760:	ldrsb	r3, [r1]
   1e764:	mov	r7, r2
   1e768:	mov	sl, r1
   1e76c:	cmp	r3, #0
   1e770:	beq	1e858 <__assert_fail@plt+0xbbd8>
   1e774:	mov	r0, r1
   1e778:	bl	12938 <strlen@plt>
   1e77c:	add	r3, r0, #11
   1e780:	cmp	r3, #4096	; 0x1000
   1e784:	mov	r4, r0
   1e788:	bhi	1e858 <__assert_fail@plt+0xbbd8>
   1e78c:	ldr	r9, [pc, #224]	; 1e874 <__assert_fail@plt+0xbbf4>
   1e790:	ldr	r8, [pc, #224]	; 1e878 <__assert_fail@plt+0xbbf8>
   1e794:	add	r9, pc, r9
   1e798:	add	fp, sp, #12
   1e79c:	mov	r3, r9
   1e7a0:	add	ip, sl, r4
   1e7a4:	ldm	r3!, {r0, r1}
   1e7a8:	mov	r2, r8
   1e7ac:	str	r0, [sl, r4]
   1e7b0:	ldrh	r0, [r3]
   1e7b4:	ldrb	r3, [r3, #2]
   1e7b8:	str	r1, [ip, #4]
   1e7bc:	strh	r0, [ip, #8]
   1e7c0:	strb	r3, [ip, #10]
   1e7c4:	mov	r1, fp
   1e7c8:	mov	r0, sl
   1e7cc:	bl	12764 <readlink@plt>
   1e7d0:	strb	r5, [sl, r4]
   1e7d4:	mov	r1, #47	; 0x2f
   1e7d8:	mov	r6, r0
   1e7dc:	mov	r0, sl
   1e7e0:	bl	12b3c <strrchr@plt>
   1e7e4:	cmp	r0, #0
   1e7e8:	beq	1e850 <__assert_fail@plt+0xbbd0>
   1e7ec:	cmp	r6, #0
   1e7f0:	strb	r5, [r0]
   1e7f4:	sub	r4, r0, sl
   1e7f8:	ble	1e79c <__assert_fail@plt+0xbb1c>
   1e7fc:	mov	r2, #0
   1e800:	mov	r0, fp
   1e804:	strb	r2, [fp, r6]
   1e808:	bl	12a34 <__xpg_basename@plt>
   1e80c:	cmp	r0, #0
   1e810:	beq	1e858 <__assert_fail@plt+0xbbd8>
   1e814:	bl	126d4 <strdup@plt>
   1e818:	cmp	r0, #0
   1e81c:	str	r0, [r7]
   1e820:	movne	r0, #0
   1e824:	mvneq	r0, #11
   1e828:	add	r3, sp, #4096	; 0x1000
   1e82c:	add	r3, r3, #12
   1e830:	ldr	r2, [r3]
   1e834:	ldr	r3, [sp, #4]
   1e838:	ldr	r3, [r3]
   1e83c:	cmp	r2, r3
   1e840:	bne	1e868 <__assert_fail@plt+0xbbe8>
   1e844:	add	sp, sp, #4096	; 0x1000
   1e848:	add	sp, sp, #20
   1e84c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e850:	cmp	r6, #0
   1e854:	bgt	1e7fc <__assert_fail@plt+0xbb7c>
   1e858:	mov	r0, #1
   1e85c:	b	1e828 <__assert_fail@plt+0xbba8>
   1e860:	mvn	r0, #21
   1e864:	b	1e828 <__assert_fail@plt+0xbba8>
   1e868:	bl	126e0 <__stack_chk_fail@plt>
   1e86c:	andeq	r5, r1, ip, lsr #12
   1e870:	andeq	r0, r0, r8, lsr #5
   1e874:	andeq	r4, r0, r8, lsr #19
   1e878:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e87c:	ldr	r3, [pc, #312]	; 1e9bc <__assert_fail@plt+0xbd3c>
   1e880:	ldr	r2, [pc, #312]	; 1e9c0 <__assert_fail@plt+0xbd40>
   1e884:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e888:	add	r3, pc, r3
   1e88c:	sub	sp, sp, #4096	; 0x1000
   1e890:	sub	sp, sp, #28
   1e894:	ldr	r2, [r3, r2]
   1e898:	add	r6, sp, #24
   1e89c:	mov	r1, r6
   1e8a0:	mov	ip, r2
   1e8a4:	str	r2, [sp, #4]
   1e8a8:	mov	r2, #0
   1e8ac:	str	r2, [r1, #-8]!
   1e8b0:	ldr	r2, [pc, #268]	; 1e9c4 <__assert_fail@plt+0xbd44>
   1e8b4:	add	r3, sp, #4096	; 0x1000
   1e8b8:	ldr	ip, [ip]
   1e8bc:	add	r3, r3, #20
   1e8c0:	add	r2, pc, r2
   1e8c4:	str	ip, [r3]
   1e8c8:	mov	r7, r0
   1e8cc:	bl	1cca4 <__assert_fail@plt+0xa024>
   1e8d0:	cmp	r0, #0
   1e8d4:	bne	1e8e4 <__assert_fail@plt+0xbc64>
   1e8d8:	ldr	r0, [r6, #-8]
   1e8dc:	cmp	r0, #1
   1e8e0:	beq	1e97c <__assert_fail@plt+0xbcfc>
   1e8e4:	mov	r2, #4096	; 0x1000
   1e8e8:	sub	r1, r6, #4
   1e8ec:	mov	r0, r7
   1e8f0:	bl	1e640 <__assert_fail@plt+0xb9c0>
   1e8f4:	subs	r9, r0, #0
   1e8f8:	beq	1e978 <__assert_fail@plt+0xbcf8>
   1e8fc:	ldr	r8, [pc, #196]	; 1e9c8 <__assert_fail@plt+0xbd48>
   1e900:	ldr	r3, [pc, #196]	; 1e9cc <__assert_fail@plt+0xbd4c>
   1e904:	add	r8, pc, r8
   1e908:	add	sl, sp, #12
   1e90c:	add	r5, r8, #20
   1e910:	add	r3, pc, r3
   1e914:	str	r3, [sp]
   1e918:	mov	r2, sl
   1e91c:	mov	r1, r9
   1e920:	mov	r0, r7
   1e924:	bl	1e710 <__assert_fail@plt+0xba90>
   1e928:	cmp	r0, #0
   1e92c:	bne	1e978 <__assert_fail@plt+0xbcf8>
   1e930:	ldr	r4, [r6, #-12]
   1e934:	ldr	r1, [sp]
   1e938:	mov	r0, r4
   1e93c:	bl	12524 <strcmp@plt>
   1e940:	add	fp, r8, #4
   1e944:	cmp	r0, #0
   1e948:	beq	1e968 <__assert_fail@plt+0xbce8>
   1e94c:	cmp	fp, r5
   1e950:	beq	1e9a4 <__assert_fail@plt+0xbd24>
   1e954:	ldr	r1, [fp], #4
   1e958:	mov	r0, r4
   1e95c:	bl	12524 <strcmp@plt>
   1e960:	cmp	r0, #0
   1e964:	bne	1e94c <__assert_fail@plt+0xbccc>
   1e968:	mov	r3, #1
   1e96c:	mov	r0, r4
   1e970:	str	r3, [r6, #-8]
   1e974:	bl	125d8 <free@plt>
   1e978:	ldr	r0, [r6, #-8]
   1e97c:	add	r3, sp, #4096	; 0x1000
   1e980:	add	r3, r3, #20
   1e984:	ldr	r2, [r3]
   1e988:	ldr	r3, [sp, #4]
   1e98c:	ldr	r3, [r3]
   1e990:	cmp	r2, r3
   1e994:	bne	1e9b8 <__assert_fail@plt+0xbd38>
   1e998:	add	sp, sp, #4096	; 0x1000
   1e99c:	add	sp, sp, #28
   1e9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9a4:	mov	r3, #0
   1e9a8:	mov	r0, r4
   1e9ac:	str	r3, [r6, #-8]
   1e9b0:	bl	125d8 <free@plt>
   1e9b4:	b	1e918 <__assert_fail@plt+0xbc98>
   1e9b8:	bl	126e0 <__stack_chk_fail@plt>
   1e9bc:			; <UNDEFINED> instruction: 0x000154bc
   1e9c0:	andeq	r0, r0, r8, lsr #5
   1e9c4:	andeq	r2, r0, r4, lsl #31
   1e9c8:	andeq	r5, r1, r4, lsl #6
   1e9cc:	andeq	r2, r0, r8, lsr #29
   1e9d0:	ldr	ip, [pc, #272]	; 1eae8 <__assert_fail@plt+0xbe68>
   1e9d4:	push	{r4, r5, r6, r7, lr}
   1e9d8:	add	ip, pc, ip
   1e9dc:	ldr	lr, [pc, #264]	; 1eaec <__assert_fail@plt+0xbe6c>
   1e9e0:	sub	sp, sp, #12
   1e9e4:	mov	r3, #0
   1e9e8:	ldr	r4, [ip, lr]
   1e9ec:	mov	r5, r2
   1e9f0:	mov	r2, ip
   1e9f4:	ldr	ip, [r4]
   1e9f8:	mov	r2, r3
   1e9fc:	str	r3, [sp]
   1ea00:	str	ip, [sp, #4]
   1ea04:	bl	1e060 <__assert_fail@plt+0xb3e0>
   1ea08:	subs	r7, r0, #0
   1ea0c:	beq	1ea8c <__assert_fail@plt+0xbe0c>
   1ea10:	ldr	r2, [pc, #216]	; 1eaf0 <__assert_fail@plt+0xbe70>
   1ea14:	mov	r1, sp
   1ea18:	add	r2, pc, r2
   1ea1c:	bl	1c690 <__assert_fail@plt+0x9a10>
   1ea20:	cmp	r0, #0
   1ea24:	ble	1ea8c <__assert_fail@plt+0xbe0c>
   1ea28:	ldr	r6, [sp]
   1ea2c:	cmp	r6, #0
   1ea30:	beq	1ea8c <__assert_fail@plt+0xbe0c>
   1ea34:	ldr	r1, [pc, #184]	; 1eaf4 <__assert_fail@plt+0xbe74>
   1ea38:	mov	r2, #4
   1ea3c:	add	r1, pc, r1
   1ea40:	mov	r0, r6
   1ea44:	bl	12c14 <strncmp@plt>
   1ea48:	cmp	r0, #0
   1ea4c:	bne	1eac4 <__assert_fail@plt+0xbe44>
   1ea50:	add	r0, r6, #4
   1ea54:	mov	r1, #45	; 0x2d
   1ea58:	bl	12b3c <strrchr@plt>
   1ea5c:	cmp	r0, #0
   1ea60:	beq	1ea8c <__assert_fail@plt+0xbe0c>
   1ea64:	ldrsb	r6, [r0, #1]
   1ea68:	mov	r0, r7
   1ea6c:	adds	r6, r6, #0
   1ea70:	movne	r6, #1
   1ea74:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1ea78:	cmp	r5, #0
   1ea7c:	bne	1eaa0 <__assert_fail@plt+0xbe20>
   1ea80:	ldr	r0, [sp]
   1ea84:	bl	125d8 <free@plt>
   1ea88:	b	1eaa8 <__assert_fail@plt+0xbe28>
   1ea8c:	mov	r6, #0
   1ea90:	mov	r0, r7
   1ea94:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1ea98:	cmp	r5, #0
   1ea9c:	beq	1ea80 <__assert_fail@plt+0xbe00>
   1eaa0:	ldr	r3, [sp]
   1eaa4:	str	r3, [r5]
   1eaa8:	ldr	r2, [sp, #4]
   1eaac:	ldr	r3, [r4]
   1eab0:	mov	r0, r6
   1eab4:	cmp	r2, r3
   1eab8:	bne	1eae4 <__assert_fail@plt+0xbe64>
   1eabc:	add	sp, sp, #12
   1eac0:	pop	{r4, r5, r6, r7, pc}
   1eac4:	ldr	r1, [pc, #44]	; 1eaf8 <__assert_fail@plt+0xbe78>
   1eac8:	mov	r0, r6
   1eacc:	mov	r2, #17
   1ead0:	add	r1, pc, r1
   1ead4:	bl	12c14 <strncmp@plt>
   1ead8:	clz	r6, r0
   1eadc:	lsr	r6, r6, #5
   1eae0:	b	1ea90 <__assert_fail@plt+0xbe10>
   1eae4:	bl	126e0 <__stack_chk_fail@plt>
   1eae8:	andeq	r5, r1, ip, ror #6
   1eaec:	andeq	r0, r0, r8, lsr #5
   1eaf0:	andeq	r2, r0, r4, ror #30
   1eaf4:	andeq	r4, r0, ip, lsl #14
   1eaf8:	andeq	r4, r0, r0, lsl #13
   1eafc:	ldr	ip, [pc, #372]	; 1ec78 <__assert_fail@plt+0xbff8>
   1eb00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb04:	add	ip, pc, ip
   1eb08:	ldr	lr, [pc, #364]	; 1ec7c <__assert_fail@plt+0xbffc>
   1eb0c:	sub	sp, sp, #4096	; 0x1000
   1eb10:	sub	sp, sp, #28
   1eb14:	mov	r8, r1
   1eb18:	mov	r7, r2
   1eb1c:	ldr	r1, [ip, lr]
   1eb20:	mov	r2, ip
   1eb24:	add	r2, sp, #4160	; 0x1040
   1eb28:	mov	r6, r3
   1eb2c:	ldr	r5, [r2]
   1eb30:	add	r2, sp, #4096	; 0x1000
   1eb34:	ldr	r3, [r1]
   1eb38:	add	r2, r2, #20
   1eb3c:	str	r1, [sp, #8]
   1eb40:	mov	r9, r0
   1eb44:	str	r3, [r2]
   1eb48:	bl	1b6c8 <__assert_fail@plt+0x8a48>
   1eb4c:	subs	r4, r0, #0
   1eb50:	beq	1ec64 <__assert_fail@plt+0xbfe4>
   1eb54:	ldrb	r3, [r4, #28]
   1eb58:	tst	r3, #2
   1eb5c:	bne	1ec64 <__assert_fail@plt+0xbfe4>
   1eb60:	ands	sl, r3, #1
   1eb64:	beq	1ebd0 <__assert_fail@plt+0xbf50>
   1eb68:	cmp	r8, #0
   1eb6c:	mov	r0, #0
   1eb70:	ldrne	r3, [r4, #12]
   1eb74:	strne	r3, [r8]
   1eb78:	cmp	r7, #0
   1eb7c:	ldrne	r3, [r4, #16]
   1eb80:	strne	r3, [r7]
   1eb84:	cmp	r6, #0
   1eb88:	ldrne	r3, [r4, #20]
   1eb8c:	strne	r3, [r6]
   1eb90:	cmp	r5, #0
   1eb94:	ldrne	r3, [r4, #24]
   1eb98:	strne	r3, [r5]
   1eb9c:	ldrb	r3, [r4, #28]
   1eba0:	bic	r3, r3, #2
   1eba4:	strb	r3, [r4, #28]
   1eba8:	add	r3, sp, #4096	; 0x1000
   1ebac:	add	r3, r3, #20
   1ebb0:	ldr	r2, [r3]
   1ebb4:	ldr	r3, [sp, #8]
   1ebb8:	ldr	r3, [r3]
   1ebbc:	cmp	r2, r3
   1ebc0:	bne	1ec74 <__assert_fail@plt+0xbff4>
   1ebc4:	add	sp, sp, #4096	; 0x1000
   1ebc8:	add	sp, sp, #28
   1ebcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebd0:	orr	r3, r3, #2
   1ebd4:	strb	r3, [r4, #28]
   1ebd8:	ldr	r3, [pc, #160]	; 1ec80 <__assert_fail@plt+0xc000>
   1ebdc:	add	r2, sp, #24
   1ebe0:	add	fp, sp, #20
   1ebe4:	str	r2, [sp, #12]
   1ebe8:	mov	r0, r9
   1ebec:	mov	r1, fp
   1ebf0:	add	r3, pc, r3
   1ebf4:	ldr	r2, [pc, #136]	; 1ec84 <__assert_fail@plt+0xc004>
   1ebf8:	bl	1c32c <__assert_fail@plt+0x96ac>
   1ebfc:	cmp	r0, #0
   1ec00:	blt	1eba8 <__assert_fail@plt+0xbf28>
   1ec04:	ldr	r2, [sp, #12]
   1ec08:	mov	r1, #47	; 0x2f
   1ec0c:	add	r3, r2, r0
   1ec10:	mov	r0, fp
   1ec14:	strb	sl, [r3, #-4]
   1ec18:	bl	12b3c <strrchr@plt>
   1ec1c:	cmp	r0, #0
   1ec20:	beq	1ec6c <__assert_fail@plt+0xbfec>
   1ec24:	ldr	r1, [pc, #92]	; 1ec88 <__assert_fail@plt+0xc008>
   1ec28:	add	r2, r4, #24
   1ec2c:	add	r3, r4, #20
   1ec30:	str	r2, [sp, #4]
   1ec34:	str	r3, [sp]
   1ec38:	add	r0, r0, #1
   1ec3c:	add	r3, r4, #16
   1ec40:	add	r2, r4, #12
   1ec44:	add	r1, pc, r1
   1ec48:	bl	12b6c <sscanf@plt>
   1ec4c:	cmp	r0, #4
   1ec50:	bne	1ec6c <__assert_fail@plt+0xbfec>
   1ec54:	ldrb	r3, [r4, #28]
   1ec58:	orr	r3, r3, #1
   1ec5c:	strb	r3, [r4, #28]
   1ec60:	b	1eb68 <__assert_fail@plt+0xbee8>
   1ec64:	mvn	r0, #21
   1ec68:	b	1eba8 <__assert_fail@plt+0xbf28>
   1ec6c:	mvn	r0, #0
   1ec70:	b	1eba8 <__assert_fail@plt+0xbf28>
   1ec74:	bl	126e0 <__stack_chk_fail@plt>
   1ec78:	andeq	r5, r1, r0, asr #4
   1ec7c:	andeq	r0, r0, r8, lsr #5
   1ec80:	ldrdeq	r3, [r0], -r8
   1ec84:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1ec88:	andeq	r4, r0, r0, lsr #10
   1ec8c:	ldr	ip, [pc, #288]	; 1edb4 <__assert_fail@plt+0xc134>
   1ec90:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ec94:	add	ip, pc, ip
   1ec98:	ldr	lr, [pc, #280]	; 1edb8 <__assert_fail@plt+0xc138>
   1ec9c:	sub	sp, sp, #36	; 0x24
   1eca0:	mov	r6, #0
   1eca4:	ldr	r5, [ip, lr]
   1eca8:	mov	r7, r1
   1ecac:	mov	r4, r2
   1ecb0:	ldr	lr, [r5]
   1ecb4:	mov	r2, r6
   1ecb8:	str	r6, [sp]
   1ecbc:	mov	r8, r3
   1ecc0:	add	r1, sp, #24
   1ecc4:	mov	r3, r6
   1ecc8:	str	lr, [sp, #28]
   1eccc:	mov	r9, r0
   1ecd0:	ldr	r6, [sp, #64]	; 0x40
   1ecd4:	bl	1eafc <__assert_fail@plt+0xbe7c>
   1ecd8:	cmp	r0, #0
   1ecdc:	bne	1ed4c <__assert_fail@plt+0xc0cc>
   1ece0:	mov	r0, r9
   1ece4:	bl	1b50c <__assert_fail@plt+0x888c>
   1ece8:	cmp	r0, #0
   1ecec:	beq	1ed68 <__assert_fail@plt+0xc0e8>
   1ecf0:	cmp	r6, #0
   1ecf4:	ldr	r1, [sp, #24]
   1ecf8:	beq	1ed7c <__assert_fail@plt+0xc0fc>
   1ecfc:	ldr	r2, [pc, #184]	; 1edbc <__assert_fail@plt+0xc13c>
   1ed00:	ldr	r3, [pc, #184]	; 1edc0 <__assert_fail@plt+0xc140>
   1ed04:	add	r2, pc, r2
   1ed08:	add	r3, pc, r3
   1ed0c:	stmib	sp, {r0, r2, r7}
   1ed10:	mov	r2, #1
   1ed14:	str	r1, [sp, #16]
   1ed18:	str	r3, [sp]
   1ed1c:	str	r6, [sp, #20]
   1ed20:	mvn	r3, #0
   1ed24:	mov	r1, r8
   1ed28:	mov	r0, r4
   1ed2c:	bl	12c5c <__snprintf_chk@plt>
   1ed30:	mvn	r3, r0
   1ed34:	cmp	r0, r8
   1ed38:	lsr	r3, r3, #31
   1ed3c:	movcs	r3, #0
   1ed40:	cmp	r3, #0
   1ed44:	movne	r0, r4
   1ed48:	bne	1ed50 <__assert_fail@plt+0xc0d0>
   1ed4c:	mov	r0, #0
   1ed50:	ldr	r2, [sp, #28]
   1ed54:	ldr	r3, [r5]
   1ed58:	cmp	r2, r3
   1ed5c:	bne	1edb0 <__assert_fail@plt+0xc130>
   1ed60:	add	sp, sp, #36	; 0x24
   1ed64:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ed68:	ldr	r0, [pc, #84]	; 1edc4 <__assert_fail@plt+0xc144>
   1ed6c:	cmp	r6, #0
   1ed70:	add	r0, pc, r0
   1ed74:	ldr	r1, [sp, #24]
   1ed78:	bne	1ecfc <__assert_fail@plt+0xc07c>
   1ed7c:	ldr	r2, [pc, #68]	; 1edc8 <__assert_fail@plt+0xc148>
   1ed80:	ldr	r3, [pc, #68]	; 1edcc <__assert_fail@plt+0xc14c>
   1ed84:	add	r2, pc, r2
   1ed88:	add	r3, pc, r3
   1ed8c:	stmib	sp, {r0, r2, r7}
   1ed90:	mov	r2, #1
   1ed94:	str	r1, [sp, #16]
   1ed98:	str	r3, [sp]
   1ed9c:	mov	r1, r8
   1eda0:	mvn	r3, #0
   1eda4:	mov	r0, r4
   1eda8:	bl	12c5c <__snprintf_chk@plt>
   1edac:	b	1ed30 <__assert_fail@plt+0xc0b0>
   1edb0:	bl	126e0 <__stack_chk_fail@plt>
   1edb4:	strheq	r5, [r1], -r0
   1edb8:	andeq	r0, r0, r8, lsr #5
   1edbc:	andeq	r4, r0, ip, ror #8
   1edc0:	andeq	r4, r0, r4, ror r4
   1edc4:	andeq	r2, r0, r0, lsl pc
   1edc8:	andeq	r4, r0, ip, ror #7
   1edcc:	andeq	r4, r0, ip, lsl #8
   1edd0:	ldr	ip, [pc, #288]	; 1eef8 <__assert_fail@plt+0xc278>
   1edd4:	ldr	r3, [pc, #288]	; 1eefc <__assert_fail@plt+0xc27c>
   1edd8:	add	ip, pc, ip
   1eddc:	push	{r4, r5, r6, r7, lr}
   1ede0:	sub	sp, sp, #60	; 0x3c
   1ede4:	ldr	r5, [ip, r3]
   1ede8:	add	r3, sp, #48	; 0x30
   1edec:	str	r3, [sp]
   1edf0:	ldr	lr, [r5]
   1edf4:	mov	r4, r1
   1edf8:	mov	r6, r2
   1edfc:	add	r3, sp, #44	; 0x2c
   1ee00:	add	r2, sp, #40	; 0x28
   1ee04:	add	r1, sp, #36	; 0x24
   1ee08:	str	lr, [sp, #52]	; 0x34
   1ee0c:	mov	r7, r0
   1ee10:	bl	1eafc <__assert_fail@plt+0xbe7c>
   1ee14:	cmp	r0, #0
   1ee18:	bne	1ee8c <__assert_fail@plt+0xc20c>
   1ee1c:	mov	r0, r7
   1ee20:	bl	1b50c <__assert_fail@plt+0x888c>
   1ee24:	cmp	r0, #0
   1ee28:	beq	1eea8 <__assert_fail@plt+0xc228>
   1ee2c:	add	r1, sp, #36	; 0x24
   1ee30:	cmp	r6, #0
   1ee34:	ldm	r1, {r1, ip, lr}
   1ee38:	ldr	r7, [sp, #48]	; 0x30
   1ee3c:	beq	1eeb4 <__assert_fail@plt+0xc234>
   1ee40:	ldr	r2, [pc, #184]	; 1ef00 <__assert_fail@plt+0xc280>
   1ee44:	ldr	r3, [pc, #184]	; 1ef04 <__assert_fail@plt+0xc284>
   1ee48:	add	r2, pc, r2
   1ee4c:	add	r3, pc, r3
   1ee50:	stmib	sp, {r0, r2}
   1ee54:	str	r1, [sp, #12]
   1ee58:	str	r3, [sp]
   1ee5c:	str	r6, [sp, #28]
   1ee60:	str	r7, [sp, #24]
   1ee64:	str	lr, [sp, #20]
   1ee68:	str	ip, [sp, #16]
   1ee6c:	mvn	r3, #0
   1ee70:	mov	r2, #1
   1ee74:	mov	r1, #4096	; 0x1000
   1ee78:	mov	r0, r4
   1ee7c:	bl	12c5c <__snprintf_chk@plt>
   1ee80:	cmp	r0, #4096	; 0x1000
   1ee84:	movcc	r0, r4
   1ee88:	bcc	1ee90 <__assert_fail@plt+0xc210>
   1ee8c:	mov	r0, #0
   1ee90:	ldr	r2, [sp, #52]	; 0x34
   1ee94:	ldr	r3, [r5]
   1ee98:	cmp	r2, r3
   1ee9c:	bne	1eef4 <__assert_fail@plt+0xc274>
   1eea0:	add	sp, sp, #60	; 0x3c
   1eea4:	pop	{r4, r5, r6, r7, pc}
   1eea8:	ldr	r0, [pc, #88]	; 1ef08 <__assert_fail@plt+0xc288>
   1eeac:	add	r0, pc, r0
   1eeb0:	b	1ee2c <__assert_fail@plt+0xc1ac>
   1eeb4:	ldr	r2, [pc, #80]	; 1ef0c <__assert_fail@plt+0xc28c>
   1eeb8:	ldr	r3, [pc, #80]	; 1ef10 <__assert_fail@plt+0xc290>
   1eebc:	add	r2, pc, r2
   1eec0:	add	r3, pc, r3
   1eec4:	stmib	sp, {r0, r2}
   1eec8:	str	r1, [sp, #12]
   1eecc:	str	r3, [sp]
   1eed0:	str	r7, [sp, #24]
   1eed4:	str	lr, [sp, #20]
   1eed8:	str	ip, [sp, #16]
   1eedc:	mvn	r3, #0
   1eee0:	mov	r2, #1
   1eee4:	mov	r1, #4096	; 0x1000
   1eee8:	mov	r0, r4
   1eeec:	bl	12c5c <__snprintf_chk@plt>
   1eef0:	b	1ee80 <__assert_fail@plt+0xc200>
   1eef4:	bl	126e0 <__stack_chk_fail@plt>
   1eef8:	andeq	r4, r1, ip, ror #30
   1eefc:	andeq	r0, r0, r8, lsr #5
   1ef00:	andeq	r4, r0, r0, ror #6
   1ef04:	andeq	r4, r0, ip, ror #6
   1ef08:	ldrdeq	r2, [r0], -r4
   1ef0c:	andeq	r4, r0, ip, ror #5
   1ef10:	andeq	r4, r0, r4, lsl r3
   1ef14:	ldr	r3, [pc, #176]	; 1efcc <__assert_fail@plt+0xc34c>
   1ef18:	ldr	ip, [pc, #176]	; 1efd0 <__assert_fail@plt+0xc350>
   1ef1c:	add	r3, pc, r3
   1ef20:	push	{r4, r5, r6, r7, lr}
   1ef24:	sub	sp, sp, #1040	; 0x410
   1ef28:	ldr	r4, [r3, ip]
   1ef2c:	sub	sp, sp, #4
   1ef30:	cmp	r1, #0
   1ef34:	cmpne	r2, #0
   1ef38:	ldr	r3, [r4]
   1ef3c:	str	r3, [sp, #1036]	; 0x40c
   1ef40:	beq	1ef9c <__assert_fail@plt+0xc31c>
   1ef44:	add	r5, sp, #12
   1ef48:	str	r2, [sp]
   1ef4c:	mov	r3, #1024	; 0x400
   1ef50:	mov	r2, r5
   1ef54:	bl	1ec8c <__assert_fail@plt+0xc00c>
   1ef58:	cmp	r0, #0
   1ef5c:	beq	1ef9c <__assert_fail@plt+0xc31c>
   1ef60:	ldr	r1, [pc, #108]	; 1efd4 <__assert_fail@plt+0xc354>
   1ef64:	mov	r0, r5
   1ef68:	add	r1, pc, r1
   1ef6c:	bl	12bcc <fopen64@plt>
   1ef70:	subs	r6, r0, #0
   1ef74:	beq	1ef9c <__assert_fail@plt+0xc31c>
   1ef78:	ldr	r1, [pc, #88]	; 1efd8 <__assert_fail@plt+0xc358>
   1ef7c:	mov	r2, r5
   1ef80:	add	r1, pc, r1
   1ef84:	bl	12a4c <fscanf@plt>
   1ef88:	mov	r7, r0
   1ef8c:	mov	r0, r6
   1ef90:	bl	12adc <fclose@plt>
   1ef94:	cmp	r7, #1
   1ef98:	beq	1efbc <__assert_fail@plt+0xc33c>
   1ef9c:	mov	r0, #0
   1efa0:	ldr	r2, [sp, #1036]	; 0x40c
   1efa4:	ldr	r3, [r4]
   1efa8:	cmp	r2, r3
   1efac:	bne	1efc8 <__assert_fail@plt+0xc348>
   1efb0:	add	sp, sp, #1040	; 0x410
   1efb4:	add	sp, sp, #4
   1efb8:	pop	{r4, r5, r6, r7, pc}
   1efbc:	mov	r0, r5
   1efc0:	bl	126d4 <strdup@plt>
   1efc4:	b	1efa0 <__assert_fail@plt+0xc320>
   1efc8:	bl	126e0 <__stack_chk_fail@plt>
   1efcc:	andeq	r4, r1, r8, lsr #28
   1efd0:	andeq	r0, r0, r8, lsr #5
   1efd4:	andeq	r2, r0, r0, lsl #15
   1efd8:	andeq	r4, r0, r0, ror r2
   1efdc:	ldr	r3, [pc, #168]	; 1f08c <__assert_fail@plt+0xc40c>
   1efe0:	ldr	r2, [pc, #168]	; 1f090 <__assert_fail@plt+0xc410>
   1efe4:	add	r3, pc, r3
   1efe8:	push	{r4, r5, r6, lr}
   1efec:	sub	sp, sp, #4160	; 0x1040
   1eff0:	ldr	r4, [r3, r2]
   1eff4:	sub	sp, sp, #56	; 0x38
   1eff8:	add	r2, sp, #4160	; 0x1040
   1effc:	add	r2, r2, #52	; 0x34
   1f000:	ldr	r3, [r4]
   1f004:	cmp	r1, #0
   1f008:	str	r3, [r2]
   1f00c:	beq	1f060 <__assert_fail@plt+0xc3e0>
   1f010:	mov	r3, #0
   1f014:	add	r5, sp, #116	; 0x74
   1f018:	str	r3, [sp]
   1f01c:	mov	r2, r5
   1f020:	mov	r3, #4096	; 0x1000
   1f024:	bl	1ec8c <__assert_fail@plt+0xc00c>
   1f028:	add	r6, sp, #120	; 0x78
   1f02c:	cmp	r0, #0
   1f030:	beq	1f060 <__assert_fail@plt+0xc3e0>
   1f034:	mov	r1, r5
   1f038:	add	r2, sp, #8
   1f03c:	mov	r0, #3
   1f040:	bl	12bfc <__xstat64@plt>
   1f044:	cmp	r0, #0
   1f048:	bne	1f060 <__assert_fail@plt+0xc3e0>
   1f04c:	ldr	r3, [r6, #-96]	; 0xffffffa0
   1f050:	and	r3, r3, #61440	; 0xf000
   1f054:	cmp	r3, #16384	; 0x4000
   1f058:	moveq	r0, #1
   1f05c:	beq	1f064 <__assert_fail@plt+0xc3e4>
   1f060:	mov	r0, #0
   1f064:	add	r3, sp, #4160	; 0x1040
   1f068:	add	r3, r3, #52	; 0x34
   1f06c:	ldr	r2, [r3]
   1f070:	ldr	r3, [r4]
   1f074:	cmp	r2, r3
   1f078:	bne	1f088 <__assert_fail@plt+0xc408>
   1f07c:	add	sp, sp, #4160	; 0x1040
   1f080:	add	sp, sp, #56	; 0x38
   1f084:	pop	{r4, r5, r6, pc}
   1f088:	bl	126e0 <__stack_chk_fail@plt>
   1f08c:	andeq	r4, r1, r0, ror #26
   1f090:	andeq	r0, r0, r8, lsr #5
   1f094:	ldr	r3, [pc, #124]	; 1f118 <__assert_fail@plt+0xc498>
   1f098:	ldr	ip, [pc, #124]	; 1f11c <__assert_fail@plt+0xc49c>
   1f09c:	add	r3, pc, r3
   1f0a0:	push	{r4, r5, lr}
   1f0a4:	sub	sp, sp, #4160	; 0x1040
   1f0a8:	ldr	r4, [r3, ip]
   1f0ac:	sub	sp, sp, #52	; 0x34
   1f0b0:	add	ip, sp, #4160	; 0x1040
   1f0b4:	add	ip, ip, #44	; 0x2c
   1f0b8:	add	r5, sp, #108	; 0x6c
   1f0bc:	ldr	r3, [r4]
   1f0c0:	mov	r2, r1
   1f0c4:	mov	r1, r5
   1f0c8:	str	r3, [ip]
   1f0cc:	bl	1edd0 <__assert_fail@plt+0xc150>
   1f0d0:	cmp	r0, #0
   1f0d4:	beq	1f0f0 <__assert_fail@plt+0xc470>
   1f0d8:	mov	r1, r5
   1f0dc:	mov	r2, sp
   1f0e0:	mov	r0, #3
   1f0e4:	bl	12bfc <__xstat64@plt>
   1f0e8:	clz	r0, r0
   1f0ec:	lsr	r0, r0, #5
   1f0f0:	add	r3, sp, #4160	; 0x1040
   1f0f4:	add	r3, r3, #44	; 0x2c
   1f0f8:	ldr	r2, [r3]
   1f0fc:	ldr	r3, [r4]
   1f100:	cmp	r2, r3
   1f104:	bne	1f114 <__assert_fail@plt+0xc494>
   1f108:	add	sp, sp, #4160	; 0x1040
   1f10c:	add	sp, sp, #52	; 0x34
   1f110:	pop	{r4, r5, pc}
   1f114:	bl	126e0 <__stack_chk_fail@plt>
   1f118:	andeq	r4, r1, r8, lsr #25
   1f11c:	andeq	r0, r0, r8, lsr #5
   1f120:	ldr	r3, [pc, #200]	; 1f1f0 <__assert_fail@plt+0xc570>
   1f124:	ldr	r2, [pc, #200]	; 1f1f4 <__assert_fail@plt+0xc574>
   1f128:	add	r3, pc, r3
   1f12c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f130:	sub	sp, sp, #8256	; 0x2040
   1f134:	ldr	r5, [r3, r2]
   1f138:	sub	sp, sp, #52	; 0x34
   1f13c:	add	ip, sp, #8256	; 0x2040
   1f140:	add	ip, ip, #44	; 0x2c
   1f144:	add	r4, sp, #108	; 0x6c
   1f148:	ldr	r3, [r5]
   1f14c:	mov	r6, r1
   1f150:	mov	r2, #0
   1f154:	mov	r1, r4
   1f158:	str	r3, [ip]
   1f15c:	bl	1edd0 <__assert_fail@plt+0xc150>
   1f160:	cmp	r0, #0
   1f164:	beq	1f180 <__assert_fail@plt+0xc500>
   1f168:	mov	r2, sp
   1f16c:	mov	r1, r4
   1f170:	mov	r0, #3
   1f174:	bl	12bfc <__xstat64@plt>
   1f178:	subs	r8, r0, #0
   1f17c:	beq	1f1a8 <__assert_fail@plt+0xc528>
   1f180:	mov	r0, #0
   1f184:	add	r3, sp, #8256	; 0x2040
   1f188:	add	r3, r3, #44	; 0x2c
   1f18c:	ldr	r2, [r3]
   1f190:	ldr	r3, [r5]
   1f194:	cmp	r2, r3
   1f198:	bne	1f1ec <__assert_fail@plt+0xc56c>
   1f19c:	add	sp, sp, #8256	; 0x2040
   1f1a0:	add	sp, sp, #52	; 0x34
   1f1a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f1a8:	add	r7, sp, #4160	; 0x1040
   1f1ac:	add	r7, r7, #48	; 0x30
   1f1b0:	sub	r9, r7, #4
   1f1b4:	mov	r0, r4
   1f1b8:	mov	r1, r9
   1f1bc:	ldr	r2, [pc, #52]	; 1f1f8 <__assert_fail@plt+0xc578>
   1f1c0:	bl	12764 <readlink@plt>
   1f1c4:	cmp	r0, #0
   1f1c8:	blt	1f180 <__assert_fail@plt+0xc500>
   1f1cc:	add	r7, r7, r0
   1f1d0:	mov	r1, r6
   1f1d4:	mov	r0, r9
   1f1d8:	strb	r8, [r7, #-4]
   1f1dc:	bl	124e8 <strstr@plt>
   1f1e0:	adds	r0, r0, #0
   1f1e4:	movne	r0, #1
   1f1e8:	b	1f184 <__assert_fail@plt+0xc504>
   1f1ec:	bl	126e0 <__stack_chk_fail@plt>
   1f1f0:	andeq	r4, r1, ip, lsl ip
   1f1f4:	andeq	r0, r0, r8, lsr #5
   1f1f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f1fc:	ldr	r3, [pc, #576]	; 1f444 <__assert_fail@plt+0xc7c4>
   1f200:	ldr	ip, [pc, #576]	; 1f448 <__assert_fail@plt+0xc7c8>
   1f204:	add	r3, pc, r3
   1f208:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f20c:	sub	sp, sp, #4224	; 0x1080
   1f210:	ldr	r6, [r3, ip]
   1f214:	mov	r8, r2
   1f218:	add	r2, sp, #4160	; 0x1040
   1f21c:	add	r2, r2, #60	; 0x3c
   1f220:	ldr	r3, [r6]
   1f224:	subs	r7, r0, #0
   1f228:	mov	r4, r1
   1f22c:	str	r3, [r2]
   1f230:	beq	1f400 <__assert_fail@plt+0xc780>
   1f234:	cmp	r4, #0
   1f238:	beq	1f420 <__assert_fail@plt+0xc7a0>
   1f23c:	ldr	r0, [pc, #520]	; 1f44c <__assert_fail@plt+0xc7cc>
   1f240:	mov	r2, #5
   1f244:	mov	r1, r4
   1f248:	add	r0, pc, r0
   1f24c:	bl	12c14 <strncmp@plt>
   1f250:	cmp	r0, #0
   1f254:	beq	1f3dc <__assert_fail@plt+0xc75c>
   1f258:	mov	r0, r4
   1f25c:	bl	126d4 <strdup@plt>
   1f260:	subs	r5, r0, #0
   1f264:	movne	r9, #33	; 0x21
   1f268:	bne	1f274 <__assert_fail@plt+0xc5f4>
   1f26c:	b	1f3a4 <__assert_fail@plt+0xc724>
   1f270:	strb	r9, [r0]
   1f274:	mov	r1, #47	; 0x2f
   1f278:	mov	r0, r5
   1f27c:	bl	12950 <strchr@plt>
   1f280:	cmp	r0, #0
   1f284:	bne	1f270 <__assert_fail@plt+0xc5f0>
   1f288:	cmp	r8, #0
   1f28c:	beq	1f2ac <__assert_fail@plt+0xc62c>
   1f290:	ldr	r0, [pc, #440]	; 1f450 <__assert_fail@plt+0xc7d0>
   1f294:	mov	r1, r4
   1f298:	mov	r2, #3
   1f29c:	add	r0, pc, r0
   1f2a0:	bl	12c14 <strncmp@plt>
   1f2a4:	cmp	r0, #0
   1f2a8:	bne	1f338 <__assert_fail@plt+0xc6b8>
   1f2ac:	ldr	r2, [pc, #416]	; 1f454 <__assert_fail@plt+0xc7d4>
   1f2b0:	mov	r3, #4096	; 0x1000
   1f2b4:	add	r2, pc, r2
   1f2b8:	add	r4, sp, #124	; 0x7c
   1f2bc:	stm	sp, {r2, r7}
   1f2c0:	str	r5, [sp, #8]
   1f2c4:	mov	r0, r4
   1f2c8:	mov	r1, r3
   1f2cc:	mov	r2, #1
   1f2d0:	bl	12c5c <__snprintf_chk@plt>
   1f2d4:	ldr	sl, [pc, #380]	; 1f458 <__assert_fail@plt+0xc7d8>
   1f2d8:	cmp	r0, sl
   1f2dc:	bhi	1f3a4 <__assert_fail@plt+0xc724>
   1f2e0:	mov	r0, r4
   1f2e4:	bl	1d9cc <__assert_fail@plt+0xad4c>
   1f2e8:	mov	r8, r0
   1f2ec:	mov	r9, r1
   1f2f0:	orrs	r3, r8, r9
   1f2f4:	bne	1f3ac <__assert_fail@plt+0xc72c>
   1f2f8:	ldr	r2, [pc, #348]	; 1f45c <__assert_fail@plt+0xc7dc>
   1f2fc:	mov	r3, #4096	; 0x1000
   1f300:	add	r2, pc, r2
   1f304:	str	r5, [sp, #8]
   1f308:	stm	sp, {r2, r7}
   1f30c:	mov	r1, r3
   1f310:	mov	r2, #1
   1f314:	mov	r0, r4
   1f318:	bl	12c5c <__snprintf_chk@plt>
   1f31c:	cmp	r0, sl
   1f320:	bhi	1f3ac <__assert_fail@plt+0xc72c>
   1f324:	mov	r0, r4
   1f328:	bl	1d9cc <__assert_fail@plt+0xad4c>
   1f32c:	mov	r8, r0
   1f330:	mov	r9, r1
   1f334:	b	1f3ac <__assert_fail@plt+0xc72c>
   1f338:	mov	r0, r8
   1f33c:	bl	126d4 <strdup@plt>
   1f340:	subs	r4, r0, #0
   1f344:	movne	r8, #33	; 0x21
   1f348:	bne	1f354 <__assert_fail@plt+0xc6d4>
   1f34c:	b	1f3a4 <__assert_fail@plt+0xc724>
   1f350:	strb	r8, [r0]
   1f354:	mov	r1, #47	; 0x2f
   1f358:	mov	r0, r4
   1f35c:	bl	12950 <strchr@plt>
   1f360:	cmp	r0, #0
   1f364:	bne	1f350 <__assert_fail@plt+0xc6d0>
   1f368:	ldr	r2, [pc, #240]	; 1f460 <__assert_fail@plt+0xc7e0>
   1f36c:	mov	r3, #4096	; 0x1000
   1f370:	add	r2, pc, r2
   1f374:	add	r8, sp, #124	; 0x7c
   1f378:	stm	sp, {r2, r7}
   1f37c:	mov	r1, r3
   1f380:	mov	r2, #1
   1f384:	strd	r4, [sp, #8]
   1f388:	mov	r0, r8
   1f38c:	bl	12c5c <__snprintf_chk@plt>
   1f390:	mov	r7, r0
   1f394:	mov	r0, r4
   1f398:	bl	125d8 <free@plt>
   1f39c:	cmp	r7, #4096	; 0x1000
   1f3a0:	bcc	1f40c <__assert_fail@plt+0xc78c>
   1f3a4:	mov	r8, #0
   1f3a8:	mov	r9, #0
   1f3ac:	mov	r0, r5
   1f3b0:	bl	125d8 <free@plt>
   1f3b4:	add	r3, sp, #4160	; 0x1040
   1f3b8:	add	r3, r3, #60	; 0x3c
   1f3bc:	ldr	r2, [r3]
   1f3c0:	ldr	r3, [r6]
   1f3c4:	mov	r0, r8
   1f3c8:	cmp	r2, r3
   1f3cc:	mov	r1, r9
   1f3d0:	bne	1f440 <__assert_fail@plt+0xc7c0>
   1f3d4:	add	sp, sp, #4224	; 0x1080
   1f3d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f3dc:	mov	r1, r4
   1f3e0:	add	r2, sp, #16
   1f3e4:	mov	r0, #3
   1f3e8:	bl	12bfc <__xstat64@plt>
   1f3ec:	subs	r5, r0, #0
   1f3f0:	addne	r4, r4, #5
   1f3f4:	bne	1f258 <__assert_fail@plt+0xc5d8>
   1f3f8:	ldrd	r8, [sp, #48]	; 0x30
   1f3fc:	b	1f3ac <__assert_fail@plt+0xc72c>
   1f400:	ldr	r7, [pc, #92]	; 1f464 <__assert_fail@plt+0xc7e4>
   1f404:	add	r7, pc, r7
   1f408:	b	1f234 <__assert_fail@plt+0xc5b4>
   1f40c:	mov	r0, r8
   1f410:	bl	1d9cc <__assert_fail@plt+0xad4c>
   1f414:	mov	r8, r0
   1f418:	mov	r9, r1
   1f41c:	b	1f3ac <__assert_fail@plt+0xc72c>
   1f420:	ldr	r3, [pc, #64]	; 1f468 <__assert_fail@plt+0xc7e8>
   1f424:	ldr	r1, [pc, #64]	; 1f46c <__assert_fail@plt+0xc7ec>
   1f428:	ldr	r0, [pc, #64]	; 1f470 <__assert_fail@plt+0xc7f0>
   1f42c:	add	r3, pc, r3
   1f430:	ldr	r2, [pc, #60]	; 1f474 <__assert_fail@plt+0xc7f4>
   1f434:	add	r1, pc, r1
   1f438:	add	r0, pc, r0
   1f43c:	bl	12c80 <__assert_fail@plt>
   1f440:	bl	126e0 <__stack_chk_fail@plt>
   1f444:	andeq	r4, r1, r0, asr #22
   1f448:	andeq	r0, r0, r8, lsr #5
   1f44c:	andeq	r3, r0, r0, asr #31
   1f450:	andeq	r2, r0, ip, lsr #6
   1f454:	andeq	r3, r0, r4, ror pc
   1f458:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f45c:	andeq	r3, r0, ip, lsr pc
   1f460:	andeq	r3, r0, r0, lsr #29
   1f464:	andeq	r2, r0, ip, ror r8
   1f468:	andeq	r3, r0, ip, lsl ip
   1f46c:	andeq	r3, r0, r8, asr #27
   1f470:	andeq	r2, r0, ip, lsr #15
   1f474:	andeq	r0, r0, r6, ror #6
   1f478:	mov	r2, #0
   1f47c:	mov	r1, r0
   1f480:	mov	r0, r2
   1f484:	b	1f1fc <__assert_fail@plt+0xc57c>
   1f488:	push	{r4, lr}
   1f48c:	bl	1b6c8 <__assert_fail@plt+0x8a48>
   1f490:	ldrd	r0, [r0]
   1f494:	pop	{r4, pc}
   1f498:	ldr	ip, [pc, #656]	; 1f730 <__assert_fail@plt+0xcab0>
   1f49c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4a0:	add	ip, pc, ip
   1f4a4:	ldr	lr, [pc, #648]	; 1f734 <__assert_fail@plt+0xcab4>
   1f4a8:	sub	sp, sp, #4096	; 0x1000
   1f4ac:	sub	sp, sp, #28
   1f4b0:	ldr	r5, [ip, lr]
   1f4b4:	mov	r7, r2
   1f4b8:	add	r2, sp, #4096	; 0x1000
   1f4bc:	mov	r8, r3
   1f4c0:	add	r2, r2, #20
   1f4c4:	ldr	r3, [r5]
   1f4c8:	subs	r9, r0, #0
   1f4cc:	mov	r6, r1
   1f4d0:	str	r3, [r2]
   1f4d4:	mov	r1, ip
   1f4d8:	beq	1f690 <__assert_fail@plt+0xca10>
   1f4dc:	ldr	r2, [pc, #596]	; 1f738 <__assert_fail@plt+0xcab8>
   1f4e0:	mov	r1, #0
   1f4e4:	add	r2, pc, r2
   1f4e8:	bl	1b9c0 <__assert_fail@plt+0x8d40>
   1f4ec:	subs	r4, r0, #0
   1f4f0:	bne	1f5b4 <__assert_fail@plt+0xc934>
   1f4f4:	add	fp, sp, #20
   1f4f8:	mov	r1, fp
   1f4fc:	mov	r3, r4
   1f500:	ldr	r2, [pc, #564]	; 1f73c <__assert_fail@plt+0xcabc>
   1f504:	mov	r0, r9
   1f508:	bl	1c32c <__assert_fail@plt+0x96ac>
   1f50c:	add	sl, sp, #24
   1f510:	cmp	r0, #0
   1f514:	blt	1f690 <__assert_fail@plt+0xca10>
   1f518:	add	sl, sl, r0
   1f51c:	mov	r0, fp
   1f520:	strb	r4, [sl, #-4]
   1f524:	bl	1fc20 <__assert_fail@plt+0xcfa0>
   1f528:	mov	r0, fp
   1f52c:	bl	1fc20 <__assert_fail@plt+0xcfa0>
   1f530:	subs	sl, r0, #0
   1f534:	beq	1f690 <__assert_fail@plt+0xca10>
   1f538:	mov	fp, #47	; 0x2f
   1f53c:	b	1f544 <__assert_fail@plt+0xc8c4>
   1f540:	strb	fp, [r3]
   1f544:	mov	r1, #33	; 0x21
   1f548:	mov	r0, sl
   1f54c:	bl	12950 <strchr@plt>
   1f550:	subs	r3, r0, #0
   1f554:	bne	1f540 <__assert_fail@plt+0xc8c0>
   1f558:	cmp	r6, #0
   1f55c:	cmpne	r7, #0
   1f560:	bne	1f6e0 <__assert_fail@plt+0xca60>
   1f564:	cmp	r8, #0
   1f568:	beq	1f58c <__assert_fail@plt+0xc90c>
   1f56c:	mov	r0, r9
   1f570:	bl	1b50c <__assert_fail@plt+0x888c>
   1f574:	mov	r1, sl
   1f578:	mov	r2, #0
   1f57c:	bl	1f1fc <__assert_fail@plt+0xc57c>
   1f580:	orrs	r3, r0, r1
   1f584:	strd	r0, [r8]
   1f588:	beq	1f690 <__assert_fail@plt+0xca10>
   1f58c:	add	r3, sp, #4096	; 0x1000
   1f590:	add	r3, r3, #20
   1f594:	ldr	r2, [r3]
   1f598:	ldr	r3, [r5]
   1f59c:	mov	r0, r4
   1f5a0:	cmp	r2, r3
   1f5a4:	bne	1f72c <__assert_fail@plt+0xcaac>
   1f5a8:	add	sp, sp, #4096	; 0x1000
   1f5ac:	add	sp, sp, #28
   1f5b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5b4:	add	r4, sp, #24
   1f5b8:	mov	r1, r4
   1f5bc:	ldr	r2, [pc, #380]	; 1f740 <__assert_fail@plt+0xcac0>
   1f5c0:	mov	r3, #0
   1f5c4:	str	r3, [r1, #-12]!
   1f5c8:	add	r2, pc, r2
   1f5cc:	mov	r0, r9
   1f5d0:	bl	1c690 <__assert_fail@plt+0x9a10>
   1f5d4:	ldr	r3, [r4, #-12]
   1f5d8:	cmp	r3, #0
   1f5dc:	str	r3, [r4, #-8]
   1f5e0:	beq	1f698 <__assert_fail@plt+0xca18>
   1f5e4:	ldr	r1, [pc, #344]	; 1f744 <__assert_fail@plt+0xcac4>
   1f5e8:	sub	r0, r4, #8
   1f5ec:	add	r1, pc, r1
   1f5f0:	bl	1289c <strsep@plt>
   1f5f4:	cmp	r0, #0
   1f5f8:	ldreq	r3, [r4, #-12]
   1f5fc:	beq	1f698 <__assert_fail@plt+0xca18>
   1f600:	ldr	r1, [pc, #320]	; 1f748 <__assert_fail@plt+0xcac8>
   1f604:	mov	r2, #4
   1f608:	add	r1, pc, r1
   1f60c:	bl	129bc <strncasecmp@plt>
   1f610:	ldr	r3, [r4, #-12]
   1f614:	subs	r4, r0, #0
   1f618:	bne	1f698 <__assert_fail@plt+0xca18>
   1f61c:	mov	r0, r3
   1f620:	bl	125d8 <free@plt>
   1f624:	mov	r0, r9
   1f628:	bl	1e5c4 <__assert_fail@plt+0xb944>
   1f62c:	subs	sl, r0, #0
   1f630:	beq	1f6a0 <__assert_fail@plt+0xca20>
   1f634:	cmp	r6, #0
   1f638:	cmpne	r7, #0
   1f63c:	bne	1f710 <__assert_fail@plt+0xca90>
   1f640:	cmp	r8, #0
   1f644:	beq	1f704 <__assert_fail@plt+0xca84>
   1f648:	mov	r0, r9
   1f64c:	bl	1b50c <__assert_fail@plt+0x888c>
   1f650:	mov	r2, #0
   1f654:	mov	r1, sl
   1f658:	bl	1f1fc <__assert_fail@plt+0xc57c>
   1f65c:	orrs	r3, r0, r1
   1f660:	strd	r0, [r8]
   1f664:	mov	r0, sl
   1f668:	bne	1f708 <__assert_fail@plt+0xca88>
   1f66c:	bl	125d8 <free@plt>
   1f670:	cmp	r6, #0
   1f674:	beq	1f6cc <__assert_fail@plt+0xca4c>
   1f678:	mov	r2, r7
   1f67c:	mov	r1, r6
   1f680:	mov	r0, r9
   1f684:	bl	1e178 <__assert_fail@plt+0xb4f8>
   1f688:	cmp	r0, #0
   1f68c:	bne	1f6cc <__assert_fail@plt+0xca4c>
   1f690:	mvn	r4, #0
   1f694:	b	1f58c <__assert_fail@plt+0xc90c>
   1f698:	mov	r0, r3
   1f69c:	bl	125d8 <free@plt>
   1f6a0:	cmp	r6, #0
   1f6a4:	beq	1f6c0 <__assert_fail@plt+0xca40>
   1f6a8:	mov	r2, r7
   1f6ac:	mov	r1, r6
   1f6b0:	mov	r0, r9
   1f6b4:	bl	1e178 <__assert_fail@plt+0xb4f8>
   1f6b8:	cmp	r0, #0
   1f6bc:	beq	1f690 <__assert_fail@plt+0xca10>
   1f6c0:	cmp	r8, #0
   1f6c4:	moveq	r4, r8
   1f6c8:	beq	1f58c <__assert_fail@plt+0xc90c>
   1f6cc:	mov	r0, r9
   1f6d0:	bl	1f488 <__assert_fail@plt+0xc808>
   1f6d4:	mov	r4, #0
   1f6d8:	strd	r0, [r8]
   1f6dc:	b	1f58c <__assert_fail@plt+0xc90c>
   1f6e0:	mov	r0, r6
   1f6e4:	mov	r2, r7
   1f6e8:	mov	r1, sl
   1f6ec:	str	r3, [sp, #4]
   1f6f0:	add	r6, r6, r7
   1f6f4:	bl	12a28 <strncpy@plt>
   1f6f8:	ldr	r3, [sp, #4]
   1f6fc:	strb	r3, [r6, #-1]
   1f700:	b	1f564 <__assert_fail@plt+0xc8e4>
   1f704:	mov	r0, sl
   1f708:	bl	125d8 <free@plt>
   1f70c:	b	1f58c <__assert_fail@plt+0xc90c>
   1f710:	mov	r2, r7
   1f714:	mov	r1, sl
   1f718:	mov	r0, r6
   1f71c:	bl	12a28 <strncpy@plt>
   1f720:	add	r3, r6, r7
   1f724:	strb	r4, [r3, #-1]
   1f728:	b	1f640 <__assert_fail@plt+0xc9c0>
   1f72c:	bl	126e0 <__stack_chk_fail@plt>
   1f730:	andeq	r4, r1, r4, lsr #17
   1f734:	andeq	r0, r0, r8, lsr #5
   1f738:	andeq	r3, r0, r4, ror sp
   1f73c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1f740:			; <UNDEFINED> instruction: 0x000023b4
   1f744:	andeq	r2, r0, ip, lsr #4
   1f748:	andeq	r2, r0, ip, ror #6
   1f74c:	orrs	ip, r0, r1
   1f750:	push	{r4, r5, r6, lr}
   1f754:	beq	1f798 <__assert_fail@plt+0xcb18>
   1f758:	mov	r5, r3
   1f75c:	mov	r3, #0
   1f760:	mov	r4, r2
   1f764:	mov	r2, r3
   1f768:	bl	1e060 <__assert_fail@plt+0xb3e0>
   1f76c:	subs	r6, r0, #0
   1f770:	beq	1f7a0 <__assert_fail@plt+0xcb20>
   1f774:	mov	r1, r4
   1f778:	mov	r2, r5
   1f77c:	ldr	r3, [sp, #16]
   1f780:	bl	1f498 <__assert_fail@plt+0xc818>
   1f784:	mov	r4, r0
   1f788:	mov	r0, r6
   1f78c:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1f790:	mov	r0, r4
   1f794:	pop	{r4, r5, r6, pc}
   1f798:	mvn	r4, #21
   1f79c:	b	1f790 <__assert_fail@plt+0xcb10>
   1f7a0:	mvn	r4, #11
   1f7a4:	b	1f790 <__assert_fail@plt+0xcb10>
   1f7a8:	ldr	ip, [pc, #112]	; 1f820 <__assert_fail@plt+0xcba0>
   1f7ac:	ldr	r2, [pc, #112]	; 1f824 <__assert_fail@plt+0xcba4>
   1f7b0:	add	ip, pc, ip
   1f7b4:	push	{r4, r6, r7, lr}
   1f7b8:	sub	sp, sp, #24
   1f7bc:	ldr	r4, [ip, r2]
   1f7c0:	add	lr, sp, #8
   1f7c4:	mov	r3, #0
   1f7c8:	str	lr, [sp]
   1f7cc:	ldr	lr, [r4]
   1f7d0:	mov	r2, r3
   1f7d4:	mov	r6, r0
   1f7d8:	mov	r7, r1
   1f7dc:	str	lr, [sp, #20]
   1f7e0:	bl	1f74c <__assert_fail@plt+0xcacc>
   1f7e4:	cmp	r0, #0
   1f7e8:	mvnne	r0, #0
   1f7ec:	bne	1f804 <__assert_fail@plt+0xcb84>
   1f7f0:	ldrd	r2, [sp, #8]
   1f7f4:	cmp	r3, r7
   1f7f8:	cmpeq	r2, r6
   1f7fc:	moveq	r0, #1
   1f800:	movne	r0, #0
   1f804:	ldr	r2, [sp, #20]
   1f808:	ldr	r3, [r4]
   1f80c:	cmp	r2, r3
   1f810:	bne	1f81c <__assert_fail@plt+0xcb9c>
   1f814:	add	sp, sp, #24
   1f818:	pop	{r4, r6, r7, pc}
   1f81c:	bl	126e0 <__stack_chk_fail@plt>
   1f820:	muleq	r1, r4, r5
   1f824:	andeq	r0, r0, r8, lsr #5
   1f828:	ldr	r3, [pc, #208]	; 1f900 <__assert_fail@plt+0xcc80>
   1f82c:	ldr	ip, [pc, #208]	; 1f904 <__assert_fail@plt+0xcc84>
   1f830:	add	r3, pc, r3
   1f834:	push	{r4, r5, r6, r7, r8, lr}
   1f838:	sub	sp, sp, #112	; 0x70
   1f83c:	ldr	r5, [r3, ip]
   1f840:	mov	r6, r0
   1f844:	mov	r4, r1
   1f848:	ldr	r3, [r5]
   1f84c:	mov	r7, r2
   1f850:	str	r3, [sp, #108]	; 0x6c
   1f854:	bl	1e178 <__assert_fail@plt+0xb4f8>
   1f858:	subs	r8, r0, #0
   1f85c:	beq	1f8c0 <__assert_fail@plt+0xcc40>
   1f860:	bl	12938 <strlen@plt>
   1f864:	add	r3, r0, #6
   1f868:	cmp	r3, r7
   1f86c:	bhi	1f8c0 <__assert_fail@plt+0xcc40>
   1f870:	add	r2, r0, #1
   1f874:	mov	r1, r8
   1f878:	add	r0, r4, #5
   1f87c:	bl	125cc <memmove@plt>
   1f880:	ldr	r3, [pc, #128]	; 1f908 <__assert_fail@plt+0xcc88>
   1f884:	mov	r2, sp
   1f888:	add	r3, pc, r3
   1f88c:	mov	r1, r4
   1f890:	ldr	r0, [r3]
   1f894:	ldrb	r3, [r3, #4]
   1f898:	str	r0, [r4]
   1f89c:	mov	r0, #3
   1f8a0:	strb	r3, [r4, #4]
   1f8a4:	bl	12bfc <__xstat64@plt>
   1f8a8:	cmp	r0, #0
   1f8ac:	bne	1f8c0 <__assert_fail@plt+0xcc40>
   1f8b0:	ldr	r3, [sp, #16]
   1f8b4:	and	r3, r3, #61440	; 0xf000
   1f8b8:	cmp	r3, #24576	; 0x6000
   1f8bc:	beq	1f8dc <__assert_fail@plt+0xcc5c>
   1f8c0:	mov	r0, #0
   1f8c4:	ldr	r2, [sp, #108]	; 0x6c
   1f8c8:	ldr	r3, [r5]
   1f8cc:	cmp	r2, r3
   1f8d0:	bne	1f8fc <__assert_fail@plt+0xcc7c>
   1f8d4:	add	sp, sp, #112	; 0x70
   1f8d8:	pop	{r4, r5, r6, r7, r8, pc}
   1f8dc:	mov	r0, r6
   1f8e0:	ldrd	r6, [sp, #32]
   1f8e4:	bl	1f488 <__assert_fail@plt+0xc808>
   1f8e8:	cmp	r7, r1
   1f8ec:	cmpeq	r6, r0
   1f8f0:	bne	1f8c0 <__assert_fail@plt+0xcc40>
   1f8f4:	mov	r0, r4
   1f8f8:	b	1f8c4 <__assert_fail@plt+0xcc44>
   1f8fc:	bl	126e0 <__stack_chk_fail@plt>
   1f900:	andeq	r4, r1, r4, lsl r5
   1f904:	andeq	r0, r0, r8, lsr #5
   1f908:	andeq	r3, r0, r0, lsl #19
   1f90c:	push	{r4, r5, r6, lr}
   1f910:	mov	r6, r3
   1f914:	mov	r3, #0
   1f918:	mov	r4, r2
   1f91c:	mov	r2, r3
   1f920:	bl	1e060 <__assert_fail@plt+0xb3e0>
   1f924:	subs	r5, r0, #0
   1f928:	moveq	r4, r5
   1f92c:	beq	1f948 <__assert_fail@plt+0xccc8>
   1f930:	mov	r1, r4
   1f934:	mov	r2, r6
   1f938:	bl	1f828 <__assert_fail@plt+0xcba8>
   1f93c:	mov	r4, r0
   1f940:	mov	r0, r5
   1f944:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1f948:	mov	r0, r4
   1f94c:	pop	{r4, r5, r6, pc}
   1f950:	push	{r4, r5, r6, lr}
   1f954:	mov	r6, r3
   1f958:	mov	r3, #0
   1f95c:	mov	r4, r2
   1f960:	mov	r2, r3
   1f964:	bl	1e060 <__assert_fail@plt+0xb3e0>
   1f968:	subs	r5, r0, #0
   1f96c:	moveq	r4, r5
   1f970:	beq	1f98c <__assert_fail@plt+0xcd0c>
   1f974:	mov	r1, r4
   1f978:	mov	r2, r6
   1f97c:	bl	1e178 <__assert_fail@plt+0xb4f8>
   1f980:	mov	r4, r0
   1f984:	mov	r0, r5
   1f988:	bl	1b1a8 <__assert_fail@plt+0x8528>
   1f98c:	mov	r0, r4
   1f990:	pop	{r4, r5, r6, pc}
   1f994:	ldr	r1, [pc]	; 1f99c <__assert_fail@plt+0xcd1c>
   1f998:	b	1277c <mkostemp64@plt>
   1f99c:	andeq	r0, r8, r2, asr #1
   1f9a0:	ldr	ip, [pc, #208]	; 1fa78 <__assert_fail@plt+0xcdf8>
   1f9a4:	push	{r4, r5, r6, r7, lr}
   1f9a8:	add	ip, pc, ip
   1f9ac:	ldr	lr, [pc, #200]	; 1fa7c <__assert_fail@plt+0xcdfc>
   1f9b0:	sub	sp, sp, #20
   1f9b4:	mov	r5, r2
   1f9b8:	ldr	r4, [ip, lr]
   1f9bc:	subs	r3, r1, #0
   1f9c0:	mov	r6, r0
   1f9c4:	ldr	r2, [r4]
   1f9c8:	mov	r0, ip
   1f9cc:	str	r2, [sp, #12]
   1f9d0:	beq	1fa40 <__assert_fail@plt+0xcdc0>
   1f9d4:	ldr	r2, [pc, #164]	; 1fa80 <__assert_fail@plt+0xce00>
   1f9d8:	str	r5, [sp]
   1f9dc:	add	r2, pc, r2
   1f9e0:	mov	r1, #1
   1f9e4:	add	r0, sp, #8
   1f9e8:	bl	12818 <__asprintf_chk@plt>
   1f9ec:	cmp	r0, #0
   1f9f0:	blt	1fa6c <__assert_fail@plt+0xcdec>
   1f9f4:	mov	r0, #63	; 0x3f
   1f9f8:	bl	12bf0 <umask@plt>
   1f9fc:	mov	r7, r0
   1fa00:	ldr	r0, [sp, #8]
   1fa04:	bl	1f994 <__assert_fail@plt+0xcd14>
   1fa08:	mov	r5, r0
   1fa0c:	mov	r0, r7
   1fa10:	bl	12bf0 <umask@plt>
   1fa14:	cmn	r5, #1
   1fa18:	beq	1fa5c <__assert_fail@plt+0xcddc>
   1fa1c:	ldr	r3, [sp, #8]
   1fa20:	str	r3, [r6]
   1fa24:	ldr	r2, [sp, #12]
   1fa28:	ldr	r3, [r4]
   1fa2c:	mov	r0, r5
   1fa30:	cmp	r2, r3
   1fa34:	bne	1fa74 <__assert_fail@plt+0xcdf4>
   1fa38:	add	sp, sp, #20
   1fa3c:	pop	{r4, r5, r6, r7, pc}
   1fa40:	ldr	r0, [pc, #60]	; 1fa84 <__assert_fail@plt+0xce04>
   1fa44:	add	r0, pc, r0
   1fa48:	bl	12824 <getenv@plt>
   1fa4c:	subs	r3, r0, #0
   1fa50:	ldreq	r3, [pc, #48]	; 1fa88 <__assert_fail@plt+0xce08>
   1fa54:	addeq	r3, pc, r3
   1fa58:	b	1f9d4 <__assert_fail@plt+0xcd54>
   1fa5c:	ldr	r0, [sp, #8]
   1fa60:	bl	125d8 <free@plt>
   1fa64:	mov	r3, #0
   1fa68:	b	1fa20 <__assert_fail@plt+0xcda0>
   1fa6c:	mvn	r5, #0
   1fa70:	b	1fa24 <__assert_fail@plt+0xcda4>
   1fa74:	bl	126e0 <__stack_chk_fail@plt>
   1fa78:	muleq	r1, ip, r3
   1fa7c:	andeq	r0, r0, r8, lsr #5
   1fa80:			; <UNDEFINED> instruction: 0x000038b4
   1fa84:	andeq	r3, r0, r4, asr #16
   1fa88:	andeq	r3, r0, ip, lsr #16
   1fa8c:	push	{r4, r5, r6, lr}
   1fa90:	mov	r2, r1
   1fa94:	ldr	r1, [pc, #108]	; 1fb08 <__assert_fail@plt+0xce88>
   1fa98:	mov	r5, r0
   1fa9c:	bl	12b00 <fcntl64@plt>
   1faa0:	subs	r4, r0, #0
   1faa4:	blt	1fab0 <__assert_fail@plt+0xce30>
   1faa8:	mov	r0, r4
   1faac:	pop	{r4, r5, r6, pc}
   1fab0:	mov	r0, r5
   1fab4:	bl	126f8 <dup@plt>
   1fab8:	subs	r4, r0, #0
   1fabc:	blt	1faa8 <__assert_fail@plt+0xce28>
   1fac0:	mov	r1, #1
   1fac4:	bl	12b00 <fcntl64@plt>
   1fac8:	subs	r2, r0, #0
   1facc:	blt	1fae8 <__assert_fail@plt+0xce68>
   1fad0:	orr	r2, r2, #1
   1fad4:	mov	r1, #2
   1fad8:	mov	r0, r4
   1fadc:	bl	12b00 <fcntl64@plt>
   1fae0:	cmp	r0, #0
   1fae4:	bge	1faa8 <__assert_fail@plt+0xce28>
   1fae8:	bl	129a4 <__errno_location@plt>
   1faec:	mov	r5, r0
   1faf0:	mov	r0, r4
   1faf4:	ldr	r6, [r5]
   1faf8:	mvn	r4, #0
   1fafc:	bl	12c44 <close@plt>
   1fb00:	str	r6, [r5]
   1fb04:	b	1faa8 <__assert_fail@plt+0xce28>
   1fb08:	andeq	r0, r0, r6, lsl #8
   1fb0c:	b	128a8 <getdtablesize@plt>
   1fb10:	subs	r3, r0, #0
   1fb14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fb18:	beq	1fc10 <__assert_fail@plt+0xcf90>
   1fb1c:	ldrsb	r3, [r3]
   1fb20:	cmp	r3, #0
   1fb24:	beq	1fc10 <__assert_fail@plt+0xcf90>
   1fb28:	mov	r9, r1
   1fb2c:	bl	126d4 <strdup@plt>
   1fb30:	subs	r8, r0, #0
   1fb34:	beq	1fc18 <__assert_fail@plt+0xcf98>
   1fb38:	ldrsb	r3, [r8]
   1fb3c:	cmp	r3, #47	; 0x2f
   1fb40:	addeq	r4, r8, #1
   1fb44:	ldrsbeq	r3, [r8, #1]
   1fb48:	movne	r4, r8
   1fb4c:	cmp	r3, #0
   1fb50:	beq	1fbe0 <__assert_fail@plt+0xcf60>
   1fb54:	mov	r6, #47	; 0x2f
   1fb58:	mov	r7, #0
   1fb5c:	b	1fb8c <__assert_fail@plt+0xcf0c>
   1fb60:	strb	r7, [r5]
   1fb64:	ldrsb	r3, [r4]
   1fb68:	cmp	r3, #0
   1fb6c:	bne	1fbe8 <__assert_fail@plt+0xcf68>
   1fb70:	mov	r4, r5
   1fb74:	strb	r6, [r4], #1
   1fb78:	cmp	r4, #0
   1fb7c:	beq	1fbe0 <__assert_fail@plt+0xcf60>
   1fb80:	ldrsb	r3, [r5, #1]
   1fb84:	cmp	r3, #0
   1fb88:	beq	1fbe0 <__assert_fail@plt+0xcf60>
   1fb8c:	mov	r1, #47	; 0x2f
   1fb90:	mov	r0, r4
   1fb94:	bl	12950 <strchr@plt>
   1fb98:	subs	r5, r0, #0
   1fb9c:	bne	1fb60 <__assert_fail@plt+0xcee0>
   1fba0:	ldrsb	r3, [r4]
   1fba4:	cmp	r3, #0
   1fba8:	beq	1fbe0 <__assert_fail@plt+0xcf60>
   1fbac:	mov	r1, r9
   1fbb0:	mov	r0, r8
   1fbb4:	bl	129e0 <mkdir@plt>
   1fbb8:	subs	r4, r0, #0
   1fbbc:	beq	1fbe0 <__assert_fail@plt+0xcf60>
   1fbc0:	bl	129a4 <__errno_location@plt>
   1fbc4:	ldr	r3, [r0]
   1fbc8:	cmp	r3, #17
   1fbcc:	beq	1fbe0 <__assert_fail@plt+0xcf60>
   1fbd0:	mov	r0, r8
   1fbd4:	bl	125d8 <free@plt>
   1fbd8:	mov	r0, r4
   1fbdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fbe0:	mov	r4, #0
   1fbe4:	b	1fbd0 <__assert_fail@plt+0xcf50>
   1fbe8:	mov	r1, r9
   1fbec:	mov	r0, r8
   1fbf0:	bl	129e0 <mkdir@plt>
   1fbf4:	subs	r4, r0, #0
   1fbf8:	beq	1fb70 <__assert_fail@plt+0xcef0>
   1fbfc:	bl	129a4 <__errno_location@plt>
   1fc00:	ldr	r3, [r0]
   1fc04:	cmp	r3, #17
   1fc08:	beq	1fb70 <__assert_fail@plt+0xcef0>
   1fc0c:	b	1fbd0 <__assert_fail@plt+0xcf50>
   1fc10:	mvn	r4, #21
   1fc14:	b	1fbd8 <__assert_fail@plt+0xcf58>
   1fc18:	mvn	r4, #11
   1fc1c:	b	1fbd8 <__assert_fail@plt+0xcf58>
   1fc20:	subs	r3, r0, #0
   1fc24:	beq	1fc44 <__assert_fail@plt+0xcfc4>
   1fc28:	push	{r4, lr}
   1fc2c:	mov	r1, #47	; 0x2f
   1fc30:	bl	12b3c <strrchr@plt>
   1fc34:	cmp	r0, #0
   1fc38:	movne	r3, #0
   1fc3c:	strbne	r3, [r0], #1
   1fc40:	pop	{r4, pc}
   1fc44:	mov	r0, r3
   1fc48:	bx	lr
   1fc4c:	push	{r4, r5, r6, lr}
   1fc50:	mov	r6, r1
   1fc54:	mov	r5, r2
   1fc58:	mov	r4, r0
   1fc5c:	bl	12a94 <__sched_cpualloc@plt>
   1fc60:	cmp	r0, #0
   1fc64:	popeq	{r4, r5, r6, pc}
   1fc68:	cmp	r6, #0
   1fc6c:	addne	r3, r4, #31
   1fc70:	lsrne	r3, r3, #5
   1fc74:	lslne	r3, r3, #2
   1fc78:	strne	r3, [r6]
   1fc7c:	cmp	r5, #0
   1fc80:	addne	r4, r4, #31
   1fc84:	bicne	r4, r4, #31
   1fc88:	strne	r4, [r5]
   1fc8c:	pop	{r4, r5, r6, pc}
   1fc90:	b	129f8 <__sched_cpufree@plt>
   1fc94:	ldr	r3, [pc, #212]	; 1fd70 <__assert_fail@plt+0xd0f0>
   1fc98:	ldr	r2, [pc, #212]	; 1fd74 <__assert_fail@plt+0xd0f4>
   1fc9c:	add	r3, pc, r3
   1fca0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1fca4:	sub	sp, sp, #12
   1fca8:	ldr	r9, [r3, r2]
   1fcac:	mov	r7, sp
   1fcb0:	mov	r1, r7
   1fcb4:	ldr	r3, [r9]
   1fcb8:	mov	r2, #0
   1fcbc:	mov	r0, #2048	; 0x800
   1fcc0:	str	r3, [sp, #4]
   1fcc4:	bl	1fc4c <__assert_fail@plt+0xcfcc>
   1fcc8:	subs	r4, r0, #0
   1fccc:	movne	r5, #2048	; 0x800
   1fcd0:	ldrne	r8, [pc, #160]	; 1fd78 <__assert_fail@plt+0xd0f8>
   1fcd4:	bne	1fd00 <__assert_fail@plt+0xd080>
   1fcd8:	b	1fd64 <__assert_fail@plt+0xd0e4>
   1fcdc:	mov	r0, r4
   1fce0:	lsl	r5, r5, #1
   1fce4:	bl	1fc90 <__assert_fail@plt+0xd010>
   1fce8:	mov	r0, r5
   1fcec:	mov	r2, #0
   1fcf0:	mov	r1, r7
   1fcf4:	bl	1fc4c <__assert_fail@plt+0xcfcc>
   1fcf8:	subs	r4, r0, #0
   1fcfc:	beq	1fd64 <__assert_fail@plt+0xd0e4>
   1fd00:	ldr	r2, [sp]
   1fd04:	mov	r1, #0
   1fd08:	mov	r0, r4
   1fd0c:	bl	12a04 <memset@plt>
   1fd10:	mov	r3, r4
   1fd14:	ldr	r2, [sp]
   1fd18:	mov	r1, #0
   1fd1c:	mov	r0, #242	; 0xf2
   1fd20:	bl	12914 <syscall@plt>
   1fd24:	subs	r6, r0, #0
   1fd28:	bge	1fd40 <__assert_fail@plt+0xd0c0>
   1fd2c:	bl	129a4 <__errno_location@plt>
   1fd30:	ldr	r3, [r0]
   1fd34:	cmp	r5, r8
   1fd38:	cmple	r3, #22
   1fd3c:	beq	1fcdc <__assert_fail@plt+0xd05c>
   1fd40:	mov	r0, r4
   1fd44:	bl	1fc90 <__assert_fail@plt+0xd010>
   1fd48:	lsl	r0, r6, #3
   1fd4c:	ldr	r2, [sp, #4]
   1fd50:	ldr	r3, [r9]
   1fd54:	cmp	r2, r3
   1fd58:	bne	1fd6c <__assert_fail@plt+0xd0ec>
   1fd5c:	add	sp, sp, #12
   1fd60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1fd64:	mvn	r0, #0
   1fd68:	b	1fd4c <__assert_fail@plt+0xd0cc>
   1fd6c:	bl	126e0 <__stack_chk_fail@plt>
   1fd70:	andeq	r4, r1, r8, lsr #1
   1fd74:	andeq	r0, r0, r8, lsr #5
   1fd78:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   1fd7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd80:	lsls	r7, r3, #3
   1fd84:	sub	sp, sp, #28
   1fd88:	mov	sl, r0
   1fd8c:	beq	1ff28 <__assert_fail@plt+0xd2a8>
   1fd90:	mov	r5, r3
   1fd94:	ldr	r3, [pc, #404]	; 1ff30 <__assert_fail@plt+0xd2b0>
   1fd98:	ldr	fp, [pc, #404]	; 1ff34 <__assert_fail@plt+0xd2b4>
   1fd9c:	add	r3, pc, r3
   1fda0:	str	r3, [sp, #16]
   1fda4:	ldr	r3, [pc, #396]	; 1ff38 <__assert_fail@plt+0xd2b8>
   1fda8:	mov	r9, r1
   1fdac:	add	r3, pc, r3
   1fdb0:	mov	r1, #0
   1fdb4:	mov	r6, r2
   1fdb8:	add	fp, pc, fp
   1fdbc:	str	r3, [sp, #20]
   1fdc0:	mov	ip, r1
   1fdc4:	mov	r8, r0
   1fdc8:	b	1fdd8 <__assert_fail@plt+0xd158>
   1fdcc:	cmp	r7, r4
   1fdd0:	mov	ip, r4
   1fdd4:	bls	1feb4 <__assert_fail@plt+0xd234>
   1fdd8:	cmp	r5, ip, lsr #3
   1fddc:	add	r4, ip, #1
   1fde0:	bls	1fdcc <__assert_fail@plt+0xd14c>
   1fde4:	lsr	r2, ip, #5
   1fde8:	and	r3, ip, #31
   1fdec:	ldr	r2, [r6, r2, lsl #2]
   1fdf0:	lsr	r3, r2, r3
   1fdf4:	tst	r3, #1
   1fdf8:	beq	1fdcc <__assert_fail@plt+0xd14c>
   1fdfc:	cmp	r7, r4
   1fe00:	bls	1fecc <__assert_fail@plt+0xd24c>
   1fe04:	cmp	r5, r4, lsr #3
   1fe08:	bls	1fecc <__assert_fail@plt+0xd24c>
   1fe0c:	lsr	r2, r4, #5
   1fe10:	and	r3, r4, #31
   1fe14:	ldr	r2, [r6, r2, lsl #2]
   1fe18:	lsr	r3, r2, r3
   1fe1c:	tst	r3, #1
   1fe20:	beq	1fecc <__assert_fail@plt+0xd24c>
   1fe24:	sub	r0, r7, #1
   1fe28:	sub	r0, r0, ip
   1fe2c:	mov	r2, #1
   1fe30:	b	1fe54 <__assert_fail@plt+0xd1d4>
   1fe34:	cmp	r5, r3, lsr #3
   1fe38:	bls	1fe68 <__assert_fail@plt+0xd1e8>
   1fe3c:	ldr	r3, [r6, lr, lsl #2]
   1fe40:	add	lr, r2, #1
   1fe44:	lsr	r3, r3, r1
   1fe48:	tst	r3, #1
   1fe4c:	beq	1fe68 <__assert_fail@plt+0xd1e8>
   1fe50:	mov	r2, lr
   1fe54:	add	r3, r2, r4
   1fe58:	cmp	r0, r2
   1fe5c:	and	r1, r3, #31
   1fe60:	lsr	lr, r3, #5
   1fe64:	bne	1fe34 <__assert_fail@plt+0xd1b4>
   1fe68:	cmp	r2, #1
   1fe6c:	beq	1ff04 <__assert_fail@plt+0xd284>
   1fe70:	add	r4, ip, r2
   1fe74:	str	r4, [sp, #8]
   1fe78:	stm	sp, {fp, ip}
   1fe7c:	mvn	r3, #0
   1fe80:	mov	r2, #1
   1fe84:	mov	r1, r9
   1fe88:	mov	r0, r8
   1fe8c:	bl	12c5c <__snprintf_chk@plt>
   1fe90:	cmp	r0, r9
   1fe94:	bcs	1fef8 <__assert_fail@plt+0xd278>
   1fe98:	add	r4, r4, #1
   1fe9c:	cmp	r7, r4
   1fea0:	add	r8, r8, r0
   1fea4:	sub	r9, r9, r0
   1fea8:	mov	r1, #1
   1feac:	mov	ip, r4
   1feb0:	bhi	1fdd8 <__assert_fail@plt+0xd158>
   1feb4:	sub	r8, r8, r1
   1feb8:	mov	r3, #0
   1febc:	mov	r0, sl
   1fec0:	strb	r3, [r8]
   1fec4:	add	sp, sp, #28
   1fec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fecc:	ldr	r3, [sp, #16]
   1fed0:	str	ip, [sp, #4]
   1fed4:	str	r3, [sp]
   1fed8:	mov	r2, #1
   1fedc:	mvn	r3, #0
   1fee0:	mov	r1, r9
   1fee4:	mov	r0, r8
   1fee8:	mov	r4, ip
   1feec:	bl	12c5c <__snprintf_chk@plt>
   1fef0:	cmp	r0, r9
   1fef4:	bcc	1fe98 <__assert_fail@plt+0xd218>
   1fef8:	mov	r0, #0
   1fefc:	add	sp, sp, #28
   1ff00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff04:	ldr	r3, [sp, #20]
   1ff08:	str	r4, [sp, #8]
   1ff0c:	str	r3, [sp]
   1ff10:	str	ip, [sp, #4]
   1ff14:	mvn	r3, #0
   1ff18:	mov	r1, r9
   1ff1c:	mov	r0, r8
   1ff20:	bl	12c5c <__snprintf_chk@plt>
   1ff24:	b	1fe90 <__assert_fail@plt+0xd210>
   1ff28:	mov	r8, r0
   1ff2c:	b	1feb8 <__assert_fail@plt+0xd238>
   1ff30:	andeq	r3, r0, r8, lsl #10
   1ff34:	strdeq	r3, [r0], -r4
   1ff38:	strdeq	r3, [r0], -r4
   1ff3c:	lsl	ip, r3, #3
   1ff40:	subs	ip, ip, #4
   1ff44:	push	{r4, r5, r6, r7, r8, lr}
   1ff48:	mov	r7, r0
   1ff4c:	mov	r6, r0
   1ff50:	bmi	2006c <__assert_fail@plt+0xd3ec>
   1ff54:	cmp	r1, #0
   1ff58:	beq	2006c <__assert_fail@plt+0xd3ec>
   1ff5c:	mov	r0, #0
   1ff60:	b	1ffb8 <__assert_fail@plt+0xd338>
   1ff64:	lsr	r8, r5, #5
   1ff68:	and	r5, r5, #31
   1ff6c:	ldr	r8, [r2, r8, lsl #2]
   1ff70:	lsr	r5, r8, r5
   1ff74:	tst	r5, #1
   1ff78:	beq	20030 <__assert_fail@plt+0xd3b0>
   1ff7c:	orr	r4, lr, #8
   1ff80:	cmp	r0, #0
   1ff84:	moveq	r0, r6
   1ff88:	cmp	r4, #9
   1ff8c:	mov	lr, r4
   1ff90:	addgt	lr, r4, #87	; 0x57
   1ff94:	ble	20040 <__assert_fail@plt+0xd3c0>
   1ff98:	mov	r4, r6
   1ff9c:	subs	ip, ip, #4
   1ffa0:	strb	lr, [r4], #1
   1ffa4:	bmi	20054 <__assert_fail@plt+0xd3d4>
   1ffa8:	sub	lr, r4, r7
   1ffac:	cmp	lr, r1
   1ffb0:	beq	20054 <__assert_fail@plt+0xd3d4>
   1ffb4:	mov	r6, r4
   1ffb8:	cmp	r3, ip, lsr #3
   1ffbc:	lsrhi	r4, ip, #5
   1ffc0:	andhi	lr, ip, #31
   1ffc4:	ldrhi	r4, [r2, r4, lsl #2]
   1ffc8:	movls	lr, #0
   1ffcc:	lsrhi	lr, r4, lr
   1ffd0:	add	r4, ip, #1
   1ffd4:	andhi	lr, lr, #1
   1ffd8:	cmp	r3, r4, lsr #3
   1ffdc:	bls	1fff8 <__assert_fail@plt+0xd378>
   1ffe0:	lsr	r5, r4, #5
   1ffe4:	and	r4, r4, #31
   1ffe8:	ldr	r5, [r2, r5, lsl #2]
   1ffec:	lsr	r4, r5, r4
   1fff0:	tst	r4, #1
   1fff4:	orrne	lr, lr, #2
   1fff8:	add	r4, ip, #2
   1fffc:	cmp	r3, r4, lsr #3
   20000:	bls	2001c <__assert_fail@plt+0xd39c>
   20004:	lsr	r5, r4, #5
   20008:	and	r4, r4, #31
   2000c:	ldr	r5, [r2, r5, lsl #2]
   20010:	lsr	r4, r5, r4
   20014:	tst	r4, #1
   20018:	orrne	lr, lr, #4
   2001c:	add	r5, ip, #3
   20020:	clz	r4, r0
   20024:	cmp	r3, r5, lsr #3
   20028:	lsr	r4, r4, #5
   2002c:	bhi	1ff64 <__assert_fail@plt+0xd2e4>
   20030:	cmp	lr, #0
   20034:	moveq	r4, #0
   20038:	cmp	r4, #0
   2003c:	movne	r0, r6
   20040:	mov	r4, r6
   20044:	add	lr, lr, #48	; 0x30
   20048:	subs	ip, ip, #4
   2004c:	strb	lr, [r4], #1
   20050:	bpl	1ffa8 <__assert_fail@plt+0xd328>
   20054:	cmp	r0, #0
   20058:	mov	r3, #0
   2005c:	strb	r3, [r4]
   20060:	popne	{r4, r5, r6, r7, r8, pc}
   20064:	mov	r0, r6
   20068:	pop	{r4, r5, r6, r7, r8, pc}
   2006c:	mov	r3, #0
   20070:	strb	r3, [r6], #-1
   20074:	mov	r0, r6
   20078:	pop	{r4, r5, r6, r7, r8, pc}
   2007c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20080:	mov	r7, r0
   20084:	mov	r6, r1
   20088:	mov	r9, r2
   2008c:	bl	12938 <strlen@plt>
   20090:	cmp	r0, #1
   20094:	sub	r0, r0, #1
   20098:	add	r4, r7, r0
   2009c:	bls	200ac <__assert_fail@plt+0xd42c>
   200a0:	ldrb	r3, [r7]
   200a4:	cmp	r3, #48	; 0x30
   200a8:	beq	201bc <__assert_fail@plt+0xd53c>
   200ac:	mov	r2, r9
   200b0:	mov	r1, #0
   200b4:	mov	r0, r6
   200b8:	bl	12a04 <memset@plt>
   200bc:	cmp	r7, r4
   200c0:	movls	r5, #0
   200c4:	movls	r8, #1
   200c8:	bls	20178 <__assert_fail@plt+0xd4f8>
   200cc:	b	201b4 <__assert_fail@plt+0xd534>
   200d0:	sxtb	r0, r3
   200d4:	cmn	r0, #1
   200d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   200dc:	tst	r3, #1
   200e0:	beq	200fc <__assert_fail@plt+0xd47c>
   200e4:	cmp	r9, r5, lsr #3
   200e8:	lsrhi	r0, r5, #5
   200ec:	andhi	r2, r5, #31
   200f0:	ldrhi	r1, [r6, r0, lsl #2]
   200f4:	orrhi	r2, r1, r8, lsl r2
   200f8:	strhi	r2, [r6, r0, lsl #2]
   200fc:	tst	r3, #2
   20100:	beq	20120 <__assert_fail@plt+0xd4a0>
   20104:	add	r2, r5, #1
   20108:	cmp	r9, r2, lsr #3
   2010c:	lsrhi	r0, r2, #5
   20110:	andhi	r2, r2, #31
   20114:	ldrhi	r1, [r6, r0, lsl #2]
   20118:	orrhi	r2, r1, r8, lsl r2
   2011c:	strhi	r2, [r6, r0, lsl #2]
   20120:	tst	r3, #4
   20124:	beq	20144 <__assert_fail@plt+0xd4c4>
   20128:	add	r2, r5, #2
   2012c:	cmp	r9, r2, lsr #3
   20130:	lsrhi	r0, r2, #5
   20134:	andhi	r2, r2, #31
   20138:	ldrhi	r1, [r6, r0, lsl #2]
   2013c:	orrhi	r2, r1, r8, lsl r2
   20140:	strhi	r2, [r6, r0, lsl #2]
   20144:	tst	r3, #8
   20148:	beq	20168 <__assert_fail@plt+0xd4e8>
   2014c:	add	r3, r5, #3
   20150:	cmp	r9, r3, lsr #3
   20154:	lsrhi	r1, r3, #5
   20158:	andhi	r3, r3, #31
   2015c:	ldrhi	r2, [r6, r1, lsl #2]
   20160:	orrhi	r3, r2, r8, lsl r3
   20164:	strhi	r3, [r6, r1, lsl #2]
   20168:	sub	r4, r4, #1
   2016c:	cmp	r7, r4
   20170:	add	r5, r5, #4
   20174:	bhi	201b4 <__assert_fail@plt+0xd534>
   20178:	ldrsb	sl, [r4]
   2017c:	cmp	sl, #44	; 0x2c
   20180:	ldrsbeq	sl, [r4, #-1]
   20184:	subeq	r4, r4, #1
   20188:	sub	r3, sl, #48	; 0x30
   2018c:	cmp	r3, #9
   20190:	bls	200d0 <__assert_fail@plt+0xd450>
   20194:	bl	128c0 <__ctype_tolower_loc@plt>
   20198:	ldr	r3, [r0]
   2019c:	ldr	r3, [r3, sl, lsl #2]
   201a0:	sub	r2, r3, #97	; 0x61
   201a4:	cmp	r2, #5
   201a8:	bhi	201cc <__assert_fail@plt+0xd54c>
   201ac:	sub	r3, r3, #87	; 0x57
   201b0:	b	200dc <__assert_fail@plt+0xd45c>
   201b4:	mov	r0, #0
   201b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201bc:	ldrb	r3, [r7, #1]
   201c0:	cmp	r3, #120	; 0x78
   201c4:	addeq	r7, r7, #2
   201c8:	b	200ac <__assert_fail@plt+0xd42c>
   201cc:	mvn	r0, #0
   201d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201d4:	ldr	ip, [pc, #584]	; 20424 <__assert_fail@plt+0xd7a4>
   201d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201dc:	add	ip, pc, ip
   201e0:	ldr	lr, [pc, #576]	; 20428 <__assert_fail@plt+0xd7a8>
   201e4:	mov	r6, r1
   201e8:	sub	sp, sp, #52	; 0x34
   201ec:	ldr	r1, [ip, lr]
   201f0:	mov	sl, r0
   201f4:	mov	lr, r1
   201f8:	str	r1, [sp, #16]
   201fc:	ldr	lr, [lr]
   20200:	mov	r1, #0
   20204:	mov	r0, r6
   20208:	str	r3, [sp, #8]
   2020c:	mov	r4, r2
   20210:	str	lr, [sp, #44]	; 0x2c
   20214:	lsl	r5, r2, #3
   20218:	bl	12a04 <memset@plt>
   2021c:	mov	r3, #0
   20220:	str	r3, [sp]
   20224:	ldr	r3, [pc, #512]	; 2042c <__assert_fail@plt+0xd7ac>
   20228:	cmp	sl, #0
   2022c:	add	r3, pc, r3
   20230:	str	r3, [sp, #4]
   20234:	ldr	r3, [pc, #500]	; 20430 <__assert_fail@plt+0xd7b0>
   20238:	add	r3, pc, r3
   2023c:	str	r3, [sp, #20]
   20240:	beq	20354 <__assert_fail@plt+0xd6d4>
   20244:	mov	r1, #44	; 0x2c
   20248:	mov	r0, sl
   2024c:	bl	12950 <strchr@plt>
   20250:	subs	r9, r0, #0
   20254:	addne	r9, r9, #1
   20258:	add	r3, sp, #31
   2025c:	add	r2, sp, #32
   20260:	ldr	r1, [sp, #4]
   20264:	mov	r0, sl
   20268:	str	r3, [sp, #12]
   2026c:	bl	12b6c <sscanf@plt>
   20270:	subs	r3, r0, #0
   20274:	str	r3, [sp]
   20278:	ble	203ec <__assert_fail@plt+0xd76c>
   2027c:	ldr	fp, [sp, #32]
   20280:	mov	r7, #1
   20284:	mov	r1, #45	; 0x2d
   20288:	mov	r0, sl
   2028c:	str	fp, [sp, #36]	; 0x24
   20290:	str	r7, [sp, #40]	; 0x28
   20294:	bl	12950 <strchr@plt>
   20298:	subs	r8, r0, #0
   2029c:	beq	202e0 <__assert_fail@plt+0xd660>
   202a0:	mov	r0, sl
   202a4:	mov	r1, #44	; 0x2c
   202a8:	bl	12950 <strchr@plt>
   202ac:	add	r8, r8, r7
   202b0:	subs	sl, r0, #0
   202b4:	beq	20388 <__assert_fail@plt+0xd708>
   202b8:	cmp	r8, #0
   202bc:	add	sl, sl, r7
   202c0:	beq	202e0 <__assert_fail@plt+0xd660>
   202c4:	clz	r7, sl
   202c8:	lsr	r7, r7, #5
   202cc:	cmp	sl, r8
   202d0:	movls	r2, r7
   202d4:	orrhi	r2, r7, #1
   202d8:	cmp	r2, #0
   202dc:	bne	20390 <__assert_fail@plt+0xd710>
   202e0:	mov	lr, fp
   202e4:	ldr	r3, [sp, #8]
   202e8:	adds	ip, r3, #0
   202ec:	movne	ip, #1
   202f0:	cmp	r5, fp
   202f4:	movhi	r2, #0
   202f8:	andls	r2, ip, #1
   202fc:	cmp	r2, #0
   20300:	bne	20368 <__assert_fail@plt+0xd6e8>
   20304:	ldr	r7, [sp, #40]	; 0x28
   20308:	mov	r8, #1
   2030c:	b	20324 <__assert_fail@plt+0xd6a4>
   20310:	cmp	fp, r5
   20314:	movcc	r3, #0
   20318:	andcs	r3, ip, #1
   2031c:	cmp	r3, #0
   20320:	bne	20368 <__assert_fail@plt+0xd6e8>
   20324:	cmp	r4, fp, lsr #3
   20328:	lsrhi	r1, fp, #5
   2032c:	andhi	r3, fp, #31
   20330:	ldrhi	r2, [r6, r1, lsl #2]
   20334:	add	fp, fp, r7
   20338:	orrhi	r3, r2, r8, lsl r3
   2033c:	strhi	r3, [r6, r1, lsl #2]
   20340:	cmp	fp, lr
   20344:	bls	20310 <__assert_fail@plt+0xd690>
   20348:	mov	sl, r9
   2034c:	cmp	sl, #0
   20350:	bne	20244 <__assert_fail@plt+0xd5c4>
   20354:	ldr	r3, [sp]
   20358:	sub	r0, r3, #2
   2035c:	clz	r0, r0
   20360:	lsr	r0, r0, #5
   20364:	b	2036c <__assert_fail@plt+0xd6ec>
   20368:	mov	r0, #2
   2036c:	ldr	r3, [sp, #16]
   20370:	ldr	r2, [sp, #44]	; 0x2c
   20374:	ldr	r3, [r3]
   20378:	cmp	r2, r3
   2037c:	bne	20420 <__assert_fail@plt+0xd7a0>
   20380:	add	sp, sp, #52	; 0x34
   20384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20388:	cmp	r8, #0
   2038c:	beq	202e0 <__assert_fail@plt+0xd660>
   20390:	ldr	r3, [sp, #12]
   20394:	add	r2, sp, #36	; 0x24
   20398:	ldr	r1, [sp, #20]
   2039c:	mov	r0, r8
   203a0:	bl	12b6c <sscanf@plt>
   203a4:	subs	r3, r0, #0
   203a8:	str	r3, [sp]
   203ac:	ble	203ec <__assert_fail@plt+0xd76c>
   203b0:	mov	r0, r8
   203b4:	mov	r1, #58	; 0x3a
   203b8:	bl	12950 <strchr@plt>
   203bc:	cmp	r0, #0
   203c0:	beq	203dc <__assert_fail@plt+0xd75c>
   203c4:	adds	r0, r0, #1
   203c8:	beq	203dc <__assert_fail@plt+0xd75c>
   203cc:	cmp	r0, sl
   203d0:	orrcc	r7, r7, #1
   203d4:	cmp	r7, #0
   203d8:	bne	203f4 <__assert_fail@plt+0xd774>
   203dc:	ldr	fp, [sp, #32]
   203e0:	ldr	lr, [sp, #36]	; 0x24
   203e4:	cmp	fp, lr
   203e8:	bls	202e4 <__assert_fail@plt+0xd664>
   203ec:	mov	r0, #1
   203f0:	b	2036c <__assert_fail@plt+0xd6ec>
   203f4:	ldr	r3, [sp, #12]
   203f8:	add	r2, sp, #40	; 0x28
   203fc:	ldr	r1, [sp, #20]
   20400:	bl	12b6c <sscanf@plt>
   20404:	subs	r3, r0, #0
   20408:	str	r3, [sp]
   2040c:	ble	203ec <__assert_fail@plt+0xd76c>
   20410:	ldr	r3, [sp, #40]	; 0x28
   20414:	cmp	r3, #0
   20418:	bne	203dc <__assert_fail@plt+0xd75c>
   2041c:	b	203ec <__assert_fail@plt+0xd76c>
   20420:	bl	126e0 <__stack_chk_fail@plt>
   20424:	andeq	r3, r1, r8, ror #22
   20428:	andeq	r0, r0, r8, lsr #5
   2042c:	muleq	r0, r0, r0
   20430:	andeq	r3, r0, r4, lsl #1
   20434:	eor	r1, r1, #-2147483648	; 0x80000000
   20438:	b	20440 <__assert_fail@plt+0xd7c0>
   2043c:	eor	r3, r3, #-2147483648	; 0x80000000
   20440:	push	{r4, r5, lr}
   20444:	lsl	r4, r1, #1
   20448:	lsl	r5, r3, #1
   2044c:	teq	r4, r5
   20450:	teqeq	r0, r2
   20454:	orrsne	ip, r4, r0
   20458:	orrsne	ip, r5, r2
   2045c:	mvnsne	ip, r4, asr #21
   20460:	mvnsne	ip, r5, asr #21
   20464:	beq	20650 <__assert_fail@plt+0xd9d0>
   20468:	lsr	r4, r4, #21
   2046c:	rsbs	r5, r4, r5, lsr #21
   20470:	rsblt	r5, r5, #0
   20474:	ble	20494 <__assert_fail@plt+0xd814>
   20478:	add	r4, r4, r5
   2047c:	eor	r2, r0, r2
   20480:	eor	r3, r1, r3
   20484:	eor	r0, r2, r0
   20488:	eor	r1, r3, r1
   2048c:	eor	r2, r0, r2
   20490:	eor	r3, r1, r3
   20494:	cmp	r5, #54	; 0x36
   20498:	pophi	{r4, r5, pc}
   2049c:	tst	r1, #-2147483648	; 0x80000000
   204a0:	lsl	r1, r1, #12
   204a4:	mov	ip, #1048576	; 0x100000
   204a8:	orr	r1, ip, r1, lsr #12
   204ac:	beq	204b8 <__assert_fail@plt+0xd838>
   204b0:	rsbs	r0, r0, #0
   204b4:	rsc	r1, r1, #0
   204b8:	tst	r3, #-2147483648	; 0x80000000
   204bc:	lsl	r3, r3, #12
   204c0:	orr	r3, ip, r3, lsr #12
   204c4:	beq	204d0 <__assert_fail@plt+0xd850>
   204c8:	rsbs	r2, r2, #0
   204cc:	rsc	r3, r3, #0
   204d0:	teq	r4, r5
   204d4:	beq	20638 <__assert_fail@plt+0xd9b8>
   204d8:	sub	r4, r4, #1
   204dc:	rsbs	lr, r5, #32
   204e0:	blt	204fc <__assert_fail@plt+0xd87c>
   204e4:	lsl	ip, r2, lr
   204e8:	adds	r0, r0, r2, lsr r5
   204ec:	adc	r1, r1, #0
   204f0:	adds	r0, r0, r3, lsl lr
   204f4:	adcs	r1, r1, r3, asr r5
   204f8:	b	20518 <__assert_fail@plt+0xd898>
   204fc:	sub	r5, r5, #32
   20500:	add	lr, lr, #32
   20504:	cmp	r2, #1
   20508:	lsl	ip, r3, lr
   2050c:	orrcs	ip, ip, #2
   20510:	adds	r0, r0, r3, asr r5
   20514:	adcs	r1, r1, r3, asr #31
   20518:	and	r5, r1, #-2147483648	; 0x80000000
   2051c:	bpl	2052c <__assert_fail@plt+0xd8ac>
   20520:	rsbs	ip, ip, #0
   20524:	rscs	r0, r0, #0
   20528:	rsc	r1, r1, #0
   2052c:	cmp	r1, #1048576	; 0x100000
   20530:	bcc	20570 <__assert_fail@plt+0xd8f0>
   20534:	cmp	r1, #2097152	; 0x200000
   20538:	bcc	20558 <__assert_fail@plt+0xd8d8>
   2053c:	lsrs	r1, r1, #1
   20540:	rrxs	r0, r0
   20544:	rrx	ip, ip
   20548:	add	r4, r4, #1
   2054c:	lsl	r2, r4, #21
   20550:	cmn	r2, #4194304	; 0x400000
   20554:	bcs	206b0 <__assert_fail@plt+0xda30>
   20558:	cmp	ip, #-2147483648	; 0x80000000
   2055c:	lsrseq	ip, r0, #1
   20560:	adcs	r0, r0, #0
   20564:	adc	r1, r1, r4, lsl #20
   20568:	orr	r1, r1, r5
   2056c:	pop	{r4, r5, pc}
   20570:	lsls	ip, ip, #1
   20574:	adcs	r0, r0, r0
   20578:	adc	r1, r1, r1
   2057c:	tst	r1, #1048576	; 0x100000
   20580:	sub	r4, r4, #1
   20584:	bne	20558 <__assert_fail@plt+0xd8d8>
   20588:	teq	r1, #0
   2058c:	moveq	r1, r0
   20590:	moveq	r0, #0
   20594:	clz	r3, r1
   20598:	addeq	r3, r3, #32
   2059c:	sub	r3, r3, #11
   205a0:	subs	r2, r3, #32
   205a4:	bge	205c8 <__assert_fail@plt+0xd948>
   205a8:	adds	r2, r2, #12
   205ac:	ble	205c4 <__assert_fail@plt+0xd944>
   205b0:	add	ip, r2, #20
   205b4:	rsb	r2, r2, #12
   205b8:	lsl	r0, r1, ip
   205bc:	lsr	r1, r1, r2
   205c0:	b	205d8 <__assert_fail@plt+0xd958>
   205c4:	add	r2, r2, #20
   205c8:	rsble	ip, r2, #32
   205cc:	lsl	r1, r1, r2
   205d0:	orrle	r1, r1, r0, lsr ip
   205d4:	lslle	r0, r0, r2
   205d8:	subs	r4, r4, r3
   205dc:	addge	r1, r1, r4, lsl #20
   205e0:	orrge	r1, r1, r5
   205e4:	popge	{r4, r5, pc}
   205e8:	mvn	r4, r4
   205ec:	subs	r4, r4, #31
   205f0:	bge	2062c <__assert_fail@plt+0xd9ac>
   205f4:	adds	r4, r4, #12
   205f8:	bgt	20614 <__assert_fail@plt+0xd994>
   205fc:	add	r4, r4, #20
   20600:	rsb	r2, r4, #32
   20604:	lsr	r0, r0, r4
   20608:	orr	r0, r0, r1, lsl r2
   2060c:	orr	r1, r5, r1, lsr r4
   20610:	pop	{r4, r5, pc}
   20614:	rsb	r4, r4, #12
   20618:	rsb	r2, r4, #32
   2061c:	lsr	r0, r0, r2
   20620:	orr	r0, r0, r1, lsl r4
   20624:	mov	r1, r5
   20628:	pop	{r4, r5, pc}
   2062c:	lsr	r0, r1, r4
   20630:	mov	r1, r5
   20634:	pop	{r4, r5, pc}
   20638:	teq	r4, #0
   2063c:	eor	r3, r3, #1048576	; 0x100000
   20640:	eoreq	r1, r1, #1048576	; 0x100000
   20644:	addeq	r4, r4, #1
   20648:	subne	r5, r5, #1
   2064c:	b	204d8 <__assert_fail@plt+0xd858>
   20650:	mvns	ip, r4, asr #21
   20654:	mvnsne	ip, r5, asr #21
   20658:	beq	206c0 <__assert_fail@plt+0xda40>
   2065c:	teq	r4, r5
   20660:	teqeq	r0, r2
   20664:	beq	20678 <__assert_fail@plt+0xd9f8>
   20668:	orrs	ip, r4, r0
   2066c:	moveq	r1, r3
   20670:	moveq	r0, r2
   20674:	pop	{r4, r5, pc}
   20678:	teq	r1, r3
   2067c:	movne	r1, #0
   20680:	movne	r0, #0
   20684:	popne	{r4, r5, pc}
   20688:	lsrs	ip, r4, #21
   2068c:	bne	206a0 <__assert_fail@plt+0xda20>
   20690:	lsls	r0, r0, #1
   20694:	adcs	r1, r1, r1
   20698:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2069c:	pop	{r4, r5, pc}
   206a0:	adds	r4, r4, #4194304	; 0x400000
   206a4:	addcc	r1, r1, #1048576	; 0x100000
   206a8:	popcc	{r4, r5, pc}
   206ac:	and	r5, r1, #-2147483648	; 0x80000000
   206b0:	orr	r1, r5, #2130706432	; 0x7f000000
   206b4:	orr	r1, r1, #15728640	; 0xf00000
   206b8:	mov	r0, #0
   206bc:	pop	{r4, r5, pc}
   206c0:	mvns	ip, r4, asr #21
   206c4:	movne	r1, r3
   206c8:	movne	r0, r2
   206cc:	mvnseq	ip, r5, asr #21
   206d0:	movne	r3, r1
   206d4:	movne	r2, r0
   206d8:	orrs	r4, r0, r1, lsl #12
   206dc:	orrseq	r5, r2, r3, lsl #12
   206e0:	teqeq	r1, r3
   206e4:	orrne	r1, r1, #524288	; 0x80000
   206e8:	pop	{r4, r5, pc}
   206ec:	teq	r0, #0
   206f0:	moveq	r1, #0
   206f4:	bxeq	lr
   206f8:	push	{r4, r5, lr}
   206fc:	mov	r4, #1024	; 0x400
   20700:	add	r4, r4, #50	; 0x32
   20704:	mov	r5, #0
   20708:	mov	r1, #0
   2070c:	b	20588 <__assert_fail@plt+0xd908>
   20710:	teq	r0, #0
   20714:	moveq	r1, #0
   20718:	bxeq	lr
   2071c:	push	{r4, r5, lr}
   20720:	mov	r4, #1024	; 0x400
   20724:	add	r4, r4, #50	; 0x32
   20728:	ands	r5, r0, #-2147483648	; 0x80000000
   2072c:	rsbmi	r0, r0, #0
   20730:	mov	r1, #0
   20734:	b	20588 <__assert_fail@plt+0xd908>
   20738:	lsls	r2, r0, #1
   2073c:	asr	r1, r2, #3
   20740:	rrx	r1, r1
   20744:	lsl	r0, r2, #28
   20748:	andsne	r3, r2, #-16777216	; 0xff000000
   2074c:	teqne	r3, #-16777216	; 0xff000000
   20750:	eorne	r1, r1, #939524096	; 0x38000000
   20754:	bxne	lr
   20758:	bics	r2, r2, #-16777216	; 0xff000000
   2075c:	bxeq	lr
   20760:	teq	r3, #-16777216	; 0xff000000
   20764:	orreq	r1, r1, #524288	; 0x80000
   20768:	bxeq	lr
   2076c:	push	{r4, r5, lr}
   20770:	mov	r4, #896	; 0x380
   20774:	and	r5, r1, #-2147483648	; 0x80000000
   20778:	bic	r1, r1, #-2147483648	; 0x80000000
   2077c:	b	20588 <__assert_fail@plt+0xd908>
   20780:	orrs	r2, r0, r1
   20784:	bxeq	lr
   20788:	push	{r4, r5, lr}
   2078c:	mov	r5, #0
   20790:	b	207b0 <__assert_fail@plt+0xdb30>
   20794:	orrs	r2, r0, r1
   20798:	bxeq	lr
   2079c:	push	{r4, r5, lr}
   207a0:	ands	r5, r1, #-2147483648	; 0x80000000
   207a4:	bpl	207b0 <__assert_fail@plt+0xdb30>
   207a8:	rsbs	r0, r0, #0
   207ac:	rsc	r1, r1, #0
   207b0:	mov	r4, #1024	; 0x400
   207b4:	add	r4, r4, #50	; 0x32
   207b8:	lsrs	ip, r1, #22
   207bc:	beq	2052c <__assert_fail@plt+0xd8ac>
   207c0:	mov	r2, #3
   207c4:	lsrs	ip, ip, #3
   207c8:	addne	r2, r2, #3
   207cc:	lsrs	ip, ip, #3
   207d0:	addne	r2, r2, #3
   207d4:	add	r2, r2, ip, lsr #3
   207d8:	rsb	r3, r2, #32
   207dc:	lsl	ip, r0, r3
   207e0:	lsr	r0, r0, r2
   207e4:	orr	r0, r0, r1, lsl r3
   207e8:	lsr	r1, r1, r2
   207ec:	add	r4, r4, r2
   207f0:	b	2052c <__assert_fail@plt+0xd8ac>
   207f4:	cmp	r3, #0
   207f8:	cmpeq	r2, #0
   207fc:	bne	20814 <__assert_fail@plt+0xdb94>
   20800:	cmp	r1, #0
   20804:	cmpeq	r0, #0
   20808:	mvnne	r1, #0
   2080c:	mvnne	r0, #0
   20810:	b	20830 <__assert_fail@plt+0xdbb0>
   20814:	sub	sp, sp, #8
   20818:	push	{sp, lr}
   2081c:	bl	20840 <__assert_fail@plt+0xdbc0>
   20820:	ldr	lr, [sp, #4]
   20824:	add	sp, sp, #8
   20828:	pop	{r2, r3}
   2082c:	bx	lr
   20830:	push	{r1, lr}
   20834:	mov	r0, #8
   20838:	bl	124f4 <raise@plt>
   2083c:	pop	{r1, pc}
   20840:	cmp	r1, r3
   20844:	cmpeq	r0, r2
   20848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2084c:	mov	r4, r0
   20850:	movcc	r0, #0
   20854:	mov	r5, r1
   20858:	ldr	lr, [sp, #36]	; 0x24
   2085c:	movcc	r1, r0
   20860:	bcc	2095c <__assert_fail@plt+0xdcdc>
   20864:	cmp	r3, #0
   20868:	clzeq	ip, r2
   2086c:	clzne	ip, r3
   20870:	addeq	ip, ip, #32
   20874:	cmp	r5, #0
   20878:	clzeq	r1, r4
   2087c:	addeq	r1, r1, #32
   20880:	clzne	r1, r5
   20884:	sub	ip, ip, r1
   20888:	sub	sl, ip, #32
   2088c:	lsl	r9, r3, ip
   20890:	rsb	fp, ip, #32
   20894:	orr	r9, r9, r2, lsl sl
   20898:	orr	r9, r9, r2, lsr fp
   2089c:	lsl	r8, r2, ip
   208a0:	cmp	r5, r9
   208a4:	cmpeq	r4, r8
   208a8:	movcc	r0, #0
   208ac:	movcc	r1, r0
   208b0:	bcc	208cc <__assert_fail@plt+0xdc4c>
   208b4:	mov	r0, #1
   208b8:	subs	r4, r4, r8
   208bc:	lsl	r1, r0, sl
   208c0:	orr	r1, r1, r0, lsr fp
   208c4:	lsl	r0, r0, ip
   208c8:	sbc	r5, r5, r9
   208cc:	cmp	ip, #0
   208d0:	beq	2095c <__assert_fail@plt+0xdcdc>
   208d4:	lsr	r6, r8, #1
   208d8:	orr	r6, r6, r9, lsl #31
   208dc:	lsr	r7, r9, #1
   208e0:	mov	r2, ip
   208e4:	b	20908 <__assert_fail@plt+0xdc88>
   208e8:	subs	r3, r4, r6
   208ec:	sbc	r8, r5, r7
   208f0:	adds	r3, r3, r3
   208f4:	adc	r8, r8, r8
   208f8:	adds	r4, r3, #1
   208fc:	adc	r5, r8, #0
   20900:	subs	r2, r2, #1
   20904:	beq	20924 <__assert_fail@plt+0xdca4>
   20908:	cmp	r5, r7
   2090c:	cmpeq	r4, r6
   20910:	bcs	208e8 <__assert_fail@plt+0xdc68>
   20914:	adds	r4, r4, r4
   20918:	adc	r5, r5, r5
   2091c:	subs	r2, r2, #1
   20920:	bne	20908 <__assert_fail@plt+0xdc88>
   20924:	lsr	r3, r4, ip
   20928:	orr	r3, r3, r5, lsl fp
   2092c:	lsr	r2, r5, ip
   20930:	orr	r3, r3, r5, lsr sl
   20934:	adds	r0, r0, r4
   20938:	mov	r4, r3
   2093c:	lsl	r3, r2, ip
   20940:	orr	r3, r3, r4, lsl sl
   20944:	lsl	ip, r4, ip
   20948:	orr	r3, r3, r4, lsr fp
   2094c:	adc	r1, r1, r5
   20950:	subs	r0, r0, ip
   20954:	mov	r5, r2
   20958:	sbc	r1, r1, r3
   2095c:	cmp	lr, #0
   20960:	strdne	r4, [lr]
   20964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20968:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2096c:	mov	r7, r0
   20970:	ldr	r6, [pc, #72]	; 209c0 <__assert_fail@plt+0xdd40>
   20974:	ldr	r5, [pc, #72]	; 209c4 <__assert_fail@plt+0xdd44>
   20978:	add	r6, pc, r6
   2097c:	add	r5, pc, r5
   20980:	sub	r6, r6, r5
   20984:	mov	r8, r1
   20988:	mov	r9, r2
   2098c:	bl	12498 <mnt_table_set_parser_errcb@plt-0x20>
   20990:	asrs	r6, r6, #2
   20994:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   20998:	mov	r4, #0
   2099c:	add	r4, r4, #1
   209a0:	ldr	r3, [r5], #4
   209a4:	mov	r2, r9
   209a8:	mov	r1, r8
   209ac:	mov	r0, r7
   209b0:	blx	r3
   209b4:	cmp	r6, r4
   209b8:	bne	2099c <__assert_fail@plt+0xdd1c>
   209bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   209c0:	andeq	r3, r1, ip, lsl #5
   209c4:	andeq	r3, r1, r4, lsl #5
   209c8:	bx	lr
   209cc:	ldr	r3, [pc, #12]	; 209e0 <__assert_fail@plt+0xdd60>
   209d0:	mov	r1, #0
   209d4:	add	r3, pc, r3
   209d8:	ldr	r2, [r3]
   209dc:	b	129c8 <__cxa_atexit@plt>
   209e0:	andeq	r3, r1, r8, lsr #12

Disassembly of section .fini:

000209e4 <.fini>:
   209e4:	push	{r3, lr}
   209e8:	pop	{r3, pc}
