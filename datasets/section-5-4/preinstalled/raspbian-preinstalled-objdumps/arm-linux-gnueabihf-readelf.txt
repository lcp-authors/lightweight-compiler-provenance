
raspbian-preinstalled/arm-linux-gnueabihf-readelf:     file format elf32-littlearm


Disassembly of section .init:

00010ed4 <.init>:
   10ed4:	push	{r3, lr}
   10ed8:	bl	11b04 <__assert_fail@plt+0x8f8>
   10edc:	pop	{r3, pc}

Disassembly of section .plt:

00010ee0 <calloc@plt-0x14>:
   10ee0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ee4:	ldr	lr, [pc, #4]	; 10ef0 <calloc@plt-0x4>
   10ee8:	add	lr, pc, lr
   10eec:	ldr	pc, [lr, #8]!
   10ef0:	andeq	r8, r8, r0, lsl r1

00010ef4 <calloc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #136, 20	; 0x88000
   10efc:	ldr	pc, [ip, #272]!	; 0x110

00010f00 <strstr@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #136, 20	; 0x88000
   10f08:	ldr	pc, [ip, #264]!	; 0x108

00010f0c <raise@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #136, 20	; 0x88000
   10f14:	ldr	pc, [ip, #256]!	; 0x100

00010f18 <strcmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #136, 20	; 0x88000
   10f20:	ldr	pc, [ip, #248]!	; 0xf8

00010f24 <printf@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #136, 20	; 0x88000
   10f2c:	ldr	pc, [ip, #240]!	; 0xf0

00010f30 <inflate@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #136, 20	; 0x88000
   10f38:	ldr	pc, [ip, #232]!	; 0xe8

00010f3c <fflush@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #136, 20	; 0x88000
   10f44:	ldr	pc, [ip, #224]!	; 0xe0

00010f48 <memmove@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #136, 20	; 0x88000
   10f50:	ldr	pc, [ip, #216]!	; 0xd8

00010f54 <free@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #136, 20	; 0x88000
   10f5c:	ldr	pc, [ip, #208]!	; 0xd0

00010f60 <ferror@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #136, 20	; 0x88000
   10f68:	ldr	pc, [ip, #200]!	; 0xc8

00010f6c <memcpy@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #136, 20	; 0x88000
   10f74:	ldr	pc, [ip, #192]!	; 0xc0

00010f78 <ftell@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #136, 20	; 0x88000
   10f80:	ldr	pc, [ip, #184]!	; 0xb8

00010f84 <stpcpy@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #136, 20	; 0x88000
   10f8c:	ldr	pc, [ip, #176]!	; 0xb0

00010f90 <dcgettext@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #136, 20	; 0x88000
   10f98:	ldr	pc, [ip, #168]!	; 0xa8

00010f9c <strdup@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #136, 20	; 0x88000
   10fa4:	ldr	pc, [ip, #160]!	; 0xa0

00010fa8 <rewind@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #136, 20	; 0x88000
   10fb0:	ldr	pc, [ip, #152]!	; 0x98

00010fb4 <realloc@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #136, 20	; 0x88000
   10fbc:	ldr	pc, [ip, #144]!	; 0x90

00010fc0 <textdomain@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #136, 20	; 0x88000
   10fc8:	ldr	pc, [ip, #136]!	; 0x88

00010fcc <fwrite@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #136, 20	; 0x88000
   10fd4:	ldr	pc, [ip, #128]!	; 0x80

00010fd8 <strcat@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #136, 20	; 0x88000
   10fe0:	ldr	pc, [ip, #120]!	; 0x78

00010fe4 <__ctype_get_mb_cur_max@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #136, 20	; 0x88000
   10fec:	ldr	pc, [ip, #112]!	; 0x70

00010ff0 <strcpy@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #136, 20	; 0x88000
   10ff8:	ldr	pc, [ip, #104]!	; 0x68

00010ffc <fread@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #136, 20	; 0x88000
   11004:	ldr	pc, [ip, #96]!	; 0x60

00011008 <mbrtowc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #136, 20	; 0x88000
   11010:	ldr	pc, [ip, #88]!	; 0x58

00011014 <puts@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #136, 20	; 0x88000
   1101c:	ldr	pc, [ip, #80]!	; 0x50

00011020 <malloc@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #136, 20	; 0x88000
   11028:	ldr	pc, [ip, #72]!	; 0x48

0001102c <__libc_start_main@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #136, 20	; 0x88000
   11034:	ldr	pc, [ip, #64]!	; 0x40

00011038 <strerror@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #136, 20	; 0x88000
   11040:	ldr	pc, [ip, #56]!	; 0x38

00011044 <__gmon_start__@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #136, 20	; 0x88000
   1104c:	ldr	pc, [ip, #48]!	; 0x30

00011050 <getopt_long@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #136, 20	; 0x88000
   11058:	ldr	pc, [ip, #40]!	; 0x28

0001105c <exit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #136, 20	; 0x88000
   11064:	ldr	pc, [ip, #32]!

00011068 <inflateEnd@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #136, 20	; 0x88000
   11070:	ldr	pc, [ip, #24]!

00011074 <strtoul@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #136, 20	; 0x88000
   1107c:	ldr	pc, [ip, #16]!

00011080 <strlen@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #136, 20	; 0x88000
   11088:	ldr	pc, [ip, #8]!

0001108c <strchr@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #136, 20	; 0x88000
   11094:	ldr	pc, [ip, #0]!

00011098 <fprintf@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #552960	; 0x87000
   110a0:	ldr	pc, [ip, #4088]!	; 0xff8

000110a4 <__errno_location@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #552960	; 0x87000
   110ac:	ldr	pc, [ip, #4080]!	; 0xff0

000110b0 <snprintf@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #552960	; 0x87000
   110b8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110bc <memset@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #552960	; 0x87000
   110c4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110c8 <putchar@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #552960	; 0x87000
   110d0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110d4 <strncpy@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #552960	; 0x87000
   110dc:	ldr	pc, [ip, #4048]!	; 0xfd0

000110e0 <fscanf@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #552960	; 0x87000
   110e8:	ldr	pc, [ip, #4040]!	; 0xfc8

000110ec <gmtime@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #552960	; 0x87000
   110f4:	ldr	pc, [ip, #4032]!	; 0xfc0

000110f8 <fclose@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #552960	; 0x87000
   11100:	ldr	pc, [ip, #4024]!	; 0xfb8

00011104 <strnlen@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #552960	; 0x87000
   1110c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011110 <inflateInit_@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #552960	; 0x87000
   11118:	ldr	pc, [ip, #4008]!	; 0xfa8

0001111c <setlocale@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #552960	; 0x87000
   11124:	ldr	pc, [ip, #4000]!	; 0xfa0

00011128 <strrchr@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #552960	; 0x87000
   11130:	ldr	pc, [ip, #3992]!	; 0xf98

00011134 <vfprintf@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #552960	; 0x87000
   1113c:	ldr	pc, [ip, #3984]!	; 0xf90

00011140 <fputc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #552960	; 0x87000
   11148:	ldr	pc, [ip, #3976]!	; 0xf88

0001114c <sprintf@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #552960	; 0x87000
   11154:	ldr	pc, [ip, #3968]!	; 0xf80

00011158 <putc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #552960	; 0x87000
   11160:	ldr	pc, [ip, #3960]!	; 0xf78

00011164 <fopen64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #552960	; 0x87000
   1116c:	ldr	pc, [ip, #3952]!	; 0xf70

00011170 <qsort@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #552960	; 0x87000
   11178:	ldr	pc, [ip, #3944]!	; 0xf68

0001117c <inflateReset@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #552960	; 0x87000
   11184:	ldr	pc, [ip, #3936]!	; 0xf60

00011188 <sbrk@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #552960	; 0x87000
   11190:	ldr	pc, [ip, #3928]!	; 0xf58

00011194 <bindtextdomain@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #552960	; 0x87000
   1119c:	ldr	pc, [ip, #3920]!	; 0xf50

000111a0 <fseek@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #552960	; 0x87000
   111a8:	ldr	pc, [ip, #3912]!	; 0xf48

000111ac <strncat@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #552960	; 0x87000
   111b4:	ldr	pc, [ip, #3904]!	; 0xf40

000111b8 <__xstat64@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #552960	; 0x87000
   111c0:	ldr	pc, [ip, #3896]!	; 0xf38

000111c4 <fputs@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #552960	; 0x87000
   111cc:	ldr	pc, [ip, #3888]!	; 0xf30

000111d0 <strncmp@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #552960	; 0x87000
   111d8:	ldr	pc, [ip, #3880]!	; 0xf28

000111dc <abort@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #552960	; 0x87000
   111e4:	ldr	pc, [ip, #3872]!	; 0xf20

000111e8 <getc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #552960	; 0x87000
   111f0:	ldr	pc, [ip, #3864]!	; 0xf18

000111f4 <realpath@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #552960	; 0x87000
   111fc:	ldr	pc, [ip, #3856]!	; 0xf10

00011200 <dcngettext@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #552960	; 0x87000
   11208:	ldr	pc, [ip, #3848]!	; 0xf08

0001120c <__assert_fail@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #552960	; 0x87000
   11214:	ldr	pc, [ip, #3840]!	; 0xf00

Disassembly of section .text:

00011218 <error@@Base-0x43694>:
   11218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1121c:	sub	sp, sp, #140	; 0x8c
   11220:	ldr	r5, [pc, #2080]	; 11a48 <__assert_fail@plt+0x83c>
   11224:	str	r0, [sp, #20]
   11228:	str	r1, [sp, #16]
   1122c:	mov	r0, #5
   11230:	ldr	r1, [pc, #2068]	; 11a4c <__assert_fail@plt+0x840>
   11234:	bl	1111c <setlocale@plt>
   11238:	ldr	r1, [pc, #2060]	; 11a4c <__assert_fail@plt+0x840>
   1123c:	mov	r0, #0
   11240:	bl	1111c <setlocale@plt>
   11244:	ldr	r1, [pc, #2052]	; 11a50 <__assert_fail@plt+0x844>
   11248:	ldr	r0, [pc, #2052]	; 11a54 <__assert_fail@plt+0x848>
   1124c:	bl	11194 <bindtextdomain@plt>
   11250:	ldr	r0, [pc, #2044]	; 11a54 <__assert_fail@plt+0x848>
   11254:	bl	10fc0 <textdomain@plt>
   11258:	add	r1, sp, #16
   1125c:	add	r0, sp, #20
   11260:	bl	55ec8 <warn@@Base+0x10f8>
   11264:	ldr	r8, [sp, #20]
   11268:	ldr	r3, [pc, #2024]	; 11a58 <__assert_fail@plt+0x84c>
   1126c:	cmp	r8, #1
   11270:	str	r3, [r5, #-3832]	; 0xfffff108
   11274:	ldr	fp, [sp, #16]
   11278:	ble	11424 <__assert_fail@plt+0x218>
   1127c:	ldr	r3, [pc, #2008]	; 11a5c <__assert_fail@plt+0x850>
   11280:	ldr	sl, [pc, #2008]	; 11a60 <__assert_fail@plt+0x854>
   11284:	ldr	r4, [pc, #2008]	; 11a64 <__assert_fail@plt+0x858>
   11288:	ldr	r7, [pc, #2008]	; 11a68 <__assert_fail@plt+0x85c>
   1128c:	add	r9, r3, #732	; 0x2dc
   11290:	mov	r6, #0
   11294:	str	r6, [sp]
   11298:	mov	r3, r9
   1129c:	mov	r2, sl
   112a0:	mov	r1, fp
   112a4:	mov	r0, r8
   112a8:	bl	11050 <getopt_long@plt>
   112ac:	cmn	r0, #1
   112b0:	beq	11694 <__assert_fail@plt+0x488>
   112b4:	cmp	r0, #104	; 0x68
   112b8:	beq	11678 <__assert_fail@plt+0x46c>
   112bc:	ble	11314 <__assert_fail@plt+0x108>
   112c0:	cmp	r0, #118	; 0x76
   112c4:	beq	11684 <__assert_fail@plt+0x478>
   112c8:	ble	1139c <__assert_fail@plt+0x190>
   112cc:	cmp	r0, #512	; 0x200
   112d0:	beq	1155c <__assert_fail@plt+0x350>
   112d4:	ble	1136c <__assert_fail@plt+0x160>
   112d8:	ldr	r2, [pc, #1932]	; 11a6c <__assert_fail@plt+0x860>
   112dc:	cmp	r0, r2
   112e0:	beq	1165c <__assert_fail@plt+0x450>
   112e4:	blt	11650 <__assert_fail@plt+0x444>
   112e8:	add	r2, r2, #1
   112ec:	cmp	r0, r2
   112f0:	bne	11354 <__assert_fail@plt+0x148>
   112f4:	mov	r2, #0
   112f8:	add	r1, sp, #32
   112fc:	ldr	r0, [r7]
   11300:	bl	11074 <strtoul@plt>
   11304:	ldr	r3, [pc, #1892]	; 11a70 <__assert_fail@plt+0x864>
   11308:	mov	r6, #0
   1130c:	str	r0, [r3]
   11310:	b	11294 <__assert_fail@plt+0x88>
   11314:	cmp	r0, #82	; 0x52
   11318:	beq	11610 <__assert_fail@plt+0x404>
   1131c:	ble	1148c <__assert_fail@plt+0x280>
   11320:	cmp	r0, #97	; 0x61
   11324:	beq	115d8 <__assert_fail@plt+0x3cc>
   11328:	ble	1146c <__assert_fail@plt+0x260>
   1132c:	cmp	r0, #100	; 0x64
   11330:	beq	11550 <__assert_fail@plt+0x344>
   11334:	ble	11458 <__assert_fail@plt+0x24c>
   11338:	cmp	r0, #101	; 0x65
   1133c:	bne	11444 <__assert_fail@plt+0x238>
   11340:	mov	r3, #1
   11344:	str	r3, [r4, #1592]	; 0x638
   11348:	str	r3, [r4, #2736]	; 0xab0
   1134c:	str	r3, [r4, #1588]	; 0x634
   11350:	b	11290 <__assert_fail@plt+0x84>
   11354:	cmp	r0, #516	; 0x204
   11358:	bne	11400 <__assert_fail@plt+0x1f4>
   1135c:	ldr	r3, [pc, #1808]	; 11a74 <__assert_fail@plt+0x868>
   11360:	mov	r2, #1
   11364:	str	r2, [r3]
   11368:	b	11290 <__assert_fail@plt+0x84>
   1136c:	cmp	r0, #120	; 0x78
   11370:	beq	11580 <__assert_fail@plt+0x374>
   11374:	bge	11430 <__assert_fail@plt+0x224>
   11378:	ldr	r0, [r7]
   1137c:	mov	r3, #1
   11380:	cmp	r0, #0
   11384:	str	r3, [r5, #-3708]	; 0xfffff184
   11388:	beq	11924 <__assert_fail@plt+0x718>
   1138c:	mov	r3, #0
   11390:	str	r3, [r4, #2740]	; 0xab4
   11394:	bl	544f8 <__assert_fail@plt+0x432ec>
   11398:	b	11290 <__assert_fail@plt+0x84>
   1139c:	cmp	r0, #114	; 0x72
   113a0:	beq	115cc <__assert_fail@plt+0x3c0>
   113a4:	bgt	114dc <__assert_fail@plt+0x2d0>
   113a8:	cmp	r0, #110	; 0x6e
   113ac:	beq	115c0 <__assert_fail@plt+0x3b4>
   113b0:	cmp	r0, #112	; 0x70
   113b4:	bne	114c8 <__assert_fail@plt+0x2bc>
   113b8:	ldr	r3, [r5, #-3708]	; 0xfffff184
   113bc:	mov	r2, #0
   113c0:	add	r3, r3, #1
   113c4:	add	r1, sp, #32
   113c8:	ldr	r0, [r7]
   113cc:	str	r3, [r5, #-3708]	; 0xfffff184
   113d0:	bl	11074 <strtoul@plt>
   113d4:	ldr	r3, [sp, #32]
   113d8:	ldrb	r3, [r3]
   113dc:	cmp	r0, #0
   113e0:	cmpge	r3, #0
   113e4:	beq	119ac <__assert_fail@plt+0x7a0>
   113e8:	mov	r1, #8
   113ec:	ldr	r0, [r7]
   113f0:	bl	140d4 <__assert_fail@plt+0x2ec8>
   113f4:	b	11290 <__assert_fail@plt+0x84>
   113f8:	cmp	r0, #0
   113fc:	beq	11294 <__assert_fail@plt+0x88>
   11400:	mov	r3, r0
   11404:	ldr	r1, [pc, #1644]	; 11a78 <__assert_fail@plt+0x86c>
   11408:	mov	r2, #5
   1140c:	mov	r0, #0
   11410:	str	r3, [sp, #12]
   11414:	bl	10f90 <dcgettext@plt>
   11418:	ldr	r3, [sp, #12]
   1141c:	mov	r1, r3
   11420:	bl	548ac <error@@Base>
   11424:	ldr	r3, [pc, #1616]	; 11a7c <__assert_fail@plt+0x870>
   11428:	ldr	r0, [r3]
   1142c:	bl	1414c <__assert_fail@plt+0x2f40>
   11430:	cmp	r0, #122	; 0x7a
   11434:	bne	11400 <__assert_fail@plt+0x1f4>
   11438:	mov	r3, #1
   1143c:	str	r3, [r4, #3872]	; 0xf20
   11440:	b	11290 <__assert_fail@plt+0x84>
   11444:	cmp	r0, #103	; 0x67
   11448:	bne	11400 <__assert_fail@plt+0x1f4>
   1144c:	mov	r3, #1
   11450:	str	r3, [r4, #828]	; 0x33c
   11454:	b	11290 <__assert_fail@plt+0x84>
   11458:	cmp	r0, #99	; 0x63
   1145c:	bne	11400 <__assert_fail@plt+0x1f4>
   11460:	mov	r3, #1
   11464:	str	r3, [r5, #-3696]	; 0xfffff190
   11468:	b	11290 <__assert_fail@plt+0x84>
   1146c:	cmp	r0, #86	; 0x56
   11470:	beq	11538 <__assert_fail@plt+0x32c>
   11474:	cmp	r0, #87	; 0x57
   11478:	bne	114b4 <__assert_fail@plt+0x2a8>
   1147c:	ldr	r3, [pc, #1532]	; 11a80 <__assert_fail@plt+0x874>
   11480:	mov	r2, #1
   11484:	str	r2, [r3]
   11488:	b	11290 <__assert_fail@plt+0x84>
   1148c:	cmp	r0, #68	; 0x44
   11490:	beq	11544 <__assert_fail@plt+0x338>
   11494:	bgt	114f8 <__assert_fail@plt+0x2ec>
   11498:	cmp	r0, #63	; 0x3f
   1149c:	beq	11424 <__assert_fail@plt+0x218>
   114a0:	cmp	r0, #65	; 0x41
   114a4:	bne	113f8 <__assert_fail@plt+0x1ec>
   114a8:	mov	r3, #1
   114ac:	str	r3, [r5, #-3712]	; 0xfffff180
   114b0:	b	11290 <__assert_fail@plt+0x84>
   114b4:	cmp	r0, #83	; 0x53
   114b8:	bne	11400 <__assert_fail@plt+0x1f4>
   114bc:	mov	r3, #1
   114c0:	str	r3, [r4, #2736]	; 0xab0
   114c4:	b	11290 <__assert_fail@plt+0x84>
   114c8:	cmp	r0, #108	; 0x6c
   114cc:	bne	11400 <__assert_fail@plt+0x1f4>
   114d0:	mov	r3, #1
   114d4:	str	r3, [r4, #1588]	; 0x634
   114d8:	b	11290 <__assert_fail@plt+0x84>
   114dc:	cmp	r0, #116	; 0x74
   114e0:	beq	11510 <__assert_fail@plt+0x304>
   114e4:	movle	r3, #1
   114e8:	strle	r3, [r4, #1696]	; 0x6a0
   114ec:	movgt	r3, #1
   114f0:	strgt	r3, [r4, #824]	; 0x338
   114f4:	b	11290 <__assert_fail@plt+0x84>
   114f8:	cmp	r0, #73	; 0x49
   114fc:	moveq	r3, #1
   11500:	streq	r3, [r4, #1700]	; 0x6a4
   11504:	beq	11290 <__assert_fail@plt+0x84>
   11508:	cmp	r0, #78	; 0x4e
   1150c:	bne	11520 <__assert_fail@plt+0x314>
   11510:	mov	r3, #1
   11514:	str	r3, [r4, #2736]	; 0xab0
   11518:	str	r3, [r4, #2732]	; 0xaac
   1151c:	b	11290 <__assert_fail@plt+0x84>
   11520:	cmp	r0, #72	; 0x48
   11524:	mov	r3, r0
   11528:	bne	11404 <__assert_fail@plt+0x1f8>
   1152c:	ldr	r3, [pc, #1360]	; 11a84 <__assert_fail@plt+0x878>
   11530:	ldr	r0, [r3]
   11534:	bl	1414c <__assert_fail@plt+0x2f40>
   11538:	mov	r3, #1
   1153c:	str	r3, [r4, #1552]	; 0x610
   11540:	b	11290 <__assert_fail@plt+0x84>
   11544:	mov	r3, #1
   11548:	str	r3, [r4, #1704]	; 0x6a8
   1154c:	b	11290 <__assert_fail@plt+0x84>
   11550:	mov	r3, #1
   11554:	str	r3, [r4, #1120]	; 0x460
   11558:	b	11290 <__assert_fail@plt+0x84>
   1155c:	ldr	r0, [r7]
   11560:	mov	r3, #1
   11564:	cmp	r0, #0
   11568:	str	r3, [r5, #-3708]	; 0xfffff184
   1156c:	streq	r3, [r4, #2740]	; 0xab4
   11570:	beq	11290 <__assert_fail@plt+0x84>
   11574:	str	r6, [r4, #2740]	; 0xab4
   11578:	bl	543f8 <__assert_fail@plt+0x431ec>
   1157c:	b	11290 <__assert_fail@plt+0x84>
   11580:	ldr	r3, [r5, #-3708]	; 0xfffff184
   11584:	mov	r2, #0
   11588:	add	r3, r3, #1
   1158c:	add	r1, sp, #32
   11590:	ldr	r0, [r7]
   11594:	str	r3, [r5, #-3708]	; 0xfffff184
   11598:	bl	11074 <strtoul@plt>
   1159c:	ldr	r3, [sp, #32]
   115a0:	ldrb	r3, [r3]
   115a4:	cmp	r0, #0
   115a8:	cmpge	r3, #0
   115ac:	beq	11994 <__assert_fail@plt+0x788>
   115b0:	mov	r1, #1
   115b4:	ldr	r0, [r7]
   115b8:	bl	140d4 <__assert_fail@plt+0x2ec8>
   115bc:	b	11290 <__assert_fail@plt+0x84>
   115c0:	mov	r3, #1
   115c4:	str	r3, [r5, #-3700]	; 0xfffff18c
   115c8:	b	11290 <__assert_fail@plt+0x84>
   115cc:	mov	r3, #1
   115d0:	str	r3, [r5, #-3704]	; 0xfffff188
   115d4:	b	11290 <__assert_fail@plt+0x84>
   115d8:	mov	r3, #1
   115dc:	str	r3, [r4, #1696]	; 0x6a0
   115e0:	str	r3, [r5, #-3704]	; 0xfffff188
   115e4:	str	r3, [r4, #824]	; 0x338
   115e8:	str	r3, [r4, #1120]	; 0x460
   115ec:	str	r3, [r4, #1592]	; 0x638
   115f0:	str	r3, [r4, #2736]	; 0xab0
   115f4:	str	r3, [r4, #828]	; 0x33c
   115f8:	str	r3, [r4, #1588]	; 0x634
   115fc:	str	r3, [r4, #1552]	; 0x610
   11600:	str	r3, [r4, #1700]	; 0x6a4
   11604:	str	r3, [r5, #-3712]	; 0xfffff180
   11608:	str	r3, [r5, #-3700]	; 0xfffff18c
   1160c:	b	11290 <__assert_fail@plt+0x84>
   11610:	ldr	r3, [r5, #-3708]	; 0xfffff184
   11614:	mov	r2, #0
   11618:	add	r3, r3, #1
   1161c:	add	r1, sp, #32
   11620:	ldr	r0, [r7]
   11624:	str	r3, [r5, #-3708]	; 0xfffff184
   11628:	bl	11074 <strtoul@plt>
   1162c:	ldr	r3, [sp, #32]
   11630:	ldrb	r3, [r3]
   11634:	cmp	r0, #0
   11638:	cmpge	r3, #0
   1163c:	beq	1197c <__assert_fail@plt+0x770>
   11640:	mov	r1, #16
   11644:	ldr	r0, [r7]
   11648:	bl	140d4 <__assert_fail@plt+0x2ec8>
   1164c:	b	11290 <__assert_fail@plt+0x84>
   11650:	mov	r3, #1
   11654:	str	r3, [r4, #1692]	; 0x69c
   11658:	b	11290 <__assert_fail@plt+0x84>
   1165c:	mov	r2, #0
   11660:	add	r1, sp, #32
   11664:	ldr	r0, [r7]
   11668:	bl	11074 <strtoul@plt>
   1166c:	ldr	r3, [pc, #1044]	; 11a88 <__assert_fail@plt+0x87c>
   11670:	str	r0, [r3]
   11674:	b	11290 <__assert_fail@plt+0x84>
   11678:	mov	r3, #1
   1167c:	str	r3, [r4, #1592]	; 0x638
   11680:	b	11290 <__assert_fail@plt+0x84>
   11684:	ldr	r3, [pc, #976]	; 11a5c <__assert_fail@plt+0x850>
   11688:	ldr	r0, [r3, #728]	; 0x2d8
   1168c:	bl	3ac24 <__assert_fail@plt+0x29a18>
   11690:	b	11290 <__assert_fail@plt+0x84>
   11694:	ldr	r8, [pc, #968]	; 11a64 <__assert_fail@plt+0x858>
   11698:	ldr	r1, [r5, #-3704]	; 0xfffff188
   1169c:	ldr	r2, [r5, #-3708]	; 0xfffff184
   116a0:	ldr	r0, [r8, #1696]	; 0x6a0
   116a4:	ldr	r3, [r8, #1120]	; 0x460
   116a8:	orr	r3, r3, r0
   116ac:	ldr	r0, [r8, #824]	; 0x338
   116b0:	orr	r3, r3, r1
   116b4:	ldr	r1, [r8, #2736]	; 0xab0
   116b8:	orr	r3, r3, r0
   116bc:	ldr	r0, [r8, #1588]	; 0x634
   116c0:	orr	r3, r3, r1
   116c4:	ldr	r1, [r8, #1592]	; 0x638
   116c8:	orr	r3, r3, r0
   116cc:	orr	r3, r3, r1
   116d0:	ldr	r1, [r8, #1552]	; 0x610
   116d4:	orr	r3, r3, r2
   116d8:	ldr	r2, [r8, #1700]	; 0x6a4
   116dc:	orr	r3, r3, r1
   116e0:	ldr	r1, [r8, #2740]	; 0xab4
   116e4:	orr	r3, r3, r2
   116e8:	ldr	r2, [r5, #-3712]	; 0xfffff180
   116ec:	orr	r3, r3, r1
   116f0:	ldr	r1, [r5, #-3700]	; 0xfffff18c
   116f4:	orr	r3, r3, r2
   116f8:	ldr	r2, [r8, #828]	; 0x33c
   116fc:	orr	r3, r3, r1
   11700:	ldr	r1, [r5, #-3696]	; 0xfffff190
   11704:	orr	r3, r3, r2
   11708:	ldr	r2, [r8, #1692]	; 0x69c
   1170c:	orr	r3, r3, r1
   11710:	orrs	r3, r3, r2
   11714:	beq	11424 <__assert_fail@plt+0x218>
   11718:	ldr	r6, [pc, #876]	; 11a8c <__assert_fail@plt+0x880>
   1171c:	ldr	r2, [sp, #20]
   11720:	ldr	r3, [r6]
   11724:	sub	r1, r2, #1
   11728:	cmp	r1, r3
   1172c:	bgt	11868 <__assert_fail@plt+0x65c>
   11730:	cmp	r2, r3
   11734:	ble	11a30 <__assert_fail@plt+0x824>
   11738:	mov	r9, #0
   1173c:	ldr	fp, [pc, #844]	; 11a90 <__assert_fail@plt+0x884>
   11740:	ldr	sl, [pc, #844]	; 11a94 <__assert_fail@plt+0x888>
   11744:	b	1176c <__assert_fail@plt+0x560>
   11748:	mov	r2, #5
   1174c:	mov	r1, sl
   11750:	mov	r0, #0
   11754:	bl	10f90 <dcgettext@plt>
   11758:	mov	r1, r4
   1175c:	bl	548ac <error@@Base>
   11760:	mov	r9, #1
   11764:	ldr	r3, [r6]
   11768:	ldr	r2, [sp, #20]
   1176c:	cmp	r3, r2
   11770:	bge	118f0 <__assert_fail@plt+0x6e4>
   11774:	ldr	r1, [sp, #16]
   11778:	add	ip, r3, #1
   1177c:	add	r2, sp, #32
   11780:	ldr	r4, [r1, r3, lsl #2]
   11784:	mov	r0, #3
   11788:	mov	r1, r4
   1178c:	str	ip, [r6]
   11790:	bl	111b8 <__xstat64@plt>
   11794:	cmp	r0, #0
   11798:	blt	11874 <__assert_fail@plt+0x668>
   1179c:	ldr	r3, [sp, #48]	; 0x30
   117a0:	and	r3, r3, #61440	; 0xf000
   117a4:	cmp	r3, #32768	; 0x8000
   117a8:	bne	11748 <__assert_fail@plt+0x53c>
   117ac:	mov	r1, #120	; 0x78
   117b0:	mov	r0, #1
   117b4:	bl	10ef4 <calloc@plt>
   117b8:	subs	r7, r0, #0
   117bc:	beq	1190c <__assert_fail@plt+0x700>
   117c0:	str	r4, [r7]
   117c4:	mov	r1, fp
   117c8:	mov	r0, r4
   117cc:	bl	11164 <fopen64@plt>
   117d0:	cmp	r0, #0
   117d4:	mov	r3, r0
   117d8:	str	r0, [r7, #4]
   117dc:	beq	119c4 <__assert_fail@plt+0x7b8>
   117e0:	add	r0, sp, #24
   117e4:	mov	r2, #1
   117e8:	mov	r1, #8
   117ec:	bl	10ffc <fread@plt>
   117f0:	cmp	r0, #1
   117f4:	mov	r3, r0
   117f8:	bne	118c0 <__assert_fail@plt+0x6b4>
   117fc:	ldrd	r0, [sp, #80]	; 0x50
   11800:	ldr	r2, [sp, #24]
   11804:	ldr	ip, [pc, #652]	; 11a98 <__assert_fail@plt+0x88c>
   11808:	strd	r0, [r7, #8]
   1180c:	cmp	r2, ip
   11810:	beq	11930 <__assert_fail@plt+0x724>
   11814:	ldr	r3, [sp, #24]
   11818:	ldr	r2, [pc, #636]	; 11a9c <__assert_fail@plt+0x890>
   1181c:	cmp	r3, r2
   11820:	beq	119e8 <__assert_fail@plt+0x7dc>
   11824:	ldr	r3, [r5, #-3696]	; 0xfffff190
   11828:	cmp	r3, #0
   1182c:	bne	11a14 <__assert_fail@plt+0x808>
   11830:	ldr	r0, [r7, #4]
   11834:	bl	10fa8 <rewind@plt>
   11838:	mov	r3, #0
   1183c:	mov	r0, r7
   11840:	str	r3, [r8, #656]	; 0x290
   11844:	str	r3, [r8, #1392]	; 0x570
   11848:	bl	362c4 <__assert_fail@plt+0x250b8>
   1184c:	cmp	r0, #0
   11850:	ldr	r0, [r7, #4]
   11854:	beq	118dc <__assert_fail@plt+0x6d0>
   11858:	bl	110f8 <fclose@plt>
   1185c:	mov	r0, r7
   11860:	bl	10f54 <free@plt>
   11864:	b	11764 <__assert_fail@plt+0x558>
   11868:	mov	r1, #1
   1186c:	str	r1, [r5, #-3840]	; 0xfffff100
   11870:	b	11738 <__assert_fail@plt+0x52c>
   11874:	bl	110a4 <__errno_location@plt>
   11878:	mov	r2, #5
   1187c:	ldr	r3, [r0]
   11880:	mov	r7, r0
   11884:	cmp	r3, #2
   11888:	ldreq	r1, [pc, #528]	; 11aa0 <__assert_fail@plt+0x894>
   1188c:	beq	11750 <__assert_fail@plt+0x544>
   11890:	ldr	r1, [pc, #524]	; 11aa4 <__assert_fail@plt+0x898>
   11894:	mov	r0, #0
   11898:	bl	10f90 <dcgettext@plt>
   1189c:	mov	r9, r0
   118a0:	ldr	r0, [r7]
   118a4:	bl	11038 <strerror@plt>
   118a8:	mov	r1, r4
   118ac:	mov	r2, r0
   118b0:	mov	r0, r9
   118b4:	bl	548ac <error@@Base>
   118b8:	mov	r9, #1
   118bc:	b	11764 <__assert_fail@plt+0x558>
   118c0:	ldr	r1, [pc, #480]	; 11aa8 <__assert_fail@plt+0x89c>
   118c4:	mov	r2, #5
   118c8:	mov	r0, #0
   118cc:	bl	10f90 <dcgettext@plt>
   118d0:	mov	r1, r4
   118d4:	bl	548ac <error@@Base>
   118d8:	ldr	r0, [r7, #4]
   118dc:	bl	110f8 <fclose@plt>
   118e0:	mov	r0, r7
   118e4:	bl	10f54 <free@plt>
   118e8:	mov	r9, #1
   118ec:	b	11764 <__assert_fail@plt+0x558>
   118f0:	ldr	r0, [r5, #-3720]	; 0xfffff178
   118f4:	cmp	r0, #0
   118f8:	beq	11900 <__assert_fail@plt+0x6f4>
   118fc:	bl	10f54 <free@plt>
   11900:	mov	r0, r9
   11904:	add	sp, sp, #140	; 0x8c
   11908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1190c:	mov	r2, #5
   11910:	ldr	r1, [pc, #404]	; 11aac <__assert_fail@plt+0x8a0>
   11914:	bl	10f90 <dcgettext@plt>
   11918:	bl	548ac <error@@Base>
   1191c:	mov	r9, #1
   11920:	b	11764 <__assert_fail@plt+0x558>
   11924:	str	r3, [r4, #2740]	; 0xab4
   11928:	bl	547bc <__assert_fail@plt+0x435b0>
   1192c:	b	11290 <__assert_fail@plt+0x84>
   11930:	ldr	r2, [sp, #28]
   11934:	ldr	r1, [pc, #372]	; 11ab0 <__assert_fail@plt+0x8a4>
   11938:	cmp	r2, r1
   1193c:	bne	11814 <__assert_fail@plt+0x608>
   11940:	mov	r1, #0
   11944:	mov	r0, r7
   11948:	str	r3, [sp, #12]
   1194c:	bl	3a5e8 <__assert_fail@plt+0x293dc>
   11950:	ldr	r3, [sp, #12]
   11954:	cmp	r0, #0
   11958:	bne	11a0c <__assert_fail@plt+0x800>
   1195c:	ldr	r0, [r7, #4]
   11960:	str	r3, [sp, #12]
   11964:	bl	110f8 <fclose@plt>
   11968:	ldr	r3, [sp, #12]
   1196c:	mov	r0, r7
   11970:	mov	r9, r3
   11974:	bl	10f54 <free@plt>
   11978:	b	11764 <__assert_fail@plt+0x558>
   1197c:	ldr	r1, [pc, #304]	; 11ab4 <__assert_fail@plt+0x8a8>
   11980:	mov	r2, r0
   11984:	mov	r3, #16
   11988:	sub	r0, r1, #4
   1198c:	bl	24d20 <__assert_fail@plt+0x13b14>
   11990:	b	11290 <__assert_fail@plt+0x84>
   11994:	ldr	r1, [pc, #280]	; 11ab4 <__assert_fail@plt+0x8a8>
   11998:	mov	r2, r0
   1199c:	mov	r3, #1
   119a0:	sub	r0, r1, #4
   119a4:	bl	24d20 <__assert_fail@plt+0x13b14>
   119a8:	b	11290 <__assert_fail@plt+0x84>
   119ac:	ldr	r1, [pc, #256]	; 11ab4 <__assert_fail@plt+0x8a8>
   119b0:	mov	r2, r0
   119b4:	mov	r3, #8
   119b8:	sub	r0, r1, #4
   119bc:	bl	24d20 <__assert_fail@plt+0x13b14>
   119c0:	b	11290 <__assert_fail@plt+0x84>
   119c4:	mov	r2, #5
   119c8:	ldr	r1, [pc, #232]	; 11ab8 <__assert_fail@plt+0x8ac>
   119cc:	bl	10f90 <dcgettext@plt>
   119d0:	mov	r1, r4
   119d4:	bl	548ac <error@@Base>
   119d8:	mov	r0, r7
   119dc:	bl	10f54 <free@plt>
   119e0:	mov	r9, #1
   119e4:	b	11764 <__assert_fail@plt+0x558>
   119e8:	ldr	r3, [sp, #28]
   119ec:	ldr	r2, [pc, #200]	; 11abc <__assert_fail@plt+0x8b0>
   119f0:	cmp	r3, r2
   119f4:	bne	11824 <__assert_fail@plt+0x618>
   119f8:	mov	r1, #1
   119fc:	mov	r0, r7
   11a00:	bl	3a5e8 <__assert_fail@plt+0x293dc>
   11a04:	cmp	r0, #0
   11a08:	beq	118d8 <__assert_fail@plt+0x6cc>
   11a0c:	ldr	r0, [r7, #4]
   11a10:	b	11858 <__assert_fail@plt+0x64c>
   11a14:	mov	r2, #5
   11a18:	ldr	r1, [pc, #160]	; 11ac0 <__assert_fail@plt+0x8b4>
   11a1c:	mov	r0, #0
   11a20:	bl	10f90 <dcgettext@plt>
   11a24:	mov	r1, r4
   11a28:	bl	548ac <error@@Base>
   11a2c:	b	11830 <__assert_fail@plt+0x624>
   11a30:	mov	r2, #5
   11a34:	ldr	r1, [pc, #136]	; 11ac4 <__assert_fail@plt+0x8b8>
   11a38:	mov	r0, #0
   11a3c:	bl	10f90 <dcgettext@plt>
   11a40:	bl	54dd0 <warn@@Base>
   11a44:	b	11424 <__assert_fail@plt+0x218>
   11a48:	andeq	ip, r9, r0, lsr r4
   11a4c:	andeq	fp, r6, ip, ror #2
   11a50:	andeq	ip, r6, r4, lsr pc
   11a54:	andeq	ip, r6, r8, asr #30
   11a58:	andeq	ip, r6, r4, asr pc
   11a5c:	andeq	r9, r9, r8, lsr #2
   11a60:	andeq	ip, r6, r8, ror pc
   11a64:	andeq	sl, r9, r8, lsr r4
   11a68:	andeq	sl, r9, r0, lsr r4
   11a6c:	andeq	r0, r0, r2, lsl #4
   11a70:	andeq	lr, r9, r8, asr sp
   11a74:	strdeq	ip, [r9], -r4
   11a78:	andeq	ip, r6, r0, ror #30
   11a7c:	andeq	sl, r9, r8, lsr #8
   11a80:	andeq	lr, r9, r8, lsr #26
   11a84:	andeq	sl, r9, ip, lsr #8
   11a88:	andeq	sl, r9, r8, lsl #8
   11a8c:	andeq	sl, r9, r0, lsr #8
   11a90:	andeq	r5, r6, r0, ror r4
   11a94:	strdeq	ip, [r6], -r4
   11a98:	rsbvc	r3, r1, #8448	; 0x2100
   11a9c:	ldmdavs	r4!, {r0, r5, sl, fp, ip, sp}^
   11aa0:	andeq	ip, r6, ip, lsr #31
   11aa4:	andeq	ip, r6, r0, asr #31
   11aa8:	andeq	sp, r6, r4, asr #32
   11aac:	andeq	sp, r6, r4, lsl r0
   11ab0:	beq	fabc44 <optarg@@GLIBC_2.4+0xf11814>
   11ab4:	andeq	fp, r9, ip, lsr #11
   11ab8:	andeq	ip, r6, r0, asr #29
   11abc:	beq	fad468 <optarg@@GLIBC_2.4+0xf13038>
   11ac0:	andeq	sp, r6, r4, lsl #1
   11ac4:	muleq	r6, ip, pc	; <UNPREDICTABLE>
   11ac8:	mov	fp, #0
   11acc:	mov	lr, #0
   11ad0:	pop	{r1}		; (ldr r1, [sp], #4)
   11ad4:	mov	r2, sp
   11ad8:	push	{r2}		; (str r2, [sp, #-4]!)
   11adc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ae0:	ldr	ip, [pc, #16]	; 11af8 <__assert_fail@plt+0x8ec>
   11ae4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ae8:	ldr	r0, [pc, #12]	; 11afc <__assert_fail@plt+0x8f0>
   11aec:	ldr	r3, [pc, #12]	; 11b00 <__assert_fail@plt+0x8f4>
   11af0:	bl	1102c <__libc_start_main@plt>
   11af4:	bl	111dc <abort@plt>
   11af8:	ldrdeq	r8, [r5], -r4
   11afc:	andeq	r1, r1, r8, lsl r2
   11b00:	andeq	r8, r5, r4, ror sp
   11b04:	ldr	r3, [pc, #20]	; 11b20 <__assert_fail@plt+0x914>
   11b08:	ldr	r2, [pc, #20]	; 11b24 <__assert_fail@plt+0x918>
   11b0c:	add	r3, pc, r3
   11b10:	ldr	r2, [r3, r2]
   11b14:	cmp	r2, #0
   11b18:	bxeq	lr
   11b1c:	b	11044 <__gmon_start__@plt>
   11b20:	andeq	r7, r8, ip, ror #9
   11b24:	andeq	r0, r0, r8, lsl r1
   11b28:	ldr	r0, [pc, #24]	; 11b48 <__assert_fail@plt+0x93c>
   11b2c:	ldr	r3, [pc, #24]	; 11b4c <__assert_fail@plt+0x940>
   11b30:	cmp	r3, r0
   11b34:	bxeq	lr
   11b38:	ldr	r3, [pc, #16]	; 11b50 <__assert_fail@plt+0x944>
   11b3c:	cmp	r3, #0
   11b40:	bxeq	lr
   11b44:	bx	r3
   11b48:	andeq	sl, r9, r4, lsl r4
   11b4c:	andeq	sl, r9, r4, lsl r4
   11b50:	andeq	r0, r0, r0
   11b54:	ldr	r0, [pc, #36]	; 11b80 <__assert_fail@plt+0x974>
   11b58:	ldr	r1, [pc, #36]	; 11b84 <__assert_fail@plt+0x978>
   11b5c:	sub	r1, r1, r0
   11b60:	asr	r1, r1, #2
   11b64:	add	r1, r1, r1, lsr #31
   11b68:	asrs	r1, r1, #1
   11b6c:	bxeq	lr
   11b70:	ldr	r3, [pc, #16]	; 11b88 <__assert_fail@plt+0x97c>
   11b74:	cmp	r3, #0
   11b78:	bxeq	lr
   11b7c:	bx	r3
   11b80:	andeq	sl, r9, r4, lsl r4
   11b84:	andeq	sl, r9, r4, lsl r4
   11b88:	andeq	r0, r0, r0
   11b8c:	push	{r4, lr}
   11b90:	ldr	r4, [pc, #24]	; 11bb0 <__assert_fail@plt+0x9a4>
   11b94:	ldrb	r3, [r4]
   11b98:	cmp	r3, #0
   11b9c:	popne	{r4, pc}
   11ba0:	bl	11b28 <__assert_fail@plt+0x91c>
   11ba4:	mov	r3, #1
   11ba8:	strb	r3, [r4]
   11bac:	pop	{r4, pc}
   11bb0:	andeq	sl, r9, r4, lsr r4
   11bb4:	b	11b54 <__assert_fail@plt+0x948>
   11bb8:	cmp	r0, #116	; 0x74
   11bbc:	beq	12278 <__assert_fail@plt+0x106c>
   11bc0:	bls	11c0c <__assert_fail@plt+0xa00>
   11bc4:	cmp	r0, #182	; 0xb6
   11bc8:	beq	12270 <__assert_fail@plt+0x1064>
   11bcc:	bhi	11cc8 <__assert_fail@plt+0xabc>
   11bd0:	cmp	r0, #146	; 0x92
   11bd4:	beq	12248 <__assert_fail@plt+0x103c>
   11bd8:	bls	11c90 <__assert_fail@plt+0xa84>
   11bdc:	cmp	r0, #167	; 0xa7
   11be0:	beq	12210 <__assert_fail@plt+0x1004>
   11be4:	bls	11c6c <__assert_fail@plt+0xa60>
   11be8:	cmp	r0, #178	; 0xb2
   11bec:	beq	121f0 <__assert_fail@plt+0xfe4>
   11bf0:	bls	11c54 <__assert_fail@plt+0xa48>
   11bf4:	cmp	r0, #180	; 0xb4
   11bf8:	beq	12170 <__assert_fail@plt+0xf64>
   11bfc:	bhi	12048 <__assert_fail@plt+0xe3c>
   11c00:	ldr	r3, [pc, #1656]	; 12280 <__assert_fail@plt+0x1074>
   11c04:	mov	r0, r3
   11c08:	bx	lr
   11c0c:	cmp	r0, #72	; 0x48
   11c10:	beq	12268 <__assert_fail@plt+0x105c>
   11c14:	bhi	11ec8 <__assert_fail@plt+0xcbc>
   11c18:	cmp	r0, #46	; 0x2e
   11c1c:	beq	12260 <__assert_fail@plt+0x1054>
   11c20:	bls	11e9c <__assert_fail@plt+0xc90>
   11c24:	cmp	r0, #62	; 0x3e
   11c28:	beq	12208 <__assert_fail@plt+0xffc>
   11c2c:	bls	11e78 <__assert_fail@plt+0xc6c>
   11c30:	cmp	r0, #68	; 0x44
   11c34:	beq	121d0 <__assert_fail@plt+0xfc4>
   11c38:	bls	11e60 <__assert_fail@plt+0xc54>
   11c3c:	cmp	r0, #70	; 0x46
   11c40:	beq	12148 <__assert_fail@plt+0xf3c>
   11c44:	bhi	12140 <__assert_fail@plt+0xf34>
   11c48:	ldr	r3, [pc, #1588]	; 12284 <__assert_fail@plt+0x1078>
   11c4c:	mov	r0, r3
   11c50:	bx	lr
   11c54:	cmp	r0, #170	; 0xaa
   11c58:	beq	12138 <__assert_fail@plt+0xf2c>
   11c5c:	cmp	r0, #177	; 0xb1
   11c60:	ldr	r3, [pc, #1568]	; 12288 <__assert_fail@plt+0x107c>
   11c64:	movne	r3, #0
   11c68:	b	11c04 <__assert_fail@plt+0x9f8>
   11c6c:	cmp	r0, #151	; 0x97
   11c70:	beq	12190 <__assert_fail@plt+0xf84>
   11c74:	bhi	11d18 <__assert_fail@plt+0xb0c>
   11c78:	cmp	r0, #147	; 0x93
   11c7c:	beq	12130 <__assert_fail@plt+0xf24>
   11c80:	cmp	r0, #150	; 0x96
   11c84:	ldr	r3, [pc, #1536]	; 1228c <__assert_fail@plt+0x1080>
   11c88:	movne	r3, #0
   11c8c:	b	11c04 <__assert_fail@plt+0x9f8>
   11c90:	cmp	r0, #123	; 0x7b
   11c94:	beq	12220 <__assert_fail@plt+0x1014>
   11c98:	bls	11e0c <__assert_fail@plt+0xc00>
   11c9c:	cmp	r0, #132	; 0x84
   11ca0:	beq	121e0 <__assert_fail@plt+0xfd4>
   11ca4:	bls	11df4 <__assert_fail@plt+0xbe8>
   11ca8:	cmp	r0, #135	; 0x87
   11cac:	beq	12160 <__assert_fail@plt+0xf54>
   11cb0:	cmp	r0, #145	; 0x91
   11cb4:	beq	12128 <__assert_fail@plt+0xf1c>
   11cb8:	cmp	r0, #134	; 0x86
   11cbc:	ldr	r3, [pc, #1484]	; 12290 <__assert_fail@plt+0x1084>
   11cc0:	movne	r3, #0
   11cc4:	b	11c04 <__assert_fail@plt+0x9f8>
   11cc8:	cmp	r0, #1879048202	; 0x7000000a
   11ccc:	beq	12250 <__assert_fail@plt+0x1044>
   11cd0:	bls	11d74 <__assert_fail@plt+0xb68>
   11cd4:	ldr	r3, [pc, #1464]	; 12294 <__assert_fail@plt+0x1088>
   11cd8:	cmp	r0, r3
   11cdc:	beq	12240 <__assert_fail@plt+0x1034>
   11ce0:	bls	11d50 <__assert_fail@plt+0xb44>
   11ce4:	ldr	r3, [pc, #1452]	; 12298 <__assert_fail@plt+0x108c>
   11ce8:	cmp	r0, r3
   11cec:	beq	121d8 <__assert_fail@plt+0xfcc>
   11cf0:	bls	11d30 <__assert_fail@plt+0xb24>
   11cf4:	ldr	r3, [pc, #1440]	; 1229c <__assert_fail@plt+0x1090>
   11cf8:	cmp	r0, r3
   11cfc:	beq	12168 <__assert_fail@plt+0xf5c>
   11d00:	bcc	12120 <__assert_fail@plt+0xf14>
   11d04:	ldr	r2, [pc, #1428]	; 122a0 <__assert_fail@plt+0x1094>
   11d08:	ldr	r3, [pc, #1428]	; 122a4 <__assert_fail@plt+0x1098>
   11d0c:	cmp	r0, r2
   11d10:	movne	r3, #0
   11d14:	b	11c04 <__assert_fail@plt+0x9f8>
   11d18:	cmp	r0, #154	; 0x9a
   11d1c:	beq	12118 <__assert_fail@plt+0xf0c>
   11d20:	cmp	r0, #166	; 0xa6
   11d24:	ldr	r3, [pc, #1404]	; 122a8 <__assert_fail@plt+0x109c>
   11d28:	movne	r3, #0
   11d2c:	b	11c04 <__assert_fail@plt+0x9f8>
   11d30:	sub	r3, r3, #3
   11d34:	cmp	r0, r3
   11d38:	beq	12110 <__assert_fail@plt+0xf04>
   11d3c:	ldr	r2, [pc, #1384]	; 122ac <__assert_fail@plt+0x10a0>
   11d40:	ldr	r3, [pc, #1384]	; 122b0 <__assert_fail@plt+0x10a4>
   11d44:	cmp	r0, r2
   11d48:	movne	r3, #0
   11d4c:	b	11c04 <__assert_fail@plt+0x9f8>
   11d50:	cmp	r0, #1879048205	; 0x7000000d
   11d54:	beq	12198 <__assert_fail@plt+0xf8c>
   11d58:	bhi	11da0 <__assert_fail@plt+0xb94>
   11d5c:	cmp	r0, #1879048203	; 0x7000000b
   11d60:	beq	12108 <__assert_fail@plt+0xefc>
   11d64:	cmp	r0, #1879048204	; 0x7000000c
   11d68:	ldr	r3, [pc, #1348]	; 122b4 <__assert_fail@plt+0x10a8>
   11d6c:	movne	r3, #0
   11d70:	b	11c04 <__assert_fail@plt+0x9f8>
   11d74:	cmp	r0, #1879048195	; 0x70000003
   11d78:	beq	12228 <__assert_fail@plt+0x101c>
   11d7c:	bls	11dd0 <__assert_fail@plt+0xbc4>
   11d80:	cmp	r0, #1879048198	; 0x70000006
   11d84:	beq	121f8 <__assert_fail@plt+0xfec>
   11d88:	bls	11db8 <__assert_fail@plt+0xbac>
   11d8c:	cmp	r0, #1879048200	; 0x70000008
   11d90:	beq	12158 <__assert_fail@plt+0xf4c>
   11d94:	bhi	12100 <__assert_fail@plt+0xef4>
   11d98:	ldr	r3, [pc, #1304]	; 122b8 <__assert_fail@plt+0x10ac>
   11d9c:	b	11c04 <__assert_fail@plt+0x9f8>
   11da0:	cmp	r0, #1879048206	; 0x7000000e
   11da4:	beq	120f8 <__assert_fail@plt+0xeec>
   11da8:	cmp	r0, #1879048207	; 0x7000000f
   11dac:	ldr	r3, [pc, #1288]	; 122bc <__assert_fail@plt+0x10b0>
   11db0:	movne	r3, #0
   11db4:	b	11c04 <__assert_fail@plt+0x9f8>
   11db8:	cmp	r0, #1879048196	; 0x70000004
   11dbc:	beq	120f0 <__assert_fail@plt+0xee4>
   11dc0:	cmp	r0, #1879048197	; 0x70000005
   11dc4:	ldr	r3, [pc, #1268]	; 122c0 <__assert_fail@plt+0x10b4>
   11dc8:	movne	r3, #0
   11dcc:	b	11c04 <__assert_fail@plt+0x9f8>
   11dd0:	cmp	r0, #1879048192	; 0x70000000
   11dd4:	beq	121b8 <__assert_fail@plt+0xfac>
   11dd8:	bhi	11e30 <__assert_fail@plt+0xc24>
   11ddc:	cmp	r0, #183	; 0xb7
   11de0:	beq	120e8 <__assert_fail@plt+0xedc>
   11de4:	cmp	r0, #186	; 0xba
   11de8:	ldr	r3, [pc, #1236]	; 122c4 <__assert_fail@plt+0x10b8>
   11dec:	movne	r3, #0
   11df0:	b	11c04 <__assert_fail@plt+0x9f8>
   11df4:	cmp	r0, #128	; 0x80
   11df8:	beq	120e0 <__assert_fail@plt+0xed4>
   11dfc:	cmp	r0, #129	; 0x81
   11e00:	ldr	r3, [pc, #1216]	; 122c8 <__assert_fail@plt+0x10bc>
   11e04:	movne	r3, #0
   11e08:	b	11c04 <__assert_fail@plt+0x9f8>
   11e0c:	cmp	r0, #119	; 0x77
   11e10:	beq	121c0 <__assert_fail@plt+0xfb4>
   11e14:	bhi	11e48 <__assert_fail@plt+0xc3c>
   11e18:	cmp	r0, #117	; 0x75
   11e1c:	beq	120d8 <__assert_fail@plt+0xecc>
   11e20:	cmp	r0, #118	; 0x76
   11e24:	ldr	r3, [pc, #1184]	; 122cc <__assert_fail@plt+0x10c0>
   11e28:	movne	r3, #0
   11e2c:	b	11c04 <__assert_fail@plt+0x9f8>
   11e30:	cmp	r0, #1879048193	; 0x70000001
   11e34:	beq	120d0 <__assert_fail@plt+0xec4>
   11e38:	cmp	r0, #1879048194	; 0x70000002
   11e3c:	ldr	r3, [pc, #1164]	; 122d0 <__assert_fail@plt+0x10c4>
   11e40:	movne	r3, #0
   11e44:	b	11c04 <__assert_fail@plt+0x9f8>
   11e48:	cmp	r0, #121	; 0x79
   11e4c:	beq	120c8 <__assert_fail@plt+0xebc>
   11e50:	cmp	r0, #122	; 0x7a
   11e54:	ldr	r3, [pc, #1144]	; 122d4 <__assert_fail@plt+0x10c8>
   11e58:	movne	r3, #0
   11e5c:	b	11c04 <__assert_fail@plt+0x9f8>
   11e60:	cmp	r0, #63	; 0x3f
   11e64:	beq	120c0 <__assert_fail@plt+0xeb4>
   11e68:	cmp	r0, #67	; 0x43
   11e6c:	ldr	r3, [pc, #1124]	; 122d8 <__assert_fail@plt+0x10cc>
   11e70:	movne	r3, #0
   11e74:	b	11c04 <__assert_fail@plt+0x9f8>
   11e78:	cmp	r0, #51	; 0x33
   11e7c:	beq	121a0 <__assert_fail@plt+0xf94>
   11e80:	bhi	11f08 <__assert_fail@plt+0xcfc>
   11e84:	cmp	r0, #47	; 0x2f
   11e88:	beq	120b8 <__assert_fail@plt+0xeac>
   11e8c:	cmp	r0, #50	; 0x32
   11e90:	ldr	r3, [pc, #1092]	; 122dc <__assert_fail@plt+0x10d0>
   11e94:	movne	r3, #0
   11e98:	b	11c04 <__assert_fail@plt+0x9f8>
   11e9c:	cmp	r0, #37	; 0x25
   11ea0:	beq	12218 <__assert_fail@plt+0x100c>
   11ea4:	bls	11ff4 <__assert_fail@plt+0xde8>
   11ea8:	cmp	r0, #42	; 0x2a
   11eac:	beq	121c8 <__assert_fail@plt+0xfbc>
   11eb0:	bls	11fdc <__assert_fail@plt+0xdd0>
   11eb4:	cmp	r0, #44	; 0x2c
   11eb8:	beq	12150 <__assert_fail@plt+0xf44>
   11ebc:	bhi	120b0 <__assert_fail@plt+0xea4>
   11ec0:	ldr	r3, [pc, #1048]	; 122e0 <__assert_fail@plt+0x10d4>
   11ec4:	b	11c04 <__assert_fail@plt+0x9f8>
   11ec8:	cmp	r0, #87	; 0x57
   11ecc:	beq	12258 <__assert_fail@plt+0x104c>
   11ed0:	bls	11f5c <__assert_fail@plt+0xd50>
   11ed4:	cmp	r0, #101	; 0x65
   11ed8:	beq	12238 <__assert_fail@plt+0x102c>
   11edc:	bls	11f38 <__assert_fail@plt+0xd2c>
   11ee0:	cmp	r0, #108	; 0x6c
   11ee4:	beq	121e8 <__assert_fail@plt+0xfdc>
   11ee8:	bls	11f20 <__assert_fail@plt+0xd14>
   11eec:	cmp	r0, #110	; 0x6e
   11ef0:	beq	12178 <__assert_fail@plt+0xf6c>
   11ef4:	bcc	120a8 <__assert_fail@plt+0xe9c>
   11ef8:	cmp	r0, #111	; 0x6f
   11efc:	ldr	r3, [pc, #992]	; 122e4 <__assert_fail@plt+0x10d8>
   11f00:	movne	r3, #0
   11f04:	b	11c04 <__assert_fail@plt+0x9f8>
   11f08:	cmp	r0, #58	; 0x3a
   11f0c:	beq	120a0 <__assert_fail@plt+0xe94>
   11f10:	cmp	r0, #59	; 0x3b
   11f14:	ldr	r3, [pc, #972]	; 122e8 <__assert_fail@plt+0x10dc>
   11f18:	movne	r3, #0
   11f1c:	b	11c04 <__assert_fail@plt+0x9f8>
   11f20:	cmp	r0, #102	; 0x66
   11f24:	beq	12098 <__assert_fail@plt+0xe8c>
   11f28:	cmp	r0, #103	; 0x67
   11f2c:	ldr	r3, [pc, #952]	; 122ec <__assert_fail@plt+0x10e0>
   11f30:	movne	r3, #0
   11f34:	b	11c04 <__assert_fail@plt+0x9f8>
   11f38:	cmp	r0, #94	; 0x5e
   11f3c:	beq	12188 <__assert_fail@plt+0xf7c>
   11f40:	bhi	11f88 <__assert_fail@plt+0xd7c>
   11f44:	cmp	r0, #92	; 0x5c
   11f48:	beq	12090 <__assert_fail@plt+0xe84>
   11f4c:	cmp	r0, #93	; 0x5d
   11f50:	ldr	r3, [pc, #920]	; 122f0 <__assert_fail@plt+0x10e4>
   11f54:	movne	r3, #0
   11f58:	b	11c04 <__assert_fail@plt+0x9f8>
   11f5c:	cmp	r0, #78	; 0x4e
   11f60:	beq	12230 <__assert_fail@plt+0x1024>
   11f64:	bls	11fb8 <__assert_fail@plt+0xdac>
   11f68:	cmp	r0, #83	; 0x53
   11f6c:	beq	12200 <__assert_fail@plt+0xff4>
   11f70:	bls	11fa0 <__assert_fail@plt+0xd94>
   11f74:	cmp	r0, #85	; 0x55
   11f78:	beq	12180 <__assert_fail@plt+0xf74>
   11f7c:	bhi	12088 <__assert_fail@plt+0xe7c>
   11f80:	ldr	r3, [pc, #876]	; 122f4 <__assert_fail@plt+0x10e8>
   11f84:	b	11c04 <__assert_fail@plt+0x9f8>
   11f88:	cmp	r0, #95	; 0x5f
   11f8c:	beq	12080 <__assert_fail@plt+0xe74>
   11f90:	cmp	r0, #100	; 0x64
   11f94:	ldr	r3, [pc, #860]	; 122f8 <__assert_fail@plt+0x10ec>
   11f98:	movne	r3, #0
   11f9c:	b	11c04 <__assert_fail@plt+0x9f8>
   11fa0:	cmp	r0, #79	; 0x4f
   11fa4:	beq	12078 <__assert_fail@plt+0xe6c>
   11fa8:	cmp	r0, #82	; 0x52
   11fac:	ldr	r3, [pc, #840]	; 122fc <__assert_fail@plt+0x10f0>
   11fb0:	movne	r3, #0
   11fb4:	b	11c04 <__assert_fail@plt+0x9f8>
   11fb8:	cmp	r0, #75	; 0x4b
   11fbc:	beq	121a8 <__assert_fail@plt+0xf9c>
   11fc0:	bhi	12018 <__assert_fail@plt+0xe0c>
   11fc4:	cmp	r0, #73	; 0x49
   11fc8:	beq	12070 <__assert_fail@plt+0xe64>
   11fcc:	cmp	r0, #74	; 0x4a
   11fd0:	ldr	r3, [pc, #808]	; 12300 <__assert_fail@plt+0x10f4>
   11fd4:	movne	r3, #0
   11fd8:	b	11c04 <__assert_fail@plt+0x9f8>
   11fdc:	cmp	r0, #38	; 0x26
   11fe0:	beq	12068 <__assert_fail@plt+0xe5c>
   11fe4:	cmp	r0, #39	; 0x27
   11fe8:	ldr	r3, [pc, #788]	; 12304 <__assert_fail@plt+0x10f8>
   11fec:	movne	r3, #0
   11ff0:	b	11c04 <__assert_fail@plt+0x9f8>
   11ff4:	cmp	r0, #34	; 0x22
   11ff8:	beq	121b0 <__assert_fail@plt+0xfa4>
   11ffc:	bhi	12030 <__assert_fail@plt+0xe24>
   12000:	cmp	r0, #0
   12004:	beq	12060 <__assert_fail@plt+0xe54>
   12008:	cmp	r0, #33	; 0x21
   1200c:	ldr	r3, [pc, #756]	; 12308 <__assert_fail@plt+0x10fc>
   12010:	movne	r3, #0
   12014:	b	11c04 <__assert_fail@plt+0x9f8>
   12018:	cmp	r0, #76	; 0x4c
   1201c:	beq	12058 <__assert_fail@plt+0xe4c>
   12020:	cmp	r0, #77	; 0x4d
   12024:	ldr	r3, [pc, #736]	; 1230c <__assert_fail@plt+0x1100>
   12028:	movne	r3, #0
   1202c:	b	11c04 <__assert_fail@plt+0x9f8>
   12030:	cmp	r0, #35	; 0x23
   12034:	beq	12050 <__assert_fail@plt+0xe44>
   12038:	cmp	r0, #36	; 0x24
   1203c:	ldr	r3, [pc, #716]	; 12310 <__assert_fail@plt+0x1104>
   12040:	movne	r3, #0
   12044:	b	11c04 <__assert_fail@plt+0x9f8>
   12048:	ldr	r3, [pc, #708]	; 12314 <__assert_fail@plt+0x1108>
   1204c:	b	11c04 <__assert_fail@plt+0x9f8>
   12050:	ldr	r3, [pc, #704]	; 12318 <__assert_fail@plt+0x110c>
   12054:	b	11c04 <__assert_fail@plt+0x9f8>
   12058:	ldr	r3, [pc, #700]	; 1231c <__assert_fail@plt+0x1110>
   1205c:	b	11c04 <__assert_fail@plt+0x9f8>
   12060:	ldr	r3, [pc, #696]	; 12320 <__assert_fail@plt+0x1114>
   12064:	b	11c04 <__assert_fail@plt+0x9f8>
   12068:	ldr	r3, [pc, #692]	; 12324 <__assert_fail@plt+0x1118>
   1206c:	b	11c04 <__assert_fail@plt+0x9f8>
   12070:	ldr	r3, [pc, #688]	; 12328 <__assert_fail@plt+0x111c>
   12074:	b	11c04 <__assert_fail@plt+0x9f8>
   12078:	ldr	r3, [pc, #684]	; 1232c <__assert_fail@plt+0x1120>
   1207c:	b	11c04 <__assert_fail@plt+0x9f8>
   12080:	ldr	r3, [pc, #680]	; 12330 <__assert_fail@plt+0x1124>
   12084:	b	11c04 <__assert_fail@plt+0x9f8>
   12088:	ldr	r3, [pc, #676]	; 12334 <__assert_fail@plt+0x1128>
   1208c:	b	11c04 <__assert_fail@plt+0x9f8>
   12090:	ldr	r3, [pc, #672]	; 12338 <__assert_fail@plt+0x112c>
   12094:	b	11c04 <__assert_fail@plt+0x9f8>
   12098:	ldr	r3, [pc, #668]	; 1233c <__assert_fail@plt+0x1130>
   1209c:	b	11c04 <__assert_fail@plt+0x9f8>
   120a0:	ldr	r3, [pc, #664]	; 12340 <__assert_fail@plt+0x1134>
   120a4:	b	11c04 <__assert_fail@plt+0x9f8>
   120a8:	ldr	r3, [pc, #660]	; 12344 <__assert_fail@plt+0x1138>
   120ac:	b	11c04 <__assert_fail@plt+0x9f8>
   120b0:	ldr	r3, [pc, #656]	; 12348 <__assert_fail@plt+0x113c>
   120b4:	b	11c04 <__assert_fail@plt+0x9f8>
   120b8:	ldr	r3, [pc, #652]	; 1234c <__assert_fail@plt+0x1140>
   120bc:	b	11c04 <__assert_fail@plt+0x9f8>
   120c0:	ldr	r3, [pc, #648]	; 12350 <__assert_fail@plt+0x1144>
   120c4:	b	11c04 <__assert_fail@plt+0x9f8>
   120c8:	ldr	r3, [pc, #644]	; 12354 <__assert_fail@plt+0x1148>
   120cc:	b	11c04 <__assert_fail@plt+0x9f8>
   120d0:	ldr	r3, [pc, #640]	; 12358 <__assert_fail@plt+0x114c>
   120d4:	b	11c04 <__assert_fail@plt+0x9f8>
   120d8:	ldr	r3, [pc, #636]	; 1235c <__assert_fail@plt+0x1150>
   120dc:	b	11c04 <__assert_fail@plt+0x9f8>
   120e0:	ldr	r3, [pc, #632]	; 12360 <__assert_fail@plt+0x1154>
   120e4:	b	11c04 <__assert_fail@plt+0x9f8>
   120e8:	ldr	r3, [pc, #628]	; 12364 <__assert_fail@plt+0x1158>
   120ec:	b	11c04 <__assert_fail@plt+0x9f8>
   120f0:	ldr	r3, [pc, #624]	; 12368 <__assert_fail@plt+0x115c>
   120f4:	b	11c04 <__assert_fail@plt+0x9f8>
   120f8:	ldr	r3, [pc, #620]	; 1236c <__assert_fail@plt+0x1160>
   120fc:	b	11c04 <__assert_fail@plt+0x9f8>
   12100:	ldr	r3, [pc, #616]	; 12370 <__assert_fail@plt+0x1164>
   12104:	b	11c04 <__assert_fail@plt+0x9f8>
   12108:	ldr	r3, [pc, #612]	; 12374 <__assert_fail@plt+0x1168>
   1210c:	b	11c04 <__assert_fail@plt+0x9f8>
   12110:	ldr	r3, [pc, #608]	; 12378 <__assert_fail@plt+0x116c>
   12114:	b	11c04 <__assert_fail@plt+0x9f8>
   12118:	ldr	r3, [pc, #604]	; 1237c <__assert_fail@plt+0x1170>
   1211c:	b	11c04 <__assert_fail@plt+0x9f8>
   12120:	ldr	r3, [pc, #600]	; 12380 <__assert_fail@plt+0x1174>
   12124:	b	11c04 <__assert_fail@plt+0x9f8>
   12128:	ldr	r3, [pc, #596]	; 12384 <__assert_fail@plt+0x1178>
   1212c:	b	11c04 <__assert_fail@plt+0x9f8>
   12130:	ldr	r3, [pc, #592]	; 12388 <__assert_fail@plt+0x117c>
   12134:	b	11c04 <__assert_fail@plt+0x9f8>
   12138:	ldr	r3, [pc, #588]	; 1238c <__assert_fail@plt+0x1180>
   1213c:	b	11c04 <__assert_fail@plt+0x9f8>
   12140:	ldr	r3, [pc, #584]	; 12390 <__assert_fail@plt+0x1184>
   12144:	b	11c04 <__assert_fail@plt+0x9f8>
   12148:	ldr	r3, [pc, #580]	; 12394 <__assert_fail@plt+0x1188>
   1214c:	b	11c04 <__assert_fail@plt+0x9f8>
   12150:	ldr	r3, [pc, #576]	; 12398 <__assert_fail@plt+0x118c>
   12154:	b	11c04 <__assert_fail@plt+0x9f8>
   12158:	ldr	r3, [pc, #572]	; 1239c <__assert_fail@plt+0x1190>
   1215c:	b	11c04 <__assert_fail@plt+0x9f8>
   12160:	ldr	r3, [pc, #568]	; 123a0 <__assert_fail@plt+0x1194>
   12164:	b	11c04 <__assert_fail@plt+0x9f8>
   12168:	ldr	r3, [pc, #564]	; 123a4 <__assert_fail@plt+0x1198>
   1216c:	b	11c04 <__assert_fail@plt+0x9f8>
   12170:	ldr	r3, [pc, #560]	; 123a8 <__assert_fail@plt+0x119c>
   12174:	b	11c04 <__assert_fail@plt+0x9f8>
   12178:	ldr	r3, [pc, #556]	; 123ac <__assert_fail@plt+0x11a0>
   1217c:	b	11c04 <__assert_fail@plt+0x9f8>
   12180:	ldr	r3, [pc, #552]	; 123b0 <__assert_fail@plt+0x11a4>
   12184:	b	11c04 <__assert_fail@plt+0x9f8>
   12188:	ldr	r3, [pc, #548]	; 123b4 <__assert_fail@plt+0x11a8>
   1218c:	b	11c04 <__assert_fail@plt+0x9f8>
   12190:	ldr	r3, [pc, #544]	; 123b8 <__assert_fail@plt+0x11ac>
   12194:	b	11c04 <__assert_fail@plt+0x9f8>
   12198:	ldr	r3, [pc, #540]	; 123bc <__assert_fail@plt+0x11b0>
   1219c:	b	11c04 <__assert_fail@plt+0x9f8>
   121a0:	ldr	r3, [pc, #536]	; 123c0 <__assert_fail@plt+0x11b4>
   121a4:	b	11c04 <__assert_fail@plt+0x9f8>
   121a8:	ldr	r3, [pc, #532]	; 123c4 <__assert_fail@plt+0x11b8>
   121ac:	b	11c04 <__assert_fail@plt+0x9f8>
   121b0:	ldr	r3, [pc, #528]	; 123c8 <__assert_fail@plt+0x11bc>
   121b4:	b	11c04 <__assert_fail@plt+0x9f8>
   121b8:	ldr	r3, [pc, #524]	; 123cc <__assert_fail@plt+0x11c0>
   121bc:	b	11c04 <__assert_fail@plt+0x9f8>
   121c0:	ldr	r3, [pc, #520]	; 123d0 <__assert_fail@plt+0x11c4>
   121c4:	b	11c04 <__assert_fail@plt+0x9f8>
   121c8:	ldr	r3, [pc, #516]	; 123d4 <__assert_fail@plt+0x11c8>
   121cc:	b	11c04 <__assert_fail@plt+0x9f8>
   121d0:	ldr	r3, [pc, #512]	; 123d8 <__assert_fail@plt+0x11cc>
   121d4:	b	11c04 <__assert_fail@plt+0x9f8>
   121d8:	ldr	r3, [pc, #508]	; 123dc <__assert_fail@plt+0x11d0>
   121dc:	b	11c04 <__assert_fail@plt+0x9f8>
   121e0:	ldr	r3, [pc, #504]	; 123e0 <__assert_fail@plt+0x11d4>
   121e4:	b	11c04 <__assert_fail@plt+0x9f8>
   121e8:	ldr	r3, [pc, #500]	; 123e4 <__assert_fail@plt+0x11d8>
   121ec:	b	11c04 <__assert_fail@plt+0x9f8>
   121f0:	ldr	r3, [pc, #496]	; 123e8 <__assert_fail@plt+0x11dc>
   121f4:	b	11c04 <__assert_fail@plt+0x9f8>
   121f8:	ldr	r3, [pc, #492]	; 123ec <__assert_fail@plt+0x11e0>
   121fc:	b	11c04 <__assert_fail@plt+0x9f8>
   12200:	ldr	r3, [pc, #488]	; 123f0 <__assert_fail@plt+0x11e4>
   12204:	b	11c04 <__assert_fail@plt+0x9f8>
   12208:	ldr	r3, [pc, #484]	; 123f4 <__assert_fail@plt+0x11e8>
   1220c:	b	11c04 <__assert_fail@plt+0x9f8>
   12210:	ldr	r3, [pc, #480]	; 123f8 <__assert_fail@plt+0x11ec>
   12214:	b	11c04 <__assert_fail@plt+0x9f8>
   12218:	ldr	r3, [pc, #476]	; 123fc <__assert_fail@plt+0x11f0>
   1221c:	b	11c04 <__assert_fail@plt+0x9f8>
   12220:	ldr	r3, [pc, #472]	; 12400 <__assert_fail@plt+0x11f4>
   12224:	b	11c04 <__assert_fail@plt+0x9f8>
   12228:	ldr	r3, [pc, #468]	; 12404 <__assert_fail@plt+0x11f8>
   1222c:	b	11c04 <__assert_fail@plt+0x9f8>
   12230:	ldr	r3, [pc, #464]	; 12408 <__assert_fail@plt+0x11fc>
   12234:	b	11c04 <__assert_fail@plt+0x9f8>
   12238:	ldr	r3, [pc, #460]	; 1240c <__assert_fail@plt+0x1200>
   1223c:	b	11c04 <__assert_fail@plt+0x9f8>
   12240:	ldr	r3, [pc, #456]	; 12410 <__assert_fail@plt+0x1204>
   12244:	b	11c04 <__assert_fail@plt+0x9f8>
   12248:	ldr	r3, [pc, #452]	; 12414 <__assert_fail@plt+0x1208>
   1224c:	b	11c04 <__assert_fail@plt+0x9f8>
   12250:	ldr	r3, [pc, #448]	; 12418 <__assert_fail@plt+0x120c>
   12254:	b	11c04 <__assert_fail@plt+0x9f8>
   12258:	ldr	r3, [pc, #444]	; 1241c <__assert_fail@plt+0x1210>
   1225c:	b	11c04 <__assert_fail@plt+0x9f8>
   12260:	ldr	r3, [pc, #440]	; 12420 <__assert_fail@plt+0x1214>
   12264:	b	11c04 <__assert_fail@plt+0x9f8>
   12268:	ldr	r3, [pc, #436]	; 12424 <__assert_fail@plt+0x1218>
   1226c:	b	11c04 <__assert_fail@plt+0x9f8>
   12270:	ldr	r3, [pc, #432]	; 12428 <__assert_fail@plt+0x121c>
   12274:	b	11c04 <__assert_fail@plt+0x9f8>
   12278:	ldr	r3, [pc, #428]	; 1242c <__assert_fail@plt+0x1220>
   1227c:	b	11c04 <__assert_fail@plt+0x9f8>
   12280:			; <UNDEFINED> instruction: 0x000606b8
   12284:	strdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   12288:	muleq	r6, r8, r6
   1228c:	andeq	r0, r6, r8, lsl r6
   12290:	andeq	r0, r6, r8, asr #11
   12294:	andvc	r0, r0, r0, lsl r0
   12298:	andvc	r0, r0, r4, lsl r0
   1229c:	andvc	r0, r0, r6, lsl r0
   122a0:	andvc	r0, r0, r7, lsl r0
   122a4:	strdeq	r0, [r6], -ip
   122a8:	andeq	r0, r6, r8, asr r6
   122ac:	andvc	r0, r0, r2, lsl r0
   122b0:	andeq	r0, r6, r4, lsr #17
   122b4:	andeq	r0, r6, ip, lsr #16
   122b8:	andeq	r0, r6, r8, asr #15
   122bc:	andeq	r0, r6, r8, ror #16
   122c0:	andeq	r0, r6, r4, lsr #15
   122c4:	andeq	r0, r6, ip, lsl r7
   122c8:	andeq	r0, r6, ip, lsr #11
   122cc:	andeq	r0, r6, r8, asr #10
   122d0:	andeq	r0, r6, r8, asr r7
   122d4:	andeq	r0, r6, ip, ror r5
   122d8:	andeq	r0, r6, ip, asr #5
   122dc:	andeq	r0, r6, r0, ror #4
   122e0:	andeq	r0, r6, r0, lsl #4
   122e4:	andeq	r0, r6, r8, lsl r5
   122e8:	muleq	r6, r0, r2
   122ec:	ldrdeq	r0, [r6], -r4
   122f0:	andeq	r0, r6, ip, asr r4
   122f4:	andeq	r0, r6, r8, ror #7
   122f8:	muleq	r6, r8, r4
   122fc:			; <UNDEFINED> instruction: 0x000603bc
   12300:	andeq	r0, r6, ip, asr #6
   12304:	andeq	r0, r6, r0, ror #3
   12308:	andeq	r0, r6, r4, lsl r9
   1230c:	andeq	r0, r6, r0, lsl #7
   12310:			; <UNDEFINED> instruction: 0x000601b0
   12314:	andeq	r0, r6, r0, ror #13
   12318:	andeq	r0, r6, r0, lsr #3
   1231c:	andeq	r0, r6, ip, ror #6
   12320:	andeq	r0, r6, r4, lsl #3
   12324:	ldrdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   12328:	andeq	r0, r6, ip, lsr r3
   1232c:	andeq	r0, r6, r8, lsr #7
   12330:	andeq	r0, r6, r4, lsl #9
   12334:	andeq	r0, r6, r8, lsl r4
   12338:	andeq	r0, r6, r8, asr #8
   1233c:	andeq	r0, r6, r0, asr #9
   12340:	andeq	r0, r6, r0, lsl #5
   12344:	strdeq	r0, [r6], -r8
   12348:	andeq	r0, r6, r4, lsr #4
   1234c:	andeq	r0, r6, ip, asr #4
   12350:			; <UNDEFINED> instruction: 0x000602b8
   12354:	andeq	r0, r6, r8, ror #10
   12358:	andeq	r0, r6, r4, asr #14
   1235c:	andeq	r0, r6, r8, lsr r5
   12360:	muleq	r6, ip, r5
   12364:	andeq	r0, r6, r8, lsl #14
   12368:	andeq	r0, r6, ip, lsl #15
   1236c:	andeq	r0, r6, r4, asr r8
   12370:	strdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   12374:	andeq	r0, r6, r8, lsl r8
   12378:	muleq	r6, r0, r8
   1237c:	andeq	r0, r6, r0, asr #12
   12380:	andeq	r0, r6, ip, asr #17
   12384:	andeq	r0, r6, r8, ror #11
   12388:	andeq	r0, r6, r8, lsl #12
   1238c:	andeq	r0, r6, r0, lsl #13
   12390:	andeq	r0, r6, r8, lsl r3
   12394:	andeq	r0, r6, r4, lsl #6
   12398:	andeq	r0, r6, r0, lsl r2
   1239c:	ldrdeq	r0, [r6], -ip
   123a0:	ldrdeq	r0, [r6], -r8
   123a4:	andeq	r0, r6, r4, ror #17
   123a8:	andeq	r0, r6, ip, asr #13
   123ac:	andeq	r0, r6, r8, lsl #10
   123b0:	andeq	r0, r6, r0, lsl #8
   123b4:	andeq	r0, r6, r0, ror r4
   123b8:	andeq	r0, r6, ip, lsr #12
   123bc:	andeq	r0, r6, r0, asr #16
   123c0:	andeq	r0, r6, r0, ror r2
   123c4:	andeq	r0, r6, ip, asr r3
   123c8:	muleq	r6, r0, r1
   123cc:	andeq	r0, r6, r4, lsr r7
   123d0:	andeq	r0, r6, r8, asr r5
   123d4:	strdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   123d8:	ldrdeq	r0, [r6], -ip
   123dc:			; <UNDEFINED> instruction: 0x000608b8
   123e0:			; <UNDEFINED> instruction: 0x000605bc
   123e4:	andeq	r0, r6, r8, ror #9
   123e8:	andeq	r0, r6, r8, lsr #13
   123ec:			; <UNDEFINED> instruction: 0x000607b4
   123f0:	ldrdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   123f4:	andeq	r0, r6, r4, lsr #5
   123f8:	andeq	r0, r6, ip, ror #12
   123fc:	andeq	r0, r6, r0, asr #3
   12400:	andeq	r0, r6, ip, lsl #11
   12404:	andeq	r0, r6, r4, ror r7
   12408:	muleq	r6, r4, r3
   1240c:	andeq	r0, r6, ip, lsr #9
   12410:	andeq	r0, r6, ip, ror r8
   12414:	strdeq	r0, [r6], -r8
   12418:	andeq	r0, r6, r4, lsl #16
   1241c:	andeq	r0, r6, r0, lsr r4
   12420:	andeq	r0, r6, r8, lsr r2
   12424:	andeq	r0, r6, ip, lsr #6
   12428:	strdeq	r0, [r6], -r4
   1242c:	andeq	r0, r6, r8, lsr #10
   12430:	ldr	r3, [pc, #660]	; 126cc <__assert_fail@plt+0x14c0>
   12434:	cmp	r0, r3
   12438:	beq	126c4 <__assert_fail@plt+0x14b8>
   1243c:	bhi	12488 <__assert_fail@plt+0x127c>
   12440:	sub	r3, r3, #18
   12444:	cmp	r0, r3
   12448:	beq	126bc <__assert_fail@plt+0x14b0>
   1244c:	bhi	12508 <__assert_fail@plt+0x12fc>
   12450:	sub	r3, r3, #10
   12454:	cmp	r0, r3
   12458:	beq	12694 <__assert_fail@plt+0x1488>
   1245c:	bhi	124d8 <__assert_fail@plt+0x12cc>
   12460:	cmp	r0, #1610612751	; 0x6000000f
   12464:	beq	1268c <__assert_fail@plt+0x1480>
   12468:	sub	r3, r3, #2
   1246c:	cmp	r0, r3
   12470:	beq	12614 <__assert_fail@plt+0x1408>
   12474:	ldr	r3, [pc, #596]	; 126d0 <__assert_fail@plt+0x14c4>
   12478:	cmp	r0, #1610612749	; 0x6000000d
   1247c:	moveq	r0, r3
   12480:	movne	r0, #0
   12484:	bx	lr
   12488:	ldr	r3, [pc, #580]	; 126d4 <__assert_fail@plt+0x14c8>
   1248c:	cmp	r0, r3
   12490:	beq	126b4 <__assert_fail@plt+0x14a8>
   12494:	bhi	12578 <__assert_fail@plt+0x136c>
   12498:	sub	r3, r3, #8
   1249c:	cmp	r0, r3
   124a0:	beq	1269c <__assert_fail@plt+0x1490>
   124a4:	bhi	12548 <__assert_fail@plt+0x133c>
   124a8:	sub	r3, r3, #4
   124ac:	cmp	r0, r3
   124b0:	beq	12654 <__assert_fail@plt+0x1448>
   124b4:	add	r3, r3, #2
   124b8:	cmp	r0, r3
   124bc:	beq	1264c <__assert_fail@plt+0x1440>
   124c0:	ldr	r2, [pc, #528]	; 126d8 <__assert_fail@plt+0x14cc>
   124c4:	ldr	r3, [pc, #528]	; 126dc <__assert_fail@plt+0x14d0>
   124c8:	cmp	r0, r2
   124cc:	moveq	r0, r3
   124d0:	movne	r0, #0
   124d4:	bx	lr
   124d8:	ldr	r3, [pc, #512]	; 126e0 <__assert_fail@plt+0x14d4>
   124dc:	cmp	r0, r3
   124e0:	beq	12664 <__assert_fail@plt+0x1458>
   124e4:	add	r3, r3, #2
   124e8:	cmp	r0, r3
   124ec:	beq	12644 <__assert_fail@plt+0x1438>
   124f0:	ldr	r2, [pc, #492]	; 126e4 <__assert_fail@plt+0x14d8>
   124f4:	ldr	r3, [pc, #492]	; 126e8 <__assert_fail@plt+0x14dc>
   124f8:	cmp	r0, r2
   124fc:	moveq	r0, r3
   12500:	movne	r0, #0
   12504:	bx	lr
   12508:	ldr	r3, [pc, #476]	; 126ec <__assert_fail@plt+0x14e0>
   1250c:	cmp	r0, r3
   12510:	beq	126ac <__assert_fail@plt+0x14a0>
   12514:	bhi	125b8 <__assert_fail@plt+0x13ac>
   12518:	sub	r3, r3, #6
   1251c:	cmp	r0, r3
   12520:	beq	1266c <__assert_fail@plt+0x1460>
   12524:	add	r3, r3, #2
   12528:	cmp	r0, r3
   1252c:	beq	1263c <__assert_fail@plt+0x1430>
   12530:	ldr	r2, [pc, #440]	; 126f0 <__assert_fail@plt+0x14e4>
   12534:	ldr	r3, [pc, #440]	; 126f4 <__assert_fail@plt+0x14e8>
   12538:	cmp	r0, r2
   1253c:	moveq	r0, r3
   12540:	movne	r0, #0
   12544:	bx	lr
   12548:	ldr	r3, [pc, #424]	; 126f8 <__assert_fail@plt+0x14ec>
   1254c:	cmp	r0, r3
   12550:	beq	1265c <__assert_fail@plt+0x1450>
   12554:	add	r3, r3, #2
   12558:	cmp	r0, r3
   1255c:	beq	12634 <__assert_fail@plt+0x1428>
   12560:	ldr	r2, [pc, #404]	; 126fc <__assert_fail@plt+0x14f0>
   12564:	ldr	r3, [pc, #404]	; 12700 <__assert_fail@plt+0x14f4>
   12568:	cmp	r0, r2
   1256c:	moveq	r0, r3
   12570:	movne	r0, #0
   12574:	bx	lr
   12578:	ldr	r3, [pc, #388]	; 12704 <__assert_fail@plt+0x14f8>
   1257c:	cmp	r0, r3
   12580:	beq	126a4 <__assert_fail@plt+0x1498>
   12584:	bhi	125e8 <__assert_fail@plt+0x13dc>
   12588:	sub	r3, r3, #4
   1258c:	cmp	r0, r3
   12590:	beq	12684 <__assert_fail@plt+0x1478>
   12594:	add	r3, r3, #2
   12598:	cmp	r0, r3
   1259c:	beq	1262c <__assert_fail@plt+0x1420>
   125a0:	ldr	r2, [pc, #352]	; 12708 <__assert_fail@plt+0x14fc>
   125a4:	ldr	r3, [pc, #352]	; 1270c <__assert_fail@plt+0x1500>
   125a8:	cmp	r0, r2
   125ac:	moveq	r0, r3
   125b0:	movne	r0, #0
   125b4:	bx	lr
   125b8:	ldr	r3, [pc, #336]	; 12710 <__assert_fail@plt+0x1504>
   125bc:	cmp	r0, r3
   125c0:	beq	1267c <__assert_fail@plt+0x1470>
   125c4:	add	r3, r3, #2
   125c8:	cmp	r0, r3
   125cc:	beq	12624 <__assert_fail@plt+0x1418>
   125d0:	ldr	r2, [pc, #316]	; 12714 <__assert_fail@plt+0x1508>
   125d4:	ldr	r3, [pc, #316]	; 12718 <__assert_fail@plt+0x150c>
   125d8:	cmp	r0, r2
   125dc:	moveq	r0, r3
   125e0:	movne	r0, #0
   125e4:	bx	lr
   125e8:	ldr	r3, [pc, #300]	; 1271c <__assert_fail@plt+0x1510>
   125ec:	cmp	r0, r3
   125f0:	beq	12674 <__assert_fail@plt+0x1468>
   125f4:	cmp	r0, #1879048192	; 0x70000000
   125f8:	beq	1261c <__assert_fail@plt+0x1410>
   125fc:	ldr	r2, [pc, #284]	; 12720 <__assert_fail@plt+0x1514>
   12600:	ldr	r3, [pc, #284]	; 12724 <__assert_fail@plt+0x1518>
   12604:	cmp	r0, r2
   12608:	moveq	r0, r3
   1260c:	movne	r0, #0
   12610:	bx	lr
   12614:	ldr	r0, [pc, #268]	; 12728 <__assert_fail@plt+0x151c>
   12618:	bx	lr
   1261c:	ldr	r0, [pc, #264]	; 1272c <__assert_fail@plt+0x1520>
   12620:	bx	lr
   12624:	ldr	r0, [pc, #260]	; 12730 <__assert_fail@plt+0x1524>
   12628:	bx	lr
   1262c:	ldr	r0, [pc, #256]	; 12734 <__assert_fail@plt+0x1528>
   12630:	bx	lr
   12634:	ldr	r0, [pc, #252]	; 12738 <__assert_fail@plt+0x152c>
   12638:	bx	lr
   1263c:	ldr	r0, [pc, #248]	; 1273c <__assert_fail@plt+0x1530>
   12640:	bx	lr
   12644:	ldr	r0, [pc, #244]	; 12740 <__assert_fail@plt+0x1534>
   12648:	bx	lr
   1264c:	ldr	r0, [pc, #240]	; 12744 <__assert_fail@plt+0x1538>
   12650:	bx	lr
   12654:	ldr	r0, [pc, #236]	; 12748 <__assert_fail@plt+0x153c>
   12658:	bx	lr
   1265c:	ldr	r0, [pc, #232]	; 1274c <__assert_fail@plt+0x1540>
   12660:	bx	lr
   12664:	ldr	r0, [pc, #228]	; 12750 <__assert_fail@plt+0x1544>
   12668:	bx	lr
   1266c:	ldr	r0, [pc, #224]	; 12754 <__assert_fail@plt+0x1548>
   12670:	bx	lr
   12674:	ldr	r0, [pc, #220]	; 12758 <__assert_fail@plt+0x154c>
   12678:	bx	lr
   1267c:	ldr	r0, [pc, #216]	; 1275c <__assert_fail@plt+0x1550>
   12680:	bx	lr
   12684:	ldr	r0, [pc, #212]	; 12760 <__assert_fail@plt+0x1554>
   12688:	bx	lr
   1268c:	ldr	r0, [pc, #208]	; 12764 <__assert_fail@plt+0x1558>
   12690:	bx	lr
   12694:	ldr	r0, [pc, #204]	; 12768 <__assert_fail@plt+0x155c>
   12698:	bx	lr
   1269c:	ldr	r0, [pc, #200]	; 1276c <__assert_fail@plt+0x1560>
   126a0:	bx	lr
   126a4:	ldr	r0, [pc, #196]	; 12770 <__assert_fail@plt+0x1564>
   126a8:	bx	lr
   126ac:	ldr	r0, [pc, #192]	; 12774 <__assert_fail@plt+0x1568>
   126b0:	bx	lr
   126b4:	ldr	r0, [pc, #188]	; 12778 <__assert_fail@plt+0x156c>
   126b8:	bx	lr
   126bc:	ldr	r0, [pc, #184]	; 1277c <__assert_fail@plt+0x1570>
   126c0:	bx	lr
   126c4:	ldr	r0, [pc, #180]	; 12780 <__assert_fail@plt+0x1574>
   126c8:	bx	lr
   126cc:	andvs	r0, r0, r3, lsr r0
   126d0:	andeq	r0, r6, r8, lsr fp
   126d4:	andvs	r0, r0, r3, asr #32
   126d8:	andvs	r0, r0, r5, lsr r0
   126dc:	andeq	r0, r6, r0, asr #20
   126e0:	andvs	r0, r0, sp, lsl r0
   126e4:	andvs	r0, r0, r9, lsl r0
   126e8:	andeq	r0, r6, ip, ror #18
   126ec:	andvs	r0, r0, fp, lsr #32
   126f0:	andvs	r0, r0, r3, lsr #32
   126f4:			; <UNDEFINED> instruction: 0x000609b4
   126f8:	andvs	r0, r0, pc, lsr r0
   126fc:	andvs	r0, r0, sp, lsr r0
   12700:	andeq	r0, r6, r0, lsl #21
   12704:	andvs	r0, r0, fp, asr #32
   12708:	andvs	r0, r0, r5, asr #32
   1270c:	andeq	r0, r6, ip, asr #21
   12710:	andvs	r0, r0, pc, lsr #32
   12714:	andvs	r0, r0, sp, lsr #32
   12718:	strdeq	r0, [r6], -r8
   1271c:	andvs	r0, r0, pc, asr #32
   12720:	andvs	r0, r0, sp, asr #32
   12724:	andeq	r0, r6, ip, lsl fp
   12728:	andeq	r0, r6, r8, asr #18
   1272c:	andeq	r0, r6, r4, lsr #18
   12730:	andeq	r0, r6, r8, lsl sl
   12734:	strdeq	r0, [r6], -r4
   12738:	andeq	r0, r6, r4, lsr #21
   1273c:	ldrdeq	r0, [r6], -ip
   12740:	andeq	r0, r6, ip, lsl #19
   12744:	andeq	r0, r6, ip, asr sl
   12748:	andeq	r0, r6, r0, asr sl
   1274c:	muleq	r6, r4, sl
   12750:	andeq	r0, r6, r8, ror r9
   12754:	andeq	r0, r6, r8, asr #19
   12758:	andeq	r0, r6, ip, lsr #22
   1275c:	andeq	r0, r6, r8, lsl #20
   12760:	andeq	r0, r6, r0, ror #21
   12764:	andeq	r0, r6, r8, lsr r9
   12768:	andeq	r0, r6, r8, asr r9
   1276c:	andeq	r0, r6, r0, ror sl
   12770:	andeq	r0, r6, r8, lsl #22
   12774:	andeq	r0, r6, ip, ror #19
   12778:			; <UNDEFINED> instruction: 0x00060ab8
   1277c:	andeq	r0, r6, r0, lsr #19
   12780:	andeq	r0, r6, ip, lsr #20
   12784:	ldr	r3, [pc, #520]	; 12994 <__assert_fail@plt+0x1788>
   12788:	cmp	r0, r3
   1278c:	beq	1298c <__assert_fail@plt+0x1780>
   12790:	bls	127e4 <__assert_fail@plt+0x15d8>
   12794:	ldr	r3, [pc, #508]	; 12998 <__assert_fail@plt+0x178c>
   12798:	cmp	r0, r3
   1279c:	beq	12984 <__assert_fail@plt+0x1778>
   127a0:	bhi	12840 <__assert_fail@plt+0x1634>
   127a4:	sub	r3, r3, #8
   127a8:	cmp	r0, r3
   127ac:	beq	12974 <__assert_fail@plt+0x1768>
   127b0:	bls	1281c <__assert_fail@plt+0x1610>
   127b4:	ldr	r3, [pc, #480]	; 1299c <__assert_fail@plt+0x1790>
   127b8:	cmp	r0, r3
   127bc:	beq	12954 <__assert_fail@plt+0x1748>
   127c0:	add	r3, r3, #2
   127c4:	cmp	r0, r3
   127c8:	beq	12904 <__assert_fail@plt+0x16f8>
   127cc:	ldr	r2, [pc, #460]	; 129a0 <__assert_fail@plt+0x1794>
   127d0:	ldr	r3, [pc, #460]	; 129a4 <__assert_fail@plt+0x1798>
   127d4:	cmp	r0, r2
   127d8:	moveq	r0, r3
   127dc:	movne	r0, #0
   127e0:	bx	lr
   127e4:	sub	r3, r3, #7
   127e8:	cmp	r0, r3
   127ec:	beq	1297c <__assert_fail@plt+0x1770>
   127f0:	bls	12894 <__assert_fail@plt+0x1688>
   127f4:	ldr	r3, [pc, #428]	; 129a8 <__assert_fail@plt+0x179c>
   127f8:	cmp	r0, r3
   127fc:	beq	12964 <__assert_fail@plt+0x1758>
   12800:	bls	12870 <__assert_fail@plt+0x1664>
   12804:	ldr	r3, [pc, #416]	; 129ac <__assert_fail@plt+0x17a0>
   12808:	cmp	r0, r3
   1280c:	beq	1294c <__assert_fail@plt+0x1740>
   12810:	bhi	1293c <__assert_fail@plt+0x1730>
   12814:	ldr	r0, [pc, #404]	; 129b0 <__assert_fail@plt+0x17a4>
   12818:	bx	lr
   1281c:	sub	r3, r3, #3
   12820:	cmp	r0, r3
   12824:	beq	12934 <__assert_fail@plt+0x1728>
   12828:	ldr	r2, [pc, #388]	; 129b4 <__assert_fail@plt+0x17a8>
   1282c:	ldr	r3, [pc, #388]	; 129b8 <__assert_fail@plt+0x17ac>
   12830:	cmp	r0, r2
   12834:	moveq	r0, r3
   12838:	movne	r0, #0
   1283c:	bx	lr
   12840:	cmp	r0, #1879048193	; 0x70000001
   12844:	beq	1296c <__assert_fail@plt+0x1760>
   12848:	bls	128c4 <__assert_fail@plt+0x16b8>
   1284c:	cmn	r0, #-2147483646	; 0x80000002
   12850:	beq	12944 <__assert_fail@plt+0x1738>
   12854:	cmn	r0, #-2147483647	; 0x80000001
   12858:	beq	1292c <__assert_fail@plt+0x1720>
   1285c:	ldr	r3, [pc, #344]	; 129bc <__assert_fail@plt+0x17b0>
   12860:	cmn	r0, #-2147483645	; 0x80000003
   12864:	moveq	r0, r3
   12868:	movne	r0, #0
   1286c:	bx	lr
   12870:	sub	r3, r3, #2
   12874:	cmp	r0, r3
   12878:	beq	12924 <__assert_fail@plt+0x1718>
   1287c:	ldr	r2, [pc, #316]	; 129c0 <__assert_fail@plt+0x17b4>
   12880:	ldr	r3, [pc, #316]	; 129c4 <__assert_fail@plt+0x17b8>
   12884:	cmp	r0, r2
   12888:	moveq	r0, r3
   1288c:	movne	r0, #0
   12890:	bx	lr
   12894:	cmp	r0, #1610612751	; 0x6000000f
   12898:	beq	1295c <__assert_fail@plt+0x1750>
   1289c:	bls	128e8 <__assert_fail@plt+0x16dc>
   128a0:	ldr	r3, [pc, #288]	; 129c8 <__assert_fail@plt+0x17bc>
   128a4:	cmp	r0, r3
   128a8:	beq	1291c <__assert_fail@plt+0x1710>
   128ac:	ldr	r2, [pc, #280]	; 129cc <__assert_fail@plt+0x17c0>
   128b0:	ldr	r3, [pc, #280]	; 129d0 <__assert_fail@plt+0x17c4>
   128b4:	cmp	r0, r2
   128b8:	moveq	r0, r3
   128bc:	movne	r0, #0
   128c0:	bx	lr
   128c4:	ldr	r3, [pc, #264]	; 129d4 <__assert_fail@plt+0x17c8>
   128c8:	cmp	r0, r3
   128cc:	beq	12914 <__assert_fail@plt+0x1708>
   128d0:	ldr	r2, [pc, #256]	; 129d8 <__assert_fail@plt+0x17cc>
   128d4:	ldr	r3, [pc, #256]	; 129dc <__assert_fail@plt+0x17d0>
   128d8:	cmp	r0, r2
   128dc:	moveq	r0, r3
   128e0:	movne	r0, #0
   128e4:	bx	lr
   128e8:	cmp	r0, #1610612749	; 0x6000000d
   128ec:	beq	1290c <__assert_fail@plt+0x1700>
   128f0:	ldr	r3, [pc, #232]	; 129e0 <__assert_fail@plt+0x17d4>
   128f4:	cmp	r0, #1610612750	; 0x6000000e
   128f8:	moveq	r0, r3
   128fc:	movne	r0, #0
   12900:	bx	lr
   12904:	ldr	r0, [pc, #216]	; 129e4 <__assert_fail@plt+0x17d8>
   12908:	bx	lr
   1290c:	ldr	r0, [pc, #212]	; 129e8 <__assert_fail@plt+0x17dc>
   12910:	bx	lr
   12914:	ldr	r0, [pc, #208]	; 129ec <__assert_fail@plt+0x17e0>
   12918:	bx	lr
   1291c:	ldr	r0, [pc, #204]	; 129f0 <__assert_fail@plt+0x17e4>
   12920:	bx	lr
   12924:	ldr	r0, [pc, #200]	; 129f4 <__assert_fail@plt+0x17e8>
   12928:	bx	lr
   1292c:	ldr	r0, [pc, #196]	; 129f8 <__assert_fail@plt+0x17ec>
   12930:	bx	lr
   12934:	ldr	r0, [pc, #192]	; 129fc <__assert_fail@plt+0x17f0>
   12938:	bx	lr
   1293c:	ldr	r0, [pc, #188]	; 12a00 <__assert_fail@plt+0x17f4>
   12940:	bx	lr
   12944:	ldr	r0, [pc, #184]	; 12a04 <__assert_fail@plt+0x17f8>
   12948:	bx	lr
   1294c:	ldr	r0, [pc, #180]	; 12a08 <__assert_fail@plt+0x17fc>
   12950:	bx	lr
   12954:	ldr	r0, [pc, #176]	; 12a0c <__assert_fail@plt+0x1800>
   12958:	bx	lr
   1295c:	ldr	r0, [pc, #172]	; 12a10 <__assert_fail@plt+0x1804>
   12960:	bx	lr
   12964:	ldr	r0, [pc, #168]	; 12a14 <__assert_fail@plt+0x1808>
   12968:	bx	lr
   1296c:	ldr	r0, [pc, #164]	; 12a18 <__assert_fail@plt+0x180c>
   12970:	bx	lr
   12974:	ldr	r0, [pc, #160]	; 12a1c <__assert_fail@plt+0x1810>
   12978:	bx	lr
   1297c:	ldr	r0, [pc, #156]	; 12a20 <__assert_fail@plt+0x1814>
   12980:	bx	lr
   12984:	ldr	r0, [pc, #152]	; 12a24 <__assert_fail@plt+0x1818>
   12988:	bx	lr
   1298c:	ldr	r0, [pc, #148]	; 12a28 <__assert_fail@plt+0x181c>
   12990:	bx	lr
   12994:	andvs	r0, r0, r9, lsl r0
   12998:	andvs	r0, r0, r5, lsr #32
   1299c:	andvs	r0, r0, r1, lsr #32
   129a0:	andvs	r0, r0, pc, lsl r0
   129a4:	andeq	r0, r6, r0, lsr #24
   129a8:	andvs	r0, r0, r5, lsl r0
   129ac:	andvs	r0, r0, r7, lsl r0
   129b0:			; <UNDEFINED> instruction: 0x00060bb4
   129b4:	andvs	r0, r0, fp, lsl r0
   129b8:	andeq	r0, r6, r0, lsl #24
   129bc:	andeq	r0, r6, r0, lsl #25
   129c0:	andvs	r0, r0, r4, lsl r0
   129c4:	muleq	r6, r4, fp
   129c8:	andvs	r0, r0, r0, lsl r0
   129cc:	andvs	r0, r0, r1, lsl r0
   129d0:	andeq	r0, r6, ip, ror #22
   129d4:	andvs	r0, r0, r9, lsr #32
   129d8:	andvs	r0, r0, fp, lsr #32
   129dc:	andeq	r0, r6, r0, ror #24
   129e0:	muleq	r6, ip, ip
   129e4:	andeq	r0, r6, ip, lsr ip
   129e8:	andeq	r0, r6, r4, asr #22
   129ec:	andeq	r0, r6, r4, asr ip
   129f0:	andeq	r0, r6, r0, ror #22
   129f4:	andeq	r0, r6, r4, lsl #23
   129f8:	muleq	r6, r4, ip
   129fc:	strdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   12a00:	ldrdeq	r0, [r6], -r4
   12a04:	andeq	r0, r6, ip, lsl #25
   12a08:	andeq	r0, r6, r4, asr #23
   12a0c:	andeq	r0, r6, r0, lsr ip
   12a10:	andeq	r0, r6, r4, asr fp
   12a14:	andeq	r0, r6, r4, lsr #23
   12a18:	andeq	r0, r6, r0, ror ip
   12a1c:	andeq	r0, r6, ip, lsl #24
   12a20:	andeq	r0, r6, r8, ror fp
   12a24:	andeq	r0, r6, r8, asr #24
   12a28:	andeq	r0, r6, r4, ror #23
   12a2c:	cmp	r0, #1610612745	; 0x60000009
   12a30:	beq	12b9c <__assert_fail@plt+0x1990>
   12a34:	bhi	12a6c <__assert_fail@plt+0x1860>
   12a38:	cmp	r0, #1610612740	; 0x60000004
   12a3c:	beq	12b94 <__assert_fail@plt+0x1988>
   12a40:	bls	12aa4 <__assert_fail@plt+0x1898>
   12a44:	cmp	r0, #1610612742	; 0x60000006
   12a48:	beq	12b6c <__assert_fail@plt+0x1960>
   12a4c:	bcc	12b64 <__assert_fail@plt+0x1958>
   12a50:	cmp	r0, #1610612743	; 0x60000007
   12a54:	beq	12b5c <__assert_fail@plt+0x1950>
   12a58:	ldr	r3, [pc, #324]	; 12ba4 <__assert_fail@plt+0x1998>
   12a5c:	cmp	r0, #1610612744	; 0x60000008
   12a60:	moveq	r0, r3
   12a64:	movne	r0, #0
   12a68:	bx	lr
   12a6c:	ldr	r3, [pc, #308]	; 12ba8 <__assert_fail@plt+0x199c>
   12a70:	cmp	r0, r3
   12a74:	beq	12b8c <__assert_fail@plt+0x1980>
   12a78:	bls	12ae4 <__assert_fail@plt+0x18d8>
   12a7c:	cmp	r0, #1879048192	; 0x70000000
   12a80:	beq	12b7c <__assert_fail@plt+0x1970>
   12a84:	bls	12acc <__assert_fail@plt+0x18c0>
   12a88:	cmp	r0, #1879048193	; 0x70000001
   12a8c:	beq	12b44 <__assert_fail@plt+0x1938>
   12a90:	ldr	r3, [pc, #276]	; 12bac <__assert_fail@plt+0x19a0>
   12a94:	cmp	r0, #1879048194	; 0x70000002
   12a98:	moveq	r0, r3
   12a9c:	movne	r0, #0
   12aa0:	bx	lr
   12aa4:	cmp	r0, #1610612737	; 0x60000001
   12aa8:	beq	12b74 <__assert_fail@plt+0x1968>
   12aac:	bls	12b18 <__assert_fail@plt+0x190c>
   12ab0:	cmp	r0, #1610612738	; 0x60000002
   12ab4:	beq	12b54 <__assert_fail@plt+0x1948>
   12ab8:	ldr	r3, [pc, #240]	; 12bb0 <__assert_fail@plt+0x19a4>
   12abc:	cmp	r0, #1610612739	; 0x60000003
   12ac0:	moveq	r0, r3
   12ac4:	movne	r0, #0
   12ac8:	bx	lr
   12acc:	ldr	r2, [pc, #224]	; 12bb4 <__assert_fail@plt+0x19a8>
   12ad0:	ldr	r3, [pc, #224]	; 12bb8 <__assert_fail@plt+0x19ac>
   12ad4:	cmp	r0, r2
   12ad8:	moveq	r0, r3
   12adc:	movne	r0, #0
   12ae0:	bx	lr
   12ae4:	sub	r3, r3, #3
   12ae8:	cmp	r0, r3
   12aec:	beq	12b84 <__assert_fail@plt+0x1978>
   12af0:	bls	12b2c <__assert_fail@plt+0x1920>
   12af4:	ldr	r3, [pc, #192]	; 12bbc <__assert_fail@plt+0x19b0>
   12af8:	cmp	r0, r3
   12afc:	beq	12b4c <__assert_fail@plt+0x1940>
   12b00:	ldr	r2, [pc, #184]	; 12bc0 <__assert_fail@plt+0x19b4>
   12b04:	ldr	r3, [pc, #184]	; 12bc4 <__assert_fail@plt+0x19b8>
   12b08:	cmp	r0, r2
   12b0c:	moveq	r0, r3
   12b10:	movne	r0, #0
   12b14:	bx	lr
   12b18:	ldr	r3, [pc, #168]	; 12bc8 <__assert_fail@plt+0x19bc>
   12b1c:	cmp	r0, #1610612736	; 0x60000000
   12b20:	moveq	r0, r3
   12b24:	movne	r0, #0
   12b28:	bx	lr
   12b2c:	ldr	r2, [pc, #152]	; 12bcc <__assert_fail@plt+0x19c0>
   12b30:	ldr	r3, [pc, #152]	; 12bd0 <__assert_fail@plt+0x19c4>
   12b34:	cmp	r0, r2
   12b38:	moveq	r0, r3
   12b3c:	movne	r0, #0
   12b40:	bx	lr
   12b44:	ldr	r0, [pc, #136]	; 12bd4 <__assert_fail@plt+0x19c8>
   12b48:	bx	lr
   12b4c:	ldr	r0, [pc, #132]	; 12bd8 <__assert_fail@plt+0x19cc>
   12b50:	bx	lr
   12b54:	ldr	r0, [pc, #128]	; 12bdc <__assert_fail@plt+0x19d0>
   12b58:	bx	lr
   12b5c:	ldr	r0, [pc, #124]	; 12be0 <__assert_fail@plt+0x19d4>
   12b60:	bx	lr
   12b64:	ldr	r0, [pc, #120]	; 12be4 <__assert_fail@plt+0x19d8>
   12b68:	bx	lr
   12b6c:	ldr	r0, [pc, #116]	; 12be8 <__assert_fail@plt+0x19dc>
   12b70:	bx	lr
   12b74:	ldr	r0, [pc, #112]	; 12bec <__assert_fail@plt+0x19e0>
   12b78:	bx	lr
   12b7c:	ldr	r0, [pc, #108]	; 12bf0 <__assert_fail@plt+0x19e4>
   12b80:	bx	lr
   12b84:	ldr	r0, [pc, #104]	; 12bf4 <__assert_fail@plt+0x19e8>
   12b88:	bx	lr
   12b8c:	ldr	r0, [pc, #100]	; 12bf8 <__assert_fail@plt+0x19ec>
   12b90:	bx	lr
   12b94:	ldr	r0, [pc, #96]	; 12bfc <__assert_fail@plt+0x19f0>
   12b98:	bx	lr
   12b9c:	ldr	r0, [pc, #92]	; 12c00 <__assert_fail@plt+0x19f4>
   12ba0:	bx	lr
   12ba4:	andeq	r0, r6, r8, lsl sp
   12ba8:	andvs	r0, r0, r4, lsl r0
   12bac:	andeq	r0, r6, r4, lsr #27
   12bb0:	andeq	r0, r6, r4, asr #25
   12bb4:	andvs	r0, r0, r5, lsl r0
   12bb8:	andeq	r0, r6, r4, ror sp
   12bbc:	andvs	r0, r0, r2, lsl r0
   12bc0:	andvs	r0, r0, r3, lsl r0
   12bc4:	andeq	r0, r6, r8, asr sp
   12bc8:	andeq	r0, r6, ip, lsr #25
   12bcc:	andvs	r0, r0, r0, lsl r0
   12bd0:	andeq	r0, r6, r0, lsr sp
   12bd4:	muleq	r6, r4, sp
   12bd8:	andeq	r0, r6, r8, asr #26
   12bdc:			; <UNDEFINED> instruction: 0x00060cb4
   12be0:	andeq	r0, r6, r8, lsl #26
   12be4:	andeq	r0, r6, r4, ror #25
   12be8:	strdeq	r0, [r6], -r4
   12bec:			; <UNDEFINED> instruction: 0x00060db8
   12bf0:	andeq	r0, r6, r4, lsl #27
   12bf4:	andeq	r0, r6, ip, lsr sp
   12bf8:	andeq	r0, r6, r8, ror #26
   12bfc:	ldrdeq	r0, [r6], -r4
   12c00:	andeq	r0, r6, r4, lsr #26
   12c04:	ldrd	r2, [r1]
   12c08:	push	{r4, r5}
   12c0c:	ldrd	r4, [r0]
   12c10:	cmp	r5, r3
   12c14:	cmpeq	r4, r2
   12c18:	movhi	r0, #1
   12c1c:	bhi	12c28 <__assert_fail@plt+0x1a1c>
   12c20:	mvncc	r0, #0
   12c24:	movcs	r0, #0
   12c28:	pop	{r4, r5}
   12c2c:	bx	lr
   12c30:	ldr	ip, [pc, #228]	; 12d1c <__assert_fail@plt+0x1b10>
   12c34:	push	{r4, r5, r6, lr}
   12c38:	mov	r5, r1
   12c3c:	ldr	r1, [ip]
   12c40:	mov	r4, r0
   12c44:	cmp	r1, #0
   12c48:	beq	12cc4 <__assert_fail@plt+0x1ab8>
   12c4c:	cmp	r3, #0
   12c50:	cmpeq	r2, #11
   12c54:	bls	12ca4 <__assert_fail@plt+0x1a98>
   12c58:	ldr	r6, [pc, #192]	; 12d20 <__assert_fail@plt+0x1b14>
   12c5c:	mov	r0, r5
   12c60:	mov	r1, #4
   12c64:	ldr	r3, [r6]
   12c68:	blx	r3
   12c6c:	mov	r1, #4
   12c70:	ldr	r3, [r6]
   12c74:	str	r0, [r4]
   12c78:	add	r0, r5, r1
   12c7c:	blx	r3
   12c80:	ldr	r3, [r6]
   12c84:	strd	r0, [r4, #8]
   12c88:	add	r0, r5, #8
   12c8c:	mov	r1, #4
   12c90:	blx	r3
   12c94:	mov	r3, #12
   12c98:	strd	r0, [r4, #16]
   12c9c:	mov	r0, r3
   12ca0:	pop	{r4, r5, r6, pc}
   12ca4:	mov	r2, #5
   12ca8:	ldr	r1, [pc, #116]	; 12d24 <__assert_fail@plt+0x1b18>
   12cac:	mov	r0, #0
   12cb0:	bl	10f90 <dcgettext@plt>
   12cb4:	bl	548ac <error@@Base>
   12cb8:	mov	r3, #0
   12cbc:	mov	r0, r3
   12cc0:	pop	{r4, r5, r6, pc}
   12cc4:	cmp	r3, #0
   12cc8:	cmpeq	r2, #23
   12ccc:	bls	12ca4 <__assert_fail@plt+0x1a98>
   12cd0:	ldr	r6, [pc, #72]	; 12d20 <__assert_fail@plt+0x1b14>
   12cd4:	mov	r0, r5
   12cd8:	mov	r1, #4
   12cdc:	ldr	r3, [r6]
   12ce0:	blx	r3
   12ce4:	mov	r1, #8
   12ce8:	ldr	r3, [r6]
   12cec:	str	r0, [r4]
   12cf0:	add	r0, r5, r1
   12cf4:	blx	r3
   12cf8:	ldr	r3, [r6]
   12cfc:	strd	r0, [r4, #8]
   12d00:	add	r0, r5, #16
   12d04:	mov	r1, #8
   12d08:	blx	r3
   12d0c:	mov	r3, #24
   12d10:	strd	r0, [r4, #16]
   12d14:	mov	r0, r3
   12d18:	pop	{r4, r5, r6, pc}
   12d1c:	andeq	sl, r9, r8, lsr r4
   12d20:	andeq	lr, r9, ip, asr sp
   12d24:	andeq	r0, r6, r8, asr #27
   12d28:	ldr	r1, [pc, #88]	; 12d88 <__assert_fail@plt+0x1b7c>
   12d2c:	push	{r4, r6, r7, lr}
   12d30:	mov	r6, r2
   12d34:	ldr	r2, [r1, #4]
   12d38:	sub	sp, sp, #40	; 0x28
   12d3c:	add	ip, r2, #1
   12d40:	and	ip, ip, #3
   12d44:	mov	r7, r3
   12d48:	add	r4, r1, #8
   12d4c:	mov	r3, r0
   12d50:	add	r4, r4, r2, lsl #6
   12d54:	str	ip, [r1, #4]
   12d58:	add	r0, sp, #8
   12d5c:	ldr	r2, [pc, #40]	; 12d8c <__assert_fail@plt+0x1b80>
   12d60:	ldr	r1, [pc, #40]	; 12d90 <__assert_fail@plt+0x1b84>
   12d64:	bl	1114c <sprintf@plt>
   12d68:	strd	r6, [sp]
   12d6c:	add	r2, sp, #8
   12d70:	mov	r0, r4
   12d74:	mov	r1, #64	; 0x40
   12d78:	bl	110b0 <snprintf@plt>
   12d7c:	mov	r0, r4
   12d80:	add	sp, sp, #40	; 0x28
   12d84:	pop	{r4, r6, r7, pc}
   12d88:	andeq	sl, r9, r8, lsr r4
   12d8c:	andeq	r0, r6, r8, lsl #28
   12d90:	andeq	r0, r6, ip, lsl #28
   12d94:	cmp	r0, #4
   12d98:	ldrls	pc, [pc, r0, lsl #2]
   12d9c:	b	12e04 <__assert_fail@plt+0x1bf8>
   12da0:	andeq	r2, r1, r4, asr #27
   12da4:	ldrdeq	r2, [r1], -r4
   12da8:	andeq	r2, r1, r4, ror #27
   12dac:	strdeq	r2, [r1], -r4
   12db0:			; <UNDEFINED> instruction: 0x00012db4
   12db4:	mov	r2, #5
   12db8:	ldr	r1, [pc, #152]	; 12e58 <__assert_fail@plt+0x1c4c>
   12dbc:	mov	r0, #0
   12dc0:	b	10f90 <dcgettext@plt>
   12dc4:	mov	r2, #5
   12dc8:	ldr	r1, [pc, #140]	; 12e5c <__assert_fail@plt+0x1c50>
   12dcc:	mov	r0, #0
   12dd0:	b	10f90 <dcgettext@plt>
   12dd4:	mov	r2, #5
   12dd8:	ldr	r1, [pc, #128]	; 12e60 <__assert_fail@plt+0x1c54>
   12ddc:	mov	r0, #0
   12de0:	b	10f90 <dcgettext@plt>
   12de4:	mov	r2, #5
   12de8:	ldr	r1, [pc, #116]	; 12e64 <__assert_fail@plt+0x1c58>
   12dec:	mov	r0, #0
   12df0:	b	10f90 <dcgettext@plt>
   12df4:	mov	r2, #5
   12df8:	ldr	r1, [pc, #104]	; 12e68 <__assert_fail@plt+0x1c5c>
   12dfc:	mov	r0, #0
   12e00:	b	10f90 <dcgettext@plt>
   12e04:	sub	r3, r0, #65280	; 0xff00
   12e08:	cmp	r3, #255	; 0xff
   12e0c:	push	{r4, lr}
   12e10:	movls	r2, #5
   12e14:	mov	r4, r0
   12e18:	ldrls	r1, [pc, #76]	; 12e6c <__assert_fail@plt+0x1c60>
   12e1c:	bls	12e34 <__assert_fail@plt+0x1c28>
   12e20:	sub	r3, r0, #65024	; 0xfe00
   12e24:	cmp	r3, #255	; 0xff
   12e28:	mov	r2, #5
   12e2c:	ldrls	r1, [pc, #60]	; 12e70 <__assert_fail@plt+0x1c64>
   12e30:	ldrhi	r1, [pc, #60]	; 12e74 <__assert_fail@plt+0x1c68>
   12e34:	mov	r0, #0
   12e38:	bl	10f90 <dcgettext@plt>
   12e3c:	mov	r3, r4
   12e40:	mov	r1, #32
   12e44:	mov	r2, r0
   12e48:	ldr	r0, [pc, #40]	; 12e78 <__assert_fail@plt+0x1c6c>
   12e4c:	bl	110b0 <snprintf@plt>
   12e50:	ldr	r0, [pc, #32]	; 12e78 <__assert_fail@plt+0x1c6c>
   12e54:	pop	{r4, pc}
   12e58:	andeq	r0, r6, ip, ror #28
   12e5c:	andeq	r0, r6, r4, lsl lr
   12e60:	andeq	r0, r6, r0, lsr #28
   12e64:	andeq	r0, r6, r8, lsr lr
   12e68:	andeq	r0, r6, r0, asr lr
   12e6c:	andeq	r0, r6, r0, lsl #29
   12e70:	muleq	r6, ip, lr
   12e74:			; <UNDEFINED> instruction: 0x00060eb0
   12e78:	andeq	sl, r9, r0, asr #10
   12e7c:	cmp	r0, #118	; 0x76
   12e80:	beq	13c50 <__assert_fail@plt+0x2a44>
   12e84:	bhi	12ed8 <__assert_fail@plt+0x1ccc>
   12e88:	cmp	r0, #66	; 0x42
   12e8c:	beq	13c48 <__assert_fail@plt+0x2a3c>
   12e90:	bhi	131c0 <__assert_fail@plt+0x1fb4>
   12e94:	cmp	r0, #40	; 0x28
   12e98:	beq	13c30 <__assert_fail@plt+0x2a24>
   12e9c:	bls	13188 <__assert_fail@plt+0x1f7c>
   12ea0:	cmp	r0, #53	; 0x35
   12ea4:	beq	13c10 <__assert_fail@plt+0x2a04>
   12ea8:	bhi	13484 <__assert_fail@plt+0x2278>
   12eac:	cmp	r0, #46	; 0x2e
   12eb0:	beq	13ba8 <__assert_fail@plt+0x299c>
   12eb4:	bls	1314c <__assert_fail@plt+0x1f40>
   12eb8:	cmp	r0, #49	; 0x31
   12ebc:	beq	13b20 <__assert_fail@plt+0x2914>
   12ec0:	bls	12f28 <__assert_fail@plt+0x1d1c>
   12ec4:	cmp	r0, #51	; 0x33
   12ec8:	beq	13a08 <__assert_fail@plt+0x27fc>
   12ecc:	bhi	13890 <__assert_fail@plt+0x2684>
   12ed0:	ldr	r0, [pc, #3468]	; 13c64 <__assert_fail@plt+0x2a58>
   12ed4:	bx	lr
   12ed8:	cmp	r0, #197	; 0xc5
   12edc:	beq	13c40 <__assert_fail@plt+0x2a34>
   12ee0:	bhi	13034 <__assert_fail@plt+0x1e28>
   12ee4:	cmp	r0, #171	; 0xab
   12ee8:	beq	13c38 <__assert_fail@plt+0x2a2c>
   12eec:	bhi	12ffc <__assert_fail@plt+0x1df0>
   12ef0:	cmp	r0, #142	; 0x8e
   12ef4:	beq	13c00 <__assert_fail@plt+0x29f4>
   12ef8:	bhi	12f7c <__assert_fail@plt+0x1d70>
   12efc:	cmp	r0, #135	; 0x87
   12f00:	beq	13b90 <__assert_fail@plt+0x2984>
   12f04:	bls	12f58 <__assert_fail@plt+0x1d4c>
   12f08:	cmp	r0, #138	; 0x8a
   12f0c:	beq	13b18 <__assert_fail@plt+0x290c>
   12f10:	bls	12f40 <__assert_fail@plt+0x1d34>
   12f14:	cmp	r0, #140	; 0x8c
   12f18:	beq	139e8 <__assert_fail@plt+0x27dc>
   12f1c:	bhi	13858 <__assert_fail@plt+0x264c>
   12f20:	ldr	r0, [pc, #3392]	; 13c68 <__assert_fail@plt+0x2a5c>
   12f24:	bx	lr
   12f28:	cmp	r0, #47	; 0x2f
   12f2c:	beq	13850 <__assert_fail@plt+0x2644>
   12f30:	cmp	r0, #48	; 0x30
   12f34:	bne	13450 <__assert_fail@plt+0x2244>
   12f38:	ldr	r0, [pc, #3372]	; 13c6c <__assert_fail@plt+0x2a60>
   12f3c:	bx	lr
   12f40:	cmp	r0, #136	; 0x88
   12f44:	beq	13998 <__assert_fail@plt+0x278c>
   12f48:	cmp	r0, #137	; 0x89
   12f4c:	bne	13450 <__assert_fail@plt+0x2244>
   12f50:	ldr	r0, [pc, #3352]	; 13c70 <__assert_fail@plt+0x2a64>
   12f54:	bx	lr
   12f58:	cmp	r0, #131	; 0x83
   12f5c:	beq	13ab0 <__assert_fail@plt+0x28a4>
   12f60:	bhi	12fa8 <__assert_fail@plt+0x1d9c>
   12f64:	cmp	r0, #119	; 0x77
   12f68:	beq	13990 <__assert_fail@plt+0x2784>
   12f6c:	cmp	r0, #120	; 0x78
   12f70:	bne	13450 <__assert_fail@plt+0x2244>
   12f74:	ldr	r0, [pc, #3320]	; 13c74 <__assert_fail@plt+0x2a68>
   12f78:	bx	lr
   12f7c:	cmp	r0, #164	; 0xa4
   12f80:	beq	13ba0 <__assert_fail@plt+0x2994>
   12f84:	bls	12fd8 <__assert_fail@plt+0x1dcc>
   12f88:	cmp	r0, #167	; 0xa7
   12f8c:	beq	13b30 <__assert_fail@plt+0x2924>
   12f90:	bls	12fc0 <__assert_fail@plt+0x1db4>
   12f94:	cmp	r0, #169	; 0xa9
   12f98:	beq	139d0 <__assert_fail@plt+0x27c4>
   12f9c:	bhi	13988 <__assert_fail@plt+0x277c>
   12fa0:	ldr	r0, [pc, #3280]	; 13c78 <__assert_fail@plt+0x2a6c>
   12fa4:	bx	lr
   12fa8:	cmp	r0, #132	; 0x84
   12fac:	beq	13980 <__assert_fail@plt+0x2774>
   12fb0:	cmp	r0, #134	; 0x86
   12fb4:	bne	13450 <__assert_fail@plt+0x2244>
   12fb8:	ldr	r0, [pc, #3260]	; 13c7c <__assert_fail@plt+0x2a70>
   12fbc:	bx	lr
   12fc0:	cmp	r0, #165	; 0xa5
   12fc4:	beq	13978 <__assert_fail@plt+0x276c>
   12fc8:	cmp	r0, #166	; 0xa6
   12fcc:	bne	13450 <__assert_fail@plt+0x2244>
   12fd0:	ldr	r0, [pc, #3240]	; 13c80 <__assert_fail@plt+0x2a74>
   12fd4:	bx	lr
   12fd8:	cmp	r0, #161	; 0xa1
   12fdc:	beq	13aa8 <__assert_fail@plt+0x289c>
   12fe0:	bhi	13078 <__assert_fail@plt+0x1e6c>
   12fe4:	cmp	r0, #144	; 0x90
   12fe8:	beq	13970 <__assert_fail@plt+0x2764>
   12fec:	cmp	r0, #160	; 0xa0
   12ff0:	bne	13450 <__assert_fail@plt+0x2244>
   12ff4:	ldr	r0, [pc, #3208]	; 13c84 <__assert_fail@plt+0x2a78>
   12ff8:	bx	lr
   12ffc:	cmp	r0, #184	; 0xb8
   13000:	beq	13bf8 <__assert_fail@plt+0x29ec>
   13004:	bhi	130cc <__assert_fail@plt+0x1ec0>
   13008:	cmp	r0, #177	; 0xb1
   1300c:	beq	13c18 <__assert_fail@plt+0x2a0c>
   13010:	bls	130a8 <__assert_fail@plt+0x1e9c>
   13014:	cmp	r0, #180	; 0xb4
   13018:	beq	13b38 <__assert_fail@plt+0x292c>
   1301c:	bls	13090 <__assert_fail@plt+0x1e84>
   13020:	cmp	r0, #182	; 0xb6
   13024:	beq	139e0 <__assert_fail@plt+0x27d4>
   13028:	bhi	13968 <__assert_fail@plt+0x275c>
   1302c:	ldr	r0, [pc, #3156]	; 13c88 <__assert_fail@plt+0x2a7c>
   13030:	bx	lr
   13034:	cmp	r0, #250	; 0xfa
   13038:	beq	13c20 <__assert_fail@plt+0x2a14>
   1303c:	bhi	13578 <__assert_fail@plt+0x236c>
   13040:	cmp	r0, #215	; 0xd7
   13044:	beq	13c08 <__assert_fail@plt+0x29fc>
   13048:	bhi	13420 <__assert_fail@plt+0x2214>
   1304c:	cmp	r0, #203	; 0xcb
   13050:	beq	13bb0 <__assert_fail@plt+0x29a4>
   13054:	bls	13524 <__assert_fail@plt+0x2318>
   13058:	cmp	r0, #211	; 0xd3
   1305c:	beq	13b28 <__assert_fail@plt+0x291c>
   13060:	bls	13170 <__assert_fail@plt+0x1f64>
   13064:	cmp	r0, #213	; 0xd5
   13068:	beq	139d8 <__assert_fail@plt+0x27cc>
   1306c:	bhi	13960 <__assert_fail@plt+0x2754>
   13070:	ldr	r0, [pc, #3092]	; 13c8c <__assert_fail@plt+0x2a80>
   13074:	bx	lr
   13078:	cmp	r0, #162	; 0xa2
   1307c:	beq	13958 <__assert_fail@plt+0x274c>
   13080:	cmp	r0, #163	; 0xa3
   13084:	bne	13450 <__assert_fail@plt+0x2244>
   13088:	ldr	r0, [pc, #3072]	; 13c90 <__assert_fail@plt+0x2a84>
   1308c:	bx	lr
   13090:	cmp	r0, #178	; 0xb2
   13094:	beq	13950 <__assert_fail@plt+0x2744>
   13098:	cmp	r0, #179	; 0xb3
   1309c:	bne	13450 <__assert_fail@plt+0x2244>
   130a0:	ldr	r0, [pc, #3052]	; 13c94 <__assert_fail@plt+0x2a88>
   130a4:	bx	lr
   130a8:	cmp	r0, #174	; 0xae
   130ac:	beq	13a98 <__assert_fail@plt+0x288c>
   130b0:	bhi	130f8 <__assert_fail@plt+0x1eec>
   130b4:	cmp	r0, #172	; 0xac
   130b8:	beq	13948 <__assert_fail@plt+0x273c>
   130bc:	cmp	r0, #173	; 0xad
   130c0:	bne	13450 <__assert_fail@plt+0x2244>
   130c4:	ldr	r0, [pc, #3020]	; 13c98 <__assert_fail@plt+0x2a8c>
   130c8:	bx	lr
   130cc:	cmp	r0, #190	; 0xbe
   130d0:	beq	13b70 <__assert_fail@plt+0x2964>
   130d4:	bls	13128 <__assert_fail@plt+0x1f1c>
   130d8:	cmp	r0, #193	; 0xc1
   130dc:	beq	13b08 <__assert_fail@plt+0x28fc>
   130e0:	bls	13110 <__assert_fail@plt+0x1f04>
   130e4:	cmp	r0, #195	; 0xc3
   130e8:	beq	13a18 <__assert_fail@plt+0x280c>
   130ec:	bhi	13940 <__assert_fail@plt+0x2734>
   130f0:	ldr	r0, [pc, #2980]	; 13c9c <__assert_fail@plt+0x2a90>
   130f4:	bx	lr
   130f8:	cmp	r0, #175	; 0xaf
   130fc:	beq	13938 <__assert_fail@plt+0x272c>
   13100:	cmp	r0, #176	; 0xb0
   13104:	bne	13450 <__assert_fail@plt+0x2244>
   13108:	ldr	r0, [pc, #2960]	; 13ca0 <__assert_fail@plt+0x2a94>
   1310c:	bx	lr
   13110:	cmp	r0, #191	; 0xbf
   13114:	beq	13930 <__assert_fail@plt+0x2724>
   13118:	cmp	r0, #192	; 0xc0
   1311c:	bne	13450 <__assert_fail@plt+0x2244>
   13120:	ldr	r0, [pc, #2940]	; 13ca4 <__assert_fail@plt+0x2a98>
   13124:	bx	lr
   13128:	cmp	r0, #187	; 0xbb
   1312c:	beq	13a70 <__assert_fail@plt+0x2864>
   13130:	bhi	134b0 <__assert_fail@plt+0x22a4>
   13134:	cmp	r0, #185	; 0xb9
   13138:	beq	13928 <__assert_fail@plt+0x271c>
   1313c:	cmp	r0, #186	; 0xba
   13140:	bne	13450 <__assert_fail@plt+0x2244>
   13144:	ldr	r0, [pc, #2908]	; 13ca8 <__assert_fail@plt+0x2a9c>
   13148:	bx	lr
   1314c:	cmp	r0, #43	; 0x2b
   13150:	beq	13ae8 <__assert_fail@plt+0x28dc>
   13154:	bhi	13548 <__assert_fail@plt+0x233c>
   13158:	cmp	r0, #41	; 0x29
   1315c:	beq	13920 <__assert_fail@plt+0x2714>
   13160:	cmp	r0, #42	; 0x2a
   13164:	bne	13450 <__assert_fail@plt+0x2244>
   13168:	ldr	r0, [pc, #2876]	; 13cac <__assert_fail@plt+0x2aa0>
   1316c:	bx	lr
   13170:	cmp	r0, #204	; 0xcc
   13174:	beq	13918 <__assert_fail@plt+0x270c>
   13178:	cmp	r0, #210	; 0xd2
   1317c:	bne	13450 <__assert_fail@plt+0x2244>
   13180:	ldr	r0, [pc, #2856]	; 13cb0 <__assert_fail@plt+0x2aa4>
   13184:	bx	lr
   13188:	cmp	r0, #11
   1318c:	beq	13be8 <__assert_fail@plt+0x29dc>
   13190:	bls	136f8 <__assert_fail@plt+0x24ec>
   13194:	cmp	r0, #21
   13198:	beq	13b80 <__assert_fail@plt+0x2974>
   1319c:	bls	133fc <__assert_fail@plt+0x21f0>
   131a0:	cmp	r0, #36	; 0x24
   131a4:	beq	13af0 <__assert_fail@plt+0x28e4>
   131a8:	bls	13204 <__assert_fail@plt+0x1ff8>
   131ac:	cmp	r0, #38	; 0x26
   131b0:	beq	13a20 <__assert_fail@plt+0x2814>
   131b4:	bhi	13910 <__assert_fail@plt+0x2704>
   131b8:	ldr	r0, [pc, #2804]	; 13cb4 <__assert_fail@plt+0x2aa8>
   131bc:	bx	lr
   131c0:	cmp	r0, #92	; 0x5c
   131c4:	beq	13c28 <__assert_fail@plt+0x2a1c>
   131c8:	bls	13284 <__assert_fail@plt+0x2078>
   131cc:	cmp	r0, #105	; 0x69
   131d0:	beq	13bf0 <__assert_fail@plt+0x29e4>
   131d4:	bls	13258 <__assert_fail@plt+0x204c>
   131d8:	cmp	r0, #111	; 0x6f
   131dc:	beq	13b78 <__assert_fail@plt+0x296c>
   131e0:	bls	13234 <__assert_fail@plt+0x2028>
   131e4:	cmp	r0, #114	; 0x72
   131e8:	beq	13af8 <__assert_fail@plt+0x28ec>
   131ec:	bls	1321c <__assert_fail@plt+0x2010>
   131f0:	cmp	r0, #116	; 0x74
   131f4:	beq	13a88 <__assert_fail@plt+0x287c>
   131f8:	bhi	13908 <__assert_fail@plt+0x26fc>
   131fc:	ldr	r0, [pc, #2740]	; 13cb8 <__assert_fail@plt+0x2aac>
   13200:	bx	lr
   13204:	cmp	r0, #22
   13208:	beq	13a40 <__assert_fail@plt+0x2834>
   1320c:	cmp	r0, #23
   13210:	bne	13450 <__assert_fail@plt+0x2244>
   13214:	ldr	r0, [pc, #2720]	; 13cbc <__assert_fail@plt+0x2ab0>
   13218:	bx	lr
   1321c:	cmp	r0, #112	; 0x70
   13220:	beq	13900 <__assert_fail@plt+0x26f4>
   13224:	cmp	r0, #113	; 0x71
   13228:	bne	13450 <__assert_fail@plt+0x2244>
   1322c:	ldr	r0, [pc, #2700]	; 13cc0 <__assert_fail@plt+0x2ab4>
   13230:	bx	lr
   13234:	cmp	r0, #108	; 0x6c
   13238:	beq	13ad0 <__assert_fail@plt+0x28c4>
   1323c:	bhi	132bc <__assert_fail@plt+0x20b0>
   13240:	cmp	r0, #106	; 0x6a
   13244:	beq	138f8 <__assert_fail@plt+0x26ec>
   13248:	cmp	r0, #107	; 0x6b
   1324c:	bne	13450 <__assert_fail@plt+0x2244>
   13250:	ldr	r0, [pc, #2668]	; 13cc4 <__assert_fail@plt+0x2ab8>
   13254:	bx	lr
   13258:	cmp	r0, #98	; 0x62
   1325c:	beq	13b60 <__assert_fail@plt+0x2954>
   13260:	bls	133a8 <__assert_fail@plt+0x219c>
   13264:	cmp	r0, #101	; 0x65
   13268:	beq	13b68 <__assert_fail@plt+0x295c>
   1326c:	bls	13390 <__assert_fail@plt+0x2184>
   13270:	cmp	r0, #103	; 0x67
   13274:	beq	13a00 <__assert_fail@plt+0x27f4>
   13278:	bhi	138f0 <__assert_fail@plt+0x26e4>
   1327c:	ldr	r0, [pc, #2628]	; 13cc8 <__assert_fail@plt+0x2abc>
   13280:	bx	lr
   13284:	cmp	r0, #79	; 0x4f
   13288:	beq	13bd8 <__assert_fail@plt+0x29cc>
   1328c:	bhi	13310 <__assert_fail@plt+0x2104>
   13290:	cmp	r0, #72	; 0x48
   13294:	beq	13b98 <__assert_fail@plt+0x298c>
   13298:	bls	132ec <__assert_fail@plt+0x20e0>
   1329c:	cmp	r0, #75	; 0x4b
   132a0:	beq	13b40 <__assert_fail@plt+0x2934>
   132a4:	bls	132d4 <__assert_fail@plt+0x20c8>
   132a8:	cmp	r0, #77	; 0x4d
   132ac:	beq	139f8 <__assert_fail@plt+0x27ec>
   132b0:	bhi	138e8 <__assert_fail@plt+0x26dc>
   132b4:	ldr	r0, [pc, #2576]	; 13ccc <__assert_fail@plt+0x2ac0>
   132b8:	bx	lr
   132bc:	cmp	r0, #109	; 0x6d
   132c0:	beq	138e0 <__assert_fail@plt+0x26d4>
   132c4:	cmp	r0, #110	; 0x6e
   132c8:	bne	13450 <__assert_fail@plt+0x2244>
   132cc:	ldr	r0, [pc, #2556]	; 13cd0 <__assert_fail@plt+0x2ac4>
   132d0:	bx	lr
   132d4:	cmp	r0, #73	; 0x49
   132d8:	beq	138d8 <__assert_fail@plt+0x26cc>
   132dc:	cmp	r0, #74	; 0x4a
   132e0:	bne	13450 <__assert_fail@plt+0x2244>
   132e4:	ldr	r0, [pc, #2536]	; 13cd4 <__assert_fail@plt+0x2ac8>
   132e8:	bx	lr
   132ec:	cmp	r0, #69	; 0x45
   132f0:	beq	13a90 <__assert_fail@plt+0x2884>
   132f4:	bhi	13340 <__assert_fail@plt+0x2134>
   132f8:	cmp	r0, #67	; 0x43
   132fc:	beq	138d0 <__assert_fail@plt+0x26c4>
   13300:	cmp	r0, #68	; 0x44
   13304:	bne	13450 <__assert_fail@plt+0x2244>
   13308:	ldr	r0, [pc, #2504]	; 13cd8 <__assert_fail@plt+0x2acc>
   1330c:	bx	lr
   13310:	cmp	r0, #85	; 0x55
   13314:	beq	13bc0 <__assert_fail@plt+0x29b4>
   13318:	bhi	13370 <__assert_fail@plt+0x2164>
   1331c:	cmp	r0, #82	; 0x52
   13320:	beq	13a68 <__assert_fail@plt+0x285c>
   13324:	bhi	13358 <__assert_fail@plt+0x214c>
   13328:	cmp	r0, #80	; 0x50
   1332c:	beq	138c8 <__assert_fail@plt+0x26bc>
   13330:	cmp	r0, #81	; 0x51
   13334:	bne	13450 <__assert_fail@plt+0x2244>
   13338:	ldr	r0, [pc, #2460]	; 13cdc <__assert_fail@plt+0x2ad0>
   1333c:	bx	lr
   13340:	cmp	r0, #70	; 0x46
   13344:	beq	138c0 <__assert_fail@plt+0x26b4>
   13348:	cmp	r0, #71	; 0x47
   1334c:	bne	13450 <__assert_fail@plt+0x2244>
   13350:	ldr	r0, [pc, #2440]	; 13ce0 <__assert_fail@plt+0x2ad4>
   13354:	bx	lr
   13358:	cmp	r0, #83	; 0x53
   1335c:	beq	139a0 <__assert_fail@plt+0x2794>
   13360:	cmp	r0, #84	; 0x54
   13364:	bne	13450 <__assert_fail@plt+0x2244>
   13368:	ldr	r0, [pc, #2420]	; 13ce4 <__assert_fail@plt+0x2ad8>
   1336c:	bx	lr
   13370:	cmp	r0, #88	; 0x58
   13374:	beq	13b50 <__assert_fail@plt+0x2944>
   13378:	bls	133d4 <__assert_fail@plt+0x21c8>
   1337c:	cmp	r0, #90	; 0x5a
   13380:	beq	13a58 <__assert_fail@plt+0x284c>
   13384:	bls	133cc <__assert_fail@plt+0x21c0>
   13388:	ldr	r0, [pc, #2392]	; 13ce8 <__assert_fail@plt+0x2adc>
   1338c:	bx	lr
   13390:	cmp	r0, #99	; 0x63
   13394:	beq	138b8 <__assert_fail@plt+0x26ac>
   13398:	cmp	r0, #100	; 0x64
   1339c:	bne	13450 <__assert_fail@plt+0x2244>
   133a0:	ldr	r0, [pc, #2372]	; 13cec <__assert_fail@plt+0x2ae0>
   133a4:	bx	lr
   133a8:	cmp	r0, #95	; 0x5f
   133ac:	beq	13a78 <__assert_fail@plt+0x286c>
   133b0:	bls	133ec <__assert_fail@plt+0x21e0>
   133b4:	cmp	r0, #96	; 0x60
   133b8:	beq	138b0 <__assert_fail@plt+0x26a4>
   133bc:	cmp	r0, #97	; 0x61
   133c0:	bne	13450 <__assert_fail@plt+0x2244>
   133c4:	ldr	r0, [pc, #2340]	; 13cf0 <__assert_fail@plt+0x2ae4>
   133c8:	bx	lr
   133cc:	ldr	r0, [pc, #2336]	; 13cf4 <__assert_fail@plt+0x2ae8>
   133d0:	bx	lr
   133d4:	cmp	r0, #86	; 0x56
   133d8:	beq	139a8 <__assert_fail@plt+0x279c>
   133dc:	cmp	r0, #87	; 0x57
   133e0:	bne	13450 <__assert_fail@plt+0x2244>
   133e4:	ldr	r0, [pc, #2316]	; 13cf8 <__assert_fail@plt+0x2aec>
   133e8:	bx	lr
   133ec:	cmp	r0, #93	; 0x5d
   133f0:	bne	13764 <__assert_fail@plt+0x2558>
   133f4:	ldr	r0, [pc, #2304]	; 13cfc <__assert_fail@plt+0x2af0>
   133f8:	bx	lr
   133fc:	cmp	r0, #18
   13400:	beq	13aa0 <__assert_fail@plt+0x2894>
   13404:	bhi	135c8 <__assert_fail@plt+0x23bc>
   13408:	cmp	r0, #15
   1340c:	beq	138a8 <__assert_fail@plt+0x269c>
   13410:	cmp	r0, #17
   13414:	bne	13450 <__assert_fail@plt+0x2244>
   13418:	ldr	r0, [pc, #2272]	; 13d00 <__assert_fail@plt+0x2af4>
   1341c:	bx	lr
   13420:	cmp	r0, #221	; 0xdd
   13424:	beq	13b88 <__assert_fail@plt+0x297c>
   13428:	bls	13740 <__assert_fail@plt+0x2534>
   1342c:	cmp	r0, #224	; 0xe0
   13430:	beq	13b10 <__assert_fail@plt+0x2904>
   13434:	bls	13728 <__assert_fail@plt+0x251c>
   13438:	cmp	r0, #244	; 0xf4
   1343c:	beq	13a10 <__assert_fail@plt+0x2804>
   13440:	cmp	r0, #247	; 0xf7
   13444:	beq	138a0 <__assert_fail@plt+0x2694>
   13448:	cmp	r0, #243	; 0xf3
   1344c:	beq	13898 <__assert_fail@plt+0x268c>
   13450:	push	{r4, lr}
   13454:	mov	r2, #5
   13458:	mov	r4, r0
   1345c:	ldr	r1, [pc, #2208]	; 13d04 <__assert_fail@plt+0x2af8>
   13460:	mov	r0, #0
   13464:	bl	10f90 <dcgettext@plt>
   13468:	mov	r3, r4
   1346c:	mov	r1, #64	; 0x40
   13470:	mov	r2, r0
   13474:	ldr	r0, [pc, #2188]	; 13d08 <__assert_fail@plt+0x2afc>
   13478:	bl	110b0 <snprintf@plt>
   1347c:	ldr	r0, [pc, #2180]	; 13d08 <__assert_fail@plt+0x2afc>
   13480:	pop	{r4, pc}
   13484:	cmp	r0, #59	; 0x3b
   13488:	beq	13bb8 <__assert_fail@plt+0x29ac>
   1348c:	bls	134d8 <__assert_fail@plt+0x22cc>
   13490:	cmp	r0, #62	; 0x3e
   13494:	beq	13b00 <__assert_fail@plt+0x28f4>
   13498:	bls	134c0 <__assert_fail@plt+0x22b4>
   1349c:	cmp	r0, #64	; 0x40
   134a0:	beq	139f0 <__assert_fail@plt+0x27e4>
   134a4:	bhi	13848 <__assert_fail@plt+0x263c>
   134a8:	ldr	r0, [pc, #2140]	; 13d0c <__assert_fail@plt+0x2b00>
   134ac:	bx	lr
   134b0:	cmp	r0, #188	; 0xbc
   134b4:	bne	134fc <__assert_fail@plt+0x22f0>
   134b8:	ldr	r0, [pc, #2128]	; 13d10 <__assert_fail@plt+0x2b04>
   134bc:	bx	lr
   134c0:	cmp	r0, #60	; 0x3c
   134c4:	beq	13840 <__assert_fail@plt+0x2634>
   134c8:	cmp	r0, #61	; 0x3d
   134cc:	bne	13450 <__assert_fail@plt+0x2244>
   134d0:	ldr	r0, [pc, #2108]	; 13d14 <__assert_fail@plt+0x2b08>
   134d4:	bx	lr
   134d8:	cmp	r0, #56	; 0x38
   134dc:	beq	13ab8 <__assert_fail@plt+0x28ac>
   134e0:	bhi	1350c <__assert_fail@plt+0x2300>
   134e4:	cmp	r0, #54	; 0x36
   134e8:	beq	13838 <__assert_fail@plt+0x262c>
   134ec:	cmp	r0, #55	; 0x37
   134f0:	bne	13450 <__assert_fail@plt+0x2244>
   134f4:	ldr	r0, [pc, #2076]	; 13d18 <__assert_fail@plt+0x2b0c>
   134f8:	bx	lr
   134fc:	cmp	r0, #189	; 0xbd
   13500:	bne	13450 <__assert_fail@plt+0x2244>
   13504:	ldr	r0, [pc, #2064]	; 13d1c <__assert_fail@plt+0x2b10>
   13508:	bx	lr
   1350c:	cmp	r0, #57	; 0x39
   13510:	beq	13830 <__assert_fail@plt+0x2624>
   13514:	cmp	r0, #58	; 0x3a
   13518:	bne	13450 <__assert_fail@plt+0x2244>
   1351c:	ldr	r0, [pc, #2044]	; 13d20 <__assert_fail@plt+0x2b14>
   13520:	bx	lr
   13524:	cmp	r0, #200	; 0xc8
   13528:	beq	13ac0 <__assert_fail@plt+0x28b4>
   1352c:	bhi	13560 <__assert_fail@plt+0x2354>
   13530:	cmp	r0, #198	; 0xc6
   13534:	beq	13828 <__assert_fail@plt+0x261c>
   13538:	cmp	r0, #199	; 0xc7
   1353c:	bne	13450 <__assert_fail@plt+0x2244>
   13540:	ldr	r0, [pc, #2012]	; 13d24 <__assert_fail@plt+0x2b18>
   13544:	bx	lr
   13548:	cmp	r0, #44	; 0x2c
   1354c:	beq	13820 <__assert_fail@plt+0x2614>
   13550:	cmp	r0, #45	; 0x2d
   13554:	bne	13450 <__assert_fail@plt+0x2244>
   13558:	ldr	r0, [pc, #1992]	; 13d28 <__assert_fail@plt+0x2b1c>
   1355c:	bx	lr
   13560:	cmp	r0, #201	; 0xc9
   13564:	beq	13818 <__assert_fail@plt+0x260c>
   13568:	cmp	r0, #202	; 0xca
   1356c:	bne	13450 <__assert_fail@plt+0x2244>
   13570:	ldr	r0, [pc, #1972]	; 13d2c <__assert_fail@plt+0x2b20>
   13574:	bx	lr
   13578:	ldr	r3, [pc, #1968]	; 13d30 <__assert_fail@plt+0x2b24>
   1357c:	cmp	r0, r3
   13580:	beq	13bc8 <__assert_fail@plt+0x29bc>
   13584:	bhi	1363c <__assert_fail@plt+0x2430>
   13588:	ldr	r3, [pc, #1956]	; 13d34 <__assert_fail@plt+0x2b28>
   1358c:	cmp	r0, r3
   13590:	beq	13bd0 <__assert_fail@plt+0x29c4>
   13594:	bls	1360c <__assert_fail@plt+0x2400>
   13598:	ldr	r3, [pc, #1944]	; 13d38 <__assert_fail@plt+0x2b2c>
   1359c:	cmp	r0, r3
   135a0:	beq	13a80 <__assert_fail@plt+0x2874>
   135a4:	bhi	135e0 <__assert_fail@plt+0x23d4>
   135a8:	ldr	r3, [pc, #1932]	; 13d3c <__assert_fail@plt+0x2b30>
   135ac:	cmp	r0, r3
   135b0:	beq	13810 <__assert_fail@plt+0x2604>
   135b4:	ldr	r3, [pc, #1924]	; 13d40 <__assert_fail@plt+0x2b34>
   135b8:	cmp	r0, r3
   135bc:	bne	13450 <__assert_fail@plt+0x2244>
   135c0:	ldr	r0, [pc, #1916]	; 13d44 <__assert_fail@plt+0x2b38>
   135c4:	bx	lr
   135c8:	cmp	r0, #19
   135cc:	beq	13808 <__assert_fail@plt+0x25fc>
   135d0:	cmp	r0, #20
   135d4:	bne	13450 <__assert_fail@plt+0x2244>
   135d8:	ldr	r0, [pc, #1896]	; 13d48 <__assert_fail@plt+0x2b3c>
   135dc:	bx	lr
   135e0:	ldr	r3, [pc, #1892]	; 13d4c <__assert_fail@plt+0x2b40>
   135e4:	cmp	r0, r3
   135e8:	beq	13a28 <__assert_fail@plt+0x281c>
   135ec:	ldr	r3, [pc, #1884]	; 13d50 <__assert_fail@plt+0x2b44>
   135f0:	cmp	r0, r3
   135f4:	beq	139c8 <__assert_fail@plt+0x27bc>
   135f8:	ldr	r3, [pc, #1876]	; 13d54 <__assert_fail@plt+0x2b48>
   135fc:	cmp	r0, r3
   13600:	bne	13450 <__assert_fail@plt+0x2244>
   13604:	ldr	r0, [pc, #1868]	; 13d58 <__assert_fail@plt+0x2b4c>
   13608:	bx	lr
   1360c:	ldr	r3, [pc, #1864]	; 13d5c <__assert_fail@plt+0x2b50>
   13610:	cmp	r0, r3
   13614:	beq	13a60 <__assert_fail@plt+0x2854>
   13618:	bhi	13688 <__assert_fail@plt+0x247c>
   1361c:	ldr	r3, [pc, #1852]	; 13d60 <__assert_fail@plt+0x2b54>
   13620:	cmp	r0, r3
   13624:	beq	13a48 <__assert_fail@plt+0x283c>
   13628:	add	r3, r3, #460	; 0x1cc
   1362c:	cmp	r0, r3
   13630:	bne	13450 <__assert_fail@plt+0x2244>
   13634:	ldr	r0, [pc, #1832]	; 13d64 <__assert_fail@plt+0x2b58>
   13638:	bx	lr
   1363c:	ldr	r3, [pc, #1828]	; 13d68 <__assert_fail@plt+0x2b5c>
   13640:	cmp	r0, r3
   13644:	beq	13be0 <__assert_fail@plt+0x29d4>
   13648:	bls	136c8 <__assert_fail@plt+0x24bc>
   1364c:	ldr	r3, [pc, #1816]	; 13d6c <__assert_fail@plt+0x2b60>
   13650:	cmp	r0, r3
   13654:	beq	13a50 <__assert_fail@plt+0x2844>
   13658:	bls	136a8 <__assert_fail@plt+0x249c>
   1365c:	ldr	r3, [pc, #1804]	; 13d70 <__assert_fail@plt+0x2b64>
   13660:	cmp	r0, r3
   13664:	beq	13800 <__assert_fail@plt+0x25f4>
   13668:	add	r3, r3, #1
   1366c:	cmp	r0, r3
   13670:	beq	139c0 <__assert_fail@plt+0x27b4>
   13674:	sub	r3, r3, #11
   13678:	cmp	r0, r3
   1367c:	bne	13450 <__assert_fail@plt+0x2244>
   13680:	ldr	r0, [pc, #1772]	; 13d74 <__assert_fail@plt+0x2b68>
   13684:	bx	lr
   13688:	ldr	r3, [pc, #1768]	; 13d78 <__assert_fail@plt+0x2b6c>
   1368c:	cmp	r0, r3
   13690:	beq	13a30 <__assert_fail@plt+0x2824>
   13694:	ldr	r3, [pc, #1760]	; 13d7c <__assert_fail@plt+0x2b70>
   13698:	cmp	r0, r3
   1369c:	bne	13450 <__assert_fail@plt+0x2244>
   136a0:	ldr	r0, [pc, #1752]	; 13d80 <__assert_fail@plt+0x2b74>
   136a4:	bx	lr
   136a8:	ldr	r3, [pc, #1748]	; 13d84 <__assert_fail@plt+0x2b78>
   136ac:	cmp	r0, r3
   136b0:	beq	139b8 <__assert_fail@plt+0x27ac>
   136b4:	ldr	r3, [pc, #1740]	; 13d88 <__assert_fail@plt+0x2b7c>
   136b8:	cmp	r0, r3
   136bc:	bne	13450 <__assert_fail@plt+0x2244>
   136c0:	ldr	r0, [pc, #1732]	; 13d8c <__assert_fail@plt+0x2b80>
   136c4:	bx	lr
   136c8:	ldr	r3, [pc, #1728]	; 13d90 <__assert_fail@plt+0x2b84>
   136cc:	cmp	r0, r3
   136d0:	beq	13b48 <__assert_fail@plt+0x293c>
   136d4:	bls	137b0 <__assert_fail@plt+0x25a4>
   136d8:	ldr	r3, [pc, #1716]	; 13d94 <__assert_fail@plt+0x2b88>
   136dc:	cmp	r0, r3
   136e0:	beq	13a38 <__assert_fail@plt+0x282c>
   136e4:	ldr	r3, [pc, #1708]	; 13d98 <__assert_fail@plt+0x2b8c>
   136e8:	cmp	r0, r3
   136ec:	bne	13450 <__assert_fail@plt+0x2244>
   136f0:	ldr	r0, [pc, #1700]	; 13d9c <__assert_fail@plt+0x2b90>
   136f4:	bx	lr
   136f8:	cmp	r0, #5
   136fc:	beq	13b58 <__assert_fail@plt+0x294c>
   13700:	bls	1378c <__assert_fail@plt+0x2580>
   13704:	cmp	r0, #8
   13708:	beq	13ac8 <__assert_fail@plt+0x28bc>
   1370c:	bhi	13774 <__assert_fail@plt+0x2568>
   13710:	cmp	r0, #6
   13714:	beq	13888 <__assert_fail@plt+0x267c>
   13718:	cmp	r0, #7
   1371c:	bne	13450 <__assert_fail@plt+0x2244>
   13720:	ldr	r0, [pc, #1656]	; 13da0 <__assert_fail@plt+0x2b94>
   13724:	bx	lr
   13728:	cmp	r0, #222	; 0xde
   1372c:	beq	13880 <__assert_fail@plt+0x2674>
   13730:	cmp	r0, #223	; 0xdf
   13734:	bne	13450 <__assert_fail@plt+0x2244>
   13738:	ldr	r0, [pc, #1636]	; 13da4 <__assert_fail@plt+0x2b98>
   1373c:	bx	lr
   13740:	cmp	r0, #218	; 0xda
   13744:	beq	13ad8 <__assert_fail@plt+0x28cc>
   13748:	bhi	137d0 <__assert_fail@plt+0x25c4>
   1374c:	cmp	r0, #216	; 0xd8
   13750:	beq	13878 <__assert_fail@plt+0x266c>
   13754:	cmp	r0, #217	; 0xd9
   13758:	bne	13450 <__assert_fail@plt+0x2244>
   1375c:	ldr	r0, [pc, #1604]	; 13da8 <__assert_fail@plt+0x2b9c>
   13760:	bx	lr
   13764:	cmp	r0, #94	; 0x5e
   13768:	bne	13450 <__assert_fail@plt+0x2244>
   1376c:	ldr	r0, [pc, #1592]	; 13dac <__assert_fail@plt+0x2ba0>
   13770:	bx	lr
   13774:	cmp	r0, #9
   13778:	beq	13870 <__assert_fail@plt+0x2664>
   1377c:	cmp	r0, #10
   13780:	bne	13450 <__assert_fail@plt+0x2244>
   13784:	ldr	r0, [pc, #1572]	; 13db0 <__assert_fail@plt+0x2ba4>
   13788:	bx	lr
   1378c:	cmp	r0, #2
   13790:	beq	13ae0 <__assert_fail@plt+0x28d4>
   13794:	bhi	137e8 <__assert_fail@plt+0x25dc>
   13798:	cmp	r0, #0
   1379c:	beq	13c58 <__assert_fail@plt+0x2a4c>
   137a0:	cmp	r0, #1
   137a4:	bne	13450 <__assert_fail@plt+0x2244>
   137a8:	ldr	r0, [pc, #1540]	; 13db4 <__assert_fail@plt+0x2ba8>
   137ac:	bx	lr
   137b0:	ldr	r3, [pc, #1536]	; 13db8 <__assert_fail@plt+0x2bac>
   137b4:	cmp	r0, r3
   137b8:	beq	139b0 <__assert_fail@plt+0x27a4>
   137bc:	add	r3, r3, #63	; 0x3f
   137c0:	cmp	r0, r3
   137c4:	bne	13450 <__assert_fail@plt+0x2244>
   137c8:	ldr	r0, [pc, #1320]	; 13cf8 <__assert_fail@plt+0x2aec>
   137cc:	bx	lr
   137d0:	cmp	r0, #219	; 0xdb
   137d4:	beq	13868 <__assert_fail@plt+0x265c>
   137d8:	cmp	r0, #220	; 0xdc
   137dc:	bne	13450 <__assert_fail@plt+0x2244>
   137e0:	ldr	r0, [pc, #1492]	; 13dbc <__assert_fail@plt+0x2bb0>
   137e4:	bx	lr
   137e8:	cmp	r0, #3
   137ec:	beq	13860 <__assert_fail@plt+0x2654>
   137f0:	cmp	r0, #4
   137f4:	bne	13450 <__assert_fail@plt+0x2244>
   137f8:	ldr	r0, [pc, #1472]	; 13dc0 <__assert_fail@plt+0x2bb4>
   137fc:	bx	lr
   13800:	ldr	r0, [pc, #1468]	; 13dc4 <__assert_fail@plt+0x2bb8>
   13804:	bx	lr
   13808:	ldr	r0, [pc, #1464]	; 13dc8 <__assert_fail@plt+0x2bbc>
   1380c:	bx	lr
   13810:	ldr	r0, [pc, #1460]	; 13dcc <__assert_fail@plt+0x2bc0>
   13814:	bx	lr
   13818:	ldr	r0, [pc, #1456]	; 13dd0 <__assert_fail@plt+0x2bc4>
   1381c:	bx	lr
   13820:	ldr	r0, [pc, #1452]	; 13dd4 <__assert_fail@plt+0x2bc8>
   13824:	bx	lr
   13828:	ldr	r0, [pc, #1448]	; 13dd8 <__assert_fail@plt+0x2bcc>
   1382c:	bx	lr
   13830:	ldr	r0, [pc, #1444]	; 13ddc <__assert_fail@plt+0x2bd0>
   13834:	bx	lr
   13838:	ldr	r0, [pc, #1440]	; 13de0 <__assert_fail@plt+0x2bd4>
   1383c:	bx	lr
   13840:	ldr	r0, [pc, #1436]	; 13de4 <__assert_fail@plt+0x2bd8>
   13844:	bx	lr
   13848:	ldr	r0, [pc, #1432]	; 13de8 <__assert_fail@plt+0x2bdc>
   1384c:	bx	lr
   13850:	ldr	r0, [pc, #1428]	; 13dec <__assert_fail@plt+0x2be0>
   13854:	bx	lr
   13858:	ldr	r0, [pc, #1424]	; 13df0 <__assert_fail@plt+0x2be4>
   1385c:	bx	lr
   13860:	ldr	r0, [pc, #1420]	; 13df4 <__assert_fail@plt+0x2be8>
   13864:	bx	lr
   13868:	ldr	r0, [pc, #1416]	; 13df8 <__assert_fail@plt+0x2bec>
   1386c:	bx	lr
   13870:	ldr	r0, [pc, #1412]	; 13dfc <__assert_fail@plt+0x2bf0>
   13874:	bx	lr
   13878:	ldr	r0, [pc, #1408]	; 13e00 <__assert_fail@plt+0x2bf4>
   1387c:	bx	lr
   13880:	ldr	r0, [pc, #1404]	; 13e04 <__assert_fail@plt+0x2bf8>
   13884:	bx	lr
   13888:	ldr	r0, [pc, #1400]	; 13e08 <__assert_fail@plt+0x2bfc>
   1388c:	bx	lr
   13890:	ldr	r0, [pc, #1396]	; 13e0c <__assert_fail@plt+0x2c00>
   13894:	bx	lr
   13898:	ldr	r0, [pc, #1392]	; 13e10 <__assert_fail@plt+0x2c04>
   1389c:	bx	lr
   138a0:	ldr	r0, [pc, #1388]	; 13e14 <__assert_fail@plt+0x2c08>
   138a4:	bx	lr
   138a8:	ldr	r0, [pc, #1384]	; 13e18 <__assert_fail@plt+0x2c0c>
   138ac:	bx	lr
   138b0:	ldr	r0, [pc, #1380]	; 13e1c <__assert_fail@plt+0x2c10>
   138b4:	bx	lr
   138b8:	ldr	r0, [pc, #1376]	; 13e20 <__assert_fail@plt+0x2c14>
   138bc:	bx	lr
   138c0:	ldr	r0, [pc, #1372]	; 13e24 <__assert_fail@plt+0x2c18>
   138c4:	bx	lr
   138c8:	ldr	r0, [pc, #1368]	; 13e28 <__assert_fail@plt+0x2c1c>
   138cc:	bx	lr
   138d0:	ldr	r0, [pc, #1364]	; 13e2c <__assert_fail@plt+0x2c20>
   138d4:	bx	lr
   138d8:	ldr	r0, [pc, #1360]	; 13e30 <__assert_fail@plt+0x2c24>
   138dc:	bx	lr
   138e0:	ldr	r0, [pc, #1356]	; 13e34 <__assert_fail@plt+0x2c28>
   138e4:	bx	lr
   138e8:	ldr	r0, [pc, #1352]	; 13e38 <__assert_fail@plt+0x2c2c>
   138ec:	bx	lr
   138f0:	ldr	r0, [pc, #1348]	; 13e3c <__assert_fail@plt+0x2c30>
   138f4:	bx	lr
   138f8:	ldr	r0, [pc, #1344]	; 13e40 <__assert_fail@plt+0x2c34>
   138fc:	bx	lr
   13900:	ldr	r0, [pc, #1340]	; 13e44 <__assert_fail@plt+0x2c38>
   13904:	bx	lr
   13908:	ldr	r0, [pc, #1336]	; 13e48 <__assert_fail@plt+0x2c3c>
   1390c:	bx	lr
   13910:	ldr	r0, [pc, #1332]	; 13e4c <__assert_fail@plt+0x2c40>
   13914:	bx	lr
   13918:	ldr	r0, [pc, #1328]	; 13e50 <__assert_fail@plt+0x2c44>
   1391c:	bx	lr
   13920:	ldr	r0, [pc, #1324]	; 13e54 <__assert_fail@plt+0x2c48>
   13924:	bx	lr
   13928:	ldr	r0, [pc, #1320]	; 13e58 <__assert_fail@plt+0x2c4c>
   1392c:	bx	lr
   13930:	ldr	r0, [pc, #1316]	; 13e5c <__assert_fail@plt+0x2c50>
   13934:	bx	lr
   13938:	ldr	r0, [pc, #1312]	; 13e60 <__assert_fail@plt+0x2c54>
   1393c:	bx	lr
   13940:	ldr	r0, [pc, #1308]	; 13e64 <__assert_fail@plt+0x2c58>
   13944:	bx	lr
   13948:	ldr	r0, [pc, #1304]	; 13e68 <__assert_fail@plt+0x2c5c>
   1394c:	bx	lr
   13950:	ldr	r0, [pc, #1300]	; 13e6c <__assert_fail@plt+0x2c60>
   13954:	bx	lr
   13958:	ldr	r0, [pc, #1296]	; 13e70 <__assert_fail@plt+0x2c64>
   1395c:	bx	lr
   13960:	ldr	r0, [pc, #1292]	; 13e74 <__assert_fail@plt+0x2c68>
   13964:	bx	lr
   13968:	ldr	r0, [pc, #1288]	; 13e78 <__assert_fail@plt+0x2c6c>
   1396c:	bx	lr
   13970:	ldr	r0, [pc, #1284]	; 13e7c <__assert_fail@plt+0x2c70>
   13974:	bx	lr
   13978:	ldr	r0, [pc, #1280]	; 13e80 <__assert_fail@plt+0x2c74>
   1397c:	bx	lr
   13980:	ldr	r0, [pc, #1276]	; 13e84 <__assert_fail@plt+0x2c78>
   13984:	bx	lr
   13988:	ldr	r0, [pc, #1272]	; 13e88 <__assert_fail@plt+0x2c7c>
   1398c:	bx	lr
   13990:	ldr	r0, [pc, #1268]	; 13e8c <__assert_fail@plt+0x2c80>
   13994:	bx	lr
   13998:	ldr	r0, [pc, #1264]	; 13e90 <__assert_fail@plt+0x2c84>
   1399c:	bx	lr
   139a0:	ldr	r0, [pc, #1260]	; 13e94 <__assert_fail@plt+0x2c88>
   139a4:	bx	lr
   139a8:	ldr	r0, [pc, #1256]	; 13e98 <__assert_fail@plt+0x2c8c>
   139ac:	bx	lr
   139b0:	ldr	r0, [pc, #1252]	; 13e9c <__assert_fail@plt+0x2c90>
   139b4:	bx	lr
   139b8:	ldr	r0, [pc, #820]	; 13cf4 <__assert_fail@plt+0x2ae8>
   139bc:	bx	lr
   139c0:	ldr	r0, [pc, #940]	; 13d74 <__assert_fail@plt+0x2b68>
   139c4:	bx	lr
   139c8:	ldr	r0, [pc, #1232]	; 13ea0 <__assert_fail@plt+0x2c94>
   139cc:	bx	lr
   139d0:	ldr	r0, [pc, #1228]	; 13ea4 <__assert_fail@plt+0x2c98>
   139d4:	bx	lr
   139d8:	ldr	r0, [pc, #1224]	; 13ea8 <__assert_fail@plt+0x2c9c>
   139dc:	bx	lr
   139e0:	ldr	r0, [pc, #1220]	; 13eac <__assert_fail@plt+0x2ca0>
   139e4:	bx	lr
   139e8:	ldr	r0, [pc, #1216]	; 13eb0 <__assert_fail@plt+0x2ca4>
   139ec:	bx	lr
   139f0:	ldr	r0, [pc, #1212]	; 13eb4 <__assert_fail@plt+0x2ca8>
   139f4:	bx	lr
   139f8:	ldr	r0, [pc, #1208]	; 13eb8 <__assert_fail@plt+0x2cac>
   139fc:	bx	lr
   13a00:	ldr	r0, [pc, #1204]	; 13ebc <__assert_fail@plt+0x2cb0>
   13a04:	bx	lr
   13a08:	ldr	r0, [pc, #1200]	; 13ec0 <__assert_fail@plt+0x2cb4>
   13a0c:	bx	lr
   13a10:	ldr	r0, [pc, #1196]	; 13ec4 <__assert_fail@plt+0x2cb8>
   13a14:	bx	lr
   13a18:	ldr	r0, [pc, #1192]	; 13ec8 <__assert_fail@plt+0x2cbc>
   13a1c:	bx	lr
   13a20:	ldr	r0, [pc, #1188]	; 13ecc <__assert_fail@plt+0x2cc0>
   13a24:	bx	lr
   13a28:	ldr	r0, [pc, #1128]	; 13e98 <__assert_fail@plt+0x2c8c>
   13a2c:	bx	lr
   13a30:	ldr	r0, [pc, #684]	; 13ce4 <__assert_fail@plt+0x2ad8>
   13a34:	bx	lr
   13a38:	ldr	r0, [pc, #876]	; 13dac <__assert_fail@plt+0x2ba0>
   13a3c:	bx	lr
   13a40:	ldr	r0, [pc, #1160]	; 13ed0 <__assert_fail@plt+0x2cc4>
   13a44:	bx	lr
   13a48:	ldr	r0, [pc, #1092]	; 13e94 <__assert_fail@plt+0x2c88>
   13a4c:	bx	lr
   13a50:	ldr	r0, [pc, #1148]	; 13ed4 <__assert_fail@plt+0x2cc8>
   13a54:	bx	lr
   13a58:	ldr	r0, [pc, #812]	; 13d8c <__assert_fail@plt+0x2b80>
   13a5c:	bx	lr
   13a60:	ldr	r0, [pc, #1136]	; 13ed8 <__assert_fail@plt+0x2ccc>
   13a64:	bx	lr
   13a68:	ldr	r0, [pc, #1132]	; 13edc <__assert_fail@plt+0x2cd0>
   13a6c:	bx	lr
   13a70:	ldr	r0, [pc, #1128]	; 13ee0 <__assert_fail@plt+0x2cd4>
   13a74:	bx	lr
   13a78:	ldr	r0, [pc, #1124]	; 13ee4 <__assert_fail@plt+0x2cd8>
   13a7c:	bx	lr
   13a80:	ldr	r0, [pc, #1120]	; 13ee8 <__assert_fail@plt+0x2cdc>
   13a84:	bx	lr
   13a88:	ldr	r0, [pc, #1116]	; 13eec <__assert_fail@plt+0x2ce0>
   13a8c:	bx	lr
   13a90:	ldr	r0, [pc, #1112]	; 13ef0 <__assert_fail@plt+0x2ce4>
   13a94:	bx	lr
   13a98:	ldr	r0, [pc, #1108]	; 13ef4 <__assert_fail@plt+0x2ce8>
   13a9c:	bx	lr
   13aa0:	ldr	r0, [pc, #1104]	; 13ef8 <__assert_fail@plt+0x2cec>
   13aa4:	bx	lr
   13aa8:	ldr	r0, [pc, #1100]	; 13efc <__assert_fail@plt+0x2cf0>
   13aac:	bx	lr
   13ab0:	ldr	r0, [pc, #1096]	; 13f00 <__assert_fail@plt+0x2cf4>
   13ab4:	bx	lr
   13ab8:	ldr	r0, [pc, #1092]	; 13f04 <__assert_fail@plt+0x2cf8>
   13abc:	bx	lr
   13ac0:	ldr	r0, [pc, #1088]	; 13f08 <__assert_fail@plt+0x2cfc>
   13ac4:	bx	lr
   13ac8:	ldr	r0, [pc, #1084]	; 13f0c <__assert_fail@plt+0x2d00>
   13acc:	bx	lr
   13ad0:	ldr	r0, [pc, #1080]	; 13f10 <__assert_fail@plt+0x2d04>
   13ad4:	bx	lr
   13ad8:	ldr	r0, [pc, #1076]	; 13f14 <__assert_fail@plt+0x2d08>
   13adc:	bx	lr
   13ae0:	ldr	r0, [pc, #1072]	; 13f18 <__assert_fail@plt+0x2d0c>
   13ae4:	bx	lr
   13ae8:	ldr	r0, [pc, #1068]	; 13f1c <__assert_fail@plt+0x2d10>
   13aec:	bx	lr
   13af0:	ldr	r0, [pc, #1064]	; 13f20 <__assert_fail@plt+0x2d14>
   13af4:	bx	lr
   13af8:	ldr	r0, [pc, #1060]	; 13f24 <__assert_fail@plt+0x2d18>
   13afc:	bx	lr
   13b00:	ldr	r0, [pc, #1056]	; 13f28 <__assert_fail@plt+0x2d1c>
   13b04:	bx	lr
   13b08:	ldr	r0, [pc, #1052]	; 13f2c <__assert_fail@plt+0x2d20>
   13b0c:	bx	lr
   13b10:	ldr	r0, [pc, #1048]	; 13f30 <__assert_fail@plt+0x2d24>
   13b14:	bx	lr
   13b18:	ldr	r0, [pc, #1044]	; 13f34 <__assert_fail@plt+0x2d28>
   13b1c:	bx	lr
   13b20:	ldr	r0, [pc, #1040]	; 13f38 <__assert_fail@plt+0x2d2c>
   13b24:	bx	lr
   13b28:	ldr	r0, [pc, #1036]	; 13f3c <__assert_fail@plt+0x2d30>
   13b2c:	bx	lr
   13b30:	ldr	r0, [pc, #1032]	; 13f40 <__assert_fail@plt+0x2d34>
   13b34:	bx	lr
   13b38:	ldr	r0, [pc, #1028]	; 13f44 <__assert_fail@plt+0x2d38>
   13b3c:	bx	lr
   13b40:	ldr	r0, [pc, #1024]	; 13f48 <__assert_fail@plt+0x2d3c>
   13b44:	bx	lr
   13b48:	ldr	r0, [pc, #896]	; 13ed0 <__assert_fail@plt+0x2cc4>
   13b4c:	bx	lr
   13b50:	ldr	r0, [pc, #836]	; 13e9c <__assert_fail@plt+0x2c90>
   13b54:	bx	lr
   13b58:	ldr	r0, [pc, #1004]	; 13f4c <__assert_fail@plt+0x2d40>
   13b5c:	bx	lr
   13b60:	ldr	r0, [pc, #1000]	; 13f50 <__assert_fail@plt+0x2d44>
   13b64:	bx	lr
   13b68:	ldr	r0, [pc, #816]	; 13ea0 <__assert_fail@plt+0x2c94>
   13b6c:	bx	lr
   13b70:	ldr	r0, [pc, #988]	; 13f54 <__assert_fail@plt+0x2d48>
   13b74:	bx	lr
   13b78:	ldr	r0, [pc, #984]	; 13f58 <__assert_fail@plt+0x2d4c>
   13b7c:	bx	lr
   13b80:	ldr	r0, [pc, #980]	; 13f5c <__assert_fail@plt+0x2d50>
   13b84:	bx	lr
   13b88:	ldr	r0, [pc, #976]	; 13f60 <__assert_fail@plt+0x2d54>
   13b8c:	bx	lr
   13b90:	ldr	r0, [pc, #972]	; 13f64 <__assert_fail@plt+0x2d58>
   13b94:	bx	lr
   13b98:	ldr	r0, [pc, #968]	; 13f68 <__assert_fail@plt+0x2d5c>
   13b9c:	bx	lr
   13ba0:	ldr	r0, [pc, #964]	; 13f6c <__assert_fail@plt+0x2d60>
   13ba4:	bx	lr
   13ba8:	ldr	r0, [pc, #960]	; 13f70 <__assert_fail@plt+0x2d64>
   13bac:	bx	lr
   13bb0:	ldr	r0, [pc, #956]	; 13f74 <__assert_fail@plt+0x2d68>
   13bb4:	bx	lr
   13bb8:	ldr	r0, [pc, #952]	; 13f78 <__assert_fail@plt+0x2d6c>
   13bbc:	bx	lr
   13bc0:	ldr	r0, [pc, #400]	; 13d58 <__assert_fail@plt+0x2b4c>
   13bc4:	bx	lr
   13bc8:	ldr	r0, [pc, #940]	; 13f7c <__assert_fail@plt+0x2d70>
   13bcc:	bx	lr
   13bd0:	ldr	r0, [pc, #788]	; 13eec <__assert_fail@plt+0x2ce0>
   13bd4:	bx	lr
   13bd8:	ldr	r0, [pc, #928]	; 13f80 <__assert_fail@plt+0x2d74>
   13bdc:	bx	lr
   13be0:	ldr	r0, [pc, #308]	; 13d1c <__assert_fail@plt+0x2b10>
   13be4:	bx	lr
   13be8:	ldr	r0, [pc, #916]	; 13f84 <__assert_fail@plt+0x2d78>
   13bec:	bx	lr
   13bf0:	ldr	r0, [pc, #912]	; 13f88 <__assert_fail@plt+0x2d7c>
   13bf4:	bx	lr
   13bf8:	ldr	r0, [pc, #908]	; 13f8c <__assert_fail@plt+0x2d80>
   13bfc:	bx	lr
   13c00:	ldr	r0, [pc, #904]	; 13f90 <__assert_fail@plt+0x2d84>
   13c04:	bx	lr
   13c08:	ldr	r0, [pc, #900]	; 13f94 <__assert_fail@plt+0x2d88>
   13c0c:	bx	lr
   13c10:	ldr	r0, [pc, #896]	; 13f98 <__assert_fail@plt+0x2d8c>
   13c14:	bx	lr
   13c18:	ldr	r0, [pc, #252]	; 13d1c <__assert_fail@plt+0x2b10>
   13c1c:	bx	lr
   13c20:	ldr	r0, [pc, #884]	; 13f9c <__assert_fail@plt+0x2d90>
   13c24:	bx	lr
   13c28:	ldr	r0, [pc, #880]	; 13fa0 <__assert_fail@plt+0x2d94>
   13c2c:	bx	lr
   13c30:	ldr	r0, [pc, #876]	; 13fa4 <__assert_fail@plt+0x2d98>
   13c34:	bx	lr
   13c38:	ldr	r0, [pc, #872]	; 13fa8 <__assert_fail@plt+0x2d9c>
   13c3c:	bx	lr
   13c40:	ldr	r0, [pc, #868]	; 13fac <__assert_fail@plt+0x2da0>
   13c44:	bx	lr
   13c48:	ldr	r0, [pc, #864]	; 13fb0 <__assert_fail@plt+0x2da4>
   13c4c:	bx	lr
   13c50:	ldr	r0, [pc, #860]	; 13fb4 <__assert_fail@plt+0x2da8>
   13c54:	bx	lr
   13c58:	mov	r2, #5
   13c5c:	ldr	r1, [pc, #852]	; 13fb8 <__assert_fail@plt+0x2dac>
   13c60:	b	10f90 <dcgettext@plt>
   13c64:	andeq	r1, r6, r0, rrx
   13c68:	andeq	r1, r6, r4, lsr #19
   13c6c:	andeq	r1, r6, r4, asr #32
   13c70:	andeq	r1, r6, r0, ror r9
   13c74:	andeq	r1, r6, r4, asr #17
   13c78:	muleq	r6, r0, fp
   13c7c:	andeq	r1, r6, ip, lsl #18
   13c80:	andeq	r1, r6, r8, lsr #22
   13c84:	andeq	r1, r6, r4, asr sl
   13c88:	andeq	r1, r6, r4, ror #26
   13c8c:	andeq	r2, r6, r8, ror r0
   13c90:	andeq	r1, r6, r8, asr #21
   13c94:	andeq	r1, r6, r4, lsr sp
   13c98:	andeq	r1, r6, r0, ror #24
   13c9c:	strdeq	r1, [r6], -r0
   13ca0:	ldrdeq	r1, [r6], -r8
   13ca4:	muleq	r6, ip, lr
   13ca8:	andeq	r1, r6, r4, asr #27
   13cac:	strdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   13cb0:	andeq	r2, r6, ip, lsr r0
   13cb4:			; <UNDEFINED> instruction: 0x00060fb4
   13cb8:	strdeq	r1, [r6], -ip
   13cbc:	muleq	r6, r0, pc	; <UNPREDICTABLE>
   13cc0:	andeq	r1, r6, r0, asr #15
   13cc4:	strdeq	r1, [r6], -r0
   13cc8:	andeq	r1, r6, r8, ror #12
   13ccc:	andeq	r1, r6, r8, lsl #7
   13cd0:	andeq	r1, r6, r4, asr r7
   13cd4:	andeq	r1, r6, ip, asr #6
   13cd8:	andeq	r1, r6, r4, ror r2
   13cdc:	andeq	r1, r6, r4, asr r4
   13ce0:	andeq	r1, r6, ip, ror #5
   13ce4:			; <UNDEFINED> instruction: 0x000614bc
   13ce8:	andeq	r1, r6, r4, lsr #10
   13cec:	andeq	r1, r6, r4, lsl r6
   13cf0:			; <UNDEFINED> instruction: 0x000615b8
   13cf4:	andeq	r1, r6, r4, lsl r5
   13cf8:	ldrdeq	r1, [r6], -ip
   13cfc:	andeq	r1, r6, r0, asr #10
   13d00:	andeq	r0, r6, r8, asr #30
   13d04:	ldrdeq	r2, [r6], -r0
   13d08:	andeq	sl, r9, r0, ror #10
   13d0c:	andeq	r1, r6, ip, asr #3
   13d10:	andeq	r1, r6, r0, lsr #28
   13d14:	andeq	r1, r6, ip, ror r1
   13d18:	ldrdeq	r1, [r6], -r4
   13d1c:	strdeq	r1, [r6], -r8
   13d20:	andeq	r1, r6, r0, lsr #2
   13d24:	andeq	r1, r6, r4, lsl #31
   13d28:	andeq	r1, r6, r0, lsr #32
   13d2c:	andeq	r1, r6, r4, ror #31
   13d30:	andeq	r9, r0, r6, lsr #32
   13d34:	andeq	r4, r0, r8, lsl #13
   13d38:	andeq	r5, r0, r5, lsr #21
   13d3c:	andeq	r4, r0, pc, ror #27
   13d40:	andeq	r5, r0, r1, asr #8
   13d44:	andeq	r2, r6, r0, lsr #5
   13d48:	andeq	r0, r6, r0, ror pc
   13d4c:	andeq	r7, r0, r6, ror r6
   13d50:	andeq	r8, r0, r7, lsl r2
   13d54:	andeq	r7, r0, r0, asr r6
   13d58:	andeq	r1, r6, ip, asr #9
   13d5c:	andeq	r2, r0, r0, lsr r5
   13d60:	andeq	r1, r0, r7, asr r0
   13d64:	andeq	r2, r6, ip, lsl #5
   13d68:	andeq	fp, r0, fp, lsr #21
   13d6c:	andeq	pc, r0, sp
   13d70:			; <UNDEFINED> instruction: 0x0000feba
   13d74:	andeq	r2, r6, r4, ror #4
   13d78:	andeq	r3, r0, r0, lsr r3
   13d7c:	andeq	r4, r0, r7, asr r1
   13d80:	andeq	r2, r6, r0, lsr #4
   13d84:	andeq	fp, r0, pc, ror #29
   13d88:	andeq	sp, r0, sp, lsr #29
   13d8c:	andeq	r1, r6, ip, lsl r5
   13d90:	muleq	r0, r0, r3
   13d94:	andeq	sl, r0, r7, asr #23
   13d98:	andeq	sl, r0, r5, asr #26
   13d9c:	andeq	r2, r6, r8, lsr r2
   13da0:	strdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   13da4:	andeq	r2, r6, r0, lsr #3
   13da8:	andeq	r2, r6, r0, lsl r1
   13dac:	andeq	r1, r6, ip, asr #10
   13db0:	andeq	r0, r6, r8, lsl pc
   13db4:	andeq	r0, r6, r0, asr #29
   13db8:	andeq	r9, r0, r1, asr #32
   13dbc:	andeq	r2, r6, r8, ror #2
   13dc0:	ldrdeq	r0, [r6], -r4
   13dc4:	andeq	r2, r6, r4, asr r2
   13dc8:	andeq	r0, r6, r4, ror #30
   13dcc:			; <UNDEFINED> instruction: 0x000622b0
   13dd0:	andeq	r1, r6, r8, asr #31
   13dd4:	andeq	r1, r6, r0, lsl r0
   13dd8:	andeq	r1, r6, r4, ror #30
   13ddc:	andeq	r1, r6, r4, lsl #2
   13de0:	strheq	r1, [r6], -r4
   13de4:	andeq	r1, r6, r8, asr r1
   13de8:	andeq	r1, r6, r0, lsl #4
   13dec:	andeq	r1, r6, r4, lsr r0
   13df0:	andeq	r1, r6, r8, ror #19
   13df4:	andeq	r0, r6, r8, asr #29
   13df8:	andeq	r2, r6, r8, asr #2
   13dfc:	andeq	r0, r6, r8, lsl #30
   13e00:	andeq	r2, r6, ip, ror #1
   13e04:	muleq	r6, r0, r1
   13e08:	andeq	r0, r6, r4, ror #29
   13e0c:	andeq	r1, r6, ip, ror r0
   13e10:			; <UNDEFINED> instruction: 0x000621b0
   13e14:	ldrdeq	r2, [r6], -r0
   13e18:	andeq	r0, r6, r0, asr #30
   13e1c:	andeq	r1, r6, r8, lsl #11
   13e20:	strdeq	r1, [r6], -r8
   13e24:	andeq	r1, r6, r8, asr #5
   13e28:	andeq	r1, r6, r8, lsr #8
   13e2c:	andeq	r1, r6, r0, asr #4
   13e30:	andeq	r1, r6, r4, lsr r3
   13e34:	andeq	r1, r6, r8, lsr r7
   13e38:	andeq	r1, r6, r4, ror #7
   13e3c:	muleq	r6, ip, r6
   13e40:	ldrdeq	r1, [r6], -r8
   13e44:	andeq	r1, r6, ip, lsl #15
   13e48:	andeq	r1, r6, ip, lsr r8
   13e4c:	ldrdeq	r0, [r6], -r0	; <UNPREDICTABLE>
   13e50:	andeq	r2, r6, ip, lsl r0
   13e54:	ldrdeq	r0, [r6], -ip
   13e58:	muleq	r6, ip, sp
   13e5c:	andeq	r1, r6, ip, ror #28
   13e60:	andeq	r1, r6, r4, lsr #25
   13e64:	andeq	r1, r6, ip, lsr #30
   13e68:	andeq	r1, r6, ip, lsr ip
   13e6c:	andeq	r1, r6, ip, lsl #26
   13e70:	andeq	r1, r6, r4, lsr #21
   13e74:	strheq	r2, [r6], -r4
   13e78:	andeq	r1, r6, r4, lsl #27
   13e7c:	andeq	r1, r6, ip, lsr sl
   13e80:	andeq	r1, r6, r0, lsl fp
   13e84:	andeq	r1, r6, r8, ror #17
   13e88:	andeq	r1, r6, r4, ror #23
   13e8c:	muleq	r6, r8, r8
   13e90:	andeq	r1, r6, r4, asr #18
   13e94:	muleq	r6, ip, r4
   13e98:	ldrdeq	r1, [r6], -r4
   13e9c:	andeq	r1, r6, ip, ror #9
   13ea0:	andeq	r1, r6, r0, asr #12
   13ea4:			; <UNDEFINED> instruction: 0x00061bb0
   13ea8:	muleq	r6, r8, r0
   13eac:	andeq	r1, r6, r0, ror sp
   13eb0:			; <UNDEFINED> instruction: 0x000619bc
   13eb4:	andeq	r1, r6, r0, ror #3
   13eb8:			; <UNDEFINED> instruction: 0x000613b8
   13ebc:	andeq	r1, r6, r8, ror r6
   13ec0:	andeq	r1, r6, ip, rrx
   13ec4:			; <UNDEFINED> instruction: 0x000621b8
   13ec8:	andeq	r1, r6, r4, lsr #30
   13ecc:	andeq	r0, r6, r4, asr #31
   13ed0:	andeq	r0, r6, r4, lsl #31
   13ed4:	andeq	r2, r6, r0, ror r2
   13ed8:	strdeq	r2, [r6], -r8
   13edc:	andeq	r1, r6, ip, lsl #9
   13ee0:	strdeq	r1, [r6], -r4
   13ee4:	andeq	r1, r6, r8, ror #10
   13ee8:	andeq	r2, r6, r0, lsr r2
   13eec:	andeq	r1, r6, r0, lsr #16
   13ef0:	andeq	r1, r6, r4, lsr #5
   13ef4:	andeq	r1, r6, ip, ror #24
   13ef8:	andeq	r0, r6, r8, asr pc
   13efc:	andeq	r1, r6, r8, lsl #21
   13f00:	ldrdeq	r1, [r6], -r4
   13f04:	andeq	r1, r6, r0, ror #1
   13f08:	muleq	r6, r4, pc	; <UNPREDICTABLE>
   13f0c:	strdeq	r0, [r6], -ip
   13f10:	andeq	r1, r6, r8, lsl r7
   13f14:	andeq	r2, r6, ip, lsr #2
   13f18:	andeq	r2, r6, r0, asr #5
   13f1c:	andeq	r1, r6, r4
   13f20:	muleq	r6, r4, pc	; <UNPREDICTABLE>
   13f24:	ldrdeq	r1, [r6], -r0
   13f28:	andeq	r1, r6, ip, lsr #3
   13f2c:			; <UNDEFINED> instruction: 0x00061ebc
   13f30:	andeq	r2, r6, r8, lsr #3
   13f34:	muleq	r6, r4, r9
   13f38:	andeq	r1, r6, r0, asr r0
   13f3c:	andeq	r2, r6, r8, asr r0
   13f40:	andeq	r1, r6, ip, asr #22
   13f44:	andeq	r1, r6, r8, asr sp
   13f48:	andeq	r1, r6, ip, ror r3
   13f4c:	ldrdeq	r0, [r6], -ip
   13f50:	ldrdeq	r1, [r6], -ip
   13f54:	andeq	r1, r6, r0, asr lr
   13f58:	andeq	r1, r6, ip, asr r7
   13f5c:	andeq	r0, r6, r8, ror pc
   13f60:	andeq	r2, r6, r4, ror r1
   13f64:	andeq	r1, r6, r4, lsr r9
   13f68:	andeq	r1, r6, r0, lsl r3
   13f6c:	strdeq	r1, [r6], -r8
   13f70:	andeq	r1, r6, r4, lsr #32
   13f74:	andeq	r2, r6, r0
   13f78:	andeq	r1, r6, r0, asr #2
   13f7c:	andeq	r2, r6, r8, lsl r2
   13f80:	andeq	r1, r6, r4, lsl #8
   13f84:	andeq	r0, r6, r0, lsr pc
   13f88:	andeq	r1, r6, ip, lsr #13
   13f8c:	andeq	r1, r6, ip, lsl #27
   13f90:	andeq	r1, r6, r4, lsl sl
   13f94:	andeq	r2, r6, ip, asr #1
   13f98:	muleq	r6, r0, r0
   13f9c:	ldrdeq	r2, [r6], -ip
   13fa0:	andeq	r1, r6, r0, lsr r5
   13fa4:	ldrdeq	r0, [r6], -r8
   13fa8:	andeq	r1, r6, r0, lsl ip
   13fac:	andeq	r1, r6, r4, asr pc
   13fb0:	andeq	r1, r6, r0, lsr #4
   13fb4:	andeq	r1, r6, r0, ror #16
   13fb8:	andeq	r2, r6, r8, asr #5
   13fbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   13fc0:	sub	sp, sp, #60	; 0x3c
   13fc4:	mov	r4, r2
   13fc8:	ldr	r7, [sp, #88]	; 0x58
   13fcc:	ldr	r9, [r0]
   13fd0:	mov	r2, #48	; 0x30
   13fd4:	ldr	r5, [r7]
   13fd8:	mov	r1, #0
   13fdc:	mov	r6, r0
   13fe0:	add	r0, sp, #8
   13fe4:	mov	r8, r3
   13fe8:	bl	110bc <memset@plt>
   13fec:	mov	r0, r4
   13ff0:	str	r5, [sp, #4]
   13ff4:	str	r9, [sp]
   13ff8:	str	r4, [sp, #16]
   13ffc:	bl	5861c <warn@@Base+0x384c>
   14000:	mov	r2, #56	; 0x38
   14004:	ldr	r1, [pc, #156]	; 140a8 <__assert_fail@plt+0x2e9c>
   14008:	mov	r5, r0
   1400c:	mov	r0, sp
   14010:	bl	11110 <inflateInit_@plt>
   14014:	ldr	r3, [sp, #4]
   14018:	cmp	r3, #0
   1401c:	bne	1405c <__assert_fail@plt+0x2e50>
   14020:	b	14080 <__assert_fail@plt+0x2e74>
   14024:	ldr	r3, [sp, #16]
   14028:	mov	r1, #4
   1402c:	sub	r3, r4, r3
   14030:	add	r3, r5, r3
   14034:	mov	r0, sp
   14038:	str	r3, [sp, #12]
   1403c:	bl	10f30 <inflate@plt>
   14040:	cmp	r0, #1
   14044:	mov	r0, sp
   14048:	bne	14064 <__assert_fail@plt+0x2e58>
   1404c:	bl	1117c <inflateReset@plt>
   14050:	ldr	r3, [sp, #4]
   14054:	cmp	r3, #0
   14058:	beq	14080 <__assert_fail@plt+0x2e74>
   1405c:	cmp	r0, #0
   14060:	beq	14024 <__assert_fail@plt+0x2e18>
   14064:	mov	r0, r5
   14068:	bl	10f54 <free@plt>
   1406c:	mov	r3, #0
   14070:	mov	r0, r3
   14074:	str	r3, [r6]
   14078:	add	sp, sp, #60	; 0x3c
   1407c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14080:	mov	r0, sp
   14084:	bl	11068 <inflateEnd@plt>
   14088:	ldr	r3, [sp, #16]
   1408c:	orrs	r3, r0, r3
   14090:	bne	14064 <__assert_fail@plt+0x2e58>
   14094:	str	r5, [r6]
   14098:	mov	r0, #1
   1409c:	stm	r7, {r4, r8}
   140a0:	add	sp, sp, #60	; 0x3c
   140a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   140a8:	andeq	r2, r6, r0, ror #5
   140ac:	push	{r4, lr}
   140b0:	subs	r4, r0, #0
   140b4:	popeq	{r4, pc}
   140b8:	ldr	r0, [r4, #4]
   140bc:	cmp	r0, #0
   140c0:	beq	140c8 <__assert_fail@plt+0x2ebc>
   140c4:	bl	110f8 <fclose@plt>
   140c8:	mov	r0, r4
   140cc:	pop	{r4, lr}
   140d0:	b	10f54 <free@plt>
   140d4:	push	{r4, r5, r6, lr}
   140d8:	mov	r6, r0
   140dc:	mov	r0, #12
   140e0:	mov	r5, r1
   140e4:	bl	11020 <malloc@plt>
   140e8:	subs	r4, r0, #0
   140ec:	beq	1411c <__assert_fail@plt+0x2f10>
   140f0:	mov	r0, r6
   140f4:	bl	10f9c <strdup@plt>
   140f8:	cmp	r0, #0
   140fc:	str	r0, [r4]
   14100:	beq	14130 <__assert_fail@plt+0x2f24>
   14104:	ldr	r3, [pc, #56]	; 14144 <__assert_fail@plt+0x2f38>
   14108:	strb	r5, [r4, #4]
   1410c:	ldr	r2, [r3, #360]	; 0x168
   14110:	str	r4, [r3, #360]	; 0x168
   14114:	str	r2, [r4, #8]
   14118:	pop	{r4, r5, r6, pc}
   1411c:	mov	r2, #5
   14120:	ldr	r1, [pc, #32]	; 14148 <__assert_fail@plt+0x2f3c>
   14124:	bl	10f90 <dcgettext@plt>
   14128:	bl	548ac <error@@Base>
   1412c:	b	140f0 <__assert_fail@plt+0x2ee4>
   14130:	mov	r2, #5
   14134:	ldr	r1, [pc, #12]	; 14148 <__assert_fail@plt+0x2f3c>
   14138:	bl	10f90 <dcgettext@plt>
   1413c:	bl	548ac <error@@Base>
   14140:	b	14104 <__assert_fail@plt+0x2ef8>
   14144:	andeq	sl, r9, r8, lsr r4
   14148:	andeq	r2, r6, r8, ror #5
   1414c:	push	{r4, lr}
   14150:	mov	r2, #5
   14154:	mov	r4, r0
   14158:	ldr	r1, [pc, #196]	; 14224 <__assert_fail@plt+0x3018>
   1415c:	mov	r0, #0
   14160:	bl	10f90 <dcgettext@plt>
   14164:	ldr	r6, [pc, #188]	; 14228 <__assert_fail@plt+0x301c>
   14168:	mov	r1, r0
   1416c:	mov	r0, r4
   14170:	bl	11098 <fprintf@plt>
   14174:	mov	r2, #5
   14178:	ldr	r1, [pc, #172]	; 1422c <__assert_fail@plt+0x3020>
   1417c:	mov	r0, #0
   14180:	bl	10f90 <dcgettext@plt>
   14184:	mov	r1, r0
   14188:	mov	r0, r4
   1418c:	bl	11098 <fprintf@plt>
   14190:	mov	r2, #5
   14194:	ldr	r1, [pc, #148]	; 14230 <__assert_fail@plt+0x3024>
   14198:	mov	r0, #0
   1419c:	bl	10f90 <dcgettext@plt>
   141a0:	mov	r1, r0
   141a4:	mov	r0, r4
   141a8:	bl	11098 <fprintf@plt>
   141ac:	mov	r2, #5
   141b0:	ldr	r1, [pc, #124]	; 14234 <__assert_fail@plt+0x3028>
   141b4:	mov	r0, #0
   141b8:	bl	10f90 <dcgettext@plt>
   141bc:	mov	r1, r0
   141c0:	mov	r0, r4
   141c4:	bl	11098 <fprintf@plt>
   141c8:	mov	r2, #5
   141cc:	ldr	r1, [pc, #100]	; 14238 <__assert_fail@plt+0x302c>
   141d0:	mov	r0, #0
   141d4:	bl	10f90 <dcgettext@plt>
   141d8:	mov	r1, r0
   141dc:	mov	r0, r4
   141e0:	bl	11098 <fprintf@plt>
   141e4:	ldr	r5, [r6]
   141e8:	cmp	r5, r4
   141ec:	beq	141fc <__assert_fail@plt+0x2ff0>
   141f0:	subs	r0, r4, r5
   141f4:	movne	r0, #1
   141f8:	bl	1105c <exit@plt>
   141fc:	mov	r2, #5
   14200:	ldr	r1, [pc, #52]	; 1423c <__assert_fail@plt+0x3030>
   14204:	mov	r0, #0
   14208:	bl	10f90 <dcgettext@plt>
   1420c:	ldr	r2, [pc, #44]	; 14240 <__assert_fail@plt+0x3034>
   14210:	mov	r1, r0
   14214:	mov	r0, r5
   14218:	bl	11098 <fprintf@plt>
   1421c:	ldr	r5, [r6]
   14220:	b	141f0 <__assert_fail@plt+0x2fe4>
   14224:	andeq	r2, r6, r8, lsl r3
   14228:	andeq	sl, r9, ip, lsr #8
   1422c:	andeq	r2, r6, r0, asr #6
   14230:	andeq	r2, r6, r0, lsl #7
   14234:	andeq	r2, r6, r8, lsr fp
   14238:	andeq	r2, r6, r8, ror #23
   1423c:	andeq	r2, r6, r4, lsl sp
   14240:	andeq	r2, r6, r8, lsr #26
   14244:	sub	r2, r2, #1
   14248:	push	{r4, r6, r7, lr}
   1424c:	mov	r6, r0
   14250:	mov	r7, r1
   14254:	cmp	r2, #5
   14258:	ldrls	pc, [pc, r2, lsl #2]
   1425c:	b	14348 <__assert_fail@plt+0x313c>
   14260:	andeq	r4, r1, r4, ror #5
   14264:	andeq	r4, r1, r8, ror r2
   14268:	strdeq	r4, [r1], -r8
   1426c:	andeq	r4, r1, ip, lsl #5
   14270:	andeq	r4, r1, ip, lsl #6
   14274:			; <UNDEFINED> instruction: 0x000142b0
   14278:	add	r3, pc, #208	; 0xd0
   1427c:	ldrd	r2, [r3]
   14280:	cmp	r1, r3
   14284:	cmpeq	r0, r2
   14288:	bls	14334 <__assert_fail@plt+0x3128>
   1428c:	ldr	r0, [pc, #196]	; 14358 <__assert_fail@plt+0x314c>
   14290:	bl	10f24 <printf@plt>
   14294:	mov	r4, r0
   14298:	mov	r2, r6
   1429c:	mov	r3, r7
   142a0:	ldr	r0, [pc, #180]	; 1435c <__assert_fail@plt+0x3150>
   142a4:	bl	10f24 <printf@plt>
   142a8:	add	r0, r0, r4
   142ac:	pop	{r4, r6, r7, pc}
   142b0:	mov	r4, #0
   142b4:	ldr	r3, [pc, #164]	; 14360 <__assert_fail@plt+0x3154>
   142b8:	ldr	r3, [r3]
   142bc:	cmp	r3, #0
   142c0:	bne	1431c <__assert_fail@plt+0x3110>
   142c4:	ldr	r0, [pc, #152]	; 14364 <__assert_fail@plt+0x3158>
   142c8:	mov	r2, r6
   142cc:	mov	r3, r7
   142d0:	ldr	r1, [pc, #144]	; 14368 <__assert_fail@plt+0x315c>
   142d4:	ldr	r0, [r0]
   142d8:	bl	11098 <fprintf@plt>
   142dc:	add	r0, r4, #16
   142e0:	pop	{r4, r6, r7, pc}
   142e4:	mov	r2, r0
   142e8:	mov	r3, r1
   142ec:	ldr	r0, [pc, #120]	; 1436c <__assert_fail@plt+0x3160>
   142f0:	pop	{r4, r6, r7, lr}
   142f4:	b	10f24 <printf@plt>
   142f8:	mov	r2, r0
   142fc:	mov	r3, r1
   14300:	ldr	r0, [pc, #104]	; 14370 <__assert_fail@plt+0x3164>
   14304:	pop	{r4, r6, r7, lr}
   14308:	b	10f24 <printf@plt>
   1430c:	ldr	r0, [pc, #68]	; 14358 <__assert_fail@plt+0x314c>
   14310:	bl	10f24 <printf@plt>
   14314:	mov	r4, r0
   14318:	b	142b4 <__assert_fail@plt+0x30a8>
   1431c:	mov	r2, r6
   14320:	mov	r3, r7
   14324:	ldr	r0, [pc, #72]	; 14374 <__assert_fail@plt+0x3168>
   14328:	bl	10f24 <printf@plt>
   1432c:	add	r0, r0, r4
   14330:	pop	{r4, r6, r7, pc}
   14334:	mov	r2, r0
   14338:	mov	r3, r1
   1433c:	ldr	r0, [pc, #52]	; 14378 <__assert_fail@plt+0x316c>
   14340:	pop	{r4, r6, r7, lr}
   14344:	b	10f24 <printf@plt>
   14348:	mov	r4, #0
   1434c:	b	14298 <__assert_fail@plt+0x308c>
   14350:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   14354:	andeq	r0, r0, r0
   14358:	andeq	r5, r6, r8, asr #25
   1435c:	andeq	r2, r6, r8, ror #26
   14360:	andeq	sl, r9, r8, lsr r4
   14364:	andeq	sl, r9, ip, lsr #8
   14368:	andeq	r2, r6, r8, asr sp
   1436c:	andeq	r2, r6, r0, ror sp
   14370:	andeq	r2, r6, r8, ror sp
   14374:	andeq	r2, r6, r0, asr sp
   14378:	andeq	r2, r6, r0, ror #26
   1437c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14380:	subs	fp, r0, #0
   14384:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14388:	ldr	sl, [pc, #600]	; 145e8 <__assert_fail@plt+0x33dc>
   1438c:	ldr	r9, [pc, #600]	; 145ec <__assert_fail@plt+0x33e0>
   14390:	ldr	r8, [pc, #600]	; 145f0 <__assert_fail@plt+0x33e4>
   14394:	ldr	r7, [pc, #600]	; 145f4 <__assert_fail@plt+0x33e8>
   14398:	ldr	r6, [pc, #600]	; 145f8 <__assert_fail@plt+0x33ec>
   1439c:	ldr	r5, [pc, #600]	; 145fc <__assert_fail@plt+0x33f0>
   143a0:	rsb	r4, fp, #0
   143a4:	and	r4, r4, fp
   143a8:	cmp	r4, #256	; 0x100
   143ac:	bic	fp, fp, r4
   143b0:	beq	14584 <__assert_fail@plt+0x3378>
   143b4:	bls	14448 <__assert_fail@plt+0x323c>
   143b8:	cmp	r4, #8192	; 0x2000
   143bc:	beq	14570 <__assert_fail@plt+0x3364>
   143c0:	bhi	14418 <__assert_fail@plt+0x320c>
   143c4:	cmp	r4, #1024	; 0x400
   143c8:	beq	144f8 <__assert_fail@plt+0x32ec>
   143cc:	bls	143fc <__assert_fail@plt+0x31f0>
   143d0:	cmp	r4, #2048	; 0x800
   143d4:	beq	1455c <__assert_fail@plt+0x3350>
   143d8:	cmp	r4, #4096	; 0x1000
   143dc:	bne	144d4 <__assert_fail@plt+0x32c8>
   143e0:	ldr	r0, [pc, #536]	; 14600 <__assert_fail@plt+0x33f4>
   143e4:	bl	10f24 <printf@plt>
   143e8:	cmp	fp, #0
   143ec:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143f0:	ldr	r0, [pc, #524]	; 14604 <__assert_fail@plt+0x33f8>
   143f4:	bl	10f24 <printf@plt>
   143f8:	b	143a0 <__assert_fail@plt+0x3194>
   143fc:	cmp	r4, #512	; 0x200
   14400:	bne	144d4 <__assert_fail@plt+0x32c8>
   14404:	ldr	r0, [pc, #508]	; 14608 <__assert_fail@plt+0x33fc>
   14408:	bl	10f24 <printf@plt>
   1440c:	cmp	fp, #0
   14410:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14414:	b	143f0 <__assert_fail@plt+0x31e4>
   14418:	cmp	r4, #32768	; 0x8000
   1441c:	beq	145d4 <__assert_fail@plt+0x33c8>
   14420:	bls	14484 <__assert_fail@plt+0x3278>
   14424:	cmp	r4, #65536	; 0x10000
   14428:	beq	14520 <__assert_fail@plt+0x3314>
   1442c:	cmp	r4, #131072	; 0x20000
   14430:	bne	144d4 <__assert_fail@plt+0x32c8>
   14434:	mov	r0, r5
   14438:	bl	10f24 <printf@plt>
   1443c:	cmp	fp, #0
   14440:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14444:	b	143f0 <__assert_fail@plt+0x31e4>
   14448:	cmp	r4, #8
   1444c:	beq	145c0 <__assert_fail@plt+0x33b4>
   14450:	bls	144bc <__assert_fail@plt+0x32b0>
   14454:	cmp	r4, #32
   14458:	beq	145ac <__assert_fail@plt+0x33a0>
   1445c:	bls	144a0 <__assert_fail@plt+0x3294>
   14460:	cmp	r4, #64	; 0x40
   14464:	beq	1450c <__assert_fail@plt+0x3300>
   14468:	cmp	r4, #128	; 0x80
   1446c:	bne	144d4 <__assert_fail@plt+0x32c8>
   14470:	ldr	r0, [pc, #404]	; 1460c <__assert_fail@plt+0x3400>
   14474:	bl	10f24 <printf@plt>
   14478:	cmp	fp, #0
   1447c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14480:	b	143f0 <__assert_fail@plt+0x31e4>
   14484:	cmp	r4, #16384	; 0x4000
   14488:	bne	144d4 <__assert_fail@plt+0x32c8>
   1448c:	ldr	r0, [pc, #380]	; 14610 <__assert_fail@plt+0x3404>
   14490:	bl	10f24 <printf@plt>
   14494:	cmp	fp, #0
   14498:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1449c:	b	143f0 <__assert_fail@plt+0x31e4>
   144a0:	cmp	r4, #16
   144a4:	bne	144d4 <__assert_fail@plt+0x32c8>
   144a8:	ldr	r0, [pc, #356]	; 14614 <__assert_fail@plt+0x3408>
   144ac:	bl	10f24 <printf@plt>
   144b0:	cmp	fp, #0
   144b4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b8:	b	143f0 <__assert_fail@plt+0x31e4>
   144bc:	cmp	r4, #2
   144c0:	beq	14598 <__assert_fail@plt+0x338c>
   144c4:	cmp	r4, #4
   144c8:	beq	14534 <__assert_fail@plt+0x3328>
   144cc:	cmp	r4, #1
   144d0:	beq	14548 <__assert_fail@plt+0x333c>
   144d4:	mov	r2, #5
   144d8:	mov	r1, r9
   144dc:	mov	r0, #0
   144e0:	bl	10f90 <dcgettext@plt>
   144e4:	mov	r1, r4
   144e8:	bl	10f24 <printf@plt>
   144ec:	cmp	fp, #0
   144f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144f4:	b	143f0 <__assert_fail@plt+0x31e4>
   144f8:	ldr	r0, [pc, #280]	; 14618 <__assert_fail@plt+0x340c>
   144fc:	bl	10f24 <printf@plt>
   14500:	cmp	fp, #0
   14504:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14508:	b	143f0 <__assert_fail@plt+0x31e4>
   1450c:	ldr	r0, [pc, #264]	; 1461c <__assert_fail@plt+0x3410>
   14510:	bl	10f24 <printf@plt>
   14514:	cmp	fp, #0
   14518:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1451c:	b	143f0 <__assert_fail@plt+0x31e4>
   14520:	mov	r0, r6
   14524:	bl	10f24 <printf@plt>
   14528:	cmp	fp, #0
   1452c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14530:	b	143f0 <__assert_fail@plt+0x31e4>
   14534:	ldr	r0, [pc, #228]	; 14620 <__assert_fail@plt+0x3414>
   14538:	bl	10f24 <printf@plt>
   1453c:	cmp	fp, #0
   14540:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14544:	b	143f0 <__assert_fail@plt+0x31e4>
   14548:	ldr	r0, [pc, #212]	; 14624 <__assert_fail@plt+0x3418>
   1454c:	bl	10f24 <printf@plt>
   14550:	cmp	fp, #0
   14554:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14558:	b	143f0 <__assert_fail@plt+0x31e4>
   1455c:	ldr	r0, [pc, #196]	; 14628 <__assert_fail@plt+0x341c>
   14560:	bl	10f24 <printf@plt>
   14564:	cmp	fp, #0
   14568:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1456c:	b	143f0 <__assert_fail@plt+0x31e4>
   14570:	mov	r0, r8
   14574:	bl	10f24 <printf@plt>
   14578:	cmp	fp, #0
   1457c:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14580:	b	143f0 <__assert_fail@plt+0x31e4>
   14584:	mov	r0, sl
   14588:	bl	10f24 <printf@plt>
   1458c:	cmp	fp, #0
   14590:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14594:	b	143f0 <__assert_fail@plt+0x31e4>
   14598:	ldr	r0, [pc, #140]	; 1462c <__assert_fail@plt+0x3420>
   1459c:	bl	10f24 <printf@plt>
   145a0:	cmp	fp, #0
   145a4:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a8:	b	143f0 <__assert_fail@plt+0x31e4>
   145ac:	ldr	r0, [pc, #124]	; 14630 <__assert_fail@plt+0x3424>
   145b0:	bl	10f24 <printf@plt>
   145b4:	cmp	fp, #0
   145b8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145bc:	b	143f0 <__assert_fail@plt+0x31e4>
   145c0:	ldr	r0, [pc, #108]	; 14634 <__assert_fail@plt+0x3428>
   145c4:	bl	10f24 <printf@plt>
   145c8:	cmp	fp, #0
   145cc:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145d0:	b	143f0 <__assert_fail@plt+0x31e4>
   145d4:	mov	r0, r7
   145d8:	bl	10f24 <printf@plt>
   145dc:	cmp	fp, #0
   145e0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e4:	b	143f0 <__assert_fail@plt+0x31e4>
   145e8:			; <UNDEFINED> instruction: 0x00062db4
   145ec:	andeq	r2, r6, r8, lsl lr
   145f0:	ldrdeq	r2, [r6], -ip
   145f4:	strdeq	r2, [r6], -r4
   145f8:	andeq	r2, r6, r0, lsl #28
   145fc:	andeq	r2, r6, ip, lsl #28
   14600:	ldrdeq	r2, [r6], -r0
   14604:			; <UNDEFINED> instruction: 0x00068eb8
   14608:			; <UNDEFINED> instruction: 0x00062dbc
   1460c:	andeq	r2, r6, ip, lsr #27
   14610:	andeq	r2, r6, r8, ror #27
   14614:	muleq	r6, r4, sp
   14618:	andeq	r2, r6, r0, asr #27
   1461c:	andeq	r2, r6, r4, lsr #27
   14620:	andeq	r2, r6, ip, lsl #27
   14624:	andeq	r2, r6, r0, lsl #27
   14628:	andeq	r2, r6, r8, asr #27
   1462c:	andeq	r2, r6, r8, lsl #27
   14630:	muleq	r6, ip, sp
   14634:	muleq	r6, r0, sp
   14638:	push	{r4, lr}
   1463c:	cmp	r0, #8
   14640:	ldrls	pc, [pc, r0, lsl #2]
   14644:	b	14744 <__assert_fail@plt+0x3538>
   14648:	andeq	r4, r1, r4, lsl #13
   1464c:	muleq	r1, ip, r6
   14650:			; <UNDEFINED> instruction: 0x000146b4
   14654:	andeq	r4, r1, ip, asr #13
   14658:	andeq	r4, r1, r4, ror #13
   1465c:	strdeq	r4, [r1], -ip
   14660:	andeq	r4, r1, r4, lsl r7
   14664:	andeq	r4, r1, ip, lsr #14
   14668:	andeq	r4, r1, ip, ror #12
   1466c:	mov	r2, #5
   14670:	ldr	r1, [pc, #220]	; 14754 <__assert_fail@plt+0x3548>
   14674:	mov	r0, #0
   14678:	bl	10f90 <dcgettext@plt>
   1467c:	pop	{r4, lr}
   14680:	b	10f24 <printf@plt>
   14684:	mov	r2, #5
   14688:	ldr	r1, [pc, #200]	; 14758 <__assert_fail@plt+0x354c>
   1468c:	mov	r0, #0
   14690:	bl	10f90 <dcgettext@plt>
   14694:	pop	{r4, lr}
   14698:	b	10f24 <printf@plt>
   1469c:	mov	r2, #5
   146a0:	ldr	r1, [pc, #180]	; 1475c <__assert_fail@plt+0x3550>
   146a4:	mov	r0, #0
   146a8:	bl	10f90 <dcgettext@plt>
   146ac:	pop	{r4, lr}
   146b0:	b	10f24 <printf@plt>
   146b4:	mov	r2, #5
   146b8:	ldr	r1, [pc, #160]	; 14760 <__assert_fail@plt+0x3554>
   146bc:	mov	r0, #0
   146c0:	bl	10f90 <dcgettext@plt>
   146c4:	pop	{r4, lr}
   146c8:	b	10f24 <printf@plt>
   146cc:	mov	r2, #5
   146d0:	ldr	r1, [pc, #140]	; 14764 <__assert_fail@plt+0x3558>
   146d4:	mov	r0, #0
   146d8:	bl	10f90 <dcgettext@plt>
   146dc:	pop	{r4, lr}
   146e0:	b	10f24 <printf@plt>
   146e4:	mov	r2, #5
   146e8:	ldr	r1, [pc, #120]	; 14768 <__assert_fail@plt+0x355c>
   146ec:	mov	r0, #0
   146f0:	bl	10f90 <dcgettext@plt>
   146f4:	pop	{r4, lr}
   146f8:	b	10f24 <printf@plt>
   146fc:	mov	r2, #5
   14700:	ldr	r1, [pc, #100]	; 1476c <__assert_fail@plt+0x3560>
   14704:	mov	r0, #0
   14708:	bl	10f90 <dcgettext@plt>
   1470c:	pop	{r4, lr}
   14710:	b	10f24 <printf@plt>
   14714:	mov	r2, #5
   14718:	ldr	r1, [pc, #80]	; 14770 <__assert_fail@plt+0x3564>
   1471c:	mov	r0, #0
   14720:	bl	10f90 <dcgettext@plt>
   14724:	pop	{r4, lr}
   14728:	b	10f24 <printf@plt>
   1472c:	mov	r2, #5
   14730:	ldr	r1, [pc, #60]	; 14774 <__assert_fail@plt+0x3568>
   14734:	mov	r0, #0
   14738:	bl	10f90 <dcgettext@plt>
   1473c:	pop	{r4, lr}
   14740:	b	10f24 <printf@plt>
   14744:	mov	r1, r0
   14748:	pop	{r4, lr}
   1474c:	ldr	r0, [pc, #36]	; 14778 <__assert_fail@plt+0x356c>
   14750:	b	10f24 <printf@plt>
   14754:	andeq	r2, r6, r4, lsr pc
   14758:	andeq	r2, r6, r8, lsr #28
   1475c:	andeq	r2, r6, ip, lsr lr
   14760:	andeq	r2, r6, ip, asr lr
   14764:	andeq	r2, r6, ip, ror lr
   14768:	andeq	r2, r6, r8, lsl #29
   1476c:			; <UNDEFINED> instruction: 0x00062ebc
   14770:	andeq	r2, r6, r0, ror #29
   14774:	andeq	r2, r6, r8, lsl #30
   14778:	andeq	r2, r6, ip, asr #30
   1477c:	cmp	r1, r0
   14780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14784:	sub	r8, r1, r0
   14788:	sub	sp, sp, #12
   1478c:	bls	14894 <__assert_fail@plt+0x3688>
   14790:	cmp	r8, #0
   14794:	ldreq	r3, [pc, #268]	; 148a8 <__assert_fail@plt+0x369c>
   14798:	streq	r3, [sp, #4]
   1479c:	beq	1487c <__assert_fail@plt+0x3670>
   147a0:	ldr	r7, [pc, #260]	; 148ac <__assert_fail@plt+0x36a0>
   147a4:	ldr	r6, [pc, #260]	; 148b0 <__assert_fail@plt+0x36a4>
   147a8:	ldr	r3, [pc, #248]	; 148a8 <__assert_fail@plt+0x369c>
   147ac:	mov	r5, r0
   147b0:	mov	r9, #0
   147b4:	str	r3, [sp, #4]
   147b8:	cmp	r8, #16
   147bc:	mov	r1, r9
   147c0:	ldr	r0, [pc, #236]	; 148b4 <__assert_fail@plt+0x36a8>
   147c4:	movcc	r4, r8
   147c8:	movcs	r4, #16
   147cc:	mov	fp, #0
   147d0:	bl	10f24 <printf@plt>
   147d4:	b	147fc <__assert_fail@plt+0x35f0>
   147d8:	ldrb	r1, [r5, fp]
   147dc:	mov	r0, r6
   147e0:	bl	10f24 <printf@plt>
   147e4:	and	r2, fp, #3
   147e8:	cmp	r2, #3
   147ec:	beq	14818 <__assert_fail@plt+0x360c>
   147f0:	add	fp, fp, #1
   147f4:	cmp	fp, #16
   147f8:	beq	1482c <__assert_fail@plt+0x3620>
   147fc:	cmp	r4, fp
   14800:	bgt	147d8 <__assert_fail@plt+0x35cc>
   14804:	mov	r0, r7
   14808:	bl	10f24 <printf@plt>
   1480c:	and	r2, fp, #3
   14810:	cmp	r2, #3
   14814:	bne	147f0 <__assert_fail@plt+0x35e4>
   14818:	mov	r0, #32
   1481c:	add	fp, fp, #1
   14820:	bl	110c8 <putchar@plt>
   14824:	cmp	fp, #16
   14828:	bne	147fc <__assert_fail@plt+0x35f0>
   1482c:	sub	fp, r5, #1
   14830:	ldrb	r0, [fp, #1]
   14834:	add	sl, fp, #1
   14838:	sub	r1, r0, #32
   1483c:	cmp	r1, #94	; 0x5e
   14840:	movhi	r0, #46	; 0x2e
   14844:	bl	110c8 <putchar@plt>
   14848:	add	r3, fp, #2
   1484c:	sub	r3, r3, r5
   14850:	cmp	r3, r4
   14854:	mov	fp, sl
   14858:	blt	14830 <__assert_fail@plt+0x3624>
   1485c:	ldr	r3, [sp, #4]
   14860:	mov	r0, #10
   14864:	add	r5, r5, r4
   14868:	ldr	r1, [r3]
   1486c:	bl	11158 <putc@plt>
   14870:	subs	r8, r8, r4
   14874:	add	r9, r9, r4
   14878:	bne	147b8 <__assert_fail@plt+0x35ac>
   1487c:	ldr	r3, [sp, #4]
   14880:	mov	r0, #10
   14884:	ldr	r1, [r3]
   14888:	add	sp, sp, #12
   1488c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14890:	b	11158 <putc@plt>
   14894:	ldr	r3, [pc, #28]	; 148b8 <__assert_fail@plt+0x36ac>
   14898:	ldr	r2, [pc, #28]	; 148bc <__assert_fail@plt+0x36b0>
   1489c:	ldr	r1, [pc, #28]	; 148c0 <__assert_fail@plt+0x36b4>
   148a0:	ldr	r0, [pc, #28]	; 148c4 <__assert_fail@plt+0x36b8>
   148a4:	bl	1120c <__assert_fail@plt>
   148a8:	andeq	sl, r9, ip, lsr #8
   148ac:	andeq	r6, r6, ip, lsl r5
   148b0:	andeq	r2, r6, r8, lsl #31
   148b4:	andeq	r2, r6, ip, ror pc
   148b8:	andeq	r8, r5, r4, ror #27
   148bc:	andeq	r3, r0, sp, lsr #22
   148c0:	andeq	r2, r6, r8, asr pc
   148c4:	andeq	r2, r6, r4, ror pc
   148c8:	push	{r4, r5, r6, lr}
   148cc:	mov	r2, #5
   148d0:	mov	r4, r0
   148d4:	mov	r5, r1
   148d8:	mov	r0, #0
   148dc:	ldr	r1, [pc, #40]	; 1490c <__assert_fail@plt+0x3700>
   148e0:	bl	10f90 <dcgettext@plt>
   148e4:	mov	r1, r4
   148e8:	bl	10f24 <printf@plt>
   148ec:	sub	r1, r5, r4
   148f0:	mov	r0, r4
   148f4:	bl	11104 <strnlen@plt>
   148f8:	mov	r1, r5
   148fc:	add	r0, r4, r0
   14900:	bl	1477c <__assert_fail@plt+0x3570>
   14904:	mov	r0, r5
   14908:	pop	{r4, r5, r6, pc}
   1490c:	muleq	r6, r0, pc	; <UNPREDICTABLE>
   14910:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14914:	mov	r5, r0
   14918:	ldrd	r6, [sp, #32]
   1491c:	ldr	r0, [pc, #368]	; 14a94 <__assert_fail@plt+0x3888>
   14920:	mov	sl, r3
   14924:	mov	r4, r2
   14928:	bl	10f24 <printf@plt>
   1492c:	mov	r1, r7
   14930:	mov	r2, #6
   14934:	mov	r0, r6
   14938:	bl	14244 <__assert_fail@plt+0x3038>
   1493c:	mov	r0, #32
   14940:	bl	110c8 <putchar@plt>
   14944:	ldr	r2, [pc, #332]	; 14a98 <__assert_fail@plt+0x388c>
   14948:	mov	r1, #0
   1494c:	adds	r8, r4, r2
   14950:	adc	r9, sl, r1
   14954:	cmp	r9, r7
   14958:	cmpeq	r8, r6
   1495c:	subhi	r1, r6, r4
   14960:	subhi	r1, r1, #32512	; 0x7f00
   14964:	subhi	r1, r1, #240	; 0xf0
   14968:	ldrhi	r0, [pc, #300]	; 14a9c <__assert_fail@plt+0x3890>
   1496c:	ldrls	r1, [pc, #300]	; 14aa0 <__assert_fail@plt+0x3894>
   14970:	ldrls	r0, [pc, #300]	; 14aa4 <__assert_fail@plt+0x3898>
   14974:	bl	10f24 <printf@plt>
   14978:	mov	r0, #32
   1497c:	bl	110c8 <putchar@plt>
   14980:	cmp	r5, #0
   14984:	ldr	r8, [pc, #284]	; 14aa8 <__assert_fail@plt+0x389c>
   14988:	beq	14a10 <__assert_fail@plt+0x3804>
   1498c:	ldr	r3, [r8]
   14990:	sub	r4, r6, r4
   14994:	cmp	r3, #0
   14998:	add	r0, r5, r4
   1499c:	bne	149ec <__assert_fail@plt+0x37e0>
   149a0:	add	r4, r4, #8
   149a4:	ldr	r3, [sp, #40]	; 0x28
   149a8:	add	r4, r5, r4
   149ac:	cmp	r3, r4
   149b0:	bcc	14a44 <__assert_fail@plt+0x3838>
   149b4:	ldr	r3, [pc, #240]	; 14aac <__assert_fail@plt+0x38a0>
   149b8:	mov	r1, #8
   149bc:	ldr	r3, [r3]
   149c0:	blx	r3
   149c4:	mov	r2, #6
   149c8:	bl	14244 <__assert_fail@plt+0x3038>
   149cc:	ldr	r3, [r8]
   149d0:	mov	r1, #0
   149d4:	cmp	r3, #0
   149d8:	moveq	r0, #8
   149dc:	movne	r0, #4
   149e0:	adds	r0, r0, r6
   149e4:	adc	r1, r1, r7
   149e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149ec:	add	r4, r4, #4
   149f0:	ldr	r3, [sp, #40]	; 0x28
   149f4:	add	r4, r5, r4
   149f8:	cmp	r3, r4
   149fc:	bcc	14a44 <__assert_fail@plt+0x3838>
   14a00:	ldr	r3, [pc, #164]	; 14aac <__assert_fail@plt+0x38a0>
   14a04:	mov	r1, #4
   14a08:	ldr	r3, [r3]
   14a0c:	b	149c0 <__assert_fail@plt+0x37b4>
   14a10:	ldr	r3, [r8]
   14a14:	mov	r0, r5
   14a18:	cmp	r3, #0
   14a1c:	mov	r2, #5
   14a20:	ldr	r1, [pc, #136]	; 14ab0 <__assert_fail@plt+0x38a4>
   14a24:	movne	r4, #8
   14a28:	moveq	r4, #16
   14a2c:	bl	10f90 <dcgettext@plt>
   14a30:	mov	r1, r4
   14a34:	mov	r2, r0
   14a38:	ldr	r0, [pc, #116]	; 14ab4 <__assert_fail@plt+0x38a8>
   14a3c:	bl	10f24 <printf@plt>
   14a40:	b	149cc <__assert_fail@plt+0x37c0>
   14a44:	mov	r2, #5
   14a48:	ldr	r1, [pc, #104]	; 14ab8 <__assert_fail@plt+0x38ac>
   14a4c:	mov	r0, #0
   14a50:	bl	10f90 <dcgettext@plt>
   14a54:	bl	54dd0 <warn@@Base>
   14a58:	ldr	r3, [r8]
   14a5c:	mov	r2, #5
   14a60:	cmp	r3, #0
   14a64:	ldr	r1, [pc, #80]	; 14abc <__assert_fail@plt+0x38b0>
   14a68:	mov	r0, #0
   14a6c:	movne	r4, #8
   14a70:	moveq	r4, #16
   14a74:	bl	10f90 <dcgettext@plt>
   14a78:	mov	r1, r4
   14a7c:	mov	r2, r0
   14a80:	ldr	r0, [pc, #44]	; 14ab4 <__assert_fail@plt+0x38a8>
   14a84:	bl	10f24 <printf@plt>
   14a88:	mvn	r0, #0
   14a8c:	mov	r1, r0
   14a90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a94:	andeq	r6, r6, ip, lsl r5
   14a98:	strdeq	pc, [r0], -r0
   14a9c:			; <UNDEFINED> instruction: 0x00062fb0
   14aa0:	andeq	fp, r6, ip, ror #2
   14aa4:			; <UNDEFINED> instruction: 0x00062fb8
   14aa8:	andeq	sl, r9, r8, lsr r4
   14aac:	andeq	lr, r9, ip, asr sp
   14ab0:	andeq	r2, r6, r0, asr #31
   14ab4:	andeq	r2, r6, ip, asr #31
   14ab8:	ldrdeq	r2, [r6], -r0
   14abc:	andeq	r3, r6, ip
   14ac0:	push	{r4, r5, r6, r7, r8, lr}
   14ac4:	mov	r8, r0
   14ac8:	ldr	r4, [sp, #24]
   14acc:	ldr	r6, [sp, #28]
   14ad0:	ldr	r0, [pc, #168]	; 14b80 <__assert_fail@plt+0x3974>
   14ad4:	mov	r5, r2
   14ad8:	bl	10f24 <printf@plt>
   14adc:	mov	r1, r6
   14ae0:	mov	r2, #6
   14ae4:	mov	r0, r4
   14ae8:	bl	14244 <__assert_fail@plt+0x3038>
   14aec:	mov	r0, #32
   14af0:	bl	110c8 <putchar@plt>
   14af4:	cmp	r8, #0
   14af8:	ldr	r7, [pc, #132]	; 14b84 <__assert_fail@plt+0x3978>
   14afc:	beq	14b4c <__assert_fail@plt+0x3940>
   14b00:	ldr	r2, [r7]
   14b04:	ldr	r3, [pc, #124]	; 14b88 <__assert_fail@plt+0x397c>
   14b08:	cmp	r2, #0
   14b0c:	sub	r0, r4, r5
   14b10:	add	r0, r8, r0
   14b14:	movne	r1, #4
   14b18:	moveq	r1, #8
   14b1c:	ldr	r3, [r3]
   14b20:	blx	r3
   14b24:	mov	r2, #6
   14b28:	bl	14244 <__assert_fail@plt+0x3038>
   14b2c:	ldr	r3, [r7]
   14b30:	mov	r1, #0
   14b34:	cmp	r3, #0
   14b38:	moveq	r0, #8
   14b3c:	movne	r0, #4
   14b40:	adds	r0, r0, r4
   14b44:	adc	r1, r1, r6
   14b48:	pop	{r4, r5, r6, r7, r8, pc}
   14b4c:	ldr	r3, [r7]
   14b50:	mov	r0, r8
   14b54:	cmp	r3, #0
   14b58:	mov	r2, #5
   14b5c:	ldr	r1, [pc, #40]	; 14b8c <__assert_fail@plt+0x3980>
   14b60:	movne	r5, #8
   14b64:	moveq	r5, #16
   14b68:	bl	10f90 <dcgettext@plt>
   14b6c:	mov	r1, r5
   14b70:	mov	r2, r0
   14b74:	ldr	r0, [pc, #20]	; 14b90 <__assert_fail@plt+0x3984>
   14b78:	bl	10f24 <printf@plt>
   14b7c:	b	14b2c <__assert_fail@plt+0x3920>
   14b80:	andeq	r6, r6, ip, lsl r5
   14b84:	andeq	sl, r9, r8, lsr r4
   14b88:	andeq	lr, r9, ip, asr sp
   14b8c:	andeq	r2, r6, r0, asr #31
   14b90:	andeq	r2, r6, ip, asr #31
   14b94:	push	{r4, r5, r6, lr}
   14b98:	mov	r3, #0
   14b9c:	ldr	r4, [pc, #272]	; 14cb4 <__assert_fail@plt+0x3aa8>
   14ba0:	subs	r5, r0, #0
   14ba4:	strb	r3, [r4, #364]	; 0x16c
   14ba8:	beq	14c88 <__assert_fail@plt+0x3a7c>
   14bac:	tst	r5, #1
   14bb0:	and	r3, r5, #2
   14bb4:	bne	14c3c <__assert_fail@plt+0x3a30>
   14bb8:	cmp	r3, #0
   14bbc:	bne	14c5c <__assert_fail@plt+0x3a50>
   14bc0:	add	r4, r4, #364	; 0x16c
   14bc4:	tst	r5, #4
   14bc8:	beq	14c08 <__assert_fail@plt+0x39fc>
   14bcc:	ldr	r0, [pc, #228]	; 14cb8 <__assert_fail@plt+0x3aac>
   14bd0:	bl	11080 <strlen@plt>
   14bd4:	tst	r5, #3
   14bd8:	ldrne	r1, [pc, #220]	; 14cbc <__assert_fail@plt+0x3ab0>
   14bdc:	add	r3, r4, r0
   14be0:	mov	r2, r0
   14be4:	addne	r3, r0, #3
   14be8:	ldrne	r0, [r1]
   14bec:	addne	r3, r4, r3
   14bf0:	strne	r0, [r4, r2]
   14bf4:	ldr	r2, [pc, #196]	; 14cc0 <__assert_fail@plt+0x3ab4>
   14bf8:	ldrb	r1, [r2, #4]
   14bfc:	ldr	r0, [r2]
   14c00:	strb	r1, [r3, #4]
   14c04:	str	r0, [r3]
   14c08:	bics	r3, r5, #7
   14c0c:	beq	14c34 <__assert_fail@plt+0x3a28>
   14c10:	tst	r5, #7
   14c14:	bne	14c98 <__assert_fail@plt+0x3a8c>
   14c18:	ldr	r1, [pc, #164]	; 14cc4 <__assert_fail@plt+0x3ab8>
   14c1c:	mov	r2, #5
   14c20:	mov	r0, #0
   14c24:	bl	10f90 <dcgettext@plt>
   14c28:	mov	r1, r0
   14c2c:	ldr	r0, [pc, #132]	; 14cb8 <__assert_fail@plt+0x3aac>
   14c30:	bl	10fd8 <strcat@plt>
   14c34:	mov	r0, r4
   14c38:	pop	{r4, r5, r6, pc}
   14c3c:	ldr	r2, [pc, #132]	; 14cc8 <__assert_fail@plt+0x3abc>
   14c40:	cmp	r3, #0
   14c44:	ldm	r2, {r0, r1}
   14c48:	str	r0, [r4, #364]	; 0x16c
   14c4c:	strb	r1, [r4, #368]	; 0x170
   14c50:	beq	14bc0 <__assert_fail@plt+0x39b4>
   14c54:	ldr	r3, [pc, #112]	; 14ccc <__assert_fail@plt+0x3ac0>
   14c58:	str	r3, [r4, #368]	; 0x170
   14c5c:	ldr	r4, [pc, #84]	; 14cb8 <__assert_fail@plt+0x3aac>
   14c60:	mov	r0, r4
   14c64:	bl	11080 <strlen@plt>
   14c68:	ldr	r2, [pc, #96]	; 14cd0 <__assert_fail@plt+0x3ac4>
   14c6c:	mov	r3, r0
   14c70:	add	r1, r4, r0
   14c74:	ldr	r0, [r2]
   14c78:	ldrb	r2, [r2, #4]
   14c7c:	str	r0, [r4, r3]
   14c80:	strb	r2, [r1, #4]
   14c84:	b	14bc4 <__assert_fail@plt+0x39b8>
   14c88:	mov	r2, #5
   14c8c:	ldr	r1, [pc, #64]	; 14cd4 <__assert_fail@plt+0x3ac8>
   14c90:	pop	{r4, r5, r6, lr}
   14c94:	b	10f90 <dcgettext@plt>
   14c98:	ldr	r0, [pc, #24]	; 14cb8 <__assert_fail@plt+0x3aac>
   14c9c:	bl	11080 <strlen@plt>
   14ca0:	ldr	r2, [pc, #20]	; 14cbc <__assert_fail@plt+0x3ab0>
   14ca4:	mov	r3, r0
   14ca8:	ldr	r0, [r2]
   14cac:	str	r0, [r4, r3]
   14cb0:	b	14c18 <__assert_fail@plt+0x3a0c>
   14cb4:	andeq	sl, r9, r8, lsr r4
   14cb8:	andeq	sl, r9, r4, lsr #11
   14cbc:	andeq	r3, r6, r8, lsr #32
   14cc0:	andeq	r4, r6, ip, asr #18
   14cc4:	andeq	r2, r6, r0, asr #31
   14cc8:			; <UNDEFINED> instruction: 0x00077ab8
   14ccc:	eoreq	r7, r0, r0, lsr #24
   14cd0:	andeq	r3, r6, r0, lsr #32
   14cd4:	andeq	r3, r6, r8, lsl r0
   14cd8:	ldr	r3, [pc, #120]	; 14d58 <__assert_fail@plt+0x3b4c>
   14cdc:	ldr	r2, [pc, #120]	; 14d5c <__assert_fail@plt+0x3b50>
   14ce0:	adds	r0, r0, r3
   14ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   14ce8:	adc	r1, r1, r2
   14cec:	sub	sp, sp, #28
   14cf0:	add	r3, pc, #88	; 0x58
   14cf4:	ldrd	r2, [r3]
   14cf8:	bl	58b2c <warn@@Base+0x3d5c>
   14cfc:	str	r0, [sp, #20]
   14d00:	add	r0, sp, #20
   14d04:	bl	110ec <gmtime@plt>
   14d08:	mov	ip, r0
   14d0c:	ldr	r0, [pc, #76]	; 14d60 <__assert_fail@plt+0x3b54>
   14d10:	ldr	lr, [ip]
   14d14:	ldr	r3, [ip, #12]
   14d18:	ldr	r2, [ip, #16]
   14d1c:	ldr	r1, [ip, #20]
   14d20:	str	lr, [sp, #8]
   14d24:	ldr	lr, [ip, #4]
   14d28:	add	r1, r1, #1888	; 0x760
   14d2c:	str	lr, [sp, #4]
   14d30:	ldr	ip, [ip, #8]
   14d34:	add	r2, r2, #1
   14d38:	add	r1, r1, #12
   14d3c:	str	ip, [sp]
   14d40:	bl	10f24 <printf@plt>
   14d44:	add	sp, sp, #28
   14d48:	pop	{pc}		; (ldr pc, [sp], #4)
   14d4c:	nop			; (mov r0, r0)
   14d50:	addseq	r9, r8, r0, lsl #13
   14d54:	andeq	r0, r0, r0
   14d58:	ldrlt	ip, [r4], #-0
   14d5c:			; <UNDEFINED> instruction: 0xff836a98
   14d60:	andeq	r3, r6, ip, lsr #32
   14d64:	push	{r4, r5, r6, r7, r8, lr}
   14d68:	subs	r4, r0, #0
   14d6c:	popeq	{r4, r5, r6, r7, r8, pc}
   14d70:	ldr	r6, [pc, #84]	; 14dcc <__assert_fail@plt+0x3bc0>
   14d74:	ldr	r8, [pc, #84]	; 14dd0 <__assert_fail@plt+0x3bc4>
   14d78:	ldr	r7, [pc, #84]	; 14dd4 <__assert_fail@plt+0x3bc8>
   14d7c:	mov	r5, #11
   14d80:	b	14d90 <__assert_fail@plt+0x3b84>
   14d84:	lsrs	r4, r4, #1
   14d88:	popeq	{r4, r5, r6, r7, r8, pc}
   14d8c:	sub	r5, r5, #1
   14d90:	tst	r4, #1
   14d94:	beq	14d84 <__assert_fail@plt+0x3b78>
   14d98:	add	r3, r8, r5, lsl #2
   14d9c:	ldr	r1, [r6]
   14da0:	ldr	r0, [r3, #4]
   14da4:	bl	111c4 <fputs@plt>
   14da8:	cmp	r4, #1
   14dac:	mov	r2, #2
   14db0:	mov	r1, #1
   14db4:	mov	r0, r7
   14db8:	popeq	{r4, r5, r6, r7, r8, pc}
   14dbc:	ldr	r3, [r6]
   14dc0:	lsr	r4, r4, r1
   14dc4:	bl	10fcc <fwrite@plt>
   14dc8:	b	14d8c <__assert_fail@plt+0x3b80>
   14dcc:	andeq	sl, r9, ip, lsr #8
   14dd0:	strdeq	r8, [r5], -ip
   14dd4:			; <UNDEFINED> instruction: 0x00068eb8
   14dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ddc:	subs	fp, r0, #0
   14de0:	sub	sp, sp, #28
   14de4:	mov	r6, r1
   14de8:	blt	14f00 <__assert_fail@plt+0x3cf4>
   14dec:	moveq	r0, fp
   14df0:	beq	14ec8 <__assert_fail@plt+0x3cbc>
   14df4:	mov	r3, #0
   14df8:	str	r3, [sp, #4]
   14dfc:	ldr	r2, [pc, #292]	; 14f28 <__assert_fail@plt+0x3d1c>
   14e00:	mov	r3, #0
   14e04:	ldr	r9, [pc, #288]	; 14f2c <__assert_fail@plt+0x3d20>
   14e08:	ldr	r2, [r2]
   14e0c:	ldr	sl, [pc, #284]	; 14f30 <__assert_fail@plt+0x3d24>
   14e10:	cmp	r2, r3
   14e14:	ldr	r8, [pc, #280]	; 14f34 <__assert_fail@plt+0x3d28>
   14e18:	moveq	r5, fp
   14e1c:	mvnne	r5, #-2147483648	; 0x80000000
   14e20:	mov	r7, r3
   14e24:	str	r3, [sp, #16]
   14e28:	str	r3, [sp, #20]
   14e2c:	b	14e50 <__assert_fail@plt+0x3c44>
   14e30:	cmp	r5, #1
   14e34:	beq	14eac <__assert_fail@plt+0x3ca0>
   14e38:	bl	10f24 <printf@plt>
   14e3c:	sub	r5, r5, #2
   14e40:	add	r7, r7, #2
   14e44:	mov	r6, r4
   14e48:	cmp	r5, #0
   14e4c:	beq	14eac <__assert_fail@plt+0x3ca0>
   14e50:	mov	r4, r6
   14e54:	mov	r0, r8
   14e58:	ldrb	r3, [r4], #1
   14e5c:	cmp	r3, #0
   14e60:	lsl	r2, r3, #1
   14e64:	add	r1, r3, #64	; 0x40
   14e68:	beq	14eac <__assert_fail@plt+0x3ca0>
   14e6c:	ldrh	r2, [r9, r2]
   14e70:	tst	r2, #2
   14e74:	bne	14e30 <__assert_fail@plt+0x3c24>
   14e78:	tst	r2, #16
   14e7c:	mov	r1, r6
   14e80:	mov	r0, sl
   14e84:	sub	r5, r5, #1
   14e88:	add	r7, r7, #1
   14e8c:	beq	14ed0 <__assert_fail@plt+0x3cc4>
   14e90:	ldr	r2, [pc, #160]	; 14f38 <__assert_fail@plt+0x3d2c>
   14e94:	mov	r0, r3
   14e98:	mov	r6, r4
   14e9c:	ldr	r1, [r2]
   14ea0:	bl	11158 <putc@plt>
   14ea4:	cmp	r5, #0
   14ea8:	bne	14e50 <__assert_fail@plt+0x3c44>
   14eac:	ldr	r3, [sp, #4]
   14eb0:	cmp	r7, fp
   14eb4:	movge	r3, #0
   14eb8:	andlt	r3, r3, #1
   14ebc:	cmp	r3, #0
   14ec0:	bne	14f10 <__assert_fail@plt+0x3d04>
   14ec4:	mov	r0, r7
   14ec8:	add	sp, sp, #28
   14ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ed0:	bl	10f24 <printf@plt>
   14ed4:	bl	10fe4 <__ctype_get_mb_cur_max@plt>
   14ed8:	mov	r1, r6
   14edc:	add	r3, sp, #16
   14ee0:	mov	r2, r0
   14ee4:	add	r0, sp, #12
   14ee8:	bl	11008 <mbrtowc@plt>
   14eec:	sub	r3, r0, #1
   14ef0:	cmn	r3, #4
   14ef4:	addls	r6, r6, r0
   14ef8:	movhi	r6, r4
   14efc:	b	14e48 <__assert_fail@plt+0x3c3c>
   14f00:	mov	r3, #1
   14f04:	rsb	fp, fp, #0
   14f08:	str	r3, [sp, #4]
   14f0c:	b	14dfc <__assert_fail@plt+0x3bf0>
   14f10:	sub	r1, fp, r7
   14f14:	ldr	r2, [pc, #32]	; 14f3c <__assert_fail@plt+0x3d30>
   14f18:	ldr	r0, [pc, #32]	; 14f40 <__assert_fail@plt+0x3d34>
   14f1c:	bl	10f24 <printf@plt>
   14f20:	mov	r7, fp
   14f24:	b	14ec4 <__assert_fail@plt+0x3cb8>
   14f28:	andeq	lr, r9, r8, lsr #26
   14f2c:	andeq	r7, r8, r8, ror #25
   14f30:	andeq	r3, r6, r0, asr r0
   14f34:	andeq	r3, r6, ip, asr #32
   14f38:	andeq	sl, r9, ip, lsr #8
   14f3c:	andeq	r8, r6, ip, ror ip
   14f40:	andeq	r3, r6, r8, asr r0
   14f44:	ldr	ip, [r1]
   14f48:	cmp	ip, r2
   14f4c:	bls	14f58 <__assert_fail@plt+0x3d4c>
   14f50:	mov	r0, #1
   14f54:	bx	lr
   14f58:	push	{r4, r5, r6, r7, lr}
   14f5c:	mov	r4, r1
   14f60:	sub	sp, sp, #12
   14f64:	mov	r5, r2
   14f68:	mov	r6, r3
   14f6c:	mov	r7, r0
   14f70:	mov	r3, r2
   14f74:	mov	r0, ip
   14f78:	mov	r2, #0
   14f7c:	add	r1, sp, #4
   14f80:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   14f84:	ldr	r3, [r4]
   14f88:	ldr	r2, [sp, #4]
   14f8c:	add	r3, r3, r2
   14f90:	cmp	r3, r5
   14f94:	str	r3, [r4]
   14f98:	bhi	14ff0 <__assert_fail@plt+0x3de4>
   14f9c:	ldr	r2, [sp, #32]
   14fa0:	add	r3, r6, r0
   14fa4:	cmp	r3, r2
   14fa8:	str	r3, [r7]
   14fac:	bcs	14ff0 <__assert_fail@plt+0x3de4>
   14fb0:	ldrb	r0, [r6, r0]
   14fb4:	cmp	r0, #0
   14fb8:	beq	14ff4 <__assert_fail@plt+0x3de8>
   14fbc:	sub	r0, r0, #32
   14fc0:	cmp	r0, #94	; 0x5e
   14fc4:	bhi	14ffc <__assert_fail@plt+0x3df0>
   14fc8:	sub	r1, r2, #1
   14fcc:	b	14fe8 <__assert_fail@plt+0x3ddc>
   14fd0:	ldrb	r0, [r3, #1]!
   14fd4:	cmp	r0, #0
   14fd8:	sub	r2, r0, #32
   14fdc:	beq	14ff4 <__assert_fail@plt+0x3de8>
   14fe0:	cmp	r2, #94	; 0x5e
   14fe4:	bhi	14ffc <__assert_fail@plt+0x3df0>
   14fe8:	cmp	r3, r1
   14fec:	bne	14fd0 <__assert_fail@plt+0x3dc4>
   14ff0:	mov	r0, #1
   14ff4:	add	sp, sp, #12
   14ff8:	pop	{r4, r5, r6, r7, pc}
   14ffc:	mov	r0, #2
   15000:	add	sp, sp, #12
   15004:	pop	{r4, r5, r6, r7, pc}
   15008:	push	{r4, r5, r6, lr}
   1500c:	subs	r6, r0, #0
   15010:	sub	sp, sp, #8
   15014:	mov	r4, r1
   15018:	mov	r5, r2
   1501c:	ble	1502c <__assert_fail@plt+0x3e20>
   15020:	mov	r1, r6
   15024:	ldr	r0, [pc, #224]	; 1510c <__assert_fail@plt+0x3f00>
   15028:	bl	10f24 <printf@plt>
   1502c:	cmp	r4, r5
   15030:	bcs	150bc <__assert_fail@plt+0x3eb0>
   15034:	ands	r2, r6, #1
   15038:	bne	15078 <__assert_fail@plt+0x3e6c>
   1503c:	mov	r3, r5
   15040:	mov	r0, r4
   15044:	add	r1, sp, #4
   15048:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   1504c:	ldr	r3, [sp, #4]
   15050:	add	r4, r4, r3
   15054:	mov	r2, r0
   15058:	mov	r1, r0
   1505c:	ldr	r0, [pc, #172]	; 15110 <__assert_fail@plt+0x3f04>
   15060:	bl	10f24 <printf@plt>
   15064:	cmp	r4, r5
   15068:	bhi	150f8 <__assert_fail@plt+0x3eec>
   1506c:	mov	r0, r4
   15070:	add	sp, sp, #8
   15074:	pop	{r4, r5, r6, pc}
   15078:	ldr	r3, [pc, #148]	; 15114 <__assert_fail@plt+0x3f08>
   1507c:	sub	r6, r5, r4
   15080:	sub	r6, r6, #1
   15084:	ldr	r1, [r3]
   15088:	mov	r0, #34	; 0x22
   1508c:	bl	11158 <putc@plt>
   15090:	cmp	r6, #0
   15094:	bne	150d4 <__assert_fail@plt+0x3ec8>
   15098:	mov	r2, #5
   1509c:	ldr	r1, [pc, #116]	; 15118 <__assert_fail@plt+0x3f0c>
   150a0:	mov	r0, r6
   150a4:	bl	10f90 <dcgettext@plt>
   150a8:	bl	10f24 <printf@plt>
   150ac:	mov	r4, r5
   150b0:	ldr	r0, [pc, #100]	; 1511c <__assert_fail@plt+0x3f10>
   150b4:	bl	11014 <puts@plt>
   150b8:	b	15064 <__assert_fail@plt+0x3e58>
   150bc:	mov	r2, #5
   150c0:	ldr	r1, [pc, #88]	; 15120 <__assert_fail@plt+0x3f14>
   150c4:	mov	r0, #0
   150c8:	bl	10f90 <dcgettext@plt>
   150cc:	bl	54dd0 <warn@@Base>
   150d0:	b	15064 <__assert_fail@plt+0x3e58>
   150d4:	mov	r1, r4
   150d8:	mov	r0, r6
   150dc:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   150e0:	mov	r0, r4
   150e4:	mov	r1, r6
   150e8:	bl	11104 <strnlen@plt>
   150ec:	add	r0, r0, #1
   150f0:	add	r4, r4, r0
   150f4:	b	150b0 <__assert_fail@plt+0x3ea4>
   150f8:	ldr	r3, [pc, #36]	; 15124 <__assert_fail@plt+0x3f18>
   150fc:	ldr	r2, [pc, #36]	; 15128 <__assert_fail@plt+0x3f1c>
   15100:	ldr	r1, [pc, #36]	; 1512c <__assert_fail@plt+0x3f20>
   15104:	ldr	r0, [pc, #36]	; 15130 <__assert_fail@plt+0x3f24>
   15108:	bl	1120c <__assert_fail@plt>
   1510c:	andeq	r3, r6, r0, rrx
   15110:	andeq	r3, r6, r0, lsr #1
   15114:	andeq	sl, r9, ip, lsr #8
   15118:	andeq	r3, r6, r4, lsl #1
   1511c:	muleq	r6, ip, r0
   15120:	andeq	r3, r6, r4, ror r0
   15124:	andeq	r8, r5, ip, lsr lr
   15128:	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   1512c:	andeq	r2, r6, r8, asr pc
   15130:	strheq	r3, [r6], -r0
   15134:	subs	ip, r1, #0
   15138:	bne	15144 <__assert_fail@plt+0x3f38>
   1513c:	mov	r0, r2
   15140:	bx	lr
   15144:	mov	r1, r0
   15148:	mov	r0, ip
   1514c:	b	15008 <__assert_fail@plt+0x3dfc>
   15150:	push	{r4, r5, r6, lr}
   15154:	sub	sp, sp, #8
   15158:	mov	r3, r1
   1515c:	mov	r2, #0
   15160:	mov	r4, r1
   15164:	add	r1, sp, #4
   15168:	mov	r5, r0
   1516c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15170:	ldr	r2, [sp, #4]
   15174:	add	r5, r5, r2
   15178:	sub	r3, r0, #4
   1517c:	cmp	r3, #63	; 0x3f
   15180:	ldrls	pc, [pc, r3, lsl #2]
   15184:	b	155fc <__assert_fail@plt+0x43f0>
   15188:			; <UNDEFINED> instruction: 0x000152bc
   1518c:	strdeq	r5, [r1], -ip
   15190:	andeq	r5, r1, r4, lsl r3
   15194:	strdeq	r5, [r1], -ip
   15198:	andeq	r5, r1, ip, ror #6
   1519c:	strdeq	r5, [r1], -ip
   151a0:			; <UNDEFINED> instruction: 0x000153bc
   151a4:	strdeq	r5, [r1], -ip
   151a8:	andeq	r5, r1, r4, asr r5
   151ac:	strdeq	r5, [r1], -ip
   151b0:	andeq	r5, r1, r4, lsr #11
   151b4:	strdeq	r5, [r1], -ip
   151b8:	strdeq	r5, [r1], -r0
   151bc:	strdeq	r5, [r1], -ip
   151c0:	andeq	r5, r1, r0, asr #8
   151c4:	strdeq	r5, [r1], -ip
   151c8:	muleq	r1, r8, r4
   151cc:	strdeq	r5, [r1], -ip
   151d0:	strdeq	r5, [r1], -ip
   151d4:	strdeq	r5, [r1], -ip
   151d8:	strdeq	r5, [r1], -ip
   151dc:	strdeq	r5, [r1], -ip
   151e0:	strdeq	r5, [r1], -ip
   151e4:	strdeq	r5, [r1], -ip
   151e8:	strdeq	r5, [r1], -ip
   151ec:	strdeq	r5, [r1], -ip
   151f0:	strdeq	r5, [r1], -ip
   151f4:	strdeq	r5, [r1], -ip
   151f8:	andeq	r5, r1, r0, ror #9
   151fc:	strdeq	r5, [r1], -ip
   15200:	strdeq	r5, [r1], -ip
   15204:	strdeq	r5, [r1], -ip
   15208:	strdeq	r5, [r1], -ip
   1520c:	strdeq	r5, [r1], -ip
   15210:	strdeq	r5, [r1], -ip
   15214:	strdeq	r5, [r1], -ip
   15218:	strdeq	r5, [r1], -ip
   1521c:	strdeq	r5, [r1], -ip
   15220:	strdeq	r5, [r1], -ip
   15224:	strdeq	r5, [r1], -ip
   15228:	strdeq	r5, [r1], -ip
   1522c:	strdeq	r5, [r1], -ip
   15230:	strdeq	r5, [r1], -ip
   15234:	strdeq	r5, [r1], -ip
   15238:	strdeq	r5, [r1], -ip
   1523c:	strdeq	r5, [r1], -ip
   15240:	strdeq	r5, [r1], -ip
   15244:	strdeq	r5, [r1], -ip
   15248:	strdeq	r5, [r1], -ip
   1524c:	strdeq	r5, [r1], -ip
   15250:	strdeq	r5, [r1], -ip
   15254:	strdeq	r5, [r1], -ip
   15258:	strdeq	r5, [r1], -ip
   1525c:	strdeq	r5, [r1], -ip
   15260:	strdeq	r5, [r1], -ip
   15264:	strdeq	r5, [r1], -ip
   15268:	strdeq	r5, [r1], -ip
   1526c:	strdeq	r5, [r1], -ip
   15270:	strdeq	r5, [r1], -ip
   15274:	strdeq	r5, [r1], -ip
   15278:	strdeq	r5, [r1], -ip
   1527c:	strdeq	r5, [r1], -ip
   15280:	strdeq	r5, [r1], -ip
   15284:	andeq	r5, r1, r8, lsl #5
   15288:	ldr	r0, [pc, #1248]	; 15770 <__assert_fail@plt+0x4564>
   1528c:	bl	10f24 <printf@plt>
   15290:	sub	r3, r4, #1
   15294:	cmp	r5, r3
   15298:	bcc	1563c <__assert_fail@plt+0x4430>
   1529c:	mov	r2, #5
   152a0:	ldr	r1, [pc, #1228]	; 15774 <__assert_fail@plt+0x4568>
   152a4:	mov	r0, #0
   152a8:	bl	10f90 <dcgettext@plt>
   152ac:	bl	10f24 <printf@plt>
   152b0:	ldr	r0, [pc, #1216]	; 15778 <__assert_fail@plt+0x456c>
   152b4:	bl	11014 <puts@plt>
   152b8:	b	15360 <__assert_fail@plt+0x4154>
   152bc:	mov	r3, r4
   152c0:	add	r1, sp, #4
   152c4:	mov	r2, #0
   152c8:	mov	r0, r5
   152cc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   152d0:	ldr	r4, [sp, #4]
   152d4:	add	r4, r5, r4
   152d8:	mov	r6, r0
   152dc:	ldr	r0, [pc, #1176]	; 1577c <__assert_fail@plt+0x4570>
   152e0:	bl	10f24 <printf@plt>
   152e4:	cmp	r6, #8
   152e8:	ldrls	pc, [pc, r6, lsl #2]
   152ec:	b	15354 <__assert_fail@plt+0x4148>
   152f0:	andeq	r5, r1, r8, ror #12
   152f4:			; <UNDEFINED> instruction: 0x000156bc
   152f8:	andeq	r5, r1, r4, asr r3
   152fc:			; <UNDEFINED> instruction: 0x000156b0
   15300:	andeq	r5, r1, r4, lsr #13
   15304:	andeq	r5, r1, r4, asr r3
   15308:	muleq	r1, r8, r6
   1530c:	andeq	r5, r1, ip, lsl #13
   15310:	andeq	r5, r1, r0, lsl #13
   15314:	mov	r3, r4
   15318:	mov	r2, #0
   1531c:	add	r1, sp, #4
   15320:	mov	r0, r5
   15324:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15328:	ldr	r4, [sp, #4]
   1532c:	add	r4, r5, r4
   15330:	mov	r6, r0
   15334:	ldr	r0, [pc, #1092]	; 15780 <__assert_fail@plt+0x4574>
   15338:	bl	10f24 <printf@plt>
   1533c:	cmp	r6, #1
   15340:	beq	15728 <__assert_fail@plt+0x451c>
   15344:	cmp	r6, #2
   15348:	beq	15710 <__assert_fail@plt+0x4504>
   1534c:	cmp	r6, #0
   15350:	beq	156f8 <__assert_fail@plt+0x44ec>
   15354:	mov	r1, r6
   15358:	ldr	r0, [pc, #1060]	; 15784 <__assert_fail@plt+0x4578>
   1535c:	bl	10f24 <printf@plt>
   15360:	mov	r0, r4
   15364:	add	sp, sp, #8
   15368:	pop	{r4, r5, r6, pc}
   1536c:	mov	r3, r4
   15370:	mov	r2, #0
   15374:	add	r1, sp, #4
   15378:	mov	r0, r5
   1537c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15380:	ldr	r4, [sp, #4]
   15384:	add	r4, r5, r4
   15388:	mov	r6, r0
   1538c:	ldr	r0, [pc, #1012]	; 15788 <__assert_fail@plt+0x457c>
   15390:	bl	10f24 <printf@plt>
   15394:	cmp	r6, #0
   15398:	beq	15480 <__assert_fail@plt+0x4274>
   1539c:	cmp	r6, #1
   153a0:	bne	15354 <__assert_fail@plt+0x4148>
   153a4:	mov	r2, #5
   153a8:	ldr	r1, [pc, #988]	; 1578c <__assert_fail@plt+0x4580>
   153ac:	mov	r0, #0
   153b0:	bl	10f90 <dcgettext@plt>
   153b4:	bl	10f24 <printf@plt>
   153b8:	b	15360 <__assert_fail@plt+0x4154>
   153bc:	mov	r3, r4
   153c0:	mov	r2, #0
   153c4:	add	r1, sp, #4
   153c8:	mov	r0, r5
   153cc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   153d0:	ldr	r4, [sp, #4]
   153d4:	add	r4, r5, r4
   153d8:	mov	r6, r0
   153dc:	ldr	r0, [pc, #940]	; 15790 <__assert_fail@plt+0x4584>
   153e0:	bl	10f24 <printf@plt>
   153e4:	cmp	r6, #0
   153e8:	bne	1539c <__assert_fail@plt+0x4190>
   153ec:	b	15480 <__assert_fail@plt+0x4274>
   153f0:	mov	r3, r4
   153f4:	mov	r2, #0
   153f8:	add	r1, sp, #4
   153fc:	mov	r0, r5
   15400:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15404:	ldr	r4, [sp, #4]
   15408:	add	r4, r5, r4
   1540c:	mov	r6, r0
   15410:	ldr	r0, [pc, #892]	; 15794 <__assert_fail@plt+0x4588>
   15414:	bl	10f24 <printf@plt>
   15418:	cmp	r6, #0
   1541c:	beq	156e0 <__assert_fail@plt+0x44d4>
   15420:	cmp	r6, #1
   15424:	bne	15354 <__assert_fail@plt+0x4148>
   15428:	mov	r2, #5
   1542c:	ldr	r1, [pc, #868]	; 15798 <__assert_fail@plt+0x458c>
   15430:	mov	r0, #0
   15434:	bl	10f90 <dcgettext@plt>
   15438:	bl	10f24 <printf@plt>
   1543c:	b	15360 <__assert_fail@plt+0x4154>
   15440:	mov	r3, r4
   15444:	mov	r2, #0
   15448:	add	r1, sp, #4
   1544c:	mov	r0, r5
   15450:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15454:	ldr	r4, [sp, #4]
   15458:	add	r4, r5, r4
   1545c:	mov	r6, r0
   15460:	ldr	r0, [pc, #820]	; 1579c <__assert_fail@plt+0x4590>
   15464:	bl	10f24 <printf@plt>
   15468:	cmp	r6, #1
   1546c:	beq	154c8 <__assert_fail@plt+0x42bc>
   15470:	cmp	r6, #2
   15474:	beq	153a4 <__assert_fail@plt+0x4198>
   15478:	cmp	r6, #0
   1547c:	bne	15354 <__assert_fail@plt+0x4148>
   15480:	mov	r2, #5
   15484:	ldr	r1, [pc, #788]	; 157a0 <__assert_fail@plt+0x4594>
   15488:	mov	r0, r6
   1548c:	bl	10f90 <dcgettext@plt>
   15490:	bl	10f24 <printf@plt>
   15494:	b	15360 <__assert_fail@plt+0x4154>
   15498:	mov	r3, r4
   1549c:	mov	r2, #0
   154a0:	add	r1, sp, #4
   154a4:	mov	r0, r5
   154a8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   154ac:	ldr	r4, [sp, #4]
   154b0:	add	r4, r5, r4
   154b4:	mov	r6, r0
   154b8:	ldr	r0, [pc, #740]	; 157a4 <__assert_fail@plt+0x4598>
   154bc:	bl	10f24 <printf@plt>
   154c0:	cmp	r6, #1
   154c4:	bne	15470 <__assert_fail@plt+0x4264>
   154c8:	mov	r2, #5
   154cc:	ldr	r1, [pc, #724]	; 157a8 <__assert_fail@plt+0x459c>
   154d0:	mov	r0, #0
   154d4:	bl	10f90 <dcgettext@plt>
   154d8:	bl	10f24 <printf@plt>
   154dc:	b	15360 <__assert_fail@plt+0x4154>
   154e0:	mov	r2, #0
   154e4:	mov	r3, r4
   154e8:	mov	r0, r5
   154ec:	add	r1, sp, #4
   154f0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   154f4:	ldr	r3, [sp, #4]
   154f8:	add	r5, r5, r3
   154fc:	mov	r6, r0
   15500:	ldr	r0, [pc, #676]	; 157ac <__assert_fail@plt+0x45a0>
   15504:	bl	10f24 <printf@plt>
   15508:	mov	r2, #5
   1550c:	ldr	r1, [pc, #668]	; 157b0 <__assert_fail@plt+0x45a4>
   15510:	mov	r0, #0
   15514:	bl	10f90 <dcgettext@plt>
   15518:	mov	r1, r6
   1551c:	bl	10f24 <printf@plt>
   15520:	sub	r3, r4, #1
   15524:	cmp	r5, r3
   15528:	bcc	15610 <__assert_fail@plt+0x4404>
   1552c:	mov	r2, #5
   15530:	ldr	r1, [pc, #572]	; 15774 <__assert_fail@plt+0x4568>
   15534:	mov	r0, #0
   15538:	bl	10f90 <dcgettext@plt>
   1553c:	bl	10f24 <printf@plt>
   15540:	ldr	r3, [pc, #620]	; 157b4 <__assert_fail@plt+0x45a8>
   15544:	mov	r0, #10
   15548:	ldr	r1, [r3]
   1554c:	bl	11158 <putc@plt>
   15550:	b	15360 <__assert_fail@plt+0x4154>
   15554:	mov	r3, r4
   15558:	mov	r2, #0
   1555c:	add	r1, sp, #4
   15560:	mov	r0, r5
   15564:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15568:	ldr	r4, [sp, #4]
   1556c:	add	r4, r5, r4
   15570:	mov	r6, r0
   15574:	ldr	r0, [pc, #572]	; 157b8 <__assert_fail@plt+0x45ac>
   15578:	bl	10f24 <printf@plt>
   1557c:	cmp	r6, #0
   15580:	beq	156c8 <__assert_fail@plt+0x44bc>
   15584:	cmp	r6, #1
   15588:	bne	15354 <__assert_fail@plt+0x4148>
   1558c:	mov	r2, #5
   15590:	ldr	r1, [pc, #548]	; 157bc <__assert_fail@plt+0x45b0>
   15594:	mov	r0, #0
   15598:	bl	10f90 <dcgettext@plt>
   1559c:	bl	10f24 <printf@plt>
   155a0:	b	15360 <__assert_fail@plt+0x4154>
   155a4:	mov	r3, r4
   155a8:	mov	r2, #0
   155ac:	add	r1, sp, #4
   155b0:	mov	r0, r5
   155b4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   155b8:	ldr	r4, [sp, #4]
   155bc:	add	r4, r5, r4
   155c0:	mov	r6, r0
   155c4:	ldr	r0, [pc, #500]	; 157c0 <__assert_fail@plt+0x45b4>
   155c8:	bl	10f24 <printf@plt>
   155cc:	cmp	r6, #1
   155d0:	beq	15758 <__assert_fail@plt+0x454c>
   155d4:	cmp	r6, #2
   155d8:	beq	15740 <__assert_fail@plt+0x4534>
   155dc:	cmp	r6, #0
   155e0:	bne	15354 <__assert_fail@plt+0x4148>
   155e4:	mov	r2, #5
   155e8:	ldr	r1, [pc, #468]	; 157c4 <__assert_fail@plt+0x45b8>
   155ec:	mov	r0, r6
   155f0:	bl	10f90 <dcgettext@plt>
   155f4:	bl	10f24 <printf@plt>
   155f8:	b	15360 <__assert_fail@plt+0x4154>
   155fc:	mov	r2, r4
   15600:	mov	r1, r5
   15604:	bl	15008 <__assert_fail@plt+0x3dfc>
   15608:	mov	r4, r0
   1560c:	b	15360 <__assert_fail@plt+0x4154>
   15610:	sub	r4, r4, r5
   15614:	sub	r4, r4, #1
   15618:	mov	r0, r4
   1561c:	mov	r1, r5
   15620:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   15624:	mov	r1, r4
   15628:	mov	r0, r5
   1562c:	bl	11104 <strnlen@plt>
   15630:	add	r4, r0, #1
   15634:	add	r4, r5, r4
   15638:	b	15540 <__assert_fail@plt+0x4334>
   1563c:	sub	r4, r4, r5
   15640:	sub	r4, r4, #1
   15644:	mov	r0, r4
   15648:	mov	r1, r5
   1564c:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   15650:	mov	r1, r4
   15654:	mov	r0, r5
   15658:	bl	11104 <strnlen@plt>
   1565c:	add	r4, r0, #1
   15660:	add	r4, r5, r4
   15664:	b	152b0 <__assert_fail@plt+0x40a4>
   15668:	mov	r2, #5
   1566c:	ldr	r1, [pc, #340]	; 157c8 <__assert_fail@plt+0x45bc>
   15670:	mov	r0, #0
   15674:	bl	10f90 <dcgettext@plt>
   15678:	bl	10f24 <printf@plt>
   1567c:	b	15360 <__assert_fail@plt+0x4154>
   15680:	ldr	r0, [pc, #324]	; 157cc <__assert_fail@plt+0x45c0>
   15684:	bl	11014 <puts@plt>
   15688:	b	15360 <__assert_fail@plt+0x4154>
   1568c:	ldr	r0, [pc, #316]	; 157d0 <__assert_fail@plt+0x45c4>
   15690:	bl	11014 <puts@plt>
   15694:	b	15360 <__assert_fail@plt+0x4154>
   15698:	ldr	r0, [pc, #308]	; 157d4 <__assert_fail@plt+0x45c8>
   1569c:	bl	11014 <puts@plt>
   156a0:	b	15360 <__assert_fail@plt+0x4154>
   156a4:	ldr	r0, [pc, #300]	; 157d8 <__assert_fail@plt+0x45cc>
   156a8:	bl	11014 <puts@plt>
   156ac:	b	15360 <__assert_fail@plt+0x4154>
   156b0:	ldr	r0, [pc, #292]	; 157dc <__assert_fail@plt+0x45d0>
   156b4:	bl	11014 <puts@plt>
   156b8:	b	15360 <__assert_fail@plt+0x4154>
   156bc:	ldr	r0, [pc, #284]	; 157e0 <__assert_fail@plt+0x45d4>
   156c0:	bl	11014 <puts@plt>
   156c4:	b	15360 <__assert_fail@plt+0x4154>
   156c8:	mov	r2, #5
   156cc:	ldr	r1, [pc, #272]	; 157e4 <__assert_fail@plt+0x45d8>
   156d0:	mov	r0, r6
   156d4:	bl	10f90 <dcgettext@plt>
   156d8:	bl	10f24 <printf@plt>
   156dc:	b	15360 <__assert_fail@plt+0x4154>
   156e0:	mov	r2, #5
   156e4:	ldr	r1, [pc, #252]	; 157e8 <__assert_fail@plt+0x45dc>
   156e8:	mov	r0, r6
   156ec:	bl	10f90 <dcgettext@plt>
   156f0:	bl	10f24 <printf@plt>
   156f4:	b	15360 <__assert_fail@plt+0x4154>
   156f8:	mov	r2, #5
   156fc:	ldr	r1, [pc, #232]	; 157ec <__assert_fail@plt+0x45e0>
   15700:	mov	r0, r6
   15704:	bl	10f90 <dcgettext@plt>
   15708:	bl	10f24 <printf@plt>
   1570c:	b	15360 <__assert_fail@plt+0x4154>
   15710:	mov	r2, #5
   15714:	ldr	r1, [pc, #212]	; 157f0 <__assert_fail@plt+0x45e4>
   15718:	mov	r0, #0
   1571c:	bl	10f90 <dcgettext@plt>
   15720:	bl	10f24 <printf@plt>
   15724:	b	15360 <__assert_fail@plt+0x4154>
   15728:	mov	r2, #5
   1572c:	ldr	r1, [pc, #192]	; 157f4 <__assert_fail@plt+0x45e8>
   15730:	mov	r0, #0
   15734:	bl	10f90 <dcgettext@plt>
   15738:	bl	10f24 <printf@plt>
   1573c:	b	15360 <__assert_fail@plt+0x4154>
   15740:	mov	r2, #5
   15744:	ldr	r1, [pc, #172]	; 157f8 <__assert_fail@plt+0x45ec>
   15748:	mov	r0, #0
   1574c:	bl	10f90 <dcgettext@plt>
   15750:	bl	10f24 <printf@plt>
   15754:	b	15360 <__assert_fail@plt+0x4154>
   15758:	mov	r2, #5
   1575c:	ldr	r1, [pc, #152]	; 157fc <__assert_fail@plt+0x45f0>
   15760:	mov	r0, #0
   15764:	bl	10f90 <dcgettext@plt>
   15768:	bl	10f24 <printf@plt>
   1576c:	b	15360 <__assert_fail@plt+0x4154>
   15770:	andeq	r3, r6, ip, asr r3
   15774:	andeq	r3, r6, ip
   15778:	muleq	r6, ip, r0
   1577c:	strheq	r3, [r6], -ip
   15780:	andeq	r3, r6, r0, lsl #2
   15784:	andeq	r2, r6, ip, asr #30
   15788:	andeq	r3, r6, r8, lsr r1
   1578c:	andeq	r3, r6, r0, ror #2
   15790:	andeq	r3, r6, ip, ror #2
   15794:	andeq	r3, r6, r8, ror r2
   15798:	andeq	r3, r6, ip, lsr #5
   1579c:	ldrdeq	r3, [r6], -r4
   157a0:	andeq	r3, r6, r8, asr r1
   157a4:	andeq	r3, r6, r0, lsl #6
   157a8:	strdeq	r3, [r6], -r8
   157ac:	andeq	r3, r6, r8, lsr #6
   157b0:	andeq	r3, r6, r4, asr #6
   157b4:	andeq	sl, r9, ip, lsr #8
   157b8:	muleq	r6, r0, r1
   157bc:	andeq	r3, r6, r0, asr #3
   157c0:	ldrdeq	r3, [r6], -r8
   157c4:	andeq	r3, r6, r8, ror #3
   157c8:	andeq	r3, r6, r8, asr #1
   157cc:	strdeq	r3, [r6], -r8
   157d0:	strdeq	r3, [r6], -r0
   157d4:	andeq	r3, r6, r8, ror #1
   157d8:	andeq	r3, r6, r0, ror #1
   157dc:	ldrdeq	r3, [r6], -r8
   157e0:	ldrdeq	r3, [r6], -r0
   157e4:	andeq	r3, r6, r4, lsr #3
   157e8:	andeq	r3, r6, r8, lsl #5
   157ec:	andeq	r3, r6, r4, lsl r1
   157f0:	andeq	r3, r6, ip, lsr #2
   157f4:	andeq	r3, r6, r0, lsr #2
   157f8:	andeq	r3, r6, r0, asr #4
   157fc:	andeq	r3, r6, ip, lsl #4
   15800:	cmp	r1, #4
   15804:	push	{r4, r5, lr}
   15808:	mov	r3, r2
   1580c:	sub	sp, sp, #12
   15810:	mov	r4, r0
   15814:	beq	158b0 <__assert_fail@plt+0x46a4>
   15818:	cmp	r1, #8
   1581c:	mov	ip, r1
   15820:	beq	15974 <__assert_fail@plt+0x4768>
   15824:	cmp	r1, #12
   15828:	beq	15848 <__assert_fail@plt+0x463c>
   1582c:	mov	r1, r0
   15830:	and	r0, ip, #1
   15834:	bl	15008 <__assert_fail@plt+0x3dfc>
   15838:	mov	r4, r0
   1583c:	mov	r0, r4
   15840:	add	sp, sp, #12
   15844:	pop	{r4, r5, pc}
   15848:	mov	r2, #0
   1584c:	add	r1, sp, #4
   15850:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15854:	ldr	r3, [sp, #4]
   15858:	add	r4, r4, r3
   1585c:	mov	r5, r0
   15860:	ldr	r0, [pc, #628]	; 15adc <__assert_fail@plt+0x48d0>
   15864:	bl	10f24 <printf@plt>
   15868:	ldr	r0, [sp, #4]
   1586c:	cmp	r0, #0
   15870:	beq	15958 <__assert_fail@plt+0x474c>
   15874:	cmp	r5, #2
   15878:	bhi	15a3c <__assert_fail@plt+0x4830>
   1587c:	and	r0, r5, #3
   15880:	cmp	r0, #2
   15884:	beq	15a6c <__assert_fail@plt+0x4860>
   15888:	cmp	r0, #3
   1588c:	beq	15a90 <__assert_fail@plt+0x4884>
   15890:	cmp	r0, #1
   15894:	beq	15a84 <__assert_fail@plt+0x4878>
   15898:	mov	r2, #5
   1589c:	ldr	r1, [pc, #572]	; 15ae0 <__assert_fail@plt+0x48d4>
   158a0:	mov	r0, #0
   158a4:	bl	10f90 <dcgettext@plt>
   158a8:	bl	10f24 <printf@plt>
   158ac:	b	1583c <__assert_fail@plt+0x4630>
   158b0:	mov	r2, #0
   158b4:	add	r1, sp, #4
   158b8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   158bc:	ldr	r3, [sp, #4]
   158c0:	add	r4, r4, r3
   158c4:	mov	r5, r0
   158c8:	ldr	r0, [pc, #532]	; 15ae4 <__assert_fail@plt+0x48d8>
   158cc:	bl	10f24 <printf@plt>
   158d0:	ldr	r0, [sp, #4]
   158d4:	cmp	r0, #0
   158d8:	beq	15958 <__assert_fail@plt+0x474c>
   158dc:	cmp	r5, #15
   158e0:	bhi	15a4c <__assert_fail@plt+0x4840>
   158e4:	and	r3, r5, #3
   158e8:	cmp	r3, #2
   158ec:	mov	r2, #5
   158f0:	beq	15ab0 <__assert_fail@plt+0x48a4>
   158f4:	cmp	r3, #3
   158f8:	beq	15a9c <__assert_fail@plt+0x4890>
   158fc:	cmp	r3, #1
   15900:	mov	r0, #0
   15904:	ldrne	r1, [pc, #476]	; 15ae8 <__assert_fail@plt+0x48dc>
   15908:	ldreq	r1, [pc, #476]	; 15aec <__assert_fail@plt+0x48e0>
   1590c:	bl	10f90 <dcgettext@plt>
   15910:	bl	10f24 <printf@plt>
   15914:	and	r5, r5, #12
   15918:	cmp	r5, #12
   1591c:	ldrls	pc, [pc, r5, lsl #2]
   15920:	b	1583c <__assert_fail@plt+0x4630>
   15924:	andeq	r5, r1, r4, lsr #20
   15928:	andeq	r5, r1, ip, lsr r8
   1592c:	andeq	r5, r1, ip, lsr r8
   15930:	andeq	r5, r1, ip, lsr r8
   15934:	andeq	r5, r1, ip, lsl #20
   15938:	andeq	r5, r1, ip, lsr r8
   1593c:	andeq	r5, r1, ip, lsr r8
   15940:	andeq	r5, r1, ip, lsr r8
   15944:	strdeq	r5, [r1], -r4
   15948:	andeq	r5, r1, ip, lsr r8
   1594c:	andeq	r5, r1, ip, lsr r8
   15950:	andeq	r5, r1, ip, lsr r8
   15954:	ldrdeq	r5, [r1], -ip
   15958:	mov	r2, #5
   1595c:	ldr	r1, [pc, #396]	; 15af0 <__assert_fail@plt+0x48e4>
   15960:	bl	10f90 <dcgettext@plt>
   15964:	bl	10f24 <printf@plt>
   15968:	mov	r0, r4
   1596c:	add	sp, sp, #12
   15970:	pop	{r4, r5, pc}
   15974:	mov	r2, #0
   15978:	add	r1, sp, #4
   1597c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15980:	ldr	r3, [sp, #4]
   15984:	add	r4, r4, r3
   15988:	mov	r5, r0
   1598c:	ldr	r0, [pc, #352]	; 15af4 <__assert_fail@plt+0x48e8>
   15990:	bl	10f24 <printf@plt>
   15994:	ldr	r0, [sp, #4]
   15998:	cmp	r0, #0
   1599c:	beq	15958 <__assert_fail@plt+0x474c>
   159a0:	cmp	r5, #3
   159a4:	bhi	15a5c <__assert_fail@plt+0x4850>
   159a8:	and	r0, r5, #3
   159ac:	cmp	r0, #2
   159b0:	beq	15ad0 <__assert_fail@plt+0x48c4>
   159b4:	cmp	r0, #3
   159b8:	beq	15ac4 <__assert_fail@plt+0x48b8>
   159bc:	cmp	r0, #1
   159c0:	mov	r2, #5
   159c4:	bne	1589c <__assert_fail@plt+0x4690>
   159c8:	ldr	r1, [pc, #296]	; 15af8 <__assert_fail@plt+0x48ec>
   159cc:	mov	r0, #0
   159d0:	bl	10f90 <dcgettext@plt>
   159d4:	bl	10f24 <printf@plt>
   159d8:	b	1583c <__assert_fail@plt+0x4630>
   159dc:	mov	r2, #5
   159e0:	ldr	r1, [pc, #276]	; 15afc <__assert_fail@plt+0x48f0>
   159e4:	mov	r0, #0
   159e8:	bl	10f90 <dcgettext@plt>
   159ec:	bl	10f24 <printf@plt>
   159f0:	b	1583c <__assert_fail@plt+0x4630>
   159f4:	mov	r2, #5
   159f8:	ldr	r1, [pc, #256]	; 15b00 <__assert_fail@plt+0x48f4>
   159fc:	mov	r0, #0
   15a00:	bl	10f90 <dcgettext@plt>
   15a04:	bl	10f24 <printf@plt>
   15a08:	b	1583c <__assert_fail@plt+0x4630>
   15a0c:	mov	r2, #5
   15a10:	ldr	r1, [pc, #236]	; 15b04 <__assert_fail@plt+0x48f8>
   15a14:	mov	r0, #0
   15a18:	bl	10f90 <dcgettext@plt>
   15a1c:	bl	10f24 <printf@plt>
   15a20:	b	1583c <__assert_fail@plt+0x4630>
   15a24:	mov	r2, #5
   15a28:	ldr	r1, [pc, #216]	; 15b08 <__assert_fail@plt+0x48fc>
   15a2c:	mov	r0, #0
   15a30:	bl	10f90 <dcgettext@plt>
   15a34:	bl	10f24 <printf@plt>
   15a38:	b	1583c <__assert_fail@plt+0x4630>
   15a3c:	mov	r1, r5
   15a40:	ldr	r0, [pc, #196]	; 15b0c <__assert_fail@plt+0x4900>
   15a44:	bl	10f24 <printf@plt>
   15a48:	b	1587c <__assert_fail@plt+0x4670>
   15a4c:	mov	r1, r5
   15a50:	ldr	r0, [pc, #180]	; 15b0c <__assert_fail@plt+0x4900>
   15a54:	bl	10f24 <printf@plt>
   15a58:	b	158e4 <__assert_fail@plt+0x46d8>
   15a5c:	mov	r1, r5
   15a60:	ldr	r0, [pc, #164]	; 15b0c <__assert_fail@plt+0x4900>
   15a64:	bl	10f24 <printf@plt>
   15a68:	b	159a8 <__assert_fail@plt+0x479c>
   15a6c:	mov	r2, #5
   15a70:	ldr	r1, [pc, #152]	; 15b10 <__assert_fail@plt+0x4904>
   15a74:	mov	r0, #0
   15a78:	bl	10f90 <dcgettext@plt>
   15a7c:	bl	10f24 <printf@plt>
   15a80:	b	1583c <__assert_fail@plt+0x4630>
   15a84:	ldr	r0, [pc, #136]	; 15b14 <__assert_fail@plt+0x4908>
   15a88:	bl	11014 <puts@plt>
   15a8c:	b	1583c <__assert_fail@plt+0x4630>
   15a90:	ldr	r0, [pc, #128]	; 15b18 <__assert_fail@plt+0x490c>
   15a94:	bl	11014 <puts@plt>
   15a98:	b	1583c <__assert_fail@plt+0x4630>
   15a9c:	ldr	r1, [pc, #120]	; 15b1c <__assert_fail@plt+0x4910>
   15aa0:	mov	r0, #0
   15aa4:	bl	10f90 <dcgettext@plt>
   15aa8:	bl	10f24 <printf@plt>
   15aac:	b	15914 <__assert_fail@plt+0x4708>
   15ab0:	ldr	r1, [pc, #104]	; 15b20 <__assert_fail@plt+0x4914>
   15ab4:	mov	r0, #0
   15ab8:	bl	10f90 <dcgettext@plt>
   15abc:	bl	10f24 <printf@plt>
   15ac0:	b	15914 <__assert_fail@plt+0x4708>
   15ac4:	ldr	r0, [pc, #88]	; 15b24 <__assert_fail@plt+0x4918>
   15ac8:	bl	11014 <puts@plt>
   15acc:	b	1583c <__assert_fail@plt+0x4630>
   15ad0:	ldr	r0, [pc, #80]	; 15b28 <__assert_fail@plt+0x491c>
   15ad4:	bl	11014 <puts@plt>
   15ad8:	b	1583c <__assert_fail@plt+0x4630>
   15adc:			; <UNDEFINED> instruction: 0x000634b8
   15ae0:	muleq	r6, r0, r4
   15ae4:	andeq	r3, r6, r8, ror r3
   15ae8:	andeq	r3, r6, r8, lsr #7
   15aec:	andeq	r3, r6, r8, asr #7
   15af0:	muleq	r6, r4, r3
   15af4:	andeq	r3, r6, r0, ror r4
   15af8:	andeq	r3, r6, r0, lsr #9
   15afc:	andeq	r3, r6, r4, asr r4
   15b00:	andeq	r3, r6, r0, asr #8
   15b04:	andeq	r3, r6, r4, lsr #8
   15b08:	andeq	r3, r6, r8, lsl #8
   15b0c:	andeq	r3, r6, r0, lsr #7
   15b10:	andeq	r3, r6, r4, ror #9
   15b14:	ldrdeq	r3, [r6], -ip
   15b18:	strdeq	r9, [r6], -r8
   15b1c:	andeq	r3, r6, r8, ror #7
   15b20:	ldrdeq	r3, [r6], -r8
   15b24:			; <UNDEFINED> instruction: 0x000634b4
   15b28:	andeq	r3, r6, ip, lsr #9
   15b2c:	push	{r4, r5, r6, lr}
   15b30:	sub	sp, sp, #8
   15b34:	mov	r3, r1
   15b38:	mov	r6, r1
   15b3c:	mov	r2, #0
   15b40:	add	r1, sp, #4
   15b44:	mov	r4, r0
   15b48:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15b4c:	mov	r5, r0
   15b50:	ldr	r0, [sp, #4]
   15b54:	cmp	r5, #6
   15b58:	add	r4, r4, r0
   15b5c:	beq	15c84 <__assert_fail@plt+0x4a78>
   15b60:	cmp	r5, #8
   15b64:	beq	15c40 <__assert_fail@plt+0x4a34>
   15b68:	cmp	r5, #4
   15b6c:	beq	15be0 <__assert_fail@plt+0x49d4>
   15b70:	mov	r2, #5
   15b74:	ldr	r1, [pc, #588]	; 15dc8 <__assert_fail@plt+0x4bbc>
   15b78:	mov	r0, #0
   15b7c:	bl	10f90 <dcgettext@plt>
   15b80:	mov	r1, r5
   15b84:	bl	10f24 <printf@plt>
   15b88:	ands	r2, r5, #1
   15b8c:	beq	15cdc <__assert_fail@plt+0x4ad0>
   15b90:	ldr	r3, [pc, #564]	; 15dcc <__assert_fail@plt+0x4bc0>
   15b94:	mov	r0, #34	; 0x22
   15b98:	ldr	r1, [r3]
   15b9c:	bl	11158 <putc@plt>
   15ba0:	sub	r3, r6, #1
   15ba4:	cmp	r4, r3
   15ba8:	bcs	15d98 <__assert_fail@plt+0x4b8c>
   15bac:	sub	r5, r6, r4
   15bb0:	sub	r5, r5, #1
   15bb4:	mov	r1, r4
   15bb8:	mov	r0, r5
   15bbc:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   15bc0:	mov	r0, r4
   15bc4:	mov	r1, r5
   15bc8:	bl	11104 <strnlen@plt>
   15bcc:	add	r0, r0, #1
   15bd0:	add	r4, r4, r0
   15bd4:	ldr	r0, [pc, #500]	; 15dd0 <__assert_fail@plt+0x4bc4>
   15bd8:	bl	11014 <puts@plt>
   15bdc:	b	15c2c <__assert_fail@plt+0x4a20>
   15be0:	mov	r3, r6
   15be4:	mov	r2, #0
   15be8:	mov	r0, r4
   15bec:	add	r1, sp, #4
   15bf0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15bf4:	ldr	r3, [sp, #4]
   15bf8:	add	r4, r4, r3
   15bfc:	mov	r5, r0
   15c00:	ldr	r0, [pc, #460]	; 15dd4 <__assert_fail@plt+0x4bc8>
   15c04:	bl	10f24 <printf@plt>
   15c08:	cmp	r5, #1
   15c0c:	beq	15d50 <__assert_fail@plt+0x4b44>
   15c10:	cmp	r5, #0
   15c14:	beq	15d20 <__assert_fail@plt+0x4b14>
   15c18:	cmp	r5, #2
   15c1c:	beq	15d08 <__assert_fail@plt+0x4afc>
   15c20:	mov	r1, r5
   15c24:	ldr	r0, [pc, #428]	; 15dd8 <__assert_fail@plt+0x4bcc>
   15c28:	bl	10f24 <printf@plt>
   15c2c:	cmp	r4, r6
   15c30:	bhi	15db4 <__assert_fail@plt+0x4ba8>
   15c34:	mov	r0, r4
   15c38:	add	sp, sp, #8
   15c3c:	pop	{r4, r5, r6, pc}
   15c40:	mov	r3, r6
   15c44:	mov	r0, r4
   15c48:	add	r1, sp, #4
   15c4c:	mov	r2, #0
   15c50:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15c54:	ldr	r3, [sp, #4]
   15c58:	add	r4, r4, r3
   15c5c:	mov	r5, r0
   15c60:	ldr	r0, [pc, #372]	; 15ddc <__assert_fail@plt+0x4bd0>
   15c64:	bl	10f24 <printf@plt>
   15c68:	cmp	r5, #3
   15c6c:	ldrls	pc, [pc, r5, lsl #2]
   15c70:	b	15c20 <__assert_fail@plt+0x4a14>
   15c74:	andeq	r5, r1, r8, ror #26
   15c78:	andeq	r5, r1, r8, lsr sp
   15c7c:	andeq	r5, r1, r4, asr #25
   15c80:	andeq	r5, r1, r0, lsl #27
   15c84:	mov	r3, r6
   15c88:	mov	r2, #0
   15c8c:	mov	r0, r4
   15c90:	add	r1, sp, #4
   15c94:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15c98:	ldr	r3, [sp, #4]
   15c9c:	add	r4, r4, r3
   15ca0:	mov	r5, r0
   15ca4:	ldr	r0, [pc, #308]	; 15de0 <__assert_fail@plt+0x4bd4>
   15ca8:	bl	10f24 <printf@plt>
   15cac:	cmp	r5, #1
   15cb0:	beq	15d38 <__assert_fail@plt+0x4b2c>
   15cb4:	cmp	r5, #0
   15cb8:	beq	15d20 <__assert_fail@plt+0x4b14>
   15cbc:	cmp	r5, #2
   15cc0:	bne	15c20 <__assert_fail@plt+0x4a14>
   15cc4:	mov	r2, #5
   15cc8:	ldr	r1, [pc, #276]	; 15de4 <__assert_fail@plt+0x4bd8>
   15ccc:	mov	r0, #0
   15cd0:	bl	10f90 <dcgettext@plt>
   15cd4:	bl	10f24 <printf@plt>
   15cd8:	b	15c2c <__assert_fail@plt+0x4a20>
   15cdc:	mov	r3, r6
   15ce0:	add	r1, sp, #4
   15ce4:	mov	r0, r4
   15ce8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15cec:	ldr	r3, [sp, #4]
   15cf0:	add	r4, r4, r3
   15cf4:	mov	r2, r0
   15cf8:	mov	r1, r0
   15cfc:	ldr	r0, [pc, #228]	; 15de8 <__assert_fail@plt+0x4bdc>
   15d00:	bl	10f24 <printf@plt>
   15d04:	b	15c2c <__assert_fail@plt+0x4a20>
   15d08:	mov	r2, #5
   15d0c:	ldr	r1, [pc, #216]	; 15dec <__assert_fail@plt+0x4be0>
   15d10:	mov	r0, #0
   15d14:	bl	10f90 <dcgettext@plt>
   15d18:	bl	10f24 <printf@plt>
   15d1c:	b	15c2c <__assert_fail@plt+0x4a20>
   15d20:	mov	r2, #5
   15d24:	ldr	r1, [pc, #196]	; 15df0 <__assert_fail@plt+0x4be4>
   15d28:	mov	r0, r5
   15d2c:	bl	10f90 <dcgettext@plt>
   15d30:	bl	10f24 <printf@plt>
   15d34:	b	15c2c <__assert_fail@plt+0x4a20>
   15d38:	mov	r2, #5
   15d3c:	ldr	r1, [pc, #176]	; 15df4 <__assert_fail@plt+0x4be8>
   15d40:	mov	r0, #0
   15d44:	bl	10f90 <dcgettext@plt>
   15d48:	bl	10f24 <printf@plt>
   15d4c:	b	15c2c <__assert_fail@plt+0x4a20>
   15d50:	mov	r2, #5
   15d54:	ldr	r1, [pc, #156]	; 15df8 <__assert_fail@plt+0x4bec>
   15d58:	mov	r0, #0
   15d5c:	bl	10f90 <dcgettext@plt>
   15d60:	bl	10f24 <printf@plt>
   15d64:	b	15c2c <__assert_fail@plt+0x4a20>
   15d68:	mov	r2, #5
   15d6c:	ldr	r1, [pc, #124]	; 15df0 <__assert_fail@plt+0x4be4>
   15d70:	mov	r0, #0
   15d74:	bl	10f90 <dcgettext@plt>
   15d78:	bl	10f24 <printf@plt>
   15d7c:	b	15c2c <__assert_fail@plt+0x4a20>
   15d80:	mov	r2, #5
   15d84:	ldr	r1, [pc, #112]	; 15dfc <__assert_fail@plt+0x4bf0>
   15d88:	mov	r0, #0
   15d8c:	bl	10f90 <dcgettext@plt>
   15d90:	bl	10f24 <printf@plt>
   15d94:	b	15c2c <__assert_fail@plt+0x4a20>
   15d98:	mov	r2, #5
   15d9c:	ldr	r1, [pc, #92]	; 15e00 <__assert_fail@plt+0x4bf4>
   15da0:	mov	r0, #0
   15da4:	bl	10f90 <dcgettext@plt>
   15da8:	bl	10f24 <printf@plt>
   15dac:	mov	r4, r6
   15db0:	b	15bd4 <__assert_fail@plt+0x49c8>
   15db4:	ldr	r3, [pc, #72]	; 15e04 <__assert_fail@plt+0x4bf8>
   15db8:	ldr	r2, [pc, #72]	; 15e08 <__assert_fail@plt+0x4bfc>
   15dbc:	ldr	r1, [pc, #72]	; 15e0c <__assert_fail@plt+0x4c00>
   15dc0:	ldr	r0, [pc, #72]	; 15e10 <__assert_fail@plt+0x4c04>
   15dc4:	bl	1120c <__assert_fail@plt>
   15dc8:	andeq	r3, r6, ip, asr #10
   15dcc:	andeq	sl, r9, ip, lsr #8
   15dd0:	muleq	r6, ip, r0
   15dd4:	strheq	r3, [r6], -ip
   15dd8:	andeq	r2, r6, ip, asr #30
   15ddc:	andeq	r3, r6, r4, lsr #10
   15de0:	andeq	r3, r6, r0, lsl #10
   15de4:	andeq	r3, r6, ip, lsl r5
   15de8:	andeq	r3, r6, r4, ror #10
   15dec:	strdeq	r3, [r6], -r4
   15df0:	andeq	r3, r6, r8, asr #1
   15df4:	andeq	r3, r6, r4, lsl r5
   15df8:	andeq	r3, r6, ip, ror #9
   15dfc:	andeq	r3, r6, r8, lsr r5
   15e00:	andeq	r3, r6, ip
   15e04:	andeq	r8, r5, r0, asr lr
   15e08:	andeq	r3, r0, r6, lsr #23
   15e0c:	andeq	r2, r6, r8, asr pc
   15e10:	strheq	r3, [r6], -r0
   15e14:	push	{r4, r5, r6, r7, r8, lr}
   15e18:	sub	sp, sp, #8
   15e1c:	mov	r3, r1
   15e20:	mov	r8, r1
   15e24:	mov	r2, #0
   15e28:	add	r1, sp, #4
   15e2c:	mov	r7, r0
   15e30:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15e34:	ldr	r3, [sp, #4]
   15e38:	ldr	r5, [pc, #1372]	; 1639c <__assert_fail@plt+0x5190>
   15e3c:	add	r7, r7, r3
   15e40:	mov	r3, #0
   15e44:	mov	r6, r0
   15e48:	b	15e58 <__assert_fail@plt+0x4c4c>
   15e4c:	add	r3, r3, #1
   15e50:	cmp	r3, #41	; 0x29
   15e54:	beq	15ed4 <__assert_fail@plt+0x4cc8>
   15e58:	ldr	r2, [r5, r3, lsl #4]
   15e5c:	cmp	r2, r6
   15e60:	bne	15e4c <__assert_fail@plt+0x4c40>
   15e64:	add	r4, r5, r3, lsl #4
   15e68:	ldr	r0, [pc, #1328]	; 163a0 <__assert_fail@plt+0x5194>
   15e6c:	ldr	r1, [r4, #4]
   15e70:	bl	10f24 <printf@plt>
   15e74:	ldr	r3, [r4, #8]
   15e78:	cmp	r3, #1
   15e7c:	beq	16010 <__assert_fail@plt+0x4e04>
   15e80:	cmp	r3, #0
   15e84:	beq	15f14 <__assert_fail@plt+0x4d08>
   15e88:	cmp	r3, #2
   15e8c:	beq	15ef4 <__assert_fail@plt+0x4ce8>
   15e90:	tst	r3, #128	; 0x80
   15e94:	beq	16368 <__assert_fail@plt+0x515c>
   15e98:	mov	r3, r8
   15e9c:	mov	r2, #0
   15ea0:	mov	r0, r7
   15ea4:	add	r1, sp, #4
   15ea8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   15eac:	ldr	r3, [r4, #8]
   15eb0:	ldr	r2, [sp, #4]
   15eb4:	and	r3, r3, #127	; 0x7f
   15eb8:	add	r7, r7, r2
   15ebc:	cmp	r3, r0
   15ec0:	bhi	16030 <__assert_fail@plt+0x4e24>
   15ec4:	mov	r1, r0
   15ec8:	ldr	r0, [pc, #1236]	; 163a4 <__assert_fail@plt+0x5198>
   15ecc:	bl	10f24 <printf@plt>
   15ed0:	b	15ee8 <__assert_fail@plt+0x4cdc>
   15ed4:	mov	r1, r7
   15ed8:	mov	r2, r8
   15edc:	mov	r0, r6
   15ee0:	bl	15008 <__assert_fail@plt+0x3dfc>
   15ee4:	mov	r7, r0
   15ee8:	mov	r0, r7
   15eec:	add	sp, sp, #8
   15ef0:	pop	{r4, r5, r6, r7, r8, pc}
   15ef4:	mov	r1, r7
   15ef8:	mov	r2, r8
   15efc:	mov	r0, #0
   15f00:	bl	15008 <__assert_fail@plt+0x3dfc>
   15f04:	mov	r7, r0
   15f08:	mov	r0, r7
   15f0c:	add	sp, sp, #8
   15f10:	pop	{r4, r5, r6, r7, r8, pc}
   15f14:	sub	r3, r6, #7
   15f18:	cmp	r3, #58	; 0x3a
   15f1c:	ldrls	pc, [pc, r3, lsl #2]
   15f20:	b	161fc <__assert_fail@plt+0x4ff0>
   15f24:	andeq	r6, r1, r8, lsr #3
   15f28:	strdeq	r6, [r1], -ip
   15f2c:	strdeq	r6, [r1], -ip
   15f30:	strdeq	r6, [r1], -ip
   15f34:	strdeq	r6, [r1], -ip
   15f38:	strdeq	r6, [r1], -ip
   15f3c:	strdeq	r6, [r1], -ip
   15f40:	strdeq	r6, [r1], -ip
   15f44:	strdeq	r6, [r1], -ip
   15f48:	strdeq	r6, [r1], -ip
   15f4c:	strdeq	r6, [r1], -ip
   15f50:	strdeq	r6, [r1], -ip
   15f54:	strdeq	r6, [r1], -ip
   15f58:	strdeq	r6, [r1], -ip
   15f5c:	strdeq	r6, [r1], -ip
   15f60:	strdeq	r6, [r1], -ip
   15f64:	strdeq	r6, [r1], -ip
   15f68:	andeq	r6, r1, ip, ror #2
   15f6c:	andeq	r6, r1, r0, lsr r1
   15f70:	strdeq	r6, [r1], -ip
   15f74:	strdeq	r6, [r1], -ip
   15f78:	strdeq	r6, [r1], -ip
   15f7c:	strdeq	r6, [r1], -ip
   15f80:	strdeq	r6, [r1], -ip
   15f84:	strdeq	r6, [r1], -ip
   15f88:	strheq	r6, [r1], -r0
   15f8c:	strdeq	r6, [r1], -ip
   15f90:	strdeq	r6, [r1], -ip
   15f94:	strdeq	r6, [r1], -ip
   15f98:	strdeq	r6, [r1], -ip
   15f9c:	strdeq	r6, [r1], -ip
   15fa0:	strdeq	r6, [r1], -ip
   15fa4:	strdeq	r6, [r1], -ip
   15fa8:	strdeq	r6, [r1], -ip
   15fac:	strdeq	r6, [r1], -ip
   15fb0:	strdeq	r6, [r1], -ip
   15fb4:	strdeq	r6, [r1], -ip
   15fb8:	strdeq	r6, [r1], -ip
   15fbc:	strdeq	r6, [r1], -ip
   15fc0:	strdeq	r6, [r1], -ip
   15fc4:	strdeq	r6, [r1], -ip
   15fc8:	strdeq	r6, [r1], -ip
   15fcc:	strdeq	r6, [r1], -ip
   15fd0:	strdeq	r6, [r1], -ip
   15fd4:	strdeq	r6, [r1], -ip
   15fd8:	strdeq	r6, [r1], -ip
   15fdc:	strdeq	r6, [r1], -ip
   15fe0:	strdeq	r6, [r1], -ip
   15fe4:	strdeq	r6, [r1], -ip
   15fe8:	strdeq	r6, [r1], -ip
   15fec:	strdeq	r6, [r1], -ip
   15ff0:	strdeq	r6, [r1], -ip
   15ff4:	strdeq	r6, [r1], -ip
   15ff8:	strdeq	r6, [r1], -ip
   15ffc:	strdeq	r6, [r1], -ip
   16000:	strdeq	r6, [r1], -ip
   16004:	strdeq	r6, [r1], -ip
   16008:	muleq	r1, r0, r0
   1600c:	andeq	r6, r1, r0, asr #32
   16010:	mov	r1, r7
   16014:	mov	r2, r8
   16018:	mvn	r0, #0
   1601c:	bl	15008 <__assert_fail@plt+0x3dfc>
   16020:	mov	r7, r0
   16024:	mov	r0, r7
   16028:	add	sp, sp, #8
   1602c:	pop	{r4, r5, r6, r7, r8, pc}
   16030:	ldr	r3, [r4, #12]
   16034:	ldr	r0, [r3, r0, lsl #2]
   16038:	bl	11014 <puts@plt>
   1603c:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16040:	mov	r3, r8
   16044:	mov	r0, r7
   16048:	mov	r2, #0
   1604c:	add	r1, sp, #4
   16050:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16054:	ldr	r3, [sp, #4]
   16058:	add	r7, r7, r3
   1605c:	cmp	r0, #6
   16060:	beq	162c8 <__assert_fail@plt+0x50bc>
   16064:	ldr	r0, [pc, #828]	; 163a8 <__assert_fail@plt+0x519c>
   16068:	bl	11014 <puts@plt>
   1606c:	cmp	r8, r7
   16070:	bhi	16080 <__assert_fail@plt+0x4e74>
   16074:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16078:	cmp	r7, r8
   1607c:	beq	15ee8 <__assert_fail@plt+0x4cdc>
   16080:	ldrb	r3, [r7], #1
   16084:	cmp	r3, #0
   16088:	bne	16078 <__assert_fail@plt+0x4e6c>
   1608c:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16090:	cmp	r8, r7
   16094:	mov	r2, #5
   16098:	ldr	r1, [pc, #780]	; 163ac <__assert_fail@plt+0x51a0>
   1609c:	mov	r0, #0
   160a0:	addhi	r7, r7, #1
   160a4:	bl	10f90 <dcgettext@plt>
   160a8:	bl	10f24 <printf@plt>
   160ac:	b	15ee8 <__assert_fail@plt+0x4cdc>
   160b0:	mov	r3, r8
   160b4:	mov	r2, #0
   160b8:	mov	r0, r7
   160bc:	add	r1, sp, #4
   160c0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   160c4:	ldr	r3, [sp, #4]
   160c8:	mov	r2, #5
   160cc:	ldr	r1, [pc, #732]	; 163b0 <__assert_fail@plt+0x51a4>
   160d0:	add	r7, r7, r3
   160d4:	mov	r4, r0
   160d8:	mov	r0, #0
   160dc:	bl	10f90 <dcgettext@plt>
   160e0:	mov	r1, r4
   160e4:	bl	10f24 <printf@plt>
   160e8:	sub	r3, r8, #1
   160ec:	cmp	r7, r3
   160f0:	bcs	162ac <__assert_fail@plt+0x50a0>
   160f4:	sub	r4, r8, r7
   160f8:	sub	r4, r4, #1
   160fc:	mov	r1, r7
   16100:	mov	r0, r4
   16104:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   16108:	mov	r0, r7
   1610c:	mov	r1, r4
   16110:	bl	11104 <strnlen@plt>
   16114:	add	r0, r0, #1
   16118:	add	r7, r7, r0
   1611c:	ldr	r3, [pc, #656]	; 163b4 <__assert_fail@plt+0x51a8>
   16120:	mov	r0, #10
   16124:	ldr	r1, [r3]
   16128:	bl	11158 <putc@plt>
   1612c:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16130:	mov	r3, r8
   16134:	mov	r0, r7
   16138:	add	r1, sp, #4
   1613c:	mov	r2, #0
   16140:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16144:	ldr	r3, [sp, #4]
   16148:	add	r7, r7, r3
   1614c:	mov	r4, r0
   16150:	cmp	r0, #3
   16154:	ldrls	pc, [pc, r0, lsl #2]
   16158:	b	162fc <__assert_fail@plt+0x50f0>
   1615c:	andeq	r6, r1, ip, lsr r2
   16160:	andeq	r6, r1, r4, asr r2
   16164:	andeq	r6, r1, r4, lsr #4
   16168:	andeq	r6, r1, r8, lsl r2
   1616c:	mov	r3, r8
   16170:	mov	r0, r7
   16174:	add	r1, sp, #4
   16178:	mov	r2, #0
   1617c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16180:	ldr	r3, [sp, #4]
   16184:	add	r7, r7, r3
   16188:	mov	r4, r0
   1618c:	cmp	r0, #3
   16190:	ldrls	pc, [pc, r0, lsl #2]
   16194:	b	162fc <__assert_fail@plt+0x50f0>
   16198:	andeq	r6, r1, ip, lsr r2
   1619c:	andeq	r6, r1, r4, lsr #4
   161a0:	andeq	r6, r1, ip, ror #4
   161a4:	andeq	r6, r1, r8, lsl r2
   161a8:	mov	r3, r8
   161ac:	mov	r0, r7
   161b0:	add	r1, sp, #4
   161b4:	mov	r2, #0
   161b8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   161bc:	ldr	r3, [sp, #4]
   161c0:	add	r7, r7, r3
   161c4:	cmp	r0, #77	; 0x4d
   161c8:	mov	r1, r0
   161cc:	beq	16338 <__assert_fail@plt+0x512c>
   161d0:	bhi	16284 <__assert_fail@plt+0x5078>
   161d4:	cmp	r0, #0
   161d8:	beq	16314 <__assert_fail@plt+0x5108>
   161dc:	cmp	r0, #65	; 0x41
   161e0:	bne	16308 <__assert_fail@plt+0x50fc>
   161e4:	mov	r2, #5
   161e8:	ldr	r1, [pc, #456]	; 163b8 <__assert_fail@plt+0x51ac>
   161ec:	mov	r0, #0
   161f0:	bl	10f90 <dcgettext@plt>
   161f4:	bl	10f24 <printf@plt>
   161f8:	b	15ee8 <__assert_fail@plt+0x4cdc>
   161fc:	mov	r2, #5
   16200:	ldr	r1, [pc, #436]	; 163bc <__assert_fail@plt+0x51b0>
   16204:	mov	r0, #0
   16208:	bl	10f90 <dcgettext@plt>
   1620c:	mov	r1, r6
   16210:	bl	10f24 <printf@plt>
   16214:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16218:	ldr	r0, [pc, #416]	; 163c0 <__assert_fail@plt+0x51b4>
   1621c:	bl	11014 <puts@plt>
   16220:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16224:	mov	r2, #5
   16228:	ldr	r1, [pc, #404]	; 163c4 <__assert_fail@plt+0x51b8>
   1622c:	mov	r0, #0
   16230:	bl	10f90 <dcgettext@plt>
   16234:	bl	10f24 <printf@plt>
   16238:	b	15ee8 <__assert_fail@plt+0x4cdc>
   1623c:	mov	r2, #5
   16240:	ldr	r1, [pc, #384]	; 163c8 <__assert_fail@plt+0x51bc>
   16244:	mov	r0, #0
   16248:	bl	10f90 <dcgettext@plt>
   1624c:	bl	10f24 <printf@plt>
   16250:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16254:	mov	r2, #5
   16258:	ldr	r1, [pc, #364]	; 163cc <__assert_fail@plt+0x51c0>
   1625c:	mov	r0, #0
   16260:	bl	10f90 <dcgettext@plt>
   16264:	bl	10f24 <printf@plt>
   16268:	b	15ee8 <__assert_fail@plt+0x4cdc>
   1626c:	mov	r2, #5
   16270:	ldr	r1, [pc, #344]	; 163d0 <__assert_fail@plt+0x51c4>
   16274:	mov	r0, #0
   16278:	bl	10f90 <dcgettext@plt>
   1627c:	bl	10f24 <printf@plt>
   16280:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16284:	cmp	r0, #82	; 0x52
   16288:	beq	16350 <__assert_fail@plt+0x5144>
   1628c:	cmp	r0, #83	; 0x53
   16290:	bne	16308 <__assert_fail@plt+0x50fc>
   16294:	mov	r2, #5
   16298:	ldr	r1, [pc, #308]	; 163d4 <__assert_fail@plt+0x51c8>
   1629c:	mov	r0, #0
   162a0:	bl	10f90 <dcgettext@plt>
   162a4:	bl	10f24 <printf@plt>
   162a8:	b	15ee8 <__assert_fail@plt+0x4cdc>
   162ac:	mov	r2, #5
   162b0:	ldr	r1, [pc, #288]	; 163d8 <__assert_fail@plt+0x51cc>
   162b4:	mov	r0, #0
   162b8:	bl	10f90 <dcgettext@plt>
   162bc:	bl	10f24 <printf@plt>
   162c0:	mov	r7, r8
   162c4:	b	1611c <__assert_fail@plt+0x4f10>
   162c8:	mov	r3, r8
   162cc:	mov	r0, r7
   162d0:	add	r1, sp, #4
   162d4:	mov	r2, #0
   162d8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   162dc:	ldr	r3, [sp, #4]
   162e0:	add	r7, r7, r3
   162e4:	cmp	r0, #17
   162e8:	mov	r1, r0
   162ec:	bls	16328 <__assert_fail@plt+0x511c>
   162f0:	ldr	r0, [pc, #172]	; 163a4 <__assert_fail@plt+0x5198>
   162f4:	bl	10f24 <printf@plt>
   162f8:	b	1606c <__assert_fail@plt+0x4e60>
   162fc:	cmp	r4, #12
   16300:	bls	1637c <__assert_fail@plt+0x5170>
   16304:	mov	r1, r4
   16308:	ldr	r0, [pc, #148]	; 163a4 <__assert_fail@plt+0x5198>
   1630c:	bl	10f24 <printf@plt>
   16310:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16314:	mov	r2, #5
   16318:	ldr	r1, [pc, #168]	; 163c8 <__assert_fail@plt+0x51bc>
   1631c:	bl	10f90 <dcgettext@plt>
   16320:	bl	10f24 <printf@plt>
   16324:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16328:	add	r5, r5, r0, lsl #2
   1632c:	ldr	r0, [r5, #656]	; 0x290
   16330:	bl	11014 <puts@plt>
   16334:	b	1606c <__assert_fail@plt+0x4e60>
   16338:	mov	r2, #5
   1633c:	ldr	r1, [pc, #152]	; 163dc <__assert_fail@plt+0x51d0>
   16340:	mov	r0, #0
   16344:	bl	10f90 <dcgettext@plt>
   16348:	bl	10f24 <printf@plt>
   1634c:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16350:	mov	r2, #5
   16354:	ldr	r1, [pc, #132]	; 163e0 <__assert_fail@plt+0x51d4>
   16358:	mov	r0, #0
   1635c:	bl	10f90 <dcgettext@plt>
   16360:	bl	10f24 <printf@plt>
   16364:	b	15ee8 <__assert_fail@plt+0x4cdc>
   16368:	ldr	r3, [pc, #116]	; 163e4 <__assert_fail@plt+0x51d8>
   1636c:	ldr	r2, [pc, #116]	; 163e8 <__assert_fail@plt+0x51dc>
   16370:	ldr	r1, [pc, #116]	; 163ec <__assert_fail@plt+0x51e0>
   16374:	ldr	r0, [pc, #116]	; 163f0 <__assert_fail@plt+0x51e4>
   16378:	bl	1120c <__assert_fail@plt>
   1637c:	mov	r2, #5
   16380:	ldr	r1, [pc, #108]	; 163f4 <__assert_fail@plt+0x51e8>
   16384:	mov	r0, #0
   16388:	bl	10f90 <dcgettext@plt>
   1638c:	mov	r1, #1
   16390:	lsl	r1, r1, r4
   16394:	bl	10f24 <printf@plt>
   16398:	b	15ee8 <__assert_fail@plt+0x4cdc>
   1639c:	andeq	r9, r9, r8, lsr #2
   163a0:	andeq	r3, r6, r0, ror r5
   163a4:	andeq	r2, r6, ip, asr #30
   163a8:	strdeq	r9, [r6], -r8
   163ac:	andeq	r3, r6, ip, lsl #12
   163b0:	andeq	r3, r6, r4, asr #6
   163b4:	andeq	sl, r9, ip, lsr #8
   163b8:	andeq	r3, r6, ip, ror r5
   163bc:	andeq	r3, r6, r4, lsl r6
   163c0:	andeq	r3, r6, r8, asr #11
   163c4:	andeq	r3, r6, r8, asr r1
   163c8:	andeq	r3, r6, r8, asr #1
   163cc:	strdeq	r3, [r6], -r4
   163d0:	strdeq	r3, [r6], -r8
   163d4:	andeq	r3, r6, ip, lsr #11
   163d8:	andeq	r3, r6, ip
   163dc:	muleq	r6, r8, r5
   163e0:	andeq	r3, r6, ip, lsl #11
   163e4:	andeq	r8, r5, ip, ror #28
   163e8:	muleq	r0, r0, r8
   163ec:	andeq	r2, r6, r8, asr pc
   163f0:	andeq	r3, r6, r4, lsr #12
   163f4:	ldrdeq	r3, [r6], -r0
   163f8:	push	{r4, r5, r6, lr}
   163fc:	sub	sp, sp, #8
   16400:	mov	r3, r1
   16404:	mov	r2, #0
   16408:	mov	r5, r1
   1640c:	add	r1, sp, #4
   16410:	mov	r4, r0
   16414:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16418:	ldr	r2, [sp, #4]
   1641c:	add	r4, r4, r2
   16420:	sub	r3, r0, #4
   16424:	mov	r6, r0
   16428:	cmp	r3, #14
   1642c:	ldrls	pc, [pc, r3, lsl #2]
   16430:	b	1684c <__assert_fail@plt+0x5640>
   16434:	andeq	r6, r1, r4, lsr #9
   16438:	strdeq	r6, [r1], -r0
   1643c:	andeq	r6, r1, r8, lsr r5
   16440:	andeq	r6, r1, r4, lsl #11
   16444:	andeq	r6, r1, ip, lsr #11
   16448:	strdeq	r6, [r1], -r0
   1644c:	andeq	r6, r1, ip, lsl r6
   16450:	andeq	r6, r1, ip, lsl r6
   16454:	andeq	r6, r1, r0, lsl #13
   16458:			; <UNDEFINED> instruction: 0x000166b8
   1645c:	strdeq	r6, [r1], -ip
   16460:	andeq	r6, r1, r0, asr #14
   16464:	andeq	r6, r1, ip, ror #14
   16468:	andeq	r6, r1, r4, ror r7
   1646c:	andeq	r6, r1, r0, ror r4
   16470:	mov	r3, r5
   16474:	mov	r0, r4
   16478:	add	r1, sp, #4
   1647c:	mov	r2, #0
   16480:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16484:	ldr	r3, [sp, #4]
   16488:	add	r4, r4, r3
   1648c:	mov	r1, r0
   16490:	ldr	r0, [pc, #996]	; 1687c <__assert_fail@plt+0x5670>
   16494:	bl	10f24 <printf@plt>
   16498:	mov	r0, r4
   1649c:	add	sp, sp, #8
   164a0:	pop	{r4, r5, r6, pc}
   164a4:	mov	r3, r5
   164a8:	mov	r2, #0
   164ac:	mov	r0, r4
   164b0:	add	r1, sp, #4
   164b4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   164b8:	ldr	r3, [sp, #4]
   164bc:	add	r4, r4, r3
   164c0:	mov	r5, r0
   164c4:	ldr	r0, [pc, #948]	; 16880 <__assert_fail@plt+0x5674>
   164c8:	bl	10f24 <printf@plt>
   164cc:	mov	r2, #5
   164d0:	cmp	r5, #4
   164d4:	ldrls	pc, [pc, r5, lsl #2]
   164d8:	b	1666c <__assert_fail@plt+0x5460>
   164dc:	andeq	r6, r1, r4, ror #15
   164e0:	ldrdeq	r6, [r1], -r0
   164e4:	andeq	r6, r1, r0, lsr #16
   164e8:	andeq	r6, r1, ip, lsl #16
   164ec:	strdeq	r6, [r1], -r8
   164f0:	mov	r3, r5
   164f4:	mov	r2, #0
   164f8:	mov	r0, r4
   164fc:	add	r1, sp, #4
   16500:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16504:	ldr	r3, [sp, #4]
   16508:	add	r4, r4, r3
   1650c:	mov	r5, r0
   16510:	ldr	r0, [pc, #876]	; 16884 <__assert_fail@plt+0x5678>
   16514:	bl	10f24 <printf@plt>
   16518:	sub	r0, r5, #1
   1651c:	cmp	r0, #3
   16520:	ldrls	pc, [pc, r0, lsl #2]
   16524:	b	16864 <__assert_fail@plt+0x5658>
   16528:	andeq	r6, r1, r4, asr #15
   1652c:			; <UNDEFINED> instruction: 0x000167b8
   16530:	andeq	r6, r1, ip, lsr #15
   16534:	andeq	r6, r1, r0, lsr #15
   16538:	mov	r3, r5
   1653c:	mov	r2, #0
   16540:	mov	r0, r4
   16544:	add	r1, sp, #4
   16548:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   1654c:	ldr	r3, [sp, #4]
   16550:	add	r4, r4, r3
   16554:	mov	r5, r0
   16558:	ldr	r0, [pc, #808]	; 16888 <__assert_fail@plt+0x567c>
   1655c:	bl	10f24 <printf@plt>
   16560:	cmp	r5, #0
   16564:	beq	16788 <__assert_fail@plt+0x557c>
   16568:	sub	r3, r5, #1
   1656c:	cmp	r3, #14
   16570:	bhi	16834 <__assert_fail@plt+0x5628>
   16574:	mov	r1, r5
   16578:	ldr	r0, [pc, #780]	; 1688c <__assert_fail@plt+0x5680>
   1657c:	bl	10f24 <printf@plt>
   16580:	b	16498 <__assert_fail@plt+0x528c>
   16584:	ldr	r0, [pc, #772]	; 16890 <__assert_fail@plt+0x5684>
   16588:	bl	10f24 <printf@plt>
   1658c:	mov	r1, r4
   16590:	mov	r2, r5
   16594:	mvn	r0, #0
   16598:	bl	15008 <__assert_fail@plt+0x3dfc>
   1659c:	mov	r4, r0
   165a0:	mov	r0, r4
   165a4:	add	sp, sp, #8
   165a8:	pop	{r4, r5, r6, pc}
   165ac:	mov	r3, r5
   165b0:	add	r1, sp, #4
   165b4:	mov	r2, #0
   165b8:	mov	r0, r4
   165bc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   165c0:	ldr	r3, [sp, #4]
   165c4:	mov	r2, #5
   165c8:	add	r4, r4, r3
   165cc:	cmp	r0, #0
   165d0:	movne	r0, #0
   165d4:	ldrne	r1, [pc, #696]	; 16894 <__assert_fail@plt+0x5688>
   165d8:	ldreq	r1, [pc, #696]	; 16898 <__assert_fail@plt+0x568c>
   165dc:	bl	10f90 <dcgettext@plt>
   165e0:	mov	r1, r0
   165e4:	ldr	r0, [pc, #688]	; 1689c <__assert_fail@plt+0x5690>
   165e8:	bl	10f24 <printf@plt>
   165ec:	b	16498 <__assert_fail@plt+0x528c>
   165f0:	mov	r3, r5
   165f4:	add	r1, sp, #4
   165f8:	mov	r2, #0
   165fc:	mov	r0, r4
   16600:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16604:	ldr	r3, [sp, #4]
   16608:	add	r4, r4, r3
   1660c:	mov	r1, r0
   16610:	ldr	r0, [pc, #648]	; 168a0 <__assert_fail@plt+0x5694>
   16614:	bl	10f24 <printf@plt>
   16618:	b	16498 <__assert_fail@plt+0x528c>
   1661c:	mov	r3, r5
   16620:	mov	r2, #0
   16624:	mov	r0, r4
   16628:	add	r1, sp, #4
   1662c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16630:	ldr	r2, [pc, #620]	; 168a4 <__assert_fail@plt+0x5698>
   16634:	cmp	r6, #10
   16638:	ldr	r3, [sp, #4]
   1663c:	add	r4, r4, r3
   16640:	mov	r5, r0
   16644:	ldr	r0, [pc, #604]	; 168a8 <__assert_fail@plt+0x569c>
   16648:	movne	r0, r2
   1664c:	bl	10f24 <printf@plt>
   16650:	cmp	r5, #1
   16654:	beq	16840 <__assert_fail@plt+0x5634>
   16658:	cmp	r5, #0
   1665c:	beq	16788 <__assert_fail@plt+0x557c>
   16660:	cmp	r5, #2
   16664:	beq	1677c <__assert_fail@plt+0x5570>
   16668:	mov	r2, #5
   1666c:	ldr	r1, [pc, #568]	; 168ac <__assert_fail@plt+0x56a0>
   16670:	mov	r0, #0
   16674:	bl	10f90 <dcgettext@plt>
   16678:	bl	10f24 <printf@plt>
   1667c:	b	16498 <__assert_fail@plt+0x528c>
   16680:	mov	r3, r5
   16684:	add	r1, sp, #4
   16688:	mov	r2, #0
   1668c:	mov	r0, r4
   16690:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16694:	ldr	r3, [pc, #532]	; 168b0 <__assert_fail@plt+0x56a4>
   16698:	ldr	r2, [sp, #4]
   1669c:	ldr	r1, [pc, #528]	; 168b4 <__assert_fail@plt+0x56a8>
   166a0:	add	r4, r4, r2
   166a4:	cmp	r0, #0
   166a8:	moveq	r1, r3
   166ac:	ldr	r0, [pc, #516]	; 168b8 <__assert_fail@plt+0x56ac>
   166b0:	bl	10f24 <printf@plt>
   166b4:	b	16498 <__assert_fail@plt+0x528c>
   166b8:	mov	r3, r5
   166bc:	add	r1, sp, #4
   166c0:	mov	r2, #0
   166c4:	mov	r0, r4
   166c8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   166cc:	ldr	r3, [sp, #4]
   166d0:	mov	r2, #5
   166d4:	add	r4, r4, r3
   166d8:	cmp	r0, #0
   166dc:	movne	r0, #0
   166e0:	ldrne	r1, [pc, #468]	; 168bc <__assert_fail@plt+0x56b0>
   166e4:	ldreq	r1, [pc, #468]	; 168c0 <__assert_fail@plt+0x56b4>
   166e8:	bl	10f90 <dcgettext@plt>
   166ec:	mov	r1, r0
   166f0:	ldr	r0, [pc, #460]	; 168c4 <__assert_fail@plt+0x56b8>
   166f4:	bl	10f24 <printf@plt>
   166f8:	b	16498 <__assert_fail@plt+0x528c>
   166fc:	mov	r3, r5
   16700:	add	r1, sp, #4
   16704:	mov	r2, #0
   16708:	mov	r0, r4
   1670c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16710:	ldr	r3, [sp, #4]
   16714:	mov	r2, #5
   16718:	add	r4, r4, r3
   1671c:	cmp	r0, #0
   16720:	movne	r0, #0
   16724:	ldrne	r1, [pc, #412]	; 168c8 <__assert_fail@plt+0x56bc>
   16728:	ldreq	r1, [pc, #396]	; 168bc <__assert_fail@plt+0x56b0>
   1672c:	bl	10f90 <dcgettext@plt>
   16730:	mov	r1, r0
   16734:	ldr	r0, [pc, #400]	; 168cc <__assert_fail@plt+0x56c0>
   16738:	bl	10f24 <printf@plt>
   1673c:	b	16498 <__assert_fail@plt+0x528c>
   16740:	mov	r3, r5
   16744:	add	r1, sp, #4
   16748:	mov	r2, #0
   1674c:	mov	r0, r4
   16750:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   16754:	ldr	r3, [sp, #4]
   16758:	add	r4, r4, r3
   1675c:	mov	r1, r0
   16760:	ldr	r0, [pc, #360]	; 168d0 <__assert_fail@plt+0x56c4>
   16764:	bl	10f24 <printf@plt>
   16768:	b	16498 <__assert_fail@plt+0x528c>
   1676c:	ldr	r0, [pc, #352]	; 168d4 <__assert_fail@plt+0x56c8>
   16770:	b	16588 <__assert_fail@plt+0x537c>
   16774:	ldr	r0, [pc, #348]	; 168d8 <__assert_fail@plt+0x56cc>
   16778:	b	16588 <__assert_fail@plt+0x537c>
   1677c:	ldr	r0, [pc, #344]	; 168dc <__assert_fail@plt+0x56d0>
   16780:	bl	11014 <puts@plt>
   16784:	b	16498 <__assert_fail@plt+0x528c>
   16788:	mov	r2, #5
   1678c:	ldr	r1, [pc, #332]	; 168e0 <__assert_fail@plt+0x56d4>
   16790:	mov	r0, r5
   16794:	bl	10f90 <dcgettext@plt>
   16798:	bl	10f24 <printf@plt>
   1679c:	b	16498 <__assert_fail@plt+0x528c>
   167a0:	ldr	r0, [pc, #316]	; 168e4 <__assert_fail@plt+0x56d8>
   167a4:	bl	11014 <puts@plt>
   167a8:	b	16498 <__assert_fail@plt+0x528c>
   167ac:	ldr	r0, [pc, #308]	; 168e8 <__assert_fail@plt+0x56dc>
   167b0:	bl	11014 <puts@plt>
   167b4:	b	16498 <__assert_fail@plt+0x528c>
   167b8:	ldr	r0, [pc, #300]	; 168ec <__assert_fail@plt+0x56e0>
   167bc:	bl	11014 <puts@plt>
   167c0:	b	16498 <__assert_fail@plt+0x528c>
   167c4:	ldr	r0, [pc, #292]	; 168f0 <__assert_fail@plt+0x56e4>
   167c8:	bl	11014 <puts@plt>
   167cc:	b	16498 <__assert_fail@plt+0x528c>
   167d0:	ldr	r1, [pc, #284]	; 168f4 <__assert_fail@plt+0x56e8>
   167d4:	mov	r0, #0
   167d8:	bl	10f90 <dcgettext@plt>
   167dc:	bl	10f24 <printf@plt>
   167e0:	b	16498 <__assert_fail@plt+0x528c>
   167e4:	ldr	r1, [pc, #268]	; 168f8 <__assert_fail@plt+0x56ec>
   167e8:	mov	r0, #0
   167ec:	bl	10f90 <dcgettext@plt>
   167f0:	bl	10f24 <printf@plt>
   167f4:	b	16498 <__assert_fail@plt+0x528c>
   167f8:	ldr	r1, [pc, #252]	; 168fc <__assert_fail@plt+0x56f0>
   167fc:	mov	r0, #0
   16800:	bl	10f90 <dcgettext@plt>
   16804:	bl	10f24 <printf@plt>
   16808:	b	16498 <__assert_fail@plt+0x528c>
   1680c:	ldr	r1, [pc, #236]	; 16900 <__assert_fail@plt+0x56f4>
   16810:	mov	r0, #0
   16814:	bl	10f90 <dcgettext@plt>
   16818:	bl	10f24 <printf@plt>
   1681c:	b	16498 <__assert_fail@plt+0x528c>
   16820:	ldr	r1, [pc, #220]	; 16904 <__assert_fail@plt+0x56f8>
   16824:	mov	r0, #0
   16828:	bl	10f90 <dcgettext@plt>
   1682c:	bl	10f24 <printf@plt>
   16830:	b	16498 <__assert_fail@plt+0x528c>
   16834:	ldr	r0, [pc, #204]	; 16908 <__assert_fail@plt+0x56fc>
   16838:	bl	11014 <puts@plt>
   1683c:	b	16498 <__assert_fail@plt+0x528c>
   16840:	ldr	r0, [pc, #196]	; 1690c <__assert_fail@plt+0x5700>
   16844:	bl	11014 <puts@plt>
   16848:	b	16498 <__assert_fail@plt+0x528c>
   1684c:	mov	r1, r4
   16850:	mov	r2, r5
   16854:	and	r0, r6, #1
   16858:	bl	15008 <__assert_fail@plt+0x3dfc>
   1685c:	mov	r4, r0
   16860:	b	16498 <__assert_fail@plt+0x528c>
   16864:	mov	r2, #5
   16868:	ldr	r1, [pc, #112]	; 168e0 <__assert_fail@plt+0x56d4>
   1686c:	mov	r0, #0
   16870:	bl	10f90 <dcgettext@plt>
   16874:	bl	10f24 <printf@plt>
   16878:	b	16498 <__assert_fail@plt+0x528c>
   1687c:	andeq	r3, r6, r4, ror r8
   16880:	andeq	r3, r6, r4, ror #12
   16884:	andeq	r3, r6, r8, ror #13
   16888:	andeq	r3, r6, r8, lsr #14
   1688c:	andeq	r3, r6, r4, asr #14
   16890:	andeq	r3, r6, r4, asr r7
   16894:	andeq	r3, r6, ip, ror #14
   16898:	andeq	r3, r6, r0, ror r7
   1689c:	andeq	r3, r6, r4, ror r7
   168a0:	andeq	r3, r6, ip, lsl #15
   168a4:	andeq	r3, r6, ip, asr #12
   168a8:	andeq	r3, r6, r8, lsr r6
   168ac:	ldrdeq	r3, [r6], -ip
   168b0:	andeq	r3, r6, r8, lsl r0
   168b4:	andeq	r3, r6, r0, ror #12
   168b8:			; <UNDEFINED> instruction: 0x000637b4
   168bc:	andeq	r3, r6, ip, asr #15
   168c0:	ldrdeq	r3, [r6], -r4
   168c4:	andeq	r3, r6, r0, ror #15
   168c8:	strdeq	r3, [r6], -ip
   168cc:	andeq	r3, r6, r4, lsl #16
   168d0:	andeq	r3, r6, r4, lsr #16
   168d4:	andeq	r3, r6, r4, asr #16
   168d8:	andeq	r3, r6, ip, asr r8
   168dc:			; <UNDEFINED> instruction: 0x000637b0
   168e0:	andeq	r3, r6, r0, lsl #14
   168e4:	andeq	r3, r6, r0, lsr #14
   168e8:	andeq	r3, r6, r8, lsl r7
   168ec:	andeq	r3, r6, r0, lsl r7
   168f0:	andeq	r3, r6, r8, lsl #14
   168f4:	muleq	r6, r4, r6
   168f8:	andeq	r3, r6, ip, ror r6
   168fc:	andeq	r3, r6, ip, asr #13
   16900:			; <UNDEFINED> instruction: 0x000636bc
   16904:	andeq	r3, r6, r8, lsr #13
   16908:	andeq	r3, r6, ip, asr #14
   1690c:	andeq	r3, r6, r8, lsr #15
   16910:	ldrh	r3, [r0]
   16914:	mov	r0, r2
   16918:	cmp	r3, #8
   1691c:	beq	16928 <__assert_fail@plt+0x571c>
   16920:	cmp	r3, #43	; 0x2b
   16924:	bxne	lr
   16928:	uxtb	r0, r2
   1692c:	bx	lr
   16930:	cmp	r0, #92	; 0x5c
   16934:	beq	16ae8 <__assert_fail@plt+0x58dc>
   16938:	bhi	16978 <__assert_fail@plt+0x576c>
   1693c:	cmp	r0, #21
   16940:	bhi	169e8 <__assert_fail@plt+0x57dc>
   16944:	cmp	r0, #20
   16948:	bcs	16ac8 <__assert_fail@plt+0x58bc>
   1694c:	cmp	r0, #4
   16950:	beq	16ad8 <__assert_fail@plt+0x58cc>
   16954:	bls	169c8 <__assert_fail@plt+0x57bc>
   16958:	cmp	r0, #15
   1695c:	beq	16ae8 <__assert_fail@plt+0x58dc>
   16960:	cmp	r0, #18
   16964:	beq	16a90 <__assert_fail@plt+0x5884>
   16968:	cmp	r0, #6
   1696c:	beq	169d8 <__assert_fail@plt+0x57cc>
   16970:	mov	r0, #0
   16974:	bx	lr
   16978:	cmp	r0, #191	; 0xbf
   1697c:	beq	16a90 <__assert_fail@plt+0x5884>
   16980:	bls	16a44 <__assert_fail@plt+0x5838>
   16984:	ldr	r3, [pc, #412]	; 16b28 <__assert_fail@plt+0x591c>
   16988:	cmp	r0, r3
   1698c:	beq	16a90 <__assert_fail@plt+0x5884>
   16990:	bls	16a18 <__assert_fail@plt+0x580c>
   16994:	ldr	r3, [pc, #400]	; 16b2c <__assert_fail@plt+0x5920>
   16998:	cmp	r0, r3
   1699c:	beq	16b18 <__assert_fail@plt+0x590c>
   169a0:	ldr	r3, [pc, #392]	; 16b30 <__assert_fail@plt+0x5924>
   169a4:	cmp	r0, r3
   169a8:	beq	16ab8 <__assert_fail@plt+0x58ac>
   169ac:	ldr	r3, [pc, #384]	; 16b34 <__assert_fail@plt+0x5928>
   169b0:	cmp	r0, r3
   169b4:	bne	16970 <__assert_fail@plt+0x5764>
   169b8:	sub	r0, r1, #10
   169bc:	clz	r0, r0
   169c0:	lsr	r0, r0, #5
   169c4:	bx	lr
   169c8:	cmp	r0, #2
   169cc:	beq	16a90 <__assert_fail@plt+0x5884>
   169d0:	cmp	r0, #3
   169d4:	bne	16970 <__assert_fail@plt+0x5764>
   169d8:	sub	r0, r1, #2
   169dc:	clz	r0, r0
   169e0:	lsr	r0, r0, #5
   169e4:	bx	lr
   169e8:	cmp	r0, #42	; 0x2a
   169ec:	beq	169d8 <__assert_fail@plt+0x57cc>
   169f0:	bhi	16a78 <__assert_fail@plt+0x586c>
   169f4:	cmp	r0, #23
   169f8:	beq	16b08 <__assert_fail@plt+0x58fc>
   169fc:	bcc	16b18 <__assert_fail@plt+0x590c>
   16a00:	cmp	r0, #40	; 0x28
   16a04:	bne	16970 <__assert_fail@plt+0x5764>
   16a08:	sub	r0, r1, #3
   16a0c:	clz	r0, r0
   16a10:	lsr	r0, r0, #5
   16a14:	bx	lr
   16a18:	cmp	r0, #221	; 0xdd
   16a1c:	beq	16a90 <__assert_fail@plt+0x5884>
   16a20:	sub	r3, r3, #460	; 0x1cc
   16a24:	cmp	r0, r3
   16a28:	beq	16af8 <__assert_fail@plt+0x58ec>
   16a2c:	cmp	r0, #195	; 0xc3
   16a30:	bne	16970 <__assert_fail@plt+0x5764>
   16a34:	sub	r0, r1, #49	; 0x31
   16a38:	clz	r0, r0
   16a3c:	lsr	r0, r0, #5
   16a40:	bx	lr
   16a44:	cmp	r0, #181	; 0xb5
   16a48:	bls	16aa0 <__assert_fail@plt+0x5894>
   16a4c:	cmp	r0, #188	; 0xbc
   16a50:	beq	16ad8 <__assert_fail@plt+0x58cc>
   16a54:	cmp	r0, #189	; 0xbd
   16a58:	beq	169d8 <__assert_fail@plt+0x57cc>
   16a5c:	cmp	r0, #183	; 0xb7
   16a60:	bne	16970 <__assert_fail@plt+0x5764>
   16a64:	ldr	r0, [pc, #204]	; 16b38 <__assert_fail@plt+0x592c>
   16a68:	sub	r0, r1, r0
   16a6c:	clz	r0, r0
   16a70:	lsr	r0, r0, #5
   16a74:	bx	lr
   16a78:	cmp	r0, #62	; 0x3e
   16a7c:	beq	169d8 <__assert_fail@plt+0x57cc>
   16a80:	cmp	r0, #83	; 0x53
   16a84:	beq	16af8 <__assert_fail@plt+0x58ec>
   16a88:	cmp	r0, #43	; 0x2b
   16a8c:	bne	16970 <__assert_fail@plt+0x5764>
   16a90:	sub	r0, r1, #6
   16a94:	clz	r0, r0
   16a98:	lsr	r0, r0, #5
   16a9c:	bx	lr
   16aa0:	cmp	r0, #180	; 0xb4
   16aa4:	bcs	169d8 <__assert_fail@plt+0x57cc>
   16aa8:	cmp	r0, #93	; 0x5d
   16aac:	beq	16a34 <__assert_fail@plt+0x5828>
   16ab0:	cmp	r0, #94	; 0x5e
   16ab4:	bne	16970 <__assert_fail@plt+0x5764>
   16ab8:	sub	r0, r1, #14
   16abc:	clz	r0, r0
   16ac0:	lsr	r0, r0, #5
   16ac4:	bx	lr
   16ac8:	sub	r0, r1, #26
   16acc:	clz	r0, r0
   16ad0:	lsr	r0, r0, #5
   16ad4:	bx	lr
   16ad8:	sub	r0, r1, #4
   16adc:	clz	r0, r0
   16ae0:	lsr	r0, r0, #5
   16ae4:	bx	lr
   16ae8:	sub	r0, r1, #9
   16aec:	clz	r0, r0
   16af0:	lsr	r0, r0, #5
   16af4:	bx	lr
   16af8:	sub	r0, r1, #36	; 0x24
   16afc:	clz	r0, r0
   16b00:	lsr	r0, r0, #5
   16b04:	bx	lr
   16b08:	sub	r0, r1, #13
   16b0c:	clz	r0, r0
   16b10:	lsr	r0, r0, #5
   16b14:	bx	lr
   16b18:	sub	r0, r1, #5
   16b1c:	clz	r0, r0
   16b20:	lsr	r0, r0, #5
   16b24:	bx	lr
   16b28:	andeq	r1, r0, r3, lsr #4
   16b2c:	muleq	r0, r0, r3
   16b30:	andeq	sl, r0, r7, asr #23
   16b34:	andeq	r9, r0, r6, lsr #32
   16b38:	andeq	r0, r0, r5, lsl #2
   16b3c:	cmp	r0, #50	; 0x32
   16b40:	beq	16c18 <__assert_fail@plt+0x5a0c>
   16b44:	bls	16b84 <__assert_fail@plt+0x5978>
   16b48:	cmp	r0, #183	; 0xb7
   16b4c:	beq	16c2c <__assert_fail@plt+0x5a20>
   16b50:	bls	16bc0 <__assert_fail@plt+0x59b4>
   16b54:	ldr	r3, [pc, #256]	; 16c5c <__assert_fail@plt+0x5a50>
   16b58:	cmp	r0, r3
   16b5c:	beq	16c3c <__assert_fail@plt+0x5a30>
   16b60:	ldr	r3, [pc, #248]	; 16c60 <__assert_fail@plt+0x5a54>
   16b64:	cmp	r0, r3
   16b68:	beq	16c4c <__assert_fail@plt+0x5a40>
   16b6c:	cmp	r0, #191	; 0xbf
   16b70:	bne	16bb8 <__assert_fail@plt+0x59ac>
   16b74:	sub	r0, r1, #5
   16b78:	clz	r0, r0
   16b7c:	lsr	r0, r0, #5
   16b80:	bx	lr
   16b84:	cmp	r0, #18
   16b88:	beq	16c08 <__assert_fail@plt+0x59fc>
   16b8c:	bls	16be8 <__assert_fail@plt+0x59dc>
   16b90:	cmp	r0, #22
   16b94:	beq	16c4c <__assert_fail@plt+0x5a40>
   16b98:	cmp	r0, #43	; 0x2b
   16b9c:	beq	16c08 <__assert_fail@plt+0x59fc>
   16ba0:	cmp	r0, #21
   16ba4:	bne	16bb8 <__assert_fail@plt+0x59ac>
   16ba8:	sub	r0, r1, #44	; 0x2c
   16bac:	clz	r0, r0
   16bb0:	lsr	r0, r0, #5
   16bb4:	bx	lr
   16bb8:	mov	r0, #0
   16bbc:	bx	lr
   16bc0:	cmp	r0, #62	; 0x3e
   16bc4:	beq	16bd8 <__assert_fail@plt+0x59cc>
   16bc8:	bcc	16bb8 <__assert_fail@plt+0x59ac>
   16bcc:	sub	r0, r0, #180	; 0xb4
   16bd0:	cmp	r0, #1
   16bd4:	bhi	16bb8 <__assert_fail@plt+0x59ac>
   16bd8:	sub	r0, r1, #24
   16bdc:	clz	r0, r0
   16be0:	lsr	r0, r0, #5
   16be4:	bx	lr
   16be8:	cmp	r0, #2
   16bec:	beq	16c08 <__assert_fail@plt+0x59fc>
   16bf0:	cmp	r0, #15
   16bf4:	bne	16bb8 <__assert_fail@plt+0x59ac>
   16bf8:	sub	r0, r1, #72	; 0x48
   16bfc:	clz	r0, r0
   16c00:	lsr	r0, r0, #5
   16c04:	bx	lr
   16c08:	sub	r0, r1, #46	; 0x2e
   16c0c:	clz	r0, r0
   16c10:	lsr	r0, r0, #5
   16c14:	bx	lr
   16c18:	sub	r0, r1, #78	; 0x4e
   16c1c:	cmp	r0, #1
   16c20:	movhi	r0, #0
   16c24:	movls	r0, #1
   16c28:	bx	lr
   16c2c:	sub	r0, r1, #260	; 0x104
   16c30:	clz	r0, r0
   16c34:	lsr	r0, r0, #5
   16c38:	bx	lr
   16c3c:	sub	r0, r1, #11
   16c40:	clz	r0, r0
   16c44:	lsr	r0, r0, #5
   16c48:	bx	lr
   16c4c:	sub	r0, r1, #23
   16c50:	clz	r0, r0
   16c54:	lsr	r0, r0, #5
   16c58:	bx	lr
   16c5c:	andeq	r9, r0, r6, lsr #32
   16c60:	muleq	r0, r0, r3
   16c64:	cmp	r2, #0
   16c68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c6c:	beq	16d70 <__assert_fail@plt+0x5b64>
   16c70:	ldr	r0, [r0]
   16c74:	cmp	r0, #0
   16c78:	beq	16d84 <__assert_fail@plt+0x5b78>
   16c7c:	ldr	r3, [r2]
   16c80:	ldr	r2, [r1]
   16c84:	cmp	r3, r2
   16c88:	addcc	r0, r0, r3
   16c8c:	bcs	16d5c <__assert_fail@plt+0x5b50>
   16c90:	mov	r1, #128	; 0x80
   16c94:	ldr	r2, [pc, #248]	; 16d94 <__assert_fail@plt+0x5b88>
   16c98:	ldr	r5, [pc, #248]	; 16d98 <__assert_fail@plt+0x5b8c>
   16c9c:	mov	r8, #60	; 0x3c
   16ca0:	ldr	r4, [pc, #244]	; 16d9c <__assert_fail@plt+0x5b90>
   16ca4:	mov	r7, #62	; 0x3e
   16ca8:	mov	r6, #94	; 0x5e
   16cac:	b	16cd0 <__assert_fail@plt+0x5ac4>
   16cb0:	cmp	r1, #1
   16cb4:	beq	16d20 <__assert_fail@plt+0x5b14>
   16cb8:	strb	r6, [lr], #2
   16cbc:	sub	r1, r1, #2
   16cc0:	strb	r9, [r2, #1]
   16cc4:	mov	r2, lr
   16cc8:	cmp	r1, #0
   16ccc:	beq	16d20 <__assert_fail@plt+0x5b14>
   16cd0:	ldrb	r3, [r0], #1
   16cd4:	mov	lr, r2
   16cd8:	cmp	r3, #0
   16cdc:	lsl	ip, r3, #1
   16ce0:	add	r9, r3, #64	; 0x40
   16ce4:	beq	16d20 <__assert_fail@plt+0x5b14>
   16ce8:	ldrh	ip, [r5, ip]
   16cec:	tst	ip, #2
   16cf0:	bne	16cb0 <__assert_fail@plt+0x5aa4>
   16cf4:	and	lr, r3, #15
   16cf8:	tst	ip, #16
   16cfc:	add	sl, r4, r3, lsr #4
   16d00:	add	lr, r4, lr
   16d04:	mov	r9, r2
   16d08:	beq	16d30 <__assert_fail@plt+0x5b24>
   16d0c:	sub	r1, r1, #1
   16d10:	cmp	r1, #0
   16d14:	strb	r3, [r9], #1
   16d18:	mov	r2, r9
   16d1c:	bne	16cd0 <__assert_fail@plt+0x5ac4>
   16d20:	mov	r3, #0
   16d24:	strb	r3, [r2]
   16d28:	ldr	r0, [pc, #100]	; 16d94 <__assert_fail@plt+0x5b88>
   16d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d30:	cmp	r1, #3
   16d34:	sub	r1, r1, #4
   16d38:	bls	16d20 <__assert_fail@plt+0x5b14>
   16d3c:	ldrb	ip, [sl, #160]	; 0xa0
   16d40:	ldrb	r3, [lr, #160]	; 0xa0
   16d44:	strb	r8, [r2]
   16d48:	strb	ip, [r2, #1]
   16d4c:	strb	r3, [r2, #2]
   16d50:	strb	r7, [r2, #3]
   16d54:	add	r2, r2, #4
   16d58:	b	16cc8 <__assert_fail@plt+0x5abc>
   16d5c:	mov	r2, #5
   16d60:	ldr	r1, [pc, #56]	; 16da0 <__assert_fail@plt+0x5b94>
   16d64:	mov	r0, #0
   16d68:	bl	10f90 <dcgettext@plt>
   16d6c:	b	16c90 <__assert_fail@plt+0x5a84>
   16d70:	mov	r0, r2
   16d74:	ldr	r1, [pc, #40]	; 16da4 <__assert_fail@plt+0x5b98>
   16d78:	mov	r2, #5
   16d7c:	bl	10f90 <dcgettext@plt>
   16d80:	b	16c90 <__assert_fail@plt+0x5a84>
   16d84:	mov	r2, #5
   16d88:	ldr	r1, [pc, #24]	; 16da8 <__assert_fail@plt+0x5b9c>
   16d8c:	bl	10f90 <dcgettext@plt>
   16d90:	b	16c90 <__assert_fail@plt+0x5a84>
   16d94:	andeq	sl, r9, r4, lsr #12
   16d98:	andeq	r7, r8, r8, ror #25
   16d9c:	andeq	r8, r5, r4, ror #27
   16da0:	andeq	r3, r6, ip
   16da4:	muleq	r6, r4, r8
   16da8:	muleq	r6, ip, r8
   16dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16db0:	sub	sp, sp, #20
   16db4:	cmp	r0, #40	; 0x28
   16db8:	ldrd	r8, [sp, #64]	; 0x40
   16dbc:	str	r3, [sp, #12]
   16dc0:	add	r2, r1, r2, lsl #5
   16dc4:	biceq	ip, r8, #1
   16dc8:	moveq	r3, r9
   16dcc:	moveq	r8, ip
   16dd0:	moveq	r9, r3
   16dd4:	cmp	r1, r2
   16dd8:	ldrh	lr, [sp, #60]	; 0x3c
   16ddc:	bcs	16ee0 <__assert_fail@plt+0x5cd4>
   16de0:	mov	r4, #1048576	; 0x100000
   16de4:	mov	r5, #0
   16de8:	mov	sl, #0
   16dec:	strd	r4, [sp]
   16df0:	mov	fp, r2
   16df4:	b	16e04 <__assert_fail@plt+0x5bf8>
   16df8:	add	r1, ip, #32
   16dfc:	cmp	r1, fp
   16e00:	bcs	16e6c <__assert_fail@plt+0x5c60>
   16e04:	sub	r3, fp, r1
   16e08:	cmp	r0, #40	; 0x28
   16e0c:	asr	r3, r3, #5
   16e10:	add	r3, r3, r3, lsr #31
   16e14:	asr	r3, r3, #1
   16e18:	lsl	r3, r3, #5
   16e1c:	add	ip, r1, r3
   16e20:	ldrd	r2, [r3, r1]
   16e24:	moveq	r4, r3
   16e28:	moveq	r3, r4
   16e2c:	ldr	r4, [ip, #16]
   16e30:	biceq	r5, r2, #1
   16e34:	moveq	r2, r5
   16e38:	cmp	r4, #0
   16e3c:	beq	16e54 <__assert_fail@plt+0x5c48>
   16e40:	cmp	lr, #0
   16e44:	beq	16ea8 <__assert_fail@plt+0x5c9c>
   16e48:	ldr	r5, [ip, #24]
   16e4c:	cmp	lr, r5
   16e50:	beq	16ea8 <__assert_fail@plt+0x5c9c>
   16e54:	cmp	r3, r9
   16e58:	cmpeq	r2, r8
   16e5c:	bls	16df8 <__assert_fail@plt+0x5bec>
   16e60:	mov	fp, ip
   16e64:	cmp	r1, fp
   16e68:	bcc	16e04 <__assert_fail@plt+0x5bf8>
   16e6c:	cmp	sl, #0
   16e70:	beq	16ee0 <__assert_fail@plt+0x5cd4>
   16e74:	ldr	ip, [sl, #16]
   16e78:	ldr	r3, [sp, #56]	; 0x38
   16e7c:	cmp	r3, ip
   16e80:	bls	16efc <__assert_fail@plt+0x5cf0>
   16e84:	ldr	r3, [sp, #12]
   16e88:	add	r0, r3, ip
   16e8c:	ldr	r3, [sp, #72]	; 0x48
   16e90:	ldr	r1, [sp, #76]	; 0x4c
   16e94:	str	r0, [r3]
   16e98:	ldrd	r2, [sp]
   16e9c:	strd	r2, [r1]
   16ea0:	add	sp, sp, #20
   16ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ea8:	cmp	r3, r9
   16eac:	cmpeq	r2, r8
   16eb0:	bhi	16e60 <__assert_fail@plt+0x5c54>
   16eb4:	subs	r6, r8, r2
   16eb8:	sbc	r7, r9, r3
   16ebc:	ldrd	r2, [sp]
   16ec0:	cmp	r7, r3
   16ec4:	cmpeq	r6, r2
   16ec8:	bcs	16df8 <__assert_fail@plt+0x5bec>
   16ecc:	orrs	r3, r6, r7
   16ed0:	beq	16f10 <__assert_fail@plt+0x5d04>
   16ed4:	mov	sl, ip
   16ed8:	strd	r6, [sp]
   16edc:	b	16df8 <__assert_fail@plt+0x5bec>
   16ee0:	ldr	r2, [sp, #72]	; 0x48
   16ee4:	mov	r3, #0
   16ee8:	str	r3, [r2]
   16eec:	ldr	r3, [sp, #76]	; 0x4c
   16ef0:	strd	r8, [r3]
   16ef4:	add	sp, sp, #20
   16ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16efc:	mov	r2, #5
   16f00:	ldr	r1, [pc, #20]	; 16f1c <__assert_fail@plt+0x5d10>
   16f04:	mov	r0, #0
   16f08:	bl	10f90 <dcgettext@plt>
   16f0c:	b	16e8c <__assert_fail@plt+0x5c80>
   16f10:	mov	ip, r4
   16f14:	strd	r6, [sp]
   16f18:	b	16e78 <__assert_fail@plt+0x5c6c>
   16f1c:	andeq	r3, r6, ip
   16f20:	ldr	r3, [r0, #84]	; 0x54
   16f24:	cmp	r3, r1
   16f28:	bls	16f44 <__assert_fail@plt+0x5d38>
   16f2c:	add	r2, r1, r1, lsl #3
   16f30:	ldr	r3, [r0, #96]	; 0x60
   16f34:	add	r1, r0, #108	; 0x6c
   16f38:	add	r2, r3, r2, lsl #3
   16f3c:	add	r0, r0, #104	; 0x68
   16f40:	b	16c64 <__assert_fail@plt+0x5a58>
   16f44:	mov	r2, #5
   16f48:	ldr	r1, [pc, #4]	; 16f54 <__assert_fail@plt+0x5d48>
   16f4c:	mov	r0, #0
   16f50:	b	10f90 <dcgettext@plt>
   16f54:	andeq	r3, r6, ip
   16f58:	cmp	r0, #3
   16f5c:	bhi	16f70 <__assert_fail@plt+0x5d64>
   16f60:	ldr	r3, [pc, #60]	; 16fa4 <__assert_fail@plt+0x5d98>
   16f64:	add	r0, r3, r0, lsl #2
   16f68:	ldr	r0, [r0, #180]	; 0xb4
   16f6c:	bx	lr
   16f70:	push	{r4, lr}
   16f74:	mov	r2, #5
   16f78:	mov	r4, r0
   16f7c:	ldr	r1, [pc, #36]	; 16fa8 <__assert_fail@plt+0x5d9c>
   16f80:	mov	r0, #0
   16f84:	bl	10f90 <dcgettext@plt>
   16f88:	mov	r1, r4
   16f8c:	bl	548ac <error@@Base>
   16f90:	mov	r2, #5
   16f94:	ldr	r1, [pc, #16]	; 16fac <__assert_fail@plt+0x5da0>
   16f98:	mov	r0, #0
   16f9c:	pop	{r4, lr}
   16fa0:	b	10f90 <dcgettext@plt>
   16fa4:	andeq	r8, r5, r4, ror #27
   16fa8:	andeq	r3, r6, ip, lsr #17
   16fac:	andeq	r2, r6, r0, asr #31
   16fb0:	cmp	r0, #0
   16fb4:	push	{r4, lr}
   16fb8:	mov	r4, r1
   16fbc:	beq	16fc4 <__assert_fail@plt+0x5db8>
   16fc0:	bl	10f54 <free@plt>
   16fc4:	ldr	r0, [r4]
   16fc8:	cmp	r0, #0
   16fcc:	popeq	{r4, pc}
   16fd0:	pop	{r4, lr}
   16fd4:	b	10f54 <free@plt>
   16fd8:	cmn	r1, #15
   16fdc:	beq	17054 <__assert_fail@plt+0x5e48>
   16fe0:	cmn	r1, #14
   16fe4:	beq	1704c <__assert_fail@plt+0x5e40>
   16fe8:	cmp	r1, #0
   16fec:	beq	17044 <__assert_fail@plt+0x5e38>
   16ff0:	cmn	r1, #256	; 0x100
   16ff4:	push	{r4, lr}
   16ff8:	mov	r4, r1
   16ffc:	ldrh	r3, [r0, #66]	; 0x42
   17000:	beq	1705c <__assert_fail@plt+0x5e50>
   17004:	sub	r2, r3, #180	; 0xb4
   17008:	cmp	r3, #62	; 0x3e
   1700c:	cmpne	r2, #1
   17010:	bhi	1701c <__assert_fail@plt+0x5e10>
   17014:	cmn	r1, #254	; 0xfe
   17018:	beq	1710c <__assert_fail@plt+0x5f00>
   1701c:	cmn	r4, #253	; 0xfd
   17020:	bne	17074 <__assert_fail@plt+0x5e68>
   17024:	cmp	r3, #8
   17028:	beq	1706c <__assert_fail@plt+0x5e60>
   1702c:	uxth	r2, r4
   17030:	ldr	r1, [pc, #272]	; 17148 <__assert_fail@plt+0x5f3c>
   17034:	ldr	r0, [pc, #272]	; 1714c <__assert_fail@plt+0x5f40>
   17038:	bl	1114c <sprintf@plt>
   1703c:	ldr	r0, [pc, #264]	; 1714c <__assert_fail@plt+0x5f40>
   17040:	pop	{r4, pc}
   17044:	ldr	r0, [pc, #260]	; 17150 <__assert_fail@plt+0x5f44>
   17048:	bx	lr
   1704c:	ldr	r0, [pc, #256]	; 17154 <__assert_fail@plt+0x5f48>
   17050:	bx	lr
   17054:	ldr	r0, [pc, #252]	; 17158 <__assert_fail@plt+0x5f4c>
   17058:	bx	lr
   1705c:	cmp	r3, #50	; 0x32
   17060:	beq	17114 <__assert_fail@plt+0x5f08>
   17064:	cmp	r3, #140	; 0x8c
   17068:	bne	1702c <__assert_fail@plt+0x5e20>
   1706c:	ldr	r0, [pc, #232]	; 1715c <__assert_fail@plt+0x5f50>
   17070:	pop	{r4, pc}
   17074:	cmp	r3, #8
   17078:	cmneq	r4, #252	; 0xfc
   1707c:	moveq	r3, #1
   17080:	movne	r3, #0
   17084:	beq	17140 <__assert_fail@plt+0x5f34>
   17088:	add	r2, r4, #256	; 0x100
   1708c:	cmp	r2, #31
   17090:	bls	1702c <__assert_fail@plt+0x5e20>
   17094:	add	r2, r4, #224	; 0xe0
   17098:	cmp	r2, #31
   1709c:	bls	170f4 <__assert_fail@plt+0x5ee8>
   170a0:	cmn	r4, #256	; 0x100
   170a4:	bcs	17128 <__assert_fail@plt+0x5f1c>
   170a8:	ldr	r2, [r0, #84]	; 0x54
   170ac:	cmp	r4, r2
   170b0:	bcc	170dc <__assert_fail@plt+0x5ed0>
   170b4:	mov	r0, r3
   170b8:	mov	r2, #5
   170bc:	ldr	r1, [pc, #156]	; 17160 <__assert_fail@plt+0x5f54>
   170c0:	bl	10f90 <dcgettext@plt>
   170c4:	mov	r2, r4
   170c8:	mov	r1, r0
   170cc:	ldr	r0, [pc, #120]	; 1714c <__assert_fail@plt+0x5f40>
   170d0:	bl	1114c <sprintf@plt>
   170d4:	ldr	r0, [pc, #112]	; 1714c <__assert_fail@plt+0x5f40>
   170d8:	pop	{r4, pc}
   170dc:	mov	r2, r4
   170e0:	ldr	r1, [pc, #124]	; 17164 <__assert_fail@plt+0x5f58>
   170e4:	ldr	r0, [pc, #96]	; 1714c <__assert_fail@plt+0x5f40>
   170e8:	bl	1114c <sprintf@plt>
   170ec:	ldr	r0, [pc, #88]	; 1714c <__assert_fail@plt+0x5f40>
   170f0:	pop	{r4, pc}
   170f4:	uxth	r2, r4
   170f8:	ldr	r1, [pc, #104]	; 17168 <__assert_fail@plt+0x5f5c>
   170fc:	ldr	r0, [pc, #72]	; 1714c <__assert_fail@plt+0x5f40>
   17100:	bl	1114c <sprintf@plt>
   17104:	ldr	r0, [pc, #64]	; 1714c <__assert_fail@plt+0x5f40>
   17108:	pop	{r4, pc}
   1710c:	ldr	r0, [pc, #88]	; 1716c <__assert_fail@plt+0x5f60>
   17110:	pop	{r4, pc}
   17114:	ldrb	r3, [r0, #23]
   17118:	cmp	r3, #1
   1711c:	bne	1702c <__assert_fail@plt+0x5e20>
   17120:	ldr	r0, [pc, #72]	; 17170 <__assert_fail@plt+0x5f64>
   17124:	pop	{r4, pc}
   17128:	uxth	r2, r4
   1712c:	ldr	r1, [pc, #64]	; 17174 <__assert_fail@plt+0x5f68>
   17130:	ldr	r0, [pc, #20]	; 1714c <__assert_fail@plt+0x5f40>
   17134:	bl	1114c <sprintf@plt>
   17138:	ldr	r0, [pc, #12]	; 1714c <__assert_fail@plt+0x5f40>
   1713c:	pop	{r4, pc}
   17140:	ldr	r0, [pc, #48]	; 17178 <__assert_fail@plt+0x5f6c>
   17144:	pop	{r4, pc}
   17148:	andeq	r3, r6, r0, lsl #18
   1714c:	andeq	sl, r9, r8, lsr #13
   17150:	strdeq	r3, [r6], -ip
   17154:	andeq	r3, r6, r4, ror #17
   17158:	andeq	r9, r7, r0, asr #28
   1715c:	strdeq	r3, [r6], -r4
   17160:	andeq	r3, r6, r4, lsr #18
   17164:	andeq	r3, r6, ip, lsr r9
   17168:	andeq	r3, r6, ip, lsl #18
   1716c:	ldrdeq	r3, [r6], -r0
   17170:	andeq	r3, r6, r8, ror #17
   17174:	andeq	r3, r6, r8, lsl r9
   17178:	ldrdeq	r3, [r6], -ip
   1717c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17180:	sub	sp, sp, #20
   17184:	ldrd	r8, [sp, #56]	; 0x38
   17188:	ldrd	r6, [sp, #64]	; 0x40
   1718c:	orrs	ip, r8, r9
   17190:	moveq	r4, #1
   17194:	movne	r4, #0
   17198:	orrs	ip, r6, r7
   1719c:	moveq	r4, #1
   171a0:	cmp	r4, #0
   171a4:	bne	172cc <__assert_fail@plt+0x60c0>
   171a8:	cmp	r9, r4
   171ac:	cmpeq	r8, r8
   171b0:	str	r1, [sp, #8]
   171b4:	mov	r5, r0
   171b8:	bne	172dc <__assert_fail@plt+0x60d0>
   171bc:	cmp	r7, r4
   171c0:	cmpeq	r6, r6
   171c4:	bne	172dc <__assert_fail@plt+0x60d0>
   171c8:	umull	sl, fp, r8, r6
   171cc:	mul	r1, r8, r7
   171d0:	strd	sl, [sp]
   171d4:	mla	r1, r6, r9, r1
   171d8:	ldr	r0, [sp, #4]
   171dc:	add	r1, r1, r0
   171e0:	str	r1, [sp, #4]
   171e4:	ldrd	r0, [sp]
   171e8:	cmp	r7, r1
   171ec:	cmpeq	r6, r0
   171f0:	bhi	17388 <__assert_fail@plt+0x617c>
   171f4:	ldrd	sl, [r2]
   171f8:	ldrd	r0, [sp]
   171fc:	cmp	r1, fp
   17200:	cmpeq	r0, sl
   17204:	bhi	17344 <__assert_fail@plt+0x6138>
   17208:	ldr	r2, [pc, #616]	; 17478 <__assert_fail@plt+0x626c>
   1720c:	ldr	r2, [r2, #656]	; 0x290
   17210:	add	r2, r3, r2
   17214:	adds	r0, r0, r2
   17218:	adc	r1, r1, #0
   1721c:	cmp	fp, r1
   17220:	cmpeq	sl, r0
   17224:	bcc	17344 <__assert_fail@plt+0x6138>
   17228:	str	r3, [sp, #12]
   1722c:	ldr	r3, [sp, #8]
   17230:	mov	r1, r2
   17234:	mov	r2, r4
   17238:	ldr	r0, [r3]
   1723c:	bl	111a0 <fseek@plt>
   17240:	ldr	r3, [sp, #12]
   17244:	cmp	r0, #0
   17248:	bne	1743c <__assert_fail@plt+0x6230>
   1724c:	cmp	r5, #0
   17250:	movne	r4, r5
   17254:	beq	173e4 <__assert_fail@plt+0x61d8>
   17258:	ldr	r3, [sp, #8]
   1725c:	mov	r1, r8
   17260:	mov	r2, r6
   17264:	ldr	r3, [r3]
   17268:	mov	r0, r4
   1726c:	bl	10ffc <fread@plt>
   17270:	mov	r1, #0
   17274:	cmp	r7, r1
   17278:	cmpeq	r6, r0
   1727c:	beq	172d0 <__assert_fail@plt+0x60c4>
   17280:	ldr	r3, [sp, #72]	; 0x48
   17284:	cmp	r3, #0
   17288:	beq	172bc <__assert_fail@plt+0x60b0>
   1728c:	ldr	r1, [pc, #488]	; 1747c <__assert_fail@plt+0x6270>
   17290:	mov	r2, #5
   17294:	mov	r0, #0
   17298:	bl	10f90 <dcgettext@plt>
   1729c:	ldrd	r2, [sp]
   172a0:	mov	r6, r0
   172a4:	ldr	r0, [pc, #468]	; 17480 <__assert_fail@plt+0x6274>
   172a8:	bl	12d28 <__assert_fail@plt+0x1b1c>
   172ac:	ldr	r2, [sp, #72]	; 0x48
   172b0:	mov	r1, r0
   172b4:	mov	r0, r6
   172b8:	bl	548ac <error@@Base>
   172bc:	cmp	r5, r4
   172c0:	beq	172cc <__assert_fail@plt+0x60c0>
   172c4:	mov	r0, r4
   172c8:	bl	10f54 <free@plt>
   172cc:	mov	r4, #0
   172d0:	mov	r0, r4
   172d4:	add	sp, sp, #20
   172d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172dc:	ldr	r3, [sp, #72]	; 0x48
   172e0:	cmp	r3, #0
   172e4:	beq	172cc <__assert_fail@plt+0x60c0>
   172e8:	ldr	r1, [pc, #404]	; 17484 <__assert_fail@plt+0x6278>
   172ec:	mov	r2, #5
   172f0:	mov	r0, #0
   172f4:	bl	10f90 <dcgettext@plt>
   172f8:	mov	r2, r6
   172fc:	mov	r3, r7
   17300:	mov	r4, r0
   17304:	ldr	r0, [pc, #372]	; 17480 <__assert_fail@plt+0x6274>
   17308:	bl	12d28 <__assert_fail@plt+0x1b1c>
   1730c:	mov	r2, r8
   17310:	mov	r3, r9
   17314:	mov	r5, r0
   17318:	ldr	r0, [pc, #352]	; 17480 <__assert_fail@plt+0x6274>
   1731c:	bl	12d28 <__assert_fail@plt+0x1b1c>
   17320:	ldr	r3, [sp, #72]	; 0x48
   17324:	mov	r1, r5
   17328:	mov	r2, r0
   1732c:	mov	r0, r4
   17330:	bl	548ac <error@@Base>
   17334:	mov	r4, #0
   17338:	mov	r0, r4
   1733c:	add	sp, sp, #20
   17340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17344:	ldr	r3, [sp, #72]	; 0x48
   17348:	cmp	r3, #0
   1734c:	beq	172cc <__assert_fail@plt+0x60c0>
   17350:	ldr	r1, [pc, #304]	; 17488 <__assert_fail@plt+0x627c>
   17354:	mov	r2, #5
   17358:	mov	r0, #0
   1735c:	bl	10f90 <dcgettext@plt>
   17360:	ldrd	r2, [sp]
   17364:	mov	r4, r0
   17368:	ldr	r0, [pc, #272]	; 17480 <__assert_fail@plt+0x6274>
   1736c:	bl	12d28 <__assert_fail@plt+0x1b1c>
   17370:	ldr	r2, [sp, #72]	; 0x48
   17374:	mov	r1, r0
   17378:	mov	r0, r4
   1737c:	bl	548ac <error@@Base>
   17380:	mov	r4, #0
   17384:	b	172d0 <__assert_fail@plt+0x60c4>
   17388:	ldr	r3, [sp, #72]	; 0x48
   1738c:	cmp	r3, #0
   17390:	beq	172cc <__assert_fail@plt+0x60c0>
   17394:	ldr	r1, [pc, #240]	; 1748c <__assert_fail@plt+0x6280>
   17398:	mov	r2, #5
   1739c:	mov	r0, r4
   173a0:	bl	10f90 <dcgettext@plt>
   173a4:	mov	r2, r6
   173a8:	mov	r3, r7
   173ac:	mov	r5, r0
   173b0:	ldr	r0, [pc, #200]	; 17480 <__assert_fail@plt+0x6274>
   173b4:	bl	12d28 <__assert_fail@plt+0x1b1c>
   173b8:	mov	r2, r8
   173bc:	mov	r3, r9
   173c0:	mov	r6, r0
   173c4:	ldr	r0, [pc, #180]	; 17480 <__assert_fail@plt+0x6274>
   173c8:	bl	12d28 <__assert_fail@plt+0x1b1c>
   173cc:	ldr	r3, [sp, #72]	; 0x48
   173d0:	mov	r1, r6
   173d4:	mov	r2, r0
   173d8:	mov	r0, r5
   173dc:	bl	548ac <error@@Base>
   173e0:	b	172d0 <__assert_fail@plt+0x60c4>
   173e4:	ldr	r3, [sp]
   173e8:	add	r0, r3, #1
   173ec:	bl	11020 <malloc@plt>
   173f0:	ldr	r2, [sp]
   173f4:	subs	r4, r0, #0
   173f8:	strbne	r5, [r4, r2]
   173fc:	bne	17258 <__assert_fail@plt+0x604c>
   17400:	ldr	r3, [sp, #72]	; 0x48
   17404:	cmp	r3, #0
   17408:	beq	172cc <__assert_fail@plt+0x60c0>
   1740c:	ldr	r1, [pc, #124]	; 17490 <__assert_fail@plt+0x6284>
   17410:	mov	r2, #5
   17414:	bl	10f90 <dcgettext@plt>
   17418:	ldrd	r2, [sp]
   1741c:	mov	r5, r0
   17420:	ldr	r0, [pc, #88]	; 17480 <__assert_fail@plt+0x6274>
   17424:	bl	12d28 <__assert_fail@plt+0x1b1c>
   17428:	ldr	r2, [sp, #72]	; 0x48
   1742c:	mov	r1, r0
   17430:	mov	r0, r5
   17434:	bl	548ac <error@@Base>
   17438:	b	172d0 <__assert_fail@plt+0x60c4>
   1743c:	str	r3, [sp]
   17440:	ldr	r3, [sp, #72]	; 0x48
   17444:	cmp	r3, #0
   17448:	beq	172cc <__assert_fail@plt+0x60c0>
   1744c:	mov	r2, #5
   17450:	ldr	r1, [pc, #60]	; 17494 <__assert_fail@plt+0x6288>
   17454:	mov	r0, r4
   17458:	bl	10f90 <dcgettext@plt>
   1745c:	ldr	r3, [pc, #20]	; 17478 <__assert_fail@plt+0x626c>
   17460:	ldr	r2, [sp, #72]	; 0x48
   17464:	ldr	r1, [r3, #656]	; 0x290
   17468:	ldr	r3, [sp]
   1746c:	add	r1, r3, r1
   17470:	bl	548ac <error@@Base>
   17474:	b	172d0 <__assert_fail@plt+0x60c4>
   17478:	andeq	sl, r9, r8, lsr r4
   1747c:	andeq	r3, r6, r0, asr #20
   17480:	andeq	r3, r6, ip, asr #17
   17484:	andeq	r3, r6, r0, asr #18
   17488:	andeq	r3, r6, r0, asr #19
   1748c:	andeq	r3, r6, r0, lsl #19
   17490:	andeq	r3, r6, r4, lsl sl
   17494:	strdeq	r3, [r6], -r4
   17498:	ldr	ip, [pc, #632]	; 17718 <__assert_fail@plt+0x650c>
   1749c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174a0:	sub	sp, sp, #44	; 0x2c
   174a4:	ldr	sl, [ip]
   174a8:	mov	r7, r1
   174ac:	cmp	sl, #0
   174b0:	mov	r4, r2
   174b4:	str	r3, [sp, #32]
   174b8:	add	r8, r0, #4
   174bc:	add	r6, r0, #8
   174c0:	beq	175c0 <__assert_fail@plt+0x63b4>
   174c4:	mov	fp, #0
   174c8:	mov	r2, #5
   174cc:	ldr	r1, [pc, #584]	; 1771c <__assert_fail@plt+0x6510>
   174d0:	mov	r0, fp
   174d4:	bl	10f90 <dcgettext@plt>
   174d8:	mov	r3, r7
   174dc:	mov	r2, r6
   174e0:	mov	r7, #0
   174e4:	mov	r6, #1
   174e8:	str	r4, [sp, #8]
   174ec:	str	fp, [sp, #12]
   174f0:	mov	r1, r8
   174f4:	strd	r6, [sp]
   174f8:	str	r0, [sp, #16]
   174fc:	mov	r0, fp
   17500:	bl	1717c <__assert_fail@plt+0x5f70>
   17504:	subs	r9, r0, #0
   17508:	beq	175b0 <__assert_fail@plt+0x63a4>
   1750c:	lsr	r4, r4, #3
   17510:	mov	r0, r4
   17514:	mov	r1, #24
   17518:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   1751c:	subs	r3, r0, #0
   17520:	str	r3, [sp, #28]
   17524:	beq	176d4 <__assert_fail@plt+0x64c8>
   17528:	cmp	r4, #0
   1752c:	beq	17588 <__assert_fail@plt+0x637c>
   17530:	add	sl, r9, r4, lsl #3
   17534:	ldr	r8, [pc, #484]	; 17720 <__assert_fail@plt+0x6514>
   17538:	ldr	fp, [sp, #28]
   1753c:	add	sl, sl, #4
   17540:	add	r5, r9, #4
   17544:	mov	r6, #0
   17548:	mov	r7, #0
   1754c:	ldr	r3, [r8]
   17550:	sub	r0, r5, #4
   17554:	mov	r1, #4
   17558:	blx	r3
   1755c:	ldr	r3, [r8]
   17560:	add	fp, fp, #24
   17564:	strd	r0, [fp, #-24]	; 0xffffffe8
   17568:	mov	r0, r5
   1756c:	mov	r1, #4
   17570:	blx	r3
   17574:	add	r5, r5, #8
   17578:	cmp	r5, sl
   1757c:	strd	r6, [fp, #-8]
   17580:	strd	r0, [fp, #-16]
   17584:	bne	1754c <__assert_fail@plt+0x6340>
   17588:	mov	r0, r9
   1758c:	bl	10f54 <free@plt>
   17590:	ldrd	r2, [sp, #28]
   17594:	mov	sl, #1
   17598:	str	r2, [r3]
   1759c:	ldr	r3, [sp, #80]	; 0x50
   175a0:	str	r4, [r3]
   175a4:	mov	r0, sl
   175a8:	add	sp, sp, #44	; 0x2c
   175ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175b0:	mov	sl, #0
   175b4:	mov	r0, sl
   175b8:	add	sp, sp, #44	; 0x2c
   175bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175c0:	mov	r2, #5
   175c4:	ldr	r1, [pc, #344]	; 17724 <__assert_fail@plt+0x6518>
   175c8:	mov	r5, r0
   175cc:	mov	r0, sl
   175d0:	bl	10f90 <dcgettext@plt>
   175d4:	mov	r3, r7
   175d8:	mov	r2, r6
   175dc:	mov	r7, #0
   175e0:	mov	r6, #1
   175e4:	str	r4, [sp, #8]
   175e8:	str	sl, [sp, #12]
   175ec:	mov	r1, r8
   175f0:	strd	r6, [sp]
   175f4:	str	r0, [sp, #16]
   175f8:	mov	r0, sl
   175fc:	bl	1717c <__assert_fail@plt+0x5f70>
   17600:	subs	r3, r0, #0
   17604:	str	r3, [sp, #36]	; 0x24
   17608:	beq	175b0 <__assert_fail@plt+0x63a4>
   1760c:	lsr	r4, r4, #4
   17610:	mov	r0, r4
   17614:	mov	r1, #24
   17618:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   1761c:	subs	r3, r0, #0
   17620:	str	r3, [sp, #28]
   17624:	beq	176f8 <__assert_fail@plt+0x64ec>
   17628:	cmp	r4, #0
   1762c:	beq	176c8 <__assert_fail@plt+0x64bc>
   17630:	ldr	r3, [sp, #36]	; 0x24
   17634:	ldr	r8, [pc, #228]	; 17720 <__assert_fail@plt+0x6514>
   17638:	add	r7, r3, r4, lsl #4
   1763c:	ldr	r6, [sp, #28]
   17640:	add	r7, r7, #8
   17644:	add	r9, r3, #8
   17648:	mov	sl, #0
   1764c:	mov	fp, #0
   17650:	ldr	r3, [r8]
   17654:	sub	r0, r9, #8
   17658:	mov	r1, #8
   1765c:	blx	r3
   17660:	ldr	r3, [r8]
   17664:	strd	r0, [r6]
   17668:	mov	r0, r9
   1766c:	mov	r1, #8
   17670:	blx	r3
   17674:	ldrh	r3, [r5, #66]	; 0x42
   17678:	add	r9, r9, #16
   1767c:	strd	sl, [r6, #16]
   17680:	cmp	r3, #8
   17684:	str	r0, [r6, #8]
   17688:	str	r1, [r6, #12]
   1768c:	bne	176bc <__assert_fail@plt+0x64b0>
   17690:	lsr	r3, r1, #8
   17694:	ldrb	r2, [r5, #21]
   17698:	lsl	ip, r1, #8
   1769c:	and	r3, r3, #65280	; 0xff00
   176a0:	orr	r3, r3, r1, lsr #24
   176a4:	and	ip, ip, #16711680	; 0xff0000
   176a8:	orr	r3, r3, ip
   176ac:	cmp	r2, #2
   176b0:	orr	r1, r3, r1, lsl #24
   176b4:	strne	r1, [r6, #8]
   176b8:	strne	r0, [r6, #12]
   176bc:	cmp	r9, r7
   176c0:	add	r6, r6, #24
   176c4:	bne	17650 <__assert_fail@plt+0x6444>
   176c8:	ldr	r0, [sp, #36]	; 0x24
   176cc:	bl	10f54 <free@plt>
   176d0:	b	17590 <__assert_fail@plt+0x6384>
   176d4:	mov	r0, r9
   176d8:	bl	10f54 <free@plt>
   176dc:	ldr	sl, [sp, #28]
   176e0:	mov	r2, #5
   176e4:	ldr	r1, [pc, #60]	; 17728 <__assert_fail@plt+0x651c>
   176e8:	mov	r0, sl
   176ec:	bl	10f90 <dcgettext@plt>
   176f0:	bl	548ac <error@@Base>
   176f4:	b	175a4 <__assert_fail@plt+0x6398>
   176f8:	ldr	r0, [sp, #36]	; 0x24
   176fc:	bl	10f54 <free@plt>
   17700:	mov	r2, #5
   17704:	ldr	r1, [pc, #28]	; 17728 <__assert_fail@plt+0x651c>
   17708:	mov	r0, sl
   1770c:	bl	10f90 <dcgettext@plt>
   17710:	bl	548ac <error@@Base>
   17714:	b	175a4 <__assert_fail@plt+0x6398>
   17718:	andeq	sl, r9, r8, lsr r4
   1771c:	andeq	r3, r6, r4, ror #20
   17720:	andeq	lr, r9, ip, asr sp
   17724:	muleq	r6, ip, sl
   17728:	andeq	r3, r6, ip, ror sl
   1772c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17730:	sub	sp, sp, #76	; 0x4c
   17734:	ldrd	r6, [r1, #32]
   17738:	orrs	r3, r6, r7
   1773c:	moveq	fp, #0
   17740:	streq	fp, [r2]
   17744:	moveq	r8, fp
   17748:	beq	17980 <__assert_fail@plt+0x6774>
   1774c:	str	r2, [sp, #32]
   17750:	ldrd	r2, [r1, #56]	; 0x38
   17754:	mov	r5, r1
   17758:	mov	sl, r0
   1775c:	orrs	r1, r2, r3
   17760:	moveq	fp, #1
   17764:	movne	fp, #0
   17768:	cmp	r7, r3
   1776c:	cmpeq	r6, r2
   17770:	orrcc	fp, fp, #1
   17774:	cmp	fp, #0
   17778:	bne	1793c <__assert_fail@plt+0x6730>
   1777c:	ldrd	r0, [r0, #8]
   17780:	cmp	r7, r1
   17784:	cmpeq	r6, r0
   17788:	bhi	17b04 <__assert_fail@plt+0x68f8>
   1778c:	mov	r0, r6
   17790:	mov	r1, r7
   17794:	bl	58c00 <warn@@Base+0x3e30>
   17798:	adds	r8, r6, #1
   1779c:	adc	r9, r7, #0
   177a0:	mov	r3, #0
   177a4:	cmp	r3, r9
   177a8:	lsl	r2, r0, #4
   177ac:	cmpeq	r2, r8
   177b0:	str	r0, [sp, #60]	; 0x3c
   177b4:	str	r0, [sp, #36]	; 0x24
   177b8:	str	r0, [sp, #28]
   177bc:	mov	r2, #5
   177c0:	bhi	17ac0 <__assert_fail@plt+0x68b4>
   177c4:	ldr	r1, [pc, #1020]	; 17bc8 <__assert_fail@plt+0x69bc>
   177c8:	mov	r0, fp
   177cc:	ldr	r4, [r5, #24]
   177d0:	bl	10f90 <dcgettext@plt>
   177d4:	mov	r9, #1
   177d8:	add	r3, sl, #8
   177dc:	mov	r8, #0
   177e0:	add	r1, sl, #4
   177e4:	mov	r2, r3
   177e8:	str	r3, [sp, #44]	; 0x2c
   177ec:	strd	r6, [sp, #8]
   177f0:	mov	r3, r4
   177f4:	str	r9, [sp]
   177f8:	str	r8, [sp, #4]
   177fc:	str	r1, [sp, #40]	; 0x28
   17800:	str	r0, [sp, #16]
   17804:	mov	r0, fp
   17808:	bl	1717c <__assert_fail@plt+0x5f70>
   1780c:	subs	r3, r0, #0
   17810:	str	r3, [sp, #56]	; 0x38
   17814:	beq	17b44 <__assert_fail@plt+0x6938>
   17818:	ldr	r3, [pc, #940]	; 17bcc <__assert_fail@plt+0x69c0>
   1781c:	ldr	r4, [r3, #660]	; 0x294
   17820:	cmp	r4, r8
   17824:	beq	17bac <__assert_fail@plt+0x69a0>
   17828:	str	r9, [sp, #48]	; 0x30
   1782c:	str	r8, [sp, #52]	; 0x34
   17830:	b	17840 <__assert_fail@plt+0x6634>
   17834:	ldr	r4, [r4, #4]
   17838:	cmp	r4, #0
   1783c:	beq	1798c <__assert_fail@plt+0x6780>
   17840:	ldr	r3, [sl, #96]	; 0x60
   17844:	ldr	ip, [r4]
   17848:	sub	r3, r5, r3
   1784c:	asr	r3, r3, #3
   17850:	ldr	r1, [ip, #40]	; 0x28
   17854:	rsb	r2, r3, r3, lsl #3
   17858:	add	r2, r2, r2, lsl #6
   1785c:	add	r2, r3, r2, lsl #3
   17860:	rsb	r2, r2, r2, lsl #15
   17864:	add	r2, r3, r2, lsl #3
   17868:	cmp	r1, r2
   1786c:	bne	17834 <__assert_fail@plt+0x6628>
   17870:	mov	r2, #5
   17874:	ldr	r1, [pc, #852]	; 17bd0 <__assert_fail@plt+0x69c4>
   17878:	mov	r0, #0
   1787c:	ldr	fp, [ip, #24]
   17880:	ldrd	r6, [ip, #32]
   17884:	bl	10f90 <dcgettext@plt>
   17888:	ldr	r2, [sp, #48]	; 0x30
   1788c:	strd	r6, [sp, #8]
   17890:	str	r2, [sp]
   17894:	ldr	r2, [sp, #52]	; 0x34
   17898:	mov	r6, #0
   1789c:	mov	r3, fp
   178a0:	str	r2, [sp, #4]
   178a4:	ldr	r1, [sp, #40]	; 0x28
   178a8:	ldr	r2, [sp, #44]	; 0x2c
   178ac:	ldr	r8, [sp, #36]	; 0x24
   178b0:	str	r0, [sp, #16]
   178b4:	mov	r0, r6
   178b8:	bl	1717c <__assert_fail@plt+0x5f70>
   178bc:	subs	fp, r0, #0
   178c0:	beq	17b64 <__assert_fail@plt+0x6958>
   178c4:	ldr	r1, [r4]
   178c8:	ldrd	r0, [r1, #32]
   178cc:	lsr	r2, r0, #2
   178d0:	lsr	r3, r1, #2
   178d4:	orr	r2, r2, r1, lsl #30
   178d8:	cmp	r3, r6
   178dc:	cmpeq	r2, r8
   178e0:	bcs	17834 <__assert_fail@plt+0x6628>
   178e4:	mov	r2, #5
   178e8:	ldr	r1, [pc, #740]	; 17bd4 <__assert_fail@plt+0x69c8>
   178ec:	mov	r0, r6
   178f0:	bl	10f90 <dcgettext@plt>
   178f4:	ldr	r2, [r4]
   178f8:	add	r1, sl, #108	; 0x6c
   178fc:	mov	r8, r6
   17900:	mov	r7, r0
   17904:	add	r0, sl, #104	; 0x68
   17908:	bl	16c64 <__assert_fail@plt+0x5a58>
   1790c:	ldr	r2, [r4]
   17910:	ldr	r3, [r5, #32]
   17914:	str	r6, [sp, #28]
   17918:	ldr	r2, [r2, #32]
   1791c:	mov	r1, r0
   17920:	mov	r0, r7
   17924:	bl	548ac <error@@Base>
   17928:	mov	r0, fp
   1792c:	bl	10f54 <free@plt>
   17930:	ldr	r0, [sp, #56]	; 0x38
   17934:	bl	10f54 <free@plt>
   17938:	b	17978 <__assert_fail@plt+0x676c>
   1793c:	mov	r2, #5
   17940:	ldr	r1, [pc, #656]	; 17bd8 <__assert_fail@plt+0x69cc>
   17944:	mov	r0, #0
   17948:	bl	10f90 <dcgettext@plt>
   1794c:	mov	r2, r5
   17950:	add	r1, sl, #108	; 0x6c
   17954:	mov	r8, #0
   17958:	mov	r4, r0
   1795c:	add	r0, sl, #104	; 0x68
   17960:	bl	16c64 <__assert_fail@plt+0x5a58>
   17964:	ldr	r2, [r5, #56]	; 0x38
   17968:	str	r8, [sp, #28]
   1796c:	mov	r1, r0
   17970:	mov	r0, r4
   17974:	bl	548ac <error@@Base>
   17978:	ldrd	r2, [sp, #28]
   1797c:	str	r2, [r3]
   17980:	mov	r0, r8
   17984:	add	sp, sp, #76	; 0x4c
   17988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1798c:	mov	r1, #32
   17990:	ldr	r0, [sp, #60]	; 0x3c
   17994:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   17998:	subs	r8, r0, #0
   1799c:	beq	17b78 <__assert_fail@plt+0x696c>
   179a0:	ldr	r3, [sp, #60]	; 0x3c
   179a4:	cmp	r3, #0
   179a8:	beq	17aa4 <__assert_fail@plt+0x6898>
   179ac:	add	r4, r8, #32
   179b0:	str	r8, [sp, #36]	; 0x24
   179b4:	ldr	r6, [pc, #544]	; 17bdc <__assert_fail@plt+0x69d0>
   179b8:	ldr	r9, [pc, #544]	; 17be0 <__assert_fail@plt+0x69d4>
   179bc:	ldr	sl, [pc, #544]	; 17be4 <__assert_fail@plt+0x69d8>
   179c0:	ldr	r5, [sp, #56]	; 0x38
   179c4:	mov	r7, #0
   179c8:	ldr	r8, [sp, #28]
   179cc:	b	17a14 <__assert_fail@plt+0x6808>
   179d0:	cmp	r0, sl
   179d4:	ldr	r2, [r6]
   179d8:	bhi	17a94 <__assert_fail@plt+0x6888>
   179dc:	add	r0, r5, #12
   179e0:	mov	r1, #1
   179e4:	blx	r2
   179e8:	mov	r1, #1
   179ec:	add	r7, r7, r1
   179f0:	add	r4, r4, #32
   179f4:	strb	r0, [r4, #-44]	; 0xffffffd4
   179f8:	add	r0, r5, #13
   179fc:	ldr	r3, [r6]
   17a00:	blx	r3
   17a04:	cmp	r8, r7
   17a08:	add	r5, r5, #16
   17a0c:	strb	r0, [r4, #-43]	; 0xffffffd5
   17a10:	beq	17aa0 <__assert_fail@plt+0x6894>
   17a14:	ldr	r3, [r6]
   17a18:	mov	r1, #4
   17a1c:	mov	r0, r5
   17a20:	blx	r3
   17a24:	mov	r1, #4
   17a28:	ldr	r3, [r6]
   17a2c:	str	r0, [r4, #-16]
   17a30:	add	r0, r5, r1
   17a34:	blx	r3
   17a38:	ldr	r3, [r6]
   17a3c:	strd	r0, [r4, #-32]	; 0xffffffe0
   17a40:	mov	r1, #4
   17a44:	add	r0, r5, #8
   17a48:	blx	r3
   17a4c:	ldr	r3, [r6]
   17a50:	strd	r0, [r4, #-24]	; 0xffffffe8
   17a54:	mov	r1, #2
   17a58:	add	r0, r5, #14
   17a5c:	blx	r3
   17a60:	cmp	r0, r9
   17a64:	mov	r3, r0
   17a68:	str	r0, [r4, #-8]
   17a6c:	bne	179d0 <__assert_fail@plt+0x67c4>
   17a70:	cmp	fp, #0
   17a74:	mov	r1, #4
   17a78:	add	r0, fp, r7, lsl #2
   17a7c:	ldr	r2, [r6]
   17a80:	beq	17a94 <__assert_fail@plt+0x6888>
   17a84:	blx	r2
   17a88:	ldr	r2, [r6]
   17a8c:	str	r0, [r4, #-8]
   17a90:	b	179dc <__assert_fail@plt+0x67d0>
   17a94:	sub	r3, r3, #65536	; 0x10000
   17a98:	str	r3, [r4, #-8]
   17a9c:	b	179dc <__assert_fail@plt+0x67d0>
   17aa0:	ldr	r8, [sp, #36]	; 0x24
   17aa4:	cmp	fp, #0
   17aa8:	beq	17ab4 <__assert_fail@plt+0x68a8>
   17aac:	mov	r0, fp
   17ab0:	bl	10f54 <free@plt>
   17ab4:	ldr	r0, [sp, #56]	; 0x38
   17ab8:	bl	10f54 <free@plt>
   17abc:	b	17978 <__assert_fail@plt+0x676c>
   17ac0:	ldr	r1, [pc, #288]	; 17be8 <__assert_fail@plt+0x69dc>
   17ac4:	mov	r0, fp
   17ac8:	bl	10f90 <dcgettext@plt>
   17acc:	mov	r2, r5
   17ad0:	add	r1, sl, #108	; 0x6c
   17ad4:	ldr	r6, [r5, #32]
   17ad8:	mov	r8, fp
   17adc:	mov	r4, r0
   17ae0:	add	r0, sl, #104	; 0x68
   17ae4:	bl	16c64 <__assert_fail@plt+0x5a58>
   17ae8:	mov	r1, r6
   17aec:	ldr	r3, [r5, #56]	; 0x38
   17af0:	str	fp, [sp, #28]
   17af4:	mov	r2, r0
   17af8:	mov	r0, r4
   17afc:	bl	548ac <error@@Base>
   17b00:	b	17978 <__assert_fail@plt+0x676c>
   17b04:	mov	r2, #5
   17b08:	ldr	r1, [pc, #220]	; 17bec <__assert_fail@plt+0x69e0>
   17b0c:	mov	r0, fp
   17b10:	bl	10f90 <dcgettext@plt>
   17b14:	mov	r2, r5
   17b18:	add	r1, sl, #108	; 0x6c
   17b1c:	mov	r8, fp
   17b20:	mov	r4, r0
   17b24:	add	r0, sl, #104	; 0x68
   17b28:	bl	16c64 <__assert_fail@plt+0x5a58>
   17b2c:	ldr	r2, [r5, #32]
   17b30:	str	fp, [sp, #28]
   17b34:	mov	r1, r0
   17b38:	mov	r0, r4
   17b3c:	bl	548ac <error@@Base>
   17b40:	b	17978 <__assert_fail@plt+0x676c>
   17b44:	ldr	r8, [sp, #56]	; 0x38
   17b48:	str	r8, [sp, #28]
   17b4c:	b	17978 <__assert_fail@plt+0x676c>
   17b50:	ldr	r1, [pc, #152]	; 17bf0 <__assert_fail@plt+0x69e4>
   17b54:	mov	r2, #5
   17b58:	bl	10f90 <dcgettext@plt>
   17b5c:	ldr	r1, [sp, #60]	; 0x3c
   17b60:	bl	548ac <error@@Base>
   17b64:	ldr	r0, [sp, #56]	; 0x38
   17b68:	mov	r8, #0
   17b6c:	bl	10f54 <free@plt>
   17b70:	str	r8, [sp, #28]
   17b74:	b	17978 <__assert_fail@plt+0x676c>
   17b78:	mov	r2, #5
   17b7c:	ldr	r1, [pc, #108]	; 17bf0 <__assert_fail@plt+0x69e4>
   17b80:	bl	10f90 <dcgettext@plt>
   17b84:	ldr	r1, [sp, #60]	; 0x3c
   17b88:	bl	548ac <error@@Base>
   17b8c:	cmp	fp, #0
   17b90:	beq	17b64 <__assert_fail@plt+0x6958>
   17b94:	mov	r0, fp
   17b98:	bl	10f54 <free@plt>
   17b9c:	ldr	r0, [sp, #56]	; 0x38
   17ba0:	bl	10f54 <free@plt>
   17ba4:	str	r4, [sp, #28]
   17ba8:	b	17978 <__assert_fail@plt+0x676c>
   17bac:	mov	r1, #32
   17bb0:	ldr	r0, [sp, #60]	; 0x3c
   17bb4:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   17bb8:	subs	r8, r0, #0
   17bbc:	beq	17b50 <__assert_fail@plt+0x6944>
   17bc0:	mov	fp, r4
   17bc4:	b	179a0 <__assert_fail@plt+0x6794>
   17bc8:	andeq	r3, r6, r8, asr fp
   17bcc:	andeq	sl, r9, r8, lsr r4
   17bd0:	andeq	r3, r6, r0, ror #22
   17bd4:	andeq	r3, r6, r0, lsl #23
   17bd8:			; <UNDEFINED> instruction: 0x00063ab4
   17bdc:	andeq	lr, r9, ip, asr sp
   17be0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   17be4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   17be8:	andeq	r3, r6, r0, lsl fp
   17bec:	andeq	r3, r6, r4, ror #21
   17bf0:			; <UNDEFINED> instruction: 0x00063bbc
   17bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17bf8:	sub	sp, sp, #76	; 0x4c
   17bfc:	ldrd	r6, [r1, #32]
   17c00:	orrs	r3, r6, r7
   17c04:	moveq	fp, #0
   17c08:	streq	fp, [r2]
   17c0c:	moveq	r8, fp
   17c10:	beq	17e4c <__assert_fail@plt+0x6c40>
   17c14:	str	r2, [sp, #32]
   17c18:	ldrd	r2, [r1, #56]	; 0x38
   17c1c:	mov	r5, r1
   17c20:	mov	sl, r0
   17c24:	orrs	r1, r2, r3
   17c28:	moveq	fp, #1
   17c2c:	movne	fp, #0
   17c30:	cmp	r7, r3
   17c34:	cmpeq	r6, r2
   17c38:	orrcc	fp, fp, #1
   17c3c:	cmp	fp, #0
   17c40:	bne	17e08 <__assert_fail@plt+0x6bfc>
   17c44:	ldrd	r0, [r0, #8]
   17c48:	cmp	r7, r1
   17c4c:	cmpeq	r6, r0
   17c50:	bhi	17fd0 <__assert_fail@plt+0x6dc4>
   17c54:	mov	r0, r6
   17c58:	mov	r1, r7
   17c5c:	bl	58c00 <warn@@Base+0x3e30>
   17c60:	adds	r8, r6, #1
   17c64:	adc	r9, r7, #0
   17c68:	mov	r3, #0
   17c6c:	cmp	r3, r9
   17c70:	add	r2, r0, r0, lsl #1
   17c74:	str	r0, [sp, #60]	; 0x3c
   17c78:	lsl	r2, r2, #3
   17c7c:	cmpeq	r2, r8
   17c80:	str	r0, [sp, #36]	; 0x24
   17c84:	str	r0, [sp, #28]
   17c88:	mov	r2, #5
   17c8c:	bhi	17f8c <__assert_fail@plt+0x6d80>
   17c90:	ldr	r1, [pc, #1020]	; 18094 <__assert_fail@plt+0x6e88>
   17c94:	mov	r0, fp
   17c98:	ldr	r4, [r5, #24]
   17c9c:	bl	10f90 <dcgettext@plt>
   17ca0:	mov	r9, #1
   17ca4:	add	r3, sl, #8
   17ca8:	mov	r8, #0
   17cac:	add	r1, sl, #4
   17cb0:	mov	r2, r3
   17cb4:	str	r3, [sp, #44]	; 0x2c
   17cb8:	strd	r6, [sp, #8]
   17cbc:	mov	r3, r4
   17cc0:	str	r9, [sp]
   17cc4:	str	r8, [sp, #4]
   17cc8:	str	r1, [sp, #40]	; 0x28
   17ccc:	str	r0, [sp, #16]
   17cd0:	mov	r0, fp
   17cd4:	bl	1717c <__assert_fail@plt+0x5f70>
   17cd8:	subs	r3, r0, #0
   17cdc:	str	r3, [sp, #56]	; 0x38
   17ce0:	beq	18010 <__assert_fail@plt+0x6e04>
   17ce4:	ldr	r3, [pc, #940]	; 18098 <__assert_fail@plt+0x6e8c>
   17ce8:	ldr	r4, [r3, #660]	; 0x294
   17cec:	cmp	r4, r8
   17cf0:	beq	18078 <__assert_fail@plt+0x6e6c>
   17cf4:	str	r9, [sp, #48]	; 0x30
   17cf8:	str	r8, [sp, #52]	; 0x34
   17cfc:	b	17d0c <__assert_fail@plt+0x6b00>
   17d00:	ldr	r4, [r4, #4]
   17d04:	cmp	r4, #0
   17d08:	beq	17e58 <__assert_fail@plt+0x6c4c>
   17d0c:	ldr	r3, [sl, #96]	; 0x60
   17d10:	ldr	ip, [r4]
   17d14:	sub	r3, r5, r3
   17d18:	asr	r3, r3, #3
   17d1c:	ldr	r1, [ip, #40]	; 0x28
   17d20:	rsb	r2, r3, r3, lsl #3
   17d24:	add	r2, r2, r2, lsl #6
   17d28:	add	r2, r3, r2, lsl #3
   17d2c:	rsb	r2, r2, r2, lsl #15
   17d30:	add	r2, r3, r2, lsl #3
   17d34:	cmp	r1, r2
   17d38:	bne	17d00 <__assert_fail@plt+0x6af4>
   17d3c:	mov	r2, #5
   17d40:	ldr	r1, [pc, #852]	; 1809c <__assert_fail@plt+0x6e90>
   17d44:	mov	r0, #0
   17d48:	ldr	fp, [ip, #24]
   17d4c:	ldrd	r6, [ip, #32]
   17d50:	bl	10f90 <dcgettext@plt>
   17d54:	ldr	r2, [sp, #48]	; 0x30
   17d58:	strd	r6, [sp, #8]
   17d5c:	str	r2, [sp]
   17d60:	ldr	r2, [sp, #52]	; 0x34
   17d64:	mov	r6, #0
   17d68:	mov	r3, fp
   17d6c:	str	r2, [sp, #4]
   17d70:	ldr	r1, [sp, #40]	; 0x28
   17d74:	ldr	r2, [sp, #44]	; 0x2c
   17d78:	ldr	r8, [sp, #36]	; 0x24
   17d7c:	str	r0, [sp, #16]
   17d80:	mov	r0, r6
   17d84:	bl	1717c <__assert_fail@plt+0x5f70>
   17d88:	subs	fp, r0, #0
   17d8c:	beq	18030 <__assert_fail@plt+0x6e24>
   17d90:	ldr	r1, [r4]
   17d94:	ldrd	r0, [r1, #32]
   17d98:	lsr	r2, r0, #2
   17d9c:	lsr	r3, r1, #2
   17da0:	orr	r2, r2, r1, lsl #30
   17da4:	cmp	r3, r6
   17da8:	cmpeq	r2, r8
   17dac:	bcs	17d00 <__assert_fail@plt+0x6af4>
   17db0:	mov	r2, #5
   17db4:	ldr	r1, [pc, #740]	; 180a0 <__assert_fail@plt+0x6e94>
   17db8:	mov	r0, r6
   17dbc:	bl	10f90 <dcgettext@plt>
   17dc0:	ldr	r2, [r4]
   17dc4:	add	r1, sl, #108	; 0x6c
   17dc8:	mov	r8, r6
   17dcc:	mov	r7, r0
   17dd0:	add	r0, sl, #104	; 0x68
   17dd4:	bl	16c64 <__assert_fail@plt+0x5a58>
   17dd8:	ldr	r2, [r4]
   17ddc:	ldr	r3, [r5, #32]
   17de0:	str	r6, [sp, #28]
   17de4:	ldr	r2, [r2, #32]
   17de8:	mov	r1, r0
   17dec:	mov	r0, r7
   17df0:	bl	548ac <error@@Base>
   17df4:	mov	r0, fp
   17df8:	bl	10f54 <free@plt>
   17dfc:	ldr	r0, [sp, #56]	; 0x38
   17e00:	bl	10f54 <free@plt>
   17e04:	b	17e44 <__assert_fail@plt+0x6c38>
   17e08:	mov	r2, #5
   17e0c:	ldr	r1, [pc, #656]	; 180a4 <__assert_fail@plt+0x6e98>
   17e10:	mov	r0, #0
   17e14:	bl	10f90 <dcgettext@plt>
   17e18:	mov	r2, r5
   17e1c:	add	r1, sl, #108	; 0x6c
   17e20:	mov	r8, #0
   17e24:	mov	r4, r0
   17e28:	add	r0, sl, #104	; 0x68
   17e2c:	bl	16c64 <__assert_fail@plt+0x5a58>
   17e30:	ldr	r2, [r5, #56]	; 0x38
   17e34:	str	r8, [sp, #28]
   17e38:	mov	r1, r0
   17e3c:	mov	r0, r4
   17e40:	bl	548ac <error@@Base>
   17e44:	ldrd	r2, [sp, #28]
   17e48:	str	r2, [r3]
   17e4c:	mov	r0, r8
   17e50:	add	sp, sp, #76	; 0x4c
   17e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e58:	mov	r1, #32
   17e5c:	ldr	r0, [sp, #60]	; 0x3c
   17e60:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   17e64:	subs	r8, r0, #0
   17e68:	beq	18044 <__assert_fail@plt+0x6e38>
   17e6c:	ldr	r3, [sp, #60]	; 0x3c
   17e70:	cmp	r3, #0
   17e74:	beq	17f70 <__assert_fail@plt+0x6d64>
   17e78:	add	r4, r8, #32
   17e7c:	str	r8, [sp, #36]	; 0x24
   17e80:	ldr	r6, [pc, #544]	; 180a8 <__assert_fail@plt+0x6e9c>
   17e84:	ldr	r9, [pc, #544]	; 180ac <__assert_fail@plt+0x6ea0>
   17e88:	ldr	sl, [pc, #544]	; 180b0 <__assert_fail@plt+0x6ea4>
   17e8c:	ldr	r5, [sp, #56]	; 0x38
   17e90:	mov	r7, #0
   17e94:	ldr	r8, [sp, #28]
   17e98:	b	17ee0 <__assert_fail@plt+0x6cd4>
   17e9c:	cmp	r0, sl
   17ea0:	ldr	r2, [r6]
   17ea4:	bhi	17f60 <__assert_fail@plt+0x6d54>
   17ea8:	mov	r1, #8
   17eac:	add	r0, r5, r1
   17eb0:	blx	r2
   17eb4:	ldr	r3, [r6]
   17eb8:	add	r7, r7, #1
   17ebc:	add	r4, r4, #32
   17ec0:	strd	r0, [r4, #-64]	; 0xffffffc0
   17ec4:	add	r0, r5, #16
   17ec8:	mov	r1, #8
   17ecc:	blx	r3
   17ed0:	cmp	r8, r7
   17ed4:	add	r5, r5, #24
   17ed8:	strd	r0, [r4, #-56]	; 0xffffffc8
   17edc:	beq	17f6c <__assert_fail@plt+0x6d60>
   17ee0:	ldr	r3, [r6]
   17ee4:	mov	r1, #4
   17ee8:	mov	r0, r5
   17eec:	blx	r3
   17ef0:	ldr	r3, [r6]
   17ef4:	mov	r1, #1
   17ef8:	str	r0, [r4, #-16]
   17efc:	add	r0, r5, #4
   17f00:	blx	r3
   17f04:	mov	r1, #1
   17f08:	strb	r0, [r4, #-12]
   17f0c:	add	r0, r5, #5
   17f10:	ldr	r3, [r6]
   17f14:	blx	r3
   17f18:	mov	r1, #2
   17f1c:	strb	r0, [r4, #-11]
   17f20:	add	r0, r5, #6
   17f24:	ldr	r3, [r6]
   17f28:	blx	r3
   17f2c:	cmp	r0, r9
   17f30:	mov	r3, r0
   17f34:	str	r0, [r4, #-8]
   17f38:	bne	17e9c <__assert_fail@plt+0x6c90>
   17f3c:	cmp	fp, #0
   17f40:	mov	r1, #4
   17f44:	add	r0, fp, r7, lsl #2
   17f48:	ldr	r2, [r6]
   17f4c:	beq	17f60 <__assert_fail@plt+0x6d54>
   17f50:	blx	r2
   17f54:	ldr	r2, [r6]
   17f58:	str	r0, [r4, #-8]
   17f5c:	b	17ea8 <__assert_fail@plt+0x6c9c>
   17f60:	sub	r3, r3, #65536	; 0x10000
   17f64:	str	r3, [r4, #-8]
   17f68:	b	17ea8 <__assert_fail@plt+0x6c9c>
   17f6c:	ldr	r8, [sp, #36]	; 0x24
   17f70:	cmp	fp, #0
   17f74:	beq	17f80 <__assert_fail@plt+0x6d74>
   17f78:	mov	r0, fp
   17f7c:	bl	10f54 <free@plt>
   17f80:	ldr	r0, [sp, #56]	; 0x38
   17f84:	bl	10f54 <free@plt>
   17f88:	b	17e44 <__assert_fail@plt+0x6c38>
   17f8c:	ldr	r1, [pc, #288]	; 180b4 <__assert_fail@plt+0x6ea8>
   17f90:	mov	r0, fp
   17f94:	bl	10f90 <dcgettext@plt>
   17f98:	mov	r2, r5
   17f9c:	add	r1, sl, #108	; 0x6c
   17fa0:	ldr	r6, [r5, #32]
   17fa4:	mov	r8, fp
   17fa8:	mov	r4, r0
   17fac:	add	r0, sl, #104	; 0x68
   17fb0:	bl	16c64 <__assert_fail@plt+0x5a58>
   17fb4:	mov	r1, r6
   17fb8:	ldr	r3, [r5, #56]	; 0x38
   17fbc:	str	fp, [sp, #28]
   17fc0:	mov	r2, r0
   17fc4:	mov	r0, r4
   17fc8:	bl	548ac <error@@Base>
   17fcc:	b	17e44 <__assert_fail@plt+0x6c38>
   17fd0:	mov	r2, #5
   17fd4:	ldr	r1, [pc, #220]	; 180b8 <__assert_fail@plt+0x6eac>
   17fd8:	mov	r0, fp
   17fdc:	bl	10f90 <dcgettext@plt>
   17fe0:	mov	r2, r5
   17fe4:	add	r1, sl, #108	; 0x6c
   17fe8:	mov	r8, fp
   17fec:	mov	r4, r0
   17ff0:	add	r0, sl, #104	; 0x68
   17ff4:	bl	16c64 <__assert_fail@plt+0x5a58>
   17ff8:	ldr	r2, [r5, #32]
   17ffc:	str	fp, [sp, #28]
   18000:	mov	r1, r0
   18004:	mov	r0, r4
   18008:	bl	548ac <error@@Base>
   1800c:	b	17e44 <__assert_fail@plt+0x6c38>
   18010:	ldr	r8, [sp, #56]	; 0x38
   18014:	str	r8, [sp, #28]
   18018:	b	17e44 <__assert_fail@plt+0x6c38>
   1801c:	ldr	r1, [pc, #152]	; 180bc <__assert_fail@plt+0x6eb0>
   18020:	mov	r2, #5
   18024:	bl	10f90 <dcgettext@plt>
   18028:	ldr	r1, [sp, #60]	; 0x3c
   1802c:	bl	548ac <error@@Base>
   18030:	ldr	r0, [sp, #56]	; 0x38
   18034:	mov	r8, #0
   18038:	bl	10f54 <free@plt>
   1803c:	str	r8, [sp, #28]
   18040:	b	17e44 <__assert_fail@plt+0x6c38>
   18044:	mov	r2, #5
   18048:	ldr	r1, [pc, #108]	; 180bc <__assert_fail@plt+0x6eb0>
   1804c:	bl	10f90 <dcgettext@plt>
   18050:	ldr	r1, [sp, #60]	; 0x3c
   18054:	bl	548ac <error@@Base>
   18058:	cmp	fp, #0
   1805c:	beq	18030 <__assert_fail@plt+0x6e24>
   18060:	mov	r0, fp
   18064:	bl	10f54 <free@plt>
   18068:	ldr	r0, [sp, #56]	; 0x38
   1806c:	bl	10f54 <free@plt>
   18070:	str	r4, [sp, #28]
   18074:	b	17e44 <__assert_fail@plt+0x6c38>
   18078:	mov	r1, #32
   1807c:	ldr	r0, [sp, #60]	; 0x3c
   18080:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   18084:	subs	r8, r0, #0
   18088:	beq	1801c <__assert_fail@plt+0x6e10>
   1808c:	mov	fp, r4
   18090:	b	17e6c <__assert_fail@plt+0x6c60>
   18094:	andeq	r3, r6, r8, asr fp
   18098:	andeq	sl, r9, r8, lsr r4
   1809c:	andeq	r3, r6, r0, ror #22
   180a0:	andeq	r3, r6, r0, lsl #23
   180a4:			; <UNDEFINED> instruction: 0x00063ab4
   180a8:	andeq	lr, r9, ip, asr sp
   180ac:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   180b0:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   180b4:	andeq	r3, r6, r0, lsl fp
   180b8:	andeq	r3, r6, r4, ror #21
   180bc:			; <UNDEFINED> instruction: 0x00063bbc
   180c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c4:	mov	r9, r1
   180c8:	ldr	r1, [r0, #96]	; 0x60
   180cc:	sub	sp, sp, #44	; 0x2c
   180d0:	cmp	r1, #0
   180d4:	mov	fp, r2
   180d8:	mov	r8, r3
   180dc:	ldreq	r7, [pc, #624]	; 18354 <__assert_fail@plt+0x7148>
   180e0:	beq	181f8 <__assert_fail@plt+0x6fec>
   180e4:	ldr	r7, [pc, #616]	; 18354 <__assert_fail@plt+0x7148>
   180e8:	mov	r6, r0
   180ec:	ldr	r2, [r7, #664]	; 0x298
   180f0:	subs	r3, r2, r0
   180f4:	movne	r3, #1
   180f8:	cmp	r2, #0
   180fc:	moveq	r3, #1
   18100:	cmp	r3, #0
   18104:	beq	181f8 <__assert_fail@plt+0x6fec>
   18108:	ldr	r2, [r0, #84]	; 0x54
   1810c:	add	r3, r2, r2, lsl #3
   18110:	add	r3, r1, r3, lsl #3
   18114:	cmp	r1, r3
   18118:	bcs	181f4 <__assert_fail@plt+0x6fe8>
   1811c:	mov	r4, r1
   18120:	add	sl, r7, #668	; 0x29c
   18124:	str	r9, [sp, #32]
   18128:	str	r8, [sp, #36]	; 0x24
   1812c:	b	18144 <__assert_fail@plt+0x6f38>
   18130:	add	r3, r2, r2, lsl #3
   18134:	add	r4, r4, #72	; 0x48
   18138:	add	r3, r1, r3, lsl #3
   1813c:	cmp	r4, r3
   18140:	bcs	181ec <__assert_fail@plt+0x6fe0>
   18144:	ldr	r3, [r4, #4]
   18148:	cmp	r3, #2
   1814c:	bne	18130 <__assert_fail@plt+0x6f24>
   18150:	ldr	r3, [r7]
   18154:	mov	r1, r4
   18158:	cmp	r3, #0
   1815c:	mov	r2, sl
   18160:	mov	r0, r6
   18164:	beq	18318 <__assert_fail@plt+0x710c>
   18168:	bl	1772c <__assert_fail@plt+0x6520>
   1816c:	ldr	r5, [r4, #40]	; 0x28
   18170:	ldr	r2, [r6, #84]	; 0x54
   18174:	str	r0, [r7, #672]	; 0x2a0
   18178:	cmp	r5, r2
   1817c:	ldr	r1, [r6, #96]	; 0x60
   18180:	bcs	18130 <__assert_fail@plt+0x6f24>
   18184:	add	r5, r5, r5, lsl #3
   18188:	mov	r2, #5
   1818c:	add	r5, r1, r5, lsl #3
   18190:	mov	r0, #0
   18194:	ldr	r3, [r5, #24]
   18198:	ldr	r1, [pc, #440]	; 18358 <__assert_fail@plt+0x714c>
   1819c:	ldrd	r8, [r5, #32]
   181a0:	str	r3, [sp, #28]
   181a4:	bl	10f90 <dcgettext@plt>
   181a8:	strd	r8, [sp, #8]
   181ac:	mov	r8, #1
   181b0:	mov	r9, #0
   181b4:	add	r2, r6, #8
   181b8:	add	r1, r6, #4
   181bc:	ldr	r3, [sp, #28]
   181c0:	strd	r8, [sp]
   181c4:	str	r0, [sp, #16]
   181c8:	mov	r0, #0
   181cc:	bl	1717c <__assert_fail@plt+0x5f70>
   181d0:	ldr	r2, [r6, #84]	; 0x54
   181d4:	ldr	r1, [r6, #96]	; 0x60
   181d8:	cmp	r0, #0
   181dc:	str	r0, [r7, #676]	; 0x2a4
   181e0:	ldrne	r0, [r5, #32]
   181e4:	str	r0, [r7, #680]	; 0x2a8
   181e8:	b	18130 <__assert_fail@plt+0x6f24>
   181ec:	ldr	r9, [sp, #32]
   181f0:	ldr	r8, [sp, #36]	; 0x24
   181f4:	str	r6, [r7, #664]	; 0x298
   181f8:	ldr	r1, [r7, #672]	; 0x2a0
   181fc:	cmp	r1, #0
   18200:	beq	1833c <__assert_fail@plt+0x7130>
   18204:	ldr	lr, [r7, #676]	; 0x2a4
   18208:	cmp	lr, #0
   1820c:	beq	1833c <__assert_fail@plt+0x7130>
   18210:	ldr	ip, [r7, #668]	; 0x29c
   18214:	add	ip, r1, ip, lsl #5
   18218:	cmp	r1, ip
   1821c:	bcs	1833c <__assert_fail@plt+0x7130>
   18220:	ldr	r6, [r7, #680]	; 0x2a8
   18224:	mov	r4, r9
   18228:	mov	r5, #0
   1822c:	mov	r0, #0
   18230:	b	18240 <__assert_fail@plt+0x7034>
   18234:	add	r1, r1, #32
   18238:	cmp	r1, ip
   1823c:	bcs	18300 <__assert_fail@plt+0x70f4>
   18240:	ldrd	r2, [r1]
   18244:	cmp	r3, r5
   18248:	cmpeq	r2, r4
   1824c:	bne	18234 <__assert_fail@plt+0x7028>
   18250:	ldr	r3, [r1, #16]
   18254:	cmp	r3, r6
   18258:	bcs	18234 <__assert_fail@plt+0x7028>
   1825c:	ldrb	r2, [lr, r3]
   18260:	add	r3, lr, r3
   18264:	cmp	r2, #0
   18268:	beq	18234 <__assert_fail@plt+0x7028>
   1826c:	cmp	r2, #36	; 0x24
   18270:	beq	18320 <__assert_fail@plt+0x7114>
   18274:	ldrb	r7, [r1, #20]
   18278:	cmp	fp, #0
   1827c:	and	r2, r7, #15
   18280:	beq	182cc <__assert_fail@plt+0x70c0>
   18284:	cmp	r2, #2
   18288:	beq	18234 <__assert_fail@plt+0x7028>
   1828c:	cmp	r2, #4
   18290:	beq	182e4 <__assert_fail@plt+0x70d8>
   18294:	cmp	r2, #1
   18298:	beq	182e4 <__assert_fail@plt+0x70d8>
   1829c:	lsrs	r7, r7, #4
   182a0:	beq	18348 <__assert_fail@plt+0x713c>
   182a4:	cmp	r7, #1
   182a8:	bne	18234 <__assert_fail@plt+0x7028>
   182ac:	cmp	r0, #0
   182b0:	moveq	r0, r1
   182b4:	beq	18234 <__assert_fail@plt+0x7028>
   182b8:	ldrb	r3, [r0, #20]
   182bc:	and	r3, r3, #15
   182c0:	cmp	r3, #1
   182c4:	movne	r0, r1
   182c8:	b	18234 <__assert_fail@plt+0x7028>
   182cc:	cmp	r2, #2
   182d0:	bne	18234 <__assert_fail@plt+0x7028>
   182d4:	mov	r0, r1
   182d8:	str	r3, [r8]
   182dc:	add	sp, sp, #44	; 0x2c
   182e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182e4:	ldrd	r2, [r1, #8]
   182e8:	mov	r0, r1
   182ec:	orrs	r3, r2, r3
   182f0:	movne	r1, ip
   182f4:	add	r1, r1, #32
   182f8:	cmp	r1, ip
   182fc:	bcc	18240 <__assert_fail@plt+0x7034>
   18300:	cmp	r0, #0
   18304:	beq	182dc <__assert_fail@plt+0x70d0>
   18308:	ldr	r3, [r0, #16]
   1830c:	mov	r1, r0
   18310:	add	r3, lr, r3
   18314:	b	182d4 <__assert_fail@plt+0x70c8>
   18318:	bl	17bf4 <__assert_fail@plt+0x69e8>
   1831c:	b	1816c <__assert_fail@plt+0x6f60>
   18320:	ldrb	r2, [r3, #1]
   18324:	cmp	r2, #0
   18328:	beq	18274 <__assert_fail@plt+0x7068>
   1832c:	ldrb	r2, [r3, #2]
   18330:	cmp	r2, #0
   18334:	bne	18274 <__assert_fail@plt+0x7068>
   18338:	b	18234 <__assert_fail@plt+0x7028>
   1833c:	mov	r0, #0
   18340:	add	sp, sp, #44	; 0x2c
   18344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18348:	cmp	r0, #0
   1834c:	moveq	r0, r1
   18350:	b	18234 <__assert_fail@plt+0x7028>
   18354:	andeq	sl, r9, r8, lsr r4
   18358:	andeq	r5, r6, r8, lsr #14
   1835c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18360:	subs	r7, r1, #0
   18364:	ldr	r6, [r0, #80]	; 0x50
   18368:	ldreq	sl, [r0, #84]	; 0x54
   1836c:	movne	r4, #0
   18370:	clzeq	r4, sl
   18374:	movne	sl, #1
   18378:	lsreq	r4, r4, #5
   1837c:	cmp	r6, #0
   18380:	moveq	r4, #1
   18384:	cmp	r4, #0
   18388:	sub	sp, sp, #36	; 0x24
   1838c:	bne	18568 <__assert_fail@plt+0x735c>
   18390:	cmp	r6, #39	; 0x27
   18394:	mov	r5, r0
   18398:	bls	18560 <__assert_fail@plt+0x7354>
   1839c:	eor	r3, r7, #1
   183a0:	cmp	r6, #40	; 0x28
   183a4:	movls	r3, #0
   183a8:	andhi	r3, r3, #1
   183ac:	cmp	r3, #0
   183b0:	bne	185c0 <__assert_fail@plt+0x73b4>
   183b4:	cmp	r7, #0
   183b8:	ldr	fp, [r0, #48]	; 0x30
   183bc:	movne	r0, r4
   183c0:	beq	185d8 <__assert_fail@plt+0x73cc>
   183c4:	str	r0, [sp, #16]
   183c8:	mov	r3, fp
   183cc:	str	sl, [sp, #8]
   183d0:	str	r4, [sp, #12]
   183d4:	str	r6, [sp]
   183d8:	str	r4, [sp, #4]
   183dc:	add	r2, r5, #8
   183e0:	add	r1, r5, #4
   183e4:	mov	r0, #0
   183e8:	bl	1717c <__assert_fail@plt+0x5f70>
   183ec:	subs	r3, r0, #0
   183f0:	str	r3, [sp, #28]
   183f4:	beq	18568 <__assert_fail@plt+0x735c>
   183f8:	ldr	r0, [r5, #96]	; 0x60
   183fc:	bl	10f54 <free@plt>
   18400:	mov	r1, #72	; 0x48
   18404:	mov	r0, sl
   18408:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   1840c:	cmp	r0, #0
   18410:	str	r0, [r5, #96]	; 0x60
   18414:	beq	185ec <__assert_fail@plt+0x73e0>
   18418:	ldr	r6, [pc, #496]	; 18610 <__assert_fail@plt+0x7404>
   1841c:	add	r4, r0, #72	; 0x48
   18420:	ldr	r5, [sp, #28]
   18424:	mov	fp, #0
   18428:	b	18464 <__assert_fail@plt+0x7258>
   1842c:	ldr	r3, [r4, #-64]	; 0xffffffc0
   18430:	mov	r0, #0
   18434:	and	r8, r3, #64	; 0x40
   18438:	mov	r9, r0
   1843c:	orrs	r3, r8, r9
   18440:	beq	18450 <__assert_fail@plt+0x7244>
   18444:	ldr	r3, [r4, #-28]	; 0xffffffe4
   18448:	cmp	r3, sl
   1844c:	bhi	185a4 <__assert_fail@plt+0x7398>
   18450:	add	fp, fp, #1
   18454:	cmp	sl, fp
   18458:	add	r4, r4, #72	; 0x48
   1845c:	add	r5, r5, #40	; 0x28
   18460:	bls	18574 <__assert_fail@plt+0x7368>
   18464:	ldr	r3, [r6]
   18468:	mov	r1, #4
   1846c:	mov	r0, r5
   18470:	blx	r3
   18474:	mov	r1, #4
   18478:	ldr	r3, [r6]
   1847c:	str	r0, [r4, #-72]	; 0xffffffb8
   18480:	add	r0, r5, r1
   18484:	blx	r3
   18488:	ldr	r3, [r6]
   1848c:	mov	r1, #4
   18490:	str	r0, [r4, #-68]	; 0xffffffbc
   18494:	add	r0, r5, #8
   18498:	blx	r3
   1849c:	ldr	r3, [r6]
   184a0:	strd	r0, [r4, #-64]	; 0xffffffc0
   184a4:	mov	r1, #4
   184a8:	add	r0, r5, #12
   184ac:	blx	r3
   184b0:	ldr	r3, [r6]
   184b4:	strd	r0, [r4, #-56]	; 0xffffffc8
   184b8:	mov	r1, #4
   184bc:	add	r0, r5, #16
   184c0:	blx	r3
   184c4:	ldr	r3, [r6]
   184c8:	strd	r0, [r4, #-48]	; 0xffffffd0
   184cc:	mov	r1, #4
   184d0:	add	r0, r5, #20
   184d4:	blx	r3
   184d8:	ldr	r3, [r6]
   184dc:	strd	r0, [r4, #-40]	; 0xffffffd8
   184e0:	mov	r1, #4
   184e4:	add	r0, r5, #24
   184e8:	blx	r3
   184ec:	ldr	r3, [r6]
   184f0:	mov	r1, #4
   184f4:	str	r0, [r4, #-32]	; 0xffffffe0
   184f8:	add	r0, r5, #28
   184fc:	blx	r3
   18500:	ldr	r3, [r6]
   18504:	mov	r1, #4
   18508:	str	r0, [r4, #-28]	; 0xffffffe4
   1850c:	add	r0, r5, #32
   18510:	blx	r3
   18514:	ldr	r3, [r6]
   18518:	strd	r0, [r4, #-24]	; 0xffffffe8
   1851c:	mov	r1, #4
   18520:	add	r0, r5, #36	; 0x24
   18524:	blx	r3
   18528:	cmp	r7, #0
   1852c:	strd	r0, [r4, #-16]
   18530:	bne	18450 <__assert_fail@plt+0x7244>
   18534:	ldr	r3, [r4, #-32]	; 0xffffffe0
   18538:	cmp	r3, sl
   1853c:	bls	1842c <__assert_fail@plt+0x7220>
   18540:	mov	r2, #5
   18544:	ldr	r1, [pc, #200]	; 18614 <__assert_fail@plt+0x7408>
   18548:	mov	r0, r7
   1854c:	bl	10f90 <dcgettext@plt>
   18550:	ldr	r2, [r4, #-32]	; 0xffffffe0
   18554:	mov	r1, fp
   18558:	bl	54dd0 <warn@@Base>
   1855c:	b	1842c <__assert_fail@plt+0x7220>
   18560:	cmp	r7, #0
   18564:	beq	18588 <__assert_fail@plt+0x737c>
   18568:	mov	r0, #0
   1856c:	add	sp, sp, #36	; 0x24
   18570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18574:	ldr	r0, [sp, #28]
   18578:	bl	10f54 <free@plt>
   1857c:	mov	r0, #1
   18580:	add	sp, sp, #36	; 0x24
   18584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18588:	mov	r2, #5
   1858c:	ldr	r1, [pc, #132]	; 18618 <__assert_fail@plt+0x740c>
   18590:	mov	r0, r7
   18594:	bl	10f90 <dcgettext@plt>
   18598:	bl	548ac <error@@Base>
   1859c:	mov	r0, r7
   185a0:	b	1856c <__assert_fail@plt+0x7360>
   185a4:	mov	r2, #5
   185a8:	ldr	r1, [pc, #108]	; 1861c <__assert_fail@plt+0x7410>
   185ac:	bl	10f90 <dcgettext@plt>
   185b0:	ldr	r2, [r4, #-28]	; 0xffffffe4
   185b4:	mov	r1, fp
   185b8:	bl	54dd0 <warn@@Base>
   185bc:	b	18450 <__assert_fail@plt+0x7244>
   185c0:	mov	r2, #5
   185c4:	ldr	r1, [pc, #84]	; 18620 <__assert_fail@plt+0x7414>
   185c8:	mov	r0, r4
   185cc:	bl	10f90 <dcgettext@plt>
   185d0:	bl	54dd0 <warn@@Base>
   185d4:	ldr	fp, [r5, #48]	; 0x30
   185d8:	mov	r2, #5
   185dc:	ldr	r1, [pc, #64]	; 18624 <__assert_fail@plt+0x7418>
   185e0:	mov	r0, #0
   185e4:	bl	10f90 <dcgettext@plt>
   185e8:	b	183c4 <__assert_fail@plt+0x71b8>
   185ec:	cmp	r7, #0
   185f0:	bne	18568 <__assert_fail@plt+0x735c>
   185f4:	mov	r2, #5
   185f8:	ldr	r1, [pc, #40]	; 18628 <__assert_fail@plt+0x741c>
   185fc:	bl	10f90 <dcgettext@plt>
   18600:	mov	r1, sl
   18604:	bl	548ac <error@@Base>
   18608:	mov	r0, r7
   1860c:	b	1856c <__assert_fail@plt+0x7360>
   18610:	andeq	lr, r9, ip, asr sp
   18614:	ldrdeq	r3, [r6], -r0
   18618:	andeq	r3, r6, r0, ror #23
   1861c:	andeq	r3, r6, r4, lsl #26
   18620:	andeq	r3, r6, r8, lsr ip
   18624:	muleq	r6, r4, ip
   18628:	andeq	r3, r6, r4, lsr #25
   1862c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18630:	subs	r7, r1, #0
   18634:	ldr	r6, [r0, #80]	; 0x50
   18638:	ldreq	r8, [r0, #84]	; 0x54
   1863c:	movne	r4, #0
   18640:	clzeq	r4, r8
   18644:	movne	r8, #1
   18648:	lsreq	r4, r4, #5
   1864c:	cmp	r6, #0
   18650:	moveq	r4, #1
   18654:	cmp	r4, #0
   18658:	sub	sp, sp, #36	; 0x24
   1865c:	bne	1883c <__assert_fail@plt+0x7630>
   18660:	cmp	r6, #63	; 0x3f
   18664:	mov	r5, r0
   18668:	bls	18834 <__assert_fail@plt+0x7628>
   1866c:	eor	r3, r7, #1
   18670:	cmp	r6, #64	; 0x40
   18674:	movls	r3, #0
   18678:	andhi	r3, r3, #1
   1867c:	cmp	r3, #0
   18680:	bne	18898 <__assert_fail@plt+0x768c>
   18684:	cmp	r7, #0
   18688:	ldr	r9, [r0, #48]	; 0x30
   1868c:	movne	r0, r4
   18690:	beq	188b0 <__assert_fail@plt+0x76a4>
   18694:	str	r0, [sp, #16]
   18698:	str	r8, [sp, #8]
   1869c:	str	r4, [sp, #12]
   186a0:	str	r6, [sp]
   186a4:	str	r4, [sp, #4]
   186a8:	mov	r3, r9
   186ac:	add	r2, r5, #8
   186b0:	add	r1, r5, #4
   186b4:	mov	r0, #0
   186b8:	bl	1717c <__assert_fail@plt+0x5f70>
   186bc:	subs	sl, r0, #0
   186c0:	beq	1883c <__assert_fail@plt+0x7630>
   186c4:	ldr	r0, [r5, #96]	; 0x60
   186c8:	bl	10f54 <free@plt>
   186cc:	mov	r1, #72	; 0x48
   186d0:	mov	r0, r8
   186d4:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   186d8:	cmp	r0, #0
   186dc:	str	r0, [r5, #96]	; 0x60
   186e0:	beq	188c4 <__assert_fail@plt+0x76b8>
   186e4:	mov	fp, #0
   186e8:	ldr	r6, [pc, #504]	; 188e8 <__assert_fail@plt+0x76dc>
   186ec:	add	r4, r0, #72	; 0x48
   186f0:	mov	r9, fp
   186f4:	mov	r5, sl
   186f8:	b	18738 <__assert_fail@plt+0x752c>
   186fc:	ldr	r3, [r4, #-64]	; 0xffffffc0
   18700:	str	r9, [sp, #28]
   18704:	and	r3, r3, #64	; 0x40
   18708:	str	r3, [sp, #24]
   1870c:	ldrd	r2, [sp, #24]
   18710:	orrs	r3, r2, r3
   18714:	beq	18724 <__assert_fail@plt+0x7518>
   18718:	ldr	r3, [r4, #-28]	; 0xffffffe4
   1871c:	cmp	r3, r8
   18720:	bhi	18878 <__assert_fail@plt+0x766c>
   18724:	add	fp, fp, #1
   18728:	cmp	r8, fp
   1872c:	add	r4, r4, #72	; 0x48
   18730:	add	r5, r5, #64	; 0x40
   18734:	bls	18848 <__assert_fail@plt+0x763c>
   18738:	ldr	r3, [r6]
   1873c:	mov	r1, #4
   18740:	mov	r0, r5
   18744:	blx	r3
   18748:	mov	r1, #4
   1874c:	ldr	r3, [r6]
   18750:	str	r0, [r4, #-72]	; 0xffffffb8
   18754:	add	r0, r5, r1
   18758:	blx	r3
   1875c:	mov	r1, #8
   18760:	ldr	r3, [r6]
   18764:	str	r0, [r4, #-68]	; 0xffffffbc
   18768:	add	r0, r5, r1
   1876c:	blx	r3
   18770:	ldr	r3, [r6]
   18774:	strd	r0, [r4, #-64]	; 0xffffffc0
   18778:	mov	r1, #8
   1877c:	add	r0, r5, #16
   18780:	blx	r3
   18784:	ldr	r3, [r6]
   18788:	strd	r0, [r4, #-56]	; 0xffffffc8
   1878c:	mov	r1, #8
   18790:	add	r0, r5, #32
   18794:	blx	r3
   18798:	ldr	r3, [r6]
   1879c:	strd	r0, [r4, #-40]	; 0xffffffd8
   187a0:	mov	r1, #8
   187a4:	add	r0, r5, #56	; 0x38
   187a8:	blx	r3
   187ac:	ldr	r3, [r6]
   187b0:	strd	r0, [r4, #-16]
   187b4:	mov	r1, #4
   187b8:	add	r0, r5, #40	; 0x28
   187bc:	blx	r3
   187c0:	ldr	r3, [r6]
   187c4:	mov	r1, #4
   187c8:	str	r0, [r4, #-32]	; 0xffffffe0
   187cc:	add	r0, r5, #44	; 0x2c
   187d0:	blx	r3
   187d4:	ldr	r3, [r6]
   187d8:	mov	r1, #8
   187dc:	str	r0, [r4, #-28]	; 0xffffffe4
   187e0:	add	r0, r5, #24
   187e4:	blx	r3
   187e8:	ldr	r3, [r6]
   187ec:	strd	r0, [r4, #-48]	; 0xffffffd0
   187f0:	mov	r1, #8
   187f4:	add	r0, r5, #48	; 0x30
   187f8:	blx	r3
   187fc:	cmp	r7, #0
   18800:	strd	r0, [r4, #-24]	; 0xffffffe8
   18804:	bne	18724 <__assert_fail@plt+0x7518>
   18808:	ldr	r3, [r4, #-32]	; 0xffffffe0
   1880c:	cmp	r3, r8
   18810:	bls	186fc <__assert_fail@plt+0x74f0>
   18814:	mov	r2, #5
   18818:	ldr	r1, [pc, #204]	; 188ec <__assert_fail@plt+0x76e0>
   1881c:	mov	r0, r7
   18820:	bl	10f90 <dcgettext@plt>
   18824:	ldr	r2, [r4, #-32]	; 0xffffffe0
   18828:	mov	r1, fp
   1882c:	bl	54dd0 <warn@@Base>
   18830:	b	186fc <__assert_fail@plt+0x74f0>
   18834:	cmp	r7, #0
   18838:	beq	1885c <__assert_fail@plt+0x7650>
   1883c:	mov	r0, #0
   18840:	add	sp, sp, #36	; 0x24
   18844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18848:	mov	r0, sl
   1884c:	bl	10f54 <free@plt>
   18850:	mov	r0, #1
   18854:	add	sp, sp, #36	; 0x24
   18858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1885c:	mov	r2, #5
   18860:	ldr	r1, [pc, #136]	; 188f0 <__assert_fail@plt+0x76e4>
   18864:	mov	r0, r7
   18868:	bl	10f90 <dcgettext@plt>
   1886c:	bl	548ac <error@@Base>
   18870:	mov	r0, r7
   18874:	b	18840 <__assert_fail@plt+0x7634>
   18878:	mov	r2, #5
   1887c:	ldr	r1, [pc, #112]	; 188f4 <__assert_fail@plt+0x76e8>
   18880:	mov	r0, #0
   18884:	bl	10f90 <dcgettext@plt>
   18888:	ldr	r2, [r4, #-28]	; 0xffffffe4
   1888c:	mov	r1, fp
   18890:	bl	54dd0 <warn@@Base>
   18894:	b	18724 <__assert_fail@plt+0x7518>
   18898:	mov	r2, #5
   1889c:	ldr	r1, [pc, #84]	; 188f8 <__assert_fail@plt+0x76ec>
   188a0:	mov	r0, r4
   188a4:	bl	10f90 <dcgettext@plt>
   188a8:	bl	54dd0 <warn@@Base>
   188ac:	ldr	r9, [r5, #48]	; 0x30
   188b0:	mov	r2, #5
   188b4:	ldr	r1, [pc, #64]	; 188fc <__assert_fail@plt+0x76f0>
   188b8:	mov	r0, #0
   188bc:	bl	10f90 <dcgettext@plt>
   188c0:	b	18694 <__assert_fail@plt+0x7488>
   188c4:	cmp	r7, #0
   188c8:	bne	1883c <__assert_fail@plt+0x7630>
   188cc:	mov	r2, #5
   188d0:	ldr	r1, [pc, #40]	; 18900 <__assert_fail@plt+0x76f4>
   188d4:	bl	10f90 <dcgettext@plt>
   188d8:	mov	r1, r8
   188dc:	bl	548ac <error@@Base>
   188e0:	mov	r0, r7
   188e4:	b	18840 <__assert_fail@plt+0x7634>
   188e8:	andeq	lr, r9, ip, asr sp
   188ec:	ldrdeq	r3, [r6], -r0
   188f0:	andeq	r3, r6, r0, ror #23
   188f4:	andeq	r3, r6, r4, lsl #26
   188f8:	andeq	r3, r6, r8, lsr ip
   188fc:	muleq	r6, r4, ip
   18900:	andeq	r3, r6, r4, lsr #25
   18904:	ldr	ip, [pc, #656]	; 18b9c <__assert_fail@plt+0x7990>
   18908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1890c:	mov	sl, r1
   18910:	ldr	r8, [ip]
   18914:	sub	sp, sp, #36	; 0x24
   18918:	cmp	r8, #0
   1891c:	mov	r5, r2
   18920:	mov	fp, r3
   18924:	add	r6, r0, #4
   18928:	add	r7, r0, #8
   1892c:	beq	18a2c <__assert_fail@plt+0x7820>
   18930:	mov	r4, #0
   18934:	mov	r2, #5
   18938:	ldr	r1, [pc, #608]	; 18ba0 <__assert_fail@plt+0x7994>
   1893c:	mov	r0, r4
   18940:	bl	10f90 <dcgettext@plt>
   18944:	mov	r9, #0
   18948:	mov	r8, #1
   1894c:	str	r5, [sp, #8]
   18950:	strd	r8, [sp]
   18954:	str	r4, [sp, #12]
   18958:	mov	r3, sl
   1895c:	mov	r2, r7
   18960:	mov	r1, r6
   18964:	str	r0, [sp, #16]
   18968:	mov	r0, r4
   1896c:	bl	1717c <__assert_fail@plt+0x5f70>
   18970:	subs	r9, r0, #0
   18974:	beq	18a1c <__assert_fail@plt+0x7810>
   18978:	ldr	r6, [pc, #548]	; 18ba4 <__assert_fail@plt+0x7998>
   1897c:	mov	r1, #24
   18980:	umull	r3, r6, r6, r5
   18984:	lsr	r6, r6, #3
   18988:	mov	r0, r6
   1898c:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   18990:	subs	r7, r0, #0
   18994:	beq	18b58 <__assert_fail@plt+0x794c>
   18998:	cmp	r5, #11
   1899c:	bls	189f8 <__assert_fail@plt+0x77ec>
   189a0:	ldr	r5, [pc, #512]	; 18ba8 <__assert_fail@plt+0x799c>
   189a4:	mov	sl, r9
   189a8:	mov	r8, r7
   189ac:	ldr	r3, [r5]
   189b0:	mov	r0, sl
   189b4:	mov	r1, #4
   189b8:	blx	r3
   189bc:	ldr	r3, [r5]
   189c0:	add	r4, r4, #1
   189c4:	add	r8, r8, #24
   189c8:	strd	r0, [r8, #-24]	; 0xffffffe8
   189cc:	mov	r1, #4
   189d0:	add	r0, sl, r1
   189d4:	blx	r3
   189d8:	strd	r0, [r8, #-16]
   189dc:	add	r0, sl, #8
   189e0:	mov	r1, #4
   189e4:	bl	550b8 <warn@@Base+0x2e8>
   189e8:	cmp	r6, r4
   189ec:	add	sl, sl, #12
   189f0:	strd	r0, [r8, #-8]
   189f4:	bhi	189ac <__assert_fail@plt+0x77a0>
   189f8:	mov	r0, r9
   189fc:	bl	10f54 <free@plt>
   18a00:	ldr	r3, [sp, #72]	; 0x48
   18a04:	mov	r8, #1
   18a08:	str	r7, [fp]
   18a0c:	str	r6, [r3]
   18a10:	mov	r0, r8
   18a14:	add	sp, sp, #36	; 0x24
   18a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a1c:	mov	r8, #0
   18a20:	mov	r0, r8
   18a24:	add	sp, sp, #36	; 0x24
   18a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a2c:	mov	r2, #5
   18a30:	ldr	r1, [pc, #372]	; 18bac <__assert_fail@plt+0x79a0>
   18a34:	mov	r9, r0
   18a38:	mov	r0, r8
   18a3c:	bl	10f90 <dcgettext@plt>
   18a40:	mov	r2, r7
   18a44:	mov	r1, r6
   18a48:	mov	r7, #0
   18a4c:	mov	r6, #1
   18a50:	mov	r3, sl
   18a54:	str	r5, [sp, #8]
   18a58:	str	r8, [sp, #12]
   18a5c:	strd	r6, [sp]
   18a60:	str	r0, [sp, #16]
   18a64:	mov	r0, r8
   18a68:	bl	1717c <__assert_fail@plt+0x5f70>
   18a6c:	subs	r3, r0, #0
   18a70:	str	r3, [sp, #28]
   18a74:	beq	18a1c <__assert_fail@plt+0x7810>
   18a78:	ldr	r6, [pc, #292]	; 18ba4 <__assert_fail@plt+0x7998>
   18a7c:	mov	r1, #24
   18a80:	umull	r3, r6, r6, r5
   18a84:	lsr	r6, r6, #4
   18a88:	mov	r0, r6
   18a8c:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   18a90:	subs	r7, r0, #0
   18a94:	beq	18b7c <__assert_fail@plt+0x7970>
   18a98:	cmp	r5, #23
   18a9c:	bls	18b4c <__assert_fail@plt+0x7940>
   18aa0:	ldr	r5, [pc, #256]	; 18ba8 <__assert_fail@plt+0x799c>
   18aa4:	ldr	sl, [sp, #28]
   18aa8:	mov	r4, r7
   18aac:	b	18abc <__assert_fail@plt+0x78b0>
   18ab0:	cmp	r6, r8
   18ab4:	add	r4, r4, #24
   18ab8:	bls	18b4c <__assert_fail@plt+0x7940>
   18abc:	ldr	r2, [r5]
   18ac0:	mov	r0, sl
   18ac4:	mov	r1, #8
   18ac8:	blx	r2
   18acc:	ldr	r2, [r5]
   18ad0:	add	r8, r8, #1
   18ad4:	strd	r0, [r4]
   18ad8:	mov	r1, #8
   18adc:	add	r0, sl, r1
   18ae0:	blx	r2
   18ae4:	strd	r0, [r4, #8]
   18ae8:	add	r0, sl, #16
   18aec:	mov	r1, #8
   18af0:	bl	550b8 <warn@@Base+0x2e8>
   18af4:	ldrh	r2, [r9, #66]	; 0x42
   18af8:	add	sl, sl, #24
   18afc:	cmp	r2, #8
   18b00:	strd	r0, [r4, #16]
   18b04:	bne	18ab0 <__assert_fail@plt+0x78a4>
   18b08:	ldrb	r2, [r9, #21]
   18b0c:	cmp	r2, #2
   18b10:	beq	18ab0 <__assert_fail@plt+0x78a4>
   18b14:	ldr	r0, [r4, #12]
   18b18:	ldr	r1, [r4, #8]
   18b1c:	cmp	r6, r8
   18b20:	lsr	r2, r0, #8
   18b24:	and	r2, r2, #65280	; 0xff00
   18b28:	lsl	ip, r0, #8
   18b2c:	orr	r2, r2, r0, lsr #24
   18b30:	and	ip, ip, #16711680	; 0xff0000
   18b34:	orr	r2, r2, ip
   18b38:	orr	r2, r2, r0, lsl #24
   18b3c:	str	r2, [r4, #8]
   18b40:	str	r1, [r4, #12]
   18b44:	add	r4, r4, #24
   18b48:	bhi	18abc <__assert_fail@plt+0x78b0>
   18b4c:	ldr	r0, [sp, #28]
   18b50:	bl	10f54 <free@plt>
   18b54:	b	18a00 <__assert_fail@plt+0x77f4>
   18b58:	mov	r0, r9
   18b5c:	bl	10f54 <free@plt>
   18b60:	mov	r2, #5
   18b64:	ldr	r1, [pc, #68]	; 18bb0 <__assert_fail@plt+0x79a4>
   18b68:	mov	r0, r7
   18b6c:	bl	10f90 <dcgettext@plt>
   18b70:	bl	548ac <error@@Base>
   18b74:	mov	r8, r7
   18b78:	b	18a10 <__assert_fail@plt+0x7804>
   18b7c:	ldr	r0, [sp, #28]
   18b80:	bl	10f54 <free@plt>
   18b84:	mov	r2, #5
   18b88:	ldr	r1, [pc, #32]	; 18bb0 <__assert_fail@plt+0x79a4>
   18b8c:	mov	r0, r8
   18b90:	bl	10f90 <dcgettext@plt>
   18b94:	bl	548ac <error@@Base>
   18b98:	b	18a10 <__assert_fail@plt+0x7804>
   18b9c:	andeq	sl, r9, r8, lsr r4
   18ba0:	andeq	r3, r6, r4, ror #20
   18ba4:	bge	feac3658 <optarg@@GLIBC_2.4+0xfea29228>
   18ba8:	andeq	lr, r9, ip, asr sp
   18bac:	muleq	r6, ip, sl
   18bb0:	andeq	r3, r6, ip, ror sl
   18bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bb8:	sub	sp, sp, #116	; 0x74
   18bbc:	ldr	r9, [pc, #1428]	; 19158 <__assert_fail@plt+0x7f4c>
   18bc0:	str	r0, [sp, #28]
   18bc4:	mov	r2, #40	; 0x28
   18bc8:	mov	r1, #0
   18bcc:	add	r0, sp, #72	; 0x48
   18bd0:	bl	110bc <memset@plt>
   18bd4:	ldr	r3, [r9, #688]	; 0x2b0
   18bd8:	ldr	fp, [r9, #684]	; 0x2ac
   18bdc:	add	r3, fp, r3, lsl #4
   18be0:	cmp	fp, r3
   18be4:	mov	r3, #0
   18be8:	str	r3, [sp, #60]	; 0x3c
   18bec:	str	r3, [sp, #56]	; 0x38
   18bf0:	str	r3, [sp, #64]	; 0x40
   18bf4:	str	r3, [sp, #68]	; 0x44
   18bf8:	bcs	19144 <__assert_fail@plt+0x7f38>
   18bfc:	str	r3, [sp, #24]
   18c00:	str	r3, [sp, #32]
   18c04:	str	r3, [sp, #52]	; 0x34
   18c08:	mov	r3, #1
   18c0c:	str	r3, [sp, #36]	; 0x24
   18c10:	b	18c68 <__assert_fail@plt+0x7a5c>
   18c14:	cmp	r3, #0
   18c18:	cmpeq	r2, #10
   18c1c:	beq	18ef4 <__assert_fail@plt+0x7ce8>
   18c20:	bls	18e80 <__assert_fail@plt+0x7c74>
   18c24:	ldr	r0, [pc, #1328]	; 1915c <__assert_fail@plt+0x7f50>
   18c28:	mov	r1, #0
   18c2c:	cmp	r3, r1
   18c30:	cmpeq	r2, r0
   18c34:	beq	18edc <__assert_fail@plt+0x7cd0>
   18c38:	ldr	r0, [pc, #1312]	; 19160 <__assert_fail@plt+0x7f54>
   18c3c:	mov	r1, #0
   18c40:	cmp	r3, r1
   18c44:	cmpeq	r2, r0
   18c48:	ldrdeq	r2, [fp, #8]
   18c4c:	strdeq	r2, [sp, #56]	; 0x38
   18c50:	ldr	r2, [r9, #688]	; 0x2b0
   18c54:	ldr	r3, [r9, #684]	; 0x2ac
   18c58:	add	fp, fp, #16
   18c5c:	add	r3, r3, r2, lsl #4
   18c60:	cmp	fp, r3
   18c64:	bcs	18eb0 <__assert_fail@plt+0x7ca4>
   18c68:	ldrd	r2, [fp]
   18c6c:	ldr	r0, [pc, #1264]	; 19164 <__assert_fail@plt+0x7f58>
   18c70:	mov	r1, #0
   18c74:	cmp	r3, r1
   18c78:	cmpeq	r2, r0
   18c7c:	beq	18ee8 <__assert_fail@plt+0x7cdc>
   18c80:	bls	18c14 <__assert_fail@plt+0x7a08>
   18c84:	ldr	r0, [pc, #1244]	; 19168 <__assert_fail@plt+0x7f5c>
   18c88:	mov	r1, #0
   18c8c:	cmp	r3, r1
   18c90:	cmpeq	r2, r0
   18c94:	beq	18ed0 <__assert_fail@plt+0x7cc4>
   18c98:	bls	18e94 <__assert_fail@plt+0x7c88>
   18c9c:	ldr	r0, [pc, #1224]	; 1916c <__assert_fail@plt+0x7f60>
   18ca0:	mov	r1, #0
   18ca4:	cmp	r3, r1
   18ca8:	cmpeq	r2, r0
   18cac:	beq	18f68 <__assert_fail@plt+0x7d5c>
   18cb0:	ldr	r0, [pc, #1208]	; 19170 <__assert_fail@plt+0x7f64>
   18cb4:	mov	r1, #0
   18cb8:	cmp	r3, r1
   18cbc:	cmpeq	r2, r0
   18cc0:	bne	18c50 <__assert_fail@plt+0x7a44>
   18cc4:	ldr	r3, [fp, #8]
   18cc8:	ldr	ip, [fp, #12]
   18ccc:	ldr	r8, [r9, #692]	; 0x2b4
   18cd0:	mov	r2, #5
   18cd4:	ldr	r1, [pc, #1176]	; 19174 <__assert_fail@plt+0x7f68>
   18cd8:	mov	r0, #0
   18cdc:	ldrd	r6, [sp, #96]	; 0x60
   18ce0:	add	r8, r8, r3
   18ce4:	str	r3, [sp, #104]	; 0x68
   18ce8:	str	ip, [sp, #108]	; 0x6c
   18cec:	bl	10f90 <dcgettext@plt>
   18cf0:	mov	r4, #1
   18cf4:	ldr	r1, [sp, #28]
   18cf8:	lsl	r3, r7, #5
   18cfc:	mov	r5, #0
   18d00:	orr	r3, r3, r6, lsr #27
   18d04:	lsl	r7, r6, #5
   18d08:	str	r3, [sp, #12]
   18d0c:	add	r2, r1, #8
   18d10:	mov	r3, r8
   18d14:	str	r7, [sp, #8]
   18d18:	strd	r4, [sp]
   18d1c:	add	r1, r1, #4
   18d20:	str	r0, [sp, #16]
   18d24:	mov	r0, #0
   18d28:	bl	1717c <__assert_fail@plt+0x5f70>
   18d2c:	subs	r3, r0, #0
   18d30:	str	r3, [sp, #48]	; 0x30
   18d34:	beq	19138 <__assert_fail@plt+0x7f2c>
   18d38:	ldr	r3, [sp, #32]
   18d3c:	mov	r0, #0
   18d40:	str	r3, [sp, #40]	; 0x28
   18d44:	str	r0, [sp, #44]	; 0x2c
   18d48:	ldrd	r4, [sp, #80]	; 0x50
   18d4c:	ldrd	r2, [sp, #40]	; 0x28
   18d50:	cmp	r3, r5
   18d54:	cmpeq	r2, r4
   18d58:	bls	1911c <__assert_fail@plt+0x7f10>
   18d5c:	ldr	r3, [sp, #24]
   18d60:	add	r4, r3, r4
   18d64:	mov	r2, #5
   18d68:	ldr	r1, [pc, #1032]	; 19178 <__assert_fail@plt+0x7f6c>
   18d6c:	mov	r0, #0
   18d70:	bl	10f90 <dcgettext@plt>
   18d74:	ldr	r3, [sp, #72]	; 0x48
   18d78:	mov	r2, r4
   18d7c:	ldr	r1, [sp, #88]	; 0x58
   18d80:	bl	10f24 <printf@plt>
   18d84:	mov	r2, #5
   18d88:	ldr	r1, [pc, #1004]	; 1917c <__assert_fail@plt+0x7f70>
   18d8c:	mov	r0, #0
   18d90:	bl	10f90 <dcgettext@plt>
   18d94:	bl	10f24 <printf@plt>
   18d98:	cmp	r6, #0
   18d9c:	ble	18e74 <__assert_fail@plt+0x7c68>
   18da0:	ldr	r3, [sp, #48]	; 0x30
   18da4:	add	r7, r7, #12
   18da8:	ldr	r4, [pc, #976]	; 19180 <__assert_fail@plt+0x7f74>
   18dac:	ldr	sl, [pc, #976]	; 19184 <__assert_fail@plt+0x7f78>
   18db0:	ldr	r8, [pc, #976]	; 19188 <__assert_fail@plt+0x7f7c>
   18db4:	add	r7, r3, r7
   18db8:	add	r5, r3, #12
   18dbc:	ldr	r3, [r4]
   18dc0:	mov	r0, r5
   18dc4:	mov	r1, #4
   18dc8:	blx	r3
   18dcc:	mov	r1, r0
   18dd0:	ldr	r0, [pc, #948]	; 1918c <__assert_fail@plt+0x7f80>
   18dd4:	bl	10f24 <printf@plt>
   18dd8:	ldr	r3, [pc, #944]	; 19190 <__assert_fail@plt+0x7f84>
   18ddc:	sub	r0, r5, #12
   18de0:	mov	r1, #8
   18de4:	ldr	r6, [r3]
   18de8:	ldr	r3, [r4]
   18dec:	blx	r3
   18df0:	mov	r2, r0
   18df4:	mov	r3, r1
   18df8:	mov	r0, r6
   18dfc:	ldr	r1, [pc, #912]	; 19194 <__assert_fail@plt+0x7f88>
   18e00:	bl	11098 <fprintf@plt>
   18e04:	ldr	r3, [r4]
   18e08:	sub	r0, r5, #4
   18e0c:	mov	r1, #4
   18e10:	blx	r3
   18e14:	mov	r6, r0
   18e18:	bl	11bb8 <__assert_fail@plt+0x9ac>
   18e1c:	subs	r1, r0, #0
   18e20:	moveq	r1, r6
   18e24:	mov	r0, sl
   18e28:	ldreq	r0, [pc, #872]	; 19198 <__assert_fail@plt+0x7f8c>
   18e2c:	bl	10f24 <printf@plt>
   18e30:	ldr	r3, [r4]
   18e34:	add	r0, r5, #12
   18e38:	mov	r1, #4
   18e3c:	blx	r3
   18e40:	mov	r1, r0
   18e44:	mov	r0, r8
   18e48:	bl	10f24 <printf@plt>
   18e4c:	ldr	r3, [r4]
   18e50:	add	r0, r5, #16
   18e54:	mov	r1, #4
   18e58:	blx	r3
   18e5c:	add	r5, r5, #32
   18e60:	mov	r1, r0
   18e64:	ldr	r0, [pc, #816]	; 1919c <__assert_fail@plt+0x7f90>
   18e68:	bl	10f24 <printf@plt>
   18e6c:	cmp	r7, r5
   18e70:	bne	18dbc <__assert_fail@plt+0x7bb0>
   18e74:	ldr	r0, [sp, #48]	; 0x30
   18e78:	bl	10f54 <free@plt>
   18e7c:	b	18c50 <__assert_fail@plt+0x7a44>
   18e80:	cmp	r3, #0
   18e84:	cmpeq	r2, #1
   18e88:	ldrdeq	r2, [fp, #8]
   18e8c:	strdeq	r2, [sp, #80]	; 0x50
   18e90:	b	18c50 <__assert_fail@plt+0x7a44>
   18e94:	ldr	r0, [pc, #772]	; 191a0 <__assert_fail@plt+0x7f94>
   18e98:	mov	r1, #0
   18e9c:	cmp	r3, r1
   18ea0:	cmpeq	r2, r0
   18ea4:	ldrdeq	r2, [fp, #8]
   18ea8:	strdeq	r2, [sp, #88]	; 0x58
   18eac:	b	18c50 <__assert_fail@plt+0x7a44>
   18eb0:	ldr	r3, [sp, #24]
   18eb4:	cmp	r3, #0
   18eb8:	beq	18ec4 <__assert_fail@plt+0x7cb8>
   18ebc:	mov	r0, r3
   18ec0:	bl	10f54 <free@plt>
   18ec4:	ldr	r0, [sp, #36]	; 0x24
   18ec8:	add	sp, sp, #116	; 0x74
   18ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ed0:	ldr	r3, [fp, #8]
   18ed4:	str	r3, [sp, #52]	; 0x34
   18ed8:	b	18c50 <__assert_fail@plt+0x7a44>
   18edc:	ldrd	r2, [fp, #8]
   18ee0:	strd	r2, [sp, #72]	; 0x48
   18ee4:	b	18c50 <__assert_fail@plt+0x7a44>
   18ee8:	ldrd	r2, [fp, #8]
   18eec:	strd	r2, [sp, #96]	; 0x60
   18ef0:	b	18c50 <__assert_fail@plt+0x7a44>
   18ef4:	ldr	r3, [sp, #24]
   18ef8:	ldr	r4, [fp, #12]
   18efc:	cmp	r3, #0
   18f00:	ldr	r3, [fp, #8]
   18f04:	str	r3, [sp, #32]
   18f08:	bne	18c50 <__assert_fail@plt+0x7a44>
   18f0c:	ldr	r8, [sp, #24]
   18f10:	ldr	r3, [sp, #52]	; 0x34
   18f14:	ldr	r5, [r9, #692]	; 0x2b4
   18f18:	mov	r2, #5
   18f1c:	ldr	r1, [pc, #640]	; 191a4 <__assert_fail@plt+0x7f98>
   18f20:	mov	r0, r8
   18f24:	add	r5, r5, r3
   18f28:	bl	10f90 <dcgettext@plt>
   18f2c:	mov	r6, #1
   18f30:	ldr	r2, [sp, #32]
   18f34:	ldr	r1, [sp, #28]
   18f38:	mov	r7, #0
   18f3c:	str	r2, [sp, #8]
   18f40:	mov	r3, r5
   18f44:	add	r2, r1, #8
   18f48:	str	r4, [sp, #12]
   18f4c:	strd	r6, [sp]
   18f50:	add	r1, r1, #4
   18f54:	str	r0, [sp, #16]
   18f58:	mov	r0, r8
   18f5c:	bl	1717c <__assert_fail@plt+0x5f70>
   18f60:	str	r0, [sp, #24]
   18f64:	b	18c50 <__assert_fail@plt+0x7a44>
   18f68:	ldr	r3, [fp, #8]
   18f6c:	ldr	ip, [fp, #12]
   18f70:	ldr	r6, [r9, #692]	; 0x2b4
   18f74:	mov	r2, #5
   18f78:	ldr	r1, [pc, #552]	; 191a8 <__assert_fail@plt+0x7f9c>
   18f7c:	mov	r0, #0
   18f80:	ldr	r4, [sp, #56]	; 0x38
   18f84:	ldr	r7, [sp, #60]	; 0x3c
   18f88:	add	r6, r6, r3
   18f8c:	str	r3, [sp, #64]	; 0x40
   18f90:	str	ip, [sp, #68]	; 0x44
   18f94:	bl	10f90 <dcgettext@plt>
   18f98:	lsl	r5, r4, #2
   18f9c:	lsl	r1, r7, #2
   18fa0:	adds	r2, r5, r4
   18fa4:	orr	r1, r1, r4, lsr #30
   18fa8:	adc	r1, r1, r7
   18fac:	mov	r3, r6
   18fb0:	lsl	r7, r1, #3
   18fb4:	orr	r7, r7, r2, lsr #29
   18fb8:	mov	r1, r7
   18fbc:	str	r1, [sp, #12]
   18fc0:	mov	r6, #1
   18fc4:	ldr	r1, [sp, #28]
   18fc8:	mov	r7, #0
   18fcc:	lsl	r2, r2, #3
   18fd0:	str	r2, [sp, #8]
   18fd4:	strd	r6, [sp]
   18fd8:	add	r2, r1, #8
   18fdc:	add	r1, r1, #4
   18fe0:	str	r0, [sp, #16]
   18fe4:	mov	r0, #0
   18fe8:	bl	1717c <__assert_fail@plt+0x5f70>
   18fec:	subs	r3, r0, #0
   18ff0:	str	r3, [sp, #48]	; 0x30
   18ff4:	beq	19138 <__assert_fail@plt+0x7f2c>
   18ff8:	mov	r2, #5
   18ffc:	ldr	r1, [pc, #424]	; 191ac <__assert_fail@plt+0x7fa0>
   19000:	mov	r0, #0
   19004:	bl	10f90 <dcgettext@plt>
   19008:	bl	10f24 <printf@plt>
   1900c:	mov	r2, #5
   19010:	ldr	r1, [pc, #408]	; 191b0 <__assert_fail@plt+0x7fa4>
   19014:	mov	r0, #0
   19018:	bl	10f90 <dcgettext@plt>
   1901c:	bl	10f24 <printf@plt>
   19020:	cmp	r4, #0
   19024:	ble	18e74 <__assert_fail@plt+0x7c68>
   19028:	add	r7, r5, r4
   1902c:	ldr	r3, [sp, #48]	; 0x30
   19030:	ldr	r4, [pc, #328]	; 19180 <__assert_fail@plt+0x7f74>
   19034:	add	r7, r3, r7, lsl #3
   19038:	ldr	r6, [pc, #332]	; 1918c <__assert_fail@plt+0x7f80>
   1903c:	ldr	sl, [pc, #368]	; 191b4 <__assert_fail@plt+0x7fa8>
   19040:	add	r7, r7, #12
   19044:	add	r5, r3, #12
   19048:	ldr	r3, [r4]
   1904c:	mov	r0, r5
   19050:	mov	r1, #4
   19054:	blx	r3
   19058:	mov	r1, r0
   1905c:	mov	r0, r6
   19060:	bl	10f24 <printf@plt>
   19064:	ldr	r3, [r4]
   19068:	sub	r0, r5, #12
   1906c:	mov	r1, #8
   19070:	blx	r3
   19074:	mov	r2, r0
   19078:	mov	r3, r1
   1907c:	ldr	r0, [pc, #308]	; 191b8 <__assert_fail@plt+0x7fac>
   19080:	bl	10f24 <printf@plt>
   19084:	ldr	r3, [r4]
   19088:	sub	r0, r5, #4
   1908c:	mov	r1, #4
   19090:	blx	r3
   19094:	mov	r8, r0
   19098:	bl	11bb8 <__assert_fail@plt+0x9ac>
   1909c:	subs	r1, r0, #0
   190a0:	moveq	r1, r8
   190a4:	mov	r0, sl
   190a8:	ldreq	r0, [pc, #268]	; 191bc <__assert_fail@plt+0x7fb0>
   190ac:	bl	10f24 <printf@plt>
   190b0:	ldr	r3, [r4]
   190b4:	add	r0, r5, #4
   190b8:	mov	r1, #8
   190bc:	blx	r3
   190c0:	mov	r2, #5
   190c4:	bl	14244 <__assert_fail@plt+0x3038>
   190c8:	ldr	r3, [r4]
   190cc:	add	r0, r5, #20
   190d0:	mov	r1, #4
   190d4:	blx	r3
   190d8:	mov	r1, r0
   190dc:	mov	r0, r6
   190e0:	bl	10f24 <printf@plt>
   190e4:	ldr	r3, [r4]
   190e8:	add	r0, r5, #12
   190ec:	mov	r1, #8
   190f0:	blx	r3
   190f4:	add	r5, r5, #40	; 0x28
   190f8:	mov	r2, r0
   190fc:	mov	r3, r1
   19100:	ldr	r0, [pc, #184]	; 191c0 <__assert_fail@plt+0x7fb4>
   19104:	bl	10f24 <printf@plt>
   19108:	cmp	r7, r5
   1910c:	bne	19048 <__assert_fail@plt+0x7e3c>
   19110:	ldr	r0, [sp, #48]	; 0x30
   19114:	bl	10f54 <free@plt>
   19118:	b	18c50 <__assert_fail@plt+0x7a44>
   1911c:	mov	r2, #5
   19120:	ldr	r1, [pc, #156]	; 191c4 <__assert_fail@plt+0x7fb8>
   19124:	bl	10f90 <dcgettext@plt>
   19128:	mov	r1, r4
   1912c:	bl	54dd0 <warn@@Base>
   19130:	ldr	r4, [pc, #144]	; 191c8 <__assert_fail@plt+0x7fbc>
   19134:	b	18d64 <__assert_fail@plt+0x7b58>
   19138:	ldr	r3, [sp, #48]	; 0x30
   1913c:	str	r3, [sp, #36]	; 0x24
   19140:	b	18c50 <__assert_fail@plt+0x7a44>
   19144:	mov	r3, #1
   19148:	str	r3, [sp, #36]	; 0x24
   1914c:	ldr	r0, [sp, #36]	; 0x24
   19150:	add	sp, sp, #116	; 0x74
   19154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19158:	andeq	sl, r9, r8, lsr r4
   1915c:	andvs	r0, r0, sp, lsl r0
   19160:	andvs	r0, r0, pc, lsl r0
   19164:	andvs	r0, r0, r3, lsr #32
   19168:	andvs	r0, r0, r1, asr #32
   1916c:	andvs	r0, r0, r5, asr #32
   19170:	andvs	r0, r0, r9, asr #32
   19174:	andeq	r3, r6, r0, asr sp
   19178:	andeq	r3, r6, ip, lsr #27
   1917c:	andeq	r3, r6, r4, ror #27
   19180:	andeq	lr, r9, ip, asr sp
   19184:	andeq	r3, r6, ip, asr #28
   19188:	andeq	r3, r6, r4, asr lr
   1918c:	andeq	r8, r6, r4, lsl sp
   19190:	andeq	sl, r9, ip, lsr #8
   19194:	andeq	r2, r6, r8, asr sp
   19198:	andeq	r3, r6, ip, lsr #28
   1919c:	andeq	r3, r6, ip, asr lr
   191a0:	andvs	r0, r0, r5, lsr #32
   191a4:	andeq	r3, r6, r8, lsr sp
   191a8:	andeq	r3, r6, r4, ror #28
   191ac:	andeq	r3, r6, r8, lsl #29
   191b0:	muleq	r6, r8, lr
   191b4:	andeq	r3, r6, ip, lsl #30
   191b8:	andeq	r3, r6, r4, ror #29
   191bc:	andeq	r3, r6, ip, ror #29
   191c0:	andeq	r3, r6, r4, lsl pc
   191c4:	andeq	r3, r6, r0, ror sp
   191c8:	strdeq	r9, [r6], -r8
   191cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191d0:	mov	fp, r0
   191d4:	ldr	sl, [pc, #2296]	; 19ad4 <__assert_fail@plt+0x88c8>
   191d8:	sub	sp, sp, #92	; 0x5c
   191dc:	ldr	r3, [sl, #824]	; 0x338
   191e0:	cmp	r3, #0
   191e4:	bne	19424 <__assert_fail@plt+0x8218>
   191e8:	ldr	r3, [sl, #828]	; 0x33c
   191ec:	cmp	r3, #0
   191f0:	beq	19418 <__assert_fail@plt+0x820c>
   191f4:	ldr	r4, [r0, #84]	; 0x54
   191f8:	cmp	r4, #0
   191fc:	beq	1943c <__assert_fail@plt+0x8230>
   19200:	ldr	r9, [fp, #96]	; 0x60
   19204:	cmp	r9, #0
   19208:	beq	19458 <__assert_fail@plt+0x824c>
   1920c:	mov	r1, #4
   19210:	mov	r0, r4
   19214:	bl	10ef4 <calloc@plt>
   19218:	cmp	r0, #0
   1921c:	mov	r5, r0
   19220:	str	r0, [sl, #832]	; 0x340
   19224:	beq	198b4 <__assert_fail@plt+0x86a8>
   19228:	mov	r1, #0
   1922c:	mov	r0, r1
   19230:	mov	r5, r1
   19234:	mov	r2, r1
   19238:	mov	r3, r9
   1923c:	str	r1, [sl, #836]	; 0x344
   19240:	ldr	r1, [r3, #4]
   19244:	add	r2, r2, #1
   19248:	cmp	r1, #17
   1924c:	addeq	r5, r5, #1
   19250:	moveq	r0, #1
   19254:	cmp	r4, r2
   19258:	add	r3, r3, #72	; 0x48
   1925c:	bhi	19240 <__assert_fail@plt+0x8034>
   19260:	cmp	r0, #0
   19264:	beq	193f8 <__assert_fail@plt+0x81ec>
   19268:	cmp	r5, #0
   1926c:	str	r5, [sl, #836]	; 0x344
   19270:	beq	193f8 <__assert_fail@plt+0x81ec>
   19274:	mov	r1, #8
   19278:	mov	r0, r5
   1927c:	bl	10ef4 <calloc@plt>
   19280:	cmp	r0, #0
   19284:	str	r0, [sp, #52]	; 0x34
   19288:	str	r0, [sl, #840]	; 0x348
   1928c:	beq	19898 <__assert_fail@plt+0x868c>
   19290:	mov	r3, #0
   19294:	str	r3, [sp, #60]	; 0x3c
   19298:	str	r3, [sp, #40]	; 0x28
   1929c:	str	r3, [sp, #32]
   192a0:	str	r3, [sp, #56]	; 0x38
   192a4:	mov	r6, r3
   192a8:	mov	r8, r3
   192ac:	str	r3, [sp, #84]	; 0x54
   192b0:	b	192c8 <__assert_fail@plt+0x80bc>
   192b4:	ldr	r3, [fp, #84]	; 0x54
   192b8:	add	r8, r8, #1
   192bc:	cmp	r3, r8
   192c0:	add	r9, r9, #72	; 0x48
   192c4:	bls	19490 <__assert_fail@plt+0x8284>
   192c8:	ldr	r3, [r9, #4]
   192cc:	cmp	r3, #17
   192d0:	bne	192b4 <__assert_fail@plt+0x80a8>
   192d4:	add	r3, fp, #108	; 0x6c
   192d8:	add	r0, fp, #104	; 0x68
   192dc:	mov	r1, r3
   192e0:	mov	r2, r9
   192e4:	str	r3, [sp, #48]	; 0x30
   192e8:	str	r0, [sp, #44]	; 0x2c
   192ec:	bl	16c64 <__assert_fail@plt+0x5a58>
   192f0:	ldr	r3, [r9, #40]	; 0x28
   192f4:	ldr	r2, [fp, #84]	; 0x54
   192f8:	cmp	r3, r2
   192fc:	str	r0, [sp, #36]	; 0x24
   19300:	bcs	19474 <__assert_fail@plt+0x8268>
   19304:	add	r3, r3, r3, lsl #3
   19308:	ldr	r2, [fp, #96]	; 0x60
   1930c:	add	r3, r2, r3, lsl #3
   19310:	str	r3, [sp, #28]
   19314:	ldr	r3, [r3, #4]
   19318:	cmp	r3, #2
   1931c:	bne	19474 <__assert_fail@plt+0x8268>
   19320:	ldr	r3, [sp, #28]
   19324:	cmp	r3, r6
   19328:	beq	19360 <__assert_fail@plt+0x8154>
   1932c:	ldr	r3, [sp, #32]
   19330:	cmp	r3, #0
   19334:	beq	19340 <__assert_fail@plt+0x8134>
   19338:	mov	r0, r3
   1933c:	bl	10f54 <free@plt>
   19340:	ldr	r3, [sl]
   19344:	add	r2, sp, #84	; 0x54
   19348:	cmp	r3, #0
   1934c:	ldr	r1, [sp, #28]
   19350:	mov	r0, fp
   19354:	beq	194ec <__assert_fail@plt+0x82e0>
   19358:	bl	1772c <__assert_fail@plt+0x6520>
   1935c:	str	r0, [sp, #32]
   19360:	ldr	r3, [sp, #32]
   19364:	cmp	r3, #0
   19368:	moveq	r2, #5
   1936c:	ldreq	r1, [pc, #1892]	; 19ad8 <__assert_fail@plt+0x88cc>
   19370:	beq	194d4 <__assert_fail@plt+0x82c8>
   19374:	ldr	r6, [r9, #44]	; 0x2c
   19378:	ldr	r3, [sp, #84]	; 0x54
   1937c:	cmp	r6, r3
   19380:	bcs	194cc <__assert_fail@plt+0x82c0>
   19384:	ldr	r3, [sp, #32]
   19388:	add	r3, r3, r6, lsl #5
   1938c:	str	r3, [sp, #64]	; 0x40
   19390:	ldrb	r3, [r3, #20]
   19394:	and	r3, r3, #15
   19398:	cmp	r3, #3
   1939c:	beq	194bc <__assert_fail@plt+0x82b0>
   193a0:	ldr	r3, [sp, #28]
   193a4:	ldr	r2, [r3, #40]	; 0x28
   193a8:	ldr	r3, [fp, #84]	; 0x54
   193ac:	cmp	r2, r3
   193b0:	bcc	194f8 <__assert_fail@plt+0x82ec>
   193b4:	ldr	r0, [sp, #40]	; 0x28
   193b8:	cmp	r0, #0
   193bc:	beq	19888 <__assert_fail@plt+0x867c>
   193c0:	mov	r3, #0
   193c4:	mov	r4, r3
   193c8:	str	r3, [sp, #60]	; 0x3c
   193cc:	bl	10f54 <free@plt>
   193d0:	str	r4, [sp, #40]	; 0x28
   193d4:	ldr	r3, [sp, #40]	; 0x28
   193d8:	mov	r2, #5
   193dc:	ldr	r1, [pc, #1784]	; 19adc <__assert_fail@plt+0x88d0>
   193e0:	mov	r0, #0
   193e4:	str	r3, [sp, #56]	; 0x38
   193e8:	bl	10f90 <dcgettext@plt>
   193ec:	str	r4, [sp, #40]	; 0x28
   193f0:	str	r0, [sp, #72]	; 0x48
   193f4:	b	1959c <__assert_fail@plt+0x8390>
   193f8:	ldr	r3, [sl, #828]	; 0x33c
   193fc:	cmp	r3, #0
   19400:	beq	19418 <__assert_fail@plt+0x820c>
   19404:	mov	r2, #5
   19408:	ldr	r1, [pc, #1744]	; 19ae0 <__assert_fail@plt+0x88d4>
   1940c:	mov	r0, #0
   19410:	bl	10f90 <dcgettext@plt>
   19414:	bl	10f24 <printf@plt>
   19418:	mov	r0, #1
   1941c:	add	sp, sp, #92	; 0x5c
   19420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19424:	ldr	r4, [r0, #84]	; 0x54
   19428:	cmp	r4, #0
   1942c:	bne	19200 <__assert_fail@plt+0x7ff4>
   19430:	ldr	r3, [sl, #828]	; 0x33c
   19434:	cmp	r3, #0
   19438:	beq	19418 <__assert_fail@plt+0x820c>
   1943c:	mov	r2, #5
   19440:	ldr	r1, [pc, #1692]	; 19ae4 <__assert_fail@plt+0x88d8>
   19444:	mov	r0, #0
   19448:	bl	10f90 <dcgettext@plt>
   1944c:	bl	10f24 <printf@plt>
   19450:	mov	r0, #1
   19454:	b	1941c <__assert_fail@plt+0x8210>
   19458:	mov	r2, #5
   1945c:	ldr	r1, [pc, #1668]	; 19ae8 <__assert_fail@plt+0x88dc>
   19460:	mov	r0, r9
   19464:	bl	10f90 <dcgettext@plt>
   19468:	bl	548ac <error@@Base>
   1946c:	mov	r0, r9
   19470:	b	1941c <__assert_fail@plt+0x8210>
   19474:	mov	r2, #5
   19478:	ldr	r1, [pc, #1644]	; 19aec <__assert_fail@plt+0x88e0>
   1947c:	mov	r0, #0
   19480:	bl	10f90 <dcgettext@plt>
   19484:	ldr	r1, [sp, #36]	; 0x24
   19488:	bl	548ac <error@@Base>
   1948c:	b	192b4 <__assert_fail@plt+0x80a8>
   19490:	ldr	r3, [sp, #32]
   19494:	cmp	r3, #0
   19498:	beq	194a4 <__assert_fail@plt+0x8298>
   1949c:	ldr	r0, [sp, #32]
   194a0:	bl	10f54 <free@plt>
   194a4:	ldr	r0, [sp, #40]	; 0x28
   194a8:	cmp	r0, #0
   194ac:	beq	19418 <__assert_fail@plt+0x820c>
   194b0:	bl	10f54 <free@plt>
   194b4:	mov	r0, #1
   194b8:	b	1941c <__assert_fail@plt+0x8210>
   194bc:	ldr	r3, [sp, #64]	; 0x40
   194c0:	ldr	r3, [r3, #24]
   194c4:	cmp	r3, #0
   194c8:	bne	19820 <__assert_fail@plt+0x8614>
   194cc:	ldr	r1, [pc, #1564]	; 19af0 <__assert_fail@plt+0x88e4>
   194d0:	mov	r2, #5
   194d4:	mov	r0, #0
   194d8:	bl	10f90 <dcgettext@plt>
   194dc:	ldr	r1, [sp, #36]	; 0x24
   194e0:	ldr	r6, [sp, #28]
   194e4:	bl	548ac <error@@Base>
   194e8:	b	192b4 <__assert_fail@plt+0x80a8>
   194ec:	bl	17bf4 <__assert_fail@plt+0x69e8>
   194f0:	str	r0, [sp, #32]
   194f4:	b	19360 <__assert_fail@plt+0x8154>
   194f8:	ldr	r3, [fp, #96]	; 0x60
   194fc:	add	r2, r2, r2, lsl #3
   19500:	add	r5, r3, r2, lsl #3
   19504:	ldr	r3, [sp, #56]	; 0x38
   19508:	cmp	r5, r3
   1950c:	beq	19578 <__assert_fail@plt+0x836c>
   19510:	ldr	r3, [sp, #40]	; 0x28
   19514:	cmp	r3, #0
   19518:	beq	19524 <__assert_fail@plt+0x8318>
   1951c:	mov	r0, r3
   19520:	bl	10f54 <free@plt>
   19524:	mov	r2, #5
   19528:	ldr	r1, [pc, #1476]	; 19af4 <__assert_fail@plt+0x88e8>
   1952c:	mov	r0, #0
   19530:	ldrd	r6, [r5, #32]
   19534:	ldr	r4, [r5, #24]
   19538:	bl	10f90 <dcgettext@plt>
   1953c:	strd	r6, [sp, #8]
   19540:	mov	r6, #1
   19544:	mov	r7, #0
   19548:	mov	r3, r4
   1954c:	strd	r6, [sp]
   19550:	add	r2, fp, #8
   19554:	add	r1, fp, #4
   19558:	str	r0, [sp, #16]
   1955c:	mov	r0, #0
   19560:	bl	1717c <__assert_fail@plt+0x5f70>
   19564:	subs	r3, r0, #0
   19568:	str	r3, [sp, #40]	; 0x28
   1956c:	beq	199c0 <__assert_fail@plt+0x87b4>
   19570:	ldr	r3, [r5, #32]
   19574:	str	r3, [sp, #60]	; 0x3c
   19578:	ldr	r3, [sp, #64]	; 0x40
   1957c:	ldr	r2, [sp, #60]	; 0x3c
   19580:	ldr	r3, [r3, #16]
   19584:	cmp	r3, r2
   19588:	bcs	19ac8 <__assert_fail@plt+0x88bc>
   1958c:	ldr	r2, [sp, #40]	; 0x28
   19590:	str	r5, [sp, #56]	; 0x38
   19594:	add	r3, r2, r3
   19598:	str	r3, [sp, #72]	; 0x48
   1959c:	ldrd	r2, [r9, #56]	; 0x38
   195a0:	ldrd	r4, [r9, #32]
   195a4:	cmp	r3, r5
   195a8:	cmpeq	r2, r4
   195ac:	mov	r2, #5
   195b0:	bhi	199d8 <__assert_fail@plt+0x87cc>
   195b4:	ldr	r1, [pc, #1340]	; 19af8 <__assert_fail@plt+0x88ec>
   195b8:	mov	r0, #0
   195bc:	ldr	r6, [r9, #24]
   195c0:	bl	10f90 <dcgettext@plt>
   195c4:	strd	r4, [sp, #8]
   195c8:	mov	r4, #1
   195cc:	mov	r5, #0
   195d0:	mov	r3, r6
   195d4:	strd	r4, [sp]
   195d8:	add	r2, fp, #8
   195dc:	add	r1, fp, #4
   195e0:	str	r0, [sp, #16]
   195e4:	mov	r0, #0
   195e8:	bl	1717c <__assert_fail@plt+0x5f70>
   195ec:	subs	r4, r0, #0
   195f0:	str	r4, [sp, #68]	; 0x44
   195f4:	beq	19818 <__assert_fail@plt+0x860c>
   195f8:	ldrd	r2, [r9, #56]	; 0x38
   195fc:	ldrd	r0, [r9, #32]
   19600:	bl	58c00 <warn@@Base+0x3e30>
   19604:	ldr	r3, [pc, #1264]	; 19afc <__assert_fail@plt+0x88f0>
   19608:	mov	r1, #4
   1960c:	add	r5, r4, r1
   19610:	ldr	r3, [r3]
   19614:	sub	r0, r0, #1
   19618:	str	r0, [sp, #64]	; 0x40
   1961c:	mov	r0, r4
   19620:	blx	r3
   19624:	ldr	r3, [sl, #828]	; 0x33c
   19628:	cmp	r3, #0
   1962c:	mov	r4, r0
   19630:	bne	198d0 <__assert_fail@plt+0x86c4>
   19634:	ldr	r3, [sp, #64]	; 0x40
   19638:	cmp	r3, #0
   1963c:	ldr	r3, [sp, #52]	; 0x34
   19640:	str	r8, [r3, #4]
   19644:	beq	197cc <__assert_fail@plt+0x85c0>
   19648:	str	r9, [sp, #36]	; 0x24
   1964c:	mov	r6, #0
   19650:	ldr	r7, [sp, #52]	; 0x34
   19654:	ldr	r9, [sp, #64]	; 0x40
   19658:	b	196b4 <__assert_fail@plt+0x84a8>
   1965c:	ldr	r3, [sl, #832]	; 0x340
   19660:	add	r1, r3, r0, lsl #2
   19664:	ldr	r2, [r3, r4, lsl #2]
   19668:	cmp	r2, #0
   1966c:	beq	19684 <__assert_fail@plt+0x8478>
   19670:	cmp	r4, #0
   19674:	bne	19764 <__assert_fail@plt+0x8558>
   19678:	ldr	r2, [sl, #852]	; 0x354
   1967c:	cmp	r2, #0
   19680:	beq	197e8 <__assert_fail@plt+0x85dc>
   19684:	ldr	r3, [sl, #828]	; 0x33c
   19688:	str	r7, [r1]
   1968c:	cmp	r3, #0
   19690:	bne	19738 <__assert_fail@plt+0x852c>
   19694:	mov	r0, #8
   19698:	bl	5861c <warn@@Base+0x384c>
   1969c:	ldr	r3, [r7]
   196a0:	str	r0, [r7]
   196a4:	stm	r0, {r3, r4}
   196a8:	add	r6, r6, #1
   196ac:	cmp	r9, r6
   196b0:	beq	197c8 <__assert_fail@plt+0x85bc>
   196b4:	ldr	r3, [pc, #1088]	; 19afc <__assert_fail@plt+0x88f0>
   196b8:	mov	r0, r5
   196bc:	mov	r1, #4
   196c0:	ldr	r3, [r3]
   196c4:	blx	r3
   196c8:	ldr	r3, [fp, #84]	; 0x54
   196cc:	add	r5, r5, #4
   196d0:	cmp	r3, r0
   196d4:	mov	r4, r0
   196d8:	bhi	1965c <__assert_fail@plt+0x8450>
   196dc:	ldr	r3, [sl, #844]	; 0x34c
   196e0:	cmp	r3, #9
   196e4:	add	r3, r3, #1
   196e8:	str	r3, [sl, #844]	; 0x34c
   196ec:	bhi	196a8 <__assert_fail@plt+0x849c>
   196f0:	mov	r2, #5
   196f4:	ldr	r1, [pc, #1028]	; 19b00 <__assert_fail@plt+0x88f4>
   196f8:	mov	r0, #0
   196fc:	bl	10f90 <dcgettext@plt>
   19700:	ldr	r3, [fp, #84]	; 0x54
   19704:	mov	r1, r4
   19708:	sub	r3, r3, #1
   1970c:	mov	r2, r8
   19710:	bl	548ac <error@@Base>
   19714:	ldr	r3, [sl, #844]	; 0x34c
   19718:	cmp	r3, #10
   1971c:	bne	196a8 <__assert_fail@plt+0x849c>
   19720:	mov	r2, #5
   19724:	ldr	r1, [pc, #984]	; 19b04 <__assert_fail@plt+0x88f8>
   19728:	mov	r0, #0
   1972c:	bl	10f90 <dcgettext@plt>
   19730:	bl	54dd0 <warn@@Base>
   19734:	b	196a8 <__assert_fail@plt+0x849c>
   19738:	add	r3, r4, r4, lsl #3
   1973c:	ldr	r2, [fp, #96]	; 0x60
   19740:	ldr	r1, [sp, #48]	; 0x30
   19744:	add	r2, r2, r3, lsl #3
   19748:	ldr	r0, [sp, #44]	; 0x2c
   1974c:	bl	16c64 <__assert_fail@plt+0x5a58>
   19750:	mov	r1, r4
   19754:	mov	r2, r0
   19758:	ldr	r0, [pc, #936]	; 19b08 <__assert_fail@plt+0x88fc>
   1975c:	bl	10f24 <printf@plt>
   19760:	b	19694 <__assert_fail@plt+0x8488>
   19764:	ldr	r2, [sl, #848]	; 0x350
   19768:	cmp	r2, #9
   1976c:	add	r2, r2, #1
   19770:	str	r2, [sl, #848]	; 0x350
   19774:	bhi	196a8 <__assert_fail@plt+0x849c>
   19778:	mov	r2, #5
   1977c:	ldr	r1, [pc, #904]	; 19b0c <__assert_fail@plt+0x8900>
   19780:	mov	r0, #0
   19784:	str	r3, [sp, #64]	; 0x40
   19788:	bl	10f90 <dcgettext@plt>
   1978c:	ldr	r3, [sp, #64]	; 0x40
   19790:	mov	r1, r4
   19794:	mov	r2, r8
   19798:	ldr	r3, [r3, r4, lsl #2]
   1979c:	ldr	r3, [r3, #4]
   197a0:	bl	548ac <error@@Base>
   197a4:	ldr	r3, [sl, #848]	; 0x350
   197a8:	cmp	r3, #10
   197ac:	bne	196a8 <__assert_fail@plt+0x849c>
   197b0:	mov	r2, #5
   197b4:	ldr	r1, [pc, #852]	; 19b10 <__assert_fail@plt+0x8904>
   197b8:	mov	r0, #0
   197bc:	bl	10f90 <dcgettext@plt>
   197c0:	bl	54dd0 <warn@@Base>
   197c4:	b	196a8 <__assert_fail@plt+0x849c>
   197c8:	ldr	r9, [sp, #36]	; 0x24
   197cc:	ldr	r0, [sp, #68]	; 0x44
   197d0:	bl	10f54 <free@plt>
   197d4:	ldr	r3, [sp, #52]	; 0x34
   197d8:	ldr	r6, [sp, #28]
   197dc:	add	r3, r3, #8
   197e0:	str	r3, [sp, #52]	; 0x34
   197e4:	b	192b4 <__assert_fail@plt+0x80a8>
   197e8:	mov	r2, #5
   197ec:	ldr	r1, [pc, #800]	; 19b14 <__assert_fail@plt+0x8908>
   197f0:	str	r3, [sp, #64]	; 0x40
   197f4:	bl	10f90 <dcgettext@plt>
   197f8:	ldr	r3, [sp, #64]	; 0x40
   197fc:	ldr	r3, [r3, r4, lsl #2]
   19800:	ldr	r1, [r3, #4]
   19804:	bl	548ac <error@@Base>
   19808:	mov	r3, #1
   1980c:	ldr	r1, [sl, #832]	; 0x340
   19810:	str	r3, [sl, #852]	; 0x354
   19814:	b	19684 <__assert_fail@plt+0x8478>
   19818:	ldr	r6, [sp, #28]
   1981c:	b	192b4 <__assert_fail@plt+0x80a8>
   19820:	ldr	r2, [fp, #84]	; 0x54
   19824:	cmp	r3, r2
   19828:	bcs	194cc <__assert_fail@plt+0x82c0>
   1982c:	add	r3, r3, r3, lsl #3
   19830:	ldr	r2, [fp, #96]	; 0x60
   19834:	adds	r0, r2, r3, lsl #3
   19838:	beq	19a2c <__assert_fail@plt+0x8820>
   1983c:	ldr	r0, [fp, #104]	; 0x68
   19840:	cmp	r0, #0
   19844:	beq	19a40 <__assert_fail@plt+0x8834>
   19848:	ldr	r3, [r2, r3, lsl #3]
   1984c:	ldr	r2, [fp, #108]	; 0x6c
   19850:	cmp	r3, r2
   19854:	addcc	r3, r0, r3
   19858:	strcc	r3, [sp, #72]	; 0x48
   1985c:	bcs	19a0c <__assert_fail@plt+0x8800>
   19860:	ldr	r0, [sp, #40]	; 0x28
   19864:	cmp	r0, #0
   19868:	beq	199b0 <__assert_fail@plt+0x87a4>
   1986c:	mov	r3, #0
   19870:	mov	r4, r3
   19874:	str	r3, [sp, #40]	; 0x28
   19878:	bl	10f54 <free@plt>
   1987c:	str	r4, [sp, #60]	; 0x3c
   19880:	str	r4, [sp, #56]	; 0x38
   19884:	b	1959c <__assert_fail@plt+0x8390>
   19888:	ldr	r3, [sp, #40]	; 0x28
   1988c:	mov	r4, r3
   19890:	str	r3, [sp, #60]	; 0x3c
   19894:	b	193d4 <__assert_fail@plt+0x81c8>
   19898:	mov	r2, #5
   1989c:	ldr	r1, [pc, #628]	; 19b18 <__assert_fail@plt+0x890c>
   198a0:	bl	10f90 <dcgettext@plt>
   198a4:	mov	r1, r5
   198a8:	bl	548ac <error@@Base>
   198ac:	ldr	r0, [sp, #52]	; 0x34
   198b0:	b	1941c <__assert_fail@plt+0x8210>
   198b4:	mov	r2, #5
   198b8:	ldr	r1, [pc, #604]	; 19b1c <__assert_fail@plt+0x8910>
   198bc:	bl	10f90 <dcgettext@plt>
   198c0:	ldr	r1, [fp, #84]	; 0x54
   198c4:	bl	548ac <error@@Base>
   198c8:	mov	r0, r5
   198cc:	b	1941c <__assert_fail@plt+0x8210>
   198d0:	mov	r2, #5
   198d4:	ldr	r1, [pc, #580]	; 19b20 <__assert_fail@plt+0x8914>
   198d8:	mov	r0, #0
   198dc:	bl	10f90 <dcgettext@plt>
   198e0:	cmp	r4, #0
   198e4:	str	r0, [sp, #76]	; 0x4c
   198e8:	beq	199d0 <__assert_fail@plt+0x87c4>
   198ec:	cmp	r4, #1
   198f0:	beq	19a24 <__assert_fail@plt+0x8818>
   198f4:	mov	r2, #5
   198f8:	ldr	r1, [pc, #548]	; 19b24 <__assert_fail@plt+0x8918>
   198fc:	mov	r0, #0
   19900:	bl	10f90 <dcgettext@plt>
   19904:	ldr	r6, [pc, #540]	; 19b28 <__assert_fail@plt+0x891c>
   19908:	and	r2, r4, #-268435456	; 0xf0000000
   1990c:	mov	r3, r4
   19910:	mov	r1, #14
   19914:	mov	r7, r2
   19918:	mov	r2, r0
   1991c:	mov	r0, r6
   19920:	bl	110b0 <snprintf@plt>
   19924:	tst	r4, #267386880	; 0xff00000
   19928:	bne	19a54 <__assert_fail@plt+0x8848>
   1992c:	cmp	r7, #0
   19930:	bicne	r4, r4, #1
   19934:	bne	19a90 <__assert_fail@plt+0x8884>
   19938:	ldr	r0, [pc, #488]	; 19b28 <__assert_fail@plt+0x891c>
   1993c:	bl	11080 <strlen@plt>
   19940:	ldr	r3, [pc, #484]	; 19b2c <__assert_fail@plt+0x8920>
   19944:	add	r2, r6, r0
   19948:	mov	ip, r0
   1994c:	ldm	r3!, {r0, r1}
   19950:	ldrh	r3, [r3]
   19954:	str	r0, [r6, ip]
   19958:	str	r1, [r2, #4]
   1995c:	strh	r3, [r2, #8]
   19960:	ldr	r0, [pc, #448]	; 19b28 <__assert_fail@plt+0x891c>
   19964:	bl	11080 <strlen@plt>
   19968:	ldr	r3, [pc, #448]	; 19b30 <__assert_fail@plt+0x8924>
   1996c:	ldr	r1, [pc, #436]	; 19b28 <__assert_fail@plt+0x891c>
   19970:	ldrh	r3, [r3]
   19974:	strh	r3, [r6, r0]
   19978:	ldr	r3, [sp, #64]	; 0x40
   1997c:	mov	r2, r8
   19980:	str	r3, [sp, #4]
   19984:	ldr	r3, [sp, #72]	; 0x48
   19988:	ldr	r0, [sp, #76]	; 0x4c
   1998c:	str	r3, [sp]
   19990:	ldr	r3, [sp, #36]	; 0x24
   19994:	bl	10f24 <printf@plt>
   19998:	mov	r2, #5
   1999c:	ldr	r1, [pc, #400]	; 19b34 <__assert_fail@plt+0x8928>
   199a0:	mov	r0, #0
   199a4:	bl	10f90 <dcgettext@plt>
   199a8:	bl	10f24 <printf@plt>
   199ac:	b	19634 <__assert_fail@plt+0x8428>
   199b0:	ldr	r3, [sp, #40]	; 0x28
   199b4:	str	r3, [sp, #56]	; 0x38
   199b8:	str	r3, [sp, #60]	; 0x3c
   199bc:	b	1959c <__assert_fail@plt+0x8390>
   199c0:	ldr	r4, [sp, #40]	; 0x28
   199c4:	str	r5, [sp, #40]	; 0x28
   199c8:	str	r4, [sp, #60]	; 0x3c
   199cc:	b	193d4 <__assert_fail@plt+0x81c8>
   199d0:	ldr	r1, [pc, #352]	; 19b38 <__assert_fail@plt+0x892c>
   199d4:	b	19978 <__assert_fail@plt+0x876c>
   199d8:	ldr	r1, [pc, #348]	; 19b3c <__assert_fail@plt+0x8930>
   199dc:	mov	r0, #0
   199e0:	bl	10f90 <dcgettext@plt>
   199e4:	mov	r2, r9
   199e8:	mov	r4, r0
   199ec:	ldrd	r0, [sp, #44]	; 0x2c
   199f0:	bl	16c64 <__assert_fail@plt+0x5a58>
   199f4:	ldr	r3, [r9, #32]
   199f8:	ldr	r2, [r9, #56]	; 0x38
   199fc:	mov	r1, r0
   19a00:	mov	r0, r4
   19a04:	bl	548ac <error@@Base>
   19a08:	b	1949c <__assert_fail@plt+0x8290>
   19a0c:	mov	r2, #5
   19a10:	ldr	r1, [pc, #196]	; 19adc <__assert_fail@plt+0x88d0>
   19a14:	mov	r0, #0
   19a18:	bl	10f90 <dcgettext@plt>
   19a1c:	str	r0, [sp, #72]	; 0x48
   19a20:	b	19860 <__assert_fail@plt+0x8654>
   19a24:	ldr	r1, [pc, #276]	; 19b40 <__assert_fail@plt+0x8934>
   19a28:	b	19978 <__assert_fail@plt+0x876c>
   19a2c:	mov	r2, #5
   19a30:	ldr	r1, [pc, #268]	; 19b44 <__assert_fail@plt+0x8938>
   19a34:	bl	10f90 <dcgettext@plt>
   19a38:	str	r0, [sp, #72]	; 0x48
   19a3c:	b	19860 <__assert_fail@plt+0x8654>
   19a40:	mov	r2, #5
   19a44:	ldr	r1, [pc, #252]	; 19b48 <__assert_fail@plt+0x893c>
   19a48:	bl	10f90 <dcgettext@plt>
   19a4c:	str	r0, [sp, #72]	; 0x48
   19a50:	b	19860 <__assert_fail@plt+0x8654>
   19a54:	mov	r0, r6
   19a58:	bl	11080 <strlen@plt>
   19a5c:	ldr	r3, [pc, #232]	; 19b4c <__assert_fail@plt+0x8940>
   19a60:	bic	r4, r4, #267386880	; 0xff00000
   19a64:	cmp	r7, #0
   19a68:	bic	r4, r4, #1
   19a6c:	add	ip, r6, r0
   19a70:	mov	lr, r0
   19a74:	ldm	r3!, {r0, r1, r2}
   19a78:	ldrh	r3, [r3]
   19a7c:	str	r0, [r6, lr]
   19a80:	str	r1, [ip, #4]
   19a84:	strh	r3, [ip, #12]
   19a88:	str	r2, [ip, #8]
   19a8c:	beq	19abc <__assert_fail@plt+0x88b0>
   19a90:	ldr	r0, [pc, #144]	; 19b28 <__assert_fail@plt+0x891c>
   19a94:	bl	11080 <strlen@plt>
   19a98:	ldr	ip, [pc, #176]	; 19b50 <__assert_fail@plt+0x8944>
   19a9c:	bic	r4, r4, #-268435456	; 0xf0000000
   19aa0:	add	lr, r6, r0
   19aa4:	mov	r7, r0
   19aa8:	ldm	ip!, {r0, r1, r2, r3}
   19aac:	str	r0, [r6, r7]
   19ab0:	str	r1, [lr, #4]
   19ab4:	str	r2, [lr, #8]
   19ab8:	str	r3, [lr, #12]
   19abc:	cmp	r4, #0
   19ac0:	beq	19960 <__assert_fail@plt+0x8754>
   19ac4:	b	19938 <__assert_fail@plt+0x872c>
   19ac8:	ldr	r4, [sp, #40]	; 0x28
   19acc:	str	r5, [sp, #40]	; 0x28
   19ad0:	b	193d4 <__assert_fail@plt+0x81c8>
   19ad4:	andeq	sl, r9, r8, lsr r4
   19ad8:	andeq	r4, r6, ip, lsl r0
   19adc:	andeq	r3, r6, ip
   19ae0:	andeq	r3, r6, r8, lsr #31
   19ae4:	andeq	r3, r6, r4, lsr #30
   19ae8:	andeq	r3, r6, r4, asr pc
   19aec:	strdeq	r3, [r6], -r8
   19af0:	andeq	r4, r6, r4, asr #32
   19af4:	andeq	r5, r6, r8, lsr #14
   19af8:	strdeq	fp, [r6], -ip
   19afc:	andeq	lr, r9, ip, asr sp
   19b00:	andeq	r4, r6, r8, lsr #2
   19b04:	andeq	r4, r6, r8, ror #2
   19b08:	andeq	r4, r6, ip, ror #4
   19b0c:			; <UNDEFINED> instruction: 0x000641b4
   19b10:	strdeq	r4, [r6], -ip
   19b14:	andeq	r4, r6, r8, asr #4
   19b18:	ldrdeq	r3, [r6], -r4
   19b1c:	andeq	r3, r6, r8, ror pc
   19b20:	strheq	r4, [r6], -r4	; <UNPREDICTABLE>
   19b24:	andeq	r4, r6, ip, ror #1
   19b28:	strdeq	sl, [r9], -r0
   19b2c:	andeq	r2, r6, r0, asr #31
   19b30:	andeq	r1, r8, ip, lsr pc
   19b34:	andeq	r4, r6, r4, lsl r1
   19b38:	andeq	fp, r6, ip, ror #2
   19b3c:	andeq	r4, r6, r8, rrx
   19b40:	andeq	r3, r6, ip, lsl pc
   19b44:	muleq	r6, r4, r8
   19b48:	muleq	r6, ip, r8
   19b4c:	strdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   19b50:	andeq	r4, r6, r4, lsl #2
   19b54:	ldr	ip, [r0, #84]	; 0x54
   19b58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b5c:	sub	sp, sp, #100	; 0x64
   19b60:	ldr	lr, [r0, #96]	; 0x60
   19b64:	cmp	ip, #0
   19b68:	str	lr, [sp, #24]
   19b6c:	beq	1a214 <__assert_fail@plt+0x9008>
   19b70:	str	r3, [sp, #36]	; 0x24
   19b74:	mov	r3, #1
   19b78:	str	r3, [sp, #52]	; 0x34
   19b7c:	mov	r3, #0
   19b80:	str	r2, [sp, #84]	; 0x54
   19b84:	str	r1, [sp, #76]	; 0x4c
   19b88:	str	r0, [sp, #80]	; 0x50
   19b8c:	str	r3, [sp, #72]	; 0x48
   19b90:	b	19be4 <__assert_fail@plt+0x89d8>
   19b94:	mov	r2, #5
   19b98:	ldr	r1, [pc, #1748]	; 1a274 <__assert_fail@plt+0x9068>
   19b9c:	mov	r0, r6
   19ba0:	bl	10f90 <dcgettext@plt>
   19ba4:	ldrb	r2, [r4]
   19ba8:	str	r6, [sp, #52]	; 0x34
   19bac:	mov	r1, r2
   19bb0:	bl	10f24 <printf@plt>
   19bb4:	ldr	r0, [sp, #28]
   19bb8:	bl	10f54 <free@plt>
   19bbc:	ldr	r3, [sp, #80]	; 0x50
   19bc0:	ldr	ip, [r3, #84]	; 0x54
   19bc4:	ldr	r3, [sp, #72]	; 0x48
   19bc8:	add	r3, r3, #1
   19bcc:	str	r3, [sp, #72]	; 0x48
   19bd0:	cmp	ip, r3
   19bd4:	ldr	r3, [sp, #24]
   19bd8:	add	r3, r3, #72	; 0x48
   19bdc:	str	r3, [sp, #24]
   19be0:	bls	1a21c <__assert_fail@plt+0x9010>
   19be4:	ldr	r3, [sp, #24]
   19be8:	ldr	r2, [sp, #84]	; 0x54
   19bec:	ldr	r6, [r3, #4]
   19bf0:	cmp	r6, r2
   19bf4:	cmnne	r6, #-1879048181	; 0x9000000b
   19bf8:	movne	r6, #1
   19bfc:	moveq	r6, #0
   19c00:	bne	19bc4 <__assert_fail@plt+0x89b8>
   19c04:	mov	r2, #5
   19c08:	ldr	r1, [pc, #1640]	; 1a278 <__assert_fail@plt+0x906c>
   19c0c:	mov	r0, r6
   19c10:	ldrd	r4, [r3, #32]
   19c14:	ldr	r7, [r3, #24]
   19c18:	bl	10f90 <dcgettext@plt>
   19c1c:	mov	r8, #1
   19c20:	ldr	r1, [sp, #80]	; 0x50
   19c24:	mov	r9, #0
   19c28:	strd	r4, [sp, #8]
   19c2c:	add	r2, r1, #8
   19c30:	mov	r3, r7
   19c34:	strd	r8, [sp]
   19c38:	add	r1, r1, #4
   19c3c:	str	r0, [sp, #16]
   19c40:	mov	r0, r6
   19c44:	bl	1717c <__assert_fail@plt+0x5f70>
   19c48:	subs	r4, r0, #0
   19c4c:	str	r4, [sp, #28]
   19c50:	beq	1a1e8 <__assert_fail@plt+0x8fdc>
   19c54:	ldrb	r3, [r4]
   19c58:	cmp	r3, #65	; 0x41
   19c5c:	bne	19b94 <__assert_fail@plt+0x8988>
   19c60:	ldr	r2, [sp, #24]
   19c64:	ldr	r3, [r2, #32]
   19c68:	ldr	r2, [r2, #36]	; 0x24
   19c6c:	subs	r3, r3, #1
   19c70:	str	r3, [sp, #40]	; 0x28
   19c74:	sbc	r3, r2, #0
   19c78:	str	r3, [sp, #44]	; 0x2c
   19c7c:	ldrd	r2, [sp, #40]	; 0x28
   19c80:	orrs	r1, r2, r3
   19c84:	ldr	r1, [sp, #28]
   19c88:	add	r8, r1, #1
   19c8c:	bne	19d20 <__assert_fail@plt+0x8b14>
   19c90:	b	19bb4 <__assert_fail@plt+0x89a8>
   19c94:	cmp	r1, #0
   19c98:	cmpeq	r0, #5
   19c9c:	mov	r4, r0
   19ca0:	bls	1a1c4 <__assert_fail@plt+0x8fb8>
   19ca4:	ldr	r3, [sp, #24]
   19ca8:	ldr	r2, [sp, #28]
   19cac:	add	r4, r8, r4
   19cb0:	ldr	r3, [r3, #32]
   19cb4:	add	r3, r2, r3
   19cb8:	cmp	r4, r3
   19cbc:	bhi	1a24c <__assert_fail@plt+0x9040>
   19cc0:	cmp	r5, #2
   19cc4:	mov	r2, #5
   19cc8:	add	r8, r8, #5
   19ccc:	beq	19eb8 <__assert_fail@plt+0x8cac>
   19cd0:	cmp	r5, #3
   19cd4:	beq	19fc0 <__assert_fail@plt+0x8db4>
   19cd8:	cmp	r5, #1
   19cdc:	beq	19fac <__assert_fail@plt+0x8da0>
   19ce0:	ldr	r1, [pc, #1428]	; 1a27c <__assert_fail@plt+0x9070>
   19ce4:	mov	r0, #0
   19ce8:	bl	10f90 <dcgettext@plt>
   19cec:	mov	r1, r5
   19cf0:	bl	10f24 <printf@plt>
   19cf4:	mov	r3, #0
   19cf8:	str	r3, [sp, #32]
   19cfc:	ldr	r3, [sp, #48]	; 0x30
   19d00:	cmp	r3, #0
   19d04:	beq	19fd4 <__assert_fail@plt+0x8dc8>
   19d08:	cmp	r4, r8
   19d0c:	bhi	1a0f4 <__assert_fail@plt+0x8ee8>
   19d10:	ldrd	r2, [sp, #40]	; 0x28
   19d14:	orrs	r3, r2, r3
   19d18:	beq	19bb4 <__assert_fail@plt+0x89a8>
   19d1c:	ldrd	r2, [sp, #40]	; 0x28
   19d20:	cmp	r3, #0
   19d24:	cmpeq	r2, #4
   19d28:	bls	1a208 <__assert_fail@plt+0x8ffc>
   19d2c:	ldr	r3, [pc, #1356]	; 1a280 <__assert_fail@plt+0x9074>
   19d30:	mov	r0, r8
   19d34:	mov	r1, #4
   19d38:	ldr	r3, [r3]
   19d3c:	blx	r3
   19d40:	ldrd	r2, [sp, #40]	; 0x28
   19d44:	add	r8, r8, #4
   19d48:	cmp	r1, r3
   19d4c:	cmpeq	r0, r2
   19d50:	mov	r4, r0
   19d54:	mov	r5, r1
   19d58:	bhi	1a178 <__assert_fail@plt+0x8f6c>
   19d5c:	cmp	r1, #0
   19d60:	cmpeq	r0, #4
   19d64:	bls	1a228 <__assert_fail@plt+0x901c>
   19d68:	ldr	r3, [sp, #40]	; 0x28
   19d6c:	subs	r3, r3, r0
   19d70:	str	r3, [sp, #40]	; 0x28
   19d74:	ldr	r3, [sp, #44]	; 0x2c
   19d78:	sbc	r3, r3, r1
   19d7c:	str	r3, [sp, #44]	; 0x2c
   19d80:	subs	r3, r4, #4
   19d84:	str	r3, [sp, #56]	; 0x38
   19d88:	ldr	r1, [sp, #56]	; 0x38
   19d8c:	sbc	r3, r5, #0
   19d90:	mov	r0, r8
   19d94:	str	r3, [sp, #60]	; 0x3c
   19d98:	bl	11104 <strnlen@plt>
   19d9c:	adds	r4, r0, #1
   19da0:	beq	1a1fc <__assert_fail@plt+0x8ff0>
   19da4:	ldrd	r2, [sp, #56]	; 0x38
   19da8:	mov	r7, #0
   19dac:	mov	r6, r4
   19db0:	cmp	r7, r3
   19db4:	cmpeq	r4, r2
   19db8:	bcs	1a1fc <__assert_fail@plt+0x8ff0>
   19dbc:	mov	r2, #5
   19dc0:	ldr	r1, [pc, #1212]	; 1a284 <__assert_fail@plt+0x9078>
   19dc4:	mov	r0, #0
   19dc8:	bl	10f90 <dcgettext@plt>
   19dcc:	bl	10f24 <printf@plt>
   19dd0:	mov	r1, r8
   19dd4:	mvn	r0, #-2147483648	; 0x80000000
   19dd8:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   19ddc:	ldr	r3, [pc, #1188]	; 1a288 <__assert_fail@plt+0x907c>
   19de0:	mov	r0, #10
   19de4:	ldr	r1, [r3]
   19de8:	bl	11158 <putc@plt>
   19dec:	ldr	r1, [sp, #76]	; 0x4c
   19df0:	cmp	r1, #0
   19df4:	beq	1a1b8 <__assert_fail@plt+0x8fac>
   19df8:	mov	r0, r8
   19dfc:	bl	10f18 <strcmp@plt>
   19e00:	clz	r3, r0
   19e04:	lsr	r3, r3, #5
   19e08:	str	r3, [sp, #32]
   19e0c:	mov	r0, r8
   19e10:	ldr	r1, [pc, #1140]	; 1a28c <__assert_fail@plt+0x9080>
   19e14:	bl	10f18 <strcmp@plt>
   19e18:	ldrd	r2, [sp, #56]	; 0x38
   19e1c:	add	r8, r8, r4
   19e20:	subs	sl, r2, r6
   19e24:	sbc	fp, r3, r7
   19e28:	orrs	r3, sl, fp
   19e2c:	str	r0, [sp, #48]	; 0x30
   19e30:	beq	19d10 <__assert_fail@plt+0x8b04>
   19e34:	ldr	r3, [sp, #24]
   19e38:	ldr	r2, [sp, #28]
   19e3c:	ldr	r3, [r3, #32]
   19e40:	add	r3, r2, r3
   19e44:	cmp	r8, r3
   19e48:	bcs	19d10 <__assert_fail@plt+0x8b04>
   19e4c:	cmp	fp, #0
   19e50:	cmpeq	sl, #5
   19e54:	bls	19f8c <__assert_fail@plt+0x8d80>
   19e58:	ldr	r3, [pc, #1056]	; 1a280 <__assert_fail@plt+0x9074>
   19e5c:	mov	r0, r8
   19e60:	mov	r1, #4
   19e64:	ldr	r3, [r3]
   19e68:	ldrb	r5, [r0], #1
   19e6c:	blx	r3
   19e70:	cmp	r1, fp
   19e74:	cmpeq	r0, sl
   19e78:	mov	r6, r0
   19e7c:	mov	r7, r1
   19e80:	bls	19c94 <__assert_fail@plt+0x8a88>
   19e84:	mov	r2, #5
   19e88:	ldr	r1, [pc, #1024]	; 1a290 <__assert_fail@plt+0x9084>
   19e8c:	mov	r0, #0
   19e90:	bl	10f90 <dcgettext@plt>
   19e94:	mov	r1, r6
   19e98:	mov	r2, sl
   19e9c:	bl	548ac <error@@Base>
   19ea0:	mov	r3, #0
   19ea4:	mov	r4, sl
   19ea8:	mov	r6, sl
   19eac:	mov	r7, fp
   19eb0:	str	r3, [sp, #52]	; 0x34
   19eb4:	b	19ca4 <__assert_fail@plt+0x8a98>
   19eb8:	ldr	r1, [pc, #980]	; 1a294 <__assert_fail@plt+0x9088>
   19ebc:	mov	r0, #0
   19ec0:	bl	10f90 <dcgettext@plt>
   19ec4:	bl	10f24 <printf@plt>
   19ec8:	ldr	r9, [pc, #968]	; 1a298 <__assert_fail@plt+0x908c>
   19ecc:	add	r5, sp, #92	; 0x5c
   19ed0:	b	19edc <__assert_fail@plt+0x8cd0>
   19ed4:	mov	r0, r9
   19ed8:	bl	10f24 <printf@plt>
   19edc:	mov	r3, r4
   19ee0:	mov	r0, r8
   19ee4:	mov	r2, #0
   19ee8:	mov	r1, r5
   19eec:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   19ef0:	ldr	r3, [sp, #92]	; 0x5c
   19ef4:	add	r8, r8, r3
   19ef8:	subs	r1, r0, #0
   19efc:	bne	19ed4 <__assert_fail@plt+0x8cc8>
   19f00:	mov	r0, #10
   19f04:	bl	110c8 <putchar@plt>
   19f08:	ldr	r2, [sp, #36]	; 0x24
   19f0c:	ldr	r3, [sp, #32]
   19f10:	cmp	r2, #0
   19f14:	moveq	r3, #0
   19f18:	cmp	r3, #0
   19f1c:	beq	19cfc <__assert_fail@plt+0x8af0>
   19f20:	cmp	r8, r4
   19f24:	bcs	19f44 <__assert_fail@plt+0x8d38>
   19f28:	mov	r0, r8
   19f2c:	mov	r5, r2
   19f30:	mov	r1, r4
   19f34:	blx	r5
   19f38:	cmp	r4, r0
   19f3c:	bhi	19f30 <__assert_fail@plt+0x8d24>
   19f40:	mov	r8, r0
   19f44:	cmp	r4, r8
   19f48:	bne	1a260 <__assert_fail@plt+0x9054>
   19f4c:	mov	r3, #1
   19f50:	str	r3, [sp, #32]
   19f54:	subs	sl, sl, r6
   19f58:	sbc	fp, fp, r7
   19f5c:	orrs	r3, sl, fp
   19f60:	beq	1a124 <__assert_fail@plt+0x8f18>
   19f64:	ldr	r3, [sp, #24]
   19f68:	ldr	r2, [sp, #28]
   19f6c:	ldr	r3, [r3, #32]
   19f70:	add	r3, r2, r3
   19f74:	cmp	r4, r3
   19f78:	bcs	1a124 <__assert_fail@plt+0x8f18>
   19f7c:	cmp	fp, #0
   19f80:	cmpeq	sl, #5
   19f84:	mov	r8, r4
   19f88:	bhi	19e58 <__assert_fail@plt+0x8c4c>
   19f8c:	ldr	r1, [pc, #776]	; 1a29c <__assert_fail@plt+0x9090>
   19f90:	mov	r2, #5
   19f94:	mov	r0, #0
   19f98:	bl	10f90 <dcgettext@plt>
   19f9c:	bl	548ac <error@@Base>
   19fa0:	mov	r3, #0
   19fa4:	str	r3, [sp, #52]	; 0x34
   19fa8:	b	19bb4 <__assert_fail@plt+0x89a8>
   19fac:	ldr	r1, [pc, #748]	; 1a2a0 <__assert_fail@plt+0x9094>
   19fb0:	mov	r0, #0
   19fb4:	bl	10f90 <dcgettext@plt>
   19fb8:	bl	10f24 <printf@plt>
   19fbc:	b	19f08 <__assert_fail@plt+0x8cfc>
   19fc0:	ldr	r1, [pc, #732]	; 1a2a4 <__assert_fail@plt+0x9098>
   19fc4:	mov	r0, #0
   19fc8:	bl	10f90 <dcgettext@plt>
   19fcc:	bl	10f24 <printf@plt>
   19fd0:	b	19ec8 <__assert_fail@plt+0x8cbc>
   19fd4:	cmp	r4, r8
   19fd8:	bls	1a050 <__assert_fail@plt+0x8e44>
   19fdc:	add	r5, sp, #92	; 0x5c
   19fe0:	strd	r6, [sp, #64]	; 0x40
   19fe4:	ldr	r9, [sp, #136]	; 0x88
   19fe8:	b	1a004 <__assert_fail@plt+0x8df8>
   19fec:	mov	r0, r8
   19ff0:	mov	r2, r4
   19ff4:	blx	r9
   19ff8:	mov	r8, r0
   19ffc:	cmp	r4, r8
   1a000:	bls	1a04c <__assert_fail@plt+0x8e40>
   1a004:	mov	r3, r4
   1a008:	mov	r0, r8
   1a00c:	mov	r2, #0
   1a010:	mov	r1, r5
   1a014:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   1a018:	ldr	r3, [sp, #92]	; 0x5c
   1a01c:	add	r8, r8, r3
   1a020:	cmp	r0, #32
   1a024:	mov	r1, r0
   1a028:	beq	1a06c <__assert_fail@plt+0x8e60>
   1a02c:	tst	r0, #2
   1a030:	beq	19fec <__assert_fail@plt+0x8de0>
   1a034:	mov	r1, r8
   1a038:	mov	r2, r4
   1a03c:	bl	15008 <__assert_fail@plt+0x3dfc>
   1a040:	mov	r8, r0
   1a044:	cmp	r4, r8
   1a048:	bhi	1a004 <__assert_fail@plt+0x8df8>
   1a04c:	ldrd	r6, [sp, #64]	; 0x40
   1a050:	cmp	r4, r8
   1a054:	beq	19f54 <__assert_fail@plt+0x8d48>
   1a058:	ldr	r3, [pc, #584]	; 1a2a8 <__assert_fail@plt+0x909c>
   1a05c:	ldr	r2, [pc, #584]	; 1a2ac <__assert_fail@plt+0x90a0>
   1a060:	ldr	r1, [pc, #584]	; 1a2b0 <__assert_fail@plt+0x90a4>
   1a064:	ldr	r0, [pc, #584]	; 1a2b4 <__assert_fail@plt+0x90a8>
   1a068:	bl	1120c <__assert_fail@plt>
   1a06c:	mov	r3, r4
   1a070:	mov	r2, #0
   1a074:	mov	r0, r8
   1a078:	mov	r1, r5
   1a07c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   1a080:	mov	r2, #5
   1a084:	ldr	r1, [pc, #556]	; 1a2b8 <__assert_fail@plt+0x90ac>
   1a088:	mov	r7, r0
   1a08c:	ldr	r0, [sp, #92]	; 0x5c
   1a090:	add	r8, r8, r0
   1a094:	mov	r0, #0
   1a098:	bl	10f90 <dcgettext@plt>
   1a09c:	mov	r1, r7
   1a0a0:	bl	10f24 <printf@plt>
   1a0a4:	cmp	r4, r8
   1a0a8:	beq	1a148 <__assert_fail@plt+0x8f3c>
   1a0ac:	sub	r3, r4, #1
   1a0b0:	cmp	r8, r3
   1a0b4:	bcs	1a12c <__assert_fail@plt+0x8f20>
   1a0b8:	sub	r3, r4, r8
   1a0bc:	sub	r7, r3, #1
   1a0c0:	mov	r1, r8
   1a0c4:	mov	r0, r7
   1a0c8:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   1a0cc:	mov	r0, r8
   1a0d0:	mov	r1, r7
   1a0d4:	bl	11104 <strnlen@plt>
   1a0d8:	add	r0, r0, #1
   1a0dc:	add	r8, r8, r0
   1a0e0:	ldr	r3, [pc, #416]	; 1a288 <__assert_fail@plt+0x907c>
   1a0e4:	mov	r0, #10
   1a0e8:	ldr	r1, [r3]
   1a0ec:	bl	11158 <putc@plt>
   1a0f0:	b	19ffc <__assert_fail@plt+0x8df0>
   1a0f4:	mov	r2, #5
   1a0f8:	ldr	r1, [pc, #444]	; 1a2bc <__assert_fail@plt+0x90b0>
   1a0fc:	mov	r0, #0
   1a100:	bl	10f90 <dcgettext@plt>
   1a104:	bl	10f24 <printf@plt>
   1a108:	mov	r1, r4
   1a10c:	mov	r0, r8
   1a110:	bl	1477c <__assert_fail@plt+0x3570>
   1a114:	subs	sl, sl, r6
   1a118:	sbc	fp, fp, r7
   1a11c:	orrs	r3, sl, fp
   1a120:	bne	19f64 <__assert_fail@plt+0x8d58>
   1a124:	mov	r8, r4
   1a128:	b	19d10 <__assert_fail@plt+0x8b04>
   1a12c:	mov	r2, #5
   1a130:	ldr	r1, [pc, #392]	; 1a2c0 <__assert_fail@plt+0x90b4>
   1a134:	mov	r0, #0
   1a138:	bl	10f90 <dcgettext@plt>
   1a13c:	bl	10f24 <printf@plt>
   1a140:	mov	r8, r4
   1a144:	b	1a0e0 <__assert_fail@plt+0x8ed4>
   1a148:	mov	r2, #5
   1a14c:	ldr	r1, [pc, #368]	; 1a2c4 <__assert_fail@plt+0x90b8>
   1a150:	mov	r0, #0
   1a154:	ldrd	r6, [sp, #64]	; 0x40
   1a158:	bl	10f90 <dcgettext@plt>
   1a15c:	bl	10f24 <printf@plt>
   1a160:	mov	r2, #5
   1a164:	ldr	r1, [pc, #348]	; 1a2c8 <__assert_fail@plt+0x90bc>
   1a168:	mov	r0, #0
   1a16c:	bl	10f90 <dcgettext@plt>
   1a170:	bl	54dd0 <warn@@Base>
   1a174:	b	19f54 <__assert_fail@plt+0x8d48>
   1a178:	mov	r2, #5
   1a17c:	ldr	r1, [pc, #328]	; 1a2cc <__assert_fail@plt+0x90c0>
   1a180:	mov	r0, #0
   1a184:	bl	10f90 <dcgettext@plt>
   1a188:	ldrd	r6, [sp, #40]	; 0x28
   1a18c:	mov	r1, r4
   1a190:	mov	r2, r6
   1a194:	bl	548ac <error@@Base>
   1a198:	mov	r3, #0
   1a19c:	str	r3, [sp, #52]	; 0x34
   1a1a0:	mov	r2, #0
   1a1a4:	mov	r3, #0
   1a1a8:	mov	r4, r6
   1a1ac:	mov	r5, r7
   1a1b0:	strd	r2, [sp, #40]	; 0x28
   1a1b4:	b	19d80 <__assert_fail@plt+0x8b74>
   1a1b8:	ldr	r3, [sp, #76]	; 0x4c
   1a1bc:	str	r3, [sp, #32]
   1a1c0:	b	19e0c <__assert_fail@plt+0x8c00>
   1a1c4:	mov	r2, #5
   1a1c8:	ldr	r1, [pc, #256]	; 1a2d0 <__assert_fail@plt+0x90c4>
   1a1cc:	mov	r0, #0
   1a1d0:	bl	10f90 <dcgettext@plt>
   1a1d4:	mov	r1, r6
   1a1d8:	bl	548ac <error@@Base>
   1a1dc:	mov	r3, #0
   1a1e0:	str	r3, [sp, #52]	; 0x34
   1a1e4:	b	19bb4 <__assert_fail@plt+0x89a8>
   1a1e8:	ldr	r3, [sp, #80]	; 0x50
   1a1ec:	ldr	ip, [r3, #84]	; 0x54
   1a1f0:	ldr	r3, [sp, #28]
   1a1f4:	str	r3, [sp, #52]	; 0x34
   1a1f8:	b	19bc4 <__assert_fail@plt+0x89b8>
   1a1fc:	mov	r2, #5
   1a200:	ldr	r1, [pc, #204]	; 1a2d4 <__assert_fail@plt+0x90c8>
   1a204:	b	19f94 <__assert_fail@plt+0x8d88>
   1a208:	mov	r2, #5
   1a20c:	ldr	r1, [pc, #196]	; 1a2d8 <__assert_fail@plt+0x90cc>
   1a210:	b	19f94 <__assert_fail@plt+0x8d88>
   1a214:	mov	r3, #1
   1a218:	str	r3, [sp, #52]	; 0x34
   1a21c:	ldr	r0, [sp, #52]	; 0x34
   1a220:	add	sp, sp, #100	; 0x64
   1a224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a228:	mov	r2, #5
   1a22c:	ldr	r1, [pc, #168]	; 1a2dc <__assert_fail@plt+0x90d0>
   1a230:	mov	r0, #0
   1a234:	bl	10f90 <dcgettext@plt>
   1a238:	mov	r1, r4
   1a23c:	bl	548ac <error@@Base>
   1a240:	mov	r3, #0
   1a244:	str	r3, [sp, #52]	; 0x34
   1a248:	b	19bb4 <__assert_fail@plt+0x89a8>
   1a24c:	ldr	r3, [pc, #84]	; 1a2a8 <__assert_fail@plt+0x909c>
   1a250:	ldr	r2, [pc, #136]	; 1a2e0 <__assert_fail@plt+0x90d4>
   1a254:	ldr	r1, [pc, #84]	; 1a2b0 <__assert_fail@plt+0x90a4>
   1a258:	ldr	r0, [pc, #132]	; 1a2e4 <__assert_fail@plt+0x90d8>
   1a25c:	bl	1120c <__assert_fail@plt>
   1a260:	ldr	r3, [pc, #64]	; 1a2a8 <__assert_fail@plt+0x909c>
   1a264:	ldr	r2, [pc, #124]	; 1a2e8 <__assert_fail@plt+0x90dc>
   1a268:	ldr	r1, [pc, #64]	; 1a2b0 <__assert_fail@plt+0x90a4>
   1a26c:	ldr	r0, [pc, #64]	; 1a2b4 <__assert_fail@plt+0x90a8>
   1a270:	bl	1120c <__assert_fail@plt>
   1a274:	andeq	r4, r6, r8, lsl #5
   1a278:	andeq	r4, r6, ip, ror r2
   1a27c:	andeq	r4, r6, r0, lsr #8
   1a280:	andeq	lr, r9, ip, asr sp
   1a284:	andeq	r4, r6, r8, asr #6
   1a288:	andeq	sl, r9, ip, lsr #8
   1a28c:	andeq	r4, r6, ip, asr r3
   1a290:	andeq	r4, r6, r0, lsl #7
   1a294:	strdeq	r4, [r6], -r8
   1a298:	andeq	r7, r6, r0, lsl #30
   1a29c:	andeq	r4, r6, r0, ror #6
   1a2a0:	andeq	r4, r6, r4, ror #7
   1a2a4:	andeq	r4, r6, ip, lsl #8
   1a2a8:	andeq	r8, r5, r8, lsr #29
   1a2ac:	andeq	r3, r0, r4, ror #24
   1a2b0:	andeq	r2, r6, r8, asr pc
   1a2b4:	andeq	r4, r6, r4, lsr r4
   1a2b8:	andeq	r3, r6, r4, asr #6
   1a2bc:	andeq	r4, r6, ip, asr r4
   1a2c0:	andeq	r3, r6, ip
   1a2c4:	muleq	r6, r4, r3
   1a2c8:	andeq	r4, r6, r0, asr #8
   1a2cc:	andeq	r4, r6, r0, ror #5
   1a2d0:	andeq	r4, r6, r4, lsr #7
   1a2d4:	andeq	r4, r6, r8, lsr #6
   1a2d8:	andeq	r4, r6, r0, asr #5
   1a2dc:	andeq	r4, r6, r0, lsl #6
   1a2e0:	andeq	r3, r0, r7, lsr ip
   1a2e4:	andeq	r4, r6, r4, asr #7
   1a2e8:	andeq	r3, r0, ip, asr ip
   1a2ec:	cmp	r2, #9
   1a2f0:	ldrls	pc, [pc, r2, lsl #2]
   1a2f4:	b	1a368 <__assert_fail@plt+0x915c>
   1a2f8:	andeq	sl, r1, r0, lsr #6
   1a2fc:	andeq	sl, r1, r8, lsr #6
   1a300:	andeq	sl, r1, r0, lsr r3
   1a304:	andeq	sl, r1, r8, lsr r3
   1a308:	andeq	sl, r1, r0, asr #6
   1a30c:	andeq	sl, r1, r8, asr #6
   1a310:	andeq	sl, r1, r0, asr r3
   1a314:	andeq	sl, r1, r8, ror #6
   1a318:	andeq	sl, r1, r8, asr r3
   1a31c:	andeq	sl, r1, r0, ror #6
   1a320:	ldr	r0, [pc, #332]	; 1a474 <__assert_fail@plt+0x9268>
   1a324:	bx	lr
   1a328:	ldr	r0, [pc, #328]	; 1a478 <__assert_fail@plt+0x926c>
   1a32c:	bx	lr
   1a330:	ldr	r0, [pc, #324]	; 1a47c <__assert_fail@plt+0x9270>
   1a334:	bx	lr
   1a338:	ldr	r0, [pc, #320]	; 1a480 <__assert_fail@plt+0x9274>
   1a33c:	bx	lr
   1a340:	ldr	r0, [pc, #316]	; 1a484 <__assert_fail@plt+0x9278>
   1a344:	bx	lr
   1a348:	ldr	r0, [pc, #312]	; 1a488 <__assert_fail@plt+0x927c>
   1a34c:	bx	lr
   1a350:	ldr	r0, [pc, #308]	; 1a48c <__assert_fail@plt+0x9280>
   1a354:	bx	lr
   1a358:	ldr	r0, [pc, #304]	; 1a490 <__assert_fail@plt+0x9284>
   1a35c:	bx	lr
   1a360:	ldr	r0, [pc, #300]	; 1a494 <__assert_fail@plt+0x9288>
   1a364:	bx	lr
   1a368:	sub	r3, r2, #13
   1a36c:	cmp	r3, #2
   1a370:	push	{r4, lr}
   1a374:	mov	r4, r2
   1a378:	bhi	1a3c4 <__assert_fail@plt+0x91b8>
   1a37c:	ldrh	r3, [r1]
   1a380:	cmp	r3, #40	; 0x28
   1a384:	beq	1a410 <__assert_fail@plt+0x9204>
   1a388:	cmp	r3, #43	; 0x2b
   1a38c:	bne	1a438 <__assert_fail@plt+0x922c>
   1a390:	cmp	r2, #13
   1a394:	beq	1a464 <__assert_fail@plt+0x9258>
   1a398:	ldr	r1, [pc, #248]	; 1a498 <__assert_fail@plt+0x928c>
   1a39c:	mov	r2, #5
   1a3a0:	mov	r0, #0
   1a3a4:	bl	10f90 <dcgettext@plt>
   1a3a8:	mov	r3, r4
   1a3ac:	mov	r1, #32
   1a3b0:	mov	r2, r0
   1a3b4:	ldr	r0, [pc, #224]	; 1a49c <__assert_fail@plt+0x9290>
   1a3b8:	bl	110b0 <snprintf@plt>
   1a3bc:	ldr	r0, [pc, #216]	; 1a49c <__assert_fail@plt+0x9290>
   1a3c0:	pop	{r4, pc}
   1a3c4:	sub	r3, r2, #10
   1a3c8:	cmp	r3, #2
   1a3cc:	bhi	1a420 <__assert_fail@plt+0x9214>
   1a3d0:	ldrh	r3, [r1]
   1a3d4:	cmp	r3, #15
   1a3d8:	beq	1a44c <__assert_fail@plt+0x9240>
   1a3dc:	cmp	r4, #10
   1a3e0:	bne	1a42c <__assert_fail@plt+0x9220>
   1a3e4:	ldrb	r2, [r0]
   1a3e8:	cmp	r2, #9
   1a3ec:	cmpne	r2, #3
   1a3f0:	moveq	r3, #1
   1a3f4:	movne	r3, #0
   1a3f8:	cmp	r2, #0
   1a3fc:	moveq	r3, #1
   1a400:	cmp	r3, #0
   1a404:	beq	1a42c <__assert_fail@plt+0x9220>
   1a408:	ldr	r0, [pc, #144]	; 1a4a0 <__assert_fail@plt+0x9294>
   1a40c:	pop	{r4, pc}
   1a410:	cmp	r2, #13
   1a414:	bne	1a398 <__assert_fail@plt+0x918c>
   1a418:	ldr	r0, [pc, #132]	; 1a4a4 <__assert_fail@plt+0x9298>
   1a41c:	pop	{r4, pc}
   1a420:	mov	r2, #5
   1a424:	ldr	r1, [pc, #124]	; 1a4a8 <__assert_fail@plt+0x929c>
   1a428:	b	1a3a0 <__assert_fail@plt+0x9194>
   1a42c:	mov	r2, #5
   1a430:	ldr	r1, [pc, #116]	; 1a4ac <__assert_fail@plt+0x92a0>
   1a434:	b	1a3a0 <__assert_fail@plt+0x9194>
   1a438:	cmp	r2, #13
   1a43c:	cmpeq	r3, #15
   1a440:	bne	1a398 <__assert_fail@plt+0x918c>
   1a444:	ldr	r0, [pc, #100]	; 1a4b0 <__assert_fail@plt+0x92a4>
   1a448:	pop	{r4, pc}
   1a44c:	cmp	r2, #11
   1a450:	beq	1a46c <__assert_fail@plt+0x9260>
   1a454:	cmp	r2, #12
   1a458:	bne	1a3dc <__assert_fail@plt+0x91d0>
   1a45c:	ldr	r0, [pc, #80]	; 1a4b4 <__assert_fail@plt+0x92a8>
   1a460:	pop	{r4, pc}
   1a464:	ldr	r0, [pc, #76]	; 1a4b8 <__assert_fail@plt+0x92ac>
   1a468:	pop	{r4, pc}
   1a46c:	ldr	r0, [pc, #72]	; 1a4bc <__assert_fail@plt+0x92b0>
   1a470:	pop	{r4, pc}
   1a474:			; <UNDEFINED> instruction: 0x000644b4
   1a478:	andeq	r4, r6, ip, lsr #9
   1a47c:	andeq	r4, r6, ip, ror r4
   1a480:	andeq	r4, r6, r4, lsl #9
   1a484:	andeq	r4, r6, ip, lsl #9
   1a488:	muleq	r6, r4, r4
   1a48c:	andeq	r2, r7, r8, lsr #21
   1a490:	muleq	r6, ip, r4
   1a494:	andeq	r4, r6, r4, lsr #9
   1a498:	andeq	r4, r6, ip, ror #9
   1a49c:	muleq	r9, r0, r7
   1a4a0:	andeq	r4, r6, r4, ror #9
   1a4a4:			; <UNDEFINED> instruction: 0x000644bc
   1a4a8:	andeq	r4, r6, ip, lsl r5
   1a4ac:	andeq	r4, r6, r8, lsl #10
   1a4b0:	ldrdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   1a4b4:	andeq	r4, r6, r4, ror r4
   1a4b8:	andeq	r0, r7, ip, lsr #19
   1a4bc:	andeq	r4, r6, r8, asr #9
   1a4c0:	cmp	r1, #18
   1a4c4:	ldrls	pc, [pc, r1, lsl #2]
   1a4c8:	b	1a5a0 <__assert_fail@plt+0x9394>
   1a4cc:	andeq	sl, r1, r8, lsl r5
   1a4d0:	muleq	r1, r8, r5
   1a4d4:	andeq	sl, r1, r0, lsr #10
   1a4d8:	andeq	sl, r1, r8, lsr #10
   1a4dc:	andeq	sl, r1, r0, lsr #11
   1a4e0:	andeq	sl, r1, r0, lsr #11
   1a4e4:	andeq	sl, r1, r0, lsr r5
   1a4e8:	andeq	sl, r1, r8, lsr r5
   1a4ec:	andeq	sl, r1, r0, asr #10
   1a4f0:	andeq	sl, r1, r8, asr #10
   1a4f4:	andeq	sl, r1, r0, asr r5
   1a4f8:	andeq	sl, r1, r8, asr r5
   1a4fc:	andeq	sl, r1, r0, ror #10
   1a500:	andeq	sl, r1, r8, ror #10
   1a504:	andeq	sl, r1, r0, ror r5
   1a508:	andeq	sl, r1, r8, ror r5
   1a50c:	andeq	sl, r1, r0, lsl #11
   1a510:	andeq	sl, r1, r8, lsl #11
   1a514:	muleq	r1, r0, r5
   1a518:	ldr	r0, [pc, #336]	; 1a670 <__assert_fail@plt+0x9464>
   1a51c:	bx	lr
   1a520:	ldr	r0, [pc, #332]	; 1a674 <__assert_fail@plt+0x9468>
   1a524:	bx	lr
   1a528:	ldr	r0, [pc, #328]	; 1a678 <__assert_fail@plt+0x946c>
   1a52c:	bx	lr
   1a530:	ldr	r0, [pc, #324]	; 1a67c <__assert_fail@plt+0x9470>
   1a534:	bx	lr
   1a538:	ldr	r0, [pc, #320]	; 1a680 <__assert_fail@plt+0x9474>
   1a53c:	bx	lr
   1a540:	ldr	r0, [pc, #316]	; 1a684 <__assert_fail@plt+0x9478>
   1a544:	bx	lr
   1a548:	ldr	r0, [pc, #312]	; 1a688 <__assert_fail@plt+0x947c>
   1a54c:	bx	lr
   1a550:	ldr	r0, [pc, #308]	; 1a68c <__assert_fail@plt+0x9480>
   1a554:	bx	lr
   1a558:	ldr	r0, [pc, #304]	; 1a690 <__assert_fail@plt+0x9484>
   1a55c:	bx	lr
   1a560:	ldr	r0, [pc, #300]	; 1a694 <__assert_fail@plt+0x9488>
   1a564:	bx	lr
   1a568:	ldr	r0, [pc, #296]	; 1a698 <__assert_fail@plt+0x948c>
   1a56c:	bx	lr
   1a570:	ldr	r0, [pc, #292]	; 1a69c <__assert_fail@plt+0x9490>
   1a574:	bx	lr
   1a578:	ldr	r0, [pc, #288]	; 1a6a0 <__assert_fail@plt+0x9494>
   1a57c:	bx	lr
   1a580:	ldr	r0, [pc, #284]	; 1a6a4 <__assert_fail@plt+0x9498>
   1a584:	bx	lr
   1a588:	ldr	r0, [pc, #280]	; 1a6a8 <__assert_fail@plt+0x949c>
   1a58c:	bx	lr
   1a590:	ldr	r0, [pc, #276]	; 1a6ac <__assert_fail@plt+0x94a0>
   1a594:	bx	lr
   1a598:	ldr	r0, [pc, #272]	; 1a6b0 <__assert_fail@plt+0x94a4>
   1a59c:	bx	lr
   1a5a0:	cmp	r1, #63	; 0x3f
   1a5a4:	bls	1a5ec <__assert_fail@plt+0x93e0>
   1a5a8:	ldrh	r3, [r0]
   1a5ac:	cmp	r3, #140	; 0x8c
   1a5b0:	beq	1a640 <__assert_fail@plt+0x9434>
   1a5b4:	bhi	1a5d8 <__assert_fail@plt+0x93cc>
   1a5b8:	cmp	r3, #40	; 0x28
   1a5bc:	bne	1a620 <__assert_fail@plt+0x9414>
   1a5c0:	cmp	r1, #65	; 0x41
   1a5c4:	beq	1a658 <__assert_fail@plt+0x944c>
   1a5c8:	cmp	r1, #97	; 0x61
   1a5cc:	bne	1a5ec <__assert_fail@plt+0x93e0>
   1a5d0:	ldr	r0, [pc, #220]	; 1a6b4 <__assert_fail@plt+0x94a8>
   1a5d4:	bx	lr
   1a5d8:	cmp	r3, #221	; 0xdd
   1a5dc:	beq	1a628 <__assert_fail@plt+0x941c>
   1a5e0:	ldr	r2, [pc, #208]	; 1a6b8 <__assert_fail@plt+0x94ac>
   1a5e4:	cmp	r3, r2
   1a5e8:	beq	1a628 <__assert_fail@plt+0x941c>
   1a5ec:	push	{r4, lr}
   1a5f0:	mov	r2, #5
   1a5f4:	mov	r4, r1
   1a5f8:	mov	r0, #0
   1a5fc:	ldr	r1, [pc, #184]	; 1a6bc <__assert_fail@plt+0x94b0>
   1a600:	bl	10f90 <dcgettext@plt>
   1a604:	mov	r3, r4
   1a608:	mov	r1, #32
   1a60c:	mov	r2, r0
   1a610:	ldr	r0, [pc, #168]	; 1a6c0 <__assert_fail@plt+0x94b4>
   1a614:	bl	110b0 <snprintf@plt>
   1a618:	ldr	r0, [pc, #160]	; 1a6c0 <__assert_fail@plt+0x94b4>
   1a61c:	pop	{r4, pc}
   1a620:	cmp	r3, #105	; 0x69
   1a624:	bne	1a5ec <__assert_fail@plt+0x93e0>
   1a628:	cmp	r1, #255	; 0xff
   1a62c:	bne	1a5ec <__assert_fail@plt+0x93e0>
   1a630:	mov	r2, #5
   1a634:	ldr	r1, [pc, #136]	; 1a6c4 <__assert_fail@plt+0x94b8>
   1a638:	mov	r0, #0
   1a63c:	b	10f90 <dcgettext@plt>
   1a640:	cmp	r1, #64	; 0x40
   1a644:	beq	1a660 <__assert_fail@plt+0x9454>
   1a648:	cmp	r1, #65	; 0x41
   1a64c:	bne	1a5ec <__assert_fail@plt+0x93e0>
   1a650:	ldr	r0, [pc, #112]	; 1a6c8 <__assert_fail@plt+0x94bc>
   1a654:	bx	lr
   1a658:	ldr	r0, [pc, #108]	; 1a6cc <__assert_fail@plt+0x94c0>
   1a65c:	bx	lr
   1a660:	mov	r2, #5
   1a664:	ldr	r1, [pc, #100]	; 1a6d0 <__assert_fail@plt+0x94c4>
   1a668:	mov	r0, #0
   1a66c:	b	10f90 <dcgettext@plt>
   1a670:	andeq	r4, r6, r8, lsr #12
   1a674:	andeq	r4, r6, r8, lsr r5
   1a678:	andeq	r4, r6, r8, asr #10
   1a67c:	andeq	r4, r6, r4, asr r5
   1a680:	andeq	r4, r6, r4, ror #10
   1a684:	andeq	r4, r6, r0, ror r5
   1a688:	andeq	r4, r6, ip, ror r5
   1a68c:	andeq	r4, r6, ip, lsl #11
   1a690:	muleq	r6, ip, r5
   1a694:			; <UNDEFINED> instruction: 0x000645b0
   1a698:	andeq	r4, r6, r0, asr #11
   1a69c:	ldrdeq	r4, [r6], -r0
   1a6a0:	andeq	r4, r6, r8, ror #11
   1a6a4:	strdeq	r4, [r6], -r0
   1a6a8:	strdeq	r4, [r6], -r8
   1a6ac:	andeq	r4, r6, r8, lsl #12
   1a6b0:	andeq	r4, r6, r8, lsr r6
   1a6b4:	ldrdeq	r0, [r6], -r8
   1a6b8:	andeq	r1, r0, r9, asr r0
   1a6bc:	andeq	r2, r6, r8, lsl lr
   1a6c0:			; <UNDEFINED> instruction: 0x0009a7b0
   1a6c4:	andeq	r4, r6, r4, asr r6
   1a6c8:	andeq	r4, r6, r8, asr #12
   1a6cc:	andeq	r4, r6, ip, lsr #10
   1a6d0:	andeq	r4, r6, r4, ror #12
   1a6d4:	and	r3, r1, #-16777216	; 0xff000000
   1a6d8:	cmp	r3, #2013265920	; 0x78000000
   1a6dc:	beq	1a784 <__assert_fail@plt+0x9578>
   1a6e0:	cmp	r1, #1610612740	; 0x60000004
   1a6e4:	beq	1a794 <__assert_fail@plt+0x9588>
   1a6e8:	bls	1a728 <__assert_fail@plt+0x951c>
   1a6ec:	cmp	r1, #1879048192	; 0x70000000
   1a6f0:	beq	1a77c <__assert_fail@plt+0x9570>
   1a6f4:	bhi	1a710 <__assert_fail@plt+0x9504>
   1a6f8:	cmp	r1, #1610612741	; 0x60000005
   1a6fc:	beq	1a764 <__assert_fail@plt+0x9558>
   1a700:	cmp	r1, #1610612742	; 0x60000006
   1a704:	ldr	r0, [pc, #144]	; 1a79c <__assert_fail@plt+0x9590>
   1a708:	movne	r0, #0
   1a70c:	bx	lr
   1a710:	cmp	r1, #1879048193	; 0x70000001
   1a714:	beq	1a76c <__assert_fail@plt+0x9560>
   1a718:	cmp	r1, #2030043136	; 0x79000000
   1a71c:	ldr	r0, [pc, #124]	; 1a7a0 <__assert_fail@plt+0x9594>
   1a720:	movne	r0, #0
   1a724:	bx	lr
   1a728:	cmp	r1, #1610612737	; 0x60000001
   1a72c:	beq	1a774 <__assert_fail@plt+0x9568>
   1a730:	bls	1a74c <__assert_fail@plt+0x9540>
   1a734:	cmp	r1, #1610612738	; 0x60000002
   1a738:	beq	1a75c <__assert_fail@plt+0x9550>
   1a73c:	cmp	r1, #1610612739	; 0x60000003
   1a740:	ldr	r0, [pc, #92]	; 1a7a4 <__assert_fail@plt+0x9598>
   1a744:	movne	r0, #0
   1a748:	bx	lr
   1a74c:	cmp	r1, #1610612736	; 0x60000000
   1a750:	ldr	r0, [pc, #80]	; 1a7a8 <__assert_fail@plt+0x959c>
   1a754:	movne	r0, #0
   1a758:	bx	lr
   1a75c:	ldr	r0, [pc, #72]	; 1a7ac <__assert_fail@plt+0x95a0>
   1a760:	bx	lr
   1a764:	ldr	r0, [pc, #68]	; 1a7b0 <__assert_fail@plt+0x95a4>
   1a768:	bx	lr
   1a76c:	ldr	r0, [pc, #64]	; 1a7b4 <__assert_fail@plt+0x95a8>
   1a770:	bx	lr
   1a774:	ldr	r0, [pc, #60]	; 1a7b8 <__assert_fail@plt+0x95ac>
   1a778:	bx	lr
   1a77c:	ldr	r0, [pc, #56]	; 1a7bc <__assert_fail@plt+0x95b0>
   1a780:	bx	lr
   1a784:	lsr	r1, r1, #16
   1a788:	add	r0, r0, #66	; 0x42
   1a78c:	uxtb	r1, r1
   1a790:	b	1a4c0 <__assert_fail@plt+0x92b4>
   1a794:	ldr	r0, [pc, #36]	; 1a7c0 <__assert_fail@plt+0x95b4>
   1a798:	bx	lr
   1a79c:	strdeq	r4, [r6], -r8
   1a7a0:	andeq	r4, r6, r4, lsl #13
   1a7a4:	andeq	r4, r6, r4, asr #13
   1a7a8:	muleq	r6, r8, r6
   1a7ac:			; <UNDEFINED> instruction: 0x000646b8
   1a7b0:	andeq	r4, r6, r4, ror #13
   1a7b4:	andeq	r4, r6, r4, lsl #14
   1a7b8:	andeq	r4, r6, r4, lsr #13
   1a7bc:	andeq	r4, r6, r8, ror r6
   1a7c0:	ldrdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   1a7c4:	cmp	r1, #14
   1a7c8:	beq	1aa1c <__assert_fail@plt+0x9810>
   1a7cc:	bls	1a874 <__assert_fail@plt+0x9668>
   1a7d0:	cmn	r1, #-1879048183	; 0x90000009
   1a7d4:	beq	1a9c8 <__assert_fail@plt+0x97bc>
   1a7d8:	bhi	1a8c0 <__assert_fail@plt+0x96b4>
   1a7dc:	cmp	r1, #17
   1a7e0:	beq	1a9b8 <__assert_fail@plt+0x97ac>
   1a7e4:	bls	1a8a8 <__assert_fail@plt+0x969c>
   1a7e8:	mvn	r3, #-1879048177	; 0x9000000f
   1a7ec:	cmp	r1, r3
   1a7f0:	beq	1a8e4 <__assert_fail@plt+0x96d8>
   1a7f4:	cmn	r1, #-1879048182	; 0x9000000a
   1a7f8:	beq	1a958 <__assert_fail@plt+0x974c>
   1a7fc:	cmp	r1, #18
   1a800:	beq	1a950 <__assert_fail@plt+0x9744>
   1a804:	add	r2, r1, #-1879048192	; 0x90000000
   1a808:	cmn	r2, #-268435455	; 0xf0000001
   1a80c:	push	{r4, r5, lr}
   1a810:	mov	r4, r1
   1a814:	sub	sp, sp, #12
   1a818:	bhi	1a9d0 <__assert_fail@plt+0x97c4>
   1a81c:	ldrh	r3, [r0, #66]	; 0x42
   1a820:	cmp	r3, #87	; 0x57
   1a824:	beq	1ab70 <__assert_fail@plt+0x9964>
   1a828:	bhi	1aa88 <__assert_fail@plt+0x987c>
   1a82c:	cmp	r3, #36	; 0x24
   1a830:	beq	1ab70 <__assert_fail@plt+0x9964>
   1a834:	bls	1aa60 <__assert_fail@plt+0x9854>
   1a838:	cmp	r3, #45	; 0x2d
   1a83c:	beq	1ab10 <__assert_fail@plt+0x9904>
   1a840:	bls	1aa3c <__assert_fail@plt+0x9830>
   1a844:	cmp	r3, #50	; 0x32
   1a848:	bne	1aa24 <__assert_fail@plt+0x9818>
   1a84c:	str	r2, [sp, #4]
   1a850:	bl	1a6d4 <__assert_fail@plt+0x94c8>
   1a854:	ldr	r2, [sp, #4]
   1a858:	cmp	r0, #0
   1a85c:	bne	1aa14 <__assert_fail@plt+0x9808>
   1a860:	ldr	r1, [pc, #1196]	; 1ad14 <__assert_fail@plt+0x9b08>
   1a864:	ldr	r0, [pc, #1196]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1a868:	bl	1114c <sprintf@plt>
   1a86c:	ldr	r0, [pc, #1188]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1a870:	b	1aa14 <__assert_fail@plt+0x9808>
   1a874:	cmp	r1, #5
   1a878:	beq	1a9c0 <__assert_fail@plt+0x97b4>
   1a87c:	bls	1a914 <__assert_fail@plt+0x9708>
   1a880:	cmp	r1, #8
   1a884:	beq	1a9b0 <__assert_fail@plt+0x97a4>
   1a888:	bls	1a8fc <__assert_fail@plt+0x96f0>
   1a88c:	cmp	r1, #10
   1a890:	beq	1a990 <__assert_fail@plt+0x9784>
   1a894:	bcc	1a988 <__assert_fail@plt+0x977c>
   1a898:	cmp	r1, #11
   1a89c:	bne	1a804 <__assert_fail@plt+0x95f8>
   1a8a0:	ldr	r0, [pc, #1140]	; 1ad1c <__assert_fail@plt+0x9b10>
   1a8a4:	bx	lr
   1a8a8:	cmp	r1, #15
   1a8ac:	beq	1a980 <__assert_fail@plt+0x9774>
   1a8b0:	cmp	r1, #16
   1a8b4:	bne	1a804 <__assert_fail@plt+0x95f8>
   1a8b8:	ldr	r0, [pc, #1120]	; 1ad20 <__assert_fail@plt+0x9b14>
   1a8bc:	bx	lr
   1a8c0:	cmn	r1, #-1879048190	; 0x90000002
   1a8c4:	beq	1a9a8 <__assert_fail@plt+0x979c>
   1a8c8:	bls	1a8ec <__assert_fail@plt+0x96e0>
   1a8cc:	cmn	r1, #-2147483645	; 0x80000003
   1a8d0:	beq	1a998 <__assert_fail@plt+0x978c>
   1a8d4:	cmn	r1, #-2147483647	; 0x80000001
   1a8d8:	beq	1a978 <__assert_fail@plt+0x976c>
   1a8dc:	cmn	r1, #-1879048191	; 0x90000001
   1a8e0:	bne	1a804 <__assert_fail@plt+0x95f8>
   1a8e4:	ldr	r0, [pc, #1080]	; 1ad24 <__assert_fail@plt+0x9b18>
   1a8e8:	bx	lr
   1a8ec:	cmn	r1, #-1879048188	; 0x90000004
   1a8f0:	bcc	1a804 <__assert_fail@plt+0x95f8>
   1a8f4:	ldr	r0, [pc, #1068]	; 1ad28 <__assert_fail@plt+0x9b1c>
   1a8f8:	bx	lr
   1a8fc:	cmp	r1, #6
   1a900:	beq	1a970 <__assert_fail@plt+0x9764>
   1a904:	cmp	r1, #7
   1a908:	bne	1a804 <__assert_fail@plt+0x95f8>
   1a90c:	ldr	r0, [pc, #1048]	; 1ad2c <__assert_fail@plt+0x9b20>
   1a910:	bx	lr
   1a914:	cmp	r1, #2
   1a918:	beq	1a9a0 <__assert_fail@plt+0x9794>
   1a91c:	bls	1a938 <__assert_fail@plt+0x972c>
   1a920:	cmp	r1, #3
   1a924:	beq	1a968 <__assert_fail@plt+0x975c>
   1a928:	cmp	r1, #4
   1a92c:	bne	1a804 <__assert_fail@plt+0x95f8>
   1a930:	ldr	r0, [pc, #1016]	; 1ad30 <__assert_fail@plt+0x9b24>
   1a934:	bx	lr
   1a938:	cmp	r1, #0
   1a93c:	beq	1a960 <__assert_fail@plt+0x9754>
   1a940:	cmp	r1, #1
   1a944:	bne	1a804 <__assert_fail@plt+0x95f8>
   1a948:	ldr	r0, [pc, #996]	; 1ad34 <__assert_fail@plt+0x9b28>
   1a94c:	bx	lr
   1a950:	ldr	r0, [pc, #992]	; 1ad38 <__assert_fail@plt+0x9b2c>
   1a954:	bx	lr
   1a958:	ldr	r0, [pc, #988]	; 1ad3c <__assert_fail@plt+0x9b30>
   1a95c:	bx	lr
   1a960:	ldr	r0, [pc, #984]	; 1ad40 <__assert_fail@plt+0x9b34>
   1a964:	bx	lr
   1a968:	ldr	r0, [pc, #980]	; 1ad44 <__assert_fail@plt+0x9b38>
   1a96c:	bx	lr
   1a970:	ldr	r0, [pc, #976]	; 1ad48 <__assert_fail@plt+0x9b3c>
   1a974:	bx	lr
   1a978:	ldr	r0, [pc, #972]	; 1ad4c <__assert_fail@plt+0x9b40>
   1a97c:	bx	lr
   1a980:	ldr	r0, [pc, #968]	; 1ad50 <__assert_fail@plt+0x9b44>
   1a984:	bx	lr
   1a988:	ldr	r0, [pc, #964]	; 1ad54 <__assert_fail@plt+0x9b48>
   1a98c:	bx	lr
   1a990:	ldr	r0, [pc, #960]	; 1ad58 <__assert_fail@plt+0x9b4c>
   1a994:	bx	lr
   1a998:	ldr	r0, [pc, #956]	; 1ad5c <__assert_fail@plt+0x9b50>
   1a99c:	bx	lr
   1a9a0:	ldr	r0, [pc, #952]	; 1ad60 <__assert_fail@plt+0x9b54>
   1a9a4:	bx	lr
   1a9a8:	ldr	r0, [pc, #948]	; 1ad64 <__assert_fail@plt+0x9b58>
   1a9ac:	bx	lr
   1a9b0:	ldr	r0, [pc, #944]	; 1ad68 <__assert_fail@plt+0x9b5c>
   1a9b4:	bx	lr
   1a9b8:	ldr	r0, [pc, #940]	; 1ad6c <__assert_fail@plt+0x9b60>
   1a9bc:	bx	lr
   1a9c0:	ldr	r0, [pc, #936]	; 1ad70 <__assert_fail@plt+0x9b64>
   1a9c4:	bx	lr
   1a9c8:	ldr	r0, [pc, #932]	; 1ad74 <__assert_fail@plt+0x9b68>
   1a9cc:	bx	lr
   1a9d0:	add	r5, r1, #-1610612736	; 0xa0000000
   1a9d4:	cmn	r5, #-268435455	; 0xf0000001
   1a9d8:	bhi	1ab90 <__assert_fail@plt+0x9984>
   1a9dc:	ldrh	r3, [r0, #66]	; 0x42
   1a9e0:	cmp	r3, #50	; 0x32
   1a9e4:	beq	1ac60 <__assert_fail@plt+0x9a54>
   1a9e8:	ldrb	r3, [r0, #23]
   1a9ec:	cmp	r3, #6
   1a9f0:	beq	1abd0 <__assert_fail@plt+0x99c4>
   1a9f4:	cmn	r1, #-1879048181	; 0x9000000b
   1a9f8:	beq	1acc4 <__assert_fail@plt+0x9ab8>
   1a9fc:	bls	1ac08 <__assert_fail@plt+0x99fc>
   1aa00:	cmn	r1, #-1879048182	; 0x9000000a
   1aa04:	beq	1ac68 <__assert_fail@plt+0x9a5c>
   1aa08:	cmn	r1, #-1879048183	; 0x90000009
   1aa0c:	ldreq	r0, [pc, #864]	; 1ad74 <__assert_fail@plt+0x9b68>
   1aa10:	bne	1abf0 <__assert_fail@plt+0x99e4>
   1aa14:	add	sp, sp, #12
   1aa18:	pop	{r4, r5, pc}
   1aa1c:	ldr	r0, [pc, #852]	; 1ad78 <__assert_fail@plt+0x9b6c>
   1aa20:	bx	lr
   1aa24:	cmp	r3, #62	; 0x3e
   1aa28:	bne	1a860 <__assert_fail@plt+0x9654>
   1aa2c:	cmp	r4, #1879048193	; 0x70000001
   1aa30:	ldreq	r0, [pc, #836]	; 1ad7c <__assert_fail@plt+0x9b70>
   1aa34:	beq	1aa14 <__assert_fail@plt+0x9808>
   1aa38:	b	1a860 <__assert_fail@plt+0x9654>
   1aa3c:	cmp	r3, #40	; 0x28
   1aa40:	bne	1a860 <__assert_fail@plt+0x9654>
   1aa44:	sub	r1, r1, #1879048193	; 0x70000001
   1aa48:	cmp	r1, #4
   1aa4c:	bhi	1a860 <__assert_fail@plt+0x9654>
   1aa50:	ldr	r3, [pc, #808]	; 1ad80 <__assert_fail@plt+0x9b74>
   1aa54:	add	r3, r3, r1, lsl #2
   1aa58:	ldr	r0, [r3, #428]	; 0x1ac
   1aa5c:	b	1a858 <__assert_fail@plt+0x964c>
   1aa60:	cmp	r3, #10
   1aa64:	beq	1aaf0 <__assert_fail@plt+0x98e4>
   1aa68:	cmp	r3, #15
   1aa6c:	bne	1aae8 <__assert_fail@plt+0x98dc>
   1aa70:	cmp	r2, #9
   1aa74:	bhi	1a860 <__assert_fail@plt+0x9654>
   1aa78:	ldr	r3, [pc, #768]	; 1ad80 <__assert_fail@plt+0x9b74>
   1aa7c:	add	r3, r3, r2, lsl #2
   1aa80:	ldr	r0, [r3, #388]	; 0x184
   1aa84:	b	1a858 <__assert_fail@plt+0x964c>
   1aa88:	cmp	r3, #181	; 0xb5
   1aa8c:	bhi	1ab20 <__assert_fail@plt+0x9914>
   1aa90:	cmp	r3, #180	; 0xb4
   1aa94:	bcs	1aa2c <__assert_fail@plt+0x9820>
   1aa98:	cmp	r3, #105	; 0x69
   1aa9c:	beq	1ac70 <__assert_fail@plt+0x9a64>
   1aaa0:	cmp	r3, #140	; 0x8c
   1aaa4:	bne	1ab08 <__assert_fail@plt+0x98fc>
   1aaa8:	cmp	r1, #2130706432	; 0x7f000000
   1aaac:	beq	1ad0c <__assert_fail@plt+0x9b00>
   1aab0:	bls	1ac98 <__assert_fail@plt+0x9a8c>
   1aab4:	ldr	r3, [pc, #712]	; 1ad84 <__assert_fail@plt+0x9b78>
   1aab8:	cmp	r1, r3
   1aabc:	beq	1ad04 <__assert_fail@plt+0x9af8>
   1aac0:	bcc	1ace4 <__assert_fail@plt+0x9ad8>
   1aac4:	add	r3, r3, #1
   1aac8:	cmp	r1, r3
   1aacc:	ldreq	r0, [pc, #692]	; 1ad88 <__assert_fail@plt+0x9b7c>
   1aad0:	beq	1aa14 <__assert_fail@plt+0x9808>
   1aad4:	add	r3, r3, #1
   1aad8:	cmp	r1, r3
   1aadc:	ldreq	r0, [pc, #680]	; 1ad8c <__assert_fail@plt+0x9b80>
   1aae0:	beq	1aa14 <__assert_fail@plt+0x9808>
   1aae4:	b	1a860 <__assert_fail@plt+0x9654>
   1aae8:	cmp	r3, #8
   1aaec:	bne	1a860 <__assert_fail@plt+0x9654>
   1aaf0:	cmp	r2, #42	; 0x2a
   1aaf4:	bhi	1a860 <__assert_fail@plt+0x9654>
   1aaf8:	ldr	r3, [pc, #640]	; 1ad80 <__assert_fail@plt+0x9b74>
   1aafc:	add	r3, r3, r2, lsl #2
   1ab00:	ldr	r0, [r3, #216]	; 0xd8
   1ab04:	b	1a858 <__assert_fail@plt+0x964c>
   1ab08:	cmp	r3, #93	; 0x5d
   1ab0c:	bne	1a860 <__assert_fail@plt+0x9654>
   1ab10:	cmp	r4, #1879048193	; 0x70000001
   1ab14:	ldreq	r0, [pc, #628]	; 1ad90 <__assert_fail@plt+0x9b84>
   1ab18:	beq	1aa14 <__assert_fail@plt+0x9808>
   1ab1c:	b	1a860 <__assert_fail@plt+0x9654>
   1ab20:	cmp	r3, #195	; 0xc3
   1ab24:	beq	1ab10 <__assert_fail@plt+0x9904>
   1ab28:	bls	1ab4c <__assert_fail@plt+0x9940>
   1ab2c:	cmp	r3, #250	; 0xfa
   1ab30:	bne	1ab64 <__assert_fail@plt+0x9958>
   1ab34:	cmp	r1, #1879048193	; 0x70000001
   1ab38:	beq	1acd4 <__assert_fail@plt+0x9ac8>
   1ab3c:	cmp	r1, #1879048194	; 0x70000002
   1ab40:	ldreq	r0, [pc, #588]	; 1ad94 <__assert_fail@plt+0x9b88>
   1ab44:	beq	1aa14 <__assert_fail@plt+0x9808>
   1ab48:	b	1a860 <__assert_fail@plt+0x9654>
   1ab4c:	cmp	r3, #183	; 0xb7
   1ab50:	bne	1a860 <__assert_fail@plt+0x9654>
   1ab54:	cmp	r1, #1879048195	; 0x70000003
   1ab58:	ldreq	r0, [pc, #568]	; 1ad98 <__assert_fail@plt+0x9b8c>
   1ab5c:	beq	1aa14 <__assert_fail@plt+0x9808>
   1ab60:	b	1a860 <__assert_fail@plt+0x9654>
   1ab64:	ldr	r1, [pc, #560]	; 1ad9c <__assert_fail@plt+0x9b90>
   1ab68:	cmp	r3, r1
   1ab6c:	bne	1a860 <__assert_fail@plt+0x9654>
   1ab70:	cmp	r4, #1879048193	; 0x70000001
   1ab74:	beq	1acfc <__assert_fail@plt+0x9af0>
   1ab78:	cmp	r4, #1879048194	; 0x70000002
   1ab7c:	beq	1accc <__assert_fail@plt+0x9ac0>
   1ab80:	cmp	r4, #1879048192	; 0x70000000
   1ab84:	bne	1a860 <__assert_fail@plt+0x9654>
   1ab88:	ldr	r0, [pc, #528]	; 1ada0 <__assert_fail@plt+0x9b94>
   1ab8c:	b	1aa14 <__assert_fail@plt+0x9808>
   1ab90:	cmp	r1, #0
   1ab94:	bge	1ac1c <__assert_fail@plt+0x9a10>
   1ab98:	ldrh	r3, [r0, #66]	; 0x42
   1ab9c:	cmp	r3, #87	; 0x57
   1aba0:	beq	1ac48 <__assert_fail@plt+0x9a3c>
   1aba4:	ldr	r2, [pc, #496]	; 1ad9c <__assert_fail@plt+0x9b90>
   1aba8:	cmp	r3, r2
   1abac:	beq	1ac48 <__assert_fail@plt+0x9a3c>
   1abb0:	cmp	r3, #36	; 0x24
   1abb4:	beq	1ac48 <__assert_fail@plt+0x9a3c>
   1abb8:	add	r2, r4, #-2147483648	; 0x80000000
   1abbc:	ldr	r1, [pc, #480]	; 1ada4 <__assert_fail@plt+0x9b98>
   1abc0:	ldr	r0, [pc, #336]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1abc4:	bl	1114c <sprintf@plt>
   1abc8:	ldr	r0, [pc, #328]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1abcc:	b	1aa14 <__assert_fail@plt+0x9808>
   1abd0:	add	r3, r2, #18
   1abd4:	cmp	r3, #18
   1abd8:	bhi	1abf0 <__assert_fail@plt+0x99e4>
   1abdc:	ldr	r2, [pc, #412]	; 1ad80 <__assert_fail@plt+0x9b74>
   1abe0:	add	r3, r2, r3, lsl #2
   1abe4:	ldr	r0, [r3, #448]	; 0x1c0
   1abe8:	cmp	r0, #0
   1abec:	bne	1aa14 <__assert_fail@plt+0x9808>
   1abf0:	mov	r2, r5
   1abf4:	ldr	r1, [pc, #428]	; 1ada8 <__assert_fail@plt+0x9b9c>
   1abf8:	ldr	r0, [pc, #280]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1abfc:	bl	1114c <sprintf@plt>
   1ac00:	ldr	r0, [pc, #272]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1ac04:	b	1aa14 <__assert_fail@plt+0x9808>
   1ac08:	ldr	r3, [pc, #412]	; 1adac <__assert_fail@plt+0x9ba0>
   1ac0c:	cmp	r1, r3
   1ac10:	ldreq	r0, [pc, #408]	; 1adb0 <__assert_fail@plt+0x9ba4>
   1ac14:	beq	1aa14 <__assert_fail@plt+0x9808>
   1ac18:	b	1abf0 <__assert_fail@plt+0x99e4>
   1ac1c:	mov	r2, #5
   1ac20:	ldr	r1, [pc, #396]	; 1adb4 <__assert_fail@plt+0x9ba8>
   1ac24:	mov	r0, #0
   1ac28:	bl	10f90 <dcgettext@plt>
   1ac2c:	mov	r3, r4
   1ac30:	mov	r1, #32
   1ac34:	mov	r2, r0
   1ac38:	ldr	r0, [pc, #216]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1ac3c:	bl	110b0 <snprintf@plt>
   1ac40:	ldr	r0, [pc, #208]	; 1ad18 <__assert_fail@plt+0x9b0c>
   1ac44:	b	1aa14 <__assert_fail@plt+0x9808>
   1ac48:	cmp	r4, #-2147483648	; 0x80000000
   1ac4c:	beq	1acbc <__assert_fail@plt+0x9ab0>
   1ac50:	cmp	r4, #-1610612736	; 0xa0000000
   1ac54:	bne	1abb8 <__assert_fail@plt+0x99ac>
   1ac58:	ldr	r0, [pc, #344]	; 1adb8 <__assert_fail@plt+0x9bac>
   1ac5c:	b	1aa14 <__assert_fail@plt+0x9808>
   1ac60:	bl	1a6d4 <__assert_fail@plt+0x94c8>
   1ac64:	b	1abe8 <__assert_fail@plt+0x99dc>
   1ac68:	ldr	r0, [pc, #204]	; 1ad3c <__assert_fail@plt+0x9b30>
   1ac6c:	b	1aa14 <__assert_fail@plt+0x9808>
   1ac70:	ldr	r3, [pc, #324]	; 1adbc <__assert_fail@plt+0x9bb0>
   1ac74:	cmp	r1, r3
   1ac78:	beq	1acec <__assert_fail@plt+0x9ae0>
   1ac7c:	add	r3, r3, #1
   1ac80:	cmp	r1, r3
   1ac84:	beq	1acdc <__assert_fail@plt+0x9ad0>
   1ac88:	cmp	r1, #1879048195	; 0x70000003
   1ac8c:	bne	1a860 <__assert_fail@plt+0x9654>
   1ac90:	ldr	r0, [pc, #296]	; 1adc0 <__assert_fail@plt+0x9bb4>
   1ac94:	b	1aa14 <__assert_fail@plt+0x9808>
   1ac98:	cmp	r1, #1879048194	; 0x70000002
   1ac9c:	beq	1acf4 <__assert_fail@plt+0x9ae8>
   1aca0:	cmp	r1, #1879048195	; 0x70000003
   1aca4:	ldreq	r0, [pc, #280]	; 1adc4 <__assert_fail@plt+0x9bb8>
   1aca8:	beq	1aa14 <__assert_fail@plt+0x9808>
   1acac:	cmp	r1, #1879048193	; 0x70000001
   1acb0:	bne	1a860 <__assert_fail@plt+0x9654>
   1acb4:	ldr	r0, [pc, #268]	; 1adc8 <__assert_fail@plt+0x9bbc>
   1acb8:	b	1aa14 <__assert_fail@plt+0x9808>
   1acbc:	ldr	r0, [pc, #264]	; 1adcc <__assert_fail@plt+0x9bc0>
   1acc0:	b	1aa14 <__assert_fail@plt+0x9808>
   1acc4:	ldr	r0, [pc, #260]	; 1add0 <__assert_fail@plt+0x9bc4>
   1acc8:	b	1aa14 <__assert_fail@plt+0x9808>
   1accc:	ldr	r0, [pc, #256]	; 1add4 <__assert_fail@plt+0x9bc8>
   1acd0:	b	1aa14 <__assert_fail@plt+0x9808>
   1acd4:	ldr	r0, [pc, #252]	; 1add8 <__assert_fail@plt+0x9bcc>
   1acd8:	b	1aa14 <__assert_fail@plt+0x9808>
   1acdc:	ldr	r0, [pc, #248]	; 1addc <__assert_fail@plt+0x9bd0>
   1ace0:	b	1aa14 <__assert_fail@plt+0x9808>
   1ace4:	ldr	r0, [pc, #244]	; 1ade0 <__assert_fail@plt+0x9bd4>
   1ace8:	b	1aa14 <__assert_fail@plt+0x9808>
   1acec:	ldr	r0, [pc, #240]	; 1ade4 <__assert_fail@plt+0x9bd8>
   1acf0:	b	1aa14 <__assert_fail@plt+0x9808>
   1acf4:	ldr	r0, [pc, #236]	; 1ade8 <__assert_fail@plt+0x9bdc>
   1acf8:	b	1aa14 <__assert_fail@plt+0x9808>
   1acfc:	ldr	r0, [pc, #232]	; 1adec <__assert_fail@plt+0x9be0>
   1ad00:	b	1aa14 <__assert_fail@plt+0x9808>
   1ad04:	ldr	r0, [pc, #228]	; 1adf0 <__assert_fail@plt+0x9be4>
   1ad08:	b	1aa14 <__assert_fail@plt+0x9808>
   1ad0c:	ldr	r0, [pc, #224]	; 1adf4 <__assert_fail@plt+0x9be8>
   1ad10:	b	1aa14 <__assert_fail@plt+0x9808>
   1ad14:	andeq	r4, r6, r4, asr r9
   1ad18:	ldrdeq	sl, [r9], -r0
   1ad1c:	andeq	r4, r6, ip, ror #14
   1ad20:	andeq	r4, r6, ip, lsl #15
   1ad24:	ldrdeq	r4, [r6], -r8
   1ad28:	andeq	r4, r6, r8, asr #15
   1ad2c:	andeq	r4, r6, r4, asr r7
   1ad30:	andeq	r4, r7, r0, asr r6
   1ad34:	andeq	r4, r6, ip, asr #17
   1ad38:			; <UNDEFINED> instruction: 0x000647b0
   1ad3c:	muleq	r6, ip, r7
   1ad40:	strdeq	r4, [r6], -ip
   1ad44:	andeq	r4, r6, r4, asr #14
   1ad48:	andeq	r4, r6, ip, asr #14
   1ad4c:	muleq	r6, r4, ip
   1ad50:	andeq	r4, r6, r0, lsl #15
   1ad54:	ldrdeq	r9, [r7], -r0
   1ad58:	andeq	r4, r6, r4, ror #14
   1ad5c:	andeq	r0, r6, r0, lsl #25
   1ad60:	andeq	r4, r6, ip, lsr r7
   1ad64:	ldrdeq	r4, [r6], -r0
   1ad68:	andeq	r4, r6, ip, asr r7
   1ad6c:	andeq	r4, r6, r8, lsr #15
   1ad70:	andeq	r4, r6, r0, lsr #15
   1ad74:	strdeq	r4, [r6], -ip
   1ad78:	andeq	r4, r6, r4, ror r7
   1ad7c:	andeq	r4, r6, r0, ror #15
   1ad80:	andeq	r8, r5, r4, ror #27
   1ad84:	svcvc	0x00000002
   1ad88:	andeq	r4, r6, r8, ror #16
   1ad8c:	andeq	r4, r6, r4, ror r8
   1ad90:	muleq	r6, r4, r8
   1ad94:	andeq	r4, r6, r4, lsr #18
   1ad98:			; <UNDEFINED> instruction: 0x000648b8
   1ad9c:	andeq	r9, r0, r0, lsl #1
   1ada0:	andeq	r4, r6, r8, lsl #16
   1ada4:	andeq	r4, r6, ip, ror #18
   1ada8:	andeq	r4, r6, r0, ror #18
   1adac:	svcvs	0x00ff4700
   1adb0:	andeq	r4, r6, r4, lsr #14
   1adb4:	andeq	r4, r6, r8, ror r9
   1adb8:	andeq	r4, r6, r4, asr #18
   1adbc:	svcvc	0x00000005
   1adc0:	andeq	r4, r6, r4, lsr #17
   1adc4:	andeq	r4, r6, r0, lsl #17
   1adc8:	ldrdeq	r4, [r6], -r8
   1adcc:	strdeq	r4, [r6], -r0
   1add0:	andeq	r4, r6, r4, lsr #16
   1add4:	andeq	r4, r6, r8, ror #17
   1add8:	andeq	r4, r6, r4, lsl r7
   1addc:	andeq	r4, r6, r0, lsr r9
   1ade0:	andeq	r4, r6, ip, lsl r8
   1ade4:	andeq	r4, r6, r0, lsl r9
   1ade8:	andeq	r4, r6, r4, lsr r8
   1adec:	andeq	r4, r6, r8, asr #16
   1adf0:	andeq	r4, r6, ip, asr r8
   1adf4:	andeq	r4, r6, r4, lsl #18
   1adf8:	cmp	r2, #34	; 0x22
   1adfc:	beq	1b27c <__assert_fail@plt+0xa070>
   1ae00:	bls	1ae5c <__assert_fail@plt+0x9c50>
   1ae04:	ldr	r3, [pc, #1632]	; 1b46c <__assert_fail@plt+0xa260>
   1ae08:	cmp	r2, r3
   1ae0c:	beq	1b224 <__assert_fail@plt+0xa018>
   1ae10:	bls	1afa4 <__assert_fail@plt+0x9d98>
   1ae14:	cmn	r2, #-1879048186	; 0x90000006
   1ae18:	beq	1b214 <__assert_fail@plt+0xa008>
   1ae1c:	bhi	1af74 <__assert_fail@plt+0x9d68>
   1ae20:	ldr	r3, [pc, #1608]	; 1b470 <__assert_fail@plt+0xa264>
   1ae24:	cmp	r2, r3
   1ae28:	beq	1b1f4 <__assert_fail@plt+0x9fe8>
   1ae2c:	bls	1aea4 <__assert_fail@plt+0x9c98>
   1ae30:	ldr	r3, [pc, #1596]	; 1b474 <__assert_fail@plt+0xa268>
   1ae34:	cmp	r2, r3
   1ae38:	beq	1b19c <__assert_fail@plt+0x9f90>
   1ae3c:	bcc	1b124 <__assert_fail@plt+0x9f18>
   1ae40:	mvn	r3, #-1879048177	; 0x9000000f
   1ae44:	cmp	r2, r3
   1ae48:	beq	1b11c <__assert_fail@plt+0x9f10>
   1ae4c:	cmn	r2, #-1879048185	; 0x90000007
   1ae50:	bne	1b22c <__assert_fail@plt+0xa020>
   1ae54:	ldr	r0, [pc, #1564]	; 1b478 <__assert_fail@plt+0xa26c>
   1ae58:	bx	lr
   1ae5c:	cmp	r2, #16
   1ae60:	beq	1b21c <__assert_fail@plt+0xa010>
   1ae64:	bhi	1aef0 <__assert_fail@plt+0x9ce4>
   1ae68:	cmp	r2, #7
   1ae6c:	beq	1b204 <__assert_fail@plt+0x9ff8>
   1ae70:	bls	1aed0 <__assert_fail@plt+0x9cc4>
   1ae74:	cmp	r2, #11
   1ae78:	beq	1b1dc <__assert_fail@plt+0x9fd0>
   1ae7c:	bls	1aebc <__assert_fail@plt+0x9cb0>
   1ae80:	cmp	r2, #13
   1ae84:	beq	1b1ac <__assert_fail@plt+0x9fa0>
   1ae88:	bcc	1b15c <__assert_fail@plt+0x9f50>
   1ae8c:	cmp	r2, #14
   1ae90:	beq	1b114 <__assert_fail@plt+0x9f08>
   1ae94:	cmp	r2, #15
   1ae98:	bne	1b22c <__assert_fail@plt+0xa020>
   1ae9c:	ldr	r0, [pc, #1496]	; 1b47c <__assert_fail@plt+0xa270>
   1aea0:	bx	lr
   1aea4:	sub	r3, r3, #2
   1aea8:	cmp	r2, r3
   1aeac:	beq	1b14c <__assert_fail@plt+0x9f40>
   1aeb0:	bhi	1b10c <__assert_fail@plt+0x9f00>
   1aeb4:	ldr	r0, [pc, #1476]	; 1b480 <__assert_fail@plt+0xa274>
   1aeb8:	bx	lr
   1aebc:	cmp	r2, #9
   1aec0:	beq	1b144 <__assert_fail@plt+0x9f38>
   1aec4:	bhi	1b0dc <__assert_fail@plt+0x9ed0>
   1aec8:	ldr	r0, [pc, #1460]	; 1b484 <__assert_fail@plt+0xa278>
   1aecc:	bx	lr
   1aed0:	cmp	r2, #3
   1aed4:	beq	1b1cc <__assert_fail@plt+0x9fc0>
   1aed8:	bhi	1af2c <__assert_fail@plt+0x9d20>
   1aedc:	cmp	r2, #1
   1aee0:	beq	1b184 <__assert_fail@plt+0x9f78>
   1aee4:	bhi	1b0d4 <__assert_fail@plt+0x9ec8>
   1aee8:	ldr	r0, [pc, #1432]	; 1b488 <__assert_fail@plt+0xa27c>
   1aeec:	bx	lr
   1aef0:	cmp	r2, #24
   1aef4:	beq	1b1fc <__assert_fail@plt+0x9ff0>
   1aef8:	bls	1af54 <__assert_fail@plt+0x9d48>
   1aefc:	cmp	r2, #28
   1af00:	beq	1b1d4 <__assert_fail@plt+0x9fc8>
   1af04:	bls	1af40 <__assert_fail@plt+0x9d34>
   1af08:	cmp	r2, #30
   1af0c:	beq	1b1a4 <__assert_fail@plt+0x9f98>
   1af10:	bcc	1b174 <__assert_fail@plt+0x9f68>
   1af14:	cmp	r2, #32
   1af18:	beq	1b0cc <__assert_fail@plt+0x9ec0>
   1af1c:	cmp	r2, #33	; 0x21
   1af20:	bne	1b22c <__assert_fail@plt+0xa020>
   1af24:	ldr	r0, [pc, #1376]	; 1b48c <__assert_fail@plt+0xa280>
   1af28:	bx	lr
   1af2c:	cmp	r2, #5
   1af30:	beq	1b17c <__assert_fail@plt+0x9f70>
   1af34:	bhi	1b0c4 <__assert_fail@plt+0x9eb8>
   1af38:	ldr	r0, [pc, #1360]	; 1b490 <__assert_fail@plt+0xa284>
   1af3c:	bx	lr
   1af40:	cmp	r2, #26
   1af44:	beq	1b16c <__assert_fail@plt+0x9f60>
   1af48:	bhi	1b0bc <__assert_fail@plt+0x9eb0>
   1af4c:	ldr	r0, [pc, #1344]	; 1b494 <__assert_fail@plt+0xa288>
   1af50:	bx	lr
   1af54:	cmp	r2, #20
   1af58:	beq	1b1bc <__assert_fail@plt+0x9fb0>
   1af5c:	bhi	1aff4 <__assert_fail@plt+0x9de8>
   1af60:	cmp	r2, #18
   1af64:	beq	1b164 <__assert_fail@plt+0x9f58>
   1af68:	bhi	1b0b4 <__assert_fail@plt+0x9ea8>
   1af6c:	ldr	r0, [pc, #1316]	; 1b498 <__assert_fail@plt+0xa28c>
   1af70:	bx	lr
   1af74:	cmn	r2, #-1879048190	; 0x90000002
   1af78:	beq	1b1ec <__assert_fail@plt+0x9fe0>
   1af7c:	bls	1b078 <__assert_fail@plt+0x9e6c>
   1af80:	cmn	r2, #-2147483645	; 0x80000003
   1af84:	beq	1b194 <__assert_fail@plt+0x9f88>
   1af88:	bls	1b068 <__assert_fail@plt+0x9e5c>
   1af8c:	cmn	r2, #-2147483646	; 0x80000002
   1af90:	beq	1b0a4 <__assert_fail@plt+0x9e98>
   1af94:	cmn	r2, #-2147483647	; 0x80000001
   1af98:	bne	1b22c <__assert_fail@plt+0xa020>
   1af9c:	ldr	r0, [pc, #1272]	; 1b49c <__assert_fail@plt+0xa290>
   1afa0:	bx	lr
   1afa4:	sub	r3, r3, #253	; 0xfd
   1afa8:	cmp	r2, r3
   1afac:	beq	1b20c <__assert_fail@plt+0xa000>
   1afb0:	bls	1b034 <__assert_fail@plt+0x9e28>
   1afb4:	ldr	r3, [pc, #1252]	; 1b4a0 <__assert_fail@plt+0xa294>
   1afb8:	cmp	r2, r3
   1afbc:	beq	1b1e4 <__assert_fail@plt+0x9fd8>
   1afc0:	bls	1b01c <__assert_fail@plt+0x9e10>
   1afc4:	ldr	r3, [pc, #1240]	; 1b4a4 <__assert_fail@plt+0xa298>
   1afc8:	cmp	r2, r3
   1afcc:	beq	1b1b4 <__assert_fail@plt+0x9fa8>
   1afd0:	bls	1b008 <__assert_fail@plt+0x9dfc>
   1afd4:	ldr	r3, [pc, #1228]	; 1b4a8 <__assert_fail@plt+0xa29c>
   1afd8:	cmp	r2, r3
   1afdc:	beq	1b0ac <__assert_fail@plt+0x9ea0>
   1afe0:	add	r3, r3, #1
   1afe4:	cmp	r2, r3
   1afe8:	bne	1b22c <__assert_fail@plt+0xa020>
   1afec:	ldr	r0, [pc, #1208]	; 1b4ac <__assert_fail@plt+0xa2a0>
   1aff0:	bx	lr
   1aff4:	cmp	r2, #22
   1aff8:	beq	1b154 <__assert_fail@plt+0x9f48>
   1affc:	bhi	1b0ec <__assert_fail@plt+0x9ee0>
   1b000:	ldr	r0, [pc, #1192]	; 1b4b0 <__assert_fail@plt+0xa2a4>
   1b004:	bx	lr
   1b008:	sub	r3, r3, #1
   1b00c:	cmp	r2, r3
   1b010:	bne	1b22c <__assert_fail@plt+0xa020>
   1b014:	ldr	r0, [pc, #1176]	; 1b4b4 <__assert_fail@plt+0xa2a8>
   1b018:	bx	lr
   1b01c:	sub	r3, r3, #2
   1b020:	cmp	r2, r3
   1b024:	beq	1b18c <__assert_fail@plt+0x9f80>
   1b028:	bhi	1b0e4 <__assert_fail@plt+0x9ed8>
   1b02c:	ldr	r0, [pc, #1156]	; 1b4b8 <__assert_fail@plt+0xa2ac>
   1b030:	bx	lr
   1b034:	sub	r3, r3, #4
   1b038:	cmp	r2, r3
   1b03c:	beq	1b1c4 <__assert_fail@plt+0x9fb8>
   1b040:	bhi	1b08c <__assert_fail@plt+0x9e80>
   1b044:	sub	r3, r3, #2
   1b048:	cmp	r2, r3
   1b04c:	beq	1b13c <__assert_fail@plt+0x9f30>
   1b050:	bhi	1b104 <__assert_fail@plt+0x9ef8>
   1b054:	sub	r3, r3, #1
   1b058:	cmp	r2, r3
   1b05c:	bne	1b22c <__assert_fail@plt+0xa020>
   1b060:	ldr	r0, [pc, #1108]	; 1b4bc <__assert_fail@plt+0xa2b0>
   1b064:	bx	lr
   1b068:	cmn	r2, #-1879048191	; 0x90000001
   1b06c:	bne	1b22c <__assert_fail@plt+0xa020>
   1b070:	ldr	r0, [pc, #1096]	; 1b4c0 <__assert_fail@plt+0xa2b4>
   1b074:	bx	lr
   1b078:	cmn	r2, #-1879048188	; 0x90000004
   1b07c:	beq	1b134 <__assert_fail@plt+0x9f28>
   1b080:	bhi	1b0fc <__assert_fail@plt+0x9ef0>
   1b084:	ldr	r0, [pc, #1080]	; 1b4c4 <__assert_fail@plt+0xa2b8>
   1b088:	bx	lr
   1b08c:	ldr	r3, [pc, #1076]	; 1b4c8 <__assert_fail@plt+0xa2bc>
   1b090:	cmp	r2, r3
   1b094:	beq	1b12c <__assert_fail@plt+0x9f20>
   1b098:	bhi	1b0f4 <__assert_fail@plt+0x9ee8>
   1b09c:	ldr	r0, [pc, #1064]	; 1b4cc <__assert_fail@plt+0xa2c0>
   1b0a0:	bx	lr
   1b0a4:	ldr	r0, [pc, #1060]	; 1b4d0 <__assert_fail@plt+0xa2c4>
   1b0a8:	bx	lr
   1b0ac:	ldr	r0, [pc, #1056]	; 1b4d4 <__assert_fail@plt+0xa2c8>
   1b0b0:	bx	lr
   1b0b4:	ldr	r0, [pc, #1052]	; 1b4d8 <__assert_fail@plt+0xa2cc>
   1b0b8:	bx	lr
   1b0bc:	ldr	r0, [pc, #1048]	; 1b4dc <__assert_fail@plt+0xa2d0>
   1b0c0:	bx	lr
   1b0c4:	ldr	r0, [pc, #1044]	; 1b4e0 <__assert_fail@plt+0xa2d4>
   1b0c8:	bx	lr
   1b0cc:	ldr	r0, [pc, #1040]	; 1b4e4 <__assert_fail@plt+0xa2d8>
   1b0d0:	bx	lr
   1b0d4:	ldr	r0, [pc, #1036]	; 1b4e8 <__assert_fail@plt+0xa2dc>
   1b0d8:	bx	lr
   1b0dc:	ldr	r0, [pc, #1032]	; 1b4ec <__assert_fail@plt+0xa2e0>
   1b0e0:	bx	lr
   1b0e4:	ldr	r0, [pc, #1028]	; 1b4f0 <__assert_fail@plt+0xa2e4>
   1b0e8:	bx	lr
   1b0ec:	ldr	r0, [pc, #1024]	; 1b4f4 <__assert_fail@plt+0xa2e8>
   1b0f0:	bx	lr
   1b0f4:	ldr	r0, [pc, #1020]	; 1b4f8 <__assert_fail@plt+0xa2ec>
   1b0f8:	bx	lr
   1b0fc:	ldr	r0, [pc, #1016]	; 1b4fc <__assert_fail@plt+0xa2f0>
   1b100:	bx	lr
   1b104:	ldr	r0, [pc, #1012]	; 1b500 <__assert_fail@plt+0xa2f4>
   1b108:	bx	lr
   1b10c:	ldr	r0, [pc, #1008]	; 1b504 <__assert_fail@plt+0xa2f8>
   1b110:	bx	lr
   1b114:	ldr	r0, [pc, #1004]	; 1b508 <__assert_fail@plt+0xa2fc>
   1b118:	bx	lr
   1b11c:	ldr	r0, [pc, #1000]	; 1b50c <__assert_fail@plt+0xa300>
   1b120:	bx	lr
   1b124:	ldr	r0, [pc, #996]	; 1b510 <__assert_fail@plt+0xa304>
   1b128:	bx	lr
   1b12c:	ldr	r0, [pc, #992]	; 1b514 <__assert_fail@plt+0xa308>
   1b130:	bx	lr
   1b134:	ldr	r0, [pc, #988]	; 1b518 <__assert_fail@plt+0xa30c>
   1b138:	bx	lr
   1b13c:	ldr	r0, [pc, #984]	; 1b51c <__assert_fail@plt+0xa310>
   1b140:	bx	lr
   1b144:	ldr	r0, [pc, #980]	; 1b520 <__assert_fail@plt+0xa314>
   1b148:	bx	lr
   1b14c:	ldr	r0, [pc, #976]	; 1b524 <__assert_fail@plt+0xa318>
   1b150:	bx	lr
   1b154:	ldr	r0, [pc, #972]	; 1b528 <__assert_fail@plt+0xa31c>
   1b158:	bx	lr
   1b15c:	ldr	r0, [pc, #968]	; 1b52c <__assert_fail@plt+0xa320>
   1b160:	bx	lr
   1b164:	ldr	r0, [pc, #964]	; 1b530 <__assert_fail@plt+0xa324>
   1b168:	bx	lr
   1b16c:	ldr	r0, [pc, #960]	; 1b534 <__assert_fail@plt+0xa328>
   1b170:	bx	lr
   1b174:	ldr	r0, [pc, #956]	; 1b538 <__assert_fail@plt+0xa32c>
   1b178:	bx	lr
   1b17c:	ldr	r0, [pc, #952]	; 1b53c <__assert_fail@plt+0xa330>
   1b180:	bx	lr
   1b184:	ldr	r0, [pc, #948]	; 1b540 <__assert_fail@plt+0xa334>
   1b188:	bx	lr
   1b18c:	ldr	r0, [pc, #944]	; 1b544 <__assert_fail@plt+0xa338>
   1b190:	bx	lr
   1b194:	ldr	r0, [pc, #940]	; 1b548 <__assert_fail@plt+0xa33c>
   1b198:	bx	lr
   1b19c:	ldr	r0, [pc, #936]	; 1b54c <__assert_fail@plt+0xa340>
   1b1a0:	bx	lr
   1b1a4:	ldr	r0, [pc, #932]	; 1b550 <__assert_fail@plt+0xa344>
   1b1a8:	bx	lr
   1b1ac:	ldr	r0, [pc, #928]	; 1b554 <__assert_fail@plt+0xa348>
   1b1b0:	bx	lr
   1b1b4:	ldr	r0, [pc, #924]	; 1b558 <__assert_fail@plt+0xa34c>
   1b1b8:	bx	lr
   1b1bc:	ldr	r0, [pc, #920]	; 1b55c <__assert_fail@plt+0xa350>
   1b1c0:	bx	lr
   1b1c4:	ldr	r0, [pc, #916]	; 1b560 <__assert_fail@plt+0xa354>
   1b1c8:	bx	lr
   1b1cc:	ldr	r0, [pc, #912]	; 1b564 <__assert_fail@plt+0xa358>
   1b1d0:	bx	lr
   1b1d4:	ldr	r0, [pc, #908]	; 1b568 <__assert_fail@plt+0xa35c>
   1b1d8:	bx	lr
   1b1dc:	ldr	r0, [pc, #904]	; 1b56c <__assert_fail@plt+0xa360>
   1b1e0:	bx	lr
   1b1e4:	ldr	r0, [pc, #900]	; 1b570 <__assert_fail@plt+0xa364>
   1b1e8:	bx	lr
   1b1ec:	ldr	r0, [pc, #896]	; 1b574 <__assert_fail@plt+0xa368>
   1b1f0:	bx	lr
   1b1f4:	ldr	r0, [pc, #892]	; 1b578 <__assert_fail@plt+0xa36c>
   1b1f8:	bx	lr
   1b1fc:	ldr	r0, [pc, #888]	; 1b57c <__assert_fail@plt+0xa370>
   1b200:	bx	lr
   1b204:	ldr	r0, [pc, #884]	; 1b580 <__assert_fail@plt+0xa374>
   1b208:	bx	lr
   1b20c:	ldr	r0, [pc, #880]	; 1b584 <__assert_fail@plt+0xa378>
   1b210:	bx	lr
   1b214:	ldr	r0, [pc, #876]	; 1b588 <__assert_fail@plt+0xa37c>
   1b218:	bx	lr
   1b21c:	ldr	r0, [pc, #872]	; 1b58c <__assert_fail@plt+0xa380>
   1b220:	bx	lr
   1b224:	ldr	r0, [pc, #868]	; 1b590 <__assert_fail@plt+0xa384>
   1b228:	bx	lr
   1b22c:	add	r3, r2, #-1879048192	; 0x90000000
   1b230:	cmn	r3, #-268435455	; 0xf0000001
   1b234:	push	{r4, lr}
   1b238:	mov	r4, r2
   1b23c:	ldrh	r2, [r1]
   1b240:	bhi	1b330 <__assert_fail@plt+0xa124>
   1b244:	cmp	r2, #43	; 0x2b
   1b248:	beq	1b3c0 <__assert_fail@plt+0xa1b4>
   1b24c:	bls	1b2a8 <__assert_fail@plt+0xa09c>
   1b250:	cmp	r2, #135	; 0x87
   1b254:	beq	1b3dc <__assert_fail@plt+0xa1d0>
   1b258:	bhi	1b284 <__assert_fail@plt+0xa078>
   1b25c:	cmp	r2, #50	; 0x32
   1b260:	beq	1b3d0 <__assert_fail@plt+0xa1c4>
   1b264:	cmp	r2, #113	; 0x71
   1b268:	bne	1b434 <__assert_fail@plt+0xa228>
   1b26c:	cmp	r4, #1879048194	; 0x70000002
   1b270:	bne	1b2e0 <__assert_fail@plt+0xa0d4>
   1b274:	ldr	r0, [pc, #792]	; 1b594 <__assert_fail@plt+0xa388>
   1b278:	pop	{r4, pc}
   1b27c:	ldr	r0, [pc, #788]	; 1b598 <__assert_fail@plt+0xa38c>
   1b280:	bx	lr
   1b284:	cmp	r2, #140	; 0x8c
   1b288:	beq	1b3f8 <__assert_fail@plt+0xa1ec>
   1b28c:	ldr	r3, [pc, #776]	; 1b59c <__assert_fail@plt+0xa390>
   1b290:	cmp	r2, r3
   1b294:	bne	1b434 <__assert_fail@plt+0xa228>
   1b298:	cmp	r4, #1879048192	; 0x70000000
   1b29c:	bne	1b2e0 <__assert_fail@plt+0xa0d4>
   1b2a0:	ldr	r0, [pc, #760]	; 1b5a0 <__assert_fail@plt+0xa394>
   1b2a4:	pop	{r4, pc}
   1b2a8:	cmp	r2, #10
   1b2ac:	beq	1b314 <__assert_fail@plt+0xa108>
   1b2b0:	bls	1b30c <__assert_fail@plt+0xa100>
   1b2b4:	cmp	r2, #20
   1b2b8:	beq	1b44c <__assert_fail@plt+0xa240>
   1b2bc:	cmp	r2, #21
   1b2c0:	bne	1b434 <__assert_fail@plt+0xa228>
   1b2c4:	cmp	r3, #3
   1b2c8:	bhi	1b2e0 <__assert_fail@plt+0xa0d4>
   1b2cc:	ldr	r2, [pc, #720]	; 1b5a4 <__assert_fail@plt+0xa398>
   1b2d0:	add	r3, r2, r3, lsl #2
   1b2d4:	ldr	r0, [r3, #736]	; 0x2e0
   1b2d8:	cmp	r0, #0
   1b2dc:	popne	{r4, pc}
   1b2e0:	ldr	r1, [pc, #704]	; 1b5a8 <__assert_fail@plt+0xa39c>
   1b2e4:	mov	r2, #5
   1b2e8:	mov	r0, #0
   1b2ec:	bl	10f90 <dcgettext@plt>
   1b2f0:	mov	r3, r4
   1b2f4:	mov	r1, #64	; 0x40
   1b2f8:	mov	r2, r0
   1b2fc:	ldr	r0, [pc, #680]	; 1b5ac <__assert_fail@plt+0xa3a0>
   1b300:	bl	110b0 <snprintf@plt>
   1b304:	ldr	r0, [pc, #672]	; 1b5ac <__assert_fail@plt+0xa3a0>
   1b308:	pop	{r4, pc}
   1b30c:	cmp	r2, #8
   1b310:	bne	1b434 <__assert_fail@plt+0xa228>
   1b314:	sub	r2, r4, #1879048193	; 0x70000001
   1b318:	cmp	r2, #52	; 0x34
   1b31c:	bhi	1b2e0 <__assert_fail@plt+0xa0d4>
   1b320:	ldr	r3, [pc, #636]	; 1b5a4 <__assert_fail@plt+0xa398>
   1b324:	add	r3, r3, r2, lsl #2
   1b328:	ldr	r0, [r3, #524]	; 0x20c
   1b32c:	b	1b2d8 <__assert_fail@plt+0xa0cc>
   1b330:	ldr	r3, [pc, #632]	; 1b5b0 <__assert_fail@plt+0xa3a4>
   1b334:	sub	r1, r4, #1610612749	; 0x6000000d
   1b338:	cmp	r1, r3
   1b33c:	bls	1b37c <__assert_fail@plt+0xa170>
   1b340:	cmp	r2, #15
   1b344:	bne	1b3a8 <__assert_fail@plt+0xa19c>
   1b348:	add	r3, r4, #-1610612736	; 0xa0000000
   1b34c:	cmn	r3, #-268435455	; 0xf0000001
   1b350:	bhi	1b3a8 <__assert_fail@plt+0xa19c>
   1b354:	cmp	r3, #23
   1b358:	bhi	1b370 <__assert_fail@plt+0xa164>
   1b35c:	ldr	r2, [pc, #576]	; 1b5a4 <__assert_fail@plt+0xa398>
   1b360:	add	r3, r2, r3, lsl #2
   1b364:	ldr	r0, [r3, #776]	; 0x308
   1b368:	cmp	r0, #0
   1b36c:	popne	{r4, pc}
   1b370:	mov	r2, #5
   1b374:	ldr	r1, [pc, #568]	; 1b5b4 <__assert_fail@plt+0xa3a8>
   1b378:	b	1b2e8 <__assert_fail@plt+0xa0dc>
   1b37c:	cmp	r2, #15
   1b380:	addeq	r3, r4, #-1610612736	; 0xa0000000
   1b384:	beq	1b354 <__assert_fail@plt+0xa148>
   1b388:	cmp	r2, #50	; 0x32
   1b38c:	beq	1b3b4 <__assert_fail@plt+0xa1a8>
   1b390:	ldrb	r3, [r0]
   1b394:	cmp	r3, #6
   1b398:	bne	1b370 <__assert_fail@plt+0xa164>
   1b39c:	mov	r0, r4
   1b3a0:	bl	12784 <__assert_fail@plt+0x1578>
   1b3a4:	b	1b368 <__assert_fail@plt+0xa15c>
   1b3a8:	mov	r2, #5
   1b3ac:	ldr	r1, [pc, #516]	; 1b5b8 <__assert_fail@plt+0xa3ac>
   1b3b0:	b	1b2e8 <__assert_fail@plt+0xa0dc>
   1b3b4:	mov	r0, r4
   1b3b8:	bl	12430 <__assert_fail@plt+0x1224>
   1b3bc:	b	1b368 <__assert_fail@plt+0xa15c>
   1b3c0:	cmp	r4, #1879048193	; 0x70000001
   1b3c4:	bne	1b2e0 <__assert_fail@plt+0xa0d4>
   1b3c8:	ldr	r0, [pc, #492]	; 1b5bc <__assert_fail@plt+0xa3b0>
   1b3cc:	pop	{r4, pc}
   1b3d0:	mov	r0, r4
   1b3d4:	bl	12430 <__assert_fail@plt+0x1224>
   1b3d8:	b	1b2d8 <__assert_fail@plt+0xa0cc>
   1b3dc:	sub	r2, r4, #1879048193	; 0x70000001
   1b3e0:	cmp	r2, #5
   1b3e4:	bhi	1b2e0 <__assert_fail@plt+0xa0d4>
   1b3e8:	ldr	r3, [pc, #436]	; 1b5a4 <__assert_fail@plt+0xa398>
   1b3ec:	add	r3, r3, r2, lsl #2
   1b3f0:	ldr	r0, [r3, #752]	; 0x2f0
   1b3f4:	b	1b2d8 <__assert_fail@plt+0xa0cc>
   1b3f8:	cmp	r3, #3
   1b3fc:	ldrls	pc, [pc, r3, lsl #2]
   1b400:	b	1b2e0 <__assert_fail@plt+0xa0d4>
   1b404:	andeq	fp, r1, r4, lsl r4
   1b408:	andeq	fp, r1, ip, lsr #8
   1b40c:	andeq	fp, r1, ip, lsl r4
   1b410:	andeq	fp, r1, r4, lsr #8
   1b414:	ldr	r0, [pc, #420]	; 1b5c0 <__assert_fail@plt+0xa3b4>
   1b418:	pop	{r4, pc}
   1b41c:	ldr	r0, [pc, #416]	; 1b5c4 <__assert_fail@plt+0xa3b8>
   1b420:	pop	{r4, pc}
   1b424:	ldr	r0, [pc, #412]	; 1b5c8 <__assert_fail@plt+0xa3bc>
   1b428:	pop	{r4, pc}
   1b42c:	ldr	r0, [pc, #408]	; 1b5cc <__assert_fail@plt+0xa3c0>
   1b430:	pop	{r4, pc}
   1b434:	ldrb	r3, [r0]
   1b438:	cmp	r3, #6
   1b43c:	bne	1b2e0 <__assert_fail@plt+0xa0d4>
   1b440:	mov	r0, r4
   1b444:	bl	12784 <__assert_fail@plt+0x1578>
   1b448:	b	1b2d8 <__assert_fail@plt+0xa0cc>
   1b44c:	cmp	r4, #1879048192	; 0x70000000
   1b450:	beq	1b464 <__assert_fail@plt+0xa258>
   1b454:	cmp	r4, #1879048193	; 0x70000001
   1b458:	bne	1b2e0 <__assert_fail@plt+0xa0d4>
   1b45c:	ldr	r0, [pc, #364]	; 1b5d0 <__assert_fail@plt+0xa3c4>
   1b460:	pop	{r4, pc}
   1b464:	ldr	r0, [pc, #360]	; 1b5d4 <__assert_fail@plt+0xa3c8>
   1b468:	pop	{r4, pc}
   1b46c:	svcvs	0x00fffef9
   1b470:	svcvs	0x00fffefd
   1b474:	svcvs	0x00fffeff
   1b478:	strdeq	r4, [r6], -ip
   1b47c:	ldrdeq	r4, [r6], -r8
   1b480:			; <UNDEFINED> instruction: 0x00064ab0
   1b484:	andeq	r4, r6, r8, lsr #19
   1b488:	strdeq	r4, [r6], -ip
   1b48c:	andeq	r4, r6, r4, lsr sl
   1b490:	andeq	r4, r6, r0, lsr #15
   1b494:	andeq	r4, r6, r4, ror r7
   1b498:	ldrdeq	r9, [r7], -r0
   1b49c:	muleq	r6, r4, ip
   1b4a0:	svcvs	0x00fffe00
   1b4a4:	svcvs	0x00fffef6
   1b4a8:	svcvs	0x00fffef7
   1b4ac:	andeq	r4, r6, r4, asr #22
   1b4b0:	andeq	r6, r6, r4, ror #22
   1b4b4:	muleq	r6, ip, r7
   1b4b8:	andeq	r4, r6, r4, lsl #21
   1b4bc:	andeq	r4, r6, r4, lsr fp
   1b4c0:	andeq	r4, r6, r8, lsr #22
   1b4c4:	andeq	r4, r6, r4, lsl fp
   1b4c8:	svcvs	0x00fffdfa
   1b4cc:	andeq	r4, r6, r0, ror #20
   1b4d0:	andeq	r0, r6, ip, lsl #25
   1b4d4:	andeq	r4, r6, r4, ror #21
   1b4d8:	andeq	r4, r6, r8, ror #19
   1b4dc:	andeq	r4, r6, ip, lsl #20
   1b4e0:	andeq	r4, r6, ip, lsr r7
   1b4e4:	andeq	r4, r6, ip, lsl #15
   1b4e8:	ldrdeq	sp, [r6], -ip
   1b4ec:			; <UNDEFINED> instruction: 0x000649b8
   1b4f0:	muleq	r6, r8, sl
   1b4f4:	strdeq	r4, [r6], -r8
   1b4f8:	andeq	r4, r6, r4, ror sl
   1b4fc:	andeq	r4, r6, ip, lsl fp
   1b500:	andeq	r4, r6, r4, ror #22
   1b504:	andeq	r4, r6, r4, asr #21
   1b508:	ldrdeq	r4, [r6], -r0
   1b50c:	ldrdeq	r4, [r6], -r8
   1b510:	ldrdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   1b514:	andeq	r4, r6, ip, ror #20
   1b518:	andeq	r4, r6, r8, asr #15
   1b51c:	andeq	r4, r6, r4, asr fp
   1b520:			; <UNDEFINED> instruction: 0x000649b0
   1b524:			; <UNDEFINED> instruction: 0x00064ab8
   1b528:	strdeq	r4, [r6], -r0
   1b52c:	strdeq	r5, [r6], -ip
   1b530:	andeq	r4, r6, r0, ror #19
   1b534:	andeq	r4, r6, r0, lsl #15
   1b538:	andeq	r4, r6, ip, lsr #20
   1b53c:	andeq	r4, r6, r4, asr #14
   1b540:			; <UNDEFINED> instruction: 0x00064bb8
   1b544:	muleq	r6, r0, sl
   1b548:	andeq	r0, r6, r0, lsl #25
   1b54c:	ldrdeq	r4, [r6], -ip
   1b550:	andeq	sp, r6, r0, ror #8
   1b554:	andeq	r4, r6, r8, asr #19
   1b558:	strdeq	r4, [r6], -r0
   1b55c:	andeq	sp, r6, ip, asr #13
   1b560:	andeq	r4, r6, r4, asr sl
   1b564:	andeq	r4, r6, r0, lsr #19
   1b568:	andeq	r4, r6, ip, lsl sl
   1b56c:	andeq	r4, r6, r0, asr #19
   1b570:	andeq	r4, r6, r4, lsr #21
   1b574:	ldrdeq	r4, [r6], -r0
   1b578:	andeq	r4, r6, ip, asr #21
   1b57c:	andeq	r4, r6, r0, lsl #20
   1b580:	andeq	r4, r7, r0, asr r6
   1b584:	andeq	r4, r6, ip, ror sl
   1b588:	andeq	r4, r6, r8, lsl #22
   1b58c:	andeq	ip, r7, r4, lsr #32
   1b590:	strdeq	r4, [r6], -ip
   1b594:	andeq	r4, r6, ip, lsr #23
   1b598:	andeq	r4, r6, r4, asr #20
   1b59c:	andeq	r9, r0, r6, lsr #32
   1b5a0:	andeq	r4, r6, r4, lsl #23
   1b5a4:	andeq	r8, r5, r4, ror #27
   1b5a8:	andeq	r4, r6, r0, asr #23
   1b5ac:	strdeq	sl, [r9], -r0
   1b5b0:	svceq	0x00ffeff3
   1b5b4:	ldrdeq	r4, [r6], -r8
   1b5b8:	strdeq	r4, [r6], -r8
   1b5bc:	andeq	r0, r6, r0, ror ip
   1b5c0:	andeq	r4, r6, r4, ror fp
   1b5c4:	andeq	r4, r6, r4, lsr r8
   1b5c8:	muleq	r6, r0, fp
   1b5cc:	muleq	r6, r0, r9
   1b5d0:	andeq	r4, r6, r4, lsr #23
   1b5d4:	andeq	r4, r6, r8, lsl #19
   1b5d8:	cmp	r1, #2
   1b5dc:	bhi	1b5f0 <__assert_fail@plt+0xa3e4>
   1b5e0:	ldr	r3, [pc, #140]	; 1b674 <__assert_fail@plt+0xa468>
   1b5e4:	add	r1, r3, r1, lsl #2
   1b5e8:	ldr	r0, [r1, #872]	; 0x368
   1b5ec:	bx	lr
   1b5f0:	sub	r3, r1, #13
   1b5f4:	cmp	r3, #2
   1b5f8:	push	{r4, lr}
   1b5fc:	mov	r4, r1
   1b600:	bls	1b654 <__assert_fail@plt+0xa448>
   1b604:	sub	r3, r1, #10
   1b608:	cmp	r3, #2
   1b60c:	bhi	1b660 <__assert_fail@plt+0xa454>
   1b610:	cmp	r1, #10
   1b614:	bne	1b628 <__assert_fail@plt+0xa41c>
   1b618:	ldrb	r3, [r0]
   1b61c:	cmp	r3, #0
   1b620:	cmpne	r3, #3
   1b624:	beq	1b66c <__assert_fail@plt+0xa460>
   1b628:	ldr	r1, [pc, #72]	; 1b678 <__assert_fail@plt+0xa46c>
   1b62c:	mov	r2, #5
   1b630:	mov	r0, #0
   1b634:	bl	10f90 <dcgettext@plt>
   1b638:	mov	r3, r4
   1b63c:	mov	r1, #32
   1b640:	mov	r2, r0
   1b644:	ldr	r0, [pc, #48]	; 1b67c <__assert_fail@plt+0xa470>
   1b648:	bl	110b0 <snprintf@plt>
   1b64c:	ldr	r0, [pc, #40]	; 1b67c <__assert_fail@plt+0xa470>
   1b650:	pop	{r4, pc}
   1b654:	mov	r2, #5
   1b658:	ldr	r1, [pc, #32]	; 1b680 <__assert_fail@plt+0xa474>
   1b65c:	b	1b630 <__assert_fail@plt+0xa424>
   1b660:	mov	r2, #5
   1b664:	ldr	r1, [pc, #24]	; 1b684 <__assert_fail@plt+0xa478>
   1b668:	b	1b630 <__assert_fail@plt+0xa424>
   1b66c:	ldr	r0, [pc, #20]	; 1b688 <__assert_fail@plt+0xa47c>
   1b670:	pop	{r4, pc}
   1b674:	andeq	r8, r5, r4, ror #27
   1b678:	andeq	r4, r6, r8, lsl #10
   1b67c:	andeq	sl, r9, r0, lsr r8
   1b680:	andeq	r4, r6, ip, ror #9
   1b684:	andeq	r4, r6, ip, lsl r5
   1b688:	andeq	r4, r6, r8, lsl #24
   1b68c:	cmp	r0, #4
   1b690:	beq	1b6dc <__assert_fail@plt+0xa4d0>
   1b694:	cmp	r1, #2
   1b698:	beq	1ba38 <__assert_fail@plt+0xa82c>
   1b69c:	bls	1b6c4 <__assert_fail@plt+0xa4b8>
   1b6a0:	cmp	r1, #256	; 0x100
   1b6a4:	beq	1ba28 <__assert_fail@plt+0xa81c>
   1b6a8:	ldr	r3, [pc, #1464]	; 1bc68 <__assert_fail@plt+0xaa5c>
   1b6ac:	cmp	r1, r3
   1b6b0:	bne	1b744 <__assert_fail@plt+0xa538>
   1b6b4:	mov	r2, #5
   1b6b8:	ldr	r1, [pc, #1452]	; 1bc6c <__assert_fail@plt+0xaa60>
   1b6bc:	mov	r0, #0
   1b6c0:	b	10f90 <dcgettext@plt>
   1b6c4:	cmp	r1, #1
   1b6c8:	bne	1b744 <__assert_fail@plt+0xa538>
   1b6cc:	mov	r2, #5
   1b6d0:	ldr	r1, [pc, #1432]	; 1bc70 <__assert_fail@plt+0xaa64>
   1b6d4:	mov	r0, #0
   1b6d8:	b	10f90 <dcgettext@plt>
   1b6dc:	ldr	r3, [pc, #1424]	; 1bc74 <__assert_fail@plt+0xaa68>
   1b6e0:	cmp	r1, r3
   1b6e4:	beq	1bb58 <__assert_fail@plt+0xa94c>
   1b6e8:	bls	1b778 <__assert_fail@plt+0xa56c>
   1b6ec:	ldr	r3, [pc, #1412]	; 1bc78 <__assert_fail@plt+0xaa6c>
   1b6f0:	cmp	r1, r3
   1b6f4:	beq	1bb68 <__assert_fail@plt+0xa95c>
   1b6f8:	bls	1b864 <__assert_fail@plt+0xa658>
   1b6fc:	cmp	r1, #1024	; 0x400
   1b700:	beq	1bb78 <__assert_fail@plt+0xa96c>
   1b704:	bls	1b928 <__assert_fail@plt+0xa71c>
   1b708:	ldr	r3, [pc, #1388]	; 1bc7c <__assert_fail@plt+0xaa70>
   1b70c:	cmp	r1, r3
   1b710:	beq	1bbe8 <__assert_fail@plt+0xa9dc>
   1b714:	bls	1ba00 <__assert_fail@plt+0xa7f4>
   1b718:	ldr	r3, [pc, #1376]	; 1bc80 <__assert_fail@plt+0xaa74>
   1b71c:	cmp	r1, r3
   1b720:	beq	1bbf8 <__assert_fail@plt+0xa9ec>
   1b724:	ldr	r3, [pc, #1368]	; 1bc84 <__assert_fail@plt+0xaa78>
   1b728:	cmp	r1, r3
   1b72c:	beq	1baf8 <__assert_fail@plt+0xa8ec>
   1b730:	add	r3, r3, #-218103808	; 0xf3000000
   1b734:	add	r3, r3, #1264	; 0x4f0
   1b738:	add	r3, r3, #12
   1b73c:	cmp	r1, r3
   1b740:	beq	1bb08 <__assert_fail@plt+0xa8fc>
   1b744:	push	{r4, lr}
   1b748:	mov	r2, #5
   1b74c:	mov	r4, r1
   1b750:	mov	r0, #0
   1b754:	ldr	r1, [pc, #1324]	; 1bc88 <__assert_fail@plt+0xaa7c>
   1b758:	bl	10f90 <dcgettext@plt>
   1b75c:	mov	r3, r4
   1b760:	mov	r1, #64	; 0x40
   1b764:	mov	r2, r0
   1b768:	ldr	r0, [pc, #1308]	; 1bc8c <__assert_fail@plt+0xaa80>
   1b76c:	bl	110b0 <snprintf@plt>
   1b770:	ldr	r0, [pc, #1300]	; 1bc8c <__assert_fail@plt+0xaa80>
   1b774:	pop	{r4, pc}
   1b778:	cmp	r1, #256	; 0x100
   1b77c:	beq	1bc08 <__assert_fail@plt+0xa9fc>
   1b780:	bls	1b7c0 <__assert_fail@plt+0xa5b4>
   1b784:	ldr	r3, [pc, #1284]	; 1bc90 <__assert_fail@plt+0xaa84>
   1b788:	cmp	r1, r3
   1b78c:	beq	1bc18 <__assert_fail@plt+0xaa0c>
   1b790:	bls	1b980 <__assert_fail@plt+0xa774>
   1b794:	ldr	r3, [pc, #1272]	; 1bc94 <__assert_fail@plt+0xaa88>
   1b798:	cmp	r1, r3
   1b79c:	beq	1bc28 <__assert_fail@plt+0xaa1c>
   1b7a0:	bls	1b9dc <__assert_fail@plt+0xa7d0>
   1b7a4:	cmp	r1, #268	; 0x10c
   1b7a8:	beq	1bc38 <__assert_fail@plt+0xaa2c>
   1b7ac:	bhi	1bb48 <__assert_fail@plt+0xa93c>
   1b7b0:	mov	r2, #5
   1b7b4:	ldr	r1, [pc, #1244]	; 1bc98 <__assert_fail@plt+0xaa8c>
   1b7b8:	mov	r0, #0
   1b7bc:	b	10f90 <dcgettext@plt>
   1b7c0:	cmp	r1, #10
   1b7c4:	beq	1bb88 <__assert_fail@plt+0xa97c>
   1b7c8:	bls	1b818 <__assert_fail@plt+0xa60c>
   1b7cc:	cmp	r1, #16
   1b7d0:	beq	1bb98 <__assert_fail@plt+0xa98c>
   1b7d4:	bls	1b7f8 <__assert_fail@plt+0xa5ec>
   1b7d8:	cmp	r1, #17
   1b7dc:	beq	1ba48 <__assert_fail@plt+0xa83c>
   1b7e0:	cmp	r1, #18
   1b7e4:	bne	1b744 <__assert_fail@plt+0xa538>
   1b7e8:	mov	r2, #5
   1b7ec:	ldr	r1, [pc, #1192]	; 1bc9c <__assert_fail@plt+0xaa90>
   1b7f0:	mov	r0, #0
   1b7f4:	b	10f90 <dcgettext@plt>
   1b7f8:	cmp	r1, #12
   1b7fc:	beq	1ba58 <__assert_fail@plt+0xa84c>
   1b800:	cmp	r1, #13
   1b804:	bne	1b744 <__assert_fail@plt+0xa538>
   1b808:	mov	r2, #5
   1b80c:	ldr	r1, [pc, #1164]	; 1bca0 <__assert_fail@plt+0xaa94>
   1b810:	mov	r0, #0
   1b814:	b	10f90 <dcgettext@plt>
   1b818:	cmp	r1, #3
   1b81c:	beq	1bba8 <__assert_fail@plt+0xa99c>
   1b820:	bls	1b844 <__assert_fail@plt+0xa638>
   1b824:	cmp	r1, #4
   1b828:	beq	1ba68 <__assert_fail@plt+0xa85c>
   1b82c:	cmp	r1, #6
   1b830:	bne	1b744 <__assert_fail@plt+0xa538>
   1b834:	mov	r2, #5
   1b838:	ldr	r1, [pc, #1124]	; 1bca4 <__assert_fail@plt+0xaa98>
   1b83c:	mov	r0, #0
   1b840:	b	10f90 <dcgettext@plt>
   1b844:	cmp	r1, #1
   1b848:	beq	1ba78 <__assert_fail@plt+0xa86c>
   1b84c:	cmp	r1, #2
   1b850:	bne	1b744 <__assert_fail@plt+0xa538>
   1b854:	mov	r2, #5
   1b858:	ldr	r1, [pc, #1096]	; 1bca8 <__assert_fail@plt+0xaa9c>
   1b85c:	mov	r0, #0
   1b860:	b	10f90 <dcgettext@plt>
   1b864:	sub	r3, r3, #6
   1b868:	cmp	r1, r3
   1b86c:	beq	1bbb8 <__assert_fail@plt+0xa9ac>
   1b870:	bls	1b8d0 <__assert_fail@plt+0xa6c4>
   1b874:	cmp	r1, #772	; 0x304
   1b878:	beq	1bc48 <__assert_fail@plt+0xaa3c>
   1b87c:	bls	1b8a8 <__assert_fail@plt+0xa69c>
   1b880:	ldr	r3, [pc, #1060]	; 1bcac <__assert_fail@plt+0xaaa0>
   1b884:	cmp	r1, r3
   1b888:	beq	1ba88 <__assert_fail@plt+0xa87c>
   1b88c:	add	r3, r3, #1
   1b890:	cmp	r1, r3
   1b894:	bne	1b744 <__assert_fail@plt+0xa538>
   1b898:	mov	r2, #5
   1b89c:	ldr	r1, [pc, #1036]	; 1bcb0 <__assert_fail@plt+0xaaa4>
   1b8a0:	mov	r0, #0
   1b8a4:	b	10f90 <dcgettext@plt>
   1b8a8:	ldr	r3, [pc, #1028]	; 1bcb4 <__assert_fail@plt+0xaaa8>
   1b8ac:	cmp	r1, r3
   1b8b0:	beq	1ba98 <__assert_fail@plt+0xa88c>
   1b8b4:	add	r3, r3, #1
   1b8b8:	cmp	r1, r3
   1b8bc:	bne	1b744 <__assert_fail@plt+0xa538>
   1b8c0:	mov	r2, #5
   1b8c4:	ldr	r1, [pc, #1004]	; 1bcb8 <__assert_fail@plt+0xaaac>
   1b8c8:	mov	r0, #0
   1b8cc:	b	10f90 <dcgettext@plt>
   1b8d0:	sub	r3, r3, #256	; 0x100
   1b8d4:	cmp	r1, r3
   1b8d8:	beq	1bc58 <__assert_fail@plt+0xaa4c>
   1b8dc:	bls	1b904 <__assert_fail@plt+0xa6f8>
   1b8e0:	ldr	r3, [pc, #980]	; 1bcbc <__assert_fail@plt+0xaab0>
   1b8e4:	cmp	r1, r3
   1b8e8:	beq	1baa8 <__assert_fail@plt+0xa89c>
   1b8ec:	cmp	r1, #768	; 0x300
   1b8f0:	bne	1b744 <__assert_fail@plt+0xa538>
   1b8f4:	mov	r2, #5
   1b8f8:	ldr	r1, [pc, #960]	; 1bcc0 <__assert_fail@plt+0xaab4>
   1b8fc:	mov	r0, #0
   1b900:	b	10f90 <dcgettext@plt>
   1b904:	sub	r3, r3, #242	; 0xf2
   1b908:	cmp	r1, r3
   1b90c:	beq	1bab8 <__assert_fail@plt+0xa8ac>
   1b910:	cmp	r1, #512	; 0x200
   1b914:	bne	1b744 <__assert_fail@plt+0xa538>
   1b918:	mov	r2, #5
   1b91c:	ldr	r1, [pc, #928]	; 1bcc4 <__assert_fail@plt+0xaab8>
   1b920:	mov	r0, #0
   1b924:	b	10f90 <dcgettext@plt>
   1b928:	ldr	r3, [pc, #920]	; 1bcc8 <__assert_fail@plt+0xaabc>
   1b92c:	cmp	r1, r3
   1b930:	beq	1bbc8 <__assert_fail@plt+0xa9bc>
   1b934:	bls	1b95c <__assert_fail@plt+0xa750>
   1b938:	ldr	r3, [pc, #908]	; 1bccc <__assert_fail@plt+0xaac0>
   1b93c:	cmp	r1, r3
   1b940:	beq	1bac8 <__assert_fail@plt+0xa8bc>
   1b944:	cmp	r1, #780	; 0x30c
   1b948:	bne	1b744 <__assert_fail@plt+0xa538>
   1b94c:	mov	r2, #5
   1b950:	ldr	r1, [pc, #888]	; 1bcd0 <__assert_fail@plt+0xaac4>
   1b954:	mov	r0, #0
   1b958:	b	10f90 <dcgettext@plt>
   1b95c:	cmp	r1, #776	; 0x308
   1b960:	beq	1bb18 <__assert_fail@plt+0xa90c>
   1b964:	sub	r3, r3, #1
   1b968:	cmp	r1, r3
   1b96c:	bne	1b744 <__assert_fail@plt+0xa538>
   1b970:	mov	r2, #5
   1b974:	ldr	r1, [pc, #856]	; 1bcd4 <__assert_fail@plt+0xaac8>
   1b978:	mov	r0, #0
   1b97c:	b	10f90 <dcgettext@plt>
   1b980:	cmp	r1, #260	; 0x104
   1b984:	beq	1bbd8 <__assert_fail@plt+0xa9cc>
   1b988:	bls	1b9b4 <__assert_fail@plt+0xa7a8>
   1b98c:	ldr	r3, [pc, #836]	; 1bcd8 <__assert_fail@plt+0xaacc>
   1b990:	cmp	r1, r3
   1b994:	beq	1bb28 <__assert_fail@plt+0xa91c>
   1b998:	add	r3, r3, #1
   1b99c:	cmp	r1, r3
   1b9a0:	bne	1b744 <__assert_fail@plt+0xa538>
   1b9a4:	mov	r2, #5
   1b9a8:	ldr	r1, [pc, #812]	; 1bcdc <__assert_fail@plt+0xaad0>
   1b9ac:	mov	r0, #0
   1b9b0:	b	10f90 <dcgettext@plt>
   1b9b4:	sub	r3, r3, #5
   1b9b8:	cmp	r1, r3
   1b9bc:	beq	1bb38 <__assert_fail@plt+0xa92c>
   1b9c0:	add	r3, r3, #1
   1b9c4:	cmp	r1, r3
   1b9c8:	bne	1b744 <__assert_fail@plt+0xa538>
   1b9cc:	mov	r2, #5
   1b9d0:	ldr	r1, [pc, #776]	; 1bce0 <__assert_fail@plt+0xaad4>
   1b9d4:	mov	r0, #0
   1b9d8:	b	10f90 <dcgettext@plt>
   1b9dc:	cmp	r1, #264	; 0x108
   1b9e0:	beq	1bad8 <__assert_fail@plt+0xa8cc>
   1b9e4:	sub	r3, r3, #1
   1b9e8:	cmp	r1, r3
   1b9ec:	bne	1b744 <__assert_fail@plt+0xa538>
   1b9f0:	mov	r2, #5
   1b9f4:	ldr	r1, [pc, #744]	; 1bce4 <__assert_fail@plt+0xaad8>
   1b9f8:	mov	r0, #0
   1b9fc:	b	10f90 <dcgettext@plt>
   1ba00:	sub	r3, r3, #2
   1ba04:	cmp	r1, r3
   1ba08:	beq	1bae8 <__assert_fail@plt+0xa8dc>
   1ba0c:	add	r3, r3, #1
   1ba10:	cmp	r1, r3
   1ba14:	bne	1b744 <__assert_fail@plt+0xa538>
   1ba18:	mov	r2, #5
   1ba1c:	ldr	r1, [pc, #708]	; 1bce8 <__assert_fail@plt+0xaadc>
   1ba20:	mov	r0, #0
   1ba24:	b	10f90 <dcgettext@plt>
   1ba28:	mov	r2, #5
   1ba2c:	ldr	r1, [pc, #696]	; 1bcec <__assert_fail@plt+0xaae0>
   1ba30:	mov	r0, #0
   1ba34:	b	10f90 <dcgettext@plt>
   1ba38:	mov	r2, #5
   1ba3c:	ldr	r1, [pc, #684]	; 1bcf0 <__assert_fail@plt+0xaae4>
   1ba40:	mov	r0, #0
   1ba44:	b	10f90 <dcgettext@plt>
   1ba48:	mov	r2, #5
   1ba4c:	ldr	r1, [pc, #672]	; 1bcf4 <__assert_fail@plt+0xaae8>
   1ba50:	mov	r0, #0
   1ba54:	b	10f90 <dcgettext@plt>
   1ba58:	mov	r2, #5
   1ba5c:	ldr	r1, [pc, #660]	; 1bcf8 <__assert_fail@plt+0xaaec>
   1ba60:	mov	r0, #0
   1ba64:	b	10f90 <dcgettext@plt>
   1ba68:	mov	r2, #5
   1ba6c:	ldr	r1, [pc, #648]	; 1bcfc <__assert_fail@plt+0xaaf0>
   1ba70:	mov	r0, #0
   1ba74:	b	10f90 <dcgettext@plt>
   1ba78:	mov	r2, #5
   1ba7c:	ldr	r1, [pc, #636]	; 1bd00 <__assert_fail@plt+0xaaf4>
   1ba80:	mov	r0, #0
   1ba84:	b	10f90 <dcgettext@plt>
   1ba88:	mov	r2, #5
   1ba8c:	ldr	r1, [pc, #624]	; 1bd04 <__assert_fail@plt+0xaaf8>
   1ba90:	mov	r0, #0
   1ba94:	b	10f90 <dcgettext@plt>
   1ba98:	mov	r2, #5
   1ba9c:	ldr	r1, [pc, #612]	; 1bd08 <__assert_fail@plt+0xaafc>
   1baa0:	mov	r0, #0
   1baa4:	b	10f90 <dcgettext@plt>
   1baa8:	mov	r2, #5
   1baac:	ldr	r1, [pc, #600]	; 1bd0c <__assert_fail@plt+0xab00>
   1bab0:	mov	r0, #0
   1bab4:	b	10f90 <dcgettext@plt>
   1bab8:	mov	r2, #5
   1babc:	ldr	r1, [pc, #588]	; 1bd10 <__assert_fail@plt+0xab04>
   1bac0:	mov	r0, #0
   1bac4:	b	10f90 <dcgettext@plt>
   1bac8:	mov	r2, #5
   1bacc:	ldr	r1, [pc, #576]	; 1bd14 <__assert_fail@plt+0xab08>
   1bad0:	mov	r0, #0
   1bad4:	b	10f90 <dcgettext@plt>
   1bad8:	mov	r2, #5
   1badc:	ldr	r1, [pc, #564]	; 1bd18 <__assert_fail@plt+0xab0c>
   1bae0:	mov	r0, #0
   1bae4:	b	10f90 <dcgettext@plt>
   1bae8:	mov	r2, #5
   1baec:	ldr	r1, [pc, #552]	; 1bd1c <__assert_fail@plt+0xab10>
   1baf0:	mov	r0, #0
   1baf4:	b	10f90 <dcgettext@plt>
   1baf8:	mov	r2, #5
   1bafc:	ldr	r1, [pc, #540]	; 1bd20 <__assert_fail@plt+0xab14>
   1bb00:	mov	r0, #0
   1bb04:	b	10f90 <dcgettext@plt>
   1bb08:	mov	r2, #5
   1bb0c:	ldr	r1, [pc, #528]	; 1bd24 <__assert_fail@plt+0xab18>
   1bb10:	mov	r0, #0
   1bb14:	b	10f90 <dcgettext@plt>
   1bb18:	mov	r2, #5
   1bb1c:	ldr	r1, [pc, #516]	; 1bd28 <__assert_fail@plt+0xab1c>
   1bb20:	mov	r0, #0
   1bb24:	b	10f90 <dcgettext@plt>
   1bb28:	mov	r2, #5
   1bb2c:	ldr	r1, [pc, #504]	; 1bd2c <__assert_fail@plt+0xab20>
   1bb30:	mov	r0, #0
   1bb34:	b	10f90 <dcgettext@plt>
   1bb38:	mov	r2, #5
   1bb3c:	ldr	r1, [pc, #492]	; 1bd30 <__assert_fail@plt+0xab24>
   1bb40:	mov	r0, #0
   1bb44:	b	10f90 <dcgettext@plt>
   1bb48:	mov	r2, #5
   1bb4c:	ldr	r1, [pc, #480]	; 1bd34 <__assert_fail@plt+0xab28>
   1bb50:	mov	r0, #0
   1bb54:	b	10f90 <dcgettext@plt>
   1bb58:	mov	r2, #5
   1bb5c:	ldr	r1, [pc, #468]	; 1bd38 <__assert_fail@plt+0xab2c>
   1bb60:	mov	r0, #0
   1bb64:	b	10f90 <dcgettext@plt>
   1bb68:	mov	r2, #5
   1bb6c:	ldr	r1, [pc, #456]	; 1bd3c <__assert_fail@plt+0xab30>
   1bb70:	mov	r0, #0
   1bb74:	b	10f90 <dcgettext@plt>
   1bb78:	mov	r2, #5
   1bb7c:	ldr	r1, [pc, #444]	; 1bd40 <__assert_fail@plt+0xab34>
   1bb80:	mov	r0, #0
   1bb84:	b	10f90 <dcgettext@plt>
   1bb88:	mov	r2, #5
   1bb8c:	ldr	r1, [pc, #432]	; 1bd44 <__assert_fail@plt+0xab38>
   1bb90:	mov	r0, #0
   1bb94:	b	10f90 <dcgettext@plt>
   1bb98:	mov	r2, #5
   1bb9c:	ldr	r1, [pc, #420]	; 1bd48 <__assert_fail@plt+0xab3c>
   1bba0:	mov	r0, #0
   1bba4:	b	10f90 <dcgettext@plt>
   1bba8:	mov	r2, #5
   1bbac:	ldr	r1, [pc, #408]	; 1bd4c <__assert_fail@plt+0xab40>
   1bbb0:	mov	r0, #0
   1bbb4:	b	10f90 <dcgettext@plt>
   1bbb8:	mov	r2, #5
   1bbbc:	ldr	r1, [pc, #396]	; 1bd50 <__assert_fail@plt+0xab44>
   1bbc0:	mov	r0, #0
   1bbc4:	b	10f90 <dcgettext@plt>
   1bbc8:	mov	r2, #5
   1bbcc:	ldr	r1, [pc, #384]	; 1bd54 <__assert_fail@plt+0xab48>
   1bbd0:	mov	r0, #0
   1bbd4:	b	10f90 <dcgettext@plt>
   1bbd8:	mov	r2, #5
   1bbdc:	ldr	r1, [pc, #372]	; 1bd58 <__assert_fail@plt+0xab4c>
   1bbe0:	mov	r0, #0
   1bbe4:	b	10f90 <dcgettext@plt>
   1bbe8:	mov	r2, #5
   1bbec:	ldr	r1, [pc, #360]	; 1bd5c <__assert_fail@plt+0xab50>
   1bbf0:	mov	r0, #0
   1bbf4:	b	10f90 <dcgettext@plt>
   1bbf8:	mov	r2, #5
   1bbfc:	ldr	r1, [pc, #348]	; 1bd60 <__assert_fail@plt+0xab54>
   1bc00:	mov	r0, #0
   1bc04:	b	10f90 <dcgettext@plt>
   1bc08:	mov	r2, #5
   1bc0c:	ldr	r1, [pc, #336]	; 1bd64 <__assert_fail@plt+0xab58>
   1bc10:	mov	r0, #0
   1bc14:	b	10f90 <dcgettext@plt>
   1bc18:	mov	r2, #5
   1bc1c:	ldr	r1, [pc, #324]	; 1bd68 <__assert_fail@plt+0xab5c>
   1bc20:	mov	r0, #0
   1bc24:	b	10f90 <dcgettext@plt>
   1bc28:	mov	r2, #5
   1bc2c:	ldr	r1, [pc, #312]	; 1bd6c <__assert_fail@plt+0xab60>
   1bc30:	mov	r0, #0
   1bc34:	b	10f90 <dcgettext@plt>
   1bc38:	mov	r2, #5
   1bc3c:	ldr	r1, [pc, #300]	; 1bd70 <__assert_fail@plt+0xab64>
   1bc40:	mov	r0, #0
   1bc44:	b	10f90 <dcgettext@plt>
   1bc48:	mov	r2, #5
   1bc4c:	ldr	r1, [pc, #288]	; 1bd74 <__assert_fail@plt+0xab68>
   1bc50:	mov	r0, #0
   1bc54:	b	10f90 <dcgettext@plt>
   1bc58:	mov	r2, #5
   1bc5c:	ldr	r1, [pc, #276]	; 1bd78 <__assert_fail@plt+0xab6c>
   1bc60:	mov	r0, #0
   1bc64:	b	10f90 <dcgettext@plt>
   1bc68:	andeq	r0, r0, r1, lsl #2
   1bc6c:	andeq	r5, r6, ip, asr #8
   1bc70:	andeq	r5, r6, r4, lsl r4
   1bc74:	andeq	r0, r0, lr, lsl #2
   1bc78:	andeq	r0, r0, r7, lsl #6
   1bc7c:	andeq	r0, r0, r3, lsl #8
   1bc80:			; <UNDEFINED> instruction: 0x46e62b7f
   1bc84:	movtpl	r4, #38729	; 0x9749
   1bc88:	andeq	r5, r6, r4, asr r4
   1bc8c:	andeq	sl, r9, r0, asr r8
   1bc90:	andeq	r0, r0, r7, lsl #2
   1bc94:	andeq	r0, r0, sl, lsl #2
   1bc98:	andeq	r4, r6, r8, ror #28
   1bc9c:			; <UNDEFINED> instruction: 0x000653b4
   1bca0:	andeq	r5, r6, r8, asr #6
   1bca4:	andeq	r4, r6, r0, lsl ip
   1bca8:	andeq	r4, r6, r0, asr ip
   1bcac:	andeq	r0, r0, r5, lsl #6
   1bcb0:	ldrdeq	r5, [r6], -ip
   1bcb4:	andeq	r0, r0, r2, lsl #6
   1bcb8:	andeq	r5, r6, r8, asr r0
   1bcbc:	andeq	r0, r0, r2, lsl #4
   1bcc0:	ldrdeq	r4, [r6], -r4	; <UNPREDICTABLE>
   1bcc4:	andeq	r4, r6, r0, ror #30
   1bcc8:	andeq	r0, r0, sl, lsl #6
   1bccc:	andeq	r0, r0, fp, lsl #6
   1bcd0:	andeq	r5, r6, r4, lsl r2
   1bcd4:	andeq	r5, r6, r8, ror r1
   1bcd8:	andeq	r0, r0, r5, lsl #2
   1bcdc:	andeq	r4, r6, r8, lsl #27
   1bce0:	andeq	r4, r6, r8, lsr #26
   1bce4:	strdeq	r4, [r6], -r8
   1bce8:	muleq	r6, r0, r2
   1bcec:	andeq	r5, r6, r4, asr #8
   1bcf0:	andeq	r5, r6, ip, lsr #8
   1bcf4:	muleq	r6, r0, r3
   1bcf8:	andeq	r5, r6, r0, lsr #6
   1bcfc:	muleq	r6, ip, ip
   1bd00:	andeq	r4, r6, ip, lsr #24
   1bd04:	strheq	r5, [r6], -r4
   1bd08:	andeq	r5, r6, r8, lsr #32
   1bd0c:	andeq	r4, r6, r8, lsr #31
   1bd10:	andeq	r4, r6, ip, lsr #30
   1bd14:	andeq	r5, r6, r4, ror #3
   1bd18:	andeq	r4, r6, r8, asr #27
   1bd1c:	andeq	r5, r6, ip, ror #4
   1bd20:	andeq	r5, r6, r0, ror #7
   1bd24:	strdeq	r5, [r6], -ip
   1bd28:	andeq	r5, r6, r8, asr #2
   1bd2c:	andeq	r4, r6, r8, ror #26
   1bd30:	andeq	r4, r6, r8, lsl #26
   1bd34:	andeq	r4, r6, ip, asr #29
   1bd38:	strdeq	r4, [r6], -ip
   1bd3c:	andeq	r5, r6, r4, lsl r1
   1bd40:	andeq	r5, r6, ip, asr #4
   1bd44:	andeq	r5, r6, r0, lsl #6
   1bd48:	andeq	r5, r6, r8, ror #6
   1bd4c:	andeq	r4, r6, r8, ror ip
   1bd50:	andeq	r5, r6, r4
   1bd54:			; <UNDEFINED> instruction: 0x000651b4
   1bd58:	andeq	r4, r6, r8, asr #26
   1bd5c:	andeq	r5, r6, r8, asr #5
   1bd60:			; <UNDEFINED> instruction: 0x00064cbc
   1bd64:	andeq	r4, r6, r4, ror #25
   1bd68:	andeq	r4, r6, r8, lsr #27
   1bd6c:	andeq	r4, r6, r4, lsr lr
   1bd70:	muleq	r6, r8, lr
   1bd74:	andeq	r5, r6, ip, lsl #1
   1bd78:	andeq	r4, r6, r4, lsl #31
   1bd7c:	ldr	r3, [r0, #84]	; 0x54
   1bd80:	cmp	r3, #0
   1bd84:	beq	1be48 <__assert_fail@plt+0xac3c>
   1bd88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bd8c:	mov	r4, #0
   1bd90:	mov	r6, r1
   1bd94:	mov	sl, r0
   1bd98:	ldr	r7, [pc, #176]	; 1be50 <__assert_fail@plt+0xac44>
   1bd9c:	ldr	r9, [pc, #176]	; 1be54 <__assert_fail@plt+0xac48>
   1bda0:	ldr	r8, [pc, #176]	; 1be58 <__assert_fail@plt+0xac4c>
   1bda4:	mov	r5, r4
   1bda8:	b	1bdd0 <__assert_fail@plt+0xabc4>
   1bdac:	mov	r1, r6
   1bdb0:	bl	10f18 <strcmp@plt>
   1bdb4:	add	r5, r5, #1
   1bdb8:	cmp	r0, #0
   1bdbc:	beq	1be34 <__assert_fail@plt+0xac28>
   1bdc0:	ldr	r3, [sl, #84]	; 0x54
   1bdc4:	add	r4, r4, #72	; 0x48
   1bdc8:	cmp	r5, r3
   1bdcc:	bcs	1be40 <__assert_fail@plt+0xac34>
   1bdd0:	ldr	r0, [sl, #96]	; 0x60
   1bdd4:	adds	r0, r0, r4
   1bdd8:	beq	1be10 <__assert_fail@plt+0xac04>
   1bddc:	ldr	r3, [sl, #104]	; 0x68
   1bde0:	cmp	r3, #0
   1bde4:	beq	1be20 <__assert_fail@plt+0xac14>
   1bde8:	ldr	r2, [r0]
   1bdec:	ldr	r1, [sl, #108]	; 0x6c
   1bdf0:	add	r0, r3, r2
   1bdf4:	cmp	r2, r1
   1bdf8:	bcc	1bdac <__assert_fail@plt+0xaba0>
   1bdfc:	mov	r2, #5
   1be00:	mov	r1, r7
   1be04:	mov	r0, #0
   1be08:	bl	10f90 <dcgettext@plt>
   1be0c:	b	1bdac <__assert_fail@plt+0xaba0>
   1be10:	mov	r2, #5
   1be14:	mov	r1, r8
   1be18:	bl	10f90 <dcgettext@plt>
   1be1c:	b	1bdac <__assert_fail@plt+0xaba0>
   1be20:	mov	r0, r3
   1be24:	mov	r2, #5
   1be28:	mov	r1, r9
   1be2c:	bl	10f90 <dcgettext@plt>
   1be30:	b	1bdac <__assert_fail@plt+0xaba0>
   1be34:	ldr	r0, [sl, #96]	; 0x60
   1be38:	add	r0, r0, r4
   1be3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1be40:	mov	r0, #0
   1be44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1be48:	mov	r0, #0
   1be4c:	bx	lr
   1be50:	andeq	r3, r6, ip
   1be54:	muleq	r6, ip, r8
   1be58:	muleq	r6, r4, r8
   1be5c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be60:	ldr	fp, [r0, #96]	; 0x60
   1be64:	cmp	fp, #0
   1be68:	beq	1bf48 <__assert_fail@plt+0xad3c>
   1be6c:	cmp	r2, #0
   1be70:	mov	r5, r0
   1be74:	mov	r7, r1
   1be78:	mov	r6, r2
   1be7c:	beq	1bf38 <__assert_fail@plt+0xad2c>
   1be80:	ldr	r8, [pc, #200]	; 1bf50 <__assert_fail@plt+0xad44>
   1be84:	ldr	sl, [pc, #200]	; 1bf54 <__assert_fail@plt+0xad48>
   1be88:	ldr	r9, [pc, #200]	; 1bf58 <__assert_fail@plt+0xad4c>
   1be8c:	ldr	r3, [r6], #4
   1be90:	cmp	r3, #0
   1be94:	add	r4, r3, r3, lsl #3
   1be98:	beq	1bf30 <__assert_fail@plt+0xad24>
   1be9c:	ldr	r2, [r5, #84]	; 0x54
   1bea0:	lsl	r4, r4, #3
   1bea4:	cmp	r2, r3
   1bea8:	bls	1be8c <__assert_fail@plt+0xac80>
   1beac:	adds	r0, fp, r4
   1beb0:	beq	1bf04 <__assert_fail@plt+0xacf8>
   1beb4:	ldr	r3, [r5, #104]	; 0x68
   1beb8:	cmp	r3, #0
   1bebc:	beq	1bf18 <__assert_fail@plt+0xad0c>
   1bec0:	ldr	r2, [r0]
   1bec4:	ldr	r1, [r5, #108]	; 0x6c
   1bec8:	add	r0, r3, r2
   1becc:	cmp	r2, r1
   1bed0:	bcs	1beec <__assert_fail@plt+0xace0>
   1bed4:	mov	r1, r7
   1bed8:	bl	10f18 <strcmp@plt>
   1bedc:	cmp	r0, #0
   1bee0:	bne	1be8c <__assert_fail@plt+0xac80>
   1bee4:	add	r0, fp, r4
   1bee8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1beec:	mov	r2, #5
   1bef0:	mov	r1, r8
   1bef4:	mov	r0, #0
   1bef8:	bl	10f90 <dcgettext@plt>
   1befc:	ldr	fp, [r5, #96]	; 0x60
   1bf00:	b	1bed4 <__assert_fail@plt+0xacc8>
   1bf04:	mov	r2, #5
   1bf08:	mov	r1, r9
   1bf0c:	bl	10f90 <dcgettext@plt>
   1bf10:	ldr	fp, [r5, #96]	; 0x60
   1bf14:	b	1bed4 <__assert_fail@plt+0xacc8>
   1bf18:	mov	r0, r3
   1bf1c:	mov	r2, #5
   1bf20:	mov	r1, sl
   1bf24:	bl	10f90 <dcgettext@plt>
   1bf28:	ldr	fp, [r5, #96]	; 0x60
   1bf2c:	b	1bed4 <__assert_fail@plt+0xacc8>
   1bf30:	cmp	fp, #0
   1bf34:	beq	1bf48 <__assert_fail@plt+0xad3c>
   1bf38:	mov	r1, r7
   1bf3c:	mov	r0, r5
   1bf40:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf44:	b	1bd7c <__assert_fail@plt+0xab70>
   1bf48:	mov	r0, #0
   1bf4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf50:	andeq	r3, r6, ip
   1bf54:	muleq	r6, ip, r8
   1bf58:	muleq	r6, r4, r8
   1bf5c:	push	{r4, r5, r6, r7, lr}
   1bf60:	mov	r4, r0
   1bf64:	sub	sp, sp, #68	; 0x44
   1bf68:	add	r0, r0, #16
   1bf6c:	ldr	r3, [r4, #4]
   1bf70:	mov	r2, #1
   1bf74:	mov	r1, #16
   1bf78:	bl	10ffc <fread@plt>
   1bf7c:	cmp	r0, #1
   1bf80:	bne	1c128 <__assert_fail@plt+0xaf1c>
   1bf84:	ldrb	r3, [r4, #21]
   1bf88:	ldrb	r6, [r4, #20]
   1bf8c:	ldr	r5, [pc, #692]	; 1c248 <__assert_fail@plt+0xb03c>
   1bf90:	cmp	r3, #2
   1bf94:	ldr	r3, [pc, #688]	; 1c24c <__assert_fail@plt+0xb040>
   1bf98:	ldrne	r2, [pc, #688]	; 1c250 <__assert_fail@plt+0xb044>
   1bf9c:	ldreq	r2, [pc, #688]	; 1c254 <__assert_fail@plt+0xb048>
   1bfa0:	ldr	r7, [pc, #688]	; 1c258 <__assert_fail@plt+0xb04c>
   1bfa4:	ldrne	r1, [pc, #688]	; 1c25c <__assert_fail@plt+0xb050>
   1bfa8:	ldreq	r1, [pc, #688]	; 1c260 <__assert_fail@plt+0xb054>
   1bfac:	cmp	r6, #2
   1bfb0:	str	r2, [r3]
   1bfb4:	movne	r2, #1
   1bfb8:	moveq	r2, #0
   1bfbc:	str	r2, [r7]
   1bfc0:	str	r1, [r5]
   1bfc4:	ldr	r3, [r4, #4]
   1bfc8:	add	r0, sp, #16
   1bfcc:	mov	r2, #1
   1bfd0:	beq	1c118 <__assert_fail@plt+0xaf0c>
   1bfd4:	mov	r1, #36	; 0x24
   1bfd8:	bl	10ffc <fread@plt>
   1bfdc:	cmp	r0, #1
   1bfe0:	bne	1c128 <__assert_fail@plt+0xaf1c>
   1bfe4:	ldr	r3, [r5]
   1bfe8:	add	r0, sp, #16
   1bfec:	mov	r1, #2
   1bff0:	blx	r3
   1bff4:	ldr	r3, [r5]
   1bff8:	mov	r1, #2
   1bffc:	strh	r0, [r4, #64]	; 0x40
   1c000:	add	r0, sp, #18
   1c004:	blx	r3
   1c008:	ldr	r3, [r5]
   1c00c:	mov	r1, #4
   1c010:	strh	r0, [r4, #66]	; 0x42
   1c014:	add	r0, sp, #20
   1c018:	blx	r3
   1c01c:	ldr	r3, [r5]
   1c020:	mov	r1, #4
   1c024:	str	r0, [r4, #56]	; 0x38
   1c028:	add	r0, sp, #24
   1c02c:	blx	r3
   1c030:	ldr	r3, [r5]
   1c034:	strd	r0, [r4, #32]
   1c038:	mov	r1, #4
   1c03c:	add	r0, sp, #28
   1c040:	blx	r3
   1c044:	ldr	r3, [r5]
   1c048:	strd	r0, [r4, #40]	; 0x28
   1c04c:	mov	r1, #4
   1c050:	add	r0, sp, #32
   1c054:	blx	r3
   1c058:	ldr	r3, [r5]
   1c05c:	strd	r0, [r4, #48]	; 0x30
   1c060:	mov	r1, #4
   1c064:	add	r0, sp, #36	; 0x24
   1c068:	blx	r3
   1c06c:	ldr	r3, [r5]
   1c070:	mov	r1, #2
   1c074:	str	r0, [r4, #60]	; 0x3c
   1c078:	add	r0, sp, #40	; 0x28
   1c07c:	blx	r3
   1c080:	ldr	r3, [r5]
   1c084:	mov	r1, #2
   1c088:	str	r0, [r4, #68]	; 0x44
   1c08c:	add	r0, sp, #42	; 0x2a
   1c090:	blx	r3
   1c094:	ldr	r3, [r5]
   1c098:	mov	r1, #2
   1c09c:	str	r0, [r4, #72]	; 0x48
   1c0a0:	add	r0, sp, #44	; 0x2c
   1c0a4:	blx	r3
   1c0a8:	ldr	r3, [r5]
   1c0ac:	mov	r1, #2
   1c0b0:	str	r0, [r4, #76]	; 0x4c
   1c0b4:	add	r0, sp, #46	; 0x2e
   1c0b8:	blx	r3
   1c0bc:	ldr	r3, [r5]
   1c0c0:	mov	r1, #2
   1c0c4:	str	r0, [r4, #80]	; 0x50
   1c0c8:	add	r0, sp, #48	; 0x30
   1c0cc:	blx	r3
   1c0d0:	ldr	r3, [r5]
   1c0d4:	mov	r1, #2
   1c0d8:	str	r0, [r4, #84]	; 0x54
   1c0dc:	add	r0, sp, #50	; 0x32
   1c0e0:	blx	r3
   1c0e4:	str	r0, [r4, #88]	; 0x58
   1c0e8:	ldrd	r2, [r4, #48]	; 0x30
   1c0ec:	orrs	r3, r2, r3
   1c0f0:	moveq	r0, #1
   1c0f4:	beq	1c12c <__assert_fail@plt+0xaf20>
   1c0f8:	ldr	r3, [r7]
   1c0fc:	mov	r0, r4
   1c100:	cmp	r3, #0
   1c104:	mov	r1, #1
   1c108:	beq	1c23c <__assert_fail@plt+0xb030>
   1c10c:	bl	1835c <__assert_fail@plt+0x7150>
   1c110:	mov	r0, #1
   1c114:	b	1c12c <__assert_fail@plt+0xaf20>
   1c118:	mov	r1, #48	; 0x30
   1c11c:	bl	10ffc <fread@plt>
   1c120:	cmp	r0, #1
   1c124:	beq	1c134 <__assert_fail@plt+0xaf28>
   1c128:	mov	r0, #0
   1c12c:	add	sp, sp, #68	; 0x44
   1c130:	pop	{r4, r5, r6, r7, pc}
   1c134:	ldr	r3, [r5]
   1c138:	add	r0, sp, #16
   1c13c:	mov	r1, r6
   1c140:	blx	r3
   1c144:	ldr	r3, [r5]
   1c148:	mov	r1, r6
   1c14c:	strh	r0, [r4, #64]	; 0x40
   1c150:	add	r0, sp, #18
   1c154:	blx	r3
   1c158:	ldr	r3, [r5]
   1c15c:	mov	r1, #4
   1c160:	strh	r0, [r4, #66]	; 0x42
   1c164:	add	r0, sp, #20
   1c168:	blx	r3
   1c16c:	ldr	r3, [r5]
   1c170:	mov	r1, #8
   1c174:	str	r0, [r4, #56]	; 0x38
   1c178:	add	r0, sp, #24
   1c17c:	blx	r3
   1c180:	ldr	r3, [r5]
   1c184:	strd	r0, [r4, #32]
   1c188:	mov	r1, #8
   1c18c:	add	r0, sp, #32
   1c190:	blx	r3
   1c194:	ldr	r3, [r5]
   1c198:	strd	r0, [r4, #40]	; 0x28
   1c19c:	mov	r1, #8
   1c1a0:	add	r0, sp, #40	; 0x28
   1c1a4:	blx	r3
   1c1a8:	ldr	r3, [r5]
   1c1ac:	strd	r0, [r4, #48]	; 0x30
   1c1b0:	mov	r1, #4
   1c1b4:	add	r0, sp, #48	; 0x30
   1c1b8:	blx	r3
   1c1bc:	ldr	r3, [r5]
   1c1c0:	mov	r1, r6
   1c1c4:	str	r0, [r4, #60]	; 0x3c
   1c1c8:	add	r0, sp, #52	; 0x34
   1c1cc:	blx	r3
   1c1d0:	ldr	r3, [r5]
   1c1d4:	mov	r1, r6
   1c1d8:	str	r0, [r4, #68]	; 0x44
   1c1dc:	add	r0, sp, #54	; 0x36
   1c1e0:	blx	r3
   1c1e4:	ldr	r3, [r5]
   1c1e8:	mov	r1, r6
   1c1ec:	str	r0, [r4, #72]	; 0x48
   1c1f0:	add	r0, sp, #56	; 0x38
   1c1f4:	blx	r3
   1c1f8:	ldr	r3, [r5]
   1c1fc:	mov	r1, r6
   1c200:	str	r0, [r4, #76]	; 0x4c
   1c204:	add	r0, sp, #58	; 0x3a
   1c208:	blx	r3
   1c20c:	ldr	r3, [r5]
   1c210:	mov	r1, r6
   1c214:	str	r0, [r4, #80]	; 0x50
   1c218:	add	r0, sp, #60	; 0x3c
   1c21c:	blx	r3
   1c220:	ldr	r3, [r5]
   1c224:	mov	r1, r6
   1c228:	str	r0, [r4, #84]	; 0x54
   1c22c:	add	r0, sp, #62	; 0x3e
   1c230:	blx	r3
   1c234:	str	r0, [r4, #88]	; 0x58
   1c238:	b	1c0e8 <__assert_fail@plt+0xaedc>
   1c23c:	bl	1862c <__assert_fail@plt+0x7420>
   1c240:	mov	r0, #1
   1c244:	b	1c12c <__assert_fail@plt+0xaf20>
   1c248:	andeq	lr, r9, ip, asr sp
   1c24c:	andeq	lr, r9, r0, ror #26
   1c250:	andeq	r4, r5, ip, asr #28
   1c254:	andeq	r4, r5, r0, ror #29
   1c258:	andeq	sl, r9, r8, lsr r4
   1c25c:	muleq	r5, r0, pc	; <UNPREDICTABLE>
   1c260:	andeq	r4, r5, r8, lsr #18
   1c264:	push	{r4, r5, lr}
   1c268:	sub	sp, sp, #108	; 0x6c
   1c26c:	mov	r1, r0
   1c270:	mov	r5, r0
   1c274:	mov	r2, sp
   1c278:	mov	r0, #3
   1c27c:	bl	111b8 <__xstat64@plt>
   1c280:	cmp	r0, #0
   1c284:	blt	1c324 <__assert_fail@plt+0xb118>
   1c288:	ldr	r3, [sp, #16]
   1c28c:	and	r3, r3, #61440	; 0xf000
   1c290:	cmp	r3, #32768	; 0x8000
   1c294:	bne	1c324 <__assert_fail@plt+0xb118>
   1c298:	mov	r1, #120	; 0x78
   1c29c:	mov	r0, #1
   1c2a0:	bl	10ef4 <calloc@plt>
   1c2a4:	subs	r4, r0, #0
   1c2a8:	beq	1c324 <__assert_fail@plt+0xb118>
   1c2ac:	ldr	r1, [pc, #144]	; 1c344 <__assert_fail@plt+0xb138>
   1c2b0:	mov	r0, r5
   1c2b4:	bl	11164 <fopen64@plt>
   1c2b8:	cmp	r0, #0
   1c2bc:	str	r0, [r4, #4]
   1c2c0:	beq	1c31c <__assert_fail@plt+0xb110>
   1c2c4:	ldrd	r2, [sp, #48]	; 0x30
   1c2c8:	str	r5, [r4]
   1c2cc:	mov	r0, r4
   1c2d0:	strd	r2, [r4, #8]
   1c2d4:	bl	1bf5c <__assert_fail@plt+0xad50>
   1c2d8:	cmp	r0, #0
   1c2dc:	beq	1c30c <__assert_fail@plt+0xb100>
   1c2e0:	ldrd	r2, [r4, #48]	; 0x30
   1c2e4:	orrs	r3, r2, r3
   1c2e8:	beq	1c328 <__assert_fail@plt+0xb11c>
   1c2ec:	ldr	r3, [pc, #84]	; 1c348 <__assert_fail@plt+0xb13c>
   1c2f0:	ldr	r1, [r3]
   1c2f4:	cmp	r1, #0
   1c2f8:	bne	1c334 <__assert_fail@plt+0xb128>
   1c2fc:	mov	r0, r4
   1c300:	bl	1862c <__assert_fail@plt+0x7420>
   1c304:	cmp	r0, #0
   1c308:	bne	1c328 <__assert_fail@plt+0xb11c>
   1c30c:	ldr	r0, [r4, #4]
   1c310:	cmp	r0, #0
   1c314:	beq	1c31c <__assert_fail@plt+0xb110>
   1c318:	bl	110f8 <fclose@plt>
   1c31c:	mov	r0, r4
   1c320:	bl	10f54 <free@plt>
   1c324:	mov	r4, #0
   1c328:	mov	r0, r4
   1c32c:	add	sp, sp, #108	; 0x6c
   1c330:	pop	{r4, r5, pc}
   1c334:	mov	r1, #0
   1c338:	mov	r0, r4
   1c33c:	bl	1835c <__assert_fail@plt+0x7150>
   1c340:	b	1c304 <__assert_fail@plt+0xb0f8>
   1c344:	andeq	r5, r6, r0, ror r4
   1c348:	andeq	sl, r9, r8, lsr r4
   1c34c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c350:	mov	r7, r0
   1c354:	ldr	r6, [pc, #884]	; 1c6d0 <__assert_fail@plt+0xb4c4>
   1c358:	ldr	r0, [r0, #76]	; 0x4c
   1c35c:	ldrd	r4, [r7, #8]
   1c360:	ldr	r3, [r6]
   1c364:	sub	sp, sp, #24
   1c368:	cmp	r3, #0
   1c36c:	movne	r2, #32
   1c370:	moveq	r2, #56	; 0x38
   1c374:	mov	r3, #0
   1c378:	mul	r2, r2, r0
   1c37c:	cmp	r3, r5
   1c380:	cmpeq	r2, r4
   1c384:	bcs	1c668 <__assert_fail@plt+0xb45c>
   1c388:	mov	r1, #56	; 0x38
   1c38c:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   1c390:	subs	r9, r0, #0
   1c394:	beq	1c68c <__assert_fail@plt+0xb480>
   1c398:	ldrd	r4, [r7, #72]	; 0x48
   1c39c:	ldr	r3, [r6]
   1c3a0:	clz	r0, r4
   1c3a4:	cmp	r5, #0
   1c3a8:	lsr	r0, r0, #5
   1c3ac:	moveq	r0, #1
   1c3b0:	cmp	r3, #0
   1c3b4:	beq	1c500 <__assert_fail@plt+0xb2f4>
   1c3b8:	cmp	r0, #0
   1c3bc:	bne	1c654 <__assert_fail@plt+0xb448>
   1c3c0:	cmp	r4, #31
   1c3c4:	bls	1c644 <__assert_fail@plt+0xb438>
   1c3c8:	cmp	r4, #32
   1c3cc:	bne	1c6a8 <__assert_fail@plt+0xb49c>
   1c3d0:	mov	r2, #5
   1c3d4:	ldr	r1, [pc, #760]	; 1c6d4 <__assert_fail@plt+0xb4c8>
   1c3d8:	mov	r0, #0
   1c3dc:	ldr	r6, [r7, #40]	; 0x28
   1c3e0:	bl	10f90 <dcgettext@plt>
   1c3e4:	mov	r8, #0
   1c3e8:	mov	r3, r6
   1c3ec:	str	r5, [sp, #8]
   1c3f0:	str	r4, [sp]
   1c3f4:	str	r8, [sp, #12]
   1c3f8:	str	r8, [sp, #4]
   1c3fc:	add	r2, r7, #8
   1c400:	add	r1, r7, #4
   1c404:	str	r0, [sp, #16]
   1c408:	mov	r0, r8
   1c40c:	bl	1717c <__assert_fail@plt+0x5f70>
   1c410:	subs	sl, r0, #0
   1c414:	beq	1c654 <__assert_fail@plt+0xb448>
   1c418:	ldr	r3, [r7, #76]	; 0x4c
   1c41c:	cmp	r3, r8
   1c420:	beq	1c4e8 <__assert_fail@plt+0xb2dc>
   1c424:	ldr	r4, [pc, #684]	; 1c6d8 <__assert_fail@plt+0xb4cc>
   1c428:	add	r6, r9, #56	; 0x38
   1c42c:	mov	r5, sl
   1c430:	ldr	r3, [r4]
   1c434:	mov	r0, r5
   1c438:	mov	r1, #4
   1c43c:	blx	r3
   1c440:	mov	r1, #4
   1c444:	ldr	r3, [r4]
   1c448:	add	r8, r8, #1
   1c44c:	add	r6, r6, #56	; 0x38
   1c450:	str	r0, [r6, #-112]	; 0xffffff90
   1c454:	add	r0, r5, r1
   1c458:	blx	r3
   1c45c:	ldr	r3, [r4]
   1c460:	strd	r0, [r6, #-104]	; 0xffffff98
   1c464:	add	r0, r5, #8
   1c468:	mov	r1, #4
   1c46c:	blx	r3
   1c470:	ldr	r3, [r4]
   1c474:	strd	r0, [r6, #-96]	; 0xffffffa0
   1c478:	add	r0, r5, #12
   1c47c:	mov	r1, #4
   1c480:	blx	r3
   1c484:	ldr	r3, [r4]
   1c488:	strd	r0, [r6, #-88]	; 0xffffffa8
   1c48c:	add	r0, r5, #16
   1c490:	mov	r1, #4
   1c494:	blx	r3
   1c498:	ldr	r3, [r4]
   1c49c:	strd	r0, [r6, #-80]	; 0xffffffb0
   1c4a0:	add	r0, r5, #20
   1c4a4:	mov	r1, #4
   1c4a8:	blx	r3
   1c4ac:	ldr	r3, [r4]
   1c4b0:	strd	r0, [r6, #-72]	; 0xffffffb8
   1c4b4:	add	r0, r5, #24
   1c4b8:	mov	r1, #4
   1c4bc:	blx	r3
   1c4c0:	ldr	r3, [r4]
   1c4c4:	mov	r1, #4
   1c4c8:	str	r0, [r6, #-108]	; 0xffffff94
   1c4cc:	add	r0, r5, #28
   1c4d0:	blx	r3
   1c4d4:	ldr	r3, [r7, #76]	; 0x4c
   1c4d8:	add	r5, r5, #32
   1c4dc:	cmp	r8, r3
   1c4e0:	strd	r0, [r6, #-64]	; 0xffffffc0
   1c4e4:	bcc	1c430 <__assert_fail@plt+0xb224>
   1c4e8:	mov	r0, sl
   1c4ec:	bl	10f54 <free@plt>
   1c4f0:	mov	r0, #1
   1c4f4:	str	r9, [r7, #100]	; 0x64
   1c4f8:	add	sp, sp, #24
   1c4fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c500:	cmp	r0, #0
   1c504:	bne	1c654 <__assert_fail@plt+0xb448>
   1c508:	cmp	r4, #55	; 0x37
   1c50c:	bls	1c644 <__assert_fail@plt+0xb438>
   1c510:	cmp	r4, #56	; 0x38
   1c514:	bne	1c6bc <__assert_fail@plt+0xb4b0>
   1c518:	mov	r2, #5
   1c51c:	ldr	r1, [pc, #432]	; 1c6d4 <__assert_fail@plt+0xb4c8>
   1c520:	mov	r0, #0
   1c524:	ldr	r6, [r7, #40]	; 0x28
   1c528:	bl	10f90 <dcgettext@plt>
   1c52c:	mov	r8, #0
   1c530:	mov	r3, r6
   1c534:	str	r5, [sp, #8]
   1c538:	str	r4, [sp]
   1c53c:	str	r8, [sp, #12]
   1c540:	str	r8, [sp, #4]
   1c544:	add	r2, r7, #8
   1c548:	add	r1, r7, #4
   1c54c:	str	r0, [sp, #16]
   1c550:	mov	r0, r8
   1c554:	bl	1717c <__assert_fail@plt+0x5f70>
   1c558:	subs	sl, r0, #0
   1c55c:	beq	1c654 <__assert_fail@plt+0xb448>
   1c560:	ldr	r3, [r7, #76]	; 0x4c
   1c564:	cmp	r3, r8
   1c568:	beq	1c4e8 <__assert_fail@plt+0xb2dc>
   1c56c:	ldr	r4, [pc, #356]	; 1c6d8 <__assert_fail@plt+0xb4cc>
   1c570:	add	r6, r9, #56	; 0x38
   1c574:	mov	r5, sl
   1c578:	ldr	r3, [r4]
   1c57c:	mov	r0, r5
   1c580:	mov	r1, #4
   1c584:	blx	r3
   1c588:	mov	r1, #4
   1c58c:	ldr	r3, [r4]
   1c590:	add	r8, r8, #1
   1c594:	add	r6, r6, #56	; 0x38
   1c598:	str	r0, [r6, #-112]	; 0xffffff90
   1c59c:	add	r0, r5, r1
   1c5a0:	blx	r3
   1c5a4:	mov	r1, #8
   1c5a8:	ldr	r3, [r4]
   1c5ac:	str	r0, [r6, #-108]	; 0xffffff94
   1c5b0:	add	r0, r5, r1
   1c5b4:	blx	r3
   1c5b8:	ldr	r3, [r4]
   1c5bc:	strd	r0, [r6, #-104]	; 0xffffff98
   1c5c0:	add	r0, r5, #16
   1c5c4:	mov	r1, #8
   1c5c8:	blx	r3
   1c5cc:	ldr	r3, [r4]
   1c5d0:	strd	r0, [r6, #-96]	; 0xffffffa0
   1c5d4:	add	r0, r5, #24
   1c5d8:	mov	r1, #8
   1c5dc:	blx	r3
   1c5e0:	ldr	r3, [r4]
   1c5e4:	strd	r0, [r6, #-88]	; 0xffffffa8
   1c5e8:	add	r0, r5, #32
   1c5ec:	mov	r1, #8
   1c5f0:	blx	r3
   1c5f4:	ldr	r3, [r4]
   1c5f8:	strd	r0, [r6, #-80]	; 0xffffffb0
   1c5fc:	add	r0, r5, #40	; 0x28
   1c600:	mov	r1, #8
   1c604:	blx	r3
   1c608:	ldr	r3, [r4]
   1c60c:	strd	r0, [r6, #-72]	; 0xffffffb8
   1c610:	add	r0, r5, #48	; 0x30
   1c614:	mov	r1, #8
   1c618:	blx	r3
   1c61c:	ldr	r3, [r7, #76]	; 0x4c
   1c620:	add	r5, r5, #56	; 0x38
   1c624:	cmp	r8, r3
   1c628:	strd	r0, [r6, #-64]	; 0xffffffc0
   1c62c:	bcc	1c578 <__assert_fail@plt+0xb36c>
   1c630:	mov	r0, sl
   1c634:	bl	10f54 <free@plt>
   1c638:	str	r9, [r7, #100]	; 0x64
   1c63c:	mov	r0, #1
   1c640:	b	1c4f8 <__assert_fail@plt+0xb2ec>
   1c644:	mov	r2, #5
   1c648:	ldr	r1, [pc, #140]	; 1c6dc <__assert_fail@plt+0xb4d0>
   1c64c:	bl	10f90 <dcgettext@plt>
   1c650:	bl	548ac <error@@Base>
   1c654:	mov	r0, r9
   1c658:	bl	10f54 <free@plt>
   1c65c:	mov	r0, #0
   1c660:	add	sp, sp, #24
   1c664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c668:	mov	r2, #5
   1c66c:	ldr	r1, [pc, #108]	; 1c6e0 <__assert_fail@plt+0xb4d4>
   1c670:	mov	r0, #0
   1c674:	bl	10f90 <dcgettext@plt>
   1c678:	ldr	r1, [r7, #76]	; 0x4c
   1c67c:	bl	548ac <error@@Base>
   1c680:	mov	r0, #0
   1c684:	add	sp, sp, #24
   1c688:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c68c:	mov	r2, #5
   1c690:	ldr	r1, [pc, #76]	; 1c6e4 <__assert_fail@plt+0xb4d8>
   1c694:	bl	10f90 <dcgettext@plt>
   1c698:	ldr	r1, [r7, #76]	; 0x4c
   1c69c:	bl	548ac <error@@Base>
   1c6a0:	mov	r0, r9
   1c6a4:	b	1c660 <__assert_fail@plt+0xb454>
   1c6a8:	mov	r2, #5
   1c6ac:	ldr	r1, [pc, #52]	; 1c6e8 <__assert_fail@plt+0xb4dc>
   1c6b0:	bl	10f90 <dcgettext@plt>
   1c6b4:	bl	54dd0 <warn@@Base>
   1c6b8:	b	1c3d0 <__assert_fail@plt+0xb1c4>
   1c6bc:	mov	r2, #5
   1c6c0:	ldr	r1, [pc, #32]	; 1c6e8 <__assert_fail@plt+0xb4dc>
   1c6c4:	bl	10f90 <dcgettext@plt>
   1c6c8:	bl	54dd0 <warn@@Base>
   1c6cc:	b	1c518 <__assert_fail@plt+0xb30c>
   1c6d0:	andeq	sl, r9, r8, lsr r4
   1c6d4:	muleq	r6, r0, r5
   1c6d8:	andeq	lr, r9, ip, asr sp
   1c6dc:	ldrdeq	r5, [r6], -ip
   1c6e0:	andeq	r5, r6, r4, ror r4
   1c6e4:			; <UNDEFINED> instruction: 0x000654b0
   1c6e8:	andeq	r5, r6, r4, lsr r5
   1c6ec:	ldr	r1, [r0, #100]	; 0x64
   1c6f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6f4:	sub	sp, sp, #20
   1c6f8:	cmp	r1, #0
   1c6fc:	mov	r7, r3
   1c700:	mov	sl, r0
   1c704:	mov	r6, r2
   1c708:	ldr	fp, [sp, #56]	; 0x38
   1c70c:	ldr	r3, [sp, #60]	; 0x3c
   1c710:	beq	1c7bc <__assert_fail@plt+0xb5b0>
   1c714:	ldr	ip, [sl, #76]	; 0x4c
   1c718:	rsb	ip, ip, ip, lsl #3
   1c71c:	add	ip, r1, ip, lsl #3
   1c720:	cmp	ip, r1
   1c724:	bls	1c798 <__assert_fail@plt+0xb58c>
   1c728:	adds	r2, r6, fp
   1c72c:	adc	r3, r7, r3
   1c730:	str	r2, [sp]
   1c734:	str	r3, [sp, #4]
   1c738:	ldr	r3, [r1]
   1c73c:	cmp	r3, #1
   1c740:	bne	1c78c <__assert_fail@plt+0xb580>
   1c744:	ldrd	r2, [r1, #48]	; 0x30
   1c748:	ldr	lr, [r1, #20]
   1c74c:	ldr	r0, [r1, #16]
   1c750:	rsbs	r2, r2, #0
   1c754:	rsc	r3, r3, #0
   1c758:	and	r5, r3, lr
   1c75c:	and	r4, r2, r0
   1c760:	cmp	r5, r7
   1c764:	cmpeq	r4, r6
   1c768:	bhi	1c78c <__assert_fail@plt+0xb580>
   1c76c:	ldr	r3, [r1, #32]
   1c770:	ldr	r2, [r1, #36]	; 0x24
   1c774:	adds	r8, r0, r3
   1c778:	adc	r9, lr, r2
   1c77c:	ldrd	r2, [sp]
   1c780:	cmp	r3, r9
   1c784:	cmpeq	r2, r8
   1c788:	bls	1c7d8 <__assert_fail@plt+0xb5cc>
   1c78c:	add	r1, r1, #56	; 0x38
   1c790:	cmp	r1, ip
   1c794:	bcc	1c738 <__assert_fail@plt+0xb52c>
   1c798:	mov	r2, #5
   1c79c:	ldr	r1, [pc, #96]	; 1c804 <__assert_fail@plt+0xb5f8>
   1c7a0:	mov	r0, #0
   1c7a4:	bl	10f90 <dcgettext@plt>
   1c7a8:	mov	r1, r6
   1c7ac:	bl	54dd0 <warn@@Base>
   1c7b0:	mov	r0, r6
   1c7b4:	add	sp, sp, #20
   1c7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7bc:	str	r3, [sp, #12]
   1c7c0:	bl	1c34c <__assert_fail@plt+0xb140>
   1c7c4:	cmp	r0, #0
   1c7c8:	beq	1c7ec <__assert_fail@plt+0xb5e0>
   1c7cc:	ldr	r1, [sl, #100]	; 0x64
   1c7d0:	ldr	r3, [sp, #12]
   1c7d4:	b	1c714 <__assert_fail@plt+0xb508>
   1c7d8:	ldr	r3, [r1, #8]
   1c7dc:	sub	r0, r3, r0
   1c7e0:	add	r0, r0, r6
   1c7e4:	add	sp, sp, #20
   1c7e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7ec:	mov	r2, #5
   1c7f0:	ldr	r1, [pc, #16]	; 1c808 <__assert_fail@plt+0xb5fc>
   1c7f4:	bl	10f90 <dcgettext@plt>
   1c7f8:	bl	54dd0 <warn@@Base>
   1c7fc:	mov	r0, r6
   1c800:	b	1c7b4 <__assert_fail@plt+0xb5a8>
   1c804:	andeq	r5, r6, r0, ror #11
   1c808:	andeq	r5, r6, r0, lsr #11
   1c80c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c810:	sub	sp, sp, #356	; 0x164
   1c814:	ldr	r4, [pc, #4068]	; 1d800 <__assert_fail@plt+0xc5f4>
   1c818:	add	r8, r4, #1120	; 0x460
   1c81c:	ldrd	r6, [r8, #-8]
   1c820:	orrs	r3, r6, r7
   1c824:	beq	1d540 <__assert_fail@plt+0xc334>
   1c828:	ldr	r5, [r4]
   1c82c:	add	sl, r0, #4
   1c830:	add	r3, r0, #8
   1c834:	cmp	r5, #0
   1c838:	mov	fp, r0
   1c83c:	ldr	r9, [r4, #692]	; 0x2b4
   1c840:	mov	r2, #5
   1c844:	ldr	r1, [pc, #4024]	; 1d804 <__assert_fail@plt+0xc5f8>
   1c848:	str	sl, [sp, #32]
   1c84c:	str	r3, [sp, #36]	; 0x24
   1c850:	beq	1ca74 <__assert_fail@plt+0xb868>
   1c854:	mov	r0, #0
   1c858:	bl	10f90 <dcgettext@plt>
   1c85c:	strd	r6, [sp, #8]
   1c860:	mov	r6, #1
   1c864:	mov	r7, #0
   1c868:	mov	r3, r9
   1c86c:	strd	r6, [sp]
   1c870:	add	r2, fp, #8
   1c874:	mov	r1, sl
   1c878:	str	r0, [sp, #16]
   1c87c:	mov	r0, #0
   1c880:	bl	1717c <__assert_fail@plt+0x5f70>
   1c884:	subs	r6, r0, #0
   1c888:	beq	1d7b4 <__assert_fail@plt+0xc5a8>
   1c88c:	mov	r2, #0
   1c890:	str	r2, [r4, #688]	; 0x2b0
   1c894:	mov	r5, r6
   1c898:	ldr	r7, [pc, #3944]	; 1d808 <__assert_fail@plt+0xc5fc>
   1c89c:	b	1c8b8 <__assert_fail@plt+0xb6ac>
   1c8a0:	ldr	r3, [r7]
   1c8a4:	str	ip, [r4, #688]	; 0x2b0
   1c8a8:	blx	r3
   1c8ac:	ldr	r2, [r4, #688]	; 0x2b0
   1c8b0:	orrs	r3, r0, r1
   1c8b4:	beq	1c8d8 <__assert_fail@plt+0xb6cc>
   1c8b8:	ldr	r3, [r8, #-8]
   1c8bc:	add	r5, r5, #8
   1c8c0:	add	r3, r6, r3
   1c8c4:	cmp	r5, r3
   1c8c8:	add	ip, r2, #1
   1c8cc:	mov	r1, #4
   1c8d0:	sub	r0, r5, #8
   1c8d4:	bls	1c8a0 <__assert_fail@plt+0xb694>
   1c8d8:	mov	r0, r2
   1c8dc:	mov	r1, #16
   1c8e0:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   1c8e4:	cmp	r0, #0
   1c8e8:	mov	r5, r0
   1c8ec:	str	r0, [r4, #684]	; 0x2ac
   1c8f0:	beq	1e100 <__assert_fail@plt+0xcef4>
   1c8f4:	ldr	r3, [r4, #688]	; 0x2b0
   1c8f8:	add	r3, r0, r3, lsl #4
   1c8fc:	cmp	r0, r3
   1c900:	movcc	r7, r6
   1c904:	ldrcc	r8, [pc, #3836]	; 1d808 <__assert_fail@plt+0xc5fc>
   1c908:	bcs	1c950 <__assert_fail@plt+0xb744>
   1c90c:	ldr	r3, [r8]
   1c910:	mov	r0, r7
   1c914:	mov	r1, #4
   1c918:	blx	r3
   1c91c:	ldr	r3, [r8]
   1c920:	add	r5, r5, #16
   1c924:	strd	r0, [r5, #-16]
   1c928:	mov	r1, #4
   1c92c:	add	r0, r7, r1
   1c930:	blx	r3
   1c934:	ldr	r2, [r4, #688]	; 0x2b0
   1c938:	ldr	r3, [r4, #684]	; 0x2ac
   1c93c:	add	r7, r7, #8
   1c940:	add	r3, r3, r2, lsl #4
   1c944:	strd	r0, [r5, #-8]
   1c948:	cmp	r5, r3
   1c94c:	bcc	1c90c <__assert_fail@plt+0xb700>
   1c950:	mov	r0, r6
   1c954:	bl	10f54 <free@plt>
   1c958:	ldr	r3, [r4, #1124]	; 0x464
   1c95c:	cmp	r3, #0
   1c960:	beq	1cb84 <__assert_fail@plt+0xb978>
   1c964:	ldr	r3, [r4, #1128]	; 0x468
   1c968:	cmp	r3, #0
   1c96c:	beq	1daa0 <__assert_fail@plt+0xc894>
   1c970:	ldr	sl, [r4, #1404]	; 0x57c
   1c974:	cmp	sl, #0
   1c978:	beq	1da00 <__assert_fail@plt+0xc7f4>
   1c97c:	ldr	r3, [r4, #1120]	; 0x460
   1c980:	cmp	r3, #0
   1c984:	bne	1d60c <__assert_fail@plt+0xc400>
   1c988:	ldr	r3, [r4, #688]	; 0x2b0
   1c98c:	ldr	r2, [r4, #684]	; 0x2ac
   1c990:	add	r3, r2, r3, lsl #4
   1c994:	cmp	r2, r3
   1c998:	bcs	1ca64 <__assert_fail@plt+0xb858>
   1c99c:	add	r8, r2, #8
   1c9a0:	mov	r9, fp
   1c9a4:	ldr	r3, [r4, #1120]	; 0x460
   1c9a8:	cmp	r3, #0
   1c9ac:	bne	1d284 <__assert_fail@plt+0xc078>
   1c9b0:	ldrd	r2, [r8, #-8]
   1c9b4:	cmp	r3, #0
   1c9b8:	cmpeq	r2, #30
   1c9bc:	beq	1d564 <__assert_fail@plt+0xc358>
   1c9c0:	bls	1d000 <__assert_fail@plt+0xbdf4>
   1c9c4:	ldr	r0, [pc, #3648]	; 1d80c <__assert_fail@plt+0xc600>
   1c9c8:	mov	r1, #0
   1c9cc:	cmp	r3, r1
   1c9d0:	cmpeq	r2, r0
   1c9d4:	bhi	1cd4c <__assert_fail@plt+0xbb40>
   1c9d8:	ldr	r0, [pc, #3632]	; 1d810 <__assert_fail@plt+0xc604>
   1c9dc:	mov	r1, #0
   1c9e0:	cmp	r3, r1
   1c9e4:	cmpeq	r2, r0
   1c9e8:	bcs	1cf14 <__assert_fail@plt+0xbd08>
   1c9ec:	ldr	r0, [pc, #3616]	; 1d814 <__assert_fail@plt+0xc608>
   1c9f0:	mov	r1, #0
   1c9f4:	cmp	r3, r1
   1c9f8:	cmpeq	r2, r0
   1c9fc:	bls	1d1d0 <__assert_fail@plt+0xbfc4>
   1ca00:	ldr	r0, [pc, #3736]	; 1d8a0 <__assert_fail@plt+0xc694>
   1ca04:	mov	r1, #0
   1ca08:	cmp	r3, r1
   1ca0c:	cmpeq	r2, r0
   1ca10:	bhi	1cd04 <__assert_fail@plt+0xbaf8>
   1ca14:	ldr	r0, [pc, #3720]	; 1d8a4 <__assert_fail@plt+0xc698>
   1ca18:	mov	r1, #0
   1ca1c:	cmp	r3, r1
   1ca20:	cmpeq	r2, r0
   1ca24:	bcs	1ce64 <__assert_fail@plt+0xbc58>
   1ca28:	ldr	r0, [pc, #3560]	; 1d818 <__assert_fail@plt+0xc60c>
   1ca2c:	mov	r1, #0
   1ca30:	cmp	r3, r1
   1ca34:	cmpeq	r2, r0
   1ca38:	bne	1cc8c <__assert_fail@plt+0xba80>
   1ca3c:	ldr	r3, [r4, #1120]	; 0x460
   1ca40:	cmp	r3, #0
   1ca44:	bne	1d6dc <__assert_fail@plt+0xc4d0>
   1ca48:	ldr	r1, [r4, #688]	; 0x2b0
   1ca4c:	ldr	r3, [r4, #684]	; 0x2ac
   1ca50:	add	r2, r8, #8
   1ca54:	add	r3, r3, r1, lsl #4
   1ca58:	cmp	r3, r2
   1ca5c:	add	r8, r8, #16
   1ca60:	bhi	1c9a4 <__assert_fail@plt+0xb798>
   1ca64:	mov	r5, #1
   1ca68:	mov	r0, r5
   1ca6c:	add	sp, sp, #356	; 0x164
   1ca70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca74:	mov	r0, r5
   1ca78:	bl	10f90 <dcgettext@plt>
   1ca7c:	strd	r6, [sp, #8]
   1ca80:	mov	r7, #0
   1ca84:	mov	r6, #1
   1ca88:	mov	r3, r9
   1ca8c:	strd	r6, [sp]
   1ca90:	add	r2, fp, #8
   1ca94:	ldr	r1, [sp, #32]
   1ca98:	str	r0, [sp, #16]
   1ca9c:	mov	r0, r5
   1caa0:	bl	1717c <__assert_fail@plt+0x5f70>
   1caa4:	subs	r7, r0, #0
   1caa8:	beq	1d7b4 <__assert_fail@plt+0xc5a8>
   1caac:	str	r5, [r4, #688]	; 0x2b0
   1cab0:	mov	r6, r7
   1cab4:	mov	ip, r5
   1cab8:	ldr	r9, [pc, #3400]	; 1d808 <__assert_fail@plt+0xc5fc>
   1cabc:	b	1cad8 <__assert_fail@plt+0xb8cc>
   1cac0:	ldr	r3, [r9]
   1cac4:	str	r2, [r4, #688]	; 0x2b0
   1cac8:	blx	r3
   1cacc:	ldr	ip, [r4, #688]	; 0x2b0
   1cad0:	orrs	r3, r0, r1
   1cad4:	beq	1caf8 <__assert_fail@plt+0xb8ec>
   1cad8:	ldr	r3, [r8, #-8]
   1cadc:	add	r6, r6, #16
   1cae0:	add	r3, r7, r3
   1cae4:	cmp	r6, r3
   1cae8:	add	r2, ip, #1
   1caec:	mov	r1, #8
   1caf0:	sub	r0, r6, #16
   1caf4:	bls	1cac0 <__assert_fail@plt+0xb8b4>
   1caf8:	mov	r0, ip
   1cafc:	mov	r1, #16
   1cb00:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   1cb04:	cmp	r0, #0
   1cb08:	mov	r6, r0
   1cb0c:	str	r0, [r4, #684]	; 0x2ac
   1cb10:	beq	1e0e0 <__assert_fail@plt+0xced4>
   1cb14:	ldr	r3, [r4, #688]	; 0x2b0
   1cb18:	add	r3, r0, r3, lsl #4
   1cb1c:	cmp	r0, r3
   1cb20:	movcc	r5, r7
   1cb24:	ldrcc	r8, [pc, #3292]	; 1d808 <__assert_fail@plt+0xc5fc>
   1cb28:	bcs	1cb70 <__assert_fail@plt+0xb964>
   1cb2c:	ldr	r3, [r8]
   1cb30:	mov	r0, r5
   1cb34:	mov	r1, #8
   1cb38:	blx	r3
   1cb3c:	ldr	r3, [r8]
   1cb40:	add	r6, r6, #16
   1cb44:	strd	r0, [r6, #-16]
   1cb48:	mov	r1, #8
   1cb4c:	add	r0, r5, r1
   1cb50:	blx	r3
   1cb54:	ldr	r2, [r4, #688]	; 0x2b0
   1cb58:	ldr	r3, [r4, #684]	; 0x2ac
   1cb5c:	add	r5, r5, #16
   1cb60:	add	r3, r3, r2, lsl #4
   1cb64:	strd	r0, [r6, #-8]
   1cb68:	cmp	r6, r3
   1cb6c:	bcc	1cb2c <__assert_fail@plt+0xb920>
   1cb70:	mov	r0, r7
   1cb74:	bl	10f54 <free@plt>
   1cb78:	ldr	r3, [r4, #1124]	; 0x464
   1cb7c:	cmp	r3, #0
   1cb80:	bne	1c964 <__assert_fail@plt+0xb758>
   1cb84:	ldr	r3, [r4, #688]	; 0x2b0
   1cb88:	ldr	r5, [r4, #684]	; 0x2ac
   1cb8c:	add	r3, r5, r3, lsl #4
   1cb90:	cmp	r5, r3
   1cb94:	bcs	1c970 <__assert_fail@plt+0xb764>
   1cb98:	ldr	r6, [pc, #3344]	; 1d8b0 <__assert_fail@plt+0xc6a4>
   1cb9c:	ldr	sl, [pc, #3192]	; 1d81c <__assert_fail@plt+0xc610>
   1cba0:	add	r7, r6, #260	; 0x104
   1cba4:	b	1cbc0 <__assert_fail@plt+0xb9b4>
   1cba8:	ldr	r2, [r4, #688]	; 0x2b0
   1cbac:	ldr	r3, [r4, #684]	; 0x2ac
   1cbb0:	add	r5, r5, #16
   1cbb4:	add	r3, r3, r2, lsl #4
   1cbb8:	cmp	r5, r3
   1cbbc:	bcs	1c964 <__assert_fail@plt+0xb758>
   1cbc0:	ldrd	r2, [r5]
   1cbc4:	cmp	r3, #0
   1cbc8:	cmpeq	r2, #6
   1cbcc:	bne	1cba8 <__assert_fail@plt+0xb99c>
   1cbd0:	ldrd	r2, [r5, #8]
   1cbd4:	mov	r0, fp
   1cbd8:	strd	r2, [r6, #48]	; 0x30
   1cbdc:	mov	r2, #0
   1cbe0:	mov	r3, #0
   1cbe4:	strd	r2, [sp]
   1cbe8:	ldrd	r2, [r6, #48]	; 0x30
   1cbec:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   1cbf0:	ldrd	r2, [fp, #8]
   1cbf4:	asr	r1, r0, #31
   1cbf8:	cmp	r1, r3
   1cbfc:	cmpeq	r0, r2
   1cc00:	strd	r0, [sp, #248]	; 0xf8
   1cc04:	bhi	1d79c <__assert_fail@plt+0xc590>
   1cc08:	ldr	ip, [r4, #656]	; 0x290
   1cc0c:	cmp	ip, #0
   1cc10:	beq	1d7c4 <__assert_fail@plt+0xc5b8>
   1cc14:	ldr	r3, [r4, #1392]	; 0x570
   1cc18:	subs	r8, r3, r0
   1cc1c:	rsc	r9, r1, #0
   1cc20:	strd	r8, [sp, #24]
   1cc24:	ldr	r3, [r4]
   1cc28:	ldrd	r0, [sp, #24]
   1cc2c:	add	r2, sp, #256	; 0x100
   1cc30:	cmp	r3, #0
   1cc34:	strd	r0, [r2]
   1cc38:	ldr	r3, [fp, #108]	; 0x6c
   1cc3c:	beq	1d7d8 <__assert_fail@plt+0xc5cc>
   1cc40:	str	r3, [sp, #224]	; 0xe0
   1cc44:	mov	r8, #16
   1cc48:	mov	r9, #0
   1cc4c:	add	r3, sp, #280	; 0x118
   1cc50:	mov	r2, r7
   1cc54:	add	r1, sp, #224	; 0xe0
   1cc58:	mov	r0, fp
   1cc5c:	strd	r8, [r3]
   1cc60:	bl	1772c <__assert_fail@plt+0x6520>
   1cc64:	ldr	r3, [r4, #1396]	; 0x574
   1cc68:	str	r0, [r4, #1124]	; 0x464
   1cc6c:	cmp	r3, #0
   1cc70:	bne	1cba8 <__assert_fail@plt+0xb99c>
   1cc74:	mov	r0, r3
   1cc78:	mov	r2, #5
   1cc7c:	mov	r1, sl
   1cc80:	bl	10f90 <dcgettext@plt>
   1cc84:	bl	548ac <error@@Base>
   1cc88:	b	1cba8 <__assert_fail@plt+0xb99c>
   1cc8c:	ldr	r0, [pc, #2956]	; 1d820 <__assert_fail@plt+0xc614>
   1cc90:	mov	r1, #0
   1cc94:	cmp	r3, r1
   1cc98:	cmpeq	r2, r0
   1cc9c:	bne	1cd8c <__assert_fail@plt+0xbb80>
   1cca0:	ldr	r3, [r4, #1120]	; 0x460
   1cca4:	cmp	r3, #0
   1cca8:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1ccac:	mov	r2, #5
   1ccb0:	ldr	r1, [pc, #2924]	; 1d824 <__assert_fail@plt+0xc618>
   1ccb4:	mov	r0, #0
   1ccb8:	bl	10f90 <dcgettext@plt>
   1ccbc:	bl	10f24 <printf@plt>
   1ccc0:	ldrd	r6, [r8]
   1ccc4:	orrs	r3, r6, r7
   1ccc8:	beq	1d77c <__assert_fail@plt+0xc570>
   1cccc:	and	r3, r6, #1
   1ccd0:	cmp	r3, #0
   1ccd4:	mov	r5, r6
   1ccd8:	bne	1e198 <__assert_fail@plt+0xcf8c>
   1ccdc:	tst	r5, #2
   1cce0:	bne	1e188 <__assert_fail@plt+0xcf7c>
   1cce4:	cmp	r5, #0
   1cce8:	beq	1ccf8 <__assert_fail@plt+0xbaec>
   1ccec:	mov	r1, r5
   1ccf0:	ldr	r0, [pc, #2864]	; 1d828 <__assert_fail@plt+0xc61c>
   1ccf4:	bl	10f24 <printf@plt>
   1ccf8:	ldr	r0, [pc, #3072]	; 1d900 <__assert_fail@plt+0xc6f4>
   1ccfc:	bl	11014 <puts@plt>
   1cd00:	b	1ca48 <__assert_fail@plt+0xb83c>
   1cd04:	ldr	r0, [pc, #2848]	; 1d82c <__assert_fail@plt+0xc620>
   1cd08:	mov	r1, #0
   1cd0c:	cmp	r3, r1
   1cd10:	cmpeq	r2, r0
   1cd14:	bne	1cd8c <__assert_fail@plt+0xbb80>
   1cd18:	ldrd	r0, [r8]
   1cd1c:	ldr	r3, [pc, #2828]	; 1d830 <__assert_fail@plt+0xc624>
   1cd20:	ldr	r2, [r4, #1120]	; 0x460
   1cd24:	cmp	r2, #0
   1cd28:	strd	r0, [r3, #-8]
   1cd2c:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1cd30:	ldr	r5, [pc, #3192]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1cd34:	mov	r2, #4
   1cd38:	bl	14244 <__assert_fail@plt+0x3038>
   1cd3c:	ldr	r1, [r5]
   1cd40:	mov	r0, #10
   1cd44:	bl	11158 <putc@plt>
   1cd48:	b	1ca48 <__assert_fail@plt+0xb83c>
   1cd4c:	mov	r1, #0
   1cd50:	mvn	r0, #-1879048190	; 0x90000002
   1cd54:	cmp	r3, r1
   1cd58:	cmpeq	r2, r0
   1cd5c:	beq	1cfd4 <__assert_fail@plt+0xbdc8>
   1cd60:	bhi	1ced4 <__assert_fail@plt+0xbcc8>
   1cd64:	mov	r1, #0
   1cd68:	mvn	r0, #-1879048187	; 0x90000005
   1cd6c:	cmp	r3, r1
   1cd70:	cmpeq	r2, r0
   1cd74:	bls	1ce3c <__assert_fail@plt+0xbc30>
   1cd78:	mov	r1, #0
   1cd7c:	mvn	r0, #-1879048188	; 0x90000004
   1cd80:	cmp	r3, r1
   1cd84:	cmpeq	r2, r0
   1cd88:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1cd8c:	ldr	r1, [pc, #2720]	; 1d834 <__assert_fail@plt+0xc628>
   1cd90:	mvn	r0, #0
   1cd94:	adds	r1, r2, r1
   1cd98:	str	r1, [sp, #40]	; 0x28
   1cd9c:	adc	r1, r3, r0
   1cda0:	str	r1, [sp, #44]	; 0x2c
   1cda4:	ldrd	r0, [sp, #40]	; 0x28
   1cda8:	cmp	r1, #0
   1cdac:	cmpeq	r0, #15
   1cdb0:	bhi	1cdcc <__assert_fail@plt+0xbbc0>
   1cdb4:	mvn	r1, #-1879048192	; 0x90000000
   1cdb8:	subs	ip, r1, r2
   1cdbc:	ldr	lr, [pc, #2668]	; 1d830 <__assert_fail@plt+0xc624>
   1cdc0:	ldrd	r0, [r8]
   1cdc4:	lsl	ip, ip, #3
   1cdc8:	strd	r0, [lr, ip]
   1cdcc:	ldr	r1, [r4, #1120]	; 0x460
   1cdd0:	cmp	r1, #0
   1cdd4:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1cdd8:	ldrh	r1, [r9, #66]	; 0x42
   1cddc:	cmp	r1, #10
   1cde0:	beq	1de90 <__assert_fail@plt+0xcc84>
   1cde4:	bls	1dca4 <__assert_fail@plt+0xca98>
   1cde8:	cmp	r1, #15
   1cdec:	beq	1de04 <__assert_fail@plt+0xcbf8>
   1cdf0:	cmp	r1, #50	; 0x32
   1cdf4:	bne	1dcac <__assert_fail@plt+0xcaa0>
   1cdf8:	ldr	r0, [pc, #2616]	; 1d838 <__assert_fail@plt+0xc62c>
   1cdfc:	mov	r1, #0
   1ce00:	cmp	r3, r1
   1ce04:	cmpeq	r2, r0
   1ce08:	beq	1dd3c <__assert_fail@plt+0xcb30>
   1ce0c:	cmp	r3, #0
   1ce10:	cmpeq	r2, #1879048192	; 0x70000000
   1ce14:	beq	1d724 <__assert_fail@plt+0xc518>
   1ce18:	ldr	r0, [pc, #2588]	; 1d83c <__assert_fail@plt+0xc630>
   1ce1c:	mov	r1, #0
   1ce20:	cmp	r3, r1
   1ce24:	cmpeq	r2, r0
   1ce28:	beq	1e3d4 <__assert_fail@plt+0xd1c8>
   1ce2c:	mov	r2, #4
   1ce30:	ldrd	r0, [r8]
   1ce34:	bl	14244 <__assert_fail@plt+0x3038>
   1ce38:	b	1d74c <__assert_fail@plt+0xc540>
   1ce3c:	mov	r1, #0
   1ce40:	mvn	r0, #-1879048186	; 0x90000006
   1ce44:	cmp	r3, r1
   1ce48:	cmpeq	r2, r0
   1ce4c:	bcs	1cfd4 <__assert_fail@plt+0xbdc8>
   1ce50:	ldr	r0, [pc, #2640]	; 1d8a8 <__assert_fail@plt+0xc69c>
   1ce54:	mov	r1, #0
   1ce58:	cmp	r3, r1
   1ce5c:	cmpeq	r2, r0
   1ce60:	bne	1cd8c <__assert_fail@plt+0xbb80>
   1ce64:	ldr	r1, [r4, #1120]	; 0x460
   1ce68:	cmp	r1, #0
   1ce6c:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1ce70:	mov	r1, #0
   1ce74:	mvn	r0, #-2147483647	; 0x80000001
   1ce78:	cmp	r3, r1
   1ce7c:	cmpeq	r2, r0
   1ce80:	bne	1d794 <__assert_fail@plt+0xc588>
   1ce84:	ldr	r5, [r4, #1128]	; 0x468
   1ce88:	cmp	r5, #0
   1ce8c:	beq	1d794 <__assert_fail@plt+0xc588>
   1ce90:	ldrd	r0, [r8]
   1ce94:	ldr	r2, [r4, #1400]	; 0x578
   1ce98:	mov	r3, #0
   1ce9c:	cmp	r1, r3
   1cea0:	cmpeq	r0, r2
   1cea4:	bcs	1cd30 <__assert_fail@plt+0xbb24>
   1cea8:	add	r5, r5, r0
   1ceac:	ldrb	r3, [r5]
   1ceb0:	cmp	r3, #0
   1ceb4:	beq	1cd30 <__assert_fail@plt+0xbb24>
   1ceb8:	mov	r2, #5
   1cebc:	ldr	r1, [pc, #2428]	; 1d840 <__assert_fail@plt+0xc634>
   1cec0:	mov	r0, #0
   1cec4:	bl	10f90 <dcgettext@plt>
   1cec8:	mov	r1, r5
   1cecc:	bl	10f24 <printf@plt>
   1ced0:	b	1ca48 <__assert_fail@plt+0xb83c>
   1ced4:	mov	r1, #0
   1ced8:	mvn	r0, #-2147483646	; 0x80000002
   1cedc:	cmp	r3, r1
   1cee0:	cmpeq	r2, r0
   1cee4:	beq	1cf14 <__assert_fail@plt+0xbd08>
   1cee8:	bls	1cfc0 <__assert_fail@plt+0xbdb4>
   1ceec:	mov	r1, #0
   1cef0:	mvn	r0, #-2147483647	; 0x80000001
   1cef4:	cmp	r3, r1
   1cef8:	cmpeq	r2, r0
   1cefc:	beq	1ce64 <__assert_fail@plt+0xbc58>
   1cf00:	mov	r1, #0
   1cf04:	mvn	r0, #-2147483648	; 0x80000000
   1cf08:	cmp	r3, r1
   1cf0c:	cmpeq	r2, r0
   1cf10:	bne	1cd8c <__assert_fail@plt+0xbb80>
   1cf14:	ldr	r1, [r4, #1120]	; 0x460
   1cf18:	cmp	r1, #0
   1cf1c:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1cf20:	ldr	r0, [pc, #2276]	; 1d80c <__assert_fail@plt+0xc600>
   1cf24:	mov	r1, #0
   1cf28:	cmp	r3, r1
   1cf2c:	cmpeq	r2, r0
   1cf30:	beq	1e150 <__assert_fail@plt+0xcf44>
   1cf34:	bhi	1dc64 <__assert_fail@plt+0xca58>
   1cf38:	ldr	r0, [pc, #2256]	; 1d810 <__assert_fail@plt+0xc604>
   1cf3c:	mov	r1, #0
   1cf40:	cmp	r3, r1
   1cf44:	cmpeq	r2, r0
   1cf48:	beq	1e120 <__assert_fail@plt+0xcf14>
   1cf4c:	ldr	r0, [pc, #2288]	; 1d844 <__assert_fail@plt+0xc638>
   1cf50:	mov	r1, #0
   1cf54:	cmp	r3, r1
   1cf58:	cmpeq	r2, r0
   1cf5c:	bne	1cf74 <__assert_fail@plt+0xbd68>
   1cf60:	mov	r2, #5
   1cf64:	ldr	r1, [pc, #2268]	; 1d848 <__assert_fail@plt+0xc63c>
   1cf68:	mov	r0, #0
   1cf6c:	bl	10f90 <dcgettext@plt>
   1cf70:	bl	10f24 <printf@plt>
   1cf74:	ldr	ip, [r4, #1128]	; 0x468
   1cf78:	cmp	ip, #0
   1cf7c:	beq	1cf98 <__assert_fail@plt+0xbd8c>
   1cf80:	ldrd	r0, [r8]
   1cf84:	ldr	r2, [r4, #1400]	; 0x578
   1cf88:	mov	r3, #0
   1cf8c:	cmp	r1, r3
   1cf90:	cmpeq	r0, r2
   1cf94:	bcc	1ddf4 <__assert_fail@plt+0xcbe8>
   1cf98:	ldr	r0, [pc, #2220]	; 1d84c <__assert_fail@plt+0xc640>
   1cf9c:	ldr	r5, [pc, #2572]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1cfa0:	bl	10f24 <printf@plt>
   1cfa4:	mov	r2, #4
   1cfa8:	ldrd	r0, [r8]
   1cfac:	bl	14244 <__assert_fail@plt+0x3038>
   1cfb0:	ldr	r1, [r5]
   1cfb4:	mov	r0, #10
   1cfb8:	bl	11158 <putc@plt>
   1cfbc:	b	1ca48 <__assert_fail@plt+0xb83c>
   1cfc0:	mov	r1, #0
   1cfc4:	mvn	r0, #-1879048192	; 0x90000000
   1cfc8:	cmp	r3, r1
   1cfcc:	cmpeq	r2, r0
   1cfd0:	bne	1cd8c <__assert_fail@plt+0xbb80>
   1cfd4:	ldr	r3, [r4, #1120]	; 0x460
   1cfd8:	cmp	r3, #0
   1cfdc:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1cfe0:	ldr	r5, [pc, #2504]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1cfe4:	ldrd	r2, [r8]
   1cfe8:	ldr	r0, [pc, #2144]	; 1d850 <__assert_fail@plt+0xc644>
   1cfec:	bl	10f24 <printf@plt>
   1cff0:	ldr	r1, [r5]
   1cff4:	mov	r0, #10
   1cff8:	bl	11158 <putc@plt>
   1cffc:	b	1ca48 <__assert_fail@plt+0xb83c>
   1d000:	cmp	r3, #0
   1d004:	cmpeq	r2, #19
   1d008:	bls	1d070 <__assert_fail@plt+0xbe64>
   1d00c:	cmp	r3, #0
   1d010:	cmpeq	r2, #26
   1d014:	bhi	1d258 <__assert_fail@plt+0xc04c>
   1d018:	cmp	r3, #0
   1d01c:	cmpeq	r2, #25
   1d020:	bcs	1ce64 <__assert_fail@plt+0xbc58>
   1d024:	cmp	r3, #0
   1d028:	cmpeq	r2, #23
   1d02c:	bhi	1ca48 <__assert_fail@plt+0xb83c>
   1d030:	cmp	r3, #0
   1d034:	cmpeq	r2, #21
   1d038:	bcs	1d0ec <__assert_fail@plt+0xbee0>
   1d03c:	ldr	r2, [r4, #1120]	; 0x460
   1d040:	ldr	r3, [pc, #2152]	; 1d8b0 <__assert_fail@plt+0xc6a4>
   1d044:	ldr	r1, [r8, #4]
   1d048:	cmp	r2, #0
   1d04c:	ldr	r2, [r8]
   1d050:	str	r1, [r3, #164]	; 0xa4
   1d054:	str	r2, [r3, #160]	; 0xa0
   1d058:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1d05c:	add	r1, r9, #66	; 0x42
   1d060:	add	r0, r9, #23
   1d064:	bl	1adf8 <__assert_fail@plt+0x9bec>
   1d068:	bl	11014 <puts@plt>
   1d06c:	b	1ca48 <__assert_fail@plt+0xb83c>
   1d070:	cmp	r3, #0
   1d074:	cmpeq	r2, #18
   1d078:	bcs	1d0a0 <__assert_fail@plt+0xbe94>
   1d07c:	cmp	r3, #0
   1d080:	cmpeq	r2, #7
   1d084:	bhi	1d0e0 <__assert_fail@plt+0xbed4>
   1d088:	cmp	r3, #0
   1d08c:	cmpeq	r2, #3
   1d090:	bcs	1d0ec <__assert_fail@plt+0xbee0>
   1d094:	cmp	r3, #0
   1d098:	cmpeq	r2, #1
   1d09c:	bls	1d0ec <__assert_fail@plt+0xbee0>
   1d0a0:	ldr	ip, [pc, #2056]	; 1d8b0 <__assert_fail@plt+0xc6a4>
   1d0a4:	ldrd	r0, [r8]
   1d0a8:	ldr	r3, [r4, #1120]	; 0x460
   1d0ac:	lsl	r2, r2, #3
   1d0b0:	strd	r0, [ip, r2]
   1d0b4:	cmp	r3, #0
   1d0b8:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1d0bc:	ldrd	r2, [r8]
   1d0c0:	ldr	r0, [pc, #1928]	; 1d850 <__assert_fail@plt+0xc644>
   1d0c4:	bl	10f24 <printf@plt>
   1d0c8:	mov	r2, #5
   1d0cc:	ldr	r1, [pc, #1920]	; 1d854 <__assert_fail@plt+0xc648>
   1d0d0:	mov	r0, #0
   1d0d4:	bl	10f90 <dcgettext@plt>
   1d0d8:	bl	10f24 <printf@plt>
   1d0dc:	b	1ca48 <__assert_fail@plt+0xb83c>
   1d0e0:	cmp	r3, #0
   1d0e4:	cmpeq	r2, #11
   1d0e8:	bls	1d0a0 <__assert_fail@plt+0xbe94>
   1d0ec:	ldrd	r0, [r8]
   1d0f0:	ldr	lr, [pc, #1976]	; 1d8b0 <__assert_fail@plt+0xc6a4>
   1d0f4:	ldr	r5, [r4, #1120]	; 0x460
   1d0f8:	lsl	ip, r2, #3
   1d0fc:	cmp	r5, #0
   1d100:	strd	r0, [lr, ip]
   1d104:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1d108:	ldr	r5, [r4, #1128]	; 0x468
   1d10c:	cmp	r5, #0
   1d110:	beq	1d744 <__assert_fail@plt+0xc538>
   1d114:	ldr	r6, [r4, #1400]	; 0x578
   1d118:	mov	r7, #0
   1d11c:	cmp	r1, r7
   1d120:	cmpeq	r0, r6
   1d124:	bcs	1d744 <__assert_fail@plt+0xc538>
   1d128:	adds	r5, r5, r0
   1d12c:	beq	1d744 <__assert_fail@plt+0xc538>
   1d130:	subs	ip, r2, #1
   1d134:	sbc	r3, r3, #0
   1d138:	str	ip, [sp, #64]	; 0x40
   1d13c:	str	r3, [sp, #68]	; 0x44
   1d140:	ldrd	r2, [sp, #64]	; 0x40
   1d144:	cmp	r3, #0
   1d148:	cmpeq	r2, #28
   1d14c:	bhi	1d744 <__assert_fail@plt+0xc538>
   1d150:	cmp	r2, #28
   1d154:	ldrls	pc, [pc, r2, lsl #2]
   1d158:	b	1d744 <__assert_fail@plt+0xc538>
   1d15c:	muleq	r1, ip, sp
   1d160:	andeq	sp, r1, r4, asr #14
   1d164:	andeq	sp, r1, r4, asr #14
   1d168:	andeq	sp, r1, r4, asr #14
   1d16c:	andeq	sp, r1, r4, asr #14
   1d170:	andeq	sp, r1, r4, asr #14
   1d174:	andeq	sp, r1, r4, asr #14
   1d178:	andeq	sp, r1, r4, asr #14
   1d17c:	andeq	sp, r1, r4, asr #14
   1d180:	andeq	sp, r1, r4, asr #14
   1d184:	andeq	sp, r1, r4, asr #14
   1d188:	andeq	sp, r1, r4, asr #14
   1d18c:	andeq	sp, r1, r4, asr #14
   1d190:	andeq	sp, r1, r0, lsl #27
   1d194:	andeq	sp, r1, r4, ror #26
   1d198:	andeq	sp, r1, r4, asr #14
   1d19c:	andeq	sp, r1, r4, asr #14
   1d1a0:	andeq	sp, r1, r4, asr #14
   1d1a4:	andeq	sp, r1, r4, asr #14
   1d1a8:	andeq	sp, r1, r4, asr #14
   1d1ac:	andeq	sp, r1, r4, asr #14
   1d1b0:	andeq	sp, r1, r4, asr #14
   1d1b4:	andeq	sp, r1, r4, asr #14
   1d1b8:	andeq	sp, r1, r4, asr #14
   1d1bc:	andeq	sp, r1, r4, asr #14
   1d1c0:	andeq	sp, r1, r4, asr #14
   1d1c4:	andeq	sp, r1, r4, asr #14
   1d1c8:	andeq	sp, r1, r4, asr #14
   1d1cc:	andeq	sp, r1, r8, asr #26
   1d1d0:	ldr	r0, [pc, #1664]	; 1d858 <__assert_fail@plt+0xc64c>
   1d1d4:	mov	r1, #0
   1d1d8:	cmp	r3, r1
   1d1dc:	cmpeq	r2, r0
   1d1e0:	bcs	1ca48 <__assert_fail@plt+0xb83c>
   1d1e4:	ldr	r0, [pc, #1648]	; 1d85c <__assert_fail@plt+0xc650>
   1d1e8:	mov	r1, #0
   1d1ec:	cmp	r3, r1
   1d1f0:	cmpeq	r2, r0
   1d1f4:	bne	1d268 <__assert_fail@plt+0xc05c>
   1d1f8:	ldr	r3, [r4, #1120]	; 0x460
   1d1fc:	cmp	r3, #0
   1d200:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1d204:	ldr	r3, [r8]
   1d208:	add	r0, sp, #224	; 0xe0
   1d20c:	str	r3, [sp, #224]	; 0xe0
   1d210:	bl	110ec <gmtime@plt>
   1d214:	subs	ip, r0, #0
   1d218:	beq	1dd24 <__assert_fail@plt+0xcb18>
   1d21c:	ldr	r0, [ip]
   1d220:	ldr	r2, [ip, #16]
   1d224:	ldr	r1, [ip, #20]
   1d228:	ldr	r3, [ip, #12]
   1d22c:	str	r0, [sp, #8]
   1d230:	ldr	r0, [ip, #4]
   1d234:	add	r1, r1, #1888	; 0x760
   1d238:	str	r0, [sp, #4]
   1d23c:	ldr	r0, [ip, #8]
   1d240:	add	r2, r2, #1
   1d244:	str	r0, [sp]
   1d248:	add	r1, r1, #12
   1d24c:	ldr	r0, [pc, #1548]	; 1d860 <__assert_fail@plt+0xc654>
   1d250:	bl	10f24 <printf@plt>
   1d254:	b	1ca48 <__assert_fail@plt+0xb83c>
   1d258:	cmp	r3, #0
   1d25c:	cmpeq	r2, #28
   1d260:	bls	1ca48 <__assert_fail@plt+0xb83c>
   1d264:	b	1d0ec <__assert_fail@plt+0xbee0>
   1d268:	bcc	1cd8c <__assert_fail@plt+0xbb80>
   1d26c:	ldr	r0, [pc, #1520]	; 1d864 <__assert_fail@plt+0xc658>
   1d270:	mov	r1, #0
   1d274:	cmp	r3, r1
   1d278:	cmpeq	r2, r0
   1d27c:	bls	1ca48 <__assert_fail@plt+0xb83c>
   1d280:	b	1cd8c <__assert_fail@plt+0xbb80>
   1d284:	ldr	r5, [pc, #1828]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1d288:	mov	r0, #32
   1d28c:	ldr	r1, [r5]
   1d290:	bl	11158 <putc@plt>
   1d294:	mov	r2, #5
   1d298:	ldrd	r0, [r8, #-8]
   1d29c:	bl	14244 <__assert_fail@plt+0x3038>
   1d2a0:	ldr	r2, [r8, #-8]
   1d2a4:	add	r1, r9, #66	; 0x42
   1d2a8:	add	r0, r9, #23
   1d2ac:	bl	1adf8 <__assert_fail@plt+0x9bec>
   1d2b0:	ldr	r3, [r4]
   1d2b4:	cmp	r3, #0
   1d2b8:	movne	r6, #27
   1d2bc:	moveq	r6, #19
   1d2c0:	mov	r7, r0
   1d2c4:	bl	11080 <strlen@plt>
   1d2c8:	ldr	r3, [pc, #1580]	; 1d8fc <__assert_fail@plt+0xc6f0>
   1d2cc:	mov	r1, r7
   1d2d0:	sub	r2, r6, r0
   1d2d4:	ldr	r0, [pc, #1420]	; 1d868 <__assert_fail@plt+0xc65c>
   1d2d8:	bl	10f24 <printf@plt>
   1d2dc:	ldrd	r2, [r8, #-8]
   1d2e0:	cmp	r3, #0
   1d2e4:	cmpeq	r2, #30
   1d2e8:	beq	1d564 <__assert_fail@plt+0xc358>
   1d2ec:	bls	1d374 <__assert_fail@plt+0xc168>
   1d2f0:	ldr	r0, [pc, #1300]	; 1d80c <__assert_fail@plt+0xc600>
   1d2f4:	mov	r1, #0
   1d2f8:	cmp	r3, r1
   1d2fc:	cmpeq	r2, r0
   1d300:	bhi	1d3c4 <__assert_fail@plt+0xc1b8>
   1d304:	ldr	r0, [pc, #1284]	; 1d810 <__assert_fail@plt+0xc604>
   1d308:	mov	r1, #0
   1d30c:	cmp	r3, r1
   1d310:	cmpeq	r2, r0
   1d314:	bcs	1cf14 <__assert_fail@plt+0xbd08>
   1d318:	ldr	r0, [pc, #1268]	; 1d814 <__assert_fail@plt+0xc608>
   1d31c:	mov	r1, #0
   1d320:	cmp	r3, r1
   1d324:	cmpeq	r2, r0
   1d328:	bhi	1ca00 <__assert_fail@plt+0xb7f4>
   1d32c:	ldr	r0, [pc, #1316]	; 1d858 <__assert_fail@plt+0xc64c>
   1d330:	mov	r1, #0
   1d334:	cmp	r3, r1
   1d338:	cmpeq	r2, r0
   1d33c:	bcs	1d36c <__assert_fail@plt+0xc160>
   1d340:	ldr	r0, [pc, #1300]	; 1d85c <__assert_fail@plt+0xc650>
   1d344:	mov	r1, #0
   1d348:	cmp	r3, r1
   1d34c:	cmpeq	r2, r0
   1d350:	beq	1d1f8 <__assert_fail@plt+0xbfec>
   1d354:	bcc	1cd8c <__assert_fail@plt+0xbb80>
   1d358:	ldr	r0, [pc, #1284]	; 1d864 <__assert_fail@plt+0xc658>
   1d35c:	mov	r1, #0
   1d360:	cmp	r3, r1
   1d364:	cmpeq	r2, r0
   1d368:	bhi	1cd8c <__assert_fail@plt+0xbb80>
   1d36c:	ldr	r3, [r4, #1120]	; 0x460
   1d370:	b	1d0b4 <__assert_fail@plt+0xbea8>
   1d374:	cmp	r3, #0
   1d378:	cmpeq	r2, #19
   1d37c:	bls	1d070 <__assert_fail@plt+0xbe64>
   1d380:	cmp	r3, #0
   1d384:	cmpeq	r2, #26
   1d388:	bhi	1d3b4 <__assert_fail@plt+0xc1a8>
   1d38c:	cmp	r3, #0
   1d390:	cmpeq	r2, #25
   1d394:	bcs	1ce64 <__assert_fail@plt+0xbc58>
   1d398:	cmp	r3, #0
   1d39c:	cmpeq	r2, #23
   1d3a0:	bls	1d030 <__assert_fail@plt+0xbe24>
   1d3a4:	ldr	r3, [r4, #1120]	; 0x460
   1d3a8:	cmp	r3, #0
   1d3ac:	bne	1cfb0 <__assert_fail@plt+0xbda4>
   1d3b0:	b	1ca48 <__assert_fail@plt+0xb83c>
   1d3b4:	cmp	r3, #0
   1d3b8:	cmpeq	r2, #28
   1d3bc:	bls	1d36c <__assert_fail@plt+0xc160>
   1d3c0:	b	1d0ec <__assert_fail@plt+0xbee0>
   1d3c4:	mov	r1, #0
   1d3c8:	mvn	r0, #-1879048190	; 0x90000002
   1d3cc:	cmp	r3, r1
   1d3d0:	cmpeq	r2, r0
   1d3d4:	beq	1cfd4 <__assert_fail@plt+0xbdc8>
   1d3d8:	bhi	1ced4 <__assert_fail@plt+0xbcc8>
   1d3dc:	mov	r1, #0
   1d3e0:	mvn	r0, #-1879048187	; 0x90000005
   1d3e4:	cmp	r3, r1
   1d3e8:	cmpeq	r2, r0
   1d3ec:	bls	1ce3c <__assert_fail@plt+0xbc30>
   1d3f0:	mov	r1, #0
   1d3f4:	mvn	r0, #-1879048188	; 0x90000004
   1d3f8:	cmp	r3, r1
   1d3fc:	cmpeq	r2, r0
   1d400:	bne	1cd8c <__assert_fail@plt+0xbb80>
   1d404:	ldr	r3, [r4, #1120]	; 0x460
   1d408:	cmp	r3, #0
   1d40c:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1d410:	mov	r2, #5
   1d414:	ldr	r1, [pc, #1032]	; 1d824 <__assert_fail@plt+0xc618>
   1d418:	mov	r0, #0
   1d41c:	bl	10f90 <dcgettext@plt>
   1d420:	bl	10f24 <printf@plt>
   1d424:	ldrd	r6, [r8]
   1d428:	orrs	r3, r6, r7
   1d42c:	beq	1d77c <__assert_fail@plt+0xc570>
   1d430:	and	r3, r6, #1
   1d434:	cmp	r3, #0
   1d438:	mov	r5, r6
   1d43c:	bne	1e178 <__assert_fail@plt+0xcf6c>
   1d440:	tst	r5, #2
   1d444:	bne	1e168 <__assert_fail@plt+0xcf5c>
   1d448:	tst	r5, #4
   1d44c:	bne	1e1e8 <__assert_fail@plt+0xcfdc>
   1d450:	tst	r5, #8
   1d454:	bne	1e1d8 <__assert_fail@plt+0xcfcc>
   1d458:	tst	r5, #16
   1d45c:	bne	1e1c8 <__assert_fail@plt+0xcfbc>
   1d460:	tst	r5, #32
   1d464:	bne	1e1b8 <__assert_fail@plt+0xcfac>
   1d468:	tst	r5, #64	; 0x40
   1d46c:	bne	1e268 <__assert_fail@plt+0xd05c>
   1d470:	tst	r5, #128	; 0x80
   1d474:	bne	1e258 <__assert_fail@plt+0xd04c>
   1d478:	tst	r5, #256	; 0x100
   1d47c:	bne	1e248 <__assert_fail@plt+0xd03c>
   1d480:	tst	r5, #512	; 0x200
   1d484:	bne	1e238 <__assert_fail@plt+0xd02c>
   1d488:	tst	r5, #1024	; 0x400
   1d48c:	bne	1e228 <__assert_fail@plt+0xd01c>
   1d490:	tst	r5, #2048	; 0x800
   1d494:	bne	1e218 <__assert_fail@plt+0xd00c>
   1d498:	tst	r5, #4096	; 0x1000
   1d49c:	bne	1e208 <__assert_fail@plt+0xcffc>
   1d4a0:	tst	r5, #8192	; 0x2000
   1d4a4:	bne	1e1f8 <__assert_fail@plt+0xcfec>
   1d4a8:	tst	r5, #16384	; 0x4000
   1d4ac:	bne	1e368 <__assert_fail@plt+0xd15c>
   1d4b0:	tst	r5, #32768	; 0x8000
   1d4b4:	bne	1e358 <__assert_fail@plt+0xd14c>
   1d4b8:	tst	r5, #65536	; 0x10000
   1d4bc:	bne	1e348 <__assert_fail@plt+0xd13c>
   1d4c0:	tst	r5, #131072	; 0x20000
   1d4c4:	bne	1e338 <__assert_fail@plt+0xd12c>
   1d4c8:	tst	r5, #262144	; 0x40000
   1d4cc:	bne	1e328 <__assert_fail@plt+0xd11c>
   1d4d0:	tst	r5, #524288	; 0x80000
   1d4d4:	bne	1e318 <__assert_fail@plt+0xd10c>
   1d4d8:	tst	r5, #1048576	; 0x100000
   1d4dc:	bne	1e308 <__assert_fail@plt+0xd0fc>
   1d4e0:	tst	r5, #2097152	; 0x200000
   1d4e4:	bne	1e2f8 <__assert_fail@plt+0xd0ec>
   1d4e8:	tst	r5, #4194304	; 0x400000
   1d4ec:	bne	1e2e8 <__assert_fail@plt+0xd0dc>
   1d4f0:	tst	r5, #8388608	; 0x800000
   1d4f4:	bne	1e2d8 <__assert_fail@plt+0xd0cc>
   1d4f8:	tst	r5, #16777216	; 0x1000000
   1d4fc:	bne	1e2c8 <__assert_fail@plt+0xd0bc>
   1d500:	tst	r5, #33554432	; 0x2000000
   1d504:	bne	1e2b8 <__assert_fail@plt+0xd0ac>
   1d508:	tst	r5, #67108864	; 0x4000000
   1d50c:	bne	1e2a8 <__assert_fail@plt+0xd09c>
   1d510:	tst	r5, #134217728	; 0x8000000
   1d514:	bne	1e298 <__assert_fail@plt+0xd08c>
   1d518:	tst	r5, #268435456	; 0x10000000
   1d51c:	bne	1e288 <__assert_fail@plt+0xd07c>
   1d520:	tst	r5, #536870912	; 0x20000000
   1d524:	bne	1e278 <__assert_fail@plt+0xd06c>
   1d528:	tst	r5, #1073741824	; 0x40000000
   1d52c:	beq	1cce4 <__assert_fail@plt+0xbad8>
   1d530:	ldr	r0, [pc, #820]	; 1d86c <__assert_fail@plt+0xc660>
   1d534:	bl	10f24 <printf@plt>
   1d538:	eor	r5, r5, #1073741824	; 0x40000000
   1d53c:	b	1cce4 <__assert_fail@plt+0xbad8>
   1d540:	ldr	r3, [r4, #1120]	; 0x460
   1d544:	cmp	r3, #0
   1d548:	beq	1ca64 <__assert_fail@plt+0xb858>
   1d54c:	mov	r2, #5
   1d550:	ldr	r1, [pc, #792]	; 1d870 <__assert_fail@plt+0xc664>
   1d554:	mov	r0, #0
   1d558:	bl	10f90 <dcgettext@plt>
   1d55c:	bl	10f24 <printf@plt>
   1d560:	b	1ca64 <__assert_fail@plt+0xb858>
   1d564:	ldr	r3, [r4, #1120]	; 0x460
   1d568:	cmp	r3, #0
   1d56c:	beq	1ca48 <__assert_fail@plt+0xb83c>
   1d570:	ldrd	r0, [r8]
   1d574:	orrs	r3, r0, r1
   1d578:	beq	1ccf8 <__assert_fail@plt+0xbaec>
   1d57c:	rsbs	r2, r0, #0
   1d580:	rsc	r3, r1, #0
   1d584:	and	r7, r2, r0
   1d588:	and	r6, r3, r1
   1d58c:	bic	ip, r0, r7
   1d590:	bic	r3, r1, r6
   1d594:	str	ip, [sp, #48]	; 0x30
   1d598:	str	r3, [sp, #52]	; 0x34
   1d59c:	ldr	r5, [pc, #1036]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1d5a0:	ldrd	sl, [sp, #48]	; 0x30
   1d5a4:	str	r8, [sp, #24]
   1d5a8:	str	r9, [sp, #32]
   1d5ac:	subs	r8, r7, #1
   1d5b0:	sbc	r9, r6, #0
   1d5b4:	cmp	r9, #0
   1d5b8:	cmpeq	r8, #15
   1d5bc:	bhi	1d760 <__assert_fail@plt+0xc554>
   1d5c0:	cmp	r8, #15
   1d5c4:	ldrls	pc, [pc, r8, lsl #2]
   1d5c8:	b	1d760 <__assert_fail@plt+0xc554>
   1d5cc:	andeq	sp, r1, r4, asr #13
   1d5d0:	andeq	sp, r1, ip, lsr #13
   1d5d4:	andeq	sp, r1, r0, ror #14
   1d5d8:	muleq	r1, r4, r6
   1d5dc:	andeq	sp, r1, r0, ror #14
   1d5e0:	andeq	sp, r1, r0, ror #14
   1d5e4:	andeq	sp, r1, r0, ror #14
   1d5e8:	andeq	sp, r1, ip, ror r6
   1d5ec:	andeq	sp, r1, r0, ror #14
   1d5f0:	andeq	sp, r1, r0, ror #14
   1d5f4:	andeq	sp, r1, r0, ror #14
   1d5f8:	andeq	sp, r1, r0, ror #14
   1d5fc:	andeq	sp, r1, r0, ror #14
   1d600:	andeq	sp, r1, r0, ror #14
   1d604:	andeq	sp, r1, r0, ror #14
   1d608:	andeq	sp, r1, r0, lsr r6
   1d60c:	ldr	r5, [r4, #692]	; 0x2b4
   1d610:	cmp	r5, #0
   1d614:	bne	1dcd4 <__assert_fail@plt+0xcac8>
   1d618:	mov	r2, #5
   1d61c:	ldr	r1, [pc, #592]	; 1d874 <__assert_fail@plt+0xc668>
   1d620:	mov	r0, #0
   1d624:	bl	10f90 <dcgettext@plt>
   1d628:	bl	10f24 <printf@plt>
   1d62c:	b	1c988 <__assert_fail@plt+0xb77c>
   1d630:	ldr	r3, [r5]
   1d634:	mov	r2, #10
   1d638:	mov	r1, #1
   1d63c:	ldr	r0, [pc, #564]	; 1d878 <__assert_fail@plt+0xc66c>
   1d640:	bl	10fcc <fwrite@plt>
   1d644:	orrs	r3, sl, fp
   1d648:	mov	r0, #32
   1d64c:	beq	1dd10 <__assert_fail@plt+0xcb04>
   1d650:	rsbs	r2, sl, #0
   1d654:	and	r7, r2, sl
   1d658:	rsc	r3, fp, #0
   1d65c:	and	r6, r3, fp
   1d660:	bic	r1, sl, r7
   1d664:	bic	r2, fp, r6
   1d668:	mov	sl, r1
   1d66c:	ldr	r1, [r5]
   1d670:	mov	fp, r2
   1d674:	bl	11158 <putc@plt>
   1d678:	b	1d5ac <__assert_fail@plt+0xc3a0>
   1d67c:	ldr	r3, [r5]
   1d680:	mov	r2, #8
   1d684:	mov	r1, #1
   1d688:	ldr	r0, [pc, #492]	; 1d87c <__assert_fail@plt+0xc670>
   1d68c:	bl	10fcc <fwrite@plt>
   1d690:	b	1d644 <__assert_fail@plt+0xc438>
   1d694:	ldr	r3, [r5]
   1d698:	mov	r2, #7
   1d69c:	mov	r1, #1
   1d6a0:	ldr	r0, [pc, #472]	; 1d880 <__assert_fail@plt+0xc674>
   1d6a4:	bl	10fcc <fwrite@plt>
   1d6a8:	b	1d644 <__assert_fail@plt+0xc438>
   1d6ac:	ldr	r3, [r5]
   1d6b0:	mov	r2, #8
   1d6b4:	mov	r1, #1
   1d6b8:	ldr	r0, [pc, #452]	; 1d884 <__assert_fail@plt+0xc678>
   1d6bc:	bl	10fcc <fwrite@plt>
   1d6c0:	b	1d644 <__assert_fail@plt+0xc438>
   1d6c4:	ldr	r3, [r5]
   1d6c8:	mov	r2, #6
   1d6cc:	mov	r1, #1
   1d6d0:	ldr	r0, [pc, #432]	; 1d888 <__assert_fail@plt+0xc67c>
   1d6d4:	bl	10fcc <fwrite@plt>
   1d6d8:	b	1d644 <__assert_fail@plt+0xc438>
   1d6dc:	mov	r2, #5
   1d6e0:	ldr	r1, [pc, #316]	; 1d824 <__assert_fail@plt+0xc618>
   1d6e4:	mov	r0, #0
   1d6e8:	bl	10f90 <dcgettext@plt>
   1d6ec:	bl	10f24 <printf@plt>
   1d6f0:	ldrd	r6, [r8]
   1d6f4:	orrs	r3, r6, r7
   1d6f8:	beq	1d77c <__assert_fail@plt+0xc570>
   1d6fc:	and	r3, r6, #1
   1d700:	cmp	r3, #0
   1d704:	mov	r5, r6
   1d708:	bne	1e1a8 <__assert_fail@plt+0xcf9c>
   1d70c:	tst	r5, #2
   1d710:	beq	1cce4 <__assert_fail@plt+0xbad8>
   1d714:	ldr	r0, [pc, #368]	; 1d88c <__assert_fail@plt+0xc680>
   1d718:	bl	10f24 <printf@plt>
   1d71c:	eor	r5, r5, #2
   1d720:	b	1cce4 <__assert_fail@plt+0xbad8>
   1d724:	ldrd	r0, [r8]
   1d728:	mov	r2, #4
   1d72c:	bl	14244 <__assert_fail@plt+0x3038>
   1d730:	ldr	r0, [pc, #344]	; 1d890 <__assert_fail@plt+0xc684>
   1d734:	bl	10f24 <printf@plt>
   1d738:	ldrd	r0, [r8]
   1d73c:	adds	r0, r0, #24
   1d740:	adc	r1, r1, #0
   1d744:	mov	r2, #4
   1d748:	bl	14244 <__assert_fail@plt+0x3038>
   1d74c:	ldr	r5, [pc, #604]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1d750:	mov	r0, #10
   1d754:	ldr	r1, [r5]
   1d758:	bl	11158 <putc@plt>
   1d75c:	b	1ca48 <__assert_fail@plt+0xb83c>
   1d760:	mov	r2, #5
   1d764:	ldr	r1, [pc, #296]	; 1d894 <__assert_fail@plt+0xc688>
   1d768:	mov	r0, #0
   1d76c:	bl	10f90 <dcgettext@plt>
   1d770:	ldr	r1, [r5]
   1d774:	bl	111c4 <fputs@plt>
   1d778:	b	1d644 <__assert_fail@plt+0xc438>
   1d77c:	mov	r2, #5
   1d780:	ldr	r1, [pc, #272]	; 1d898 <__assert_fail@plt+0xc68c>
   1d784:	mov	r0, #0
   1d788:	bl	10f90 <dcgettext@plt>
   1d78c:	bl	10f24 <printf@plt>
   1d790:	b	1ca48 <__assert_fail@plt+0xb83c>
   1d794:	ldrd	r0, [r8]
   1d798:	b	1cd30 <__assert_fail@plt+0xbb24>
   1d79c:	ldr	r1, [pc, #248]	; 1d89c <__assert_fail@plt+0xc690>
   1d7a0:	mov	r2, #5
   1d7a4:	mov	r0, #0
   1d7a8:	bl	10f90 <dcgettext@plt>
   1d7ac:	ldr	r1, [sp, #248]	; 0xf8
   1d7b0:	bl	548ac <error@@Base>
   1d7b4:	mov	r5, #0
   1d7b8:	mov	r0, r5
   1d7bc:	add	sp, sp, #356	; 0x164
   1d7c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7c4:	subs	ip, r2, r0
   1d7c8:	sbc	r3, r3, r1
   1d7cc:	str	ip, [sp, #24]
   1d7d0:	str	r3, [sp, #28]
   1d7d4:	b	1cc24 <__assert_fail@plt+0xba18>
   1d7d8:	mov	r8, #24
   1d7dc:	mov	r9, #0
   1d7e0:	add	ip, sp, #280	; 0x118
   1d7e4:	mov	r2, r7
   1d7e8:	add	r1, sp, #224	; 0xe0
   1d7ec:	mov	r0, fp
   1d7f0:	strd	r8, [ip]
   1d7f4:	str	r3, [sp, #224]	; 0xe0
   1d7f8:	bl	17bf4 <__assert_fail@plt+0x69e8>
   1d7fc:	b	1cc64 <__assert_fail@plt+0xba58>
   1d800:	andeq	sl, r9, r8, lsr r4
   1d804:	andeq	r5, r6, r8, asr #12
   1d808:	andeq	lr, r9, ip, asr sp
   1d80c:	svcvs	0x00fffefc
   1d810:	svcvs	0x00fffefa
   1d814:	svcvs	0x00fffdfb
   1d818:	svcvs	0x00fffdfc
   1d81c:			; <UNDEFINED> instruction: 0x000656b0
   1d820:	svcvs	0x00fffdfd
   1d824:	andeq	r5, r6, r8, ror #17
   1d828:	andeq	r5, r6, r8, lsr #13
   1d82c:	svcvs	0x00fffef5
   1d830:	andeq	sl, r9, r8, asr #19
   1d834:	andls	r0, r0, r0, lsl r0
   1d838:	andvs	r0, r0, r5, lsr r0
   1d83c:	andvs	r0, r0, r5, lsl r0
   1d840:	ldrdeq	r5, [r6], -ip
   1d844:	svcvs	0x00fffefb
   1d848:			; <UNDEFINED> instruction: 0x000658b4
   1d84c:	andeq	fp, r6, r8, lsr #5
   1d850:	andeq	r2, r6, r8, ror sp
   1d854:	andeq	sl, r6, r0, lsl r2
   1d858:	svcvs	0x00fffdf9
   1d85c:	svcvs	0x00fffdf5
   1d860:	andeq	r5, r6, r0, lsl fp
   1d864:	svcvs	0x00fffdf7
   1d868:	andeq	r5, r6, r4, asr r8
   1d86c:	andeq	r5, r6, ip, asr sl
   1d870:	andeq	r5, r6, ip, lsl r6
   1d874:	andeq	r5, r6, ip, lsr #15
   1d878:	andeq	r5, r6, r8, ror #16
   1d87c:	andeq	r4, r6, r0, lsl #20
   1d880:	strdeq	r4, [r6], -r0
   1d884:	andeq	ip, r7, r4, lsr #32
   1d888:	andeq	r5, r6, r0, ror #16
   1d88c:	andeq	r5, r6, r4, lsl #18
   1d890:	andeq	r5, r6, r8, ror #22
   1d894:	andeq	r5, r6, r4, ror r8
   1d898:	strdeq	r5, [r6], -r0
   1d89c:	muleq	r6, r0, r6
   1d8a0:	svcvs	0x00fffdff
   1d8a4:	svcvs	0x00fffdfe
   1d8a8:	svcvs	0x00fffeff
   1d8ac:	andeq	r5, r6, r8, lsr r7
   1d8b0:	andeq	sl, r9, r8, lsr #17
   1d8b4:	andeq	r5, r6, r0, lsr #14
   1d8b8:	andeq	r5, r6, ip, asr r7
   1d8bc:	andeq	lr, r9, ip, asr sp
   1d8c0:	muleq	r6, r0, r8
   1d8c4:	andeq	r5, r6, ip, lsl r8
   1d8c8:	andeq	r5, r6, r4, ror #15
   1d8cc:	strdeq	r5, [r6], -r8
   1d8d0:	andeq	r5, r6, r4, asr #21
   1d8d4:			; <UNDEFINED> instruction: 0x00065ab0
   1d8d8:	muleq	r6, r8, sl
   1d8dc:	andeq	r5, r6, r8, ror #20
   1d8e0:	andeq	fp, r9, r4, asr #11
   1d8e4:	andeq	r5, r6, r0, lsl #21
   1d8e8:	andeq	r5, r6, r4, ror #13
   1d8ec:	andeq	r5, r6, r0, ror #17
   1d8f0:	muleq	r5, r4, r1
   1d8f4:	andeq	r9, r5, r4, lsl r2
   1d8f8:	muleq	r8, r8, sl
   1d8fc:	andeq	r8, r6, ip, ror ip
   1d900:	andeq	fp, r6, ip, ror #2
   1d904:	andeq	r9, r5, r8, asr r1
   1d908:	andeq	r2, r6, r8, asr sp
   1d90c:	andeq	r5, r6, r8, asr #22
   1d910:	andeq	r3, r6, ip, lsr #32
   1d914:	andeq	r5, r6, r8, asr fp
   1d918:	andeq	r2, r6, r0, ror sp
   1d91c:	andeq	r5, r6, r8, asr r6
   1d920:	andeq	r5, r6, r0, lsr #17
   1d924:	andeq	r5, r6, ip, ror r8
   1d928:	ldrdeq	r5, [r6], -r0
   1d92c:	andeq	r5, r6, r0, lsr r9
   1d930:	andeq	r5, r6, r8, lsr #18
   1d934:	andeq	r5, r6, ip, lsl r9
   1d938:	andeq	r5, r6, r0, lsl r9
   1d93c:	strdeq	r5, [r6], -r8
   1d940:	andeq	r5, r6, r8, asr r9
   1d944:	andeq	r5, r6, ip, asr #18
   1d948:	andeq	r5, r6, r0, asr #18
   1d94c:	andeq	r5, r6, r8, lsr r9
   1d950:	andeq	r5, r6, r4, lsr #19
   1d954:	muleq	r6, ip, r9
   1d958:	muleq	r6, r0, r9
   1d95c:	andeq	r5, r6, r4, lsl #19
   1d960:	andeq	r5, r6, ip, ror r9
   1d964:	andeq	r5, r6, r4, ror r9
   1d968:	andeq	r5, r6, ip, ror #18
   1d96c:	andeq	r5, r6, r4, ror #18
   1d970:	andeq	r5, r6, r0, asr sl
   1d974:	andeq	r5, r6, r8, asr #20
   1d978:	andeq	r5, r6, r0, asr #20
   1d97c:	andeq	r5, r6, r8, lsr sl
   1d980:	andeq	r5, r6, ip, lsr #20
   1d984:	andeq	r5, r6, r0, lsr #20
   1d988:	andeq	r5, r6, r4, lsl sl
   1d98c:	andeq	r5, r6, r8, lsl #20
   1d990:	andeq	r5, r6, r0, lsl #20
   1d994:	strdeq	r5, [r6], -r8
   1d998:	andeq	r5, r6, ip, ror #19
   1d99c:	andeq	r5, r6, r0, ror #19
   1d9a0:	ldrdeq	r5, [r6], -r4
   1d9a4:	andeq	r5, r6, r8, asr #19
   1d9a8:			; <UNDEFINED> instruction: 0x000659bc
   1d9ac:			; <UNDEFINED> instruction: 0x000659b0
   1d9b0:	andeq	sl, r9, ip, lsr #8
   1d9b4:	andeq	r5, r6, r0, lsl ip
   1d9b8:	andeq	r5, r6, r4, lsl #24
   1d9bc:	strdeq	r5, [r6], -r8
   1d9c0:	andeq	r5, r6, ip, ror #23
   1d9c4:	andeq	r5, r6, r0, ror #23
   1d9c8:	ldrdeq	r5, [r6], -r4
   1d9cc:	andeq	r5, r6, r8, asr #23
   1d9d0:	andeq	r5, r6, r0, asr #23
   1d9d4:			; <UNDEFINED> instruction: 0x00065bb4
   1d9d8:	andeq	r5, r6, ip, lsr #23
   1d9dc:	andeq	r5, r6, r0, lsr #23
   1d9e0:	muleq	r6, r4, fp
   1d9e4:	andeq	r5, r6, r8, lsl #23
   1d9e8:	andeq	r5, r6, ip, ror fp
   1d9ec:	andeq	r5, r6, r0, ror fp
   1d9f0:	andeq	r7, r6, r8, lsr r4
   1d9f4:	andeq	r5, r6, r0, ror r7
   1d9f8:	andeq	r3, r6, ip
   1d9fc:	andeq	r5, r6, r0, lsr fp
   1da00:	ldr	r3, [r4, #688]	; 0x2b0
   1da04:	ldr	r5, [r4, #684]	; 0x2ac
   1da08:	add	r3, r5, r3, lsl #4
   1da0c:	cmp	r5, r3
   1da10:	bcs	1c97c <__assert_fail@plt+0xb770>
   1da14:	ldr	r8, [pc, #-380]	; 1d8a0 <__assert_fail@plt+0xc694>
   1da18:	mov	r9, #0
   1da1c:	b	1da64 <__assert_fail@plt+0xc858>
   1da20:	ldr	r0, [pc, #-388]	; 1d8a4 <__assert_fail@plt+0xc698>
   1da24:	mov	r1, #0
   1da28:	cmp	r3, r1
   1da2c:	cmpeq	r2, r0
   1da30:	ldreq	sl, [r5, #8]
   1da34:	beq	1da4c <__assert_fail@plt+0xc840>
   1da38:	ldr	r0, [pc, #-408]	; 1d8a8 <__assert_fail@plt+0xc69c>
   1da3c:	mov	r1, #0
   1da40:	cmp	r3, r1
   1da44:	cmpeq	r2, r0
   1da48:	beq	1dcb4 <__assert_fail@plt+0xcaa8>
   1da4c:	ldr	r2, [r4, #688]	; 0x2b0
   1da50:	ldr	r3, [r4, #684]	; 0x2ac
   1da54:	add	r5, r5, #16
   1da58:	add	r3, r3, r2, lsl #4
   1da5c:	cmp	r5, r3
   1da60:	bcs	1db88 <__assert_fail@plt+0xc97c>
   1da64:	ldrd	r2, [r5]
   1da68:	cmp	r3, r9
   1da6c:	cmpeq	r2, r8
   1da70:	bne	1da20 <__assert_fail@plt+0xc814>
   1da74:	ldrd	r6, [r5, #8]
   1da78:	ldr	r1, [pc, #-468]	; 1d8ac <__assert_fail@plt+0xc6a0>
   1da7c:	mov	r2, #5
   1da80:	cmp	r7, #0
   1da84:	cmpeq	r6, #4
   1da88:	mov	r0, #0
   1da8c:	beq	1da4c <__assert_fail@plt+0xc840>
   1da90:	bl	10f90 <dcgettext@plt>
   1da94:	ldr	r1, [r5, #8]
   1da98:	bl	548ac <error@@Base>
   1da9c:	b	1da4c <__assert_fail@plt+0xc840>
   1daa0:	ldr	r3, [r4, #688]	; 0x2b0
   1daa4:	ldr	r6, [r4, #684]	; 0x2ac
   1daa8:	add	r3, r6, r3, lsl #4
   1daac:	cmp	r6, r3
   1dab0:	bcs	1c970 <__assert_fail@plt+0xb764>
   1dab4:	add	r6, r6, #16
   1dab8:	ldrd	r2, [r6, #-16]
   1dabc:	ldr	r7, [pc, #-532]	; 1d8b0 <__assert_fail@plt+0xc6a4>
   1dac0:	mov	r8, #0
   1dac4:	cmp	r3, #0
   1dac8:	cmpeq	r2, #5
   1dacc:	mov	r9, #0
   1dad0:	beq	1db00 <__assert_fail@plt+0xc8f4>
   1dad4:	ldr	r1, [r4, #688]	; 0x2b0
   1dad8:	ldr	r3, [r4, #684]	; 0x2ac
   1dadc:	add	r2, r6, #16
   1dae0:	add	r3, r3, r1, lsl #4
   1dae4:	cmp	r3, r6
   1dae8:	mov	r6, r2
   1daec:	bls	1c970 <__assert_fail@plt+0xb764>
   1daf0:	ldrd	r2, [r6, #-16]
   1daf4:	cmp	r3, #0
   1daf8:	cmpeq	r2, #5
   1dafc:	bne	1dad4 <__assert_fail@plt+0xc8c8>
   1db00:	ldrd	r2, [r6, #-8]
   1db04:	mov	r0, fp
   1db08:	strd	r8, [sp]
   1db0c:	strd	r2, [r7, #40]	; 0x28
   1db10:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   1db14:	ldr	r3, [r4, #656]	; 0x290
   1db18:	cmp	r3, #0
   1db1c:	ldrne	r5, [r4, #1392]	; 0x570
   1db20:	ldreq	r5, [fp, #8]
   1db24:	sub	r5, r5, r0
   1db28:	cmp	r5, #0
   1db2c:	ble	1dddc <__assert_fail@plt+0xcbd0>
   1db30:	mov	sl, r0
   1db34:	mov	r2, #5
   1db38:	ldr	r1, [pc, #-652]	; 1d8b4 <__assert_fail@plt+0xc6a8>
   1db3c:	mov	r0, #0
   1db40:	bl	10f90 <dcgettext@plt>
   1db44:	mov	r8, r5
   1db48:	asr	r9, r5, #31
   1db4c:	mov	r6, #1
   1db50:	mov	r7, #0
   1db54:	mov	r3, sl
   1db58:	strd	r8, [sp, #8]
   1db5c:	strd	r6, [sp]
   1db60:	ldr	r2, [sp, #36]	; 0x24
   1db64:	ldr	r1, [sp, #32]
   1db68:	str	r0, [sp, #16]
   1db6c:	mov	r0, #0
   1db70:	bl	1717c <__assert_fail@plt+0x5f70>
   1db74:	cmp	r0, #0
   1db78:	moveq	r5, #0
   1db7c:	str	r5, [r4, #1400]	; 0x578
   1db80:	str	r0, [r4, #1128]	; 0x468
   1db84:	b	1c970 <__assert_fail@plt+0xb764>
   1db88:	ldr	r5, [r4, #1408]	; 0x580
   1db8c:	cmp	r5, #0
   1db90:	cmpne	sl, #0
   1db94:	beq	1c97c <__assert_fail@plt+0xb770>
   1db98:	mov	r2, #5
   1db9c:	ldr	r1, [pc, #-748]	; 1d8b8 <__assert_fail@plt+0xc6ac>
   1dba0:	mov	r0, #0
   1dba4:	bl	10f90 <dcgettext@plt>
   1dba8:	mov	r6, #1
   1dbac:	mov	r7, #0
   1dbb0:	mov	ip, #0
   1dbb4:	strd	r6, [sp]
   1dbb8:	str	sl, [sp, #8]
   1dbbc:	mov	r3, r5
   1dbc0:	ldr	r2, [sp, #36]	; 0x24
   1dbc4:	ldr	r1, [sp, #32]
   1dbc8:	str	ip, [sp, #12]
   1dbcc:	str	r0, [sp, #16]
   1dbd0:	mov	r0, ip
   1dbd4:	bl	1717c <__assert_fail@plt+0x5f70>
   1dbd8:	subs	r6, r0, #0
   1dbdc:	beq	1d7b4 <__assert_fail@plt+0xc5a8>
   1dbe0:	mov	r0, sl
   1dbe4:	bl	11020 <malloc@plt>
   1dbe8:	cmp	r0, #0
   1dbec:	mov	r5, r0
   1dbf0:	str	r0, [r4, #1404]	; 0x57c
   1dbf4:	beq	1e69c <__assert_fail@plt+0xd490>
   1dbf8:	lsr	sl, sl, #2
   1dbfc:	str	sl, [r4, #1412]	; 0x584
   1dc00:	add	sl, r0, sl, lsl #2
   1dc04:	cmp	r0, sl
   1dc08:	movcc	r7, r6
   1dc0c:	ldrcc	r8, [pc, #-856]	; 1d8bc <__assert_fail@plt+0xc6b0>
   1dc10:	bcs	1dc58 <__assert_fail@plt+0xca4c>
   1dc14:	ldr	r3, [r8]
   1dc18:	mov	r0, r7
   1dc1c:	mov	r1, #2
   1dc20:	blx	r3
   1dc24:	mov	r1, #2
   1dc28:	ldr	r3, [r8]
   1dc2c:	add	r5, r5, #4
   1dc30:	strh	r0, [r5, #-4]
   1dc34:	add	r0, r7, r1
   1dc38:	blx	r3
   1dc3c:	ldr	r2, [r4, #1412]	; 0x584
   1dc40:	ldr	r3, [r4, #1404]	; 0x57c
   1dc44:	add	r7, r7, #4
   1dc48:	add	r3, r3, r2, lsl #2
   1dc4c:	strh	r0, [r5, #-2]
   1dc50:	cmp	r5, r3
   1dc54:	bcc	1dc14 <__assert_fail@plt+0xca08>
   1dc58:	mov	r0, r6
   1dc5c:	bl	10f54 <free@plt>
   1dc60:	b	1c97c <__assert_fail@plt+0xb770>
   1dc64:	mov	r1, #0
   1dc68:	mvn	r0, #-2147483646	; 0x80000002
   1dc6c:	cmp	r3, r1
   1dc70:	cmpeq	r2, r0
   1dc74:	beq	1e138 <__assert_fail@plt+0xcf2c>
   1dc78:	mov	r1, #0
   1dc7c:	mvn	r0, #-2147483648	; 0x80000000
   1dc80:	cmp	r3, r1
   1dc84:	cmpeq	r2, r0
   1dc88:	bne	1cf74 <__assert_fail@plt+0xbd68>
   1dc8c:	mov	r2, #5
   1dc90:	ldr	r1, [pc, #-984]	; 1d8c0 <__assert_fail@plt+0xc6b4>
   1dc94:	mov	r0, #0
   1dc98:	bl	10f90 <dcgettext@plt>
   1dc9c:	bl	10f24 <printf@plt>
   1dca0:	b	1cf74 <__assert_fail@plt+0xbd68>
   1dca4:	cmp	r1, #8
   1dca8:	beq	1de90 <__assert_fail@plt+0xcc84>
   1dcac:	ldr	r5, [pc, #-772]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1dcb0:	b	1cfa4 <__assert_fail@plt+0xbd98>
   1dcb4:	mov	r1, #0
   1dcb8:	ldrd	r2, [r5, #8]
   1dcbc:	mov	r0, fp
   1dcc0:	str	sl, [sp]
   1dcc4:	str	r1, [sp, #4]
   1dcc8:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   1dccc:	str	r0, [r4, #1408]	; 0x580
   1dcd0:	b	1da4c <__assert_fail@plt+0xc840>
   1dcd4:	ldr	r6, [r4, #688]	; 0x2b0
   1dcd8:	mov	r2, #5
   1dcdc:	mov	r3, r6
   1dce0:	str	r2, [sp]
   1dce4:	ldr	r1, [pc, #-1064]	; 1d8c4 <__assert_fail@plt+0xc6b8>
   1dce8:	ldr	r2, [pc, #-1064]	; 1d8c8 <__assert_fail@plt+0xc6bc>
   1dcec:	mov	r0, #0
   1dcf0:	bl	11200 <dcngettext@plt>
   1dcf4:	mov	r2, r6
   1dcf8:	mov	r1, r5
   1dcfc:	bl	10f24 <printf@plt>
   1dd00:	ldr	r3, [r4, #1120]	; 0x460
   1dd04:	cmp	r3, #0
   1dd08:	beq	1c988 <__assert_fail@plt+0xb77c>
   1dd0c:	b	1d618 <__assert_fail@plt+0xc40c>
   1dd10:	strd	r8, [sp, #56]	; 0x38
   1dd14:	strd	sl, [sp, #48]	; 0x30
   1dd18:	ldr	r8, [sp, #24]
   1dd1c:	ldr	r9, [sp, #32]
   1dd20:	b	1ccf8 <__assert_fail@plt+0xbaec>
   1dd24:	mov	r2, #5
   1dd28:	ldr	r1, [pc, #-1124]	; 1d8cc <__assert_fail@plt+0xc6c0>
   1dd2c:	bl	10f90 <dcgettext@plt>
   1dd30:	ldr	r1, [sp, #224]	; 0xe0
   1dd34:	bl	10f24 <printf@plt>
   1dd38:	b	1ca48 <__assert_fail@plt+0xb83c>
   1dd3c:	ldrd	r0, [r8]
   1dd40:	bl	14cd8 <__assert_fail@plt+0x3acc>
   1dd44:	b	1d74c <__assert_fail@plt+0xc540>
   1dd48:	mov	r2, #5
   1dd4c:	ldr	r1, [pc, #-1156]	; 1d8d0 <__assert_fail@plt+0xc6c4>
   1dd50:	mov	r0, #0
   1dd54:	bl	10f90 <dcgettext@plt>
   1dd58:	mov	r1, r5
   1dd5c:	bl	10f24 <printf@plt>
   1dd60:	b	1d74c <__assert_fail@plt+0xc540>
   1dd64:	mov	r2, #5
   1dd68:	ldr	r1, [pc, #-1180]	; 1d8d4 <__assert_fail@plt+0xc6c8>
   1dd6c:	mov	r0, #0
   1dd70:	bl	10f90 <dcgettext@plt>
   1dd74:	mov	r1, r5
   1dd78:	bl	10f24 <printf@plt>
   1dd7c:	b	1d74c <__assert_fail@plt+0xc540>
   1dd80:	mov	r2, #5
   1dd84:	ldr	r1, [pc, #-1204]	; 1d8d8 <__assert_fail@plt+0xc6cc>
   1dd88:	mov	r0, #0
   1dd8c:	bl	10f90 <dcgettext@plt>
   1dd90:	mov	r1, r5
   1dd94:	bl	10f24 <printf@plt>
   1dd98:	b	1d74c <__assert_fail@plt+0xc540>
   1dd9c:	mov	r2, #5
   1dda0:	ldr	r1, [pc, #-1228]	; 1d8dc <__assert_fail@plt+0xc6d0>
   1dda4:	mov	r0, #0
   1dda8:	bl	10f90 <dcgettext@plt>
   1ddac:	mov	r1, r5
   1ddb0:	bl	10f24 <printf@plt>
   1ddb4:	mov	r0, r5
   1ddb8:	ldr	r1, [pc, #-1248]	; 1d8e0 <__assert_fail@plt+0xc6d4>
   1ddbc:	bl	10f18 <strcmp@plt>
   1ddc0:	cmp	r0, #0
   1ddc4:	bne	1d74c <__assert_fail@plt+0xc540>
   1ddc8:	mov	r2, #5
   1ddcc:	ldr	r1, [pc, #-1264]	; 1d8e4 <__assert_fail@plt+0xc6d8>
   1ddd0:	bl	10f90 <dcgettext@plt>
   1ddd4:	bl	10f24 <printf@plt>
   1ddd8:	b	1d74c <__assert_fail@plt+0xc540>
   1dddc:	mov	r2, #5
   1dde0:	ldr	r1, [pc, #-1280]	; 1d8e8 <__assert_fail@plt+0xc6dc>
   1dde4:	mov	r0, #0
   1dde8:	bl	10f90 <dcgettext@plt>
   1ddec:	bl	548ac <error@@Base>
   1ddf0:	b	1dad4 <__assert_fail@plt+0xc8c8>
   1ddf4:	add	r1, ip, r0
   1ddf8:	ldr	r0, [pc, #-1300]	; 1d8ec <__assert_fail@plt+0xc6e0>
   1ddfc:	bl	10f24 <printf@plt>
   1de00:	b	1ca48 <__assert_fail@plt+0xb83c>
   1de04:	cmp	r3, #0
   1de08:	cmpeq	r2, #1610612737	; 0x60000001
   1de0c:	bne	1e3c0 <__assert_fail@plt+0xd1b4>
   1de10:	ldm	r8, {r3, r7}
   1de14:	mov	r2, #1
   1de18:	ldr	r6, [pc, #-1328]	; 1d8f0 <__assert_fail@plt+0xc6e4>
   1de1c:	mov	fp, r7
   1de20:	ldr	r5, [pc, #-1144]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1de24:	mov	ip, r2
   1de28:	mov	r0, r2
   1de2c:	mov	sl, r8
   1de30:	str	r9, [sp, #24]
   1de34:	mov	r7, r3
   1de38:	b	1de58 <__assert_fail@plt+0xcc4c>
   1de3c:	ldr	r0, [r6, #4]
   1de40:	bl	111c4 <fputs@plt>
   1de44:	mov	ip, #0
   1de48:	ldr	r3, [pc, #-1372]	; 1d8f4 <__assert_fail@plt+0xc6e8>
   1de4c:	cmp	r6, r3
   1de50:	beq	1e378 <__assert_fail@plt+0xd16c>
   1de54:	ldr	r0, [r6, #8]!
   1de58:	asr	r1, r0, #31
   1de5c:	and	r8, r0, r7
   1de60:	and	r9, r1, fp
   1de64:	orrs	r3, r8, r9
   1de68:	beq	1de48 <__assert_fail@plt+0xcc3c>
   1de6c:	cmp	ip, #0
   1de70:	eor	fp, fp, r1
   1de74:	eor	r7, r7, r0
   1de78:	ldr	r1, [r5]
   1de7c:	bne	1de3c <__assert_fail@plt+0xcc30>
   1de80:	mov	r0, #32
   1de84:	bl	11158 <putc@plt>
   1de88:	ldr	r1, [r5]
   1de8c:	b	1de3c <__assert_fail@plt+0xcc30>
   1de90:	subs	r1, r2, #1879048193	; 0x70000001
   1de94:	sbc	r3, r3, #0
   1de98:	str	r1, [sp, #72]	; 0x48
   1de9c:	str	r3, [sp, #76]	; 0x4c
   1dea0:	ldrd	r2, [sp, #72]	; 0x48
   1dea4:	cmp	r3, #0
   1dea8:	cmpeq	r2, #46	; 0x2e
   1deac:	bhi	1ce2c <__assert_fail@plt+0xbc20>
   1deb0:	cmp	r2, #46	; 0x2e
   1deb4:	ldrls	pc, [pc, r2, lsl #2]
   1deb8:	b	1ce2c <__assert_fail@plt+0xbc20>
   1debc:	ldrdeq	lr, [r1], -r0
   1dec0:	andeq	lr, r1, r0, asr r0
   1dec4:	andeq	ip, r1, ip, lsr #28
   1dec8:	strdeq	sp, [r1], -ip
   1decc:	andeq	sp, r1, r8, ror pc
   1ded0:	andeq	ip, r1, ip, lsr #28
   1ded4:	andeq	ip, r1, ip, lsr #28
   1ded8:	andeq	ip, r1, ip, lsr #28
   1dedc:	andeq	ip, r1, ip, lsr #28
   1dee0:	ldrdeq	lr, [r1], -r0
   1dee4:	ldrdeq	lr, [r1], -r0
   1dee8:	andeq	ip, r1, ip, lsr #28
   1deec:	andeq	ip, r1, ip, lsr #28
   1def0:	andeq	ip, r1, ip, lsr #28
   1def4:	andeq	ip, r1, ip, lsr #28
   1def8:	ldrdeq	lr, [r1], -r0
   1defc:	ldrdeq	lr, [r1], -r0
   1df00:	ldrdeq	lr, [r1], -r0
   1df04:	andeq	ip, r1, ip, lsr #28
   1df08:	ldrdeq	lr, [r1], -r0
   1df0c:	andeq	ip, r1, ip, lsr #28
   1df10:	andeq	ip, r1, ip, lsr #28
   1df14:	andeq	ip, r1, ip, lsr #28
   1df18:	ldrdeq	lr, [r1], -r0
   1df1c:	andeq	ip, r1, ip, lsr #28
   1df20:	ldrdeq	lr, [r1], -r0
   1df24:	andeq	ip, r1, ip, lsr #28
   1df28:	ldrdeq	lr, [r1], -r0
   1df2c:	andeq	ip, r1, ip, lsr #28
   1df30:	ldrdeq	lr, [r1], -r0
   1df34:	andeq	ip, r1, ip, lsr #28
   1df38:	andeq	ip, r1, ip, lsr #28
   1df3c:	ldrdeq	lr, [r1], -r0
   1df40:	andeq	ip, r1, ip, lsr #28
   1df44:	andeq	ip, r1, ip, lsr #28
   1df48:	andeq	ip, r1, ip, lsr #28
   1df4c:	andeq	ip, r1, ip, lsr #28
   1df50:	andeq	ip, r1, ip, lsr #28
   1df54:	andeq	ip, r1, ip, lsr #28
   1df58:	andeq	ip, r1, ip, lsr #28
   1df5c:	andeq	ip, r1, ip, lsr #28
   1df60:	andeq	ip, r1, ip, lsr #28
   1df64:	andeq	ip, r1, ip, lsr #28
   1df68:	andeq	ip, r1, ip, lsr #28
   1df6c:	andeq	ip, r1, ip, lsr #28
   1df70:	andeq	ip, r1, ip, lsr #28
   1df74:	ldrdeq	lr, [r1], -r0
   1df78:	ldrd	r6, [r8]
   1df7c:	orrs	r3, r6, r7
   1df80:	beq	1e684 <__assert_fail@plt+0xd478>
   1df84:	mov	r1, #1
   1df88:	mov	r5, #0
   1df8c:	mov	fp, r8
   1df90:	mov	sl, r9
   1df94:	b	1df9c <__assert_fail@plt+0xcd90>
   1df98:	ldrd	r6, [fp]
   1df9c:	mov	r3, #1
   1dfa0:	ldr	r0, [pc, #-1712]	; 1d8f8 <__assert_fail@plt+0xc6ec>
   1dfa4:	lsl	r2, r3, r5
   1dfa8:	and	r8, r2, r6
   1dfac:	asr	r3, r2, #31
   1dfb0:	and	r9, r3, r7
   1dfb4:	orrs	r3, r8, r9
   1dfb8:	beq	1dfe0 <__assert_fail@plt+0xcdd4>
   1dfbc:	ldr	r2, [pc, #-1736]	; 1d8fc <__assert_fail@plt+0xc6f0>
   1dfc0:	ldr	r3, [pc, #-1736]	; 1d900 <__assert_fail@plt+0xc6f4>
   1dfc4:	cmp	r1, #0
   1dfc8:	moveq	r3, r2
   1dfcc:	mov	r1, r3
   1dfd0:	ldr	r3, [pc, #-1748]	; 1d904 <__assert_fail@plt+0xc6f8>
   1dfd4:	ldr	r2, [r3, r5, lsl #2]
   1dfd8:	bl	10f24 <printf@plt>
   1dfdc:	mov	r1, #0
   1dfe0:	add	r5, r5, #1
   1dfe4:	cmp	r5, #15
   1dfe8:	bne	1df98 <__assert_fail@plt+0xcd8c>
   1dfec:	strd	r8, [sp, #208]	; 0xd0
   1dff0:	mov	r8, fp
   1dff4:	mov	r9, sl
   1dff8:	b	1d74c <__assert_fail@plt+0xc540>
   1dffc:	ldr	r5, [r4, #1128]	; 0x468
   1e000:	cmp	r5, #0
   1e004:	beq	1e6f8 <__assert_fail@plt+0xd4ec>
   1e008:	ldrd	r0, [r8]
   1e00c:	ldr	r2, [r4, #1400]	; 0x578
   1e010:	mov	r3, #0
   1e014:	cmp	r1, r3
   1e018:	cmpeq	r0, r2
   1e01c:	bcc	1e6d8 <__assert_fail@plt+0xd4cc>
   1e020:	mov	r3, r1
   1e024:	mov	r2, r0
   1e028:	ldr	r1, [pc, #-1832]	; 1d908 <__assert_fail@plt+0xc6fc>
   1e02c:	add	r0, sp, #224	; 0xe0
   1e030:	bl	1114c <sprintf@plt>
   1e034:	mov	r2, #5
   1e038:	ldr	r1, [pc, #-1844]	; 1d90c <__assert_fail@plt+0xc700>
   1e03c:	mov	r0, #0
   1e040:	bl	10f90 <dcgettext@plt>
   1e044:	add	r1, sp, #224	; 0xe0
   1e048:	bl	10f24 <printf@plt>
   1e04c:	b	1d74c <__assert_fail@plt+0xc540>
   1e050:	ldr	r3, [r8]
   1e054:	add	r0, sp, #220	; 0xdc
   1e058:	str	r3, [sp, #220]	; 0xdc
   1e05c:	bl	110ec <gmtime@plt>
   1e060:	subs	r2, r0, #0
   1e064:	beq	1e6b4 <__assert_fail@plt+0xd4a8>
   1e068:	ldr	r1, [r2]
   1e06c:	ldr	r3, [r2, #20]
   1e070:	str	r1, [sp, #16]
   1e074:	ldr	r1, [r2, #4]
   1e078:	add	r3, r3, #1888	; 0x760
   1e07c:	str	r1, [sp, #12]
   1e080:	ldr	r1, [r2, #8]
   1e084:	add	r5, sp, #224	; 0xe0
   1e088:	str	r1, [sp, #8]
   1e08c:	ldr	r1, [r2, #12]
   1e090:	add	r3, r3, #12
   1e094:	str	r1, [sp, #4]
   1e098:	ldr	r2, [r2, #16]
   1e09c:	mov	r0, r5
   1e0a0:	add	r2, r2, #1
   1e0a4:	str	r2, [sp]
   1e0a8:	mov	r1, #128	; 0x80
   1e0ac:	ldr	r2, [pc, #-1956]	; 1d910 <__assert_fail@plt+0xc704>
   1e0b0:	bl	110b0 <snprintf@plt>
   1e0b4:	mov	r2, #5
   1e0b8:	ldr	r1, [pc, #-1964]	; 1d914 <__assert_fail@plt+0xc708>
   1e0bc:	mov	r0, #0
   1e0c0:	bl	10f90 <dcgettext@plt>
   1e0c4:	mov	r1, r5
   1e0c8:	bl	10f24 <printf@plt>
   1e0cc:	b	1d74c <__assert_fail@plt+0xc540>
   1e0d0:	ldrd	r2, [r8]
   1e0d4:	ldr	r0, [pc, #-1988]	; 1d918 <__assert_fail@plt+0xc70c>
   1e0d8:	bl	10f24 <printf@plt>
   1e0dc:	b	1d74c <__assert_fail@plt+0xc540>
   1e0e0:	mov	r2, #5
   1e0e4:	ldr	r1, [pc, #-2000]	; 1d91c <__assert_fail@plt+0xc710>
   1e0e8:	bl	10f90 <dcgettext@plt>
   1e0ec:	ldr	r1, [r4, #688]	; 0x2b0
   1e0f0:	bl	548ac <error@@Base>
   1e0f4:	mov	r0, r7
   1e0f8:	bl	10f54 <free@plt>
   1e0fc:	b	1ca68 <__assert_fail@plt+0xb85c>
   1e100:	mov	r2, #5
   1e104:	ldr	r1, [pc, #-2032]	; 1d91c <__assert_fail@plt+0xc710>
   1e108:	bl	10f90 <dcgettext@plt>
   1e10c:	ldr	r1, [r4, #688]	; 0x2b0
   1e110:	bl	548ac <error@@Base>
   1e114:	mov	r0, r6
   1e118:	bl	10f54 <free@plt>
   1e11c:	b	1ca68 <__assert_fail@plt+0xb85c>
   1e120:	mov	r2, #5
   1e124:	ldr	r1, [pc, #-2060]	; 1d920 <__assert_fail@plt+0xc714>
   1e128:	mov	r0, #0
   1e12c:	bl	10f90 <dcgettext@plt>
   1e130:	bl	10f24 <printf@plt>
   1e134:	b	1cf74 <__assert_fail@plt+0xbd68>
   1e138:	mov	r2, #5
   1e13c:	ldr	r1, [pc, #-2080]	; 1d924 <__assert_fail@plt+0xc718>
   1e140:	mov	r0, #0
   1e144:	bl	10f90 <dcgettext@plt>
   1e148:	bl	10f24 <printf@plt>
   1e14c:	b	1cf74 <__assert_fail@plt+0xbd68>
   1e150:	mov	r2, #5
   1e154:	ldr	r1, [pc, #-2100]	; 1d928 <__assert_fail@plt+0xc71c>
   1e158:	mov	r0, #0
   1e15c:	bl	10f90 <dcgettext@plt>
   1e160:	bl	10f24 <printf@plt>
   1e164:	b	1cf74 <__assert_fail@plt+0xbd68>
   1e168:	ldr	r0, [pc, #-2116]	; 1d92c <__assert_fail@plt+0xc720>
   1e16c:	bl	10f24 <printf@plt>
   1e170:	eor	r5, r5, #2
   1e174:	b	1d448 <__assert_fail@plt+0xc23c>
   1e178:	ldr	r0, [pc, #-2128]	; 1d930 <__assert_fail@plt+0xc724>
   1e17c:	bl	10f24 <printf@plt>
   1e180:	eor	r5, r6, #1
   1e184:	b	1d440 <__assert_fail@plt+0xc234>
   1e188:	ldr	r0, [pc, #-2140]	; 1d934 <__assert_fail@plt+0xc728>
   1e18c:	bl	10f24 <printf@plt>
   1e190:	eor	r5, r5, #2
   1e194:	b	1cce4 <__assert_fail@plt+0xbad8>
   1e198:	ldr	r0, [pc, #-2152]	; 1d938 <__assert_fail@plt+0xc72c>
   1e19c:	bl	10f24 <printf@plt>
   1e1a0:	eor	r5, r6, #1
   1e1a4:	b	1ccdc <__assert_fail@plt+0xbad0>
   1e1a8:	ldr	r0, [pc, #-2164]	; 1d93c <__assert_fail@plt+0xc730>
   1e1ac:	bl	10f24 <printf@plt>
   1e1b0:	eor	r5, r6, #1
   1e1b4:	b	1d70c <__assert_fail@plt+0xc500>
   1e1b8:	ldr	r0, [pc, #-2176]	; 1d940 <__assert_fail@plt+0xc734>
   1e1bc:	bl	10f24 <printf@plt>
   1e1c0:	eor	r5, r5, #32
   1e1c4:	b	1d468 <__assert_fail@plt+0xc25c>
   1e1c8:	ldr	r0, [pc, #-2188]	; 1d944 <__assert_fail@plt+0xc738>
   1e1cc:	bl	10f24 <printf@plt>
   1e1d0:	eor	r5, r5, #16
   1e1d4:	b	1d460 <__assert_fail@plt+0xc254>
   1e1d8:	ldr	r0, [pc, #-2200]	; 1d948 <__assert_fail@plt+0xc73c>
   1e1dc:	bl	10f24 <printf@plt>
   1e1e0:	eor	r5, r5, #8
   1e1e4:	b	1d458 <__assert_fail@plt+0xc24c>
   1e1e8:	ldr	r0, [pc, #-2212]	; 1d94c <__assert_fail@plt+0xc740>
   1e1ec:	bl	10f24 <printf@plt>
   1e1f0:	eor	r5, r5, #4
   1e1f4:	b	1d450 <__assert_fail@plt+0xc244>
   1e1f8:	ldr	r0, [pc, #-2224]	; 1d950 <__assert_fail@plt+0xc744>
   1e1fc:	bl	10f24 <printf@plt>
   1e200:	eor	r5, r5, #8192	; 0x2000
   1e204:	b	1d4a8 <__assert_fail@plt+0xc29c>
   1e208:	ldr	r0, [pc, #-2236]	; 1d954 <__assert_fail@plt+0xc748>
   1e20c:	bl	10f24 <printf@plt>
   1e210:	eor	r5, r5, #4096	; 0x1000
   1e214:	b	1d4a0 <__assert_fail@plt+0xc294>
   1e218:	ldr	r0, [pc, #-2248]	; 1d958 <__assert_fail@plt+0xc74c>
   1e21c:	bl	10f24 <printf@plt>
   1e220:	eor	r5, r5, #2048	; 0x800
   1e224:	b	1d498 <__assert_fail@plt+0xc28c>
   1e228:	ldr	r0, [pc, #-2260]	; 1d95c <__assert_fail@plt+0xc750>
   1e22c:	bl	10f24 <printf@plt>
   1e230:	eor	r5, r5, #1024	; 0x400
   1e234:	b	1d490 <__assert_fail@plt+0xc284>
   1e238:	ldr	r0, [pc, #-2272]	; 1d960 <__assert_fail@plt+0xc754>
   1e23c:	bl	10f24 <printf@plt>
   1e240:	eor	r5, r5, #512	; 0x200
   1e244:	b	1d488 <__assert_fail@plt+0xc27c>
   1e248:	ldr	r0, [pc, #-2284]	; 1d964 <__assert_fail@plt+0xc758>
   1e24c:	bl	10f24 <printf@plt>
   1e250:	eor	r5, r5, #256	; 0x100
   1e254:	b	1d480 <__assert_fail@plt+0xc274>
   1e258:	ldr	r0, [pc, #-2296]	; 1d968 <__assert_fail@plt+0xc75c>
   1e25c:	bl	10f24 <printf@plt>
   1e260:	eor	r5, r5, #128	; 0x80
   1e264:	b	1d478 <__assert_fail@plt+0xc26c>
   1e268:	ldr	r0, [pc, #-2308]	; 1d96c <__assert_fail@plt+0xc760>
   1e26c:	bl	10f24 <printf@plt>
   1e270:	eor	r5, r5, #64	; 0x40
   1e274:	b	1d470 <__assert_fail@plt+0xc264>
   1e278:	ldr	r0, [pc, #-2320]	; 1d970 <__assert_fail@plt+0xc764>
   1e27c:	bl	10f24 <printf@plt>
   1e280:	eor	r5, r5, #536870912	; 0x20000000
   1e284:	b	1d528 <__assert_fail@plt+0xc31c>
   1e288:	ldr	r0, [pc, #-2332]	; 1d974 <__assert_fail@plt+0xc768>
   1e28c:	bl	10f24 <printf@plt>
   1e290:	eor	r5, r5, #268435456	; 0x10000000
   1e294:	b	1d520 <__assert_fail@plt+0xc314>
   1e298:	ldr	r0, [pc, #-2344]	; 1d978 <__assert_fail@plt+0xc76c>
   1e29c:	bl	10f24 <printf@plt>
   1e2a0:	eor	r5, r5, #134217728	; 0x8000000
   1e2a4:	b	1d518 <__assert_fail@plt+0xc30c>
   1e2a8:	ldr	r0, [pc, #-2356]	; 1d97c <__assert_fail@plt+0xc770>
   1e2ac:	bl	10f24 <printf@plt>
   1e2b0:	eor	r5, r5, #67108864	; 0x4000000
   1e2b4:	b	1d510 <__assert_fail@plt+0xc304>
   1e2b8:	ldr	r0, [pc, #-2368]	; 1d980 <__assert_fail@plt+0xc774>
   1e2bc:	bl	10f24 <printf@plt>
   1e2c0:	eor	r5, r5, #33554432	; 0x2000000
   1e2c4:	b	1d508 <__assert_fail@plt+0xc2fc>
   1e2c8:	ldr	r0, [pc, #-2380]	; 1d984 <__assert_fail@plt+0xc778>
   1e2cc:	bl	10f24 <printf@plt>
   1e2d0:	eor	r5, r5, #16777216	; 0x1000000
   1e2d4:	b	1d500 <__assert_fail@plt+0xc2f4>
   1e2d8:	ldr	r0, [pc, #-2392]	; 1d988 <__assert_fail@plt+0xc77c>
   1e2dc:	bl	10f24 <printf@plt>
   1e2e0:	eor	r5, r5, #8388608	; 0x800000
   1e2e4:	b	1d4f8 <__assert_fail@plt+0xc2ec>
   1e2e8:	ldr	r0, [pc, #-2404]	; 1d98c <__assert_fail@plt+0xc780>
   1e2ec:	bl	10f24 <printf@plt>
   1e2f0:	eor	r5, r5, #4194304	; 0x400000
   1e2f4:	b	1d4f0 <__assert_fail@plt+0xc2e4>
   1e2f8:	ldr	r0, [pc, #-2416]	; 1d990 <__assert_fail@plt+0xc784>
   1e2fc:	bl	10f24 <printf@plt>
   1e300:	eor	r5, r5, #2097152	; 0x200000
   1e304:	b	1d4e8 <__assert_fail@plt+0xc2dc>
   1e308:	ldr	r0, [pc, #-2428]	; 1d994 <__assert_fail@plt+0xc788>
   1e30c:	bl	10f24 <printf@plt>
   1e310:	eor	r5, r5, #1048576	; 0x100000
   1e314:	b	1d4e0 <__assert_fail@plt+0xc2d4>
   1e318:	ldr	r0, [pc, #-2440]	; 1d998 <__assert_fail@plt+0xc78c>
   1e31c:	bl	10f24 <printf@plt>
   1e320:	eor	r5, r5, #524288	; 0x80000
   1e324:	b	1d4d8 <__assert_fail@plt+0xc2cc>
   1e328:	ldr	r0, [pc, #-2452]	; 1d99c <__assert_fail@plt+0xc790>
   1e32c:	bl	10f24 <printf@plt>
   1e330:	eor	r5, r5, #262144	; 0x40000
   1e334:	b	1d4d0 <__assert_fail@plt+0xc2c4>
   1e338:	ldr	r0, [pc, #-2464]	; 1d9a0 <__assert_fail@plt+0xc794>
   1e33c:	bl	10f24 <printf@plt>
   1e340:	eor	r5, r5, #131072	; 0x20000
   1e344:	b	1d4c8 <__assert_fail@plt+0xc2bc>
   1e348:	ldr	r0, [pc, #-2476]	; 1d9a4 <__assert_fail@plt+0xc798>
   1e34c:	bl	10f24 <printf@plt>
   1e350:	eor	r5, r5, #65536	; 0x10000
   1e354:	b	1d4c0 <__assert_fail@plt+0xc2b4>
   1e358:	ldr	r0, [pc, #-2488]	; 1d9a8 <__assert_fail@plt+0xc79c>
   1e35c:	bl	10f24 <printf@plt>
   1e360:	eor	r5, r5, #32768	; 0x8000
   1e364:	b	1d4b8 <__assert_fail@plt+0xc2ac>
   1e368:	ldr	r0, [pc, #-2500]	; 1d9ac <__assert_fail@plt+0xc7a0>
   1e36c:	bl	10f24 <printf@plt>
   1e370:	eor	r5, r5, #16384	; 0x4000
   1e374:	b	1d4b0 <__assert_fail@plt+0xc2a4>
   1e378:	mov	r3, r7
   1e37c:	orrs	r3, r3, fp
   1e380:	moveq	r3, ip
   1e384:	movne	r3, #1
   1e388:	cmp	r3, #0
   1e38c:	strd	r8, [sp, #80]	; 0x50
   1e390:	mov	r6, r7
   1e394:	mov	r8, sl
   1e398:	ldr	r9, [sp, #24]
   1e39c:	mov	r7, fp
   1e3a0:	beq	1cfb0 <__assert_fail@plt+0xbda4>
   1e3a4:	cmp	ip, #0
   1e3a8:	beq	1e674 <__assert_fail@plt+0xd468>
   1e3ac:	mov	r0, r6
   1e3b0:	mov	r1, r7
   1e3b4:	mov	r2, #0
   1e3b8:	bl	14244 <__assert_fail@plt+0x3038>
   1e3bc:	b	1cfb0 <__assert_fail@plt+0xbda4>
   1e3c0:	mov	r2, #4
   1e3c4:	ldrd	r0, [r8]
   1e3c8:	bl	14244 <__assert_fail@plt+0x3038>
   1e3cc:	ldr	r5, [pc, #-2596]	; 1d9b0 <__assert_fail@plt+0xc7a4>
   1e3d0:	b	1cfb0 <__assert_fail@plt+0xbda4>
   1e3d4:	mov	r2, #4
   1e3d8:	ldrd	r0, [r8]
   1e3dc:	bl	14244 <__assert_fail@plt+0x3038>
   1e3e0:	ldr	r3, [r8]
   1e3e4:	and	r2, r3, #1
   1e3e8:	str	r2, [sp, #88]	; 0x58
   1e3ec:	mov	r2, #0
   1e3f0:	str	r2, [sp, #92]	; 0x5c
   1e3f4:	ldrd	r0, [sp, #88]	; 0x58
   1e3f8:	orrs	r2, r0, r1
   1e3fc:	bne	1e664 <__assert_fail@plt+0xd458>
   1e400:	and	r2, r3, #2
   1e404:	str	r2, [sp, #96]	; 0x60
   1e408:	mov	r2, #0
   1e40c:	str	r2, [sp, #100]	; 0x64
   1e410:	ldrd	r0, [sp, #96]	; 0x60
   1e414:	orrs	r2, r0, r1
   1e418:	bne	1e654 <__assert_fail@plt+0xd448>
   1e41c:	and	r2, r3, #4
   1e420:	str	r2, [sp, #104]	; 0x68
   1e424:	mov	r2, #0
   1e428:	str	r2, [sp, #108]	; 0x6c
   1e42c:	ldrd	r0, [sp, #104]	; 0x68
   1e430:	orrs	r2, r0, r1
   1e434:	bne	1e644 <__assert_fail@plt+0xd438>
   1e438:	and	r2, r3, #8
   1e43c:	str	r2, [sp, #112]	; 0x70
   1e440:	mov	r2, #0
   1e444:	str	r2, [sp, #116]	; 0x74
   1e448:	ldrd	r0, [sp, #112]	; 0x70
   1e44c:	orrs	r2, r0, r1
   1e450:	bne	1e634 <__assert_fail@plt+0xd428>
   1e454:	and	r2, r3, #16
   1e458:	str	r2, [sp, #120]	; 0x78
   1e45c:	mov	r2, #0
   1e460:	str	r2, [sp, #124]	; 0x7c
   1e464:	ldrd	r0, [sp, #120]	; 0x78
   1e468:	orrs	r2, r0, r1
   1e46c:	bne	1e624 <__assert_fail@plt+0xd418>
   1e470:	and	r2, r3, #32
   1e474:	str	r2, [sp, #128]	; 0x80
   1e478:	mov	r2, #0
   1e47c:	str	r2, [sp, #132]	; 0x84
   1e480:	ldrd	r0, [sp, #128]	; 0x80
   1e484:	orrs	r2, r0, r1
   1e488:	bne	1e614 <__assert_fail@plt+0xd408>
   1e48c:	and	r2, r3, #64	; 0x40
   1e490:	str	r2, [sp, #136]	; 0x88
   1e494:	mov	r2, #0
   1e498:	str	r2, [sp, #140]	; 0x8c
   1e49c:	ldrd	r0, [sp, #136]	; 0x88
   1e4a0:	orrs	r2, r0, r1
   1e4a4:	bne	1e604 <__assert_fail@plt+0xd3f8>
   1e4a8:	and	r2, r3, #128	; 0x80
   1e4ac:	str	r2, [sp, #144]	; 0x90
   1e4b0:	mov	r2, #0
   1e4b4:	str	r2, [sp, #148]	; 0x94
   1e4b8:	ldrd	r0, [sp, #144]	; 0x90
   1e4bc:	orrs	r2, r0, r1
   1e4c0:	bne	1e5f4 <__assert_fail@plt+0xd3e8>
   1e4c4:	and	r2, r3, #512	; 0x200
   1e4c8:	str	r2, [sp, #152]	; 0x98
   1e4cc:	mov	r2, #0
   1e4d0:	str	r2, [sp, #156]	; 0x9c
   1e4d4:	ldrd	r0, [sp, #152]	; 0x98
   1e4d8:	orrs	r2, r0, r1
   1e4dc:	bne	1e5e4 <__assert_fail@plt+0xd3d8>
   1e4e0:	and	r2, r3, #1024	; 0x400
   1e4e4:	str	r2, [sp, #160]	; 0xa0
   1e4e8:	mov	r2, #0
   1e4ec:	str	r2, [sp, #164]	; 0xa4
   1e4f0:	ldrd	r0, [sp, #160]	; 0xa0
   1e4f4:	orrs	r2, r0, r1
   1e4f8:	bne	1e5d4 <__assert_fail@plt+0xd3c8>
   1e4fc:	and	r2, r3, #2048	; 0x800
   1e500:	str	r2, [sp, #168]	; 0xa8
   1e504:	mov	r2, #0
   1e508:	str	r2, [sp, #172]	; 0xac
   1e50c:	ldrd	r0, [sp, #168]	; 0xa8
   1e510:	orrs	r2, r0, r1
   1e514:	bne	1e5c4 <__assert_fail@plt+0xd3b8>
   1e518:	and	r2, r3, #4096	; 0x1000
   1e51c:	str	r2, [sp, #176]	; 0xb0
   1e520:	mov	r2, #0
   1e524:	str	r2, [sp, #180]	; 0xb4
   1e528:	ldrd	r0, [sp, #176]	; 0xb0
   1e52c:	orrs	r2, r0, r1
   1e530:	bne	1e5b4 <__assert_fail@plt+0xd3a8>
   1e534:	and	r2, r3, #8192	; 0x2000
   1e538:	str	r2, [sp, #184]	; 0xb8
   1e53c:	mov	r2, #0
   1e540:	str	r2, [sp, #188]	; 0xbc
   1e544:	ldrd	r0, [sp, #184]	; 0xb8
   1e548:	orrs	r2, r0, r1
   1e54c:	bne	1e5a4 <__assert_fail@plt+0xd398>
   1e550:	and	r2, r3, #16384	; 0x4000
   1e554:	str	r2, [sp, #192]	; 0xc0
   1e558:	mov	r2, #0
   1e55c:	str	r2, [sp, #196]	; 0xc4
   1e560:	ldrd	r0, [sp, #192]	; 0xc0
   1e564:	orrs	r2, r0, r1
   1e568:	bne	1e594 <__assert_fail@plt+0xd388>
   1e56c:	and	r3, r3, #32768	; 0x8000
   1e570:	str	r3, [sp, #200]	; 0xc8
   1e574:	mov	r3, #0
   1e578:	str	r3, [sp, #204]	; 0xcc
   1e57c:	ldrd	r2, [sp, #200]	; 0xc8
   1e580:	orrs	r3, r2, r3
   1e584:	beq	1d74c <__assert_fail@plt+0xc540>
   1e588:	ldr	r0, [pc, #-3036]	; 1d9b4 <__assert_fail@plt+0xc7a8>
   1e58c:	bl	10f24 <printf@plt>
   1e590:	b	1d74c <__assert_fail@plt+0xc540>
   1e594:	ldr	r0, [pc, #-3044]	; 1d9b8 <__assert_fail@plt+0xc7ac>
   1e598:	bl	10f24 <printf@plt>
   1e59c:	ldr	r3, [r8]
   1e5a0:	b	1e56c <__assert_fail@plt+0xd360>
   1e5a4:	ldr	r0, [pc, #-3056]	; 1d9bc <__assert_fail@plt+0xc7b0>
   1e5a8:	bl	10f24 <printf@plt>
   1e5ac:	ldr	r3, [r8]
   1e5b0:	b	1e550 <__assert_fail@plt+0xd344>
   1e5b4:	ldr	r0, [pc, #-3068]	; 1d9c0 <__assert_fail@plt+0xc7b4>
   1e5b8:	bl	10f24 <printf@plt>
   1e5bc:	ldr	r3, [r8]
   1e5c0:	b	1e534 <__assert_fail@plt+0xd328>
   1e5c4:	ldr	r0, [pc, #-3080]	; 1d9c4 <__assert_fail@plt+0xc7b8>
   1e5c8:	bl	10f24 <printf@plt>
   1e5cc:	ldr	r3, [r8]
   1e5d0:	b	1e518 <__assert_fail@plt+0xd30c>
   1e5d4:	ldr	r0, [pc, #-3092]	; 1d9c8 <__assert_fail@plt+0xc7bc>
   1e5d8:	bl	10f24 <printf@plt>
   1e5dc:	ldr	r3, [r8]
   1e5e0:	b	1e4fc <__assert_fail@plt+0xd2f0>
   1e5e4:	ldr	r0, [pc, #-3104]	; 1d9cc <__assert_fail@plt+0xc7c0>
   1e5e8:	bl	10f24 <printf@plt>
   1e5ec:	ldr	r3, [r8]
   1e5f0:	b	1e4e0 <__assert_fail@plt+0xd2d4>
   1e5f4:	ldr	r0, [pc, #-3116]	; 1d9d0 <__assert_fail@plt+0xc7c4>
   1e5f8:	bl	10f24 <printf@plt>
   1e5fc:	ldr	r3, [r8]
   1e600:	b	1e4c4 <__assert_fail@plt+0xd2b8>
   1e604:	ldr	r0, [pc, #-3128]	; 1d9d4 <__assert_fail@plt+0xc7c8>
   1e608:	bl	10f24 <printf@plt>
   1e60c:	ldr	r3, [r8]
   1e610:	b	1e4a8 <__assert_fail@plt+0xd29c>
   1e614:	ldr	r0, [pc, #-3140]	; 1d9d8 <__assert_fail@plt+0xc7cc>
   1e618:	bl	10f24 <printf@plt>
   1e61c:	ldr	r3, [r8]
   1e620:	b	1e48c <__assert_fail@plt+0xd280>
   1e624:	ldr	r0, [pc, #-3152]	; 1d9dc <__assert_fail@plt+0xc7d0>
   1e628:	bl	10f24 <printf@plt>
   1e62c:	ldr	r3, [r8]
   1e630:	b	1e470 <__assert_fail@plt+0xd264>
   1e634:	ldr	r0, [pc, #-3164]	; 1d9e0 <__assert_fail@plt+0xc7d4>
   1e638:	bl	10f24 <printf@plt>
   1e63c:	ldr	r3, [r8]
   1e640:	b	1e454 <__assert_fail@plt+0xd248>
   1e644:	ldr	r0, [pc, #-3176]	; 1d9e4 <__assert_fail@plt+0xc7d8>
   1e648:	bl	10f24 <printf@plt>
   1e64c:	ldr	r3, [r8]
   1e650:	b	1e438 <__assert_fail@plt+0xd22c>
   1e654:	ldr	r0, [pc, #-3188]	; 1d9e8 <__assert_fail@plt+0xc7dc>
   1e658:	bl	10f24 <printf@plt>
   1e65c:	ldr	r3, [r8]
   1e660:	b	1e41c <__assert_fail@plt+0xd210>
   1e664:	ldr	r0, [pc, #-3200]	; 1d9ec <__assert_fail@plt+0xc7e0>
   1e668:	bl	10f24 <printf@plt>
   1e66c:	ldr	r3, [r8]
   1e670:	b	1e400 <__assert_fail@plt+0xd1f4>
   1e674:	ldr	r1, [r5]
   1e678:	mov	r0, #32
   1e67c:	bl	11158 <putc@plt>
   1e680:	b	1e3ac <__assert_fail@plt+0xd1a0>
   1e684:	mov	r2, #5
   1e688:	ldr	r1, [pc, #-3232]	; 1d9f0 <__assert_fail@plt+0xc7e4>
   1e68c:	mov	r0, #0
   1e690:	bl	10f90 <dcgettext@plt>
   1e694:	bl	10f24 <printf@plt>
   1e698:	b	1d74c <__assert_fail@plt+0xc540>
   1e69c:	mov	r2, #5
   1e6a0:	ldr	r1, [pc, #-3252]	; 1d9f4 <__assert_fail@plt+0xc7e8>
   1e6a4:	bl	10f90 <dcgettext@plt>
   1e6a8:	mov	r1, sl
   1e6ac:	bl	548ac <error@@Base>
   1e6b0:	b	1ca68 <__assert_fail@plt+0xb85c>
   1e6b4:	mov	r2, #5
   1e6b8:	ldr	r1, [pc, #-3272]	; 1d9f8 <__assert_fail@plt+0xc7ec>
   1e6bc:	bl	10f90 <dcgettext@plt>
   1e6c0:	add	r5, sp, #224	; 0xe0
   1e6c4:	mov	r1, #128	; 0x80
   1e6c8:	mov	r2, r0
   1e6cc:	mov	r0, r5
   1e6d0:	bl	110b0 <snprintf@plt>
   1e6d4:	b	1e0b4 <__assert_fail@plt+0xcea8>
   1e6d8:	mov	r2, #5
   1e6dc:	ldr	r1, [pc, #-3304]	; 1d9fc <__assert_fail@plt+0xc7f0>
   1e6e0:	mov	r0, #0
   1e6e4:	bl	10f90 <dcgettext@plt>
   1e6e8:	ldr	r1, [r8]
   1e6ec:	add	r1, r5, r1
   1e6f0:	bl	10f24 <printf@plt>
   1e6f4:	b	1d74c <__assert_fail@plt+0xc540>
   1e6f8:	ldrd	r0, [r8]
   1e6fc:	b	1e020 <__assert_fail@plt+0xce14>
   1e700:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e704:	sub	sp, sp, #156	; 0x9c
   1e708:	ldr	fp, [pc, #3888]	; 1f640 <__assert_fail@plt+0xe434>
   1e70c:	ldr	r3, [fp, #1552]	; 0x610
   1e710:	cmp	r3, #0
   1e714:	beq	1ef3c <__assert_fail@plt+0xdd30>
   1e718:	ldr	r2, [r0, #84]	; 0x54
   1e71c:	ldr	r3, [r0, #96]	; 0x60
   1e720:	cmp	r2, #0
   1e724:	movne	r1, #0
   1e728:	str	r0, [sp, #68]	; 0x44
   1e72c:	str	r3, [sp, #44]	; 0x2c
   1e730:	strne	r1, [sp, #56]	; 0x38
   1e734:	bne	1e764 <__assert_fail@plt+0xd558>
   1e738:	b	1ef28 <__assert_fail@plt+0xdd1c>
   1e73c:	cmn	r3, #-1879048189	; 0x90000003
   1e740:	beq	1eaa0 <__assert_fail@plt+0xd894>
   1e744:	ldr	r3, [sp, #56]	; 0x38
   1e748:	add	r3, r3, #1
   1e74c:	str	r3, [sp, #56]	; 0x38
   1e750:	cmp	r2, r3
   1e754:	ldr	r3, [sp, #44]	; 0x2c
   1e758:	add	r3, r3, #72	; 0x48
   1e75c:	str	r3, [sp, #44]	; 0x2c
   1e760:	bls	1ef20 <__assert_fail@plt+0xdd14>
   1e764:	ldr	r3, [sp, #44]	; 0x2c
   1e768:	ldr	r3, [r3, #4]
   1e76c:	cmn	r3, #-1879048190	; 0x90000002
   1e770:	beq	1e998 <__assert_fail@plt+0xd78c>
   1e774:	cmn	r3, #-1879048191	; 0x90000001
   1e778:	bne	1e73c <__assert_fail@plt+0xd530>
   1e77c:	ldr	ip, [sp, #44]	; 0x2c
   1e780:	ldr	r6, [ip, #40]	; 0x28
   1e784:	cmp	r6, r2
   1e788:	bcs	1e744 <__assert_fail@plt+0xd538>
   1e78c:	ldr	r0, [sp, #68]	; 0x44
   1e790:	add	r6, r6, r6, lsl #3
   1e794:	ldr	r3, [r0, #96]	; 0x60
   1e798:	add	r6, r3, r6, lsl #3
   1e79c:	ldr	r3, [r6, #40]	; 0x28
   1e7a0:	cmp	r3, r2
   1e7a4:	bcs	1e744 <__assert_fail@plt+0xd538>
   1e7a8:	ldr	r3, [fp]
   1e7ac:	ldr	r7, [ip, #32]
   1e7b0:	cmp	r3, #0
   1e7b4:	add	r2, sp, #112	; 0x70
   1e7b8:	mov	r1, r6
   1e7bc:	ldr	r8, [ip, #36]	; 0x24
   1e7c0:	bne	1f2e0 <__assert_fail@plt+0xe0d4>
   1e7c4:	ldr	r0, [sp, #68]	; 0x44
   1e7c8:	bl	17bf4 <__assert_fail@plt+0x69e8>
   1e7cc:	str	r0, [sp, #64]	; 0x40
   1e7d0:	ldr	r3, [sp, #64]	; 0x40
   1e7d4:	cmp	r3, #0
   1e7d8:	beq	1f2f4 <__assert_fail@plt+0xe0e8>
   1e7dc:	ldr	sl, [sp, #68]	; 0x44
   1e7e0:	ldr	r3, [r6, #40]	; 0x28
   1e7e4:	mov	r2, #5
   1e7e8:	ldr	r0, [sl, #96]	; 0x60
   1e7ec:	add	r3, r3, r3, lsl #3
   1e7f0:	ldr	r1, [pc, #3660]	; 1f644 <__assert_fail@plt+0xe438>
   1e7f4:	add	r3, r0, r3, lsl #3
   1e7f8:	mov	r0, #0
   1e7fc:	ldrd	r4, [r3, #32]
   1e800:	str	r3, [sp, #104]	; 0x68
   1e804:	ldr	r9, [r3, #24]
   1e808:	bl	10f90 <dcgettext@plt>
   1e80c:	strd	r4, [sp, #8]
   1e810:	mov	r4, #1
   1e814:	mov	r5, #0
   1e818:	add	r1, sl, #4
   1e81c:	add	r2, sl, #8
   1e820:	mov	r3, r9
   1e824:	strd	r4, [sp]
   1e828:	str	r1, [sp, #24]
   1e82c:	str	r2, [sp, #28]
   1e830:	str	r0, [sp, #16]
   1e834:	mov	r0, #0
   1e838:	bl	1717c <__assert_fail@plt+0x5f70>
   1e83c:	subs	r3, r0, #0
   1e840:	str	r3, [sp, #88]	; 0x58
   1e844:	beq	1f240 <__assert_fail@plt+0xe034>
   1e848:	lsr	r3, r7, #1
   1e84c:	ldr	ip, [sp, #68]	; 0x44
   1e850:	orr	sl, r3, r8, lsl #31
   1e854:	mov	r7, #5
   1e858:	mov	r3, sl
   1e85c:	ldr	r2, [pc, #3556]	; 1f648 <__assert_fail@plt+0xe43c>
   1e860:	ldr	r1, [pc, #3556]	; 1f64c <__assert_fail@plt+0xe440>
   1e864:	str	r7, [sp]
   1e868:	mov	r0, #0
   1e86c:	add	r8, ip, #104	; 0x68
   1e870:	add	r5, ip, #108	; 0x6c
   1e874:	str	sl, [sp, #48]	; 0x30
   1e878:	bl	11200 <dcngettext@plt>
   1e87c:	ldr	r4, [sp, #44]	; 0x2c
   1e880:	mov	r1, r5
   1e884:	mov	r2, r4
   1e888:	mov	r9, r0
   1e88c:	mov	r0, r8
   1e890:	bl	16c64 <__assert_fail@plt+0x5a58>
   1e894:	mov	r2, sl
   1e898:	mov	r1, r0
   1e89c:	mov	r0, r9
   1e8a0:	bl	10f24 <printf@plt>
   1e8a4:	mov	r2, r7
   1e8a8:	ldr	r1, [pc, #3488]	; 1f650 <__assert_fail@plt+0xe444>
   1e8ac:	mov	r0, #0
   1e8b0:	bl	10f90 <dcgettext@plt>
   1e8b4:	bl	10f24 <printf@plt>
   1e8b8:	ldr	r3, [pc, #3476]	; 1f654 <__assert_fail@plt+0xe448>
   1e8bc:	ldr	r1, [pc, #3476]	; 1f658 <__assert_fail@plt+0xe44c>
   1e8c0:	mov	r9, r4
   1e8c4:	ldr	r0, [r3]
   1e8c8:	ldrd	r2, [r4, #16]
   1e8cc:	bl	11098 <fprintf@plt>
   1e8d0:	mov	r2, r7
   1e8d4:	ldr	r1, [pc, #3456]	; 1f65c <__assert_fail@plt+0xe450>
   1e8d8:	mov	r0, #0
   1e8dc:	bl	10f90 <dcgettext@plt>
   1e8e0:	mov	r1, r5
   1e8e4:	mov	r2, r6
   1e8e8:	ldr	r5, [r9, #24]
   1e8ec:	ldr	r6, [r9, #40]	; 0x28
   1e8f0:	mov	r9, #0
   1e8f4:	mov	r4, r0
   1e8f8:	mov	r0, r8
   1e8fc:	bl	16c64 <__assert_fail@plt+0x5a58>
   1e900:	mov	r1, r5
   1e904:	mov	r2, r6
   1e908:	lsl	r5, sl, #1
   1e90c:	mov	r8, #2
   1e910:	mov	r3, r0
   1e914:	mov	r0, r4
   1e918:	bl	10f24 <printf@plt>
   1e91c:	ldr	r3, [pc, #3568]	; 1f714 <__assert_fail@plt+0xe508>
   1e920:	mov	r4, #0
   1e924:	str	r5, [sp]
   1e928:	ldr	r0, [sp, #68]	; 0x44
   1e92c:	ldrd	r2, [r3, #120]	; 0x78
   1e930:	str	r4, [sp, #4]
   1e934:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   1e938:	mov	r2, r7
   1e93c:	ldr	r1, [pc, #3356]	; 1f660 <__assert_fail@plt+0xe454>
   1e940:	mov	r6, r0
   1e944:	mov	r0, r4
   1e948:	bl	10f90 <dcgettext@plt>
   1e94c:	str	r4, [sp, #4]
   1e950:	str	sl, [sp]
   1e954:	mov	r3, r6
   1e958:	strd	r8, [sp, #8]
   1e95c:	ldr	r2, [sp, #28]
   1e960:	ldr	r1, [sp, #24]
   1e964:	str	r0, [sp, #16]
   1e968:	mov	r0, r4
   1e96c:	bl	1717c <__assert_fail@plt+0x5f70>
   1e970:	subs	r4, r0, #0
   1e974:	bne	1f35c <__assert_fail@plt+0xe150>
   1e978:	ldr	r0, [sp, #88]	; 0x58
   1e97c:	bl	10f54 <free@plt>
   1e980:	ldr	r0, [sp, #64]	; 0x40
   1e984:	bl	10f54 <free@plt>
   1e988:	ldr	ip, [sp, #68]	; 0x44
   1e98c:	mov	r1, #1
   1e990:	ldr	r2, [ip, #84]	; 0x54
   1e994:	b	1e744 <__assert_fail@plt+0xd538>
   1e998:	ldr	r9, [sp, #44]	; 0x2c
   1e99c:	mov	r4, #5
   1e9a0:	ldr	r2, [pc, #3260]	; 1f664 <__assert_fail@plt+0xe458>
   1e9a4:	ldr	r3, [r9, #44]	; 0x2c
   1e9a8:	ldr	r1, [pc, #3256]	; 1f668 <__assert_fail@plt+0xe45c>
   1e9ac:	str	r4, [sp]
   1e9b0:	mov	r0, #0
   1e9b4:	bl	11200 <dcngettext@plt>
   1e9b8:	ldr	sl, [sp, #68]	; 0x44
   1e9bc:	mov	r2, r9
   1e9c0:	add	r1, sl, #108	; 0x6c
   1e9c4:	mov	r5, r0
   1e9c8:	add	r0, sl, #104	; 0x68
   1e9cc:	bl	16c64 <__assert_fail@plt+0x5a58>
   1e9d0:	ldr	r2, [r9, #44]	; 0x2c
   1e9d4:	mov	r1, r0
   1e9d8:	mov	r0, r5
   1e9dc:	bl	10f24 <printf@plt>
   1e9e0:	mov	r2, r4
   1e9e4:	ldr	r1, [pc, #3200]	; 1f66c <__assert_fail@plt+0xe460>
   1e9e8:	mov	r0, #0
   1e9ec:	bl	10f90 <dcgettext@plt>
   1e9f0:	bl	10f24 <printf@plt>
   1e9f4:	ldr	r0, [pc, #3160]	; 1f654 <__assert_fail@plt+0xe448>
   1e9f8:	ldrd	r2, [r9, #16]
   1e9fc:	ldr	r1, [pc, #3156]	; 1f658 <__assert_fail@plt+0xe44c>
   1ea00:	ldr	r0, [r0]
   1ea04:	bl	11098 <fprintf@plt>
   1ea08:	mov	r2, r4
   1ea0c:	ldr	r1, [pc, #3144]	; 1f65c <__assert_fail@plt+0xe450>
   1ea10:	mov	r0, #0
   1ea14:	bl	10f90 <dcgettext@plt>
   1ea18:	ldr	r5, [r9, #40]	; 0x28
   1ea1c:	ldr	r7, [r9, #24]
   1ea20:	mov	r1, r5
   1ea24:	mov	r6, r0
   1ea28:	mov	r0, sl
   1ea2c:	bl	16f20 <__assert_fail@plt+0x5d14>
   1ea30:	mov	r2, r5
   1ea34:	mov	r1, r7
   1ea38:	mov	r7, #0
   1ea3c:	mov	r3, r0
   1ea40:	mov	r0, r6
   1ea44:	bl	10f24 <printf@plt>
   1ea48:	mov	r2, r4
   1ea4c:	ldr	r1, [pc, #3100]	; 1f670 <__assert_fail@plt+0xe464>
   1ea50:	mov	r0, #0
   1ea54:	ldrd	r4, [r9, #32]
   1ea58:	ldr	r8, [r9, #24]
   1ea5c:	bl	10f90 <dcgettext@plt>
   1ea60:	mov	r6, #1
   1ea64:	strd	r4, [sp, #8]
   1ea68:	mov	r3, r8
   1ea6c:	strd	r6, [sp]
   1ea70:	add	r2, sl, #8
   1ea74:	add	r1, sl, #4
   1ea78:	str	r0, [sp, #16]
   1ea7c:	mov	r0, #0
   1ea80:	bl	1717c <__assert_fail@plt+0x5f70>
   1ea84:	subs	r4, r0, #0
   1ea88:	str	r4, [sp, #64]	; 0x40
   1ea8c:	bne	1ef48 <__assert_fail@plt+0xdd3c>
   1ea90:	ldr	r3, [sp, #68]	; 0x44
   1ea94:	mov	r1, #1
   1ea98:	ldr	r2, [r3, #84]	; 0x54
   1ea9c:	b	1e744 <__assert_fail@plt+0xd538>
   1eaa0:	ldr	r8, [sp, #44]	; 0x2c
   1eaa4:	mov	r4, #5
   1eaa8:	ldr	r2, [pc, #3012]	; 1f674 <__assert_fail@plt+0xe468>
   1eaac:	ldr	r3, [r8, #44]	; 0x2c
   1eab0:	ldr	r1, [pc, #3008]	; 1f678 <__assert_fail@plt+0xe46c>
   1eab4:	str	r4, [sp]
   1eab8:	mov	r0, #0
   1eabc:	bl	11200 <dcngettext@plt>
   1eac0:	ldr	r9, [sp, #68]	; 0x44
   1eac4:	mov	r2, r8
   1eac8:	add	r1, r9, #108	; 0x6c
   1eacc:	mov	r5, r0
   1ead0:	add	r0, r9, #104	; 0x68
   1ead4:	bl	16c64 <__assert_fail@plt+0x5a58>
   1ead8:	ldr	r2, [r8, #44]	; 0x2c
   1eadc:	mov	r1, r0
   1eae0:	mov	r0, r5
   1eae4:	bl	10f24 <printf@plt>
   1eae8:	mov	r2, r4
   1eaec:	ldr	r1, [pc, #2952]	; 1f67c <__assert_fail@plt+0xe470>
   1eaf0:	mov	r0, #0
   1eaf4:	bl	10f90 <dcgettext@plt>
   1eaf8:	bl	10f24 <printf@plt>
   1eafc:	ldr	r0, [pc, #2896]	; 1f654 <__assert_fail@plt+0xe448>
   1eb00:	ldrd	r2, [r8, #16]
   1eb04:	ldr	r1, [pc, #2892]	; 1f658 <__assert_fail@plt+0xe44c>
   1eb08:	ldr	r0, [r0]
   1eb0c:	bl	11098 <fprintf@plt>
   1eb10:	mov	r2, r4
   1eb14:	ldr	r1, [pc, #2880]	; 1f65c <__assert_fail@plt+0xe450>
   1eb18:	mov	r0, #0
   1eb1c:	bl	10f90 <dcgettext@plt>
   1eb20:	ldr	r5, [r8, #40]	; 0x28
   1eb24:	ldr	r7, [r8, #24]
   1eb28:	mov	r1, r5
   1eb2c:	mov	r6, r0
   1eb30:	mov	r0, r9
   1eb34:	bl	16f20 <__assert_fail@plt+0x5d14>
   1eb38:	mov	r2, r5
   1eb3c:	mov	r1, r7
   1eb40:	mov	r7, #0
   1eb44:	mov	r3, r0
   1eb48:	mov	r0, r6
   1eb4c:	bl	10f24 <printf@plt>
   1eb50:	mov	r3, r8
   1eb54:	mov	r2, r4
   1eb58:	ldr	r1, [pc, #2848]	; 1f680 <__assert_fail@plt+0xe474>
   1eb5c:	mov	r0, #0
   1eb60:	ldrd	r4, [r3, #32]
   1eb64:	ldr	r8, [r8, #24]
   1eb68:	bl	10f90 <dcgettext@plt>
   1eb6c:	mov	r6, #1
   1eb70:	mov	r3, r8
   1eb74:	strd	r4, [sp, #8]
   1eb78:	strd	r6, [sp]
   1eb7c:	add	r2, r9, #8
   1eb80:	add	r1, r9, #4
   1eb84:	str	r0, [sp, #16]
   1eb88:	mov	r0, #0
   1eb8c:	bl	1717c <__assert_fail@plt+0x5f70>
   1eb90:	subs	r3, r0, #0
   1eb94:	str	r3, [sp, #60]	; 0x3c
   1eb98:	beq	1ea90 <__assert_fail@plt+0xd884>
   1eb9c:	ldr	r2, [sp, #44]	; 0x2c
   1eba0:	ldr	r4, [sp, #60]	; 0x3c
   1eba4:	ldr	r3, [r2, #44]	; 0x2c
   1eba8:	ldr	r2, [r2, #32]
   1ebac:	cmp	r3, #0
   1ebb0:	str	r2, [sp, #64]	; 0x40
   1ebb4:	add	r9, r4, r2
   1ebb8:	beq	1ee90 <__assert_fail@plt+0xdc84>
   1ebbc:	add	r2, r4, #20
   1ebc0:	cmp	r9, r2
   1ebc4:	bcc	1f93c <__assert_fail@plt+0xe730>
   1ebc8:	ldr	sl, [pc, #2740]	; 1f684 <__assert_fail@plt+0xe478>
   1ebcc:	mov	r3, #0
   1ebd0:	str	r3, [sp, #48]	; 0x30
   1ebd4:	str	r3, [sp, #32]
   1ebd8:	ldr	r3, [sl]
   1ebdc:	mov	r1, #2
   1ebe0:	mov	r0, r4
   1ebe4:	blx	r3
   1ebe8:	mov	r1, #2
   1ebec:	ldr	r3, [sl]
   1ebf0:	mov	r6, r0
   1ebf4:	add	r0, r4, r1
   1ebf8:	blx	r3
   1ebfc:	ldr	r3, [sl]
   1ec00:	mov	r1, #2
   1ec04:	mov	r8, r0
   1ec08:	add	r0, r4, #4
   1ec0c:	blx	r3
   1ec10:	ldr	r3, [sl]
   1ec14:	mov	r1, #2
   1ec18:	mov	r5, r0
   1ec1c:	add	r0, r4, #6
   1ec20:	blx	r3
   1ec24:	ldr	ip, [sp, #64]	; 0x40
   1ec28:	ldr	r2, [sp, #32]
   1ec2c:	ldr	r3, [sl]
   1ec30:	sub	r2, ip, r2
   1ec34:	mov	r1, #4
   1ec38:	str	r2, [sp, #52]	; 0x34
   1ec3c:	uxth	r0, r0
   1ec40:	str	r0, [sp, #24]
   1ec44:	add	r0, r4, #8
   1ec48:	blx	r3
   1ec4c:	ldr	r3, [sl]
   1ec50:	mov	r1, #4
   1ec54:	add	r0, r4, #12
   1ec58:	blx	r3
   1ec5c:	ldr	r3, [sl]
   1ec60:	mov	r1, #4
   1ec64:	mov	r7, r0
   1ec68:	add	r0, r4, #16
   1ec6c:	blx	r3
   1ec70:	mov	r2, #5
   1ec74:	ldr	r1, [pc, #2572]	; 1f688 <__assert_fail@plt+0xe47c>
   1ec78:	str	r0, [sp, #40]	; 0x28
   1ec7c:	mov	r0, #0
   1ec80:	bl	10f90 <dcgettext@plt>
   1ec84:	str	r0, [sp, #28]
   1ec88:	uxth	r0, r8
   1ec8c:	bl	14b94 <__assert_fail@plt+0x3988>
   1ec90:	ldr	r1, [sp, #28]
   1ec94:	uxth	r2, r6
   1ec98:	mov	r3, r0
   1ec9c:	mov	r0, r1
   1eca0:	ldr	r1, [sp, #32]
   1eca4:	bl	10f24 <printf@plt>
   1eca8:	mov	r2, #5
   1ecac:	ldr	r1, [pc, #2520]	; 1f68c <__assert_fail@plt+0xe480>
   1ecb0:	mov	r0, #0
   1ecb4:	bl	10f90 <dcgettext@plt>
   1ecb8:	ldr	r2, [sp, #24]
   1ecbc:	uxth	r1, r5
   1ecc0:	bl	10f24 <printf@plt>
   1ecc4:	ldr	r2, [sp, #52]	; 0x34
   1ecc8:	cmp	r7, r2
   1eccc:	bhi	1f2c8 <__assert_fail@plt+0xe0bc>
   1ecd0:	add	r4, r4, r7
   1ecd4:	add	r3, r4, #8
   1ecd8:	cmp	r9, r3
   1ecdc:	bcc	1f2c8 <__assert_fail@plt+0xe0bc>
   1ece0:	ldr	r3, [sl]
   1ece4:	mov	r1, #4
   1ece8:	mov	r0, r4
   1ecec:	blx	r3
   1ecf0:	mov	r1, #4
   1ecf4:	ldr	r3, [sl]
   1ecf8:	mov	r6, r0
   1ecfc:	add	r0, r4, r1
   1ed00:	blx	r3
   1ed04:	ldr	r8, [fp, #1128]	; 0x468
   1ed08:	mov	r2, #5
   1ed0c:	cmp	r8, #0
   1ed10:	mov	r5, r0
   1ed14:	beq	1ed24 <__assert_fail@plt+0xdb18>
   1ed18:	ldr	r3, [fp, #1400]	; 0x578
   1ed1c:	cmp	r6, r3
   1ed20:	bcc	1eeec <__assert_fail@plt+0xdce0>
   1ed24:	ldr	r1, [pc, #2404]	; 1f690 <__assert_fail@plt+0xe484>
   1ed28:	mov	r0, #0
   1ed2c:	bl	10f90 <dcgettext@plt>
   1ed30:	mov	r1, r6
   1ed34:	bl	10f24 <printf@plt>
   1ed38:	ldr	r3, [sp, #24]
   1ed3c:	ldr	r2, [sp, #32]
   1ed40:	cmp	r3, #1
   1ed44:	add	r7, r7, r2
   1ed48:	bls	1ee18 <__assert_fail@plt+0xdc0c>
   1ed4c:	sub	r3, r3, #1
   1ed50:	mov	r6, #1
   1ed54:	str	r3, [sp, #28]
   1ed58:	b	1ede0 <__assert_fail@plt+0xdbd4>
   1ed5c:	ldr	r2, [sp, #28]
   1ed60:	cmp	r5, #0
   1ed64:	cmpeq	r2, r6
   1ed68:	bne	1ef04 <__assert_fail@plt+0xdcf8>
   1ed6c:	cmp	r9, r3
   1ed70:	add	r7, r7, r5
   1ed74:	bcc	1ee04 <__assert_fail@plt+0xdbf8>
   1ed78:	ldr	r3, [sl]
   1ed7c:	blx	r3
   1ed80:	mov	r1, #4
   1ed84:	ldr	r3, [sl]
   1ed88:	mov	r8, r0
   1ed8c:	add	r0, r4, r1
   1ed90:	blx	r3
   1ed94:	ldr	r3, [fp, #1128]	; 0x468
   1ed98:	mov	r2, #5
   1ed9c:	ldr	r1, [pc, #2288]	; 1f694 <__assert_fail@plt+0xe488>
   1eda0:	mov	r5, r0
   1eda4:	mov	r0, #0
   1eda8:	cmp	r3, r0
   1edac:	beq	1edbc <__assert_fail@plt+0xdbb0>
   1edb0:	ldr	ip, [fp, #1400]	; 0x578
   1edb4:	cmp	r8, ip
   1edb8:	bcc	1eea8 <__assert_fail@plt+0xdc9c>
   1edbc:	bl	10f90 <dcgettext@plt>
   1edc0:	mov	r3, r8
   1edc4:	mov	r2, r6
   1edc8:	mov	r1, r7
   1edcc:	bl	10f24 <printf@plt>
   1edd0:	ldr	r3, [sp, #24]
   1edd4:	add	r6, r6, #1
   1edd8:	cmp	r3, r6
   1eddc:	beq	1ee18 <__assert_fail@plt+0xdc0c>
   1ede0:	sub	r2, r9, r4
   1ede4:	cmp	r5, #7
   1ede8:	add	r4, r4, r5
   1edec:	mov	r1, #4
   1edf0:	mov	r0, r4
   1edf4:	add	r3, r4, #8
   1edf8:	bls	1ed5c <__assert_fail@plt+0xdb50>
   1edfc:	cmp	r2, r5
   1ee00:	bcs	1ed6c <__assert_fail@plt+0xdb60>
   1ee04:	mov	r2, #5
   1ee08:	ldr	r1, [pc, #2184]	; 1f698 <__assert_fail@plt+0xe48c>
   1ee0c:	mov	r0, #0
   1ee10:	bl	10f90 <dcgettext@plt>
   1ee14:	bl	10f24 <printf@plt>
   1ee18:	ldr	r1, [sp, #40]	; 0x28
   1ee1c:	ldr	r3, [sp, #44]	; 0x2c
   1ee20:	cmp	r1, #19
   1ee24:	ldr	r3, [r3, #44]	; 0x2c
   1ee28:	bhi	1eecc <__assert_fail@plt+0xdcc0>
   1ee2c:	ldr	r0, [sp, #48]	; 0x30
   1ee30:	sub	r2, r3, #1
   1ee34:	cmp	r1, #0
   1ee38:	cmpeq	r2, r0
   1ee3c:	bne	1f340 <__assert_fail@plt+0xe134>
   1ee40:	ldr	r2, [sp, #48]	; 0x30
   1ee44:	add	r2, r2, #1
   1ee48:	cmp	r3, r2
   1ee4c:	str	r2, [sp, #48]	; 0x30
   1ee50:	ldr	r3, [sp, #32]
   1ee54:	ldr	r2, [sp, #40]	; 0x28
   1ee58:	add	r3, r3, r2
   1ee5c:	str	r3, [sp, #32]
   1ee60:	bls	1ee90 <__assert_fail@plt+0xdc84>
   1ee64:	ldr	r3, [sp, #60]	; 0x3c
   1ee68:	ldr	r2, [sp, #32]
   1ee6c:	add	r4, r3, r2
   1ee70:	add	r3, r4, #20
   1ee74:	cmp	r9, r3
   1ee78:	bcs	1ebd8 <__assert_fail@plt+0xd9cc>
   1ee7c:	mov	r2, #5
   1ee80:	ldr	r1, [pc, #2068]	; 1f69c <__assert_fail@plt+0xe490>
   1ee84:	mov	r0, #0
   1ee88:	bl	10f90 <dcgettext@plt>
   1ee8c:	bl	10f24 <printf@plt>
   1ee90:	ldr	r0, [sp, #60]	; 0x3c
   1ee94:	bl	10f54 <free@plt>
   1ee98:	ldr	r3, [sp, #68]	; 0x44
   1ee9c:	mov	r1, #1
   1eea0:	ldr	r2, [r3, #84]	; 0x54
   1eea4:	b	1e744 <__assert_fail@plt+0xd538>
   1eea8:	ldr	r1, [pc, #2032]	; 1f6a0 <__assert_fail@plt+0xe494>
   1eeac:	str	r3, [sp, #36]	; 0x24
   1eeb0:	bl	10f90 <dcgettext@plt>
   1eeb4:	ldr	r3, [sp, #36]	; 0x24
   1eeb8:	mov	r2, r6
   1eebc:	add	r3, r3, r8
   1eec0:	mov	r1, r7
   1eec4:	bl	10f24 <printf@plt>
   1eec8:	b	1edd0 <__assert_fail@plt+0xdbc4>
   1eecc:	ldr	r2, [sp, #40]	; 0x28
   1eed0:	ldr	r1, [sp, #52]	; 0x34
   1eed4:	cmp	r2, r1
   1eed8:	bls	1ee40 <__assert_fail@plt+0xdc34>
   1eedc:	ldr	r2, [sp, #48]	; 0x30
   1eee0:	cmp	r2, r3
   1eee4:	bcs	1ee90 <__assert_fail@plt+0xdc84>
   1eee8:	b	1ee7c <__assert_fail@plt+0xdc70>
   1eeec:	ldr	r1, [pc, #1968]	; 1f6a4 <__assert_fail@plt+0xe498>
   1eef0:	mov	r0, #0
   1eef4:	bl	10f90 <dcgettext@plt>
   1eef8:	add	r1, r8, r6
   1eefc:	bl	10f24 <printf@plt>
   1ef00:	b	1ed38 <__assert_fail@plt+0xdb2c>
   1ef04:	mov	r2, #5
   1ef08:	ldr	r1, [pc, #1944]	; 1f6a8 <__assert_fail@plt+0xe49c>
   1ef0c:	mov	r0, #0
   1ef10:	bl	10f90 <dcgettext@plt>
   1ef14:	mov	r1, r5
   1ef18:	bl	54dd0 <warn@@Base>
   1ef1c:	b	1ee18 <__assert_fail@plt+0xdc0c>
   1ef20:	cmp	r1, #0
   1ef24:	bne	1ef3c <__assert_fail@plt+0xdd30>
   1ef28:	mov	r2, #5
   1ef2c:	ldr	r1, [pc, #1912]	; 1f6ac <__assert_fail@plt+0xe4a0>
   1ef30:	mov	r0, #0
   1ef34:	bl	10f90 <dcgettext@plt>
   1ef38:	bl	10f24 <printf@plt>
   1ef3c:	mov	r0, #1
   1ef40:	add	sp, sp, #156	; 0x9c
   1ef44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ef48:	ldr	r2, [r9, #32]
   1ef4c:	ldr	r3, [r9, #44]	; 0x2c
   1ef50:	add	r1, r4, r2
   1ef54:	cmp	r3, #0
   1ef58:	str	r2, [sp, #72]	; 0x48
   1ef5c:	str	r1, [sp, #24]
   1ef60:	beq	1f240 <__assert_fail@plt+0xe034>
   1ef64:	add	r2, r4, #16
   1ef68:	cmp	r1, r2
   1ef6c:	bcc	1f930 <__assert_fail@plt+0xe724>
   1ef70:	ldr	sl, [pc, #1804]	; 1f684 <__assert_fail@plt+0xe478>
   1ef74:	mov	r3, #0
   1ef78:	str	r3, [sp, #52]	; 0x34
   1ef7c:	str	r3, [sp, #40]	; 0x28
   1ef80:	ldr	r3, [sl]
   1ef84:	mov	r1, #2
   1ef88:	mov	r0, r4
   1ef8c:	blx	r3
   1ef90:	mov	r1, #2
   1ef94:	ldr	r3, [sl]
   1ef98:	mov	r7, r0
   1ef9c:	add	r0, r4, r1
   1efa0:	blx	r3
   1efa4:	mov	r1, #4
   1efa8:	ldr	r3, [sl]
   1efac:	uxth	r9, r0
   1efb0:	add	r0, r4, r1
   1efb4:	blx	r3
   1efb8:	ldr	r3, [sl]
   1efbc:	mov	r1, #4
   1efc0:	mov	r6, r0
   1efc4:	add	r0, r4, #8
   1efc8:	blx	r3
   1efcc:	ldr	r3, [sl]
   1efd0:	mov	r1, #4
   1efd4:	mov	r8, r0
   1efd8:	add	r0, r4, #12
   1efdc:	blx	r3
   1efe0:	mov	r2, #5
   1efe4:	ldr	r1, [pc, #1732]	; 1f6b0 <__assert_fail@plt+0xe4a4>
   1efe8:	str	r0, [sp, #48]	; 0x30
   1efec:	mov	r0, #0
   1eff0:	bl	10f90 <dcgettext@plt>
   1eff4:	uxth	r2, r7
   1eff8:	ldr	r1, [sp, #40]	; 0x28
   1effc:	bl	10f24 <printf@plt>
   1f000:	ldr	r7, [fp, #1128]	; 0x468
   1f004:	mov	r2, #5
   1f008:	cmp	r7, #0
   1f00c:	beq	1f01c <__assert_fail@plt+0xde10>
   1f010:	ldr	r3, [fp, #1400]	; 0x578
   1f014:	cmp	r6, r3
   1f018:	bcc	1f294 <__assert_fail@plt+0xe088>
   1f01c:	ldr	r1, [pc, #1680]	; 1f6b4 <__assert_fail@plt+0xe4a8>
   1f020:	mov	r0, #0
   1f024:	bl	10f90 <dcgettext@plt>
   1f028:	mov	r1, r6
   1f02c:	bl	10f24 <printf@plt>
   1f030:	mov	r2, #5
   1f034:	ldr	r1, [pc, #1660]	; 1f6b8 <__assert_fail@plt+0xe4ac>
   1f038:	mov	r0, #0
   1f03c:	bl	10f90 <dcgettext@plt>
   1f040:	ldr	r3, [sp, #72]	; 0x48
   1f044:	ldr	r2, [sp, #40]	; 0x28
   1f048:	mov	r1, r9
   1f04c:	sub	r3, r3, r2
   1f050:	mov	r5, r3
   1f054:	str	r3, [sp, #60]	; 0x3c
   1f058:	bl	10f24 <printf@plt>
   1f05c:	cmp	r8, r5
   1f060:	bhi	1f304 <__assert_fail@plt+0xe0f8>
   1f064:	ldr	r3, [sp, #40]	; 0x28
   1f068:	cmp	r9, #0
   1f06c:	add	r4, r4, r8
   1f070:	add	r8, r8, r3
   1f074:	beq	1f1c4 <__assert_fail@plt+0xdfb8>
   1f078:	ldr	r2, [sp, #24]
   1f07c:	add	r3, r4, #16
   1f080:	cmp	r2, r3
   1f084:	bcc	1f1b0 <__assert_fail@plt+0xdfa4>
   1f088:	mov	r3, r8
   1f08c:	mov	r6, #0
   1f090:	mov	r8, r9
   1f094:	mov	r9, r3
   1f098:	b	1f0cc <__assert_fail@plt+0xdec0>
   1f09c:	cmp	r5, #0
   1f0a0:	cmpeq	r2, r6
   1f0a4:	bne	1f2ac <__assert_fail@plt+0xe0a0>
   1f0a8:	add	r6, r6, #1
   1f0ac:	add	r4, r4, r5
   1f0b0:	cmp	r8, r6
   1f0b4:	add	r3, r4, #16
   1f0b8:	add	r9, r9, r5
   1f0bc:	beq	1f1c4 <__assert_fail@plt+0xdfb8>
   1f0c0:	ldr	r2, [sp, #24]
   1f0c4:	cmp	r2, r3
   1f0c8:	bcc	1f1b0 <__assert_fail@plt+0xdfa4>
   1f0cc:	ldr	r3, [sl]
   1f0d0:	mov	r1, #4
   1f0d4:	mov	r0, r4
   1f0d8:	blx	r3
   1f0dc:	ldr	r3, [sl]
   1f0e0:	mov	r1, #2
   1f0e4:	add	r0, r4, #4
   1f0e8:	blx	r3
   1f0ec:	ldr	r3, [sl]
   1f0f0:	mov	r1, #2
   1f0f4:	uxth	r2, r0
   1f0f8:	add	r0, r4, #6
   1f0fc:	str	r2, [sp, #28]
   1f100:	blx	r3
   1f104:	ldr	r3, [sl]
   1f108:	mov	r1, #4
   1f10c:	uxth	r2, r0
   1f110:	add	r0, r4, #8
   1f114:	str	r2, [sp, #32]
   1f118:	blx	r3
   1f11c:	ldr	r3, [sl]
   1f120:	mov	r1, #4
   1f124:	mov	r7, r0
   1f128:	add	r0, r4, #12
   1f12c:	blx	r3
   1f130:	ldr	r3, [fp, #1128]	; 0x468
   1f134:	mov	r2, #5
   1f138:	ldr	r1, [pc, #1404]	; 1f6bc <__assert_fail@plt+0xe4b0>
   1f13c:	mov	r5, r0
   1f140:	mov	r0, #0
   1f144:	cmp	r3, r0
   1f148:	beq	1f158 <__assert_fail@plt+0xdf4c>
   1f14c:	ldr	ip, [fp, #1400]	; 0x578
   1f150:	cmp	r7, ip
   1f154:	bcc	1f24c <__assert_fail@plt+0xe040>
   1f158:	bl	10f90 <dcgettext@plt>
   1f15c:	mov	r2, r7
   1f160:	mov	r1, r9
   1f164:	bl	10f24 <printf@plt>
   1f168:	mov	r2, #5
   1f16c:	ldr	r1, [pc, #1356]	; 1f6c0 <__assert_fail@plt+0xe4b4>
   1f170:	mov	r0, #0
   1f174:	bl	10f90 <dcgettext@plt>
   1f178:	mov	r7, r0
   1f17c:	ldr	r0, [sp, #28]
   1f180:	bl	14b94 <__assert_fail@plt+0x3988>
   1f184:	ldr	r2, [sp, #32]
   1f188:	mov	r1, r0
   1f18c:	mov	r0, r7
   1f190:	bl	10f24 <printf@plt>
   1f194:	ldr	r3, [sp, #24]
   1f198:	cmp	r5, #15
   1f19c:	sub	r3, r3, r4
   1f1a0:	sub	r2, r8, #1
   1f1a4:	bls	1f09c <__assert_fail@plt+0xde90>
   1f1a8:	cmp	r5, r3
   1f1ac:	bls	1f0a8 <__assert_fail@plt+0xde9c>
   1f1b0:	mov	r2, #5
   1f1b4:	ldr	r1, [pc, #1288]	; 1f6c4 <__assert_fail@plt+0xe4b8>
   1f1b8:	mov	r0, #0
   1f1bc:	bl	10f90 <dcgettext@plt>
   1f1c0:	bl	54dd0 <warn@@Base>
   1f1c4:	ldr	r1, [sp, #48]	; 0x30
   1f1c8:	ldr	r3, [sp, #44]	; 0x2c
   1f1cc:	cmp	r1, #15
   1f1d0:	ldr	r3, [r3, #44]	; 0x2c
   1f1d4:	bhi	1f26c <__assert_fail@plt+0xe060>
   1f1d8:	ldr	r0, [sp, #52]	; 0x34
   1f1dc:	sub	r2, r3, #1
   1f1e0:	cmp	r1, #0
   1f1e4:	cmpeq	r2, r0
   1f1e8:	bne	1f31c <__assert_fail@plt+0xe110>
   1f1ec:	ldr	r2, [sp, #52]	; 0x34
   1f1f0:	add	r2, r2, #1
   1f1f4:	cmp	r2, r3
   1f1f8:	str	r2, [sp, #52]	; 0x34
   1f1fc:	ldr	r3, [sp, #40]	; 0x28
   1f200:	ldr	r2, [sp, #48]	; 0x30
   1f204:	add	r3, r3, r2
   1f208:	str	r3, [sp, #40]	; 0x28
   1f20c:	bcs	1f240 <__assert_fail@plt+0xe034>
   1f210:	ldr	r3, [sp, #64]	; 0x40
   1f214:	ldr	r2, [sp, #40]	; 0x28
   1f218:	add	r4, r3, r2
   1f21c:	ldr	r2, [sp, #24]
   1f220:	add	r3, r4, #16
   1f224:	cmp	r2, r3
   1f228:	bcs	1ef80 <__assert_fail@plt+0xdd74>
   1f22c:	mov	r2, #5
   1f230:	ldr	r1, [pc, #1168]	; 1f6c8 <__assert_fail@plt+0xe4bc>
   1f234:	mov	r0, #0
   1f238:	bl	10f90 <dcgettext@plt>
   1f23c:	bl	54dd0 <warn@@Base>
   1f240:	ldr	r0, [sp, #64]	; 0x40
   1f244:	bl	10f54 <free@plt>
   1f248:	b	1ea90 <__assert_fail@plt+0xd884>
   1f24c:	ldr	r1, [pc, #1144]	; 1f6cc <__assert_fail@plt+0xe4c0>
   1f250:	str	r3, [sp, #36]	; 0x24
   1f254:	bl	10f90 <dcgettext@plt>
   1f258:	ldr	r3, [sp, #36]	; 0x24
   1f25c:	mov	r1, r9
   1f260:	add	r2, r3, r7
   1f264:	bl	10f24 <printf@plt>
   1f268:	b	1f168 <__assert_fail@plt+0xdf5c>
   1f26c:	ldr	r2, [sp, #48]	; 0x30
   1f270:	ldr	r1, [sp, #60]	; 0x3c
   1f274:	cmp	r2, r1
   1f278:	bls	1f1ec <__assert_fail@plt+0xdfe0>
   1f27c:	ldr	r2, [sp, #52]	; 0x34
   1f280:	cmp	r2, r3
   1f284:	bcc	1f22c <__assert_fail@plt+0xe020>
   1f288:	ldr	r0, [sp, #64]	; 0x40
   1f28c:	bl	10f54 <free@plt>
   1f290:	b	1ea90 <__assert_fail@plt+0xd884>
   1f294:	ldr	r1, [pc, #1076]	; 1f6d0 <__assert_fail@plt+0xe4c4>
   1f298:	mov	r0, #0
   1f29c:	bl	10f90 <dcgettext@plt>
   1f2a0:	add	r1, r7, r6
   1f2a4:	bl	10f24 <printf@plt>
   1f2a8:	b	1f030 <__assert_fail@plt+0xde24>
   1f2ac:	mov	r2, #5
   1f2b0:	ldr	r1, [pc, #1052]	; 1f6d4 <__assert_fail@plt+0xe4c8>
   1f2b4:	mov	r0, #0
   1f2b8:	bl	10f90 <dcgettext@plt>
   1f2bc:	mov	r1, r5
   1f2c0:	bl	54dd0 <warn@@Base>
   1f2c4:	b	1f1c4 <__assert_fail@plt+0xdfb8>
   1f2c8:	ldr	r3, [sp, #44]	; 0x2c
   1f2cc:	ldr	r2, [sp, #48]	; 0x30
   1f2d0:	ldr	r3, [r3, #44]	; 0x2c
   1f2d4:	cmp	r2, r3
   1f2d8:	bcs	1ee90 <__assert_fail@plt+0xdc84>
   1f2dc:	b	1ee7c <__assert_fail@plt+0xdc70>
   1f2e0:	bl	1772c <__assert_fail@plt+0x6520>
   1f2e4:	str	r0, [sp, #64]	; 0x40
   1f2e8:	ldr	r3, [sp, #64]	; 0x40
   1f2ec:	cmp	r3, #0
   1f2f0:	bne	1e7dc <__assert_fail@plt+0xd5d0>
   1f2f4:	ldr	r3, [sp, #68]	; 0x44
   1f2f8:	mov	r1, #1
   1f2fc:	ldr	r2, [r3, #84]	; 0x54
   1f300:	b	1e744 <__assert_fail@plt+0xd538>
   1f304:	ldr	r3, [sp, #44]	; 0x2c
   1f308:	ldr	r2, [sp, #52]	; 0x34
   1f30c:	ldr	r3, [r3, #44]	; 0x2c
   1f310:	cmp	r2, r3
   1f314:	bcs	1f288 <__assert_fail@plt+0xe07c>
   1f318:	b	1f22c <__assert_fail@plt+0xe020>
   1f31c:	mov	r2, #5
   1f320:	ldr	r1, [pc, #944]	; 1f6d8 <__assert_fail@plt+0xe4cc>
   1f324:	mov	r0, #0
   1f328:	bl	10f90 <dcgettext@plt>
   1f32c:	ldr	r1, [sp, #48]	; 0x30
   1f330:	bl	54dd0 <warn@@Base>
   1f334:	ldr	r0, [sp, #64]	; 0x40
   1f338:	bl	10f54 <free@plt>
   1f33c:	b	1ea90 <__assert_fail@plt+0xd884>
   1f340:	mov	r2, #5
   1f344:	ldr	r1, [pc, #912]	; 1f6dc <__assert_fail@plt+0xe4d0>
   1f348:	mov	r0, #0
   1f34c:	bl	10f90 <dcgettext@plt>
   1f350:	ldr	r1, [sp, #40]	; 0x28
   1f354:	bl	54dd0 <warn@@Base>
   1f358:	b	1ee90 <__assert_fail@plt+0xdc84>
   1f35c:	ldr	r6, [sp, #48]	; 0x30
   1f360:	mov	r1, #2
   1f364:	mov	r0, r6
   1f368:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   1f36c:	cmp	r6, #0
   1f370:	mov	r7, r0
   1f374:	str	r0, [sp, #108]	; 0x6c
   1f378:	beq	1f624 <__assert_fail@plt+0xe418>
   1f37c:	sub	r3, r6, #-2147483647	; 0x80000001
   1f380:	ldr	sl, [pc, #764]	; 1f684 <__assert_fail@plt+0xe478>
   1f384:	add	r6, r0, r5
   1f388:	add	r5, r4, r3, lsl #1
   1f38c:	mov	r0, r5
   1f390:	ldr	r3, [sl]
   1f394:	mov	r1, #2
   1f398:	blx	r3
   1f39c:	sub	r5, r5, #2
   1f3a0:	strh	r0, [r6, #-2]!
   1f3a4:	cmp	r6, r7
   1f3a8:	bne	1f38c <__assert_fail@plt+0xe180>
   1f3ac:	mov	r0, r4
   1f3b0:	str	r6, [sp, #52]	; 0x34
   1f3b4:	bl	10f54 <free@plt>
   1f3b8:	mov	r3, #4
   1f3bc:	str	r3, [sp, #36]	; 0x24
   1f3c0:	ldr	r3, [sp, #36]	; 0x24
   1f3c4:	mov	r2, #5
   1f3c8:	ldr	r1, [pc, #784]	; 1f6e0 <__assert_fail@plt+0xe4d4>
   1f3cc:	mov	r0, #0
   1f3d0:	sub	r7, r3, #4
   1f3d4:	bl	10f90 <dcgettext@plt>
   1f3d8:	mov	r1, r7
   1f3dc:	mov	r8, r7
   1f3e0:	str	r0, [sp, #72]	; 0x48
   1f3e4:	ldr	r0, [pc, #760]	; 1f6e4 <__assert_fail@plt+0xe4d8>
   1f3e8:	bl	10f24 <printf@plt>
   1f3ec:	ldr	r6, [sp, #52]	; 0x34
   1f3f0:	ldr	r3, [sp, #48]	; 0x30
   1f3f4:	cmp	r3, r8
   1f3f8:	bls	1f584 <__assert_fail@plt+0xe378>
   1f3fc:	ldrh	r0, [r6]
   1f400:	cmp	r0, #0
   1f404:	beq	1f5bc <__assert_fail@plt+0xe3b0>
   1f408:	cmp	r0, #1
   1f40c:	beq	1f5d8 <__assert_fail@plt+0xe3cc>
   1f410:	lsl	r1, r0, #17
   1f414:	tst	r0, #32768	; 0x8000
   1f418:	movne	r2, #104	; 0x68
   1f41c:	moveq	r2, #32
   1f420:	lsr	r1, r1, #17
   1f424:	ldr	r0, [pc, #700]	; 1f6e8 <__assert_fail@plt+0xe4dc>
   1f428:	bl	10f24 <printf@plt>
   1f42c:	ldr	r3, [sp, #112]	; 0x70
   1f430:	cmp	r3, r8
   1f434:	str	r0, [sp, #60]	; 0x3c
   1f438:	bls	1f5f8 <__assert_fail@plt+0xe3ec>
   1f43c:	ldr	r3, [pc, #720]	; 1f714 <__assert_fail@plt+0xe508>
   1f440:	ldrd	r2, [r3, #8]
   1f444:	orrs	r1, r2, r3
   1f448:	bne	1f720 <__assert_fail@plt+0xe514>
   1f44c:	ldrh	r2, [r6]
   1f450:	ldr	r3, [pc, #696]	; 1f710 <__assert_fail@plt+0xe504>
   1f454:	cmp	r2, r3
   1f458:	beq	1f564 <__assert_fail@plt+0xe358>
   1f45c:	ldr	r3, [pc, #688]	; 1f714 <__assert_fail@plt+0xe508>
   1f460:	ldrd	r2, [r3, #24]
   1f464:	orrs	r1, r2, r3
   1f468:	movne	r1, #0
   1f46c:	strne	r1, [sp, #40]	; 0x28
   1f470:	beq	1f564 <__assert_fail@plt+0xe358>
   1f474:	add	r9, sp, #132	; 0x84
   1f478:	mov	ip, #20
   1f47c:	mov	r1, #0
   1f480:	str	ip, [sp]
   1f484:	str	r1, [sp, #4]
   1f488:	ldr	r0, [sp, #68]	; 0x44
   1f48c:	str	ip, [sp, #32]
   1f490:	mov	r5, r1
   1f494:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   1f498:	mov	r7, r0
   1f49c:	b	1f4e4 <__assert_fail@plt+0xe2d8>
   1f4a0:	ldr	r3, [sl]
   1f4a4:	blx	r3
   1f4a8:	ldr	r3, [sl]
   1f4ac:	mov	r1, #2
   1f4b0:	mov	r4, r0
   1f4b4:	add	r0, sp, #136	; 0x88
   1f4b8:	blx	r3
   1f4bc:	ldrh	r3, [r6]
   1f4c0:	add	r1, r4, r7
   1f4c4:	lsl	r3, r3, #17
   1f4c8:	lsr	r3, r3, #17
   1f4cc:	uxth	r0, r0
   1f4d0:	cmp	r0, r3
   1f4d4:	beq	1f948 <__assert_fail@plt+0xe73c>
   1f4d8:	cmp	r4, #0
   1f4dc:	mov	r7, r1
   1f4e0:	beq	1f530 <__assert_fail@plt+0xe324>
   1f4e4:	mov	r2, #5
   1f4e8:	ldr	r1, [pc, #508]	; 1f6ec <__assert_fail@plt+0xe4e0>
   1f4ec:	mov	r0, #0
   1f4f0:	bl	10f90 <dcgettext@plt>
   1f4f4:	mov	r2, #1
   1f4f8:	mov	r3, #0
   1f4fc:	ldr	r1, [sp, #24]
   1f500:	strd	r2, [sp, #8]
   1f504:	ldr	r3, [sp, #32]
   1f508:	ldr	r2, [sp, #28]
   1f50c:	stm	sp, {r3, r5}
   1f510:	mov	r3, r7
   1f514:	str	r0, [sp, #16]
   1f518:	mov	r0, r9
   1f51c:	bl	1717c <__assert_fail@plt+0x5f70>
   1f520:	mov	r1, #4
   1f524:	cmp	r0, #0
   1f528:	add	r0, sp, #148	; 0x94
   1f52c:	bne	1f4a0 <__assert_fail@plt+0xe294>
   1f530:	ldr	r4, [sp, #40]	; 0x28
   1f534:	cmp	r4, #0
   1f538:	beq	1f564 <__assert_fail@plt+0xe358>
   1f53c:	mov	r0, r4
   1f540:	bl	11080 <strlen@plt>
   1f544:	ldr	r3, [pc, #420]	; 1f6f0 <__assert_fail@plt+0xe4e4>
   1f548:	mov	r1, r4
   1f54c:	rsb	r2, r0, #12
   1f550:	ldr	r0, [pc, #412]	; 1f6f4 <__assert_fail@plt+0xe4e8>
   1f554:	bl	10f24 <printf@plt>
   1f558:	ldr	r3, [sp, #60]	; 0x3c
   1f55c:	add	r3, r3, r0
   1f560:	str	r3, [sp, #60]	; 0x3c
   1f564:	ldr	r3, [sp, #60]	; 0x3c
   1f568:	cmp	r3, #17
   1f56c:	ble	1f610 <__assert_fail@plt+0xe404>
   1f570:	ldr	r3, [sp, #36]	; 0x24
   1f574:	add	r8, r8, #1
   1f578:	cmp	r3, r8
   1f57c:	add	r6, r6, #2
   1f580:	bne	1f3f0 <__assert_fail@plt+0xe1e4>
   1f584:	ldr	r3, [pc, #200]	; 1f654 <__assert_fail@plt+0xe448>
   1f588:	mov	r0, #10
   1f58c:	ldr	r1, [r3]
   1f590:	bl	11158 <putc@plt>
   1f594:	ldr	r3, [sp, #36]	; 0x24
   1f598:	ldr	r2, [sp, #48]	; 0x30
   1f59c:	cmp	r3, r2
   1f5a0:	ldr	r2, [sp, #52]	; 0x34
   1f5a4:	add	r3, r3, #4
   1f5a8:	add	r2, r2, #8
   1f5ac:	str	r2, [sp, #52]	; 0x34
   1f5b0:	bcs	1f62c <__assert_fail@plt+0xe420>
   1f5b4:	str	r3, [sp, #36]	; 0x24
   1f5b8:	b	1f3c0 <__assert_fail@plt+0xe1b4>
   1f5bc:	mov	r2, #5
   1f5c0:	ldr	r1, [pc, #304]	; 1f6f8 <__assert_fail@plt+0xe4ec>
   1f5c4:	bl	10f90 <dcgettext@plt>
   1f5c8:	ldr	r3, [pc, #132]	; 1f654 <__assert_fail@plt+0xe448>
   1f5cc:	ldr	r1, [r3]
   1f5d0:	bl	111c4 <fputs@plt>
   1f5d4:	b	1f570 <__assert_fail@plt+0xe364>
   1f5d8:	mov	r2, #5
   1f5dc:	ldr	r1, [pc, #280]	; 1f6fc <__assert_fail@plt+0xe4f0>
   1f5e0:	mov	r0, #0
   1f5e4:	bl	10f90 <dcgettext@plt>
   1f5e8:	ldr	r3, [pc, #100]	; 1f654 <__assert_fail@plt+0xe448>
   1f5ec:	ldr	r1, [r3]
   1f5f0:	bl	111c4 <fputs@plt>
   1f5f4:	b	1f570 <__assert_fail@plt+0xe364>
   1f5f8:	mov	r2, #5
   1f5fc:	ldr	r1, [pc, #252]	; 1f700 <__assert_fail@plt+0xe4f4>
   1f600:	mov	r0, #0
   1f604:	bl	10f90 <dcgettext@plt>
   1f608:	bl	54dd0 <warn@@Base>
   1f60c:	b	1f570 <__assert_fail@plt+0xe364>
   1f610:	rsb	r1, r3, #18
   1f614:	mov	r2, #32
   1f618:	ldr	r0, [pc, #228]	; 1f704 <__assert_fail@plt+0xe4f8>
   1f61c:	bl	10f24 <printf@plt>
   1f620:	b	1f570 <__assert_fail@plt+0xe364>
   1f624:	mov	r0, r4
   1f628:	bl	10f54 <free@plt>
   1f62c:	ldr	r0, [sp, #108]	; 0x6c
   1f630:	bl	10f54 <free@plt>
   1f634:	ldr	r0, [sp, #88]	; 0x58
   1f638:	bl	10f54 <free@plt>
   1f63c:	b	1f240 <__assert_fail@plt+0xe034>
   1f640:	andeq	sl, r9, r8, lsr r4
   1f644:	andeq	r5, r6, r0, lsl #31
   1f648:	muleq	r6, r8, pc	; <UNPREDICTABLE>
   1f64c:	ldrdeq	r5, [r6], -r0
   1f650:	andeq	r6, r6, r4
   1f654:	andeq	sl, r9, ip, lsr #8
   1f658:	andeq	r2, r6, r8, asr sp
   1f65c:	andeq	r5, r6, ip, asr #25
   1f660:	andeq	r6, r6, ip
   1f664:	andeq	r5, r6, r8, lsl #28
   1f668:	andeq	r5, r6, ip, lsr lr
   1f66c:	andeq	r5, r6, ip, ror #28
   1f670:	andeq	r5, r6, r8, ror lr
   1f674:	andeq	r5, r6, r0, asr ip
   1f678:	andeq	r5, r6, r8, lsl #25
   1f67c:	andeq	r5, r6, r0, asr #25
   1f680:	strdeq	r5, [r6], -r0
   1f684:	andeq	lr, r9, ip, asr sp
   1f688:	andeq	r5, r6, r8, lsr sp
   1f68c:	andeq	r5, r6, r8, asr sp
   1f690:	andeq	r5, r6, r0, ror sp
   1f694:	andeq	r5, r6, r0, asr #27
   1f698:	andeq	r6, r6, r0, ror #1
   1f69c:	andeq	r5, r6, ip, lsl #26
   1f6a0:	andeq	r5, r6, r4, lsr #27
   1f6a4:	andeq	fp, r6, r8, ror #11
   1f6a8:	andeq	r5, r6, r4, lsl #27
   1f6ac:	andeq	r5, r6, r0, lsr #24
   1f6b0:			; <UNDEFINED> instruction: 0x00065eb4
   1f6b4:	ldrdeq	r5, [r6], -r8
   1f6b8:	andeq	r5, r6, r4, ror #29
   1f6bc:	andeq	r5, r6, r8, lsl #30
   1f6c0:	andeq	r5, r6, r4, lsr #30
   1f6c4:	andeq	r6, r6, r8, lsl #2
   1f6c8:	muleq	r6, r0, lr
   1f6cc:	strdeq	r5, [r6], -r0
   1f6d0:	andeq	r5, r6, ip, asr #29
   1f6d4:	andeq	r5, r6, r0, asr #30
   1f6d8:	andeq	r5, r6, r0, ror #30
   1f6dc:	andeq	r5, r6, r8, ror #27
   1f6e0:	andeq	r6, r6, r0, lsr #32
   1f6e4:	andeq	r6, r6, ip, lsr #32
   1f6e8:	andeq	r6, r6, ip, asr r0
   1f6ec:	strheq	r6, [r6], -r0
   1f6f0:	andeq	r0, r8, r0, asr #2
   1f6f4:	ldrdeq	r6, [r6], -r4
   1f6f8:	andeq	r6, r6, r4, lsr r0
   1f6fc:	andeq	r6, r6, r8, asr #32
   1f700:	andeq	r6, r6, r4, rrx
   1f704:	ldrdeq	r6, [r6], -ip
   1f708:	andeq	r6, r6, r8, lsl #1
   1f70c:	muleq	r6, r8, r0
   1f710:	andeq	r8, r0, r1
   1f714:	andeq	sl, r9, r8, asr #19
   1f718:	strheq	r6, [r6], -ip
   1f71c:	andeq	r6, r6, ip, asr #1
   1f720:	mov	r0, #16
   1f724:	mov	r1, #0
   1f728:	strd	r0, [sp]
   1f72c:	ldr	r0, [sp, #68]	; 0x44
   1f730:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   1f734:	add	r3, sp, #116	; 0x74
   1f738:	str	r3, [sp, #76]	; 0x4c
   1f73c:	str	r8, [sp, #92]	; 0x5c
   1f740:	str	r0, [sp, #32]
   1f744:	mov	r2, #5
   1f748:	ldr	r1, [pc, #-72]	; 1f708 <__assert_fail@plt+0xe4fc>
   1f74c:	mov	r0, #0
   1f750:	bl	10f90 <dcgettext@plt>
   1f754:	mov	r2, #1
   1f758:	mov	r3, #0
   1f75c:	ldr	r8, [sp, #32]
   1f760:	mov	r7, #16
   1f764:	mov	r5, #0
   1f768:	strd	r2, [sp, #8]
   1f76c:	str	r7, [sp]
   1f770:	str	r5, [sp, #4]
   1f774:	mov	r3, r8
   1f778:	ldr	r2, [sp, #28]
   1f77c:	ldr	r1, [sp, #24]
   1f780:	str	r0, [sp, #16]
   1f784:	ldr	r0, [sp, #76]	; 0x4c
   1f788:	bl	1717c <__assert_fail@plt+0x5f70>
   1f78c:	cmp	r0, #0
   1f790:	beq	1f904 <__assert_fail@plt+0xe6f8>
   1f794:	ldr	r3, [sl]
   1f798:	mov	r1, #4
   1f79c:	add	r0, sp, #124	; 0x7c
   1f7a0:	blx	r3
   1f7a4:	ldr	r3, [sl]
   1f7a8:	mov	r1, #4
   1f7ac:	add	r9, sp, #132	; 0x84
   1f7b0:	mov	r4, r0
   1f7b4:	add	r0, sp, #128	; 0x80
   1f7b8:	blx	r3
   1f7bc:	add	r4, r8, r4
   1f7c0:	str	r0, [sp, #40]	; 0x28
   1f7c4:	mov	r2, #5
   1f7c8:	ldr	r1, [pc, #-196]	; 1f70c <__assert_fail@plt+0xe500>
   1f7cc:	mov	r0, #0
   1f7d0:	bl	10f90 <dcgettext@plt>
   1f7d4:	mov	r2, #1
   1f7d8:	mov	r3, #0
   1f7dc:	ldr	r1, [sp, #24]
   1f7e0:	strd	r2, [sp, #8]
   1f7e4:	str	r7, [sp]
   1f7e8:	str	r5, [sp, #4]
   1f7ec:	mov	r3, r4
   1f7f0:	ldr	r2, [sp, #28]
   1f7f4:	str	r0, [sp, #16]
   1f7f8:	mov	r0, r9
   1f7fc:	bl	1717c <__assert_fail@plt+0x5f70>
   1f800:	mov	r1, #4
   1f804:	cmp	r0, #0
   1f808:	add	r0, sp, #144	; 0x90
   1f80c:	beq	1f884 <__assert_fail@plt+0xe678>
   1f810:	ldr	r3, [sl]
   1f814:	blx	r3
   1f818:	ldr	r3, [sl]
   1f81c:	mov	r1, #2
   1f820:	mov	r8, r0
   1f824:	add	r0, sp, #138	; 0x8a
   1f828:	blx	r3
   1f82c:	ldrh	r3, [r6]
   1f830:	add	r4, r4, r8
   1f834:	uxth	r0, r0
   1f838:	cmp	r3, r0
   1f83c:	beq	1f890 <__assert_fail@plt+0xe684>
   1f840:	cmp	r8, #0
   1f844:	bne	1f7c4 <__assert_fail@plt+0xe5b8>
   1f848:	ldr	r2, [sp, #40]	; 0x28
   1f84c:	ldr	r1, [sp, #32]
   1f850:	cmp	r2, #0
   1f854:	add	r2, r1, r2
   1f858:	str	r2, [sp, #32]
   1f85c:	bne	1f744 <__assert_fail@plt+0xe538>
   1f860:	ldr	r2, [pc, #-344]	; 1f710 <__assert_fail@plt+0xe504>
   1f864:	ldr	r8, [sp, #92]	; 0x5c
   1f868:	cmp	r3, r2
   1f86c:	beq	1f564 <__assert_fail@plt+0xe358>
   1f870:	ldr	r3, [pc, #-356]	; 1f714 <__assert_fail@plt+0xe508>
   1f874:	ldrd	r2, [r3, #24]
   1f878:	orrs	r1, r2, r3
   1f87c:	beq	1f564 <__assert_fail@plt+0xe358>
   1f880:	b	1f478 <__assert_fail@plt+0xe26c>
   1f884:	ldrh	r3, [r6]
   1f888:	cmp	r3, #0
   1f88c:	bne	1f848 <__assert_fail@plt+0xe63c>
   1f890:	ldr	r3, [sl]
   1f894:	mov	r1, #4
   1f898:	add	r0, sp, #140	; 0x8c
   1f89c:	ldr	r8, [sp, #92]	; 0x5c
   1f8a0:	blx	r3
   1f8a4:	ldr	r3, [sp, #104]	; 0x68
   1f8a8:	mov	r1, #0
   1f8ac:	str	r1, [sp, #84]	; 0x54
   1f8b0:	ldrd	r2, [r3, #32]
   1f8b4:	str	r0, [sp, #80]	; 0x50
   1f8b8:	ldrd	r4, [sp, #80]	; 0x50
   1f8bc:	cmp	r3, r5
   1f8c0:	cmpeq	r2, r4
   1f8c4:	bls	1f8f8 <__assert_fail@plt+0xe6ec>
   1f8c8:	ldr	r3, [sp, #88]	; 0x58
   1f8cc:	add	r3, r3, r0
   1f8d0:	str	r3, [sp, #40]	; 0x28
   1f8d4:	ldrh	r2, [r6]
   1f8d8:	ldr	r3, [pc, #-464]	; 1f710 <__assert_fail@plt+0xe504>
   1f8dc:	cmp	r2, r3
   1f8e0:	beq	1f530 <__assert_fail@plt+0xe324>
   1f8e4:	ldr	r3, [pc, #-472]	; 1f714 <__assert_fail@plt+0xe508>
   1f8e8:	ldrd	r2, [r3, #24]
   1f8ec:	orrs	r1, r2, r3
   1f8f0:	beq	1f530 <__assert_fail@plt+0xe324>
   1f8f4:	b	1f478 <__assert_fail@plt+0xe26c>
   1f8f8:	ldr	r3, [sp, #72]	; 0x48
   1f8fc:	str	r3, [sp, #40]	; 0x28
   1f900:	b	1f8d4 <__assert_fail@plt+0xe6c8>
   1f904:	ldrh	r2, [r6]
   1f908:	ldr	r3, [pc, #-512]	; 1f710 <__assert_fail@plt+0xe504>
   1f90c:	str	r0, [sp, #40]	; 0x28
   1f910:	cmp	r2, r3
   1f914:	ldr	r8, [sp, #92]	; 0x5c
   1f918:	beq	1f564 <__assert_fail@plt+0xe358>
   1f91c:	ldr	r3, [pc, #-528]	; 1f714 <__assert_fail@plt+0xe508>
   1f920:	ldrd	r2, [r3, #24]
   1f924:	orrs	r1, r2, r3
   1f928:	beq	1f564 <__assert_fail@plt+0xe358>
   1f92c:	b	1f474 <__assert_fail@plt+0xe268>
   1f930:	mov	r2, #0
   1f934:	str	r2, [sp, #52]	; 0x34
   1f938:	b	1f27c <__assert_fail@plt+0xe070>
   1f93c:	mov	r2, #0
   1f940:	str	r2, [sp, #48]	; 0x30
   1f944:	b	1eedc <__assert_fail@plt+0xdcd0>
   1f948:	ldr	r3, [sl]
   1f94c:	mov	r1, #4
   1f950:	add	r0, sp, #144	; 0x90
   1f954:	blx	r3
   1f958:	mov	r2, #5
   1f95c:	ldr	r1, [pc, #-588]	; 1f718 <__assert_fail@plt+0xe50c>
   1f960:	mov	r4, #1
   1f964:	mov	r5, r0
   1f968:	mov	r0, #0
   1f96c:	bl	10f90 <dcgettext@plt>
   1f970:	add	r3, r7, r5
   1f974:	mov	r5, #0
   1f978:	add	ip, sp, #116	; 0x74
   1f97c:	strd	r4, [sp, #8]
   1f980:	mov	r4, #8
   1f984:	mov	r5, #0
   1f988:	ldr	r2, [sp, #28]
   1f98c:	strd	r4, [sp]
   1f990:	ldr	r1, [sp, #24]
   1f994:	mov	r4, ip
   1f998:	str	r0, [sp, #16]
   1f99c:	mov	r0, ip
   1f9a0:	bl	1717c <__assert_fail@plt+0x5f70>
   1f9a4:	cmp	r0, #0
   1f9a8:	beq	1f570 <__assert_fail@plt+0xe364>
   1f9ac:	mov	r0, r4
   1f9b0:	ldr	r3, [sl]
   1f9b4:	mov	r1, #4
   1f9b8:	blx	r3
   1f9bc:	ldr	r3, [sp, #104]	; 0x68
   1f9c0:	ldrd	r2, [r3, #32]
   1f9c4:	str	r0, [sp, #96]	; 0x60
   1f9c8:	mov	r1, r0
   1f9cc:	mov	r0, #0
   1f9d0:	str	r0, [sp, #100]	; 0x64
   1f9d4:	ldrd	r4, [sp, #96]	; 0x60
   1f9d8:	cmp	r3, r5
   1f9dc:	ldr	r3, [sp, #72]	; 0x48
   1f9e0:	cmpeq	r2, r4
   1f9e4:	strls	r3, [sp, #40]	; 0x28
   1f9e8:	bls	1f530 <__assert_fail@plt+0xe324>
   1f9ec:	ldr	r2, [sp, #40]	; 0x28
   1f9f0:	cmp	r2, r0
   1f9f4:	cmpne	r3, r2
   1f9f8:	ldreq	r3, [sp, #88]	; 0x58
   1f9fc:	addeq	r3, r3, r1
   1fa00:	streq	r3, [sp, #40]	; 0x28
   1fa04:	beq	1f530 <__assert_fail@plt+0xe324>
   1fa08:	mov	r2, #5
   1fa0c:	ldr	r1, [pc, #-760]	; 1f71c <__assert_fail@plt+0xe510>
   1fa10:	bl	10f90 <dcgettext@plt>
   1fa14:	str	r0, [sp, #40]	; 0x28
   1fa18:	b	1f530 <__assert_fail@plt+0xe324>
   1fa1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa20:	mov	r8, r0
   1fa24:	ldr	r4, [r0, #76]	; 0x4c
   1fa28:	sub	sp, sp, #204	; 0xcc
   1fa2c:	cmp	r4, #0
   1fa30:	bne	1fa5c <__assert_fail@plt+0xe850>
   1fa34:	ldrd	r2, [r0, #40]	; 0x28
   1fa38:	orrs	r3, r2, r3
   1fa3c:	bne	200c4 <__assert_fail@plt+0xeeb8>
   1fa40:	ldr	r3, [pc, #4076]	; 20a34 <__assert_fail@plt+0xf828>
   1fa44:	ldr	r3, [r3, #1588]	; 0x634
   1fa48:	cmp	r3, #0
   1fa4c:	bne	207ac <__assert_fail@plt+0xf5a0>
   1fa50:	mov	r0, #1
   1fa54:	add	sp, sp, #204	; 0xcc
   1fa58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa5c:	ldr	r6, [pc, #4048]	; 20a34 <__assert_fail@plt+0xf828>
   1fa60:	ldr	r3, [r6, #1588]	; 0x634
   1fa64:	cmp	r3, #0
   1fa68:	beq	1fb34 <__assert_fail@plt+0xe928>
   1fa6c:	ldr	r4, [r6, #1592]	; 0x638
   1fa70:	cmp	r4, #0
   1fa74:	beq	1fb5c <__assert_fail@plt+0xe950>
   1fa78:	ldr	r3, [r0, #100]	; 0x64
   1fa7c:	cmp	r3, #0
   1fa80:	beq	1fbfc <__assert_fail@plt+0xe9f0>
   1fa84:	mov	r2, #5
   1fa88:	ldr	r1, [pc, #4008]	; 20a38 <__assert_fail@plt+0xf82c>
   1fa8c:	mov	r0, #0
   1fa90:	bl	10f90 <dcgettext@plt>
   1fa94:	bl	10f24 <printf@plt>
   1fa98:	ldr	r0, [r6]
   1fa9c:	cmp	r0, #0
   1faa0:	bne	20818 <__assert_fail@plt+0xf60c>
   1faa4:	ldr	r3, [pc, #3984]	; 20a3c <__assert_fail@plt+0xf830>
   1faa8:	mov	r2, #5
   1faac:	ldr	r4, [r3]
   1fab0:	cmp	r4, #0
   1fab4:	beq	207f8 <__assert_fail@plt+0xf5ec>
   1fab8:	ldr	r1, [pc, #3968]	; 20a40 <__assert_fail@plt+0xf834>
   1fabc:	bl	10f90 <dcgettext@plt>
   1fac0:	bl	10f24 <printf@plt>
   1fac4:	ldr	r2, [r8, #76]	; 0x4c
   1fac8:	ldr	ip, [pc, #3956]	; 20a44 <__assert_fail@plt+0xf838>
   1facc:	mov	r0, #0
   1fad0:	mov	r1, #0
   1fad4:	cmp	r2, #0
   1fad8:	mov	r2, #0
   1fadc:	ldr	r4, [r8, #100]	; 0x64
   1fae0:	ldr	r3, [r6, #1588]	; 0x634
   1fae4:	strd	r0, [ip, #-8]
   1fae8:	str	r2, [r6, #692]	; 0x2b4
   1faec:	beq	1fc74 <__assert_fail@plt+0xea68>
   1faf0:	mov	r9, #0
   1faf4:	mov	r5, r9
   1faf8:	strd	sl, [sp, #88]	; 0x58
   1fafc:	str	ip, [sp, #120]	; 0x78
   1fb00:	cmp	r3, #0
   1fb04:	ldr	r7, [r4]
   1fb08:	bne	200e4 <__assert_fail@plt+0xeed8>
   1fb0c:	sub	r7, r7, #1
   1fb10:	cmp	r7, #5
   1fb14:	ldrls	pc, [pc, r7, lsl #2]
   1fb18:	b	1ff50 <__assert_fail@plt+0xed44>
   1fb1c:	andeq	r0, r2, r0, lsr #1
   1fb20:	andeq	pc, r1, r8, asr pc	; <UNPREDICTABLE>
   1fb24:	andeq	pc, r1, ip, lsl pc	; <UNPREDICTABLE>
   1fb28:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fb2c:	andeq	pc, r1, r0, asr pc	; <UNPREDICTABLE>
   1fb30:	andeq	pc, r1, r4, asr #24
   1fb34:	ldr	r4, [r0, #100]	; 0x64
   1fb38:	cmp	r4, #0
   1fb3c:	beq	1fbfc <__assert_fail@plt+0xe9f0>
   1fb40:	add	r2, r6, #1120	; 0x460
   1fb44:	mov	r0, #0
   1fb48:	mov	r1, #0
   1fb4c:	mov	ip, r2
   1fb50:	str	r3, [r6, #692]	; 0x2b4
   1fb54:	strd	r0, [r2, #-8]
   1fb58:	b	1faf0 <__assert_fail@plt+0xe8e4>
   1fb5c:	mov	r2, #5
   1fb60:	ldr	r1, [pc, #3808]	; 20a48 <__assert_fail@plt+0xf83c>
   1fb64:	mov	r0, r4
   1fb68:	bl	10f90 <dcgettext@plt>
   1fb6c:	mov	r5, r0
   1fb70:	ldrh	r0, [r8, #64]	; 0x40
   1fb74:	bl	12d94 <__assert_fail@plt+0x1b88>
   1fb78:	mov	r1, r0
   1fb7c:	mov	r0, r5
   1fb80:	bl	10f24 <printf@plt>
   1fb84:	ldr	r1, [pc, #3776]	; 20a4c <__assert_fail@plt+0xf840>
   1fb88:	mov	r2, #5
   1fb8c:	mov	r0, r4
   1fb90:	bl	10f90 <dcgettext@plt>
   1fb94:	ldrd	r2, [r8, #32]
   1fb98:	mov	r5, r0
   1fb9c:	ldr	r0, [pc, #3756]	; 20a50 <__assert_fail@plt+0xf844>
   1fba0:	bl	12d28 <__assert_fail@plt+0x1b1c>
   1fba4:	mov	r1, r0
   1fba8:	mov	r0, r5
   1fbac:	bl	10f24 <printf@plt>
   1fbb0:	mov	r3, #5
   1fbb4:	ldr	r1, [pc, #3736]	; 20a54 <__assert_fail@plt+0xf848>
   1fbb8:	mov	r0, r4
   1fbbc:	str	r3, [sp]
   1fbc0:	ldr	r2, [pc, #3728]	; 20a58 <__assert_fail@plt+0xf84c>
   1fbc4:	ldr	r3, [r8, #76]	; 0x4c
   1fbc8:	bl	11200 <dcngettext@plt>
   1fbcc:	ldrd	r2, [r8, #40]	; 0x28
   1fbd0:	ldr	r5, [r8, #76]	; 0x4c
   1fbd4:	mov	r4, r0
   1fbd8:	ldr	r0, [pc, #3708]	; 20a5c <__assert_fail@plt+0xf850>
   1fbdc:	bl	12d28 <__assert_fail@plt+0x1b1c>
   1fbe0:	mov	r1, r5
   1fbe4:	mov	r2, r0
   1fbe8:	mov	r0, r4
   1fbec:	bl	10f24 <printf@plt>
   1fbf0:	ldr	r3, [r8, #100]	; 0x64
   1fbf4:	cmp	r3, #0
   1fbf8:	bne	1fc0c <__assert_fail@plt+0xea00>
   1fbfc:	mov	r0, r8
   1fc00:	bl	1c34c <__assert_fail@plt+0xb140>
   1fc04:	cmp	r0, #0
   1fc08:	beq	1fa50 <__assert_fail@plt+0xe844>
   1fc0c:	ldr	r3, [r6, #1588]	; 0x634
   1fc10:	ldr	r2, [r8, #76]	; 0x4c
   1fc14:	cmp	r3, #0
   1fc18:	bne	1fa84 <__assert_fail@plt+0xe878>
   1fc1c:	ldr	r1, [pc, #3616]	; 20a44 <__assert_fail@plt+0xf838>
   1fc20:	mov	r0, #0
   1fc24:	mov	ip, r1
   1fc28:	mov	r1, #0
   1fc2c:	cmp	r2, #0
   1fc30:	str	r3, [r6, #692]	; 0x2b4
   1fc34:	strd	r0, [ip, #-8]
   1fc38:	ldr	r4, [r8, #100]	; 0x64
   1fc3c:	bne	1faf0 <__assert_fail@plt+0xe8e4>
   1fc40:	b	1fa50 <__assert_fail@plt+0xe844>
   1fc44:	cmp	r5, #0
   1fc48:	cmpne	r9, #0
   1fc4c:	bne	206e0 <__assert_fail@plt+0xf4d4>
   1fc50:	ldrh	r3, [r8, #66]	; 0x42
   1fc54:	ldr	lr, [r8, #76]	; 0x4c
   1fc58:	cmp	r3, #15
   1fc5c:	bne	2054c <__assert_fail@plt+0xf340>
   1fc60:	ldr	r3, [r6, #1588]	; 0x634
   1fc64:	add	r5, r5, #1
   1fc68:	cmp	r5, lr
   1fc6c:	add	r4, r4, #56	; 0x38
   1fc70:	bcc	1fb00 <__assert_fail@plt+0xe8f4>
   1fc74:	cmp	r3, #0
   1fc78:	beq	1fa50 <__assert_fail@plt+0xe844>
   1fc7c:	ldr	r3, [r8, #96]	; 0x60
   1fc80:	cmp	r3, #0
   1fc84:	beq	1fa50 <__assert_fail@plt+0xe844>
   1fc88:	ldr	r3, [r8, #104]	; 0x68
   1fc8c:	cmp	r3, #0
   1fc90:	beq	1fa50 <__assert_fail@plt+0xe844>
   1fc94:	mov	r2, #5
   1fc98:	ldr	r1, [pc, #3520]	; 20a60 <__assert_fail@plt+0xf854>
   1fc9c:	mov	r0, #0
   1fca0:	bl	10f90 <dcgettext@plt>
   1fca4:	bl	10f24 <printf@plt>
   1fca8:	mov	r2, #5
   1fcac:	ldr	r1, [pc, #3504]	; 20a64 <__assert_fail@plt+0xf858>
   1fcb0:	mov	r0, #0
   1fcb4:	bl	10f90 <dcgettext@plt>
   1fcb8:	bl	10f24 <printf@plt>
   1fcbc:	ldr	r3, [r8, #76]	; 0x4c
   1fcc0:	cmp	r3, #0
   1fcc4:	beq	1fa50 <__assert_fail@plt+0xe844>
   1fcc8:	mov	r3, #0
   1fccc:	ldr	r2, [pc, #3476]	; 20a68 <__assert_fail@plt+0xf85c>
   1fcd0:	mov	r7, r3
   1fcd4:	str	r3, [sp, #24]
   1fcd8:	str	r2, [sp, #120]	; 0x78
   1fcdc:	str	r3, [sp, #32]
   1fce0:	str	r8, [sp, #16]
   1fce4:	ldr	r5, [sp, #16]
   1fce8:	ldr	r2, [sp, #24]
   1fcec:	ldr	r1, [sp, #32]
   1fcf0:	ldr	r3, [r5, #100]	; 0x64
   1fcf4:	ldr	r0, [pc, #3440]	; 20a6c <__assert_fail@plt+0xf860>
   1fcf8:	ldr	r6, [r5, #96]	; 0x60
   1fcfc:	add	r4, r3, r2
   1fd00:	bl	10f24 <printf@plt>
   1fd04:	ldr	ip, [r5, #84]	; 0x54
   1fd08:	add	r6, r6, #72	; 0x48
   1fd0c:	cmp	ip, #1
   1fd10:	movhi	r5, #1
   1fd14:	strhi	ip, [sp, #8]
   1fd18:	bhi	1fd40 <__assert_fail@plt+0xeb34>
   1fd1c:	b	20428 <__assert_fail@plt+0xf21c>
   1fd20:	sub	r2, ip, #6
   1fd24:	cmp	r2, #1
   1fd28:	bhi	20408 <__assert_fail@plt+0xf1fc>
   1fd2c:	ldr	r3, [sp, #8]
   1fd30:	add	r5, r5, #1
   1fd34:	cmp	r3, r5
   1fd38:	add	r6, r6, #72	; 0x48
   1fd3c:	bls	20428 <__assert_fail@plt+0xf21c>
   1fd40:	ldr	r3, [r6, #8]
   1fd44:	mov	fp, r7
   1fd48:	and	sl, r3, #1024	; 0x400
   1fd4c:	orrs	r2, sl, fp
   1fd50:	ldr	ip, [r4]
   1fd54:	beq	1fd20 <__assert_fail@plt+0xeb14>
   1fd58:	ldr	lr, [r6, #4]
   1fd5c:	cmp	lr, #8
   1fd60:	beq	2033c <__assert_fail@plt+0xf130>
   1fd64:	ldr	r2, [pc, #3332]	; 20a70 <__assert_fail@plt+0xf864>
   1fd68:	cmp	ip, r2
   1fd6c:	cmpne	ip, #7
   1fd70:	moveq	r2, #1
   1fd74:	movne	r2, #0
   1fd78:	cmp	ip, #1
   1fd7c:	orreq	r2, r2, #1
   1fd80:	cmp	r2, #0
   1fd84:	beq	1fd2c <__assert_fail@plt+0xeb20>
   1fd88:	and	r8, r3, #2
   1fd8c:	mov	r9, r7
   1fd90:	orrs	r3, r8, r9
   1fd94:	beq	2030c <__assert_fail@plt+0xf100>
   1fd98:	ldrd	r2, [r6, #24]
   1fd9c:	mov	r0, r2
   1fda0:	mov	r1, r3
   1fda4:	ldrd	r2, [r4, #8]
   1fda8:	strd	r0, [sp, #40]	; 0x28
   1fdac:	cmp	r1, r3
   1fdb0:	cmpeq	r0, r2
   1fdb4:	bcc	1fd2c <__assert_fail@plt+0xeb20>
   1fdb8:	ldrd	r0, [r4, #32]
   1fdbc:	strd	r0, [sp, #56]	; 0x38
   1fdc0:	ldr	r1, [sp, #40]	; 0x28
   1fdc4:	subs	r1, r1, r2
   1fdc8:	str	r1, [sp, #48]	; 0x30
   1fdcc:	ldr	r1, [sp, #44]	; 0x2c
   1fdd0:	sbc	r3, r1, r3
   1fdd4:	ldrd	r0, [sp, #56]	; 0x38
   1fdd8:	str	r3, [sp, #52]	; 0x34
   1fddc:	subs	r3, r0, #1
   1fde0:	str	r3, [sp, #72]	; 0x48
   1fde4:	sbc	r3, r1, #0
   1fde8:	str	r3, [sp, #76]	; 0x4c
   1fdec:	ldrd	r0, [sp, #72]	; 0x48
   1fdf0:	ldrd	r2, [sp, #48]	; 0x30
   1fdf4:	cmp	r3, r1
   1fdf8:	cmpeq	r2, r0
   1fdfc:	bhi	1fd2c <__assert_fail@plt+0xeb20>
   1fe00:	ldr	r1, [sp, #48]	; 0x30
   1fe04:	ldr	r3, [r6, #32]
   1fe08:	ldr	r2, [r6, #36]	; 0x24
   1fe0c:	adds	r3, r1, r3
   1fe10:	str	r3, [sp, #104]	; 0x68
   1fe14:	ldr	r3, [sp, #52]	; 0x34
   1fe18:	ldrd	r0, [sp, #56]	; 0x38
   1fe1c:	adc	r3, r3, r2
   1fe20:	str	r3, [sp, #108]	; 0x6c
   1fe24:	ldrd	r2, [sp, #104]	; 0x68
   1fe28:	cmp	r1, r3
   1fe2c:	cmpeq	r0, r2
   1fe30:	bcc	1fd2c <__assert_fail@plt+0xeb20>
   1fe34:	orrs	r3, r8, r9
   1fe38:	bne	20354 <__assert_fail@plt+0xf148>
   1fe3c:	cmp	ip, #2
   1fe40:	bne	1feec <__assert_fail@plt+0xece0>
   1fe44:	ldrd	r2, [r6, #32]
   1fe48:	orrs	r3, r2, r3
   1fe4c:	bne	1feec <__assert_fail@plt+0xece0>
   1fe50:	ldrd	r2, [r4, #40]	; 0x28
   1fe54:	strd	r2, [sp, #40]	; 0x28
   1fe58:	orrs	r3, r2, r3
   1fe5c:	beq	1feec <__assert_fail@plt+0xece0>
   1fe60:	cmp	lr, #8
   1fe64:	beq	1feac <__assert_fail@plt+0xeca0>
   1fe68:	ldrd	r2, [r4, #8]
   1fe6c:	ldrd	r0, [r6, #24]
   1fe70:	strd	r2, [sp, #56]	; 0x38
   1fe74:	cmp	r1, r3
   1fe78:	cmpeq	r0, r2
   1fe7c:	bls	1fd2c <__assert_fail@plt+0xeb20>
   1fe80:	ldr	ip, [sp, #56]	; 0x38
   1fe84:	ldr	r2, [sp, #60]	; 0x3c
   1fe88:	subs	r3, r0, ip
   1fe8c:	str	r3, [sp, #152]	; 0x98
   1fe90:	sbc	r3, r1, r2
   1fe94:	str	r3, [sp, #156]	; 0x9c
   1fe98:	ldrd	r2, [sp, #152]	; 0x98
   1fe9c:	ldrd	r0, [r4, #32]
   1fea0:	cmp	r3, r1
   1fea4:	cmpeq	r2, r0
   1fea8:	bcs	1fd2c <__assert_fail@plt+0xeb20>
   1feac:	orrs	r3, r8, r9
   1feb0:	beq	1feec <__assert_fail@plt+0xece0>
   1feb4:	ldrd	r2, [r6, #16]
   1feb8:	ldrd	r0, [r4, #16]
   1febc:	cmp	r3, r1
   1fec0:	cmpeq	r2, r0
   1fec4:	bls	1fd2c <__assert_fail@plt+0xeb20>
   1fec8:	subs	ip, r2, r0
   1fecc:	sbc	r3, r3, r1
   1fed0:	str	ip, [sp, #160]	; 0xa0
   1fed4:	str	r3, [sp, #164]	; 0xa4
   1fed8:	ldrd	r2, [sp, #160]	; 0xa0
   1fedc:	ldrd	r0, [sp, #40]	; 0x28
   1fee0:	cmp	r1, r3
   1fee4:	cmpeq	r0, r2
   1fee8:	bls	1fd2c <__assert_fail@plt+0xeb20>
   1feec:	ldr	r3, [sp, #16]
   1fef0:	mov	r2, r6
   1fef4:	add	r1, r3, #108	; 0x6c
   1fef8:	add	r0, r3, #104	; 0x68
   1fefc:	bl	16c64 <__assert_fail@plt+0x5a58>
   1ff00:	mov	r1, r0
   1ff04:	ldr	r0, [pc, #2920]	; 20a74 <__assert_fail@plt+0xf868>
   1ff08:	bl	10f24 <printf@plt>
   1ff0c:	ldr	r3, [sp, #16]
   1ff10:	ldr	r3, [r3, #84]	; 0x54
   1ff14:	str	r3, [sp, #8]
   1ff18:	b	1fd2c <__assert_fail@plt+0xeb20>
   1ff1c:	ldr	r1, [r4, #8]
   1ff20:	ldr	r3, [r6, #656]	; 0x290
   1ff24:	mov	r2, #0
   1ff28:	add	r1, r1, r3
   1ff2c:	ldr	r0, [r8, #4]
   1ff30:	bl	111a0 <fseek@plt>
   1ff34:	subs	r7, r0, #0
   1ff38:	beq	20504 <__assert_fail@plt+0xf2f8>
   1ff3c:	mov	r2, #5
   1ff40:	ldr	r1, [pc, #2864]	; 20a78 <__assert_fail@plt+0xf86c>
   1ff44:	mov	r0, #0
   1ff48:	bl	10f90 <dcgettext@plt>
   1ff4c:	bl	548ac <error@@Base>
   1ff50:	ldr	lr, [r8, #76]	; 0x4c
   1ff54:	b	1fc60 <__assert_fail@plt+0xea54>
   1ff58:	ldr	r3, [r6, #692]	; 0x2b4
   1ff5c:	cmp	r3, #0
   1ff60:	bne	206f8 <__assert_fail@plt+0xf4ec>
   1ff64:	ldr	r3, [r8, #96]	; 0x60
   1ff68:	ldr	r2, [r4, #8]
   1ff6c:	ldrd	r0, [r4, #32]
   1ff70:	ldr	ip, [sp, #120]	; 0x78
   1ff74:	cmp	r3, #0
   1ff78:	str	r2, [r6, #692]	; 0x2b4
   1ff7c:	strd	r0, [ip, #-8]
   1ff80:	strdeq	r2, [sp, #64]	; 0x40
   1ff84:	beq	20040 <__assert_fail@plt+0xee34>
   1ff88:	ldr	r1, [pc, #2796]	; 20a7c <__assert_fail@plt+0xf870>
   1ff8c:	mov	r0, r8
   1ff90:	bl	1bd7c <__assert_fail@plt+0xab70>
   1ff94:	subs	r3, r0, #0
   1ff98:	beq	206a8 <__assert_fail@plt+0xf49c>
   1ff9c:	ldrd	r0, [r3, #32]
   1ffa0:	orrs	r2, r0, r1
   1ffa4:	beq	206a8 <__assert_fail@plt+0xf49c>
   1ffa8:	ldr	r2, [r3, #4]
   1ffac:	cmp	r2, #8
   1ffb0:	beq	2088c <__assert_fail@plt+0xf680>
   1ffb4:	ldr	lr, [r3, #24]
   1ffb8:	mov	ip, #0
   1ffbc:	str	lr, [sp, #64]	; 0x40
   1ffc0:	str	ip, [sp, #68]	; 0x44
   1ffc4:	ldrd	r2, [r4, #8]
   1ffc8:	ldrd	sl, [sp, #64]	; 0x40
   1ffcc:	str	lr, [r6, #692]	; 0x2b4
   1ffd0:	ldr	lr, [sp, #120]	; 0x78
   1ffd4:	cmp	fp, r3
   1ffd8:	cmpeq	sl, r2
   1ffdc:	strd	r0, [lr, #-8]
   1ffe0:	bcc	20014 <__assert_fail@plt+0xee08>
   1ffe4:	ldr	lr, [r4, #32]
   1ffe8:	strd	r2, [sp, #112]	; 0x70
   1ffec:	adds	r3, r2, lr
   1fff0:	str	r3, [sp, #136]	; 0x88
   1fff4:	ldr	r7, [r4, #36]	; 0x24
   1fff8:	ldr	r3, [sp, #116]	; 0x74
   1fffc:	adc	r3, r3, r7
   20000:	str	r3, [sp, #140]	; 0x8c
   20004:	ldrd	r2, [sp, #136]	; 0x88
   20008:	cmp	fp, r3
   2000c:	cmpeq	sl, r2
   20010:	bls	20868 <__assert_fail@plt+0xf65c>
   20014:	ldr	r1, [pc, #2660]	; 20a80 <__assert_fail@plt+0xf874>
   20018:	mov	r2, #5
   2001c:	mov	r0, #0
   20020:	bl	10f90 <dcgettext@plt>
   20024:	bl	54dd0 <warn@@Base>
   20028:	ldr	r2, [sp, #120]	; 0x78
   2002c:	ldr	r3, [r6, #692]	; 0x2b4
   20030:	mov	fp, #0
   20034:	ldrd	r0, [r2, #-8]
   20038:	mov	sl, r3
   2003c:	strd	sl, [sp, #64]	; 0x40
   20040:	ldrd	sl, [sp, #64]	; 0x40
   20044:	adds	r3, r0, sl
   20048:	adc	r1, r1, fp
   2004c:	str	r3, [sp, #80]	; 0x50
   20050:	str	r1, [sp, #84]	; 0x54
   20054:	ldrd	r2, [r8, #8]
   20058:	ldrd	r0, [sp, #80]	; 0x50
   2005c:	cmp	r1, r3
   20060:	cmpeq	r0, r2
   20064:	bcc	1ff50 <__assert_fail@plt+0xed44>
   20068:	mov	r2, #5
   2006c:	ldr	r1, [pc, #2576]	; 20a84 <__assert_fail@plt+0xf878>
   20070:	mov	r0, #0
   20074:	bl	10f90 <dcgettext@plt>
   20078:	bl	548ac <error@@Base>
   2007c:	ldr	r2, [sp, #120]	; 0x78
   20080:	mov	r0, #0
   20084:	mov	r1, #0
   20088:	mov	r3, #0
   2008c:	str	r3, [r6, #692]	; 0x2b4
   20090:	strd	r0, [r2, #-8]
   20094:	ldr	lr, [r8, #76]	; 0x4c
   20098:	ldr	r3, [r6, #1588]	; 0x634
   2009c:	b	1fc64 <__assert_fail@plt+0xea58>
   200a0:	ldrd	r0, [r4, #40]	; 0x28
   200a4:	ldrd	r2, [r4, #32]
   200a8:	cmp	r1, r3
   200ac:	cmpeq	r0, r2
   200b0:	bcc	20710 <__assert_fail@plt+0xf504>
   200b4:	ldr	lr, [r8, #76]	; 0x4c
   200b8:	ldr	r3, [r6, #1588]	; 0x634
   200bc:	mov	r9, r4
   200c0:	b	1fc64 <__assert_fail@plt+0xea58>
   200c4:	mov	r2, #5
   200c8:	ldr	r1, [pc, #2488]	; 20a88 <__assert_fail@plt+0xf87c>
   200cc:	mov	r0, r4
   200d0:	bl	10f90 <dcgettext@plt>
   200d4:	bl	54dd0 <warn@@Base>
   200d8:	mov	r0, r4
   200dc:	add	sp, sp, #204	; 0xcc
   200e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200e4:	cmp	r7, #5
   200e8:	beq	207c4 <__assert_fail@plt+0xf5b8>
   200ec:	bhi	20260 <__assert_fail@plt+0xf054>
   200f0:	cmp	r7, #2
   200f4:	beq	2072c <__assert_fail@plt+0xf520>
   200f8:	bhi	202f4 <__assert_fail@plt+0xf0e8>
   200fc:	cmp	r7, #0
   20100:	beq	20474 <__assert_fail@plt+0xf268>
   20104:	cmp	r7, #1
   20108:	ldreq	r1, [pc, #2428]	; 20a8c <__assert_fail@plt+0xf880>
   2010c:	bne	20284 <__assert_fail@plt+0xf078>
   20110:	ldr	r0, [pc, #2424]	; 20a90 <__assert_fail@plt+0xf884>
   20114:	bl	10f24 <printf@plt>
   20118:	ldr	r3, [r6]
   2011c:	cmp	r3, #0
   20120:	bne	20484 <__assert_fail@plt+0xf278>
   20124:	ldr	r2, [pc, #2320]	; 20a3c <__assert_fail@plt+0xf830>
   20128:	ldrd	r0, [r4, #8]
   2012c:	ldr	r2, [r2]
   20130:	cmp	r2, #0
   20134:	beq	20600 <__assert_fail@plt+0xf3f4>
   20138:	str	r0, [sp, #24]
   2013c:	str	r3, [sp, #28]
   20140:	ldrd	r2, [sp, #24]
   20144:	cmp	r3, r1
   20148:	cmpeq	r2, r0
   2014c:	beq	2076c <__assert_fail@plt+0xf560>
   20150:	ldr	r7, [pc, #2320]	; 20a68 <__assert_fail@plt+0xf85c>
   20154:	mov	r2, #5
   20158:	bl	14244 <__assert_fail@plt+0x3038>
   2015c:	ldr	r1, [r7]
   20160:	mov	r0, #32
   20164:	bl	11158 <putc@plt>
   20168:	mov	r2, #5
   2016c:	ldrd	r0, [r4, #16]
   20170:	bl	14244 <__assert_fail@plt+0x3038>
   20174:	ldr	r1, [r7]
   20178:	mov	r0, #32
   2017c:	bl	11158 <putc@plt>
   20180:	mov	r2, #5
   20184:	ldrd	r0, [r4, #24]
   20188:	bl	14244 <__assert_fail@plt+0x3038>
   2018c:	ldr	r1, [r7]
   20190:	mov	r0, #32
   20194:	bl	11158 <putc@plt>
   20198:	ldrd	r0, [r4, #32]
   2019c:	mov	r3, #0
   201a0:	str	r3, [sp, #36]	; 0x24
   201a4:	str	r0, [sp, #32]
   201a8:	ldrd	r2, [sp, #32]
   201ac:	cmp	r1, r3
   201b0:	cmpeq	r0, r2
   201b4:	beq	2075c <__assert_fail@plt+0xf550>
   201b8:	mov	r2, #5
   201bc:	bl	14244 <__assert_fail@plt+0x3038>
   201c0:	ldr	r1, [r7]
   201c4:	mov	r0, #32
   201c8:	bl	11158 <putc@plt>
   201cc:	ldrd	r0, [r4, #40]	; 0x28
   201d0:	mov	r3, #0
   201d4:	str	r3, [sp, #44]	; 0x2c
   201d8:	str	r0, [sp, #40]	; 0x28
   201dc:	ldrd	r2, [sp, #40]	; 0x28
   201e0:	cmp	r3, r1
   201e4:	cmpeq	r2, r0
   201e8:	beq	2074c <__assert_fail@plt+0xf540>
   201ec:	mov	r2, #5
   201f0:	bl	14244 <__assert_fail@plt+0x3038>
   201f4:	ldr	r3, [r4, #4]
   201f8:	ldr	r0, [pc, #2196]	; 20a94 <__assert_fail@plt+0xf888>
   201fc:	tst	r3, #4
   20200:	movne	r1, #82	; 0x52
   20204:	moveq	r1, #32
   20208:	tst	r3, #2
   2020c:	movne	r2, #87	; 0x57
   20210:	moveq	r2, #32
   20214:	tst	r3, #1
   20218:	movne	r3, #69	; 0x45
   2021c:	moveq	r3, #32
   20220:	bl	10f24 <printf@plt>
   20224:	ldrd	r0, [r4, #48]	; 0x30
   20228:	mov	r3, #0
   2022c:	str	r3, [sp, #60]	; 0x3c
   20230:	str	r0, [sp, #56]	; 0x38
   20234:	ldrd	r2, [sp, #56]	; 0x38
   20238:	cmp	r1, r3
   2023c:	cmpeq	r0, r2
   20240:	beq	2073c <__assert_fail@plt+0xf530>
   20244:	mov	r2, #4
   20248:	bl	14244 <__assert_fail@plt+0x3038>
   2024c:	ldr	r1, [r7]
   20250:	mov	r0, #10
   20254:	bl	11158 <putc@plt>
   20258:	ldr	r7, [r4]
   2025c:	b	1fb0c <__assert_fail@plt+0xe900>
   20260:	ldr	r3, [pc, #2312]	; 20b70 <__assert_fail@plt+0xf964>
   20264:	cmp	r7, r3
   20268:	beq	20734 <__assert_fail@plt+0xf528>
   2026c:	bhi	202d4 <__assert_fail@plt+0xf0c8>
   20270:	cmp	r7, #6
   20274:	beq	2046c <__assert_fail@plt+0xf260>
   20278:	cmp	r7, #7
   2027c:	ldreq	r1, [pc, #2068]	; 20a98 <__assert_fail@plt+0xf88c>
   20280:	beq	20110 <__assert_fail@plt+0xef04>
   20284:	ldr	r2, [pc, #2064]	; 20a9c <__assert_fail@plt+0xf890>
   20288:	add	r2, r7, r2
   2028c:	cmp	r2, #4096	; 0x1000
   20290:	bcc	20954 <__assert_fail@plt+0xf748>
   20294:	add	r2, r7, #-1879048192	; 0x90000000
   20298:	cmn	r2, #-268435455	; 0xf0000001
   2029c:	bhi	20828 <__assert_fail@plt+0xf61c>
   202a0:	ldrh	r3, [r8, #66]	; 0x42
   202a4:	cmp	r3, #40	; 0x28
   202a8:	beq	20ba8 <__assert_fail@plt+0xf99c>
   202ac:	bls	208e4 <__assert_fail@plt+0xf6d8>
   202b0:	cmp	r3, #140	; 0x8c
   202b4:	beq	20b98 <__assert_fail@plt+0xf98c>
   202b8:	bls	208c4 <__assert_fail@plt+0xf6b8>
   202bc:	cmp	r3, #183	; 0xb7
   202c0:	bne	208a8 <__assert_fail@plt+0xf69c>
   202c4:	cmp	r7, #1879048192	; 0x70000000
   202c8:	bne	20914 <__assert_fail@plt+0xf708>
   202cc:	ldr	r1, [pc, #1996]	; 20aa0 <__assert_fail@plt+0xf894>
   202d0:	b	20110 <__assert_fail@plt+0xef04>
   202d4:	ldr	r3, [pc, #1992]	; 20aa4 <__assert_fail@plt+0xf898>
   202d8:	cmp	r7, r3
   202dc:	beq	2047c <__assert_fail@plt+0xf270>
   202e0:	add	r3, r3, #1
   202e4:	cmp	r7, r3
   202e8:	ldreq	r1, [pc, #1976]	; 20aa8 <__assert_fail@plt+0xf89c>
   202ec:	beq	20110 <__assert_fail@plt+0xef04>
   202f0:	b	20284 <__assert_fail@plt+0xf078>
   202f4:	cmp	r7, #3
   202f8:	beq	20464 <__assert_fail@plt+0xf258>
   202fc:	cmp	r7, #4
   20300:	ldreq	r1, [pc, #1956]	; 20aac <__assert_fail@plt+0xf8a0>
   20304:	beq	20110 <__assert_fail@plt+0xef04>
   20308:	b	20284 <__assert_fail@plt+0xf078>
   2030c:	ldr	r2, [pc, #1948]	; 20ab0 <__assert_fail@plt+0xf8a4>
   20310:	sub	r3, ip, #1
   20314:	add	r2, ip, r2
   20318:	cmp	r3, #1
   2031c:	cmphi	r2, #2
   20320:	bls	1fd2c <__assert_fail@plt+0xeb20>
   20324:	ldr	lr, [r6, #4]
   20328:	cmp	lr, #8
   2032c:	movne	r8, #0
   20330:	movne	r9, #0
   20334:	beq	1feec <__assert_fail@plt+0xece0>
   20338:	b	1fd98 <__assert_fail@plt+0xeb8c>
   2033c:	cmp	ip, #7
   20340:	bne	1fd2c <__assert_fail@plt+0xeb20>
   20344:	and	r8, r3, #2
   20348:	mov	r9, r7
   2034c:	orrs	r3, r8, r9
   20350:	beq	2030c <__assert_fail@plt+0xf100>
   20354:	ldrd	r2, [r4, #16]
   20358:	ldrd	r0, [r6, #16]
   2035c:	strd	r2, [sp, #40]	; 0x28
   20360:	cmp	r1, r3
   20364:	cmpeq	r0, r2
   20368:	bcc	1fd2c <__assert_fail@plt+0xeb20>
   2036c:	ldrd	r2, [r4, #40]	; 0x28
   20370:	strd	r2, [sp, #56]	; 0x38
   20374:	ldr	r2, [sp, #40]	; 0x28
   20378:	subs	r3, r0, r2
   2037c:	ldr	r2, [sp, #44]	; 0x2c
   20380:	str	r3, [sp, #96]	; 0x60
   20384:	sbc	r3, r1, r2
   20388:	str	r3, [sp, #100]	; 0x64
   2038c:	ldrd	r2, [sp, #56]	; 0x38
   20390:	subs	r1, r2, #1
   20394:	sbc	r3, r3, #0
   20398:	str	r3, [sp, #132]	; 0x84
   2039c:	str	r1, [sp, #128]	; 0x80
   203a0:	ldrd	r2, [sp, #96]	; 0x60
   203a4:	ldrd	r0, [sp, #128]	; 0x80
   203a8:	cmp	r3, r1
   203ac:	cmpeq	r2, r0
   203b0:	bhi	1fd2c <__assert_fail@plt+0xeb20>
   203b4:	orrs	r3, sl, fp
   203b8:	moveq	r3, #1
   203bc:	movne	r3, #0
   203c0:	cmp	lr, #8
   203c4:	orrne	r3, r3, #1
   203c8:	cmp	r3, #0
   203cc:	beq	20968 <__assert_fail@plt+0xf75c>
   203d0:	ldr	r1, [sp, #96]	; 0x60
   203d4:	ldr	r3, [r6, #32]
   203d8:	ldr	r2, [r6, #36]	; 0x24
   203dc:	adds	r3, r1, r3
   203e0:	str	r3, [sp, #96]	; 0x60
   203e4:	ldr	r3, [sp, #100]	; 0x64
   203e8:	adc	r3, r3, r2
   203ec:	str	r3, [sp, #100]	; 0x64
   203f0:	ldrd	r2, [sp, #56]	; 0x38
   203f4:	ldrd	r0, [sp, #96]	; 0x60
   203f8:	cmp	r3, r1
   203fc:	cmpeq	r2, r0
   20400:	bcc	1fd2c <__assert_fail@plt+0xeb20>
   20404:	b	1fe3c <__assert_fail@plt+0xec30>
   20408:	and	r8, r3, #2
   2040c:	mov	r9, r7
   20410:	orrs	r3, r8, r9
   20414:	beq	2030c <__assert_fail@plt+0xf100>
   20418:	ldr	lr, [r6, #4]
   2041c:	cmp	lr, #8
   20420:	bne	1fd98 <__assert_fail@plt+0xeb8c>
   20424:	b	20354 <__assert_fail@plt+0xf148>
   20428:	ldr	r3, [sp, #120]	; 0x78
   2042c:	mov	r0, #10
   20430:	ldr	r1, [r3]
   20434:	bl	11158 <putc@plt>
   20438:	ldr	r3, [sp, #16]
   2043c:	ldr	r2, [sp, #32]
   20440:	ldr	r3, [r3, #76]	; 0x4c
   20444:	add	r2, r2, #1
   20448:	cmp	r3, r2
   2044c:	ldr	r3, [sp, #24]
   20450:	str	r2, [sp, #32]
   20454:	add	r3, r3, #56	; 0x38
   20458:	str	r3, [sp, #24]
   2045c:	bhi	1fce4 <__assert_fail@plt+0xead8>
   20460:	b	1fa50 <__assert_fail@plt+0xe844>
   20464:	ldr	r1, [pc, #1608]	; 20ab4 <__assert_fail@plt+0xf8a8>
   20468:	b	20110 <__assert_fail@plt+0xef04>
   2046c:	ldr	r1, [pc, #1604]	; 20ab8 <__assert_fail@plt+0xf8ac>
   20470:	b	20110 <__assert_fail@plt+0xef04>
   20474:	ldr	r1, [pc, #1600]	; 20abc <__assert_fail@plt+0xf8b0>
   20478:	b	20110 <__assert_fail@plt+0xef04>
   2047c:	ldr	r1, [pc, #1596]	; 20ac0 <__assert_fail@plt+0xf8b4>
   20480:	b	20110 <__assert_fail@plt+0xef04>
   20484:	ldr	r1, [r4, #8]
   20488:	ldr	r0, [pc, #1588]	; 20ac4 <__assert_fail@plt+0xf8b8>
   2048c:	bl	10f24 <printf@plt>
   20490:	ldr	r1, [r4, #16]
   20494:	ldr	r0, [pc, #1580]	; 20ac8 <__assert_fail@plt+0xf8bc>
   20498:	bl	10f24 <printf@plt>
   2049c:	ldr	r1, [r4, #24]
   204a0:	ldr	r0, [pc, #1568]	; 20ac8 <__assert_fail@plt+0xf8bc>
   204a4:	bl	10f24 <printf@plt>
   204a8:	ldr	r1, [r4, #32]
   204ac:	ldr	r0, [pc, #1560]	; 20acc <__assert_fail@plt+0xf8c0>
   204b0:	bl	10f24 <printf@plt>
   204b4:	ldr	r1, [r4, #40]	; 0x28
   204b8:	ldr	r0, [pc, #1548]	; 20acc <__assert_fail@plt+0xf8c0>
   204bc:	bl	10f24 <printf@plt>
   204c0:	ldr	r3, [r4, #4]
   204c4:	ldr	r0, [pc, #1540]	; 20ad0 <__assert_fail@plt+0xf8c4>
   204c8:	tst	r3, #4
   204cc:	movne	r1, #82	; 0x52
   204d0:	moveq	r1, #32
   204d4:	tst	r3, #2
   204d8:	movne	r2, #87	; 0x57
   204dc:	moveq	r2, #32
   204e0:	tst	r3, #1
   204e4:	movne	r3, #69	; 0x45
   204e8:	moveq	r3, #32
   204ec:	bl	10f24 <printf@plt>
   204f0:	ldr	r1, [r4, #48]	; 0x30
   204f4:	ldr	r0, [pc, #1496]	; 20ad4 <__assert_fail@plt+0xf8c8>
   204f8:	bl	10f24 <printf@plt>
   204fc:	ldr	r7, [pc, #1380]	; 20a68 <__assert_fail@plt+0xf85c>
   20500:	b	2024c <__assert_fail@plt+0xf040>
   20504:	ldr	r3, [pc, #1484]	; 20ad8 <__assert_fail@plt+0xf8cc>
   20508:	ldr	r2, [pc, #1484]	; 20adc <__assert_fail@plt+0xf8d0>
   2050c:	mov	r1, #32
   20510:	add	r0, sp, #168	; 0xa8
   20514:	bl	110b0 <snprintf@plt>
   20518:	ldr	r3, [pc, #1472]	; 20ae0 <__assert_fail@plt+0xf8d4>
   2051c:	add	r1, sp, #168	; 0xa8
   20520:	mov	r2, r3
   20524:	strb	r7, [r3]
   20528:	ldr	r0, [r8, #4]
   2052c:	bl	110e0 <fscanf@plt>
   20530:	cmp	r0, #0
   20534:	ble	207e0 <__assert_fail@plt+0xf5d4>
   20538:	ldr	r3, [r6, #1588]	; 0x634
   2053c:	cmp	r3, #0
   20540:	bne	2078c <__assert_fail@plt+0xf580>
   20544:	ldr	lr, [r8, #76]	; 0x4c
   20548:	b	1fc64 <__assert_fail@plt+0xea58>
   2054c:	cmp	lr, #1
   20550:	bls	20780 <__assert_fail@plt+0xf574>
   20554:	ldrd	r0, [r4, #16]
   20558:	ldr	ip, [r8, #100]	; 0x64
   2055c:	ldrd	sl, [sp, #16]
   20560:	mov	r7, #1
   20564:	str	r9, [sp, #112]	; 0x70
   20568:	str	r8, [sp, #124]	; 0x7c
   2056c:	ldrd	r2, [ip, #72]	; 0x48
   20570:	add	r7, r7, #1
   20574:	cmp	r3, r1
   20578:	cmpeq	r2, r0
   2057c:	mov	r8, r2
   20580:	mov	r9, r3
   20584:	bhi	205c8 <__assert_fail@plt+0xf3bc>
   20588:	ldr	r3, [ip, #96]	; 0x60
   2058c:	strd	r8, [sp, #16]
   20590:	adds	sl, r8, r3
   20594:	ldr	r3, [ip, #100]	; 0x64
   20598:	ldr	r8, [sp, #20]
   2059c:	ldr	r2, [r4, #32]
   205a0:	adc	fp, r8, r3
   205a4:	ldr	r3, [r4, #36]	; 0x24
   205a8:	adds	r2, r0, r2
   205ac:	adc	r3, r1, r3
   205b0:	str	r2, [sp, #8]
   205b4:	str	r3, [sp, #12]
   205b8:	ldrd	r2, [sp, #8]
   205bc:	cmp	fp, r3
   205c0:	cmpeq	sl, r2
   205c4:	bcs	207cc <__assert_fail@plt+0xf5c0>
   205c8:	cmp	r7, lr
   205cc:	add	ip, ip, #56	; 0x38
   205d0:	bne	2056c <__assert_fail@plt+0xf360>
   205d4:	ldr	r8, [sp, #124]	; 0x7c
   205d8:	ldr	r9, [sp, #112]	; 0x70
   205dc:	strd	sl, [sp, #16]
   205e0:	mov	r2, #5
   205e4:	ldr	r1, [pc, #1272]	; 20ae4 <__assert_fail@plt+0xf8d8>
   205e8:	mov	r0, #0
   205ec:	bl	10f90 <dcgettext@plt>
   205f0:	bl	548ac <error@@Base>
   205f4:	ldr	lr, [r8, #76]	; 0x4c
   205f8:	ldr	r3, [r6, #1588]	; 0x634
   205fc:	b	1fc64 <__assert_fail@plt+0xea58>
   20600:	ldr	r7, [pc, #1120]	; 20a68 <__assert_fail@plt+0xf85c>
   20604:	mov	r2, #5
   20608:	bl	14244 <__assert_fail@plt+0x3038>
   2060c:	ldr	r1, [r7]
   20610:	mov	r0, #32
   20614:	bl	11158 <putc@plt>
   20618:	mov	r2, #5
   2061c:	ldrd	r0, [r4, #16]
   20620:	bl	14244 <__assert_fail@plt+0x3038>
   20624:	ldr	r1, [r7]
   20628:	mov	r0, #32
   2062c:	bl	11158 <putc@plt>
   20630:	ldrd	r0, [r4, #24]
   20634:	mov	r2, #5
   20638:	bl	14244 <__assert_fail@plt+0x3038>
   2063c:	ldr	r0, [pc, #1188]	; 20ae8 <__assert_fail@plt+0xf8dc>
   20640:	bl	10f24 <printf@plt>
   20644:	mov	r2, #5
   20648:	ldrd	r0, [r4, #32]
   2064c:	bl	14244 <__assert_fail@plt+0x3038>
   20650:	ldr	r1, [r7]
   20654:	mov	r0, #32
   20658:	bl	11158 <putc@plt>
   2065c:	ldrd	r0, [r4, #40]	; 0x28
   20660:	mov	r2, #5
   20664:	bl	14244 <__assert_fail@plt+0x3038>
   20668:	ldr	r3, [r4, #4]
   2066c:	ldr	r0, [pc, #1144]	; 20aec <__assert_fail@plt+0xf8e0>
   20670:	tst	r3, #4
   20674:	movne	r1, #82	; 0x52
   20678:	moveq	r1, #32
   2067c:	tst	r3, #2
   20680:	movne	r2, #87	; 0x57
   20684:	moveq	r2, #32
   20688:	tst	r3, #1
   2068c:	movne	r3, #69	; 0x45
   20690:	moveq	r3, #32
   20694:	bl	10f24 <printf@plt>
   20698:	mov	r2, #4
   2069c:	ldrd	r0, [r4, #48]	; 0x30
   206a0:	bl	14244 <__assert_fail@plt+0x3038>
   206a4:	b	2024c <__assert_fail@plt+0xf040>
   206a8:	ldrb	r0, [r8, #23]
   206ac:	ldrh	r3, [r8, #66]	; 0x42
   206b0:	cmp	r0, #13
   206b4:	cmpeq	r3, #50	; 0x32
   206b8:	moveq	r0, #1
   206bc:	movne	r0, #0
   206c0:	beq	1ff50 <__assert_fail@plt+0xed44>
   206c4:	mov	r2, #5
   206c8:	ldr	r1, [pc, #1056]	; 20af0 <__assert_fail@plt+0xf8e4>
   206cc:	bl	10f90 <dcgettext@plt>
   206d0:	bl	548ac <error@@Base>
   206d4:	ldr	lr, [r8, #76]	; 0x4c
   206d8:	ldr	r3, [r6, #1588]	; 0x634
   206dc:	b	1fc64 <__assert_fail@plt+0xea58>
   206e0:	mov	r2, #5
   206e4:	ldr	r1, [pc, #1032]	; 20af4 <__assert_fail@plt+0xf8e8>
   206e8:	mov	r0, #0
   206ec:	bl	10f90 <dcgettext@plt>
   206f0:	bl	548ac <error@@Base>
   206f4:	b	1fc50 <__assert_fail@plt+0xea44>
   206f8:	mov	r2, #5
   206fc:	ldr	r1, [pc, #1012]	; 20af8 <__assert_fail@plt+0xf8ec>
   20700:	mov	r0, #0
   20704:	bl	10f90 <dcgettext@plt>
   20708:	bl	548ac <error@@Base>
   2070c:	b	1ff64 <__assert_fail@plt+0xed58>
   20710:	mov	r2, #5
   20714:	ldr	r1, [pc, #992]	; 20afc <__assert_fail@plt+0xf8f0>
   20718:	mov	r0, #0
   2071c:	bl	10f90 <dcgettext@plt>
   20720:	bl	548ac <error@@Base>
   20724:	mov	r9, r4
   20728:	b	1ff50 <__assert_fail@plt+0xed44>
   2072c:	ldr	r1, [pc, #972]	; 20b00 <__assert_fail@plt+0xf8f4>
   20730:	b	20110 <__assert_fail@plt+0xef04>
   20734:	ldr	r1, [pc, #968]	; 20b04 <__assert_fail@plt+0xf8f8>
   20738:	b	20110 <__assert_fail@plt+0xef04>
   2073c:	mov	r1, r0
   20740:	ldr	r0, [pc, #908]	; 20ad4 <__assert_fail@plt+0xf8c8>
   20744:	bl	10f24 <printf@plt>
   20748:	b	2024c <__assert_fail@plt+0xf040>
   2074c:	mov	r1, r0
   20750:	ldr	r0, [pc, #944]	; 20b08 <__assert_fail@plt+0xf8fc>
   20754:	bl	10f24 <printf@plt>
   20758:	b	201f4 <__assert_fail@plt+0xefe8>
   2075c:	mov	r1, r0
   20760:	ldr	r0, [pc, #860]	; 20ac4 <__assert_fail@plt+0xf8b8>
   20764:	bl	10f24 <printf@plt>
   20768:	b	201cc <__assert_fail@plt+0xefc0>
   2076c:	mov	r1, r0
   20770:	ldr	r0, [pc, #844]	; 20ac4 <__assert_fail@plt+0xf8b8>
   20774:	bl	10f24 <printf@plt>
   20778:	ldr	r7, [pc, #744]	; 20a68 <__assert_fail@plt+0xf85c>
   2077c:	b	20168 <__assert_fail@plt+0xef5c>
   20780:	beq	205e0 <__assert_fail@plt+0xf3d4>
   20784:	ldr	r3, [r6, #1588]	; 0x634
   20788:	b	1fc74 <__assert_fail@plt+0xea68>
   2078c:	mov	r2, #5
   20790:	ldr	r1, [pc, #884]	; 20b0c <__assert_fail@plt+0xf900>
   20794:	mov	r0, #0
   20798:	bl	10f90 <dcgettext@plt>
   2079c:	ldr	r1, [pc, #828]	; 20ae0 <__assert_fail@plt+0xf8d4>
   207a0:	bl	10f24 <printf@plt>
   207a4:	ldr	r3, [r6, #1588]	; 0x634
   207a8:	b	20544 <__assert_fail@plt+0xf338>
   207ac:	mov	r2, #5
   207b0:	ldr	r1, [pc, #856]	; 20b10 <__assert_fail@plt+0xf904>
   207b4:	mov	r0, r4
   207b8:	bl	10f90 <dcgettext@plt>
   207bc:	bl	10f24 <printf@plt>
   207c0:	b	1fa50 <__assert_fail@plt+0xe844>
   207c4:	ldr	r1, [pc, #840]	; 20b14 <__assert_fail@plt+0xf908>
   207c8:	b	20110 <__assert_fail@plt+0xef04>
   207cc:	strd	sl, [sp, #16]
   207d0:	ldr	r8, [sp, #124]	; 0x7c
   207d4:	ldr	r9, [sp, #112]	; 0x70
   207d8:	ldr	r3, [r6, #1588]	; 0x634
   207dc:	b	1fc64 <__assert_fail@plt+0xea58>
   207e0:	mov	r2, #5
   207e4:	ldr	r1, [pc, #812]	; 20b18 <__assert_fail@plt+0xf90c>
   207e8:	mov	r0, r7
   207ec:	bl	10f90 <dcgettext@plt>
   207f0:	bl	548ac <error@@Base>
   207f4:	b	20538 <__assert_fail@plt+0xf32c>
   207f8:	ldr	r1, [pc, #796]	; 20b1c <__assert_fail@plt+0xf910>
   207fc:	mov	r0, r4
   20800:	bl	10f90 <dcgettext@plt>
   20804:	bl	10f24 <printf@plt>
   20808:	mov	r0, r4
   2080c:	mov	r2, #5
   20810:	ldr	r1, [pc, #776]	; 20b20 <__assert_fail@plt+0xf914>
   20814:	b	1fabc <__assert_fail@plt+0xe8b0>
   20818:	mov	r2, #5
   2081c:	ldr	r1, [pc, #768]	; 20b24 <__assert_fail@plt+0xf918>
   20820:	mov	r0, #0
   20824:	b	1fabc <__assert_fail@plt+0xe8b0>
   20828:	add	r2, r7, #-1610612736	; 0xa0000000
   2082c:	cmn	r2, #-268435455	; 0xf0000001
   20830:	bhi	20974 <__assert_fail@plt+0xf768>
   20834:	ldrh	r3, [r8, #66]	; 0x42
   20838:	cmp	r3, #15
   2083c:	beq	209a0 <__assert_fail@plt+0xf794>
   20840:	cmp	r3, #50	; 0x32
   20844:	beq	209bc <__assert_fail@plt+0xf7b0>
   20848:	ldrb	r3, [r8, #23]
   2084c:	cmp	r3, #6
   20850:	beq	20bb8 <__assert_fail@plt+0xf9ac>
   20854:	ldr	r1, [pc, #716]	; 20b28 <__assert_fail@plt+0xf91c>
   20858:	ldr	r0, [pc, #716]	; 20b2c <__assert_fail@plt+0xf920>
   2085c:	bl	1114c <sprintf@plt>
   20860:	ldr	r1, [pc, #708]	; 20b2c <__assert_fail@plt+0xf920>
   20864:	b	20110 <__assert_fail@plt+0xef04>
   20868:	ldrd	r2, [sp, #64]	; 0x40
   2086c:	ldrd	sl, [sp, #112]	; 0x70
   20870:	cmp	r3, fp
   20874:	cmpeq	r2, sl
   20878:	bls	20040 <__assert_fail@plt+0xee34>
   2087c:	mov	r0, ip
   20880:	mov	r2, #5
   20884:	ldr	r1, [pc, #676]	; 20b30 <__assert_fail@plt+0xf924>
   20888:	b	20020 <__assert_fail@plt+0xee14>
   2088c:	ldr	r1, [sp, #120]	; 0x78
   20890:	mov	r3, #0
   20894:	mov	r2, #0
   20898:	ldr	lr, [r8, #76]	; 0x4c
   2089c:	strd	r2, [r1, #-8]
   208a0:	ldr	r3, [r6, #1588]	; 0x634
   208a4:	b	1fc64 <__assert_fail@plt+0xea58>
   208a8:	ldr	r1, [pc, #644]	; 20b34 <__assert_fail@plt+0xf928>
   208ac:	cmp	r3, r1
   208b0:	bne	20914 <__assert_fail@plt+0xf708>
   208b4:	cmp	r7, #1879048192	; 0x70000000
   208b8:	bne	20914 <__assert_fail@plt+0xf708>
   208bc:	ldr	r1, [pc, #628]	; 20b38 <__assert_fail@plt+0xf92c>
   208c0:	b	20110 <__assert_fail@plt+0xef04>
   208c4:	cmp	r3, #50	; 0x32
   208c8:	bne	20914 <__assert_fail@plt+0xf708>
   208cc:	cmp	r7, #1879048192	; 0x70000000
   208d0:	beq	20c18 <__assert_fail@plt+0xfa0c>
   208d4:	cmp	r7, #1879048193	; 0x70000001
   208d8:	bne	20914 <__assert_fail@plt+0xf708>
   208dc:	ldr	r1, [pc, #600]	; 20b3c <__assert_fail@plt+0xf930>
   208e0:	b	20110 <__assert_fail@plt+0xef04>
   208e4:	cmp	r3, #10
   208e8:	beq	2093c <__assert_fail@plt+0xf730>
   208ec:	bls	20934 <__assert_fail@plt+0xf728>
   208f0:	cmp	r3, #15
   208f4:	bne	20928 <__assert_fail@plt+0xf71c>
   208f8:	mov	r0, r7
   208fc:	str	r2, [sp, #112]	; 0x70
   20900:	bl	12a2c <__assert_fail@plt+0x1820>
   20904:	ldr	r2, [sp, #112]	; 0x70
   20908:	mov	r1, r0
   2090c:	cmp	r1, #0
   20910:	bne	20110 <__assert_fail@plt+0xef04>
   20914:	ldr	r1, [pc, #548]	; 20b40 <__assert_fail@plt+0xf934>
   20918:	ldr	r0, [pc, #524]	; 20b2c <__assert_fail@plt+0xf920>
   2091c:	bl	1114c <sprintf@plt>
   20920:	ldr	r1, [pc, #516]	; 20b2c <__assert_fail@plt+0xf920>
   20924:	b	20110 <__assert_fail@plt+0xef04>
   20928:	cmp	r3, #22
   2092c:	beq	208b4 <__assert_fail@plt+0xf6a8>
   20930:	b	20914 <__assert_fail@plt+0xf708>
   20934:	cmp	r3, #8
   20938:	bne	20914 <__assert_fail@plt+0xf708>
   2093c:	cmp	r2, #3
   20940:	bhi	20914 <__assert_fail@plt+0xf708>
   20944:	ldr	r3, [pc, #504]	; 20b44 <__assert_fail@plt+0xf938>
   20948:	add	r3, r3, r2, lsl #2
   2094c:	ldr	r1, [r3, #1080]	; 0x438
   20950:	b	2090c <__assert_fail@plt+0xf700>
   20954:	ldr	r1, [pc, #492]	; 20b48 <__assert_fail@plt+0xf93c>
   20958:	ldr	r0, [pc, #460]	; 20b2c <__assert_fail@plt+0xf920>
   2095c:	bl	1114c <sprintf@plt>
   20960:	ldr	r1, [pc, #452]	; 20b2c <__assert_fail@plt+0xf920>
   20964:	b	20110 <__assert_fail@plt+0xef04>
   20968:	cmp	ip, #7
   2096c:	bne	203f0 <__assert_fail@plt+0xf1e4>
   20970:	b	203d0 <__assert_fail@plt+0xf1c4>
   20974:	mov	r2, #5
   20978:	ldr	r1, [pc, #460]	; 20b4c <__assert_fail@plt+0xf940>
   2097c:	mov	r0, #0
   20980:	bl	10f90 <dcgettext@plt>
   20984:	mov	r1, #32
   20988:	mov	r3, r7
   2098c:	mov	r2, r0
   20990:	ldr	r0, [pc, #404]	; 20b2c <__assert_fail@plt+0xf920>
   20994:	bl	110b0 <snprintf@plt>
   20998:	ldr	r1, [pc, #396]	; 20b2c <__assert_fail@plt+0xf920>
   2099c:	b	20110 <__assert_fail@plt+0xef04>
   209a0:	mov	r0, r7
   209a4:	str	r2, [sp, #112]	; 0x70
   209a8:	bl	12a2c <__assert_fail@plt+0x1820>
   209ac:	ldr	r2, [sp, #112]	; 0x70
   209b0:	subs	r1, r0, #0
   209b4:	beq	20854 <__assert_fail@plt+0xf648>
   209b8:	b	20110 <__assert_fail@plt+0xef04>
   209bc:	cmp	r2, #20
   209c0:	ldrls	pc, [pc, r2, lsl #2]
   209c4:	b	20854 <__assert_fail@plt+0xf648>
   209c8:	andeq	r0, r2, r4, lsr #20
   209cc:	andeq	r0, r2, r4, asr r8
   209d0:	andeq	r0, r2, r4, asr r8
   209d4:	andeq	r0, r2, r4, asr r8
   209d8:	andeq	r0, r2, r4, asr r8
   209dc:	andeq	r0, r2, r4, asr r8
   209e0:	andeq	r0, r2, r4, asr r8
   209e4:	andeq	r0, r2, r4, asr r8
   209e8:	andeq	r0, r2, r4, asr r8
   209ec:	andeq	r0, r2, r4, asr r8
   209f0:	andeq	r0, r2, r4, asr r8
   209f4:	andeq	r0, r2, r4, asr r8
   209f8:	andeq	r0, r2, r4, asr r8
   209fc:	andeq	r0, r2, r4, asr r8
   20a00:	andeq	r0, r2, r4, asr r8
   20a04:	andeq	r0, r2, r4, asr r8
   20a08:	andeq	r0, r2, r4, asr r8
   20a0c:	andeq	r0, r2, r4, asr r8
   20a10:	andeq	r0, r2, ip, lsl sl
   20a14:	muleq	r2, r0, fp
   20a18:	andeq	r0, r2, ip, lsr #20
   20a1c:	ldr	r1, [pc, #300]	; 20b50 <__assert_fail@plt+0xf944>
   20a20:	b	20110 <__assert_fail@plt+0xef04>
   20a24:	ldr	r1, [pc, #296]	; 20b54 <__assert_fail@plt+0xf948>
   20a28:	b	20110 <__assert_fail@plt+0xef04>
   20a2c:	ldr	r1, [pc, #292]	; 20b58 <__assert_fail@plt+0xf94c>
   20a30:	b	20110 <__assert_fail@plt+0xef04>
   20a34:	andeq	sl, r9, r8, lsr r4
   20a38:	andeq	r6, r6, r8, asr #6
   20a3c:	andeq	lr, r9, r8, lsr #26
   20a40:	andeq	r6, r6, r8, lsr #7
   20a44:	muleq	r9, r8, r8
   20a48:			; <UNDEFINED> instruction: 0x000662b0
   20a4c:	andeq	r6, r6, r8, asr #5
   20a50:	andeq	r9, r6, r0, lsr #15
   20a54:	andeq	r6, r6, r4, lsl r3
   20a58:	ldrdeq	r6, [r6], -ip
   20a5c:	andeq	r3, r6, ip, asr #17
   20a60:	andeq	r6, r6, r4, lsl #15
   20a64:	andeq	r6, r6, r4, lsr #15
   20a68:	andeq	sl, r9, ip, lsr #8
   20a6c:			; <UNDEFINED> instruction: 0x000667bc
   20a70:	ldrbtvs	lr, [r4], #-1362	; 0xfffffaae
   20a74:	andeq	pc, r7, r4, ror #10
   20a78:	strdeq	r6, [r6], -r8
   20a7c:	strdeq	r6, [r6], -r4
   20a80:	andeq	r6, r6, ip, lsr #12
   20a84:			; <UNDEFINED> instruction: 0x000666b8
   20a88:	andeq	r6, r6, r0, lsr #4
   20a8c:	andeq	r0, r7, r0, lsr #5
   20a90:			; <UNDEFINED> instruction: 0x000664bc
   20a94:	andeq	r6, r6, r0, lsl #10
   20a98:	andeq	r2, r7, r8, lsr #21
   20a9c:	blls	fe2e7550 <optarg@@GLIBC_2.4+0xfe24d120>
   20aa0:	andeq	r6, r6, r8, lsr r1
   20aa4:	ldrbtvs	lr, [r4], #-1361	; 0xfffffaaf
   20aa8:	andeq	r6, r6, r4, ror r1
   20aac:	andeq	r4, r6, r4, asr r7
   20ab0:	blls	fe2e7578 <optarg@@GLIBC_2.4+0xfe24d148>
   20ab4:	andeq	r6, r6, r8, asr #2
   20ab8:	andeq	r6, r6, r0, asr r1
   20abc:	strdeq	r4, [r6], -ip
   20ac0:	andeq	r6, r6, r8, ror #2
   20ac4:	andeq	r6, r6, r8, asr #9
   20ac8:	ldrdeq	r6, [r6], -r4
   20acc:	andeq	r6, r6, r0, ror #9
   20ad0:	andeq	r6, r6, ip, ror #9
   20ad4:	andeq	lr, r7, r0, lsr r8
   20ad8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20adc:	andeq	r6, r6, r4, lsr #14
   20ae0:	andeq	fp, r9, r4, asr #11
   20ae4:	andeq	r6, r6, r0, lsr #11
   20ae8:	andeq	r6, r6, ip, lsl #10
   20aec:	andeq	r6, r6, r0, lsr #10
   20af0:	andeq	r6, r6, r0, lsl #12
   20af4:	andeq	r6, r6, r8, ror #10
   20af8:	ldrdeq	r6, [r6], -r4
   20afc:	andeq	r6, r6, r0, lsr r5
   20b00:	andeq	r4, r6, ip, asr #14
   20b04:	andeq	r6, r6, r8, asr r1
   20b08:	strdeq	r6, [r6], -r4
   20b0c:	andeq	r6, r6, r8, asr r7
   20b10:	andeq	r6, r6, r0, lsl #5
   20b14:	andeq	r4, r6, r4, ror #14
   20b18:	andeq	r6, r6, ip, lsr #14
   20b1c:	andeq	r6, r6, r8, lsl #8
   20b20:	andeq	r6, r6, ip, asr #8
   20b24:	andeq	r6, r6, ip, asr r3
   20b28:			; <UNDEFINED> instruction: 0x000664b0
   20b2c:	andeq	sl, r9, ip, asr #20
   20b30:	andeq	r6, r6, r0, ror r6
   20b34:	muleq	r0, r0, r3
   20b38:	andeq	r6, r6, r0, ror #3
   20b3c:	andeq	r4, r6, r4, lsl #14
   20b40:	andeq	r6, r6, r4, lsr #9
   20b44:	andeq	r8, r5, r4, ror #27
   20b48:	muleq	r6, r4, r4
   20b4c:	strdeq	r4, [r6], -r8
   20b50:	andeq	r0, r6, r8, asr #26
   20b54:	andeq	r0, r6, ip, lsr #25
   20b58:	andeq	r0, r6, r8, ror #26
   20b5c:	andeq	r0, r6, r8, asr sp
   20b60:	andeq	r6, r6, ip, ror #3
   20b64:	muleq	r6, r4, r1
   20b68:			; <UNDEFINED> instruction: 0x000661b0
   20b6c:			; <UNDEFINED> instruction: 0x000661bc
   20b70:	ldrbtvs	lr, [r4], #-1360	; 0xfffffab0
   20b74:	andeq	r6, r6, r8, asr #3
   20b78:	strdeq	r6, [r6], -ip
   20b7c:	muleq	r6, r0, r1
   20b80:	andeq	r6, r6, r0, lsl #3
   20b84:	andeq	r6, r6, r0, lsr #3
   20b88:	andeq	r6, r6, ip, lsl #4
   20b8c:	ldrdeq	r6, [r6], -r4
   20b90:	ldr	r1, [pc, #-60]	; 20b5c <__assert_fail@plt+0xf950>
   20b94:	b	20110 <__assert_fail@plt+0xef04>
   20b98:	cmp	r7, #1879048192	; 0x70000000
   20b9c:	bne	20914 <__assert_fail@plt+0xf708>
   20ba0:	ldr	r1, [pc, #-72]	; 20b60 <__assert_fail@plt+0xf954>
   20ba4:	b	20110 <__assert_fail@plt+0xef04>
   20ba8:	cmp	r7, #1879048193	; 0x70000001
   20bac:	bne	20914 <__assert_fail@plt+0xf708>
   20bb0:	ldr	r1, [pc, #-84]	; 20b64 <__assert_fail@plt+0xf958>
   20bb4:	b	20110 <__assert_fail@plt+0xef04>
   20bb8:	cmn	r7, #-1879048186	; 0x90000006
   20bbc:	beq	20c38 <__assert_fail@plt+0xfa2c>
   20bc0:	bls	20bec <__assert_fail@plt+0xf9e0>
   20bc4:	cmn	r7, #-1879048188	; 0x90000004
   20bc8:	beq	20c28 <__assert_fail@plt+0xfa1c>
   20bcc:	bcc	20c20 <__assert_fail@plt+0xfa14>
   20bd0:	cmn	r7, #-1879048189	; 0x90000003
   20bd4:	ldreq	r1, [pc, #-116]	; 20b68 <__assert_fail@plt+0xf95c>
   20bd8:	beq	20110 <__assert_fail@plt+0xef04>
   20bdc:	cmn	r7, #-1879048191	; 0x90000001
   20be0:	ldreq	r1, [pc, #-124]	; 20b6c <__assert_fail@plt+0xf960>
   20be4:	beq	20110 <__assert_fail@plt+0xef04>
   20be8:	b	20854 <__assert_fail@plt+0xf648>
   20bec:	ldr	r3, [pc, #-132]	; 20b70 <__assert_fail@plt+0xf964>
   20bf0:	cmp	r7, r3
   20bf4:	beq	20c30 <__assert_fail@plt+0xfa24>
   20bf8:	cmn	r7, #-1879048183	; 0x90000009
   20bfc:	ldreq	r1, [pc, #-144]	; 20b74 <__assert_fail@plt+0xf968>
   20c00:	beq	20110 <__assert_fail@plt+0xef04>
   20c04:	sub	r3, r3, #1048576	; 0x100000
   20c08:	cmp	r7, r3
   20c0c:	bne	20854 <__assert_fail@plt+0xf648>
   20c10:	ldr	r1, [pc, #-160]	; 20b78 <__assert_fail@plt+0xf96c>
   20c14:	b	20110 <__assert_fail@plt+0xef04>
   20c18:	ldr	r1, [pc, #-164]	; 20b7c <__assert_fail@plt+0xf970>
   20c1c:	b	20110 <__assert_fail@plt+0xef04>
   20c20:	ldr	r1, [pc, #-168]	; 20b80 <__assert_fail@plt+0xf974>
   20c24:	b	20110 <__assert_fail@plt+0xef04>
   20c28:	ldr	r1, [pc, #-172]	; 20b84 <__assert_fail@plt+0xf978>
   20c2c:	b	20110 <__assert_fail@plt+0xef04>
   20c30:	ldr	r1, [pc, #-176]	; 20b88 <__assert_fail@plt+0xf97c>
   20c34:	b	20110 <__assert_fail@plt+0xef04>
   20c38:	ldr	r1, [pc, #-180]	; 20b8c <__assert_fail@plt+0xf980>
   20c3c:	b	20110 <__assert_fail@plt+0xef04>
   20c40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c44:	mov	fp, r0
   20c48:	sub	sp, sp, #188	; 0xbc
   20c4c:	mov	r2, #56	; 0x38
   20c50:	mov	r1, #0
   20c54:	add	r0, sp, #128	; 0x80
   20c58:	bl	110bc <memset@plt>
   20c5c:	ldr	sl, [fp, #84]	; 0x54
   20c60:	ldr	r4, [fp, #96]	; 0x60
   20c64:	cmp	sl, #0
   20c68:	beq	21dc0 <__assert_fail@plt+0x10bb4>
   20c6c:	mov	r8, #0
   20c70:	mov	r3, #1
   20c74:	ldr	r9, [pc, #4076]	; 21c68 <__assert_fail@plt+0x10a5c>
   20c78:	mov	r5, r8
   20c7c:	str	r3, [sp, #108]	; 0x6c
   20c80:	b	20c9c <__assert_fail@plt+0xfa90>
   20c84:	cmp	r3, #1879048193	; 0x70000001
   20c88:	addeq	r8, r8, #1
   20c8c:	add	r5, r5, #1
   20c90:	cmp	sl, r5
   20c94:	add	r4, r4, #72	; 0x48
   20c98:	bls	20d7c <__assert_fail@plt+0xfb70>
   20c9c:	ldr	r3, [r4, #4]
   20ca0:	cmp	r3, #2
   20ca4:	bne	20c84 <__assert_fail@plt+0xfa78>
   20ca8:	ldr	r3, [r4, #40]	; 0x28
   20cac:	cmp	r3, sl
   20cb0:	bcs	20c8c <__assert_fail@plt+0xfa80>
   20cb4:	ldr	r3, [r9]
   20cb8:	add	r2, sp, #164	; 0xa4
   20cbc:	cmp	r3, #0
   20cc0:	mov	r1, r4
   20cc4:	mov	r0, fp
   20cc8:	beq	21e34 <__assert_fail@plt+0x10c28>
   20ccc:	bl	1772c <__assert_fail@plt+0x6520>
   20cd0:	ldr	sl, [r4, #40]	; 0x28
   20cd4:	ldr	r2, [sp, #176]	; 0xb0
   20cd8:	ldr	r3, [fp, #96]	; 0x60
   20cdc:	add	sl, sl, sl, lsl #3
   20ce0:	cmp	r2, #0
   20ce4:	str	r0, [sp, #160]	; 0xa0
   20ce8:	add	sl, r3, sl, lsl #3
   20cec:	beq	20d14 <__assert_fail@plt+0xfb08>
   20cf0:	mov	r2, #5
   20cf4:	ldr	r1, [pc, #3952]	; 21c6c <__assert_fail@plt+0x10a60>
   20cf8:	mov	r0, #0
   20cfc:	bl	10f90 <dcgettext@plt>
   20d00:	bl	548ac <error@@Base>
   20d04:	ldr	r0, [sp, #176]	; 0xb0
   20d08:	bl	10f54 <free@plt>
   20d0c:	mov	r3, #0
   20d10:	str	r3, [sp, #108]	; 0x6c
   20d14:	ldr	r3, [sl, #24]
   20d18:	mov	r2, #5
   20d1c:	ldr	r1, [pc, #3916]	; 21c70 <__assert_fail@plt+0x10a64>
   20d20:	mov	r0, #0
   20d24:	ldrd	r6, [sl, #32]
   20d28:	str	r3, [sp, #24]
   20d2c:	bl	10f90 <dcgettext@plt>
   20d30:	strd	r6, [sp, #8]
   20d34:	mov	r6, #1
   20d38:	mov	r7, #0
   20d3c:	ldr	r3, [sp, #24]
   20d40:	strd	r6, [sp]
   20d44:	add	r2, fp, #8
   20d48:	add	r1, fp, #4
   20d4c:	add	r5, r5, #1
   20d50:	add	r4, r4, #72	; 0x48
   20d54:	str	r0, [sp, #16]
   20d58:	mov	r0, #0
   20d5c:	bl	1717c <__assert_fail@plt+0x5f70>
   20d60:	cmp	r0, #0
   20d64:	str	r0, [sp, #176]	; 0xb0
   20d68:	ldrne	r0, [sl, #32]
   20d6c:	ldr	sl, [fp, #84]	; 0x54
   20d70:	str	r0, [sp, #180]	; 0xb4
   20d74:	cmp	sl, r5
   20d78:	bhi	20c9c <__assert_fail@plt+0xfa90>
   20d7c:	cmp	r8, #0
   20d80:	beq	21dc8 <__assert_fail@plt+0x10bbc>
   20d84:	sub	r3, r8, #1
   20d88:	str	r3, [sp, #52]	; 0x34
   20d8c:	mov	r3, #0
   20d90:	mov	r9, r3
   20d94:	ldr	r6, [fp, #96]	; 0x60
   20d98:	add	r3, r9, r9, lsl #3
   20d9c:	cmp	r9, sl
   20da0:	mov	r2, r6
   20da4:	add	r7, r6, r3, lsl #3
   20da8:	bcc	20dc0 <__assert_fail@plt+0xfbb4>
   20dac:	b	21e6c <__assert_fail@plt+0x10c60>
   20db0:	add	r9, r9, #1
   20db4:	cmp	r9, sl
   20db8:	add	r7, r7, #72	; 0x48
   20dbc:	beq	21e6c <__assert_fail@plt+0x10c60>
   20dc0:	ldr	r3, [r7, #4]
   20dc4:	cmp	r3, #1879048193	; 0x70000001
   20dc8:	bne	20db0 <__assert_fail@plt+0xfba4>
   20dcc:	ldr	r3, [r7, #8]
   20dd0:	mov	ip, #0
   20dd4:	and	r3, r3, #512	; 0x200
   20dd8:	str	r3, [sp, #32]
   20ddc:	str	ip, [sp, #36]	; 0x24
   20de0:	ldrd	r0, [sp, #32]
   20de4:	mov	r4, r9
   20de8:	add	r9, r9, #1
   20dec:	orrs	r3, r0, r1
   20df0:	beq	20e68 <__assert_fail@plt+0xfc5c>
   20df4:	ldr	r3, [pc, #3692]	; 21c68 <__assert_fail@plt+0x10a5c>
   20df8:	ldr	r3, [r3, #832]	; 0x340
   20dfc:	cmp	r3, #0
   20e00:	beq	20e10 <__assert_fail@plt+0xfc04>
   20e04:	ldr	r3, [r3, r4, lsl #2]
   20e08:	cmp	r3, #0
   20e0c:	bne	217ac <__assert_fail@plt+0x105a0>
   20e10:	mov	r2, #5
   20e14:	ldr	r1, [pc, #3672]	; 21c74 <__assert_fail@plt+0x10a68>
   20e18:	mov	r0, #0
   20e1c:	bl	10f90 <dcgettext@plt>
   20e20:	bl	10f24 <printf@plt>
   20e24:	ldr	r3, [fp, #104]	; 0x68
   20e28:	cmp	r3, #0
   20e2c:	beq	21d2c <__assert_fail@plt+0x10b20>
   20e30:	add	r1, fp, #108	; 0x6c
   20e34:	mov	r2, r7
   20e38:	add	r0, fp, #104	; 0x68
   20e3c:	bl	16c64 <__assert_fail@plt+0x5a58>
   20e40:	mov	r1, r0
   20e44:	ldr	r0, [pc, #3628]	; 21c78 <__assert_fail@plt+0x10a6c>
   20e48:	bl	10f24 <printf@plt>
   20e4c:	ldr	r3, [sp, #52]	; 0x34
   20e50:	sub	r3, r3, #1
   20e54:	cmn	r3, #1
   20e58:	str	r3, [sp, #52]	; 0x34
   20e5c:	beq	21ddc <__assert_fail@plt+0x10bd0>
   20e60:	ldr	sl, [fp, #84]	; 0x54
   20e64:	b	20d94 <__assert_fail@plt+0xfb88>
   20e68:	ldr	r4, [fp, #104]	; 0x68
   20e6c:	cmp	r4, #0
   20e70:	beq	21d3c <__assert_fail@plt+0x10b30>
   20e74:	ldr	r5, [r7]
   20e78:	ldr	r8, [fp, #108]	; 0x6c
   20e7c:	cmp	r5, r8
   20e80:	bcs	21890 <__assert_fail@plt+0x10684>
   20e84:	add	r3, r4, r5
   20e88:	mov	r0, r3
   20e8c:	mov	r2, #22
   20e90:	ldr	r1, [pc, #3556]	; 21c7c <__assert_fail@plt+0x10a70>
   20e94:	str	r3, [sp, #24]
   20e98:	bl	111d0 <strncmp@plt>
   20e9c:	ldr	r3, [sp, #24]
   20ea0:	cmp	r0, #0
   20ea4:	bne	21600 <__assert_fail@plt+0x103f4>
   20ea8:	mov	r0, r3
   20eac:	cmp	sl, #0
   20eb0:	add	r8, r0, #22
   20eb4:	beq	20e10 <__assert_fail@plt+0xfc04>
   20eb8:	ldr	r5, [pc, #3520]	; 21c80 <__assert_fail@plt+0x10a74>
   20ebc:	mov	r4, #0
   20ec0:	str	r7, [sp, #24]
   20ec4:	b	20f10 <__assert_fail@plt+0xfd04>
   20ec8:	add	r7, r7, r2
   20ecc:	mov	r0, r7
   20ed0:	mov	r2, #23
   20ed4:	mov	r1, r5
   20ed8:	bl	111d0 <strncmp@plt>
   20edc:	cmp	r0, #0
   20ee0:	bne	20efc <__assert_fail@plt+0xfcf0>
   20ee4:	mov	r0, r7
   20ee8:	add	r0, r0, #23
   20eec:	mov	r1, r8
   20ef0:	bl	10f18 <strcmp@plt>
   20ef4:	cmp	r0, #0
   20ef8:	beq	21860 <__assert_fail@plt+0x10654>
   20efc:	add	r4, r4, #1
   20f00:	cmp	sl, r4
   20f04:	add	r6, r6, #72	; 0x48
   20f08:	mov	r3, sl
   20f0c:	bls	20fe4 <__assert_fail@plt+0xfdd8>
   20f10:	cmp	r6, #0
   20f14:	beq	20f98 <__assert_fail@plt+0xfd8c>
   20f18:	ldr	r7, [fp, #104]	; 0x68
   20f1c:	cmp	r7, #0
   20f20:	beq	20fd0 <__assert_fail@plt+0xfdc4>
   20f24:	ldr	r2, [r6]
   20f28:	ldr	r1, [fp, #108]	; 0x6c
   20f2c:	cmp	r2, r1
   20f30:	bcc	20ec8 <__assert_fail@plt+0xfcbc>
   20f34:	mov	r2, #5
   20f38:	ldr	r1, [pc, #3500]	; 21cec <__assert_fail@plt+0x10ae0>
   20f3c:	mov	r0, #0
   20f40:	bl	10f90 <dcgettext@plt>
   20f44:	mov	r2, #23
   20f48:	mov	r1, r5
   20f4c:	bl	111d0 <strncmp@plt>
   20f50:	cmp	r0, #0
   20f54:	bne	20f90 <__assert_fail@plt+0xfd84>
   20f58:	ldr	r7, [fp, #104]	; 0x68
   20f5c:	cmp	r7, #0
   20f60:	beq	215dc <__assert_fail@plt+0x103d0>
   20f64:	ldr	r2, [r6]
   20f68:	ldr	r1, [fp, #108]	; 0x6c
   20f6c:	cmp	r2, r1
   20f70:	addcc	r7, r7, r2
   20f74:	ldrcc	sl, [fp, #84]	; 0x54
   20f78:	bcc	20ee4 <__assert_fail@plt+0xfcd8>
   20f7c:	mov	r2, #5
   20f80:	ldr	r1, [pc, #3428]	; 21cec <__assert_fail@plt+0x10ae0>
   20f84:	bl	10f90 <dcgettext@plt>
   20f88:	ldr	sl, [fp, #84]	; 0x54
   20f8c:	b	20ee8 <__assert_fail@plt+0xfcdc>
   20f90:	ldr	sl, [fp, #84]	; 0x54
   20f94:	b	20efc <__assert_fail@plt+0xfcf0>
   20f98:	mov	r2, #5
   20f9c:	ldr	r1, [pc, #3296]	; 21c84 <__assert_fail@plt+0x10a78>
   20fa0:	mov	r0, r6
   20fa4:	bl	10f90 <dcgettext@plt>
   20fa8:	mov	r2, #23
   20fac:	mov	r1, r5
   20fb0:	bl	111d0 <strncmp@plt>
   20fb4:	cmp	r0, #0
   20fb8:	bne	20f90 <__assert_fail@plt+0xfd84>
   20fbc:	mov	r2, #5
   20fc0:	ldr	r1, [pc, #3260]	; 21c84 <__assert_fail@plt+0x10a78>
   20fc4:	bl	10f90 <dcgettext@plt>
   20fc8:	ldr	sl, [fp, #84]	; 0x54
   20fcc:	b	20ee8 <__assert_fail@plt+0xfcdc>
   20fd0:	mov	r0, r7
   20fd4:	mov	r2, #5
   20fd8:	ldr	r1, [pc, #3348]	; 21cf4 <__assert_fail@plt+0x10ae8>
   20fdc:	bl	10f90 <dcgettext@plt>
   20fe0:	b	20f44 <__assert_fail@plt+0xfd38>
   20fe4:	ldr	r7, [sp, #24]
   20fe8:	cmp	r4, r3
   20fec:	beq	20e10 <__assert_fail@plt+0xfc04>
   20ff0:	ldrd	r4, [r6, #16]
   20ff4:	mov	r2, #5
   20ff8:	ldr	r1, [pc, #3208]	; 21c88 <__assert_fail@plt+0x10a7c>
   20ffc:	mov	r0, #0
   21000:	strd	r4, [sp, #144]	; 0x90
   21004:	ldr	sl, [r6, #24]
   21008:	ldrd	r4, [r6, #32]
   2100c:	bl	10f90 <dcgettext@plt>
   21010:	add	r8, fp, #8
   21014:	strd	r4, [sp, #8]
   21018:	mov	r4, #1
   2101c:	mov	r5, #0
   21020:	mov	r3, sl
   21024:	add	r1, fp, #4
   21028:	mov	r2, r8
   2102c:	strd	r4, [sp]
   21030:	str	r1, [sp, #24]
   21034:	str	r0, [sp, #16]
   21038:	mov	r0, #0
   2103c:	bl	1717c <__assert_fail@plt+0x5f70>
   21040:	mov	r2, #5
   21044:	ldr	r1, [pc, #3136]	; 21c8c <__assert_fail@plt+0x10a80>
   21048:	cmp	r0, #0
   2104c:	moveq	r3, r0
   21050:	ldrne	r3, [r6, #32]
   21054:	str	r0, [sp, #136]	; 0x88
   21058:	mov	r0, #0
   2105c:	str	r3, [sp, #140]	; 0x8c
   21060:	bl	10f90 <dcgettext@plt>
   21064:	bl	10f24 <printf@plt>
   21068:	ldr	r3, [fp, #104]	; 0x68
   2106c:	cmp	r3, #0
   21070:	beq	2179c <__assert_fail@plt+0x10590>
   21074:	add	r1, fp, #108	; 0x6c
   21078:	mov	r2, r7
   2107c:	add	r0, fp, #104	; 0x68
   21080:	bl	16c64 <__assert_fail@plt+0x5a58>
   21084:	mov	r1, r0
   21088:	ldr	r0, [pc, #3048]	; 21c78 <__assert_fail@plt+0x10a6c>
   2108c:	bl	10f24 <printf@plt>
   21090:	mov	r2, #5
   21094:	ldr	r1, [pc, #3060]	; 21c90 <__assert_fail@plt+0x10a84>
   21098:	mov	r0, #0
   2109c:	bl	10f90 <dcgettext@plt>
   210a0:	ldr	r3, [pc, #3052]	; 21c94 <__assert_fail@plt+0x10a88>
   210a4:	mov	r4, #0
   210a8:	ldr	r2, [r3]
   210ac:	mov	r3, r4
   210b0:	add	r2, r2, r2, lsl #1
   210b4:	mov	r5, r0
   210b8:	ldrd	r0, [r7, #32]
   210bc:	bl	58c00 <warn@@Base+0x3e30>
   210c0:	ldr	r1, [r7, #24]
   210c4:	mov	r2, r0
   210c8:	mov	r0, r5
   210cc:	bl	10f24 <printf@plt>
   210d0:	ldr	lr, [fp, #76]	; 0x4c
   210d4:	str	r4, [sp, #132]	; 0x84
   210d8:	cmp	lr, r4
   210dc:	beq	215d4 <__assert_fail@plt+0x103c8>
   210e0:	ldr	ip, [fp, #100]	; 0x64
   210e4:	cmp	ip, r4
   210e8:	beq	21780 <__assert_fail@plt+0x10574>
   210ec:	rsb	lr, lr, lr, lsl #3
   210f0:	ldr	r6, [r7, #32]
   210f4:	add	lr, ip, lr, lsl #3
   210f8:	cmp	ip, lr
   210fc:	ldr	r4, [r7, #36]	; 0x24
   21100:	bcs	21178 <__assert_fail@plt+0xff6c>
   21104:	str	r9, [sp, #28]
   21108:	str	r8, [sp, #48]	; 0x30
   2110c:	mov	r5, fp
   21110:	ldrd	r8, [sp, #88]	; 0x58
   21114:	ldrd	sl, [sp, #96]	; 0x60
   21118:	ldr	r3, [ip]
   2111c:	cmp	r3, #1
   21120:	bne	21158 <__assert_fail@plt+0xff4c>
   21124:	ldrd	r0, [r7, #16]
   21128:	ldrd	r2, [ip, #16]
   2112c:	cmp	r1, r3
   21130:	cmpeq	r0, r2
   21134:	bcc	21158 <__assert_fail@plt+0xff4c>
   21138:	adds	r8, r0, r6
   2113c:	adc	r9, r1, r4
   21140:	ldrd	r0, [ip, #40]	; 0x28
   21144:	adds	sl, r2, r0
   21148:	adc	fp, r3, r1
   2114c:	cmp	r9, fp
   21150:	cmpeq	r8, sl
   21154:	bls	21d50 <__assert_fail@plt+0x10b44>
   21158:	add	ip, ip, #56	; 0x38
   2115c:	cmp	ip, lr
   21160:	bcc	21118 <__assert_fail@plt+0xff0c>
   21164:	strd	r8, [sp, #88]	; 0x58
   21168:	ldr	r8, [sp, #48]	; 0x30
   2116c:	ldr	r9, [sp, #28]
   21170:	strd	sl, [sp, #96]	; 0x60
   21174:	mov	fp, r5
   21178:	ldr	r3, [r7, #24]
   2117c:	mov	r2, #5
   21180:	ldr	r1, [pc, #2832]	; 21c98 <__assert_fail@plt+0x10a8c>
   21184:	mov	r0, #0
   21188:	str	r3, [sp, #28]
   2118c:	bl	10f90 <dcgettext@plt>
   21190:	mov	r4, #1
   21194:	mov	r5, #0
   21198:	mov	sl, #0
   2119c:	strd	r4, [sp]
   211a0:	ldr	r3, [sp, #28]
   211a4:	str	r6, [sp, #8]
   211a8:	mov	r2, r8
   211ac:	ldr	r1, [sp, #24]
   211b0:	str	sl, [sp, #12]
   211b4:	str	r0, [sp, #16]
   211b8:	mov	r0, sl
   211bc:	bl	1717c <__assert_fail@plt+0x5f70>
   211c0:	subs	r4, r0, #0
   211c4:	str	r4, [sp, #28]
   211c8:	beq	2137c <__assert_fail@plt+0x10170>
   211cc:	ldr	r5, [pc, #2752]	; 21c94 <__assert_fail@plt+0x10a88>
   211d0:	mov	r0, r6
   211d4:	str	r6, [sp, #48]	; 0x30
   211d8:	ldr	r1, [r5]
   211dc:	add	r1, r1, r1, lsl #1
   211e0:	bl	586e0 <warn@@Base+0x3910>
   211e4:	mov	r1, #48	; 0x30
   211e8:	str	r0, [sp, #132]	; 0x84
   211ec:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   211f0:	ldr	r8, [r5]
   211f4:	add	r3, r8, r8, lsl #1
   211f8:	sub	r3, r6, r3
   211fc:	cmn	r4, r3
   21200:	str	r0, [sp, #128]	; 0x80
   21204:	bcs	212f8 <__assert_fail@plt+0x100ec>
   21208:	ldr	r6, [pc, #2700]	; 21c9c <__assert_fail@plt+0x10a90>
   2120c:	ldr	r5, [sp, #28]
   21210:	add	r4, r0, #48	; 0x30
   21214:	str	r9, [sp, #80]	; 0x50
   21218:	str	r7, [sp, #84]	; 0x54
   2121c:	str	fp, [sp, #104]	; 0x68
   21220:	strh	sl, [r4, #-48]	; 0xffffffd0
   21224:	strh	sl, [r4, #-32]	; 0xffffffe0
   21228:	strh	sl, [r4, #-16]
   2122c:	mov	r1, r8
   21230:	ldr	r3, [r6]
   21234:	mov	r0, r5
   21238:	blx	r3
   2123c:	ldr	r7, [pc, #2640]	; 21c94 <__assert_fail@plt+0x10a88>
   21240:	ldr	r3, [r6]
   21244:	add	r4, r4, #48	; 0x30
   21248:	ldr	r2, [r7]
   2124c:	add	r5, r5, r2
   21250:	strd	r0, [r4, #-88]	; 0xffffffa8
   21254:	mov	r1, r2
   21258:	mov	r0, r5
   2125c:	blx	r3
   21260:	ldr	r2, [r7]
   21264:	ldr	r3, [r6]
   21268:	add	r5, r5, r2
   2126c:	strd	r0, [r4, #-72]	; 0xffffffb8
   21270:	mov	r1, r2
   21274:	mov	r0, r5
   21278:	blx	r3
   2127c:	ldr	r8, [r7]
   21280:	ldr	r3, [sp, #152]	; 0x98
   21284:	ldr	r7, [r4, #-88]	; 0xffffffa8
   21288:	ldr	r2, [sp, #156]	; 0x9c
   2128c:	ldr	fp, [r4, #-84]	; 0xffffffac
   21290:	adds	r7, r7, r3
   21294:	adc	fp, fp, r2
   21298:	ldr	lr, [r4, #-72]	; 0xffffffb8
   2129c:	str	fp, [sp, #24]
   212a0:	ldr	fp, [sp, #48]	; 0x30
   212a4:	ldr	r9, [r4, #-68]	; 0xffffffbc
   212a8:	add	ip, r8, r8, lsl #1
   212ac:	adds	lr, lr, r3
   212b0:	sub	ip, fp, ip
   212b4:	ldr	fp, [sp, #28]
   212b8:	adc	r9, r9, r2
   212bc:	add	ip, fp, ip
   212c0:	add	r5, r5, r8
   212c4:	ldr	fp, [sp, #24]
   212c8:	str	r9, [r4, #-68]	; 0xffffffbc
   212cc:	str	fp, [r4, #-84]	; 0xffffffac
   212d0:	str	r7, [r4, #-88]	; 0xffffffa8
   212d4:	str	lr, [r4, #-72]	; 0xffffffb8
   212d8:	adds	r0, r0, r3
   212dc:	adc	r1, r1, r2
   212e0:	cmp	r5, ip
   212e4:	strd	r0, [r4, #-56]	; 0xffffffc8
   212e8:	bls	21220 <__assert_fail@plt+0x10014>
   212ec:	ldr	r9, [sp, #80]	; 0x50
   212f0:	ldr	r7, [sp, #84]	; 0x54
   212f4:	ldr	fp, [sp, #104]	; 0x68
   212f8:	ldr	r0, [sp, #28]
   212fc:	bl	10f54 <free@plt>
   21300:	ldr	sl, [fp, #84]	; 0x54
   21304:	ldr	r6, [fp, #96]	; 0x60
   21308:	add	r3, sl, sl, lsl #3
   2130c:	mov	r8, r6
   21310:	add	r3, r6, r3, lsl #3
   21314:	cmp	r6, r3
   21318:	strcc	r9, [sp, #84]	; 0x54
   2131c:	strcc	r7, [sp, #28]
   21320:	strcc	fp, [sp, #80]	; 0x50
   21324:	bcs	21370 <__assert_fail@plt+0x10164>
   21328:	ldr	r3, [r8, #4]
   2132c:	cmp	r3, #4
   21330:	bne	21354 <__assert_fail@plt+0x10148>
   21334:	ldr	r3, [r8, #44]	; 0x2c
   21338:	cmp	r3, sl
   2133c:	bcs	21354 <__assert_fail@plt+0x10148>
   21340:	add	r3, r3, r3, lsl #3
   21344:	ldr	r2, [sp, #28]
   21348:	add	r3, r6, r3, lsl #3
   2134c:	cmp	r2, r3
   21350:	beq	213ac <__assert_fail@plt+0x101a0>
   21354:	add	r3, sl, sl, lsl #3
   21358:	add	r8, r8, #72	; 0x48
   2135c:	add	r3, r6, r3, lsl #3
   21360:	cmp	r8, r3
   21364:	bcc	21328 <__assert_fail@plt+0x1011c>
   21368:	ldr	r9, [sp, #84]	; 0x54
   2136c:	ldr	fp, [sp, #80]	; 0x50
   21370:	ldr	r3, [sp, #132]	; 0x84
   21374:	cmp	r3, #0
   21378:	bne	218fc <__assert_fail@plt+0x106f0>
   2137c:	ldr	r0, [sp, #128]	; 0x80
   21380:	cmp	r0, #0
   21384:	beq	2138c <__assert_fail@plt+0x10180>
   21388:	bl	10f54 <free@plt>
   2138c:	ldr	r0, [sp, #136]	; 0x88
   21390:	cmp	r0, #0
   21394:	beq	2139c <__assert_fail@plt+0x10190>
   21398:	bl	10f54 <free@plt>
   2139c:	mov	r3, #0
   213a0:	str	r3, [sp, #128]	; 0x80
   213a4:	str	r3, [sp, #136]	; 0x88
   213a8:	b	20e4c <__assert_fail@plt+0xfc40>
   213ac:	add	r3, sp, #116	; 0x74
   213b0:	ldr	r2, [r8, #32]
   213b4:	ldr	r1, [r8, #24]
   213b8:	ldr	r0, [sp, #80]	; 0x50
   213bc:	str	r3, [sp]
   213c0:	add	r3, sp, #120	; 0x78
   213c4:	bl	18904 <__assert_fail@plt+0x76f8>
   213c8:	cmp	r0, #0
   213cc:	beq	21e4c <__assert_fail@plt+0x10c40>
   213d0:	ldr	r7, [sp, #116]	; 0x74
   213d4:	ldr	r2, [sp, #120]	; 0x78
   213d8:	add	r3, r7, r7, lsl #1
   213dc:	str	r2, [sp, #24]
   213e0:	add	r3, r2, r3, lsl #3
   213e4:	cmp	r2, r3
   213e8:	mov	r4, r2
   213ec:	bcs	215bc <__assert_fail@plt+0x103b0>
   213f0:	ldr	r3, [sp, #80]	; 0x50
   213f4:	str	r8, [sp, #104]	; 0x68
   213f8:	add	r3, r3, #66	; 0x42
   213fc:	str	r3, [sp, #48]	; 0x30
   21400:	b	214fc <__assert_fail@plt+0x102f0>
   21404:	mov	r3, r5
   21408:	mov	r2, r1
   2140c:	ldr	r0, [sp, #48]	; 0x30
   21410:	bl	16910 <__assert_fail@plt+0x5704>
   21414:	bl	11bb8 <__assert_fail@plt+0x9ac>
   21418:	add	r6, r6, r5, lsl #5
   2141c:	subs	r5, r0, #0
   21420:	beq	2186c <__assert_fail@plt+0x10660>
   21424:	mov	r2, #13
   21428:	ldr	r1, [pc, #2160]	; 21ca0 <__assert_fail@plt+0x10a94>
   2142c:	mov	r0, r5
   21430:	bl	111d0 <strncmp@plt>
   21434:	subs	fp, r0, #0
   21438:	bne	21560 <__assert_fail@plt+0x10354>
   2143c:	ldr	r3, [pc, #2128]	; 21c94 <__assert_fail@plt+0x10a88>
   21440:	ldrd	r8, [r4]
   21444:	ldr	sl, [r3]
   21448:	mov	r0, r8
   2144c:	mov	r3, fp
   21450:	mov	r1, r9
   21454:	add	r2, sl, sl, lsl #1
   21458:	bl	58c00 <warn@@Base+0x3e30>
   2145c:	ldr	r3, [sp, #132]	; 0x84
   21460:	cmp	r0, r3
   21464:	mov	r5, r0
   21468:	bcs	215a8 <__assert_fail@plt+0x1039c>
   2146c:	mov	r2, sl
   21470:	mov	r3, fp
   21474:	mov	r0, r8
   21478:	mov	r1, r9
   2147c:	bl	58c00 <warn@@Base+0x3e30>
   21480:	mov	r2, #3
   21484:	mov	r3, #0
   21488:	bl	58c00 <warn@@Base+0x3e30>
   2148c:	ldr	ip, [r6]
   21490:	ldr	lr, [r6, #4]
   21494:	add	r5, r5, r5, lsl #1
   21498:	ldrh	r6, [r6, #24]
   2149c:	lsl	r5, r5, #4
   214a0:	mov	r1, r3
   214a4:	ldr	r3, [r4, #16]
   214a8:	mov	r0, r2
   214ac:	ldr	r2, [r4, #20]
   214b0:	adds	r3, r3, ip
   214b4:	adc	r2, r2, lr
   214b8:	ldr	ip, [sp, #128]	; 0x80
   214bc:	cmp	r1, #0
   214c0:	cmpeq	r0, #1
   214c4:	add	lr, ip, r5
   214c8:	beq	21588 <__assert_fail@plt+0x1037c>
   214cc:	cmp	r1, #0
   214d0:	cmpeq	r0, #2
   214d4:	beq	21598 <__assert_fail@plt+0x1038c>
   214d8:	strh	r6, [ip, r5]
   214dc:	str	r3, [lr, #8]
   214e0:	str	r2, [lr, #12]
   214e4:	add	r3, r7, r7, lsl #1
   214e8:	ldr	r2, [sp, #24]
   214ec:	add	r4, r4, #24
   214f0:	add	r3, r2, r3, lsl #3
   214f4:	cmp	r4, r3
   214f8:	bcs	215b8 <__assert_fail@plt+0x103ac>
   214fc:	ldr	r3, [pc, #1892]	; 21c68 <__assert_fail@plt+0x10a5c>
   21500:	ldr	r1, [r4, #8]
   21504:	ldr	r5, [r4, #12]
   21508:	ldr	r3, [r3]
   2150c:	ldr	r6, [sp, #160]	; 0xa0
   21510:	cmp	r3, #0
   21514:	beq	21404 <__assert_fail@plt+0x101f8>
   21518:	uxtb	r0, r1
   2151c:	bl	11bb8 <__assert_fail@plt+0x9ac>
   21520:	lsr	r1, r1, #8
   21524:	orr	r1, r1, r5, lsl #24
   21528:	subs	r5, r0, #0
   2152c:	add	r6, r6, r1, lsl #5
   21530:	bne	21424 <__assert_fail@plt+0x10218>
   21534:	ldr	r1, [pc, #1896]	; 21ca4 <__assert_fail@plt+0x10a98>
   21538:	mov	r2, #5
   2153c:	bl	10f90 <dcgettext@plt>
   21540:	ldrb	r1, [r4, #8]
   21544:	mov	r5, r0
   21548:	mov	r0, r5
   2154c:	bl	54dd0 <warn@@Base>
   21550:	ldr	r3, [sp, #120]	; 0x78
   21554:	ldr	r7, [sp, #116]	; 0x74
   21558:	str	r3, [sp, #24]
   2155c:	b	214e4 <__assert_fail@plt+0x102d8>
   21560:	ldr	r1, [pc, #1856]	; 21ca8 <__assert_fail@plt+0x10a9c>
   21564:	mov	r2, #5
   21568:	mov	r0, #0
   2156c:	bl	10f90 <dcgettext@plt>
   21570:	mov	r1, r5
   21574:	bl	54dd0 <warn@@Base>
   21578:	ldr	r3, [sp, #120]	; 0x78
   2157c:	ldr	r7, [sp, #116]	; 0x74
   21580:	str	r3, [sp, #24]
   21584:	b	214e4 <__assert_fail@plt+0x102d8>
   21588:	strh	r6, [lr, #16]
   2158c:	str	r3, [lr, #24]
   21590:	str	r2, [lr, #28]
   21594:	b	214e4 <__assert_fail@plt+0x102d8>
   21598:	strh	r6, [lr, #32]
   2159c:	str	r3, [lr, #40]	; 0x28
   215a0:	str	r2, [lr, #44]	; 0x2c
   215a4:	b	214e4 <__assert_fail@plt+0x102d8>
   215a8:	mov	r0, fp
   215ac:	mov	r2, #5
   215b0:	ldr	r1, [pc, #1780]	; 21cac <__assert_fail@plt+0x10aa0>
   215b4:	b	2156c <__assert_fail@plt+0x10360>
   215b8:	ldr	r8, [sp, #104]	; 0x68
   215bc:	ldr	r0, [sp, #24]
   215c0:	bl	10f54 <free@plt>
   215c4:	ldr	r3, [sp, #80]	; 0x50
   215c8:	ldr	r6, [r3, #96]	; 0x60
   215cc:	ldr	sl, [r3, #84]	; 0x54
   215d0:	b	21354 <__assert_fail@plt+0x10148>
   215d4:	ldr	r6, [r7, #32]
   215d8:	b	21178 <__assert_fail@plt+0xff6c>
   215dc:	mov	r2, #5
   215e0:	ldr	r1, [pc, #1804]	; 21cf4 <__assert_fail@plt+0x10ae8>
   215e4:	bl	10f90 <dcgettext@plt>
   215e8:	ldr	sl, [fp, #84]	; 0x54
   215ec:	b	20ee8 <__assert_fail@plt+0xfcdc>
   215f0:	cmp	r4, #0
   215f4:	beq	21e20 <__assert_fail@plt+0x10c14>
   215f8:	ldr	r8, [fp, #108]	; 0x6c
   215fc:	ldr	r5, [r7]
   21600:	cmp	r5, r8
   21604:	bcs	21d6c <__assert_fail@plt+0x10b60>
   21608:	add	r5, r4, r5
   2160c:	mov	r0, r5
   21610:	mov	r2, #13
   21614:	ldr	r1, [pc, #1740]	; 21ce8 <__assert_fail@plt+0x10adc>
   21618:	bl	111d0 <strncmp@plt>
   2161c:	cmp	r0, #0
   21620:	bne	218f4 <__assert_fail@plt+0x106e8>
   21624:	mov	r0, r5
   21628:	add	r3, r0, #13
   2162c:	ldr	sl, [fp, #84]	; 0x54
   21630:	ldr	r6, [fp, #96]	; 0x60
   21634:	cmp	sl, #0
   21638:	beq	20e10 <__assert_fail@plt+0xfc04>
   2163c:	ldr	r5, [pc, #1644]	; 21cb0 <__assert_fail@plt+0x10aa4>
   21640:	mov	r4, #0
   21644:	mov	r8, r3
   21648:	str	r7, [sp, #24]
   2164c:	b	21698 <__assert_fail@plt+0x1048c>
   21650:	add	r7, r7, r2
   21654:	mov	r0, r7
   21658:	mov	r2, #18
   2165c:	mov	r1, r5
   21660:	bl	111d0 <strncmp@plt>
   21664:	cmp	r0, #0
   21668:	bne	21684 <__assert_fail@plt+0x10478>
   2166c:	mov	r0, r7
   21670:	add	r0, r0, #18
   21674:	mov	r1, r8
   21678:	bl	10f18 <strcmp@plt>
   2167c:	cmp	r0, #0
   21680:	beq	21860 <__assert_fail@plt+0x10654>
   21684:	add	r4, r4, #1
   21688:	cmp	sl, r4
   2168c:	add	r6, r6, #72	; 0x48
   21690:	mov	r3, sl
   21694:	bls	20fe4 <__assert_fail@plt+0xfdd8>
   21698:	cmp	r6, #0
   2169c:	beq	21720 <__assert_fail@plt+0x10514>
   216a0:	ldr	r7, [fp, #104]	; 0x68
   216a4:	cmp	r7, #0
   216a8:	beq	21758 <__assert_fail@plt+0x1054c>
   216ac:	ldr	r2, [r6]
   216b0:	ldr	r1, [fp, #108]	; 0x6c
   216b4:	cmp	r2, r1
   216b8:	bcc	21650 <__assert_fail@plt+0x10444>
   216bc:	mov	r2, #5
   216c0:	ldr	r1, [pc, #1572]	; 21cec <__assert_fail@plt+0x10ae0>
   216c4:	mov	r0, #0
   216c8:	bl	10f90 <dcgettext@plt>
   216cc:	mov	r2, #18
   216d0:	mov	r1, r5
   216d4:	bl	111d0 <strncmp@plt>
   216d8:	cmp	r0, #0
   216dc:	bne	21718 <__assert_fail@plt+0x1050c>
   216e0:	ldr	r7, [fp, #104]	; 0x68
   216e4:	cmp	r7, #0
   216e8:	beq	2176c <__assert_fail@plt+0x10560>
   216ec:	ldr	r2, [r6]
   216f0:	ldr	r1, [fp, #108]	; 0x6c
   216f4:	cmp	r2, r1
   216f8:	addcc	r7, r7, r2
   216fc:	ldrcc	sl, [fp, #84]	; 0x54
   21700:	bcc	2166c <__assert_fail@plt+0x10460>
   21704:	mov	r2, #5
   21708:	ldr	r1, [pc, #1500]	; 21cec <__assert_fail@plt+0x10ae0>
   2170c:	bl	10f90 <dcgettext@plt>
   21710:	ldr	sl, [fp, #84]	; 0x54
   21714:	b	21670 <__assert_fail@plt+0x10464>
   21718:	ldr	sl, [fp, #84]	; 0x54
   2171c:	b	21684 <__assert_fail@plt+0x10478>
   21720:	mov	r2, #5
   21724:	ldr	r1, [pc, #1368]	; 21c84 <__assert_fail@plt+0x10a78>
   21728:	mov	r0, r6
   2172c:	bl	10f90 <dcgettext@plt>
   21730:	mov	r2, #18
   21734:	mov	r1, r5
   21738:	bl	111d0 <strncmp@plt>
   2173c:	cmp	r0, #0
   21740:	bne	21718 <__assert_fail@plt+0x1050c>
   21744:	mov	r2, #5
   21748:	ldr	r1, [pc, #1332]	; 21c84 <__assert_fail@plt+0x10a78>
   2174c:	bl	10f90 <dcgettext@plt>
   21750:	ldr	sl, [fp, #84]	; 0x54
   21754:	b	21670 <__assert_fail@plt+0x10464>
   21758:	mov	r0, r7
   2175c:	mov	r2, #5
   21760:	ldr	r1, [pc, #1420]	; 21cf4 <__assert_fail@plt+0x10ae8>
   21764:	bl	10f90 <dcgettext@plt>
   21768:	b	216cc <__assert_fail@plt+0x104c0>
   2176c:	mov	r2, #5
   21770:	ldr	r1, [pc, #1404]	; 21cf4 <__assert_fail@plt+0x10ae8>
   21774:	bl	10f90 <dcgettext@plt>
   21778:	ldr	sl, [fp, #84]	; 0x54
   2177c:	b	21670 <__assert_fail@plt+0x10464>
   21780:	mov	r0, fp
   21784:	bl	1c34c <__assert_fail@plt+0xb140>
   21788:	cmp	r0, r4
   2178c:	beq	2137c <__assert_fail@plt+0x10170>
   21790:	ldr	ip, [fp, #100]	; 0x64
   21794:	ldr	lr, [fp, #76]	; 0x4c
   21798:	b	210ec <__assert_fail@plt+0xfee0>
   2179c:	ldr	r1, [r7]
   217a0:	ldr	r0, [pc, #1340]	; 21ce4 <__assert_fail@plt+0x10ad8>
   217a4:	bl	10f24 <printf@plt>
   217a8:	b	21090 <__assert_fail@plt+0xfe84>
   217ac:	ldr	sl, [r3]
   217b0:	cmp	sl, #0
   217b4:	beq	20e10 <__assert_fail@plt+0xfc04>
   217b8:	ldr	r8, [pc, #1324]	; 21cec <__assert_fail@plt+0x10ae0>
   217bc:	ldr	r5, [pc, #1260]	; 21cb0 <__assert_fail@plt+0x10aa4>
   217c0:	b	217e4 <__assert_fail@plt+0x105d8>
   217c4:	mov	r1, r5
   217c8:	bl	10f18 <strcmp@plt>
   217cc:	cmp	r0, #0
   217d0:	beq	21834 <__assert_fail@plt+0x10628>
   217d4:	ldr	sl, [sl]
   217d8:	cmp	sl, #0
   217dc:	beq	20e10 <__assert_fail@plt+0xfc04>
   217e0:	ldr	r2, [fp, #96]	; 0x60
   217e4:	ldr	r3, [sl, #4]
   217e8:	add	r3, r3, r3, lsl #3
   217ec:	adds	r6, r2, r3, lsl #3
   217f0:	beq	2183c <__assert_fail@plt+0x10630>
   217f4:	ldr	r0, [fp, #104]	; 0x68
   217f8:	cmp	r0, #0
   217fc:	beq	21850 <__assert_fail@plt+0x10644>
   21800:	ldr	r3, [r6]
   21804:	ldr	r2, [fp, #108]	; 0x6c
   21808:	cmp	r3, r2
   2180c:	addcc	r0, r0, r3
   21810:	bcc	217c4 <__assert_fail@plt+0x105b8>
   21814:	mov	r2, #5
   21818:	mov	r1, r8
   2181c:	mov	r0, #0
   21820:	bl	10f90 <dcgettext@plt>
   21824:	mov	r1, r5
   21828:	bl	10f18 <strcmp@plt>
   2182c:	cmp	r0, #0
   21830:	bne	217d4 <__assert_fail@plt+0x105c8>
   21834:	ldr	r3, [fp, #84]	; 0x54
   21838:	b	20fe8 <__assert_fail@plt+0xfddc>
   2183c:	mov	r2, #5
   21840:	ldr	r1, [pc, #1084]	; 21c84 <__assert_fail@plt+0x10a78>
   21844:	mov	r0, r6
   21848:	bl	10f90 <dcgettext@plt>
   2184c:	b	217c4 <__assert_fail@plt+0x105b8>
   21850:	mov	r2, #5
   21854:	ldr	r1, [pc, #1176]	; 21cf4 <__assert_fail@plt+0x10ae8>
   21858:	bl	10f90 <dcgettext@plt>
   2185c:	b	217c4 <__assert_fail@plt+0x105b8>
   21860:	ldr	r7, [sp, #24]
   21864:	mov	r3, sl
   21868:	b	20fe8 <__assert_fail@plt+0xfddc>
   2186c:	ldr	r1, [pc, #1072]	; 21ca4 <__assert_fail@plt+0x10a98>
   21870:	mov	r2, #5
   21874:	bl	10f90 <dcgettext@plt>
   21878:	ldrd	r2, [r4, #8]
   2187c:	mov	r5, r0
   21880:	ldr	r0, [sp, #48]	; 0x30
   21884:	bl	16910 <__assert_fail@plt+0x5704>
   21888:	mov	r1, r0
   2188c:	b	21548 <__assert_fail@plt+0x1033c>
   21890:	mov	r0, ip
   21894:	mov	r2, #5
   21898:	ldr	r1, [pc, #1100]	; 21cec <__assert_fail@plt+0x10ae0>
   2189c:	bl	10f90 <dcgettext@plt>
   218a0:	mov	r2, #22
   218a4:	ldr	r1, [pc, #976]	; 21c7c <__assert_fail@plt+0x10a70>
   218a8:	bl	111d0 <strncmp@plt>
   218ac:	ldr	r4, [fp, #104]	; 0x68
   218b0:	cmp	r0, #0
   218b4:	bne	215f0 <__assert_fail@plt+0x103e4>
   218b8:	cmp	r4, #0
   218bc:	beq	21e08 <__assert_fail@plt+0x10bfc>
   218c0:	ldr	r3, [r7]
   218c4:	ldr	r2, [fp, #108]	; 0x6c
   218c8:	cmp	r2, r3
   218cc:	addhi	r3, r4, r3
   218d0:	ldrhi	r6, [fp, #96]	; 0x60
   218d4:	ldrhi	sl, [fp, #84]	; 0x54
   218d8:	bhi	20ea8 <__assert_fail@plt+0xfc9c>
   218dc:	mov	r2, #5
   218e0:	ldr	r1, [pc, #1028]	; 21cec <__assert_fail@plt+0x10ae0>
   218e4:	bl	10f90 <dcgettext@plt>
   218e8:	ldr	r6, [fp, #96]	; 0x60
   218ec:	ldr	sl, [fp, #84]	; 0x54
   218f0:	b	20eac <__assert_fail@plt+0xfca0>
   218f4:	ldr	r3, [pc, #952]	; 21cb4 <__assert_fail@plt+0x10aa8>
   218f8:	b	2162c <__assert_fail@plt+0x10420>
   218fc:	ldr	r0, [sp, #164]	; 0xa4
   21900:	lsl	r0, r0, #5
   21904:	bl	5861c <warn@@Base+0x384c>
   21908:	ldr	lr, [sp, #164]	; 0xa4
   2190c:	cmp	lr, #0
   21910:	mov	r5, r0
   21914:	str	r0, [sp, #168]	; 0xa8
   21918:	beq	21974 <__assert_fail@plt+0x10768>
   2191c:	ldr	ip, [sp, #160]	; 0xa0
   21920:	add	lr, ip, lr, lsl #5
   21924:	add	r4, lr, #20
   21928:	add	ip, ip, #20
   2192c:	mov	lr, #0
   21930:	ldrd	r2, [ip, #-20]	; 0xffffffec
   21934:	orrs	r3, r2, r3
   21938:	beq	21968 <__assert_fail@plt+0x1075c>
   2193c:	ldrb	r3, [ip]
   21940:	and	r3, r3, #15
   21944:	cmp	r3, #2
   21948:	bne	21968 <__assert_fail@plt+0x1075c>
   2194c:	sub	r7, ip, #20
   21950:	add	r6, r5, lr, lsl #5
   21954:	ldm	r7!, {r0, r1, r2, r3}
   21958:	add	lr, lr, #1
   2195c:	stmia	r6!, {r0, r1, r2, r3}
   21960:	ldm	r7, {r0, r1, r2, r3}
   21964:	stm	r6, {r0, r1, r2, r3}
   21968:	add	ip, ip, #32
   2196c:	cmp	r4, ip
   21970:	bne	21930 <__assert_fail@plt+0x10724>
   21974:	ldr	r3, [pc, #828]	; 21cb8 <__assert_fail@plt+0x10aac>
   21978:	mov	r0, r5
   2197c:	mov	r1, lr
   21980:	mov	r2, #32
   21984:	str	lr, [sp, #172]	; 0xac
   21988:	bl	11170 <qsort@plt>
   2198c:	ldr	r3, [sp, #132]	; 0x84
   21990:	ldr	r7, [sp, #128]	; 0x80
   21994:	add	r3, r3, r3, lsl #1
   21998:	add	r3, r7, r3, lsl #4
   2199c:	cmp	r7, r3
   219a0:	bcs	21d20 <__assert_fail@plt+0x10b14>
   219a4:	add	r6, sp, #116	; 0x74
   219a8:	str	r9, [sp, #28]
   219ac:	str	fp, [sp, #24]
   219b0:	b	21ab4 <__assert_fail@plt+0x108a8>
   219b4:	ldr	r0, [sp, #24]
   219b8:	add	r2, r2, r2, lsl #3
   219bc:	ldrd	sl, [sp, #40]	; 0x28
   219c0:	ldr	r0, [r0, #96]	; 0x60
   219c4:	add	r2, r0, r2, lsl #3
   219c8:	ldr	r0, [r2, #16]
   219cc:	ldr	r2, [r2, #20]
   219d0:	adds	ip, r0, sl
   219d4:	adc	r2, r2, fp
   219d8:	str	ip, [sp, #72]	; 0x48
   219dc:	str	r2, [sp, #76]	; 0x4c
   219e0:	ldrd	sl, [sp, #72]	; 0x48
   219e4:	cmp	r9, fp
   219e8:	cmpeq	r8, sl
   219ec:	addhi	r3, r0, r3
   219f0:	bls	21bcc <__assert_fail@plt+0x109c0>
   219f4:	sub	r1, r3, r1
   219f8:	ldr	r3, [pc, #668]	; 21c9c <__assert_fail@plt+0x10a90>
   219fc:	add	r4, r4, r1
   21a00:	mov	r0, r4
   21a04:	ldr	r3, [r3]
   21a08:	mov	r1, #8
   21a0c:	blx	r3
   21a10:	ldr	r3, [pc, #636]	; 21c94 <__assert_fail@plt+0x10a88>
   21a14:	mov	r9, #0
   21a18:	str	r9, [sp, #56]	; 0x38
   21a1c:	str	r9, [sp, #64]	; 0x40
   21a20:	ldr	r2, [pc, #652]	; 21cb4 <__assert_fail@plt+0x10aa8>
   21a24:	mov	r5, r0
   21a28:	ldr	r0, [r3]
   21a2c:	and	r3, r1, #1
   21a30:	str	r3, [sp, #60]	; 0x3c
   21a34:	ldrd	sl, [sp, #56]	; 0x38
   21a38:	mul	r0, r0, r5
   21a3c:	orrs	ip, sl, fp
   21a40:	and	ip, r1, #2
   21a44:	str	ip, [sp, #68]	; 0x44
   21a48:	ldrd	sl, [sp, #64]	; 0x40
   21a4c:	ldr	ip, [pc, #616]	; 21cbc <__assert_fail@plt+0x10ab0>
   21a50:	ldr	r3, [pc, #616]	; 21cc0 <__assert_fail@plt+0x10ab4>
   21a54:	moveq	r3, r2
   21a58:	orrs	lr, sl, fp
   21a5c:	moveq	ip, r2
   21a60:	lsr	r8, r1, #16
   21a64:	uxth	r2, r1
   21a68:	str	r0, [sp, #4]
   21a6c:	str	ip, [sp]
   21a70:	mov	r1, r8
   21a74:	ldr	r0, [pc, #584]	; 21cc4 <__assert_fail@plt+0x10ab8>
   21a78:	bl	10f24 <printf@plt>
   21a7c:	cmp	r9, #0
   21a80:	cmpeq	r8, #1
   21a84:	beq	21c08 <__assert_fail@plt+0x109fc>
   21a88:	mov	r2, #5
   21a8c:	ldr	r1, [pc, #564]	; 21cc8 <__assert_fail@plt+0x10abc>
   21a90:	mov	r0, r9
   21a94:	bl	10f90 <dcgettext@plt>
   21a98:	bl	10f24 <printf@plt>
   21a9c:	ldrd	r2, [sp, #128]	; 0x80
   21aa0:	add	r7, r7, #48	; 0x30
   21aa4:	add	r3, r3, r3, lsl #1
   21aa8:	add	r3, r2, r3, lsl #4
   21aac:	cmp	r7, r3
   21ab0:	bcs	21d18 <__assert_fail@plt+0x10b0c>
   21ab4:	add	r3, sp, #120	; 0x78
   21ab8:	str	r3, [sp, #20]
   21abc:	str	r6, [sp, #16]
   21ac0:	ldrd	r0, [r7, #8]
   21ac4:	ldr	ip, [sp, #180]	; 0xb4
   21ac8:	ldr	r4, [pc, #508]	; 21ccc <__assert_fail@plt+0x10ac0>
   21acc:	strd	r0, [sp, #8]
   21ad0:	ldr	r0, [sp, #24]
   21ad4:	ldrh	r1, [r7]
   21ad8:	ldr	r3, [sp, #176]	; 0xb0
   21adc:	str	ip, [sp]
   21ae0:	str	r1, [sp, #4]
   21ae4:	ldr	r2, [sp, #172]	; 0xac
   21ae8:	ldr	r1, [sp, #168]	; 0xa8
   21aec:	ldrh	r0, [r0, #66]	; 0x42
   21af0:	bl	16dac <__assert_fail@plt+0x5ba0>
   21af4:	ldr	r3, [r4]
   21af8:	mov	r2, #2
   21afc:	mov	r1, #1
   21b00:	ldr	r0, [pc, #456]	; 21cd0 <__assert_fail@plt+0x10ac4>
   21b04:	bl	10fcc <fwrite@plt>
   21b08:	ldr	r0, [sp, #116]	; 0x74
   21b0c:	cmp	r0, #0
   21b10:	beq	21b28 <__assert_fail@plt+0x1091c>
   21b14:	ldr	r1, [r4]
   21b18:	bl	111c4 <fputs@plt>
   21b1c:	ldrd	r2, [sp, #120]	; 0x78
   21b20:	orrs	r1, r2, r3
   21b24:	bne	21d08 <__assert_fail@plt+0x10afc>
   21b28:	ldr	r3, [pc, #412]	; 21ccc <__assert_fail@plt+0x10ac0>
   21b2c:	mov	r2, #4
   21b30:	mov	r4, r3
   21b34:	mov	r1, #1
   21b38:	ldr	r3, [r3]
   21b3c:	ldr	r0, [pc, #400]	; 21cd4 <__assert_fail@plt+0x10ac8>
   21b40:	bl	10fcc <fwrite@plt>
   21b44:	mov	r2, #4
   21b48:	ldrd	r0, [r7, #8]
   21b4c:	bl	14244 <__assert_fail@plt+0x3038>
   21b50:	ldr	r1, [r4]
   21b54:	mov	r0, #45	; 0x2d
   21b58:	bl	11140 <fputc@plt>
   21b5c:	mov	r2, #4
   21b60:	ldrd	r0, [r7, #24]
   21b64:	bl	14244 <__assert_fail@plt+0x3038>
   21b68:	ldr	r1, [r7, #40]	; 0x28
   21b6c:	ldr	r3, [sp, #152]	; 0x98
   21b70:	ldr	r0, [pc, #352]	; 21cd8 <__assert_fail@plt+0x10acc>
   21b74:	sub	r1, r1, r3
   21b78:	bl	10f24 <printf@plt>
   21b7c:	ldr	r4, [sp, #136]	; 0x88
   21b80:	cmp	r4, #0
   21b84:	beq	21a9c <__assert_fail@plt+0x10890>
   21b88:	ldr	r3, [r7, #40]	; 0x28
   21b8c:	ldr	r1, [sp, #144]	; 0x90
   21b90:	ldrh	r2, [r7, #32]
   21b94:	ldr	ip, [r7, #44]	; 0x2c
   21b98:	ldr	r0, [sp, #148]	; 0x94
   21b9c:	subs	lr, r3, r1
   21ba0:	sbc	r0, ip, r0
   21ba4:	cmp	r2, #0
   21ba8:	str	lr, [sp, #40]	; 0x28
   21bac:	ldr	r8, [sp, #140]	; 0x8c
   21bb0:	str	r0, [sp, #44]	; 0x2c
   21bb4:	mov	r9, #0
   21bb8:	bne	219b4 <__assert_fail@plt+0x107a8>
   21bbc:	ldrd	sl, [sp, #40]	; 0x28
   21bc0:	cmp	r9, fp
   21bc4:	cmpeq	r8, sl
   21bc8:	bhi	219f4 <__assert_fail@plt+0x107e8>
   21bcc:	mov	r2, #5
   21bd0:	ldr	r1, [pc, #260]	; 21cdc <__assert_fail@plt+0x10ad0>
   21bd4:	mov	r0, #0
   21bd8:	bl	10f90 <dcgettext@plt>
   21bdc:	ldr	ip, [sp, #128]	; 0x80
   21be0:	ldr	r1, [r7, #40]	; 0x28
   21be4:	sub	ip, r7, ip
   21be8:	asr	ip, ip, #4
   21bec:	add	r3, ip, ip, lsl #2
   21bf0:	add	r3, r3, r3, lsl #4
   21bf4:	add	r3, r3, r3, lsl #8
   21bf8:	add	r3, r3, r3, lsl #16
   21bfc:	add	r2, ip, r3, lsl #1
   21c00:	bl	54dd0 <warn@@Base>
   21c04:	b	21a9c <__assert_fail@plt+0x10890>
   21c08:	ldr	r3, [pc, #132]	; 21c94 <__assert_fail@plt+0x10a88>
   21c0c:	add	r0, r4, #8
   21c10:	str	r9, [sp, #112]	; 0x70
   21c14:	ldr	r2, [r3]
   21c18:	ldr	r3, [sp, #136]	; 0x88
   21c1c:	mla	r5, r2, r5, r4
   21c20:	ldr	r2, [sp, #140]	; 0x8c
   21c24:	add	r5, r5, #8
   21c28:	add	r3, r3, r2
   21c2c:	cmp	r5, r3
   21c30:	movcs	r5, r3
   21c34:	cmp	r5, r0
   21c38:	bls	21a9c <__assert_fail@plt+0x10890>
   21c3c:	mov	r1, r9
   21c40:	ldr	fp, [sp, #24]
   21c44:	b	21c4c <__assert_fail@plt+0x10a40>
   21c48:	ldr	r1, [sp, #112]	; 0x70
   21c4c:	mov	r3, r5
   21c50:	add	r2, sp, #112	; 0x70
   21c54:	bl	3c39c <__assert_fail@plt+0x2b190>
   21c58:	cmp	r5, r0
   21c5c:	bhi	21c48 <__assert_fail@plt+0x10a3c>
   21c60:	str	fp, [sp, #24]
   21c64:	b	21a9c <__assert_fail@plt+0x10890>
   21c68:	andeq	sl, r9, r8, lsr r4
   21c6c:	andeq	r6, r6, r4, ror #15
   21c70:	andeq	r5, r6, r8, lsr #14
   21c74:	andeq	r6, r6, r0, lsl #20
   21c78:	muleq	r6, r8, r8
   21c7c:	andeq	r6, r6, r8, asr r8
   21c80:	andeq	r6, r6, r0, ror r8
   21c84:	muleq	r6, r4, r8
   21c88:	andeq	r6, r6, r0, lsr #17
   21c8c:	andeq	r6, r6, ip, lsr #17
   21c90:	muleq	r6, ip, fp
   21c94:	andeq	lr, r9, ip, lsr #26
   21c98:	andeq	r6, r6, r0, asr #17
   21c9c:	andeq	lr, r9, ip, asr sp
   21ca0:	ldrdeq	r6, [r6], -r0
   21ca4:	andeq	r6, r6, r8, asr #19
   21ca8:	andeq	r6, r6, r0, ror #17
   21cac:	andeq	r6, r6, ip, lsl #18
   21cb0:	andeq	r6, r6, r4, asr #16
   21cb4:	andeq	fp, r6, ip, ror #2
   21cb8:	andeq	r2, r1, r4, lsl #24
   21cbc:	ldrdeq	r6, [r6], -r8
   21cc0:	andeq	r6, r6, ip, asr #15
   21cc4:	andeq	r6, r6, r8, lsl #19
   21cc8:			; <UNDEFINED> instruction: 0x000669b4
   21ccc:	andeq	sl, r9, ip, lsr #8
   21cd0:	andeq	r6, r6, r8, lsr r9
   21cd4:	andeq	r6, r6, r4, asr #18
   21cd8:	andeq	r6, r6, ip, asr #18
   21cdc:	andeq	r6, r6, r0, ror #18
   21ce0:	andeq	r6, r6, ip, lsr r9
   21ce4:	andeq	ip, r6, r8, ror r0
   21ce8:	andeq	r6, r6, r8, lsl #17
   21cec:	andeq	r3, r6, ip
   21cf0:	andeq	r6, r6, r4, lsl r8
   21cf4:	muleq	r6, ip, r8
   21cf8:	andeq	r9, r5, ip, lsr #4
   21cfc:	strdeq	r1, [r0], -r7
   21d00:	andeq	r2, r6, r8, asr pc
   21d04:	strdeq	r6, [r6], -r0
   21d08:	mov	r1, r2
   21d0c:	ldr	r0, [pc, #-52]	; 21ce0 <__assert_fail@plt+0x10ad4>
   21d10:	bl	10f24 <printf@plt>
   21d14:	b	21b28 <__assert_fail@plt+0x1091c>
   21d18:	ldr	r9, [sp, #28]
   21d1c:	ldr	fp, [sp, #24]
   21d20:	ldr	r0, [sp, #168]	; 0xa8
   21d24:	bl	10f54 <free@plt>
   21d28:	b	2137c <__assert_fail@plt+0x10170>
   21d2c:	ldr	r1, [r7]
   21d30:	ldr	r0, [pc, #-84]	; 21ce4 <__assert_fail@plt+0x10ad8>
   21d34:	bl	10f24 <printf@plt>
   21d38:	b	20e4c <__assert_fail@plt+0xfc40>
   21d3c:	mov	r0, r4
   21d40:	mov	r2, #5
   21d44:	ldr	r1, [pc, #-88]	; 21cf4 <__assert_fail@plt+0x10ae8>
   21d48:	bl	10f90 <dcgettext@plt>
   21d4c:	b	218a0 <__assert_fail@plt+0x10694>
   21d50:	strd	r8, [sp, #88]	; 0x58
   21d54:	strd	sl, [sp, #96]	; 0x60
   21d58:	ldr	r8, [sp, #48]	; 0x30
   21d5c:	ldr	r9, [sp, #28]
   21d60:	mov	fp, r5
   21d64:	strd	r2, [sp, #152]	; 0x98
   21d68:	b	21178 <__assert_fail@plt+0xff6c>
   21d6c:	mov	r2, #5
   21d70:	ldr	r1, [pc, #-140]	; 21cec <__assert_fail@plt+0x10ae0>
   21d74:	mov	r0, #0
   21d78:	bl	10f90 <dcgettext@plt>
   21d7c:	mov	r2, #13
   21d80:	ldr	r1, [pc, #-160]	; 21ce8 <__assert_fail@plt+0x10adc>
   21d84:	bl	111d0 <strncmp@plt>
   21d88:	cmp	r0, #0
   21d8c:	bne	218f4 <__assert_fail@plt+0x106e8>
   21d90:	ldr	r4, [fp, #104]	; 0x68
   21d94:	cmp	r4, #0
   21d98:	beq	21e3c <__assert_fail@plt+0x10c30>
   21d9c:	ldr	r5, [r7]
   21da0:	ldr	r3, [fp, #108]	; 0x6c
   21da4:	cmp	r5, r3
   21da8:	addcc	r5, r4, r5
   21dac:	bcc	21624 <__assert_fail@plt+0x10418>
   21db0:	mov	r2, #5
   21db4:	ldr	r1, [pc, #-208]	; 21cec <__assert_fail@plt+0x10ae0>
   21db8:	bl	10f90 <dcgettext@plt>
   21dbc:	b	21628 <__assert_fail@plt+0x1041c>
   21dc0:	mov	r3, #1
   21dc4:	str	r3, [sp, #108]	; 0x6c
   21dc8:	mov	r2, #5
   21dcc:	ldr	r1, [pc, #-228]	; 21cf0 <__assert_fail@plt+0x10ae4>
   21dd0:	mov	r0, #0
   21dd4:	bl	10f90 <dcgettext@plt>
   21dd8:	bl	10f24 <printf@plt>
   21ddc:	ldr	r0, [sp, #160]	; 0xa0
   21de0:	cmp	r0, #0
   21de4:	beq	21dec <__assert_fail@plt+0x10be0>
   21de8:	bl	10f54 <free@plt>
   21dec:	ldr	r0, [sp, #176]	; 0xb0
   21df0:	cmp	r0, #0
   21df4:	beq	21dfc <__assert_fail@plt+0x10bf0>
   21df8:	bl	10f54 <free@plt>
   21dfc:	ldr	r0, [sp, #108]	; 0x6c
   21e00:	add	sp, sp, #188	; 0xbc
   21e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e08:	mov	r2, #5
   21e0c:	ldr	r1, [pc, #-288]	; 21cf4 <__assert_fail@plt+0x10ae8>
   21e10:	bl	10f90 <dcgettext@plt>
   21e14:	ldr	r6, [fp, #96]	; 0x60
   21e18:	ldr	sl, [fp, #84]	; 0x54
   21e1c:	b	20eac <__assert_fail@plt+0xfca0>
   21e20:	mov	r0, r4
   21e24:	mov	r2, #5
   21e28:	ldr	r1, [pc, #-316]	; 21cf4 <__assert_fail@plt+0x10ae8>
   21e2c:	bl	10f90 <dcgettext@plt>
   21e30:	b	21d7c <__assert_fail@plt+0x10b70>
   21e34:	bl	17bf4 <__assert_fail@plt+0x69e8>
   21e38:	b	20cd0 <__assert_fail@plt+0xfac4>
   21e3c:	mov	r2, #5
   21e40:	ldr	r1, [pc, #-340]	; 21cf4 <__assert_fail@plt+0x10ae8>
   21e44:	bl	10f90 <dcgettext@plt>
   21e48:	b	21628 <__assert_fail@plt+0x1041c>
   21e4c:	mov	r4, r0
   21e50:	ldr	r0, [sp, #128]	; 0x80
   21e54:	ldr	r9, [sp, #84]	; 0x54
   21e58:	ldr	fp, [sp, #80]	; 0x50
   21e5c:	bl	10f54 <free@plt>
   21e60:	str	r4, [sp, #128]	; 0x80
   21e64:	str	r4, [sp, #132]	; 0x84
   21e68:	b	2138c <__assert_fail@plt+0x10180>
   21e6c:	ldr	r3, [pc, #-380]	; 21cf8 <__assert_fail@plt+0x10aec>
   21e70:	ldr	r2, [pc, #-380]	; 21cfc <__assert_fail@plt+0x10af0>
   21e74:	ldr	r1, [pc, #-380]	; 21d00 <__assert_fail@plt+0x10af4>
   21e78:	ldr	r0, [pc, #-380]	; 21d04 <__assert_fail@plt+0x10af8>
   21e7c:	bl	1120c <__assert_fail@plt>
   21e80:	cmp	r1, #0
   21e84:	beq	22364 <__assert_fail@plt+0x11158>
   21e88:	ldr	r1, [pc, #1256]	; 22378 <__assert_fail@plt+0x1116c>
   21e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e90:	sub	sp, sp, #116	; 0x74
   21e94:	ldrd	sl, [r1, #120]	; 0x78
   21e98:	orrs	r1, sl, fp
   21e9c:	beq	2213c <__assert_fail@plt+0x10f30>
   21ea0:	str	r3, [sp, #44]	; 0x2c
   21ea4:	ldr	r3, [sp, #152]	; 0x98
   21ea8:	mov	r6, #0
   21eac:	add	r5, r3, #1
   21eb0:	str	r2, [sp, #48]	; 0x30
   21eb4:	lsl	r5, r5, #1
   21eb8:	mov	r3, fp
   21ebc:	mov	r2, sl
   21ec0:	stm	sp, {r5, r6}
   21ec4:	mov	r9, r0
   21ec8:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   21ecc:	mov	r2, #5
   21ed0:	ldr	r1, [pc, #1188]	; 2237c <__assert_fail@plt+0x11170>
   21ed4:	add	fp, r9, #4
   21ed8:	add	sl, r9, #8
   21edc:	mov	r8, #1
   21ee0:	mov	r4, r0
   21ee4:	mov	r0, r6
   21ee8:	bl	10f90 <dcgettext@plt>
   21eec:	sub	r3, r5, #2
   21ef0:	add	r3, r3, r4
   21ef4:	mov	r5, #0
   21ef8:	mov	r4, #2
   21efc:	mov	r1, fp
   21f00:	strd	r4, [sp]
   21f04:	mov	r2, sl
   21f08:	str	r8, [sp, #8]
   21f0c:	str	r6, [sp, #12]
   21f10:	str	r0, [sp, #16]
   21f14:	add	r0, sp, #72	; 0x48
   21f18:	bl	1717c <__assert_fail@plt+0x5f70>
   21f1c:	cmp	r0, r6
   21f20:	beq	2213c <__assert_fail@plt+0x10f30>
   21f24:	ldr	r5, [pc, #1108]	; 22380 <__assert_fail@plt+0x11174>
   21f28:	add	r0, sp, #72	; 0x48
   21f2c:	mov	r1, #2
   21f30:	ldr	r3, [r5]
   21f34:	blx	r3
   21f38:	uxth	r1, r0
   21f3c:	cmp	r1, r6
   21f40:	str	r0, [sp, #24]
   21f44:	str	r1, [sp, #28]
   21f48:	beq	2213c <__assert_fail@plt+0x10f30>
   21f4c:	ldr	r2, [sp, #160]	; 0xa0
   21f50:	ldr	r3, [pc, #1068]	; 22384 <__assert_fail@plt+0x11178>
   21f54:	ldr	r2, [r2]
   21f58:	subs	r3, r1, r3
   21f5c:	movne	r3, #1
   21f60:	cmp	r2, r6
   21f64:	moveq	r3, r6
   21f68:	cmp	r3, r6
   21f6c:	streq	r3, [sp, #40]	; 0x28
   21f70:	bne	2218c <__assert_fail@plt+0x10f80>
   21f74:	ldr	r3, [pc, #1020]	; 22378 <__assert_fail@plt+0x1116c>
   21f78:	ldrd	r2, [r3, #8]
   21f7c:	orrs	r1, r2, r3
   21f80:	beq	2213c <__assert_fail@plt+0x10f30>
   21f84:	mov	r6, #16
   21f88:	mov	r7, #0
   21f8c:	mov	r0, r9
   21f90:	strd	r6, [sp]
   21f94:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   21f98:	str	sl, [sp, #24]
   21f9c:	str	r0, [sp, #32]
   21fa0:	mov	r2, #5
   21fa4:	ldr	r1, [pc, #988]	; 22388 <__assert_fail@plt+0x1117c>
   21fa8:	mov	r0, #0
   21fac:	bl	10f90 <dcgettext@plt>
   21fb0:	mov	r2, #1
   21fb4:	mov	r3, #0
   21fb8:	ldr	r6, [sp, #32]
   21fbc:	mov	r8, #0
   21fc0:	mov	r9, #16
   21fc4:	strd	r2, [sp, #8]
   21fc8:	str	r9, [sp]
   21fcc:	str	r8, [sp, #4]
   21fd0:	mov	r3, r6
   21fd4:	ldr	r2, [sp, #24]
   21fd8:	mov	r1, fp
   21fdc:	str	r0, [sp, #16]
   21fe0:	add	r0, sp, #76	; 0x4c
   21fe4:	bl	1717c <__assert_fail@plt+0x5f70>
   21fe8:	cmp	r0, r8
   21fec:	beq	220dc <__assert_fail@plt+0x10ed0>
   21ff0:	ldr	r3, [r5]
   21ff4:	mov	r1, #4
   21ff8:	add	r0, sp, #84	; 0x54
   21ffc:	blx	r3
   22000:	ldr	r3, [r5]
   22004:	mov	r1, #4
   22008:	add	r7, sp, #92	; 0x5c
   2200c:	mov	r4, r0
   22010:	add	r0, sp, #88	; 0x58
   22014:	blx	r3
   22018:	add	r4, r6, r4
   2201c:	str	r0, [sp, #36]	; 0x24
   22020:	mov	r2, #5
   22024:	ldr	r1, [pc, #864]	; 2238c <__assert_fail@plt+0x11180>
   22028:	mov	r0, #0
   2202c:	bl	10f90 <dcgettext@plt>
   22030:	mov	r2, #1
   22034:	mov	r3, #0
   22038:	mov	r1, fp
   2203c:	strd	r2, [sp, #8]
   22040:	str	r9, [sp]
   22044:	mov	r3, r4
   22048:	str	r8, [sp, #4]
   2204c:	ldr	r2, [sp, #24]
   22050:	str	r0, [sp, #16]
   22054:	mov	r0, r7
   22058:	bl	1717c <__assert_fail@plt+0x5f70>
   2205c:	mov	r1, #2
   22060:	subs	r3, r0, #0
   22064:	add	r0, sp, #98	; 0x62
   22068:	beq	22148 <__assert_fail@plt+0x10f3c>
   2206c:	ldr	r3, [r5]
   22070:	blx	r3
   22074:	ldr	r2, [r5]
   22078:	mov	r1, #4
   2207c:	uxth	sl, r0
   22080:	add	r0, sp, #104	; 0x68
   22084:	blx	r2
   22088:	ldr	r2, [r5]
   2208c:	mov	r1, #4
   22090:	mov	r6, r0
   22094:	add	r0, sp, #100	; 0x64
   22098:	blx	r2
   2209c:	ldr	r3, [sp, #28]
   220a0:	add	r4, r4, r6
   220a4:	cmp	r3, sl
   220a8:	beq	22154 <__assert_fail@plt+0x10f48>
   220ac:	cmp	r6, #0
   220b0:	bne	22020 <__assert_fail@plt+0x10e14>
   220b4:	ldr	r3, [sp, #36]	; 0x24
   220b8:	ldr	r2, [sp, #32]
   220bc:	cmp	r3, #0
   220c0:	add	r3, r2, r3
   220c4:	str	r3, [sp, #32]
   220c8:	bne	21fa0 <__assert_fail@plt+0x10d94>
   220cc:	ldr	r3, [sp, #28]
   220d0:	mov	r7, sl
   220d4:	cmp	r3, sl
   220d8:	beq	22158 <__assert_fail@plt+0x10f4c>
   220dc:	ldr	r3, [sp, #28]
   220e0:	ldr	r2, [sp, #40]	; 0x28
   220e4:	lsl	r3, r3, #17
   220e8:	cmp	r2, #0
   220ec:	lsr	r3, r3, #17
   220f0:	bne	220fc <__assert_fail@plt+0x10ef0>
   220f4:	cmp	r3, #1
   220f8:	beq	2213c <__assert_fail@plt+0x10f30>
   220fc:	ldr	r2, [sp, #40]	; 0x28
   22100:	cmp	r2, r3
   22104:	bcs	2213c <__assert_fail@plt+0x10f30>
   22108:	mov	r2, #5
   2210c:	ldr	r1, [pc, #636]	; 22390 <__assert_fail@plt+0x11184>
   22110:	mov	r0, #0
   22114:	bl	10f90 <dcgettext@plt>
   22118:	b	22140 <__assert_fail@plt+0x10f34>
   2211c:	ldr	r3, [sp, #32]
   22120:	uxth	r0, r0
   22124:	cmp	r3, #1
   22128:	cmpeq	r0, #1
   2212c:	str	r8, [sp, #40]	; 0x28
   22130:	ldr	r9, [sp, #68]	; 0x44
   22134:	ldr	r7, [sp, #64]	; 0x40
   22138:	bne	222cc <__assert_fail@plt+0x110c0>
   2213c:	mov	r0, #0
   22140:	add	sp, sp, #116	; 0x74
   22144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22148:	mov	r0, r3
   2214c:	mov	sl, r3
   22150:	b	220b4 <__assert_fail@plt+0x10ea8>
   22154:	mov	r7, sl
   22158:	ldr	r3, [sp, #44]	; 0x2c
   2215c:	mov	r2, #0
   22160:	cmp	r3, r0
   22164:	ldr	r3, [sp, #164]	; 0xa4
   22168:	str	r2, [r3]
   2216c:	ldr	r3, [sp, #168]	; 0xa8
   22170:	strh	r7, [r3]
   22174:	bhi	22358 <__assert_fail@plt+0x1114c>
   22178:	mov	r0, r2
   2217c:	ldr	r1, [pc, #524]	; 22390 <__assert_fail@plt+0x11184>
   22180:	mov	r2, #5
   22184:	bl	10f90 <dcgettext@plt>
   22188:	b	22140 <__assert_fail@plt+0x10f34>
   2218c:	ldr	r3, [pc, #484]	; 22378 <__assert_fail@plt+0x1116c>
   22190:	ldrd	r2, [r3, #24]
   22194:	orrs	r1, r2, r3
   22198:	streq	r6, [sp, #40]	; 0x28
   2219c:	beq	21f74 <__assert_fail@plt+0x10d68>
   221a0:	ldr	r0, [sp, #28]
   221a4:	mov	r1, #20
   221a8:	mov	ip, r6
   221ac:	lsl	r4, r0, #17
   221b0:	stm	sp, {r1, ip}
   221b4:	mov	r0, r9
   221b8:	str	r6, [sp, #40]	; 0x28
   221bc:	str	r8, [sp, #36]	; 0x24
   221c0:	str	r6, [sp, #52]	; 0x34
   221c4:	str	r6, [sp, #60]	; 0x3c
   221c8:	str	r1, [sp, #56]	; 0x38
   221cc:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   221d0:	lsr	r3, r4, #17
   221d4:	str	r3, [sp, #32]
   221d8:	add	r3, sp, #92	; 0x5c
   221dc:	mov	r4, r3
   221e0:	ldr	r8, [sp, #40]	; 0x28
   221e4:	str	r9, [sp, #68]	; 0x44
   221e8:	mov	r6, r0
   221ec:	b	22260 <__assert_fail@plt+0x11054>
   221f0:	ldr	r3, [r5]
   221f4:	blx	r3
   221f8:	ldr	r2, [r5]
   221fc:	mov	r1, #4
   22200:	uxth	r9, r0
   22204:	add	r0, sp, #104	; 0x68
   22208:	blx	r2
   2220c:	ldr	r2, [r5]
   22210:	mov	r1, #4
   22214:	str	r0, [sp, #64]	; 0x40
   22218:	add	r0, sp, #108	; 0x6c
   2221c:	blx	r2
   22220:	ldr	r2, [r5]
   22224:	mov	r1, #2
   22228:	mov	r7, r0
   2222c:	add	r0, sp, #94	; 0x5e
   22230:	blx	r2
   22234:	lsl	r2, r9, #17
   22238:	ldr	r3, [sp, #32]
   2223c:	lsr	r2, r2, #17
   22240:	cmp	r2, r8
   22244:	movcs	r8, r2
   22248:	cmp	r9, r3
   2224c:	add	r1, r6, r7
   22250:	beq	2211c <__assert_fail@plt+0x10f10>
   22254:	cmp	r7, #0
   22258:	mov	r6, r1
   2225c:	beq	2236c <__assert_fail@plt+0x11160>
   22260:	mov	r2, #5
   22264:	ldr	r1, [pc, #296]	; 22394 <__assert_fail@plt+0x11188>
   22268:	mov	r0, #0
   2226c:	bl	10f90 <dcgettext@plt>
   22270:	ldr	r3, [sp, #36]	; 0x24
   22274:	mov	r1, fp
   22278:	str	r3, [sp, #8]
   2227c:	ldr	r3, [sp, #52]	; 0x34
   22280:	mov	r2, sl
   22284:	str	r3, [sp, #12]
   22288:	ldr	r3, [sp, #56]	; 0x38
   2228c:	str	r3, [sp]
   22290:	ldr	r3, [sp, #60]	; 0x3c
   22294:	str	r3, [sp, #4]
   22298:	mov	r3, r6
   2229c:	str	r0, [sp, #16]
   222a0:	mov	r0, r4
   222a4:	bl	1717c <__assert_fail@plt+0x5f70>
   222a8:	mov	r1, #2
   222ac:	cmp	r0, #0
   222b0:	add	r0, sp, #96	; 0x60
   222b4:	bne	221f0 <__assert_fail@plt+0x10fe4>
   222b8:	ldr	r7, [sp, #32]
   222bc:	str	r8, [sp, #40]	; 0x28
   222c0:	cmp	r7, #0
   222c4:	ldr	r9, [sp, #68]	; 0x44
   222c8:	bne	21f74 <__assert_fail@plt+0x10d68>
   222cc:	mov	r2, #5
   222d0:	ldr	r1, [pc, #192]	; 22398 <__assert_fail@plt+0x1118c>
   222d4:	mov	r0, #0
   222d8:	bl	10f90 <dcgettext@plt>
   222dc:	add	r3, r6, r7
   222e0:	mov	r6, #1
   222e4:	mov	r7, #0
   222e8:	mov	r2, sl
   222ec:	strd	r6, [sp, #8]
   222f0:	mov	r6, #8
   222f4:	mov	r7, #0
   222f8:	mov	r1, fp
   222fc:	strd	r6, [sp]
   22300:	str	r0, [sp, #16]
   22304:	mov	r0, r4
   22308:	bl	1717c <__assert_fail@plt+0x5f70>
   2230c:	cmp	r0, #0
   22310:	beq	21f74 <__assert_fail@plt+0x10d68>
   22314:	ldr	r3, [r5]
   22318:	mov	r0, r4
   2231c:	mov	r1, #4
   22320:	blx	r3
   22324:	ldr	r3, [sp, #156]	; 0x9c
   22328:	ldr	r3, [r3]
   2232c:	cmp	r0, r3
   22330:	beq	21f74 <__assert_fail@plt+0x10d68>
   22334:	ldr	r3, [sp, #24]
   22338:	ldr	r2, [sp, #44]	; 0x2c
   2233c:	tst	r3, #32768	; 0x8000
   22340:	movne	r3, #1
   22344:	moveq	r3, #2
   22348:	cmp	r0, r2
   2234c:	ldr	r2, [sp, #164]	; 0xa4
   22350:	str	r3, [r2]
   22354:	bcs	22108 <__assert_fail@plt+0x10efc>
   22358:	ldr	r3, [sp, #48]	; 0x30
   2235c:	add	r0, r3, r0
   22360:	b	22140 <__assert_fail@plt+0x10f34>
   22364:	mov	r0, #0
   22368:	bx	lr
   2236c:	str	r8, [sp, #40]	; 0x28
   22370:	ldr	r9, [sp, #68]	; 0x44
   22374:	b	21f74 <__assert_fail@plt+0x10d68>
   22378:	andeq	sl, r9, r8, asr #19
   2237c:	andeq	r6, r6, ip, lsr #20
   22380:	andeq	lr, r9, ip, asr sp
   22384:	andeq	r8, r0, r1
   22388:	andeq	r6, r6, r8, lsl #1
   2238c:	andeq	r6, r6, ip, lsr sl
   22390:	andeq	r3, r6, ip
   22394:	strheq	r6, [r6], -r0
   22398:	strheq	r6, [r6], -ip
   2239c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223a0:	sub	sp, sp, #124	; 0x7c
   223a4:	mov	sl, r0
   223a8:	ldr	r0, [sp, #172]	; 0xac
   223ac:	mov	r4, r1
   223b0:	cmn	r0, #1
   223b4:	str	r2, [sp, #60]	; 0x3c
   223b8:	str	r3, [sp, #40]	; 0x28
   223bc:	beq	22430 <__assert_fail@plt+0x11224>
   223c0:	ldr	r3, [sp, #172]	; 0xac
   223c4:	cmp	r3, #0
   223c8:	beq	22490 <__assert_fail@plt+0x11284>
   223cc:	add	r3, sp, #60	; 0x3c
   223d0:	str	r3, [sp]
   223d4:	mov	r1, r4
   223d8:	add	r3, sp, #72	; 0x48
   223dc:	ldr	r2, [sp, #60]	; 0x3c
   223e0:	mov	r0, sl
   223e4:	bl	18904 <__assert_fail@plt+0x76f8>
   223e8:	cmp	r0, #0
   223ec:	beq	22504 <__assert_fail@plt+0x112f8>
   223f0:	ldr	r3, [pc, #4040]	; 233c0 <__assert_fail@plt+0x121b4>
   223f4:	ldr	r2, [pc, #4040]	; 233c4 <__assert_fail@plt+0x121b8>
   223f8:	str	r3, [sp, #28]
   223fc:	ldr	r3, [r3]
   22400:	str	r2, [sp, #36]	; 0x24
   22404:	cmp	r3, #0
   22408:	ldr	r0, [r2]
   2240c:	beq	22a48 <__assert_fail@plt+0x1183c>
   22410:	cmp	r0, #0
   22414:	mov	r2, #5
   22418:	ldrne	r1, [pc, #4008]	; 233c8 <__assert_fail@plt+0x121bc>
   2241c:	movne	r0, #0
   22420:	ldreq	r1, [pc, #4004]	; 233cc <__assert_fail@plt+0x121c0>
   22424:	bl	10f90 <dcgettext@plt>
   22428:	bl	10f24 <printf@plt>
   2242c:	b	22880 <__assert_fail@plt+0x11674>
   22430:	ldrh	r3, [sl, #66]	; 0x42
   22434:	cmp	r3, #144	; 0x90
   22438:	beq	2262c <__assert_fail@plt+0x11420>
   2243c:	bhi	2254c <__assert_fail@plt+0x11340>
   22440:	cmp	r3, #62	; 0x3e
   22444:	beq	2262c <__assert_fail@plt+0x11420>
   22448:	bhi	22600 <__assert_fail@plt+0x113f4>
   2244c:	cmp	r3, #23
   22450:	bls	22518 <__assert_fail@plt+0x1130c>
   22454:	cmp	r3, #43	; 0x2b
   22458:	bhi	227f0 <__assert_fail@plt+0x115e4>
   2245c:	cmp	r3, #42	; 0x2a
   22460:	bcs	2262c <__assert_fail@plt+0x11420>
   22464:	cmp	r3, #39	; 0x27
   22468:	beq	2262c <__assert_fail@plt+0x11420>
   2246c:	cmp	r3, #40	; 0x28
   22470:	beq	22490 <__assert_fail@plt+0x11284>
   22474:	cmp	r3, #36	; 0x24
   22478:	beq	2262c <__assert_fail@plt+0x11420>
   2247c:	mov	r2, #5
   22480:	ldr	r1, [pc, #3912]	; 233d0 <__assert_fail@plt+0x121c4>
   22484:	mov	r0, #0
   22488:	bl	10f90 <dcgettext@plt>
   2248c:	bl	54dd0 <warn@@Base>
   22490:	add	r3, sp, #60	; 0x3c
   22494:	str	r3, [sp]
   22498:	mov	r1, r4
   2249c:	add	r3, sp, #72	; 0x48
   224a0:	ldr	r2, [sp, #60]	; 0x3c
   224a4:	mov	r0, sl
   224a8:	bl	17498 <__assert_fail@plt+0x628c>
   224ac:	cmp	r0, #0
   224b0:	beq	22504 <__assert_fail@plt+0x112f8>
   224b4:	ldr	r3, [pc, #3844]	; 233c0 <__assert_fail@plt+0x121b4>
   224b8:	ldr	r2, [pc, #3844]	; 233c4 <__assert_fail@plt+0x121b8>
   224bc:	str	r3, [sp, #28]
   224c0:	ldr	r4, [r3]
   224c4:	ldr	r3, [r2]
   224c8:	cmp	r4, #0
   224cc:	str	r2, [sp, #36]	; 0x24
   224d0:	str	r3, [sp, #172]	; 0xac
   224d4:	beq	2285c <__assert_fail@plt+0x11650>
   224d8:	ldr	r3, [sp, #172]	; 0xac
   224dc:	mov	r2, #5
   224e0:	cmp	r3, #0
   224e4:	beq	23ed0 <__assert_fail@plt+0x12cc4>
   224e8:	ldr	r1, [pc, #3812]	; 233d4 <__assert_fail@plt+0x121c8>
   224ec:	mov	r0, #0
   224f0:	bl	10f90 <dcgettext@plt>
   224f4:	bl	10f24 <printf@plt>
   224f8:	mov	r3, #0
   224fc:	str	r3, [sp, #172]	; 0xac
   22500:	b	22880 <__assert_fail@plt+0x11674>
   22504:	mov	r3, #0
   22508:	str	r3, [sp, #48]	; 0x30
   2250c:	ldr	r0, [sp, #48]	; 0x30
   22510:	add	sp, sp, #124	; 0x7c
   22514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22518:	cmp	r3, #20
   2251c:	bcs	2262c <__assert_fail@plt+0x11420>
   22520:	cmp	r3, #7
   22524:	beq	2262c <__assert_fail@plt+0x11420>
   22528:	bls	225e0 <__assert_fail@plt+0x113d4>
   2252c:	cmp	r3, #10
   22530:	beq	22490 <__assert_fail@plt+0x11284>
   22534:	bls	225d4 <__assert_fail@plt+0x113c8>
   22538:	cmp	r3, #18
   2253c:	beq	2262c <__assert_fail@plt+0x11420>
   22540:	cmp	r3, #19
   22544:	beq	22490 <__assert_fail@plt+0x11284>
   22548:	b	2247c <__assert_fail@plt+0x11270>
   2254c:	ldr	r2, [pc, #3828]	; 23448 <__assert_fail@plt+0x1223c>
   22550:	cmp	r3, r2
   22554:	beq	2262c <__assert_fail@plt+0x11420>
   22558:	bls	2265c <__assert_fail@plt+0x11450>
   2255c:	ldr	r2, [pc, #3864]	; 2347c <__assert_fail@plt+0x12270>
   22560:	cmp	r3, r2
   22564:	beq	2262c <__assert_fail@plt+0x11420>
   22568:	bhi	22724 <__assert_fail@plt+0x11518>
   2256c:	ldr	r2, [pc, #3844]	; 23478 <__assert_fail@plt+0x1226c>
   22570:	cmp	r3, r2
   22574:	beq	22490 <__assert_fail@plt+0x11284>
   22578:	bhi	225a8 <__assert_fail@plt+0x1139c>
   2257c:	ldr	r2, [pc, #3796]	; 23458 <__assert_fail@plt+0x1224c>
   22580:	cmp	r3, r2
   22584:	beq	2262c <__assert_fail@plt+0x11420>
   22588:	bls	2284c <__assert_fail@plt+0x11640>
   2258c:	ldr	r2, [pc, #3792]	; 23464 <__assert_fail@plt+0x12258>
   22590:	cmp	r3, r2
   22594:	beq	2262c <__assert_fail@plt+0x11420>
   22598:	ldr	r2, [pc, #3772]	; 2345c <__assert_fail@plt+0x12250>
   2259c:	cmp	r3, r2
   225a0:	beq	22490 <__assert_fail@plt+0x11284>
   225a4:	b	2247c <__assert_fail@plt+0x11270>
   225a8:	ldr	r2, [pc, #3728]	; 23440 <__assert_fail@plt+0x12234>
   225ac:	cmp	r3, r2
   225b0:	beq	2262c <__assert_fail@plt+0x11420>
   225b4:	bls	22830 <__assert_fail@plt+0x11624>
   225b8:	ldr	r2, [pc, #3608]	; 233d8 <__assert_fail@plt+0x121cc>
   225bc:	cmp	r3, r2
   225c0:	beq	2262c <__assert_fail@plt+0x11420>
   225c4:	add	r2, r2, #27
   225c8:	cmp	r3, r2
   225cc:	beq	22490 <__assert_fail@plt+0x11284>
   225d0:	b	2247c <__assert_fail@plt+0x11270>
   225d4:	cmp	r3, #8
   225d8:	beq	22490 <__assert_fail@plt+0x11284>
   225dc:	b	2247c <__assert_fail@plt+0x11270>
   225e0:	cmp	r3, #3
   225e4:	beq	22490 <__assert_fail@plt+0x11284>
   225e8:	bls	22840 <__assert_fail@plt+0x11634>
   225ec:	cmp	r3, #4
   225f0:	beq	2262c <__assert_fail@plt+0x11420>
   225f4:	cmp	r3, #6
   225f8:	beq	22490 <__assert_fail@plt+0x11284>
   225fc:	b	2247c <__assert_fail@plt+0x11270>
   22600:	cmp	r3, #94	; 0x5e
   22604:	bls	22638 <__assert_fail@plt+0x1142c>
   22608:	cmp	r3, #114	; 0x72
   2260c:	bls	2280c <__assert_fail@plt+0x11600>
   22610:	cmp	r3, #135	; 0x87
   22614:	beq	22490 <__assert_fail@plt+0x11284>
   22618:	bhi	227dc <__assert_fail@plt+0x115d0>
   2261c:	cmp	r3, #115	; 0x73
   22620:	beq	22490 <__assert_fail@plt+0x11284>
   22624:	cmp	r3, #120	; 0x78
   22628:	bne	2247c <__assert_fail@plt+0x11270>
   2262c:	mov	r3, #1
   22630:	str	r3, [sp, #172]	; 0xac
   22634:	b	223cc <__assert_fail@plt+0x111c0>
   22638:	cmp	r3, #92	; 0x5c
   2263c:	bcs	2262c <__assert_fail@plt+0x11420>
   22640:	cmp	r3, #84	; 0x54
   22644:	bls	22690 <__assert_fail@plt+0x11484>
   22648:	cmp	r3, #85	; 0x55
   2264c:	beq	22490 <__assert_fail@plt+0x11284>
   22650:	cmp	r3, #90	; 0x5a
   22654:	bhi	2247c <__assert_fail@plt+0x11270>
   22658:	b	2262c <__assert_fail@plt+0x11420>
   2265c:	cmp	r3, #191	; 0xbf
   22660:	beq	2262c <__assert_fail@plt+0x11420>
   22664:	bls	226b4 <__assert_fail@plt+0x114a8>
   22668:	cmp	r3, #243	; 0xf3
   2266c:	beq	2262c <__assert_fail@plt+0x11420>
   22670:	bls	227b4 <__assert_fail@plt+0x115a8>
   22674:	ldr	r2, [pc, #3520]	; 2343c <__assert_fail@plt+0x12230>
   22678:	cmp	r3, r2
   2267c:	beq	2262c <__assert_fail@plt+0x11420>
   22680:	bhi	22708 <__assert_fail@plt+0x114fc>
   22684:	cmp	r3, #250	; 0xfa
   22688:	beq	22490 <__assert_fail@plt+0x11284>
   2268c:	b	2247c <__assert_fail@plt+0x11270>
   22690:	cmp	r3, #83	; 0x53
   22694:	bcs	2262c <__assert_fail@plt+0x11420>
   22698:	cmp	r3, #75	; 0x4b
   2269c:	bcc	2247c <__assert_fail@plt+0x11270>
   226a0:	cmp	r3, #76	; 0x4c
   226a4:	bls	2262c <__assert_fail@plt+0x11420>
   226a8:	cmp	r3, #80	; 0x50
   226ac:	bne	2247c <__assert_fail@plt+0x11270>
   226b0:	b	2262c <__assert_fail@plt+0x11420>
   226b4:	cmp	r3, #181	; 0xb5
   226b8:	bhi	226ec <__assert_fail@plt+0x114e0>
   226bc:	cmp	r3, #180	; 0xb4
   226c0:	bcs	2262c <__assert_fail@plt+0x11420>
   226c4:	cmp	r3, #174	; 0xae
   226c8:	bhi	226e0 <__assert_fail@plt+0x114d4>
   226cc:	cmp	r3, #173	; 0xad
   226d0:	bcs	2262c <__assert_fail@plt+0x11420>
   226d4:	cmp	r3, #167	; 0xa7
   226d8:	bne	2247c <__assert_fail@plt+0x11270>
   226dc:	b	2262c <__assert_fail@plt+0x11420>
   226e0:	cmp	r3, #177	; 0xb1
   226e4:	bne	2247c <__assert_fail@plt+0x11270>
   226e8:	b	2262c <__assert_fail@plt+0x11420>
   226ec:	cmp	r3, #183	; 0xb7
   226f0:	beq	2262c <__assert_fail@plt+0x11420>
   226f4:	bcc	2247c <__assert_fail@plt+0x11270>
   226f8:	sub	r3, r3, #188	; 0xbc
   226fc:	cmp	r3, #1
   22700:	bhi	2247c <__assert_fail@plt+0x11270>
   22704:	b	2262c <__assert_fail@plt+0x11420>
   22708:	ldr	r2, [pc, #3388]	; 2344c <__assert_fail@plt+0x12240>
   2270c:	cmp	r3, r2
   22710:	beq	2262c <__assert_fail@plt+0x11420>
   22714:	ldr	r2, [pc, #3380]	; 23450 <__assert_fail@plt+0x12244>
   22718:	cmp	r3, r2
   2271c:	bne	2247c <__assert_fail@plt+0x11270>
   22720:	b	2262c <__assert_fail@plt+0x11420>
   22724:	ldr	r2, [pc, #3400]	; 23474 <__assert_fail@plt+0x12268>
   22728:	cmp	r3, r2
   2272c:	beq	2262c <__assert_fail@plt+0x11420>
   22730:	bhi	22760 <__assert_fail@plt+0x11554>
   22734:	ldr	r2, [pc, #3400]	; 23484 <__assert_fail@plt+0x12278>
   22738:	cmp	r3, r2
   2273c:	beq	2262c <__assert_fail@plt+0x11420>
   22740:	bls	2278c <__assert_fail@plt+0x11580>
   22744:	ldr	r2, [pc, #3356]	; 23468 <__assert_fail@plt+0x1225c>
   22748:	cmp	r3, r2
   2274c:	beq	2262c <__assert_fail@plt+0x11420>
   22750:	ldr	r2, [pc, #3352]	; 23470 <__assert_fail@plt+0x12264>
   22754:	cmp	r3, r2
   22758:	bne	2247c <__assert_fail@plt+0x11270>
   2275c:	b	2262c <__assert_fail@plt+0x11420>
   22760:	ldr	r2, [pc, #3188]	; 233dc <__assert_fail@plt+0x121d0>
   22764:	cmp	r3, r2
   22768:	beq	2262c <__assert_fail@plt+0x11420>
   2276c:	bhi	2279c <__assert_fail@plt+0x11590>
   22770:	ldr	r2, [pc, #3316]	; 2346c <__assert_fail@plt+0x12260>
   22774:	cmp	r3, r2
   22778:	beq	2262c <__assert_fail@plt+0x11420>
   2277c:	ldr	r2, [pc, #3164]	; 233e0 <__assert_fail@plt+0x121d4>
   22780:	cmp	r3, r2
   22784:	bne	2247c <__assert_fail@plt+0x11270>
   22788:	b	2262c <__assert_fail@plt+0x11420>
   2278c:	ldr	r2, [pc, #3308]	; 23480 <__assert_fail@plt+0x12274>
   22790:	cmp	r3, r2
   22794:	bne	2247c <__assert_fail@plt+0x11270>
   22798:	b	2262c <__assert_fail@plt+0x11420>
   2279c:	add	r3, r3, #324	; 0x144
   227a0:	add	r3, r3, #2
   227a4:	uxth	r3, r3
   227a8:	cmp	r3, #1
   227ac:	bhi	2247c <__assert_fail@plt+0x11270>
   227b0:	b	2262c <__assert_fail@plt+0x11420>
   227b4:	cmp	r3, #197	; 0xc5
   227b8:	beq	2262c <__assert_fail@plt+0x11420>
   227bc:	bls	227d0 <__assert_fail@plt+0x115c4>
   227c0:	sub	r3, r3, #221	; 0xdd
   227c4:	cmp	r3, #2
   227c8:	bhi	2247c <__assert_fail@plt+0x11270>
   227cc:	b	2262c <__assert_fail@plt+0x11420>
   227d0:	cmp	r3, #195	; 0xc3
   227d4:	bne	2247c <__assert_fail@plt+0x11270>
   227d8:	b	2262c <__assert_fail@plt+0x11420>
   227dc:	cmp	r3, #138	; 0x8a
   227e0:	beq	2262c <__assert_fail@plt+0x11420>
   227e4:	cmp	r3, #140	; 0x8c
   227e8:	bne	2247c <__assert_fail@plt+0x11270>
   227ec:	b	2262c <__assert_fail@plt+0x11420>
   227f0:	cmp	r3, #45	; 0x2d
   227f4:	bcc	2247c <__assert_fail@plt+0x11270>
   227f8:	cmp	r3, #48	; 0x30
   227fc:	bls	2262c <__assert_fail@plt+0x11420>
   22800:	cmp	r3, #50	; 0x32
   22804:	bne	2247c <__assert_fail@plt+0x11270>
   22808:	b	2262c <__assert_fail@plt+0x11420>
   2280c:	cmp	r3, #113	; 0x71
   22810:	bcs	2262c <__assert_fail@plt+0x11420>
   22814:	cmp	r3, #101	; 0x65
   22818:	beq	2262c <__assert_fail@plt+0x11420>
   2281c:	bcc	2247c <__assert_fail@plt+0x11270>
   22820:	sub	r3, r3, #105	; 0x69
   22824:	cmp	r3, #1
   22828:	bhi	2247c <__assert_fail@plt+0x11270>
   2282c:	b	2262c <__assert_fail@plt+0x11420>
   22830:	ldr	r2, [pc, #2988]	; 233e4 <__assert_fail@plt+0x121d8>
   22834:	cmp	r3, r2
   22838:	bne	2247c <__assert_fail@plt+0x11270>
   2283c:	b	2262c <__assert_fail@plt+0x11420>
   22840:	cmp	r3, #2
   22844:	bne	2247c <__assert_fail@plt+0x11270>
   22848:	b	2262c <__assert_fail@plt+0x11420>
   2284c:	ldr	r2, [pc, #3072]	; 23454 <__assert_fail@plt+0x12248>
   22850:	cmp	r3, r2
   22854:	bne	2247c <__assert_fail@plt+0x11270>
   22858:	b	2262c <__assert_fail@plt+0x11420>
   2285c:	ldr	r3, [sp, #172]	; 0xac
   22860:	cmp	r3, #0
   22864:	beq	23ee4 <__assert_fail@plt+0x12cd8>
   22868:	mov	r2, #5
   2286c:	ldr	r1, [pc, #2932]	; 233e8 <__assert_fail@plt+0x121dc>
   22870:	mov	r0, r4
   22874:	bl	10f90 <dcgettext@plt>
   22878:	bl	10f24 <printf@plt>
   2287c:	str	r4, [sp, #172]	; 0xac
   22880:	ldr	r3, [sp, #60]	; 0x3c
   22884:	cmp	r3, #0
   22888:	moveq	r3, #1
   2288c:	streq	r3, [sp, #48]	; 0x30
   22890:	beq	22a34 <__assert_fail@plt+0x11828>
   22894:	add	r3, sl, #66	; 0x42
   22898:	mov	r6, #0
   2289c:	str	r3, [sp, #44]	; 0x2c
   228a0:	mov	r3, #1
   228a4:	str	r3, [sp, #48]	; 0x30
   228a8:	add	r3, r6, r6, lsl #1
   228ac:	ldr	r1, [sp, #72]	; 0x48
   228b0:	lsl	r2, r3, #3
   228b4:	ldr	r0, [sp, #28]
   228b8:	str	r2, [sp, #32]
   228bc:	add	r2, r1, r2
   228c0:	ldr	fp, [r0]
   228c4:	ldrd	r4, [r2, #8]
   228c8:	cmp	fp, #0
   228cc:	ldr	r9, [r2, #4]
   228d0:	ldr	r1, [r1, r3, lsl #3]
   228d4:	mov	r2, r4
   228d8:	bne	23634 <__assert_fail@plt+0x12428>
   228dc:	mov	r3, r5
   228e0:	ldr	r0, [sp, #44]	; 0x2c
   228e4:	bl	16910 <__assert_fail@plt+0x5704>
   228e8:	ldr	r3, [sp, #36]	; 0x24
   228ec:	ldr	ip, [pc, #2808]	; 233ec <__assert_fail@plt+0x121e0>
   228f0:	mov	r8, r5
   228f4:	ldr	lr, [r3]
   228f8:	mov	r3, r9
   228fc:	cmp	lr, #0
   22900:	strd	r4, [sp]
   22904:	mov	r9, fp
   22908:	mov	r7, r0
   2290c:	mov	r2, r1
   22910:	ldr	r0, [pc, #2776]	; 233f0 <__assert_fail@plt+0x121e4>
   22914:	moveq	r0, ip
   22918:	bl	10f24 <printf@plt>
   2291c:	ldrh	r3, [sl, #66]	; 0x42
   22920:	cmp	r3, #114	; 0x72
   22924:	beq	23fd4 <__assert_fail@plt+0x12dc8>
   22928:	bls	22d4c <__assert_fail@plt+0x11b40>
   2292c:	ldr	r2, [pc, #2824]	; 2343c <__assert_fail@plt+0x12230>
   22930:	cmp	r3, r2
   22934:	beq	235f4 <__assert_fail@plt+0x123e8>
   22938:	bhi	22ed4 <__assert_fail@plt+0x11cc8>
   2293c:	cmp	r3, #181	; 0xb5
   22940:	bhi	22b38 <__assert_fail@plt+0x1192c>
   22944:	cmp	r3, #180	; 0xb4
   22948:	bcs	24034 <__assert_fail@plt+0x12e28>
   2294c:	cmp	r3, #140	; 0x8c
   22950:	beq	2401c <__assert_fail@plt+0x12e10>
   22954:	bls	22aac <__assert_fail@plt+0x118a0>
   22958:	cmp	r3, #173	; 0xad
   2295c:	beq	242d8 <__assert_fail@plt+0x130cc>
   22960:	bhi	22a8c <__assert_fail@plt+0x11880>
   22964:	cmp	r3, #144	; 0x90
   22968:	bne	22a6c <__assert_fail@plt+0x11860>
   2296c:	cmp	r7, #70	; 0x46
   22970:	bls	243a4 <__assert_fail@plt+0x13198>
   22974:	mov	r2, #5
   22978:	ldr	r1, [pc, #2868]	; 234b4 <__assert_fail@plt+0x122a8>
   2297c:	mov	r0, #0
   22980:	bl	10f90 <dcgettext@plt>
   22984:	mov	r1, r7
   22988:	bl	10f24 <printf@plt>
   2298c:	mov	r7, #0
   22990:	mov	r5, r7
   22994:	orrs	r3, r8, r9
   22998:	beq	23a80 <__assert_fail@plt+0x12874>
   2299c:	ldr	r3, [sp, #40]	; 0x28
   229a0:	mov	fp, r8
   229a4:	cmp	r3, #0
   229a8:	beq	229c0 <__assert_fail@plt+0x117b4>
   229ac:	ldr	r2, [sp, #160]	; 0xa0
   229b0:	mov	r3, #0
   229b4:	cmp	r3, r9
   229b8:	cmpeq	r2, r8
   229bc:	bhi	23b8c <__assert_fail@plt+0x12980>
   229c0:	mov	r2, #5
   229c4:	ldr	r1, [pc, #2600]	; 233f4 <__assert_fail@plt+0x121e8>
   229c8:	mov	r0, #0
   229cc:	bl	10f90 <dcgettext@plt>
   229d0:	mov	r1, fp
   229d4:	bl	548ac <error@@Base>
   229d8:	mov	r3, #0
   229dc:	str	r3, [sp, #48]	; 0x30
   229e0:	ldrh	r3, [sl, #66]	; 0x42
   229e4:	cmp	r3, #43	; 0x2b
   229e8:	movne	r7, #0
   229ec:	andeq	r7, r7, #1
   229f0:	cmp	r7, #0
   229f4:	bne	23ae4 <__assert_fail@plt+0x128d8>
   229f8:	ldr	r3, [pc, #2760]	; 234c8 <__assert_fail@plt+0x122bc>
   229fc:	mov	r0, #10
   22a00:	ldr	r1, [r3]
   22a04:	bl	11158 <putc@plt>
   22a08:	ldr	r3, [sp, #28]
   22a0c:	ldr	r5, [r3]
   22a10:	cmp	r5, #0
   22a14:	bne	22a24 <__assert_fail@plt+0x11818>
   22a18:	ldrh	r3, [sl, #66]	; 0x42
   22a1c:	cmp	r3, #8
   22a20:	beq	23b10 <__assert_fail@plt+0x12904>
   22a24:	ldr	r3, [sp, #60]	; 0x3c
   22a28:	add	r6, r6, #1
   22a2c:	cmp	r3, r6
   22a30:	bhi	228a8 <__assert_fail@plt+0x1169c>
   22a34:	ldr	r0, [sp, #72]	; 0x48
   22a38:	bl	10f54 <free@plt>
   22a3c:	ldr	r0, [sp, #48]	; 0x30
   22a40:	add	sp, sp, #124	; 0x7c
   22a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a48:	cmp	r0, #0
   22a4c:	movne	r0, r3
   22a50:	movne	r2, #5
   22a54:	ldrne	r1, [pc, #2460]	; 233f8 <__assert_fail@plt+0x121ec>
   22a58:	moveq	r2, #5
   22a5c:	ldreq	r1, [pc, #2456]	; 233fc <__assert_fail@plt+0x121f0>
   22a60:	bl	10f90 <dcgettext@plt>
   22a64:	bl	10f24 <printf@plt>
   22a68:	b	22880 <__assert_fail@plt+0x11674>
   22a6c:	cmp	r3, #167	; 0xa7
   22a70:	bne	22974 <__assert_fail@plt+0x11768>
   22a74:	cmp	r7, #213	; 0xd5
   22a78:	bhi	22974 <__assert_fail@plt+0x11768>
   22a7c:	ldr	r3, [pc, #2664]	; 234ec <__assert_fail@plt+0x122e0>
   22a80:	add	r3, r3, r7, lsl #2
   22a84:	ldr	r5, [r3, #-548]	; 0xfffffddc
   22a88:	b	22ea0 <__assert_fail@plt+0x11c94>
   22a8c:	cmp	r3, #174	; 0xae
   22a90:	bne	22ad8 <__assert_fail@plt+0x118cc>
   22a94:	cmp	r7, #61	; 0x3d
   22a98:	bhi	22974 <__assert_fail@plt+0x11768>
   22a9c:	ldr	r3, [pc, #2684]	; 23520 <__assert_fail@plt+0x12314>
   22aa0:	add	r3, r3, r7, lsl #2
   22aa4:	ldr	r5, [r3, #-2996]	; 0xfffff44c
   22aa8:	b	22ea0 <__assert_fail@plt+0x11c94>
   22aac:	cmp	r3, #120	; 0x78
   22ab0:	beq	242f0 <__assert_fail@plt+0x130e4>
   22ab4:	bls	22b18 <__assert_fail@plt+0x1190c>
   22ab8:	cmp	r3, #135	; 0x87
   22abc:	bne	22af8 <__assert_fail@plt+0x118ec>
   22ac0:	cmp	r7, #21
   22ac4:	bhi	22974 <__assert_fail@plt+0x11768>
   22ac8:	ldr	r3, [pc, #2592]	; 234f0 <__assert_fail@plt+0x122e4>
   22acc:	add	r3, r3, r7, lsl #2
   22ad0:	ldr	r5, [r3, #1888]	; 0x760
   22ad4:	b	22ea0 <__assert_fail@plt+0x11c94>
   22ad8:	cmp	r3, #177	; 0xb1
   22adc:	bne	22974 <__assert_fail@plt+0x11768>
   22ae0:	cmp	r7, #31
   22ae4:	bhi	22974 <__assert_fail@plt+0x11768>
   22ae8:	ldr	r3, [pc, #2560]	; 234f0 <__assert_fail@plt+0x122e4>
   22aec:	add	r3, r3, r7, lsl #2
   22af0:	ldr	r5, [r3, #3720]	; 0xe88
   22af4:	b	22ea0 <__assert_fail@plt+0x11c94>
   22af8:	cmp	r3, #138	; 0x8a
   22afc:	bne	22974 <__assert_fail@plt+0x11768>
   22b00:	cmp	r7, #17
   22b04:	bhi	22974 <__assert_fail@plt+0x11768>
   22b08:	ldr	r3, [pc, #2528]	; 234f0 <__assert_fail@plt+0x122e4>
   22b0c:	add	r3, r3, r7, lsl #2
   22b10:	ldr	r5, [r3, #2504]	; 0x9c8
   22b14:	b	22ea0 <__assert_fail@plt+0x11c94>
   22b18:	cmp	r3, #115	; 0x73
   22b1c:	bne	22f28 <__assert_fail@plt+0x11d1c>
   22b20:	cmp	r7, #19
   22b24:	bhi	22974 <__assert_fail@plt+0x11768>
   22b28:	ldr	r3, [pc, #2544]	; 23520 <__assert_fail@plt+0x12314>
   22b2c:	add	r3, r3, r7, lsl #2
   22b30:	ldr	r5, [r3, #-648]	; 0xfffffd78
   22b34:	b	22ea0 <__assert_fail@plt+0x11c94>
   22b38:	cmp	r3, #197	; 0xc5
   22b3c:	beq	242c0 <__assert_fail@plt+0x130b4>
   22b40:	bls	22c8c <__assert_fail@plt+0x11a80>
   22b44:	cmp	r3, #223	; 0xdf
   22b48:	beq	242a8 <__assert_fail@plt+0x1309c>
   22b4c:	bhi	22c6c <__assert_fail@plt+0x11a60>
   22b50:	cmp	r3, #221	; 0xdd
   22b54:	bne	22cb8 <__assert_fail@plt+0x11aac>
   22b58:	cmp	r7, #7
   22b5c:	beq	24564 <__assert_fail@plt+0x13358>
   22b60:	bls	22c24 <__assert_fail@plt+0x11a18>
   22b64:	cmp	r7, #11
   22b68:	beq	2452c <__assert_fail@plt+0x13320>
   22b6c:	bls	22c58 <__assert_fail@plt+0x11a4c>
   22b70:	cmp	r7, #13
   22b74:	beq	244d8 <__assert_fail@plt+0x132cc>
   22b78:	bcc	244a8 <__assert_fail@plt+0x1329c>
   22b7c:	cmp	r7, #200	; 0xc8
   22b80:	beq	243ec <__assert_fail@plt+0x131e0>
   22b84:	cmp	r7, #201	; 0xc9
   22b88:	ldreq	r5, [pc, #2160]	; 23400 <__assert_fail@plt+0x121f4>
   22b8c:	bne	22974 <__assert_fail@plt+0x11768>
   22b90:	ldr	r3, [sp, #36]	; 0x24
   22b94:	ldr	r2, [pc, #2152]	; 23404 <__assert_fail@plt+0x121f8>
   22b98:	mov	r1, r5
   22b9c:	ldr	r0, [r3]
   22ba0:	ldr	r3, [pc, #2288]	; 23498 <__assert_fail@plt+0x1228c>
   22ba4:	cmp	r0, #0
   22ba8:	movne	r0, r2
   22bac:	moveq	r0, r3
   22bb0:	bl	10f24 <printf@plt>
   22bb4:	ldrh	r2, [sl, #66]	; 0x42
   22bb8:	ldr	r3, [pc, #2072]	; 233d8 <__assert_fail@plt+0x121cc>
   22bbc:	cmp	r2, r3
   22bc0:	bne	23adc <__assert_fail@plt+0x128d0>
   22bc4:	ldr	r1, [pc, #2108]	; 23408 <__assert_fail@plt+0x121fc>
   22bc8:	mov	r0, r5
   22bcc:	bl	10f18 <strcmp@plt>
   22bd0:	subs	r7, r0, #0
   22bd4:	bne	23adc <__assert_fail@plt+0x128d0>
   22bd8:	ldr	r3, [sp, #172]	; 0xac
   22bdc:	cmp	r3, #0
   22be0:	beq	23dcc <__assert_fail@plt+0x12bc0>
   22be4:	ldr	r3, [sp, #72]	; 0x48
   22be8:	ldr	r2, [sp, #32]
   22bec:	add	r3, r3, r2
   22bf0:	ldrd	r8, [r3, #16]
   22bf4:	cmp	r9, #0
   22bf8:	cmpeq	r8, #6
   22bfc:	bhi	23de8 <__assert_fail@plt+0x12bdc>
   22c00:	ldr	r3, [pc, #2328]	; 23520 <__assert_fail@plt+0x12314>
   22c04:	ldr	r0, [pc, #2048]	; 2340c <__assert_fail@plt+0x12200>
   22c08:	add	r2, r3, r8, lsl #2
   22c0c:	ldr	r5, [r2, #264]	; 0x108
   22c10:	mov	r1, r5
   22c14:	bl	10f24 <printf@plt>
   22c18:	adds	r7, r5, #0
   22c1c:	movne	r7, #1
   22c20:	b	229e0 <__assert_fail@plt+0x117d4>
   22c24:	cmp	r7, #3
   22c28:	beq	244f8 <__assert_fail@plt+0x132ec>
   22c2c:	bhi	22c44 <__assert_fail@plt+0x11a38>
   22c30:	cmp	r7, #1
   22c34:	beq	244c8 <__assert_fail@plt+0x132bc>
   22c38:	bhi	243c4 <__assert_fail@plt+0x131b8>
   22c3c:	ldr	r5, [pc, #1996]	; 23410 <__assert_fail@plt+0x12204>
   22c40:	b	22b90 <__assert_fail@plt+0x11984>
   22c44:	cmp	r7, #5
   22c48:	beq	244b0 <__assert_fail@plt+0x132a4>
   22c4c:	bhi	243cc <__assert_fail@plt+0x131c0>
   22c50:	ldr	r5, [pc, #1980]	; 23414 <__assert_fail@plt+0x12208>
   22c54:	b	22b90 <__assert_fail@plt+0x11984>
   22c58:	cmp	r7, #9
   22c5c:	beq	244b8 <__assert_fail@plt+0x132ac>
   22c60:	bhi	243e4 <__assert_fail@plt+0x131d8>
   22c64:	ldr	r5, [pc, #1964]	; 23418 <__assert_fail@plt+0x1220c>
   22c68:	b	22b90 <__assert_fail@plt+0x11984>
   22c6c:	cmp	r3, #243	; 0xf3
   22c70:	bne	22cd8 <__assert_fail@plt+0x11acc>
   22c74:	cmp	r7, #57	; 0x39
   22c78:	bhi	22974 <__assert_fail@plt+0x11768>
   22c7c:	ldr	r3, [pc, #2152]	; 234ec <__assert_fail@plt+0x122e0>
   22c80:	add	r3, r3, r7, lsl #2
   22c84:	ldr	r5, [r3, #3372]	; 0xd2c
   22c88:	b	22ea0 <__assert_fail@plt+0x11c94>
   22c8c:	cmp	r3, #189	; 0xbd
   22c90:	beq	230c0 <__assert_fail@plt+0x11eb4>
   22c94:	bhi	22d2c <__assert_fail@plt+0x11b20>
   22c98:	cmp	r3, #183	; 0xb7
   22c9c:	bne	22d0c <__assert_fail@plt+0x11b00>
   22ca0:	ldr	r3, [pc, #1908]	; 2341c <__assert_fail@plt+0x12210>
   22ca4:	cmp	r7, r3
   22ca8:	bhi	22974 <__assert_fail@plt+0x11768>
   22cac:	ldr	r3, [pc, #1900]	; 23420 <__assert_fail@plt+0x12214>
   22cb0:	ldr	r5, [r3, r7, lsl #2]
   22cb4:	b	22ea0 <__assert_fail@plt+0x11c94>
   22cb8:	cmp	r3, #222	; 0xde
   22cbc:	bne	22974 <__assert_fail@plt+0x11768>
   22cc0:	cmp	r7, #12
   22cc4:	bhi	22974 <__assert_fail@plt+0x11768>
   22cc8:	ldr	r3, [pc, #2076]	; 234ec <__assert_fail@plt+0x122e0>
   22ccc:	add	r3, r3, r7, lsl #2
   22cd0:	ldr	r5, [r3, #-940]	; 0xfffffc54
   22cd4:	b	22ea0 <__assert_fail@plt+0x11c94>
   22cd8:	cmp	r3, #250	; 0xfa
   22cdc:	bne	22974 <__assert_fail@plt+0x11768>
   22ce0:	ldr	r3, [sl, #60]	; 0x3c
   22ce4:	lsr	r3, r3, #8
   22ce8:	uxth	r3, r3
   22cec:	cmp	r3, #12800	; 0x3200
   22cf0:	beq	243fc <__assert_fail@plt+0x131f0>
   22cf4:	cmp	r7, #26
   22cf8:	bhi	22974 <__assert_fail@plt+0x11768>
   22cfc:	ldr	r3, [pc, #2076]	; 23520 <__assert_fail@plt+0x12314>
   22d00:	add	r3, r3, r7, lsl #2
   22d04:	ldr	r5, [r3, #156]	; 0x9c
   22d08:	b	22ea0 <__assert_fail@plt+0x11c94>
   22d0c:	cmp	r3, #188	; 0xbc
   22d10:	bne	22974 <__assert_fail@plt+0x11768>
   22d14:	cmp	r7, #129	; 0x81
   22d18:	bhi	22974 <__assert_fail@plt+0x11768>
   22d1c:	ldr	r3, [pc, #2044]	; 23520 <__assert_fail@plt+0x12314>
   22d20:	add	r3, r3, r7, lsl #2
   22d24:	ldr	r5, [r3, #-1168]	; 0xfffffb70
   22d28:	b	22ea0 <__assert_fail@plt+0x11c94>
   22d2c:	cmp	r3, #191	; 0xbf
   22d30:	bne	22da0 <__assert_fail@plt+0x11b94>
   22d34:	cmp	r7, #129	; 0x81
   22d38:	bhi	22974 <__assert_fail@plt+0x11768>
   22d3c:	ldr	r3, [pc, #2012]	; 23520 <__assert_fail@plt+0x12314>
   22d40:	add	r3, r3, r7, lsl #2
   22d44:	ldr	r5, [r3, #-1688]	; 0xfffff968
   22d48:	b	22ea0 <__assert_fail@plt+0x11c94>
   22d4c:	cmp	r3, #48	; 0x30
   22d50:	bhi	22e68 <__assert_fail@plt+0x11c5c>
   22d54:	cmp	r3, #46	; 0x2e
   22d58:	bcs	23fec <__assert_fail@plt+0x12de0>
   22d5c:	cmp	r3, #18
   22d60:	beq	232d8 <__assert_fail@plt+0x120cc>
   22d64:	bls	22e28 <__assert_fail@plt+0x11c1c>
   22d68:	cmp	r3, #36	; 0x24
   22d6c:	beq	23efc <__assert_fail@plt+0x12cf0>
   22d70:	bhi	22dfc <__assert_fail@plt+0x11bf0>
   22d74:	cmp	r3, #21
   22d78:	beq	23f14 <__assert_fail@plt+0x12d08>
   22d7c:	bhi	22dd4 <__assert_fail@plt+0x11bc8>
   22d80:	cmp	r3, #19
   22d84:	bne	22dc0 <__assert_fail@plt+0x11bb4>
   22d88:	cmp	r7, #7
   22d8c:	bhi	22974 <__assert_fail@plt+0x11768>
   22d90:	ldr	r3, [pc, #1872]	; 234e8 <__assert_fail@plt+0x122dc>
   22d94:	add	r3, r3, r7, lsl #2
   22d98:	ldr	r5, [r3, #2672]	; 0xa70
   22d9c:	b	22ea0 <__assert_fail@plt+0x11c94>
   22da0:	cmp	r3, #195	; 0xc3
   22da4:	bne	22974 <__assert_fail@plt+0x11768>
   22da8:	cmp	r7, #105	; 0x69
   22dac:	bhi	22974 <__assert_fail@plt+0x11768>
   22db0:	ldr	r3, [pc, #1848]	; 234f0 <__assert_fail@plt+0x122e4>
   22db4:	add	r3, r3, r7, lsl #2
   22db8:	ldr	r5, [r3, #-3388]	; 0xfffff2c4
   22dbc:	b	22ea0 <__assert_fail@plt+0x11c94>
   22dc0:	cmp	r3, #20
   22dc4:	bne	22974 <__assert_fail@plt+0x11768>
   22dc8:	cmp	r7, #255	; 0xff
   22dcc:	bhi	22974 <__assert_fail@plt+0x11768>
   22dd0:	b	236ec <__assert_fail@plt+0x124e0>
   22dd4:	cmp	r3, #22
   22dd8:	beq	231a8 <__assert_fail@plt+0x11f9c>
   22ddc:	cmp	r3, #23
   22de0:	bne	22974 <__assert_fail@plt+0x11768>
   22de4:	cmp	r7, #17
   22de8:	bhi	22974 <__assert_fail@plt+0x11768>
   22dec:	ldr	r3, [pc, #1780]	; 234e8 <__assert_fail@plt+0x122dc>
   22df0:	add	r3, r3, r7, lsl #2
   22df4:	ldr	r5, [r3, #3864]	; 0xf18
   22df8:	b	22ea0 <__assert_fail@plt+0x11c94>
   22dfc:	cmp	r3, #42	; 0x2a
   22e00:	beq	23f74 <__assert_fail@plt+0x12d68>
   22e04:	bhi	23228 <__assert_fail@plt+0x1201c>
   22e08:	cmp	r3, #39	; 0x27
   22e0c:	bne	23208 <__assert_fail@plt+0x11ffc>
   22e10:	cmp	r7, #12
   22e14:	bhi	22974 <__assert_fail@plt+0x11768>
   22e18:	ldr	r3, [pc, #1740]	; 234ec <__assert_fail@plt+0x122e0>
   22e1c:	add	r3, r3, r7, lsl #2
   22e20:	ldr	r5, [r3, #-888]	; 0xfffffc88
   22e24:	b	22ea0 <__assert_fail@plt+0x11c94>
   22e28:	cmp	r3, #7
   22e2c:	beq	23f5c <__assert_fail@plt+0x12d50>
   22e30:	bls	2323c <__assert_fail@plt+0x12030>
   22e34:	cmp	r3, #10
   22e38:	beq	24004 <__assert_fail@plt+0x12df8>
   22e3c:	bhi	22eac <__assert_fail@plt+0x11ca0>
   22e40:	cmp	r3, #8
   22e44:	beq	24004 <__assert_fail@plt+0x12df8>
   22e48:	cmp	r3, #9
   22e4c:	bne	22974 <__assert_fail@plt+0x11768>
   22e50:	cmp	r7, #11
   22e54:	bhi	22974 <__assert_fail@plt+0x11768>
   22e58:	ldr	r3, [pc, #1680]	; 234f0 <__assert_fail@plt+0x122e4>
   22e5c:	add	r3, r3, r7, lsl #2
   22e60:	ldr	r5, [r3, #832]	; 0x340
   22e64:	b	22ea0 <__assert_fail@plt+0x11c94>
   22e68:	cmp	r3, #87	; 0x57
   22e6c:	beq	23f44 <__assert_fail@plt+0x12d38>
   22e70:	bhi	2331c <__assert_fail@plt+0x12110>
   22e74:	cmp	r3, #76	; 0x4c
   22e78:	beq	23f2c <__assert_fail@plt+0x12d20>
   22e7c:	bhi	232f0 <__assert_fail@plt+0x120e4>
   22e80:	cmp	r3, #62	; 0x3e
   22e84:	beq	24034 <__assert_fail@plt+0x12e28>
   22e88:	bhi	23288 <__assert_fail@plt+0x1207c>
   22e8c:	cmp	r3, #50	; 0x32
   22e90:	bne	23268 <__assert_fail@plt+0x1205c>
   22e94:	mov	r0, r7
   22e98:	bl	11bb8 <__assert_fail@plt+0x9ac>
   22e9c:	mov	r5, r0
   22ea0:	cmp	r5, #0
   22ea4:	bne	22b90 <__assert_fail@plt+0x11984>
   22ea8:	b	22974 <__assert_fail@plt+0x11768>
   22eac:	cmp	r3, #11
   22eb0:	beq	232d8 <__assert_fail@plt+0x120cc>
   22eb4:	cmp	r3, #15
   22eb8:	bne	22974 <__assert_fail@plt+0x11768>
   22ebc:	cmp	r7, #245	; 0xf5
   22ec0:	bhi	22974 <__assert_fail@plt+0x11768>
   22ec4:	ldr	r3, [pc, #1572]	; 234f0 <__assert_fail@plt+0x122e4>
   22ec8:	add	r3, r3, r7, lsl #2
   22ecc:	ldr	r5, [r3, #-2964]	; 0xfffff46c
   22ed0:	b	22ea0 <__assert_fail@plt+0x11c94>
   22ed4:	ldr	r2, [pc, #1380]	; 23440 <__assert_fail@plt+0x12234>
   22ed8:	cmp	r3, r2
   22edc:	beq	23f8c <__assert_fail@plt+0x12d80>
   22ee0:	bhi	22fd0 <__assert_fail@plt+0x11dc4>
   22ee4:	ldr	r2, [pc, #1368]	; 23444 <__assert_fail@plt+0x12238>
   22ee8:	cmp	r3, r2
   22eec:	beq	22f30 <__assert_fail@plt+0x11d24>
   22ef0:	bhi	22f9c <__assert_fail@plt+0x11d90>
   22ef4:	ldr	r2, [pc, #1356]	; 23448 <__assert_fail@plt+0x1223c>
   22ef8:	cmp	r3, r2
   22efc:	beq	24290 <__assert_fail@plt+0x13084>
   22f00:	bhi	22f6c <__assert_fail@plt+0x11d60>
   22f04:	ldr	r2, [pc, #1344]	; 2344c <__assert_fail@plt+0x12240>
   22f08:	cmp	r3, r2
   22f0c:	bne	22f48 <__assert_fail@plt+0x11d3c>
   22f10:	cmp	r7, #10
   22f14:	bhi	22974 <__assert_fail@plt+0x11768>
   22f18:	ldr	r3, [pc, #1484]	; 234ec <__assert_fail@plt+0x122e0>
   22f1c:	add	r3, r3, r7, lsl #2
   22f20:	ldr	r5, [r3, #-592]	; 0xfffffdb0
   22f24:	b	22ea0 <__assert_fail@plt+0x11c94>
   22f28:	cmp	r3, #116	; 0x74
   22f2c:	bne	22974 <__assert_fail@plt+0x11768>
   22f30:	cmp	r7, #8
   22f34:	bhi	22974 <__assert_fail@plt+0x11768>
   22f38:	ldr	r3, [pc, #1504]	; 23520 <__assert_fail@plt+0x12314>
   22f3c:	add	r3, r3, r7, lsl #2
   22f40:	ldr	r5, [r3, #-2748]	; 0xfffff544
   22f44:	b	22ea0 <__assert_fail@plt+0x11c94>
   22f48:	ldr	r2, [pc, #1280]	; 23450 <__assert_fail@plt+0x12244>
   22f4c:	cmp	r3, r2
   22f50:	bne	22974 <__assert_fail@plt+0x11768>
   22f54:	cmp	r7, #13
   22f58:	bhi	22974 <__assert_fail@plt+0x11768>
   22f5c:	ldr	r3, [pc, #1420]	; 234f0 <__assert_fail@plt+0x122e4>
   22f60:	add	r3, r3, r7, lsl #2
   22f64:	ldr	r5, [r3, #2160]	; 0x870
   22f68:	b	22ea0 <__assert_fail@plt+0x11c94>
   22f6c:	ldr	r2, [pc, #1248]	; 23454 <__assert_fail@plt+0x12248>
   22f70:	cmp	r3, r2
   22f74:	beq	24278 <__assert_fail@plt+0x1306c>
   22f78:	ldr	r2, [pc, #1240]	; 23458 <__assert_fail@plt+0x1224c>
   22f7c:	cmp	r3, r2
   22f80:	bne	22974 <__assert_fail@plt+0x11768>
   22f84:	cmp	r7, #0
   22f88:	beq	243f4 <__assert_fail@plt+0x131e8>
   22f8c:	cmp	r7, #1
   22f90:	bne	22974 <__assert_fail@plt+0x11768>
   22f94:	ldr	r5, [pc, #1160]	; 23424 <__assert_fail@plt+0x12218>
   22f98:	b	22b90 <__assert_fail@plt+0x11984>
   22f9c:	ldr	r2, [pc, #1208]	; 2345c <__assert_fail@plt+0x12250>
   22fa0:	cmp	r3, r2
   22fa4:	beq	23fa4 <__assert_fail@plt+0x12d98>
   22fa8:	bhi	23154 <__assert_fail@plt+0x11f48>
   22fac:	ldr	r2, [pc, #1196]	; 23460 <__assert_fail@plt+0x12254>
   22fb0:	cmp	r3, r2
   22fb4:	bne	23130 <__assert_fail@plt+0x11f24>
   22fb8:	cmp	r7, #6
   22fbc:	bhi	22974 <__assert_fail@plt+0x11768>
   22fc0:	ldr	r3, [pc, #1312]	; 234e8 <__assert_fail@plt+0x122dc>
   22fc4:	add	r3, r3, r7, lsl #2
   22fc8:	ldr	r5, [r3, #2472]	; 0x9a8
   22fcc:	b	22ea0 <__assert_fail@plt+0x11c94>
   22fd0:	ldr	r2, [pc, #1168]	; 23468 <__assert_fail@plt+0x1225c>
   22fd4:	cmp	r3, r2
   22fd8:	beq	24064 <__assert_fail@plt+0x12e58>
   22fdc:	bls	230fc <__assert_fail@plt+0x11ef0>
   22fe0:	ldr	r2, [pc, #1156]	; 2346c <__assert_fail@plt+0x12260>
   22fe4:	cmp	r3, r2
   22fe8:	beq	2404c <__assert_fail@plt+0x12e40>
   22fec:	bls	230b4 <__assert_fail@plt+0x11ea8>
   22ff0:	ldr	r2, [pc, #996]	; 233dc <__assert_fail@plt+0x121d0>
   22ff4:	cmp	r3, r2
   22ff8:	beq	242f0 <__assert_fail@plt+0x130e4>
   22ffc:	add	r2, r2, #10
   23000:	cmp	r3, r2
   23004:	bne	23090 <__assert_fail@plt+0x11e84>
   23008:	cmp	r7, #6
   2300c:	beq	24544 <__assert_fail@plt+0x13338>
   23010:	bls	23040 <__assert_fail@plt+0x11e34>
   23014:	cmp	r7, #9
   23018:	beq	244e8 <__assert_fail@plt+0x132dc>
   2301c:	bls	23078 <__assert_fail@plt+0x11e6c>
   23020:	cmp	r7, #200	; 0xc8
   23024:	beq	244d0 <__assert_fail@plt+0x132c4>
   23028:	cmp	r7, #201	; 0xc9
   2302c:	beq	243dc <__assert_fail@plt+0x131d0>
   23030:	cmp	r7, #10
   23034:	bne	22974 <__assert_fail@plt+0x11768>
   23038:	ldr	r5, [pc, #1000]	; 23428 <__assert_fail@plt+0x1221c>
   2303c:	b	22b90 <__assert_fail@plt+0x11984>
   23040:	cmp	r7, #2
   23044:	beq	244f0 <__assert_fail@plt+0x132e4>
   23048:	bls	23060 <__assert_fail@plt+0x11e54>
   2304c:	cmp	r7, #4
   23050:	beq	244c0 <__assert_fail@plt+0x132b4>
   23054:	bhi	243bc <__assert_fail@plt+0x131b0>
   23058:	ldr	r5, [pc, #972]	; 2342c <__assert_fail@plt+0x12220>
   2305c:	b	22b90 <__assert_fail@plt+0x11984>
   23060:	cmp	r7, #0
   23064:	beq	243b4 <__assert_fail@plt+0x131a8>
   23068:	cmp	r7, #1
   2306c:	ldreq	r5, [pc, #956]	; 23430 <__assert_fail@plt+0x12224>
   23070:	beq	22b90 <__assert_fail@plt+0x11984>
   23074:	b	22974 <__assert_fail@plt+0x11768>
   23078:	cmp	r7, #7
   2307c:	beq	243d4 <__assert_fail@plt+0x131c8>
   23080:	cmp	r7, #8
   23084:	ldreq	r5, [pc, #936]	; 23434 <__assert_fail@plt+0x12228>
   23088:	beq	22b90 <__assert_fail@plt+0x11984>
   2308c:	b	22974 <__assert_fail@plt+0x11768>
   23090:	ldr	r2, [pc, #840]	; 233e0 <__assert_fail@plt+0x121d4>
   23094:	cmp	r3, r2
   23098:	bne	22974 <__assert_fail@plt+0x11768>
   2309c:	cmp	r7, #21
   230a0:	bhi	22974 <__assert_fail@plt+0x11768>
   230a4:	ldr	r3, [pc, #1092]	; 234f0 <__assert_fail@plt+0x122e4>
   230a8:	add	r3, r3, r7, lsl #2
   230ac:	ldr	r5, [r3, #3632]	; 0xe30
   230b0:	b	22ea0 <__assert_fail@plt+0x11c94>
   230b4:	ldr	r2, [pc, #948]	; 23470 <__assert_fail@plt+0x12264>
   230b8:	cmp	r3, r2
   230bc:	bne	230d8 <__assert_fail@plt+0x11ecc>
   230c0:	cmp	r7, #32
   230c4:	bhi	22974 <__assert_fail@plt+0x11768>
   230c8:	ldr	r3, [pc, #1056]	; 234f0 <__assert_fail@plt+0x122e4>
   230cc:	add	r3, r3, r7, lsl #2
   230d0:	ldr	r5, [r3, #3848]	; 0xf08
   230d4:	b	22ea0 <__assert_fail@plt+0x11c94>
   230d8:	ldr	r2, [pc, #916]	; 23474 <__assert_fail@plt+0x12268>
   230dc:	cmp	r3, r2
   230e0:	bne	22974 <__assert_fail@plt+0x11768>
   230e4:	cmp	r7, #34	; 0x22
   230e8:	bhi	22974 <__assert_fail@plt+0x11768>
   230ec:	ldr	r3, [pc, #1016]	; 234ec <__assert_fail@plt+0x122e0>
   230f0:	add	r3, r3, r7, lsl #2
   230f4:	ldr	r5, [r3, #-1972]	; 0xfffff84c
   230f8:	b	22ea0 <__assert_fail@plt+0x11c94>
   230fc:	ldr	r2, [pc, #888]	; 2347c <__assert_fail@plt+0x12270>
   23100:	cmp	r3, r2
   23104:	beq	23f44 <__assert_fail@plt+0x12d38>
   23108:	bhi	2319c <__assert_fail@plt+0x11f90>
   2310c:	sub	r2, r2, #90	; 0x5a
   23110:	cmp	r3, r2
   23114:	bne	23178 <__assert_fail@plt+0x11f6c>
   23118:	cmp	r7, #41	; 0x29
   2311c:	bhi	22974 <__assert_fail@plt+0x11768>
   23120:	ldr	r3, [pc, #964]	; 234ec <__assert_fail@plt+0x122e0>
   23124:	add	r3, r3, r7, lsl #2
   23128:	ldr	r5, [r3, #3604]	; 0xe14
   2312c:	b	22ea0 <__assert_fail@plt+0x11c94>
   23130:	ldr	r2, [pc, #812]	; 23464 <__assert_fail@plt+0x12258>
   23134:	cmp	r3, r2
   23138:	bne	22974 <__assert_fail@plt+0x11768>
   2313c:	cmp	r7, #201	; 0xc9
   23140:	bhi	22974 <__assert_fail@plt+0x11768>
   23144:	ldr	r3, [pc, #928]	; 234ec <__assert_fail@plt+0x122e0>
   23148:	add	r3, r3, r7, lsl #2
   2314c:	ldr	r5, [r3, #-1748]	; 0xfffff92c
   23150:	b	22ea0 <__assert_fail@plt+0x11c94>
   23154:	ldr	r2, [pc, #796]	; 23478 <__assert_fail@plt+0x1226c>
   23158:	cmp	r3, r2
   2315c:	bne	231e4 <__assert_fail@plt+0x11fd8>
   23160:	cmp	r7, #8
   23164:	bhi	22974 <__assert_fail@plt+0x11768>
   23168:	ldr	r3, [pc, #892]	; 234ec <__assert_fail@plt+0x122e0>
   2316c:	add	r3, r3, r7, lsl #2
   23170:	ldr	r5, [r3, #-3124]	; 0xfffff3cc
   23174:	b	22ea0 <__assert_fail@plt+0x11c94>
   23178:	add	r2, r2, #27
   2317c:	cmp	r3, r2
   23180:	bne	22974 <__assert_fail@plt+0x11768>
   23184:	cmp	r7, #64	; 0x40
   23188:	bhi	22974 <__assert_fail@plt+0x11768>
   2318c:	ldr	r3, [pc, #852]	; 234e8 <__assert_fail@plt+0x122dc>
   23190:	add	r3, r3, r7, lsl #2
   23194:	ldr	r5, [r3, #1116]	; 0x45c
   23198:	b	22ea0 <__assert_fail@plt+0x11c94>
   2319c:	ldr	r2, [pc, #732]	; 23480 <__assert_fail@plt+0x12274>
   231a0:	cmp	r3, r2
   231a4:	bne	231c0 <__assert_fail@plt+0x11fb4>
   231a8:	cmp	r7, #251	; 0xfb
   231ac:	bhi	22974 <__assert_fail@plt+0x11768>
   231b0:	ldr	r3, [pc, #824]	; 234f0 <__assert_fail@plt+0x122e4>
   231b4:	add	r3, r3, r7, lsl #2
   231b8:	ldr	r5, [r3, #880]	; 0x370
   231bc:	b	22ea0 <__assert_fail@plt+0x11c94>
   231c0:	ldr	r2, [pc, #700]	; 23484 <__assert_fail@plt+0x12278>
   231c4:	cmp	r3, r2
   231c8:	bne	22974 <__assert_fail@plt+0x11768>
   231cc:	cmp	r7, #56	; 0x38
   231d0:	bhi	22974 <__assert_fail@plt+0x11768>
   231d4:	ldr	r3, [pc, #788]	; 234f0 <__assert_fail@plt+0x122e4>
   231d8:	add	r3, r3, r7, lsl #2
   231dc:	ldr	r5, [r3, #2276]	; 0x8e4
   231e0:	b	22ea0 <__assert_fail@plt+0x11c94>
   231e4:	add	r2, r2, #38	; 0x26
   231e8:	cmp	r3, r2
   231ec:	bne	22974 <__assert_fail@plt+0x11768>
   231f0:	cmp	r7, #12
   231f4:	bhi	22974 <__assert_fail@plt+0x11768>
   231f8:	ldr	r3, [pc, #748]	; 234ec <__assert_fail@plt+0x122e0>
   231fc:	add	r3, r3, r7, lsl #2
   23200:	ldr	r5, [r3, #-3088]	; 0xfffff3f0
   23204:	b	22ea0 <__assert_fail@plt+0x11c94>
   23208:	cmp	r3, #40	; 0x28
   2320c:	bne	22974 <__assert_fail@plt+0x11768>
   23210:	cmp	r7, #255	; 0xff
   23214:	bhi	22974 <__assert_fail@plt+0x11768>
   23218:	ldr	r3, [pc, #716]	; 234ec <__assert_fail@plt+0x122e0>
   2321c:	add	r3, r3, r7, lsl #2
   23220:	ldr	r5, [r3, #3772]	; 0xebc
   23224:	b	22ea0 <__assert_fail@plt+0x11c94>
   23228:	cmp	r3, #43	; 0x2b
   2322c:	beq	232d8 <__assert_fail@plt+0x120cc>
   23230:	cmp	r3, #45	; 0x2d
   23234:	beq	22da8 <__assert_fail@plt+0x11b9c>
   23238:	b	22974 <__assert_fail@plt+0x11768>
   2323c:	cmp	r3, #3
   23240:	beq	232b8 <__assert_fail@plt+0x120ac>
   23244:	bls	232d0 <__assert_fail@plt+0x120c4>
   23248:	cmp	r3, #4
   2324c:	bne	232b0 <__assert_fail@plt+0x120a4>
   23250:	cmp	r7, #42	; 0x2a
   23254:	bhi	22974 <__assert_fail@plt+0x11768>
   23258:	ldr	r3, [pc, #648]	; 234e8 <__assert_fail@plt+0x122dc>
   2325c:	add	r3, r3, r7, lsl #2
   23260:	ldr	r5, [r3, #2500]	; 0x9c4
   23264:	b	22ea0 <__assert_fail@plt+0x11c94>
   23268:	cmp	r3, #53	; 0x35
   2326c:	bne	22974 <__assert_fail@plt+0x11768>
   23270:	cmp	r7, #21
   23274:	bhi	22974 <__assert_fail@plt+0x11768>
   23278:	ldr	r3, [pc, #616]	; 234e8 <__assert_fail@plt+0x122dc>
   2327c:	add	r3, r3, r7, lsl #2
   23280:	ldr	r5, [r3, #2384]	; 0x950
   23284:	b	22ea0 <__assert_fail@plt+0x11c94>
   23288:	cmp	r3, #70	; 0x46
   2328c:	beq	23270 <__assert_fail@plt+0x12064>
   23290:	cmp	r3, #75	; 0x4b
   23294:	bne	22974 <__assert_fail@plt+0x11768>
   23298:	cmp	r7, #24
   2329c:	bhi	22974 <__assert_fail@plt+0x11768>
   232a0:	ldr	r3, [pc, #584]	; 234f0 <__assert_fail@plt+0x122e4>
   232a4:	add	r3, r3, r7, lsl #2
   232a8:	ldr	r5, [r3, #2060]	; 0x80c
   232ac:	b	22ea0 <__assert_fail@plt+0x11c94>
   232b0:	cmp	r3, #6
   232b4:	bne	22974 <__assert_fail@plt+0x11768>
   232b8:	cmp	r7, #251	; 0xfb
   232bc:	bhi	22974 <__assert_fail@plt+0x11768>
   232c0:	ldr	r3, [pc, #544]	; 234e8 <__assert_fail@plt+0x122dc>
   232c4:	add	r3, r3, r7, lsl #2
   232c8:	ldr	r5, [r3, #1376]	; 0x560
   232cc:	b	22ea0 <__assert_fail@plt+0x11c94>
   232d0:	cmp	r3, #2
   232d4:	bne	22974 <__assert_fail@plt+0x11768>
   232d8:	cmp	r7, #252	; 0xfc
   232dc:	bhi	22974 <__assert_fail@plt+0x11768>
   232e0:	ldr	r3, [pc, #512]	; 234e8 <__assert_fail@plt+0x122dc>
   232e4:	add	r3, r3, r7, lsl #2
   232e8:	ldr	r5, [r3, #2852]	; 0xb24
   232ec:	b	22ea0 <__assert_fail@plt+0x11c94>
   232f0:	cmp	r3, #84	; 0x54
   232f4:	beq	24278 <__assert_fail@plt+0x1306c>
   232f8:	bhi	2360c <__assert_fail@plt+0x12400>
   232fc:	cmp	r3, #80	; 0x50
   23300:	bne	235ec <__assert_fail@plt+0x123e0>
   23304:	cmp	r7, #36	; 0x24
   23308:	bhi	22974 <__assert_fail@plt+0x11768>
   2330c:	ldr	r3, [pc, #472]	; 234ec <__assert_fail@plt+0x122e0>
   23310:	add	r3, r3, r7, lsl #2
   23314:	ldr	r5, [r3, #-836]	; 0xfffffcbc
   23318:	b	22ea0 <__assert_fail@plt+0x11c94>
   2331c:	cmp	r3, #93	; 0x5d
   23320:	beq	22da8 <__assert_fail@plt+0x11b9c>
   23324:	bls	235b8 <__assert_fail@plt+0x123ac>
   23328:	cmp	r3, #101	; 0x65
   2332c:	beq	23f8c <__assert_fail@plt+0x12d80>
   23330:	bls	23398 <__assert_fail@plt+0x1218c>
   23334:	cmp	r3, #106	; 0x6a
   23338:	beq	23fbc <__assert_fail@plt+0x12db0>
   2333c:	cmp	r3, #113	; 0x71
   23340:	bne	2335c <__assert_fail@plt+0x12150>
   23344:	cmp	r7, #77	; 0x4d
   23348:	bhi	22974 <__assert_fail@plt+0x11768>
   2334c:	ldr	r3, [pc, #460]	; 23520 <__assert_fail@plt+0x12314>
   23350:	add	r3, r3, r7, lsl #2
   23354:	ldr	r5, [r3, #-568]	; 0xfffffdc8
   23358:	b	22ea0 <__assert_fail@plt+0x11c94>
   2335c:	cmp	r3, #105	; 0x69
   23360:	bne	22974 <__assert_fail@plt+0x11768>
   23364:	ldrb	r3, [sl, #60]	; 0x3c
   23368:	cmp	r3, #45	; 0x2d
   2336c:	beq	2337c <__assert_fail@plt+0x12170>
   23370:	ldrb	r3, [sl, #23]
   23374:	cmp	r3, #0
   23378:	bne	22f10 <__assert_fail@plt+0x11d04>
   2337c:	sub	r3, r7, #1
   23380:	cmp	r3, #20
   23384:	bhi	22974 <__assert_fail@plt+0x11768>
   23388:	ldr	r2, [pc, #348]	; 234ec <__assert_fail@plt+0x122e0>
   2338c:	add	r3, r2, r3, lsl #2
   23390:	ldr	r5, [r3, #-676]	; 0xfffffd5c
   23394:	b	22ea0 <__assert_fail@plt+0x11c94>
   23398:	cmp	r3, #94	; 0x5e
   2339c:	beq	231cc <__assert_fail@plt+0x11fc0>
   233a0:	cmp	r3, #99	; 0x63
   233a4:	bne	22974 <__assert_fail@plt+0x11768>
   233a8:	cmp	r7, #16
   233ac:	bhi	22974 <__assert_fail@plt+0x11768>
   233b0:	ldr	r3, [pc, #312]	; 234f0 <__assert_fail@plt+0x122e4>
   233b4:	add	r3, r3, r7, lsl #2
   233b8:	ldr	r5, [r3, #-1272]	; 0xfffffb08
   233bc:	b	22ea0 <__assert_fail@plt+0x11c94>
   233c0:	andeq	sl, r9, r8, lsr r4
   233c4:	andeq	lr, r9, r8, lsr #26
   233c8:	andeq	r6, r6, r0, asr lr
   233cc:	muleq	r6, ip, lr
   233d0:	andeq	r6, r6, r4, lsl lr
   233d4:	andeq	r6, r6, r0, ror #29
   233d8:	andeq	r9, r0, r6, lsr #32
   233dc:			; <UNDEFINED> instruction: 0x0000feb0
   233e0:	andeq	pc, r0, sp
   233e4:	andeq	r7, r0, r6, ror r6
   233e8:	andeq	r7, r6, r8, lsl r0
   233ec:	andeq	r6, r6, ip, ror #20
   233f0:	andeq	r6, r6, r4, asr sl
   233f4:	andeq	r7, r6, r4, lsl r1
   233f8:	andeq	r6, r6, r0, ror #30
   233fc:	andeq	r6, r6, r4, asr #31
   23400:	strdeq	r6, [r6], -ip
   23404:			; <UNDEFINED> instruction: 0x00066dbc
   23408:	andeq	r7, r6, r4, ror #1
   2340c:	strdeq	r7, [r6], -r4
   23410:	strdeq	r6, [r6], -r4
   23414:	ldrdeq	r6, [r6], -r0
   23418:	andeq	r6, r6, r8, lsl #25
   2341c:	andeq	r0, r0, r8, lsl #8
   23420:	andeq	pc, r5, r0, ror #2
   23424:	strdeq	r6, [r6], -ip
   23428:	andeq	r6, r6, r8, asr fp
   2342c:	ldrdeq	r6, [r6], -r4
   23430:	andeq	r6, r6, r4, lsl #21
   23434:	andeq	r6, r6, ip, ror fp
   23438:	andeq	r7, r6, r0, asr #1
   2343c:	andeq	r1, r0, r7, asr r0
   23440:	andeq	r8, r0, r7, lsl r2
   23444:	andeq	r4, r0, r8, lsl #13
   23448:	andeq	r2, r0, r0, lsr r5
   2344c:	andeq	r1, r0, r9, asr r0
   23450:	andeq	r1, r0, r3, lsr #4
   23454:	andeq	r3, r0, r0, lsr r3
   23458:	andeq	r4, r0, r7, asr r1
   2345c:	andeq	r5, r0, r5, lsr #21
   23460:	andeq	r4, r0, pc, ror #27
   23464:	andeq	r5, r0, r1, asr #8
   23468:	andeq	sl, r0, r5, asr #26
   2346c:	andeq	sp, r0, sp, lsr #29
   23470:	andeq	fp, r0, fp, lsr #21
   23474:	andeq	fp, r0, pc, ror #29
   23478:	andeq	r7, r0, r0, asr r6
   2347c:	andeq	r9, r0, r0, lsl #1
   23480:	muleq	r0, r0, r3
   23484:	andeq	sl, r0, r7, asr #23
   23488:	ldrdeq	r6, [r6], -ip
   2348c:	andeq	r2, r6, r8, ror #26
   23490:	andeq	r7, r6, r8, lsr #3
   23494:			; <UNDEFINED> instruction: 0x000671b8
   23498:	andeq	r6, r6, r4, asr #27
   2349c:	ldrdeq	r6, [r6], -r0
   234a0:	andeq	r7, r6, r8, lsr r1
   234a4:	andeq	r6, r6, r0, lsl #28
   234a8:	muleq	r6, r8, r1
   234ac:	andeq	r7, r6, r0, lsr #3
   234b0:	ldrdeq	r7, [r6], -ip
   234b4:	ldrdeq	r7, [r6], -r0
   234b8:	andeq	r7, r6, ip, ror #2
   234bc:	andeq	ip, r6, ip, ror #12
   234c0:	andeq	r8, r6, ip, ror ip
   234c4:	andeq	r7, r6, r0, asr #3
   234c8:	andeq	sl, r9, ip, lsr #8
   234cc:	strdeq	r7, [r6], -ip
   234d0:	ldrdeq	r6, [r6], -ip
   234d4:	ldrdeq	r6, [r6], -r4
   234d8:	muleq	r6, r0, r1
   234dc:	andeq	r3, r6, ip
   234e0:	andeq	r6, r6, r4, lsr #30
   234e4:	andeq	r7, r6, r4, ror r0
   234e8:	andeq	r8, r5, r4, ror #27
   234ec:	ldrdeq	sl, [r5], -ip
   234f0:	ldrdeq	ip, [r5], -r4
   234f4:	andeq	r7, r6, r0, asr r1
   234f8:	andeq	r7, r6, r0, asr #2
   234fc:	andeq	r6, r6, ip, ror #23
   23500:			; <UNDEFINED> instruction: 0x00066bb4
   23504:	strdeq	r6, [r6], -r0
   23508:	andeq	r6, r6, r8, lsr #25
   2350c:	muleq	r6, r0, fp
   23510:	andeq	r6, r6, r8, lsr #22
   23514:	andeq	r6, r6, r8, ror #24
   23518:	andeq	r6, r6, r4, lsl ip
   2351c:	andeq	r6, r6, r8, lsl fp
   23520:	andeq	lr, r5, ip, asr #27
   23524:	andeq	r9, r7, r0, asr #28
   23528:	muleq	r6, r4, r8
   2352c:	andeq	r6, r6, ip, lsr sp
   23530:	andeq	r6, r6, ip, asr #26
   23534:	andeq	r6, r6, r0, ror #26
   23538:	andeq	r6, r6, r4, ror sp
   2353c:	andeq	r6, r6, r8, lsl #26
   23540:	andeq	r6, r6, r0, lsr #26
   23544:	andeq	r6, r6, r4, lsl #22
   23548:	andeq	r6, r6, r8, lsl #27
   2354c:	muleq	r6, r8, sp
   23550:	andeq	r6, r6, ip, lsr #27
   23554:			; <UNDEFINED> instruction: 0x00066ab4
   23558:	muleq	r6, r0, sl
   2355c:	andeq	r6, r6, r4, lsr #21
   23560:	ldrdeq	r6, [r6], -r8
   23564:	andeq	r6, r6, r8, asr #21
   23568:	andeq	r6, r6, r0, asr #24
   2356c:			; <UNDEFINED> instruction: 0x00066cbc
   23570:	andeq	r6, r6, r8, ror ip
   23574:	andeq	r6, r6, r4, asr #23
   23578:	andeq	r6, r6, r8, ror #21
   2357c:	andeq	r6, r6, r0, asr #22
   23580:	andeq	r6, r6, ip, lsr #24
   23584:	muleq	r6, r4, r4
   23588:	andeq	r6, r6, ip, ror #22
   2358c:	andeq	r6, r6, r0, ror #23
   23590:	andeq	r6, r6, r4, ror #25
   23594:	muleq	r6, ip, r8
   23598:	andeq	r6, r6, r0, ror #27
   2359c:	andeq	r6, r6, r4, asr ip
   235a0:	strdeq	r6, [r6], -r8
   235a4:	andeq	r6, r6, r4, lsr #23
   235a8:	andeq	r6, r6, r8, ror #27
   235ac:	muleq	r6, r8, ip
   235b0:	andeq	r6, r6, r8, lsl #28
   235b4:	andeq	r3, r6, r8, ror #17
   235b8:	cmp	r3, #90	; 0x5a
   235bc:	beq	2404c <__assert_fail@plt+0x12e40>
   235c0:	bls	23620 <__assert_fail@plt+0x12414>
   235c4:	cmp	r3, #91	; 0x5b
   235c8:	beq	233a8 <__assert_fail@plt+0x1219c>
   235cc:	cmp	r3, #92	; 0x5c
   235d0:	bne	22974 <__assert_fail@plt+0x11768>
   235d4:	cmp	r7, #34	; 0x22
   235d8:	bhi	22974 <__assert_fail@plt+0x11768>
   235dc:	ldr	r3, [pc, #-244]	; 234f0 <__assert_fail@plt+0x122e4>
   235e0:	add	r3, r3, r7, lsl #2
   235e4:	ldr	r5, [r3, #-1412]	; 0xfffffa7c
   235e8:	b	22ea0 <__assert_fail@plt+0x11c94>
   235ec:	cmp	r3, #83	; 0x53
   235f0:	bne	22974 <__assert_fail@plt+0x11768>
   235f4:	cmp	r7, #36	; 0x24
   235f8:	bhi	22974 <__assert_fail@plt+0x11768>
   235fc:	ldr	r3, [pc, #-284]	; 234e8 <__assert_fail@plt+0x122dc>
   23600:	add	r3, r3, r7, lsl #2
   23604:	ldr	r5, [r3, #2704]	; 0xa90
   23608:	b	22ea0 <__assert_fail@plt+0x11c94>
   2360c:	cmp	r3, #85	; 0x55
   23610:	beq	23160 <__assert_fail@plt+0x11f54>
   23614:	cmp	r3, #86	; 0x56
   23618:	beq	231f0 <__assert_fail@plt+0x11fe4>
   2361c:	b	22974 <__assert_fail@plt+0x11768>
   23620:	cmp	r3, #88	; 0x58
   23624:	beq	23184 <__assert_fail@plt+0x11f78>
   23628:	cmp	r3, #89	; 0x59
   2362c:	beq	230e4 <__assert_fail@plt+0x11ed8>
   23630:	b	22974 <__assert_fail@plt+0x11768>
   23634:	ldr	r0, [pc, #-516]	; 23438 <__assert_fail@plt+0x1222c>
   23638:	bl	10f24 <printf@plt>
   2363c:	ldrh	r3, [sl, #66]	; 0x42
   23640:	lsr	r8, r4, #8
   23644:	orr	r8, r8, r5, lsl #24
   23648:	cmp	r3, #114	; 0x72
   2364c:	lsr	r9, r5, #8
   23650:	uxtb	r7, r4
   23654:	beq	23fd4 <__assert_fail@plt+0x12dc8>
   23658:	bls	236a8 <__assert_fail@plt+0x1249c>
   2365c:	ldr	r2, [pc, #-552]	; 2343c <__assert_fail@plt+0x12230>
   23660:	cmp	r3, r2
   23664:	beq	235f4 <__assert_fail@plt+0x123e8>
   23668:	bhi	2375c <__assert_fail@plt+0x12550>
   2366c:	cmp	r3, #181	; 0xb5
   23670:	bhi	23730 <__assert_fail@plt+0x12524>
   23674:	cmp	r3, #180	; 0xb4
   23678:	bcs	24034 <__assert_fail@plt+0x12e28>
   2367c:	cmp	r3, #140	; 0x8c
   23680:	beq	2401c <__assert_fail@plt+0x12e10>
   23684:	bls	23710 <__assert_fail@plt+0x12504>
   23688:	cmp	r3, #173	; 0xad
   2368c:	beq	242d8 <__assert_fail@plt+0x130cc>
   23690:	bhi	236fc <__assert_fail@plt+0x124f0>
   23694:	cmp	r3, #144	; 0x90
   23698:	beq	2296c <__assert_fail@plt+0x11760>
   2369c:	cmp	r3, #167	; 0xa7
   236a0:	beq	22a74 <__assert_fail@plt+0x11868>
   236a4:	b	22974 <__assert_fail@plt+0x11768>
   236a8:	cmp	r3, #48	; 0x30
   236ac:	bhi	2394c <__assert_fail@plt+0x12740>
   236b0:	cmp	r3, #46	; 0x2e
   236b4:	bcs	23fec <__assert_fail@plt+0x12de0>
   236b8:	cmp	r3, #18
   236bc:	beq	232d8 <__assert_fail@plt+0x120cc>
   236c0:	bls	23920 <__assert_fail@plt+0x12714>
   236c4:	cmp	r3, #36	; 0x24
   236c8:	beq	23efc <__assert_fail@plt+0x12cf0>
   236cc:	bhi	23900 <__assert_fail@plt+0x126f4>
   236d0:	cmp	r3, #21
   236d4:	beq	23f14 <__assert_fail@plt+0x12d08>
   236d8:	bhi	238ec <__assert_fail@plt+0x126e0>
   236dc:	cmp	r3, #19
   236e0:	beq	22d88 <__assert_fail@plt+0x11b7c>
   236e4:	cmp	r3, #20
   236e8:	bne	22974 <__assert_fail@plt+0x11768>
   236ec:	ldr	r3, [pc, #-520]	; 234ec <__assert_fail@plt+0x122e0>
   236f0:	add	r3, r3, r7, lsl #2
   236f4:	ldr	r5, [r3, #308]	; 0x134
   236f8:	b	22ea0 <__assert_fail@plt+0x11c94>
   236fc:	cmp	r3, #174	; 0xae
   23700:	beq	22a94 <__assert_fail@plt+0x11888>
   23704:	cmp	r3, #177	; 0xb1
   23708:	beq	22ae0 <__assert_fail@plt+0x118d4>
   2370c:	b	22974 <__assert_fail@plt+0x11768>
   23710:	cmp	r3, #120	; 0x78
   23714:	beq	242f0 <__assert_fail@plt+0x130e4>
   23718:	bls	237a8 <__assert_fail@plt+0x1259c>
   2371c:	cmp	r3, #135	; 0x87
   23720:	beq	22ac0 <__assert_fail@plt+0x118b4>
   23724:	cmp	r3, #138	; 0x8a
   23728:	beq	22b00 <__assert_fail@plt+0x118f4>
   2372c:	b	22974 <__assert_fail@plt+0x11768>
   23730:	cmp	r3, #197	; 0xc5
   23734:	beq	242c0 <__assert_fail@plt+0x130b4>
   23738:	bls	2389c <__assert_fail@plt+0x12690>
   2373c:	cmp	r3, #223	; 0xdf
   23740:	beq	242a8 <__assert_fail@plt+0x1309c>
   23744:	bhi	23888 <__assert_fail@plt+0x1267c>
   23748:	cmp	r3, #221	; 0xdd
   2374c:	beq	22b58 <__assert_fail@plt+0x1194c>
   23750:	cmp	r3, #222	; 0xde
   23754:	beq	22cc0 <__assert_fail@plt+0x11ab4>
   23758:	b	22974 <__assert_fail@plt+0x11768>
   2375c:	ldr	r2, [pc, #-804]	; 23440 <__assert_fail@plt+0x12234>
   23760:	cmp	r3, r2
   23764:	beq	23f8c <__assert_fail@plt+0x12d80>
   23768:	bhi	23804 <__assert_fail@plt+0x125f8>
   2376c:	ldr	r2, [pc, #-816]	; 23444 <__assert_fail@plt+0x12238>
   23770:	cmp	r3, r2
   23774:	beq	22f30 <__assert_fail@plt+0x11d24>
   23778:	bhi	237d8 <__assert_fail@plt+0x125cc>
   2377c:	ldr	r2, [pc, #-828]	; 23448 <__assert_fail@plt+0x1223c>
   23780:	cmp	r3, r2
   23784:	beq	24290 <__assert_fail@plt+0x13084>
   23788:	bhi	237bc <__assert_fail@plt+0x125b0>
   2378c:	ldr	r2, [pc, #-840]	; 2344c <__assert_fail@plt+0x12240>
   23790:	cmp	r3, r2
   23794:	beq	22f10 <__assert_fail@plt+0x11d04>
   23798:	ldr	r2, [pc, #-848]	; 23450 <__assert_fail@plt+0x12244>
   2379c:	cmp	r3, r2
   237a0:	beq	22f54 <__assert_fail@plt+0x11d48>
   237a4:	b	22974 <__assert_fail@plt+0x11768>
   237a8:	cmp	r3, #115	; 0x73
   237ac:	beq	22b20 <__assert_fail@plt+0x11914>
   237b0:	cmp	r3, #116	; 0x74
   237b4:	beq	22f30 <__assert_fail@plt+0x11d24>
   237b8:	b	22974 <__assert_fail@plt+0x11768>
   237bc:	ldr	r2, [pc, #-880]	; 23454 <__assert_fail@plt+0x12248>
   237c0:	cmp	r3, r2
   237c4:	beq	24278 <__assert_fail@plt+0x1306c>
   237c8:	ldr	r2, [pc, #-888]	; 23458 <__assert_fail@plt+0x1224c>
   237cc:	cmp	r3, r2
   237d0:	beq	22f84 <__assert_fail@plt+0x11d78>
   237d4:	b	22974 <__assert_fail@plt+0x11768>
   237d8:	ldr	r2, [pc, #-900]	; 2345c <__assert_fail@plt+0x12250>
   237dc:	cmp	r3, r2
   237e0:	beq	23fa4 <__assert_fail@plt+0x12d98>
   237e4:	bhi	23840 <__assert_fail@plt+0x12634>
   237e8:	ldr	r2, [pc, #-912]	; 23460 <__assert_fail@plt+0x12254>
   237ec:	cmp	r3, r2
   237f0:	beq	22fb8 <__assert_fail@plt+0x11dac>
   237f4:	ldr	r2, [pc, #-920]	; 23464 <__assert_fail@plt+0x12258>
   237f8:	cmp	r3, r2
   237fc:	beq	2313c <__assert_fail@plt+0x11f30>
   23800:	b	22974 <__assert_fail@plt+0x11768>
   23804:	ldr	r2, [pc, #-932]	; 23468 <__assert_fail@plt+0x1225c>
   23808:	cmp	r3, r2
   2380c:	beq	24064 <__assert_fail@plt+0x12e58>
   23810:	bls	2385c <__assert_fail@plt+0x12650>
   23814:	ldr	r2, [pc, #-944]	; 2346c <__assert_fail@plt+0x12260>
   23818:	cmp	r3, r2
   2381c:	beq	2404c <__assert_fail@plt+0x12e40>
   23820:	bhi	22ff0 <__assert_fail@plt+0x11de4>
   23824:	ldr	r2, [pc, #-956]	; 23470 <__assert_fail@plt+0x12264>
   23828:	cmp	r3, r2
   2382c:	beq	230c0 <__assert_fail@plt+0x11eb4>
   23830:	ldr	r2, [pc, #-964]	; 23474 <__assert_fail@plt+0x12268>
   23834:	cmp	r3, r2
   23838:	beq	230e4 <__assert_fail@plt+0x11ed8>
   2383c:	b	22974 <__assert_fail@plt+0x11768>
   23840:	ldr	r2, [pc, #-976]	; 23478 <__assert_fail@plt+0x1226c>
   23844:	cmp	r3, r2
   23848:	beq	23160 <__assert_fail@plt+0x11f54>
   2384c:	add	r2, r2, #38	; 0x26
   23850:	cmp	r3, r2
   23854:	beq	231f0 <__assert_fail@plt+0x11fe4>
   23858:	b	22974 <__assert_fail@plt+0x11768>
   2385c:	ldr	r2, [pc, #-1000]	; 2347c <__assert_fail@plt+0x12270>
   23860:	cmp	r3, r2
   23864:	beq	23f44 <__assert_fail@plt+0x12d38>
   23868:	bhi	238bc <__assert_fail@plt+0x126b0>
   2386c:	sub	r2, r2, #90	; 0x5a
   23870:	cmp	r3, r2
   23874:	beq	23118 <__assert_fail@plt+0x11f0c>
   23878:	add	r2, r2, #27
   2387c:	cmp	r3, r2
   23880:	beq	23184 <__assert_fail@plt+0x11f78>
   23884:	b	22974 <__assert_fail@plt+0x11768>
   23888:	cmp	r3, #243	; 0xf3
   2388c:	beq	22c74 <__assert_fail@plt+0x11a68>
   23890:	cmp	r3, #250	; 0xfa
   23894:	beq	22ce0 <__assert_fail@plt+0x11ad4>
   23898:	b	22974 <__assert_fail@plt+0x11768>
   2389c:	cmp	r3, #189	; 0xbd
   238a0:	beq	230c0 <__assert_fail@plt+0x11eb4>
   238a4:	bhi	238d8 <__assert_fail@plt+0x126cc>
   238a8:	cmp	r3, #183	; 0xb7
   238ac:	beq	22ca0 <__assert_fail@plt+0x11a94>
   238b0:	cmp	r3, #188	; 0xbc
   238b4:	beq	22d14 <__assert_fail@plt+0x11b08>
   238b8:	b	22974 <__assert_fail@plt+0x11768>
   238bc:	ldr	r2, [pc, #-1092]	; 23480 <__assert_fail@plt+0x12274>
   238c0:	cmp	r3, r2
   238c4:	beq	231a8 <__assert_fail@plt+0x11f9c>
   238c8:	ldr	r2, [pc, #-1100]	; 23484 <__assert_fail@plt+0x12278>
   238cc:	cmp	r3, r2
   238d0:	beq	231cc <__assert_fail@plt+0x11fc0>
   238d4:	b	22974 <__assert_fail@plt+0x11768>
   238d8:	cmp	r3, #191	; 0xbf
   238dc:	beq	22d34 <__assert_fail@plt+0x11b28>
   238e0:	cmp	r3, #195	; 0xc3
   238e4:	beq	22da8 <__assert_fail@plt+0x11b9c>
   238e8:	b	22974 <__assert_fail@plt+0x11768>
   238ec:	cmp	r3, #22
   238f0:	beq	231a8 <__assert_fail@plt+0x11f9c>
   238f4:	cmp	r3, #23
   238f8:	beq	22de4 <__assert_fail@plt+0x11bd8>
   238fc:	b	22974 <__assert_fail@plt+0x11768>
   23900:	cmp	r3, #42	; 0x2a
   23904:	beq	23f74 <__assert_fail@plt+0x12d68>
   23908:	bhi	23984 <__assert_fail@plt+0x12778>
   2390c:	cmp	r3, #39	; 0x27
   23910:	beq	22e10 <__assert_fail@plt+0x11c04>
   23914:	cmp	r3, #40	; 0x28
   23918:	beq	23210 <__assert_fail@plt+0x12004>
   2391c:	b	22974 <__assert_fail@plt+0x11768>
   23920:	cmp	r3, #7
   23924:	beq	23f5c <__assert_fail@plt+0x12d50>
   23928:	bls	23a40 <__assert_fail@plt+0x12834>
   2392c:	cmp	r3, #10
   23930:	beq	24004 <__assert_fail@plt+0x12df8>
   23934:	bhi	23a2c <__assert_fail@plt+0x12820>
   23938:	cmp	r3, #8
   2393c:	beq	24004 <__assert_fail@plt+0x12df8>
   23940:	cmp	r3, #9
   23944:	beq	22e50 <__assert_fail@plt+0x11c44>
   23948:	b	22974 <__assert_fail@plt+0x11768>
   2394c:	cmp	r3, #87	; 0x57
   23950:	beq	23f44 <__assert_fail@plt+0x12d38>
   23954:	bhi	239cc <__assert_fail@plt+0x127c0>
   23958:	cmp	r3, #76	; 0x4c
   2395c:	beq	23f2c <__assert_fail@plt+0x12d20>
   23960:	bhi	239ac <__assert_fail@plt+0x127a0>
   23964:	cmp	r3, #62	; 0x3e
   23968:	beq	24034 <__assert_fail@plt+0x12e28>
   2396c:	bhi	23998 <__assert_fail@plt+0x1278c>
   23970:	cmp	r3, #50	; 0x32
   23974:	beq	22e94 <__assert_fail@plt+0x11c88>
   23978:	cmp	r3, #53	; 0x35
   2397c:	beq	23270 <__assert_fail@plt+0x12064>
   23980:	b	22974 <__assert_fail@plt+0x11768>
   23984:	cmp	r3, #43	; 0x2b
   23988:	beq	232d8 <__assert_fail@plt+0x120cc>
   2398c:	cmp	r3, #45	; 0x2d
   23990:	beq	22da8 <__assert_fail@plt+0x11b9c>
   23994:	b	22974 <__assert_fail@plt+0x11768>
   23998:	cmp	r3, #70	; 0x46
   2399c:	beq	23270 <__assert_fail@plt+0x12064>
   239a0:	cmp	r3, #75	; 0x4b
   239a4:	beq	23298 <__assert_fail@plt+0x1208c>
   239a8:	b	22974 <__assert_fail@plt+0x11768>
   239ac:	cmp	r3, #84	; 0x54
   239b0:	beq	24278 <__assert_fail@plt+0x1306c>
   239b4:	bhi	239f8 <__assert_fail@plt+0x127ec>
   239b8:	cmp	r3, #80	; 0x50
   239bc:	beq	23304 <__assert_fail@plt+0x120f8>
   239c0:	cmp	r3, #83	; 0x53
   239c4:	beq	235f4 <__assert_fail@plt+0x123e8>
   239c8:	b	22974 <__assert_fail@plt+0x11768>
   239cc:	cmp	r3, #93	; 0x5d
   239d0:	beq	22da8 <__assert_fail@plt+0x11b9c>
   239d4:	bls	23a0c <__assert_fail@plt+0x12800>
   239d8:	cmp	r3, #101	; 0x65
   239dc:	beq	23f8c <__assert_fail@plt+0x12d80>
   239e0:	bhi	23334 <__assert_fail@plt+0x12128>
   239e4:	cmp	r3, #94	; 0x5e
   239e8:	beq	231cc <__assert_fail@plt+0x11fc0>
   239ec:	cmp	r3, #99	; 0x63
   239f0:	beq	233a8 <__assert_fail@plt+0x1219c>
   239f4:	b	22974 <__assert_fail@plt+0x11768>
   239f8:	cmp	r3, #85	; 0x55
   239fc:	beq	23160 <__assert_fail@plt+0x11f54>
   23a00:	cmp	r3, #86	; 0x56
   23a04:	beq	231f0 <__assert_fail@plt+0x11fe4>
   23a08:	b	22974 <__assert_fail@plt+0x11768>
   23a0c:	cmp	r3, #90	; 0x5a
   23a10:	beq	2404c <__assert_fail@plt+0x12e40>
   23a14:	bls	23a60 <__assert_fail@plt+0x12854>
   23a18:	cmp	r3, #91	; 0x5b
   23a1c:	beq	233a8 <__assert_fail@plt+0x1219c>
   23a20:	cmp	r3, #92	; 0x5c
   23a24:	beq	235d4 <__assert_fail@plt+0x123c8>
   23a28:	b	22974 <__assert_fail@plt+0x11768>
   23a2c:	cmp	r3, #11
   23a30:	beq	232d8 <__assert_fail@plt+0x120cc>
   23a34:	cmp	r3, #15
   23a38:	beq	22ebc <__assert_fail@plt+0x11cb0>
   23a3c:	b	22974 <__assert_fail@plt+0x11768>
   23a40:	cmp	r3, #3
   23a44:	beq	232b8 <__assert_fail@plt+0x120ac>
   23a48:	bls	23a74 <__assert_fail@plt+0x12868>
   23a4c:	cmp	r3, #4
   23a50:	beq	23250 <__assert_fail@plt+0x12044>
   23a54:	cmp	r3, #6
   23a58:	beq	232b8 <__assert_fail@plt+0x120ac>
   23a5c:	b	22974 <__assert_fail@plt+0x11768>
   23a60:	cmp	r3, #88	; 0x58
   23a64:	beq	23184 <__assert_fail@plt+0x11f78>
   23a68:	cmp	r3, #89	; 0x59
   23a6c:	beq	230e4 <__assert_fail@plt+0x11ed8>
   23a70:	b	22974 <__assert_fail@plt+0x11768>
   23a74:	cmp	r3, #2
   23a78:	beq	232d8 <__assert_fail@plt+0x120cc>
   23a7c:	b	22974 <__assert_fail@plt+0x11768>
   23a80:	ldr	r3, [sp, #172]	; 0xac
   23a84:	cmp	r3, #0
   23a88:	beq	229e0 <__assert_fail@plt+0x117d4>
   23a8c:	ldr	r1, [sp, #32]
   23a90:	ldr	r3, [sp, #72]	; 0x48
   23a94:	ldr	r2, [sp, #28]
   23a98:	add	r3, r3, r1
   23a9c:	ldr	r0, [pc, #-1564]	; 23488 <__assert_fail@plt+0x1227c>
   23aa0:	ldr	r2, [r2]
   23aa4:	ldrd	r8, [r3, #16]
   23aa8:	cmp	r2, #0
   23aac:	movne	r1, #12
   23ab0:	moveq	r1, #20
   23ab4:	mov	r2, #32
   23ab8:	bl	10f24 <printf@plt>
   23abc:	cmp	r8, #0
   23ac0:	sbcs	r3, r9, #0
   23ac4:	blt	23ce4 <__assert_fail@plt+0x12ad8>
   23ac8:	mov	r2, r8
   23acc:	mov	r3, r9
   23ad0:	ldr	r0, [pc, #-1612]	; 2348c <__assert_fail@plt+0x12280>
   23ad4:	bl	10f24 <printf@plt>
   23ad8:	b	229e0 <__assert_fail@plt+0x117d4>
   23adc:	mov	r7, #1
   23ae0:	b	22994 <__assert_fail@plt+0x11788>
   23ae4:	mov	r0, r5
   23ae8:	ldr	r1, [pc, #-1632]	; 23490 <__assert_fail@plt+0x12284>
   23aec:	bl	10f18 <strcmp@plt>
   23af0:	cmp	r0, #0
   23af4:	bne	229f8 <__assert_fail@plt+0x117ec>
   23af8:	lsr	r1, r4, #8
   23afc:	eor	r1, r1, #8388608	; 0x800000
   23b00:	sub	r1, r1, #8388608	; 0x800000
   23b04:	ldr	r0, [pc, #-1656]	; 23494 <__assert_fail@plt+0x12288>
   23b08:	bl	10f24 <printf@plt>
   23b0c:	b	229f8 <__assert_fail@plt+0x117ec>
   23b10:	lsr	r7, r4, #8
   23b14:	lsr	r4, r4, #16
   23b18:	uxtb	r7, r7
   23b1c:	cmp	r7, #255	; 0xff
   23b20:	uxtb	r4, r4
   23b24:	beq	23cf8 <__assert_fail@plt+0x12aec>
   23b28:	ldr	r3, [pc, #-1604]	; 234ec <__assert_fail@plt+0x122e0>
   23b2c:	cmp	r4, #255	; 0xff
   23b30:	add	r2, r3, r7, lsl #2
   23b34:	addne	r3, r3, r4, lsl #2
   23b38:	ldr	r8, [r2, #2352]	; 0x930
   23b3c:	ldr	r0, [pc, #-1664]	; 234c4 <__assert_fail@plt+0x122b8>
   23b40:	ldrne	r5, [r3, #2352]	; 0x930
   23b44:	bl	10f24 <printf@plt>
   23b48:	cmp	r8, #0
   23b4c:	beq	23d14 <__assert_fail@plt+0x12b08>
   23b50:	mov	r1, r8
   23b54:	ldr	r0, [pc, #-1732]	; 23498 <__assert_fail@plt+0x1228c>
   23b58:	bl	10f24 <printf@plt>
   23b5c:	ldr	r0, [pc, #-1716]	; 234b0 <__assert_fail@plt+0x122a4>
   23b60:	bl	10f24 <printf@plt>
   23b64:	cmp	r5, #0
   23b68:	beq	23d3c <__assert_fail@plt+0x12b30>
   23b6c:	mov	r1, r5
   23b70:	ldr	r0, [pc, #-1760]	; 23498 <__assert_fail@plt+0x1228c>
   23b74:	bl	10f24 <printf@plt>
   23b78:	ldr	r3, [pc, #-1720]	; 234c8 <__assert_fail@plt+0x122bc>
   23b7c:	mov	r0, #10
   23b80:	ldr	r1, [r3]
   23b84:	bl	11158 <putc@plt>
   23b88:	b	22a24 <__assert_fail@plt+0x11818>
   23b8c:	ldr	r3, [sp, #40]	; 0x28
   23b90:	lsl	fp, r8, #5
   23b94:	add	r3, r3, fp
   23b98:	add	r0, r3, #24
   23b9c:	add	r1, r3, #16
   23ba0:	str	r3, [sp, #52]	; 0x34
   23ba4:	add	r2, sp, #70	; 0x46
   23ba8:	add	r3, sp, #76	; 0x4c
   23bac:	str	r0, [sp, #8]
   23bb0:	str	r1, [sp, #4]
   23bb4:	str	r2, [sp, #16]
   23bb8:	str	r3, [sp, #12]
   23bbc:	ldr	r1, [sp, #176]	; 0xb0
   23bc0:	ldrd	r2, [sp, #164]	; 0xa4
   23bc4:	str	r8, [sp]
   23bc8:	mov	r0, sl
   23bcc:	bl	21e80 <__assert_fail@plt+0x10c74>
   23bd0:	mov	r9, r0
   23bd4:	mov	r0, #32
   23bd8:	bl	110c8 <putchar@plt>
   23bdc:	ldr	r3, [sp, #52]	; 0x34
   23be0:	ldrb	r3, [r3, #20]
   23be4:	and	r3, r3, #15
   23be8:	cmp	r3, #10
   23bec:	bne	23d98 <__assert_fail@plt+0x12b8c>
   23bf0:	ldr	r3, [sp, #28]
   23bf4:	ldr	r3, [r3]
   23bf8:	cmp	r3, #0
   23bfc:	ldr	r3, [sp, #164]	; 0xa4
   23c00:	moveq	r0, #14
   23c04:	movne	r0, #8
   23c08:	cmp	r3, #0
   23c0c:	mov	r8, r0
   23c10:	beq	23c2c <__assert_fail@plt+0x12a20>
   23c14:	ldr	r3, [sp, #52]	; 0x34
   23c18:	ldr	r2, [sp, #168]	; 0xa8
   23c1c:	ldr	r3, [r3, #16]
   23c20:	cmp	r3, #0
   23c24:	cmpne	r3, r2
   23c28:	bcc	24308 <__assert_fail@plt+0x130fc>
   23c2c:	ldr	r1, [pc, #-1944]	; 2349c <__assert_fail@plt+0x12290>
   23c30:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   23c34:	cmp	r9, #0
   23c38:	mov	r3, r0
   23c3c:	beq	23c68 <__assert_fail@plt+0x12a5c>
   23c40:	str	r0, [sp, #56]	; 0x38
   23c44:	ldr	r0, [sp, #76]	; 0x4c
   23c48:	ldr	r2, [pc, #-1920]	; 234d0 <__assert_fail@plt+0x122c4>
   23c4c:	ldr	r3, [pc, #-1920]	; 234d4 <__assert_fail@plt+0x122c8>
   23c50:	cmp	r0, #2
   23c54:	movne	r3, r2
   23c58:	mov	r0, r3
   23c5c:	mov	r1, r9
   23c60:	bl	10f24 <printf@plt>
   23c64:	ldr	r3, [sp, #56]	; 0x38
   23c68:	cmp	r8, r3
   23c6c:	addcs	r1, r8, #1
   23c70:	subcs	r1, r1, r3
   23c74:	movcc	r1, #1
   23c78:	ldr	r2, [pc, #-1984]	; 234c0 <__assert_fail@plt+0x122b4>
   23c7c:	ldr	r0, [pc, #-2020]	; 234a0 <__assert_fail@plt+0x12294>
   23c80:	bl	10f24 <printf@plt>
   23c84:	ldr	r3, [sp, #52]	; 0x34
   23c88:	ldr	r1, [r3, #16]
   23c8c:	cmp	r1, #0
   23c90:	bne	23d58 <__assert_fail@plt+0x12b4c>
   23c94:	ldrb	r3, [r3, #20]
   23c98:	and	r3, r3, #15
   23c9c:	cmp	r3, #3
   23ca0:	ldrne	r1, [pc, #-2052]	; 234a4 <__assert_fail@plt+0x12298>
   23ca4:	beq	23e74 <__assert_fail@plt+0x12c68>
   23ca8:	mov	r0, #22
   23cac:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   23cb0:	ldr	r3, [sp, #172]	; 0xac
   23cb4:	cmp	r3, #0
   23cb8:	beq	229e0 <__assert_fail@plt+0x117d4>
   23cbc:	ldr	r2, [sp, #32]
   23cc0:	ldr	r3, [sp, #72]	; 0x48
   23cc4:	add	r3, r3, r2
   23cc8:	ldrd	r2, [r3, #16]
   23ccc:	cmp	r2, #0
   23cd0:	sbcs	r1, r3, #0
   23cd4:	blt	23e60 <__assert_fail@plt+0x12c54>
   23cd8:	ldr	r0, [pc, #-2104]	; 234a8 <__assert_fail@plt+0x1229c>
   23cdc:	bl	10f24 <printf@plt>
   23ce0:	b	229e0 <__assert_fail@plt+0x117d4>
   23ce4:	rsbs	r2, r8, #0
   23ce8:	rsc	r3, r9, #0
   23cec:	ldr	r0, [pc, #-2120]	; 234ac <__assert_fail@plt+0x122a0>
   23cf0:	bl	10f24 <printf@plt>
   23cf4:	b	229e0 <__assert_fail@plt+0x117d4>
   23cf8:	cmp	r4, #255	; 0xff
   23cfc:	beq	23ddc <__assert_fail@plt+0x12bd0>
   23d00:	ldr	r3, [pc, #-2076]	; 234ec <__assert_fail@plt+0x122e0>
   23d04:	ldr	r0, [pc, #-2120]	; 234c4 <__assert_fail@plt+0x122b8>
   23d08:	add	r3, r3, r4, lsl #2
   23d0c:	ldr	r5, [r3, #2352]	; 0x930
   23d10:	bl	10f24 <printf@plt>
   23d14:	mov	r2, #5
   23d18:	ldr	r1, [pc, #-2156]	; 234b4 <__assert_fail@plt+0x122a8>
   23d1c:	mov	r0, #0
   23d20:	bl	10f90 <dcgettext@plt>
   23d24:	mov	r1, r7
   23d28:	bl	10f24 <printf@plt>
   23d2c:	ldr	r0, [pc, #-2180]	; 234b0 <__assert_fail@plt+0x122a4>
   23d30:	bl	10f24 <printf@plt>
   23d34:	cmp	r5, #0
   23d38:	bne	23b6c <__assert_fail@plt+0x12960>
   23d3c:	mov	r0, r5
   23d40:	mov	r2, #5
   23d44:	ldr	r1, [pc, #-2200]	; 234b4 <__assert_fail@plt+0x122a8>
   23d48:	bl	10f90 <dcgettext@plt>
   23d4c:	mov	r1, r4
   23d50:	bl	10f24 <printf@plt>
   23d54:	b	23b78 <__assert_fail@plt+0x1296c>
   23d58:	ldr	r3, [sp, #164]	; 0xa4
   23d5c:	cmp	r3, #0
   23d60:	beq	24314 <__assert_fail@plt+0x13108>
   23d64:	ldr	r3, [sp, #168]	; 0xa8
   23d68:	cmp	r1, r3
   23d6c:	bcc	23e24 <__assert_fail@plt+0x12c18>
   23d70:	mov	r2, #5
   23d74:	ldr	r1, [pc, #-2244]	; 234b8 <__assert_fail@plt+0x122ac>
   23d78:	mov	r0, #0
   23d7c:	bl	10f90 <dcgettext@plt>
   23d80:	ldr	r3, [sp, #52]	; 0x34
   23d84:	ldr	r1, [r3, #16]
   23d88:	bl	548ac <error@@Base>
   23d8c:	mov	r3, #0
   23d90:	str	r3, [sp, #48]	; 0x30
   23d94:	b	23cb0 <__assert_fail@plt+0x12aa4>
   23d98:	ldr	r3, [sp, #40]	; 0x28
   23d9c:	mov	r2, #6
   23da0:	ldrd	r0, [r3, fp]
   23da4:	bl	14244 <__assert_fail@plt+0x3038>
   23da8:	ldr	r3, [sp, #28]
   23dac:	ldr	r2, [pc, #-2296]	; 234bc <__assert_fail@plt+0x122b0>
   23db0:	ldr	r0, [r3]
   23db4:	ldr	r3, [pc, #-2300]	; 234c0 <__assert_fail@plt+0x122b4>
   23db8:	cmp	r0, #0
   23dbc:	movne	r0, r2
   23dc0:	moveq	r0, r3
   23dc4:	bl	10f24 <printf@plt>
   23dc8:	b	23c84 <__assert_fail@plt+0x12a78>
   23dcc:	orrs	r3, r8, r9
   23dd0:	beq	229f8 <__assert_fail@plt+0x117ec>
   23dd4:	mov	r7, #1
   23dd8:	b	2299c <__assert_fail@plt+0x11790>
   23ddc:	ldr	r0, [pc, #-2336]	; 234c4 <__assert_fail@plt+0x122b8>
   23de0:	bl	10f24 <printf@plt>
   23de4:	b	23d14 <__assert_fail@plt+0x12b08>
   23de8:	ldr	r3, [pc, #-2344]	; 234c8 <__assert_fail@plt+0x122bc>
   23dec:	mov	r0, #32
   23df0:	ldr	r1, [r3]
   23df4:	bl	11158 <putc@plt>
   23df8:	mov	r2, #5
   23dfc:	ldr	r1, [pc, #-2360]	; 234cc <__assert_fail@plt+0x122c0>
   23e00:	mov	r0, r7
   23e04:	bl	10f90 <dcgettext@plt>
   23e08:	ldr	r3, [sp, #72]	; 0x48
   23e0c:	ldr	r2, [sp, #32]
   23e10:	str	r7, [sp, #48]	; 0x30
   23e14:	add	r3, r3, r2
   23e18:	ldr	r1, [r3, #16]
   23e1c:	bl	10f24 <printf@plt>
   23e20:	b	229f8 <__assert_fail@plt+0x117ec>
   23e24:	ldr	r3, [sp, #164]	; 0xa4
   23e28:	mov	r0, #22
   23e2c:	add	r1, r3, r1
   23e30:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   23e34:	cmp	r9, #0
   23e38:	beq	23cb0 <__assert_fail@plt+0x12aa4>
   23e3c:	ldr	r0, [sp, #76]	; 0x4c
   23e40:	ldr	r3, [pc, #-2424]	; 234d0 <__assert_fail@plt+0x122c4>
   23e44:	ldr	r2, [pc, #-2424]	; 234d4 <__assert_fail@plt+0x122c8>
   23e48:	cmp	r0, #2
   23e4c:	movne	r2, r3
   23e50:	mov	r1, r9
   23e54:	mov	r0, r2
   23e58:	bl	10f24 <printf@plt>
   23e5c:	b	23cb0 <__assert_fail@plt+0x12aa4>
   23e60:	rsbs	r2, r2, #0
   23e64:	rsc	r3, r3, #0
   23e68:	ldr	r0, [pc, #-2456]	; 234d8 <__assert_fail@plt+0x122cc>
   23e6c:	bl	10f24 <printf@plt>
   23e70:	b	229e0 <__assert_fail@plt+0x117d4>
   23e74:	ldr	r3, [sp, #52]	; 0x34
   23e78:	ldr	r2, [r3, #24]
   23e7c:	ldr	r3, [sl, #84]	; 0x54
   23e80:	cmp	r2, r3
   23e84:	bcs	24334 <__assert_fail@plt+0x13128>
   23e88:	add	r2, r2, r2, lsl #3
   23e8c:	ldr	r3, [sl, #96]	; 0x60
   23e90:	adds	r0, r3, r2, lsl #3
   23e94:	beq	2441c <__assert_fail@plt+0x13210>
   23e98:	ldr	r0, [sl, #104]	; 0x68
   23e9c:	cmp	r0, #0
   23ea0:	beq	24500 <__assert_fail@plt+0x132f4>
   23ea4:	ldr	r3, [r3, r2, lsl #3]
   23ea8:	ldr	r2, [sl, #108]	; 0x6c
   23eac:	cmp	r3, r2
   23eb0:	addcc	r1, r0, r3
   23eb4:	bcc	23ca8 <__assert_fail@plt+0x12a9c>
   23eb8:	mov	r0, r1
   23ebc:	mov	r2, #5
   23ec0:	ldr	r1, [pc, #-2540]	; 234dc <__assert_fail@plt+0x122d0>
   23ec4:	bl	10f90 <dcgettext@plt>
   23ec8:	mov	r1, r0
   23ecc:	b	23ca8 <__assert_fail@plt+0x12a9c>
   23ed0:	ldr	r1, [pc, #-2552]	; 234e0 <__assert_fail@plt+0x122d4>
   23ed4:	ldr	r0, [sp, #172]	; 0xac
   23ed8:	bl	10f90 <dcgettext@plt>
   23edc:	bl	10f24 <printf@plt>
   23ee0:	b	22880 <__assert_fail@plt+0x11674>
   23ee4:	mov	r2, #5
   23ee8:	ldr	r1, [pc, #-2572]	; 234e4 <__assert_fail@plt+0x122d8>
   23eec:	ldr	r0, [sp, #172]	; 0xac
   23ef0:	bl	10f90 <dcgettext@plt>
   23ef4:	bl	10f24 <printf@plt>
   23ef8:	b	22880 <__assert_fail@plt+0x11674>
   23efc:	cmp	r7, #228	; 0xe4
   23f00:	bhi	22974 <__assert_fail@plt+0x11768>
   23f04:	ldr	r3, [pc, #-2596]	; 234e8 <__assert_fail@plt+0x122dc>
   23f08:	add	r3, r3, r7, lsl #2
   23f0c:	ldr	r5, [r3, #3936]	; 0xf60
   23f10:	b	22ea0 <__assert_fail@plt+0x11c94>
   23f14:	cmp	r7, #254	; 0xfe
   23f18:	bhi	22974 <__assert_fail@plt+0x11768>
   23f1c:	ldr	r3, [pc, #-2616]	; 234ec <__assert_fail@plt+0x122e0>
   23f20:	add	r3, r3, r7, lsl #2
   23f24:	ldr	r5, [r3, #1332]	; 0x534
   23f28:	b	22ea0 <__assert_fail@plt+0x11c94>
   23f2c:	cmp	r7, #31
   23f30:	bhi	22974 <__assert_fail@plt+0x11768>
   23f34:	ldr	r3, [pc, #-2636]	; 234f0 <__assert_fail@plt+0x122e4>
   23f38:	add	r3, r3, r7, lsl #2
   23f3c:	ldr	r5, [r3, #-1204]	; 0xfffffb4c
   23f40:	b	22ea0 <__assert_fail@plt+0x11c94>
   23f44:	cmp	r7, #51	; 0x33
   23f48:	bhi	22974 <__assert_fail@plt+0x11768>
   23f4c:	ldr	r3, [pc, #-2664]	; 234ec <__assert_fail@plt+0x122e0>
   23f50:	add	r3, r3, r7, lsl #2
   23f54:	ldr	r5, [r3, #-3332]	; 0xfffff2fc
   23f58:	b	22ea0 <__assert_fail@plt+0x11c94>
   23f5c:	cmp	r7, #224	; 0xe0
   23f60:	bhi	22974 <__assert_fail@plt+0x11768>
   23f64:	ldr	r3, [pc, #-2684]	; 234f0 <__assert_fail@plt+0x122e4>
   23f68:	add	r3, r3, r7, lsl #2
   23f6c:	ldr	r5, [r3, #-1076]	; 0xfffffbcc
   23f70:	b	22ea0 <__assert_fail@plt+0x11c94>
   23f74:	cmp	r7, #255	; 0xff
   23f78:	bhi	22974 <__assert_fail@plt+0x11768>
   23f7c:	ldr	r3, [pc, #-2712]	; 234ec <__assert_fail@plt+0x122e0>
   23f80:	add	r3, r3, r7, lsl #2
   23f84:	ldr	r5, [r3, #-2996]	; 0xfffff44c
   23f88:	b	22ea0 <__assert_fail@plt+0x11c94>
   23f8c:	cmp	r7, #14
   23f90:	bhi	22974 <__assert_fail@plt+0x11768>
   23f94:	ldr	r3, [pc, #-2732]	; 234f0 <__assert_fail@plt+0x122e4>
   23f98:	add	r3, r3, r7, lsl #2
   23f9c:	ldr	r5, [r3, #2216]	; 0x8a8
   23fa0:	b	22ea0 <__assert_fail@plt+0x11c94>
   23fa4:	cmp	r7, #9
   23fa8:	bhi	22974 <__assert_fail@plt+0x11768>
   23fac:	ldr	r3, [pc, #-2760]	; 234ec <__assert_fail@plt+0x122e0>
   23fb0:	add	r3, r3, r7, lsl #2
   23fb4:	ldr	r5, [r3, #-3036]	; 0xfffff424
   23fb8:	b	22ea0 <__assert_fail@plt+0x11c94>
   23fbc:	cmp	r7, #243	; 0xf3
   23fc0:	bhi	22974 <__assert_fail@plt+0x11768>
   23fc4:	ldr	r3, [pc, #-2780]	; 234f0 <__assert_fail@plt+0x122e4>
   23fc8:	add	r3, r3, r7, lsl #2
   23fcc:	ldr	r5, [r3, #2656]	; 0xa60
   23fd0:	b	22ea0 <__assert_fail@plt+0x11c94>
   23fd4:	cmp	r7, #20
   23fd8:	bhi	22974 <__assert_fail@plt+0x11768>
   23fdc:	ldr	r3, [pc, #-2804]	; 234f0 <__assert_fail@plt+0x122e4>
   23fe0:	add	r3, r3, r7, lsl #2
   23fe4:	ldr	r5, [r3, #1976]	; 0x7b8
   23fe8:	b	22ea0 <__assert_fail@plt+0x11c94>
   23fec:	cmp	r7, #141	; 0x8d
   23ff0:	bhi	22974 <__assert_fail@plt+0x11768>
   23ff4:	ldr	r3, [pc, #-2828]	; 234f0 <__assert_fail@plt+0x122e4>
   23ff8:	add	r3, r3, r7, lsl #2
   23ffc:	ldr	r5, [r3, #-1980]	; 0xfffff844
   24000:	b	22ea0 <__assert_fail@plt+0x11c94>
   24004:	cmp	r7, #254	; 0xfe
   24008:	bhi	22974 <__assert_fail@plt+0x11768>
   2400c:	ldr	r3, [pc, #-2856]	; 234ec <__assert_fail@plt+0x122e0>
   24010:	add	r3, r3, r7, lsl #2
   24014:	ldr	r5, [r3, #2352]	; 0x930
   24018:	b	22ea0 <__assert_fail@plt+0x11c94>
   2401c:	cmp	r7, #255	; 0xff
   24020:	bhi	22974 <__assert_fail@plt+0x11768>
   24024:	ldr	r3, [pc, #-2828]	; 23520 <__assert_fail@plt+0x12314>
   24028:	add	r3, r3, r7, lsl #2
   2402c:	ldr	r5, [r3, #-2712]	; 0xfffff568
   24030:	b	22ea0 <__assert_fail@plt+0x11c94>
   24034:	cmp	r7, #251	; 0xfb
   24038:	bhi	22974 <__assert_fail@plt+0x11768>
   2403c:	ldr	r3, [pc, #-2900]	; 234f0 <__assert_fail@plt+0x122e4>
   24040:	add	r3, r3, r7, lsl #2
   24044:	ldr	r5, [r3, #-176]	; 0xffffff50
   24048:	b	22ea0 <__assert_fail@plt+0x11c94>
   2404c:	cmp	r7, #7
   24050:	bhi	22974 <__assert_fail@plt+0x11768>
   24054:	ldr	r3, [pc, #-2928]	; 234ec <__assert_fail@plt+0x122e0>
   24058:	add	r3, r3, r7, lsl #2
   2405c:	ldr	r5, [r3, #-1832]	; 0xfffff8d8
   24060:	b	22ea0 <__assert_fail@plt+0x11c94>
   24064:	cmp	r7, #129	; 0x81
   24068:	ldrls	pc, [pc, r7, lsl #2]
   2406c:	b	22974 <__assert_fail@plt+0x11768>
   24070:	andeq	r4, r2, r0, ror #8
   24074:	andeq	r4, r2, r0, lsr #9
   24078:	muleq	r2, r8, r4
   2407c:	muleq	r2, r0, r4
   24080:	andeq	r4, r2, r8, lsl #9
   24084:	andeq	r4, r2, r0, lsl #9
   24088:	andeq	r4, r2, r8, ror r4
   2408c:	andeq	r4, r2, r0, ror r4
   24090:	andeq	r4, r2, r8, ror #8
   24094:	andeq	r4, r2, r8, asr #8
   24098:	andeq	r4, r2, r0, asr #8
   2409c:	andeq	r4, r2, r8, lsr r4
   240a0:	andeq	r4, r2, r0, lsr r4
   240a4:	andeq	r2, r2, r4, ror r9
   240a8:	andeq	r2, r2, r4, ror r9
   240ac:	andeq	r2, r2, r4, ror r9
   240b0:	andeq	r2, r2, r4, ror r9
   240b4:	andeq	r2, r2, r4, ror r9
   240b8:	andeq	r2, r2, r4, ror r9
   240bc:	andeq	r2, r2, r4, ror r9
   240c0:	andeq	r2, r2, r4, ror r9
   240c4:	andeq	r2, r2, r4, ror r9
   240c8:	andeq	r2, r2, r4, ror r9
   240cc:	andeq	r2, r2, r4, ror r9
   240d0:	andeq	r2, r2, r4, ror r9
   240d4:	andeq	r2, r2, r4, ror r9
   240d8:	andeq	r2, r2, r4, ror r9
   240dc:	andeq	r2, r2, r4, ror r9
   240e0:	andeq	r2, r2, r4, ror r9
   240e4:	andeq	r2, r2, r4, ror r9
   240e8:	andeq	r2, r2, r4, ror r9
   240ec:	andeq	r2, r2, r4, ror r9
   240f0:	andeq	r2, r2, r4, ror r9
   240f4:	andeq	r2, r2, r4, ror r9
   240f8:	andeq	r2, r2, r4, ror r9
   240fc:	andeq	r2, r2, r4, ror r9
   24100:	andeq	r2, r2, r4, ror r9
   24104:	andeq	r2, r2, r4, ror r9
   24108:	andeq	r2, r2, r4, ror r9
   2410c:	andeq	r2, r2, r4, ror r9
   24110:	andeq	r2, r2, r4, ror r9
   24114:	andeq	r2, r2, r4, ror r9
   24118:	andeq	r2, r2, r4, ror r9
   2411c:	andeq	r2, r2, r4, ror r9
   24120:	andeq	r2, r2, r4, ror r9
   24124:	andeq	r2, r2, r4, ror r9
   24128:	andeq	r2, r2, r4, ror r9
   2412c:	andeq	r2, r2, r4, ror r9
   24130:	andeq	r2, r2, r4, ror r9
   24134:	andeq	r2, r2, r4, ror r9
   24138:	andeq	r2, r2, r4, ror r9
   2413c:	andeq	r2, r2, r4, ror r9
   24140:	andeq	r2, r2, r4, ror r9
   24144:	andeq	r2, r2, r4, ror r9
   24148:	andeq	r2, r2, r4, ror r9
   2414c:	andeq	r2, r2, r4, ror r9
   24150:	andeq	r2, r2, r4, ror r9
   24154:	andeq	r2, r2, r4, ror r9
   24158:	andeq	r2, r2, r4, ror r9
   2415c:	andeq	r2, r2, r4, ror r9
   24160:	andeq	r2, r2, r4, ror r9
   24164:	andeq	r2, r2, r4, ror r9
   24168:	andeq	r2, r2, r4, ror r9
   2416c:	andeq	r2, r2, r4, ror r9
   24170:	andeq	r2, r2, r4, ror r9
   24174:	andeq	r2, r2, r4, ror r9
   24178:	andeq	r2, r2, r4, ror r9
   2417c:	andeq	r2, r2, r4, ror r9
   24180:	andeq	r2, r2, r4, ror r9
   24184:	andeq	r2, r2, r4, ror r9
   24188:	andeq	r2, r2, r4, ror r9
   2418c:	andeq	r2, r2, r4, ror r9
   24190:	andeq	r2, r2, r4, ror r9
   24194:	andeq	r2, r2, r4, ror r9
   24198:	andeq	r2, r2, r4, ror r9
   2419c:	andeq	r2, r2, r4, ror r9
   241a0:	andeq	r2, r2, r4, ror r9
   241a4:	andeq	r2, r2, r4, ror r9
   241a8:	andeq	r2, r2, r4, ror r9
   241ac:	andeq	r2, r2, r4, ror r9
   241b0:	andeq	r2, r2, r4, ror r9
   241b4:	andeq	r2, r2, r4, ror r9
   241b8:	andeq	r2, r2, r4, ror r9
   241bc:	andeq	r2, r2, r4, ror r9
   241c0:	andeq	r2, r2, r4, ror r9
   241c4:	andeq	r2, r2, r4, ror r9
   241c8:	andeq	r2, r2, r4, ror r9
   241cc:	andeq	r2, r2, r4, ror r9
   241d0:	andeq	r2, r2, r4, ror r9
   241d4:	andeq	r2, r2, r4, ror r9
   241d8:	andeq	r2, r2, r4, ror r9
   241dc:	andeq	r2, r2, r4, ror r9
   241e0:	andeq	r2, r2, r4, ror r9
   241e4:	andeq	r2, r2, r4, ror r9
   241e8:	andeq	r2, r2, r4, ror r9
   241ec:	andeq	r2, r2, r4, ror r9
   241f0:	andeq	r2, r2, r4, ror r9
   241f4:	andeq	r2, r2, r4, ror r9
   241f8:	andeq	r2, r2, r4, ror r9
   241fc:	andeq	r2, r2, r4, ror r9
   24200:	andeq	r2, r2, r4, ror r9
   24204:	andeq	r2, r2, r4, ror r9
   24208:	andeq	r2, r2, r4, ror r9
   2420c:	andeq	r2, r2, r4, ror r9
   24210:	andeq	r2, r2, r4, ror r9
   24214:	andeq	r2, r2, r4, ror r9
   24218:	andeq	r2, r2, r4, ror r9
   2421c:	andeq	r2, r2, r4, ror r9
   24220:	andeq	r2, r2, r4, ror r9
   24224:	andeq	r2, r2, r4, ror r9
   24228:	andeq	r2, r2, r4, ror r9
   2422c:	andeq	r2, r2, r4, ror r9
   24230:	andeq	r2, r2, r4, ror r9
   24234:	andeq	r2, r2, r4, ror r9
   24238:	andeq	r2, r2, r4, ror r9
   2423c:	andeq	r2, r2, r4, ror r9
   24240:	andeq	r2, r2, r4, ror r9
   24244:	andeq	r2, r2, r4, ror r9
   24248:	andeq	r2, r2, r4, ror r9
   2424c:	andeq	r2, r2, r4, ror r9
   24250:	andeq	r2, r2, r4, ror r9
   24254:	andeq	r2, r2, r4, ror r9
   24258:	andeq	r2, r2, r4, ror r9
   2425c:	andeq	r2, r2, r4, ror r9
   24260:	andeq	r2, r2, r4, ror r9
   24264:	andeq	r2, r2, r4, ror r9
   24268:	andeq	r2, r2, r4, ror r9
   2426c:	andeq	r2, r2, r4, ror r9
   24270:	andeq	r4, r2, r8, asr r4
   24274:	andeq	r4, r2, r0, asr r4
   24278:	cmp	r7, #12
   2427c:	bhi	22974 <__assert_fail@plt+0x11768>
   24280:	ldr	r3, [pc, #-3484]	; 234ec <__assert_fail@plt+0x122e0>
   24284:	add	r3, r3, r7, lsl #2
   24288:	ldr	r5, [r3, #-1800]	; 0xfffff8f8
   2428c:	b	22ea0 <__assert_fail@plt+0x11c94>
   24290:	cmp	r7, #6
   24294:	bhi	22974 <__assert_fail@plt+0x11768>
   24298:	ldr	r3, [pc, #-3504]	; 234f0 <__assert_fail@plt+0x122e4>
   2429c:	add	r3, r3, r7, lsl #2
   242a0:	ldr	r5, [r3, #2628]	; 0xa44
   242a4:	b	22ea0 <__assert_fail@plt+0x11c94>
   242a8:	cmp	r7, #2
   242ac:	bhi	22974 <__assert_fail@plt+0x11768>
   242b0:	ldr	r3, [pc, #-3532]	; 234ec <__assert_fail@plt+0x122e0>
   242b4:	add	r3, r3, r7, lsl #2
   242b8:	ldr	r5, [r3, #-688]	; 0xfffffd50
   242bc:	b	22ea0 <__assert_fail@plt+0x11c94>
   242c0:	cmp	r7, #150	; 0x96
   242c4:	bhi	22974 <__assert_fail@plt+0x11768>
   242c8:	ldr	r3, [pc, #-3552]	; 234f0 <__assert_fail@plt+0x122e4>
   242cc:	add	r3, r3, r7, lsl #2
   242d0:	ldr	r5, [r3, #3980]	; 0xf8c
   242d4:	b	22ea0 <__assert_fail@plt+0x11c94>
   242d8:	cmp	r7, #150	; 0x96
   242dc:	bhi	22974 <__assert_fail@plt+0x11768>
   242e0:	ldr	r3, [pc, #-3528]	; 23520 <__assert_fail@plt+0x12314>
   242e4:	add	r3, r3, r7, lsl #2
   242e8:	ldr	r5, [r3, #-3600]	; 0xfffff1f0
   242ec:	b	22ea0 <__assert_fail@plt+0x11c94>
   242f0:	cmp	r7, #12
   242f4:	bhi	22974 <__assert_fail@plt+0x11768>
   242f8:	ldr	r3, [pc, #-3600]	; 234f0 <__assert_fail@plt+0x122e4>
   242fc:	add	r3, r3, r7, lsl #2
   24300:	ldr	r5, [r3, #2576]	; 0xa10
   24304:	b	22ea0 <__assert_fail@plt+0x11c94>
   24308:	ldr	r2, [sp, #164]	; 0xa4
   2430c:	add	r1, r2, r3
   24310:	b	23c30 <__assert_fail@plt+0x12a24>
   24314:	mov	r2, #5
   24318:	ldr	r1, [pc, #-3628]	; 234f4 <__assert_fail@plt+0x122e8>
   2431c:	mov	r0, r3
   24320:	bl	10f90 <dcgettext@plt>
   24324:	ldr	r3, [sp, #52]	; 0x34
   24328:	ldr	r1, [r3, #16]
   2432c:	bl	10f24 <printf@plt>
   24330:	b	23cb0 <__assert_fail@plt+0x12aa4>
   24334:	cmn	r2, #15
   24338:	beq	24414 <__assert_fail@plt+0x13208>
   2433c:	cmn	r2, #14
   24340:	beq	244e0 <__assert_fail@plt+0x132d4>
   24344:	ldrh	r3, [sl, #66]	; 0x42
   24348:	cmp	r3, #8
   2434c:	beq	24514 <__assert_fail@plt+0x13308>
   24350:	cmp	r3, #140	; 0x8c
   24354:	beq	24534 <__assert_fail@plt+0x13328>
   24358:	cmp	r3, #180	; 0xb4
   2435c:	cmpne	r3, #62	; 0x3e
   24360:	bne	2454c <__assert_fail@plt+0x13340>
   24364:	cmn	r2, #254	; 0xfe
   24368:	beq	2455c <__assert_fail@plt+0x13350>
   2436c:	cmp	r3, #50	; 0x32
   24370:	bne	24390 <__assert_fail@plt+0x13184>
   24374:	ldrb	r3, [sl, #23]
   24378:	cmp	r3, #1
   2437c:	cmneq	r2, #256	; 0x100
   24380:	beq	24574 <__assert_fail@plt+0x13368>
   24384:	cmp	r3, #13
   24388:	cmneq	r2, #224	; 0xe0
   2438c:	beq	2456c <__assert_fail@plt+0x13360>
   24390:	ldr	r1, [pc, #-3744]	; 234f8 <__assert_fail@plt+0x122ec>
   24394:	add	r0, sp, #80	; 0x50
   24398:	bl	1114c <sprintf@plt>
   2439c:	add	r1, sp, #80	; 0x50
   243a0:	b	23ca8 <__assert_fail@plt+0x12a9c>
   243a4:	ldr	r3, [pc, #-3724]	; 23520 <__assert_fail@plt+0x12314>
   243a8:	add	r3, r3, r7, lsl #2
   243ac:	ldr	r5, [r3, #-256]	; 0xffffff00
   243b0:	b	22ea0 <__assert_fail@plt+0x11c94>
   243b4:	ldr	r5, [pc, #-3776]	; 234fc <__assert_fail@plt+0x122f0>
   243b8:	b	22b90 <__assert_fail@plt+0x11984>
   243bc:	ldr	r5, [pc, #-3780]	; 23500 <__assert_fail@plt+0x122f4>
   243c0:	b	22b90 <__assert_fail@plt+0x11984>
   243c4:	ldr	r5, [pc, #-3784]	; 23504 <__assert_fail@plt+0x122f8>
   243c8:	b	22b90 <__assert_fail@plt+0x11984>
   243cc:	ldr	r5, [pc, #-3788]	; 23508 <__assert_fail@plt+0x122fc>
   243d0:	b	22b90 <__assert_fail@plt+0x11984>
   243d4:	ldr	r5, [pc, #-3792]	; 2350c <__assert_fail@plt+0x12300>
   243d8:	b	22b90 <__assert_fail@plt+0x11984>
   243dc:	ldr	r5, [pc, #-3796]	; 23510 <__assert_fail@plt+0x12304>
   243e0:	b	22b90 <__assert_fail@plt+0x11984>
   243e4:	ldr	r5, [pc, #-3800]	; 23514 <__assert_fail@plt+0x12308>
   243e8:	b	22b90 <__assert_fail@plt+0x11984>
   243ec:	ldr	r5, [pc, #-3804]	; 23518 <__assert_fail@plt+0x1230c>
   243f0:	b	22b90 <__assert_fail@plt+0x11984>
   243f4:	ldr	r5, [pc, #-3808]	; 2351c <__assert_fail@plt+0x12310>
   243f8:	b	22b90 <__assert_fail@plt+0x11984>
   243fc:	cmp	r7, #31
   24400:	bhi	22974 <__assert_fail@plt+0x11768>
   24404:	ldr	r3, [pc, #-3820]	; 23520 <__assert_fail@plt+0x12314>
   24408:	add	r3, r3, r7, lsl #2
   2440c:	ldr	r5, [r3, #28]
   24410:	b	22ea0 <__assert_fail@plt+0x11c94>
   24414:	ldr	r1, [pc, #-3832]	; 23524 <__assert_fail@plt+0x12318>
   24418:	b	23ca8 <__assert_fail@plt+0x12a9c>
   2441c:	ldr	r1, [pc, #-3836]	; 23528 <__assert_fail@plt+0x1231c>
   24420:	mov	r2, #5
   24424:	bl	10f90 <dcgettext@plt>
   24428:	mov	r1, r0
   2442c:	b	23ca8 <__assert_fail@plt+0x12a9c>
   24430:	ldr	r5, [pc, #-3852]	; 2352c <__assert_fail@plt+0x12320>
   24434:	b	22b90 <__assert_fail@plt+0x11984>
   24438:	ldr	r5, [pc, #-3856]	; 23530 <__assert_fail@plt+0x12324>
   2443c:	b	22b90 <__assert_fail@plt+0x11984>
   24440:	ldr	r5, [pc, #-3860]	; 23534 <__assert_fail@plt+0x12328>
   24444:	b	22b90 <__assert_fail@plt+0x11984>
   24448:	ldr	r5, [pc, #-3864]	; 23538 <__assert_fail@plt+0x1232c>
   2444c:	b	22b90 <__assert_fail@plt+0x11984>
   24450:	ldr	r5, [pc, #-3868]	; 2353c <__assert_fail@plt+0x12330>
   24454:	b	22b90 <__assert_fail@plt+0x11984>
   24458:	ldr	r5, [pc, #-3872]	; 23540 <__assert_fail@plt+0x12334>
   2445c:	b	22b90 <__assert_fail@plt+0x11984>
   24460:	ldr	r5, [pc, #-3876]	; 23544 <__assert_fail@plt+0x12338>
   24464:	b	22b90 <__assert_fail@plt+0x11984>
   24468:	ldr	r5, [pc, #-3880]	; 23548 <__assert_fail@plt+0x1233c>
   2446c:	b	22b90 <__assert_fail@plt+0x11984>
   24470:	ldr	r5, [pc, #-3884]	; 2354c <__assert_fail@plt+0x12340>
   24474:	b	22b90 <__assert_fail@plt+0x11984>
   24478:	ldr	r5, [pc, #-3888]	; 23550 <__assert_fail@plt+0x12344>
   2447c:	b	22b90 <__assert_fail@plt+0x11984>
   24480:	ldr	r5, [pc, #-3892]	; 23554 <__assert_fail@plt+0x12348>
   24484:	b	22b90 <__assert_fail@plt+0x11984>
   24488:	ldr	r5, [pc, #-3896]	; 23558 <__assert_fail@plt+0x1234c>
   2448c:	b	22b90 <__assert_fail@plt+0x11984>
   24490:	ldr	r5, [pc, #-3900]	; 2355c <__assert_fail@plt+0x12350>
   24494:	b	22b90 <__assert_fail@plt+0x11984>
   24498:	ldr	r5, [pc, #-3904]	; 23560 <__assert_fail@plt+0x12354>
   2449c:	b	22b90 <__assert_fail@plt+0x11984>
   244a0:	ldr	r5, [pc, #-3908]	; 23564 <__assert_fail@plt+0x12358>
   244a4:	b	22b90 <__assert_fail@plt+0x11984>
   244a8:	ldr	r5, [pc, #-3912]	; 23568 <__assert_fail@plt+0x1235c>
   244ac:	b	22b90 <__assert_fail@plt+0x11984>
   244b0:	ldr	r5, [pc, #-3916]	; 2356c <__assert_fail@plt+0x12360>
   244b4:	b	22b90 <__assert_fail@plt+0x11984>
   244b8:	ldr	r5, [pc, #-3920]	; 23570 <__assert_fail@plt+0x12364>
   244bc:	b	22b90 <__assert_fail@plt+0x11984>
   244c0:	ldr	r5, [pc, #-3924]	; 23574 <__assert_fail@plt+0x12368>
   244c4:	b	22b90 <__assert_fail@plt+0x11984>
   244c8:	ldr	r5, [pc, #-3928]	; 23578 <__assert_fail@plt+0x1236c>
   244cc:	b	22b90 <__assert_fail@plt+0x11984>
   244d0:	ldr	r5, [pc, #-3932]	; 2357c <__assert_fail@plt+0x12370>
   244d4:	b	22b90 <__assert_fail@plt+0x11984>
   244d8:	ldr	r5, [pc, #-3936]	; 23580 <__assert_fail@plt+0x12374>
   244dc:	b	22b90 <__assert_fail@plt+0x11984>
   244e0:	ldr	r1, [pc, #-3940]	; 23584 <__assert_fail@plt+0x12378>
   244e4:	b	23ca8 <__assert_fail@plt+0x12a9c>
   244e8:	ldr	r5, [pc, #-3944]	; 23588 <__assert_fail@plt+0x1237c>
   244ec:	b	22b90 <__assert_fail@plt+0x11984>
   244f0:	ldr	r5, [pc, #-3948]	; 2358c <__assert_fail@plt+0x12380>
   244f4:	b	22b90 <__assert_fail@plt+0x11984>
   244f8:	ldr	r5, [pc, #-3952]	; 23590 <__assert_fail@plt+0x12384>
   244fc:	b	22b90 <__assert_fail@plt+0x11984>
   24500:	ldr	r1, [pc, #-3956]	; 23594 <__assert_fail@plt+0x12388>
   24504:	mov	r2, #5
   24508:	bl	10f90 <dcgettext@plt>
   2450c:	mov	r1, r0
   24510:	b	23ca8 <__assert_fail@plt+0x12a9c>
   24514:	cmn	r2, #253	; 0xfd
   24518:	beq	2453c <__assert_fail@plt+0x13330>
   2451c:	cmn	r2, #252	; 0xfc
   24520:	bne	24390 <__assert_fail@plt+0x13184>
   24524:	ldr	r1, [pc, #-3988]	; 23598 <__assert_fail@plt+0x1238c>
   24528:	b	23ca8 <__assert_fail@plt+0x12a9c>
   2452c:	ldr	r5, [pc, #-3992]	; 2359c <__assert_fail@plt+0x12390>
   24530:	b	22b90 <__assert_fail@plt+0x11984>
   24534:	cmn	r2, #256	; 0x100
   24538:	bne	24390 <__assert_fail@plt+0x13184>
   2453c:	ldr	r1, [pc, #-4004]	; 235a0 <__assert_fail@plt+0x12394>
   24540:	b	23ca8 <__assert_fail@plt+0x12a9c>
   24544:	ldr	r5, [pc, #-4008]	; 235a4 <__assert_fail@plt+0x12398>
   24548:	b	22b90 <__assert_fail@plt+0x11984>
   2454c:	cmp	r3, #181	; 0xb5
   24550:	bne	2436c <__assert_fail@plt+0x13160>
   24554:	cmn	r2, #254	; 0xfe
   24558:	bne	24390 <__assert_fail@plt+0x13184>
   2455c:	ldr	r1, [pc, #-4028]	; 235a8 <__assert_fail@plt+0x1239c>
   24560:	b	23ca8 <__assert_fail@plt+0x12a9c>
   24564:	ldr	r5, [pc, #-4032]	; 235ac <__assert_fail@plt+0x123a0>
   24568:	b	22b90 <__assert_fail@plt+0x11984>
   2456c:	ldr	r1, [pc, #-4036]	; 235b0 <__assert_fail@plt+0x123a4>
   24570:	b	23ca8 <__assert_fail@plt+0x12a9c>
   24574:	ldr	r1, [pc, #-4040]	; 235b4 <__assert_fail@plt+0x123a8>
   24578:	b	23ca8 <__assert_fail@plt+0x12a9c>
   2457c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24580:	mov	r4, #0
   24584:	cmp	r3, r4
   24588:	cmpeq	r2, r2
   2458c:	mov	r6, r2
   24590:	mov	r7, r3
   24594:	ldr	r5, [sp, #40]	; 0x28
   24598:	bne	24694 <__assert_fail@plt+0x13488>
   2459c:	umull	r8, r9, r5, r2
   245a0:	ldrd	r2, [r1]
   245a4:	mla	r9, r5, r7, r9
   245a8:	cmp	r9, r3
   245ac:	cmpeq	r8, r2
   245b0:	bhi	246d4 <__assert_fail@plt+0x134c8>
   245b4:	mov	fp, r0
   245b8:	mov	r1, r5
   245bc:	mov	r0, r6
   245c0:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   245c4:	subs	sl, r0, #0
   245c8:	beq	24710 <__assert_fail@plt+0x13504>
   245cc:	mov	r1, r5
   245d0:	ldr	r3, [fp]
   245d4:	mov	r2, r6
   245d8:	bl	10ffc <fread@plt>
   245dc:	mov	r1, #0
   245e0:	cmp	r7, r1
   245e4:	cmpeq	r6, r0
   245e8:	bne	24650 <__assert_fail@plt+0x13444>
   245ec:	mov	r1, #8
   245f0:	mov	r0, r6
   245f4:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   245f8:	subs	r8, r0, #0
   245fc:	beq	24744 <__assert_fail@plt+0x13538>
   24600:	subs	r3, r6, #1
   24604:	orrs	r2, r6, r7
   24608:	beq	24640 <__assert_fail@plt+0x13434>
   2460c:	mla	r6, r5, r3, sl
   24610:	ldr	r7, [pc, #348]	; 24774 <__assert_fail@plt+0x13568>
   24614:	add	r4, r8, r3, lsl #3
   24618:	ldr	r3, [r7]
   2461c:	mov	r0, r6
   24620:	mov	r1, r5
   24624:	blx	r3
   24628:	mov	r3, r4
   2462c:	cmp	r4, r8
   24630:	sub	r6, r6, r5
   24634:	strd	r0, [r3], #-8
   24638:	mov	r4, r3
   2463c:	bne	24618 <__assert_fail@plt+0x1340c>
   24640:	mov	r0, sl
   24644:	bl	10f54 <free@plt>
   24648:	mov	r0, r8
   2464c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24650:	ldr	r1, [pc, #288]	; 24778 <__assert_fail@plt+0x1356c>
   24654:	mov	r2, #5
   24658:	mov	r0, r4
   2465c:	bl	10f90 <dcgettext@plt>
   24660:	mov	r2, r8
   24664:	mov	r3, r9
   24668:	mov	r8, r4
   2466c:	mov	r5, r0
   24670:	ldr	r0, [pc, #260]	; 2477c <__assert_fail@plt+0x13570>
   24674:	bl	12d28 <__assert_fail@plt+0x1b1c>
   24678:	mov	r1, r0
   2467c:	mov	r0, r5
   24680:	bl	548ac <error@@Base>
   24684:	mov	r0, sl
   24688:	bl	10f54 <free@plt>
   2468c:	mov	r0, r8
   24690:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24694:	ldr	r1, [pc, #228]	; 24780 <__assert_fail@plt+0x13574>
   24698:	mov	r2, #5
   2469c:	mov	r0, r4
   246a0:	bl	10f90 <dcgettext@plt>
   246a4:	mov	r2, r6
   246a8:	mov	r3, r7
   246ac:	mov	r8, r0
   246b0:	ldr	r0, [pc, #196]	; 2477c <__assert_fail@plt+0x13570>
   246b4:	bl	12d28 <__assert_fail@plt+0x1b1c>
   246b8:	mov	r2, r5
   246bc:	mov	r1, r0
   246c0:	mov	r0, r8
   246c4:	mov	r8, r4
   246c8:	bl	548ac <error@@Base>
   246cc:	mov	r0, r8
   246d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   246d4:	ldr	r1, [pc, #168]	; 24784 <__assert_fail@plt+0x13578>
   246d8:	mov	r2, #5
   246dc:	mov	r0, r4
   246e0:	bl	10f90 <dcgettext@plt>
   246e4:	mov	r2, r6
   246e8:	mov	r3, r7
   246ec:	mov	r8, r4
   246f0:	mov	r5, r0
   246f4:	ldr	r0, [pc, #128]	; 2477c <__assert_fail@plt+0x13570>
   246f8:	bl	12d28 <__assert_fail@plt+0x1b1c>
   246fc:	mov	r1, r0
   24700:	mov	r0, r5
   24704:	bl	548ac <error@@Base>
   24708:	mov	r0, r8
   2470c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24710:	ldr	r1, [pc, #112]	; 24788 <__assert_fail@plt+0x1357c>
   24714:	mov	r2, #5
   24718:	bl	10f90 <dcgettext@plt>
   2471c:	mov	r2, r6
   24720:	mov	r3, r7
   24724:	mov	r8, sl
   24728:	mov	r4, r0
   2472c:	ldr	r0, [pc, #72]	; 2477c <__assert_fail@plt+0x13570>
   24730:	bl	12d28 <__assert_fail@plt+0x1b1c>
   24734:	mov	r1, r0
   24738:	mov	r0, r4
   2473c:	bl	548ac <error@@Base>
   24740:	b	24648 <__assert_fail@plt+0x1343c>
   24744:	ldr	r1, [pc, #64]	; 2478c <__assert_fail@plt+0x13580>
   24748:	mov	r2, #5
   2474c:	bl	10f90 <dcgettext@plt>
   24750:	mov	r2, r6
   24754:	mov	r3, r7
   24758:	mov	r4, r0
   2475c:	ldr	r0, [pc, #24]	; 2477c <__assert_fail@plt+0x13570>
   24760:	bl	12d28 <__assert_fail@plt+0x1b1c>
   24764:	mov	r1, r0
   24768:	mov	r0, r4
   2476c:	bl	548ac <error@@Base>
   24770:	b	24640 <__assert_fail@plt+0x13434>
   24774:	andeq	lr, r9, ip, asr sp
   24778:	andeq	r7, r6, ip, lsl #5
   2477c:	andeq	r3, r6, ip, asr #17
   24780:	strdeq	r7, [r6], -ip
   24784:	andeq	r7, r6, r8, lsr r2
   24788:	andeq	r7, r6, r0, ror #4
   2478c:			; <UNDEFINED> instruction: 0x000672b8
   24790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24794:	sub	sp, sp, #76	; 0x4c
   24798:	mov	r5, r3
   2479c:	ldr	r3, [sp, #124]	; 0x7c
   247a0:	mov	ip, #0
   247a4:	ldr	lr, [sp, #132]	; 0x84
   247a8:	strh	ip, [r3]
   247ac:	ldr	r3, [sp, #128]	; 0x80
   247b0:	mov	r6, #0
   247b4:	mov	r7, #0
   247b8:	cmp	lr, ip
   247bc:	strd	r6, [r3]
   247c0:	mov	r4, r2
   247c4:	mvnne	r3, #0
   247c8:	mvnne	r2, #0
   247cc:	mov	r8, r1
   247d0:	movne	r1, lr
   247d4:	str	r0, [sp, #40]	; 0x28
   247d8:	strdne	r2, [r1]
   247dc:	ldm	r4, {r0, r3}
   247e0:	cmp	r3, r5
   247e4:	beq	248e8 <__assert_fail@plt+0x136dc>
   247e8:	add	fp, r4, #8
   247ec:	mov	r1, fp
   247f0:	bl	16fb0 <__assert_fail@plt+0x5da4>
   247f4:	mov	r2, #5
   247f8:	ldr	r1, [pc, #1248]	; 24ce0 <__assert_fail@plt+0x13ad4>
   247fc:	str	r5, [r4, #4]
   24800:	mov	r0, #0
   24804:	ldrd	r6, [r5, #32]
   24808:	ldr	sl, [r8]
   2480c:	ldr	r9, [r5, #24]
   24810:	bl	10f90 <dcgettext@plt>
   24814:	strd	r6, [sp, #8]
   24818:	mov	r6, #1
   2481c:	mov	r7, #0
   24820:	mov	r3, r9
   24824:	add	r1, sl, #4
   24828:	add	r2, sl, #8
   2482c:	strd	r6, [sp]
   24830:	str	r0, [sp, #16]
   24834:	mov	r0, #0
   24838:	bl	1717c <__assert_fail@plt+0x5f70>
   2483c:	ldr	r3, [sp, #40]	; 0x28
   24840:	ldr	ip, [r3, #84]	; 0x54
   24844:	ldr	lr, [r3, #96]	; 0x60
   24848:	mov	r3, #0
   2484c:	add	r1, ip, ip, lsl #3
   24850:	str	r3, [r4, #8]
   24854:	add	r1, lr, r1, lsl #3
   24858:	cmp	lr, r1
   2485c:	str	r3, [r4, #12]
   24860:	str	r0, [r4]
   24864:	bcs	248e4 <__assert_fail@plt+0x136d8>
   24868:	mov	r2, lr
   2486c:	ldr	r3, [r2, #44]	; 0x2c
   24870:	cmp	r3, ip
   24874:	add	r3, r3, r3, lsl #3
   24878:	bcs	24888 <__assert_fail@plt+0x1367c>
   2487c:	add	r3, lr, r3, lsl #3
   24880:	cmp	r5, r3
   24884:	beq	2489c <__assert_fail@plt+0x13690>
   24888:	add	r2, r2, #72	; 0x48
   2488c:	cmp	r2, r1
   24890:	bcc	2486c <__assert_fail@plt+0x13660>
   24894:	mov	r3, #0
   24898:	b	248e4 <__assert_fail@plt+0x136d8>
   2489c:	ldr	r3, [r2, #4]
   248a0:	cmp	r3, #9
   248a4:	cmpne	r3, #4
   248a8:	bne	24888 <__assert_fail@plt+0x1367c>
   248ac:	str	r3, [r4, #16]
   248b0:	cmp	r3, #9
   248b4:	add	r3, r4, #12
   248b8:	ldr	r1, [r2, #24]
   248bc:	ldr	r0, [r8]
   248c0:	ldr	r2, [r2, #32]
   248c4:	str	r3, [sp]
   248c8:	mov	r3, fp
   248cc:	beq	249c0 <__assert_fail@plt+0x137b4>
   248d0:	bl	18904 <__assert_fail@plt+0x76f8>
   248d4:	cmp	r0, #0
   248d8:	beq	249cc <__assert_fail@plt+0x137c0>
   248dc:	ldr	r3, [r4, #8]
   248e0:	ldr	r0, [r4]
   248e4:	str	r3, [r4, #20]
   248e8:	cmp	r0, #0
   248ec:	beq	249cc <__assert_fail@plt+0x137c0>
   248f0:	ldrd	r2, [r5, #32]
   248f4:	cmp	r3, #0
   248f8:	cmpeq	r2, #3
   248fc:	bls	249cc <__assert_fail@plt+0x137c0>
   24900:	subs	r1, r2, #4
   24904:	sbc	r3, r3, #0
   24908:	str	r1, [sp, #32]
   2490c:	str	r3, [sp, #36]	; 0x24
   24910:	ldrd	r2, [sp, #32]
   24914:	ldrd	r6, [sp, #112]	; 0x70
   24918:	cmp	r3, r7
   2491c:	cmpeq	r2, r6
   24920:	bcc	249cc <__assert_fail@plt+0x137c0>
   24924:	mov	r3, r7
   24928:	cmp	r6, #0
   2492c:	sbcs	r3, r3, #0
   24930:	blt	249cc <__assert_fail@plt+0x137c0>
   24934:	ldr	r3, [pc, #936]	; 24ce4 <__assert_fail@plt+0x13ad8>
   24938:	ldr	r2, [sp, #112]	; 0x70
   2493c:	mov	r1, #4
   24940:	add	r0, r0, r2
   24944:	ldr	r3, [r3]
   24948:	blx	r3
   2494c:	ldr	sl, [r4, #8]
   24950:	cmp	sl, #0
   24954:	str	r0, [sp, #56]	; 0x38
   24958:	str	r0, [sp, #52]	; 0x34
   2495c:	beq	24c58 <__assert_fail@plt+0x13a4c>
   24960:	ldr	r3, [r4, #12]
   24964:	ldr	r5, [r4, #20]
   24968:	str	r3, [sp, #32]
   2496c:	add	r3, r3, r3, lsl #1
   24970:	add	r3, sl, r3, lsl #3
   24974:	cmp	r5, r3
   24978:	beq	249a4 <__assert_fail@plt+0x13798>
   2497c:	mov	r3, #0
   24980:	str	r3, [sp, #44]	; 0x2c
   24984:	ldrd	r2, [r5]
   24988:	ldrd	r0, [sp, #112]	; 0x70
   2498c:	cmp	r1, r3
   24990:	cmpeq	r0, r2
   24994:	bcs	249f4 <__assert_fail@plt+0x137e8>
   24998:	ldr	r3, [sp, #44]	; 0x2c
   2499c:	cmp	r3, #0
   249a0:	beq	249d8 <__assert_fail@plt+0x137cc>
   249a4:	ldr	r3, [sp, #120]	; 0x78
   249a8:	ldr	r2, [sp, #52]	; 0x34
   249ac:	mov	r0, #1
   249b0:	str	r2, [r3]
   249b4:	str	r5, [r4, #20]
   249b8:	add	sp, sp, #76	; 0x4c
   249bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249c0:	bl	17498 <__assert_fail@plt+0x628c>
   249c4:	cmp	r0, #0
   249c8:	bne	248dc <__assert_fail@plt+0x136d0>
   249cc:	mov	r0, #0
   249d0:	add	sp, sp, #76	; 0x4c
   249d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249d8:	ldrd	r2, [sl]
   249dc:	mov	r5, sl
   249e0:	cmp	r1, r3
   249e4:	cmpeq	r0, r2
   249e8:	bcc	249a4 <__assert_fail@plt+0x13798>
   249ec:	mov	r1, #1
   249f0:	str	r1, [sp, #44]	; 0x2c
   249f4:	and	r1, r2, #3
   249f8:	mov	r0, #0
   249fc:	str	r1, [sp, #24]
   24a00:	str	r0, [sp, #28]
   24a04:	ldrd	r6, [sp, #24]
   24a08:	orrs	r1, r6, r7
   24a0c:	bne	24ba0 <__assert_fail@plt+0x13994>
   24a10:	ldrd	r6, [sp, #112]	; 0x70
   24a14:	cmp	r7, r3
   24a18:	cmpeq	r6, r2
   24a1c:	bhi	24b84 <__assert_fail@plt+0x13978>
   24a20:	ldr	lr, [r8, #4]
   24a24:	cmp	lr, #0
   24a28:	beq	24b84 <__assert_fail@plt+0x13978>
   24a2c:	ldr	r1, [r4, #16]
   24a30:	cmp	r1, #9
   24a34:	beq	24bc4 <__assert_fail@plt+0x139b8>
   24a38:	cmp	r1, #4
   24a3c:	bne	24cb0 <__assert_fail@plt+0x13aa4>
   24a40:	ldr	fp, [r5, #16]
   24a44:	ldr	ip, [r5, #20]
   24a48:	ldr	r9, [r5, #8]
   24a4c:	ldr	r1, [r5, #12]
   24a50:	ldr	r0, [r8, #8]
   24a54:	lsr	r6, r9, #8
   24a58:	orr	r6, r6, r1, lsl #24
   24a5c:	lsr	r7, r1, #8
   24a60:	mov	r1, #0
   24a64:	cmp	r7, r1
   24a68:	cmpeq	r6, r0
   24a6c:	bcs	24c84 <__assert_fail@plt+0x13a78>
   24a70:	lsl	r6, r6, #5
   24a74:	add	r0, lr, r6
   24a78:	ldr	r1, [r4, #4]
   24a7c:	ldr	r7, [r0, #4]
   24a80:	ldr	r0, [lr, r6]
   24a84:	add	r6, lr, r6
   24a88:	adds	r0, fp, r0
   24a8c:	str	r0, [sp, #48]	; 0x30
   24a90:	ldr	fp, [r1, #16]
   24a94:	ldr	r0, [r1, #20]
   24a98:	ldr	r1, [sp, #40]	; 0x28
   24a9c:	adc	r7, ip, r7
   24aa0:	adds	fp, r2, fp
   24aa4:	adc	r0, r3, r0
   24aa8:	ldrh	r1, [r1, #66]	; 0x42
   24aac:	ldr	r3, [sp, #48]	; 0x30
   24ab0:	subs	fp, r3, fp
   24ab4:	sbc	r3, r7, r0
   24ab8:	cmp	r1, #40	; 0x28
   24abc:	str	r3, [sp, #60]	; 0x3c
   24ac0:	beq	24bf0 <__assert_fail@plt+0x139e4>
   24ac4:	cmp	r1, #140	; 0x8c
   24ac8:	bne	24cc8 <__assert_fail@plt+0x13abc>
   24acc:	uxtb	r9, r9
   24ad0:	ldr	r3, [pc, #528]	; 24ce8 <__assert_fail@plt+0x13adc>
   24ad4:	add	r9, r3, r9, lsl #2
   24ad8:	ldr	r9, [r9, #-2712]	; 0xfffff568
   24adc:	cmp	r9, #0
   24ae0:	beq	24b60 <__assert_fail@plt+0x13954>
   24ae4:	ldr	r1, [pc, #512]	; 24cec <__assert_fail@plt+0x13ae0>
   24ae8:	mov	r0, r9
   24aec:	bl	10f18 <strcmp@plt>
   24af0:	cmp	r0, #0
   24af4:	beq	24b84 <__assert_fail@plt+0x13978>
   24af8:	ldr	r1, [pc, #496]	; 24cf0 <__assert_fail@plt+0x13ae4>
   24afc:	mov	r0, r9
   24b00:	bl	10f18 <strcmp@plt>
   24b04:	cmp	r0, #0
   24b08:	bne	24c68 <__assert_fail@plt+0x13a5c>
   24b0c:	ldr	r3, [sp, #60]	; 0x3c
   24b10:	lsr	fp, fp, #1
   24b14:	orr	fp, fp, r3, lsl #31
   24b18:	ldr	r3, [sp, #56]	; 0x38
   24b1c:	bic	fp, fp, #-2147483648	; 0x80000000
   24b20:	and	r3, r3, #-2147483648	; 0x80000000
   24b24:	orr	r3, fp, r3
   24b28:	str	r3, [sp, #52]	; 0x34
   24b2c:	ldr	r3, [sp, #124]	; 0x7c
   24b30:	ldr	r2, [r6, #24]
   24b34:	ldr	r1, [sp, #132]	; 0x84
   24b38:	strh	r2, [r3]
   24b3c:	ldr	r3, [sp, #128]	; 0x80
   24b40:	ldr	r2, [sp, #48]	; 0x30
   24b44:	cmp	r1, #0
   24b48:	stm	r3, {r2, r7}
   24b4c:	ldrne	r2, [r6, #16]
   24b50:	movne	r3, #0
   24b54:	strne	r2, [r1]
   24b58:	strne	r3, [r1, #4]
   24b5c:	b	249a4 <__assert_fail@plt+0x13798>
   24b60:	ldr	r1, [pc, #396]	; 24cf4 <__assert_fail@plt+0x13ae8>
   24b64:	mov	r0, r9
   24b68:	mov	r2, #5
   24b6c:	bl	10f90 <dcgettext@plt>
   24b70:	ldrb	r1, [r5, #8]
   24b74:	bl	54dd0 <warn@@Base>
   24b78:	ldr	sl, [r4, #8]
   24b7c:	ldr	r3, [r4, #12]
   24b80:	str	r3, [sp, #32]
   24b84:	ldr	r3, [sp, #32]
   24b88:	add	r5, r5, #24
   24b8c:	add	r3, r3, r3, lsl #1
   24b90:	add	r3, sl, r3, lsl #3
   24b94:	cmp	r5, r3
   24b98:	bne	24984 <__assert_fail@plt+0x13778>
   24b9c:	b	249a4 <__assert_fail@plt+0x13798>
   24ba0:	mov	r2, #5
   24ba4:	ldr	r1, [pc, #332]	; 24cf8 <__assert_fail@plt+0x13aec>
   24ba8:	bl	10f90 <dcgettext@plt>
   24bac:	ldr	r1, [r5]
   24bb0:	bl	54dd0 <warn@@Base>
   24bb4:	ldr	r3, [r4, #12]
   24bb8:	ldr	sl, [r4, #8]
   24bbc:	str	r3, [sp, #32]
   24bc0:	b	24b84 <__assert_fail@plt+0x13978>
   24bc4:	ldr	r1, [sp, #56]	; 0x38
   24bc8:	str	r0, [sp, #68]	; 0x44
   24bcc:	and	ip, r1, #1073741824	; 0x40000000
   24bd0:	str	ip, [sp, #64]	; 0x40
   24bd4:	ldrd	r6, [sp, #64]	; 0x40
   24bd8:	bic	fp, r1, #-2147483648	; 0x80000000
   24bdc:	orrs	ip, r6, r7
   24be0:	orrne	fp, fp, #-2147483648	; 0x80000000
   24be4:	mov	ip, r0
   24be8:	mvnne	ip, #0
   24bec:	b	24a48 <__assert_fail@plt+0x1383c>
   24bf0:	uxtb	r9, r9
   24bf4:	ldr	r3, [pc, #256]	; 24cfc <__assert_fail@plt+0x13af0>
   24bf8:	add	r9, r3, r9, lsl #2
   24bfc:	ldr	r9, [r9, #3772]	; 0xebc
   24c00:	cmp	r9, #0
   24c04:	beq	24c74 <__assert_fail@plt+0x13a68>
   24c08:	ldr	r1, [pc, #240]	; 24d00 <__assert_fail@plt+0x13af4>
   24c0c:	mov	r0, r9
   24c10:	bl	10f18 <strcmp@plt>
   24c14:	cmp	r0, #0
   24c18:	beq	24b84 <__assert_fail@plt+0x13978>
   24c1c:	ldr	r1, [pc, #224]	; 24d04 <__assert_fail@plt+0x13af8>
   24c20:	mov	r0, r9
   24c24:	bl	10f18 <strcmp@plt>
   24c28:	cmp	r0, #0
   24c2c:	beq	24b18 <__assert_fail@plt+0x1390c>
   24c30:	ldr	r1, [pc, #208]	; 24d08 <__assert_fail@plt+0x13afc>
   24c34:	mov	r2, #5
   24c38:	mov	r0, #0
   24c3c:	bl	10f90 <dcgettext@plt>
   24c40:	mov	r1, r9
   24c44:	bl	54dd0 <warn@@Base>
   24c48:	ldr	r3, [r4, #12]
   24c4c:	ldr	sl, [r4, #8]
   24c50:	str	r3, [sp, #32]
   24c54:	b	24b84 <__assert_fail@plt+0x13978>
   24c58:	ldr	r3, [sp, #120]	; 0x78
   24c5c:	str	r0, [r3]
   24c60:	mov	r0, #1
   24c64:	b	249d0 <__assert_fail@plt+0x137c4>
   24c68:	mov	r2, #5
   24c6c:	ldr	r1, [pc, #152]	; 24d0c <__assert_fail@plt+0x13b00>
   24c70:	b	24c38 <__assert_fail@plt+0x13a2c>
   24c74:	mov	r0, r9
   24c78:	mov	r2, #5
   24c7c:	ldr	r1, [pc, #140]	; 24d10 <__assert_fail@plt+0x13b04>
   24c80:	b	24b6c <__assert_fail@plt+0x13960>
   24c84:	mov	r2, #5
   24c88:	ldr	r1, [pc, #132]	; 24d14 <__assert_fail@plt+0x13b08>
   24c8c:	mov	r0, #0
   24c90:	bl	10f90 <dcgettext@plt>
   24c94:	ldr	r3, [r5, #8]
   24c98:	ldr	r1, [r5, #12]
   24c9c:	ldr	r2, [r8, #8]
   24ca0:	lsr	r3, r3, #8
   24ca4:	orr	r1, r3, r1, lsl #24
   24ca8:	bl	548ac <error@@Base>
   24cac:	b	249a4 <__assert_fail@plt+0x13798>
   24cb0:	mov	r2, #5
   24cb4:	ldr	r1, [pc, #92]	; 24d18 <__assert_fail@plt+0x13b0c>
   24cb8:	bl	10f90 <dcgettext@plt>
   24cbc:	ldr	r1, [r4, #16]
   24cc0:	bl	548ac <error@@Base>
   24cc4:	b	249a4 <__assert_fail@plt+0x13798>
   24cc8:	mov	r2, #5
   24ccc:	ldr	r1, [pc, #72]	; 24d1c <__assert_fail@plt+0x13b10>
   24cd0:	mov	r0, #0
   24cd4:	bl	10f90 <dcgettext@plt>
   24cd8:	bl	54dd0 <warn@@Base>
   24cdc:	b	249a4 <__assert_fail@plt+0x13798>
   24ce0:	strdeq	r7, [r6], -r0
   24ce4:	andeq	lr, r9, ip, asr sp
   24ce8:	andeq	lr, r5, ip, asr #27
   24cec:	andeq	r7, r6, r0, lsr r4
   24cf0:	andeq	r7, r6, r0, asr #8
   24cf4:	andeq	r7, r6, r4, lsl #8
   24cf8:	strdeq	r7, [r6], -ip
   24cfc:	ldrdeq	sl, [r5], -ip
   24d00:			; <UNDEFINED> instruction: 0x000673bc
   24d04:	andeq	r7, r6, r8, asr #7
   24d08:	ldrdeq	r7, [r6], -r8
   24d0c:	andeq	r7, r6, r0, asr r4
   24d10:	muleq	r6, r0, r3
   24d14:	andeq	r7, r6, ip, asr r3
   24d18:	andeq	r7, r6, ip, lsr #6
   24d1c:	andeq	r7, r6, r0, lsl #9
   24d20:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24d24:	mov	r4, r2
   24d28:	ldr	r9, [r1]
   24d2c:	mov	r8, r0
   24d30:	cmp	r9, r2
   24d34:	mov	r6, r3
   24d38:	bls	24d58 <__assert_fail@plt+0x13b4c>
   24d3c:	ldr	r5, [r8]
   24d40:	cmp	r5, #0
   24d44:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d48:	ldrb	r3, [r5, r4]
   24d4c:	orr	r6, r6, r3
   24d50:	strb	r6, [r5, r4]
   24d54:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24d58:	add	sl, r2, #1
   24d5c:	mov	r7, r1
   24d60:	mov	r0, sl
   24d64:	mov	r1, #1
   24d68:	bl	10ef4 <calloc@plt>
   24d6c:	subs	r5, r0, #0
   24d70:	beq	24da0 <__assert_fail@plt+0x13b94>
   24d74:	ldr	fp, [r8]
   24d78:	cmp	fp, #0
   24d7c:	beq	24d94 <__assert_fail@plt+0x13b88>
   24d80:	mov	r2, r9
   24d84:	mov	r1, fp
   24d88:	bl	10f6c <memcpy@plt>
   24d8c:	mov	r0, fp
   24d90:	bl	10f54 <free@plt>
   24d94:	str	r5, [r8]
   24d98:	str	sl, [r7]
   24d9c:	b	24d48 <__assert_fail@plt+0x13b3c>
   24da0:	mov	r2, #5
   24da4:	ldr	r1, [pc, #8]	; 24db4 <__assert_fail@plt+0x13ba8>
   24da8:	bl	10f90 <dcgettext@plt>
   24dac:	bl	548ac <error@@Base>
   24db0:	b	24d3c <__assert_fail@plt+0x13b30>
   24db4:	andeq	r2, r6, r8, ror #5
   24db8:	push	{r4, r5, r6, r7, r8, r9, lr}
   24dbc:	mov	r2, #5
   24dc0:	ldrd	r6, [r0, #32]
   24dc4:	sub	sp, sp, #28
   24dc8:	mov	r4, r0
   24dcc:	orrs	r3, r6, r7
   24dd0:	mov	r5, r1
   24dd4:	beq	24e24 <__assert_fail@plt+0x13c18>
   24dd8:	ldr	r3, [r0, #4]
   24ddc:	cmp	r3, #8
   24de0:	beq	24e24 <__assert_fail@plt+0x13c18>
   24de4:	ldr	r1, [pc, #112]	; 24e5c <__assert_fail@plt+0x13c50>
   24de8:	mov	r0, #0
   24dec:	ldr	r4, [r4, #24]
   24df0:	bl	10f90 <dcgettext@plt>
   24df4:	mov	r8, #1
   24df8:	mov	r9, #0
   24dfc:	mov	r3, r4
   24e00:	strd	r6, [sp, #8]
   24e04:	strd	r8, [sp]
   24e08:	add	r2, r5, #8
   24e0c:	add	r1, r5, #4
   24e10:	str	r0, [sp, #16]
   24e14:	mov	r0, #0
   24e18:	bl	1717c <__assert_fail@plt+0x5f70>
   24e1c:	add	sp, sp, #28
   24e20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24e24:	ldr	r1, [pc, #52]	; 24e60 <__assert_fail@plt+0x13c54>
   24e28:	mov	r0, #0
   24e2c:	bl	10f90 <dcgettext@plt>
   24e30:	mov	r2, r4
   24e34:	add	r1, r5, #108	; 0x6c
   24e38:	mov	r6, r0
   24e3c:	add	r0, r5, #104	; 0x68
   24e40:	bl	16c64 <__assert_fail@plt+0x5a58>
   24e44:	mov	r1, r0
   24e48:	mov	r0, r6
   24e4c:	bl	10f24 <printf@plt>
   24e50:	mov	r0, #0
   24e54:	add	sp, sp, #28
   24e58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   24e5c:	ldrdeq	r7, [r6], -r8
   24e60:			; <UNDEFINED> instruction: 0x000674b4
   24e64:	push	{r4, r5, r6, r7, r8, lr}
   24e68:	subs	r4, r1, #0
   24e6c:	beq	24eb8 <__assert_fail@plt+0x13cac>
   24e70:	ldrh	r3, [r0, #66]	; 0x42
   24e74:	cmp	r3, #21
   24e78:	beq	24f70 <__assert_fail@plt+0x13d64>
   24e7c:	cmp	r3, #50	; 0x32
   24e80:	beq	24ec0 <__assert_fail@plt+0x13cb4>
   24e84:	cmp	r3, #8
   24e88:	beq	24f44 <__assert_fail@plt+0x13d38>
   24e8c:	mov	r2, #5
   24e90:	ldr	r1, [pc, #496]	; 25088 <__assert_fail@plt+0x13e7c>
   24e94:	mov	r0, #0
   24e98:	bl	10f90 <dcgettext@plt>
   24e9c:	mov	r3, r4
   24ea0:	mov	r1, #32
   24ea4:	mov	r2, r0
   24ea8:	ldr	r0, [pc, #476]	; 2508c <__assert_fail@plt+0x13e80>
   24eac:	bl	110b0 <snprintf@plt>
   24eb0:	ldr	r0, [pc, #468]	; 2508c <__assert_fail@plt+0x13e80>
   24eb4:	pop	{r4, r5, r6, r7, r8, pc}
   24eb8:	ldr	r0, [pc, #464]	; 25090 <__assert_fail@plt+0x13e84>
   24ebc:	pop	{r4, r5, r6, r7, r8, pc}
   24ec0:	ldrb	r3, [r0, #23]
   24ec4:	cmp	r3, #13
   24ec8:	bne	24e8c <__assert_fail@plt+0x13c80>
   24ecc:	ldrh	r3, [r0, #64]	; 0x40
   24ed0:	ldr	r6, [pc, #444]	; 25094 <__assert_fail@plt+0x13e88>
   24ed4:	mov	r2, #0
   24ed8:	sub	r3, r3, #2
   24edc:	cmp	r3, #1
   24ee0:	strb	r2, [r6, #1628]	; 0x65c
   24ee4:	addhi	r5, r6, #1616	; 0x650
   24ee8:	bls	24fd8 <__assert_fail@plt+0x13dcc>
   24eec:	add	r7, r5, #12
   24ef0:	mov	r0, r7
   24ef4:	bl	11080 <strlen@plt>
   24ef8:	lsr	r4, r4, #6
   24efc:	cmp	r4, #2
   24f00:	mov	r3, r0
   24f04:	add	r2, r7, r0
   24f08:	beq	25048 <__assert_fail@plt+0x13e3c>
   24f0c:	cmp	r4, #3
   24f10:	beq	25030 <__assert_fail@plt+0x13e24>
   24f14:	cmp	r4, #1
   24f18:	ldrne	r1, [pc, #376]	; 25098 <__assert_fail@plt+0x13e8c>
   24f1c:	ldreq	r1, [pc, #376]	; 2509c <__assert_fail@plt+0x13e90>
   24f20:	ldrb	ip, [r1, #4]
   24f24:	ldr	r0, [r1]
   24f28:	str	r0, [r7, r3]
   24f2c:	strb	ip, [r2, #4]
   24f30:	ldrb	r3, [r6, #1628]	; 0x65c
   24f34:	cmp	r3, #0
   24f38:	bne	25028 <__assert_fail@plt+0x13e1c>
   24f3c:	add	r0, r5, #12
   24f40:	pop	{r4, r5, r6, r7, r8, pc}
   24f44:	cmp	r4, #32
   24f48:	beq	25020 <__assert_fail@plt+0x13e14>
   24f4c:	bls	24fb0 <__assert_fail@plt+0x13da4>
   24f50:	cmp	r4, #160	; 0xa0
   24f54:	beq	25018 <__assert_fail@plt+0x13e0c>
   24f58:	cmp	r4, #240	; 0xf0
   24f5c:	beq	24fc8 <__assert_fail@plt+0x13dbc>
   24f60:	cmp	r4, #128	; 0x80
   24f64:	bne	24e8c <__assert_fail@plt+0x13c80>
   24f68:	ldr	r0, [pc, #304]	; 250a0 <__assert_fail@plt+0x13e94>
   24f6c:	pop	{r4, r5, r6, r7, r8, pc}
   24f70:	lsr	r2, r4, #5
   24f74:	mov	r3, #1
   24f78:	lsl	r3, r3, r2
   24f7c:	bics	r5, r3, #3
   24f80:	beq	24e8c <__assert_fail@plt+0x13c80>
   24f84:	mov	r2, #5
   24f88:	ldr	r1, [pc, #276]	; 250a4 <__assert_fail@plt+0x13e98>
   24f8c:	mov	r0, #0
   24f90:	bl	10f90 <dcgettext@plt>
   24f94:	mov	r3, r5
   24f98:	mov	r1, #32
   24f9c:	mov	r2, r0
   24fa0:	ldr	r0, [pc, #256]	; 250a8 <__assert_fail@plt+0x13e9c>
   24fa4:	bl	110b0 <snprintf@plt>
   24fa8:	ldr	r0, [pc, #248]	; 250a8 <__assert_fail@plt+0x13e9c>
   24fac:	pop	{r4, r5, r6, r7, r8, pc}
   24fb0:	cmp	r4, #4
   24fb4:	beq	24fd0 <__assert_fail@plt+0x13dc4>
   24fb8:	cmp	r4, #8
   24fbc:	bne	24e8c <__assert_fail@plt+0x13c80>
   24fc0:	ldr	r0, [pc, #228]	; 250ac <__assert_fail@plt+0x13ea0>
   24fc4:	pop	{r4, r5, r6, r7, r8, pc}
   24fc8:	ldr	r0, [pc, #224]	; 250b0 <__assert_fail@plt+0x13ea4>
   24fcc:	pop	{r4, r5, r6, r7, r8, pc}
   24fd0:	ldr	r0, [pc, #220]	; 250b4 <__assert_fail@plt+0x13ea8>
   24fd4:	pop	{r4, r5, r6, r7, r8, pc}
   24fd8:	lsr	r3, r4, #4
   24fdc:	and	r3, r3, #3
   24fe0:	cmp	r3, #2
   24fe4:	beq	25078 <__assert_fail@plt+0x13e6c>
   24fe8:	cmp	r3, #3
   24fec:	beq	25060 <__assert_fail@plt+0x13e54>
   24ff0:	cmp	r3, #1
   24ff4:	addeq	r5, r6, #1616	; 0x650
   24ff8:	ldreq	r3, [pc, #184]	; 250b8 <__assert_fail@plt+0x13eac>
   24ffc:	ldrne	r3, [pc, #184]	; 250bc <__assert_fail@plt+0x13eb0>
   25000:	addne	r5, r6, #1616	; 0x650
   25004:	ldmeq	r3, {r0, r1}
   25008:	strne	r3, [r6, #1628]	; 0x65c
   2500c:	streq	r0, [r6, #1628]	; 0x65c
   25010:	strbeq	r1, [r5, #16]
   25014:	b	24eec <__assert_fail@plt+0x13ce0>
   25018:	ldr	r0, [pc, #160]	; 250c0 <__assert_fail@plt+0x13eb4>
   2501c:	pop	{r4, r5, r6, r7, r8, pc}
   25020:	ldr	r0, [pc, #156]	; 250c4 <__assert_fail@plt+0x13eb8>
   25024:	pop	{r4, r5, r6, r7, r8, pc}
   25028:	add	r0, r5, #13
   2502c:	pop	{r4, r5, r6, r7, r8, pc}
   25030:	ldr	r1, [pc, #144]	; 250c8 <__assert_fail@plt+0x13ebc>
   25034:	ldrb	ip, [r1, #4]
   25038:	ldr	r0, [r1]
   2503c:	str	r0, [r7, r3]
   25040:	strb	ip, [r2, #4]
   25044:	b	24f30 <__assert_fail@plt+0x13d24>
   25048:	ldr	r1, [pc, #124]	; 250cc <__assert_fail@plt+0x13ec0>
   2504c:	ldrb	ip, [r1, #4]
   25050:	ldr	r0, [r1]
   25054:	str	r0, [r7, r3]
   25058:	strb	ip, [r2, #4]
   2505c:	b	24f30 <__assert_fail@plt+0x13d24>
   25060:	ldr	r3, [pc, #52]	; 2509c <__assert_fail@plt+0x13e90>
   25064:	add	r5, r6, #1616	; 0x650
   25068:	ldm	r3, {r0, r1}
   2506c:	str	r0, [r6, #1628]	; 0x65c
   25070:	strb	r1, [r5, #16]
   25074:	b	24eec <__assert_fail@plt+0x13ce0>
   25078:	ldr	r3, [pc, #80]	; 250d0 <__assert_fail@plt+0x13ec4>
   2507c:	add	r5, r6, #1616	; 0x650
   25080:	str	r3, [r6, #1628]	; 0x65c
   25084:	b	24eec <__assert_fail@plt+0x13ce0>
   25088:	andeq	r7, r6, r4, ror r5
   2508c:	andeq	sl, r9, r4, ror sl
   25090:	andeq	fp, r6, ip, ror #2
   25094:	andeq	sl, r9, r8, lsr r4
   25098:	andeq	r7, r6, r8, asr #10
   2509c:	andeq	r7, r6, r0, asr #10
   250a0:	andeq	r7, r6, ip, ror #9
   250a4:	andeq	r7, r6, r0, ror #10
   250a8:			; <UNDEFINED> instruction: 0x0009aab4
   250ac:	andeq	r7, r6, r0, lsl r5
   250b0:	andeq	r7, r6, ip, lsl r5
   250b4:	andeq	r7, r6, r4, lsl #10
   250b8:	andeq	r7, r6, r8, lsr r5
   250bc:	subeq	r4, r1, r0, lsr #6
   250c0:	andeq	r7, r6, r4, lsr #10
   250c4:	strdeq	r7, [r6], -r8
   250c8:	andeq	r7, r6, r8, asr r5
   250cc:	andeq	r7, r6, r0, asr r5
   250d0:	subeq	r4, r4, r0, lsr #12
   250d4:	push	{r4, r5, r6, r7, r8, lr}
   250d8:	mov	r4, r2
   250dc:	mov	r7, r0
   250e0:	mov	r2, #2
   250e4:	mov	r0, r4
   250e8:	mov	r1, r3
   250ec:	mov	r5, r3
   250f0:	ldr	r8, [sp, #24]
   250f4:	bl	14244 <__assert_fail@plt+0x3038>
   250f8:	cmp	r0, #4
   250fc:	ble	25244 <__assert_fail@plt+0x14038>
   25100:	ldr	r6, [pc, #452]	; 252cc <__assert_fail@plt+0x140c0>
   25104:	mov	r1, r8
   25108:	ldr	r0, [pc, #448]	; 252d0 <__assert_fail@plt+0x140c4>
   2510c:	bl	10f24 <printf@plt>
   25110:	ldr	r1, [r6, #1124]	; 0x464
   25114:	cmp	r1, #0
   25118:	beq	25130 <__assert_fail@plt+0x13f24>
   2511c:	ldr	r2, [r6, #1396]	; 0x574
   25120:	mov	r3, #0
   25124:	cmp	r3, r5
   25128:	cmpeq	r2, r4
   2512c:	bhi	2514c <__assert_fail@plt+0x13f40>
   25130:	ldr	r1, [pc, #412]	; 252d4 <__assert_fail@plt+0x140c8>
   25134:	mov	r2, #5
   25138:	mov	r0, #0
   2513c:	bl	10f90 <dcgettext@plt>
   25140:	mov	r1, r4
   25144:	pop	{r4, r5, r6, r7, r8, lr}
   25148:	b	10f24 <printf@plt>
   2514c:	lsl	r4, r4, #5
   25150:	ldr	r8, [pc, #384]	; 252d8 <__assert_fail@plt+0x140cc>
   25154:	add	r5, r1, r4
   25158:	mov	r2, #6
   2515c:	ldrd	r0, [r1, r4]
   25160:	bl	14244 <__assert_fail@plt+0x3038>
   25164:	ldr	r1, [r8]
   25168:	mov	r0, #32
   2516c:	bl	11158 <putc@plt>
   25170:	ldrd	r0, [r5, #8]
   25174:	mov	r2, #2
   25178:	bl	14244 <__assert_fail@plt+0x3038>
   2517c:	ldrb	r2, [r5, #20]
   25180:	add	r4, r7, #23
   25184:	add	r1, r7, #66	; 0x42
   25188:	and	r2, r2, #15
   2518c:	mov	r0, r4
   25190:	bl	1a2ec <__assert_fail@plt+0x90e0>
   25194:	mov	r1, r0
   25198:	ldr	r0, [pc, #316]	; 252dc <__assert_fail@plt+0x140d0>
   2519c:	bl	10f24 <printf@plt>
   251a0:	ldrb	r1, [r5, #20]
   251a4:	mov	r0, r4
   251a8:	lsr	r1, r1, #4
   251ac:	bl	1b5d8 <__assert_fail@plt+0xa3cc>
   251b0:	mov	r1, r0
   251b4:	ldr	r0, [pc, #292]	; 252e0 <__assert_fail@plt+0x140d4>
   251b8:	bl	10f24 <printf@plt>
   251bc:	ldrb	r3, [r7, #23]
   251c0:	cmp	r3, #6
   251c4:	bne	2525c <__assert_fail@plt+0x14050>
   251c8:	ldrb	r0, [r5, #21]
   251cc:	sub	r3, r0, #4
   251d0:	cmp	r3, #2
   251d4:	bls	252a0 <__assert_fail@plt+0x14094>
   251d8:	bl	16f58 <__assert_fail@plt+0x5d4c>
   251dc:	mov	r1, r0
   251e0:	ldr	r0, [pc, #244]	; 252dc <__assert_fail@plt+0x140d0>
   251e4:	bl	10f24 <printf@plt>
   251e8:	ldr	r1, [r5, #24]
   251ec:	mov	r0, r7
   251f0:	bl	16fd8 <__assert_fail@plt+0x5dcc>
   251f4:	mov	r1, r0
   251f8:	ldr	r0, [pc, #228]	; 252e4 <__assert_fail@plt+0x140d8>
   251fc:	bl	10f24 <printf@plt>
   25200:	ldr	r3, [r6, #1128]	; 0x468
   25204:	cmp	r3, #0
   25208:	beq	2521c <__assert_fail@plt+0x14010>
   2520c:	ldr	r2, [r6, #1400]	; 0x578
   25210:	ldr	r1, [r5, #16]
   25214:	cmp	r1, r2
   25218:	bcc	252b0 <__assert_fail@plt+0x140a4>
   2521c:	mov	r2, #5
   25220:	ldr	r1, [pc, #192]	; 252e8 <__assert_fail@plt+0x140dc>
   25224:	mov	r0, #0
   25228:	bl	10f90 <dcgettext@plt>
   2522c:	ldr	r1, [r5, #16]
   25230:	bl	10f24 <printf@plt>
   25234:	ldr	r1, [r8]
   25238:	mov	r0, #10
   2523c:	pop	{r4, r5, r6, r7, r8, lr}
   25240:	b	11158 <putc@plt>
   25244:	ldr	r2, [pc, #140]	; 252d8 <__assert_fail@plt+0x140cc>
   25248:	ldr	r3, [pc, #156]	; 252ec <__assert_fail@plt+0x140e0>
   2524c:	ldr	r1, [r2]
   25250:	add	r0, r3, r0
   25254:	bl	111c4 <fputs@plt>
   25258:	b	25100 <__assert_fail@plt+0x13ef4>
   2525c:	ldrb	r4, [r5, #21]
   25260:	ldr	r3, [pc, #136]	; 252f0 <__assert_fail@plt+0x140e4>
   25264:	ldr	r0, [pc, #112]	; 252dc <__assert_fail@plt+0x140d0>
   25268:	and	r4, r4, #3
   2526c:	add	r3, r3, r4, lsl #2
   25270:	ldr	r1, [r3, #180]	; 0xb4
   25274:	bl	10f24 <printf@plt>
   25278:	ldrb	r1, [r5, #21]
   2527c:	cmp	r1, r4
   25280:	beq	251e8 <__assert_fail@plt+0x13fdc>
   25284:	eor	r1, r1, r4
   25288:	mov	r0, r7
   2528c:	bl	24e64 <__assert_fail@plt+0x13c58>
   25290:	mov	r1, r0
   25294:	ldr	r0, [pc, #88]	; 252f4 <__assert_fail@plt+0x140e8>
   25298:	bl	10f24 <printf@plt>
   2529c:	b	251e8 <__assert_fail@plt+0x13fdc>
   252a0:	ldr	r2, [pc, #80]	; 252f8 <__assert_fail@plt+0x140ec>
   252a4:	add	r3, r2, r3, lsl #2
   252a8:	ldr	r1, [r3, #292]	; 0x124
   252ac:	b	251e0 <__assert_fail@plt+0x13fd4>
   252b0:	add	r1, r3, r1
   252b4:	mov	r0, #25
   252b8:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   252bc:	ldr	r1, [r8]
   252c0:	mov	r0, #10
   252c4:	pop	{r4, r5, r6, r7, r8, lr}
   252c8:	b	11158 <putc@plt>
   252cc:	andeq	sl, r9, r8, lsr r4
   252d0:	andeq	r7, r6, r0, lsl #11
   252d4:	andeq	r7, r6, r8, lsl #11
   252d8:	andeq	sl, r9, ip, lsr #8
   252dc:			; <UNDEFINED> instruction: 0x000675bc
   252e0:	andeq	r7, r6, r4, asr #11
   252e4:	ldrdeq	r7, [r6], -r4
   252e8:	ldrdeq	r7, [r6], -ip
   252ec:	andeq	r8, r6, r8, ror ip
   252f0:	andeq	r8, r5, r4, ror #27
   252f4:	andeq	r7, r6, ip, asr #11
   252f8:	andeq	lr, r5, ip, asr #27
   252fc:	ldr	r1, [pc, #1756]	; 259e0 <__assert_fail@plt+0x147d4>
   25300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25304:	vpush	{d8-d10}
   25308:	ldr	r2, [r1, #1692]	; 0x69c
   2530c:	ldr	r3, [r1, #1696]	; 0x6a0
   25310:	mov	fp, r0
   25314:	orrs	r3, r2, r3
   25318:	sub	sp, sp, #188	; 0xbc
   2531c:	bne	25798 <__assert_fail@plt+0x1458c>
   25320:	ldr	r2, [r1, #1700]	; 0x6a4
   25324:	cmp	r2, #0
   25328:	beq	25788 <__assert_fail@plt+0x1457c>
   2532c:	ldr	r2, [pc, #1708]	; 259e0 <__assert_fail@plt+0x147d4>
   25330:	add	r4, r2, #1136	; 0x470
   25334:	ldrd	r0, [r4, #32]
   25338:	orrs	r2, r0, r1
   2533c:	strd	r0, [sp, #64]	; 0x40
   25340:	bne	262b8 <__assert_fail@plt+0x150ac>
   25344:	ldr	r2, [pc, #1684]	; 259e0 <__assert_fail@plt+0x147d4>
   25348:	str	r3, [sp, #120]	; 0x78
   2534c:	add	r2, r2, #1424	; 0x590
   25350:	mov	sl, r2
   25354:	ldrd	r0, [r2, #-8]
   25358:	str	r3, [sp, #84]	; 0x54
   2535c:	ldrd	r2, [sp, #64]	; 0x40
   25360:	strd	r0, [sp, #88]	; 0x58
   25364:	strd	r2, [sp, #24]
   25368:	orrs	r2, r0, r1
   2536c:	beq	25d3c <__assert_fail@plt+0x14b30>
   25370:	mov	r1, #0
   25374:	mov	r0, #16
   25378:	ldrd	r2, [sp, #88]	; 0x58
   2537c:	strd	r0, [sp]
   25380:	mov	r0, fp
   25384:	ldr	r5, [fp, #4]
   25388:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   2538c:	ldr	r3, [pc, #1612]	; 259e0 <__assert_fail@plt+0x147d4>
   25390:	mov	r2, #0
   25394:	ldr	r1, [r3, #656]	; 0x290
   25398:	add	r1, r0, r1
   2539c:	mov	r0, r5
   253a0:	bl	111a0 <fseek@plt>
   253a4:	subs	r6, r0, #0
   253a8:	bne	265cc <__assert_fail@plt+0x153c0>
   253ac:	add	r5, sp, #168	; 0xa8
   253b0:	mov	r0, r5
   253b4:	ldr	r3, [fp, #4]
   253b8:	mov	r2, #1
   253bc:	mov	r1, #16
   253c0:	bl	10ffc <fread@plt>
   253c4:	cmp	r0, #1
   253c8:	bne	267d4 <__assert_fail@plt+0x155c8>
   253cc:	ldr	r6, [pc, #1552]	; 259e4 <__assert_fail@plt+0x147d8>
   253d0:	mov	r1, #4
   253d4:	mov	r0, r5
   253d8:	ldr	r3, [r6]
   253dc:	blx	r3
   253e0:	ldr	r3, [r6]
   253e4:	strd	r0, [sp, #72]	; 0x48
   253e8:	mov	r1, #4
   253ec:	add	r0, sp, #172	; 0xac
   253f0:	blx	r3
   253f4:	ldr	r3, [r6]
   253f8:	strd	r0, [sp, #56]	; 0x38
   253fc:	mov	r1, #4
   25400:	add	r0, sp, #176	; 0xb0
   25404:	blx	r3
   25408:	ldr	ip, [pc, #1488]	; 259e0 <__assert_fail@plt+0x147d4>
   2540c:	ldr	r3, [sl, #-8]
   25410:	ldr	r2, [sl, #-4]
   25414:	ldr	lr, [ip]
   25418:	adds	ip, r3, #16
   2541c:	adc	r2, r2, #0
   25420:	cmp	lr, #0
   25424:	lslne	r3, r1, #2
   25428:	lsleq	r3, r1, #3
   2542c:	lslne	r1, r0, #2
   25430:	lsleq	r1, r0, #3
   25434:	orrne	r3, r3, r0, lsr #30
   25438:	orreq	r3, r3, r0, lsr #29
   2543c:	adds	r1, r1, ip
   25440:	adc	r3, r3, r2
   25444:	str	r1, [sp, #48]	; 0x30
   25448:	mov	r0, #4
   2544c:	mov	r1, #0
   25450:	str	r3, [sp, #40]	; 0x28
   25454:	strd	r0, [sp]
   25458:	ldr	r2, [sp, #48]	; 0x30
   2545c:	ldr	r3, [sp, #40]	; 0x28
   25460:	mov	r0, fp
   25464:	ldr	r7, [fp, #4]
   25468:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   2546c:	ldr	r3, [pc, #1388]	; 259e0 <__assert_fail@plt+0x147d4>
   25470:	mov	r2, #0
   25474:	ldr	r1, [r3, #656]	; 0x290
   25478:	add	r1, r0, r1
   2547c:	mov	r0, r7
   25480:	bl	111a0 <fseek@plt>
   25484:	cmp	r0, #0
   25488:	bne	26808 <__assert_fail@plt+0x155fc>
   2548c:	add	r3, fp, #8
   25490:	mov	r1, r3
   25494:	str	r3, [sp, #80]	; 0x50
   25498:	mov	r3, #4
   2549c:	add	r0, fp, #4
   254a0:	str	r3, [sp]
   254a4:	ldrd	r2, [sp, #72]	; 0x48
   254a8:	str	r0, [sp, #52]	; 0x34
   254ac:	bl	2457c <__assert_fail@plt+0x13370>
   254b0:	subs	ip, r0, #0
   254b4:	str	ip, [sp, #108]	; 0x6c
   254b8:	beq	267c4 <__assert_fail@plt+0x155b8>
   254bc:	ldrd	r2, [sp, #72]	; 0x48
   254c0:	orrs	r3, r2, r3
   254c4:	beq	26608 <__assert_fail@plt+0x153fc>
   254c8:	mvn	r0, #0
   254cc:	mov	r1, #0
   254d0:	sub	ip, ip, #8
   254d4:	mov	r2, #0
   254d8:	mov	r3, #0
   254dc:	mov	r7, r4
   254e0:	strd	r8, [sp, #96]	; 0x60
   254e4:	str	r5, [sp, #104]	; 0x68
   254e8:	ldrd	r4, [ip, #8]!
   254ec:	orrs	lr, r4, r5
   254f0:	beq	25534 <__assert_fail@plt+0x14328>
   254f4:	ldrd	r8, [sp, #56]	; 0x38
   254f8:	cmp	r5, r9
   254fc:	cmpeq	r4, r8
   25500:	bcc	26524 <__assert_fail@plt+0x15318>
   25504:	cmp	r5, r1
   25508:	cmpeq	r4, r0
   2550c:	mov	r9, #0
   25510:	movhi	lr, #1
   25514:	movls	lr, #0
   25518:	mvn	r8, #0
   2551c:	cmp	r1, r9
   25520:	cmpeq	r0, r8
   25524:	moveq	lr, #1
   25528:	cmp	lr, #0
   2552c:	movne	r0, r4
   25530:	movne	r1, r5
   25534:	ldrd	r4, [sp, #72]	; 0x48
   25538:	adds	r2, r2, #1
   2553c:	adc	r3, r3, #0
   25540:	cmp	r5, r3
   25544:	cmpeq	r4, r2
   25548:	bne	254e8 <__assert_fail@plt+0x142dc>
   2554c:	strd	r2, [sp, #88]	; 0x58
   25550:	mov	r3, #0
   25554:	mvn	r2, #0
   25558:	cmp	r1, r3
   2555c:	cmpeq	r0, r2
   25560:	mov	r4, r7
   25564:	ldr	r5, [sp, #104]	; 0x68
   25568:	ldrd	r8, [sp, #96]	; 0x60
   2556c:	beq	267c4 <__assert_fail@plt+0x155b8>
   25570:	ldrd	r2, [sp, #56]	; 0x38
   25574:	subs	ip, r0, r2
   25578:	sbc	r3, r1, r3
   2557c:	str	ip, [sp, #72]	; 0x48
   25580:	str	r3, [sp, #76]	; 0x4c
   25584:	ldrd	r0, [sp, #72]	; 0x48
   25588:	ldrd	r2, [sp, #88]	; 0x58
   2558c:	adds	ip, r2, r0
   25590:	adc	r3, r3, r1
   25594:	lsl	r2, ip, #2
   25598:	lsl	r3, r3, #2
   2559c:	orr	r3, r3, ip, lsr #30
   255a0:	ldr	ip, [sp, #48]	; 0x30
   255a4:	mov	r1, #0
   255a8:	adds	r2, r2, ip
   255ac:	mov	r0, #4
   255b0:	ldr	ip, [sp, #40]	; 0x28
   255b4:	strd	r0, [sp]
   255b8:	adc	r3, r3, ip
   255bc:	mov	r0, fp
   255c0:	ldr	r7, [fp, #4]
   255c4:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   255c8:	ldr	r3, [pc, #1040]	; 259e0 <__assert_fail@plt+0x147d4>
   255cc:	mov	r2, #0
   255d0:	ldr	r1, [r3, #656]	; 0x290
   255d4:	add	r1, r0, r1
   255d8:	mov	r0, r7
   255dc:	bl	111a0 <fseek@plt>
   255e0:	cmp	r0, #0
   255e4:	bne	26a64 <__assert_fail@plt+0x15858>
   255e8:	strd	r8, [sp, #96]	; 0x60
   255ec:	str	r4, [sp, #104]	; 0x68
   255f0:	mov	r9, r5
   255f4:	ldrd	r4, [sp, #72]	; 0x48
   255f8:	b	25638 <__assert_fail@plt+0x1442c>
   255fc:	mvn	r3, #0
   25600:	mvn	r2, #0
   25604:	cmp	r5, r3
   25608:	cmpeq	r4, r2
   2560c:	beq	267bc <__assert_fail@plt+0x155b0>
   25610:	adds	r4, r4, #1
   25614:	ldr	r3, [r6]
   25618:	adc	r5, r5, #0
   2561c:	blx	r3
   25620:	str	r7, [sp, #36]	; 0x24
   25624:	and	r3, r0, #1
   25628:	str	r3, [sp, #32]
   2562c:	ldrd	r2, [sp, #32]
   25630:	orrs	r3, r2, r3
   25634:	bne	269d8 <__assert_fail@plt+0x157cc>
   25638:	mov	r1, #4
   2563c:	ldr	r3, [fp, #4]
   25640:	mov	r2, #1
   25644:	mov	r0, r9
   25648:	bl	10ffc <fread@plt>
   2564c:	mov	r7, #0
   25650:	mov	r1, #4
   25654:	cmp	r0, #1
   25658:	mov	r0, r9
   2565c:	beq	255fc <__assert_fail@plt+0x143f0>
   25660:	ldrd	r8, [sp, #96]	; 0x60
   25664:	ldr	r4, [sp, #104]	; 0x68
   25668:	ldr	r1, [pc, #888]	; 259e8 <__assert_fail@plt+0x147dc>
   2566c:	mov	r2, #5
   25670:	mov	r0, r7
   25674:	bl	10f90 <dcgettext@plt>
   25678:	bl	548ac <error@@Base>
   2567c:	mov	r2, #0
   25680:	mov	r3, #0
   25684:	strd	r2, [sp, #72]	; 0x48
   25688:	b	26608 <__assert_fail@plt+0x153fc>
   2568c:	mov	r5, r6
   25690:	mov	r1, #4
   25694:	add	r0, r5, #1
   25698:	ldr	r4, [sp, #52]	; 0x34
   2569c:	mov	r6, sl
   256a0:	ldr	sl, [sp, #40]	; 0x28
   256a4:	bl	10ef4 <calloc@plt>
   256a8:	subs	r7, r0, #0
   256ac:	addne	r0, r4, sl, lsl #2
   256b0:	subne	r0, r0, #4
   256b4:	subne	r2, r4, #4
   256b8:	beq	26508 <__assert_fail@plt+0x152fc>
   256bc:	ldr	r1, [r2, #4]!
   256c0:	cmp	r0, r2
   256c4:	ldr	r3, [r7, r1, lsl #2]
   256c8:	add	r3, r3, #1
   256cc:	str	r3, [r7, r1, lsl #2]
   256d0:	bne	256bc <__assert_fail@plt+0x144b0>
   256d4:	vldr	s15, [sp, #88]	; 0x58
   256d8:	vldr	d10, [pc, #760]	; 259d8 <__assert_fail@plt+0x147cc>
   256dc:	ldr	r1, [r7]
   256e0:	ldr	r0, [pc, #772]	; 259ec <__assert_fail@plt+0x147e0>
   256e4:	vcvt.f64.s32	d8, s15
   256e8:	vldr	s15, [r7]
   256ec:	vcvt.f64.u32	d7, s15
   256f0:	vmul.f64	d7, d7, d10
   256f4:	vdiv.f64	d7, d7, d8
   256f8:	vmov	r2, r3, d7
   256fc:	bl	10f24 <printf@plt>
   25700:	cmp	r5, #0
   25704:	beq	25768 <__assert_fail@plt+0x1455c>
   25708:	vmov	s15, r6
   2570c:	ldr	r9, [pc, #732]	; 259f0 <__assert_fail@plt+0x147e4>
   25710:	mov	r6, #1
   25714:	mov	r8, #0
   25718:	vcvt.f64.u32	d9, s15
   2571c:	ldr	r3, [r7, r6, lsl #2]
   25720:	mov	r1, r6
   25724:	mov	r2, r3
   25728:	mla	r8, r6, r3, r8
   2572c:	vmov	s15, r3
   25730:	mov	r0, r9
   25734:	vmov	s13, r8
   25738:	vcvt.f64.u32	d7, s15
   2573c:	vcvt.f64.u32	d6, s13
   25740:	vmul.f64	d7, d7, d10
   25744:	vmul.f64	d6, d6, d10
   25748:	vdiv.f64	d5, d7, d8
   2574c:	vdiv.f64	d7, d6, d9
   25750:	vstr	d5, [sp]
   25754:	vstr	d7, [sp, #8]
   25758:	bl	10f24 <printf@plt>
   2575c:	cmp	r5, r6
   25760:	add	r6, r6, #1
   25764:	bne	2571c <__assert_fail@plt+0x14510>
   25768:	mov	r0, r7
   2576c:	bl	10f54 <free@plt>
   25770:	mov	r0, r4
   25774:	bl	10f54 <free@plt>
   25778:	ldr	r0, [sp, #108]	; 0x6c
   2577c:	bl	10f54 <free@plt>
   25780:	ldr	r0, [sp, #124]	; 0x7c
   25784:	bl	10f54 <free@plt>
   25788:	mov	r0, #1
   2578c:	add	sp, sp, #188	; 0xbc
   25790:	vpop	{d8-d10}
   25794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25798:	ldr	ip, [pc, #576]	; 259e0 <__assert_fail@plt+0x147d4>
   2579c:	add	r4, ip, #1136	; 0x470
   257a0:	ldrd	r0, [r4, #32]
   257a4:	orrs	r3, r0, r1
   257a8:	strd	r0, [sp, #64]	; 0x40
   257ac:	bne	25838 <__assert_fail@plt+0x1462c>
   257b0:	mov	r3, #0
   257b4:	str	r3, [sp, #120]	; 0x78
   257b8:	str	r3, [sp, #84]	; 0x54
   257bc:	ldrd	r2, [sp, #64]	; 0x40
   257c0:	strd	r2, [sp, #24]
   257c4:	ldr	r3, [pc, #552]	; 259f4 <__assert_fail@plt+0x147e8>
   257c8:	mov	sl, r3
   257cc:	ldrd	r2, [r3, #-8]
   257d0:	strd	r2, [sp, #88]	; 0x58
   257d4:	orrs	r3, r2, r3
   257d8:	beq	25d3c <__assert_fail@plt+0x14b30>
   257dc:	ldr	r3, [sl, #276]	; 0x114
   257e0:	cmp	r3, #0
   257e4:	bne	25370 <__assert_fail@plt+0x14164>
   257e8:	ldr	r3, [sl, #280]	; 0x118
   257ec:	cmp	r3, #0
   257f0:	beq	25810 <__assert_fail@plt+0x14604>
   257f4:	ldr	r2, [pc, #484]	; 259e0 <__assert_fail@plt+0x147d4>
   257f8:	ldr	r3, [r2, #1692]	; 0x69c
   257fc:	cmp	r3, #0
   25800:	bne	25810 <__assert_fail@plt+0x14604>
   25804:	ldr	r3, [r2, #1128]	; 0x468
   25808:	cmp	r3, #0
   2580c:	bne	25370 <__assert_fail@plt+0x14164>
   25810:	mov	r2, #0
   25814:	mov	r3, #0
   25818:	mov	r1, #0
   2581c:	str	r1, [sp, #124]	; 0x7c
   25820:	str	r1, [sp, #108]	; 0x6c
   25824:	strd	r2, [sp, #72]	; 0x48
   25828:	strd	r2, [sp, #56]	; 0x38
   2582c:	strd	r2, [sp, #88]	; 0x58
   25830:	ldrd	r0, [r4, #32]
   25834:	b	25890 <__assert_fail@plt+0x14684>
   25838:	ldr	r3, [ip, #1700]	; 0x6a4
   2583c:	cmp	r3, #0
   25840:	bne	262b8 <__assert_fail@plt+0x150ac>
   25844:	ldr	r3, [ip, #1704]	; 0x6a8
   25848:	cmp	r3, #0
   2584c:	bne	262a4 <__assert_fail@plt+0x15098>
   25850:	ldr	r2, [pc, #392]	; 259e0 <__assert_fail@plt+0x147d4>
   25854:	add	r2, r2, #1424	; 0x590
   25858:	mov	sl, r2
   2585c:	ldrd	r6, [r2, #-8]
   25860:	orrs	r2, r6, r7
   25864:	strd	r6, [sp, #88]	; 0x58
   25868:	bne	26658 <__assert_fail@plt+0x1544c>
   2586c:	ldrd	r0, [sp, #64]	; 0x40
   25870:	str	r3, [sp, #124]	; 0x7c
   25874:	str	r3, [sp, #108]	; 0x6c
   25878:	str	r3, [sp, #120]	; 0x78
   2587c:	str	r3, [sp, #84]	; 0x54
   25880:	strd	r6, [sp, #72]	; 0x48
   25884:	strd	r6, [sp, #56]	; 0x38
   25888:	strd	r6, [sp, #24]
   2588c:	strd	r6, [sp, #64]	; 0x40
   25890:	ldr	r2, [pc, #328]	; 259e0 <__assert_fail@plt+0x147d4>
   25894:	ldr	r3, [r2, #1696]	; 0x6a0
   25898:	cmp	r3, #0
   2589c:	beq	25d60 <__assert_fail@plt+0x14b54>
   258a0:	ldr	r3, [r2, #1704]	; 0x6a8
   258a4:	cmp	r3, #0
   258a8:	beq	26438 <__assert_fail@plt+0x1522c>
   258ac:	ldr	r3, [r2, #1128]	; 0x468
   258b0:	cmp	r3, #0
   258b4:	beq	25e70 <__assert_fail@plt+0x14c64>
   258b8:	ldr	r3, [r2, #1124]	; 0x464
   258bc:	cmp	r3, #0
   258c0:	beq	25e70 <__assert_fail@plt+0x14c64>
   258c4:	orrs	r3, r0, r1
   258c8:	bne	26840 <__assert_fail@plt+0x15634>
   258cc:	ldrd	r2, [sl, #-8]
   258d0:	orrs	r3, r2, r3
   258d4:	bne	266d0 <__assert_fail@plt+0x154c4>
   258d8:	ldr	r3, [pc, #256]	; 259e0 <__assert_fail@plt+0x147d4>
   258dc:	ldr	r4, [r3, #1700]	; 0x6a4
   258e0:	ldr	r3, [sp, #84]	; 0x54
   258e4:	cmp	r4, #0
   258e8:	beq	25da0 <__assert_fail@plt+0x14b94>
   258ec:	cmp	r3, #0
   258f0:	beq	25b9c <__assert_fail@plt+0x14990>
   258f4:	ldrd	r6, [sp, #64]	; 0x40
   258f8:	mov	r4, #5
   258fc:	ldr	r2, [pc, #244]	; 259f8 <__assert_fail@plt+0x147ec>
   25900:	mov	r3, r6
   25904:	ldr	r1, [pc, #240]	; 259fc <__assert_fail@plt+0x147f0>
   25908:	str	r4, [sp]
   2590c:	mov	r0, #0
   25910:	bl	11200 <dcngettext@plt>
   25914:	mov	r1, r6
   25918:	bl	10f24 <printf@plt>
   2591c:	mov	r1, #4
   25920:	mov	r0, r6
   25924:	bl	10ef4 <calloc@plt>
   25928:	str	r6, [sp, #80]	; 0x50
   2592c:	subs	r3, r0, #0
   25930:	str	r3, [sp, #52]	; 0x34
   25934:	beq	26678 <__assert_fail@plt+0x1546c>
   25938:	ldrd	r8, [sp, #24]
   2593c:	mov	r1, #1
   25940:	mov	r0, r8
   25944:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   25948:	mov	r2, r8
   2594c:	mov	r1, #0
   25950:	mov	r7, r0
   25954:	bl	110bc <memset@plt>
   25958:	mov	r2, r4
   2595c:	ldr	r1, [pc, #156]	; 25a00 <__assert_fail@plt+0x147f4>
   25960:	mov	r0, #0
   25964:	bl	10f90 <dcgettext@plt>
   25968:	bl	10f24 <printf@plt>
   2596c:	ldrd	r2, [sp, #64]	; 0x40
   25970:	orrs	r3, r2, r3
   25974:	beq	26980 <__assert_fail@plt+0x15774>
   25978:	ldr	r9, [sp, #52]	; 0x34
   2597c:	ldr	r3, [sp, #84]	; 0x54
   25980:	ldr	r2, [sp, #80]	; 0x50
   25984:	mov	r5, #0
   25988:	str	r9, [sp, #32]
   2598c:	ldr	r9, [sp, #120]	; 0x78
   25990:	sub	r3, r3, #8
   25994:	mov	r4, r5
   25998:	mov	r8, #1
   2599c:	str	r3, [sp, #48]	; 0x30
   259a0:	add	r3, r3, r2, lsl #3
   259a4:	str	r3, [sp, #40]	; 0x28
   259a8:	ldr	r1, [sp, #48]	; 0x30
   259ac:	ldrd	r2, [r1, #8]!
   259b0:	str	r1, [sp, #48]	; 0x30
   259b4:	orrs	r1, r2, r3
   259b8:	addeq	r6, r4, #1
   259bc:	beq	25a78 <__assert_fail@plt+0x1486c>
   259c0:	ldr	r1, [sp, #32]
   259c4:	ldr	r1, [r1]
   259c8:	sub	ip, r5, r1
   259cc:	add	r1, r1, #1
   259d0:	b	25a2c <__assert_fail@plt+0x14820>
   259d4:	nop			; (mov r0, r0)
   259d8:	andeq	r0, r0, r0
   259dc:	subsmi	r0, r9, r0
   259e0:	andeq	sl, r9, r8, lsr r4
   259e4:	andeq	lr, r9, ip, asr sp
   259e8:	andeq	r7, r6, ip, ror #12
   259ec:	andeq	r7, r6, ip, asr fp
   259f0:	andeq	r7, r6, r0, lsr sl
   259f4:	andeq	sl, r9, r8, asr #19
   259f8:	andeq	r7, r6, ip, lsl r9
   259fc:	andeq	r7, r6, r8, asr r9
   25a00:	andeq	r7, r6, ip, asr #19
   25a04:	andeq	r7, r6, r0, lsr r7
   25a08:	ldrb	r3, [r0]
   25a0c:	add	fp, r1, #1
   25a10:	cmp	r3, #0
   25a14:	bne	25a5c <__assert_fail@plt+0x14850>
   25a18:	strb	r8, [r0]
   25a1c:	ldrd	r2, [r9, lr]
   25a20:	orrs	r0, r2, r3
   25a24:	beq	26418 <__assert_fail@plt+0x1520c>
   25a28:	mov	r1, fp
   25a2c:	add	fp, r4, #2
   25a30:	cmp	r1, r4
   25a34:	add	r6, r4, #1
   25a38:	movhi	r4, r6
   25a3c:	movhi	r6, fp
   25a40:	ldrd	sl, [sp, #24]
   25a44:	add	r0, r7, r2
   25a48:	lsl	lr, r2, #3
   25a4c:	cmp	fp, r3
   25a50:	cmpeq	sl, r2
   25a54:	add	r5, ip, r1
   25a58:	bhi	25a08 <__assert_fail@plt+0x147fc>
   25a5c:	ldr	r3, [sp, #32]
   25a60:	mov	r2, #5
   25a64:	mov	r0, #0
   25a68:	str	r1, [r3]
   25a6c:	ldr	r1, [pc, #-112]	; 25a04 <__assert_fail@plt+0x147f8>
   25a70:	bl	10f90 <dcgettext@plt>
   25a74:	bl	548ac <error@@Base>
   25a78:	ldr	r3, [sp, #40]	; 0x28
   25a7c:	ldr	r2, [sp, #48]	; 0x30
   25a80:	cmp	r3, r2
   25a84:	ldr	r3, [sp, #32]
   25a88:	add	r3, r3, #4
   25a8c:	str	r3, [sp, #32]
   25a90:	bne	259a8 <__assert_fail@plt+0x1479c>
   25a94:	mov	r0, r7
   25a98:	bl	10f54 <free@plt>
   25a9c:	mov	r0, r6
   25aa0:	mov	r1, #4
   25aa4:	bl	10ef4 <calloc@plt>
   25aa8:	subs	r6, r0, #0
   25aac:	beq	2699c <__assert_fail@plt+0x15790>
   25ab0:	ldr	r2, [sp, #80]	; 0x50
   25ab4:	ldr	r3, [sp, #52]	; 0x34
   25ab8:	add	r0, r3, r2, lsl #2
   25abc:	sub	r0, r0, #4
   25ac0:	sub	r2, r3, #4
   25ac4:	ldr	r1, [r2, #4]!
   25ac8:	cmp	r0, r2
   25acc:	ldr	r3, [r6, r1, lsl #2]
   25ad0:	add	r3, r3, #1
   25ad4:	str	r3, [r6, r1, lsl #2]
   25ad8:	bne	25ac4 <__assert_fail@plt+0x148b8>
   25adc:	vldr	s15, [sp, #64]	; 0x40
   25ae0:	vldr	d10, [pc, #728]	; 25dc0 <__assert_fail@plt+0x14bb4>
   25ae4:	ldr	r1, [r6]
   25ae8:	ldr	r0, [pc, #728]	; 25dc8 <__assert_fail@plt+0x14bbc>
   25aec:	vcvt.f64.s32	d8, s15
   25af0:	vldr	s15, [r6]
   25af4:	vcvt.f64.u32	d7, s15
   25af8:	vmul.f64	d7, d7, d10
   25afc:	vdiv.f64	d7, d7, d8
   25b00:	vmov	r2, r3, d7
   25b04:	bl	10f24 <printf@plt>
   25b08:	cmp	r4, #0
   25b0c:	beq	25b74 <__assert_fail@plt+0x14968>
   25b10:	vmov	s15, r5
   25b14:	ldr	r8, [pc, #688]	; 25dcc <__assert_fail@plt+0x14bc0>
   25b18:	mov	r9, r6
   25b1c:	mov	r5, #1
   25b20:	vcvt.f64.u32	d9, s15
   25b24:	mov	r7, #0
   25b28:	ldr	r3, [r9, #4]!
   25b2c:	mov	r1, r5
   25b30:	mov	r2, r3
   25b34:	mla	r7, r5, r3, r7
   25b38:	vmov	s15, r3
   25b3c:	mov	r0, r8
   25b40:	vmov	s13, r7
   25b44:	vcvt.f64.u32	d7, s15
   25b48:	vcvt.f64.u32	d6, s13
   25b4c:	vmul.f64	d7, d7, d10
   25b50:	vmul.f64	d6, d6, d10
   25b54:	vdiv.f64	d5, d7, d8
   25b58:	vdiv.f64	d7, d6, d9
   25b5c:	vstr	d5, [sp]
   25b60:	vstr	d7, [sp, #8]
   25b64:	bl	10f24 <printf@plt>
   25b68:	cmp	r4, r5
   25b6c:	add	r5, r5, #1
   25b70:	bne	25b28 <__assert_fail@plt+0x1491c>
   25b74:	mov	r0, r6
   25b78:	bl	10f54 <free@plt>
   25b7c:	ldr	r0, [sp, #52]	; 0x34
   25b80:	bl	10f54 <free@plt>
   25b84:	ldr	r3, [pc, #732]	; 25e68 <__assert_fail@plt+0x14c5c>
   25b88:	ldr	r0, [sp, #84]	; 0x54
   25b8c:	ldr	r4, [r3, #1700]	; 0x6a4
   25b90:	bl	10f54 <free@plt>
   25b94:	ldr	r0, [sp, #120]	; 0x78
   25b98:	bl	10f54 <free@plt>
   25b9c:	ldr	r3, [sp, #108]	; 0x6c
   25ba0:	cmp	r4, #0
   25ba4:	cmpne	r3, #0
   25ba8:	beq	25788 <__assert_fail@plt+0x1457c>
   25bac:	ldrd	r6, [sp, #88]	; 0x58
   25bb0:	mov	r5, #5
   25bb4:	ldr	r2, [pc, #532]	; 25dd0 <__assert_fail@plt+0x14bc4>
   25bb8:	mov	r3, r6
   25bbc:	ldr	r1, [pc, #528]	; 25dd4 <__assert_fail@plt+0x14bc8>
   25bc0:	str	r5, [sp]
   25bc4:	mov	r0, #0
   25bc8:	bl	11200 <dcngettext@plt>
   25bcc:	mov	r1, r6
   25bd0:	bl	10f24 <printf@plt>
   25bd4:	mov	r1, #4
   25bd8:	mov	r0, r6
   25bdc:	bl	10ef4 <calloc@plt>
   25be0:	mov	sl, r6
   25be4:	mov	r2, r5
   25be8:	subs	r4, r0, #0
   25bec:	beq	26690 <__assert_fail@plt+0x15484>
   25bf0:	ldr	r1, [pc, #480]	; 25dd8 <__assert_fail@plt+0x14bcc>
   25bf4:	mov	r0, #0
   25bf8:	bl	10f90 <dcgettext@plt>
   25bfc:	bl	10f24 <printf@plt>
   25c00:	ldrd	r2, [sp, #88]	; 0x58
   25c04:	orrs	r3, r2, r3
   25c08:	beq	264f4 <__assert_fail@plt+0x152e8>
   25c0c:	ldr	r3, [sp, #108]	; 0x6c
   25c10:	mov	r6, #0
   25c14:	sub	r1, r3, #8
   25c18:	ldrd	r2, [sp, #72]	; 0x48
   25c1c:	add	lr, r1, sl, lsl #3
   25c20:	str	sl, [sp, #40]	; 0x28
   25c24:	adds	r8, r2, #1
   25c28:	adc	r7, r3, r6
   25c2c:	mov	r0, r6
   25c30:	mov	ip, r4
   25c34:	mov	sl, r6
   25c38:	str	r4, [sp, #52]	; 0x34
   25c3c:	str	r8, [sp, #32]
   25c40:	str	r7, [sp, #48]	; 0x30
   25c44:	b	25c54 <__assert_fail@plt+0x14a48>
   25c48:	cmp	lr, r1
   25c4c:	add	ip, ip, #4
   25c50:	beq	2568c <__assert_fail@plt+0x14480>
   25c54:	ldrd	r2, [r1, #8]!
   25c58:	strd	r2, [sp, #24]
   25c5c:	orrs	r3, r2, r3
   25c60:	beq	25c48 <__assert_fail@plt+0x14a3c>
   25c64:	ldrd	r2, [sp, #56]	; 0x38
   25c68:	ldr	r5, [sp, #24]
   25c6c:	subs	r4, r5, r2
   25c70:	ldr	r2, [sp, #28]
   25c74:	str	r4, [sp, #112]	; 0x70
   25c78:	sbc	r3, r2, r3
   25c7c:	str	r3, [sp, #116]	; 0x74
   25c80:	ldrd	r4, [sp, #112]	; 0x70
   25c84:	ldrd	r2, [sp, #72]	; 0x48
   25c88:	cmp	r5, r3
   25c8c:	cmpeq	r4, r2
   25c90:	bcs	26970 <__assert_fail@plt+0x15764>
   25c94:	ldr	r5, [sp, #124]	; 0x7c
   25c98:	lsl	r7, r4, #3
   25c9c:	mov	r9, r0
   25ca0:	ldr	r7, [r5, r7]
   25ca4:	and	r8, r7, #1
   25ca8:	orrs	r3, r8, r9
   25cac:	bne	269c0 <__assert_fail@plt+0x157b4>
   25cb0:	ldr	r3, [sp, #56]	; 0x38
   25cb4:	ldr	r2, [sp, #24]
   25cb8:	ldr	r4, [sp, #28]
   25cbc:	subs	r2, r3, r2
   25cc0:	ldr	r7, [sp, #32]
   25cc4:	ldr	r3, [sp, #60]	; 0x3c
   25cc8:	sbc	r3, r3, r4
   25ccc:	adds	r8, r7, r2
   25cd0:	ldr	r2, [sp, #48]	; 0x30
   25cd4:	adc	r9, r2, r3
   25cd8:	ldr	r3, [sp, #112]	; 0x70
   25cdc:	mov	r2, #1
   25ce0:	add	r7, r5, r3, lsl #3
   25ce4:	mov	r3, #0
   25ce8:	ldrd	r4, [sp, #128]	; 0x80
   25cec:	b	25d04 <__assert_fail@plt+0x14af8>
   25cf0:	ldr	fp, [r7, #8]!
   25cf4:	mov	r5, r0
   25cf8:	and	r4, fp, #1
   25cfc:	orrs	fp, r4, r5
   25d00:	bne	26424 <__assert_fail@plt+0x15218>
   25d04:	adds	r2, r2, #1
   25d08:	adc	r3, r3, #0
   25d0c:	cmp	r3, r9
   25d10:	cmpeq	r2, r8
   25d14:	bne	25cf0 <__assert_fail@plt+0x14ae4>
   25d18:	mov	r7, r8
   25d1c:	strd	r4, [sp, #128]	; 0x80
   25d20:	mov	r3, #0
   25d24:	cmp	r3, r9
   25d28:	cmpeq	r6, r8
   25d2c:	add	sl, sl, r7
   25d30:	movcc	r6, r7
   25d34:	str	r7, [ip]
   25d38:	b	25c48 <__assert_fail@plt+0x14a3c>
   25d3c:	ldrd	r2, [r4, #32]
   25d40:	orrs	r1, r2, r3
   25d44:	strd	r2, [sp, #88]	; 0x58
   25d48:	bne	264b8 <__assert_fail@plt+0x152ac>
   25d4c:	mov	r1, #0
   25d50:	str	r1, [sp, #124]	; 0x7c
   25d54:	str	r1, [sp, #108]	; 0x6c
   25d58:	strd	r2, [sp, #72]	; 0x48
   25d5c:	strd	r2, [sp, #56]	; 0x38
   25d60:	ldr	r2, [pc, #256]	; 25e68 <__assert_fail@plt+0x14c5c>
   25d64:	ldr	r3, [r2, #1692]	; 0x69c
   25d68:	cmp	r3, #0
   25d6c:	bne	25e80 <__assert_fail@plt+0x14c74>
   25d70:	ldr	r3, [r2, #1696]	; 0x6a0
   25d74:	cmp	r3, #0
   25d78:	beq	258d8 <__assert_fail@plt+0x146cc>
   25d7c:	ldr	r3, [r2, #1704]	; 0x6a8
   25d80:	cmp	r3, #0
   25d84:	beq	26448 <__assert_fail@plt+0x1523c>
   25d88:	mov	r2, #5
   25d8c:	ldr	r1, [pc, #72]	; 25ddc <__assert_fail@plt+0x14bd0>
   25d90:	mov	r0, #0
   25d94:	bl	10f90 <dcgettext@plt>
   25d98:	bl	10f24 <printf@plt>
   25d9c:	b	258d8 <__assert_fail@plt+0x146cc>
   25da0:	cmp	r3, #0
   25da4:	beq	25788 <__assert_fail@plt+0x1457c>
   25da8:	ldr	r0, [sp, #84]	; 0x54
   25dac:	bl	10f54 <free@plt>
   25db0:	ldr	r0, [sp, #120]	; 0x78
   25db4:	bl	10f54 <free@plt>
   25db8:	b	25b9c <__assert_fail@plt+0x14990>
   25dbc:	nop			; (mov r0, r0)
   25dc0:	andeq	r0, r0, r0
   25dc4:	subsmi	r0, r9, r0
   25dc8:	andeq	r7, r6, ip, asr fp
   25dcc:	andeq	r7, r6, r0, lsr sl
   25dd0:	andeq	r7, r6, r4, asr sl
   25dd4:	muleq	r6, ip, sl
   25dd8:	andeq	r7, r6, ip, asr #19
   25ddc:	ldrdeq	r7, [r6], -r4
   25de0:	andeq	r7, r6, r8, lsr #15
   25de4:	ldrdeq	r7, [r6], -r4
   25de8:	strdeq	r7, [r6], -ip
   25dec:	andeq	r7, r6, r8, lsr r8
   25df0:	andeq	sl, r9, ip, lsr #8
   25df4:	andeq	lr, r5, ip, asr #27
   25df8:	andeq	r7, r6, r4, lsl #17
   25dfc:	ldrdeq	r6, [r6], -r4
   25e00:	ldrdeq	r6, [r6], -ip
   25e04:	muleq	r6, r8, r8
   25e08:	andeq	r7, r6, ip, ror r8
   25e0c:	andeq	r7, r6, r4, asr #11
   25e10:	andeq	r8, r5, r4, ror #27
   25e14:			; <UNDEFINED> instruction: 0x000675bc
   25e18:	andeq	r7, r6, ip, asr #11
   25e1c:	andeq	r3, r6, ip
   25e20:	andeq	r7, r6, ip, lsl #17
   25e24:	andeq	r7, r6, r8, ror r7
   25e28:	andeq	r9, r0, r6, lsr #32
   25e2c:	muleq	r0, r0, r3
   25e30:	andeq	sl, r9, r8, asr #19
   25e34:	andeq	r5, r6, r8, lsr #14
   25e38:	andeq	r7, r6, r0, lsr #22
   25e3c:	andeq	lr, r9, ip, asr sp
   25e40:	muleq	r6, r4, r9
   25e44:	andeq	r7, r6, r4, ror #21
   25e48:	andeq	r7, r6, ip, asr #14
   25e4c:	andeq	r7, r6, r0, lsr #12
   25e50:	andeq	r7, r6, r8, asr #12
   25e54:	muleq	r6, r4, r6
   25e58:			; <UNDEFINED> instruction: 0x000676b0
   25e5c:	andeq	r7, r6, r0, lsr r7
   25e60:	strdeq	r7, [r6], -r8
   25e64:	andeq	r7, r6, ip, ror #13
   25e68:	andeq	sl, r9, r8, lsr r4
   25e6c:	strdeq	r7, [r6], -r0
   25e70:	ldr	r3, [pc, #-16]	; 25e68 <__assert_fail@plt+0x14c5c>
   25e74:	ldr	r3, [r3, #1692]	; 0x69c
   25e78:	cmp	r3, #0
   25e7c:	beq	25d88 <__assert_fail@plt+0x14b7c>
   25e80:	ldr	r7, [fp, #96]	; 0x60
   25e84:	cmp	r7, #0
   25e88:	beq	264e0 <__assert_fail@plt+0x152d4>
   25e8c:	ldr	r2, [fp, #84]	; 0x54
   25e90:	cmp	r2, #0
   25e94:	beq	258d8 <__assert_fail@plt+0x146cc>
   25e98:	mov	r3, #0
   25e9c:	str	r3, [sp, #52]	; 0x34
   25ea0:	ldr	r3, [r7, #4]
   25ea4:	cmp	r3, #2
   25ea8:	cmpne	r3, #11
   25eac:	bne	26210 <__assert_fail@plt+0x15004>
   25eb0:	ldr	r1, [pc, #-80]	; 25e68 <__assert_fail@plt+0x14c5c>
   25eb4:	sub	r3, r3, #2
   25eb8:	clz	r3, r3
   25ebc:	ldr	r4, [r1, #1696]	; 0x6a0
   25ec0:	lsr	r3, r3, #5
   25ec4:	cmp	r4, #0
   25ec8:	moveq	r4, r3
   25ecc:	movne	r4, #0
   25ed0:	cmp	r4, #0
   25ed4:	bne	26210 <__assert_fail@plt+0x15004>
   25ed8:	ldrd	r2, [r7, #56]	; 0x38
   25edc:	add	r1, fp, #104	; 0x68
   25ee0:	str	r1, [sp, #96]	; 0x60
   25ee4:	add	r1, fp, #108	; 0x6c
   25ee8:	str	r1, [sp, #104]	; 0x68
   25eec:	orrs	r1, r2, r3
   25ef0:	beq	2626c <__assert_fail@plt+0x15060>
   25ef4:	ldrd	r0, [r7, #32]
   25ef8:	bl	58c00 <warn@@Base+0x3e30>
   25efc:	mov	r5, #5
   25f00:	ldr	r2, [pc, #-296]	; 25de0 <__assert_fail@plt+0x14bd4>
   25f04:	ldr	r1, [pc, #-296]	; 25de4 <__assert_fail@plt+0x14bd8>
   25f08:	str	r5, [sp]
   25f0c:	mov	r3, r0
   25f10:	str	r0, [sp, #160]	; 0xa0
   25f14:	mov	r0, r4
   25f18:	bl	11200 <dcngettext@plt>
   25f1c:	mov	r2, r7
   25f20:	add	r1, fp, #108	; 0x6c
   25f24:	mov	r6, r0
   25f28:	add	r0, fp, #104	; 0x68
   25f2c:	bl	16c64 <__assert_fail@plt+0x5a58>
   25f30:	ldr	r2, [sp, #160]	; 0xa0
   25f34:	mov	r1, r0
   25f38:	mov	r0, r6
   25f3c:	bl	10f24 <printf@plt>
   25f40:	ldr	r3, [pc, #-224]	; 25e68 <__assert_fail@plt+0x14c5c>
   25f44:	mov	r2, r5
   25f48:	ldr	r0, [r3]
   25f4c:	cmp	r0, #0
   25f50:	movne	r0, r4
   25f54:	ldrne	r1, [pc, #-372]	; 25de8 <__assert_fail@plt+0x14bdc>
   25f58:	ldreq	r1, [pc, #-372]	; 25dec <__assert_fail@plt+0x14be0>
   25f5c:	bl	10f90 <dcgettext@plt>
   25f60:	bl	10f24 <printf@plt>
   25f64:	ldr	r3, [pc, #-260]	; 25e68 <__assert_fail@plt+0x14c5c>
   25f68:	add	r2, sp, #160	; 0xa0
   25f6c:	mov	r1, r7
   25f70:	ldr	r3, [r3]
   25f74:	mov	r0, fp
   25f78:	cmp	r3, #0
   25f7c:	beq	26260 <__assert_fail@plt+0x15054>
   25f80:	bl	1772c <__assert_fail@plt+0x6520>
   25f84:	str	r0, [sp, #80]	; 0x50
   25f88:	ldr	r3, [sp, #80]	; 0x50
   25f8c:	cmp	r3, #0
   25f90:	beq	2620c <__assert_fail@plt+0x15000>
   25f94:	ldr	r6, [r7, #40]	; 0x28
   25f98:	ldr	r3, [fp, #88]	; 0x58
   25f9c:	cmp	r6, r3
   25fa0:	beq	263a8 <__assert_fail@plt+0x1519c>
   25fa4:	ldr	r3, [fp, #84]	; 0x54
   25fa8:	cmp	r6, r3
   25fac:	movcs	r6, #0
   25fb0:	movcs	sl, r6
   25fb4:	bcc	26458 <__assert_fail@plt+0x1524c>
   25fb8:	ldr	r3, [sp, #160]	; 0xa0
   25fbc:	cmp	r3, #0
   25fc0:	beq	261f0 <__assert_fail@plt+0x14fe4>
   25fc4:	add	r3, fp, #23
   25fc8:	str	r3, [sp, #32]
   25fcc:	add	r3, fp, #66	; 0x42
   25fd0:	str	r3, [sp, #48]	; 0x30
   25fd4:	ldr	r3, [sp, #80]	; 0x50
   25fd8:	ldr	r8, [pc, #-496]	; 25df0 <__assert_fail@plt+0x14be4>
   25fdc:	add	r4, r3, #16
   25fe0:	add	r3, sp, #168	; 0xa8
   25fe4:	mov	r5, #0
   25fe8:	str	r3, [sp, #40]	; 0x28
   25fec:	b	26130 <__assert_fail@plt+0x14f24>
   25ff0:	ldrb	r0, [r4, #5]
   25ff4:	sub	r3, r0, #4
   25ff8:	cmp	r3, #2
   25ffc:	bhi	26244 <__assert_fail@plt+0x15038>
   26000:	ldr	r2, [pc, #-532]	; 25df4 <__assert_fail@plt+0x14be8>
   26004:	add	r3, r2, r3, lsl #2
   26008:	ldr	r1, [r3, #292]	; 0x124
   2600c:	ldr	r0, [pc, #-512]	; 25e14 <__assert_fail@plt+0x14c08>
   26010:	bl	10f24 <printf@plt>
   26014:	ldr	r1, [r4, #8]
   26018:	mov	r0, fp
   2601c:	bl	16fd8 <__assert_fail@plt+0x5dcc>
   26020:	mov	r1, r0
   26024:	ldr	r0, [pc, #-564]	; 25df8 <__assert_fail@plt+0x14bec>
   26028:	bl	10f24 <printf@plt>
   2602c:	ldr	r1, [r4]
   26030:	cmp	r1, r6
   26034:	bcs	2622c <__assert_fail@plt+0x15020>
   26038:	add	r1, sl, r1
   2603c:	mov	r0, #25
   26040:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   26044:	add	r2, sp, #158	; 0x9e
   26048:	ldr	r1, [r7, #4]
   2604c:	str	r2, [sp, #16]
   26050:	ldr	r2, [sp, #40]	; 0x28
   26054:	add	r3, r4, #8
   26058:	str	r2, [sp, #12]
   2605c:	str	r3, [sp, #8]
   26060:	sub	r1, r1, #11
   26064:	str	r4, [sp, #4]
   26068:	clz	r1, r1
   2606c:	str	r5, [sp]
   26070:	lsr	r1, r1, #5
   26074:	mov	r3, r6
   26078:	mov	r2, sl
   2607c:	mov	r0, fp
   26080:	bl	21e80 <__assert_fail@plt+0x10c74>
   26084:	subs	r1, r0, #0
   26088:	beq	260ac <__assert_fail@plt+0x14ea0>
   2608c:	ldr	r3, [sp, #168]	; 0xa8
   26090:	cmp	r3, #0
   26094:	beq	26250 <__assert_fail@plt+0x15044>
   26098:	ldr	r2, [pc, #-676]	; 25dfc <__assert_fail@plt+0x14bf0>
   2609c:	cmp	r3, #1
   260a0:	ldr	r0, [pc, #-680]	; 25e00 <__assert_fail@plt+0x14bf4>
   260a4:	movne	r0, r2
   260a8:	bl	10f24 <printf@plt>
   260ac:	ldr	r1, [r8]
   260b0:	mov	r0, #10
   260b4:	bl	11158 <putc@plt>
   260b8:	ldrb	r0, [r4, #4]
   260bc:	lsrs	r0, r0, #4
   260c0:	bne	2611c <__assert_fail@plt+0x14f10>
   260c4:	ldr	r3, [r7, #44]	; 0x2c
   260c8:	cmp	r3, r5
   260cc:	bhi	2611c <__assert_fail@plt+0x14f10>
   260d0:	ldrh	r3, [fp, #66]	; 0x42
   260d4:	cmp	r3, #8
   260d8:	beq	2611c <__assert_fail@plt+0x14f10>
   260dc:	ldrb	r3, [fp, #23]
   260e0:	cmp	r3, #6
   260e4:	beq	2611c <__assert_fail@plt+0x14f10>
   260e8:	mov	r2, #5
   260ec:	ldr	r1, [pc, #-752]	; 25e04 <__assert_fail@plt+0x14bf8>
   260f0:	bl	10f90 <dcgettext@plt>
   260f4:	mov	r2, r7
   260f8:	ldr	r1, [sp, #104]	; 0x68
   260fc:	mov	r9, r0
   26100:	ldr	r0, [sp, #96]	; 0x60
   26104:	bl	16c64 <__assert_fail@plt+0x5a58>
   26108:	ldr	r3, [r7, #44]	; 0x2c
   2610c:	mov	r1, r5
   26110:	mov	r2, r0
   26114:	mov	r0, r9
   26118:	bl	54dd0 <warn@@Base>
   2611c:	ldr	r3, [sp, #160]	; 0xa0
   26120:	add	r5, r5, #1
   26124:	cmp	r3, r5
   26128:	add	r4, r4, #32
   2612c:	bls	261f0 <__assert_fail@plt+0x14fe4>
   26130:	mov	r1, r5
   26134:	ldr	r0, [pc, #-820]	; 25e08 <__assert_fail@plt+0x14bfc>
   26138:	bl	10f24 <printf@plt>
   2613c:	mov	r2, #6
   26140:	ldrd	r0, [r4, #-16]
   26144:	bl	14244 <__assert_fail@plt+0x3038>
   26148:	ldr	r1, [r8]
   2614c:	mov	r0, #32
   26150:	bl	11158 <putc@plt>
   26154:	mov	r2, #2
   26158:	ldrd	r0, [r4, #-8]
   2615c:	bl	14244 <__assert_fail@plt+0x3038>
   26160:	ldrb	r2, [r4, #4]
   26164:	ldr	r9, [sp, #32]
   26168:	ldr	r1, [sp, #48]	; 0x30
   2616c:	and	r2, r2, #15
   26170:	mov	r0, r9
   26174:	bl	1a2ec <__assert_fail@plt+0x90e0>
   26178:	mov	r1, r0
   2617c:	ldr	r0, [pc, #-880]	; 25e14 <__assert_fail@plt+0x14c08>
   26180:	bl	10f24 <printf@plt>
   26184:	ldrb	r1, [r4, #4]
   26188:	mov	r0, r9
   2618c:	lsr	r1, r1, #4
   26190:	bl	1b5d8 <__assert_fail@plt+0xa3cc>
   26194:	mov	r1, r0
   26198:	ldr	r0, [pc, #-916]	; 25e0c <__assert_fail@plt+0x14c00>
   2619c:	bl	10f24 <printf@plt>
   261a0:	ldrb	r3, [fp, #23]
   261a4:	cmp	r3, #6
   261a8:	beq	25ff0 <__assert_fail@plt+0x14de4>
   261ac:	ldrb	r9, [r4, #5]
   261b0:	ldr	r3, [pc, #-936]	; 25e10 <__assert_fail@plt+0x14c04>
   261b4:	ldr	r0, [pc, #-936]	; 25e14 <__assert_fail@plt+0x14c08>
   261b8:	and	r9, r9, #3
   261bc:	add	r3, r3, r9, lsl #2
   261c0:	ldr	r1, [r3, #180]	; 0xb4
   261c4:	bl	10f24 <printf@plt>
   261c8:	ldrb	r1, [r4, #5]
   261cc:	cmp	r1, r9
   261d0:	beq	26014 <__assert_fail@plt+0x14e08>
   261d4:	eor	r1, r1, r9
   261d8:	mov	r0, fp
   261dc:	bl	24e64 <__assert_fail@plt+0x13c58>
   261e0:	mov	r1, r0
   261e4:	ldr	r0, [pc, #-980]	; 25e18 <__assert_fail@plt+0x14c0c>
   261e8:	bl	10f24 <printf@plt>
   261ec:	b	26014 <__assert_fail@plt+0x14e08>
   261f0:	ldr	r0, [sp, #80]	; 0x50
   261f4:	bl	10f54 <free@plt>
   261f8:	ldr	r3, [fp, #104]	; 0x68
   261fc:	cmp	r3, sl
   26200:	beq	2620c <__assert_fail@plt+0x15000>
   26204:	mov	r0, sl
   26208:	bl	10f54 <free@plt>
   2620c:	ldr	r2, [fp, #84]	; 0x54
   26210:	ldr	r3, [sp, #52]	; 0x34
   26214:	add	r7, r7, #72	; 0x48
   26218:	add	r3, r3, #1
   2621c:	cmp	r2, r3
   26220:	str	r3, [sp, #52]	; 0x34
   26224:	bhi	25ea0 <__assert_fail@plt+0x14c94>
   26228:	b	258d8 <__assert_fail@plt+0x146cc>
   2622c:	ldr	r1, [pc, #-1048]	; 25e1c <__assert_fail@plt+0x14c10>
   26230:	mov	r2, #5
   26234:	mov	r0, #0
   26238:	bl	10f90 <dcgettext@plt>
   2623c:	mov	r1, r0
   26240:	b	2603c <__assert_fail@plt+0x14e30>
   26244:	bl	16f58 <__assert_fail@plt+0x5d4c>
   26248:	mov	r1, r0
   2624c:	b	2600c <__assert_fail@plt+0x14e00>
   26250:	ldrh	r2, [sp, #158]	; 0x9e
   26254:	ldr	r0, [pc, #-1084]	; 25e20 <__assert_fail@plt+0x14c14>
   26258:	bl	10f24 <printf@plt>
   2625c:	b	260ac <__assert_fail@plt+0x14ea0>
   26260:	bl	17bf4 <__assert_fail@plt+0x69e8>
   26264:	str	r0, [sp, #80]	; 0x50
   26268:	b	25f88 <__assert_fail@plt+0x14d7c>
   2626c:	mov	r0, r4
   26270:	mov	r2, #5
   26274:	ldr	r1, [pc, #-1112]	; 25e24 <__assert_fail@plt+0x14c18>
   26278:	bl	10f90 <dcgettext@plt>
   2627c:	mov	r2, r7
   26280:	add	r1, fp, #108	; 0x6c
   26284:	mov	r4, r0
   26288:	add	r0, fp, #104	; 0x68
   2628c:	bl	16c64 <__assert_fail@plt+0x5a58>
   26290:	mov	r1, r0
   26294:	mov	r0, r4
   26298:	bl	10f24 <printf@plt>
   2629c:	ldr	r2, [fp, #84]	; 0x54
   262a0:	b	26210 <__assert_fail@plt+0x15004>
   262a4:	cmp	r2, #0
   262a8:	bne	263e0 <__assert_fail@plt+0x151d4>
   262ac:	ldr	r3, [ip, #1128]	; 0x468
   262b0:	cmp	r3, #0
   262b4:	beq	263e0 <__assert_fail@plt+0x151d4>
   262b8:	ldrh	r2, [fp, #66]	; 0x42
   262bc:	ldr	r3, [pc, #-1180]	; 25e28 <__assert_fail@plt+0x14c1c>
   262c0:	ldr	r1, [pc, #-1180]	; 25e2c <__assert_fail@plt+0x14c20>
   262c4:	cmp	r2, #22
   262c8:	cmpne	r2, r3
   262cc:	moveq	r3, #1
   262d0:	movne	r3, #0
   262d4:	cmp	r2, r1
   262d8:	orreq	r3, r3, #1
   262dc:	cmp	r3, #0
   262e0:	moveq	r6, #4
   262e4:	beq	262f8 <__assert_fail@plt+0x150ec>
   262e8:	ldrb	r3, [fp, #20]
   262ec:	cmp	r3, #2
   262f0:	movne	r6, #4
   262f4:	moveq	r6, #8
   262f8:	mov	r1, #0
   262fc:	mov	r0, #16
   26300:	ldrd	r2, [sp, #64]	; 0x40
   26304:	strd	r0, [sp]
   26308:	mov	r0, fp
   2630c:	ldr	r5, [fp, #4]
   26310:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   26314:	ldr	r3, [pc, #-1204]	; 25e68 <__assert_fail@plt+0x14c5c>
   26318:	mov	r2, #0
   2631c:	ldr	r1, [r3, #656]	; 0x290
   26320:	add	r1, r0, r1
   26324:	mov	r0, r5
   26328:	bl	111a0 <fseek@plt>
   2632c:	subs	r7, r0, #0
   26330:	bne	263b8 <__assert_fail@plt+0x151ac>
   26334:	add	r0, sp, #160	; 0xa0
   26338:	ldr	r3, [fp, #4]
   2633c:	mov	r2, #1
   26340:	mov	r1, r6
   26344:	bl	10ffc <fread@plt>
   26348:	cmp	r0, #1
   2634c:	beq	26534 <__assert_fail@plt+0x15328>
   26350:	ldr	r1, [pc, #-1292]	; 25e4c <__assert_fail@plt+0x14c40>
   26354:	mov	r2, #5
   26358:	mov	r0, r7
   2635c:	bl	10f90 <dcgettext@plt>
   26360:	str	r7, [sp, #120]	; 0x78
   26364:	bl	548ac <error@@Base>
   26368:	str	r7, [sp, #84]	; 0x54
   2636c:	ldr	r3, [pc, #-1292]	; 25e68 <__assert_fail@plt+0x14c5c>
   26370:	ldr	r5, [r3, #1704]	; 0x6a8
   26374:	cmp	r5, #0
   26378:	bne	26524 <__assert_fail@plt+0x15318>
   2637c:	ldr	r0, [sp, #84]	; 0x54
   26380:	mov	r6, #0
   26384:	mov	r7, #0
   26388:	bl	10f54 <free@plt>
   2638c:	ldr	r0, [sp, #120]	; 0x78
   26390:	strd	r6, [sp, #24]
   26394:	str	r5, [sp, #120]	; 0x78
   26398:	bl	10f54 <free@plt>
   2639c:	str	r5, [sp, #84]	; 0x54
   263a0:	strd	r6, [sp, #64]	; 0x40
   263a4:	b	257c4 <__assert_fail@plt+0x145b8>
   263a8:	ldr	r3, [fp, #104]	; 0x68
   263ac:	ldr	r6, [fp, #108]	; 0x6c
   263b0:	mov	sl, r3
   263b4:	b	25fb8 <__assert_fail@plt+0x14dac>
   263b8:	mov	r2, #5
   263bc:	ldr	r1, [pc, #-1368]	; 25e6c <__assert_fail@plt+0x14c60>
   263c0:	mov	r0, #0
   263c4:	bl	10f90 <dcgettext@plt>
   263c8:	mov	r3, #0
   263cc:	mov	r5, r3
   263d0:	str	r3, [sp, #120]	; 0x78
   263d4:	bl	548ac <error@@Base>
   263d8:	str	r5, [sp, #84]	; 0x54
   263dc:	b	2636c <__assert_fail@plt+0x15160>
   263e0:	ldr	r3, [pc, #-1464]	; 25e30 <__assert_fail@plt+0x14c24>
   263e4:	mov	sl, r3
   263e8:	ldrd	r2, [r3, #-8]
   263ec:	orrs	r1, r2, r3
   263f0:	strd	r2, [sp, #88]	; 0x58
   263f4:	beq	266a4 <__assert_fail@plt+0x15498>
   263f8:	mov	r2, #0
   263fc:	mov	r3, #0
   26400:	mov	r1, #0
   26404:	str	r1, [sp, #84]	; 0x54
   26408:	strd	r2, [sp, #64]	; 0x40
   2640c:	str	r1, [sp, #120]	; 0x78
   26410:	strd	r2, [sp, #24]
   26414:	b	257f4 <__assert_fail@plt+0x145e8>
   26418:	ldr	r3, [sp, #32]
   2641c:	str	r1, [r3]
   26420:	b	25a78 <__assert_fail@plt+0x1486c>
   26424:	strd	r4, [sp, #128]	; 0x80
   26428:	mov	r7, r2
   2642c:	mov	r8, r2
   26430:	mov	r9, r3
   26434:	b	25d20 <__assert_fail@plt+0x14b14>
   26438:	ldr	r3, [pc, #-1496]	; 25e68 <__assert_fail@plt+0x14c5c>
   2643c:	ldr	r3, [r3, #1692]	; 0x69c
   26440:	cmp	r3, #0
   26444:	bne	25e80 <__assert_fail@plt+0x14c74>
   26448:	ldr	r7, [fp, #96]	; 0x60
   2644c:	cmp	r7, #0
   26450:	bne	25e8c <__assert_fail@plt+0x14c80>
   26454:	b	25d88 <__assert_fail@plt+0x14b7c>
   26458:	ldr	r3, [fp, #96]	; 0x60
   2645c:	add	r6, r6, r6, lsl #3
   26460:	mov	r2, #5
   26464:	add	r6, r3, r6, lsl #3
   26468:	ldr	r1, [pc, #-1596]	; 25e34 <__assert_fail@plt+0x14c28>
   2646c:	mov	r0, #0
   26470:	ldrd	r4, [r6, #32]
   26474:	ldr	r8, [r6, #24]
   26478:	bl	10f90 <dcgettext@plt>
   2647c:	strd	r4, [sp, #8]
   26480:	mov	r4, #1
   26484:	mov	r5, #0
   26488:	mov	r3, r8
   2648c:	strd	r4, [sp]
   26490:	add	r2, fp, #8
   26494:	add	r1, fp, #4
   26498:	str	r0, [sp, #16]
   2649c:	mov	r0, #0
   264a0:	bl	1717c <__assert_fail@plt+0x5f70>
   264a4:	subs	r3, r0, #0
   264a8:	mov	sl, r3
   264ac:	ldrne	r6, [r6, #32]
   264b0:	moveq	r6, r3
   264b4:	b	25fb8 <__assert_fail@plt+0x14dac>
   264b8:	mov	r2, #0
   264bc:	mov	r3, #0
   264c0:	mov	ip, #0
   264c4:	ldrd	r0, [sp, #88]	; 0x58
   264c8:	strd	r2, [sp, #72]	; 0x48
   264cc:	str	ip, [sp, #124]	; 0x7c
   264d0:	strd	r2, [sp, #56]	; 0x38
   264d4:	strd	r2, [sp, #88]	; 0x58
   264d8:	str	ip, [sp, #108]	; 0x6c
   264dc:	b	25890 <__assert_fail@plt+0x14684>
   264e0:	ldr	r3, [pc, #-1664]	; 25e68 <__assert_fail@plt+0x14c5c>
   264e4:	ldr	r3, [r3, #1696]	; 0x6a0
   264e8:	cmp	r3, #0
   264ec:	beq	258d8 <__assert_fail@plt+0x146cc>
   264f0:	b	25d88 <__assert_fail@plt+0x14b7c>
   264f4:	mov	r1, #4
   264f8:	mov	r0, #1
   264fc:	bl	10ef4 <calloc@plt>
   26500:	subs	r7, r0, #0
   26504:	bne	25768 <__assert_fail@plt+0x1455c>
   26508:	mov	r0, r4
   2650c:	bl	10f54 <free@plt>
   26510:	mov	r2, #5
   26514:	ldr	r1, [pc, #-1764]	; 25e38 <__assert_fail@plt+0x14c2c>
   26518:	mov	r0, #0
   2651c:	bl	10f90 <dcgettext@plt>
   26520:	bl	548ac <error@@Base>
   26524:	mov	r0, #0
   26528:	add	sp, sp, #188	; 0xbc
   2652c:	vpop	{d8-d10}
   26530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26534:	add	r5, sp, #168	; 0xa8
   26538:	mov	r2, r0
   2653c:	ldr	r3, [fp, #4]
   26540:	mov	r0, r5
   26544:	mov	r1, r6
   26548:	bl	10ffc <fread@plt>
   2654c:	cmp	r0, #1
   26550:	bne	26834 <__assert_fail@plt+0x15628>
   26554:	ldr	r7, [pc, #-1824]	; 25e3c <__assert_fail@plt+0x14c30>
   26558:	add	r0, sp, #160	; 0xa0
   2655c:	mov	r1, r6
   26560:	ldr	r3, [r7]
   26564:	blx	r3
   26568:	ldr	r3, [r7]
   2656c:	add	r7, fp, #8
   26570:	strd	r0, [sp, #64]	; 0x40
   26574:	mov	r0, r5
   26578:	mov	r1, r6
   2657c:	blx	r3
   26580:	add	r5, fp, #4
   26584:	ldrd	r2, [sp, #64]	; 0x40
   26588:	str	r6, [sp]
   2658c:	strd	r0, [sp, #24]
   26590:	mov	r1, r7
   26594:	mov	r0, r5
   26598:	bl	2457c <__assert_fail@plt+0x13370>
   2659c:	mov	r1, r7
   265a0:	str	r6, [sp]
   265a4:	ldrd	r2, [sp, #24]
   265a8:	mov	sl, r0
   265ac:	str	r0, [sp, #84]	; 0x54
   265b0:	mov	r0, r5
   265b4:	bl	2457c <__assert_fail@plt+0x13370>
   265b8:	cmp	r0, #0
   265bc:	cmpne	sl, #0
   265c0:	str	r0, [sp, #120]	; 0x78
   265c4:	bne	257c4 <__assert_fail@plt+0x145b8>
   265c8:	b	2636c <__assert_fail@plt+0x15160>
   265cc:	mov	r2, #5
   265d0:	ldr	r1, [pc, #-1900]	; 25e6c <__assert_fail@plt+0x14c60>
   265d4:	mov	r0, #0
   265d8:	bl	10f90 <dcgettext@plt>
   265dc:	mov	r2, #0
   265e0:	mov	r3, #0
   265e4:	mov	r6, r2
   265e8:	mov	r7, r3
   265ec:	strd	r6, [sp, #72]	; 0x48
   265f0:	bl	548ac <error@@Base>
   265f4:	mov	r3, r7
   265f8:	mov	r2, r6
   265fc:	strd	r2, [sp, #56]	; 0x38
   26600:	mov	r3, #0
   26604:	str	r3, [sp, #108]	; 0x6c
   26608:	ldr	r0, [sp, #108]	; 0x6c
   2660c:	bl	10f54 <free@plt>
   26610:	ldr	r3, [pc, #-1968]	; 25e68 <__assert_fail@plt+0x14c5c>
   26614:	ldr	r6, [r3, #1704]	; 0x6a8
   26618:	cmp	r6, #0
   2661c:	bne	26524 <__assert_fail@plt+0x15318>
   26620:	mov	r2, #0
   26624:	mov	r3, #0
   26628:	str	r6, [sp, #108]	; 0x6c
   2662c:	str	r6, [sp, #124]	; 0x7c
   26630:	strd	r2, [sp, #88]	; 0x58
   26634:	ldr	ip, [pc, #-2004]	; 25e68 <__assert_fail@plt+0x14c5c>
   26638:	ldrd	r0, [r4, #32]
   2663c:	ldr	lr, [ip, #1416]	; 0x588
   26640:	ldr	ip, [ip, #1420]	; 0x58c
   26644:	orr	r2, r0, lr
   26648:	orr	r3, r1, ip
   2664c:	orrs	r3, r2, r3
   26650:	bne	25890 <__assert_fail@plt+0x14684>
   26654:	b	25d60 <__assert_fail@plt+0x14b54>
   26658:	mov	r1, r3
   2665c:	mov	r2, #0
   26660:	str	r3, [sp, #84]	; 0x54
   26664:	mov	r3, #0
   26668:	str	r1, [sp, #120]	; 0x78
   2666c:	strd	r2, [sp, #24]
   26670:	strd	r2, [sp, #64]	; 0x40
   26674:	b	25810 <__assert_fail@plt+0x14604>
   26678:	mov	r2, r4
   2667c:	ldr	r1, [pc, #-2116]	; 25e40 <__assert_fail@plt+0x14c34>
   26680:	bl	10f90 <dcgettext@plt>
   26684:	bl	548ac <error@@Base>
   26688:	ldr	r0, [sp, #52]	; 0x34
   2668c:	b	2578c <__assert_fail@plt+0x14580>
   26690:	ldr	r1, [pc, #-2132]	; 25e44 <__assert_fail@plt+0x14c38>
   26694:	bl	10f90 <dcgettext@plt>
   26698:	bl	548ac <error@@Base>
   2669c:	mov	r0, r4
   266a0:	b	2578c <__assert_fail@plt+0x14580>
   266a4:	mov	ip, #0
   266a8:	ldrd	r0, [sp, #64]	; 0x40
   266ac:	str	ip, [sp, #124]	; 0x7c
   266b0:	str	ip, [sp, #108]	; 0x6c
   266b4:	str	ip, [sp, #120]	; 0x78
   266b8:	str	ip, [sp, #84]	; 0x54
   266bc:	strd	r2, [sp, #72]	; 0x48
   266c0:	strd	r2, [sp, #56]	; 0x38
   266c4:	strd	r2, [sp, #24]
   266c8:	strd	r2, [sp, #64]	; 0x40
   266cc:	b	25890 <__assert_fail@plt+0x14684>
   266d0:	mov	r2, #5
   266d4:	ldr	r1, [pc, #-2196]	; 25e48 <__assert_fail@plt+0x14c3c>
   266d8:	mov	r0, #0
   266dc:	bl	10f90 <dcgettext@plt>
   266e0:	bl	10f24 <printf@plt>
   266e4:	ldr	r3, [pc, #-2180]	; 25e68 <__assert_fail@plt+0x14c5c>
   266e8:	mov	r2, #5
   266ec:	ldr	r0, [r3]
   266f0:	cmp	r0, #0
   266f4:	beq	269c8 <__assert_fail@plt+0x157bc>
   266f8:	ldr	r1, [pc, #-2216]	; 25e58 <__assert_fail@plt+0x14c4c>
   266fc:	mov	r0, #0
   26700:	bl	10f90 <dcgettext@plt>
   26704:	bl	10f24 <printf@plt>
   26708:	ldrd	r2, [sp, #88]	; 0x58
   2670c:	orrs	r3, r2, r3
   26710:	beq	258d8 <__assert_fail@plt+0x146cc>
   26714:	ldr	r6, [sp, #88]	; 0x58
   26718:	mov	r7, #0
   2671c:	mov	r5, r7
   26720:	mov	r4, r7
   26724:	str	r6, [sp, #32]
   26728:	mov	sl, fp
   2672c:	b	26740 <__assert_fail@plt+0x15534>
   26730:	ldr	r3, [sp, #32]
   26734:	add	r4, r4, #1
   26738:	cmp	r4, r3
   2673c:	beq	258d8 <__assert_fail@plt+0x146cc>
   26740:	ldr	r2, [sp, #108]	; 0x6c
   26744:	lsl	r3, r4, #3
   26748:	add	r2, r2, r3
   2674c:	ldrd	r2, [r2]
   26750:	orrs	r1, r2, r3
   26754:	beq	26730 <__assert_fail@plt+0x15524>
   26758:	ldrd	r0, [sp, #56]	; 0x38
   2675c:	subs	r8, r2, r0
   26760:	sbc	r9, r3, r1
   26764:	sub	fp, r8, #-536870911	; 0xe0000001
   26768:	ldr	r3, [sp, #124]	; 0x7c
   2676c:	add	fp, r3, fp, lsl #3
   26770:	b	26790 <__assert_fail@plt+0x15584>
   26774:	ldr	r3, [fp, #8]!
   26778:	adds	r8, r8, #1
   2677c:	and	r6, r3, #1
   26780:	mov	r7, r5
   26784:	adc	r9, r9, #0
   26788:	orrs	r3, r6, r7
   2678c:	bne	26730 <__assert_fail@plt+0x15524>
   26790:	ldrd	r0, [sp, #56]	; 0x38
   26794:	str	r4, [sp]
   26798:	adds	r2, r8, r0
   2679c:	adc	r3, r9, r1
   267a0:	mov	r0, sl
   267a4:	bl	250d4 <__assert_fail@plt+0x13ec8>
   267a8:	ldrd	r2, [sp, #72]	; 0x48
   267ac:	cmp	r9, r3
   267b0:	cmpeq	r8, r2
   267b4:	bcc	26774 <__assert_fail@plt+0x15568>
   267b8:	b	26730 <__assert_fail@plt+0x15524>
   267bc:	ldrd	r8, [sp, #96]	; 0x60
   267c0:	ldr	r4, [sp, #104]	; 0x68
   267c4:	mov	r2, #0
   267c8:	mov	r3, #0
   267cc:	strd	r2, [sp, #72]	; 0x48
   267d0:	b	26608 <__assert_fail@plt+0x153fc>
   267d4:	mov	r2, #5
   267d8:	ldr	r1, [pc, #-2452]	; 25e4c <__assert_fail@plt+0x14c40>
   267dc:	mov	r0, r6
   267e0:	bl	10f90 <dcgettext@plt>
   267e4:	mov	r2, #0
   267e8:	mov	r3, #0
   267ec:	strd	r2, [sp, #72]	; 0x48
   267f0:	bl	548ac <error@@Base>
   267f4:	mov	r2, #0
   267f8:	mov	r3, #0
   267fc:	str	r6, [sp, #108]	; 0x6c
   26800:	strd	r2, [sp, #56]	; 0x38
   26804:	b	26608 <__assert_fail@plt+0x153fc>
   26808:	mov	r2, #5
   2680c:	ldr	r1, [pc, #-2472]	; 25e6c <__assert_fail@plt+0x14c60>
   26810:	mov	r0, #0
   26814:	bl	10f90 <dcgettext@plt>
   26818:	bl	548ac <error@@Base>
   2681c:	mov	r3, #0
   26820:	mov	r2, #0
   26824:	strd	r2, [sp, #72]	; 0x48
   26828:	mov	r3, #0
   2682c:	str	r3, [sp, #108]	; 0x6c
   26830:	b	26608 <__assert_fail@plt+0x153fc>
   26834:	mov	r2, #5
   26838:	ldr	r1, [pc, #-2544]	; 25e50 <__assert_fail@plt+0x14c44>
   2683c:	b	26358 <__assert_fail@plt+0x1514c>
   26840:	ldr	r1, [pc, #-2548]	; 25e54 <__assert_fail@plt+0x14c48>
   26844:	mov	r2, #5
   26848:	mov	r0, #0
   2684c:	bl	10f90 <dcgettext@plt>
   26850:	bl	10f24 <printf@plt>
   26854:	ldr	r3, [pc, #-2548]	; 25e68 <__assert_fail@plt+0x14c5c>
   26858:	mov	r2, #5
   2685c:	ldr	r0, [r3]
   26860:	cmp	r0, #0
   26864:	movne	r0, #0
   26868:	ldrne	r1, [pc, #-2584]	; 25e58 <__assert_fail@plt+0x14c4c>
   2686c:	ldreq	r1, [pc, #-2576]	; 25e64 <__assert_fail@plt+0x14c58>
   26870:	bl	10f90 <dcgettext@plt>
   26874:	bl	10f24 <printf@plt>
   26878:	ldrd	r4, [sp, #24]
   2687c:	mov	r1, #1
   26880:	mov	r0, r4
   26884:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   26888:	mov	r2, r4
   2688c:	mov	r1, #0
   26890:	mov	r7, r0
   26894:	bl	110bc <memset@plt>
   26898:	ldrd	r2, [sp, #64]	; 0x40
   2689c:	orrs	r3, r2, r3
   268a0:	beq	2695c <__assert_fail@plt+0x15750>
   268a4:	ldr	r3, [sp, #84]	; 0x54
   268a8:	ldr	r2, [sp, #64]	; 0x40
   268ac:	strd	r8, [sp, #40]	; 0x28
   268b0:	ldr	r9, [sp, #120]	; 0x78
   268b4:	sub	r3, r3, #8
   268b8:	mov	r6, #0
   268bc:	str	r3, [sp, #32]
   268c0:	add	r3, r3, r2, lsl #3
   268c4:	str	r3, [sp, #48]	; 0x30
   268c8:	ldr	r3, [sp, #32]
   268cc:	ldrd	r4, [r3, #8]!
   268d0:	str	r3, [sp, #32]
   268d4:	orrs	r3, r4, r5
   268d8:	beq	26948 <__assert_fail@plt+0x1573c>
   268dc:	mov	r8, r9
   268e0:	b	26904 <__assert_fail@plt+0x156f8>
   268e4:	ldrb	r1, [r3]
   268e8:	cmp	r1, #0
   268ec:	bne	26930 <__assert_fail@plt+0x15724>
   268f0:	mov	r1, #1
   268f4:	strb	r1, [r3]
   268f8:	ldrd	r4, [r8, r2]
   268fc:	orrs	r3, r4, r5
   26900:	beq	26968 <__assert_fail@plt+0x1575c>
   26904:	mov	r2, r4
   26908:	mov	r3, r5
   2690c:	mov	r0, fp
   26910:	str	r6, [sp]
   26914:	bl	250d4 <__assert_fail@plt+0x13ec8>
   26918:	ldrd	r0, [sp, #24]
   2691c:	add	r3, r7, r4
   26920:	lsl	r2, r4, #3
   26924:	cmp	r5, r1
   26928:	cmpeq	r4, r0
   2692c:	bcc	268e4 <__assert_fail@plt+0x156d8>
   26930:	mov	r2, #5
   26934:	ldr	r1, [pc, #-2784]	; 25e5c <__assert_fail@plt+0x14c50>
   26938:	mov	r0, #0
   2693c:	mov	r9, r8
   26940:	bl	10f90 <dcgettext@plt>
   26944:	bl	548ac <error@@Base>
   26948:	ldr	r3, [sp, #48]	; 0x30
   2694c:	ldr	r2, [sp, #32]
   26950:	add	r6, r6, #1
   26954:	cmp	r3, r2
   26958:	bne	268c8 <__assert_fail@plt+0x156bc>
   2695c:	mov	r0, r7
   26960:	bl	10f54 <free@plt>
   26964:	b	258cc <__assert_fail@plt+0x146c0>
   26968:	mov	r9, r8
   2696c:	b	26948 <__assert_fail@plt+0x1573c>
   26970:	mov	r7, #1
   26974:	mov	r8, #1
   26978:	mov	r9, #0
   2697c:	b	25d20 <__assert_fail@plt+0x14b14>
   26980:	mov	r0, r7
   26984:	bl	10f54 <free@plt>
   26988:	mov	r1, #4
   2698c:	mov	r0, #1
   26990:	bl	10ef4 <calloc@plt>
   26994:	subs	r6, r0, #0
   26998:	bne	25b74 <__assert_fail@plt+0x14968>
   2699c:	ldr	r0, [sp, #52]	; 0x34
   269a0:	bl	10f54 <free@plt>
   269a4:	mov	r2, #5
   269a8:	ldr	r1, [pc, #-2896]	; 25e60 <__assert_fail@plt+0x14c54>
   269ac:	mov	r0, #0
   269b0:	bl	10f90 <dcgettext@plt>
   269b4:	bl	548ac <error@@Base>
   269b8:	mov	r0, #0
   269bc:	b	2578c <__assert_fail@plt+0x14580>
   269c0:	mov	r7, #1
   269c4:	b	25d20 <__assert_fail@plt+0x14b14>
   269c8:	ldr	r1, [pc, #-2924]	; 25e64 <__assert_fail@plt+0x14c58>
   269cc:	bl	10f90 <dcgettext@plt>
   269d0:	bl	10f24 <printf@plt>
   269d4:	b	26708 <__assert_fail@plt+0x154fc>
   269d8:	ldrd	r0, [sp, #88]	; 0x58
   269dc:	ldr	ip, [sp, #40]	; 0x28
   269e0:	strd	r4, [sp, #72]	; 0x48
   269e4:	lsl	r3, r1, #2
   269e8:	ldr	r1, [sp, #48]	; 0x30
   269ec:	lsl	r2, r0, #2
   269f0:	adds	r2, r2, r1
   269f4:	orr	r3, r3, r0, lsr #30
   269f8:	mov	r1, #0
   269fc:	mov	r0, #4
   26a00:	adc	r3, r3, ip
   26a04:	strd	r0, [sp]
   26a08:	mov	r0, fp
   26a0c:	ldr	r5, [fp, #4]
   26a10:	ldrd	r8, [sp, #96]	; 0x60
   26a14:	ldr	r4, [sp, #104]	; 0x68
   26a18:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   26a1c:	ldr	r3, [pc, #-3004]	; 25e68 <__assert_fail@plt+0x14c5c>
   26a20:	mov	r2, r7
   26a24:	ldr	r1, [r3, #656]	; 0x290
   26a28:	add	r1, r0, r1
   26a2c:	mov	r0, r5
   26a30:	bl	111a0 <fseek@plt>
   26a34:	cmp	r0, #0
   26a38:	bne	26a74 <__assert_fail@plt+0x15868>
   26a3c:	mov	r3, #4
   26a40:	str	r3, [sp]
   26a44:	ldr	r1, [sp, #80]	; 0x50
   26a48:	ldrd	r2, [sp, #72]	; 0x48
   26a4c:	ldr	r0, [sp, #52]	; 0x34
   26a50:	bl	2457c <__assert_fail@plt+0x13370>
   26a54:	subs	r3, r0, #0
   26a58:	str	r3, [sp, #124]	; 0x7c
   26a5c:	bne	26634 <__assert_fail@plt+0x15428>
   26a60:	b	26608 <__assert_fail@plt+0x153fc>
   26a64:	mov	r2, #5
   26a68:	ldr	r1, [pc, #-3076]	; 25e6c <__assert_fail@plt+0x14c60>
   26a6c:	mov	r0, #0
   26a70:	b	25674 <__assert_fail@plt+0x14468>
   26a74:	mov	r0, r7
   26a78:	mov	r2, #5
   26a7c:	ldr	r1, [pc, #-3096]	; 25e6c <__assert_fail@plt+0x14c60>
   26a80:	b	25674 <__assert_fail@plt+0x14468>
   26a84:	ldr	r3, [r0, #104]	; 0x68
   26a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a8c:	sub	sp, sp, #132	; 0x84
   26a90:	cmp	r3, #0
   26a94:	streq	r3, [sp, #48]	; 0x30
   26a98:	beq	26c34 <__assert_fail@plt+0x15a28>
   26a9c:	mov	sl, r0
   26aa0:	mov	r2, #40	; 0x28
   26aa4:	mov	r1, #0
   26aa8:	add	r0, sp, #88	; 0x58
   26aac:	bl	110bc <memset@plt>
   26ab0:	ldr	r6, [sl, #84]	; 0x54
   26ab4:	ldr	r4, [sl, #96]	; 0x60
   26ab8:	cmp	r6, #0
   26abc:	beq	2787c <__assert_fail@plt+0x16670>
   26ac0:	mov	r8, #0
   26ac4:	mov	r3, #1
   26ac8:	mov	r5, r8
   26acc:	str	r8, [sp, #28]
   26ad0:	ldr	fp, [pc, #3548]	; 278b4 <__assert_fail@plt+0x166a8>
   26ad4:	str	r3, [sp, #48]	; 0x30
   26ad8:	mov	r8, r6
   26adc:	b	26b2c <__assert_fail@plt+0x15920>
   26ae0:	ldr	r0, [sl, #104]	; 0x68
   26ae4:	cmp	r0, #0
   26ae8:	beq	26c40 <__assert_fail@plt+0x15a34>
   26aec:	ldr	r3, [r4]
   26af0:	ldr	r2, [sl, #108]	; 0x6c
   26af4:	cmp	r3, r2
   26af8:	addcc	r0, r0, r3
   26afc:	bcs	26bfc <__assert_fail@plt+0x159f0>
   26b00:	ldr	r1, [pc, #3504]	; 278b8 <__assert_fail@plt+0x166ac>
   26b04:	bl	10f18 <strcmp@plt>
   26b08:	ldr	r3, [sp, #28]
   26b0c:	cmp	r0, #0
   26b10:	moveq	r3, r4
   26b14:	str	r3, [sp, #28]
   26b18:	add	r5, r5, #1
   26b1c:	cmp	r8, r5
   26b20:	mov	r3, r8
   26b24:	add	r4, r4, #72	; 0x48
   26b28:	bls	26c54 <__assert_fail@plt+0x15a48>
   26b2c:	ldr	r3, [r4, #4]
   26b30:	cmp	r3, #2
   26b34:	bne	26ae0 <__assert_fail@plt+0x158d4>
   26b38:	ldr	r3, [r4, #40]	; 0x28
   26b3c:	cmp	r3, r8
   26b40:	bcs	26ae0 <__assert_fail@plt+0x158d4>
   26b44:	ldr	r3, [fp]
   26b48:	add	r2, sp, #108	; 0x6c
   26b4c:	cmp	r3, #0
   26b50:	mov	r1, r4
   26b54:	mov	r0, sl
   26b58:	bne	27854 <__assert_fail@plt+0x16648>
   26b5c:	bl	17bf4 <__assert_fail@plt+0x69e8>
   26b60:	ldr	r3, [r4, #40]	; 0x28
   26b64:	ldr	r1, [sp, #120]	; 0x78
   26b68:	ldr	r2, [sl, #96]	; 0x60
   26b6c:	add	r3, r3, r3, lsl #3
   26b70:	cmp	r1, #0
   26b74:	str	r0, [sp, #104]	; 0x68
   26b78:	add	r8, r2, r3, lsl #3
   26b7c:	beq	26ba4 <__assert_fail@plt+0x15998>
   26b80:	mov	r2, #5
   26b84:	ldr	r1, [pc, #3376]	; 278bc <__assert_fail@plt+0x166b0>
   26b88:	mov	r0, #0
   26b8c:	bl	10f90 <dcgettext@plt>
   26b90:	bl	548ac <error@@Base>
   26b94:	ldr	r0, [sp, #120]	; 0x78
   26b98:	bl	10f54 <free@plt>
   26b9c:	mov	r3, #0
   26ba0:	str	r3, [sp, #48]	; 0x30
   26ba4:	mov	r2, #5
   26ba8:	ldr	r1, [pc, #3344]	; 278c0 <__assert_fail@plt+0x166b4>
   26bac:	mov	r0, #0
   26bb0:	ldrd	r6, [r8, #32]
   26bb4:	ldr	r9, [r8, #24]
   26bb8:	bl	10f90 <dcgettext@plt>
   26bbc:	strd	r6, [sp, #8]
   26bc0:	mov	r6, #1
   26bc4:	mov	r7, #0
   26bc8:	mov	r3, r9
   26bcc:	strd	r6, [sp]
   26bd0:	add	r2, sl, #8
   26bd4:	add	r1, sl, #4
   26bd8:	str	r0, [sp, #16]
   26bdc:	mov	r0, #0
   26be0:	bl	1717c <__assert_fail@plt+0x5f70>
   26be4:	cmp	r0, #0
   26be8:	str	r0, [sp, #120]	; 0x78
   26bec:	ldrne	r0, [r8, #32]
   26bf0:	ldr	r8, [sl, #84]	; 0x54
   26bf4:	str	r0, [sp, #124]	; 0x7c
   26bf8:	b	26b18 <__assert_fail@plt+0x1590c>
   26bfc:	mov	r2, #5
   26c00:	ldr	r1, [pc, #3260]	; 278c4 <__assert_fail@plt+0x166b8>
   26c04:	mov	r0, #0
   26c08:	bl	10f90 <dcgettext@plt>
   26c0c:	ldr	r8, [sl, #84]	; 0x54
   26c10:	b	26b00 <__assert_fail@plt+0x158f4>
   26c14:	ldr	r0, [sp, #104]	; 0x68
   26c18:	cmp	r0, #0
   26c1c:	beq	26c24 <__assert_fail@plt+0x15a18>
   26c20:	bl	10f54 <free@plt>
   26c24:	ldr	r0, [sp, #120]	; 0x78
   26c28:	cmp	r0, #0
   26c2c:	beq	26c34 <__assert_fail@plt+0x15a28>
   26c30:	bl	10f54 <free@plt>
   26c34:	ldr	r0, [sp, #48]	; 0x30
   26c38:	add	sp, sp, #132	; 0x84
   26c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26c40:	mov	r2, #5
   26c44:	ldr	r1, [pc, #3196]	; 278c8 <__assert_fail@plt+0x166bc>
   26c48:	bl	10f90 <dcgettext@plt>
   26c4c:	ldr	r8, [sl, #84]	; 0x54
   26c50:	b	26b00 <__assert_fail@plt+0x158f4>
   26c54:	ldr	r8, [sp, #28]
   26c58:	cmp	r8, #0
   26c5c:	beq	27884 <__assert_fail@plt+0x16678>
   26c60:	cmp	r3, #0
   26c64:	ldr	r3, [sl, #96]	; 0x60
   26c68:	str	r3, [sp, #28]
   26c6c:	beq	26c14 <__assert_fail@plt+0x15a08>
   26c70:	mov	r3, #0
   26c74:	str	r3, [sp, #32]
   26c78:	mov	r8, sl
   26c7c:	b	26ca4 <__assert_fail@plt+0x15a98>
   26c80:	ldr	r2, [sp, #32]
   26c84:	ldr	r3, [r8, #84]	; 0x54
   26c88:	add	r2, r2, #1
   26c8c:	cmp	r2, r3
   26c90:	ldr	r3, [sp, #28]
   26c94:	str	r2, [sp, #32]
   26c98:	add	r3, r3, #72	; 0x48
   26c9c:	str	r3, [sp, #28]
   26ca0:	bcs	26c14 <__assert_fail@plt+0x15a08>
   26ca4:	ldr	r3, [sp, #28]
   26ca8:	cmp	r3, #0
   26cac:	beq	2718c <__assert_fail@plt+0x15f80>
   26cb0:	ldr	r0, [r8, #104]	; 0x68
   26cb4:	cmp	r0, #0
   26cb8:	beq	27364 <__assert_fail@plt+0x16158>
   26cbc:	ldr	r3, [sp, #28]
   26cc0:	ldr	r2, [r8, #108]	; 0x6c
   26cc4:	ldr	r3, [r3]
   26cc8:	cmp	r3, r2
   26ccc:	addcc	r0, r0, r3
   26cd0:	bcs	27178 <__assert_fail@plt+0x15f6c>
   26cd4:	ldr	r1, [pc, #3036]	; 278b8 <__assert_fail@plt+0x166ac>
   26cd8:	bl	10f18 <strcmp@plt>
   26cdc:	subs	r4, r0, #0
   26ce0:	bne	26c80 <__assert_fail@plt+0x15a74>
   26ce4:	ldr	r2, [pc, #3040]	; 278cc <__assert_fail@plt+0x166c0>
   26ce8:	ldr	r6, [sp, #28]
   26cec:	mov	r3, r4
   26cf0:	ldr	r2, [r2]
   26cf4:	ldrd	r0, [r6, #32]
   26cf8:	add	r2, r2, #4
   26cfc:	lsl	r2, r2, #1
   26d00:	bl	58c00 <warn@@Base+0x3e30>
   26d04:	mov	r2, #5
   26d08:	str	r2, [sp]
   26d0c:	ldr	r1, [pc, #3004]	; 278d0 <__assert_fail@plt+0x166c4>
   26d10:	ldr	r2, [pc, #3004]	; 278d4 <__assert_fail@plt+0x166c8>
   26d14:	mov	r5, r0
   26d18:	mov	r3, r5
   26d1c:	mov	r0, r4
   26d20:	bl	11200 <dcngettext@plt>
   26d24:	mov	r2, r6
   26d28:	add	r1, r8, #108	; 0x6c
   26d2c:	mov	r4, r0
   26d30:	add	r0, r8, #104	; 0x68
   26d34:	bl	16c64 <__assert_fail@plt+0x5a58>
   26d38:	mov	r3, r5
   26d3c:	ldr	r2, [r6, #24]
   26d40:	mov	r1, r0
   26d44:	mov	r0, r4
   26d48:	bl	10f24 <printf@plt>
   26d4c:	ldr	lr, [r8, #76]	; 0x4c
   26d50:	cmp	lr, #0
   26d54:	beq	27818 <__assert_fail@plt+0x1660c>
   26d58:	ldr	ip, [r8, #100]	; 0x64
   26d5c:	cmp	ip, #0
   26d60:	beq	27824 <__assert_fail@plt+0x16618>
   26d64:	rsb	lr, lr, lr, lsl #3
   26d68:	ldr	r3, [sp, #28]
   26d6c:	add	lr, ip, lr, lsl #3
   26d70:	cmp	lr, ip
   26d74:	ldr	r4, [r3, #32]
   26d78:	ldr	r5, [r3, #36]	; 0x24
   26d7c:	bls	26de0 <__assert_fail@plt+0x15bd4>
   26d80:	ldrd	r6, [sp, #56]	; 0x38
   26d84:	ldrd	sl, [sp, #64]	; 0x40
   26d88:	mov	r9, r3
   26d8c:	ldr	r3, [ip]
   26d90:	cmp	r3, #1
   26d94:	bne	26dcc <__assert_fail@plt+0x15bc0>
   26d98:	ldrd	r0, [r9, #16]
   26d9c:	ldrd	r2, [ip, #16]
   26da0:	cmp	r1, r3
   26da4:	cmpeq	r0, r2
   26da8:	bcc	26dcc <__assert_fail@plt+0x15bc0>
   26dac:	adds	r6, r0, r4
   26db0:	adc	r7, r1, r5
   26db4:	ldrd	r0, [ip, #40]	; 0x28
   26db8:	adds	sl, r2, r0
   26dbc:	adc	fp, r3, r1
   26dc0:	cmp	r7, fp
   26dc4:	cmpeq	r6, sl
   26dc8:	bls	2785c <__assert_fail@plt+0x16650>
   26dcc:	add	ip, ip, #56	; 0x38
   26dd0:	cmp	ip, lr
   26dd4:	bcc	26d8c <__assert_fail@plt+0x15b80>
   26dd8:	strd	r6, [sp, #56]	; 0x38
   26ddc:	strd	sl, [sp, #64]	; 0x40
   26de0:	ldr	r3, [sp, #28]
   26de4:	mov	r2, #5
   26de8:	ldr	r1, [pc, #2792]	; 278d8 <__assert_fail@plt+0x166cc>
   26dec:	mov	r0, #0
   26df0:	ldr	r5, [r3, #24]
   26df4:	bl	10f90 <dcgettext@plt>
   26df8:	mov	r6, #1
   26dfc:	mov	r7, #0
   26e00:	mov	r9, #0
   26e04:	strd	r6, [sp]
   26e08:	mov	r3, r5
   26e0c:	str	r4, [sp, #8]
   26e10:	str	r9, [sp, #12]
   26e14:	add	r2, r8, #8
   26e18:	add	r1, r8, #4
   26e1c:	str	r0, [sp, #16]
   26e20:	mov	r0, r9
   26e24:	bl	1717c <__assert_fail@plt+0x5f70>
   26e28:	subs	r6, r0, #0
   26e2c:	str	r6, [sp, #44]	; 0x2c
   26e30:	beq	27840 <__assert_fail@plt+0x16634>
   26e34:	lsr	r3, r4, #4
   26e38:	mov	r0, r3
   26e3c:	mov	r1, #40	; 0x28
   26e40:	str	r3, [sp, #40]	; 0x28
   26e44:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   26e48:	bic	r4, r4, #15
   26e4c:	add	r3, r6, r4
   26e50:	cmp	r6, r3
   26e54:	mov	r5, r0
   26e58:	str	r0, [sp, #88]	; 0x58
   26e5c:	bcs	270dc <__assert_fail@plt+0x15ed0>
   26e60:	ldr	r7, [pc, #2676]	; 278dc <__assert_fail@plt+0x166d0>
   26e64:	ldr	r6, [sp, #44]	; 0x2c
   26e68:	str	r8, [sp, #52]	; 0x34
   26e6c:	mov	r8, r3
   26e70:	str	r9, [sp, #36]	; 0x24
   26e74:	ldr	r3, [sp, #36]	; 0x24
   26e78:	mov	r0, r6
   26e7c:	strh	r3, [r5]
   26e80:	strh	r3, [r5, #16]
   26e84:	mov	r1, #4
   26e88:	ldr	r3, [r7]
   26e8c:	blx	r3
   26e90:	ldr	r3, [r7]
   26e94:	add	r5, r5, #40	; 0x28
   26e98:	strd	r0, [r5, #-32]	; 0xffffffe0
   26e9c:	mov	r1, #4
   26ea0:	add	r0, r6, r1
   26ea4:	blx	r3
   26ea8:	ldr	r3, [r7]
   26eac:	strd	r0, [r5, #-16]
   26eb0:	add	r0, r6, #8
   26eb4:	mov	r1, #4
   26eb8:	blx	r3
   26ebc:	ldr	r3, [r7]
   26ec0:	mov	r1, #4
   26ec4:	mov	r4, r0
   26ec8:	add	r0, r6, #12
   26ecc:	blx	r3
   26ed0:	ldrb	r1, [r5, #-8]
   26ed4:	lsr	r3, r4, #29
   26ed8:	and	r3, r3, #2
   26edc:	bic	r1, r1, #1
   26ee0:	orr	r1, r1, r4, lsr #31
   26ee4:	lsr	r2, r4, #27
   26ee8:	and	r1, r1, #249	; 0xf9
   26eec:	orr	r1, r1, r3
   26ef0:	and	r2, r2, #4
   26ef4:	orr	r2, r2, r1
   26ef8:	lsr	lr, r4, #24
   26efc:	and	lr, lr, #24
   26f00:	lsr	r1, r4, #21
   26f04:	and	r2, r2, #199	; 0xc7
   26f08:	ldrb	r3, [r5, #-6]
   26f0c:	orr	r2, r2, lr
   26f10:	and	r1, r1, #32
   26f14:	orr	r2, r1, r2
   26f18:	lsr	r1, r4, #19
   26f1c:	ldrb	ip, [r5, #-5]
   26f20:	lsl	lr, r4, #16
   26f24:	and	r1, r1, #64	; 0x40
   26f28:	bic	r2, r2, #64	; 0x40
   26f2c:	orr	r2, r1, r2
   26f30:	bic	r3, r3, #1
   26f34:	strb	r2, [r5, #-8]
   26f38:	lsl	r1, r4, #24
   26f3c:	orr	r3, r3, lr, lsr #31
   26f40:	lsr	r2, r4, #13
   26f44:	and	r2, r2, #2
   26f48:	bic	ip, ip, #1
   26f4c:	and	r3, r3, #249	; 0xf9
   26f50:	orr	r3, r3, r2
   26f54:	orr	ip, ip, r1, lsr #31
   26f58:	lsr	r2, r4, #5
   26f5c:	and	r2, r2, #2
   26f60:	and	ip, ip, #249	; 0xf9
   26f64:	ldrb	r9, [r5, #-4]
   26f68:	orr	ip, ip, r2
   26f6c:	lsr	r2, r4, #11
   26f70:	and	r2, r2, #4
   26f74:	orr	r2, r2, r3
   26f78:	lsr	r3, r4, #3
   26f7c:	bic	r9, r9, #1
   26f80:	and	r3, r3, #4
   26f84:	orr	r9, r9, r0, lsr #31
   26f88:	orr	r3, r3, ip
   26f8c:	lsr	ip, r0, #29
   26f90:	and	ip, ip, #2
   26f94:	and	r9, r9, #249	; 0xf9
   26f98:	orr	r9, r9, ip
   26f9c:	lsr	ip, r0, #27
   26fa0:	and	ip, ip, #4
   26fa4:	orr	r9, ip, r9
   26fa8:	lsr	ip, r4, #9
   26fac:	and	ip, ip, #8
   26fb0:	and	r2, r2, #231	; 0xe7
   26fb4:	orr	r2, r2, ip
   26fb8:	lsr	ip, r4, #1
   26fbc:	and	ip, ip, #8
   26fc0:	and	r3, r3, #231	; 0xe7
   26fc4:	orr	r3, r3, ip
   26fc8:	lsr	ip, r4, #7
   26fcc:	ldrh	lr, [r5, #-8]
   26fd0:	and	ip, ip, #16
   26fd4:	orr	r2, ip, r2
   26fd8:	lsl	ip, r4, #1
   26fdc:	lsr	r1, r4, #14
   26fe0:	and	ip, ip, #16
   26fe4:	bic	lr, lr, #1920	; 0x780
   26fe8:	orr	r3, ip, r3
   26fec:	and	r1, r1, #1920	; 0x780
   26ff0:	lsr	ip, r0, #25
   26ff4:	orr	r1, r1, lr
   26ff8:	and	ip, ip, #8
   26ffc:	lsr	lr, r4, #5
   27000:	and	r9, r9, #231	; 0xe7
   27004:	orr	r9, r9, ip
   27008:	and	lr, lr, #32
   2700c:	lsr	ip, r0, #23
   27010:	and	r2, r2, #159	; 0x9f
   27014:	and	ip, ip, #16
   27018:	orr	r2, r2, lr
   2701c:	lsl	lr, r4, #3
   27020:	orr	r9, ip, r9
   27024:	lsl	fp, r1, #21
   27028:	lsr	ip, r4, #13
   2702c:	and	lr, lr, #32
   27030:	and	r3, r3, #159	; 0x9f
   27034:	orr	r3, r3, lr
   27038:	and	ip, ip, #248	; 0xf8
   2703c:	lsr	lr, r4, #3
   27040:	ldr	sl, [sp, #96]	; 0x60
   27044:	orr	ip, ip, fp, lsr #29
   27048:	and	lr, lr, #64	; 0x40
   2704c:	ldr	fp, [sp, #100]	; 0x64
   27050:	strb	r9, [r5, #-4]
   27054:	strh	r1, [r5, #-8]
   27058:	ldr	r1, [r5, #-4]
   2705c:	orr	r2, lr, r2
   27060:	strb	ip, [r5, #-7]
   27064:	lsr	ip, r4, #1
   27068:	ldr	r9, [r5, #-32]	; 0xffffffe0
   2706c:	and	ip, ip, #128	; 0x80
   27070:	bic	r2, r2, #128	; 0x80
   27074:	and	r1, r1, #31
   27078:	orr	r2, ip, r2
   2707c:	orr	r1, r1, r0, lsl #5
   27080:	ldr	ip, [r5, #-28]	; 0xffffffe4
   27084:	ldr	r0, [r5, #-16]
   27088:	adds	r9, r9, sl
   2708c:	lsl	lr, r4, #5
   27090:	adc	ip, ip, fp
   27094:	and	lr, lr, #64	; 0x40
   27098:	adds	sl, r0, sl
   2709c:	ldr	r0, [r5, #-12]
   270a0:	orr	r3, lr, r3
   270a4:	and	r4, r4, #1
   270a8:	adc	fp, r0, fp
   270ac:	add	r6, r6, #16
   270b0:	bic	r3, r3, #128	; 0x80
   270b4:	orr	r3, r3, r4, lsl #7
   270b8:	cmp	r6, r8
   270bc:	strb	r2, [r5, #-6]
   270c0:	strb	r3, [r5, #-5]
   270c4:	str	r1, [r5, #-4]
   270c8:	str	r9, [r5, #-32]	; 0xffffffe0
   270cc:	str	ip, [r5, #-28]	; 0xffffffe4
   270d0:	strd	sl, [r5, #-16]
   270d4:	bcc	26e74 <__assert_fail@plt+0x15c68>
   270d8:	ldr	r8, [sp, #52]	; 0x34
   270dc:	ldr	r0, [sp, #44]	; 0x2c
   270e0:	bl	10f54 <free@plt>
   270e4:	ldr	r2, [r8, #84]	; 0x54
   270e8:	ldr	r1, [r8, #96]	; 0x60
   270ec:	add	r3, r2, r2, lsl #3
   270f0:	mov	fp, r1
   270f4:	add	r3, r1, r3, lsl #3
   270f8:	cmp	r1, r3
   270fc:	strcc	r8, [sp, #36]	; 0x24
   27100:	bcs	27148 <__assert_fail@plt+0x15f3c>
   27104:	ldr	r3, [fp, #4]
   27108:	cmp	r3, #4
   2710c:	bne	27130 <__assert_fail@plt+0x15f24>
   27110:	ldr	r3, [fp, #44]	; 0x2c
   27114:	cmp	r3, r2
   27118:	bcs	27130 <__assert_fail@plt+0x15f24>
   2711c:	add	r3, r3, r3, lsl #3
   27120:	ldr	r0, [sp, #28]
   27124:	add	r3, r1, r3, lsl #3
   27128:	cmp	r0, r3
   2712c:	beq	271a0 <__assert_fail@plt+0x15f94>
   27130:	add	r3, r2, r2, lsl #3
   27134:	add	fp, fp, #72	; 0x48
   27138:	add	r3, r1, r3, lsl #3
   2713c:	cmp	fp, r3
   27140:	bcc	27104 <__assert_fail@plt+0x15ef8>
   27144:	ldr	r8, [sp, #36]	; 0x24
   27148:	ldr	r3, [sp, #40]	; 0x28
   2714c:	str	r3, [sp, #92]	; 0x5c
   27150:	ldr	r3, [sp, #40]	; 0x28
   27154:	cmp	r3, #0
   27158:	bne	27374 <__assert_fail@plt+0x16168>
   2715c:	ldr	r0, [sp, #88]	; 0x58
   27160:	cmp	r0, #0
   27164:	beq	2716c <__assert_fail@plt+0x15f60>
   27168:	bl	10f54 <free@plt>
   2716c:	mov	r3, #0
   27170:	str	r3, [sp, #88]	; 0x58
   27174:	b	26c80 <__assert_fail@plt+0x15a74>
   27178:	mov	r2, #5
   2717c:	ldr	r1, [pc, #1856]	; 278c4 <__assert_fail@plt+0x166b8>
   27180:	mov	r0, #0
   27184:	bl	10f90 <dcgettext@plt>
   27188:	b	26cd4 <__assert_fail@plt+0x15ac8>
   2718c:	mov	r2, #5
   27190:	ldr	r1, [pc, #1864]	; 278e0 <__assert_fail@plt+0x166d4>
   27194:	mov	r0, r3
   27198:	bl	10f90 <dcgettext@plt>
   2719c:	b	26cd4 <__assert_fail@plt+0x15ac8>
   271a0:	ldr	r4, [sp, #36]	; 0x24
   271a4:	add	r3, sp, #76	; 0x4c
   271a8:	ldr	r2, [fp, #32]
   271ac:	ldr	r1, [fp, #24]
   271b0:	mov	r0, r4
   271b4:	str	r3, [sp]
   271b8:	add	r3, sp, #80	; 0x50
   271bc:	bl	18904 <__assert_fail@plt+0x76f8>
   271c0:	cmp	r0, #0
   271c4:	beq	278a0 <__assert_fail@plt+0x16694>
   271c8:	ldrd	r8, [sp, #76]	; 0x4c
   271cc:	add	r3, r8, r8, lsl #1
   271d0:	mov	r6, r9
   271d4:	add	r3, r9, r3, lsl #3
   271d8:	cmp	r9, r3
   271dc:	bcs	2734c <__assert_fail@plt+0x16140>
   271e0:	add	r3, r4, #66	; 0x42
   271e4:	str	fp, [sp, #44]	; 0x2c
   271e8:	mov	fp, r3
   271ec:	b	272ac <__assert_fail@plt+0x160a0>
   271f0:	mov	r3, r1
   271f4:	mov	r0, fp
   271f8:	bl	16910 <__assert_fail@plt+0x5704>
   271fc:	cmp	r0, #245	; 0xf5
   27200:	ldrls	r3, [pc, #1756]	; 278e4 <__assert_fail@plt+0x166d8>
   27204:	addls	r0, r3, r0, lsl #2
   27208:	ldrls	r5, [r0, #-2964]	; 0xfffff46c
   2720c:	mov	r4, r1
   27210:	mov	r2, #15
   27214:	ldr	r1, [pc, #1740]	; 278e8 <__assert_fail@plt+0x166dc>
   27218:	mov	r0, r5
   2721c:	bl	111d0 <strncmp@plt>
   27220:	lsl	r4, r4, #5
   27224:	add	sl, r7, r4
   27228:	subs	r3, r0, #0
   2722c:	bne	27328 <__assert_fail@plt+0x1611c>
   27230:	ldm	r6, {r5, ip}
   27234:	ldr	r2, [pc, #1680]	; 278cc <__assert_fail@plt+0x166c0>
   27238:	mov	r1, r3
   2723c:	and	r0, r5, #15
   27240:	ldr	r2, [r2]
   27244:	lsr	r5, r5, #4
   27248:	orr	r5, r5, ip, lsl #28
   2724c:	bl	58c00 <warn@@Base+0x3e30>
   27250:	orrs	r3, r0, r1
   27254:	beq	272ec <__assert_fail@plt+0x160e0>
   27258:	cmp	r1, #0
   2725c:	cmpeq	r0, #1
   27260:	bne	27298 <__assert_fail@plt+0x1608c>
   27264:	ldr	r3, [sp, #88]	; 0x58
   27268:	add	r1, r7, r4
   2726c:	add	r5, r5, r5, lsl #2
   27270:	ldr	r2, [r7, r4]
   27274:	ldr	r0, [r6, #16]
   27278:	ldr	r1, [r1, #4]
   2727c:	add	r5, r3, r5, lsl #3
   27280:	ldr	r3, [r6, #20]
   27284:	adds	r2, r2, r0
   27288:	ldr	ip, [sl, #24]
   2728c:	adc	r3, r1, r3
   27290:	strh	ip, [r5, #16]
   27294:	strd	r2, [r5, #24]
   27298:	add	r3, r8, r8, lsl #1
   2729c:	add	r6, r6, #24
   272a0:	add	r3, r9, r3, lsl #3
   272a4:	cmp	r6, r3
   272a8:	bcs	27348 <__assert_fail@plt+0x1613c>
   272ac:	ldr	r3, [pc, #1536]	; 278b4 <__assert_fail@plt+0x166a8>
   272b0:	ldr	r2, [r6, #8]
   272b4:	ldr	r1, [r6, #12]
   272b8:	ldr	r5, [r3]
   272bc:	ldr	r7, [sp, #104]	; 0x68
   272c0:	cmp	r5, #0
   272c4:	beq	271f0 <__assert_fail@plt+0x15fe4>
   272c8:	uxtb	r3, r2
   272cc:	cmp	r3, #245	; 0xf5
   272d0:	movhi	r5, #0
   272d4:	ldrls	r0, [pc, #1544]	; 278e4 <__assert_fail@plt+0x166d8>
   272d8:	addls	r3, r0, r3, lsl #2
   272dc:	ldrls	r5, [r3, #-2964]	; 0xfffff46c
   272e0:	lsr	r4, r2, #8
   272e4:	orr	r4, r4, r1, lsl #24
   272e8:	b	27210 <__assert_fail@plt+0x16004>
   272ec:	ldr	r0, [r6, #16]
   272f0:	ldr	r2, [r7, r4]
   272f4:	add	r5, r5, r5, lsl #2
   272f8:	add	r1, r7, r4
   272fc:	ldr	r3, [sp, #88]	; 0x58
   27300:	ldr	r1, [r1, #4]
   27304:	adds	r2, r2, r0
   27308:	lsl	r5, r5, #3
   2730c:	ldr	r0, [r6, #20]
   27310:	ldr	ip, [sl, #24]
   27314:	strh	ip, [r3, r5]
   27318:	add	r5, r3, r5
   2731c:	adc	r3, r1, r0
   27320:	strd	r2, [r5, #8]
   27324:	b	27298 <__assert_fail@plt+0x1608c>
   27328:	mov	r2, #5
   2732c:	ldr	r1, [pc, #1464]	; 278ec <__assert_fail@plt+0x166e0>
   27330:	mov	r0, #0
   27334:	bl	10f90 <dcgettext@plt>
   27338:	mov	r1, r5
   2733c:	bl	54dd0 <warn@@Base>
   27340:	ldrd	r8, [sp, #76]	; 0x4c
   27344:	b	27298 <__assert_fail@plt+0x1608c>
   27348:	ldr	fp, [sp, #44]	; 0x2c
   2734c:	mov	r0, r9
   27350:	bl	10f54 <free@plt>
   27354:	ldr	r3, [sp, #36]	; 0x24
   27358:	ldr	r1, [r3, #96]	; 0x60
   2735c:	ldr	r2, [r3, #84]	; 0x54
   27360:	b	27130 <__assert_fail@plt+0x15f24>
   27364:	mov	r2, #5
   27368:	ldr	r1, [pc, #1368]	; 278c8 <__assert_fail@plt+0x166bc>
   2736c:	bl	10f90 <dcgettext@plt>
   27370:	b	26cd4 <__assert_fail@plt+0x15ac8>
   27374:	ldr	r0, [sp, #108]	; 0x6c
   27378:	lsl	r0, r0, #5
   2737c:	bl	5861c <warn@@Base+0x384c>
   27380:	ldr	r4, [sp, #108]	; 0x6c
   27384:	cmp	r4, #0
   27388:	mov	r6, r0
   2738c:	str	r0, [sp, #112]	; 0x70
   27390:	beq	273ec <__assert_fail@plt+0x161e0>
   27394:	ldr	ip, [sp, #104]	; 0x68
   27398:	add	r4, ip, r4, lsl #5
   2739c:	add	r5, r4, #20
   273a0:	add	ip, ip, #20
   273a4:	mov	r4, #0
   273a8:	ldrd	r2, [ip, #-20]	; 0xffffffec
   273ac:	orrs	r3, r2, r3
   273b0:	beq	273e0 <__assert_fail@plt+0x161d4>
   273b4:	ldrb	r3, [ip]
   273b8:	and	r3, r3, #15
   273bc:	cmp	r3, #2
   273c0:	bne	273e0 <__assert_fail@plt+0x161d4>
   273c4:	sub	r7, ip, #20
   273c8:	add	lr, r6, r4, lsl #5
   273cc:	ldm	r7!, {r0, r1, r2, r3}
   273d0:	add	r4, r4, #1
   273d4:	stmia	lr!, {r0, r1, r2, r3}
   273d8:	ldm	r7, {r0, r1, r2, r3}
   273dc:	stm	lr, {r0, r1, r2, r3}
   273e0:	add	ip, ip, #32
   273e4:	cmp	r5, ip
   273e8:	bne	273a8 <__assert_fail@plt+0x1619c>
   273ec:	mov	r1, r4
   273f0:	ldr	r3, [pc, #1272]	; 278f0 <__assert_fail@plt+0x166e4>
   273f4:	mov	r0, r6
   273f8:	mov	r2, #32
   273fc:	str	r4, [sp, #116]	; 0x74
   27400:	bl	11170 <qsort@plt>
   27404:	ldr	r3, [sp, #92]	; 0x5c
   27408:	ldr	r4, [sp, #88]	; 0x58
   2740c:	add	r3, r3, r3, lsl #2
   27410:	add	r3, r4, r3, lsl #3
   27414:	cmp	r4, r3
   27418:	bcs	27804 <__assert_fail@plt+0x165f8>
   2741c:	add	fp, sp, #80	; 0x50
   27420:	add	r7, sp, #76	; 0x4c
   27424:	ldr	r5, [pc, #1224]	; 278f4 <__assert_fail@plt+0x166e8>
   27428:	ldr	r6, [pc, #1224]	; 278f8 <__assert_fail@plt+0x166ec>
   2742c:	ldr	r9, [pc, #1224]	; 278fc <__assert_fail@plt+0x166f0>
   27430:	ldr	sl, [pc, #1224]	; 27900 <__assert_fail@plt+0x166f4>
   27434:	b	27530 <__assert_fail@plt+0x16324>
   27438:	tst	r3, #2
   2743c:	bne	275f8 <__assert_fail@plt+0x163ec>
   27440:	tst	r3, #4
   27444:	bne	2760c <__assert_fail@plt+0x16400>
   27448:	tst	r3, #64	; 0x40
   2744c:	bne	27620 <__assert_fail@plt+0x16414>
   27450:	ldrh	r1, [r4, #32]
   27454:	tst	r1, #1920	; 0x780
   27458:	bne	27634 <__assert_fail@plt+0x16428>
   2745c:	ldrb	r1, [r4, #33]	; 0x21
   27460:	tst	r1, #248	; 0xf8
   27464:	bne	27650 <__assert_fail@plt+0x16444>
   27468:	ldrb	r3, [r4, #34]	; 0x22
   2746c:	tst	r3, #1
   27470:	bne	27668 <__assert_fail@plt+0x1645c>
   27474:	tst	r3, #2
   27478:	bne	2767c <__assert_fail@plt+0x16470>
   2747c:	tst	r3, #4
   27480:	bne	27690 <__assert_fail@plt+0x16484>
   27484:	tst	r3, #8
   27488:	bne	276a4 <__assert_fail@plt+0x16498>
   2748c:	tst	r3, #16
   27490:	bne	276b8 <__assert_fail@plt+0x164ac>
   27494:	tst	r3, #32
   27498:	bne	276cc <__assert_fail@plt+0x164c0>
   2749c:	tst	r3, #64	; 0x40
   274a0:	bne	276e0 <__assert_fail@plt+0x164d4>
   274a4:	tst	r3, #128	; 0x80
   274a8:	bne	276f4 <__assert_fail@plt+0x164e8>
   274ac:	ldrb	r3, [r4, #35]	; 0x23
   274b0:	tst	r3, #1
   274b4:	bne	27708 <__assert_fail@plt+0x164fc>
   274b8:	tst	r3, #2
   274bc:	bne	2771c <__assert_fail@plt+0x16510>
   274c0:	tst	r3, #8
   274c4:	bne	27730 <__assert_fail@plt+0x16524>
   274c8:	tst	r3, #16
   274cc:	bne	27744 <__assert_fail@plt+0x16538>
   274d0:	tst	r3, #32
   274d4:	bne	27758 <__assert_fail@plt+0x1654c>
   274d8:	tst	r3, #64	; 0x40
   274dc:	bne	2776c <__assert_fail@plt+0x16560>
   274e0:	tst	r3, #128	; 0x80
   274e4:	bne	27780 <__assert_fail@plt+0x16574>
   274e8:	ldrb	r3, [r4, #36]	; 0x24
   274ec:	tst	r3, #1
   274f0:	bne	27794 <__assert_fail@plt+0x16588>
   274f4:	tst	r3, #2
   274f8:	bne	277a8 <__assert_fail@plt+0x1659c>
   274fc:	tst	r3, #4
   27500:	bne	277bc <__assert_fail@plt+0x165b0>
   27504:	tst	r3, #8
   27508:	bne	277d0 <__assert_fail@plt+0x165c4>
   2750c:	ldr	r1, [r4, #36]	; 0x24
   27510:	bics	r3, r1, #31
   27514:	bne	277e4 <__assert_fail@plt+0x165d8>
   27518:	ldrd	r2, [sp, #88]	; 0x58
   2751c:	add	r4, r4, #40	; 0x28
   27520:	add	r3, r3, r3, lsl #2
   27524:	add	r3, r2, r3, lsl #3
   27528:	cmp	r4, r3
   2752c:	bcs	27804 <__assert_fail@plt+0x165f8>
   27530:	str	fp, [sp, #20]
   27534:	str	r7, [sp, #16]
   27538:	ldrd	r0, [r4, #8]
   2753c:	ldr	ip, [sp, #124]	; 0x7c
   27540:	ldr	r3, [sp, #120]	; 0x78
   27544:	strd	r0, [sp, #8]
   27548:	ldrh	r1, [r4]
   2754c:	ldr	r2, [sp, #116]	; 0x74
   27550:	str	ip, [sp]
   27554:	str	r1, [sp, #4]
   27558:	ldr	r1, [sp, #112]	; 0x70
   2755c:	ldrh	r0, [r8, #66]	; 0x42
   27560:	bl	16dac <__assert_fail@plt+0x5ba0>
   27564:	ldr	r3, [r5]
   27568:	mov	r2, #2
   2756c:	mov	r1, #1
   27570:	mov	r0, r6
   27574:	bl	10fcc <fwrite@plt>
   27578:	ldr	r0, [sp, #76]	; 0x4c
   2757c:	cmp	r0, #0
   27580:	beq	27598 <__assert_fail@plt+0x1638c>
   27584:	ldr	r1, [r5]
   27588:	bl	111c4 <fputs@plt>
   2758c:	ldrd	r2, [sp, #80]	; 0x50
   27590:	orrs	r1, r2, r3
   27594:	bne	277f4 <__assert_fail@plt+0x165e8>
   27598:	ldr	r3, [r5]
   2759c:	mov	r2, #4
   275a0:	mov	r1, #1
   275a4:	mov	r0, r9
   275a8:	bl	10fcc <fwrite@plt>
   275ac:	mov	r2, #4
   275b0:	ldrd	r0, [r4, #8]
   275b4:	bl	14244 <__assert_fail@plt+0x3038>
   275b8:	ldr	r1, [r5]
   275bc:	mov	r0, #45	; 0x2d
   275c0:	bl	11140 <fputc@plt>
   275c4:	mov	r2, #4
   275c8:	ldrd	r0, [r4, #24]
   275cc:	bl	14244 <__assert_fail@plt+0x3038>
   275d0:	mov	r0, sl
   275d4:	bl	10f24 <printf@plt>
   275d8:	ldrb	r3, [r4, #32]
   275dc:	tst	r3, #1
   275e0:	beq	27438 <__assert_fail@plt+0x1622c>
   275e4:	ldr	r0, [pc, #792]	; 27904 <__assert_fail@plt+0x166f8>
   275e8:	bl	10f24 <printf@plt>
   275ec:	ldrb	r3, [r4, #32]
   275f0:	tst	r3, #2
   275f4:	beq	27440 <__assert_fail@plt+0x16234>
   275f8:	ldr	r0, [pc, #776]	; 27908 <__assert_fail@plt+0x166fc>
   275fc:	bl	10f24 <printf@plt>
   27600:	ldrb	r3, [r4, #32]
   27604:	tst	r3, #4
   27608:	beq	27448 <__assert_fail@plt+0x1623c>
   2760c:	ldr	r0, [pc, #760]	; 2790c <__assert_fail@plt+0x16700>
   27610:	bl	10f24 <printf@plt>
   27614:	ldrb	r3, [r4, #32]
   27618:	tst	r3, #64	; 0x40
   2761c:	beq	27450 <__assert_fail@plt+0x16244>
   27620:	ldr	r0, [pc, #744]	; 27910 <__assert_fail@plt+0x16704>
   27624:	bl	10f24 <printf@plt>
   27628:	ldrh	r1, [r4, #32]
   2762c:	tst	r1, #1920	; 0x780
   27630:	beq	2745c <__assert_fail@plt+0x16250>
   27634:	lsr	r1, r1, #7
   27638:	and	r1, r1, #15
   2763c:	ldr	r0, [pc, #720]	; 27914 <__assert_fail@plt+0x16708>
   27640:	bl	10f24 <printf@plt>
   27644:	ldrb	r1, [r4, #33]	; 0x21
   27648:	tst	r1, #248	; 0xf8
   2764c:	beq	27468 <__assert_fail@plt+0x1625c>
   27650:	lsr	r1, r1, #3
   27654:	ldr	r0, [pc, #700]	; 27918 <__assert_fail@plt+0x1670c>
   27658:	bl	10f24 <printf@plt>
   2765c:	ldrb	r3, [r4, #34]	; 0x22
   27660:	tst	r3, #1
   27664:	beq	27474 <__assert_fail@plt+0x16268>
   27668:	ldr	r0, [pc, #684]	; 2791c <__assert_fail@plt+0x16710>
   2766c:	bl	10f24 <printf@plt>
   27670:	ldrb	r3, [r4, #34]	; 0x22
   27674:	tst	r3, #2
   27678:	beq	2747c <__assert_fail@plt+0x16270>
   2767c:	ldr	r0, [pc, #668]	; 27920 <__assert_fail@plt+0x16714>
   27680:	bl	10f24 <printf@plt>
   27684:	ldrb	r3, [r4, #34]	; 0x22
   27688:	tst	r3, #4
   2768c:	beq	27484 <__assert_fail@plt+0x16278>
   27690:	ldr	r0, [pc, #652]	; 27924 <__assert_fail@plt+0x16718>
   27694:	bl	10f24 <printf@plt>
   27698:	ldrb	r3, [r4, #34]	; 0x22
   2769c:	tst	r3, #8
   276a0:	beq	2748c <__assert_fail@plt+0x16280>
   276a4:	ldr	r0, [pc, #636]	; 27928 <__assert_fail@plt+0x1671c>
   276a8:	bl	10f24 <printf@plt>
   276ac:	ldrb	r3, [r4, #34]	; 0x22
   276b0:	tst	r3, #16
   276b4:	beq	27494 <__assert_fail@plt+0x16288>
   276b8:	ldr	r0, [pc, #620]	; 2792c <__assert_fail@plt+0x16720>
   276bc:	bl	10f24 <printf@plt>
   276c0:	ldrb	r3, [r4, #34]	; 0x22
   276c4:	tst	r3, #32
   276c8:	beq	2749c <__assert_fail@plt+0x16290>
   276cc:	ldr	r0, [pc, #604]	; 27930 <__assert_fail@plt+0x16724>
   276d0:	bl	10f24 <printf@plt>
   276d4:	ldrb	r3, [r4, #34]	; 0x22
   276d8:	tst	r3, #64	; 0x40
   276dc:	beq	274a4 <__assert_fail@plt+0x16298>
   276e0:	ldr	r0, [pc, #588]	; 27934 <__assert_fail@plt+0x16728>
   276e4:	bl	10f24 <printf@plt>
   276e8:	ldrb	r3, [r4, #34]	; 0x22
   276ec:	tst	r3, #128	; 0x80
   276f0:	beq	274ac <__assert_fail@plt+0x162a0>
   276f4:	ldr	r0, [pc, #572]	; 27938 <__assert_fail@plt+0x1672c>
   276f8:	bl	10f24 <printf@plt>
   276fc:	ldrb	r3, [r4, #35]	; 0x23
   27700:	tst	r3, #1
   27704:	beq	274b8 <__assert_fail@plt+0x162ac>
   27708:	ldr	r0, [pc, #556]	; 2793c <__assert_fail@plt+0x16730>
   2770c:	bl	10f24 <printf@plt>
   27710:	ldrb	r3, [r4, #35]	; 0x23
   27714:	tst	r3, #2
   27718:	beq	274c0 <__assert_fail@plt+0x162b4>
   2771c:	ldr	r0, [pc, #540]	; 27940 <__assert_fail@plt+0x16734>
   27720:	bl	10f24 <printf@plt>
   27724:	ldrb	r3, [r4, #35]	; 0x23
   27728:	tst	r3, #8
   2772c:	beq	274c8 <__assert_fail@plt+0x162bc>
   27730:	ldr	r0, [pc, #524]	; 27944 <__assert_fail@plt+0x16738>
   27734:	bl	10f24 <printf@plt>
   27738:	ldrb	r3, [r4, #35]	; 0x23
   2773c:	tst	r3, #16
   27740:	beq	274d0 <__assert_fail@plt+0x162c4>
   27744:	ldr	r0, [pc, #508]	; 27948 <__assert_fail@plt+0x1673c>
   27748:	bl	10f24 <printf@plt>
   2774c:	ldrb	r3, [r4, #35]	; 0x23
   27750:	tst	r3, #32
   27754:	beq	274d8 <__assert_fail@plt+0x162cc>
   27758:	ldr	r0, [pc, #492]	; 2794c <__assert_fail@plt+0x16740>
   2775c:	bl	10f24 <printf@plt>
   27760:	ldrb	r3, [r4, #35]	; 0x23
   27764:	tst	r3, #64	; 0x40
   27768:	beq	274e0 <__assert_fail@plt+0x162d4>
   2776c:	ldr	r0, [pc, #476]	; 27950 <__assert_fail@plt+0x16744>
   27770:	bl	10f24 <printf@plt>
   27774:	ldrb	r3, [r4, #35]	; 0x23
   27778:	tst	r3, #128	; 0x80
   2777c:	beq	274e8 <__assert_fail@plt+0x162dc>
   27780:	ldr	r0, [pc, #460]	; 27954 <__assert_fail@plt+0x16748>
   27784:	bl	10f24 <printf@plt>
   27788:	ldrb	r3, [r4, #36]	; 0x24
   2778c:	tst	r3, #1
   27790:	beq	274f4 <__assert_fail@plt+0x162e8>
   27794:	ldr	r0, [pc, #444]	; 27958 <__assert_fail@plt+0x1674c>
   27798:	bl	10f24 <printf@plt>
   2779c:	ldrb	r3, [r4, #36]	; 0x24
   277a0:	tst	r3, #2
   277a4:	beq	274fc <__assert_fail@plt+0x162f0>
   277a8:	ldr	r0, [pc, #428]	; 2795c <__assert_fail@plt+0x16750>
   277ac:	bl	10f24 <printf@plt>
   277b0:	ldrb	r3, [r4, #36]	; 0x24
   277b4:	tst	r3, #4
   277b8:	beq	27504 <__assert_fail@plt+0x162f8>
   277bc:	ldr	r0, [pc, #412]	; 27960 <__assert_fail@plt+0x16754>
   277c0:	bl	10f24 <printf@plt>
   277c4:	ldrb	r3, [r4, #36]	; 0x24
   277c8:	tst	r3, #8
   277cc:	beq	2750c <__assert_fail@plt+0x16300>
   277d0:	ldr	r0, [pc, #396]	; 27964 <__assert_fail@plt+0x16758>
   277d4:	bl	10f24 <printf@plt>
   277d8:	ldr	r1, [r4, #36]	; 0x24
   277dc:	bics	r3, r1, #31
   277e0:	beq	27518 <__assert_fail@plt+0x1630c>
   277e4:	lsr	r1, r1, #5
   277e8:	ldr	r0, [pc, #376]	; 27968 <__assert_fail@plt+0x1675c>
   277ec:	bl	10f24 <printf@plt>
   277f0:	b	27518 <__assert_fail@plt+0x1630c>
   277f4:	mov	r1, r2
   277f8:	ldr	r0, [pc, #364]	; 2796c <__assert_fail@plt+0x16760>
   277fc:	bl	10f24 <printf@plt>
   27800:	b	27598 <__assert_fail@plt+0x1638c>
   27804:	mov	r0, #10
   27808:	bl	110c8 <putchar@plt>
   2780c:	ldr	r0, [sp, #112]	; 0x70
   27810:	bl	10f54 <free@plt>
   27814:	b	2715c <__assert_fail@plt+0x15f50>
   27818:	ldr	r3, [sp, #28]
   2781c:	ldr	r4, [r3, #32]
   27820:	b	26de0 <__assert_fail@plt+0x15bd4>
   27824:	mov	r0, r8
   27828:	bl	1c34c <__assert_fail@plt+0xb140>
   2782c:	cmp	r0, #0
   27830:	beq	2786c <__assert_fail@plt+0x16660>
   27834:	ldr	ip, [r8, #100]	; 0x64
   27838:	ldr	lr, [r8, #76]	; 0x4c
   2783c:	b	26d64 <__assert_fail@plt+0x15b58>
   27840:	ldr	r3, [sp, #44]	; 0x2c
   27844:	str	r3, [sp, #48]	; 0x30
   27848:	ldr	r3, [sp, #92]	; 0x5c
   2784c:	str	r3, [sp, #40]	; 0x28
   27850:	b	27150 <__assert_fail@plt+0x15f44>
   27854:	bl	1772c <__assert_fail@plt+0x6520>
   27858:	b	26b60 <__assert_fail@plt+0x15954>
   2785c:	strd	r6, [sp, #56]	; 0x38
   27860:	strd	sl, [sp, #64]	; 0x40
   27864:	strd	r2, [sp, #96]	; 0x60
   27868:	b	26de0 <__assert_fail@plt+0x15bd4>
   2786c:	ldr	r3, [sp, #92]	; 0x5c
   27870:	str	r0, [sp, #48]	; 0x30
   27874:	str	r3, [sp, #40]	; 0x28
   27878:	b	27150 <__assert_fail@plt+0x15f44>
   2787c:	mov	r3, #1
   27880:	str	r3, [sp, #48]	; 0x30
   27884:	mov	r2, #5
   27888:	ldr	r1, [pc, #224]	; 27970 <__assert_fail@plt+0x16764>
   2788c:	mov	r0, #0
   27890:	bl	10f90 <dcgettext@plt>
   27894:	bl	10f24 <printf@plt>
   27898:	ldr	r3, [sl, #84]	; 0x54
   2789c:	b	26c60 <__assert_fail@plt+0x15a54>
   278a0:	ldr	r3, [sp, #92]	; 0x5c
   278a4:	ldr	r8, [sp, #36]	; 0x24
   278a8:	str	r3, [sp, #40]	; 0x28
   278ac:	str	r0, [sp, #48]	; 0x30
   278b0:	b	27150 <__assert_fail@plt+0x15f44>
   278b4:	andeq	sl, r9, r8, lsr r4
   278b8:	andeq	r7, r6, r8, ror fp
   278bc:	andeq	r6, r6, r4, ror #15
   278c0:	andeq	r5, r6, r8, lsr #14
   278c4:	andeq	r3, r6, ip
   278c8:	muleq	r6, ip, r8
   278cc:	andeq	lr, r9, ip, lsr #26
   278d0:	andeq	r7, r6, r4, asr #23
   278d4:	andeq	r7, r6, r8, lsl #23
   278d8:	andeq	r6, r6, r0, asr #17
   278dc:	andeq	lr, r9, ip, asr sp
   278e0:	muleq	r6, r4, r8
   278e4:	ldrdeq	ip, [r5], -r4
   278e8:	andeq	r7, r6, r0, lsl #24
   278ec:	andeq	r7, r6, r0, lsl ip
   278f0:	andeq	r2, r1, r4, lsl #24
   278f4:	andeq	sl, r9, ip, lsr #8
   278f8:	andeq	r6, r6, r8, lsr r9
   278fc:	andeq	r6, r6, r4, asr #18
   27900:	andeq	r7, r6, r8, lsr ip
   27904:	andeq	r7, r6, ip, lsr ip
   27908:	ldrdeq	r7, [r6], -r4
   2790c:	andeq	r7, r6, ip, asr #24
   27910:	andeq	r7, r6, r0, ror #24
   27914:	andeq	r7, r6, ip, ror #24
   27918:	andeq	r7, r6, ip, ror ip
   2791c:	andeq	r7, r6, ip, lsl #25
   27920:	muleq	r6, ip, ip
   27924:	andeq	r7, r6, ip, lsr #25
   27928:	andeq	r7, r6, r4, asr #25
   2792c:	andeq	r7, r6, r0, ror #25
   27930:	strdeq	r7, [r6], -r8
   27934:	andeq	r7, r6, r8, lsl sp
   27938:	andeq	r7, r6, r4, lsr #26
   2793c:	andeq	r7, r6, r0, lsr sp
   27940:	andeq	r7, r6, r0, asr #26
   27944:	andeq	r7, r6, r4, asr sp
   27948:	andeq	r7, r6, r0, ror #26
   2794c:	andeq	r7, r6, ip, ror #26
   27950:	andeq	r7, r6, r0, lsl #27
   27954:	muleq	r6, r4, sp
   27958:	andeq	r7, r6, r8, lsr #27
   2795c:	andeq	r7, r6, r4, asr #27
   27960:	ldrdeq	r7, [r6], -ip
   27964:	andeq	r7, r6, ip, ror #27
   27968:	strdeq	r7, [r6], -ip
   2796c:	andeq	r6, r6, ip, lsr r9
   27970:	andeq	r6, r6, r4, lsl r8
   27974:	push	{r4, r5, lr}
   27978:	sub	sp, sp, #44	; 0x2c
   2797c:	mov	r5, r2
   27980:	ldrh	ip, [sp, #56]	; 0x38
   27984:	mov	r4, r3
   27988:	ldrd	r2, [sp, #64]	; 0x40
   2798c:	cmp	ip, #0
   27990:	ldr	lr, [r1, #24]
   27994:	moveq	r2, r5
   27998:	moveq	r3, r4
   2799c:	str	r2, [sp, #8]
   279a0:	str	r3, [sp, #12]
   279a4:	add	r2, sp, #32
   279a8:	add	r3, sp, #28
   279ac:	str	ip, [sp, #4]
   279b0:	ldrh	r0, [r0, #66]	; 0x42
   279b4:	str	lr, [sp]
   279b8:	str	r2, [sp, #20]
   279bc:	str	r3, [sp, #16]
   279c0:	ldrd	r2, [r1, #16]
   279c4:	ldr	r1, [r1, #12]
   279c8:	bl	16dac <__assert_fail@plt+0x5ba0>
   279cc:	mov	r0, r5
   279d0:	mov	r1, r4
   279d4:	mov	r2, #4
   279d8:	bl	14244 <__assert_fail@plt+0x3038>
   279dc:	ldr	r0, [sp, #28]
   279e0:	cmp	r0, #0
   279e4:	beq	27a28 <__assert_fail@plt+0x1681c>
   279e8:	ldr	r4, [pc, #80]	; 27a40 <__assert_fail@plt+0x16834>
   279ec:	mov	r2, #2
   279f0:	mov	r1, #1
   279f4:	ldr	r3, [r4]
   279f8:	ldr	r0, [pc, #68]	; 27a44 <__assert_fail@plt+0x16838>
   279fc:	bl	10fcc <fwrite@plt>
   27a00:	ldr	r1, [r4]
   27a04:	ldr	r0, [sp, #28]
   27a08:	bl	111c4 <fputs@plt>
   27a0c:	ldrd	r2, [sp, #32]
   27a10:	orrs	r1, r2, r3
   27a14:	bne	27a30 <__assert_fail@plt+0x16824>
   27a18:	ldr	r1, [r4]
   27a1c:	mov	r0, #62	; 0x3e
   27a20:	bl	11140 <fputc@plt>
   27a24:	ldr	r0, [sp, #28]
   27a28:	add	sp, sp, #44	; 0x2c
   27a2c:	pop	{r4, r5, pc}
   27a30:	mov	r1, r2
   27a34:	ldr	r0, [pc, #12]	; 27a48 <__assert_fail@plt+0x1683c>
   27a38:	bl	10f24 <printf@plt>
   27a3c:	b	27a18 <__assert_fail@plt+0x1680c>
   27a40:	andeq	sl, r9, ip, lsr #8
   27a44:	andeq	r7, r6, r4, lsl lr
   27a48:	andeq	r7, r6, r8, lsl lr
   27a4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a50:	mvn	r7, #0
   27a54:	sub	sp, sp, #236	; 0xec
   27a58:	mvn	r6, #0
   27a5c:	subs	r4, r3, #0
   27a60:	strd	r6, [sp, #64]	; 0x40
   27a64:	str	r2, [sp, #52]	; 0x34
   27a68:	mov	r8, r0
   27a6c:	str	r1, [sp, #28]
   27a70:	ldr	r9, [sp, #272]	; 0x110
   27a74:	ldr	sl, [sp, #276]	; 0x114
   27a78:	ldr	r7, [sp, #280]	; 0x118
   27a7c:	bne	27acc <__assert_fail@plt+0x168c0>
   27a80:	ldr	r3, [sp, #284]	; 0x11c
   27a84:	cmp	r3, #0
   27a88:	cmpne	r7, #0
   27a8c:	beq	27c30 <__assert_fail@plt+0x16a24>
   27a90:	add	r3, sp, #64	; 0x40
   27a94:	add	ip, sp, #72	; 0x48
   27a98:	add	r2, sp, #80	; 0x50
   27a9c:	str	r3, [sp, #20]
   27aa0:	add	r3, sp, #52	; 0x34
   27aa4:	str	r2, [sp, #16]
   27aa8:	str	r3, [sp, #8]
   27aac:	stm	sp, {r9, sl}
   27ab0:	str	ip, [sp, #12]
   27ab4:	mov	r3, r7
   27ab8:	ldr	r2, [sp, #284]	; 0x11c
   27abc:	bl	24790 <__assert_fail@plt+0x13584>
   27ac0:	cmp	r0, #0
   27ac4:	beq	27c30 <__assert_fail@plt+0x16a24>
   27ac8:	mov	r4, #4
   27acc:	ldr	r2, [sp, #52]	; 0x34
   27ad0:	ldrh	r0, [r8, #66]	; 0x42
   27ad4:	cmp	r2, #0
   27ad8:	blt	27c40 <__assert_fail@plt+0x16a34>
   27adc:	ldrd	r4, [r7, #16]
   27ae0:	mov	r1, r2
   27ae4:	mov	r3, #0
   27ae8:	adds	r4, r9, r4
   27aec:	adc	r5, sl, r5
   27af0:	tst	r2, #1073741824	; 0x40000000
   27af4:	orrne	r1, r2, #-2147483648	; 0x80000000
   27af8:	mvnne	r3, #0
   27afc:	cmp	r0, #140	; 0x8c
   27b00:	bne	27b0c <__assert_fail@plt+0x16900>
   27b04:	adds	r1, r1, r1
   27b08:	adc	r3, r3, r3
   27b0c:	adds	r4, r4, r1
   27b10:	mov	r2, #5
   27b14:	ldr	r1, [pc, #3888]	; 28a4c <__assert_fail@plt+0x17840>
   27b18:	mov	r0, #0
   27b1c:	adc	r5, r5, r3
   27b20:	bl	10f90 <dcgettext@plt>
   27b24:	bl	10f24 <printf@plt>
   27b28:	ldrh	ip, [sp, #72]	; 0x48
   27b2c:	ldr	r2, [sp, #80]	; 0x50
   27b30:	cmp	ip, #0
   27b34:	bne	27cc0 <__assert_fail@plt+0x16ab4>
   27b38:	ldr	r3, [sp, #84]	; 0x54
   27b3c:	orr	r1, r2, r4
   27b40:	str	r1, [sp, #32]
   27b44:	orr	r1, r3, r5
   27b48:	str	r1, [sp, #36]	; 0x24
   27b4c:	ldrd	r0, [sp, #32]
   27b50:	orrs	lr, r0, r1
   27b54:	beq	27e20 <__assert_fail@plt+0x16c14>
   27b58:	strd	r2, [sp, #8]
   27b5c:	str	ip, [sp]
   27b60:	mov	r2, r4
   27b64:	mov	r3, r5
   27b68:	ldr	r1, [sp, #28]
   27b6c:	mov	r0, r8
   27b70:	bl	27974 <__assert_fail@plt+0x16768>
   27b74:	ldr	r6, [pc, #3796]	; 28a50 <__assert_fail@plt+0x17844>
   27b78:	ldr	r1, [r6]
   27b7c:	mov	r4, r0
   27b80:	mov	r0, #10
   27b84:	bl	11140 <fputc@plt>
   27b88:	cmp	r4, #0
   27b8c:	beq	27d10 <__assert_fail@plt+0x16b04>
   27b90:	mov	r2, #20
   27b94:	ldr	r1, [pc, #3768]	; 28a54 <__assert_fail@plt+0x17848>
   27b98:	mov	r0, r4
   27b9c:	bl	111d0 <strncmp@plt>
   27ba0:	cmp	r0, #0
   27ba4:	bne	27cc8 <__assert_fail@plt+0x16abc>
   27ba8:	ldr	r3, [sp, #284]	; 0x11c
   27bac:	cmp	r3, #0
   27bb0:	beq	27c30 <__assert_fail@plt+0x16a24>
   27bb4:	adds	r9, r9, #4
   27bb8:	adc	sl, sl, #0
   27bbc:	mov	r0, #0
   27bc0:	add	r1, sp, #72	; 0x48
   27bc4:	add	r2, sp, #80	; 0x50
   27bc8:	add	r3, sp, #52	; 0x34
   27bcc:	str	r0, [sp, #20]
   27bd0:	str	r1, [sp, #12]
   27bd4:	str	r2, [sp, #16]
   27bd8:	str	r3, [sp, #8]
   27bdc:	stm	sp, {r9, sl}
   27be0:	mov	r3, r7
   27be4:	ldr	r2, [sp, #284]	; 0x11c
   27be8:	ldr	r1, [sp, #28]
   27bec:	mov	r0, r8
   27bf0:	bl	24790 <__assert_fail@plt+0x13584>
   27bf4:	cmp	r0, #0
   27bf8:	beq	27c30 <__assert_fail@plt+0x16a24>
   27bfc:	ldr	r3, [sp, #52]	; 0x34
   27c00:	mov	fp, #1
   27c04:	mvn	r5, #0
   27c08:	lsr	r2, r3, #24
   27c0c:	lsl	r3, r3, #8
   27c10:	mov	r1, r2
   27c14:	str	r3, [sp, #52]	; 0x34
   27c18:	b	27c84 <__assert_fail@plt+0x16a78>
   27c1c:	mov	r2, #5
   27c20:	ldr	r1, [pc, #3792]	; 28af8 <__assert_fail@plt+0x178ec>
   27c24:	mov	r0, r4
   27c28:	bl	10f90 <dcgettext@plt>
   27c2c:	bl	10f24 <printf@plt>
   27c30:	mov	fp, #0
   27c34:	mov	r0, fp
   27c38:	add	sp, sp, #236	; 0xec
   27c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c40:	cmp	r0, #40	; 0x28
   27c44:	beq	27df4 <__assert_fail@plt+0x16be8>
   27c48:	mov	fp, #1
   27c4c:	lsr	r2, r2, #24
   27c50:	and	r5, r2, #127	; 0x7f
   27c54:	ldr	r1, [pc, #3580]	; 28a58 <__assert_fail@plt+0x1784c>
   27c58:	mov	r2, #5
   27c5c:	mov	r0, #0
   27c60:	bl	10f90 <dcgettext@plt>
   27c64:	mov	r1, r5
   27c68:	bl	10f24 <printf@plt>
   27c6c:	cmp	r5, #0
   27c70:	bne	27d18 <__assert_fail@plt+0x16b0c>
   27c74:	ldr	r3, [sp, #52]	; 0x34
   27c78:	mov	r1, r5
   27c7c:	lsl	r3, r3, #8
   27c80:	str	r3, [sp, #52]	; 0x34
   27c84:	ldrh	r2, [r8, #66]	; 0x42
   27c88:	cmp	r2, #40	; 0x28
   27c8c:	beq	27f18 <__assert_fail@plt+0x16d0c>
   27c90:	cmp	r2, #140	; 0x8c
   27c94:	beq	27ec4 <__assert_fail@plt+0x16cb8>
   27c98:	mov	r2, #5
   27c9c:	ldr	r1, [pc, #3512]	; 28a5c <__assert_fail@plt+0x17850>
   27ca0:	mov	r0, #0
   27ca4:	bl	10f90 <dcgettext@plt>
   27ca8:	ldrh	r1, [r8, #66]	; 0x42
   27cac:	bl	548ac <error@@Base>
   27cb0:	mov	fp, #0
   27cb4:	mov	r0, fp
   27cb8:	add	sp, sp, #236	; 0xec
   27cbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27cc0:	ldr	r3, [sp, #84]	; 0x54
   27cc4:	b	27b58 <__assert_fail@plt+0x1694c>
   27cc8:	mov	r2, #20
   27ccc:	ldr	r1, [pc, #3468]	; 28a60 <__assert_fail@plt+0x17854>
   27cd0:	mov	r0, r4
   27cd4:	bl	111d0 <strncmp@plt>
   27cd8:	cmp	r0, #0
   27cdc:	beq	27ba8 <__assert_fail@plt+0x1699c>
   27ce0:	mov	r2, #20
   27ce4:	ldr	r1, [pc, #3448]	; 28a64 <__assert_fail@plt+0x17858>
   27ce8:	mov	r0, r4
   27cec:	bl	111d0 <strncmp@plt>
   27cf0:	cmp	r0, #0
   27cf4:	beq	27ba8 <__assert_fail@plt+0x1699c>
   27cf8:	mov	r0, r4
   27cfc:	mov	r2, #25
   27d00:	ldr	r1, [pc, #3424]	; 28a68 <__assert_fail@plt+0x1785c>
   27d04:	bl	111d0 <strncmp@plt>
   27d08:	cmp	r0, #0
   27d0c:	beq	27ba8 <__assert_fail@plt+0x1699c>
   27d10:	mov	fp, #1
   27d14:	b	27c34 <__assert_fail@plt+0x16a28>
   27d18:	cmp	r5, #2
   27d1c:	ldrh	r2, [r8, #66]	; 0x42
   27d20:	bgt	27ecc <__assert_fail@plt+0x16cc0>
   27d24:	ldr	r3, [sp, #52]	; 0x34
   27d28:	cmp	r2, #40	; 0x28
   27d2c:	sub	r4, r4, #2
   27d30:	lsr	r1, r3, #16
   27d34:	lsl	r3, r3, #16
   27d38:	uxtb	r1, r1
   27d3c:	str	r3, [sp, #52]	; 0x34
   27d40:	beq	27f1c <__assert_fail@plt+0x16d10>
   27d44:	cmp	r2, #140	; 0x8c
   27d48:	bne	27c98 <__assert_fail@plt+0x16a8c>
   27d4c:	cmp	r5, #2
   27d50:	ble	28140 <__assert_fail@plt+0x16f34>
   27d54:	cmp	r5, #4
   27d58:	bgt	28358 <__assert_fail@plt+0x1714c>
   27d5c:	ldr	r3, [sp, #52]	; 0x34
   27d60:	mov	r2, #5
   27d64:	eor	r3, r3, #16646144	; 0xfe0000
   27d68:	tst	r3, #16646144	; 0xfe0000
   27d6c:	beq	28114 <__assert_fail@plt+0x16f08>
   27d70:	ldr	r1, [pc, #3316]	; 28a6c <__assert_fail@plt+0x17860>
   27d74:	mov	r0, #0
   27d78:	bl	10f90 <dcgettext@plt>
   27d7c:	ldr	r1, [sp, #52]	; 0x34
   27d80:	lsr	r1, r1, #14
   27d84:	and	r1, r1, #508	; 0x1fc
   27d88:	bl	10f24 <printf@plt>
   27d8c:	mov	r2, #5
   27d90:	ldr	r1, [pc, #3288]	; 28a70 <__assert_fail@plt+0x17864>
   27d94:	mov	r0, #0
   27d98:	bl	10f90 <dcgettext@plt>
   27d9c:	bl	10f24 <printf@plt>
   27da0:	cmp	r5, #4
   27da4:	beq	28550 <__assert_fail@plt+0x17344>
   27da8:	ldr	r0, [sp, #52]	; 0x34
   27dac:	ldr	r3, [pc, #3264]	; 28a74 <__assert_fail@plt+0x17868>
   27db0:	and	r0, r3, r0, lsr #4
   27db4:	bl	14d64 <__assert_fail@plt+0x3b58>
   27db8:	ldr	r3, [pc, #3216]	; 28a50 <__assert_fail@plt+0x17844>
   27dbc:	mov	r0, #10
   27dc0:	ldr	r1, [r3]
   27dc4:	bl	11158 <putc@plt>
   27dc8:	mov	r2, #5
   27dcc:	ldr	r1, [pc, #3236]	; 28a78 <__assert_fail@plt+0x1786c>
   27dd0:	mov	r0, #0
   27dd4:	bl	10f90 <dcgettext@plt>
   27dd8:	ldr	r2, [sp, #52]	; 0x34
   27ddc:	ldr	r3, [pc, #3224]	; 28a7c <__assert_fail@plt+0x17870>
   27de0:	and	r2, r2, #15
   27de4:	add	r3, r3, r2, lsl #2
   27de8:	ldr	r1, [r3, #24]
   27dec:	bl	10f24 <printf@plt>
   27df0:	b	27c34 <__assert_fail@plt+0x16a28>
   27df4:	tst	r2, #1879048192	; 0x70000000
   27df8:	beq	27c48 <__assert_fail@plt+0x16a3c>
   27dfc:	mov	r2, #5
   27e00:	ldr	r1, [pc, #3192]	; 28a80 <__assert_fail@plt+0x17874>
   27e04:	mov	r0, #0
   27e08:	bl	10f90 <dcgettext@plt>
   27e0c:	ldr	r1, [sp, #52]	; 0x34
   27e10:	bl	54dd0 <warn@@Base>
   27e14:	mov	fp, #0
   27e18:	ldr	r2, [sp, #52]	; 0x34
   27e1c:	b	27c4c <__assert_fail@plt+0x16a40>
   27e20:	ldrd	r0, [sp, #64]	; 0x40
   27e24:	mvn	r3, #0
   27e28:	mvn	r2, #0
   27e2c:	cmp	r1, r3
   27e30:	cmpeq	r0, r2
   27e34:	strd	r0, [sp, #40]	; 0x28
   27e38:	beq	27eb8 <__assert_fail@plt+0x16cac>
   27e3c:	ldr	r3, [sp, #28]
   27e40:	ldr	r6, [r3, #24]
   27e44:	mov	r3, #0
   27e48:	cmp	r1, r3
   27e4c:	cmpeq	r0, r6
   27e50:	bcs	27eb8 <__assert_fail@plt+0x16cac>
   27e54:	ldr	r3, [sp, #28]
   27e58:	ldrd	r0, [sp, #32]
   27e5c:	mov	r2, #4
   27e60:	ldr	r4, [r3, #20]
   27e64:	ldr	r3, [sp, #40]	; 0x28
   27e68:	add	r4, r4, r3
   27e6c:	bl	14244 <__assert_fail@plt+0x3038>
   27e70:	cmp	r4, #0
   27e74:	beq	288dc <__assert_fail@plt+0x176d0>
   27e78:	ldr	r6, [pc, #3024]	; 28a50 <__assert_fail@plt+0x17844>
   27e7c:	mov	r2, #2
   27e80:	mov	r1, #1
   27e84:	ldr	r3, [r6]
   27e88:	ldr	r0, [pc, #3060]	; 28a84 <__assert_fail@plt+0x17878>
   27e8c:	bl	10fcc <fwrite@plt>
   27e90:	ldr	r1, [r6]
   27e94:	mov	r0, r4
   27e98:	bl	111c4 <fputs@plt>
   27e9c:	ldr	r1, [r6]
   27ea0:	mov	r0, #62	; 0x3e
   27ea4:	bl	11140 <fputc@plt>
   27ea8:	ldr	r1, [r6]
   27eac:	mov	r0, #10
   27eb0:	bl	11140 <fputc@plt>
   27eb4:	b	27b90 <__assert_fail@plt+0x16984>
   27eb8:	mov	r2, ip
   27ebc:	mov	r3, ip
   27ec0:	b	27b58 <__assert_fail@plt+0x1694c>
   27ec4:	mov	r4, #3
   27ec8:	b	27d4c <__assert_fail@plt+0x16b40>
   27ecc:	cmp	r2, #40	; 0x28
   27ed0:	bne	27f04 <__assert_fail@plt+0x16cf8>
   27ed4:	mov	r2, #5
   27ed8:	ldr	r1, [pc, #2984]	; 28a88 <__assert_fail@plt+0x1787c>
   27edc:	mov	r0, #0
   27ee0:	bl	10f90 <dcgettext@plt>
   27ee4:	bl	54dd0 <warn@@Base>
   27ee8:	mov	r2, #5
   27eec:	ldr	r1, [pc, #2968]	; 28a8c <__assert_fail@plt+0x17880>
   27ef0:	mov	r0, #0
   27ef4:	bl	10f90 <dcgettext@plt>
   27ef8:	bl	10f24 <printf@plt>
   27efc:	mov	fp, #0
   27f00:	b	27c34 <__assert_fail@plt+0x16a28>
   27f04:	cmp	r2, #140	; 0x8c
   27f08:	bne	27c98 <__assert_fail@plt+0x16a8c>
   27f0c:	mov	r3, #0
   27f10:	mov	r1, r3
   27f14:	b	27d4c <__assert_fail@plt+0x16b40>
   27f18:	mov	r4, #3
   27f1c:	str	fp, [sp, #48]	; 0x30
   27f20:	mov	fp, r1
   27f24:	mov	r2, #1
   27f28:	str	r2, [sp, #40]	; 0x28
   27f2c:	str	r3, [sp, #56]	; 0x38
   27f30:	str	r8, [sp, #32]
   27f34:	adds	r6, fp, #0
   27f38:	movne	r6, #1
   27f3c:	cmp	r4, #0
   27f40:	moveq	r3, r6
   27f44:	movne	r3, #0
   27f48:	cmp	r3, #0
   27f4c:	beq	280e0 <__assert_fail@plt+0x16ed4>
   27f50:	cmp	r7, #0
   27f54:	ldr	r3, [sp, #284]	; 0x11c
   27f58:	clz	r6, r3
   27f5c:	lsr	r6, r6, #5
   27f60:	moveq	r6, #1
   27f64:	cmp	r6, #0
   27f68:	bne	27c30 <__assert_fail@plt+0x16a24>
   27f6c:	adds	r9, r9, #4
   27f70:	adc	sl, sl, #0
   27f74:	add	r1, sp, #104	; 0x68
   27f78:	add	r2, sp, #112	; 0x70
   27f7c:	add	r3, sp, #56	; 0x38
   27f80:	str	r1, [sp, #12]
   27f84:	str	r2, [sp, #16]
   27f88:	str	r3, [sp, #8]
   27f8c:	stm	sp, {r9, sl}
   27f90:	str	r6, [sp, #20]
   27f94:	mov	r3, r7
   27f98:	ldr	r2, [sp, #284]	; 0x11c
   27f9c:	ldr	r1, [sp, #28]
   27fa0:	ldr	r0, [sp, #32]
   27fa4:	bl	24790 <__assert_fail@plt+0x13584>
   27fa8:	cmp	r0, #0
   27fac:	beq	27c30 <__assert_fail@plt+0x16a24>
   27fb0:	sub	fp, fp, #1
   27fb4:	mov	r4, #3
   27fb8:	ldr	r3, [sp, #56]	; 0x38
   27fbc:	ldr	r0, [pc, #2764]	; 28a90 <__assert_fail@plt+0x17884>
   27fc0:	lsr	r5, r3, #24
   27fc4:	mov	r1, r5
   27fc8:	lsl	r3, r3, #8
   27fcc:	str	r3, [sp, #56]	; 0x38
   27fd0:	bl	10f24 <printf@plt>
   27fd4:	ands	r3, r5, #192	; 0xc0
   27fd8:	beq	280f4 <__assert_fail@plt+0x16ee8>
   27fdc:	cmp	r3, #64	; 0x40
   27fe0:	beq	28374 <__assert_fail@plt+0x17168>
   27fe4:	and	r3, r5, #240	; 0xf0
   27fe8:	cmp	r3, #128	; 0x80
   27fec:	beq	28290 <__assert_fail@plt+0x17084>
   27ff0:	cmp	r3, #144	; 0x90
   27ff4:	beq	2844c <__assert_fail@plt+0x17240>
   27ff8:	cmp	r3, #160	; 0xa0
   27ffc:	beq	289e4 <__assert_fail@plt+0x177d8>
   28000:	cmp	r5, #176	; 0xb0
   28004:	beq	28128 <__assert_fail@plt+0x16f1c>
   28008:	cmp	r5, #177	; 0xb1
   2800c:	beq	284a0 <__assert_fail@plt+0x17294>
   28010:	cmp	r5, #178	; 0xb2
   28014:	beq	28b40 <__assert_fail@plt+0x17934>
   28018:	sub	r3, r5, #200	; 0xc8
   2801c:	cmp	r5, #179	; 0xb3
   28020:	cmpne	r3, #1
   28024:	bhi	287cc <__assert_fail@plt+0x175c0>
   28028:	cmp	r6, #0
   2802c:	beq	287bc <__assert_fail@plt+0x175b0>
   28030:	cmp	r7, #0
   28034:	ldr	r3, [sp, #284]	; 0x11c
   28038:	clz	r3, r3
   2803c:	lsr	r3, r3, #5
   28040:	moveq	r3, #1
   28044:	cmp	r3, #0
   28048:	bne	27c30 <__assert_fail@plt+0x16a24>
   2804c:	adds	r9, r9, #4
   28050:	adc	sl, sl, #0
   28054:	add	r0, sp, #104	; 0x68
   28058:	add	r1, sp, #112	; 0x70
   2805c:	add	r2, sp, #56	; 0x38
   28060:	strd	r0, [sp, #12]
   28064:	str	r3, [sp, #20]
   28068:	str	r2, [sp, #8]
   2806c:	stm	sp, {r9, sl}
   28070:	mov	r3, r7
   28074:	ldr	r2, [sp, #284]	; 0x11c
   28078:	ldr	r1, [sp, #28]
   2807c:	ldr	r0, [sp, #32]
   28080:	bl	24790 <__assert_fail@plt+0x13584>
   28084:	cmp	r0, #0
   28088:	beq	27c30 <__assert_fail@plt+0x16a24>
   2808c:	sub	fp, fp, #1
   28090:	mov	r4, #3
   28094:	ldr	r6, [sp, #56]	; 0x38
   28098:	ldr	r0, [pc, #2656]	; 28b00 <__assert_fail@plt+0x178f4>
   2809c:	lsr	r8, r6, #24
   280a0:	lsl	r3, r6, #8
   280a4:	mov	r1, r8
   280a8:	str	r3, [sp, #56]	; 0x38
   280ac:	lsr	r6, r6, #28
   280b0:	bl	10f24 <printf@plt>
   280b4:	cmp	r5, #200	; 0xc8
   280b8:	addeq	r6, r6, #16
   280bc:	and	r8, r8, #15
   280c0:	mov	r1, r6
   280c4:	ldr	r0, [pc, #2504]	; 28a94 <__assert_fail@plt+0x17888>
   280c8:	bl	10f24 <printf@plt>
   280cc:	cmp	r8, #0
   280d0:	bne	28c3c <__assert_fail@plt+0x17a30>
   280d4:	mov	r0, #125	; 0x7d
   280d8:	bl	110c8 <putchar@plt>
   280dc:	b	28108 <__assert_fail@plt+0x16efc>
   280e0:	cmp	r4, #0
   280e4:	beq	28344 <__assert_fail@plt+0x17138>
   280e8:	subs	r4, r4, #1
   280ec:	movne	r6, #0
   280f0:	b	27fb8 <__assert_fail@plt+0x16dac>
   280f4:	lsl	r1, r5, #2
   280f8:	ldr	r0, [pc, #2456]	; 28a98 <__assert_fail@plt+0x1788c>
   280fc:	uxtb	r1, r1
   28100:	add	r1, r1, #4
   28104:	bl	10f24 <printf@plt>
   28108:	mov	r0, #10
   2810c:	bl	110c8 <putchar@plt>
   28110:	b	27f34 <__assert_fail@plt+0x16d28>
   28114:	ldr	r1, [pc, #2432]	; 28a9c <__assert_fail@plt+0x17890>
   28118:	mov	r0, #0
   2811c:	bl	10f90 <dcgettext@plt>
   28120:	bl	10f24 <printf@plt>
   28124:	b	27d8c <__assert_fail@plt+0x16b80>
   28128:	mov	r2, #5
   2812c:	ldr	r1, [pc, #2412]	; 28aa0 <__assert_fail@plt+0x17894>
   28130:	mov	r0, #0
   28134:	bl	10f90 <dcgettext@plt>
   28138:	bl	10f24 <printf@plt>
   2813c:	b	28108 <__assert_fail@plt+0x16efc>
   28140:	str	r8, [sp, #32]
   28144:	ldr	r8, [sp, #284]	; 0x11c
   28148:	ldr	r3, [sp, #52]	; 0x34
   2814c:	mov	r5, r1
   28150:	str	r3, [sp, #56]	; 0x38
   28154:	str	fp, [sp, #40]	; 0x28
   28158:	adds	fp, r5, #0
   2815c:	movne	fp, #1
   28160:	cmp	r4, #0
   28164:	moveq	r3, fp
   28168:	movne	r3, #0
   2816c:	cmp	r3, #0
   28170:	beq	28264 <__assert_fail@plt+0x17058>
   28174:	cmp	r7, #0
   28178:	clz	fp, r8
   2817c:	lsr	fp, fp, #5
   28180:	moveq	fp, #1
   28184:	cmp	fp, #0
   28188:	bne	27c30 <__assert_fail@plt+0x16a24>
   2818c:	adds	r9, r9, #4
   28190:	adc	sl, sl, #0
   28194:	add	r1, sp, #88	; 0x58
   28198:	add	r2, sp, #96	; 0x60
   2819c:	add	r3, sp, #56	; 0x38
   281a0:	str	r1, [sp, #12]
   281a4:	str	r2, [sp, #16]
   281a8:	str	r3, [sp, #8]
   281ac:	stm	sp, {r9, sl}
   281b0:	str	fp, [sp, #20]
   281b4:	mov	r3, r7
   281b8:	mov	r2, r8
   281bc:	ldr	r1, [sp, #28]
   281c0:	ldr	r0, [sp, #32]
   281c4:	bl	24790 <__assert_fail@plt+0x13584>
   281c8:	cmp	r0, #0
   281cc:	beq	27c30 <__assert_fail@plt+0x16a24>
   281d0:	sub	r5, r5, #1
   281d4:	mov	r4, #3
   281d8:	ldr	r3, [sp, #56]	; 0x38
   281dc:	ldr	r0, [pc, #2220]	; 28a90 <__assert_fail@plt+0x17884>
   281e0:	lsr	r6, r3, #24
   281e4:	mov	r1, r6
   281e8:	lsl	r3, r3, #8
   281ec:	str	r3, [sp, #56]	; 0x38
   281f0:	bl	10f24 <printf@plt>
   281f4:	ands	r3, r6, #192	; 0xc0
   281f8:	beq	28278 <__assert_fail@plt+0x1706c>
   281fc:	cmp	r3, #128	; 0x80
   28200:	beq	2838c <__assert_fail@plt+0x17180>
   28204:	and	r3, r6, #240	; 0xf0
   28208:	cmp	r3, #192	; 0xc0
   2820c:	beq	28580 <__assert_fail@plt+0x17374>
   28210:	cmp	r6, #208	; 0xd0
   28214:	beq	28574 <__assert_fail@plt+0x17368>
   28218:	cmp	r6, #209	; 0xd1
   2821c:	beq	287b0 <__assert_fail@plt+0x175a4>
   28220:	cmp	r6, #210	; 0xd2
   28224:	beq	28904 <__assert_fail@plt+0x176f8>
   28228:	cmp	r3, #224	; 0xe0
   2822c:	bne	2855c <__assert_fail@plt+0x17350>
   28230:	and	r6, r6, #15
   28234:	cmp	r6, #7
   28238:	beq	28a40 <__assert_fail@plt+0x17834>
   2823c:	ldr	r3, [pc, #2104]	; 28a7c <__assert_fail@plt+0x17870>
   28240:	ldr	r0, [pc, #2140]	; 28aa4 <__assert_fail@plt+0x17898>
   28244:	add	r6, r3, r6, lsl #2
   28248:	ldr	r1, [r6, #24]
   2824c:	bl	10f24 <printf@plt>
   28250:	ldr	r3, [pc, #2040]	; 28a50 <__assert_fail@plt+0x17844>
   28254:	mov	r0, #10
   28258:	ldr	r1, [r3]
   2825c:	bl	11158 <putc@plt>
   28260:	b	28158 <__assert_fail@plt+0x16f4c>
   28264:	cmp	r4, #0
   28268:	beq	28a38 <__assert_fail@plt+0x1782c>
   2826c:	subs	r4, r4, #1
   28270:	movne	fp, #0
   28274:	b	281d8 <__assert_fail@plt+0x16fcc>
   28278:	lsl	r1, r6, #3
   2827c:	and	r1, r1, #504	; 0x1f8
   28280:	add	r1, r1, #8
   28284:	ldr	r0, [pc, #2076]	; 28aa8 <__assert_fail@plt+0x1789c>
   28288:	bl	10f24 <printf@plt>
   2828c:	b	28250 <__assert_fail@plt+0x17044>
   28290:	cmp	r6, #0
   28294:	beq	28470 <__assert_fail@plt+0x17264>
   28298:	cmp	r7, #0
   2829c:	ldr	r3, [sp, #284]	; 0x11c
   282a0:	clz	r3, r3
   282a4:	lsr	r3, r3, #5
   282a8:	moveq	r3, #1
   282ac:	cmp	r3, #0
   282b0:	bne	27c30 <__assert_fail@plt+0x16a24>
   282b4:	adds	r9, r9, #4
   282b8:	adc	sl, sl, #0
   282bc:	add	r0, sp, #104	; 0x68
   282c0:	add	r1, sp, #112	; 0x70
   282c4:	add	r2, sp, #56	; 0x38
   282c8:	strd	r0, [sp, #12]
   282cc:	str	r3, [sp, #20]
   282d0:	str	r2, [sp, #8]
   282d4:	stm	sp, {r9, sl}
   282d8:	mov	r3, r7
   282dc:	ldr	r2, [sp, #284]	; 0x11c
   282e0:	ldr	r1, [sp, #28]
   282e4:	ldr	r0, [sp, #32]
   282e8:	bl	24790 <__assert_fail@plt+0x13584>
   282ec:	cmp	r0, #0
   282f0:	beq	27c30 <__assert_fail@plt+0x16a24>
   282f4:	sub	fp, fp, #1
   282f8:	mov	r4, #3
   282fc:	ldr	r3, [sp, #56]	; 0x38
   28300:	ldr	r0, [pc, #2040]	; 28b00 <__assert_fail@plt+0x178f4>
   28304:	lsr	r8, r3, #24
   28308:	mov	r1, r8
   2830c:	lsl	r3, r3, #8
   28310:	str	r3, [sp, #56]	; 0x38
   28314:	bl	10f24 <printf@plt>
   28318:	cmp	r5, #128	; 0x80
   2831c:	cmpeq	r8, #0
   28320:	moveq	r6, #1
   28324:	movne	r6, #0
   28328:	bne	2873c <__assert_fail@plt+0x17530>
   2832c:	mov	r2, #5
   28330:	ldr	r1, [pc, #1908]	; 28aac <__assert_fail@plt+0x178a0>
   28334:	mov	r0, #0
   28338:	bl	10f90 <dcgettext@plt>
   2833c:	bl	10f24 <printf@plt>
   28340:	b	28108 <__assert_fail@plt+0x16efc>
   28344:	ldr	r3, [sp, #40]	; 0x28
   28348:	ldr	fp, [sp, #48]	; 0x30
   2834c:	cmp	r3, #0
   28350:	bne	27c34 <__assert_fail@plt+0x16a28>
   28354:	b	27c30 <__assert_fail@plt+0x16a24>
   28358:	mov	r2, #5
   2835c:	ldr	r1, [pc, #1868]	; 28ab0 <__assert_fail@plt+0x178a4>
   28360:	mov	r0, #0
   28364:	bl	10f90 <dcgettext@plt>
   28368:	mov	r1, r5
   2836c:	bl	10f24 <printf@plt>
   28370:	b	27c34 <__assert_fail@plt+0x16a28>
   28374:	lsl	r1, r5, #2
   28378:	ldr	r0, [pc, #1844]	; 28ab4 <__assert_fail@plt+0x178a8>
   2837c:	uxtb	r1, r1
   28380:	add	r1, r1, #4
   28384:	bl	10f24 <printf@plt>
   28388:	b	28108 <__assert_fail@plt+0x16efc>
   2838c:	cmp	fp, #0
   28390:	beq	28480 <__assert_fail@plt+0x17274>
   28394:	cmp	r7, #0
   28398:	clz	r3, r8
   2839c:	lsr	r3, r3, #5
   283a0:	moveq	r3, #1
   283a4:	cmp	r3, #0
   283a8:	bne	27c30 <__assert_fail@plt+0x16a24>
   283ac:	adds	r9, r9, #4
   283b0:	adc	sl, sl, #0
   283b4:	add	r0, sp, #88	; 0x58
   283b8:	add	r1, sp, #96	; 0x60
   283bc:	add	r2, sp, #56	; 0x38
   283c0:	strd	r0, [sp, #12]
   283c4:	str	r3, [sp, #20]
   283c8:	str	r2, [sp, #8]
   283cc:	stm	sp, {r9, sl}
   283d0:	mov	r3, r7
   283d4:	mov	r2, r8
   283d8:	ldr	r1, [sp, #28]
   283dc:	ldr	r0, [sp, #32]
   283e0:	bl	24790 <__assert_fail@plt+0x13584>
   283e4:	cmp	r0, #0
   283e8:	beq	27c30 <__assert_fail@plt+0x16a24>
   283ec:	sub	r5, r5, #1
   283f0:	mov	r4, #3
   283f4:	ldr	r3, [sp, #56]	; 0x38
   283f8:	ldr	r0, [pc, #1792]	; 28b00 <__assert_fail@plt+0x178f4>
   283fc:	lsr	fp, r3, #24
   28400:	mov	r1, fp
   28404:	lsl	r3, r3, #8
   28408:	str	r3, [sp, #56]	; 0x38
   2840c:	bl	10f24 <printf@plt>
   28410:	cmp	r6, #128	; 0x80
   28414:	cmpeq	fp, #0
   28418:	beq	28798 <__assert_fail@plt+0x1758c>
   2841c:	tst	r6, #32
   28420:	lsl	r3, r6, #8
   28424:	and	r3, r3, #7936	; 0x1f00
   28428:	orr	fp, r3, fp
   2842c:	ldrne	r0, [pc, #1668]	; 28ab8 <__assert_fail@plt+0x178ac>
   28430:	ldreq	r0, [pc, #1752]	; 28b10 <__assert_fail@plt+0x17904>
   28434:	bl	10f24 <printf@plt>
   28438:	mov	r0, fp
   2843c:	bl	14d64 <__assert_fail@plt+0x3b58>
   28440:	mov	r0, #125	; 0x7d
   28444:	bl	110c8 <putchar@plt>
   28448:	b	28250 <__assert_fail@plt+0x17044>
   2844c:	bic	r3, r5, #2
   28450:	cmp	r3, #157	; 0x9d
   28454:	bne	28490 <__assert_fail@plt+0x17284>
   28458:	mov	r2, #5
   2845c:	ldr	r1, [pc, #1624]	; 28abc <__assert_fail@plt+0x178b0>
   28460:	mov	r0, #0
   28464:	bl	10f90 <dcgettext@plt>
   28468:	bl	10f24 <printf@plt>
   2846c:	b	28108 <__assert_fail@plt+0x16efc>
   28470:	cmp	r4, #0
   28474:	beq	28c78 <__assert_fail@plt+0x17a6c>
   28478:	sub	r4, r4, #1
   2847c:	b	282fc <__assert_fail@plt+0x170f0>
   28480:	cmp	r4, #0
   28484:	beq	28c78 <__assert_fail@plt+0x17a6c>
   28488:	sub	r4, r4, #1
   2848c:	b	283f4 <__assert_fail@plt+0x171e8>
   28490:	and	r1, r5, #15
   28494:	ldr	r0, [pc, #1572]	; 28ac0 <__assert_fail@plt+0x178b4>
   28498:	bl	10f24 <printf@plt>
   2849c:	b	28108 <__assert_fail@plt+0x16efc>
   284a0:	cmp	r6, #0
   284a4:	beq	288f4 <__assert_fail@plt+0x176e8>
   284a8:	cmp	r7, #0
   284ac:	ldr	r3, [sp, #284]	; 0x11c
   284b0:	clz	r3, r3
   284b4:	lsr	r3, r3, #5
   284b8:	moveq	r3, #1
   284bc:	cmp	r3, #0
   284c0:	bne	27c30 <__assert_fail@plt+0x16a24>
   284c4:	adds	r9, r9, #4
   284c8:	adc	sl, sl, #0
   284cc:	add	r0, sp, #104	; 0x68
   284d0:	add	r1, sp, #112	; 0x70
   284d4:	add	r2, sp, #56	; 0x38
   284d8:	strd	r0, [sp, #12]
   284dc:	str	r3, [sp, #20]
   284e0:	str	r2, [sp, #8]
   284e4:	stm	sp, {r9, sl}
   284e8:	mov	r3, r7
   284ec:	ldr	r2, [sp, #284]	; 0x11c
   284f0:	ldr	r1, [sp, #28]
   284f4:	ldr	r0, [sp, #32]
   284f8:	bl	24790 <__assert_fail@plt+0x13584>
   284fc:	cmp	r0, #0
   28500:	beq	27c30 <__assert_fail@plt+0x16a24>
   28504:	sub	fp, fp, #1
   28508:	mov	r4, #3
   2850c:	ldr	r3, [sp, #56]	; 0x38
   28510:	ldr	r0, [pc, #1512]	; 28b00 <__assert_fail@plt+0x178f4>
   28514:	lsr	r5, r3, #24
   28518:	mov	r1, r5
   2851c:	lsl	r3, r3, #8
   28520:	str	r3, [sp, #56]	; 0x38
   28524:	bl	10f24 <printf@plt>
   28528:	cmp	r5, #0
   2852c:	beq	28538 <__assert_fail@plt+0x1732c>
   28530:	ands	r8, r5, #240	; 0xf0
   28534:	beq	28d8c <__assert_fail@plt+0x17b80>
   28538:	mov	r2, #5
   2853c:	ldr	r1, [pc, #1408]	; 28ac4 <__assert_fail@plt+0x178b8>
   28540:	mov	r0, #0
   28544:	bl	10f90 <dcgettext@plt>
   28548:	bl	10f24 <printf@plt>
   2854c:	b	28108 <__assert_fail@plt+0x16efc>
   28550:	ldr	r0, [pc, #1392]	; 28ac8 <__assert_fail@plt+0x178bc>
   28554:	bl	10f24 <printf@plt>
   28558:	b	27da8 <__assert_fail@plt+0x16b9c>
   2855c:	mov	r2, #5
   28560:	ldr	r1, [pc, #1444]	; 28b0c <__assert_fail@plt+0x17900>
   28564:	mov	r0, #0
   28568:	bl	10f90 <dcgettext@plt>
   2856c:	bl	10f24 <printf@plt>
   28570:	b	28250 <__assert_fail@plt+0x17044>
   28574:	ldr	r0, [pc, #1360]	; 28acc <__assert_fail@plt+0x178c0>
   28578:	bl	10f24 <printf@plt>
   2857c:	b	28250 <__assert_fail@plt+0x17044>
   28580:	ands	r3, r6, #15
   28584:	str	r3, [sp, #48]	; 0x30
   28588:	beq	28e78 <__assert_fail@plt+0x17c6c>
   2858c:	mov	r6, #0
   28590:	str	r7, [sp, #280]	; 0x118
   28594:	mov	fp, r6
   28598:	mov	r7, r5
   2859c:	str	r8, [sp, #284]	; 0x11c
   285a0:	adds	r3, r7, #0
   285a4:	movne	r3, #1
   285a8:	cmp	r4, #0
   285ac:	movne	r3, #0
   285b0:	cmp	r3, #0
   285b4:	beq	2872c <__assert_fail@plt+0x17520>
   285b8:	ldr	r2, [sp, #280]	; 0x118
   285bc:	ldr	r3, [sp, #284]	; 0x11c
   285c0:	cmp	r2, #0
   285c4:	clz	r3, r3
   285c8:	lsr	r3, r3, #5
   285cc:	moveq	r3, #1
   285d0:	cmp	r3, #0
   285d4:	bne	27c30 <__assert_fail@plt+0x16a24>
   285d8:	adds	r9, r9, #4
   285dc:	str	r3, [sp, #20]
   285e0:	add	r3, sp, #96	; 0x60
   285e4:	adc	sl, sl, #0
   285e8:	add	r2, sp, #56	; 0x38
   285ec:	str	r3, [sp, #16]
   285f0:	add	r3, sp, #88	; 0x58
   285f4:	stm	sp, {r9, sl}
   285f8:	strd	r2, [sp, #8]
   285fc:	ldr	r1, [sp, #28]
   28600:	ldr	r3, [sp, #280]	; 0x118
   28604:	ldr	r2, [sp, #284]	; 0x11c
   28608:	ldr	r0, [sp, #32]
   2860c:	bl	24790 <__assert_fail@plt+0x13584>
   28610:	cmp	r0, #0
   28614:	beq	27c30 <__assert_fail@plt+0x16a24>
   28618:	sub	r7, r7, #1
   2861c:	mov	r4, #3
   28620:	ldr	r5, [sp, #56]	; 0x38
   28624:	ldr	r0, [pc, #1236]	; 28b00 <__assert_fail@plt+0x178f4>
   28628:	lsr	r8, r5, #24
   2862c:	mov	r1, r8
   28630:	lsl	ip, r5, #8
   28634:	str	ip, [sp, #56]	; 0x38
   28638:	bl	10f24 <printf@plt>
   2863c:	lsr	r5, r5, #28
   28640:	cmp	r5, #15
   28644:	addne	r3, sp, #232	; 0xe8
   28648:	lslne	r0, fp, #1
   2864c:	addne	r1, r3, r6, lsl #3
   28650:	and	r3, r8, #15
   28654:	addne	r6, r6, #1
   28658:	strne	r5, [r1, #-124]	; 0xffffff84
   2865c:	strne	r0, [r1, #-128]	; 0xffffff80
   28660:	cmp	r3, #15
   28664:	beq	28684 <__assert_fail@plt+0x17478>
   28668:	add	r2, sp, #232	; 0xe8
   2866c:	add	r0, r2, r6, lsl #3
   28670:	lsl	r1, fp, #1
   28674:	add	r6, r6, #1
   28678:	add	r1, r1, #1
   2867c:	str	r1, [r0, #-128]	; 0xffffff80
   28680:	str	r3, [r0, #-124]	; 0xffffff84
   28684:	ldr	r3, [sp, #48]	; 0x30
   28688:	add	fp, fp, #1
   2868c:	cmp	r3, r6
   28690:	bhi	285a0 <__assert_fail@plt+0x17394>
   28694:	mov	r2, #5
   28698:	ldr	r1, [pc, #1156]	; 28b24 <__assert_fail@plt+0x17918>
   2869c:	mov	r0, #0
   286a0:	mov	r5, r7
   286a4:	ldr	r8, [sp, #284]	; 0x11c
   286a8:	ldr	r7, [sp, #280]	; 0x118
   286ac:	bl	10f90 <dcgettext@plt>
   286b0:	bl	10f24 <printf@plt>
   286b4:	lsls	fp, fp, #1
   286b8:	sub	r6, r6, #1
   286bc:	beq	28c30 <__assert_fail@plt+0x17a24>
   286c0:	str	r4, [sp, #48]	; 0x30
   286c4:	b	28700 <__assert_fail@plt+0x174f4>
   286c8:	ldr	r2, [r2, #-124]	; 0xffffff84
   286cc:	ldr	r3, [pc, #936]	; 28a7c <__assert_fail@plt+0x17870>
   286d0:	cmp	r6, #0
   286d4:	add	r2, r3, r2, lsl #2
   286d8:	subne	r6, r6, #1
   286dc:	ldr	r0, [r2, #24]
   286e0:	ldr	r3, [pc, #872]	; 28a50 <__assert_fail@plt+0x17844>
   286e4:	ldr	r1, [r3]
   286e8:	bl	111c4 <fputs@plt>
   286ec:	cmp	fp, #1
   286f0:	bls	28c2c <__assert_fail@plt+0x17a20>
   286f4:	ldr	r0, [pc, #1052]	; 28b18 <__assert_fail@plt+0x1790c>
   286f8:	mov	fp, r4
   286fc:	bl	10f24 <printf@plt>
   28700:	add	r3, sp, #232	; 0xe8
   28704:	add	r2, r3, r6, lsl #3
   28708:	sub	r4, fp, #1
   2870c:	ldr	r1, [r2, #-128]	; 0xffffff80
   28710:	cmp	r1, r4
   28714:	beq	286c8 <__assert_fail@plt+0x174bc>
   28718:	mov	r2, #5
   2871c:	ldr	r1, [pc, #940]	; 28ad0 <__assert_fail@plt+0x178c4>
   28720:	mov	r0, #0
   28724:	bl	10f90 <dcgettext@plt>
   28728:	b	286e0 <__assert_fail@plt+0x174d4>
   2872c:	cmp	r4, #0
   28730:	beq	27c1c <__assert_fail@plt+0x16a10>
   28734:	sub	r4, r4, #1
   28738:	b	28620 <__assert_fail@plt+0x17414>
   2873c:	lsl	r5, r5, #8
   28740:	ldr	r0, [pc, #968]	; 28b10 <__assert_fail@plt+0x17904>
   28744:	and	r5, r5, #3840	; 0xf00
   28748:	bl	10f24 <printf@plt>
   2874c:	mov	r2, #1
   28750:	orr	r5, r5, r8
   28754:	mov	r8, r6
   28758:	mov	r6, r2
   2875c:	b	2877c <__assert_fail@plt+0x17570>
   28760:	add	r1, r8, #4
   28764:	ldr	r0, [pc, #936]	; 28b14 <__assert_fail@plt+0x17908>
   28768:	bl	10f24 <printf@plt>
   2876c:	mov	r2, #0
   28770:	add	r8, r8, #1
   28774:	cmp	r8, #12
   28778:	beq	280d4 <__assert_fail@plt+0x16ec8>
   2877c:	ands	r3, r5, r6, lsl r8
   28780:	beq	28770 <__assert_fail@plt+0x17564>
   28784:	cmp	r2, #0
   28788:	bne	28760 <__assert_fail@plt+0x17554>
   2878c:	ldr	r0, [pc, #900]	; 28b18 <__assert_fail@plt+0x1790c>
   28790:	bl	10f24 <printf@plt>
   28794:	b	28760 <__assert_fail@plt+0x17554>
   28798:	mov	r2, #5
   2879c:	ldr	r1, [pc, #776]	; 28aac <__assert_fail@plt+0x178a0>
   287a0:	mov	r0, #0
   287a4:	bl	10f90 <dcgettext@plt>
   287a8:	bl	10f24 <printf@plt>
   287ac:	b	28250 <__assert_fail@plt+0x17044>
   287b0:	ldr	r0, [pc, #796]	; 28ad4 <__assert_fail@plt+0x178c8>
   287b4:	bl	10f24 <printf@plt>
   287b8:	b	28250 <__assert_fail@plt+0x17044>
   287bc:	cmp	r4, #0
   287c0:	beq	28c78 <__assert_fail@plt+0x17a6c>
   287c4:	sub	r4, r4, #1
   287c8:	b	28094 <__assert_fail@plt+0x16e88>
   287cc:	and	r3, r5, #248	; 0xf8
   287d0:	cmp	r3, #208	; 0xd0
   287d4:	cmpne	r3, #184	; 0xb8
   287d8:	beq	28c4c <__assert_fail@plt+0x17a40>
   287dc:	sub	r3, r5, #192	; 0xc0
   287e0:	cmp	r3, #5
   287e4:	bls	28c94 <__assert_fail@plt+0x17a88>
   287e8:	cmp	r5, #198	; 0xc6
   287ec:	beq	28cb8 <__assert_fail@plt+0x17aac>
   287f0:	cmp	r5, #199	; 0xc7
   287f4:	bne	28d6c <__assert_fail@plt+0x17b60>
   287f8:	cmp	r6, #0
   287fc:	beq	28c70 <__assert_fail@plt+0x17a64>
   28800:	cmp	r7, #0
   28804:	ldr	r3, [sp, #284]	; 0x11c
   28808:	clz	r3, r3
   2880c:	lsr	r3, r3, #5
   28810:	moveq	r3, #1
   28814:	cmp	r3, #0
   28818:	bne	27c30 <__assert_fail@plt+0x16a24>
   2881c:	adds	r9, r9, #4
   28820:	adc	sl, sl, #0
   28824:	add	r0, sp, #104	; 0x68
   28828:	add	r1, sp, #112	; 0x70
   2882c:	add	r2, sp, #56	; 0x38
   28830:	strd	r0, [sp, #12]
   28834:	str	r3, [sp, #20]
   28838:	str	r2, [sp, #8]
   2883c:	stm	sp, {r9, sl}
   28840:	mov	r3, r7
   28844:	ldr	r2, [sp, #284]	; 0x11c
   28848:	ldr	r1, [sp, #28]
   2884c:	ldr	r0, [sp, #32]
   28850:	bl	24790 <__assert_fail@plt+0x13584>
   28854:	cmp	r0, #0
   28858:	beq	27c30 <__assert_fail@plt+0x16a24>
   2885c:	sub	fp, fp, #1
   28860:	mov	r4, #4
   28864:	ldr	r3, [sp, #56]	; 0x38
   28868:	ldr	r0, [pc, #656]	; 28b00 <__assert_fail@plt+0x178f4>
   2886c:	sub	r4, r4, #1
   28870:	lsr	r8, r3, #24
   28874:	mov	r1, r8
   28878:	lsl	r3, r3, #8
   2887c:	str	r3, [sp, #56]	; 0x38
   28880:	bl	10f24 <printf@plt>
   28884:	cmp	r8, #0
   28888:	beq	28538 <__assert_fail@plt+0x1732c>
   2888c:	ands	r5, r8, #240	; 0xf0
   28890:	bne	28538 <__assert_fail@plt+0x1732c>
   28894:	ldr	r0, [pc, #628]	; 28b10 <__assert_fail@plt+0x17904>
   28898:	ldr	r6, [pc, #632]	; 28b18 <__assert_fail@plt+0x1790c>
   2889c:	bl	10f24 <printf@plt>
   288a0:	and	r8, r8, #15
   288a4:	mov	r2, #1
   288a8:	mov	r3, #1
   288ac:	ands	r3, r8, r3, lsl r5
   288b0:	beq	288cc <__assert_fail@plt+0x176c0>
   288b4:	cmp	r2, #0
   288b8:	beq	28e6c <__assert_fail@plt+0x17c60>
   288bc:	mov	r1, r5
   288c0:	ldr	r0, [pc, #528]	; 28ad8 <__assert_fail@plt+0x178cc>
   288c4:	bl	10f24 <printf@plt>
   288c8:	mov	r2, #0
   288cc:	add	r5, r5, #1
   288d0:	cmp	r5, #4
   288d4:	bne	288a8 <__assert_fail@plt+0x1769c>
   288d8:	b	280d4 <__assert_fail@plt+0x16ec8>
   288dc:	ldr	r3, [pc, #364]	; 28a50 <__assert_fail@plt+0x17844>
   288e0:	mov	r0, #10
   288e4:	mov	fp, #1
   288e8:	ldr	r1, [r3]
   288ec:	bl	11140 <fputc@plt>
   288f0:	b	27c34 <__assert_fail@plt+0x16a28>
   288f4:	cmp	r4, #0
   288f8:	beq	28c78 <__assert_fail@plt+0x17a6c>
   288fc:	sub	r4, r4, #1
   28900:	b	2850c <__assert_fail@plt+0x17300>
   28904:	add	fp, sp, #104	; 0x68
   28908:	mov	r6, fp
   2890c:	adds	r3, r5, #0
   28910:	movne	r3, #1
   28914:	cmp	r4, #0
   28918:	movne	r3, #0
   2891c:	cmp	r3, #0
   28920:	beq	289d4 <__assert_fail@plt+0x177c8>
   28924:	cmp	r7, #0
   28928:	clz	r3, r8
   2892c:	lsr	r3, r3, #5
   28930:	moveq	r3, #1
   28934:	cmp	r3, #0
   28938:	bne	27c30 <__assert_fail@plt+0x16a24>
   2893c:	adds	r9, r9, #4
   28940:	str	r3, [sp, #20]
   28944:	add	r3, sp, #96	; 0x60
   28948:	adc	sl, sl, #0
   2894c:	add	r2, sp, #56	; 0x38
   28950:	str	r3, [sp, #16]
   28954:	add	r3, sp, #88	; 0x58
   28958:	stm	sp, {r9, sl}
   2895c:	strd	r2, [sp, #8]
   28960:	ldr	r1, [sp, #28]
   28964:	mov	r3, r7
   28968:	mov	r2, r8
   2896c:	ldr	r0, [sp, #32]
   28970:	bl	24790 <__assert_fail@plt+0x13584>
   28974:	cmp	r0, #0
   28978:	beq	27c30 <__assert_fail@plt+0x16a24>
   2897c:	sub	r5, r5, #1
   28980:	mov	r4, #3
   28984:	ldr	r3, [sp, #56]	; 0x38
   28988:	ldr	r0, [pc, #368]	; 28b00 <__assert_fail@plt+0x178f4>
   2898c:	lsr	r1, r3, #24
   28990:	strb	r1, [r6], #1
   28994:	lsl	r3, r3, #8
   28998:	str	r3, [sp, #56]	; 0x38
   2899c:	bl	10f24 <printf@plt>
   289a0:	ldrsb	r3, [r6, #-1]
   289a4:	sub	r2, r6, fp
   289a8:	cmp	r3, #0
   289ac:	bge	28de8 <__assert_fail@plt+0x17bdc>
   289b0:	add	r3, sp, #113	; 0x71
   289b4:	cmp	r3, r6
   289b8:	bne	2890c <__assert_fail@plt+0x17700>
   289bc:	mov	r2, #5
   289c0:	ldr	r1, [pc, #276]	; 28adc <__assert_fail@plt+0x178d0>
   289c4:	mov	r0, #0
   289c8:	bl	10f90 <dcgettext@plt>
   289cc:	bl	54dd0 <warn@@Base>
   289d0:	b	27c30 <__assert_fail@plt+0x16a24>
   289d4:	cmp	r4, #0
   289d8:	beq	27c1c <__assert_fail@plt+0x16a10>
   289dc:	sub	r4, r4, #1
   289e0:	b	28984 <__assert_fail@plt+0x17778>
   289e4:	and	r6, r5, #7
   289e8:	ldr	r0, [pc, #240]	; 28ae0 <__assert_fail@plt+0x178d4>
   289ec:	add	r6, r6, #4
   289f0:	mov	r8, #4
   289f4:	bl	10f24 <printf@plt>
   289f8:	mov	r1, r8
   289fc:	ldr	r0, [pc, #272]	; 28b14 <__assert_fail@plt+0x17908>
   28a00:	add	r8, r8, #1
   28a04:	bl	10f24 <printf@plt>
   28a08:	cmp	r6, r8
   28a0c:	blt	28a1c <__assert_fail@plt+0x17810>
   28a10:	ldr	r0, [pc, #256]	; 28b18 <__assert_fail@plt+0x1790c>
   28a14:	bl	10f24 <printf@plt>
   28a18:	b	289f8 <__assert_fail@plt+0x177ec>
   28a1c:	tst	r5, #8
   28a20:	beq	280d4 <__assert_fail@plt+0x16ec8>
   28a24:	ldr	r0, [pc, #236]	; 28b18 <__assert_fail@plt+0x1790c>
   28a28:	bl	10f24 <printf@plt>
   28a2c:	ldr	r0, [pc, #176]	; 28ae4 <__assert_fail@plt+0x178d8>
   28a30:	bl	10f24 <printf@plt>
   28a34:	b	280d4 <__assert_fail@plt+0x16ec8>
   28a38:	ldr	fp, [sp, #40]	; 0x28
   28a3c:	b	27c34 <__assert_fail@plt+0x16a28>
   28a40:	ldr	r0, [pc, #160]	; 28ae8 <__assert_fail@plt+0x178dc>
   28a44:	bl	10f24 <printf@plt>
   28a48:	b	28250 <__assert_fail@plt+0x17044>
   28a4c:	andeq	r7, r6, r0, lsr #28
   28a50:	andeq	sl, r9, ip, lsr #8
   28a54:	andeq	r7, r6, r8, lsr lr
   28a58:	andeq	r7, r6, r8, asr #29
   28a5c:	andeq	r8, r6, r4, ror r1
   28a60:	andeq	r7, r6, r0, asr lr
   28a64:	andeq	r7, r6, r8, ror #28
   28a68:	andeq	r7, r6, r0, lsl #29
   28a6c:	andeq	r8, r6, ip, lsl #2
   28a70:	andeq	r8, r6, r4, lsr #2
   28a74:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   28a78:	andeq	r8, r6, r8, asr #2
   28a7c:	andeq	r8, r5, r4, ror #27
   28a80:	muleq	r6, ip, lr
   28a84:	andeq	r7, r6, r4, lsl lr
   28a88:	andeq	r8, r6, ip, lsl r0
   28a8c:	andeq	r8, r6, ip, asr #32
   28a90:	andeq	r7, r6, r4, ror #29
   28a94:			; <UNDEFINED> instruction: 0x00067fb8
   28a98:	strdeq	r7, [r6], -r0
   28a9c:	andeq	r8, r6, r8, ror #1
   28aa0:	andeq	r7, r6, r4, lsl #31
   28aa4:	ldrdeq	r8, [r6], -r8	; <UNPREDICTABLE>
   28aa8:	andeq	r8, r6, ip, asr r0
   28aac:	andeq	r7, r6, r4, lsr pc
   28ab0:	andeq	r8, r6, r0, ror #2
   28ab4:	andeq	r7, r6, r4, lsl #30
   28ab8:	andeq	r8, r6, r0, ror r0
   28abc:	andeq	r7, r6, r4, asr pc
   28ac0:	andeq	r7, r6, r4, ror #30
   28ac4:	muleq	r6, r0, pc	; <UNPREDICTABLE>
   28ac8:	andeq	r8, r6, ip, lsr r1
   28acc:	muleq	r6, r4, r0
   28ad0:	andeq	r8, r6, ip, lsl #1
   28ad4:	andeq	r8, r6, r4, lsr #1
   28ad8:	strdeq	r7, [r6], -r8
   28adc:	ldrdeq	r8, [r6], -r8	; <UNPREDICTABLE>
   28ae0:	andeq	r7, r6, r4, ror pc
   28ae4:	andeq	r7, r6, r0, lsl #31
   28ae8:	andeq	r8, r6, ip, asr #1
   28aec:	andeq	r8, r6, r0, asr #3
   28af0:	andeq	r7, r6, ip, asr #31
   28af4:	andeq	r7, r6, r4, asr #31
   28af8:	andeq	r7, r6, r0, lsr #30
   28afc:	ldrdeq	r7, [r6], -r4
   28b00:	andeq	r7, r6, r8, lsl pc
   28b04:	andeq	r7, r6, ip, ror #31
   28b08:	andeq	r7, r6, r4, ror #31
   28b0c:	andeq	r8, r6, r0
   28b10:	andeq	r7, r6, r8, asr #30
   28b14:	andeq	r7, r6, r0, asr pc
   28b18:			; <UNDEFINED> instruction: 0x00068eb8
   28b1c:	strheq	r8, [r6], -ip
   28b20:	andeq	r7, r6, r8, lsr #31
   28b24:	andeq	r8, r6, r0, lsl #1
   28b28:	strdeq	lr, [r5], -ip
   28b2c:	andeq	r2, r0, r0, lsr #3
   28b30:	andeq	lr, r5, r8, lsl pc
   28b34:	muleq	r6, r8, pc	; <UNPREDICTABLE>
   28b38:	andeq	r2, r0, r4, ror r2
   28b3c:	andeq	r2, r6, r8, asr pc
   28b40:	add	r8, sp, #88	; 0x58
   28b44:	mov	r5, r8
   28b48:	add	r6, sp, #97	; 0x61
   28b4c:	adds	r3, fp, #0
   28b50:	movne	r3, #1
   28b54:	cmp	r4, #0
   28b58:	movne	r3, #0
   28b5c:	cmp	r3, #0
   28b60:	beq	28c1c <__assert_fail@plt+0x17a10>
   28b64:	cmp	r7, #0
   28b68:	ldr	r3, [sp, #284]	; 0x11c
   28b6c:	clz	r3, r3
   28b70:	lsr	r3, r3, #5
   28b74:	moveq	r3, #1
   28b78:	cmp	r3, #0
   28b7c:	bne	27c30 <__assert_fail@plt+0x16a24>
   28b80:	adds	r9, r9, #4
   28b84:	str	r3, [sp, #20]
   28b88:	add	r3, sp, #112	; 0x70
   28b8c:	adc	sl, sl, #0
   28b90:	add	r2, sp, #56	; 0x38
   28b94:	str	r3, [sp, #16]
   28b98:	add	r3, sp, #104	; 0x68
   28b9c:	stm	sp, {r9, sl}
   28ba0:	strd	r2, [sp, #8]
   28ba4:	ldr	r1, [sp, #28]
   28ba8:	mov	r3, r7
   28bac:	ldr	r2, [sp, #284]	; 0x11c
   28bb0:	ldr	r0, [sp, #32]
   28bb4:	bl	24790 <__assert_fail@plt+0x13584>
   28bb8:	cmp	r0, #0
   28bbc:	beq	27c30 <__assert_fail@plt+0x16a24>
   28bc0:	sub	fp, fp, #1
   28bc4:	mov	r4, #3
   28bc8:	ldr	r3, [sp, #56]	; 0x38
   28bcc:	ldr	r0, [pc, #-212]	; 28b00 <__assert_fail@plt+0x178f4>
   28bd0:	lsr	r1, r3, #24
   28bd4:	strb	r1, [r5], #1
   28bd8:	lsl	r3, r3, #8
   28bdc:	str	r3, [sp, #56]	; 0x38
   28be0:	bl	10f24 <printf@plt>
   28be4:	ldrsb	r3, [r5, #-1]
   28be8:	sub	r1, r5, r8
   28bec:	cmp	r3, #0
   28bf0:	bge	28e34 <__assert_fail@plt+0x17c28>
   28bf4:	cmp	r6, r5
   28bf8:	bne	28b4c <__assert_fail@plt+0x17940>
   28bfc:	mov	r2, #5
   28c00:	ldr	r1, [pc, #-284]	; 28aec <__assert_fail@plt+0x178e0>
   28c04:	mov	r0, #0
   28c08:	bl	10f90 <dcgettext@plt>
   28c0c:	bl	548ac <error@@Base>
   28c10:	mov	r3, #0
   28c14:	str	r3, [sp, #40]	; 0x28
   28c18:	b	28108 <__assert_fail@plt+0x16efc>
   28c1c:	cmp	r4, #0
   28c20:	beq	27c1c <__assert_fail@plt+0x16a10>
   28c24:	sub	r4, r4, #1
   28c28:	b	28bc8 <__assert_fail@plt+0x179bc>
   28c2c:	ldr	r4, [sp, #48]	; 0x30
   28c30:	mov	r0, #125	; 0x7d
   28c34:	bl	110c8 <putchar@plt>
   28c38:	b	28250 <__assert_fail@plt+0x17044>
   28c3c:	add	r1, r8, r6
   28c40:	ldr	r0, [pc, #-340]	; 28af4 <__assert_fail@plt+0x178e8>
   28c44:	bl	10f24 <printf@plt>
   28c48:	b	280d4 <__assert_fail@plt+0x16ec8>
   28c4c:	and	r5, r5, #7
   28c50:	ldr	r0, [pc, #-360]	; 28af0 <__assert_fail@plt+0x178e4>
   28c54:	bl	10f24 <printf@plt>
   28c58:	cmp	r5, #0
   28c5c:	beq	280d4 <__assert_fail@plt+0x16ec8>
   28c60:	add	r1, r5, #8
   28c64:	ldr	r0, [pc, #-376]	; 28af4 <__assert_fail@plt+0x178e8>
   28c68:	bl	10f24 <printf@plt>
   28c6c:	b	280d4 <__assert_fail@plt+0x16ec8>
   28c70:	cmp	r4, #0
   28c74:	bne	28864 <__assert_fail@plt+0x17658>
   28c78:	mov	r2, #5
   28c7c:	ldr	r1, [pc, #-396]	; 28af8 <__assert_fail@plt+0x178ec>
   28c80:	mov	r0, #0
   28c84:	bl	10f90 <dcgettext@plt>
   28c88:	bl	10f24 <printf@plt>
   28c8c:	mov	fp, #0
   28c90:	b	27c34 <__assert_fail@plt+0x16a28>
   28c94:	and	r5, r5, #7
   28c98:	ldr	r0, [pc, #-420]	; 28afc <__assert_fail@plt+0x178f0>
   28c9c:	bl	10f24 <printf@plt>
   28ca0:	cmp	r5, #0
   28ca4:	beq	280d4 <__assert_fail@plt+0x16ec8>
   28ca8:	add	r1, r5, #10
   28cac:	ldr	r0, [pc, #-428]	; 28b08 <__assert_fail@plt+0x178fc>
   28cb0:	bl	10f24 <printf@plt>
   28cb4:	b	280d4 <__assert_fail@plt+0x16ec8>
   28cb8:	cmp	r6, #0
   28cbc:	beq	28ddc <__assert_fail@plt+0x17bd0>
   28cc0:	cmp	r7, #0
   28cc4:	ldr	r3, [sp, #284]	; 0x11c
   28cc8:	clz	r3, r3
   28ccc:	lsr	r3, r3, #5
   28cd0:	moveq	r3, #1
   28cd4:	cmp	r3, #0
   28cd8:	bne	27c30 <__assert_fail@plt+0x16a24>
   28cdc:	adds	r9, r9, #4
   28ce0:	adc	sl, sl, #0
   28ce4:	add	r0, sp, #104	; 0x68
   28ce8:	add	r1, sp, #112	; 0x70
   28cec:	add	r2, sp, #56	; 0x38
   28cf0:	strd	r0, [sp, #12]
   28cf4:	str	r3, [sp, #20]
   28cf8:	str	r2, [sp, #8]
   28cfc:	stm	sp, {r9, sl}
   28d00:	mov	r3, r7
   28d04:	ldr	r2, [sp, #284]	; 0x11c
   28d08:	ldr	r1, [sp, #28]
   28d0c:	ldr	r0, [sp, #32]
   28d10:	bl	24790 <__assert_fail@plt+0x13584>
   28d14:	cmp	r0, #0
   28d18:	beq	27c30 <__assert_fail@plt+0x16a24>
   28d1c:	sub	fp, fp, #1
   28d20:	mov	r4, #4
   28d24:	ldr	r5, [sp, #56]	; 0x38
   28d28:	ldr	r0, [pc, #-560]	; 28b00 <__assert_fail@plt+0x178f4>
   28d2c:	sub	r4, r4, #1
   28d30:	lsr	r1, r5, #24
   28d34:	lsl	r3, r5, #8
   28d38:	lsr	r5, r5, #28
   28d3c:	and	r6, r1, #15
   28d40:	str	r3, [sp, #56]	; 0x38
   28d44:	bl	10f24 <printf@plt>
   28d48:	mov	r1, r5
   28d4c:	ldr	r0, [pc, #-592]	; 28b04 <__assert_fail@plt+0x178f8>
   28d50:	bl	10f24 <printf@plt>
   28d54:	cmp	r6, #0
   28d58:	beq	280d4 <__assert_fail@plt+0x16ec8>
   28d5c:	add	r1, r5, r6
   28d60:	ldr	r0, [pc, #-608]	; 28b08 <__assert_fail@plt+0x178fc>
   28d64:	bl	10f24 <printf@plt>
   28d68:	b	280d4 <__assert_fail@plt+0x16ec8>
   28d6c:	mov	r2, #5
   28d70:	ldr	r1, [pc, #-620]	; 28b0c <__assert_fail@plt+0x17900>
   28d74:	mov	r0, #0
   28d78:	bl	10f90 <dcgettext@plt>
   28d7c:	bl	10f24 <printf@plt>
   28d80:	mov	r3, #0
   28d84:	str	r3, [sp, #40]	; 0x28
   28d88:	b	28108 <__assert_fail@plt+0x16efc>
   28d8c:	ldr	r0, [pc, #-644]	; 28b10 <__assert_fail@plt+0x17904>
   28d90:	bl	10f24 <printf@plt>
   28d94:	mov	r2, #1
   28d98:	and	r5, r5, #15
   28d9c:	mov	r6, r2
   28da0:	b	28dc0 <__assert_fail@plt+0x17bb4>
   28da4:	mov	r1, r8
   28da8:	ldr	r0, [pc, #-668]	; 28b14 <__assert_fail@plt+0x17908>
   28dac:	bl	10f24 <printf@plt>
   28db0:	mov	r2, #0
   28db4:	add	r8, r8, #1
   28db8:	cmp	r8, #12
   28dbc:	beq	280d4 <__assert_fail@plt+0x16ec8>
   28dc0:	ands	r3, r5, r6, lsl r8
   28dc4:	beq	28db4 <__assert_fail@plt+0x17ba8>
   28dc8:	cmp	r2, #0
   28dcc:	bne	28da4 <__assert_fail@plt+0x17b98>
   28dd0:	ldr	r0, [pc, #-704]	; 28b18 <__assert_fail@plt+0x1790c>
   28dd4:	bl	10f24 <printf@plt>
   28dd8:	b	28da4 <__assert_fail@plt+0x17b98>
   28ddc:	cmp	r4, #0
   28de0:	bne	28d24 <__assert_fail@plt+0x17b18>
   28de4:	b	28c78 <__assert_fail@plt+0x17a6c>
   28de8:	add	r3, fp, r2
   28dec:	str	r2, [sp, #48]	; 0x30
   28df0:	mov	r0, fp
   28df4:	mov	r2, #0
   28df8:	add	r1, sp, #60	; 0x3c
   28dfc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   28e00:	ldr	r3, [sp, #60]	; 0x3c
   28e04:	ldr	r2, [sp, #48]	; 0x30
   28e08:	cmp	r3, r2
   28e0c:	mov	r6, r0
   28e10:	bne	28ea4 <__assert_fail@plt+0x17c98>
   28e14:	mov	r2, #5
   28e18:	ldr	r1, [pc, #-772]	; 28b1c <__assert_fail@plt+0x17910>
   28e1c:	mov	r0, #0
   28e20:	bl	10f90 <dcgettext@plt>
   28e24:	add	r1, r6, #129	; 0x81
   28e28:	lsl	r1, r1, #3
   28e2c:	bl	10f24 <printf@plt>
   28e30:	b	28250 <__assert_fail@plt+0x17044>
   28e34:	add	r3, r8, r1
   28e38:	mov	r5, r1
   28e3c:	mov	r0, r8
   28e40:	mov	r2, #0
   28e44:	add	r1, sp, #60	; 0x3c
   28e48:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   28e4c:	ldr	r3, [sp, #60]	; 0x3c
   28e50:	cmp	r3, r5
   28e54:	bne	28e90 <__assert_fail@plt+0x17c84>
   28e58:	add	r1, r0, #129	; 0x81
   28e5c:	ldr	r0, [pc, #-836]	; 28b20 <__assert_fail@plt+0x17914>
   28e60:	lsl	r1, r1, #2
   28e64:	bl	10f24 <printf@plt>
   28e68:	b	28108 <__assert_fail@plt+0x16efc>
   28e6c:	mov	r0, r6
   28e70:	bl	10f24 <printf@plt>
   28e74:	b	288bc <__assert_fail@plt+0x176b0>
   28e78:	mov	r2, #5
   28e7c:	ldr	r1, [pc, #-864]	; 28b24 <__assert_fail@plt+0x17918>
   28e80:	ldr	r0, [sp, #48]	; 0x30
   28e84:	bl	10f90 <dcgettext@plt>
   28e88:	bl	10f24 <printf@plt>
   28e8c:	b	28c30 <__assert_fail@plt+0x17a24>
   28e90:	ldr	r3, [pc, #-880]	; 28b28 <__assert_fail@plt+0x1791c>
   28e94:	ldr	r2, [pc, #-880]	; 28b2c <__assert_fail@plt+0x17920>
   28e98:	ldr	r1, [pc, #-868]	; 28b3c <__assert_fail@plt+0x17930>
   28e9c:	ldr	r0, [pc, #-880]	; 28b34 <__assert_fail@plt+0x17928>
   28ea0:	bl	1120c <__assert_fail@plt>
   28ea4:	ldr	r3, [pc, #-892]	; 28b30 <__assert_fail@plt+0x17924>
   28ea8:	ldr	r2, [pc, #-888]	; 28b38 <__assert_fail@plt+0x1792c>
   28eac:	ldr	r1, [pc, #-888]	; 28b3c <__assert_fail@plt+0x17930>
   28eb0:	ldr	r0, [pc, #-900]	; 28b34 <__assert_fail@plt+0x17928>
   28eb4:	bl	1120c <__assert_fail@plt>
   28eb8:	cmp	r0, #0
   28ebc:	beq	28f68 <__assert_fail@plt+0x17d5c>
   28ec0:	tst	r0, #1
   28ec4:	push	{r4, r5, r6, r7, r8, lr}
   28ec8:	and	r7, r0, #2
   28ecc:	and	r6, r0, #4
   28ed0:	and	r5, r0, #8
   28ed4:	and	r4, r0, #16
   28ed8:	bne	28f24 <__assert_fail@plt+0x17d18>
   28edc:	cmp	r7, #0
   28ee0:	beq	28f78 <__assert_fail@plt+0x17d6c>
   28ee4:	ldr	r1, [pc, #200]	; 28fb4 <__assert_fail@plt+0x17da8>
   28ee8:	ldr	r0, [pc, #200]	; 28fb8 <__assert_fail@plt+0x17dac>
   28eec:	bl	10f24 <printf@plt>
   28ef0:	cmp	r6, #0
   28ef4:	bne	28f58 <__assert_fail@plt+0x17d4c>
   28ef8:	cmp	r5, #0
   28efc:	beq	28f0c <__assert_fail@plt+0x17d00>
   28f00:	ldr	r1, [pc, #180]	; 28fbc <__assert_fail@plt+0x17db0>
   28f04:	ldr	r0, [pc, #180]	; 28fc0 <__assert_fail@plt+0x17db4>
   28f08:	bl	10f24 <printf@plt>
   28f0c:	cmp	r4, #0
   28f10:	popeq	{r4, r5, r6, r7, r8, pc}
   28f14:	ldr	r1, [pc, #160]	; 28fbc <__assert_fail@plt+0x17db0>
   28f18:	ldr	r0, [pc, #164]	; 28fc4 <__assert_fail@plt+0x17db8>
   28f1c:	pop	{r4, r5, r6, r7, r8, lr}
   28f20:	b	10f24 <printf@plt>
   28f24:	ldr	r3, [pc, #156]	; 28fc8 <__assert_fail@plt+0x17dbc>
   28f28:	mov	r2, #4
   28f2c:	mov	r1, #1
   28f30:	ldr	r3, [r3]
   28f34:	ldr	r0, [pc, #144]	; 28fcc <__assert_fail@plt+0x17dc0>
   28f38:	bl	10fcc <fwrite@plt>
   28f3c:	cmp	r7, #0
   28f40:	beq	28f98 <__assert_fail@plt+0x17d8c>
   28f44:	ldr	r1, [pc, #112]	; 28fbc <__assert_fail@plt+0x17db0>
   28f48:	ldr	r0, [pc, #104]	; 28fb8 <__assert_fail@plt+0x17dac>
   28f4c:	bl	10f24 <printf@plt>
   28f50:	cmp	r6, #0
   28f54:	beq	28ef8 <__assert_fail@plt+0x17cec>
   28f58:	ldr	r1, [pc, #92]	; 28fbc <__assert_fail@plt+0x17db0>
   28f5c:	ldr	r0, [pc, #108]	; 28fd0 <__assert_fail@plt+0x17dc4>
   28f60:	bl	10f24 <printf@plt>
   28f64:	b	28ef8 <__assert_fail@plt+0x17cec>
   28f68:	ldr	r3, [pc, #88]	; 28fc8 <__assert_fail@plt+0x17dbc>
   28f6c:	mov	r0, #48	; 0x30
   28f70:	ldr	r1, [r3]
   28f74:	b	11140 <fputc@plt>
   28f78:	cmp	r6, #0
   28f7c:	bne	28f90 <__assert_fail@plt+0x17d84>
   28f80:	cmp	r5, #0
   28f84:	beq	28fa4 <__assert_fail@plt+0x17d98>
   28f88:	ldr	r1, [pc, #36]	; 28fb4 <__assert_fail@plt+0x17da8>
   28f8c:	b	28f04 <__assert_fail@plt+0x17cf8>
   28f90:	ldr	r1, [pc, #28]	; 28fb4 <__assert_fail@plt+0x17da8>
   28f94:	b	28f5c <__assert_fail@plt+0x17d50>
   28f98:	cmp	r6, #0
   28f9c:	beq	28ef8 <__assert_fail@plt+0x17cec>
   28fa0:	b	28f58 <__assert_fail@plt+0x17d4c>
   28fa4:	cmp	r4, #0
   28fa8:	popeq	{r4, r5, r6, r7, r8, pc}
   28fac:	ldr	r1, [pc]	; 28fb4 <__assert_fail@plt+0x17da8>
   28fb0:	b	28f18 <__assert_fail@plt+0x17d0c>
   28fb4:	andeq	fp, r6, ip, ror #2
   28fb8:	andeq	r8, r6, r0, lsl r2
   28fbc:	andeq	r8, r6, r4, lsl #4
   28fc0:	andeq	r8, r6, r0, lsr #4
   28fc4:	andeq	r8, r6, r8, lsr #4
   28fc8:	andeq	sl, r9, ip, lsr #8
   28fcc:	andeq	r8, r6, r8, lsl #4
   28fd0:	andeq	r8, r6, r8, lsl r2
   28fd4:	ldrh	r3, [r0, #66]	; 0x42
   28fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28fdc:	mov	fp, r0
   28fe0:	cmp	r3, #40	; 0x28
   28fe4:	sub	sp, sp, #204	; 0xcc
   28fe8:	beq	28ff4 <__assert_fail@plt+0x17de8>
   28fec:	cmp	r3, #140	; 0x8c
   28ff0:	bne	29748 <__assert_fail@plt+0x1853c>
   28ff4:	ldr	r3, [fp, #104]	; 0x68
   28ff8:	cmp	r3, #0
   28ffc:	streq	r3, [sp, #68]	; 0x44
   29000:	beq	295fc <__assert_fail@plt+0x183f0>
   29004:	ldr	r3, [fp, #84]	; 0x54
   29008:	mov	r2, #0
   2900c:	cmp	r3, #0
   29010:	str	fp, [sp, #172]	; 0xac
   29014:	str	r2, [sp, #180]	; 0xb4
   29018:	str	r2, [sp, #176]	; 0xb0
   2901c:	str	r2, [sp, #184]	; 0xb8
   29020:	str	r2, [sp, #188]	; 0xbc
   29024:	str	r2, [sp, #192]	; 0xc0
   29028:	str	r2, [sp, #196]	; 0xc4
   2902c:	ldr	r4, [fp, #96]	; 0x60
   29030:	beq	295c0 <__assert_fail@plt+0x183b4>
   29034:	mov	sl, r2
   29038:	mov	r5, r2
   2903c:	mov	r2, #1
   29040:	ldr	r6, [pc, #1944]	; 297e0 <__assert_fail@plt+0x185d4>
   29044:	str	r2, [sp, #68]	; 0x44
   29048:	b	29064 <__assert_fail@plt+0x17e58>
   2904c:	cmp	r2, #1879048193	; 0x70000001
   29050:	moveq	sl, r4
   29054:	add	r5, r5, #1
   29058:	cmp	r3, r5
   2905c:	add	r4, r4, #72	; 0x48
   29060:	bls	29144 <__assert_fail@plt+0x17f38>
   29064:	ldr	r2, [r4, #4]
   29068:	cmp	r2, #2
   2906c:	bne	2904c <__assert_fail@plt+0x17e40>
   29070:	ldr	r2, [r4, #40]	; 0x28
   29074:	cmp	r2, r3
   29078:	bcs	29054 <__assert_fail@plt+0x17e48>
   2907c:	ldr	r3, [r6]
   29080:	add	r2, sp, #180	; 0xb4
   29084:	cmp	r3, #0
   29088:	mov	r1, r4
   2908c:	mov	r0, fp
   29090:	beq	29774 <__assert_fail@plt+0x18568>
   29094:	bl	1772c <__assert_fail@plt+0x6520>
   29098:	ldr	r7, [r4, #40]	; 0x28
   2909c:	ldr	r2, [sp, #192]	; 0xc0
   290a0:	ldr	r3, [fp, #96]	; 0x60
   290a4:	add	r7, r7, r7, lsl #3
   290a8:	cmp	r2, #0
   290ac:	str	r0, [sp, #176]	; 0xb0
   290b0:	add	r7, r3, r7, lsl #3
   290b4:	beq	290dc <__assert_fail@plt+0x17ed0>
   290b8:	mov	r2, #5
   290bc:	ldr	r1, [pc, #1824]	; 297e4 <__assert_fail@plt+0x185d8>
   290c0:	mov	r0, #0
   290c4:	bl	10f90 <dcgettext@plt>
   290c8:	bl	548ac <error@@Base>
   290cc:	ldr	r0, [sp, #192]	; 0xc0
   290d0:	bl	10f54 <free@plt>
   290d4:	mov	r3, #0
   290d8:	str	r3, [sp, #68]	; 0x44
   290dc:	ldr	r3, [r7, #24]
   290e0:	mov	r2, #5
   290e4:	ldr	r1, [pc, #1788]	; 297e8 <__assert_fail@plt+0x185dc>
   290e8:	mov	r0, #0
   290ec:	ldrd	r8, [r7, #32]
   290f0:	str	r3, [sp, #36]	; 0x24
   290f4:	bl	10f90 <dcgettext@plt>
   290f8:	strd	r8, [sp, #8]
   290fc:	mov	r8, #1
   29100:	mov	r9, #0
   29104:	ldr	r3, [sp, #36]	; 0x24
   29108:	strd	r8, [sp]
   2910c:	add	r2, fp, #8
   29110:	add	r1, fp, #4
   29114:	add	r5, r5, #1
   29118:	add	r4, r4, #72	; 0x48
   2911c:	str	r0, [sp, #16]
   29120:	mov	r0, #0
   29124:	bl	1717c <__assert_fail@plt+0x5f70>
   29128:	ldr	r3, [fp, #84]	; 0x54
   2912c:	cmp	r0, #0
   29130:	str	r0, [sp, #192]	; 0xc0
   29134:	ldrne	r0, [r7, #32]
   29138:	cmp	r3, r5
   2913c:	str	r0, [sp, #196]	; 0xc4
   29140:	bhi	29064 <__assert_fail@plt+0x17e58>
   29144:	cmp	sl, #0
   29148:	beq	295c8 <__assert_fail@plt+0x183bc>
   2914c:	cmp	r3, #0
   29150:	ldr	sl, [fp, #96]	; 0x60
   29154:	beq	295dc <__assert_fail@plt+0x183d0>
   29158:	mov	r2, #0
   2915c:	str	r2, [sp, #40]	; 0x28
   29160:	b	2917c <__assert_fail@plt+0x17f70>
   29164:	ldr	r2, [sp, #40]	; 0x28
   29168:	add	sl, sl, #72	; 0x48
   2916c:	add	r2, r2, #1
   29170:	cmp	r2, r3
   29174:	str	r2, [sp, #40]	; 0x28
   29178:	bcs	295dc <__assert_fail@plt+0x183d0>
   2917c:	ldr	r2, [sl, #4]
   29180:	cmp	r2, #1879048193	; 0x70000001
   29184:	bne	29164 <__assert_fail@plt+0x17f58>
   29188:	ldr	r3, [pc, #1628]	; 297ec <__assert_fail@plt+0x185e0>
   2918c:	mov	r4, #0
   29190:	ldrd	r0, [sl, #32]
   29194:	ldr	r2, [r3]
   29198:	mov	r3, r4
   2919c:	add	r7, fp, #104	; 0x68
   291a0:	lsl	r2, r2, #1
   291a4:	bl	58c00 <warn@@Base+0x3e30>
   291a8:	mov	r2, #5
   291ac:	add	ip, fp, #108	; 0x6c
   291b0:	str	r2, [sp]
   291b4:	ldr	r1, [pc, #1588]	; 297f0 <__assert_fail@plt+0x185e4>
   291b8:	ldr	r2, [pc, #1588]	; 297f4 <__assert_fail@plt+0x185e8>
   291bc:	mov	r8, ip
   291c0:	str	ip, [sp, #76]	; 0x4c
   291c4:	str	r7, [sp, #72]	; 0x48
   291c8:	mov	r3, r0
   291cc:	mov	r6, r0
   291d0:	mov	r0, r4
   291d4:	bl	11200 <dcngettext@plt>
   291d8:	mov	r1, r8
   291dc:	mov	r2, sl
   291e0:	mov	r5, r0
   291e4:	mov	r0, r7
   291e8:	bl	16c64 <__assert_fail@plt+0x5a58>
   291ec:	mov	r3, r6
   291f0:	ldr	r2, [sl, #24]
   291f4:	mov	r1, r0
   291f8:	mov	r0, r5
   291fc:	bl	10f24 <printf@plt>
   29200:	str	r4, [sp, #124]	; 0x7c
   29204:	str	r4, [sp, #148]	; 0x94
   29208:	str	r4, [sp, #128]	; 0x80
   2920c:	str	r4, [sp, #132]	; 0x84
   29210:	str	r4, [sp, #136]	; 0x88
   29214:	str	r4, [sp, #140]	; 0x8c
   29218:	str	r4, [sp, #144]	; 0x90
   2921c:	str	r4, [sp, #152]	; 0x98
   29220:	str	r4, [sp, #156]	; 0x9c
   29224:	str	r4, [sp, #160]	; 0xa0
   29228:	str	r4, [sp, #164]	; 0xa4
   2922c:	str	r4, [sp, #168]	; 0xa8
   29230:	ldr	r3, [sl, #32]
   29234:	ldr	r0, [sp, #180]	; 0xb4
   29238:	ldr	r2, [sl, #36]	; 0x24
   2923c:	lsr	r3, r3, #3
   29240:	lsl	r0, r0, #5
   29244:	orr	r3, r3, r2, lsl #29
   29248:	str	r3, [sp, #44]	; 0x2c
   2924c:	bl	5861c <warn@@Base+0x384c>
   29250:	ldr	r5, [sp, #180]	; 0xb4
   29254:	cmp	r5, r4
   29258:	mov	r7, r0
   2925c:	str	r0, [sp, #184]	; 0xb8
   29260:	beq	292bc <__assert_fail@plt+0x180b0>
   29264:	ldr	ip, [sp, #176]	; 0xb0
   29268:	add	r5, ip, r5, lsl #5
   2926c:	add	r6, r5, #20
   29270:	add	ip, ip, #20
   29274:	mov	r5, r4
   29278:	ldrd	r2, [ip, #-20]	; 0xffffffec
   2927c:	orrs	r3, r2, r3
   29280:	beq	292b0 <__assert_fail@plt+0x180a4>
   29284:	ldrb	r3, [ip]
   29288:	and	r3, r3, #15
   2928c:	cmp	r3, #2
   29290:	bne	292b0 <__assert_fail@plt+0x180a4>
   29294:	sub	r4, ip, #20
   29298:	add	lr, r7, r5, lsl #5
   2929c:	ldm	r4!, {r0, r1, r2, r3}
   292a0:	add	r5, r5, #1
   292a4:	stmia	lr!, {r0, r1, r2, r3}
   292a8:	ldm	r4, {r0, r1, r2, r3}
   292ac:	stm	lr, {r0, r1, r2, r3}
   292b0:	add	ip, ip, #32
   292b4:	cmp	ip, r6
   292b8:	bne	29278 <__assert_fail@plt+0x1806c>
   292bc:	ldr	r3, [pc, #1332]	; 297f8 <__assert_fail@plt+0x185ec>
   292c0:	mov	r0, r7
   292c4:	mov	r1, r5
   292c8:	mov	r2, #32
   292cc:	str	r5, [sp, #188]	; 0xbc
   292d0:	bl	11170 <qsort@plt>
   292d4:	ldr	r3, [sp, #44]	; 0x2c
   292d8:	cmp	r3, #0
   292dc:	beq	297b0 <__assert_fail@plt+0x185a4>
   292e0:	mov	r3, #1
   292e4:	ldr	r9, [pc, #1296]	; 297fc <__assert_fail@plt+0x185f0>
   292e8:	str	r3, [sp, #36]	; 0x24
   292ec:	mov	r7, #0
   292f0:	b	293fc <__assert_fail@plt+0x181f0>
   292f4:	ldr	r1, [r9]
   292f8:	mov	r0, #64	; 0x40
   292fc:	bl	11140 <fputc@plt>
   29300:	ldr	r3, [sl, #16]
   29304:	ldr	r2, [sl, #20]
   29308:	adds	r3, r3, #4
   2930c:	ldr	r1, [sp, #84]	; 0x54
   29310:	adc	r2, r2, #0
   29314:	adds	r4, r3, r4
   29318:	bic	r0, r1, #-2147483648	; 0x80000000
   2931c:	adc	r8, r2, r8
   29320:	tst	r1, #1073741824	; 0x40000000
   29324:	ldrh	r1, [fp, #66]	; 0x42
   29328:	mov	r3, r0
   2932c:	mov	r2, #0
   29330:	orrne	r3, r0, #-2147483648	; 0x80000000
   29334:	mvnne	r2, #0
   29338:	cmp	r1, #140	; 0x8c
   2933c:	bne	29348 <__assert_fail@plt+0x1813c>
   29340:	adds	r3, r3, r3
   29344:	adc	r2, r2, r2
   29348:	adds	r3, r4, r3
   2934c:	str	r3, [sp, #24]
   29350:	adc	r3, r8, r2
   29354:	str	r3, [sp, #28]
   29358:	mov	r2, #4
   2935c:	ldrd	r0, [sp, #24]
   29360:	bl	14244 <__assert_fail@plt+0x3038>
   29364:	mov	r0, #10
   29368:	bl	110c8 <putchar@plt>
   2936c:	ldrh	r2, [sp, #104]	; 0x68
   29370:	ldr	lr, [fp, #84]	; 0x54
   29374:	ldr	r3, [fp, #96]	; 0x60
   29378:	cmp	r2, #0
   2937c:	beq	29608 <__assert_fail@plt+0x183fc>
   29380:	cmp	r2, lr
   29384:	bcs	29608 <__assert_fail@plt+0x183fc>
   29388:	add	r2, r2, r2, lsl #3
   2938c:	ldrd	r0, [sp, #112]	; 0x70
   29390:	add	r4, r3, r2, lsl #3
   29394:	ldrd	r2, [r4, #32]
   29398:	strd	r0, [sp, #48]	; 0x30
   2939c:	cmp	r1, r3
   293a0:	cmpeq	r0, r2
   293a4:	bhi	2977c <__assert_fail@plt+0x18570>
   293a8:	cmp	r0, #0
   293ac:	sbcs	r3, r1, #0
   293b0:	blt	2977c <__assert_fail@plt+0x18570>
   293b4:	ldrd	r0, [sp, #48]	; 0x30
   293b8:	mov	r3, #0
   293bc:	add	r2, sp, #148	; 0x94
   293c0:	strd	r0, [sp]
   293c4:	str	r2, [sp, #12]
   293c8:	str	r4, [sp, #8]
   293cc:	mov	r2, r3
   293d0:	add	r1, sp, #172	; 0xac
   293d4:	mov	r0, fp
   293d8:	bl	27a4c <__assert_fail@plt+0x16840>
   293dc:	ldr	r3, [sp, #36]	; 0x24
   293e0:	cmp	r0, #0
   293e4:	moveq	r3, #0
   293e8:	str	r3, [sp, #36]	; 0x24
   293ec:	ldr	r3, [sp, #44]	; 0x2c
   293f0:	add	r7, r7, #1
   293f4:	cmp	r3, r7
   293f8:	beq	29580 <__assert_fail@plt+0x18374>
   293fc:	ldr	r1, [r9]
   29400:	mov	r0, #10
   29404:	bl	11140 <fputc@plt>
   29408:	add	r3, sp, #96	; 0x60
   2940c:	str	r3, [sp, #16]
   29410:	add	r3, sp, #88	; 0x58
   29414:	mov	r8, #0
   29418:	lsl	r5, r7, #3
   2941c:	str	r3, [sp, #12]
   29420:	add	r3, sp, #80	; 0x50
   29424:	str	r3, [sp, #8]
   29428:	str	r5, [sp]
   2942c:	str	r8, [sp, #4]
   29430:	str	r8, [sp, #20]
   29434:	mov	r3, sl
   29438:	add	r2, sp, #124	; 0x7c
   2943c:	add	r1, sp, #172	; 0xac
   29440:	mov	r0, fp
   29444:	bl	24790 <__assert_fail@plt+0x13584>
   29448:	mov	r4, r5
   2944c:	cmp	r0, r8
   29450:	beq	29718 <__assert_fail@plt+0x1850c>
   29454:	add	r1, sp, #104	; 0x68
   29458:	add	r2, sp, #112	; 0x70
   2945c:	add	r3, sp, #84	; 0x54
   29460:	add	r5, r5, #4
   29464:	str	r1, [sp, #12]
   29468:	str	r2, [sp, #16]
   2946c:	str	r3, [sp, #8]
   29470:	str	r5, [sp]
   29474:	str	r8, [sp, #20]
   29478:	str	r8, [sp, #4]
   2947c:	mov	r3, sl
   29480:	add	r2, sp, #124	; 0x7c
   29484:	add	r1, sp, #172	; 0xac
   29488:	mov	r0, fp
   2948c:	bl	24790 <__assert_fail@plt+0x13584>
   29490:	cmp	r0, #0
   29494:	beq	29718 <__assert_fail@plt+0x1850c>
   29498:	ldr	r1, [sp, #80]	; 0x50
   2949c:	cmp	r1, #0
   294a0:	blt	296a4 <__assert_fail@plt+0x18498>
   294a4:	ldrd	r2, [sl, #16]
   294a8:	bic	r0, r1, #-2147483648	; 0x80000000
   294ac:	mov	ip, r0
   294b0:	adds	r2, r4, r2
   294b4:	adc	r3, r8, r3
   294b8:	tst	r1, #1073741824	; 0x40000000
   294bc:	ldrh	r1, [fp, #66]	; 0x42
   294c0:	mov	lr, #0
   294c4:	orrne	ip, r0, #-2147483648	; 0x80000000
   294c8:	mvnne	lr, #0
   294cc:	cmp	r1, #140	; 0x8c
   294d0:	bne	294dc <__assert_fail@plt+0x182d0>
   294d4:	adds	ip, ip, ip
   294d8:	adc	lr, lr, lr
   294dc:	adds	r2, r2, ip
   294e0:	ldrd	r0, [sp, #96]	; 0x60
   294e4:	ldrh	ip, [sp, #88]	; 0x58
   294e8:	adc	r3, r3, lr
   294ec:	strd	r0, [sp, #8]
   294f0:	str	ip, [sp]
   294f4:	add	r1, sp, #172	; 0xac
   294f8:	mov	r0, fp
   294fc:	bl	27974 <__assert_fail@plt+0x16768>
   29500:	ldr	r3, [r9]
   29504:	mov	r2, #2
   29508:	mov	r1, #1
   2950c:	ldr	r0, [pc, #748]	; 29800 <__assert_fail@plt+0x185f4>
   29510:	bl	10fcc <fwrite@plt>
   29514:	ldr	r5, [sp, #84]	; 0x54
   29518:	cmp	r5, #1
   2951c:	beq	296f0 <__assert_fail@plt+0x184e4>
   29520:	cmp	r5, #0
   29524:	bge	292f4 <__assert_fail@plt+0x180e8>
   29528:	mov	r4, #0
   2952c:	mov	r2, #4
   29530:	mov	r1, r4
   29534:	mov	r0, r5
   29538:	bl	14244 <__assert_fail@plt+0x3038>
   2953c:	ldr	r1, [r9]
   29540:	mov	r0, #10
   29544:	bl	11140 <fputc@plt>
   29548:	mov	r2, #0
   2954c:	mov	r3, #0
   29550:	str	r4, [sp, #12]
   29554:	strd	r2, [sp]
   29558:	str	r4, [sp, #8]
   2955c:	mov	r3, #4
   29560:	ldr	r2, [sp, #84]	; 0x54
   29564:	add	r1, sp, #172	; 0xac
   29568:	mov	r0, fp
   2956c:	bl	27a4c <__assert_fail@plt+0x16840>
   29570:	ldr	r3, [sp, #44]	; 0x2c
   29574:	add	r7, r7, #1
   29578:	cmp	r3, r7
   2957c:	bne	293fc <__assert_fail@plt+0x181f0>
   29580:	mov	r0, #10
   29584:	bl	110c8 <putchar@plt>
   29588:	ldr	r0, [sp, #184]	; 0xb8
   2958c:	bl	10f54 <free@plt>
   29590:	add	r1, sp, #132	; 0x84
   29594:	ldr	r0, [sp, #124]	; 0x7c
   29598:	bl	16fb0 <__assert_fail@plt+0x5da4>
   2959c:	add	r1, sp, #156	; 0x9c
   295a0:	ldr	r0, [sp, #148]	; 0x94
   295a4:	bl	16fb0 <__assert_fail@plt+0x5da4>
   295a8:	ldr	r3, [sp, #36]	; 0x24
   295ac:	cmp	r3, #0
   295b0:	ldr	r3, [fp, #84]	; 0x54
   295b4:	ldreq	r2, [sp, #36]	; 0x24
   295b8:	streq	r2, [sp, #68]	; 0x44
   295bc:	b	29164 <__assert_fail@plt+0x17f58>
   295c0:	mov	r3, #1
   295c4:	str	r3, [sp, #68]	; 0x44
   295c8:	mov	r2, #5
   295cc:	ldr	r1, [pc, #560]	; 29804 <__assert_fail@plt+0x185f8>
   295d0:	mov	r0, #0
   295d4:	bl	10f90 <dcgettext@plt>
   295d8:	bl	10f24 <printf@plt>
   295dc:	ldr	r0, [sp, #176]	; 0xb0
   295e0:	cmp	r0, #0
   295e4:	beq	295ec <__assert_fail@plt+0x183e0>
   295e8:	bl	10f54 <free@plt>
   295ec:	ldr	r0, [sp, #192]	; 0xc0
   295f0:	cmp	r0, #0
   295f4:	beq	295fc <__assert_fail@plt+0x183f0>
   295f8:	bl	10f54 <free@plt>
   295fc:	ldr	r0, [sp, #68]	; 0x44
   29600:	add	sp, sp, #204	; 0xcc
   29604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29608:	cmp	r3, #0
   2960c:	beq	29680 <__assert_fail@plt+0x18474>
   29610:	cmp	lr, #0
   29614:	beq	29680 <__assert_fail@plt+0x18474>
   29618:	str	sl, [sp, #64]	; 0x40
   2961c:	mov	r8, r7
   29620:	mov	r5, fp
   29624:	ldrd	r6, [sp, #56]	; 0x38
   29628:	ldrd	sl, [sp, #24]
   2962c:	mov	r2, #0
   29630:	ldrd	r0, [r3, #16]
   29634:	add	r2, r2, #1
   29638:	mov	r4, r3
   2963c:	cmp	fp, r1
   29640:	cmpeq	sl, r0
   29644:	bcc	29664 <__assert_fail@plt+0x18458>
   29648:	ldr	ip, [r3, #32]
   2964c:	adds	r6, r0, ip
   29650:	ldr	ip, [r3, #36]	; 0x24
   29654:	adc	r7, r1, ip
   29658:	cmp	fp, r7
   2965c:	cmpeq	sl, r6
   29660:	bcc	296c8 <__assert_fail@plt+0x184bc>
   29664:	cmp	r2, lr
   29668:	add	r3, r3, #72	; 0x48
   2966c:	bne	29630 <__assert_fail@plt+0x18424>
   29670:	ldr	sl, [sp, #64]	; 0x40
   29674:	strd	r6, [sp, #56]	; 0x38
   29678:	mov	fp, r5
   2967c:	mov	r7, r8
   29680:	ldr	r1, [pc, #384]	; 29808 <__assert_fail@plt+0x185fc>
   29684:	mov	r2, #5
   29688:	mov	r0, #0
   2968c:	bl	10f90 <dcgettext@plt>
   29690:	ldr	r1, [sp, #24]
   29694:	bl	54dd0 <warn@@Base>
   29698:	mov	r3, #0
   2969c:	str	r3, [sp, #36]	; 0x24
   296a0:	b	293ec <__assert_fail@plt+0x181e0>
   296a4:	mov	r2, #5
   296a8:	ldr	r1, [pc, #348]	; 2980c <__assert_fail@plt+0x18600>
   296ac:	mov	r0, r8
   296b0:	bl	10f90 <dcgettext@plt>
   296b4:	ldr	r1, [sp, #80]	; 0x50
   296b8:	bl	54dd0 <warn@@Base>
   296bc:	ldr	r1, [sp, #80]	; 0x50
   296c0:	str	r8, [sp, #36]	; 0x24
   296c4:	b	294a4 <__assert_fail@plt+0x18298>
   296c8:	ldrd	r2, [sp, #24]
   296cc:	strd	r6, [sp, #56]	; 0x38
   296d0:	ldr	sl, [sp, #64]	; 0x40
   296d4:	subs	ip, r2, r0
   296d8:	sbc	r3, r3, r1
   296dc:	mov	fp, r5
   296e0:	mov	r7, r8
   296e4:	str	ip, [sp, #48]	; 0x30
   296e8:	str	r3, [sp, #52]	; 0x34
   296ec:	b	293b4 <__assert_fail@plt+0x181a8>
   296f0:	mov	r2, #4
   296f4:	mov	r1, #0
   296f8:	mov	r0, #1
   296fc:	bl	14244 <__assert_fail@plt+0x3038>
   29700:	mov	r1, r5
   29704:	ldr	r3, [r9]
   29708:	mov	r2, #14
   2970c:	ldr	r0, [pc, #252]	; 29810 <__assert_fail@plt+0x18604>
   29710:	bl	10fcc <fwrite@plt>
   29714:	b	293ec <__assert_fail@plt+0x181e0>
   29718:	ldr	r0, [sp, #184]	; 0xb8
   2971c:	bl	10f54 <free@plt>
   29720:	add	r1, sp, #132	; 0x84
   29724:	ldr	r0, [sp, #124]	; 0x7c
   29728:	bl	16fb0 <__assert_fail@plt+0x5da4>
   2972c:	add	r1, sp, #156	; 0x9c
   29730:	ldr	r0, [sp, #148]	; 0x94
   29734:	bl	16fb0 <__assert_fail@plt+0x5da4>
   29738:	mov	r3, #0
   2973c:	str	r3, [sp, #68]	; 0x44
   29740:	ldr	r3, [fp, #84]	; 0x54
   29744:	b	29164 <__assert_fail@plt+0x17f58>
   29748:	mov	r2, #5
   2974c:	ldr	r1, [pc, #192]	; 29814 <__assert_fail@plt+0x18608>
   29750:	mov	r0, #0
   29754:	bl	10f90 <dcgettext@plt>
   29758:	ldrh	r1, [fp, #66]	; 0x42
   2975c:	bl	548ac <error@@Base>
   29760:	mov	r3, #0
   29764:	str	r3, [sp, #68]	; 0x44
   29768:	ldr	r0, [sp, #68]	; 0x44
   2976c:	add	sp, sp, #204	; 0xcc
   29770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29774:	bl	17bf4 <__assert_fail@plt+0x69e8>
   29778:	b	29098 <__assert_fail@plt+0x17e8c>
   2977c:	mov	r2, #5
   29780:	ldr	r1, [pc, #144]	; 29818 <__assert_fail@plt+0x1860c>
   29784:	mov	r0, #0
   29788:	bl	10f90 <dcgettext@plt>
   2978c:	mov	r2, r4
   29790:	mov	r5, r0
   29794:	ldrd	r0, [sp, #72]	; 0x48
   29798:	bl	16c64 <__assert_fail@plt+0x5a58>
   2979c:	ldr	r1, [sp, #48]	; 0x30
   297a0:	mov	r2, r0
   297a4:	mov	r0, r5
   297a8:	bl	54dd0 <warn@@Base>
   297ac:	b	29698 <__assert_fail@plt+0x1848c>
   297b0:	mov	r0, #10
   297b4:	bl	110c8 <putchar@plt>
   297b8:	ldr	r0, [sp, #184]	; 0xb8
   297bc:	bl	10f54 <free@plt>
   297c0:	add	r1, sp, #132	; 0x84
   297c4:	ldr	r0, [sp, #124]	; 0x7c
   297c8:	bl	16fb0 <__assert_fail@plt+0x5da4>
   297cc:	add	r1, sp, #156	; 0x9c
   297d0:	ldr	r0, [sp, #148]	; 0x94
   297d4:	bl	16fb0 <__assert_fail@plt+0x5da4>
   297d8:	ldr	r3, [fp, #84]	; 0x54
   297dc:	b	29164 <__assert_fail@plt+0x17f58>
   297e0:	andeq	sl, r9, r8, lsr r4
   297e4:	andeq	r8, r6, ip, ror r2
   297e8:	andeq	r5, r6, r8, lsr #14
   297ec:	andeq	lr, r9, ip, lsr #26
   297f0:	andeq	r7, r6, r4, asr #23
   297f4:	andeq	r7, r6, r8, lsl #23
   297f8:	andeq	r2, r1, r4, lsl #24
   297fc:	andeq	sl, r9, ip, lsr #8
   29800:	andeq	fp, r6, r8, lsr #5
   29804:	andeq	r6, r6, r4, lsl r8
   29808:	andeq	r8, r6, r4, lsl r3
   2980c:	andeq	r8, r6, r4, lsr #5
   29810:	andeq	r8, r6, r4, asr #5
   29814:	andeq	r8, r6, r0, lsr r2
   29818:	ldrdeq	r8, [r6], -r4
   2981c:	cmp	r1, #4
   29820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29824:	mov	r3, r2
   29828:	sub	sp, sp, #52	; 0x34
   2982c:	mov	r9, r0
   29830:	beq	29968 <__assert_fail@plt+0x1875c>
   29834:	cmp	r1, #8
   29838:	mov	ip, r1
   2983c:	beq	2985c <__assert_fail@plt+0x18650>
   29840:	mov	r1, r0
   29844:	mov	r0, ip
   29848:	bl	15008 <__assert_fail@plt+0x3dfc>
   2984c:	mov	r9, r0
   29850:	mov	r0, r9
   29854:	add	sp, sp, #52	; 0x34
   29858:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2985c:	mov	r2, #0
   29860:	add	r1, sp, #44	; 0x2c
   29864:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   29868:	ldr	r3, [sp, #44]	; 0x2c
   2986c:	add	r9, r9, r3
   29870:	mov	r4, r0
   29874:	ldr	r0, [pc, #1968]	; 2a02c <__assert_fail@plt+0x18e20>
   29878:	bl	10f24 <printf@plt>
   2987c:	cmp	r4, #0
   29880:	beq	29ad4 <__assert_fail@plt+0x188c8>
   29884:	and	r3, r4, #2
   29888:	str	r3, [sp, #4]
   2988c:	and	r3, r4, #4
   29890:	str	r3, [sp, #12]
   29894:	and	r3, r4, #8
   29898:	tst	r4, #1
   2989c:	str	r3, [sp, #8]
   298a0:	and	r3, r4, #16
   298a4:	and	sl, r4, #32
   298a8:	and	fp, r4, #64	; 0x40
   298ac:	and	r7, r4, #128	; 0x80
   298b0:	and	r6, r4, #4096	; 0x1000
   298b4:	and	r5, r4, #8192	; 0x2000
   298b8:	str	r3, [sp, #16]
   298bc:	and	r4, r4, #65536	; 0x10000
   298c0:	bne	29c24 <__assert_fail@plt+0x18a18>
   298c4:	ldr	r3, [sp, #4]
   298c8:	cmp	r3, #0
   298cc:	bne	29afc <__assert_fail@plt+0x188f0>
   298d0:	ldr	r3, [sp, #12]
   298d4:	cmp	r3, #0
   298d8:	beq	29e74 <__assert_fail@plt+0x18c68>
   298dc:	ldr	r1, [pc, #1868]	; 2a030 <__assert_fail@plt+0x18e24>
   298e0:	ldr	r8, [pc, #1868]	; 2a034 <__assert_fail@plt+0x18e28>
   298e4:	ldr	r0, [pc, #1868]	; 2a038 <__assert_fail@plt+0x18e2c>
   298e8:	bl	10f24 <printf@plt>
   298ec:	ldr	r3, [sp, #8]
   298f0:	cmp	r3, #0
   298f4:	bne	29c60 <__assert_fail@plt+0x18a54>
   298f8:	ldr	r3, [sp, #16]
   298fc:	cmp	r3, #0
   29900:	beq	29e94 <__assert_fail@plt+0x18c88>
   29904:	ldr	r1, [pc, #1840]	; 2a03c <__assert_fail@plt+0x18e30>
   29908:	ldr	r0, [pc, #1840]	; 2a040 <__assert_fail@plt+0x18e34>
   2990c:	bl	10f24 <printf@plt>
   29910:	cmp	sl, #0
   29914:	bne	29b38 <__assert_fail@plt+0x1892c>
   29918:	cmp	fp, #0
   2991c:	bne	29c84 <__assert_fail@plt+0x18a78>
   29920:	cmp	r7, #0
   29924:	bne	29c98 <__assert_fail@plt+0x18a8c>
   29928:	cmp	r6, #0
   2992c:	beq	29b5c <__assert_fail@plt+0x18950>
   29930:	ldr	r1, [pc, #1796]	; 2a03c <__assert_fail@plt+0x18e30>
   29934:	ldr	r0, [pc, #1800]	; 2a044 <__assert_fail@plt+0x18e38>
   29938:	bl	10f24 <printf@plt>
   2993c:	cmp	r5, #0
   29940:	beq	29950 <__assert_fail@plt+0x18744>
   29944:	ldr	r1, [pc, #1776]	; 2a03c <__assert_fail@plt+0x18e30>
   29948:	ldr	r0, [pc, #1784]	; 2a048 <__assert_fail@plt+0x18e3c>
   2994c:	bl	10f24 <printf@plt>
   29950:	cmp	r4, #0
   29954:	beq	29ae4 <__assert_fail@plt+0x188d8>
   29958:	ldr	r1, [pc, #1756]	; 2a03c <__assert_fail@plt+0x18e30>
   2995c:	ldr	r0, [pc, #1768]	; 2a04c <__assert_fail@plt+0x18e40>
   29960:	bl	10f24 <printf@plt>
   29964:	b	29ae4 <__assert_fail@plt+0x188d8>
   29968:	mov	r2, #0
   2996c:	add	r1, sp, #44	; 0x2c
   29970:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   29974:	ldr	r2, [sp, #44]	; 0x2c
   29978:	add	r9, r9, r2
   2997c:	mov	r8, r0
   29980:	ldr	r0, [pc, #1736]	; 2a050 <__assert_fail@plt+0x18e44>
   29984:	bl	10f24 <printf@plt>
   29988:	cmp	r8, #0
   2998c:	beq	29ad4 <__assert_fail@plt+0x188c8>
   29990:	and	r2, r8, #4
   29994:	str	r2, [sp, #28]
   29998:	and	r2, r8, #8
   2999c:	str	r2, [sp, #24]
   299a0:	and	r2, r8, #16
   299a4:	str	r2, [sp, #32]
   299a8:	and	r2, r8, #32
   299ac:	str	r2, [sp, #20]
   299b0:	and	r2, r8, #64	; 0x40
   299b4:	str	r2, [sp, #12]
   299b8:	and	r2, r8, #128	; 0x80
   299bc:	str	r2, [sp, #8]
   299c0:	and	r2, r8, #256	; 0x100
   299c4:	and	r3, r8, #2
   299c8:	str	r2, [sp, #4]
   299cc:	tst	r8, #1
   299d0:	and	r2, r8, #65536	; 0x10000
   299d4:	str	r3, [sp, #36]	; 0x24
   299d8:	and	r7, r8, #1024	; 0x400
   299dc:	and	fp, r8, #2048	; 0x800
   299e0:	and	sl, r8, #4096	; 0x1000
   299e4:	and	r6, r8, #8192	; 0x2000
   299e8:	and	r5, r8, #16384	; 0x4000
   299ec:	and	r4, r8, #32768	; 0x8000
   299f0:	str	r2, [sp, #16]
   299f4:	bne	29db0 <__assert_fail@plt+0x18ba4>
   299f8:	cmp	r3, #0
   299fc:	bne	29b68 <__assert_fail@plt+0x1895c>
   29a00:	ldr	r3, [sp, #28]
   29a04:	cmp	r3, #0
   29a08:	beq	29eb0 <__assert_fail@plt+0x18ca4>
   29a0c:	ldr	r1, [pc, #1564]	; 2a030 <__assert_fail@plt+0x18e24>
   29a10:	ldr	r8, [pc, #1564]	; 2a034 <__assert_fail@plt+0x18e28>
   29a14:	ldr	r0, [pc, #1592]	; 2a054 <__assert_fail@plt+0x18e48>
   29a18:	bl	10f24 <printf@plt>
   29a1c:	ldr	r3, [sp, #24]
   29a20:	cmp	r3, #0
   29a24:	bne	29cb8 <__assert_fail@plt+0x18aac>
   29a28:	ldr	r3, [sp, #32]
   29a2c:	cmp	r3, #0
   29a30:	bne	29cd0 <__assert_fail@plt+0x18ac4>
   29a34:	ldr	r3, [sp, #20]
   29a38:	cmp	r3, #0
   29a3c:	bne	29ba8 <__assert_fail@plt+0x1899c>
   29a40:	ldr	r3, [sp, #12]
   29a44:	cmp	r3, #0
   29a48:	beq	29d60 <__assert_fail@plt+0x18b54>
   29a4c:	ldr	r1, [pc, #1512]	; 2a03c <__assert_fail@plt+0x18e30>
   29a50:	ldr	r0, [pc, #1536]	; 2a058 <__assert_fail@plt+0x18e4c>
   29a54:	bl	10f24 <printf@plt>
   29a58:	ldr	r3, [sp, #8]
   29a5c:	cmp	r3, #0
   29a60:	bne	29d04 <__assert_fail@plt+0x18af8>
   29a64:	ldr	r3, [sp, #4]
   29a68:	cmp	r3, #0
   29a6c:	bne	29d78 <__assert_fail@plt+0x18b6c>
   29a70:	cmp	r7, #0
   29a74:	bne	29be0 <__assert_fail@plt+0x189d4>
   29a78:	cmp	fp, #0
   29a7c:	beq	29d2c <__assert_fail@plt+0x18b20>
   29a80:	ldr	r1, [pc, #1460]	; 2a03c <__assert_fail@plt+0x18e30>
   29a84:	ldr	r0, [pc, #1488]	; 2a05c <__assert_fail@plt+0x18e50>
   29a88:	bl	10f24 <printf@plt>
   29a8c:	cmp	sl, #0
   29a90:	bne	29d34 <__assert_fail@plt+0x18b28>
   29a94:	cmp	r6, #0
   29a98:	bne	29d48 <__assert_fail@plt+0x18b3c>
   29a9c:	cmp	r5, #0
   29aa0:	bne	29c0c <__assert_fail@plt+0x18a00>
   29aa4:	cmp	r4, #0
   29aa8:	beq	29ab8 <__assert_fail@plt+0x188ac>
   29aac:	ldr	r1, [pc, #1416]	; 2a03c <__assert_fail@plt+0x18e30>
   29ab0:	ldr	r0, [pc, #1448]	; 2a060 <__assert_fail@plt+0x18e54>
   29ab4:	bl	10f24 <printf@plt>
   29ab8:	ldr	r3, [sp, #16]
   29abc:	cmp	r3, #0
   29ac0:	beq	29ae4 <__assert_fail@plt+0x188d8>
   29ac4:	ldr	r1, [pc, #1392]	; 2a03c <__assert_fail@plt+0x18e30>
   29ac8:	ldr	r0, [pc, #1428]	; 2a064 <__assert_fail@plt+0x18e58>
   29acc:	bl	10f24 <printf@plt>
   29ad0:	b	29ae4 <__assert_fail@plt+0x188d8>
   29ad4:	ldr	r8, [pc, #1368]	; 2a034 <__assert_fail@plt+0x18e28>
   29ad8:	mov	r0, #48	; 0x30
   29adc:	ldr	r1, [r8]
   29ae0:	bl	11140 <fputc@plt>
   29ae4:	ldr	r1, [r8]
   29ae8:	mov	r0, #10
   29aec:	bl	11140 <fputc@plt>
   29af0:	mov	r0, r9
   29af4:	add	sp, sp, #52	; 0x34
   29af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29afc:	ldr	r1, [pc, #1324]	; 2a030 <__assert_fail@plt+0x18e24>
   29b00:	ldr	r8, [pc, #1324]	; 2a034 <__assert_fail@plt+0x18e28>
   29b04:	ldr	r0, [pc, #1372]	; 2a068 <__assert_fail@plt+0x18e5c>
   29b08:	bl	10f24 <printf@plt>
   29b0c:	ldr	r3, [sp, #12]
   29b10:	cmp	r3, #0
   29b14:	bne	29cb0 <__assert_fail@plt+0x18aa4>
   29b18:	ldr	r3, [sp, #8]
   29b1c:	cmp	r3, #0
   29b20:	bne	29c60 <__assert_fail@plt+0x18a54>
   29b24:	ldr	r3, [sp, #16]
   29b28:	cmp	r3, #0
   29b2c:	bne	29904 <__assert_fail@plt+0x186f8>
   29b30:	cmp	sl, #0
   29b34:	beq	29c7c <__assert_fail@plt+0x18a70>
   29b38:	ldr	r1, [pc, #1276]	; 2a03c <__assert_fail@plt+0x18e30>
   29b3c:	ldr	r0, [pc, #1320]	; 2a06c <__assert_fail@plt+0x18e60>
   29b40:	bl	10f24 <printf@plt>
   29b44:	cmp	fp, #0
   29b48:	bne	29c84 <__assert_fail@plt+0x18a78>
   29b4c:	cmp	r7, #0
   29b50:	bne	29c98 <__assert_fail@plt+0x18a8c>
   29b54:	cmp	r6, #0
   29b58:	bne	29930 <__assert_fail@plt+0x18724>
   29b5c:	cmp	r5, #0
   29b60:	beq	29950 <__assert_fail@plt+0x18744>
   29b64:	b	29944 <__assert_fail@plt+0x18738>
   29b68:	ldr	r1, [pc, #1216]	; 2a030 <__assert_fail@plt+0x18e24>
   29b6c:	ldr	r8, [pc, #1216]	; 2a034 <__assert_fail@plt+0x18e28>
   29b70:	ldr	r0, [pc, #1272]	; 2a070 <__assert_fail@plt+0x18e64>
   29b74:	bl	10f24 <printf@plt>
   29b78:	ldr	r3, [sp, #28]
   29b7c:	cmp	r3, #0
   29b80:	bne	29da8 <__assert_fail@plt+0x18b9c>
   29b84:	ldr	r3, [sp, #24]
   29b88:	cmp	r3, #0
   29b8c:	bne	29cb8 <__assert_fail@plt+0x18aac>
   29b90:	ldr	r3, [sp, #32]
   29b94:	cmp	r3, #0
   29b98:	bne	29cd0 <__assert_fail@plt+0x18ac4>
   29b9c:	ldr	r3, [sp, #20]
   29ba0:	cmp	r3, #0
   29ba4:	beq	29cec <__assert_fail@plt+0x18ae0>
   29ba8:	ldr	r1, [pc, #1164]	; 2a03c <__assert_fail@plt+0x18e30>
   29bac:	ldr	r0, [pc, #1216]	; 2a074 <__assert_fail@plt+0x18e68>
   29bb0:	bl	10f24 <printf@plt>
   29bb4:	ldr	r3, [sp, #12]
   29bb8:	cmp	r3, #0
   29bbc:	bne	29a4c <__assert_fail@plt+0x18840>
   29bc0:	ldr	r3, [sp, #8]
   29bc4:	cmp	r3, #0
   29bc8:	bne	29d04 <__assert_fail@plt+0x18af8>
   29bcc:	ldr	r3, [sp, #4]
   29bd0:	cmp	r3, #0
   29bd4:	bne	29d78 <__assert_fail@plt+0x18b6c>
   29bd8:	cmp	r7, #0
   29bdc:	beq	29a78 <__assert_fail@plt+0x1886c>
   29be0:	ldr	r1, [pc, #1108]	; 2a03c <__assert_fail@plt+0x18e30>
   29be4:	ldr	r0, [pc, #1164]	; 2a078 <__assert_fail@plt+0x18e6c>
   29be8:	bl	10f24 <printf@plt>
   29bec:	cmp	fp, #0
   29bf0:	bne	29a80 <__assert_fail@plt+0x18874>
   29bf4:	cmp	sl, #0
   29bf8:	bne	29d34 <__assert_fail@plt+0x18b28>
   29bfc:	cmp	r6, #0
   29c00:	bne	29d48 <__assert_fail@plt+0x18b3c>
   29c04:	cmp	r5, #0
   29c08:	beq	29aa4 <__assert_fail@plt+0x18898>
   29c0c:	ldr	r1, [pc, #1064]	; 2a03c <__assert_fail@plt+0x18e30>
   29c10:	ldr	r0, [pc, #1124]	; 2a07c <__assert_fail@plt+0x18e70>
   29c14:	bl	10f24 <printf@plt>
   29c18:	cmp	r4, #0
   29c1c:	bne	29aac <__assert_fail@plt+0x188a0>
   29c20:	b	29ab8 <__assert_fail@plt+0x188ac>
   29c24:	ldr	r8, [pc, #1032]	; 2a034 <__assert_fail@plt+0x18e28>
   29c28:	mov	r2, #9
   29c2c:	mov	r1, #1
   29c30:	ldr	r3, [r8]
   29c34:	ldr	r0, [pc, #1092]	; 2a080 <__assert_fail@plt+0x18e74>
   29c38:	bl	10fcc <fwrite@plt>
   29c3c:	ldr	r3, [sp, #4]
   29c40:	cmp	r3, #0
   29c44:	bne	29e8c <__assert_fail@plt+0x18c80>
   29c48:	ldr	r3, [sp, #12]
   29c4c:	cmp	r3, #0
   29c50:	bne	29cb0 <__assert_fail@plt+0x18aa4>
   29c54:	ldr	r3, [sp, #8]
   29c58:	cmp	r3, #0
   29c5c:	beq	298f8 <__assert_fail@plt+0x186ec>
   29c60:	ldr	r1, [pc, #980]	; 2a03c <__assert_fail@plt+0x18e30>
   29c64:	ldr	r0, [pc, #1048]	; 2a084 <__assert_fail@plt+0x18e78>
   29c68:	bl	10f24 <printf@plt>
   29c6c:	ldr	r3, [sp, #16]
   29c70:	cmp	r3, #0
   29c74:	bne	29904 <__assert_fail@plt+0x186f8>
   29c78:	b	29b30 <__assert_fail@plt+0x18924>
   29c7c:	cmp	fp, #0
   29c80:	beq	29ea4 <__assert_fail@plt+0x18c98>
   29c84:	ldr	r1, [pc, #944]	; 2a03c <__assert_fail@plt+0x18e30>
   29c88:	ldr	r0, [pc, #1016]	; 2a088 <__assert_fail@plt+0x18e7c>
   29c8c:	bl	10f24 <printf@plt>
   29c90:	cmp	r7, #0
   29c94:	beq	29928 <__assert_fail@plt+0x1871c>
   29c98:	ldr	r1, [pc, #924]	; 2a03c <__assert_fail@plt+0x18e30>
   29c9c:	ldr	r0, [pc, #1000]	; 2a08c <__assert_fail@plt+0x18e80>
   29ca0:	bl	10f24 <printf@plt>
   29ca4:	cmp	r6, #0
   29ca8:	bne	29930 <__assert_fail@plt+0x18724>
   29cac:	b	29b5c <__assert_fail@plt+0x18950>
   29cb0:	ldr	r1, [pc, #900]	; 2a03c <__assert_fail@plt+0x18e30>
   29cb4:	b	298e4 <__assert_fail@plt+0x186d8>
   29cb8:	ldr	r1, [pc, #892]	; 2a03c <__assert_fail@plt+0x18e30>
   29cbc:	ldr	r0, [pc, #972]	; 2a090 <__assert_fail@plt+0x18e84>
   29cc0:	bl	10f24 <printf@plt>
   29cc4:	ldr	r3, [sp, #32]
   29cc8:	cmp	r3, #0
   29ccc:	beq	29b9c <__assert_fail@plt+0x18990>
   29cd0:	ldr	r1, [pc, #868]	; 2a03c <__assert_fail@plt+0x18e30>
   29cd4:	ldr	r0, [pc, #952]	; 2a094 <__assert_fail@plt+0x18e88>
   29cd8:	bl	10f24 <printf@plt>
   29cdc:	ldr	r3, [sp, #20]
   29ce0:	cmp	r3, #0
   29ce4:	bne	29ba8 <__assert_fail@plt+0x1899c>
   29ce8:	b	29a40 <__assert_fail@plt+0x18834>
   29cec:	ldr	r3, [sp, #12]
   29cf0:	cmp	r3, #0
   29cf4:	bne	29a4c <__assert_fail@plt+0x18840>
   29cf8:	ldr	r3, [sp, #8]
   29cfc:	cmp	r3, #0
   29d00:	beq	29d6c <__assert_fail@plt+0x18b60>
   29d04:	ldr	r1, [pc, #816]	; 2a03c <__assert_fail@plt+0x18e30>
   29d08:	ldr	r0, [pc, #904]	; 2a098 <__assert_fail@plt+0x18e8c>
   29d0c:	bl	10f24 <printf@plt>
   29d10:	ldr	r3, [sp, #4]
   29d14:	cmp	r3, #0
   29d18:	bne	29d78 <__assert_fail@plt+0x18b6c>
   29d1c:	cmp	r7, #0
   29d20:	bne	29be0 <__assert_fail@plt+0x189d4>
   29d24:	cmp	fp, #0
   29d28:	bne	29a80 <__assert_fail@plt+0x18874>
   29d2c:	cmp	sl, #0
   29d30:	beq	29d9c <__assert_fail@plt+0x18b90>
   29d34:	ldr	r1, [pc, #768]	; 2a03c <__assert_fail@plt+0x18e30>
   29d38:	ldr	r0, [pc, #860]	; 2a09c <__assert_fail@plt+0x18e90>
   29d3c:	bl	10f24 <printf@plt>
   29d40:	cmp	r6, #0
   29d44:	beq	29c04 <__assert_fail@plt+0x189f8>
   29d48:	ldr	r1, [pc, #748]	; 2a03c <__assert_fail@plt+0x18e30>
   29d4c:	ldr	r0, [pc, #844]	; 2a0a0 <__assert_fail@plt+0x18e94>
   29d50:	bl	10f24 <printf@plt>
   29d54:	cmp	r5, #0
   29d58:	bne	29c0c <__assert_fail@plt+0x18a00>
   29d5c:	b	29aa4 <__assert_fail@plt+0x18898>
   29d60:	ldr	r3, [sp, #8]
   29d64:	cmp	r3, #0
   29d68:	bne	29d04 <__assert_fail@plt+0x18af8>
   29d6c:	ldr	r3, [sp, #4]
   29d70:	cmp	r3, #0
   29d74:	beq	29bd8 <__assert_fail@plt+0x189cc>
   29d78:	ldr	r1, [pc, #700]	; 2a03c <__assert_fail@plt+0x18e30>
   29d7c:	ldr	r0, [pc, #800]	; 2a0a4 <__assert_fail@plt+0x18e98>
   29d80:	bl	10f24 <printf@plt>
   29d84:	cmp	r7, #0
   29d88:	bne	29be0 <__assert_fail@plt+0x189d4>
   29d8c:	cmp	fp, #0
   29d90:	bne	29a80 <__assert_fail@plt+0x18874>
   29d94:	cmp	sl, #0
   29d98:	bne	29d34 <__assert_fail@plt+0x18b28>
   29d9c:	cmp	r6, #0
   29da0:	bne	29d48 <__assert_fail@plt+0x18b3c>
   29da4:	b	29c04 <__assert_fail@plt+0x189f8>
   29da8:	ldr	r1, [pc, #652]	; 2a03c <__assert_fail@plt+0x18e30>
   29dac:	b	29a14 <__assert_fail@plt+0x18808>
   29db0:	ldr	r8, [pc, #636]	; 2a034 <__assert_fail@plt+0x18e28>
   29db4:	mov	r2, #5
   29db8:	mov	r1, #1
   29dbc:	ldr	r3, [r8]
   29dc0:	ldr	r0, [pc, #736]	; 2a0a8 <__assert_fail@plt+0x18e9c>
   29dc4:	bl	10fcc <fwrite@plt>
   29dc8:	ldr	r3, [sp, #36]	; 0x24
   29dcc:	cmp	r3, #0
   29dd0:	bne	29ec8 <__assert_fail@plt+0x18cbc>
   29dd4:	ldr	r3, [sp, #28]
   29dd8:	cmp	r3, #0
   29ddc:	bne	29da8 <__assert_fail@plt+0x18b9c>
   29de0:	ldr	r3, [sp, #24]
   29de4:	cmp	r3, #0
   29de8:	bne	29cb8 <__assert_fail@plt+0x18aac>
   29dec:	ldr	r3, [sp, #32]
   29df0:	cmp	r3, #0
   29df4:	bne	29cd0 <__assert_fail@plt+0x18ac4>
   29df8:	ldr	r3, [sp, #20]
   29dfc:	cmp	r3, #0
   29e00:	bne	29ba8 <__assert_fail@plt+0x1899c>
   29e04:	ldr	r3, [sp, #12]
   29e08:	cmp	r3, #0
   29e0c:	bne	29a4c <__assert_fail@plt+0x18840>
   29e10:	ldr	r3, [sp, #8]
   29e14:	cmp	r3, #0
   29e18:	bne	29d04 <__assert_fail@plt+0x18af8>
   29e1c:	ldr	r3, [sp, #4]
   29e20:	cmp	r3, #0
   29e24:	bne	29d78 <__assert_fail@plt+0x18b6c>
   29e28:	cmp	r7, #0
   29e2c:	bne	29be0 <__assert_fail@plt+0x189d4>
   29e30:	cmp	fp, #0
   29e34:	bne	29a80 <__assert_fail@plt+0x18874>
   29e38:	cmp	sl, #0
   29e3c:	bne	29d34 <__assert_fail@plt+0x18b28>
   29e40:	cmp	r6, #0
   29e44:	bne	29d48 <__assert_fail@plt+0x18b3c>
   29e48:	cmp	r5, #0
   29e4c:	bne	29c0c <__assert_fail@plt+0x18a00>
   29e50:	cmp	r4, #0
   29e54:	bne	29aac <__assert_fail@plt+0x188a0>
   29e58:	ldr	r3, [sp, #16]
   29e5c:	cmp	r3, #0
   29e60:	beq	29ae4 <__assert_fail@plt+0x188d8>
   29e64:	cmp	r4, #0
   29e68:	ldrne	r1, [pc, #448]	; 2a030 <__assert_fail@plt+0x18e24>
   29e6c:	bne	29ac8 <__assert_fail@plt+0x188bc>
   29e70:	b	29ac4 <__assert_fail@plt+0x188b8>
   29e74:	ldr	r3, [sp, #8]
   29e78:	cmp	r3, #0
   29e7c:	beq	29ed0 <__assert_fail@plt+0x18cc4>
   29e80:	ldr	r1, [pc, #424]	; 2a030 <__assert_fail@plt+0x18e24>
   29e84:	ldr	r8, [pc, #424]	; 2a034 <__assert_fail@plt+0x18e28>
   29e88:	b	29c64 <__assert_fail@plt+0x18a58>
   29e8c:	ldr	r1, [pc, #424]	; 2a03c <__assert_fail@plt+0x18e30>
   29e90:	b	29b04 <__assert_fail@plt+0x188f8>
   29e94:	cmp	sl, #0
   29e98:	bne	29b38 <__assert_fail@plt+0x1892c>
   29e9c:	cmp	fp, #0
   29ea0:	bne	29c84 <__assert_fail@plt+0x18a78>
   29ea4:	cmp	r7, #0
   29ea8:	bne	29c98 <__assert_fail@plt+0x18a8c>
   29eac:	b	29928 <__assert_fail@plt+0x1871c>
   29eb0:	ldr	r3, [sp, #24]
   29eb4:	cmp	r3, #0
   29eb8:	beq	29ee8 <__assert_fail@plt+0x18cdc>
   29ebc:	ldr	r1, [pc, #364]	; 2a030 <__assert_fail@plt+0x18e24>
   29ec0:	ldr	r8, [pc, #364]	; 2a034 <__assert_fail@plt+0x18e28>
   29ec4:	b	29cbc <__assert_fail@plt+0x18ab0>
   29ec8:	ldr	r1, [pc, #364]	; 2a03c <__assert_fail@plt+0x18e30>
   29ecc:	b	29b70 <__assert_fail@plt+0x18964>
   29ed0:	ldr	r3, [sp, #16]
   29ed4:	cmp	r3, #0
   29ed8:	beq	29f00 <__assert_fail@plt+0x18cf4>
   29edc:	ldr	r1, [pc, #332]	; 2a030 <__assert_fail@plt+0x18e24>
   29ee0:	ldr	r8, [pc, #332]	; 2a034 <__assert_fail@plt+0x18e28>
   29ee4:	b	29908 <__assert_fail@plt+0x186fc>
   29ee8:	ldr	r3, [sp, #32]
   29eec:	cmp	r3, #0
   29ef0:	beq	29f54 <__assert_fail@plt+0x18d48>
   29ef4:	ldr	r1, [pc, #308]	; 2a030 <__assert_fail@plt+0x18e24>
   29ef8:	ldr	r8, [pc, #308]	; 2a034 <__assert_fail@plt+0x18e28>
   29efc:	b	29cd4 <__assert_fail@plt+0x18ac8>
   29f00:	cmp	sl, #0
   29f04:	ldrne	r1, [pc, #292]	; 2a030 <__assert_fail@plt+0x18e24>
   29f08:	ldrne	r8, [pc, #292]	; 2a034 <__assert_fail@plt+0x18e28>
   29f0c:	bne	29b3c <__assert_fail@plt+0x18930>
   29f10:	cmp	fp, #0
   29f14:	ldrne	r1, [pc, #276]	; 2a030 <__assert_fail@plt+0x18e24>
   29f18:	ldrne	r8, [pc, #276]	; 2a034 <__assert_fail@plt+0x18e28>
   29f1c:	bne	29c88 <__assert_fail@plt+0x18a7c>
   29f20:	cmp	r7, #0
   29f24:	ldrne	r1, [pc, #260]	; 2a030 <__assert_fail@plt+0x18e24>
   29f28:	ldrne	r8, [pc, #260]	; 2a034 <__assert_fail@plt+0x18e28>
   29f2c:	bne	29c9c <__assert_fail@plt+0x18a90>
   29f30:	cmp	r6, #0
   29f34:	ldrne	r1, [pc, #244]	; 2a030 <__assert_fail@plt+0x18e24>
   29f38:	ldrne	r8, [pc, #244]	; 2a034 <__assert_fail@plt+0x18e28>
   29f3c:	bne	29934 <__assert_fail@plt+0x18728>
   29f40:	cmp	r5, #0
   29f44:	beq	2a008 <__assert_fail@plt+0x18dfc>
   29f48:	ldr	r1, [pc, #224]	; 2a030 <__assert_fail@plt+0x18e24>
   29f4c:	ldr	r8, [pc, #224]	; 2a034 <__assert_fail@plt+0x18e28>
   29f50:	b	29948 <__assert_fail@plt+0x1873c>
   29f54:	ldr	r3, [sp, #20]
   29f58:	cmp	r3, #0
   29f5c:	ldrne	r1, [pc, #204]	; 2a030 <__assert_fail@plt+0x18e24>
   29f60:	ldrne	r8, [pc, #204]	; 2a034 <__assert_fail@plt+0x18e28>
   29f64:	bne	29bac <__assert_fail@plt+0x189a0>
   29f68:	ldr	r3, [sp, #12]
   29f6c:	cmp	r3, #0
   29f70:	ldrne	r1, [pc, #184]	; 2a030 <__assert_fail@plt+0x18e24>
   29f74:	ldrne	r8, [pc, #184]	; 2a034 <__assert_fail@plt+0x18e28>
   29f78:	bne	29a50 <__assert_fail@plt+0x18844>
   29f7c:	ldr	r3, [sp, #8]
   29f80:	cmp	r3, #0
   29f84:	ldrne	r1, [pc, #164]	; 2a030 <__assert_fail@plt+0x18e24>
   29f88:	ldrne	r8, [pc, #164]	; 2a034 <__assert_fail@plt+0x18e28>
   29f8c:	bne	29d08 <__assert_fail@plt+0x18afc>
   29f90:	ldr	r3, [sp, #4]
   29f94:	cmp	r3, #0
   29f98:	ldrne	r1, [pc, #144]	; 2a030 <__assert_fail@plt+0x18e24>
   29f9c:	ldrne	r8, [pc, #144]	; 2a034 <__assert_fail@plt+0x18e28>
   29fa0:	bne	29d7c <__assert_fail@plt+0x18b70>
   29fa4:	cmp	r7, #0
   29fa8:	ldrne	r1, [pc, #128]	; 2a030 <__assert_fail@plt+0x18e24>
   29fac:	ldrne	r8, [pc, #128]	; 2a034 <__assert_fail@plt+0x18e28>
   29fb0:	bne	29be4 <__assert_fail@plt+0x189d8>
   29fb4:	cmp	fp, #0
   29fb8:	ldrne	r1, [pc, #112]	; 2a030 <__assert_fail@plt+0x18e24>
   29fbc:	ldrne	r8, [pc, #112]	; 2a034 <__assert_fail@plt+0x18e28>
   29fc0:	bne	29a84 <__assert_fail@plt+0x18878>
   29fc4:	cmp	sl, #0
   29fc8:	ldrne	r1, [pc, #96]	; 2a030 <__assert_fail@plt+0x18e24>
   29fcc:	ldrne	r8, [pc, #96]	; 2a034 <__assert_fail@plt+0x18e28>
   29fd0:	bne	29d38 <__assert_fail@plt+0x18b2c>
   29fd4:	cmp	r6, #0
   29fd8:	ldrne	r1, [pc, #80]	; 2a030 <__assert_fail@plt+0x18e24>
   29fdc:	ldrne	r8, [pc, #80]	; 2a034 <__assert_fail@plt+0x18e28>
   29fe0:	bne	29d4c <__assert_fail@plt+0x18b40>
   29fe4:	cmp	r5, #0
   29fe8:	ldrne	r1, [pc, #64]	; 2a030 <__assert_fail@plt+0x18e24>
   29fec:	ldrne	r8, [pc, #64]	; 2a034 <__assert_fail@plt+0x18e28>
   29ff0:	bne	29c10 <__assert_fail@plt+0x18a04>
   29ff4:	cmp	r4, #0
   29ff8:	bne	2a020 <__assert_fail@plt+0x18e14>
   29ffc:	mov	r4, #1
   2a000:	ldr	r8, [pc, #44]	; 2a034 <__assert_fail@plt+0x18e28>
   2a004:	b	29e58 <__assert_fail@plt+0x18c4c>
   2a008:	cmp	r4, #0
   2a00c:	ldreq	r8, [pc, #32]	; 2a034 <__assert_fail@plt+0x18e28>
   2a010:	beq	29ae4 <__assert_fail@plt+0x188d8>
   2a014:	ldr	r1, [pc, #20]	; 2a030 <__assert_fail@plt+0x18e24>
   2a018:	ldr	r8, [pc, #20]	; 2a034 <__assert_fail@plt+0x18e28>
   2a01c:	b	2995c <__assert_fail@plt+0x18750>
   2a020:	ldr	r1, [pc, #8]	; 2a030 <__assert_fail@plt+0x18e24>
   2a024:	ldr	r8, [pc, #8]	; 2a034 <__assert_fail@plt+0x18e28>
   2a028:	b	29ab0 <__assert_fail@plt+0x188a4>
   2a02c:	andeq	r8, r6, r4, lsl #8
   2a030:	andeq	fp, r6, ip, ror #2
   2a034:	andeq	sl, r9, ip, lsr #8
   2a038:	andeq	r8, r6, r4, lsr r4
   2a03c:	andeq	r8, r6, r4, lsl #4
   2a040:	andeq	r8, r6, r8, asr #8
   2a044:	andeq	r8, r6, r0, ror r4
   2a048:	andeq	r8, r6, ip, ror r4
   2a04c:	andeq	r8, r6, r4, lsl #9
   2a050:	andeq	r8, r6, ip, asr #6
   2a054:	andeq	r8, r6, r8, ror r3
   2a058:	andeq	r8, r6, r0, lsr #7
   2a05c:	andeq	r8, r6, r8, asr #7
   2a060:	strdeq	r8, [r6], -r0
   2a064:	strdeq	r8, [r6], -r8	; <UNPREDICTABLE>
   2a068:	andeq	r8, r6, ip, lsr #8
   2a06c:	andeq	r8, r6, r0, asr r4
   2a070:	andeq	r8, r6, r0, ror r3
   2a074:	muleq	r6, r8, r3
   2a078:	andeq	r8, r6, r0, asr #7
   2a07c:	andeq	r8, r6, r4, ror #7
   2a080:	andeq	r8, r6, r0, lsr #8
   2a084:	andeq	r8, r6, ip, lsr r4
   2a088:	andeq	r8, r6, ip, asr r4
   2a08c:	andeq	r8, r6, r8, ror #8
   2a090:	andeq	r8, r6, r4, lsl #7
   2a094:	muleq	r6, r0, r3
   2a098:	andeq	r8, r6, r8, lsr #7
   2a09c:	ldrdeq	r8, [r6], -r0
   2a0a0:	ldrdeq	r8, [r6], -ip
   2a0a4:			; <UNDEFINED> instruction: 0x000683b8
   2a0a8:	andeq	r8, r6, r8, ror #6
   2a0ac:	cmp	r1, #8
   2a0b0:	push	{r4, r5, lr}
   2a0b4:	mov	r4, r0
   2a0b8:	sub	sp, sp, #12
   2a0bc:	beq	2a0e0 <__assert_fail@plt+0x18ed4>
   2a0c0:	mov	ip, r1
   2a0c4:	mov	r1, r0
   2a0c8:	and	r0, ip, #1
   2a0cc:	bl	15008 <__assert_fail@plt+0x3dfc>
   2a0d0:	mov	r4, r0
   2a0d4:	mov	r0, r4
   2a0d8:	add	sp, sp, #12
   2a0dc:	pop	{r4, r5, pc}
   2a0e0:	mov	r3, r2
   2a0e4:	add	r1, sp, #4
   2a0e8:	mov	r2, #0
   2a0ec:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   2a0f0:	ldr	r3, [sp, #4]
   2a0f4:	add	r4, r4, r3
   2a0f8:	mov	r5, r0
   2a0fc:	ldr	r0, [pc, #112]	; 2a174 <__assert_fail@plt+0x18f68>
   2a100:	bl	10f24 <printf@plt>
   2a104:	cmp	r5, #1
   2a108:	beq	2a15c <__assert_fail@plt+0x18f50>
   2a10c:	cmp	r5, #2
   2a110:	beq	2a12c <__assert_fail@plt+0x18f20>
   2a114:	cmp	r5, #0
   2a118:	beq	2a144 <__assert_fail@plt+0x18f38>
   2a11c:	mov	r1, r5
   2a120:	ldr	r0, [pc, #80]	; 2a178 <__assert_fail@plt+0x18f6c>
   2a124:	bl	10f24 <printf@plt>
   2a128:	b	2a0d4 <__assert_fail@plt+0x18ec8>
   2a12c:	mov	r2, #5
   2a130:	ldr	r1, [pc, #68]	; 2a17c <__assert_fail@plt+0x18f70>
   2a134:	mov	r0, #0
   2a138:	bl	10f90 <dcgettext@plt>
   2a13c:	bl	10f24 <printf@plt>
   2a140:	b	2a0d4 <__assert_fail@plt+0x18ec8>
   2a144:	mov	r2, #5
   2a148:	ldr	r1, [pc, #48]	; 2a180 <__assert_fail@plt+0x18f74>
   2a14c:	mov	r0, r5
   2a150:	bl	10f90 <dcgettext@plt>
   2a154:	bl	10f24 <printf@plt>
   2a158:	b	2a0d4 <__assert_fail@plt+0x18ec8>
   2a15c:	mov	r2, #5
   2a160:	ldr	r1, [pc, #28]	; 2a184 <__assert_fail@plt+0x18f78>
   2a164:	mov	r0, #0
   2a168:	bl	10f90 <dcgettext@plt>
   2a16c:	bl	10f24 <printf@plt>
   2a170:	b	2a0d4 <__assert_fail@plt+0x18ec8>
   2a174:	andeq	r8, r6, ip, lsl #9
   2a178:	andeq	r2, r6, ip, asr #30
   2a17c:			; <UNDEFINED> instruction: 0x000684bc
   2a180:	andeq	r8, r6, r8, lsr #9
   2a184:			; <UNDEFINED> instruction: 0x000684b0
   2a188:	cmp	r1, #4
   2a18c:	push	{r4, r5, lr}
   2a190:	mov	r3, r2
   2a194:	sub	sp, sp, #12
   2a198:	mov	r4, r0
   2a19c:	beq	2a208 <__assert_fail@plt+0x18ffc>
   2a1a0:	cmp	r1, #8
   2a1a4:	mov	ip, r1
   2a1a8:	beq	2a1c8 <__assert_fail@plt+0x18fbc>
   2a1ac:	mov	r1, r0
   2a1b0:	and	r0, ip, #1
   2a1b4:	bl	15008 <__assert_fail@plt+0x3dfc>
   2a1b8:	mov	r4, r0
   2a1bc:	mov	r0, r4
   2a1c0:	add	sp, sp, #12
   2a1c4:	pop	{r4, r5, pc}
   2a1c8:	mov	r2, #0
   2a1cc:	add	r1, sp, #4
   2a1d0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   2a1d4:	ldr	r3, [sp, #4]
   2a1d8:	add	r4, r4, r3
   2a1dc:	mov	r5, r0
   2a1e0:	ldr	r0, [pc, #132]	; 2a26c <__assert_fail@plt+0x19060>
   2a1e4:	bl	10f24 <printf@plt>
   2a1e8:	cmp	r5, #0
   2a1ec:	beq	2a254 <__assert_fail@plt+0x19048>
   2a1f0:	cmp	r5, #1
   2a1f4:	beq	2a23c <__assert_fail@plt+0x19030>
   2a1f8:	mov	r1, r5
   2a1fc:	ldr	r0, [pc, #108]	; 2a270 <__assert_fail@plt+0x19064>
   2a200:	bl	10f24 <printf@plt>
   2a204:	b	2a1bc <__assert_fail@plt+0x18fb0>
   2a208:	mov	r2, #0
   2a20c:	add	r1, sp, #4
   2a210:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   2a214:	ldr	r3, [sp, #4]
   2a218:	add	r4, r4, r3
   2a21c:	mov	r5, r0
   2a220:	ldr	r0, [pc, #76]	; 2a274 <__assert_fail@plt+0x19068>
   2a224:	bl	10f24 <printf@plt>
   2a228:	mov	r0, r5
   2a22c:	bl	14638 <__assert_fail@plt+0x342c>
   2a230:	mov	r0, r4
   2a234:	add	sp, sp, #12
   2a238:	pop	{r4, r5, pc}
   2a23c:	mov	r2, #5
   2a240:	ldr	r1, [pc, #48]	; 2a278 <__assert_fail@plt+0x1906c>
   2a244:	mov	r0, #0
   2a248:	bl	10f90 <dcgettext@plt>
   2a24c:	bl	10f24 <printf@plt>
   2a250:	b	2a1bc <__assert_fail@plt+0x18fb0>
   2a254:	mov	r2, #5
   2a258:	ldr	r1, [pc, #28]	; 2a27c <__assert_fail@plt+0x19070>
   2a25c:	mov	r0, r5
   2a260:	bl	10f90 <dcgettext@plt>
   2a264:	bl	10f24 <printf@plt>
   2a268:	b	2a1bc <__assert_fail@plt+0x18fb0>
   2a26c:	andeq	r8, r6, r0, ror #9
   2a270:	andeq	r2, r6, ip, asr #30
   2a274:	andeq	r8, r6, r8, asr #9
   2a278:	andeq	r8, r6, ip, lsl #10
   2a27c:	strdeq	r8, [r6], -ip
   2a280:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a284:	sub	sp, sp, #84	; 0x54
   2a288:	ldr	sl, [pc, #2120]	; 2aad8 <__assert_fail@plt+0x198cc>
   2a28c:	ldr	ip, [pc, #2120]	; 2aadc <__assert_fail@plt+0x198d0>
   2a290:	ldr	r8, [pc, #2120]	; 2aae0 <__assert_fail@plt+0x198d4>
   2a294:	ldr	lr, [sl]
   2a298:	ldr	r9, [sl, #2732]	; 0xaac
   2a29c:	cmp	lr, #0
   2a2a0:	moveq	r8, ip
   2a2a4:	movne	ip, #8
   2a2a8:	moveq	ip, #16
   2a2ac:	cmp	r9, #0
   2a2b0:	str	ip, [sp, #8]
   2a2b4:	str	r0, [sp, #44]	; 0x2c
   2a2b8:	str	r1, [sp, #40]	; 0x28
   2a2bc:	mov	r6, r2
   2a2c0:	mov	r7, r3
   2a2c4:	bne	2a8f0 <__assert_fail@plt+0x196e4>
   2a2c8:	add	r3, sl, #1696	; 0x6a0
   2a2cc:	add	r2, sl, #1696	; 0x6a0
   2a2d0:	str	r3, [sp, #12]
   2a2d4:	orrs	r3, r6, r7
   2a2d8:	add	r2, r2, #12
   2a2dc:	beq	2a4ec <__assert_fail@plt+0x192e0>
   2a2e0:	ldr	r3, [sp, #12]
   2a2e4:	ldr	ip, [sp, #8]
   2a2e8:	mov	r1, #0
   2a2ec:	mov	r0, #0
   2a2f0:	add	sl, r3, ip
   2a2f4:	ldr	fp, [pc, #2024]	; 2aae4 <__assert_fail@plt+0x198d8>
   2a2f8:	strd	r0, [sp, #32]
   2a2fc:	strd	r0, [sp, #24]
   2a300:	strd	r0, [sp, #16]
   2a304:	add	sl, sl, #16
   2a308:	mov	r1, r2
   2a30c:	rsbs	r2, r6, #0
   2a310:	rsc	r3, r7, #0
   2a314:	and	r4, r2, r6
   2a318:	and	r5, r3, r7
   2a31c:	bic	r2, r6, r4
   2a320:	bic	r3, r7, r5
   2a324:	cmp	r9, #0
   2a328:	mov	r6, r2
   2a32c:	mov	r7, r3
   2a330:	beq	2a3cc <__assert_fail@plt+0x191c0>
   2a334:	cmp	r5, #0
   2a338:	cmpeq	r4, #128	; 0x80
   2a33c:	beq	2a7e8 <__assert_fail@plt+0x195dc>
   2a340:	bhi	2a504 <__assert_fail@plt+0x192f8>
   2a344:	cmp	r5, #0
   2a348:	cmpeq	r4, #4
   2a34c:	beq	2a650 <__assert_fail@plt+0x19444>
   2a350:	bls	2a47c <__assert_fail@plt+0x19270>
   2a354:	cmp	r5, #0
   2a358:	cmpeq	r4, #32
   2a35c:	beq	2a640 <__assert_fail@plt+0x19434>
   2a360:	cmp	r5, #0
   2a364:	cmpeq	r4, #64	; 0x40
   2a368:	beq	2a620 <__assert_fail@plt+0x19414>
   2a36c:	cmp	r5, #0
   2a370:	cmpeq	r4, #16
   2a374:	beq	2a618 <__assert_fail@plt+0x1940c>
   2a378:	ldr	r3, [sp, #40]	; 0x28
   2a37c:	ldrh	r3, [r3]
   2a380:	cmp	r3, #20
   2a384:	beq	2a984 <__assert_fail@plt+0x19778>
   2a388:	bls	2a894 <__assert_fail@plt+0x19688>
   2a38c:	cmp	r3, #50	; 0x32
   2a390:	beq	2a9e4 <__assert_fail@plt+0x197d8>
   2a394:	bhi	2a868 <__assert_fail@plt+0x1965c>
   2a398:	cmp	r3, #40	; 0x28
   2a39c:	bne	2a814 <__assert_fail@plt+0x19608>
   2a3a0:	cmp	r5, #0
   2a3a4:	cmpeq	r4, #536870912	; 0x20000000
   2a3a8:	beq	2aa60 <__assert_fail@plt+0x19854>
   2a3ac:	cmp	r5, #0
   2a3b0:	cmpeq	r4, #-2147483648	; 0x80000000
   2a3b4:	beq	2aa88 <__assert_fail@plt+0x1987c>
   2a3b8:	cmp	r5, #0
   2a3bc:	cmpeq	r4, #268435456	; 0x10000000
   2a3c0:	bne	2a81c <__assert_fail@plt+0x19610>
   2a3c4:	mov	r3, #21
   2a3c8:	b	2a498 <__assert_fail@plt+0x1928c>
   2a3cc:	cmp	r5, #0
   2a3d0:	cmpeq	r4, #128	; 0x80
   2a3d4:	beq	2a7f0 <__assert_fail@plt+0x195e4>
   2a3d8:	bhi	2a57c <__assert_fail@plt+0x19370>
   2a3dc:	cmp	r5, #0
   2a3e0:	cmpeq	r4, #4
   2a3e4:	beq	2a808 <__assert_fail@plt+0x195fc>
   2a3e8:	bls	2a54c <__assert_fail@plt+0x19340>
   2a3ec:	cmp	r5, #0
   2a3f0:	cmpeq	r4, #32
   2a3f4:	beq	2a7fc <__assert_fail@plt+0x195f0>
   2a3f8:	cmp	r5, #0
   2a3fc:	cmpeq	r4, #64	; 0x40
   2a400:	moveq	r3, #73	; 0x49
   2a404:	strbeq	r3, [r1]
   2a408:	beq	2a574 <__assert_fail@plt+0x19368>
   2a40c:	cmp	r5, #0
   2a410:	cmpeq	r4, #16
   2a414:	beq	2a7c4 <__assert_fail@plt+0x195b8>
   2a418:	ldr	r3, [sp, #40]	; 0x28
   2a41c:	ldrh	r3, [r3]
   2a420:	sub	r2, r3, #180	; 0xb4
   2a424:	cmp	r3, #62	; 0x3e
   2a428:	cmpne	r2, #1
   2a42c:	bhi	2a934 <__assert_fail@plt+0x19728>
   2a430:	cmp	r5, #0
   2a434:	cmpeq	r4, #268435456	; 0x10000000
   2a438:	moveq	r3, #108	; 0x6c
   2a43c:	strbeq	r3, [r1]
   2a440:	beq	2a574 <__assert_fail@plt+0x19368>
   2a444:	cmp	r3, #40	; 0x28
   2a448:	beq	2a9cc <__assert_fail@plt+0x197c0>
   2a44c:	and	r3, r4, #267386880	; 0xff00000
   2a450:	mov	r0, #0
   2a454:	str	r3, [sp, #48]	; 0x30
   2a458:	str	r0, [sp, #52]	; 0x34
   2a45c:	ldrd	r2, [sp, #48]	; 0x30
   2a460:	orrs	r3, r2, r3
   2a464:	beq	2a998 <__assert_fail@plt+0x1978c>
   2a468:	bic	r3, r6, #267386880	; 0xff00000
   2a46c:	mov	r6, r3
   2a470:	mov	r3, #111	; 0x6f
   2a474:	strb	r3, [r1]
   2a478:	b	2a574 <__assert_fail@plt+0x19368>
   2a47c:	cmp	r5, #0
   2a480:	cmpeq	r4, #1
   2a484:	beq	2a610 <__assert_fail@plt+0x19404>
   2a488:	cmp	r5, #0
   2a48c:	cmpeq	r4, #2
   2a490:	moveq	r3, #1
   2a494:	bne	2a378 <__assert_fail@plt+0x1916c>
   2a498:	cmp	r1, sl
   2a49c:	beq	2a544 <__assert_fail@plt+0x19338>
   2a4a0:	cmp	r8, #11
   2a4a4:	bls	2a8c4 <__assert_fail@plt+0x196b8>
   2a4a8:	mov	r0, r1
   2a4ac:	sub	r8, r8, #2
   2a4b0:	mov	ip, #44	; 0x2c
   2a4b4:	mov	r2, #32
   2a4b8:	strb	ip, [r0], #2
   2a4bc:	strb	r2, [r1, #1]
   2a4c0:	add	r3, fp, r3, lsl #3
   2a4c4:	ldr	r2, [r3, #368]	; 0x170
   2a4c8:	ldr	r1, [r3, #364]	; 0x16c
   2a4cc:	sub	r8, r8, r2
   2a4d0:	bl	10f84 <stpcpy@plt>
   2a4d4:	mov	r1, r0
   2a4d8:	orrs	r3, r6, r7
   2a4dc:	bne	2a30c <__assert_fail@plt+0x19100>
   2a4e0:	cmp	r9, #0
   2a4e4:	mov	r2, r1
   2a4e8:	bne	2a658 <__assert_fail@plt+0x1944c>
   2a4ec:	ldr	r1, [sp, #12]
   2a4f0:	mov	r3, #0
   2a4f4:	add	r0, r1, #12
   2a4f8:	strb	r3, [r2]
   2a4fc:	add	sp, sp, #84	; 0x54
   2a500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a504:	cmp	r5, #0
   2a508:	cmpeq	r4, #1024	; 0x400
   2a50c:	beq	2a648 <__assert_fail@plt+0x1943c>
   2a510:	bls	2a5c4 <__assert_fail@plt+0x193b8>
   2a514:	cmp	r5, #0
   2a518:	cmpeq	r4, #16777216	; 0x1000000
   2a51c:	beq	2a638 <__assert_fail@plt+0x1942c>
   2a520:	cmp	r5, #0
   2a524:	cmpeq	r4, #-2147483648	; 0x80000000
   2a528:	beq	2a628 <__assert_fail@plt+0x1941c>
   2a52c:	cmp	r5, #0
   2a530:	cmpeq	r4, #2048	; 0x800
   2a534:	bne	2a378 <__assert_fail@plt+0x1916c>
   2a538:	cmp	r1, sl
   2a53c:	mov	r3, #20
   2a540:	bne	2a4a0 <__assert_fail@plt+0x19294>
   2a544:	mov	r0, sl
   2a548:	b	2a4c0 <__assert_fail@plt+0x192b4>
   2a54c:	cmp	r5, #0
   2a550:	cmpeq	r4, #1
   2a554:	moveq	r3, #87	; 0x57
   2a558:	strbeq	r3, [r1]
   2a55c:	beq	2a574 <__assert_fail@plt+0x19368>
   2a560:	cmp	r5, #0
   2a564:	cmpeq	r4, #2
   2a568:	moveq	r3, #65	; 0x41
   2a56c:	strbeq	r3, [r1]
   2a570:	bne	2a418 <__assert_fail@plt+0x1920c>
   2a574:	add	r1, r1, #1
   2a578:	b	2a4d8 <__assert_fail@plt+0x192cc>
   2a57c:	cmp	r5, #0
   2a580:	cmpeq	r4, #1024	; 0x400
   2a584:	beq	2a7dc <__assert_fail@plt+0x195d0>
   2a588:	bls	2a5e4 <__assert_fail@plt+0x193d8>
   2a58c:	cmp	r5, #0
   2a590:	cmpeq	r4, #16777216	; 0x1000000
   2a594:	beq	2a7d0 <__assert_fail@plt+0x195c4>
   2a598:	cmp	r5, #0
   2a59c:	cmpeq	r4, #-2147483648	; 0x80000000
   2a5a0:	moveq	r3, #69	; 0x45
   2a5a4:	strbeq	r3, [r1]
   2a5a8:	beq	2a574 <__assert_fail@plt+0x19368>
   2a5ac:	cmp	r5, #0
   2a5b0:	cmpeq	r4, #2048	; 0x800
   2a5b4:	bne	2a418 <__assert_fail@plt+0x1920c>
   2a5b8:	mov	r3, #67	; 0x43
   2a5bc:	strb	r3, [r1]
   2a5c0:	b	2a574 <__assert_fail@plt+0x19368>
   2a5c4:	cmp	r5, #0
   2a5c8:	cmpeq	r4, #256	; 0x100
   2a5cc:	beq	2a630 <__assert_fail@plt+0x19424>
   2a5d0:	cmp	r5, #0
   2a5d4:	cmpeq	r4, #512	; 0x200
   2a5d8:	moveq	r3, #8
   2a5dc:	beq	2a498 <__assert_fail@plt+0x1928c>
   2a5e0:	b	2a378 <__assert_fail@plt+0x1916c>
   2a5e4:	cmp	r5, #0
   2a5e8:	cmpeq	r4, #256	; 0x100
   2a5ec:	moveq	r3, #79	; 0x4f
   2a5f0:	strbeq	r3, [r1]
   2a5f4:	beq	2a574 <__assert_fail@plt+0x19368>
   2a5f8:	cmp	r5, #0
   2a5fc:	cmpeq	r4, #512	; 0x200
   2a600:	moveq	r3, #71	; 0x47
   2a604:	strbeq	r3, [r1]
   2a608:	beq	2a574 <__assert_fail@plt+0x19368>
   2a60c:	b	2a418 <__assert_fail@plt+0x1920c>
   2a610:	mov	r3, #0
   2a614:	b	2a498 <__assert_fail@plt+0x1928c>
   2a618:	mov	r3, #3
   2a61c:	b	2a498 <__assert_fail@plt+0x1928c>
   2a620:	mov	r3, #5
   2a624:	b	2a498 <__assert_fail@plt+0x1928c>
   2a628:	mov	r3, #18
   2a62c:	b	2a498 <__assert_fail@plt+0x1928c>
   2a630:	mov	r3, #7
   2a634:	b	2a498 <__assert_fail@plt+0x1928c>
   2a638:	mov	r3, #24
   2a63c:	b	2a498 <__assert_fail@plt+0x1928c>
   2a640:	mov	r3, #4
   2a644:	b	2a498 <__assert_fail@plt+0x1928c>
   2a648:	mov	r3, #9
   2a64c:	b	2a498 <__assert_fail@plt+0x1928c>
   2a650:	mov	r3, #2
   2a654:	b	2a498 <__assert_fail@plt+0x1928c>
   2a658:	ldrd	r0, [sp, #16]
   2a65c:	orrs	r3, r0, r1
   2a660:	beq	2a6cc <__assert_fail@plt+0x194c0>
   2a664:	ldr	r1, [sp, #8]
   2a668:	ldr	r3, [sp, #12]
   2a66c:	add	r3, r3, r1
   2a670:	add	r3, r3, #16
   2a674:	sub	r1, r8, r1
   2a678:	cmp	r2, r3
   2a67c:	sub	r8, r1, #5
   2a680:	beq	2aa70 <__assert_fail@plt+0x19864>
   2a684:	cmp	r8, #2
   2a688:	bls	2a8c4 <__assert_fail@plt+0x196b8>
   2a68c:	mov	r4, r2
   2a690:	sub	r8, r1, #7
   2a694:	mov	r0, #44	; 0x2c
   2a698:	mov	r3, #32
   2a69c:	strb	r0, [r4], #2
   2a6a0:	strb	r3, [r2, #1]
   2a6a4:	ldr	r5, [sp, #8]
   2a6a8:	ldr	r3, [sp, #16]
   2a6ac:	mov	r2, r5
   2a6b0:	str	r3, [sp]
   2a6b4:	ldr	r1, [pc, #1068]	; 2aae8 <__assert_fail@plt+0x198dc>
   2a6b8:	mov	r3, r5
   2a6bc:	mov	r0, r4
   2a6c0:	bl	1114c <sprintf@plt>
   2a6c4:	add	r2, r5, #5
   2a6c8:	add	r2, r4, r2
   2a6cc:	ldrd	r0, [sp, #24]
   2a6d0:	orrs	r3, r0, r1
   2a6d4:	beq	2a740 <__assert_fail@plt+0x19534>
   2a6d8:	ldr	r1, [sp, #8]
   2a6dc:	ldr	r3, [sp, #12]
   2a6e0:	add	r3, r3, r1
   2a6e4:	add	r3, r3, #16
   2a6e8:	sub	r1, r8, r1
   2a6ec:	cmp	r2, r3
   2a6f0:	sub	r8, r1, #7
   2a6f4:	beq	2aa80 <__assert_fail@plt+0x19874>
   2a6f8:	cmp	r8, #2
   2a6fc:	bls	2a8c4 <__assert_fail@plt+0x196b8>
   2a700:	mov	r4, r2
   2a704:	sub	r8, r1, #9
   2a708:	mov	r0, #44	; 0x2c
   2a70c:	mov	r3, #32
   2a710:	strb	r0, [r4], #2
   2a714:	strb	r3, [r2, #1]
   2a718:	ldr	r5, [sp, #8]
   2a71c:	ldr	r3, [sp, #24]
   2a720:	mov	r2, r5
   2a724:	str	r3, [sp]
   2a728:	ldr	r1, [pc, #956]	; 2aaec <__assert_fail@plt+0x198e0>
   2a72c:	mov	r3, r5
   2a730:	mov	r0, r4
   2a734:	bl	1114c <sprintf@plt>
   2a738:	add	r2, r5, #7
   2a73c:	add	r2, r4, r2
   2a740:	ldrd	r0, [sp, #32]
   2a744:	orrs	r3, r0, r1
   2a748:	beq	2a4ec <__assert_fail@plt+0x192e0>
   2a74c:	ldr	r1, [sp, #8]
   2a750:	ldr	r3, [sp, #12]
   2a754:	sub	r8, r8, r1
   2a758:	add	r3, r3, r1
   2a75c:	add	r3, r3, #16
   2a760:	cmp	r2, r3
   2a764:	sub	r8, r8, #10
   2a768:	beq	2aa90 <__assert_fail@plt+0x19884>
   2a76c:	cmp	r8, #2
   2a770:	bls	2a8c4 <__assert_fail@plt+0x196b8>
   2a774:	mov	r4, r2
   2a778:	mov	r1, #44	; 0x2c
   2a77c:	mov	r3, #32
   2a780:	strb	r1, [r4], #2
   2a784:	strb	r3, [r2, #1]
   2a788:	mov	r2, #5
   2a78c:	ldr	r1, [pc, #860]	; 2aaf0 <__assert_fail@plt+0x198e4>
   2a790:	mov	r0, #0
   2a794:	bl	10f90 <dcgettext@plt>
   2a798:	ldr	r5, [sp, #8]
   2a79c:	ldr	r3, [sp, #32]
   2a7a0:	mov	r2, r5
   2a7a4:	str	r3, [sp]
   2a7a8:	mov	r3, r5
   2a7ac:	mov	r1, r0
   2a7b0:	mov	r0, r4
   2a7b4:	bl	1114c <sprintf@plt>
   2a7b8:	add	r2, r5, #10
   2a7bc:	add	r2, r4, r2
   2a7c0:	b	2a4ec <__assert_fail@plt+0x192e0>
   2a7c4:	mov	r3, #77	; 0x4d
   2a7c8:	strb	r3, [r1]
   2a7cc:	b	2a574 <__assert_fail@plt+0x19368>
   2a7d0:	mov	r3, #68	; 0x44
   2a7d4:	strb	r3, [r1]
   2a7d8:	b	2a574 <__assert_fail@plt+0x19368>
   2a7dc:	mov	r3, #84	; 0x54
   2a7e0:	strb	r3, [r1]
   2a7e4:	b	2a574 <__assert_fail@plt+0x19368>
   2a7e8:	mov	r3, #6
   2a7ec:	b	2a498 <__assert_fail@plt+0x1928c>
   2a7f0:	mov	r3, #76	; 0x4c
   2a7f4:	strb	r3, [r1]
   2a7f8:	b	2a574 <__assert_fail@plt+0x19368>
   2a7fc:	mov	r3, #83	; 0x53
   2a800:	strb	r3, [r1]
   2a804:	b	2a574 <__assert_fail@plt+0x19368>
   2a808:	mov	r3, #88	; 0x58
   2a80c:	strb	r3, [r1]
   2a810:	b	2a574 <__assert_fail@plt+0x19368>
   2a814:	cmp	r3, #43	; 0x2b
   2a818:	beq	2a880 <__assert_fail@plt+0x19674>
   2a81c:	and	r3, r4, #267386880	; 0xff00000
   2a820:	mov	r0, #0
   2a824:	str	r3, [sp, #56]	; 0x38
   2a828:	str	r0, [sp, #60]	; 0x3c
   2a82c:	ldrd	r2, [sp, #56]	; 0x38
   2a830:	orrs	r3, r2, r3
   2a834:	bne	2a96c <__assert_fail@plt+0x19760>
   2a838:	and	r3, r4, #-268435456	; 0xf0000000
   2a83c:	str	r3, [sp, #72]	; 0x48
   2a840:	str	r0, [sp, #76]	; 0x4c
   2a844:	ldrd	r2, [sp, #72]	; 0x48
   2a848:	orrs	r3, r2, r3
   2a84c:	beq	2aa48 <__assert_fail@plt+0x1983c>
   2a850:	ldr	r3, [sp, #24]
   2a854:	orr	r2, r4, r3
   2a858:	ldr	r3, [sp, #28]
   2a85c:	orr	r3, r5, r3
   2a860:	strd	r2, [sp, #24]
   2a864:	b	2a4d8 <__assert_fail@plt+0x192cc>
   2a868:	cmp	r3, #62	; 0x3e
   2a86c:	beq	2a880 <__assert_fail@plt+0x19674>
   2a870:	bcc	2a81c <__assert_fail@plt+0x19610>
   2a874:	sub	r3, r3, #180	; 0xb4
   2a878:	cmp	r3, #1
   2a87c:	bhi	2a81c <__assert_fail@plt+0x19610>
   2a880:	cmp	r5, #0
   2a884:	cmpeq	r4, #1073741824	; 0x40000000
   2a888:	bne	2a81c <__assert_fail@plt+0x19610>
   2a88c:	mov	r3, #19
   2a890:	b	2a498 <__assert_fail@plt+0x1928c>
   2a894:	cmp	r3, #6
   2a898:	beq	2a880 <__assert_fail@plt+0x19674>
   2a89c:	bls	2a8b4 <__assert_fail@plt+0x196a8>
   2a8a0:	cmp	r3, #11
   2a8a4:	beq	2a880 <__assert_fail@plt+0x19674>
   2a8a8:	cmp	r3, #18
   2a8ac:	bne	2a81c <__assert_fail@plt+0x19610>
   2a8b0:	b	2a880 <__assert_fail@plt+0x19674>
   2a8b4:	sub	r3, r3, #2
   2a8b8:	cmp	r3, #1
   2a8bc:	bhi	2a81c <__assert_fail@plt+0x19610>
   2a8c0:	b	2a880 <__assert_fail@plt+0x19674>
   2a8c4:	mov	r2, #5
   2a8c8:	ldr	r1, [pc, #548]	; 2aaf4 <__assert_fail@plt+0x198e8>
   2a8cc:	mov	r0, #0
   2a8d0:	bl	10f90 <dcgettext@plt>
   2a8d4:	bl	54dd0 <warn@@Base>
   2a8d8:	mov	r2, #5
   2a8dc:	ldr	r1, [pc, #532]	; 2aaf8 <__assert_fail@plt+0x198ec>
   2a8e0:	mov	r0, #0
   2a8e4:	add	sp, sp, #84	; 0x54
   2a8e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a8ec:	b	10f90 <dcgettext@plt>
   2a8f0:	ldr	fp, [sp, #8]
   2a8f4:	add	r9, sl, #1696	; 0x6a0
   2a8f8:	add	r9, r9, #12
   2a8fc:	mov	r3, fp
   2a900:	str	r2, [sp]
   2a904:	mov	r0, r9
   2a908:	mov	r2, fp
   2a90c:	ldr	r1, [pc, #488]	; 2aafc <__assert_fail@plt+0x198f0>
   2a910:	bl	1114c <sprintf@plt>
   2a914:	orrs	r3, r6, r7
   2a918:	add	r2, fp, #4
   2a91c:	add	r3, sl, #1696	; 0x6a0
   2a920:	add	r2, r9, r2
   2a924:	str	r3, [sp, #12]
   2a928:	ldr	r9, [sl, #2732]	; 0xaac
   2a92c:	bne	2a2e0 <__assert_fail@plt+0x190d4>
   2a930:	b	2a4ec <__assert_fail@plt+0x192e0>
   2a934:	cmp	r3, #40	; 0x28
   2a938:	beq	2a9cc <__assert_fail@plt+0x197c0>
   2a93c:	cmp	r5, #0
   2a940:	cmpeq	r4, #268435456	; 0x10000000
   2a944:	moveq	r2, #1
   2a948:	movne	r2, #0
   2a94c:	cmp	r3, #20
   2a950:	movne	r3, #0
   2a954:	andeq	r3, r2, #1
   2a958:	cmp	r3, #0
   2a95c:	movne	r3, #118	; 0x76
   2a960:	strbne	r3, [r1]
   2a964:	beq	2a44c <__assert_fail@plt+0x19240>
   2a968:	b	2a574 <__assert_fail@plt+0x19368>
   2a96c:	ldr	r3, [sp, #16]
   2a970:	orr	r2, r4, r3
   2a974:	ldr	r3, [sp, #20]
   2a978:	orr	r3, r5, r3
   2a97c:	strd	r2, [sp, #16]
   2a980:	b	2a4d8 <__assert_fail@plt+0x192cc>
   2a984:	cmp	r5, #0
   2a988:	cmpeq	r4, #268435456	; 0x10000000
   2a98c:	moveq	r3, #25
   2a990:	bne	2a81c <__assert_fail@plt+0x19610>
   2a994:	b	2a498 <__assert_fail@plt+0x1928c>
   2a998:	and	r3, r4, #-268435456	; 0xf0000000
   2a99c:	str	r3, [sp, #64]	; 0x40
   2a9a0:	str	r0, [sp, #68]	; 0x44
   2a9a4:	ldrd	r2, [sp, #64]	; 0x40
   2a9a8:	orrs	r3, r2, r3
   2a9ac:	bicne	r2, r6, #-268435456	; 0xf0000000
   2a9b0:	movne	r6, r2
   2a9b4:	moveq	r3, #120	; 0x78
   2a9b8:	movne	r2, #112	; 0x70
   2a9bc:	movne	r7, r0
   2a9c0:	strbne	r2, [r1]
   2a9c4:	strbeq	r3, [r1]
   2a9c8:	b	2a574 <__assert_fail@plt+0x19368>
   2a9cc:	cmp	r5, #0
   2a9d0:	cmpeq	r4, #536870912	; 0x20000000
   2a9d4:	moveq	r3, #121	; 0x79
   2a9d8:	strbeq	r3, [r1]
   2a9dc:	bne	2a44c <__assert_fail@plt+0x19240>
   2a9e0:	b	2a574 <__assert_fail@plt+0x19368>
   2a9e4:	cmp	r5, #0
   2a9e8:	cmpeq	r4, #268435456	; 0x10000000
   2a9ec:	beq	2aa78 <__assert_fail@plt+0x1986c>
   2a9f0:	cmp	r5, #0
   2a9f4:	cmpeq	r4, #536870912	; 0x20000000
   2a9f8:	beq	2aa68 <__assert_fail@plt+0x1985c>
   2a9fc:	ldr	r3, [sp, #44]	; 0x2c
   2aa00:	ldrb	r3, [r3]
   2aa04:	cmp	r3, #13
   2aa08:	bne	2a81c <__assert_fail@plt+0x19610>
   2aa0c:	cmp	r5, #4
   2aa10:	cmpeq	r4, #0
   2aa14:	beq	2aad0 <__assert_fail@plt+0x198c4>
   2aa18:	bls	2aa98 <__assert_fail@plt+0x1988c>
   2aa1c:	cmp	r5, #16
   2aa20:	cmpeq	r4, #0
   2aa24:	beq	2aac8 <__assert_fail@plt+0x198bc>
   2aa28:	cmp	r5, #32
   2aa2c:	cmpeq	r4, #0
   2aa30:	beq	2aab8 <__assert_fail@plt+0x198ac>
   2aa34:	cmp	r5, #8
   2aa38:	cmpeq	r4, #0
   2aa3c:	bne	2a81c <__assert_fail@plt+0x19610>
   2aa40:	mov	r3, #15
   2aa44:	b	2a498 <__assert_fail@plt+0x1928c>
   2aa48:	ldr	r3, [sp, #32]
   2aa4c:	orr	r2, r4, r3
   2aa50:	ldr	r3, [sp, #36]	; 0x24
   2aa54:	orr	r3, r5, r3
   2aa58:	strd	r2, [sp, #32]
   2aa5c:	b	2a4d8 <__assert_fail@plt+0x192cc>
   2aa60:	mov	r3, #22
   2aa64:	b	2a498 <__assert_fail@plt+0x1928c>
   2aa68:	mov	r3, #11
   2aa6c:	b	2a498 <__assert_fail@plt+0x1928c>
   2aa70:	mov	r4, r2
   2aa74:	b	2a6a4 <__assert_fail@plt+0x19498>
   2aa78:	mov	r3, #10
   2aa7c:	b	2a498 <__assert_fail@plt+0x1928c>
   2aa80:	mov	r4, r2
   2aa84:	b	2a718 <__assert_fail@plt+0x1950c>
   2aa88:	mov	r3, #23
   2aa8c:	b	2a498 <__assert_fail@plt+0x1928c>
   2aa90:	mov	r4, r2
   2aa94:	b	2a788 <__assert_fail@plt+0x1957c>
   2aa98:	cmp	r5, #1
   2aa9c:	cmpeq	r4, #0
   2aaa0:	beq	2aac0 <__assert_fail@plt+0x198b4>
   2aaa4:	cmp	r5, #2
   2aaa8:	cmpeq	r4, #0
   2aaac:	moveq	r3, #13
   2aab0:	beq	2a498 <__assert_fail@plt+0x1928c>
   2aab4:	b	2a81c <__assert_fail@plt+0x19610>
   2aab8:	mov	r3, #17
   2aabc:	b	2a498 <__assert_fail@plt+0x1928c>
   2aac0:	mov	r3, #12
   2aac4:	b	2a498 <__assert_fail@plt+0x1928c>
   2aac8:	mov	r3, #16
   2aacc:	b	2a498 <__assert_fail@plt+0x1928c>
   2aad0:	mov	r3, #14
   2aad4:	b	2a498 <__assert_fail@plt+0x1928c>
   2aad8:	andeq	sl, r9, r8, lsr r4
   2aadc:	andeq	r0, r0, fp, ror #7
   2aae0:	strdeq	r0, [r0], -r3
   2aae4:	andeq	lr, r5, ip, asr #27
   2aae8:	andeq	r8, r6, r8, ror #10
   2aaec:	andeq	r8, r6, r4, ror r5
   2aaf0:	andeq	r8, r6, r4, lsl #11
   2aaf4:	andeq	r8, r6, r8, lsr #10
   2aaf8:	andeq	r2, r6, r0, asr #31
   2aafc:	andeq	r8, r6, ip, lsl r5
   2ab00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ab04:	mov	r3, #0
   2ab08:	ldr	r4, [r0, #84]	; 0x54
   2ab0c:	sub	sp, sp, #196	; 0xc4
   2ab10:	cmp	r4, r3
   2ab14:	mov	sl, r0
   2ab18:	str	r3, [r0, #96]	; 0x60
   2ab1c:	bne	2ab48 <__assert_fail@plt+0x1993c>
   2ab20:	ldrd	r2, [r0, #48]	; 0x30
   2ab24:	orrs	r3, r2, r3
   2ab28:	bne	2b6ac <__assert_fail@plt+0x1a4a0>
   2ab2c:	ldr	r3, [pc, #3728]	; 2b9c4 <__assert_fail@plt+0x1a7b8>
   2ab30:	ldr	r3, [r3, #2736]	; 0xab0
   2ab34:	cmp	r3, #0
   2ab38:	bne	2c188 <__assert_fail@plt+0x1af7c>
   2ab3c:	mov	r0, #1
   2ab40:	add	sp, sp, #196	; 0xc4
   2ab44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ab48:	ldr	fp, [pc, #3700]	; 2b9c4 <__assert_fail@plt+0x1a7b8>
   2ab4c:	ldr	r3, [fp, #2736]	; 0xab0
   2ab50:	cmp	r3, #0
   2ab54:	beq	2ab64 <__assert_fail@plt+0x19958>
   2ab58:	ldr	r0, [fp, #1592]	; 0x638
   2ab5c:	cmp	r0, #0
   2ab60:	beq	2b8d8 <__assert_fail@plt+0x1a6cc>
   2ab64:	ldr	r1, [fp]
   2ab68:	cmp	r1, #0
   2ab6c:	beq	2ad84 <__assert_fail@plt+0x19b78>
   2ab70:	mov	r1, #0
   2ab74:	mov	r0, sl
   2ab78:	bl	1835c <__assert_fail@plt+0x7150>
   2ab7c:	cmp	r0, #0
   2ab80:	beq	2ad94 <__assert_fail@plt+0x19b88>
   2ab84:	ldr	r6, [sl, #88]	; 0x58
   2ab88:	ldr	r8, [sl, #96]	; 0x60
   2ab8c:	cmp	r6, #0
   2ab90:	bne	2b6cc <__assert_fail@plt+0x1a4c0>
   2ab94:	ldr	r2, [fp]
   2ab98:	ldrh	r3, [sl, #66]	; 0x42
   2ab9c:	ldr	r4, [pc, #3620]	; 2b9c8 <__assert_fail@plt+0x1a7bc>
   2aba0:	cmp	r2, #0
   2aba4:	movne	r1, #4
   2aba8:	mov	r2, #0
   2abac:	moveq	r1, #8
   2abb0:	cmp	r3, #47	; 0x2f
   2abb4:	str	r1, [r4]
   2abb8:	str	r2, [fp, #1124]	; 0x464
   2abbc:	str	r2, [fp, #1128]	; 0x468
   2abc0:	str	r2, [fp, #1404]	; 0x57c
   2abc4:	str	r2, [fp, #660]	; 0x294
   2abc8:	bhi	2b32c <__assert_fail@plt+0x1a120>
   2abcc:	cmp	r3, #46	; 0x2e
   2abd0:	bcs	2c224 <__assert_fail@plt+0x1b018>
   2abd4:	cmp	r3, #8
   2abd8:	beq	2b740 <__assert_fail@plt+0x1a534>
   2abdc:	cmp	r3, #10
   2abe0:	beq	2b740 <__assert_fail@plt+0x1a534>
   2abe4:	ldr	r3, [sl, #84]	; 0x54
   2abe8:	cmp	r3, #0
   2abec:	beq	2c200 <__assert_fail@plt+0x1aff4>
   2abf0:	ldr	r7, [pc, #4000]	; 2bb98 <__assert_fail@plt+0x1a98c>
   2abf4:	mov	r9, #0
   2abf8:	cmp	r8, #0
   2abfc:	beq	2b264 <__assert_fail@plt+0x1a058>
   2ac00:	ldr	r0, [sl, #104]	; 0x68
   2ac04:	cmp	r0, #0
   2ac08:	beq	2b318 <__assert_fail@plt+0x1a10c>
   2ac0c:	ldr	r4, [r8]
   2ac10:	ldr	r3, [sl, #108]	; 0x6c
   2ac14:	cmp	r4, r3
   2ac18:	addcc	r4, r0, r4
   2ac1c:	bcs	2ade0 <__assert_fail@plt+0x19bd4>
   2ac20:	ldr	r2, [r8, #4]
   2ac24:	cmp	r2, #11
   2ac28:	beq	2ada0 <__assert_fail@plt+0x19b94>
   2ac2c:	cmp	r2, #3
   2ac30:	beq	2adf8 <__assert_fail@plt+0x19bec>
   2ac34:	cmp	r2, #18
   2ac38:	beq	2b394 <__assert_fail@plt+0x1a188>
   2ac3c:	cmp	r2, #2
   2ac40:	beq	2b27c <__assert_fail@plt+0x1a070>
   2ac44:	cmp	r2, #17
   2ac48:	bne	2b2e8 <__assert_fail@plt+0x1a0dc>
   2ac4c:	ldrd	r2, [r8, #56]	; 0x38
   2ac50:	cmp	r3, #0
   2ac54:	cmpeq	r2, #4
   2ac58:	bne	2b84c <__assert_fail@plt+0x1a640>
   2ac5c:	ldr	r3, [sl, #84]	; 0x54
   2ac60:	add	r9, r9, #1
   2ac64:	cmp	r3, r9
   2ac68:	add	r8, r8, #72	; 0x48
   2ac6c:	bhi	2abf8 <__assert_fail@plt+0x199ec>
   2ac70:	ldr	r2, [fp, #2736]	; 0xab0
   2ac74:	cmp	r2, #0
   2ac78:	beq	2ab3c <__assert_fail@plt+0x19930>
   2ac7c:	cmp	r3, #1
   2ac80:	bls	2c20c <__assert_fail@plt+0x1b000>
   2ac84:	mov	r2, #5
   2ac88:	ldr	r1, [pc, #3388]	; 2b9cc <__assert_fail@plt+0x1a7c0>
   2ac8c:	mov	r0, #0
   2ac90:	bl	10f90 <dcgettext@plt>
   2ac94:	bl	10f24 <printf@plt>
   2ac98:	ldr	r5, [fp]
   2ac9c:	ldr	r4, [fp, #2732]	; 0xaac
   2aca0:	cmp	r5, #0
   2aca4:	beq	2c1a0 <__assert_fail@plt+0x1af94>
   2aca8:	cmp	r4, #0
   2acac:	beq	2c2e0 <__assert_fail@plt+0x1b0d4>
   2acb0:	mov	r2, #5
   2acb4:	ldr	r1, [pc, #3760]	; 2bb6c <__assert_fail@plt+0x1a960>
   2acb8:	mov	r0, #0
   2acbc:	bl	10f90 <dcgettext@plt>
   2acc0:	bl	10f24 <printf@plt>
   2acc4:	mov	r2, #5
   2acc8:	ldr	r1, [pc, #3328]	; 2b9d0 <__assert_fail@plt+0x1a7c4>
   2accc:	mov	r0, #0
   2acd0:	bl	10f90 <dcgettext@plt>
   2acd4:	bl	10f24 <printf@plt>
   2acd8:	ldr	r3, [fp, #2732]	; 0xaac
   2acdc:	cmp	r3, #0
   2ace0:	bne	2c270 <__assert_fail@plt+0x1b064>
   2ace4:	ldr	r2, [sl, #84]	; 0x54
   2ace8:	ldr	r4, [sl, #96]	; 0x60
   2acec:	cmp	r2, #0
   2acf0:	beq	2b578 <__assert_fail@plt+0x1a36c>
   2acf4:	ldr	r8, [pc, #3676]	; 2bb58 <__assert_fail@plt+0x1a94c>
   2acf8:	mov	r5, #0
   2acfc:	ldr	r3, [r4, #4]
   2ad00:	cmp	r3, #16
   2ad04:	bhi	2b900 <__assert_fail@plt+0x1a6f4>
   2ad08:	cmp	r3, #14
   2ad0c:	bcs	2c070 <__assert_fail@plt+0x1ae64>
   2ad10:	cmp	r3, #5
   2ad14:	bls	2b998 <__assert_fail@plt+0x1a78c>
   2ad18:	cmp	r3, #9
   2ad1c:	beq	2b91c <__assert_fail@plt+0x1a710>
   2ad20:	cmp	r3, #11
   2ad24:	beq	2b9a8 <__assert_fail@plt+0x1a79c>
   2ad28:	cmp	r3, #6
   2ad2c:	beq	2b9a8 <__assert_fail@plt+0x1a79c>
   2ad30:	sub	r2, r3, #2
   2ad34:	cmp	r2, #16
   2ad38:	ldrls	pc, [pc, r2, lsl #2]
   2ad3c:	b	2b638 <__assert_fail@plt+0x1a42c>
   2ad40:	strdeq	fp, [r2], -r8
   2ad44:	andeq	fp, r2, r8, lsr r6
   2ad48:	andeq	fp, r2, ip, asr #11
   2ad4c:	ldrdeq	fp, [r2], -r0
   2ad50:	ldrdeq	fp, [r2], -r0
   2ad54:	andeq	fp, r2, r8, lsr r6
   2ad58:	andeq	fp, r2, r8, lsr r6
   2ad5c:	andeq	fp, r2, ip, asr #11
   2ad60:	andeq	fp, r2, r8, lsr r6
   2ad64:	strdeq	fp, [r2], -r8
   2ad68:	andeq	fp, r2, r8, lsr r6
   2ad6c:	andeq	fp, r2, r8, lsr r6
   2ad70:	ldrdeq	fp, [r2], -r0
   2ad74:	ldrdeq	fp, [r2], -r0
   2ad78:	ldrdeq	fp, [r2], -r0
   2ad7c:	strdeq	fp, [r2], -r8
   2ad80:	ldrdeq	fp, [r2], -r0
   2ad84:	mov	r0, sl
   2ad88:	bl	1862c <__assert_fail@plt+0x7420>
   2ad8c:	cmp	r0, #0
   2ad90:	bne	2ab84 <__assert_fail@plt+0x19978>
   2ad94:	mov	r0, #0
   2ad98:	add	sp, sp, #196	; 0xc4
   2ad9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ada0:	ldr	r3, [fp, #1124]	; 0x464
   2ada4:	cmp	r3, #0
   2ada8:	bne	2b35c <__assert_fail@plt+0x1a150>
   2adac:	ldr	r1, [fp]
   2adb0:	ldrd	r2, [r8, #56]	; 0x38
   2adb4:	cmp	r1, #0
   2adb8:	beq	2b3b0 <__assert_fail@plt+0x1a1a4>
   2adbc:	cmp	r3, #0
   2adc0:	cmpeq	r2, #16
   2adc4:	bne	2b77c <__assert_fail@plt+0x1a570>
   2adc8:	ldr	r2, [pc, #3076]	; 2b9d4 <__assert_fail@plt+0x1a7c8>
   2adcc:	mov	r1, r8
   2add0:	mov	r0, sl
   2add4:	bl	1772c <__assert_fail@plt+0x6520>
   2add8:	str	r0, [fp, #1124]	; 0x464
   2addc:	b	2ac5c <__assert_fail@plt+0x19a50>
   2ade0:	mov	r2, #5
   2ade4:	mov	r1, r7
   2ade8:	mov	r0, #0
   2adec:	bl	10f90 <dcgettext@plt>
   2adf0:	mov	r4, r0
   2adf4:	b	2ac20 <__assert_fail@plt+0x19a14>
   2adf8:	ldr	r1, [pc, #3032]	; 2b9d8 <__assert_fail@plt+0x1a7cc>
   2adfc:	mov	r0, r4
   2ae00:	bl	10f18 <strcmp@plt>
   2ae04:	cmp	r0, #0
   2ae08:	beq	2b374 <__assert_fail@plt+0x1a168>
   2ae0c:	ldr	r0, [pc, #3016]	; 2b9dc <__assert_fail@plt+0x1a7d0>
   2ae10:	ldr	r2, [pc, #3016]	; 2b9e0 <__assert_fail@plt+0x1a7d4>
   2ae14:	ldr	r1, [pc, #3016]	; 2b9e4 <__assert_fail@plt+0x1a7d8>
   2ae18:	ldr	r3, [r0]
   2ae1c:	ldr	r0, [pc, #3012]	; 2b9e8 <__assert_fail@plt+0x1a7dc>
   2ae20:	ldr	ip, [pc, #3012]	; 2b9ec <__assert_fail@plt+0x1a7e0>
   2ae24:	ldr	r5, [r2]
   2ae28:	ldr	lr, [r0]
   2ae2c:	ldr	r0, [pc, #3004]	; 2b9f0 <__assert_fail@plt+0x1a7e4>
   2ae30:	orr	r2, lr, r3
   2ae34:	str	r3, [sp, #72]	; 0x48
   2ae38:	ldr	r3, [r1]
   2ae3c:	ldr	r1, [pc, #2992]	; 2b9f4 <__assert_fail@plt+0x1a7e8>
   2ae40:	orr	r2, r2, r5
   2ae44:	str	lr, [sp, #68]	; 0x44
   2ae48:	ldr	lr, [ip]
   2ae4c:	ldr	ip, [pc, #2980]	; 2b9f8 <__assert_fail@plt+0x1a7ec>
   2ae50:	orr	r2, r2, r3
   2ae54:	str	r3, [sp, #84]	; 0x54
   2ae58:	ldr	r3, [r0]
   2ae5c:	ldr	r0, [pc, #2968]	; 2b9fc <__assert_fail@plt+0x1a7f0>
   2ae60:	orr	r2, r2, lr
   2ae64:	str	r5, [sp, #80]	; 0x50
   2ae68:	ldr	r5, [r1]
   2ae6c:	ldr	r1, [pc, #2956]	; 2ba00 <__assert_fail@plt+0x1a7f4>
   2ae70:	orr	r2, r2, r3
   2ae74:	str	lr, [sp, #88]	; 0x58
   2ae78:	str	r3, [sp, #76]	; 0x4c
   2ae7c:	ldr	lr, [pc, #2944]	; 2ba04 <__assert_fail@plt+0x1a7f8>
   2ae80:	ldr	r3, [ip]
   2ae84:	orr	r2, r2, r5
   2ae88:	str	r5, [sp, #100]	; 0x64
   2ae8c:	ldr	ip, [pc, #2932]	; 2ba08 <__assert_fail@plt+0x1a7fc>
   2ae90:	ldr	r5, [r0]
   2ae94:	orr	r2, r2, r3
   2ae98:	str	r3, [sp, #104]	; 0x68
   2ae9c:	ldr	r0, [pc, #2920]	; 2ba0c <__assert_fail@plt+0x1a800>
   2aea0:	ldr	r3, [r1]
   2aea4:	ldr	r1, [pc, #2916]	; 2ba10 <__assert_fail@plt+0x1a804>
   2aea8:	orr	r2, r2, r5
   2aeac:	ldr	lr, [lr]
   2aeb0:	orr	r2, r2, r3
   2aeb4:	str	r3, [sp, #92]	; 0x5c
   2aeb8:	ldr	r3, [ip]
   2aebc:	ldr	r0, [r0]
   2aec0:	str	r5, [sp, #108]	; 0x6c
   2aec4:	orr	r2, r2, lr
   2aec8:	ldr	r5, [r1]
   2aecc:	ldr	r6, [fp, #2740]	; 0xab4
   2aed0:	orr	r2, r2, r3
   2aed4:	orr	r2, r2, r0
   2aed8:	orr	r5, r6, r5
   2aedc:	str	r3, [sp, #116]	; 0x74
   2aee0:	orrs	r3, r2, r5
   2aee4:	str	lr, [sp, #112]	; 0x70
   2aee8:	str	r0, [sp, #96]	; 0x60
   2aeec:	bne	2afec <__assert_fail@plt+0x19de0>
   2aef0:	ldr	r3, [sp, #76]	; 0x4c
   2aef4:	cmp	r3, #0
   2aef8:	beq	2af10 <__assert_fail@plt+0x19d04>
   2aefc:	ldr	r1, [pc, #2832]	; 2ba14 <__assert_fail@plt+0x1a808>
   2af00:	mov	r0, r4
   2af04:	bl	10f18 <strcmp@plt>
   2af08:	cmp	r0, #0
   2af0c:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2af10:	ldr	r2, [pc, #2816]	; 2ba18 <__assert_fail@plt+0x1a80c>
   2af14:	ldr	r2, [r2]
   2af18:	cmp	r2, #0
   2af1c:	beq	2af48 <__assert_fail@plt+0x19d3c>
   2af20:	ldr	r1, [pc, #2804]	; 2ba1c <__assert_fail@plt+0x1a810>
   2af24:	mov	r0, r4
   2af28:	bl	10f18 <strcmp@plt>
   2af2c:	cmp	r0, #0
   2af30:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2af34:	ldr	r1, [pc, #2788]	; 2ba20 <__assert_fail@plt+0x1a814>
   2af38:	mov	r0, r4
   2af3c:	bl	10f18 <strcmp@plt>
   2af40:	cmp	r0, #0
   2af44:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2af48:	cmp	r6, #0
   2af4c:	bne	2c43c <__assert_fail@plt+0x1b230>
   2af50:	ldr	r2, [pc, #2764]	; 2ba24 <__assert_fail@plt+0x1a818>
   2af54:	ldr	r2, [r2]
   2af58:	cmp	r2, #0
   2af5c:	bne	2c4c0 <__assert_fail@plt+0x1b2b4>
   2af60:	ldr	r1, [pc, #3156]	; 2bbbc <__assert_fail@plt+0x1a9b0>
   2af64:	ldr	r2, [pc, #2748]	; 2ba28 <__assert_fail@plt+0x1a81c>
   2af68:	ldr	r5, [r1]
   2af6c:	ldr	r2, [r2]
   2af70:	orrs	r3, r5, r2
   2af74:	beq	2c49c <__assert_fail@plt+0x1b290>
   2af78:	mov	r0, r4
   2af7c:	mov	r2, #7
   2af80:	ldr	r1, [pc, #3116]	; 2bbb4 <__assert_fail@plt+0x1a9a8>
   2af84:	bl	111d0 <strncmp@plt>
   2af88:	cmp	r0, #0
   2af8c:	addeq	r4, r4, #7
   2af90:	bne	2c49c <__assert_fail@plt+0x1b290>
   2af94:	cmp	r5, #0
   2af98:	beq	2afb0 <__assert_fail@plt+0x19da4>
   2af9c:	ldr	r1, [pc, #3036]	; 2bb80 <__assert_fail@plt+0x1a974>
   2afa0:	mov	r0, r4
   2afa4:	bl	10f18 <strcmp@plt>
   2afa8:	cmp	r0, #0
   2afac:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2afb0:	ldr	r3, [pc, #2672]	; 2ba28 <__assert_fail@plt+0x1a81c>
   2afb4:	ldr	r3, [r3]
   2afb8:	cmp	r3, #0
   2afbc:	beq	2ac5c <__assert_fail@plt+0x19a50>
   2afc0:	mov	r0, r4
   2afc4:	ldr	r1, [pc, #2656]	; 2ba2c <__assert_fail@plt+0x1a820>
   2afc8:	bl	10f18 <strcmp@plt>
   2afcc:	cmp	r0, #0
   2afd0:	bne	2ac5c <__assert_fail@plt+0x19a50>
   2afd4:	mov	r3, #4
   2afd8:	mov	r2, r9
   2afdc:	add	r1, sl, #116	; 0x74
   2afe0:	add	r0, sl, #112	; 0x70
   2afe4:	bl	24d20 <__assert_fail@plt+0x13b14>
   2afe8:	b	2ac5c <__assert_fail@plt+0x19a50>
   2afec:	mov	r2, #7
   2aff0:	ldr	r1, [pc, #2616]	; 2ba30 <__assert_fail@plt+0x1a824>
   2aff4:	mov	r0, r4
   2aff8:	bl	111d0 <strncmp@plt>
   2affc:	cmp	r0, #0
   2b000:	bne	2b89c <__assert_fail@plt+0x1a690>
   2b004:	ldrb	r2, [r4, #1]
   2b008:	cmp	r2, #122	; 0x7a
   2b00c:	addeq	r4, r4, #8
   2b010:	addne	r4, r4, #7
   2b014:	cmp	r6, #0
   2b018:	bne	2afd4 <__assert_fail@plt+0x19dc8>
   2b01c:	cmp	r5, #0
   2b020:	beq	2b054 <__assert_fail@plt+0x19e48>
   2b024:	mov	r2, #4
   2b028:	ldr	r1, [pc, #2952]	; 2bbb8 <__assert_fail@plt+0x1a9ac>
   2b02c:	mov	r0, r4
   2b030:	bl	111d0 <strncmp@plt>
   2b034:	cmp	r0, #0
   2b038:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b03c:	mov	r2, #5
   2b040:	ldr	r1, [pc, #2540]	; 2ba34 <__assert_fail@plt+0x1a828>
   2b044:	mov	r0, r4
   2b048:	bl	111d0 <strncmp@plt>
   2b04c:	cmp	r0, #0
   2b050:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b054:	ldr	r3, [sp, #68]	; 0x44
   2b058:	cmp	r3, #0
   2b05c:	bne	2c31c <__assert_fail@plt+0x1b110>
   2b060:	ldr	r3, [sp, #72]	; 0x48
   2b064:	cmp	r3, #0
   2b068:	beq	2b098 <__assert_fail@plt+0x19e8c>
   2b06c:	ldr	r1, [pc, #2500]	; 2ba38 <__assert_fail@plt+0x1a82c>
   2b070:	mov	r0, r4
   2b074:	bl	10f18 <strcmp@plt>
   2b078:	cmp	r0, #0
   2b07c:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b080:	mov	r2, #5
   2b084:	ldr	r1, [pc, #2480]	; 2ba3c <__assert_fail@plt+0x1a830>
   2b088:	mov	r0, r4
   2b08c:	bl	111d0 <strncmp@plt>
   2b090:	cmp	r0, #0
   2b094:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b098:	ldr	r3, [sp, #80]	; 0x50
   2b09c:	cmp	r3, #0
   2b0a0:	beq	2c3fc <__assert_fail@plt+0x1b1f0>
   2b0a4:	mov	r2, #8
   2b0a8:	ldr	r1, [pc, #2448]	; 2ba40 <__assert_fail@plt+0x1a834>
   2b0ac:	mov	r0, r4
   2b0b0:	bl	111d0 <strncmp@plt>
   2b0b4:	cmp	r0, #0
   2b0b8:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b0bc:	ldr	r3, [sp, #84]	; 0x54
   2b0c0:	cmp	r3, #0
   2b0c4:	bne	2c4fc <__assert_fail@plt+0x1b2f0>
   2b0c8:	mov	r2, #12
   2b0cc:	ldr	r1, [pc, #2800]	; 2bbc4 <__assert_fail@plt+0x1a9b8>
   2b0d0:	mov	r0, r4
   2b0d4:	bl	111d0 <strncmp@plt>
   2b0d8:	cmp	r0, #0
   2b0dc:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b0e0:	ldr	r3, [sp, #88]	; 0x58
   2b0e4:	cmp	r3, #0
   2b0e8:	beq	2b104 <__assert_fail@plt+0x19ef8>
   2b0ec:	mov	r2, #7
   2b0f0:	ldr	r1, [pc, #2356]	; 2ba2c <__assert_fail@plt+0x1a820>
   2b0f4:	mov	r0, r4
   2b0f8:	bl	111d0 <strncmp@plt>
   2b0fc:	cmp	r0, #0
   2b100:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b104:	ldr	r3, [sp, #92]	; 0x5c
   2b108:	cmp	r3, #0
   2b10c:	beq	2b140 <__assert_fail@plt+0x19f34>
   2b110:	mov	r2, #6
   2b114:	ldr	r1, [pc, #2344]	; 2ba44 <__assert_fail@plt+0x1a838>
   2b118:	mov	r0, r4
   2b11c:	bl	111d0 <strncmp@plt>
   2b120:	cmp	r0, #0
   2b124:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b128:	mov	r2, #8
   2b12c:	ldr	r1, [pc, #2324]	; 2ba48 <__assert_fail@plt+0x1a83c>
   2b130:	mov	r0, r4
   2b134:	bl	111d0 <strncmp@plt>
   2b138:	cmp	r0, #0
   2b13c:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b140:	ldr	r3, [sp, #76]	; 0x4c
   2b144:	cmp	r3, #0
   2b148:	beq	2b164 <__assert_fail@plt+0x19f58>
   2b14c:	mov	r2, #5
   2b150:	ldr	r1, [pc, #2292]	; 2ba4c <__assert_fail@plt+0x1a840>
   2b154:	mov	r0, r4
   2b158:	bl	111d0 <strncmp@plt>
   2b15c:	cmp	r0, #0
   2b160:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b164:	ldr	r3, [sp, #100]	; 0x64
   2b168:	cmp	r3, #0
   2b16c:	beq	2b1a0 <__assert_fail@plt+0x19f94>
   2b170:	mov	r2, #7
   2b174:	ldr	r1, [pc, #2260]	; 2ba50 <__assert_fail@plt+0x1a844>
   2b178:	mov	r0, r4
   2b17c:	bl	111d0 <strncmp@plt>
   2b180:	cmp	r0, #0
   2b184:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b188:	mov	r2, #5
   2b18c:	ldr	r1, [pc, #2240]	; 2ba54 <__assert_fail@plt+0x1a848>
   2b190:	mov	r0, r4
   2b194:	bl	111d0 <strncmp@plt>
   2b198:	cmp	r0, #0
   2b19c:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b1a0:	ldr	r3, [sp, #104]	; 0x68
   2b1a4:	cmp	r3, #0
   2b1a8:	beq	2b1c4 <__assert_fail@plt+0x19fb8>
   2b1ac:	mov	r2, #3
   2b1b0:	ldr	r1, [pc, #2208]	; 2ba58 <__assert_fail@plt+0x1a84c>
   2b1b4:	mov	r0, r4
   2b1b8:	bl	111d0 <strncmp@plt>
   2b1bc:	cmp	r0, #0
   2b1c0:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b1c4:	ldr	r3, [sp, #108]	; 0x6c
   2b1c8:	cmp	r3, #0
   2b1cc:	beq	2b200 <__assert_fail@plt+0x19ff4>
   2b1d0:	mov	r2, #3
   2b1d4:	ldr	r1, [pc, #2176]	; 2ba5c <__assert_fail@plt+0x1a850>
   2b1d8:	mov	r0, r4
   2b1dc:	bl	111d0 <strncmp@plt>
   2b1e0:	cmp	r0, #0
   2b1e4:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b1e8:	mov	r2, #8
   2b1ec:	ldr	r1, [pc, #2156]	; 2ba60 <__assert_fail@plt+0x1a854>
   2b1f0:	mov	r0, r4
   2b1f4:	bl	111d0 <strncmp@plt>
   2b1f8:	cmp	r0, #0
   2b1fc:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b200:	ldr	r3, [sp, #112]	; 0x70
   2b204:	cmp	r3, #0
   2b208:	beq	2b224 <__assert_fail@plt+0x1a018>
   2b20c:	mov	r2, #4
   2b210:	ldr	r1, [pc, #2124]	; 2ba64 <__assert_fail@plt+0x1a858>
   2b214:	mov	r0, r4
   2b218:	bl	111d0 <strncmp@plt>
   2b21c:	cmp	r0, #0
   2b220:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b224:	ldr	r3, [sp, #116]	; 0x74
   2b228:	cmp	r3, #0
   2b22c:	beq	2ac5c <__assert_fail@plt+0x19a50>
   2b230:	mov	r2, #8
   2b234:	ldr	r1, [pc, #2092]	; 2ba68 <__assert_fail@plt+0x1a85c>
   2b238:	mov	r0, r4
   2b23c:	bl	111d0 <strncmp@plt>
   2b240:	cmp	r0, #0
   2b244:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2b248:	mov	r0, r4
   2b24c:	mov	r2, #8
   2b250:	ldr	r1, [pc, #2068]	; 2ba6c <__assert_fail@plt+0x1a860>
   2b254:	bl	111d0 <strncmp@plt>
   2b258:	cmp	r0, #0
   2b25c:	bne	2ac5c <__assert_fail@plt+0x19a50>
   2b260:	b	2afd4 <__assert_fail@plt+0x19dc8>
   2b264:	mov	r2, #5
   2b268:	ldr	r1, [pc, #2048]	; 2ba70 <__assert_fail@plt+0x1a864>
   2b26c:	mov	r0, r8
   2b270:	bl	10f90 <dcgettext@plt>
   2b274:	mov	r4, r0
   2b278:	b	2ac20 <__assert_fail@plt+0x19a14>
   2b27c:	ldr	r3, [fp]
   2b280:	cmp	r3, #0
   2b284:	beq	2b30c <__assert_fail@plt+0x1a100>
   2b288:	mov	r4, #16
   2b28c:	mov	r5, #0
   2b290:	ldrd	r2, [r8, #56]	; 0x38
   2b294:	cmp	r3, r5
   2b298:	cmpeq	r2, r4
   2b29c:	beq	2ac5c <__assert_fail@plt+0x19a50>
   2b2a0:	ldr	r1, [pc, #1996]	; 2ba74 <__assert_fail@plt+0x1a868>
   2b2a4:	add	r0, sp, #152	; 0x98
   2b2a8:	bl	1114c <sprintf@plt>
   2b2ac:	mov	r2, #5
   2b2b0:	ldr	r1, [pc, #1984]	; 2ba78 <__assert_fail@plt+0x1a86c>
   2b2b4:	mov	r0, #0
   2b2b8:	bl	10f90 <dcgettext@plt>
   2b2bc:	add	r2, sp, #152	; 0x98
   2b2c0:	mov	r1, r9
   2b2c4:	bl	548ac <error@@Base>
   2b2c8:	mov	r2, #5
   2b2cc:	ldr	r1, [pc, #1960]	; 2ba7c <__assert_fail@plt+0x1a870>
   2b2d0:	mov	r0, #0
   2b2d4:	bl	10f90 <dcgettext@plt>
   2b2d8:	mov	r1, r4
   2b2dc:	bl	548ac <error@@Base>
   2b2e0:	strd	r4, [r8, #56]	; 0x38
   2b2e4:	b	2ac5c <__assert_fail@plt+0x19a50>
   2b2e8:	cmp	r2, #9
   2b2ec:	beq	2b694 <__assert_fail@plt+0x1a488>
   2b2f0:	cmp	r2, #4
   2b2f4:	bne	2ae0c <__assert_fail@plt+0x19c00>
   2b2f8:	ldr	r3, [fp]
   2b2fc:	cmp	r3, #0
   2b300:	movne	r4, #12
   2b304:	movne	r5, #0
   2b308:	bne	2b290 <__assert_fail@plt+0x1a084>
   2b30c:	mov	r4, #24
   2b310:	mov	r5, #0
   2b314:	b	2b290 <__assert_fail@plt+0x1a084>
   2b318:	mov	r2, #5
   2b31c:	ldr	r1, [pc, #2184]	; 2bbac <__assert_fail@plt+0x1a9a0>
   2b320:	bl	10f90 <dcgettext@plt>
   2b324:	mov	r4, r0
   2b328:	b	2ac20 <__assert_fail@plt+0x19a14>
   2b32c:	cmp	r3, #120	; 0x78
   2b330:	beq	2b340 <__assert_fail@plt+0x1a134>
   2b334:	ldr	r2, [pc, #1860]	; 2ba80 <__assert_fail@plt+0x1a874>
   2b338:	cmp	r3, r2
   2b33c:	bne	2abe4 <__assert_fail@plt+0x199d8>
   2b340:	ldr	r3, [sl, #60]	; 0x3c
   2b344:	and	r3, r3, #127	; 0x7f
   2b348:	cmp	r3, #117	; 0x75
   2b34c:	bne	2abe4 <__assert_fail@plt+0x199d8>
   2b350:	mov	r3, #2
   2b354:	str	r3, [r4]
   2b358:	b	2abe4 <__assert_fail@plt+0x199d8>
   2b35c:	mov	r2, #5
   2b360:	ldr	r1, [pc, #1820]	; 2ba84 <__assert_fail@plt+0x1a878>
   2b364:	mov	r0, #0
   2b368:	bl	10f90 <dcgettext@plt>
   2b36c:	bl	548ac <error@@Base>
   2b370:	b	2ac5c <__assert_fail@plt+0x19a50>
   2b374:	ldr	r6, [fp, #1128]	; 0x468
   2b378:	mov	r2, #5
   2b37c:	cmp	r6, #0
   2b380:	beq	2b7fc <__assert_fail@plt+0x1a5f0>
   2b384:	ldr	r1, [pc, #1788]	; 2ba88 <__assert_fail@plt+0x1a87c>
   2b388:	bl	10f90 <dcgettext@plt>
   2b38c:	bl	548ac <error@@Base>
   2b390:	b	2ac5c <__assert_fail@plt+0x19a50>
   2b394:	mov	r0, #8
   2b398:	bl	5861c <warn@@Base+0x384c>
   2b39c:	ldr	r3, [fp, #660]	; 0x294
   2b3a0:	str	r8, [r0]
   2b3a4:	str	r3, [r0, #4]
   2b3a8:	str	r0, [fp, #660]	; 0x294
   2b3ac:	b	2ac5c <__assert_fail@plt+0x19a50>
   2b3b0:	cmp	r3, #0
   2b3b4:	cmpeq	r2, #24
   2b3b8:	bne	2b7ec <__assert_fail@plt+0x1a5e0>
   2b3bc:	ldr	r2, [pc, #1552]	; 2b9d4 <__assert_fail@plt+0x1a7c8>
   2b3c0:	mov	r1, r8
   2b3c4:	mov	r0, sl
   2b3c8:	bl	17bf4 <__assert_fail@plt+0x69e8>
   2b3cc:	b	2add8 <__assert_fail@plt+0x19bcc>
   2b3d0:	ldr	r3, [r4, #44]	; 0x2c
   2b3d4:	cmp	r3, #0
   2b3d8:	beq	2b3f8 <__assert_fail@plt+0x1a1ec>
   2b3dc:	ldr	r1, [pc, #1880]	; 2bb3c <__assert_fail@plt+0x1a930>
   2b3e0:	mov	r2, #5
   2b3e4:	mov	r0, #0
   2b3e8:	bl	10f90 <dcgettext@plt>
   2b3ec:	ldr	r2, [r4, #44]	; 0x2c
   2b3f0:	mov	r1, r5
   2b3f4:	bl	54dd0 <warn@@Base>
   2b3f8:	ldrd	r0, [r4, #32]
   2b3fc:	ldrd	r2, [sl, #8]
   2b400:	cmp	r1, r3
   2b404:	cmpeq	r0, r2
   2b408:	bls	2b42c <__assert_fail@plt+0x1a220>
   2b40c:	ldr	r1, [r4, #4]
   2b410:	subs	r3, r1, #8
   2b414:	sub	r2, r1, #1
   2b418:	movne	r3, #1
   2b41c:	cmn	r2, #-1610612734	; 0xa0000002
   2b420:	movhi	r3, #0
   2b424:	cmp	r3, #0
   2b428:	bne	2c1e4 <__assert_fail@plt+0x1afd8>
   2b42c:	mov	r1, r5
   2b430:	ldr	r0, [pc, #1620]	; 2ba8c <__assert_fail@plt+0x1a880>
   2b434:	bl	10f24 <printf@plt>
   2b438:	ldr	r0, [fp, #2732]	; 0xaac
   2b43c:	cmp	r0, #0
   2b440:	bne	2bd5c <__assert_fail@plt+0x1ab50>
   2b444:	ldr	r1, [sl, #104]	; 0x68
   2b448:	cmp	r1, #0
   2b44c:	beq	2c088 <__assert_fail@plt+0x1ae7c>
   2b450:	ldr	r3, [r4]
   2b454:	ldr	r2, [sl, #108]	; 0x6c
   2b458:	cmp	r3, r2
   2b45c:	addcc	r1, r1, r3
   2b460:	bcs	2bf3c <__assert_fail@plt+0x1ad30>
   2b464:	mvn	r0, #16
   2b468:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   2b46c:	ldr	r2, [r8]
   2b470:	ldr	r3, [pc, #1560]	; 2ba90 <__assert_fail@plt+0x1a884>
   2b474:	cmp	r2, #0
   2b478:	ldr	r1, [r4, #4]
   2b47c:	mov	r0, sl
   2b480:	ldr	r6, [pc, #1548]	; 2ba94 <__assert_fail@plt+0x1a888>
   2b484:	moveq	r6, r3
   2b488:	bl	1a7c4 <__assert_fail@plt+0x95b8>
   2b48c:	mov	r1, r0
   2b490:	mov	r0, r6
   2b494:	bl	10f24 <printf@plt>
   2b498:	ldr	r3, [fp]
   2b49c:	cmp	r3, #0
   2b4a0:	bne	2bbc8 <__assert_fail@plt+0x1a9bc>
   2b4a4:	ldr	r3, [r8]
   2b4a8:	cmp	r3, #0
   2b4ac:	bne	2be18 <__assert_fail@plt+0x1ac0c>
   2b4b0:	ldr	r3, [fp, #2732]	; 0xaac
   2b4b4:	cmp	r3, #0
   2b4b8:	beq	2bd7c <__assert_fail@plt+0x1ab70>
   2b4bc:	ldr	r1, [r4, #4]
   2b4c0:	mov	r0, sl
   2b4c4:	bl	1a7c4 <__assert_fail@plt+0x95b8>
   2b4c8:	mov	r1, r0
   2b4cc:	ldr	r0, [pc, #1476]	; 2ba98 <__assert_fail@plt+0x1a88c>
   2b4d0:	bl	10f24 <printf@plt>
   2b4d4:	mov	r2, #6
   2b4d8:	ldrd	r0, [r4, #16]
   2b4dc:	bl	14244 <__assert_fail@plt+0x3038>
   2b4e0:	ldrd	r2, [r4, #24]
   2b4e4:	asr	r1, r2, #31
   2b4e8:	cmp	r3, r1
   2b4ec:	cmpeq	r2, r2
   2b4f0:	beq	2c128 <__assert_fail@plt+0x1af1c>
   2b4f4:	ldr	r0, [pc, #1552]	; 2bb0c <__assert_fail@plt+0x1a900>
   2b4f8:	bl	10f24 <printf@plt>
   2b4fc:	mov	r2, #6
   2b500:	ldrd	r0, [r4, #24]
   2b504:	bl	14244 <__assert_fail@plt+0x3038>
   2b508:	ldr	r1, [r4, #40]	; 0x28
   2b50c:	ldr	r0, [pc, #1416]	; 2ba9c <__assert_fail@plt+0x1a890>
   2b510:	bl	10f24 <printf@plt>
   2b514:	mov	r2, #6
   2b518:	ldrd	r0, [r4, #32]
   2b51c:	bl	14244 <__assert_fail@plt+0x3038>
   2b520:	ldr	r3, [pc, #1520]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2b524:	mov	r0, #32
   2b528:	ldr	r1, [r3]
   2b52c:	bl	11158 <putc@plt>
   2b530:	mov	r2, #6
   2b534:	ldrd	r0, [r4, #56]	; 0x38
   2b538:	bl	14244 <__assert_fail@plt+0x3038>
   2b53c:	ldr	r2, [r4, #48]	; 0x30
   2b540:	ldr	r1, [r4, #44]	; 0x2c
   2b544:	ldr	r0, [pc, #1364]	; 2baa0 <__assert_fail@plt+0x1a894>
   2b548:	bl	10f24 <printf@plt>
   2b54c:	ldr	r3, [fp, #2732]	; 0xaac
   2b550:	cmp	r3, #0
   2b554:	bne	2bc80 <__assert_fail@plt+0x1aa74>
   2b558:	ldr	r2, [sl, #84]	; 0x54
   2b55c:	add	r5, r5, #1
   2b560:	cmp	r2, r5
   2b564:	add	r4, r4, #72	; 0x48
   2b568:	bhi	2acfc <__assert_fail@plt+0x19af0>
   2b56c:	ldr	r3, [fp, #2732]	; 0xaac
   2b570:	cmp	r3, #0
   2b574:	bne	2ab3c <__assert_fail@plt+0x19930>
   2b578:	mov	r2, #5
   2b57c:	ldr	r1, [pc, #1312]	; 2baa4 <__assert_fail@plt+0x1a898>
   2b580:	mov	r0, #0
   2b584:	bl	10f90 <dcgettext@plt>
   2b588:	bl	10f24 <printf@plt>
   2b58c:	ldrh	r3, [sl, #66]	; 0x42
   2b590:	sub	r0, r3, #180	; 0xb4
   2b594:	cmp	r3, #62	; 0x3e
   2b598:	cmpne	r0, #1
   2b59c:	movls	r0, #1
   2b5a0:	movhi	r0, #0
   2b5a4:	bhi	2c2f8 <__assert_fail@plt+0x1b0ec>
   2b5a8:	mov	r2, #5
   2b5ac:	ldr	r1, [pc, #1268]	; 2baa8 <__assert_fail@plt+0x1a89c>
   2b5b0:	mov	r0, #0
   2b5b4:	bl	10f90 <dcgettext@plt>
   2b5b8:	bl	10f24 <printf@plt>
   2b5bc:	ldr	r0, [pc, #1256]	; 2baac <__assert_fail@plt+0x1a8a0>
   2b5c0:	bl	11014 <puts@plt>
   2b5c4:	mov	r0, #1
   2b5c8:	b	2ab40 <__assert_fail@plt+0x19934>
   2b5cc:	ldr	r0, [r4, #44]	; 0x2c
   2b5d0:	cmp	r0, #0
   2b5d4:	beq	2c014 <__assert_fail@plt+0x1ae08>
   2b5d8:	ldr	r3, [sl, #84]	; 0x54
   2b5dc:	cmp	r0, r3
   2b5e0:	bcs	2b62c <__assert_fail@plt+0x1a420>
   2b5e4:	ldr	r3, [sl, #96]	; 0x60
   2b5e8:	add	r0, r0, r0, lsl #3
   2b5ec:	add	r0, r3, r0, lsl #3
   2b5f0:	ldr	r3, [r0, #4]
   2b5f4:	cmp	r3, #1
   2b5f8:	cmpne	r3, #14
   2b5fc:	movne	r1, #1
   2b600:	moveq	r1, #0
   2b604:	cmn	r3, #-1610612735	; 0xa0000001
   2b608:	movhi	r2, #0
   2b60c:	movls	r2, #1
   2b610:	and	r2, r2, r1
   2b614:	sub	r3, r3, #7
   2b618:	cmp	r3, #1
   2b61c:	movls	r3, #0
   2b620:	andhi	r3, r2, #1
   2b624:	cmp	r3, #0
   2b628:	beq	2b3f8 <__assert_fail@plt+0x1a1ec>
   2b62c:	mov	r2, #5
   2b630:	ldr	r1, [pc, #1144]	; 2bab0 <__assert_fail@plt+0x1a8a4>
   2b634:	b	2b3e4 <__assert_fail@plt+0x1a1d8>
   2b638:	cmp	r3, #8
   2b63c:	beq	2b42c <__assert_fail@plt+0x1a220>
   2b640:	ldr	r2, [r4, #8]
   2b644:	mov	ip, #0
   2b648:	and	r1, r2, #64	; 0x40
   2b64c:	str	r1, [sp, #56]	; 0x38
   2b650:	str	ip, [sp, #60]	; 0x3c
   2b654:	ldrd	r0, [sp, #56]	; 0x38
   2b658:	orrs	r1, r0, r1
   2b65c:	beq	2c0dc <__assert_fail@plt+0x1aed0>
   2b660:	ldr	r3, [r4, #44]	; 0x2c
   2b664:	cmp	r3, ip
   2b668:	beq	2b678 <__assert_fail@plt+0x1a46c>
   2b66c:	ldr	r2, [sl, #84]	; 0x54
   2b670:	cmp	r3, r2
   2b674:	bcc	2b3f8 <__assert_fail@plt+0x1a1ec>
   2b678:	mov	r2, #5
   2b67c:	ldr	r1, [pc, #1072]	; 2bab4 <__assert_fail@plt+0x1a8a8>
   2b680:	mov	r0, #0
   2b684:	bl	10f90 <dcgettext@plt>
   2b688:	mov	r1, r5
   2b68c:	bl	54dd0 <warn@@Base>
   2b690:	b	2b3f8 <__assert_fail@plt+0x1a1ec>
   2b694:	ldr	r3, [fp]
   2b698:	cmp	r3, #0
   2b69c:	movne	r4, #8
   2b6a0:	movne	r5, #0
   2b6a4:	bne	2b290 <__assert_fail@plt+0x1a084>
   2b6a8:	b	2b288 <__assert_fail@plt+0x1a07c>
   2b6ac:	mov	r2, #5
   2b6b0:	ldr	r1, [pc, #1024]	; 2bab8 <__assert_fail@plt+0x1a8ac>
   2b6b4:	mov	r0, r4
   2b6b8:	bl	10f90 <dcgettext@plt>
   2b6bc:	bl	54dd0 <warn@@Base>
   2b6c0:	mov	r0, r4
   2b6c4:	add	sp, sp, #196	; 0xc4
   2b6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b6cc:	ldr	r3, [sl, #84]	; 0x54
   2b6d0:	cmp	r6, r3
   2b6d4:	bcs	2ab94 <__assert_fail@plt+0x19988>
   2b6d8:	add	r6, r6, r6, lsl #3
   2b6dc:	add	r6, r8, r6, lsl #3
   2b6e0:	ldrd	r4, [r6, #32]
   2b6e4:	orrs	r3, r4, r5
   2b6e8:	beq	2ab94 <__assert_fail@plt+0x19988>
   2b6ec:	mov	r2, #5
   2b6f0:	ldr	r1, [pc, #964]	; 2babc <__assert_fail@plt+0x1a8b0>
   2b6f4:	mov	r0, #0
   2b6f8:	ldr	r7, [r6, #24]
   2b6fc:	bl	10f90 <dcgettext@plt>
   2b700:	mov	r8, #1
   2b704:	mov	r9, #0
   2b708:	mov	r3, r7
   2b70c:	strd	r8, [sp]
   2b710:	strd	r4, [sp, #8]
   2b714:	add	r2, sl, #8
   2b718:	add	r1, sl, #4
   2b71c:	str	r0, [sp, #16]
   2b720:	mov	r0, #0
   2b724:	bl	1717c <__assert_fail@plt+0x5f70>
   2b728:	ldr	r8, [sl, #96]	; 0x60
   2b72c:	cmp	r0, #0
   2b730:	str	r0, [sl, #104]	; 0x68
   2b734:	ldrne	r0, [r6, #32]
   2b738:	str	r0, [sl, #108]	; 0x6c
   2b73c:	b	2ab94 <__assert_fail@plt+0x19988>
   2b740:	ldr	r3, [sl, #60]	; 0x3c
   2b744:	and	r3, r3, #61440	; 0xf000
   2b748:	cmp	r3, #16384	; 0x4000
   2b74c:	bne	2abe4 <__assert_fail@plt+0x199d8>
   2b750:	cmp	r8, #0
   2b754:	beq	2b770 <__assert_fail@plt+0x1a564>
   2b758:	ldr	r1, [pc, #864]	; 2bac0 <__assert_fail@plt+0x1a8b4>
   2b75c:	mov	r0, sl
   2b760:	bl	1bd7c <__assert_fail@plt+0xab70>
   2b764:	ldr	r8, [sl, #96]	; 0x60
   2b768:	cmp	r0, #0
   2b76c:	bne	2abe4 <__assert_fail@plt+0x199d8>
   2b770:	mov	r3, #8
   2b774:	str	r3, [r4]
   2b778:	b	2abe4 <__assert_fail@plt+0x199d8>
   2b77c:	mov	r6, #16
   2b780:	mov	r4, #16
   2b784:	mov	r5, #0
   2b788:	ldr	r1, [pc, #740]	; 2ba74 <__assert_fail@plt+0x1a868>
   2b78c:	add	r0, sp, #152	; 0x98
   2b790:	bl	1114c <sprintf@plt>
   2b794:	mov	r2, #5
   2b798:	ldr	r1, [pc, #728]	; 2ba78 <__assert_fail@plt+0x1a86c>
   2b79c:	mov	r0, #0
   2b7a0:	bl	10f90 <dcgettext@plt>
   2b7a4:	add	r2, sp, #152	; 0x98
   2b7a8:	mov	r1, r9
   2b7ac:	bl	548ac <error@@Base>
   2b7b0:	mov	r2, #5
   2b7b4:	ldr	r1, [pc, #704]	; 2ba7c <__assert_fail@plt+0x1a870>
   2b7b8:	mov	r0, #0
   2b7bc:	bl	10f90 <dcgettext@plt>
   2b7c0:	mov	r1, r6
   2b7c4:	bl	548ac <error@@Base>
   2b7c8:	ldr	r3, [fp]
   2b7cc:	strd	r4, [r8, #56]	; 0x38
   2b7d0:	cmp	r3, #0
   2b7d4:	bne	2adc8 <__assert_fail@plt+0x19bbc>
   2b7d8:	ldr	r2, [pc, #500]	; 2b9d4 <__assert_fail@plt+0x1a7c8>
   2b7dc:	mov	r1, r8
   2b7e0:	mov	r0, sl
   2b7e4:	bl	17bf4 <__assert_fail@plt+0x69e8>
   2b7e8:	b	2add8 <__assert_fail@plt+0x19bcc>
   2b7ec:	mov	r6, #24
   2b7f0:	mov	r4, #24
   2b7f4:	mov	r5, #0
   2b7f8:	b	2b788 <__assert_fail@plt+0x1a57c>
   2b7fc:	ldr	r3, [r8, #24]
   2b800:	ldr	r1, [pc, #700]	; 2bac4 <__assert_fail@plt+0x1a8b8>
   2b804:	ldrd	r4, [r8, #32]
   2b808:	str	r3, [sp, #68]	; 0x44
   2b80c:	bl	10f90 <dcgettext@plt>
   2b810:	strd	r4, [sp, #8]
   2b814:	mov	r4, #1
   2b818:	mov	r5, #0
   2b81c:	ldr	r3, [sp, #68]	; 0x44
   2b820:	strd	r4, [sp]
   2b824:	add	r2, sl, #8
   2b828:	add	r1, sl, #4
   2b82c:	str	r0, [sp, #16]
   2b830:	mov	r0, r6
   2b834:	bl	1717c <__assert_fail@plt+0x5f70>
   2b838:	cmp	r0, #0
   2b83c:	str	r0, [fp, #1128]	; 0x468
   2b840:	ldrne	r0, [r8, #32]
   2b844:	str	r0, [fp, #1400]	; 0x578
   2b848:	b	2ac5c <__assert_fail@plt+0x19a50>
   2b84c:	ldr	r1, [pc, #544]	; 2ba74 <__assert_fail@plt+0x1a868>
   2b850:	add	r0, sp, #152	; 0x98
   2b854:	bl	1114c <sprintf@plt>
   2b858:	mov	r2, #5
   2b85c:	ldr	r1, [pc, #532]	; 2ba78 <__assert_fail@plt+0x1a86c>
   2b860:	mov	r0, #0
   2b864:	bl	10f90 <dcgettext@plt>
   2b868:	add	r2, sp, #152	; 0x98
   2b86c:	mov	r1, r9
   2b870:	bl	548ac <error@@Base>
   2b874:	mov	r2, #5
   2b878:	ldr	r1, [pc, #508]	; 2ba7c <__assert_fail@plt+0x1a870>
   2b87c:	mov	r0, #0
   2b880:	bl	10f90 <dcgettext@plt>
   2b884:	mov	r1, #4
   2b888:	bl	548ac <error@@Base>
   2b88c:	mov	r2, #4
   2b890:	mov	r3, #0
   2b894:	strd	r2, [r8, #56]	; 0x38
   2b898:	b	2ac5c <__assert_fail@plt+0x19a50>
   2b89c:	mov	r2, #8
   2b8a0:	ldr	r1, [pc, #544]	; 2bac8 <__assert_fail@plt+0x1a8bc>
   2b8a4:	mov	r0, r4
   2b8a8:	bl	111d0 <strncmp@plt>
   2b8ac:	cmp	r0, #0
   2b8b0:	beq	2b004 <__assert_fail@plt+0x19df8>
   2b8b4:	cmp	r5, #0
   2b8b8:	beq	2aef0 <__assert_fail@plt+0x19ce4>
   2b8bc:	mov	r2, #17
   2b8c0:	ldr	r1, [pc, #516]	; 2bacc <__assert_fail@plt+0x1a8c0>
   2b8c4:	mov	r0, r4
   2b8c8:	bl	111d0 <strncmp@plt>
   2b8cc:	cmp	r0, #0
   2b8d0:	bne	2aef0 <__assert_fail@plt+0x19ce4>
   2b8d4:	b	2afd4 <__assert_fail@plt+0x19dc8>
   2b8d8:	mov	r2, #5
   2b8dc:	str	r2, [sp]
   2b8e0:	mov	r3, r4
   2b8e4:	ldr	r2, [pc, #484]	; 2bad0 <__assert_fail@plt+0x1a8c4>
   2b8e8:	ldr	r1, [pc, #484]	; 2bad4 <__assert_fail@plt+0x1a8c8>
   2b8ec:	bl	11200 <dcngettext@plt>
   2b8f0:	ldr	r2, [sl, #48]	; 0x30
   2b8f4:	ldr	r1, [sl, #84]	; 0x54
   2b8f8:	bl	10f24 <printf@plt>
   2b8fc:	b	2ab64 <__assert_fail@plt+0x19958>
   2b900:	cmn	r3, #-1879048183	; 0x90000009
   2b904:	beq	2b9a8 <__assert_fail@plt+0x1a79c>
   2b908:	bhi	2b950 <__assert_fail@plt+0x1a744>
   2b90c:	cmp	r3, #18
   2b910:	bls	2b91c <__assert_fail@plt+0x1a710>
   2b914:	cmn	r3, #-1879048182	; 0x9000000a
   2b918:	bne	2ad30 <__assert_fail@plt+0x19b24>
   2b91c:	ldr	r1, [r4, #40]	; 0x28
   2b920:	cmp	r1, #0
   2b924:	cmpne	r1, r2
   2b928:	bcc	2b978 <__assert_fail@plt+0x1a76c>
   2b92c:	ldr	r1, [pc, #420]	; 2bad8 <__assert_fail@plt+0x1a8cc>
   2b930:	mov	r2, #5
   2b934:	mov	r0, #0
   2b938:	bl	10f90 <dcgettext@plt>
   2b93c:	ldr	r2, [r4, #40]	; 0x28
   2b940:	mov	r1, r5
   2b944:	bl	54dd0 <warn@@Base>
   2b948:	ldr	r3, [r4, #4]
   2b94c:	b	2ad30 <__assert_fail@plt+0x19b24>
   2b950:	cmn	r3, #-1879048189	; 0x90000003
   2b954:	bcc	2ad30 <__assert_fail@plt+0x19b24>
   2b958:	cmn	r3, #-1879048190	; 0x90000002
   2b95c:	bls	2b9a8 <__assert_fail@plt+0x1a79c>
   2b960:	cmn	r3, #-1879048191	; 0x90000001
   2b964:	bne	2ad30 <__assert_fail@plt+0x19b24>
   2b968:	ldr	r1, [r4, #40]	; 0x28
   2b96c:	cmp	r1, #0
   2b970:	cmpne	r1, r2
   2b974:	bcs	2b92c <__assert_fail@plt+0x1a720>
   2b978:	ldr	r2, [sl, #96]	; 0x60
   2b97c:	add	r1, r1, r1, lsl #3
   2b980:	add	r1, r2, r1, lsl #3
   2b984:	ldr	r2, [r1, #4]
   2b988:	cmp	r2, #2
   2b98c:	cmpne	r2, #11
   2b990:	beq	2ad30 <__assert_fail@plt+0x19b24>
   2b994:	b	2b92c <__assert_fail@plt+0x1a720>
   2b998:	cmp	r3, #4
   2b99c:	bcs	2b91c <__assert_fail@plt+0x1a710>
   2b9a0:	cmp	r3, #2
   2b9a4:	bne	2ad30 <__assert_fail@plt+0x19b24>
   2b9a8:	ldr	r1, [r4, #40]	; 0x28
   2b9ac:	cmp	r1, #0
   2b9b0:	cmpne	r1, r2
   2b9b4:	bcc	2c0c0 <__assert_fail@plt+0x1aeb4>
   2b9b8:	mov	r2, #5
   2b9bc:	ldr	r1, [pc, #280]	; 2badc <__assert_fail@plt+0x1a8d0>
   2b9c0:	b	2b934 <__assert_fail@plt+0x1a728>
   2b9c4:	andeq	sl, r9, r8, lsr r4
   2b9c8:	andeq	lr, r9, ip, lsr #26
   2b9cc:	andeq	r8, r6, r8, asr #16
   2b9d0:	andeq	r8, r6, r0, lsl #17
   2b9d4:	andeq	sl, r9, ip, lsr #19
   2b9d8:	andeq	r8, r6, ip, ror #14
   2b9dc:	andeq	lr, r9, r4, lsr sp
   2b9e0:	andeq	lr, r9, r0, lsl sp
   2b9e4:	andeq	lr, r9, r0, asr #26
   2b9e8:	andeq	lr, r9, r8, lsl sp
   2b9ec:	andeq	lr, r9, r8, lsl #26
   2b9f0:	andeq	lr, r9, ip, lsl #26
   2b9f4:	andeq	lr, r9, r4, asr #26
   2b9f8:	andeq	lr, r9, r0, lsl #26
   2b9fc:	andeq	lr, r9, r4, lsl sp
   2ba00:	andeq	lr, r9, r8, lsr sp
   2ba04:	andeq	lr, r9, r0, lsr #26
   2ba08:	andeq	lr, r9, r4, asr sp
   2ba0c:	andeq	lr, r9, ip, asr #26
   2ba10:	andeq	lr, r9, r4, lsl #26
   2ba14:	strdeq	r8, [r6], -ip
   2ba18:	andeq	lr, r9, r0, asr sp
   2ba1c:	andeq	r8, r6, r8, lsl #16
   2ba20:	andeq	r8, r6, r4, lsl r8
   2ba24:	andeq	lr, r9, ip, lsr sp
   2ba28:	andeq	lr, r9, r4, lsr #26
   2ba2c:	andeq	r3, r8, r4, lsr #18
   2ba30:			; <UNDEFINED> instruction: 0x000687b4
   2ba34:	andeq	r3, r8, ip, ror fp
   2ba38:	andeq	r3, r8, r0, ror r9
   2ba3c:	andeq	r8, r6, r8, asr #15
   2ba40:	muleq	r8, r0, r9
   2ba44:	andeq	r3, r8, r8, ror #21
   2ba48:	andeq	r3, r8, r8, lsl #22
   2ba4c:	andeq	r3, r8, r4, asr #18
   2ba50:	andeq	r3, r8, r0, ror #19
   2ba54:	andeq	r3, r8, r0, lsl #20
   2ba58:	andeq	r3, r8, ip, lsr #20
   2ba5c:	andeq	r3, r8, r8, asr sl
   2ba60:	andeq	r3, r8, r4, ror sl
   2ba64:	andeq	r5, r8, r8, asr #16
   2ba68:	ldrdeq	r8, [r6], -r0
   2ba6c:	ldrdeq	r8, [r6], -ip
   2ba70:	muleq	r6, r4, r8
   2ba74:	andeq	r2, r6, r8, asr sp
   2ba78:	andeq	r8, r6, r4, lsl #14
   2ba7c:	andeq	r8, r6, r0, lsr r7
   2ba80:			; <UNDEFINED> instruction: 0x0000feb0
   2ba84:	ldrdeq	r8, [r6], -r4
   2ba88:	andeq	r8, r6, r4, ror r7
   2ba8c:	andeq	r8, r6, r8, ror #24
   2ba90:	andeq	r8, r6, r0, lsr #11
   2ba94:	muleq	r6, r8, r5
   2ba98:	andeq	r8, r6, ip, lsl sp
   2ba9c:	andeq	r8, r6, ip, lsr sp
   2baa0:	andeq	r8, r6, ip, asr #26
   2baa4:	andeq	r8, r6, r0, asr #27
   2baa8:	andeq	r8, r6, r0, lsr #29
   2baac:	andeq	r8, r6, r8, asr #29
   2bab0:	andeq	r8, r6, r8, ror fp
   2bab4:	strdeq	r8, [r6], -ip
   2bab8:			; <UNDEFINED> instruction: 0x000685bc
   2babc:	andeq	r5, r6, r8, lsr #14
   2bac0:			; <UNDEFINED> instruction: 0x000686bc
   2bac4:	andeq	r8, r6, r4, lsr #15
   2bac8:			; <UNDEFINED> instruction: 0x000687bc
   2bacc:	andeq	r8, r6, r8, ror #15
   2bad0:	andeq	r8, r6, r8, asr #12
   2bad4:	andeq	r8, r6, r4, lsl #13
   2bad8:	ldrdeq	r8, [r6], -r8	; <UNPREDICTABLE>
   2badc:	andeq	r8, r6, r0, lsl fp
   2bae0:	andeq	r8, r6, r0, lsl #25
   2bae4:	andeq	r8, r6, r0, lsr #25
   2bae8:	andeq	r8, r6, ip, lsr #25
   2baec:			; <UNDEFINED> instruction: 0x00068cb8
   2baf0:	andeq	r8, r6, r0, lsl #27
   2baf4:	strdeq	sl, [r6], -r4
   2baf8:	muleq	r6, ip, sp
   2bafc:			; <UNDEFINED> instruction: 0x00068db8
   2bb00:	andeq	r8, r6, r4, ror ip
   2bb04:	andeq	r8, r6, r0, asr #26
   2bb08:	andeq	r8, r6, r8, ror #26
   2bb0c:	andeq	r6, r6, ip, lsl r5
   2bb10:	andeq	r8, r6, r0, lsl sp
   2bb14:	andeq	r2, r6, r0, ror sp
   2bb18:	andeq	sl, r9, ip, lsr #8
   2bb1c:	andeq	fp, r6, ip, ror #2
   2bb20:	andeq	r8, r6, r8, lsr #25
   2bb24:	andeq	pc, r0, r1, lsl #30
   2bb28:			; <UNDEFINED> instruction: 0x000685b4
   2bb2c:	andeq	r8, r6, r8, ror #29
   2bb30:	andeq	r8, r6, r0, asr #23
   2bb34:	andeq	r8, r6, r8, asr #22
   2bb38:	muleq	r6, r8, ip
   2bb3c:	andeq	r8, r6, ip, asr #23
   2bb40:	andeq	r8, r6, r0, lsr sp
   2bb44:	andeq	r8, r6, ip, asr sp
   2bb48:			; <UNDEFINED> instruction: 0x00068cb0
   2bb4c:	andeq	r8, r6, r8, lsl #26
   2bb50:	andeq	r8, r6, r0, lsl #26
   2bb54:	andeq	r8, r6, r0, lsr #12
   2bb58:	andeq	lr, r9, r8, lsr #26
   2bb5c:	andeq	r8, r6, r4, lsl r9
   2bb60:	andeq	r8, r6, r4, lsr ip
   2bb64:	andeq	r8, r6, ip, asr r8
   2bb68:	andeq	r8, r6, r8, asr #21
   2bb6c:	andeq	r8, r6, r0, ror r8
   2bb70:			; <UNDEFINED> instruction: 0x000689b8
   2bb74:	strdeq	r8, [r6], -ip
   2bb78:	andeq	r8, r6, r0, asr #17
   2bb7c:			; <UNDEFINED> instruction: 0x00068ebc
   2bb80:	andeq	r3, r8, r4, lsl #18
   2bb84:	andeq	r8, r6, ip, asr r9
   2bb88:	andeq	r8, r6, r0, asr #20
   2bb8c:	andeq	r8, r6, r4, lsl #21
   2bb90:	andeq	r8, r6, ip, lsr #11
   2bb94:			; <UNDEFINED> instruction: 0x00068bb4
   2bb98:	andeq	r3, r6, ip
   2bb9c:	andeq	r8, r6, ip, lsl #27
   2bba0:	andeq	r3, r8, r0, asr #21
   2bba4:	andeq	r8, r6, r4, lsr #16
   2bba8:	andeq	r8, r6, r4, lsr r8
   2bbac:	muleq	r6, ip, r8
   2bbb0:	andeq	r8, r6, ip, lsr #29
   2bbb4:	andeq	r8, r6, r0, ror #29
   2bbb8:	andeq	r8, r6, r0, ror #10
   2bbbc:	andeq	lr, r9, r0, lsr sp
   2bbc0:	muleq	r8, r8, sl
   2bbc4:			; <UNDEFINED> instruction: 0x000839b8
   2bbc8:	mov	r2, #6
   2bbcc:	ldrd	r0, [r4, #16]
   2bbd0:	bl	14244 <__assert_fail@plt+0x3038>
   2bbd4:	ldr	r3, [r4, #56]	; 0x38
   2bbd8:	ldr	r2, [r4, #32]
   2bbdc:	ldr	r1, [r4, #24]
   2bbe0:	ldr	r0, [pc, #-264]	; 2bae0 <__assert_fail@plt+0x1a8d4>
   2bbe4:	bl	10f24 <printf@plt>
   2bbe8:	ldr	r3, [fp, #2732]	; 0xaac
   2bbec:	cmp	r3, #0
   2bbf0:	beq	2bfe4 <__assert_fail@plt+0x1add8>
   2bbf4:	ldr	r3, [pc, #-228]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2bbf8:	mov	r2, #2
   2bbfc:	mov	r1, #1
   2bc00:	ldr	r3, [r3]
   2bc04:	ldr	r0, [pc, #-256]	; 2bb0c <__assert_fail@plt+0x1a900>
   2bc08:	bl	10fcc <fwrite@plt>
   2bc0c:	ldr	r1, [r4, #40]	; 0x28
   2bc10:	ldr	r3, [sl, #84]	; 0x54
   2bc14:	ldr	r2, [fp, #2732]	; 0xaac
   2bc18:	cmp	r1, r3
   2bc1c:	bcs	2bf50 <__assert_fail@plt+0x1ad44>
   2bc20:	cmp	r2, #0
   2bc24:	moveq	r6, r2
   2bc28:	beq	2bf84 <__assert_fail@plt+0x1ad78>
   2bc2c:	mov	r6, #0
   2bc30:	ldr	r0, [pc, #-340]	; 2bae4 <__assert_fail@plt+0x1a8d8>
   2bc34:	bl	10f24 <printf@plt>
   2bc38:	ldr	r2, [r4, #48]	; 0x30
   2bc3c:	ldr	r1, [r4, #44]	; 0x2c
   2bc40:	ldr	r0, [pc, #-352]	; 2bae8 <__assert_fail@plt+0x1a8dc>
   2bc44:	bl	10f24 <printf@plt>
   2bc48:	cmp	r6, #0
   2bc4c:	beq	2b54c <__assert_fail@plt+0x1a340>
   2bc50:	ldrb	r0, [r6]
   2bc54:	cmp	r0, #0
   2bc58:	bne	2b54c <__assert_fail@plt+0x1a340>
   2bc5c:	mov	r2, #5
   2bc60:	ldr	r1, [pc, #-380]	; 2baec <__assert_fail@plt+0x1a8e0>
   2bc64:	bl	10f90 <dcgettext@plt>
   2bc68:	ldr	r2, [r4, #40]	; 0x28
   2bc6c:	mov	r1, r5
   2bc70:	bl	54dd0 <warn@@Base>
   2bc74:	ldr	r3, [fp, #2732]	; 0xaac
   2bc78:	cmp	r3, #0
   2bc7c:	beq	2b558 <__assert_fail@plt+0x1a34c>
   2bc80:	ldrd	r2, [r4, #8]
   2bc84:	add	r1, sl, #66	; 0x42
   2bc88:	add	r0, sl, #23
   2bc8c:	bl	2a280 <__assert_fail@plt+0x19074>
   2bc90:	mov	r1, r0
   2bc94:	ldr	r0, [pc, #-428]	; 2baf0 <__assert_fail@plt+0x1a8e4>
   2bc98:	bl	10f24 <printf@plt>
   2bc9c:	ldr	r3, [r4, #8]
   2bca0:	and	r3, r3, #2048	; 0x800
   2bca4:	str	r3, [sp, #24]
   2bca8:	mov	r3, #0
   2bcac:	str	r3, [sp, #28]
   2bcb0:	ldrd	r2, [sp, #24]
   2bcb4:	orrs	r3, r2, r3
   2bcb8:	beq	2b558 <__assert_fail@plt+0x1a34c>
   2bcbc:	mov	r2, #5
   2bcc0:	ldr	r1, [pc, #-468]	; 2baf4 <__assert_fail@plt+0x1a8e8>
   2bcc4:	mov	r0, #0
   2bcc8:	ldr	r9, [r4, #24]
   2bccc:	bl	10f90 <dcgettext@plt>
   2bcd0:	mov	r6, #24
   2bcd4:	mov	r7, #0
   2bcd8:	mov	r3, r9
   2bcdc:	strd	r6, [sp, #8]
   2bce0:	mov	r6, #1
   2bce4:	mov	r7, #0
   2bce8:	add	r2, sl, #8
   2bcec:	strd	r6, [sp]
   2bcf0:	add	r1, sl, #4
   2bcf4:	str	r0, [sp, #16]
   2bcf8:	add	r0, sp, #152	; 0x98
   2bcfc:	bl	1717c <__assert_fail@plt+0x5f70>
   2bd00:	cmp	r0, #0
   2bd04:	beq	2b558 <__assert_fail@plt+0x1a34c>
   2bd08:	mov	r3, #0
   2bd0c:	mov	r2, #24
   2bd10:	add	r1, sp, #152	; 0x98
   2bd14:	add	r0, sp, #128	; 0x80
   2bd18:	bl	12c30 <__assert_fail@plt+0x1a24>
   2bd1c:	ldr	r3, [sp, #128]	; 0x80
   2bd20:	cmp	r3, #1
   2bd24:	beq	2c3d0 <__assert_fail@plt+0x1b1c4>
   2bd28:	ldr	r1, [pc, #-568]	; 2baf8 <__assert_fail@plt+0x1a8ec>
   2bd2c:	mov	r0, #0
   2bd30:	mov	r2, #5
   2bd34:	bl	10f90 <dcgettext@plt>
   2bd38:	ldr	r1, [sp, #128]	; 0x80
   2bd3c:	bl	10f24 <printf@plt>
   2bd40:	ldrd	r0, [sp, #136]	; 0x88
   2bd44:	mov	r2, #6
   2bd48:	bl	14244 <__assert_fail@plt+0x3038>
   2bd4c:	ldr	r1, [sp, #144]	; 0x90
   2bd50:	ldr	r0, [pc, #-604]	; 2bafc <__assert_fail@plt+0x1a8f0>
   2bd54:	bl	10f24 <printf@plt>
   2bd58:	b	2b558 <__assert_fail@plt+0x1a34c>
   2bd5c:	add	r1, sl, #108	; 0x6c
   2bd60:	mov	r2, r4
   2bd64:	add	r0, sl, #104	; 0x68
   2bd68:	bl	16c64 <__assert_fail@plt+0x5a58>
   2bd6c:	mov	r1, r0
   2bd70:	ldr	r0, [pc, #-632]	; 2bb00 <__assert_fail@plt+0x1a8f4>
   2bd74:	bl	10f24 <printf@plt>
   2bd78:	b	2b46c <__assert_fail@plt+0x1a260>
   2bd7c:	ldr	r3, [pc, #-620]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2bd80:	mov	r0, #32
   2bd84:	ldr	r1, [r3]
   2bd88:	bl	11158 <putc@plt>
   2bd8c:	mov	r2, #6
   2bd90:	ldrd	r0, [r4, #16]
   2bd94:	bl	14244 <__assert_fail@plt+0x3038>
   2bd98:	ldrd	r2, [r4, #24]
   2bd9c:	asr	r1, r2, #31
   2bda0:	cmp	r3, r1
   2bda4:	cmpeq	r2, r2
   2bda8:	beq	2c138 <__assert_fail@plt+0x1af2c>
   2bdac:	ldr	r0, [pc, #-680]	; 2bb0c <__assert_fail@plt+0x1a900>
   2bdb0:	bl	10f24 <printf@plt>
   2bdb4:	mov	r2, #6
   2bdb8:	ldrd	r0, [r4, #24]
   2bdbc:	bl	14244 <__assert_fail@plt+0x3038>
   2bdc0:	ldr	r0, [pc, #-708]	; 2bb04 <__assert_fail@plt+0x1a8f8>
   2bdc4:	bl	10f24 <printf@plt>
   2bdc8:	ldrd	r0, [r4, #32]
   2bdcc:	mov	r2, #6
   2bdd0:	bl	14244 <__assert_fail@plt+0x3038>
   2bdd4:	ldr	r0, [pc, #-720]	; 2bb0c <__assert_fail@plt+0x1a900>
   2bdd8:	bl	10f24 <printf@plt>
   2bddc:	ldrd	r0, [r4, #56]	; 0x38
   2bde0:	mov	r2, #6
   2bde4:	bl	14244 <__assert_fail@plt+0x3038>
   2bde8:	ldrd	r2, [r4, #8]
   2bdec:	add	r1, sl, #66	; 0x42
   2bdf0:	add	r0, sl, #23
   2bdf4:	bl	2a280 <__assert_fail@plt+0x19074>
   2bdf8:	mov	r1, r0
   2bdfc:	ldr	r0, [pc, #-716]	; 2bb38 <__assert_fail@plt+0x1a92c>
   2be00:	bl	10f24 <printf@plt>
   2be04:	ldrd	r2, [r4, #44]	; 0x2c
   2be08:	ldr	r1, [r4, #40]	; 0x28
   2be0c:	ldr	r0, [pc, #-780]	; 2bb08 <__assert_fail@plt+0x1a8fc>
   2be10:	bl	10f24 <printf@plt>
   2be14:	b	2b54c <__assert_fail@plt+0x1a340>
   2be18:	mov	r2, #6
   2be1c:	ldrd	r0, [r4, #16]
   2be20:	bl	14244 <__assert_fail@plt+0x3038>
   2be24:	ldrd	r2, [r4, #24]
   2be28:	asr	r1, r2, #31
   2be2c:	cmp	r3, r1
   2be30:	cmpeq	r2, r2
   2be34:	beq	2c178 <__assert_fail@plt+0x1af6c>
   2be38:	ldr	r3, [pc, #-808]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2be3c:	mov	r0, #32
   2be40:	ldr	r1, [r3]
   2be44:	bl	11158 <putc@plt>
   2be48:	mov	r2, #6
   2be4c:	ldrd	r0, [r4, #24]
   2be50:	bl	14244 <__assert_fail@plt+0x3038>
   2be54:	ldrd	r2, [r4, #32]
   2be58:	mov	r1, #0
   2be5c:	str	r1, [sp, #36]	; 0x24
   2be60:	str	r2, [sp, #32]
   2be64:	ldrd	r0, [sp, #32]
   2be68:	cmp	r3, r1
   2be6c:	cmpeq	r2, r0
   2be70:	beq	2c168 <__assert_fail@plt+0x1af5c>
   2be74:	ldr	r3, [pc, #-868]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2be78:	mov	r0, #32
   2be7c:	ldr	r1, [r3]
   2be80:	bl	11158 <putc@plt>
   2be84:	mov	r2, #6
   2be88:	ldrd	r0, [r4, #32]
   2be8c:	bl	14244 <__assert_fail@plt+0x3038>
   2be90:	ldrd	r2, [r4, #56]	; 0x38
   2be94:	mov	r1, #0
   2be98:	str	r1, [sp, #44]	; 0x2c
   2be9c:	str	r2, [sp, #40]	; 0x28
   2bea0:	ldrd	r0, [sp, #40]	; 0x28
   2bea4:	cmp	r3, r1
   2bea8:	cmpeq	r2, r0
   2beac:	beq	2c158 <__assert_fail@plt+0x1af4c>
   2beb0:	ldr	r3, [pc, #-928]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2beb4:	mov	r0, #32
   2beb8:	ldr	r1, [r3]
   2bebc:	bl	11158 <putc@plt>
   2bec0:	mov	r2, #6
   2bec4:	ldrd	r0, [r4, #56]	; 0x38
   2bec8:	bl	14244 <__assert_fail@plt+0x3038>
   2becc:	ldr	r3, [fp, #2732]	; 0xaac
   2bed0:	cmp	r3, #0
   2bed4:	beq	2c0a0 <__assert_fail@plt+0x1ae94>
   2bed8:	ldr	r3, [pc, #-968]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2bedc:	mov	r2, #2
   2bee0:	mov	r1, #1
   2bee4:	ldr	r3, [r3]
   2bee8:	ldr	r0, [pc, #-996]	; 2bb0c <__assert_fail@plt+0x1a900>
   2beec:	bl	10fcc <fwrite@plt>
   2bef0:	ldr	r2, [r4, #44]	; 0x2c
   2bef4:	ldr	r1, [r4, #40]	; 0x28
   2bef8:	ldr	r0, [pc, #-1008]	; 2bb10 <__assert_fail@plt+0x1a904>
   2befc:	bl	10f24 <printf@plt>
   2bf00:	ldrd	r2, [r4, #48]	; 0x30
   2bf04:	mov	r1, #0
   2bf08:	str	r1, [sp, #52]	; 0x34
   2bf0c:	str	r2, [sp, #48]	; 0x30
   2bf10:	ldrd	r0, [sp, #48]	; 0x30
   2bf14:	cmp	r3, r1
   2bf18:	cmpeq	r2, r0
   2bf1c:	beq	2c148 <__assert_fail@plt+0x1af3c>
   2bf20:	ldr	r0, [pc, #-1044]	; 2bb14 <__assert_fail@plt+0x1a908>
   2bf24:	bl	10f24 <printf@plt>
   2bf28:	ldr	r3, [pc, #-1048]	; 2bb18 <__assert_fail@plt+0x1a90c>
   2bf2c:	mov	r0, #10
   2bf30:	ldr	r1, [r3]
   2bf34:	bl	11158 <putc@plt>
   2bf38:	b	2b54c <__assert_fail@plt+0x1a340>
   2bf3c:	ldr	r1, [pc, #-940]	; 2bb98 <__assert_fail@plt+0x1a98c>
   2bf40:	mov	r2, #5
   2bf44:	bl	10f90 <dcgettext@plt>
   2bf48:	mov	r1, r0
   2bf4c:	b	2b464 <__assert_fail@plt+0x1a258>
   2bf50:	ldrh	r3, [sl, #66]	; 0x42
   2bf54:	cmp	r3, #18
   2bf58:	beq	2bf9c <__assert_fail@plt+0x1ad90>
   2bf5c:	bhi	2bfcc <__assert_fail@plt+0x1adc0>
   2bf60:	cmp	r3, #6
   2bf64:	beq	2bf9c <__assert_fail@plt+0x1ad90>
   2bf68:	bhi	2bf94 <__assert_fail@plt+0x1ad88>
   2bf6c:	sub	r3, r3, #2
   2bf70:	cmp	r3, #1
   2bf74:	bls	2bf9c <__assert_fail@plt+0x1ad90>
   2bf78:	cmp	r2, #0
   2bf7c:	ldr	r6, [pc, #-1128]	; 2bb1c <__assert_fail@plt+0x1a910>
   2bf80:	bne	2bc30 <__assert_fail@plt+0x1aa24>
   2bf84:	ldrd	r2, [r4, #44]	; 0x2c
   2bf88:	ldr	r0, [pc, #-1136]	; 2bb20 <__assert_fail@plt+0x1a914>
   2bf8c:	bl	10f24 <printf@plt>
   2bf90:	b	2bc48 <__assert_fail@plt+0x1aa3c>
   2bf94:	cmp	r3, #11
   2bf98:	bne	2bf78 <__assert_fail@plt+0x1ad6c>
   2bf9c:	cmp	r1, #65280	; 0xff00
   2bfa0:	beq	2c378 <__assert_fail@plt+0x1b16c>
   2bfa4:	ldr	r3, [pc, #-1160]	; 2bb24 <__assert_fail@plt+0x1a918>
   2bfa8:	cmp	r1, r3
   2bfac:	bne	2bf78 <__assert_fail@plt+0x1ad6c>
   2bfb0:	ldr	r6, [pc, #-1168]	; 2bb28 <__assert_fail@plt+0x1a91c>
   2bfb4:	cmp	r2, #0
   2bfb8:	beq	2bf84 <__assert_fail@plt+0x1ad78>
   2bfbc:	mov	r1, r6
   2bfc0:	ldr	r0, [pc, #-1180]	; 2bb2c <__assert_fail@plt+0x1a920>
   2bfc4:	bl	10f24 <printf@plt>
   2bfc8:	b	2bc38 <__assert_fail@plt+0x1aa2c>
   2bfcc:	cmp	r3, #62	; 0x3e
   2bfd0:	beq	2bf9c <__assert_fail@plt+0x1ad90>
   2bfd4:	bhi	2c004 <__assert_fail@plt+0x1adf8>
   2bfd8:	cmp	r3, #43	; 0x2b
   2bfdc:	bne	2bf78 <__assert_fail@plt+0x1ad6c>
   2bfe0:	b	2bf9c <__assert_fail@plt+0x1ad90>
   2bfe4:	add	r1, sl, #66	; 0x42
   2bfe8:	ldrd	r2, [r4, #8]
   2bfec:	add	r0, sl, #23
   2bff0:	bl	2a280 <__assert_fail@plt+0x19074>
   2bff4:	mov	r1, r0
   2bff8:	ldr	r0, [pc, #-1224]	; 2bb38 <__assert_fail@plt+0x1a92c>
   2bffc:	bl	10f24 <printf@plt>
   2c000:	b	2bc0c <__assert_fail@plt+0x1aa00>
   2c004:	sub	r3, r3, #180	; 0xb4
   2c008:	cmp	r3, #1
   2c00c:	bhi	2bf78 <__assert_fail@plt+0x1ad6c>
   2c010:	b	2bf9c <__assert_fail@plt+0x1ad90>
   2c014:	ldrh	r3, [sl, #64]	; 0x40
   2c018:	sub	r3, r3, #2
   2c01c:	cmp	r3, #1
   2c020:	bls	2b3f8 <__assert_fail@plt+0x1a1ec>
   2c024:	ldr	r3, [sl, #104]	; 0x68
   2c028:	cmp	r3, #0
   2c02c:	beq	2c3e8 <__assert_fail@plt+0x1b1dc>
   2c030:	ldr	r6, [r4]
   2c034:	ldr	r2, [sl, #108]	; 0x6c
   2c038:	cmp	r6, r2
   2c03c:	bcs	2c380 <__assert_fail@plt+0x1b174>
   2c040:	add	r6, r3, r6
   2c044:	mov	r0, r6
   2c048:	ldr	r1, [pc, #-1212]	; 2bb94 <__assert_fail@plt+0x1a988>
   2c04c:	bl	10f18 <strcmp@plt>
   2c050:	cmp	r0, #0
   2c054:	beq	2b3f8 <__assert_fail@plt+0x1a1ec>
   2c058:	mov	r0, r6
   2c05c:	ldr	r1, [pc, #-1332]	; 2bb30 <__assert_fail@plt+0x1a924>
   2c060:	bl	10f18 <strcmp@plt>
   2c064:	cmp	r0, #0
   2c068:	beq	2b3f8 <__assert_fail@plt+0x1a1ec>
   2c06c:	b	2b62c <__assert_fail@plt+0x1a420>
   2c070:	ldr	r3, [r4, #40]	; 0x28
   2c074:	cmp	r3, #0
   2c078:	beq	2b3d0 <__assert_fail@plt+0x1a1c4>
   2c07c:	mov	r2, #5
   2c080:	ldr	r1, [pc, #-1364]	; 2bb34 <__assert_fail@plt+0x1a928>
   2c084:	b	2b934 <__assert_fail@plt+0x1a728>
   2c088:	mov	r0, r1
   2c08c:	mov	r2, #5
   2c090:	ldr	r1, [pc, #-1260]	; 2bbac <__assert_fail@plt+0x1a9a0>
   2c094:	bl	10f90 <dcgettext@plt>
   2c098:	mov	r1, r0
   2c09c:	b	2b464 <__assert_fail@plt+0x1a258>
   2c0a0:	add	r1, sl, #66	; 0x42
   2c0a4:	ldrd	r2, [r4, #8]
   2c0a8:	add	r0, sl, #23
   2c0ac:	bl	2a280 <__assert_fail@plt+0x19074>
   2c0b0:	mov	r1, r0
   2c0b4:	ldr	r0, [pc, #-1412]	; 2bb38 <__assert_fail@plt+0x1a92c>
   2c0b8:	bl	10f24 <printf@plt>
   2c0bc:	b	2bef0 <__assert_fail@plt+0x1ace4>
   2c0c0:	ldr	r2, [sl, #96]	; 0x60
   2c0c4:	add	r1, r1, r1, lsl #3
   2c0c8:	add	r1, r2, r1, lsl #3
   2c0cc:	ldr	r2, [r1, #4]
   2c0d0:	cmp	r2, #3
   2c0d4:	bne	2b9b8 <__assert_fail@plt+0x1a7ac>
   2c0d8:	b	2ad30 <__assert_fail@plt+0x19b24>
   2c0dc:	cmn	r3, #-1610612735	; 0xa0000001
   2c0e0:	bhi	2b42c <__assert_fail@plt+0x1a220>
   2c0e4:	and	r3, r2, #16777216	; 0x1000000
   2c0e8:	str	r3, [sp, #120]	; 0x78
   2c0ec:	str	ip, [sp, #124]	; 0x7c
   2c0f0:	ldrd	r2, [sp, #120]	; 0x78
   2c0f4:	orrs	r3, r2, r3
   2c0f8:	bne	2b3f8 <__assert_fail@plt+0x1a1ec>
   2c0fc:	ldr	r3, [r4, #44]	; 0x2c
   2c100:	cmp	r3, #0
   2c104:	beq	2b3f8 <__assert_fail@plt+0x1a1ec>
   2c108:	mov	r0, ip
   2c10c:	mov	r2, #5
   2c110:	ldr	r1, [pc, #-1500]	; 2bb3c <__assert_fail@plt+0x1a930>
   2c114:	bl	10f90 <dcgettext@plt>
   2c118:	ldr	r2, [r4, #44]	; 0x2c
   2c11c:	mov	r1, r5
   2c120:	bl	54dd0 <warn@@Base>
   2c124:	b	2b3f8 <__assert_fail@plt+0x1a1ec>
   2c128:	mov	r1, r2
   2c12c:	ldr	r0, [pc, #-1524]	; 2bb40 <__assert_fail@plt+0x1a934>
   2c130:	bl	10f24 <printf@plt>
   2c134:	b	2b508 <__assert_fail@plt+0x1a2fc>
   2c138:	mov	r1, r2
   2c13c:	ldr	r0, [pc, #-1536]	; 2bb44 <__assert_fail@plt+0x1a938>
   2c140:	bl	10f24 <printf@plt>
   2c144:	b	2bdc0 <__assert_fail@plt+0x1abb4>
   2c148:	mov	r1, r2
   2c14c:	ldr	r0, [pc, #-1548]	; 2bb48 <__assert_fail@plt+0x1a93c>
   2c150:	bl	10f24 <printf@plt>
   2c154:	b	2b54c <__assert_fail@plt+0x1a340>
   2c158:	mov	r1, r2
   2c15c:	ldr	r0, [pc, #-1560]	; 2bb4c <__assert_fail@plt+0x1a940>
   2c160:	bl	10f24 <printf@plt>
   2c164:	b	2becc <__assert_fail@plt+0x1acc0>
   2c168:	mov	r1, r2
   2c16c:	ldr	r0, [pc, #-1572]	; 2bb50 <__assert_fail@plt+0x1a944>
   2c170:	bl	10f24 <printf@plt>
   2c174:	b	2be90 <__assert_fail@plt+0x1ac84>
   2c178:	mov	r1, r2
   2c17c:	ldr	r0, [pc, #-1588]	; 2bb50 <__assert_fail@plt+0x1a944>
   2c180:	bl	10f24 <printf@plt>
   2c184:	b	2be54 <__assert_fail@plt+0x1ac48>
   2c188:	mov	r2, #5
   2c18c:	ldr	r1, [pc, #-1600]	; 2bb54 <__assert_fail@plt+0x1a948>
   2c190:	mov	r0, r4
   2c194:	bl	10f90 <dcgettext@plt>
   2c198:	bl	10f24 <printf@plt>
   2c19c:	b	2ab3c <__assert_fail@plt+0x19930>
   2c1a0:	ldr	r8, [pc, #-1616]	; 2bb58 <__assert_fail@plt+0x1a94c>
   2c1a4:	ldr	r6, [r8]
   2c1a8:	cmp	r6, #0
   2c1ac:	beq	2c298 <__assert_fail@plt+0x1b08c>
   2c1b0:	cmp	r4, #0
   2c1b4:	beq	2c338 <__assert_fail@plt+0x1b12c>
   2c1b8:	mov	r2, #5
   2c1bc:	ldr	r1, [pc, #-1624]	; 2bb6c <__assert_fail@plt+0x1a960>
   2c1c0:	mov	r0, r5
   2c1c4:	bl	10f90 <dcgettext@plt>
   2c1c8:	bl	10f24 <printf@plt>
   2c1cc:	mov	r2, #5
   2c1d0:	ldr	r1, [pc, #-1660]	; 2bb5c <__assert_fail@plt+0x1a950>
   2c1d4:	mov	r0, r5
   2c1d8:	bl	10f90 <dcgettext@plt>
   2c1dc:	bl	10f24 <printf@plt>
   2c1e0:	b	2acd8 <__assert_fail@plt+0x19acc>
   2c1e4:	mov	r2, #5
   2c1e8:	ldr	r1, [pc, #-1680]	; 2bb60 <__assert_fail@plt+0x1a954>
   2c1ec:	mov	r0, #0
   2c1f0:	bl	10f90 <dcgettext@plt>
   2c1f4:	mov	r1, r5
   2c1f8:	bl	54dd0 <warn@@Base>
   2c1fc:	b	2b42c <__assert_fail@plt+0x1a220>
   2c200:	ldr	r3, [fp, #2736]	; 0xab0
   2c204:	cmp	r3, #0
   2c208:	beq	2ab3c <__assert_fail@plt+0x19930>
   2c20c:	mov	r2, #5
   2c210:	ldr	r1, [pc, #-1716]	; 2bb64 <__assert_fail@plt+0x1a958>
   2c214:	mov	r0, #0
   2c218:	bl	10f90 <dcgettext@plt>
   2c21c:	bl	10f24 <printf@plt>
   2c220:	b	2ac98 <__assert_fail@plt+0x19a8c>
   2c224:	ldr	r3, [sl, #60]	; 0x3c
   2c228:	and	r3, r3, #16711680	; 0xff0000
   2c22c:	cmp	r3, #8585216	; 0x830000
   2c230:	beq	2b350 <__assert_fail@plt+0x1a144>
   2c234:	bhi	2c254 <__assert_fail@plt+0x1b048>
   2c238:	cmp	r3, #8454144	; 0x810000
   2c23c:	beq	2c3dc <__assert_fail@plt+0x1b1d0>
   2c240:	cmp	r3, #8519680	; 0x820000
   2c244:	beq	2c3dc <__assert_fail@plt+0x1b1d0>
   2c248:	cmp	r3, #8388608	; 0x800000
   2c24c:	bne	2abe4 <__assert_fail@plt+0x199d8>
   2c250:	b	2b350 <__assert_fail@plt+0x1a144>
   2c254:	cmp	r3, #8716288	; 0x850000
   2c258:	beq	2c3dc <__assert_fail@plt+0x1b1d0>
   2c25c:	cmp	r3, #8781824	; 0x860000
   2c260:	beq	2b350 <__assert_fail@plt+0x1a144>
   2c264:	cmp	r3, #8650752	; 0x840000
   2c268:	bne	2abe4 <__assert_fail@plt+0x199d8>
   2c26c:	b	2b350 <__assert_fail@plt+0x1a144>
   2c270:	mov	r2, #5
   2c274:	ldr	r1, [pc, #-1812]	; 2bb68 <__assert_fail@plt+0x1a95c>
   2c278:	mov	r0, #0
   2c27c:	bl	10f90 <dcgettext@plt>
   2c280:	bl	10f24 <printf@plt>
   2c284:	ldr	r2, [sl, #84]	; 0x54
   2c288:	ldr	r4, [sl, #96]	; 0x60
   2c28c:	cmp	r2, #0
   2c290:	bne	2acf4 <__assert_fail@plt+0x19ae8>
   2c294:	b	2b56c <__assert_fail@plt+0x1a360>
   2c298:	cmp	r4, #0
   2c29c:	mov	r2, #5
   2c2a0:	beq	2c350 <__assert_fail@plt+0x1b144>
   2c2a4:	ldr	r1, [pc, #-1856]	; 2bb6c <__assert_fail@plt+0x1a960>
   2c2a8:	mov	r0, r6
   2c2ac:	bl	10f90 <dcgettext@plt>
   2c2b0:	bl	10f24 <printf@plt>
   2c2b4:	mov	r2, #5
   2c2b8:	ldr	r1, [pc, #-1872]	; 2bb70 <__assert_fail@plt+0x1a964>
   2c2bc:	mov	r0, r6
   2c2c0:	bl	10f90 <dcgettext@plt>
   2c2c4:	bl	10f24 <printf@plt>
   2c2c8:	mov	r2, #5
   2c2cc:	ldr	r1, [pc, #-1888]	; 2bb74 <__assert_fail@plt+0x1a968>
   2c2d0:	mov	r0, r6
   2c2d4:	bl	10f90 <dcgettext@plt>
   2c2d8:	bl	10f24 <printf@plt>
   2c2dc:	b	2acd8 <__assert_fail@plt+0x19acc>
   2c2e0:	mov	r2, #5
   2c2e4:	ldr	r1, [pc, #-1908]	; 2bb78 <__assert_fail@plt+0x1a96c>
   2c2e8:	mov	r0, r4
   2c2ec:	bl	10f90 <dcgettext@plt>
   2c2f0:	bl	10f24 <printf@plt>
   2c2f4:	b	2acd8 <__assert_fail@plt+0x19acc>
   2c2f8:	cmp	r3, #40	; 0x28
   2c2fc:	beq	2c4ac <__assert_fail@plt+0x1b2a0>
   2c300:	cmp	r3, #20
   2c304:	bne	2b5bc <__assert_fail@plt+0x1a3b0>
   2c308:	mov	r2, #5
   2c30c:	ldr	r1, [pc, #-1944]	; 2bb7c <__assert_fail@plt+0x1a970>
   2c310:	bl	10f90 <dcgettext@plt>
   2c314:	bl	10f24 <printf@plt>
   2c318:	b	2b5bc <__assert_fail@plt+0x1a3b0>
   2c31c:	mov	r2, #6
   2c320:	ldr	r1, [pc, #-1960]	; 2bb80 <__assert_fail@plt+0x1a974>
   2c324:	mov	r0, r4
   2c328:	bl	111d0 <strncmp@plt>
   2c32c:	cmp	r0, #0
   2c330:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2c334:	b	2b060 <__assert_fail@plt+0x19e54>
   2c338:	mov	r2, #5
   2c33c:	ldr	r1, [pc, #-1984]	; 2bb84 <__assert_fail@plt+0x1a978>
   2c340:	mov	r0, r4
   2c344:	bl	10f90 <dcgettext@plt>
   2c348:	bl	10f24 <printf@plt>
   2c34c:	b	2acd8 <__assert_fail@plt+0x19acc>
   2c350:	ldr	r1, [pc, #-2000]	; 2bb88 <__assert_fail@plt+0x1a97c>
   2c354:	mov	r0, r4
   2c358:	bl	10f90 <dcgettext@plt>
   2c35c:	bl	10f24 <printf@plt>
   2c360:	mov	r2, #5
   2c364:	ldr	r1, [pc, #-2016]	; 2bb8c <__assert_fail@plt+0x1a980>
   2c368:	mov	r0, r4
   2c36c:	bl	10f90 <dcgettext@plt>
   2c370:	bl	10f24 <printf@plt>
   2c374:	b	2acd8 <__assert_fail@plt+0x19acc>
   2c378:	ldr	r6, [pc, #-2032]	; 2bb90 <__assert_fail@plt+0x1a984>
   2c37c:	b	2bfb4 <__assert_fail@plt+0x1ada8>
   2c380:	mov	r2, #5
   2c384:	ldr	r1, [pc, #-2036]	; 2bb98 <__assert_fail@plt+0x1a98c>
   2c388:	bl	10f90 <dcgettext@plt>
   2c38c:	ldr	r1, [pc, #-2048]	; 2bb94 <__assert_fail@plt+0x1a988>
   2c390:	bl	10f18 <strcmp@plt>
   2c394:	cmp	r0, #0
   2c398:	beq	2b3f8 <__assert_fail@plt+0x1a1ec>
   2c39c:	ldr	r3, [sl, #104]	; 0x68
   2c3a0:	cmp	r3, #0
   2c3a4:	beq	2c488 <__assert_fail@plt+0x1b27c>
   2c3a8:	ldr	r6, [r4]
   2c3ac:	ldr	r2, [sl, #108]	; 0x6c
   2c3b0:	cmp	r6, r2
   2c3b4:	addcc	r6, r3, r6
   2c3b8:	bcc	2c058 <__assert_fail@plt+0x1ae4c>
   2c3bc:	mov	r2, #5
   2c3c0:	ldr	r1, [pc, #-2096]	; 2bb98 <__assert_fail@plt+0x1a98c>
   2c3c4:	mov	r0, #0
   2c3c8:	bl	10f90 <dcgettext@plt>
   2c3cc:	b	2c05c <__assert_fail@plt+0x1ae50>
   2c3d0:	ldr	r0, [pc, #-2108]	; 2bb9c <__assert_fail@plt+0x1a990>
   2c3d4:	bl	10f24 <printf@plt>
   2c3d8:	b	2bd40 <__assert_fail@plt+0x1ab34>
   2c3dc:	mov	r3, #4
   2c3e0:	str	r3, [r4]
   2c3e4:	b	2abe4 <__assert_fail@plt+0x199d8>
   2c3e8:	mov	r0, r3
   2c3ec:	mov	r2, #5
   2c3f0:	ldr	r1, [pc, #-2124]	; 2bbac <__assert_fail@plt+0x1a9a0>
   2c3f4:	bl	10f90 <dcgettext@plt>
   2c3f8:	b	2c38c <__assert_fail@plt+0x1b180>
   2c3fc:	ldr	r3, [sp, #84]	; 0x54
   2c400:	cmp	r3, #0
   2c404:	beq	2b0e0 <__assert_fail@plt+0x19ed4>
   2c408:	mov	r2, #8
   2c40c:	ldr	r1, [pc, #-2132]	; 2bbc0 <__assert_fail@plt+0x1a9b4>
   2c410:	mov	r0, r4
   2c414:	bl	111d0 <strncmp@plt>
   2c418:	cmp	r0, #0
   2c41c:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2c420:	mov	r2, #12
   2c424:	ldr	r1, [pc, #-2188]	; 2bba0 <__assert_fail@plt+0x1a994>
   2c428:	mov	r0, r4
   2c42c:	bl	111d0 <strncmp@plt>
   2c430:	cmp	r0, #0
   2c434:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2c438:	b	2b0e0 <__assert_fail@plt+0x19ed4>
   2c43c:	mov	r2, #7
   2c440:	ldr	r1, [pc, #-2196]	; 2bbb4 <__assert_fail@plt+0x1a9a8>
   2c444:	mov	r0, r4
   2c448:	bl	111d0 <strncmp@plt>
   2c44c:	cmp	r0, #0
   2c450:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2c454:	mov	r2, #14
   2c458:	ldr	r1, [pc, #-2236]	; 2bba4 <__assert_fail@plt+0x1a998>
   2c45c:	mov	r0, r4
   2c460:	bl	111d0 <strncmp@plt>
   2c464:	cmp	r0, #0
   2c468:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2c46c:	mov	r0, r4
   2c470:	mov	r2, #17
   2c474:	ldr	r1, [pc, #-2260]	; 2bba8 <__assert_fail@plt+0x1a99c>
   2c478:	bl	111d0 <strncmp@plt>
   2c47c:	cmp	r0, #0
   2c480:	bne	2ac5c <__assert_fail@plt+0x19a50>
   2c484:	b	2afd4 <__assert_fail@plt+0x19dc8>
   2c488:	mov	r0, r3
   2c48c:	mov	r2, #5
   2c490:	ldr	r1, [pc, #-2284]	; 2bbac <__assert_fail@plt+0x1a9a0>
   2c494:	bl	10f90 <dcgettext@plt>
   2c498:	b	2c05c <__assert_fail@plt+0x1ae50>
   2c49c:	ldr	r3, [sp, #96]	; 0x60
   2c4a0:	cmp	r3, #0
   2c4a4:	beq	2ac5c <__assert_fail@plt+0x19a50>
   2c4a8:	b	2c454 <__assert_fail@plt+0x1b248>
   2c4ac:	mov	r2, #5
   2c4b0:	ldr	r1, [pc, #-2312]	; 2bbb0 <__assert_fail@plt+0x1a9a4>
   2c4b4:	bl	10f90 <dcgettext@plt>
   2c4b8:	bl	10f24 <printf@plt>
   2c4bc:	b	2b5bc <__assert_fail@plt+0x1a3b0>
   2c4c0:	mov	r2, #7
   2c4c4:	ldr	r1, [pc, #-2328]	; 2bbb4 <__assert_fail@plt+0x1a9a8>
   2c4c8:	mov	r0, r4
   2c4cc:	bl	111d0 <strncmp@plt>
   2c4d0:	cmp	r0, #0
   2c4d4:	bne	2c49c <__assert_fail@plt+0x1b290>
   2c4d8:	add	r4, r4, #7
   2c4dc:	mov	r0, r4
   2c4e0:	ldr	r1, [pc, #-2352]	; 2bbb8 <__assert_fail@plt+0x1a9ac>
   2c4e4:	bl	10f18 <strcmp@plt>
   2c4e8:	cmp	r0, #0
   2c4ec:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2c4f0:	ldr	r3, [pc, #-2364]	; 2bbbc <__assert_fail@plt+0x1a9b0>
   2c4f4:	ldr	r5, [r3]
   2c4f8:	b	2af94 <__assert_fail@plt+0x19d88>
   2c4fc:	mov	r2, #8
   2c500:	ldr	r1, [pc, #-2376]	; 2bbc0 <__assert_fail@plt+0x1a9b4>
   2c504:	mov	r0, r4
   2c508:	bl	111d0 <strncmp@plt>
   2c50c:	cmp	r0, #0
   2c510:	beq	2afd4 <__assert_fail@plt+0x19dc8>
   2c514:	mov	r2, #12
   2c518:	ldr	r1, [pc, #-2396]	; 2bbc4 <__assert_fail@plt+0x1a9b8>
   2c51c:	mov	r0, r4
   2c520:	bl	111d0 <strncmp@plt>
   2c524:	cmp	r0, #0
   2c528:	bne	2c420 <__assert_fail@plt+0x1b214>
   2c52c:	b	2afd4 <__assert_fail@plt+0x19dc8>
   2c530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c534:	sub	sp, sp, #20
   2c538:	ldr	r3, [pc, #4076]	; 2d52c <__assert_fail@plt+0x1c320>
   2c53c:	ldr	r2, [r0, #16]
   2c540:	cmp	r2, r3
   2c544:	beq	2c568 <__assert_fail@plt+0x1b35c>
   2c548:	mov	r2, #5
   2c54c:	ldr	r1, [pc, #4060]	; 2d530 <__assert_fail@plt+0x1c324>
   2c550:	mov	r0, #0
   2c554:	bl	10f90 <dcgettext@plt>
   2c558:	bl	548ac <error@@Base>
   2c55c:	mov	r0, #0
   2c560:	add	sp, sp, #20
   2c564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c568:	ldr	r8, [pc, #4036]	; 2d534 <__assert_fail@plt+0x1c328>
   2c56c:	mov	r4, r0
   2c570:	ldrh	r0, [r0, #66]	; 0x42
   2c574:	bl	4bd28 <__assert_fail@plt+0x3ab1c>
   2c578:	ldr	r3, [r8, #1592]	; 0x638
   2c57c:	cmp	r3, #0
   2c580:	bne	2c5f8 <__assert_fail@plt+0x1b3ec>
   2c584:	ldr	r0, [r4, #96]	; 0x60
   2c588:	cmp	r0, #0
   2c58c:	moveq	r0, #1
   2c590:	beq	2c560 <__assert_fail@plt+0x1b354>
   2c594:	ldr	r3, [pc, #3996]	; 2d538 <__assert_fail@plt+0x1c32c>
   2c598:	ldr	r2, [r4, #76]	; 0x4c
   2c59c:	cmp	r2, r3
   2c5a0:	bne	2c5b0 <__assert_fail@plt+0x1b3a4>
   2c5a4:	ldr	r3, [r0, #44]	; 0x2c
   2c5a8:	cmp	r3, #0
   2c5ac:	strne	r3, [r4, #76]	; 0x4c
   2c5b0:	ldr	r3, [r4, #84]	; 0x54
   2c5b4:	ldr	r2, [r4, #88]	; 0x58
   2c5b8:	cmp	r3, #0
   2c5bc:	ldr	r1, [pc, #3956]	; 2d538 <__assert_fail@plt+0x1c32c>
   2c5c0:	ldreq	r3, [r0, #32]
   2c5c4:	streq	r3, [r4, #84]	; 0x54
   2c5c8:	cmp	r2, r1
   2c5cc:	ldreq	r2, [r0, #40]	; 0x28
   2c5d0:	streq	r2, [r4, #88]	; 0x58
   2c5d4:	cmp	r2, r3
   2c5d8:	movcs	r3, #0
   2c5dc:	strcs	r3, [r4, #88]	; 0x58
   2c5e0:	bl	10f54 <free@plt>
   2c5e4:	mov	r3, #0
   2c5e8:	mov	r0, #1
   2c5ec:	str	r3, [r4, #96]	; 0x60
   2c5f0:	add	sp, sp, #20
   2c5f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c5f8:	mov	r2, #5
   2c5fc:	ldr	r1, [pc, #3896]	; 2d53c <__assert_fail@plt+0x1c330>
   2c600:	mov	r0, #0
   2c604:	bl	10f90 <dcgettext@plt>
   2c608:	bl	10f24 <printf@plt>
   2c60c:	mov	r2, #5
   2c610:	ldr	r1, [pc, #3880]	; 2d540 <__assert_fail@plt+0x1c334>
   2c614:	mov	r0, #0
   2c618:	bl	10f90 <dcgettext@plt>
   2c61c:	bl	10f24 <printf@plt>
   2c620:	ldr	r7, [pc, #3868]	; 2d544 <__assert_fail@plt+0x1c338>
   2c624:	add	r5, r4, #15
   2c628:	add	r6, r4, #31
   2c62c:	ldrb	r1, [r5, #1]!
   2c630:	mov	r0, r7
   2c634:	bl	10f24 <printf@plt>
   2c638:	cmp	r6, r5
   2c63c:	bne	2c62c <__assert_fail@plt+0x1b420>
   2c640:	mov	r0, #10
   2c644:	bl	110c8 <putchar@plt>
   2c648:	mov	r2, #5
   2c64c:	ldr	r1, [pc, #3828]	; 2d548 <__assert_fail@plt+0x1c33c>
   2c650:	mov	r0, #0
   2c654:	bl	10f90 <dcgettext@plt>
   2c658:	ldrb	r5, [r4, #20]
   2c65c:	cmp	r5, #1
   2c660:	mov	r6, r0
   2c664:	beq	2d7c4 <__assert_fail@plt+0x1c5b8>
   2c668:	sxtb	r0, r5
   2c66c:	cmp	r0, #0
   2c670:	beq	2d518 <__assert_fail@plt+0x1c30c>
   2c674:	cmp	r5, #2
   2c678:	beq	2cfc4 <__assert_fail@plt+0x1bdb8>
   2c67c:	mov	r2, #5
   2c680:	ldr	r1, [pc, #3780]	; 2d54c <__assert_fail@plt+0x1c340>
   2c684:	mov	r0, #0
   2c688:	bl	10f90 <dcgettext@plt>
   2c68c:	mov	r1, #32
   2c690:	mov	r3, r5
   2c694:	mov	r2, r0
   2c698:	ldr	r0, [pc, #3760]	; 2d550 <__assert_fail@plt+0x1c344>
   2c69c:	bl	110b0 <snprintf@plt>
   2c6a0:	ldr	r1, [pc, #3752]	; 2d550 <__assert_fail@plt+0x1c344>
   2c6a4:	mov	r0, r6
   2c6a8:	bl	10f24 <printf@plt>
   2c6ac:	mov	r2, #5
   2c6b0:	ldr	r1, [pc, #3740]	; 2d554 <__assert_fail@plt+0x1c348>
   2c6b4:	mov	r0, #0
   2c6b8:	bl	10f90 <dcgettext@plt>
   2c6bc:	ldrb	r5, [r4, #21]
   2c6c0:	cmp	r5, #1
   2c6c4:	mov	r6, r0
   2c6c8:	beq	2d7cc <__assert_fail@plt+0x1c5c0>
   2c6cc:	sxtb	r0, r5
   2c6d0:	cmp	r0, #0
   2c6d4:	beq	2d798 <__assert_fail@plt+0x1c58c>
   2c6d8:	cmp	r5, #2
   2c6dc:	beq	2d7ac <__assert_fail@plt+0x1c5a0>
   2c6e0:	mov	r2, #5
   2c6e4:	ldr	r1, [pc, #3680]	; 2d54c <__assert_fail@plt+0x1c340>
   2c6e8:	mov	r0, #0
   2c6ec:	bl	10f90 <dcgettext@plt>
   2c6f0:	mov	r1, #32
   2c6f4:	mov	r3, r5
   2c6f8:	mov	r2, r0
   2c6fc:	ldr	r0, [pc, #3668]	; 2d558 <__assert_fail@plt+0x1c34c>
   2c700:	bl	110b0 <snprintf@plt>
   2c704:	ldr	r1, [pc, #3660]	; 2d558 <__assert_fail@plt+0x1c34c>
   2c708:	mov	r0, r6
   2c70c:	bl	10f24 <printf@plt>
   2c710:	mov	r2, #5
   2c714:	ldr	r1, [pc, #3648]	; 2d55c <__assert_fail@plt+0x1c350>
   2c718:	mov	r0, #0
   2c71c:	bl	10f90 <dcgettext@plt>
   2c720:	ldrb	r5, [r4, #22]
   2c724:	cmp	r5, #1
   2c728:	mov	r6, r0
   2c72c:	beq	2cfcc <__assert_fail@plt+0x1bdc0>
   2c730:	cmp	r5, #0
   2c734:	ldreq	r2, [pc, #3620]	; 2d560 <__assert_fail@plt+0x1c354>
   2c738:	bne	2d80c <__assert_fail@plt+0x1c600>
   2c73c:	mov	r1, r5
   2c740:	mov	r0, r6
   2c744:	bl	10f24 <printf@plt>
   2c748:	mov	r2, #5
   2c74c:	ldr	r1, [pc, #3600]	; 2d564 <__assert_fail@plt+0x1c358>
   2c750:	mov	r0, #0
   2c754:	bl	10f90 <dcgettext@plt>
   2c758:	ldrb	r1, [r4, #23]
   2c75c:	mov	r5, r0
   2c760:	add	r0, r4, #66	; 0x42
   2c764:	bl	1a4c0 <__assert_fail@plt+0x92b4>
   2c768:	mov	r1, r0
   2c76c:	mov	r0, r5
   2c770:	bl	10f24 <printf@plt>
   2c774:	mov	r2, #5
   2c778:	ldr	r1, [pc, #3560]	; 2d568 <__assert_fail@plt+0x1c35c>
   2c77c:	mov	r0, #0
   2c780:	bl	10f90 <dcgettext@plt>
   2c784:	ldrb	r1, [r4, #24]
   2c788:	bl	10f24 <printf@plt>
   2c78c:	mov	r2, #5
   2c790:	ldr	r1, [pc, #3540]	; 2d56c <__assert_fail@plt+0x1c360>
   2c794:	mov	r0, #0
   2c798:	bl	10f90 <dcgettext@plt>
   2c79c:	mov	r5, r0
   2c7a0:	ldrh	r0, [r4, #64]	; 0x40
   2c7a4:	bl	12d94 <__assert_fail@plt+0x1b88>
   2c7a8:	mov	r1, r0
   2c7ac:	mov	r0, r5
   2c7b0:	bl	10f24 <printf@plt>
   2c7b4:	mov	r2, #5
   2c7b8:	ldr	r1, [pc, #3504]	; 2d570 <__assert_fail@plt+0x1c364>
   2c7bc:	mov	r0, #0
   2c7c0:	bl	10f90 <dcgettext@plt>
   2c7c4:	mov	r5, r0
   2c7c8:	ldrh	r0, [r4, #66]	; 0x42
   2c7cc:	bl	12e7c <__assert_fail@plt+0x1c70>
   2c7d0:	mov	r1, r0
   2c7d4:	mov	r0, r5
   2c7d8:	bl	10f24 <printf@plt>
   2c7dc:	mov	r2, #5
   2c7e0:	ldr	r1, [pc, #3468]	; 2d574 <__assert_fail@plt+0x1c368>
   2c7e4:	mov	r0, #0
   2c7e8:	bl	10f90 <dcgettext@plt>
   2c7ec:	ldr	r1, [r4, #56]	; 0x38
   2c7f0:	bl	10f24 <printf@plt>
   2c7f4:	mov	r2, #5
   2c7f8:	ldr	r1, [pc, #3448]	; 2d578 <__assert_fail@plt+0x1c36c>
   2c7fc:	mov	r0, #0
   2c800:	bl	10f90 <dcgettext@plt>
   2c804:	bl	10f24 <printf@plt>
   2c808:	mov	r2, #4
   2c80c:	ldrd	r0, [r4, #32]
   2c810:	bl	14244 <__assert_fail@plt+0x3038>
   2c814:	ldr	r1, [pc, #3424]	; 2d57c <__assert_fail@plt+0x1c370>
   2c818:	mov	r2, #5
   2c81c:	mov	r0, #0
   2c820:	bl	10f90 <dcgettext@plt>
   2c824:	bl	10f24 <printf@plt>
   2c828:	ldrd	r2, [r4, #40]	; 0x28
   2c82c:	ldr	r0, [pc, #3404]	; 2d580 <__assert_fail@plt+0x1c374>
   2c830:	bl	10f24 <printf@plt>
   2c834:	ldr	r1, [pc, #3400]	; 2d584 <__assert_fail@plt+0x1c378>
   2c838:	mov	r2, #5
   2c83c:	mov	r0, #0
   2c840:	bl	10f90 <dcgettext@plt>
   2c844:	bl	10f24 <printf@plt>
   2c848:	ldrd	r2, [r4, #48]	; 0x30
   2c84c:	ldr	r0, [pc, #3372]	; 2d580 <__assert_fail@plt+0x1c374>
   2c850:	bl	10f24 <printf@plt>
   2c854:	mov	r2, #5
   2c858:	ldr	r1, [pc, #3368]	; 2d588 <__assert_fail@plt+0x1c37c>
   2c85c:	mov	r0, #0
   2c860:	bl	10f90 <dcgettext@plt>
   2c864:	bl	10f24 <printf@plt>
   2c868:	mov	r2, #5
   2c86c:	ldr	r1, [pc, #3352]	; 2d58c <__assert_fail@plt+0x1c380>
   2c870:	mov	r0, #0
   2c874:	bl	10f90 <dcgettext@plt>
   2c878:	ldr	r6, [r4, #60]	; 0x3c
   2c87c:	ldrh	r3, [r4, #66]	; 0x42
   2c880:	mov	r7, r0
   2c884:	mov	r0, #0
   2c888:	cmp	r6, r0
   2c88c:	strb	r0, [r8, #2808]	; 0xaf8
   2c890:	bne	2c9c8 <__assert_fail@plt+0x1b7bc>
   2c894:	ldr	r5, [pc, #3816]	; 2d784 <__assert_fail@plt+0x1c578>
   2c898:	add	r2, r5, #8
   2c89c:	mov	r1, r6
   2c8a0:	mov	r0, r7
   2c8a4:	bl	10f24 <printf@plt>
   2c8a8:	mov	r2, #5
   2c8ac:	ldr	r1, [pc, #3292]	; 2d590 <__assert_fail@plt+0x1c384>
   2c8b0:	mov	r0, #0
   2c8b4:	bl	10f90 <dcgettext@plt>
   2c8b8:	ldr	r1, [r4, #68]	; 0x44
   2c8bc:	bl	10f24 <printf@plt>
   2c8c0:	mov	r2, #5
   2c8c4:	ldr	r1, [pc, #3272]	; 2d594 <__assert_fail@plt+0x1c388>
   2c8c8:	mov	r0, #0
   2c8cc:	bl	10f90 <dcgettext@plt>
   2c8d0:	ldr	r1, [r4, #72]	; 0x48
   2c8d4:	bl	10f24 <printf@plt>
   2c8d8:	mov	r2, #5
   2c8dc:	ldr	r1, [pc, #3252]	; 2d598 <__assert_fail@plt+0x1c38c>
   2c8e0:	mov	r0, #0
   2c8e4:	bl	10f90 <dcgettext@plt>
   2c8e8:	ldr	r1, [r4, #76]	; 0x4c
   2c8ec:	bl	10f24 <printf@plt>
   2c8f0:	ldr	r3, [r4, #96]	; 0x60
   2c8f4:	cmp	r3, #0
   2c8f8:	beq	2c90c <__assert_fail@plt+0x1b700>
   2c8fc:	ldr	r2, [pc, #3124]	; 2d538 <__assert_fail@plt+0x1c32c>
   2c900:	ldr	r1, [r4, #76]	; 0x4c
   2c904:	cmp	r1, r2
   2c908:	beq	2d7e4 <__assert_fail@plt+0x1c5d8>
   2c90c:	ldr	r5, [pc, #3208]	; 2d59c <__assert_fail@plt+0x1c390>
   2c910:	mov	r0, #10
   2c914:	ldr	r1, [r5]
   2c918:	bl	11158 <putc@plt>
   2c91c:	mov	r2, #5
   2c920:	ldr	r1, [pc, #3192]	; 2d5a0 <__assert_fail@plt+0x1c394>
   2c924:	mov	r0, #0
   2c928:	bl	10f90 <dcgettext@plt>
   2c92c:	ldr	r1, [r4, #80]	; 0x50
   2c930:	bl	10f24 <printf@plt>
   2c934:	mov	r2, #5
   2c938:	ldr	r1, [pc, #3172]	; 2d5a4 <__assert_fail@plt+0x1c398>
   2c93c:	mov	r0, #0
   2c940:	bl	10f90 <dcgettext@plt>
   2c944:	ldr	r1, [r4, #84]	; 0x54
   2c948:	bl	10f24 <printf@plt>
   2c94c:	ldr	r3, [r4, #96]	; 0x60
   2c950:	cmp	r3, #0
   2c954:	beq	2c964 <__assert_fail@plt+0x1b758>
   2c958:	ldr	r2, [r4, #84]	; 0x54
   2c95c:	cmp	r2, #0
   2c960:	beq	2d7fc <__assert_fail@plt+0x1c5f0>
   2c964:	ldr	r1, [r5]
   2c968:	mov	r0, #10
   2c96c:	bl	11158 <putc@plt>
   2c970:	mov	r2, #5
   2c974:	ldr	r1, [pc, #3116]	; 2d5a8 <__assert_fail@plt+0x1c39c>
   2c978:	mov	r0, #0
   2c97c:	bl	10f90 <dcgettext@plt>
   2c980:	ldr	r1, [r4, #88]	; 0x58
   2c984:	bl	10f24 <printf@plt>
   2c988:	ldr	r2, [r4, #96]	; 0x60
   2c98c:	ldr	r3, [r4, #88]	; 0x58
   2c990:	cmp	r2, #0
   2c994:	beq	2c9a4 <__assert_fail@plt+0x1b798>
   2c998:	ldr	r1, [pc, #2968]	; 2d538 <__assert_fail@plt+0x1c32c>
   2c99c:	cmp	r3, r1
   2c9a0:	beq	2d82c <__assert_fail@plt+0x1c620>
   2c9a4:	cmp	r3, #0
   2c9a8:	beq	2c9b8 <__assert_fail@plt+0x1b7ac>
   2c9ac:	ldr	r2, [r4, #84]	; 0x54
   2c9b0:	cmp	r2, r3
   2c9b4:	bls	2d338 <__assert_fail@plt+0x1c12c>
   2c9b8:	ldr	r1, [r5]
   2c9bc:	mov	r0, #10
   2c9c0:	bl	11158 <putc@plt>
   2c9c4:	b	2c584 <__assert_fail@plt+0x1b378>
   2c9c8:	cmp	r3, #91	; 0x5b
   2c9cc:	beq	2cf50 <__assert_fail@plt+0x1bd44>
   2c9d0:	bls	2cc1c <__assert_fail@plt+0x1ba10>
   2c9d4:	cmp	r3, #195	; 0xc3
   2c9d8:	beq	2d83c <__assert_fail@plt+0x1c630>
   2c9dc:	bhi	2cadc <__assert_fail@plt+0x1b8d0>
   2c9e0:	cmp	r3, #105	; 0x69
   2c9e4:	beq	2e550 <__assert_fail@plt+0x1d344>
   2c9e8:	bls	2ce98 <__assert_fail@plt+0x1bc8c>
   2c9ec:	cmp	r3, #140	; 0x8c
   2c9f0:	beq	2df04 <__assert_fail@plt+0x1ccf8>
   2c9f4:	bls	2ced0 <__assert_fail@plt+0x1bcc4>
   2c9f8:	cmp	r3, #167	; 0xa7
   2c9fc:	beq	2cfd4 <__assert_fail@plt+0x1bdc8>
   2ca00:	cmp	r3, #173	; 0xad
   2ca04:	ldrne	r5, [pc, #3448]	; 2d784 <__assert_fail@plt+0x1c578>
   2ca08:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2ca0c:	tst	r6, #1
   2ca10:	ldrne	lr, [pc, #2964]	; 2d5ac <__assert_fail@plt+0x1c3a0>
   2ca14:	ldrne	r5, [pc, #3432]	; 2d784 <__assert_fail@plt+0x1c578>
   2ca18:	ldreq	r5, [pc, #3428]	; 2d784 <__assert_fail@plt+0x1c578>
   2ca1c:	ldmne	lr!, {r0, r1, r2, r3}
   2ca20:	addne	ip, r5, #8
   2ca24:	ldrne	lr, [lr]
   2ca28:	stmiane	ip!, {r0, r1, r2, r3}
   2ca2c:	strbne	lr, [ip]
   2ca30:	tst	r6, #2
   2ca34:	bne	2d378 <__assert_fail@plt+0x1c16c>
   2ca38:	tst	r6, #4
   2ca3c:	bne	2ee20 <__assert_fail@plt+0x1dc14>
   2ca40:	tst	r6, #8
   2ca44:	bne	2ebb8 <__assert_fail@plt+0x1d9ac>
   2ca48:	tst	r6, #64	; 0x40
   2ca4c:	beq	2caa8 <__assert_fail@plt+0x1b89c>
   2ca50:	ldr	ip, [pc, #2904]	; 2d5b0 <__assert_fail@plt+0x1c3a4>
   2ca54:	add	r9, r5, #8
   2ca58:	tst	r6, #128	; 0x80
   2ca5c:	mov	r0, r9
   2ca60:	ldr	r8, [pc, #2892]	; 2d5b4 <__assert_fail@plt+0x1c3a8>
   2ca64:	movne	r8, ip
   2ca68:	bl	11080 <strlen@plt>
   2ca6c:	mov	ip, r8
   2ca70:	add	lr, r9, r0
   2ca74:	mov	sl, r0
   2ca78:	ldm	ip!, {r0, r1, r2, r3}
   2ca7c:	str	r0, [r9, sl]
   2ca80:	str	r1, [lr, #4]
   2ca84:	ldm	ip!, {r0, r1}
   2ca88:	str	r2, [lr, #8]
   2ca8c:	str	r3, [lr, #12]
   2ca90:	ldrh	r2, [ip]
   2ca94:	ldrb	r3, [ip, #2]
   2ca98:	str	r0, [lr, #16]
   2ca9c:	str	r1, [lr, #20]
   2caa0:	strh	r2, [lr, #24]
   2caa4:	strb	r3, [lr, #26]
   2caa8:	tst	r6, #256	; 0x100
   2caac:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2cab0:	add	r8, r5, #8
   2cab4:	mov	r0, r8
   2cab8:	bl	11080 <strlen@plt>
   2cabc:	ldr	r2, [pc, #2804]	; 2d5b8 <__assert_fail@plt+0x1c3ac>
   2cac0:	mov	r3, r0
   2cac4:	add	r1, r8, r0
   2cac8:	ldr	r0, [r2]
   2cacc:	ldrb	r2, [r2, #4]
   2cad0:	str	r0, [r8, r3]
   2cad4:	strb	r2, [r1, #4]
   2cad8:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cadc:	cmp	r3, #250	; 0xfa
   2cae0:	beq	2df30 <__assert_fail@plt+0x1cd24>
   2cae4:	bls	2cbfc <__assert_fail@plt+0x1b9f0>
   2cae8:	ldr	r2, [pc, #2764]	; 2d5bc <__assert_fail@plt+0x1c3b0>
   2caec:	cmp	r3, r2
   2caf0:	beq	2cc54 <__assert_fail@plt+0x1ba48>
   2caf4:	bls	2ce40 <__assert_fail@plt+0x1bc34>
   2caf8:	ldr	r2, [pc, #2752]	; 2d5c0 <__assert_fail@plt+0x1c3b4>
   2cafc:	cmp	r3, r2
   2cb00:	beq	2d27c <__assert_fail@plt+0x1c070>
   2cb04:	ldr	r2, [pc, #2744]	; 2d5c4 <__assert_fail@plt+0x1c3b8>
   2cb08:	cmp	r3, r2
   2cb0c:	ldrne	r5, [pc, #3184]	; 2d784 <__assert_fail@plt+0x1c578>
   2cb10:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2cb14:	and	r3, r6, #-16777216	; 0xff000000
   2cb18:	cmp	r3, #33554432	; 0x2000000
   2cb1c:	beq	2d4e0 <__assert_fail@plt+0x1c2d4>
   2cb20:	bls	2db34 <__assert_fail@plt+0x1c928>
   2cb24:	cmp	r3, #134217728	; 0x8000000
   2cb28:	beq	2fad0 <__assert_fail@plt+0x1e8c4>
   2cb2c:	cmp	r3, #268435456	; 0x10000000
   2cb30:	beq	2fac8 <__assert_fail@plt+0x1e8bc>
   2cb34:	cmp	r3, #67108864	; 0x4000000
   2cb38:	beq	2f78c <__assert_fail@plt+0x1e580>
   2cb3c:	ldr	r1, [pc, #2692]	; 2d5c8 <__assert_fail@plt+0x1c3bc>
   2cb40:	mov	r2, #5
   2cb44:	mov	r0, #0
   2cb48:	bl	10f90 <dcgettext@plt>
   2cb4c:	ldr	r5, [pc, #3120]	; 2d784 <__assert_fail@plt+0x1c578>
   2cb50:	mov	r1, r0
   2cb54:	add	r0, r5, #8
   2cb58:	bl	10fd8 <strcat@plt>
   2cb5c:	and	r3, r6, #16711680	; 0xff0000
   2cb60:	cmp	r3, #131072	; 0x20000
   2cb64:	beq	2f548 <__assert_fail@plt+0x1e33c>
   2cb68:	bhi	2dea4 <__assert_fail@plt+0x1cc98>
   2cb6c:	cmp	r3, #0
   2cb70:	beq	2cbb0 <__assert_fail@plt+0x1b9a4>
   2cb74:	cmp	r3, #65536	; 0x10000
   2cb78:	bne	2f3c0 <__assert_fail@plt+0x1e1b4>
   2cb7c:	add	r8, r5, #8
   2cb80:	mov	r0, r8
   2cb84:	bl	11080 <strlen@plt>
   2cb88:	ldr	ip, [pc, #2620]	; 2d5cc <__assert_fail@plt+0x1c3c0>
   2cb8c:	add	lr, r8, r0
   2cb90:	mov	r9, r0
   2cb94:	ldm	ip!, {r0, r1, r2, r3}
   2cb98:	ldrh	ip, [ip]
   2cb9c:	str	r0, [r8, r9]
   2cba0:	str	r1, [lr, #4]
   2cba4:	strh	ip, [lr, #16]
   2cba8:	str	r2, [lr, #8]
   2cbac:	str	r3, [lr, #12]
   2cbb0:	tst	r6, #256	; 0x100
   2cbb4:	bne	2eb34 <__assert_fail@plt+0x1d928>
   2cbb8:	ands	r9, r6, #255	; 0xff
   2cbbc:	bne	2eb14 <__assert_fail@plt+0x1d908>
   2cbc0:	ands	sl, r6, #65024	; 0xfe00
   2cbc4:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2cbc8:	add	r8, r5, #8
   2cbcc:	mov	r0, r8
   2cbd0:	bl	11080 <strlen@plt>
   2cbd4:	mov	r2, #5
   2cbd8:	ldr	r1, [pc, #2544]	; 2d5d0 <__assert_fail@plt+0x1c3c4>
   2cbdc:	mov	r9, r0
   2cbe0:	mov	r0, #0
   2cbe4:	bl	10f90 <dcgettext@plt>
   2cbe8:	mov	r2, sl
   2cbec:	mov	r1, r0
   2cbf0:	add	r0, r8, r9
   2cbf4:	bl	1114c <sprintf@plt>
   2cbf8:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cbfc:	cmp	r3, #221	; 0xdd
   2cc00:	beq	2de4c <__assert_fail@plt+0x1cc40>
   2cc04:	cmp	r3, #243	; 0xf3
   2cc08:	beq	2d0a0 <__assert_fail@plt+0x1be94>
   2cc0c:	cmp	r3, #197	; 0xc5
   2cc10:	beq	2d2c8 <__assert_fail@plt+0x1c0bc>
   2cc14:	ldr	r5, [pc, #2920]	; 2d784 <__assert_fail@plt+0x1c578>
   2cc18:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cc1c:	cmp	r3, #36	; 0x24
   2cc20:	beq	2d9bc <__assert_fail@plt+0x1c7b0>
   2cc24:	bls	2cd08 <__assert_fail@plt+0x1bafc>
   2cc28:	cmp	r3, #50	; 0x32
   2cc2c:	beq	2d91c <__assert_fail@plt+0x1c710>
   2cc30:	bls	2cce8 <__assert_fail@plt+0x1badc>
   2cc34:	cmp	r3, #83	; 0x53
   2cc38:	beq	2db4c <__assert_fail@plt+0x1c940>
   2cc3c:	bls	2cc7c <__assert_fail@plt+0x1ba70>
   2cc40:	cmp	r3, #87	; 0x57
   2cc44:	beq	2d27c <__assert_fail@plt+0x1c070>
   2cc48:	cmp	r3, #88	; 0x58
   2cc4c:	ldrne	r5, [pc, #2864]	; 2d784 <__assert_fail@plt+0x1c578>
   2cc50:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2cc54:	tst	r6, #805306368	; 0x30000000
   2cc58:	ldreq	r3, [pc, #2420]	; 2d5d4 <__assert_fail@plt+0x1c3c8>
   2cc5c:	ldreq	r5, [pc, #2848]	; 2d784 <__assert_fail@plt+0x1c578>
   2cc60:	ldrne	r5, [pc, #2844]	; 2d784 <__assert_fail@plt+0x1c578>
   2cc64:	ldmeq	r3, {r0, r1}
   2cc68:	lsreq	r3, r1, #16
   2cc6c:	streq	r0, [r8, #2808]	; 0xaf8
   2cc70:	strheq	r1, [r5, #12]
   2cc74:	strbeq	r3, [r8, #2814]	; 0xafe
   2cc78:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cc7c:	cmp	r3, #75	; 0x4b
   2cc80:	ldrne	r5, [pc, #2812]	; 2d784 <__assert_fail@plt+0x1c578>
   2cc84:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2cc88:	tst	r6, #1
   2cc8c:	ldrne	r3, [pc, #2372]	; 2d5d8 <__assert_fail@plt+0x1c3cc>
   2cc90:	ldrne	r5, [pc, #2796]	; 2d784 <__assert_fail@plt+0x1c578>
   2cc94:	ldreq	r5, [pc, #2792]	; 2d784 <__assert_fail@plt+0x1c578>
   2cc98:	ldmne	r3, {r0, r1, r2}
   2cc9c:	addne	r3, r5, #8
   2cca0:	stmiane	r3!, {r0, r1}
   2cca4:	strhne	r2, [r3]
   2cca8:	tst	r6, #256	; 0x100
   2ccac:	bne	2d3a4 <__assert_fail@plt+0x1c198>
   2ccb0:	tst	r6, #512	; 0x200
   2ccb4:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2ccb8:	add	r8, r5, #8
   2ccbc:	mov	r0, r8
   2ccc0:	bl	11080 <strlen@plt>
   2ccc4:	ldr	r3, [pc, #2320]	; 2d5dc <__assert_fail@plt+0x1c3d0>
   2ccc8:	add	r2, r8, r0
   2cccc:	mov	ip, r0
   2ccd0:	ldm	r3!, {r0, r1}
   2ccd4:	ldrh	r3, [r3]
   2ccd8:	str	r0, [r8, ip]
   2ccdc:	str	r1, [r2, #4]
   2cce0:	strh	r3, [r2, #8]
   2cce4:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cce8:	cmp	r3, #42	; 0x2a
   2ccec:	beq	2df6c <__assert_fail@plt+0x1cd60>
   2ccf0:	cmp	r3, #43	; 0x2b
   2ccf4:	beq	2d1fc <__assert_fail@plt+0x1bff0>
   2ccf8:	cmp	r3, #40	; 0x28
   2ccfc:	beq	2d168 <__assert_fail@plt+0x1bf5c>
   2cd00:	ldr	r5, [pc, #2684]	; 2d784 <__assert_fail@plt+0x1c578>
   2cd04:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cd08:	cmp	r3, #15
   2cd0c:	beq	2e47c <__assert_fail@plt+0x1d270>
   2cd10:	bls	2cd34 <__assert_fail@plt+0x1bb28>
   2cd14:	cmp	r3, #21
   2cd18:	beq	2def4 <__assert_fail@plt+0x1cce8>
   2cd1c:	cmp	r3, #22
   2cd20:	beq	2d13c <__assert_fail@plt+0x1bf30>
   2cd24:	cmp	r3, #20
   2cd28:	beq	2d0f0 <__assert_fail@plt+0x1bee4>
   2cd2c:	ldr	r5, [pc, #2640]	; 2d784 <__assert_fail@plt+0x1c578>
   2cd30:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cd34:	cmp	r3, #8
   2cd38:	beq	2e024 <__assert_fail@plt+0x1ce18>
   2cd3c:	cmp	r3, #10
   2cd40:	beq	2e024 <__assert_fail@plt+0x1ce18>
   2cd44:	cmp	r3, #4
   2cd48:	bne	2d824 <__assert_fail@plt+0x1c618>
   2cd4c:	ldr	r3, [pc, #2188]	; 2d5e0 <__assert_fail@plt+0x1c3d4>
   2cd50:	and	r3, r3, r6
   2cd54:	cmp	r3, #16777216	; 0x1000000
   2cd58:	beq	2d3d4 <__assert_fail@plt+0x1c1c8>
   2cd5c:	cmp	r3, #8454144	; 0x810000
   2cd60:	beq	2f460 <__assert_fail@plt+0x1e254>
   2cd64:	cmp	r3, #33554432	; 0x2000000
   2cd68:	beq	2f444 <__assert_fail@plt+0x1e238>
   2cd6c:	mov	r2, #5
   2cd70:	ldr	r1, [pc, #2156]	; 2d5e4 <__assert_fail@plt+0x1c3d8>
   2cd74:	mov	r0, #0
   2cd78:	bl	10f90 <dcgettext@plt>
   2cd7c:	mov	r2, #5
   2cd80:	ldr	r1, [pc, #2144]	; 2d5e8 <__assert_fail@plt+0x1c3dc>
   2cd84:	mov	sl, r0
   2cd88:	mov	r0, #0
   2cd8c:	bl	10f90 <dcgettext@plt>
   2cd90:	and	r3, r6, #15
   2cd94:	sub	r2, r3, #1
   2cd98:	cmp	r2, #6
   2cd9c:	mov	r8, r0
   2cda0:	bls	2f3e0 <__assert_fail@plt+0x1e1d4>
   2cda4:	ldr	r5, [pc, #2520]	; 2d784 <__assert_fail@plt+0x1c578>
   2cda8:	add	r9, r5, #8
   2cdac:	mov	r0, r9
   2cdb0:	bl	11080 <strlen@plt>
   2cdb4:	ldr	r3, [pc, #2096]	; 2d5ec <__assert_fail@plt+0x1c3e0>
   2cdb8:	mov	r2, r0
   2cdbc:	add	ip, r9, r0
   2cdc0:	ldm	r3!, {r0, r1}
   2cdc4:	add	lr, r2, #10
   2cdc8:	ldrh	r3, [r3]
   2cdcc:	str	r0, [r9, r2]
   2cdd0:	str	r1, [ip, #4]
   2cdd4:	add	r0, r9, lr
   2cdd8:	mov	r1, sl
   2cddc:	strh	r3, [ip, #8]
   2cde0:	bl	10ff0 <strcpy@plt>
   2cde4:	tst	r6, #64	; 0x40
   2cde8:	bne	2fca0 <__assert_fail@plt+0x1ea94>
   2cdec:	and	r3, r6, #48	; 0x30
   2cdf0:	cmp	r3, #16
   2cdf4:	beq	2f784 <__assert_fail@plt+0x1e578>
   2cdf8:	bls	2ead4 <__assert_fail@plt+0x1d8c8>
   2cdfc:	cmp	r3, #32
   2ce00:	beq	2f540 <__assert_fail@plt+0x1e334>
   2ce04:	cmp	r3, #48	; 0x30
   2ce08:	ldreq	r8, [pc, #2016]	; 2d5f0 <__assert_fail@plt+0x1c3e4>
   2ce0c:	bne	2eadc <__assert_fail@plt+0x1d8d0>
   2ce10:	add	r9, r5, #8
   2ce14:	mov	r0, r9
   2ce18:	bl	11080 <strlen@plt>
   2ce1c:	ldr	r2, [pc, #2000]	; 2d5f4 <__assert_fail@plt+0x1c3e8>
   2ce20:	mov	r1, r8
   2ce24:	ldrh	r2, [r2]
   2ce28:	mov	r3, r0
   2ce2c:	add	r0, r0, #2
   2ce30:	add	r0, r9, r0
   2ce34:	strh	r2, [r9, r3]
   2ce38:	bl	10ff0 <strcpy@plt>
   2ce3c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ce40:	sub	r2, r2, #15360	; 0x3c00
   2ce44:	cmp	r3, r2
   2ce48:	ldrne	r5, [pc, #2356]	; 2d784 <__assert_fail@plt+0x1c578>
   2ce4c:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2ce50:	and	r3, r6, #-16777216	; 0xff000000
   2ce54:	cmp	r3, #67108864	; 0x4000000
   2ce58:	beq	2d4fc <__assert_fail@plt+0x1c2f0>
   2ce5c:	bhi	2dff0 <__assert_fail@plt+0x1cde4>
   2ce60:	cmp	r3, #16777216	; 0x1000000
   2ce64:	beq	2fe48 <__assert_fail@plt+0x1ec3c>
   2ce68:	bls	2dfe0 <__assert_fail@plt+0x1cdd4>
   2ce6c:	cmp	r3, #33554432	; 0x2000000
   2ce70:	beq	2fe30 <__assert_fail@plt+0x1ec24>
   2ce74:	cmp	r3, #50331648	; 0x3000000
   2ce78:	bne	2fde4 <__assert_fail@plt+0x1ebd8>
   2ce7c:	ldr	r3, [pc, #1908]	; 2d5f8 <__assert_fail@plt+0x1c3ec>
   2ce80:	ldr	r5, [pc, #2300]	; 2d784 <__assert_fail@plt+0x1c578>
   2ce84:	ldm	r3, {r0, r1, r2}
   2ce88:	add	r3, r5, #8
   2ce8c:	stmia	r3!, {r0, r1}
   2ce90:	strb	r2, [r3]
   2ce94:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ce98:	cmp	r3, #93	; 0x5d
   2ce9c:	beq	2d83c <__assert_fail@plt+0x1c630>
   2cea0:	bcs	2cf44 <__assert_fail@plt+0x1bd38>
   2cea4:	tst	r6, #1
   2cea8:	ldrne	r3, [pc, #1868]	; 2d5fc <__assert_fail@plt+0x1c3f0>
   2ceac:	ldrne	r5, [pc, #2256]	; 2d784 <__assert_fail@plt+0x1c578>
   2ceb0:	ldreq	r5, [pc, #2252]	; 2d784 <__assert_fail@plt+0x1c578>
   2ceb4:	ldmne	r3, {r0, r1, r2}
   2ceb8:	addne	r3, r5, #8
   2cebc:	lsrne	ip, r2, #16
   2cec0:	stmiane	r3!, {r0, r1}
   2cec4:	strhne	r2, [r3], #2
   2cec8:	strbne	ip, [r3]
   2cecc:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ced0:	cmp	r3, #106	; 0x6a
   2ced4:	ldrne	r5, [pc, #2216]	; 2d784 <__assert_fail@plt+0x1c578>
   2ced8:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2cedc:	tst	r6, #1
   2cee0:	ldrne	r3, [pc, #1816]	; 2d600 <__assert_fail@plt+0x1c3f4>
   2cee4:	ldrne	r5, [pc, #2200]	; 2d784 <__assert_fail@plt+0x1c578>
   2cee8:	ldreq	r5, [pc, #2196]	; 2d784 <__assert_fail@plt+0x1c578>
   2ceec:	ldmne	r3, {r0, r1}
   2cef0:	strne	r0, [r8, #2808]	; 0xaf8
   2cef4:	strhne	r1, [r5, #12]
   2cef8:	tst	r6, #2
   2cefc:	bne	2d350 <__assert_fail@plt+0x1c144>
   2cf00:	tst	r6, #16
   2cf04:	bne	2edec <__assert_fail@plt+0x1dbe0>
   2cf08:	tst	r6, #32
   2cf0c:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2cf10:	add	r8, r5, #8
   2cf14:	mov	r0, r8
   2cf18:	bl	11080 <strlen@plt>
   2cf1c:	ldr	r3, [pc, #1760]	; 2d604 <__assert_fail@plt+0x1c3f8>
   2cf20:	add	ip, r8, r0
   2cf24:	mov	lr, r0
   2cf28:	ldm	r3!, {r0, r1, r2}
   2cf2c:	ldrb	r3, [r3]
   2cf30:	str	r0, [r8, lr]
   2cf34:	str	r1, [ip, #4]
   2cf38:	strb	r3, [ip, #12]
   2cf3c:	str	r2, [ip, #8]
   2cf40:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cf44:	cmp	r3, #99	; 0x63
   2cf48:	ldrne	r5, [pc, #2100]	; 2d784 <__assert_fail@plt+0x1c578>
   2cf4c:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2cf50:	tst	r6, #16
   2cf54:	ldrne	lr, [pc, #1708]	; 2d608 <__assert_fail@plt+0x1c3fc>
   2cf58:	ldrne	r5, [pc, #2084]	; 2d784 <__assert_fail@plt+0x1c578>
   2cf5c:	ldreq	r5, [pc, #2080]	; 2d784 <__assert_fail@plt+0x1c578>
   2cf60:	ldmne	lr!, {r0, r1, r2, r3}
   2cf64:	addne	ip, r5, #8
   2cf68:	stmiane	ip!, {r0, r1, r2, r3}
   2cf6c:	ldmne	lr, {r0, r1, r2}
   2cf70:	stmiane	ip!, {r0, r1}
   2cf74:	strbne	r2, [ip]
   2cf78:	tst	r6, #32
   2cf7c:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2cf80:	add	r8, r5, #8
   2cf84:	mov	r0, r8
   2cf88:	bl	11080 <strlen@plt>
   2cf8c:	ldr	ip, [pc, #1656]	; 2d60c <__assert_fail@plt+0x1c400>
   2cf90:	add	lr, r8, r0
   2cf94:	mov	r9, r0
   2cf98:	ldm	ip!, {r0, r1, r2, r3}
   2cf9c:	str	r0, [r8, r9]
   2cfa0:	str	r1, [lr, #4]
   2cfa4:	ldm	ip!, {r0, r1}
   2cfa8:	str	r3, [lr, #12]
   2cfac:	str	r2, [lr, #8]
   2cfb0:	ldrb	r3, [ip]
   2cfb4:	str	r0, [lr, #16]
   2cfb8:	str	r1, [lr, #20]
   2cfbc:	strb	r3, [lr, #24]
   2cfc0:	b	2c898 <__assert_fail@plt+0x1b68c>
   2cfc4:	ldr	r1, [pc, #1604]	; 2d610 <__assert_fail@plt+0x1c404>
   2cfc8:	b	2c6a4 <__assert_fail@plt+0x1b498>
   2cfcc:	ldr	r2, [pc, #1600]	; 2d614 <__assert_fail@plt+0x1c408>
   2cfd0:	b	2c73c <__assert_fail@plt+0x1b530>
   2cfd4:	ldr	r5, [pc, #1960]	; 2d784 <__assert_fail@plt+0x1c578>
   2cfd8:	mov	r2, #1024	; 0x400
   2cfdc:	add	r0, r5, #8
   2cfe0:	mov	r1, #0
   2cfe4:	and	r9, r6, #240	; 0xf0
   2cfe8:	bl	110bc <memset@plt>
   2cfec:	cmp	r9, #32
   2cff0:	and	sl, r6, #-268435456	; 0xf0000000
   2cff4:	and	fp, r6, #15
   2cff8:	beq	2e3d8 <__assert_fail@plt+0x1d1cc>
   2cffc:	bls	2e3c8 <__assert_fail@plt+0x1d1bc>
   2d000:	cmp	r9, #64	; 0x40
   2d004:	beq	2e3d8 <__assert_fail@plt+0x1d1cc>
   2d008:	cmp	r9, #80	; 0x50
   2d00c:	beq	2e3d8 <__assert_fail@plt+0x1d1cc>
   2d010:	cmp	r9, #48	; 0x30
   2d014:	beq	2e3d8 <__assert_fail@plt+0x1d1cc>
   2d018:	ldr	lr, [pc, #1528]	; 2d618 <__assert_fail@plt+0x1c40c>
   2d01c:	add	ip, r5, #8
   2d020:	mov	r8, #20
   2d024:	ldm	lr!, {r0, r1, r2, r3}
   2d028:	stmia	ip!, {r0, r1, r2, r3}
   2d02c:	ldm	lr, {r0, r1}
   2d030:	str	r0, [ip], #4
   2d034:	strb	r1, [ip]
   2d038:	add	r0, r5, #8
   2d03c:	cmp	fp, #2
   2d040:	add	r0, r0, r8
   2d044:	rsb	r1, r8, #1024	; 0x400
   2d048:	bhi	2eac4 <__assert_fail@plt+0x1d8b8>
   2d04c:	ldr	r3, [pc, #1804]	; 2d760 <__assert_fail@plt+0x1c554>
   2d050:	ldr	r2, [pc, #1804]	; 2d764 <__assert_fail@plt+0x1c558>
   2d054:	add	fp, r3, fp, lsl #2
   2d058:	ldr	r3, [fp, #652]	; 0x28c
   2d05c:	bl	110b0 <snprintf@plt>
   2d060:	add	r8, r0, r8
   2d064:	cmp	r9, #0
   2d068:	add	r9, r5, #8
   2d06c:	add	r0, r9, r8
   2d070:	rsb	r1, r8, #1024	; 0x400
   2d074:	beq	2f598 <__assert_fail@plt+0x1e38c>
   2d078:	cmp	sl, #536870912	; 0x20000000
   2d07c:	beq	2e894 <__assert_fail@plt+0x1d688>
   2d080:	bls	2e88c <__assert_fail@plt+0x1d680>
   2d084:	cmp	sl, #805306368	; 0x30000000
   2d088:	beq	2e894 <__assert_fail@plt+0x1d688>
   2d08c:	cmp	sl, #1073741824	; 0x40000000
   2d090:	beq	2e894 <__assert_fail@plt+0x1d688>
   2d094:	ldr	r2, [pc, #1408]	; 2d61c <__assert_fail@plt+0x1c410>
   2d098:	bl	110b0 <snprintf@plt>
   2d09c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d0a0:	tst	r6, #1
   2d0a4:	ldrne	r3, [pc, #1396]	; 2d620 <__assert_fail@plt+0x1c414>
   2d0a8:	ldrne	r5, [pc, #1748]	; 2d784 <__assert_fail@plt+0x1c578>
   2d0ac:	ldreq	r5, [pc, #1744]	; 2d784 <__assert_fail@plt+0x1c578>
   2d0b0:	ldmne	r3, {r0, r1}
   2d0b4:	strne	r0, [r8, #2808]	; 0xaf8
   2d0b8:	strhne	r1, [r5, #12]
   2d0bc:	tst	r6, #8
   2d0c0:	bne	2ed04 <__assert_fail@plt+0x1daf8>
   2d0c4:	and	r3, r6, #6
   2d0c8:	cmp	r3, #6
   2d0cc:	ldrls	pc, [pc, r3, lsl #2]
   2d0d0:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d0d4:	andeq	sp, r2, r0, ror r4
   2d0d8:	muleq	r2, r8, r8
   2d0dc:	andeq	sp, r2, r0, lsr r4
   2d0e0:	muleq	r2, r8, r8
   2d0e4:	strdeq	sp, [r2], -r0
   2d0e8:	muleq	r2, r8, r8
   2d0ec:	andeq	sp, r2, r8, lsr #9
   2d0f0:	cmp	r6, #0
   2d0f4:	ldrlt	r3, [pc, #1320]	; 2d624 <__assert_fail@plt+0x1c418>
   2d0f8:	ldrlt	r5, [pc, #1668]	; 2d784 <__assert_fail@plt+0x1c578>
   2d0fc:	ldrge	r5, [pc, #1664]	; 2d784 <__assert_fail@plt+0x1c578>
   2d100:	ldmlt	r3, {r0, r1}
   2d104:	strlt	r0, [r8, #2808]	; 0xaf8
   2d108:	strhlt	r1, [r5, #12]
   2d10c:	tst	r6, #65536	; 0x10000
   2d110:	bne	2eb6c <__assert_fail@plt+0x1d960>
   2d114:	tst	r6, #32768	; 0x8000
   2d118:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2d11c:	mov	r2, #5
   2d120:	ldr	r1, [pc, #1280]	; 2d628 <__assert_fail@plt+0x1c41c>
   2d124:	mov	r0, #0
   2d128:	bl	10f90 <dcgettext@plt>
   2d12c:	mov	r1, r0
   2d130:	add	r0, r5, #8
   2d134:	bl	10fd8 <strcat@plt>
   2d138:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d13c:	tst	r6, #1
   2d140:	ldrne	r3, [pc, #1252]	; 2d62c <__assert_fail@plt+0x1c420>
   2d144:	ldrne	r5, [pc, #1592]	; 2d784 <__assert_fail@plt+0x1c578>
   2d148:	ldreq	r5, [pc, #1588]	; 2d784 <__assert_fail@plt+0x1c578>
   2d14c:	ldmne	r3, {r0, r1, r2}
   2d150:	addne	r3, r5, #8
   2d154:	lsrne	ip, r2, #16
   2d158:	stmiane	r3!, {r0, r1}
   2d15c:	strhne	r2, [r3], #2
   2d160:	strbne	ip, [r3]
   2d164:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d168:	tst	r6, #1
   2d16c:	and	r9, r6, #-16777216	; 0xff000000
   2d170:	bne	2ed98 <__assert_fail@plt+0x1db8c>
   2d174:	ldr	r5, [pc, #1544]	; 2d784 <__assert_fail@plt+0x1c578>
   2d178:	bic	r8, r6, #-16777216	; 0xff000000
   2d17c:	add	sl, r5, #8
   2d180:	tst	r8, #32
   2d184:	bne	2ed48 <__assert_fail@plt+0x1db3c>
   2d188:	cmp	r9, #33554432	; 0x2000000
   2d18c:	beq	30120 <__assert_fail@plt+0x1ef14>
   2d190:	bls	2e2ac <__assert_fail@plt+0x1d0a0>
   2d194:	cmp	r9, #67108864	; 0x4000000
   2d198:	beq	3007c <__assert_fail@plt+0x1ee70>
   2d19c:	cmp	r9, #83886080	; 0x5000000
   2d1a0:	beq	2ff74 <__assert_fail@plt+0x1ed68>
   2d1a4:	cmp	r9, #50331648	; 0x3000000
   2d1a8:	beq	2fe14 <__assert_fail@plt+0x1ec08>
   2d1ac:	ldr	ip, [pc, #1148]	; 2d630 <__assert_fail@plt+0x1c424>
   2d1b0:	cmp	r8, #0
   2d1b4:	ldm	ip!, {r0, r1, r2, r3}
   2d1b8:	ldrh	lr, [ip, #4]
   2d1bc:	str	r0, [sl]
   2d1c0:	ldr	r0, [ip]
   2d1c4:	str	r1, [sl, #4]
   2d1c8:	str	r2, [sl, #8]
   2d1cc:	str	r3, [sl, #12]
   2d1d0:	strh	lr, [sl, #20]
   2d1d4:	str	r0, [sl, #16]
   2d1d8:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2d1dc:	mov	r2, #5
   2d1e0:	ldr	r1, [pc, #1100]	; 2d634 <__assert_fail@plt+0x1c428>
   2d1e4:	mov	r0, #0
   2d1e8:	bl	10f90 <dcgettext@plt>
   2d1ec:	mov	r1, r0
   2d1f0:	add	r0, r5, #8
   2d1f4:	bl	10fd8 <strcat@plt>
   2d1f8:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d1fc:	tst	r6, #256	; 0x100
   2d200:	ldrne	r3, [pc, #1072]	; 2d638 <__assert_fail@plt+0x1c42c>
   2d204:	ldrne	r5, [pc, #1400]	; 2d784 <__assert_fail@plt+0x1c578>
   2d208:	ldreq	r5, [pc, #1396]	; 2d784 <__assert_fail@plt+0x1c578>
   2d20c:	ldmne	r3, {r0, r1}
   2d210:	strne	r0, [r8, #2808]	; 0xaf8
   2d214:	strhne	r1, [r5, #12]
   2d218:	tst	r6, #512	; 0x200
   2d21c:	bne	2ec9c <__assert_fail@plt+0x1da90>
   2d220:	tst	r6, #2048	; 0x800
   2d224:	bne	2ec6c <__assert_fail@plt+0x1da60>
   2d228:	tst	r6, #1024	; 0x400
   2d22c:	bne	2ec44 <__assert_fail@plt+0x1da38>
   2d230:	tst	r6, #8388608	; 0x800000
   2d234:	bne	2ec14 <__assert_fail@plt+0x1da08>
   2d238:	ands	r3, r6, #3
   2d23c:	beq	2ebe8 <__assert_fail@plt+0x1d9dc>
   2d240:	cmp	r3, #1
   2d244:	beq	2f478 <__assert_fail@plt+0x1e26c>
   2d248:	cmp	r3, #2
   2d24c:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2d250:	add	r8, r5, #8
   2d254:	mov	r0, r8
   2d258:	bl	11080 <strlen@plt>
   2d25c:	ldr	r2, [pc, #984]	; 2d63c <__assert_fail@plt+0x1c430>
   2d260:	mov	r3, r0
   2d264:	add	r1, r8, r0
   2d268:	ldr	r0, [r2]
   2d26c:	ldrh	r2, [r2, #4]
   2d270:	str	r0, [r8, r3]
   2d274:	strh	r2, [r1, #4]
   2d278:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d27c:	and	r3, r6, #-268435456	; 0xf0000000
   2d280:	cmp	r3, #536870912	; 0x20000000
   2d284:	beq	2f720 <__assert_fail@plt+0x1e514>
   2d288:	bls	2e528 <__assert_fail@plt+0x1d31c>
   2d28c:	cmp	r3, #1073741824	; 0x40000000
   2d290:	beq	2f760 <__assert_fail@plt+0x1e554>
   2d294:	cmp	r3, #1610612736	; 0x60000000
   2d298:	beq	2f73c <__assert_fail@plt+0x1e530>
   2d29c:	cmp	r3, #805306368	; 0x30000000
   2d2a0:	beq	2f6c4 <__assert_fail@plt+0x1e4b8>
   2d2a4:	mov	r2, #5
   2d2a8:	ldr	r1, [pc, #912]	; 2d640 <__assert_fail@plt+0x1c434>
   2d2ac:	mov	r0, #0
   2d2b0:	bl	10f90 <dcgettext@plt>
   2d2b4:	ldr	r5, [pc, #1224]	; 2d784 <__assert_fail@plt+0x1c578>
   2d2b8:	mov	r1, r0
   2d2bc:	add	r0, r5, #8
   2d2c0:	bl	10fd8 <strcat@plt>
   2d2c4:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d2c8:	and	r3, r6, #12
   2d2cc:	cmp	r3, #8
   2d2d0:	beq	2f38c <__assert_fail@plt+0x1e180>
   2d2d4:	cmp	r3, #12
   2d2d8:	beq	2f374 <__assert_fail@plt+0x1e168>
   2d2dc:	cmp	r3, #4
   2d2e0:	ldreq	r3, [pc, #860]	; 2d644 <__assert_fail@plt+0x1c438>
   2d2e4:	ldreq	r5, [pc, #1176]	; 2d784 <__assert_fail@plt+0x1c578>
   2d2e8:	ldrne	r5, [pc, #1172]	; 2d784 <__assert_fail@plt+0x1c578>
   2d2ec:	ldmeq	r3, {r0, r1}
   2d2f0:	streq	r0, [r8, #2808]	; 0xaf8
   2d2f4:	strheq	r1, [r5, #12]
   2d2f8:	tst	r6, #1
   2d2fc:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2d300:	add	r8, r5, #8
   2d304:	mov	r0, r8
   2d308:	bl	11080 <strlen@plt>
   2d30c:	ldr	ip, [pc, #664]	; 2d5ac <__assert_fail@plt+0x1c3a0>
   2d310:	add	lr, r8, r0
   2d314:	mov	r9, r0
   2d318:	ldm	ip!, {r0, r1, r2, r3}
   2d31c:	ldrb	ip, [ip]
   2d320:	str	r0, [r8, r9]
   2d324:	str	r1, [lr, #4]
   2d328:	strb	ip, [lr, #16]
   2d32c:	str	r2, [lr, #8]
   2d330:	str	r3, [lr, #12]
   2d334:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d338:	mov	r2, #5
   2d33c:	ldr	r1, [pc, #772]	; 2d648 <__assert_fail@plt+0x1c43c>
   2d340:	mov	r0, #0
   2d344:	bl	10f90 <dcgettext@plt>
   2d348:	bl	10f24 <printf@plt>
   2d34c:	b	2c9b8 <__assert_fail@plt+0x1b7ac>
   2d350:	add	r8, r5, #8
   2d354:	mov	r0, r8
   2d358:	bl	11080 <strlen@plt>
   2d35c:	ldr	r3, [pc, #744]	; 2d64c <__assert_fail@plt+0x1c440>
   2d360:	mov	r2, r0
   2d364:	add	ip, r8, r0
   2d368:	ldm	r3!, {r0, r1}
   2d36c:	str	r0, [r8, r2]
   2d370:	str	r1, [ip, #4]
   2d374:	b	2cf00 <__assert_fail@plt+0x1bcf4>
   2d378:	add	r8, r5, #8
   2d37c:	mov	r0, r8
   2d380:	bl	11080 <strlen@plt>
   2d384:	ldr	r2, [pc, #708]	; 2d650 <__assert_fail@plt+0x1c444>
   2d388:	mov	r3, r0
   2d38c:	add	r1, r8, r0
   2d390:	ldr	r0, [r2]
   2d394:	ldrh	r2, [r2, #4]
   2d398:	str	r0, [r8, r3]
   2d39c:	strh	r2, [r1, #4]
   2d3a0:	b	2ca38 <__assert_fail@plt+0x1b82c>
   2d3a4:	add	r8, r5, #8
   2d3a8:	mov	r0, r8
   2d3ac:	bl	11080 <strlen@plt>
   2d3b0:	ldr	r3, [pc, #668]	; 2d654 <__assert_fail@plt+0x1c448>
   2d3b4:	add	r2, r8, r0
   2d3b8:	mov	ip, r0
   2d3bc:	ldm	r3!, {r0, r1}
   2d3c0:	ldrh	r3, [r3]
   2d3c4:	str	r0, [r8, ip]
   2d3c8:	str	r1, [r2, #4]
   2d3cc:	strh	r3, [r2, #8]
   2d3d0:	b	2ccb0 <__assert_fail@plt+0x1baa4>
   2d3d4:	ldr	r3, [pc, #636]	; 2d658 <__assert_fail@plt+0x1c44c>
   2d3d8:	ldr	r5, [pc, #932]	; 2d784 <__assert_fail@plt+0x1c578>
   2d3dc:	ldm	r3, {r0, r1, r2}
   2d3e0:	add	r3, r5, #8
   2d3e4:	stmia	r3!, {r0, r1}
   2d3e8:	strb	r2, [r3]
   2d3ec:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d3f0:	add	r8, r5, #8
   2d3f4:	mov	r0, r8
   2d3f8:	bl	11080 <strlen@plt>
   2d3fc:	ldr	ip, [pc, #600]	; 2d65c <__assert_fail@plt+0x1c450>
   2d400:	add	lr, r8, r0
   2d404:	mov	r9, r0
   2d408:	ldm	ip!, {r0, r1, r2, r3}
   2d40c:	ldrh	sl, [ip]
   2d410:	ldrb	ip, [ip, #2]
   2d414:	str	r0, [r8, r9]
   2d418:	str	r1, [lr, #4]
   2d41c:	str	r2, [lr, #8]
   2d420:	str	r3, [lr, #12]
   2d424:	strh	sl, [lr, #16]
   2d428:	strb	ip, [lr, #18]
   2d42c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d430:	add	r8, r5, #8
   2d434:	mov	r0, r8
   2d438:	bl	11080 <strlen@plt>
   2d43c:	ldr	ip, [pc, #540]	; 2d660 <__assert_fail@plt+0x1c454>
   2d440:	add	lr, r8, r0
   2d444:	mov	r9, r0
   2d448:	ldm	ip!, {r0, r1, r2, r3}
   2d44c:	ldrh	sl, [ip]
   2d450:	ldrb	ip, [ip, #2]
   2d454:	str	r0, [r8, r9]
   2d458:	str	r1, [lr, #4]
   2d45c:	str	r2, [lr, #8]
   2d460:	str	r3, [lr, #12]
   2d464:	strh	sl, [lr, #16]
   2d468:	strb	ip, [lr, #18]
   2d46c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d470:	add	r8, r5, #8
   2d474:	mov	r0, r8
   2d478:	bl	11080 <strlen@plt>
   2d47c:	ldr	ip, [pc, #480]	; 2d664 <__assert_fail@plt+0x1c458>
   2d480:	add	lr, r8, r0
   2d484:	mov	r9, r0
   2d488:	ldm	ip!, {r0, r1, r2, r3}
   2d48c:	ldrb	ip, [ip]
   2d490:	str	r0, [r8, r9]
   2d494:	str	r1, [lr, #4]
   2d498:	strb	ip, [lr, #16]
   2d49c:	str	r2, [lr, #8]
   2d4a0:	str	r3, [lr, #12]
   2d4a4:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d4a8:	add	r8, r5, #8
   2d4ac:	mov	r0, r8
   2d4b0:	bl	11080 <strlen@plt>
   2d4b4:	ldr	ip, [pc, #428]	; 2d668 <__assert_fail@plt+0x1c45c>
   2d4b8:	add	lr, r8, r0
   2d4bc:	mov	r9, r0
   2d4c0:	ldm	ip!, {r0, r1, r2, r3}
   2d4c4:	ldrb	ip, [ip]
   2d4c8:	str	r0, [r8, r9]
   2d4cc:	str	r1, [lr, #4]
   2d4d0:	strb	ip, [lr, #16]
   2d4d4:	str	r2, [lr, #8]
   2d4d8:	str	r3, [lr, #12]
   2d4dc:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d4e0:	ldr	r3, [pc, #388]	; 2d66c <__assert_fail@plt+0x1c460>
   2d4e4:	ldm	r3, {r0, r1, r2}
   2d4e8:	ldr	r5, [pc, #660]	; 2d784 <__assert_fail@plt+0x1c578>
   2d4ec:	add	r3, r5, #8
   2d4f0:	stmia	r3!, {r0, r1}
   2d4f4:	strb	r2, [r3]
   2d4f8:	b	2cb5c <__assert_fail@plt+0x1b950>
   2d4fc:	ldr	r3, [pc, #364]	; 2d670 <__assert_fail@plt+0x1c464>
   2d500:	ldr	r5, [pc, #636]	; 2d784 <__assert_fail@plt+0x1c578>
   2d504:	ldm	r3, {r0, r1, r2}
   2d508:	add	r3, r5, #8
   2d50c:	stmia	r3!, {r0, r1}
   2d510:	strb	r2, [r3]
   2d514:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d518:	ldr	r1, [pc, #340]	; 2d674 <__assert_fail@plt+0x1c468>
   2d51c:	mov	r2, #5
   2d520:	bl	10f90 <dcgettext@plt>
   2d524:	mov	r1, r0
   2d528:	b	2c6a4 <__assert_fail@plt+0x1b498>
   2d52c:			; <UNDEFINED> instruction: 0x464c457f
   2d530:	andeq	r8, r6, r4, asr pc
   2d534:	andeq	sl, r9, r8, lsr r4
   2d538:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   2d53c:	muleq	r6, r4, pc	; <UNPREDICTABLE>
   2d540:	andeq	r8, r6, r4, lsr #31
   2d544:			; <UNDEFINED> instruction: 0x00068fb0
   2d548:			; <UNDEFINED> instruction: 0x00068fb8
   2d54c:	andeq	r2, r6, r8, lsl lr
   2d550:	strdeq	sl, [r9], -r0
   2d554:	andeq	r8, r6, r4, ror #31
   2d558:	andeq	sl, r9, r0, lsl pc
   2d55c:	andeq	r9, r6, ip, asr #32
   2d560:	andeq	fp, r6, ip, ror #2
   2d564:	andeq	r9, r6, r8, lsl #1
   2d568:	strheq	r9, [r6], -r4
   2d56c:	andeq	r9, r6, r0, ror #1
   2d570:	andeq	r9, r6, ip, lsl #2
   2d574:	andeq	r9, r6, r8, lsr r1
   2d578:	andeq	r9, r6, r4, ror #2
   2d57c:	andeq	r9, r6, ip, lsl #3
   2d580:	andeq	r2, r6, r0, ror sp
   2d584:			; <UNDEFINED> instruction: 0x000691b4
   2d588:	strdeq	r9, [r6], -r0
   2d58c:	andeq	r9, r6, r4, lsl #4
   2d590:	andeq	sl, r6, r8, ror #3
   2d594:	andeq	sl, r6, ip, lsl r2
   2d598:	andeq	sl, r6, r0, asr r2
   2d59c:	andeq	sl, r9, ip, lsr #8
   2d5a0:	andeq	sl, r6, r4, lsl #5
   2d5a4:			; <UNDEFINED> instruction: 0x0006a2b8
   2d5a8:	andeq	sl, r6, r4, ror #5
   2d5ac:	andeq	sl, r6, r8, lsl #1
   2d5b0:	andeq	r8, r6, ip, lsl pc
   2d5b4:	andeq	r8, r6, r8, lsr pc
   2d5b8:	strheq	sl, [r6], -r8
   2d5bc:	andeq	r9, r0, r1, asr #32
   2d5c0:	andeq	r9, r0, r0, lsl #1
   2d5c4:	andeq	pc, r0, sp
   2d5c8:	ldrdeq	r9, [r6], -r0
   2d5cc:	andeq	r9, r6, ip, ror #13
   2d5d0:	andeq	r9, r6, r8, lsl #15
   2d5d4:	andeq	r9, r6, r8, ror #18
   2d5d8:	andeq	sl, r6, r4, lsr r0
   2d5dc:	andeq	sl, r6, ip, asr #32
   2d5e0:	orreq	r8, r1, #0
   2d5e4:	andeq	r5, r6, r4, ror r8
   2d5e8:	andeq	r9, r6, r4, ror #12
   2d5ec:	andeq	r9, r6, r0, ror r6
   2d5f0:	andeq	r8, r6, r4, lsl pc
   2d5f4:			; <UNDEFINED> instruction: 0x00068eb8
   2d5f8:	andeq	r9, r6, ip, lsr #12
   2d5fc:	muleq	r6, r4, lr
   2d600:	andeq	r9, r6, r4, asr #11
   2d604:	andeq	r9, r6, r4, ror #11
   2d608:	andeq	r9, r6, r0, ror #30
   2d60c:	andeq	r9, r6, ip, ror pc
   2d610:	strdeq	r8, [r6], -r8	; <UNPREDICTABLE>
   2d614:	andeq	r8, r6, r0, lsl #30
   2d618:	andeq	r9, r6, r8, lsl #23
   2d61c:	strdeq	r9, [r6], -r4
   2d620:	andeq	r9, r6, ip, lsr #26
   2d624:	andeq	r9, r6, r4, lsr #15
   2d628:			; <UNDEFINED> instruction: 0x000697bc
   2d62c:	andeq	sl, r6, r0, asr #1
   2d630:	andeq	r9, r6, ip, lsr #6
   2d634:	andeq	r9, r6, r4, asr #6
   2d638:	andeq	r9, r6, r0, lsr #29
   2d63c:	andeq	r9, r6, ip, ror #29
   2d640:	andeq	r9, r6, r4, asr #18
   2d644:	andeq	sl, r6, r0, ror r0
   2d648:	andeq	sl, r6, r8, lsl r3
   2d64c:	andeq	r9, r6, ip, asr #11
   2d650:	muleq	r6, ip, r0
   2d654:	andeq	sl, r6, r0, asr #32
   2d658:	andeq	r9, r6, r4, asr #12
   2d65c:	andeq	r9, r6, r0, asr sp
   2d660:	andeq	r9, r6, ip, lsr sp
   2d664:	andeq	r9, r6, r0, lsl r4
   2d668:	andeq	r9, r6, r4, ror #26
   2d66c:	andeq	r9, r6, r0, lsr #13
   2d670:	andeq	r9, r6, r8, lsr r6
   2d674:	andeq	r3, r6, r8, lsl r0
   2d678:	andeq	r9, r6, r0, lsr r0
   2d67c:	strdeq	r8, [r6], -r0
   2d680:	andeq	r9, r6, r0, lsl r0
   2d684:	andeq	sl, r6, ip, ror r2
   2d688:	andeq	r9, r6, r8, ror r0
   2d68c:	andeq	sl, r6, r0, lsl r3
   2d690:	andeq	r9, r6, r0, asr #4
   2d694:	andeq	r9, r6, ip, asr #5
   2d698:	andeq	r9, r6, r4, lsr r2
   2d69c:	andeq	r9, r6, r8, asr r2
   2d6a0:	andeq	r9, r6, r4, ror #4
   2d6a4:	andeq	r9, r6, ip, asr #4
   2d6a8:	muleq	r6, r4, r2
   2d6ac:	muleq	r6, r8, pc	; <UNPREDICTABLE>
   2d6b0:	andeq	r9, r6, r4, lsr #31
   2d6b4:	andeq	sl, r6, r8, lsl r0
   2d6b8:	ldrdeq	r9, [r6], -r0
   2d6bc:	andeq	r9, r6, ip, ror #16
   2d6c0:	andeq	r9, r6, r8, asr #17
   2d6c4:	andeq	r9, r6, r4, lsr #17
   2d6c8:	muleq	r6, r4, r6
   2d6cc:	muleq	r6, r8, r5
   2d6d0:			; <UNDEFINED> instruction: 0x000695b4
   2d6d4:	andeq	r9, r6, ip, lsl #11
   2d6d8:	andeq	r9, r6, r0, lsl #11
   2d6dc:	andeq	r9, r6, r4, ror r5
   2d6e0:	andeq	r9, r6, r8, ror #10
   2d6e4:	andeq	r9, r6, ip, asr r5
   2d6e8:	andeq	r9, r6, r0, asr r5
   2d6ec:	andeq	r9, r6, r4, asr #10
   2d6f0:	andeq	r9, r6, r0, lsr r5
   2d6f4:	andeq	r9, r6, r4, lsl r5
   2d6f8:	andeq	r9, r6, r8, lsl #10
   2d6fc:	strdeq	r9, [r6], -r4
   2d700:	andeq	r9, r6, ip, lsr r5
   2d704:	andeq	r9, r6, r8, lsr #10
   2d708:	andeq	r9, r6, r0, lsr #10
   2d70c:	andeq	r9, r6, r0, lsl #10
   2d710:	andeq	r9, r6, ip, ror #9
   2d714:	andeq	r9, r6, r4, ror #9
   2d718:	andeq	sl, r6, r0, rrx
   2d71c:	andeq	sl, r6, r8, rrx
   2d720:	andeq	r9, r6, r8, lsr #14
   2d724:	andeq	sl, r6, ip, asr #1
   2d728:	andeq	r9, r6, r0, lsr #26
   2d72c:	andeq	r9, r6, r4, lsl r6
   2d730:	andeq	r9, r6, r0, ror r9
   2d734:	andeq	r9, r6, r0, lsr #20
   2d738:	andeq	r9, r6, r8, lsr #21
   2d73c:	andeq	r9, r6, r8, lsl #22
   2d740:	andeq	r9, r6, r4, asr #21
   2d744:	andeq	r9, r6, r0, lsr #22
   2d748:	andeq	r9, r6, r4, lsr fp
   2d74c:	andeq	r9, r6, r8, asr #20
   2d750:	andeq	r9, r6, r0, asr r3
   2d754:	andeq	r9, r6, r0, ror #6
   2d758:	andeq	r9, r6, r0, lsl sl
   2d75c:	andeq	r9, r6, r0, ror #19
   2d760:	andeq	lr, r5, ip, asr #27
   2d764:	andeq	r9, r6, r0, lsl #23
   2d768:	andeq	r9, r6, r4, ror #22
   2d76c:	andeq	r9, r6, r4, ror #20
   2d770:	andeq	r0, r0, fp, lsl #4
   2d774:	andeq	r9, r6, r4, asr pc
   2d778:	andeq	r9, r6, r4, lsl #12
   2d77c:	andeq	r9, r6, r4, lsr r9
   2d780:	andeq	sl, r6, r4, ror #1
   2d784:	andeq	sl, r9, r8, lsr #30
   2d788:	andeq	sl, r6, ip, lsl #2
   2d78c:	andeq	sl, r6, r0, asr #3
   2d790:	andeq	sl, r6, ip, lsr #3
   2d794:	andeq	sl, r6, r0, lsr #3
   2d798:	ldr	r1, [pc, #-300]	; 2d674 <__assert_fail@plt+0x1c468>
   2d79c:	mov	r2, #5
   2d7a0:	bl	10f90 <dcgettext@plt>
   2d7a4:	mov	r1, r0
   2d7a8:	b	2c708 <__assert_fail@plt+0x1b4fc>
   2d7ac:	ldr	r1, [pc, #-316]	; 2d678 <__assert_fail@plt+0x1c46c>
   2d7b0:	mov	r2, #5
   2d7b4:	mov	r0, #0
   2d7b8:	bl	10f90 <dcgettext@plt>
   2d7bc:	mov	r1, r0
   2d7c0:	b	2c708 <__assert_fail@plt+0x1b4fc>
   2d7c4:	ldr	r1, [pc, #-336]	; 2d67c <__assert_fail@plt+0x1c470>
   2d7c8:	b	2c6a4 <__assert_fail@plt+0x1b498>
   2d7cc:	ldr	r1, [pc, #-340]	; 2d680 <__assert_fail@plt+0x1c474>
   2d7d0:	mov	r2, #5
   2d7d4:	mov	r0, #0
   2d7d8:	bl	10f90 <dcgettext@plt>
   2d7dc:	mov	r1, r0
   2d7e0:	b	2c708 <__assert_fail@plt+0x1b4fc>
   2d7e4:	ldr	r1, [r3, #44]	; 0x2c
   2d7e8:	cmp	r1, #0
   2d7ec:	beq	2c90c <__assert_fail@plt+0x1b700>
   2d7f0:	ldr	r0, [pc, #-372]	; 2d684 <__assert_fail@plt+0x1c478>
   2d7f4:	bl	10f24 <printf@plt>
   2d7f8:	b	2c90c <__assert_fail@plt+0x1b700>
   2d7fc:	ldr	r1, [r3, #32]
   2d800:	ldr	r0, [pc, #-388]	; 2d684 <__assert_fail@plt+0x1c478>
   2d804:	bl	10f24 <printf@plt>
   2d808:	b	2c964 <__assert_fail@plt+0x1b758>
   2d80c:	mov	r2, #5
   2d810:	ldr	r1, [pc, #-400]	; 2d688 <__assert_fail@plt+0x1c47c>
   2d814:	mov	r0, #0
   2d818:	bl	10f90 <dcgettext@plt>
   2d81c:	mov	r2, r0
   2d820:	b	2c73c <__assert_fail@plt+0x1b530>
   2d824:	ldr	r5, [pc, #-168]	; 2d784 <__assert_fail@plt+0x1c578>
   2d828:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d82c:	ldr	r1, [r2, #40]	; 0x28
   2d830:	ldr	r0, [pc, #-428]	; 2d68c <__assert_fail@plt+0x1c480>
   2d834:	bl	10f24 <printf@plt>
   2d838:	b	2c9b8 <__assert_fail@plt+0x1b7ac>
   2d83c:	uxtb	r2, r6
   2d840:	sub	r2, r2, #2
   2d844:	cmp	r2, #4
   2d848:	ldrls	pc, [pc, r2, lsl #2]
   2d84c:	b	30838 <__assert_fail@plt+0x1f62c>
   2d850:	andeq	sp, r2, r4, ror #17
   2d854:	ldrdeq	sp, [r2], -ip
   2d858:	ldrdeq	sp, [r2], -r4
   2d85c:	andeq	sp, r2, ip, asr #17
   2d860:	andeq	sp, r2, r4, ror #16
   2d864:	ldr	r3, [pc, #-476]	; 2d690 <__assert_fail@plt+0x1c484>
   2d868:	ldm	r3, {r0, r1, r2}
   2d86c:	ldr	r5, [pc, #-240]	; 2d784 <__assert_fail@plt+0x1c578>
   2d870:	add	r3, r5, #8
   2d874:	stmia	r3!, {r0, r1}
   2d878:	strb	r2, [r3]
   2d87c:	add	r8, r5, #8
   2d880:	mov	r0, r8
   2d884:	bl	11080 <strlen@plt>
   2d888:	and	sl, r6, #3840	; 0xf00
   2d88c:	cmp	sl, #512	; 0x200
   2d890:	mov	r9, r0
   2d894:	add	lr, r8, r0
   2d898:	beq	2f4bc <__assert_fail@plt+0x1e2b0>
   2d89c:	bls	2d8ec <__assert_fail@plt+0x1c6e0>
   2d8a0:	cmp	sl, #768	; 0x300
   2d8a4:	beq	2f514 <__assert_fail@plt+0x1e308>
   2d8a8:	cmp	sl, #1024	; 0x400
   2d8ac:	bne	2f4e0 <__assert_fail@plt+0x1e2d4>
   2d8b0:	ldr	r3, [pc, #-548]	; 2d694 <__assert_fail@plt+0x1c488>
   2d8b4:	ldm	r3!, {r0, r1}
   2d8b8:	ldrb	r3, [r3]
   2d8bc:	str	r0, [r8, r9]
   2d8c0:	str	r1, [lr, #4]
   2d8c4:	strb	r3, [lr, #8]
   2d8c8:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d8cc:	ldr	r3, [pc, #-572]	; 2d698 <__assert_fail@plt+0x1c48c>
   2d8d0:	b	2d868 <__assert_fail@plt+0x1c65c>
   2d8d4:	ldr	r3, [pc, #-576]	; 2d69c <__assert_fail@plt+0x1c490>
   2d8d8:	b	2d868 <__assert_fail@plt+0x1c65c>
   2d8dc:	ldr	r3, [pc, #-580]	; 2d6a0 <__assert_fail@plt+0x1c494>
   2d8e0:	b	2d868 <__assert_fail@plt+0x1c65c>
   2d8e4:	ldr	r3, [pc, #-584]	; 2d6a4 <__assert_fail@plt+0x1c498>
   2d8e8:	b	2d868 <__assert_fail@plt+0x1c65c>
   2d8ec:	cmp	sl, #0
   2d8f0:	bne	2f4e0 <__assert_fail@plt+0x1e2d4>
   2d8f4:	ldr	r3, [pc, #-596]	; 2d6a8 <__assert_fail@plt+0x1c49c>
   2d8f8:	ldm	r3!, {r0, r1, r2}
   2d8fc:	ldrh	ip, [r3]
   2d900:	ldrb	r3, [r3, #2]
   2d904:	str	r0, [r8, r9]
   2d908:	str	r1, [lr, #4]
   2d90c:	str	r2, [lr, #8]
   2d910:	strh	ip, [lr, #12]
   2d914:	strb	r3, [lr, #14]
   2d918:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d91c:	tst	r6, #16
   2d920:	ldr	r5, [pc, #-420]	; 2d784 <__assert_fail@plt+0x1c578>
   2d924:	ldrne	r3, [pc, #-640]	; 2d6ac <__assert_fail@plt+0x1c4a0>
   2d928:	ldreq	r3, [pc, #-640]	; 2d6b0 <__assert_fail@plt+0x1c4a4>
   2d92c:	tst	r6, #32
   2d930:	ldm	r3, {r0, r1, r2}
   2d934:	add	r3, r5, #8
   2d938:	stmia	r3!, {r0, r1}
   2d93c:	strb	r2, [r3]
   2d940:	bne	2f300 <__assert_fail@plt+0x1e0f4>
   2d944:	tst	r6, #128	; 0x80
   2d948:	bne	2f2a4 <__assert_fail@plt+0x1e098>
   2d94c:	tst	r6, #64	; 0x40
   2d950:	bne	2f340 <__assert_fail@plt+0x1e134>
   2d954:	tst	r6, #256	; 0x100
   2d958:	bne	2f26c <__assert_fail@plt+0x1e060>
   2d95c:	ldrb	r3, [r4, #23]
   2d960:	cmp	r3, #13
   2d964:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2d968:	tst	r6, #4
   2d96c:	bne	2fd90 <__assert_fail@plt+0x1eb84>
   2d970:	and	r3, r6, #3
   2d974:	cmp	r3, #2
   2d978:	beq	2fd68 <__assert_fail@plt+0x1eb5c>
   2d97c:	cmp	r3, #3
   2d980:	beq	2fd40 <__assert_fail@plt+0x1eb34>
   2d984:	cmp	r3, #1
   2d988:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2d98c:	add	r8, r5, #8
   2d990:	mov	r0, r8
   2d994:	bl	11080 <strlen@plt>
   2d998:	ldr	r3, [pc, #-748]	; 2d6b4 <__assert_fail@plt+0x1c4a8>
   2d99c:	add	r2, r8, r0
   2d9a0:	mov	ip, r0
   2d9a4:	ldm	r3!, {r0, r1}
   2d9a8:	ldrh	r3, [r3]
   2d9ac:	str	r0, [r8, ip]
   2d9b0:	str	r1, [r2, #4]
   2d9b4:	strh	r3, [r2, #8]
   2d9b8:	b	2c898 <__assert_fail@plt+0x1b68c>
   2d9bc:	and	r3, r6, #-268435456	; 0xf0000000
   2d9c0:	cmp	r3, #-268435456	; 0xf0000000
   2d9c4:	ldreq	r3, [pc, #-788]	; 2d6b8 <__assert_fail@plt+0x1c4ac>
   2d9c8:	ldreq	r5, [pc, #-588]	; 2d784 <__assert_fail@plt+0x1c578>
   2d9cc:	ldrne	r5, [pc, #-592]	; 2d784 <__assert_fail@plt+0x1c578>
   2d9d0:	ldmeq	r3, {r0, r1, r2}
   2d9d4:	addeq	r3, r5, #8
   2d9d8:	stmeq	r3, {r0, r1, r2}
   2d9dc:	tst	r6, #1048576	; 0x100000
   2d9e0:	bne	2f234 <__assert_fail@plt+0x1e028>
   2d9e4:	tst	r6, #3
   2d9e8:	beq	2f1f8 <__assert_fail@plt+0x1dfec>
   2d9ec:	tst	r6, #96	; 0x60
   2d9f0:	beq	2f1c0 <__assert_fail@plt+0x1dfb4>
   2d9f4:	tst	r6, #768	; 0x300
   2d9f8:	beq	2f18c <__assert_fail@plt+0x1df80>
   2d9fc:	tst	r6, #3072	; 0xc00
   2da00:	beq	2f150 <__assert_fail@plt+0x1df44>
   2da04:	tst	r6, #12288	; 0x3000
   2da08:	beq	2f11c <__assert_fail@plt+0x1df10>
   2da0c:	tst	r6, #49152	; 0xc000
   2da10:	beq	2ecd0 <__assert_fail@plt+0x1dac4>
   2da14:	uxth	r8, r6
   2da18:	cmp	r8, #0
   2da1c:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2da20:	add	r9, r5, #8
   2da24:	b	2da58 <__assert_fail@plt+0x1c84c>
   2da28:	cmp	r3, #4096	; 0x1000
   2da2c:	beq	2ea58 <__assert_fail@plt+0x1d84c>
   2da30:	bls	2dacc <__assert_fail@plt+0x1c8c0>
   2da34:	cmp	r3, #16384	; 0x4000
   2da38:	beq	2ea00 <__assert_fail@plt+0x1d7f4>
   2da3c:	cmp	r3, #32768	; 0x8000
   2da40:	beq	2e9ec <__assert_fail@plt+0x1d7e0>
   2da44:	cmp	r3, #8192	; 0x2000
   2da48:	beq	2ea44 <__assert_fail@plt+0x1d838>
   2da4c:	sub	r3, r8, #1
   2da50:	ands	r8, r8, r3
   2da54:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2da58:	rsb	r3, r8, #0
   2da5c:	and	r3, r3, r8
   2da60:	cmp	r3, #512	; 0x200
   2da64:	beq	2e9c0 <__assert_fail@plt+0x1d7b4>
   2da68:	bhi	2da28 <__assert_fail@plt+0x1c81c>
   2da6c:	cmp	r3, #32
   2da70:	beq	2ea80 <__assert_fail@plt+0x1d874>
   2da74:	bhi	2db10 <__assert_fail@plt+0x1c904>
   2da78:	cmp	r3, #1
   2da7c:	beq	2ea6c <__assert_fail@plt+0x1d860>
   2da80:	cmp	r3, #2
   2da84:	bne	2da4c <__assert_fail@plt+0x1c840>
   2da88:	mov	r0, r9
   2da8c:	bl	11080 <strlen@plt>
   2da90:	ldr	ip, [pc, #-988]	; 2d6bc <__assert_fail@plt+0x1c4b0>
   2da94:	mov	sl, r0
   2da98:	ldm	ip!, {r0, r1, r2, r3}
   2da9c:	add	lr, r9, sl
   2daa0:	str	r0, [r9, sl]
   2daa4:	ldrh	fp, [ip, #4]
   2daa8:	ldrb	sl, [ip, #6]
   2daac:	ldr	r0, [ip]
   2dab0:	str	r1, [lr, #4]
   2dab4:	str	r2, [lr, #8]
   2dab8:	str	r3, [lr, #12]
   2dabc:	str	r0, [lr, #16]
   2dac0:	strh	fp, [lr, #20]
   2dac4:	strb	sl, [lr, #22]
   2dac8:	b	2da4c <__assert_fail@plt+0x1c840>
   2dacc:	cmp	r3, #1024	; 0x400
   2dad0:	beq	2ea94 <__assert_fail@plt+0x1d888>
   2dad4:	cmp	r3, #2048	; 0x800
   2dad8:	bne	2da4c <__assert_fail@plt+0x1c840>
   2dadc:	mov	r0, r9
   2dae0:	bl	11080 <strlen@plt>
   2dae4:	ldr	r3, [pc, #-1068]	; 2d6c0 <__assert_fail@plt+0x1c4b4>
   2dae8:	mov	ip, r0
   2daec:	ldm	r3!, {r0, r1}
   2daf0:	add	r2, r9, ip
   2daf4:	ldrh	lr, [r3]
   2daf8:	ldrb	r3, [r3, #2]
   2dafc:	str	r0, [r9, ip]
   2db00:	str	r1, [r2, #4]
   2db04:	strh	lr, [r2, #8]
   2db08:	strb	r3, [r2, #10]
   2db0c:	b	2da4c <__assert_fail@plt+0x1c840>
   2db10:	cmp	r3, #64	; 0x40
   2db14:	beq	2ea14 <__assert_fail@plt+0x1d808>
   2db18:	cmp	r3, #256	; 0x100
   2db1c:	bne	2da4c <__assert_fail@plt+0x1c840>
   2db20:	mov	r0, r9
   2db24:	bl	11080 <strlen@plt>
   2db28:	ldr	r3, [pc, #-1132]	; 2d6c4 <__assert_fail@plt+0x1c4b8>
   2db2c:	mov	ip, r0
   2db30:	b	2daec <__assert_fail@plt+0x1c8e0>
   2db34:	cmp	r3, #0
   2db38:	beq	2f690 <__assert_fail@plt+0x1e484>
   2db3c:	cmp	r3, #16777216	; 0x1000000
   2db40:	ldreq	r3, [pc, #-1152]	; 2d6c8 <__assert_fail@plt+0x1c4bc>
   2db44:	beq	2d4e4 <__assert_fail@plt+0x1c2d8>
   2db48:	b	2cb3c <__assert_fail@plt+0x1b930>
   2db4c:	and	r3, r6, #127	; 0x7f
   2db50:	sub	r3, r3, #1
   2db54:	cmp	r3, #106	; 0x6a
   2db58:	ldrls	pc, [pc, r3, lsl #2]
   2db5c:	b	2fdfc <__assert_fail@plt+0x1ebf0>
   2db60:	andeq	sp, r2, r4, lsr lr
   2db64:	andeq	sp, r2, ip, lsl lr
   2db68:	andeq	sp, r2, r4, lsl #28
   2db6c:	andeq	sp, r2, ip, ror #27
   2db70:	ldrdeq	sp, [r2], -r4
   2db74:			; <UNDEFINED> instruction: 0x0002ddbc
   2db78:	strdeq	pc, [r2], -ip
   2db7c:	strdeq	pc, [r2], -ip
   2db80:	strdeq	pc, [r2], -ip
   2db84:	strdeq	pc, [r2], -ip
   2db88:	strdeq	pc, [r2], -ip
   2db8c:	strdeq	pc, [r2], -ip
   2db90:	strdeq	pc, [r2], -ip
   2db94:	strdeq	pc, [r2], -ip
   2db98:	strdeq	pc, [r2], -ip
   2db9c:	strdeq	pc, [r2], -ip
   2dba0:	strdeq	pc, [r2], -ip
   2dba4:	strdeq	pc, [r2], -ip
   2dba8:	strdeq	pc, [r2], -ip
   2dbac:	strdeq	pc, [r2], -ip
   2dbb0:	strdeq	pc, [r2], -ip
   2dbb4:	strdeq	pc, [r2], -ip
   2dbb8:	strdeq	pc, [r2], -ip
   2dbbc:	strdeq	pc, [r2], -ip
   2dbc0:			; <UNDEFINED> instruction: 0x0002ddb4
   2dbc4:	strdeq	pc, [r2], -ip
   2dbc8:	strdeq	pc, [r2], -ip
   2dbcc:	strdeq	pc, [r2], -ip
   2dbd0:	strdeq	pc, [r2], -ip
   2dbd4:	strdeq	pc, [r2], -ip
   2dbd8:	andeq	sp, r2, ip, lsr #27
   2dbdc:	strdeq	pc, [r2], -ip
   2dbe0:	strdeq	pc, [r2], -ip
   2dbe4:	strdeq	pc, [r2], -ip
   2dbe8:	andeq	sp, r2, r4, lsr #27
   2dbec:	strdeq	pc, [r2], -ip
   2dbf0:	strdeq	pc, [r2], -ip
   2dbf4:	strdeq	pc, [r2], -ip
   2dbf8:	strdeq	pc, [r2], -ip
   2dbfc:	strdeq	pc, [r2], -ip
   2dc00:	strdeq	pc, [r2], -ip
   2dc04:	strdeq	pc, [r2], -ip
   2dc08:	strdeq	pc, [r2], -ip
   2dc0c:	strdeq	pc, [r2], -ip
   2dc10:	strdeq	pc, [r2], -ip
   2dc14:	strdeq	pc, [r2], -ip
   2dc18:	strdeq	pc, [r2], -ip
   2dc1c:	strdeq	pc, [r2], -ip
   2dc20:	strdeq	pc, [r2], -ip
   2dc24:	strdeq	pc, [r2], -ip
   2dc28:	andeq	sp, r2, r8, lsl #27
   2dc2c:	strdeq	pc, [r2], -ip
   2dc30:	strdeq	pc, [r2], -ip
   2dc34:	strdeq	pc, [r2], -ip
   2dc38:	strdeq	pc, [r2], -ip
   2dc3c:	strdeq	pc, [r2], -ip
   2dc40:	strdeq	pc, [r2], -ip
   2dc44:	strdeq	pc, [r2], -ip
   2dc48:	strdeq	pc, [r2], -ip
   2dc4c:	strdeq	pc, [r2], -ip
   2dc50:	strdeq	pc, [r2], -ip
   2dc54:	strdeq	pc, [r2], -ip
   2dc58:	strdeq	pc, [r2], -ip
   2dc5c:	strdeq	pc, [r2], -ip
   2dc60:	strdeq	pc, [r2], -ip
   2dc64:	strdeq	pc, [r2], -ip
   2dc68:	strdeq	pc, [r2], -ip
   2dc6c:	strdeq	pc, [r2], -ip
   2dc70:	strdeq	pc, [r2], -ip
   2dc74:	strdeq	pc, [r2], -ip
   2dc78:	strdeq	pc, [r2], -ip
   2dc7c:	strdeq	pc, [r2], -ip
   2dc80:	strdeq	pc, [r2], -ip
   2dc84:	strdeq	pc, [r2], -ip
   2dc88:	strdeq	pc, [r2], -ip
   2dc8c:	strdeq	pc, [r2], -ip
   2dc90:	strdeq	pc, [r2], -ip
   2dc94:	strdeq	pc, [r2], -ip
   2dc98:	strdeq	pc, [r2], -ip
   2dc9c:	strdeq	pc, [r2], -ip
   2dca0:	strdeq	pc, [r2], -ip
   2dca4:	strdeq	pc, [r2], -ip
   2dca8:	strdeq	pc, [r2], -ip
   2dcac:	strdeq	pc, [r2], -ip
   2dcb0:	strdeq	pc, [r2], -ip
   2dcb4:	strdeq	pc, [r2], -ip
   2dcb8:	strdeq	pc, [r2], -ip
   2dcbc:	strdeq	pc, [r2], -ip
   2dcc0:	strdeq	pc, [r2], -ip
   2dcc4:	strdeq	pc, [r2], -ip
   2dcc8:	strdeq	pc, [r2], -ip
   2dccc:	strdeq	pc, [r2], -ip
   2dcd0:	strdeq	pc, [r2], -ip
   2dcd4:	strdeq	pc, [r2], -ip
   2dcd8:	strdeq	pc, [r2], -ip
   2dcdc:	strdeq	pc, [r2], -ip
   2dce0:	strdeq	pc, [r2], -ip
   2dce4:	strdeq	pc, [r2], -ip
   2dce8:	strdeq	pc, [r2], -ip
   2dcec:	andeq	sp, r2, r0, lsl #27
   2dcf0:	andeq	sp, r2, r8, ror sp
   2dcf4:	andeq	sp, r2, r0, ror sp
   2dcf8:	andeq	sp, r2, r8, ror #26
   2dcfc:	andeq	sp, r2, r0, ror #26
   2dd00:	andeq	sp, r2, r8, asr sp
   2dd04:	andeq	sp, r2, r0, asr sp
   2dd08:	andeq	sp, r2, ip, lsl #26
   2dd0c:	ldr	r3, [pc, #-1608]	; 2d6cc <__assert_fail@plt+0x1c4c0>
   2dd10:	ldm	r3, {r0, r1, r2}
   2dd14:	ldr	r5, [pc, #-1432]	; 2d784 <__assert_fail@plt+0x1c578>
   2dd18:	add	r3, r5, #8
   2dd1c:	stmia	r3!, {r0, r1}
   2dd20:	strh	r2, [r3]
   2dd24:	tst	r6, #128	; 0x80
   2dd28:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2dd2c:	add	r8, r5, #8
   2dd30:	mov	r0, r8
   2dd34:	bl	11080 <strlen@plt>
   2dd38:	ldr	r1, [pc, #-1648]	; 2d6d0 <__assert_fail@plt+0x1c4c4>
   2dd3c:	rsb	r2, r0, #1020	; 0x3fc
   2dd40:	add	r2, r2, #3
   2dd44:	mov	r0, r8
   2dd48:	bl	111ac <strncat@plt>
   2dd4c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2dd50:	ldr	r3, [pc, #-1668]	; 2d6d4 <__assert_fail@plt+0x1c4c8>
   2dd54:	b	2dd10 <__assert_fail@plt+0x1cb04>
   2dd58:	ldr	r3, [pc, #-1672]	; 2d6d8 <__assert_fail@plt+0x1c4cc>
   2dd5c:	b	2dd10 <__assert_fail@plt+0x1cb04>
   2dd60:	ldr	r3, [pc, #-1676]	; 2d6dc <__assert_fail@plt+0x1c4d0>
   2dd64:	b	2dd10 <__assert_fail@plt+0x1cb04>
   2dd68:	ldr	r3, [pc, #-1680]	; 2d6e0 <__assert_fail@plt+0x1c4d4>
   2dd6c:	b	2dd10 <__assert_fail@plt+0x1cb04>
   2dd70:	ldr	r3, [pc, #-1684]	; 2d6e4 <__assert_fail@plt+0x1c4d8>
   2dd74:	b	2dd10 <__assert_fail@plt+0x1cb04>
   2dd78:	ldr	r3, [pc, #-1688]	; 2d6e8 <__assert_fail@plt+0x1c4dc>
   2dd7c:	b	2dd10 <__assert_fail@plt+0x1cb04>
   2dd80:	ldr	r3, [pc, #-1692]	; 2d6ec <__assert_fail@plt+0x1c4e0>
   2dd84:	b	2dd10 <__assert_fail@plt+0x1cb04>
   2dd88:	ldr	r3, [pc, #-1696]	; 2d6f0 <__assert_fail@plt+0x1c4e4>
   2dd8c:	ldm	r3, {r0, r1, r2}
   2dd90:	ldr	r5, [pc, #-1556]	; 2d784 <__assert_fail@plt+0x1c578>
   2dd94:	add	r3, r5, #8
   2dd98:	stmia	r3!, {r0, r1}
   2dd9c:	strb	r2, [r3]
   2dda0:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2dda4:	ldr	r3, [pc, #-1720]	; 2d6f4 <__assert_fail@plt+0x1c4e8>
   2dda8:	b	2dd8c <__assert_fail@plt+0x1cb80>
   2ddac:	ldr	r3, [pc, #-1724]	; 2d6f8 <__assert_fail@plt+0x1c4ec>
   2ddb0:	b	2dd8c <__assert_fail@plt+0x1cb80>
   2ddb4:	ldr	r3, [pc, #-1728]	; 2d6fc <__assert_fail@plt+0x1c4f0>
   2ddb8:	b	2dd8c <__assert_fail@plt+0x1cb80>
   2ddbc:	ldr	r3, [pc, #-1732]	; 2d700 <__assert_fail@plt+0x1c4f4>
   2ddc0:	ldr	r5, [pc, #-1604]	; 2d784 <__assert_fail@plt+0x1c578>
   2ddc4:	ldm	r3, {r0, r1}
   2ddc8:	add	r3, r5, #8
   2ddcc:	stm	r3, {r0, r1}
   2ddd0:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2ddd4:	ldr	r3, [pc, #-1752]	; 2d704 <__assert_fail@plt+0x1c4f8>
   2ddd8:	ldr	r5, [pc, #-1628]	; 2d784 <__assert_fail@plt+0x1c578>
   2dddc:	ldm	r3, {r0, r1}
   2dde0:	add	r3, r5, #8
   2dde4:	stm	r3, {r0, r1}
   2dde8:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2ddec:	ldr	r3, [pc, #-1772]	; 2d708 <__assert_fail@plt+0x1c4fc>
   2ddf0:	ldr	r5, [pc, #-1652]	; 2d784 <__assert_fail@plt+0x1c578>
   2ddf4:	ldm	r3, {r0, r1}
   2ddf8:	add	r3, r5, #8
   2ddfc:	stm	r3, {r0, r1}
   2de00:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2de04:	ldr	r3, [pc, #-1792]	; 2d70c <__assert_fail@plt+0x1c500>
   2de08:	ldr	r5, [pc, #-1676]	; 2d784 <__assert_fail@plt+0x1c578>
   2de0c:	ldm	r3, {r0, r1}
   2de10:	add	r3, r5, #8
   2de14:	stm	r3, {r0, r1}
   2de18:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2de1c:	ldr	r3, [pc, #-1812]	; 2d710 <__assert_fail@plt+0x1c504>
   2de20:	ldr	r5, [pc, #-1700]	; 2d784 <__assert_fail@plt+0x1c578>
   2de24:	ldm	r3, {r0, r1}
   2de28:	add	r3, r5, #8
   2de2c:	stm	r3, {r0, r1}
   2de30:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2de34:	ldr	r3, [pc, #-1832]	; 2d714 <__assert_fail@plt+0x1c508>
   2de38:	ldr	r5, [pc, #-1724]	; 2d784 <__assert_fail@plt+0x1c578>
   2de3c:	ldm	r3, {r0, r1}
   2de40:	add	r3, r5, #8
   2de44:	stm	r3, {r0, r1}
   2de48:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2de4c:	tst	r6, #1
   2de50:	bne	2ed30 <__assert_fail@plt+0x1db24>
   2de54:	tst	r6, #2
   2de58:	ldrne	r3, [pc, #-1864]	; 2d718 <__assert_fail@plt+0x1c50c>
   2de5c:	ldrne	r5, [pc, #-1760]	; 2d784 <__assert_fail@plt+0x1c578>
   2de60:	ldreq	r5, [pc, #-1764]	; 2d784 <__assert_fail@plt+0x1c578>
   2de64:	ldmne	r3, {r0, r1}
   2de68:	addne	r3, r5, #8
   2de6c:	stmne	r3, {r0, r1}
   2de70:	tst	r6, #4
   2de74:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2de78:	add	r8, r5, #8
   2de7c:	mov	r0, r8
   2de80:	bl	11080 <strlen@plt>
   2de84:	ldr	r2, [pc, #-1904]	; 2d71c <__assert_fail@plt+0x1c510>
   2de88:	mov	r3, r0
   2de8c:	add	r1, r8, r0
   2de90:	ldr	r0, [r2]
   2de94:	ldrh	r2, [r2, #4]
   2de98:	str	r0, [r8, r3]
   2de9c:	strh	r2, [r1, #4]
   2dea0:	b	2c898 <__assert_fail@plt+0x1b68c>
   2dea4:	cmp	r3, #196608	; 0x30000
   2dea8:	beq	2f580 <__assert_fail@plt+0x1e374>
   2deac:	cmp	r3, #393216	; 0x60000
   2deb0:	bne	2f3c0 <__assert_fail@plt+0x1e1b4>
   2deb4:	add	r8, r5, #8
   2deb8:	mov	r0, r8
   2debc:	bl	11080 <strlen@plt>
   2dec0:	ldr	ip, [pc, #-1960]	; 2d720 <__assert_fail@plt+0x1c514>
   2dec4:	mov	r9, r0
   2dec8:	ldm	ip!, {r0, r1, r2, r3}
   2decc:	add	lr, r8, r9
   2ded0:	ldrh	sl, [ip]
   2ded4:	ldrb	ip, [ip, #2]
   2ded8:	str	r0, [r8, r9]
   2dedc:	str	r1, [lr, #4]
   2dee0:	str	r2, [lr, #8]
   2dee4:	str	r3, [lr, #12]
   2dee8:	strh	sl, [lr, #16]
   2deec:	strb	ip, [lr, #18]
   2def0:	b	2cbb0 <__assert_fail@plt+0x1b9a4>
   2def4:	ands	r3, r6, #3
   2def8:	bne	2eb8c <__assert_fail@plt+0x1d980>
   2defc:	ldr	r5, [pc, #-1920]	; 2d784 <__assert_fail@plt+0x1c578>
   2df00:	b	2c898 <__assert_fail@plt+0x1b68c>
   2df04:	tst	r6, #1
   2df08:	ldrne	lr, [pc, #-2028]	; 2d724 <__assert_fail@plt+0x1c518>
   2df0c:	ldrne	r5, [pc, #-1936]	; 2d784 <__assert_fail@plt+0x1c578>
   2df10:	ldreq	r5, [pc, #-1940]	; 2d784 <__assert_fail@plt+0x1c578>
   2df14:	ldmne	lr!, {r0, r1, r2, r3}
   2df18:	addne	ip, r5, #8
   2df1c:	stmiane	ip!, {r0, r1, r2, r3}
   2df20:	ldmne	lr, {r0, r1}
   2df24:	strne	r0, [ip], #4
   2df28:	strbne	r1, [ip]
   2df2c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2df30:	lsr	r3, r6, #8
   2df34:	uxth	r3, r3
   2df38:	cmp	r3, #12800	; 0x3200
   2df3c:	beq	2edc8 <__assert_fail@plt+0x1dbbc>
   2df40:	cmp	r3, #24576	; 0x6000
   2df44:	bne	2eabc <__assert_fail@plt+0x1d8b0>
   2df48:	ldr	r3, [pc, #-2088]	; 2d728 <__assert_fail@plt+0x1c51c>
   2df4c:	ldr	r5, [pc, #-2000]	; 2d784 <__assert_fail@plt+0x1c578>
   2df50:	ldm	r3, {r0, r1, r2}
   2df54:	add	r3, r5, #8
   2df58:	lsr	ip, r2, #16
   2df5c:	stmia	r3!, {r0, r1}
   2df60:	strh	r2, [r3], #2
   2df64:	strb	ip, [r3]
   2df68:	b	2c898 <__assert_fail@plt+0x1b68c>
   2df6c:	and	r3, r6, #31
   2df70:	sub	r3, r3, #1
   2df74:	cmp	r3, #23
   2df78:	ldrls	pc, [pc, r3, lsl #2]
   2df7c:	b	30814 <__assert_fail@plt+0x1f608>
   2df80:	strdeq	r0, [r3], -ip
   2df84:	andeq	r0, r3, r4, ror #15
   2df88:	andeq	r0, r3, ip, asr #15
   2df8c:			; <UNDEFINED> instruction: 0x000307b0
   2df90:	muleq	r3, r4, r7
   2df94:	andeq	r0, r3, ip, ror r7
   2df98:	andeq	r0, r3, r4, lsl r8
   2df9c:	andeq	r0, r3, r4, ror r7
   2dfa0:	andeq	r0, r3, ip, asr r7
   2dfa4:	andeq	r0, r3, r4, asr #14
   2dfa8:	andeq	r0, r3, ip, lsr r7
   2dfac:	andeq	r0, r3, r4, lsr r7
   2dfb0:	andeq	r0, r3, r4, lsl r7
   2dfb4:	andeq	r0, r3, r4, lsl r8
   2dfb8:	andeq	r0, r3, r4, lsl r8
   2dfbc:	strdeq	r0, [r3], -ip
   2dfc0:	strdeq	r0, [r3], -r4
   2dfc4:	ldrdeq	r0, [r3], -r4
   2dfc8:			; <UNDEFINED> instruction: 0x000306b8
   2dfcc:	andeq	r0, r3, r0, lsr #13
   2dfd0:	andeq	r0, r3, r0, lsl #13
   2dfd4:	andeq	r0, r3, ip, asr r6
   2dfd8:	andeq	r0, r3, r0, asr #12
   2dfdc:			; <UNDEFINED> instruction: 0x000305bc
   2dfe0:	cmp	r3, #0
   2dfe4:	bne	2fde4 <__assert_fail@plt+0x1ebd8>
   2dfe8:	ldr	r5, [pc, #-2156]	; 2d784 <__assert_fail@plt+0x1c578>
   2dfec:	b	2c898 <__assert_fail@plt+0x1b68c>
   2dff0:	cmp	r3, #100663296	; 0x6000000
   2dff4:	beq	2fdcc <__assert_fail@plt+0x1ebc0>
   2dff8:	bls	2e508 <__assert_fail@plt+0x1d2fc>
   2dffc:	cmp	r3, #117440512	; 0x7000000
   2e000:	beq	2f6ac <__assert_fail@plt+0x1e4a0>
   2e004:	cmp	r3, #134217728	; 0x8000000
   2e008:	bne	2fde4 <__assert_fail@plt+0x1ebd8>
   2e00c:	ldr	r3, [pc, #-2280]	; 2d72c <__assert_fail@plt+0x1c520>
   2e010:	ldr	r5, [pc, #-2196]	; 2d784 <__assert_fail@plt+0x1c578>
   2e014:	ldm	r3, {r0, r1}
   2e018:	add	r3, r5, #8
   2e01c:	stm	r3, {r0, r1}
   2e020:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e024:	tst	r6, #1
   2e028:	ldrne	r3, [pc, #-2304]	; 2d730 <__assert_fail@plt+0x1c524>
   2e02c:	ldrne	r5, [pc, #-2224]	; 2d784 <__assert_fail@plt+0x1c578>
   2e030:	ldreq	r5, [pc, #-2228]	; 2d784 <__assert_fail@plt+0x1c578>
   2e034:	ldmne	r3, {r0, r1, r2}
   2e038:	addne	r3, r5, #8
   2e03c:	stmne	r3, {r0, r1, r2}
   2e040:	tst	r6, #2
   2e044:	bne	2eae8 <__assert_fail@plt+0x1d8dc>
   2e048:	tst	r6, #4
   2e04c:	bne	2f0e8 <__assert_fail@plt+0x1dedc>
   2e050:	tst	r6, #16
   2e054:	bne	2f0b8 <__assert_fail@plt+0x1deac>
   2e058:	tst	r6, #32
   2e05c:	bne	2f084 <__assert_fail@plt+0x1de78>
   2e060:	tst	r6, #128	; 0x80
   2e064:	bne	2f058 <__assert_fail@plt+0x1de4c>
   2e068:	tst	r6, #256	; 0x100
   2e06c:	bne	2f02c <__assert_fail@plt+0x1de20>
   2e070:	tst	r6, #1024	; 0x400
   2e074:	bne	2effc <__assert_fail@plt+0x1ddf0>
   2e078:	tst	r6, #512	; 0x200
   2e07c:	bne	2efc8 <__assert_fail@plt+0x1ddbc>
   2e080:	and	r3, r6, #16711680	; 0xff0000
   2e084:	cmp	r3, #9175040	; 0x8c0000
   2e088:	beq	30414 <__assert_fail@plt+0x1f208>
   2e08c:	bls	2e388 <__assert_fail@plt+0x1d17c>
   2e090:	cmp	r3, #9633792	; 0x930000
   2e094:	beq	304f4 <__assert_fail@plt+0x1f2e8>
   2e098:	bls	2e354 <__assert_fail@plt+0x1d148>
   2e09c:	cmp	r3, #10485760	; 0xa00000
   2e0a0:	beq	305a4 <__assert_fail@plt+0x1f398>
   2e0a4:	bhi	2e268 <__assert_fail@plt+0x1d05c>
   2e0a8:	cmp	r3, #9961472	; 0x980000
   2e0ac:	beq	304c4 <__assert_fail@plt+0x1f2b8>
   2e0b0:	cmp	r3, #10027008	; 0x990000
   2e0b4:	bne	2e800 <__assert_fail@plt+0x1d5f4>
   2e0b8:	add	r8, r5, #8
   2e0bc:	mov	r0, r8
   2e0c0:	bl	11080 <strlen@plt>
   2e0c4:	ldr	r3, [pc, #-2456]	; 2d734 <__assert_fail@plt+0x1c528>
   2e0c8:	mov	r1, r0
   2e0cc:	ldr	r0, [r3]
   2e0d0:	ldrh	ip, [r3, #4]
   2e0d4:	ldrb	r3, [r3, #6]
   2e0d8:	add	r2, r8, r1
   2e0dc:	str	r0, [r8, r1]
   2e0e0:	strh	ip, [r2, #4]
   2e0e4:	strb	r3, [r2, #6]
   2e0e8:	and	r3, r6, #61440	; 0xf000
   2e0ec:	cmp	r3, #8192	; 0x2000
   2e0f0:	beq	2f4a4 <__assert_fail@plt+0x1e298>
   2e0f4:	bhi	2e19c <__assert_fail@plt+0x1cf90>
   2e0f8:	cmp	r3, #0
   2e0fc:	beq	2e130 <__assert_fail@plt+0x1cf24>
   2e100:	cmp	r3, #4096	; 0x1000
   2e104:	bne	2f560 <__assert_fail@plt+0x1e354>
   2e108:	add	r8, r5, #8
   2e10c:	mov	r0, r8
   2e110:	bl	11080 <strlen@plt>
   2e114:	ldr	r2, [pc, #-2532]	; 2d738 <__assert_fail@plt+0x1c52c>
   2e118:	mov	r3, r0
   2e11c:	ldr	r0, [r2]
   2e120:	ldrh	r2, [r2, #4]
   2e124:	add	r1, r8, r3
   2e128:	str	r0, [r8, r3]
   2e12c:	strh	r2, [r1, #4]
   2e130:	tst	r6, #134217728	; 0x8000000
   2e134:	bne	2eea8 <__assert_fail@plt+0x1dc9c>
   2e138:	tst	r6, #67108864	; 0x4000000
   2e13c:	bne	2ee78 <__assert_fail@plt+0x1dc6c>
   2e140:	tst	r6, #33554432	; 0x2000000
   2e144:	bne	2ee4c <__assert_fail@plt+0x1dc40>
   2e148:	and	r3, r6, #-268435456	; 0xf0000000
   2e14c:	cmp	r3, #1342177280	; 0x50000000
   2e150:	beq	2f5e8 <__assert_fail@plt+0x1e3dc>
   2e154:	bhi	2e214 <__assert_fail@plt+0x1d008>
   2e158:	cmp	r3, #536870912	; 0x20000000
   2e15c:	beq	2f640 <__assert_fail@plt+0x1e434>
   2e160:	bhi	2e1dc <__assert_fail@plt+0x1cfd0>
   2e164:	cmp	r3, #0
   2e168:	beq	2f618 <__assert_fail@plt+0x1e40c>
   2e16c:	cmp	r3, #268435456	; 0x10000000
   2e170:	bne	2fe98 <__assert_fail@plt+0x1ec8c>
   2e174:	add	r8, r5, #8
   2e178:	mov	r0, r8
   2e17c:	bl	11080 <strlen@plt>
   2e180:	ldr	r3, [pc, #-2636]	; 2d73c <__assert_fail@plt+0x1c530>
   2e184:	mov	r2, r0
   2e188:	add	ip, r8, r0
   2e18c:	ldm	r3!, {r0, r1}
   2e190:	str	r0, [r8, r2]
   2e194:	str	r1, [ip, #4]
   2e198:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e19c:	cmp	r3, #12288	; 0x3000
   2e1a0:	beq	2f5d0 <__assert_fail@plt+0x1e3c4>
   2e1a4:	cmp	r3, #16384	; 0x4000
   2e1a8:	bne	2f560 <__assert_fail@plt+0x1e354>
   2e1ac:	add	r8, r5, #8
   2e1b0:	mov	r0, r8
   2e1b4:	bl	11080 <strlen@plt>
   2e1b8:	ldr	r3, [pc, #-2688]	; 2d740 <__assert_fail@plt+0x1c534>
   2e1bc:	mov	ip, r0
   2e1c0:	ldm	r3!, {r0, r1}
   2e1c4:	add	r2, r8, ip
   2e1c8:	ldrb	r3, [r3]
   2e1cc:	str	r0, [r8, ip]
   2e1d0:	str	r1, [r2, #4]
   2e1d4:	strb	r3, [r2, #8]
   2e1d8:	b	2e130 <__assert_fail@plt+0x1cf24>
   2e1dc:	cmp	r3, #805306368	; 0x30000000
   2e1e0:	beq	2f668 <__assert_fail@plt+0x1e45c>
   2e1e4:	cmp	r3, #1073741824	; 0x40000000
   2e1e8:	bne	2fe98 <__assert_fail@plt+0x1ec8c>
   2e1ec:	add	r8, r5, #8
   2e1f0:	mov	r0, r8
   2e1f4:	bl	11080 <strlen@plt>
   2e1f8:	ldr	r3, [pc, #-2748]	; 2d744 <__assert_fail@plt+0x1c538>
   2e1fc:	mov	r2, r0
   2e200:	add	ip, r8, r0
   2e204:	ldm	r3!, {r0, r1}
   2e208:	str	r0, [r8, r2]
   2e20c:	str	r1, [ip, #4]
   2e210:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e214:	cmp	r3, #-2147483648	; 0x80000000
   2e218:	beq	2fed4 <__assert_fail@plt+0x1ecc8>
   2e21c:	bhi	2e3fc <__assert_fail@plt+0x1d1f0>
   2e220:	cmp	r3, #1610612736	; 0x60000000
   2e224:	beq	2ff0c <__assert_fail@plt+0x1ed00>
   2e228:	cmp	r3, #1879048192	; 0x70000000
   2e22c:	bne	2fe98 <__assert_fail@plt+0x1ec8c>
   2e230:	add	r8, r5, #8
   2e234:	mov	r0, r8
   2e238:	bl	11080 <strlen@plt>
   2e23c:	ldr	r3, [pc, #-2812]	; 2d748 <__assert_fail@plt+0x1c53c>
   2e240:	add	r2, r8, r0
   2e244:	mov	ip, r0
   2e248:	ldm	r3!, {r0, r1}
   2e24c:	ldrh	lr, [r3]
   2e250:	ldrb	r3, [r3, #2]
   2e254:	str	r0, [r8, ip]
   2e258:	str	r1, [r2, #4]
   2e25c:	strh	lr, [r2, #8]
   2e260:	strb	r3, [r2, #10]
   2e264:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e268:	cmp	r3, #10551296	; 0xa10000
   2e26c:	beq	30458 <__assert_fail@plt+0x1f24c>
   2e270:	cmp	r3, #10616832	; 0xa20000
   2e274:	bne	2e800 <__assert_fail@plt+0x1d5f4>
   2e278:	add	r8, r5, #8
   2e27c:	mov	r0, r8
   2e280:	bl	11080 <strlen@plt>
   2e284:	ldr	r3, [pc, #-2880]	; 2d74c <__assert_fail@plt+0x1c540>
   2e288:	mov	lr, r0
   2e28c:	ldm	r3!, {r0, r1, r2}
   2e290:	add	ip, r8, lr
   2e294:	ldrh	r3, [r3]
   2e298:	str	r0, [r8, lr]
   2e29c:	str	r1, [ip, #4]
   2e2a0:	strh	r3, [ip, #12]
   2e2a4:	str	r2, [ip, #8]
   2e2a8:	b	2e0e8 <__assert_fail@plt+0x1cedc>
   2e2ac:	cmp	r9, #0
   2e2b0:	beq	2fad8 <__assert_fail@plt+0x1e8cc>
   2e2b4:	cmp	r9, #16777216	; 0x1000000
   2e2b8:	bne	2d1ac <__assert_fail@plt+0x1bfa0>
   2e2bc:	ldr	ip, [pc, #-2932]	; 2d750 <__assert_fail@plt+0x1c544>
   2e2c0:	cmp	r8, #0
   2e2c4:	ldm	ip!, {r0, r1, r2, r3}
   2e2c8:	str	r0, [sl]
   2e2cc:	str	r1, [sl, #4]
   2e2d0:	str	r2, [sl, #8]
   2e2d4:	str	r3, [sl, #12]
   2e2d8:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2e2dc:	mov	r3, #0
   2e2e0:	str	r3, [sp, #4]
   2e2e4:	add	r9, r5, #8
   2e2e8:	b	2e2f4 <__assert_fail@plt+0x1d0e8>
   2e2ec:	cmp	r8, #0
   2e2f0:	beq	2e9b0 <__assert_fail@plt+0x1d7a4>
   2e2f4:	rsb	r3, r8, #0
   2e2f8:	and	r3, r3, r8
   2e2fc:	cmp	r3, #4
   2e300:	bic	r8, r8, r3
   2e304:	movne	r3, #1
   2e308:	strne	r3, [sp, #4]
   2e30c:	bne	2e2ec <__assert_fail@plt+0x1d0e0>
   2e310:	mov	r0, r9
   2e314:	bl	11080 <strlen@plt>
   2e318:	ldr	ip, [pc, #-3020]	; 2d754 <__assert_fail@plt+0x1c548>
   2e31c:	add	lr, r9, r0
   2e320:	mov	sl, r0
   2e324:	ldm	ip!, {r0, r1, r2, r3}
   2e328:	str	r0, [r9, sl]
   2e32c:	ldrh	fp, [ip, #4]
   2e330:	ldrb	sl, [ip, #6]
   2e334:	ldr	r0, [ip]
   2e338:	str	r1, [lr, #4]
   2e33c:	str	r2, [lr, #8]
   2e340:	str	r3, [lr, #12]
   2e344:	str	r0, [lr, #16]
   2e348:	strh	fp, [lr, #20]
   2e34c:	strb	sl, [lr, #22]
   2e350:	b	2e2ec <__assert_fail@plt+0x1d0e0>
   2e354:	cmp	r3, #9306112	; 0x8e0000
   2e358:	beq	304dc <__assert_fail@plt+0x1f2d0>
   2e35c:	bls	2e444 <__assert_fail@plt+0x1d238>
   2e360:	cmp	r3, #9502720	; 0x910000
   2e364:	beq	3052c <__assert_fail@plt+0x1f320>
   2e368:	cmp	r3, #9568256	; 0x920000
   2e36c:	bne	2e800 <__assert_fail@plt+0x1d5f4>
   2e370:	add	r8, r5, #8
   2e374:	mov	r0, r8
   2e378:	bl	11080 <strlen@plt>
   2e37c:	ldr	r3, [pc, #-3116]	; 2d758 <__assert_fail@plt+0x1c54c>
   2e380:	mov	r1, r0
   2e384:	b	2e0cc <__assert_fail@plt+0x1cec0>
   2e388:	cmp	r3, #8716288	; 0x850000
   2e38c:	beq	3055c <__assert_fail@plt+0x1f350>
   2e390:	bhi	2e820 <__assert_fail@plt+0x1d614>
   2e394:	cmp	r3, #8454144	; 0x810000
   2e398:	beq	30544 <__assert_fail@plt+0x1f338>
   2e39c:	bls	2e7f8 <__assert_fail@plt+0x1d5ec>
   2e3a0:	cmp	r3, #8519680	; 0x820000
   2e3a4:	beq	30440 <__assert_fail@plt+0x1f234>
   2e3a8:	cmp	r3, #8585216	; 0x830000
   2e3ac:	bne	2e800 <__assert_fail@plt+0x1d5f4>
   2e3b0:	add	r8, r5, #8
   2e3b4:	mov	r0, r8
   2e3b8:	bl	11080 <strlen@plt>
   2e3bc:	ldr	r3, [pc, #-3176]	; 2d75c <__assert_fail@plt+0x1c550>
   2e3c0:	mov	r1, r0
   2e3c4:	b	2e0cc <__assert_fail@plt+0x1cec0>
   2e3c8:	cmp	r9, #0
   2e3cc:	beq	2e3d8 <__assert_fail@plt+0x1d1cc>
   2e3d0:	cmp	r9, #16
   2e3d4:	bne	2d018 <__assert_fail@plt+0x1be0c>
   2e3d8:	ldr	r3, [pc, #-3200]	; 2d760 <__assert_fail@plt+0x1c554>
   2e3dc:	ldr	r2, [pc, #-3200]	; 2d764 <__assert_fail@plt+0x1c558>
   2e3e0:	add	r3, r3, r9, lsr #2
   2e3e4:	mov	r1, #1024	; 0x400
   2e3e8:	ldr	r3, [r3, #628]	; 0x274
   2e3ec:	add	r0, r5, #8
   2e3f0:	bl	110b0 <snprintf@plt>
   2e3f4:	mov	r8, r0
   2e3f8:	b	2d038 <__assert_fail@plt+0x1be2c>
   2e3fc:	cmp	r3, #-1879048192	; 0x90000000
   2e400:	beq	2ff3c <__assert_fail@plt+0x1ed30>
   2e404:	cmp	r3, #-1610612736	; 0xa0000000
   2e408:	bne	2fe98 <__assert_fail@plt+0x1ec8c>
   2e40c:	add	r8, r5, #8
   2e410:	mov	r0, r8
   2e414:	bl	11080 <strlen@plt>
   2e418:	ldr	r3, [pc, #-3256]	; 2d768 <__assert_fail@plt+0x1c55c>
   2e41c:	add	r2, r8, r0
   2e420:	mov	ip, r0
   2e424:	ldm	r3!, {r0, r1}
   2e428:	ldrh	lr, [r3]
   2e42c:	ldrb	r3, [r3, #2]
   2e430:	str	r0, [r8, ip]
   2e434:	str	r1, [r2, #4]
   2e438:	strh	lr, [r2, #8]
   2e43c:	strb	r3, [r2, #10]
   2e440:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e444:	cmp	r3, #9240576	; 0x8d0000
   2e448:	bne	2e800 <__assert_fail@plt+0x1d5f4>
   2e44c:	add	r8, r5, #8
   2e450:	mov	r0, r8
   2e454:	bl	11080 <strlen@plt>
   2e458:	ldr	r3, [pc, #-3316]	; 2d76c <__assert_fail@plt+0x1c560>
   2e45c:	mov	ip, r0
   2e460:	ldm	r3!, {r0, r1}
   2e464:	add	r2, r8, ip
   2e468:	ldrh	r3, [r3]
   2e46c:	str	r0, [r8, ip]
   2e470:	str	r1, [r2, #4]
   2e474:	strh	r3, [r2, #8]
   2e478:	b	2e0e8 <__assert_fail@plt+0x1cedc>
   2e47c:	uxth	r3, r6
   2e480:	cmp	r3, #528	; 0x210
   2e484:	beq	2f5c8 <__assert_fail@plt+0x1e3bc>
   2e488:	cmp	r3, #532	; 0x214
   2e48c:	beq	2f5c0 <__assert_fail@plt+0x1e3b4>
   2e490:	ldr	r2, [pc, #-3368]	; 2d770 <__assert_fail@plt+0x1c564>
   2e494:	cmp	r3, r2
   2e498:	beq	2f3a4 <__assert_fail@plt+0x1e198>
   2e49c:	ldr	r5, [pc, #-3360]	; 2d784 <__assert_fail@plt+0x1c578>
   2e4a0:	tst	r6, #65536	; 0x10000
   2e4a4:	bne	2ef98 <__assert_fail@plt+0x1dd8c>
   2e4a8:	tst	r6, #131072	; 0x20000
   2e4ac:	bne	2ef6c <__assert_fail@plt+0x1dd60>
   2e4b0:	tst	r6, #262144	; 0x40000
   2e4b4:	bne	2ef40 <__assert_fail@plt+0x1dd34>
   2e4b8:	tst	r6, #524288	; 0x80000
   2e4bc:	bne	2ef0c <__assert_fail@plt+0x1dd00>
   2e4c0:	tst	r6, #1048576	; 0x100000
   2e4c4:	bne	2eedc <__assert_fail@plt+0x1dcd0>
   2e4c8:	tst	r6, #4194304	; 0x400000
   2e4cc:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2e4d0:	add	r8, r5, #8
   2e4d4:	mov	r0, r8
   2e4d8:	bl	11080 <strlen@plt>
   2e4dc:	ldr	r3, [pc, #-3440]	; 2d774 <__assert_fail@plt+0x1c568>
   2e4e0:	add	r2, r8, r0
   2e4e4:	mov	ip, r0
   2e4e8:	ldm	r3!, {r0, r1}
   2e4ec:	ldrh	lr, [r3]
   2e4f0:	ldrb	r3, [r3, #2]
   2e4f4:	str	r0, [r8, ip]
   2e4f8:	str	r1, [r2, #4]
   2e4fc:	strh	lr, [r2, #8]
   2e500:	strb	r3, [r2, #10]
   2e504:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e508:	cmp	r3, #83886080	; 0x5000000
   2e50c:	bne	2fde4 <__assert_fail@plt+0x1ebd8>
   2e510:	ldr	r3, [pc, #-3488]	; 2d778 <__assert_fail@plt+0x1c56c>
   2e514:	ldr	r5, [pc, #-3480]	; 2d784 <__assert_fail@plt+0x1c578>
   2e518:	ldm	r3, {r0, r1}
   2e51c:	add	r3, r5, #8
   2e520:	stm	r3, {r0, r1}
   2e524:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e528:	cmp	r3, #0
   2e52c:	beq	2f6e0 <__assert_fail@plt+0x1e4d4>
   2e530:	cmp	r3, #268435456	; 0x10000000
   2e534:	bne	2d2a4 <__assert_fail@plt+0x1c098>
   2e538:	ldr	r3, [pc, #-3524]	; 2d77c <__assert_fail@plt+0x1c570>
   2e53c:	ldr	r5, [pc, #-3520]	; 2d784 <__assert_fail@plt+0x1c578>
   2e540:	ldm	r3, {r0, r1}
   2e544:	add	r3, r5, #8
   2e548:	stm	r3, {r0, r1}
   2e54c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e550:	mov	r2, #5
   2e554:	ldr	r1, [pc, #-3548]	; 2d780 <__assert_fail@plt+0x1c574>
   2e558:	bl	10f90 <dcgettext@plt>
   2e55c:	ldr	r5, [pc, #-3552]	; 2d784 <__assert_fail@plt+0x1c578>
   2e560:	add	r8, r5, #8
   2e564:	mov	r9, r0
   2e568:	mov	r0, r8
   2e56c:	bl	11080 <strlen@plt>
   2e570:	mov	r1, r9
   2e574:	add	r0, r8, r0
   2e578:	bl	10f84 <stpcpy@plt>
   2e57c:	uxtb	r2, r6
   2e580:	sub	r2, r2, #11
   2e584:	mov	r3, r0
   2e588:	cmp	r2, #99	; 0x63
   2e58c:	ldrls	pc, [pc, r2, lsl #2]
   2e590:	b	2f700 <__assert_fail@plt+0x1e4f4>
   2e594:	strdeq	lr, [r2], -r0
   2e598:	andeq	lr, r2, r8, ror #15
   2e59c:	andeq	lr, r2, r0, ror #15
   2e5a0:	ldrdeq	lr, [r2], -r8
   2e5a4:	ldrdeq	lr, [r2], -r0
   2e5a8:	andeq	lr, r2, r8, asr #15
   2e5ac:	andeq	pc, r2, r0, lsl #14
   2e5b0:	andeq	pc, r2, r0, lsl #14
   2e5b4:	andeq	pc, r2, r0, lsl #14
   2e5b8:	andeq	pc, r2, r0, lsl #14
   2e5bc:	andeq	pc, r2, r0, lsl #14
   2e5c0:	andeq	pc, r2, r0, lsl #14
   2e5c4:	andeq	pc, r2, r0, lsl #14
   2e5c8:	andeq	pc, r2, r0, lsl #14
   2e5cc:	andeq	pc, r2, r0, lsl #14
   2e5d0:	andeq	pc, r2, r0, lsl #14
   2e5d4:	andeq	pc, r2, r0, lsl #14
   2e5d8:	andeq	pc, r2, r0, lsl #14
   2e5dc:	andeq	pc, r2, r0, lsl #14
   2e5e0:	andeq	pc, r2, r0, lsl #14
   2e5e4:	andeq	lr, r2, r0, asr #15
   2e5e8:			; <UNDEFINED> instruction: 0x0002e7b8
   2e5ec:			; <UNDEFINED> instruction: 0x0002e7b0
   2e5f0:	andeq	pc, r2, r0, lsl #14
   2e5f4:	andeq	pc, r2, r0, lsl #14
   2e5f8:	andeq	pc, r2, r0, lsl #14
   2e5fc:	andeq	pc, r2, r0, lsl #14
   2e600:	andeq	pc, r2, r0, lsl #14
   2e604:	andeq	pc, r2, r0, lsl #14
   2e608:	andeq	pc, r2, r0, lsl #14
   2e60c:	andeq	lr, r2, r8, lsr #15
   2e610:	andeq	lr, r2, r0, lsr #15
   2e614:	muleq	r2, r8, r7
   2e618:	andeq	lr, r2, ip, ror r7
   2e61c:	andeq	lr, r2, r8, ror #14
   2e620:	andeq	pc, r2, r0, lsl #14
   2e624:	andeq	pc, r2, r0, lsl #14
   2e628:	andeq	pc, r2, r0, lsl #14
   2e62c:	andeq	pc, r2, r0, lsl #14
   2e630:	andeq	pc, r2, r0, lsl #14
   2e634:	andeq	pc, r2, r0, lsl #14
   2e638:	andeq	pc, r2, r0, lsl #14
   2e63c:	andeq	pc, r2, r0, lsl #14
   2e640:	andeq	pc, r2, r0, lsl #14
   2e644:	andeq	pc, r2, r0, lsl #14
   2e648:	andeq	pc, r2, r0, lsl #14
   2e64c:	andeq	pc, r2, r0, lsl #14
   2e650:	andeq	pc, r2, r0, lsl #14
   2e654:	andeq	pc, r2, r0, lsl #14
   2e658:	andeq	pc, r2, r0, lsl #14
   2e65c:	andeq	pc, r2, r0, lsl #14
   2e660:	andeq	pc, r2, r0, lsl #14
   2e664:	andeq	pc, r2, r0, lsl #14
   2e668:	andeq	pc, r2, r0, lsl #14
   2e66c:	andeq	pc, r2, r0, lsl #14
   2e670:	andeq	pc, r2, r0, lsl #14
   2e674:	andeq	pc, r2, r0, lsl #14
   2e678:	andeq	pc, r2, r0, lsl #14
   2e67c:	andeq	pc, r2, r0, lsl #14
   2e680:	andeq	pc, r2, r0, lsl #14
   2e684:	andeq	pc, r2, r0, lsl #14
   2e688:	andeq	pc, r2, r0, lsl #14
   2e68c:	andeq	pc, r2, r0, lsl #14
   2e690:	andeq	pc, r2, r0, lsl #14
   2e694:	andeq	pc, r2, r0, lsl #14
   2e698:	andeq	pc, r2, r0, lsl #14
   2e69c:	andeq	pc, r2, r0, lsl #14
   2e6a0:	andeq	pc, r2, r0, lsl #14
   2e6a4:	andeq	pc, r2, r0, lsl #14
   2e6a8:	andeq	pc, r2, r0, lsl #14
   2e6ac:	andeq	pc, r2, r0, lsl #14
   2e6b0:	andeq	pc, r2, r0, lsl #14
   2e6b4:	andeq	pc, r2, r0, lsl #14
   2e6b8:	andeq	pc, r2, r0, lsl #14
   2e6bc:	andeq	pc, r2, r0, lsl #14
   2e6c0:	andeq	pc, r2, r0, lsl #14
   2e6c4:	andeq	pc, r2, r0, lsl #14
   2e6c8:	andeq	pc, r2, r0, lsl #14
   2e6cc:	andeq	pc, r2, r0, lsl #14
   2e6d0:	andeq	pc, r2, r0, lsl #14
   2e6d4:	andeq	pc, r2, r0, lsl #14
   2e6d8:	andeq	pc, r2, r0, lsl #14
   2e6dc:	andeq	pc, r2, r0, lsl #14
   2e6e0:	andeq	pc, r2, r0, lsl #14
   2e6e4:	andeq	pc, r2, r0, lsl #14
   2e6e8:	andeq	pc, r2, r0, lsl #14
   2e6ec:	andeq	pc, r2, r0, lsl #14
   2e6f0:	andeq	pc, r2, r0, lsl #14
   2e6f4:	andeq	pc, r2, r0, lsl #14
   2e6f8:	andeq	pc, r2, r0, lsl #14
   2e6fc:	andeq	pc, r2, r0, lsl #14
   2e700:	andeq	pc, r2, r0, lsl #14
   2e704:	andeq	pc, r2, r0, lsl #14
   2e708:	andeq	pc, r2, r0, lsl #14
   2e70c:	andeq	pc, r2, r0, lsl #14
   2e710:	andeq	pc, r2, r0, lsl #14
   2e714:	andeq	pc, r2, r0, lsl #14
   2e718:	andeq	pc, r2, r0, lsl #14
   2e71c:	andeq	pc, r2, r0, lsl #14
   2e720:	andeq	lr, r2, r4, lsr #14
   2e724:	ldr	ip, [pc, #-4004]	; 2d788 <__assert_fail@plt+0x1c57c>
   2e728:	ldm	ip!, {r0, r1, r2}
   2e72c:	ldrb	ip, [ip]
   2e730:	str	r0, [r3]
   2e734:	str	r1, [r3, #4]
   2e738:	strb	ip, [r3, #12]
   2e73c:	str	r2, [r3, #8]
   2e740:	bics	r3, r6, #255	; 0xff
   2e744:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2e748:	mov	r2, #5
   2e74c:	ldr	r1, [pc, #-4040]	; 2d78c <__assert_fail@plt+0x1c580>
   2e750:	mov	r0, #0
   2e754:	bl	10f90 <dcgettext@plt>
   2e758:	mov	r1, r0
   2e75c:	add	r0, r5, #8
   2e760:	bl	10fd8 <strcat@plt>
   2e764:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e768:	ldr	r2, [pc, #-4064]	; 2d790 <__assert_fail@plt+0x1c584>
   2e76c:	ldm	r2!, {r0, r1}
   2e770:	str	r0, [r3]
   2e774:	str	r1, [r3, #4]
   2e778:	b	2e740 <__assert_fail@plt+0x1d534>
   2e77c:	ldr	r2, [pc, #-4080]	; 2d794 <__assert_fail@plt+0x1c588>
   2e780:	ldm	r2!, {r0, r1}
   2e784:	ldrh	r2, [r2]
   2e788:	str	r0, [r3]
   2e78c:	str	r1, [r3, #4]
   2e790:	strh	r2, [r3, #8]
   2e794:	b	2e740 <__assert_fail@plt+0x1d534>
   2e798:	ldr	r2, [pc, #4084]	; 2f794 <__assert_fail@plt+0x1e588>
   2e79c:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7a0:	ldr	r2, [pc, #4080]	; 2f798 <__assert_fail@plt+0x1e58c>
   2e7a4:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7a8:	ldr	r2, [pc, #4076]	; 2f79c <__assert_fail@plt+0x1e590>
   2e7ac:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7b0:	ldr	r2, [pc, #4072]	; 2f7a0 <__assert_fail@plt+0x1e594>
   2e7b4:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7b8:	ldr	r2, [pc, #4068]	; 2f7a4 <__assert_fail@plt+0x1e598>
   2e7bc:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7c0:	ldr	r2, [pc, #4064]	; 2f7a8 <__assert_fail@plt+0x1e59c>
   2e7c4:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7c8:	ldr	r2, [pc, #4060]	; 2f7ac <__assert_fail@plt+0x1e5a0>
   2e7cc:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7d0:	ldr	r2, [pc, #4056]	; 2f7b0 <__assert_fail@plt+0x1e5a4>
   2e7d4:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7d8:	ldr	r2, [pc, #4052]	; 2f7b4 <__assert_fail@plt+0x1e5a8>
   2e7dc:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7e0:	ldr	r2, [pc, #4048]	; 2f7b8 <__assert_fail@plt+0x1e5ac>
   2e7e4:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7e8:	ldr	r2, [pc, #4044]	; 2f7bc <__assert_fail@plt+0x1e5b0>
   2e7ec:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7f0:	ldr	r2, [pc, #4040]	; 2f7c0 <__assert_fail@plt+0x1e5b4>
   2e7f4:	b	2e780 <__assert_fail@plt+0x1d574>
   2e7f8:	cmp	r3, #0
   2e7fc:	beq	2e0e8 <__assert_fail@plt+0x1cedc>
   2e800:	mov	r2, #5
   2e804:	ldr	r1, [pc, #4024]	; 2f7c4 <__assert_fail@plt+0x1e5b8>
   2e808:	mov	r0, #0
   2e80c:	bl	10f90 <dcgettext@plt>
   2e810:	mov	r1, r0
   2e814:	add	r0, r5, #8
   2e818:	bl	10fd8 <strcat@plt>
   2e81c:	b	2e0e8 <__assert_fail@plt+0x1cedc>
   2e820:	cmp	r3, #8912896	; 0x880000
   2e824:	beq	30574 <__assert_fail@plt+0x1f368>
   2e828:	bls	2e86c <__assert_fail@plt+0x1d660>
   2e82c:	cmp	r3, #9043968	; 0x8a0000
   2e830:	beq	3058c <__assert_fail@plt+0x1f380>
   2e834:	cmp	r3, #9109504	; 0x8b0000
   2e838:	bne	2e800 <__assert_fail@plt+0x1d5f4>
   2e83c:	add	r8, r5, #8
   2e840:	mov	r0, r8
   2e844:	bl	11080 <strlen@plt>
   2e848:	ldr	r3, [pc, #3960]	; 2f7c8 <__assert_fail@plt+0x1e5bc>
   2e84c:	add	r2, r8, r0
   2e850:	mov	ip, r0
   2e854:	ldm	r3!, {r0, r1}
   2e858:	ldrb	r3, [r3]
   2e85c:	str	r0, [r8, ip]
   2e860:	str	r1, [r2, #4]
   2e864:	strb	r3, [r2, #8]
   2e868:	b	2e0e8 <__assert_fail@plt+0x1cedc>
   2e86c:	cmp	r3, #8847360	; 0x870000
   2e870:	bne	2e800 <__assert_fail@plt+0x1d5f4>
   2e874:	add	r8, r5, #8
   2e878:	mov	r0, r8
   2e87c:	bl	11080 <strlen@plt>
   2e880:	ldr	r3, [pc, #3908]	; 2f7cc <__assert_fail@plt+0x1e5c0>
   2e884:	mov	r1, r0
   2e888:	b	2e0cc <__assert_fail@plt+0x1cec0>
   2e88c:	cmp	sl, #268435456	; 0x10000000
   2e890:	bne	2d094 <__assert_fail@plt+0x1be88>
   2e894:	ldr	r3, [pc, #3892]	; 2f7d0 <__assert_fail@plt+0x1e5c4>
   2e898:	ldr	r2, [pc, #3892]	; 2f7d4 <__assert_fail@plt+0x1e5c8>
   2e89c:	add	r3, r3, sl, lsr #26
   2e8a0:	ldr	r3, [r3, #664]	; 0x298
   2e8a4:	bl	110b0 <snprintf@plt>
   2e8a8:	cmp	sl, #268435456	; 0x10000000
   2e8ac:	and	r3, r6, #256	; 0x100
   2e8b0:	add	r8, r0, r8
   2e8b4:	beq	30284 <__assert_fail@plt+0x1f078>
   2e8b8:	cmp	r3, #0
   2e8bc:	beq	2e8e0 <__assert_fail@plt+0x1d6d4>
   2e8c0:	add	r0, r5, #8
   2e8c4:	tst	r6, #14
   2e8c8:	add	r0, r0, r8
   2e8cc:	rsb	r1, r8, #1024	; 0x400
   2e8d0:	bne	302c0 <__assert_fail@plt+0x1f0b4>
   2e8d4:	ldr	r2, [pc, #3836]	; 2f7d8 <__assert_fail@plt+0x1e5cc>
   2e8d8:	add	r8, r8, #6
   2e8dc:	bl	110b0 <snprintf@plt>
   2e8e0:	tst	r6, #1048576	; 0x100000
   2e8e4:	bne	30258 <__assert_fail@plt+0x1f04c>
   2e8e8:	tst	r6, #8192	; 0x2000
   2e8ec:	bne	303c8 <__assert_fail@plt+0x1f1bc>
   2e8f0:	tst	r6, #16384	; 0x4000
   2e8f4:	beq	2e918 <__assert_fail@plt+0x1d70c>
   2e8f8:	add	r0, r5, #8
   2e8fc:	tst	r6, #14
   2e900:	add	r0, r0, r8
   2e904:	rsb	r1, r8, #1024	; 0x400
   2e908:	bne	30274 <__assert_fail@plt+0x1f068>
   2e90c:	ldr	r2, [pc, #3784]	; 2f7dc <__assert_fail@plt+0x1e5d0>
   2e910:	add	r8, r8, #5
   2e914:	bl	110b0 <snprintf@plt>
   2e918:	tst	r6, #512	; 0x200
   2e91c:	bne	303ac <__assert_fail@plt+0x1f1a0>
   2e920:	tst	r6, #1024	; 0x400
   2e924:	bne	30390 <__assert_fail@plt+0x1f184>
   2e928:	tst	r6, #2048	; 0x800
   2e92c:	and	sl, r6, #524288	; 0x80000
   2e930:	and	r9, r6, #16777216	; 0x1000000
   2e934:	bne	302ec <__assert_fail@plt+0x1f0e0>
   2e938:	cmp	sl, #0
   2e93c:	bne	3036c <__assert_fail@plt+0x1f160>
   2e940:	cmp	r9, #0
   2e944:	bne	30314 <__assert_fail@plt+0x1f108>
   2e948:	tst	r6, #4096	; 0x1000
   2e94c:	bne	302d0 <__assert_fail@plt+0x1f0c4>
   2e950:	tst	r6, #32768	; 0x8000
   2e954:	bne	2fe7c <__assert_fail@plt+0x1ec70>
   2e958:	tst	r6, #65536	; 0x10000
   2e95c:	bne	2fe60 <__assert_fail@plt+0x1ec54>
   2e960:	tst	r6, #131072	; 0x20000
   2e964:	beq	2e988 <__assert_fail@plt+0x1d77c>
   2e968:	add	r0, r5, #8
   2e96c:	tst	r6, #14
   2e970:	add	r0, r0, r8
   2e974:	rsb	r1, r8, #1024	; 0x400
   2e978:	bne	303e4 <__assert_fail@plt+0x1f1d8>
   2e97c:	ldr	r2, [pc, #3676]	; 2f7e0 <__assert_fail@plt+0x1e5d4>
   2e980:	add	r8, r8, #7
   2e984:	bl	110b0 <snprintf@plt>
   2e988:	tst	r6, #262144	; 0x40000
   2e98c:	bne	2feb8 <__assert_fail@plt+0x1ecac>
   2e990:	tst	r6, #2097152	; 0x200000
   2e994:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2e998:	add	r0, r5, #8
   2e99c:	add	r0, r0, r8
   2e9a0:	rsb	r1, r8, #1024	; 0x400
   2e9a4:	ldr	r2, [pc, #3640]	; 2f7e4 <__assert_fail@plt+0x1e5d8>
   2e9a8:	bl	110b0 <snprintf@plt>
   2e9ac:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e9b0:	ldr	r3, [sp, #4]
   2e9b4:	cmp	r3, #0
   2e9b8:	bne	2d1dc <__assert_fail@plt+0x1bfd0>
   2e9bc:	b	2c898 <__assert_fail@plt+0x1b68c>
   2e9c0:	mov	r0, r9
   2e9c4:	bl	11080 <strlen@plt>
   2e9c8:	ldr	r3, [pc, #3608]	; 2f7e8 <__assert_fail@plt+0x1e5dc>
   2e9cc:	mov	ip, r0
   2e9d0:	ldm	r3!, {r0, r1}
   2e9d4:	add	r2, r9, ip
   2e9d8:	ldrh	r3, [r3]
   2e9dc:	str	r0, [r9, ip]
   2e9e0:	str	r1, [r2, #4]
   2e9e4:	strh	r3, [r2, #8]
   2e9e8:	b	2da4c <__assert_fail@plt+0x1c840>
   2e9ec:	mov	r0, r9
   2e9f0:	bl	11080 <strlen@plt>
   2e9f4:	ldr	r3, [pc, #3568]	; 2f7ec <__assert_fail@plt+0x1e5e0>
   2e9f8:	mov	ip, r0
   2e9fc:	b	2e9d0 <__assert_fail@plt+0x1d7c4>
   2ea00:	mov	r0, r9
   2ea04:	bl	11080 <strlen@plt>
   2ea08:	ldr	r3, [pc, #3552]	; 2f7f0 <__assert_fail@plt+0x1e5e4>
   2ea0c:	mov	ip, r0
   2ea10:	b	2daec <__assert_fail@plt+0x1c8e0>
   2ea14:	mov	r0, r9
   2ea18:	bl	11080 <strlen@plt>
   2ea1c:	ldr	r3, [pc, #3536]	; 2f7f4 <__assert_fail@plt+0x1e5e8>
   2ea20:	mov	lr, r0
   2ea24:	ldm	r3!, {r0, r1, r2}
   2ea28:	add	ip, r9, lr
   2ea2c:	ldrb	r3, [r3]
   2ea30:	str	r0, [r9, lr]
   2ea34:	str	r1, [ip, #4]
   2ea38:	strb	r3, [ip, #12]
   2ea3c:	str	r2, [ip, #8]
   2ea40:	b	2da4c <__assert_fail@plt+0x1c840>
   2ea44:	mov	r0, r9
   2ea48:	bl	11080 <strlen@plt>
   2ea4c:	ldr	r3, [pc, #3492]	; 2f7f8 <__assert_fail@plt+0x1e5ec>
   2ea50:	mov	ip, r0
   2ea54:	b	2e9d0 <__assert_fail@plt+0x1d7c4>
   2ea58:	mov	r0, r9
   2ea5c:	bl	11080 <strlen@plt>
   2ea60:	ldr	r3, [pc, #3476]	; 2f7fc <__assert_fail@plt+0x1e5f0>
   2ea64:	mov	ip, r0
   2ea68:	b	2daec <__assert_fail@plt+0x1c8e0>
   2ea6c:	mov	r0, r9
   2ea70:	bl	11080 <strlen@plt>
   2ea74:	ldr	ip, [pc, #3460]	; 2f800 <__assert_fail@plt+0x1e5f4>
   2ea78:	mov	sl, r0
   2ea7c:	b	2da98 <__assert_fail@plt+0x1c88c>
   2ea80:	mov	r0, r9
   2ea84:	bl	11080 <strlen@plt>
   2ea88:	ldr	r3, [pc, #3444]	; 2f804 <__assert_fail@plt+0x1e5f8>
   2ea8c:	mov	lr, r0
   2ea90:	b	2ea24 <__assert_fail@plt+0x1d818>
   2ea94:	mov	r0, r9
   2ea98:	bl	11080 <strlen@plt>
   2ea9c:	ldr	r3, [pc, #3428]	; 2f808 <__assert_fail@plt+0x1e5fc>
   2eaa0:	add	ip, r9, r0
   2eaa4:	mov	lr, r0
   2eaa8:	ldm	r3!, {r0, r1, r2}
   2eaac:	str	r0, [r9, lr]
   2eab0:	str	r1, [ip, #4]
   2eab4:	str	r2, [ip, #8]
   2eab8:	b	2da4c <__assert_fail@plt+0x1c840>
   2eabc:	ldr	r5, [pc, #4076]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2eac0:	b	2c898 <__assert_fail@plt+0x1b68c>
   2eac4:	ldr	r2, [pc, #3392]	; 2f80c <__assert_fail@plt+0x1e600>
   2eac8:	bl	110b0 <snprintf@plt>
   2eacc:	add	r8, r8, #35	; 0x23
   2ead0:	b	2d064 <__assert_fail@plt+0x1be58>
   2ead4:	cmp	r3, #0
   2ead8:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2eadc:	cmp	r8, #0
   2eae0:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2eae4:	b	2ce10 <__assert_fail@plt+0x1bc04>
   2eae8:	add	r8, r5, #8
   2eaec:	mov	r0, r8
   2eaf0:	bl	11080 <strlen@plt>
   2eaf4:	ldr	r2, [pc, #3940]	; 2fa60 <__assert_fail@plt+0x1e854>
   2eaf8:	mov	r3, r0
   2eafc:	add	r1, r8, r0
   2eb00:	ldr	r0, [r2]
   2eb04:	ldrh	r2, [r2, #4]
   2eb08:	str	r0, [r8, r3]
   2eb0c:	strh	r2, [r1, #4]
   2eb10:	b	2e048 <__assert_fail@plt+0x1ce3c>
   2eb14:	add	r8, r5, #8
   2eb18:	mov	r0, r8
   2eb1c:	bl	11080 <strlen@plt>
   2eb20:	mov	r2, r9
   2eb24:	ldr	r1, [pc, #3300]	; 2f810 <__assert_fail@plt+0x1e604>
   2eb28:	add	r0, r8, r0
   2eb2c:	bl	1114c <sprintf@plt>
   2eb30:	b	2cbc0 <__assert_fail@plt+0x1b9b4>
   2eb34:	add	r8, r5, #8
   2eb38:	mov	r0, r8
   2eb3c:	bl	11080 <strlen@plt>
   2eb40:	ldr	ip, [pc, #3276]	; 2f814 <__assert_fail@plt+0x1e608>
   2eb44:	add	lr, r8, r0
   2eb48:	mov	r9, r0
   2eb4c:	ldm	ip!, {r0, r1, r2, r3}
   2eb50:	str	r0, [r8, r9]
   2eb54:	ldr	r0, [ip]
   2eb58:	str	r1, [lr, #4]
   2eb5c:	str	r0, [lr, #16]
   2eb60:	str	r2, [lr, #8]
   2eb64:	str	r3, [lr, #12]
   2eb68:	b	2cbb8 <__assert_fail@plt+0x1b9ac>
   2eb6c:	mov	r2, #5
   2eb70:	ldr	r1, [pc, #3232]	; 2f818 <__assert_fail@plt+0x1e60c>
   2eb74:	mov	r0, #0
   2eb78:	bl	10f90 <dcgettext@plt>
   2eb7c:	mov	r1, r0
   2eb80:	add	r0, r5, #8
   2eb84:	bl	10fd8 <strcat@plt>
   2eb88:	b	2d114 <__assert_fail@plt+0x1bf08>
   2eb8c:	ldr	r1, [pc, #3208]	; 2f81c <__assert_fail@plt+0x1e610>
   2eb90:	add	r2, sp, #8
   2eb94:	ldr	r5, [pc, #3860]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2eb98:	ldm	r1, {r0, r1}
   2eb9c:	add	r3, r3, #48	; 0x30
   2eba0:	stm	r2, {r0, r1}
   2eba4:	mov	r1, r2
   2eba8:	add	r0, r5, #8
   2ebac:	strb	r3, [sp, #14]
   2ebb0:	bl	10ff0 <strcpy@plt>
   2ebb4:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ebb8:	add	r8, r5, #8
   2ebbc:	mov	r0, r8
   2ebc0:	bl	11080 <strlen@plt>
   2ebc4:	ldr	r3, [pc, #3156]	; 2f820 <__assert_fail@plt+0x1e614>
   2ebc8:	add	r2, r8, r0
   2ebcc:	mov	ip, r0
   2ebd0:	ldm	r3!, {r0, r1}
   2ebd4:	ldrb	r3, [r3]
   2ebd8:	str	r0, [r8, ip]
   2ebdc:	str	r1, [r2, #4]
   2ebe0:	strb	r3, [r2, #8]
   2ebe4:	b	2ca48 <__assert_fail@plt+0x1b83c>
   2ebe8:	add	r8, r5, #8
   2ebec:	mov	r0, r8
   2ebf0:	bl	11080 <strlen@plt>
   2ebf4:	ldr	r2, [pc, #3112]	; 2f824 <__assert_fail@plt+0x1e618>
   2ebf8:	mov	r3, r0
   2ebfc:	add	r1, r8, r0
   2ec00:	ldr	r0, [r2]
   2ec04:	ldrh	r2, [r2, #4]
   2ec08:	str	r0, [r8, r3]
   2ec0c:	strh	r2, [r1, #4]
   2ec10:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ec14:	add	r8, r5, #8
   2ec18:	mov	r0, r8
   2ec1c:	bl	11080 <strlen@plt>
   2ec20:	ldr	r3, [pc, #3072]	; 2f828 <__assert_fail@plt+0x1e61c>
   2ec24:	add	r2, r8, r0
   2ec28:	mov	ip, r0
   2ec2c:	ldm	r3!, {r0, r1}
   2ec30:	ldrb	r3, [r3]
   2ec34:	str	r0, [r8, ip]
   2ec38:	str	r1, [r2, #4]
   2ec3c:	strb	r3, [r2, #8]
   2ec40:	b	2d238 <__assert_fail@plt+0x1c02c>
   2ec44:	add	r8, r5, #8
   2ec48:	mov	r0, r8
   2ec4c:	bl	11080 <strlen@plt>
   2ec50:	ldr	r3, [pc, #3028]	; 2f82c <__assert_fail@plt+0x1e620>
   2ec54:	mov	r2, r0
   2ec58:	add	ip, r8, r0
   2ec5c:	ldm	r3!, {r0, r1}
   2ec60:	str	r0, [r8, r2]
   2ec64:	str	r1, [ip, #4]
   2ec68:	b	2d230 <__assert_fail@plt+0x1c024>
   2ec6c:	add	r8, r5, #8
   2ec70:	mov	r0, r8
   2ec74:	bl	11080 <strlen@plt>
   2ec78:	ldr	ip, [pc, #2992]	; 2f830 <__assert_fail@plt+0x1e624>
   2ec7c:	add	lr, r8, r0
   2ec80:	mov	r9, r0
   2ec84:	ldm	ip!, {r0, r1, r2, r3}
   2ec88:	str	r0, [r8, r9]
   2ec8c:	str	r1, [lr, #4]
   2ec90:	str	r2, [lr, #8]
   2ec94:	str	r3, [lr, #12]
   2ec98:	b	2d228 <__assert_fail@plt+0x1c01c>
   2ec9c:	add	r8, r5, #8
   2eca0:	mov	r0, r8
   2eca4:	bl	11080 <strlen@plt>
   2eca8:	ldr	r3, [pc, #2948]	; 2f834 <__assert_fail@plt+0x1e628>
   2ecac:	add	ip, r8, r0
   2ecb0:	mov	lr, r0
   2ecb4:	ldm	r3!, {r0, r1, r2}
   2ecb8:	ldrh	r3, [r3]
   2ecbc:	str	r0, [r8, lr]
   2ecc0:	str	r1, [ip, #4]
   2ecc4:	strh	r3, [ip, #12]
   2ecc8:	str	r2, [ip, #8]
   2eccc:	b	2d220 <__assert_fail@plt+0x1c014>
   2ecd0:	add	r8, r5, #8
   2ecd4:	mov	r0, r8
   2ecd8:	bl	11080 <strlen@plt>
   2ecdc:	ldr	r3, [pc, #2900]	; 2f838 <__assert_fail@plt+0x1e62c>
   2ece0:	add	ip, r8, r0
   2ece4:	mov	lr, r0
   2ece8:	ldm	r3!, {r0, r1, r2}
   2ecec:	ldrh	r3, [r3]
   2ecf0:	str	r0, [r8, lr]
   2ecf4:	str	r1, [ip, #4]
   2ecf8:	strh	r3, [ip, #12]
   2ecfc:	str	r2, [ip, #8]
   2ed00:	b	2da14 <__assert_fail@plt+0x1c808>
   2ed04:	add	r8, r5, #8
   2ed08:	mov	r0, r8
   2ed0c:	bl	11080 <strlen@plt>
   2ed10:	ldr	r2, [pc, #2852]	; 2f83c <__assert_fail@plt+0x1e630>
   2ed14:	mov	r3, r0
   2ed18:	add	r1, r8, r0
   2ed1c:	ldr	r0, [r2]
   2ed20:	ldrh	r2, [r2, #4]
   2ed24:	str	r0, [r8, r3]
   2ed28:	strh	r2, [r1, #4]
   2ed2c:	b	2d0c4 <__assert_fail@plt+0x1beb8>
   2ed30:	ldr	r3, [pc, #2824]	; 2f840 <__assert_fail@plt+0x1e634>
   2ed34:	ldr	r5, [pc, #3444]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2ed38:	ldm	r3, {r0, r1}
   2ed3c:	str	r0, [r8, #2808]	; 0xaf8
   2ed40:	strh	r1, [r5, #12]
   2ed44:	b	2de70 <__assert_fail@plt+0x1cc64>
   2ed48:	ldr	ip, [pc, #3076]	; 2f954 <__assert_fail@plt+0x1e748>
   2ed4c:	add	lr, r5, #8
   2ed50:	str	lr, [sp, #4]
   2ed54:	ldm	ip!, {r0, r1, r2, r3}
   2ed58:	bic	r8, r8, #32
   2ed5c:	str	r0, [sl]
   2ed60:	ldrh	fp, [ip, #4]
   2ed64:	ldr	r0, [ip]
   2ed68:	ldrb	ip, [ip, #6]
   2ed6c:	str	r0, [sl, #16]
   2ed70:	str	r1, [sl, #4]
   2ed74:	str	r2, [sl, #8]
   2ed78:	str	r3, [sl, #12]
   2ed7c:	strh	fp, [sl, #20]
   2ed80:	strb	ip, [sl, #22]
   2ed84:	mov	r0, lr
   2ed88:	bl	11080 <strlen@plt>
   2ed8c:	ldr	r1, [sp, #4]
   2ed90:	add	sl, r1, r0
   2ed94:	b	2d188 <__assert_fail@plt+0x1bf7c>
   2ed98:	ldr	lr, [pc, #2724]	; 2f844 <__assert_fail@plt+0x1e638>
   2ed9c:	ldr	r5, [pc, #3340]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2eda0:	bic	r8, r6, #-16777216	; 0xff000000
   2eda4:	ldm	lr!, {r0, r1, r2, r3}
   2eda8:	add	ip, r5, #8
   2edac:	bic	r8, r8, #1
   2edb0:	add	sl, r5, #32
   2edb4:	stmia	ip!, {r0, r1, r2, r3}
   2edb8:	ldm	lr, {r0, r1, r2}
   2edbc:	stmia	ip!, {r0, r1}
   2edc0:	strb	r2, [ip]
   2edc4:	b	2d180 <__assert_fail@plt+0x1bf74>
   2edc8:	ldr	r3, [pc, #2680]	; 2f848 <__assert_fail@plt+0x1e63c>
   2edcc:	ldr	r5, [pc, #3292]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2edd0:	ldm	r3, {r0, r1, r2}
   2edd4:	add	r3, r5, #8
   2edd8:	lsr	ip, r2, #16
   2eddc:	stmia	r3!, {r0, r1}
   2ede0:	strh	r2, [r3], #2
   2ede4:	strb	ip, [r3]
   2ede8:	b	2c898 <__assert_fail@plt+0x1b68c>
   2edec:	add	r8, r5, #8
   2edf0:	mov	r0, r8
   2edf4:	bl	11080 <strlen@plt>
   2edf8:	ldr	r3, [pc, #2636]	; 2f84c <__assert_fail@plt+0x1e640>
   2edfc:	add	ip, r8, r0
   2ee00:	mov	lr, r0
   2ee04:	ldm	r3!, {r0, r1, r2}
   2ee08:	ldrb	r3, [r3]
   2ee0c:	str	r0, [r8, lr]
   2ee10:	str	r1, [ip, #4]
   2ee14:	strb	r3, [ip, #12]
   2ee18:	str	r2, [ip, #8]
   2ee1c:	b	2cf08 <__assert_fail@plt+0x1bcfc>
   2ee20:	add	r8, r5, #8
   2ee24:	mov	r0, r8
   2ee28:	bl	11080 <strlen@plt>
   2ee2c:	ldr	r2, [pc, #2588]	; 2f850 <__assert_fail@plt+0x1e644>
   2ee30:	mov	r3, r0
   2ee34:	add	r1, r8, r0
   2ee38:	ldr	r0, [r2]
   2ee3c:	ldrh	r2, [r2, #4]
   2ee40:	str	r0, [r8, r3]
   2ee44:	strh	r2, [r1, #4]
   2ee48:	b	2ca40 <__assert_fail@plt+0x1b834>
   2ee4c:	add	r8, r5, #8
   2ee50:	mov	r0, r8
   2ee54:	bl	11080 <strlen@plt>
   2ee58:	ldr	r3, [pc, #2548]	; 2f854 <__assert_fail@plt+0x1e648>
   2ee5c:	add	ip, r8, r0
   2ee60:	mov	lr, r0
   2ee64:	ldm	r3!, {r0, r1, r2}
   2ee68:	str	r0, [r8, lr]
   2ee6c:	str	r1, [ip, #4]
   2ee70:	str	r2, [ip, #8]
   2ee74:	b	2e148 <__assert_fail@plt+0x1cf3c>
   2ee78:	add	r8, r5, #8
   2ee7c:	mov	r0, r8
   2ee80:	bl	11080 <strlen@plt>
   2ee84:	ldr	r3, [pc, #2508]	; 2f858 <__assert_fail@plt+0x1e64c>
   2ee88:	add	r2, r8, r0
   2ee8c:	mov	ip, r0
   2ee90:	ldm	r3!, {r0, r1}
   2ee94:	ldrb	r3, [r3]
   2ee98:	str	r0, [r8, ip]
   2ee9c:	str	r1, [r2, #4]
   2eea0:	strb	r3, [r2, #8]
   2eea4:	b	2e140 <__assert_fail@plt+0x1cf34>
   2eea8:	add	r8, r5, #8
   2eeac:	mov	r0, r8
   2eeb0:	bl	11080 <strlen@plt>
   2eeb4:	ldr	r3, [pc, #2464]	; 2f85c <__assert_fail@plt+0x1e650>
   2eeb8:	ldrh	ip, [r3, #4]
   2eebc:	add	r2, r8, r0
   2eec0:	mov	r1, r0
   2eec4:	ldr	r0, [r3]
   2eec8:	ldrb	r3, [r3, #6]
   2eecc:	str	r0, [r8, r1]
   2eed0:	strh	ip, [r2, #4]
   2eed4:	strb	r3, [r2, #6]
   2eed8:	b	2e138 <__assert_fail@plt+0x1cf2c>
   2eedc:	add	r8, r5, #8
   2eee0:	mov	r0, r8
   2eee4:	bl	11080 <strlen@plt>
   2eee8:	ldr	r3, [pc, #2416]	; 2f860 <__assert_fail@plt+0x1e654>
   2eeec:	add	r2, r8, r0
   2eef0:	mov	ip, r0
   2eef4:	ldm	r3!, {r0, r1}
   2eef8:	ldrh	r3, [r3]
   2eefc:	str	r0, [r8, ip]
   2ef00:	str	r1, [r2, #4]
   2ef04:	strh	r3, [r2, #8]
   2ef08:	b	2e4c8 <__assert_fail@plt+0x1d2bc>
   2ef0c:	add	r8, r5, #8
   2ef10:	mov	r0, r8
   2ef14:	bl	11080 <strlen@plt>
   2ef18:	ldr	r3, [pc, #2372]	; 2f864 <__assert_fail@plt+0x1e658>
   2ef1c:	ldrh	ip, [r3, #4]
   2ef20:	add	r2, r8, r0
   2ef24:	mov	r1, r0
   2ef28:	ldr	r0, [r3]
   2ef2c:	ldrb	r3, [r3, #6]
   2ef30:	str	r0, [r8, r1]
   2ef34:	strh	ip, [r2, #4]
   2ef38:	strb	r3, [r2, #6]
   2ef3c:	b	2e4c0 <__assert_fail@plt+0x1d2b4>
   2ef40:	add	r8, r5, #8
   2ef44:	mov	r0, r8
   2ef48:	bl	11080 <strlen@plt>
   2ef4c:	ldr	r2, [pc, #2324]	; 2f868 <__assert_fail@plt+0x1e65c>
   2ef50:	mov	r3, r0
   2ef54:	add	r1, r8, r0
   2ef58:	ldr	r0, [r2]
   2ef5c:	ldrh	r2, [r2, #4]
   2ef60:	str	r0, [r8, r3]
   2ef64:	strh	r2, [r1, #4]
   2ef68:	b	2e4b8 <__assert_fail@plt+0x1d2ac>
   2ef6c:	add	r8, r5, #8
   2ef70:	mov	r0, r8
   2ef74:	bl	11080 <strlen@plt>
   2ef78:	ldr	r2, [pc, #2284]	; 2f86c <__assert_fail@plt+0x1e660>
   2ef7c:	mov	r3, r0
   2ef80:	add	r1, r8, r0
   2ef84:	ldr	r0, [r2]
   2ef88:	ldrh	r2, [r2, #4]
   2ef8c:	str	r0, [r8, r3]
   2ef90:	strh	r2, [r1, #4]
   2ef94:	b	2e4b0 <__assert_fail@plt+0x1d2a4>
   2ef98:	add	r8, r5, #8
   2ef9c:	mov	r0, r8
   2efa0:	bl	11080 <strlen@plt>
   2efa4:	ldr	r3, [pc, #2244]	; 2f870 <__assert_fail@plt+0x1e664>
   2efa8:	add	r2, r8, r0
   2efac:	mov	ip, r0
   2efb0:	ldm	r3!, {r0, r1}
   2efb4:	ldrh	r3, [r3]
   2efb8:	str	r0, [r8, ip]
   2efbc:	str	r1, [r2, #4]
   2efc0:	strh	r3, [r2, #8]
   2efc4:	b	2e4a8 <__assert_fail@plt+0x1d29c>
   2efc8:	add	r8, r5, #8
   2efcc:	mov	r0, r8
   2efd0:	bl	11080 <strlen@plt>
   2efd4:	ldr	r3, [pc, #2200]	; 2f874 <__assert_fail@plt+0x1e668>
   2efd8:	ldrh	ip, [r3, #4]
   2efdc:	add	r2, r8, r0
   2efe0:	mov	r1, r0
   2efe4:	ldr	r0, [r3]
   2efe8:	ldrb	r3, [r3, #6]
   2efec:	str	r0, [r8, r1]
   2eff0:	strh	ip, [r2, #4]
   2eff4:	strb	r3, [r2, #6]
   2eff8:	b	2e080 <__assert_fail@plt+0x1ce74>
   2effc:	add	r8, r5, #8
   2f000:	mov	r0, r8
   2f004:	bl	11080 <strlen@plt>
   2f008:	ldr	r3, [pc, #2152]	; 2f878 <__assert_fail@plt+0x1e66c>
   2f00c:	add	r2, r8, r0
   2f010:	mov	ip, r0
   2f014:	ldm	r3!, {r0, r1}
   2f018:	ldrh	r3, [r3]
   2f01c:	str	r0, [r8, ip]
   2f020:	str	r1, [r2, #4]
   2f024:	strh	r3, [r2, #8]
   2f028:	b	2e078 <__assert_fail@plt+0x1ce6c>
   2f02c:	add	r8, r5, #8
   2f030:	mov	r0, r8
   2f034:	bl	11080 <strlen@plt>
   2f038:	ldr	r3, [pc, #2108]	; 2f87c <__assert_fail@plt+0x1e670>
   2f03c:	add	ip, r8, r0
   2f040:	mov	lr, r0
   2f044:	ldm	r3!, {r0, r1, r2}
   2f048:	str	r0, [r8, lr]
   2f04c:	str	r1, [ip, #4]
   2f050:	str	r2, [ip, #8]
   2f054:	b	2e070 <__assert_fail@plt+0x1ce64>
   2f058:	add	r8, r5, #8
   2f05c:	mov	r0, r8
   2f060:	bl	11080 <strlen@plt>
   2f064:	ldr	r3, [pc, #2068]	; 2f880 <__assert_fail@plt+0x1e674>
   2f068:	add	ip, r8, r0
   2f06c:	mov	lr, r0
   2f070:	ldm	r3!, {r0, r1, r2}
   2f074:	str	r0, [r8, lr]
   2f078:	str	r1, [ip, #4]
   2f07c:	str	r2, [ip, #8]
   2f080:	b	2e068 <__assert_fail@plt+0x1ce5c>
   2f084:	add	r8, r5, #8
   2f088:	mov	r0, r8
   2f08c:	bl	11080 <strlen@plt>
   2f090:	ldr	r3, [pc, #2028]	; 2f884 <__assert_fail@plt+0x1e678>
   2f094:	ldrh	ip, [r3, #4]
   2f098:	add	r2, r8, r0
   2f09c:	mov	r1, r0
   2f0a0:	ldr	r0, [r3]
   2f0a4:	ldrb	r3, [r3, #6]
   2f0a8:	str	r0, [r8, r1]
   2f0ac:	strh	ip, [r2, #4]
   2f0b0:	strb	r3, [r2, #6]
   2f0b4:	b	2e060 <__assert_fail@plt+0x1ce54>
   2f0b8:	add	r8, r5, #8
   2f0bc:	mov	r0, r8
   2f0c0:	bl	11080 <strlen@plt>
   2f0c4:	ldr	ip, [pc, #1980]	; 2f888 <__assert_fail@plt+0x1e67c>
   2f0c8:	add	lr, r8, r0
   2f0cc:	mov	r9, r0
   2f0d0:	ldm	ip!, {r0, r1, r2, r3}
   2f0d4:	str	r0, [r8, r9]
   2f0d8:	str	r1, [lr, #4]
   2f0dc:	str	r2, [lr, #8]
   2f0e0:	str	r3, [lr, #12]
   2f0e4:	b	2e058 <__assert_fail@plt+0x1ce4c>
   2f0e8:	add	r8, r5, #8
   2f0ec:	mov	r0, r8
   2f0f0:	bl	11080 <strlen@plt>
   2f0f4:	ldr	r3, [pc, #1936]	; 2f88c <__assert_fail@plt+0x1e680>
   2f0f8:	ldrh	ip, [r3, #4]
   2f0fc:	add	r2, r8, r0
   2f100:	mov	r1, r0
   2f104:	ldr	r0, [r3]
   2f108:	ldrb	r3, [r3, #6]
   2f10c:	str	r0, [r8, r1]
   2f110:	strh	ip, [r2, #4]
   2f114:	strb	r3, [r2, #6]
   2f118:	b	2e050 <__assert_fail@plt+0x1ce44>
   2f11c:	add	r8, r5, #8
   2f120:	mov	r0, r8
   2f124:	bl	11080 <strlen@plt>
   2f128:	ldr	r3, [pc, #1888]	; 2f890 <__assert_fail@plt+0x1e684>
   2f12c:	add	ip, r8, r0
   2f130:	mov	lr, r0
   2f134:	ldm	r3!, {r0, r1, r2}
   2f138:	ldrh	r3, [r3]
   2f13c:	str	r0, [r8, lr]
   2f140:	str	r1, [ip, #4]
   2f144:	strh	r3, [ip, #12]
   2f148:	str	r2, [ip, #8]
   2f14c:	b	2da0c <__assert_fail@plt+0x1c800>
   2f150:	add	r8, r5, #8
   2f154:	mov	r0, r8
   2f158:	bl	11080 <strlen@plt>
   2f15c:	ldr	r3, [pc, #1840]	; 2f894 <__assert_fail@plt+0x1e688>
   2f160:	add	ip, r8, r0
   2f164:	mov	lr, r0
   2f168:	ldm	r3!, {r0, r1, r2}
   2f16c:	ldrh	r9, [r3]
   2f170:	ldrb	r3, [r3, #2]
   2f174:	str	r0, [r8, lr]
   2f178:	str	r1, [ip, #4]
   2f17c:	str	r2, [ip, #8]
   2f180:	strh	r9, [ip, #12]
   2f184:	strb	r3, [ip, #14]
   2f188:	b	2da04 <__assert_fail@plt+0x1c7f8>
   2f18c:	add	r8, r5, #8
   2f190:	mov	r0, r8
   2f194:	bl	11080 <strlen@plt>
   2f198:	ldr	r3, [pc, #1784]	; 2f898 <__assert_fail@plt+0x1e68c>
   2f19c:	add	ip, r8, r0
   2f1a0:	mov	lr, r0
   2f1a4:	ldm	r3!, {r0, r1, r2}
   2f1a8:	ldrh	r3, [r3]
   2f1ac:	str	r0, [r8, lr]
   2f1b0:	str	r1, [ip, #4]
   2f1b4:	strh	r3, [ip, #12]
   2f1b8:	str	r2, [ip, #8]
   2f1bc:	b	2d9fc <__assert_fail@plt+0x1c7f0>
   2f1c0:	add	r8, r5, #8
   2f1c4:	mov	r0, r8
   2f1c8:	bl	11080 <strlen@plt>
   2f1cc:	ldr	ip, [pc, #1736]	; 2f89c <__assert_fail@plt+0x1e690>
   2f1d0:	add	lr, r8, r0
   2f1d4:	mov	r9, r0
   2f1d8:	ldm	ip!, {r0, r1, r2, r3}
   2f1dc:	ldrh	ip, [ip]
   2f1e0:	str	r0, [r8, r9]
   2f1e4:	str	r1, [lr, #4]
   2f1e8:	strh	ip, [lr, #16]
   2f1ec:	str	r2, [lr, #8]
   2f1f0:	str	r3, [lr, #12]
   2f1f4:	b	2d9f4 <__assert_fail@plt+0x1c7e8>
   2f1f8:	add	r8, r5, #8
   2f1fc:	mov	r0, r8
   2f200:	bl	11080 <strlen@plt>
   2f204:	ldr	r3, [pc, #1684]	; 2f8a0 <__assert_fail@plt+0x1e694>
   2f208:	add	ip, r8, r0
   2f20c:	mov	lr, r0
   2f210:	ldm	r3!, {r0, r1, r2}
   2f214:	ldrh	r9, [r3]
   2f218:	ldrb	r3, [r3, #2]
   2f21c:	str	r0, [r8, lr]
   2f220:	str	r1, [ip, #4]
   2f224:	str	r2, [ip, #8]
   2f228:	strh	r9, [ip, #12]
   2f22c:	strb	r3, [ip, #14]
   2f230:	b	2d9ec <__assert_fail@plt+0x1c7e0>
   2f234:	add	r8, r5, #8
   2f238:	mov	r0, r8
   2f23c:	bl	11080 <strlen@plt>
   2f240:	ldr	ip, [pc, #1628]	; 2f8a4 <__assert_fail@plt+0x1e698>
   2f244:	add	lr, r8, r0
   2f248:	mov	r9, r0
   2f24c:	ldm	ip!, {r0, r1, r2, r3}
   2f250:	ldrh	ip, [ip]
   2f254:	str	r0, [r8, r9]
   2f258:	str	r1, [lr, #4]
   2f25c:	strh	ip, [lr, #16]
   2f260:	str	r2, [lr, #8]
   2f264:	str	r3, [lr, #12]
   2f268:	b	2d9e4 <__assert_fail@plt+0x1c7d8>
   2f26c:	add	r8, r5, #8
   2f270:	mov	r0, r8
   2f274:	bl	11080 <strlen@plt>
   2f278:	ldr	r3, [pc, #1576]	; 2f8a8 <__assert_fail@plt+0x1e69c>
   2f27c:	add	r2, r8, r0
   2f280:	mov	ip, r0
   2f284:	ldm	r3!, {r0, r1}
   2f288:	ldrh	lr, [r3]
   2f28c:	ldrb	r3, [r3, #2]
   2f290:	str	r0, [r8, ip]
   2f294:	str	r1, [r2, #4]
   2f298:	strh	lr, [r2, #8]
   2f29c:	strb	r3, [r2, #10]
   2f2a0:	b	2d95c <__assert_fail@plt+0x1c750>
   2f2a4:	add	r8, r5, #8
   2f2a8:	mov	r0, r8
   2f2ac:	bl	11080 <strlen@plt>
   2f2b0:	ldr	lr, [pc, #1524]	; 2f8ac <__assert_fail@plt+0x1e6a0>
   2f2b4:	add	r9, lr, #32
   2f2b8:	add	ip, r8, r0
   2f2bc:	mov	r8, lr
   2f2c0:	add	ip, ip, #16
   2f2c4:	ldm	r8!, {r0, r1, r2, r3}
   2f2c8:	add	lr, lr, #16
   2f2cc:	cmp	r8, r9
   2f2d0:	str	r0, [ip, #-16]
   2f2d4:	str	r1, [ip, #-12]
   2f2d8:	str	r2, [ip, #-8]
   2f2dc:	str	r3, [ip, #-4]
   2f2e0:	bne	2f2bc <__assert_fail@plt+0x1e0b0>
   2f2e4:	ldrh	r2, [lr, #4]
   2f2e8:	ldrb	r3, [lr, #6]
   2f2ec:	ldr	r0, [lr]
   2f2f0:	strh	r2, [ip, #4]
   2f2f4:	strb	r3, [ip, #6]
   2f2f8:	str	r0, [ip]
   2f2fc:	b	2d954 <__assert_fail@plt+0x1c748>
   2f300:	add	r8, r5, #8
   2f304:	mov	r0, r8
   2f308:	bl	11080 <strlen@plt>
   2f30c:	ldr	ip, [pc, #1436]	; 2f8b0 <__assert_fail@plt+0x1e6a4>
   2f310:	add	lr, r8, r0
   2f314:	mov	r9, r0
   2f318:	ldm	ip!, {r0, r1, r2, r3}
   2f31c:	ldrh	sl, [ip]
   2f320:	ldrb	ip, [ip, #2]
   2f324:	str	r0, [r8, r9]
   2f328:	str	r1, [lr, #4]
   2f32c:	str	r2, [lr, #8]
   2f330:	str	r3, [lr, #12]
   2f334:	strh	sl, [lr, #16]
   2f338:	strb	ip, [lr, #18]
   2f33c:	b	2d944 <__assert_fail@plt+0x1c738>
   2f340:	add	r8, r5, #8
   2f344:	mov	r0, r8
   2f348:	bl	11080 <strlen@plt>
   2f34c:	ldr	r3, [pc, #1376]	; 2f8b4 <__assert_fail@plt+0x1e6a8>
   2f350:	add	ip, r8, r0
   2f354:	mov	lr, r0
   2f358:	ldm	r3!, {r0, r1, r2}
   2f35c:	ldrh	r3, [r3]
   2f360:	str	r0, [r8, lr]
   2f364:	str	r1, [ip, #4]
   2f368:	strh	r3, [ip, #12]
   2f36c:	str	r2, [ip, #8]
   2f370:	b	2d954 <__assert_fail@plt+0x1c748>
   2f374:	ldr	r3, [pc, #1340]	; 2f8b8 <__assert_fail@plt+0x1e6ac>
   2f378:	ldr	r5, [pc, #1840]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f37c:	ldm	r3, {r0, r1}
   2f380:	str	r0, [r8, #2808]	; 0xaf8
   2f384:	strh	r1, [r5, #12]
   2f388:	b	2d2f8 <__assert_fail@plt+0x1c0ec>
   2f38c:	ldr	r3, [pc, #1320]	; 2f8bc <__assert_fail@plt+0x1e6b0>
   2f390:	ldr	r5, [pc, #1816]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f394:	ldm	r3, {r0, r1}
   2f398:	str	r0, [r8, #2808]	; 0xaf8
   2f39c:	strh	r1, [r5, #12]
   2f3a0:	b	2d2f8 <__assert_fail@plt+0x1c0ec>
   2f3a4:	ldr	r3, [pc, #1300]	; 2f8c0 <__assert_fail@plt+0x1e6b4>
   2f3a8:	ldm	r3, {r0, r1, r2, r3}
   2f3ac:	ldr	r5, [pc, #1788]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f3b0:	add	ip, r5, #8
   2f3b4:	stmia	ip!, {r0, r1, r2}
   2f3b8:	strh	r3, [ip]
   2f3bc:	b	2e4a0 <__assert_fail@plt+0x1d294>
   2f3c0:	mov	r2, #5
   2f3c4:	ldr	r1, [pc, #1272]	; 2f8c4 <__assert_fail@plt+0x1e6b8>
   2f3c8:	mov	r0, #0
   2f3cc:	bl	10f90 <dcgettext@plt>
   2f3d0:	mov	r1, r0
   2f3d4:	add	r0, r5, #8
   2f3d8:	bl	10fd8 <strcat@plt>
   2f3dc:	b	2cbb0 <__assert_fail@plt+0x1b9a4>
   2f3e0:	ldr	r3, [pc, #1000]	; 2f7d0 <__assert_fail@plt+0x1e5c4>
   2f3e4:	ldr	r5, [pc, #1732]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f3e8:	add	r3, r3, r2, lsl #2
   2f3ec:	add	r9, r5, #8
   2f3f0:	mov	r0, r9
   2f3f4:	ldr	sl, [r3, #572]	; 0x23c
   2f3f8:	ldr	fp, [r3, #600]	; 0x258
   2f3fc:	bl	11080 <strlen@plt>
   2f400:	ldr	r3, [pc, #1216]	; 2f8c8 <__assert_fail@plt+0x1e6bc>
   2f404:	mov	r2, r0
   2f408:	add	ip, r9, r0
   2f40c:	ldm	r3!, {r0, r1}
   2f410:	add	lr, r2, #10
   2f414:	ldrh	r3, [r3]
   2f418:	str	r0, [r9, r2]
   2f41c:	str	r1, [ip, #4]
   2f420:	add	r0, r9, lr
   2f424:	mov	r1, sl
   2f428:	strh	r3, [ip, #8]
   2f42c:	bl	10f84 <stpcpy@plt>
   2f430:	cmp	fp, #0
   2f434:	beq	2cde4 <__assert_fail@plt+0x1bbd8>
   2f438:	mov	r1, fp
   2f43c:	bl	10ff0 <strcpy@plt>
   2f440:	b	2cde4 <__assert_fail@plt+0x1bbd8>
   2f444:	ldr	r3, [pc, #1152]	; 2f8cc <__assert_fail@plt+0x1e6c0>
   2f448:	ldr	r5, [pc, #1632]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f44c:	ldm	r3, {r0, r1, r2}
   2f450:	add	r3, r5, #8
   2f454:	stmia	r3!, {r0, r1}
   2f458:	strb	r2, [r3]
   2f45c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f460:	ldr	r3, [pc, #1128]	; 2f8d0 <__assert_fail@plt+0x1e6c4>
   2f464:	ldr	r5, [pc, #1604]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f468:	ldm	r3, {r0, r1}
   2f46c:	add	r3, r5, #8
   2f470:	stm	r3, {r0, r1}
   2f474:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f478:	add	r8, r5, #8
   2f47c:	mov	r0, r8
   2f480:	bl	11080 <strlen@plt>
   2f484:	ldr	r2, [pc, #1096]	; 2f8d4 <__assert_fail@plt+0x1e6c8>
   2f488:	mov	r3, r0
   2f48c:	add	r1, r8, r0
   2f490:	ldr	r0, [r2]
   2f494:	ldrh	r2, [r2, #4]
   2f498:	str	r0, [r8, r3]
   2f49c:	strh	r2, [r1, #4]
   2f4a0:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f4a4:	add	r8, r5, #8
   2f4a8:	mov	r0, r8
   2f4ac:	bl	11080 <strlen@plt>
   2f4b0:	ldr	r2, [pc, #1056]	; 2f8d8 <__assert_fail@plt+0x1e6cc>
   2f4b4:	mov	r3, r0
   2f4b8:	b	2e11c <__assert_fail@plt+0x1cf10>
   2f4bc:	ldr	r3, [pc, #1048]	; 2f8dc <__assert_fail@plt+0x1e6d0>
   2f4c0:	ldm	r3!, {r0, r1}
   2f4c4:	ldrh	r2, [r3]
   2f4c8:	ldrb	r3, [r3, #2]
   2f4cc:	str	r0, [r8, r9]
   2f4d0:	str	r1, [lr, #4]
   2f4d4:	strh	r2, [lr, #8]
   2f4d8:	strb	r3, [lr, #10]
   2f4dc:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f4e0:	ldr	ip, [pc, #1016]	; 2f8e0 <__assert_fail@plt+0x1e6d4>
   2f4e4:	ldm	ip!, {r0, r1, r2, r3}
   2f4e8:	str	r0, [r8, r9]
   2f4ec:	str	r1, [lr, #4]
   2f4f0:	str	r2, [lr, #8]
   2f4f4:	ldm	ip!, {r0, r1, r2}
   2f4f8:	str	r3, [lr, #12]
   2f4fc:	ldrh	r3, [ip]
   2f500:	str	r0, [lr, #16]
   2f504:	str	r1, [lr, #20]
   2f508:	strh	r3, [lr, #28]
   2f50c:	str	r2, [lr, #24]
   2f510:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f514:	ldr	ip, [pc, #968]	; 2f8e4 <__assert_fail@plt+0x1e6d8>
   2f518:	ldm	ip!, {r0, r1, r2, r3}
   2f51c:	str	r0, [r8, r9]
   2f520:	str	r1, [lr, #4]
   2f524:	str	r2, [lr, #8]
   2f528:	ldm	ip!, {r0, r1, r2}
   2f52c:	str	r3, [lr, #12]
   2f530:	str	r0, [lr, #16]
   2f534:	str	r1, [lr, #20]
   2f538:	str	r2, [lr, #24]
   2f53c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f540:	ldr	r8, [pc, #928]	; 2f8e8 <__assert_fail@plt+0x1e6dc>
   2f544:	b	2ce10 <__assert_fail@plt+0x1bc04>
   2f548:	add	r8, r5, #8
   2f54c:	mov	r0, r8
   2f550:	bl	11080 <strlen@plt>
   2f554:	ldr	ip, [pc, #912]	; 2f8ec <__assert_fail@plt+0x1e6e0>
   2f558:	mov	r9, r0
   2f55c:	b	2dec8 <__assert_fail@plt+0x1ccbc>
   2f560:	mov	r2, #5
   2f564:	ldr	r1, [pc, #900]	; 2f8f0 <__assert_fail@plt+0x1e6e4>
   2f568:	mov	r0, #0
   2f56c:	bl	10f90 <dcgettext@plt>
   2f570:	mov	r1, r0
   2f574:	add	r0, r5, #8
   2f578:	bl	10fd8 <strcat@plt>
   2f57c:	b	2e130 <__assert_fail@plt+0x1cf24>
   2f580:	add	r8, r5, #8
   2f584:	mov	r0, r8
   2f588:	bl	11080 <strlen@plt>
   2f58c:	ldr	ip, [pc, #864]	; 2f8f4 <__assert_fail@plt+0x1e6e8>
   2f590:	mov	r9, r0
   2f594:	b	2dec8 <__assert_fail@plt+0x1ccbc>
   2f598:	ldr	r2, [pc, #856]	; 2f8f8 <__assert_fail@plt+0x1e6ec>
   2f59c:	bl	110b0 <snprintf@plt>
   2f5a0:	cmp	sl, #268435456	; 0x10000000
   2f5a4:	bne	2c898 <__assert_fail@plt+0x1b68c>
   2f5a8:	add	r8, r8, #38	; 0x26
   2f5ac:	add	r0, r9, r8
   2f5b0:	rsb	r1, r8, #1024	; 0x400
   2f5b4:	ldr	r2, [pc, #544]	; 2f7dc <__assert_fail@plt+0x1e5d0>
   2f5b8:	bl	110b0 <snprintf@plt>
   2f5bc:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f5c0:	ldr	r3, [pc, #820]	; 2f8fc <__assert_fail@plt+0x1e6f0>
   2f5c4:	b	2f3a8 <__assert_fail@plt+0x1e19c>
   2f5c8:	ldr	r3, [pc, #816]	; 2f900 <__assert_fail@plt+0x1e6f4>
   2f5cc:	b	2f3a8 <__assert_fail@plt+0x1e19c>
   2f5d0:	add	r8, r5, #8
   2f5d4:	mov	r0, r8
   2f5d8:	bl	11080 <strlen@plt>
   2f5dc:	ldr	r3, [pc, #800]	; 2f904 <__assert_fail@plt+0x1e6f8>
   2f5e0:	mov	ip, r0
   2f5e4:	b	2e1c0 <__assert_fail@plt+0x1cfb4>
   2f5e8:	add	r8, r5, #8
   2f5ec:	mov	r0, r8
   2f5f0:	bl	11080 <strlen@plt>
   2f5f4:	ldr	r3, [pc, #780]	; 2f908 <__assert_fail@plt+0x1e6fc>
   2f5f8:	add	r2, r8, r0
   2f5fc:	mov	ip, r0
   2f600:	ldm	r3!, {r0, r1}
   2f604:	ldrb	r3, [r3]
   2f608:	str	r0, [r8, ip]
   2f60c:	str	r1, [r2, #4]
   2f610:	strb	r3, [r2, #8]
   2f614:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f618:	add	r8, r5, #8
   2f61c:	mov	r0, r8
   2f620:	bl	11080 <strlen@plt>
   2f624:	ldr	r3, [pc, #736]	; 2f90c <__assert_fail@plt+0x1e700>
   2f628:	mov	r2, r0
   2f62c:	add	ip, r8, r0
   2f630:	ldm	r3!, {r0, r1}
   2f634:	str	r0, [r8, r2]
   2f638:	str	r1, [ip, #4]
   2f63c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f640:	add	r8, r5, #8
   2f644:	mov	r0, r8
   2f648:	bl	11080 <strlen@plt>
   2f64c:	ldr	r3, [pc, #700]	; 2f910 <__assert_fail@plt+0x1e704>
   2f650:	mov	r2, r0
   2f654:	add	ip, r8, r0
   2f658:	ldm	r3!, {r0, r1}
   2f65c:	str	r0, [r8, r2]
   2f660:	str	r1, [ip, #4]
   2f664:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f668:	add	r8, r5, #8
   2f66c:	mov	r0, r8
   2f670:	bl	11080 <strlen@plt>
   2f674:	ldr	r3, [pc, #664]	; 2f914 <__assert_fail@plt+0x1e708>
   2f678:	mov	r2, r0
   2f67c:	add	ip, r8, r0
   2f680:	ldm	r3!, {r0, r1}
   2f684:	str	r0, [r8, r2]
   2f688:	str	r1, [ip, #4]
   2f68c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f690:	ldr	r3, [pc, #640]	; 2f918 <__assert_fail@plt+0x1e70c>
   2f694:	ldr	r5, [pc, #1044]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f698:	ldm	r3, {r0, r1, r2, r3}
   2f69c:	add	ip, r5, #8
   2f6a0:	stmia	ip!, {r0, r1, r2}
   2f6a4:	strh	r3, [ip]
   2f6a8:	b	2cb5c <__assert_fail@plt+0x1b950>
   2f6ac:	ldr	r3, [pc, #616]	; 2f91c <__assert_fail@plt+0x1e710>
   2f6b0:	ldr	r5, [pc, #1016]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f6b4:	ldm	r3, {r0, r1}
   2f6b8:	add	r3, r5, #8
   2f6bc:	stm	r3, {r0, r1}
   2f6c0:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f6c4:	ldr	r3, [pc, #596]	; 2f920 <__assert_fail@plt+0x1e714>
   2f6c8:	ldr	r5, [pc, #992]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f6cc:	ldm	r3, {r0, r1, r2}
   2f6d0:	add	r3, r5, #8
   2f6d4:	stmia	r3!, {r0, r1}
   2f6d8:	strb	r2, [r3]
   2f6dc:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f6e0:	ldr	r3, [pc, #572]	; 2f924 <__assert_fail@plt+0x1e718>
   2f6e4:	ldr	r5, [pc, #964]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f6e8:	ldm	r3, {r0, r1}
   2f6ec:	lsr	r3, r1, #16
   2f6f0:	str	r0, [r8, #2808]	; 0xaf8
   2f6f4:	strh	r1, [r5, #12]
   2f6f8:	strb	r3, [r8, #2814]	; 0xafe
   2f6fc:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f700:	mov	r2, #5
   2f704:	ldr	r1, [pc, #540]	; 2f928 <__assert_fail@plt+0x1e71c>
   2f708:	mov	r0, #0
   2f70c:	bl	10f90 <dcgettext@plt>
   2f710:	mov	r1, r0
   2f714:	add	r0, r5, #8
   2f718:	bl	10fd8 <strcat@plt>
   2f71c:	b	2e740 <__assert_fail@plt+0x1d534>
   2f720:	ldr	r3, [pc, #516]	; 2f92c <__assert_fail@plt+0x1e720>
   2f724:	ldr	r5, [pc, #900]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f728:	ldm	r3, {r0, r1, r2}
   2f72c:	add	r3, r5, #8
   2f730:	stmia	r3!, {r0, r1}
   2f734:	strb	r2, [r3]
   2f738:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f73c:	ldr	r3, [pc, #492]	; 2f930 <__assert_fail@plt+0x1e724>
   2f740:	ldr	r5, [pc, #872]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f744:	ldm	r3, {r0, r1, r2}
   2f748:	add	r3, r5, #8
   2f74c:	lsr	ip, r2, #16
   2f750:	stmia	r3!, {r0, r1}
   2f754:	strh	r2, [r3], #2
   2f758:	strb	ip, [r3]
   2f75c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f760:	ldr	r3, [pc, #460]	; 2f934 <__assert_fail@plt+0x1e728>
   2f764:	ldr	r5, [pc, #836]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2f768:	ldm	r3, {r0, r1, r2}
   2f76c:	add	r3, r5, #8
   2f770:	lsr	ip, r2, #16
   2f774:	stmia	r3!, {r0, r1}
   2f778:	strh	r2, [r3], #2
   2f77c:	strb	ip, [r3]
   2f780:	b	2c898 <__assert_fail@plt+0x1b68c>
   2f784:	ldr	r8, [pc, #428]	; 2f938 <__assert_fail@plt+0x1e72c>
   2f788:	b	2ce10 <__assert_fail@plt+0x1bc04>
   2f78c:	ldr	r3, [pc, #424]	; 2f93c <__assert_fail@plt+0x1e730>
   2f790:	b	2d4e4 <__assert_fail@plt+0x1c2d8>
   2f794:	muleq	r6, r4, r1
   2f798:	andeq	sl, r6, r8, lsl #3
   2f79c:	andeq	sl, r6, ip, ror r1
   2f7a0:	andeq	sl, r6, r0, ror r1
   2f7a4:	andeq	sl, r6, r4, ror #2
   2f7a8:	andeq	sl, r6, r8, asr r1
   2f7ac:	andeq	sl, r6, ip, asr #2
   2f7b0:	andeq	sl, r6, r0, asr #2
   2f7b4:	andeq	sl, r6, r4, lsr r1
   2f7b8:	andeq	sl, r6, r8, lsr #2
   2f7bc:	andeq	sl, r6, ip, lsl r1
   2f7c0:	andeq	sl, r6, r0, lsl #2
   2f7c4:	muleq	r6, r8, sl
   2f7c8:	andeq	r9, r6, r8, asr sl
   2f7cc:	strdeq	r9, [r6], -r0
   2f7d0:	andeq	lr, r5, ip, asr #27
   2f7d4:	andeq	r9, r6, r0, lsl #23
   2f7d8:	andeq	r9, r6, r0, lsr ip
   2f7dc:	andeq	r9, r6, ip, ror #23
   2f7e0:	andeq	r9, r6, ip, ror #25
   2f7e4:	andeq	r9, r6, ip, lsl #26
   2f7e8:			; <UNDEFINED> instruction: 0x000698b0
   2f7ec:	strdeq	r9, [r6], -r8
   2f7f0:	andeq	r9, r6, ip, ror #17
   2f7f4:	muleq	r6, r4, r8
   2f7f8:	andeq	r9, r6, r0, ror #17
   2f7fc:	ldrdeq	r9, [r6], -r4
   2f800:	andeq	r9, r6, r4, asr r8
   2f804:	andeq	r9, r6, r4, lsl #17
   2f808:			; <UNDEFINED> instruction: 0x000698bc
   2f80c:	andeq	r9, r6, r0, lsr #23
   2f810:	andeq	r9, r6, ip, ror #14
   2f814:	andeq	r9, r6, r8, asr r7
   2f818:	andeq	r9, r6, ip, lsr #15
   2f81c:	andeq	sl, r6, r4, lsr r3
   2f820:	andeq	sl, r6, ip, lsr #1
   2f824:	ldrdeq	r9, [r6], -ip
   2f828:	ldrdeq	r9, [r6], -r0
   2f82c:	andeq	r9, r6, r8, asr #29
   2f830:			; <UNDEFINED> instruction: 0x00069eb8
   2f834:	andeq	r9, r6, r8, lsr #29
   2f838:	andeq	r9, r6, r4, asr #16
   2f83c:	andeq	r9, r6, r4, lsr sp
   2f840:	andeq	sl, r6, r8, asr r0
   2f844:	strdeq	r9, [r6], -r8
   2f848:	andeq	r9, r6, r4, lsl sp
   2f84c:	ldrdeq	r9, [r6], -r4
   2f850:	andeq	sl, r6, r4, lsr #1
   2f854:	strdeq	r9, [r6], -r4
   2f858:	andeq	r9, r6, r8, ror #21
   2f85c:	andeq	r9, r6, r0, ror #21
   2f860:	andeq	r9, r6, r8, asr #30
   2f864:	andeq	r9, r6, r0, asr #30
   2f868:	andeq	r9, r6, r8, lsr pc
   2f86c:	andeq	r9, r6, r0, lsr pc
   2f870:	andeq	r9, r6, r4, lsr #30
   2f874:	andeq	r9, r6, r8, asr #19
   2f878:			; <UNDEFINED> instruction: 0x000699bc
   2f87c:			; <UNDEFINED> instruction: 0x000699b0
   2f880:	andeq	r9, r6, r4, lsr #19
   2f884:	muleq	r6, ip, r9
   2f888:	andeq	r9, r6, ip, lsl #19
   2f88c:	andeq	r9, r6, r4, lsl #19
   2f890:	andeq	r9, r6, r4, lsr r8
   2f894:	andeq	r9, r6, r4, lsr #16
   2f898:	andeq	r9, r6, r4, lsl r8
   2f89c:	andeq	r9, r6, r0, lsl #16
   2f8a0:	strdeq	r9, [r6], -r0
   2f8a4:	ldrdeq	r9, [r6], -ip
   2f8a8:	strdeq	r9, [r6], -ip
   2f8ac:	andeq	r9, r6, r4, asr #31
   2f8b0:			; <UNDEFINED> instruction: 0x00069fb0
   2f8b4:	andeq	r9, r6, ip, ror #31
   2f8b8:	andeq	sl, r6, r0, lsl #1
   2f8bc:	andeq	sl, r6, r8, ror r0
   2f8c0:	strdeq	r9, [r6], -r4
   2f8c4:	andeq	r9, r6, ip, lsr r7
   2f8c8:	andeq	r9, r6, r0, ror r6
   2f8cc:	andeq	r9, r6, r8, asr r6
   2f8d0:	andeq	r9, r6, r0, asr r6
   2f8d4:	andeq	r9, r6, r4, ror #29
   2f8d8:			; <UNDEFINED> instruction: 0x00069ab0
   2f8dc:	andeq	r9, r6, r4, lsr #5
   2f8e0:	ldrdeq	r9, [r6], -r8
   2f8e4:			; <UNDEFINED> instruction: 0x000692b0
   2f8e8:	andeq	r8, r6, ip, lsl #30
   2f8ec:	andeq	r9, r6, r0, lsl #14
   2f8f0:	ldrdeq	r9, [r6], -r0
   2f8f4:	andeq	r9, r6, r4, lsl r7
   2f8f8:	andeq	r9, r6, r4, asr #23
   2f8fc:	andeq	r9, r6, r4, lsl pc
   2f900:	andeq	r9, r6, r4, lsl #30
   2f904:			; <UNDEFINED> instruction: 0x00069ab8
   2f908:	andeq	r9, r6, r8, lsr #22
   2f90c:	andeq	r9, r6, r0, lsl #22
   2f910:	andeq	r9, r6, r0, lsl fp
   2f914:	andeq	r9, r6, r8, lsl fp
   2f918:	andeq	r9, r6, r4, lsl #13
   2f91c:	andeq	r9, r6, ip, lsl #12
   2f920:	andeq	r9, r6, ip, lsl r9
   2f924:	andeq	r9, r6, ip, lsr r9
   2f928:			; <UNDEFINED> instruction: 0x0006a1b4
   2f92c:	andeq	r9, r6, r8, lsr #18
   2f930:	andeq	r9, r6, r4, lsl #18
   2f934:	andeq	r9, r6, r0, lsl r9
   2f938:	andeq	r9, r6, ip, ror #12
   2f93c:	andeq	r9, r6, ip, lsr #13
   2f940:	andeq	r9, r6, r4, asr #13
   2f944:			; <UNDEFINED> instruction: 0x000696b8
   2f948:	andeq	r9, r6, r8, lsr r4
   2f94c:	andeq	r9, r6, ip, lsr #9
   2f950:	ldrdeq	r9, [r6], -r4
   2f954:	andeq	r9, r6, r4, lsl r3
   2f958:	andeq	r9, r6, r4, asr #8
   2f95c:	muleq	r6, ip, r4
   2f960:	andeq	r9, r6, ip, asr r4
   2f964:	andeq	r9, r6, ip, ror #8
   2f968:	andeq	r9, r6, ip, ror r6
   2f96c:	andeq	r9, r6, r0, lsl #9
   2f970:			; <UNDEFINED> instruction: 0x000694bc
   2f974:	andeq	r9, r6, ip, asr #9
   2f978:	andeq	sl, r6, ip, lsr #32
   2f97c:	andeq	sl, r6, r4, lsr #32
   2f980:	andeq	sl, r6, r8
   2f984:	andeq	r9, r6, r4, lsr #12
   2f988:	strdeq	r9, [r6], -r4
   2f98c:	andeq	r9, r6, r4, lsr #11
   2f990:	ldrdeq	r9, [r6], -r0
   2f994:	strdeq	r9, [r6], -ip
   2f998:	andeq	r9, r6, ip, lsl r6
   2f99c:	andeq	r9, r6, r4, ror #25
   2f9a0:	ldrdeq	r9, [r6], -ip
   2f9a4:	andeq	r9, r6, r4, lsl #26
   2f9a8:	andeq	r9, r6, r8, asr fp
   2f9ac:	andeq	r9, r6, ip, asr #22
   2f9b0:	andeq	r9, r6, r0, asr #22
   2f9b4:	andeq	r9, r6, r0, lsl #8
   2f9b8:	andeq	r9, r6, r0, lsl r4
   2f9bc:	andeq	r9, r6, r4, lsr #8
   2f9c0:	andeq	r9, r6, r0, ror #7
   2f9c4:	strdeq	r9, [r6], -r8
   2f9c8:	strdeq	r9, [r6], -r0
   2f9cc:	andeq	r9, r6, r8, ror r3
   2f9d0:	andeq	r9, r6, ip, lsr #7
   2f9d4:	andeq	r9, r6, r8, lsl #7
   2f9d8:	andeq	r9, r6, r0, ror #6
   2f9dc:	andeq	r9, r6, r0, asr #24
   2f9e0:	andeq	r9, r6, r8, asr ip
   2f9e4:	andeq	r9, r6, ip, ror #23
   2f9e8:	andeq	r9, r6, r8, lsr ip
   2f9ec:	ldrdeq	r9, [r6], -r4
   2f9f0:	andeq	r9, r6, r0, ror ip
   2f9f4:	andeq	r9, r6, r8, lsl #25
   2f9f8:	muleq	r6, r4, ip
   2f9fc:	andeq	r9, r6, r4, lsr #25
   2fa00:	andeq	r9, r6, ip, ror ip
   2fa04:	andeq	r9, r6, r8, ror #24
   2fa08:	andeq	r9, r6, r0, ror #24
   2fa0c:	andeq	r9, r6, ip, asr #24
   2fa10:	strdeq	r9, [r6], -r4
   2fa14:	andeq	r9, r6, r4, asr #25
   2fa18:			; <UNDEFINED> instruction: 0x00069cb4
   2fa1c:	andeq	r9, r6, ip, ror sl
   2fa20:	ldrdeq	r9, [r6], -r8
   2fa24:	andeq	r9, r6, r8, lsr sl
   2fa28:	andeq	r9, r6, r8, lsr #24
   2fa2c:	andeq	r9, r6, r0, lsr #24
   2fa30:	andeq	r9, r6, r4, lsl ip
   2fa34:	andeq	r9, r6, r8, lsl #20
   2fa38:	andeq	r9, r6, r0, ror sl
   2fa3c:	andeq	r9, r6, r4, lsl #21
   2fa40:	andeq	r9, r6, r0, lsl #20
   2fa44:	ldrdeq	r9, [r6], -r0
   2fa48:	strdeq	r9, [r6], -r8
   2fa4c:	andeq	r9, r6, r8, ror #19
   2fa50:	andeq	r9, r6, r8, lsl sl
   2fa54:	andeq	r9, r6, r8, lsr #20
   2fa58:	andeq	r9, r6, ip, ror lr
   2fa5c:	andeq	r9, r6, ip, lsl #29
   2fa60:	andeq	r9, r6, ip, ror r9
   2fa64:	andeq	r9, r6, ip, ror #28
   2fa68:	andeq	r9, r6, r0, asr lr
   2fa6c:	andeq	r9, r6, r0, lsr lr
   2fa70:	andeq	r9, r6, r0, lsl lr
   2fa74:	andeq	r9, r6, r0, lsl #28
   2fa78:	andeq	r9, r6, ip, lsl lr
   2fa7c:	strdeq	r9, [r6], -r0
   2fa80:	andeq	r9, r6, r4, ror #27
   2fa84:	ldrdeq	r9, [r6], -ip
   2fa88:	ldrdeq	r9, [r6], -r4
   2fa8c:	andeq	r9, r6, ip, asr #27
   2fa90:	andeq	r9, r6, r4, asr #27
   2fa94:			; <UNDEFINED> instruction: 0x00069dbc
   2fa98:			; <UNDEFINED> instruction: 0x00069db4
   2fa9c:	andeq	r9, r6, r8, lsr #27
   2faa0:	muleq	r6, ip, sp
   2faa4:	muleq	r6, r0, sp
   2faa8:	andeq	r9, r6, r8, lsl #27
   2faac:	andeq	r9, r6, r0, lsl #27
   2fab0:	andeq	sl, r9, r8, lsr #30
   2fab4:	andeq	r9, r6, r8, ror sp
   2fab8:	andeq	r9, r6, r0, ror fp
   2fabc:	andeq	r9, r6, r4, lsl #5
   2fac0:	andeq	r9, r6, r0, ror r2
   2fac4:	andeq	sl, r9, r8, lsr #30
   2fac8:	ldr	r3, [pc, #-400]	; 2f940 <__assert_fail@plt+0x1e734>
   2facc:	b	2d4e4 <__assert_fail@plt+0x1c2d8>
   2fad0:	ldr	r3, [pc, #-404]	; 2f944 <__assert_fail@plt+0x1e738>
   2fad4:	b	2d4e4 <__assert_fail@plt+0x1c2d8>
   2fad8:	ldr	r3, [pc, #-408]	; 2f948 <__assert_fail@plt+0x1e73c>
   2fadc:	cmp	r8, #0
   2fae0:	ldm	r3!, {r0, r1}
   2fae4:	ldrh	r2, [r3]
   2fae8:	ldrb	r3, [r3, #2]
   2faec:	str	r0, [sl]
   2faf0:	str	r1, [sl, #4]
   2faf4:	strh	r2, [sl, #8]
   2faf8:	strb	r3, [sl, #10]
   2fafc:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2fb00:	str	r9, [sp, #4]
   2fb04:	add	r9, r5, #8
   2fb08:	b	2fb58 <__assert_fail@plt+0x1e94c>
   2fb0c:	cmp	r3, #128	; 0x80
   2fb10:	beq	2fc44 <__assert_fail@plt+0x1ea38>
   2fb14:	cmp	r3, #256	; 0x100
   2fb18:	bne	2fc38 <__assert_fail@plt+0x1ea2c>
   2fb1c:	mov	r0, r9
   2fb20:	bl	11080 <strlen@plt>
   2fb24:	ldr	r3, [pc, #-480]	; 2f94c <__assert_fail@plt+0x1e740>
   2fb28:	mov	lr, r0
   2fb2c:	ldm	r3!, {r0, r1, r2}
   2fb30:	add	ip, r9, lr
   2fb34:	ldrh	sl, [r3]
   2fb38:	ldrb	r3, [r3, #2]
   2fb3c:	str	r0, [r9, lr]
   2fb40:	str	r1, [ip, #4]
   2fb44:	str	r2, [ip, #8]
   2fb48:	strh	sl, [ip, #12]
   2fb4c:	strb	r3, [ip, #14]
   2fb50:	cmp	r8, #0
   2fb54:	beq	2e9b0 <__assert_fail@plt+0x1d7a4>
   2fb58:	rsb	r3, r8, #0
   2fb5c:	and	r3, r3, r8
   2fb60:	cmp	r3, #64	; 0x40
   2fb64:	bic	r8, r8, r3
   2fb68:	beq	2fcc8 <__assert_fail@plt+0x1eabc>
   2fb6c:	bls	2fbbc <__assert_fail@plt+0x1e9b0>
   2fb70:	cmp	r3, #512	; 0x200
   2fb74:	beq	2fd04 <__assert_fail@plt+0x1eaf8>
   2fb78:	bls	2fb0c <__assert_fail@plt+0x1e900>
   2fb7c:	cmp	r3, #1024	; 0x400
   2fb80:	beq	2fd18 <__assert_fail@plt+0x1eb0c>
   2fb84:	cmp	r3, #2048	; 0x800
   2fb88:	bne	2fc38 <__assert_fail@plt+0x1ea2c>
   2fb8c:	mov	r0, r9
   2fb90:	bl	11080 <strlen@plt>
   2fb94:	ldr	r3, [pc, #-588]	; 2f950 <__assert_fail@plt+0x1e744>
   2fb98:	mov	lr, r0
   2fb9c:	ldm	r3!, {r0, r1, r2}
   2fba0:	add	ip, r9, lr
   2fba4:	ldrh	r3, [r3]
   2fba8:	str	r0, [r9, lr]
   2fbac:	str	r1, [ip, #4]
   2fbb0:	strh	r3, [ip, #12]
   2fbb4:	str	r2, [ip, #8]
   2fbb8:	b	2fb50 <__assert_fail@plt+0x1e944>
   2fbbc:	cmp	r3, #8
   2fbc0:	beq	2fc58 <__assert_fail@plt+0x1ea4c>
   2fbc4:	bls	2fc1c <__assert_fail@plt+0x1ea10>
   2fbc8:	cmp	r3, #16
   2fbcc:	beq	2fc6c <__assert_fail@plt+0x1ea60>
   2fbd0:	cmp	r3, #32
   2fbd4:	bne	2fc38 <__assert_fail@plt+0x1ea2c>
   2fbd8:	mov	r0, r9
   2fbdc:	bl	11080 <strlen@plt>
   2fbe0:	ldr	ip, [pc, #-660]	; 2f954 <__assert_fail@plt+0x1e748>
   2fbe4:	mov	sl, r0
   2fbe8:	ldm	ip!, {r0, r1, r2, r3}
   2fbec:	add	lr, r9, sl
   2fbf0:	str	r0, [r9, sl]
   2fbf4:	ldrh	fp, [ip, #4]
   2fbf8:	ldrb	sl, [ip, #6]
   2fbfc:	ldr	r0, [ip]
   2fc00:	str	r1, [lr, #4]
   2fc04:	str	r2, [lr, #8]
   2fc08:	str	r3, [lr, #12]
   2fc0c:	str	r0, [lr, #16]
   2fc10:	strh	fp, [lr, #20]
   2fc14:	strb	sl, [lr, #22]
   2fc18:	b	2fb50 <__assert_fail@plt+0x1e944>
   2fc1c:	cmp	r3, #4
   2fc20:	bne	2fc38 <__assert_fail@plt+0x1ea2c>
   2fc24:	mov	r0, r9
   2fc28:	bl	11080 <strlen@plt>
   2fc2c:	ldr	ip, [pc, #-732]	; 2f958 <__assert_fail@plt+0x1e74c>
   2fc30:	mov	sl, r0
   2fc34:	b	2fbe8 <__assert_fail@plt+0x1e9dc>
   2fc38:	mov	r3, #1
   2fc3c:	str	r3, [sp, #4]
   2fc40:	b	2fb50 <__assert_fail@plt+0x1e944>
   2fc44:	mov	r0, r9
   2fc48:	bl	11080 <strlen@plt>
   2fc4c:	ldr	r3, [pc, #-760]	; 2f95c <__assert_fail@plt+0x1e750>
   2fc50:	mov	lr, r0
   2fc54:	b	2fb2c <__assert_fail@plt+0x1e920>
   2fc58:	mov	r0, r9
   2fc5c:	bl	11080 <strlen@plt>
   2fc60:	ldr	r3, [pc, #-776]	; 2f960 <__assert_fail@plt+0x1e754>
   2fc64:	mov	lr, r0
   2fc68:	b	2fb2c <__assert_fail@plt+0x1e920>
   2fc6c:	mov	r0, r9
   2fc70:	bl	11080 <strlen@plt>
   2fc74:	ldr	ip, [pc, #-792]	; 2f964 <__assert_fail@plt+0x1e758>
   2fc78:	add	lr, r9, r0
   2fc7c:	mov	sl, r0
   2fc80:	ldm	ip!, {r0, r1, r2, r3}
   2fc84:	ldrh	ip, [ip]
   2fc88:	str	r0, [r9, sl]
   2fc8c:	str	r1, [lr, #4]
   2fc90:	strh	ip, [lr, #16]
   2fc94:	str	r2, [lr, #8]
   2fc98:	str	r3, [lr, #12]
   2fc9c:	b	2fb50 <__assert_fail@plt+0x1e944>
   2fca0:	add	r9, r5, #8
   2fca4:	mov	r0, r9
   2fca8:	bl	11080 <strlen@plt>
   2fcac:	ldr	r3, [pc, #-844]	; 2f968 <__assert_fail@plt+0x1e75c>
   2fcb0:	mov	r2, r0
   2fcb4:	add	ip, r9, r0
   2fcb8:	ldm	r3!, {r0, r1}
   2fcbc:	str	r0, [r9, r2]
   2fcc0:	str	r1, [ip, #4]
   2fcc4:	b	2cdec <__assert_fail@plt+0x1bbe0>
   2fcc8:	mov	r0, r9
   2fccc:	bl	11080 <strlen@plt>
   2fcd0:	ldr	ip, [pc, #-876]	; 2f96c <__assert_fail@plt+0x1e760>
   2fcd4:	add	lr, r9, r0
   2fcd8:	mov	sl, r0
   2fcdc:	ldm	ip!, {r0, r1, r2, r3}
   2fce0:	str	r0, [r9, sl]
   2fce4:	str	r1, [lr, #4]
   2fce8:	str	r2, [lr, #8]
   2fcec:	ldm	ip!, {r0, r1, r2}
   2fcf0:	str	r3, [lr, #12]
   2fcf4:	str	r0, [lr, #16]
   2fcf8:	str	r1, [lr, #20]
   2fcfc:	str	r2, [lr, #24]
   2fd00:	b	2fb50 <__assert_fail@plt+0x1e944>
   2fd04:	mov	r0, r9
   2fd08:	bl	11080 <strlen@plt>
   2fd0c:	ldr	r3, [pc, #-932]	; 2f970 <__assert_fail@plt+0x1e764>
   2fd10:	mov	lr, r0
   2fd14:	b	2fb9c <__assert_fail@plt+0x1e990>
   2fd18:	mov	r0, r9
   2fd1c:	bl	11080 <strlen@plt>
   2fd20:	ldr	r1, [pc, #-948]	; 2f974 <__assert_fail@plt+0x1e768>
   2fd24:	ldrh	r3, [r1, #4]
   2fd28:	mov	r2, r0
   2fd2c:	ldr	r0, [r1]
   2fd30:	add	r1, r9, r2
   2fd34:	str	r0, [r9, r2]
   2fd38:	strh	r3, [r1, #4]
   2fd3c:	b	2fb50 <__assert_fail@plt+0x1e944>
   2fd40:	add	r8, r5, #8
   2fd44:	mov	r0, r8
   2fd48:	bl	11080 <strlen@plt>
   2fd4c:	ldr	r3, [pc, #-988]	; 2f978 <__assert_fail@plt+0x1e76c>
   2fd50:	mov	r2, r0
   2fd54:	add	ip, r8, r0
   2fd58:	ldm	r3!, {r0, r1}
   2fd5c:	str	r0, [r8, r2]
   2fd60:	str	r1, [ip, #4]
   2fd64:	b	2c898 <__assert_fail@plt+0x1b68c>
   2fd68:	add	r8, r5, #8
   2fd6c:	mov	r0, r8
   2fd70:	bl	11080 <strlen@plt>
   2fd74:	ldr	r3, [pc, #-1024]	; 2f97c <__assert_fail@plt+0x1e770>
   2fd78:	mov	r2, r0
   2fd7c:	add	ip, r8, r0
   2fd80:	ldm	r3!, {r0, r1}
   2fd84:	str	r0, [r8, r2]
   2fd88:	str	r1, [ip, #4]
   2fd8c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2fd90:	add	r8, r5, #8
   2fd94:	mov	r0, r8
   2fd98:	bl	11080 <strlen@plt>
   2fd9c:	ldr	r3, [pc, #-1060]	; 2f980 <__assert_fail@plt+0x1e774>
   2fda0:	add	ip, r8, r0
   2fda4:	mov	lr, r0
   2fda8:	ldm	r3!, {r0, r1, r2}
   2fdac:	ldrh	r9, [r3]
   2fdb0:	ldrb	r3, [r3, #2]
   2fdb4:	str	r0, [r8, lr]
   2fdb8:	str	r1, [ip, #4]
   2fdbc:	str	r2, [ip, #8]
   2fdc0:	strh	r9, [ip, #12]
   2fdc4:	strb	r3, [ip, #14]
   2fdc8:	b	2d970 <__assert_fail@plt+0x1c764>
   2fdcc:	ldr	r3, [pc, #-1104]	; 2f984 <__assert_fail@plt+0x1e778>
   2fdd0:	ldr	r5, [pc, #-808]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2fdd4:	ldm	r3, {r0, r1}
   2fdd8:	add	r3, r5, #8
   2fddc:	stm	r3, {r0, r1}
   2fde0:	b	2c898 <__assert_fail@plt+0x1b68c>
   2fde4:	ldr	r3, [pc, #-1124]	; 2f988 <__assert_fail@plt+0x1e77c>
   2fde8:	ldr	r5, [pc, #-832]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2fdec:	ldm	r3, {r0, r1}
   2fdf0:	add	r3, r5, #8
   2fdf4:	stm	r3, {r0, r1}
   2fdf8:	b	2c898 <__assert_fail@plt+0x1b68c>
   2fdfc:	ldr	r3, [pc, #-1144]	; 2f98c <__assert_fail@plt+0x1e780>
   2fe00:	ldr	r5, [pc, #-856]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2fe04:	ldm	r3, {r0, r1, r2, r3}
   2fe08:	add	ip, r5, #8
   2fe0c:	stm	ip, {r0, r1, r2, r3}
   2fe10:	b	2dd24 <__assert_fail@plt+0x1cb18>
   2fe14:	ldr	ip, [pc, #-1164]	; 2f990 <__assert_fail@plt+0x1e784>
   2fe18:	ldm	ip!, {r0, r1, r2, r3}
   2fe1c:	str	r0, [sl]
   2fe20:	str	r1, [sl, #4]
   2fe24:	str	r2, [sl, #8]
   2fe28:	str	r3, [sl, #12]
   2fe2c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2fe30:	ldr	r3, [pc, #-1188]	; 2f994 <__assert_fail@plt+0x1e788>
   2fe34:	ldr	r5, [pc, #-908]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2fe38:	ldm	r3, {r0, r1}
   2fe3c:	add	r3, r5, #8
   2fe40:	stm	r3, {r0, r1}
   2fe44:	b	2c898 <__assert_fail@plt+0x1b68c>
   2fe48:	ldr	r3, [pc, #-1208]	; 2f998 <__assert_fail@plt+0x1e78c>
   2fe4c:	ldr	r5, [pc, #-932]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   2fe50:	ldm	r3, {r0, r1}
   2fe54:	add	r3, r5, #8
   2fe58:	stm	r3, {r0, r1}
   2fe5c:	b	2c898 <__assert_fail@plt+0x1b68c>
   2fe60:	add	r0, r5, #8
   2fe64:	add	r0, r0, r8
   2fe68:	rsb	r1, r8, #1024	; 0x400
   2fe6c:	ldr	r2, [pc, #-1240]	; 2f99c <__assert_fail@plt+0x1e790>
   2fe70:	bl	110b0 <snprintf@plt>
   2fe74:	add	r8, r8, #7
   2fe78:	b	2e960 <__assert_fail@plt+0x1d754>
   2fe7c:	add	r0, r5, #8
   2fe80:	add	r0, r0, r8
   2fe84:	rsb	r1, r8, #1024	; 0x400
   2fe88:	ldr	r2, [pc, #-1264]	; 2f9a0 <__assert_fail@plt+0x1e794>
   2fe8c:	bl	110b0 <snprintf@plt>
   2fe90:	add	r8, r8, #5
   2fe94:	b	2e958 <__assert_fail@plt+0x1d74c>
   2fe98:	mov	r2, #5
   2fe9c:	ldr	r1, [pc, #-1004]	; 2fab8 <__assert_fail@plt+0x1e8ac>
   2fea0:	mov	r0, #0
   2fea4:	bl	10f90 <dcgettext@plt>
   2fea8:	mov	r1, r0
   2feac:	add	r0, r5, #8
   2feb0:	bl	10fd8 <strcat@plt>
   2feb4:	b	2c898 <__assert_fail@plt+0x1b68c>
   2feb8:	add	r0, r5, #8
   2febc:	add	r0, r0, r8
   2fec0:	rsb	r1, r8, #1024	; 0x400
   2fec4:	ldr	r2, [pc, #-1320]	; 2f9a4 <__assert_fail@plt+0x1e798>
   2fec8:	bl	110b0 <snprintf@plt>
   2fecc:	add	r8, r8, #7
   2fed0:	b	2e990 <__assert_fail@plt+0x1d784>
   2fed4:	add	r8, r5, #8
   2fed8:	mov	r0, r8
   2fedc:	bl	11080 <strlen@plt>
   2fee0:	ldr	r3, [pc, #-1344]	; 2f9a8 <__assert_fail@plt+0x1e79c>
   2fee4:	add	r2, r8, r0
   2fee8:	mov	ip, r0
   2feec:	ldm	r3!, {r0, r1}
   2fef0:	ldrh	lr, [r3]
   2fef4:	ldrb	r3, [r3, #2]
   2fef8:	str	r0, [r8, ip]
   2fefc:	str	r1, [r2, #4]
   2ff00:	strh	lr, [r2, #8]
   2ff04:	strb	r3, [r2, #10]
   2ff08:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ff0c:	add	r8, r5, #8
   2ff10:	mov	r0, r8
   2ff14:	bl	11080 <strlen@plt>
   2ff18:	ldr	r3, [pc, #-1396]	; 2f9ac <__assert_fail@plt+0x1e7a0>
   2ff1c:	add	r2, r8, r0
   2ff20:	mov	ip, r0
   2ff24:	ldm	r3!, {r0, r1}
   2ff28:	ldrb	r3, [r3]
   2ff2c:	str	r0, [r8, ip]
   2ff30:	str	r1, [r2, #4]
   2ff34:	strb	r3, [r2, #8]
   2ff38:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ff3c:	add	r8, r5, #8
   2ff40:	mov	r0, r8
   2ff44:	bl	11080 <strlen@plt>
   2ff48:	ldr	r3, [pc, #-1440]	; 2f9b0 <__assert_fail@plt+0x1e7a4>
   2ff4c:	add	r2, r8, r0
   2ff50:	mov	ip, r0
   2ff54:	ldm	r3!, {r0, r1}
   2ff58:	ldrh	lr, [r3]
   2ff5c:	ldrb	r3, [r3, #2]
   2ff60:	str	r0, [r8, ip]
   2ff64:	str	r1, [r2, #4]
   2ff68:	strh	lr, [r2, #8]
   2ff6c:	strb	r3, [r2, #10]
   2ff70:	b	2c898 <__assert_fail@plt+0x1b68c>
   2ff74:	ldr	ip, [pc, #-1480]	; 2f9b4 <__assert_fail@plt+0x1e7a8>
   2ff78:	cmp	r8, #0
   2ff7c:	ldm	ip!, {r0, r1, r2, r3}
   2ff80:	str	r0, [sl]
   2ff84:	str	r1, [sl, #4]
   2ff88:	str	r2, [sl, #8]
   2ff8c:	str	r3, [sl, #12]
   2ff90:	beq	2c898 <__assert_fail@plt+0x1b68c>
   2ff94:	mov	r3, #0
   2ff98:	ldr	fp, [pc, #-1500]	; 2f9c4 <__assert_fail@plt+0x1e7b8>
   2ff9c:	str	r3, [sp, #4]
   2ffa0:	add	r9, r5, #8
   2ffa4:	b	2ffdc <__assert_fail@plt+0x1edd0>
   2ffa8:	cmp	r3, #8388608	; 0x800000
   2ffac:	bne	3005c <__assert_fail@plt+0x1ee50>
   2ffb0:	mov	r0, r9
   2ffb4:	bl	11080 <strlen@plt>
   2ffb8:	ldr	r1, [pc, #-1528]	; 2f9c8 <__assert_fail@plt+0x1e7bc>
   2ffbc:	ldrh	r3, [r1, #4]
   2ffc0:	mov	r2, r0
   2ffc4:	ldr	r0, [r1]
   2ffc8:	add	r1, r9, r2
   2ffcc:	str	r0, [r9, r2]
   2ffd0:	strh	r3, [r1, #4]
   2ffd4:	cmp	r8, #0
   2ffd8:	beq	2e9b0 <__assert_fail@plt+0x1d7a4>
   2ffdc:	rsb	r3, r8, #0
   2ffe0:	and	r3, r3, r8
   2ffe4:	cmp	r3, #1024	; 0x400
   2ffe8:	bic	r8, r8, r3
   2ffec:	beq	30068 <__assert_fail@plt+0x1ee5c>
   2fff0:	bls	30020 <__assert_fail@plt+0x1ee14>
   2fff4:	cmp	r3, #4194304	; 0x400000
   2fff8:	bne	2ffa8 <__assert_fail@plt+0x1ed9c>
   2fffc:	mov	r0, r9
   30000:	bl	11080 <strlen@plt>
   30004:	ldrh	r3, [fp, #4]
   30008:	mov	r2, r0
   3000c:	add	r1, r9, r2
   30010:	ldr	r0, [fp]
   30014:	str	r0, [r9, r2]
   30018:	strh	r3, [r1, #4]
   3001c:	b	2ffd4 <__assert_fail@plt+0x1edc8>
   30020:	cmp	r3, #512	; 0x200
   30024:	bne	3005c <__assert_fail@plt+0x1ee50>
   30028:	mov	r0, r9
   3002c:	bl	11080 <strlen@plt>
   30030:	ldr	ip, [pc, #-1664]	; 2f9b8 <__assert_fail@plt+0x1e7ac>
   30034:	mov	sl, r0
   30038:	ldm	ip!, {r0, r1, r2, r3}
   3003c:	add	lr, r9, sl
   30040:	ldrb	ip, [ip]
   30044:	str	r0, [r9, sl]
   30048:	str	r1, [lr, #4]
   3004c:	strb	ip, [lr, #16]
   30050:	str	r2, [lr, #8]
   30054:	str	r3, [lr, #12]
   30058:	b	2ffd4 <__assert_fail@plt+0x1edc8>
   3005c:	mov	r3, #1
   30060:	str	r3, [sp, #4]
   30064:	b	2ffd4 <__assert_fail@plt+0x1edc8>
   30068:	mov	r0, r9
   3006c:	bl	11080 <strlen@plt>
   30070:	ldr	ip, [pc, #-1724]	; 2f9bc <__assert_fail@plt+0x1e7b0>
   30074:	mov	sl, r0
   30078:	b	30038 <__assert_fail@plt+0x1ee2c>
   3007c:	ldr	ip, [pc, #-1732]	; 2f9c0 <__assert_fail@plt+0x1e7b4>
   30080:	cmp	r8, #0
   30084:	ldm	ip!, {r0, r1, r2, r3}
   30088:	str	r0, [sl]
   3008c:	str	r1, [sl, #4]
   30090:	str	r2, [sl, #8]
   30094:	str	r3, [sl, #12]
   30098:	beq	2c898 <__assert_fail@plt+0x1b68c>
   3009c:	mov	r3, #0
   300a0:	ldr	sl, [pc, #-1764]	; 2f9c4 <__assert_fail@plt+0x1e7b8>
   300a4:	ldr	r9, [pc, #-1764]	; 2f9c8 <__assert_fail@plt+0x1e7bc>
   300a8:	str	r3, [sp, #4]
   300ac:	add	fp, r5, #8
   300b0:	b	300e8 <__assert_fail@plt+0x1eedc>
   300b4:	cmp	r3, #8388608	; 0x800000
   300b8:	movne	r3, #1
   300bc:	strne	r3, [sp, #4]
   300c0:	bne	300e0 <__assert_fail@plt+0x1eed4>
   300c4:	bl	11080 <strlen@plt>
   300c8:	ldrh	r3, [r9, #4]
   300cc:	mov	r2, r0
   300d0:	add	r1, fp, r2
   300d4:	ldr	r0, [r9]
   300d8:	str	r0, [fp, r2]
   300dc:	strh	r3, [r1, #4]
   300e0:	cmp	r8, #0
   300e4:	beq	2e9b0 <__assert_fail@plt+0x1d7a4>
   300e8:	rsb	r3, r8, #0
   300ec:	and	r3, r3, r8
   300f0:	cmp	r3, #4194304	; 0x400000
   300f4:	mov	r0, fp
   300f8:	bic	r8, r8, r3
   300fc:	bne	300b4 <__assert_fail@plt+0x1eea8>
   30100:	bl	11080 <strlen@plt>
   30104:	ldrh	r3, [sl, #4]
   30108:	mov	r2, r0
   3010c:	add	r1, fp, r2
   30110:	ldr	r0, [sl]
   30114:	str	r0, [fp, r2]
   30118:	strh	r3, [r1, #4]
   3011c:	b	300e0 <__assert_fail@plt+0x1eed4>
   30120:	ldr	ip, [pc, #-1884]	; 2f9cc <__assert_fail@plt+0x1e7c0>
   30124:	cmp	r8, #0
   30128:	ldm	ip!, {r0, r1, r2, r3}
   3012c:	str	r0, [sl]
   30130:	str	r1, [sl, #4]
   30134:	str	r2, [sl, #8]
   30138:	str	r3, [sl, #12]
   3013c:	beq	2c898 <__assert_fail@plt+0x1b68c>
   30140:	mov	r3, #0
   30144:	str	r3, [sp, #4]
   30148:	add	r9, r5, #8
   3014c:	b	30168 <__assert_fail@plt+0x1ef5c>
   30150:	cmp	r3, #4
   30154:	movne	r3, #1
   30158:	strne	r3, [sp, #4]
   3015c:	beq	30214 <__assert_fail@plt+0x1f008>
   30160:	cmp	r8, #0
   30164:	beq	2e9b0 <__assert_fail@plt+0x1d7a4>
   30168:	rsb	r3, r8, #0
   3016c:	and	r3, r3, r8
   30170:	cmp	r3, #8
   30174:	bic	r8, r8, r3
   30178:	beq	301cc <__assert_fail@plt+0x1efc0>
   3017c:	cmp	r3, #16
   30180:	bne	30150 <__assert_fail@plt+0x1ef44>
   30184:	mov	r0, r9
   30188:	bl	11080 <strlen@plt>
   3018c:	ldr	sl, [pc, #-1988]	; 2f9d0 <__assert_fail@plt+0x1e7c4>
   30190:	add	fp, sl, #32
   30194:	add	ip, r9, r0
   30198:	mov	lr, sl
   3019c:	add	ip, ip, #16
   301a0:	ldm	lr!, {r0, r1, r2, r3}
   301a4:	add	sl, sl, #16
   301a8:	cmp	lr, fp
   301ac:	str	r0, [ip, #-16]
   301b0:	str	r1, [ip, #-12]
   301b4:	str	r2, [ip, #-8]
   301b8:	str	r3, [ip, #-4]
   301bc:	bne	30198 <__assert_fail@plt+0x1ef8c>
   301c0:	ldrb	r3, [sl]
   301c4:	strb	r3, [ip]
   301c8:	b	30160 <__assert_fail@plt+0x1ef54>
   301cc:	mov	r0, r9
   301d0:	bl	11080 <strlen@plt>
   301d4:	ldr	sl, [pc, #-2056]	; 2f9d4 <__assert_fail@plt+0x1e7c8>
   301d8:	add	fp, sl, #32
   301dc:	add	ip, r9, r0
   301e0:	mov	lr, sl
   301e4:	add	ip, ip, #16
   301e8:	ldm	lr!, {r0, r1, r2, r3}
   301ec:	add	sl, sl, #16
   301f0:	cmp	lr, fp
   301f4:	str	r0, [ip, #-16]
   301f8:	str	r1, [ip, #-12]
   301fc:	str	r2, [ip, #-8]
   30200:	str	r3, [ip, #-4]
   30204:	bne	301e0 <__assert_fail@plt+0x1efd4>
   30208:	ldr	r0, [sl]
   3020c:	str	r0, [ip]
   30210:	b	30160 <__assert_fail@plt+0x1ef54>
   30214:	mov	r0, r9
   30218:	bl	11080 <strlen@plt>
   3021c:	ldr	ip, [pc, #-2124]	; 2f9d8 <__assert_fail@plt+0x1e7cc>
   30220:	add	lr, r9, r0
   30224:	mov	sl, r0
   30228:	ldm	ip!, {r0, r1, r2, r3}
   3022c:	str	r0, [r9, sl]
   30230:	ldrh	fp, [ip, #4]
   30234:	ldrb	sl, [ip, #6]
   30238:	ldr	r0, [ip]
   3023c:	str	r1, [lr, #4]
   30240:	str	r2, [lr, #8]
   30244:	str	r3, [lr, #12]
   30248:	str	r0, [lr, #16]
   3024c:	strh	fp, [lr, #20]
   30250:	strb	sl, [lr, #22]
   30254:	b	30160 <__assert_fail@plt+0x1ef54>
   30258:	add	r0, r5, #8
   3025c:	add	r0, r0, r8
   30260:	rsb	r1, r8, #1024	; 0x400
   30264:	ldr	r2, [pc, #-2192]	; 2f9dc <__assert_fail@plt+0x1e7d0>
   30268:	bl	110b0 <snprintf@plt>
   3026c:	add	r8, r8, #8
   30270:	b	2e8e8 <__assert_fail@plt+0x1d6dc>
   30274:	ldr	r2, [pc, #-2204]	; 2f9e0 <__assert_fail@plt+0x1e7d4>
   30278:	bl	110b0 <snprintf@plt>
   3027c:	add	r8, r8, #5
   30280:	b	2e918 <__assert_fail@plt+0x1d70c>
   30284:	cmp	r3, #0
   30288:	bne	304a8 <__assert_fail@plt+0x1f29c>
   3028c:	tst	r6, #1048576	; 0x100000
   30290:	beq	3048c <__assert_fail@plt+0x1f280>
   30294:	tst	r6, #8192	; 0x2000
   30298:	bne	30470 <__assert_fail@plt+0x1f264>
   3029c:	tst	r6, #16384	; 0x4000
   302a0:	beq	2e918 <__assert_fail@plt+0x1d70c>
   302a4:	add	r0, r5, #8
   302a8:	add	r0, r0, r8
   302ac:	rsb	r1, r8, #1024	; 0x400
   302b0:	ldr	r2, [pc, #-2260]	; 2f9e4 <__assert_fail@plt+0x1e7d8>
   302b4:	bl	110b0 <snprintf@plt>
   302b8:	add	r8, r8, #5
   302bc:	b	2e918 <__assert_fail@plt+0x1d70c>
   302c0:	ldr	r2, [pc, #-2272]	; 2f9e8 <__assert_fail@plt+0x1e7dc>
   302c4:	bl	110b0 <snprintf@plt>
   302c8:	add	r8, r8, #5
   302cc:	b	2e8e0 <__assert_fail@plt+0x1d6d4>
   302d0:	add	r0, r5, #8
   302d4:	add	r0, r0, r8
   302d8:	rsb	r1, r8, #1024	; 0x400
   302dc:	ldr	r2, [pc, #-2296]	; 2f9ec <__assert_fail@plt+0x1e7e0>
   302e0:	bl	110b0 <snprintf@plt>
   302e4:	add	r8, r8, #7
   302e8:	b	2e950 <__assert_fail@plt+0x1d744>
   302ec:	add	r0, r5, #8
   302f0:	add	r0, r0, r8
   302f4:	rsb	r1, r8, #1024	; 0x400
   302f8:	ldr	r2, [pc, #-2320]	; 2f9f0 <__assert_fail@plt+0x1e7e4>
   302fc:	bl	110b0 <snprintf@plt>
   30300:	cmp	sl, #0
   30304:	add	r8, r8, #8
   30308:	bne	3036c <__assert_fail@plt+0x1f160>
   3030c:	cmp	r9, #0
   30310:	beq	3032c <__assert_fail@plt+0x1f120>
   30314:	add	r0, r5, #8
   30318:	add	r0, r0, r8
   3031c:	rsb	r1, r8, #1024	; 0x400
   30320:	ldr	r2, [pc, #-2356]	; 2f9f4 <__assert_fail@plt+0x1e7e8>
   30324:	bl	110b0 <snprintf@plt>
   30328:	add	r8, r8, #9
   3032c:	lsr	r3, r6, #22
   30330:	and	r3, r3, #3
   30334:	add	r0, r5, #8
   30338:	cmp	r3, #2
   3033c:	add	r0, r0, r8
   30340:	rsb	r1, r8, #1024	; 0x400
   30344:	beq	30404 <__assert_fail@plt+0x1f1f8>
   30348:	cmp	r3, #3
   3034c:	beq	303f4 <__assert_fail@plt+0x1f1e8>
   30350:	cmp	r3, #1
   30354:	addne	r8, r8, #13
   30358:	ldrne	r2, [pc, #-2408]	; 2f9f8 <__assert_fail@plt+0x1e7ec>
   3035c:	ldreq	r2, [pc, #-2408]	; 2f9fc <__assert_fail@plt+0x1e7f0>
   30360:	addeq	r8, r8, #14
   30364:	bl	110b0 <snprintf@plt>
   30368:	b	2e948 <__assert_fail@plt+0x1d73c>
   3036c:	add	r0, r5, #8
   30370:	add	r0, r0, r8
   30374:	rsb	r1, r8, #1024	; 0x400
   30378:	ldr	r2, [pc, #-2432]	; 2fa00 <__assert_fail@plt+0x1e7f4>
   3037c:	bl	110b0 <snprintf@plt>
   30380:	cmp	r9, #0
   30384:	add	r8, r8, #8
   30388:	beq	3032c <__assert_fail@plt+0x1f120>
   3038c:	b	30314 <__assert_fail@plt+0x1f108>
   30390:	add	r0, r5, #8
   30394:	add	r0, r0, r8
   30398:	rsb	r1, r8, #1024	; 0x400
   3039c:	ldr	r2, [pc, #-2464]	; 2fa04 <__assert_fail@plt+0x1e7f8>
   303a0:	bl	110b0 <snprintf@plt>
   303a4:	add	r8, r8, #7
   303a8:	b	2e928 <__assert_fail@plt+0x1d71c>
   303ac:	add	r0, r5, #8
   303b0:	add	r0, r0, r8
   303b4:	rsb	r1, r8, #1024	; 0x400
   303b8:	ldr	r2, [pc, #-2488]	; 2fa08 <__assert_fail@plt+0x1e7fc>
   303bc:	bl	110b0 <snprintf@plt>
   303c0:	add	r8, r8, #7
   303c4:	b	2e920 <__assert_fail@plt+0x1d714>
   303c8:	add	r0, r5, #8
   303cc:	add	r0, r0, r8
   303d0:	rsb	r1, r8, #1024	; 0x400
   303d4:	ldr	r2, [pc, #-2512]	; 2fa0c <__assert_fail@plt+0x1e800>
   303d8:	bl	110b0 <snprintf@plt>
   303dc:	add	r8, r8, #8
   303e0:	b	2e8f0 <__assert_fail@plt+0x1d6e4>
   303e4:	ldr	r2, [pc, #-2524]	; 2fa10 <__assert_fail@plt+0x1e804>
   303e8:	bl	110b0 <snprintf@plt>
   303ec:	add	r8, r8, #12
   303f0:	b	2e988 <__assert_fail@plt+0x1d77c>
   303f4:	ldr	r2, [pc, #-2536]	; 2fa14 <__assert_fail@plt+0x1e808>
   303f8:	bl	110b0 <snprintf@plt>
   303fc:	add	r8, r8, #15
   30400:	b	2e948 <__assert_fail@plt+0x1d73c>
   30404:	ldr	r2, [pc, #-2548]	; 2fa18 <__assert_fail@plt+0x1e80c>
   30408:	add	r8, r8, #15
   3040c:	bl	110b0 <snprintf@plt>
   30410:	b	2e948 <__assert_fail@plt+0x1d73c>
   30414:	add	r8, r5, #8
   30418:	mov	r0, r8
   3041c:	bl	11080 <strlen@plt>
   30420:	ldr	r2, [pc, #-2572]	; 2fa1c <__assert_fail@plt+0x1e810>
   30424:	mov	r3, r0
   30428:	ldr	r0, [r2]
   3042c:	ldrh	r2, [r2, #4]
   30430:	add	r1, r8, r3
   30434:	str	r0, [r8, r3]
   30438:	strh	r2, [r1, #4]
   3043c:	b	2e0e8 <__assert_fail@plt+0x1cedc>
   30440:	add	r8, r5, #8
   30444:	mov	r0, r8
   30448:	bl	11080 <strlen@plt>
   3044c:	ldr	r3, [pc, #-2612]	; 2fa20 <__assert_fail@plt+0x1e814>
   30450:	mov	r1, r0
   30454:	b	2e0cc <__assert_fail@plt+0x1cec0>
   30458:	add	r8, r5, #8
   3045c:	mov	r0, r8
   30460:	bl	11080 <strlen@plt>
   30464:	ldr	r3, [pc, #-2632]	; 2fa24 <__assert_fail@plt+0x1e818>
   30468:	mov	lr, r0
   3046c:	b	2e28c <__assert_fail@plt+0x1d080>
   30470:	add	r0, r5, #8
   30474:	add	r0, r0, r8
   30478:	rsb	r1, r8, #1024	; 0x400
   3047c:	ldr	r2, [pc, #-2652]	; 2fa28 <__assert_fail@plt+0x1e81c>
   30480:	bl	110b0 <snprintf@plt>
   30484:	add	r8, r8, #5
   30488:	b	3029c <__assert_fail@plt+0x1f090>
   3048c:	add	r0, r5, #8
   30490:	add	r0, r0, r8
   30494:	rsb	r1, r8, #1024	; 0x400
   30498:	ldr	r2, [pc, #-2676]	; 2fa2c <__assert_fail@plt+0x1e820>
   3049c:	bl	110b0 <snprintf@plt>
   304a0:	add	r8, r8, #5
   304a4:	b	30294 <__assert_fail@plt+0x1f088>
   304a8:	add	r0, r5, #8
   304ac:	add	r0, r0, r8
   304b0:	rsb	r1, r8, #1024	; 0x400
   304b4:	ldr	r2, [pc, #-2700]	; 2fa30 <__assert_fail@plt+0x1e824>
   304b8:	bl	110b0 <snprintf@plt>
   304bc:	add	r8, r8, #10
   304c0:	b	3028c <__assert_fail@plt+0x1f080>
   304c4:	add	r8, r5, #8
   304c8:	mov	r0, r8
   304cc:	bl	11080 <strlen@plt>
   304d0:	ldr	r3, [pc, #-2724]	; 2fa34 <__assert_fail@plt+0x1e828>
   304d4:	mov	r1, r0
   304d8:	b	2e0cc <__assert_fail@plt+0x1cec0>
   304dc:	add	r8, r5, #8
   304e0:	mov	r0, r8
   304e4:	bl	11080 <strlen@plt>
   304e8:	ldr	r3, [pc, #-2744]	; 2fa38 <__assert_fail@plt+0x1e82c>
   304ec:	mov	ip, r0
   304f0:	b	2e460 <__assert_fail@plt+0x1d254>
   304f4:	add	r8, r5, #8
   304f8:	mov	r0, r8
   304fc:	bl	11080 <strlen@plt>
   30500:	ldr	ip, [pc, #-2764]	; 2fa3c <__assert_fail@plt+0x1e830>
   30504:	add	lr, r8, r0
   30508:	mov	r9, r0
   3050c:	ldm	ip!, {r0, r1, r2, r3}
   30510:	ldrb	ip, [ip]
   30514:	str	r0, [r8, r9]
   30518:	str	r1, [lr, #4]
   3051c:	strb	ip, [lr, #16]
   30520:	str	r2, [lr, #8]
   30524:	str	r3, [lr, #12]
   30528:	b	2e0e8 <__assert_fail@plt+0x1cedc>
   3052c:	add	r8, r5, #8
   30530:	mov	r0, r8
   30534:	bl	11080 <strlen@plt>
   30538:	ldr	r3, [pc, #-2816]	; 2fa40 <__assert_fail@plt+0x1e834>
   3053c:	mov	r1, r0
   30540:	b	2e0cc <__assert_fail@plt+0x1cec0>
   30544:	add	r8, r5, #8
   30548:	mov	r0, r8
   3054c:	bl	11080 <strlen@plt>
   30550:	ldr	r3, [pc, #-2836]	; 2fa44 <__assert_fail@plt+0x1e838>
   30554:	mov	r1, r0
   30558:	b	2e0cc <__assert_fail@plt+0x1cec0>
   3055c:	add	r8, r5, #8
   30560:	mov	r0, r8
   30564:	bl	11080 <strlen@plt>
   30568:	ldr	r3, [pc, #-2856]	; 2fa48 <__assert_fail@plt+0x1e83c>
   3056c:	mov	r1, r0
   30570:	b	2e0cc <__assert_fail@plt+0x1cec0>
   30574:	add	r8, r5, #8
   30578:	mov	r0, r8
   3057c:	bl	11080 <strlen@plt>
   30580:	ldr	r3, [pc, #-2876]	; 2fa4c <__assert_fail@plt+0x1e840>
   30584:	mov	r1, r0
   30588:	b	2e0cc <__assert_fail@plt+0x1cec0>
   3058c:	add	r8, r5, #8
   30590:	mov	r0, r8
   30594:	bl	11080 <strlen@plt>
   30598:	ldr	r2, [pc, #-2896]	; 2fa50 <__assert_fail@plt+0x1e844>
   3059c:	mov	r3, r0
   305a0:	b	30428 <__assert_fail@plt+0x1f21c>
   305a4:	add	r8, r5, #8
   305a8:	mov	r0, r8
   305ac:	bl	11080 <strlen@plt>
   305b0:	ldr	r3, [pc, #-2916]	; 2fa54 <__assert_fail@plt+0x1e848>
   305b4:	mov	lr, r0
   305b8:	b	2e28c <__assert_fail@plt+0x1d080>
   305bc:	ldr	r3, [pc, #-2924]	; 2fa58 <__assert_fail@plt+0x1e84c>
   305c0:	ldr	r5, [pc, #-2840]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   305c4:	ldm	r3, {r0, r1, r2, r3}
   305c8:	add	ip, r5, #8
   305cc:	lsr	lr, r3, #16
   305d0:	stmia	ip!, {r0, r1, r2}
   305d4:	strh	r3, [ip], #2
   305d8:	strb	lr, [ip]
   305dc:	tst	r6, #256	; 0x100
   305e0:	bne	30614 <__assert_fail@plt+0x1f408>
   305e4:	tst	r6, #32768	; 0x8000
   305e8:	beq	2c898 <__assert_fail@plt+0x1b68c>
   305ec:	add	r8, r5, #8
   305f0:	mov	r0, r8
   305f4:	bl	11080 <strlen@plt>
   305f8:	ldr	r3, [pc, #-2980]	; 2fa5c <__assert_fail@plt+0x1e850>
   305fc:	mov	r2, r0
   30600:	add	ip, r8, r0
   30604:	ldm	r3!, {r0, r1}
   30608:	str	r0, [r8, r2]
   3060c:	str	r1, [ip, #4]
   30610:	b	2c898 <__assert_fail@plt+0x1b68c>
   30614:	add	r8, r5, #8
   30618:	mov	r0, r8
   3061c:	bl	11080 <strlen@plt>
   30620:	ldr	r2, [pc, #-3016]	; 2fa60 <__assert_fail@plt+0x1e854>
   30624:	mov	r3, r0
   30628:	add	r1, r8, r0
   3062c:	ldr	r0, [r2]
   30630:	ldrh	r2, [r2, #4]
   30634:	str	r0, [r8, r3]
   30638:	strh	r2, [r1, #4]
   3063c:	b	305e4 <__assert_fail@plt+0x1f3d8>
   30640:	ldr	r3, [pc, #-3044]	; 2fa64 <__assert_fail@plt+0x1e858>
   30644:	ldr	r5, [pc, #-2972]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   30648:	ldm	r3, {r0, r1, r2, r3}
   3064c:	add	ip, r5, #8
   30650:	stmia	ip!, {r0, r1, r2}
   30654:	strh	r3, [ip]
   30658:	b	305dc <__assert_fail@plt+0x1f3d0>
   3065c:	ldr	lr, [pc, #-3068]	; 2fa68 <__assert_fail@plt+0x1e85c>
   30660:	ldr	r5, [pc, #-3000]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   30664:	ldm	lr!, {r0, r1, r2, r3}
   30668:	add	ip, r5, #8
   3066c:	stmia	ip!, {r0, r1, r2, r3}
   30670:	ldm	lr, {r0, r1, r2}
   30674:	stmia	ip!, {r0, r1}
   30678:	strh	r2, [ip]
   3067c:	b	305dc <__assert_fail@plt+0x1f3d0>
   30680:	ldr	lr, [pc, #-3100]	; 2fa6c <__assert_fail@plt+0x1e860>
   30684:	ldr	r5, [pc, #-3036]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   30688:	ldm	lr!, {r0, r1, r2, r3}
   3068c:	add	ip, r5, #8
   30690:	stmia	ip!, {r0, r1, r2, r3}
   30694:	ldm	lr, {r0, r1, r2, r3}
   30698:	stm	ip, {r0, r1, r2, r3}
   3069c:	b	305dc <__assert_fail@plt+0x1f3d0>
   306a0:	ldr	r3, [pc, #-3128]	; 2fa70 <__assert_fail@plt+0x1e864>
   306a4:	ldr	r5, [pc, #-3068]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   306a8:	ldm	r3, {r0, r1, r2}
   306ac:	add	r3, r5, #8
   306b0:	stm	r3, {r0, r1, r2}
   306b4:	b	305dc <__assert_fail@plt+0x1f3d0>
   306b8:	ldr	r3, [pc, #-3148]	; 2fa74 <__assert_fail@plt+0x1e868>
   306bc:	ldm	r3, {r0, r1, r2, r3}
   306c0:	ldr	r5, [pc, #-3096]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   306c4:	add	ip, r5, #8
   306c8:	stmia	ip!, {r0, r1, r2}
   306cc:	strb	r3, [ip]
   306d0:	b	305dc <__assert_fail@plt+0x1f3d0>
   306d4:	ldr	lr, [pc, #-3172]	; 2fa78 <__assert_fail@plt+0x1e86c>
   306d8:	ldr	r5, [pc, #-3120]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   306dc:	ldm	lr!, {r0, r1, r2, r3}
   306e0:	add	ip, r5, #8
   306e4:	ldr	lr, [lr]
   306e8:	stmia	ip!, {r0, r1, r2, r3}
   306ec:	strh	lr, [ip]
   306f0:	b	305dc <__assert_fail@plt+0x1f3d0>
   306f4:	ldr	r3, [pc, #-3200]	; 2fa7c <__assert_fail@plt+0x1e870>
   306f8:	b	306bc <__assert_fail@plt+0x1f4b0>
   306fc:	ldr	r3, [pc, #-3204]	; 2fa80 <__assert_fail@plt+0x1e874>
   30700:	ldr	r5, [pc, #-3160]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   30704:	ldm	r3, {r0, r1, r2}
   30708:	add	r3, r5, #8
   3070c:	stm	r3, {r0, r1, r2}
   30710:	b	305dc <__assert_fail@plt+0x1f3d0>
   30714:	ldr	r3, [pc, #-3224]	; 2fa84 <__assert_fail@plt+0x1e878>
   30718:	ldm	r3, {r0, r1}
   3071c:	ldr	r5, [pc, #-3188]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   30720:	lsr	r3, r1, #16
   30724:	str	r0, [r8, #2808]	; 0xaf8
   30728:	strh	r1, [r5, #12]
   3072c:	strb	r3, [r8, #2814]	; 0xafe
   30730:	b	305dc <__assert_fail@plt+0x1f3d0>
   30734:	ldr	r3, [pc, #-3252]	; 2fa88 <__assert_fail@plt+0x1e87c>
   30738:	b	30718 <__assert_fail@plt+0x1f50c>
   3073c:	ldr	r3, [pc, #-3256]	; 2fa8c <__assert_fail@plt+0x1e880>
   30740:	b	30718 <__assert_fail@plt+0x1f50c>
   30744:	ldr	r3, [pc, #-3260]	; 2fa90 <__assert_fail@plt+0x1e884>
   30748:	ldr	r5, [pc, #-3232]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   3074c:	ldm	r3, {r0, r1}
   30750:	str	r0, [r8, #2808]	; 0xaf8
   30754:	strh	r1, [r5, #12]
   30758:	b	305dc <__assert_fail@plt+0x1f3d0>
   3075c:	ldr	r3, [pc, #-3280]	; 2fa94 <__assert_fail@plt+0x1e888>
   30760:	ldr	r5, [pc, #-3256]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   30764:	ldm	r3, {r0, r1}
   30768:	str	r0, [r8, #2808]	; 0xaf8
   3076c:	strh	r1, [r5, #12]
   30770:	b	305dc <__assert_fail@plt+0x1f3d0>
   30774:	ldr	r3, [pc, #-3300]	; 2fa98 <__assert_fail@plt+0x1e88c>
   30778:	b	30718 <__assert_fail@plt+0x1f50c>
   3077c:	ldr	r3, [pc, #-3304]	; 2fa9c <__assert_fail@plt+0x1e890>
   30780:	ldr	r5, [pc, #-3288]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   30784:	ldm	r3, {r0, r1, r2}
   30788:	add	r3, r5, #8
   3078c:	stm	r3, {r0, r1, r2}
   30790:	b	305dc <__assert_fail@plt+0x1f3d0>
   30794:	ldr	r3, [pc, #-3324]	; 2faa0 <__assert_fail@plt+0x1e894>
   30798:	ldr	r5, [pc, #-3312]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   3079c:	ldm	r3, {r0, r1, r2}
   307a0:	add	r3, r5, #8
   307a4:	stmia	r3!, {r0, r1}
   307a8:	strh	r2, [r3]
   307ac:	b	305dc <__assert_fail@plt+0x1f3d0>
   307b0:	ldr	r3, [pc, #-3348]	; 2faa4 <__assert_fail@plt+0x1e898>
   307b4:	ldr	r5, [pc, #-3340]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   307b8:	ldm	r3, {r0, r1, r2}
   307bc:	add	r3, r5, #8
   307c0:	stmia	r3!, {r0, r1}
   307c4:	strb	r2, [r3]
   307c8:	b	305dc <__assert_fail@plt+0x1f3d0>
   307cc:	ldr	r3, [pc, #-3372]	; 2faa8 <__assert_fail@plt+0x1e89c>
   307d0:	ldr	r5, [pc, #-3368]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   307d4:	ldm	r3, {r0, r1}
   307d8:	str	r0, [r8, #2808]	; 0xaf8
   307dc:	strh	r1, [r5, #12]
   307e0:	b	305dc <__assert_fail@plt+0x1f3d0>
   307e4:	ldr	r3, [pc, #-3392]	; 2faac <__assert_fail@plt+0x1e8a0>
   307e8:	ldr	r5, [pc, #-3392]	; 2fab0 <__assert_fail@plt+0x1e8a4>
   307ec:	ldm	r3, {r0, r1}
   307f0:	str	r0, [r8, #2808]	; 0xaf8
   307f4:	strh	r1, [r5, #12]
   307f8:	b	305dc <__assert_fail@plt+0x1f3d0>
   307fc:	ldr	r3, [pc, #-3408]	; 2fab4 <__assert_fail@plt+0x1e8a8>
   30800:	ldr	r5, [pc, #-3396]	; 2fac4 <__assert_fail@plt+0x1e8b8>
   30804:	ldm	r3, {r0, r1}
   30808:	str	r0, [r8, #2808]	; 0xaf8
   3080c:	strh	r1, [r5, #12]
   30810:	b	305dc <__assert_fail@plt+0x1f3d0>
   30814:	mov	r2, #5
   30818:	ldr	r1, [pc, #-3432]	; 2fab8 <__assert_fail@plt+0x1e8ac>
   3081c:	mov	r0, #0
   30820:	bl	10f90 <dcgettext@plt>
   30824:	ldr	r5, [pc, #-3432]	; 2fac4 <__assert_fail@plt+0x1e8b8>
   30828:	mov	r1, r0
   3082c:	add	r0, r5, #8
   30830:	bl	10fd8 <strcat@plt>
   30834:	b	305dc <__assert_fail@plt+0x1f3d0>
   30838:	cmp	r3, #93	; 0x5d
   3083c:	beq	3085c <__assert_fail@plt+0x1f650>
   30840:	ldr	r3, [pc, #-3468]	; 2fabc <__assert_fail@plt+0x1e8b0>
   30844:	ldr	r5, [pc, #-3464]	; 2fac4 <__assert_fail@plt+0x1e8b8>
   30848:	ldm	r3, {r0, r1, r2, r3}
   3084c:	add	ip, r5, #8
   30850:	stmia	ip!, {r0, r1, r2}
   30854:	strh	r3, [ip]
   30858:	b	2d87c <__assert_fail@plt+0x1c670>
   3085c:	ldr	lr, [pc, #-3492]	; 2fac0 <__assert_fail@plt+0x1e8b4>
   30860:	ldr	r5, [pc, #-3492]	; 2fac4 <__assert_fail@plt+0x1e8b8>
   30864:	ldm	lr!, {r0, r1, r2, r3}
   30868:	add	ip, r5, #8
   3086c:	ldr	lr, [lr]
   30870:	stmia	ip!, {r0, r1, r2, r3}
   30874:	str	lr, [ip]
   30878:	b	2d87c <__assert_fail@plt+0x1c670>
   3087c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30880:	sub	sp, sp, #76	; 0x4c
   30884:	ldr	r3, [sp, #120]	; 0x78
   30888:	ldr	r4, [sp, #112]	; 0x70
   3088c:	cmp	r3, #0
   30890:	movne	r3, #0
   30894:	ldrne	ip, [sp, #120]	; 0x78
   30898:	strne	r3, [ip]
   3089c:	ldrne	ip, [sp, #124]	; 0x7c
   308a0:	strne	r3, [ip]
   308a4:	ldrh	r3, [r0, #64]	; 0x40
   308a8:	cmp	r3, #1
   308ac:	bne	30aa4 <__assert_fail@plt+0x1f898>
   308b0:	ldr	lr, [r0, #84]	; 0x54
   308b4:	ldr	r8, [r0, #96]	; 0x60
   308b8:	add	ip, lr, lr, lsl #3
   308bc:	add	ip, r8, ip, lsl #3
   308c0:	cmp	r8, ip
   308c4:	bcs	30aa4 <__assert_fail@plt+0x1f898>
   308c8:	mov	fp, r8
   308cc:	b	308dc <__assert_fail@plt+0x1f6d0>
   308d0:	add	fp, fp, #72	; 0x48
   308d4:	cmp	fp, ip
   308d8:	bcs	30aa4 <__assert_fail@plt+0x1f898>
   308dc:	ldr	r5, [fp, #4]
   308e0:	cmp	r5, #4
   308e4:	cmpne	r5, #9
   308e8:	movne	sl, #1
   308ec:	moveq	sl, #0
   308f0:	bne	308d0 <__assert_fail@plt+0x1f6c4>
   308f4:	ldr	r3, [fp, #44]	; 0x2c
   308f8:	cmp	r3, lr
   308fc:	add	r3, r3, r3, lsl #3
   30900:	bcs	308d0 <__assert_fail@plt+0x1f6c4>
   30904:	add	r3, r8, r3, lsl #3
   30908:	cmp	r1, r3
   3090c:	bne	308d0 <__assert_fail@plt+0x1f6c4>
   30910:	ldrd	r6, [fp, #32]
   30914:	orrs	r3, r6, r7
   30918:	beq	308d0 <__assert_fail@plt+0x1f6c4>
   3091c:	ldr	r3, [fp, #40]	; 0x28
   30920:	cmp	r3, lr
   30924:	bcs	308d0 <__assert_fail@plt+0x1f6c4>
   30928:	add	r3, sp, #60	; 0x3c
   3092c:	cmp	r5, #4
   30930:	str	r2, [sp, #16]
   30934:	str	r1, [sp, #40]	; 0x28
   30938:	mov	r9, r0
   3093c:	ldr	r1, [fp, #24]
   30940:	mov	r2, r6
   30944:	str	r3, [sp]
   30948:	add	r3, sp, #64	; 0x40
   3094c:	beq	30ab8 <__assert_fail@plt+0x1f8ac>
   30950:	bl	17498 <__assert_fail@plt+0x628c>
   30954:	cmp	r0, #0
   30958:	beq	30ac4 <__assert_fail@plt+0x1f8b8>
   3095c:	ldrh	r3, [r9, #66]	; 0x42
   30960:	cmp	r3, #42	; 0x2a
   30964:	subne	sl, r5, #4
   30968:	clzne	sl, sl
   3096c:	lsrne	sl, sl, #5
   30970:	ldr	r3, [fp, #40]	; 0x28
   30974:	ldr	r1, [r9, #96]	; 0x60
   30978:	add	r3, r3, r3, lsl #3
   3097c:	add	r1, r1, r3, lsl #3
   30980:	ldr	r3, [r1, #4]
   30984:	cmp	r3, #2
   30988:	cmpne	r3, #11
   3098c:	bne	30ac4 <__assert_fail@plt+0x1f8b8>
   30990:	ldr	r7, [pc, #4076]	; 31984 <__assert_fail@plt+0x20778>
   30994:	add	r2, sp, #68	; 0x44
   30998:	mov	r0, r9
   3099c:	ldr	r3, [r7]
   309a0:	cmp	r3, #0
   309a4:	beq	31a90 <__assert_fail@plt+0x20884>
   309a8:	bl	1772c <__assert_fail@plt+0x6520>
   309ac:	str	r0, [sp, #36]	; 0x24
   309b0:	ldr	r3, [sp, #60]	; 0x3c
   309b4:	ldr	r8, [sp, #64]	; 0x40
   309b8:	add	r3, r3, r3, lsl #1
   309bc:	add	r3, r8, r3, lsl #3
   309c0:	cmp	r8, r3
   309c4:	bcs	31d4c <__assert_fail@plt+0x20b40>
   309c8:	ldr	r3, [sp, #16]
   309cc:	mov	r6, r9
   309d0:	add	r3, r3, r4
   309d4:	str	r3, [sp, #28]
   309d8:	add	r3, r9, #66	; 0x42
   309dc:	str	r3, [sp, #20]
   309e0:	mov	r3, #1
   309e4:	str	r3, [sp, #12]
   309e8:	strd	sl, [sp, #48]	; 0x30
   309ec:	ldr	r3, [r7]
   309f0:	ldr	r2, [r8, #8]
   309f4:	cmp	r3, #0
   309f8:	ldr	r3, [r8, #12]
   309fc:	lsrne	r4, r2, #8
   30a00:	ldr	r1, [sp, #68]	; 0x44
   30a04:	orrne	r4, r4, r3, lsl #24
   30a08:	uxtbne	fp, r2
   30a0c:	bne	30a20 <__assert_fail@plt+0x1f814>
   30a10:	ldr	r0, [sp, #20]
   30a14:	mov	r4, r3
   30a18:	bl	16910 <__assert_fail@plt+0x5704>
   30a1c:	mov	fp, r0
   30a20:	ldrh	r2, [r6, #66]	; 0x42
   30a24:	cmp	r2, #197	; 0xc5
   30a28:	beq	3163c <__assert_fail@plt+0x20430>
   30a2c:	bhi	30d58 <__assert_fail@plt+0x1fb4c>
   30a30:	cmp	r2, #89	; 0x59
   30a34:	beq	30d70 <__assert_fail@plt+0x1fb64>
   30a38:	cmp	r2, #105	; 0x69
   30a3c:	bne	30b98 <__assert_fail@plt+0x1f98c>
   30a40:	sub	r3, fp, #1
   30a44:	cmp	r3, #20
   30a48:	ldrls	pc, [pc, r3, lsl #2]
   30a4c:	b	31bc8 <__assert_fail@plt+0x209bc>
   30a50:	andeq	r0, r3, ip, lsl #23
   30a54:	andeq	r1, r3, r4, asr fp
   30a58:	andeq	r0, r3, ip, lsl #23
   30a5c:	andeq	r1, r3, r8, asr #23
   30a60:	muleq	r3, ip, sl
   30a64:	andeq	r1, r3, r8, asr #23
   30a68:	andeq	r1, r3, r8, asr #23
   30a6c:	andeq	r1, r3, r8, asr #23
   30a70:	muleq	r3, ip, sl
   30a74:	ldrdeq	r0, [r3], -r8
   30a78:	andeq	r1, r3, r8, asr #23
   30a7c:	andeq	r1, r3, r8, asr #23
   30a80:	andeq	r1, r3, r8, asr #23
   30a84:	andeq	r1, r3, r8, asr #23
   30a88:	andeq	r1, r3, r4, asr fp
   30a8c:	andeq	r1, r3, r8, asr #23
   30a90:	andeq	r1, r3, r8, asr #23
   30a94:	andeq	r1, r3, r8, asr #23
   30a98:	andeq	r1, r3, r8, asr #23
   30a9c:	andeq	r1, r3, r8, asr #23
   30aa0:	strdeq	r0, [r3], -r8
   30aa4:	mov	r3, #1
   30aa8:	str	r3, [sp, #12]
   30aac:	ldr	r0, [sp, #12]
   30ab0:	add	sp, sp, #76	; 0x4c
   30ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ab8:	bl	18904 <__assert_fail@plt+0x76f8>
   30abc:	cmp	r0, #0
   30ac0:	bne	3095c <__assert_fail@plt+0x1f750>
   30ac4:	mov	r3, #0
   30ac8:	str	r3, [sp, #12]
   30acc:	ldr	r0, [sp, #12]
   30ad0:	add	sp, sp, #76	; 0x4c
   30ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30ad8:	cmp	r2, #105	; 0x69
   30adc:	bne	30af8 <__assert_fail@plt+0x1f8ec>
   30ae0:	ldrb	r3, [r6, #60]	; 0x3c
   30ae4:	cmp	r3, #45	; 0x2d
   30ae8:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   30aec:	ldrb	r3, [r6, #23]
   30af0:	cmp	r3, #0
   30af4:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   30af8:	cmp	r4, r1
   30afc:	bcs	31bac <__assert_fail@plt+0x209a0>
   30b00:	ldr	r3, [sp, #36]	; 0x24
   30b04:	add	r4, r3, r4, lsl #5
   30b08:	str	r4, [r7, #3832]	; 0xef8
   30b0c:	ldr	r3, [sp, #60]	; 0x3c
   30b10:	ldr	r2, [sp, #64]	; 0x40
   30b14:	add	r8, r8, #24
   30b18:	add	r3, r3, r3, lsl #1
   30b1c:	add	r3, r2, r3, lsl #3
   30b20:	cmp	r8, r3
   30b24:	bcc	309ec <__assert_fail@plt+0x1f7e0>
   30b28:	mov	r9, r6
   30b2c:	ldr	r0, [sp, #36]	; 0x24
   30b30:	bl	10f54 <free@plt>
   30b34:	ldrh	r3, [r9, #66]	; 0x42
   30b38:	cmp	r3, #197	; 0xc5
   30b3c:	beq	31cd4 <__assert_fail@plt+0x20ac8>
   30b40:	bhi	31750 <__assert_fail@plt+0x20544>
   30b44:	cmp	r3, #89	; 0x59
   30b48:	beq	31768 <__assert_fail@plt+0x2055c>
   30b4c:	cmp	r3, #105	; 0x69
   30b50:	bne	30b5c <__assert_fail@plt+0x1f950>
   30b54:	mov	r3, #0
   30b58:	str	r3, [r7, #3832]	; 0xef8
   30b5c:	ldr	r3, [sp, #120]	; 0x78
   30b60:	ldr	r0, [sp, #64]	; 0x40
   30b64:	cmp	r3, #0
   30b68:	beq	31cec <__assert_fail@plt+0x20ae0>
   30b6c:	ldr	r2, [sp, #120]	; 0x78
   30b70:	ldr	r3, [sp, #60]	; 0x3c
   30b74:	str	r0, [r2]
   30b78:	ldr	r2, [sp, #124]	; 0x7c
   30b7c:	ldr	r0, [sp, #12]
   30b80:	str	r3, [r2]
   30b84:	add	sp, sp, #76	; 0x4c
   30b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30b8c:	ldr	r3, [r7, #3832]	; 0xef8
   30b90:	cmp	r3, #0
   30b94:	bne	31ac8 <__assert_fail@plt+0x208bc>
   30b98:	cmp	r2, #116	; 0x74
   30b9c:	beq	31000 <__assert_fail@plt+0x1fdf4>
   30ba0:	bls	30f68 <__assert_fail@plt+0x1fd5c>
   30ba4:	cmp	r2, #223	; 0xdf
   30ba8:	bhi	30ee0 <__assert_fail@plt+0x1fcd4>
   30bac:	cmp	r2, #222	; 0xde
   30bb0:	bcs	31000 <__assert_fail@plt+0x1fdf4>
   30bb4:	cmp	r2, #181	; 0xb5
   30bb8:	bhi	31034 <__assert_fail@plt+0x1fe28>
   30bbc:	cmp	r2, #180	; 0xb4
   30bc0:	bcs	31000 <__assert_fail@plt+0x1fdf4>
   30bc4:	cmp	r2, #144	; 0x90
   30bc8:	beq	31774 <__assert_fail@plt+0x20568>
   30bcc:	bls	31020 <__assert_fail@plt+0x1fe14>
   30bd0:	cmp	r2, #167	; 0xa7
   30bd4:	bne	3100c <__assert_fail@plt+0x1fe00>
   30bd8:	sub	r3, fp, #204	; 0xcc
   30bdc:	cmp	fp, #0
   30be0:	cmpne	r3, #3
   30be4:	bls	30b0c <__assert_fail@plt+0x1f900>
   30be8:	sub	r3, fp, #20
   30bec:	clz	r3, r3
   30bf0:	lsr	r3, r3, #5
   30bf4:	cmp	r3, #0
   30bf8:	bne	311c4 <__assert_fail@plt+0x1ffb8>
   30bfc:	ldrh	r2, [r6, #66]	; 0x42
   30c00:	mov	r1, fp
   30c04:	mov	r0, r2
   30c08:	bl	16930 <__assert_fail@plt+0x5724>
   30c0c:	cmp	r0, #0
   30c10:	bne	311c4 <__assert_fail@plt+0x1ffb8>
   30c14:	cmp	r2, #50	; 0x32
   30c18:	beq	32128 <__assert_fail@plt+0x20f1c>
   30c1c:	bls	30fa4 <__assert_fail@plt+0x1fd98>
   30c20:	cmp	r2, #183	; 0xb7
   30c24:	beq	320f0 <__assert_fail@plt+0x20ee4>
   30c28:	bls	31888 <__assert_fail@plt+0x2067c>
   30c2c:	cmp	r2, #243	; 0xf3
   30c30:	beq	30c44 <__assert_fail@plt+0x1fa38>
   30c34:	bls	31870 <__assert_fail@plt+0x20664>
   30c38:	ldr	r3, [pc, #3400]	; 31988 <__assert_fail@plt+0x2077c>
   30c3c:	cmp	r2, r3
   30c40:	bne	318a4 <__assert_fail@plt+0x20698>
   30c44:	sub	r3, fp, #2
   30c48:	clz	r3, r3
   30c4c:	lsr	r3, r3, #5
   30c50:	cmp	r3, #0
   30c54:	beq	3179c <__assert_fail@plt+0x20590>
   30c58:	mov	r3, #0
   30c5c:	mov	r0, r3
   30c60:	mov	r9, #8
   30c64:	ldr	r2, [sp, #16]
   30c68:	ldr	r4, [r8]
   30c6c:	ldr	ip, [sp, #28]
   30c70:	add	r4, r2, r4
   30c74:	cmp	r2, r4
   30c78:	movls	r2, #0
   30c7c:	movhi	r2, #1
   30c80:	add	r1, r4, r9
   30c84:	cmp	ip, r1
   30c88:	orrcc	r2, r2, #1
   30c8c:	cmp	r2, #0
   30c90:	bne	3170c <__assert_fail@plt+0x20500>
   30c94:	ldr	r2, [r7]
   30c98:	ldr	r5, [r8, #8]
   30c9c:	cmp	r2, #0
   30ca0:	ldr	r2, [r8, #12]
   30ca4:	lsrne	r5, r5, #8
   30ca8:	moveq	r5, r2
   30cac:	orrne	r5, r5, r2, lsl #24
   30cb0:	ldr	r2, [sp, #68]	; 0x44
   30cb4:	cmp	r2, r5
   30cb8:	bls	31cb0 <__assert_fail@plt+0x20aa4>
   30cbc:	ldr	r2, [sp, #36]	; 0x24
   30cc0:	add	r5, r2, r5, lsl #5
   30cc4:	cmp	r2, r5
   30cc8:	beq	30ce4 <__assert_fail@plt+0x1fad8>
   30ccc:	ldrb	r2, [r5, #20]
   30cd0:	and	r1, r2, #15
   30cd4:	cmp	r1, #5
   30cd8:	beq	30ce4 <__assert_fail@plt+0x1fad8>
   30cdc:	tst	r2, #12
   30ce0:	bne	31f7c <__assert_fail@plt+0x20d70>
   30ce4:	ldr	r2, [sp, #48]	; 0x30
   30ce8:	ldrh	sl, [r6, #66]	; 0x42
   30cec:	cmp	r2, #0
   30cf0:	beq	318c0 <__assert_fail@plt+0x206b4>
   30cf4:	ldr	r2, [r8, #16]
   30cf8:	cmp	sl, #94	; 0x5e
   30cfc:	str	r2, [sp, #24]
   30d00:	ldr	r2, [r8, #20]
   30d04:	str	r2, [sp, #32]
   30d08:	beq	31b78 <__assert_fail@plt+0x2096c>
   30d0c:	sub	r2, sl, #91	; 0x5b
   30d10:	bic	r2, r2, #8
   30d14:	uxth	r2, r2
   30d18:	cmp	r2, #0
   30d1c:	cmpeq	fp, #1
   30d20:	beq	31cc8 <__assert_fail@plt+0x20abc>
   30d24:	ldr	r2, [pc, #3168]	; 3198c <__assert_fail@plt+0x20780>
   30d28:	cmp	sl, r2
   30d2c:	cmpne	sl, #86	; 0x56
   30d30:	moveq	r2, #1
   30d34:	movne	r2, #0
   30d38:	cmp	fp, #12
   30d3c:	movne	r2, #0
   30d40:	andeq	r2, r2, #1
   30d44:	cmp	r2, #0
   30d48:	bne	31cc8 <__assert_fail@plt+0x20abc>
   30d4c:	cmp	r0, #0
   30d50:	beq	31910 <__assert_fail@plt+0x20704>
   30d54:	b	318cc <__assert_fail@plt+0x206c0>
   30d58:	ldr	r3, [pc, #3120]	; 31990 <__assert_fail@plt+0x20784>
   30d5c:	cmp	r2, r3
   30d60:	beq	30a40 <__assert_fail@plt+0x1f834>
   30d64:	ldr	r3, [pc, #3228]	; 31a08 <__assert_fail@plt+0x207fc>
   30d68:	cmp	r2, r3
   30d6c:	bne	30b98 <__assert_fail@plt+0x1f98c>
   30d70:	sub	r3, fp, #1
   30d74:	cmp	r3, #33	; 0x21
   30d78:	ldrls	pc, [pc, r3, lsl #2]
   30d7c:	b	30eb8 <__assert_fail@plt+0x1fcac>
   30d80:	andeq	r0, r3, r0, lsr #28
   30d84:	andeq	r0, r3, r0, lsr #28
   30d88:			; <UNDEFINED> instruction: 0x00030eb8
   30d8c:			; <UNDEFINED> instruction: 0x00030eb8
   30d90:			; <UNDEFINED> instruction: 0x00030eb8
   30d94:			; <UNDEFINED> instruction: 0x00030eb8
   30d98:			; <UNDEFINED> instruction: 0x00030eb8
   30d9c:			; <UNDEFINED> instruction: 0x00030eb8
   30da0:			; <UNDEFINED> instruction: 0x00030eb8
   30da4:			; <UNDEFINED> instruction: 0x00030eb8
   30da8:			; <UNDEFINED> instruction: 0x00030eb8
   30dac:			; <UNDEFINED> instruction: 0x00030eb8
   30db0:			; <UNDEFINED> instruction: 0x00030eb8
   30db4:			; <UNDEFINED> instruction: 0x00030eb8
   30db8:			; <UNDEFINED> instruction: 0x00030eb8
   30dbc:			; <UNDEFINED> instruction: 0x00030eb8
   30dc0:			; <UNDEFINED> instruction: 0x00030eb8
   30dc4:			; <UNDEFINED> instruction: 0x00030eb8
   30dc8:			; <UNDEFINED> instruction: 0x00030eb8
   30dcc:			; <UNDEFINED> instruction: 0x00030eb8
   30dd0:			; <UNDEFINED> instruction: 0x00030eb8
   30dd4:			; <UNDEFINED> instruction: 0x00030eb8
   30dd8:			; <UNDEFINED> instruction: 0x00030eb8
   30ddc:			; <UNDEFINED> instruction: 0x00030eb8
   30de0:			; <UNDEFINED> instruction: 0x00030eb8
   30de4:			; <UNDEFINED> instruction: 0x00030eb8
   30de8:			; <UNDEFINED> instruction: 0x00030eb8
   30dec:			; <UNDEFINED> instruction: 0x00030eb8
   30df0:			; <UNDEFINED> instruction: 0x00030eb8
   30df4:			; <UNDEFINED> instruction: 0x00030eb8
   30df8:			; <UNDEFINED> instruction: 0x00030eb8
   30dfc:			; <UNDEFINED> instruction: 0x00030eb8
   30e00:	andeq	r0, r3, r8, lsl #28
   30e04:	andeq	r0, r3, ip, lsl #22
   30e08:	cmp	r4, r1
   30e0c:	bcs	31bf0 <__assert_fail@plt+0x209e4>
   30e10:	ldr	r3, [sp, #36]	; 0x24
   30e14:	add	r4, r3, r4, lsl #5
   30e18:	str	r4, [r7, #3836]	; 0xefc
   30e1c:	b	30b0c <__assert_fail@plt+0x1f900>
   30e20:	ldr	r3, [r7, #3836]	; 0xefc
   30e24:	cmp	r3, #0
   30e28:	beq	30b98 <__assert_fail@plt+0x1f98c>
   30e2c:	cmp	fp, #1
   30e30:	moveq	ip, #4
   30e34:	movne	ip, #2
   30e38:	cmp	r4, r1
   30e3c:	bcs	320a0 <__assert_fail@plt+0x20e94>
   30e40:	ldr	r0, [r8]
   30e44:	cmp	r0, #0
   30e48:	blt	32010 <__assert_fail@plt+0x20e04>
   30e4c:	ldr	r9, [sp, #16]
   30e50:	add	r2, ip, r0
   30e54:	ldr	r1, [sp, #28]
   30e58:	add	r2, r9, r2
   30e5c:	cmp	r1, r2
   30e60:	bls	32010 <__assert_fail@plt+0x20e04>
   30e64:	ldr	lr, [sp, #36]	; 0x24
   30e68:	lsl	r4, r4, #5
   30e6c:	ldr	r2, [r3]
   30e70:	add	r1, lr, r4
   30e74:	ldr	r5, [r8, #16]
   30e78:	ldr	lr, [lr, r4]
   30e7c:	ldr	r3, [r3, #4]
   30e80:	ldr	r4, [r8, #20]
   30e84:	ldr	r1, [r1, #4]
   30e88:	subs	r2, r5, r2
   30e8c:	sbc	r3, r4, r3
   30e90:	adds	r2, r2, lr
   30e94:	adc	r3, r3, r1
   30e98:	ldr	r1, [pc, #2956]	; 31a2c <__assert_fail@plt+0x20820>
   30e9c:	str	ip, [sp]
   30ea0:	add	r0, r9, r0
   30ea4:	ldr	r1, [r1]
   30ea8:	blx	r1
   30eac:	mov	r3, #0
   30eb0:	str	r3, [r7, #3836]	; 0xefc
   30eb4:	b	30b0c <__assert_fail@plt+0x1f900>
   30eb8:	ldr	r3, [r7, #3836]	; 0xefc
   30ebc:	cmp	r3, #0
   30ec0:	beq	30b98 <__assert_fail@plt+0x1f98c>
   30ec4:	mov	r2, #5
   30ec8:	ldr	r1, [pc, #2756]	; 31994 <__assert_fail@plt+0x20788>
   30ecc:	mov	r0, #0
   30ed0:	bl	10f90 <dcgettext@plt>
   30ed4:	bl	548ac <error@@Base>
   30ed8:	ldrh	r2, [r6, #66]	; 0x42
   30edc:	b	30b98 <__assert_fail@plt+0x1f98c>
   30ee0:	ldr	r3, [pc, #2852]	; 31a0c <__assert_fail@plt+0x20800>
   30ee4:	cmp	r2, r3
   30ee8:	beq	31000 <__assert_fail@plt+0x1fdf4>
   30eec:	bhi	310cc <__assert_fail@plt+0x1fec0>
   30ef0:	ldr	r3, [pc, #2848]	; 31a18 <__assert_fail@plt+0x2080c>
   30ef4:	cmp	r2, r3
   30ef8:	bne	310ac <__assert_fail@plt+0x1fea0>
   30efc:	cmp	fp, #30
   30f00:	cmpne	fp, #0
   30f04:	beq	30b0c <__assert_fail@plt+0x1f900>
   30f08:	sub	r3, fp, #31
   30f0c:	cmp	r3, #1
   30f10:	bls	30b0c <__assert_fail@plt+0x1f900>
   30f14:	cmp	r2, #114	; 0x72
   30f18:	beq	31c0c <__assert_fail@plt+0x20a00>
   30f1c:	bhi	31274 <__assert_fail@plt+0x20068>
   30f20:	cmp	r2, #50	; 0x32
   30f24:	beq	32104 <__assert_fail@plt+0x20ef8>
   30f28:	bhi	31184 <__assert_fail@plt+0x1ff78>
   30f2c:	cmp	r2, #20
   30f30:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   30f34:	bls	315a4 <__assert_fail@plt+0x20398>
   30f38:	cmp	r2, #40	; 0x28
   30f3c:	beq	3143c <__assert_fail@plt+0x20230>
   30f40:	bhi	31574 <__assert_fail@plt+0x20368>
   30f44:	cmp	r2, #23
   30f48:	beq	311f4 <__assert_fail@plt+0x1ffe8>
   30f4c:	bls	31560 <__assert_fail@plt+0x20354>
   30f50:	cmp	r2, #36	; 0x24
   30f54:	bne	31554 <__assert_fail@plt+0x20348>
   30f58:	sub	r3, fp, #51	; 0x33
   30f5c:	clz	r3, r3
   30f60:	lsr	r3, r3, #5
   30f64:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   30f68:	cmp	r2, #45	; 0x2d
   30f6c:	beq	31000 <__assert_fail@plt+0x1fdf4>
   30f70:	bls	31068 <__assert_fail@plt+0x1fe5c>
   30f74:	cmp	r2, #89	; 0x59
   30f78:	bhi	31160 <__assert_fail@plt+0x1ff54>
   30f7c:	cmp	r2, #88	; 0x58
   30f80:	bcs	31000 <__assert_fail@plt+0x1fdf4>
   30f84:	cmp	r2, #62	; 0x3e
   30f88:	beq	31000 <__assert_fail@plt+0x1fdf4>
   30f8c:	bls	30ff8 <__assert_fail@plt+0x1fdec>
   30f90:	cmp	r2, #76	; 0x4c
   30f94:	beq	31000 <__assert_fail@plt+0x1fdf4>
   30f98:	cmp	r2, #83	; 0x53
   30f9c:	beq	30efc <__assert_fail@plt+0x1fcf0>
   30fa0:	b	30f14 <__assert_fail@plt+0x1fd08>
   30fa4:	cmp	r2, #18
   30fa8:	beq	320dc <__assert_fail@plt+0x20ed0>
   30fac:	bhi	30fd0 <__assert_fail@plt+0x1fdc4>
   30fb0:	cmp	r2, #8
   30fb4:	beq	3213c <__assert_fail@plt+0x20f30>
   30fb8:	cmp	r2, #15
   30fbc:	bne	31794 <__assert_fail@plt+0x20588>
   30fc0:	sub	r3, fp, #80	; 0x50
   30fc4:	clz	r3, r3
   30fc8:	lsr	r3, r3, #5
   30fcc:	b	30c50 <__assert_fail@plt+0x1fa44>
   30fd0:	cmp	r2, #22
   30fd4:	beq	318b0 <__assert_fail@plt+0x206a4>
   30fd8:	cmp	r2, #43	; 0x2b
   30fdc:	beq	320dc <__assert_fail@plt+0x20ed0>
   30fe0:	cmp	r2, #21
   30fe4:	bne	3179c <__assert_fail@plt+0x20590>
   30fe8:	sub	r3, fp, #38	; 0x26
   30fec:	clz	r3, r3
   30ff0:	lsr	r3, r3, #5
   30ff4:	b	30c50 <__assert_fail@plt+0x1fa44>
   30ff8:	cmp	r2, #50	; 0x32
   30ffc:	bne	30f14 <__assert_fail@plt+0x1fd08>
   31000:	cmp	fp, #0
   31004:	bne	30f14 <__assert_fail@plt+0x1fd08>
   31008:	b	30b0c <__assert_fail@plt+0x1f900>
   3100c:	cmp	r2, #174	; 0xae
   31010:	bne	30f14 <__assert_fail@plt+0x1fd08>
   31014:	cmp	fp, #3
   31018:	beq	30b0c <__assert_fail@plt+0x1f900>
   3101c:	b	3143c <__assert_fail@plt+0x20230>
   31020:	cmp	r2, #140	; 0x8c
   31024:	beq	31000 <__assert_fail@plt+0x1fdf4>
   31028:	cmp	r2, #114	; 0x72
   3102c:	bne	30f1c <__assert_fail@plt+0x1fd10>
   31030:	b	31c0c <__assert_fail@plt+0x20a00>
   31034:	cmp	r2, #188	; 0xbc
   31038:	beq	31000 <__assert_fail@plt+0x1fdf4>
   3103c:	bhi	31098 <__assert_fail@plt+0x1fe8c>
   31040:	cmp	r2, #183	; 0xb7
   31044:	bne	30f14 <__assert_fail@plt+0x1fd08>
   31048:	bics	r3, fp, #256	; 0x100
   3104c:	beq	30b0c <__assert_fail@plt+0x1f900>
   31050:	ldr	r3, [pc, #2368]	; 31998 <__assert_fail@plt+0x2078c>
   31054:	cmp	fp, #1
   31058:	cmpne	fp, r3
   3105c:	moveq	r3, #1
   31060:	movne	r3, #0
   31064:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   31068:	cmp	r2, #18
   3106c:	beq	31000 <__assert_fail@plt+0x1fdf4>
   31070:	bhi	31108 <__assert_fail@plt+0x1fefc>
   31074:	cmp	r2, #8
   31078:	beq	31000 <__assert_fail@plt+0x1fdf4>
   3107c:	bhi	310fc <__assert_fail@plt+0x1fef0>
   31080:	sub	r3, r2, #2
   31084:	cmp	r3, #2
   31088:	bls	31000 <__assert_fail@plt+0x1fdf4>
   3108c:	cmp	r2, #114	; 0x72
   31090:	bne	30f1c <__assert_fail@plt+0x1fd10>
   31094:	b	31c0c <__assert_fail@plt+0x20a00>
   31098:	cmp	r2, #191	; 0xbf
   3109c:	beq	31000 <__assert_fail@plt+0x1fdf4>
   310a0:	cmp	r2, #195	; 0xc3
   310a4:	beq	31000 <__assert_fail@plt+0x1fdf4>
   310a8:	b	30f14 <__assert_fail@plt+0x1fd08>
   310ac:	bls	31124 <__assert_fail@plt+0x1ff18>
   310b0:	ldr	r3, [pc, #2396]	; 31a14 <__assert_fail@plt+0x20808>
   310b4:	cmp	r2, r3
   310b8:	beq	31000 <__assert_fail@plt+0x1fdf4>
   310bc:	ldr	r3, [pc, #2264]	; 3199c <__assert_fail@plt+0x20790>
   310c0:	cmp	r2, r3
   310c4:	beq	31000 <__assert_fail@plt+0x1fdf4>
   310c8:	b	30f14 <__assert_fail@plt+0x1fd08>
   310cc:	ldr	r3, [pc, #2252]	; 319a0 <__assert_fail@plt+0x20794>
   310d0:	cmp	r2, r3
   310d4:	beq	31000 <__assert_fail@plt+0x1fdf4>
   310d8:	bls	31140 <__assert_fail@plt+0x1ff34>
   310dc:	ldr	r3, [pc, #2240]	; 319a4 <__assert_fail@plt+0x20798>
   310e0:	cmp	r2, r3
   310e4:	bne	31130 <__assert_fail@plt+0x1ff24>
   310e8:	sub	r3, fp, #17
   310ec:	cmp	fp, #0
   310f0:	cmpne	r3, #2
   310f4:	bls	30b0c <__assert_fail@plt+0x1f900>
   310f8:	b	30f14 <__assert_fail@plt+0x1fd08>
   310fc:	cmp	r2, #15
   31100:	beq	31000 <__assert_fail@plt+0x1fdf4>
   31104:	b	30f14 <__assert_fail@plt+0x1fd08>
   31108:	cmp	r2, #40	; 0x28
   3110c:	beq	31000 <__assert_fail@plt+0x1fdf4>
   31110:	bhi	31150 <__assert_fail@plt+0x1ff44>
   31114:	sub	r3, r2, #20
   31118:	cmp	r3, #2
   3111c:	bls	31000 <__assert_fail@plt+0x1fdf4>
   31120:	b	30f14 <__assert_fail@plt+0x1fd08>
   31124:	cmp	r2, #243	; 0xf3
   31128:	beq	31000 <__assert_fail@plt+0x1fdf4>
   3112c:	b	30f14 <__assert_fail@plt+0x1fd08>
   31130:	ldr	r3, [pc, #2160]	; 319a8 <__assert_fail@plt+0x2079c>
   31134:	cmp	r2, r3
   31138:	beq	31000 <__assert_fail@plt+0x1fdf4>
   3113c:	b	30f14 <__assert_fail@plt+0x1fd08>
   31140:	ldr	r3, [pc, #2112]	; 31988 <__assert_fail@plt+0x2077c>
   31144:	cmp	r2, r3
   31148:	beq	31000 <__assert_fail@plt+0x1fdf4>
   3114c:	b	30f14 <__assert_fail@plt+0x1fd08>
   31150:	sub	r3, r2, #42	; 0x2a
   31154:	cmp	r3, #1
   31158:	bls	31000 <__assert_fail@plt+0x1fdf4>
   3115c:	b	30f14 <__assert_fail@plt+0x1fd08>
   31160:	cmp	r2, #94	; 0x5e
   31164:	beq	310e8 <__assert_fail@plt+0x1fedc>
   31168:	bhi	31178 <__assert_fail@plt+0x1ff6c>
   3116c:	cmp	r2, #92	; 0x5c
   31170:	bcs	31000 <__assert_fail@plt+0x1fdf4>
   31174:	b	30f14 <__assert_fail@plt+0x1fd08>
   31178:	cmp	r2, #113	; 0x71
   3117c:	beq	31000 <__assert_fail@plt+0x1fdf4>
   31180:	b	30f14 <__assert_fail@plt+0x1fd08>
   31184:	cmp	r2, #88	; 0x58
   31188:	beq	3215c <__assert_fail@plt+0x20f50>
   3118c:	bhi	3123c <__assert_fail@plt+0x20030>
   31190:	cmp	r2, #80	; 0x50
   31194:	beq	31264 <__assert_fail@plt+0x20058>
   31198:	bhi	3121c <__assert_fail@plt+0x20010>
   3119c:	cmp	r2, #70	; 0x46
   311a0:	beq	311f4 <__assert_fail@plt+0x1ffe8>
   311a4:	bls	311ec <__assert_fail@plt+0x1ffe0>
   311a8:	cmp	r2, #75	; 0x4b
   311ac:	bne	311d4 <__assert_fail@plt+0x1ffc8>
   311b0:	sub	r3, fp, #1
   311b4:	clz	r3, r3
   311b8:	lsr	r3, r3, #5
   311bc:	cmp	r3, #0
   311c0:	beq	30bfc <__assert_fail@plt+0x1f9f0>
   311c4:	mov	r3, #0
   311c8:	mov	r0, r3
   311cc:	mov	r9, #4
   311d0:	b	30c64 <__assert_fail@plt+0x1fa58>
   311d4:	cmp	r2, #76	; 0x4c
   311d8:	bne	313b0 <__assert_fail@plt+0x201a4>
   311dc:	sub	r3, fp, #3
   311e0:	clz	r3, r3
   311e4:	lsr	r3, r3, #5
   311e8:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   311ec:	cmp	r2, #53	; 0x35
   311f0:	bne	31204 <__assert_fail@plt+0x1fff8>
   311f4:	sub	r3, fp, #6
   311f8:	clz	r3, r3
   311fc:	lsr	r3, r3, #5
   31200:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   31204:	cmp	r2, #62	; 0x3e
   31208:	bne	313b0 <__assert_fail@plt+0x201a4>
   3120c:	sub	r3, fp, #10
   31210:	clz	r3, r3
   31214:	lsr	r3, r3, #5
   31218:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   3121c:	cmp	r2, #85	; 0x55
   31220:	beq	311f4 <__assert_fail@plt+0x1ffe8>
   31224:	bhi	312c4 <__assert_fail@plt+0x200b8>
   31228:	cmp	r2, #83	; 0x53
   3122c:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31230:	cmp	r2, #84	; 0x54
   31234:	beq	311dc <__assert_fail@plt+0x1ffd0>
   31238:	b	313b0 <__assert_fail@plt+0x201a4>
   3123c:	cmp	r2, #94	; 0x5e
   31240:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31244:	bhi	31530 <__assert_fail@plt+0x20324>
   31248:	cmp	r2, #91	; 0x5b
   3124c:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31250:	bls	3151c <__assert_fail@plt+0x20310>
   31254:	cmp	r2, #92	; 0x5c
   31258:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3125c:	cmp	r2, #93	; 0x5d
   31260:	bne	313b0 <__assert_fail@plt+0x201a4>
   31264:	sub	r3, fp, #4
   31268:	clz	r3, r3
   3126c:	lsr	r3, r3, #5
   31270:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   31274:	ldr	r3, [pc, #1948]	; 31a18 <__assert_fail@plt+0x2080c>
   31278:	cmp	r2, r3
   3127c:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31280:	bhi	31354 <__assert_fail@plt+0x20148>
   31284:	cmp	r2, #181	; 0xb5
   31288:	bhi	31328 <__assert_fail@plt+0x2011c>
   3128c:	cmp	r2, #180	; 0xb4
   31290:	bcs	3120c <__assert_fail@plt+0x20000>
   31294:	cmp	r2, #140	; 0x8c
   31298:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3129c:	bhi	31308 <__assert_fail@plt+0x200fc>
   312a0:	cmp	r2, #120	; 0x78
   312a4:	beq	311dc <__assert_fail@plt+0x1ffd0>
   312a8:	bls	312f4 <__assert_fail@plt+0x200e8>
   312ac:	cmp	r2, #135	; 0x87
   312b0:	bne	312dc <__assert_fail@plt+0x200d0>
   312b4:	sub	r3, fp, #8
   312b8:	clz	r3, r3
   312bc:	lsr	r3, r3, #5
   312c0:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   312c4:	cmp	r2, #86	; 0x56
   312c8:	bne	312e8 <__assert_fail@plt+0x200dc>
   312cc:	sub	r3, fp, #12
   312d0:	clz	r3, r3
   312d4:	lsr	r3, r3, #5
   312d8:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   312dc:	cmp	r2, #138	; 0x8a
   312e0:	beq	311dc <__assert_fail@plt+0x1ffd0>
   312e4:	b	313b0 <__assert_fail@plt+0x201a4>
   312e8:	cmp	r2, #87	; 0x57
   312ec:	beq	311f4 <__assert_fail@plt+0x1ffe8>
   312f0:	b	313b0 <__assert_fail@plt+0x201a4>
   312f4:	cmp	r2, #115	; 0x73
   312f8:	beq	31264 <__assert_fail@plt+0x20058>
   312fc:	cmp	r2, #116	; 0x74
   31300:	beq	311dc <__assert_fail@plt+0x1ffd0>
   31304:	b	313b0 <__assert_fail@plt+0x201a4>
   31308:	cmp	r2, #173	; 0xad
   3130c:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31310:	bls	313a0 <__assert_fail@plt+0x20194>
   31314:	cmp	r2, #174	; 0xae
   31318:	beq	3143c <__assert_fail@plt+0x20230>
   3131c:	cmp	r2, #177	; 0xb1
   31320:	beq	311dc <__assert_fail@plt+0x1ffd0>
   31324:	b	313b0 <__assert_fail@plt+0x201a4>
   31328:	cmp	r2, #195	; 0xc3
   3132c:	beq	31264 <__assert_fail@plt+0x20058>
   31330:	bls	314d4 <__assert_fail@plt+0x202c8>
   31334:	cmp	r2, #222	; 0xde
   31338:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3133c:	bls	314c0 <__assert_fail@plt+0x202b4>
   31340:	cmp	r2, #223	; 0xdf
   31344:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31348:	cmp	r2, #243	; 0xf3
   3134c:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31350:	b	313b0 <__assert_fail@plt+0x201a4>
   31354:	ldr	r3, [pc, #1696]	; 319fc <__assert_fail@plt+0x207f0>
   31358:	cmp	r2, r3
   3135c:	beq	3143c <__assert_fail@plt+0x20230>
   31360:	bhi	31410 <__assert_fail@plt+0x20204>
   31364:	ldr	r3, [pc, #1696]	; 31a0c <__assert_fail@plt+0x20800>
   31368:	cmp	r2, r3
   3136c:	beq	311dc <__assert_fail@plt+0x1ffd0>
   31370:	bls	313e4 <__assert_fail@plt+0x201d8>
   31374:	ldr	r3, [pc, #1584]	; 319ac <__assert_fail@plt+0x207a0>
   31378:	cmp	r2, r3
   3137c:	beq	311dc <__assert_fail@plt+0x1ffd0>
   31380:	bhi	313c8 <__assert_fail@plt+0x201bc>
   31384:	ldr	r3, [pc, #1572]	; 319b0 <__assert_fail@plt+0x207a4>
   31388:	cmp	r2, r3
   3138c:	beq	311f4 <__assert_fail@plt+0x1ffe8>
   31390:	ldr	r3, [pc, #1564]	; 319b4 <__assert_fail@plt+0x207a8>
   31394:	cmp	r2, r3
   31398:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3139c:	b	313b0 <__assert_fail@plt+0x201a4>
   313a0:	cmp	r2, #144	; 0x90
   313a4:	beq	31784 <__assert_fail@plt+0x20578>
   313a8:	cmp	r2, #167	; 0xa7
   313ac:	beq	30be8 <__assert_fail@plt+0x1f9dc>
   313b0:	ldr	r3, [r7, #3864]	; 0xf18
   313b4:	cmp	r2, r3
   313b8:	bne	31c1c <__assert_fail@plt+0x20a10>
   313bc:	ldrh	r2, [r6, #66]	; 0x42
   313c0:	str	r2, [r7, #3864]	; 0xf18
   313c4:	b	30c00 <__assert_fail@plt+0x1f9f4>
   313c8:	ldr	r3, [pc, #1600]	; 31a10 <__assert_fail@plt+0x20804>
   313cc:	cmp	r2, r3
   313d0:	beq	311f4 <__assert_fail@plt+0x1ffe8>
   313d4:	add	r3, r3, #38	; 0x26
   313d8:	cmp	r2, r3
   313dc:	beq	312cc <__assert_fail@plt+0x200c0>
   313e0:	b	313b0 <__assert_fail@plt+0x201a4>
   313e4:	ldr	r3, [pc, #1484]	; 319b8 <__assert_fail@plt+0x207ac>
   313e8:	cmp	r2, r3
   313ec:	beq	3143c <__assert_fail@plt+0x20230>
   313f0:	bls	3144c <__assert_fail@plt+0x20240>
   313f4:	ldr	r3, [pc, #1472]	; 319bc <__assert_fail@plt+0x207b0>
   313f8:	cmp	r2, r3
   313fc:	beq	311dc <__assert_fail@plt+0x1ffd0>
   31400:	ldr	r3, [pc, #1428]	; 3199c <__assert_fail@plt+0x20790>
   31404:	cmp	r2, r3
   31408:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3140c:	b	313b0 <__assert_fail@plt+0x201a4>
   31410:	ldr	r3, [pc, #1520]	; 31a08 <__assert_fail@plt+0x207fc>
   31414:	cmp	r2, r3
   31418:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3141c:	bls	31494 <__assert_fail@plt+0x20288>
   31420:	ldr	r3, [pc, #1500]	; 31a04 <__assert_fail@plt+0x207f8>
   31424:	cmp	r2, r3
   31428:	beq	311dc <__assert_fail@plt+0x1ffd0>
   3142c:	bls	31478 <__assert_fail@plt+0x2026c>
   31430:	ldr	r3, [pc, #1416]	; 319c0 <__assert_fail@plt+0x207b4>
   31434:	cmp	r2, r3
   31438:	bne	31468 <__assert_fail@plt+0x2025c>
   3143c:	sub	r3, fp, #2
   31440:	clz	r3, r3
   31444:	lsr	r3, r3, #5
   31448:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   3144c:	ldr	r3, [pc, #1340]	; 31990 <__assert_fail@plt+0x20784>
   31450:	cmp	r2, r3
   31454:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31458:	ldr	r3, [pc, #1460]	; 31a14 <__assert_fail@plt+0x20808>
   3145c:	cmp	r2, r3
   31460:	beq	311dc <__assert_fail@plt+0x1ffd0>
   31464:	b	313b0 <__assert_fail@plt+0x201a4>
   31468:	add	r3, r3, #1
   3146c:	cmp	r2, r3
   31470:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31474:	b	313b0 <__assert_fail@plt+0x201a4>
   31478:	ldr	r3, [pc, #1408]	; 31a00 <__assert_fail@plt+0x207f4>
   3147c:	cmp	r2, r3
   31480:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31484:	ldr	r3, [pc, #1336]	; 319c4 <__assert_fail@plt+0x207b8>
   31488:	cmp	r2, r3
   3148c:	beq	31264 <__assert_fail@plt+0x20058>
   31490:	b	313b0 <__assert_fail@plt+0x201a4>
   31494:	ldr	r3, [pc, #1284]	; 319a0 <__assert_fail@plt+0x20794>
   31498:	cmp	r2, r3
   3149c:	beq	31264 <__assert_fail@plt+0x20058>
   314a0:	bhi	314f4 <__assert_fail@plt+0x202e8>
   314a4:	ldr	r3, [pc, #1244]	; 31988 <__assert_fail@plt+0x2077c>
   314a8:	cmp	r2, r3
   314ac:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   314b0:	add	r3, r3, #90	; 0x5a
   314b4:	cmp	r2, r3
   314b8:	beq	311f4 <__assert_fail@plt+0x1ffe8>
   314bc:	b	313b0 <__assert_fail@plt+0x201a4>
   314c0:	cmp	r2, #197	; 0xc5
   314c4:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   314c8:	cmp	r2, #221	; 0xdd
   314cc:	beq	311dc <__assert_fail@plt+0x1ffd0>
   314d0:	b	313b0 <__assert_fail@plt+0x201a4>
   314d4:	cmp	r2, #188	; 0xbc
   314d8:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   314dc:	bls	31510 <__assert_fail@plt+0x20304>
   314e0:	cmp	r2, #189	; 0xbd
   314e4:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   314e8:	cmp	r2, #191	; 0xbf
   314ec:	beq	3143c <__assert_fail@plt+0x20230>
   314f0:	b	313b0 <__assert_fail@plt+0x201a4>
   314f4:	ldr	r3, [pc, #1192]	; 319a4 <__assert_fail@plt+0x20798>
   314f8:	cmp	r2, r3
   314fc:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31500:	ldr	r3, [pc, #1216]	; 319c8 <__assert_fail@plt+0x207bc>
   31504:	cmp	r2, r3
   31508:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3150c:	b	313b0 <__assert_fail@plt+0x201a4>
   31510:	cmp	r2, #183	; 0xb7
   31514:	bne	313b0 <__assert_fail@plt+0x201a4>
   31518:	b	31050 <__assert_fail@plt+0x1fe44>
   3151c:	cmp	r2, #89	; 0x59
   31520:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31524:	cmp	r2, #90	; 0x5a
   31528:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3152c:	b	313b0 <__assert_fail@plt+0x201a4>
   31530:	cmp	r2, #105	; 0x69
   31534:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31538:	bls	3161c <__assert_fail@plt+0x20410>
   3153c:	cmp	r2, #106	; 0x6a
   31540:	bne	31610 <__assert_fail@plt+0x20404>
   31544:	sub	r3, fp, #18
   31548:	clz	r3, r3
   3154c:	lsr	r3, r3, #5
   31550:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   31554:	cmp	r2, #39	; 0x27
   31558:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3155c:	b	313b0 <__assert_fail@plt+0x201a4>
   31560:	cmp	r2, #21
   31564:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31568:	cmp	r2, #22
   3156c:	beq	31264 <__assert_fail@plt+0x20058>
   31570:	b	313b0 <__assert_fail@plt+0x201a4>
   31574:	cmp	r2, #45	; 0x2d
   31578:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3157c:	bhi	315d0 <__assert_fail@plt+0x203c4>
   31580:	cmp	r2, #42	; 0x2a
   31584:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31588:	cmp	r2, #43	; 0x2b
   3158c:	bne	313b0 <__assert_fail@plt+0x201a4>
   31590:	cmp	fp, #23
   31594:	cmpne	fp, #3
   31598:	moveq	r3, #1
   3159c:	movne	r3, #0
   315a0:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   315a4:	cmp	r2, #7
   315a8:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   315ac:	bls	315f0 <__assert_fail@plt+0x203e4>
   315b0:	cmp	r2, #15
   315b4:	beq	3216c <__assert_fail@plt+0x20f60>
   315b8:	bhi	315dc <__assert_fail@plt+0x203d0>
   315bc:	cmp	r2, #8
   315c0:	beq	3143c <__assert_fail@plt+0x20230>
   315c4:	cmp	r2, #9
   315c8:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   315cc:	b	313b0 <__assert_fail@plt+0x201a4>
   315d0:	cmp	r2, #48	; 0x30
   315d4:	bls	311b0 <__assert_fail@plt+0x1ffa4>
   315d8:	b	313b0 <__assert_fail@plt+0x201a4>
   315dc:	cmp	r2, #18
   315e0:	beq	31590 <__assert_fail@plt+0x20384>
   315e4:	cmp	r2, #19
   315e8:	beq	3143c <__assert_fail@plt+0x20230>
   315ec:	b	313b0 <__assert_fail@plt+0x201a4>
   315f0:	cmp	r2, #3
   315f4:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   315f8:	bls	31630 <__assert_fail@plt+0x20424>
   315fc:	cmp	r2, #4
   31600:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31604:	cmp	r2, #6
   31608:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   3160c:	b	313b0 <__assert_fail@plt+0x201a4>
   31610:	cmp	r2, #113	; 0x71
   31614:	beq	312cc <__assert_fail@plt+0x200c0>
   31618:	b	313b0 <__assert_fail@plt+0x201a4>
   3161c:	cmp	r2, #99	; 0x63
   31620:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31624:	cmp	r2, #101	; 0x65
   31628:	beq	3143c <__assert_fail@plt+0x20230>
   3162c:	b	313b0 <__assert_fail@plt+0x201a4>
   31630:	cmp	r2, #2
   31634:	beq	31590 <__assert_fail@plt+0x20384>
   31638:	b	313b0 <__assert_fail@plt+0x201a4>
   3163c:	cmp	fp, #67	; 0x43
   31640:	beq	31c38 <__assert_fail@plt+0x20a2c>
   31644:	bls	31690 <__assert_fail@plt+0x20484>
   31648:	cmp	fp, #128	; 0x80
   3164c:	beq	31c68 <__assert_fail@plt+0x20a5c>
   31650:	cmp	fp, #131	; 0x83
   31654:	bne	311b0 <__assert_fail@plt+0x1ffa4>
   31658:	ldr	r5, [pc, #912]	; 319f0 <__assert_fail@plt+0x207e4>
   3165c:	mov	r2, #0
   31660:	mov	r3, #0
   31664:	ldr	r0, [r5, #-8]
   31668:	ldr	r1, [r5, #-16]
   3166c:	subs	r1, r1, r0
   31670:	str	r1, [r5]
   31674:	ldr	r0, [r5, #-12]
   31678:	ldr	r1, [r5, #-4]
   3167c:	strd	r2, [r5, #-16]
   31680:	sbc	r1, r0, r1
   31684:	str	r1, [r5, #4]
   31688:	strd	r2, [r5, #-8]
   3168c:	b	30b0c <__assert_fail@plt+0x1f900>
   31690:	cmp	fp, #65	; 0x41
   31694:	bne	311b0 <__assert_fail@plt+0x1ffa4>
   31698:	ldr	r0, [r8]
   3169c:	cmp	r0, #0
   316a0:	blt	316e0 <__assert_fail@plt+0x204d4>
   316a4:	ldr	r2, [sp, #16]
   316a8:	add	r3, r0, #4
   316ac:	ldr	r1, [sp, #28]
   316b0:	add	r3, r2, r3
   316b4:	cmp	r1, r3
   316b8:	bls	316e0 <__assert_fail@plt+0x204d4>
   316bc:	ldr	r5, [pc, #812]	; 319f0 <__assert_fail@plt+0x207e4>
   316c0:	mov	r1, #4
   316c4:	add	r0, r2, r0
   316c8:	ldrd	r2, [r5]
   316cc:	str	r1, [sp]
   316d0:	ldr	r1, [pc, #852]	; 31a2c <__assert_fail@plt+0x20820>
   316d4:	ldr	r1, [r1]
   316d8:	blx	r1
   316dc:	b	316fc <__assert_fail@plt+0x204f0>
   316e0:	mov	r2, #5
   316e4:	ldr	r1, [pc, #736]	; 319cc <__assert_fail@plt+0x207c0>
   316e8:	mov	r0, #0
   316ec:	bl	10f90 <dcgettext@plt>
   316f0:	ldr	r1, [r8]
   316f4:	bl	548ac <error@@Base>
   316f8:	ldr	r5, [pc, #752]	; 319f0 <__assert_fail@plt+0x207e4>
   316fc:	mov	r2, #0
   31700:	mov	r3, #0
   31704:	strd	r2, [r5]
   31708:	b	30b0c <__assert_fail@plt+0x1f900>
   3170c:	mov	r2, #5
   31710:	ldr	r1, [pc, #696]	; 319d0 <__assert_fail@plt+0x207c4>
   31714:	mov	r0, #0
   31718:	bl	10f90 <dcgettext@plt>
   3171c:	ldr	r5, [r8]
   31720:	mov	r4, r0
   31724:	ldr	r2, [sp, #40]	; 0x28
   31728:	add	r1, r6, #108	; 0x6c
   3172c:	add	r0, r6, #104	; 0x68
   31730:	bl	16c64 <__assert_fail@plt+0x5a58>
   31734:	mov	r1, r5
   31738:	mov	r2, r0
   3173c:	mov	r0, r4
   31740:	bl	54dd0 <warn@@Base>
   31744:	mov	r3, #0
   31748:	str	r3, [sp, #12]
   3174c:	b	30b0c <__assert_fail@plt+0x1f900>
   31750:	ldr	r2, [pc, #568]	; 31990 <__assert_fail@plt+0x20784>
   31754:	cmp	r3, r2
   31758:	beq	30b54 <__assert_fail@plt+0x1f948>
   3175c:	ldr	r2, [pc, #676]	; 31a08 <__assert_fail@plt+0x207fc>
   31760:	cmp	r3, r2
   31764:	bne	30b5c <__assert_fail@plt+0x1f950>
   31768:	mov	r3, #0
   3176c:	str	r3, [r7, #3836]	; 0xefc
   31770:	b	30b5c <__assert_fail@plt+0x1f950>
   31774:	sub	r3, fp, #65	; 0x41
   31778:	cmp	fp, #0
   3177c:	cmpne	r3, #2
   31780:	bls	30b0c <__assert_fail@plt+0x1f900>
   31784:	sub	r3, fp, #11
   31788:	clz	r3, r3
   3178c:	lsr	r3, r3, #5
   31790:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   31794:	cmp	r2, #2
   31798:	beq	320dc <__assert_fail@plt+0x20ed0>
   3179c:	mov	r1, fp
   317a0:	mov	r0, r2
   317a4:	bl	16b3c <__assert_fail@plt+0x5930>
   317a8:	cmp	r0, #0
   317ac:	bne	30c58 <__assert_fail@plt+0x1fa4c>
   317b0:	cmp	r2, #222	; 0xde
   317b4:	beq	320d0 <__assert_fail@plt+0x20ec4>
   317b8:	ldr	r3, [pc, #576]	; 31a00 <__assert_fail@plt+0x207f4>
   317bc:	cmp	r2, r3
   317c0:	beq	320bc <__assert_fail@plt+0x20eb0>
   317c4:	cmp	r2, #90	; 0x5a
   317c8:	beq	320bc <__assert_fail@plt+0x20eb0>
   317cc:	cmp	r2, #140	; 0x8c
   317d0:	beq	31f6c <__assert_fail@plt+0x20d60>
   317d4:	bls	31e6c <__assert_fail@plt+0x20c60>
   317d8:	ldr	r3, [pc, #432]	; 31990 <__assert_fail@plt+0x20784>
   317dc:	cmp	r2, r3
   317e0:	beq	31eac <__assert_fail@plt+0x20ca0>
   317e4:	bhi	31dbc <__assert_fail@plt+0x20bb0>
   317e8:	cmp	r2, #221	; 0xdd
   317ec:	beq	31f6c <__assert_fail@plt+0x20d60>
   317f0:	bhi	31d74 <__assert_fail@plt+0x20b68>
   317f4:	cmp	r2, #167	; 0xa7
   317f8:	beq	321c8 <__assert_fail@plt+0x20fbc>
   317fc:	cmp	r2, #195	; 0xc3
   31800:	beq	31e18 <__assert_fail@plt+0x20c0c>
   31804:	cmp	r2, #144	; 0x90
   31808:	bne	31e00 <__assert_fail@plt+0x20bf4>
   3180c:	sub	r3, fp, #8
   31810:	clz	r3, r3
   31814:	lsr	r3, r3, #5
   31818:	cmp	r3, #0
   3181c:	bne	31e2c <__assert_fail@plt+0x20c20>
   31820:	ldr	r3, [r7, #3868]	; 0xf1c
   31824:	cmp	r3, fp
   31828:	beq	31860 <__assert_fail@plt+0x20654>
   3182c:	mov	r2, #5
   31830:	ldr	r1, [pc, #412]	; 319d4 <__assert_fail@plt+0x207c8>
   31834:	mov	r0, #0
   31838:	bl	10f90 <dcgettext@plt>
   3183c:	ldr	r2, [sp, #40]	; 0x28
   31840:	add	r1, r6, #108	; 0x6c
   31844:	mov	r4, r0
   31848:	add	r0, r6, #104	; 0x68
   3184c:	bl	16c64 <__assert_fail@plt+0x5a58>
   31850:	mov	r1, fp
   31854:	mov	r2, r0
   31858:	mov	r0, r4
   3185c:	bl	54dd0 <warn@@Base>
   31860:	mov	r3, #0
   31864:	str	fp, [r7, #3868]	; 0xf1c
   31868:	str	r3, [sp, #12]
   3186c:	b	30b0c <__assert_fail@plt+0x1f900>
   31870:	cmp	r2, #191	; 0xbf
   31874:	bne	3179c <__assert_fail@plt+0x20590>
   31878:	sub	r3, fp, #1
   3187c:	clz	r3, r3
   31880:	lsr	r3, r3, #5
   31884:	b	30c50 <__assert_fail@plt+0x1fa44>
   31888:	cmp	r2, #62	; 0x3e
   3188c:	beq	31878 <__assert_fail@plt+0x2066c>
   31890:	bcc	3179c <__assert_fail@plt+0x20590>
   31894:	sub	r3, r2, #180	; 0xb4
   31898:	cmp	r3, #1
   3189c:	bls	31878 <__assert_fail@plt+0x2066c>
   318a0:	b	3179c <__assert_fail@plt+0x20590>
   318a4:	ldr	r3, [pc, #244]	; 319a0 <__assert_fail@plt+0x20794>
   318a8:	cmp	r2, r3
   318ac:	bne	3179c <__assert_fail@plt+0x20590>
   318b0:	sub	r3, fp, #22
   318b4:	clz	r3, r3
   318b8:	lsr	r3, r3, #5
   318bc:	b	30c50 <__assert_fail@plt+0x1fa44>
   318c0:	mov	r2, #0
   318c4:	str	r2, [sp, #24]
   318c8:	str	r2, [sp, #32]
   318cc:	ldr	r2, [pc, #340]	; 31a28 <__assert_fail@plt+0x2081c>
   318d0:	cmp	fp, #52	; 0x34
   318d4:	cmpeq	sl, #243	; 0xf3
   318d8:	ldr	r2, [r2]
   318dc:	beq	31cf4 <__assert_fail@plt+0x20ae8>
   318e0:	mov	r1, r9
   318e4:	mov	r0, r4
   318e8:	str	r3, [sp, #44]	; 0x2c
   318ec:	blx	r2
   318f0:	ldr	r3, [sp, #24]
   318f4:	ldrh	sl, [r6, #66]	; 0x42
   318f8:	adds	r3, r3, r0
   318fc:	str	r3, [sp, #24]
   31900:	ldr	r3, [sp, #32]
   31904:	adc	r3, r3, r1
   31908:	str	r3, [sp, #32]
   3190c:	ldr	r3, [sp, #44]	; 0x2c
   31910:	mov	r1, fp
   31914:	mov	r0, sl
   31918:	str	r3, [sp, #44]	; 0x2c
   3191c:	bl	16930 <__assert_fail@plt+0x5724>
   31920:	ldm	r5, {r2, r5}
   31924:	ldr	r3, [sp, #44]	; 0x2c
   31928:	cmp	r0, #0
   3192c:	bne	31a38 <__assert_fail@plt+0x2082c>
   31930:	mov	r1, fp
   31934:	mov	r0, sl
   31938:	str	r3, [sp, #44]	; 0x2c
   3193c:	bl	16b3c <__assert_fail@plt+0x5930>
   31940:	ldr	r3, [sp, #44]	; 0x2c
   31944:	cmp	r0, #0
   31948:	bne	31a38 <__assert_fail@plt+0x2082c>
   3194c:	cmp	sl, #243	; 0xf3
   31950:	beq	32048 <__assert_fail@plt+0x20e3c>
   31954:	cmp	r3, #0
   31958:	ldr	r3, [pc, #204]	; 31a2c <__assert_fail@plt+0x20820>
   3195c:	ldr	r1, [r3]
   31960:	ldr	r3, [sp, #24]
   31964:	beq	3202c <__assert_fail@plt+0x20e20>
   31968:	subs	r2, r3, r2
   3196c:	ldr	r3, [sp, #32]
   31970:	str	r9, [sp]
   31974:	sbc	r3, r3, r5
   31978:	mov	r0, r4
   3197c:	blx	r1
   31980:	b	30b0c <__assert_fail@plt+0x1f900>
   31984:	andeq	sl, r9, r8, lsr r4
   31988:	andeq	r9, r0, r6, lsr #32
   3198c:	andeq	r7, r0, r6, ror r6
   31990:	andeq	r1, r0, r9, asr r0
   31994:	andeq	sl, r6, r0, asr #9
   31998:	andeq	r0, r0, r2, lsl #2
   3199c:	andeq	r4, r0, r7, asr r1
   319a0:	muleq	r0, r0, r3
   319a4:	andeq	sl, r0, r7, asr #23
   319a8:			; <UNDEFINED> instruction: 0x0000febb
   319ac:	andeq	r5, r0, r5, lsr #21
   319b0:	andeq	r4, r0, pc, ror #27
   319b4:	andeq	r5, r0, r1, asr #8
   319b8:	andeq	r2, r0, r0, lsr r5
   319bc:	andeq	r3, r0, r0, lsr r3
   319c0:			; <UNDEFINED> instruction: 0x0000feba
   319c4:	andeq	pc, r0, sp
   319c8:	andeq	sl, r0, r5, asr #26
   319cc:	andeq	sl, r6, r0, lsr r5
   319d0:	strdeq	sl, [r6], -r8
   319d4:			; <UNDEFINED> instruction: 0x0006a5bc
   319d8:	andeq	sl, r6, ip, lsr r3
   319dc:	andeq	sl, r6, r0, ror #7
   319e0:	andeq	sl, r6, r8, lsl r4
   319e4:	andeq	sl, r6, r4, ror #10
   319e8:	andeq	fp, r9, r8, lsr r3
   319ec:	andeq	sl, r6, r0, lsr r6
   319f0:	andeq	fp, r9, r8, asr #6
   319f4:	andeq	sl, r6, r8, lsr #7
   319f8:	strdeq	sl, [r6], -ip
   319fc:	andeq	r8, r0, r7, lsl r2
   31a00:	andeq	sp, r0, sp, lsr #29
   31a04:			; <UNDEFINED> instruction: 0x0000feb0
   31a08:	andeq	fp, r0, pc, ror #29
   31a0c:	andeq	r4, r0, r8, lsl #13
   31a10:	andeq	r7, r0, r0, asr r6
   31a14:	andeq	r1, r0, r3, lsr #4
   31a18:	andeq	r1, r0, r7, asr r0
   31a1c:	andeq	sl, r6, r0, ror r6
   31a20:	andeq	sl, r6, r8, ror r3
   31a24:	andeq	sl, r6, r8, lsl #9
   31a28:	andeq	lr, r9, ip, asr sp
   31a2c:	andeq	lr, r9, r0, ror #26
   31a30:	andeq	sl, r6, r4, asr r4
   31a34:	andeq	r0, r0, r1, lsl #2
   31a38:	cmp	sl, #15
   31a3c:	bne	31a58 <__assert_fail@plt+0x2084c>
   31a40:	ldr	r3, [sp, #24]
   31a44:	subs	r3, r3, #8
   31a48:	str	r3, [sp, #24]
   31a4c:	ldr	r3, [sp, #32]
   31a50:	sbc	r3, r3, #0
   31a54:	str	r3, [sp, #32]
   31a58:	ldr	r3, [r8]
   31a5c:	ldr	r1, [r8, #4]
   31a60:	subs	r2, r2, r3
   31a64:	sbc	r3, r5, r1
   31a68:	ldr	r1, [sp, #24]
   31a6c:	str	r9, [sp]
   31a70:	adds	r2, r2, r1
   31a74:	ldr	r1, [sp, #32]
   31a78:	mov	r0, r4
   31a7c:	adc	r3, r3, r1
   31a80:	ldr	r1, [pc, #-92]	; 31a2c <__assert_fail@plt+0x20820>
   31a84:	ldr	r1, [r1]
   31a88:	blx	r1
   31a8c:	b	30b0c <__assert_fail@plt+0x1f900>
   31a90:	bl	17bf4 <__assert_fail@plt+0x69e8>
   31a94:	str	r0, [sp, #36]	; 0x24
   31a98:	b	309b0 <__assert_fail@plt+0x1f7a4>
   31a9c:	cmp	r2, #105	; 0x69
   31aa0:	bne	30b8c <__assert_fail@plt+0x1f980>
   31aa4:	ldrb	r3, [r6, #60]	; 0x3c
   31aa8:	cmp	r3, #45	; 0x2d
   31aac:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31ab0:	ldrb	r3, [r6, #23]
   31ab4:	cmp	r3, #0
   31ab8:	beq	311b0 <__assert_fail@plt+0x1ffa4>
   31abc:	ldr	r3, [r7, #3832]	; 0xef8
   31ac0:	cmp	r3, #0
   31ac4:	beq	32154 <__assert_fail@plt+0x20f48>
   31ac8:	cmp	fp, #1
   31acc:	moveq	ip, #4
   31ad0:	movne	ip, #2
   31ad4:	cmp	r4, r1
   31ad8:	bcs	31ff4 <__assert_fail@plt+0x20de8>
   31adc:	ldr	r0, [r8]
   31ae0:	cmp	r0, #0
   31ae4:	blt	31d30 <__assert_fail@plt+0x20b24>
   31ae8:	ldr	r9, [sp, #16]
   31aec:	add	r2, ip, r0
   31af0:	ldr	r1, [sp, #28]
   31af4:	add	r2, r9, r2
   31af8:	cmp	r1, r2
   31afc:	bls	31d30 <__assert_fail@plt+0x20b24>
   31b00:	ldr	lr, [sp, #36]	; 0x24
   31b04:	lsl	r4, r4, #5
   31b08:	ldr	r2, [r3]
   31b0c:	add	r1, lr, r4
   31b10:	ldr	r5, [r8, #16]
   31b14:	ldr	lr, [lr, r4]
   31b18:	ldr	r3, [r3, #4]
   31b1c:	ldr	r4, [r8, #20]
   31b20:	ldr	r1, [r1, #4]
   31b24:	subs	r2, r5, r2
   31b28:	sbc	r3, r4, r3
   31b2c:	adds	r2, r2, lr
   31b30:	adc	r3, r3, r1
   31b34:	ldr	r1, [pc, #-272]	; 31a2c <__assert_fail@plt+0x20820>
   31b38:	str	ip, [sp]
   31b3c:	add	r0, r9, r0
   31b40:	ldr	r1, [r1]
   31b44:	blx	r1
   31b48:	mov	r3, #0
   31b4c:	str	r3, [r7, #3832]	; 0xef8
   31b50:	b	30b0c <__assert_fail@plt+0x1f900>
   31b54:	cmp	r2, #105	; 0x69
   31b58:	bne	30b98 <__assert_fail@plt+0x1f98c>
   31b5c:	ldrb	r3, [r6, #60]	; 0x3c
   31b60:	cmp	r3, #45	; 0x2d
   31b64:	beq	31abc <__assert_fail@plt+0x208b0>
   31b68:	ldrb	r3, [r6, #23]
   31b6c:	cmp	r3, #0
   31b70:	beq	31abc <__assert_fail@plt+0x208b0>
   31b74:	b	311b0 <__assert_fail@plt+0x1ffa4>
   31b78:	cmp	fp, #1
   31b7c:	beq	31cc8 <__assert_fail@plt+0x20abc>
   31b80:	cmp	r0, #0
   31b84:	bne	31cc8 <__assert_fail@plt+0x20abc>
   31b88:	mov	r1, fp
   31b8c:	mov	r0, sl
   31b90:	str	r3, [sp, #44]	; 0x2c
   31b94:	bl	16930 <__assert_fail@plt+0x5724>
   31b98:	ldm	r5, {r2, r5}
   31b9c:	cmp	r0, #0
   31ba0:	bne	31a58 <__assert_fail@plt+0x2084c>
   31ba4:	ldr	r3, [sp, #44]	; 0x2c
   31ba8:	b	31930 <__assert_fail@plt+0x20724>
   31bac:	mov	r2, #5
   31bb0:	ldr	r1, [pc, #-480]	; 319d8 <__assert_fail@plt+0x207cc>
   31bb4:	mov	r0, #0
   31bb8:	bl	10f90 <dcgettext@plt>
   31bbc:	mov	r1, r4
   31bc0:	bl	548ac <error@@Base>
   31bc4:	b	30b0c <__assert_fail@plt+0x1f900>
   31bc8:	ldr	r3, [r7, #3832]	; 0xef8
   31bcc:	cmp	r3, #0
   31bd0:	beq	30b98 <__assert_fail@plt+0x1f98c>
   31bd4:	mov	r2, #5
   31bd8:	ldr	r1, [pc, #-516]	; 319dc <__assert_fail@plt+0x207d0>
   31bdc:	mov	r0, #0
   31be0:	bl	10f90 <dcgettext@plt>
   31be4:	bl	548ac <error@@Base>
   31be8:	ldrh	r2, [r6, #66]	; 0x42
   31bec:	b	30b98 <__assert_fail@plt+0x1f98c>
   31bf0:	mov	r2, #5
   31bf4:	ldr	r1, [pc, #-540]	; 319e0 <__assert_fail@plt+0x207d4>
   31bf8:	mov	r0, #0
   31bfc:	bl	10f90 <dcgettext@plt>
   31c00:	mov	r1, r4
   31c04:	bl	548ac <error@@Base>
   31c08:	b	30b0c <__assert_fail@plt+0x1f900>
   31c0c:	sub	r3, fp, #15
   31c10:	clz	r3, r3
   31c14:	lsr	r3, r3, #5
   31c18:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   31c1c:	mov	r2, #5
   31c20:	ldr	r1, [pc, #-580]	; 319e4 <__assert_fail@plt+0x207d8>
   31c24:	mov	r0, #0
   31c28:	bl	10f90 <dcgettext@plt>
   31c2c:	ldrh	r1, [r6, #66]	; 0x42
   31c30:	bl	548ac <error@@Base>
   31c34:	b	313bc <__assert_fail@plt+0x201b0>
   31c38:	ldr	r0, [r8]
   31c3c:	cmp	r0, #0
   31c40:	blt	316e0 <__assert_fail@plt+0x204d4>
   31c44:	ldr	r2, [sp, #16]
   31c48:	add	r3, r0, #2
   31c4c:	ldr	r1, [sp, #28]
   31c50:	add	r3, r2, r3
   31c54:	cmp	r1, r3
   31c58:	bls	316e0 <__assert_fail@plt+0x204d4>
   31c5c:	ldr	r5, [pc, #-628]	; 319f0 <__assert_fail@plt+0x207e4>
   31c60:	mov	r1, #2
   31c64:	b	316c4 <__assert_fail@plt+0x204b8>
   31c68:	ldr	r0, [pc, #-648]	; 319e8 <__assert_fail@plt+0x207dc>
   31c6c:	cmp	r4, r1
   31c70:	add	r5, r0, #16
   31c74:	ldrd	r2, [r5, #-8]
   31c78:	strd	r2, [r0]
   31c7c:	bcs	31d58 <__assert_fail@plt+0x20b4c>
   31c80:	ldr	r3, [sp, #36]	; 0x24
   31c84:	lsl	r4, r4, #5
   31c88:	add	r2, r3, r4
   31c8c:	ldr	r1, [r8, #16]
   31c90:	ldr	r3, [r3, r4]
   31c94:	ldr	r2, [r2, #4]
   31c98:	ldr	r0, [r8, #20]
   31c9c:	adds	r3, r3, r1
   31ca0:	adc	r2, r2, r0
   31ca4:	str	r3, [r5, #-8]
   31ca8:	str	r2, [r5, #-4]
   31cac:	b	30b0c <__assert_fail@plt+0x1f900>
   31cb0:	mov	r2, #5
   31cb4:	ldr	r1, [pc, #-720]	; 319ec <__assert_fail@plt+0x207e0>
   31cb8:	mov	r0, #0
   31cbc:	bl	10f90 <dcgettext@plt>
   31cc0:	mov	r4, r0
   31cc4:	b	31724 <__assert_fail@plt+0x20518>
   31cc8:	ldr	r2, [pc, #-680]	; 31a28 <__assert_fail@plt+0x2081c>
   31ccc:	ldr	r2, [r2]
   31cd0:	b	318e0 <__assert_fail@plt+0x206d4>
   31cd4:	ldr	r1, [pc, #-748]	; 319f0 <__assert_fail@plt+0x207e4>
   31cd8:	mov	r2, #0
   31cdc:	mov	r3, #0
   31ce0:	strd	r2, [r1, #-8]
   31ce4:	strd	r2, [r1, #-16]
   31ce8:	b	30b5c <__assert_fail@plt+0x1f950>
   31cec:	bl	10f54 <free@plt>
   31cf0:	b	30aac <__assert_fail@plt+0x1f8a0>
   31cf4:	mov	r1, r9
   31cf8:	mov	r0, r4
   31cfc:	str	r3, [sp, #44]	; 0x2c
   31d00:	blx	r2
   31d04:	ldr	r3, [sp, #24]
   31d08:	mov	r2, #0
   31d0c:	ldrh	sl, [r6, #66]	; 0x42
   31d10:	and	r0, r0, #63	; 0x3f
   31d14:	adds	r3, r3, r0
   31d18:	str	r3, [sp, #24]
   31d1c:	ldr	r3, [sp, #32]
   31d20:	adc	r3, r3, r2
   31d24:	str	r3, [sp, #32]
   31d28:	ldr	r3, [sp, #44]	; 0x2c
   31d2c:	b	31910 <__assert_fail@plt+0x20704>
   31d30:	mov	r2, #5
   31d34:	ldr	r1, [pc, #-840]	; 319f4 <__assert_fail@plt+0x207e8>
   31d38:	mov	r0, #0
   31d3c:	bl	10f90 <dcgettext@plt>
   31d40:	ldr	r1, [r8]
   31d44:	bl	548ac <error@@Base>
   31d48:	b	31b48 <__assert_fail@plt+0x2093c>
   31d4c:	mov	r3, #1
   31d50:	str	r3, [sp, #12]
   31d54:	b	30b2c <__assert_fail@plt+0x1f920>
   31d58:	mov	r2, #5
   31d5c:	ldr	r1, [pc, #-876]	; 319f8 <__assert_fail@plt+0x207ec>
   31d60:	mov	r0, #0
   31d64:	bl	10f90 <dcgettext@plt>
   31d68:	mov	r1, r4
   31d6c:	bl	548ac <error@@Base>
   31d70:	b	30b0c <__assert_fail@plt+0x1f900>
   31d74:	cmp	r2, #243	; 0xf3
   31d78:	bne	31f48 <__assert_fail@plt+0x20d3c>
   31d7c:	cmp	fp, #55	; 0x37
   31d80:	beq	31e2c <__assert_fail@plt+0x20c20>
   31d84:	sub	r3, fp, #53	; 0x35
   31d88:	cmp	r3, #1
   31d8c:	movls	r3, #0
   31d90:	movls	r9, #1
   31d94:	bls	30c64 <__assert_fail@plt+0x1fa58>
   31d98:	bic	r2, fp, #4
   31d9c:	cmp	r2, #35	; 0x23
   31da0:	bne	32184 <__assert_fail@plt+0x20f78>
   31da4:	sub	r3, fp, #39	; 0x27
   31da8:	mov	r0, #1
   31dac:	clz	r3, r3
   31db0:	mov	r9, #4
   31db4:	lsr	r3, r3, #5
   31db8:	b	30c64 <__assert_fail@plt+0x1fa58>
   31dbc:	ldr	r3, [pc, #-968]	; 319fc <__assert_fail@plt+0x207f0>
   31dc0:	cmp	r2, r3
   31dc4:	beq	321a8 <__assert_fail@plt+0x20f9c>
   31dc8:	bls	31e38 <__assert_fail@plt+0x20c2c>
   31dcc:	ldr	r3, [pc, #-980]	; 31a00 <__assert_fail@plt+0x207f4>
   31dd0:	cmp	r2, r3
   31dd4:	beq	31e18 <__assert_fail@plt+0x20c0c>
   31dd8:	bls	31e0c <__assert_fail@plt+0x20c00>
   31ddc:	ldr	r3, [pc, #-992]	; 31a04 <__assert_fail@plt+0x207f8>
   31de0:	cmp	r2, r3
   31de4:	beq	321a8 <__assert_fail@plt+0x20f9c>
   31de8:	add	r3, r3, #11
   31dec:	cmp	r2, r3
   31df0:	subeq	r3, fp, #9
   31df4:	clzeq	r3, r3
   31df8:	lsreq	r3, r3, #5
   31dfc:	beq	31818 <__assert_fail@plt+0x2060c>
   31e00:	cmp	r2, #243	; 0xf3
   31e04:	beq	31d84 <__assert_fail@plt+0x20b78>
   31e08:	b	31820 <__assert_fail@plt+0x20614>
   31e0c:	ldr	r3, [pc, #-1036]	; 31a08 <__assert_fail@plt+0x207fc>
   31e10:	cmp	r2, r3
   31e14:	bne	31e00 <__assert_fail@plt+0x20bf4>
   31e18:	sub	r3, fp, #2
   31e1c:	clz	r3, r3
   31e20:	lsr	r3, r3, #5
   31e24:	cmp	r3, #0
   31e28:	beq	31e00 <__assert_fail@plt+0x20bf4>
   31e2c:	mov	r3, #0
   31e30:	mov	r9, #2
   31e34:	b	30c64 <__assert_fail@plt+0x1fa58>
   31e38:	ldr	r3, [pc, #-1076]	; 31a0c <__assert_fail@plt+0x20800>
   31e3c:	cmp	r2, r3
   31e40:	beq	31e18 <__assert_fail@plt+0x20c0c>
   31e44:	ldr	r3, [pc, #-1084]	; 31a10 <__assert_fail@plt+0x20804>
   31e48:	cmp	r2, r3
   31e4c:	beq	31f14 <__assert_fail@plt+0x20d08>
   31e50:	ldr	r3, [pc, #-1092]	; 31a14 <__assert_fail@plt+0x20808>
   31e54:	cmp	r2, r3
   31e58:	bne	31e00 <__assert_fail@plt+0x20bf4>
   31e5c:	sub	r3, fp, #5
   31e60:	clz	r3, r3
   31e64:	lsr	r3, r3, #5
   31e68:	b	31818 <__assert_fail@plt+0x2060c>
   31e6c:	cmp	r2, #92	; 0x5c
   31e70:	beq	31f6c <__assert_fail@plt+0x20d60>
   31e74:	bls	31ef0 <__assert_fail@plt+0x20ce4>
   31e78:	cmp	r2, #113	; 0x71
   31e7c:	beq	321b8 <__assert_fail@plt+0x20fac>
   31e80:	bhi	31ec8 <__assert_fail@plt+0x20cbc>
   31e84:	cmp	r2, #101	; 0x65
   31e88:	beq	321a8 <__assert_fail@plt+0x20f9c>
   31e8c:	cmp	r2, #105	; 0x69
   31e90:	bne	31ebc <__assert_fail@plt+0x20cb0>
   31e94:	ldrb	r3, [r6, #60]	; 0x3c
   31e98:	cmp	r3, #45	; 0x2d
   31e9c:	beq	31f6c <__assert_fail@plt+0x20d60>
   31ea0:	ldrb	r3, [r6, #23]
   31ea4:	cmp	r3, #0
   31ea8:	beq	31f6c <__assert_fail@plt+0x20d60>
   31eac:	sub	r3, fp, #5
   31eb0:	clz	r3, r3
   31eb4:	lsr	r3, r3, #5
   31eb8:	b	31e24 <__assert_fail@plt+0x20c18>
   31ebc:	cmp	r2, #93	; 0x5d
   31ec0:	bne	31e00 <__assert_fail@plt+0x20bf4>
   31ec4:	b	31e18 <__assert_fail@plt+0x20c0c>
   31ec8:	cmp	r2, #116	; 0x74
   31ecc:	beq	31e18 <__assert_fail@plt+0x20c0c>
   31ed0:	cmp	r2, #120	; 0x78
   31ed4:	beq	321a8 <__assert_fail@plt+0x20f9c>
   31ed8:	cmp	r2, #115	; 0x73
   31edc:	bne	31e00 <__assert_fail@plt+0x20bf4>
   31ee0:	sub	r3, fp, #3
   31ee4:	clz	r3, r3
   31ee8:	lsr	r3, r3, #5
   31eec:	b	31818 <__assert_fail@plt+0x2060c>
   31ef0:	cmp	r2, #83	; 0x53
   31ef4:	beq	31f54 <__assert_fail@plt+0x20d48>
   31ef8:	bls	31f24 <__assert_fail@plt+0x20d18>
   31efc:	cmp	r2, #89	; 0x59
   31f00:	beq	31e18 <__assert_fail@plt+0x20c0c>
   31f04:	cmp	r2, #90	; 0x5a
   31f08:	beq	31e18 <__assert_fail@plt+0x20c0c>
   31f0c:	cmp	r2, #85	; 0x55
   31f10:	bne	31e00 <__assert_fail@plt+0x20bf4>
   31f14:	sub	r3, fp, #3
   31f18:	clz	r3, r3
   31f1c:	lsr	r3, r3, #5
   31f20:	b	31e24 <__assert_fail@plt+0x20c18>
   31f24:	cmp	r2, #45	; 0x2d
   31f28:	beq	31e18 <__assert_fail@plt+0x20c0c>
   31f2c:	bcc	31e00 <__assert_fail@plt+0x20bf4>
   31f30:	cmp	r2, #48	; 0x30
   31f34:	subls	r3, fp, #17
   31f38:	clzls	r3, r3
   31f3c:	lsrls	r3, r3, #5
   31f40:	bls	31e24 <__assert_fail@plt+0x20c18>
   31f44:	b	31e00 <__assert_fail@plt+0x20bf4>
   31f48:	ldr	r3, [pc, #-1336]	; 31a18 <__assert_fail@plt+0x2080c>
   31f4c:	cmp	r2, r3
   31f50:	bne	31f64 <__assert_fail@plt+0x20d58>
   31f54:	sub	r3, fp, #4
   31f58:	clz	r3, r3
   31f5c:	lsr	r3, r3, #5
   31f60:	b	31e24 <__assert_fail@plt+0x20c18>
   31f64:	cmp	r2, #222	; 0xde
   31f68:	bne	31e00 <__assert_fail@plt+0x20bf4>
   31f6c:	sub	r3, fp, #2
   31f70:	clz	r3, r3
   31f74:	lsr	r3, r3, #5
   31f78:	b	31818 <__assert_fail@plt+0x2060c>
   31f7c:	mov	r2, #5
   31f80:	ldr	r1, [pc, #-1388]	; 31a1c <__assert_fail@plt+0x20810>
   31f84:	mov	r0, #0
   31f88:	bl	10f90 <dcgettext@plt>
   31f8c:	ldrb	r2, [r5, #20]
   31f90:	ldr	r1, [sp, #20]
   31f94:	and	r2, r2, #15
   31f98:	mov	r4, r0
   31f9c:	add	r0, r6, #23
   31fa0:	bl	1a2ec <__assert_fail@plt+0x90e0>
   31fa4:	ldr	r2, [sp, #52]	; 0x34
   31fa8:	add	r1, r6, #108	; 0x6c
   31fac:	mov	r5, r0
   31fb0:	add	r0, r6, #104	; 0x68
   31fb4:	bl	16c64 <__assert_fail@plt+0x5a58>
   31fb8:	ldr	ip, [sp, #64]	; 0x40
   31fbc:	mov	r3, #0
   31fc0:	sub	ip, r8, ip
   31fc4:	str	r3, [sp, #12]
   31fc8:	asr	ip, ip, #3
   31fcc:	mov	r1, r5
   31fd0:	add	r2, ip, ip, lsl #2
   31fd4:	add	r2, r2, r2, lsl #4
   31fd8:	add	r2, r2, r2, lsl #8
   31fdc:	add	r2, r2, r2, lsl #16
   31fe0:	add	r3, ip, r2, lsl #1
   31fe4:	mov	r2, r0
   31fe8:	mov	r0, r4
   31fec:	bl	54dd0 <warn@@Base>
   31ff0:	b	30b0c <__assert_fail@plt+0x1f900>
   31ff4:	mov	r2, #5
   31ff8:	ldr	r1, [pc, #-1504]	; 31a20 <__assert_fail@plt+0x20814>
   31ffc:	mov	r0, #0
   32000:	bl	10f90 <dcgettext@plt>
   32004:	mov	r1, r4
   32008:	bl	548ac <error@@Base>
   3200c:	b	31b48 <__assert_fail@plt+0x2093c>
   32010:	mov	r2, #5
   32014:	ldr	r1, [pc, #-1528]	; 31a24 <__assert_fail@plt+0x20818>
   32018:	mov	r0, #0
   3201c:	bl	10f90 <dcgettext@plt>
   32020:	ldr	r1, [r8]
   32024:	bl	548ac <error@@Base>
   32028:	b	30eac <__assert_fail@plt+0x1fca0>
   3202c:	adds	r2, r3, r2
   32030:	ldr	r3, [sp, #32]
   32034:	str	r9, [sp]
   32038:	adc	r3, r3, r5
   3203c:	mov	r0, r4
   32040:	blx	r1
   32044:	b	30b0c <__assert_fail@plt+0x1f900>
   32048:	sub	r1, fp, #52	; 0x34
   3204c:	cmp	r1, #1
   32050:	bhi	31954 <__assert_fail@plt+0x20748>
   32054:	cmp	r3, #0
   32058:	ldr	r3, [sp, #24]
   3205c:	beq	3214c <__assert_fail@plt+0x20f40>
   32060:	subs	r2, r3, r2
   32064:	ldr	r3, [pc, #-1604]	; 31a28 <__assert_fail@plt+0x2081c>
   32068:	mov	r1, r9
   3206c:	mov	r0, r4
   32070:	ldr	r3, [r3]
   32074:	and	r5, r2, #63	; 0x3f
   32078:	blx	r3
   3207c:	ldr	r3, [pc, #-1624]	; 31a2c <__assert_fail@plt+0x20820>
   32080:	str	r9, [sp]
   32084:	ldr	r1, [r3]
   32088:	mov	r3, #0
   3208c:	and	r2, r0, #192	; 0xc0
   32090:	orr	r2, r2, r5
   32094:	mov	r0, r4
   32098:	blx	r1
   3209c:	b	30b0c <__assert_fail@plt+0x1f900>
   320a0:	mov	r2, #5
   320a4:	ldr	r1, [pc, #-1660]	; 31a30 <__assert_fail@plt+0x20824>
   320a8:	mov	r0, #0
   320ac:	bl	10f90 <dcgettext@plt>
   320b0:	mov	r1, r4
   320b4:	bl	548ac <error@@Base>
   320b8:	b	30eac <__assert_fail@plt+0x1fca0>
   320bc:	cmp	fp, #4
   320c0:	bne	317cc <__assert_fail@plt+0x205c0>
   320c4:	mov	r3, #0
   320c8:	mov	r9, #3
   320cc:	b	30c64 <__assert_fail@plt+0x1fa58>
   320d0:	cmp	fp, #5
   320d4:	beq	320c4 <__assert_fail@plt+0x20eb8>
   320d8:	b	31f6c <__assert_fail@plt+0x20d60>
   320dc:	cmp	fp, #54	; 0x36
   320e0:	cmpne	fp, #32
   320e4:	moveq	r3, #1
   320e8:	movne	r3, #0
   320ec:	b	30c50 <__assert_fail@plt+0x1fa44>
   320f0:	ldr	r3, [pc, #-1732]	; 31a34 <__assert_fail@plt+0x20828>
   320f4:	sub	r3, fp, r3
   320f8:	clz	r3, r3
   320fc:	lsr	r3, r3, #5
   32100:	b	30c50 <__assert_fail@plt+0x1fa44>
   32104:	bic	r3, fp, #65	; 0x41
   32108:	cmp	r3, #36	; 0x24
   3210c:	beq	311c4 <__assert_fail@plt+0x1ffb8>
   32110:	ldrh	r2, [r6, #66]	; 0x42
   32114:	mov	r1, fp
   32118:	mov	r0, r2
   3211c:	bl	16930 <__assert_fail@plt+0x5724>
   32120:	cmp	r0, #0
   32124:	bne	311c4 <__assert_fail@plt+0x1ffb8>
   32128:	sub	r3, fp, #38	; 0x26
   3212c:	cmp	r3, #1
   32130:	movhi	r3, #0
   32134:	movls	r3, #1
   32138:	b	30c50 <__assert_fail@plt+0x1fa44>
   3213c:	sub	r3, fp, #18
   32140:	clz	r3, r3
   32144:	lsr	r3, r3, #5
   32148:	b	30c50 <__assert_fail@plt+0x1fa44>
   3214c:	adds	r2, r3, r2
   32150:	b	32064 <__assert_fail@plt+0x20e58>
   32154:	cmp	r2, #114	; 0x72
   32158:	b	30f1c <__assert_fail@plt+0x1fd10>
   3215c:	sub	r3, fp, #34	; 0x22
   32160:	clz	r3, r3
   32164:	lsr	r3, r3, #5
   32168:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   3216c:	sub	r3, fp, #1
   32170:	cmp	fp, #41	; 0x29
   32174:	cmpne	r3, #1
   32178:	movls	r3, #1
   3217c:	movhi	r3, #0
   32180:	b	30bf4 <__assert_fail@plt+0x1f9e8>
   32184:	sub	r3, fp, #36	; 0x24
   32188:	bics	r3, r3, #4
   3218c:	bne	321d8 <__assert_fail@plt+0x20fcc>
   32190:	sub	r3, fp, #40	; 0x28
   32194:	mov	r0, #1
   32198:	clz	r3, r3
   3219c:	mov	r9, #8
   321a0:	lsr	r3, r3, #5
   321a4:	b	30c64 <__assert_fail@plt+0x1fa58>
   321a8:	sub	r3, fp, #1
   321ac:	clz	r3, r3
   321b0:	lsr	r3, r3, #5
   321b4:	b	31e24 <__assert_fail@plt+0x20c18>
   321b8:	sub	r3, fp, #13
   321bc:	clz	r3, r3
   321c0:	lsr	r3, r3, #5
   321c4:	b	31818 <__assert_fail@plt+0x2060c>
   321c8:	sub	r3, fp, #19
   321cc:	clz	r3, r3
   321d0:	lsr	r3, r3, #5
   321d4:	b	31818 <__assert_fail@plt+0x2060c>
   321d8:	cmp	r2, #34	; 0x22
   321dc:	sub	r3, fp, #38	; 0x26
   321e0:	moveq	r0, #1
   321e4:	clz	r3, r3
   321e8:	moveq	r9, #2
   321ec:	lsr	r3, r3, #5
   321f0:	beq	30c64 <__assert_fail@plt+0x1fa58>
   321f4:	cmp	r2, #33	; 0x21
   321f8:	bne	32214 <__assert_fail@plt+0x21008>
   321fc:	mov	r0, #1
   32200:	sub	r3, fp, #37	; 0x25
   32204:	mov	r9, r0
   32208:	clz	r3, r3
   3220c:	lsr	r3, r3, #5
   32210:	b	30c64 <__assert_fail@plt+0x1fa58>
   32214:	cmp	fp, #52	; 0x34
   32218:	moveq	r0, #1
   3221c:	moveq	r3, r0
   32220:	moveq	r9, r0
   32224:	beq	30c64 <__assert_fail@plt+0x1fa58>
   32228:	b	31820 <__assert_fail@plt+0x20614>
   3222c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32230:	sub	sp, sp, #148	; 0x94
   32234:	lsl	r3, r0, #3
   32238:	ldr	r8, [pc, #976]	; 32610 <__assert_fail@plt+0x21404>
   3223c:	str	r3, [sp, #28]
   32240:	add	r3, r3, r0
   32244:	mov	r6, r0
   32248:	add	r3, r8, r3, lsl #3
   3224c:	mov	r7, r1
   32250:	ldr	r4, [r3, #16]
   32254:	mov	r9, r2
   32258:	cmp	r4, #0
   3225c:	beq	32288 <__assert_fail@plt+0x2107c>
   32260:	ldr	r0, [r3, #12]
   32264:	ldr	r1, [r2]
   32268:	bl	10f18 <strcmp@plt>
   3226c:	cmp	r0, #0
   32270:	moveq	r0, #1
   32274:	bne	32280 <__assert_fail@plt+0x21074>
   32278:	add	sp, sp, #148	; 0x94
   3227c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32280:	mov	r0, r4
   32284:	bl	10f54 <free@plt>
   32288:	mov	r2, #5
   3228c:	ldr	r1, [pc, #896]	; 32614 <__assert_fail@plt+0x21408>
   32290:	mov	r0, #0
   32294:	bl	10f90 <dcgettext@plt>
   32298:	ldr	r3, [sp, #28]
   3229c:	add	r4, sp, #80	; 0x50
   322a0:	add	fp, r3, r6
   322a4:	mov	r1, #64	; 0x40
   322a8:	add	fp, r8, fp, lsl #3
   322ac:	mov	r5, #0
   322b0:	ldr	r3, [fp, #8]
   322b4:	mov	r2, r0
   322b8:	mov	r0, r4
   322bc:	bl	110b0 <snprintf@plt>
   322c0:	ldrd	r0, [r7, #16]
   322c4:	mov	r2, r9
   322c8:	mov	r3, #0
   322cc:	str	r3, [fp, #52]	; 0x34
   322d0:	strd	r0, [fp, #24]
   322d4:	ldr	r3, [r2], #8
   322d8:	str	r3, [fp, #12]
   322dc:	ldrd	r0, [r7, #32]
   322e0:	str	r4, [sp, #16]
   322e4:	mov	r4, #1
   322e8:	strd	r0, [sp, #8]
   322ec:	mov	r0, #0
   322f0:	ldr	r3, [r7, #24]
   322f4:	add	r1, r9, #4
   322f8:	strd	r4, [sp]
   322fc:	bl	1717c <__assert_fail@plt+0x5f70>
   32300:	cmp	r0, #0
   32304:	mov	r4, r0
   32308:	str	r0, [fp, #16]
   3230c:	beq	32534 <__assert_fail@plt+0x21328>
   32310:	ldr	r1, [r7, #8]
   32314:	ldrd	sl, [r7, #32]
   32318:	and	r2, r1, #2048	; 0x800
   3231c:	mov	r3, #0
   32320:	orrs	r3, r2, r3
   32324:	str	r0, [sp, #44]	; 0x2c
   32328:	strd	sl, [sp, #48]	; 0x30
   3232c:	beq	32430 <__assert_fail@plt+0x21224>
   32330:	ldr	r3, [pc, #736]	; 32618 <__assert_fail@plt+0x2140c>
   32334:	ldr	r3, [r3]
   32338:	cmp	r3, #0
   3233c:	mov	r3, #0
   32340:	moveq	r2, #24
   32344:	movne	r2, #12
   32348:	cmp	fp, r3
   3234c:	cmpeq	sl, r2
   32350:	bcc	32548 <__assert_fail@plt+0x2133c>
   32354:	mov	r3, fp
   32358:	mov	r2, sl
   3235c:	mov	r1, r4
   32360:	add	r0, sp, #56	; 0x38
   32364:	bl	12c30 <__assert_fail@plt+0x1a24>
   32368:	ldr	r3, [sp, #56]	; 0x38
   3236c:	cmp	r3, #1
   32370:	bne	325b4 <__assert_fail@plt+0x213a8>
   32374:	ldrd	r2, [sp, #48]	; 0x30
   32378:	ldr	r1, [sp, #44]	; 0x2c
   3237c:	subs	r4, r2, r0
   32380:	sbc	r5, r3, #0
   32384:	ldrd	r2, [sp, #64]	; 0x40
   32388:	add	r1, r1, r0
   3238c:	strd	r4, [sp, #48]	; 0x30
   32390:	str	r1, [sp, #44]	; 0x2c
   32394:	strd	r2, [sp, #32]
   32398:	ldrd	r2, [sp, #32]
   3239c:	orrs	r3, r2, r3
   323a0:	bne	32578 <__assert_fail@plt+0x2136c>
   323a4:	ldrd	r2, [sp, #48]	; 0x30
   323a8:	mov	sl, r2
   323ac:	mov	fp, r3
   323b0:	ldr	r3, [sp, #28]
   323b4:	mov	r0, sl
   323b8:	add	r5, r3, r6
   323bc:	mov	r1, fp
   323c0:	lsl	r5, r5, #3
   323c4:	add	r3, r8, r5
   323c8:	ldr	r2, [r3, #16]
   323cc:	strd	r0, [r3, #32]
   323d0:	cmp	r2, #0
   323d4:	beq	3256c <__assert_fail@plt+0x21360>
   323d8:	ldr	r1, [r3, #64]	; 0x40
   323dc:	cmp	r1, #0
   323e0:	streq	r1, [r3, #44]	; 0x2c
   323e4:	streq	r1, [r3, #48]	; 0x30
   323e8:	moveq	r0, #1
   323ec:	beq	32278 <__assert_fail@plt+0x2106c>
   323f0:	mov	r0, sl
   323f4:	mov	r1, fp
   323f8:	add	r3, r5, #48	; 0x30
   323fc:	add	r5, r5, #44	; 0x2c
   32400:	add	r3, r8, r3
   32404:	add	r5, r8, r5
   32408:	strd	r0, [sp]
   3240c:	str	r3, [sp, #12]
   32410:	mov	r1, r7
   32414:	mov	r0, r9
   32418:	str	r5, [sp, #8]
   3241c:	bl	3087c <__assert_fail@plt+0x1f670>
   32420:	adds	r0, r0, #0
   32424:	movne	r0, #1
   32428:	add	sp, sp, #148	; 0x94
   3242c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32430:	cmp	fp, #0
   32434:	cmpeq	sl, #12
   32438:	bls	323b0 <__assert_fail@plt+0x211a4>
   3243c:	ldr	r1, [pc, #472]	; 3261c <__assert_fail@plt+0x21410>
   32440:	bl	10f18 <strcmp@plt>
   32444:	cmp	r0, #0
   32448:	bne	323b0 <__assert_fail@plt+0x211a4>
   3244c:	ldrb	r2, [r4, #4]
   32450:	ldrb	r0, [r4, #5]
   32454:	mov	r1, #0
   32458:	mov	r3, #0
   3245c:	lsl	ip, r2, #8
   32460:	adds	ip, r0, ip
   32464:	lsr	r2, r2, #24
   32468:	adc	r2, r1, r2
   3246c:	lsl	r0, ip, #8
   32470:	lsl	r1, r2, #8
   32474:	ldrb	r2, [r4, #6]
   32478:	orr	r1, r1, ip, lsr #24
   3247c:	add	r4, r4, #12
   32480:	adds	r0, r2, r0
   32484:	adc	r1, r3, r1
   32488:	ldrb	r2, [r4, #-5]
   3248c:	lsl	ip, r0, #8
   32490:	lsl	r1, r1, #8
   32494:	adds	ip, r2, ip
   32498:	mov	r3, #0
   3249c:	orr	r1, r1, r0, lsr #24
   324a0:	ldrb	r2, [r4, #-4]
   324a4:	adc	r1, r3, r1
   324a8:	lsl	r0, ip, #8
   324ac:	lsl	r1, r1, #8
   324b0:	adds	r0, r2, r0
   324b4:	mov	r3, #0
   324b8:	orr	r1, r1, ip, lsr #24
   324bc:	ldrb	r2, [r4, #-3]
   324c0:	adc	r1, r3, r1
   324c4:	lsl	ip, r0, #8
   324c8:	lsl	r1, r1, #8
   324cc:	adds	ip, r2, ip
   324d0:	mov	r3, #0
   324d4:	orr	r1, r1, r0, lsr #24
   324d8:	ldrb	r2, [r4, #-2]
   324dc:	adc	r1, r3, r1
   324e0:	lsl	r0, ip, #8
   324e4:	lsl	r1, r1, #8
   324e8:	adds	r0, r2, r0
   324ec:	mov	r3, #0
   324f0:	orr	r1, r1, ip, lsr #24
   324f4:	ldrb	r2, [r4, #-1]
   324f8:	adc	r1, r3, r1
   324fc:	lsl	ip, r0, #8
   32500:	lsl	r1, r1, #8
   32504:	orr	r1, r1, r0, lsr #24
   32508:	mov	r3, #0
   3250c:	adds	r0, r2, ip
   32510:	adc	r3, r3, r1
   32514:	str	r3, [sp, #36]	; 0x24
   32518:	subs	r3, sl, #12
   3251c:	sbc	r2, fp, #0
   32520:	str	r0, [sp, #32]
   32524:	str	r4, [sp, #44]	; 0x2c
   32528:	str	r2, [sp, #52]	; 0x34
   3252c:	str	r3, [sp, #48]	; 0x30
   32530:	b	32398 <__assert_fail@plt+0x2118c>
   32534:	mov	r2, #0
   32538:	mov	r3, #0
   3253c:	strd	r2, [fp, #32]
   32540:	add	sp, sp, #148	; 0x94
   32544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32548:	ldr	r1, [pc, #208]	; 32620 <__assert_fail@plt+0x21414>
   3254c:	mov	r2, #5
   32550:	mov	r0, #0
   32554:	bl	10f90 <dcgettext@plt>
   32558:	ldr	r3, [sp, #28]
   3255c:	add	r5, r3, r6
   32560:	add	r8, r8, r5, lsl #3
   32564:	ldr	r1, [r8, #8]
   32568:	bl	54dd0 <warn@@Base>
   3256c:	mov	r0, #0
   32570:	add	sp, sp, #148	; 0x94
   32574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32578:	add	r1, sp, #48	; 0x30
   3257c:	ldrd	r2, [sp, #32]
   32580:	str	r1, [sp]
   32584:	add	r0, sp, #44	; 0x2c
   32588:	bl	13fbc <__assert_fail@plt+0x2db0>
   3258c:	cmp	r0, #0
   32590:	beq	325e0 <__assert_fail@plt+0x213d4>
   32594:	ldr	r3, [sp, #28]
   32598:	add	r4, r3, r6
   3259c:	add	r4, r8, r4, lsl #3
   325a0:	ldr	r0, [r4, #16]
   325a4:	bl	10f54 <free@plt>
   325a8:	ldr	r3, [sp, #44]	; 0x2c
   325ac:	str	r3, [r4, #16]
   325b0:	b	323a4 <__assert_fail@plt+0x21198>
   325b4:	mov	r2, #5
   325b8:	ldr	r1, [pc, #100]	; 32624 <__assert_fail@plt+0x21418>
   325bc:	mov	r0, #0
   325c0:	bl	10f90 <dcgettext@plt>
   325c4:	ldr	r3, [sp, #28]
   325c8:	ldr	r2, [sp, #56]	; 0x38
   325cc:	add	r5, r3, r6
   325d0:	add	r8, r8, r5, lsl #3
   325d4:	ldr	r1, [r8, #8]
   325d8:	bl	54dd0 <warn@@Base>
   325dc:	b	3256c <__assert_fail@plt+0x21360>
   325e0:	mov	r2, #5
   325e4:	ldr	r1, [pc, #60]	; 32628 <__assert_fail@plt+0x2141c>
   325e8:	bl	10f90 <dcgettext@plt>
   325ec:	add	r1, r9, #108	; 0x6c
   325f0:	mov	r2, r7
   325f4:	mov	r4, r0
   325f8:	add	r0, r9, #104	; 0x68
   325fc:	bl	16c64 <__assert_fail@plt+0x5a58>
   32600:	mov	r1, r0
   32604:	mov	r0, r4
   32608:	bl	548ac <error@@Base>
   3260c:	b	3256c <__assert_fail@plt+0x21360>
   32610:	strdeq	r9, [r9], -r0
   32614:			; <UNDEFINED> instruction: 0x0006a6b4
   32618:	andeq	sl, r9, r8, lsr r4
   3261c:	andeq	sl, r6, r8, lsr r7
   32620:	andeq	sl, r6, r4, asr #13
   32624:	andeq	sl, r6, r8, lsl #14
   32628:	andeq	sl, r6, r0, asr #14
   3262c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32630:	sub	sp, sp, #84	; 0x54
   32634:	mov	r6, r2
   32638:	mov	r4, r0
   3263c:	mov	r5, r1
   32640:	bl	24db8 <__assert_fail@plt+0x13bac>
   32644:	cmp	r0, #0
   32648:	str	r0, [sp, #36]	; 0x24
   3264c:	str	r0, [sp, #44]	; 0x2c
   32650:	beq	329cc <__assert_fail@plt+0x217c0>
   32654:	add	r3, r5, #104	; 0x68
   32658:	mov	r2, #5
   3265c:	ldr	r1, [pc, #1128]	; 32acc <__assert_fail@plt+0x218c0>
   32660:	mov	r0, #0
   32664:	str	r3, [sp, #20]
   32668:	ldrd	sl, [r4, #32]
   3266c:	bl	10f90 <dcgettext@plt>
   32670:	add	r7, r5, #108	; 0x6c
   32674:	mov	r1, r7
   32678:	mov	r2, r4
   3267c:	mov	r8, r0
   32680:	add	r0, r5, #104	; 0x68
   32684:	bl	16c64 <__assert_fail@plt+0x5a58>
   32688:	mov	r1, r0
   3268c:	mov	r0, r8
   32690:	bl	10f24 <printf@plt>
   32694:	ldr	r3, [pc, #1076]	; 32ad0 <__assert_fail@plt+0x218c4>
   32698:	ldr	r3, [r3, #3872]	; 0xf20
   3269c:	cmp	r3, #0
   326a0:	beq	327d8 <__assert_fail@plt+0x215cc>
   326a4:	ldr	r1, [r4, #8]
   326a8:	mov	r8, #0
   326ac:	and	r2, r1, #2048	; 0x800
   326b0:	mov	r3, r8
   326b4:	orrs	r3, r2, r3
   326b8:	strd	sl, [sp, #48]	; 0x30
   326bc:	bne	329f4 <__assert_fail@plt+0x217e8>
   326c0:	cmp	fp, #0
   326c4:	cmpeq	sl, #12
   326c8:	bls	327d0 <__assert_fail@plt+0x215c4>
   326cc:	ldr	r8, [sp, #44]	; 0x2c
   326d0:	ldr	r1, [pc, #1020]	; 32ad4 <__assert_fail@plt+0x218c8>
   326d4:	mov	r0, r8
   326d8:	bl	10f18 <strcmp@plt>
   326dc:	cmp	r0, #0
   326e0:	bne	327d0 <__assert_fail@plt+0x215c4>
   326e4:	ldrb	r2, [r8, #4]
   326e8:	ldrb	r0, [r8, #5]
   326ec:	mov	r1, #0
   326f0:	mov	r3, #0
   326f4:	lsl	ip, r2, #8
   326f8:	adds	ip, r0, ip
   326fc:	lsr	r2, r2, #24
   32700:	adc	r1, r1, r2
   32704:	ldrb	r2, [r8, #6]
   32708:	lsl	r0, ip, #8
   3270c:	lsl	r1, r1, #8
   32710:	adds	r0, r2, r0
   32714:	orr	r1, r1, ip, lsr #24
   32718:	ldrb	r2, [r8, #7]
   3271c:	adc	r1, r3, r1
   32720:	lsl	ip, r0, #8
   32724:	lsl	r1, r1, #8
   32728:	adds	ip, r2, ip
   3272c:	mov	r3, #0
   32730:	orr	r1, r1, r0, lsr #24
   32734:	ldrb	r2, [r8, #8]
   32738:	adc	r1, r3, r1
   3273c:	lsl	r0, ip, #8
   32740:	lsl	r1, r1, #8
   32744:	adds	r0, r2, r0
   32748:	mov	r3, #0
   3274c:	orr	r1, r1, ip, lsr #24
   32750:	ldrb	r2, [r8, #9]
   32754:	adc	r1, r3, r1
   32758:	lsl	ip, r0, #8
   3275c:	lsl	r1, r1, #8
   32760:	adds	ip, r2, ip
   32764:	mov	r3, #0
   32768:	orr	r1, r1, r0, lsr #24
   3276c:	ldrb	r2, [r8, #10]
   32770:	adc	r1, r3, r1
   32774:	lsl	r0, ip, #8
   32778:	lsl	r1, r1, #8
   3277c:	adds	r0, r2, r0
   32780:	mov	r3, #0
   32784:	orr	r1, r1, ip, lsr #24
   32788:	ldrb	r2, [r8, #11]
   3278c:	adc	r1, r3, r1
   32790:	lsl	ip, r0, #8
   32794:	lsl	r1, r1, #8
   32798:	orr	r1, r1, r0, lsr #24
   3279c:	mov	r3, #0
   327a0:	adds	r0, r2, ip
   327a4:	adc	r3, r3, r1
   327a8:	subs	r2, sl, #12
   327ac:	str	r3, [sp, #28]
   327b0:	sbc	r3, fp, #0
   327b4:	add	r8, r8, #12
   327b8:	str	r0, [sp, #24]
   327bc:	str	r8, [sp, #44]	; 0x2c
   327c0:	strd	r2, [sp, #48]	; 0x30
   327c4:	ldrd	r2, [sp, #24]
   327c8:	orrs	r3, r2, r3
   327cc:	bne	32a3c <__assert_fail@plt+0x21830>
   327d0:	ldr	r3, [sp, #36]	; 0x24
   327d4:	str	r3, [sp, #44]	; 0x2c
   327d8:	cmp	r6, #0
   327dc:	bne	329a0 <__assert_fail@plt+0x21794>
   327e0:	ldr	lr, [r5, #84]	; 0x54
   327e4:	ldr	r5, [r5, #96]	; 0x60
   327e8:	add	ip, lr, lr, lsl #3
   327ec:	add	ip, r5, ip, lsl #3
   327f0:	cmp	r5, ip
   327f4:	bcs	3286c <__assert_fail@plt+0x21660>
   327f8:	mov	r1, r5
   327fc:	b	3280c <__assert_fail@plt+0x21600>
   32800:	add	r1, r1, #72	; 0x48
   32804:	cmp	r1, ip
   32808:	bcs	3286c <__assert_fail@plt+0x21660>
   3280c:	ldr	r3, [r1, #4]
   32810:	cmp	r3, #4
   32814:	cmpne	r3, #9
   32818:	movne	r3, #1
   3281c:	moveq	r3, #0
   32820:	bne	32800 <__assert_fail@plt+0x215f4>
   32824:	ldr	r2, [r1, #44]	; 0x2c
   32828:	cmp	r2, lr
   3282c:	add	r2, r2, r2, lsl #3
   32830:	bcs	32800 <__assert_fail@plt+0x215f4>
   32834:	add	r2, r5, r2, lsl #3
   32838:	cmp	r4, r2
   3283c:	bne	32800 <__assert_fail@plt+0x215f4>
   32840:	ldrd	r6, [r1, #32]
   32844:	orrs	r2, r6, r7
   32848:	beq	32800 <__assert_fail@plt+0x215f4>
   3284c:	ldr	r2, [r1, #40]	; 0x28
   32850:	cmp	r2, lr
   32854:	bcs	32800 <__assert_fail@plt+0x215f4>
   32858:	mov	r0, r3
   3285c:	mov	r2, #5
   32860:	ldr	r1, [pc, #624]	; 32ad8 <__assert_fail@plt+0x218cc>
   32864:	bl	10f90 <dcgettext@plt>
   32868:	bl	10f24 <printf@plt>
   3286c:	orrs	r3, sl, fp
   32870:	ldr	r3, [r4, #16]
   32874:	ldr	r5, [sp, #44]	; 0x2c
   32878:	str	r3, [sp, #24]
   3287c:	ldr	r3, [pc, #600]	; 32adc <__assert_fail@plt+0x218d0>
   32880:	str	r3, [sp, #32]
   32884:	beq	3297c <__assert_fail@plt+0x21770>
   32888:	ldr	r6, [pc, #592]	; 32ae0 <__assert_fail@plt+0x218d4>
   3288c:	ldr	r7, [pc, #592]	; 32ae4 <__assert_fail@plt+0x218d8>
   32890:	cmp	fp, #0
   32894:	cmpeq	sl, #16
   32898:	movhi	r3, #16
   3289c:	ldr	r1, [sp, #24]
   328a0:	ldr	r0, [pc, #576]	; 32ae8 <__assert_fail@plt+0x218dc>
   328a4:	str	sl, [sp, #20]
   328a8:	mov	r8, #0
   328ac:	strhi	r3, [sp, #20]
   328b0:	bl	10f24 <printf@plt>
   328b4:	ldr	r4, [sp, #20]
   328b8:	b	328e0 <__assert_fail@plt+0x216d4>
   328bc:	ldrb	r1, [r5, r8]
   328c0:	mov	r0, r7
   328c4:	bl	10f24 <printf@plt>
   328c8:	and	r3, r8, #3
   328cc:	cmp	r3, #3
   328d0:	add	r8, r8, #1
   328d4:	beq	32900 <__assert_fail@plt+0x216f4>
   328d8:	cmp	r8, #16
   328dc:	beq	32910 <__assert_fail@plt+0x21704>
   328e0:	cmp	r4, r8
   328e4:	mov	r0, r6
   328e8:	bgt	328bc <__assert_fail@plt+0x216b0>
   328ec:	bl	10f24 <printf@plt>
   328f0:	and	r3, r8, #3
   328f4:	cmp	r3, #3
   328f8:	add	r8, r8, #1
   328fc:	bne	328d8 <__assert_fail@plt+0x216cc>
   32900:	mov	r0, #32
   32904:	bl	110c8 <putchar@plt>
   32908:	cmp	r8, #16
   3290c:	bne	328e0 <__assert_fail@plt+0x216d4>
   32910:	sub	r8, r5, #1
   32914:	ldrb	r3, [r8, #1]
   32918:	add	r9, r8, #1
   3291c:	add	r8, r8, #2
   32920:	sub	r2, r3, #32
   32924:	cmp	r2, #94	; 0x5e
   32928:	mov	r0, #46	; 0x2e
   3292c:	sub	r8, r8, r5
   32930:	movls	r0, r3
   32934:	bl	110c8 <putchar@plt>
   32938:	cmp	r4, r8
   3293c:	mov	r8, r9
   32940:	bgt	32914 <__assert_fail@plt+0x21708>
   32944:	ldr	r3, [sp, #32]
   32948:	mov	r0, #10
   3294c:	ldr	r1, [r3]
   32950:	bl	11158 <putc@plt>
   32954:	ldr	r1, [sp, #24]
   32958:	asr	r3, r4, #31
   3295c:	adds	r1, r1, r4
   32960:	subs	sl, sl, r4
   32964:	sbc	fp, fp, r3
   32968:	orrs	r3, sl, fp
   3296c:	ldr	r3, [sp, #20]
   32970:	str	r1, [sp, #24]
   32974:	add	r5, r5, r3
   32978:	bne	32890 <__assert_fail@plt+0x21684>
   3297c:	ldr	r0, [sp, #36]	; 0x24
   32980:	bl	10f54 <free@plt>
   32984:	ldr	r3, [sp, #32]
   32988:	mov	r0, #10
   3298c:	ldr	r1, [r3]
   32990:	bl	11158 <putc@plt>
   32994:	mov	r0, #1
   32998:	add	sp, sp, #84	; 0x54
   3299c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   329a0:	mov	r3, #0
   329a4:	strd	sl, [sp]
   329a8:	mov	r0, r5
   329ac:	str	r3, [sp, #12]
   329b0:	str	r3, [sp, #8]
   329b4:	ldr	r2, [sp, #44]	; 0x2c
   329b8:	mov	r1, r4
   329bc:	bl	3087c <__assert_fail@plt+0x1f670>
   329c0:	cmp	r0, #0
   329c4:	bne	3286c <__assert_fail@plt+0x21660>
   329c8:	b	32998 <__assert_fail@plt+0x2178c>
   329cc:	ldrd	r2, [r4, #32]
   329d0:	orrs	r3, r2, r3
   329d4:	moveq	r0, #1
   329d8:	beq	32998 <__assert_fail@plt+0x2178c>
   329dc:	ldr	r0, [r4, #4]
   329e0:	sub	r0, r0, #8
   329e4:	clz	r0, r0
   329e8:	lsr	r0, r0, #5
   329ec:	add	sp, sp, #84	; 0x54
   329f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   329f4:	mov	r3, fp
   329f8:	mov	r2, sl
   329fc:	ldr	r1, [sp, #44]	; 0x2c
   32a00:	add	r0, sp, #56	; 0x38
   32a04:	bl	12c30 <__assert_fail@plt+0x1a24>
   32a08:	ldr	r3, [sp, #56]	; 0x38
   32a0c:	cmp	r3, #1
   32a10:	bne	32a60 <__assert_fail@plt+0x21854>
   32a14:	ldrd	r2, [sp, #48]	; 0x30
   32a18:	ldr	r1, [sp, #44]	; 0x2c
   32a1c:	subs	r8, r2, r0
   32a20:	sbc	r9, r3, #0
   32a24:	ldrd	r2, [sp, #64]	; 0x40
   32a28:	add	r1, r1, r0
   32a2c:	strd	r8, [sp, #48]	; 0x30
   32a30:	str	r1, [sp, #44]	; 0x2c
   32a34:	strd	r2, [sp, #24]
   32a38:	b	327c4 <__assert_fail@plt+0x215b8>
   32a3c:	add	r1, sp, #48	; 0x30
   32a40:	ldrd	r2, [sp, #24]
   32a44:	str	r1, [sp]
   32a48:	add	r0, sp, #44	; 0x2c
   32a4c:	bl	13fbc <__assert_fail@plt+0x2db0>
   32a50:	cmp	r0, #0
   32a54:	beq	32a9c <__assert_fail@plt+0x21890>
   32a58:	ldrd	sl, [sp, #48]	; 0x30
   32a5c:	b	327d8 <__assert_fail@plt+0x215cc>
   32a60:	mov	r2, #5
   32a64:	ldr	r1, [pc, #128]	; 32aec <__assert_fail@plt+0x218e0>
   32a68:	mov	r0, r8
   32a6c:	bl	10f90 <dcgettext@plt>
   32a70:	mov	r2, r4
   32a74:	mov	r1, r7
   32a78:	mov	r5, r0
   32a7c:	ldr	r0, [sp, #20]
   32a80:	bl	16c64 <__assert_fail@plt+0x5a58>
   32a84:	ldr	r2, [sp, #56]	; 0x38
   32a88:	mov	r1, r0
   32a8c:	mov	r0, r5
   32a90:	bl	54dd0 <warn@@Base>
   32a94:	mov	r0, #0
   32a98:	b	32998 <__assert_fail@plt+0x2178c>
   32a9c:	mov	r2, #5
   32aa0:	ldr	r1, [pc, #72]	; 32af0 <__assert_fail@plt+0x218e4>
   32aa4:	bl	10f90 <dcgettext@plt>
   32aa8:	mov	r1, r7
   32aac:	mov	r2, r4
   32ab0:	mov	r5, r0
   32ab4:	ldr	r0, [sp, #20]
   32ab8:	bl	16c64 <__assert_fail@plt+0x5a58>
   32abc:	mov	r1, r0
   32ac0:	mov	r0, r5
   32ac4:	bl	548ac <error@@Base>
   32ac8:	b	32a94 <__assert_fail@plt+0x21888>
   32acc:	andeq	sl, r6, r4, ror #14
   32ad0:	andeq	sl, r9, r8, lsr r4
   32ad4:	andeq	sl, r6, r8, lsr r7
   32ad8:	andeq	sl, r6, r0, lsl #15
   32adc:	andeq	sl, r9, ip, lsr #8
   32ae0:	andeq	r6, r6, ip, lsl r5
   32ae4:	andeq	r2, r6, r8, lsl #31
   32ae8:	andeq	r2, r6, ip, ror pc
   32aec:	andeq	sl, r6, r8, lsl #14
   32af0:	andeq	sl, r6, r0, asr #14
   32af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32af8:	sub	sp, sp, #172	; 0xac
   32afc:	subs	r4, r1, #0
   32b00:	str	r0, [sp, #48]	; 0x30
   32b04:	ldr	r5, [sp, #208]	; 0xd0
   32b08:	ldr	r6, [sp, #212]	; 0xd4
   32b0c:	beq	33eac <__assert_fail@plt+0x22ca0>
   32b10:	mov	r1, r0
   32b14:	mov	r0, r4
   32b18:	bl	24db8 <__assert_fail@plt+0x13bac>
   32b1c:	subs	r3, r0, #0
   32b20:	str	r3, [sp, #96]	; 0x60
   32b24:	beq	32f2c <__assert_fail@plt+0x21d20>
   32b28:	mov	r7, #0
   32b2c:	stm	sp, {r5, r6}
   32b30:	str	r7, [sp, #12]
   32b34:	str	r7, [sp, #8]
   32b38:	ldr	r2, [sp, #96]	; 0x60
   32b3c:	mov	r1, r4
   32b40:	ldr	r0, [sp, #48]	; 0x30
   32b44:	bl	3087c <__assert_fail@plt+0x1f670>
   32b48:	cmp	r0, r7
   32b4c:	beq	32f2c <__assert_fail@plt+0x21d20>
   32b50:	mov	r2, #5
   32b54:	ldr	r1, [pc, #4076]	; 33b48 <__assert_fail@plt+0x2293c>
   32b58:	mov	r0, r7
   32b5c:	bl	10f90 <dcgettext@plt>
   32b60:	ldr	r3, [sp, #48]	; 0x30
   32b64:	mov	r2, r4
   32b68:	add	r1, r3, #108	; 0x6c
   32b6c:	mov	r6, r0
   32b70:	add	r0, r3, #104	; 0x68
   32b74:	bl	16c64 <__assert_fail@plt+0x5a58>
   32b78:	mov	r1, r0
   32b7c:	mov	r0, r6
   32b80:	bl	10f24 <printf@plt>
   32b84:	ldrd	r2, [sp, #216]	; 0xd8
   32b88:	cmp	r3, #0
   32b8c:	cmpeq	r2, #3
   32b90:	bls	33f28 <__assert_fail@plt+0x22d1c>
   32b94:	ldr	r3, [sp, #216]	; 0xd8
   32b98:	subs	r1, r3, #4
   32b9c:	bic	r2, r1, #4
   32ba0:	ldr	r1, [sp, #220]	; 0xdc
   32ba4:	sbc	r1, r1, #0
   32ba8:	mov	r3, r1
   32bac:	orrs	r3, r2, r3
   32bb0:	bne	32f14 <__assert_fail@plt+0x21d08>
   32bb4:	mov	r2, #5
   32bb8:	ldr	r1, [pc, #3980]	; 33b4c <__assert_fail@plt+0x22940>
   32bbc:	mov	r0, #0
   32bc0:	bl	10f90 <dcgettext@plt>
   32bc4:	mov	r2, #5
   32bc8:	ldr	r1, [pc, #3968]	; 33b50 <__assert_fail@plt+0x22944>
   32bcc:	mov	r4, r0
   32bd0:	mov	r0, #0
   32bd4:	bl	10f90 <dcgettext@plt>
   32bd8:	ldr	r7, [sp, #96]	; 0x60
   32bdc:	mov	r2, #5
   32be0:	add	r3, r7, r5
   32be4:	ldr	r1, [pc, #3944]	; 33b54 <__assert_fail@plt+0x22948>
   32be8:	mov	r5, r3
   32bec:	str	r3, [sp, #32]
   32bf0:	mov	r6, r0
   32bf4:	mov	r0, #0
   32bf8:	bl	10f90 <dcgettext@plt>
   32bfc:	mov	r1, r6
   32c00:	mov	r2, r0
   32c04:	mov	r0, r4
   32c08:	bl	10f24 <printf@plt>
   32c0c:	cmp	r5, r7
   32c10:	bls	353f8 <__assert_fail@plt+0x241ec>
   32c14:	mov	r3, #1
   32c18:	mov	r9, r7
   32c1c:	str	r3, [sp, #52]	; 0x34
   32c20:	b	32d7c <__assert_fail@plt+0x21b70>
   32c24:	ldr	r3, [sp, #48]	; 0x30
   32c28:	mov	r1, fp
   32c2c:	ldrh	r0, [r3, #64]	; 0x40
   32c30:	bl	1b68c <__assert_fail@plt+0xa480>
   32c34:	ldr	r3, [pc, #3868]	; 33b58 <__assert_fail@plt+0x2294c>
   32c38:	str	r3, [sp, #40]	; 0x28
   32c3c:	mov	r7, r0
   32c40:	ldr	r0, [pc, #3860]	; 33b5c <__assert_fail@plt+0x22950>
   32c44:	bl	10f24 <printf@plt>
   32c48:	mov	r2, #2
   32c4c:	ldr	r1, [pc, #3852]	; 33b60 <__assert_fail@plt+0x22954>
   32c50:	mov	r0, r5
   32c54:	bl	111d0 <strncmp@plt>
   32c58:	cmp	r0, #0
   32c5c:	bne	32f40 <__assert_fail@plt+0x21d34>
   32c60:	ldrb	r1, [r5, #2]
   32c64:	ldr	r0, [pc, #3832]	; 33b64 <__assert_fail@plt+0x22958>
   32c68:	bl	1108c <strchr@plt>
   32c6c:	cmp	r0, #0
   32c70:	beq	32f40 <__assert_fail@plt+0x21d34>
   32c74:	sub	r3, fp, #256	; 0x100
   32c78:	cmp	r3, #1
   32c7c:	bls	32f60 <__assert_fail@plt+0x21d54>
   32c80:	ldr	r9, [pc, #4032]	; 33c48 <__assert_fail@plt+0x22a3c>
   32c84:	ldr	r1, [sp, #40]	; 0x28
   32c88:	mvn	r0, #19
   32c8c:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   32c90:	ldr	r2, [r9]
   32c94:	cmp	r2, #0
   32c98:	beq	32fd4 <__assert_fail@plt+0x21dc8>
   32c9c:	mov	r2, r7
   32ca0:	mov	r1, r8
   32ca4:	ldr	r0, [pc, #3772]	; 33b68 <__assert_fail@plt+0x2295c>
   32ca8:	bl	10f24 <printf@plt>
   32cac:	mov	r2, #7
   32cb0:	ldr	r1, [pc, #3972]	; 33c3c <__assert_fail@plt+0x22a30>
   32cb4:	mov	r0, r5
   32cb8:	bl	111d0 <strncmp@plt>
   32cbc:	subs	r7, r0, #0
   32cc0:	beq	331c0 <__assert_fail@plt+0x21fb4>
   32cc4:	mov	r2, #3
   32cc8:	ldr	r1, [pc, #3740]	; 33b6c <__assert_fail@plt+0x22960>
   32ccc:	mov	r0, r5
   32cd0:	bl	111d0 <strncmp@plt>
   32cd4:	subs	r7, r0, #0
   32cd8:	beq	333d4 <__assert_fail@plt+0x221c8>
   32cdc:	mov	r2, #7
   32ce0:	ldr	r1, [pc, #3928]	; 33c40 <__assert_fail@plt+0x22a34>
   32ce4:	mov	r0, r5
   32ce8:	bl	111d0 <strncmp@plt>
   32cec:	cmp	r0, #0
   32cf0:	beq	3363c <__assert_fail@plt+0x22430>
   32cf4:	mov	r2, #4
   32cf8:	ldr	r1, [pc, #3696]	; 33b70 <__assert_fail@plt+0x22964>
   32cfc:	mov	r0, r5
   32d00:	bl	111d0 <strncmp@plt>
   32d04:	subs	r7, r0, #0
   32d08:	beq	33890 <__assert_fail@plt+0x22684>
   32d0c:	mov	r2, #2
   32d10:	ldr	r1, [pc, #3656]	; 33b60 <__assert_fail@plt+0x22954>
   32d14:	mov	r0, r5
   32d18:	bl	111d0 <strncmp@plt>
   32d1c:	cmp	r0, #0
   32d20:	bne	330bc <__assert_fail@plt+0x21eb0>
   32d24:	ldrb	r1, [r5, #2]
   32d28:	ldr	r0, [pc, #3636]	; 33b64 <__assert_fail@plt+0x22958>
   32d2c:	bl	1108c <strchr@plt>
   32d30:	cmp	r0, #0
   32d34:	beq	330bc <__assert_fail@plt+0x21eb0>
   32d38:	sub	r3, fp, #256	; 0x100
   32d3c:	cmp	r3, #1
   32d40:	bls	330dc <__assert_fail@plt+0x21ed0>
   32d44:	cmp	r8, #0
   32d48:	bne	3379c <__assert_fail@plt+0x22590>
   32d4c:	ldr	r3, [r9]
   32d50:	cmp	r3, #0
   32d54:	bne	330b0 <__assert_fail@plt+0x21ea4>
   32d58:	ldr	r3, [sp, #36]	; 0x24
   32d5c:	cmp	r3, #0
   32d60:	beq	32d6c <__assert_fail@plt+0x21b60>
   32d64:	mov	r0, r3
   32d68:	bl	10f54 <free@plt>
   32d6c:	ldr	r9, [sp, #28]
   32d70:	ldr	r3, [sp, #32]
   32d74:	cmp	r3, r9
   32d78:	bls	335b8 <__assert_fail@plt+0x223ac>
   32d7c:	ldr	r2, [sp, #48]	; 0x30
   32d80:	ldr	r1, [sp, #32]
   32d84:	ldrh	r3, [r2, #66]	; 0x42
   32d88:	ldrb	r2, [r2, #23]
   32d8c:	sub	r7, r1, r9
   32d90:	cmp	r3, #50	; 0x32
   32d94:	cmpeq	r2, #13
   32d98:	moveq	r3, #1
   32d9c:	movne	r3, #0
   32da0:	beq	335cc <__assert_fail@plt+0x223c0>
   32da4:	cmp	r7, #11
   32da8:	bls	346c0 <__assert_fail@plt+0x234b4>
   32dac:	ldr	r6, [pc, #3520]	; 33b74 <__assert_fail@plt+0x22968>
   32db0:	mov	r1, #4
   32db4:	add	r0, r9, #8
   32db8:	ldr	r3, [r6]
   32dbc:	blx	r3
   32dc0:	ldr	r3, [r6]
   32dc4:	mov	r1, #4
   32dc8:	sub	r7, r7, #12
   32dcc:	add	r5, r9, #12
   32dd0:	mov	fp, r0
   32dd4:	mov	r0, r9
   32dd8:	blx	r3
   32ddc:	mov	r1, #4
   32de0:	ldr	r3, [r6]
   32de4:	mov	sl, r0
   32de8:	add	r0, r9, r1
   32dec:	blx	r3
   32df0:	ldr	r3, [sp, #216]	; 0xd8
   32df4:	add	r4, r3, #11
   32df8:	rsb	r2, r3, #0
   32dfc:	add	r4, r4, sl
   32e00:	sub	r3, r3, #1
   32e04:	and	r4, r4, r2
   32e08:	add	r3, r3, r0
   32e0c:	add	r3, r3, r4
   32e10:	and	r3, r3, r2
   32e14:	mov	r8, r0
   32e18:	add	r4, r9, r4
   32e1c:	add	r3, r9, r3
   32e20:	str	r3, [sp, #28]
   32e24:	sub	r3, r4, r5
   32e28:	cmp	r3, sl
   32e2c:	movcs	r2, #0
   32e30:	movcc	r2, #1
   32e34:	cmp	r3, r7
   32e38:	orrhi	r2, r2, #1
   32e3c:	cmp	r2, #0
   32e40:	bne	33dd0 <__assert_fail@plt+0x22bc4>
   32e44:	ldr	r1, [sp, #28]
   32e48:	sub	r1, r1, r4
   32e4c:	cmp	r1, r8
   32e50:	bcc	33dd0 <__assert_fail@plt+0x22bc4>
   32e54:	sub	r7, r7, r3
   32e58:	cmp	r1, r7
   32e5c:	bhi	33dd0 <__assert_fail@plt+0x22bc4>
   32e60:	add	r1, r5, sl
   32e64:	ldrb	r1, [r1, #-1]
   32e68:	cmp	r1, #0
   32e6c:	beq	32fe8 <__assert_fail@plt+0x21ddc>
   32e70:	cmp	r3, sl
   32e74:	strne	r2, [sp, #36]	; 0x24
   32e78:	beq	33578 <__assert_fail@plt+0x2236c>
   32e7c:	mov	r3, #0
   32e80:	strb	r3, [r5, sl]
   32e84:	cmp	sl, #0
   32e88:	beq	32c24 <__assert_fail@plt+0x21a18>
   32e8c:	mov	r2, #3
   32e90:	ldr	r1, [pc, #3284]	; 33b6c <__assert_fail@plt+0x22960>
   32e94:	mov	r0, r5
   32e98:	bl	111d0 <strncmp@plt>
   32e9c:	cmp	r0, #0
   32ea0:	beq	3312c <__assert_fail@plt+0x21f20>
   32ea4:	mov	r2, #7
   32ea8:	ldr	r1, [pc, #3272]	; 33b78 <__assert_fail@plt+0x2296c>
   32eac:	mov	r0, r5
   32eb0:	bl	111d0 <strncmp@plt>
   32eb4:	cmp	r0, #0
   32eb8:	beq	3353c <__assert_fail@plt+0x22330>
   32ebc:	mov	r2, #11
   32ec0:	ldr	r1, [pc, #3252]	; 33b7c <__assert_fail@plt+0x22970>
   32ec4:	mov	r0, r5
   32ec8:	bl	111d0 <strncmp@plt>
   32ecc:	cmp	r0, #0
   32ed0:	beq	337ec <__assert_fail@plt+0x225e0>
   32ed4:	mov	r2, #6
   32ed8:	ldr	r1, [pc, #3232]	; 33b80 <__assert_fail@plt+0x22974>
   32edc:	mov	r0, r5
   32ee0:	bl	111d0 <strncmp@plt>
   32ee4:	subs	r3, r0, #0
   32ee8:	beq	34118 <__assert_fail@plt+0x22f0c>
   32eec:	mov	r2, #4
   32ef0:	ldr	r1, [pc, #3212]	; 33b84 <__assert_fail@plt+0x22978>
   32ef4:	mov	r0, r5
   32ef8:	bl	111d0 <strncmp@plt>
   32efc:	cmp	r0, #0
   32f00:	bne	33e20 <__assert_fail@plt+0x22c14>
   32f04:	ldr	r3, [pc, #3196]	; 33b88 <__assert_fail@plt+0x2297c>
   32f08:	add	r7, r5, #4
   32f0c:	str	r3, [sp, #40]	; 0x28
   32f10:	b	32c40 <__assert_fail@plt+0x21a34>
   32f14:	ldr	r1, [pc, #3184]	; 33b8c <__assert_fail@plt+0x22980>
   32f18:	mov	r2, #5
   32f1c:	mov	r0, #0
   32f20:	bl	10f90 <dcgettext@plt>
   32f24:	ldr	r1, [sp, #216]	; 0xd8
   32f28:	bl	54dd0 <warn@@Base>
   32f2c:	mov	r3, #0
   32f30:	str	r3, [sp, #52]	; 0x34
   32f34:	ldr	r0, [sp, #52]	; 0x34
   32f38:	add	sp, sp, #172	; 0xac
   32f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32f40:	ldrb	r1, [r5]
   32f44:	ldr	r0, [pc, #3096]	; 33b64 <__assert_fail@plt+0x22958>
   32f48:	bl	1108c <strchr@plt>
   32f4c:	cmp	r0, #0
   32f50:	beq	32c80 <__assert_fail@plt+0x21a74>
   32f54:	sub	r3, fp, #256	; 0x100
   32f58:	cmp	r3, #1
   32f5c:	bhi	32c80 <__assert_fail@plt+0x21a74>
   32f60:	cmp	sl, #1
   32f64:	bls	33e84 <__assert_fail@plt+0x22c78>
   32f68:	ldr	r9, [pc, #3288]	; 33c48 <__assert_fail@plt+0x22a3c>
   32f6c:	ldrb	r1, [r5]
   32f70:	ldr	r3, [r9]
   32f74:	str	r1, [sp, #40]	; 0x28
   32f78:	cmp	r3, #0
   32f7c:	movne	r2, #28
   32f80:	moveq	r2, #20
   32f84:	cmp	r1, #71	; 0x47
   32f88:	movne	r3, r5
   32f8c:	beq	33348 <__assert_fail@plt+0x2213c>
   32f90:	ldr	r1, [sp, #40]	; 0x28
   32f94:	sub	r1, r1, #33	; 0x21
   32f98:	str	r1, [sp, #88]	; 0x58
   32f9c:	cmp	r1, #10
   32fa0:	ldrls	pc, [pc, r1, lsl #2]
   32fa4:	b	33354 <__assert_fail@plt+0x22148>
   32fa8:	strdeq	r3, [r3], -r0
   32fac:	andeq	r3, r3, r4, asr r3
   32fb0:	andeq	r3, r3, r4, asr r3
   32fb4:	strdeq	r3, [r3], -r0
   32fb8:	andeq	r3, r3, r4, asr r3
   32fbc:	andeq	r3, r3, r4, asr r3
   32fc0:	andeq	r3, r3, r4, asr r3
   32fc4:	andeq	r3, r3, r4, asr r3
   32fc8:	andeq	r3, r3, r4, asr r3
   32fcc:	strdeq	r3, [r3], -r0
   32fd0:	strdeq	r3, [r3], -r0
   32fd4:	mov	r2, r7
   32fd8:	mov	r1, r8
   32fdc:	ldr	r0, [pc, #2988]	; 33b90 <__assert_fail@plt+0x22984>
   32fe0:	bl	10f24 <printf@plt>
   32fe4:	b	32cac <__assert_fail@plt+0x21aa0>
   32fe8:	str	r1, [sp, #36]	; 0x24
   32fec:	b	32e84 <__assert_fail@plt+0x21c78>
   32ff0:	ldr	r3, [r6]
   32ff4:	mov	r0, r4
   32ff8:	mov	r1, #4
   32ffc:	blx	r3
   33000:	mov	r6, #1
   33004:	mov	r8, #0
   33008:	mov	r5, r0
   3300c:	sub	r4, fp, #256	; 0x100
   33010:	add	r7, sp, #164	; 0xa4
   33014:	clz	r4, r4
   33018:	lsr	r4, r4, #5
   3301c:	mov	r2, r4
   33020:	mov	ip, #0
   33024:	mov	r3, r7
   33028:	mov	r1, r5
   3302c:	ldr	r0, [sp, #48]	; 0x30
   33030:	str	ip, [sp, #164]	; 0xa4
   33034:	bl	180c0 <__assert_fail@plt+0x6eb4>
   33038:	cmp	r0, #0
   3303c:	movne	r4, #0
   33040:	cmp	r4, #0
   33044:	bne	351f4 <__assert_fail@plt+0x23fe8>
   33048:	adds	r7, r0, #0
   3304c:	movne	r7, #1
   33050:	tst	r7, r6
   33054:	beq	34ff8 <__assert_fail@plt+0x23dec>
   33058:	ldrd	r2, [r0, #8]
   3305c:	orrs	r1, r2, r3
   33060:	bne	34ff0 <__assert_fail@plt+0x23de4>
   33064:	cmp	fp, #256	; 0x100
   33068:	beq	35224 <__assert_fail@plt+0x24018>
   3306c:	mov	r2, #5
   33070:	ldr	r1, [pc, #2844]	; 33b94 <__assert_fail@plt+0x22988>
   33074:	mov	r0, r4
   33078:	bl	10f90 <dcgettext@plt>
   3307c:	mov	r1, r5
   33080:	bl	10f24 <printf@plt>
   33084:	ldr	r3, [pc, #3276]	; 33d58 <__assert_fail@plt+0x22b4c>
   33088:	str	r5, [r3, #-3912]	; 0xfffff0b8
   3308c:	ldr	r3, [sp, #164]	; 0xa4
   33090:	cmp	r3, #0
   33094:	beq	330b0 <__assert_fail@plt+0x21ea4>
   33098:	ldr	r1, [pc, #2808]	; 33b98 <__assert_fail@plt+0x2298c>
   3309c:	mov	r2, #5
   330a0:	mov	r0, #0
   330a4:	bl	10f90 <dcgettext@plt>
   330a8:	ldr	r1, [sp, #164]	; 0xa4
   330ac:	bl	10f24 <printf@plt>
   330b0:	mov	r0, #10
   330b4:	bl	110c8 <putchar@plt>
   330b8:	b	32d58 <__assert_fail@plt+0x21b4c>
   330bc:	ldrb	r1, [r5]
   330c0:	ldr	r0, [pc, #2716]	; 33b64 <__assert_fail@plt+0x22958>
   330c4:	bl	1108c <strchr@plt>
   330c8:	cmp	r0, #0
   330cc:	beq	32d44 <__assert_fail@plt+0x21b38>
   330d0:	sub	r3, fp, #256	; 0x100
   330d4:	cmp	r3, #1
   330d8:	bhi	32d44 <__assert_fail@plt+0x21b38>
   330dc:	cmp	r8, #16
   330e0:	ldrls	pc, [pc, r8, lsl #2]
   330e4:	b	34d60 <__assert_fail@plt+0x23b54>
   330e8:	andeq	r4, r3, ip, lsr #20
   330ec:	andeq	r4, r3, r0, ror #26
   330f0:	andeq	r4, r3, r0, ror #26
   330f4:	andeq	r4, r3, r0, ror #26
   330f8:	strdeq	r2, [r3], -r0
   330fc:	andeq	r4, r3, r0, ror #26
   33100:	andeq	r4, r3, r0, ror #26
   33104:	andeq	r4, r3, r0, ror #26
   33108:	andeq	r4, r3, r8, ror #20
   3310c:	andeq	r4, r3, r0, ror #26
   33110:	andeq	r4, r3, r0, ror #26
   33114:	andeq	r4, r3, r0, ror #26
   33118:	andeq	r4, r3, r0, ror #26
   3311c:	andeq	r4, r3, r0, ror #26
   33120:	andeq	r4, r3, r0, ror #26
   33124:	andeq	r4, r3, r0, ror #26
   33128:	andeq	r4, r3, ip, lsr #21
   3312c:	cmp	fp, #4
   33130:	beq	34390 <__assert_fail@plt+0x23184>
   33134:	bls	33174 <__assert_fail@plt+0x21f68>
   33138:	cmp	fp, #256	; 0x100
   3313c:	beq	34378 <__assert_fail@plt+0x2316c>
   33140:	bls	331a0 <__assert_fail@plt+0x21f94>
   33144:	ldr	r3, [pc, #2640]	; 33b9c <__assert_fail@plt+0x22990>
   33148:	cmp	fp, r3
   3314c:	beq	34330 <__assert_fail@plt+0x23124>
   33150:	ldr	r3, [pc, #2632]	; 33ba0 <__assert_fail@plt+0x22994>
   33154:	cmp	fp, r3
   33158:	bne	34348 <__assert_fail@plt+0x2313c>
   3315c:	mov	r2, #5
   33160:	ldr	r1, [pc, #2620]	; 33ba4 <__assert_fail@plt+0x22998>
   33164:	bl	10f90 <dcgettext@plt>
   33168:	str	r5, [sp, #40]	; 0x28
   3316c:	mov	r7, r0
   33170:	b	32c40 <__assert_fail@plt+0x21a34>
   33174:	cmp	fp, #2
   33178:	beq	34300 <__assert_fail@plt+0x230f4>
   3317c:	bhi	34318 <__assert_fail@plt+0x2310c>
   33180:	cmp	fp, #1
   33184:	bne	34348 <__assert_fail@plt+0x2313c>
   33188:	mov	r2, #5
   3318c:	ldr	r1, [pc, #2580]	; 33ba8 <__assert_fail@plt+0x2299c>
   33190:	bl	10f90 <dcgettext@plt>
   33194:	str	r5, [sp, #40]	; 0x28
   33198:	mov	r7, r0
   3319c:	b	32c40 <__assert_fail@plt+0x21a34>
   331a0:	cmp	fp, #5
   331a4:	bne	34348 <__assert_fail@plt+0x2313c>
   331a8:	mov	r2, fp
   331ac:	ldr	r1, [pc, #2552]	; 33bac <__assert_fail@plt+0x229a0>
   331b0:	bl	10f90 <dcgettext@plt>
   331b4:	str	r5, [sp, #40]	; 0x28
   331b8:	mov	r7, r0
   331bc:	b	32c40 <__assert_fail@plt+0x21a34>
   331c0:	cmp	fp, #102	; 0x66
   331c4:	beq	34888 <__assert_fail@plt+0x2367c>
   331c8:	bls	33200 <__assert_fail@plt+0x21ff4>
   331cc:	cmp	fp, #106	; 0x6a
   331d0:	beq	34870 <__assert_fail@plt+0x23664>
   331d4:	bhi	3324c <__assert_fail@plt+0x22040>
   331d8:	cmp	fp, #103	; 0x67
   331dc:	beq	3480c <__assert_fail@plt+0x23600>
   331e0:	cmp	fp, #104	; 0x68
   331e4:	bne	333cc <__assert_fail@plt+0x221c0>
   331e8:	mov	r2, #5
   331ec:	ldr	r1, [pc, #2492]	; 33bb0 <__assert_fail@plt+0x229a4>
   331f0:	bl	10f90 <dcgettext@plt>
   331f4:	mov	r1, r4
   331f8:	bl	10f24 <printf@plt>
   331fc:	b	32d58 <__assert_fail@plt+0x21b4c>
   33200:	cmp	fp, #2
   33204:	beq	34824 <__assert_fail@plt+0x23618>
   33208:	bls	33268 <__assert_fail@plt+0x2205c>
   3320c:	cmp	fp, #6
   33210:	beq	3483c <__assert_fail@plt+0x23630>
   33214:	cmp	fp, #101	; 0x65
   33218:	bne	333cc <__assert_fail@plt+0x221c0>
   3321c:	ldr	r1, [pc, #2448]	; 33bb4 <__assert_fail@plt+0x229a8>
   33220:	mov	r2, #5
   33224:	bl	10f90 <dcgettext@plt>
   33228:	bl	10f24 <printf@plt>
   3322c:	ldr	r3, [r6]
   33230:	mov	r0, r4
   33234:	mov	r1, #8
   33238:	blx	r3
   3323c:	bl	14cd8 <__assert_fail@plt+0x3acc>
   33240:	mov	r0, #10
   33244:	bl	110c8 <putchar@plt>
   33248:	b	32d58 <__assert_fail@plt+0x21b4c>
   3324c:	cmp	fp, #107	; 0x6b
   33250:	beq	34720 <__assert_fail@plt+0x23514>
   33254:	cmp	fp, #108	; 0x6c
   33258:	bne	333cc <__assert_fail@plt+0x221c0>
   3325c:	mov	r2, #5
   33260:	ldr	r1, [pc, #2384]	; 33bb8 <__assert_fail@plt+0x229ac>
   33264:	b	33224 <__assert_fail@plt+0x22018>
   33268:	cmp	fp, #1
   3326c:	bne	333cc <__assert_fail@plt+0x221c0>
   33270:	cmp	r8, #36	; 0x24
   33274:	bls	34af8 <__assert_fail@plt+0x238ec>
   33278:	add	r6, r4, #34	; 0x22
   3327c:	mov	r0, r6
   33280:	bl	11080 <strlen@plt>
   33284:	mov	r2, #5
   33288:	ldr	r1, [pc, #2348]	; 33bbc <__assert_fail@plt+0x229b0>
   3328c:	mov	r5, r0
   33290:	mov	r0, r7
   33294:	bl	10f90 <dcgettext@plt>
   33298:	mov	r1, r4
   3329c:	bl	10f24 <printf@plt>
   332a0:	mov	r2, #5
   332a4:	ldr	r1, [pc, #2324]	; 33bc0 <__assert_fail@plt+0x229b4>
   332a8:	mov	r0, r7
   332ac:	bl	10f90 <dcgettext@plt>
   332b0:	add	r1, r4, #17
   332b4:	bl	10f24 <printf@plt>
   332b8:	mov	r2, #5
   332bc:	ldr	r1, [pc, #2304]	; 33bc4 <__assert_fail@plt+0x229b8>
   332c0:	mov	r0, r7
   332c4:	bl	10f90 <dcgettext@plt>
   332c8:	mov	r1, r6
   332cc:	bl	10f24 <printf@plt>
   332d0:	mov	r0, r7
   332d4:	mov	r2, #5
   332d8:	ldr	r1, [pc, #2280]	; 33bc8 <__assert_fail@plt+0x229bc>
   332dc:	bl	10f90 <dcgettext@plt>
   332e0:	add	r1, r5, #35	; 0x23
   332e4:	add	r1, r4, r1
   332e8:	bl	10f24 <printf@plt>
   332ec:	b	32d58 <__assert_fail@plt+0x21b4c>
   332f0:	ldr	r0, [sp, #40]	; 0x28
   332f4:	str	r2, [sp, #100]	; 0x64
   332f8:	str	r3, [sp, #72]	; 0x48
   332fc:	bl	110c8 <putchar@plt>
   33300:	ldr	r3, [sp, #72]	; 0x48
   33304:	ldr	r2, [sp, #100]	; 0x64
   33308:	ldrb	r1, [r3, #1]
   3330c:	sub	r2, r2, #1
   33310:	str	r2, [sp, #72]	; 0x48
   33314:	sub	r2, r1, #1
   33318:	str	r1, [sp, #112]	; 0x70
   3331c:	cmp	r2, #7
   33320:	ldrls	pc, [pc, r2, lsl #2]
   33324:	b	354dc <__assert_fail@plt+0x242d0>
   33328:	ldrdeq	r4, [r3], -ip
   3332c:	strdeq	r4, [r3], -ip
   33330:	andeq	r4, r3, ip, lsl ip
   33334:	andeq	r4, r3, r8, lsr #24
   33338:	andeq	r4, r3, r4, lsr ip
   3333c:	andeq	r4, r3, r0, asr #24
   33340:	andeq	r4, r3, ip, lsl #22
   33344:			; <UNDEFINED> instruction: 0x00034bbc
   33348:	ldrb	r3, [r5, #1]
   3334c:	cmp	r3, #65	; 0x41
   33350:	beq	33f9c <__assert_fail@plt+0x22d90>
   33354:	mov	r2, #5
   33358:	ldr	r1, [pc, #2156]	; 33bcc <__assert_fail@plt+0x229c0>
   3335c:	mov	r0, #0
   33360:	bl	10f90 <dcgettext@plt>
   33364:	ldr	r1, [sp, #40]	; 0x28
   33368:	bl	548ac <error@@Base>
   3336c:	ldr	r1, [pc, #2140]	; 33bd0 <__assert_fail@plt+0x229c4>
   33370:	mov	r2, #5
   33374:	mov	r0, #0
   33378:	bl	10f90 <dcgettext@plt>
   3337c:	mov	r1, r0
   33380:	mvn	r0, #19
   33384:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   33388:	ldr	r2, [r9]
   3338c:	b	32c94 <__assert_fail@plt+0x21a88>
   33390:	cmp	fp, #1
   33394:	beq	3459c <__assert_fail@plt+0x23390>
   33398:	cmp	fp, #2
   3339c:	bne	3467c <__assert_fail@plt+0x23470>
   333a0:	mov	r2, #5
   333a4:	ldr	r1, [pc, #2088]	; 33bd4 <__assert_fail@plt+0x229c8>
   333a8:	bl	10f90 <dcgettext@plt>
   333ac:	bl	10f24 <printf@plt>
   333b0:	cmp	r8, #7
   333b4:	bhi	33f54 <__assert_fail@plt+0x22d48>
   333b8:	mov	r2, #5
   333bc:	ldr	r1, [pc, #2068]	; 33bd8 <__assert_fail@plt+0x229cc>
   333c0:	mov	r0, r7
   333c4:	bl	10f90 <dcgettext@plt>
   333c8:	bl	548ac <error@@Base>
   333cc:	str	r7, [sp, #52]	; 0x34
   333d0:	b	32d58 <__assert_fail@plt+0x21b4c>
   333d4:	cmp	fp, #3
   333d8:	beq	3455c <__assert_fail@plt+0x23350>
   333dc:	bls	33390 <__assert_fail@plt+0x22184>
   333e0:	cmp	fp, #5
   333e4:	beq	343a8 <__assert_fail@plt+0x2319c>
   333e8:	bcc	34630 <__assert_fail@plt+0x23424>
   333ec:	ldr	r3, [pc, #1964]	; 33ba0 <__assert_fail@plt+0x22994>
   333f0:	cmp	fp, r3
   333f4:	bne	3467c <__assert_fail@plt+0x23470>
   333f8:	add	r5, r4, r8
   333fc:	cmp	r5, r4
   33400:	str	r4, [sp, #148]	; 0x94
   33404:	bls	34f90 <__assert_fail@plt+0x23d84>
   33408:	mov	r6, r7
   3340c:	mov	r0, r4
   33410:	add	r7, sp, #164	; 0xa4
   33414:	str	r6, [sp, #40]	; 0x28
   33418:	ldr	r4, [sp, #132]	; 0x84
   3341c:	b	33468 <__assert_fail@plt+0x2225c>
   33420:	cmp	fp, #0
   33424:	cmpeq	sl, #4
   33428:	bne	3345c <__assert_fail@plt+0x22250>
   3342c:	ldrd	r8, [sp, #56]	; 0x38
   33430:	cmp	r9, #0
   33434:	cmpeq	r8, #1
   33438:	movne	r2, #1
   3343c:	moveq	r2, #0
   33440:	cmp	r6, #0
   33444:	moveq	r6, r2
   33448:	movne	r6, #1
   3344c:	cmp	r6, #0
   33450:	bne	34f88 <__assert_fail@plt+0x23d7c>
   33454:	mov	r6, r3
   33458:	mov	r4, r0
   3345c:	cmp	r5, r0
   33460:	str	r0, [sp, #148]	; 0x94
   33464:	bls	352fc <__assert_fail@plt+0x240f0>
   33468:	mov	r3, r5
   3346c:	mov	r2, #0
   33470:	mov	r1, r7
   33474:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   33478:	ldr	r3, [sp, #164]	; 0xa4
   3347c:	mov	fp, #0
   33480:	mov	sl, r0
   33484:	ldr	r0, [sp, #148]	; 0x94
   33488:	add	r0, r0, r3
   3348c:	cmp	r5, r0
   33490:	str	r0, [sp, #148]	; 0x94
   33494:	bls	349d0 <__assert_fail@plt+0x237c4>
   33498:	mov	r3, r5
   3349c:	mov	r2, fp
   334a0:	mov	r1, r7
   334a4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   334a8:	ldr	r3, [sp, #164]	; 0xa4
   334ac:	mov	r2, fp
   334b0:	str	fp, [sp, #60]	; 0x3c
   334b4:	str	r0, [sp, #56]	; 0x38
   334b8:	ldr	r0, [sp, #148]	; 0x94
   334bc:	add	r0, r0, r3
   334c0:	cmp	r5, r0
   334c4:	str	r0, [sp, #148]	; 0x94
   334c8:	bls	349d0 <__assert_fail@plt+0x237c4>
   334cc:	mov	r3, r5
   334d0:	mov	r1, r7
   334d4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   334d8:	ldr	r3, [sp, #148]	; 0x94
   334dc:	ldr	r2, [sp, #164]	; 0xa4
   334e0:	add	r3, r3, r2
   334e4:	str	r3, [sp, #148]	; 0x94
   334e8:	add	r0, r3, r0
   334ec:	cmp	r5, r0
   334f0:	bcc	349d0 <__assert_fail@plt+0x237c4>
   334f4:	cmp	fp, #0
   334f8:	cmpeq	sl, #1
   334fc:	bne	33420 <__assert_fail@plt+0x22214>
   33500:	ldr	r2, [sp, #40]	; 0x28
   33504:	cmp	r2, #0
   33508:	bne	34f88 <__assert_fail@plt+0x23d7c>
   3350c:	ldrd	r8, [sp, #56]	; 0x38
   33510:	subs	r2, r8, #1
   33514:	str	r2, [sp, #80]	; 0x50
   33518:	sbc	r2, r9, #0
   3351c:	str	r2, [sp, #84]	; 0x54
   33520:	ldrd	r8, [sp, #80]	; 0x50
   33524:	cmp	r9, #0
   33528:	cmpeq	r8, #1
   3352c:	bhi	34f88 <__assert_fail@plt+0x23d7c>
   33530:	str	r3, [sp, #40]	; 0x28
   33534:	str	r0, [sp, #116]	; 0x74
   33538:	b	3345c <__assert_fail@plt+0x22250>
   3353c:	sub	r3, fp, #7
   33540:	cmp	r3, #10
   33544:	ldrls	pc, [pc, r3, lsl #2]
   33548:	b	33f38 <__assert_fail@plt+0x22d2c>
   3354c:	andeq	r3, r3, r4, ror #31
   33550:	andeq	r3, r3, r8, asr #31
   33554:	andeq	r4, r3, r4, asr #1
   33558:	andeq	r4, r3, r8, lsr #1
   3355c:	andeq	r4, r3, ip, lsl #1
   33560:	andeq	r4, r3, r0, ror r0
   33564:	andeq	r4, r3, r4, asr r0
   33568:	andeq	r4, r3, r8, lsr r0
   3356c:	andeq	r4, r3, ip, lsl r0
   33570:	andeq	r4, r3, r0
   33574:	andeq	r4, r3, r0, ror #1
   33578:	add	r0, sl, #1
   3357c:	bl	11020 <malloc@plt>
   33580:	subs	r3, r0, #0
   33584:	str	r3, [sp, #36]	; 0x24
   33588:	beq	335a0 <__assert_fail@plt+0x22394>
   3358c:	mov	r1, r5
   33590:	mov	r2, sl
   33594:	bl	10f6c <memcpy@plt>
   33598:	ldr	r5, [sp, #36]	; 0x24
   3359c:	b	32e7c <__assert_fail@plt+0x21c70>
   335a0:	mov	r2, #5
   335a4:	ldr	r1, [pc, #1584]	; 33bdc <__assert_fail@plt+0x229d0>
   335a8:	bl	10f90 <dcgettext@plt>
   335ac:	ldr	r3, [sp, #36]	; 0x24
   335b0:	str	r3, [sp, #52]	; 0x34
   335b4:	bl	548ac <error@@Base>
   335b8:	ldr	r0, [sp, #96]	; 0x60
   335bc:	bl	10f54 <free@plt>
   335c0:	ldr	r0, [sp, #52]	; 0x34
   335c4:	add	sp, sp, #172	; 0xac
   335c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   335cc:	cmp	r7, #23
   335d0:	bls	35404 <__assert_fail@plt+0x241f8>
   335d4:	ldr	r6, [pc, #1432]	; 33b74 <__assert_fail@plt+0x22968>
   335d8:	mov	r1, #8
   335dc:	add	r0, r9, #16
   335e0:	ldr	r3, [r6]
   335e4:	blx	r3
   335e8:	ldr	r3, [r6]
   335ec:	mov	r1, #8
   335f0:	add	r5, r9, #24
   335f4:	sub	r7, r7, #24
   335f8:	mov	fp, r0
   335fc:	mov	r0, r9
   33600:	blx	r3
   33604:	mov	r1, #8
   33608:	ldr	r3, [r6]
   3360c:	mov	sl, r0
   33610:	add	r0, r9, r1
   33614:	blx	r3
   33618:	add	r4, sl, #7
   3361c:	bic	r4, r4, #7
   33620:	add	r4, r5, r4
   33624:	add	r3, r0, #7
   33628:	bic	r3, r3, #7
   3362c:	add	r3, r4, r3
   33630:	mov	r8, r0
   33634:	str	r3, [sp, #28]
   33638:	b	32e24 <__assert_fail@plt+0x21c18>
   3363c:	ldr	r3, [pc, #1820]	; 33d60 <__assert_fail@plt+0x22b54>
   33640:	mov	r0, r4
   33644:	ldr	r3, [r3]
   33648:	cmp	r3, #0
   3364c:	moveq	r5, #8
   33650:	movne	r5, #4
   33654:	ldr	r3, [r6]
   33658:	mov	r1, r5
   3365c:	blx	r3
   33660:	add	sl, r4, r5
   33664:	ldr	r3, [r6]
   33668:	add	r9, sl, r5
   3366c:	mov	r7, r5
   33670:	strd	r0, [sp, #40]	; 0x28
   33674:	mov	r0, sl
   33678:	mov	r1, r5
   3367c:	blx	r3
   33680:	ldr	r3, [r6]
   33684:	add	r5, r9, r5
   33688:	add	r6, r4, r8
   3368c:	mov	sl, r0
   33690:	mov	fp, r1
   33694:	mov	r0, r9
   33698:	mov	r1, r7
   3369c:	blx	r3
   336a0:	strd	r0, [sp, #72]	; 0x48
   336a4:	mov	r0, r5
   336a8:	bl	11080 <strlen@plt>
   336ac:	add	r0, r0, #1
   336b0:	add	r7, r5, r0
   336b4:	mov	r0, r7
   336b8:	bl	11080 <strlen@plt>
   336bc:	add	r0, r0, #1
   336c0:	add	r8, r7, r0
   336c4:	mov	r0, r8
   336c8:	bl	11080 <strlen@plt>
   336cc:	mov	r2, #5
   336d0:	ldr	r1, [pc, #1288]	; 33be0 <__assert_fail@plt+0x229d4>
   336d4:	add	r0, r0, #1
   336d8:	add	r4, r8, r0
   336dc:	mov	r0, #0
   336e0:	bl	10f90 <dcgettext@plt>
   336e4:	mov	r1, r5
   336e8:	bl	10f24 <printf@plt>
   336ec:	mov	r2, #5
   336f0:	ldr	r1, [pc, #1260]	; 33be4 <__assert_fail@plt+0x229d8>
   336f4:	mov	r0, #0
   336f8:	bl	10f90 <dcgettext@plt>
   336fc:	mov	r1, r7
   33700:	bl	10f24 <printf@plt>
   33704:	mov	r2, #5
   33708:	ldr	r1, [pc, #1240]	; 33be8 <__assert_fail@plt+0x229dc>
   3370c:	mov	r0, #0
   33710:	bl	10f90 <dcgettext@plt>
   33714:	bl	10f24 <printf@plt>
   33718:	ldrd	r0, [sp, #40]	; 0x28
   3371c:	mov	r2, #5
   33720:	bl	14244 <__assert_fail@plt+0x3038>
   33724:	mov	r2, #5
   33728:	ldr	r1, [pc, #1212]	; 33bec <__assert_fail@plt+0x229e0>
   3372c:	mov	r0, #0
   33730:	bl	10f90 <dcgettext@plt>
   33734:	bl	10f24 <printf@plt>
   33738:	mov	r1, fp
   3373c:	mov	r0, sl
   33740:	mov	r2, #5
   33744:	bl	14244 <__assert_fail@plt+0x3038>
   33748:	mov	r2, #5
   3374c:	ldr	r1, [pc, #1180]	; 33bf0 <__assert_fail@plt+0x229e4>
   33750:	mov	r0, #0
   33754:	bl	10f90 <dcgettext@plt>
   33758:	bl	10f24 <printf@plt>
   3375c:	ldrd	r0, [sp, #72]	; 0x48
   33760:	mov	r2, #5
   33764:	bl	14244 <__assert_fail@plt+0x3038>
   33768:	mov	r0, #10
   3376c:	bl	110c8 <putchar@plt>
   33770:	mov	r2, #5
   33774:	ldr	r1, [pc, #1144]	; 33bf4 <__assert_fail@plt+0x229e8>
   33778:	mov	r0, #0
   3377c:	bl	10f90 <dcgettext@plt>
   33780:	ldr	r3, [sp, #52]	; 0x34
   33784:	cmp	r6, r4
   33788:	movne	r3, #0
   3378c:	mov	r1, r8
   33790:	str	r3, [sp, #52]	; 0x34
   33794:	bl	10f24 <printf@plt>
   33798:	b	32d58 <__assert_fail@plt+0x21b4c>
   3379c:	mov	r2, #5
   337a0:	ldr	r1, [pc, #1104]	; 33bf8 <__assert_fail@plt+0x229ec>
   337a4:	mov	r0, #0
   337a8:	bl	10f90 <dcgettext@plt>
   337ac:	bl	10f24 <printf@plt>
   337b0:	sub	r7, r8, #1
   337b4:	ldr	r5, [pc, #1316]	; 33ce0 <__assert_fail@plt+0x22ad4>
   337b8:	add	r7, r4, r7
   337bc:	sub	r4, r4, #1
   337c0:	ldrb	r1, [r4, #1]!
   337c4:	mov	r0, r5
   337c8:	bl	10f24 <printf@plt>
   337cc:	cmp	r7, r4
   337d0:	bne	337c0 <__assert_fail@plt+0x225b4>
   337d4:	ldr	r3, [r9]
   337d8:	cmp	r3, #0
   337dc:	bne	330b0 <__assert_fail@plt+0x21ea4>
   337e0:	mov	r0, #10
   337e4:	bl	110c8 <putchar@plt>
   337e8:	b	32d4c <__assert_fail@plt+0x21b40>
   337ec:	cmp	fp, #1
   337f0:	beq	34a14 <__assert_fail@plt+0x23808>
   337f4:	cmp	fp, #31
   337f8:	bls	34708 <__assert_fail@plt+0x234fc>
   337fc:	ldr	r3, [sp, #48]	; 0x30
   33800:	ldrh	r3, [r3, #66]	; 0x42
   33804:	cmp	r3, #41	; 0x29
   33808:	beq	33864 <__assert_fail@plt+0x22658>
   3380c:	bls	33854 <__assert_fail@plt+0x22648>
   33810:	cmp	r3, #43	; 0x2b
   33814:	beq	33864 <__assert_fail@plt+0x22658>
   33818:	ldr	r2, [pc, #988]	; 33bfc <__assert_fail@plt+0x229f0>
   3381c:	cmp	r3, r2
   33820:	beq	33864 <__assert_fail@plt+0x22658>
   33824:	cmp	fp, #33	; 0x21
   33828:	beq	340fc <__assert_fail@plt+0x22ef0>
   3382c:	cmp	fp, #35	; 0x23
   33830:	beq	33874 <__assert_fail@plt+0x22668>
   33834:	ldr	r2, [pc, #964]	; 33c00 <__assert_fail@plt+0x229f4>
   33838:	sub	r3, fp, #32
   3383c:	mov	r1, #64	; 0x40
   33840:	ldr	r0, [pc, #956]	; 33c04 <__assert_fail@plt+0x229f8>
   33844:	bl	110b0 <snprintf@plt>
   33848:	ldr	r7, [pc, #948]	; 33c04 <__assert_fail@plt+0x229f8>
   3384c:	str	r5, [sp, #40]	; 0x28
   33850:	b	32c40 <__assert_fail@plt+0x21a34>
   33854:	cmp	r3, #2
   33858:	beq	33864 <__assert_fail@plt+0x22658>
   3385c:	cmp	r3, #18
   33860:	bne	33824 <__assert_fail@plt+0x22618>
   33864:	cmp	fp, #32
   33868:	beq	340fc <__assert_fail@plt+0x22ef0>
   3386c:	cmp	fp, #34	; 0x22
   33870:	bne	33834 <__assert_fail@plt+0x22628>
   33874:	mov	r2, #5
   33878:	ldr	r1, [pc, #904]	; 33c08 <__assert_fail@plt+0x229fc>
   3387c:	mov	r0, #0
   33880:	bl	10f90 <dcgettext@plt>
   33884:	str	r5, [sp, #40]	; 0x28
   33888:	mov	r7, r0
   3388c:	b	32c40 <__assert_fail@plt+0x21a34>
   33890:	ldr	r3, [pc, #1224]	; 33d60 <__assert_fail@plt+0x22b54>
   33894:	ldr	r3, [r3]
   33898:	cmp	r3, #0
   3389c:	ldr	r3, [pc, #872]	; 33c0c <__assert_fail@plt+0x22a00>
   338a0:	movne	r5, #4
   338a4:	moveq	r5, #8
   338a8:	cmp	fp, r3
   338ac:	bne	32d4c <__assert_fail@plt+0x21b40>
   338b0:	lsl	r9, r5, #1
   338b4:	cmp	r8, r9
   338b8:	bcc	34ae0 <__assert_fail@plt+0x238d4>
   338bc:	add	r3, r4, r8
   338c0:	str	r3, [sp, #100]	; 0x64
   338c4:	ldrb	fp, [r3, #-1]
   338c8:	cmp	fp, #0
   338cc:	bne	35254 <__assert_fail@plt+0x24048>
   338d0:	ldr	r3, [r6]
   338d4:	mov	r0, r4
   338d8:	mov	r1, r5
   338dc:	add	r4, r4, r5
   338e0:	str	r4, [sp, #72]	; 0x48
   338e4:	blx	r3
   338e8:	ldr	r3, [r6]
   338ec:	add	sl, r9, r5
   338f0:	strd	r0, [sp, #40]	; 0x28
   338f4:	mov	r0, r4
   338f8:	mov	r1, r5
   338fc:	blx	r3
   33900:	mov	r2, sl
   33904:	mov	r3, fp
   33908:	strd	r0, [sp, #88]	; 0x58
   3390c:	mvn	r0, r9
   33910:	mvn	r1, #0
   33914:	bl	58c00 <warn@@Base+0x3e30>
   33918:	ldrd	r2, [sp, #40]	; 0x28
   3391c:	mov	lr, #0
   33920:	cmp	r3, r1
   33924:	cmpeq	r2, r0
   33928:	bhi	346e8 <__assert_fail@plt+0x234dc>
   3392c:	mov	r1, r3
   33930:	umull	r2, r3, r5, r2
   33934:	mla	r3, r5, r1, r3
   33938:	adds	r4, r2, r2
   3393c:	adc	r7, r3, r3
   33940:	adds	r4, r4, r2
   33944:	adc	r3, r7, r3
   33948:	adds	r2, r4, r9
   3394c:	adc	r3, r3, lr
   33950:	str	r2, [sp, #104]	; 0x68
   33954:	str	r3, [sp, #108]	; 0x6c
   33958:	ldrd	r2, [sp, #104]	; 0x68
   3395c:	mov	r1, #0
   33960:	cmp	r1, r3
   33964:	cmpeq	r8, r2
   33968:	bcc	346e8 <__assert_fail@plt+0x234dc>
   3396c:	ldr	r1, [pc, #668]	; 33c10 <__assert_fail@plt+0x22a04>
   33970:	mov	r2, #5
   33974:	mov	r0, fp
   33978:	bl	10f90 <dcgettext@plt>
   3397c:	bl	10f24 <printf@plt>
   33980:	ldrd	r2, [sp, #88]	; 0x58
   33984:	ldr	r0, [pc, #648]	; 33c14 <__assert_fail@plt+0x22a08>
   33988:	bl	10f24 <printf@plt>
   3398c:	mov	r0, #10
   33990:	bl	110c8 <putchar@plt>
   33994:	mov	r2, #5
   33998:	ldr	r1, [pc, #632]	; 33c18 <__assert_fail@plt+0x22a0c>
   3399c:	mov	r0, fp
   339a0:	bl	10f90 <dcgettext@plt>
   339a4:	mov	r2, #5
   339a8:	ldr	r1, [pc, #620]	; 33c1c <__assert_fail@plt+0x22a10>
   339ac:	mov	r7, r0
   339b0:	mov	r0, fp
   339b4:	bl	10f90 <dcgettext@plt>
   339b8:	mov	r2, #5
   339bc:	ldr	r1, [pc, #604]	; 33c20 <__assert_fail@plt+0x22a14>
   339c0:	mov	r4, r0
   339c4:	mov	r0, fp
   339c8:	bl	10f90 <dcgettext@plt>
   339cc:	mov	r2, #5
   339d0:	ldr	r1, [pc, #588]	; 33c24 <__assert_fail@plt+0x22a18>
   339d4:	mov	r8, r0
   339d8:	mov	r0, fp
   339dc:	bl	10f90 <dcgettext@plt>
   339e0:	ldr	ip, [sp, #72]	; 0x48
   339e4:	mov	r2, r4
   339e8:	add	r4, ip, r5
   339ec:	ldr	ip, [sp, #40]	; 0x28
   339f0:	add	r3, r9, #4
   339f4:	str	r3, [sp, #4]
   339f8:	add	r1, r9, #2
   339fc:	str	r8, [sp]
   33a00:	mla	sl, sl, ip, r4
   33a04:	str	r0, [sp, #8]
   33a08:	mov	r0, r7
   33a0c:	bl	10f24 <printf@plt>
   33a10:	ldrd	r2, [sp, #40]	; 0x28
   33a14:	subs	r1, r2, #1
   33a18:	str	r1, [sp, #64]	; 0x40
   33a1c:	sbc	r1, r3, #0
   33a20:	orrs	r3, r2, r3
   33a24:	str	r1, [sp, #68]	; 0x44
   33a28:	beq	32d58 <__assert_fail@plt+0x21b4c>
   33a2c:	ldr	r3, [sp, #100]	; 0x64
   33a30:	cmp	r3, sl
   33a34:	beq	33b3c <__assert_fail@plt+0x22930>
   33a38:	ldr	r7, [pc, #284]	; 33b5c <__assert_fail@plt+0x22950>
   33a3c:	add	r4, r4, r5
   33a40:	mov	fp, r9
   33a44:	sub	r0, r4, r5
   33a48:	ldr	r3, [r6]
   33a4c:	mov	r1, r5
   33a50:	add	r8, r0, fp
   33a54:	blx	r3
   33a58:	mov	r2, r0
   33a5c:	mov	r3, r1
   33a60:	mov	r0, r4
   33a64:	strd	r2, [sp, #88]	; 0x58
   33a68:	mov	r1, r5
   33a6c:	ldr	r3, [r6]
   33a70:	blx	r3
   33a74:	ldr	r4, [r6]
   33a78:	str	r8, [sp, #40]	; 0x28
   33a7c:	strd	r0, [sp, #72]	; 0x48
   33a80:	mov	r0, r8
   33a84:	mov	r1, r5
   33a88:	blx	r4
   33a8c:	mov	r8, r0
   33a90:	ldr	r0, [pc, #400]	; 33c28 <__assert_fail@plt+0x22a1c>
   33a94:	mov	r9, r1
   33a98:	bl	10f24 <printf@plt>
   33a9c:	ldrd	r2, [sp, #88]	; 0x58
   33aa0:	mov	r1, r3
   33aa4:	mov	r0, r2
   33aa8:	mov	r2, #5
   33aac:	bl	14244 <__assert_fail@plt+0x3038>
   33ab0:	mov	r0, r7
   33ab4:	bl	10f24 <printf@plt>
   33ab8:	ldrd	r0, [sp, #72]	; 0x48
   33abc:	mov	r2, #5
   33ac0:	bl	14244 <__assert_fail@plt+0x3038>
   33ac4:	mov	r0, r7
   33ac8:	bl	10f24 <printf@plt>
   33acc:	mov	r2, #5
   33ad0:	mov	r1, r9
   33ad4:	mov	r0, r8
   33ad8:	bl	14244 <__assert_fail@plt+0x3038>
   33adc:	mov	r1, sl
   33ae0:	ldr	r0, [pc, #324]	; 33c2c <__assert_fail@plt+0x22a20>
   33ae4:	bl	10f24 <printf@plt>
   33ae8:	mov	r0, sl
   33aec:	bl	11080 <strlen@plt>
   33af0:	ldr	r3, [sp, #64]	; 0x40
   33af4:	mvn	r9, #0
   33af8:	subs	r3, r3, #1
   33afc:	str	r3, [sp, #64]	; 0x40
   33b00:	ldr	r3, [sp, #68]	; 0x44
   33b04:	mvn	r8, #0
   33b08:	sbc	r3, r3, #0
   33b0c:	str	r3, [sp, #68]	; 0x44
   33b10:	ldrd	r2, [sp, #64]	; 0x40
   33b14:	cmp	r3, r9
   33b18:	cmpeq	r2, r8
   33b1c:	ldr	r8, [sp, #40]	; 0x28
   33b20:	add	r4, r8, fp
   33b24:	add	r0, r0, #1
   33b28:	add	sl, sl, r0
   33b2c:	beq	32d58 <__assert_fail@plt+0x21b4c>
   33b30:	ldr	r3, [sp, #100]	; 0x64
   33b34:	cmp	r3, sl
   33b38:	bne	33a44 <__assert_fail@plt+0x22838>
   33b3c:	mov	r2, #5
   33b40:	ldr	r1, [pc, #232]	; 33c30 <__assert_fail@plt+0x22a24>
   33b44:	b	346f0 <__assert_fail@plt+0x234e4>
   33b48:	andeq	sl, r6, r4, asr #16
   33b4c:	ldrdeq	sl, [r6], -ip
   33b50:	strdeq	sl, [r6], -r8
   33b54:	andeq	sl, r6, r0, lsl #18
   33b58:	andeq	sl, r6, r0, ror #15
   33b5c:	andeq	r6, r6, ip, lsl r5
   33b60:	andeq	sl, r6, r8, asr pc
   33b64:	andeq	sl, r6, r4, lsr r8
   33b68:	andeq	fp, r6, r0, ror #2
   33b6c:			; <UNDEFINED> instruction: 0x000637b0
   33b70:	andeq	fp, r6, r4, lsr r6
   33b74:	andeq	lr, r9, ip, asr sp
   33b78:	andeq	sl, r6, r0, ror #22
   33b7c:	andeq	sl, r6, r4, ror #25
   33b80:	andeq	sl, r6, r8, asr sp
   33b84:	andeq	sl, r6, r0, lsl #28
   33b88:	muleq	r6, r0, pc	; <UNPREDICTABLE>
   33b8c:	andeq	sl, r6, ip, lsr #17
   33b90:	andeq	fp, r6, r0, ror r1
   33b94:	andeq	fp, r6, r4, lsl #16
   33b98:	strdeq	r7, [r6], -r4
   33b9c:	andeq	r0, r0, r1, lsl #2
   33ba0:	andeq	r2, r0, r3, lsr #6
   33ba4:	andeq	sl, r6, ip, lsr fp
   33ba8:	andeq	sl, r6, r8, asr #20
   33bac:	andeq	sl, r6, ip, ror #21
   33bb0:	andeq	fp, r6, ip, lsr #6
   33bb4:	andeq	fp, r6, r0, asr #4
   33bb8:	andeq	fp, r6, r0, asr r2
   33bbc:	andeq	fp, r6, r0, lsl #3
   33bc0:	muleq	r6, ip, r1
   33bc4:			; <UNDEFINED> instruction: 0x0006b1b8
   33bc8:	ldrdeq	fp, [r6], -r4
   33bcc:	andeq	sl, r6, ip, lsr #31
   33bd0:	ldrdeq	sl, [r6], -ip
   33bd4:	andeq	fp, r6, r4, lsr #7
   33bd8:	andeq	fp, r6, r4, asr #7
   33bdc:	andeq	sl, r6, r8, lsl sl
   33be0:	ldrdeq	fp, [r6], -r0
   33be4:	andeq	fp, r6, r4, ror #11
   33be8:	strdeq	fp, [r6], -r4
   33bec:	andeq	fp, r6, r4, lsl #12
   33bf0:	andeq	fp, r6, r0, lsl r6
   33bf4:	andeq	fp, r6, r0, lsr #12
   33bf8:	andeq	fp, r6, r0, lsr r8
   33bfc:	andeq	r9, r0, r6, lsr #32
   33c00:	andeq	sl, r6, r8, asr #26
   33c04:	andeq	fp, r9, ip, asr r3
   33c08:	andeq	sl, r6, r8, lsr #26
   33c0c:	strbmi	r4, [r9], -r5, asr #24
   33c10:	andeq	fp, r6, ip, asr #13
   33c14:	andeq	r2, r6, r0, ror sp
   33c18:	ldrdeq	fp, [r6], -ip
   33c1c:	andeq	fp, r6, ip, ror #13
   33c20:	strdeq	fp, [r6], -r4
   33c24:	strdeq	fp, [r6], -r8
   33c28:	andeq	r8, r6, r4, asr #26
   33c2c:	andeq	fp, r6, r4, lsr r7
   33c30:	andeq	fp, r6, r4, lsl #14
   33c34:	muleq	r6, r4, r9
   33c38:	ldrdeq	sl, [r6], -r4
   33c3c:	andeq	sl, r6, r8, lsl #28
   33c40:	andeq	sl, r6, r4, lsr #30
   33c44:	muleq	r9, ip, r3
   33c48:	andeq	lr, r9, r8, lsr #26
   33c4c:	muleq	r6, r8, pc	; <UNPREDICTABLE>
   33c50:	andeq	sl, r6, ip, lsr r8
   33c54:	andeq	sl, r6, r4, ror #16
   33c58:	ldrdeq	fp, [r6], -ip
   33c5c:	andeq	sl, r6, r8, asr pc
   33c60:	andeq	sl, r6, r8, lsl #23
   33c64:	andeq	sl, r6, r8, ror #22
   33c68:	muleq	r6, ip, ip
   33c6c:	andeq	sl, r6, r4, ror ip
   33c70:	andeq	sl, r6, r0, asr ip
   33c74:	andeq	sl, r6, ip, lsr #24
   33c78:	andeq	sl, r6, ip, lsl #24
   33c7c:	andeq	sl, r6, r8, ror #23
   33c80:	andeq	sl, r6, r8, asr #23
   33c84:	andeq	sl, r6, r8, lsr #23
   33c88:			; <UNDEFINED> instruction: 0x0006acbc
   33c8c:	andeq	sl, r6, ip, lsl #26
   33c90:	ldrdeq	sl, [r6], -r0
   33c94:	andeq	sl, r6, ip, ror #20
   33c98:	muleq	r6, ip, sl
   33c9c:	andeq	sl, r6, r0, lsr #22
   33ca0:	andeq	fp, r9, ip, lsl r4
   33ca4:	andeq	sl, r6, r4, lsl #22
   33ca8:	andeq	sl, r6, r8, asr #21
   33cac:	andeq	fp, r6, r4, lsl #8
   33cb0:	andeq	fp, r6, ip, lsl r5
   33cb4:			; <UNDEFINED> instruction: 0x00068eb8
   33cb8:	andeq	fp, r6, r8, ror #10
   33cbc:	andeq	fp, r6, r4, asr #8
   33cc0:	andeq	fp, r6, r0, lsl #10
   33cc4:	andeq	fp, r6, r0, asr #6
   33cc8:	andeq	fp, r6, r0, asr r3
   33ccc:	andeq	lr, r5, ip, asr #27
   33cd0:	andeq	r3, r6, ip, asr #14
   33cd4:	andeq	fp, r6, r4, ror r3
   33cd8:	muleq	r6, r4, r3
   33cdc:	andeq	fp, r6, ip, ror #10
   33ce0:	andeq	r7, r6, r8, ror #29
   33ce4:	andeq	sl, r6, ip, lsl #18
   33ce8:	andeq	sl, r6, r0, asr r9
   33cec:	muleq	r6, r4, r6
   33cf0:	andeq	r5, r6, r4, asr r4
   33cf4:	andeq	fp, r6, r0, ror #4
   33cf8:	andeq	fp, r6, r0, lsl #5
   33cfc:	muleq	r6, r8, r2
   33d00:	andeq	fp, r6, ip, lsr #5
   33d04:	andeq	fp, r6, r8, asr #5
   33d08:	andeq	fp, r6, r8, lsl r3
   33d0c:	andeq	fp, r6, r4, lsl #4
   33d10:	andeq	fp, r6, r8, lsl r2
   33d14:	andeq	fp, r6, r4, lsr r2
   33d18:	strdeq	fp, [r6], -r4
   33d1c:	andeq	fp, r6, r0, ror #5
   33d20:	andeq	fp, r6, r8, ror #9
   33d24:	muleq	r6, r0, r4
   33d28:	ldrdeq	fp, [r6], -r8
   33d2c:	andeq	lr, r7, r0, lsr r8
   33d30:			; <UNDEFINED> instruction: 0x0006adb0
   33d34:			; <UNDEFINED> instruction: 0xd1b71759
   33d38:	cdpmi	12, 12, cr14, cr4, cr15, {2}
   33d3c:	strbpl	r3, [r6, #2953]!	; 0xb89
   33d40:	andeq	fp, r6, ip, ror #2
   33d44:	andeq	r4, r6, r4, ror #19
   33d48:	andeq	sl, r6, r0, ror #26
   33d4c:	andeq	fp, r6, r4, lsr #11
   33d50:	andeq	fp, r6, r0, asr #10
   33d54:	strdeq	sl, [r6], -r0
   33d58:	andeq	ip, r9, r0, lsr r4
   33d5c:	andeq	fp, r6, r4, asr #14
   33d60:	andeq	sl, r9, r8, lsr r4
   33d64:	andeq	fp, r6, ip, lsr r6
   33d68:	strdeq	fp, [r6], -r0
   33d6c:	andeq	fp, r6, r4, lsr r0
   33d70:	andeq	pc, r5, r0, lsl #1
   33d74:	andeq	pc, r7, r8, ror #28
   33d78:	andeq	fp, r6, ip, lsr r0
   33d7c:	andeq	pc, r5, ip, ror r0	; <UNPREDICTABLE>
   33d80:	strdeq	sl, [r6], -r0
   33d84:	andeq	pc, r5, r8, ror r0	; <UNPREDICTABLE>
   33d88:	strdeq	sl, [r6], -ip
   33d8c:	andeq	sl, r6, ip, lsr #16
   33d90:	andeq	fp, r6, ip
   33d94:	andeq	fp, r6, r4, lsl r0
   33d98:	andeq	fp, r6, r4, lsr #32
   33d9c:	andeq	fp, r6, ip, lsr #32
   33da0:	andeq	sl, r6, r0, lsr r8
   33da4:	andeq	fp, r6, r0, asr r1
   33da8:	andeq	r8, r6, ip, ror ip
   33dac:	andeq	r3, r6, r8, asr r0
   33db0:	strdeq	fp, [r6], -r8
   33db4:	andeq	fp, r6, ip, lsr r1
   33db8:	andeq	fp, r6, r8, asr r1
   33dbc:	muleq	r6, r4, r7
   33dc0:			; <UNDEFINED> instruction: 0x0006b7bc
   33dc4:	andeq	sl, r6, ip, asr pc
   33dc8:	mvnpl	r8, pc, lsl r5
   33dcc:	tstmi	fp, #2096	; 0x830
   33dd0:	mov	r2, #5
   33dd4:	ldr	r1, [pc, #-424]	; 33c34 <__assert_fail@plt+0x22a28>
   33dd8:	mov	r0, #0
   33ddc:	bl	10f90 <dcgettext@plt>
   33de0:	ldr	r2, [sp, #96]	; 0x60
   33de4:	sub	r1, r9, r2
   33de8:	bl	54dd0 <warn@@Base>
   33dec:	mov	r2, #5
   33df0:	ldr	r1, [pc, #-448]	; 33c38 <__assert_fail@plt+0x22a2c>
   33df4:	mov	r0, #0
   33df8:	bl	10f90 <dcgettext@plt>
   33dfc:	ldr	r2, [sp, #216]	; 0xd8
   33e00:	mov	r3, r8
   33e04:	str	r2, [sp]
   33e08:	mov	r1, fp
   33e0c:	mov	r2, sl
   33e10:	bl	54dd0 <warn@@Base>
   33e14:	ldr	r0, [sp, #96]	; 0x60
   33e18:	bl	10f54 <free@plt>
   33e1c:	b	335c0 <__assert_fail@plt+0x223b4>
   33e20:	mov	r2, #7
   33e24:	ldr	r1, [pc, #-496]	; 33c3c <__assert_fail@plt+0x22a30>
   33e28:	mov	r0, r5
   33e2c:	bl	111d0 <strncmp@plt>
   33e30:	cmp	r0, #0
   33e34:	beq	34140 <__assert_fail@plt+0x22f34>
   33e38:	mov	r2, #7
   33e3c:	ldr	r1, [pc, #-516]	; 33c40 <__assert_fail@plt+0x22a34>
   33e40:	mov	r0, r5
   33e44:	bl	111d0 <strncmp@plt>
   33e48:	cmp	r0, #0
   33e4c:	bne	33f38 <__assert_fail@plt+0x22d2c>
   33e50:	cmp	fp, #3
   33e54:	mov	r2, #5
   33e58:	beq	35240 <__assert_fail@plt+0x24034>
   33e5c:	ldr	r1, [pc, #-372]	; 33cf0 <__assert_fail@plt+0x22ae4>
   33e60:	bl	10f90 <dcgettext@plt>
   33e64:	mov	r3, fp
   33e68:	mov	r1, #64	; 0x40
   33e6c:	ldr	r7, [pc, #-560]	; 33c44 <__assert_fail@plt+0x22a38>
   33e70:	mov	r2, r0
   33e74:	ldr	r0, [pc, #-568]	; 33c44 <__assert_fail@plt+0x22a38>
   33e78:	bl	110b0 <snprintf@plt>
   33e7c:	str	r5, [sp, #40]	; 0x28
   33e80:	b	32c40 <__assert_fail@plt+0x21a34>
   33e84:	ldr	r1, [pc, #-200]	; 33dc4 <__assert_fail@plt+0x22bb8>
   33e88:	mov	r2, #5
   33e8c:	mov	r0, #0
   33e90:	ldr	r9, [pc, #-592]	; 33c48 <__assert_fail@plt+0x22a3c>
   33e94:	bl	10f90 <dcgettext@plt>
   33e98:	mov	r1, sl
   33e9c:	bl	548ac <error@@Base>
   33ea0:	mov	r2, #5
   33ea4:	ldr	r1, [pc, #-608]	; 33c4c <__assert_fail@plt+0x22a40>
   33ea8:	b	33374 <__assert_fail@plt+0x22168>
   33eac:	mov	r7, r2
   33eb0:	ldr	r1, [pc, #-616]	; 33c50 <__assert_fail@plt+0x22a44>
   33eb4:	mov	r2, #5
   33eb8:	mov	r0, r4
   33ebc:	bl	10f90 <dcgettext@plt>
   33ec0:	ldr	r1, [sp, #48]	; 0x30
   33ec4:	mov	r2, #1
   33ec8:	mov	r3, #0
   33ecc:	str	r5, [sp, #8]
   33ed0:	strd	r2, [sp]
   33ed4:	str	r6, [sp, #12]
   33ed8:	mov	r3, r7
   33edc:	add	r2, r1, #8
   33ee0:	add	r1, r1, #4
   33ee4:	str	r0, [sp, #16]
   33ee8:	mov	r0, r4
   33eec:	bl	1717c <__assert_fail@plt+0x5f70>
   33ef0:	subs	r3, r0, #0
   33ef4:	str	r3, [sp, #96]	; 0x60
   33ef8:	beq	32f2c <__assert_fail@plt+0x21d20>
   33efc:	mov	r2, #5
   33f00:	ldr	r1, [pc, #-692]	; 33c54 <__assert_fail@plt+0x22a48>
   33f04:	mov	r0, r4
   33f08:	bl	10f90 <dcgettext@plt>
   33f0c:	mov	r2, r5
   33f10:	mov	r1, r7
   33f14:	bl	10f24 <printf@plt>
   33f18:	ldrd	r2, [sp, #216]	; 0xd8
   33f1c:	cmp	r3, #0
   33f20:	cmpeq	r2, #3
   33f24:	bhi	32b94 <__assert_fail@plt+0x21988>
   33f28:	mov	r2, #4
   33f2c:	mov	r3, #0
   33f30:	strd	r2, [sp, #216]	; 0xd8
   33f34:	b	32bb4 <__assert_fail@plt+0x219a8>
   33f38:	ldr	r3, [sp, #48]	; 0x30
   33f3c:	mov	r1, fp
   33f40:	ldrh	r0, [r3, #64]	; 0x40
   33f44:	bl	1b68c <__assert_fail@plt+0xa480>
   33f48:	str	r5, [sp, #40]	; 0x28
   33f4c:	mov	r7, r0
   33f50:	b	32c40 <__assert_fail@plt+0x21a34>
   33f54:	ldr	r3, [r6]
   33f58:	mov	r0, r4
   33f5c:	mov	r1, #4
   33f60:	blx	r3
   33f64:	ldr	r3, [r6]
   33f68:	mov	r1, #4
   33f6c:	mov	r5, r0
   33f70:	add	r0, r4, #4
   33f74:	blx	r3
   33f78:	mov	r2, #5
   33f7c:	ldr	r1, [pc, #-812]	; 33c58 <__assert_fail@plt+0x22a4c>
   33f80:	mov	r4, r0
   33f84:	mov	r0, r7
   33f88:	bl	10f90 <dcgettext@plt>
   33f8c:	mov	r2, r4
   33f90:	mov	r1, r5
   33f94:	bl	10f24 <printf@plt>
   33f98:	b	32d58 <__assert_fail@plt+0x21b4c>
   33f9c:	cmp	sl, #3
   33fa0:	bls	34d98 <__assert_fail@plt+0x23b8c>
   33fa4:	sub	r2, r2, #2
   33fa8:	ldr	r0, [pc, #-852]	; 33c5c <__assert_fail@plt+0x22a50>
   33fac:	str	r2, [sp, #72]	; 0x48
   33fb0:	bl	10f24 <printf@plt>
   33fb4:	ldrb	r2, [r5, #2]
   33fb8:	add	r3, r5, #2
   33fbc:	str	r2, [sp, #40]	; 0x28
   33fc0:	ldr	r2, [sp, #72]	; 0x48
   33fc4:	b	32f90 <__assert_fail@plt+0x21d84>
   33fc8:	mov	r2, #5
   33fcc:	ldr	r1, [pc, #-884]	; 33c60 <__assert_fail@plt+0x22a54>
   33fd0:	mov	r0, #0
   33fd4:	bl	10f90 <dcgettext@plt>
   33fd8:	str	r5, [sp, #40]	; 0x28
   33fdc:	mov	r7, r0
   33fe0:	b	32c40 <__assert_fail@plt+0x21a34>
   33fe4:	mov	r2, #5
   33fe8:	ldr	r1, [pc, #-908]	; 33c64 <__assert_fail@plt+0x22a58>
   33fec:	mov	r0, #0
   33ff0:	bl	10f90 <dcgettext@plt>
   33ff4:	str	r5, [sp, #40]	; 0x28
   33ff8:	mov	r7, r0
   33ffc:	b	32c40 <__assert_fail@plt+0x21a34>
   34000:	mov	r2, #5
   34004:	ldr	r1, [pc, #-932]	; 33c68 <__assert_fail@plt+0x22a5c>
   34008:	mov	r0, #0
   3400c:	bl	10f90 <dcgettext@plt>
   34010:	str	r5, [sp, #40]	; 0x28
   34014:	mov	r7, r0
   34018:	b	32c40 <__assert_fail@plt+0x21a34>
   3401c:	mov	r2, #5
   34020:	ldr	r1, [pc, #-956]	; 33c6c <__assert_fail@plt+0x22a60>
   34024:	mov	r0, #0
   34028:	bl	10f90 <dcgettext@plt>
   3402c:	str	r5, [sp, #40]	; 0x28
   34030:	mov	r7, r0
   34034:	b	32c40 <__assert_fail@plt+0x21a34>
   34038:	mov	r2, #5
   3403c:	ldr	r1, [pc, #-980]	; 33c70 <__assert_fail@plt+0x22a64>
   34040:	mov	r0, #0
   34044:	bl	10f90 <dcgettext@plt>
   34048:	str	r5, [sp, #40]	; 0x28
   3404c:	mov	r7, r0
   34050:	b	32c40 <__assert_fail@plt+0x21a34>
   34054:	mov	r2, #5
   34058:	ldr	r1, [pc, #-1004]	; 33c74 <__assert_fail@plt+0x22a68>
   3405c:	mov	r0, #0
   34060:	bl	10f90 <dcgettext@plt>
   34064:	str	r5, [sp, #40]	; 0x28
   34068:	mov	r7, r0
   3406c:	b	32c40 <__assert_fail@plt+0x21a34>
   34070:	mov	r2, #5
   34074:	ldr	r1, [pc, #-1028]	; 33c78 <__assert_fail@plt+0x22a6c>
   34078:	mov	r0, #0
   3407c:	bl	10f90 <dcgettext@plt>
   34080:	str	r5, [sp, #40]	; 0x28
   34084:	mov	r7, r0
   34088:	b	32c40 <__assert_fail@plt+0x21a34>
   3408c:	mov	r2, #5
   34090:	ldr	r1, [pc, #-1052]	; 33c7c <__assert_fail@plt+0x22a70>
   34094:	mov	r0, #0
   34098:	bl	10f90 <dcgettext@plt>
   3409c:	str	r5, [sp, #40]	; 0x28
   340a0:	mov	r7, r0
   340a4:	b	32c40 <__assert_fail@plt+0x21a34>
   340a8:	mov	r2, #5
   340ac:	ldr	r1, [pc, #-1076]	; 33c80 <__assert_fail@plt+0x22a74>
   340b0:	mov	r0, #0
   340b4:	bl	10f90 <dcgettext@plt>
   340b8:	str	r5, [sp, #40]	; 0x28
   340bc:	mov	r7, r0
   340c0:	b	32c40 <__assert_fail@plt+0x21a34>
   340c4:	mov	r2, #5
   340c8:	ldr	r1, [pc, #-1100]	; 33c84 <__assert_fail@plt+0x22a78>
   340cc:	mov	r0, #0
   340d0:	bl	10f90 <dcgettext@plt>
   340d4:	str	r5, [sp, #40]	; 0x28
   340d8:	mov	r7, r0
   340dc:	b	32c40 <__assert_fail@plt+0x21a34>
   340e0:	mov	r2, #5
   340e4:	ldr	r1, [pc, #-1124]	; 33c88 <__assert_fail@plt+0x22a7c>
   340e8:	mov	r0, #0
   340ec:	bl	10f90 <dcgettext@plt>
   340f0:	str	r5, [sp, #40]	; 0x28
   340f4:	mov	r7, r0
   340f8:	b	32c40 <__assert_fail@plt+0x21a34>
   340fc:	mov	r2, #5
   34100:	ldr	r1, [pc, #-1148]	; 33c8c <__assert_fail@plt+0x22a80>
   34104:	mov	r0, #0
   34108:	bl	10f90 <dcgettext@plt>
   3410c:	str	r5, [sp, #40]	; 0x28
   34110:	mov	r7, r0
   34114:	b	32c40 <__assert_fail@plt+0x21a34>
   34118:	cmp	fp, #1
   3411c:	beq	3491c <__assert_fail@plt+0x23710>
   34120:	cmp	fp, #5
   34124:	beq	34908 <__assert_fail@plt+0x236fc>
   34128:	mov	r2, fp
   3412c:	mov	r1, r8
   34130:	ldr	r0, [pc, #-1192]	; 33c90 <__assert_fail@plt+0x22a84>
   34134:	str	r3, [sp, #52]	; 0x34
   34138:	bl	10f24 <printf@plt>
   3413c:	b	32d58 <__assert_fail@plt+0x21b4c>
   34140:	sub	r3, fp, #1
   34144:	cmp	r3, #107	; 0x6b
   34148:	ldrls	pc, [pc, r3, lsl #2]
   3414c:	b	34f58 <__assert_fail@plt+0x23d4c>
   34150:	andeq	r4, r3, ip, lsr pc
   34154:	andeq	r4, r3, r0, lsr #30
   34158:	andeq	r4, r3, r4, lsl #30
   3415c:	strdeq	r4, [r3], -r8
   34160:	ldrdeq	r4, [r3], -ip
   34164:	andeq	r4, r3, r0, asr #29
   34168:	andeq	r4, r3, r8, asr pc
   3416c:	andeq	r4, r3, r8, asr pc
   34170:	andeq	r4, r3, r8, asr pc
   34174:	andeq	r4, r3, r8, asr pc
   34178:	andeq	r4, r3, r8, asr pc
   3417c:	andeq	r4, r3, r8, asr pc
   34180:	andeq	r4, r3, r8, asr pc
   34184:	andeq	r4, r3, r8, asr pc
   34188:	andeq	r4, r3, r8, asr pc
   3418c:	andeq	r4, r3, r8, asr pc
   34190:	andeq	r4, r3, r8, asr pc
   34194:	andeq	r4, r3, r8, asr pc
   34198:	andeq	r4, r3, r8, asr pc
   3419c:	andeq	r4, r3, r8, asr pc
   341a0:	andeq	r4, r3, r8, asr pc
   341a4:	andeq	r4, r3, r8, asr pc
   341a8:	andeq	r4, r3, r8, asr pc
   341ac:	andeq	r4, r3, r8, asr pc
   341b0:	andeq	r4, r3, r8, asr pc
   341b4:	andeq	r4, r3, r8, asr pc
   341b8:	andeq	r4, r3, r8, asr pc
   341bc:	andeq	r4, r3, r8, asr pc
   341c0:	andeq	r4, r3, r8, asr pc
   341c4:	andeq	r4, r3, r8, asr pc
   341c8:	andeq	r4, r3, r8, asr pc
   341cc:	andeq	r4, r3, r8, asr pc
   341d0:	andeq	r4, r3, r8, asr pc
   341d4:	andeq	r4, r3, r8, asr pc
   341d8:	andeq	r4, r3, r8, asr pc
   341dc:	andeq	r4, r3, r8, asr pc
   341e0:	andeq	r4, r3, r8, asr pc
   341e4:	andeq	r4, r3, r8, asr pc
   341e8:	andeq	r4, r3, r8, asr pc
   341ec:	andeq	r4, r3, r8, asr pc
   341f0:	andeq	r4, r3, r8, asr pc
   341f4:	andeq	r4, r3, r8, asr pc
   341f8:	andeq	r4, r3, r8, asr pc
   341fc:	andeq	r4, r3, r8, asr pc
   34200:	andeq	r4, r3, r8, asr pc
   34204:	andeq	r4, r3, r8, asr pc
   34208:	andeq	r4, r3, r8, asr pc
   3420c:	andeq	r4, r3, r8, asr pc
   34210:	andeq	r4, r3, r8, asr pc
   34214:	andeq	r4, r3, r8, asr pc
   34218:	andeq	r4, r3, r8, asr pc
   3421c:	andeq	r4, r3, r8, asr pc
   34220:	andeq	r4, r3, r8, asr pc
   34224:	andeq	r4, r3, r8, asr pc
   34228:	andeq	r4, r3, r8, asr pc
   3422c:	andeq	r4, r3, r8, asr pc
   34230:	andeq	r4, r3, r8, asr pc
   34234:	andeq	r4, r3, r8, asr pc
   34238:	andeq	r4, r3, r8, asr pc
   3423c:	andeq	r4, r3, r8, asr pc
   34240:	andeq	r4, r3, r8, asr pc
   34244:	andeq	r4, r3, r8, asr pc
   34248:	andeq	r4, r3, r8, asr pc
   3424c:	andeq	r4, r3, r8, asr pc
   34250:	andeq	r4, r3, r8, asr pc
   34254:	andeq	r4, r3, r8, asr pc
   34258:	andeq	r4, r3, r8, asr pc
   3425c:	andeq	r4, r3, r8, asr pc
   34260:	andeq	r4, r3, r8, asr pc
   34264:	andeq	r4, r3, r8, asr pc
   34268:	andeq	r4, r3, r8, asr pc
   3426c:	andeq	r4, r3, r8, asr pc
   34270:	andeq	r4, r3, r8, asr pc
   34274:	andeq	r4, r3, r8, asr pc
   34278:	andeq	r4, r3, r8, asr pc
   3427c:	andeq	r4, r3, r8, asr pc
   34280:	andeq	r4, r3, r8, asr pc
   34284:	andeq	r4, r3, r8, asr pc
   34288:	andeq	r4, r3, r8, asr pc
   3428c:	andeq	r4, r3, r8, asr pc
   34290:	andeq	r4, r3, r8, asr pc
   34294:	andeq	r4, r3, r8, asr pc
   34298:	andeq	r4, r3, r8, asr pc
   3429c:	andeq	r4, r3, r8, asr pc
   342a0:	andeq	r4, r3, r8, asr pc
   342a4:	andeq	r4, r3, r8, asr pc
   342a8:	andeq	r4, r3, r8, asr pc
   342ac:	andeq	r4, r3, r8, asr pc
   342b0:	andeq	r4, r3, r8, asr pc
   342b4:	andeq	r4, r3, r8, asr pc
   342b8:	andeq	r4, r3, r8, asr pc
   342bc:	andeq	r4, r3, r8, asr pc
   342c0:	andeq	r4, r3, r8, asr pc
   342c4:	andeq	r4, r3, r8, asr pc
   342c8:	andeq	r4, r3, r8, asr pc
   342cc:	andeq	r4, r3, r8, asr pc
   342d0:	andeq	r4, r3, r8, asr pc
   342d4:	andeq	r4, r3, r8, asr pc
   342d8:	andeq	r4, r3, r8, asr pc
   342dc:	andeq	r4, r3, r8, asr pc
   342e0:			; <UNDEFINED> instruction: 0x00034eb4
   342e4:	muleq	r3, r8, lr
   342e8:	andeq	r4, r3, ip, ror lr
   342ec:	andeq	r4, r3, r0, ror #28
   342f0:	andeq	r4, r3, r4, asr #28
   342f4:	andeq	r4, r3, r8, lsr #28
   342f8:	andeq	r4, r3, ip, lsl lr
   342fc:	andeq	r4, r3, r0, lsl lr
   34300:	mov	r2, #5
   34304:	ldr	r1, [pc, #-1656]	; 33c94 <__assert_fail@plt+0x22a88>
   34308:	bl	10f90 <dcgettext@plt>
   3430c:	str	r5, [sp, #40]	; 0x28
   34310:	mov	r7, r0
   34314:	b	32c40 <__assert_fail@plt+0x21a34>
   34318:	mov	r2, #5
   3431c:	ldr	r1, [pc, #-1676]	; 33c98 <__assert_fail@plt+0x22a8c>
   34320:	bl	10f90 <dcgettext@plt>
   34324:	str	r5, [sp, #40]	; 0x28
   34328:	mov	r7, r0
   3432c:	b	32c40 <__assert_fail@plt+0x21a34>
   34330:	mov	r2, #5
   34334:	ldr	r1, [pc, #-1696]	; 33c9c <__assert_fail@plt+0x22a90>
   34338:	bl	10f90 <dcgettext@plt>
   3433c:	str	r5, [sp, #40]	; 0x28
   34340:	mov	r7, r0
   34344:	b	32c40 <__assert_fail@plt+0x21a34>
   34348:	mov	r2, #5
   3434c:	ldr	r1, [pc, #-1636]	; 33cf0 <__assert_fail@plt+0x22ae4>
   34350:	mov	r0, #0
   34354:	bl	10f90 <dcgettext@plt>
   34358:	mov	r3, fp
   3435c:	mov	r1, #64	; 0x40
   34360:	ldr	r7, [pc, #-1736]	; 33ca0 <__assert_fail@plt+0x22a94>
   34364:	mov	r2, r0
   34368:	ldr	r0, [pc, #-1744]	; 33ca0 <__assert_fail@plt+0x22a94>
   3436c:	bl	110b0 <snprintf@plt>
   34370:	str	r5, [sp, #40]	; 0x28
   34374:	b	32c40 <__assert_fail@plt+0x21a34>
   34378:	mov	r2, #5
   3437c:	ldr	r1, [pc, #-1760]	; 33ca4 <__assert_fail@plt+0x22a98>
   34380:	bl	10f90 <dcgettext@plt>
   34384:	str	r5, [sp, #40]	; 0x28
   34388:	mov	r7, r0
   3438c:	b	32c40 <__assert_fail@plt+0x21a34>
   34390:	mov	r2, #5
   34394:	ldr	r1, [pc, #-1780]	; 33ca8 <__assert_fail@plt+0x22a9c>
   34398:	bl	10f90 <dcgettext@plt>
   3439c:	str	r5, [sp, #40]	; 0x28
   343a0:	mov	r7, r0
   343a4:	b	32c40 <__assert_fail@plt+0x21a34>
   343a8:	ldr	r3, [pc, #-1616]	; 33d60 <__assert_fail@plt+0x22b54>
   343ac:	mov	r2, fp
   343b0:	ldr	r1, [pc, #-1804]	; 33cac <__assert_fail@plt+0x22aa0>
   343b4:	ldr	r3, [r3]
   343b8:	cmp	r3, #0
   343bc:	movne	fp, #4
   343c0:	moveq	fp, #8
   343c4:	bl	10f90 <dcgettext@plt>
   343c8:	bl	10f24 <printf@plt>
   343cc:	cmp	r8, #7
   343d0:	bls	35114 <__assert_fail@plt+0x23f08>
   343d4:	mov	r1, fp
   343d8:	mov	r0, r8
   343dc:	bl	588cc <warn@@Base+0x3afc>
   343e0:	cmp	r1, #0
   343e4:	bne	35114 <__assert_fail@plt+0x23f08>
   343e8:	add	r5, r4, r8
   343ec:	cmp	r5, r4
   343f0:	bls	330b0 <__assert_fail@plt+0x21ea4>
   343f4:	str	r8, [sp, #40]	; 0x28
   343f8:	ldr	r3, [r6]
   343fc:	mov	r1, #4
   34400:	mov	r0, r4
   34404:	blx	r3
   34408:	mov	r1, #4
   3440c:	ldr	r3, [r6]
   34410:	add	r8, r4, #8
   34414:	mov	r7, r0
   34418:	add	r0, r4, r1
   3441c:	blx	r3
   34420:	sub	r3, r5, r8
   34424:	cmp	r0, r3
   34428:	mov	sl, r0
   3442c:	bhi	353d8 <__assert_fail@plt+0x241cc>
   34430:	add	r3, r7, #1073741824	; 0x40000000
   34434:	cmn	r3, #-536870911	; 0xe0000001
   34438:	bhi	34528 <__assert_fail@plt+0x2331c>
   3443c:	ldr	r3, [sp, #48]	; 0x30
   34440:	ldrh	r2, [r3, #66]	; 0x42
   34444:	cmp	r2, #6
   34448:	cmpne	r2, #62	; 0x3e
   3444c:	moveq	r3, #1
   34450:	movne	r3, #0
   34454:	cmp	r2, #3
   34458:	orreq	r3, r3, #1
   3445c:	cmp	r3, #0
   34460:	beq	3447c <__assert_fail@plt+0x23270>
   34464:	cmp	r7, #-1073741823	; 0xc0000001
   34468:	beq	35130 <__assert_fail@plt+0x23f24>
   3446c:	cmp	r7, #-1073741822	; 0xc0000002
   34470:	beq	35158 <__assert_fail@plt+0x23f4c>
   34474:	cmp	r7, #-1073741824	; 0xc0000000
   34478:	beq	351e0 <__assert_fail@plt+0x23fd4>
   3447c:	ldr	r1, [pc, #-2004]	; 33cb0 <__assert_fail@plt+0x22aa4>
   34480:	mov	r2, #5
   34484:	mov	r0, #0
   34488:	bl	10f90 <dcgettext@plt>
   3448c:	mov	r1, r7
   34490:	bl	10f24 <printf@plt>
   34494:	cmp	sl, #0
   34498:	addne	r7, r4, sl
   3449c:	addne	r7, r7, #7
   344a0:	addne	r4, r4, #7
   344a4:	beq	344bc <__assert_fail@plt+0x232b0>
   344a8:	ldrb	r1, [r4, #1]!
   344ac:	ldr	r0, [pc, #-2004]	; 33ce0 <__assert_fail@plt+0x22ad4>
   344b0:	bl	10f24 <printf@plt>
   344b4:	cmp	r7, r4
   344b8:	bne	344a8 <__assert_fail@plt+0x2329c>
   344bc:	mov	r0, #62	; 0x3e
   344c0:	bl	110c8 <putchar@plt>
   344c4:	sub	r4, fp, #1
   344c8:	add	r4, r4, sl
   344cc:	rsb	sl, fp, #0
   344d0:	and	r4, r4, sl
   344d4:	add	r4, r8, r4
   344d8:	cmp	r5, r4
   344dc:	beq	330b0 <__assert_fail@plt+0x21ea4>
   344e0:	ldr	r3, [r9]
   344e4:	cmp	r3, #0
   344e8:	ldrne	r0, [pc, #-2108]	; 33cb4 <__assert_fail@plt+0x22aa8>
   344ec:	ldreq	r0, [pc, #-2108]	; 33cb8 <__assert_fail@plt+0x22aac>
   344f0:	bl	10f24 <printf@plt>
   344f4:	cmp	r5, r4
   344f8:	bls	330b0 <__assert_fail@plt+0x21ea4>
   344fc:	sub	r3, r5, r4
   34500:	cmp	r3, #7
   34504:	bhi	343f8 <__assert_fail@plt+0x231ec>
   34508:	ldr	r8, [sp, #40]	; 0x28
   3450c:	mov	r2, #5
   34510:	ldr	r1, [pc, #-2140]	; 33cbc <__assert_fail@plt+0x22ab0>
   34514:	mov	r0, #0
   34518:	bl	10f90 <dcgettext@plt>
   3451c:	mov	r1, r8
   34520:	bl	10f24 <printf@plt>
   34524:	b	330b0 <__assert_fail@plt+0x21ea4>
   34528:	cmp	r7, #1
   3452c:	beq	348cc <__assert_fail@plt+0x236c0>
   34530:	cmp	r7, #2
   34534:	beq	348a0 <__assert_fail@plt+0x23694>
   34538:	cmn	r7, #1073741825	; 0x40000001
   3453c:	bhi	349f0 <__assert_fail@plt+0x237e4>
   34540:	mov	r2, #5
   34544:	ldr	r1, [pc, #-2188]	; 33cc0 <__assert_fail@plt+0x22ab4>
   34548:	mov	r0, #0
   3454c:	bl	10f90 <dcgettext@plt>
   34550:	mov	r1, r7
   34554:	bl	10f24 <printf@plt>
   34558:	b	34494 <__assert_fail@plt+0x23288>
   3455c:	mov	r2, #5
   34560:	ldr	r1, [pc, #-2212]	; 33cc4 <__assert_fail@plt+0x22ab8>
   34564:	bl	10f90 <dcgettext@plt>
   34568:	bl	10f24 <printf@plt>
   3456c:	cmp	r8, #0
   34570:	beq	330b0 <__assert_fail@plt+0x21ea4>
   34574:	sub	r5, r8, #1
   34578:	ldr	r6, [pc, #-2232]	; 33cc8 <__assert_fail@plt+0x22abc>
   3457c:	add	r5, r4, r5
   34580:	sub	r4, r4, #1
   34584:	ldrb	r1, [r4, #1]!
   34588:	mov	r0, r6
   3458c:	bl	10f24 <printf@plt>
   34590:	cmp	r5, r4
   34594:	bne	34584 <__assert_fail@plt+0x23378>
   34598:	b	330b0 <__assert_fail@plt+0x21ea4>
   3459c:	cmp	r8, #15
   345a0:	bls	3526c <__assert_fail@plt+0x24060>
   345a4:	mov	r0, r4
   345a8:	ldr	r3, [r6]
   345ac:	mov	r1, #4
   345b0:	blx	r3
   345b4:	mov	r1, #4
   345b8:	ldr	r3, [r6]
   345bc:	mov	r8, r0
   345c0:	add	r0, r4, r1
   345c4:	blx	r3
   345c8:	ldr	r3, [r6]
   345cc:	mov	r1, #4
   345d0:	mov	r5, r0
   345d4:	add	r0, r4, #8
   345d8:	blx	r3
   345dc:	ldr	r3, [r6]
   345e0:	mov	r1, #4
   345e4:	mov	r9, r0
   345e8:	add	r0, r4, #12
   345ec:	blx	r3
   345f0:	cmp	r8, #6
   345f4:	mov	r2, #5
   345f8:	ldrls	r3, [pc, #-2356]	; 33ccc <__assert_fail@plt+0x22ac0>
   345fc:	ldrhi	r4, [pc, #-2356]	; 33cd0 <__assert_fail@plt+0x22ac4>
   34600:	ldr	r1, [pc, #-2356]	; 33cd4 <__assert_fail@plt+0x22ac8>
   34604:	addls	r8, r3, r8, lsl #2
   34608:	mov	r7, r0
   3460c:	ldrls	r4, [r8, #736]	; 0x2e0
   34610:	mov	r0, #0
   34614:	bl	10f90 <dcgettext@plt>
   34618:	str	r7, [sp]
   3461c:	mov	r3, r9
   34620:	mov	r2, r5
   34624:	mov	r1, r4
   34628:	bl	10f24 <printf@plt>
   3462c:	b	32d58 <__assert_fail@plt+0x21b4c>
   34630:	mov	r2, #5
   34634:	ldr	r1, [pc, #-2404]	; 33cd8 <__assert_fail@plt+0x22acc>
   34638:	bl	10f90 <dcgettext@plt>
   3463c:	bl	10f24 <printf@plt>
   34640:	cmp	r8, #0
   34644:	beq	330b0 <__assert_fail@plt+0x21ea4>
   34648:	ldrb	r0, [r4]
   3464c:	cmp	r0, #0
   34650:	beq	330b0 <__assert_fail@plt+0x21ea4>
   34654:	sub	r5, r8, #1
   34658:	add	r5, r4, r5
   3465c:	b	3466c <__assert_fail@plt+0x23460>
   34660:	ldrb	r0, [r4, #1]!
   34664:	cmp	r0, #0
   34668:	beq	330b0 <__assert_fail@plt+0x21ea4>
   3466c:	bl	110c8 <putchar@plt>
   34670:	cmp	r5, r4
   34674:	bne	34660 <__assert_fail@plt+0x23454>
   34678:	b	330b0 <__assert_fail@plt+0x21ea4>
   3467c:	mov	r2, #5
   34680:	ldr	r1, [pc, #-2476]	; 33cdc <__assert_fail@plt+0x22ad0>
   34684:	mov	r0, #0
   34688:	bl	10f90 <dcgettext@plt>
   3468c:	bl	10f24 <printf@plt>
   34690:	cmp	r8, #0
   34694:	beq	330b0 <__assert_fail@plt+0x21ea4>
   34698:	sub	r5, r8, #1
   3469c:	ldr	r6, [pc, #-2500]	; 33ce0 <__assert_fail@plt+0x22ad4>
   346a0:	add	r5, r4, r5
   346a4:	sub	r4, r4, #1
   346a8:	ldrb	r1, [r4, #1]!
   346ac:	mov	r0, r6
   346b0:	bl	10f24 <printf@plt>
   346b4:	cmp	r5, r4
   346b8:	bne	346a8 <__assert_fail@plt+0x2349c>
   346bc:	b	330b0 <__assert_fail@plt+0x21ea4>
   346c0:	mov	r0, r3
   346c4:	mov	r3, #5
   346c8:	str	r3, [sp]
   346cc:	ldr	r2, [pc, #-2544]	; 33ce4 <__assert_fail@plt+0x22ad8>
   346d0:	mov	r3, r7
   346d4:	ldr	r1, [pc, #-2548]	; 33ce8 <__assert_fail@plt+0x22adc>
   346d8:	bl	11200 <dcngettext@plt>
   346dc:	mov	r1, r7
   346e0:	bl	54dd0 <warn@@Base>
   346e4:	b	335b8 <__assert_fail@plt+0x223ac>
   346e8:	ldr	r1, [pc, #-2564]	; 33cec <__assert_fail@plt+0x22ae0>
   346ec:	mov	r2, #5
   346f0:	mov	r0, #0
   346f4:	bl	10f90 <dcgettext@plt>
   346f8:	bl	548ac <error@@Base>
   346fc:	mov	r3, #0
   34700:	str	r3, [sp, #52]	; 0x34
   34704:	b	32d58 <__assert_fail@plt+0x21b4c>
   34708:	mov	r2, #5
   3470c:	ldr	r1, [pc, #-2596]	; 33cf0 <__assert_fail@plt+0x22ae4>
   34710:	bl	10f90 <dcgettext@plt>
   34714:	mov	r3, fp
   34718:	mov	r2, r0
   3471c:	b	3383c <__assert_fail@plt+0x22630>
   34720:	mov	r2, #5
   34724:	ldr	r1, [pc, #-2616]	; 33cf4 <__assert_fail@plt+0x22ae8>
   34728:	bl	10f90 <dcgettext@plt>
   3472c:	ldr	r3, [r6]
   34730:	mov	r1, #4
   34734:	mov	r5, r0
   34738:	mov	r0, r4
   3473c:	blx	r3
   34740:	mov	r1, #4
   34744:	ldr	r3, [r6]
   34748:	mov	r8, r0
   3474c:	add	r0, r4, r1
   34750:	blx	r3
   34754:	mov	r1, r8
   34758:	mov	r2, r0
   3475c:	mov	r0, r5
   34760:	bl	10f24 <printf@plt>
   34764:	mov	r2, #5
   34768:	ldr	r1, [pc, #-2680]	; 33cf8 <__assert_fail@plt+0x22aec>
   3476c:	mov	r0, r7
   34770:	bl	10f90 <dcgettext@plt>
   34774:	bl	10f24 <printf@plt>
   34778:	mov	r1, #8
   3477c:	ldr	r3, [r6]
   34780:	add	r0, r4, r1
   34784:	blx	r3
   34788:	bl	14cd8 <__assert_fail@plt+0x3acc>
   3478c:	mov	r2, #5
   34790:	ldr	r1, [pc, #-2716]	; 33cfc <__assert_fail@plt+0x22af0>
   34794:	mov	r0, r7
   34798:	bl	10f90 <dcgettext@plt>
   3479c:	bl	10f24 <printf@plt>
   347a0:	ldr	r3, [r6]
   347a4:	add	r0, r4, #16
   347a8:	mov	r1, #8
   347ac:	blx	r3
   347b0:	mov	r3, r1
   347b4:	mov	r2, r0
   347b8:	ldr	r0, [pc, #-2732]	; 33d14 <__assert_fail@plt+0x22b08>
   347bc:	bl	10f24 <printf@plt>
   347c0:	mov	r2, #5
   347c4:	ldr	r1, [pc, #-2764]	; 33d00 <__assert_fail@plt+0x22af4>
   347c8:	mov	r0, r7
   347cc:	bl	10f90 <dcgettext@plt>
   347d0:	ldr	r3, [r6]
   347d4:	mov	r1, #4
   347d8:	mov	r5, r0
   347dc:	add	r0, r4, #24
   347e0:	blx	r3
   347e4:	mov	r1, r0
   347e8:	mov	r0, r5
   347ec:	bl	10f24 <printf@plt>
   347f0:	mov	r0, r7
   347f4:	mov	r2, #5
   347f8:	ldr	r1, [pc, #-2812]	; 33d04 <__assert_fail@plt+0x22af8>
   347fc:	bl	10f90 <dcgettext@plt>
   34800:	add	r1, r4, #32
   34804:	bl	10f24 <printf@plt>
   34808:	b	32d58 <__assert_fail@plt+0x21b4c>
   3480c:	mov	r2, #5
   34810:	ldr	r1, [pc, #-2832]	; 33d08 <__assert_fail@plt+0x22afc>
   34814:	bl	10f90 <dcgettext@plt>
   34818:	mov	r1, r4
   3481c:	bl	10f24 <printf@plt>
   34820:	b	32d58 <__assert_fail@plt+0x21b4c>
   34824:	mov	r2, #5
   34828:	ldr	r1, [pc, #-2852]	; 33d0c <__assert_fail@plt+0x22b00>
   3482c:	bl	10f90 <dcgettext@plt>
   34830:	mov	r1, r4
   34834:	bl	10f24 <printf@plt>
   34838:	b	32d58 <__assert_fail@plt+0x21b4c>
   3483c:	mov	r2, #5
   34840:	ldr	r1, [pc, #-2872]	; 33d10 <__assert_fail@plt+0x22b04>
   34844:	bl	10f90 <dcgettext@plt>
   34848:	bl	10f24 <printf@plt>
   3484c:	ldr	r3, [r6]
   34850:	mov	r0, r4
   34854:	mov	r1, #8
   34858:	blx	r3
   3485c:	mov	r2, r0
   34860:	mov	r3, r1
   34864:	ldr	r0, [pc, #-2904]	; 33d14 <__assert_fail@plt+0x22b08>
   34868:	bl	10f24 <printf@plt>
   3486c:	b	32d58 <__assert_fail@plt+0x21b4c>
   34870:	mov	r2, #5
   34874:	ldr	r1, [pc, #-2916]	; 33d18 <__assert_fail@plt+0x22b0c>
   34878:	bl	10f90 <dcgettext@plt>
   3487c:	mov	r1, r4
   34880:	bl	10f24 <printf@plt>
   34884:	b	32d58 <__assert_fail@plt+0x21b4c>
   34888:	mov	r2, #5
   3488c:	ldr	r1, [pc, #-2936]	; 33d1c <__assert_fail@plt+0x22b10>
   34890:	bl	10f90 <dcgettext@plt>
   34894:	mov	r1, r4
   34898:	bl	10f24 <printf@plt>
   3489c:	b	32d58 <__assert_fail@plt+0x21b4c>
   348a0:	ldr	r0, [pc, #-2952]	; 33d20 <__assert_fail@plt+0x22b14>
   348a4:	bl	10f24 <printf@plt>
   348a8:	cmp	sl, #0
   348ac:	beq	344c4 <__assert_fail@plt+0x232b8>
   348b0:	mov	r2, #5
   348b4:	ldr	r1, [pc, #-2968]	; 33d24 <__assert_fail@plt+0x22b18>
   348b8:	mov	r0, #0
   348bc:	bl	10f90 <dcgettext@plt>
   348c0:	mov	r1, sl
   348c4:	bl	10f24 <printf@plt>
   348c8:	b	344c4 <__assert_fail@plt+0x232b8>
   348cc:	mov	r2, #5
   348d0:	ldr	r1, [pc, #-2992]	; 33d28 <__assert_fail@plt+0x22b1c>
   348d4:	mov	r0, #0
   348d8:	bl	10f90 <dcgettext@plt>
   348dc:	bl	10f24 <printf@plt>
   348e0:	cmp	fp, sl
   348e4:	bne	348b0 <__assert_fail@plt+0x236a4>
   348e8:	ldr	r3, [r6]
   348ec:	mov	r1, fp
   348f0:	mov	r0, r8
   348f4:	blx	r3
   348f8:	mov	r1, r0
   348fc:	ldr	r0, [pc, #-3032]	; 33d2c <__assert_fail@plt+0x22b20>
   34900:	bl	10f24 <printf@plt>
   34904:	b	344c4 <__assert_fail@plt+0x232b8>
   34908:	mov	r2, r4
   3490c:	mov	r1, r8
   34910:	ldr	r0, [pc, #-3048]	; 33d30 <__assert_fail@plt+0x22b24>
   34914:	bl	10f24 <printf@plt>
   34918:	b	32d58 <__assert_fail@plt+0x21b4c>
   3491c:	ldr	r3, [r6]
   34920:	mov	r0, r4
   34924:	mov	r1, #4
   34928:	blx	r3
   3492c:	ldr	r3, [pc, #-3072]	; 33d34 <__assert_fail@plt+0x22b28>
   34930:	umull	r3, lr, r3, r0
   34934:	ldr	r3, [pc, #-2932]	; 33dc8 <__assert_fail@plt+0x22bbc>
   34938:	mov	r2, r0
   3493c:	lsr	lr, lr, #13
   34940:	umull	r1, ip, r3, lr
   34944:	lsr	ip, ip, #5
   34948:	add	ip, ip, ip, lsl #2
   3494c:	add	ip, ip, ip, lsl #2
   34950:	subs	ip, lr, ip, lsl #2
   34954:	beq	34db0 <__assert_fail@plt+0x23ba4>
   34958:	ldr	r5, [pc, #-2964]	; 33dcc <__assert_fail@plt+0x22bc0>
   3495c:	ldr	r0, [pc, #-3116]	; 33d38 <__assert_fail@plt+0x22b2c>
   34960:	cmp	ip, #26
   34964:	umull	r4, r5, r5, r2
   34968:	umull	r4, r0, r0, lr
   3496c:	lsr	r5, r5, #18
   34970:	lsr	r0, r0, #3
   34974:	umull	r3, r4, r3, r5
   34978:	ldr	r3, [pc, #-3140]	; 33d3c <__assert_fail@plt+0x22b30>
   3497c:	mov	r1, r8
   34980:	lsr	r4, r4, #5
   34984:	umull	r6, r3, r3, r2
   34988:	add	r4, r4, r4, lsl #2
   3498c:	add	r6, r0, r0, lsl #1
   34990:	add	r4, r4, r4, lsl #2
   34994:	add	r0, r0, r6, lsl #2
   34998:	sub	r4, r5, r4, lsl #2
   3499c:	ldr	r6, [pc, #-3172]	; 33d40 <__assert_fail@plt+0x22b34>
   349a0:	ldr	r5, [pc, #-3172]	; 33d44 <__assert_fail@plt+0x22b38>
   349a4:	sub	r0, lr, r0, lsl #1
   349a8:	add	r0, r0, #65	; 0x41
   349ac:	movhi	ip, r5
   349b0:	movls	ip, r6
   349b4:	str	r0, [sp, #8]
   349b8:	lsr	r3, r3, #25
   349bc:	str	r4, [sp]
   349c0:	str	ip, [sp, #4]
   349c4:	ldr	r0, [pc, #-3204]	; 33d48 <__assert_fail@plt+0x22b3c>
   349c8:	bl	10f24 <printf@plt>
   349cc:	b	32d58 <__assert_fail@plt+0x21b4c>
   349d0:	strd	sl, [sp, #120]	; 0x78
   349d4:	str	r4, [sp, #132]	; 0x84
   349d8:	mov	r2, #5
   349dc:	ldr	r1, [pc, #-3224]	; 33d4c <__assert_fail@plt+0x22b40>
   349e0:	mov	r0, #0
   349e4:	bl	10f90 <dcgettext@plt>
   349e8:	bl	10f24 <printf@plt>
   349ec:	b	32d58 <__assert_fail@plt+0x21b4c>
   349f0:	cmn	r7, #536870913	; 0x20000001
   349f4:	bls	3447c <__assert_fail@plt+0x23270>
   349f8:	mov	r2, #5
   349fc:	ldr	r1, [pc, #-3252]	; 33d50 <__assert_fail@plt+0x22b44>
   34a00:	mov	r0, #0
   34a04:	bl	10f90 <dcgettext@plt>
   34a08:	mov	r1, r7
   34a0c:	bl	10f24 <printf@plt>
   34a10:	b	34494 <__assert_fail@plt+0x23288>
   34a14:	mov	r2, #5
   34a18:	ldr	r1, [pc, #-3276]	; 33d54 <__assert_fail@plt+0x22b48>
   34a1c:	bl	10f90 <dcgettext@plt>
   34a20:	str	r5, [sp, #40]	; 0x28
   34a24:	mov	r7, r0
   34a28:	b	32c40 <__assert_fail@plt+0x21a34>
   34a2c:	cmp	fp, #256	; 0x100
   34a30:	ldr	r3, [pc, #-3296]	; 33d58 <__assert_fail@plt+0x22b4c>
   34a34:	beq	35298 <__assert_fail@plt+0x2408c>
   34a38:	ldr	r5, [r3, #-3916]	; 0xfffff0b4
   34a3c:	ldr	r4, [r3, #-3912]	; 0xfffff0b8
   34a40:	mov	r2, #5
   34a44:	cmp	r5, r4
   34a48:	bls	352ac <__assert_fail@plt+0x240a0>
   34a4c:	ldr	r1, [pc, #-3320]	; 33d5c <__assert_fail@plt+0x22b50>
   34a50:	mov	r0, #0
   34a54:	bl	10f90 <dcgettext@plt>
   34a58:	mov	r2, r5
   34a5c:	mov	r1, r4
   34a60:	bl	10f24 <printf@plt>
   34a64:	b	32d58 <__assert_fail@plt+0x21b4c>
   34a68:	ldr	r2, [pc, #-3344]	; 33d60 <__assert_fail@plt+0x22b54>
   34a6c:	ldr	r3, [r6]
   34a70:	ldr	r8, [r2]
   34a74:	cmp	r8, #0
   34a78:	beq	35280 <__assert_fail@plt+0x24074>
   34a7c:	mov	r1, #4
   34a80:	mov	r0, r4
   34a84:	blx	r3
   34a88:	ldr	r3, [r6]
   34a8c:	mov	r1, #4
   34a90:	mov	r5, r0
   34a94:	add	r0, r4, #4
   34a98:	blx	r3
   34a9c:	clz	r6, r0
   34aa0:	mov	r8, r0
   34aa4:	lsr	r6, r6, #5
   34aa8:	b	3300c <__assert_fail@plt+0x21e00>
   34aac:	ldr	r3, [r6]
   34ab0:	mov	r1, #8
   34ab4:	mov	r0, r4
   34ab8:	blx	r3
   34abc:	ldr	r3, [r6]
   34ac0:	mov	r1, #8
   34ac4:	mov	r5, r0
   34ac8:	add	r0, r4, #8
   34acc:	blx	r3
   34ad0:	clz	r6, r0
   34ad4:	mov	r8, r0
   34ad8:	lsr	r6, r6, #5
   34adc:	b	3300c <__assert_fail@plt+0x21e00>
   34ae0:	mov	r2, #5
   34ae4:	ldr	r1, [pc, #-3464]	; 33d64 <__assert_fail@plt+0x22b58>
   34ae8:	bl	10f90 <dcgettext@plt>
   34aec:	str	r7, [sp, #52]	; 0x34
   34af0:	bl	548ac <error@@Base>
   34af4:	b	32d58 <__assert_fail@plt+0x21b4c>
   34af8:	mov	r2, #5
   34afc:	ldr	r1, [pc, #-3484]	; 33d68 <__assert_fail@plt+0x22b5c>
   34b00:	bl	10f90 <dcgettext@plt>
   34b04:	bl	10f24 <printf@plt>
   34b08:	b	32d58 <__assert_fail@plt+0x21b4c>
   34b0c:	ldr	r1, [pc, #-3496]	; 33d6c <__assert_fail@plt+0x22b60>
   34b10:	mov	r2, #5
   34b14:	add	r3, r3, #2
   34b18:	mov	r0, #0
   34b1c:	str	r3, [sp, #100]	; 0x64
   34b20:	bl	10f90 <dcgettext@plt>
   34b24:	ldr	r3, [pc, #-3516]	; 33d70 <__assert_fail@plt+0x22b64>
   34b28:	cmp	r0, #0
   34b2c:	beq	34b50 <__assert_fail@plt+0x23944>
   34b30:	mov	r1, r0
   34b34:	ldr	r0, [pc, #-3528]	; 33d74 <__assert_fail@plt+0x22b68>
   34b38:	str	r3, [sp, #128]	; 0x80
   34b3c:	bl	10f24 <printf@plt>
   34b40:	ldr	r3, [sp, #72]	; 0x48
   34b44:	sub	r3, r3, r0
   34b48:	str	r3, [sp, #72]	; 0x48
   34b4c:	ldr	r3, [sp, #128]	; 0x80
   34b50:	mov	r0, r3
   34b54:	ldr	r1, [sp, #40]	; 0x28
   34b58:	bl	1108c <strchr@plt>
   34b5c:	cmp	r0, #0
   34b60:	beq	3507c <__assert_fail@plt+0x23e70>
   34b64:	ldr	r3, [sp, #100]	; 0x64
   34b68:	sub	r3, r3, r5
   34b6c:	cmp	sl, r3
   34b70:	bcc	35050 <__assert_fail@plt+0x23e44>
   34b74:	ldr	r2, [sp, #72]	; 0x48
   34b78:	cmp	r2, #0
   34b7c:	ble	34fa8 <__assert_fail@plt+0x23d9c>
   34b80:	ldr	r2, [sp, #88]	; 0x58
   34b84:	cmp	r2, #10
   34b88:	ldrls	pc, [pc, r2, lsl #2]
   34b8c:	b	34c78 <__assert_fail@plt+0x23a6c>
   34b90:	andeq	r4, r3, r8, asr sp
   34b94:	andeq	r4, r3, r8, ror ip
   34b98:	andeq	r4, r3, r8, ror ip
   34b9c:	andeq	r4, r3, r0, asr sp
   34ba0:	andeq	r4, r3, r8, ror ip
   34ba4:	andeq	r4, r3, r8, ror ip
   34ba8:	andeq	r4, r3, r8, ror ip
   34bac:	andeq	r4, r3, r8, ror ip
   34bb0:	andeq	r4, r3, r8, ror ip
   34bb4:	andeq	r4, r3, r4, lsr #25
   34bb8:	andeq	r4, r3, r0, ror #24
   34bbc:	ldr	r1, [pc, #-3660]	; 33d78 <__assert_fail@plt+0x22b6c>
   34bc0:	mov	r2, #5
   34bc4:	add	r3, r3, #2
   34bc8:	mov	r0, #0
   34bcc:	str	r3, [sp, #100]	; 0x64
   34bd0:	bl	10f90 <dcgettext@plt>
   34bd4:	ldr	r3, [pc, #-3680]	; 33d7c <__assert_fail@plt+0x22b70>
   34bd8:	b	34b28 <__assert_fail@plt+0x2391c>
   34bdc:	ldr	r1, [pc, #-3684]	; 33d80 <__assert_fail@plt+0x22b74>
   34be0:	mov	r2, #5
   34be4:	add	r3, r3, #2
   34be8:	mov	r0, #0
   34bec:	str	r3, [sp, #100]	; 0x64
   34bf0:	bl	10f90 <dcgettext@plt>
   34bf4:	ldr	r3, [pc, #-3704]	; 33d84 <__assert_fail@plt+0x22b78>
   34bf8:	b	34b28 <__assert_fail@plt+0x2391c>
   34bfc:	add	r3, r3, #2
   34c00:	mov	r2, #5
   34c04:	ldr	r1, [pc, #-3716]	; 33d88 <__assert_fail@plt+0x22b7c>
   34c08:	mov	r0, #0
   34c0c:	str	r3, [sp, #100]	; 0x64
   34c10:	bl	10f90 <dcgettext@plt>
   34c14:	ldr	r3, [pc, #-3728]	; 33d8c <__assert_fail@plt+0x22b80>
   34c18:	b	34b28 <__assert_fail@plt+0x2391c>
   34c1c:	mov	r2, #5
   34c20:	ldr	r1, [pc, #-3736]	; 33d90 <__assert_fail@plt+0x22b84>
   34c24:	b	34bc4 <__assert_fail@plt+0x239b8>
   34c28:	mov	r2, #5
   34c2c:	ldr	r1, [pc, #-3744]	; 33d94 <__assert_fail@plt+0x22b88>
   34c30:	b	34b14 <__assert_fail@plt+0x23908>
   34c34:	mov	r2, #5
   34c38:	ldr	r1, [pc, #-3752]	; 33d98 <__assert_fail@plt+0x22b8c>
   34c3c:	b	34be4 <__assert_fail@plt+0x239d8>
   34c40:	add	r3, r3, #2
   34c44:	mov	r2, #5
   34c48:	ldr	r1, [pc, #-3764]	; 33d9c <__assert_fail@plt+0x22b90>
   34c4c:	mov	r0, #0
   34c50:	str	r3, [sp, #100]	; 0x64
   34c54:	bl	10f90 <dcgettext@plt>
   34c58:	ldr	r3, [pc, #-3776]	; 33da0 <__assert_fail@plt+0x22b94>
   34c5c:	b	34b28 <__assert_fail@plt+0x2391c>
   34c60:	ldr	r1, [pc, #-3780]	; 33da4 <__assert_fail@plt+0x22b98>
   34c64:	ldr	sl, [sp, #72]	; 0x48
   34c68:	rsb	r0, sl, #0
   34c6c:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   34c70:	sub	r3, sl, r0
   34c74:	str	r3, [sp, #72]	; 0x48
   34c78:	ldr	r2, [r9]
   34c7c:	ldr	r3, [sp, #72]	; 0x48
   34c80:	cmp	r2, #0
   34c84:	cmpne	r3, #0
   34c88:	ble	32c94 <__assert_fail@plt+0x21a88>
   34c8c:	ldr	r2, [pc, #-3820]	; 33da8 <__assert_fail@plt+0x22b9c>
   34c90:	mov	r1, r3
   34c94:	ldr	r0, [pc, #-3824]	; 33dac <__assert_fail@plt+0x22ba0>
   34c98:	bl	10f24 <printf@plt>
   34c9c:	ldr	r2, [r9]
   34ca0:	b	32c94 <__assert_fail@plt+0x21a88>
   34ca4:	subs	r3, sl, r3
   34ca8:	beq	352d0 <__assert_fail@plt+0x240c4>
   34cac:	sub	sl, r3, #1
   34cb0:	cmp	sl, #8
   34cb4:	bls	352c4 <__assert_fail@plt+0x240b8>
   34cb8:	mov	r2, #5
   34cbc:	ldr	r1, [pc, #-3860]	; 33db0 <__assert_fail@plt+0x22ba4>
   34cc0:	mov	r0, #0
   34cc4:	bl	10f90 <dcgettext@plt>
   34cc8:	mov	r1, sl
   34ccc:	bl	548ac <error@@Base>
   34cd0:	mov	r3, #7
   34cd4:	ldr	lr, [sp, #100]	; 0x64
   34cd8:	add	r3, r3, #1
   34cdc:	add	r3, lr, r3
   34ce0:	mov	r0, #0
   34ce4:	mov	r1, #0
   34ce8:	mov	ip, #0
   34cec:	ldrb	r2, [lr], #1
   34cf0:	cmp	lr, r3
   34cf4:	orr	r2, r0, r2, lsl ip
   34cf8:	add	ip, ip, #8
   34cfc:	mov	r0, r2
   34d00:	bne	34cec <__assert_fail@plt+0x23ae0>
   34d04:	ldr	r3, [sp, #112]	; 0x70
   34d08:	cmp	r3, #2
   34d0c:	beq	354ac <__assert_fail@plt+0x242a0>
   34d10:	cmp	r3, #7
   34d14:	bne	354d0 <__assert_fail@plt+0x242c4>
   34d18:	cmp	r1, #0
   34d1c:	cmpeq	r2, #4
   34d20:	bls	35450 <__assert_fail@plt+0x24244>
   34d24:	ldr	r3, [r9]
   34d28:	mov	r2, r0
   34d2c:	cmp	r3, #0
   34d30:	mov	r3, r1
   34d34:	beq	35470 <__assert_fail@plt+0x24264>
   34d38:	ldr	r0, [pc, #-3980]	; 33db4 <__assert_fail@plt+0x22ba8>
   34d3c:	bl	10f24 <printf@plt>
   34d40:	ldr	r3, [sp, #72]	; 0x48
   34d44:	sub	r3, r3, r0
   34d48:	str	r3, [sp, #72]	; 0x48
   34d4c:	b	34c78 <__assert_fail@plt+0x23a6c>
   34d50:	ldr	r1, [sp, #100]	; 0x64
   34d54:	b	34c64 <__assert_fail@plt+0x23a58>
   34d58:	ldr	r1, [pc, #-4008]	; 33db8 <__assert_fail@plt+0x22bac>
   34d5c:	b	34c64 <__assert_fail@plt+0x23a58>
   34d60:	mov	r2, #5
   34d64:	ldr	r1, [pc, #-4016]	; 33dbc <__assert_fail@plt+0x22bb0>
   34d68:	mov	r0, #0
   34d6c:	bl	10f90 <dcgettext@plt>
   34d70:	mov	r1, r8
   34d74:	bl	548ac <error@@Base>
   34d78:	mov	r2, #5
   34d7c:	ldr	r1, [pc, #-4036]	; 33dc0 <__assert_fail@plt+0x22bb4>
   34d80:	mov	r0, #0
   34d84:	bl	10f90 <dcgettext@plt>
   34d88:	bl	10f24 <printf@plt>
   34d8c:	mov	r3, #0
   34d90:	str	r3, [sp, #52]	; 0x34
   34d94:	b	32d58 <__assert_fail@plt+0x21b4c>
   34d98:	ldr	r1, [pc, #-4060]	; 33dc4 <__assert_fail@plt+0x22bb8>
   34d9c:	mov	r2, #5
   34da0:	mov	r0, #0
   34da4:	bl	10f90 <dcgettext@plt>
   34da8:	mov	r1, sl
   34dac:	b	33e9c <__assert_fail@plt+0x22c90>
   34db0:	ldr	r3, [pc, #-4080]	; 33dc8 <__assert_fail@plt+0x22bbc>
   34db4:	ldr	r4, [pc, #-4080]	; 33dcc <__assert_fail@plt+0x22bc0>
   34db8:	umull	r1, lr, r3, r2
   34dbc:	umull	r1, r4, r4, r2
   34dc0:	lsr	lr, lr, #5
   34dc4:	lsr	r4, r4, #18
   34dc8:	mov	r1, r8
   34dcc:	umull	ip, r0, r3, r4
   34dd0:	umull	r3, ip, r3, lr
   34dd4:	ldr	r3, [pc, #2024]	; 355c4 <__assert_fail@plt+0x243b8>
   34dd8:	lsr	r0, r0, #5
   34ddc:	lsr	ip, ip, #5
   34de0:	add	r0, r0, r0, lsl #2
   34de4:	add	ip, ip, ip, lsl #2
   34de8:	umull	r5, r3, r3, r2
   34dec:	add	r0, r0, r0, lsl #2
   34df0:	add	ip, ip, ip, lsl #2
   34df4:	sub	r0, r4, r0, lsl #2
   34df8:	sub	ip, lr, ip, lsl #2
   34dfc:	lsr	r3, r3, #25
   34e00:	stm	sp, {r0, ip}
   34e04:	ldr	r0, [pc, #1980]	; 355c8 <__assert_fail@plt+0x243bc>
   34e08:	bl	10f24 <printf@plt>
   34e0c:	b	32d58 <__assert_fail@plt+0x21b4c>
   34e10:	str	r5, [sp, #40]	; 0x28
   34e14:	ldr	r7, [pc, #1968]	; 355cc <__assert_fail@plt+0x243c0>
   34e18:	b	32c40 <__assert_fail@plt+0x21a34>
   34e1c:	str	r5, [sp, #40]	; 0x28
   34e20:	ldr	r7, [pc, #1960]	; 355d0 <__assert_fail@plt+0x243c4>
   34e24:	b	32c40 <__assert_fail@plt+0x21a34>
   34e28:	mov	r2, #5
   34e2c:	ldr	r1, [pc, #1952]	; 355d4 <__assert_fail@plt+0x243c8>
   34e30:	mov	r0, #0
   34e34:	bl	10f90 <dcgettext@plt>
   34e38:	str	r5, [sp, #40]	; 0x28
   34e3c:	mov	r7, r0
   34e40:	b	32c40 <__assert_fail@plt+0x21a34>
   34e44:	mov	r2, #5
   34e48:	ldr	r1, [pc, #1928]	; 355d8 <__assert_fail@plt+0x243cc>
   34e4c:	mov	r0, #0
   34e50:	bl	10f90 <dcgettext@plt>
   34e54:	str	r5, [sp, #40]	; 0x28
   34e58:	mov	r7, r0
   34e5c:	b	32c40 <__assert_fail@plt+0x21a34>
   34e60:	mov	r2, #5
   34e64:	ldr	r1, [pc, #1904]	; 355dc <__assert_fail@plt+0x243d0>
   34e68:	mov	r0, #0
   34e6c:	bl	10f90 <dcgettext@plt>
   34e70:	str	r5, [sp, #40]	; 0x28
   34e74:	mov	r7, r0
   34e78:	b	32c40 <__assert_fail@plt+0x21a34>
   34e7c:	mov	r2, #5
   34e80:	ldr	r1, [pc, #1880]	; 355e0 <__assert_fail@plt+0x243d4>
   34e84:	mov	r0, #0
   34e88:	bl	10f90 <dcgettext@plt>
   34e8c:	str	r5, [sp, #40]	; 0x28
   34e90:	mov	r7, r0
   34e94:	b	32c40 <__assert_fail@plt+0x21a34>
   34e98:	mov	r2, #5
   34e9c:	ldr	r1, [pc, #1856]	; 355e4 <__assert_fail@plt+0x243d8>
   34ea0:	mov	r0, #0
   34ea4:	bl	10f90 <dcgettext@plt>
   34ea8:	str	r5, [sp, #40]	; 0x28
   34eac:	mov	r7, r0
   34eb0:	b	32c40 <__assert_fail@plt+0x21a34>
   34eb4:	ldr	r7, [pc, #1836]	; 355e8 <__assert_fail@plt+0x243dc>
   34eb8:	str	r5, [sp, #40]	; 0x28
   34ebc:	b	32c40 <__assert_fail@plt+0x21a34>
   34ec0:	mov	r2, #5
   34ec4:	ldr	r1, [pc, #1824]	; 355ec <__assert_fail@plt+0x243e0>
   34ec8:	mov	r0, #0
   34ecc:	bl	10f90 <dcgettext@plt>
   34ed0:	str	r5, [sp, #40]	; 0x28
   34ed4:	mov	r7, r0
   34ed8:	b	32c40 <__assert_fail@plt+0x21a34>
   34edc:	mov	r2, #5
   34ee0:	ldr	r1, [pc, #1800]	; 355f0 <__assert_fail@plt+0x243e4>
   34ee4:	mov	r0, #0
   34ee8:	bl	10f90 <dcgettext@plt>
   34eec:	str	r5, [sp, #40]	; 0x28
   34ef0:	mov	r7, r0
   34ef4:	b	32c40 <__assert_fail@plt+0x21a34>
   34ef8:	str	r5, [sp, #40]	; 0x28
   34efc:	ldr	r7, [pc, #1776]	; 355f4 <__assert_fail@plt+0x243e8>
   34f00:	b	32c40 <__assert_fail@plt+0x21a34>
   34f04:	mov	r2, #5
   34f08:	ldr	r1, [pc, #1768]	; 355f8 <__assert_fail@plt+0x243ec>
   34f0c:	mov	r0, #0
   34f10:	bl	10f90 <dcgettext@plt>
   34f14:	str	r5, [sp, #40]	; 0x28
   34f18:	mov	r7, r0
   34f1c:	b	32c40 <__assert_fail@plt+0x21a34>
   34f20:	mov	r2, #5
   34f24:	ldr	r1, [pc, #1744]	; 355fc <__assert_fail@plt+0x243f0>
   34f28:	mov	r0, #0
   34f2c:	bl	10f90 <dcgettext@plt>
   34f30:	str	r5, [sp, #40]	; 0x28
   34f34:	mov	r7, r0
   34f38:	b	32c40 <__assert_fail@plt+0x21a34>
   34f3c:	mov	r2, #5
   34f40:	ldr	r1, [pc, #1720]	; 35600 <__assert_fail@plt+0x243f4>
   34f44:	mov	r0, #0
   34f48:	bl	10f90 <dcgettext@plt>
   34f4c:	str	r5, [sp, #40]	; 0x28
   34f50:	mov	r7, r0
   34f54:	b	32c40 <__assert_fail@plt+0x21a34>
   34f58:	mov	r2, #5
   34f5c:	ldr	r1, [pc, #1696]	; 35604 <__assert_fail@plt+0x243f8>
   34f60:	mov	r0, #0
   34f64:	bl	10f90 <dcgettext@plt>
   34f68:	mov	r3, fp
   34f6c:	mov	r1, #64	; 0x40
   34f70:	ldr	r7, [pc, #1680]	; 35608 <__assert_fail@plt+0x243fc>
   34f74:	mov	r2, r0
   34f78:	ldr	r0, [pc, #1672]	; 35608 <__assert_fail@plt+0x243fc>
   34f7c:	bl	110b0 <snprintf@plt>
   34f80:	str	r5, [sp, #40]	; 0x28
   34f84:	b	32c40 <__assert_fail@plt+0x21a34>
   34f88:	strd	sl, [sp, #120]	; 0x78
   34f8c:	str	r4, [sp, #132]	; 0x84
   34f90:	mov	r2, #5
   34f94:	ldr	r1, [pc, #1648]	; 3560c <__assert_fail@plt+0x24400>
   34f98:	mov	r0, #0
   34f9c:	bl	10f90 <dcgettext@plt>
   34fa0:	bl	10f24 <printf@plt>
   34fa4:	b	32d58 <__assert_fail@plt+0x21b4c>
   34fa8:	ldr	r2, [r9]
   34fac:	cmp	r2, #0
   34fb0:	beq	32fd4 <__assert_fail@plt+0x21dc8>
   34fb4:	ldr	r1, [sp, #88]	; 0x58
   34fb8:	cmp	r1, #10
   34fbc:	ldrls	pc, [pc, r1, lsl #2]
   34fc0:	b	32c94 <__assert_fail@plt+0x21a88>
   34fc4:	andeq	r4, r3, r8, asr sp
   34fc8:	muleq	r3, r4, ip
   34fcc:	muleq	r3, r4, ip
   34fd0:	andeq	r4, r3, r0, asr sp
   34fd4:	muleq	r3, r4, ip
   34fd8:	muleq	r3, r4, ip
   34fdc:	muleq	r3, r4, ip
   34fe0:	muleq	r3, r4, ip
   34fe4:	muleq	r3, r4, ip
   34fe8:	andeq	r4, r3, r4, lsr #25
   34fec:	andeq	r4, r3, r0, ror #24
   34ff0:	add	r8, r5, r2
   34ff4:	mov	r7, #1
   34ff8:	cmp	fp, #256	; 0x100
   34ffc:	beq	35094 <__assert_fail@plt+0x23e88>
   35000:	mov	r2, #5
   35004:	ldr	r1, [pc, #1540]	; 35610 <__assert_fail@plt+0x24404>
   35008:	mov	r0, #0
   3500c:	ldr	r4, [pc, #1536]	; 35614 <__assert_fail@plt+0x24408>
   35010:	bl	10f90 <dcgettext@plt>
   35014:	mov	r1, r5
   35018:	bl	10f24 <printf@plt>
   3501c:	cmp	r8, #0
   35020:	str	r5, [r4, #-3912]	; 0xfffff0b8
   35024:	beq	35044 <__assert_fail@plt+0x23e38>
   35028:	mov	r2, #5
   3502c:	ldr	r1, [pc, #1508]	; 35618 <__assert_fail@plt+0x2440c>
   35030:	mov	r0, #0
   35034:	bl	10f90 <dcgettext@plt>
   35038:	mov	r1, r8
   3503c:	bl	10f24 <printf@plt>
   35040:	str	r8, [r4, #-3916]	; 0xfffff0b4
   35044:	cmp	r7, #0
   35048:	bne	3308c <__assert_fail@plt+0x21e80>
   3504c:	b	330b0 <__assert_fail@plt+0x21ea4>
   35050:	mov	r2, #5
   35054:	ldr	r1, [pc, #1472]	; 3561c <__assert_fail@plt+0x24410>
   35058:	mov	r0, #0
   3505c:	str	r3, [sp, #40]	; 0x28
   35060:	bl	10f90 <dcgettext@plt>
   35064:	ldr	r3, [sp, #40]	; 0x28
   35068:	mov	r1, sl
   3506c:	mov	r2, r3
   35070:	bl	548ac <error@@Base>
   35074:	ldr	r2, [r9]
   35078:	b	32c94 <__assert_fail@plt+0x21a88>
   3507c:	mov	r2, #5
   35080:	ldr	r1, [pc, #1432]	; 35620 <__assert_fail@plt+0x24414>
   35084:	bl	10f90 <dcgettext@plt>
   35088:	ldr	r1, [sp, #40]	; 0x28
   3508c:	bl	54dd0 <warn@@Base>
   35090:	b	34b64 <__assert_fail@plt+0x23958>
   35094:	ldr	r4, [pc, #1400]	; 35614 <__assert_fail@plt+0x24408>
   35098:	ldr	r6, [r4, #-3924]	; 0xfffff0ac
   3509c:	cmp	r6, #0
   350a0:	beq	350d0 <__assert_fail@plt+0x23ec4>
   350a4:	adds	r3, r6, #15
   350a8:	bic	r3, r3, #15
   350ac:	mov	r2, #0
   350b0:	str	r3, [sp, #136]	; 0x88
   350b4:	adc	r3, r2, r2
   350b8:	str	r3, [sp, #140]	; 0x8c
   350bc:	ldrd	r0, [sp, #136]	; 0x88
   350c0:	mov	r3, #0
   350c4:	cmp	r3, r1
   350c8:	cmpeq	r5, r0
   350cc:	bhi	3542c <__assert_fail@plt+0x24220>
   350d0:	mov	r2, #5
   350d4:	ldr	r1, [pc, #1332]	; 35610 <__assert_fail@plt+0x24404>
   350d8:	mov	r0, #0
   350dc:	bl	10f90 <dcgettext@plt>
   350e0:	mov	r1, r5
   350e4:	bl	10f24 <printf@plt>
   350e8:	cmp	r8, #0
   350ec:	str	r5, [r4, #-3920]	; 0xfffff0b0
   350f0:	beq	35044 <__assert_fail@plt+0x23e38>
   350f4:	mov	r2, #5
   350f8:	ldr	r1, [pc, #1304]	; 35618 <__assert_fail@plt+0x2440c>
   350fc:	mov	r0, #0
   35100:	bl	10f90 <dcgettext@plt>
   35104:	mov	r1, r8
   35108:	bl	10f24 <printf@plt>
   3510c:	str	r8, [r4, #-3924]	; 0xfffff0ac
   35110:	b	35044 <__assert_fail@plt+0x23e38>
   35114:	mov	r2, #5
   35118:	ldr	r1, [pc, #1284]	; 35624 <__assert_fail@plt+0x24418>
   3511c:	mov	r0, #0
   35120:	bl	10f90 <dcgettext@plt>
   35124:	mov	r1, r8
   35128:	bl	10f24 <printf@plt>
   3512c:	b	32d58 <__assert_fail@plt+0x21b4c>
   35130:	ldr	r0, [pc, #1264]	; 35628 <__assert_fail@plt+0x2441c>
   35134:	bl	10f24 <printf@plt>
   35138:	cmp	sl, #4
   3513c:	bne	348b0 <__assert_fail@plt+0x236a4>
   35140:	ldr	r3, [r6]
   35144:	mov	r1, sl
   35148:	mov	r0, r8
   3514c:	blx	r3
   35150:	bl	1437c <__assert_fail@plt+0x3170>
   35154:	b	344c4 <__assert_fail@plt+0x232b8>
   35158:	ldr	r0, [pc, #1228]	; 3562c <__assert_fail@plt+0x24420>
   3515c:	bl	10f24 <printf@plt>
   35160:	cmp	sl, #4
   35164:	bne	348b0 <__assert_fail@plt+0x236a4>
   35168:	ldr	r3, [r6]
   3516c:	mov	r1, sl
   35170:	mov	r0, r8
   35174:	blx	r3
   35178:	subs	r7, r0, #0
   3517c:	beq	344c4 <__assert_fail@plt+0x232b8>
   35180:	rsb	r4, r7, #0
   35184:	and	r4, r4, r7
   35188:	cmp	r4, #1
   3518c:	bic	r7, r7, r4
   35190:	beq	351cc <__assert_fail@plt+0x23fc0>
   35194:	cmp	r4, #2
   35198:	ldr	r0, [pc, #1168]	; 35630 <__assert_fail@plt+0x24424>
   3519c:	beq	351d8 <__assert_fail@plt+0x23fcc>
   351a0:	ldr	r1, [pc, #1164]	; 35634 <__assert_fail@plt+0x24428>
   351a4:	mov	r2, #5
   351a8:	mov	r0, #0
   351ac:	bl	10f90 <dcgettext@plt>
   351b0:	mov	r1, r4
   351b4:	bl	10f24 <printf@plt>
   351b8:	cmp	r7, #0
   351bc:	beq	344c4 <__assert_fail@plt+0x232b8>
   351c0:	ldr	r0, [pc, #1136]	; 35638 <__assert_fail@plt+0x2442c>
   351c4:	bl	10f24 <printf@plt>
   351c8:	b	35180 <__assert_fail@plt+0x23f74>
   351cc:	ldr	r0, [pc, #1128]	; 3563c <__assert_fail@plt+0x24430>
   351d0:	bl	10f24 <printf@plt>
   351d4:	b	351b8 <__assert_fail@plt+0x23fac>
   351d8:	bl	10f24 <printf@plt>
   351dc:	b	351b8 <__assert_fail@plt+0x23fac>
   351e0:	ldr	r0, [pc, #1112]	; 35640 <__assert_fail@plt+0x24434>
   351e4:	bl	10f24 <printf@plt>
   351e8:	cmp	sl, #4
   351ec:	beq	35140 <__assert_fail@plt+0x23f34>
   351f0:	b	348b0 <__assert_fail@plt+0x236a4>
   351f4:	mov	r3, r7
   351f8:	mov	r2, #1
   351fc:	add	r1, r5, #2
   35200:	ldr	r0, [sp, #48]	; 0x30
   35204:	bl	180c0 <__assert_fail@plt+0x6eb4>
   35208:	adds	r7, r0, #0
   3520c:	movne	r7, #1
   35210:	tst	r7, r6
   35214:	beq	35094 <__assert_fail@plt+0x23e88>
   35218:	ldrd	r2, [r0, #8]
   3521c:	orrs	r1, r2, r3
   35220:	bne	34ff0 <__assert_fail@plt+0x23de4>
   35224:	ldr	r4, [pc, #1000]	; 35614 <__assert_fail@plt+0x24408>
   35228:	ldr	r6, [r4, #-3924]	; 0xfffff0ac
   3522c:	cmp	r6, #0
   35230:	beq	3548c <__assert_fail@plt+0x24280>
   35234:	mov	r8, #0
   35238:	mov	r7, #1
   3523c:	b	350a4 <__assert_fail@plt+0x23e98>
   35240:	ldr	r1, [pc, #1020]	; 35644 <__assert_fail@plt+0x24438>
   35244:	bl	10f90 <dcgettext@plt>
   35248:	str	r5, [sp, #40]	; 0x28
   3524c:	mov	r7, r0
   35250:	b	32c40 <__assert_fail@plt+0x21a34>
   35254:	mov	r2, #5
   35258:	ldr	r1, [pc, #1000]	; 35648 <__assert_fail@plt+0x2443c>
   3525c:	bl	10f90 <dcgettext@plt>
   35260:	str	r7, [sp, #52]	; 0x34
   35264:	bl	548ac <error@@Base>
   35268:	b	32d58 <__assert_fail@plt+0x21b4c>
   3526c:	mov	r2, #5
   35270:	ldr	r1, [pc, #980]	; 3564c <__assert_fail@plt+0x24440>
   35274:	bl	10f90 <dcgettext@plt>
   35278:	bl	10f24 <printf@plt>
   3527c:	b	32d58 <__assert_fail@plt+0x21b4c>
   35280:	mov	r0, r4
   35284:	mov	r1, #8
   35288:	blx	r3
   3528c:	mov	r6, #1
   35290:	mov	r5, r0
   35294:	b	3300c <__assert_fail@plt+0x21e00>
   35298:	ldr	r5, [r3, #-3924]	; 0xfffff0ac
   3529c:	ldr	r4, [r3, #-3920]	; 0xfffff0b0
   352a0:	mov	r2, #5
   352a4:	cmp	r5, r4
   352a8:	bhi	34a4c <__assert_fail@plt+0x23840>
   352ac:	ldr	r1, [pc, #924]	; 35650 <__assert_fail@plt+0x24444>
   352b0:	mov	r0, #0
   352b4:	bl	10f90 <dcgettext@plt>
   352b8:	mov	r1, r4
   352bc:	bl	10f24 <printf@plt>
   352c0:	b	32d58 <__assert_fail@plt+0x21b4c>
   352c4:	cmp	sl, #0
   352c8:	sub	r3, r3, #2
   352cc:	bne	34cd4 <__assert_fail@plt+0x23ac8>
   352d0:	ldr	r3, [sp, #112]	; 0x70
   352d4:	cmp	r3, #2
   352d8:	beq	354c8 <__assert_fail@plt+0x242bc>
   352dc:	cmp	r3, #7
   352e0:	beq	3544c <__assert_fail@plt+0x24240>
   352e4:	ldr	r3, [sp, #72]	; 0x48
   352e8:	ldr	r0, [pc, #868]	; 35654 <__assert_fail@plt+0x24448>
   352ec:	sub	r3, r3, #3
   352f0:	str	r3, [sp, #72]	; 0x48
   352f4:	bl	10f24 <printf@plt>
   352f8:	b	34c78 <__assert_fail@plt+0x23a6c>
   352fc:	ldr	r9, [sp, #40]	; 0x28
   35300:	strd	sl, [sp, #120]	; 0x78
   35304:	cmp	r6, #0
   35308:	cmpne	r9, #0
   3530c:	str	r4, [sp, #132]	; 0x84
   35310:	beq	34f90 <__assert_fail@plt+0x23d84>
   35314:	ldr	r5, [sp, #116]	; 0x74
   35318:	mov	r3, r6
   3531c:	str	r4, [sp]
   35320:	add	r1, sp, #148	; 0x94
   35324:	mov	r2, r5
   35328:	add	r0, sp, #152	; 0x98
   3532c:	str	r9, [sp, #148]	; 0x94
   35330:	bl	14f44 <__assert_fail@plt+0x3d38>
   35334:	subs	r3, r0, #0
   35338:	bne	353c4 <__assert_fail@plt+0x241b8>
   3533c:	mov	r3, r6
   35340:	str	r4, [sp]
   35344:	mov	r2, r5
   35348:	add	r1, sp, #148	; 0x94
   3534c:	add	r0, sp, #156	; 0x9c
   35350:	bl	14f44 <__assert_fail@plt+0x3d38>
   35354:	subs	r3, r0, #0
   35358:	bne	353c4 <__assert_fail@plt+0x241b8>
   3535c:	mov	r3, r6
   35360:	str	r4, [sp]
   35364:	mov	r2, r5
   35368:	add	r1, sp, #148	; 0x94
   3536c:	add	r0, sp, #160	; 0xa0
   35370:	bl	14f44 <__assert_fail@plt+0x3d38>
   35374:	subs	r3, r0, #0
   35378:	bne	353c4 <__assert_fail@plt+0x241b8>
   3537c:	mov	r3, r6
   35380:	str	r4, [sp]
   35384:	add	r1, sp, #148	; 0x94
   35388:	mov	r0, r7
   3538c:	mov	r2, r5
   35390:	bl	14f44 <__assert_fail@plt+0x3d38>
   35394:	subs	r3, r0, #0
   35398:	bne	353c4 <__assert_fail@plt+0x241b8>
   3539c:	mov	r2, #5
   353a0:	ldr	r1, [pc, #688]	; 35658 <__assert_fail@plt+0x2444c>
   353a4:	bl	10f90 <dcgettext@plt>
   353a8:	ldr	r2, [sp, #164]	; 0xa4
   353ac:	ldr	r3, [sp, #160]	; 0xa0
   353b0:	str	r2, [sp]
   353b4:	ldr	r1, [sp, #152]	; 0x98
   353b8:	ldr	r2, [sp, #156]	; 0x9c
   353bc:	bl	10f24 <printf@plt>
   353c0:	b	32d58 <__assert_fail@plt+0x21b4c>
   353c4:	cmp	r3, #1
   353c8:	beq	349d8 <__assert_fail@plt+0x237cc>
   353cc:	cmp	r3, #2
   353d0:	bne	32d58 <__assert_fail@plt+0x21b4c>
   353d4:	b	34f90 <__assert_fail@plt+0x23d84>
   353d8:	mov	r2, #5
   353dc:	ldr	r1, [pc, #632]	; 3565c <__assert_fail@plt+0x24450>
   353e0:	mov	r0, #0
   353e4:	bl	10f90 <dcgettext@plt>
   353e8:	mov	r2, sl
   353ec:	mov	r1, r7
   353f0:	bl	10f24 <printf@plt>
   353f4:	b	330b0 <__assert_fail@plt+0x21ea4>
   353f8:	mov	r3, #1
   353fc:	str	r3, [sp, #52]	; 0x34
   35400:	b	335b8 <__assert_fail@plt+0x223ac>
   35404:	mov	r3, #5
   35408:	str	r3, [sp]
   3540c:	ldr	r2, [pc, #588]	; 35660 <__assert_fail@plt+0x24454>
   35410:	mov	r3, r7
   35414:	ldr	r1, [pc, #584]	; 35664 <__assert_fail@plt+0x24458>
   35418:	mov	r0, #0
   3541c:	bl	11200 <dcngettext@plt>
   35420:	mov	r1, r7
   35424:	bl	54dd0 <warn@@Base>
   35428:	b	335b8 <__assert_fail@plt+0x223ac>
   3542c:	mov	r2, #5
   35430:	ldr	r1, [pc, #560]	; 35668 <__assert_fail@plt+0x2445c>
   35434:	mov	r0, #0
   35438:	bl	10f90 <dcgettext@plt>
   3543c:	add	r1, r6, #1
   35440:	sub	r2, r5, #1
   35444:	bl	54dd0 <warn@@Base>
   35448:	b	350d0 <__assert_fail@plt+0x23ec4>
   3544c:	mov	r0, #0
   35450:	ldr	r3, [pc, #532]	; 3566c <__assert_fail@plt+0x24460>
   35454:	add	r3, r3, r0, lsl #2
   35458:	ldr	r1, [r3, #696]	; 0x2b8
   3545c:	ldr	r3, [sp, #72]	; 0x48
   35460:	rsb	r0, r3, #0
   35464:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   35468:	ldr	r2, [r9]
   3546c:	b	32c94 <__assert_fail@plt+0x21a88>
   35470:	ldr	sl, [sp, #72]	; 0x48
   35474:	ldr	r0, [pc, #500]	; 35670 <__assert_fail@plt+0x24464>
   35478:	mov	r1, sl
   3547c:	bl	10f24 <printf@plt>
   35480:	sub	r3, sl, r0
   35484:	str	r3, [sp, #72]	; 0x48
   35488:	b	34c78 <__assert_fail@plt+0x23a6c>
   3548c:	mov	r2, #5
   35490:	ldr	r1, [pc, #376]	; 35610 <__assert_fail@plt+0x24404>
   35494:	mov	r0, r6
   35498:	bl	10f90 <dcgettext@plt>
   3549c:	mov	r1, r5
   354a0:	bl	10f24 <printf@plt>
   354a4:	str	r5, [r4, #-3920]	; 0xfffff0b0
   354a8:	b	3308c <__assert_fail@plt+0x21e80>
   354ac:	cmp	r1, #0
   354b0:	cmpeq	r2, #4
   354b4:	bhi	34d24 <__assert_fail@plt+0x23b18>
   354b8:	ldr	r3, [pc, #428]	; 3566c <__assert_fail@plt+0x24460>
   354bc:	add	r3, r3, r0, lsl #2
   354c0:	ldr	r1, [r3, #716]	; 0x2cc
   354c4:	b	3545c <__assert_fail@plt+0x24250>
   354c8:	mov	r0, #0
   354cc:	b	354b8 <__assert_fail@plt+0x242ac>
   354d0:	orrs	r3, r0, r1
   354d4:	bne	34d24 <__assert_fail@plt+0x23b18>
   354d8:	b	352e4 <__assert_fail@plt+0x240d8>
   354dc:	ldr	r2, [sp, #112]	; 0x70
   354e0:	ldr	r1, [pc, #396]	; 35674 <__assert_fail@plt+0x24468>
   354e4:	lsl	r2, r2, #1
   354e8:	ldrh	r2, [r1, r2]
   354ec:	ands	r2, r2, #16
   354f0:	str	r2, [sp, #100]	; 0x64
   354f4:	beq	35554 <__assert_fail@plt+0x24348>
   354f8:	add	r0, r3, #1
   354fc:	sub	r1, r0, r5
   35500:	sub	r1, sl, r1
   35504:	str	r0, [sp, #100]	; 0x64
   35508:	bl	11104 <strnlen@plt>
   3550c:	ldr	r2, [sp, #72]	; 0x48
   35510:	add	r3, r0, #1
   35514:	cmp	r2, r3
   35518:	mov	r1, r3
   3551c:	bge	355b8 <__assert_fail@plt+0x243ac>
   35520:	ldr	r2, [r9]
   35524:	cmp	r2, #0
   35528:	bne	355b4 <__assert_fail@plt+0x243a8>
   3552c:	ldr	r3, [sp, #72]	; 0x48
   35530:	str	r2, [sp, #72]	; 0x48
   35534:	mov	r1, r3
   35538:	ldr	r2, [sp, #100]	; 0x64
   3553c:	ldr	r0, [pc, #308]	; 35678 <__assert_fail@plt+0x2446c>
   35540:	add	r3, r2, r3
   35544:	str	r3, [sp, #100]	; 0x64
   35548:	bl	10f24 <printf@plt>
   3554c:	ldr	r3, [pc, #296]	; 3567c <__assert_fail@plt+0x24470>
   35550:	b	34b50 <__assert_fail@plt+0x23944>
   35554:	mov	r2, #5
   35558:	ldr	r1, [pc, #288]	; 35680 <__assert_fail@plt+0x24474>
   3555c:	ldr	r0, [sp, #100]	; 0x64
   35560:	str	r3, [sp, #128]	; 0x80
   35564:	bl	10f90 <dcgettext@plt>
   35568:	ldr	r3, [sp, #128]	; 0x80
   3556c:	ldrb	r1, [r3, #1]
   35570:	bl	548ac <error@@Base>
   35574:	mov	r2, #5
   35578:	ldr	r1, [pc, #260]	; 35684 <__assert_fail@plt+0x24478>
   3557c:	ldr	r0, [sp, #100]	; 0x64
   35580:	bl	10f90 <dcgettext@plt>
   35584:	ldr	r3, [sp, #128]	; 0x80
   35588:	add	r3, r3, #2
   3558c:	ldrb	r2, [r3, #-1]
   35590:	str	r3, [sp, #100]	; 0x64
   35594:	ldr	r3, [pc, #224]	; 3567c <__assert_fail@plt+0x24470>
   35598:	str	r3, [sp, #128]	; 0x80
   3559c:	mov	r1, r0
   355a0:	ldr	r0, [pc, #224]	; 35688 <__assert_fail@plt+0x2447c>
   355a4:	bl	1114c <sprintf@plt>
   355a8:	ldr	r0, [pc, #216]	; 35688 <__assert_fail@plt+0x2447c>
   355ac:	ldr	r3, [sp, #128]	; 0x80
   355b0:	b	34b30 <__assert_fail@plt+0x23924>
   355b4:	ldr	r2, [sp, #72]	; 0x48
   355b8:	sub	r2, r2, r3
   355bc:	str	r2, [sp, #72]	; 0x48
   355c0:	b	35538 <__assert_fail@plt+0x2432c>
   355c4:	strbpl	r3, [r6, #2953]!	; 0xb89
   355c8:	andeq	sl, r6, r8, lsl #27
   355cc:	andeq	sl, r6, r8, ror #15
   355d0:	strdeq	sl, [r6], -ip
   355d4:	andeq	sl, r6, r4, lsl #30
   355d8:	andeq	sl, r6, r8, ror #29
   355dc:	ldrdeq	sl, [r6], -r0
   355e0:			; <UNDEFINED> instruction: 0x0006aeb8
   355e4:	muleq	r6, ip, lr
   355e8:	andeq	sl, r6, ip, lsl #16
   355ec:	andeq	sl, r6, r4, lsl #29
   355f0:	andeq	sl, r6, r4, ror #28
   355f4:	andeq	sl, r6, ip, lsl r8
   355f8:	andeq	sl, r6, r8, asr #28
   355fc:	andeq	sl, r6, ip, lsr #28
   35600:	andeq	sl, r6, r0, lsl lr
   35604:	andeq	r5, r6, r4, asr r4
   35608:	ldrdeq	fp, [r9], -ip
   3560c:			; <UNDEFINED> instruction: 0x0006b5b8
   35610:	andeq	fp, r6, r4, lsl #16
   35614:	andeq	ip, r9, r0, lsr r4
   35618:	andeq	fp, r6, r4, lsr #16
   3561c:	strheq	fp, [r6], -ip
   35620:	andeq	fp, r6, ip, lsl #1
   35624:	andeq	fp, r6, r8, lsl r4
   35628:	andeq	fp, r6, r8, lsr #9
   3562c:			; <UNDEFINED> instruction: 0x0006b4bc
   35630:	ldrdeq	fp, [r6], -r0
   35634:	andeq	r2, r6, r8, lsl lr
   35638:			; <UNDEFINED> instruction: 0x00068eb8
   3563c:	andeq	fp, r6, ip, asr #9
   35640:	andeq	fp, r6, r0, lsl #9
   35644:	andeq	sl, r6, ip, lsr #30
   35648:	andeq	fp, r6, r8, ror #12
   3564c:	andeq	fp, r6, r8, asr r3
   35650:	andeq	fp, r6, r0, ror r7
   35654:	andeq	fp, r6, r8, lsr r1
   35658:	andeq	fp, r6, r4, lsl #11
   3565c:	andeq	fp, r6, ip, asr r4
   35660:	andeq	sl, r6, ip, lsl #18
   35664:	andeq	sl, r6, r0, asr r9
   35668:	ldrdeq	fp, [r6], -r4
   3566c:	andeq	lr, r5, ip, asr #27
   35670:	andeq	fp, r6, r4, asr #2
   35674:	andeq	r7, r8, r8, ror #25
   35678:	andeq	fp, r6, ip, asr #32
   3567c:	andeq	sl, r6, r4, lsr r8
   35680:	andeq	fp, r6, r4, asr r0
   35684:	andeq	fp, r6, ip, ror r0
   35688:	andeq	fp, r9, ip, asr r4
   3568c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35690:	mov	r6, r0
   35694:	ldr	r4, [r0, #100]	; 0x64
   35698:	sub	sp, sp, #20
   3569c:	cmp	r4, #0
   356a0:	beq	35730 <__assert_fail@plt+0x24524>
   356a4:	ldr	r2, [r6, #76]	; 0x4c
   356a8:	cmp	r2, #0
   356ac:	beq	35740 <__assert_fail@plt+0x24534>
   356b0:	add	r4, r4, #56	; 0x38
   356b4:	mov	r7, #1
   356b8:	mov	r5, #0
   356bc:	b	356d0 <__assert_fail@plt+0x244c4>
   356c0:	add	r5, r5, #1
   356c4:	cmp	r2, r5
   356c8:	add	r4, r4, #56	; 0x38
   356cc:	bls	35724 <__assert_fail@plt+0x24518>
   356d0:	ldr	r3, [r4, #-56]	; 0xffffffc8
   356d4:	cmp	r3, #4
   356d8:	bne	356c0 <__assert_fail@plt+0x244b4>
   356dc:	ldrd	r8, [r4, #-24]	; 0xffffffe8
   356e0:	mov	r1, #0
   356e4:	mov	r0, r6
   356e8:	orrs	r3, r8, r9
   356ec:	beq	35710 <__assert_fail@plt+0x24504>
   356f0:	ldrd	sl, [r4, #-8]
   356f4:	ldrd	r2, [r4, #-48]	; 0xffffffd0
   356f8:	strd	r8, [sp]
   356fc:	strd	sl, [sp, #8]
   35700:	bl	32af4 <__assert_fail@plt+0x218e8>
   35704:	ldr	r2, [r6, #76]	; 0x4c
   35708:	cmp	r0, #0
   3570c:	bne	356c0 <__assert_fail@plt+0x244b4>
   35710:	add	r5, r5, #1
   35714:	cmp	r2, r5
   35718:	mov	r7, #0
   3571c:	add	r4, r4, #56	; 0x38
   35720:	bhi	356d0 <__assert_fail@plt+0x244c4>
   35724:	mov	r0, r7
   35728:	add	sp, sp, #20
   3572c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35730:	bl	1c34c <__assert_fail@plt+0xb140>
   35734:	cmp	r0, #0
   35738:	ldrne	r4, [r6, #100]	; 0x64
   3573c:	bne	356a4 <__assert_fail@plt+0x24498>
   35740:	mov	r7, #1
   35744:	mov	r0, r7
   35748:	add	sp, sp, #20
   3574c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35750:	cmp	r0, #0
   35754:	bxeq	lr
   35758:	push	{r4, r5}
   3575c:	mov	r5, r3
   35760:	ldr	r3, [r0, #44]	; 0x2c
   35764:	cmp	r3, #0
   35768:	beq	357b4 <__assert_fail@plt+0x245a8>
   3576c:	ldr	ip, [r0, #48]	; 0x30
   35770:	add	ip, ip, ip, lsl #1
   35774:	add	ip, r3, ip, lsl #3
   35778:	cmp	r3, ip
   3577c:	bcs	357b4 <__assert_fail@plt+0x245a8>
   35780:	ldrd	r0, [r3]
   35784:	mov	r4, r2
   35788:	cmp	r5, r1
   3578c:	cmpeq	r2, r0
   35790:	bne	357a8 <__assert_fail@plt+0x2459c>
   35794:	b	357c0 <__assert_fail@plt+0x245b4>
   35798:	ldrd	r0, [r3]
   3579c:	cmp	r1, r5
   357a0:	cmpeq	r0, r4
   357a4:	beq	357c0 <__assert_fail@plt+0x245b4>
   357a8:	add	r3, r3, #24
   357ac:	cmp	r3, ip
   357b0:	bcc	35798 <__assert_fail@plt+0x2458c>
   357b4:	mov	r0, #0
   357b8:	pop	{r4, r5}
   357bc:	bx	lr
   357c0:	mov	r0, #1
   357c4:	pop	{r4, r5}
   357c8:	bx	lr
   357cc:	add	r0, r0, r0, lsl #3
   357d0:	push	{r4, lr}
   357d4:	ldr	r4, [pc, #44]	; 35808 <__assert_fail@plt+0x245fc>
   357d8:	add	r4, r4, r0, lsl #3
   357dc:	ldr	r0, [r4, #16]
   357e0:	cmp	r0, #0
   357e4:	popeq	{r4, pc}
   357e8:	bl	10f54 <free@plt>
   357ec:	mov	r2, #0
   357f0:	mov	r3, #0
   357f4:	mov	r1, #0
   357f8:	strd	r2, [r4, #24]
   357fc:	strd	r2, [r4, #32]
   35800:	str	r1, [r4, #16]
   35804:	pop	{r4, pc}
   35808:	strdeq	r9, [r9], -r0
   3580c:	ldr	r3, [r1, #96]	; 0x60
   35810:	cmp	r3, #0
   35814:	beq	35944 <__assert_fail@plt+0x24738>
   35818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3581c:	mov	r7, r0
   35820:	ldr	r6, [r1, #104]	; 0x68
   35824:	sub	sp, sp, #36	; 0x24
   35828:	cmp	r6, #0
   3582c:	mov	r4, r1
   35830:	beq	35894 <__assert_fail@plt+0x24688>
   35834:	ldr	r3, [pc, #272]	; 3594c <__assert_fail@plt+0x24740>
   35838:	add	r5, r7, r7, lsl #3
   3583c:	ldr	r6, [pc, #268]	; 35950 <__assert_fail@plt+0x24744>
   35840:	ldr	r8, [r3, #-3908]	; 0xfffff0bc
   35844:	lsl	r5, r5, #3
   35848:	mov	r2, r8
   3584c:	ldr	r1, [r6, r5]
   35850:	mov	r0, r4
   35854:	bl	1be5c <__assert_fail@plt+0xac50>
   35858:	add	r9, r6, r5
   3585c:	subs	sl, r0, #0
   35860:	beq	35918 <__assert_fail@plt+0x2470c>
   35864:	ldr	r3, [r6, r5]
   35868:	str	r3, [r9, #8]
   3586c:	cmp	r8, #0
   35870:	beq	3587c <__assert_fail@plt+0x24670>
   35874:	mov	r0, r7
   35878:	bl	357cc <__assert_fail@plt+0x245c0>
   3587c:	mov	r2, r4
   35880:	mov	r1, sl
   35884:	mov	r0, r7
   35888:	add	sp, sp, #36	; 0x24
   3588c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35890:	b	3222c <__assert_fail@plt+0x21020>
   35894:	ldr	r5, [r1, #88]	; 0x58
   35898:	cmp	r5, #0
   3589c:	beq	35834 <__assert_fail@plt+0x24628>
   358a0:	ldr	r2, [r1, #84]	; 0x54
   358a4:	cmp	r5, r2
   358a8:	bcs	35834 <__assert_fail@plt+0x24628>
   358ac:	add	r5, r5, r5, lsl #3
   358b0:	adds	r5, r3, r5, lsl #3
   358b4:	beq	35834 <__assert_fail@plt+0x24628>
   358b8:	ldrd	r8, [r5, #32]
   358bc:	orrs	r3, r8, r9
   358c0:	beq	35834 <__assert_fail@plt+0x24628>
   358c4:	ldr	r3, [r5, #24]
   358c8:	mov	r2, #5
   358cc:	ldr	r1, [pc, #128]	; 35954 <__assert_fail@plt+0x24748>
   358d0:	mov	r0, r6
   358d4:	str	r3, [sp, #28]
   358d8:	bl	10f90 <dcgettext@plt>
   358dc:	mov	sl, #1
   358e0:	mov	fp, #0
   358e4:	ldr	r3, [sp, #28]
   358e8:	strd	r8, [sp, #8]
   358ec:	strd	sl, [sp]
   358f0:	add	r2, r4, #8
   358f4:	add	r1, r4, #4
   358f8:	str	r0, [sp, #16]
   358fc:	mov	r0, r6
   35900:	bl	1717c <__assert_fail@plt+0x5f70>
   35904:	cmp	r0, #0
   35908:	str	r0, [r4, #104]	; 0x68
   3590c:	ldrne	r0, [r5, #32]
   35910:	str	r0, [r4, #108]	; 0x6c
   35914:	b	35834 <__assert_fail@plt+0x24628>
   35918:	mov	r2, r8
   3591c:	ldr	r1, [r9, #4]
   35920:	mov	r0, r4
   35924:	bl	1be5c <__assert_fail@plt+0xac50>
   35928:	subs	sl, r0, #0
   3592c:	ldrne	r3, [r9, #4]
   35930:	strne	r3, [r9, #8]
   35934:	bne	3586c <__assert_fail@plt+0x24660>
   35938:	mov	r0, #0
   3593c:	add	sp, sp, #36	; 0x24
   35940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35944:	mov	r0, #0
   35948:	bx	lr
   3594c:	andeq	ip, r9, r0, lsr r4
   35950:	strdeq	r9, [r9], -r0
   35954:	andeq	r5, r6, r8, lsr #14
   35958:	ldr	r3, [pc, #2308]	; 36264 <__assert_fail@plt+0x25058>
   3595c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35960:	mov	fp, r0
   35964:	ldr	r5, [r3, #360]	; 0x168
   35968:	sub	sp, sp, #84	; 0x54
   3596c:	cmp	r5, #0
   35970:	ldr	sl, [r0, #84]	; 0x54
   35974:	beq	35a24 <__assert_fail@plt+0x24818>
   35978:	ldr	r9, [pc, #2280]	; 36268 <__assert_fail@plt+0x2505c>
   3597c:	ldr	r8, [pc, #2280]	; 3626c <__assert_fail@plt+0x25060>
   35980:	ldr	r7, [pc, #2280]	; 36270 <__assert_fail@plt+0x25064>
   35984:	cmp	sl, #0
   35988:	movne	r6, #0
   3598c:	movne	r4, r6
   35990:	bne	359a8 <__assert_fail@plt+0x2479c>
   35994:	b	35e84 <__assert_fail@plt+0x24c78>
   35998:	ldr	sl, [fp, #84]	; 0x54
   3599c:	add	r4, r4, #1
   359a0:	cmp	r4, sl
   359a4:	bcs	35a10 <__assert_fail@plt+0x24804>
   359a8:	add	r2, r4, r4, lsl #3
   359ac:	ldr	r3, [fp, #96]	; 0x60
   359b0:	adds	r0, r3, r2, lsl #3
   359b4:	beq	35e74 <__assert_fail@plt+0x24c68>
   359b8:	ldr	r0, [fp, #104]	; 0x68
   359bc:	cmp	r0, #0
   359c0:	beq	35e64 <__assert_fail@plt+0x24c58>
   359c4:	ldr	r3, [r3, r2, lsl #3]
   359c8:	ldr	r2, [fp, #108]	; 0x6c
   359cc:	add	r0, r0, r3
   359d0:	cmp	r3, r2
   359d4:	bcs	35e50 <__assert_fail@plt+0x24c44>
   359d8:	ldr	r1, [r5]
   359dc:	bl	10f18 <strcmp@plt>
   359e0:	cmp	r0, #0
   359e4:	bne	35998 <__assert_fail@plt+0x2478c>
   359e8:	mov	r2, r4
   359ec:	ldrb	r3, [r5, #4]
   359f0:	add	r1, fp, #116	; 0x74
   359f4:	add	r0, fp, #112	; 0x70
   359f8:	bl	24d20 <__assert_fail@plt+0x13b14>
   359fc:	ldr	sl, [fp, #84]	; 0x54
   35a00:	add	r4, r4, #1
   35a04:	cmp	r4, sl
   35a08:	mov	r6, #1
   35a0c:	bcc	359a8 <__assert_fail@plt+0x2479c>
   35a10:	cmp	r6, #0
   35a14:	beq	35e84 <__assert_fail@plt+0x24c78>
   35a18:	ldr	r5, [r5, #8]
   35a1c:	cmp	r5, #0
   35a20:	bne	35984 <__assert_fail@plt+0x24778>
   35a24:	cmp	sl, #0
   35a28:	ldr	r9, [fp, #96]	; 0x60
   35a2c:	ldr	r3, [fp, #116]	; 0x74
   35a30:	beq	35f24 <__assert_fail@plt+0x24d18>
   35a34:	cmp	r3, #0
   35a38:	mov	r3, #1
   35a3c:	str	r3, [sp, #12]
   35a40:	beq	35f18 <__assert_fail@plt+0x24d0c>
   35a44:	mov	sl, #0
   35a48:	b	35a88 <__assert_fail@plt+0x2487c>
   35a4c:	tst	r5, #16
   35a50:	bne	35ac0 <__assert_fail@plt+0x248b4>
   35a54:	tst	r5, #8
   35a58:	and	r5, r5, #4
   35a5c:	bne	35aec <__assert_fail@plt+0x248e0>
   35a60:	cmp	r5, #0
   35a64:	bne	35ea4 <__assert_fail@plt+0x24c98>
   35a68:	ldr	r3, [fp, #84]	; 0x54
   35a6c:	add	sl, sl, #1
   35a70:	cmp	sl, r3
   35a74:	add	r9, r9, #72	; 0x48
   35a78:	ldr	r3, [fp, #116]	; 0x74
   35a7c:	bcs	35f2c <__assert_fail@plt+0x24d20>
   35a80:	cmp	sl, r3
   35a84:	bcs	35f18 <__assert_fail@plt+0x24d0c>
   35a88:	ldr	r3, [fp, #112]	; 0x70
   35a8c:	ldrb	r5, [r3, sl]
   35a90:	tst	r5, #1
   35a94:	beq	35a4c <__assert_fail@plt+0x24840>
   35a98:	mov	r2, #0
   35a9c:	mov	r1, fp
   35aa0:	mov	r0, r9
   35aa4:	bl	3262c <__assert_fail@plt+0x21420>
   35aa8:	ldr	r3, [sp, #12]
   35aac:	cmp	r0, #0
   35ab0:	moveq	r3, #0
   35ab4:	tst	r5, #16
   35ab8:	str	r3, [sp, #12]
   35abc:	beq	35a54 <__assert_fail@plt+0x24848>
   35ac0:	mov	r2, #1
   35ac4:	mov	r1, fp
   35ac8:	mov	r0, r9
   35acc:	bl	3262c <__assert_fail@plt+0x21420>
   35ad0:	ldr	r3, [sp, #12]
   35ad4:	cmp	r0, #0
   35ad8:	moveq	r3, #0
   35adc:	tst	r5, #8
   35ae0:	str	r3, [sp, #12]
   35ae4:	and	r5, r5, #4
   35ae8:	beq	35a60 <__assert_fail@plt+0x24854>
   35aec:	mov	r1, fp
   35af0:	mov	r0, r9
   35af4:	bl	24db8 <__assert_fail@plt+0x13bac>
   35af8:	cmp	r0, #0
   35afc:	str	r0, [sp, #8]
   35b00:	str	r0, [sp, #44]	; 0x2c
   35b04:	beq	35f80 <__assert_fail@plt+0x24d74>
   35b08:	ldrd	r6, [r9, #32]
   35b0c:	mov	r2, #5
   35b10:	ldr	r1, [pc, #1884]	; 36274 <__assert_fail@plt+0x25068>
   35b14:	mov	r0, #0
   35b18:	strd	r6, [sp, #16]
   35b1c:	bl	10f90 <dcgettext@plt>
   35b20:	add	r4, fp, #104	; 0x68
   35b24:	add	r1, fp, #108	; 0x6c
   35b28:	mov	r2, r9
   35b2c:	mov	r8, r0
   35b30:	mov	r0, r4
   35b34:	bl	16c64 <__assert_fail@plt+0x5a58>
   35b38:	mov	r1, r0
   35b3c:	mov	r0, r8
   35b40:	bl	10f24 <printf@plt>
   35b44:	ldr	r3, [pc, #1816]	; 36264 <__assert_fail@plt+0x25058>
   35b48:	ldr	r3, [r3, #3872]	; 0xf20
   35b4c:	cmp	r3, #0
   35b50:	beq	35b90 <__assert_fail@plt+0x24984>
   35b54:	strd	r6, [sp, #48]	; 0x30
   35b58:	ldr	r3, [r9, #8]
   35b5c:	mov	r8, #0
   35b60:	and	r3, r3, #2048	; 0x800
   35b64:	str	r3, [sp, #24]
   35b68:	str	r8, [sp, #28]
   35b6c:	ldrd	r2, [sp, #24]
   35b70:	orrs	r3, r2, r3
   35b74:	bne	361a4 <__assert_fail@plt+0x24f98>
   35b78:	ldrd	r6, [sp, #16]
   35b7c:	cmp	r7, #0
   35b80:	cmpeq	r6, #12
   35b84:	bhi	36034 <__assert_fail@plt+0x24e28>
   35b88:	ldr	r3, [sp, #8]
   35b8c:	str	r3, [sp, #44]	; 0x2c
   35b90:	ldr	ip, [fp, #84]	; 0x54
   35b94:	ldr	r4, [fp, #96]	; 0x60
   35b98:	add	lr, ip, ip, lsl #3
   35b9c:	add	lr, r4, lr, lsl #3
   35ba0:	cmp	r4, lr
   35ba4:	bcs	35c20 <__assert_fail@plt+0x24a14>
   35ba8:	mov	r1, r4
   35bac:	ldr	r6, [sp, #8]
   35bb0:	b	35bc0 <__assert_fail@plt+0x249b4>
   35bb4:	add	r1, r1, #72	; 0x48
   35bb8:	cmp	r1, lr
   35bbc:	bcs	35fc0 <__assert_fail@plt+0x24db4>
   35bc0:	ldr	r0, [r1, #4]
   35bc4:	cmp	r0, #4
   35bc8:	cmpne	r0, #9
   35bcc:	movne	r0, #1
   35bd0:	moveq	r0, #0
   35bd4:	bne	35bb4 <__assert_fail@plt+0x249a8>
   35bd8:	ldr	r3, [r1, #44]	; 0x2c
   35bdc:	cmp	r3, ip
   35be0:	add	r3, r3, r3, lsl #3
   35be4:	bcs	35bb4 <__assert_fail@plt+0x249a8>
   35be8:	add	r3, r4, r3, lsl #3
   35bec:	cmp	r9, r3
   35bf0:	bne	35bb4 <__assert_fail@plt+0x249a8>
   35bf4:	ldrd	r2, [r1, #32]
   35bf8:	orrs	r3, r2, r3
   35bfc:	beq	35bb4 <__assert_fail@plt+0x249a8>
   35c00:	ldr	r3, [r1, #40]	; 0x28
   35c04:	cmp	r3, ip
   35c08:	bcs	35bb4 <__assert_fail@plt+0x249a8>
   35c0c:	mov	r2, #5
   35c10:	ldr	r1, [pc, #1632]	; 36278 <__assert_fail@plt+0x2506c>
   35c14:	str	r6, [sp, #8]
   35c18:	bl	10f90 <dcgettext@plt>
   35c1c:	bl	10f24 <printf@plt>
   35c20:	ldr	r2, [sp, #44]	; 0x2c
   35c24:	ldr	r3, [sp, #16]
   35c28:	ldr	r6, [sp, #8]
   35c2c:	mov	r0, #0
   35c30:	add	r8, r2, r3
   35c34:	cmp	r8, r2
   35c38:	bhi	35c48 <__assert_fail@plt+0x24a3c>
   35c3c:	b	35c70 <__assert_fail@plt+0x24a64>
   35c40:	cmp	r8, r2
   35c44:	beq	35c70 <__assert_fail@plt+0x24a64>
   35c48:	mov	r4, r2
   35c4c:	ldr	r1, [pc, #1576]	; 3627c <__assert_fail@plt+0x25070>
   35c50:	ldrb	r3, [r4]
   35c54:	add	r2, r2, #1
   35c58:	lsl	r3, r3, #1
   35c5c:	ldrh	r3, [r1, r3]
   35c60:	tst	r3, #16
   35c64:	beq	35c40 <__assert_fail@plt+0x24a34>
   35c68:	cmp	r8, r4
   35c6c:	bhi	35ec4 <__assert_fail@plt+0x24cb8>
   35c70:	cmp	r0, #0
   35c74:	str	r6, [sp, #8]
   35c78:	beq	36004 <__assert_fail@plt+0x24df8>
   35c7c:	ldr	r0, [sp, #8]
   35c80:	bl	10f54 <free@plt>
   35c84:	ldr	r3, [pc, #1524]	; 36280 <__assert_fail@plt+0x25074>
   35c88:	mov	r0, #10
   35c8c:	ldr	r1, [r3]
   35c90:	bl	11158 <putc@plt>
   35c94:	cmp	r5, #0
   35c98:	beq	35a68 <__assert_fail@plt+0x2485c>
   35c9c:	ldr	r0, [fp, #104]	; 0x68
   35ca0:	cmp	r0, #0
   35ca4:	beq	36190 <__assert_fail@plt+0x24f84>
   35ca8:	ldr	r5, [r9]
   35cac:	ldr	r3, [fp, #108]	; 0x6c
   35cb0:	cmp	r5, r3
   35cb4:	addcc	r5, r0, r5
   35cb8:	bcs	35fec <__assert_fail@plt+0x24de0>
   35cbc:	mov	r2, r9
   35cc0:	add	r1, fp, #108	; 0x6c
   35cc4:	add	r0, fp, #104	; 0x68
   35cc8:	bl	16c64 <__assert_fail@plt+0x5a58>
   35ccc:	ldrd	r2, [r9, #32]
   35cd0:	orrs	r3, r2, r3
   35cd4:	mov	r8, r0
   35cd8:	beq	36018 <__assert_fail@plt+0x24e0c>
   35cdc:	ldr	r3, [r9, #4]
   35ce0:	cmp	r3, #8
   35ce4:	moveq	r2, #5
   35ce8:	ldreq	r1, [pc, #1428]	; 36284 <__assert_fail@plt+0x25078>
   35cec:	beq	35fd0 <__assert_fail@plt+0x24dc4>
   35cf0:	mov	r0, r5
   35cf4:	mov	r2, #17
   35cf8:	ldr	r1, [pc, #1416]	; 36288 <__assert_fail@plt+0x2507c>
   35cfc:	bl	111d0 <strncmp@plt>
   35d00:	mov	r6, #0
   35d04:	ldr	r3, [pc, #1408]	; 3628c <__assert_fail@plt+0x25080>
   35d08:	ldr	r4, [pc, #1408]	; 36290 <__assert_fail@plt+0x25084>
   35d0c:	mov	r7, #1
   35d10:	cmp	r0, r6
   35d14:	moveq	r5, r3
   35d18:	b	35d40 <__assert_fail@plt+0x24b34>
   35d1c:	ldr	r0, [r4, #4]
   35d20:	bl	10f18 <strcmp@plt>
   35d24:	cmp	r0, #0
   35d28:	beq	35d8c <__assert_fail@plt+0x24b80>
   35d2c:	cmp	r7, #43	; 0x2b
   35d30:	beq	35fc8 <__assert_fail@plt+0x24dbc>
   35d34:	add	r6, r6, #1
   35d38:	add	r4, r4, #72	; 0x48
   35d3c:	add	r7, r7, #1
   35d40:	mov	r1, r5
   35d44:	ldr	r0, [r4]
   35d48:	bl	10f18 <strcmp@plt>
   35d4c:	mov	r1, r5
   35d50:	cmp	r0, #0
   35d54:	beq	35d8c <__assert_fail@plt+0x24b80>
   35d58:	cmp	r6, #4
   35d5c:	bne	35d1c <__assert_fail@plt+0x24b10>
   35d60:	ldr	r1, [pc, #1324]	; 36294 <__assert_fail@plt+0x25088>
   35d64:	mov	r2, #12
   35d68:	mov	r0, r5
   35d6c:	bl	111d0 <strncmp@plt>
   35d70:	mov	r1, r5
   35d74:	cmp	r0, #0
   35d78:	beq	35d8c <__assert_fail@plt+0x24b80>
   35d7c:	ldr	r0, [r4, #4]
   35d80:	bl	10f18 <strcmp@plt>
   35d84:	cmp	r0, #0
   35d88:	bne	35d34 <__assert_fail@plt+0x24b28>
   35d8c:	ldr	r7, [fp, #96]	; 0x60
   35d90:	cmp	r7, #0
   35d94:	beq	35db4 <__assert_fail@plt+0x24ba8>
   35d98:	mov	r1, r5
   35d9c:	mov	r0, fp
   35da0:	bl	1bd7c <__assert_fail@plt+0xab70>
   35da4:	cmp	r0, r9
   35da8:	mov	r7, r0
   35dac:	moveq	r7, r9
   35db0:	beq	35dbc <__assert_fail@plt+0x24bb0>
   35db4:	mov	r0, r6
   35db8:	bl	357cc <__assert_fail@plt+0x245c0>
   35dbc:	cmp	r6, #4
   35dc0:	beq	36170 <__assert_fail@plt+0x24f64>
   35dc4:	ldr	r8, [r4]
   35dc8:	mov	r1, r5
   35dcc:	mov	r0, r8
   35dd0:	bl	10f18 <strcmp@plt>
   35dd4:	cmp	r0, #0
   35dd8:	streq	r8, [r4, #8]
   35ddc:	ldrne	r3, [r4, #4]
   35de0:	strne	r3, [r4, #8]
   35de4:	mov	r2, fp
   35de8:	mov	r1, r9
   35dec:	mov	r0, r6
   35df0:	bl	3222c <__assert_fail@plt+0x21020>
   35df4:	cmp	r0, #0
   35df8:	beq	35a68 <__assert_fail@plt+0x2485c>
   35dfc:	mov	r1, sl
   35e00:	mov	r0, fp
   35e04:	bl	50bc4 <__assert_fail@plt+0x3f9b8>
   35e08:	ldr	r5, [pc, #1160]	; 36298 <__assert_fail@plt+0x2508c>
   35e0c:	ldr	r3, [r4, #56]	; 0x38
   35e10:	mov	r1, fp
   35e14:	str	r0, [r5, #-3908]	; 0xfffff0bc
   35e18:	mov	r0, r4
   35e1c:	blx	r3
   35e20:	mov	r3, #0
   35e24:	cmp	r9, r7
   35e28:	str	r3, [r5, #-3908]	; 0xfffff0bc
   35e2c:	and	r4, r0, #1
   35e30:	beq	36160 <__assert_fail@plt+0x24f54>
   35e34:	mov	r0, r6
   35e38:	bl	357cc <__assert_fail@plt+0x245c0>
   35e3c:	ldr	r3, [sp, #12]
   35e40:	cmp	r4, #0
   35e44:	moveq	r3, #0
   35e48:	str	r3, [sp, #12]
   35e4c:	b	35a68 <__assert_fail@plt+0x2485c>
   35e50:	mov	r2, #5
   35e54:	mov	r1, r9
   35e58:	mov	r0, #0
   35e5c:	bl	10f90 <dcgettext@plt>
   35e60:	b	359d8 <__assert_fail@plt+0x247cc>
   35e64:	mov	r2, #5
   35e68:	mov	r1, r8
   35e6c:	bl	10f90 <dcgettext@plt>
   35e70:	b	359d8 <__assert_fail@plt+0x247cc>
   35e74:	mov	r2, #5
   35e78:	mov	r1, r7
   35e7c:	bl	10f90 <dcgettext@plt>
   35e80:	b	359d8 <__assert_fail@plt+0x247cc>
   35e84:	mov	r2, #5
   35e88:	ldr	r1, [pc, #1036]	; 3629c <__assert_fail@plt+0x25090>
   35e8c:	mov	r0, #0
   35e90:	bl	10f90 <dcgettext@plt>
   35e94:	ldr	r1, [r5]
   35e98:	bl	54dd0 <warn@@Base>
   35e9c:	ldr	sl, [fp, #84]	; 0x54
   35ea0:	b	35a18 <__assert_fail@plt+0x2480c>
   35ea4:	cmp	r9, #0
   35ea8:	bne	35c9c <__assert_fail@plt+0x24a90>
   35eac:	mov	r2, #5
   35eb0:	ldr	r1, [pc, #952]	; 36270 <__assert_fail@plt+0x25064>
   35eb4:	mov	r0, r9
   35eb8:	bl	10f90 <dcgettext@plt>
   35ebc:	mov	r5, r0
   35ec0:	b	35cbc <__assert_fail@plt+0x24ab0>
   35ec4:	ldr	r1, [sp, #44]	; 0x2c
   35ec8:	ldr	r0, [pc, #976]	; 362a0 <__assert_fail@plt+0x25094>
   35ecc:	sub	r1, r4, r1
   35ed0:	sub	r7, r8, r4
   35ed4:	bl	10f24 <printf@plt>
   35ed8:	cmp	r7, #0
   35edc:	beq	35fa4 <__assert_fail@plt+0x24d98>
   35ee0:	mov	r1, r4
   35ee4:	mov	r0, r7
   35ee8:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   35eec:	ldr	r3, [pc, #908]	; 36280 <__assert_fail@plt+0x25074>
   35ef0:	mov	r0, #10
   35ef4:	ldr	r1, [r3]
   35ef8:	bl	11158 <putc@plt>
   35efc:	mov	r1, r7
   35f00:	mov	r0, r4
   35f04:	bl	11104 <strnlen@plt>
   35f08:	add	r2, r4, r0
   35f0c:	mov	r0, #1
   35f10:	b	35c34 <__assert_fail@plt+0x24a28>
   35f14:	str	r1, [sp, #12]
   35f18:	ldr	r0, [sp, #12]
   35f1c:	add	sp, sp, #84	; 0x54
   35f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35f24:	mov	r2, #1
   35f28:	str	r2, [sp, #12]
   35f2c:	cmp	sl, r3
   35f30:	bcs	35f18 <__assert_fail@plt+0x24d0c>
   35f34:	ldr	r4, [pc, #872]	; 362a4 <__assert_fail@plt+0x25098>
   35f38:	ldr	r1, [sp, #12]
   35f3c:	b	35f4c <__assert_fail@plt+0x24d40>
   35f40:	add	sl, sl, #1
   35f44:	cmp	sl, r3
   35f48:	bcs	35f14 <__assert_fail@plt+0x24d08>
   35f4c:	ldr	r2, [fp, #112]	; 0x70
   35f50:	ldrb	r2, [r2, sl]
   35f54:	cmp	r2, #0
   35f58:	beq	35f40 <__assert_fail@plt+0x24d34>
   35f5c:	mov	r2, #5
   35f60:	mov	r1, r4
   35f64:	mov	r0, #0
   35f68:	bl	10f90 <dcgettext@plt>
   35f6c:	mov	r1, sl
   35f70:	bl	54dd0 <warn@@Base>
   35f74:	ldr	r3, [fp, #116]	; 0x74
   35f78:	mov	r1, #0
   35f7c:	b	35f40 <__assert_fail@plt+0x24d34>
   35f80:	ldrd	r2, [r9, #32]
   35f84:	orrs	r3, r2, r3
   35f88:	beq	35c94 <__assert_fail@plt+0x24a88>
   35f8c:	ldr	r3, [r9, #4]
   35f90:	cmp	r3, #8
   35f94:	ldr	r3, [sp, #12]
   35f98:	movne	r3, #0
   35f9c:	str	r3, [sp, #12]
   35fa0:	b	35c94 <__assert_fail@plt+0x24a88>
   35fa4:	mov	r2, #5
   35fa8:	ldr	r1, [pc, #760]	; 362a8 <__assert_fail@plt+0x2509c>
   35fac:	mov	r0, r7
   35fb0:	bl	10f90 <dcgettext@plt>
   35fb4:	bl	10f24 <printf@plt>
   35fb8:	mov	r2, r8
   35fbc:	b	35f0c <__assert_fail@plt+0x24d00>
   35fc0:	str	r6, [sp, #8]
   35fc4:	b	35c20 <__assert_fail@plt+0x24a14>
   35fc8:	ldr	r1, [pc, #732]	; 362ac <__assert_fail@plt+0x250a0>
   35fcc:	mov	r2, #5
   35fd0:	mov	r0, #0
   35fd4:	bl	10f90 <dcgettext@plt>
   35fd8:	mov	r1, r8
   35fdc:	bl	10f24 <printf@plt>
   35fe0:	mov	r3, #0
   35fe4:	str	r3, [sp, #12]
   35fe8:	b	35a68 <__assert_fail@plt+0x2485c>
   35fec:	mov	r2, #5
   35ff0:	ldr	r1, [pc, #624]	; 36268 <__assert_fail@plt+0x2505c>
   35ff4:	mov	r0, #0
   35ff8:	bl	10f90 <dcgettext@plt>
   35ffc:	mov	r5, r0
   36000:	b	35cbc <__assert_fail@plt+0x24ab0>
   36004:	mov	r2, #5
   36008:	ldr	r1, [pc, #672]	; 362b0 <__assert_fail@plt+0x250a4>
   3600c:	bl	10f90 <dcgettext@plt>
   36010:	bl	10f24 <printf@plt>
   36014:	b	35c7c <__assert_fail@plt+0x24a70>
   36018:	mov	r2, #5
   3601c:	ldr	r1, [pc, #656]	; 362b4 <__assert_fail@plt+0x250a8>
   36020:	mov	r0, #0
   36024:	bl	10f90 <dcgettext@plt>
   36028:	mov	r1, r8
   3602c:	bl	10f24 <printf@plt>
   36030:	b	35a68 <__assert_fail@plt+0x2485c>
   36034:	ldr	r8, [sp, #44]	; 0x2c
   36038:	ldr	r1, [pc, #632]	; 362b8 <__assert_fail@plt+0x250ac>
   3603c:	mov	r0, r8
   36040:	bl	10f18 <strcmp@plt>
   36044:	cmp	r0, #0
   36048:	bne	35b88 <__assert_fail@plt+0x2497c>
   3604c:	ldrb	r2, [r8, #4]
   36050:	ldrb	r0, [r8, #5]
   36054:	mov	r1, #0
   36058:	mov	r3, #0
   3605c:	lsl	ip, r2, #8
   36060:	adds	ip, r0, ip
   36064:	lsr	r2, r2, #24
   36068:	adc	r1, r1, r2
   3606c:	ldrb	r2, [r8, #6]
   36070:	lsl	r0, ip, #8
   36074:	lsl	r1, r1, #8
   36078:	adds	r0, r2, r0
   3607c:	orr	r1, r1, ip, lsr #24
   36080:	ldrb	r2, [r8, #7]
   36084:	adc	r1, r3, r1
   36088:	lsl	ip, r0, #8
   3608c:	lsl	r1, r1, #8
   36090:	adds	ip, r2, ip
   36094:	mov	r3, #0
   36098:	orr	r1, r1, r0, lsr #24
   3609c:	ldrb	r2, [r8, #8]
   360a0:	adc	r1, r3, r1
   360a4:	lsl	r0, ip, #8
   360a8:	lsl	r1, r1, #8
   360ac:	adds	r0, r2, r0
   360b0:	mov	r3, #0
   360b4:	orr	r1, r1, ip, lsr #24
   360b8:	ldrb	r2, [r8, #9]
   360bc:	adc	r1, r3, r1
   360c0:	lsl	ip, r0, #8
   360c4:	lsl	r1, r1, #8
   360c8:	adds	ip, r2, ip
   360cc:	mov	r3, #0
   360d0:	orr	r1, r1, r0, lsr #24
   360d4:	ldrb	r2, [r8, #10]
   360d8:	adc	r1, r3, r1
   360dc:	lsl	r0, ip, #8
   360e0:	lsl	r1, r1, #8
   360e4:	adds	r0, r2, r0
   360e8:	mov	r3, #0
   360ec:	orr	r1, r1, ip, lsr #24
   360f0:	ldrb	r2, [r8, #11]
   360f4:	adc	r1, r3, r1
   360f8:	lsl	ip, r0, #8
   360fc:	lsl	r1, r1, #8
   36100:	orr	r1, r1, r0, lsr #24
   36104:	mov	r3, #0
   36108:	adds	r0, r2, ip
   3610c:	adc	r3, r3, r1
   36110:	subs	r2, r6, #12
   36114:	str	r3, [sp, #36]	; 0x24
   36118:	sbc	r3, r7, #0
   3611c:	str	r0, [sp, #32]
   36120:	strd	r2, [sp, #48]	; 0x30
   36124:	ldrd	r2, [sp, #32]
   36128:	add	r8, r8, #12
   3612c:	str	r8, [sp, #44]	; 0x2c
   36130:	orrs	r3, r2, r3
   36134:	beq	35b88 <__assert_fail@plt+0x2497c>
   36138:	add	r3, sp, #48	; 0x30
   3613c:	str	r3, [sp]
   36140:	add	r0, sp, #44	; 0x2c
   36144:	ldrd	r2, [sp, #32]
   36148:	bl	13fbc <__assert_fail@plt+0x2db0>
   3614c:	cmp	r0, #0
   36150:	beq	36234 <__assert_fail@plt+0x25028>
   36154:	ldrd	r2, [sp, #48]	; 0x30
   36158:	strd	r2, [sp, #16]
   3615c:	b	35b90 <__assert_fail@plt+0x24984>
   36160:	cmp	r6, #3
   36164:	cmpne	r6, r3
   36168:	beq	35e3c <__assert_fail@plt+0x24c30>
   3616c:	b	35e34 <__assert_fail@plt+0x24c28>
   36170:	mov	r2, #12
   36174:	ldr	r1, [pc, #280]	; 36294 <__assert_fail@plt+0x25088>
   36178:	mov	r0, r5
   3617c:	bl	111d0 <strncmp@plt>
   36180:	cmp	r0, #0
   36184:	streq	r5, [r4, #8]
   36188:	beq	35de4 <__assert_fail@plt+0x24bd8>
   3618c:	b	35dc4 <__assert_fail@plt+0x24bb8>
   36190:	mov	r2, #5
   36194:	ldr	r1, [pc, #208]	; 3626c <__assert_fail@plt+0x25060>
   36198:	bl	10f90 <dcgettext@plt>
   3619c:	mov	r5, r0
   361a0:	b	35cbc <__assert_fail@plt+0x24ab0>
   361a4:	ldrd	r2, [sp, #16]
   361a8:	ldr	r1, [sp, #44]	; 0x2c
   361ac:	add	r0, sp, #56	; 0x38
   361b0:	bl	12c30 <__assert_fail@plt+0x1a24>
   361b4:	ldr	r3, [sp, #56]	; 0x38
   361b8:	cmp	r3, #1
   361bc:	bne	361f4 <__assert_fail@plt+0x24fe8>
   361c0:	ldrd	r2, [sp, #48]	; 0x30
   361c4:	ldr	r1, [sp, #44]	; 0x2c
   361c8:	subs	r6, r2, r0
   361cc:	sbc	r7, r3, #0
   361d0:	ldrd	r2, [sp, #64]	; 0x40
   361d4:	add	r1, r1, r0
   361d8:	strd	r6, [sp, #48]	; 0x30
   361dc:	strd	r2, [sp, #32]
   361e0:	ldrd	r2, [sp, #32]
   361e4:	str	r1, [sp, #44]	; 0x2c
   361e8:	orrs	r3, r2, r3
   361ec:	beq	35b88 <__assert_fail@plt+0x2497c>
   361f0:	b	36138 <__assert_fail@plt+0x24f2c>
   361f4:	mov	r2, #5
   361f8:	ldr	r1, [pc, #188]	; 362bc <__assert_fail@plt+0x250b0>
   361fc:	mov	r0, r8
   36200:	bl	10f90 <dcgettext@plt>
   36204:	mov	r2, r9
   36208:	add	r1, fp, #108	; 0x6c
   3620c:	mov	r6, r0
   36210:	mov	r0, r4
   36214:	bl	16c64 <__assert_fail@plt+0x5a58>
   36218:	ldr	r2, [sp, #56]	; 0x38
   3621c:	mov	r1, r0
   36220:	mov	r0, r6
   36224:	bl	54dd0 <warn@@Base>
   36228:	mov	r3, #0
   3622c:	str	r3, [sp, #12]
   36230:	b	35c94 <__assert_fail@plt+0x24a88>
   36234:	mov	r2, #5
   36238:	ldr	r1, [pc, #128]	; 362c0 <__assert_fail@plt+0x250b4>
   3623c:	bl	10f90 <dcgettext@plt>
   36240:	add	r1, fp, #108	; 0x6c
   36244:	mov	r2, r9
   36248:	mov	r6, r0
   3624c:	mov	r0, r4
   36250:	bl	16c64 <__assert_fail@plt+0x5a58>
   36254:	mov	r1, r0
   36258:	mov	r0, r6
   3625c:	bl	548ac <error@@Base>
   36260:	b	36228 <__assert_fail@plt+0x2501c>
   36264:	andeq	sl, r9, r8, lsr r4
   36268:	andeq	r3, r6, ip
   3626c:	muleq	r6, ip, r8
   36270:	muleq	r6, r4, r8
   36274:	andeq	fp, r6, ip, lsl #17
   36278:	andeq	fp, r6, ip, lsr #17
   3627c:	andeq	r7, r8, r8, ror #25
   36280:	andeq	sl, r9, ip, lsr #8
   36284:	andeq	fp, r6, r4, ror #18
   36288:	andeq	r8, r6, r8, ror #15
   3628c:	andeq	fp, r6, r8, asr #16
   36290:	strdeq	r9, [r9], -r0
   36294:	andeq	fp, r6, r8, lsr #19
   36298:	andeq	ip, r9, r0, lsr r4
   3629c:	andeq	fp, r6, r4, asr r8
   362a0:	andeq	fp, r6, ip, lsl #18
   362a4:			; <UNDEFINED> instruction: 0x0006b9b8
   362a8:	muleq	r6, r4, r3
   362ac:	strdeq	fp, [r6], -r0
   362b0:	andeq	fp, r6, r8, lsl r9
   362b4:	andeq	fp, r6, ip, lsr r9
   362b8:	andeq	sl, r6, r8, lsr r7
   362bc:	andeq	sl, r6, r8, lsl #14
   362c0:	andeq	sl, r6, r0, asr #14
   362c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   362c8:	sub	sp, sp, #308	; 0x134
   362cc:	mov	sl, r0
   362d0:	bl	1bf5c <__assert_fail@plt+0xad50>
   362d4:	subs	fp, r0, #0
   362d8:	beq	36bc8 <__assert_fail@plt+0x259bc>
   362dc:	ldr	r3, [pc, #3912]	; 3722c <__assert_fail@plt+0x26020>
   362e0:	mov	r0, #0
   362e4:	mov	r1, #0
   362e8:	sub	r2, r3, #128	; 0x80
   362ec:	strd	r0, [r3, #-8]!
   362f0:	cmp	r2, r3
   362f4:	bne	362ec <__assert_fail@plt+0x250e0>
   362f8:	ldr	r3, [pc, #3888]	; 37230 <__assert_fail@plt+0x26024>
   362fc:	mov	r0, #0
   36300:	mov	r1, #0
   36304:	sub	r9, r3, #256	; 0x100
   36308:	strd	r0, [r3, #-8]!
   3630c:	cmp	r3, r9
   36310:	bne	36308 <__assert_fail@plt+0x250fc>
   36314:	ldr	r7, [pc, #3864]	; 37234 <__assert_fail@plt+0x26028>
   36318:	strd	r0, [r2, #-8]
   3631c:	ldr	r3, [r7, #-3840]	; 0xfffff100
   36320:	cmp	r3, #0
   36324:	bne	364d4 <__assert_fail@plt+0x252c8>
   36328:	ldr	r3, [sl, #116]	; 0x74
   3632c:	ldr	r2, [r7, #-3716]	; 0xfffff17c
   36330:	cmp	r3, r2
   36334:	bhi	364fc <__assert_fail@plt+0x252f0>
   36338:	cmp	r2, #0
   3633c:	beq	36360 <__assert_fail@plt+0x25154>
   36340:	ldr	r3, [sl, #116]	; 0x74
   36344:	cmp	r3, #0
   36348:	beq	36c10 <__assert_fail@plt+0x25a04>
   3634c:	cmp	r2, r3
   36350:	bhi	3a2b8 <__assert_fail@plt+0x290ac>
   36354:	ldr	r1, [r7, #-3720]	; 0xfffff178
   36358:	ldr	r0, [sl, #112]	; 0x70
   3635c:	bl	10f6c <memcpy@plt>
   36360:	mov	r0, sl
   36364:	bl	2c530 <__assert_fail@plt+0x1b324>
   36368:	subs	fp, r0, #0
   3636c:	bne	3637c <__assert_fail@plt+0x25170>
   36370:	mov	r0, fp
   36374:	add	sp, sp, #308	; 0x134
   36378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3637c:	mov	r0, sl
   36380:	bl	2ab00 <__assert_fail@plt+0x198f4>
   36384:	ldr	r8, [pc, #3756]	; 37238 <__assert_fail@plt+0x2602c>
   36388:	cmp	r0, #0
   3638c:	beq	36be8 <__assert_fail@plt+0x259dc>
   36390:	mov	r0, sl
   36394:	bl	191cc <__assert_fail@plt+0x7fc0>
   36398:	cmp	r0, #0
   3639c:	streq	r0, [r8, #824]	; 0x338
   363a0:	mov	r0, sl
   363a4:	bl	1fa1c <__assert_fail@plt+0xe810>
   363a8:	subs	fp, r0, #0
   363ac:	bne	37004 <__assert_fail@plt+0x25df8>
   363b0:	ldr	r3, [r7, #-3704]	; 0xfffff188
   363b4:	cmp	r3, #0
   363b8:	beq	3654c <__assert_fail@plt+0x25340>
   363bc:	ldr	r3, [r8, #1704]	; 0x6a8
   363c0:	cmp	r3, #0
   363c4:	str	r3, [sp, #44]	; 0x2c
   363c8:	beq	36c28 <__assert_fail@plt+0x25a1c>
   363cc:	ldr	r3, [pc, #3688]	; 3723c <__assert_fail@plt+0x26030>
   363d0:	mov	r5, #0
   363d4:	str	r3, [sp, #32]
   363d8:	mov	r3, #18
   363dc:	ldr	r4, [pc, #3676]	; 37240 <__assert_fail@plt+0x26034>
   363e0:	ldr	r6, [r9, r3, lsl #3]
   363e4:	str	r5, [sp, #40]	; 0x28
   363e8:	cmp	r6, #0
   363ec:	mov	r2, #17
   363f0:	str	fp, [sp, #44]	; 0x2c
   363f4:	beq	364a4 <__assert_fail@plt+0x25298>
   363f8:	cmn	r5, #1
   363fc:	beq	37100 <__assert_fail@plt+0x25ef4>
   36400:	mov	r3, #1
   36404:	str	r3, [sp, #40]	; 0x28
   36408:	ldr	fp, [r9, r2, lsl #3]
   3640c:	ldr	r1, [pc, #3632]	; 37244 <__assert_fail@plt+0x26038>
   36410:	mov	r2, #5
   36414:	mov	r0, #0
   36418:	bl	10f90 <dcgettext@plt>
   3641c:	ldr	r1, [sp, #32]
   36420:	mov	r3, r6
   36424:	mov	r2, fp
   36428:	bl	10f24 <printf@plt>
   3642c:	mov	r3, #0
   36430:	mov	r2, fp
   36434:	str	r3, [sp, #4]
   36438:	str	r6, [sp]
   3643c:	mov	r0, sl
   36440:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   36444:	ldr	r1, [r8, #1128]	; 0x468
   36448:	ldr	ip, [r8, #1400]	; 0x578
   3644c:	ldr	r3, [r8, #1396]	; 0x574
   36450:	mov	r2, #1
   36454:	str	r2, [sp, #16]
   36458:	stmib	sp, {r1, ip}
   3645c:	str	r5, [sp, #12]
   36460:	str	r3, [sp]
   36464:	mov	r2, r6
   36468:	ldr	r3, [r8, #1124]	; 0x464
   3646c:	mov	r1, r0
   36470:	mov	r0, sl
   36474:	bl	2239c <__assert_fail@plt+0x11190>
   36478:	ldr	r3, [pc, #3528]	; 37248 <__assert_fail@plt+0x2603c>
   3647c:	cmp	r3, r4
   36480:	beq	36514 <__assert_fail@plt+0x25308>
   36484:	ldr	r3, [r4, #16]
   36488:	ldr	r5, [r4, #28]
   3648c:	str	r3, [sp, #32]
   36490:	ldrd	r2, [r4, #20]
   36494:	add	r4, r4, #16
   36498:	ldr	r6, [r9, r3, lsl #3]
   3649c:	cmp	r6, #0
   364a0:	bne	363f8 <__assert_fail@plt+0x251ec>
   364a4:	cmn	r5, #1
   364a8:	bne	36478 <__assert_fail@plt+0x2526c>
   364ac:	cmp	r2, #23
   364b0:	bne	36478 <__assert_fail@plt+0x2526c>
   364b4:	ldrd	r0, [r9, #160]	; 0xa0
   364b8:	cmp	r1, #0
   364bc:	cmpeq	r0, #7
   364c0:	beq	37120 <__assert_fail@plt+0x25f14>
   364c4:	cmp	r1, #0
   364c8:	cmpeq	r0, #17
   364cc:	beq	36478 <__assert_fail@plt+0x2526c>
   364d0:	b	3780c <__assert_fail@plt+0x26600>
   364d4:	mov	r2, #5
   364d8:	ldr	r1, [pc, #3436]	; 3724c <__assert_fail@plt+0x26040>
   364dc:	mov	r0, #0
   364e0:	bl	10f90 <dcgettext@plt>
   364e4:	ldr	r1, [sl]
   364e8:	bl	10f24 <printf@plt>
   364ec:	ldr	r3, [sl, #116]	; 0x74
   364f0:	ldr	r2, [r7, #-3716]	; 0xfffff17c
   364f4:	cmp	r3, r2
   364f8:	bls	36338 <__assert_fail@plt+0x2512c>
   364fc:	mov	r2, r3
   36500:	mov	r1, #0
   36504:	ldr	r0, [sl, #112]	; 0x70
   36508:	bl	110bc <memset@plt>
   3650c:	ldr	r2, [r7, #-3716]	; 0xfffff17c
   36510:	b	36338 <__assert_fail@plt+0x2512c>
   36514:	ldrb	r2, [sl, #23]
   36518:	ldrh	r3, [sl, #66]	; 0x42
   3651c:	ldr	fp, [sp, #44]	; 0x2c
   36520:	cmp	r2, #13
   36524:	cmpeq	r3, #50	; 0x32
   36528:	beq	37ae0 <__assert_fail@plt+0x268d4>
   3652c:	ldr	r3, [sp, #40]	; 0x28
   36530:	cmp	r3, #0
   36534:	bne	3654c <__assert_fail@plt+0x25340>
   36538:	mov	r2, #5
   3653c:	ldr	r1, [pc, #3340]	; 37250 <__assert_fail@plt+0x26044>
   36540:	ldr	r0, [sp, #40]	; 0x28
   36544:	bl	10f90 <dcgettext@plt>
   36548:	bl	10f24 <printf@plt>
   3654c:	add	r3, sp, #176	; 0xb0
   36550:	str	r3, [sp, #32]
   36554:	ldr	lr, [pc, #3320]	; 37254 <__assert_fail@plt+0x26048>
   36558:	ldr	ip, [sp, #32]
   3655c:	ldr	r4, [r8, #824]	; 0x338
   36560:	ldm	lr!, {r0, r1, r2, r3}
   36564:	cmp	r4, #0
   36568:	stmia	ip!, {r0, r1, r2, r3}
   3656c:	ldm	lr!, {r0, r1, r2, r3}
   36570:	stmia	ip!, {r0, r1, r2, r3}
   36574:	ldm	lr, {r0, r1}
   36578:	stm	ip, {r0, r1}
   3657c:	beq	365e4 <__assert_fail@plt+0x253d8>
   36580:	ldr	r2, [sp, #180]	; 0xb4
   36584:	cmp	r2, #0
   36588:	beq	365bc <__assert_fail@plt+0x253b0>
   3658c:	ldrh	r0, [sl, #66]	; 0x42
   36590:	ldr	r3, [sp, #176]	; 0xb0
   36594:	cmp	r3, r0
   36598:	ldrne	r3, [sp, #32]
   3659c:	bne	365b0 <__assert_fail@plt+0x253a4>
   365a0:	b	37080 <__assert_fail@plt+0x25e74>
   365a4:	ldr	r1, [r3, #8]!
   365a8:	cmp	r1, r0
   365ac:	beq	37080 <__assert_fail@plt+0x25e74>
   365b0:	ldr	r2, [r3, #12]
   365b4:	cmp	r2, #0
   365b8:	bne	365a4 <__assert_fail@plt+0x25398>
   365bc:	ldr	r1, [pc, #3220]	; 37258 <__assert_fail@plt+0x2604c>
   365c0:	mov	r2, #5
   365c4:	mov	r0, #0
   365c8:	bl	10f90 <dcgettext@plt>
   365cc:	mov	r4, r0
   365d0:	ldrh	r0, [sl, #66]	; 0x42
   365d4:	bl	12e7c <__assert_fail@plt+0x1c70>
   365d8:	mov	r1, r0
   365dc:	mov	r0, r4
   365e0:	bl	10f24 <printf@plt>
   365e4:	mov	r0, sl
   365e8:	bl	252fc <__assert_fail@plt+0x140f0>
   365ec:	ldr	r3, [r8, #1404]	; 0x57c
   365f0:	cmp	r0, #0
   365f4:	moveq	fp, #0
   365f8:	cmp	r3, #0
   365fc:	beq	367d0 <__assert_fail@plt+0x255c4>
   36600:	ldr	r3, [r8, #1120]	; 0x460
   36604:	cmp	r3, #0
   36608:	beq	367d0 <__assert_fail@plt+0x255c4>
   3660c:	ldr	r3, [r8, #1124]	; 0x464
   36610:	cmp	r3, #0
   36614:	beq	367cc <__assert_fail@plt+0x255c0>
   36618:	ldr	r3, [r8, #1128]	; 0x468
   3661c:	cmp	r3, #0
   36620:	beq	367cc <__assert_fail@plt+0x255c0>
   36624:	ldr	r3, [r8, #692]	; 0x2b4
   36628:	cmp	r3, #0
   3662c:	bne	37948 <__assert_fail@plt+0x2673c>
   36630:	mov	r2, #5
   36634:	ldr	r1, [pc, #3104]	; 3725c <__assert_fail@plt+0x26050>
   36638:	mov	r0, #0
   3663c:	bl	10f90 <dcgettext@plt>
   36640:	bl	10f24 <printf@plt>
   36644:	ldr	r3, [r8, #1412]	; 0x584
   36648:	cmp	r3, #0
   3664c:	beq	367d0 <__assert_fail@plt+0x255c4>
   36650:	ldr	r9, [pc, #3384]	; 37390 <__assert_fail@plt+0x26184>
   36654:	mov	r4, #0
   36658:	str	sl, [sp, #40]	; 0x28
   3665c:	b	366ac <__assert_fail@plt+0x254a0>
   36660:	ldr	r3, [r9]
   36664:	mov	r2, #11
   36668:	mov	r1, #1
   3666c:	ldr	r0, [pc, #3052]	; 37260 <__assert_fail@plt+0x26054>
   36670:	bl	10fcc <fwrite@plt>
   36674:	tst	r5, #1
   36678:	bne	36790 <__assert_fail@plt+0x25584>
   3667c:	tst	r5, #2
   36680:	bne	367a0 <__assert_fail@plt+0x25594>
   36684:	tst	r5, #4
   36688:	bne	367b0 <__assert_fail@plt+0x255a4>
   3668c:	tst	r5, #8
   36690:	bne	367c0 <__assert_fail@plt+0x255b4>
   36694:	ldr	r0, [pc, #3016]	; 37264 <__assert_fail@plt+0x26058>
   36698:	bl	11014 <puts@plt>
   3669c:	ldr	r3, [r8, #1412]	; 0x584
   366a0:	add	r4, r4, #1
   366a4:	cmp	r4, r3
   366a8:	bcs	37078 <__assert_fail@plt+0x25e6c>
   366ac:	ldr	r3, [r8, #1404]	; 0x57c
   366b0:	lsl	r6, r4, #2
   366b4:	add	r3, r3, r6
   366b8:	mov	r1, r4
   366bc:	ldr	r0, [pc, #2980]	; 37268 <__assert_fail@plt+0x2605c>
   366c0:	ldrh	r5, [r3, #2]
   366c4:	bl	10f24 <printf@plt>
   366c8:	ldr	r3, [r8, #1396]	; 0x574
   366cc:	cmp	r3, r4
   366d0:	bls	36f34 <__assert_fail@plt+0x25d28>
   366d4:	ldr	r2, [r8, #1128]	; 0x468
   366d8:	ldr	r3, [r8, #1124]	; 0x464
   366dc:	cmp	r2, #0
   366e0:	add	sl, r3, r4, lsl #5
   366e4:	beq	366f8 <__assert_fail@plt+0x254ec>
   366e8:	ldr	r1, [sl, #16]
   366ec:	ldr	r0, [r8, #1400]	; 0x578
   366f0:	cmp	r1, r0
   366f4:	bcc	36f4c <__assert_fail@plt+0x25d40>
   366f8:	ldr	r1, [pc, #2924]	; 3726c <__assert_fail@plt+0x26060>
   366fc:	mov	r2, #5
   36700:	mov	r0, #0
   36704:	bl	10f90 <dcgettext@plt>
   36708:	ldr	r1, [sl, #16]
   3670c:	bl	10f24 <printf@plt>
   36710:	ldr	r1, [r9]
   36714:	mov	r0, #32
   36718:	bl	11158 <putc@plt>
   3671c:	ldr	r2, [r8, #1404]	; 0x57c
   36720:	ldr	r3, [pc, #2888]	; 37270 <__assert_fail@plt+0x26064>
   36724:	ldrh	ip, [r2, r6]
   36728:	cmp	ip, r3
   3672c:	beq	36f1c <__assert_fail@plt+0x25d10>
   36730:	add	r3, r3, #1
   36734:	cmp	ip, r3
   36738:	beq	36660 <__assert_fail@plt+0x25454>
   3673c:	cmp	ip, #0
   36740:	beq	3677c <__assert_fail@plt+0x25570>
   36744:	ldr	r3, [r8, #688]	; 0x2b0
   36748:	cmp	ip, r3
   3674c:	bcs	3677c <__assert_fail@plt+0x25570>
   36750:	ldr	lr, [r8, #1128]	; 0x468
   36754:	cmp	lr, #0
   36758:	beq	3677c <__assert_fail@plt+0x25570>
   3675c:	ldr	r0, [r8, #684]	; 0x2ac
   36760:	ldr	r2, [r8, #1400]	; 0x578
   36764:	add	r0, r0, ip, lsl #4
   36768:	mov	r3, #0
   3676c:	ldrd	r0, [r0, #8]
   36770:	cmp	r1, r3
   36774:	cmpeq	r0, r2
   36778:	bcc	37994 <__assert_fail@plt+0x26788>
   3677c:	mov	r1, ip
   36780:	ldr	r0, [pc, #2796]	; 37274 <__assert_fail@plt+0x26068>
   36784:	bl	10f24 <printf@plt>
   36788:	tst	r5, #1
   3678c:	beq	3667c <__assert_fail@plt+0x25470>
   36790:	ldr	r0, [pc, #2784]	; 37278 <__assert_fail@plt+0x2606c>
   36794:	bl	10f24 <printf@plt>
   36798:	tst	r5, #2
   3679c:	beq	36684 <__assert_fail@plt+0x25478>
   367a0:	ldr	r0, [pc, #2772]	; 3727c <__assert_fail@plt+0x26070>
   367a4:	bl	10f24 <printf@plt>
   367a8:	tst	r5, #4
   367ac:	beq	3668c <__assert_fail@plt+0x25480>
   367b0:	ldr	r0, [pc, #2760]	; 37280 <__assert_fail@plt+0x26074>
   367b4:	bl	10f24 <printf@plt>
   367b8:	tst	r5, #8
   367bc:	beq	36694 <__assert_fail@plt+0x25488>
   367c0:	ldr	r0, [pc, #2748]	; 37284 <__assert_fail@plt+0x26078>
   367c4:	bl	10f24 <printf@plt>
   367c8:	b	36694 <__assert_fail@plt+0x25488>
   367cc:	mov	fp, r3
   367d0:	mov	r0, sl
   367d4:	bl	1e700 <__assert_fail@plt+0xd4f4>
   367d8:	ldr	r3, [sl, #88]	; 0x58
   367dc:	cmp	r0, #0
   367e0:	moveq	fp, #0
   367e4:	cmp	r3, #0
   367e8:	bne	37014 <__assert_fail@plt+0x25e08>
   367ec:	ldr	r3, [r7, #-3708]	; 0xfffff184
   367f0:	cmp	r3, #0
   367f4:	bne	36e08 <__assert_fail@plt+0x25bfc>
   367f8:	ldr	r3, [r7, #-3700]	; 0xfffff18c
   367fc:	cmp	r3, #0
   36800:	beq	3682c <__assert_fail@plt+0x25620>
   36804:	ldrh	r3, [sl, #64]	; 0x40
   36808:	cmp	r3, #4
   3680c:	bne	36e30 <__assert_fail@plt+0x25c24>
   36810:	ldr	r0, [sl, #76]	; 0x4c
   36814:	cmp	r0, #0
   36818:	bne	370d4 <__assert_fail@plt+0x25ec8>
   3681c:	mov	r2, #5
   36820:	ldr	r1, [pc, #2656]	; 37288 <__assert_fail@plt+0x2607c>
   36824:	bl	10f90 <dcgettext@plt>
   36828:	bl	10f24 <printf@plt>
   3682c:	ldr	r3, [r7, #-3712]	; 0xfffff180
   36830:	cmp	r3, #0
   36834:	beq	369f8 <__assert_fail@plt+0x257ec>
   36838:	ldr	r3, [sl, #84]	; 0x54
   3683c:	ldr	r6, [sl, #96]	; 0x60
   36840:	cmp	r3, #0
   36844:	beq	3798c <__assert_fail@plt+0x26780>
   36848:	mov	r2, #1
   3684c:	str	r2, [sp, #40]	; 0x28
   36850:	mov	r9, #0
   36854:	str	fp, [sp, #48]	; 0x30
   36858:	str	r8, [sp, #56]	; 0x38
   3685c:	b	36870 <__assert_fail@plt+0x25664>
   36860:	add	r9, r9, #1
   36864:	cmp	r3, r9
   36868:	add	r6, r6, #72	; 0x48
   3686c:	bls	36974 <__assert_fail@plt+0x25768>
   36870:	ldr	r2, [r6, #4]
   36874:	cmn	r2, #-1879048183	; 0x90000009
   36878:	bne	36860 <__assert_fail@plt+0x25654>
   3687c:	ldr	r2, [r6, #40]	; 0x28
   36880:	cmp	r2, r3
   36884:	bcs	36860 <__assert_fail@plt+0x25654>
   36888:	mov	r2, #5
   3688c:	ldr	r1, [pc, #2552]	; 3728c <__assert_fail@plt+0x26080>
   36890:	mov	r0, #0
   36894:	ldrd	r4, [r6, #32]
   36898:	ldr	fp, [r6, #24]
   3689c:	bl	10f90 <dcgettext@plt>
   368a0:	strd	r4, [sp, #8]
   368a4:	mov	r4, #1
   368a8:	mov	r5, #0
   368ac:	add	r8, sl, #4
   368b0:	add	r2, sl, #8
   368b4:	mov	r3, fp
   368b8:	strd	r4, [sp]
   368bc:	mov	r1, r8
   368c0:	str	r2, [sp, #60]	; 0x3c
   368c4:	str	r0, [sp, #16]
   368c8:	mov	r0, #0
   368cc:	bl	1717c <__assert_fail@plt+0x5f70>
   368d0:	subs	r3, r0, #0
   368d4:	str	r3, [sp, #44]	; 0x2c
   368d8:	beq	36e20 <__assert_fail@plt+0x25c14>
   368dc:	ldr	r3, [r6, #40]	; 0x28
   368e0:	ldr	fp, [sl, #96]	; 0x60
   368e4:	mov	r2, #5
   368e8:	add	r3, r3, r3, lsl #3
   368ec:	ldr	r1, [pc, #2460]	; 37290 <__assert_fail@plt+0x26084>
   368f0:	add	fp, fp, r3, lsl #3
   368f4:	mov	r0, #0
   368f8:	ldr	r3, [fp, #24]
   368fc:	ldrd	r4, [fp, #32]
   36900:	str	r3, [sp, #64]	; 0x40
   36904:	bl	10f90 <dcgettext@plt>
   36908:	strd	r4, [sp, #8]
   3690c:	mov	r4, #1
   36910:	mov	r5, #0
   36914:	mov	r1, r8
   36918:	ldr	r3, [sp, #64]	; 0x40
   3691c:	strd	r4, [sp]
   36920:	ldr	r2, [sp, #60]	; 0x3c
   36924:	str	r0, [sp, #16]
   36928:	mov	r0, #0
   3692c:	bl	1717c <__assert_fail@plt+0x5f70>
   36930:	subs	r8, r0, #0
   36934:	beq	36948 <__assert_fail@plt+0x2573c>
   36938:	ldrd	r2, [r6, #56]	; 0x38
   3693c:	cmp	r3, #0
   36940:	cmpeq	r2, #20
   36944:	beq	389c8 <__assert_fail@plt+0x277bc>
   36948:	ldr	r0, [sp, #44]	; 0x2c
   3694c:	bl	10f54 <free@plt>
   36950:	mov	r0, r8
   36954:	bl	10f54 <free@plt>
   36958:	mov	r3, #0
   3695c:	str	r3, [sp, #40]	; 0x28
   36960:	ldr	r3, [sl, #84]	; 0x54
   36964:	add	r9, r9, #1
   36968:	cmp	r3, r9
   3696c:	add	r6, r6, #72	; 0x48
   36970:	bhi	36870 <__assert_fail@plt+0x25664>
   36974:	ldr	r2, [sp, #40]	; 0x28
   36978:	ldr	fp, [sp, #48]	; 0x30
   3697c:	ldr	r3, [r7, #-3712]	; 0xfffff180
   36980:	cmp	r2, #0
   36984:	movne	r2, fp
   36988:	cmp	r3, #0
   3698c:	ldr	r8, [sp, #56]	; 0x38
   36990:	str	r2, [sp, #40]	; 0x28
   36994:	beq	36f14 <__assert_fail@plt+0x25d08>
   36998:	ldrh	r3, [sl, #66]	; 0x42
   3699c:	cmp	r3, #40	; 0x28
   369a0:	beq	379d4 <__assert_fail@plt+0x267c8>
   369a4:	bls	36b3c <__assert_fail@plt+0x25930>
   369a8:	cmp	r3, #105	; 0x69
   369ac:	beq	379b0 <__assert_fail@plt+0x267a4>
   369b0:	bls	36ba8 <__assert_fail@plt+0x2599c>
   369b4:	cmp	r3, #167	; 0xa7
   369b8:	beq	374e0 <__assert_fail@plt+0x262d4>
   369bc:	bhi	36b04 <__assert_fail@plt+0x258f8>
   369c0:	cmp	r3, #140	; 0x8c
   369c4:	bne	36b78 <__assert_fail@plt+0x2596c>
   369c8:	ldr	r2, [pc, #2456]	; 37368 <__assert_fail@plt+0x2615c>
   369cc:	ldr	r3, [pc, #2240]	; 37294 <__assert_fail@plt+0x26088>
   369d0:	str	r2, [sp]
   369d4:	ldr	r1, [pc, #2236]	; 37298 <__assert_fail@plt+0x2608c>
   369d8:	mov	r2, #1879048195	; 0x70000003
   369dc:	mov	r0, sl
   369e0:	bl	19b54 <__assert_fail@plt+0x8948>
   369e4:	str	r0, [sp, #44]	; 0x2c
   369e8:	ldr	r3, [sp, #44]	; 0x2c
   369ec:	cmp	r3, #0
   369f0:	bne	36f14 <__assert_fail@plt+0x25d08>
   369f4:	mov	fp, #0
   369f8:	mov	r4, #0
   369fc:	ldr	r0, [sl, #100]	; 0x64
   36a00:	bl	10f54 <free@plt>
   36a04:	ldr	r0, [sl, #96]	; 0x60
   36a08:	str	r4, [sl, #100]	; 0x64
   36a0c:	bl	10f54 <free@plt>
   36a10:	ldr	r0, [sl, #104]	; 0x68
   36a14:	str	r4, [sl, #96]	; 0x60
   36a18:	bl	10f54 <free@plt>
   36a1c:	ldr	r0, [r8, #1128]	; 0x468
   36a20:	str	r4, [sl, #104]	; 0x68
   36a24:	cmp	r0, r4
   36a28:	str	r4, [sl, #108]	; 0x6c
   36a2c:	beq	36a3c <__assert_fail@plt+0x25830>
   36a30:	bl	10f54 <free@plt>
   36a34:	str	r4, [r8, #1128]	; 0x468
   36a38:	str	r4, [r8, #1400]	; 0x578
   36a3c:	ldr	r0, [r8, #1124]	; 0x464
   36a40:	cmp	r0, #0
   36a44:	beq	36a58 <__assert_fail@plt+0x2584c>
   36a48:	bl	10f54 <free@plt>
   36a4c:	mov	r3, #0
   36a50:	str	r3, [r8, #1124]	; 0x464
   36a54:	str	r3, [r8, #1396]	; 0x574
   36a58:	ldr	r0, [r8, #1404]	; 0x57c
   36a5c:	cmp	r0, #0
   36a60:	beq	36a70 <__assert_fail@plt+0x25864>
   36a64:	bl	10f54 <free@plt>
   36a68:	mov	r3, #0
   36a6c:	str	r3, [r8, #1404]	; 0x57c
   36a70:	ldr	r0, [r8, #684]	; 0x2ac
   36a74:	cmp	r0, #0
   36a78:	beq	36a88 <__assert_fail@plt+0x2587c>
   36a7c:	bl	10f54 <free@plt>
   36a80:	mov	r3, #0
   36a84:	str	r3, [r8, #684]	; 0x2ac
   36a88:	ldr	r0, [r8, #832]	; 0x340
   36a8c:	cmp	r0, #0
   36a90:	beq	36aa0 <__assert_fail@plt+0x25894>
   36a94:	bl	10f54 <free@plt>
   36a98:	mov	r3, #0
   36a9c:	str	r3, [r8, #832]	; 0x340
   36aa0:	ldr	r6, [r8, #840]	; 0x348
   36aa4:	cmp	r6, #0
   36aa8:	beq	36af4 <__assert_fail@plt+0x258e8>
   36aac:	ldr	r7, [r8, #836]	; 0x344
   36ab0:	cmp	r7, #0
   36ab4:	movne	r5, #0
   36ab8:	beq	36ae4 <__assert_fail@plt+0x258d8>
   36abc:	ldr	r0, [r6, r5, lsl #3]
   36ac0:	cmp	r0, #0
   36ac4:	beq	36ad8 <__assert_fail@plt+0x258cc>
   36ac8:	ldr	r4, [r0]
   36acc:	bl	10f54 <free@plt>
   36ad0:	subs	r0, r4, #0
   36ad4:	bne	36ac8 <__assert_fail@plt+0x258bc>
   36ad8:	add	r5, r5, #1
   36adc:	cmp	r5, r7
   36ae0:	bne	36abc <__assert_fail@plt+0x258b0>
   36ae4:	mov	r0, r6
   36ae8:	bl	10f54 <free@plt>
   36aec:	mov	r3, #0
   36af0:	str	r3, [r8, #840]	; 0x348
   36af4:	bl	5430c <__assert_fail@plt+0x43100>
   36af8:	mov	r0, fp
   36afc:	add	sp, sp, #308	; 0x134
   36b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36b04:	cmp	r3, #195	; 0xc3
   36b08:	beq	374bc <__assert_fail@plt+0x262b0>
   36b0c:	ldr	r2, [pc, #1928]	; 3729c <__assert_fail@plt+0x26090>
   36b10:	cmp	r3, r2
   36b14:	bne	36b78 <__assert_fail@plt+0x2596c>
   36b18:	ldr	r2, [pc, #1920]	; 372a0 <__assert_fail@plt+0x26094>
   36b1c:	mov	r3, #0
   36b20:	str	r2, [sp]
   36b24:	mov	r1, r3
   36b28:	mvn	r2, #-1879048182	; 0x9000000a
   36b2c:	mov	r0, sl
   36b30:	bl	19b54 <__assert_fail@plt+0x8948>
   36b34:	str	r0, [sp, #44]	; 0x2c
   36b38:	b	369e8 <__assert_fail@plt+0x257dc>
   36b3c:	cmp	r3, #18
   36b40:	beq	36bc0 <__assert_fail@plt+0x259b4>
   36b44:	bls	36b60 <__assert_fail@plt+0x25954>
   36b48:	cmp	r3, #20
   36b4c:	bcc	36b78 <__assert_fail@plt+0x2596c>
   36b50:	cmp	r3, #21
   36b54:	bhi	36b9c <__assert_fail@plt+0x25990>
   36b58:	ldr	r2, [pc, #1860]	; 372a4 <__assert_fail@plt+0x26098>
   36b5c:	b	36b1c <__assert_fail@plt+0x25910>
   36b60:	cmp	r3, #8
   36b64:	beq	37128 <__assert_fail@plt+0x25f1c>
   36b68:	cmp	r3, #10
   36b6c:	beq	37128 <__assert_fail@plt+0x25f1c>
   36b70:	cmp	r3, #2
   36b74:	beq	36bc0 <__assert_fail@plt+0x259b4>
   36b78:	ldr	r2, [pc, #2024]	; 37368 <__assert_fail@plt+0x2615c>
   36b7c:	ldr	r3, [pc, #1828]	; 372a8 <__assert_fail@plt+0x2609c>
   36b80:	str	r2, [sp]
   36b84:	ldr	r1, [pc, #1824]	; 372ac <__assert_fail@plt+0x260a0>
   36b88:	mvn	r2, #-1879048182	; 0x9000000a
   36b8c:	mov	r0, sl
   36b90:	bl	19b54 <__assert_fail@plt+0x8948>
   36b94:	str	r0, [sp, #44]	; 0x2c
   36b98:	b	369e8 <__assert_fail@plt+0x257dc>
   36b9c:	cmp	r3, #22
   36ba0:	beq	36b18 <__assert_fail@plt+0x2590c>
   36ba4:	b	36b78 <__assert_fail@plt+0x2596c>
   36ba8:	cmp	r3, #45	; 0x2d
   36bac:	beq	374bc <__assert_fail@plt+0x262b0>
   36bb0:	cmp	r3, #93	; 0x5d
   36bb4:	beq	374bc <__assert_fail@plt+0x262b0>
   36bb8:	cmp	r3, #43	; 0x2b
   36bbc:	bne	36b78 <__assert_fail@plt+0x2596c>
   36bc0:	ldr	r2, [pc, #1768]	; 372b0 <__assert_fail@plt+0x260a4>
   36bc4:	b	36b1c <__assert_fail@plt+0x25910>
   36bc8:	mov	r2, #5
   36bcc:	ldr	r1, [pc, #1760]	; 372b4 <__assert_fail@plt+0x260a8>
   36bd0:	bl	10f90 <dcgettext@plt>
   36bd4:	ldr	r1, [sl]
   36bd8:	bl	548ac <error@@Base>
   36bdc:	mov	r0, fp
   36be0:	add	sp, sp, #308	; 0x134
   36be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36be8:	ldr	r3, [r8, #1704]	; 0x6a8
   36bec:	str	r0, [r7, #-3712]	; 0xfffff180
   36bf0:	cmp	r3, #0
   36bf4:	str	r0, [r7, #-3708]	; 0xfffff184
   36bf8:	str	r0, [r8, #1552]	; 0x610
   36bfc:	str	r0, [r8, #824]	; 0x338
   36c00:	streq	r3, [r7, #-3704]	; 0xfffff188
   36c04:	streq	r3, [r8, #1692]	; 0x69c
   36c08:	streq	r3, [r8, #1696]	; 0x6a0
   36c0c:	b	36390 <__assert_fail@plt+0x25184>
   36c10:	add	r1, sl, #116	; 0x74
   36c14:	add	r0, sl, #112	; 0x70
   36c18:	bl	24d20 <__assert_fail@plt+0x13b14>
   36c1c:	ldr	r3, [sl, #116]	; 0x74
   36c20:	ldr	r2, [r7, #-3716]	; 0xfffff17c
   36c24:	b	3634c <__assert_fail@plt+0x25140>
   36c28:	ldr	r3, [sl, #84]	; 0x54
   36c2c:	ldr	r5, [sl, #96]	; 0x60
   36c30:	cmp	r3, #0
   36c34:	beq	37d78 <__assert_fail@plt+0x26b6c>
   36c38:	add	r2, sp, #176	; 0xb0
   36c3c:	ldr	r6, [sp, #44]	; 0x2c
   36c40:	str	r2, [sp, #32]
   36c44:	str	fp, [sp, #60]	; 0x3c
   36c48:	str	sl, [sp, #40]	; 0x28
   36c4c:	str	r8, [sp, #56]	; 0x38
   36c50:	b	36c64 <__assert_fail@plt+0x25a58>
   36c54:	add	r6, r6, #1
   36c58:	cmp	r6, r3
   36c5c:	add	r5, r5, #72	; 0x48
   36c60:	bcs	36fa4 <__assert_fail@plt+0x25d98>
   36c64:	ldr	r0, [r5, #4]
   36c68:	cmp	r0, #4
   36c6c:	cmpne	r0, #9
   36c70:	movne	r0, #1
   36c74:	moveq	r0, #0
   36c78:	bne	36c54 <__assert_fail@plt+0x25a48>
   36c7c:	ldr	r4, [r5, #32]
   36c80:	cmp	r4, #0
   36c84:	beq	36c54 <__assert_fail@plt+0x25a48>
   36c88:	ldr	r3, [r5, #24]
   36c8c:	mov	r2, #5
   36c90:	ldr	r1, [pc, #1568]	; 372b8 <__assert_fail@plt+0x260ac>
   36c94:	str	r3, [sp, #48]	; 0x30
   36c98:	bl	10f90 <dcgettext@plt>
   36c9c:	bl	10f24 <printf@plt>
   36ca0:	ldr	r3, [sp, #40]	; 0x28
   36ca4:	ldr	r3, [r3, #104]	; 0x68
   36ca8:	cmp	r3, #0
   36cac:	beq	370f0 <__assert_fail@plt+0x25ee4>
   36cb0:	ldr	r3, [sp, #40]	; 0x28
   36cb4:	mov	r2, r5
   36cb8:	add	r1, r3, #108	; 0x6c
   36cbc:	add	r0, r3, #104	; 0x68
   36cc0:	bl	16c64 <__assert_fail@plt+0x5a58>
   36cc4:	mov	r1, r0
   36cc8:	ldr	r0, [pc, #1516]	; 372bc <__assert_fail@plt+0x260b0>
   36ccc:	bl	10f24 <printf@plt>
   36cd0:	ldrd	r2, [r5, #56]	; 0x38
   36cd4:	mov	r0, r4
   36cd8:	mov	r1, #0
   36cdc:	bl	58c00 <warn@@Base+0x3e30>
   36ce0:	mov	r2, #5
   36ce4:	str	r2, [sp]
   36ce8:	ldr	r1, [pc, #1488]	; 372c0 <__assert_fail@plt+0x260b4>
   36cec:	ldr	r2, [pc, #1488]	; 372c4 <__assert_fail@plt+0x260b8>
   36cf0:	mov	r8, r0
   36cf4:	mov	r3, r0
   36cf8:	mov	r0, #0
   36cfc:	bl	11200 <dcngettext@plt>
   36d00:	mov	r2, r8
   36d04:	ldr	r1, [sp, #48]	; 0x30
   36d08:	bl	10f24 <printf@plt>
   36d0c:	ldr	r2, [r5, #40]	; 0x28
   36d10:	ldr	r8, [r5, #4]
   36d14:	cmp	r2, #0
   36d18:	sub	r8, r8, #4
   36d1c:	clz	r8, r8
   36d20:	lsr	r8, r8, #5
   36d24:	beq	36f5c <__assert_fail@plt+0x25d50>
   36d28:	ldr	r0, [sp, #40]	; 0x28
   36d2c:	ldr	r3, [r0, #84]	; 0x54
   36d30:	cmp	r2, r3
   36d34:	bcs	36f5c <__assert_fail@plt+0x25d50>
   36d38:	add	r2, r2, r2, lsl #3
   36d3c:	ldr	r1, [r0, #96]	; 0x60
   36d40:	add	r1, r1, r2, lsl #3
   36d44:	str	r1, [sp, #88]	; 0x58
   36d48:	ldr	r2, [r1, #4]
   36d4c:	cmp	r2, #2
   36d50:	cmpne	r2, #11
   36d54:	bne	36c54 <__assert_fail@plt+0x25a48>
   36d58:	ldr	r3, [sp, #56]	; 0x38
   36d5c:	ldr	r2, [sp, #32]
   36d60:	ldr	r3, [r3]
   36d64:	cmp	r3, #0
   36d68:	bne	377ec <__assert_fail@plt+0x265e0>
   36d6c:	ldr	r1, [sp, #88]	; 0x58
   36d70:	ldr	r0, [sp, #40]	; 0x28
   36d74:	bl	17bf4 <__assert_fail@plt+0x69e8>
   36d78:	str	r0, [sp, #64]	; 0x40
   36d7c:	ldr	r3, [sp, #64]	; 0x40
   36d80:	cmp	r3, #0
   36d84:	beq	36dfc <__assert_fail@plt+0x25bf0>
   36d88:	ldr	r3, [sp, #88]	; 0x58
   36d8c:	ldr	r3, [r3, #40]	; 0x28
   36d90:	cmp	r3, #0
   36d94:	beq	36da8 <__assert_fail@plt+0x25b9c>
   36d98:	ldr	r2, [sp, #40]	; 0x28
   36d9c:	ldr	r2, [r2, #84]	; 0x54
   36da0:	cmp	r3, r2
   36da4:	bcc	38878 <__assert_fail@plt+0x2766c>
   36da8:	ldr	r3, [sp, #88]	; 0x58
   36dac:	ldr	r0, [sp, #176]	; 0xb0
   36db0:	mov	r2, r4
   36db4:	ldr	r3, [r3, #4]
   36db8:	ldr	r1, [sp, #48]	; 0x30
   36dbc:	sub	r3, r3, #11
   36dc0:	clz	r3, r3
   36dc4:	lsr	r3, r3, #5
   36dc8:	str	r3, [sp, #16]
   36dcc:	mov	r3, #0
   36dd0:	str	r0, [sp]
   36dd4:	str	r3, [sp, #8]
   36dd8:	str	r3, [sp, #4]
   36ddc:	str	r8, [sp, #12]
   36de0:	ldr	r3, [sp, #64]	; 0x40
   36de4:	ldr	r0, [sp, #40]	; 0x28
   36de8:	bl	2239c <__assert_fail@plt+0x11190>
   36dec:	ldr	r0, [sp, #64]	; 0x40
   36df0:	bl	10f54 <free@plt>
   36df4:	mov	r3, #1
   36df8:	str	r3, [sp, #44]	; 0x2c
   36dfc:	ldr	r3, [sp, #40]	; 0x28
   36e00:	ldr	r3, [r3, #84]	; 0x54
   36e04:	b	36c54 <__assert_fail@plt+0x25a48>
   36e08:	mov	r0, sl
   36e0c:	bl	35958 <__assert_fail@plt+0x2474c>
   36e10:	cmp	r0, #0
   36e14:	bne	367f8 <__assert_fail@plt+0x255ec>
   36e18:	mov	fp, #0
   36e1c:	b	367f8 <__assert_fail@plt+0x255ec>
   36e20:	ldr	r2, [sp, #44]	; 0x2c
   36e24:	ldr	r3, [sl, #84]	; 0x54
   36e28:	str	r2, [sp, #40]	; 0x28
   36e2c:	b	36860 <__assert_fail@plt+0x25654>
   36e30:	ldr	r9, [sl, #96]	; 0x60
   36e34:	ldr	r3, [sl, #84]	; 0x54
   36e38:	cmp	r3, #0
   36e3c:	cmpne	r9, #0
   36e40:	beq	370d4 <__assert_fail@plt+0x25ec8>
   36e44:	mov	r5, #0
   36e48:	mov	r3, #1
   36e4c:	str	r5, [sp, #40]	; 0x28
   36e50:	str	r3, [sp, #44]	; 0x2c
   36e54:	str	fp, [sp, #64]	; 0x40
   36e58:	str	r8, [sp, #88]	; 0x58
   36e5c:	str	r7, [sp, #80]	; 0x50
   36e60:	b	36ec0 <__assert_fail@plt+0x25cb4>
   36e64:	ldrh	r2, [sl, #66]	; 0x42
   36e68:	ldr	r1, [pc, #1112]	; 372c8 <__assert_fail@plt+0x260bc>
   36e6c:	cmp	r2, #87	; 0x57
   36e70:	cmpne	r2, #36	; 0x24
   36e74:	moveq	r3, #1
   36e78:	movne	r3, #0
   36e7c:	cmp	r2, r1
   36e80:	orreq	r3, r3, #1
   36e84:	cmp	r3, #0
   36e88:	beq	36e98 <__assert_fail@plt+0x25c8c>
   36e8c:	ldr	r3, [r9, #4]
   36e90:	cmp	r3, #-1610612736	; 0xa0000000
   36e94:	beq	37094 <__assert_fail@plt+0x25e88>
   36e98:	adds	r9, r9, #72	; 0x48
   36e9c:	ldr	r2, [sl, #84]	; 0x54
   36ea0:	movne	r3, #1
   36ea4:	moveq	r3, #0
   36ea8:	add	r5, r5, #1
   36eac:	cmp	r5, r2
   36eb0:	movcs	r3, #0
   36eb4:	andcc	r3, r3, #1
   36eb8:	cmp	r3, #0
   36ebc:	beq	370bc <__assert_fail@plt+0x25eb0>
   36ec0:	ldr	r3, [r9, #4]
   36ec4:	cmp	r3, #7
   36ec8:	bne	36e64 <__assert_fail@plt+0x25c58>
   36ecc:	ldrd	r0, [r9, #32]
   36ed0:	orrs	r3, r0, r1
   36ed4:	beq	36efc <__assert_fail@plt+0x25cf0>
   36ed8:	ldrd	r6, [r9, #48]	; 0x30
   36edc:	ldrd	r2, [r9, #24]
   36ee0:	strd	r0, [sp]
   36ee4:	strd	r6, [sp, #8]
   36ee8:	mov	r1, r9
   36eec:	mov	r0, sl
   36ef0:	bl	32af4 <__assert_fail@plt+0x218e8>
   36ef4:	cmp	r0, #0
   36ef8:	bne	36f04 <__assert_fail@plt+0x25cf8>
   36efc:	mov	r3, #0
   36f00:	str	r3, [sp, #44]	; 0x2c
   36f04:	ldr	r3, [sp, #40]	; 0x28
   36f08:	add	r3, r3, #1
   36f0c:	str	r3, [sp, #40]	; 0x28
   36f10:	b	36e64 <__assert_fail@plt+0x25c58>
   36f14:	ldr	fp, [sp, #40]	; 0x28
   36f18:	b	369f8 <__assert_fail@plt+0x257ec>
   36f1c:	ldr	r3, [r9]
   36f20:	mov	r2, #11
   36f24:	mov	r1, #1
   36f28:	ldr	r0, [pc, #924]	; 372cc <__assert_fail@plt+0x260c0>
   36f2c:	bl	10fcc <fwrite@plt>
   36f30:	b	36674 <__assert_fail@plt+0x25468>
   36f34:	mov	r2, #5
   36f38:	ldr	r1, [pc, #912]	; 372d0 <__assert_fail@plt+0x260c4>
   36f3c:	mov	r0, #0
   36f40:	bl	10f90 <dcgettext@plt>
   36f44:	bl	10f24 <printf@plt>
   36f48:	b	36710 <__assert_fail@plt+0x25504>
   36f4c:	add	r1, r2, r1
   36f50:	mov	r0, #30
   36f54:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   36f58:	b	36710 <__assert_fail@plt+0x25504>
   36f5c:	mov	r2, r4
   36f60:	ldr	r4, [sp, #40]	; 0x28
   36f64:	mov	r3, #0
   36f68:	str	r3, [sp, #16]
   36f6c:	str	r3, [sp, #8]
   36f70:	str	r3, [sp, #4]
   36f74:	str	r3, [sp]
   36f78:	str	r8, [sp, #12]
   36f7c:	ldr	r1, [sp, #48]	; 0x30
   36f80:	mov	r0, r4
   36f84:	bl	2239c <__assert_fail@plt+0x11190>
   36f88:	ldr	r3, [r4, #84]	; 0x54
   36f8c:	add	r6, r6, #1
   36f90:	mov	r2, #1
   36f94:	cmp	r6, r3
   36f98:	str	r2, [sp, #44]	; 0x2c
   36f9c:	add	r5, r5, #72	; 0x48
   36fa0:	bcc	36c64 <__assert_fail@plt+0x25a58>
   36fa4:	ldr	r3, [sp, #44]	; 0x2c
   36fa8:	ldr	fp, [sp, #60]	; 0x3c
   36fac:	cmp	r3, #0
   36fb0:	ldr	sl, [sp, #40]	; 0x28
   36fb4:	ldr	r8, [sp, #56]	; 0x38
   36fb8:	bne	36554 <__assert_fail@plt+0x25348>
   36fbc:	ldr	r3, [r9, #144]	; 0x90
   36fc0:	ldr	r0, [r9, #64]	; 0x40
   36fc4:	ldr	ip, [r9, #16]
   36fc8:	orr	r0, r0, r3
   36fcc:	orr	r2, r0, ip
   36fd0:	ldr	r1, [r8, #1204]	; 0x4b4
   36fd4:	ldr	ip, [r8, #1284]	; 0x504
   36fd8:	ldr	r0, [r8, #1156]	; 0x484
   36fdc:	orr	r1, r1, ip
   36fe0:	orr	r3, r1, r0
   36fe4:	orrs	r3, r2, r3
   36fe8:	bne	38934 <__assert_fail@plt+0x27728>
   36fec:	mov	r2, #5
   36ff0:	ldr	r1, [pc, #732]	; 372d4 <__assert_fail@plt+0x260c8>
   36ff4:	mov	r0, #0
   36ff8:	bl	10f90 <dcgettext@plt>
   36ffc:	bl	10f24 <printf@plt>
   37000:	b	36554 <__assert_fail@plt+0x25348>
   37004:	mov	r0, sl
   37008:	bl	1c80c <__assert_fail@plt+0xb600>
   3700c:	mov	fp, #1
   37010:	b	363b0 <__assert_fail@plt+0x251a4>
   37014:	ldr	r1, [sl]
   37018:	mov	r0, sl
   3701c:	bl	5402c <__assert_fail@plt+0x42e20>
   37020:	ldr	r3, [r7, #-3708]	; 0xfffff184
   37024:	cmp	r3, #0
   37028:	mov	r4, r0
   3702c:	beq	37040 <__assert_fail@plt+0x25e34>
   37030:	mov	r0, sl
   37034:	bl	35958 <__assert_fail@plt+0x2474c>
   37038:	cmp	r0, #0
   3703c:	moveq	fp, #0
   37040:	cmp	r4, #0
   37044:	beq	367f8 <__assert_fail@plt+0x255ec>
   37048:	mov	r0, r4
   3704c:	bl	2ab00 <__assert_fail@plt+0x198f4>
   37050:	cmp	r0, #0
   37054:	beq	36e18 <__assert_fail@plt+0x25c0c>
   37058:	ldr	r3, [r7, #-3708]	; 0xfffff184
   3705c:	cmp	r3, #0
   37060:	beq	367f8 <__assert_fail@plt+0x255ec>
   37064:	mov	r0, r4
   37068:	bl	35958 <__assert_fail@plt+0x2474c>
   3706c:	cmp	r0, #0
   37070:	beq	36e18 <__assert_fail@plt+0x25c0c>
   37074:	b	367f8 <__assert_fail@plt+0x255ec>
   37078:	ldr	sl, [sp, #40]	; 0x28
   3707c:	b	367d0 <__assert_fail@plt+0x255c4>
   37080:	mov	r0, sl
   37084:	blx	r2
   37088:	cmp	r0, #0
   3708c:	moveq	fp, #0
   37090:	b	365e4 <__assert_fail@plt+0x253d8>
   37094:	ldrd	r2, [r9, #32]
   37098:	strd	r2, [sp, #48]	; 0x30
   3709c:	orrs	r3, r2, r3
   370a0:	bne	37580 <__assert_fail@plt+0x26374>
   370a4:	mov	r3, #0
   370a8:	str	r3, [sp, #44]	; 0x2c
   370ac:	ldr	r3, [sp, #40]	; 0x28
   370b0:	add	r3, r3, #1
   370b4:	str	r3, [sp, #40]	; 0x28
   370b8:	b	36e98 <__assert_fail@plt+0x25c8c>
   370bc:	ldr	r3, [sp, #40]	; 0x28
   370c0:	ldr	fp, [sp, #64]	; 0x40
   370c4:	cmp	r3, #0
   370c8:	ldr	r8, [sp, #88]	; 0x58
   370cc:	ldr	r7, [sp, #80]	; 0x50
   370d0:	bne	370e0 <__assert_fail@plt+0x25ed4>
   370d4:	mov	r0, sl
   370d8:	bl	3568c <__assert_fail@plt+0x24480>
   370dc:	str	r0, [sp, #44]	; 0x2c
   370e0:	ldr	r3, [sp, #44]	; 0x2c
   370e4:	cmp	r3, #0
   370e8:	moveq	fp, #0
   370ec:	b	3682c <__assert_fail@plt+0x25620>
   370f0:	ldr	r1, [r5]
   370f4:	ldr	r0, [pc, #476]	; 372d8 <__assert_fail@plt+0x260cc>
   370f8:	bl	10f24 <printf@plt>
   370fc:	b	36cd0 <__assert_fail@plt+0x25ac4>
   37100:	cmp	r2, #23
   37104:	bne	36400 <__assert_fail@plt+0x251f4>
   37108:	ldrd	r0, [r9, #160]	; 0xa0
   3710c:	cmp	r1, #0
   37110:	cmpeq	r0, #7
   37114:	moveq	r3, #1
   37118:	streq	r3, [sp, #40]	; 0x28
   3711c:	bne	377f8 <__assert_fail@plt+0x265ec>
   37120:	mov	r5, #1
   37124:	b	37810 <__assert_fail@plt+0x26604>
   37128:	ldr	r2, [pc, #428]	; 372dc <__assert_fail@plt+0x260d0>
   3712c:	mov	r3, #0
   37130:	str	r2, [sp]
   37134:	mov	r1, r3
   37138:	mvn	r2, #-1879048182	; 0x9000000a
   3713c:	mov	r0, sl
   37140:	bl	19b54 <__assert_fail@plt+0x8948>
   37144:	ldr	r3, [sl, #96]	; 0x60
   37148:	adds	r2, r0, #0
   3714c:	movne	r2, #1
   37150:	cmp	r3, #0
   37154:	str	r2, [sp, #44]	; 0x2c
   37158:	beq	392dc <__assert_fail@plt+0x280d0>
   3715c:	ldr	r1, [pc, #380]	; 372e0 <__assert_fail@plt+0x260d4>
   37160:	mov	r0, sl
   37164:	bl	1bd7c <__assert_fail@plt+0xab70>
   37168:	subs	r3, r0, #0
   3716c:	beq	37f0c <__assert_fail@plt+0x26d00>
   37170:	ldrd	r4, [r3, #32]
   37174:	mov	r2, #5
   37178:	cmp	r5, #0
   3717c:	cmpeq	r4, #24
   37180:	beq	38d38 <__assert_fail@plt+0x27b2c>
   37184:	ldr	r1, [pc, #344]	; 372e4 <__assert_fail@plt+0x260d8>
   37188:	mov	r0, #0
   3718c:	bl	10f90 <dcgettext@plt>
   37190:	bl	548ac <error@@Base>
   37194:	ldr	r4, [r8, #684]	; 0x2ac
   37198:	cmp	r4, #0
   3719c:	movne	r3, #0
   371a0:	strne	r3, [sp, #44]	; 0x2c
   371a4:	beq	39364 <__assert_fail@plt+0x28158>
   371a8:	ldr	r3, [r8, #688]	; 0x2b0
   371ac:	add	r3, r4, r3, lsl #4
   371b0:	cmp	r4, r3
   371b4:	bcs	3a53c <__assert_fail@plt+0x29330>
   371b8:	ldrd	r2, [r4]
   371bc:	orrs	r1, r2, r3
   371c0:	beq	38124 <__assert_fail@plt+0x26f18>
   371c4:	mov	r0, #0
   371c8:	mov	r1, #0
   371cc:	mov	ip, #0
   371d0:	mov	lr, r1
   371d4:	strd	r0, [sp, #64]	; 0x40
   371d8:	str	ip, [sp, #112]	; 0x70
   371dc:	strd	r0, [sp, #80]	; 0x50
   371e0:	str	r0, [sp, #60]	; 0x3c
   371e4:	str	r1, [sp, #56]	; 0x38
   371e8:	str	ip, [sp, #116]	; 0x74
   371ec:	str	ip, [sp, #104]	; 0x68
   371f0:	str	ip, [sp, #108]	; 0x6c
   371f4:	str	ip, [sp, #88]	; 0x58
   371f8:	str	ip, [sp, #72]	; 0x48
   371fc:	str	ip, [sp, #100]	; 0x64
   37200:	str	ip, [sp, #92]	; 0x5c
   37204:	str	ip, [sp, #128]	; 0x80
   37208:	str	ip, [sp, #136]	; 0x88
   3720c:	mov	r9, ip
   37210:	str	ip, [sp, #48]	; 0x30
   37214:	str	ip, [sp, #96]	; 0x60
   37218:	ldr	r6, [pc, #200]	; 372e8 <__assert_fail@plt+0x260dc>
   3721c:	mov	r7, #0
   37220:	mov	fp, r0
   37224:	mov	r5, lr
   37228:	b	37458 <__assert_fail@plt+0x2624c>
   3722c:	andeq	sl, r9, r8, asr #20
   37230:	andeq	sl, r9, r8, lsr #19
   37234:	andeq	ip, r9, r0, lsr r4
   37238:	andeq	sl, r9, r8, lsr r4
   3723c:	ldrdeq	r9, [r7], -r0
   37240:	ldrdeq	pc, [r5], -r8
   37244:	andeq	fp, r6, r0, ror sl
   37248:	strdeq	pc, [r5], -r8
   3724c:	andeq	fp, r6, r0, lsr sl
   37250:			; <UNDEFINED> instruction: 0x0006bab0
   37254:	andeq	pc, r5, r8, lsl #2
   37258:	andeq	fp, r6, r8, lsr #22
   3725c:	strdeq	fp, [r6], -r4
   37260:	andeq	fp, r6, r8, asr ip
   37264:	andeq	fp, r6, ip, ror #2
   37268:	andeq	fp, r6, ip, lsr #24
   3726c:	andeq	fp, r6, r4, asr #24
   37270:	strdeq	pc, [r0], -lr
   37274:	andeq	fp, r6, r0, ror ip
   37278:	andeq	r5, r6, r4, ror r9
   3727c:	andeq	fp, r6, r8, ror ip
   37280:	andeq	fp, r6, r4, lsl #25
   37284:	andeq	r5, r6, r0, lsl r9
   37288:	andeq	fp, r6, r8, asr #29
   3728c:	strdeq	fp, [r6], -r4
   37290:	andeq	fp, r6, ip, lsl #30
   37294:	andeq	r5, r1, r0, asr r1
   37298:			; <UNDEFINED> instruction: 0x0006cbbc
   3729c:	muleq	r0, r0, r3
   372a0:	andeq	sl, r2, ip, lsr #1
   372a4:	andeq	r5, r1, r0, lsl #16
   372a8:	andeq	r4, r1, r8, asr #17
   372ac:	andeq	r4, r6, ip, asr r3
   372b0:	andeq	r9, r2, ip, lsl r8
   372b4:	andeq	fp, r6, r0, lsl sl
   372b8:	andeq	fp, r6, r4, ror #21
   372bc:	muleq	r6, r8, r8
   372c0:	ldrdeq	r7, [r6], -r8
   372c4:	muleq	r6, ip, fp
   372c8:	andeq	r9, r0, r0, lsl #1
   372cc:	andeq	fp, r6, r4, ror #24
   372d0:	andeq	fp, r6, r4, lsr ip
   372d4:	strdeq	fp, [r6], -ip
   372d8:	andeq	ip, r6, r8, ror r0
   372dc:	andeq	sl, r2, r8, lsl #3
   372e0:	andeq	fp, r6, r0, ror #31
   372e4:	strdeq	fp, [r6], -r0
   372e8:	andvc	r0, r0, r1, lsl r0
   372ec:	andvc	r0, r0, r9, lsr #32
   372f0:	andvc	r0, r0, r2, lsr r0
   372f4:	andvc	r0, r0, r3, lsl r0
   372f8:	strdeq	r6, [r1], -r8
   372fc:	andeq	r1, r6, r0, lsr #32
   37300:	andeq	ip, r6, ip, lsl fp
   37304:	andeq	ip, r6, ip, lsr #22
   37308:	andeq	ip, r6, r8, asr #22
   3730c:	andeq	ip, r6, r0, ror #22
   37310:	andeq	ip, r6, r8, ror fp
   37314:	andeq	fp, r6, ip, lsl #25
   37318:	muleq	r6, r8, ip
   3731c:	strdeq	fp, [r6], -r0
   37320:	andeq	fp, r6, r0, lsr lr
   37324:	andeq	fp, r6, ip, lsr lr
   37328:	muleq	r6, ip, lr
   3732c:	andeq	fp, r6, r0, lsr #28
   37330:	andeq	fp, r6, r4, lsl #28
   37334:	andeq	fp, r6, r8, ror #27
   37338:	andeq	fp, r6, r8, asr #27
   3733c:	andeq	fp, r6, ip, lsr #27
   37340:	andvc	r0, r0, r0, lsl r0
   37344:	andeq	fp, r6, r8, lsl #29
   37348:	andeq	fp, r6, r4, ror lr
   3734c:	andeq	r3, r6, r8, asr r1
   37350:	andeq	fp, r6, ip, asr lr
   37354:	andeq	fp, r6, ip, ror fp
   37358:			; <UNDEFINED> instruction: 0x0006bbb8
   3735c:	andeq	fp, r6, r4, asr #28
   37360:	andeq	r5, r1, ip, lsr #22
   37364:	andeq	ip, r6, r4, lsl fp
   37368:	andeq	r5, r1, r4, lsr r1
   3736c:	andeq	r5, r1, r4, lsl lr
   37370:	ldrdeq	fp, [r6], -r8
   37374:	ldrdeq	ip, [r6], -r0
   37378:	andeq	fp, r6, ip, ror sp
   3737c:	andeq	fp, r6, ip, asr #26
   37380:	andeq	ip, r6, r8, lsr #16
   37384:	andeq	ip, r6, r4, lsr r8
   37388:	andeq	ip, r6, r0, ror #16
   3738c:	andeq	ip, r6, ip, lsl #17
   37390:	andeq	sl, r9, ip, lsr #8
   37394:	andeq	ip, r6, r0, asr #17
   37398:			; <UNDEFINED> instruction: 0x0006c8b0
   3739c:	ldrdeq	ip, [r6], -r8
   373a0:	muleq	r6, r0, r1
   373a4:	andeq	ip, r6, r8, lsl r2
   373a8:	andeq	r2, r6, r8, asr #5
   373ac:	andeq	ip, r6, r4, lsr #6
   373b0:	andeq	ip, r6, r8, lsr r3
   373b4:	andeq	ip, r6, ip, asr #6
   373b8:	andeq	ip, r6, r0, ror #6
   373bc:	andeq	ip, r6, r4, lsl #7
   373c0:	andeq	lr, r9, ip, asr sp
   373c4:	andeq	ip, r6, r8, ror #7
   373c8:	andeq	ip, r6, r0, ror #7
   373cc:	andeq	ip, r6, r0, asr #7
   373d0:	andeq	ip, r6, r8, ror #6
   373d4:	andeq	ip, r6, r4, asr r9
   373d8:	muleq	r6, r4, r3
   373dc:	strdeq	r7, [r0], -r0
   373e0:	muleq	r7, ip, sl
   373e4:	andeq	ip, r6, ip, lsr #7
   373e8:	andeq	ip, r6, r4, ror #18
   373ec:	ldrdeq	ip, [r6], -r0
   373f0:	ldrdeq	ip, [r6], -r8
   373f4:	andeq	ip, r6, ip, ror r9
   373f8:	andeq	ip, r6, r4, lsl #19
   373fc:	cmp	r3, #0
   37400:	cmpeq	r2, #20
   37404:	beq	37d84 <__assert_fail@plt+0x26b78>
   37408:	bls	3781c <__assert_fail@plt+0x26610>
   3740c:	cmp	r3, #0
   37410:	cmpeq	r2, #1879048200	; 0x70000008
   37414:	beq	37dc4 <__assert_fail@plt+0x26bb8>
   37418:	bhi	37d90 <__assert_fail@plt+0x26b84>
   3741c:	cmp	r3, #0
   37420:	cmpeq	r2, #23
   37424:	ldreq	r3, [r4, #8]
   37428:	streq	r3, [sp, #104]	; 0x68
   3742c:	ldreq	r3, [r4, #12]
   37430:	streq	r3, [sp, #108]	; 0x6c
   37434:	ldr	r2, [r8, #688]	; 0x2b0
   37438:	ldr	r3, [r8, #684]	; 0x2ac
   3743c:	add	r4, r4, #16
   37440:	add	r3, r3, r2, lsl #4
   37444:	cmp	r4, r3
   37448:	bcs	379f8 <__assert_fail@plt+0x267ec>
   3744c:	ldrd	r2, [r4]
   37450:	orrs	r1, r2, r3
   37454:	beq	379f8 <__assert_fail@plt+0x267ec>
   37458:	cmp	r3, #0
   3745c:	cmpeq	r2, #1879048202	; 0x7000000a
   37460:	beq	37dec <__assert_fail@plt+0x26be0>
   37464:	bls	373fc <__assert_fail@plt+0x261f0>
   37468:	cmp	r3, r7
   3746c:	cmpeq	r2, r6
   37470:	beq	37b30 <__assert_fail@plt+0x26924>
   37474:	bls	37844 <__assert_fail@plt+0x26638>
   37478:	ldr	r0, [pc, #-404]	; 372ec <__assert_fail@plt+0x260e0>
   3747c:	mov	r1, #0
   37480:	cmp	r3, r1
   37484:	cmpeq	r2, r0
   37488:	beq	37b14 <__assert_fail@plt+0x26908>
   3748c:	ldr	r0, [pc, #-420]	; 372f0 <__assert_fail@plt+0x260e4>
   37490:	mov	r1, #0
   37494:	cmp	r3, r1
   37498:	cmpeq	r2, r0
   3749c:	beq	37b00 <__assert_fail@plt+0x268f4>
   374a0:	ldr	r0, [pc, #-436]	; 372f4 <__assert_fail@plt+0x260e8>
   374a4:	mov	r1, #0
   374a8:	cmp	r3, r1
   374ac:	cmpeq	r2, r0
   374b0:	ldrdeq	r2, [r4, #8]
   374b4:	strdeq	r2, [sp, #80]	; 0x50
   374b8:	b	37434 <__assert_fail@plt+0x26228>
   374bc:	ldr	r2, [pc, #-348]	; 37368 <__assert_fail@plt+0x2615c>
   374c0:	ldr	r3, [pc, #-464]	; 372f8 <__assert_fail@plt+0x260ec>
   374c4:	str	r2, [sp]
   374c8:	ldr	r1, [pc, #-468]	; 372fc <__assert_fail@plt+0x260f0>
   374cc:	mov	r2, #1879048193	; 0x70000001
   374d0:	mov	r0, sl
   374d4:	bl	19b54 <__assert_fail@plt+0x8948>
   374d8:	str	r0, [sp, #44]	; 0x2c
   374dc:	b	369e8 <__assert_fail@plt+0x257dc>
   374e0:	ldr	r3, [sl, #96]	; 0x60
   374e4:	cmp	r3, #0
   374e8:	beq	36f14 <__assert_fail@plt+0x25d08>
   374ec:	ldr	r1, [pc, #-500]	; 37300 <__assert_fail@plt+0x260f4>
   374f0:	mov	r0, sl
   374f4:	bl	1bd7c <__assert_fail@plt+0xab70>
   374f8:	subs	r4, r0, #0
   374fc:	beq	36f14 <__assert_fail@plt+0x25d08>
   37500:	ldr	r0, [pc, #-516]	; 37304 <__assert_fail@plt+0x260f8>
   37504:	bl	11014 <puts@plt>
   37508:	mov	r2, #5
   3750c:	ldr	r1, [pc, #-524]	; 37308 <__assert_fail@plt+0x260fc>
   37510:	mov	r0, #0
   37514:	ldr	r9, [r4, #24]
   37518:	ldrd	r4, [r4, #32]
   3751c:	bl	10f90 <dcgettext@plt>
   37520:	mov	r6, #1
   37524:	mov	r7, #0
   37528:	strd	r4, [sp, #8]
   3752c:	mov	r3, r9
   37530:	strd	r6, [sp]
   37534:	add	r2, sl, #8
   37538:	add	r1, sl, #4
   3753c:	str	r0, [sp, #16]
   37540:	mov	r0, #0
   37544:	bl	1717c <__assert_fail@plt+0x5f70>
   37548:	cmp	r0, #0
   3754c:	beq	369f4 <__assert_fail@plt+0x257e8>
   37550:	ldr	r3, [r0]
   37554:	and	r3, r3, #3
   37558:	cmp	r3, #2
   3755c:	beq	392fc <__assert_fail@plt+0x280f0>
   37560:	cmp	r3, #3
   37564:	beq	392ec <__assert_fail@plt+0x280e0>
   37568:	cmp	r3, #1
   3756c:	ldr	fp, [sp, #40]	; 0x28
   37570:	ldrne	r0, [pc, #-620]	; 3730c <__assert_fail@plt+0x26100>
   37574:	ldreq	r0, [pc, #-620]	; 37310 <__assert_fail@plt+0x26104>
   37578:	bl	11014 <puts@plt>
   3757c:	b	369f8 <__assert_fail@plt+0x257ec>
   37580:	mov	r2, #5
   37584:	ldr	r1, [pc, #-632]	; 37314 <__assert_fail@plt+0x26108>
   37588:	mov	r0, #0
   3758c:	ldr	r4, [r9, #24]
   37590:	bl	10f90 <dcgettext@plt>
   37594:	ldrd	r2, [sp, #48]	; 0x30
   37598:	mov	r6, #1
   3759c:	mov	r7, #0
   375a0:	strd	r2, [sp, #8]
   375a4:	strd	r6, [sp]
   375a8:	mov	r3, r4
   375ac:	add	r2, sl, #8
   375b0:	add	r1, sl, #4
   375b4:	str	r0, [sp, #16]
   375b8:	mov	r0, #0
   375bc:	bl	1717c <__assert_fail@plt+0x5f70>
   375c0:	subs	r3, r0, #0
   375c4:	mov	r6, r3
   375c8:	str	r3, [sp, #56]	; 0x38
   375cc:	beq	370a4 <__assert_fail@plt+0x25e98>
   375d0:	mov	r2, #5
   375d4:	ldr	r1, [pc, #-708]	; 37318 <__assert_fail@plt+0x2610c>
   375d8:	mov	r0, #0
   375dc:	bl	10f90 <dcgettext@plt>
   375e0:	ldr	r2, [sp, #48]	; 0x30
   375e4:	mov	r1, r4
   375e8:	bl	10f24 <printf@plt>
   375ec:	ldr	r2, [sp, #48]	; 0x30
   375f0:	add	r3, r6, #13
   375f4:	add	fp, r6, r2
   375f8:	cmp	fp, r3
   375fc:	bls	39f6c <__assert_fail@plt+0x28d60>
   37600:	ldr	r3, [sp, #56]	; 0x38
   37604:	str	r9, [sp, #92]	; 0x5c
   37608:	mov	r6, r3
   3760c:	mov	r9, r3
   37610:	mov	r2, #1
   37614:	str	r2, [sp, #60]	; 0x3c
   37618:	str	r5, [sp, #96]	; 0x60
   3761c:	str	sl, [sp, #100]	; 0x64
   37620:	ldr	r4, [pc, #-616]	; 373c0 <__assert_fail@plt+0x261b4>
   37624:	mov	r1, #4
   37628:	add	r0, r6, #8
   3762c:	ldr	r3, [r4]
   37630:	blx	r3
   37634:	ldr	r3, [r4]
   37638:	mov	r1, #4
   3763c:	mov	sl, r0
   37640:	mov	r0, r6
   37644:	blx	r3
   37648:	mov	r1, #4
   3764c:	ldr	r3, [r4]
   37650:	mov	r8, r0
   37654:	add	r0, r6, r1
   37658:	blx	r3
   3765c:	add	r4, r8, #3
   37660:	bic	r4, r4, #3
   37664:	add	r3, r6, #12
   37668:	add	r4, r3, r4
   3766c:	cmp	fp, r4
   37670:	movhi	r2, #0
   37674:	movls	r2, #1
   37678:	cmp	r9, r4
   3767c:	orrhi	r2, r2, #1
   37680:	cmp	r2, #0
   37684:	mov	r7, r0
   37688:	beq	376b4 <__assert_fail@plt+0x264a8>
   3768c:	mov	r2, #5
   37690:	ldr	r1, [pc, #-892]	; 3731c <__assert_fail@plt+0x26110>
   37694:	mov	r0, #0
   37698:	str	r3, [sp, #48]	; 0x30
   3769c:	bl	10f90 <dcgettext@plt>
   376a0:	mov	r1, r8
   376a4:	bl	54dd0 <warn@@Base>
   376a8:	ldr	r3, [sp, #48]	; 0x30
   376ac:	mov	r8, #0
   376b0:	mov	r4, r3
   376b4:	add	r5, r7, #3
   376b8:	bic	r5, r5, #3
   376bc:	add	r5, r4, r5
   376c0:	cmp	r9, r5
   376c4:	movls	r2, #0
   376c8:	movhi	r2, #1
   376cc:	cmp	fp, r5
   376d0:	orrcc	r2, r2, #1
   376d4:	cmp	r2, #0
   376d8:	bne	38960 <__assert_fail@plt+0x27754>
   376dc:	add	r3, r3, r8
   376e0:	cmp	fp, r3
   376e4:	bcc	37a8c <__assert_fail@plt+0x26880>
   376e8:	cmp	r8, #0
   376ec:	blt	37a8c <__assert_fail@plt+0x26880>
   376f0:	sub	r6, sl, #1
   376f4:	mov	r2, #5
   376f8:	cmp	r6, #5
   376fc:	ldrls	pc, [pc, r6, lsl #2]
   37700:	b	3a57c <__assert_fail@plt+0x29370>
   37704:	ldrdeq	r7, [r3], -r8
   37708:	andeq	r7, r3, r4, asr #15
   3770c:			; <UNDEFINED> instruction: 0x000377b0
   37710:	muleq	r3, ip, r7
   37714:	andeq	r7, r3, r8, lsl #15
   37718:	andeq	r7, r3, ip, lsl r7
   3771c:	ldr	r1, [pc, #-1028]	; 37320 <__assert_fail@plt+0x26114>
   37720:	mov	r0, #0
   37724:	bl	10f90 <dcgettext@plt>
   37728:	mov	r1, r0
   3772c:	ldr	r0, [pc, #-1040]	; 37324 <__assert_fail@plt+0x26118>
   37730:	bl	10f24 <printf@plt>
   37734:	cmp	r7, #4
   37738:	beq	3786c <__assert_fail@plt+0x26660>
   3773c:	mov	r2, r7
   37740:	mov	r1, r8
   37744:	ldr	r0, [pc, #-1060]	; 37328 <__assert_fail@plt+0x2611c>
   37748:	bl	10f24 <printf@plt>
   3774c:	mov	r3, #0
   37750:	str	r3, [sp, #60]	; 0x3c
   37754:	add	r3, r5, #13
   37758:	cmp	fp, r3
   3775c:	mov	r6, r5
   37760:	bhi	37620 <__assert_fail@plt+0x26414>
   37764:	ldr	r9, [sp, #92]	; 0x5c
   37768:	ldr	r5, [sp, #96]	; 0x60
   3776c:	ldr	sl, [sp, #100]	; 0x64
   37770:	ldr	r0, [sp, #56]	; 0x38
   37774:	bl	10f54 <free@plt>
   37778:	ldr	r3, [sp, #60]	; 0x3c
   3777c:	cmp	r3, #0
   37780:	bne	370ac <__assert_fail@plt+0x25ea0>
   37784:	b	370a4 <__assert_fail@plt+0x25e98>
   37788:	ldr	r1, [pc, #-1124]	; 3732c <__assert_fail@plt+0x26120>
   3778c:	mov	r0, #0
   37790:	bl	10f90 <dcgettext@plt>
   37794:	mov	r1, r0
   37798:	b	3772c <__assert_fail@plt+0x26520>
   3779c:	ldr	r1, [pc, #-1140]	; 37330 <__assert_fail@plt+0x26124>
   377a0:	mov	r0, #0
   377a4:	bl	10f90 <dcgettext@plt>
   377a8:	mov	r1, r0
   377ac:	b	3772c <__assert_fail@plt+0x26520>
   377b0:	ldr	r1, [pc, #-1156]	; 37334 <__assert_fail@plt+0x26128>
   377b4:	mov	r0, #0
   377b8:	bl	10f90 <dcgettext@plt>
   377bc:	mov	r1, r0
   377c0:	b	3772c <__assert_fail@plt+0x26520>
   377c4:	ldr	r1, [pc, #-1172]	; 37338 <__assert_fail@plt+0x2612c>
   377c8:	mov	r0, #0
   377cc:	bl	10f90 <dcgettext@plt>
   377d0:	mov	r1, r0
   377d4:	b	3772c <__assert_fail@plt+0x26520>
   377d8:	ldr	r1, [pc, #-1188]	; 3733c <__assert_fail@plt+0x26130>
   377dc:	mov	r0, #0
   377e0:	bl	10f90 <dcgettext@plt>
   377e4:	mov	r1, r0
   377e8:	b	3772c <__assert_fail@plt+0x26520>
   377ec:	bl	1772c <__assert_fail@plt+0x6520>
   377f0:	str	r0, [sp, #64]	; 0x40
   377f4:	b	36d7c <__assert_fail@plt+0x25b70>
   377f8:	cmp	r1, #0
   377fc:	mov	r3, #1
   37800:	cmpeq	r0, #17
   37804:	str	r3, [sp, #40]	; 0x28
   37808:	beq	39f64 <__assert_fail@plt+0x28d58>
   3780c:	mvn	r5, #0
   37810:	cmp	r6, #0
   37814:	beq	36478 <__assert_fail@plt+0x2526c>
   37818:	b	36408 <__assert_fail@plt+0x251fc>
   3781c:	cmp	r3, #0
   37820:	cmpeq	r2, #2
   37824:	beq	37b3c <__assert_fail@plt+0x26930>
   37828:	cmp	r3, #0
   3782c:	cmpeq	r2, #3
   37830:	ldreq	r3, [r4, #8]
   37834:	streq	r3, [sp, #60]	; 0x3c
   37838:	ldreq	r3, [r4, #12]
   3783c:	streq	r3, [sp, #56]	; 0x38
   37840:	b	37434 <__assert_fail@plt+0x26228>
   37844:	cmp	r3, #0
   37848:	cmpeq	r2, #1879048203	; 0x7000000b
   3784c:	beq	37af4 <__assert_fail@plt+0x268e8>
   37850:	ldr	r0, [pc, #-1304]	; 37340 <__assert_fail@plt+0x26134>
   37854:	mov	r1, #0
   37858:	cmp	r3, r1
   3785c:	cmpeq	r2, r0
   37860:	ldreq	r3, [r4, #8]
   37864:	streq	r3, [sp, #96]	; 0x60
   37868:	b	37434 <__assert_fail@plt+0x26228>
   3786c:	ldr	r3, [pc, #-1204]	; 373c0 <__assert_fail@plt+0x261b4>
   37870:	mov	r0, r4
   37874:	mov	r1, r7
   37878:	ldr	r3, [r3]
   3787c:	blx	r3
   37880:	subs	r4, r0, #0
   37884:	beq	37978 <__assert_fail@plt+0x2676c>
   37888:	cmp	r6, #5
   3788c:	ldrls	pc, [pc, r6, lsl #2]
   37890:	b	378b4 <__assert_fail@plt+0x266a8>
   37894:	strdeq	r7, [r3], -r8
   37898:	andeq	r7, r3, r0, lsr #18
   3789c:	ldrdeq	r7, [r3], -r0
   378a0:	andeq	r7, r3, ip, lsr #17
   378a4:	andeq	r7, r3, ip, lsr #17
   378a8:	andeq	r7, r3, ip, lsr #17
   378ac:	cmp	r4, #1
   378b0:	beq	3934c <__assert_fail@plt+0x28140>
   378b4:	mov	r2, #5
   378b8:	ldr	r1, [pc, #-1404]	; 37344 <__assert_fail@plt+0x26138>
   378bc:	mov	r0, #0
   378c0:	bl	10f90 <dcgettext@plt>
   378c4:	mov	r1, r4
   378c8:	bl	10f24 <printf@plt>
   378cc:	b	3773c <__assert_fail@plt+0x26530>
   378d0:	cmp	r4, #1
   378d4:	beq	38848 <__assert_fail@plt+0x2763c>
   378d8:	cmp	r4, #2
   378dc:	bne	378b4 <__assert_fail@plt+0x266a8>
   378e0:	mov	r2, #5
   378e4:	ldr	r1, [pc, #-1444]	; 37348 <__assert_fail@plt+0x2613c>
   378e8:	mov	r0, #0
   378ec:	bl	10f90 <dcgettext@plt>
   378f0:	bl	10f24 <printf@plt>
   378f4:	b	37754 <__assert_fail@plt+0x26548>
   378f8:	cmp	r4, #1
   378fc:	beq	38860 <__assert_fail@plt+0x27654>
   37900:	cmp	r4, #2
   37904:	bne	378b4 <__assert_fail@plt+0x266a8>
   37908:	mov	r2, #5
   3790c:	ldr	r1, [pc, #-1480]	; 3734c <__assert_fail@plt+0x26140>
   37910:	mov	r0, #0
   37914:	bl	10f90 <dcgettext@plt>
   37918:	bl	10f24 <printf@plt>
   3791c:	b	37754 <__assert_fail@plt+0x26548>
   37920:	cmp	r4, #1
   37924:	beq	389b0 <__assert_fail@plt+0x277a4>
   37928:	cmp	r4, #2
   3792c:	bne	378b4 <__assert_fail@plt+0x266a8>
   37930:	mov	r2, #5
   37934:	ldr	r1, [pc, #-1516]	; 37350 <__assert_fail@plt+0x26144>
   37938:	mov	r0, #0
   3793c:	bl	10f90 <dcgettext@plt>
   37940:	bl	10f24 <printf@plt>
   37944:	b	37754 <__assert_fail@plt+0x26548>
   37948:	ldr	r4, [r8, #1412]	; 0x584
   3794c:	mov	r2, #5
   37950:	str	r2, [sp]
   37954:	mov	r3, r4
   37958:	ldr	r2, [pc, #-1548]	; 37354 <__assert_fail@plt+0x26148>
   3795c:	ldr	r1, [pc, #-1548]	; 37358 <__assert_fail@plt+0x2614c>
   37960:	mov	r0, #0
   37964:	bl	11200 <dcngettext@plt>
   37968:	mov	r2, r4
   3796c:	ldr	r1, [r8, #1408]	; 0x580
   37970:	bl	10f24 <printf@plt>
   37974:	b	36630 <__assert_fail@plt+0x25424>
   37978:	mov	r2, #5
   3797c:	ldr	r1, [pc, #-1576]	; 3735c <__assert_fail@plt+0x26150>
   37980:	bl	10f90 <dcgettext@plt>
   37984:	bl	10f24 <printf@plt>
   37988:	b	37754 <__assert_fail@plt+0x26548>
   3798c:	str	fp, [sp, #40]	; 0x28
   37990:	b	36998 <__assert_fail@plt+0x2578c>
   37994:	add	r1, lr, r0
   37998:	mov	r0, #10
   3799c:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   379a0:	ldr	r1, [r9]
   379a4:	mov	r0, #32
   379a8:	bl	11158 <putc@plt>
   379ac:	b	36674 <__assert_fail@plt+0x25468>
   379b0:	ldr	r2, [pc, #-1616]	; 37368 <__assert_fail@plt+0x2615c>
   379b4:	ldr	r3, [pc, #-1628]	; 37360 <__assert_fail@plt+0x26154>
   379b8:	str	r2, [sp]
   379bc:	ldr	r1, [pc, #-1632]	; 37364 <__assert_fail@plt+0x26158>
   379c0:	mov	r2, #1879048195	; 0x70000003
   379c4:	mov	r0, sl
   379c8:	bl	19b54 <__assert_fail@plt+0x8948>
   379cc:	str	r0, [sp, #44]	; 0x2c
   379d0:	b	369e8 <__assert_fail@plt+0x257dc>
   379d4:	ldr	r2, [pc, #-1652]	; 37368 <__assert_fail@plt+0x2615c>
   379d8:	ldr	r3, [pc, #-1652]	; 3736c <__assert_fail@plt+0x26160>
   379dc:	str	r2, [sp]
   379e0:	ldr	r1, [pc, #-1656]	; 37370 <__assert_fail@plt+0x26164>
   379e4:	mov	r2, #1879048195	; 0x70000003
   379e8:	mov	r0, sl
   379ec:	bl	19b54 <__assert_fail@plt+0x8948>
   379f0:	str	r0, [sp, #44]	; 0x2c
   379f4:	b	369e8 <__assert_fail@plt+0x257dc>
   379f8:	ldr	r3, [sp, #96]	; 0x60
   379fc:	cmp	r9, #0
   37a00:	cmpne	r3, #0
   37a04:	beq	37a14 <__assert_fail@plt+0x26808>
   37a08:	ldr	r3, [r8, #1120]	; 0x460
   37a0c:	cmp	r3, #0
   37a10:	bne	39070 <__assert_fail@plt+0x27e64>
   37a14:	ldr	r3, [sp, #136]	; 0x88
   37a18:	cmp	r3, #0
   37a1c:	beq	37b88 <__assert_fail@plt+0x2697c>
   37a20:	ldr	r6, [sl, #96]	; 0x60
   37a24:	ldr	r1, [sl, #84]	; 0x54
   37a28:	cmp	r6, #0
   37a2c:	beq	37a70 <__assert_fail@plt+0x26864>
   37a30:	cmp	r1, #0
   37a34:	beq	37a70 <__assert_fail@plt+0x26864>
   37a38:	ldr	r3, [r6, #4]
   37a3c:	cmp	r3, #1879048205	; 0x7000000d
   37a40:	beq	38bec <__assert_fail@plt+0x279e0>
   37a44:	add	r2, r6, #72	; 0x48
   37a48:	mov	r3, #0
   37a4c:	b	37a64 <__assert_fail@plt+0x26858>
   37a50:	mov	r6, r2
   37a54:	add	r2, r2, #72	; 0x48
   37a58:	ldr	r0, [r2, #-68]	; 0xffffffbc
   37a5c:	cmp	r0, #1879048205	; 0x7000000d
   37a60:	beq	38bec <__assert_fail@plt+0x279e0>
   37a64:	add	r3, r3, #1
   37a68:	cmp	r1, r3
   37a6c:	bne	37a50 <__assert_fail@plt+0x26844>
   37a70:	mov	r2, #5
   37a74:	ldr	r1, [pc, #-1800]	; 37374 <__assert_fail@plt+0x26168>
   37a78:	mov	r0, #0
   37a7c:	bl	10f90 <dcgettext@plt>
   37a80:	bl	548ac <error@@Base>
   37a84:	mov	fp, #0
   37a88:	b	369f8 <__assert_fail@plt+0x257ec>
   37a8c:	mov	r2, #5
   37a90:	ldr	r1, [pc, #-1824]	; 37378 <__assert_fail@plt+0x2616c>
   37a94:	mov	r0, #0
   37a98:	mov	r6, sl
   37a9c:	mov	r4, r5
   37aa0:	ldr	r9, [sp, #92]	; 0x5c
   37aa4:	ldr	r5, [sp, #96]	; 0x60
   37aa8:	ldr	sl, [sp, #100]	; 0x64
   37aac:	bl	10f90 <dcgettext@plt>
   37ab0:	ldr	r2, [sp, #56]	; 0x38
   37ab4:	sub	r1, r4, r2
   37ab8:	bl	54dd0 <warn@@Base>
   37abc:	mov	r2, #5
   37ac0:	ldr	r1, [pc, #-1868]	; 3737c <__assert_fail@plt+0x26170>
   37ac4:	mov	r0, #0
   37ac8:	bl	10f90 <dcgettext@plt>
   37acc:	mov	r3, r7
   37ad0:	mov	r2, r8
   37ad4:	mov	r1, r6
   37ad8:	bl	54dd0 <warn@@Base>
   37adc:	b	37770 <__assert_fail@plt+0x26564>
   37ae0:	mov	r0, sl
   37ae4:	bl	18bb4 <__assert_fail@plt+0x79a8>
   37ae8:	cmp	r0, #0
   37aec:	beq	3652c <__assert_fail@plt+0x25320>
   37af0:	b	3654c <__assert_fail@plt+0x25340>
   37af4:	ldr	r3, [r4, #8]
   37af8:	str	r3, [sp, #48]	; 0x30
   37afc:	b	37434 <__assert_fail@plt+0x26228>
   37b00:	ldr	r3, [r4, #8]
   37b04:	str	r3, [sp, #88]	; 0x58
   37b08:	ldr	r3, [r4, #12]
   37b0c:	str	r3, [sp, #72]	; 0x48
   37b10:	b	37434 <__assert_fail@plt+0x26228>
   37b14:	ldrd	r2, [r4, #8]
   37b18:	mov	r0, sl
   37b1c:	str	fp, [sp]
   37b20:	str	r5, [sp, #4]
   37b24:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   37b28:	str	r0, [sp, #136]	; 0x88
   37b2c:	b	37434 <__assert_fail@plt+0x26228>
   37b30:	ldrd	r2, [r4, #8]
   37b34:	strd	r2, [sp, #64]	; 0x40
   37b38:	b	37434 <__assert_fail@plt+0x26228>
   37b3c:	ldr	r3, [r4, #8]
   37b40:	str	r3, [sp, #92]	; 0x5c
   37b44:	b	37434 <__assert_fail@plt+0x26228>
   37b48:	ldr	r1, [r5]
   37b4c:	mov	r0, #10
   37b50:	bl	11140 <fputc@plt>
   37b54:	ldrb	r3, [r9, #-7]
   37b58:	ldr	r2, [sp, #96]	; 0x60
   37b5c:	add	r4, r9, #8
   37b60:	add	r3, r2, r3
   37b64:	str	r3, [sp, #96]	; 0x60
   37b68:	ldr	r3, [sp, #136]	; 0x88
   37b6c:	mov	r9, r4
   37b70:	sub	r3, r3, #1
   37b74:	cmn	r3, #1
   37b78:	str	r3, [sp, #136]	; 0x88
   37b7c:	bne	396cc <__assert_fail@plt+0x284c0>
   37b80:	ldr	r0, [sp, #132]	; 0x84
   37b84:	bl	10f54 <free@plt>
   37b88:	ldr	r3, [sp, #128]	; 0x80
   37b8c:	ldr	r2, [sp, #48]	; 0x30
   37b90:	cmp	r3, #0
   37b94:	cmpne	r2, #0
   37b98:	beq	38158 <__assert_fail@plt+0x26f4c>
   37b9c:	ldr	fp, [r8, #1124]	; 0x464
   37ba0:	cmp	fp, #0
   37ba4:	beq	3a4a0 <__assert_fail@plt+0x29294>
   37ba8:	ldr	r1, [sp, #48]	; 0x30
   37bac:	ldrd	r2, [sl, #8]
   37bb0:	lsl	r0, r1, #2
   37bb4:	mov	r1, #0
   37bb8:	cmp	r1, r3
   37bbc:	cmpeq	r0, r2
   37bc0:	bhi	3930c <__assert_fail@plt+0x28100>
   37bc4:	mov	r1, #4
   37bc8:	ldr	r0, [sp, #48]	; 0x30
   37bcc:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   37bd0:	subs	r7, r0, #0
   37bd4:	beq	3a2a0 <__assert_fail@plt+0x29094>
   37bd8:	ldr	r3, [r8]
   37bdc:	add	r9, sl, #4
   37be0:	cmp	r3, #0
   37be4:	mov	r2, #5
   37be8:	ldr	r1, [pc, #-2160]	; 37380 <__assert_fail@plt+0x26174>
   37bec:	add	r6, sl, #8
   37bf0:	beq	38fcc <__assert_fail@plt+0x27dc0>
   37bf4:	mov	r0, #0
   37bf8:	bl	10f90 <dcgettext@plt>
   37bfc:	ldr	r3, [sp, #48]	; 0x30
   37c00:	mov	r4, #4
   37c04:	mov	r5, #0
   37c08:	str	r3, [sp]
   37c0c:	mov	r3, #0
   37c10:	str	r3, [sp, #4]
   37c14:	mov	r1, r9
   37c18:	ldr	r3, [sp, #128]	; 0x80
   37c1c:	mov	r2, r6
   37c20:	strd	r4, [sp, #8]
   37c24:	str	r0, [sp, #16]
   37c28:	mov	r0, #0
   37c2c:	bl	1717c <__assert_fail@plt+0x5f70>
   37c30:	subs	r9, r0, #0
   37c34:	beq	369f4 <__assert_fail@plt+0x257e8>
   37c38:	ldr	fp, [pc, #-2176]	; 373c0 <__assert_fail@plt+0x261b4>
   37c3c:	mov	r5, #0
   37c40:	mov	r4, r9
   37c44:	sub	r6, r7, #4
   37c48:	str	r6, [sp, #96]	; 0x60
   37c4c:	ldr	r3, [fp]
   37c50:	mov	r0, r4
   37c54:	mov	r1, #4
   37c58:	blx	r3
   37c5c:	ldr	r3, [sp, #48]	; 0x30
   37c60:	add	r5, r5, #1
   37c64:	cmp	r5, r3
   37c68:	add	r4, r4, #4
   37c6c:	str	r0, [r6, #4]!
   37c70:	bcc	37c4c <__assert_fail@plt+0x26a40>
   37c74:	mov	r0, r9
   37c78:	bl	10f54 <free@plt>
   37c7c:	ldr	r5, [sp, #48]	; 0x30
   37c80:	mov	r4, #5
   37c84:	mov	r3, r5
   37c88:	ldr	r2, [pc, #-2316]	; 37384 <__assert_fail@plt+0x26178>
   37c8c:	ldr	r1, [pc, #-2316]	; 37388 <__assert_fail@plt+0x2617c>
   37c90:	str	r4, [sp]
   37c94:	mov	r0, #0
   37c98:	bl	11200 <dcngettext@plt>
   37c9c:	mov	r1, r5
   37ca0:	bl	10f24 <printf@plt>
   37ca4:	mov	r2, r4
   37ca8:	ldr	r1, [pc, #-2340]	; 3738c <__assert_fail@plt+0x26180>
   37cac:	mov	r0, #0
   37cb0:	bl	10f90 <dcgettext@plt>
   37cb4:	bl	11014 <puts@plt>
   37cb8:	ldr	r9, [pc, #-2352]	; 37390 <__assert_fail@plt+0x26184>
   37cbc:	ldr	fp, [pc, #-2352]	; 37394 <__assert_fail@plt+0x26188>
   37cc0:	ldr	r6, [sp, #96]	; 0x60
   37cc4:	mov	r5, #0
   37cc8:	b	37cfc <__assert_fail@plt+0x26af0>
   37ccc:	mov	r2, #5
   37cd0:	mov	r1, fp
   37cd4:	mov	r0, #0
   37cd8:	bl	10f90 <dcgettext@plt>
   37cdc:	bl	10f24 <printf@plt>
   37ce0:	ldr	r1, [r9]
   37ce4:	mov	r0, #10
   37ce8:	bl	11158 <putc@plt>
   37cec:	ldr	r3, [sp, #48]	; 0x30
   37cf0:	add	r5, r5, #1
   37cf4:	cmp	r5, r3
   37cf8:	bcs	39054 <__assert_fail@plt+0x27e48>
   37cfc:	ldr	r2, [r6, #4]!
   37d00:	mov	r1, r5
   37d04:	ldr	r0, [pc, #-2420]	; 37398 <__assert_fail@plt+0x2618c>
   37d08:	bl	10f24 <printf@plt>
   37d0c:	ldr	r3, [r6]
   37d10:	ldr	r2, [r8, #1396]	; 0x574
   37d14:	cmp	r3, r2
   37d18:	bcs	37ccc <__assert_fail@plt+0x26ac0>
   37d1c:	ldr	r4, [r8, #1124]	; 0x464
   37d20:	lsl	r3, r3, #5
   37d24:	mov	r2, #5
   37d28:	ldrd	r0, [r4, r3]
   37d2c:	add	r4, r4, r3
   37d30:	bl	14244 <__assert_fail@plt+0x3038>
   37d34:	ldr	r1, [r9]
   37d38:	mov	r0, #32
   37d3c:	bl	11158 <putc@plt>
   37d40:	ldr	r1, [r8, #1128]	; 0x468
   37d44:	cmp	r1, #0
   37d48:	beq	37d5c <__assert_fail@plt+0x26b50>
   37d4c:	ldr	r3, [r4, #16]
   37d50:	ldr	r2, [r8, #1400]	; 0x578
   37d54:	cmp	r3, r2
   37d58:	bcc	39060 <__assert_fail@plt+0x27e54>
   37d5c:	mov	r2, #5
   37d60:	ldr	r1, [pc, #-2508]	; 3739c <__assert_fail@plt+0x26190>
   37d64:	mov	r0, #0
   37d68:	bl	10f90 <dcgettext@plt>
   37d6c:	ldr	r1, [r4, #16]
   37d70:	bl	10f24 <printf@plt>
   37d74:	b	37ce0 <__assert_fail@plt+0x26ad4>
   37d78:	add	r3, sp, #176	; 0xb0
   37d7c:	str	r3, [sp, #32]
   37d80:	b	36fbc <__assert_fail@plt+0x25db0>
   37d84:	ldr	r3, [r4, #8]
   37d88:	str	r3, [sp, #100]	; 0x64
   37d8c:	b	37434 <__assert_fail@plt+0x26228>
   37d90:	ldr	r3, [sp, #96]	; 0x60
   37d94:	ldrd	r0, [r4, #8]
   37d98:	mov	ip, #0
   37d9c:	add	r3, r3, r3, lsl #2
   37da0:	mov	r2, r0
   37da4:	lsl	r3, r3, #2
   37da8:	str	r3, [sp]
   37dac:	str	ip, [sp, #4]
   37db0:	mov	r3, r1
   37db4:	mov	r0, sl
   37db8:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   37dbc:	mov	r9, r0
   37dc0:	b	37434 <__assert_fail@plt+0x26228>
   37dc4:	ldr	r1, [sp, #48]	; 0x30
   37dc8:	mov	r0, #0
   37dcc:	ldrd	r2, [r4, #8]
   37dd0:	lsl	r1, r1, #2
   37dd4:	str	r0, [sp, #4]
   37dd8:	str	r1, [sp]
   37ddc:	mov	r0, sl
   37de0:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   37de4:	str	r0, [sp, #128]	; 0x80
   37de8:	b	37434 <__assert_fail@plt+0x26228>
   37dec:	ldr	r3, [r4, #8]
   37df0:	str	r3, [sp, #112]	; 0x70
   37df4:	ldr	r3, [r4, #12]
   37df8:	str	r3, [sp, #116]	; 0x74
   37dfc:	b	37434 <__assert_fail@plt+0x26228>
   37e00:	ldr	r3, [r9]
   37e04:	mov	r2, #10
   37e08:	mov	r1, #1
   37e0c:	ldr	r0, [pc, #-2676]	; 373a0 <__assert_fail@plt+0x26194>
   37e10:	bl	10fcc <fwrite@plt>
   37e14:	ldr	r3, [r9]
   37e18:	mov	r2, #6
   37e1c:	mov	r1, #1
   37e20:	ldr	r0, [pc, #-2692]	; 373a4 <__assert_fail@plt+0x26198>
   37e24:	bl	10fcc <fwrite@plt>
   37e28:	tst	r4, #1
   37e2c:	bne	3a134 <__assert_fail@plt+0x28f28>
   37e30:	tst	r4, #2
   37e34:	bne	3a11c <__assert_fail@plt+0x28f10>
   37e38:	tst	r4, #8192	; 0x2000
   37e3c:	bne	3a104 <__assert_fail@plt+0x28ef8>
   37e40:	tst	r4, #4
   37e44:	bne	3a0ec <__assert_fail@plt+0x28ee0>
   37e48:	tst	r4, #8
   37e4c:	bne	3a0d4 <__assert_fail@plt+0x28ec8>
   37e50:	tst	r4, #16
   37e54:	bne	3a0bc <__assert_fail@plt+0x28eb0>
   37e58:	tst	r4, #32
   37e5c:	bne	3a0a4 <__assert_fail@plt+0x28e98>
   37e60:	tst	r4, #64	; 0x40
   37e64:	bne	3a08c <__assert_fail@plt+0x28e80>
   37e68:	tst	r4, #128	; 0x80
   37e6c:	bne	3a074 <__assert_fail@plt+0x28e68>
   37e70:	tst	r4, #256	; 0x100
   37e74:	bne	3a05c <__assert_fail@plt+0x28e50>
   37e78:	tst	r4, #512	; 0x200
   37e7c:	bne	3a044 <__assert_fail@plt+0x28e38>
   37e80:	tst	r4, #1024	; 0x400
   37e84:	bne	3a02c <__assert_fail@plt+0x28e20>
   37e88:	tst	r4, #2048	; 0x800
   37e8c:	bne	3a014 <__assert_fail@plt+0x28e08>
   37e90:	tst	r4, #4096	; 0x1000
   37e94:	bne	39ffc <__assert_fail@plt+0x28df0>
   37e98:	tst	r4, #16384	; 0x4000
   37e9c:	bne	39fe4 <__assert_fail@plt+0x28dd8>
   37ea0:	tst	r4, #32768	; 0x8000
   37ea4:	and	r5, r4, #131072	; 0x20000
   37ea8:	bne	39f78 <__assert_fail@plt+0x28d6c>
   37eac:	cmp	r5, #0
   37eb0:	bne	39f94 <__assert_fail@plt+0x28d88>
   37eb4:	cmp	r4, #0
   37eb8:	bne	39fa8 <__assert_fail@plt+0x28d9c>
   37ebc:	mov	r2, #5
   37ec0:	ldr	r1, [pc, #-2848]	; 373a8 <__assert_fail@plt+0x2619c>
   37ec4:	mov	r0, r4
   37ec8:	ldr	r5, [r9]
   37ecc:	bl	10f90 <dcgettext@plt>
   37ed0:	ldr	r1, [pc, #-2860]	; 373ac <__assert_fail@plt+0x261a0>
   37ed4:	mov	r2, r0
   37ed8:	mov	r0, r5
   37edc:	bl	11098 <fprintf@plt>
   37ee0:	ldr	r1, [sp, #60]	; 0x3c
   37ee4:	ldr	r0, [pc, #-2876]	; 373b0 <__assert_fail@plt+0x261a4>
   37ee8:	bl	10f24 <printf@plt>
   37eec:	mov	r1, fp
   37ef0:	ldr	r0, [pc, #-2884]	; 373b4 <__assert_fail@plt+0x261a8>
   37ef4:	bl	10f24 <printf@plt>
   37ef8:	ldr	r1, [r9]
   37efc:	mov	r0, #10
   37f00:	bl	11140 <fputc@plt>
   37f04:	mov	r0, r6
   37f08:	bl	10f54 <free@plt>
   37f0c:	ldr	r4, [r8, #684]	; 0x2ac
   37f10:	cmp	r4, #0
   37f14:	bne	371a8 <__assert_fail@plt+0x25f9c>
   37f18:	ldr	r3, [sl, #96]	; 0x60
   37f1c:	cmp	r3, #0
   37f20:	beq	369e8 <__assert_fail@plt+0x257dc>
   37f24:	ldr	r1, [pc, #-2932]	; 373b8 <__assert_fail@plt+0x261ac>
   37f28:	mov	r0, sl
   37f2c:	bl	1bd7c <__assert_fail@plt+0xab70>
   37f30:	subs	r3, r0, #0
   37f34:	beq	369e8 <__assert_fail@plt+0x257dc>
   37f38:	ldr	r1, [r8]
   37f3c:	ldr	r7, [r3, #36]	; 0x24
   37f40:	cmp	r1, #0
   37f44:	mov	r2, #5
   37f48:	ldr	r1, [pc, #-2944]	; 373d0 <__assert_fail@plt+0x261c4>
   37f4c:	mov	r0, #0
   37f50:	movne	r9, #4
   37f54:	moveq	r9, #8
   37f58:	ldr	r5, [r3, #32]
   37f5c:	ldr	r6, [r3, #16]
   37f60:	ldr	fp, [r3, #20]
   37f64:	ldr	r4, [r3, #24]
   37f68:	str	r7, [sp, #64]	; 0x40
   37f6c:	bl	10f90 <dcgettext@plt>
   37f70:	mov	r3, r4
   37f74:	stm	sp, {r5, r7}
   37f78:	str	r5, [sp, #56]	; 0x38
   37f7c:	mov	r4, #1
   37f80:	mov	r5, #0
   37f84:	add	r2, sl, #8
   37f88:	add	r1, sl, #4
   37f8c:	strd	r4, [sp, #8]
   37f90:	str	r0, [sp, #16]
   37f94:	mov	r0, #0
   37f98:	bl	1717c <__assert_fail@plt+0x5f70>
   37f9c:	mov	r2, #5
   37fa0:	ldr	r1, [pc, #-3052]	; 373bc <__assert_fail@plt+0x261b0>
   37fa4:	mov	r7, r0
   37fa8:	mov	r0, #0
   37fac:	bl	10f90 <dcgettext@plt>
   37fb0:	bl	10f24 <printf@plt>
   37fb4:	mov	r2, #5
   37fb8:	ldr	r1, [pc, #-3048]	; 373d8 <__assert_fail@plt+0x261cc>
   37fbc:	mov	r0, #0
   37fc0:	bl	10f90 <dcgettext@plt>
   37fc4:	bl	10f24 <printf@plt>
   37fc8:	ldr	r0, [pc, #-3060]	; 373dc <__assert_fail@plt+0x261d0>
   37fcc:	mov	r1, #0
   37fd0:	adds	r0, r6, r0
   37fd4:	adc	r1, fp, r1
   37fd8:	mov	r2, #6
   37fdc:	bl	14244 <__assert_fail@plt+0x3038>
   37fe0:	ldr	r0, [pc, #-3080]	; 373e0 <__assert_fail@plt+0x261d4>
   37fe4:	bl	11014 <puts@plt>
   37fe8:	cmp	r7, #0
   37fec:	beq	369e8 <__assert_fail@plt+0x257dc>
   37ff0:	ldr	r5, [sp, #56]	; 0x38
   37ff4:	add	r3, r7, r5
   37ff8:	mov	r2, r3
   37ffc:	str	r3, [sp, #48]	; 0x30
   38000:	add	r3, r7, r9
   38004:	cmp	r2, r3
   38008:	bcc	38028 <__assert_fail@plt+0x26e1c>
   3800c:	ldr	r3, [pc, #-3156]	; 373c0 <__assert_fail@plt+0x261b4>
   38010:	mov	r1, r9
   38014:	mov	r0, r7
   38018:	ldr	r3, [r3]
   3801c:	blx	r3
   38020:	orrs	r3, r0, r1
   38024:	beq	3a32c <__assert_fail@plt+0x29120>
   38028:	mov	r4, r6
   3802c:	mov	r5, fp
   38030:	ldr	r3, [sp, #56]	; 0x38
   38034:	adds	r3, r6, r3
   38038:	str	r3, [sp, #72]	; 0x48
   3803c:	ldr	r3, [sp, #64]	; 0x40
   38040:	adc	r3, fp, r3
   38044:	str	r3, [sp, #76]	; 0x4c
   38048:	ldrd	r2, [sp, #72]	; 0x48
   3804c:	cmp	r3, r5
   38050:	cmpeq	r2, r4
   38054:	bls	38118 <__assert_fail@plt+0x26f0c>
   38058:	mov	r2, #5
   3805c:	ldr	r1, [pc, #-3232]	; 373c4 <__assert_fail@plt+0x261b8>
   38060:	mov	r0, #0
   38064:	bl	10f90 <dcgettext@plt>
   38068:	bl	10f24 <printf@plt>
   3806c:	mov	r2, #5
   38070:	ldr	r1, [pc, #-3212]	; 373ec <__assert_fail@plt+0x261e0>
   38074:	mov	r0, #0
   38078:	bl	10f90 <dcgettext@plt>
   3807c:	mov	r2, #5
   38080:	ldr	r1, [pc, #-3224]	; 373f0 <__assert_fail@plt+0x261e4>
   38084:	str	r0, [sp, #32]
   38088:	mov	r0, #0
   3808c:	bl	10f90 <dcgettext@plt>
   38090:	mov	r2, #5
   38094:	ldr	r1, [pc, #-3284]	; 373c8 <__assert_fail@plt+0x261bc>
   38098:	str	r0, [sp, #56]	; 0x38
   3809c:	mov	r0, #0
   380a0:	bl	10f90 <dcgettext@plt>
   380a4:	lsl	r1, r9, #1
   380a8:	str	r1, [sp]
   380ac:	ldr	r3, [sp, #56]	; 0x38
   380b0:	ldr	r2, [sp, #32]
   380b4:	str	r0, [sp, #4]
   380b8:	ldr	r0, [pc, #-3316]	; 373cc <__assert_fail@plt+0x261c0>
   380bc:	bl	10f24 <printf@plt>
   380c0:	ldr	r3, [sp, #48]	; 0x30
   380c4:	strd	r4, [sp]
   380c8:	mov	r2, r6
   380cc:	str	r3, [sp, #8]
   380d0:	mov	r0, r7
   380d4:	mov	r3, fp
   380d8:	bl	14910 <__assert_fail@plt+0x3704>
   380dc:	mov	r4, r0
   380e0:	mov	r0, #10
   380e4:	mov	r5, r1
   380e8:	bl	110c8 <putchar@plt>
   380ec:	mvn	r3, #0
   380f0:	mvn	r2, #0
   380f4:	cmp	r5, r3
   380f8:	cmpeq	r4, r2
   380fc:	beq	38118 <__assert_fail@plt+0x26f0c>
   38100:	ldrd	r2, [sp, #72]	; 0x48
   38104:	cmp	r3, r5
   38108:	cmpeq	r2, r4
   3810c:	bhi	380c0 <__assert_fail@plt+0x26eb4>
   38110:	mov	r0, #10
   38114:	bl	110c8 <putchar@plt>
   38118:	mov	r0, r7
   3811c:	bl	10f54 <free@plt>
   38120:	b	369e8 <__assert_fail@plt+0x257dc>
   38124:	mov	r1, #0
   38128:	strd	r2, [sp, #80]	; 0x50
   3812c:	str	r1, [sp, #104]	; 0x68
   38130:	strd	r2, [sp, #64]	; 0x40
   38134:	str	r2, [sp, #60]	; 0x3c
   38138:	str	r3, [sp, #56]	; 0x38
   3813c:	str	r1, [sp, #108]	; 0x6c
   38140:	str	r1, [sp, #112]	; 0x70
   38144:	str	r1, [sp, #116]	; 0x74
   38148:	str	r1, [sp, #88]	; 0x58
   3814c:	str	r1, [sp, #72]	; 0x48
   38150:	str	r1, [sp, #92]	; 0x5c
   38154:	str	r1, [sp, #100]	; 0x64
   38158:	ldrd	r2, [sp, #56]	; 0x38
   3815c:	ldr	r1, [sp, #116]	; 0x74
   38160:	orrs	r3, r3, r2
   38164:	ldr	r2, [sp, #112]	; 0x70
   38168:	moveq	r3, #0
   3816c:	movne	r3, #1
   38170:	orrs	r2, r2, r1
   38174:	moveq	r3, #0
   38178:	cmp	r3, #0
   3817c:	beq	38468 <__assert_fail@plt+0x2725c>
   38180:	ldr	r3, [r8]
   38184:	ldr	r2, [sp, #116]	; 0x74
   38188:	cmp	r3, #0
   3818c:	moveq	ip, #8
   38190:	movne	ip, #4
   38194:	ldr	lr, [sp, #112]	; 0x70
   38198:	mul	r2, ip, r2
   3819c:	movne	r3, #0
   381a0:	umull	r0, r1, ip, lr
   381a4:	mla	r2, lr, r3, r2
   381a8:	moveq	r9, ip
   381ac:	add	r1, r2, r1
   381b0:	ldr	r2, [sp, #60]	; 0x3c
   381b4:	movne	r9, ip
   381b8:	adds	r2, r0, r2
   381bc:	str	r2, [sp, #120]	; 0x78
   381c0:	ldr	r2, [sp, #56]	; 0x38
   381c4:	ldrd	r4, [sp, #80]	; 0x50
   381c8:	adc	r2, r1, r2
   381cc:	ldrd	r0, [sp, #64]	; 0x40
   381d0:	str	r2, [sp, #124]	; 0x7c
   381d4:	cmp	r1, r5
   381d8:	cmpeq	r0, r4
   381dc:	bcc	393c4 <__assert_fail@plt+0x281b8>
   381e0:	ldrd	r4, [sp, #64]	; 0x40
   381e4:	ldrd	r0, [sp, #80]	; 0x50
   381e8:	subs	r2, r4, r0
   381ec:	sbc	r0, r5, r1
   381f0:	mul	r1, r2, r3
   381f4:	umull	r2, r3, r2, ip
   381f8:	ldrd	r4, [sp, #120]	; 0x78
   381fc:	mla	ip, ip, r0, r1
   38200:	adds	r6, r4, r2
   38204:	add	r3, ip, r3
   38208:	adcs	r7, r5, r3
   3820c:	mov	r0, #0
   38210:	mov	r1, #0
   38214:	movcs	r0, #1
   38218:	movcs	r1, #0
   3821c:	orrs	r3, r0, r1
   38220:	strd	r6, [sp, #48]	; 0x30
   38224:	bne	3932c <__assert_fail@plt+0x28120>
   38228:	ldrd	r0, [sp, #48]	; 0x30
   3822c:	ldr	r6, [sp, #60]	; 0x3c
   38230:	ldr	r3, [sp, #56]	; 0x38
   38234:	subs	r5, r0, r6
   38238:	sbc	r4, r1, r3
   3823c:	mov	r2, r6
   38240:	str	r5, [sp]
   38244:	str	r4, [sp, #4]
   38248:	mov	r0, sl
   3824c:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   38250:	mov	r2, #5
   38254:	ldr	r1, [pc, #-3724]	; 373d0 <__assert_fail@plt+0x261c4>
   38258:	mov	r7, r0
   3825c:	mov	r0, #0
   38260:	bl	10f90 <dcgettext@plt>
   38264:	str	r4, [sp, #4]
   38268:	str	r5, [sp]
   3826c:	mov	r4, #1
   38270:	mov	r5, #0
   38274:	mov	r3, r7
   38278:	strd	r4, [sp, #8]
   3827c:	add	r2, sl, #8
   38280:	add	r1, sl, #4
   38284:	str	r6, [sp, #96]	; 0x60
   38288:	mov	r7, r6
   3828c:	lsl	r4, r9, #1
   38290:	str	r0, [sp, #16]
   38294:	mov	r0, #0
   38298:	bl	1717c <__assert_fail@plt+0x5f70>
   3829c:	ldr	r2, [sp, #48]	; 0x30
   382a0:	ldr	r1, [pc, #-3796]	; 373d4 <__assert_fail@plt+0x261c8>
   382a4:	sub	r6, r2, r6
   382a8:	mov	r2, #5
   382ac:	mov	r5, r0
   382b0:	mov	r0, #0
   382b4:	bl	10f90 <dcgettext@plt>
   382b8:	bl	10f24 <printf@plt>
   382bc:	mov	r2, #5
   382c0:	ldr	r1, [pc, #-3824]	; 373d8 <__assert_fail@plt+0x261cc>
   382c4:	mov	r0, #0
   382c8:	bl	10f90 <dcgettext@plt>
   382cc:	bl	10f24 <printf@plt>
   382d0:	ldr	r0, [pc, #-3836]	; 373dc <__assert_fail@plt+0x261d0>
   382d4:	ldr	r3, [sp, #56]	; 0x38
   382d8:	adds	r0, r7, r0
   382dc:	mov	r1, #0
   382e0:	adc	r1, r3, r1
   382e4:	mov	r2, #6
   382e8:	str	r7, [sp, #60]	; 0x3c
   382ec:	bl	14244 <__assert_fail@plt+0x3038>
   382f0:	ldr	r0, [pc, #-3864]	; 373e0 <__assert_fail@plt+0x261d4>
   382f4:	bl	11014 <puts@plt>
   382f8:	mov	r2, #5
   382fc:	ldr	r1, [pc, #-3872]	; 373e4 <__assert_fail@plt+0x261d8>
   38300:	mov	r0, #0
   38304:	bl	10f90 <dcgettext@plt>
   38308:	bl	10f24 <printf@plt>
   3830c:	mov	r2, #5
   38310:	ldr	r1, [pc, #-3888]	; 373e8 <__assert_fail@plt+0x261dc>
   38314:	mov	r0, #0
   38318:	bl	10f90 <dcgettext@plt>
   3831c:	add	fp, r5, r6
   38320:	mov	r2, #5
   38324:	ldr	r1, [pc, #-3904]	; 373ec <__assert_fail@plt+0x261e0>
   38328:	mov	r6, r0
   3832c:	mov	r0, #0
   38330:	bl	10f90 <dcgettext@plt>
   38334:	mov	r2, #5
   38338:	ldr	r1, [pc, #-3920]	; 373f0 <__assert_fail@plt+0x261e4>
   3833c:	str	r0, [sp, #48]	; 0x30
   38340:	mov	r0, #0
   38344:	bl	10f90 <dcgettext@plt>
   38348:	mov	r2, #5
   3834c:	ldr	r1, [pc, #-3936]	; 373f4 <__assert_fail@plt+0x261e8>
   38350:	mov	r7, r0
   38354:	mov	r0, #0
   38358:	bl	10f90 <dcgettext@plt>
   3835c:	mov	r3, r7
   38360:	ldr	r2, [sp, #48]	; 0x30
   38364:	mov	r1, r4
   38368:	str	r4, [sp]
   3836c:	str	r0, [sp, #4]
   38370:	mov	r0, r6
   38374:	bl	10f24 <printf@plt>
   38378:	ldr	r3, [sp, #56]	; 0x38
   3837c:	ldr	r2, [sp, #60]	; 0x3c
   38380:	str	r3, [sp, #4]
   38384:	str	r2, [sp]
   38388:	str	fp, [sp, #8]
   3838c:	mov	r0, r5
   38390:	bl	14910 <__assert_fail@plt+0x3704>
   38394:	mov	r2, #5
   38398:	mov	r6, r0
   3839c:	mov	r7, r1
   383a0:	mov	r0, #0
   383a4:	ldr	r1, [pc, #-4020]	; 373f8 <__assert_fail@plt+0x261ec>
   383a8:	strd	r6, [sp, #48]	; 0x30
   383ac:	bl	10f90 <dcgettext@plt>
   383b0:	bl	10f24 <printf@plt>
   383b4:	mvn	r3, #0
   383b8:	mvn	r2, #0
   383bc:	cmp	r7, r3
   383c0:	cmpeq	r6, r2
   383c4:	mov	r0, r6
   383c8:	beq	39f48 <__assert_fail@plt+0x28d3c>
   383cc:	cmp	r5, #0
   383d0:	beq	393b8 <__assert_fail@plt+0x281ac>
   383d4:	ldr	r6, [sp, #96]	; 0x60
   383d8:	sub	r0, r0, r6
   383dc:	add	r3, r9, r0
   383e0:	add	r3, r5, r3
   383e4:	cmp	fp, r3
   383e8:	bcc	38430 <__assert_fail@plt+0x27224>
   383ec:	ldr	r3, [pc, #4084]	; 393e8 <__assert_fail@plt+0x281dc>
   383f0:	add	r0, r5, r0
   383f4:	mov	r1, r9
   383f8:	ldr	r3, [r3]
   383fc:	blx	r3
   38400:	lsl	r3, r9, #3
   38404:	sub	r2, r3, #1
   38408:	rsb	ip, r2, #32
   3840c:	sub	r3, r3, #33	; 0x21
   38410:	lsr	r0, r0, r2
   38414:	orr	r0, r0, r1, lsl ip
   38418:	orr	r3, r0, r1, lsr r3
   3841c:	mov	r6, r3
   38420:	lsr	r3, r1, r2
   38424:	mov	r2, r6
   38428:	orrs	r3, r2, r3
   3842c:	bne	3a4b8 <__assert_fail@plt+0x292ac>
   38430:	mov	r0, #10
   38434:	bl	110c8 <putchar@plt>
   38438:	ldrd	r2, [sp, #120]	; 0x78
   3843c:	ldrd	r0, [sp, #48]	; 0x30
   38440:	cmp	r3, r1
   38444:	cmpeq	r2, r0
   38448:	bhi	39e80 <__assert_fail@plt+0x28c74>
   3844c:	ldrd	r0, [sp, #64]	; 0x40
   38450:	ldrd	r2, [sp, #80]	; 0x50
   38454:	cmp	r1, r3
   38458:	cmpeq	r0, r2
   3845c:	bhi	39c28 <__assert_fail@plt+0x28a1c>
   38460:	mov	r0, r5
   38464:	bl	10f54 <free@plt>
   38468:	ldr	r3, [sp, #88]	; 0x58
   3846c:	ldr	r2, [sp, #72]	; 0x48
   38470:	ldr	r1, [sp, #108]	; 0x6c
   38474:	orrs	r3, r3, r2
   38478:	ldr	r2, [sp, #104]	; 0x68
   3847c:	moveq	r3, #0
   38480:	movne	r3, #1
   38484:	orrs	r2, r2, r1
   38488:	moveq	r3, #0
   3848c:	cmp	r3, #0
   38490:	beq	369e8 <__assert_fail@plt+0x257dc>
   38494:	ldr	r3, [sp, #100]	; 0x64
   38498:	ldr	r2, [sp, #92]	; 0x5c
   3849c:	cmp	r3, #0
   384a0:	cmpne	r2, #0
   384a4:	beq	369e8 <__assert_fail@plt+0x257dc>
   384a8:	mov	r1, #0
   384ac:	str	r2, [sp]
   384b0:	str	r1, [sp, #4]
   384b4:	ldrd	r2, [sp, #104]	; 0x68
   384b8:	mov	r0, sl
   384bc:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   384c0:	ldr	r3, [sp, #100]	; 0x64
   384c4:	ldr	r2, [sp, #92]	; 0x5c
   384c8:	cmp	r3, #7
   384cc:	ldr	r3, [sp, #32]
   384d0:	mov	r1, r0
   384d4:	add	r0, sp, #172	; 0xac
   384d8:	str	r0, [sp]
   384dc:	mov	r0, sl
   384e0:	beq	393a8 <__assert_fail@plt+0x2819c>
   384e4:	bl	17498 <__assert_fail@plt+0x628c>
   384e8:	cmp	r0, #0
   384ec:	beq	369f4 <__assert_fail@plt+0x257e8>
   384f0:	ldr	r3, [r8]
   384f4:	ldr	r4, [sp, #172]	; 0xac
   384f8:	cmp	r3, #0
   384fc:	movne	r9, #4
   38500:	moveq	r9, #8
   38504:	add	r4, r4, #2
   38508:	mov	r6, #0
   3850c:	mul	r4, r9, r4
   38510:	ldr	r3, [sp, #72]	; 0x48
   38514:	ldr	r2, [sp, #88]	; 0x58
   38518:	stm	sp, {r4, r6}
   3851c:	mov	r0, sl
   38520:	bl	1c6ec <__assert_fail@plt+0xb4e0>
   38524:	mov	r2, #5
   38528:	ldr	r1, [pc, #3772]	; 393ec <__assert_fail@plt+0x281e0>
   3852c:	mov	r5, r0
   38530:	mov	r0, r6
   38534:	bl	10f90 <dcgettext@plt>
   38538:	stm	sp, {r4, r6}
   3853c:	mov	r3, r5
   38540:	mov	r4, #1
   38544:	mov	r5, #0
   38548:	add	r2, sl, #8
   3854c:	strd	r4, [sp, #8]
   38550:	add	r1, sl, #4
   38554:	str	r0, [sp, #16]
   38558:	mov	r0, r6
   3855c:	bl	1717c <__assert_fail@plt+0x5f70>
   38560:	subs	r7, r0, #0
   38564:	beq	369f4 <__assert_fail@plt+0x257e8>
   38568:	ldr	r0, [pc, #3712]	; 393f0 <__assert_fail@plt+0x281e4>
   3856c:	bl	11014 <puts@plt>
   38570:	mov	r2, #5
   38574:	ldr	r1, [pc, #3704]	; 393f4 <__assert_fail@plt+0x281e8>
   38578:	mov	r0, r6
   3857c:	bl	10f90 <dcgettext@plt>
   38580:	bl	10f24 <printf@plt>
   38584:	mov	r2, #5
   38588:	ldr	r1, [pc, #3688]	; 393f8 <__assert_fail@plt+0x281ec>
   3858c:	mov	r0, r6
   38590:	bl	10f90 <dcgettext@plt>
   38594:	mov	r2, #5
   38598:	ldr	r1, [pc, #4060]	; 3957c <__assert_fail@plt+0x28370>
   3859c:	lsl	fp, r9, #1
   385a0:	mov	r4, r0
   385a4:	mov	r0, r6
   385a8:	bl	10f90 <dcgettext@plt>
   385ac:	mov	r2, #5
   385b0:	ldr	r1, [pc, #4040]	; 39580 <__assert_fail@plt+0x28374>
   385b4:	mov	r5, r0
   385b8:	mov	r0, r6
   385bc:	bl	10f90 <dcgettext@plt>
   385c0:	mov	r2, r5
   385c4:	mov	r3, fp
   385c8:	mov	r1, fp
   385cc:	str	r0, [sp]
   385d0:	mov	r0, r4
   385d4:	bl	10f24 <printf@plt>
   385d8:	ldr	r3, [sp, #88]	; 0x58
   385dc:	ldr	r1, [sp, #72]	; 0x48
   385e0:	mov	r2, r3
   385e4:	str	r3, [sp]
   385e8:	str	r1, [sp, #4]
   385ec:	mov	r3, r1
   385f0:	mov	r0, r7
   385f4:	bl	14ac0 <__assert_fail@plt+0x38b4>
   385f8:	mov	r2, #5
   385fc:	mov	r4, r0
   38600:	mov	r5, r1
   38604:	mov	r0, r6
   38608:	ldr	r1, [pc, #3564]	; 393fc <__assert_fail@plt+0x281f0>
   3860c:	bl	10f90 <dcgettext@plt>
   38610:	bl	10f24 <printf@plt>
   38614:	ldr	r3, [sp, #72]	; 0x48
   38618:	strd	r4, [sp]
   3861c:	ldr	r2, [sp, #88]	; 0x58
   38620:	mov	r0, r7
   38624:	bl	14ac0 <__assert_fail@plt+0x38b4>
   38628:	mov	r2, #5
   3862c:	strd	r0, [sp, #32]
   38630:	ldr	r1, [pc, #3528]	; 39400 <__assert_fail@plt+0x281f4>
   38634:	mov	r0, r6
   38638:	bl	10f90 <dcgettext@plt>
   3863c:	bl	10f24 <printf@plt>
   38640:	mov	r0, #10
   38644:	bl	110c8 <putchar@plt>
   38648:	mov	r2, #5
   3864c:	ldr	r1, [pc, #3504]	; 39404 <__assert_fail@plt+0x281f8>
   38650:	mov	r0, r6
   38654:	bl	10f90 <dcgettext@plt>
   38658:	bl	10f24 <printf@plt>
   3865c:	mov	r2, #5
   38660:	ldr	r1, [pc, #3860]	; 3957c <__assert_fail@plt+0x28370>
   38664:	mov	r0, r6
   38668:	bl	10f90 <dcgettext@plt>
   3866c:	mov	r2, #5
   38670:	ldr	r1, [pc, #3848]	; 39580 <__assert_fail@plt+0x28374>
   38674:	str	r0, [sp, #48]	; 0x30
   38678:	mov	r0, r6
   3867c:	bl	10f90 <dcgettext@plt>
   38680:	mov	r2, #5
   38684:	ldr	r1, [pc, #3784]	; 39554 <__assert_fail@plt+0x28348>
   38688:	mov	r5, r0
   3868c:	mov	r0, r6
   38690:	bl	10f90 <dcgettext@plt>
   38694:	mov	r2, #5
   38698:	ldr	r1, [pc, #3768]	; 39558 <__assert_fail@plt+0x2834c>
   3869c:	str	r0, [sp, #56]	; 0x38
   386a0:	mov	r0, r6
   386a4:	bl	10f90 <dcgettext@plt>
   386a8:	mov	r2, #5
   386ac:	ldr	r1, [pc, #3752]	; 3955c <__assert_fail@plt+0x28350>
   386b0:	str	r0, [sp, #60]	; 0x3c
   386b4:	mov	r0, r6
   386b8:	bl	10f90 <dcgettext@plt>
   386bc:	mov	r2, #5
   386c0:	ldr	r1, [pc, #3736]	; 39560 <__assert_fail@plt+0x28354>
   386c4:	mov	r4, r0
   386c8:	mov	r0, r6
   386cc:	bl	10f90 <dcgettext@plt>
   386d0:	ldr	r3, [sp, #60]	; 0x3c
   386d4:	str	fp, [sp, #4]
   386d8:	str	r3, [sp, #12]
   386dc:	ldr	r3, [sp, #56]	; 0x38
   386e0:	ldr	r2, [sp, #48]	; 0x30
   386e4:	str	r3, [sp, #8]
   386e8:	mov	r1, fp
   386ec:	mov	r3, fp
   386f0:	str	r5, [sp]
   386f4:	str	r4, [sp, #16]
   386f8:	str	r0, [sp, #20]
   386fc:	ldr	r0, [pc, #3332]	; 39408 <__assert_fail@plt+0x281fc>
   38700:	bl	10f24 <printf@plt>
   38704:	ldr	r2, [r8]
   38708:	mvn	r3, #5
   3870c:	cmp	r2, #0
   38710:	movne	r2, #63	; 0x3f
   38714:	moveq	r2, #143	; 0x8f
   38718:	mla	r3, r3, r9, r2
   3871c:	ldr	r2, [sp, #172]	; 0xac
   38720:	sub	r3, r3, #1
   38724:	cmp	r2, #0
   38728:	str	r3, [sp, #48]	; 0x30
   3872c:	ldrne	r9, [pc, #3636]	; 39568 <__assert_fail@plt+0x2835c>
   38730:	ldrne	fp, [pc, #3284]	; 3940c <__assert_fail@plt+0x28200>
   38734:	bne	3876c <__assert_fail@plt+0x27560>
   38738:	b	3938c <__assert_fail@plt+0x28180>
   3873c:	mov	r1, fp
   38740:	mov	r2, #5
   38744:	mov	r0, #0
   38748:	bl	10f90 <dcgettext@plt>
   3874c:	mov	r1, r4
   38750:	bl	10f24 <printf@plt>
   38754:	mov	r0, #10
   38758:	bl	110c8 <putchar@plt>
   3875c:	ldr	r3, [sp, #172]	; 0xac
   38760:	add	r6, r6, #1
   38764:	cmp	r6, r3
   38768:	bcs	3938c <__assert_fail@plt+0x28180>
   3876c:	ldr	r3, [sp, #176]	; 0xb0
   38770:	add	r2, r6, r6, lsl #1
   38774:	ldr	r1, [r8]
   38778:	add	r3, r3, r2, lsl #3
   3877c:	cmp	r1, #0
   38780:	ldr	r4, [r3, #8]
   38784:	ldr	r3, [r3, #12]
   38788:	mov	r0, r7
   3878c:	lsrne	r4, r4, #8
   38790:	orrne	r4, r4, r3, lsl #24
   38794:	moveq	r4, r3
   38798:	ldrd	r2, [sp, #32]
   3879c:	strd	r2, [sp]
   387a0:	ldr	r3, [sp, #72]	; 0x48
   387a4:	ldr	r2, [sp, #88]	; 0x58
   387a8:	bl	14ac0 <__assert_fail@plt+0x38b4>
   387ac:	strd	r0, [sp, #32]
   387b0:	mov	r0, #32
   387b4:	bl	110c8 <putchar@plt>
   387b8:	ldr	r3, [r8, #1396]	; 0x574
   387bc:	cmp	r4, r3
   387c0:	bcs	3873c <__assert_fail@plt+0x27530>
   387c4:	ldr	r3, [r8, #1124]	; 0x464
   387c8:	lsl	r4, r4, #5
   387cc:	add	r5, r3, r4
   387d0:	ldrd	r0, [r3, r4]
   387d4:	mov	r2, #6
   387d8:	bl	14244 <__assert_fail@plt+0x3038>
   387dc:	ldrb	r2, [r5, #20]
   387e0:	add	r1, sl, #66	; 0x42
   387e4:	add	r0, sl, #23
   387e8:	and	r2, r2, #15
   387ec:	bl	1a2ec <__assert_fail@plt+0x90e0>
   387f0:	ldr	r1, [r5, #24]
   387f4:	mov	r4, r0
   387f8:	mov	r0, sl
   387fc:	bl	16fd8 <__assert_fail@plt+0x5dcc>
   38800:	mov	r1, r4
   38804:	mov	r2, r0
   38808:	mov	r0, r9
   3880c:	bl	10f24 <printf@plt>
   38810:	ldr	r1, [r8, #1128]	; 0x468
   38814:	cmp	r1, #0
   38818:	beq	3882c <__assert_fail@plt+0x27620>
   3881c:	ldr	r3, [r5, #16]
   38820:	ldr	r2, [r8, #1400]	; 0x578
   38824:	cmp	r3, r2
   38828:	bcc	39f54 <__assert_fail@plt+0x28d48>
   3882c:	mov	r2, #5
   38830:	ldr	r1, [pc, #3380]	; 3956c <__assert_fail@plt+0x28360>
   38834:	mov	r0, #0
   38838:	bl	10f90 <dcgettext@plt>
   3883c:	ldr	r1, [r5, #16]
   38840:	bl	10f24 <printf@plt>
   38844:	b	38754 <__assert_fail@plt+0x27548>
   38848:	mov	r2, #5
   3884c:	ldr	r1, [pc, #3004]	; 39410 <__assert_fail@plt+0x28204>
   38850:	mov	r0, #0
   38854:	bl	10f90 <dcgettext@plt>
   38858:	bl	10f24 <printf@plt>
   3885c:	b	37754 <__assert_fail@plt+0x26548>
   38860:	mov	r2, #5
   38864:	ldr	r1, [pc, #2984]	; 39414 <__assert_fail@plt+0x28208>
   38868:	mov	r0, #0
   3886c:	bl	10f90 <dcgettext@plt>
   38870:	bl	10f24 <printf@plt>
   38874:	b	37754 <__assert_fail@plt+0x26548>
   38878:	ldr	sl, [sp, #40]	; 0x28
   3887c:	add	r3, r3, r3, lsl #3
   38880:	mov	r2, #5
   38884:	ldr	r1, [sl, #96]	; 0x60
   38888:	mov	r0, #0
   3888c:	add	ip, r1, r3, lsl #3
   38890:	ldr	r1, [pc, #2944]	; 39418 <__assert_fail@plt+0x2820c>
   38894:	ldr	r3, [ip, #24]
   38898:	ldrd	sl, [ip, #32]
   3889c:	str	r3, [sp, #80]	; 0x50
   388a0:	str	ip, [sp, #44]	; 0x2c
   388a4:	bl	10f90 <dcgettext@plt>
   388a8:	strd	sl, [sp, #8]
   388ac:	mov	sl, #1
   388b0:	mov	fp, #0
   388b4:	ldr	r3, [sp, #80]	; 0x50
   388b8:	strd	sl, [sp]
   388bc:	ldr	sl, [sp, #40]	; 0x28
   388c0:	add	r2, sl, #8
   388c4:	add	r1, sl, #4
   388c8:	str	r0, [sp, #16]
   388cc:	mov	r0, #0
   388d0:	bl	1717c <__assert_fail@plt+0x5f70>
   388d4:	cmp	r0, #0
   388d8:	beq	36da8 <__assert_fail@plt+0x25b9c>
   388dc:	ldr	r3, [sp, #88]	; 0x58
   388e0:	ldr	ip, [sp, #44]	; 0x2c
   388e4:	mov	r2, r4
   388e8:	ldr	r3, [r3, #4]
   388ec:	str	r8, [sp, #12]
   388f0:	sub	r3, r3, #11
   388f4:	clz	r3, r3
   388f8:	lsr	r3, r3, #5
   388fc:	str	r3, [sp, #16]
   38900:	ldr	r3, [sp, #176]	; 0xb0
   38904:	ldr	r1, [ip, #32]
   38908:	mov	r4, r0
   3890c:	str	r1, [sp, #8]
   38910:	str	r0, [sp, #4]
   38914:	str	r3, [sp]
   38918:	ldr	r1, [sp, #48]	; 0x30
   3891c:	ldr	r3, [sp, #64]	; 0x40
   38920:	mov	r0, sl
   38924:	bl	2239c <__assert_fail@plt+0x11190>
   38928:	mov	r0, r4
   3892c:	bl	10f54 <free@plt>
   38930:	b	36dec <__assert_fail@plt+0x25be0>
   38934:	mov	r2, #5
   38938:	ldr	r1, [pc, #2780]	; 3941c <__assert_fail@plt+0x28210>
   3893c:	mov	r0, #0
   38940:	bl	10f90 <dcgettext@plt>
   38944:	bl	10f24 <printf@plt>
   38948:	mov	r2, #5
   3894c:	ldr	r1, [pc, #2764]	; 39420 <__assert_fail@plt+0x28214>
   38950:	mov	r0, #0
   38954:	bl	10f90 <dcgettext@plt>
   38958:	bl	10f24 <printf@plt>
   3895c:	b	36554 <__assert_fail@plt+0x25348>
   38960:	mov	r2, #5
   38964:	ldr	r1, [pc, #2744]	; 39424 <__assert_fail@plt+0x28218>
   38968:	mov	r0, #0
   3896c:	mov	r4, sl
   38970:	ldr	r9, [sp, #92]	; 0x5c
   38974:	ldr	r5, [sp, #96]	; 0x60
   38978:	ldr	sl, [sp, #100]	; 0x64
   3897c:	bl	10f90 <dcgettext@plt>
   38980:	ldr	r2, [sp, #56]	; 0x38
   38984:	sub	r1, r6, r2
   38988:	bl	54dd0 <warn@@Base>
   3898c:	mov	r2, #5
   38990:	ldr	r1, [pc, #2704]	; 39428 <__assert_fail@plt+0x2821c>
   38994:	mov	r0, #0
   38998:	bl	10f90 <dcgettext@plt>
   3899c:	mov	r3, r7
   389a0:	mov	r2, r8
   389a4:	mov	r1, r4
   389a8:	bl	54dd0 <warn@@Base>
   389ac:	b	37770 <__assert_fail@plt+0x26564>
   389b0:	mov	r2, #5
   389b4:	ldr	r1, [pc, #2672]	; 3942c <__assert_fail@plt+0x28220>
   389b8:	mov	r0, #0
   389bc:	bl	10f90 <dcgettext@plt>
   389c0:	bl	10f24 <printf@plt>
   389c4:	b	37754 <__assert_fail@plt+0x26548>
   389c8:	ldrd	r0, [r6, #32]
   389cc:	bl	58c00 <warn@@Base+0x3e30>
   389d0:	mov	r2, #5
   389d4:	ldr	r3, [fp, #32]
   389d8:	str	r2, [sp]
   389dc:	ldr	r2, [pc, #2636]	; 39430 <__assert_fail@plt+0x28224>
   389e0:	str	r3, [sp, #88]	; 0x58
   389e4:	mov	r1, r2
   389e8:	mov	r3, r0
   389ec:	mov	r4, r0
   389f0:	mov	r0, #0
   389f4:	bl	11200 <dcngettext@plt>
   389f8:	mov	r2, r6
   389fc:	add	r1, sl, #108	; 0x6c
   38a00:	mov	fp, r0
   38a04:	add	r0, sl, #104	; 0x68
   38a08:	bl	16c64 <__assert_fail@plt+0x5a58>
   38a0c:	mov	r2, r4
   38a10:	mov	r1, r0
   38a14:	mov	r0, fp
   38a18:	bl	10f24 <printf@plt>
   38a1c:	mov	r2, #5
   38a20:	ldr	r1, [pc, #2572]	; 39434 <__assert_fail@plt+0x28228>
   38a24:	mov	r0, #0
   38a28:	bl	10f90 <dcgettext@plt>
   38a2c:	bl	11014 <puts@plt>
   38a30:	ldrd	r2, [r6, #32]
   38a34:	cmp	r3, #0
   38a38:	cmpeq	r2, #19
   38a3c:	bls	38bd4 <__assert_fail@plt+0x279c8>
   38a40:	add	r3, sp, #172	; 0xac
   38a44:	ldr	fp, [sp, #44]	; 0x2c
   38a48:	mov	r4, #0
   38a4c:	mov	r5, #0
   38a50:	str	r3, [sp, #80]	; 0x50
   38a54:	str	r9, [sp, #92]	; 0x5c
   38a58:	str	sl, [sp, #96]	; 0x60
   38a5c:	b	38ab0 <__assert_fail@plt+0x278a4>
   38a60:	cmp	r3, r9
   38a64:	addhi	r1, r8, r9
   38a68:	bls	38ba0 <__assert_fail@plt+0x27994>
   38a6c:	ldr	r0, [pc, #2500]	; 39438 <__assert_fail@plt+0x2822c>
   38a70:	bl	10f24 <printf@plt>
   38a74:	ldrd	r2, [sp, #60]	; 0x3c
   38a78:	ldr	r1, [sp, #32]
   38a7c:	str	sl, [sp]
   38a80:	ldr	r0, [pc, #2484]	; 3943c <__assert_fail@plt+0x28230>
   38a84:	bl	10f24 <printf@plt>
   38a88:	adds	r4, r4, #1
   38a8c:	mov	r2, #20
   38a90:	mov	r3, #0
   38a94:	ldrd	r0, [r6, #32]
   38a98:	adc	r5, r5, #0
   38a9c:	bl	58c00 <warn@@Base+0x3e30>
   38aa0:	add	fp, fp, #20
   38aa4:	cmp	r1, r5
   38aa8:	cmpeq	r0, r4
   38aac:	bls	38bcc <__assert_fail@plt+0x279c0>
   38ab0:	ldr	sl, [pc, #2352]	; 393e8 <__assert_fail@plt+0x281dc>
   38ab4:	mov	r1, #4
   38ab8:	mov	r0, fp
   38abc:	ldr	r3, [sl]
   38ac0:	blx	r3
   38ac4:	mov	r1, #4
   38ac8:	ldr	r3, [sl]
   38acc:	mov	r9, r0
   38ad0:	add	r0, fp, r1
   38ad4:	blx	r3
   38ad8:	ldr	r3, [sl]
   38adc:	mov	r1, #4
   38ae0:	str	r0, [sp, #172]	; 0xac
   38ae4:	add	r0, fp, #8
   38ae8:	blx	r3
   38aec:	ldr	r3, [sl]
   38af0:	mov	r1, #4
   38af4:	str	r0, [sp, #60]	; 0x3c
   38af8:	add	r0, fp, #12
   38afc:	blx	r3
   38b00:	ldr	r3, [sl]
   38b04:	mov	r1, #4
   38b08:	str	r0, [sp, #64]	; 0x40
   38b0c:	add	r0, fp, #16
   38b10:	blx	r3
   38b14:	mov	sl, r0
   38b18:	ldr	r0, [sp, #80]	; 0x50
   38b1c:	bl	110ec <gmtime@plt>
   38b20:	ldr	r2, [pc, #2328]	; 39440 <__assert_fail@plt+0x28234>
   38b24:	ldr	r1, [r0]
   38b28:	ldr	r3, [r0, #20]
   38b2c:	str	r1, [sp, #16]
   38b30:	ldr	r1, [r0, #4]
   38b34:	add	r3, r3, #1888	; 0x760
   38b38:	str	r1, [sp, #12]
   38b3c:	ldr	r1, [r0, #8]
   38b40:	add	r3, r3, #12
   38b44:	str	r1, [sp, #8]
   38b48:	ldr	r1, [r0, #12]
   38b4c:	str	r1, [sp, #4]
   38b50:	ldr	r0, [r0, #16]
   38b54:	mov	r1, #128	; 0x80
   38b58:	add	r0, r0, #1
   38b5c:	str	r0, [sp]
   38b60:	ldr	r0, [sp, #32]
   38b64:	bl	110b0 <snprintf@plt>
   38b68:	mov	r1, r4
   38b6c:	ldr	r0, [pc, #2256]	; 39444 <__assert_fail@plt+0x28238>
   38b70:	bl	10f24 <printf@plt>
   38b74:	ldr	r3, [pc, #2252]	; 39448 <__assert_fail@plt+0x2823c>
   38b78:	ldr	r0, [r3]
   38b7c:	ldr	r3, [sp, #88]	; 0x58
   38b80:	cmp	r0, #0
   38b84:	bne	38a60 <__assert_fail@plt+0x27854>
   38b88:	cmp	r3, r9
   38b8c:	addhi	r1, r8, r9
   38b90:	bls	38bb8 <__assert_fail@plt+0x279ac>
   38b94:	ldr	r0, [pc, #2224]	; 3944c <__assert_fail@plt+0x28240>
   38b98:	bl	10f24 <printf@plt>
   38b9c:	b	38a74 <__assert_fail@plt+0x27868>
   38ba0:	ldr	r1, [pc, #2216]	; 39450 <__assert_fail@plt+0x28244>
   38ba4:	mov	r2, #5
   38ba8:	mov	r0, #0
   38bac:	bl	10f90 <dcgettext@plt>
   38bb0:	mov	r1, r0
   38bb4:	b	38a6c <__assert_fail@plt+0x27860>
   38bb8:	ldr	r1, [pc, #2192]	; 39450 <__assert_fail@plt+0x28244>
   38bbc:	mov	r2, #5
   38bc0:	bl	10f90 <dcgettext@plt>
   38bc4:	mov	r1, r0
   38bc8:	b	38b94 <__assert_fail@plt+0x27988>
   38bcc:	ldr	r9, [sp, #92]	; 0x5c
   38bd0:	ldr	sl, [sp, #96]	; 0x60
   38bd4:	ldr	r0, [sp, #44]	; 0x2c
   38bd8:	bl	10f54 <free@plt>
   38bdc:	mov	r0, r8
   38be0:	bl	10f54 <free@plt>
   38be4:	ldr	r3, [sl, #84]	; 0x54
   38be8:	b	36860 <__assert_fail@plt+0x25654>
   38bec:	mov	r2, #5
   38bf0:	ldr	r1, [pc, #2140]	; 39454 <__assert_fail@plt+0x28248>
   38bf4:	mov	r0, #0
   38bf8:	ldrd	r4, [r6, #32]
   38bfc:	bl	10f90 <dcgettext@plt>
   38c00:	ldr	r3, [sp, #136]	; 0x88
   38c04:	strd	r4, [sp, #8]
   38c08:	mov	r4, #1
   38c0c:	mov	r5, #0
   38c10:	add	r2, sl, #8
   38c14:	strd	r4, [sp]
   38c18:	add	r1, sl, #4
   38c1c:	str	r0, [sp, #16]
   38c20:	mov	r0, #0
   38c24:	bl	1717c <__assert_fail@plt+0x5f70>
   38c28:	subs	r3, r0, #0
   38c2c:	str	r3, [sp, #132]	; 0x84
   38c30:	streq	r3, [sp, #44]	; 0x2c
   38c34:	beq	37b88 <__assert_fail@plt+0x2697c>
   38c38:	ldr	r3, [r6, #32]
   38c3c:	ldr	r0, [r6, #36]	; 0x24
   38c40:	mov	r1, #8
   38c44:	lsr	r3, r3, #2
   38c48:	orr	r0, r3, r0, lsl #30
   38c4c:	bl	4be18 <__assert_fail@plt+0x3ac0c>
   38c50:	subs	r3, r0, #0
   38c54:	str	r3, [sp, #96]	; 0x60
   38c58:	beq	39708 <__assert_fail@plt+0x284fc>
   38c5c:	mov	r9, #0
   38c60:	mov	r7, r9
   38c64:	ldr	r4, [sp, #96]	; 0x60
   38c68:	ldr	fp, [pc, #1912]	; 393e8 <__assert_fail@plt+0x281dc>
   38c6c:	b	38cb4 <__assert_fail@plt+0x27aa8>
   38c70:	ldrd	r2, [r6, #32]
   38c74:	add	r7, r7, r1
   38c78:	mov	r1, #0
   38c7c:	cmp	r1, r3
   38c80:	cmpeq	r7, r2
   38c84:	bhi	38d18 <__assert_fail@plt+0x27b0c>
   38c88:	subs	ip, r2, #8
   38c8c:	sbc	r3, r3, #0
   38c90:	str	ip, [sp, #144]	; 0x90
   38c94:	str	r3, [sp, #148]	; 0x94
   38c98:	ldrd	r2, [sp, #144]	; 0x90
   38c9c:	add	r4, r4, #8
   38ca0:	add	r5, r9, #1
   38ca4:	cmp	r1, r3
   38ca8:	cmpeq	r7, r2
   38cac:	bhi	3966c <__assert_fail@plt+0x28460>
   38cb0:	mov	r9, r5
   38cb4:	ldr	r3, [sp, #132]	; 0x84
   38cb8:	mov	r1, #1
   38cbc:	add	r5, r3, r7
   38cc0:	mov	r0, r5
   38cc4:	ldr	r3, [fp]
   38cc8:	blx	r3
   38ccc:	mov	r1, #1
   38cd0:	strb	r0, [r4]
   38cd4:	ldr	r3, [fp]
   38cd8:	add	r0, r5, r1
   38cdc:	blx	r3
   38ce0:	mov	r1, #2
   38ce4:	strb	r0, [r4, #1]
   38ce8:	ldr	r3, [fp]
   38cec:	add	r0, r5, r1
   38cf0:	blx	r3
   38cf4:	mov	r1, #4
   38cf8:	ldr	r3, [fp]
   38cfc:	strh	r0, [r4, #2]
   38d00:	add	r0, r5, r1
   38d04:	blx	r3
   38d08:	ldrb	r1, [r4, #1]
   38d0c:	cmp	r1, #7
   38d10:	str	r0, [r4, #4]
   38d14:	bhi	38c70 <__assert_fail@plt+0x27a64>
   38d18:	mov	r2, #5
   38d1c:	ldr	r1, [pc, #1844]	; 39458 <__assert_fail@plt+0x2824c>
   38d20:	mov	r0, #0
   38d24:	bl	10f90 <dcgettext@plt>
   38d28:	ldrb	r1, [r4, #1]
   38d2c:	bl	548ac <error@@Base>
   38d30:	mov	fp, #0
   38d34:	b	369f8 <__assert_fail@plt+0x257ec>
   38d38:	ldr	r1, [pc, #1820]	; 3945c <__assert_fail@plt+0x28250>
   38d3c:	mov	r0, #0
   38d40:	ldr	r6, [r3, #24]
   38d44:	bl	10f90 <dcgettext@plt>
   38d48:	strd	r4, [sp, #8]
   38d4c:	mov	r4, #1
   38d50:	mov	r5, #0
   38d54:	mov	r3, r6
   38d58:	strd	r4, [sp]
   38d5c:	add	r2, sl, #8
   38d60:	add	r1, sl, #4
   38d64:	str	r0, [sp, #16]
   38d68:	mov	r0, #0
   38d6c:	bl	1717c <__assert_fail@plt+0x5f70>
   38d70:	subs	r6, r0, #0
   38d74:	beq	37f0c <__assert_fail@plt+0x26d00>
   38d78:	ldr	fp, [pc, #1640]	; 393e8 <__assert_fail@plt+0x281dc>
   38d7c:	mov	r1, #2
   38d80:	ldr	r3, [fp]
   38d84:	blx	r3
   38d88:	ldr	r3, [fp]
   38d8c:	mov	r1, #1
   38d90:	str	r0, [sp, #64]	; 0x40
   38d94:	add	r0, r6, #2
   38d98:	blx	r3
   38d9c:	ldr	r3, [fp]
   38da0:	mov	r1, #1
   38da4:	str	r0, [sp, #88]	; 0x58
   38da8:	add	r0, r6, #3
   38dac:	blx	r3
   38db0:	ldr	r3, [fp]
   38db4:	mov	r1, #1
   38db8:	uxtb	r2, r0
   38dbc:	add	r0, r6, #4
   38dc0:	str	r2, [sp, #80]	; 0x50
   38dc4:	blx	r3
   38dc8:	ldr	r3, [fp]
   38dcc:	mov	r1, #1
   38dd0:	uxtb	r5, r0
   38dd4:	add	r0, r6, #5
   38dd8:	blx	r3
   38ddc:	ldr	r3, [fp]
   38de0:	mov	r1, #1
   38de4:	uxtb	r7, r0
   38de8:	add	r0, r6, #6
   38dec:	blx	r3
   38df0:	ldr	r3, [fp]
   38df4:	mov	r1, #1
   38df8:	uxtb	r9, r0
   38dfc:	add	r0, r6, #7
   38e00:	blx	r3
   38e04:	ldr	r3, [fp]
   38e08:	mov	r1, #4
   38e0c:	uxtb	r2, r0
   38e10:	add	r0, r6, #8
   38e14:	str	r2, [sp, #56]	; 0x38
   38e18:	blx	r3
   38e1c:	ldr	r3, [fp]
   38e20:	mov	r1, #4
   38e24:	str	r0, [sp, #48]	; 0x30
   38e28:	add	r0, r6, #12
   38e2c:	blx	r3
   38e30:	ldr	r3, [fp]
   38e34:	mov	r1, #4
   38e38:	mov	r4, r0
   38e3c:	add	r0, r6, #16
   38e40:	blx	r3
   38e44:	ldr	r3, [fp]
   38e48:	mov	r1, #4
   38e4c:	str	r0, [sp, #60]	; 0x3c
   38e50:	add	r0, r6, #20
   38e54:	blx	r3
   38e58:	ldrh	r1, [sp, #64]	; 0x40
   38e5c:	mov	fp, r0
   38e60:	ldr	r0, [pc, #1528]	; 39460 <__assert_fail@plt+0x28254>
   38e64:	bl	10f24 <printf@plt>
   38e68:	ldrb	r1, [sp, #88]	; 0x58
   38e6c:	ldr	r0, [pc, #1520]	; 39464 <__assert_fail@plt+0x28258>
   38e70:	bl	10f24 <printf@plt>
   38e74:	ldr	r2, [sp, #80]	; 0x50
   38e78:	cmp	r2, #1
   38e7c:	bls	38e8c <__assert_fail@plt+0x27c80>
   38e80:	mov	r1, r2
   38e84:	ldr	r0, [pc, #1500]	; 39468 <__assert_fail@plt+0x2825c>
   38e88:	bl	10f24 <printf@plt>
   38e8c:	cmp	r5, #0
   38e90:	moveq	r1, r5
   38e94:	beq	38ebc <__assert_fail@plt+0x27cb0>
   38e98:	cmp	r5, #1
   38e9c:	moveq	r1, #32
   38ea0:	beq	38ebc <__assert_fail@plt+0x27cb0>
   38ea4:	cmp	r5, #2
   38ea8:	moveq	r1, #64	; 0x40
   38eac:	beq	38ebc <__assert_fail@plt+0x27cb0>
   38eb0:	cmp	r5, #3
   38eb4:	moveq	r1, #128	; 0x80
   38eb8:	mvnne	r1, #0
   38ebc:	ldr	r0, [pc, #1448]	; 3946c <__assert_fail@plt+0x28260>
   38ec0:	bl	10f24 <printf@plt>
   38ec4:	cmp	r7, #0
   38ec8:	moveq	r1, r7
   38ecc:	beq	38ef4 <__assert_fail@plt+0x27ce8>
   38ed0:	cmp	r7, #1
   38ed4:	moveq	r1, #32
   38ed8:	beq	38ef4 <__assert_fail@plt+0x27ce8>
   38edc:	cmp	r7, #2
   38ee0:	moveq	r1, #64	; 0x40
   38ee4:	beq	38ef4 <__assert_fail@plt+0x27ce8>
   38ee8:	cmp	r7, #3
   38eec:	moveq	r1, #128	; 0x80
   38ef0:	mvnne	r1, #0
   38ef4:	ldr	r0, [pc, #1396]	; 39470 <__assert_fail@plt+0x28264>
   38ef8:	bl	10f24 <printf@plt>
   38efc:	cmp	r9, #0
   38f00:	moveq	r1, r9
   38f04:	beq	38f2c <__assert_fail@plt+0x27d20>
   38f08:	cmp	r9, #1
   38f0c:	moveq	r1, #32
   38f10:	beq	38f2c <__assert_fail@plt+0x27d20>
   38f14:	cmp	r9, #2
   38f18:	moveq	r1, #64	; 0x40
   38f1c:	beq	38f2c <__assert_fail@plt+0x27d20>
   38f20:	cmp	r9, #3
   38f24:	moveq	r1, #128	; 0x80
   38f28:	mvnne	r1, #0
   38f2c:	ldr	r9, [pc, #1836]	; 39660 <__assert_fail@plt+0x28454>
   38f30:	ldr	r0, [pc, #1340]	; 39474 <__assert_fail@plt+0x28268>
   38f34:	bl	10f24 <printf@plt>
   38f38:	ldr	r3, [r9]
   38f3c:	mov	r2, #9
   38f40:	mov	r1, #1
   38f44:	ldr	r0, [pc, #1324]	; 39478 <__assert_fail@plt+0x2826c>
   38f48:	bl	10fcc <fwrite@plt>
   38f4c:	ldr	r0, [sp, #56]	; 0x38
   38f50:	bl	14638 <__assert_fail@plt+0x342c>
   38f54:	ldr	r3, [r9]
   38f58:	mov	r2, #15
   38f5c:	mov	r1, #1
   38f60:	ldr	r0, [pc, #1300]	; 3947c <__assert_fail@plt+0x28270>
   38f64:	bl	10fcc <fwrite@plt>
   38f68:	ldr	r3, [sp, #48]	; 0x30
   38f6c:	cmp	r3, #20
   38f70:	ldrls	pc, [pc, r3, lsl #2]
   38f74:	b	3a5bc <__assert_fail@plt+0x293b0>
   38f78:	andeq	sl, r3, r4, lsl #5
   38f7c:	andeq	sl, r3, ip, ror #4
   38f80:	andeq	sl, r3, r4, asr r2
   38f84:	andeq	sl, r3, ip, lsr r2
   38f88:	andeq	sl, r3, r4, lsr #4
   38f8c:	andeq	sl, r3, ip, lsl #4
   38f90:	strdeq	sl, [r3], -r4
   38f94:	ldrdeq	sl, [r3], -ip
   38f98:	andeq	sl, r3, r4, asr #3
   38f9c:	andeq	sl, r3, ip, lsr #3
   38fa0:	muleq	r3, r4, r1
   38fa4:	andeq	sl, r3, ip, ror r1
   38fa8:	andeq	sl, r3, r4, ror #2
   38fac:	andeq	sl, r3, ip, asr #2
   38fb0:	andeq	r7, r3, r0, lsl #28
   38fb4:	andeq	sl, r3, r4, lsl r3
   38fb8:	strdeq	sl, [r3], -ip
   38fbc:	andeq	sl, r3, r4, ror #5
   38fc0:	andeq	sl, r3, ip, asr #5
   38fc4:	andeq	sl, r3, r4, lsr #10
   38fc8:	andeq	sl, r3, ip, lsl #10
   38fcc:	mov	r0, r3
   38fd0:	mov	r4, r3
   38fd4:	bl	10f90 <dcgettext@plt>
   38fd8:	mov	r5, #0
   38fdc:	mov	ip, r4
   38fe0:	ldr	r3, [sp, #48]	; 0x30
   38fe4:	str	r4, [sp, #4]
   38fe8:	mov	r4, #8
   38fec:	str	r3, [sp]
   38ff0:	mov	r1, r9
   38ff4:	strd	r4, [sp, #8]
   38ff8:	ldr	r3, [sp, #128]	; 0x80
   38ffc:	mov	r2, r6
   39000:	mov	r4, ip
   39004:	str	r0, [sp, #16]
   39008:	mov	r0, ip
   3900c:	bl	1717c <__assert_fail@plt+0x5f70>
   39010:	subs	r9, r0, #0
   39014:	beq	369f4 <__assert_fail@plt+0x257e8>
   39018:	ldr	fp, [pc, #968]	; 393e8 <__assert_fail@plt+0x281dc>
   3901c:	mov	r5, r9
   39020:	sub	r6, r7, #4
   39024:	str	r6, [sp, #96]	; 0x60
   39028:	ldr	r3, [fp]
   3902c:	mov	r0, r5
   39030:	mov	r1, #8
   39034:	blx	r3
   39038:	ldr	r3, [sp, #48]	; 0x30
   3903c:	add	r4, r4, #1
   39040:	cmp	r4, r3
   39044:	add	r5, r5, #8
   39048:	str	r0, [r6, #4]!
   3904c:	bcc	39028 <__assert_fail@plt+0x27e1c>
   39050:	b	37c74 <__assert_fail@plt+0x26a68>
   39054:	mov	r0, r7
   39058:	bl	10f54 <free@plt>
   3905c:	b	38158 <__assert_fail@plt+0x26f4c>
   39060:	add	r1, r1, r3
   39064:	mov	r0, #25
   39068:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   3906c:	b	37ce0 <__assert_fail@plt+0x26ad4>
   39070:	mov	r2, #5
   39074:	ldr	r1, [pc, #1028]	; 39480 <__assert_fail@plt+0x28274>
   39078:	mov	r0, #0
   3907c:	bl	10f90 <dcgettext@plt>
   39080:	mov	r7, #0
   39084:	ldr	fp, [sp, #96]	; 0x60
   39088:	mov	r6, #20
   3908c:	mov	r5, #0
   39090:	strd	r6, [sp, #8]
   39094:	str	fp, [sp]
   39098:	mov	r3, r9
   3909c:	str	r5, [sp, #4]
   390a0:	add	r2, sl, #8
   390a4:	add	r1, sl, #4
   390a8:	str	r0, [sp, #16]
   390ac:	mov	r0, r5
   390b0:	bl	1717c <__assert_fail@plt+0x5f70>
   390b4:	subs	r7, r0, #0
   390b8:	str	r7, [sp, #140]	; 0x8c
   390bc:	beq	392b4 <__assert_fail@plt+0x280a8>
   390c0:	mov	r4, #5
   390c4:	mov	r3, fp
   390c8:	ldr	r2, [pc, #948]	; 39484 <__assert_fail@plt+0x28278>
   390cc:	ldr	r1, [pc, #948]	; 39488 <__assert_fail@plt+0x2827c>
   390d0:	str	r4, [sp]
   390d4:	mov	r0, r5
   390d8:	ldr	r9, [pc, #1408]	; 39660 <__assert_fail@plt+0x28454>
   390dc:	bl	11200 <dcngettext@plt>
   390e0:	mov	r1, fp
   390e4:	bl	10f24 <printf@plt>
   390e8:	mov	r2, r4
   390ec:	ldr	r1, [pc, #920]	; 3948c <__assert_fail@plt+0x28280>
   390f0:	mov	r0, r5
   390f4:	bl	10f90 <dcgettext@plt>
   390f8:	ldr	r1, [r9]
   390fc:	bl	111c4 <fputs@plt>
   39100:	add	r3, sp, #172	; 0xac
   39104:	ldr	fp, [pc, #732]	; 393e8 <__assert_fail@plt+0x281dc>
   39108:	str	r5, [sp, #132]	; 0x84
   3910c:	str	r3, [sp, #156]	; 0x9c
   39110:	b	39144 <__assert_fail@plt+0x27f38>
   39114:	mov	r2, #5
   39118:	ldr	r1, [pc, #880]	; 39490 <__assert_fail@plt+0x28284>
   3911c:	mov	r0, r4
   39120:	bl	10f90 <dcgettext@plt>
   39124:	bl	11014 <puts@plt>
   39128:	ldr	r3, [sp, #132]	; 0x84
   3912c:	ldr	r2, [sp, #96]	; 0x60
   39130:	add	r3, r3, #1
   39134:	cmp	r3, r2
   39138:	str	r3, [sp, #132]	; 0x84
   3913c:	add	r7, r7, #20
   39140:	bcs	392c0 <__assert_fail@plt+0x280b4>
   39144:	ldr	r3, [fp]
   39148:	mov	r1, #4
   3914c:	mov	r0, r7
   39150:	blx	r3
   39154:	mov	r1, #4
   39158:	ldr	r3, [fp]
   3915c:	mov	r5, r0
   39160:	add	r0, r7, r1
   39164:	blx	r3
   39168:	ldr	r3, [fp]
   3916c:	mov	r1, #4
   39170:	str	r0, [sp, #172]	; 0xac
   39174:	add	r0, r7, #8
   39178:	blx	r3
   3917c:	ldr	r3, [fp]
   39180:	mov	r1, #4
   39184:	str	r0, [sp, #152]	; 0x98
   39188:	add	r0, r7, #12
   3918c:	blx	r3
   39190:	ldr	r3, [fp]
   39194:	mov	r1, #4
   39198:	mov	r6, r0
   3919c:	add	r0, r7, #16
   391a0:	blx	r3
   391a4:	mov	r4, r0
   391a8:	ldr	r0, [sp, #156]	; 0x9c
   391ac:	bl	110ec <gmtime@plt>
   391b0:	ldr	r2, [pc, #648]	; 39440 <__assert_fail@plt+0x28234>
   391b4:	ldr	r1, [r0]
   391b8:	ldr	r3, [r0, #20]
   391bc:	str	r1, [sp, #16]
   391c0:	ldr	r1, [r0, #4]
   391c4:	add	r3, r3, #1888	; 0x760
   391c8:	str	r1, [sp, #12]
   391cc:	ldr	r1, [r0, #8]
   391d0:	add	r3, r3, #12
   391d4:	str	r1, [sp, #8]
   391d8:	ldr	r1, [r0, #12]
   391dc:	str	r1, [sp, #4]
   391e0:	ldr	r0, [r0, #16]
   391e4:	mov	r1, #128	; 0x80
   391e8:	add	r0, r0, #1
   391ec:	str	r0, [sp]
   391f0:	ldr	r0, [sp, #32]
   391f4:	bl	110b0 <snprintf@plt>
   391f8:	ldr	r1, [sp, #132]	; 0x84
   391fc:	ldr	r0, [pc, #576]	; 39444 <__assert_fail@plt+0x28238>
   39200:	bl	10f24 <printf@plt>
   39204:	ldr	r1, [r8, #1128]	; 0x468
   39208:	cmp	r1, #0
   3920c:	beq	3921c <__assert_fail@plt+0x28010>
   39210:	ldr	r3, [r8, #1400]	; 0x578
   39214:	cmp	r5, r3
   39218:	bcc	392a4 <__assert_fail@plt+0x28098>
   3921c:	ldr	r1, [pc, #624]	; 39494 <__assert_fail@plt+0x28288>
   39220:	mov	r2, #5
   39224:	mov	r0, #0
   39228:	bl	10f90 <dcgettext@plt>
   3922c:	mov	r1, r5
   39230:	bl	10f24 <printf@plt>
   39234:	mov	r3, r6
   39238:	ldr	r2, [sp, #152]	; 0x98
   3923c:	ldr	r1, [sp, #32]
   39240:	ldr	r0, [pc, #592]	; 39498 <__assert_fail@plt+0x2828c>
   39244:	bl	10f24 <printf@plt>
   39248:	cmp	r4, #0
   3924c:	beq	39114 <__assert_fail@plt+0x27f08>
   39250:	ldr	r5, [pc, #580]	; 3949c <__assert_fail@plt+0x28290>
   39254:	mov	r6, #1
   39258:	add	r3, r5, #48	; 0x30
   3925c:	b	39270 <__assert_fail@plt+0x28064>
   39260:	add	r5, r5, #8
   39264:	cmp	r5, r3
   39268:	beq	39290 <__assert_fail@plt+0x28084>
   3926c:	ldr	r6, [r5, #-8]
   39270:	tst	r6, r4
   39274:	beq	39260 <__assert_fail@plt+0x28054>
   39278:	ldr	r1, [r9]
   3927c:	ldr	r0, [r5, #-12]
   39280:	bl	111c4 <fputs@plt>
   39284:	eor	r4, r4, r6
   39288:	ldr	r3, [pc, #528]	; 394a0 <__assert_fail@plt+0x28294>
   3928c:	b	39260 <__assert_fail@plt+0x28054>
   39290:	cmp	r4, #0
   39294:	bne	392cc <__assert_fail@plt+0x280c0>
   39298:	ldr	r0, [pc, #516]	; 394a4 <__assert_fail@plt+0x28298>
   3929c:	bl	11014 <puts@plt>
   392a0:	b	39128 <__assert_fail@plt+0x27f1c>
   392a4:	add	r1, r1, r5
   392a8:	mov	r0, #20
   392ac:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   392b0:	b	39234 <__assert_fail@plt+0x28028>
   392b4:	ldr	r3, [sp, #140]	; 0x8c
   392b8:	str	r3, [sp, #44]	; 0x2c
   392bc:	b	37a14 <__assert_fail@plt+0x26808>
   392c0:	ldr	r0, [sp, #140]	; 0x8c
   392c4:	bl	10f54 <free@plt>
   392c8:	b	37a14 <__assert_fail@plt+0x26808>
   392cc:	mov	r1, r4
   392d0:	ldr	r0, [pc, #464]	; 394a8 <__assert_fail@plt+0x2829c>
   392d4:	bl	10f24 <printf@plt>
   392d8:	b	39298 <__assert_fail@plt+0x2808c>
   392dc:	ldr	r4, [r8, #684]	; 0x2ac
   392e0:	cmp	r4, #0
   392e4:	bne	371a8 <__assert_fail@plt+0x25f9c>
   392e8:	b	369e8 <__assert_fail@plt+0x257dc>
   392ec:	ldr	r0, [pc, #440]	; 394ac <__assert_fail@plt+0x282a0>
   392f0:	ldr	fp, [sp, #40]	; 0x28
   392f4:	bl	11014 <puts@plt>
   392f8:	b	369f8 <__assert_fail@plt+0x257ec>
   392fc:	ldr	r0, [pc, #428]	; 394b0 <__assert_fail@plt+0x282a4>
   39300:	ldr	fp, [sp, #40]	; 0x28
   39304:	bl	11014 <puts@plt>
   39308:	b	369f8 <__assert_fail@plt+0x257ec>
   3930c:	mov	r2, #5
   39310:	ldr	r1, [pc, #412]	; 394b4 <__assert_fail@plt+0x282a8>
   39314:	mov	r0, #0
   39318:	bl	10f90 <dcgettext@plt>
   3931c:	ldr	r1, [sp, #48]	; 0x30
   39320:	bl	548ac <error@@Base>
   39324:	mov	fp, #0
   39328:	b	369f8 <__assert_fail@plt+0x257ec>
   3932c:	mov	r2, #5
   39330:	ldr	r1, [pc, #384]	; 394b8 <__assert_fail@plt+0x282ac>
   39334:	mov	r0, #0
   39338:	bl	10f90 <dcgettext@plt>
   3933c:	ldr	r1, [sp, #64]	; 0x40
   39340:	bl	548ac <error@@Base>
   39344:	mov	fp, #0
   39348:	b	369f8 <__assert_fail@plt+0x257ec>
   3934c:	mov	r2, #5
   39350:	ldr	r1, [pc, #356]	; 394bc <__assert_fail@plt+0x282b0>
   39354:	mov	r0, #0
   39358:	bl	10f90 <dcgettext@plt>
   3935c:	bl	10f24 <printf@plt>
   39360:	b	37754 <__assert_fail@plt+0x26548>
   39364:	ldr	r3, [sl, #96]	; 0x60
   39368:	cmp	r3, #0
   3936c:	beq	369f4 <__assert_fail@plt+0x257e8>
   39370:	ldr	r1, [pc, #328]	; 394c0 <__assert_fail@plt+0x282b4>
   39374:	mov	r0, sl
   39378:	bl	1bd7c <__assert_fail@plt+0xab70>
   3937c:	subs	r3, r0, #0
   39380:	strne	r4, [sp, #44]	; 0x2c
   39384:	bne	37f38 <__assert_fail@plt+0x26d2c>
   39388:	b	369f4 <__assert_fail@plt+0x257e8>
   3938c:	mov	r0, #10
   39390:	bl	110c8 <putchar@plt>
   39394:	mov	r0, r7
   39398:	bl	10f54 <free@plt>
   3939c:	ldr	r0, [sp, #176]	; 0xb0
   393a0:	bl	10f54 <free@plt>
   393a4:	b	369e8 <__assert_fail@plt+0x257dc>
   393a8:	bl	18904 <__assert_fail@plt+0x76f8>
   393ac:	cmp	r0, #0
   393b0:	bne	384f0 <__assert_fail@plt+0x272e4>
   393b4:	b	369f4 <__assert_fail@plt+0x257e8>
   393b8:	mov	r0, #10
   393bc:	bl	110c8 <putchar@plt>
   393c0:	b	38468 <__assert_fail@plt+0x2725c>
   393c4:	mov	r2, #5
   393c8:	ldr	r1, [pc, #244]	; 394c4 <__assert_fail@plt+0x282b8>
   393cc:	mov	r0, #0
   393d0:	bl	10f90 <dcgettext@plt>
   393d4:	ldr	r2, [sp, #64]	; 0x40
   393d8:	ldr	r1, [sp, #80]	; 0x50
   393dc:	bl	548ac <error@@Base>
   393e0:	mov	fp, #0
   393e4:	b	369f8 <__assert_fail@plt+0x257ec>
   393e8:	andeq	lr, r9, ip, asr sp
   393ec:	andeq	ip, r6, r8, ror #20
   393f0:	andeq	ip, r6, r8, lsl #21
   393f4:	andeq	ip, r6, ip, lsr #7
   393f8:	muleq	r6, r4, sl
   393fc:	andeq	ip, r6, r8, lsr #21
   39400:			; <UNDEFINED> instruction: 0x0006cabc
   39404:	ldrdeq	ip, [r6], -r0
   39408:	ldrdeq	ip, [r6], -ip	; <UNPREDICTABLE>
   3940c:	strdeq	ip, [r6], -r8
   39410:	andeq	fp, r6, r8, ror #28
   39414:	strdeq	r3, [r6], -r8
   39418:	andeq	r5, r6, r8, lsr #14
   3941c:	andeq	ip, r6, ip, asr #23
   39420:	strdeq	ip, [r6], -ip	; <UNPREDICTABLE>
   39424:	andeq	fp, r6, ip, lsl sp
   39428:	andeq	fp, r6, ip, asr #26
   3942c:	andeq	fp, r6, r0, asr lr
   39430:	andeq	fp, r6, r4, lsr #30
   39434:	andeq	fp, r6, r8, asr pc
   39438:	andeq	fp, r6, r8, lsr #31
   3943c:			; <UNDEFINED> instruction: 0x0006bfbc
   39440:	andeq	r3, r6, ip, lsr #32
   39444:	andeq	fp, r6, r0, lsr #31
   39448:	andeq	lr, r9, r8, lsr #26
   3944c:			; <UNDEFINED> instruction: 0x0006bfb0
   39450:	andeq	r3, r6, ip
   39454:	andeq	ip, r6, r4, asr #23
   39458:	andeq	ip, r6, r4, lsr #10
   3945c:	andeq	ip, r6, r4, lsl r0
   39460:	andeq	ip, r6, ip, lsr #32
   39464:	andeq	ip, r6, ip, asr #32
   39468:	andeq	r7, r6, r0, asr pc
   3946c:	andeq	ip, r6, ip, asr r0
   39470:	andeq	ip, r6, ip, rrx
   39474:	andeq	ip, r6, ip, ror r0
   39478:	andeq	ip, r6, ip, lsl #1
   3947c:	muleq	r6, r8, r0
   39480:	strdeq	fp, [r6], -r4
   39484:	strdeq	ip, [r6], -ip	; <UNPREDICTABLE>
   39488:	andeq	ip, r6, r8, lsr #8
   3948c:	andeq	ip, r6, r4, asr r4
   39490:	andeq	ip, r6, r0, asr #9
   39494:	muleq	r6, ip, r4
   39498:	andeq	ip, r6, ip, lsr #9
   3949c:	andeq	pc, r5, ip, lsr r1	; <UNPREDICTABLE>
   394a0:	andeq	pc, r5, ip, ror #2
   394a4:	andeq	fp, r6, ip, ror #2
   394a8:	andeq	ip, r6, r8, asr #9
   394ac:	andeq	ip, r6, r4, lsr #23
   394b0:	andeq	ip, r6, ip, lsl #23
   394b4:	andeq	ip, r6, r0, asr #15
   394b8:	andeq	ip, r6, r8, lsr r9
   394bc:	andeq	fp, r6, r0, lsl #29
   394c0:	andeq	ip, r6, r0, ror #6
   394c4:	andeq	ip, r6, ip, ror #17
   394c8:	andeq	ip, r6, r8, asr #10
   394cc:	andeq	ip, r6, ip, ror #10
   394d0:	strdeq	ip, [r6], -r0
   394d4:	andeq	ip, r6, r4, asr #14
   394d8:	andeq	r7, r8, r8, ror #25
   394dc:	andeq	ip, r6, r4, lsl #15
   394e0:	andeq	ip, r6, r8, lsl r7
   394e4:	andeq	ip, r6, ip, lsl #14
   394e8:	strdeq	ip, [r6], -ip	; <UNPREDICTABLE>
   394ec:	andeq	ip, r6, r0, ror #13
   394f0:	andeq	ip, r6, ip, ror #13
   394f4:	ldrdeq	ip, [r6], -r0
   394f8:	andeq	ip, r6, r0, asr #13
   394fc:	andeq	ip, r6, ip, lsl #13
   39500:			; <UNDEFINED> instruction: 0x0006c6b4
   39504:	andeq	ip, r6, r4, ror #12
   39508:	andeq	ip, r6, r4, lsl #13
   3950c:	andeq	ip, r6, ip, lsr #13
   39510:	andeq	ip, r6, r8, ror r6
   39514:	andeq	ip, r6, r0, ror r6
   39518:	andeq	ip, r6, r0, lsr #13
   3951c:	muleq	r6, r8, r6
   39520:	andeq	ip, r6, ip, lsl r6
   39524:	andeq	ip, r6, r4, lsr r6
   39528:	andeq	ip, r6, r8, asr r6
   3952c:	andeq	ip, r6, r4, lsr #11
   39530:	andeq	ip, r6, r8, lsl #12
   39534:	andeq	r2, r6, r8, asr sp
   39538:	andeq	ip, r6, r0, asr r6
   3953c:			; <UNDEFINED> instruction: 0x0006c5b4
   39540:	andeq	ip, r6, ip, asr #11
   39544:	andeq	ip, r6, r8, asr #12
   39548:	andeq	ip, r6, r0, asr #12
   3954c:	muleq	r6, r0, r5
   39550:			; <UNDEFINED> instruction: 0x0006c9b8
   39554:	andeq	ip, r6, ip, asr #19
   39558:	ldrdeq	ip, [r6], -r8
   3955c:	andeq	ip, r6, r0, ror #19
   39560:	andeq	ip, r6, r4, ror #19
   39564:	andeq	ip, r6, ip, ror #19
   39568:	andeq	ip, r6, r4, lsr #20
   3956c:	ldrdeq	ip, [r6], -r8
   39570:	andeq	ip, r6, r0, lsr sl
   39574:	andeq	ip, r6, ip, lsl #20
   39578:	andeq	ip, r6, r8, ror #7
   3957c:	ldrdeq	ip, [r6], -r0
   39580:	andeq	ip, r6, ip, ror r9
   39584:	andeq	ip, r6, ip, lsl #6
   39588:	andeq	ip, r6, r8, lsl r3
   3958c:			; <UNDEFINED> instruction: 0xfffd0000
   39590:	andeq	ip, r6, ip, lsr #6
   39594:	strdeq	ip, [r6], -ip	; <UNPREDICTABLE>
   39598:	strdeq	ip, [r6], -r0
   3959c:	andeq	ip, r6, r0, ror #5
   395a0:	ldrdeq	ip, [r6], -r0
   395a4:	andeq	ip, r6, r4, asr #5
   395a8:			; <UNDEFINED> instruction: 0x0006c2b8
   395ac:	andeq	ip, r6, r8, lsr #5
   395b0:	muleq	r6, ip, r2
   395b4:	andeq	ip, r6, ip, lsl #5
   395b8:	andeq	ip, r6, r0, lsl #5
   395bc:	andeq	ip, r6, r4, ror #4
   395c0:	andeq	ip, r6, ip, asr #4
   395c4:	andeq	ip, r6, ip, lsr r2
   395c8:	andeq	ip, r6, ip, lsr #4
   395cc:	andeq	ip, r6, r0, lsr #4
   395d0:	andeq	ip, r6, ip, ror r1
   395d4:	andeq	ip, r6, ip, ror #2
   395d8:	andeq	ip, r6, r0, ror #2
   395dc:	andeq	ip, r6, r0, asr r1
   395e0:	andeq	ip, r6, r4, asr #2
   395e4:	andeq	ip, r6, r8, lsr r1
   395e8:	andeq	ip, r6, ip, lsr #2
   395ec:	andeq	ip, r6, ip, lsl r1
   395f0:	andeq	ip, r6, r4, lsl #2
   395f4:	strdeq	ip, [r6], -r8
   395f8:	andeq	ip, r6, r0, ror #1
   395fc:	andeq	ip, r6, r8, asr #1
   39600:	andeq	ip, r6, r8, lsr #1
   39604:	andeq	r2, r6, r8, asr #5
   39608:	strdeq	ip, [r6], -r0
   3960c:	andeq	pc, r5, r8, asr #1
   39610:	strdeq	r4, [r0], -r3
   39614:	andeq	r2, r6, r8, asr pc
   39618:	andeq	fp, r6, ip, lsr sl
   3961c:	ldrdeq	ip, [r6], -r4
   39620:			; <UNDEFINED> instruction: 0x0006c1b4
   39624:	andeq	ip, r6, r8, lsr #3
   39628:	muleq	r6, ip, r1
   3962c:	andeq	ip, r6, ip, lsr #7
   39630:	andeq	ip, r6, r0, asr #7
   39634:	ldrdeq	ip, [r6], -r0
   39638:	ldrdeq	ip, [r6], -r8
   3963c:	andeq	ip, r6, r0, ror #7
   39640:	andeq	lr, r9, ip, asr sp
   39644:	andeq	ip, r6, ip, lsl #15
   39648:	muleq	r6, r4, r9
   3964c:	strdeq	ip, [r6], -r4
   39650:	strheq	ip, [r6], -r0
   39654:	andeq	r5, r6, r4, asr r4
   39658:	strdeq	fp, [r9], -r0
   3965c:	andeq	ip, r6, r0, ror r7
   39660:	andeq	sl, r9, ip, lsr #8
   39664:	andeq	r3, r6, ip, asr #14
   39668:	andeq	ip, r6, r0, lsl r2
   3966c:	mov	r3, #5
   39670:	str	r3, [sp]
   39674:	ldr	r2, [pc, #-436]	; 394c8 <__assert_fail@plt+0x282bc>
   39678:	mov	r3, r5
   3967c:	ldr	r1, [pc, #-440]	; 394cc <__assert_fail@plt+0x282c0>
   39680:	mov	r0, #0
   39684:	str	r9, [sp, #136]	; 0x88
   39688:	bl	11200 <dcngettext@plt>
   3968c:	mov	r2, r6
   39690:	add	r1, sl, #108	; 0x6c
   39694:	mov	r7, r9
   39698:	mov	r4, r0
   3969c:	add	r0, sl, #104	; 0x68
   396a0:	bl	16c64 <__assert_fail@plt+0x5a58>
   396a4:	mov	r2, r5
   396a8:	mov	r1, r0
   396ac:	mov	r0, r4
   396b0:	bl	10f24 <printf@plt>
   396b4:	ldr	r3, [sp, #96]	; 0x60
   396b8:	add	r9, r3, #8
   396bc:	add	r3, r3, r7, lsl #3
   396c0:	str	r3, [sp, #140]	; 0x8c
   396c4:	mov	r3, #0
   396c8:	str	r3, [sp, #96]	; 0x60
   396cc:	ldrb	r1, [r9, #-8]
   396d0:	cmp	r1, #10
   396d4:	ldrls	pc, [pc, r1, lsl #2]
   396d8:	b	3a5a4 <__assert_fail@plt+0x29398>
   396dc:	andeq	r9, r3, r0, lsl ip
   396e0:	andeq	r9, r3, ip, lsr #20
   396e4:	muleq	r3, ip, r9
   396e8:	andeq	r9, r3, r4, asr #17
   396ec:	andeq	r9, r3, r0, ror r8
   396f0:	andeq	r9, r3, r4, asr r8
   396f4:	andeq	r9, r3, r8, lsr r8
   396f8:	strdeq	r9, [r3], -r8
   396fc:			; <UNDEFINED> instruction: 0x000397b4
   39700:	muleq	r3, r8, r7
   39704:	andeq	r9, r3, r0, lsr #14
   39708:	mov	r2, #5
   3970c:	ldr	r1, [pc, #-580]	; 394d0 <__assert_fail@plt+0x282c4>
   39710:	bl	10f90 <dcgettext@plt>
   39714:	ldr	fp, [sp, #96]	; 0x60
   39718:	bl	548ac <error@@Base>
   3971c:	b	369f8 <__assert_fail@plt+0x257ec>
   39720:	ldr	r1, [r9, #-4]
   39724:	ldr	r0, [pc, #-600]	; 394d4 <__assert_fail@plt+0x282c8>
   39728:	ldr	r5, [pc, #-208]	; 39660 <__assert_fail@plt+0x28454>
   3972c:	lsr	r2, r1, #16
   39730:	uxth	r1, r1
   39734:	bl	10f24 <printf@plt>
   39738:	ldrb	r3, [r9, #-7]
   3973c:	cmp	r3, #8
   39740:	bls	37b48 <__assert_fail@plt+0x2693c>
   39744:	ldr	r3, [sp, #96]	; 0x60
   39748:	ldr	r2, [sp, #132]	; 0x84
   3974c:	add	r6, r3, #8
   39750:	add	r6, r2, r6
   39754:	add	r4, r2, r3
   39758:	b	39774 <__assert_fail@plt+0x28568>
   3975c:	mov	r0, r1
   39760:	bl	110c8 <putchar@plt>
   39764:	ldrb	r2, [r9, #-7]
   39768:	sub	r3, r6, r4
   3976c:	cmp	r2, r3
   39770:	bls	37b48 <__assert_fail@plt+0x2693c>
   39774:	ldrb	r1, [r6], #1
   39778:	ldr	r2, [pc, #-680]	; 394d8 <__assert_fail@plt+0x282cc>
   3977c:	lsl	r3, r1, #1
   39780:	ldrh	r3, [r2, r3]
   39784:	tst	r3, #16
   39788:	bne	3975c <__assert_fail@plt+0x28550>
   3978c:	ldr	r0, [pc, #-696]	; 394dc <__assert_fail@plt+0x282d0>
   39790:	bl	10f24 <printf@plt>
   39794:	b	39764 <__assert_fail@plt+0x28558>
   39798:	ldr	r1, [r9, #-4]
   3979c:	ldr	r0, [pc, #-708]	; 394e0 <__assert_fail@plt+0x282d4>
   397a0:	ldr	r5, [pc, #-328]	; 39660 <__assert_fail@plt+0x28454>
   397a4:	lsr	r2, r1, #16
   397a8:	uxth	r1, r1
   397ac:	bl	10f24 <printf@plt>
   397b0:	b	39738 <__assert_fail@plt+0x2852c>
   397b4:	ldr	r5, [pc, #-348]	; 39660 <__assert_fail@plt+0x28454>
   397b8:	mov	r2, #11
   397bc:	mov	r1, #1
   397c0:	ldr	r3, [r5]
   397c4:	ldr	r0, [pc, #-744]	; 394e4 <__assert_fail@plt+0x282d8>
   397c8:	bl	10fcc <fwrite@plt>
   397cc:	ldr	r3, [r9, #-4]
   397d0:	tst	r3, #1
   397d4:	bne	3981c <__assert_fail@plt+0x28610>
   397d8:	tst	r3, #2
   397dc:	beq	39738 <__assert_fail@plt+0x2852c>
   397e0:	ldr	r3, [r5]
   397e4:	mov	r2, #13
   397e8:	mov	r1, #1
   397ec:	ldr	r0, [pc, #-780]	; 394e8 <__assert_fail@plt+0x282dc>
   397f0:	bl	10fcc <fwrite@plt>
   397f4:	b	39738 <__assert_fail@plt+0x2852c>
   397f8:	ldr	r5, [pc, #-416]	; 39660 <__assert_fail@plt+0x28454>
   397fc:	mov	r2, #11
   39800:	mov	r1, #1
   39804:	ldr	r3, [r5]
   39808:	ldr	r0, [pc, #-804]	; 394ec <__assert_fail@plt+0x282e0>
   3980c:	bl	10fcc <fwrite@plt>
   39810:	ldr	r3, [r9, #-4]
   39814:	tst	r3, #1
   39818:	beq	397d8 <__assert_fail@plt+0x285cc>
   3981c:	ldr	r3, [r5]
   39820:	mov	r2, #15
   39824:	mov	r1, #1
   39828:	ldr	r0, [pc, #-832]	; 394f0 <__assert_fail@plt+0x282e4>
   3982c:	bl	10fcc <fwrite@plt>
   39830:	ldr	r3, [r9, #-4]
   39834:	b	397d8 <__assert_fail@plt+0x285cc>
   39838:	ldr	r5, [pc, #-480]	; 39660 <__assert_fail@plt+0x28454>
   3983c:	mov	r2, #12
   39840:	mov	r1, #1
   39844:	ldr	r3, [r5]
   39848:	ldr	r0, [pc, #-860]	; 394f4 <__assert_fail@plt+0x282e8>
   3984c:	bl	10fcc <fwrite@plt>
   39850:	b	39738 <__assert_fail@plt+0x2852c>
   39854:	ldr	r5, [pc, #-508]	; 39660 <__assert_fail@plt+0x28454>
   39858:	mov	r2, #12
   3985c:	mov	r1, #1
   39860:	ldr	r3, [r5]
   39864:	ldr	r0, [pc, #-884]	; 394f8 <__assert_fail@plt+0x282ec>
   39868:	bl	10fcc <fwrite@plt>
   3986c:	b	39738 <__assert_fail@plt+0x2852c>
   39870:	ldr	r5, [pc, #-536]	; 39660 <__assert_fail@plt+0x28454>
   39874:	mov	r2, #11
   39878:	mov	r1, #1
   3987c:	ldr	r3, [r5]
   39880:	ldr	r0, [pc, #-908]	; 394fc <__assert_fail@plt+0x282f0>
   39884:	bl	10fcc <fwrite@plt>
   39888:	ldr	r3, [r9, #-4]
   3988c:	tst	r3, #1
   39890:	bne	39980 <__assert_fail@plt+0x28774>
   39894:	tst	r3, #2
   39898:	bne	39964 <__assert_fail@plt+0x28758>
   3989c:	tst	r3, #4
   398a0:	bne	39910 <__assert_fail@plt+0x28704>
   398a4:	tst	r3, #8
   398a8:	beq	39738 <__assert_fail@plt+0x2852c>
   398ac:	ldr	r3, [r5]
   398b0:	mov	r2, #8
   398b4:	mov	r1, #1
   398b8:	ldr	r0, [pc, #-960]	; 39500 <__assert_fail@plt+0x282f4>
   398bc:	bl	10fcc <fwrite@plt>
   398c0:	b	39738 <__assert_fail@plt+0x2852c>
   398c4:	ldr	r5, [pc, #-620]	; 39660 <__assert_fail@plt+0x28454>
   398c8:	mov	r2, #11
   398cc:	mov	r1, #1
   398d0:	ldr	r3, [r5]
   398d4:	ldr	r0, [pc, #-984]	; 39504 <__assert_fail@plt+0x282f8>
   398d8:	bl	10fcc <fwrite@plt>
   398dc:	ldr	r3, [r9, #-4]
   398e0:	tst	r3, #1
   398e4:	bne	39948 <__assert_fail@plt+0x2873c>
   398e8:	tst	r3, #2
   398ec:	bne	3992c <__assert_fail@plt+0x28720>
   398f0:	tst	r3, #4
   398f4:	beq	39738 <__assert_fail@plt+0x2852c>
   398f8:	ldr	r3, [r5]
   398fc:	mov	r2, #7
   39900:	mov	r1, #1
   39904:	ldr	r0, [pc, #-1028]	; 39508 <__assert_fail@plt+0x282fc>
   39908:	bl	10fcc <fwrite@plt>
   3990c:	b	39738 <__assert_fail@plt+0x2852c>
   39910:	ldr	r3, [r5]
   39914:	mov	r2, #7
   39918:	mov	r1, #1
   3991c:	ldr	r0, [pc, #-1048]	; 3950c <__assert_fail@plt+0x28300>
   39920:	bl	10fcc <fwrite@plt>
   39924:	ldr	r3, [r9, #-4]
   39928:	b	398a4 <__assert_fail@plt+0x28698>
   3992c:	ldr	r3, [r5]
   39930:	mov	r2, #8
   39934:	mov	r1, #1
   39938:	ldr	r0, [pc, #-1072]	; 39510 <__assert_fail@plt+0x28304>
   3993c:	bl	10fcc <fwrite@plt>
   39940:	ldr	r3, [r9, #-4]
   39944:	b	398f0 <__assert_fail@plt+0x286e4>
   39948:	ldr	r3, [r5]
   3994c:	mov	r2, #7
   39950:	mov	r1, #1
   39954:	ldr	r0, [pc, #-1096]	; 39514 <__assert_fail@plt+0x28308>
   39958:	bl	10fcc <fwrite@plt>
   3995c:	ldr	r3, [r9, #-4]
   39960:	b	398e8 <__assert_fail@plt+0x286dc>
   39964:	ldr	r3, [r5]
   39968:	mov	r2, #10
   3996c:	mov	r1, #1
   39970:	ldr	r0, [pc, #-1120]	; 39518 <__assert_fail@plt+0x2830c>
   39974:	bl	10fcc <fwrite@plt>
   39978:	ldr	r3, [r9, #-4]
   3997c:	b	3989c <__assert_fail@plt+0x28690>
   39980:	ldr	r3, [r5]
   39984:	mov	r2, #7
   39988:	mov	r1, #1
   3998c:	ldr	r0, [pc, #-1144]	; 3951c <__assert_fail@plt+0x28310>
   39990:	bl	10fcc <fwrite@plt>
   39994:	ldr	r3, [r9, #-4]
   39998:	b	39894 <__assert_fail@plt+0x28688>
   3999c:	ldr	r5, [pc, #-836]	; 39660 <__assert_fail@plt+0x28454>
   399a0:	mov	r2, #20
   399a4:	mov	r1, #1
   399a8:	ldr	r3, [r5]
   399ac:	ldr	r0, [pc, #-1172]	; 39520 <__assert_fail@plt+0x28314>
   399b0:	bl	10fcc <fwrite@plt>
   399b4:	ldr	r0, [r9, #-4]
   399b8:	and	r0, r0, #31
   399bc:	bl	28eb8 <__assert_fail@plt+0x17cac>
   399c0:	ldr	r3, [r5]
   399c4:	mov	r2, #10
   399c8:	mov	r1, #1
   399cc:	ldr	r0, [pc, #-1200]	; 39524 <__assert_fail@plt+0x28318>
   399d0:	bl	10fcc <fwrite@plt>
   399d4:	ldr	r0, [r9, #-4]
   399d8:	lsr	r0, r0, #8
   399dc:	and	r0, r0, #31
   399e0:	bl	28eb8 <__assert_fail@plt+0x17cac>
   399e4:	ldr	r1, [r5]
   399e8:	mov	r0, #41	; 0x29
   399ec:	bl	11140 <fputc@plt>
   399f0:	ldr	r3, [r9, #-4]
   399f4:	tst	r3, #65536	; 0x10000
   399f8:	bne	39bf4 <__assert_fail@plt+0x289e8>
   399fc:	tst	r3, #131072	; 0x20000
   39a00:	bne	39bd8 <__assert_fail@plt+0x289cc>
   39a04:	tst	r3, #262144	; 0x40000
   39a08:	bne	39b28 <__assert_fail@plt+0x2891c>
   39a0c:	tst	r3, #524288	; 0x80000
   39a10:	beq	39738 <__assert_fail@plt+0x2852c>
   39a14:	ldr	r3, [r5]
   39a18:	mov	r2, #8
   39a1c:	mov	r1, #1
   39a20:	ldr	r0, [pc, #-1280]	; 39528 <__assert_fail@plt+0x2831c>
   39a24:	bl	10fcc <fwrite@plt>
   39a28:	b	39738 <__assert_fail@plt+0x2852c>
   39a2c:	ldr	r0, [pc, #-1288]	; 3952c <__assert_fail@plt+0x28320>
   39a30:	bl	10f24 <printf@plt>
   39a34:	ldrh	r2, [sl, #66]	; 0x42
   39a38:	ldr	r3, [sp, #140]	; 0x8c
   39a3c:	mvn	r0, #7
   39a40:	cmp	r2, #8
   39a44:	ldr	r2, [sp, #136]	; 0x88
   39a48:	add	r3, r3, #8
   39a4c:	add	r4, r9, #8
   39a50:	mla	r0, r0, r2, r3
   39a54:	add	r7, r9, #12
   39a58:	add	r6, r9, #16
   39a5c:	add	r5, r9, #20
   39a60:	ldr	r3, [fp]
   39a64:	mov	r1, #4
   39a68:	beq	39b44 <__assert_fail@plt+0x28938>
   39a6c:	blx	r3
   39a70:	ldr	r2, [fp]
   39a74:	mov	r1, #4
   39a78:	str	r0, [sp, #164]	; 0xa4
   39a7c:	mov	r0, r4
   39a80:	blx	r2
   39a84:	ldr	r2, [fp]
   39a88:	mov	r1, #4
   39a8c:	str	r0, [sp, #144]	; 0x90
   39a90:	mov	r0, r7
   39a94:	blx	r2
   39a98:	ldr	r2, [fp]
   39a9c:	mov	r1, #4
   39aa0:	str	r0, [sp, #152]	; 0x98
   39aa4:	mov	r0, r6
   39aa8:	blx	r2
   39aac:	ldr	r2, [fp]
   39ab0:	mov	r1, #4
   39ab4:	str	r0, [sp, #156]	; 0x9c
   39ab8:	mov	r0, r5
   39abc:	blx	r2
   39ac0:	ldr	r2, [fp]
   39ac4:	mov	r1, #8
   39ac8:	ldr	r5, [pc, #-1136]	; 39660 <__assert_fail@plt+0x28454>
   39acc:	str	r0, [sp, #160]	; 0xa0
   39ad0:	add	r0, r9, #24
   39ad4:	blx	r2
   39ad8:	ldr	r3, [sp, #164]	; 0xa4
   39adc:	mov	r6, r0
   39ae0:	mov	r7, r1
   39ae4:	ldr	r0, [pc, #-1468]	; 39530 <__assert_fail@plt+0x28324>
   39ae8:	mov	r1, r3
   39aec:	bl	10f24 <printf@plt>
   39af0:	mov	r2, r6
   39af4:	mov	r3, r7
   39af8:	ldr	r1, [pc, #-1484]	; 39534 <__assert_fail@plt+0x28328>
   39afc:	ldr	r0, [r5]
   39b00:	bl	11098 <fprintf@plt>
   39b04:	mov	r0, #10
   39b08:	bl	110c8 <putchar@plt>
   39b0c:	ldr	ip, [sp, #160]	; 0xa0
   39b10:	ldrd	r2, [sp, #152]	; 0x98
   39b14:	str	ip, [sp]
   39b18:	ldr	r1, [sp, #144]	; 0x90
   39b1c:	ldr	r0, [pc, #-1508]	; 39540 <__assert_fail@plt+0x28334>
   39b20:	bl	10f24 <printf@plt>
   39b24:	b	37b68 <__assert_fail@plt+0x2695c>
   39b28:	ldr	r3, [r5]
   39b2c:	mov	r2, #7
   39b30:	mov	r1, #1
   39b34:	ldr	r0, [pc, #-1540]	; 39538 <__assert_fail@plt+0x2832c>
   39b38:	bl	10fcc <fwrite@plt>
   39b3c:	ldr	r3, [r9, #-4]
   39b40:	b	39a0c <__assert_fail@plt+0x28800>
   39b44:	blx	r3
   39b48:	ldr	r3, [fp]
   39b4c:	mov	r1, #4
   39b50:	str	r0, [sp, #144]	; 0x90
   39b54:	add	r0, r9, #4
   39b58:	blx	r3
   39b5c:	ldr	r3, [fp]
   39b60:	mov	r1, #4
   39b64:	str	r0, [sp, #152]	; 0x98
   39b68:	mov	r0, r4
   39b6c:	blx	r3
   39b70:	ldr	r3, [fp]
   39b74:	mov	r1, #4
   39b78:	mov	r9, r0
   39b7c:	mov	r0, r7
   39b80:	blx	r3
   39b84:	ldr	r3, [fp]
   39b88:	mov	r1, #4
   39b8c:	mov	r7, r0
   39b90:	mov	r0, r6
   39b94:	blx	r3
   39b98:	ldr	r3, [fp]
   39b9c:	mov	r1, #4
   39ba0:	mov	r6, r0
   39ba4:	mov	r0, r5
   39ba8:	blx	r3
   39bac:	ldr	r1, [sp, #144]	; 0x90
   39bb0:	mov	r2, r0
   39bb4:	ldr	r0, [pc, #-1664]	; 3953c <__assert_fail@plt+0x28330>
   39bb8:	bl	10f24 <printf@plt>
   39bbc:	str	r6, [sp]
   39bc0:	mov	r3, r7
   39bc4:	mov	r2, r9
   39bc8:	ldr	r1, [sp, #152]	; 0x98
   39bcc:	ldr	r0, [pc, #-1684]	; 39540 <__assert_fail@plt+0x28334>
   39bd0:	bl	10f24 <printf@plt>
   39bd4:	b	37b68 <__assert_fail@plt+0x2695c>
   39bd8:	ldr	r3, [r5]
   39bdc:	mov	r2, #4
   39be0:	mov	r1, #1
   39be4:	ldr	r0, [pc, #-1704]	; 39544 <__assert_fail@plt+0x28338>
   39be8:	bl	10fcc <fwrite@plt>
   39bec:	ldr	r3, [r9, #-4]
   39bf0:	b	39a04 <__assert_fail@plt+0x287f8>
   39bf4:	ldr	r3, [r5]
   39bf8:	mov	r2, #6
   39bfc:	mov	r1, #1
   39c00:	ldr	r0, [pc, #-1728]	; 39548 <__assert_fail@plt+0x2833c>
   39c04:	bl	10fcc <fwrite@plt>
   39c08:	ldr	r3, [r9, #-4]
   39c0c:	b	399fc <__assert_fail@plt+0x287f0>
   39c10:	ldr	r2, [r9, #-4]
   39c14:	ldrh	r1, [r9, #-6]
   39c18:	ldr	r0, [pc, #-1748]	; 3954c <__assert_fail@plt+0x28340>
   39c1c:	bl	10f24 <printf@plt>
   39c20:	ldr	r5, [pc, #-1480]	; 39660 <__assert_fail@plt+0x28454>
   39c24:	b	39738 <__assert_fail@plt+0x2852c>
   39c28:	mov	r2, #5
   39c2c:	ldr	r1, [pc, #-1764]	; 39550 <__assert_fail@plt+0x28344>
   39c30:	mov	r0, #0
   39c34:	bl	10f90 <dcgettext@plt>
   39c38:	bl	10f24 <printf@plt>
   39c3c:	mov	r2, #5
   39c40:	ldr	r1, [pc, #-1740]	; 3957c <__assert_fail@plt+0x28370>
   39c44:	mov	r0, #0
   39c48:	bl	10f90 <dcgettext@plt>
   39c4c:	mov	r2, #5
   39c50:	ldr	r1, [pc, #-1568]	; 39638 <__assert_fail@plt+0x2842c>
   39c54:	str	r0, [sp, #96]	; 0x60
   39c58:	mov	r0, #0
   39c5c:	bl	10f90 <dcgettext@plt>
   39c60:	mov	r2, #5
   39c64:	ldr	r1, [pc, #-1772]	; 39580 <__assert_fail@plt+0x28374>
   39c68:	str	r0, [sp, #120]	; 0x78
   39c6c:	mov	r0, #0
   39c70:	bl	10f90 <dcgettext@plt>
   39c74:	mov	r2, #5
   39c78:	ldr	r1, [pc, #-1836]	; 39554 <__assert_fail@plt+0x28348>
   39c7c:	mov	r6, r0
   39c80:	mov	r0, #0
   39c84:	bl	10f90 <dcgettext@plt>
   39c88:	mov	r2, #5
   39c8c:	ldr	r1, [pc, #-1852]	; 39558 <__assert_fail@plt+0x2834c>
   39c90:	str	r0, [sp, #112]	; 0x70
   39c94:	mov	r0, #0
   39c98:	bl	10f90 <dcgettext@plt>
   39c9c:	mov	r2, #5
   39ca0:	ldr	r1, [pc, #-1868]	; 3955c <__assert_fail@plt+0x28350>
   39ca4:	str	r0, [sp, #116]	; 0x74
   39ca8:	mov	r0, #0
   39cac:	bl	10f90 <dcgettext@plt>
   39cb0:	mov	r2, #5
   39cb4:	ldr	r1, [pc, #-1884]	; 39560 <__assert_fail@plt+0x28354>
   39cb8:	mov	r7, r0
   39cbc:	mov	r0, #0
   39cc0:	bl	10f90 <dcgettext@plt>
   39cc4:	ldr	r3, [sp, #116]	; 0x74
   39cc8:	mov	r1, r4
   39ccc:	str	r3, [sp, #16]
   39cd0:	ldr	r3, [sp, #112]	; 0x70
   39cd4:	str	r6, [sp, #4]
   39cd8:	str	r7, [sp, #20]
   39cdc:	str	r3, [sp, #12]
   39ce0:	str	r4, [sp, #8]
   39ce4:	ldr	r3, [sp, #120]	; 0x78
   39ce8:	str	r4, [sp]
   39cec:	ldr	r2, [sp, #96]	; 0x60
   39cf0:	ldrd	r6, [sp, #80]	; 0x50
   39cf4:	mov	r4, r6
   39cf8:	str	r0, [sp, #24]
   39cfc:	ldr	r0, [pc, #-1952]	; 39564 <__assert_fail@plt+0x28358>
   39d00:	bl	10f24 <printf@plt>
   39d04:	ldr	r3, [r8]
   39d08:	mvn	r0, #5
   39d0c:	cmp	r3, #0
   39d10:	movne	r1, #52	; 0x34
   39d14:	moveq	r1, #132	; 0x84
   39d18:	mov	r3, #0
   39d1c:	mla	r9, r0, r9, r1
   39d20:	ldrd	r0, [sp, #64]	; 0x40
   39d24:	cmp	r3, r1
   39d28:	cmpeq	r6, r0
   39d2c:	sub	r3, r9, #1
   39d30:	str	r3, [sp, #80]	; 0x50
   39d34:	bcs	39e64 <__assert_fail@plt+0x28c58>
   39d38:	ldrd	r6, [sp, #48]	; 0x30
   39d3c:	b	39df4 <__assert_fail@plt+0x28be8>
   39d40:	lsl	r3, r4, #5
   39d44:	add	r9, r0, r3
   39d48:	mov	r2, #6
   39d4c:	ldrd	r0, [r0, r3]
   39d50:	bl	14244 <__assert_fail@plt+0x3038>
   39d54:	ldrb	r2, [r9, #20]
   39d58:	add	r1, sl, #66	; 0x42
   39d5c:	add	r0, sl, #23
   39d60:	and	r2, r2, #15
   39d64:	bl	1a2ec <__assert_fail@plt+0x90e0>
   39d68:	ldr	r1, [r9, #24]
   39d6c:	str	r0, [sp, #48]	; 0x30
   39d70:	mov	r0, sl
   39d74:	bl	16fd8 <__assert_fail@plt+0x5dcc>
   39d78:	ldr	r3, [sp, #48]	; 0x30
   39d7c:	mov	r1, r3
   39d80:	mov	r2, r0
   39d84:	ldr	r0, [pc, #-2084]	; 39568 <__assert_fail@plt+0x2835c>
   39d88:	bl	10f24 <printf@plt>
   39d8c:	ldr	r1, [r8, #1128]	; 0x468
   39d90:	cmp	r1, #0
   39d94:	beq	39da8 <__assert_fail@plt+0x28b9c>
   39d98:	ldr	r3, [r9, #16]
   39d9c:	ldr	r2, [r8, #1400]	; 0x578
   39da0:	cmp	r3, r2
   39da4:	bcc	39e70 <__assert_fail@plt+0x28c64>
   39da8:	ldr	r1, [pc, #-2116]	; 3956c <__assert_fail@plt+0x28360>
   39dac:	mov	r2, #5
   39db0:	mov	r0, #0
   39db4:	bl	10f90 <dcgettext@plt>
   39db8:	ldr	r1, [r9, #16]
   39dbc:	bl	10f24 <printf@plt>
   39dc0:	mov	r0, #10
   39dc4:	bl	110c8 <putchar@plt>
   39dc8:	mvn	r3, #0
   39dcc:	mvn	r2, #0
   39dd0:	cmp	r7, r3
   39dd4:	cmpeq	r6, r2
   39dd8:	beq	39e64 <__assert_fail@plt+0x28c58>
   39ddc:	ldrd	r0, [sp, #64]	; 0x40
   39de0:	mov	r3, #0
   39de4:	add	r4, r4, #1
   39de8:	cmp	r3, r1
   39dec:	cmpeq	r4, r0
   39df0:	bcs	39e64 <__assert_fail@plt+0x28c58>
   39df4:	strd	r6, [sp]
   39df8:	ldr	r2, [sp, #60]	; 0x3c
   39dfc:	ldr	r3, [sp, #56]	; 0x38
   39e00:	str	fp, [sp, #8]
   39e04:	mov	r0, r5
   39e08:	bl	14910 <__assert_fail@plt+0x3704>
   39e0c:	mov	r6, r0
   39e10:	mov	r0, #32
   39e14:	mov	r7, r1
   39e18:	bl	110c8 <putchar@plt>
   39e1c:	ldr	r0, [r8, #1124]	; 0x464
   39e20:	cmp	r0, #0
   39e24:	beq	39e50 <__assert_fail@plt+0x28c44>
   39e28:	ldr	r3, [r8, #1396]	; 0x574
   39e2c:	cmp	r3, r4
   39e30:	bhi	39d40 <__assert_fail@plt+0x28b34>
   39e34:	mov	r2, #5
   39e38:	ldr	r1, [pc, #-2256]	; 39570 <__assert_fail@plt+0x28364>
   39e3c:	mov	r0, #0
   39e40:	bl	10f90 <dcgettext@plt>
   39e44:	mov	r1, r4
   39e48:	bl	10f24 <printf@plt>
   39e4c:	b	39dc0 <__assert_fail@plt+0x28bb4>
   39e50:	mov	r2, #5
   39e54:	ldr	r1, [pc, #-2280]	; 39574 <__assert_fail@plt+0x28368>
   39e58:	bl	10f90 <dcgettext@plt>
   39e5c:	bl	10f24 <printf@plt>
   39e60:	b	39dc0 <__assert_fail@plt+0x28bb4>
   39e64:	mov	r0, #10
   39e68:	bl	110c8 <putchar@plt>
   39e6c:	b	38460 <__assert_fail@plt+0x27254>
   39e70:	add	r1, r1, r3
   39e74:	ldr	r0, [sp, #80]	; 0x50
   39e78:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   39e7c:	b	39dc0 <__assert_fail@plt+0x28bb4>
   39e80:	mov	r2, #5
   39e84:	ldr	r1, [pc, #-2324]	; 39578 <__assert_fail@plt+0x2836c>
   39e88:	mov	r0, #0
   39e8c:	bl	10f90 <dcgettext@plt>
   39e90:	bl	10f24 <printf@plt>
   39e94:	mov	r2, #5
   39e98:	ldr	r1, [pc, #-2340]	; 3957c <__assert_fail@plt+0x28370>
   39e9c:	mov	r0, #0
   39ea0:	bl	10f90 <dcgettext@plt>
   39ea4:	mov	r2, #5
   39ea8:	ldr	r1, [pc, #-2168]	; 39638 <__assert_fail@plt+0x2842c>
   39eac:	mov	r6, r0
   39eb0:	mov	r0, #0
   39eb4:	bl	10f90 <dcgettext@plt>
   39eb8:	mov	r2, #5
   39ebc:	ldr	r1, [pc, #-2372]	; 39580 <__assert_fail@plt+0x28374>
   39ec0:	str	r0, [sp, #96]	; 0x60
   39ec4:	mov	r0, #0
   39ec8:	bl	10f90 <dcgettext@plt>
   39ecc:	mov	r2, r6
   39ed0:	ldr	r3, [sp, #96]	; 0x60
   39ed4:	str	r4, [sp]
   39ed8:	mov	r1, r4
   39edc:	str	r0, [sp, #4]
   39ee0:	ldr	r0, [pc, #-2232]	; 39630 <__assert_fail@plt+0x28424>
   39ee4:	bl	10f24 <printf@plt>
   39ee8:	ldrd	r6, [sp, #48]	; 0x30
   39eec:	strd	r6, [sp]
   39ef0:	ldr	r2, [sp, #60]	; 0x3c
   39ef4:	ldr	r3, [sp, #56]	; 0x38
   39ef8:	str	fp, [sp, #8]
   39efc:	mov	r0, r5
   39f00:	bl	14910 <__assert_fail@plt+0x3704>
   39f04:	mov	r6, r0
   39f08:	mov	r0, #10
   39f0c:	mov	r7, r1
   39f10:	bl	110c8 <putchar@plt>
   39f14:	mvn	r3, #0
   39f18:	mvn	r2, #0
   39f1c:	cmp	r7, r3
   39f20:	cmpeq	r6, r2
   39f24:	beq	38460 <__assert_fail@plt+0x27254>
   39f28:	ldrd	r2, [sp, #120]	; 0x78
   39f2c:	cmp	r3, r7
   39f30:	cmpeq	r2, r6
   39f34:	bhi	39eec <__assert_fail@plt+0x28ce0>
   39f38:	mov	r0, #10
   39f3c:	strd	r6, [sp, #48]	; 0x30
   39f40:	bl	110c8 <putchar@plt>
   39f44:	b	3844c <__assert_fail@plt+0x27240>
   39f48:	cmp	r5, #0
   39f4c:	beq	38468 <__assert_fail@plt+0x2725c>
   39f50:	b	38460 <__assert_fail@plt+0x27254>
   39f54:	add	r1, r1, r3
   39f58:	ldr	r0, [sp, #48]	; 0x30
   39f5c:	bl	14dd8 <__assert_fail@plt+0x3bcc>
   39f60:	b	38754 <__assert_fail@plt+0x27548>
   39f64:	mov	r5, #0
   39f68:	b	36408 <__assert_fail@plt+0x251fc>
   39f6c:	ldr	r0, [sp, #56]	; 0x38
   39f70:	bl	10f54 <free@plt>
   39f74:	b	370ac <__assert_fail@plt+0x25ea0>
   39f78:	ldr	r3, [r9]
   39f7c:	mov	r2, #9
   39f80:	mov	r1, #1
   39f84:	ldr	r0, [pc, #-2568]	; 39584 <__assert_fail@plt+0x28378>
   39f88:	bl	10fcc <fwrite@plt>
   39f8c:	cmp	r5, #0
   39f90:	beq	39fa8 <__assert_fail@plt+0x28d9c>
   39f94:	ldr	r3, [r9]
   39f98:	mov	r2, #10
   39f9c:	mov	r1, #1
   39fa0:	ldr	r0, [pc, #-2592]	; 39588 <__assert_fail@plt+0x2837c>
   39fa4:	bl	10fcc <fwrite@plt>
   39fa8:	ldr	r5, [pc, #-2596]	; 3958c <__assert_fail@plt+0x28380>
   39fac:	and	r5, r5, r4
   39fb0:	cmp	r5, #0
   39fb4:	beq	37ee0 <__assert_fail@plt+0x26cd4>
   39fb8:	mov	r2, #5
   39fbc:	ldr	r1, [pc, #-2400]	; 39664 <__assert_fail@plt+0x28458>
   39fc0:	mov	r0, #0
   39fc4:	ldr	r4, [r9]
   39fc8:	bl	10f90 <dcgettext@plt>
   39fcc:	mov	r3, r5
   39fd0:	ldr	r1, [pc, #-2632]	; 39590 <__assert_fail@plt+0x28384>
   39fd4:	mov	r2, r0
   39fd8:	mov	r0, r4
   39fdc:	bl	11098 <fprintf@plt>
   39fe0:	b	37ee0 <__assert_fail@plt+0x26cd4>
   39fe4:	ldr	r3, [r9]
   39fe8:	mov	r2, #14
   39fec:	mov	r1, #1
   39ff0:	ldr	r0, [pc, #-2660]	; 39594 <__assert_fail@plt+0x28388>
   39ff4:	bl	10fcc <fwrite@plt>
   39ff8:	b	37ea0 <__assert_fail@plt+0x26c94>
   39ffc:	ldr	r3, [r9]
   3a000:	mov	r2, #9
   3a004:	mov	r1, #1
   3a008:	ldr	r0, [pc, #-2680]	; 39598 <__assert_fail@plt+0x2838c>
   3a00c:	bl	10fcc <fwrite@plt>
   3a010:	b	37e98 <__assert_fail@plt+0x26c8c>
   3a014:	ldr	r3, [r9]
   3a018:	mov	r2, #15
   3a01c:	mov	r1, #1
   3a020:	ldr	r0, [pc, #-2700]	; 3959c <__assert_fail@plt+0x28390>
   3a024:	bl	10fcc <fwrite@plt>
   3a028:	b	37e90 <__assert_fail@plt+0x26c84>
   3a02c:	ldr	r3, [r9]
   3a030:	mov	r2, #12
   3a034:	mov	r1, #1
   3a038:	ldr	r0, [pc, #-2720]	; 395a0 <__assert_fail@plt+0x28394>
   3a03c:	bl	10fcc <fwrite@plt>
   3a040:	b	37e88 <__assert_fail@plt+0x26c7c>
   3a044:	ldr	r3, [r9]
   3a048:	mov	r2, #9
   3a04c:	mov	r1, #1
   3a050:	ldr	r0, [pc, #-2740]	; 395a4 <__assert_fail@plt+0x28398>
   3a054:	bl	10fcc <fwrite@plt>
   3a058:	b	37e80 <__assert_fail@plt+0x26c74>
   3a05c:	ldr	r3, [r9]
   3a060:	mov	r2, #8
   3a064:	mov	r1, #1
   3a068:	ldr	r0, [pc, #-2760]	; 395a8 <__assert_fail@plt+0x2839c>
   3a06c:	bl	10fcc <fwrite@plt>
   3a070:	b	37e78 <__assert_fail@plt+0x26c6c>
   3a074:	ldr	r3, [r9]
   3a078:	mov	r2, #15
   3a07c:	mov	r1, #1
   3a080:	ldr	r0, [pc, #-2780]	; 395ac <__assert_fail@plt+0x283a0>
   3a084:	bl	10fcc <fwrite@plt>
   3a088:	b	37e70 <__assert_fail@plt+0x26c64>
   3a08c:	ldr	r3, [r9]
   3a090:	mov	r2, #8
   3a094:	mov	r1, #1
   3a098:	ldr	r0, [pc, #-2800]	; 395b0 <__assert_fail@plt+0x283a4>
   3a09c:	bl	10fcc <fwrite@plt>
   3a0a0:	b	37e68 <__assert_fail@plt+0x26c5c>
   3a0a4:	ldr	r3, [r9]
   3a0a8:	mov	r2, #13
   3a0ac:	mov	r1, #1
   3a0b0:	ldr	r0, [pc, #-2820]	; 395b4 <__assert_fail@plt+0x283a8>
   3a0b4:	bl	10fcc <fwrite@plt>
   3a0b8:	b	37e60 <__assert_fail@plt+0x26c54>
   3a0bc:	ldr	r3, [r9]
   3a0c0:	mov	r2, #10
   3a0c4:	mov	r1, #1
   3a0c8:	ldr	r0, [pc, #-2840]	; 395b8 <__assert_fail@plt+0x283ac>
   3a0cc:	bl	10fcc <fwrite@plt>
   3a0d0:	b	37e58 <__assert_fail@plt+0x26c4c>
   3a0d4:	ldr	r3, [r9]
   3a0d8:	mov	r2, #27
   3a0dc:	mov	r1, #1
   3a0e0:	ldr	r0, [pc, #-2860]	; 395bc <__assert_fail@plt+0x283b0>
   3a0e4:	bl	10fcc <fwrite@plt>
   3a0e8:	b	37e50 <__assert_fail@plt+0x26c44>
   3a0ec:	ldr	r3, [r9]
   3a0f0:	mov	r2, #20
   3a0f4:	mov	r1, #1
   3a0f8:	ldr	r0, [pc, #-2880]	; 395c0 <__assert_fail@plt+0x283b4>
   3a0fc:	bl	10fcc <fwrite@plt>
   3a100:	b	37e48 <__assert_fail@plt+0x26c3c>
   3a104:	ldr	r3, [r9]
   3a108:	mov	r2, #12
   3a10c:	mov	r1, #1
   3a110:	ldr	r0, [pc, #-2900]	; 395c4 <__assert_fail@plt+0x283b8>
   3a114:	bl	10fcc <fwrite@plt>
   3a118:	b	37e40 <__assert_fail@plt+0x26c34>
   3a11c:	ldr	r3, [r9]
   3a120:	mov	r2, #12
   3a124:	mov	r1, #1
   3a128:	ldr	r0, [pc, #-2920]	; 395c8 <__assert_fail@plt+0x283bc>
   3a12c:	bl	10fcc <fwrite@plt>
   3a130:	b	37e38 <__assert_fail@plt+0x26c2c>
   3a134:	ldr	r3, [r9]
   3a138:	mov	r2, #9
   3a13c:	mov	r1, #1
   3a140:	ldr	r0, [pc, #-2940]	; 395cc <__assert_fail@plt+0x283c0>
   3a144:	bl	10fcc <fwrite@plt>
   3a148:	b	37e30 <__assert_fail@plt+0x26c24>
   3a14c:	ldr	r3, [r9]
   3a150:	mov	r2, #17
   3a154:	mov	r1, #1
   3a158:	ldr	r0, [pc, #-2960]	; 395d0 <__assert_fail@plt+0x283c4>
   3a15c:	bl	10fcc <fwrite@plt>
   3a160:	b	37e14 <__assert_fail@plt+0x26c08>
   3a164:	ldr	r3, [r9]
   3a168:	mov	r2, #13
   3a16c:	mov	r1, #1
   3a170:	ldr	r0, [pc, #-2980]	; 395d4 <__assert_fail@plt+0x283c8>
   3a174:	bl	10fcc <fwrite@plt>
   3a178:	b	37e14 <__assert_fail@plt+0x26c08>
   3a17c:	ldr	r3, [r9]
   3a180:	mov	r2, #11
   3a184:	mov	r1, #1
   3a188:	ldr	r0, [pc, #-3000]	; 395d8 <__assert_fail@plt+0x283cc>
   3a18c:	bl	10fcc <fwrite@plt>
   3a190:	b	37e14 <__assert_fail@plt+0x26c08>
   3a194:	ldr	r3, [r9]
   3a198:	mov	r2, #13
   3a19c:	mov	r1, #1
   3a1a0:	ldr	r0, [pc, #-3020]	; 395dc <__assert_fail@plt+0x283d0>
   3a1a4:	bl	10fcc <fwrite@plt>
   3a1a8:	b	37e14 <__assert_fail@plt+0x26c08>
   3a1ac:	ldr	r3, [r9]
   3a1b0:	mov	r2, #10
   3a1b4:	mov	r1, #1
   3a1b8:	ldr	r0, [pc, #-3040]	; 395e0 <__assert_fail@plt+0x283d4>
   3a1bc:	bl	10fcc <fwrite@plt>
   3a1c0:	b	37e14 <__assert_fail@plt+0x26c08>
   3a1c4:	ldr	r3, [r9]
   3a1c8:	mov	r2, #9
   3a1cc:	mov	r1, #1
   3a1d0:	ldr	r0, [pc, #-3060]	; 395e4 <__assert_fail@plt+0x283d8>
   3a1d4:	bl	10fcc <fwrite@plt>
   3a1d8:	b	37e14 <__assert_fail@plt+0x26c08>
   3a1dc:	ldr	r3, [r9]
   3a1e0:	mov	r2, #10
   3a1e4:	mov	r1, #1
   3a1e8:	ldr	r0, [pc, #-3080]	; 395e8 <__assert_fail@plt+0x283dc>
   3a1ec:	bl	10fcc <fwrite@plt>
   3a1f0:	b	37e14 <__assert_fail@plt+0x26c08>
   3a1f4:	ldr	r3, [r9]
   3a1f8:	mov	r2, #13
   3a1fc:	mov	r1, #1
   3a200:	ldr	r0, [pc, #-3100]	; 395ec <__assert_fail@plt+0x283e0>
   3a204:	bl	10fcc <fwrite@plt>
   3a208:	b	37e14 <__assert_fail@plt+0x26c08>
   3a20c:	ldr	r3, [r9]
   3a210:	mov	r2, #22
   3a214:	mov	r1, #1
   3a218:	ldr	r0, [pc, #-3120]	; 395f0 <__assert_fail@plt+0x283e4>
   3a21c:	bl	10fcc <fwrite@plt>
   3a220:	b	37e14 <__assert_fail@plt+0x26c08>
   3a224:	ldr	r3, [r9]
   3a228:	mov	r2, #11
   3a22c:	mov	r1, #1
   3a230:	ldr	r0, [pc, #-3140]	; 395f4 <__assert_fail@plt+0x283e8>
   3a234:	bl	10fcc <fwrite@plt>
   3a238:	b	37e14 <__assert_fail@plt+0x26c08>
   3a23c:	ldr	r3, [r9]
   3a240:	mov	r2, #23
   3a244:	mov	r1, #1
   3a248:	ldr	r0, [pc, #-3160]	; 395f8 <__assert_fail@plt+0x283ec>
   3a24c:	bl	10fcc <fwrite@plt>
   3a250:	b	37e14 <__assert_fail@plt+0x26c08>
   3a254:	ldr	r3, [r9]
   3a258:	mov	r2, #23
   3a25c:	mov	r1, #1
   3a260:	ldr	r0, [pc, #-3180]	; 395fc <__assert_fail@plt+0x283f0>
   3a264:	bl	10fcc <fwrite@plt>
   3a268:	b	37e14 <__assert_fail@plt+0x26c08>
   3a26c:	ldr	r3, [r9]
   3a270:	mov	r2, #7
   3a274:	mov	r1, #1
   3a278:	ldr	r0, [pc, #-3200]	; 39600 <__assert_fail@plt+0x283f4>
   3a27c:	bl	10fcc <fwrite@plt>
   3a280:	b	37e14 <__assert_fail@plt+0x26c08>
   3a284:	mov	r2, #5
   3a288:	ldr	r1, [pc, #-3212]	; 39604 <__assert_fail@plt+0x283f8>
   3a28c:	mov	r0, #0
   3a290:	bl	10f90 <dcgettext@plt>
   3a294:	ldr	r1, [r9]
   3a298:	bl	111c4 <fputs@plt>
   3a29c:	b	37e14 <__assert_fail@plt+0x26c08>
   3a2a0:	mov	r2, #5
   3a2a4:	ldr	r1, [pc, #-3236]	; 39608 <__assert_fail@plt+0x283fc>
   3a2a8:	bl	10f90 <dcgettext@plt>
   3a2ac:	mov	fp, r7
   3a2b0:	bl	548ac <error@@Base>
   3a2b4:	b	369f8 <__assert_fail@plt+0x257ec>
   3a2b8:	ldr	r3, [pc, #-3252]	; 3960c <__assert_fail@plt+0x28400>
   3a2bc:	ldr	r2, [pc, #-3252]	; 39610 <__assert_fail@plt+0x28404>
   3a2c0:	ldr	r1, [pc, #-3252]	; 39614 <__assert_fail@plt+0x28408>
   3a2c4:	ldr	r0, [pc, #-3252]	; 39618 <__assert_fail@plt+0x2840c>
   3a2c8:	bl	1120c <__assert_fail@plt>
   3a2cc:	ldr	r3, [r9]
   3a2d0:	mov	r2, #31
   3a2d4:	mov	r1, #1
   3a2d8:	ldr	r0, [pc, #-3268]	; 3961c <__assert_fail@plt+0x28410>
   3a2dc:	bl	10fcc <fwrite@plt>
   3a2e0:	b	37e14 <__assert_fail@plt+0x26c08>
   3a2e4:	ldr	r3, [r9]
   3a2e8:	mov	r2, #31
   3a2ec:	mov	r1, #1
   3a2f0:	ldr	r0, [pc, #-3288]	; 39620 <__assert_fail@plt+0x28414>
   3a2f4:	bl	10fcc <fwrite@plt>
   3a2f8:	b	37e14 <__assert_fail@plt+0x26c08>
   3a2fc:	ldr	r3, [r9]
   3a300:	mov	r2, #10
   3a304:	mov	r1, #1
   3a308:	ldr	r0, [pc, #-3308]	; 39624 <__assert_fail@plt+0x28418>
   3a30c:	bl	10fcc <fwrite@plt>
   3a310:	b	37e14 <__assert_fail@plt+0x26c08>
   3a314:	ldr	r3, [r9]
   3a318:	mov	r2, #10
   3a31c:	mov	r1, #1
   3a320:	ldr	r0, [pc, #-3328]	; 39628 <__assert_fail@plt+0x2841c>
   3a324:	bl	10fcc <fwrite@plt>
   3a328:	b	37e14 <__assert_fail@plt+0x26c08>
   3a32c:	mov	r2, #5
   3a330:	ldr	r1, [pc, #-3340]	; 3962c <__assert_fail@plt+0x28420>
   3a334:	mov	r0, #0
   3a338:	bl	10f90 <dcgettext@plt>
   3a33c:	bl	10f24 <printf@plt>
   3a340:	mov	r2, #5
   3a344:	ldr	r1, [pc, #-3356]	; 39630 <__assert_fail@plt+0x28424>
   3a348:	mov	r0, #0
   3a34c:	bl	10f90 <dcgettext@plt>
   3a350:	mov	r2, #5
   3a354:	ldr	r1, [pc, #-3368]	; 39634 <__assert_fail@plt+0x28428>
   3a358:	mov	r4, r0
   3a35c:	mov	r0, #0
   3a360:	bl	10f90 <dcgettext@plt>
   3a364:	mov	r2, #5
   3a368:	ldr	r1, [pc, #-3384]	; 39638 <__assert_fail@plt+0x2842c>
   3a36c:	mov	r5, r0
   3a370:	mov	r0, #0
   3a374:	bl	10f90 <dcgettext@plt>
   3a378:	mov	r2, #5
   3a37c:	ldr	r1, [pc, #-3400]	; 3963c <__assert_fail@plt+0x28430>
   3a380:	str	r0, [sp, #32]
   3a384:	mov	r0, #0
   3a388:	bl	10f90 <dcgettext@plt>
   3a38c:	lsl	r1, r9, #1
   3a390:	mov	r2, r5
   3a394:	ldr	r3, [sp, #32]
   3a398:	str	r1, [sp]
   3a39c:	str	r0, [sp, #4]
   3a3a0:	mov	r0, r4
   3a3a4:	bl	10f24 <printf@plt>
   3a3a8:	ldr	r3, [sp, #48]	; 0x30
   3a3ac:	mov	r2, r6
   3a3b0:	str	r3, [sp, #8]
   3a3b4:	stm	sp, {r6, fp}
   3a3b8:	mov	r3, fp
   3a3bc:	mov	r0, r7
   3a3c0:	bl	14910 <__assert_fail@plt+0x3704>
   3a3c4:	mov	r4, r0
   3a3c8:	mov	r0, #10
   3a3cc:	mov	r5, r1
   3a3d0:	bl	110c8 <putchar@plt>
   3a3d4:	mvn	r3, #0
   3a3d8:	mvn	r2, #0
   3a3dc:	cmp	r5, r3
   3a3e0:	cmpeq	r4, r2
   3a3e4:	beq	38118 <__assert_fail@plt+0x26f0c>
   3a3e8:	sub	r0, r4, r6
   3a3ec:	add	r3, r9, r0
   3a3f0:	ldr	r2, [sp, #48]	; 0x30
   3a3f4:	add	r3, r7, r3
   3a3f8:	cmp	r2, r3
   3a3fc:	bcc	3a450 <__assert_fail@plt+0x29244>
   3a400:	ldr	r3, [pc, #-3528]	; 39640 <__assert_fail@plt+0x28434>
   3a404:	add	r0, r7, r0
   3a408:	mov	r1, r9
   3a40c:	ldr	r3, [r3]
   3a410:	blx	r3
   3a414:	lsl	r3, r9, #3
   3a418:	sub	lr, r3, #1
   3a41c:	str	r3, [sp, #60]	; 0x3c
   3a420:	rsb	ip, lr, #32
   3a424:	ldr	r3, [sp, #60]	; 0x3c
   3a428:	sub	r3, r3, #33	; 0x21
   3a42c:	lsr	r2, r0, lr
   3a430:	orr	r2, r2, r1, lsl ip
   3a434:	orr	r3, r2, r1, lsr r3
   3a438:	str	r3, [sp, #32]
   3a43c:	lsr	r3, r1, lr
   3a440:	str	r3, [sp, #36]	; 0x24
   3a444:	ldrd	r2, [sp, #32]
   3a448:	orrs	r3, r2, r3
   3a44c:	bne	3a45c <__assert_fail@plt+0x29250>
   3a450:	mov	r0, #10
   3a454:	bl	110c8 <putchar@plt>
   3a458:	b	38030 <__assert_fail@plt+0x26e24>
   3a45c:	ldr	r3, [sp, #48]	; 0x30
   3a460:	strd	r4, [sp]
   3a464:	mov	r2, r6
   3a468:	str	r3, [sp, #8]
   3a46c:	mov	r0, r7
   3a470:	mov	r3, fp
   3a474:	bl	14910 <__assert_fail@plt+0x3704>
   3a478:	mov	r4, r0
   3a47c:	mov	r0, #10
   3a480:	mov	r5, r1
   3a484:	bl	110c8 <putchar@plt>
   3a488:	mvn	r3, #0
   3a48c:	mvn	r2, #0
   3a490:	cmp	r5, r3
   3a494:	cmpeq	r4, r2
   3a498:	bne	3a450 <__assert_fail@plt+0x29244>
   3a49c:	b	38118 <__assert_fail@plt+0x26f0c>
   3a4a0:	mov	r2, #5
   3a4a4:	ldr	r1, [pc, #-3688]	; 39644 <__assert_fail@plt+0x28438>
   3a4a8:	mov	r0, fp
   3a4ac:	bl	10f90 <dcgettext@plt>
   3a4b0:	bl	548ac <error@@Base>
   3a4b4:	b	369f8 <__assert_fail@plt+0x257ec>
   3a4b8:	ldrd	r2, [sp, #48]	; 0x30
   3a4bc:	str	fp, [sp, #8]
   3a4c0:	mov	r0, r5
   3a4c4:	strd	r2, [sp]
   3a4c8:	ldr	r3, [sp, #56]	; 0x38
   3a4cc:	ldr	r2, [sp, #60]	; 0x3c
   3a4d0:	bl	14910 <__assert_fail@plt+0x3704>
   3a4d4:	mov	r2, #5
   3a4d8:	mov	r6, r0
   3a4dc:	mov	r7, r1
   3a4e0:	mov	r0, #0
   3a4e4:	ldr	r1, [pc, #-3748]	; 39648 <__assert_fail@plt+0x2843c>
   3a4e8:	strd	r6, [sp, #48]	; 0x30
   3a4ec:	bl	10f90 <dcgettext@plt>
   3a4f0:	bl	10f24 <printf@plt>
   3a4f4:	mvn	r3, #0
   3a4f8:	mvn	r2, #0
   3a4fc:	cmp	r7, r3
   3a500:	cmpeq	r6, r2
   3a504:	bne	38430 <__assert_fail@plt+0x27224>
   3a508:	b	38460 <__assert_fail@plt+0x27254>
   3a50c:	ldr	r3, [r9]
   3a510:	mov	r2, #26
   3a514:	mov	r1, #1
   3a518:	ldr	r0, [pc, #-3796]	; 3964c <__assert_fail@plt+0x28440>
   3a51c:	bl	10fcc <fwrite@plt>
   3a520:	b	37e14 <__assert_fail@plt+0x26c08>
   3a524:	ldr	r3, [r9]
   3a528:	mov	r2, #23
   3a52c:	mov	r1, #1
   3a530:	ldr	r0, [pc, #-3816]	; 39650 <__assert_fail@plt+0x28444>
   3a534:	bl	10fcc <fwrite@plt>
   3a538:	b	37e14 <__assert_fail@plt+0x26c08>
   3a53c:	mov	r2, #0
   3a540:	mov	r3, #0
   3a544:	mov	r1, #0
   3a548:	str	r1, [sp, #92]	; 0x5c
   3a54c:	strd	r2, [sp, #80]	; 0x50
   3a550:	str	r1, [sp, #104]	; 0x68
   3a554:	str	r1, [sp, #108]	; 0x6c
   3a558:	str	r1, [sp, #112]	; 0x70
   3a55c:	str	r1, [sp, #116]	; 0x74
   3a560:	str	r1, [sp, #88]	; 0x58
   3a564:	str	r1, [sp, #72]	; 0x48
   3a568:	str	r1, [sp, #100]	; 0x64
   3a56c:	strd	r2, [sp, #64]	; 0x40
   3a570:	str	r2, [sp, #60]	; 0x3c
   3a574:	str	r3, [sp, #56]	; 0x38
   3a578:	b	38158 <__assert_fail@plt+0x26f4c>
   3a57c:	ldr	r1, [pc, #-3888]	; 39654 <__assert_fail@plt+0x28448>
   3a580:	mov	r0, #0
   3a584:	bl	10f90 <dcgettext@plt>
   3a588:	mov	r1, #64	; 0x40
   3a58c:	mov	r3, sl
   3a590:	mov	r2, r0
   3a594:	ldr	r0, [pc, #-3908]	; 39658 <__assert_fail@plt+0x2844c>
   3a598:	bl	110b0 <snprintf@plt>
   3a59c:	ldr	r1, [pc, #-3916]	; 39658 <__assert_fail@plt+0x2844c>
   3a5a0:	b	3772c <__assert_fail@plt+0x26520>
   3a5a4:	ldr	r3, [r9, #-4]
   3a5a8:	ldrh	r2, [r9, #-6]
   3a5ac:	ldr	r0, [pc, #-3928]	; 3965c <__assert_fail@plt+0x28450>
   3a5b0:	bl	10f24 <printf@plt>
   3a5b4:	ldr	r5, [pc, #-3932]	; 39660 <__assert_fail@plt+0x28454>
   3a5b8:	b	39738 <__assert_fail@plt+0x2852c>
   3a5bc:	mov	r2, #5
   3a5c0:	ldr	r1, [pc, #-3940]	; 39664 <__assert_fail@plt+0x28458>
   3a5c4:	mov	r0, #0
   3a5c8:	ldr	r5, [r9]
   3a5cc:	bl	10f90 <dcgettext@plt>
   3a5d0:	ldr	r3, [sp, #48]	; 0x30
   3a5d4:	ldr	r1, [pc, #-3956]	; 39668 <__assert_fail@plt+0x2845c>
   3a5d8:	mov	r2, r0
   3a5dc:	mov	r0, r5
   3a5e0:	bl	11098 <fprintf@plt>
   3a5e4:	b	37e14 <__assert_fail@plt+0x26c08>
   3a5e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a5ec:	sub	sp, sp, #372	; 0x174
   3a5f0:	ldr	r9, [pc, #1500]	; 3abd4 <__assert_fail@plt+0x299c8>
   3a5f4:	mov	r6, #1
   3a5f8:	mov	ip, #0
   3a5fc:	ldr	r3, [r9, #-3696]	; 0xfffff190
   3a600:	str	r1, [sp, #8]
   3a604:	str	r3, [sp]
   3a608:	mov	fp, r0
   3a60c:	mov	r3, r1
   3a610:	str	r6, [r9, #-3840]	; 0xfffff100
   3a614:	ldm	r0, {r1, r2}
   3a618:	add	r0, sp, #24
   3a61c:	str	ip, [sp, #24]
   3a620:	str	ip, [sp, #28]
   3a624:	str	ip, [sp, #40]	; 0x28
   3a628:	str	ip, [sp, #44]	; 0x2c
   3a62c:	str	ip, [sp, #52]	; 0x34
   3a630:	str	ip, [sp, #136]	; 0x88
   3a634:	str	ip, [sp, #140]	; 0x8c
   3a638:	str	ip, [sp, #152]	; 0x98
   3a63c:	str	ip, [sp, #156]	; 0x9c
   3a640:	str	ip, [sp, #164]	; 0xa4
   3a644:	bl	552a8 <warn@@Base+0x4d8>
   3a648:	subs	r4, r0, #0
   3a64c:	addne	r4, sp, #136	; 0x88
   3a650:	bne	3aa3c <__assert_fail@plt+0x29830>
   3a654:	ldr	r3, [r9, #-3696]	; 0xfffff190
   3a658:	cmp	r3, #0
   3a65c:	bne	3a81c <__assert_fail@plt+0x29610>
   3a660:	ldr	r7, [pc, #1392]	; 3abd8 <__assert_fail@plt+0x299cc>
   3a664:	b	3a6b4 <__assert_fail@plt+0x294a8>
   3a668:	ldr	r2, [sp, #64]	; 0x40
   3a66c:	ldr	r3, [r7, #1392]	; 0x570
   3a670:	str	r5, [fp]
   3a674:	add	r3, r3, r2
   3a678:	mov	r0, fp
   3a67c:	str	r2, [r7, #656]	; 0x290
   3a680:	str	r3, [sp, #64]	; 0x40
   3a684:	bl	362c4 <__assert_fail@plt+0x250b8>
   3a688:	cmp	r0, #0
   3a68c:	moveq	r6, #0
   3a690:	ldr	r0, [fp, #112]	; 0x70
   3a694:	cmp	r0, #0
   3a698:	beq	3a6ac <__assert_fail@plt+0x294a0>
   3a69c:	bl	10f54 <free@plt>
   3a6a0:	mov	r3, #0
   3a6a4:	str	r3, [fp, #112]	; 0x70
   3a6a8:	str	r3, [fp, #116]	; 0x74
   3a6ac:	mov	r0, r5
   3a6b0:	bl	10f54 <free@plt>
   3a6b4:	mov	r2, #0
   3a6b8:	ldr	r1, [sp, #64]	; 0x40
   3a6bc:	ldr	r0, [fp, #4]
   3a6c0:	bl	111a0 <fseek@plt>
   3a6c4:	subs	r8, r0, #0
   3a6c8:	bne	3aa90 <__assert_fail@plt+0x29884>
   3a6cc:	ldr	r3, [fp, #4]
   3a6d0:	mov	r2, #60	; 0x3c
   3a6d4:	mov	r1, #1
   3a6d8:	add	r0, sp, #76	; 0x4c
   3a6dc:	bl	10ffc <fread@plt>
   3a6e0:	cmp	r0, #60	; 0x3c
   3a6e4:	bne	3aab8 <__assert_fail@plt+0x298ac>
   3a6e8:	ldrh	r3, [sp, #134]	; 0x86
   3a6ec:	cmp	r3, #2656	; 0xa60
   3a6f0:	bne	3aae8 <__assert_fail@plt+0x298dc>
   3a6f4:	ldr	r3, [sp, #64]	; 0x40
   3a6f8:	mov	r2, #10
   3a6fc:	add	r3, r3, #60	; 0x3c
   3a700:	mov	r1, r8
   3a704:	add	r0, sp, #124	; 0x7c
   3a708:	str	r3, [sp, #64]	; 0x40
   3a70c:	bl	11074 <strtoul@plt>
   3a710:	add	r4, sp, #136	; 0x88
   3a714:	mov	r1, r4
   3a718:	tst	r0, #1
   3a71c:	addne	r0, r0, #1
   3a720:	str	r0, [r7, #1392]	; 0x570
   3a724:	add	r0, sp, #24
   3a728:	bl	55714 <warn@@Base+0x944>
   3a72c:	subs	r9, r0, #0
   3a730:	beq	3aa6c <__assert_fail@plt+0x29860>
   3a734:	bl	11080 <strlen@plt>
   3a738:	mov	r2, r9
   3a73c:	mov	r1, r4
   3a740:	mov	sl, r0
   3a744:	add	r0, sp, #24
   3a748:	bl	559a0 <warn@@Base+0xbd0>
   3a74c:	subs	r5, r0, #0
   3a750:	beq	3aa6c <__assert_fail@plt+0x29860>
   3a754:	ldr	r3, [sp, #8]
   3a758:	cmp	r3, #0
   3a75c:	beq	3a668 <__assert_fail@plt+0x2945c>
   3a760:	ldr	r3, [sp, #60]	; 0x3c
   3a764:	cmp	r3, #0
   3a768:	beq	3a7cc <__assert_fail@plt+0x295c0>
   3a76c:	add	r0, sp, #248	; 0xf8
   3a770:	mov	r2, #120	; 0x78
   3a774:	mov	r1, #0
   3a778:	str	r3, [sp, #12]
   3a77c:	bl	110bc <memset@plt>
   3a780:	ldr	r0, [sp, #140]	; 0x8c
   3a784:	ldr	r3, [sp, #12]
   3a788:	cmp	r0, #0
   3a78c:	beq	3ab74 <__assert_fail@plt+0x29968>
   3a790:	add	r3, r3, #60	; 0x3c
   3a794:	mov	r1, r3
   3a798:	mov	r2, #0
   3a79c:	str	r3, [r7, #656]	; 0x290
   3a7a0:	bl	111a0 <fseek@plt>
   3a7a4:	cmp	r0, #0
   3a7a8:	bne	3ab90 <__assert_fail@plt+0x29984>
   3a7ac:	ldr	r3, [sp, #140]	; 0x8c
   3a7b0:	add	r0, sp, #248	; 0xf8
   3a7b4:	str	r5, [sp, #248]	; 0xf8
   3a7b8:	str	r3, [sp, #252]	; 0xfc
   3a7bc:	bl	362c4 <__assert_fail@plt+0x250b8>
   3a7c0:	cmp	r0, #0
   3a7c4:	moveq	r6, #0
   3a7c8:	b	3a690 <__assert_fail@plt+0x29484>
   3a7cc:	mov	r1, r9
   3a7d0:	mov	r2, sl
   3a7d4:	ldr	r0, [fp]
   3a7d8:	bl	551bc <warn@@Base+0x3ec>
   3a7dc:	subs	r9, r0, #0
   3a7e0:	beq	3aa3c <__assert_fail@plt+0x29830>
   3a7e4:	bl	1c264 <__assert_fail@plt+0xb058>
   3a7e8:	subs	sl, r0, #0
   3a7ec:	beq	3abac <__assert_fail@plt+0x299a0>
   3a7f0:	ldr	r3, [sp, #60]	; 0x3c
   3a7f4:	str	r5, [sl]
   3a7f8:	str	r3, [r7, #656]	; 0x290
   3a7fc:	bl	362c4 <__assert_fail@plt+0x250b8>
   3a800:	cmp	r0, #0
   3a804:	mov	r0, sl
   3a808:	moveq	r6, #0
   3a80c:	bl	140ac <__assert_fail@plt+0x2ea0>
   3a810:	mov	r0, r9
   3a814:	bl	10f54 <free@plt>
   3a818:	b	3a690 <__assert_fail@plt+0x29484>
   3a81c:	ldr	r3, [sp, #44]	; 0x2c
   3a820:	mov	r2, #5
   3a824:	cmp	r3, #0
   3a828:	beq	3ab08 <__assert_fail@plt+0x298fc>
   3a82c:	ldr	r1, [pc, #936]	; 3abdc <__assert_fail@plt+0x299d0>
   3a830:	bl	10f90 <dcgettext@plt>
   3a834:	ldr	r3, [sp, #48]	; 0x30
   3a838:	ldr	r2, [sp, #32]
   3a83c:	ldr	r1, [fp]
   3a840:	bl	10f24 <printf@plt>
   3a844:	ldr	r0, [fp, #4]
   3a848:	bl	10f78 <ftell@plt>
   3a84c:	ldrd	r2, [sp, #32]
   3a850:	orrs	r3, r2, r3
   3a854:	str	r0, [sp, #16]
   3a858:	beq	3abcc <__assert_fail@plt+0x299c0>
   3a85c:	mov	r5, r4
   3a860:	str	fp, [sp, #20]
   3a864:	b	3a8a4 <__assert_fail@plt+0x29698>
   3a868:	ldr	r2, [sp, #44]	; 0x2c
   3a86c:	mov	r7, #0
   3a870:	add	r2, r2, r4
   3a874:	bl	10f24 <printf@plt>
   3a878:	ldr	r8, [sp, #48]	; 0x30
   3a87c:	ldr	r0, [sp, #44]	; 0x2c
   3a880:	sub	r1, r8, r4
   3a884:	add	r0, r0, r4
   3a888:	bl	11104 <strnlen@plt>
   3a88c:	ldrd	r2, [sp, #32]
   3a890:	cmp	r7, r3
   3a894:	cmpeq	r5, r2
   3a898:	add	r0, r0, #1
   3a89c:	add	r4, r4, r0
   3a8a0:	bcs	3aa84 <__assert_fail@plt+0x29878>
   3a8a4:	ldr	r1, [sp, #40]	; 0x28
   3a8a8:	lsl	r8, r5, #3
   3a8ac:	add	r3, sp, #136	; 0x88
   3a8b0:	cmp	r5, #0
   3a8b4:	str	r3, [sp, #12]
   3a8b8:	mov	r2, r3
   3a8bc:	add	r0, sp, #24
   3a8c0:	add	ip, r1, r8
   3a8c4:	add	r5, r5, #1
   3a8c8:	ldrd	sl, [r1, r8]
   3a8cc:	beq	3a8e0 <__assert_fail@plt+0x296d4>
   3a8d0:	ldrd	r6, [ip, #-8]
   3a8d4:	cmp	r7, fp
   3a8d8:	cmpeq	r6, sl
   3a8dc:	beq	3a944 <__assert_fail@plt+0x29738>
   3a8e0:	mov	r1, sl
   3a8e4:	bl	55644 <warn@@Base+0x874>
   3a8e8:	ldr	r1, [sp, #12]
   3a8ec:	subs	r2, r0, #0
   3a8f0:	add	r0, sp, #24
   3a8f4:	beq	3a944 <__assert_fail@plt+0x29738>
   3a8f8:	bl	559a0 <warn@@Base+0xbd0>
   3a8fc:	mov	r2, #5
   3a900:	ldr	r1, [pc, #728]	; 3abe0 <__assert_fail@plt+0x299d4>
   3a904:	subs	r6, r0, #0
   3a908:	mov	r0, #0
   3a90c:	beq	3a944 <__assert_fail@plt+0x29738>
   3a910:	bl	10f90 <dcgettext@plt>
   3a914:	mov	r1, r6
   3a918:	bl	10f24 <printf@plt>
   3a91c:	ldr	r3, [sp, #40]	; 0x28
   3a920:	mov	r2, #4
   3a924:	ldrd	r0, [r3, r8]
   3a928:	bl	14244 <__assert_fail@plt+0x3038>
   3a92c:	ldr	r3, [pc, #688]	; 3abe4 <__assert_fail@plt+0x299d8>
   3a930:	mov	r0, #10
   3a934:	ldr	r1, [r3]
   3a938:	bl	11158 <putc@plt>
   3a93c:	mov	r0, r6
   3a940:	bl	10f54 <free@plt>
   3a944:	ldr	r3, [sp, #48]	; 0x30
   3a948:	ldr	r0, [pc, #664]	; 3abe8 <__assert_fail@plt+0x299dc>
   3a94c:	cmp	r3, r4
   3a950:	sub	r1, r3, r4
   3a954:	bhi	3a868 <__assert_fail@plt+0x2965c>
   3a958:	ldr	fp, [sp, #20]
   3a95c:	mov	r2, #5
   3a960:	ldr	r1, [pc, #644]	; 3abec <__assert_fail@plt+0x299e0>
   3a964:	mov	r0, #0
   3a968:	bl	10f90 <dcgettext@plt>
   3a96c:	ldr	r1, [fp]
   3a970:	bl	548ac <error@@Base>
   3a974:	ldr	r8, [sp, #48]	; 0x30
   3a978:	mov	r6, #0
   3a97c:	ldr	r3, [sp, #72]	; 0x48
   3a980:	cmp	r3, #0
   3a984:	addne	r4, r4, #7
   3a988:	addeq	r4, r4, #1
   3a98c:	bicne	r4, r4, #7
   3a990:	biceq	r4, r4, #1
   3a994:	cmp	r4, r8
   3a998:	bcc	3ab1c <__assert_fail@plt+0x29910>
   3a99c:	ldr	r1, [sp, #16]
   3a9a0:	mov	r2, #0
   3a9a4:	ldr	r0, [fp, #4]
   3a9a8:	bl	111a0 <fseek@plt>
   3a9ac:	cmp	r0, #0
   3a9b0:	bne	3ab50 <__assert_fail@plt+0x29944>
   3a9b4:	ldr	r2, [pc, #540]	; 3abd8 <__assert_fail@plt+0x299cc>
   3a9b8:	ldr	r0, [r9, #-3704]	; 0xfffff188
   3a9bc:	ldr	r1, [r2, #1696]	; 0x6a0
   3a9c0:	ldr	r3, [r2, #1120]	; 0x460
   3a9c4:	orr	r3, r3, r1
   3a9c8:	ldr	r1, [r2, #824]	; 0x338
   3a9cc:	orr	r3, r3, r0
   3a9d0:	ldr	r0, [r2, #2736]	; 0xab0
   3a9d4:	orr	r3, r3, r1
   3a9d8:	ldr	r1, [r2, #1588]	; 0x634
   3a9dc:	orr	r3, r3, r0
   3a9e0:	ldr	r0, [r2, #1592]	; 0x638
   3a9e4:	orr	r3, r3, r1
   3a9e8:	ldr	r1, [r9, #-3708]	; 0xfffff184
   3a9ec:	orr	r3, r3, r0
   3a9f0:	ldr	r0, [r2, #1552]	; 0x610
   3a9f4:	orr	r3, r3, r1
   3a9f8:	ldr	r1, [r2, #1700]	; 0x6a4
   3a9fc:	orr	r3, r3, r0
   3aa00:	ldr	r0, [r2, #2740]	; 0xab4
   3aa04:	orr	r3, r3, r1
   3aa08:	ldr	r1, [r9, #-3712]	; 0xfffff180
   3aa0c:	orr	r3, r3, r0
   3aa10:	ldr	r0, [r9, #-3700]	; 0xfffff18c
   3aa14:	orr	r3, r3, r1
   3aa18:	ldr	r1, [r2, #828]	; 0x33c
   3aa1c:	orr	r3, r3, r0
   3aa20:	ldr	r2, [r2, #1692]	; 0x69c
   3aa24:	orr	r3, r3, r1
   3aa28:	orrs	r3, r3, r2
   3aa2c:	bne	3a660 <__assert_fail@plt+0x29454>
   3aa30:	mov	r8, #1
   3aa34:	add	r4, sp, #136	; 0x88
   3aa38:	b	3aa40 <__assert_fail@plt+0x29834>
   3aa3c:	mov	r8, #0
   3aa40:	ldr	r0, [sp, #140]	; 0x8c
   3aa44:	cmp	r0, #0
   3aa48:	beq	3aa50 <__assert_fail@plt+0x29844>
   3aa4c:	bl	110f8 <fclose@plt>
   3aa50:	mov	r0, r4
   3aa54:	bl	55580 <warn@@Base+0x7b0>
   3aa58:	add	r0, sp, #24
   3aa5c:	bl	55580 <warn@@Base+0x7b0>
   3aa60:	mov	r0, r8
   3aa64:	add	sp, sp, #372	; 0x174
   3aa68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aa6c:	mov	r2, #5
   3aa70:	ldr	r1, [pc, #376]	; 3abf0 <__assert_fail@plt+0x299e4>
   3aa74:	bl	10f90 <dcgettext@plt>
   3aa78:	ldr	r1, [fp]
   3aa7c:	bl	548ac <error@@Base>
   3aa80:	b	3aa40 <__assert_fail@plt+0x29834>
   3aa84:	ldr	fp, [sp, #20]
   3aa88:	mov	r6, #1
   3aa8c:	b	3a97c <__assert_fail@plt+0x29770>
   3aa90:	mov	r2, #5
   3aa94:	ldr	r1, [pc, #344]	; 3abf4 <__assert_fail@plt+0x299e8>
   3aa98:	mov	r0, #0
   3aa9c:	bl	10f90 <dcgettext@plt>
   3aaa0:	ldr	r1, [fp]
   3aaa4:	bl	548ac <error@@Base>
   3aaa8:	mov	r8, #0
   3aaac:	mov	r0, r8
   3aab0:	add	sp, sp, #372	; 0x174
   3aab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aab8:	cmp	r0, #0
   3aabc:	moveq	r8, r6
   3aac0:	addeq	r4, sp, #136	; 0x88
   3aac4:	beq	3aa40 <__assert_fail@plt+0x29834>
   3aac8:	mov	r2, #5
   3aacc:	ldr	r1, [pc, #292]	; 3abf8 <__assert_fail@plt+0x299ec>
   3aad0:	mov	r0, r8
   3aad4:	bl	10f90 <dcgettext@plt>
   3aad8:	ldr	r1, [fp]
   3aadc:	bl	548ac <error@@Base>
   3aae0:	add	r4, sp, #136	; 0x88
   3aae4:	b	3aa40 <__assert_fail@plt+0x29834>
   3aae8:	mov	r2, #5
   3aaec:	ldr	r1, [pc, #264]	; 3abfc <__assert_fail@plt+0x299f0>
   3aaf0:	mov	r0, r8
   3aaf4:	bl	10f90 <dcgettext@plt>
   3aaf8:	ldr	r1, [sp, #24]
   3aafc:	bl	548ac <error@@Base>
   3ab00:	add	r4, sp, #136	; 0x88
   3ab04:	b	3aa40 <__assert_fail@plt+0x29834>
   3ab08:	ldr	r1, [pc, #240]	; 3ac00 <__assert_fail@plt+0x299f4>
   3ab0c:	bl	10f90 <dcgettext@plt>
   3ab10:	ldr	r1, [fp]
   3ab14:	bl	548ac <error@@Base>
   3ab18:	b	3a9b4 <__assert_fail@plt+0x297a8>
   3ab1c:	mov	r2, #5
   3ab20:	sub	r3, r8, r4
   3ab24:	str	r2, [sp]
   3ab28:	ldr	r1, [pc, #212]	; 3ac04 <__assert_fail@plt+0x299f8>
   3ab2c:	ldr	r2, [pc, #212]	; 3ac08 <__assert_fail@plt+0x299fc>
   3ab30:	mov	r0, #0
   3ab34:	bl	11200 <dcngettext@plt>
   3ab38:	ldr	r2, [sp, #48]	; 0x30
   3ab3c:	ldr	r1, [fp]
   3ab40:	sub	r2, r2, r4
   3ab44:	bl	548ac <error@@Base>
   3ab48:	mov	r6, #0
   3ab4c:	b	3a99c <__assert_fail@plt+0x29790>
   3ab50:	mov	r2, #5
   3ab54:	ldr	r1, [pc, #176]	; 3ac0c <__assert_fail@plt+0x29a00>
   3ab58:	mov	r0, #0
   3ab5c:	bl	10f90 <dcgettext@plt>
   3ab60:	ldr	r1, [fp]
   3ab64:	bl	548ac <error@@Base>
   3ab68:	mov	r8, #0
   3ab6c:	add	r4, sp, #136	; 0x88
   3ab70:	b	3aa40 <__assert_fail@plt+0x29834>
   3ab74:	mov	r2, #5
   3ab78:	ldr	r1, [pc, #144]	; 3ac10 <__assert_fail@plt+0x29a04>
   3ab7c:	bl	10f90 <dcgettext@plt>
   3ab80:	mov	r2, r9
   3ab84:	ldr	r1, [fp]
   3ab88:	bl	548ac <error@@Base>
   3ab8c:	b	3aa40 <__assert_fail@plt+0x29834>
   3ab90:	mov	r2, #5
   3ab94:	ldr	r1, [pc, #120]	; 3ac14 <__assert_fail@plt+0x29a08>
   3ab98:	mov	r0, #0
   3ab9c:	bl	10f90 <dcgettext@plt>
   3aba0:	ldr	r1, [sp, #136]	; 0x88
   3aba4:	bl	548ac <error@@Base>
   3aba8:	b	3aa40 <__assert_fail@plt+0x29834>
   3abac:	mov	r2, #5
   3abb0:	ldr	r1, [pc, #96]	; 3ac18 <__assert_fail@plt+0x29a0c>
   3abb4:	bl	10f90 <dcgettext@plt>
   3abb8:	mov	r1, r9
   3abbc:	bl	548ac <error@@Base>
   3abc0:	mov	r0, r9
   3abc4:	bl	10f54 <free@plt>
   3abc8:	b	3aa40 <__assert_fail@plt+0x29834>
   3abcc:	ldr	r8, [sp, #48]	; 0x30
   3abd0:	b	3a97c <__assert_fail@plt+0x29770>
   3abd4:	andeq	ip, r9, r0, lsr r4
   3abd8:	andeq	sl, r9, r8, lsr r4
   3abdc:	andeq	ip, r6, r4, ror ip
   3abe0:			; <UNDEFINED> instruction: 0x0006ccbc
   3abe4:	andeq	sl, r9, ip, lsr #8
   3abe8:	muleq	r8, ip, r9
   3abec:	andeq	ip, r6, r0, ror #25
   3abf0:	andeq	ip, r6, r4, lsr #29
   3abf4:	andeq	ip, r6, r8, lsr #28
   3abf8:	andeq	ip, r6, r4, asr lr
   3abfc:	andeq	ip, r6, r8, ror lr
   3ac00:	andeq	ip, r6, r4, asr #24
   3ac04:	andeq	ip, r6, r4, lsl #27
   3ac08:	andeq	ip, r6, r4, lsr #26
   3ac0c:	andeq	ip, r6, r4, ror #27
   3ac10:	andeq	ip, r6, r4, ror #29
   3ac14:	andeq	ip, r6, ip, lsl #30
   3ac18:	andeq	ip, r6, r0, asr #29
   3ac1c:	b	140ac <__assert_fail@plt+0x2ea0>
   3ac20:	b	1c264 <__assert_fail@plt+0xb058>
   3ac24:	push	{r4, lr}
   3ac28:	mov	r1, r0
   3ac2c:	ldr	r2, [pc, #52]	; 3ac68 <__assert_fail@plt+0x29a5c>
   3ac30:	ldr	r0, [pc, #52]	; 3ac6c <__assert_fail@plt+0x29a60>
   3ac34:	bl	10f24 <printf@plt>
   3ac38:	mov	r2, #5
   3ac3c:	ldr	r1, [pc, #44]	; 3ac70 <__assert_fail@plt+0x29a64>
   3ac40:	mov	r0, #0
   3ac44:	bl	10f90 <dcgettext@plt>
   3ac48:	bl	10f24 <printf@plt>
   3ac4c:	mov	r2, #5
   3ac50:	ldr	r1, [pc, #28]	; 3ac74 <__assert_fail@plt+0x29a68>
   3ac54:	mov	r0, #0
   3ac58:	bl	10f90 <dcgettext@plt>
   3ac5c:	bl	10f24 <printf@plt>
   3ac60:	mov	r0, #0
   3ac64:	bl	1105c <exit@plt>
   3ac68:	strdeq	ip, [r7], -r8
   3ac6c:	andeq	ip, r7, ip, lsl fp
   3ac70:	andeq	ip, r7, r8, lsr #22
   3ac74:	andeq	ip, r7, ip, asr fp
   3ac78:	cmp	r1, #0
   3ac7c:	beq	3acf0 <__assert_fail@plt+0x29ae4>
   3ac80:	mov	r2, #0
   3ac84:	push	{r4, r5, lr}
   3ac88:	mov	lr, r2
   3ac8c:	mov	r4, #98	; 0x62
   3ac90:	mov	r5, #44	; 0x2c
   3ac94:	tst	r1, #1
   3ac98:	beq	3acc0 <__assert_fail@plt+0x29ab4>
   3ac9c:	mov	r3, r0
   3aca0:	cmp	lr, #0
   3aca4:	moveq	r3, r0
   3aca8:	strbne	r5, [r3], #1
   3acac:	mov	lr, #1
   3acb0:	mov	r0, r3
   3acb4:	add	ip, r2, #49	; 0x31
   3acb8:	strb	r4, [r0], #2
   3acbc:	strb	ip, [r3, #1]
   3acc0:	lsrs	r1, r1, #1
   3acc4:	movne	r3, #1
   3acc8:	moveq	r3, #0
   3accc:	add	r2, r2, #1
   3acd0:	cmp	r2, #4
   3acd4:	movgt	r3, #0
   3acd8:	andle	r3, r3, #1
   3acdc:	cmp	r3, #0
   3ace0:	bne	3ac94 <__assert_fail@plt+0x29a88>
   3ace4:	mov	r3, #0
   3ace8:	strb	r3, [r0]
   3acec:	pop	{r4, r5, pc}
   3acf0:	mov	r3, #0
   3acf4:	strb	r3, [r0]
   3acf8:	bx	lr
   3acfc:	mov	ip, #0
   3ad00:	push	{r4, r5, r6, r7, r8, lr}
   3ad04:	mov	lr, ip
   3ad08:	ldr	r4, [pc, #144]	; 3ada0 <__assert_fail@plt+0x29b94>
   3ad0c:	mov	r5, #102	; 0x66
   3ad10:	mov	r6, #44	; 0x2c
   3ad14:	b	3ad24 <__assert_fail@plt+0x29b18>
   3ad18:	cmp	r2, #20
   3ad1c:	beq	3ad94 <__assert_fail@plt+0x29b88>
   3ad20:	mov	ip, r2
   3ad24:	add	r2, ip, #2
   3ad28:	and	r7, r1, #1
   3ad2c:	umull	r8, r3, r4, r2
   3ad30:	cmp	r7, #0
   3ad34:	lsr	r3, r3, #3
   3ad38:	add	r7, r3, #49	; 0x31
   3ad3c:	add	r3, r3, r3, lsl #2
   3ad40:	lsr	r1, r1, #1
   3ad44:	sub	r3, r2, r3, lsl #1
   3ad48:	add	r3, r3, #48	; 0x30
   3ad4c:	add	r2, ip, #1
   3ad50:	beq	3ad18 <__assert_fail@plt+0x29b0c>
   3ad54:	mov	r8, r0
   3ad58:	cmp	lr, #0
   3ad5c:	strbne	r6, [r8], #1
   3ad60:	movne	r0, r8
   3ad64:	cmp	ip, #3
   3ad68:	strb	r5, [r0]
   3ad6c:	strbhi	r7, [r0, #1]
   3ad70:	strbhi	r3, [r0, #2]
   3ad74:	mov	lr, #1
   3ad78:	addhi	r0, r0, #3
   3ad7c:	bhi	3ad18 <__assert_fail@plt+0x29b0c>
   3ad80:	add	r3, r2, #49	; 0x31
   3ad84:	strb	r3, [r0, #1]
   3ad88:	mov	lr, #1
   3ad8c:	add	r0, r0, #2
   3ad90:	b	3ad20 <__assert_fail@plt+0x29b14>
   3ad94:	mov	r3, #0
   3ad98:	strb	r3, [r0]
   3ad9c:	pop	{r4, r5, r6, r7, r8, pc}
   3ada0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   3ada4:	push	{r4, r5, r6, r8, r9, lr}
   3ada8:	mov	r6, r0
   3adac:	ldrb	r2, [r6], #1
   3adb0:	tst	r2, #128	; 0x80
   3adb4:	and	r2, r2, #127	; 0x7f
   3adb8:	uxtb	r8, r2
   3adbc:	beq	3ae00 <__assert_fail@plt+0x29bf4>
   3adc0:	mov	r9, #0
   3adc4:	mov	ip, #0
   3adc8:	ldrb	lr, [r6], #1
   3adcc:	add	ip, ip, #7
   3add0:	sub	r0, ip, #32
   3add4:	and	r4, lr, #127	; 0x7f
   3add8:	rsb	r5, ip, #32
   3addc:	uxtb	r2, r4
   3ade0:	tst	lr, #128	; 0x80
   3ade4:	lsl	r0, r2, r0
   3ade8:	orr	r0, r0, r2, lsr r5
   3adec:	orr	r4, r8, r2, lsl ip
   3adf0:	orr	r0, r0, r9
   3adf4:	mov	r8, r4
   3adf8:	mov	r9, r0
   3adfc:	bne	3adc8 <__assert_fail@plt+0x29bbc>
   3ae00:	and	r3, r1, #31
   3ae04:	mov	r2, r8
   3ae08:	ldr	r1, [pc, #12]	; 3ae1c <__assert_fail@plt+0x29c10>
   3ae0c:	ldr	r0, [pc, #12]	; 3ae20 <__assert_fail@plt+0x29c14>
   3ae10:	bl	10f24 <printf@plt>
   3ae14:	mov	r0, r6
   3ae18:	pop	{r4, r5, r6, r8, r9, pc}
   3ae1c:	andeq	ip, r7, ip, lsr #25
   3ae20:			; <UNDEFINED> instruction: 0x0007ccb0
   3ae24:	tst	r1, #32
   3ae28:	push	{r4, lr}
   3ae2c:	and	r2, r1, #31
   3ae30:	mov	r4, r0
   3ae34:	ldr	r1, [pc, #16]	; 3ae4c <__assert_fail@plt+0x29c40>
   3ae38:	ldrne	r0, [pc, #16]	; 3ae50 <__assert_fail@plt+0x29c44>
   3ae3c:	ldreq	r0, [pc, #16]	; 3ae54 <__assert_fail@plt+0x29c48>
   3ae40:	bl	10f24 <printf@plt>
   3ae44:	mov	r0, r4
   3ae48:	pop	{r4, pc}
   3ae4c:	ldrdeq	ip, [r7], -r0
   3ae50:	ldrdeq	ip, [r7], -r4
   3ae54:	strdeq	ip, [r7], -r0
   3ae58:	tst	r1, #16
   3ae5c:	push	{r4, r5, r6, lr}
   3ae60:	and	r1, r1, #15
   3ae64:	sub	sp, sp, #200	; 0xc8
   3ae68:	mov	r5, r0
   3ae6c:	beq	3aedc <__assert_fail@plt+0x29cd0>
   3ae70:	mov	r2, sp
   3ae74:	mov	r3, #4
   3ae78:	mov	lr, #0
   3ae7c:	mov	r4, #114	; 0x72
   3ae80:	mov	r6, #44	; 0x2c
   3ae84:	tst	r1, #1
   3ae88:	beq	3aeb0 <__assert_fail@plt+0x29ca4>
   3ae8c:	mov	r0, r2
   3ae90:	cmp	lr, #0
   3ae94:	moveq	r0, r2
   3ae98:	strbne	r6, [r0], #1
   3ae9c:	mov	lr, #1
   3aea0:	mov	r2, r0
   3aea4:	rsb	ip, r3, #56	; 0x38
   3aea8:	strb	r4, [r2], #2
   3aeac:	strb	ip, [r0, #1]
   3aeb0:	subs	r3, r3, #1
   3aeb4:	lsr	r1, r1, #1
   3aeb8:	bne	3ae84 <__assert_fail@plt+0x29c78>
   3aebc:	strb	r3, [r2]
   3aec0:	ldr	r1, [pc, #56]	; 3af00 <__assert_fail@plt+0x29cf4>
   3aec4:	mov	r2, sp
   3aec8:	ldr	r0, [pc, #52]	; 3af04 <__assert_fail@plt+0x29cf8>
   3aecc:	bl	10f24 <printf@plt>
   3aed0:	mov	r0, r5
   3aed4:	add	sp, sp, #200	; 0xc8
   3aed8:	pop	{r4, r5, r6, pc}
   3aedc:	mov	r0, sp
   3aee0:	bl	3acfc <__assert_fail@plt+0x29af0>
   3aee4:	mov	r2, sp
   3aee8:	ldr	r1, [pc, #16]	; 3af00 <__assert_fail@plt+0x29cf4>
   3aeec:	ldr	r0, [pc, #20]	; 3af08 <__assert_fail@plt+0x29cfc>
   3aef0:	bl	10f24 <printf@plt>
   3aef4:	mov	r0, r5
   3aef8:	add	sp, sp, #200	; 0xc8
   3aefc:	pop	{r4, r5, r6, pc}
   3af00:	andeq	ip, r7, ip, lsl #26
   3af04:	andeq	ip, r7, r0, lsl sp
   3af08:	andeq	ip, r7, ip, lsr #26
   3af0c:	push	{r4, lr}
   3af10:	sub	sp, sp, #24
   3af14:	mov	r4, r0
   3af18:	and	r1, r1, #31
   3af1c:	add	r0, sp, #4
   3af20:	bl	3ac78 <__assert_fail@plt+0x29a6c>
   3af24:	add	r2, sp, #4
   3af28:	ldr	r1, [pc, #16]	; 3af40 <__assert_fail@plt+0x29d34>
   3af2c:	ldr	r0, [pc, #16]	; 3af44 <__assert_fail@plt+0x29d38>
   3af30:	bl	10f24 <printf@plt>
   3af34:	mov	r0, r4
   3af38:	add	sp, sp, #24
   3af3c:	pop	{r4, pc}
   3af40:	andeq	ip, r7, r8, asr #26
   3af44:	andeq	ip, r7, ip, asr #26
   3af48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3af4c:	mov	r6, r0
   3af50:	mov	lr, r1
   3af54:	ldrb	r4, [r6], #1
   3af58:	mov	r7, r2
   3af5c:	mov	r5, #0
   3af60:	tst	r4, #128	; 0x80
   3af64:	and	r4, r4, #127	; 0x7f
   3af68:	uxtb	r4, r4
   3af6c:	beq	3afb0 <__assert_fail@plt+0x29da4>
   3af70:	mov	r2, #0
   3af74:	ldrb	ip, [r6], #1
   3af78:	add	r2, r2, #7
   3af7c:	sub	r3, r2, #32
   3af80:	and	r0, ip, #127	; 0x7f
   3af84:	rsb	r1, r2, #32
   3af88:	uxtb	r8, r0
   3af8c:	tst	ip, #128	; 0x80
   3af90:	lsl	r3, r8, r3
   3af94:	orr	r3, r3, r8, lsr r1
   3af98:	orr	r0, r4, r8, lsl r2
   3af9c:	orr	r3, r3, r5
   3afa0:	mov	r9, #0
   3afa4:	mov	r4, r0
   3afa8:	mov	r5, r3
   3afac:	bne	3af74 <__assert_fail@plt+0x29d68>
   3afb0:	ldr	r3, [pc, #56]	; 3aff0 <__assert_fail@plt+0x29de4>
   3afb4:	and	lr, lr, #3
   3afb8:	ldr	r0, [pc, #52]	; 3aff4 <__assert_fail@plt+0x29de8>
   3afbc:	cmp	lr, #1
   3afc0:	moveq	r3, #1
   3afc4:	ldr	r2, [pc, #44]	; 3aff8 <__assert_fail@plt+0x29dec>
   3afc8:	movne	r2, r3
   3afcc:	movne	r3, #0
   3afd0:	str	r3, [r7]
   3afd4:	strd	r4, [r0]
   3afd8:	mov	r3, r4
   3afdc:	ldr	r1, [pc, #24]	; 3affc <__assert_fail@plt+0x29df0>
   3afe0:	ldr	r0, [pc, #24]	; 3b000 <__assert_fail@plt+0x29df4>
   3afe4:	bl	10f24 <printf@plt>
   3afe8:	mov	r0, r6
   3afec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aff0:	andeq	ip, r7, r0, ror sp
   3aff4:	andeq	ip, r9, r8, asr #11
   3aff8:	andeq	ip, r7, r8, ror #26
   3affc:	andeq	ip, r7, ip, ror sp
   3b000:	andeq	ip, r7, r0, lsl #27
   3b004:	and	r3, r1, #32
   3b008:	push	{r4, lr}
   3b00c:	cmp	r3, #0
   3b010:	mov	r4, r0
   3b014:	ldr	ip, [pc, #64]	; 3b05c <__assert_fail@plt+0x29e50>
   3b018:	ldr	r0, [pc, #64]	; 3b060 <__assert_fail@plt+0x29e54>
   3b01c:	movne	lr, #1
   3b020:	moveq	lr, #0
   3b024:	ldr	r3, [pc, #56]	; 3b064 <__assert_fail@plt+0x29e58>
   3b028:	str	lr, [r2]
   3b02c:	and	r1, r1, #31
   3b030:	movne	r2, ip
   3b034:	mov	ip, #0
   3b038:	moveq	r2, r3
   3b03c:	str	r1, [r0]
   3b040:	mov	r3, r1
   3b044:	str	ip, [r0, #4]
   3b048:	ldr	r1, [pc, #24]	; 3b068 <__assert_fail@plt+0x29e5c>
   3b04c:	ldr	r0, [pc, #24]	; 3b06c <__assert_fail@plt+0x29e60>
   3b050:	bl	10f24 <printf@plt>
   3b054:	mov	r0, r4
   3b058:	pop	{r4, pc}
   3b05c:	andeq	ip, r7, r8, ror #26
   3b060:	andeq	ip, r9, r8, asr #11
   3b064:	andeq	ip, r7, r0, ror sp
   3b068:	muleq	r7, r8, sp
   3b06c:	andeq	ip, r7, r0, lsl #27
   3b070:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b074:	mov	r8, r0
   3b078:	ldrb	r4, [r0, #1]
   3b07c:	ldrb	sl, [r8], #2
   3b080:	lsl	r9, r1, #1
   3b084:	tst	r4, #128	; 0x80
   3b088:	and	r4, r4, #127	; 0x7f
   3b08c:	and	r9, r9, #14
   3b090:	orr	r9, r9, sl, lsr #7
   3b094:	sub	sp, sp, #88	; 0x58
   3b098:	uxtb	r4, r4
   3b09c:	mov	r5, #0
   3b0a0:	and	sl, sl, #127	; 0x7f
   3b0a4:	beq	3b0e4 <__assert_fail@plt+0x29ed8>
   3b0a8:	mov	r1, #0
   3b0ac:	ldrb	r0, [r8], #1
   3b0b0:	add	r1, r1, #7
   3b0b4:	sub	r3, r1, #32
   3b0b8:	and	r6, r0, #127	; 0x7f
   3b0bc:	rsb	ip, r1, #32
   3b0c0:	uxtb	r6, r6
   3b0c4:	tst	r0, #128	; 0x80
   3b0c8:	lsl	r3, r6, r3
   3b0cc:	orr	r3, r3, r6, lsr ip
   3b0d0:	orr	r6, r4, r6, lsl r1
   3b0d4:	orr	r3, r3, r5
   3b0d8:	mov	r4, r6
   3b0dc:	mov	r5, r3
   3b0e0:	bne	3b0ac <__assert_fail@plt+0x29ea0>
   3b0e4:	tst	r9, #8
   3b0e8:	mov	r3, #0
   3b0ec:	strb	r3, [sp, #24]
   3b0f0:	str	r3, [r2]
   3b0f4:	ldrne	r3, [pc, #264]	; 3b204 <__assert_fail@plt+0x29ff8>
   3b0f8:	ldr	r1, [pc, #264]	; 3b208 <__assert_fail@plt+0x29ffc>
   3b0fc:	ldrne	r7, [pc, #264]	; 3b20c <__assert_fail@plt+0x2a000>
   3b100:	ldrne	r3, [r3]
   3b104:	ldreq	r7, [pc, #260]	; 3b210 <__assert_fail@plt+0x2a004>
   3b108:	strhne	r3, [sp, #24]
   3b10c:	lsrne	r3, r3, #16
   3b110:	strbne	r3, [sp, #26]
   3b114:	tst	r9, #4
   3b118:	strd	r4, [r1]
   3b11c:	add	r6, sp, #24
   3b120:	bne	3b168 <__assert_fail@plt+0x29f5c>
   3b124:	tst	r9, #2
   3b128:	bne	3b1a8 <__assert_fail@plt+0x29f9c>
   3b12c:	tst	r9, #1
   3b130:	bne	3b1d8 <__assert_fail@plt+0x29fcc>
   3b134:	mov	r2, sl
   3b138:	add	r0, sp, #8
   3b13c:	ldr	r1, [pc, #208]	; 3b214 <__assert_fail@plt+0x2a008>
   3b140:	bl	1114c <sprintf@plt>
   3b144:	add	r3, sp, #8
   3b148:	str	r4, [sp]
   3b14c:	mov	r2, r6
   3b150:	ldr	r1, [pc, #192]	; 3b218 <__assert_fail@plt+0x2a00c>
   3b154:	ldr	r0, [pc, #192]	; 3b21c <__assert_fail@plt+0x2a010>
   3b158:	bl	10f24 <printf@plt>
   3b15c:	mov	r0, r8
   3b160:	add	sp, sp, #88	; 0x58
   3b164:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b168:	mov	r0, r6
   3b16c:	bl	11080 <strlen@plt>
   3b170:	mov	r1, r7
   3b174:	ldr	r7, [pc, #144]	; 3b20c <__assert_fail@plt+0x2a000>
   3b178:	add	r0, r6, r0
   3b17c:	bl	10f84 <stpcpy@plt>
   3b180:	ldr	r2, [pc, #152]	; 3b220 <__assert_fail@plt+0x2a014>
   3b184:	tst	r9, #2
   3b188:	ldrh	r1, [r2, #4]
   3b18c:	mov	r3, r0
   3b190:	ldr	r0, [r2]
   3b194:	ldrb	r2, [r2, #6]
   3b198:	str	r0, [r3]
   3b19c:	strh	r1, [r3, #4]
   3b1a0:	strb	r2, [r3, #6]
   3b1a4:	beq	3b12c <__assert_fail@plt+0x29f20>
   3b1a8:	mov	r0, r6
   3b1ac:	bl	11080 <strlen@plt>
   3b1b0:	mov	r1, r7
   3b1b4:	ldr	r7, [pc, #80]	; 3b20c <__assert_fail@plt+0x2a000>
   3b1b8:	add	r0, r6, r0
   3b1bc:	bl	10f84 <stpcpy@plt>
   3b1c0:	ldr	r2, [pc, #92]	; 3b224 <__assert_fail@plt+0x2a018>
   3b1c4:	tst	r9, #1
   3b1c8:	mov	r3, r0
   3b1cc:	ldr	r0, [r2]
   3b1d0:	str	r0, [r3]
   3b1d4:	beq	3b134 <__assert_fail@plt+0x29f28>
   3b1d8:	mov	r0, r6
   3b1dc:	bl	11080 <strlen@plt>
   3b1e0:	mov	r1, r7
   3b1e4:	add	r0, r6, r0
   3b1e8:	bl	10f84 <stpcpy@plt>
   3b1ec:	ldr	r3, [pc, #52]	; 3b228 <__assert_fail@plt+0x2a01c>
   3b1f0:	ldrh	r2, [r3]
   3b1f4:	ldrb	r3, [r3, #2]
   3b1f8:	strh	r2, [r0]
   3b1fc:	strb	r3, [r0, #2]
   3b200:	b	3b134 <__assert_fail@plt+0x29f28>
   3b204:	andeq	ip, r7, r0, lsr #27
   3b208:	andeq	ip, r9, r8, asr #11
   3b20c:	muleq	r7, ip, sp
   3b210:	andeq	fp, r6, ip, ror #2
   3b214:			; <UNDEFINED> instruction: 0x0007cdb4
   3b218:	andeq	ip, r6, ip, lsl #4
   3b21c:			; <UNDEFINED> instruction: 0x0007cdb8
   3b220:	andeq	ip, r7, r4, lsr #27
   3b224:	andeq	ip, r7, ip, lsr #27
   3b228:			; <UNDEFINED> instruction: 0x0007cdb0
   3b22c:	lsr	r3, r1, #5
   3b230:	and	r3, r3, #3
   3b234:	cmp	r3, #2
   3b238:	beq	3b258 <__assert_fail@plt+0x2a04c>
   3b23c:	cmp	r3, #3
   3b240:	beq	3b26c <__assert_fail@plt+0x2a060>
   3b244:	cmp	r3, #1
   3b248:	and	r2, r1, #31
   3b24c:	beq	3b264 <__assert_fail@plt+0x2a058>
   3b250:	ldr	r1, [pc, #36]	; 3b27c <__assert_fail@plt+0x2a070>
   3b254:	b	1114c <sprintf@plt>
   3b258:	and	r2, r1, #31
   3b25c:	ldr	r1, [pc, #28]	; 3b280 <__assert_fail@plt+0x2a074>
   3b260:	b	1114c <sprintf@plt>
   3b264:	ldr	r1, [pc, #24]	; 3b284 <__assert_fail@plt+0x2a078>
   3b268:	b	1114c <sprintf@plt>
   3b26c:	ldr	r3, [pc, #20]	; 3b288 <__assert_fail@plt+0x2a07c>
   3b270:	and	r1, r1, #15
   3b274:	ldr	r1, [r3, r1, lsl #2]
   3b278:	b	10ff0 <strcpy@plt>
   3b27c:			; <UNDEFINED> instruction: 0x0007cdb4
   3b280:	strdeq	ip, [r7], -r0
   3b284:	andeq	ip, r7, ip, ror #27
   3b288:	andeq	ip, r7, r0, lsr #24
   3b28c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b290:	mov	r6, r0
   3b294:	ldrb	r4, [r0, #1]
   3b298:	sub	sp, sp, #36	; 0x24
   3b29c:	ldrb	ip, [r6], #2
   3b2a0:	tst	r4, #128	; 0x80
   3b2a4:	and	r4, r4, #127	; 0x7f
   3b2a8:	movne	r5, #0
   3b2ac:	uxtb	r4, r4
   3b2b0:	movne	r2, #0
   3b2b4:	beq	3b2f0 <__assert_fail@plt+0x2a0e4>
   3b2b8:	ldrb	r1, [r6], #1
   3b2bc:	add	r2, r2, #7
   3b2c0:	sub	r3, r2, #32
   3b2c4:	and	r8, r1, #127	; 0x7f
   3b2c8:	rsb	r0, r2, #32
   3b2cc:	uxtb	r8, r8
   3b2d0:	tst	r1, #128	; 0x80
   3b2d4:	lsl	r3, r8, r3
   3b2d8:	orr	r3, r3, r8, lsr r0
   3b2dc:	orr	r8, r4, r8, lsl r2
   3b2e0:	orr	r3, r3, r5
   3b2e4:	mov	r4, r8
   3b2e8:	mov	r5, r3
   3b2ec:	bne	3b2b8 <__assert_fail@plt+0x2a0ac>
   3b2f0:	ldrb	r0, [r6], #1
   3b2f4:	mov	fp, #0
   3b2f8:	tst	r0, #128	; 0x80
   3b2fc:	and	r0, r0, #127	; 0x7f
   3b300:	uxtb	sl, r0
   3b304:	beq	3b344 <__assert_fail@plt+0x2a138>
   3b308:	mov	r3, #0
   3b30c:	ldrb	lr, [r6], #1
   3b310:	add	r3, r3, #7
   3b314:	sub	r2, r3, #32
   3b318:	and	r8, lr, #127	; 0x7f
   3b31c:	rsb	r7, r3, #32
   3b320:	uxtb	r8, r8
   3b324:	tst	lr, #128	; 0x80
   3b328:	lsl	r2, r8, r2
   3b32c:	orr	r2, r2, r8, lsr r7
   3b330:	orr	r8, sl, r8, lsl r3
   3b334:	orr	r2, r2, fp
   3b338:	mov	sl, r8
   3b33c:	mov	fp, r2
   3b340:	bne	3b30c <__assert_fail@plt+0x2a100>
   3b344:	tst	ip, #128	; 0x80
   3b348:	add	r0, sp, #12
   3b34c:	and	r1, ip, #127	; 0x7f
   3b350:	lsl	r7, sl, #2
   3b354:	bne	3b380 <__assert_fail@plt+0x2a174>
   3b358:	bl	3b22c <__assert_fail@plt+0x2a020>
   3b35c:	add	r2, sp, #12
   3b360:	str	r7, [sp]
   3b364:	mov	r3, r4
   3b368:	ldr	r1, [pc, #56]	; 3b3a8 <__assert_fail@plt+0x2a19c>
   3b36c:	ldr	r0, [pc, #56]	; 3b3ac <__assert_fail@plt+0x2a1a0>
   3b370:	bl	10f24 <printf@plt>
   3b374:	mov	r0, r6
   3b378:	add	sp, sp, #36	; 0x24
   3b37c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b380:	bl	3b22c <__assert_fail@plt+0x2a020>
   3b384:	add	r2, sp, #12
   3b388:	str	r7, [sp]
   3b38c:	mov	r3, r4
   3b390:	ldr	r1, [pc, #16]	; 3b3a8 <__assert_fail@plt+0x2a19c>
   3b394:	ldr	r0, [pc, #20]	; 3b3b0 <__assert_fail@plt+0x2a1a4>
   3b398:	bl	10f24 <printf@plt>
   3b39c:	mov	r0, r6
   3b3a0:	add	sp, sp, #36	; 0x24
   3b3a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b3a8:	andeq	lr, r6, ip, ror pc
   3b3ac:	andeq	ip, r7, r0, lsr #28
   3b3b0:	strdeq	ip, [r7], -r4
   3b3b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3b3b8:	mov	r5, #0
   3b3bc:	ldrb	r6, [r0, #2]
   3b3c0:	sub	sp, sp, #40	; 0x28
   3b3c4:	add	r8, r0, #3
   3b3c8:	tst	r6, #128	; 0x80
   3b3cc:	and	r6, r6, #127	; 0x7f
   3b3d0:	ldrb	r2, [r0]
   3b3d4:	uxtb	r4, r6
   3b3d8:	ldrb	r1, [r0, #1]
   3b3dc:	strd	r4, [sp, #8]
   3b3e0:	movne	r0, #0
   3b3e4:	beq	3b424 <__assert_fail@plt+0x2a218>
   3b3e8:	ldrb	ip, [r8], #1
   3b3ec:	add	r0, r0, #7
   3b3f0:	sub	r3, r0, #32
   3b3f4:	and	r4, ip, #127	; 0x7f
   3b3f8:	ldrd	r6, [sp, #8]
   3b3fc:	uxtb	r4, r4
   3b400:	rsb	lr, r0, #32
   3b404:	lsl	r3, r4, r3
   3b408:	orr	r3, r3, r4, lsr lr
   3b40c:	orr	r4, r6, r4, lsl r0
   3b410:	orr	r3, r3, r7
   3b414:	tst	ip, #128	; 0x80
   3b418:	str	r4, [sp, #8]
   3b41c:	str	r3, [sp, #12]
   3b420:	bne	3b3e8 <__assert_fail@plt+0x2a1dc>
   3b424:	ldrb	r4, [r8], #1
   3b428:	mov	r7, #0
   3b42c:	tst	r4, #128	; 0x80
   3b430:	and	r4, r4, #127	; 0x7f
   3b434:	uxtb	r6, r4
   3b438:	beq	3b478 <__assert_fail@plt+0x2a26c>
   3b43c:	mov	r3, #0
   3b440:	ldrb	ip, [r8], #1
   3b444:	add	r3, r3, #7
   3b448:	sub	r0, r3, #32
   3b44c:	and	sl, ip, #127	; 0x7f
   3b450:	rsb	lr, r3, #32
   3b454:	uxtb	sl, sl
   3b458:	tst	ip, #128	; 0x80
   3b45c:	lsl	r0, sl, r0
   3b460:	orr	r0, r0, sl, lsr lr
   3b464:	orr	sl, r6, sl, lsl r3
   3b468:	orr	r0, r0, r7
   3b46c:	mov	r6, sl
   3b470:	mov	r7, r0
   3b474:	bne	3b440 <__assert_fail@plt+0x2a234>
   3b478:	add	r7, sp, #20
   3b47c:	tst	r2, #128	; 0x80
   3b480:	mov	r0, r7
   3b484:	and	r1, r1, #127	; 0x7f
   3b488:	and	r5, r2, #63	; 0x3f
   3b48c:	lsl	r4, r6, #2
   3b490:	bne	3b4c0 <__assert_fail@plt+0x2a2b4>
   3b494:	bl	3b22c <__assert_fail@plt+0x2a020>
   3b498:	str	r7, [sp]
   3b49c:	str	r4, [sp, #4]
   3b4a0:	ldr	r3, [sp, #8]
   3b4a4:	mov	r2, r5
   3b4a8:	ldr	r1, [pc, #60]	; 3b4ec <__assert_fail@plt+0x2a2e0>
   3b4ac:	ldr	r0, [pc, #60]	; 3b4f0 <__assert_fail@plt+0x2a2e4>
   3b4b0:	bl	10f24 <printf@plt>
   3b4b4:	mov	r0, r8
   3b4b8:	add	sp, sp, #40	; 0x28
   3b4bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3b4c0:	bl	3b22c <__assert_fail@plt+0x2a020>
   3b4c4:	str	r7, [sp]
   3b4c8:	str	r4, [sp, #4]
   3b4cc:	ldr	r3, [sp, #8]
   3b4d0:	mov	r2, r5
   3b4d4:	ldr	r1, [pc, #16]	; 3b4ec <__assert_fail@plt+0x2a2e0>
   3b4d8:	ldr	r0, [pc, #20]	; 3b4f4 <__assert_fail@plt+0x2a2e8>
   3b4dc:	bl	10f24 <printf@plt>
   3b4e0:	mov	r0, r8
   3b4e4:	add	sp, sp, #40	; 0x28
   3b4e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3b4ec:	andeq	ip, r7, r4, asr lr
   3b4f0:	andeq	ip, r7, ip, lsl #29
   3b4f4:	andeq	ip, r7, r8, asr lr
   3b4f8:	tst	r1, #8
   3b4fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b500:	mov	r7, r0
   3b504:	sub	sp, sp, #228	; 0xe4
   3b508:	bne	3b55c <__assert_fail@plt+0x2a350>
   3b50c:	lsl	r6, r1, #1
   3b510:	ldrb	r1, [r7], #1
   3b514:	and	r6, r6, #14
   3b518:	and	r3, r1, #127	; 0x7f
   3b51c:	orr	r1, r6, r1, lsr #7
   3b520:	cmp	r1, #11
   3b524:	ldrls	pc, [pc, r1, lsl #2]
   3b528:	b	3b704 <__assert_fail@plt+0x2a4f8>
   3b52c:			; <UNDEFINED> instruction: 0x0003b7b8
   3b530:	andeq	fp, r3, r8, lsl #16
   3b534:	strdeq	fp, [r3], -r4
   3b538:	andeq	fp, r3, r0, ror #15
   3b53c:	andeq	fp, r3, ip, asr #15
   3b540:	andeq	fp, r3, ip, ror r7
   3b544:	andeq	fp, r3, r8, ror #14
   3b548:	andeq	fp, r3, r4, asr r7
   3b54c:	andeq	fp, r3, r0, asr #14
   3b550:	andeq	fp, r3, r4, lsr #15
   3b554:	muleq	r3, r0, r7
   3b558:	andeq	fp, r3, ip, lsr #14
   3b55c:	ands	r6, r1, #7
   3b560:	bne	3b648 <__assert_fail@plt+0x2a43c>
   3b564:	ldr	r9, [pc, #688]	; 3b81c <__assert_fail@plt+0x2a610>
   3b568:	ldm	r9, {r1, r3}
   3b56c:	lsr	r1, r1, #2
   3b570:	orr	r1, r1, r3, lsl #30
   3b574:	add	r3, r0, r1
   3b578:	cmp	r2, r3
   3b57c:	bcc	3b6ec <__assert_fail@plt+0x2a4e0>
   3b580:	ldr	r1, [pc, #664]	; 3b820 <__assert_fail@plt+0x2a614>
   3b584:	ldr	r0, [pc, #664]	; 3b824 <__assert_fail@plt+0x2a618>
   3b588:	bl	10f24 <printf@plt>
   3b58c:	ldrd	r2, [r9]
   3b590:	orrs	r3, r2, r3
   3b594:	beq	3b718 <__assert_fail@plt+0x2a50c>
   3b598:	mov	r4, #0
   3b59c:	mov	r5, #0
   3b5a0:	b	3b5f8 <__assert_fail@plt+0x2a3ec>
   3b5a4:	orrs	r2, r4, r5
   3b5a8:	ldrb	r6, [r3], #1
   3b5ac:	ldr	r2, [pc, #628]	; 3b828 <__assert_fail@plt+0x2a61c>
   3b5b0:	mov	r7, r3
   3b5b4:	ldr	r8, [r2]
   3b5b8:	bne	3b614 <__assert_fail@plt+0x2a408>
   3b5bc:	mvn	r3, r4
   3b5c0:	and	r3, r3, #3
   3b5c4:	ldr	r2, [pc, #608]	; 3b82c <__assert_fail@plt+0x2a620>
   3b5c8:	lsl	r3, r3, #1
   3b5cc:	mov	r1, r8
   3b5d0:	asr	r3, r6, r3
   3b5d4:	and	r3, r3, #3
   3b5d8:	ldrb	r0, [r2, r3]
   3b5dc:	bl	11158 <putc@plt>
   3b5e0:	ldrd	r2, [r9]
   3b5e4:	adds	r4, r4, #1
   3b5e8:	adc	r5, r5, #0
   3b5ec:	cmp	r5, r3
   3b5f0:	cmpeq	r4, r2
   3b5f4:	bcs	3b718 <__assert_fail@plt+0x2a50c>
   3b5f8:	and	sl, r4, #3
   3b5fc:	mov	fp, #0
   3b600:	orrs	r2, sl, fp
   3b604:	mov	r3, r7
   3b608:	beq	3b5a4 <__assert_fail@plt+0x2a398>
   3b60c:	ldr	r3, [pc, #532]	; 3b828 <__assert_fail@plt+0x2a61c>
   3b610:	ldr	r8, [r3]
   3b614:	mov	r2, #3
   3b618:	mov	r3, #0
   3b61c:	mov	r0, r4
   3b620:	mov	r1, r5
   3b624:	bl	58c00 <warn@@Base+0x3e30>
   3b628:	orrs	r3, r2, r3
   3b62c:	bne	3b5bc <__assert_fail@plt+0x2a3b0>
   3b630:	mov	r1, r8
   3b634:	mov	r0, #44	; 0x2c
   3b638:	bl	11158 <putc@plt>
   3b63c:	ldr	r3, [pc, #484]	; 3b828 <__assert_fail@plt+0x2a61c>
   3b640:	ldr	r8, [r3]
   3b644:	b	3b5bc <__assert_fail@plt+0x2a3b0>
   3b648:	cmp	r6, #1
   3b64c:	bne	3b704 <__assert_fail@plt+0x2a4f8>
   3b650:	ldrh	r4, [r0, #1]
   3b654:	ldrb	r2, [r7], #3
   3b658:	add	r0, sp, #4
   3b65c:	rev16	r4, r4
   3b660:	mov	r3, #4
   3b664:	lsl	r1, r2, #16
   3b668:	uxth	r4, r4
   3b66c:	and	r1, r1, #983040	; 0xf0000
   3b670:	orr	r1, r1, r4
   3b674:	lsr	r2, r2, #4
   3b678:	mov	r4, #0
   3b67c:	mov	r5, #114	; 0x72
   3b680:	mov	r6, #44	; 0x2c
   3b684:	tst	r2, #1
   3b688:	rsb	lr, r3, #56	; 0x38
   3b68c:	beq	3b6b4 <__assert_fail@plt+0x2a4a8>
   3b690:	mov	ip, r0
   3b694:	cmp	r4, #0
   3b698:	strbne	r6, [ip], #1
   3b69c:	movne	r0, ip
   3b6a0:	mov	ip, r0
   3b6a4:	mov	r4, #1
   3b6a8:	strb	r5, [ip], #2
   3b6ac:	strb	lr, [r0, #1]
   3b6b0:	mov	r0, ip
   3b6b4:	subs	r3, r3, #1
   3b6b8:	lsr	r2, r2, #1
   3b6bc:	bne	3b684 <__assert_fail@plt+0x2a478>
   3b6c0:	strb	r3, [r0]
   3b6c4:	add	r0, sp, #24
   3b6c8:	bl	3acfc <__assert_fail@plt+0x29af0>
   3b6cc:	add	r3, sp, #24
   3b6d0:	add	r2, sp, #4
   3b6d4:	ldr	r1, [pc, #340]	; 3b830 <__assert_fail@plt+0x2a624>
   3b6d8:	ldr	r0, [pc, #340]	; 3b834 <__assert_fail@plt+0x2a628>
   3b6dc:	bl	10f24 <printf@plt>
   3b6e0:	mov	r0, r7
   3b6e4:	add	sp, sp, #228	; 0xe4
   3b6e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b6ec:	sub	r2, r2, r0
   3b6f0:	ldr	r0, [pc, #320]	; 3b838 <__assert_fail@plt+0x2a62c>
   3b6f4:	bl	10f24 <printf@plt>
   3b6f8:	mov	r0, r7
   3b6fc:	add	sp, sp, #228	; 0xe4
   3b700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b704:	ldr	r0, [pc, #304]	; 3b83c <__assert_fail@plt+0x2a630>
   3b708:	bl	10f24 <printf@plt>
   3b70c:	mov	r0, r7
   3b710:	add	sp, sp, #228	; 0xe4
   3b714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b718:	ldr	r0, [pc, #288]	; 3b840 <__assert_fail@plt+0x2a634>
   3b71c:	bl	11014 <puts@plt>
   3b720:	mov	r0, r7
   3b724:	add	sp, sp, #228	; 0xe4
   3b728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b72c:	mov	r2, r3
   3b730:	ldr	r1, [pc, #268]	; 3b844 <__assert_fail@plt+0x2a638>
   3b734:	ldr	r0, [pc, #268]	; 3b848 <__assert_fail@plt+0x2a63c>
   3b738:	bl	10f24 <printf@plt>
   3b73c:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b740:	ldr	r2, [pc, #260]	; 3b84c <__assert_fail@plt+0x2a640>
   3b744:	ldr	r1, [pc, #248]	; 3b844 <__assert_fail@plt+0x2a638>
   3b748:	ldr	r0, [pc, #256]	; 3b850 <__assert_fail@plt+0x2a644>
   3b74c:	bl	10f24 <printf@plt>
   3b750:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b754:	ldr	r2, [pc, #248]	; 3b854 <__assert_fail@plt+0x2a648>
   3b758:	ldr	r1, [pc, #228]	; 3b844 <__assert_fail@plt+0x2a638>
   3b75c:	ldr	r0, [pc, #236]	; 3b850 <__assert_fail@plt+0x2a644>
   3b760:	bl	10f24 <printf@plt>
   3b764:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b768:	mov	r2, r3
   3b76c:	ldr	r1, [pc, #208]	; 3b844 <__assert_fail@plt+0x2a638>
   3b770:	ldr	r0, [pc, #224]	; 3b858 <__assert_fail@plt+0x2a64c>
   3b774:	bl	10f24 <printf@plt>
   3b778:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b77c:	ldr	r2, [pc, #216]	; 3b85c <__assert_fail@plt+0x2a650>
   3b780:	ldr	r1, [pc, #188]	; 3b844 <__assert_fail@plt+0x2a638>
   3b784:	ldr	r0, [pc, #196]	; 3b850 <__assert_fail@plt+0x2a644>
   3b788:	bl	10f24 <printf@plt>
   3b78c:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b790:	ldr	r2, [pc, #200]	; 3b860 <__assert_fail@plt+0x2a654>
   3b794:	ldr	r1, [pc, #168]	; 3b844 <__assert_fail@plt+0x2a638>
   3b798:	ldr	r0, [pc, #176]	; 3b850 <__assert_fail@plt+0x2a644>
   3b79c:	bl	10f24 <printf@plt>
   3b7a0:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b7a4:	ldr	r2, [pc, #184]	; 3b864 <__assert_fail@plt+0x2a658>
   3b7a8:	ldr	r1, [pc, #148]	; 3b844 <__assert_fail@plt+0x2a638>
   3b7ac:	ldr	r0, [pc, #156]	; 3b850 <__assert_fail@plt+0x2a644>
   3b7b0:	bl	10f24 <printf@plt>
   3b7b4:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b7b8:	ldr	r2, [pc, #168]	; 3b868 <__assert_fail@plt+0x2a65c>
   3b7bc:	ldr	r1, [pc, #128]	; 3b844 <__assert_fail@plt+0x2a638>
   3b7c0:	ldr	r0, [pc, #136]	; 3b850 <__assert_fail@plt+0x2a644>
   3b7c4:	bl	10f24 <printf@plt>
   3b7c8:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b7cc:	ldr	r2, [pc, #152]	; 3b86c <__assert_fail@plt+0x2a660>
   3b7d0:	ldr	r1, [pc, #108]	; 3b844 <__assert_fail@plt+0x2a638>
   3b7d4:	ldr	r0, [pc, #116]	; 3b850 <__assert_fail@plt+0x2a644>
   3b7d8:	bl	10f24 <printf@plt>
   3b7dc:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b7e0:	ldr	r2, [pc, #136]	; 3b870 <__assert_fail@plt+0x2a664>
   3b7e4:	ldr	r1, [pc, #88]	; 3b844 <__assert_fail@plt+0x2a638>
   3b7e8:	ldr	r0, [pc, #96]	; 3b850 <__assert_fail@plt+0x2a644>
   3b7ec:	bl	10f24 <printf@plt>
   3b7f0:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b7f4:	ldr	r2, [pc, #120]	; 3b874 <__assert_fail@plt+0x2a668>
   3b7f8:	ldr	r1, [pc, #68]	; 3b844 <__assert_fail@plt+0x2a638>
   3b7fc:	ldr	r0, [pc, #76]	; 3b850 <__assert_fail@plt+0x2a644>
   3b800:	bl	10f24 <printf@plt>
   3b804:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b808:	ldr	r2, [pc, #104]	; 3b878 <__assert_fail@plt+0x2a66c>
   3b80c:	ldr	r1, [pc, #48]	; 3b844 <__assert_fail@plt+0x2a638>
   3b810:	ldr	r0, [pc, #56]	; 3b850 <__assert_fail@plt+0x2a644>
   3b814:	bl	10f24 <printf@plt>
   3b818:	b	3b6e0 <__assert_fail@plt+0x2a4d4>
   3b81c:	andeq	ip, r9, r8, asr #11
   3b820:	andeq	ip, r7, r4, lsl #31
   3b824:	andeq	ip, r7, r8, lsl #31
   3b828:	andeq	sl, r9, ip, lsr #8
   3b82c:	andeq	ip, r7, r0, lsr #31
   3b830:	andeq	ip, r7, ip, lsr #31
   3b834:			; <UNDEFINED> instruction: 0x0007cfb0
   3b838:	andeq	ip, r7, r0, asr pc
   3b83c:	andeq	ip, r7, r8, lsr pc
   3b840:	andeq	ip, r7, r8, lsr #31
   3b844:	andeq	ip, r7, r8, asr #29
   3b848:	andeq	ip, r7, ip, lsl pc
   3b84c:	andeq	ip, r7, r4, lsl #30
   3b850:	andeq	ip, r7, ip, asr #29
   3b854:	strdeq	ip, [r7], -ip	; <UNPREDICTABLE>
   3b858:	andeq	ip, r7, r8, ror #29
   3b85c:	andeq	ip, r7, r4, ror #29
   3b860:	andeq	ip, r7, r4, lsl pc
   3b864:	andeq	ip, r7, r8, lsl #30
   3b868:	andeq	ip, r7, ip, lsr #27
   3b86c:	andeq	sp, r7, r4, asr #4
   3b870:			; <UNDEFINED> instruction: 0x0007cdb0
   3b874:	andeq	ip, r7, r0, ror #29
   3b878:	andeq	ip, r7, r0, lsr #27
   3b87c:	tst	r1, #16
   3b880:	push	{r4, r5, lr}
   3b884:	sub	sp, sp, #28
   3b888:	beq	3b8a4 <__assert_fail@plt+0x2a698>
   3b88c:	mov	r2, r3
   3b890:	bl	3b4f8 <__assert_fail@plt+0x2a2ec>
   3b894:	mov	r4, r0
   3b898:	mov	r0, r4
   3b89c:	add	sp, sp, #28
   3b8a0:	pop	{r4, r5, pc}
   3b8a4:	mov	r4, r0
   3b8a8:	lsl	r1, r1, #1
   3b8ac:	ldrb	r5, [r4], #1
   3b8b0:	and	r1, r1, #30
   3b8b4:	add	r0, sp, #4
   3b8b8:	orr	r1, r1, r5, lsr #7
   3b8bc:	bl	3ac78 <__assert_fail@plt+0x29a6c>
   3b8c0:	and	r3, r5, #127	; 0x7f
   3b8c4:	add	r2, sp, #4
   3b8c8:	ldr	r1, [pc, #16]	; 3b8e0 <__assert_fail@plt+0x2a6d4>
   3b8cc:	ldr	r0, [pc, #16]	; 3b8e4 <__assert_fail@plt+0x2a6d8>
   3b8d0:	bl	10f24 <printf@plt>
   3b8d4:	mov	r0, r4
   3b8d8:	add	sp, sp, #28
   3b8dc:	pop	{r4, r5, pc}
   3b8e0:	ldrdeq	ip, [r7], -r8
   3b8e4:	ldrdeq	ip, [r7], -ip	; <UNPREDICTABLE>
   3b8e8:	lsr	r3, r2, #7
   3b8ec:	and	r3, r3, #1
   3b8f0:	orr	r1, r3, r1, lsl #1
   3b8f4:	cmp	r1, #1
   3b8f8:	beq	3b918 <__assert_fail@plt+0x2a70c>
   3b8fc:	cmp	r1, #0
   3b900:	beq	3b924 <__assert_fail@plt+0x2a718>
   3b904:	cmp	r1, #2
   3b908:	bxne	lr
   3b90c:	and	r2, r2, #31
   3b910:	ldr	r1, [pc, #24]	; 3b930 <__assert_fail@plt+0x2a724>
   3b914:	b	1114c <sprintf@plt>
   3b918:	and	r2, r2, #31
   3b91c:	ldr	r1, [pc, #16]	; 3b934 <__assert_fail@plt+0x2a728>
   3b920:	b	1114c <sprintf@plt>
   3b924:	and	r2, r2, #31
   3b928:	ldr	r1, [pc, #8]	; 3b938 <__assert_fail@plt+0x2a72c>
   3b92c:	b	1114c <sprintf@plt>
   3b930:	strdeq	ip, [r7], -r0
   3b934:	andeq	ip, r7, ip, ror #27
   3b938:			; <UNDEFINED> instruction: 0x0007cdb4
   3b93c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3b940:	add	r6, r0, #3
   3b944:	ldrb	r4, [r0, #2]
   3b948:	sub	sp, sp, #48	; 0x30
   3b94c:	ldrb	r7, [r0]
   3b950:	tst	r4, #128	; 0x80
   3b954:	and	r4, r4, #127	; 0x7f
   3b958:	ldrb	r8, [r0, #1]
   3b95c:	uxtb	sl, r4
   3b960:	beq	3b9a4 <__assert_fail@plt+0x2a798>
   3b964:	mov	fp, #0
   3b968:	mov	r2, #0
   3b96c:	ldrb	ip, [r6], #1
   3b970:	add	r2, r2, #7
   3b974:	sub	r3, r2, #32
   3b978:	and	r0, ip, #127	; 0x7f
   3b97c:	rsb	r1, r2, #32
   3b980:	uxtb	r4, r0
   3b984:	tst	ip, #128	; 0x80
   3b988:	lsl	r3, r4, r3
   3b98c:	orr	r3, r3, r4, lsr r1
   3b990:	orr	r0, sl, r4, lsl r2
   3b994:	orr	r3, r3, fp
   3b998:	mov	sl, r0
   3b99c:	mov	fp, r3
   3b9a0:	bne	3b96c <__assert_fail@plt+0x2a760>
   3b9a4:	eor	r2, r7, #128	; 0x80
   3b9a8:	clz	r3, r8
   3b9ac:	lsr	r3, r3, #5
   3b9b0:	ands	r3, r3, r2, lsr #7
   3b9b4:	and	r1, r7, #127	; 0x7f
   3b9b8:	beq	3b9e4 <__assert_fail@plt+0x2a7d8>
   3b9bc:	add	r0, sp, #28
   3b9c0:	bl	3b22c <__assert_fail@plt+0x2a020>
   3b9c4:	add	r3, sp, #28
   3b9c8:	mov	r2, sl
   3b9cc:	ldr	r1, [pc, #80]	; 3ba24 <__assert_fail@plt+0x2a818>
   3b9d0:	ldr	r0, [pc, #80]	; 3ba28 <__assert_fail@plt+0x2a81c>
   3b9d4:	bl	10f24 <printf@plt>
   3b9d8:	mov	r0, r6
   3b9dc:	add	sp, sp, #48	; 0x30
   3b9e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3b9e4:	add	r0, sp, #8
   3b9e8:	add	r5, sp, #28
   3b9ec:	bl	3b22c <__assert_fail@plt+0x2a020>
   3b9f0:	mov	r2, r8
   3b9f4:	lsr	r1, r7, #7
   3b9f8:	mov	r0, r5
   3b9fc:	bl	3b8e8 <__assert_fail@plt+0x2a6dc>
   3ba00:	str	r5, [sp]
   3ba04:	add	r3, sp, #8
   3ba08:	mov	r2, sl
   3ba0c:	ldr	r1, [pc, #16]	; 3ba24 <__assert_fail@plt+0x2a818>
   3ba10:	ldr	r0, [pc, #20]	; 3ba2c <__assert_fail@plt+0x2a820>
   3ba14:	bl	10f24 <printf@plt>
   3ba18:	mov	r0, r6
   3ba1c:	add	sp, sp, #48	; 0x30
   3ba20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3ba24:	strdeq	ip, [r7], -ip	; <UNPREDICTABLE>
   3ba28:	andeq	sp, r7, r0
   3ba2c:	andeq	sp, r7, ip, lsl r0
   3ba30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ba34:	mov	r7, #0
   3ba38:	ldrb	r4, [r0, #3]
   3ba3c:	sub	sp, sp, #56	; 0x38
   3ba40:	add	r8, r0, #4
   3ba44:	tst	r4, #128	; 0x80
   3ba48:	and	r4, r4, #127	; 0x7f
   3ba4c:	ldrb	r2, [r0]
   3ba50:	uxtb	r6, r4
   3ba54:	ldrb	r9, [r0, #1]
   3ba58:	strd	r6, [sp, #8]
   3ba5c:	ldrb	sl, [r0, #2]
   3ba60:	beq	3baa4 <__assert_fail@plt+0x2a898>
   3ba64:	mov	r3, #0
   3ba68:	ldrb	r0, [r8], #1
   3ba6c:	add	r3, r3, #7
   3ba70:	sub	r1, r3, #32
   3ba74:	and	r6, r0, #127	; 0x7f
   3ba78:	ldrd	r4, [sp, #8]
   3ba7c:	uxtb	r6, r6
   3ba80:	rsb	ip, r3, #32
   3ba84:	lsl	r1, r6, r1
   3ba88:	orr	r1, r1, r6, lsr ip
   3ba8c:	orr	r6, r4, r6, lsl r3
   3ba90:	orr	r1, r1, r5
   3ba94:	tst	r0, #128	; 0x80
   3ba98:	str	r6, [sp, #8]
   3ba9c:	str	r1, [sp, #12]
   3baa0:	bne	3ba68 <__assert_fail@plt+0x2a85c>
   3baa4:	eor	r1, r9, #128	; 0x80
   3baa8:	clz	r3, sl
   3baac:	lsr	r3, r3, #5
   3bab0:	ands	r3, r3, r1, lsr #7
   3bab4:	and	r6, r2, #63	; 0x3f
   3bab8:	and	r1, r9, #127	; 0x7f
   3babc:	beq	3baf0 <__assert_fail@plt+0x2a8e4>
   3bac0:	add	r5, sp, #36	; 0x24
   3bac4:	mov	r0, r5
   3bac8:	bl	3b22c <__assert_fail@plt+0x2a020>
   3bacc:	str	r5, [sp]
   3bad0:	ldr	r3, [sp, #8]
   3bad4:	mov	r2, r6
   3bad8:	ldr	r1, [pc, #84]	; 3bb34 <__assert_fail@plt+0x2a928>
   3badc:	ldr	r0, [pc, #84]	; 3bb38 <__assert_fail@plt+0x2a92c>
   3bae0:	bl	10f24 <printf@plt>
   3bae4:	mov	r0, r8
   3bae8:	add	sp, sp, #56	; 0x38
   3baec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3baf0:	add	r5, sp, #16
   3baf4:	mov	r0, r5
   3baf8:	add	r7, sp, #36	; 0x24
   3bafc:	bl	3b22c <__assert_fail@plt+0x2a020>
   3bb00:	mov	r2, sl
   3bb04:	lsr	r1, r9, #7
   3bb08:	mov	r0, r7
   3bb0c:	bl	3b8e8 <__assert_fail@plt+0x2a6dc>
   3bb10:	stm	sp, {r5, r7}
   3bb14:	ldr	r3, [sp, #8]
   3bb18:	mov	r2, r6
   3bb1c:	ldr	r1, [pc, #16]	; 3bb34 <__assert_fail@plt+0x2a928>
   3bb20:	ldr	r0, [pc, #20]	; 3bb3c <__assert_fail@plt+0x2a930>
   3bb24:	bl	10f24 <printf@plt>
   3bb28:	mov	r0, r8
   3bb2c:	add	sp, sp, #56	; 0x38
   3bb30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3bb34:	andeq	sp, r7, r4, asr #32
   3bb38:	andeq	sp, r7, r8, asr #32
   3bb3c:	andeq	sp, r7, ip, rrx
   3bb40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bb44:	ands	lr, r1, #16
   3bb48:	mov	r4, r0
   3bb4c:	bne	3bc10 <__assert_fail@plt+0x2aa04>
   3bb50:	ldrb	r2, [r4], #1
   3bb54:	mov	fp, #0
   3bb58:	tst	r2, #128	; 0x80
   3bb5c:	and	r2, r2, #127	; 0x7f
   3bb60:	movne	ip, lr
   3bb64:	uxtb	sl, r2
   3bb68:	beq	3bba4 <__assert_fail@plt+0x2a998>
   3bb6c:	ldrb	r5, [r4], #1
   3bb70:	add	ip, ip, #7
   3bb74:	sub	r1, ip, #32
   3bb78:	and	r6, r5, #127	; 0x7f
   3bb7c:	rsb	r0, ip, #32
   3bb80:	uxtb	r6, r6
   3bb84:	tst	r5, #128	; 0x80
   3bb88:	lsl	r1, r6, r1
   3bb8c:	orr	r1, r1, r6, lsr r0
   3bb90:	orr	r6, sl, r6, lsl ip
   3bb94:	orr	r1, r1, fp
   3bb98:	mov	sl, r6
   3bb9c:	mov	fp, r1
   3bba0:	bne	3bb6c <__assert_fail@plt+0x2a960>
   3bba4:	ldrb	r6, [r4], #1
   3bba8:	mov	r7, #0
   3bbac:	tst	r6, #128	; 0x80
   3bbb0:	and	r6, r6, #127	; 0x7f
   3bbb4:	uxtb	r6, r6
   3bbb8:	beq	3bbf4 <__assert_fail@plt+0x2a9e8>
   3bbbc:	ldrb	r5, [r4], #1
   3bbc0:	add	lr, lr, #7
   3bbc4:	sub	ip, lr, #32
   3bbc8:	and	r0, r5, #127	; 0x7f
   3bbcc:	rsb	r8, lr, #32
   3bbd0:	uxtb	r2, r0
   3bbd4:	tst	r5, #128	; 0x80
   3bbd8:	lsl	r1, r2, ip
   3bbdc:	orr	r1, r1, r2, lsr r8
   3bbe0:	orr	r0, r6, r2, lsl lr
   3bbe4:	orr	r1, r1, r7
   3bbe8:	mov	r6, r0
   3bbec:	mov	r7, r1
   3bbf0:	bne	3bbbc <__assert_fail@plt+0x2a9b0>
   3bbf4:	mov	r3, r6
   3bbf8:	mov	r2, sl
   3bbfc:	ldr	r1, [pc, #216]	; 3bcdc <__assert_fail@plt+0x2aad0>
   3bc00:	ldr	r0, [pc, #216]	; 3bce0 <__assert_fail@plt+0x2aad4>
   3bc04:	bl	10f24 <printf@plt>
   3bc08:	mov	r0, r4
   3bc0c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bc10:	ands	r2, r1, #7
   3bc14:	mov	ip, r1
   3bc18:	bne	3bc90 <__assert_fail@plt+0x2aa84>
   3bc1c:	ldrb	r6, [r4], #1
   3bc20:	mov	r7, #0
   3bc24:	tst	r6, #128	; 0x80
   3bc28:	and	r6, r6, #127	; 0x7f
   3bc2c:	uxtb	r6, r6
   3bc30:	beq	3bc70 <__assert_fail@plt+0x2aa64>
   3bc34:	ldrb	lr, [r4], #1
   3bc38:	add	r2, r2, #7
   3bc3c:	sub	r3, r2, #32
   3bc40:	and	r0, lr, #127	; 0x7f
   3bc44:	rsb	r1, r2, #32
   3bc48:	uxtb	sl, r0
   3bc4c:	tst	lr, #128	; 0x80
   3bc50:	lsl	r3, sl, r3
   3bc54:	orr	r3, r3, sl, lsr r1
   3bc58:	orr	r0, r6, sl, lsl r2
   3bc5c:	orr	r3, r3, r7
   3bc60:	mov	fp, #0
   3bc64:	mov	r6, r0
   3bc68:	mov	r7, r3
   3bc6c:	bne	3bc34 <__assert_fail@plt+0x2aa28>
   3bc70:	tst	ip, #8
   3bc74:	mov	r2, r6
   3bc78:	ldr	r1, [pc, #100]	; 3bce4 <__assert_fail@plt+0x2aad8>
   3bc7c:	ldrne	r0, [pc, #100]	; 3bce8 <__assert_fail@plt+0x2aadc>
   3bc80:	ldreq	r0, [pc, #100]	; 3bcec <__assert_fail@plt+0x2aae0>
   3bc84:	bl	10f24 <printf@plt>
   3bc88:	mov	r0, r4
   3bc8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bc90:	sub	r2, r2, #1
   3bc94:	cmp	r2, #3
   3bc98:	ldrls	pc, [pc, r2, lsl #2]
   3bc9c:	b	3bcd0 <__assert_fail@plt+0x2aac4>
   3bca0:	andeq	fp, r3, r8, asr #25
   3bca4:	andeq	fp, r3, r0, asr #25
   3bca8:			; <UNDEFINED> instruction: 0x0003bcb8
   3bcac:			; <UNDEFINED> instruction: 0x0003bcb0
   3bcb0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bcb4:	b	3ba30 <__assert_fail@plt+0x2a824>
   3bcb8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bcbc:	b	3b3b4 <__assert_fail@plt+0x2a1a8>
   3bcc0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bcc4:	b	3b93c <__assert_fail@plt+0x2a730>
   3bcc8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bccc:	b	3b28c <__assert_fail@plt+0x2a080>
   3bcd0:	ldr	r0, [pc, #24]	; 3bcf0 <__assert_fail@plt+0x2aae4>
   3bcd4:	bl	10f24 <printf@plt>
   3bcd8:	b	3bc08 <__assert_fail@plt+0x2a9fc>
   3bcdc:	andeq	r8, r6, r4, ror #1
   3bce0:			; <UNDEFINED> instruction: 0x0007ccb0
   3bce4:	muleq	r7, ip, r0
   3bce8:	ldrdeq	ip, [r7], -r4
   3bcec:	strdeq	ip, [r7], -r0
   3bcf0:	andeq	ip, r7, r8, lsr pc
   3bcf4:	push	{r4, r5, r6, r7, r8, r9, lr}
   3bcf8:	ands	r7, r1, #16
   3bcfc:	sub	sp, sp, #28
   3bd00:	mov	r6, r0
   3bd04:	bne	3bdb0 <__assert_fail@plt+0x2aba4>
   3bd08:	ldrb	r2, [r6], #1
   3bd0c:	and	r1, r1, #15
   3bd10:	mov	r3, #0
   3bd14:	tst	r2, #128	; 0x80
   3bd18:	and	r2, r2, #127	; 0x7f
   3bd1c:	uxtb	r2, r2
   3bd20:	beq	3bd60 <__assert_fail@plt+0x2ab54>
   3bd24:	mov	r0, r7
   3bd28:	ldrb	lr, [r6], #1
   3bd2c:	add	r0, r0, #7
   3bd30:	sub	ip, r0, #32
   3bd34:	and	r4, lr, #127	; 0x7f
   3bd38:	rsb	r5, r0, #32
   3bd3c:	uxtb	r8, r4
   3bd40:	tst	lr, #128	; 0x80
   3bd44:	lsl	ip, r8, ip
   3bd48:	orr	ip, ip, r8, lsr r5
   3bd4c:	orr	r4, r2, r8, lsl r0
   3bd50:	orr	ip, ip, r3
   3bd54:	mov	r2, r4
   3bd58:	mov	r3, ip
   3bd5c:	bne	3bd28 <__assert_fail@plt+0x2ab1c>
   3bd60:	sub	r1, r1, #1
   3bd64:	mov	r0, r2
   3bd68:	cmp	r1, #14
   3bd6c:	ldrls	pc, [pc, r1, lsl #2]
   3bd70:	b	3c2c0 <__assert_fail@plt+0x2b0b4>
   3bd74:	strheq	ip, [r3], -ip	; <UNPREDICTABLE>
   3bd78:	andeq	ip, r3, r8, lsr #1
   3bd7c:	muleq	r3, r0, r0
   3bd80:	andeq	ip, r3, r8, ror r0
   3bd84:	andeq	ip, r3, r0, rrx
   3bd88:	andeq	ip, r3, r8, asr #32
   3bd8c:	andeq	ip, r3, r0, lsr r0
   3bd90:	andeq	ip, r3, r8, lsl r0
   3bd94:	andeq	ip, r3, r0
   3bd98:	andeq	fp, r3, r8, ror #31
   3bd9c:	ldrdeq	fp, [r3], -r0
   3bda0:			; <UNDEFINED> instruction: 0x0003bfb8
   3bda4:	andeq	fp, r3, r0, lsr #31
   3bda8:	andeq	ip, r3, r4, ror #1
   3bdac:	andeq	ip, r3, ip, asr #1
   3bdb0:	and	ip, r1, #15
   3bdb4:	cmp	ip, #15
   3bdb8:	ldrls	pc, [pc, ip, lsl #2]
   3bdbc:	b	3bf94 <__assert_fail@plt+0x2ad88>
   3bdc0:	andeq	fp, r3, r0, lsr lr
   3bdc4:	andeq	fp, r3, r0, ror #29
   3bdc8:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bdcc:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bdd0:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bdd4:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bdd8:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bddc:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bde0:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bde4:	andeq	fp, r3, ip, asr pc
   3bde8:	andeq	fp, r3, r8, lsl #31
   3bdec:	andeq	fp, r3, r0, ror pc
   3bdf0:	andeq	fp, r3, ip, ror pc
   3bdf4:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bdf8:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3bdfc:	andeq	fp, r3, r0, lsl #28
   3be00:	ldrb	r2, [r6], #2
   3be04:	ldrb	r4, [r0, #1]
   3be08:	cmp	r2, #2
   3be0c:	bhi	3c0fc <__assert_fail@plt+0x2aef0>
   3be10:	ldr	r1, [pc, #1296]	; 3c328 <__assert_fail@plt+0x2b11c>
   3be14:	add	r2, r1, r2, lsl #2
   3be18:	ldr	r2, [r2, #64]	; 0x40
   3be1c:	mov	r3, r4
   3be20:	ldr	r1, [pc, #1284]	; 3c32c <__assert_fail@plt+0x2b120>
   3be24:	ldr	r0, [pc, #1284]	; 3c330 <__assert_fail@plt+0x2b124>
   3be28:	bl	10f24 <printf@plt>
   3be2c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3be30:	ldrb	r3, [r0, #1]
   3be34:	ldrb	r1, [r6], #2
   3be38:	tst	r3, #128	; 0x80
   3be3c:	and	r3, r3, #127	; 0x7f
   3be40:	uxtb	r2, r3
   3be44:	mov	r3, #0
   3be48:	beq	3be84 <__assert_fail@plt+0x2ac78>
   3be4c:	ldrb	lr, [r6], #1
   3be50:	add	ip, ip, #7
   3be54:	sub	r0, ip, #32
   3be58:	and	r4, lr, #127	; 0x7f
   3be5c:	rsb	r5, ip, #32
   3be60:	uxtb	r8, r4
   3be64:	tst	lr, #128	; 0x80
   3be68:	lsl	r0, r8, r0
   3be6c:	orr	r0, r0, r8, lsr r5
   3be70:	orr	r4, r2, r8, lsl ip
   3be74:	orr	r0, r0, r3
   3be78:	mov	r2, r4
   3be7c:	mov	r3, r0
   3be80:	bne	3be4c <__assert_fail@plt+0x2ac40>
   3be84:	sub	r0, r1, #1
   3be88:	cmp	r0, #18
   3be8c:	ldrls	pc, [pc, r0, lsl #2]
   3be90:	b	3bf94 <__assert_fail@plt+0x2ad88>
   3be94:	andeq	ip, r3, r8, asr r1
   3be98:	andeq	ip, r3, r8, lsl #3
   3be9c:	andeq	ip, r3, r0, ror r1
   3bea0:	andeq	ip, r3, r8, ror #3
   3bea4:	ldrdeq	ip, [r3], -r0
   3bea8:			; <UNDEFINED> instruction: 0x0003c1b8
   3beac:	andeq	ip, r3, r0, lsr #3
   3beb0:	andeq	ip, r3, r8, lsr #5
   3beb4:	muleq	r3, r0, r2
   3beb8:	andeq	ip, r3, r8, ror r2
   3bebc:	andeq	ip, r3, r0, ror #4
   3bec0:	andeq	ip, r3, r8, asr #4
   3bec4:	andeq	ip, r3, r0, lsr r2
   3bec8:	andeq	ip, r3, r8, lsl r2
   3becc:	andeq	ip, r3, r0, lsl #4
   3bed0:	andeq	ip, r3, r8, asr #2
   3bed4:	andeq	ip, r3, r4, lsr r1
   3bed8:	andeq	ip, r3, r0, lsr #2
   3bedc:	andeq	ip, r3, r0, lsl r1
   3bee0:	ldrb	r1, [r0]
   3bee4:	ldrb	r3, [r0, #1]
   3bee8:	add	r6, r6, #2
   3beec:	and	r1, r1, #15
   3bef0:	add	r0, sp, #4
   3bef4:	mov	r2, #4
   3bef8:	mov	r4, #0
   3befc:	mov	r5, #114	; 0x72
   3bf00:	mov	r7, #44	; 0x2c
   3bf04:	tst	r1, #1
   3bf08:	rsb	lr, r2, #56	; 0x38
   3bf0c:	beq	3bf34 <__assert_fail@plt+0x2ad28>
   3bf10:	mov	ip, r0
   3bf14:	cmp	r4, #0
   3bf18:	strbne	r7, [ip], #1
   3bf1c:	movne	r0, ip
   3bf20:	mov	ip, r0
   3bf24:	mov	r4, #1
   3bf28:	strb	r5, [ip], #2
   3bf2c:	strb	lr, [r0, #1]
   3bf30:	mov	r0, ip
   3bf34:	subs	r2, r2, #1
   3bf38:	lsr	r1, r1, #1
   3bf3c:	bne	3bf04 <__assert_fail@plt+0x2acf8>
   3bf40:	strb	r2, [r0]
   3bf44:	and	r3, r3, #127	; 0x7f
   3bf48:	add	r2, sp, #4
   3bf4c:	ldr	r1, [pc, #992]	; 3c334 <__assert_fail@plt+0x2b128>
   3bf50:	ldr	r0, [pc, #992]	; 3c338 <__assert_fail@plt+0x2b12c>
   3bf54:	bl	10f24 <printf@plt>
   3bf58:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bf5c:	bl	3b28c <__assert_fail@plt+0x2a080>
   3bf60:	mov	r6, r0
   3bf64:	mov	r0, r6
   3bf68:	add	sp, sp, #28
   3bf6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3bf70:	bl	3b3b4 <__assert_fail@plt+0x2a1a8>
   3bf74:	mov	r6, r0
   3bf78:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bf7c:	bl	3ba30 <__assert_fail@plt+0x2a824>
   3bf80:	mov	r6, r0
   3bf84:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bf88:	bl	3b93c <__assert_fail@plt+0x2a730>
   3bf8c:	mov	r6, r0
   3bf90:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bf94:	ldr	r0, [pc, #928]	; 3c33c <__assert_fail@plt+0x2b130>
   3bf98:	bl	10f24 <printf@plt>
   3bf9c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bfa0:	lsl	r3, r2, #2
   3bfa4:	ldr	r1, [pc, #916]	; 3c340 <__assert_fail@plt+0x2b134>
   3bfa8:	ldr	r2, [pc, #916]	; 3c344 <__assert_fail@plt+0x2b138>
   3bfac:	ldr	r0, [pc, #916]	; 3c348 <__assert_fail@plt+0x2b13c>
   3bfb0:	bl	10f24 <printf@plt>
   3bfb4:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bfb8:	mov	r3, r2
   3bfbc:	ldr	r1, [pc, #892]	; 3c340 <__assert_fail@plt+0x2b134>
   3bfc0:	ldr	r2, [pc, #892]	; 3c344 <__assert_fail@plt+0x2b138>
   3bfc4:	ldr	r0, [pc, #896]	; 3c34c <__assert_fail@plt+0x2b140>
   3bfc8:	bl	10f24 <printf@plt>
   3bfcc:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bfd0:	lsl	r3, r2, #2
   3bfd4:	ldr	r1, [pc, #868]	; 3c340 <__assert_fail@plt+0x2b134>
   3bfd8:	ldr	r2, [pc, #880]	; 3c350 <__assert_fail@plt+0x2b144>
   3bfdc:	ldr	r0, [pc, #868]	; 3c348 <__assert_fail@plt+0x2b13c>
   3bfe0:	bl	10f24 <printf@plt>
   3bfe4:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3bfe8:	mov	r3, r2
   3bfec:	ldr	r1, [pc, #844]	; 3c340 <__assert_fail@plt+0x2b134>
   3bff0:	ldr	r2, [pc, #856]	; 3c350 <__assert_fail@plt+0x2b144>
   3bff4:	ldr	r0, [pc, #848]	; 3c34c <__assert_fail@plt+0x2b140>
   3bff8:	bl	10f24 <printf@plt>
   3bffc:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c000:	lsl	r3, r2, #2
   3c004:	ldr	r1, [pc, #820]	; 3c340 <__assert_fail@plt+0x2b134>
   3c008:	ldr	r2, [pc, #836]	; 3c354 <__assert_fail@plt+0x2b148>
   3c00c:	ldr	r0, [pc, #820]	; 3c348 <__assert_fail@plt+0x2b13c>
   3c010:	bl	10f24 <printf@plt>
   3c014:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c018:	mov	r3, r2
   3c01c:	ldr	r1, [pc, #796]	; 3c340 <__assert_fail@plt+0x2b134>
   3c020:	ldr	r2, [pc, #812]	; 3c354 <__assert_fail@plt+0x2b148>
   3c024:	ldr	r0, [pc, #800]	; 3c34c <__assert_fail@plt+0x2b140>
   3c028:	bl	10f24 <printf@plt>
   3c02c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c030:	lsl	r3, r2, #2
   3c034:	ldr	r1, [pc, #772]	; 3c340 <__assert_fail@plt+0x2b134>
   3c038:	ldr	r2, [pc, #792]	; 3c358 <__assert_fail@plt+0x2b14c>
   3c03c:	ldr	r0, [pc, #772]	; 3c348 <__assert_fail@plt+0x2b13c>
   3c040:	bl	10f24 <printf@plt>
   3c044:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c048:	mov	r3, r2
   3c04c:	ldr	r1, [pc, #748]	; 3c340 <__assert_fail@plt+0x2b134>
   3c050:	ldr	r2, [pc, #768]	; 3c358 <__assert_fail@plt+0x2b14c>
   3c054:	ldr	r0, [pc, #752]	; 3c34c <__assert_fail@plt+0x2b140>
   3c058:	bl	10f24 <printf@plt>
   3c05c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c060:	lsl	r3, r2, #2
   3c064:	ldr	r1, [pc, #724]	; 3c340 <__assert_fail@plt+0x2b134>
   3c068:	ldr	r2, [pc, #748]	; 3c35c <__assert_fail@plt+0x2b150>
   3c06c:	ldr	r0, [pc, #724]	; 3c348 <__assert_fail@plt+0x2b13c>
   3c070:	bl	10f24 <printf@plt>
   3c074:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c078:	mov	r3, r2
   3c07c:	ldr	r1, [pc, #700]	; 3c340 <__assert_fail@plt+0x2b134>
   3c080:	ldr	r2, [pc, #724]	; 3c35c <__assert_fail@plt+0x2b150>
   3c084:	ldr	r0, [pc, #704]	; 3c34c <__assert_fail@plt+0x2b140>
   3c088:	bl	10f24 <printf@plt>
   3c08c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c090:	lsl	r3, r2, #2
   3c094:	ldr	r1, [pc, #676]	; 3c340 <__assert_fail@plt+0x2b134>
   3c098:	ldr	r2, [pc, #704]	; 3c360 <__assert_fail@plt+0x2b154>
   3c09c:	ldr	r0, [pc, #704]	; 3c364 <__assert_fail@plt+0x2b158>
   3c0a0:	bl	10f24 <printf@plt>
   3c0a4:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c0a8:	lsl	r2, r2, #2
   3c0ac:	ldr	r1, [pc, #652]	; 3c340 <__assert_fail@plt+0x2b134>
   3c0b0:	ldr	r0, [pc, #688]	; 3c368 <__assert_fail@plt+0x2b15c>
   3c0b4:	bl	10f24 <printf@plt>
   3c0b8:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c0bc:	ldr	r1, [pc, #636]	; 3c340 <__assert_fail@plt+0x2b134>
   3c0c0:	ldr	r0, [pc, #676]	; 3c36c <__assert_fail@plt+0x2b160>
   3c0c4:	bl	10f24 <printf@plt>
   3c0c8:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c0cc:	lsl	r3, r2, #2
   3c0d0:	ldr	r1, [pc, #616]	; 3c340 <__assert_fail@plt+0x2b134>
   3c0d4:	ldr	r2, [pc, #660]	; 3c370 <__assert_fail@plt+0x2b164>
   3c0d8:	ldr	r0, [pc, #616]	; 3c348 <__assert_fail@plt+0x2b13c>
   3c0dc:	bl	10f24 <printf@plt>
   3c0e0:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c0e4:	mov	r3, r2
   3c0e8:	ldr	r1, [pc, #592]	; 3c340 <__assert_fail@plt+0x2b134>
   3c0ec:	ldr	r2, [pc, #636]	; 3c370 <__assert_fail@plt+0x2b164>
   3c0f0:	ldr	r0, [pc, #596]	; 3c34c <__assert_fail@plt+0x2b140>
   3c0f4:	bl	10f24 <printf@plt>
   3c0f8:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c0fc:	add	r0, sp, #4
   3c100:	ldr	r1, [pc, #620]	; 3c374 <__assert_fail@plt+0x2b168>
   3c104:	bl	1114c <sprintf@plt>
   3c108:	add	r2, sp, #4
   3c10c:	b	3be1c <__assert_fail@plt+0x2ac10>
   3c110:	ldr	r1, [pc, #608]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c114:	ldr	r0, [pc, #608]	; 3c37c <__assert_fail@plt+0x2b170>
   3c118:	bl	10f24 <printf@plt>
   3c11c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c120:	lsl	r2, r2, #2
   3c124:	ldr	r1, [pc, #588]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c128:	ldr	r0, [pc, #592]	; 3c380 <__assert_fail@plt+0x2b174>
   3c12c:	bl	10f24 <printf@plt>
   3c130:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c134:	lsl	r2, r2, #2
   3c138:	ldr	r1, [pc, #568]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c13c:	ldr	r0, [pc, #576]	; 3c384 <__assert_fail@plt+0x2b178>
   3c140:	bl	10f24 <printf@plt>
   3c144:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c148:	ldr	r1, [pc, #552]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c14c:	ldr	r0, [pc, #564]	; 3c388 <__assert_fail@plt+0x2b17c>
   3c150:	bl	10f24 <printf@plt>
   3c154:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c158:	lsl	r3, r2, #2
   3c15c:	ldr	r1, [pc, #532]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c160:	ldr	r2, [pc, #500]	; 3c35c <__assert_fail@plt+0x2b150>
   3c164:	ldr	r0, [pc, #504]	; 3c364 <__assert_fail@plt+0x2b158>
   3c168:	bl	10f24 <printf@plt>
   3c16c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c170:	lsl	r3, r2, #2
   3c174:	ldr	r1, [pc, #508]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c178:	ldr	r2, [pc, #468]	; 3c354 <__assert_fail@plt+0x2b148>
   3c17c:	ldr	r0, [pc, #480]	; 3c364 <__assert_fail@plt+0x2b158>
   3c180:	bl	10f24 <printf@plt>
   3c184:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c188:	lsl	r3, r2, #2
   3c18c:	ldr	r1, [pc, #484]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c190:	ldr	r2, [pc, #448]	; 3c358 <__assert_fail@plt+0x2b14c>
   3c194:	ldr	r0, [pc, #456]	; 3c364 <__assert_fail@plt+0x2b158>
   3c198:	bl	10f24 <printf@plt>
   3c19c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c1a0:	mov	r3, r2
   3c1a4:	ldr	r1, [pc, #460]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c1a8:	ldr	r2, [pc, #476]	; 3c38c <__assert_fail@plt+0x2b180>
   3c1ac:	ldr	r0, [pc, #408]	; 3c34c <__assert_fail@plt+0x2b140>
   3c1b0:	bl	10f24 <printf@plt>
   3c1b4:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c1b8:	lsl	r3, r2, #2
   3c1bc:	ldr	r1, [pc, #436]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c1c0:	ldr	r2, [pc, #424]	; 3c370 <__assert_fail@plt+0x2b164>
   3c1c4:	ldr	r0, [pc, #408]	; 3c364 <__assert_fail@plt+0x2b158>
   3c1c8:	bl	10f24 <printf@plt>
   3c1cc:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c1d0:	lsl	r3, r2, #2
   3c1d4:	ldr	r1, [pc, #412]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c1d8:	ldr	r2, [pc, #356]	; 3c344 <__assert_fail@plt+0x2b138>
   3c1dc:	ldr	r0, [pc, #384]	; 3c364 <__assert_fail@plt+0x2b158>
   3c1e0:	bl	10f24 <printf@plt>
   3c1e4:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c1e8:	lsl	r3, r2, #2
   3c1ec:	ldr	r1, [pc, #388]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c1f0:	ldr	r2, [pc, #344]	; 3c350 <__assert_fail@plt+0x2b144>
   3c1f4:	ldr	r0, [pc, #360]	; 3c364 <__assert_fail@plt+0x2b158>
   3c1f8:	bl	10f24 <printf@plt>
   3c1fc:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c200:	lsl	r3, r2, #2
   3c204:	ldr	r1, [pc, #364]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c208:	ldr	r2, [pc, #384]	; 3c390 <__assert_fail@plt+0x2b184>
   3c20c:	ldr	r0, [pc, #336]	; 3c364 <__assert_fail@plt+0x2b158>
   3c210:	bl	10f24 <printf@plt>
   3c214:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c218:	lsl	r3, r2, #2
   3c21c:	ldr	r1, [pc, #340]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c220:	ldr	r2, [pc, #360]	; 3c390 <__assert_fail@plt+0x2b184>
   3c224:	ldr	r0, [pc, #284]	; 3c348 <__assert_fail@plt+0x2b13c>
   3c228:	bl	10f24 <printf@plt>
   3c22c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c230:	mov	r3, r2
   3c234:	ldr	r1, [pc, #316]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c238:	ldr	r2, [pc, #336]	; 3c390 <__assert_fail@plt+0x2b184>
   3c23c:	ldr	r0, [pc, #264]	; 3c34c <__assert_fail@plt+0x2b140>
   3c240:	bl	10f24 <printf@plt>
   3c244:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c248:	lsl	r3, r2, #2
   3c24c:	ldr	r1, [pc, #292]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c250:	ldr	r2, [pc, #316]	; 3c394 <__assert_fail@plt+0x2b188>
   3c254:	ldr	r0, [pc, #264]	; 3c364 <__assert_fail@plt+0x2b158>
   3c258:	bl	10f24 <printf@plt>
   3c25c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c260:	lsl	r3, r2, #2
   3c264:	ldr	r1, [pc, #268]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c268:	ldr	r2, [pc, #292]	; 3c394 <__assert_fail@plt+0x2b188>
   3c26c:	ldr	r0, [pc, #212]	; 3c348 <__assert_fail@plt+0x2b13c>
   3c270:	bl	10f24 <printf@plt>
   3c274:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c278:	mov	r3, r2
   3c27c:	ldr	r1, [pc, #244]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c280:	ldr	r2, [pc, #268]	; 3c394 <__assert_fail@plt+0x2b188>
   3c284:	ldr	r0, [pc, #192]	; 3c34c <__assert_fail@plt+0x2b140>
   3c288:	bl	10f24 <printf@plt>
   3c28c:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c290:	lsl	r3, r2, #2
   3c294:	ldr	r1, [pc, #220]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c298:	ldr	r2, [pc, #236]	; 3c38c <__assert_fail@plt+0x2b180>
   3c29c:	ldr	r0, [pc, #192]	; 3c364 <__assert_fail@plt+0x2b158>
   3c2a0:	bl	10f24 <printf@plt>
   3c2a4:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c2a8:	lsl	r3, r2, #2
   3c2ac:	ldr	r1, [pc, #196]	; 3c378 <__assert_fail@plt+0x2b16c>
   3c2b0:	ldr	r2, [pc, #212]	; 3c38c <__assert_fail@plt+0x2b180>
   3c2b4:	ldr	r0, [pc, #140]	; 3c348 <__assert_fail@plt+0x2b13c>
   3c2b8:	bl	10f24 <printf@plt>
   3c2bc:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c2c0:	ldrb	r3, [r6], #1
   3c2c4:	tst	r3, #128	; 0x80
   3c2c8:	and	r3, r3, #127	; 0x7f
   3c2cc:	uxtb	r2, r3
   3c2d0:	mov	r3, #0
   3c2d4:	beq	3c310 <__assert_fail@plt+0x2b104>
   3c2d8:	ldrb	ip, [r6], #1
   3c2dc:	add	r7, r7, #7
   3c2e0:	sub	r1, r7, #32
   3c2e4:	and	r4, ip, #127	; 0x7f
   3c2e8:	rsb	lr, r7, #32
   3c2ec:	uxtb	r4, r4
   3c2f0:	tst	ip, #128	; 0x80
   3c2f4:	lsl	r1, r4, r1
   3c2f8:	orr	r1, r1, r4, lsr lr
   3c2fc:	orr	r4, r2, r4, lsl r7
   3c300:	orr	r1, r1, r3
   3c304:	mov	r2, r4
   3c308:	mov	r3, r1
   3c30c:	bne	3c2d8 <__assert_fail@plt+0x2b0cc>
   3c310:	lsl	r3, r2, #4
   3c314:	ldr	r1, [pc, #36]	; 3c340 <__assert_fail@plt+0x2b134>
   3c318:	mov	r2, r0
   3c31c:	ldr	r0, [pc, #116]	; 3c398 <__assert_fail@plt+0x2b18c>
   3c320:	bl	10f24 <printf@plt>
   3c324:	b	3bf64 <__assert_fail@plt+0x2ad58>
   3c328:	andeq	ip, r7, r0, lsr #24
   3c32c:	muleq	r7, r8, ip
   3c330:	andeq	sp, r7, r8, lsl #4
   3c334:	andeq	sp, r7, r0, ror #3
   3c338:	andeq	sp, r7, r4, ror #3
   3c33c:	andeq	ip, r7, r8, lsr pc
   3c340:	andeq	sp, r7, r0, lsr #1
   3c344:	andeq	sp, r7, r4, asr #4
   3c348:	andeq	sp, r7, r4, lsr r1
   3c34c:	andeq	sp, r7, r0, lsr #2
   3c350:	andeq	ip, r7, r4, ror #29
   3c354:			; <UNDEFINED> instruction: 0x0007cdb0
   3c358:	andeq	ip, r7, r0, ror #29
   3c35c:	andeq	ip, r7, r0, lsr #27
   3c360:	andeq	ip, r7, ip, lsr #27
   3c364:	andeq	sp, r7, r4, lsl #2
   3c368:	andeq	sp, r7, r0, ror #1
   3c36c:	andeq	sp, r7, r8, asr #1
   3c370:	andeq	ip, r7, r4, lsl pc
   3c374:	andeq	sp, r7, r0, lsl #4
   3c378:	andeq	sp, r7, r8, asr r1
   3c37c:	andeq	sp, r7, r0, asr #3
   3c380:	andeq	sp, r7, r0, lsr #3
   3c384:	andeq	sp, r7, r8, ror r1
   3c388:	andeq	sp, r7, ip, asr r1
   3c38c:	andeq	ip, r7, r4, lsl #30
   3c390:	strdeq	ip, [r7], -ip	; <UNPREDICTABLE>
   3c394:	andeq	ip, r7, r8, lsl #30
   3c398:	andeq	sp, r7, r4, lsr #1
   3c39c:	push	{lr}		; (str lr, [sp, #-4]!)
   3c3a0:	lsl	lr, r1, #3
   3c3a4:	ldrb	r1, [r0], #1
   3c3a8:	ldr	ip, [pc, #20]	; 3c3c4 <__assert_fail@plt+0x2b1b8>
   3c3ac:	add	lr, lr, r1, lsr #5
   3c3b0:	add	ip, ip, lr, lsl #2
   3c3b4:	ldr	lr, [ip, #76]	; 0x4c
   3c3b8:	mov	ip, lr
   3c3bc:	pop	{lr}		; (ldr lr, [sp], #4)
   3c3c0:	bx	ip
   3c3c4:	andeq	ip, r7, r0, lsr #24
   3c3c8:	ldr	ip, [pc, #108]	; 3c43c <__assert_fail@plt+0x2b230>
   3c3cc:	ldr	r2, [r0]
   3c3d0:	ldr	r3, [r1]
   3c3d4:	ldr	r1, [ip]
   3c3d8:	lsl	r2, r2, #3
   3c3dc:	lsl	r3, r3, #3
   3c3e0:	push	{r4, r5}
   3c3e4:	ldrd	r4, [r1, r2]
   3c3e8:	ldrd	r0, [r1, r3]
   3c3ec:	cmp	r5, r1
   3c3f0:	cmpeq	r4, r0
   3c3f4:	movhi	r0, #1
   3c3f8:	movls	r0, #0
   3c3fc:	movcc	r1, #1
   3c400:	movcs	r1, #0
   3c404:	subs	r0, r0, r1
   3c408:	bne	3c434 <__assert_fail@plt+0x2b228>
   3c40c:	ldr	r1, [ip, #4]
   3c410:	ldrd	r4, [r1, r2]
   3c414:	ldrd	r2, [r3, r1]
   3c418:	cmp	r5, r3
   3c41c:	cmpeq	r4, r2
   3c420:	movhi	r0, #1
   3c424:	movls	r0, #0
   3c428:	movcc	r3, #1
   3c42c:	movcs	r3, #0
   3c430:	sub	r0, r0, r3
   3c434:	pop	{r4, r5}
   3c438:	bx	lr
   3c43c:	ldrdeq	ip, [r9], -r0
   3c440:	ldr	r0, [r0, #32]
   3c444:	ldr	r3, [r1, #32]
   3c448:	sub	r0, r0, r3
   3c44c:	bx	lr
   3c450:	ldrd	r2, [r1]
   3c454:	push	{r4, r5}
   3c458:	ldrd	r4, [r0]
   3c45c:	cmp	r5, r3
   3c460:	cmpeq	r4, r2
   3c464:	movhi	r0, #1
   3c468:	movls	r0, #0
   3c46c:	movcc	r3, #1
   3c470:	movcs	r3, #0
   3c474:	sub	r0, r0, r3
   3c478:	pop	{r4, r5}
   3c47c:	bx	lr
   3c480:	push	{r4, lr}
   3c484:	mov	r4, r0
   3c488:	mov	r2, #5
   3c48c:	ldr	r1, [pc, #20]	; 3c4a8 <__assert_fail@plt+0x2b29c>
   3c490:	mov	r0, #0
   3c494:	bl	10f90 <dcgettext@plt>
   3c498:	ldr	r1, [r4, #8]
   3c49c:	bl	10f24 <printf@plt>
   3c4a0:	mov	r0, #1
   3c4a4:	pop	{r4, pc}
   3c4a8:	andeq	lr, r7, r0, ror r1
   3c4ac:	push	{r4, lr}
   3c4b0:	mov	r3, r0
   3c4b4:	ldr	r4, [pc, #104]	; 3c524 <__assert_fail@plt+0x2b318>
   3c4b8:	sub	sp, sp, #8
   3c4bc:	ldr	r2, [r4, #72]	; 0x48
   3c4c0:	cmp	r2, #0
   3c4c4:	beq	3c508 <__assert_fail@plt+0x2b2fc>
   3c4c8:	ldr	r0, [r4, #76]	; 0x4c
   3c4cc:	cmp	r0, r3
   3c4d0:	bls	3c508 <__assert_fail@plt+0x2b2fc>
   3c4d4:	ldr	r0, [r2, r3, lsl #2]
   3c4d8:	cmp	r0, #0
   3c4dc:	beq	3c508 <__assert_fail@plt+0x2b2fc>
   3c4e0:	cmp	r1, #0
   3c4e4:	bne	3c51c <__assert_fail@plt+0x2b310>
   3c4e8:	str	r0, [sp]
   3c4ec:	ldr	r2, [pc, #52]	; 3c528 <__assert_fail@plt+0x2b31c>
   3c4f0:	mov	r1, #64	; 0x40
   3c4f4:	add	r0, r4, #8
   3c4f8:	bl	110b0 <snprintf@plt>
   3c4fc:	add	r0, r4, #8
   3c500:	add	sp, sp, #8
   3c504:	pop	{r4, pc}
   3c508:	ldr	r2, [pc, #28]	; 3c52c <__assert_fail@plt+0x2b320>
   3c50c:	mov	r1, #64	; 0x40
   3c510:	ldr	r0, [pc, #24]	; 3c530 <__assert_fail@plt+0x2b324>
   3c514:	bl	110b0 <snprintf@plt>
   3c518:	ldr	r0, [pc, #16]	; 3c530 <__assert_fail@plt+0x2b324>
   3c51c:	add	sp, sp, #8
   3c520:	pop	{r4, pc}
   3c524:	ldrdeq	ip, [r9], -r0
   3c528:			; <UNDEFINED> instruction: 0x0007e1b4
   3c52c:	andeq	r7, r6, r0, asr pc
   3c530:	ldrdeq	ip, [r9], -r8
   3c534:	push	{r4, lr}
   3c538:	bl	3ac20 <__assert_fail@plt+0x29a14>
   3c53c:	adds	r0, r0, #0
   3c540:	movne	r0, #1
   3c544:	pop	{r4, pc}
   3c548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c54c:	sub	sp, sp, #12
   3c550:	mov	sl, r1
   3c554:	mov	r9, r0
   3c558:	bl	3ac20 <__assert_fail@plt+0x29a14>
   3c55c:	subs	r3, r0, #0
   3c560:	str	r3, [sp, #4]
   3c564:	beq	3c62c <__assert_fail@plt+0x2b420>
   3c568:	ldr	r1, [pc, #240]	; 3c660 <__assert_fail@plt+0x2b454>
   3c56c:	mov	r0, r9
   3c570:	bl	11164 <fopen64@plt>
   3c574:	subs	r6, r0, #0
   3c578:	beq	3c638 <__assert_fail@plt+0x2b42c>
   3c57c:	ldr	r5, [pc, #224]	; 3c664 <__assert_fail@plt+0x2b458>
   3c580:	ldr	r4, [pc, #224]	; 3c668 <__assert_fail@plt+0x2b45c>
   3c584:	mov	r7, r5
   3c588:	mov	fp, #0
   3c58c:	mov	r3, r6
   3c590:	mov	r2, #8192	; 0x2000
   3c594:	mov	r1, #1
   3c598:	mov	r0, r7
   3c59c:	bl	10ffc <fread@plt>
   3c5a0:	subs	r8, r0, #0
   3c5a4:	beq	3c5e0 <__assert_fail@plt+0x2b3d4>
   3c5a8:	add	r0, r5, r8
   3c5ac:	cmp	r0, r5
   3c5b0:	mvn	r2, fp
   3c5b4:	bls	3c58c <__assert_fail@plt+0x2b380>
   3c5b8:	ldr	r1, [pc, #164]	; 3c664 <__assert_fail@plt+0x2b458>
   3c5bc:	ldrb	r3, [r1], #1
   3c5c0:	eor	r3, r3, r2
   3c5c4:	cmp	r0, r1
   3c5c8:	uxtb	r3, r3
   3c5cc:	ldr	r3, [r4, r3, lsl #2]
   3c5d0:	eor	r2, r3, r2, lsr #8
   3c5d4:	bne	3c5bc <__assert_fail@plt+0x2b3b0>
   3c5d8:	mvn	fp, r2
   3c5dc:	b	3c58c <__assert_fail@plt+0x2b380>
   3c5e0:	mov	r0, r6
   3c5e4:	bl	110f8 <fclose@plt>
   3c5e8:	ldr	r2, [sl]
   3c5ec:	cmp	r2, fp
   3c5f0:	moveq	r0, #1
   3c5f4:	bne	3c600 <__assert_fail@plt+0x2b3f4>
   3c5f8:	add	sp, sp, #12
   3c5fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c600:	ldr	r0, [sp, #4]
   3c604:	bl	3ac1c <__assert_fail@plt+0x29a10>
   3c608:	mov	r2, #5
   3c60c:	ldr	r1, [pc, #88]	; 3c66c <__assert_fail@plt+0x2b460>
   3c610:	mov	r0, r8
   3c614:	bl	10f90 <dcgettext@plt>
   3c618:	mov	r1, r9
   3c61c:	bl	54dd0 <warn@@Base>
   3c620:	mov	r0, r8
   3c624:	add	sp, sp, #12
   3c628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c62c:	ldr	r0, [sp, #4]
   3c630:	add	sp, sp, #12
   3c634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c638:	ldr	r0, [sp, #4]
   3c63c:	bl	3ac1c <__assert_fail@plt+0x29a10>
   3c640:	mov	r2, #5
   3c644:	ldr	r1, [pc, #36]	; 3c670 <__assert_fail@plt+0x2b464>
   3c648:	mov	r0, r6
   3c64c:	bl	10f90 <dcgettext@plt>
   3c650:	mov	r1, r9
   3c654:	bl	54dd0 <warn@@Base>
   3c658:	mov	r0, r6
   3c65c:	b	3c5f8 <__assert_fail@plt+0x2b3ec>
   3c660:	andeq	r5, r6, r0, ror r4
   3c664:	strdeq	ip, [r9], -ip	; <UNPREDICTABLE>
   3c668:			; <UNDEFINED> instruction: 0x0007d2bc
   3c66c:	strdeq	lr, [r7], -r0
   3c670:	andeq	lr, r7, r0, asr #3
   3c674:	push	{r4, r5, r6, r7, r8, lr}
   3c678:	mov	r6, r1
   3c67c:	ldrd	r4, [r0, #32]
   3c680:	ldr	r7, [r0, #16]
   3c684:	mov	r1, r4
   3c688:	mov	r0, r7
   3c68c:	bl	11104 <strnlen@plt>
   3c690:	mov	r3, #0
   3c694:	cmp	r5, r3
   3c698:	add	r0, r0, #4
   3c69c:	bic	r0, r0, #3
   3c6a0:	add	r2, r0, #4
   3c6a4:	cmpeq	r4, r2
   3c6a8:	movcc	r7, #0
   3c6ac:	bcc	3c6c8 <__assert_fail@plt+0x2b4bc>
   3c6b0:	ldr	r3, [pc, #24]	; 3c6d0 <__assert_fail@plt+0x2b4c4>
   3c6b4:	add	r0, r7, r0
   3c6b8:	mov	r1, #4
   3c6bc:	ldr	r3, [r3]
   3c6c0:	blx	r3
   3c6c4:	str	r0, [r6]
   3c6c8:	mov	r0, r7
   3c6cc:	pop	{r4, r5, r6, r7, r8, pc}
   3c6d0:	andeq	lr, r9, ip, asr sp
   3c6d4:	push	{r4, r5, r6, r7, r8, lr}
   3c6d8:	mov	r8, r1
   3c6dc:	ldrd	r4, [r0, #32]
   3c6e0:	ldr	r7, [r0, #16]
   3c6e4:	mov	r1, r4
   3c6e8:	mov	r0, r7
   3c6ec:	bl	11104 <strnlen@plt>
   3c6f0:	mov	r3, #0
   3c6f4:	cmp	r5, r3
   3c6f8:	add	r6, r0, #1
   3c6fc:	cmpeq	r4, r6
   3c700:	bls	3c738 <__assert_fail@plt+0x2b52c>
   3c704:	sub	r4, r4, r6
   3c708:	cmp	r4, #19
   3c70c:	bls	3c738 <__assert_fail@plt+0x2b52c>
   3c710:	mov	r1, #8
   3c714:	mov	r0, #1
   3c718:	bl	10ef4 <calloc@plt>
   3c71c:	cmp	r0, #0
   3c720:	beq	3c738 <__assert_fail@plt+0x2b52c>
   3c724:	add	r6, r7, r6
   3c728:	str	r0, [r8]
   3c72c:	stm	r0, {r4, r6}
   3c730:	mov	r0, r7
   3c734:	pop	{r4, r5, r6, r7, r8, pc}
   3c738:	mov	r7, #0
   3c73c:	mov	r0, r7
   3c740:	pop	{r4, r5, r6, r7, r8, pc}
   3c744:	ldr	r1, [pc, #180]	; 3c800 <__assert_fail@plt+0x2b5f4>
   3c748:	push	{r4, r5, r6, r7, lr}
   3c74c:	sub	sp, sp, #44	; 0x2c
   3c750:	ldr	r4, [r1, #80]	; 0x50
   3c754:	ldr	r5, [sp, #64]	; 0x40
   3c758:	add	ip, r4, #1
   3c75c:	and	ip, ip, #15
   3c760:	str	ip, [r1, #80]	; 0x50
   3c764:	cmp	r5, #0
   3c768:	add	r1, r1, #84	; 0x54
   3c76c:	mov	r6, r2
   3c770:	mov	r7, r3
   3c774:	add	r4, r1, r4, lsl #6
   3c778:	bne	3c7d0 <__assert_fail@plt+0x2b5c4>
   3c77c:	cmp	r0, #0
   3c780:	add	r5, sp, #8
   3c784:	beq	3c7bc <__assert_fail@plt+0x2b5b0>
   3c788:	mov	r3, r0
   3c78c:	ldr	r2, [pc, #112]	; 3c804 <__assert_fail@plt+0x2b5f8>
   3c790:	mov	r0, r5
   3c794:	ldr	r1, [pc, #108]	; 3c808 <__assert_fail@plt+0x2b5fc>
   3c798:	bl	1114c <sprintf@plt>
   3c79c:	strd	r6, [sp]
   3c7a0:	mov	r2, r5
   3c7a4:	mov	r1, #64	; 0x40
   3c7a8:	mov	r0, r4
   3c7ac:	bl	110b0 <snprintf@plt>
   3c7b0:	mov	r0, r4
   3c7b4:	add	sp, sp, #44	; 0x2c
   3c7b8:	pop	{r4, r5, r6, r7, pc}
   3c7bc:	mov	r0, r5
   3c7c0:	ldr	r2, [pc, #60]	; 3c804 <__assert_fail@plt+0x2b5f8>
   3c7c4:	ldr	r1, [pc, #64]	; 3c80c <__assert_fail@plt+0x2b600>
   3c7c8:	bl	1114c <sprintf@plt>
   3c7cc:	b	3c79c <__assert_fail@plt+0x2b590>
   3c7d0:	strd	r6, [sp]
   3c7d4:	ldr	r2, [pc, #52]	; 3c810 <__assert_fail@plt+0x2b604>
   3c7d8:	mov	r1, #64	; 0x40
   3c7dc:	mov	r0, r4
   3c7e0:	bl	110b0 <snprintf@plt>
   3c7e4:	cmp	r5, #8
   3c7e8:	movcs	r5, #8
   3c7ec:	sub	r4, r4, r5, lsl #1
   3c7f0:	add	r4, r4, #16
   3c7f4:	mov	r0, r4
   3c7f8:	add	sp, sp, #44	; 0x2c
   3c7fc:	pop	{r4, r5, r6, r7, pc}
   3c800:	ldrdeq	ip, [r9], -r0
   3c804:	andeq	r0, r6, r8, lsl #28
   3c808:	andeq	r0, r6, ip, lsl #28
   3c80c:	andeq	lr, r7, r4, asr #4
   3c810:	andeq	lr, r7, r8, lsr r2
   3c814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c818:	sub	sp, sp, #28
   3c81c:	ldr	r3, [sp, #68]	; 0x44
   3c820:	ldr	ip, [sp, #64]	; 0x40
   3c824:	mul	r3, r0, r3
   3c828:	umull	r4, r5, r0, ip
   3c82c:	mla	r3, ip, r1, r3
   3c830:	ldr	r1, [sp, #72]	; 0x48
   3c834:	add	r5, r3, r5
   3c838:	cmp	r1, #0
   3c83c:	beq	3c928 <__assert_fail@plt+0x2b71c>
   3c840:	ldr	r6, [pc, #500]	; 3ca3c <__assert_fail@plt+0x2b830>
   3c844:	ldr	r0, [r6, #2608]	; 0xa30
   3c848:	cmp	r0, #0
   3c84c:	beq	3c944 <__assert_fail@plt+0x2b738>
   3c850:	mov	r3, #36	; 0x24
   3c854:	mov	lr, #34	; 0x22
   3c858:	cmp	r2, #0
   3c85c:	beq	3c870 <__assert_fail@plt+0x2b664>
   3c860:	ldr	r7, [r2, #56]	; 0x38
   3c864:	ldr	r2, [r2, #60]	; 0x3c
   3c868:	adds	r4, r4, r7
   3c86c:	adc	r5, r5, r2
   3c870:	add	r3, r3, r3, lsl #3
   3c874:	add	r3, r6, r3, lsl #3
   3c878:	ldrd	r2, [r3, #32]
   3c87c:	cmp	r3, r5
   3c880:	cmpeq	r2, r4
   3c884:	bls	3c958 <__assert_fail@plt+0x2b74c>
   3c888:	add	lr, lr, lr, lsl #3
   3c88c:	add	r6, r6, lr, lsl #3
   3c890:	ldr	r3, [r6, #16]
   3c894:	cmp	r3, #0
   3c898:	beq	3c9a8 <__assert_fail@plt+0x2b79c>
   3c89c:	ldr	r3, [pc, #412]	; 3ca40 <__assert_fail@plt+0x2b834>
   3c8a0:	add	r0, r0, r4
   3c8a4:	mov	r1, ip
   3c8a8:	ldr	r3, [r3]
   3c8ac:	blx	r3
   3c8b0:	ldr	r4, [r6, #24]
   3c8b4:	ldrd	sl, [r6, #32]
   3c8b8:	ldr	r7, [r6, #28]
   3c8bc:	subs	r8, r0, r4
   3c8c0:	sbc	r9, r1, r7
   3c8c4:	cmp	fp, r9
   3c8c8:	cmpeq	sl, r8
   3c8cc:	mov	r5, r0
   3c8d0:	bls	3c9d0 <__assert_fail@plt+0x2b7c4>
   3c8d4:	ldr	r2, [r6, #16]
   3c8d8:	str	r1, [sp, #20]
   3c8dc:	sub	r1, sl, r8
   3c8e0:	add	r8, r2, r8
   3c8e4:	mov	r0, r8
   3c8e8:	bl	11104 <strnlen@plt>
   3c8ec:	adds	r4, r4, sl
   3c8f0:	adc	r7, r7, fp
   3c8f4:	subs	r3, r4, r5
   3c8f8:	str	r3, [sp, #8]
   3c8fc:	ldr	r3, [sp, #20]
   3c900:	mov	r1, #0
   3c904:	sbc	r3, r7, r3
   3c908:	str	r3, [sp, #12]
   3c90c:	ldrd	r2, [sp, #8]
   3c910:	cmp	r1, r3
   3c914:	cmpeq	r0, r2
   3c918:	beq	3ca2c <__assert_fail@plt+0x2b820>
   3c91c:	mov	r0, r8
   3c920:	add	sp, sp, #28
   3c924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c928:	ldr	r6, [pc, #268]	; 3ca3c <__assert_fail@plt+0x2b830>
   3c92c:	ldr	r0, [r6, #2536]	; 0x9e8
   3c930:	cmp	r0, #0
   3c934:	beq	3ca20 <__assert_fail@plt+0x2b814>
   3c938:	mov	r3, #35	; 0x23
   3c93c:	mov	lr, #10
   3c940:	b	3c858 <__assert_fail@plt+0x2b64c>
   3c944:	ldr	r1, [pc, #248]	; 3ca44 <__assert_fail@plt+0x2b838>
   3c948:	mov	r2, #5
   3c94c:	add	sp, sp, #28
   3c950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c954:	b	10f90 <dcgettext@plt>
   3c958:	ldr	r1, [pc, #232]	; 3ca48 <__assert_fail@plt+0x2b83c>
   3c95c:	mov	r2, #5
   3c960:	mov	r0, #0
   3c964:	mov	r6, r0
   3c968:	bl	10f90 <dcgettext@plt>
   3c96c:	mov	r2, r4
   3c970:	mov	r3, r5
   3c974:	str	r6, [sp]
   3c978:	mov	r7, r0
   3c97c:	ldr	r0, [pc, #200]	; 3ca4c <__assert_fail@plt+0x2b840>
   3c980:	bl	3c744 <__assert_fail@plt+0x2b538>
   3c984:	mov	r1, r0
   3c988:	mov	r0, r7
   3c98c:	bl	54dd0 <warn@@Base>
   3c990:	mov	r0, r6
   3c994:	mov	r2, #5
   3c998:	ldr	r1, [pc, #176]	; 3ca50 <__assert_fail@plt+0x2b844>
   3c99c:	add	sp, sp, #28
   3c9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c9a4:	b	10f90 <dcgettext@plt>
   3c9a8:	cmp	r1, #0
   3c9ac:	moveq	r0, r1
   3c9b0:	movne	r0, r3
   3c9b4:	movne	r2, #5
   3c9b8:	ldrne	r1, [pc, #148]	; 3ca54 <__assert_fail@plt+0x2b848>
   3c9bc:	moveq	r2, #5
   3c9c0:	ldreq	r1, [pc, #144]	; 3ca58 <__assert_fail@plt+0x2b84c>
   3c9c4:	add	sp, sp, #28
   3c9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c9cc:	b	10f90 <dcgettext@plt>
   3c9d0:	ldr	r1, [pc, #132]	; 3ca5c <__assert_fail@plt+0x2b850>
   3c9d4:	mov	r2, #5
   3c9d8:	mov	r0, #0
   3c9dc:	mov	r4, r0
   3c9e0:	bl	10f90 <dcgettext@plt>
   3c9e4:	mov	r2, r8
   3c9e8:	mov	r3, r9
   3c9ec:	str	r4, [sp]
   3c9f0:	mov	r5, r0
   3c9f4:	ldr	r0, [pc, #80]	; 3ca4c <__assert_fail@plt+0x2b840>
   3c9f8:	bl	3c744 <__assert_fail@plt+0x2b538>
   3c9fc:	mov	r1, r0
   3ca00:	mov	r0, r5
   3ca04:	bl	54dd0 <warn@@Base>
   3ca08:	mov	r0, r4
   3ca0c:	mov	r2, #5
   3ca10:	ldr	r1, [pc, #72]	; 3ca60 <__assert_fail@plt+0x2b854>
   3ca14:	add	sp, sp, #28
   3ca18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ca1c:	b	10f90 <dcgettext@plt>
   3ca20:	mov	r2, #5
   3ca24:	ldr	r1, [pc, #56]	; 3ca64 <__assert_fail@plt+0x2b858>
   3ca28:	b	3c94c <__assert_fail@plt+0x2b740>
   3ca2c:	mov	r2, #5
   3ca30:	ldr	r1, [pc, #48]	; 3ca68 <__assert_fail@plt+0x2b85c>
   3ca34:	mov	r0, #0
   3ca38:	b	3c94c <__assert_fail@plt+0x2b740>
   3ca3c:	strdeq	r9, [r9], -r0
   3ca40:	andeq	lr, r9, ip, asr sp
   3ca44:	andeq	lr, r7, ip, asr #4
   3ca48:	muleq	r7, r0, r2
   3ca4c:	andeq	r9, r6, r0, lsr #15
   3ca50:			; <UNDEFINED> instruction: 0x0007e2bc
   3ca54:	ldrdeq	lr, [r7], -r8
   3ca58:	strdeq	lr, [r7], -r4
   3ca5c:	andeq	lr, r7, ip, lsl #6
   3ca60:	andeq	lr, r7, r0, asr #6
   3ca64:	andeq	lr, r7, r0, ror r2
   3ca68:	andeq	lr, r7, r4, ror #6
   3ca6c:	push	{lr}		; (str lr, [sp, #-4]!)
   3ca70:	sub	sp, sp, #12
   3ca74:	mov	r3, r1
   3ca78:	str	r2, [sp]
   3ca7c:	mov	r2, r0
   3ca80:	mov	r0, #0
   3ca84:	bl	3c744 <__assert_fail@plt+0x2b538>
   3ca88:	mov	r1, r0
   3ca8c:	ldr	r0, [pc, #8]	; 3ca9c <__assert_fail@plt+0x2b890>
   3ca90:	add	sp, sp, #12
   3ca94:	pop	{lr}		; (ldr lr, [sp], #4)
   3ca98:	b	10f24 <printf@plt>
   3ca9c:	andeq	pc, r7, r4, ror #10
   3caa0:	push	{r4, r5, r6, r7, r8, lr}
   3caa4:	ldr	r7, [pc, #72]	; 3caf4 <__assert_fail@plt+0x2b8e8>
   3caa8:	ldr	r5, [r7, #1108]	; 0x454
   3caac:	cmp	r5, #0
   3cab0:	beq	3cae4 <__assert_fail@plt+0x2b8d8>
   3cab4:	ldr	r0, [r5, #12]
   3cab8:	ldr	r6, [r5, #20]
   3cabc:	cmp	r0, #0
   3cac0:	beq	3cad4 <__assert_fail@plt+0x2b8c8>
   3cac4:	ldr	r4, [r0, #12]
   3cac8:	bl	10f54 <free@plt>
   3cacc:	subs	r0, r4, #0
   3cad0:	bne	3cac4 <__assert_fail@plt+0x2b8b8>
   3cad4:	mov	r0, r5
   3cad8:	bl	10f54 <free@plt>
   3cadc:	subs	r5, r6, #0
   3cae0:	bne	3cab4 <__assert_fail@plt+0x2b8a8>
   3cae4:	mov	r3, #0
   3cae8:	str	r3, [r7, #1108]	; 0x454
   3caec:	str	r3, [r7, #1112]	; 0x458
   3caf0:	pop	{r4, r5, r6, r7, r8, pc}
   3caf4:	ldrdeq	ip, [r9], -r0
   3caf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cafc:	mov	r9, r2
   3cb00:	ldr	r3, [r0, #8]
   3cb04:	ldr	r2, [r2]
   3cb08:	sub	sp, sp, #108	; 0x6c
   3cb0c:	cmp	r2, r3
   3cb10:	strne	r3, [r9]
   3cb14:	ldr	r3, [r1]
   3cb18:	mov	r4, r0
   3cb1c:	cmp	r3, #0
   3cb20:	ldr	r6, [pc, #548]	; 3cd4c <__assert_fail@plt+0x2bb40>
   3cb24:	bne	3ccac <__assert_fail@plt+0x2baa0>
   3cb28:	ldr	r2, [r6]
   3cb2c:	ldrd	r0, [r4, #32]
   3cb30:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3cb34:	ldrb	r3, [r4, #69]	; 0x45
   3cb38:	cmp	r3, #0
   3cb3c:	beq	3cc84 <__assert_fail@plt+0x2ba78>
   3cb40:	ldr	r3, [pc, #520]	; 3cd50 <__assert_fail@plt+0x2bb44>
   3cb44:	add	r5, sp, #4
   3cb48:	str	r3, [sp, #4]
   3cb4c:	mov	r1, r5
   3cb50:	ldr	r0, [pc, #508]	; 3cd54 <__assert_fail@plt+0x2bb48>
   3cb54:	bl	10f24 <printf@plt>
   3cb58:	ldr	r0, [r4, #8]
   3cb5c:	cmp	r0, #0
   3cb60:	beq	3cc08 <__assert_fail@plt+0x2b9fc>
   3cb64:	ldr	r6, [pc, #492]	; 3cd58 <__assert_fail@plt+0x2bb4c>
   3cb68:	ldr	fp, [pc, #480]	; 3cd50 <__assert_fail@plt+0x2bb44>
   3cb6c:	ldr	sl, [pc, #488]	; 3cd5c <__assert_fail@plt+0x2bb50>
   3cb70:	ldr	r9, [pc, #488]	; 3cd60 <__assert_fail@plt+0x2bb54>
   3cb74:	ldr	r8, [pc, #488]	; 3cd64 <__assert_fail@plt+0x2bb58>
   3cb78:	mov	r7, #0
   3cb7c:	b	3cbb8 <__assert_fail@plt+0x2b9ac>
   3cb80:	cmp	r2, #8
   3cb84:	beq	3cc4c <__assert_fail@plt+0x2ba40>
   3cb88:	cmp	r2, #9
   3cb8c:	beq	3cc2c <__assert_fail@plt+0x2ba20>
   3cb90:	cmp	r2, #7
   3cb94:	beq	3cc20 <__assert_fail@plt+0x2ba14>
   3cb98:	str	sl, [r5]
   3cb9c:	mov	r1, r5
   3cba0:	mov	r0, r6
   3cba4:	bl	10f24 <printf@plt>
   3cba8:	ldr	r0, [r4, #8]
   3cbac:	add	r7, r7, #1
   3cbb0:	cmp	r0, r7
   3cbb4:	bls	3cc08 <__assert_fail@plt+0x2b9fc>
   3cbb8:	ldr	r1, [r4, #12]
   3cbbc:	lsl	r2, r7, #1
   3cbc0:	ldrsh	r2, [r1, r2]
   3cbc4:	cmn	r2, #1
   3cbc8:	beq	3cbac <__assert_fail@plt+0x2b9a0>
   3cbcc:	cmp	r2, #16
   3cbd0:	beq	3cc18 <__assert_fail@plt+0x2ba0c>
   3cbd4:	ble	3cb80 <__assert_fail@plt+0x2b974>
   3cbd8:	cmp	r2, #22
   3cbdc:	beq	3cc70 <__assert_fail@plt+0x2ba64>
   3cbe0:	cmp	r2, #128	; 0x80
   3cbe4:	beq	3cc58 <__assert_fail@plt+0x2ba4c>
   3cbe8:	cmp	r2, #20
   3cbec:	bne	3cb98 <__assert_fail@plt+0x2b98c>
   3cbf0:	ldr	r2, [r4, #16]
   3cbf4:	mov	r1, r8
   3cbf8:	mov	r0, r5
   3cbfc:	ldr	r2, [r2, r7, lsl #2]
   3cc00:	bl	1114c <sprintf@plt>
   3cc04:	b	3cb9c <__assert_fail@plt+0x2b990>
   3cc08:	mov	r0, #10
   3cc0c:	bl	110c8 <putchar@plt>
   3cc10:	add	sp, sp, #108	; 0x6c
   3cc14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cc18:	str	fp, [r5]
   3cc1c:	b	3cb9c <__assert_fail@plt+0x2b990>
   3cc20:	mov	r2, #117	; 0x75
   3cc24:	strh	r2, [r5]
   3cc28:	b	3cb9c <__assert_fail@plt+0x2b990>
   3cc2c:	ldr	r2, [r4, #16]
   3cc30:	mov	r1, #0
   3cc34:	ldr	r0, [r2, r7, lsl #2]
   3cc38:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   3cc3c:	mov	r1, r0
   3cc40:	mov	r0, r5
   3cc44:	bl	10ff0 <strcpy@plt>
   3cc48:	b	3cb9c <__assert_fail@plt+0x2b990>
   3cc4c:	mov	r2, #115	; 0x73
   3cc50:	strh	r2, [r5]
   3cc54:	b	3cb9c <__assert_fail@plt+0x2b990>
   3cc58:	ldr	r2, [r4, #16]
   3cc5c:	mov	r1, r9
   3cc60:	mov	r0, r5
   3cc64:	ldr	r2, [r2, r7, lsl #2]
   3cc68:	bl	1114c <sprintf@plt>
   3cc6c:	b	3cb9c <__assert_fail@plt+0x2b990>
   3cc70:	ldr	r3, [pc, #240]	; 3cd68 <__assert_fail@plt+0x2bb5c>
   3cc74:	ldm	r3, {r0, r1}
   3cc78:	str	r0, [r5]
   3cc7c:	strb	r1, [sp, #8]
   3cc80:	b	3cb9c <__assert_fail@plt+0x2b990>
   3cc84:	mov	r1, #1
   3cc88:	ldr	r0, [r4, #48]	; 0x30
   3cc8c:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   3cc90:	add	r5, sp, #4
   3cc94:	ldr	r3, [r4, #56]	; 0x38
   3cc98:	ldr	r1, [pc, #204]	; 3cd6c <__assert_fail@plt+0x2bb60>
   3cc9c:	mov	r2, r0
   3cca0:	mov	r0, r5
   3cca4:	bl	1114c <sprintf@plt>
   3cca8:	b	3cb4c <__assert_fail@plt+0x2b940>
   3ccac:	mov	r5, #0
   3ccb0:	str	r5, [r1]
   3ccb4:	ldr	r1, [r6]
   3ccb8:	ldr	r2, [pc, #176]	; 3cd70 <__assert_fail@plt+0x2bb64>
   3ccbc:	ldr	r0, [pc, #176]	; 3cd74 <__assert_fail@plt+0x2bb68>
   3ccc0:	lsl	r1, r1, #1
   3ccc4:	bl	10f24 <printf@plt>
   3ccc8:	ldr	ip, [r9]
   3cccc:	cmp	ip, r5
   3ccd0:	beq	3cd40 <__assert_fail@plt+0x2bb34>
   3ccd4:	ldr	r7, [pc, #124]	; 3cd58 <__assert_fail@plt+0x2bb4c>
   3ccd8:	ldr	r8, [pc, #152]	; 3cd78 <__assert_fail@plt+0x2bb6c>
   3ccdc:	b	3cd00 <__assert_fail@plt+0x2baf4>
   3cce0:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   3cce4:	mov	r1, r0
   3cce8:	mov	r0, r7
   3ccec:	bl	10f24 <printf@plt>
   3ccf0:	ldr	ip, [r9]
   3ccf4:	add	r5, r5, #1
   3ccf8:	cmp	ip, r5
   3ccfc:	bls	3cd40 <__assert_fail@plt+0x2bb34>
   3cd00:	ldr	r2, [r4, #12]
   3cd04:	lsl	r3, r5, #1
   3cd08:	mov	r0, r5
   3cd0c:	ldrsh	r3, [r2, r3]
   3cd10:	mov	r1, #1
   3cd14:	cmn	r3, #1
   3cd18:	beq	3ccf4 <__assert_fail@plt+0x2bae8>
   3cd1c:	ldr	r3, [r4, #64]	; 0x40
   3cd20:	cmp	r3, r5
   3cd24:	bne	3cce0 <__assert_fail@plt+0x2bad4>
   3cd28:	mov	r0, r8
   3cd2c:	bl	10f24 <printf@plt>
   3cd30:	ldr	ip, [r9]
   3cd34:	add	r5, r5, #1
   3cd38:	cmp	ip, r5
   3cd3c:	bhi	3cd00 <__assert_fail@plt+0x2baf4>
   3cd40:	mov	r0, #10
   3cd44:	bl	110c8 <putchar@plt>
   3cd48:	b	3cb28 <__assert_fail@plt+0x2b91c>
   3cd4c:	andeq	lr, r9, ip, lsr #26
   3cd50:	rsbseq	r7, r0, r5, ror #16
   3cd54:			; <UNDEFINED> instruction: 0x0007e3b4
   3cd58:	andeq	lr, r7, r4, lsr #7
   3cd5c:	rsbeq	r2, r1, lr, ror #30
   3cd60:			; <UNDEFINED> instruction: 0x0007e3bc
   3cd64:	andeq	lr, r7, r4, asr #7
   3cd68:	andeq	lr, r7, ip, asr #7
   3cd6c:	andeq	lr, r7, ip, lsr #7
   3cd70:	andeq	lr, r7, r4, lsl #7
   3cd74:	andeq	lr, r7, ip, lsl #7
   3cd78:	muleq	r7, ip, r3
   3cd7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3cd80:	mov	r4, r1
   3cd84:	mov	r7, r0
   3cd88:	ldr	r1, [sp, #32]
   3cd8c:	mov	r0, r4
   3cd90:	mov	r8, r3
   3cd94:	blx	r2
   3cd98:	subs	r5, r0, #0
   3cd9c:	beq	3d0dc <__assert_fail@plt+0x2bed0>
   3cda0:	mov	r0, r7
   3cda4:	bl	58500 <warn@@Base+0x3730>
   3cda8:	mov	r6, r0
   3cdac:	bl	11080 <strlen@plt>
   3cdb0:	subs	r4, r0, #0
   3cdb4:	beq	3d130 <__assert_fail@plt+0x2bf24>
   3cdb8:	add	r3, r6, r4
   3cdbc:	ldrb	r2, [r3, #-1]
   3cdc0:	cmp	r2, #47	; 0x2f
   3cdc4:	subne	r3, r4, #2
   3cdc8:	addne	r3, r6, r3
   3cdcc:	subne	r0, r6, #1
   3cdd0:	rsbne	r1, r6, #1
   3cdd4:	bne	3cde8 <__assert_fail@plt+0x2bbdc>
   3cdd8:	b	3cdfc <__assert_fail@plt+0x2bbf0>
   3cddc:	ldrb	r2, [r3], #-1
   3cde0:	cmp	r2, #47	; 0x2f
   3cde4:	beq	3d0d4 <__assert_fail@plt+0x2bec8>
   3cde8:	cmp	r3, r0
   3cdec:	add	r4, r1, r3
   3cdf0:	bne	3cddc <__assert_fail@plt+0x2bbd0>
   3cdf4:	mov	r3, r6
   3cdf8:	mov	r4, #0
   3cdfc:	mov	r2, #0
   3ce00:	strb	r2, [r3]
   3ce04:	mov	r0, r5
   3ce08:	bl	11080 <strlen@plt>
   3ce0c:	mov	r9, r0
   3ce10:	add	r0, r0, r4
   3ce14:	add	r0, r0, #51	; 0x33
   3ce18:	bl	11020 <malloc@plt>
   3ce1c:	subs	r4, r0, #0
   3ce20:	beq	3d0fc <__assert_fail@plt+0x2bef0>
   3ce24:	add	r2, r9, #1
   3ce28:	mov	r1, r5
   3ce2c:	bl	10f6c <memcpy@plt>
   3ce30:	ldr	r1, [sp, #32]
   3ce34:	mov	r0, r4
   3ce38:	blx	r8
   3ce3c:	cmp	r0, #0
   3ce40:	beq	3ce94 <__assert_fail@plt+0x2bc88>
   3ce44:	mov	r0, r6
   3ce48:	bl	10f54 <free@plt>
   3ce4c:	mov	r0, r4
   3ce50:	bl	3ac20 <__assert_fail@plt+0x29a14>
   3ce54:	ldr	r6, [pc, #732]	; 3d138 <__assert_fail@plt+0x2bf2c>
   3ce58:	mov	r2, #5
   3ce5c:	cmp	r0, #0
   3ce60:	mov	r5, r0
   3ce64:	str	r0, [r6, #1116]	; 0x45c
   3ce68:	beq	3d114 <__assert_fail@plt+0x2bf08>
   3ce6c:	ldr	r1, [pc, #712]	; 3d13c <__assert_fail@plt+0x2bf30>
   3ce70:	mov	r0, #0
   3ce74:	bl	10f90 <dcgettext@plt>
   3ce78:	mov	r2, r4
   3ce7c:	mov	r1, r7
   3ce80:	bl	10f24 <printf@plt>
   3ce84:	ldr	r5, [r6, #1116]	; 0x45c
   3ce88:	str	r4, [r6, #1120]	; 0x460
   3ce8c:	mov	r0, r5
   3ce90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3ce94:	mov	r2, r5
   3ce98:	ldr	r1, [pc, #672]	; 3d140 <__assert_fail@plt+0x2bf34>
   3ce9c:	mov	r0, r4
   3cea0:	bl	1114c <sprintf@plt>
   3cea4:	ldr	r1, [sp, #32]
   3cea8:	mov	r0, r4
   3ceac:	blx	r8
   3ceb0:	cmp	r0, #0
   3ceb4:	bne	3ce44 <__assert_fail@plt+0x2bc38>
   3ceb8:	mov	r3, r5
   3cebc:	mov	r2, r6
   3cec0:	ldr	r1, [pc, #636]	; 3d144 <__assert_fail@plt+0x2bf38>
   3cec4:	mov	r0, r4
   3cec8:	bl	1114c <sprintf@plt>
   3cecc:	ldr	r1, [sp, #32]
   3ced0:	mov	r0, r4
   3ced4:	blx	r8
   3ced8:	cmp	r0, #0
   3cedc:	bne	3ce44 <__assert_fail@plt+0x2bc38>
   3cee0:	mov	r3, r5
   3cee4:	mov	r2, r6
   3cee8:	ldr	r1, [pc, #600]	; 3d148 <__assert_fail@plt+0x2bf3c>
   3ceec:	mov	r0, r4
   3cef0:	bl	1114c <sprintf@plt>
   3cef4:	ldr	r1, [sp, #32]
   3cef8:	mov	r0, r4
   3cefc:	blx	r8
   3cf00:	cmp	r0, #0
   3cf04:	bne	3ce44 <__assert_fail@plt+0x2bc38>
   3cf08:	mov	r3, r5
   3cf0c:	ldr	r2, [pc, #568]	; 3d14c <__assert_fail@plt+0x2bf40>
   3cf10:	ldr	r1, [pc, #568]	; 3d150 <__assert_fail@plt+0x2bf44>
   3cf14:	mov	r0, r4
   3cf18:	bl	1114c <sprintf@plt>
   3cf1c:	ldr	r1, [sp, #32]
   3cf20:	mov	r0, r4
   3cf24:	blx	r8
   3cf28:	cmp	r0, #0
   3cf2c:	bne	3ce44 <__assert_fail@plt+0x2bc38>
   3cf30:	mov	r3, r5
   3cf34:	ldr	r2, [pc, #536]	; 3d154 <__assert_fail@plt+0x2bf48>
   3cf38:	ldr	r1, [pc, #528]	; 3d150 <__assert_fail@plt+0x2bf44>
   3cf3c:	mov	r0, r4
   3cf40:	bl	1114c <sprintf@plt>
   3cf44:	ldr	r1, [sp, #32]
   3cf48:	mov	r0, r4
   3cf4c:	blx	r8
   3cf50:	cmp	r0, #0
   3cf54:	bne	3ce44 <__assert_fail@plt+0x2bc38>
   3cf58:	ldr	r2, [pc, #504]	; 3d158 <__assert_fail@plt+0x2bf4c>
   3cf5c:	mov	r3, r4
   3cf60:	mov	ip, #47	; 0x2f
   3cf64:	ldm	r2, {r0, r1, r2}
   3cf68:	stmia	r3!, {r0, r1}
   3cf6c:	mov	r1, r5
   3cf70:	strh	r2, [r3]
   3cf74:	add	r0, r4, #11
   3cf78:	strb	ip, [r4, #10]
   3cf7c:	bl	10ff0 <strcpy@plt>
   3cf80:	ldr	r1, [sp, #32]
   3cf84:	mov	r0, r4
   3cf88:	blx	r8
   3cf8c:	subs	r8, r0, #0
   3cf90:	bne	3ce44 <__assert_fail@plt+0x2bc38>
   3cf94:	mov	r2, #5
   3cf98:	ldr	r1, [pc, #444]	; 3d15c <__assert_fail@plt+0x2bf50>
   3cf9c:	bl	10f90 <dcgettext@plt>
   3cfa0:	mov	r1, r5
   3cfa4:	bl	54dd0 <warn@@Base>
   3cfa8:	mov	r2, #5
   3cfac:	ldr	r1, [pc, #428]	; 3d160 <__assert_fail@plt+0x2bf54>
   3cfb0:	mov	r0, r8
   3cfb4:	bl	10f90 <dcgettext@plt>
   3cfb8:	mov	r1, r4
   3cfbc:	bl	54dd0 <warn@@Base>
   3cfc0:	mov	r3, r5
   3cfc4:	ldr	r2, [pc, #392]	; 3d154 <__assert_fail@plt+0x2bf48>
   3cfc8:	ldr	r1, [pc, #384]	; 3d150 <__assert_fail@plt+0x2bf44>
   3cfcc:	mov	r0, r4
   3cfd0:	bl	1114c <sprintf@plt>
   3cfd4:	mov	r2, #5
   3cfd8:	ldr	r1, [pc, #384]	; 3d160 <__assert_fail@plt+0x2bf54>
   3cfdc:	mov	r0, r8
   3cfe0:	bl	10f90 <dcgettext@plt>
   3cfe4:	mov	r1, r4
   3cfe8:	bl	54dd0 <warn@@Base>
   3cfec:	mov	r3, r5
   3cff0:	ldr	r2, [pc, #340]	; 3d14c <__assert_fail@plt+0x2bf40>
   3cff4:	ldr	r1, [pc, #340]	; 3d150 <__assert_fail@plt+0x2bf44>
   3cff8:	mov	r0, r4
   3cffc:	bl	1114c <sprintf@plt>
   3d000:	mov	r2, #5
   3d004:	ldr	r1, [pc, #340]	; 3d160 <__assert_fail@plt+0x2bf54>
   3d008:	mov	r0, r8
   3d00c:	bl	10f90 <dcgettext@plt>
   3d010:	mov	r1, r4
   3d014:	bl	54dd0 <warn@@Base>
   3d018:	mov	r3, r5
   3d01c:	mov	r2, r6
   3d020:	ldr	r1, [pc, #288]	; 3d148 <__assert_fail@plt+0x2bf3c>
   3d024:	mov	r0, r4
   3d028:	bl	1114c <sprintf@plt>
   3d02c:	mov	r2, #5
   3d030:	ldr	r1, [pc, #296]	; 3d160 <__assert_fail@plt+0x2bf54>
   3d034:	mov	r0, r8
   3d038:	bl	10f90 <dcgettext@plt>
   3d03c:	mov	r1, r4
   3d040:	bl	54dd0 <warn@@Base>
   3d044:	mov	r3, r5
   3d048:	mov	r2, r6
   3d04c:	ldr	r1, [pc, #240]	; 3d144 <__assert_fail@plt+0x2bf38>
   3d050:	mov	r0, r4
   3d054:	bl	1114c <sprintf@plt>
   3d058:	mov	r2, #5
   3d05c:	ldr	r1, [pc, #252]	; 3d160 <__assert_fail@plt+0x2bf54>
   3d060:	mov	r0, r8
   3d064:	bl	10f90 <dcgettext@plt>
   3d068:	mov	r1, r4
   3d06c:	bl	54dd0 <warn@@Base>
   3d070:	mov	r2, r5
   3d074:	ldr	r1, [pc, #196]	; 3d140 <__assert_fail@plt+0x2bf34>
   3d078:	mov	r0, r4
   3d07c:	bl	1114c <sprintf@plt>
   3d080:	mov	r2, #5
   3d084:	ldr	r1, [pc, #212]	; 3d160 <__assert_fail@plt+0x2bf54>
   3d088:	mov	r0, r8
   3d08c:	bl	10f90 <dcgettext@plt>
   3d090:	mov	r1, r4
   3d094:	bl	54dd0 <warn@@Base>
   3d098:	mov	r1, r5
   3d09c:	mov	r0, r4
   3d0a0:	bl	10ff0 <strcpy@plt>
   3d0a4:	mov	r2, #5
   3d0a8:	ldr	r1, [pc, #176]	; 3d160 <__assert_fail@plt+0x2bf54>
   3d0ac:	mov	r0, r8
   3d0b0:	bl	10f90 <dcgettext@plt>
   3d0b4:	mov	r1, r4
   3d0b8:	bl	54dd0 <warn@@Base>
   3d0bc:	mov	r0, r6
   3d0c0:	bl	10f54 <free@plt>
   3d0c4:	mov	r0, r4
   3d0c8:	mov	r5, r8
   3d0cc:	bl	10f54 <free@plt>
   3d0d0:	b	3ce8c <__assert_fail@plt+0x2bc80>
   3d0d4:	add	r3, r6, r4
   3d0d8:	b	3cdfc <__assert_fail@plt+0x2bbf0>
   3d0dc:	mov	r2, #5
   3d0e0:	ldr	r1, [pc, #124]	; 3d164 <__assert_fail@plt+0x2bf58>
   3d0e4:	bl	10f90 <dcgettext@plt>
   3d0e8:	ldr	r1, [r4, #8]
   3d0ec:	cmp	r1, #0
   3d0f0:	ldreq	r1, [r4]
   3d0f4:	bl	54dd0 <warn@@Base>
   3d0f8:	b	3ce8c <__assert_fail@plt+0x2bc80>
   3d0fc:	mov	r2, #5
   3d100:	ldr	r1, [pc, #96]	; 3d168 <__assert_fail@plt+0x2bf5c>
   3d104:	bl	10f90 <dcgettext@plt>
   3d108:	mov	r5, r4
   3d10c:	bl	54dd0 <warn@@Base>
   3d110:	b	3ce8c <__assert_fail@plt+0x2bc80>
   3d114:	ldr	r1, [pc, #80]	; 3d16c <__assert_fail@plt+0x2bf60>
   3d118:	bl	10f90 <dcgettext@plt>
   3d11c:	mov	r1, r4
   3d120:	bl	54dd0 <warn@@Base>
   3d124:	mov	r0, r4
   3d128:	bl	10f54 <free@plt>
   3d12c:	b	3ce8c <__assert_fail@plt+0x2bc80>
   3d130:	mov	r3, r6
   3d134:	b	3cdfc <__assert_fail@plt+0x2bbf0>
   3d138:	ldrdeq	ip, [r9], -r0
   3d13c:	andeq	lr, r7, r8, lsr #9
   3d140:	andeq	lr, r7, r4, lsl #8
   3d144:	muleq	r8, r8, sl
   3d148:	andeq	lr, r7, r0, lsl r4
   3d14c:	andeq	lr, r7, ip, lsl r4
   3d150:	andeq	lr, r7, ip, lsr #8
   3d154:	andeq	lr, r7, r4, lsr r4
   3d158:	andeq	lr, r7, r0, lsr #8
   3d15c:	andeq	lr, r7, r8, asr #8
   3d160:	andeq	lr, r7, r4, ror r4
   3d164:	ldrdeq	lr, [r7], -r4
   3d168:	strdeq	lr, [r7], -r4
   3d16c:	andeq	lr, r7, r0, lsl #9
   3d170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d174:	add	r6, r1, #4
   3d178:	cmp	r6, r2
   3d17c:	sub	sp, sp, #20
   3d180:	mov	sl, r1
   3d184:	mov	r4, r2
   3d188:	mov	fp, r0
   3d18c:	mov	r5, r3
   3d190:	bcc	3d21c <__assert_fail@plt+0x2c010>
   3d194:	cmp	r1, r2
   3d198:	bcc	3d284 <__assert_fail@plt+0x2c078>
   3d19c:	mov	r2, #0
   3d1a0:	mov	r3, #0
   3d1a4:	mov	r8, #4
   3d1a8:	mov	r9, #0
   3d1ac:	strd	r2, [r5]
   3d1b0:	mov	r3, #4
   3d1b4:	str	r3, [sp, #12]
   3d1b8:	str	r3, [r5, #36]	; 0x24
   3d1bc:	ldrd	r2, [fp, #32]
   3d1c0:	cmp	r3, r9
   3d1c4:	cmpeq	r2, r8
   3d1c8:	bcc	3d590 <__assert_fail@plt+0x2c384>
   3d1cc:	add	r8, r6, #2
   3d1d0:	cmp	r8, r4
   3d1d4:	bcc	3d298 <__assert_fail@plt+0x2c08c>
   3d1d8:	cmp	r6, r4
   3d1dc:	bcs	3d1f0 <__assert_fail@plt+0x2bfe4>
   3d1e0:	sub	r1, r4, r6
   3d1e4:	sub	r3, r1, #1
   3d1e8:	cmp	r3, #7
   3d1ec:	bls	3d29c <__assert_fail@plt+0x2c090>
   3d1f0:	mov	r3, #0
   3d1f4:	strh	r3, [r5, #8]
   3d1f8:	mov	r2, #5
   3d1fc:	ldr	r1, [pc, #1308]	; 3d720 <__assert_fail@plt+0x2c514>
   3d200:	mov	r0, #0
   3d204:	bl	10f90 <dcgettext@plt>
   3d208:	bl	54dd0 <warn@@Base>
   3d20c:	mov	r6, #0
   3d210:	mov	r0, r6
   3d214:	add	sp, sp, #20
   3d218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d21c:	mov	r1, #4
   3d220:	ldr	r7, [pc, #1276]	; 3d724 <__assert_fail@plt+0x2c518>
   3d224:	mov	r0, sl
   3d228:	ldr	r3, [r7]
   3d22c:	blx	r3
   3d230:	mov	r3, #0
   3d234:	mvn	r2, #0
   3d238:	cmp	r1, r3
   3d23c:	cmpeq	r0, r2
   3d240:	strd	r0, [r5]
   3d244:	bne	3d6e4 <__assert_fail@plt+0x2c4d8>
   3d248:	add	r3, sl, #12
   3d24c:	cmp	r3, r4
   3d250:	bcc	3d6a8 <__assert_fail@plt+0x2c49c>
   3d254:	cmp	r6, r4
   3d258:	bcs	3d26c <__assert_fail@plt+0x2c060>
   3d25c:	sub	r1, r4, r6
   3d260:	sub	r2, r1, #1
   3d264:	cmp	r2, #7
   3d268:	bls	3d6ac <__assert_fail@plt+0x2c4a0>
   3d26c:	mov	r0, #0
   3d270:	mov	r1, #0
   3d274:	mov	r8, #12
   3d278:	strd	r0, [r5]
   3d27c:	mov	r9, #0
   3d280:	b	3d6cc <__assert_fail@plt+0x2c4c0>
   3d284:	sub	r1, r2, r1
   3d288:	sub	r3, r1, #1
   3d28c:	cmp	r3, #7
   3d290:	bhi	3d19c <__assert_fail@plt+0x2bf90>
   3d294:	b	3d220 <__assert_fail@plt+0x2c014>
   3d298:	mov	r1, #2
   3d29c:	ldr	r7, [pc, #1152]	; 3d724 <__assert_fail@plt+0x2c518>
   3d2a0:	mov	r0, r6
   3d2a4:	ldr	r3, [r7]
   3d2a8:	blx	r3
   3d2ac:	uxth	r0, r0
   3d2b0:	sub	r3, r0, #2
   3d2b4:	cmp	r3, #3
   3d2b8:	strh	r0, [r5, #8]
   3d2bc:	bhi	3d1f8 <__assert_fail@plt+0x2bfec>
   3d2c0:	cmp	r0, #5
   3d2c4:	bne	3d2f8 <__assert_fail@plt+0x2c0ec>
   3d2c8:	add	r9, r6, #3
   3d2cc:	cmp	r9, r4
   3d2d0:	bcc	3d654 <__assert_fail@plt+0x2c448>
   3d2d4:	cmp	r8, r4
   3d2d8:	bcs	3d2ec <__assert_fail@plt+0x2c0e0>
   3d2dc:	sub	r1, r4, r8
   3d2e0:	sub	r3, r1, #1
   3d2e4:	cmp	r3, #7
   3d2e8:	bls	3d3b4 <__assert_fail@plt+0x2c1a8>
   3d2ec:	add	r8, r6, #4
   3d2f0:	cmp	r4, r8
   3d2f4:	bhi	3d3cc <__assert_fail@plt+0x2c1c0>
   3d2f8:	ldr	r6, [r5, #36]	; 0x24
   3d2fc:	cmp	r6, #8
   3d300:	bhi	3d5cc <__assert_fail@plt+0x2c3c0>
   3d304:	add	r3, r8, r6
   3d308:	cmp	r4, r3
   3d30c:	bhi	3d31c <__assert_fail@plt+0x2c110>
   3d310:	cmp	r8, r4
   3d314:	bcs	3d510 <__assert_fail@plt+0x2c304>
   3d318:	sub	r6, r4, r8
   3d31c:	sub	r3, r6, #1
   3d320:	cmp	r3, #7
   3d324:	movls	r1, r6
   3d328:	bhi	3d510 <__assert_fail@plt+0x2c304>
   3d32c:	ldr	r3, [r7]
   3d330:	mov	r0, r8
   3d334:	blx	r3
   3d338:	strd	r0, [r5, #16]
   3d33c:	ldr	r6, [r5, #36]	; 0x24
   3d340:	add	r6, r8, r6
   3d344:	add	r8, r6, #1
   3d348:	cmp	r8, r4
   3d34c:	bcc	3d4f8 <__assert_fail@plt+0x2c2ec>
   3d350:	cmp	r4, r6
   3d354:	bls	3d368 <__assert_fail@plt+0x2c15c>
   3d358:	sub	r1, r4, r6
   3d35c:	sub	r3, r1, #1
   3d360:	cmp	r3, #7
   3d364:	bls	3d4fc <__assert_fail@plt+0x2c2f0>
   3d368:	mov	r3, #0
   3d36c:	strb	r3, [r5, #24]
   3d370:	ldrh	r3, [r5, #8]
   3d374:	cmp	r3, #3
   3d378:	bls	3d40c <__assert_fail@plt+0x2c200>
   3d37c:	add	r6, r6, #2
   3d380:	cmp	r6, r4
   3d384:	bcc	3d684 <__assert_fail@plt+0x2c478>
   3d388:	cmp	r8, r4
   3d38c:	bcc	3d6f0 <__assert_fail@plt+0x2c4e4>
   3d390:	mov	r3, #0
   3d394:	strb	r3, [r5, #25]
   3d398:	mov	r2, #5
   3d39c:	ldr	r1, [pc, #900]	; 3d728 <__assert_fail@plt+0x2c51c>
   3d3a0:	mov	r0, #0
   3d3a4:	bl	10f90 <dcgettext@plt>
   3d3a8:	bl	54dd0 <warn@@Base>
   3d3ac:	mov	r6, #0
   3d3b0:	b	3d210 <__assert_fail@plt+0x2c004>
   3d3b4:	mov	r0, r8
   3d3b8:	ldr	r3, [r7]
   3d3bc:	add	r8, r6, #4
   3d3c0:	blx	r3
   3d3c4:	cmp	r4, r8
   3d3c8:	bls	3d2f8 <__assert_fail@plt+0x2c0ec>
   3d3cc:	mov	r1, #1
   3d3d0:	mov	r0, r9
   3d3d4:	ldr	r3, [r7]
   3d3d8:	blx	r3
   3d3dc:	uxtb	r6, r0
   3d3e0:	cmp	r6, #0
   3d3e4:	beq	3d2f8 <__assert_fail@plt+0x2c0ec>
   3d3e8:	mov	r2, #5
   3d3ec:	ldr	r1, [pc, #824]	; 3d72c <__assert_fail@plt+0x2c520>
   3d3f0:	mov	r0, #0
   3d3f4:	bl	10f90 <dcgettext@plt>
   3d3f8:	mov	r2, r6
   3d3fc:	ldr	r1, [fp, #8]
   3d400:	bl	54dd0 <warn@@Base>
   3d404:	mov	r6, #0
   3d408:	b	3d210 <__assert_fail@plt+0x2c004>
   3d40c:	mov	r6, r8
   3d410:	mov	r3, #1
   3d414:	strb	r3, [r5, #25]
   3d418:	add	r8, r6, #1
   3d41c:	cmp	r8, r4
   3d420:	bcc	3d538 <__assert_fail@plt+0x2c32c>
   3d424:	cmp	r6, r4
   3d428:	bcs	3d43c <__assert_fail@plt+0x2c230>
   3d42c:	sub	r1, r4, r6
   3d430:	sub	r3, r1, #1
   3d434:	cmp	r3, #7
   3d438:	bls	3d608 <__assert_fail@plt+0x2c3fc>
   3d43c:	add	r9, r6, #2
   3d440:	mov	r3, #0
   3d444:	cmp	r4, r9
   3d448:	strb	r3, [r5, #26]
   3d44c:	add	fp, r6, #3
   3d450:	bhi	3d628 <__assert_fail@plt+0x2c41c>
   3d454:	mov	r3, #0
   3d458:	cmp	fp, r4
   3d45c:	str	r3, [r5, #28]
   3d460:	bcc	3d578 <__assert_fail@plt+0x2c36c>
   3d464:	mov	r3, #0
   3d468:	strb	r3, [r5, #32]
   3d46c:	add	r6, r6, #4
   3d470:	cmp	r6, r4
   3d474:	bcc	3d520 <__assert_fail@plt+0x2c314>
   3d478:	cmp	r4, fp
   3d47c:	bls	3d490 <__assert_fail@plt+0x2c284>
   3d480:	sub	r1, r4, fp
   3d484:	sub	r3, r1, #1
   3d488:	cmp	r3, #7
   3d48c:	bls	3d524 <__assert_fail@plt+0x2c318>
   3d490:	mov	r3, #0
   3d494:	strb	r3, [r5, #33]	; 0x21
   3d498:	ldr	r3, [r5]
   3d49c:	ldr	r2, [sp, #12]
   3d4a0:	add	r3, r2, r3
   3d4a4:	add	sl, sl, r3
   3d4a8:	ldr	r3, [sp, #56]	; 0x38
   3d4ac:	cmp	sl, r4
   3d4b0:	str	sl, [r3]
   3d4b4:	bls	3d210 <__assert_fail@plt+0x2c004>
   3d4b8:	ldr	r1, [pc, #624]	; 3d730 <__assert_fail@plt+0x2c524>
   3d4bc:	mov	r2, #5
   3d4c0:	mov	r0, #0
   3d4c4:	mov	r6, r0
   3d4c8:	bl	10f90 <dcgettext@plt>
   3d4cc:	str	r6, [sp]
   3d4d0:	ldrd	r2, [r5]
   3d4d4:	mov	r7, r0
   3d4d8:	ldr	r0, [pc, #596]	; 3d734 <__assert_fail@plt+0x2c528>
   3d4dc:	bl	3c744 <__assert_fail@plt+0x2b538>
   3d4e0:	mov	r1, r0
   3d4e4:	mov	r0, r7
   3d4e8:	bl	54dd0 <warn@@Base>
   3d4ec:	ldr	r3, [sp, #56]	; 0x38
   3d4f0:	str	r4, [r3]
   3d4f4:	b	3d210 <__assert_fail@plt+0x2c004>
   3d4f8:	mov	r1, #1
   3d4fc:	ldr	r3, [r7]
   3d500:	mov	r0, r6
   3d504:	blx	r3
   3d508:	strb	r0, [r5, #24]
   3d50c:	b	3d370 <__assert_fail@plt+0x2c164>
   3d510:	mov	r2, #0
   3d514:	mov	r3, #0
   3d518:	strd	r2, [r5, #16]
   3d51c:	b	3d33c <__assert_fail@plt+0x2c130>
   3d520:	mov	r1, #1
   3d524:	ldr	r3, [r7]
   3d528:	mov	r0, fp
   3d52c:	blx	r3
   3d530:	strb	r0, [r5, #33]	; 0x21
   3d534:	b	3d498 <__assert_fail@plt+0x2c28c>
   3d538:	ldr	r3, [r7]
   3d53c:	mov	r1, #1
   3d540:	mov	r0, r6
   3d544:	blx	r3
   3d548:	add	r9, r6, #2
   3d54c:	cmp	r4, r9
   3d550:	add	fp, r6, #3
   3d554:	strb	r0, [r5, #26]
   3d558:	bhi	3d628 <__assert_fail@plt+0x2c41c>
   3d55c:	subs	r1, r4, r8
   3d560:	beq	3d454 <__assert_fail@plt+0x2c248>
   3d564:	mov	r0, r8
   3d568:	bl	550b8 <warn@@Base+0x2e8>
   3d56c:	cmp	r4, fp
   3d570:	str	r0, [r5, #28]
   3d574:	bls	3d464 <__assert_fail@plt+0x2c258>
   3d578:	mov	r1, #1
   3d57c:	mov	r0, r9
   3d580:	ldr	r3, [r7]
   3d584:	blx	r3
   3d588:	strb	r0, [r5, #32]
   3d58c:	b	3d46c <__assert_fail@plt+0x2c260>
   3d590:	ldr	r3, [fp, #16]
   3d594:	ldr	r2, [r5, #36]	; 0x24
   3d598:	sub	r3, r6, r3
   3d59c:	mov	r7, #0
   3d5a0:	sub	r2, r3, r2
   3d5a4:	mov	r0, fp
   3d5a8:	mov	r3, r7
   3d5ac:	bl	35750 <__assert_fail@plt+0x24544>
   3d5b0:	subs	r8, r0, #0
   3d5b4:	beq	3d704 <__assert_fail@plt+0x2c4f8>
   3d5b8:	ldr	r2, [sp, #12]
   3d5bc:	sub	r3, r4, sl
   3d5c0:	sub	r3, r3, r2
   3d5c4:	stm	r5, {r3, r7}
   3d5c8:	b	3d1cc <__assert_fail@plt+0x2bfc0>
   3d5cc:	mov	r3, #5
   3d5d0:	str	r3, [sp]
   3d5d4:	ldr	r2, [pc, #348]	; 3d738 <__assert_fail@plt+0x2c52c>
   3d5d8:	mov	r3, r6
   3d5dc:	ldr	r1, [pc, #344]	; 3d73c <__assert_fail@plt+0x2c530>
   3d5e0:	mov	r0, #0
   3d5e4:	bl	11200 <dcngettext@plt>
   3d5e8:	mov	r1, r6
   3d5ec:	mov	r2, #8
   3d5f0:	bl	548ac <error@@Base>
   3d5f4:	add	r3, r8, #8
   3d5f8:	cmp	r4, r3
   3d5fc:	bls	3d310 <__assert_fail@plt+0x2c104>
   3d600:	mov	r1, #8
   3d604:	b	3d32c <__assert_fail@plt+0x2c120>
   3d608:	ldr	r3, [r7]
   3d60c:	mov	r0, r6
   3d610:	blx	r3
   3d614:	add	r9, r6, #2
   3d618:	cmp	r4, r9
   3d61c:	add	fp, r6, #3
   3d620:	strb	r0, [r5, #26]
   3d624:	bls	3d454 <__assert_fail@plt+0x2c248>
   3d628:	mov	r0, r8
   3d62c:	mov	r1, #1
   3d630:	bl	550b8 <warn@@Base+0x2e8>
   3d634:	cmp	r4, fp
   3d638:	str	r0, [r5, #28]
   3d63c:	bhi	3d578 <__assert_fail@plt+0x2c36c>
   3d640:	sub	r1, r4, r9
   3d644:	sub	r3, r1, #1
   3d648:	cmp	r3, #7
   3d64c:	bhi	3d464 <__assert_fail@plt+0x2c258>
   3d650:	b	3d57c <__assert_fail@plt+0x2c370>
   3d654:	mov	r0, r8
   3d658:	ldr	r3, [r7]
   3d65c:	add	r8, r6, #4
   3d660:	mov	r1, #1
   3d664:	blx	r3
   3d668:	cmp	r4, r8
   3d66c:	bhi	3d3cc <__assert_fail@plt+0x2c1c0>
   3d670:	sub	r1, r4, r9
   3d674:	sub	r3, r1, #1
   3d678:	cmp	r3, #7
   3d67c:	bhi	3d2f8 <__assert_fail@plt+0x2c0ec>
   3d680:	b	3d3d0 <__assert_fail@plt+0x2c1c4>
   3d684:	mov	r1, #1
   3d688:	mov	r0, r8
   3d68c:	ldr	r3, [r7]
   3d690:	blx	r3
   3d694:	uxtb	r0, r0
   3d698:	cmp	r0, #0
   3d69c:	strb	r0, [r5, #25]
   3d6a0:	bne	3d418 <__assert_fail@plt+0x2c20c>
   3d6a4:	b	3d398 <__assert_fail@plt+0x2c18c>
   3d6a8:	mov	r1, #8
   3d6ac:	ldr	r2, [r7]
   3d6b0:	mov	r0, r6
   3d6b4:	str	r3, [sp, #12]
   3d6b8:	blx	r2
   3d6bc:	ldr	r3, [sp, #12]
   3d6c0:	adds	r8, r0, #12
   3d6c4:	adc	r9, r1, #0
   3d6c8:	strd	r0, [r5]
   3d6cc:	mov	r2, #8
   3d6d0:	mov	r6, r3
   3d6d4:	mov	r3, #12
   3d6d8:	str	r2, [r5, #36]	; 0x24
   3d6dc:	str	r3, [sp, #12]
   3d6e0:	b	3d1bc <__assert_fail@plt+0x2bfb0>
   3d6e4:	adds	r8, r0, #4
   3d6e8:	adc	r9, r1, #0
   3d6ec:	b	3d1b0 <__assert_fail@plt+0x2bfa4>
   3d6f0:	sub	r1, r4, r8
   3d6f4:	sub	r3, r1, #1
   3d6f8:	cmp	r3, #7
   3d6fc:	bhi	3d390 <__assert_fail@plt+0x2c184>
   3d700:	b	3d688 <__assert_fail@plt+0x2c47c>
   3d704:	mov	r2, #5
   3d708:	ldr	r1, [pc, #48]	; 3d740 <__assert_fail@plt+0x2c534>
   3d70c:	bl	10f90 <dcgettext@plt>
   3d710:	ldr	r1, [r5]
   3d714:	mov	r6, r8
   3d718:	bl	54dd0 <warn@@Base>
   3d71c:	b	3d210 <__assert_fail@plt+0x2c004>
   3d720:	andeq	lr, r7, ip, lsr #10
   3d724:	andeq	lr, r9, ip, asr sp
   3d728:	andeq	lr, r7, r4, asr #12
   3d72c:	andeq	lr, r7, r0, ror r5
   3d730:	andeq	lr, r7, ip, ror #12
   3d734:	andeq	r3, r6, ip, asr #17
   3d738:			; <UNDEFINED> instruction: 0x0007e5b0
   3d73c:	strdeq	lr, [r7], -ip
   3d740:	ldrdeq	lr, [r7], -r4
   3d744:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d748:	sub	sp, sp, #60	; 0x3c
   3d74c:	cmp	r0, r1
   3d750:	str	r3, [sp, #44]	; 0x2c
   3d754:	ldr	r3, [sp, #96]	; 0x60
   3d758:	str	r3, [sp, #52]	; 0x34
   3d75c:	bcs	3d8d8 <__assert_fail@plt+0x2c6cc>
   3d760:	mov	r7, r2
   3d764:	lsl	r2, r2, #3
   3d768:	mov	fp, r1
   3d76c:	mvn	r3, #0
   3d770:	sub	r1, r2, #1
   3d774:	mov	r6, r0
   3d778:	sub	r2, r2, #33	; 0x21
   3d77c:	mvn	r0, #1
   3d780:	lsl	r3, r3, r1
   3d784:	rsb	ip, r1, #32
   3d788:	orr	r3, r3, r0, lsl r2
   3d78c:	orr	r3, r3, r0, lsr ip
   3d790:	mvn	r2, r0, lsl r1
   3d794:	mvn	r3, r3
   3d798:	str	r3, [sp, #36]	; 0x24
   3d79c:	lsl	r3, r7, #1
   3d7a0:	str	r2, [sp, #32]
   3d7a4:	str	r3, [sp, #48]	; 0x30
   3d7a8:	b	3d8a4 <__assert_fail@plt+0x2c698>
   3d7ac:	sub	r3, r7, #1
   3d7b0:	cmp	r3, #7
   3d7b4:	movls	r1, r7
   3d7b8:	bls	3d918 <__assert_fail@plt+0x2c70c>
   3d7bc:	mov	r4, #0
   3d7c0:	mov	r5, #0
   3d7c4:	ldr	r3, [sp, #48]	; 0x30
   3d7c8:	add	r6, r6, r3
   3d7cc:	cmp	fp, r6
   3d7d0:	subls	r1, fp, r8
   3d7d4:	movhi	r1, r7
   3d7d8:	cmp	r1, #0
   3d7dc:	moveq	r8, #0
   3d7e0:	strdeq	r4, [sp, #16]
   3d7e4:	moveq	r9, #0
   3d7e8:	bne	3d934 <__assert_fail@plt+0x2c728>
   3d7ec:	ldr	r1, [sp, #44]	; 0x2c
   3d7f0:	ldr	r0, [pc, #472]	; 3d9d0 <__assert_fail@plt+0x2c7c4>
   3d7f4:	bl	10f24 <printf@plt>
   3d7f8:	ldrd	r2, [sp, #16]
   3d7fc:	orrs	r3, r2, r3
   3d800:	beq	3d9b4 <__assert_fail@plt+0x2c7a8>
   3d804:	ldrd	r2, [sp, #32]
   3d808:	mov	r1, r2
   3d80c:	and	r1, r1, r4
   3d810:	str	r1, [sp, #8]
   3d814:	mov	r1, r3
   3d818:	and	r1, r1, r5
   3d81c:	str	r1, [sp, #12]
   3d820:	ldrd	r0, [sp, #8]
   3d824:	cmp	r3, r1
   3d828:	cmpeq	r2, r0
   3d82c:	bne	3d850 <__assert_fail@plt+0x2c644>
   3d830:	and	r1, r8, r2
   3d834:	str	r1, [sp, #24]
   3d838:	and	r1, r9, r3
   3d83c:	str	r1, [sp, #28]
   3d840:	ldrd	r0, [sp, #24]
   3d844:	cmp	r3, r1
   3d848:	cmpeq	r2, r0
   3d84c:	bne	3d984 <__assert_fail@plt+0x2c778>
   3d850:	ldr	sl, [sp, #52]	; 0x34
   3d854:	mov	r3, #0
   3d858:	adds	r0, sl, r4
   3d85c:	adc	r1, r3, r5
   3d860:	mov	r2, r7
   3d864:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3d868:	adds	r0, sl, r8
   3d86c:	mov	r3, #0
   3d870:	adc	r1, r3, r9
   3d874:	mov	r2, r7
   3d878:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3d87c:	cmp	r9, r5
   3d880:	cmpeq	r8, r4
   3d884:	beq	3d978 <__assert_fail@plt+0x2c76c>
   3d888:	bcc	3d958 <__assert_fail@plt+0x2c74c>
   3d88c:	ldr	r3, [pc, #320]	; 3d9d4 <__assert_fail@plt+0x2c7c8>
   3d890:	mov	r0, #10
   3d894:	ldr	r1, [r3]
   3d898:	bl	11158 <putc@plt>
   3d89c:	cmp	fp, r6
   3d8a0:	bls	3d8d8 <__assert_fail@plt+0x2c6cc>
   3d8a4:	cmp	r7, #8
   3d8a8:	add	r8, r7, r6
   3d8ac:	bhi	3d8e0 <__assert_fail@plt+0x2c6d4>
   3d8b0:	cmp	r8, fp
   3d8b4:	bcc	3d7ac <__assert_fail@plt+0x2c5a0>
   3d8b8:	sub	r1, fp, r6
   3d8bc:	sub	r3, r1, #1
   3d8c0:	cmp	r3, #7
   3d8c4:	movhi	r4, #0
   3d8c8:	movhi	r5, #0
   3d8cc:	bls	3d918 <__assert_fail@plt+0x2c70c>
   3d8d0:	cmp	r8, fp
   3d8d4:	bcc	3d7c4 <__assert_fail@plt+0x2c5b8>
   3d8d8:	add	sp, sp, #60	; 0x3c
   3d8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d8e0:	mov	r3, #5
   3d8e4:	str	r3, [sp]
   3d8e8:	ldr	r2, [pc, #232]	; 3d9d8 <__assert_fail@plt+0x2c7cc>
   3d8ec:	mov	r3, r7
   3d8f0:	ldr	r1, [pc, #228]	; 3d9dc <__assert_fail@plt+0x2c7d0>
   3d8f4:	mov	r0, #0
   3d8f8:	bl	11200 <dcngettext@plt>
   3d8fc:	mov	r2, #8
   3d900:	mov	r1, r7
   3d904:	bl	548ac <error@@Base>
   3d908:	add	r3, r6, #8
   3d90c:	cmp	fp, r3
   3d910:	bls	3d8b8 <__assert_fail@plt+0x2c6ac>
   3d914:	mov	r1, #8
   3d918:	ldr	r3, [pc, #192]	; 3d9e0 <__assert_fail@plt+0x2c7d4>
   3d91c:	mov	r0, r6
   3d920:	ldr	r3, [r3]
   3d924:	blx	r3
   3d928:	mov	r4, r0
   3d92c:	mov	r5, r1
   3d930:	b	3d8d0 <__assert_fail@plt+0x2c6c4>
   3d934:	mov	r0, r8
   3d938:	bl	550b8 <warn@@Base+0x2e8>
   3d93c:	orr	r3, r0, r4
   3d940:	str	r3, [sp, #16]
   3d944:	orr	r3, r1, r5
   3d948:	mov	r8, r0
   3d94c:	mov	r9, r1
   3d950:	str	r3, [sp, #20]
   3d954:	b	3d7ec <__assert_fail@plt+0x2c5e0>
   3d958:	ldr	r1, [pc, #132]	; 3d9e4 <__assert_fail@plt+0x2c7d8>
   3d95c:	mov	r2, #5
   3d960:	mov	r0, #0
   3d964:	bl	10f90 <dcgettext@plt>
   3d968:	ldr	r3, [pc, #100]	; 3d9d4 <__assert_fail@plt+0x2c7c8>
   3d96c:	ldr	r1, [r3]
   3d970:	bl	111c4 <fputs@plt>
   3d974:	b	3d88c <__assert_fail@plt+0x2c680>
   3d978:	mov	r2, #5
   3d97c:	ldr	r1, [pc, #100]	; 3d9e8 <__assert_fail@plt+0x2c7dc>
   3d980:	b	3d960 <__assert_fail@plt+0x2c754>
   3d984:	mov	r0, r4
   3d988:	mov	r1, r5
   3d98c:	mov	r2, r7
   3d990:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3d994:	mov	r0, r8
   3d998:	mov	r2, r7
   3d99c:	mov	r1, r9
   3d9a0:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3d9a4:	ldr	r0, [pc, #64]	; 3d9ec <__assert_fail@plt+0x2c7e0>
   3d9a8:	str	r8, [sp, #52]	; 0x34
   3d9ac:	bl	11014 <puts@plt>
   3d9b0:	b	3d89c <__assert_fail@plt+0x2c690>
   3d9b4:	mov	r2, #5
   3d9b8:	ldr	r1, [pc, #48]	; 3d9f0 <__assert_fail@plt+0x2c7e4>
   3d9bc:	mov	r0, #0
   3d9c0:	bl	10f90 <dcgettext@plt>
   3d9c4:	add	sp, sp, #60	; 0x3c
   3d9c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d9cc:	b	10f24 <printf@plt>
   3d9d0:	muleq	r7, ip, r6
   3d9d4:	andeq	sl, r9, ip, lsr #8
   3d9d8:			; <UNDEFINED> instruction: 0x0007e5b0
   3d9dc:	strdeq	lr, [r7], -ip
   3d9e0:	andeq	lr, r9, ip, asr sp
   3d9e4:	ldrdeq	lr, [r7], -r8
   3d9e8:	andeq	lr, r7, r8, asr #13
   3d9ec:			; <UNDEFINED> instruction: 0x0007e6b8
   3d9f0:	andeq	lr, r7, r8, lsr #13
   3d9f4:	push	{r4, r5, r6, lr}
   3d9f8:	mov	r5, r0
   3d9fc:	mov	r6, r1
   3da00:	bl	3580c <__assert_fail@plt+0x24600>
   3da04:	subs	r4, r0, #0
   3da08:	bne	3da5c <__assert_fail@plt+0x2c850>
   3da0c:	ldr	r3, [pc, #124]	; 3da90 <__assert_fail@plt+0x2c884>
   3da10:	ldr	r3, [r3]
   3da14:	cmp	r3, #0
   3da18:	beq	3da54 <__assert_fail@plt+0x2c848>
   3da1c:	ldr	r6, [pc, #112]	; 3da94 <__assert_fail@plt+0x2c888>
   3da20:	ldr	r1, [r6, #1116]	; 0x45c
   3da24:	cmp	r1, #0
   3da28:	beq	3da54 <__assert_fail@plt+0x2c848>
   3da2c:	mov	r0, r5
   3da30:	bl	3580c <__assert_fail@plt+0x24600>
   3da34:	cmp	r0, #0
   3da38:	beq	3da54 <__assert_fail@plt+0x2c848>
   3da3c:	add	r5, r5, r5, lsl #3
   3da40:	ldr	r3, [pc, #80]	; 3da98 <__assert_fail@plt+0x2c88c>
   3da44:	ldr	r2, [r6, #1120]	; 0x460
   3da48:	add	r5, r3, r5, lsl #3
   3da4c:	mov	r4, #1
   3da50:	str	r2, [r5, #12]
   3da54:	mov	r0, r4
   3da58:	pop	{r4, r5, r6, pc}
   3da5c:	ldr	r3, [pc, #48]	; 3da94 <__assert_fail@plt+0x2c888>
   3da60:	ldr	r2, [r3, #1116]	; 0x45c
   3da64:	cmp	r2, r6
   3da68:	movne	r4, #1
   3da6c:	bne	3da54 <__assert_fail@plt+0x2c848>
   3da70:	ldr	r2, [pc, #32]	; 3da98 <__assert_fail@plt+0x2c88c>
   3da74:	add	r5, r5, r5, lsl #3
   3da78:	ldr	r3, [r3, #1120]	; 0x460
   3da7c:	add	r5, r2, r5, lsl #3
   3da80:	mov	r4, #1
   3da84:	str	r3, [r5, #12]
   3da88:	mov	r0, r4
   3da8c:	pop	{r4, r5, r6, pc}
   3da90:	andeq	lr, r9, ip, lsl sp
   3da94:	ldrdeq	ip, [r9], -r0
   3da98:	strdeq	r9, [r9], -r0
   3da9c:	ldr	r3, [pc, #184]	; 3db5c <__assert_fail@plt+0x2c950>
   3daa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3daa4:	ldr	r3, [r3]
   3daa8:	cmp	r3, #0
   3daac:	bne	3db2c <__assert_fail@plt+0x2c920>
   3dab0:	ldr	r3, [pc, #168]	; 3db60 <__assert_fail@plt+0x2c954>
   3dab4:	rsb	r0, r0, #80	; 0x50
   3dab8:	umull	r3, r0, r3, r0
   3dabc:	cmp	r2, r0, lsr #1
   3dac0:	bcc	3db2c <__assert_fail@plt+0x2c920>
   3dac4:	cmp	r2, #0
   3dac8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dacc:	add	r5, r1, r2
   3dad0:	ldr	r7, [pc, #140]	; 3db64 <__assert_fail@plt+0x2c958>
   3dad4:	ldr	r8, [pc, #140]	; 3db68 <__assert_fail@plt+0x2c95c>
   3dad8:	ldr	r6, [pc, #140]	; 3db6c <__assert_fail@plt+0x2c960>
   3dadc:	sub	r5, r5, #1
   3dae0:	sub	r9, r1, #1
   3dae4:	rsb	r4, r1, #1
   3dae8:	b	3db00 <__assert_fail@plt+0x2c8f4>
   3daec:	ldrb	r1, [r9, #1]!
   3daf0:	mov	r0, r6
   3daf4:	bl	10f24 <printf@plt>
   3daf8:	cmp	r9, r5
   3dafc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db00:	add	r2, r4, r9
   3db04:	umull	r1, r3, r7, r2
   3db08:	lsr	r3, r3, #3
   3db0c:	add	r1, r3, r3, lsl #1
   3db10:	add	r3, r3, r1, lsl #2
   3db14:	cmp	r2, r3, lsl #1
   3db18:	bne	3daec <__assert_fail@plt+0x2c8e0>
   3db1c:	ldr	r1, [r8]
   3db20:	mov	r0, #10
   3db24:	bl	11158 <putc@plt>
   3db28:	b	3daec <__assert_fail@plt+0x2c8e0>
   3db2c:	cmp	r2, #0
   3db30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db34:	add	r5, r1, r2
   3db38:	ldr	r6, [pc, #44]	; 3db6c <__assert_fail@plt+0x2c960>
   3db3c:	sub	r5, r5, #1
   3db40:	sub	r4, r1, #1
   3db44:	ldrb	r1, [r4, #1]!
   3db48:	mov	r0, r6
   3db4c:	bl	10f24 <printf@plt>
   3db50:	cmp	r5, r4
   3db54:	bne	3db44 <__assert_fail@plt+0x2c938>
   3db58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3db5c:	andeq	lr, r9, r8, lsr #26
   3db60:	bge	feae8614 <optarg@@GLIBC_2.4+0xfea4e1e4>
   3db64:	cdpmi	12, 12, cr14, cr4, cr15, {2}
   3db68:	andeq	sl, r9, ip, lsr #8
   3db6c:	andeq	lr, r7, r8, ror #13
   3db70:	push	{r4, r5, r6, lr}
   3db74:	mov	r2, #5
   3db78:	mov	r4, r0
   3db7c:	mov	r5, r1
   3db80:	mov	r0, #0
   3db84:	ldr	r1, [pc, #20]	; 3dba0 <__assert_fail@plt+0x2c994>
   3db88:	bl	10f90 <dcgettext@plt>
   3db8c:	bl	10f24 <printf@plt>
   3db90:	mov	r2, r5
   3db94:	mov	r1, r4
   3db98:	pop	{r4, r5, r6, lr}
   3db9c:	b	3da9c <__assert_fail@plt+0x2c890>
   3dba0:	strdeq	lr, [r7], -r0
   3dba4:	ldrd	r2, [r0, #32]
   3dba8:	orrs	r3, r2, r3
   3dbac:	beq	3dbb8 <__assert_fail@plt+0x2c9ac>
   3dbb0:	mov	r0, #1
   3dbb4:	bx	lr
   3dbb8:	push	{r4, lr}
   3dbbc:	mov	r4, r0
   3dbc0:	mov	r2, #5
   3dbc4:	ldr	r1, [pc, #20]	; 3dbe0 <__assert_fail@plt+0x2c9d4>
   3dbc8:	mov	r0, #0
   3dbcc:	bl	10f90 <dcgettext@plt>
   3dbd0:	ldr	r1, [r4, #8]
   3dbd4:	bl	10f24 <printf@plt>
   3dbd8:	mov	r0, #0
   3dbdc:	pop	{r4, pc}
   3dbe0:	andeq	lr, r7, ip, lsl #14
   3dbe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3dbe8:	sub	sp, sp, #20
   3dbec:	mov	r9, r0
   3dbf0:	mov	r4, r2
   3dbf4:	ldr	r1, [pc, #232]	; 3dce4 <__assert_fail@plt+0x2cad8>
   3dbf8:	mov	r2, #5
   3dbfc:	mov	r0, #0
   3dc00:	ldr	sl, [sp, #56]	; 0x38
   3dc04:	mov	r5, r3
   3dc08:	ldrb	r7, [sp, #60]	; 0x3c
   3dc0c:	bl	10f90 <dcgettext@plt>
   3dc10:	mov	r1, #0
   3dc14:	mov	r2, r4
   3dc18:	mov	r3, r5
   3dc1c:	str	r1, [sp]
   3dc20:	mov	r6, r0
   3dc24:	ldr	r0, [pc, #188]	; 3dce8 <__assert_fail@plt+0x2cadc>
   3dc28:	bl	3c744 <__assert_fail@plt+0x2b538>
   3dc2c:	mov	r1, r7
   3dc30:	mov	r2, r0
   3dc34:	mov	r0, r6
   3dc38:	bl	10f24 <printf@plt>
   3dc3c:	cmp	r9, sl
   3dc40:	movhi	r0, sl
   3dc44:	bhi	3dcd4 <__assert_fail@plt+0x2cac8>
   3dc48:	sub	r2, sl, r9
   3dc4c:	asr	r3, r2, #31
   3dc50:	cmp	r3, r5
   3dc54:	cmpeq	r2, r4
   3dc58:	movhi	r2, r4
   3dc5c:	movhi	r3, r5
   3dc60:	subs	r0, r2, #1
   3dc64:	sbc	r1, r3, #0
   3dc68:	orrs	r3, r2, r3
   3dc6c:	str	r0, [sp, #12]
   3dc70:	beq	3dcdc <__assert_fail@plt+0x2cad0>
   3dc74:	ldr	fp, [pc, #112]	; 3dcec <__assert_fail@plt+0x2cae0>
   3dc78:	ldr	r8, [pc, #112]	; 3dcf0 <__assert_fail@plt+0x2cae4>
   3dc7c:	mov	r4, r0
   3dc80:	mov	r5, r1
   3dc84:	mov	r3, r9
   3dc88:	mvn	r6, #0
   3dc8c:	mvn	r7, #0
   3dc90:	mov	r0, r3
   3dc94:	ldr	r2, [fp]
   3dc98:	mov	r1, #1
   3dc9c:	add	sl, r3, r1
   3dca0:	blx	r2
   3dca4:	mov	r1, r0
   3dca8:	mov	r0, r8
   3dcac:	bl	10f24 <printf@plt>
   3dcb0:	subs	r4, r4, #1
   3dcb4:	sbc	r5, r5, #0
   3dcb8:	cmp	r5, r7
   3dcbc:	cmpeq	r4, r6
   3dcc0:	mov	r3, sl
   3dcc4:	bne	3dc90 <__assert_fail@plt+0x2ca84>
   3dcc8:	ldr	r3, [sp, #12]
   3dccc:	add	sl, r3, #1
   3dcd0:	add	r0, r9, sl
   3dcd4:	add	sp, sp, #20
   3dcd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3dcdc:	mov	r0, r9
   3dce0:	b	3dcd4 <__assert_fail@plt+0x2cac8>
   3dce4:	andeq	lr, r7, r8, lsr #14
   3dce8:	andeq	r3, r6, ip, asr #17
   3dcec:	andeq	lr, r9, ip, asr sp
   3dcf0:	andeq	lr, r7, ip, lsr r7
   3dcf4:	ldr	r2, [pc, #216]	; 3ddd4 <__assert_fail@plt+0x2cbc8>
   3dcf8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3dcfc:	sub	sp, sp, #8
   3dd00:	ldr	sl, [r2, #736]	; 0x2e0
   3dd04:	cmp	sl, #0
   3dd08:	beq	3ddc4 <__assert_fail@plt+0x2cbb8>
   3dd0c:	add	r2, r2, #752	; 0x2f0
   3dd10:	mov	r4, r0
   3dd14:	ldrd	r6, [r2]
   3dd18:	mov	r5, r1
   3dd1c:	cmp	r7, r1
   3dd20:	cmpeq	r6, r0
   3dd24:	bls	3dd5c <__assert_fail@plt+0x2cb50>
   3dd28:	add	sl, sl, r0
   3dd2c:	sub	r1, r6, r4
   3dd30:	mov	r0, sl
   3dd34:	bl	11104 <strnlen@plt>
   3dd38:	subs	r8, r6, r4
   3dd3c:	sbc	r9, r7, r5
   3dd40:	mov	r1, #0
   3dd44:	cmp	r1, r9
   3dd48:	cmpeq	r0, r8
   3dd4c:	beq	3ddac <__assert_fail@plt+0x2cba0>
   3dd50:	mov	r0, sl
   3dd54:	add	sp, sp, #8
   3dd58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3dd5c:	ldr	r1, [pc, #116]	; 3ddd8 <__assert_fail@plt+0x2cbcc>
   3dd60:	mov	r2, #5
   3dd64:	mov	r0, #0
   3dd68:	mov	r6, r0
   3dd6c:	bl	10f90 <dcgettext@plt>
   3dd70:	mov	r2, r4
   3dd74:	mov	r3, r5
   3dd78:	str	r6, [sp]
   3dd7c:	mov	r7, r0
   3dd80:	ldr	r0, [pc, #84]	; 3dddc <__assert_fail@plt+0x2cbd0>
   3dd84:	bl	3c744 <__assert_fail@plt+0x2b538>
   3dd88:	mov	r1, r0
   3dd8c:	mov	r0, r7
   3dd90:	bl	54dd0 <warn@@Base>
   3dd94:	ldr	r1, [pc, #68]	; 3dde0 <__assert_fail@plt+0x2cbd4>
   3dd98:	mov	r0, r6
   3dd9c:	mov	r2, #5
   3dda0:	add	sp, sp, #8
   3dda4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3dda8:	b	10f90 <dcgettext@plt>
   3ddac:	mov	r2, #5
   3ddb0:	ldr	r1, [pc, #44]	; 3dde4 <__assert_fail@plt+0x2cbd8>
   3ddb4:	mov	r0, #0
   3ddb8:	add	sp, sp, #8
   3ddbc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ddc0:	b	10f90 <dcgettext@plt>
   3ddc4:	mov	r0, sl
   3ddc8:	mov	r2, #5
   3ddcc:	ldr	r1, [pc, #20]	; 3dde8 <__assert_fail@plt+0x2cbdc>
   3ddd0:	b	3dda0 <__assert_fail@plt+0x2cb94>
   3ddd4:	strdeq	r9, [r9], -r0
   3ddd8:	andeq	lr, r7, r4, asr #14
   3dddc:	andeq	r9, r6, r0, lsr #15
   3dde0:	andeq	lr, r7, r8, ror #14
   3dde4:	andeq	lr, r7, ip, ror r7
   3dde8:	strdeq	lr, [r7], -r4
   3ddec:	ldr	r2, [pc, #216]	; 3decc <__assert_fail@plt+0x2ccc0>
   3ddf0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3ddf4:	sub	sp, sp, #8
   3ddf8:	ldr	sl, [r2, #808]	; 0x328
   3ddfc:	cmp	sl, #0
   3de00:	beq	3debc <__assert_fail@plt+0x2ccb0>
   3de04:	add	r2, r2, #832	; 0x340
   3de08:	mov	r4, r0
   3de0c:	ldrd	r6, [r2, #-8]
   3de10:	mov	r5, r1
   3de14:	cmp	r7, r1
   3de18:	cmpeq	r6, r0
   3de1c:	bls	3de54 <__assert_fail@plt+0x2cc48>
   3de20:	add	sl, sl, r0
   3de24:	sub	r1, r6, r4
   3de28:	mov	r0, sl
   3de2c:	bl	11104 <strnlen@plt>
   3de30:	subs	r8, r6, r4
   3de34:	sbc	r9, r7, r5
   3de38:	mov	r1, #0
   3de3c:	cmp	r1, r9
   3de40:	cmpeq	r0, r8
   3de44:	beq	3dea4 <__assert_fail@plt+0x2cc98>
   3de48:	mov	r0, sl
   3de4c:	add	sp, sp, #8
   3de50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3de54:	ldr	r1, [pc, #116]	; 3ded0 <__assert_fail@plt+0x2ccc4>
   3de58:	mov	r2, #5
   3de5c:	mov	r0, #0
   3de60:	mov	r6, r0
   3de64:	bl	10f90 <dcgettext@plt>
   3de68:	mov	r2, r4
   3de6c:	mov	r3, r5
   3de70:	str	r6, [sp]
   3de74:	mov	r7, r0
   3de78:	ldr	r0, [pc, #84]	; 3ded4 <__assert_fail@plt+0x2ccc8>
   3de7c:	bl	3c744 <__assert_fail@plt+0x2b538>
   3de80:	mov	r1, r0
   3de84:	mov	r0, r7
   3de88:	bl	54dd0 <warn@@Base>
   3de8c:	ldr	r1, [pc, #68]	; 3ded8 <__assert_fail@plt+0x2cccc>
   3de90:	mov	r0, r6
   3de94:	mov	r2, #5
   3de98:	add	sp, sp, #8
   3de9c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3dea0:	b	10f90 <dcgettext@plt>
   3dea4:	mov	r2, #5
   3dea8:	ldr	r1, [pc, #44]	; 3dedc <__assert_fail@plt+0x2ccd0>
   3deac:	mov	r0, #0
   3deb0:	add	sp, sp, #8
   3deb4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   3deb8:	b	10f90 <dcgettext@plt>
   3debc:	mov	r0, sl
   3dec0:	mov	r2, #5
   3dec4:	ldr	r1, [pc, #20]	; 3dee0 <__assert_fail@plt+0x2ccd4>
   3dec8:	b	3de98 <__assert_fail@plt+0x2cc8c>
   3decc:	strdeq	r9, [r9], -r0
   3ded0:	andeq	lr, r7, r8, asr #15
   3ded4:	andeq	r9, r6, r0, lsr #15
   3ded8:	andeq	lr, r7, r8, ror #14
   3dedc:	strdeq	lr, [r7], -r0
   3dee0:	andeq	lr, r7, r8, lsr #15
   3dee4:	push	{r4, lr}
   3dee8:	mov	r4, r0
   3deec:	bl	564e8 <warn@@Base+0x1718>
   3def0:	subs	r3, r0, #0
   3def4:	beq	3df00 <__assert_fail@plt+0x2ccf4>
   3def8:	mov	r0, r3
   3defc:	pop	{r4, pc}
   3df00:	sub	r3, r4, #16384	; 0x4000
   3df04:	ldr	r2, [pc, #52]	; 3df40 <__assert_fail@plt+0x2cd34>
   3df08:	sub	r3, r3, #128	; 0x80
   3df0c:	cmp	r3, r2
   3df10:	mov	r2, #5
   3df14:	ldrls	r1, [pc, #40]	; 3df44 <__assert_fail@plt+0x2cd38>
   3df18:	ldrhi	r1, [pc, #40]	; 3df48 <__assert_fail@plt+0x2cd3c>
   3df1c:	bl	10f90 <dcgettext@plt>
   3df20:	mov	r3, r4
   3df24:	mov	r1, #100	; 0x64
   3df28:	mov	r2, r0
   3df2c:	ldr	r0, [pc, #24]	; 3df4c <__assert_fail@plt+0x2cd40>
   3df30:	bl	110b0 <snprintf@plt>
   3df34:	ldr	r3, [pc, #16]	; 3df4c <__assert_fail@plt+0x2cd40>
   3df38:	mov	r0, r3
   3df3c:	pop	{r4, pc}
   3df40:	andeq	fp, r0, pc, ror pc
   3df44:	andeq	lr, r7, r0, lsr #16
   3df48:	andeq	lr, r7, r8, lsr r8
   3df4c:	andeq	ip, r9, r4, lsr sl
   3df50:	subs	r3, r0, #0
   3df54:	beq	3df8c <__assert_fail@plt+0x2cd80>
   3df58:	ldr	r2, [pc, #96]	; 3dfc0 <__assert_fail@plt+0x2cdb4>
   3df5c:	cmp	r3, r2
   3df60:	beq	3df80 <__assert_fail@plt+0x2cd74>
   3df64:	push	{r4, lr}
   3df68:	mov	r4, r3
   3df6c:	bl	570e4 <warn@@Base+0x2314>
   3df70:	subs	r3, r0, #0
   3df74:	beq	3df98 <__assert_fail@plt+0x2cd8c>
   3df78:	mov	r0, r3
   3df7c:	pop	{r4, pc}
   3df80:	ldr	r3, [pc, #60]	; 3dfc4 <__assert_fail@plt+0x2cdb8>
   3df84:	mov	r0, r3
   3df88:	bx	lr
   3df8c:	ldr	r3, [pc, #52]	; 3dfc8 <__assert_fail@plt+0x2cdbc>
   3df90:	mov	r0, r3
   3df94:	bx	lr
   3df98:	mov	r2, #5
   3df9c:	ldr	r1, [pc, #40]	; 3dfcc <__assert_fail@plt+0x2cdc0>
   3dfa0:	bl	10f90 <dcgettext@plt>
   3dfa4:	mov	r3, r4
   3dfa8:	mov	r1, #100	; 0x64
   3dfac:	mov	r2, r0
   3dfb0:	ldr	r0, [pc, #24]	; 3dfd0 <__assert_fail@plt+0x2cdc4>
   3dfb4:	bl	110b0 <snprintf@plt>
   3dfb8:	ldr	r3, [pc, #16]	; 3dfd0 <__assert_fail@plt+0x2cdc4>
   3dfbc:	b	3df78 <__assert_fail@plt+0x2cd6c>
   3dfc0:	andeq	r2, r0, r1
   3dfc4:	andeq	lr, r7, r0, ror #16
   3dfc8:	andeq	lr, r7, r0, asr r8
   3dfcc:	andeq	lr, r7, r8, lsl #17
   3dfd0:	muleq	r9, r8, sl
   3dfd4:	subs	r3, r0, #0
   3dfd8:	bne	3dfe8 <__assert_fail@plt+0x2cddc>
   3dfdc:	ldr	r3, [pc, #72]	; 3e02c <__assert_fail@plt+0x2ce20>
   3dfe0:	mov	r0, r3
   3dfe4:	bx	lr
   3dfe8:	push	{r4, lr}
   3dfec:	mov	r4, r3
   3dff0:	bl	56c9c <warn@@Base+0x1ecc>
   3dff4:	subs	r3, r0, #0
   3dff8:	beq	3e004 <__assert_fail@plt+0x2cdf8>
   3dffc:	mov	r0, r3
   3e000:	pop	{r4, pc}
   3e004:	mov	r2, #5
   3e008:	ldr	r1, [pc, #32]	; 3e030 <__assert_fail@plt+0x2ce24>
   3e00c:	bl	10f90 <dcgettext@plt>
   3e010:	mov	r3, r4
   3e014:	mov	r1, #100	; 0x64
   3e018:	mov	r2, r0
   3e01c:	ldr	r0, [pc, #16]	; 3e034 <__assert_fail@plt+0x2ce28>
   3e020:	bl	110b0 <snprintf@plt>
   3e024:	ldr	r3, [pc, #8]	; 3e034 <__assert_fail@plt+0x2ce28>
   3e028:	b	3dffc <__assert_fail@plt+0x2cdf0>
   3e02c:	andeq	lr, r7, r0, lsr #17
   3e030:			; <UNDEFINED> instruction: 0x0007e8b4
   3e034:	strdeq	ip, [r9], -ip	; <UNPREDICTABLE>
   3e038:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e03c:	mov	r5, r1
   3e040:	and	r1, r1, #7
   3e044:	sub	r1, r1, #2
   3e048:	cmp	r1, #2
   3e04c:	mov	fp, r3
   3e050:	ldrls	r3, [pc, #240]	; 3e148 <__assert_fail@plt+0x2cf3c>
   3e054:	ldrhi	r3, [pc, #240]	; 3e14c <__assert_fail@plt+0x2cf40>
   3e058:	addls	r1, r3, r1, lsl #2
   3e05c:	ldr	r6, [r0]
   3e060:	ldrls	r4, [r1, #1024]	; 0x400
   3e064:	ldrhi	r4, [r3]
   3e068:	ldr	r9, [sp, #40]	; 0x28
   3e06c:	add	r8, r6, r4
   3e070:	cmp	r8, r9
   3e074:	mov	r7, r0
   3e078:	mov	sl, r2
   3e07c:	bcs	3e0dc <__assert_fail@plt+0x2ced0>
   3e080:	cmp	r4, #8
   3e084:	bhi	3e110 <__assert_fail@plt+0x2cf04>
   3e088:	cmp	r4, #0
   3e08c:	beq	3e138 <__assert_fail@plt+0x2cf2c>
   3e090:	tst	r5, #8
   3e094:	bne	3e100 <__assert_fail@plt+0x2cef4>
   3e098:	ldr	r3, [pc, #176]	; 3e150 <__assert_fail@plt+0x2cf44>
   3e09c:	mov	r1, r4
   3e0a0:	mov	r0, r6
   3e0a4:	ldr	r3, [r3]
   3e0a8:	blx	r3
   3e0ac:	and	r5, r5, #112	; 0x70
   3e0b0:	cmp	r5, #16
   3e0b4:	bne	3e0d4 <__assert_fail@plt+0x2cec8>
   3e0b8:	ldrd	r2, [fp]
   3e0bc:	ldr	ip, [sl]
   3e0c0:	sub	r6, r6, ip
   3e0c4:	adds	r4, r2, r6
   3e0c8:	adc	r5, r3, r6, asr #31
   3e0cc:	adds	r0, r0, r4
   3e0d0:	adc	r1, r1, r5
   3e0d4:	str	r8, [r7]
   3e0d8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e0dc:	ldr	r1, [pc, #112]	; 3e154 <__assert_fail@plt+0x2cf48>
   3e0e0:	mov	r2, #5
   3e0e4:	mov	r0, #0
   3e0e8:	bl	10f90 <dcgettext@plt>
   3e0ec:	bl	54dd0 <warn@@Base>
   3e0f0:	mov	r0, #0
   3e0f4:	str	r9, [r7]
   3e0f8:	mov	r1, r0
   3e0fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e100:	mov	r1, r4
   3e104:	mov	r0, r6
   3e108:	bl	550b8 <warn@@Base+0x2e8>
   3e10c:	b	3e0ac <__assert_fail@plt+0x2cea0>
   3e110:	mov	r2, #5
   3e114:	ldr	r1, [pc, #60]	; 3e158 <__assert_fail@plt+0x2cf4c>
   3e118:	mov	r0, #0
   3e11c:	bl	10f90 <dcgettext@plt>
   3e120:	mov	r1, r4
   3e124:	bl	54dd0 <warn@@Base>
   3e128:	mov	r0, #0
   3e12c:	str	r9, [r7]
   3e130:	mov	r1, r0
   3e134:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e138:	mov	r0, r4
   3e13c:	mov	r2, #5
   3e140:	ldr	r1, [pc, #20]	; 3e15c <__assert_fail@plt+0x2cf50>
   3e144:	b	3e0e8 <__assert_fail@plt+0x2cedc>
   3e148:			; <UNDEFINED> instruction: 0x0007d2bc
   3e14c:	andeq	lr, r9, ip, lsr #26
   3e150:	andeq	lr, r9, ip, asr sp
   3e154:	andeq	lr, r7, ip, asr #17
   3e158:	strdeq	lr, [r7], -r8
   3e15c:	andeq	lr, r7, r4, lsr #18
   3e160:	push	{r4, lr}
   3e164:	mov	r2, #5
   3e168:	mov	r4, r0
   3e16c:	ldr	r1, [pc, #20]	; 3e188 <__assert_fail@plt+0x2cf7c>
   3e170:	mov	r0, #0
   3e174:	bl	10f90 <dcgettext@plt>
   3e178:	mov	r1, r4
   3e17c:	bl	548ac <error@@Base>
   3e180:	mov	r0, #1
   3e184:	bl	58528 <warn@@Base+0x3758>
   3e188:	andeq	lr, r7, ip, asr #18
   3e18c:	push	{r4, r5, r6, r7, r8, lr}
   3e190:	ldr	r4, [r0, #8]
   3e194:	cmp	r4, r1
   3e198:	bhi	3e288 <__assert_fail@plt+0x2d07c>
   3e19c:	ldr	r3, [pc, #280]	; 3e2bc <__assert_fail@plt+0x2d0b0>
   3e1a0:	ldr	r3, [r3, #76]	; 0x4c
   3e1a4:	cmp	r3, r1
   3e1a8:	movcs	r2, #0
   3e1ac:	movcc	r2, #1
   3e1b0:	cmp	r3, #0
   3e1b4:	movne	r7, r2
   3e1b8:	moveq	r7, #0
   3e1bc:	cmp	r7, #0
   3e1c0:	bne	3e280 <__assert_fail@plt+0x2d074>
   3e1c4:	add	r3, r1, #1
   3e1c8:	cmp	r3, #0
   3e1cc:	str	r3, [r0, #8]
   3e1d0:	beq	3e280 <__assert_fail@plt+0x2d074>
   3e1d4:	cmp	r3, #1024	; 0x400
   3e1d8:	mov	r6, r1
   3e1dc:	mov	r5, r0
   3e1e0:	bhi	3e264 <__assert_fail@plt+0x2d058>
   3e1e4:	lsl	r1, r3, #1
   3e1e8:	ldr	r0, [r0, #12]
   3e1ec:	bl	58678 <warn@@Base+0x38a8>
   3e1f0:	ldr	r1, [r5, #8]
   3e1f4:	ldr	r3, [r5, #16]
   3e1f8:	cmn	r1, #-1073741822	; 0xc0000002
   3e1fc:	str	r0, [r5, #12]
   3e200:	bhi	3e2b4 <__assert_fail@plt+0x2d0a8>
   3e204:	lsl	r1, r1, #2
   3e208:	mov	r0, r3
   3e20c:	bl	58678 <warn@@Base+0x38a8>
   3e210:	ldr	r6, [r5, #12]
   3e214:	cmp	r6, #0
   3e218:	str	r0, [r5, #16]
   3e21c:	beq	3e290 <__assert_fail@plt+0x2d084>
   3e220:	ldr	r3, [r5, #8]
   3e224:	cmp	r4, r3
   3e228:	bcs	3e25c <__assert_fail@plt+0x2d050>
   3e22c:	sub	r3, r4, #-2147483647	; 0x80000001
   3e230:	sub	r1, r4, #-1073741823	; 0xc0000001
   3e234:	mov	r2, r7
   3e238:	add	r3, r6, r3, lsl #1
   3e23c:	add	r0, r0, r1, lsl #2
   3e240:	mvn	ip, #0
   3e244:	strh	ip, [r3, #2]!
   3e248:	str	r2, [r0, #4]!
   3e24c:	ldr	r1, [r5, #8]
   3e250:	add	r4, r4, #1
   3e254:	cmp	r1, r4
   3e258:	bhi	3e244 <__assert_fail@plt+0x2d038>
   3e25c:	mov	r0, #1
   3e260:	pop	{r4, r5, r6, r7, r8, pc}
   3e264:	mov	r2, #5
   3e268:	ldr	r1, [pc, #80]	; 3e2c0 <__assert_fail@plt+0x2d0b4>
   3e26c:	mov	r0, r7
   3e270:	bl	10f90 <dcgettext@plt>
   3e274:	mov	r1, r6
   3e278:	bl	548ac <error@@Base>
   3e27c:	str	r7, [r5, #8]
   3e280:	mvn	r0, #0
   3e284:	pop	{r4, r5, r6, r7, r8, pc}
   3e288:	mov	r0, #0
   3e28c:	pop	{r4, r5, r6, r7, r8, pc}
   3e290:	mov	r2, #5
   3e294:	ldr	r1, [pc, #40]	; 3e2c4 <__assert_fail@plt+0x2d0b8>
   3e298:	mov	r0, r6
   3e29c:	bl	10f90 <dcgettext@plt>
   3e2a0:	ldr	r1, [r5, #8]
   3e2a4:	bl	548ac <error@@Base>
   3e2a8:	str	r6, [r5, #8]
   3e2ac:	mvn	r0, #0
   3e2b0:	pop	{r4, r5, r6, r7, r8, pc}
   3e2b4:	mov	r0, r1
   3e2b8:	bl	3e160 <__assert_fail@plt+0x2cf54>
   3e2bc:	ldrdeq	ip, [r9], -r0
   3e2c0:	muleq	r7, ip, r9
   3e2c4:	andeq	lr, r7, r4, asr #19
   3e2c8:	push	{r4, lr}
   3e2cc:	mov	r3, r0
   3e2d0:	ldr	r4, [pc, #32]	; 3e2f8 <__assert_fail@plt+0x2d0ec>
   3e2d4:	ldr	r2, [pc, #32]	; 3e2fc <__assert_fail@plt+0x2d0f0>
   3e2d8:	mov	r0, r4
   3e2dc:	mov	r1, #15
   3e2e0:	bl	110b0 <snprintf@plt>
   3e2e4:	mov	r2, r4
   3e2e8:	mov	r1, #8
   3e2ec:	ldr	r0, [pc, #12]	; 3e300 <__assert_fail@plt+0x2d0f4>
   3e2f0:	pop	{r4, lr}
   3e2f4:	b	10f24 <printf@plt>
   3e2f8:	andeq	ip, r9, r0, ror #22
   3e2fc:	andeq	r1, r8, ip, lsl #30
   3e300:	andeq	lr, r7, r0, lsl #20
   3e304:	cmp	r2, #0
   3e308:	push	{r4, r5, r6, lr}
   3e30c:	mov	r5, #0
   3e310:	lslne	r3, r2, #1
   3e314:	moveq	r3, #4
   3e318:	cmp	r1, r5
   3e31c:	cmpeq	r0, r0
   3e320:	bne	3e338 <__assert_fail@plt+0x2d12c>
   3e324:	mov	r2, r0
   3e328:	sub	r1, r3, #1
   3e32c:	ldr	r0, [pc, #24]	; 3e34c <__assert_fail@plt+0x2d140>
   3e330:	pop	{r4, r5, r6, lr}
   3e334:	b	10f24 <printf@plt>
   3e338:	ldr	r3, [pc, #16]	; 3e350 <__assert_fail@plt+0x2d144>
   3e33c:	mov	r2, #272	; 0x110
   3e340:	ldr	r1, [pc, #12]	; 3e354 <__assert_fail@plt+0x2d148>
   3e344:	ldr	r0, [pc, #12]	; 3e358 <__assert_fail@plt+0x2d14c>
   3e348:	bl	1120c <__assert_fail@plt>
   3e34c:	andeq	lr, r7, r0, asr #20
   3e350:	andeq	sp, r7, r8, asr #13
   3e354:	andeq	lr, r7, r8, lsl #20
   3e358:	andeq	lr, r7, r0, lsr #20
   3e35c:	orrs	ip, r0, r1
   3e360:	push	{r4, r5, lr}
   3e364:	mov	r4, r2
   3e368:	sub	sp, sp, #12
   3e36c:	mov	r5, r3
   3e370:	bne	3e394 <__assert_fail@plt+0x2d188>
   3e374:	strd	r4, [sp]
   3e378:	ldr	r2, [pc, #76]	; 3e3cc <__assert_fail@plt+0x2d1c0>
   3e37c:	mov	r1, #64	; 0x40
   3e380:	ldr	r0, [sp, #24]
   3e384:	bl	110b0 <snprintf@plt>
   3e388:	ldr	r0, [sp, #24]
   3e38c:	add	sp, sp, #12
   3e390:	pop	{r4, r5, pc}
   3e394:	strd	r0, [sp]
   3e398:	ldr	r2, [pc, #44]	; 3e3cc <__assert_fail@plt+0x2d1c0>
   3e39c:	mov	r1, #64	; 0x40
   3e3a0:	ldr	r0, [sp, #24]
   3e3a4:	bl	110b0 <snprintf@plt>
   3e3a8:	ldr	r3, [sp, #24]
   3e3ac:	strd	r4, [sp]
   3e3b0:	ldr	r2, [pc, #24]	; 3e3d0 <__assert_fail@plt+0x2d1c4>
   3e3b4:	rsb	r1, r0, #64	; 0x40
   3e3b8:	add	r0, r3, r0
   3e3bc:	bl	110b0 <snprintf@plt>
   3e3c0:	ldr	r0, [sp, #24]
   3e3c4:	add	sp, sp, #12
   3e3c8:	pop	{r4, r5, pc}
   3e3cc:	andeq	r2, r6, r8, ror #26
   3e3d0:	andeq	lr, r7, r8, asr #20
   3e3d4:	ldr	r3, [pc, #88]	; 3e434 <__assert_fail@plt+0x2d228>
   3e3d8:	push	{r4, r5, r6, lr}
   3e3dc:	mov	r2, #5
   3e3e0:	ldr	r3, [r3]
   3e3e4:	mov	r5, r0
   3e3e8:	cmp	r3, #0
   3e3ec:	beq	3e41c <__assert_fail@plt+0x2d210>
   3e3f0:	ldr	r3, [r1]
   3e3f4:	mov	r4, r1
   3e3f8:	cmp	r3, #0
   3e3fc:	beq	3e41c <__assert_fail@plt+0x2d210>
   3e400:	ldr	r1, [pc, #48]	; 3e438 <__assert_fail@plt+0x2d22c>
   3e404:	mov	r0, #0
   3e408:	bl	10f90 <dcgettext@plt>
   3e40c:	ldr	r2, [r4]
   3e410:	ldr	r1, [r5]
   3e414:	pop	{r4, r5, r6, lr}
   3e418:	b	10f24 <printf@plt>
   3e41c:	ldr	r1, [pc, #24]	; 3e43c <__assert_fail@plt+0x2d230>
   3e420:	mov	r0, #0
   3e424:	bl	10f90 <dcgettext@plt>
   3e428:	ldr	r1, [r5]
   3e42c:	pop	{r4, r5, r6, lr}
   3e430:	b	10f24 <printf@plt>
   3e434:	andeq	lr, r9, ip, lsl sp
   3e438:	andeq	lr, r7, r0, asr sl
   3e43c:	andeq	lr, r7, r0, lsl #21
   3e440:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e444:	mov	r4, r0
   3e448:	add	r1, r0, #12
   3e44c:	add	r0, r0, #8
   3e450:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   3e454:	ldrd	r8, [r4, #32]
   3e458:	ldr	r6, [r4, #16]
   3e45c:	mov	r1, r8
   3e460:	mov	r0, r6
   3e464:	bl	11104 <strnlen@plt>
   3e468:	mov	r3, #0
   3e46c:	cmp	r9, r3
   3e470:	cmpeq	r8, r0
   3e474:	beq	3e57c <__assert_fail@plt+0x2d370>
   3e478:	mov	r2, #5
   3e47c:	ldr	r1, [pc, #368]	; 3e5f4 <__assert_fail@plt+0x2d3e8>
   3e480:	mov	r5, r0
   3e484:	mov	r0, #0
   3e488:	bl	10f90 <dcgettext@plt>
   3e48c:	mov	r1, r6
   3e490:	bl	10f24 <printf@plt>
   3e494:	mov	r2, #14
   3e498:	ldr	r1, [pc, #344]	; 3e5f8 <__assert_fail@plt+0x2d3ec>
   3e49c:	ldr	r0, [r4, #8]
   3e4a0:	bl	111d0 <strncmp@plt>
   3e4a4:	subs	r7, r0, #0
   3e4a8:	beq	3e514 <__assert_fail@plt+0x2d308>
   3e4ac:	ldr	r6, [r4, #32]
   3e4b0:	mov	r2, #5
   3e4b4:	sub	r6, r6, #1
   3e4b8:	sub	r6, r6, r5
   3e4bc:	cmp	r6, #19
   3e4c0:	bls	3e59c <__assert_fail@plt+0x2d390>
   3e4c4:	ldr	r1, [pc, #304]	; 3e5fc <__assert_fail@plt+0x2d3f0>
   3e4c8:	mov	r0, #0
   3e4cc:	ldr	r7, [r4, #16]
   3e4d0:	bl	10f90 <dcgettext@plt>
   3e4d4:	ldr	r4, [pc, #292]	; 3e600 <__assert_fail@plt+0x2d3f4>
   3e4d8:	mov	r1, r6
   3e4dc:	bl	10f24 <printf@plt>
   3e4e0:	add	r1, r5, #1
   3e4e4:	add	r1, r7, r1
   3e4e8:	mov	r2, r6
   3e4ec:	bl	3da9c <__assert_fail@plt+0x2c890>
   3e4f0:	ldr	r1, [r4]
   3e4f4:	mov	r0, #10
   3e4f8:	bl	11158 <putc@plt>
   3e4fc:	ldr	r1, [r4]
   3e500:	mov	r0, #10
   3e504:	bl	11158 <putc@plt>
   3e508:	mov	r7, #1
   3e50c:	mov	r0, r7
   3e510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e514:	ldrd	r2, [r4, #32]
   3e518:	add	r5, r5, #4
   3e51c:	bic	r5, r5, #3
   3e520:	mov	r9, #0
   3e524:	add	r8, r5, #4
   3e528:	cmp	r9, r3
   3e52c:	cmpeq	r8, r2
   3e530:	bhi	3e5bc <__assert_fail@plt+0x2d3b0>
   3e534:	ldr	r3, [pc, #200]	; 3e604 <__assert_fail@plt+0x2d3f8>
   3e538:	add	r0, r6, r5
   3e53c:	mov	r1, #4
   3e540:	ldr	r3, [r3]
   3e544:	blx	r3
   3e548:	mov	r2, #5
   3e54c:	ldr	r1, [pc, #180]	; 3e608 <__assert_fail@plt+0x2d3fc>
   3e550:	mov	r6, r0
   3e554:	mov	r0, r7
   3e558:	bl	10f90 <dcgettext@plt>
   3e55c:	mov	r1, r6
   3e560:	bl	10f24 <printf@plt>
   3e564:	ldrd	r2, [r4, #32]
   3e568:	cmp	r9, r3
   3e56c:	cmpeq	r8, r2
   3e570:	bcc	3e5d0 <__assert_fail@plt+0x2d3c4>
   3e574:	ldr	r4, [pc, #132]	; 3e600 <__assert_fail@plt+0x2d3f4>
   3e578:	b	3e4fc <__assert_fail@plt+0x2d2f0>
   3e57c:	mov	r2, #5
   3e580:	ldr	r1, [pc, #132]	; 3e60c <__assert_fail@plt+0x2d400>
   3e584:	mov	r0, #0
   3e588:	bl	10f90 <dcgettext@plt>
   3e58c:	mov	r7, #0
   3e590:	bl	54dd0 <warn@@Base>
   3e594:	mov	r0, r7
   3e598:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e59c:	ldr	r1, [pc, #108]	; 3e610 <__assert_fail@plt+0x2d404>
   3e5a0:	mov	r0, #0
   3e5a4:	bl	10f90 <dcgettext@plt>
   3e5a8:	mov	r7, #0
   3e5ac:	mov	r1, r6
   3e5b0:	bl	54dd0 <warn@@Base>
   3e5b4:	mov	r0, r7
   3e5b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e5bc:	mov	r2, #5
   3e5c0:	ldr	r1, [pc, #76]	; 3e614 <__assert_fail@plt+0x2d408>
   3e5c4:	bl	10f90 <dcgettext@plt>
   3e5c8:	bl	54dd0 <warn@@Base>
   3e5cc:	b	3e50c <__assert_fail@plt+0x2d300>
   3e5d0:	mov	r2, #5
   3e5d4:	ldr	r1, [pc, #60]	; 3e618 <__assert_fail@plt+0x2d40c>
   3e5d8:	mov	r0, r7
   3e5dc:	bl	10f90 <dcgettext@plt>
   3e5e0:	ldr	r1, [r4, #32]
   3e5e4:	sub	r1, r1, #4
   3e5e8:	sub	r1, r1, r5
   3e5ec:	bl	54dd0 <warn@@Base>
   3e5f0:	b	3e50c <__assert_fail@plt+0x2d300>
   3e5f4:	andeq	lr, r7, ip, asr #21
   3e5f8:	andeq	r8, r6, r4, lsr #16
   3e5fc:	andeq	lr, r7, r0, lsl #23
   3e600:	andeq	sl, r9, ip, lsr #8
   3e604:	andeq	lr, r9, ip, asr sp
   3e608:	andeq	lr, r7, ip, lsl #22
   3e60c:	andeq	lr, r7, r0, lsr #21
   3e610:	andeq	lr, r7, ip, asr fp
   3e614:	andeq	lr, r7, ip, ror #21
   3e618:	andeq	lr, r7, r0, lsr #22
   3e61c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e620:	mov	fp, r0
   3e624:	add	r1, r0, #12
   3e628:	sub	sp, sp, #36	; 0x24
   3e62c:	add	r0, r0, #8
   3e630:	ldr	r4, [fp, #16]
   3e634:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   3e638:	ldrd	r2, [fp, #32]
   3e63c:	cmp	r3, #0
   3e640:	cmpeq	r2, #23
   3e644:	bls	3eb74 <__assert_fail@plt+0x2d968>
   3e648:	mov	r1, #4
   3e64c:	mov	r0, r4
   3e650:	bl	54f90 <warn@@Base+0x1c0>
   3e654:	mov	r2, #5
   3e658:	ldr	r1, [pc, #1932]	; 3edec <__assert_fail@plt+0x2dbe0>
   3e65c:	mov	r5, r0
   3e660:	mov	r0, #0
   3e664:	bl	10f90 <dcgettext@plt>
   3e668:	mov	r1, r5
   3e66c:	bl	10f24 <printf@plt>
   3e670:	sub	r3, r5, #3
   3e674:	cmp	r3, #5
   3e678:	bhi	3ebd4 <__assert_fail@plt+0x2d9c8>
   3e67c:	cmp	r5, #3
   3e680:	beq	3eb80 <__assert_fail@plt+0x2d974>
   3e684:	cmp	r5, #4
   3e688:	beq	3eb94 <__assert_fail@plt+0x2d988>
   3e68c:	cmp	r5, #5
   3e690:	beq	3eba8 <__assert_fail@plt+0x2d99c>
   3e694:	cmp	r5, #6
   3e698:	beq	3ebbc <__assert_fail@plt+0x2d9b0>
   3e69c:	mov	r1, #4
   3e6a0:	add	r0, r4, r1
   3e6a4:	bl	54f90 <warn@@Base+0x1c0>
   3e6a8:	mov	r1, #4
   3e6ac:	mov	r5, #0
   3e6b0:	mov	r7, r0
   3e6b4:	add	r0, r4, #8
   3e6b8:	bl	54f90 <warn@@Base+0x1c0>
   3e6bc:	mov	r1, #4
   3e6c0:	mov	r6, r0
   3e6c4:	add	r0, r4, #12
   3e6c8:	bl	54f90 <warn@@Base+0x1c0>
   3e6cc:	mov	r1, #4
   3e6d0:	mov	r8, r0
   3e6d4:	add	r0, r4, #16
   3e6d8:	bl	54f90 <warn@@Base+0x1c0>
   3e6dc:	mov	r1, #4
   3e6e0:	str	r0, [sp, #4]
   3e6e4:	mov	r9, r0
   3e6e8:	add	r0, r4, #20
   3e6ec:	bl	54f90 <warn@@Base+0x1c0>
   3e6f0:	mov	ip, r0
   3e6f4:	str	r0, [sp, #8]
   3e6f8:	ldrd	r0, [fp, #32]
   3e6fc:	cmp	r1, r5
   3e700:	cmpeq	r0, r7
   3e704:	bcc	3eb50 <__assert_fail@plt+0x2d944>
   3e708:	cmp	r1, r5
   3e70c:	cmpeq	r0, r6
   3e710:	bcc	3eb50 <__assert_fail@plt+0x2d944>
   3e714:	cmp	r1, r5
   3e718:	cmpeq	r0, r8
   3e71c:	bcc	3eb50 <__assert_fail@plt+0x2d944>
   3e720:	cmp	r1, r5
   3e724:	cmpeq	r0, r9
   3e728:	bcc	3eb50 <__assert_fail@plt+0x2d944>
   3e72c:	cmp	r1, r5
   3e730:	cmpeq	r0, ip
   3e734:	bcc	3eb50 <__assert_fail@plt+0x2d944>
   3e738:	cmp	r7, r6
   3e73c:	bhi	3ec40 <__assert_fail@plt+0x2da34>
   3e740:	cmp	r6, r8
   3e744:	bhi	3ec64 <__assert_fail@plt+0x2da58>
   3e748:	ldr	r3, [sp, #4]
   3e74c:	cmp	r8, r3
   3e750:	bhi	3ebf8 <__assert_fail@plt+0x2d9ec>
   3e754:	ldr	r3, [sp, #4]
   3e758:	ldr	r2, [sp, #8]
   3e75c:	cmp	r3, r2
   3e760:	bhi	3eca4 <__assert_fail@plt+0x2da98>
   3e764:	ldr	r3, [fp, #16]
   3e768:	ldr	r2, [sp, #4]
   3e76c:	add	r0, r3, r0
   3e770:	add	r2, r4, r2
   3e774:	cmp	r2, r0
   3e778:	str	r2, [sp, #16]
   3e77c:	bhi	3ec88 <__assert_fail@plt+0x2da7c>
   3e780:	sub	r3, r6, r7
   3e784:	mov	r5, r3
   3e788:	mov	r2, #5
   3e78c:	ldr	r1, [pc, #1628]	; 3edf0 <__assert_fail@plt+0x2dbe4>
   3e790:	mov	r0, #0
   3e794:	str	r3, [sp, #20]
   3e798:	bl	10f90 <dcgettext@plt>
   3e79c:	lsr	r3, r5, #3
   3e7a0:	mov	r5, r3
   3e7a4:	mov	r9, r3
   3e7a8:	bl	10f24 <printf@plt>
   3e7ac:	cmp	r5, #0
   3e7b0:	addne	r7, r4, r7
   3e7b4:	movne	r5, #0
   3e7b8:	strne	r4, [sp, #12]
   3e7bc:	movne	sl, r9
   3e7c0:	beq	3e81c <__assert_fail@plt+0x2d610>
   3e7c4:	mov	r0, r7
   3e7c8:	mov	r1, #8
   3e7cc:	bl	54f90 <warn@@Base+0x1c0>
   3e7d0:	mov	r1, #8
   3e7d4:	mov	r9, r0
   3e7d8:	add	r0, r7, r1
   3e7dc:	bl	54f90 <warn@@Base+0x1c0>
   3e7e0:	mov	r2, #5
   3e7e4:	ldr	r1, [pc, #1544]	; 3edf4 <__assert_fail@plt+0x2dbe8>
   3e7e8:	add	r7, r7, #16
   3e7ec:	mov	r4, r0
   3e7f0:	mov	r0, #0
   3e7f4:	bl	10f90 <dcgettext@plt>
   3e7f8:	add	r3, r9, r4
   3e7fc:	lsr	r1, r5, #1
   3e800:	sub	r3, r3, #1
   3e804:	mov	r2, r9
   3e808:	add	r5, r5, #2
   3e80c:	bl	10f24 <printf@plt>
   3e810:	cmp	sl, r5
   3e814:	bhi	3e7c4 <__assert_fail@plt+0x2d5b8>
   3e818:	ldr	r4, [sp, #12]
   3e81c:	sub	r9, r8, r6
   3e820:	mov	r2, #5
   3e824:	ldr	r1, [pc, #1484]	; 3edf8 <__assert_fail@plt+0x2dbec>
   3e828:	mov	r0, #0
   3e82c:	bl	10f90 <dcgettext@plt>
   3e830:	lsr	r9, r9, #3
   3e834:	bl	10f24 <printf@plt>
   3e838:	cmp	r9, #0
   3e83c:	addne	r6, r4, r6
   3e840:	movne	r5, #0
   3e844:	strne	r4, [sp, #12]
   3e848:	strne	fp, [sp, #24]
   3e84c:	beq	3e8dc <__assert_fail@plt+0x2d6d0>
   3e850:	mov	r0, r6
   3e854:	mov	r1, #8
   3e858:	bl	54f90 <warn@@Base+0x1c0>
   3e85c:	mov	r1, #8
   3e860:	mov	r4, r0
   3e864:	add	r0, r6, r1
   3e868:	bl	54f90 <warn@@Base+0x1c0>
   3e86c:	mov	r1, #8
   3e870:	mov	r7, r0
   3e874:	add	r0, r6, #16
   3e878:	bl	54f90 <warn@@Base+0x1c0>
   3e87c:	mov	r2, #5
   3e880:	add	r6, r6, #24
   3e884:	mov	sl, r0
   3e888:	mov	fp, r1
   3e88c:	mov	r0, #0
   3e890:	ldr	r1, [pc, #1380]	; 3edfc <__assert_fail@plt+0x2dbf0>
   3e894:	bl	10f90 <dcgettext@plt>
   3e898:	ldr	r3, [pc, #1376]	; 3ee00 <__assert_fail@plt+0x2dbf4>
   3e89c:	mov	r2, r4
   3e8a0:	umull	r3, r1, r3, r5
   3e8a4:	mov	r3, r7
   3e8a8:	lsr	r1, r1, #1
   3e8ac:	bl	10f24 <printf@plt>
   3e8b0:	mov	r0, sl
   3e8b4:	mov	r1, fp
   3e8b8:	mov	r2, #8
   3e8bc:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3e8c0:	add	r5, r5, #3
   3e8c4:	mov	r0, #10
   3e8c8:	bl	110c8 <putchar@plt>
   3e8cc:	cmp	r9, r5
   3e8d0:	bhi	3e850 <__assert_fail@plt+0x2d644>
   3e8d4:	ldr	r4, [sp, #12]
   3e8d8:	ldr	fp, [sp, #24]
   3e8dc:	mov	r2, #5
   3e8e0:	ldr	r1, [pc, #1308]	; 3ee04 <__assert_fail@plt+0x2dbf8>
   3e8e4:	mov	r0, #0
   3e8e8:	bl	10f90 <dcgettext@plt>
   3e8ec:	ldr	r3, [sp, #4]
   3e8f0:	sub	r3, r3, r8
   3e8f4:	mov	r5, r3
   3e8f8:	mov	r6, r3
   3e8fc:	bl	10f24 <printf@plt>
   3e900:	cmp	r5, #0
   3e904:	beq	3e9c0 <__assert_fail@plt+0x2d7b4>
   3e908:	add	r5, r8, #8
   3e90c:	sub	r2, r6, #20
   3e910:	add	r5, r4, r5
   3e914:	str	r4, [sp, #24]
   3e918:	str	r2, [sp, #12]
   3e91c:	mov	sl, #0
   3e920:	mov	r4, r6
   3e924:	str	fp, [sp, #28]
   3e928:	b	3e93c <__assert_fail@plt+0x2d730>
   3e92c:	ldr	r3, [sp, #12]
   3e930:	add	r5, r5, #20
   3e934:	cmp	sl, r3
   3e938:	bhi	3e9b8 <__assert_fail@plt+0x2d7ac>
   3e93c:	mov	r1, #8
   3e940:	sub	r0, r5, #8
   3e944:	bl	54f90 <warn@@Base+0x1c0>
   3e948:	add	sl, sl, #20
   3e94c:	mov	r8, r0
   3e950:	mov	r9, r1
   3e954:	mov	r0, r5
   3e958:	mov	r1, #8
   3e95c:	bl	54f90 <warn@@Base+0x1c0>
   3e960:	mov	r6, r0
   3e964:	mov	r7, r1
   3e968:	add	r0, r5, #8
   3e96c:	mov	r1, #4
   3e970:	bl	54f90 <warn@@Base+0x1c0>
   3e974:	mov	r1, r9
   3e978:	mov	r2, #8
   3e97c:	mov	fp, r0
   3e980:	mov	r0, r8
   3e984:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3e988:	mov	r0, r6
   3e98c:	mov	r1, r7
   3e990:	mov	r2, #8
   3e994:	bl	3ca6c <__assert_fail@plt+0x2b860>
   3e998:	mov	r2, #5
   3e99c:	ldr	r1, [pc, #1124]	; 3ee08 <__assert_fail@plt+0x2dbfc>
   3e9a0:	mov	r0, #0
   3e9a4:	bl	10f90 <dcgettext@plt>
   3e9a8:	mov	r1, fp
   3e9ac:	bl	10f24 <printf@plt>
   3e9b0:	cmp	r4, sl
   3e9b4:	bhi	3e92c <__assert_fail@plt+0x2d720>
   3e9b8:	ldr	r4, [sp, #24]
   3e9bc:	ldr	fp, [sp, #28]
   3e9c0:	ldrd	r2, [sp, #4]
   3e9c4:	ldr	r1, [pc, #1088]	; 3ee0c <__assert_fail@plt+0x2dc00>
   3e9c8:	mov	r0, #0
   3e9cc:	sub	r3, r3, r2
   3e9d0:	mov	r2, #5
   3e9d4:	lsr	sl, r3, #3
   3e9d8:	bl	10f90 <dcgettext@plt>
   3e9dc:	bl	10f24 <printf@plt>
   3e9e0:	cmp	sl, #0
   3e9e4:	beq	3ec1c <__assert_fail@plt+0x2da10>
   3e9e8:	ldr	r3, [sp, #8]
   3e9ec:	ldr	r9, [sp, #16]
   3e9f0:	add	r8, r4, r3
   3e9f4:	ldr	r3, [sp, #20]
   3e9f8:	mov	r5, #0
   3e9fc:	lsr	r3, r3, #4
   3ea00:	str	r3, [sp, #24]
   3ea04:	b	3ea7c <__assert_fail@plt+0x2d870>
   3ea08:	mov	r1, #4
   3ea0c:	bl	54f90 <warn@@Base+0x1c0>
   3ea10:	add	r4, r4, #4
   3ea14:	lsl	r3, r0, #2
   3ea18:	cmp	r3, r0
   3ea1c:	add	r3, r3, r4
   3ea20:	mov	r7, r0
   3ea24:	add	r3, r8, r3
   3ea28:	bcc	3ea44 <__assert_fail@plt+0x2d838>
   3ea2c:	ldr	r2, [fp, #16]
   3ea30:	ldr	r1, [fp, #32]
   3ea34:	add	r2, r2, r1
   3ea38:	cmp	r8, r3
   3ea3c:	cmpls	r3, r2
   3ea40:	bcc	3ecc8 <__assert_fail@plt+0x2dabc>
   3ea44:	mov	r1, r7
   3ea48:	ldr	r0, [pc, #960]	; 3ee10 <__assert_fail@plt+0x2dc04>
   3ea4c:	bl	10f24 <printf@plt>
   3ea50:	mov	r2, #5
   3ea54:	ldr	r1, [pc, #952]	; 3ee14 <__assert_fail@plt+0x2dc08>
   3ea58:	mov	r0, #0
   3ea5c:	bl	10f90 <dcgettext@plt>
   3ea60:	mov	r2, r5
   3ea64:	mov	r1, r7
   3ea68:	bl	54dd0 <warn@@Base>
   3ea6c:	add	r5, r5, #1
   3ea70:	cmp	sl, r5
   3ea74:	add	r9, r9, #8
   3ea78:	beq	3ec1c <__assert_fail@plt+0x2da10>
   3ea7c:	mov	r1, #4
   3ea80:	mov	r0, r9
   3ea84:	bl	54f90 <warn@@Base+0x1c0>
   3ea88:	mov	r1, #4
   3ea8c:	mov	r6, r0
   3ea90:	add	r0, r9, r1
   3ea94:	bl	54f90 <warn@@Base+0x1c0>
   3ea98:	orrs	r3, r6, r0
   3ea9c:	mov	r4, r0
   3eaa0:	beq	3ea6c <__assert_fail@plt+0x2d860>
   3eaa4:	adds	r3, r8, r6
   3eaa8:	bcs	3eac0 <__assert_fail@plt+0x2d8b4>
   3eaac:	ldr	r1, [fp, #32]
   3eab0:	ldr	r2, [fp, #16]
   3eab4:	add	r2, r2, r1
   3eab8:	cmp	r3, r2
   3eabc:	bcc	3ec24 <__assert_fail@plt+0x2da18>
   3eac0:	mov	r2, #5
   3eac4:	ldr	r1, [pc, #844]	; 3ee18 <__assert_fail@plt+0x2dc0c>
   3eac8:	mov	r0, #0
   3eacc:	bl	10f90 <dcgettext@plt>
   3ead0:	mov	r2, r6
   3ead4:	mov	r1, r5
   3ead8:	bl	10f24 <printf@plt>
   3eadc:	mov	r2, #5
   3eae0:	ldr	r1, [pc, #820]	; 3ee1c <__assert_fail@plt+0x2dc10>
   3eae4:	mov	r0, #0
   3eae8:	bl	10f90 <dcgettext@plt>
   3eaec:	mov	r2, r5
   3eaf0:	mov	r1, r6
   3eaf4:	bl	54dd0 <warn@@Base>
   3eaf8:	adds	r0, r8, r4
   3eafc:	bcs	3eb18 <__assert_fail@plt+0x2d90c>
   3eb00:	ldr	r2, [fp, #32]
   3eb04:	ldr	r3, [fp, #16]
   3eb08:	sub	r2, r2, #3
   3eb0c:	add	r3, r3, r2
   3eb10:	cmp	r0, r3
   3eb14:	bcc	3ea08 <__assert_fail@plt+0x2d7fc>
   3eb18:	mov	r2, #5
   3eb1c:	ldr	r1, [pc, #764]	; 3ee20 <__assert_fail@plt+0x2dc14>
   3eb20:	mov	r0, #0
   3eb24:	bl	10f90 <dcgettext@plt>
   3eb28:	mov	r1, r4
   3eb2c:	bl	10f24 <printf@plt>
   3eb30:	mov	r2, #5
   3eb34:	ldr	r1, [pc, #744]	; 3ee24 <__assert_fail@plt+0x2dc18>
   3eb38:	mov	r0, #0
   3eb3c:	bl	10f90 <dcgettext@plt>
   3eb40:	mov	r2, r5
   3eb44:	mov	r1, r4
   3eb48:	bl	54dd0 <warn@@Base>
   3eb4c:	b	3ea6c <__assert_fail@plt+0x2d860>
   3eb50:	ldr	r1, [pc, #720]	; 3ee28 <__assert_fail@plt+0x2dc1c>
   3eb54:	mov	r2, #5
   3eb58:	mov	r0, #0
   3eb5c:	bl	10f90 <dcgettext@plt>
   3eb60:	ldr	r1, [fp, #8]
   3eb64:	bl	54dd0 <warn@@Base>
   3eb68:	mov	r0, #0
   3eb6c:	add	sp, sp, #36	; 0x24
   3eb70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3eb74:	mov	r2, #5
   3eb78:	ldr	r1, [pc, #684]	; 3ee2c <__assert_fail@plt+0x2dc20>
   3eb7c:	b	3eb58 <__assert_fail@plt+0x2d94c>
   3eb80:	mov	r2, #5
   3eb84:	ldr	r1, [pc, #676]	; 3ee30 <__assert_fail@plt+0x2dc24>
   3eb88:	mov	r0, #0
   3eb8c:	bl	10f90 <dcgettext@plt>
   3eb90:	bl	54dd0 <warn@@Base>
   3eb94:	mov	r2, #5
   3eb98:	ldr	r1, [pc, #660]	; 3ee34 <__assert_fail@plt+0x2dc28>
   3eb9c:	mov	r0, #0
   3eba0:	bl	10f90 <dcgettext@plt>
   3eba4:	bl	54dd0 <warn@@Base>
   3eba8:	mov	r2, #5
   3ebac:	ldr	r1, [pc, #644]	; 3ee38 <__assert_fail@plt+0x2dc2c>
   3ebb0:	mov	r0, #0
   3ebb4:	bl	10f90 <dcgettext@plt>
   3ebb8:	bl	54dd0 <warn@@Base>
   3ebbc:	mov	r2, #5
   3ebc0:	ldr	r1, [pc, #628]	; 3ee3c <__assert_fail@plt+0x2dc30>
   3ebc4:	mov	r0, #0
   3ebc8:	bl	10f90 <dcgettext@plt>
   3ebcc:	bl	54dd0 <warn@@Base>
   3ebd0:	b	3e69c <__assert_fail@plt+0x2d490>
   3ebd4:	mov	r2, #5
   3ebd8:	ldr	r1, [pc, #608]	; 3ee40 <__assert_fail@plt+0x2dc34>
   3ebdc:	mov	r0, #0
   3ebe0:	bl	10f90 <dcgettext@plt>
   3ebe4:	mov	r1, r5
   3ebe8:	bl	54dd0 <warn@@Base>
   3ebec:	mov	r0, #0
   3ebf0:	add	sp, sp, #36	; 0x24
   3ebf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ebf8:	mov	r2, #5
   3ebfc:	ldr	r1, [pc, #576]	; 3ee44 <__assert_fail@plt+0x2dc38>
   3ec00:	mov	r0, r5
   3ec04:	bl	10f90 <dcgettext@plt>
   3ec08:	mov	r2, r8
   3ec0c:	ldr	r1, [sp, #4]
   3ec10:	bl	54dd0 <warn@@Base>
   3ec14:	mov	r0, r5
   3ec18:	b	3eb6c <__assert_fail@plt+0x2d960>
   3ec1c:	mov	r0, #1
   3ec20:	b	3eb6c <__assert_fail@plt+0x2d960>
   3ec24:	ldr	r2, [sp, #8]
   3ec28:	ldr	r0, [pc, #536]	; 3ee48 <__assert_fail@plt+0x2dc3c>
   3ec2c:	sub	r2, r1, r2
   3ec30:	sub	r2, r2, r6
   3ec34:	mov	r1, r5
   3ec38:	bl	10f24 <printf@plt>
   3ec3c:	b	3eaf8 <__assert_fail@plt+0x2d8ec>
   3ec40:	mov	r2, #5
   3ec44:	ldr	r1, [pc, #512]	; 3ee4c <__assert_fail@plt+0x2dc40>
   3ec48:	mov	r0, r5
   3ec4c:	bl	10f90 <dcgettext@plt>
   3ec50:	mov	r2, r7
   3ec54:	mov	r1, r6
   3ec58:	bl	54dd0 <warn@@Base>
   3ec5c:	mov	r0, r5
   3ec60:	b	3eb6c <__assert_fail@plt+0x2d960>
   3ec64:	mov	r2, #5
   3ec68:	ldr	r1, [pc, #480]	; 3ee50 <__assert_fail@plt+0x2dc44>
   3ec6c:	mov	r0, r5
   3ec70:	bl	10f90 <dcgettext@plt>
   3ec74:	mov	r2, r6
   3ec78:	mov	r1, r8
   3ec7c:	bl	54dd0 <warn@@Base>
   3ec80:	mov	r0, r5
   3ec84:	b	3eb6c <__assert_fail@plt+0x2d960>
   3ec88:	mov	r2, #5
   3ec8c:	ldr	r1, [pc, #448]	; 3ee54 <__assert_fail@plt+0x2dc48>
   3ec90:	mov	r0, #0
   3ec94:	bl	10f90 <dcgettext@plt>
   3ec98:	bl	54dd0 <warn@@Base>
   3ec9c:	mov	r0, #0
   3eca0:	b	3eb6c <__assert_fail@plt+0x2d960>
   3eca4:	mov	r2, #5
   3eca8:	ldr	r1, [pc, #424]	; 3ee58 <__assert_fail@plt+0x2dc4c>
   3ecac:	mov	r0, r5
   3ecb0:	bl	10f90 <dcgettext@plt>
   3ecb4:	ldr	r2, [sp, #4]
   3ecb8:	ldr	r1, [sp, #8]
   3ecbc:	bl	54dd0 <warn@@Base>
   3ecc0:	mov	r0, r5
   3ecc4:	b	3eb6c <__assert_fail@plt+0x2d960>
   3ecc8:	cmp	r7, #1
   3eccc:	bhi	3ede0 <__assert_fail@plt+0x2dbd4>
   3ecd0:	cmp	r7, #0
   3ecd4:	beq	3eda0 <__assert_fail@plt+0x2db94>
   3ecd8:	cmp	r7, #1
   3ecdc:	movne	r3, #9
   3ece0:	moveq	r3, #32
   3ece4:	mov	r2, #0
   3ece8:	str	r5, [sp, #20]
   3ecec:	ldr	r5, [sp, #24]
   3ecf0:	add	r4, r8, r4
   3ecf4:	str	r9, [sp, #4]
   3ecf8:	str	r8, [sp, #16]
   3ecfc:	mov	r9, r2
   3ed00:	mov	r8, r3
   3ed04:	str	sl, [sp, #12]
   3ed08:	mov	r1, #4
   3ed0c:	mov	r0, r4
   3ed10:	bl	54f90 <warn@@Base+0x1c0>
   3ed14:	mov	r1, r8
   3ed18:	mov	sl, r0
   3ed1c:	bic	ip, sl, #-16777216	; 0xff000000
   3ed20:	cmp	r5, ip
   3ed24:	mov	r2, ip
   3ed28:	ldr	r0, [pc, #300]	; 3ee5c <__assert_fail@plt+0x2dc50>
   3ed2c:	subls	r2, ip, r5
   3ed30:	lsr	r6, sl, #28
   3ed34:	ldrls	r0, [pc, #292]	; 3ee60 <__assert_fail@plt+0x2dc54>
   3ed38:	lsr	sl, sl, #31
   3ed3c:	bl	10f24 <printf@plt>
   3ed40:	subs	r0, sl, #0
   3ed44:	movne	r0, #0
   3ed48:	ldr	r1, [pc, #276]	; 3ee64 <__assert_fail@plt+0x2dc58>
   3ed4c:	mov	r2, #5
   3ed50:	ldrne	r1, [pc, #272]	; 3ee68 <__assert_fail@plt+0x2dc5c>
   3ed54:	bl	10f90 <dcgettext@plt>
   3ed58:	and	r6, r6, #7
   3ed5c:	ldr	r3, [pc, #264]	; 3ee6c <__assert_fail@plt+0x2dc60>
   3ed60:	mov	r2, #5
   3ed64:	add	r6, r3, r6, lsl #2
   3ed68:	ldr	r1, [r6, #1056]	; 0x420
   3ed6c:	mov	sl, r0
   3ed70:	mov	r0, #0
   3ed74:	bl	10f90 <dcgettext@plt>
   3ed78:	mov	r1, sl
   3ed7c:	mov	r2, r0
   3ed80:	ldr	r0, [pc, #232]	; 3ee70 <__assert_fail@plt+0x2dc64>
   3ed84:	bl	10f24 <printf@plt>
   3ed88:	cmp	r7, #1
   3ed8c:	bne	3edac <__assert_fail@plt+0x2dba0>
   3ed90:	ldr	r9, [sp, #4]
   3ed94:	ldr	sl, [sp, #12]
   3ed98:	ldr	r8, [sp, #16]
   3ed9c:	ldr	r5, [sp, #20]
   3eda0:	mov	r0, #10
   3eda4:	bl	110c8 <putchar@plt>
   3eda8:	b	3ea6c <__assert_fail@plt+0x2d860>
   3edac:	add	r9, r9, #1
   3edb0:	mov	r0, #10
   3edb4:	bl	110c8 <putchar@plt>
   3edb8:	cmp	r7, r9
   3edbc:	add	r4, r4, #4
   3edc0:	bhi	3ed08 <__assert_fail@plt+0x2dafc>
   3edc4:	cmp	r7, #1
   3edc8:	ldr	r9, [sp, #4]
   3edcc:	ldr	sl, [sp, #12]
   3edd0:	ldr	r8, [sp, #16]
   3edd4:	ldr	r5, [sp, #20]
   3edd8:	bhi	3ea6c <__assert_fail@plt+0x2d860>
   3eddc:	b	3eda0 <__assert_fail@plt+0x2db94>
   3ede0:	mov	r0, #10
   3ede4:	bl	110c8 <putchar@plt>
   3ede8:	b	3ecd8 <__assert_fail@plt+0x2dacc>
   3edec:	andeq	lr, r7, r4, asr #23
   3edf0:	strdeq	lr, [r7], -ip
   3edf4:	andeq	lr, r7, r4, lsl lr
   3edf8:	andeq	lr, r7, r8, lsl #28
   3edfc:	andeq	lr, r7, r0, asr #28
   3ee00:	bge	feae98b4 <optarg@@GLIBC_2.4+0xfea4f484>
   3ee04:	andeq	lr, r7, ip, lsr #28
   3ee08:	andeq	sl, r6, r0, lsl #9
   3ee0c:	andeq	lr, r7, r4, asr lr
   3ee10:	andeq	lr, r7, ip, lsr #30
   3ee14:	andeq	lr, r7, ip, asr #30
   3ee18:	andeq	lr, r7, r4, ror #28
   3ee1c:	andeq	lr, r7, r0, lsl #29
   3ee20:	andeq	lr, r7, r8, asr #29
   3ee24:	andeq	lr, r7, r8, ror #29
   3ee28:			; <UNDEFINED> instruction: 0x0007ecbc
   3ee2c:	muleq	r7, ip, fp
   3ee30:	strdeq	lr, [r7], -r0
   3ee34:	andeq	lr, r7, r4, lsr #24
   3ee38:	andeq	lr, r7, ip, asr ip
   3ee3c:	andeq	lr, r7, ip, lsl #25
   3ee40:	ldrdeq	lr, [r7], -r4
   3ee44:	andeq	lr, r7, r4, asr #26
   3ee48:			; <UNDEFINED> instruction: 0x0007eebc
   3ee4c:	andeq	lr, r7, r0, ror #25
   3ee50:	andeq	lr, r7, ip, lsl #26
   3ee54:	andeq	lr, r7, ip, asr #27
   3ee58:	andeq	lr, r7, r8, lsl #27
   3ee5c:	andeq	lr, r7, ip, lsl #31
   3ee60:	andeq	lr, r7, r4, lsl #31
   3ee64:	muleq	r7, r4, pc	; <UNPREDICTABLE>
   3ee68:	andeq	sp, r6, r4, lsl #2
   3ee6c:			; <UNDEFINED> instruction: 0x0007d2bc
   3ee70:	muleq	r7, ip, pc	; <UNPREDICTABLE>
   3ee74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ee78:	mov	r4, r0
   3ee7c:	ldr	sl, [r0, #32]
   3ee80:	sub	sp, sp, #12
   3ee84:	cmp	sl, #0
   3ee88:	beq	3ef98 <__assert_fail@plt+0x2dd8c>
   3ee8c:	ldrd	r2, [r4, #24]
   3ee90:	add	r1, r0, #12
   3ee94:	add	r0, r0, #8
   3ee98:	ldr	r5, [r4, #16]
   3ee9c:	strd	r2, [sp]
   3eea0:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   3eea4:	ldr	r9, [pc, #272]	; 3efbc <__assert_fail@plt+0x2ddb0>
   3eea8:	ldr	r6, [pc, #272]	; 3efc0 <__assert_fail@plt+0x2ddb4>
   3eeac:	ldr	r7, [pc, #272]	; 3efc4 <__assert_fail@plt+0x2ddb8>
   3eeb0:	cmp	sl, #16
   3eeb4:	ldr	r1, [sp]
   3eeb8:	ldr	r0, [pc, #264]	; 3efc8 <__assert_fail@plt+0x2ddbc>
   3eebc:	movcc	r4, sl
   3eec0:	movcs	r4, #16
   3eec4:	mov	fp, #0
   3eec8:	bl	10f24 <printf@plt>
   3eecc:	b	3eef4 <__assert_fail@plt+0x2dce8>
   3eed0:	ldrb	r1, [r5, fp]
   3eed4:	mov	r0, r7
   3eed8:	bl	10f24 <printf@plt>
   3eedc:	and	r2, fp, #3
   3eee0:	cmp	r2, #3
   3eee4:	add	fp, fp, #1
   3eee8:	beq	3ef14 <__assert_fail@plt+0x2dd08>
   3eeec:	cmp	fp, #16
   3eef0:	beq	3ef24 <__assert_fail@plt+0x2dd18>
   3eef4:	cmp	r4, fp
   3eef8:	mov	r0, r6
   3eefc:	bgt	3eed0 <__assert_fail@plt+0x2dcc4>
   3ef00:	bl	10f24 <printf@plt>
   3ef04:	and	r2, fp, #3
   3ef08:	cmp	r2, #3
   3ef0c:	add	fp, fp, #1
   3ef10:	bne	3eeec <__assert_fail@plt+0x2dce0>
   3ef14:	mov	r0, #32
   3ef18:	bl	110c8 <putchar@plt>
   3ef1c:	cmp	fp, #16
   3ef20:	bne	3eef4 <__assert_fail@plt+0x2dce8>
   3ef24:	sub	fp, r5, #1
   3ef28:	ldrb	r1, [fp, #1]
   3ef2c:	mov	r0, #46	; 0x2e
   3ef30:	add	r8, fp, #1
   3ef34:	sub	ip, r1, #32
   3ef38:	cmp	ip, #95	; 0x5f
   3ef3c:	movls	r0, r1
   3ef40:	bl	110c8 <putchar@plt>
   3ef44:	add	r3, fp, #2
   3ef48:	sub	r3, r3, r5
   3ef4c:	cmp	r4, r3
   3ef50:	mov	fp, r8
   3ef54:	bgt	3ef28 <__assert_fail@plt+0x2dd1c>
   3ef58:	ldrd	r2, [sp]
   3ef5c:	ldr	r1, [r9]
   3ef60:	mov	r0, #10
   3ef64:	adds	r2, r2, r4
   3ef68:	adc	r3, r3, r4, asr #31
   3ef6c:	add	r5, r5, r4
   3ef70:	strd	r2, [sp]
   3ef74:	bl	11158 <putc@plt>
   3ef78:	subs	sl, sl, r4
   3ef7c:	bne	3eeb0 <__assert_fail@plt+0x2dca4>
   3ef80:	ldr	r1, [r9]
   3ef84:	mov	r0, #10
   3ef88:	bl	11158 <putc@plt>
   3ef8c:	mov	r0, #1
   3ef90:	add	sp, sp, #12
   3ef94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ef98:	mov	r2, #5
   3ef9c:	ldr	r1, [pc, #40]	; 3efcc <__assert_fail@plt+0x2ddc0>
   3efa0:	mov	r0, sl
   3efa4:	bl	10f90 <dcgettext@plt>
   3efa8:	ldr	r1, [r4, #8]
   3efac:	bl	10f24 <printf@plt>
   3efb0:	mov	r0, sl
   3efb4:	add	sp, sp, #12
   3efb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3efbc:	andeq	sl, r9, ip, lsr #8
   3efc0:	andeq	r6, r6, ip, lsl r5
   3efc4:	andeq	r2, r6, r8, lsl #31
   3efc8:	andeq	r2, r6, ip, ror pc
   3efcc:	andeq	lr, r7, ip, lsl #14
   3efd0:	cmp	r0, r3
   3efd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3efd8:	bcs	3f0e8 <__assert_fail@plt+0x2dedc>
   3efdc:	mov	sl, r0
   3efe0:	mov	r7, #0
   3efe4:	ldrb	r8, [sl], #1
   3efe8:	and	r6, r8, #127	; 0x7f
   3efec:	tst	r8, #128	; 0x80
   3eff0:	uxtb	r6, r6
   3eff4:	beq	3f104 <__assert_fail@plt+0x2def8>
   3eff8:	sub	r3, r3, r0
   3effc:	mov	lr, #7
   3f000:	rsb	r3, r3, r3, lsl #3
   3f004:	mov	r9, #1
   3f008:	cmp	lr, r3
   3f00c:	sub	ip, lr, #32
   3f010:	rsb	r0, lr, #32
   3f014:	beq	3f0c8 <__assert_fail@plt+0x2debc>
   3f018:	ldrb	r8, [sl], #1
   3f01c:	add	r9, r9, #1
   3f020:	mov	r5, #0
   3f024:	and	r4, r8, #127	; 0x7f
   3f028:	tst	r8, #128	; 0x80
   3f02c:	uxtb	r4, r4
   3f030:	lsl	ip, r4, ip
   3f034:	orr	ip, ip, r4, lsr r0
   3f038:	orr	r4, r6, r4, lsl lr
   3f03c:	orr	ip, ip, r7
   3f040:	mov	r6, r4
   3f044:	mov	r7, ip
   3f048:	add	lr, lr, #7
   3f04c:	beq	3f0d8 <__assert_fail@plt+0x2decc>
   3f050:	cmp	r9, #10
   3f054:	bne	3f008 <__assert_fail@plt+0x2ddfc>
   3f058:	cmp	r1, #0
   3f05c:	beq	3f0bc <__assert_fail@plt+0x2deb0>
   3f060:	cmp	lr, #63	; 0x3f
   3f064:	movhi	r3, #0
   3f068:	movls	r3, #1
   3f06c:	str	r9, [r1]
   3f070:	cmp	r2, #0
   3f074:	movne	r2, r3
   3f078:	moveq	r2, #0
   3f07c:	cmp	r2, #0
   3f080:	beq	3f0bc <__assert_fail@plt+0x2deb0>
   3f084:	tst	r8, #64	; 0x40
   3f088:	beq	3f0bc <__assert_fail@plt+0x2deb0>
   3f08c:	mov	r1, #1
   3f090:	sub	r0, lr, #32
   3f094:	lsl	r2, r1, lr
   3f098:	lsl	r3, r1, r0
   3f09c:	rsb	r0, lr, #32
   3f0a0:	orr	r3, r3, r1, lsr r0
   3f0a4:	rsbs	r0, r2, #0
   3f0a8:	rsc	r1, r3, #0
   3f0ac:	orr	r2, r0, r6
   3f0b0:	orr	r3, r1, r7
   3f0b4:	mov	r6, r2
   3f0b8:	mov	r7, r3
   3f0bc:	mov	r0, r6
   3f0c0:	mov	r1, r7
   3f0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f0c8:	mov	r3, #1
   3f0cc:	cmp	r1, #0
   3f0d0:	bne	3f06c <__assert_fail@plt+0x2de60>
   3f0d4:	b	3f070 <__assert_fail@plt+0x2de64>
   3f0d8:	cmp	lr, #63	; 0x3f
   3f0dc:	movhi	r3, #0
   3f0e0:	movls	r3, #1
   3f0e4:	b	3f0cc <__assert_fail@plt+0x2dec0>
   3f0e8:	mov	r8, #0
   3f0ec:	mov	lr, r8
   3f0f0:	mov	r9, r8
   3f0f4:	mov	r3, #1
   3f0f8:	mov	r6, #0
   3f0fc:	mov	r7, #0
   3f100:	b	3f0cc <__assert_fail@plt+0x2dec0>
   3f104:	mov	r3, #1
   3f108:	mov	r9, r3
   3f10c:	mov	lr, #7
   3f110:	b	3f0cc <__assert_fail@plt+0x2dec0>
   3f114:	cmp	r1, r0
   3f118:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3f11c:	sub	sp, sp, #8
   3f120:	bls	3f298 <__assert_fail@plt+0x2e08c>
   3f124:	ldr	r8, [pc, #412]	; 3f2c8 <__assert_fail@plt+0x2e0bc>
   3f128:	mov	r4, r0
   3f12c:	mov	r5, r1
   3f130:	mov	r7, #0
   3f134:	mov	r3, r5
   3f138:	mov	r2, #0
   3f13c:	add	r1, sp, #4
   3f140:	mov	r0, r4
   3f144:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3f148:	ldr	r6, [sp, #4]
   3f14c:	add	r6, r4, r6
   3f150:	cmp	r5, r6
   3f154:	mov	r9, r0
   3f158:	beq	3f2ac <__assert_fail@plt+0x2e0a0>
   3f15c:	cmp	r0, #0
   3f160:	beq	3f2b0 <__assert_fail@plt+0x2e0a4>
   3f164:	mov	r3, r5
   3f168:	mov	r2, #0
   3f16c:	add	r1, sp, #4
   3f170:	mov	r0, r6
   3f174:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3f178:	ldr	r3, [sp, #4]
   3f17c:	add	r4, r6, r3
   3f180:	cmp	r5, r4
   3f184:	mov	sl, r0
   3f188:	beq	3f2ac <__assert_fail@plt+0x2e0a0>
   3f18c:	mov	r0, #24
   3f190:	ldrb	r6, [r6, r3]
   3f194:	bl	11020 <malloc@plt>
   3f198:	add	r4, r4, #1
   3f19c:	cmp	r0, #0
   3f1a0:	beq	3f214 <__assert_fail@plt+0x2e008>
   3f1a4:	ldr	r3, [r8, #1108]	; 0x454
   3f1a8:	str	r9, [r0]
   3f1ac:	cmp	r3, #0
   3f1b0:	str	sl, [r0, #4]
   3f1b4:	ldrne	r3, [r8, #1112]	; 0x458
   3f1b8:	strd	r6, [r0, #8]
   3f1bc:	str	r7, [r0, #16]
   3f1c0:	str	r7, [r0, #20]
   3f1c4:	streq	r0, [r8, #1108]	; 0x454
   3f1c8:	strne	r0, [r3, #20]
   3f1cc:	str	r0, [r8, #1112]	; 0x458
   3f1d0:	b	3f214 <__assert_fail@plt+0x2e008>
   3f1d4:	mov	r0, #16
   3f1d8:	bl	11020 <malloc@plt>
   3f1dc:	cmp	r0, #0
   3f1e0:	beq	3f20c <__assert_fail@plt+0x2e000>
   3f1e4:	ldr	r3, [r8, #1112]	; 0x458
   3f1e8:	stm	r0, {r6, r9}
   3f1ec:	ldr	r2, [r3, #12]
   3f1f0:	str	sl, [r0, #8]
   3f1f4:	cmp	r2, #0
   3f1f8:	str	r7, [r0, #12]
   3f1fc:	ldrne	r2, [r3, #16]
   3f200:	streq	r0, [r3, #12]
   3f204:	strne	r0, [r2, #12]
   3f208:	str	r0, [r3, #16]
   3f20c:	cmp	r6, #0
   3f210:	beq	3f2bc <__assert_fail@plt+0x2e0b0>
   3f214:	mov	r3, r5
   3f218:	mov	r0, r4
   3f21c:	mov	r2, #0
   3f220:	add	r1, sp, #4
   3f224:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3f228:	ldr	r3, [sp, #4]
   3f22c:	add	r4, r4, r3
   3f230:	cmp	r5, r4
   3f234:	mov	r6, r0
   3f238:	beq	3f298 <__assert_fail@plt+0x2e08c>
   3f23c:	mov	r3, r5
   3f240:	mov	r0, r4
   3f244:	mov	r2, #0
   3f248:	add	r1, sp, #4
   3f24c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3f250:	ldr	r3, [sp, #4]
   3f254:	add	r4, r4, r3
   3f258:	cmp	r5, r4
   3f25c:	mov	r9, r0
   3f260:	beq	3f298 <__assert_fail@plt+0x2e08c>
   3f264:	cmp	r0, #33	; 0x21
   3f268:	mvnne	sl, #0
   3f26c:	bne	3f1d4 <__assert_fail@plt+0x2dfc8>
   3f270:	mov	r3, r5
   3f274:	mov	r0, r4
   3f278:	mov	r2, #1
   3f27c:	add	r1, sp, #4
   3f280:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3f284:	ldr	r3, [sp, #4]
   3f288:	add	r4, r4, r3
   3f28c:	cmp	r5, r4
   3f290:	mov	sl, r0
   3f294:	bne	3f1d4 <__assert_fail@plt+0x2dfc8>
   3f298:	mov	r2, #5
   3f29c:	ldr	r1, [pc, #40]	; 3f2cc <__assert_fail@plt+0x2e0c0>
   3f2a0:	mov	r0, #0
   3f2a4:	bl	10f90 <dcgettext@plt>
   3f2a8:	bl	548ac <error@@Base>
   3f2ac:	mov	r6, #0
   3f2b0:	mov	r0, r6
   3f2b4:	add	sp, sp, #8
   3f2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3f2bc:	cmp	r5, r4
   3f2c0:	bhi	3f134 <__assert_fail@plt+0x2df28>
   3f2c4:	b	3f298 <__assert_fail@plt+0x2e08c>
   3f2c8:	ldrdeq	ip, [r9], -r0
   3f2cc:	andeq	lr, r7, r8, lsr #31
   3f2d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f2d4:	sub	sp, sp, #20
   3f2d8:	ldr	ip, [r0, #16]
   3f2dc:	ldr	r3, [r0, #32]
   3f2e0:	str	r0, [sp, #12]
   3f2e4:	add	r1, r0, #12
   3f2e8:	add	r3, ip, r3
   3f2ec:	add	r0, r0, #8
   3f2f0:	str	ip, [sp, #4]
   3f2f4:	str	r3, [sp, #8]
   3f2f8:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   3f2fc:	ldr	fp, [pc, #388]	; 3f488 <__assert_fail@plt+0x2e27c>
   3f300:	ldr	r5, [pc, #388]	; 3f48c <__assert_fail@plt+0x2e280>
   3f304:	ldr	r4, [pc, #388]	; 3f490 <__assert_fail@plt+0x2e284>
   3f308:	bl	3caa0 <__assert_fail@plt+0x2b894>
   3f30c:	ldr	r6, [fp, #1108]	; 0x454
   3f310:	cmp	r6, #0
   3f314:	bne	3f35c <__assert_fail@plt+0x2e150>
   3f318:	ldr	r8, [sp, #4]
   3f31c:	ldr	r1, [sp, #8]
   3f320:	mov	r0, r8
   3f324:	bl	3f114 <__assert_fail@plt+0x2df08>
   3f328:	ldr	r3, [fp, #1108]	; 0x454
   3f32c:	cmp	r3, #0
   3f330:	mov	r7, r0
   3f334:	streq	r0, [sp, #4]
   3f338:	bne	3f454 <__assert_fail@plt+0x2e248>
   3f33c:	ldr	r3, [sp, #4]
   3f340:	cmp	r3, #0
   3f344:	bne	3f308 <__assert_fail@plt+0x2e0fc>
   3f348:	mov	r0, #10
   3f34c:	bl	110c8 <putchar@plt>
   3f350:	mov	r0, #1
   3f354:	add	sp, sp, #20
   3f358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f35c:	mov	r2, #5
   3f360:	ldr	r1, [pc, #300]	; 3f494 <__assert_fail@plt+0x2e288>
   3f364:	mov	r0, #0
   3f368:	bl	10f90 <dcgettext@plt>
   3f36c:	ldr	r3, [sp, #12]
   3f370:	ldr	r1, [r3, #16]
   3f374:	ldr	r3, [sp, #4]
   3f378:	sub	r1, r3, r1
   3f37c:	bl	10f24 <printf@plt>
   3f380:	ldr	r6, [fp, #1108]	; 0x454
   3f384:	cmp	r6, #0
   3f388:	beq	3f348 <__assert_fail@plt+0x2e13c>
   3f38c:	mov	r3, #0
   3f390:	str	r3, [sp, #4]
   3f394:	ldr	sl, [pc, #252]	; 3f498 <__assert_fail@plt+0x2e28c>
   3f398:	ldr	r9, [pc, #252]	; 3f49c <__assert_fail@plt+0x2e290>
   3f39c:	ldr	r0, [r6, #4]
   3f3a0:	ldr	r7, [r6]
   3f3a4:	bl	3dee4 <__assert_fail@plt+0x2ccd8>
   3f3a8:	mov	r2, #5
   3f3ac:	mov	r8, r0
   3f3b0:	ldr	r0, [r6, #8]
   3f3b4:	cmp	r0, #0
   3f3b8:	movne	r0, #0
   3f3bc:	ldrne	r1, [pc, #220]	; 3f4a0 <__assert_fail@plt+0x2e294>
   3f3c0:	ldreq	r1, [pc, #220]	; 3f4a4 <__assert_fail@plt+0x2e298>
   3f3c4:	bl	10f90 <dcgettext@plt>
   3f3c8:	mov	r1, r7
   3f3cc:	mov	r2, r8
   3f3d0:	mov	r3, r0
   3f3d4:	mov	r0, sl
   3f3d8:	bl	10f24 <printf@plt>
   3f3dc:	ldr	r7, [r6, #12]
   3f3e0:	cmp	r7, #0
   3f3e4:	bne	3f404 <__assert_fail@plt+0x2e1f8>
   3f3e8:	b	3f444 <__assert_fail@plt+0x2e238>
   3f3ec:	ldr	r1, [r5]
   3f3f0:	mov	r0, #10
   3f3f4:	bl	11158 <putc@plt>
   3f3f8:	ldr	r7, [r7, #12]
   3f3fc:	cmp	r7, #0
   3f400:	beq	3f444 <__assert_fail@plt+0x2e238>
   3f404:	ldr	r0, [r7]
   3f408:	bl	3df50 <__assert_fail@plt+0x2cd44>
   3f40c:	mov	r8, r0
   3f410:	ldr	r0, [r7, #4]
   3f414:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   3f418:	mov	r1, r8
   3f41c:	mov	r2, r0
   3f420:	mov	r0, r4
   3f424:	bl	10f24 <printf@plt>
   3f428:	ldr	r3, [r7, #4]
   3f42c:	cmp	r3, #33	; 0x21
   3f430:	bne	3f3ec <__assert_fail@plt+0x2e1e0>
   3f434:	ldr	r1, [r7, #8]
   3f438:	mov	r0, r9
   3f43c:	bl	10f24 <printf@plt>
   3f440:	b	3f3ec <__assert_fail@plt+0x2e1e0>
   3f444:	ldr	r6, [r6, #20]
   3f448:	cmp	r6, #0
   3f44c:	bne	3f39c <__assert_fail@plt+0x2e190>
   3f450:	b	3f33c <__assert_fail@plt+0x2e130>
   3f454:	mov	r0, r6
   3f458:	mov	r2, #5
   3f45c:	ldr	r1, [pc, #48]	; 3f494 <__assert_fail@plt+0x2e288>
   3f460:	bl	10f90 <dcgettext@plt>
   3f464:	ldr	r3, [sp, #12]
   3f468:	ldr	r1, [r3, #16]
   3f46c:	sub	r1, r8, r1
   3f470:	bl	10f24 <printf@plt>
   3f474:	ldr	r6, [fp, #1108]	; 0x454
   3f478:	str	r7, [sp, #4]
   3f47c:	cmp	r6, #0
   3f480:	bne	3f394 <__assert_fail@plt+0x2e188>
   3f484:	b	3f33c <__assert_fail@plt+0x2e130>
   3f488:	ldrdeq	ip, [r9], -r0
   3f48c:	andeq	sl, r9, ip, lsr #8
   3f490:	andeq	pc, r7, r0, lsr #32
   3f494:	ldrdeq	lr, [r7], -r4
   3f498:	andeq	pc, r7, r8
   3f49c:	andeq	pc, r7, r4, ror #8
   3f4a0:	andeq	lr, r7, ip, ror #31
   3f4a4:	strdeq	lr, [r7], -ip
   3f4a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f4ac:	sub	sp, sp, #60	; 0x3c
   3f4b0:	ldr	r5, [pc, #4020]	; 4046c <__assert_fail@plt+0x2f260>
   3f4b4:	ldr	r4, [sp, #96]	; 0x60
   3f4b8:	ldr	sl, [sp, #104]	; 0x68
   3f4bc:	strd	r2, [sp, #32]
   3f4c0:	mov	r7, r1
   3f4c4:	ldr	r3, [sp, #108]	; 0x6c
   3f4c8:	add	r4, r0, r4
   3f4cc:	mov	r6, #0
   3f4d0:	str	r3, [sp, #28]
   3f4d4:	cmp	r4, r0
   3f4d8:	bls	3f904 <__assert_fail@plt+0x2e6f8>
   3f4dc:	add	ip, r0, #1
   3f4e0:	str	ip, [sp, #44]	; 0x2c
   3f4e4:	ldrb	fp, [r0]
   3f4e8:	sub	r3, fp, #3
   3f4ec:	cmp	r3, #249	; 0xf9
   3f4f0:	ldrls	pc, [pc, r3, lsl #2]
   3f4f4:	b	3f8e0 <__assert_fail@plt+0x2e6d4>
   3f4f8:	andeq	pc, r3, r4, ror r9	; <UNPREDICTABLE>
   3f4fc:	andeq	pc, r3, r0, ror #17
   3f500:	andeq	pc, r3, r0, ror #17
   3f504:	andeq	pc, r3, ip, asr #19
   3f508:	andeq	pc, r3, r0, ror #17
   3f50c:	ldrdeq	pc, [r3], -ip
   3f510:	andeq	pc, r3, ip, lsl #20
   3f514:	andeq	pc, r3, r0, lsr fp	; <UNPREDICTABLE>
   3f518:	andeq	pc, r3, r0, ror #22
   3f51c:	andeq	pc, r3, r8, lsr #23
   3f520:	ldrdeq	pc, [r3], -r8
   3f524:	andeq	pc, r3, r4, asr sl	; <UNPREDICTABLE>
   3f528:	andeq	pc, r3, r0, ror ip	; <UNPREDICTABLE>
   3f52c:	andeq	pc, r3, ip, lsr #21
   3f530:	strdeq	pc, [r3], -r8
   3f534:	andeq	pc, r3, r0, lsr #24
   3f538:	andeq	pc, r3, r8, ror #25
   3f53c:	andeq	pc, r3, r0, lsr ip	; <UNPREDICTABLE>
   3f540:	andeq	pc, r3, r0, asr #24
   3f544:	strdeq	pc, [r3], -r8
   3f548:	andeq	pc, r3, r8, lsl #26
   3f54c:	andeq	pc, r3, r8, lsl sp	; <UNPREDICTABLE>
   3f550:	andeq	pc, r3, r8, lsr #26
   3f554:	andeq	pc, r3, r8, lsr sp	; <UNPREDICTABLE>
   3f558:	andeq	pc, r3, r8, asr #26
   3f55c:	andeq	pc, r3, r8, asr sp	; <UNPREDICTABLE>
   3f560:	andeq	pc, r3, r8, ror #26
   3f564:	andeq	pc, r3, r8, ror sp	; <UNPREDICTABLE>
   3f568:	andeq	pc, r3, r8, lsl #27
   3f56c:	muleq	r3, r8, sp
   3f570:	andeq	pc, r3, r8, lsr #27
   3f574:			; <UNDEFINED> instruction: 0x0003fdb8
   3f578:	andeq	pc, r3, r8, asr #27
   3f57c:	andeq	pc, r3, r0, lsl #28
   3f580:	andeq	pc, r3, r0, lsl lr	; <UNPREDICTABLE>
   3f584:	andeq	pc, r3, r0, lsr #28
   3f588:	andeq	pc, r3, r0, lsr lr	; <UNPREDICTABLE>
   3f58c:	andeq	pc, r3, r0, asr #28
   3f590:	andeq	pc, r3, r8, lsl #29
   3f594:	muleq	r3, r8, lr
   3f598:	andeq	pc, r3, r8, lsr #29
   3f59c:			; <UNDEFINED> instruction: 0x0003feb8
   3f5a0:	andeq	pc, r3, r8, asr #29
   3f5a4:	ldrdeq	pc, [r3], -r8
   3f5a8:	andeq	pc, r3, r8, ror #29
   3f5ac:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5b0:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5b4:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5b8:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5bc:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5c0:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5c4:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5c8:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5cc:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5d0:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5d4:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5d8:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5dc:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5e0:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5e4:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5e8:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5ec:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5f0:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5f4:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5f8:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f5fc:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f600:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f604:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f608:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f60c:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f610:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f614:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f618:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f61c:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f620:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f624:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f628:	andeq	pc, r3, r0, lsr pc	; <UNPREDICTABLE>
   3f62c:	andeq	pc, r3, r4, asr #30
   3f630:	andeq	pc, r3, r4, asr #30
   3f634:	andeq	pc, r3, r4, asr #30
   3f638:	andeq	pc, r3, r4, asr #30
   3f63c:	andeq	pc, r3, r4, asr #30
   3f640:	andeq	pc, r3, r4, asr #30
   3f644:	andeq	pc, r3, r4, asr #30
   3f648:	andeq	pc, r3, r4, asr #30
   3f64c:	andeq	pc, r3, r4, asr #30
   3f650:	andeq	pc, r3, r4, asr #30
   3f654:	andeq	pc, r3, r4, asr #30
   3f658:	andeq	pc, r3, r4, asr #30
   3f65c:	andeq	pc, r3, r4, asr #30
   3f660:	andeq	pc, r3, r4, asr #30
   3f664:	andeq	pc, r3, r4, asr #30
   3f668:	andeq	pc, r3, r4, asr #30
   3f66c:	andeq	pc, r3, r4, asr #30
   3f670:	andeq	pc, r3, r4, asr #30
   3f674:	andeq	pc, r3, r4, asr #30
   3f678:	andeq	pc, r3, r4, asr #30
   3f67c:	andeq	pc, r3, r4, asr #30
   3f680:	andeq	pc, r3, r4, asr #30
   3f684:	andeq	pc, r3, r4, asr #30
   3f688:	andeq	pc, r3, r4, asr #30
   3f68c:	andeq	pc, r3, r4, asr #30
   3f690:	andeq	pc, r3, r4, asr #30
   3f694:	andeq	pc, r3, r4, asr #30
   3f698:	andeq	pc, r3, r4, asr #30
   3f69c:	andeq	pc, r3, r4, asr #30
   3f6a0:	andeq	pc, r3, r4, asr #30
   3f6a4:	andeq	pc, r3, r4, asr #30
   3f6a8:	andeq	pc, r3, r4, asr #30
   3f6ac:	andeq	pc, r3, ip, ror #30
   3f6b0:	andeq	pc, r3, ip, ror #30
   3f6b4:	andeq	pc, r3, ip, ror #30
   3f6b8:	andeq	pc, r3, ip, ror #30
   3f6bc:	andeq	pc, r3, ip, ror #30
   3f6c0:	andeq	pc, r3, ip, ror #30
   3f6c4:	andeq	pc, r3, ip, ror #30
   3f6c8:	andeq	pc, r3, ip, ror #30
   3f6cc:	andeq	pc, r3, ip, ror #30
   3f6d0:	andeq	pc, r3, ip, ror #30
   3f6d4:	andeq	pc, r3, ip, ror #30
   3f6d8:	andeq	pc, r3, ip, ror #30
   3f6dc:	andeq	pc, r3, ip, ror #30
   3f6e0:	andeq	pc, r3, ip, ror #30
   3f6e4:	andeq	pc, r3, ip, ror #30
   3f6e8:	andeq	pc, r3, ip, ror #30
   3f6ec:	andeq	pc, r3, ip, ror #30
   3f6f0:	andeq	pc, r3, ip, ror #30
   3f6f4:	andeq	pc, r3, ip, ror #30
   3f6f8:	andeq	pc, r3, ip, ror #30
   3f6fc:	andeq	pc, r3, ip, ror #30
   3f700:	andeq	pc, r3, ip, ror #30
   3f704:	andeq	pc, r3, ip, ror #30
   3f708:	andeq	pc, r3, ip, ror #30
   3f70c:	andeq	pc, r3, ip, ror #30
   3f710:	andeq	pc, r3, ip, ror #30
   3f714:	andeq	pc, r3, ip, ror #30
   3f718:	andeq	pc, r3, ip, ror #30
   3f71c:	andeq	pc, r3, ip, ror #30
   3f720:	andeq	pc, r3, ip, ror #30
   3f724:	andeq	pc, r3, ip, ror #30
   3f728:	andeq	pc, r3, ip, ror #30
   3f72c:	ldrdeq	pc, [r3], -r4
   3f730:	andeq	r0, r4, ip, lsr r0
   3f734:	andeq	r0, r4, r8, ror r0
   3f738:	andeq	r0, r4, r8, lsl #2
   3f73c:	andeq	r0, r4, r0, asr #2
   3f740:	andeq	r0, r4, r0, ror r1
   3f744:	andeq	r0, r4, r0, lsr #3
   3f748:			; <UNDEFINED> instruction: 0x000401b0
   3f74c:	andeq	r0, r4, r0, asr #3
   3f750:	andeq	r0, r4, r0, lsl r2
   3f754:	andeq	r0, r4, r0, ror #4
   3f758:	andeq	r0, r4, ip, lsl #8
   3f75c:	andeq	r0, r4, ip, lsl r4
   3f760:	andeq	r0, r4, r0, ror #20
   3f764:	andeq	r0, r4, ip, lsl #22
   3f768:	andeq	r0, r4, r4, asr #16
   3f76c:	andeq	r0, r4, r4, asr r8
   3f770:	andeq	pc, r3, r0, ror #17
   3f774:	andeq	pc, r3, r0, ror #17
   3f778:	andeq	r0, r4, ip, lsl #18
   3f77c:			; <UNDEFINED> instruction: 0x000409bc
   3f780:	andeq	r0, r4, r0, ror #5
   3f784:	andeq	r0, r4, r8, lsr #7
   3f788:	andeq	pc, r3, r0, ror #17
   3f78c:	andeq	r0, r4, ip, ror r7
   3f790:	strdeq	r0, [r4], -r8
   3f794:	andeq	pc, r3, r0, ror #17
   3f798:	andeq	pc, r3, r0, ror #17
   3f79c:	andeq	pc, r3, r0, ror #17
   3f7a0:	andeq	pc, r3, r0, ror #17
   3f7a4:	andeq	pc, r3, r0, ror #17
   3f7a8:	andeq	pc, r3, r0, ror #17
   3f7ac:	andeq	pc, r3, r0, ror #17
   3f7b0:	andeq	pc, r3, r0, ror #17
   3f7b4:	andeq	pc, r3, r0, ror #17
   3f7b8:	andeq	pc, r3, r0, ror #17
   3f7bc:	andeq	pc, r3, r0, ror #17
   3f7c0:	andeq	pc, r3, r0, ror #17
   3f7c4:	andeq	pc, r3, r0, ror #17
   3f7c8:	andeq	pc, r3, r0, ror #17
   3f7cc:	andeq	pc, r3, r0, ror #17
   3f7d0:	andeq	pc, r3, r0, ror #17
   3f7d4:	andeq	pc, r3, r0, ror #17
   3f7d8:	andeq	pc, r3, r0, ror #17
   3f7dc:	andeq	pc, r3, r0, ror #17
   3f7e0:	andeq	pc, r3, r0, ror #17
   3f7e4:	andeq	pc, r3, r0, ror #17
   3f7e8:	andeq	pc, r3, r0, ror #17
   3f7ec:	andeq	pc, r3, r0, ror #17
   3f7f0:	andeq	pc, r3, r0, ror #17
   3f7f4:	andeq	pc, r3, r0, ror #17
   3f7f8:	andeq	pc, r3, r0, ror #17
   3f7fc:	andeq	pc, r3, r0, ror #17
   3f800:	andeq	pc, r3, r0, ror #17
   3f804:	andeq	pc, r3, r0, ror #17
   3f808:	andeq	pc, r3, r0, ror #17
   3f80c:	andeq	pc, r3, r0, ror #17
   3f810:	andeq	pc, r3, r0, ror #17
   3f814:	andeq	pc, r3, r0, ror #17
   3f818:	andeq	pc, r3, r0, ror #17
   3f81c:	andeq	pc, r3, r0, ror #17
   3f820:	andeq	pc, r3, r0, ror #17
   3f824:	andeq	pc, r3, r0, ror #17
   3f828:	andeq	pc, r3, r0, ror #17
   3f82c:	andeq	pc, r3, r0, ror #17
   3f830:	andeq	pc, r3, r0, ror #17
   3f834:	andeq	pc, r3, r0, ror #17
   3f838:	andeq	pc, r3, r0, ror #17
   3f83c:	andeq	pc, r3, r0, ror #17
   3f840:	andeq	pc, r3, r0, ror #17
   3f844:	andeq	pc, r3, r0, ror #17
   3f848:	andeq	pc, r3, r0, ror #17
   3f84c:	andeq	pc, r3, r0, ror #17
   3f850:	andeq	pc, r3, r0, ror #17
   3f854:	andeq	pc, r3, r0, ror #17
   3f858:	andeq	pc, r3, r0, ror #17
   3f85c:	andeq	pc, r3, r0, ror #17
   3f860:	andeq	pc, r3, r0, ror #17
   3f864:	andeq	pc, r3, r0, ror #17
   3f868:	andeq	pc, r3, r0, ror #17
   3f86c:	andeq	r0, r4, r0, lsr r7
   3f870:	andeq	r0, r4, ip, asr #14
   3f874:	andeq	r0, r4, ip, asr r7
   3f878:	andeq	r0, r4, ip, ror #14
   3f87c:	andeq	r0, r4, ip, lsr #8
   3f880:	andeq	r0, r4, ip, lsr r4
   3f884:	andeq	r0, r4, ip, asr #8
   3f888:	andeq	pc, r3, r0, ror #17
   3f88c:	andeq	pc, r3, r0, ror #17
   3f890:	andeq	pc, r3, r0, ror #17
   3f894:	andeq	pc, r3, r0, ror #17
   3f898:	andeq	pc, r3, r0, ror #17
   3f89c:	andeq	pc, r3, r0, ror #17
   3f8a0:	andeq	pc, r3, r0, ror #17
   3f8a4:	andeq	pc, r3, r0, ror #17
   3f8a8:	andeq	pc, r3, r0, ror #17
   3f8ac:	andeq	r0, r4, ip, asr r4
   3f8b0:	andeq	r0, r4, r8, lsr #12
   3f8b4:	andeq	r0, r4, r4, asr r8
   3f8b8:	andeq	r0, r4, ip, lsl #18
   3f8bc:			; <UNDEFINED> instruction: 0x000409bc
   3f8c0:	andeq	r0, r4, r0, ror #5
   3f8c4:	andeq	r0, r4, r8, lsr #7
   3f8c8:	andeq	r0, r4, ip, ror r7
   3f8cc:	andeq	r0, r4, r8, lsl #13
   3f8d0:	strdeq	r0, [r4], -r8
   3f8d4:	muleq	r4, r8, r6
   3f8d8:	andeq	r0, r4, r0, ror #13
   3f8dc:	andeq	pc, r3, r0, lsl r9	; <UNPREDICTABLE>
   3f8e0:	sub	r3, fp, #224	; 0xe0
   3f8e4:	cmp	r3, #31
   3f8e8:	mov	r2, #5
   3f8ec:	ldrls	r1, [pc, #2940]	; 40470 <__assert_fail@plt+0x2f264>
   3f8f0:	ldrhi	r1, [pc, #2940]	; 40474 <__assert_fail@plt+0x2f268>
   3f8f4:	mov	r0, #0
   3f8f8:	bl	10f90 <dcgettext@plt>
   3f8fc:	mov	r1, fp
   3f900:	bl	10f24 <printf@plt>
   3f904:	mov	r0, r6
   3f908:	add	sp, sp, #60	; 0x3c
   3f90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f910:	mov	r0, ip
   3f914:	mov	r3, r4
   3f918:	mov	r2, #0
   3f91c:	add	r1, sp, #52	; 0x34
   3f920:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3f924:	ldr	r3, [sp, #44]	; 0x2c
   3f928:	ldr	ip, [sp, #52]	; 0x34
   3f92c:	mov	r2, #0
   3f930:	add	r3, r3, ip
   3f934:	str	r2, [sp]
   3f938:	str	r3, [sp, #44]	; 0x2c
   3f93c:	mov	r2, r0
   3f940:	mov	r3, r1
   3f944:	ldr	r0, [pc, #3236]	; 405f0 <__assert_fail@plt+0x2f3e4>
   3f948:	bl	3c744 <__assert_fail@plt+0x2b538>
   3f94c:	mov	r1, r0
   3f950:	ldr	r0, [pc, #2848]	; 40478 <__assert_fail@plt+0x2f26c>
   3f954:	bl	10f24 <printf@plt>
   3f958:	ldr	r0, [sp, #44]	; 0x2c
   3f95c:	cmp	r4, r0
   3f960:	bls	3f4d4 <__assert_fail@plt+0x2e2c8>
   3f964:	mov	r0, r5
   3f968:	bl	10f24 <printf@plt>
   3f96c:	ldr	r0, [sp, #44]	; 0x2c
   3f970:	b	3f4d4 <__assert_fail@plt+0x2e2c8>
   3f974:	cmp	r7, #8
   3f978:	bhi	40d4c <__assert_fail@plt+0x2fb40>
   3f97c:	add	r3, ip, r7
   3f980:	cmp	r4, r3
   3f984:	movhi	r1, r7
   3f988:	bhi	40bb8 <__assert_fail@plt+0x2f9ac>
   3f98c:	cmp	r4, ip
   3f990:	bhi	40bb4 <__assert_fail@plt+0x2f9a8>
   3f994:	mov	r2, #0
   3f998:	mov	r3, #0
   3f99c:	ldr	r1, [sp, #44]	; 0x2c
   3f9a0:	mov	r0, #0
   3f9a4:	add	r1, r1, r7
   3f9a8:	str	r0, [sp]
   3f9ac:	ldr	r0, [pc, #3132]	; 405f0 <__assert_fail@plt+0x2f3e4>
   3f9b0:	str	r1, [sp, #44]	; 0x2c
   3f9b4:	bl	3c744 <__assert_fail@plt+0x2b538>
   3f9b8:	mov	r1, r0
   3f9bc:	ldr	r0, [pc, #2744]	; 4047c <__assert_fail@plt+0x2f270>
   3f9c0:	bl	10f24 <printf@plt>
   3f9c4:	ldr	r0, [sp, #44]	; 0x2c
   3f9c8:	b	3f95c <__assert_fail@plt+0x2e750>
   3f9cc:	ldr	r0, [pc, #2732]	; 40480 <__assert_fail@plt+0x2f274>
   3f9d0:	bl	10f24 <printf@plt>
   3f9d4:	ldr	r0, [sp, #44]	; 0x2c
   3f9d8:	b	3f95c <__assert_fail@plt+0x2e750>
   3f9dc:	add	r0, r0, #2
   3f9e0:	cmp	r4, r0
   3f9e4:	bhi	40c88 <__assert_fail@plt+0x2fa7c>
   3f9e8:	cmp	ip, r4
   3f9ec:	bcc	40f1c <__assert_fail@plt+0x2fd10>
   3f9f0:	mov	r1, #0
   3f9f4:	add	ip, ip, #1
   3f9f8:	ldr	r0, [pc, #2692]	; 40484 <__assert_fail@plt+0x2f278>
   3f9fc:	str	ip, [sp, #44]	; 0x2c
   3fa00:	bl	10f24 <printf@plt>
   3fa04:	ldr	r0, [sp, #44]	; 0x2c
   3fa08:	b	3f95c <__assert_fail@plt+0x2e750>
   3fa0c:	add	r0, r0, #2
   3fa10:	cmp	r4, r0
   3fa14:	bhi	40dac <__assert_fail@plt+0x2fba0>
   3fa18:	cmp	ip, r4
   3fa1c:	movcs	r1, #0
   3fa20:	bcs	3fa3c <__assert_fail@plt+0x2e830>
   3fa24:	subs	r1, r4, ip
   3fa28:	beq	3fa3c <__assert_fail@plt+0x2e830>
   3fa2c:	mov	r0, ip
   3fa30:	bl	550b8 <warn@@Base+0x2e8>
   3fa34:	ldr	ip, [sp, #44]	; 0x2c
   3fa38:	mov	r1, r0
   3fa3c:	add	ip, ip, #1
   3fa40:	ldr	r0, [pc, #2624]	; 40488 <__assert_fail@plt+0x2f27c>
   3fa44:	str	ip, [sp, #44]	; 0x2c
   3fa48:	bl	10f24 <printf@plt>
   3fa4c:	ldr	r0, [sp, #44]	; 0x2c
   3fa50:	b	3f95c <__assert_fail@plt+0x2e750>
   3fa54:	add	r0, r0, #5
   3fa58:	cmp	r4, r0
   3fa5c:	bhi	40c40 <__assert_fail@plt+0x2fa34>
   3fa60:	cmp	ip, r4
   3fa64:	bcc	40f08 <__assert_fail@plt+0x2fcfc>
   3fa68:	mov	r1, #0
   3fa6c:	add	ip, ip, #4
   3fa70:	ldr	r0, [pc, #2580]	; 4048c <__assert_fail@plt+0x2f280>
   3fa74:	str	ip, [sp, #44]	; 0x2c
   3fa78:	bl	10f24 <printf@plt>
   3fa7c:	ldr	r0, [sp, #44]	; 0x2c
   3fa80:	add	r3, r0, #4
   3fa84:	cmp	r3, r4
   3fa88:	bcc	40c20 <__assert_fail@plt+0x2fa14>
   3fa8c:	cmp	r0, r4
   3fa90:	bcc	40e54 <__assert_fail@plt+0x2fc48>
   3fa94:	mov	r1, #0
   3fa98:	ldr	r0, [pc, #2544]	; 40490 <__assert_fail@plt+0x2f284>
   3fa9c:	str	r3, [sp, #44]	; 0x2c
   3faa0:	bl	10f24 <printf@plt>
   3faa4:	ldr	r0, [sp, #44]	; 0x2c
   3faa8:	b	3f95c <__assert_fail@plt+0x2e750>
   3faac:	mov	r0, ip
   3fab0:	mov	r3, r4
   3fab4:	mov	r2, #0
   3fab8:	add	r1, sp, #52	; 0x34
   3fabc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3fac0:	mov	r3, #0
   3fac4:	str	r3, [sp]
   3fac8:	mov	r2, r0
   3facc:	mov	r3, r1
   3fad0:	ldr	r0, [pc, #2860]	; 40604 <__assert_fail@plt+0x2f3f8>
   3fad4:	bl	3c744 <__assert_fail@plt+0x2b538>
   3fad8:	mov	r1, r0
   3fadc:	ldr	r0, [pc, #2480]	; 40494 <__assert_fail@plt+0x2f288>
   3fae0:	bl	10f24 <printf@plt>
   3fae4:	ldr	r0, [sp, #44]	; 0x2c
   3fae8:	ldr	r8, [sp, #52]	; 0x34
   3faec:	add	r0, r0, r8
   3faf0:	str	r0, [sp, #44]	; 0x2c
   3faf4:	b	3f95c <__assert_fail@plt+0x2e750>
   3faf8:	mov	r0, ip
   3fafc:	mov	r3, r4
   3fb00:	mov	r2, #1
   3fb04:	add	r1, sp, #52	; 0x34
   3fb08:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3fb0c:	mov	r3, #0
   3fb10:	str	r3, [sp]
   3fb14:	mov	r2, r0
   3fb18:	mov	r3, r1
   3fb1c:	ldr	r0, [pc, #2732]	; 405d0 <__assert_fail@plt+0x2f3c4>
   3fb20:	bl	3c744 <__assert_fail@plt+0x2b538>
   3fb24:	mov	r1, r0
   3fb28:	ldr	r0, [pc, #2408]	; 40498 <__assert_fail@plt+0x2f28c>
   3fb2c:	b	3fae0 <__assert_fail@plt+0x2e8d4>
   3fb30:	add	r0, r0, #3
   3fb34:	cmp	r4, r0
   3fb38:	bhi	40ca8 <__assert_fail@plt+0x2fa9c>
   3fb3c:	cmp	ip, r4
   3fb40:	bcc	40ef4 <__assert_fail@plt+0x2fce8>
   3fb44:	mov	r1, #0
   3fb48:	add	ip, ip, #2
   3fb4c:	ldr	r0, [pc, #2376]	; 4049c <__assert_fail@plt+0x2f290>
   3fb50:	str	ip, [sp, #44]	; 0x2c
   3fb54:	bl	10f24 <printf@plt>
   3fb58:	ldr	r0, [sp, #44]	; 0x2c
   3fb5c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fb60:	add	r0, r0, #3
   3fb64:	cmp	r4, r0
   3fb68:	bhi	40db4 <__assert_fail@plt+0x2fba8>
   3fb6c:	cmp	ip, r4
   3fb70:	movcs	r1, #0
   3fb74:	bcs	3fb90 <__assert_fail@plt+0x2e984>
   3fb78:	subs	r1, r4, ip
   3fb7c:	beq	3fb90 <__assert_fail@plt+0x2e984>
   3fb80:	mov	r0, ip
   3fb84:	bl	550b8 <warn@@Base+0x2e8>
   3fb88:	ldr	ip, [sp, #44]	; 0x2c
   3fb8c:	mov	r1, r0
   3fb90:	add	ip, ip, #2
   3fb94:	ldr	r0, [pc, #2308]	; 404a0 <__assert_fail@plt+0x2f294>
   3fb98:	str	ip, [sp, #44]	; 0x2c
   3fb9c:	bl	10f24 <printf@plt>
   3fba0:	ldr	r0, [sp, #44]	; 0x2c
   3fba4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fba8:	add	r0, r0, #5
   3fbac:	cmp	r4, r0
   3fbb0:	bhi	40d2c <__assert_fail@plt+0x2fb20>
   3fbb4:	cmp	ip, r4
   3fbb8:	bcc	40ee0 <__assert_fail@plt+0x2fcd4>
   3fbbc:	mov	r1, #0
   3fbc0:	add	ip, ip, #4
   3fbc4:	ldr	r0, [pc, #2264]	; 404a4 <__assert_fail@plt+0x2f298>
   3fbc8:	str	ip, [sp, #44]	; 0x2c
   3fbcc:	bl	10f24 <printf@plt>
   3fbd0:	ldr	r0, [sp, #44]	; 0x2c
   3fbd4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fbd8:	add	r0, r0, #5
   3fbdc:	cmp	r4, r0
   3fbe0:	bhi	40da4 <__assert_fail@plt+0x2fb98>
   3fbe4:	cmp	ip, r4
   3fbe8:	movcs	r1, #0
   3fbec:	bcs	3fc08 <__assert_fail@plt+0x2e9fc>
   3fbf0:	subs	r1, r4, ip
   3fbf4:	beq	3fc08 <__assert_fail@plt+0x2e9fc>
   3fbf8:	mov	r0, ip
   3fbfc:	bl	550b8 <warn@@Base+0x2e8>
   3fc00:	ldr	ip, [sp, #44]	; 0x2c
   3fc04:	mov	r1, r0
   3fc08:	add	ip, ip, #4
   3fc0c:	ldr	r0, [pc, #2196]	; 404a8 <__assert_fail@plt+0x2f29c>
   3fc10:	str	ip, [sp, #44]	; 0x2c
   3fc14:	bl	10f24 <printf@plt>
   3fc18:	ldr	r0, [sp, #44]	; 0x2c
   3fc1c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fc20:	ldr	r0, [pc, #2180]	; 404ac <__assert_fail@plt+0x2f2a0>
   3fc24:	bl	10f24 <printf@plt>
   3fc28:	ldr	r0, [sp, #44]	; 0x2c
   3fc2c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fc30:	ldr	r0, [pc, #2168]	; 404b0 <__assert_fail@plt+0x2f2a4>
   3fc34:	bl	10f24 <printf@plt>
   3fc38:	ldr	r0, [sp, #44]	; 0x2c
   3fc3c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fc40:	add	r0, r0, #2
   3fc44:	cmp	r4, r0
   3fc48:	bhi	40d0c <__assert_fail@plt+0x2fb00>
   3fc4c:	cmp	ip, r4
   3fc50:	bcc	40ecc <__assert_fail@plt+0x2fcc0>
   3fc54:	mov	r1, #0
   3fc58:	add	ip, ip, #1
   3fc5c:	ldr	r0, [pc, #2128]	; 404b4 <__assert_fail@plt+0x2f2a8>
   3fc60:	str	ip, [sp, #44]	; 0x2c
   3fc64:	bl	10f24 <printf@plt>
   3fc68:	ldr	r0, [sp, #44]	; 0x2c
   3fc6c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fc70:	add	r0, r0, #5
   3fc74:	cmp	r4, r0
   3fc78:	bhi	40b9c <__assert_fail@plt+0x2f990>
   3fc7c:	cmp	ip, r4
   3fc80:	movcs	r1, #0
   3fc84:	bcs	3fc90 <__assert_fail@plt+0x2ea84>
   3fc88:	subs	r1, r4, ip
   3fc8c:	bne	40ba0 <__assert_fail@plt+0x2f994>
   3fc90:	add	ip, ip, #4
   3fc94:	ldr	r0, [pc, #2076]	; 404b8 <__assert_fail@plt+0x2f2ac>
   3fc98:	str	ip, [sp, #44]	; 0x2c
   3fc9c:	bl	10f24 <printf@plt>
   3fca0:	ldr	r0, [sp, #44]	; 0x2c
   3fca4:	add	r3, r0, #4
   3fca8:	cmp	r3, r4
   3fcac:	bcc	40d8c <__assert_fail@plt+0x2fb80>
   3fcb0:	cmp	r0, r4
   3fcb4:	movcs	r1, #0
   3fcb8:	bcs	3fcd4 <__assert_fail@plt+0x2eac8>
   3fcbc:	subs	r1, r4, r0
   3fcc0:	beq	3fcd4 <__assert_fail@plt+0x2eac8>
   3fcc4:	bl	550b8 <warn@@Base+0x2e8>
   3fcc8:	ldr	r3, [sp, #44]	; 0x2c
   3fccc:	add	r3, r3, #4
   3fcd0:	mov	r1, r0
   3fcd4:	ldr	r0, [pc, #2016]	; 404bc <__assert_fail@plt+0x2f2b0>
   3fcd8:	str	r3, [sp, #44]	; 0x2c
   3fcdc:	bl	10f24 <printf@plt>
   3fce0:	ldr	r0, [sp, #44]	; 0x2c
   3fce4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fce8:	ldr	r0, [pc, #2000]	; 404c0 <__assert_fail@plt+0x2f2b4>
   3fcec:	bl	10f24 <printf@plt>
   3fcf0:	ldr	r0, [sp, #44]	; 0x2c
   3fcf4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fcf8:	ldr	r0, [pc, #1988]	; 404c4 <__assert_fail@plt+0x2f2b8>
   3fcfc:	bl	10f24 <printf@plt>
   3fd00:	ldr	r0, [sp, #44]	; 0x2c
   3fd04:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd08:	ldr	r0, [pc, #1976]	; 404c8 <__assert_fail@plt+0x2f2bc>
   3fd0c:	bl	10f24 <printf@plt>
   3fd10:	ldr	r0, [sp, #44]	; 0x2c
   3fd14:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd18:	ldr	r0, [pc, #1964]	; 404cc <__assert_fail@plt+0x2f2c0>
   3fd1c:	bl	10f24 <printf@plt>
   3fd20:	ldr	r0, [sp, #44]	; 0x2c
   3fd24:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd28:	ldr	r0, [pc, #1952]	; 404d0 <__assert_fail@plt+0x2f2c4>
   3fd2c:	bl	10f24 <printf@plt>
   3fd30:	ldr	r0, [sp, #44]	; 0x2c
   3fd34:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd38:	ldr	r0, [pc, #1940]	; 404d4 <__assert_fail@plt+0x2f2c8>
   3fd3c:	bl	10f24 <printf@plt>
   3fd40:	ldr	r0, [sp, #44]	; 0x2c
   3fd44:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd48:	ldr	r0, [pc, #1928]	; 404d8 <__assert_fail@plt+0x2f2cc>
   3fd4c:	bl	10f24 <printf@plt>
   3fd50:	ldr	r0, [sp, #44]	; 0x2c
   3fd54:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd58:	ldr	r0, [pc, #1916]	; 404dc <__assert_fail@plt+0x2f2d0>
   3fd5c:	bl	10f24 <printf@plt>
   3fd60:	ldr	r0, [sp, #44]	; 0x2c
   3fd64:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd68:	ldr	r0, [pc, #1904]	; 404e0 <__assert_fail@plt+0x2f2d4>
   3fd6c:	bl	10f24 <printf@plt>
   3fd70:	ldr	r0, [sp, #44]	; 0x2c
   3fd74:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd78:	ldr	r0, [pc, #1892]	; 404e4 <__assert_fail@plt+0x2f2d8>
   3fd7c:	bl	10f24 <printf@plt>
   3fd80:	ldr	r0, [sp, #44]	; 0x2c
   3fd84:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd88:	ldr	r0, [pc, #1880]	; 404e8 <__assert_fail@plt+0x2f2dc>
   3fd8c:	bl	10f24 <printf@plt>
   3fd90:	ldr	r0, [sp, #44]	; 0x2c
   3fd94:	b	3f95c <__assert_fail@plt+0x2e750>
   3fd98:	ldr	r0, [pc, #1868]	; 404ec <__assert_fail@plt+0x2f2e0>
   3fd9c:	bl	10f24 <printf@plt>
   3fda0:	ldr	r0, [sp, #44]	; 0x2c
   3fda4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fda8:	ldr	r0, [pc, #1856]	; 404f0 <__assert_fail@plt+0x2f2e4>
   3fdac:	bl	10f24 <printf@plt>
   3fdb0:	ldr	r0, [sp, #44]	; 0x2c
   3fdb4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fdb8:	ldr	r0, [pc, #1844]	; 404f4 <__assert_fail@plt+0x2f2e8>
   3fdbc:	bl	10f24 <printf@plt>
   3fdc0:	ldr	r0, [sp, #44]	; 0x2c
   3fdc4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fdc8:	mov	r0, ip
   3fdcc:	mov	r3, r4
   3fdd0:	mov	r2, #0
   3fdd4:	add	r1, sp, #52	; 0x34
   3fdd8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3fddc:	mov	r3, #0
   3fde0:	str	r3, [sp]
   3fde4:	mov	r2, r0
   3fde8:	mov	r3, r1
   3fdec:	ldr	r0, [pc, #2064]	; 40604 <__assert_fail@plt+0x2f3f8>
   3fdf0:	bl	3c744 <__assert_fail@plt+0x2b538>
   3fdf4:	mov	r1, r0
   3fdf8:	ldr	r0, [pc, #1784]	; 404f8 <__assert_fail@plt+0x2f2ec>
   3fdfc:	b	3fae0 <__assert_fail@plt+0x2e8d4>
   3fe00:	ldr	r0, [pc, #1780]	; 404fc <__assert_fail@plt+0x2f2f0>
   3fe04:	bl	10f24 <printf@plt>
   3fe08:	ldr	r0, [sp, #44]	; 0x2c
   3fe0c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fe10:	ldr	r0, [pc, #1768]	; 40500 <__assert_fail@plt+0x2f2f4>
   3fe14:	bl	10f24 <printf@plt>
   3fe18:	ldr	r0, [sp, #44]	; 0x2c
   3fe1c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fe20:	ldr	r0, [pc, #1756]	; 40504 <__assert_fail@plt+0x2f2f8>
   3fe24:	bl	10f24 <printf@plt>
   3fe28:	ldr	r0, [sp, #44]	; 0x2c
   3fe2c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fe30:	ldr	r0, [pc, #1744]	; 40508 <__assert_fail@plt+0x2f2fc>
   3fe34:	bl	10f24 <printf@plt>
   3fe38:	ldr	r0, [sp, #44]	; 0x2c
   3fe3c:	b	3f95c <__assert_fail@plt+0x2e750>
   3fe40:	add	r0, r0, #3
   3fe44:	cmp	r4, r0
   3fe48:	bhi	40d9c <__assert_fail@plt+0x2fb90>
   3fe4c:	cmp	ip, r4
   3fe50:	movcs	r1, #0
   3fe54:	bcs	3fe70 <__assert_fail@plt+0x2ec64>
   3fe58:	subs	r1, r4, ip
   3fe5c:	beq	3fe70 <__assert_fail@plt+0x2ec64>
   3fe60:	mov	r0, ip
   3fe64:	bl	550b8 <warn@@Base+0x2e8>
   3fe68:	ldr	ip, [sp, #44]	; 0x2c
   3fe6c:	mov	r1, r0
   3fe70:	add	ip, ip, #2
   3fe74:	ldr	r0, [pc, #1680]	; 4050c <__assert_fail@plt+0x2f300>
   3fe78:	str	ip, [sp, #44]	; 0x2c
   3fe7c:	bl	10f24 <printf@plt>
   3fe80:	ldr	r0, [sp, #44]	; 0x2c
   3fe84:	b	3f95c <__assert_fail@plt+0x2e750>
   3fe88:	ldr	r0, [pc, #1664]	; 40510 <__assert_fail@plt+0x2f304>
   3fe8c:	bl	10f24 <printf@plt>
   3fe90:	ldr	r0, [sp, #44]	; 0x2c
   3fe94:	b	3f95c <__assert_fail@plt+0x2e750>
   3fe98:	ldr	r0, [pc, #1652]	; 40514 <__assert_fail@plt+0x2f308>
   3fe9c:	bl	10f24 <printf@plt>
   3fea0:	ldr	r0, [sp, #44]	; 0x2c
   3fea4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fea8:	ldr	r0, [pc, #1640]	; 40518 <__assert_fail@plt+0x2f30c>
   3feac:	bl	10f24 <printf@plt>
   3feb0:	ldr	r0, [sp, #44]	; 0x2c
   3feb4:	b	3f95c <__assert_fail@plt+0x2e750>
   3feb8:	ldr	r0, [pc, #1628]	; 4051c <__assert_fail@plt+0x2f310>
   3febc:	bl	10f24 <printf@plt>
   3fec0:	ldr	r0, [sp, #44]	; 0x2c
   3fec4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fec8:	ldr	r0, [pc, #1616]	; 40520 <__assert_fail@plt+0x2f314>
   3fecc:	bl	10f24 <printf@plt>
   3fed0:	ldr	r0, [sp, #44]	; 0x2c
   3fed4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fed8:	ldr	r0, [pc, #1604]	; 40524 <__assert_fail@plt+0x2f318>
   3fedc:	bl	10f24 <printf@plt>
   3fee0:	ldr	r0, [sp, #44]	; 0x2c
   3fee4:	b	3f95c <__assert_fail@plt+0x2e750>
   3fee8:	add	r0, r0, #3
   3feec:	cmp	r4, r0
   3fef0:	bhi	40d94 <__assert_fail@plt+0x2fb88>
   3fef4:	cmp	ip, r4
   3fef8:	movcs	r1, #0
   3fefc:	bcs	3ff18 <__assert_fail@plt+0x2ed0c>
   3ff00:	subs	r1, r4, ip
   3ff04:	beq	3ff18 <__assert_fail@plt+0x2ed0c>
   3ff08:	mov	r0, ip
   3ff0c:	bl	550b8 <warn@@Base+0x2e8>
   3ff10:	ldr	ip, [sp, #44]	; 0x2c
   3ff14:	mov	r1, r0
   3ff18:	add	ip, ip, #2
   3ff1c:	ldr	r0, [pc, #1540]	; 40528 <__assert_fail@plt+0x2f31c>
   3ff20:	str	ip, [sp, #44]	; 0x2c
   3ff24:	bl	10f24 <printf@plt>
   3ff28:	ldr	r0, [sp, #44]	; 0x2c
   3ff2c:	b	3f95c <__assert_fail@plt+0x2e750>
   3ff30:	sub	r1, fp, #48	; 0x30
   3ff34:	ldr	r0, [pc, #1520]	; 4052c <__assert_fail@plt+0x2f320>
   3ff38:	bl	10f24 <printf@plt>
   3ff3c:	ldr	r0, [sp, #44]	; 0x2c
   3ff40:	b	3f95c <__assert_fail@plt+0x2e750>
   3ff44:	sub	fp, fp, #80	; 0x50
   3ff48:	mov	r1, #1
   3ff4c:	mov	r0, fp
   3ff50:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   3ff54:	mov	r1, fp
   3ff58:	mov	r2, r0
   3ff5c:	ldr	r0, [pc, #1484]	; 40530 <__assert_fail@plt+0x2f324>
   3ff60:	bl	10f24 <printf@plt>
   3ff64:	ldr	r0, [sp, #44]	; 0x2c
   3ff68:	b	3f95c <__assert_fail@plt+0x2e750>
   3ff6c:	sub	fp, fp, #112	; 0x70
   3ff70:	mov	r1, #1
   3ff74:	mov	r0, fp
   3ff78:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   3ff7c:	mov	r3, r4
   3ff80:	mov	r2, #1
   3ff84:	add	r1, sp, #52	; 0x34
   3ff88:	mov	r8, r0
   3ff8c:	ldr	r0, [sp, #44]	; 0x2c
   3ff90:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3ff94:	mov	r3, #0
   3ff98:	str	r3, [sp]
   3ff9c:	mov	r2, r0
   3ffa0:	mov	r3, r1
   3ffa4:	ldr	r0, [pc, #1572]	; 405d0 <__assert_fail@plt+0x2f3c4>
   3ffa8:	bl	3c744 <__assert_fail@plt+0x2b538>
   3ffac:	mov	r2, r8
   3ffb0:	mov	r1, fp
   3ffb4:	mov	r3, r0
   3ffb8:	ldr	r0, [pc, #1396]	; 40534 <__assert_fail@plt+0x2f328>
   3ffbc:	bl	10f24 <printf@plt>
   3ffc0:	ldr	r0, [sp, #44]	; 0x2c
   3ffc4:	ldr	r8, [sp, #52]	; 0x34
   3ffc8:	add	r0, r0, r8
   3ffcc:	str	r0, [sp, #44]	; 0x2c
   3ffd0:	b	3f95c <__assert_fail@plt+0x2e750>
   3ffd4:	mov	r0, ip
   3ffd8:	mov	r3, r4
   3ffdc:	mov	r2, #0
   3ffe0:	add	r1, sp, #52	; 0x34
   3ffe4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   3ffe8:	ldr	r3, [sp, #44]	; 0x2c
   3ffec:	mov	r2, #0
   3fff0:	str	r2, [sp]
   3fff4:	mov	r8, r0
   3fff8:	ldr	r0, [sp, #52]	; 0x34
   3fffc:	mov	r2, r8
   40000:	add	r3, r3, r0
   40004:	str	r3, [sp, #44]	; 0x2c
   40008:	ldr	r0, [pc, #1524]	; 40604 <__assert_fail@plt+0x2f3f8>
   4000c:	mov	r3, r1
   40010:	bl	3c744 <__assert_fail@plt+0x2b538>
   40014:	mov	r1, #1
   40018:	mov	r9, r0
   4001c:	mov	r0, r8
   40020:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   40024:	mov	r1, r9
   40028:	mov	r2, r0
   4002c:	ldr	r0, [pc, #1284]	; 40538 <__assert_fail@plt+0x2f32c>
   40030:	bl	10f24 <printf@plt>
   40034:	ldr	r0, [sp, #44]	; 0x2c
   40038:	b	3f95c <__assert_fail@plt+0x2e750>
   4003c:	mov	r0, ip
   40040:	mov	r3, r4
   40044:	mov	r2, #1
   40048:	add	r1, sp, #52	; 0x34
   4004c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   40050:	mov	r3, #0
   40054:	str	r3, [sp]
   40058:	mov	r6, #1
   4005c:	mov	r2, r0
   40060:	mov	r3, r1
   40064:	ldr	r0, [pc, #1380]	; 405d0 <__assert_fail@plt+0x2f3c4>
   40068:	bl	3c744 <__assert_fail@plt+0x2b538>
   4006c:	mov	r1, r0
   40070:	ldr	r0, [pc, #1220]	; 4053c <__assert_fail@plt+0x2f330>
   40074:	b	3fae0 <__assert_fail@plt+0x2e8d4>
   40078:	mov	r0, ip
   4007c:	mov	r3, r4
   40080:	mov	r2, #0
   40084:	add	r1, sp, #52	; 0x34
   40088:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4008c:	ldr	r3, [sp, #44]	; 0x2c
   40090:	ldr	r2, [sp, #52]	; 0x34
   40094:	mov	r8, #0
   40098:	add	r3, r3, r2
   4009c:	str	r3, [sp, #44]	; 0x2c
   400a0:	str	r8, [sp]
   400a4:	mov	r2, r0
   400a8:	mov	r3, r1
   400ac:	mov	r9, r0
   400b0:	ldr	r0, [pc, #1356]	; 40604 <__assert_fail@plt+0x2f3f8>
   400b4:	bl	3c744 <__assert_fail@plt+0x2b538>
   400b8:	mov	r1, #1
   400bc:	mov	fp, r0
   400c0:	mov	r0, r9
   400c4:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   400c8:	mov	r3, r4
   400cc:	mov	r2, #1
   400d0:	add	r1, sp, #52	; 0x34
   400d4:	mov	r9, r0
   400d8:	ldr	r0, [sp, #44]	; 0x2c
   400dc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   400e0:	str	r8, [sp]
   400e4:	mov	r2, r0
   400e8:	mov	r3, r1
   400ec:	ldr	r0, [pc, #1244]	; 405d0 <__assert_fail@plt+0x2f3c4>
   400f0:	bl	3c744 <__assert_fail@plt+0x2b538>
   400f4:	mov	r2, r9
   400f8:	mov	r1, fp
   400fc:	mov	r3, r0
   40100:	ldr	r0, [pc, #1080]	; 40540 <__assert_fail@plt+0x2f334>
   40104:	b	3ffbc <__assert_fail@plt+0x2edb0>
   40108:	mov	r0, ip
   4010c:	mov	r3, r4
   40110:	mov	r2, #0
   40114:	add	r1, sp, #52	; 0x34
   40118:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4011c:	mov	r3, #0
   40120:	str	r3, [sp]
   40124:	mov	r2, r0
   40128:	mov	r3, r1
   4012c:	ldr	r0, [pc, #1232]	; 40604 <__assert_fail@plt+0x2f3f8>
   40130:	bl	3c744 <__assert_fail@plt+0x2b538>
   40134:	mov	r1, r0
   40138:	ldr	r0, [pc, #1028]	; 40544 <__assert_fail@plt+0x2f338>
   4013c:	b	3fae0 <__assert_fail@plt+0x2e8d4>
   40140:	add	r0, r0, #2
   40144:	cmp	r4, r0
   40148:	bhi	40c00 <__assert_fail@plt+0x2f9f4>
   4014c:	cmp	ip, r4
   40150:	bcc	40eb8 <__assert_fail@plt+0x2fcac>
   40154:	mov	r1, #0
   40158:	add	ip, ip, #1
   4015c:	ldr	r0, [pc, #996]	; 40548 <__assert_fail@plt+0x2f33c>
   40160:	str	ip, [sp, #44]	; 0x2c
   40164:	bl	10f24 <printf@plt>
   40168:	ldr	r0, [sp, #44]	; 0x2c
   4016c:	b	3f95c <__assert_fail@plt+0x2e750>
   40170:	add	r0, r0, #2
   40174:	cmp	r4, r0
   40178:	bhi	40be0 <__assert_fail@plt+0x2f9d4>
   4017c:	cmp	ip, r4
   40180:	bcc	40ea4 <__assert_fail@plt+0x2fc98>
   40184:	mov	r1, #0
   40188:	add	ip, ip, #1
   4018c:	ldr	r0, [pc, #952]	; 4054c <__assert_fail@plt+0x2f340>
   40190:	str	ip, [sp, #44]	; 0x2c
   40194:	bl	10f24 <printf@plt>
   40198:	ldr	r0, [sp, #44]	; 0x2c
   4019c:	b	3f95c <__assert_fail@plt+0x2e750>
   401a0:	ldr	r0, [pc, #936]	; 40550 <__assert_fail@plt+0x2f344>
   401a4:	bl	10f24 <printf@plt>
   401a8:	ldr	r0, [sp, #44]	; 0x2c
   401ac:	b	3f95c <__assert_fail@plt+0x2e750>
   401b0:	ldr	r0, [pc, #924]	; 40554 <__assert_fail@plt+0x2f348>
   401b4:	bl	10f24 <printf@plt>
   401b8:	ldr	r0, [sp, #44]	; 0x2c
   401bc:	b	3f95c <__assert_fail@plt+0x2e750>
   401c0:	add	r0, r0, #3
   401c4:	cmp	r4, r0
   401c8:	bhi	40b5c <__assert_fail@plt+0x2f950>
   401cc:	cmp	ip, r4
   401d0:	bcs	401dc <__assert_fail@plt+0x2efd0>
   401d4:	subs	r1, r4, ip
   401d8:	bne	40b60 <__assert_fail@plt+0x2f954>
   401dc:	ldr	r3, [sp, #28]
   401e0:	mov	r2, sl
   401e4:	mov	lr, #0
   401e8:	add	ip, ip, #2
   401ec:	str	lr, [sp]
   401f0:	ldr	r0, [pc, #1016]	; 405f0 <__assert_fail@plt+0x2f3e4>
   401f4:	str	ip, [sp, #44]	; 0x2c
   401f8:	bl	3c744 <__assert_fail@plt+0x2b538>
   401fc:	mov	r1, r0
   40200:	ldr	r0, [pc, #848]	; 40558 <__assert_fail@plt+0x2f34c>
   40204:	bl	10f24 <printf@plt>
   40208:	ldr	r0, [sp, #44]	; 0x2c
   4020c:	b	3f95c <__assert_fail@plt+0x2e750>
   40210:	add	r0, r0, #5
   40214:	cmp	r4, r0
   40218:	bhi	40b7c <__assert_fail@plt+0x2f970>
   4021c:	cmp	ip, r4
   40220:	bcs	4022c <__assert_fail@plt+0x2f020>
   40224:	subs	r1, r4, ip
   40228:	bne	40b80 <__assert_fail@plt+0x2f974>
   4022c:	ldr	r3, [sp, #28]
   40230:	mov	r2, sl
   40234:	mov	lr, #0
   40238:	add	ip, ip, #4
   4023c:	str	lr, [sp]
   40240:	ldr	r0, [pc, #936]	; 405f0 <__assert_fail@plt+0x2f3e4>
   40244:	str	ip, [sp, #44]	; 0x2c
   40248:	bl	3c744 <__assert_fail@plt+0x2b538>
   4024c:	mov	r1, r0
   40250:	ldr	r0, [pc, #772]	; 4055c <__assert_fail@plt+0x2f350>
   40254:	bl	10f24 <printf@plt>
   40258:	ldr	r0, [sp, #44]	; 0x2c
   4025c:	b	3f95c <__assert_fail@plt+0x2e750>
   40260:	ldr	r3, [sp, #36]	; 0x24
   40264:	cmn	r3, #1
   40268:	beq	410c8 <__assert_fail@plt+0x2febc>
   4026c:	ldr	r3, [sp, #36]	; 0x24
   40270:	cmp	r3, #2
   40274:	beq	40dbc <__assert_fail@plt+0x2fbb0>
   40278:	ldr	r3, [sp, #32]
   4027c:	cmp	r3, #8
   40280:	bhi	41028 <__assert_fail@plt+0x2fe1c>
   40284:	ldr	r3, [sp, #32]
   40288:	add	r3, ip, r3
   4028c:	cmp	r4, r3
   40290:	bhi	40f30 <__assert_fail@plt+0x2fd24>
   40294:	cmp	r4, ip
   40298:	bhi	40f88 <__assert_fail@plt+0x2fd7c>
   4029c:	mov	r0, #0
   402a0:	mov	r1, #0
   402a4:	ldr	r3, [sp, #44]	; 0x2c
   402a8:	ldr	r2, [sp, #32]
   402ac:	add	r3, r3, r2
   402b0:	str	r3, [sp, #44]	; 0x2c
   402b4:	mov	ip, #0
   402b8:	mov	r2, r0
   402bc:	mov	r3, r1
   402c0:	str	ip, [sp]
   402c4:	ldr	r0, [pc, #804]	; 405f0 <__assert_fail@plt+0x2f3e4>
   402c8:	bl	3c744 <__assert_fail@plt+0x2b538>
   402cc:	mov	r1, r0
   402d0:	ldr	r0, [pc, #648]	; 40560 <__assert_fail@plt+0x2f354>
   402d4:	bl	10f24 <printf@plt>
   402d8:	ldr	r0, [sp, #44]	; 0x2c
   402dc:	b	3f95c <__assert_fail@plt+0x2e750>
   402e0:	mov	r0, ip
   402e4:	mov	r3, r4
   402e8:	mov	r2, #0
   402ec:	add	r1, sp, #52	; 0x34
   402f0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   402f4:	ldr	r3, [sp, #44]	; 0x2c
   402f8:	ldr	r2, [sp, #52]	; 0x34
   402fc:	cmp	fp, #165	; 0xa5
   40300:	ldr	ip, [pc, #604]	; 40564 <__assert_fail@plt+0x2f358>
   40304:	add	r3, r3, r2
   40308:	mov	r8, #0
   4030c:	str	r3, [sp, #44]	; 0x2c
   40310:	str	r8, [sp]
   40314:	moveq	fp, ip
   40318:	mov	r9, r0
   4031c:	ldr	r0, [pc, #580]	; 40568 <__assert_fail@plt+0x2f35c>
   40320:	mov	r3, r1
   40324:	movne	fp, r0
   40328:	mov	r2, r9
   4032c:	ldr	r0, [pc, #720]	; 40604 <__assert_fail@plt+0x2f3f8>
   40330:	bl	3c744 <__assert_fail@plt+0x2b538>
   40334:	mov	r1, #1
   40338:	str	r0, [sp, #40]	; 0x28
   4033c:	mov	r0, r9
   40340:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   40344:	ldr	r2, [sp, #40]	; 0x28
   40348:	mov	r1, fp
   4034c:	mov	r3, r0
   40350:	ldr	r0, [pc, #532]	; 4056c <__assert_fail@plt+0x2f360>
   40354:	bl	10f24 <printf@plt>
   40358:	mov	r3, r4
   4035c:	mov	r2, r8
   40360:	add	r1, sp, #52	; 0x34
   40364:	ldr	r0, [sp, #44]	; 0x2c
   40368:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4036c:	ldr	r3, [sp, #44]	; 0x2c
   40370:	ldr	r2, [sp, #52]	; 0x34
   40374:	str	r8, [sp]
   40378:	add	r3, r3, r2
   4037c:	str	r3, [sp, #44]	; 0x2c
   40380:	ldr	r3, [sp, #28]
   40384:	adds	r2, sl, r0
   40388:	adc	r3, r3, r1
   4038c:	ldr	r0, [pc, #604]	; 405f0 <__assert_fail@plt+0x2f3e4>
   40390:	bl	3c744 <__assert_fail@plt+0x2b538>
   40394:	mov	r1, r0
   40398:	ldr	r0, [pc, #464]	; 40570 <__assert_fail@plt+0x2f364>
   4039c:	bl	10f24 <printf@plt>
   403a0:	ldr	r0, [sp, #44]	; 0x2c
   403a4:	b	3f95c <__assert_fail@plt+0x2e750>
   403a8:	add	r0, r0, #2
   403ac:	cmp	r4, r0
   403b0:	bhi	40cc8 <__assert_fail@plt+0x2fabc>
   403b4:	cmp	ip, r4
   403b8:	bcc	40e90 <__assert_fail@plt+0x2fc84>
   403bc:	mov	r2, #0
   403c0:	ldr	r3, [pc, #428]	; 40574 <__assert_fail@plt+0x2f368>
   403c4:	cmp	fp, #166	; 0xa6
   403c8:	add	ip, ip, #1
   403cc:	ldr	r1, [pc, #420]	; 40578 <__assert_fail@plt+0x2f36c>
   403d0:	ldr	r0, [pc, #420]	; 4057c <__assert_fail@plt+0x2f370>
   403d4:	movne	r1, r3
   403d8:	str	ip, [sp, #44]	; 0x2c
   403dc:	bl	10f24 <printf@plt>
   403e0:	mov	r3, r4
   403e4:	mov	r2, #0
   403e8:	add	r1, sp, #52	; 0x34
   403ec:	ldr	r0, [sp, #44]	; 0x2c
   403f0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   403f4:	ldr	r3, [sp, #44]	; 0x2c
   403f8:	ldr	ip, [sp, #52]	; 0x34
   403fc:	mov	r2, #0
   40400:	add	r3, r3, ip
   40404:	str	r2, [sp]
   40408:	b	4037c <__assert_fail@plt+0x2f170>
   4040c:	ldr	r0, [pc, #364]	; 40580 <__assert_fail@plt+0x2f374>
   40410:	bl	10f24 <printf@plt>
   40414:	ldr	r0, [sp, #44]	; 0x2c
   40418:	b	3f95c <__assert_fail@plt+0x2e750>
   4041c:	ldr	r0, [pc, #352]	; 40584 <__assert_fail@plt+0x2f378>
   40420:	bl	10f24 <printf@plt>
   40424:	ldr	r0, [sp, #44]	; 0x2c
   40428:	b	3f95c <__assert_fail@plt+0x2e750>
   4042c:	ldr	r0, [pc, #340]	; 40588 <__assert_fail@plt+0x2f37c>
   40430:	bl	10f24 <printf@plt>
   40434:	ldr	r0, [sp, #44]	; 0x2c
   40438:	b	3f95c <__assert_fail@plt+0x2e750>
   4043c:	ldr	r0, [pc, #328]	; 4058c <__assert_fail@plt+0x2f380>
   40440:	bl	10f24 <printf@plt>
   40444:	ldr	r0, [sp, #44]	; 0x2c
   40448:	b	3f95c <__assert_fail@plt+0x2e750>
   4044c:	ldr	r0, [pc, #316]	; 40590 <__assert_fail@plt+0x2f384>
   40450:	bl	10f24 <printf@plt>
   40454:	ldr	r0, [sp, #44]	; 0x2c
   40458:	b	3f95c <__assert_fail@plt+0x2e750>
   4045c:	ldr	r0, [pc, #304]	; 40594 <__assert_fail@plt+0x2f388>
   40460:	bl	10f24 <printf@plt>
   40464:	ldr	r0, [sp, #44]	; 0x2c
   40468:	b	3f95c <__assert_fail@plt+0x2e750>
   4046c:	andeq	pc, r7, r4, lsl #15
   40470:	andeq	pc, r7, r8, asr #14
   40474:	andeq	pc, r7, r8, ror #14
   40478:	muleq	r7, r4, r6
   4047c:	andeq	pc, r7, r4, ror #2
   40480:	andeq	pc, r7, r4, ror r1	; <UNPREDICTABLE>
   40484:	andeq	pc, r7, r0, lsl #3
   40488:	muleq	r7, r4, r1
   4048c:	strdeq	pc, [r7], -r8
   40490:	andeq	pc, r7, ip, lsl #4
   40494:	andeq	pc, r7, r4, lsr #4
   40498:	andeq	pc, r7, r8, lsr r2	; <UNPREDICTABLE>
   4049c:	andeq	pc, r7, r8, lsr #3
   404a0:			; <UNDEFINED> instruction: 0x0007f1bc
   404a4:	ldrdeq	pc, [r7], -r0
   404a8:	andeq	pc, r7, r4, ror #3
   404ac:	andeq	pc, r7, ip, asr #4
   404b0:	andeq	pc, r7, r4, ror #4
   404b4:	andeq	pc, r7, r0, ror r2	; <UNPREDICTABLE>
   404b8:	andeq	pc, r7, r0, lsl r2	; <UNPREDICTABLE>
   404bc:			; <UNDEFINED> instruction: 0x00067fb4
   404c0:	andeq	pc, r7, r8, asr r2	; <UNPREDICTABLE>
   404c4:	andeq	pc, r7, r0, lsl #5
   404c8:	andeq	pc, r7, ip, lsl #5
   404cc:	muleq	r7, r8, r2
   404d0:	andeq	pc, r7, r8, lsr #5
   404d4:			; <UNDEFINED> instruction: 0x0007f2b4
   404d8:	andeq	pc, r7, r0, asr #5
   404dc:	andeq	pc, r7, ip, asr #5
   404e0:	ldrdeq	pc, [r7], -r8
   404e4:	andeq	pc, r7, r4, ror #5
   404e8:	strdeq	pc, [r7], -r0
   404ec:	strdeq	pc, [r7], -ip
   404f0:	andeq	pc, r7, r8, lsl #6
   404f4:	andeq	pc, r7, r4, lsl r3	; <UNPREDICTABLE>
   404f8:	andeq	pc, r7, r0, lsr #6
   404fc:	andeq	pc, r7, r8, lsr r3	; <UNPREDICTABLE>
   40500:	andeq	pc, r7, r4, asr #6
   40504:	andeq	pc, r7, r0, asr r3	; <UNPREDICTABLE>
   40508:	andeq	pc, r7, ip, asr r3	; <UNPREDICTABLE>
   4050c:	andeq	pc, r7, r8, ror #6
   40510:	andeq	pc, r7, r8, ror r3	; <UNPREDICTABLE>
   40514:	andeq	pc, r7, r4, lsl #7
   40518:	muleq	r7, r0, r3
   4051c:	muleq	r7, ip, r3
   40520:	andeq	pc, r7, r8, lsr #7
   40524:			; <UNDEFINED> instruction: 0x0007f3b4
   40528:	andeq	pc, r7, r0, asr #7
   4052c:	ldrdeq	pc, [r7], -r0
   40530:	ldrdeq	pc, [r7], -ip
   40534:	strdeq	pc, [r7], -r0
   40538:	andeq	pc, r7, r8, lsl #8
   4053c:	andeq	pc, r7, ip, lsl r4	; <UNPREDICTABLE>
   40540:	andeq	pc, r7, ip, lsr #8
   40544:	andeq	pc, r7, r4, asr #8
   40548:	andeq	pc, r7, r4, asr r4	; <UNPREDICTABLE>
   4054c:	andeq	pc, r7, ip, ror #8
   40550:	andeq	pc, r7, r4, lsl #9
   40554:	muleq	r7, r0, r4
   40558:	andeq	pc, r7, ip, lsr #9
   4055c:	andeq	pc, r7, r0, asr #9
   40560:	strdeq	pc, [r7], -r4
   40564:	strheq	pc, [r7], -ip	; <UNPREDICTABLE>
   40568:	ldrdeq	pc, [r7], -r0
   4056c:	andeq	pc, r7, r8, lsr r6	; <UNPREDICTABLE>
   40570:			; <UNDEFINED> instruction: 0x0007f4b8
   40574:	strdeq	pc, [r7], -ip
   40578:	andeq	pc, r7, r8, ror #1
   4057c:	andeq	pc, r7, r4, asr #12
   40580:	andeq	pc, r7, ip, lsl #10
   40584:	andeq	pc, r7, r4, lsr #10
   40588:	strdeq	pc, [r7], -r0
   4058c:	andeq	pc, r7, r4, lsl #14
   40590:	andeq	pc, r7, ip, lsl r7	; <UNPREDICTABLE>
   40594:	andeq	pc, r7, r4, asr #11
   40598:	ldrdeq	pc, [r7], -r8
   4059c:	andeq	pc, r7, ip, lsr #14
   405a0:	andeq	pc, r7, r8, asr r6	; <UNPREDICTABLE>
   405a4:	andeq	pc, r7, r8, ror r6	; <UNPREDICTABLE>
   405a8:	muleq	r7, r4, r5
   405ac:			; <UNDEFINED> instruction: 0x0007f6b4
   405b0:	andeq	pc, r7, r8, asr #13
   405b4:	ldrdeq	pc, [r7], -ip
   405b8:	andeq	pc, r7, r4, lsl r1	; <UNPREDICTABLE>
   405bc:	andeq	pc, r7, r4, lsr #2
   405c0:	andeq	pc, r7, ip, asr #12
   405c4:	andeq	pc, r7, r8, lsr r1	; <UNPREDICTABLE>
   405c8:	andeq	pc, r7, ip, asr #2
   405cc:	andeq	pc, r7, r8, ror #10
   405d0:	andeq	r8, r6, ip, rrx
   405d4:	andeq	pc, r7, r4, lsl r6	; <UNPREDICTABLE>
   405d8:	andeq	pc, r7, r8, ror r0	; <UNPREDICTABLE>
   405dc:	andeq	pc, r7, r4, rrx
   405e0:	andeq	pc, r7, r4, lsr #12
   405e4:	andeq	sl, r9, ip, lsr #8
   405e8:	muleq	r7, r0, r0
   405ec:	andeq	pc, r7, r4, lsr #1
   405f0:	andeq	r9, r6, r0, lsr #15
   405f4:	andeq	pc, r7, ip, lsr #12
   405f8:	andeq	pc, r7, ip, lsr r5	; <UNPREDICTABLE>
   405fc:	andeq	pc, r7, r0, asr r5	; <UNPREDICTABLE>
   40600:	andeq	pc, r7, ip, asr r5	; <UNPREDICTABLE>
   40604:	andeq	r3, r6, ip, asr #17
   40608:	andeq	pc, r7, ip, ror r5	; <UNPREDICTABLE>
   4060c:	andeq	lr, r9, ip, asr sp
   40610:			; <UNDEFINED> instruction: 0x0007e5b0
   40614:	strdeq	lr, [r7], -ip
   40618:	ldrdeq	pc, [r7], -r4
   4061c:	andeq	pc, r7, r0, lsl #12
   40620:	andeq	pc, r7, r8, asr #32
   40624:	andeq	pc, r7, r0, lsr r0	; <UNPREDICTABLE>
   40628:	cmp	ip, r4
   4062c:	addcc	r3, r0, #2
   40630:	strcc	r3, [sp, #44]	; 0x2c
   40634:	ldrbcc	fp, [r0, #1]
   40638:	ldr	r3, [sp, #112]	; 0x70
   4063c:	ldr	r2, [sp, #112]	; 0x70
   40640:	movcs	fp, #0
   40644:	add	r3, r3, #24
   40648:	add	r2, r2, #16
   4064c:	str	r4, [sp]
   40650:	mov	r1, fp
   40654:	add	r0, sp, #44	; 0x2c
   40658:	bl	3e038 <__assert_fail@plt+0x2ce2c>
   4065c:	mov	r8, r0
   40660:	mov	r9, r1
   40664:	ldr	r0, [pc, #-212]	; 40598 <__assert_fail@plt+0x2f38c>
   40668:	mov	r1, fp
   4066c:	bl	10f24 <printf@plt>
   40670:	mov	r0, r8
   40674:	mov	r2, r7
   40678:	mov	r1, r9
   4067c:	bl	3ca6c <__assert_fail@plt+0x2b860>
   40680:	ldr	r0, [sp, #44]	; 0x2c
   40684:	b	3f95c <__assert_fail@plt+0x2e750>
   40688:	ldr	r0, [pc, #-244]	; 4059c <__assert_fail@plt+0x2f390>
   4068c:	bl	10f24 <printf@plt>
   40690:	ldr	r0, [sp, #44]	; 0x2c
   40694:	b	3f95c <__assert_fail@plt+0x2e750>
   40698:	add	r0, r0, #5
   4069c:	cmp	r4, r0
   406a0:	bhi	40c60 <__assert_fail@plt+0x2fa54>
   406a4:	cmp	ip, r4
   406a8:	bcc	40e7c <__assert_fail@plt+0x2fc70>
   406ac:	ldr	r3, [sp, #28]
   406b0:	mov	r2, sl
   406b4:	mov	lr, #0
   406b8:	add	ip, ip, #4
   406bc:	str	lr, [sp]
   406c0:	ldr	r0, [pc, #-216]	; 405f0 <__assert_fail@plt+0x2f3e4>
   406c4:	str	ip, [sp, #44]	; 0x2c
   406c8:	bl	3c744 <__assert_fail@plt+0x2b538>
   406cc:	mov	r1, r0
   406d0:	ldr	r0, [pc, #-312]	; 405a0 <__assert_fail@plt+0x2f394>
   406d4:	bl	10f24 <printf@plt>
   406d8:	ldr	r0, [sp, #44]	; 0x2c
   406dc:	b	3f95c <__assert_fail@plt+0x2e750>
   406e0:	mov	r0, ip
   406e4:	mov	r3, r4
   406e8:	mov	r2, #0
   406ec:	add	r1, sp, #52	; 0x34
   406f0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   406f4:	ldr	r3, [sp, #44]	; 0x2c
   406f8:	ldr	ip, [sp, #52]	; 0x34
   406fc:	mov	r2, #0
   40700:	add	r3, r3, ip
   40704:	str	r2, [sp]
   40708:	str	r3, [sp, #44]	; 0x2c
   4070c:	mov	r2, r0
   40710:	mov	r3, r1
   40714:	ldr	r0, [pc, #-300]	; 405f0 <__assert_fail@plt+0x2f3e4>
   40718:	bl	3c744 <__assert_fail@plt+0x2b538>
   4071c:	mov	r1, r0
   40720:	ldr	r0, [pc, #-388]	; 405a4 <__assert_fail@plt+0x2f398>
   40724:	bl	10f24 <printf@plt>
   40728:	ldr	r0, [sp, #44]	; 0x2c
   4072c:	b	3f95c <__assert_fail@plt+0x2e750>
   40730:	mov	r2, #5
   40734:	ldr	r1, [pc, #-404]	; 405a8 <__assert_fail@plt+0x2f39c>
   40738:	mov	r0, #0
   4073c:	bl	10f90 <dcgettext@plt>
   40740:	bl	10f24 <printf@plt>
   40744:	ldr	r0, [sp, #44]	; 0x2c
   40748:	b	3f95c <__assert_fail@plt+0x2e750>
   4074c:	ldr	r0, [pc, #-424]	; 405ac <__assert_fail@plt+0x2f3a0>
   40750:	bl	10f24 <printf@plt>
   40754:	ldr	r0, [sp, #44]	; 0x2c
   40758:	b	3f95c <__assert_fail@plt+0x2e750>
   4075c:	ldr	r0, [pc, #-436]	; 405b0 <__assert_fail@plt+0x2f3a4>
   40760:	bl	10f24 <printf@plt>
   40764:	ldr	r0, [sp, #44]	; 0x2c
   40768:	b	3f95c <__assert_fail@plt+0x2e750>
   4076c:	ldr	r0, [pc, #-448]	; 405b4 <__assert_fail@plt+0x2f3a8>
   40770:	bl	10f24 <printf@plt>
   40774:	ldr	r0, [sp, #44]	; 0x2c
   40778:	b	3f95c <__assert_fail@plt+0x2e750>
   4077c:	mov	r0, ip
   40780:	mov	r3, r4
   40784:	mov	r2, #0
   40788:	add	r1, sp, #52	; 0x34
   4078c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   40790:	ldr	ip, [sp, #52]	; 0x34
   40794:	cmp	fp, #168	; 0xa8
   40798:	mov	r2, r0
   4079c:	ldr	r0, [sp, #44]	; 0x2c
   407a0:	mov	r3, r1
   407a4:	add	r0, r0, ip
   407a8:	ldr	r1, [pc, #-504]	; 405b8 <__assert_fail@plt+0x2f3ac>
   407ac:	ldr	ip, [pc, #-504]	; 405bc <__assert_fail@plt+0x2f3b0>
   407b0:	moveq	fp, r1
   407b4:	movne	fp, ip
   407b8:	orrs	r1, r2, r3
   407bc:	str	r0, [sp, #44]	; 0x2c
   407c0:	beq	407d0 <__assert_fail@plt+0x2f5c4>
   407c4:	ldr	r1, [sp, #28]
   407c8:	adds	r2, r2, sl
   407cc:	adc	r3, r3, r1
   407d0:	mov	r1, #0
   407d4:	str	r1, [sp]
   407d8:	ldr	r0, [pc, #-496]	; 405f0 <__assert_fail@plt+0x2f3e4>
   407dc:	bl	3c744 <__assert_fail@plt+0x2b538>
   407e0:	mov	r1, fp
   407e4:	mov	r2, r0
   407e8:	ldr	r0, [pc, #-560]	; 405c0 <__assert_fail@plt+0x2f3b4>
   407ec:	bl	10f24 <printf@plt>
   407f0:	ldr	r0, [sp, #44]	; 0x2c
   407f4:	b	3f95c <__assert_fail@plt+0x2e750>
   407f8:	mov	r0, ip
   407fc:	mov	r3, r4
   40800:	mov	r2, #0
   40804:	add	r1, sp, #52	; 0x34
   40808:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4080c:	ldr	ip, [sp, #52]	; 0x34
   40810:	cmp	fp, #169	; 0xa9
   40814:	mov	r2, r0
   40818:	ldr	r0, [sp, #44]	; 0x2c
   4081c:	mov	r3, r1
   40820:	add	r0, r0, ip
   40824:	ldr	r1, [pc, #-616]	; 405c4 <__assert_fail@plt+0x2f3b8>
   40828:	ldr	ip, [pc, #-616]	; 405c8 <__assert_fail@plt+0x2f3bc>
   4082c:	moveq	fp, r1
   40830:	movne	fp, ip
   40834:	orrs	r1, r2, r3
   40838:	str	r0, [sp, #44]	; 0x2c
   4083c:	beq	407d0 <__assert_fail@plt+0x2f5c4>
   40840:	b	407c4 <__assert_fail@plt+0x2f5b8>
   40844:	ldr	r0, [pc, #-640]	; 405cc <__assert_fail@plt+0x2f3c0>
   40848:	bl	10f24 <printf@plt>
   4084c:	ldr	r0, [sp, #44]	; 0x2c
   40850:	b	3f95c <__assert_fail@plt+0x2e750>
   40854:	ldr	r3, [sp, #36]	; 0x24
   40858:	cmn	r3, #1
   4085c:	beq	410e0 <__assert_fail@plt+0x2fed4>
   40860:	ldr	r3, [sp, #36]	; 0x24
   40864:	cmp	r3, #2
   40868:	beq	40e04 <__assert_fail@plt+0x2fbf8>
   4086c:	ldr	r3, [sp, #32]
   40870:	cmp	r3, #8
   40874:	bhi	4106c <__assert_fail@plt+0x2fe60>
   40878:	ldr	r3, [sp, #32]
   4087c:	add	r3, ip, r3
   40880:	cmp	r4, r3
   40884:	bhi	40f54 <__assert_fail@plt+0x2fd48>
   40888:	cmp	r4, ip
   4088c:	bhi	40f80 <__assert_fail@plt+0x2fd74>
   40890:	mov	r2, #0
   40894:	mov	r3, #0
   40898:	ldr	r1, [sp, #44]	; 0x2c
   4089c:	ldr	r0, [sp, #32]
   408a0:	add	r1, r1, r0
   408a4:	str	r1, [sp, #44]	; 0x2c
   408a8:	ldr	ip, [pc, #-656]	; 40620 <__assert_fail@plt+0x2f414>
   408ac:	ldr	r1, [pc, #-656]	; 40624 <__assert_fail@plt+0x2f418>
   408b0:	mov	r8, #0
   408b4:	cmp	fp, #160	; 0xa0
   408b8:	str	r8, [sp]
   408bc:	ldr	r0, [pc, #-724]	; 405f0 <__assert_fail@plt+0x2f3e4>
   408c0:	moveq	fp, r1
   408c4:	movne	fp, ip
   408c8:	bl	3c744 <__assert_fail@plt+0x2b538>
   408cc:	mov	r3, r4
   408d0:	mov	r2, #1
   408d4:	add	r1, sp, #52	; 0x34
   408d8:	mov	r9, r0
   408dc:	ldr	r0, [sp, #44]	; 0x2c
   408e0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   408e4:	str	r8, [sp]
   408e8:	mov	r2, r0
   408ec:	mov	r3, r1
   408f0:	ldr	r0, [pc, #-808]	; 405d0 <__assert_fail@plt+0x2f3c4>
   408f4:	bl	3c744 <__assert_fail@plt+0x2b538>
   408f8:	mov	r2, r9
   408fc:	mov	r1, fp
   40900:	mov	r3, r0
   40904:	ldr	r0, [pc, #-824]	; 405d4 <__assert_fail@plt+0x2f3c8>
   40908:	b	3ffbc <__assert_fail@plt+0x2edb0>
   4090c:	mov	r0, ip
   40910:	mov	r3, r4
   40914:	mov	r2, #0
   40918:	add	r1, sp, #52	; 0x34
   4091c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   40920:	ldr	r3, [sp, #44]	; 0x2c
   40924:	ldr	r2, [sp, #52]	; 0x34
   40928:	add	r3, r3, r2
   4092c:	sub	r8, r4, r3
   40930:	str	r3, [sp, #44]	; 0x2c
   40934:	asr	r9, r8, #31
   40938:	ldr	r3, [pc, #-872]	; 405d8 <__assert_fail@plt+0x2f3cc>
   4093c:	cmp	r9, r1
   40940:	cmpeq	r8, r0
   40944:	movhi	r8, r0
   40948:	movhi	r9, r1
   4094c:	cmp	fp, #163	; 0xa3
   40950:	ldr	r1, [pc, #-892]	; 405dc <__assert_fail@plt+0x2f3d0>
   40954:	ldr	r0, [pc, #-892]	; 405e0 <__assert_fail@plt+0x2f3d4>
   40958:	movne	r1, r3
   4095c:	bl	10f24 <printf@plt>
   40960:	ldr	r3, [sp, #112]	; 0x70
   40964:	mov	r1, r7
   40968:	str	r3, [sp, #16]
   4096c:	ldr	r3, [sp, #28]
   40970:	str	sl, [sp, #8]
   40974:	str	r3, [sp, #12]
   40978:	strd	r8, [sp]
   4097c:	ldrd	r2, [sp, #32]
   40980:	ldr	r0, [sp, #44]	; 0x2c
   40984:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   40988:	ldr	r3, [pc, #-940]	; 405e4 <__assert_fail@plt+0x2f3d8>
   4098c:	ldr	r1, [r3]
   40990:	cmp	r0, #0
   40994:	mov	r0, #41	; 0x29
   40998:	movne	r6, #1
   4099c:	bl	11158 <putc@plt>
   409a0:	ldr	r0, [sp, #44]	; 0x2c
   409a4:	add	r0, r0, r8
   409a8:	cmp	r0, r4
   409ac:	movhi	r0, r4
   409b0:	bhi	3f4d4 <__assert_fail@plt+0x2e2c8>
   409b4:	str	r0, [sp, #44]	; 0x2c
   409b8:	b	3f95c <__assert_fail@plt+0x2e750>
   409bc:	mov	r0, ip
   409c0:	mov	r3, r4
   409c4:	mov	r2, #0
   409c8:	add	r1, sp, #52	; 0x34
   409cc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   409d0:	ldr	ip, [pc, #-1008]	; 405e8 <__assert_fail@plt+0x2f3dc>
   409d4:	cmp	fp, #164	; 0xa4
   409d8:	ldr	r3, [sp, #44]	; 0x2c
   409dc:	moveq	fp, ip
   409e0:	ldr	ip, [sp, #52]	; 0x34
   409e4:	ldr	r2, [pc, #-1024]	; 405ec <__assert_fail@plt+0x2f3e0>
   409e8:	add	r3, r3, ip
   409ec:	movne	fp, r2
   409f0:	str	r3, [sp, #44]	; 0x2c
   409f4:	mov	r2, #0
   409f8:	ldr	r3, [sp, #28]
   409fc:	str	r2, [sp]
   40a00:	adds	r2, sl, r0
   40a04:	adc	r3, r3, r1
   40a08:	ldr	r0, [pc, #-1056]	; 405f0 <__assert_fail@plt+0x2f3e4>
   40a0c:	bl	3c744 <__assert_fail@plt+0x2b538>
   40a10:	mov	r1, fp
   40a14:	mov	r2, r0
   40a18:	ldr	r0, [pc, #-1068]	; 405f4 <__assert_fail@plt+0x2f3e8>
   40a1c:	bl	10f24 <printf@plt>
   40a20:	ldr	r0, [sp, #44]	; 0x2c
   40a24:	add	ip, r0, #1
   40a28:	cmp	ip, r4
   40a2c:	bcc	40ce8 <__assert_fail@plt+0x2fadc>
   40a30:	cmp	r0, r4
   40a34:	bcc	40e68 <__assert_fail@plt+0x2fc5c>
   40a38:	mov	r2, #0
   40a3c:	mov	r3, #0
   40a40:	mov	r1, #32
   40a44:	str	r4, [sp]
   40a48:	str	r1, [sp, #4]
   40a4c:	mov	r0, ip
   40a50:	str	ip, [sp, #44]	; 0x2c
   40a54:	bl	3dbe4 <__assert_fail@plt+0x2c9d8>
   40a58:	str	r0, [sp, #44]	; 0x2c
   40a5c:	b	3f95c <__assert_fail@plt+0x2e750>
   40a60:	ldr	r0, [pc, #-1136]	; 405f8 <__assert_fail@plt+0x2f3ec>
   40a64:	bl	10f24 <printf@plt>
   40a68:	mov	r2, #5
   40a6c:	ldr	r1, [pc, #-1144]	; 405fc <__assert_fail@plt+0x2f3f0>
   40a70:	mov	r0, #0
   40a74:	bl	10f90 <dcgettext@plt>
   40a78:	mov	r3, r4
   40a7c:	mov	r2, #0
   40a80:	add	r1, sp, #52	; 0x34
   40a84:	mov	r8, #0
   40a88:	mov	r9, r0
   40a8c:	ldr	r0, [sp, #44]	; 0x2c
   40a90:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   40a94:	str	r8, [sp]
   40a98:	mov	r2, r0
   40a9c:	mov	r3, r1
   40aa0:	ldr	r0, [pc, #-1188]	; 40604 <__assert_fail@plt+0x2f3f8>
   40aa4:	bl	3c744 <__assert_fail@plt+0x2b538>
   40aa8:	mov	r1, r0
   40aac:	mov	r0, r9
   40ab0:	bl	10f24 <printf@plt>
   40ab4:	ldr	r3, [sp, #44]	; 0x2c
   40ab8:	ldr	r2, [sp, #52]	; 0x34
   40abc:	ldr	r1, [pc, #-1220]	; 40600 <__assert_fail@plt+0x2f3f4>
   40ac0:	add	r3, r3, r2
   40ac4:	mov	r0, r8
   40ac8:	mov	r2, #5
   40acc:	str	r3, [sp, #44]	; 0x2c
   40ad0:	bl	10f90 <dcgettext@plt>
   40ad4:	mov	r3, r4
   40ad8:	mov	r2, r8
   40adc:	add	r1, sp, #52	; 0x34
   40ae0:	mov	r9, r0
   40ae4:	ldr	r0, [sp, #44]	; 0x2c
   40ae8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   40aec:	str	r8, [sp]
   40af0:	mov	r2, r0
   40af4:	mov	r3, r1
   40af8:	ldr	r0, [pc, #-1276]	; 40604 <__assert_fail@plt+0x2f3f8>
   40afc:	bl	3c744 <__assert_fail@plt+0x2b538>
   40b00:	mov	r1, r0
   40b04:	mov	r0, r9
   40b08:	b	3fae0 <__assert_fail@plt+0x2e8d4>
   40b0c:	ldr	r0, [pc, #-1292]	; 40608 <__assert_fail@plt+0x2f3fc>
   40b10:	bl	10f24 <printf@plt>
   40b14:	mov	r3, r4
   40b18:	mov	r2, #0
   40b1c:	add	r1, sp, #52	; 0x34
   40b20:	ldr	r0, [sp, #44]	; 0x2c
   40b24:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   40b28:	ldr	ip, [sp, #44]	; 0x2c
   40b2c:	ldr	r2, [sp, #52]	; 0x34
   40b30:	mov	r3, #32
   40b34:	add	ip, ip, r2
   40b38:	str	r3, [sp, #4]
   40b3c:	str	r4, [sp]
   40b40:	str	ip, [sp, #44]	; 0x2c
   40b44:	mov	r2, r0
   40b48:	mov	r3, r1
   40b4c:	mov	r0, ip
   40b50:	bl	3dbe4 <__assert_fail@plt+0x2c9d8>
   40b54:	str	r0, [sp, #44]	; 0x2c
   40b58:	b	3f95c <__assert_fail@plt+0x2e750>
   40b5c:	mov	r1, #2
   40b60:	mov	r0, ip
   40b64:	bl	550b8 <warn@@Base+0x2e8>
   40b68:	ldr	r3, [sp, #28]
   40b6c:	ldr	ip, [sp, #44]	; 0x2c
   40b70:	adds	r2, r0, sl
   40b74:	adc	r3, r1, r3
   40b78:	b	401e4 <__assert_fail@plt+0x2efd8>
   40b7c:	mov	r1, #4
   40b80:	mov	r0, ip
   40b84:	bl	550b8 <warn@@Base+0x2e8>
   40b88:	ldr	r3, [sp, #28]
   40b8c:	ldr	ip, [sp, #44]	; 0x2c
   40b90:	adds	r2, r0, sl
   40b94:	adc	r3, r1, r3
   40b98:	b	40234 <__assert_fail@plt+0x2f028>
   40b9c:	mov	r1, #4
   40ba0:	mov	r0, ip
   40ba4:	bl	550b8 <warn@@Base+0x2e8>
   40ba8:	ldr	ip, [sp, #44]	; 0x2c
   40bac:	mov	r1, r0
   40bb0:	b	3fc90 <__assert_fail@plt+0x2ea84>
   40bb4:	sub	r1, r4, ip
   40bb8:	sub	r3, r1, #1
   40bbc:	cmp	r3, #7
   40bc0:	bhi	3f994 <__assert_fail@plt+0x2e788>
   40bc4:	ldr	r3, [pc, #-1472]	; 4060c <__assert_fail@plt+0x2f400>
   40bc8:	mov	r0, ip
   40bcc:	ldr	r3, [r3]
   40bd0:	blx	r3
   40bd4:	mov	r2, r0
   40bd8:	mov	r3, r1
   40bdc:	b	3f99c <__assert_fail@plt+0x2e790>
   40be0:	mov	r1, #1
   40be4:	ldr	r3, [pc, #-1504]	; 4060c <__assert_fail@plt+0x2f400>
   40be8:	mov	r0, ip
   40bec:	ldr	r3, [r3]
   40bf0:	blx	r3
   40bf4:	ldr	ip, [sp, #44]	; 0x2c
   40bf8:	mov	r1, r0
   40bfc:	b	40188 <__assert_fail@plt+0x2ef7c>
   40c00:	mov	r1, #1
   40c04:	ldr	r3, [pc, #-1536]	; 4060c <__assert_fail@plt+0x2f400>
   40c08:	mov	r0, ip
   40c0c:	ldr	r3, [r3]
   40c10:	blx	r3
   40c14:	ldr	ip, [sp, #44]	; 0x2c
   40c18:	mov	r1, r0
   40c1c:	b	40158 <__assert_fail@plt+0x2ef4c>
   40c20:	mov	r1, #4
   40c24:	ldr	r3, [pc, #-1568]	; 4060c <__assert_fail@plt+0x2f400>
   40c28:	ldr	r3, [r3]
   40c2c:	blx	r3
   40c30:	ldr	r3, [sp, #44]	; 0x2c
   40c34:	add	r3, r3, #4
   40c38:	mov	r1, r0
   40c3c:	b	3fa98 <__assert_fail@plt+0x2e88c>
   40c40:	mov	r1, #4
   40c44:	ldr	r3, [pc, #-1600]	; 4060c <__assert_fail@plt+0x2f400>
   40c48:	mov	r0, ip
   40c4c:	ldr	r3, [r3]
   40c50:	blx	r3
   40c54:	ldr	ip, [sp, #44]	; 0x2c
   40c58:	mov	r1, r0
   40c5c:	b	3fa6c <__assert_fail@plt+0x2e860>
   40c60:	mov	r1, #4
   40c64:	ldr	r3, [pc, #-1632]	; 4060c <__assert_fail@plt+0x2f400>
   40c68:	mov	r0, ip
   40c6c:	ldr	r3, [r3]
   40c70:	blx	r3
   40c74:	ldr	r3, [sp, #28]
   40c78:	ldr	ip, [sp, #44]	; 0x2c
   40c7c:	adds	r2, sl, r0
   40c80:	adc	r3, r3, r1
   40c84:	b	406b4 <__assert_fail@plt+0x2f4a8>
   40c88:	mov	r1, #1
   40c8c:	ldr	r3, [pc, #-1672]	; 4060c <__assert_fail@plt+0x2f400>
   40c90:	mov	r0, ip
   40c94:	ldr	r3, [r3]
   40c98:	blx	r3
   40c9c:	ldr	ip, [sp, #44]	; 0x2c
   40ca0:	mov	r1, r0
   40ca4:	b	3f9f4 <__assert_fail@plt+0x2e7e8>
   40ca8:	mov	r1, #2
   40cac:	ldr	r3, [pc, #-1704]	; 4060c <__assert_fail@plt+0x2f400>
   40cb0:	mov	r0, ip
   40cb4:	ldr	r3, [r3]
   40cb8:	blx	r3
   40cbc:	ldr	ip, [sp, #44]	; 0x2c
   40cc0:	mov	r1, r0
   40cc4:	b	3fb48 <__assert_fail@plt+0x2e93c>
   40cc8:	mov	r1, #1
   40ccc:	ldr	r3, [pc, #-1736]	; 4060c <__assert_fail@plt+0x2f400>
   40cd0:	mov	r0, ip
   40cd4:	ldr	r3, [r3]
   40cd8:	blx	r3
   40cdc:	ldr	ip, [sp, #44]	; 0x2c
   40ce0:	mov	r2, r0
   40ce4:	b	403c0 <__assert_fail@plt+0x2f1b4>
   40ce8:	mov	r1, #1
   40cec:	ldr	r3, [pc, #-1768]	; 4060c <__assert_fail@plt+0x2f400>
   40cf0:	ldr	r3, [r3]
   40cf4:	blx	r3
   40cf8:	ldr	ip, [sp, #44]	; 0x2c
   40cfc:	add	ip, ip, #1
   40d00:	mov	r2, r0
   40d04:	mov	r3, r1
   40d08:	b	40a40 <__assert_fail@plt+0x2f834>
   40d0c:	mov	r1, #1
   40d10:	ldr	r3, [pc, #-1804]	; 4060c <__assert_fail@plt+0x2f400>
   40d14:	mov	r0, ip
   40d18:	ldr	r3, [r3]
   40d1c:	blx	r3
   40d20:	ldr	ip, [sp, #44]	; 0x2c
   40d24:	mov	r1, r0
   40d28:	b	3fc58 <__assert_fail@plt+0x2ea4c>
   40d2c:	mov	r1, #4
   40d30:	ldr	r3, [pc, #-1836]	; 4060c <__assert_fail@plt+0x2f400>
   40d34:	mov	r0, ip
   40d38:	ldr	r3, [r3]
   40d3c:	blx	r3
   40d40:	ldr	ip, [sp, #44]	; 0x2c
   40d44:	mov	r1, r0
   40d48:	b	3fbc0 <__assert_fail@plt+0x2e9b4>
   40d4c:	mov	r3, #5
   40d50:	str	r3, [sp]
   40d54:	ldr	r2, [pc, #-1868]	; 40610 <__assert_fail@plt+0x2f404>
   40d58:	mov	r3, r7
   40d5c:	ldr	r1, [pc, #-1872]	; 40614 <__assert_fail@plt+0x2f408>
   40d60:	mov	r0, #0
   40d64:	bl	11200 <dcngettext@plt>
   40d68:	mov	r1, r7
   40d6c:	mov	r2, #8
   40d70:	bl	548ac <error@@Base>
   40d74:	ldr	ip, [sp, #44]	; 0x2c
   40d78:	add	r3, ip, #8
   40d7c:	cmp	r4, r3
   40d80:	movhi	r1, #8
   40d84:	bhi	40bc4 <__assert_fail@plt+0x2f9b8>
   40d88:	b	3f98c <__assert_fail@plt+0x2e780>
   40d8c:	mov	r1, #4
   40d90:	b	3fcc4 <__assert_fail@plt+0x2eab8>
   40d94:	mov	r1, #2
   40d98:	b	3ff08 <__assert_fail@plt+0x2ecfc>
   40d9c:	mov	r1, #2
   40da0:	b	3fe60 <__assert_fail@plt+0x2ec54>
   40da4:	mov	r1, #4
   40da8:	b	3fbf8 <__assert_fail@plt+0x2e9ec>
   40dac:	mov	r1, #1
   40db0:	b	3fa2c <__assert_fail@plt+0x2e820>
   40db4:	mov	r1, #2
   40db8:	b	3fb80 <__assert_fail@plt+0x2e974>
   40dbc:	cmp	r7, #8
   40dc0:	bhi	40fdc <__assert_fail@plt+0x2fdd0>
   40dc4:	add	r3, ip, r7
   40dc8:	cmp	r4, r3
   40dcc:	bls	41018 <__assert_fail@plt+0x2fe0c>
   40dd0:	mov	r3, r7
   40dd4:	sub	r2, r3, #1
   40dd8:	cmp	r2, #7
   40ddc:	bhi	410bc <__assert_fail@plt+0x2feb0>
   40de0:	mov	r1, r3
   40de4:	ldr	r3, [pc, #-2016]	; 4060c <__assert_fail@plt+0x2f400>
   40de8:	mov	r0, ip
   40dec:	ldr	r3, [r3]
   40df0:	blx	r3
   40df4:	ldr	r3, [sp, #44]	; 0x2c
   40df8:	add	r3, r3, r7
   40dfc:	str	r3, [sp, #44]	; 0x2c
   40e00:	b	402b4 <__assert_fail@plt+0x2f0a8>
   40e04:	cmp	r7, #8
   40e08:	bhi	40f90 <__assert_fail@plt+0x2fd84>
   40e0c:	add	r3, ip, r7
   40e10:	cmp	r4, r3
   40e14:	bls	40fcc <__assert_fail@plt+0x2fdc0>
   40e18:	mov	r3, r7
   40e1c:	sub	r2, r3, #1
   40e20:	cmp	r2, #7
   40e24:	bhi	410b0 <__assert_fail@plt+0x2fea4>
   40e28:	mov	r1, r3
   40e2c:	ldr	r3, [pc, #-2088]	; 4060c <__assert_fail@plt+0x2f400>
   40e30:	mov	r0, ip
   40e34:	ldr	r3, [r3]
   40e38:	blx	r3
   40e3c:	mov	r2, r0
   40e40:	mov	r3, r1
   40e44:	ldr	r1, [sp, #44]	; 0x2c
   40e48:	add	r1, r1, r7
   40e4c:	str	r1, [sp, #44]	; 0x2c
   40e50:	b	408a8 <__assert_fail@plt+0x2f69c>
   40e54:	sub	r1, r4, r0
   40e58:	sub	r2, r1, #1
   40e5c:	cmp	r2, #7
   40e60:	bhi	3fa94 <__assert_fail@plt+0x2e888>
   40e64:	b	40c24 <__assert_fail@plt+0x2fa18>
   40e68:	sub	r1, r4, r0
   40e6c:	sub	r3, r1, #1
   40e70:	cmp	r3, #7
   40e74:	bhi	40a38 <__assert_fail@plt+0x2f82c>
   40e78:	b	40cec <__assert_fail@plt+0x2fae0>
   40e7c:	sub	r1, r4, ip
   40e80:	sub	r3, r1, #1
   40e84:	cmp	r3, #7
   40e88:	bhi	406ac <__assert_fail@plt+0x2f4a0>
   40e8c:	b	40c64 <__assert_fail@plt+0x2fa58>
   40e90:	sub	r1, r4, ip
   40e94:	sub	r3, r1, #1
   40e98:	cmp	r3, #7
   40e9c:	bhi	403bc <__assert_fail@plt+0x2f1b0>
   40ea0:	b	40ccc <__assert_fail@plt+0x2fac0>
   40ea4:	sub	r1, r4, ip
   40ea8:	sub	r3, r1, #1
   40eac:	cmp	r3, #7
   40eb0:	bhi	40184 <__assert_fail@plt+0x2ef78>
   40eb4:	b	40be4 <__assert_fail@plt+0x2f9d8>
   40eb8:	sub	r1, r4, ip
   40ebc:	sub	r3, r1, #1
   40ec0:	cmp	r3, #7
   40ec4:	bhi	40154 <__assert_fail@plt+0x2ef48>
   40ec8:	b	40c04 <__assert_fail@plt+0x2f9f8>
   40ecc:	sub	r1, r4, ip
   40ed0:	sub	r3, r1, #1
   40ed4:	cmp	r3, #7
   40ed8:	bhi	3fc54 <__assert_fail@plt+0x2ea48>
   40edc:	b	40d10 <__assert_fail@plt+0x2fb04>
   40ee0:	sub	r1, r4, ip
   40ee4:	sub	r3, r1, #1
   40ee8:	cmp	r3, #7
   40eec:	bhi	3fbbc <__assert_fail@plt+0x2e9b0>
   40ef0:	b	40d30 <__assert_fail@plt+0x2fb24>
   40ef4:	sub	r1, r4, ip
   40ef8:	sub	r3, r1, #1
   40efc:	cmp	r3, #7
   40f00:	bhi	3fb44 <__assert_fail@plt+0x2e938>
   40f04:	b	40cac <__assert_fail@plt+0x2faa0>
   40f08:	sub	r1, r4, ip
   40f0c:	sub	r3, r1, #1
   40f10:	cmp	r3, #7
   40f14:	bhi	3fa68 <__assert_fail@plt+0x2e85c>
   40f18:	b	40c44 <__assert_fail@plt+0x2fa38>
   40f1c:	sub	r1, r4, ip
   40f20:	sub	r3, r1, #1
   40f24:	cmp	r3, #7
   40f28:	bhi	3f9f0 <__assert_fail@plt+0x2e7e4>
   40f2c:	b	40c8c <__assert_fail@plt+0x2fa80>
   40f30:	ldr	r1, [sp, #32]
   40f34:	sub	r3, r1, #1
   40f38:	cmp	r3, #7
   40f3c:	bhi	4029c <__assert_fail@plt+0x2f090>
   40f40:	ldr	r3, [pc, #-2364]	; 4060c <__assert_fail@plt+0x2f400>
   40f44:	mov	r0, ip
   40f48:	ldr	r3, [r3]
   40f4c:	blx	r3
   40f50:	b	402a4 <__assert_fail@plt+0x2f098>
   40f54:	ldr	r1, [sp, #32]
   40f58:	sub	r3, r1, #1
   40f5c:	cmp	r3, #7
   40f60:	bhi	40890 <__assert_fail@plt+0x2f684>
   40f64:	ldr	r3, [pc, #-2400]	; 4060c <__assert_fail@plt+0x2f400>
   40f68:	mov	r0, ip
   40f6c:	ldr	r3, [r3]
   40f70:	blx	r3
   40f74:	mov	r2, r0
   40f78:	mov	r3, r1
   40f7c:	b	40898 <__assert_fail@plt+0x2f68c>
   40f80:	sub	r1, r4, ip
   40f84:	b	40f58 <__assert_fail@plt+0x2fd4c>
   40f88:	sub	r1, r4, ip
   40f8c:	b	40f34 <__assert_fail@plt+0x2fd28>
   40f90:	mov	r3, #5
   40f94:	str	r3, [sp]
   40f98:	ldr	r2, [pc, #-2448]	; 40610 <__assert_fail@plt+0x2f404>
   40f9c:	mov	r3, r7
   40fa0:	ldr	r1, [pc, #-2452]	; 40614 <__assert_fail@plt+0x2f408>
   40fa4:	mov	r0, #0
   40fa8:	bl	11200 <dcngettext@plt>
   40fac:	mov	r1, r7
   40fb0:	mov	r2, #8
   40fb4:	bl	548ac <error@@Base>
   40fb8:	ldr	ip, [sp, #44]	; 0x2c
   40fbc:	add	r3, ip, #8
   40fc0:	cmp	r4, r3
   40fc4:	movhi	r1, #8
   40fc8:	bhi	40e2c <__assert_fail@plt+0x2fc20>
   40fcc:	cmp	r4, ip
   40fd0:	bls	410b0 <__assert_fail@plt+0x2fea4>
   40fd4:	sub	r3, r4, ip
   40fd8:	b	40e1c <__assert_fail@plt+0x2fc10>
   40fdc:	mov	r3, #5
   40fe0:	str	r3, [sp]
   40fe4:	ldr	r2, [pc, #-2524]	; 40610 <__assert_fail@plt+0x2f404>
   40fe8:	mov	r3, r7
   40fec:	ldr	r1, [pc, #-2528]	; 40614 <__assert_fail@plt+0x2f408>
   40ff0:	mov	r0, #0
   40ff4:	bl	11200 <dcngettext@plt>
   40ff8:	mov	r1, r7
   40ffc:	mov	r2, #8
   41000:	bl	548ac <error@@Base>
   41004:	ldr	ip, [sp, #44]	; 0x2c
   41008:	add	r3, ip, #8
   4100c:	cmp	r4, r3
   41010:	movhi	r1, #8
   41014:	bhi	40de4 <__assert_fail@plt+0x2fbd8>
   41018:	cmp	r4, ip
   4101c:	bls	410bc <__assert_fail@plt+0x2feb0>
   41020:	sub	r3, r4, ip
   41024:	b	40dd4 <__assert_fail@plt+0x2fbc8>
   41028:	ldr	r8, [sp, #32]
   4102c:	mov	r3, #5
   41030:	str	r3, [sp]
   41034:	ldr	r2, [pc, #-2604]	; 40610 <__assert_fail@plt+0x2f404>
   41038:	mov	r3, r8
   4103c:	ldr	r1, [pc, #-2608]	; 40614 <__assert_fail@plt+0x2f408>
   41040:	mov	r0, #0
   41044:	bl	11200 <dcngettext@plt>
   41048:	mov	r1, r8
   4104c:	mov	r2, #8
   41050:	bl	548ac <error@@Base>
   41054:	ldr	ip, [sp, #44]	; 0x2c
   41058:	add	r3, ip, #8
   4105c:	cmp	r4, r3
   41060:	movhi	r1, #8
   41064:	bhi	40f40 <__assert_fail@plt+0x2fd34>
   41068:	b	40294 <__assert_fail@plt+0x2f088>
   4106c:	ldr	r8, [sp, #32]
   41070:	mov	r3, #5
   41074:	str	r3, [sp]
   41078:	ldr	r2, [pc, #-2672]	; 40610 <__assert_fail@plt+0x2f404>
   4107c:	mov	r3, r8
   41080:	ldr	r1, [pc, #-2676]	; 40614 <__assert_fail@plt+0x2f408>
   41084:	mov	r0, #0
   41088:	bl	11200 <dcngettext@plt>
   4108c:	mov	r1, r8
   41090:	mov	r2, #8
   41094:	bl	548ac <error@@Base>
   41098:	ldr	ip, [sp, #44]	; 0x2c
   4109c:	add	r3, ip, #8
   410a0:	cmp	r4, r3
   410a4:	movhi	r1, #8
   410a8:	bhi	40f64 <__assert_fail@plt+0x2fd58>
   410ac:	b	40888 <__assert_fail@plt+0x2f67c>
   410b0:	mov	r2, #0
   410b4:	mov	r3, #0
   410b8:	b	40e44 <__assert_fail@plt+0x2fc38>
   410bc:	mov	r0, #0
   410c0:	mov	r1, #0
   410c4:	b	40df4 <__assert_fail@plt+0x2fbe8>
   410c8:	mov	r2, #5
   410cc:	ldr	r1, [pc, #-2748]	; 40618 <__assert_fail@plt+0x2f40c>
   410d0:	mov	r0, #0
   410d4:	bl	10f90 <dcgettext@plt>
   410d8:	bl	10f24 <printf@plt>
   410dc:	b	3f904 <__assert_fail@plt+0x2e6f8>
   410e0:	mov	r2, #5
   410e4:	ldr	r1, [pc, #-2768]	; 4061c <__assert_fail@plt+0x2f410>
   410e8:	mov	r0, #0
   410ec:	bl	10f90 <dcgettext@plt>
   410f0:	ldr	r3, [pc, #-2776]	; 40620 <__assert_fail@plt+0x2f414>
   410f4:	cmp	fp, #160	; 0xa0
   410f8:	ldr	r1, [pc, #-2780]	; 40624 <__assert_fail@plt+0x2f418>
   410fc:	movne	r1, r3
   41100:	bl	10f24 <printf@plt>
   41104:	b	3f904 <__assert_fail@plt+0x2e6f8>
   41108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4110c:	sub	sp, sp, #44	; 0x2c
   41110:	ldr	sl, [pc, #1204]	; 415cc <__assert_fail@plt+0x303c0>
   41114:	cmp	r2, #8
   41118:	mov	r7, r2
   4111c:	mov	r6, r1
   41120:	mov	r4, r0
   41124:	str	r3, [sp, #20]
   41128:	movcc	r3, r2
   4112c:	movcs	r3, #8
   41130:	str	r0, [sp, #24]
   41134:	str	r3, [sp, #28]
   41138:	ldr	r3, [sp, #24]
   4113c:	add	r5, r4, #1
   41140:	sub	r1, r4, r3
   41144:	ldr	r3, [sp, #20]
   41148:	cmp	r5, r6
   4114c:	add	r1, r1, r3
   41150:	bhi	4140c <__assert_fail@plt+0x30200>
   41154:	ldr	r0, [pc, #1140]	; 415d0 <__assert_fail@plt+0x303c4>
   41158:	bl	10f24 <printf@plt>
   4115c:	cmp	r5, r6
   41160:	bne	41188 <__assert_fail@plt+0x2ff7c>
   41164:	cmp	r4, r6
   41168:	bcc	41188 <__assert_fail@plt+0x2ff7c>
   4116c:	mov	r2, #5
   41170:	ldr	r1, [pc, #1116]	; 415d4 <__assert_fail@plt+0x303c8>
   41174:	mov	r0, #0
   41178:	bl	10f90 <dcgettext@plt>
   4117c:	bl	10f24 <printf@plt>
   41180:	add	sp, sp, #44	; 0x2c
   41184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41188:	ldr	r3, [sl]
   4118c:	mov	r1, #1
   41190:	mov	r0, r4
   41194:	blx	r3
   41198:	cmp	r0, #7
   4119c:	ldrls	pc, [pc, r0, lsl #2]
   411a0:	b	413a8 <__assert_fail@plt+0x3019c>
   411a4:	andeq	r1, r4, ip, ror #2
   411a8:	andeq	r1, r4, r8, lsr #7
   411ac:	andeq	r1, r4, r8, lsr #7
   411b0:	andeq	r1, r4, r8, lsr #7
   411b4:	andeq	r1, r4, ip, lsl #6
   411b8:			; <UNDEFINED> instruction: 0x000412b0
   411bc:	andeq	r1, r4, ip, lsr #4
   411c0:	andeq	r1, r4, r4, asr #3
   411c4:	cmp	r7, #8
   411c8:	add	fp, r5, r7
   411cc:	bhi	4147c <__assert_fail@plt+0x30270>
   411d0:	cmp	r6, fp
   411d4:	movhi	r1, r7
   411d8:	bls	414b0 <__assert_fail@plt+0x302a4>
   411dc:	sub	r3, r1, #1
   411e0:	cmp	r3, #7
   411e4:	bhi	414f8 <__assert_fail@plt+0x302ec>
   411e8:	mov	r0, r5
   411ec:	ldr	r3, [sl]
   411f0:	blx	r3
   411f4:	mov	r8, r0
   411f8:	mov	r9, r1
   411fc:	mov	r3, r6
   41200:	mov	r2, #0
   41204:	add	r1, sp, #36	; 0x24
   41208:	mov	r0, fp
   4120c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41210:	ldr	r4, [sp, #36]	; 0x24
   41214:	add	r4, fp, r4
   41218:	adds	r3, r8, r0
   4121c:	str	r3, [sp, #8]
   41220:	adc	r3, r9, r1
   41224:	str	r3, [sp, #12]
   41228:	b	41350 <__assert_fail@plt+0x30144>
   4122c:	cmp	r7, #8
   41230:	add	fp, r5, r7
   41234:	bhi	41524 <__assert_fail@plt+0x30318>
   41238:	cmp	r6, fp
   4123c:	bls	414cc <__assert_fail@plt+0x302c0>
   41240:	sub	r3, r7, #1
   41244:	cmp	r3, #7
   41248:	mov	r4, r7
   4124c:	movls	r1, r7
   41250:	bhi	415c0 <__assert_fail@plt+0x303b4>
   41254:	mov	r0, r5
   41258:	ldr	r3, [sl]
   4125c:	blx	r3
   41260:	cmp	r7, #8
   41264:	mov	r8, r0
   41268:	mov	r9, r1
   4126c:	bhi	41584 <__assert_fail@plt+0x30378>
   41270:	add	r3, fp, r4
   41274:	cmp	r6, r3
   41278:	bhi	41288 <__assert_fail@plt+0x3007c>
   4127c:	cmp	r6, fp
   41280:	bls	41514 <__assert_fail@plt+0x30308>
   41284:	sub	r4, r6, fp
   41288:	sub	r3, r4, #1
   4128c:	cmp	r3, #7
   41290:	bhi	41514 <__assert_fail@plt+0x30308>
   41294:	mov	r1, r4
   41298:	ldr	r3, [sl]
   4129c:	mov	r0, fp
   412a0:	blx	r3
   412a4:	strd	r0, [sp, #8]
   412a8:	add	r4, fp, r7
   412ac:	b	41350 <__assert_fail@plt+0x30144>
   412b0:	cmp	r7, #4
   412b4:	add	r8, r5, r7
   412b8:	bhi	4142c <__assert_fail@plt+0x30220>
   412bc:	cmp	r8, r6
   412c0:	movcc	r1, r7
   412c4:	bcs	41460 <__assert_fail@plt+0x30254>
   412c8:	sub	r3, r1, #1
   412cc:	cmp	r3, #7
   412d0:	bhi	414ec <__assert_fail@plt+0x302e0>
   412d4:	mov	r0, r5
   412d8:	ldr	r3, [sl]
   412dc:	blx	r3
   412e0:	str	r0, [sp, #80]	; 0x50
   412e4:	mov	r2, r7
   412e8:	mov	r1, #0
   412ec:	bl	3ca6c <__assert_fail@plt+0x2b860>
   412f0:	mov	r2, #5
   412f4:	ldr	r1, [pc, #732]	; 415d8 <__assert_fail@plt+0x303cc>
   412f8:	mov	r0, #0
   412fc:	bl	10f90 <dcgettext@plt>
   41300:	mov	r4, r8
   41304:	bl	10f24 <printf@plt>
   41308:	b	41138 <__assert_fail@plt+0x2ff2c>
   4130c:	mov	r3, r6
   41310:	mov	r2, #0
   41314:	add	r1, sp, #36	; 0x24
   41318:	mov	r0, r5
   4131c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41320:	ldr	r4, [sp, #36]	; 0x24
   41324:	mov	r3, r6
   41328:	add	r4, r5, r4
   4132c:	mov	r2, #0
   41330:	mov	r8, r0
   41334:	mov	r9, r1
   41338:	mov	r0, r4
   4133c:	add	r1, sp, #36	; 0x24
   41340:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41344:	ldr	r3, [sp, #36]	; 0x24
   41348:	add	r4, r4, r3
   4134c:	strd	r0, [sp, #8]
   41350:	ldr	r5, [sp, #80]	; 0x50
   41354:	mov	fp, #0
   41358:	adds	r0, r5, r8
   4135c:	adc	r1, fp, r9
   41360:	mov	r2, r7
   41364:	bl	3ca6c <__assert_fail@plt+0x2b860>
   41368:	ldr	r3, [sp, #8]
   4136c:	mov	r2, r7
   41370:	adds	r0, r5, r3
   41374:	ldr	r3, [sp, #12]
   41378:	adc	r1, fp, r3
   4137c:	bl	3ca6c <__assert_fail@plt+0x2b860>
   41380:	ldrd	r2, [sp, #8]
   41384:	cmp	r3, r9
   41388:	cmpeq	r2, r8
   4138c:	beq	413ec <__assert_fail@plt+0x301e0>
   41390:	bcc	413cc <__assert_fail@plt+0x301c0>
   41394:	ldr	r3, [pc, #576]	; 415dc <__assert_fail@plt+0x303d0>
   41398:	mov	r0, #10
   4139c:	ldr	r1, [r3]
   413a0:	bl	11158 <putc@plt>
   413a4:	b	41138 <__assert_fail@plt+0x2ff2c>
   413a8:	mov	r8, r0
   413ac:	mov	r2, #5
   413b0:	ldr	r1, [pc, #552]	; 415e0 <__assert_fail@plt+0x303d4>
   413b4:	mov	r0, #0
   413b8:	bl	10f90 <dcgettext@plt>
   413bc:	mov	r1, r8
   413c0:	bl	548ac <error@@Base>
   413c4:	add	sp, sp, #44	; 0x2c
   413c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   413cc:	mov	r2, #5
   413d0:	ldr	r1, [pc, #524]	; 415e4 <__assert_fail@plt+0x303d8>
   413d4:	mov	r0, #0
   413d8:	bl	10f90 <dcgettext@plt>
   413dc:	ldr	r3, [pc, #504]	; 415dc <__assert_fail@plt+0x303d0>
   413e0:	ldr	r1, [r3]
   413e4:	bl	111c4 <fputs@plt>
   413e8:	b	41394 <__assert_fail@plt+0x30188>
   413ec:	mov	r2, #5
   413f0:	ldr	r1, [pc, #496]	; 415e8 <__assert_fail@plt+0x303dc>
   413f4:	mov	r0, fp
   413f8:	bl	10f90 <dcgettext@plt>
   413fc:	ldr	r3, [pc, #472]	; 415dc <__assert_fail@plt+0x303d0>
   41400:	ldr	r1, [r3]
   41404:	bl	111c4 <fputs@plt>
   41408:	b	41394 <__assert_fail@plt+0x30188>
   4140c:	mov	r2, #5
   41410:	ldr	r1, [pc, #468]	; 415ec <__assert_fail@plt+0x303e0>
   41414:	mov	r0, #0
   41418:	bl	10f90 <dcgettext@plt>
   4141c:	ldr	r1, [sp, #20]
   41420:	bl	54dd0 <warn@@Base>
   41424:	add	sp, sp, #44	; 0x2c
   41428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4142c:	mov	r3, #5
   41430:	str	r3, [sp]
   41434:	ldr	r2, [pc, #436]	; 415f0 <__assert_fail@plt+0x303e4>
   41438:	mov	r3, r7
   4143c:	ldr	r1, [pc, #432]	; 415f4 <__assert_fail@plt+0x303e8>
   41440:	mov	r0, #0
   41444:	bl	11200 <dcngettext@plt>
   41448:	add	r4, r4, #5
   4144c:	mov	r2, #4
   41450:	mov	r1, r7
   41454:	bl	548ac <error@@Base>
   41458:	cmp	r6, r4
   4145c:	bhi	415b8 <__assert_fail@plt+0x303ac>
   41460:	cmp	r5, r6
   41464:	bcs	414ec <__assert_fail@plt+0x302e0>
   41468:	sub	r1, r6, r5
   4146c:	sub	r3, r1, #1
   41470:	cmp	r3, #7
   41474:	bls	412d4 <__assert_fail@plt+0x300c8>
   41478:	b	414ec <__assert_fail@plt+0x302e0>
   4147c:	mov	r3, #5
   41480:	str	r3, [sp]
   41484:	ldr	r2, [pc, #356]	; 415f0 <__assert_fail@plt+0x303e4>
   41488:	mov	r3, r7
   4148c:	ldr	r1, [pc, #352]	; 415f4 <__assert_fail@plt+0x303e8>
   41490:	mov	r0, #0
   41494:	bl	11200 <dcngettext@plt>
   41498:	add	r4, r4, #9
   4149c:	mov	r2, #8
   414a0:	mov	r1, r7
   414a4:	bl	548ac <error@@Base>
   414a8:	cmp	r6, r4
   414ac:	bhi	415b0 <__assert_fail@plt+0x303a4>
   414b0:	cmp	r5, r6
   414b4:	bcs	414f8 <__assert_fail@plt+0x302ec>
   414b8:	sub	r1, r6, r5
   414bc:	sub	r3, r1, #1
   414c0:	cmp	r3, #7
   414c4:	bls	411e8 <__assert_fail@plt+0x2ffdc>
   414c8:	b	414f8 <__assert_fail@plt+0x302ec>
   414cc:	cmp	r5, r6
   414d0:	bcs	41504 <__assert_fail@plt+0x302f8>
   414d4:	sub	r1, r6, r5
   414d8:	sub	r3, r1, #1
   414dc:	cmp	r3, #7
   414e0:	bhi	41504 <__assert_fail@plt+0x302f8>
   414e4:	ldr	r4, [sp, #28]
   414e8:	b	41254 <__assert_fail@plt+0x30048>
   414ec:	mov	r0, #0
   414f0:	str	r0, [sp, #80]	; 0x50
   414f4:	b	412e4 <__assert_fail@plt+0x300d8>
   414f8:	mov	r8, #0
   414fc:	mov	r9, #0
   41500:	b	411fc <__assert_fail@plt+0x2fff0>
   41504:	ldr	r4, [sp, #28]
   41508:	mov	r8, #0
   4150c:	mov	r9, #0
   41510:	b	41270 <__assert_fail@plt+0x30064>
   41514:	mov	r2, #0
   41518:	mov	r3, #0
   4151c:	strd	r2, [sp, #8]
   41520:	b	412a8 <__assert_fail@plt+0x3009c>
   41524:	mov	r3, #5
   41528:	str	r3, [sp]
   4152c:	ldr	r2, [pc, #188]	; 415f0 <__assert_fail@plt+0x303e4>
   41530:	mov	r3, r7
   41534:	ldr	r1, [pc, #184]	; 415f4 <__assert_fail@plt+0x303e8>
   41538:	mov	r0, #0
   4153c:	bl	11200 <dcngettext@plt>
   41540:	mov	r1, r7
   41544:	mov	r2, #8
   41548:	bl	548ac <error@@Base>
   4154c:	add	r4, r4, #9
   41550:	cmp	r6, r4
   41554:	movhi	r1, #8
   41558:	movhi	r4, r1
   4155c:	bhi	41254 <__assert_fail@plt+0x30048>
   41560:	cmp	r5, r6
   41564:	bcs	41578 <__assert_fail@plt+0x3036c>
   41568:	sub	r1, r6, r5
   4156c:	sub	r3, r1, #1
   41570:	cmp	r3, #7
   41574:	bls	414e4 <__assert_fail@plt+0x302d8>
   41578:	ldr	r4, [sp, #28]
   4157c:	mov	r8, #0
   41580:	mov	r9, #0
   41584:	mov	r3, #5
   41588:	str	r3, [sp]
   4158c:	ldr	r2, [pc, #92]	; 415f0 <__assert_fail@plt+0x303e4>
   41590:	mov	r3, r7
   41594:	ldr	r1, [pc, #88]	; 415f4 <__assert_fail@plt+0x303e8>
   41598:	mov	r0, #0
   4159c:	bl	11200 <dcngettext@plt>
   415a0:	mov	r2, #8
   415a4:	mov	r1, r7
   415a8:	bl	548ac <error@@Base>
   415ac:	b	41270 <__assert_fail@plt+0x30064>
   415b0:	mov	r1, #8
   415b4:	b	411e8 <__assert_fail@plt+0x2ffdc>
   415b8:	mov	r1, #4
   415bc:	b	412d4 <__assert_fail@plt+0x300c8>
   415c0:	mov	r8, #0
   415c4:	mov	r9, #0
   415c8:	b	41270 <__assert_fail@plt+0x30064>
   415cc:	andeq	lr, r9, ip, asr sp
   415d0:	muleq	r7, ip, r6
   415d4:	andeq	lr, r7, r8, lsr #13
   415d8:	andeq	pc, r7, r0, asr #15
   415dc:	andeq	sl, r9, ip, lsr #8
   415e0:	ldrdeq	pc, [r7], -r0
   415e4:	ldrdeq	lr, [r7], -r8
   415e8:	andeq	lr, r7, r8, asr #13
   415ec:	andeq	pc, r7, r8, lsl #15
   415f0:			; <UNDEFINED> instruction: 0x0007e5b0
   415f4:	strdeq	lr, [r7], -ip
   415f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   415fc:	mov	r9, r0
   41600:	sub	sp, sp, #28
   41604:	ldr	ip, [r9, #32]
   41608:	ldr	sl, [r9, #16]
   4160c:	ldr	r0, [pc, #248]	; 4170c <__assert_fail@plt+0x30500>
   41610:	add	sl, sl, ip
   41614:	cmp	sl, r3
   41618:	mov	lr, r1
   4161c:	movcs	sl, r3
   41620:	str	r1, [sp, #12]
   41624:	ldr	r3, [pc, #228]	; 41710 <__assert_fail@plt+0x30504>
   41628:	add	r1, r2, r2, lsl #2
   4162c:	ldr	ip, [r0, #1440]	; 0x5a0
   41630:	add	r2, r2, r1, lsl #1
   41634:	ldr	r4, [lr]
   41638:	ldr	r1, [r3]
   4163c:	mov	r0, #10
   41640:	ldr	r8, [ip, r2, lsl #3]
   41644:	bl	11158 <putc@plt>
   41648:	cmp	r4, sl
   4164c:	bcc	416a8 <__assert_fail@plt+0x3049c>
   41650:	b	416ec <__assert_fail@plt+0x304e0>
   41654:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41658:	ldr	r4, [sp, #20]
   4165c:	add	r4, r5, r4
   41660:	strd	r0, [sp]
   41664:	mov	r1, fp
   41668:	ldr	r0, [pc, #164]	; 41714 <__assert_fail@plt+0x30508>
   4166c:	bl	10f24 <printf@plt>
   41670:	mov	r2, r8
   41674:	mov	r0, r6
   41678:	mov	r1, r7
   4167c:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   41680:	ldrd	r0, [sp]
   41684:	mov	r2, r8
   41688:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   4168c:	mov	r2, #5
   41690:	ldr	r1, [pc, #128]	; 41718 <__assert_fail@plt+0x3050c>
   41694:	mov	r0, #0
   41698:	bl	10f90 <dcgettext@plt>
   4169c:	bl	10f24 <printf@plt>
   416a0:	cmp	sl, r4
   416a4:	bls	416ec <__assert_fail@plt+0x304e0>
   416a8:	mov	r3, sl
   416ac:	mov	r2, #0
   416b0:	add	r1, sp, #20
   416b4:	mov	r0, r4
   416b8:	ldr	fp, [r9, #16]
   416bc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   416c0:	ldr	r5, [sp, #20]
   416c4:	sub	fp, r4, fp
   416c8:	add	r5, r4, r5
   416cc:	cmp	r5, sl
   416d0:	mov	r3, sl
   416d4:	mov	r2, #0
   416d8:	mov	r6, r0
   416dc:	mov	r7, r1
   416e0:	mov	r0, r5
   416e4:	add	r1, sp, #20
   416e8:	bne	41654 <__assert_fail@plt+0x30448>
   416ec:	ldr	r3, [pc, #28]	; 41710 <__assert_fail@plt+0x30504>
   416f0:	mov	r0, #10
   416f4:	ldr	r1, [r3]
   416f8:	bl	11158 <putc@plt>
   416fc:	ldr	r3, [sp, #12]
   41700:	str	r4, [r3]
   41704:	add	sp, sp, #28
   41708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4170c:	ldrdeq	ip, [r9], -r0
   41710:	andeq	sl, r9, ip, lsr #8
   41714:	muleq	r7, ip, r6
   41718:	strdeq	pc, [r7], -r4
   4171c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41720:	add	r1, r0, #12
   41724:	ldr	r4, [r0, #16]
   41728:	ldr	r5, [r0, #32]
   4172c:	sub	sp, sp, #12
   41730:	add	r0, r0, #8
   41734:	add	r5, r4, r5
   41738:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   4173c:	cmp	r4, r5
   41740:	bcs	4186c <__assert_fail@plt+0x30660>
   41744:	ldr	sl, [pc, #396]	; 418d8 <__assert_fail@plt+0x306cc>
   41748:	ldr	r9, [pc, #396]	; 418dc <__assert_fail@plt+0x306d0>
   4174c:	ldr	r8, [pc, #396]	; 418e0 <__assert_fail@plt+0x306d4>
   41750:	ldr	r7, [pc, #396]	; 418e4 <__assert_fail@plt+0x306d8>
   41754:	b	417c0 <__assert_fail@plt+0x305b4>
   41758:	cmp	r3, #1
   4175c:	beq	41818 <__assert_fail@plt+0x3060c>
   41760:	cmp	r3, #2
   41764:	bne	417b8 <__assert_fail@plt+0x305ac>
   41768:	mov	r2, #0
   4176c:	mov	r3, r5
   41770:	add	r1, sp, #4
   41774:	mov	r0, r4
   41778:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4177c:	ldr	fp, [sp, #4]
   41780:	add	fp, r4, fp
   41784:	sub	r1, r5, fp
   41788:	mov	r6, r0
   4178c:	mov	r0, fp
   41790:	bl	11104 <strnlen@plt>
   41794:	ldr	r1, [pc, #332]	; 418e8 <__assert_fail@plt+0x306dc>
   41798:	mov	r2, #5
   4179c:	add	r4, r0, #1
   417a0:	mov	r0, #0
   417a4:	bl	10f90 <dcgettext@plt>
   417a8:	mov	r2, fp
   417ac:	mov	r1, r6
   417b0:	add	r4, fp, r4
   417b4:	bl	10f24 <printf@plt>
   417b8:	cmp	r5, r4
   417bc:	bls	4186c <__assert_fail@plt+0x30660>
   417c0:	ldrb	r3, [r4], #1
   417c4:	cmp	r3, #3
   417c8:	beq	41878 <__assert_fail@plt+0x3066c>
   417cc:	bls	41758 <__assert_fail@plt+0x3054c>
   417d0:	cmp	r3, #4
   417d4:	beq	41850 <__assert_fail@plt+0x30644>
   417d8:	cmp	r3, #255	; 0xff
   417dc:	bne	417b8 <__assert_fail@plt+0x305ac>
   417e0:	mov	r2, #0
   417e4:	mov	r3, r5
   417e8:	add	r1, sp, #4
   417ec:	mov	r0, r4
   417f0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   417f4:	ldr	fp, [sp, #4]
   417f8:	add	fp, r4, fp
   417fc:	sub	r1, r5, fp
   41800:	mov	r6, r0
   41804:	mov	r0, fp
   41808:	bl	11104 <strnlen@plt>
   4180c:	mov	r2, #5
   41810:	mov	r1, r8
   41814:	b	4179c <__assert_fail@plt+0x30590>
   41818:	mov	r2, #0
   4181c:	mov	r3, r5
   41820:	add	r1, sp, #4
   41824:	mov	r0, r4
   41828:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4182c:	ldr	fp, [sp, #4]
   41830:	add	fp, r4, fp
   41834:	sub	r1, r5, fp
   41838:	mov	r6, r0
   4183c:	mov	r0, fp
   41840:	bl	11104 <strnlen@plt>
   41844:	mov	r2, #5
   41848:	mov	r1, r7
   4184c:	b	4179c <__assert_fail@plt+0x30590>
   41850:	mov	r2, #5
   41854:	mov	r1, r9
   41858:	mov	r0, #0
   4185c:	bl	10f90 <dcgettext@plt>
   41860:	bl	10f24 <printf@plt>
   41864:	cmp	r5, r4
   41868:	bhi	417c0 <__assert_fail@plt+0x305b4>
   4186c:	mov	r0, #1
   41870:	add	sp, sp, #12
   41874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41878:	mov	r3, r5
   4187c:	mov	r2, #0
   41880:	add	r1, sp, #4
   41884:	mov	r0, r4
   41888:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4188c:	ldr	r2, [sp, #4]
   41890:	mov	r3, r5
   41894:	add	r4, r4, r2
   41898:	add	r1, sp, #4
   4189c:	mov	r2, #0
   418a0:	mov	fp, r0
   418a4:	mov	r0, r4
   418a8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   418ac:	mov	r1, sl
   418b0:	mov	r2, #5
   418b4:	mov	r6, r0
   418b8:	ldr	r0, [sp, #4]
   418bc:	add	r4, r4, r0
   418c0:	mov	r0, #0
   418c4:	bl	10f90 <dcgettext@plt>
   418c8:	mov	r2, r6
   418cc:	mov	r1, fp
   418d0:	bl	10f24 <printf@plt>
   418d4:	b	417b8 <__assert_fail@plt+0x305ac>
   418d8:	andeq	pc, r7, r8, lsl #16
   418dc:	andeq	pc, r7, ip, lsr r8	; <UNPREDICTABLE>
   418e0:			; <UNDEFINED> instruction: 0x0007f8b0
   418e4:	andeq	pc, r7, r4, asr r8	; <UNPREDICTABLE>
   418e8:	andeq	pc, r7, r4, lsl #17
   418ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   418f0:	sub	sp, sp, #20
   418f4:	mov	r3, r2
   418f8:	mov	r7, r2
   418fc:	mov	r9, r1
   41900:	mov	r2, #0
   41904:	add	r1, sp, #12
   41908:	mov	r8, r0
   4190c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41910:	ldr	r4, [sp, #12]
   41914:	add	r5, r8, r4
   41918:	sub	r3, r7, r5
   4191c:	clz	r3, r3
   41920:	lsr	r3, r3, #5
   41924:	cmp	r0, #0
   41928:	moveq	r3, #1
   4192c:	cmp	r3, #0
   41930:	bne	41944 <__assert_fail@plt+0x30738>
   41934:	sub	r2, r7, r5
   41938:	cmp	r2, r0
   4193c:	mov	ip, r0
   41940:	bcs	41964 <__assert_fail@plt+0x30758>
   41944:	mov	r2, #5
   41948:	ldr	r1, [pc, #1976]	; 42108 <__assert_fail@plt+0x30efc>
   4194c:	mov	r0, #0
   41950:	bl	10f90 <dcgettext@plt>
   41954:	bl	54dd0 <warn@@Base>
   41958:	ldr	r0, [sp, #12]
   4195c:	add	sp, sp, #20
   41960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41964:	ldrb	sl, [r8, r4]
   41968:	mov	r0, r3
   4196c:	mov	r2, #5
   41970:	ldr	r1, [pc, #1940]	; 4210c <__assert_fail@plt+0x30f00>
   41974:	add	r4, r4, ip
   41978:	bl	10f90 <dcgettext@plt>
   4197c:	mov	r1, sl
   41980:	bl	10f24 <printf@plt>
   41984:	sub	r3, sl, #1
   41988:	add	r6, r5, #1
   4198c:	cmp	r3, #127	; 0x7f
   41990:	ldrls	pc, [pc, r3, lsl #2]
   41994:	b	41f40 <__assert_fail@plt+0x30d34>
   41998:	andeq	r1, r4, r0, lsr #24
   4199c:	andeq	r1, r4, r8, ror ip
   419a0:	andeq	r1, r4, r8, ror sp
   419a4:	ldrdeq	r1, [r4], -r8
   419a8:	andeq	r1, r4, r0, asr #30
   419ac:	andeq	r1, r4, r0, asr #30
   419b0:	andeq	r1, r4, r0, asr #30
   419b4:	andeq	r1, r4, r0, asr #30
   419b8:	andeq	r1, r4, r0, asr #30
   419bc:	andeq	r1, r4, r0, asr #30
   419c0:	andeq	r1, r4, r0, asr #30
   419c4:	andeq	r1, r4, r0, asr #30
   419c8:	andeq	r1, r4, r0, asr #30
   419cc:	andeq	r1, r4, r0, asr #30
   419d0:	andeq	r1, r4, r0, asr #30
   419d4:	andeq	r1, r4, r0, asr #30
   419d8:	andeq	r1, r4, r8, lsr #30
   419dc:	andeq	r1, r4, r4, lsr pc
   419e0:	andeq	r1, r4, r8, lsl sp
   419e4:	andeq	r1, r4, r4, lsr #26
   419e8:	andeq	r1, r4, r0, lsr sp
   419ec:	andeq	r1, r4, ip, lsr sp
   419f0:	andeq	r1, r4, r8, asr #26
   419f4:	andeq	r1, r4, r4, asr sp
   419f8:	andeq	r1, r4, r0, ror #26
   419fc:	andeq	r1, r4, r0, asr #30
   41a00:	andeq	r1, r4, r0, asr #30
   41a04:	andeq	r1, r4, r0, asr #30
   41a08:	andeq	r1, r4, r0, asr #30
   41a0c:	andeq	r1, r4, r0, asr #30
   41a10:	andeq	r1, r4, r0, asr #30
   41a14:	andeq	r1, r4, ip, ror #26
   41a18:	andeq	r1, r4, r0, asr #30
   41a1c:	andeq	r1, r4, r0, asr #30
   41a20:	andeq	r1, r4, r0, asr #30
   41a24:	andeq	r1, r4, r0, asr #30
   41a28:	andeq	r1, r4, r0, asr #30
   41a2c:	andeq	r1, r4, r0, asr #30
   41a30:	andeq	r1, r4, r0, asr #30
   41a34:	andeq	r1, r4, r0, asr #30
   41a38:	andeq	r1, r4, r0, asr #30
   41a3c:	andeq	r1, r4, r0, asr #30
   41a40:	andeq	r1, r4, r0, asr #30
   41a44:	andeq	r1, r4, r0, asr #30
   41a48:	andeq	r1, r4, r0, asr #30
   41a4c:	andeq	r1, r4, r0, asr #30
   41a50:	andeq	r1, r4, r0, asr #30
   41a54:	andeq	r1, r4, r0, asr #30
   41a58:	andeq	r1, r4, r0, asr #30
   41a5c:	andeq	r1, r4, r0, asr #30
   41a60:	andeq	r1, r4, r0, asr #30
   41a64:	andeq	r1, r4, r0, asr #30
   41a68:	andeq	r1, r4, r0, asr #30
   41a6c:	andeq	r1, r4, r0, asr #30
   41a70:	andeq	r1, r4, r0, asr #30
   41a74:	andeq	r1, r4, r0, asr #30
   41a78:	andeq	r1, r4, r0, asr #30
   41a7c:	andeq	r1, r4, r0, asr #30
   41a80:	andeq	r1, r4, r0, asr #30
   41a84:	andeq	r1, r4, r0, asr #30
   41a88:	andeq	r1, r4, r0, asr #30
   41a8c:	andeq	r1, r4, r0, asr #30
   41a90:	andeq	r1, r4, r0, asr #30
   41a94:	andeq	r1, r4, r0, asr #30
   41a98:	andeq	r1, r4, r0, asr #30
   41a9c:	andeq	r1, r4, r0, asr #30
   41aa0:	andeq	r1, r4, r0, asr #30
   41aa4:	andeq	r1, r4, r0, asr #30
   41aa8:	andeq	r1, r4, r0, asr #30
   41aac:	andeq	r1, r4, r0, asr #30
   41ab0:	andeq	r1, r4, r0, asr #30
   41ab4:	andeq	r1, r4, r0, asr #30
   41ab8:	andeq	r1, r4, r0, asr #30
   41abc:	andeq	r1, r4, r0, asr #30
   41ac0:	andeq	r1, r4, r0, asr #30
   41ac4:	andeq	r1, r4, r0, asr #30
   41ac8:	andeq	r1, r4, r0, asr #30
   41acc:	andeq	r1, r4, r0, asr #30
   41ad0:	andeq	r1, r4, r0, asr #30
   41ad4:	andeq	r1, r4, r0, asr #30
   41ad8:	andeq	r1, r4, r0, asr #30
   41adc:	andeq	r1, r4, r0, asr #30
   41ae0:	andeq	r1, r4, r0, asr #30
   41ae4:	andeq	r1, r4, r0, asr #30
   41ae8:	andeq	r1, r4, r0, asr #30
   41aec:	andeq	r1, r4, r0, asr #30
   41af0:	andeq	r1, r4, r0, asr #30
   41af4:	andeq	r1, r4, r0, asr #30
   41af8:	andeq	r1, r4, r0, asr #30
   41afc:	andeq	r1, r4, r0, asr #30
   41b00:	andeq	r1, r4, r0, asr #30
   41b04:	andeq	r1, r4, r0, asr #30
   41b08:	andeq	r1, r4, r0, asr #30
   41b0c:	andeq	r1, r4, r0, asr #30
   41b10:	andeq	r1, r4, r0, asr #30
   41b14:	andeq	r1, r4, r0, asr #30
   41b18:	andeq	r1, r4, r0, asr #30
   41b1c:	andeq	r1, r4, r0, asr #30
   41b20:	andeq	r1, r4, r0, asr #30
   41b24:	andeq	r1, r4, r0, asr #30
   41b28:	andeq	r1, r4, r0, asr #30
   41b2c:	andeq	r1, r4, r0, asr #30
   41b30:	andeq	r1, r4, r0, asr #30
   41b34:	andeq	r1, r4, r0, asr #30
   41b38:	andeq	r1, r4, r0, asr #30
   41b3c:	andeq	r1, r4, r0, asr #30
   41b40:	andeq	r1, r4, r0, asr #30
   41b44:	andeq	r1, r4, r0, asr #30
   41b48:	andeq	r1, r4, r0, asr #30
   41b4c:	andeq	r1, r4, r0, asr #30
   41b50:	andeq	r1, r4, r0, asr #30
   41b54:	andeq	r1, r4, r0, asr #30
   41b58:	andeq	r1, r4, r0, asr #30
   41b5c:	andeq	r1, r4, r0, asr #30
   41b60:	andeq	r1, r4, r0, asr #30
   41b64:	andeq	r1, r4, r0, asr #30
   41b68:	andeq	r1, r4, r0, asr #30
   41b6c:	andeq	r1, r4, r0, asr #30
   41b70:	andeq	r1, r4, r0, asr #30
   41b74:	andeq	r1, r4, r0, asr #30
   41b78:	andeq	r1, r4, r0, asr #30
   41b7c:	andeq	r1, r4, r0, asr #30
   41b80:	andeq	r1, r4, r0, asr #30
   41b84:	andeq	r1, r4, r0, asr #30
   41b88:	andeq	r1, r4, r0, asr #30
   41b8c:	andeq	r1, r4, r0, asr #30
   41b90:	andeq	r1, r4, r0, asr #30
   41b94:	muleq	r4, r8, fp
   41b98:	ldr	r3, [sp, #12]
   41b9c:	ldr	r0, [pc, #1388]	; 42110 <__assert_fail@plt+0x30f04>
   41ba0:	sub	r3, r4, r3
   41ba4:	add	r5, r5, r3
   41ba8:	bl	11014 <puts@plt>
   41bac:	cmp	r6, r5
   41bb0:	bcs	41c14 <__assert_fail@plt+0x30a08>
   41bb4:	ldr	r8, [pc, #1368]	; 42114 <__assert_fail@plt+0x30f08>
   41bb8:	ldr	fp, [pc, #1368]	; 42118 <__assert_fail@plt+0x30f0c>
   41bbc:	ldr	sl, [pc, #1368]	; 4211c <__assert_fail@plt+0x30f10>
   41bc0:	ldr	r9, [pc, #1368]	; 42120 <__assert_fail@plt+0x30f14>
   41bc4:	mov	r3, r5
   41bc8:	mov	r0, r6
   41bcc:	mov	r2, #0
   41bd0:	add	r1, sp, #12
   41bd4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41bd8:	ldr	r3, [sp, #12]
   41bdc:	add	r6, r6, r3
   41be0:	cmp	r0, #2
   41be4:	beq	4208c <__assert_fail@plt+0x30e80>
   41be8:	cmp	r0, #3
   41bec:	beq	41fc8 <__assert_fail@plt+0x30dbc>
   41bf0:	cmp	r0, #1
   41bf4:	beq	41fb4 <__assert_fail@plt+0x30da8>
   41bf8:	mov	r7, r0
   41bfc:	ldr	r1, [pc, #1312]	; 42124 <__assert_fail@plt+0x30f18>
   41c00:	mov	r2, #5
   41c04:	mov	r0, #0
   41c08:	bl	10f90 <dcgettext@plt>
   41c0c:	mov	r1, r7
   41c10:	bl	10f24 <printf@plt>
   41c14:	mov	r0, r4
   41c18:	add	sp, sp, #20
   41c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41c20:	mov	r2, #5
   41c24:	ldr	r1, [pc, #1276]	; 42128 <__assert_fail@plt+0x30f1c>
   41c28:	mov	r0, #0
   41c2c:	bl	10f90 <dcgettext@plt>
   41c30:	bl	10f24 <printf@plt>
   41c34:	ldr	r3, [pc, #1264]	; 4212c <__assert_fail@plt+0x30f20>
   41c38:	mov	r2, #0
   41c3c:	add	r1, r3, #1440	; 0x5a0
   41c40:	mov	r6, #0
   41c44:	strh	r2, [r1, #40]	; 0x28
   41c48:	mov	r7, #0
   41c4c:	add	r1, r3, #1456	; 0x5b0
   41c50:	str	r2, [r3, #1456]	; 0x5b0
   41c54:	str	r2, [r3, #1468]	; 0x5bc
   41c58:	str	r2, [r3, #1476]	; 0x5c4
   41c5c:	str	r2, [r3, #1484]	; 0x5cc
   41c60:	mov	r2, #1
   41c64:	str	r9, [r3, #1472]	; 0x5c0
   41c68:	strd	r6, [r1, #-8]
   41c6c:	str	r2, [r3, #1460]	; 0x5b4
   41c70:	str	r2, [r3, #1464]	; 0x5b8
   41c74:	b	41c14 <__assert_fail@plt+0x30a08>
   41c78:	ldr	r3, [sp, #12]
   41c7c:	sub	r3, r4, r3
   41c80:	sub	r1, r3, #1
   41c84:	cmp	r1, #8
   41c88:	bhi	420dc <__assert_fail@plt+0x30ed0>
   41c8c:	add	r5, r5, r3
   41c90:	cmp	r7, r5
   41c94:	bhi	41ca4 <__assert_fail@plt+0x30a98>
   41c98:	cmp	r7, r6
   41c9c:	bls	420d0 <__assert_fail@plt+0x30ec4>
   41ca0:	sub	r1, r7, r6
   41ca4:	sub	r3, r1, #1
   41ca8:	cmp	r3, #7
   41cac:	bhi	420d0 <__assert_fail@plt+0x30ec4>
   41cb0:	ldr	r3, [pc, #1144]	; 42130 <__assert_fail@plt+0x30f24>
   41cb4:	mov	r0, r6
   41cb8:	ldr	r3, [r3]
   41cbc:	blx	r3
   41cc0:	mov	r6, r0
   41cc4:	mov	r7, r1
   41cc8:	ldr	r1, [pc, #1124]	; 42134 <__assert_fail@plt+0x30f28>
   41ccc:	mov	r2, #5
   41cd0:	mov	r0, #0
   41cd4:	mov	r5, r0
   41cd8:	bl	10f90 <dcgettext@plt>
   41cdc:	mov	r2, r6
   41ce0:	mov	r3, r7
   41ce4:	str	r5, [sp]
   41ce8:	mov	r8, r0
   41cec:	ldr	r0, [pc, #1092]	; 42138 <__assert_fail@plt+0x30f2c>
   41cf0:	bl	3c744 <__assert_fail@plt+0x2b538>
   41cf4:	mov	r1, r0
   41cf8:	mov	r0, r8
   41cfc:	bl	10f24 <printf@plt>
   41d00:	ldr	r3, [pc, #1060]	; 4212c <__assert_fail@plt+0x30f20>
   41d04:	add	r2, r3, #1456	; 0x5b0
   41d08:	str	r5, [r3, #1456]	; 0x5b0
   41d0c:	strb	r5, [r3, #1480]	; 0x5c8
   41d10:	strd	r6, [r2, #-8]
   41d14:	b	41c14 <__assert_fail@plt+0x30a08>
   41d18:	ldr	r0, [pc, #1052]	; 4213c <__assert_fail@plt+0x30f30>
   41d1c:	bl	11014 <puts@plt>
   41d20:	b	41c14 <__assert_fail@plt+0x30a08>
   41d24:	ldr	r0, [pc, #1044]	; 42140 <__assert_fail@plt+0x30f34>
   41d28:	bl	11014 <puts@plt>
   41d2c:	b	41c14 <__assert_fail@plt+0x30a08>
   41d30:	ldr	r0, [pc, #1036]	; 42144 <__assert_fail@plt+0x30f38>
   41d34:	bl	11014 <puts@plt>
   41d38:	b	41c14 <__assert_fail@plt+0x30a08>
   41d3c:	ldr	r0, [pc, #1028]	; 42148 <__assert_fail@plt+0x30f3c>
   41d40:	bl	11014 <puts@plt>
   41d44:	b	41c14 <__assert_fail@plt+0x30a08>
   41d48:	ldr	r0, [pc, #1020]	; 4214c <__assert_fail@plt+0x30f40>
   41d4c:	bl	11014 <puts@plt>
   41d50:	b	41c14 <__assert_fail@plt+0x30a08>
   41d54:	ldr	r0, [pc, #1012]	; 42150 <__assert_fail@plt+0x30f44>
   41d58:	bl	11014 <puts@plt>
   41d5c:	b	41c14 <__assert_fail@plt+0x30a08>
   41d60:	ldr	r0, [pc, #1004]	; 42154 <__assert_fail@plt+0x30f48>
   41d64:	bl	11014 <puts@plt>
   41d68:	b	41c14 <__assert_fail@plt+0x30a08>
   41d6c:	ldr	r0, [pc, #996]	; 42158 <__assert_fail@plt+0x30f4c>
   41d70:	bl	11014 <puts@plt>
   41d74:	b	41c14 <__assert_fail@plt+0x30a08>
   41d78:	mov	r2, #5
   41d7c:	ldr	r1, [pc, #984]	; 4215c <__assert_fail@plt+0x30f50>
   41d80:	mov	r0, #0
   41d84:	bl	10f90 <dcgettext@plt>
   41d88:	bl	10f24 <printf@plt>
   41d8c:	mov	r2, #5
   41d90:	ldr	r1, [pc, #968]	; 42160 <__assert_fail@plt+0x30f54>
   41d94:	mov	r0, #0
   41d98:	bl	10f90 <dcgettext@plt>
   41d9c:	bl	10f24 <printf@plt>
   41da0:	ldr	r2, [pc, #900]	; 4212c <__assert_fail@plt+0x30f20>
   41da4:	ldr	r0, [pc, #952]	; 42164 <__assert_fail@plt+0x30f58>
   41da8:	add	r5, r4, #1
   41dac:	ldr	r3, [r2, #1484]	; 0x5cc
   41db0:	mov	r9, #0
   41db4:	add	r3, r3, #1
   41db8:	mov	r1, r3
   41dbc:	str	r3, [r2, #1484]	; 0x5cc
   41dc0:	bl	10f24 <printf@plt>
   41dc4:	sub	r1, r7, r6
   41dc8:	mov	r0, r6
   41dcc:	bl	11104 <strnlen@plt>
   41dd0:	add	r5, r6, r5
   41dd4:	mov	r3, r7
   41dd8:	mov	r2, r9
   41ddc:	add	r1, sp, #12
   41de0:	mov	sl, r0
   41de4:	mov	r0, r5
   41de8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41dec:	str	r9, [sp]
   41df0:	mov	r2, r0
   41df4:	mov	r3, r1
   41df8:	ldr	r0, [pc, #788]	; 42114 <__assert_fail@plt+0x30f08>
   41dfc:	bl	3c744 <__assert_fail@plt+0x2b538>
   41e00:	mov	r1, r0
   41e04:	ldr	r0, [pc, #860]	; 42168 <__assert_fail@plt+0x30f5c>
   41e08:	bl	10f24 <printf@plt>
   41e0c:	ldr	r3, [sp, #12]
   41e10:	mov	r2, r9
   41e14:	add	r5, r5, r3
   41e18:	mov	r0, r5
   41e1c:	mov	r3, r7
   41e20:	add	r1, sp, #12
   41e24:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41e28:	str	r9, [sp]
   41e2c:	mov	r2, r0
   41e30:	mov	r3, r1
   41e34:	ldr	r0, [pc, #728]	; 42114 <__assert_fail@plt+0x30f08>
   41e38:	bl	3c744 <__assert_fail@plt+0x2b538>
   41e3c:	mov	r1, r0
   41e40:	ldr	r0, [pc, #800]	; 42168 <__assert_fail@plt+0x30f5c>
   41e44:	bl	10f24 <printf@plt>
   41e48:	ldr	r3, [sp, #12]
   41e4c:	mov	r2, r9
   41e50:	add	r5, r5, r3
   41e54:	mov	r0, r5
   41e58:	mov	r3, r7
   41e5c:	add	r1, sp, #12
   41e60:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41e64:	str	r9, [sp]
   41e68:	mov	r2, r0
   41e6c:	mov	r3, r1
   41e70:	ldr	r0, [pc, #668]	; 42114 <__assert_fail@plt+0x30f08>
   41e74:	bl	3c744 <__assert_fail@plt+0x2b538>
   41e78:	mov	r1, r0
   41e7c:	ldr	r0, [pc, #740]	; 42168 <__assert_fail@plt+0x30f5c>
   41e80:	bl	10f24 <printf@plt>
   41e84:	ldr	r3, [sp, #12]
   41e88:	mov	r1, sl
   41e8c:	add	r5, r5, r3
   41e90:	sub	r8, r5, r8
   41e94:	sub	r5, r7, r5
   41e98:	clz	r5, r5
   41e9c:	lsr	r5, r5, #5
   41ea0:	mov	r2, r6
   41ea4:	ldr	r0, [pc, #704]	; 4216c <__assert_fail@plt+0x30f60>
   41ea8:	cmp	r8, r4
   41eac:	moveq	r8, r5
   41eb0:	orrne	r8, r5, #1
   41eb4:	bl	10f24 <printf@plt>
   41eb8:	cmp	r8, r9
   41ebc:	beq	41c14 <__assert_fail@plt+0x30a08>
   41ec0:	mov	r2, #5
   41ec4:	ldr	r1, [pc, #676]	; 42170 <__assert_fail@plt+0x30f64>
   41ec8:	mov	r0, r9
   41ecc:	bl	10f90 <dcgettext@plt>
   41ed0:	bl	54dd0 <warn@@Base>
   41ed4:	b	41c14 <__assert_fail@plt+0x30a08>
   41ed8:	mov	r2, #5
   41edc:	ldr	r1, [pc, #656]	; 42174 <__assert_fail@plt+0x30f68>
   41ee0:	mov	r0, #0
   41ee4:	bl	10f90 <dcgettext@plt>
   41ee8:	mov	r3, r7
   41eec:	add	r1, sp, #12
   41ef0:	mov	r2, #0
   41ef4:	mov	r5, r0
   41ef8:	mov	r0, r6
   41efc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41f00:	mov	r3, #0
   41f04:	str	r3, [sp]
   41f08:	mov	r2, r0
   41f0c:	mov	r3, r1
   41f10:	ldr	r0, [pc, #508]	; 42114 <__assert_fail@plt+0x30f08>
   41f14:	bl	3c744 <__assert_fail@plt+0x2b538>
   41f18:	mov	r1, r0
   41f1c:	mov	r0, r5
   41f20:	bl	10f24 <printf@plt>
   41f24:	b	41c14 <__assert_fail@plt+0x30a08>
   41f28:	ldr	r0, [pc, #584]	; 42178 <__assert_fail@plt+0x30f6c>
   41f2c:	bl	11014 <puts@plt>
   41f30:	b	41c14 <__assert_fail@plt+0x30a08>
   41f34:	ldr	r0, [pc, #576]	; 4217c <__assert_fail@plt+0x30f70>
   41f38:	bl	11014 <puts@plt>
   41f3c:	b	41c14 <__assert_fail@plt+0x30a08>
   41f40:	tst	sl, #128	; 0x80
   41f44:	ldr	r7, [sp, #12]
   41f48:	ldrne	r1, [pc, #560]	; 42180 <__assert_fail@plt+0x30f74>
   41f4c:	ldreq	r1, [pc, #560]	; 42184 <__assert_fail@plt+0x30f78>
   41f50:	mov	r2, #5
   41f54:	mov	r0, #0
   41f58:	bl	10f90 <dcgettext@plt>
   41f5c:	mvn	r7, r7
   41f60:	bl	10f24 <printf@plt>
   41f64:	add	r7, r7, r4
   41f68:	mov	r2, #5
   41f6c:	ldr	r1, [pc, #532]	; 42188 <__assert_fail@plt+0x30f7c>
   41f70:	mov	r0, #0
   41f74:	bl	10f90 <dcgettext@plt>
   41f78:	mov	r1, r7
   41f7c:	bl	10f24 <printf@plt>
   41f80:	cmp	r7, #0
   41f84:	beq	41fa8 <__assert_fail@plt+0x30d9c>
   41f88:	add	r7, r7, #1
   41f8c:	ldr	r8, [pc, #504]	; 4218c <__assert_fail@plt+0x30f80>
   41f90:	add	r5, r5, r7
   41f94:	ldrb	r1, [r6], #1
   41f98:	mov	r0, r8
   41f9c:	bl	10f24 <printf@plt>
   41fa0:	cmp	r5, r6
   41fa4:	bne	41f94 <__assert_fail@plt+0x30d88>
   41fa8:	ldr	r0, [pc, #480]	; 42190 <__assert_fail@plt+0x30f84>
   41fac:	bl	11014 <puts@plt>
   41fb0:	b	41c14 <__assert_fail@plt+0x30a08>
   41fb4:	ldr	r0, [pc, #472]	; 42194 <__assert_fail@plt+0x30f88>
   41fb8:	bl	11014 <puts@plt>
   41fbc:	cmp	r6, r5
   41fc0:	bcc	41bc4 <__assert_fail@plt+0x309b8>
   41fc4:	b	41c14 <__assert_fail@plt+0x30a08>
   41fc8:	mov	r0, sl
   41fcc:	bl	10f24 <printf@plt>
   41fd0:	mov	r3, r5
   41fd4:	mov	r2, #0
   41fd8:	mov	r0, r6
   41fdc:	add	r1, sp, #12
   41fe0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   41fe4:	mov	r7, #0
   41fe8:	str	r7, [sp]
   41fec:	mov	r2, r0
   41ff0:	mov	r3, r1
   41ff4:	mov	r0, r8
   41ff8:	bl	3c744 <__assert_fail@plt+0x2b538>
   41ffc:	mov	r1, r0
   42000:	mov	r0, r9
   42004:	bl	10f24 <printf@plt>
   42008:	ldr	r3, [sp, #12]
   4200c:	mov	r2, r7
   42010:	add	r6, r6, r3
   42014:	mov	r0, r6
   42018:	mov	r3, r5
   4201c:	add	r1, sp, #12
   42020:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   42024:	str	r7, [sp]
   42028:	mov	r2, r0
   4202c:	mov	r3, r1
   42030:	mov	r0, r8
   42034:	bl	3c744 <__assert_fail@plt+0x2b538>
   42038:	mov	r1, r0
   4203c:	ldr	r0, [pc, #340]	; 42198 <__assert_fail@plt+0x30f8c>
   42040:	bl	10f24 <printf@plt>
   42044:	ldr	r3, [sp, #12]
   42048:	mov	r2, r7
   4204c:	add	r6, r6, r3
   42050:	mov	r0, r6
   42054:	mov	r3, r5
   42058:	add	r1, sp, #12
   4205c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   42060:	str	r7, [sp]
   42064:	mov	r3, r1
   42068:	mov	r2, r0
   4206c:	mov	r0, r8
   42070:	bl	3c744 <__assert_fail@plt+0x2b538>
   42074:	mov	r1, r0
   42078:	ldr	r0, [pc, #284]	; 4219c <__assert_fail@plt+0x30f90>
   4207c:	bl	10f24 <printf@plt>
   42080:	ldr	r3, [sp, #12]
   42084:	add	r6, r6, r3
   42088:	b	41fbc <__assert_fail@plt+0x30db0>
   4208c:	mov	r3, r5
   42090:	mov	r2, #0
   42094:	mov	r0, r6
   42098:	add	r1, sp, #12
   4209c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   420a0:	mov	r3, #0
   420a4:	str	r3, [sp]
   420a8:	mov	r2, r0
   420ac:	mov	r3, r1
   420b0:	mov	r0, r8
   420b4:	bl	3c744 <__assert_fail@plt+0x2b538>
   420b8:	mov	r1, r0
   420bc:	mov	r0, fp
   420c0:	bl	10f24 <printf@plt>
   420c4:	ldr	r3, [sp, #12]
   420c8:	add	r6, r6, r3
   420cc:	b	41fbc <__assert_fail@plt+0x30db0>
   420d0:	mov	r6, #0
   420d4:	mov	r7, #0
   420d8:	b	41cc8 <__assert_fail@plt+0x30abc>
   420dc:	mov	r2, #5
   420e0:	ldr	r1, [pc, #184]	; 421a0 <__assert_fail@plt+0x30f94>
   420e4:	mov	r0, #0
   420e8:	bl	10f90 <dcgettext@plt>
   420ec:	ldr	r1, [sp, #12]
   420f0:	mov	r6, #0
   420f4:	mvn	r1, r1
   420f8:	add	r1, r1, r4
   420fc:	mov	r7, #0
   42100:	bl	54dd0 <warn@@Base>
   42104:	b	41cc8 <__assert_fail@plt+0x30abc>
   42108:	andeq	pc, r7, r4, ror #17
   4210c:	andeq	pc, r7, r0, lsl r9	; <UNPREDICTABLE>
   42110:	andeq	pc, r7, ip, lsr fp	; <UNPREDICTABLE>
   42114:	andeq	r3, r6, ip, asr #17
   42118:	andeq	pc, r7, ip, ror fp	; <UNPREDICTABLE>
   4211c:	andeq	pc, r7, r8, lsr #23
   42120:	andeq	pc, r7, r8, asr #23
   42124:	ldrdeq	pc, [r7], -r8
   42128:	andeq	pc, r7, r8, lsr #18
   4212c:	ldrdeq	ip, [r9], -r0
   42130:	andeq	lr, r9, ip, asr sp
   42134:	andeq	pc, r7, r0, ror r9	; <UNPREDICTABLE>
   42138:	andeq	r9, r6, r0, lsr #15
   4213c:	andeq	pc, r7, r4, asr sl	; <UNPREDICTABLE>
   42140:	andeq	pc, r7, ip, ror #20
   42144:	andeq	pc, r7, ip, lsl #21
   42148:	andeq	pc, r7, r8, lsr #21
   4214c:	andeq	pc, r7, r0, asr #21
   42150:	andeq	pc, r7, r0, ror #21
   42154:	andeq	pc, r7, r0, lsl #22
   42158:	andeq	pc, r7, r4, lsr #22
   4215c:	andeq	pc, r7, r8, lsl #19
   42160:	andeq	pc, r7, r8, lsr #19
   42164:	andeq	pc, r7, r4, asr #19
   42168:	andeq	pc, r7, ip, asr #19
   4216c:	ldrdeq	pc, [r7], -r0
   42170:	ldrdeq	pc, [r7], -r8
   42174:	andeq	pc, r7, r0, lsl #20
   42178:	andeq	pc, r7, ip, lsl sl	; <UNPREDICTABLE>
   4217c:	andeq	pc, r7, ip, lsr sl	; <UNPREDICTABLE>
   42180:	andeq	pc, r7, r0, lsl #24
   42184:	andeq	pc, r7, r0, lsl ip	; <UNPREDICTABLE>
   42188:	andeq	pc, r7, ip, lsl ip	; <UNPREDICTABLE>
   4218c:	andeq	lr, r7, r8, ror #13
   42190:	andeq	r1, r8, ip, lsr pc
   42194:	andeq	pc, r7, r0, ror #22
   42198:	andeq	pc, r7, ip, asr #23
   4219c:	ldrdeq	pc, [r7], -r0
   421a0:	andeq	pc, r7, ip, lsr r9	; <UNPREDICTABLE>
   421a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   421a8:	sub	sp, sp, #44	; 0x2c
   421ac:	mov	fp, r0
   421b0:	mov	r0, #72	; 0x48
   421b4:	str	r3, [sp, #24]
   421b8:	mov	r4, r1
   421bc:	mov	sl, r2
   421c0:	bl	5861c <warn@@Base+0x384c>
   421c4:	mov	r2, #72	; 0x48
   421c8:	mov	r1, #0
   421cc:	mov	r5, r0
   421d0:	bl	110bc <memset@plt>
   421d4:	mov	r0, #2
   421d8:	bl	5861c <warn@@Base+0x384c>
   421dc:	str	r0, [r5, #12]
   421e0:	mov	r0, #4
   421e4:	bl	5861c <warn@@Base+0x384c>
   421e8:	mov	r2, fp
   421ec:	ldrb	r6, [r2], #1
   421f0:	cmp	r2, r4
   421f4:	str	r2, [r5, #20]
   421f8:	str	r0, [r5, #16]
   421fc:	bcs	42244 <__assert_fail@plt+0x31038>
   42200:	ldrb	r3, [fp, #1]
   42204:	add	fp, fp, #2
   42208:	cmp	r3, #0
   4220c:	bne	42220 <__assert_fail@plt+0x31014>
   42210:	b	42248 <__assert_fail@plt+0x3103c>
   42214:	ldrb	r3, [fp], #1
   42218:	cmp	r3, #0
   4221c:	beq	42248 <__assert_fail@plt+0x3103c>
   42220:	cmp	r4, fp
   42224:	bne	42214 <__assert_fail@plt+0x31008>
   42228:	mov	r2, #5
   4222c:	ldr	r1, [pc, #1268]	; 42728 <__assert_fail@plt+0x3151c>
   42230:	mov	r0, #0
   42234:	bl	10f90 <dcgettext@plt>
   42238:	mov	r8, r4
   4223c:	bl	54dd0 <warn@@Base>
   42240:	b	423f0 <__assert_fail@plt+0x311e4>
   42244:	mov	fp, r2
   42248:	cmp	r4, fp
   4224c:	beq	42228 <__assert_fail@plt+0x3101c>
   42250:	mov	r0, r2
   42254:	ldr	r1, [pc, #1232]	; 4272c <__assert_fail@plt+0x31520>
   42258:	bl	10f18 <strcmp@plt>
   4225c:	cmp	r0, #0
   42260:	ldreq	r3, [pc, #1224]	; 42730 <__assert_fail@plt+0x31524>
   42264:	ldreq	r3, [r3]
   42268:	addeq	fp, fp, r3
   4226c:	cmp	r6, #3
   42270:	bgt	423b8 <__assert_fail@plt+0x311ac>
   42274:	ldr	r7, [pc, #1204]	; 42730 <__assert_fail@plt+0x31524>
   42278:	mov	r3, #0
   4227c:	strb	r3, [r5, #71]	; 0x47
   42280:	ldr	r3, [r7]
   42284:	strb	r3, [r5, #70]	; 0x46
   42288:	mov	r3, r4
   4228c:	add	r1, sp, #36	; 0x24
   42290:	mov	r2, #0
   42294:	mov	r0, fp
   42298:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4229c:	mov	r3, #0
   422a0:	mov	r9, r1
   422a4:	mov	r8, r0
   422a8:	cmp	r9, r3
   422ac:	cmpeq	r8, r8
   422b0:	str	r8, [r5, #24]
   422b4:	beq	422fc <__assert_fail@plt+0x310f0>
   422b8:	ldr	r1, [pc, #1140]	; 42734 <__assert_fail@plt+0x31528>
   422bc:	mov	r2, #5
   422c0:	mov	r0, r3
   422c4:	bl	10f90 <dcgettext@plt>
   422c8:	mov	r3, #0
   422cc:	str	r3, [sp]
   422d0:	mov	r2, r8
   422d4:	mov	r3, r9
   422d8:	str	r0, [sp, #8]
   422dc:	ldr	r0, [pc, #1108]	; 42738 <__assert_fail@plt+0x3152c>
   422e0:	bl	3c744 <__assert_fail@plt+0x2b538>
   422e4:	ldr	r1, [sp, #8]
   422e8:	ldr	r2, [pc, #1100]	; 4273c <__assert_fail@plt+0x31530>
   422ec:	mov	r3, r0
   422f0:	mov	r0, r1
   422f4:	ldr	r1, [pc, #1092]	; 42740 <__assert_fail@plt+0x31534>
   422f8:	bl	548ac <error@@Base>
   422fc:	ldr	r2, [sp, #36]	; 0x24
   42300:	mov	r3, r4
   42304:	add	fp, fp, r2
   42308:	mov	r0, fp
   4230c:	mov	r2, #1
   42310:	add	r1, sp, #36	; 0x24
   42314:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   42318:	asr	r3, r0, #31
   4231c:	cmp	r1, r3
   42320:	cmpeq	r0, r0
   42324:	mov	r8, r0
   42328:	mov	r9, r1
   4232c:	str	r0, [r5, #28]
   42330:	beq	42378 <__assert_fail@plt+0x3116c>
   42334:	ldr	r1, [pc, #1016]	; 42734 <__assert_fail@plt+0x31528>
   42338:	mov	r2, #5
   4233c:	mov	r0, #0
   42340:	bl	10f90 <dcgettext@plt>
   42344:	mov	r2, r8
   42348:	mov	r3, r9
   4234c:	str	r0, [sp, #8]
   42350:	mov	r0, #0
   42354:	str	r0, [sp]
   42358:	ldr	r0, [pc, #996]	; 42744 <__assert_fail@plt+0x31538>
   4235c:	bl	3c744 <__assert_fail@plt+0x2b538>
   42360:	ldr	r1, [sp, #8]
   42364:	ldr	r2, [pc, #988]	; 42748 <__assert_fail@plt+0x3153c>
   42368:	mov	r3, r0
   4236c:	mov	r0, r1
   42370:	ldr	r1, [pc, #968]	; 42740 <__assert_fail@plt+0x31534>
   42374:	bl	548ac <error@@Base>
   42378:	ldr	r3, [sp, #36]	; 0x24
   4237c:	cmp	r6, #1
   42380:	add	fp, fp, r3
   42384:	bne	423fc <__assert_fail@plt+0x311f0>
   42388:	add	r8, fp, #1
   4238c:	cmp	r4, r8
   42390:	bhi	42530 <__assert_fail@plt+0x31324>
   42394:	cmp	r4, fp
   42398:	bls	423ac <__assert_fail@plt+0x311a0>
   4239c:	sub	r1, r4, fp
   423a0:	sub	r3, r1, #1
   423a4:	cmp	r3, #7
   423a8:	bls	42534 <__assert_fail@plt+0x31328>
   423ac:	mov	r3, #0
   423b0:	str	r3, [r5, #64]	; 0x40
   423b4:	b	42438 <__assert_fail@plt+0x3122c>
   423b8:	add	r7, fp, #1
   423bc:	cmp	r4, r7
   423c0:	bhi	42478 <__assert_fail@plt+0x3126c>
   423c4:	cmp	r4, fp
   423c8:	bhi	42594 <__assert_fail@plt+0x31388>
   423cc:	mov	r3, #0
   423d0:	strb	r3, [r5, #70]	; 0x46
   423d4:	ldr	r1, [pc, #880]	; 4274c <__assert_fail@plt+0x31540>
   423d8:	mov	r2, #5
   423dc:	mov	r0, #0
   423e0:	bl	10f90 <dcgettext@plt>
   423e4:	ldrb	r1, [r5, #70]	; 0x46
   423e8:	mov	r8, r4
   423ec:	bl	54dd0 <warn@@Base>
   423f0:	mov	r0, r8
   423f4:	add	sp, sp, #44	; 0x2c
   423f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   423fc:	mov	r3, r4
   42400:	mov	r2, #0
   42404:	add	r1, sp, #36	; 0x24
   42408:	mov	r0, fp
   4240c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   42410:	mov	r3, #0
   42414:	mov	r9, r1
   42418:	mov	r8, r0
   4241c:	cmp	r9, r3
   42420:	cmpeq	r8, r8
   42424:	mov	r0, r8
   42428:	str	r8, [r5, #64]	; 0x40
   4242c:	bne	4254c <__assert_fail@plt+0x31340>
   42430:	ldr	r8, [sp, #36]	; 0x24
   42434:	add	r8, fp, r8
   42438:	ldr	r3, [r5, #20]
   4243c:	ldrb	r3, [r3]
   42440:	cmp	r3, #122	; 0x7a
   42444:	movne	r0, #0
   42448:	movne	r9, r0
   4244c:	beq	425a8 <__assert_fail@plt+0x3139c>
   42450:	ldr	r3, [sp, #24]
   42454:	str	r5, [sl]
   42458:	str	r6, [r3]
   4245c:	ldr	r3, [sp, #80]	; 0x50
   42460:	str	r9, [r3]
   42464:	ldr	r3, [sp, #84]	; 0x54
   42468:	str	r0, [r3]
   4246c:	mov	r0, r8
   42470:	add	sp, sp, #44	; 0x2c
   42474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42478:	mov	r1, #1
   4247c:	ldr	r8, [pc, #716]	; 42750 <__assert_fail@plt+0x31544>
   42480:	mov	r0, fp
   42484:	ldr	r3, [r8]
   42488:	blx	r3
   4248c:	uxtb	r0, r0
   42490:	sub	r3, r0, #1
   42494:	cmp	r3, #7
   42498:	strb	r0, [r5, #70]	; 0x46
   4249c:	bhi	423d4 <__assert_fail@plt+0x311c8>
   424a0:	add	fp, fp, #2
   424a4:	cmp	r4, fp
   424a8:	bhi	424d8 <__assert_fail@plt+0x312cc>
   424ac:	cmp	r4, r7
   424b0:	bls	424c4 <__assert_fail@plt+0x312b8>
   424b4:	sub	r1, r4, r7
   424b8:	sub	r3, r1, #1
   424bc:	cmp	r3, #7
   424c0:	bls	424dc <__assert_fail@plt+0x312d0>
   424c4:	mov	r3, #0
   424c8:	strb	r3, [r5, #71]	; 0x47
   424cc:	ldr	r7, [pc, #604]	; 42730 <__assert_fail@plt+0x31524>
   424d0:	str	r0, [r7]
   424d4:	b	42288 <__assert_fail@plt+0x3107c>
   424d8:	mov	r1, #1
   424dc:	ldr	r3, [r8]
   424e0:	mov	r0, r7
   424e4:	blx	r3
   424e8:	uxtb	r3, r0
   424ec:	cmp	r3, #8
   424f0:	strb	r3, [r5, #71]	; 0x47
   424f4:	bhi	42508 <__assert_fail@plt+0x312fc>
   424f8:	ldrb	r0, [r5, #70]	; 0x46
   424fc:	add	r3, r0, r3
   42500:	cmp	r3, #8
   42504:	ble	424cc <__assert_fail@plt+0x312c0>
   42508:	mov	r2, #5
   4250c:	ldr	r1, [pc, #576]	; 42754 <__assert_fail@plt+0x31548>
   42510:	mov	r0, #0
   42514:	bl	10f90 <dcgettext@plt>
   42518:	ldrb	r1, [r5, #71]	; 0x47
   4251c:	bl	54dd0 <warn@@Base>
   42520:	mov	r8, r4
   42524:	mov	r0, r8
   42528:	add	sp, sp, #44	; 0x2c
   4252c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42530:	mov	r1, r6
   42534:	ldr	r3, [pc, #532]	; 42750 <__assert_fail@plt+0x31544>
   42538:	mov	r0, fp
   4253c:	ldr	r3, [r3]
   42540:	blx	r3
   42544:	str	r0, [r5, #64]	; 0x40
   42548:	b	42438 <__assert_fail@plt+0x3122c>
   4254c:	ldr	r1, [pc, #480]	; 42734 <__assert_fail@plt+0x31528>
   42550:	mov	r2, #5
   42554:	mov	r0, r3
   42558:	bl	10f90 <dcgettext@plt>
   4255c:	mov	r3, #0
   42560:	str	r3, [sp]
   42564:	mov	r2, r8
   42568:	mov	r3, r9
   4256c:	str	r0, [sp, #8]
   42570:	ldr	r0, [pc, #448]	; 42738 <__assert_fail@plt+0x3152c>
   42574:	bl	3c744 <__assert_fail@plt+0x2b538>
   42578:	ldr	r1, [sp, #8]
   4257c:	ldr	r2, [pc, #468]	; 42758 <__assert_fail@plt+0x3154c>
   42580:	mov	r3, r0
   42584:	mov	r0, r1
   42588:	ldr	r1, [pc, #432]	; 42740 <__assert_fail@plt+0x31534>
   4258c:	bl	548ac <error@@Base>
   42590:	b	42430 <__assert_fail@plt+0x31224>
   42594:	sub	r1, r4, fp
   42598:	sub	r3, r1, #1
   4259c:	cmp	r3, #7
   425a0:	bhi	423cc <__assert_fail@plt+0x311c0>
   425a4:	b	4247c <__assert_fail@plt+0x31270>
   425a8:	mov	r3, r4
   425ac:	mov	r2, #0
   425b0:	add	r1, sp, #36	; 0x24
   425b4:	mov	r0, r8
   425b8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   425bc:	mov	fp, #0
   425c0:	str	fp, [sp, #12]
   425c4:	mov	r2, r0
   425c8:	str	r2, [sp, #8]
   425cc:	mov	r3, r1
   425d0:	ldrd	r0, [sp, #8]
   425d4:	strd	r2, [sp, #16]
   425d8:	mov	r9, r2
   425dc:	cmp	r3, r1
   425e0:	cmpeq	r2, r0
   425e4:	beq	42624 <__assert_fail@plt+0x31418>
   425e8:	ldr	r1, [pc, #324]	; 42734 <__assert_fail@plt+0x31528>
   425ec:	mov	r2, #5
   425f0:	mov	r0, fp
   425f4:	bl	10f90 <dcgettext@plt>
   425f8:	ldrd	r2, [sp, #16]
   425fc:	str	fp, [sp]
   42600:	str	r0, [sp, #28]
   42604:	ldr	r0, [pc, #300]	; 42738 <__assert_fail@plt+0x3152c>
   42608:	bl	3c744 <__assert_fail@plt+0x2b538>
   4260c:	ldr	r1, [sp, #28]
   42610:	ldr	r2, [pc, #324]	; 4275c <__assert_fail@plt+0x31550>
   42614:	mov	r3, r0
   42618:	mov	r0, r1
   4261c:	ldr	r1, [pc, #284]	; 42740 <__assert_fail@plt+0x31534>
   42620:	bl	548ac <error@@Base>
   42624:	ldr	r0, [sp, #36]	; 0x24
   42628:	ldr	r3, [sp, #16]
   4262c:	add	r0, r8, r0
   42630:	sub	r8, r4, r0
   42634:	cmp	r3, r8
   42638:	bhi	426e8 <__assert_fail@plt+0x314dc>
   4263c:	ldrd	r2, [sp, #16]
   42640:	cmp	r2, #0
   42644:	add	r8, r0, r2
   42648:	beq	42450 <__assert_fail@plt+0x31244>
   4264c:	ldr	r3, [r5, #20]
   42650:	add	r3, r3, #1
   42654:	cmp	r4, r3
   42658:	movls	r2, #0
   4265c:	movhi	r2, #1
   42660:	cmp	r0, r8
   42664:	movcs	r2, #0
   42668:	cmp	r2, #0
   4266c:	beq	42450 <__assert_fail@plt+0x31244>
   42670:	ldr	lr, [r7]
   42674:	ldr	ip, [pc, #228]	; 42760 <__assert_fail@plt+0x31554>
   42678:	mov	r1, r0
   4267c:	b	4269c <__assert_fail@plt+0x31490>
   42680:	cmp	r2, #82	; 0x52
   42684:	beq	426dc <__assert_fail@plt+0x314d0>
   42688:	cmp	r2, #83	; 0x53
   4268c:	bne	42450 <__assert_fail@plt+0x31244>
   42690:	cmp	r4, r3
   42694:	cmphi	r8, r1
   42698:	bls	42450 <__assert_fail@plt+0x31244>
   4269c:	ldrb	r2, [r3], #1
   426a0:	cmp	r2, #76	; 0x4c
   426a4:	addeq	r1, r1, #1
   426a8:	beq	42690 <__assert_fail@plt+0x31484>
   426ac:	cmp	r2, #80	; 0x50
   426b0:	bne	42680 <__assert_fail@plt+0x31474>
   426b4:	ldrb	r2, [r1]
   426b8:	and	r2, r2, #7
   426bc:	sub	r2, r2, #2
   426c0:	cmp	r2, #2
   426c4:	addls	r2, ip, r2, lsl #2
   426c8:	movhi	r2, lr
   426cc:	ldrls	r2, [r2, #1024]	; 0x400
   426d0:	add	r2, r2, #1
   426d4:	add	r1, r1, r2
   426d8:	b	42690 <__assert_fail@plt+0x31484>
   426dc:	ldrb	r2, [r1], #1
   426e0:	strb	r2, [r5, #68]	; 0x44
   426e4:	b	42690 <__assert_fail@plt+0x31484>
   426e8:	mov	r2, #5
   426ec:	ldr	r1, [pc, #112]	; 42764 <__assert_fail@plt+0x31558>
   426f0:	mov	r0, #0
   426f4:	bl	10f90 <dcgettext@plt>
   426f8:	mov	r1, #0
   426fc:	ldrd	r2, [sp, #8]
   42700:	str	r1, [sp]
   42704:	mov	r5, r0
   42708:	ldr	r0, [pc, #88]	; 42768 <__assert_fail@plt+0x3155c>
   4270c:	bl	3c744 <__assert_fail@plt+0x2b538>
   42710:	mov	r2, r8
   42714:	mov	r8, r4
   42718:	mov	r1, r0
   4271c:	mov	r0, r5
   42720:	bl	54dd0 <warn@@Base>
   42724:	b	423f0 <__assert_fail@plt+0x311e4>
   42728:	andeq	pc, r7, r8, lsr #24
   4272c:	andeq	pc, r7, r0, asr ip	; <UNPREDICTABLE>
   42730:	andeq	lr, r9, ip, lsr #26
   42734:	andeq	pc, r7, r4, lsr #25
   42738:	andeq	r3, r6, ip, asr #17
   4273c:	muleq	r0, r4, ip
   42740:	andeq	lr, r7, r8, lsl #20
   42744:	andeq	r8, r6, ip, rrx
   42748:	muleq	r0, r5, ip
   4274c:	andeq	pc, r7, r4, asr ip	; <UNPREDICTABLE>
   42750:	andeq	lr, r9, ip, asr sp
   42754:	andeq	pc, r7, ip, ror ip	; <UNPREDICTABLE>
   42758:	muleq	r0, ip, ip
   4275c:	andeq	r1, r0, r1, lsr #25
   42760:			; <UNDEFINED> instruction: 0x0007d2bc
   42764:	strdeq	pc, [r7], -r0
   42768:	andeq	r9, r6, r0, lsr #15
   4276c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42770:	sub	sp, sp, #260	; 0x104
   42774:	mov	r9, r3
   42778:	ldr	r3, [sp, #312]	; 0x138
   4277c:	ldr	sl, [sp, #296]	; 0x128
   42780:	str	r3, [sp, #64]	; 0x40
   42784:	ldr	r3, [sp, #324]	; 0x144
   42788:	ldr	ip, [sp, #300]	; 0x12c
   4278c:	str	r3, [sp, #68]	; 0x44
   42790:	ldrb	r3, [sp, #348]	; 0x15c
   42794:	mov	r7, #0
   42798:	mov	r6, #0
   4279c:	cmp	sl, ip
   427a0:	strd	r6, [sp, #160]	; 0xa0
   427a4:	ldr	fp, [sp, #320]	; 0x140
   427a8:	ldr	r7, [sp, #316]	; 0x13c
   427ac:	str	r3, [sp, #60]	; 0x3c
   427b0:	bhi	42e68 <__assert_fail@plt+0x31c5c>
   427b4:	mov	r8, r2
   427b8:	moveq	r2, #1
   427bc:	movne	r2, #0
   427c0:	cmp	r1, #25
   427c4:	moveq	r2, #0
   427c8:	andne	r2, r2, #1
   427cc:	cmp	r2, #0
   427d0:	mov	r4, r1
   427d4:	bne	42e68 <__assert_fail@plt+0x31c5c>
   427d8:	cmp	r1, #18
   427dc:	mov	r5, r0
   427e0:	beq	43e58 <__assert_fail@plt+0x32c4c>
   427e4:	bhi	4293c <__assert_fail@plt+0x31730>
   427e8:	cmp	r1, #12
   427ec:	bls	42b90 <__assert_fail@plt+0x31984>
   427f0:	cmp	r1, #15
   427f4:	beq	43e70 <__assert_fail@plt+0x32c64>
   427f8:	bls	42b34 <__assert_fail@plt+0x31928>
   427fc:	cmp	r1, #16
   42800:	bne	42cb0 <__assert_fail@plt+0x31aa4>
   42804:	ldr	r3, [sp, #328]	; 0x148
   42808:	cmp	r3, #2
   4280c:	beq	44978 <__assert_fail@plt+0x3376c>
   42810:	ldr	r3, [sp, #328]	; 0x148
   42814:	sub	r3, r3, #3
   42818:	cmp	r3, #1
   4281c:	bhi	44a6c <__assert_fail@plt+0x33860>
   42820:	cmp	fp, #8
   42824:	mov	r1, fp
   42828:	add	r6, sl, fp
   4282c:	bhi	44bc8 <__assert_fail@plt+0x339bc>
   42830:	ldr	r3, [sp, #300]	; 0x12c
   42834:	cmp	r3, r6
   42838:	bhi	42850 <__assert_fail@plt+0x31644>
   4283c:	ldr	r3, [sp, #300]	; 0x12c
   42840:	cmp	sl, r3
   42844:	bcs	44968 <__assert_fail@plt+0x3375c>
   42848:	ldr	r3, [sp, #300]	; 0x12c
   4284c:	sub	r1, r3, sl
   42850:	sub	r3, r1, #1
   42854:	cmp	r3, #7
   42858:	bhi	44968 <__assert_fail@plt+0x3375c>
   4285c:	ldr	r3, [pc, #3996]	; 43800 <__assert_fail@plt+0x325f4>
   42860:	mov	r0, sl
   42864:	ldr	r3, [r3]
   42868:	blx	r3
   4286c:	strd	r0, [sp, #160]	; 0xa0
   42870:	ldr	r3, [sp, #336]	; 0x150
   42874:	cmp	r3, #0
   42878:	bne	42c90 <__assert_fail@plt+0x31a84>
   4287c:	str	r3, [sp]
   42880:	ldrd	r2, [sp, #160]	; 0xa0
   42884:	ldr	r0, [pc, #3960]	; 43804 <__assert_fail@plt+0x325f8>
   42888:	bl	3c744 <__assert_fail@plt+0x2b538>
   4288c:	ldr	r1, [sp, #60]	; 0x3c
   42890:	mov	r2, r0
   42894:	ldr	r0, [pc, #3948]	; 43808 <__assert_fail@plt+0x325fc>
   42898:	bl	10f24 <printf@plt>
   4289c:	ldr	r7, [sp, #336]	; 0x150
   428a0:	ldr	r2, [pc, #3940]	; 4380c <__assert_fail@plt+0x32600>
   428a4:	ldr	r3, [pc, #3940]	; 43810 <__assert_fail@plt+0x32604>
   428a8:	ldr	r2, [r2]
   428ac:	ldr	r3, [r3]
   428b0:	orrs	r3, r2, r3
   428b4:	beq	43198 <__assert_fail@plt+0x31f8c>
   428b8:	ldr	r8, [pc, #3924]	; 43814 <__assert_fail@plt+0x32608>
   428bc:	ldr	r3, [r8, #1488]	; 0x5d0
   428c0:	cmp	r3, #0
   428c4:	bne	43198 <__assert_fail@plt+0x31f8c>
   428c8:	ldr	r3, [sp, #332]	; 0x14c
   428cc:	cmp	r3, #0
   428d0:	beq	43198 <__assert_fail@plt+0x31f8c>
   428d4:	cmp	r5, #85	; 0x55
   428d8:	beq	448e8 <__assert_fail@plt+0x336dc>
   428dc:	bls	437c0 <__assert_fail@plt+0x325b4>
   428e0:	ldr	r3, [pc, #3888]	; 43818 <__assert_fail@plt+0x3260c>
   428e4:	cmp	r5, r3
   428e8:	bls	43720 <__assert_fail@plt+0x32514>
   428ec:	ldr	r3, [pc, #3880]	; 4381c <__assert_fail@plt+0x32610>
   428f0:	cmp	r5, r3
   428f4:	beq	448d8 <__assert_fail@plt+0x336cc>
   428f8:	bhi	43704 <__assert_fail@plt+0x324f8>
   428fc:	sub	r3, r3, #2
   42900:	cmp	r5, r3
   42904:	beq	43744 <__assert_fail@plt+0x32538>
   42908:	add	r3, r3, #1
   4290c:	cmp	r5, r3
   42910:	bne	43198 <__assert_fail@plt+0x31f8c>
   42914:	ldr	r3, [r8, #1500]	; 0x5dc
   42918:	cmp	r3, #0
   4291c:	beq	42e80 <__assert_fail@plt+0x31c74>
   42920:	cmp	r4, #7
   42924:	bne	44e30 <__assert_fail@plt+0x33c24>
   42928:	sub	r2, r6, #8
   4292c:	mov	r3, #8
   42930:	str	r2, [r8, #1512]	; 0x5e8
   42934:	str	r3, [r8, #1516]	; 0x5ec
   42938:	b	42e80 <__assert_fail@plt+0x31c74>
   4293c:	cmp	r1, #25
   42940:	beq	43e94 <__assert_fail@plt+0x32c88>
   42944:	bls	42a74 <__assert_fail@plt+0x31868>
   42948:	ldr	r3, [pc, #3892]	; 43884 <__assert_fail@plt+0x32678>
   4294c:	cmp	r1, r3
   42950:	beq	43a88 <__assert_fail@plt+0x3287c>
   42954:	bhi	42c38 <__assert_fail@plt+0x31a2c>
   42958:	cmp	r1, #31
   4295c:	beq	42d0c <__assert_fail@plt+0x31b00>
   42960:	sub	r3, r3, #1
   42964:	cmp	r1, r3
   42968:	bne	42c48 <__assert_fail@plt+0x31a3c>
   4296c:	ldr	r3, [sp, #300]	; 0x12c
   42970:	mov	r2, #0
   42974:	add	r1, sp, #156	; 0x9c
   42978:	mov	r0, sl
   4297c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   42980:	ldr	r6, [sp, #156]	; 0x9c
   42984:	add	r6, sl, r6
   42988:	strd	r0, [sp, #160]	; 0xa0
   4298c:	ldr	r3, [sp, #336]	; 0x150
   42990:	cmp	r3, #0
   42994:	bne	42c90 <__assert_fail@plt+0x31a84>
   42998:	ldr	r1, [pc, #3712]	; 43820 <__assert_fail@plt+0x32614>
   4299c:	mov	r2, #5
   429a0:	mov	r0, r3
   429a4:	bl	10f90 <dcgettext@plt>
   429a8:	ldr	r3, [sp, #336]	; 0x150
   429ac:	ldr	r8, [pc, #3696]	; 43824 <__assert_fail@plt+0x32618>
   429b0:	str	r3, [sp]
   429b4:	ldrd	r2, [sp, #160]	; 0xa0
   429b8:	mov	r9, r0
   429bc:	ldr	r0, [pc, #3648]	; 43804 <__assert_fail@plt+0x325f8>
   429c0:	bl	3c744 <__assert_fail@plt+0x2b538>
   429c4:	ldr	r1, [sp, #64]	; 0x40
   429c8:	ldr	r2, [sp, #164]	; 0xa4
   429cc:	ldr	r3, [sp, #160]	; 0xa0
   429d0:	ldr	ip, [r8, #2680]	; 0xa78
   429d4:	mul	r2, r1, r2
   429d8:	cmp	ip, #0
   429dc:	str	r0, [sp, #104]	; 0x68
   429e0:	umull	r0, r1, r3, r1
   429e4:	mla	r3, r3, r7, r2
   429e8:	strd	r0, [sp, #88]	; 0x58
   429ec:	add	r3, r3, r1
   429f0:	str	r3, [sp, #92]	; 0x5c
   429f4:	beq	45034 <__assert_fail@plt+0x33e28>
   429f8:	ldrd	r0, [sp, #88]	; 0x58
   429fc:	ldr	lr, [sp, #64]	; 0x40
   42a00:	add	r3, r8, #2704	; 0xa90
   42a04:	adds	r2, r0, lr
   42a08:	adc	r1, r1, r7
   42a0c:	str	r2, [sp, #96]	; 0x60
   42a10:	str	r1, [sp, #100]	; 0x64
   42a14:	ldrd	r2, [r3, #-8]
   42a18:	ldrd	r0, [sp, #96]	; 0x60
   42a1c:	cmp	r1, r3
   42a20:	cmpeq	r0, r2
   42a24:	bhi	44fc4 <__assert_fail@plt+0x33db8>
   42a28:	ldr	r3, [pc, #3536]	; 43800 <__assert_fail@plt+0x325f4>
   42a2c:	ldr	r2, [sp, #88]	; 0x58
   42a30:	ldr	r1, [sp, #64]	; 0x40
   42a34:	add	r0, ip, r2
   42a38:	ldr	r3, [r3]
   42a3c:	blx	r3
   42a40:	ldr	r3, [sp, #336]	; 0x150
   42a44:	str	r3, [sp]
   42a48:	mov	r2, r0
   42a4c:	mov	r3, r1
   42a50:	ldr	r0, [pc, #3500]	; 43804 <__assert_fail@plt+0x325f8>
   42a54:	bl	3c744 <__assert_fail@plt+0x2b538>
   42a58:	mov	r3, r0
   42a5c:	ldr	r2, [sp, #104]	; 0x68
   42a60:	ldr	r1, [sp, #60]	; 0x3c
   42a64:	mov	r0, r9
   42a68:	bl	10f24 <printf@plt>
   42a6c:	mov	r7, #0
   42a70:	b	428a0 <__assert_fail@plt+0x31694>
   42a74:	cmp	r1, #21
   42a78:	beq	43e70 <__assert_fail@plt+0x32c64>
   42a7c:	bls	42ce4 <__assert_fail@plt+0x31ad8>
   42a80:	cmp	r1, #22
   42a84:	bne	42d04 <__assert_fail@plt+0x31af8>
   42a88:	ldr	r3, [sp, #300]	; 0x12c
   42a8c:	mov	r0, sl
   42a90:	add	r1, sp, #156	; 0x9c
   42a94:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   42a98:	ldr	r2, [sp, #336]	; 0x150
   42a9c:	ldr	r3, [sp, #156]	; 0x9c
   42aa0:	cmp	r2, #0
   42aa4:	add	sl, sl, r3
   42aa8:	mov	r4, r0
   42aac:	beq	449d0 <__assert_fail@plt+0x337c4>
   42ab0:	cmp	r4, #33	; 0x21
   42ab4:	beq	44a88 <__assert_fail@plt+0x3387c>
   42ab8:	ldr	r3, [sp, #60]	; 0x3c
   42abc:	str	fp, [sp, #24]
   42ac0:	str	r3, [sp, #52]	; 0x34
   42ac4:	ldr	r3, [sp, #344]	; 0x158
   42ac8:	str	r7, [sp, #20]
   42acc:	str	r3, [sp, #48]	; 0x30
   42ad0:	ldr	r3, [sp, #340]	; 0x154
   42ad4:	mov	r1, r4
   42ad8:	str	r3, [sp, #44]	; 0x2c
   42adc:	ldr	r3, [sp, #336]	; 0x150
   42ae0:	mov	r0, r5
   42ae4:	str	r3, [sp, #40]	; 0x28
   42ae8:	ldr	r3, [sp, #332]	; 0x14c
   42aec:	str	r3, [sp, #36]	; 0x24
   42af0:	ldr	r3, [sp, #328]	; 0x148
   42af4:	str	r3, [sp, #32]
   42af8:	ldr	r3, [sp, #68]	; 0x44
   42afc:	str	r3, [sp, #28]
   42b00:	ldr	r3, [sp, #64]	; 0x40
   42b04:	str	r3, [sp, #16]
   42b08:	add	r3, sp, #304	; 0x130
   42b0c:	ldrd	r2, [r3]
   42b10:	str	sl, [sp]
   42b14:	strd	r2, [sp, #8]
   42b18:	ldr	r3, [sp, #300]	; 0x12c
   42b1c:	mov	r2, r8
   42b20:	str	r3, [sp, #4]
   42b24:	mov	r3, r9
   42b28:	bl	4276c <__assert_fail@plt+0x31560>
   42b2c:	mov	r6, r0
   42b30:	b	42e80 <__assert_fail@plt+0x31c74>
   42b34:	cmp	r1, #13
   42b38:	bne	42d58 <__assert_fail@plt+0x31b4c>
   42b3c:	ldr	r3, [sp, #300]	; 0x12c
   42b40:	mov	r2, #1
   42b44:	add	r1, sp, #156	; 0x9c
   42b48:	mov	r0, sl
   42b4c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   42b50:	ldr	r6, [sp, #156]	; 0x9c
   42b54:	add	r6, sl, r6
   42b58:	strd	r0, [sp, #160]	; 0xa0
   42b5c:	ldr	r3, [sp, #336]	; 0x150
   42b60:	cmp	r3, #0
   42b64:	bne	42c90 <__assert_fail@plt+0x31a84>
   42b68:	str	r3, [sp]
   42b6c:	ldrd	r2, [sp, #160]	; 0xa0
   42b70:	ldr	r0, [pc, #3248]	; 43828 <__assert_fail@plt+0x3261c>
   42b74:	bl	3c744 <__assert_fail@plt+0x2b538>
   42b78:	ldr	r1, [sp, #60]	; 0x3c
   42b7c:	mov	r2, r0
   42b80:	ldr	r0, [pc, #3236]	; 4382c <__assert_fail@plt+0x32620>
   42b84:	bl	10f24 <printf@plt>
   42b88:	ldr	r7, [sp, #336]	; 0x150
   42b8c:	b	428a0 <__assert_fail@plt+0x31694>
   42b90:	cmp	r1, #11
   42b94:	bcs	42cb8 <__assert_fail@plt+0x31aac>
   42b98:	cmp	r1, #5
   42b9c:	beq	43e58 <__assert_fail@plt+0x32c4c>
   42ba0:	cmp	r1, #6
   42ba4:	beq	42cec <__assert_fail@plt+0x31ae0>
   42ba8:	cmp	r1, #1
   42bac:	bne	42c48 <__assert_fail@plt+0x31a3c>
   42bb0:	ldr	r3, [sp, #64]	; 0x40
   42bb4:	cmp	r3, #8
   42bb8:	mov	r1, r3
   42bbc:	add	r6, sl, r3
   42bc0:	bhi	449e8 <__assert_fail@plt+0x337dc>
   42bc4:	ldr	r3, [sp, #300]	; 0x12c
   42bc8:	cmp	r3, r6
   42bcc:	bhi	42be4 <__assert_fail@plt+0x319d8>
   42bd0:	ldr	r3, [sp, #300]	; 0x12c
   42bd4:	cmp	sl, r3
   42bd8:	bcs	443ac <__assert_fail@plt+0x331a0>
   42bdc:	ldr	r3, [sp, #300]	; 0x12c
   42be0:	sub	r1, r3, sl
   42be4:	sub	r3, r1, #1
   42be8:	cmp	r3, #7
   42bec:	bhi	443ac <__assert_fail@plt+0x331a0>
   42bf0:	ldr	r3, [pc, #3080]	; 43800 <__assert_fail@plt+0x325f4>
   42bf4:	mov	r0, sl
   42bf8:	ldr	r3, [r3]
   42bfc:	blx	r3
   42c00:	strd	r0, [sp, #160]	; 0xa0
   42c04:	ldr	r3, [sp, #336]	; 0x150
   42c08:	cmp	r3, #0
   42c0c:	bne	42c90 <__assert_fail@plt+0x31a84>
   42c10:	str	r3, [sp]
   42c14:	ldr	r0, [pc, #3048]	; 43804 <__assert_fail@plt+0x325f8>
   42c18:	ldrd	r2, [sp, #160]	; 0xa0
   42c1c:	bl	3c744 <__assert_fail@plt+0x2b538>
   42c20:	ldr	r1, [sp, #60]	; 0x3c
   42c24:	mov	r2, r0
   42c28:	ldr	r0, [pc, #3176]	; 43898 <__assert_fail@plt+0x3268c>
   42c2c:	bl	10f24 <printf@plt>
   42c30:	ldr	r7, [sp, #336]	; 0x150
   42c34:	b	428a0 <__assert_fail@plt+0x31694>
   42c38:	sub	r3, r1, #7936	; 0x1f00
   42c3c:	sub	r3, r3, #32
   42c40:	cmp	r3, #1
   42c44:	bls	42d0c <__assert_fail@plt+0x31b00>
   42c48:	mov	r6, sl
   42c4c:	cmp	r4, #19
   42c50:	bls	42d64 <__assert_fail@plt+0x31b58>
   42c54:	cmp	r4, #30
   42c58:	beq	44240 <__assert_fail@plt+0x33034>
   42c5c:	bls	4304c <__assert_fail@plt+0x31e40>
   42c60:	ldr	r3, [pc, #3016]	; 43830 <__assert_fail@plt+0x32624>
   42c64:	cmp	r4, r3
   42c68:	beq	4298c <__assert_fail@plt+0x31780>
   42c6c:	bhi	42f40 <__assert_fail@plt+0x31d34>
   42c70:	cmp	r4, #32
   42c74:	beq	4430c <__assert_fail@plt+0x33100>
   42c78:	bcc	43b38 <__assert_fail@plt+0x3292c>
   42c7c:	cmp	r4, #33	; 0x21
   42c80:	bne	430a0 <__assert_fail@plt+0x31e94>
   42c84:	ldr	r3, [sp, #336]	; 0x150
   42c88:	cmp	r3, #0
   42c8c:	beq	43f40 <__assert_fail@plt+0x32d34>
   42c90:	mov	r7, #0
   42c94:	ldr	r8, [pc, #2936]	; 43814 <__assert_fail@plt+0x32608>
   42c98:	ldr	r3, [r8, #1488]	; 0x5d0
   42c9c:	cmp	r3, #0
   42ca0:	beq	428c8 <__assert_fail@plt+0x316bc>
   42ca4:	mov	r0, r6
   42ca8:	add	sp, sp, #260	; 0x104
   42cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42cb0:	cmp	r1, #17
   42cb4:	bne	42c48 <__assert_fail@plt+0x31a3c>
   42cb8:	ldr	r3, [sp, #300]	; 0x12c
   42cbc:	add	r6, sl, #1
   42cc0:	cmp	r6, r3
   42cc4:	bcs	44224 <__assert_fail@plt+0x33018>
   42cc8:	mov	r1, #1
   42ccc:	ldr	r3, [pc, #2860]	; 43800 <__assert_fail@plt+0x325f4>
   42cd0:	mov	r0, sl
   42cd4:	ldr	r3, [r3]
   42cd8:	blx	r3
   42cdc:	strd	r0, [sp, #160]	; 0xa0
   42ce0:	b	42c4c <__assert_fail@plt+0x31a40>
   42ce4:	cmp	r1, #19
   42ce8:	bne	42c48 <__assert_fail@plt+0x31a3c>
   42cec:	ldr	r3, [sp, #300]	; 0x12c
   42cf0:	add	r6, sl, #4
   42cf4:	cmp	r6, r3
   42cf8:	bcs	44224 <__assert_fail@plt+0x33018>
   42cfc:	mov	r1, #4
   42d00:	b	42ccc <__assert_fail@plt+0x31ac0>
   42d04:	cmp	r1, #23
   42d08:	bne	42c48 <__assert_fail@plt+0x31a3c>
   42d0c:	cmp	fp, #8
   42d10:	mov	r1, fp
   42d14:	add	r6, sl, fp
   42d18:	bhi	44a2c <__assert_fail@plt+0x33820>
   42d1c:	ldr	r3, [sp, #300]	; 0x12c
   42d20:	cmp	r3, r6
   42d24:	bhi	42d3c <__assert_fail@plt+0x31b30>
   42d28:	ldr	r3, [sp, #300]	; 0x12c
   42d2c:	cmp	sl, r3
   42d30:	bcs	42d48 <__assert_fail@plt+0x31b3c>
   42d34:	ldr	r3, [sp, #300]	; 0x12c
   42d38:	sub	r1, r3, sl
   42d3c:	sub	r3, r1, #1
   42d40:	cmp	r3, #7
   42d44:	bls	42ccc <__assert_fail@plt+0x31ac0>
   42d48:	mov	r2, #0
   42d4c:	mov	r3, #0
   42d50:	strd	r2, [sp, #160]	; 0xa0
   42d54:	b	42c4c <__assert_fail@plt+0x31a40>
   42d58:	cmp	r1, #14
   42d5c:	beq	42d0c <__assert_fail@plt+0x31b00>
   42d60:	b	42c48 <__assert_fail@plt+0x31a3c>
   42d64:	cmp	r4, #17
   42d68:	bcs	43068 <__assert_fail@plt+0x31e5c>
   42d6c:	cmp	r4, #8
   42d70:	beq	44380 <__assert_fail@plt+0x33174>
   42d74:	bls	42dfc <__assert_fail@plt+0x31bf0>
   42d78:	cmp	r4, #13
   42d7c:	bhi	42ef0 <__assert_fail@plt+0x31ce4>
   42d80:	cmp	r4, #11
   42d84:	bcs	42b5c <__assert_fail@plt+0x31950>
   42d88:	cmp	r4, #9
   42d8c:	beq	43320 <__assert_fail@plt+0x32114>
   42d90:	cmp	r4, #10
   42d94:	bne	430a0 <__assert_fail@plt+0x31e94>
   42d98:	ldr	r3, [sp, #300]	; 0x12c
   42d9c:	add	r7, r6, #1
   42da0:	cmp	r7, r3
   42da4:	bcc	43eb8 <__assert_fail@plt+0x32cac>
   42da8:	cmp	r6, r3
   42dac:	bcs	42dc0 <__assert_fail@plt+0x31bb4>
   42db0:	sub	r1, r3, r6
   42db4:	sub	r3, r1, #1
   42db8:	cmp	r3, #7
   42dbc:	bls	45294 <__assert_fail@plt+0x34088>
   42dc0:	mov	r2, #0
   42dc4:	mov	r3, #0
   42dc8:	strd	r2, [sp, #160]	; 0xa0
   42dcc:	mov	r2, #5
   42dd0:	ldr	r1, [pc, #2652]	; 43834 <__assert_fail@plt+0x32628>
   42dd4:	mov	r0, #0
   42dd8:	bl	10f90 <dcgettext@plt>
   42ddc:	bl	54dd0 <warn@@Base>
   42de0:	mov	r2, #0
   42de4:	mov	r0, r2
   42de8:	str	r2, [sp, #160]	; 0xa0
   42dec:	mov	r1, r2
   42df0:	str	r2, [sp, #164]	; 0xa4
   42df4:	ldr	r7, [sp, #300]	; 0x12c
   42df8:	b	43398 <__assert_fail@plt+0x3218c>
   42dfc:	cmp	r4, #4
   42e00:	beq	442ec <__assert_fail@plt+0x330e0>
   42e04:	bhi	42e8c <__assert_fail@plt+0x31c80>
   42e08:	cmp	r4, #1
   42e0c:	beq	42c04 <__assert_fail@plt+0x319f8>
   42e10:	cmp	r4, #3
   42e14:	bne	430a0 <__assert_fail@plt+0x31e94>
   42e18:	ldr	r3, [sp, #300]	; 0x12c
   42e1c:	add	r7, r6, #2
   42e20:	cmp	r7, r3
   42e24:	bcs	42da8 <__assert_fail@plt+0x31b9c>
   42e28:	ldr	r3, [pc, #2512]	; 43800 <__assert_fail@plt+0x325f4>
   42e2c:	mov	r0, r6
   42e30:	mov	r1, #2
   42e34:	ldr	r3, [r3]
   42e38:	blx	r3
   42e3c:	ldr	ip, [sp, #300]	; 0x12c
   42e40:	add	r2, r7, r0
   42e44:	cmp	r7, r2
   42e48:	movls	r3, #0
   42e4c:	movhi	r3, #1
   42e50:	cmp	ip, r2
   42e54:	orrcc	r3, r3, #1
   42e58:	cmp	r3, #0
   42e5c:	strd	r0, [sp, #160]	; 0xa0
   42e60:	bne	43370 <__assert_fail@plt+0x32164>
   42e64:	b	43398 <__assert_fail@plt+0x3218c>
   42e68:	mov	r2, #5
   42e6c:	ldr	r1, [pc, #2500]	; 43838 <__assert_fail@plt+0x3262c>
   42e70:	mov	r0, #0
   42e74:	bl	10f90 <dcgettext@plt>
   42e78:	mov	r6, sl
   42e7c:	bl	54dd0 <warn@@Base>
   42e80:	mov	r0, r6
   42e84:	add	sp, sp, #260	; 0x104
   42e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42e8c:	cmp	r4, #6
   42e90:	beq	42c04 <__assert_fail@plt+0x319f8>
   42e94:	bls	42b5c <__assert_fail@plt+0x31950>
   42e98:	ldr	r3, [sp, #336]	; 0x150
   42e9c:	add	r7, r6, #8
   42ea0:	cmp	r3, #0
   42ea4:	beq	43ec8 <__assert_fail@plt+0x32cbc>
   42ea8:	ldr	r3, [pc, #2404]	; 43814 <__assert_fail@plt+0x32608>
   42eac:	ldr	r3, [r3, #1488]	; 0x5d0
   42eb0:	cmp	r3, #0
   42eb4:	bne	42ee8 <__assert_fail@plt+0x31cdc>
   42eb8:	ldr	r3, [sp, #300]	; 0x12c
   42ebc:	cmp	r3, r7
   42ec0:	bhi	44bf0 <__assert_fail@plt+0x339e4>
   42ec4:	cmp	r6, r3
   42ec8:	bcs	42edc <__assert_fail@plt+0x31cd0>
   42ecc:	sub	r1, r3, r6
   42ed0:	sub	r3, r1, #1
   42ed4:	cmp	r3, #7
   42ed8:	bls	44bf4 <__assert_fail@plt+0x339e8>
   42edc:	mov	r2, #0
   42ee0:	mov	r3, #0
   42ee4:	strd	r2, [sp, #160]	; 0xa0
   42ee8:	mov	r6, r7
   42eec:	b	430b8 <__assert_fail@plt+0x31eac>
   42ef0:	cmp	r4, #15
   42ef4:	beq	42b5c <__assert_fail@plt+0x31950>
   42ef8:	bhi	42870 <__assert_fail@plt+0x31664>
   42efc:	ldr	r3, [sp, #336]	; 0x150
   42f00:	cmp	r3, #0
   42f04:	bne	42c90 <__assert_fail@plt+0x31a84>
   42f08:	ldr	r1, [pc, #2348]	; 4383c <__assert_fail@plt+0x32630>
   42f0c:	mov	r2, #5
   42f10:	mov	r0, r3
   42f14:	bl	10f90 <dcgettext@plt>
   42f18:	ldr	r3, [sp, #336]	; 0x150
   42f1c:	str	r3, [sp]
   42f20:	ldrd	r2, [sp, #160]	; 0xa0
   42f24:	mov	r7, r0
   42f28:	ldr	r0, [pc, #2260]	; 43804 <__assert_fail@plt+0x325f8>
   42f2c:	bl	3c744 <__assert_fail@plt+0x2b538>
   42f30:	mov	r8, r0
   42f34:	ldrd	r0, [sp, #160]	; 0xa0
   42f38:	bl	3dcf4 <__assert_fail@plt+0x2cae8>
   42f3c:	b	43b78 <__assert_fail@plt+0x3296c>
   42f40:	ldr	r3, [pc, #2604]	; 43974 <__assert_fail@plt+0x32768>
   42f44:	cmp	r4, r3
   42f48:	beq	43b94 <__assert_fail@plt+0x32988>
   42f4c:	add	r3, r3, #1
   42f50:	cmp	r4, r3
   42f54:	bne	43094 <__assert_fail@plt+0x31e88>
   42f58:	ldr	r3, [sp, #336]	; 0x150
   42f5c:	cmp	r3, #0
   42f60:	bne	42c90 <__assert_fail@plt+0x31a84>
   42f64:	mov	r2, #5
   42f68:	ldr	r1, [pc, #2256]	; 43840 <__assert_fail@plt+0x32634>
   42f6c:	mov	r0, r3
   42f70:	bl	10f90 <dcgettext@plt>
   42f74:	ldr	r3, [sp, #336]	; 0x150
   42f78:	str	r3, [sp]
   42f7c:	ldrd	r2, [sp, #160]	; 0xa0
   42f80:	str	r0, [sp, #88]	; 0x58
   42f84:	ldr	r0, [pc, #2168]	; 43804 <__assert_fail@plt+0x325f8>
   42f88:	bl	3c744 <__assert_fail@plt+0x2b538>
   42f8c:	ldr	r3, [pc, #2224]	; 43844 <__assert_fail@plt+0x32638>
   42f90:	ldr	r3, [r3]
   42f94:	cmp	r3, #0
   42f98:	str	r0, [sp, #96]	; 0x60
   42f9c:	beq	44f1c <__assert_fail@plt+0x33d10>
   42fa0:	ldr	r3, [pc, #2156]	; 43814 <__assert_fail@plt+0x32608>
   42fa4:	ldr	r1, [r3, #1116]	; 0x45c
   42fa8:	cmp	r1, #0
   42fac:	beq	45008 <__assert_fail@plt+0x33dfc>
   42fb0:	ldrd	r2, [sp, #160]	; 0xa0
   42fb4:	mov	r0, #42	; 0x2a
   42fb8:	strd	r2, [sp, #104]	; 0x68
   42fbc:	bl	3580c <__assert_fail@plt+0x24600>
   42fc0:	cmp	r0, #0
   42fc4:	beq	45020 <__assert_fail@plt+0x33e14>
   42fc8:	ldr	r3, [pc, #2132]	; 43824 <__assert_fail@plt+0x32618>
   42fcc:	ldr	r0, [r3, #3040]	; 0xbe0
   42fd0:	cmp	r0, #0
   42fd4:	beq	45278 <__assert_fail@plt+0x3406c>
   42fd8:	add	r3, r3, #3056	; 0xbf0
   42fdc:	ldrd	r8, [sp, #104]	; 0x68
   42fe0:	ldrd	r2, [r3]
   42fe4:	cmp	r9, r3
   42fe8:	cmpeq	r8, r2
   42fec:	bcs	4504c <__assert_fail@plt+0x33e40>
   42ff0:	ldrd	r8, [sp, #104]	; 0x68
   42ff4:	strd	r2, [sp, #104]	; 0x68
   42ff8:	add	r7, r0, r8
   42ffc:	sub	r1, r2, r8
   43000:	mov	r0, r7
   43004:	bl	11104 <strnlen@plt>
   43008:	ldrd	r2, [sp, #104]	; 0x68
   4300c:	subs	r1, r2, r8
   43010:	sbc	r3, r3, r9
   43014:	str	r1, [sp, #120]	; 0x78
   43018:	str	r3, [sp, #124]	; 0x7c
   4301c:	ldrd	r2, [sp, #120]	; 0x78
   43020:	mov	r1, #0
   43024:	cmp	r1, r3
   43028:	cmpeq	r0, r2
   4302c:	beq	45260 <__assert_fail@plt+0x34054>
   43030:	mov	r3, r7
   43034:	ldr	r2, [sp, #96]	; 0x60
   43038:	ldr	r1, [sp, #60]	; 0x3c
   4303c:	ldr	r0, [sp, #88]	; 0x58
   43040:	bl	10f24 <printf@plt>
   43044:	mov	r7, #0
   43048:	b	428a0 <__assert_fail@plt+0x31694>
   4304c:	cmp	r4, #22
   43050:	beq	430b8 <__assert_fail@plt+0x31eac>
   43054:	bhi	43318 <__assert_fail@plt+0x3210c>
   43058:	cmp	r4, #20
   4305c:	beq	42e98 <__assert_fail@plt+0x31c8c>
   43060:	cmp	r4, #21
   43064:	bne	430a0 <__assert_fail@plt+0x31e94>
   43068:	ldr	r3, [sp, #336]	; 0x150
   4306c:	cmp	r3, #0
   43070:	bne	42c90 <__assert_fail@plt+0x31a84>
   43074:	ldrd	r2, [sp, #160]	; 0xa0
   43078:	ldr	r1, [sp, #304]	; 0x130
   4307c:	adds	r2, r1, r2
   43080:	ldr	r1, [sp, #336]	; 0x150
   43084:	str	r1, [sp]
   43088:	ldr	r1, [sp, #308]	; 0x134
   4308c:	adc	r3, r1, r3
   43090:	b	42884 <__assert_fail@plt+0x31678>
   43094:	sub	r3, r3, #31
   43098:	cmp	r4, r3
   4309c:	beq	43aa4 <__assert_fail@plt+0x32898>
   430a0:	ldr	r1, [pc, #1952]	; 43848 <__assert_fail@plt+0x3263c>
   430a4:	mov	r2, #5
   430a8:	mov	r0, #0
   430ac:	bl	10f90 <dcgettext@plt>
   430b0:	mov	r1, r4
   430b4:	bl	54dd0 <warn@@Base>
   430b8:	ldr	r3, [sp, #336]	; 0x150
   430bc:	cmp	r3, #0
   430c0:	ldreq	r7, [sp, #336]	; 0x150
   430c4:	beq	428a0 <__assert_fail@plt+0x31694>
   430c8:	b	42c90 <__assert_fail@plt+0x31a84>
   430cc:	add	r3, r3, #4
   430d0:	cmp	r5, r3
   430d4:	bne	43198 <__assert_fail@plt+0x31f8c>
   430d8:	ldr	r3, [sp, #328]	; 0x148
   430dc:	cmp	r3, #3
   430e0:	bgt	430f0 <__assert_fail@plt+0x31ee4>
   430e4:	sub	r3, r4, #6
   430e8:	cmp	r3, #1
   430ec:	bls	430f8 <__assert_fail@plt+0x31eec>
   430f0:	cmp	r4, #23
   430f4:	bne	43198 <__assert_fail@plt+0x31f8c>
   430f8:	ldr	r3, [sp, #332]	; 0x14c
   430fc:	ldr	r2, [sp, #332]	; 0x14c
   43100:	ldr	r3, [r3, #64]	; 0x40
   43104:	ldr	r2, [r2, #60]	; 0x3c
   43108:	cmp	r3, #0
   4310c:	cmpne	r3, r2
   43110:	bls	44b24 <__assert_fail@plt+0x33918>
   43114:	ldr	r3, [sp, #332]	; 0x14c
   43118:	ldr	r0, [r3, #56]	; 0x38
   4311c:	ldr	r3, [sp, #344]	; 0x158
   43120:	cmp	r3, #0
   43124:	beq	43150 <__assert_fail@plt+0x31f44>
   43128:	ldr	r1, [sp, #344]	; 0x158
   4312c:	ldr	r3, [sp, #160]	; 0xa0
   43130:	ldr	ip, [sp, #164]	; 0xa4
   43134:	ldr	r1, [r1, #48]	; 0x30
   43138:	adds	r3, r3, r1
   4313c:	ldr	r1, [sp, #344]	; 0x158
   43140:	str	r3, [sp, #160]	; 0xa0
   43144:	ldr	r1, [r1, #52]	; 0x34
   43148:	adc	r3, ip, r1
   4314c:	str	r3, [sp, #164]	; 0xa4
   43150:	ldr	r3, [pc, #1780]	; 4384c <__assert_fail@plt+0x32640>
   43154:	ldr	r1, [r8, #1492]	; 0x5d4
   43158:	cmp	r5, r3
   4315c:	str	r1, [r0, r2, lsl #2]
   43160:	ldr	r3, [sp, #332]	; 0x14c
   43164:	beq	44c0c <__assert_fail@plt+0x33a00>
   43168:	ldr	r1, [r3, #60]	; 0x3c
   4316c:	ldr	r3, [r3, #68]	; 0x44
   43170:	cmp	r1, r3
   43174:	bhi	44eec <__assert_fail@plt+0x33ce0>
   43178:	ldr	r3, [sp, #332]	; 0x14c
   4317c:	ldrd	r8, [sp, #160]	; 0xa0
   43180:	add	r1, r1, #1
   43184:	ldr	r0, [r3, #48]	; 0x30
   43188:	lsl	r3, r2, #3
   4318c:	strd	r8, [r0, r3]
   43190:	ldr	r3, [sp, #332]	; 0x14c
   43194:	str	r1, [r3, #60]	; 0x3c
   43198:	ldr	r2, [sp, #336]	; 0x150
   4319c:	clz	r3, r5
   431a0:	cmp	r2, #0
   431a4:	lsr	r3, r3, #5
   431a8:	moveq	r8, r3
   431ac:	movne	r8, #1
   431b0:	cmp	r8, #0
   431b4:	bne	42e80 <__assert_fail@plt+0x31c74>
   431b8:	cmp	r5, #66	; 0x42
   431bc:	beq	4442c <__assert_fail@plt+0x33220>
   431c0:	bhi	434e0 <__assert_fail@plt+0x322d4>
   431c4:	cmp	r5, #34	; 0x22
   431c8:	beq	435d8 <__assert_fail@plt+0x323cc>
   431cc:	bls	43208 <__assert_fail@plt+0x31ffc>
   431d0:	cmp	r5, #54	; 0x36
   431d4:	beq	4458c <__assert_fail@plt+0x33380>
   431d8:	bls	432b4 <__assert_fail@plt+0x320a8>
   431dc:	cmp	r5, #61	; 0x3d
   431e0:	beq	44520 <__assert_fail@plt+0x33314>
   431e4:	bls	43440 <__assert_fail@plt+0x32234>
   431e8:	cmp	r5, #62	; 0x3e
   431ec:	beq	43bc8 <__assert_fail@plt+0x329bc>
   431f0:	cmp	r5, #64	; 0x40
   431f4:	bne	42e80 <__assert_fail@plt+0x31c74>
   431f8:	ldr	r3, [pc, #1556]	; 43814 <__assert_fail@plt+0x32608>
   431fc:	mov	r2, #1
   43200:	str	r2, [r3, #1492]	; 0x5d4
   43204:	b	43448 <__assert_fail@plt+0x3223c>
   43208:	cmp	r5, #19
   4320c:	beq	443bc <__assert_fail@plt+0x331b0>
   43210:	bls	433e0 <__assert_fail@plt+0x321d4>
   43214:	cmp	r5, #24
   43218:	beq	44490 <__assert_fail@plt+0x33284>
   4321c:	bls	43264 <__assert_fail@plt+0x32058>
   43220:	cmp	r5, #25
   43224:	beq	43448 <__assert_fail@plt+0x3223c>
   43228:	cmp	r5, #32
   4322c:	bne	42e80 <__assert_fail@plt+0x31c74>
   43230:	mov	r0, #9
   43234:	bl	110c8 <putchar@plt>
   43238:	ldrd	r2, [sp, #160]	; 0xa0
   4323c:	cmp	r3, #0
   43240:	cmpeq	r2, #3
   43244:	bhi	43fa4 <__assert_fail@plt+0x32d98>
   43248:	cmp	r2, #3
   4324c:	ldrls	pc, [pc, r2, lsl #2]
   43250:	b	43fa4 <__assert_fail@plt+0x32d98>
   43254:	andeq	r4, r4, r4, lsr #32
   43258:	andeq	r4, r4, ip
   4325c:	strdeq	r3, [r4], -r4
   43260:	ldrdeq	r3, [r4], -ip
   43264:	cmp	r5, #23
   43268:	bne	42e80 <__assert_fail@plt+0x31c74>
   4326c:	mov	r0, #9
   43270:	bl	110c8 <putchar@plt>
   43274:	ldrd	r2, [sp, #160]	; 0xa0
   43278:	cmp	r3, #0
   4327c:	cmpeq	r2, #2
   43280:	beq	43f8c <__assert_fail@plt+0x32d80>
   43284:	cmp	r3, #0
   43288:	cmpeq	r2, #3
   4328c:	beq	44cb8 <__assert_fail@plt+0x33aac>
   43290:	cmp	r3, #0
   43294:	cmpeq	r2, #1
   43298:	beq	44cac <__assert_fail@plt+0x33aa0>
   4329c:	mov	r2, #5
   432a0:	ldr	r1, [pc, #1448]	; 43850 <__assert_fail@plt+0x32644>
   432a4:	mov	r0, #0
   432a8:	bl	10f90 <dcgettext@plt>
   432ac:	bl	10f24 <printf@plt>
   432b0:	b	42e80 <__assert_fail@plt+0x31c74>
   432b4:	cmp	r5, #46	; 0x2e
   432b8:	beq	43488 <__assert_fail@plt+0x3227c>
   432bc:	bls	436b0 <__assert_fail@plt+0x324a4>
   432c0:	cmp	r5, #47	; 0x2f
   432c4:	beq	435d8 <__assert_fail@plt+0x323cc>
   432c8:	cmp	r5, #50	; 0x32
   432cc:	bne	42e80 <__assert_fail@plt+0x31c74>
   432d0:	mov	r0, #9
   432d4:	bl	110c8 <putchar@plt>
   432d8:	ldrd	r2, [sp, #160]	; 0xa0
   432dc:	cmp	r3, #0
   432e0:	cmpeq	r2, #2
   432e4:	beq	43f80 <__assert_fail@plt+0x32d74>
   432e8:	cmp	r3, #0
   432ec:	cmpeq	r2, #3
   432f0:	beq	44d60 <__assert_fail@plt+0x33b54>
   432f4:	cmp	r3, #0
   432f8:	cmpeq	r2, #1
   432fc:	beq	44d54 <__assert_fail@plt+0x33b48>
   43300:	mov	r2, #5
   43304:	ldr	r1, [pc, #1352]	; 43854 <__assert_fail@plt+0x32648>
   43308:	mov	r0, #0
   4330c:	bl	10f90 <dcgettext@plt>
   43310:	bl	10f24 <printf@plt>
   43314:	b	42e80 <__assert_fail@plt+0x31c74>
   43318:	cmp	r4, #24
   4331c:	bne	433d0 <__assert_fail@plt+0x321c4>
   43320:	ldr	r3, [sp, #300]	; 0x12c
   43324:	mov	r2, #0
   43328:	add	r1, sp, #156	; 0x9c
   4332c:	mov	r0, r6
   43330:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   43334:	ldr	r7, [sp, #156]	; 0x9c
   43338:	ldr	r3, [sp, #300]	; 0x12c
   4333c:	add	r7, r6, r7
   43340:	cmp	r3, r7
   43344:	strd	r0, [sp, #160]	; 0xa0
   43348:	bls	42dcc <__assert_fail@plt+0x31bc0>
   4334c:	add	r2, r7, r0
   43350:	cmp	r7, r2
   43354:	ldr	ip, [sp, #300]	; 0x12c
   43358:	movls	r3, #0
   4335c:	movhi	r3, #1
   43360:	cmp	ip, r2
   43364:	orrcc	r3, r3, #1
   43368:	cmp	r3, #0
   4336c:	beq	43398 <__assert_fail@plt+0x3218c>
   43370:	mov	r2, #5
   43374:	ldr	r1, [pc, #1244]	; 43858 <__assert_fail@plt+0x3264c>
   43378:	mov	r0, #0
   4337c:	bl	10f90 <dcgettext@plt>
   43380:	ldr	r1, [sp, #160]	; 0xa0
   43384:	bl	54dd0 <warn@@Base>
   43388:	ldr	r3, [sp, #300]	; 0x12c
   4338c:	sub	r0, r3, r7
   43390:	asr	r1, r0, #31
   43394:	strd	r0, [sp, #160]	; 0xa0
   43398:	ldr	r3, [sp, #336]	; 0x150
   4339c:	cmp	r3, #0
   433a0:	addne	r6, r7, r0
   433a4:	bne	42c94 <__assert_fail@plt+0x31a88>
   433a8:	ldr	r3, [sp, #60]	; 0x3c
   433ac:	mov	r2, r0
   433b0:	str	r3, [sp, #4]
   433b4:	ldr	r3, [sp, #300]	; 0x12c
   433b8:	mov	r0, r7
   433bc:	str	r3, [sp]
   433c0:	mov	r3, r1
   433c4:	bl	3dbe4 <__assert_fail@plt+0x2c9d8>
   433c8:	mov	r6, r0
   433cc:	b	428a0 <__assert_fail@plt+0x31694>
   433d0:	bcc	42c04 <__assert_fail@plt+0x319f8>
   433d4:	cmp	r4, #25
   433d8:	bne	430a0 <__assert_fail@plt+0x31e94>
   433dc:	b	42b5c <__assert_fail@plt+0x31950>
   433e0:	cmp	r5, #9
   433e4:	bne	43474 <__assert_fail@plt+0x32268>
   433e8:	mov	r0, r5
   433ec:	bl	110c8 <putchar@plt>
   433f0:	ldrd	r2, [sp, #160]	; 0xa0
   433f4:	cmp	r3, #0
   433f8:	cmpeq	r2, #1
   433fc:	beq	43f74 <__assert_fail@plt+0x32d68>
   43400:	orrs	r1, r2, r3
   43404:	beq	44d48 <__assert_fail@plt+0x33b3c>
   43408:	cmp	r3, #0
   4340c:	cmpeq	r2, #255	; 0xff
   43410:	beq	43428 <__assert_fail@plt+0x3221c>
   43414:	mvn	r1, #0
   43418:	mvn	r0, #0
   4341c:	cmp	r3, r1
   43420:	cmpeq	r2, r0
   43424:	bne	42e80 <__assert_fail@plt+0x31c74>
   43428:	mov	r2, #5
   4342c:	ldr	r1, [pc, #1064]	; 4385c <__assert_fail@plt+0x32650>
   43430:	mov	r0, #0
   43434:	bl	10f90 <dcgettext@plt>
   43438:	bl	10f24 <printf@plt>
   4343c:	b	42e80 <__assert_fail@plt+0x31c74>
   43440:	cmp	r5, #56	; 0x38
   43444:	bne	42e80 <__assert_fail@plt+0x31c74>
   43448:	ldr	r3, [sp, #328]	; 0x148
   4344c:	cmp	r3, #3
   43450:	ble	43ea8 <__assert_fail@plt+0x32c9c>
   43454:	cmp	r4, #23
   43458:	bne	435d8 <__assert_fail@plt+0x323cc>
   4345c:	mov	r2, #5
   43460:	ldr	r1, [pc, #1016]	; 43860 <__assert_fail@plt+0x32654>
   43464:	mov	r0, #0
   43468:	bl	10f90 <dcgettext@plt>
   4346c:	bl	10f24 <printf@plt>
   43470:	b	435d8 <__assert_fail@plt+0x323cc>
   43474:	bls	434d4 <__assert_fail@plt+0x322c8>
   43478:	cmp	r5, #11
   4347c:	beq	43488 <__assert_fail@plt+0x3227c>
   43480:	cmp	r5, #13
   43484:	bne	42e80 <__assert_fail@plt+0x31c74>
   43488:	cmp	r4, #24
   4348c:	bne	42e80 <__assert_fail@plt+0x31c74>
   43490:	ldr	r0, [pc, #972]	; 43864 <__assert_fail@plt+0x32658>
   43494:	bl	10f24 <printf@plt>
   43498:	ldr	r3, [sp, #340]	; 0x154
   4349c:	ldrd	r4, [sp, #160]	; 0xa0
   434a0:	str	r3, [sp, #16]
   434a4:	add	r3, sp, #304	; 0x130
   434a8:	ldr	r1, [sp, #64]	; 0x40
   434ac:	ldrd	r2, [r3]
   434b0:	mov	r0, r7
   434b4:	strd	r4, [sp]
   434b8:	strd	r2, [sp, #8]
   434bc:	mov	r2, fp
   434c0:	ldr	r3, [sp, #328]	; 0x148
   434c4:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   434c8:	mov	r0, #41	; 0x29
   434cc:	bl	110c8 <putchar@plt>
   434d0:	b	42e80 <__assert_fail@plt+0x31c74>
   434d4:	cmp	r5, #2
   434d8:	beq	43448 <__assert_fail@plt+0x3223c>
   434dc:	b	42e80 <__assert_fail@plt+0x31c74>
   434e0:	cmp	r5, #107	; 0x6b
   434e4:	beq	43488 <__assert_fail@plt+0x3227c>
   434e8:	bhi	4365c <__assert_fail@plt+0x32450>
   434ec:	cmp	r5, #77	; 0x4d
   434f0:	beq	43448 <__assert_fail@plt+0x3223c>
   434f4:	bls	43570 <__assert_fail@plt+0x32364>
   434f8:	cmp	r5, #94	; 0x5e
   434fc:	beq	43e08 <__assert_fail@plt+0x32bfc>
   43500:	bls	435d0 <__assert_fail@plt+0x323c4>
   43504:	cmp	r5, #101	; 0x65
   43508:	bne	42e80 <__assert_fail@plt+0x31c74>
   4350c:	mov	r0, #9
   43510:	bl	110c8 <putchar@plt>
   43514:	ldrd	r2, [sp, #160]	; 0xa0
   43518:	cmp	r3, #0
   4351c:	cmpeq	r2, #1
   43520:	beq	43f68 <__assert_fail@plt+0x32d5c>
   43524:	orrs	r1, r2, r3
   43528:	beq	44ca0 <__assert_fail@plt+0x33a94>
   4352c:	cmp	r3, #0
   43530:	cmpeq	r2, #2
   43534:	beq	44c94 <__assert_fail@plt+0x33a88>
   43538:	subs	r1, r2, #64	; 0x40
   4353c:	sbc	r3, r3, #0
   43540:	str	r1, [sp, #112]	; 0x70
   43544:	str	r3, [sp, #116]	; 0x74
   43548:	ldrd	r2, [sp, #112]	; 0x70
   4354c:	mov	r0, #0
   43550:	cmp	r3, #0
   43554:	cmpeq	r2, #191	; 0xbf
   43558:	mov	r2, #5
   4355c:	ldrls	r1, [pc, #772]	; 43868 <__assert_fail@plt+0x3265c>
   43560:	ldrhi	r1, [pc, #772]	; 4386c <__assert_fail@plt+0x32660>
   43564:	bl	10f90 <dcgettext@plt>
   43568:	bl	10f24 <printf@plt>
   4356c:	b	42e80 <__assert_fail@plt+0x31c74>
   43570:	cmp	r5, #72	; 0x48
   43574:	beq	43448 <__assert_fail@plt+0x3223c>
   43578:	bls	43650 <__assert_fail@plt+0x32444>
   4357c:	cmp	r5, #74	; 0x4a
   43580:	beq	43448 <__assert_fail@plt+0x3223c>
   43584:	cmp	r5, #76	; 0x4c
   43588:	bne	42e80 <__assert_fail@plt+0x31c74>
   4358c:	mov	r0, #9
   43590:	bl	110c8 <putchar@plt>
   43594:	ldrd	r2, [sp, #160]	; 0xa0
   43598:	cmp	r3, #0
   4359c:	cmpeq	r2, #1
   435a0:	beq	43f98 <__assert_fail@plt+0x32d8c>
   435a4:	orrs	r1, r2, r3
   435a8:	beq	44c88 <__assert_fail@plt+0x33a7c>
   435ac:	cmp	r3, #0
   435b0:	cmpeq	r2, #2
   435b4:	beq	44c7c <__assert_fail@plt+0x33a70>
   435b8:	mov	r2, #5
   435bc:	ldr	r1, [pc, #684]	; 43870 <__assert_fail@plt+0x32664>
   435c0:	mov	r0, #0
   435c4:	bl	10f90 <dcgettext@plt>
   435c8:	bl	10f24 <printf@plt>
   435cc:	b	42e80 <__assert_fail@plt+0x31c74>
   435d0:	cmp	r5, #81	; 0x51
   435d4:	bhi	42e80 <__assert_fail@plt+0x31c74>
   435d8:	cmp	r7, #0
   435dc:	beq	42e80 <__assert_fail@plt+0x31c74>
   435e0:	ldr	r0, [pc, #636]	; 43864 <__assert_fail@plt+0x32658>
   435e4:	bl	10f24 <printf@plt>
   435e8:	ldr	r3, [sp, #340]	; 0x154
   435ec:	ldrd	r4, [sp, #160]	; 0xa0
   435f0:	str	r3, [sp, #16]
   435f4:	add	r3, sp, #304	; 0x130
   435f8:	ldr	r1, [sp, #64]	; 0x40
   435fc:	ldrd	r2, [r3]
   43600:	mov	r0, r7
   43604:	strd	r4, [sp]
   43608:	strd	r2, [sp, #8]
   4360c:	mov	r2, fp
   43610:	ldr	r3, [sp, #328]	; 0x148
   43614:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   43618:	mov	r4, r0
   4361c:	mov	r0, #41	; 0x29
   43620:	bl	110c8 <putchar@plt>
   43624:	cmp	r4, #0
   43628:	beq	42e80 <__assert_fail@plt+0x31c74>
   4362c:	ldr	r3, [pc, #480]	; 43814 <__assert_fail@plt+0x32608>
   43630:	ldr	r0, [r3, #1492]	; 0x5d4
   43634:	cmp	r0, #0
   43638:	bne	42e80 <__assert_fail@plt+0x31c74>
   4363c:	mov	r2, #5
   43640:	ldr	r1, [pc, #556]	; 43874 <__assert_fail@plt+0x32668>
   43644:	bl	10f90 <dcgettext@plt>
   43648:	bl	10f24 <printf@plt>
   4364c:	b	42e80 <__assert_fail@plt+0x31c74>
   43650:	cmp	r5, #70	; 0x46
   43654:	beq	43448 <__assert_fail@plt+0x3223c>
   43658:	b	42e80 <__assert_fail@plt+0x31c74>
   4365c:	cmp	r5, #132	; 0x84
   43660:	bls	436e0 <__assert_fail@plt+0x324d4>
   43664:	cmp	r5, #139	; 0x8b
   43668:	bne	436bc <__assert_fail@plt+0x324b0>
   4366c:	mov	r0, #9
   43670:	bl	110c8 <putchar@plt>
   43674:	ldrd	r2, [sp, #160]	; 0xa0
   43678:	cmp	r3, #0
   4367c:	cmpeq	r2, #1
   43680:	beq	43f50 <__assert_fail@plt+0x32d44>
   43684:	orrs	r1, r2, r3
   43688:	beq	44c64 <__assert_fail@plt+0x33a58>
   4368c:	cmp	r3, #0
   43690:	cmpeq	r2, #2
   43694:	beq	44c4c <__assert_fail@plt+0x33a40>
   43698:	mov	r2, #5
   4369c:	ldr	r1, [pc, #732]	; 43980 <__assert_fail@plt+0x32774>
   436a0:	mov	r0, #0
   436a4:	bl	10f90 <dcgettext@plt>
   436a8:	bl	10f24 <printf@plt>
   436ac:	b	42e80 <__assert_fail@plt+0x31c74>
   436b0:	cmp	r5, #42	; 0x2a
   436b4:	beq	43448 <__assert_fail@plt+0x3223c>
   436b8:	b	42e80 <__assert_fail@plt+0x31c74>
   436bc:	bhi	436cc <__assert_fail@plt+0x324c0>
   436c0:	cmp	r5, #134	; 0x86
   436c4:	beq	43448 <__assert_fail@plt+0x3223c>
   436c8:	b	42e80 <__assert_fail@plt+0x31c74>
   436cc:	sub	r5, r5, #8448	; 0x2100
   436d0:	sub	r5, r5, #17
   436d4:	cmp	r5, #3
   436d8:	bls	43448 <__assert_fail@plt+0x3223c>
   436dc:	b	42e80 <__assert_fail@plt+0x31c74>
   436e0:	cmp	r5, #131	; 0x83
   436e4:	bcs	43448 <__assert_fail@plt+0x3223c>
   436e8:	cmp	r5, #111	; 0x6f
   436ec:	bcc	42e80 <__assert_fail@plt+0x31c74>
   436f0:	cmp	r5, #112	; 0x70
   436f4:	bls	43488 <__assert_fail@plt+0x3227c>
   436f8:	cmp	r5, #126	; 0x7e
   436fc:	beq	43448 <__assert_fail@plt+0x3223c>
   43700:	b	42e80 <__assert_fail@plt+0x31c74>
   43704:	ldr	r3, [pc, #364]	; 43878 <__assert_fail@plt+0x3266c>
   43708:	cmp	r5, r3
   4370c:	bne	430cc <__assert_fail@plt+0x31ec0>
   43710:	ldrd	r2, [sp, #160]	; 0xa0
   43714:	ldr	r1, [sp, #332]	; 0x14c
   43718:	strd	r2, [r1, #32]
   4371c:	b	42e80 <__assert_fail@plt+0x31c74>
   43720:	sub	r3, r3, #3
   43724:	cmp	r5, r3
   43728:	bcs	430d8 <__assert_fail@plt+0x31ecc>
   4372c:	cmp	r5, #132	; 0x84
   43730:	bhi	43a7c <__assert_fail@plt+0x32870>
   43734:	cmp	r5, #131	; 0x83
   43738:	bcs	430d8 <__assert_fail@plt+0x31ecc>
   4373c:	cmp	r5, #118	; 0x76
   43740:	bne	43a70 <__assert_fail@plt+0x32864>
   43744:	ldr	r3, [r8, #1500]	; 0x5dc
   43748:	cmp	r3, #0
   4374c:	beq	43198 <__assert_fail@plt+0x31f8c>
   43750:	cmp	r4, #14
   43754:	beq	44f5c <__assert_fail@plt+0x33d50>
   43758:	ldr	r3, [pc, #292]	; 43884 <__assert_fail@plt+0x32678>
   4375c:	cmp	r4, r3
   43760:	beq	44f38 <__assert_fail@plt+0x33d2c>
   43764:	cmp	r4, #8
   43768:	beq	44f6c <__assert_fail@plt+0x33d60>
   4376c:	mov	r2, #5
   43770:	ldr	r1, [pc, #260]	; 4387c <__assert_fail@plt+0x32670>
   43774:	mov	r0, #0
   43778:	bl	10f90 <dcgettext@plt>
   4377c:	str	r0, [sp, #68]	; 0x44
   43780:	mov	r0, r4
   43784:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   43788:	str	r0, [sp, #60]	; 0x3c
   4378c:	mov	r0, r5
   43790:	bl	3df50 <__assert_fail@plt+0x2cd44>
   43794:	ldr	r3, [sp, #68]	; 0x44
   43798:	ldr	r1, [sp, #60]	; 0x3c
   4379c:	mov	r2, r0
   437a0:	mov	r0, r3
   437a4:	bl	54dd0 <warn@@Base>
   437a8:	mov	r2, #5
   437ac:	ldr	r1, [pc, #204]	; 43880 <__assert_fail@plt+0x32674>
   437b0:	mov	r0, #0
   437b4:	bl	10f90 <dcgettext@plt>
   437b8:	str	r0, [r8, #1504]	; 0x5e0
   437bc:	b	43198 <__assert_fail@plt+0x31f8c>
   437c0:	cmp	r5, #56	; 0x38
   437c4:	beq	430d8 <__assert_fail@plt+0x31ecc>
   437c8:	bhi	43a28 <__assert_fail@plt+0x3281c>
   437cc:	cmp	r5, #25
   437d0:	beq	430d8 <__assert_fail@plt+0x31ecc>
   437d4:	bhi	439d0 <__assert_fail@plt+0x327c4>
   437d8:	cmp	r5, #2
   437dc:	beq	430d8 <__assert_fail@plt+0x31ecc>
   437e0:	cmp	r5, #17
   437e4:	bne	43198 <__assert_fail@plt+0x31f8c>
   437e8:	ldr	r3, [r8, #1496]	; 0x5d8
   437ec:	cmp	r3, #0
   437f0:	ldrdne	r2, [sp, #160]	; 0xa0
   437f4:	ldrne	r1, [sp, #332]	; 0x14c
   437f8:	strdne	r2, [r1, #24]
   437fc:	b	42e80 <__assert_fail@plt+0x31c74>
   43800:	andeq	lr, r9, ip, asr sp
   43804:	andeq	r9, r6, r0, lsr #15
   43808:	muleq	r7, r0, sp
   4380c:	andeq	lr, r9, r4, lsl sp
   43810:	andeq	lr, r9, r8, lsr sp
   43814:	ldrdeq	ip, [r9], -r0
   43818:	andeq	r2, r0, r4, lsl r1
   4381c:	andeq	r2, r0, r2, lsr r1
   43820:	andeq	pc, r7, r4, asr #30
   43824:	strdeq	r9, [r9], -r0
   43828:	andeq	r8, r6, ip, rrx
   4382c:	andeq	pc, r7, r8, lsl #27
   43830:	andeq	r1, r0, r1, lsl #30
   43834:	ldrdeq	pc, [r7], -r8
   43838:	andeq	pc, r7, r0, asr #26
   4383c:	andeq	pc, r7, r8, lsl lr	; <UNPREDICTABLE>
   43840:	andeq	pc, r7, ip, lsl #29
   43844:	andeq	lr, r9, ip, lsl sp
   43848:	andeq	pc, r7, r0, lsr #31
   4384c:	andeq	r2, r0, r7, lsr r1
   43850:	andeq	r0, r8, ip, lsr #10
   43854:	strdeq	r0, [r8], -r4
   43858:	strdeq	pc, [r7], -r0
   4385c:	andeq	r0, r8, r8, lsr #13
   43860:	andeq	r0, r8, r8, ror #14
   43864:	andeq	r0, r8, ip, ror r7
   43868:	andeq	r0, r8, r4, ror #10
   4386c:	andeq	r0, r8, r8, ror r5
   43870:			; <UNDEFINED> instruction: 0x000805b0
   43874:	andeq	r0, r8, r0, lsl #15
   43878:	andeq	r2, r0, r3, lsr r1
   4387c:	andeq	r0, r8, r4, rrx
   43880:	andeq	r2, r6, r0, asr #31
   43884:	andeq	r1, r0, r2, lsl #30
   43888:	andeq	r3, r8, r8, asr ip
   4388c:	andeq	pc, r7, ip, ror #28
   43890:	andeq	pc, r7, r0, asr #28
   43894:	muleq	r7, ip, sp
   43898:	andeq	pc, r7, ip, lsr #27
   4389c:	andeq	lr, r9, r4, lsl sp
   438a0:	andeq	lr, r9, r8, lsr sp
   438a4:	andeq	r0, r8, ip, lsr r7
   438a8:	andeq	r0, r8, r0, asr r5
   438ac:	andeq	r0, r8, r0, asr #13
   438b0:	ldrdeq	r0, [r8], -ip
   438b4:	andeq	r0, r8, r4, lsl r5
   438b8:	muleq	r8, r4, r5
   438bc:	strdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   438c0:	andeq	r0, r8, ip, asr #1
   438c4:	andeq	r0, r8, r8, lsr #1
   438c8:	muleq	r8, ip, r0
   438cc:	andeq	r0, r8, ip, lsl #1
   438d0:	andeq	r0, r8, r0, lsl r7
   438d4:	strdeq	r0, [r8], -ip
   438d8:	andeq	r0, r8, r4, ror #13
   438dc:	ldrdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   438e0:	muleq	r8, r4, r4
   438e4:	andeq	r0, r8, ip, ror r4
   438e8:	andeq	r0, r8, r8, ror #8
   438ec:	andeq	r0, r8, r0, asr r4
   438f0:	andeq	r0, r8, r0, asr #8
   438f4:	andeq	r0, r8, r8, lsr #8
   438f8:	andeq	r0, r8, r8, lsl r4
   438fc:	andeq	r0, r8, r0, lsl r4
   43900:	andeq	r0, r8, r8, lsl #8
   43904:	strdeq	r0, [r8], -r4
   43908:	andeq	r0, r8, ip, lsl #7
   4390c:	andeq	r0, r8, r0, ror #7
   43910:	ldrdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   43914:	andeq	r0, r8, r4, asr #7
   43918:			; <UNDEFINED> instruction: 0x000803b0
   4391c:	muleq	r8, ip, r3
   43920:	andeq	r0, r8, r8, ror r3
   43924:	andeq	r0, r8, r8, ror #6
   43928:	andeq	r0, r8, ip, asr r3
   4392c:	andeq	r0, r8, ip, asr #6
   43930:	andeq	r0, r8, r0, asr #6
   43934:	andeq	r0, r8, r8, lsr r3
   43938:	andeq	r0, r8, r8, lsr #6
   4393c:	andeq	r0, r8, ip, lsl r3
   43940:	andeq	r0, r8, r8, lsl #6
   43944:	andeq	r0, r8, r0, lsl #6
   43948:	andeq	r0, r8, ip, lsr #9
   4394c:	andeq	r0, r8, r0, asr #9
   43950:	muleq	r5, r0, pc	; <UNPREDICTABLE>
   43954:			; <UNDEFINED> instruction: 0x0007fdb4
   43958:	andeq	lr, r9, ip, asr sp
   4395c:	andeq	pc, r7, r0, lsr pc	; <UNPREDICTABLE>
   43960:	andeq	r0, r8, ip, lsr #3
   43964:	strdeq	r0, [r8], -r4
   43968:	andeq	r0, r8, r8, ror #11
   4396c:	ldrdeq	r0, [r8], -ip
   43970:	andeq	r0, r8, r8, asr #11
   43974:	andeq	r1, r0, r0, lsr #30
   43978:	muleq	r8, ip, r7
   4397c:	andeq	r9, r6, r0, lsr #15
   43980:	andeq	r0, r8, r4, lsr #14
   43984:	andeq	r0, r8, r8, ror #12
   43988:	andeq	r0, r8, ip, asr r6
   4398c:	andeq	r0, r8, ip, asr #12
   43990:	andeq	r0, r8, ip, lsr r6
   43994:	andeq	r0, r8, r0, lsr r6
   43998:	andeq	r0, r8, r4, lsr #12
   4399c:	andeq	r0, r8, r8, lsl r6
   439a0:	andeq	r0, r8, r0, lsl #13
   439a4:	muleq	r8, r0, r6
   439a8:	andeq	r0, r8, ip, ror #2
   439ac:	andeq	r0, r8, ip, lsr #4
   439b0:	andeq	r0, r8, r8, lsl r1
   439b4:	andeq	r0, r8, ip, asr r2
   439b8:	andeq	r0, r8, r4, lsl #5
   439bc:	andeq	r8, r0, r1
   439c0:	andeq	r8, r0, r5, ror #14
   439c4:	strdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   439c8:			; <UNDEFINED> instruction: 0x0007e5b0
   439cc:	strdeq	lr, [r7], -ip
   439d0:	cmp	r5, #27
   439d4:	bne	43a64 <__assert_fail@plt+0x32858>
   439d8:	ldr	r3, [r8, #1500]	; 0x5dc
   439dc:	cmp	r3, #0
   439e0:	beq	42e80 <__assert_fail@plt+0x31c74>
   439e4:	cmp	r4, #14
   439e8:	beq	44f8c <__assert_fail@plt+0x33d80>
   439ec:	bls	44ac8 <__assert_fail@plt+0x338bc>
   439f0:	cmp	r4, #31
   439f4:	beq	44f9c <__assert_fail@plt+0x33d90>
   439f8:	ldr	r3, [pc, #-380]	; 43884 <__assert_fail@plt+0x32678>
   439fc:	cmp	r4, r3
   43a00:	bne	44ad4 <__assert_fail@plt+0x338c8>
   43a04:	ldr	r2, [sp, #68]	; 0x44
   43a08:	mov	r3, #0
   43a0c:	str	fp, [sp]
   43a10:	strd	r2, [sp, #4]
   43a14:	ldrd	r0, [sp, #160]	; 0xa0
   43a18:	ldr	r2, [sp, #344]	; 0x158
   43a1c:	bl	3c814 <__assert_fail@plt+0x2b608>
   43a20:	str	r0, [r8, #1508]	; 0x5e4
   43a24:	b	42e80 <__assert_fail@plt+0x31c74>
   43a28:	cmp	r5, #72	; 0x48
   43a2c:	beq	430d8 <__assert_fail@plt+0x31ecc>
   43a30:	bhi	43a50 <__assert_fail@plt+0x32844>
   43a34:	cmp	r5, #64	; 0x40
   43a38:	moveq	r3, #1
   43a3c:	streq	r3, [r8, #1492]	; 0x5d4
   43a40:	beq	430d8 <__assert_fail@plt+0x31ecc>
   43a44:	cmp	r5, #70	; 0x46
   43a48:	bne	43198 <__assert_fail@plt+0x31f8c>
   43a4c:	b	430d8 <__assert_fail@plt+0x31ecc>
   43a50:	cmp	r5, #74	; 0x4a
   43a54:	beq	430d8 <__assert_fail@plt+0x31ecc>
   43a58:	cmp	r5, #77	; 0x4d
   43a5c:	bne	43198 <__assert_fail@plt+0x31f8c>
   43a60:	b	430d8 <__assert_fail@plt+0x31ecc>
   43a64:	cmp	r5, #42	; 0x2a
   43a68:	bne	43198 <__assert_fail@plt+0x31f8c>
   43a6c:	b	430d8 <__assert_fail@plt+0x31ecc>
   43a70:	cmp	r5, #126	; 0x7e
   43a74:	bne	43198 <__assert_fail@plt+0x31f8c>
   43a78:	b	430d8 <__assert_fail@plt+0x31ecc>
   43a7c:	cmp	r5, #134	; 0x86
   43a80:	bne	43198 <__assert_fail@plt+0x31f8c>
   43a84:	b	430d8 <__assert_fail@plt+0x31ecc>
   43a88:	ldr	r3, [sp, #300]	; 0x12c
   43a8c:	add	r1, sp, #156	; 0x9c
   43a90:	mov	r0, sl
   43a94:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   43a98:	ldr	r6, [sp, #156]	; 0x9c
   43a9c:	add	r6, sl, r6
   43aa0:	strd	r0, [sp, #160]	; 0xa0
   43aa4:	ldr	r3, [sp, #336]	; 0x150
   43aa8:	cmp	r3, #0
   43aac:	bne	42c90 <__assert_fail@plt+0x31a84>
   43ab0:	ldr	r3, [sp, #340]	; 0x154
   43ab4:	mov	r1, #46	; 0x2e
   43ab8:	ldr	r0, [r3, #8]
   43abc:	bl	11128 <strrchr@plt>
   43ac0:	cmp	r0, #0
   43ac4:	beq	44e74 <__assert_fail@plt+0x33c68>
   43ac8:	ldr	r1, [pc, #-584]	; 43888 <__assert_fail@plt+0x3267c>
   43acc:	bl	10f18 <strcmp@plt>
   43ad0:	clz	r8, r0
   43ad4:	lsr	r8, r8, #5
   43ad8:	ldr	r1, [pc, #-596]	; 4388c <__assert_fail@plt+0x32680>
   43adc:	mov	r2, #5
   43ae0:	mov	r0, #0
   43ae4:	mov	r7, r0
   43ae8:	bl	10f90 <dcgettext@plt>
   43aec:	ldrd	r2, [sp, #160]	; 0xa0
   43af0:	str	r7, [sp]
   43af4:	str	r0, [sp, #88]	; 0x58
   43af8:	ldr	r0, [pc, #-388]	; 4397c <__assert_fail@plt+0x32770>
   43afc:	bl	3c744 <__assert_fail@plt+0x2b538>
   43b00:	ldr	r3, [sp, #68]	; 0x44
   43b04:	ldr	r2, [sp, #344]	; 0x158
   43b08:	str	r3, [sp, #4]
   43b0c:	str	r8, [sp, #8]
   43b10:	str	fp, [sp]
   43b14:	mov	r9, r0
   43b18:	ldrd	r0, [sp, #160]	; 0xa0
   43b1c:	bl	3c814 <__assert_fail@plt+0x2b608>
   43b20:	mov	r2, r9
   43b24:	ldr	r1, [sp, #60]	; 0x3c
   43b28:	mov	r3, r0
   43b2c:	ldr	r0, [sp, #88]	; 0x58
   43b30:	bl	10f24 <printf@plt>
   43b34:	b	428a0 <__assert_fail@plt+0x31694>
   43b38:	ldr	r3, [sp, #336]	; 0x150
   43b3c:	cmp	r3, #0
   43b40:	bne	42c90 <__assert_fail@plt+0x31a84>
   43b44:	ldr	r1, [pc, #-700]	; 43890 <__assert_fail@plt+0x32684>
   43b48:	mov	r2, #5
   43b4c:	mov	r0, r3
   43b50:	bl	10f90 <dcgettext@plt>
   43b54:	ldr	r3, [sp, #336]	; 0x150
   43b58:	str	r3, [sp]
   43b5c:	ldrd	r2, [sp, #160]	; 0xa0
   43b60:	mov	r7, r0
   43b64:	ldr	r0, [pc, #-496]	; 4397c <__assert_fail@plt+0x32770>
   43b68:	bl	3c744 <__assert_fail@plt+0x2b538>
   43b6c:	mov	r8, r0
   43b70:	ldrd	r0, [sp, #160]	; 0xa0
   43b74:	bl	3ddec <__assert_fail@plt+0x2cbe0>
   43b78:	mov	r3, r0
   43b7c:	mov	r2, r8
   43b80:	mov	r0, r7
   43b84:	ldr	r1, [sp, #60]	; 0x3c
   43b88:	bl	10f24 <printf@plt>
   43b8c:	ldr	r7, [sp, #336]	; 0x150
   43b90:	b	428a0 <__assert_fail@plt+0x31694>
   43b94:	ldr	r3, [sp, #336]	; 0x150
   43b98:	cmp	r3, #0
   43b9c:	bne	42c90 <__assert_fail@plt+0x31a84>
   43ba0:	str	r3, [sp]
   43ba4:	ldr	r0, [pc, #-560]	; 4397c <__assert_fail@plt+0x32770>
   43ba8:	ldrd	r2, [sp, #160]	; 0xa0
   43bac:	bl	3c744 <__assert_fail@plt+0x2b538>
   43bb0:	ldr	r1, [sp, #60]	; 0x3c
   43bb4:	mov	r2, r0
   43bb8:	ldr	r0, [pc, #-812]	; 43894 <__assert_fail@plt+0x32688>
   43bbc:	bl	10f24 <printf@plt>
   43bc0:	ldr	r7, [sp, #336]	; 0x150
   43bc4:	b	428a0 <__assert_fail@plt+0x31694>
   43bc8:	mov	r0, #9
   43bcc:	bl	110c8 <putchar@plt>
   43bd0:	ldrd	r2, [sp, #160]	; 0xa0
   43bd4:	cmp	r3, #0
   43bd8:	cmpeq	r2, #134	; 0x86
   43bdc:	bhi	441ec <__assert_fail@plt+0x32fe0>
   43be0:	cmp	r2, #134	; 0x86
   43be4:	ldrls	pc, [pc, r2, lsl #2]
   43be8:	b	441ec <__assert_fail@plt+0x32fe0>
   43bec:	andeq	r4, r4, r0, ror #3
   43bf0:	ldrdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   43bf4:	andeq	r4, r4, r8, asr #3
   43bf8:			; <UNDEFINED> instruction: 0x000441bc
   43bfc:			; <UNDEFINED> instruction: 0x000441b0
   43c00:	andeq	r4, r4, r4, lsr #3
   43c04:	muleq	r4, r8, r1
   43c08:	andeq	r4, r4, ip, lsl #3
   43c0c:	andeq	r4, r4, r0, lsl #3
   43c10:	andeq	r4, r4, r4, ror r1
   43c14:	andeq	r4, r4, r8, ror #2
   43c18:	andeq	r4, r4, ip, asr r1
   43c1c:	andeq	r4, r4, r0, asr r1
   43c20:	andeq	r4, r4, r4, asr #2
   43c24:	andeq	r4, r4, r8, lsr r1
   43c28:	andeq	r4, r4, ip, lsr #2
   43c2c:	andeq	r4, r4, r0, lsr #2
   43c30:	andeq	r4, r4, r4, lsl r1
   43c34:	andeq	r4, r4, r8, lsl #2
   43c38:	andeq	r4, r4, ip, ror #3
   43c3c:	andeq	r4, r4, ip, ror #3
   43c40:	andeq	r4, r4, ip, ror #3
   43c44:	andeq	r4, r4, ip, ror #3
   43c48:	andeq	r4, r4, ip, ror #3
   43c4c:	andeq	r4, r4, ip, ror #3
   43c50:	andeq	r4, r4, ip, ror #3
   43c54:	andeq	r4, r4, ip, ror #3
   43c58:	andeq	r4, r4, ip, ror #3
   43c5c:	andeq	r4, r4, ip, ror #3
   43c60:	andeq	r4, r4, ip, ror #3
   43c64:	andeq	r4, r4, ip, ror #3
   43c68:	andeq	r4, r4, ip, ror #3
   43c6c:	andeq	r4, r4, ip, ror #3
   43c70:	andeq	r4, r4, ip, ror #3
   43c74:	andeq	r4, r4, ip, ror #3
   43c78:	andeq	r4, r4, ip, ror #3
   43c7c:	andeq	r4, r4, ip, ror #3
   43c80:	andeq	r4, r4, ip, ror #3
   43c84:	andeq	r4, r4, ip, ror #3
   43c88:	andeq	r4, r4, ip, ror #3
   43c8c:	andeq	r4, r4, ip, ror #3
   43c90:	andeq	r4, r4, ip, ror #3
   43c94:	andeq	r4, r4, ip, ror #3
   43c98:	andeq	r4, r4, ip, ror #3
   43c9c:	andeq	r4, r4, ip, ror #3
   43ca0:	andeq	r4, r4, ip, ror #3
   43ca4:	andeq	r4, r4, ip, ror #3
   43ca8:	andeq	r4, r4, ip, ror #3
   43cac:	andeq	r4, r4, ip, ror #3
   43cb0:	andeq	r4, r4, ip, ror #3
   43cb4:	andeq	r4, r4, ip, ror #3
   43cb8:	andeq	r4, r4, ip, ror #3
   43cbc:	andeq	r4, r4, ip, ror #3
   43cc0:	andeq	r4, r4, ip, ror #3
   43cc4:	andeq	r4, r4, ip, ror #3
   43cc8:	andeq	r4, r4, ip, ror #3
   43ccc:	andeq	r4, r4, ip, ror #3
   43cd0:	andeq	r4, r4, ip, ror #3
   43cd4:	andeq	r4, r4, ip, ror #3
   43cd8:	andeq	r4, r4, ip, ror #3
   43cdc:	andeq	r4, r4, ip, ror #3
   43ce0:	andeq	r4, r4, ip, ror #3
   43ce4:	andeq	r4, r4, ip, ror #3
   43ce8:	andeq	r4, r4, ip, ror #3
   43cec:	andeq	r4, r4, ip, ror #3
   43cf0:	andeq	r4, r4, ip, ror #3
   43cf4:	andeq	r4, r4, ip, ror #3
   43cf8:	andeq	r4, r4, ip, ror #3
   43cfc:	andeq	r4, r4, ip, ror #3
   43d00:	andeq	r4, r4, ip, ror #3
   43d04:	andeq	r4, r4, ip, ror #3
   43d08:	andeq	r4, r4, ip, ror #3
   43d0c:	andeq	r4, r4, ip, ror #3
   43d10:	andeq	r4, r4, ip, ror #3
   43d14:	andeq	r4, r4, ip, ror #3
   43d18:	andeq	r4, r4, ip, ror #3
   43d1c:	andeq	r4, r4, ip, ror #3
   43d20:	andeq	r4, r4, ip, ror #3
   43d24:	andeq	r4, r4, ip, ror #3
   43d28:	andeq	r4, r4, ip, ror #3
   43d2c:	andeq	r4, r4, ip, ror #3
   43d30:	andeq	r4, r4, ip, ror #3
   43d34:	andeq	r4, r4, ip, ror #3
   43d38:	andeq	r4, r4, ip, ror #3
   43d3c:	andeq	r4, r4, ip, ror #3
   43d40:	andeq	r4, r4, ip, ror #3
   43d44:	andeq	r4, r4, ip, ror #3
   43d48:	andeq	r4, r4, ip, ror #3
   43d4c:	andeq	r4, r4, ip, ror #3
   43d50:	andeq	r4, r4, ip, ror #3
   43d54:	andeq	r4, r4, ip, ror #3
   43d58:	andeq	r4, r4, ip, ror #3
   43d5c:	andeq	r4, r4, ip, ror #3
   43d60:	andeq	r4, r4, ip, ror #3
   43d64:	andeq	r4, r4, ip, ror #3
   43d68:	andeq	r4, r4, ip, ror #3
   43d6c:	andeq	r4, r4, ip, ror #3
   43d70:	andeq	r4, r4, ip, ror #3
   43d74:	andeq	r4, r4, ip, ror #3
   43d78:	andeq	r4, r4, ip, ror #3
   43d7c:	andeq	r4, r4, ip, ror #3
   43d80:	andeq	r4, r4, ip, ror #3
   43d84:	andeq	r4, r4, ip, ror #3
   43d88:	andeq	r4, r4, ip, ror #3
   43d8c:	andeq	r4, r4, ip, ror #3
   43d90:	andeq	r4, r4, ip, ror #3
   43d94:	andeq	r4, r4, ip, ror #3
   43d98:	andeq	r4, r4, ip, ror #3
   43d9c:	andeq	r4, r4, ip, ror #3
   43da0:	andeq	r4, r4, ip, ror #3
   43da4:	andeq	r4, r4, ip, ror #3
   43da8:	andeq	r4, r4, ip, ror #3
   43dac:	andeq	r4, r4, ip, ror #3
   43db0:	andeq	r4, r4, ip, ror #3
   43db4:	andeq	r4, r4, ip, ror #3
   43db8:	andeq	r4, r4, ip, ror #3
   43dbc:	andeq	r4, r4, ip, ror #3
   43dc0:	andeq	r4, r4, ip, ror #3
   43dc4:	andeq	r4, r4, ip, ror #3
   43dc8:	andeq	r4, r4, ip, ror #3
   43dcc:	andeq	r4, r4, ip, ror #3
   43dd0:	andeq	r4, r4, ip, ror #3
   43dd4:	andeq	r4, r4, ip, ror #3
   43dd8:	andeq	r4, r4, ip, ror #3
   43ddc:	andeq	r4, r4, ip, ror #3
   43de0:	andeq	r4, r4, ip, ror #3
   43de4:	andeq	r4, r4, ip, ror #3
   43de8:	andeq	r4, r4, ip, ror #3
   43dec:	strdeq	r4, [r4], -ip
   43df0:	strdeq	r4, [r4], -r0
   43df4:	andeq	r4, r4, r4, ror #1
   43df8:	ldrdeq	r4, [r4], -r8
   43dfc:	andeq	r4, r4, ip, asr #1
   43e00:	andeq	r4, r4, r0, asr #1
   43e04:	strheq	r4, [r4], -r4	; <UNPREDICTABLE>
   43e08:	mov	r0, #9
   43e0c:	bl	110c8 <putchar@plt>
   43e10:	ldr	r3, [sp, #160]	; 0xa0
   43e14:	ldr	r2, [sp, #164]	; 0xa4
   43e18:	subs	r3, r3, #1
   43e1c:	str	r3, [sp, #80]	; 0x50
   43e20:	sbc	r3, r2, #0
   43e24:	str	r3, [sp, #84]	; 0x54
   43e28:	ldrd	r2, [sp, #80]	; 0x50
   43e2c:	cmp	r3, #0
   43e30:	cmpeq	r2, #4
   43e34:	bhi	44f04 <__assert_fail@plt+0x33cf8>
   43e38:	cmp	r2, #4
   43e3c:	ldrls	pc, [pc, r2, lsl #2]
   43e40:	b	44f04 <__assert_fail@plt+0x33cf8>
   43e44:	muleq	r4, ip, r0
   43e48:	andeq	r4, r4, r4, lsl #1
   43e4c:	andeq	r4, r4, ip, rrx
   43e50:	andeq	r4, r4, r4, asr r0
   43e54:	andeq	r4, r4, ip, lsr r0
   43e58:	ldr	r3, [sp, #300]	; 0x12c
   43e5c:	add	r6, sl, #2
   43e60:	cmp	r6, r3
   43e64:	bcs	44224 <__assert_fail@plt+0x33018>
   43e68:	mov	r1, #2
   43e6c:	b	42ccc <__assert_fail@plt+0x31ac0>
   43e70:	ldr	r3, [sp, #300]	; 0x12c
   43e74:	mov	r2, #0
   43e78:	add	r1, sp, #156	; 0x9c
   43e7c:	mov	r0, sl
   43e80:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   43e84:	ldr	r6, [sp, #156]	; 0x9c
   43e88:	add	r6, sl, r6
   43e8c:	strd	r0, [sp, #160]	; 0xa0
   43e90:	b	42c4c <__assert_fail@plt+0x31a40>
   43e94:	mov	r2, #1
   43e98:	mov	r3, #0
   43e9c:	mov	r6, sl
   43ea0:	strd	r2, [sp, #160]	; 0xa0
   43ea4:	b	42b5c <__assert_fail@plt+0x31950>
   43ea8:	sub	r3, r4, #6
   43eac:	cmp	r3, #1
   43eb0:	bhi	43454 <__assert_fail@plt+0x32248>
   43eb4:	b	4345c <__assert_fail@plt+0x32250>
   43eb8:	ldr	r3, [pc, #-1384]	; 43958 <__assert_fail@plt+0x3274c>
   43ebc:	mov	r0, r6
   43ec0:	mov	r1, #1
   43ec4:	b	42e34 <__assert_fail@plt+0x31c28>
   43ec8:	ldr	r3, [sp, #300]	; 0x12c
   43ecc:	cmp	r3, r7
   43ed0:	bcs	44d6c <__assert_fail@plt+0x33b60>
   43ed4:	mov	r0, #0
   43ed8:	cmp	r4, #20
   43edc:	str	r0, [sp, #184]	; 0xb8
   43ee0:	str	r0, [sp, #160]	; 0xa0
   43ee4:	str	r0, [sp, #188]	; 0xbc
   43ee8:	str	r0, [sp, #164]	; 0xa4
   43eec:	beq	44f24 <__assert_fail@plt+0x33d18>
   43ef0:	mov	r2, r0
   43ef4:	mov	r3, r0
   43ef8:	mov	lr, r0
   43efc:	str	r0, [sp, #88]	; 0x58
   43f00:	add	ip, sp, #192	; 0xc0
   43f04:	mov	r0, lr
   43f08:	ldr	r1, [sp, #88]	; 0x58
   43f0c:	str	ip, [sp]
   43f10:	bl	3e35c <__assert_fail@plt+0x2d150>
   43f14:	ldr	r1, [sp, #60]	; 0x3c
   43f18:	mov	r2, r0
   43f1c:	ldr	r0, [pc, #-1676]	; 43898 <__assert_fail@plt+0x3268c>
   43f20:	bl	10f24 <printf@plt>
   43f24:	ldr	r2, [pc, #-1680]	; 4389c <__assert_fail@plt+0x32690>
   43f28:	ldr	r3, [pc, #-1680]	; 438a0 <__assert_fail@plt+0x32694>
   43f2c:	ldr	r2, [r2]
   43f30:	ldr	r3, [r3]
   43f34:	orrs	r3, r2, r3
   43f38:	bne	42ea8 <__assert_fail@plt+0x31c9c>
   43f3c:	b	42ee8 <__assert_fail@plt+0x31cdc>
   43f40:	str	r3, [sp]
   43f44:	mov	r2, r8
   43f48:	mov	r3, r9
   43f4c:	b	42b70 <__assert_fail@plt+0x31964>
   43f50:	mov	r2, #5
   43f54:	ldr	r1, [pc, #-1720]	; 438a4 <__assert_fail@plt+0x32698>
   43f58:	mov	r0, r8
   43f5c:	bl	10f90 <dcgettext@plt>
   43f60:	bl	10f24 <printf@plt>
   43f64:	b	42e80 <__assert_fail@plt+0x31c74>
   43f68:	ldr	r0, [pc, #-1736]	; 438a8 <__assert_fail@plt+0x3269c>
   43f6c:	bl	10f24 <printf@plt>
   43f70:	b	42e80 <__assert_fail@plt+0x31c74>
   43f74:	ldr	r0, [pc, #-1744]	; 438ac <__assert_fail@plt+0x326a0>
   43f78:	bl	10f24 <printf@plt>
   43f7c:	b	42e80 <__assert_fail@plt+0x31c74>
   43f80:	ldr	r0, [pc, #-1752]	; 438b0 <__assert_fail@plt+0x326a4>
   43f84:	bl	10f24 <printf@plt>
   43f88:	b	42e80 <__assert_fail@plt+0x31c74>
   43f8c:	ldr	r0, [pc, #-1760]	; 438b4 <__assert_fail@plt+0x326a8>
   43f90:	bl	10f24 <printf@plt>
   43f94:	b	42e80 <__assert_fail@plt+0x31c74>
   43f98:	ldr	r0, [pc, #-1768]	; 438b8 <__assert_fail@plt+0x326ac>
   43f9c:	bl	10f24 <printf@plt>
   43fa0:	b	42e80 <__assert_fail@plt+0x31c74>
   43fa4:	ldr	r1, [pc, #-1776]	; 438bc <__assert_fail@plt+0x326b0>
   43fa8:	mov	r2, #5
   43fac:	mov	r0, #0
   43fb0:	bl	10f90 <dcgettext@plt>
   43fb4:	mov	r3, #0
   43fb8:	str	r3, [sp]
   43fbc:	ldrd	r2, [sp, #160]	; 0xa0
   43fc0:	mov	r4, r0
   43fc4:	ldr	r0, [pc, #-1616]	; 4397c <__assert_fail@plt+0x32770>
   43fc8:	bl	3c744 <__assert_fail@plt+0x2b538>
   43fcc:	mov	r1, r0
   43fd0:	mov	r0, r4
   43fd4:	bl	10f24 <printf@plt>
   43fd8:	b	42e80 <__assert_fail@plt+0x31c74>
   43fdc:	mov	r2, #5
   43fe0:	ldr	r1, [pc, #-1832]	; 438c0 <__assert_fail@plt+0x326b4>
   43fe4:	mov	r0, #0
   43fe8:	bl	10f90 <dcgettext@plt>
   43fec:	bl	10f24 <printf@plt>
   43ff0:	b	42e80 <__assert_fail@plt+0x31c74>
   43ff4:	mov	r2, #5
   43ff8:	ldr	r1, [pc, #-1852]	; 438c4 <__assert_fail@plt+0x326b8>
   43ffc:	mov	r0, #0
   44000:	bl	10f90 <dcgettext@plt>
   44004:	bl	10f24 <printf@plt>
   44008:	b	42e80 <__assert_fail@plt+0x31c74>
   4400c:	mov	r2, #5
   44010:	ldr	r1, [pc, #-1872]	; 438c8 <__assert_fail@plt+0x326bc>
   44014:	mov	r0, #0
   44018:	bl	10f90 <dcgettext@plt>
   4401c:	bl	10f24 <printf@plt>
   44020:	b	42e80 <__assert_fail@plt+0x31c74>
   44024:	mov	r2, #5
   44028:	ldr	r1, [pc, #-1892]	; 438cc <__assert_fail@plt+0x326c0>
   4402c:	mov	r0, #0
   44030:	bl	10f90 <dcgettext@plt>
   44034:	bl	10f24 <printf@plt>
   44038:	b	42e80 <__assert_fail@plt+0x31c74>
   4403c:	mov	r2, #5
   44040:	ldr	r1, [pc, #-1912]	; 438d0 <__assert_fail@plt+0x326c4>
   44044:	mov	r0, #0
   44048:	bl	10f90 <dcgettext@plt>
   4404c:	bl	10f24 <printf@plt>
   44050:	b	42e80 <__assert_fail@plt+0x31c74>
   44054:	mov	r2, #5
   44058:	ldr	r1, [pc, #-1932]	; 438d4 <__assert_fail@plt+0x326c8>
   4405c:	mov	r0, #0
   44060:	bl	10f90 <dcgettext@plt>
   44064:	bl	10f24 <printf@plt>
   44068:	b	42e80 <__assert_fail@plt+0x31c74>
   4406c:	mov	r2, #5
   44070:	ldr	r1, [pc, #-1952]	; 438d8 <__assert_fail@plt+0x326cc>
   44074:	mov	r0, #0
   44078:	bl	10f90 <dcgettext@plt>
   4407c:	bl	10f24 <printf@plt>
   44080:	b	42e80 <__assert_fail@plt+0x31c74>
   44084:	mov	r2, #5
   44088:	ldr	r1, [pc, #-1972]	; 438dc <__assert_fail@plt+0x326d0>
   4408c:	mov	r0, #0
   44090:	bl	10f90 <dcgettext@plt>
   44094:	bl	10f24 <printf@plt>
   44098:	b	42e80 <__assert_fail@plt+0x31c74>
   4409c:	mov	r2, #5
   440a0:	ldr	r1, [pc, #-1920]	; 43928 <__assert_fail@plt+0x3271c>
   440a4:	mov	r0, #0
   440a8:	bl	10f90 <dcgettext@plt>
   440ac:	bl	10f24 <printf@plt>
   440b0:	b	42e80 <__assert_fail@plt+0x31c74>
   440b4:	ldr	r0, [pc, #-2012]	; 438e0 <__assert_fail@plt+0x326d4>
   440b8:	bl	10f24 <printf@plt>
   440bc:	b	42e80 <__assert_fail@plt+0x31c74>
   440c0:	ldr	r0, [pc, #-2020]	; 438e4 <__assert_fail@plt+0x326d8>
   440c4:	bl	10f24 <printf@plt>
   440c8:	b	42e80 <__assert_fail@plt+0x31c74>
   440cc:	ldr	r0, [pc, #-2028]	; 438e8 <__assert_fail@plt+0x326dc>
   440d0:	bl	10f24 <printf@plt>
   440d4:	b	42e80 <__assert_fail@plt+0x31c74>
   440d8:	ldr	r0, [pc, #-2036]	; 438ec <__assert_fail@plt+0x326e0>
   440dc:	bl	10f24 <printf@plt>
   440e0:	b	42e80 <__assert_fail@plt+0x31c74>
   440e4:	ldr	r0, [pc, #-2044]	; 438f0 <__assert_fail@plt+0x326e4>
   440e8:	bl	10f24 <printf@plt>
   440ec:	b	42e80 <__assert_fail@plt+0x31c74>
   440f0:	ldr	r0, [pc, #-2052]	; 438f4 <__assert_fail@plt+0x326e8>
   440f4:	bl	10f24 <printf@plt>
   440f8:	b	42e80 <__assert_fail@plt+0x31c74>
   440fc:	ldr	r0, [pc, #-2060]	; 438f8 <__assert_fail@plt+0x326ec>
   44100:	bl	10f24 <printf@plt>
   44104:	b	42e80 <__assert_fail@plt+0x31c74>
   44108:	ldr	r0, [pc, #-2068]	; 438fc <__assert_fail@plt+0x326f0>
   4410c:	bl	10f24 <printf@plt>
   44110:	b	42e80 <__assert_fail@plt+0x31c74>
   44114:	ldr	r0, [pc, #-2076]	; 43900 <__assert_fail@plt+0x326f4>
   44118:	bl	10f24 <printf@plt>
   4411c:	b	42e80 <__assert_fail@plt+0x31c74>
   44120:	ldr	r0, [pc, #-2084]	; 43904 <__assert_fail@plt+0x326f8>
   44124:	bl	10f24 <printf@plt>
   44128:	b	42e80 <__assert_fail@plt+0x31c74>
   4412c:	ldr	r0, [pc, #-2092]	; 43908 <__assert_fail@plt+0x326fc>
   44130:	bl	10f24 <printf@plt>
   44134:	b	42e80 <__assert_fail@plt+0x31c74>
   44138:	ldr	r0, [pc, #-2100]	; 4390c <__assert_fail@plt+0x32700>
   4413c:	bl	10f24 <printf@plt>
   44140:	b	42e80 <__assert_fail@plt+0x31c74>
   44144:	ldr	r0, [pc, #-2108]	; 43910 <__assert_fail@plt+0x32704>
   44148:	bl	10f24 <printf@plt>
   4414c:	b	42e80 <__assert_fail@plt+0x31c74>
   44150:	ldr	r0, [pc, #-2116]	; 43914 <__assert_fail@plt+0x32708>
   44154:	bl	10f24 <printf@plt>
   44158:	b	42e80 <__assert_fail@plt+0x31c74>
   4415c:	ldr	r0, [pc, #-2124]	; 43918 <__assert_fail@plt+0x3270c>
   44160:	bl	10f24 <printf@plt>
   44164:	b	42e80 <__assert_fail@plt+0x31c74>
   44168:	ldr	r0, [pc, #-2132]	; 4391c <__assert_fail@plt+0x32710>
   4416c:	bl	10f24 <printf@plt>
   44170:	b	42e80 <__assert_fail@plt+0x31c74>
   44174:	ldr	r0, [pc, #-2140]	; 43920 <__assert_fail@plt+0x32714>
   44178:	bl	10f24 <printf@plt>
   4417c:	b	42e80 <__assert_fail@plt+0x31c74>
   44180:	ldr	r0, [pc, #-2148]	; 43924 <__assert_fail@plt+0x32718>
   44184:	bl	10f24 <printf@plt>
   44188:	b	42e80 <__assert_fail@plt+0x31c74>
   4418c:	ldr	r0, [pc, #-2156]	; 43928 <__assert_fail@plt+0x3271c>
   44190:	bl	10f24 <printf@plt>
   44194:	b	42e80 <__assert_fail@plt+0x31c74>
   44198:	ldr	r0, [pc, #-2164]	; 4392c <__assert_fail@plt+0x32720>
   4419c:	bl	10f24 <printf@plt>
   441a0:	b	42e80 <__assert_fail@plt+0x31c74>
   441a4:	ldr	r0, [pc, #-2172]	; 43930 <__assert_fail@plt+0x32724>
   441a8:	bl	10f24 <printf@plt>
   441ac:	b	42e80 <__assert_fail@plt+0x31c74>
   441b0:	ldr	r0, [pc, #-2180]	; 43934 <__assert_fail@plt+0x32728>
   441b4:	bl	10f24 <printf@plt>
   441b8:	b	42e80 <__assert_fail@plt+0x31c74>
   441bc:	ldr	r0, [pc, #-2188]	; 43938 <__assert_fail@plt+0x3272c>
   441c0:	bl	10f24 <printf@plt>
   441c4:	b	42e80 <__assert_fail@plt+0x31c74>
   441c8:	ldr	r0, [pc, #-2196]	; 4393c <__assert_fail@plt+0x32730>
   441cc:	bl	10f24 <printf@plt>
   441d0:	b	42e80 <__assert_fail@plt+0x31c74>
   441d4:	ldr	r0, [pc, #-2204]	; 43940 <__assert_fail@plt+0x32734>
   441d8:	bl	10f24 <printf@plt>
   441dc:	b	42e80 <__assert_fail@plt+0x31c74>
   441e0:	ldr	r0, [pc, #-2212]	; 43944 <__assert_fail@plt+0x32738>
   441e4:	bl	10f24 <printf@plt>
   441e8:	b	42e80 <__assert_fail@plt+0x31c74>
   441ec:	subs	r1, r2, #128	; 0x80
   441f0:	sbc	r3, r3, #0
   441f4:	str	r1, [sp, #144]	; 0x90
   441f8:	str	r3, [sp, #148]	; 0x94
   441fc:	ldrd	r2, [sp, #144]	; 0x90
   44200:	mov	r0, #0
   44204:	cmp	r3, #0
   44208:	cmpeq	r2, #127	; 0x7f
   4420c:	mov	r2, #5
   44210:	ldrls	r1, [pc, #-2256]	; 43948 <__assert_fail@plt+0x3273c>
   44214:	ldrhi	r1, [pc, #-2256]	; 4394c <__assert_fail@plt+0x32740>
   44218:	bl	10f90 <dcgettext@plt>
   4421c:	bl	10f24 <printf@plt>
   44220:	b	42e80 <__assert_fail@plt+0x31c74>
   44224:	cmp	sl, r3
   44228:	bcs	42c4c <__assert_fail@plt+0x31a40>
   4422c:	sub	r1, r3, sl
   44230:	sub	r3, r1, #1
   44234:	cmp	r3, #7
   44238:	bhi	42c4c <__assert_fail@plt+0x31a40>
   4423c:	b	42ccc <__assert_fail@plt+0x31ac0>
   44240:	ldr	r3, [sp, #336]	; 0x150
   44244:	add	r7, r6, #16
   44248:	cmp	r3, #0
   4424c:	bne	44374 <__assert_fail@plt+0x33168>
   44250:	ldr	r3, [sp, #300]	; 0x12c
   44254:	add	r8, r6, #8
   44258:	cmp	r8, r3
   4425c:	bls	44e00 <__assert_fail@plt+0x33bf4>
   44260:	mov	r2, #0
   44264:	mov	r3, #0
   44268:	strd	r2, [sp, #168]	; 0xa8
   4426c:	strd	r2, [sp, #176]	; 0xb0
   44270:	ldr	r3, [sp, #300]	; 0x12c
   44274:	cmp	r3, r7
   44278:	bcs	44de0 <__assert_fail@plt+0x33bd4>
   4427c:	mov	r2, #0
   44280:	mov	r0, r2
   44284:	mov	r1, r2
   44288:	mov	r6, r2
   4428c:	mov	r8, r2
   44290:	str	r2, [sp, #184]	; 0xb8
   44294:	str	r2, [sp, #192]	; 0xc0
   44298:	str	r2, [sp, #188]	; 0xbc
   4429c:	str	r2, [sp, #196]	; 0xc4
   442a0:	ldr	r3, [pc, #-2384]	; 43958 <__assert_fail@plt+0x3274c>
   442a4:	ldr	ip, [pc, #-2396]	; 43950 <__assert_fail@plt+0x32744>
   442a8:	ldr	r2, [sp, #168]	; 0xa8
   442ac:	ldr	lr, [r3]
   442b0:	ldr	r3, [sp, #172]	; 0xac
   442b4:	cmp	lr, ip
   442b8:	ldr	lr, [sp, #176]	; 0xb0
   442bc:	ldr	ip, [sp, #180]	; 0xb4
   442c0:	beq	44e7c <__assert_fail@plt+0x33c70>
   442c4:	strd	r0, [sp, #16]
   442c8:	str	r6, [sp, #8]
   442cc:	str	r8, [sp, #12]
   442d0:	str	lr, [sp]
   442d4:	str	ip, [sp, #4]
   442d8:	ldr	r0, [pc, #-2444]	; 43954 <__assert_fail@plt+0x32748>
   442dc:	mov	r6, r7
   442e0:	bl	10f24 <printf@plt>
   442e4:	mov	r7, #0
   442e8:	b	428a0 <__assert_fail@plt+0x31694>
   442ec:	ldr	r3, [sp, #300]	; 0x12c
   442f0:	add	r7, r6, #4
   442f4:	cmp	r7, r3
   442f8:	bcs	42da8 <__assert_fail@plt+0x31b9c>
   442fc:	ldr	r3, [pc, #-2476]	; 43958 <__assert_fail@plt+0x3274c>
   44300:	mov	r0, r6
   44304:	mov	r1, r4
   44308:	b	42e34 <__assert_fail@plt+0x31c28>
   4430c:	ldr	r3, [sp, #336]	; 0x150
   44310:	add	r7, r6, #8
   44314:	cmp	r3, #0
   44318:	bne	44374 <__assert_fail@plt+0x33168>
   4431c:	ldr	r3, [sp, #300]	; 0x12c
   44320:	cmp	r7, r3
   44324:	bls	44e14 <__assert_fail@plt+0x33c08>
   44328:	mov	lr, #0
   4432c:	mov	r2, lr
   44330:	mov	r3, lr
   44334:	mov	r0, lr
   44338:	mov	r1, lr
   4433c:	str	lr, [sp, #184]	; 0xb8
   44340:	str	lr, [sp, #160]	; 0xa0
   44344:	str	lr, [sp, #188]	; 0xbc
   44348:	str	lr, [sp, #164]	; 0xa4
   4434c:	add	ip, sp, #192	; 0xc0
   44350:	str	ip, [sp]
   44354:	bl	3e35c <__assert_fail@plt+0x2d150>
   44358:	ldr	r1, [sp, #60]	; 0x3c
   4435c:	mov	r6, r7
   44360:	mov	r7, #0
   44364:	mov	r2, r0
   44368:	ldr	r0, [pc, #-2580]	; 4395c <__assert_fail@plt+0x32750>
   4436c:	bl	10f24 <printf@plt>
   44370:	b	428a0 <__assert_fail@plt+0x31694>
   44374:	mov	r6, r7
   44378:	mov	r7, #0
   4437c:	b	42c94 <__assert_fail@plt+0x31a88>
   44380:	ldr	r3, [sp, #336]	; 0x150
   44384:	cmp	r3, #0
   44388:	ldr	r3, [sp, #300]	; 0x12c
   4438c:	sub	r7, r3, r6
   44390:	beq	44ab0 <__assert_fail@plt+0x338a4>
   44394:	mov	r0, r6
   44398:	mov	r1, r7
   4439c:	bl	11104 <strnlen@plt>
   443a0:	add	r0, r0, #1
   443a4:	add	r6, r6, r0
   443a8:	b	430b8 <__assert_fail@plt+0x31eac>
   443ac:	mov	r2, #0
   443b0:	mov	r3, #0
   443b4:	strd	r2, [sp, #160]	; 0xa0
   443b8:	b	42c04 <__assert_fail@plt+0x319f8>
   443bc:	mov	r0, #9
   443c0:	bl	110c8 <putchar@plt>
   443c4:	ldrd	r2, [sp, #160]	; 0xa0
   443c8:	cmp	r3, #0
   443cc:	cmpeq	r2, #19
   443d0:	beq	451a0 <__assert_fail@plt+0x33f94>
   443d4:	bhi	447a0 <__assert_fail@plt+0x33594>
   443d8:	cmp	r3, #0
   443dc:	cmpeq	r2, #9
   443e0:	beq	451d0 <__assert_fail@plt+0x33fc4>
   443e4:	bls	4475c <__assert_fail@plt+0x33550>
   443e8:	cmp	r3, #0
   443ec:	cmpeq	r2, #14
   443f0:	beq	450d4 <__assert_fail@plt+0x33ec8>
   443f4:	bhi	44558 <__assert_fail@plt+0x3334c>
   443f8:	cmp	r3, #0
   443fc:	cmpeq	r2, #11
   44400:	beq	450a4 <__assert_fail@plt+0x33e98>
   44404:	bcc	45098 <__assert_fail@plt+0x33e8c>
   44408:	cmp	r3, #0
   4440c:	cmpeq	r2, #12
   44410:	beq	4514c <__assert_fail@plt+0x33f40>
   44414:	cmp	r3, #0
   44418:	cmpeq	r2, #13
   4441c:	bne	450ec <__assert_fail@plt+0x33ee0>
   44420:	ldr	r0, [pc, #-2760]	; 43960 <__assert_fail@plt+0x32754>
   44424:	bl	10f24 <printf@plt>
   44428:	b	42e80 <__assert_fail@plt+0x31c74>
   4442c:	mov	r0, #9
   44430:	bl	110c8 <putchar@plt>
   44434:	ldrd	r2, [sp, #160]	; 0xa0
   44438:	cmp	r3, #0
   4443c:	cmpeq	r2, #3
   44440:	bhi	44ed4 <__assert_fail@plt+0x33cc8>
   44444:	cmp	r2, #3
   44448:	ldrls	pc, [pc, r2, lsl #2]
   4444c:	b	44ed4 <__assert_fail@plt+0x33cc8>
   44450:	andeq	r4, r4, r4, lsl #9
   44454:	andeq	r4, r4, r8, ror r4
   44458:	andeq	r4, r4, ip, ror #8
   4445c:	andeq	r4, r4, r0, ror #8
   44460:	ldr	r0, [pc, #-2820]	; 43964 <__assert_fail@plt+0x32758>
   44464:	bl	10f24 <printf@plt>
   44468:	b	42e80 <__assert_fail@plt+0x31c74>
   4446c:	ldr	r0, [pc, #-2828]	; 43968 <__assert_fail@plt+0x3275c>
   44470:	bl	10f24 <printf@plt>
   44474:	b	42e80 <__assert_fail@plt+0x31c74>
   44478:	ldr	r0, [pc, #-2836]	; 4396c <__assert_fail@plt+0x32760>
   4447c:	bl	10f24 <printf@plt>
   44480:	b	42e80 <__assert_fail@plt+0x31c74>
   44484:	ldr	r0, [pc, #-2844]	; 43970 <__assert_fail@plt+0x32764>
   44488:	bl	10f24 <printf@plt>
   4448c:	b	42e80 <__assert_fail@plt+0x31c74>
   44490:	ldr	r3, [pc, #-2852]	; 43974 <__assert_fail@plt+0x32768>
   44494:	cmp	r4, r3
   44498:	cmpne	r4, #32
   4449c:	beq	42e80 <__assert_fail@plt+0x31c74>
   444a0:	sub	r3, r4, #17
   444a4:	cmp	r4, #21
   444a8:	cmpne	r3, #2
   444ac:	ldrd	r8, [sp, #160]	; 0xa0
   444b0:	bhi	444c8 <__assert_fail@plt+0x332bc>
   444b4:	ldr	r3, [sp, #304]	; 0x130
   444b8:	adds	r8, r8, r3
   444bc:	ldr	r3, [sp, #308]	; 0x134
   444c0:	adc	r9, r9, r3
   444c4:	strd	r8, [sp, #160]	; 0xa0
   444c8:	ldr	r3, [sp, #340]	; 0x154
   444cc:	ldrd	r2, [r3, #32]
   444d0:	cmp	r3, r9
   444d4:	cmpeq	r2, r8
   444d8:	bhi	44cc4 <__assert_fail@plt+0x33ab8>
   444dc:	ldr	r1, [pc, #-2924]	; 43978 <__assert_fail@plt+0x3276c>
   444e0:	mov	r2, #5
   444e4:	mov	r0, #0
   444e8:	bl	10f90 <dcgettext@plt>
   444ec:	mov	r3, #0
   444f0:	str	r3, [sp]
   444f4:	ldrd	r2, [sp, #160]	; 0xa0
   444f8:	mov	r4, r0
   444fc:	ldr	r0, [pc, #-2952]	; 4397c <__assert_fail@plt+0x32770>
   44500:	bl	3c744 <__assert_fail@plt+0x2b538>
   44504:	ldr	r3, [sp, #340]	; 0x154
   44508:	ldr	r2, [r3, #16]
   4450c:	sub	r2, sl, r2
   44510:	mov	r1, r0
   44514:	mov	r0, r4
   44518:	bl	54dd0 <warn@@Base>
   4451c:	b	42e80 <__assert_fail@plt+0x31c74>
   44520:	mov	r0, #9
   44524:	bl	110c8 <putchar@plt>
   44528:	ldrd	r2, [sp, #160]	; 0xa0
   4452c:	orrs	r1, r2, r3
   44530:	beq	44bb0 <__assert_fail@plt+0x339a4>
   44534:	cmp	r3, #0
   44538:	cmpeq	r2, #1
   4453c:	beq	44b98 <__assert_fail@plt+0x3398c>
   44540:	mov	r2, #5
   44544:	ldr	r1, [pc, #-3020]	; 43980 <__assert_fail@plt+0x32774>
   44548:	mov	r0, #0
   4454c:	bl	10f90 <dcgettext@plt>
   44550:	bl	10f24 <printf@plt>
   44554:	b	42e80 <__assert_fail@plt+0x31c74>
   44558:	cmp	r3, #0
   4455c:	cmpeq	r2, #16
   44560:	beq	45164 <__assert_fail@plt+0x33f58>
   44564:	bcc	45158 <__assert_fail@plt+0x33f4c>
   44568:	cmp	r3, #0
   4456c:	cmpeq	r2, #17
   44570:	beq	450e0 <__assert_fail@plt+0x33ed4>
   44574:	cmp	r3, #0
   44578:	cmpeq	r2, #18
   4457c:	bne	450ec <__assert_fail@plt+0x33ee0>
   44580:	ldr	r0, [pc, #-3012]	; 439c4 <__assert_fail@plt+0x327b8>
   44584:	bl	10f24 <printf@plt>
   44588:	b	42e80 <__assert_fail@plt+0x31c74>
   4458c:	mov	r0, #9
   44590:	bl	110c8 <putchar@plt>
   44594:	ldr	r3, [sp, #160]	; 0xa0
   44598:	ldr	r2, [sp, #164]	; 0xa4
   4459c:	subs	r1, r3, #1
   445a0:	str	r1, [sp, #72]	; 0x48
   445a4:	sbc	r1, r2, #0
   445a8:	str	r1, [sp, #76]	; 0x4c
   445ac:	ldrd	r0, [sp, #72]	; 0x48
   445b0:	cmp	r1, #0
   445b4:	cmpeq	r0, #64	; 0x40
   445b8:	bhi	44724 <__assert_fail@plt+0x33518>
   445bc:	mov	r1, r0
   445c0:	cmp	r0, #64	; 0x40
   445c4:	ldrls	pc, [pc, r0, lsl #2]
   445c8:	b	44724 <__assert_fail@plt+0x33518>
   445cc:	andeq	r4, r4, r8, lsl r7
   445d0:	andeq	r4, r4, ip, lsl #14
   445d4:	andeq	r4, r4, r0, lsl #14
   445d8:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   445dc:	andeq	r4, r4, r8, ror #13
   445e0:	andeq	r4, r4, r4, lsr #14
   445e4:	andeq	r4, r4, r4, lsr #14
   445e8:	andeq	r4, r4, r4, lsr #14
   445ec:	andeq	r4, r4, r4, lsr #14
   445f0:	andeq	r4, r4, r4, lsr #14
   445f4:	andeq	r4, r4, r4, lsr #14
   445f8:	andeq	r4, r4, r4, lsr #14
   445fc:	andeq	r4, r4, r4, lsr #14
   44600:	andeq	r4, r4, r4, lsr #14
   44604:	andeq	r4, r4, r4, lsr #14
   44608:	andeq	r4, r4, r4, lsr #14
   4460c:	andeq	r4, r4, r4, lsr #14
   44610:	andeq	r4, r4, r4, lsr #14
   44614:	andeq	r4, r4, r4, lsr #14
   44618:	andeq	r4, r4, r4, lsr #14
   4461c:	andeq	r4, r4, r4, lsr #14
   44620:	andeq	r4, r4, r4, lsr #14
   44624:	andeq	r4, r4, r4, lsr #14
   44628:	andeq	r4, r4, r4, lsr #14
   4462c:	andeq	r4, r4, r4, lsr #14
   44630:	andeq	r4, r4, r4, lsr #14
   44634:	andeq	r4, r4, r4, lsr #14
   44638:	andeq	r4, r4, r4, lsr #14
   4463c:	andeq	r4, r4, r4, lsr #14
   44640:	andeq	r4, r4, r4, lsr #14
   44644:	andeq	r4, r4, r4, lsr #14
   44648:	andeq	r4, r4, r4, lsr #14
   4464c:	andeq	r4, r4, r4, lsr #14
   44650:	andeq	r4, r4, r4, lsr #14
   44654:	andeq	r4, r4, r4, lsr #14
   44658:	andeq	r4, r4, r4, lsr #14
   4465c:	andeq	r4, r4, r4, lsr #14
   44660:	andeq	r4, r4, r4, lsr #14
   44664:	andeq	r4, r4, r4, lsr #14
   44668:	andeq	r4, r4, r4, lsr #14
   4466c:	andeq	r4, r4, r4, lsr #14
   44670:	andeq	r4, r4, r4, lsr #14
   44674:	andeq	r4, r4, r4, lsr #14
   44678:	andeq	r4, r4, r4, lsr #14
   4467c:	andeq	r4, r4, r4, lsr #14
   44680:	andeq	r4, r4, r4, lsr #14
   44684:	andeq	r4, r4, r4, lsr #14
   44688:	andeq	r4, r4, r4, lsr #14
   4468c:	andeq	r4, r4, r4, lsr #14
   44690:	andeq	r4, r4, r4, lsr #14
   44694:	andeq	r4, r4, r4, lsr #14
   44698:	andeq	r4, r4, r4, lsr #14
   4469c:	andeq	r4, r4, r4, lsr #14
   446a0:	andeq	r4, r4, r4, lsr #14
   446a4:	andeq	r4, r4, r4, lsr #14
   446a8:	andeq	r4, r4, r4, lsr #14
   446ac:	andeq	r4, r4, r4, lsr #14
   446b0:	andeq	r4, r4, r4, lsr #14
   446b4:	andeq	r4, r4, r4, lsr #14
   446b8:	andeq	r4, r4, r4, lsr #14
   446bc:	andeq	r4, r4, r4, lsr #14
   446c0:	andeq	r4, r4, r4, lsr #14
   446c4:	andeq	r4, r4, r4, lsr #14
   446c8:	ldrdeq	r4, [r4], -ip
   446cc:	ldrdeq	r4, [r4], -r0
   446d0:	ldr	r0, [pc, #-3412]	; 43984 <__assert_fail@plt+0x32778>
   446d4:	bl	10f24 <printf@plt>
   446d8:	b	42e80 <__assert_fail@plt+0x31c74>
   446dc:	ldr	r0, [pc, #-3420]	; 43988 <__assert_fail@plt+0x3277c>
   446e0:	bl	10f24 <printf@plt>
   446e4:	b	42e80 <__assert_fail@plt+0x31c74>
   446e8:	ldr	r0, [pc, #-3428]	; 4398c <__assert_fail@plt+0x32780>
   446ec:	bl	10f24 <printf@plt>
   446f0:	b	42e80 <__assert_fail@plt+0x31c74>
   446f4:	ldr	r0, [pc, #-3436]	; 43990 <__assert_fail@plt+0x32784>
   446f8:	bl	10f24 <printf@plt>
   446fc:	b	42e80 <__assert_fail@plt+0x31c74>
   44700:	ldr	r0, [pc, #-3444]	; 43994 <__assert_fail@plt+0x32788>
   44704:	bl	10f24 <printf@plt>
   44708:	b	42e80 <__assert_fail@plt+0x31c74>
   4470c:	ldr	r0, [pc, #-3452]	; 43998 <__assert_fail@plt+0x3278c>
   44710:	bl	10f24 <printf@plt>
   44714:	b	42e80 <__assert_fail@plt+0x31c74>
   44718:	ldr	r0, [pc, #-3460]	; 4399c <__assert_fail@plt+0x32790>
   4471c:	bl	10f24 <printf@plt>
   44720:	b	42e80 <__assert_fail@plt+0x31c74>
   44724:	subs	r3, r3, #64	; 0x40
   44728:	str	r3, [sp, #128]	; 0x80
   4472c:	sbc	r3, r2, #0
   44730:	str	r3, [sp, #132]	; 0x84
   44734:	ldrd	r2, [sp, #128]	; 0x80
   44738:	mov	r0, #0
   4473c:	cmp	r3, #0
   44740:	cmpeq	r2, #191	; 0xbf
   44744:	mov	r2, #5
   44748:	ldrls	r1, [pc, #-3504]	; 439a0 <__assert_fail@plt+0x32794>
   4474c:	ldrhi	r1, [pc, #-3504]	; 439a4 <__assert_fail@plt+0x32798>
   44750:	bl	10f90 <dcgettext@plt>
   44754:	bl	10f24 <printf@plt>
   44758:	b	42e80 <__assert_fail@plt+0x31c74>
   4475c:	cmp	r3, #0
   44760:	cmpeq	r2, #4
   44764:	beq	45200 <__assert_fail@plt+0x33ff4>
   44768:	bls	447f4 <__assert_fail@plt+0x335e8>
   4476c:	cmp	r3, #0
   44770:	cmpeq	r2, #6
   44774:	beq	451c4 <__assert_fail@plt+0x33fb8>
   44778:	bcc	451b8 <__assert_fail@plt+0x33fac>
   4477c:	cmp	r3, #0
   44780:	cmpeq	r2, #7
   44784:	beq	451ac <__assert_fail@plt+0x33fa0>
   44788:	cmp	r3, #0
   4478c:	cmpeq	r2, #8
   44790:	bne	450ec <__assert_fail@plt+0x33ee0>
   44794:	ldr	r0, [pc, #-3572]	; 439a8 <__assert_fail@plt+0x3279c>
   44798:	bl	10f24 <printf@plt>
   4479c:	b	42e80 <__assert_fail@plt+0x31c74>
   447a0:	cmp	r3, #0
   447a4:	cmpeq	r2, #29
   447a8:	beq	45230 <__assert_fail@plt+0x34024>
   447ac:	bhi	44850 <__assert_fail@plt+0x33644>
   447b0:	cmp	r3, #0
   447b4:	cmpeq	r2, #24
   447b8:	beq	451dc <__assert_fail@plt+0x33fd0>
   447bc:	bhi	4481c <__assert_fail@plt+0x33610>
   447c0:	cmp	r3, #0
   447c4:	cmpeq	r2, #21
   447c8:	beq	45224 <__assert_fail@plt+0x34018>
   447cc:	bcc	45218 <__assert_fail@plt+0x3400c>
   447d0:	cmp	r3, #0
   447d4:	cmpeq	r2, #22
   447d8:	beq	4520c <__assert_fail@plt+0x34000>
   447dc:	cmp	r3, #0
   447e0:	cmpeq	r2, #23
   447e4:	bne	450ec <__assert_fail@plt+0x33ee0>
   447e8:	ldr	r0, [pc, #-3652]	; 439ac <__assert_fail@plt+0x327a0>
   447ec:	bl	10f24 <printf@plt>
   447f0:	b	42e80 <__assert_fail@plt+0x31c74>
   447f4:	cmp	r3, #0
   447f8:	cmpeq	r2, #2
   447fc:	beq	451f4 <__assert_fail@plt+0x33fe8>
   44800:	bhi	451e8 <__assert_fail@plt+0x33fdc>
   44804:	cmp	r3, #0
   44808:	cmpeq	r2, #1
   4480c:	bne	450ec <__assert_fail@plt+0x33ee0>
   44810:	ldr	r0, [pc, #-3688]	; 439b0 <__assert_fail@plt+0x327a4>
   44814:	bl	10f24 <printf@plt>
   44818:	b	42e80 <__assert_fail@plt+0x31c74>
   4481c:	cmp	r3, #0
   44820:	cmpeq	r2, #26
   44824:	beq	45254 <__assert_fail@plt+0x34048>
   44828:	bcc	45248 <__assert_fail@plt+0x3403c>
   4482c:	cmp	r3, #0
   44830:	cmpeq	r2, #27
   44834:	beq	4523c <__assert_fail@plt+0x34030>
   44838:	cmp	r3, #0
   4483c:	cmpeq	r2, #28
   44840:	bne	450ec <__assert_fail@plt+0x33ee0>
   44844:	ldr	r0, [pc, #-3736]	; 439b4 <__assert_fail@plt+0x327a8>
   44848:	bl	10f24 <printf@plt>
   4484c:	b	42e80 <__assert_fail@plt+0x31c74>
   44850:	cmp	r3, #0
   44854:	cmpeq	r2, #34	; 0x22
   44858:	beq	45170 <__assert_fail@plt+0x33f64>
   4485c:	bhi	44894 <__assert_fail@plt+0x33688>
   44860:	cmp	r3, #0
   44864:	cmpeq	r2, #31
   44868:	beq	45194 <__assert_fail@plt+0x33f88>
   4486c:	bcc	45188 <__assert_fail@plt+0x33f7c>
   44870:	cmp	r3, #0
   44874:	cmpeq	r2, #32
   44878:	beq	4517c <__assert_fail@plt+0x33f70>
   4487c:	cmp	r3, #0
   44880:	cmpeq	r2, #33	; 0x21
   44884:	bne	450ec <__assert_fail@plt+0x33ee0>
   44888:	ldr	r0, [pc, #-3800]	; 439b8 <__assert_fail@plt+0x327ac>
   4488c:	bl	10f24 <printf@plt>
   44890:	b	42e80 <__assert_fail@plt+0x31c74>
   44894:	cmp	r3, #0
   44898:	cmpeq	r2, #36	; 0x24
   4489c:	beq	450c8 <__assert_fail@plt+0x33ebc>
   448a0:	bcc	450bc <__assert_fail@plt+0x33eb0>
   448a4:	ldr	r0, [pc, #-3824]	; 439bc <__assert_fail@plt+0x327b0>
   448a8:	mov	r1, #0
   448ac:	cmp	r3, r1
   448b0:	cmpeq	r2, r0
   448b4:	beq	450b0 <__assert_fail@plt+0x33ea4>
   448b8:	ldr	r0, [pc, #-3840]	; 439c0 <__assert_fail@plt+0x327b4>
   448bc:	mov	r1, #0
   448c0:	cmp	r3, r1
   448c4:	cmpeq	r2, r0
   448c8:	bne	450ec <__assert_fail@plt+0x33ee0>
   448cc:	ldr	r0, [pc, #-3856]	; 439c4 <__assert_fail@plt+0x327b8>
   448d0:	bl	10f24 <printf@plt>
   448d4:	b	42e80 <__assert_fail@plt+0x31c74>
   448d8:	ldrd	r2, [sp, #160]	; 0xa0
   448dc:	ldr	r1, [sp, #332]	; 0x14c
   448e0:	strd	r2, [r1, #40]	; 0x28
   448e4:	b	42e80 <__assert_fail@plt+0x31c74>
   448e8:	ldr	r3, [sp, #328]	; 0x148
   448ec:	cmp	r3, #3
   448f0:	bgt	44900 <__assert_fail@plt+0x336f4>
   448f4:	sub	r3, r4, #6
   448f8:	cmp	r3, #1
   448fc:	bls	44908 <__assert_fail@plt+0x336fc>
   44900:	cmp	r4, #23
   44904:	bne	42e80 <__assert_fail@plt+0x31c74>
   44908:	ldr	r2, [sp, #332]	; 0x14c
   4490c:	ldr	r3, [sp, #332]	; 0x14c
   44910:	ldr	r4, [r2, #76]	; 0x4c
   44914:	ldr	r3, [r3, #80]	; 0x50
   44918:	ldr	r0, [r2, #72]	; 0x48
   4491c:	cmp	r3, #0
   44920:	cmpne	r3, r4
   44924:	bhi	44ecc <__assert_fail@plt+0x33cc0>
   44928:	add	r5, r3, #1024	; 0x400
   4492c:	cmn	r5, #-536870910	; 0xe0000002
   44930:	bhi	4528c <__assert_fail@plt+0x34080>
   44934:	lsl	r1, r5, #3
   44938:	bl	58678 <warn@@Base+0x38a8>
   4493c:	ldr	r3, [sp, #332]	; 0x14c
   44940:	ldr	r1, [r3, #76]	; 0x4c
   44944:	str	r5, [r3, #80]	; 0x50
   44948:	str	r0, [r3, #72]	; 0x48
   4494c:	ldrd	r2, [sp, #160]	; 0xa0
   44950:	lsl	r4, r4, #3
   44954:	add	r1, r1, #1
   44958:	strd	r2, [r0, r4]
   4495c:	ldr	r3, [sp, #332]	; 0x14c
   44960:	str	r1, [r3, #76]	; 0x4c
   44964:	b	42e80 <__assert_fail@plt+0x31c74>
   44968:	mov	r2, #0
   4496c:	mov	r3, #0
   44970:	strd	r2, [sp, #160]	; 0xa0
   44974:	b	42870 <__assert_fail@plt+0x31664>
   44978:	ldr	r3, [sp, #64]	; 0x40
   4497c:	cmp	r3, #8
   44980:	mov	r1, r3
   44984:	add	r6, sl, r3
   44988:	bls	42830 <__assert_fail@plt+0x31624>
   4498c:	mov	r3, #5
   44990:	str	r3, [sp]
   44994:	mov	r7, r1
   44998:	mov	r3, r1
   4499c:	ldr	r2, [pc, #-4060]	; 439c8 <__assert_fail@plt+0x327bc>
   449a0:	ldr	r1, [pc, #-4060]	; 439cc <__assert_fail@plt+0x327c0>
   449a4:	mov	r0, #0
   449a8:	bl	11200 <dcngettext@plt>
   449ac:	mov	r2, #8
   449b0:	mov	r1, r7
   449b4:	bl	548ac <error@@Base>
   449b8:	ldr	r2, [sp, #300]	; 0x12c
   449bc:	add	r3, sl, #8
   449c0:	cmp	r2, r3
   449c4:	bls	4283c <__assert_fail@plt+0x31630>
   449c8:	mov	r1, #8
   449cc:	b	4285c <__assert_fail@plt+0x31650>
   449d0:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   449d4:	ldr	r1, [sp, #60]	; 0x3c
   449d8:	mov	r2, r0
   449dc:	ldr	r0, [pc, #2276]	; 452c8 <__assert_fail@plt+0x340bc>
   449e0:	bl	10f24 <printf@plt>
   449e4:	b	42ab0 <__assert_fail@plt+0x318a4>
   449e8:	mov	r3, #5
   449ec:	str	r3, [sp]
   449f0:	mov	r7, r1
   449f4:	mov	r3, r1
   449f8:	ldr	r2, [pc, #2252]	; 452cc <__assert_fail@plt+0x340c0>
   449fc:	ldr	r1, [pc, #2252]	; 452d0 <__assert_fail@plt+0x340c4>
   44a00:	mov	r0, #0
   44a04:	bl	11200 <dcngettext@plt>
   44a08:	mov	r2, #8
   44a0c:	mov	r1, r7
   44a10:	bl	548ac <error@@Base>
   44a14:	ldr	r2, [sp, #300]	; 0x12c
   44a18:	add	r3, sl, #8
   44a1c:	cmp	r2, r3
   44a20:	movhi	r1, #8
   44a24:	bhi	42bf0 <__assert_fail@plt+0x319e4>
   44a28:	b	42bd0 <__assert_fail@plt+0x319c4>
   44a2c:	mov	r3, #5
   44a30:	str	r3, [sp]
   44a34:	ldr	r2, [pc, #2192]	; 452cc <__assert_fail@plt+0x340c0>
   44a38:	mov	r3, fp
   44a3c:	ldr	r1, [pc, #2188]	; 452d0 <__assert_fail@plt+0x340c4>
   44a40:	mov	r0, #0
   44a44:	bl	11200 <dcngettext@plt>
   44a48:	mov	r2, #8
   44a4c:	mov	r1, fp
   44a50:	bl	548ac <error@@Base>
   44a54:	ldr	r2, [sp, #300]	; 0x12c
   44a58:	add	r3, sl, #8
   44a5c:	cmp	r2, r3
   44a60:	movhi	r1, #8
   44a64:	bhi	42ccc <__assert_fail@plt+0x31ac0>
   44a68:	b	42d28 <__assert_fail@plt+0x31b1c>
   44a6c:	mov	r2, #5
   44a70:	ldr	r1, [pc, #2140]	; 452d4 <__assert_fail@plt+0x340c8>
   44a74:	mov	r0, #0
   44a78:	bl	10f90 <dcgettext@plt>
   44a7c:	bl	548ac <error@@Base>
   44a80:	mov	r6, sl
   44a84:	b	42870 <__assert_fail@plt+0x31664>
   44a88:	ldr	r3, [sp, #300]	; 0x12c
   44a8c:	mov	r0, sl
   44a90:	add	r1, sp, #156	; 0x9c
   44a94:	mov	r2, #1
   44a98:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   44a9c:	ldr	r3, [sp, #156]	; 0x9c
   44aa0:	add	sl, sl, r3
   44aa4:	mov	r8, r0
   44aa8:	mov	r9, r1
   44aac:	b	42ab8 <__assert_fail@plt+0x318ac>
   44ab0:	ldr	r1, [sp, #60]	; 0x3c
   44ab4:	mov	r3, r6
   44ab8:	mov	r2, r7
   44abc:	ldr	r0, [pc, #2068]	; 452d8 <__assert_fail@plt+0x340cc>
   44ac0:	bl	10f24 <printf@plt>
   44ac4:	b	44394 <__assert_fail@plt+0x33188>
   44ac8:	cmp	r4, #8
   44acc:	streq	sl, [r8, #1508]	; 0x5e4
   44ad0:	beq	42e80 <__assert_fail@plt+0x31c74>
   44ad4:	mov	r2, #5
   44ad8:	ldr	r1, [pc, #2044]	; 452dc <__assert_fail@plt+0x340d0>
   44adc:	mov	r0, #0
   44ae0:	bl	10f90 <dcgettext@plt>
   44ae4:	mov	r5, r0
   44ae8:	mov	r0, r4
   44aec:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   44af0:	mov	r4, r0
   44af4:	mov	r0, #27
   44af8:	bl	3df50 <__assert_fail@plt+0x2cd44>
   44afc:	mov	r1, r4
   44b00:	mov	r2, r0
   44b04:	mov	r0, r5
   44b08:	bl	54dd0 <warn@@Base>
   44b0c:	mov	r2, #5
   44b10:	ldr	r1, [pc, #1992]	; 452e0 <__assert_fail@plt+0x340d4>
   44b14:	mov	r0, #0
   44b18:	bl	10f90 <dcgettext@plt>
   44b1c:	str	r0, [r8, #1508]	; 0x5e4
   44b20:	b	42e80 <__assert_fail@plt+0x31c74>
   44b24:	ldr	r1, [sp, #332]	; 0x14c
   44b28:	add	r3, r3, #1024	; 0x400
   44b2c:	cmn	r3, #-536870910	; 0xe0000002
   44b30:	ldr	r0, [r1, #48]	; 0x30
   44b34:	bhi	452c0 <__assert_fail@plt+0x340b4>
   44b38:	str	r2, [sp, #68]	; 0x44
   44b3c:	lsl	r2, r3, #3
   44b40:	mov	r1, r2
   44b44:	mov	r9, r2
   44b48:	str	r3, [sp, #60]	; 0x3c
   44b4c:	bl	58678 <warn@@Base+0x38a8>
   44b50:	ldr	r3, [sp, #332]	; 0x14c
   44b54:	mov	r1, r9
   44b58:	str	r0, [r3, #48]	; 0x30
   44b5c:	ldr	r0, [r3, #52]	; 0x34
   44b60:	bl	58678 <warn@@Base+0x38a8>
   44b64:	ldr	r3, [sp, #60]	; 0x3c
   44b68:	lsl	r1, r3, #2
   44b6c:	ldr	r3, [sp, #332]	; 0x14c
   44b70:	str	r0, [r3, #52]	; 0x34
   44b74:	ldr	r0, [r3, #56]	; 0x38
   44b78:	bl	58678 <warn@@Base+0x38a8>
   44b7c:	ldr	r3, [sp, #332]	; 0x14c
   44b80:	mov	r2, r3
   44b84:	str	r0, [r3, #56]	; 0x38
   44b88:	ldr	r3, [sp, #60]	; 0x3c
   44b8c:	str	r3, [r2, #64]	; 0x40
   44b90:	ldr	r2, [sp, #68]	; 0x44
   44b94:	b	4311c <__assert_fail@plt+0x31f10>
   44b98:	mov	r2, #5
   44b9c:	ldr	r1, [pc, #1856]	; 452e4 <__assert_fail@plt+0x340d8>
   44ba0:	mov	r0, #0
   44ba4:	bl	10f90 <dcgettext@plt>
   44ba8:	bl	10f24 <printf@plt>
   44bac:	b	42e80 <__assert_fail@plt+0x31c74>
   44bb0:	mov	r2, #5
   44bb4:	ldr	r1, [pc, #1836]	; 452e8 <__assert_fail@plt+0x340dc>
   44bb8:	mov	r0, r8
   44bbc:	bl	10f90 <dcgettext@plt>
   44bc0:	bl	10f24 <printf@plt>
   44bc4:	b	42e80 <__assert_fail@plt+0x31c74>
   44bc8:	mov	r3, #5
   44bcc:	str	r3, [sp]
   44bd0:	ldr	r2, [pc, #1780]	; 452cc <__assert_fail@plt+0x340c0>
   44bd4:	ldr	r1, [pc, #1780]	; 452d0 <__assert_fail@plt+0x340c4>
   44bd8:	mov	r3, fp
   44bdc:	mov	r0, #0
   44be0:	bl	11200 <dcngettext@plt>
   44be4:	mov	r2, #8
   44be8:	mov	r1, fp
   44bec:	b	449b4 <__assert_fail@plt+0x337a8>
   44bf0:	mov	r1, #8
   44bf4:	ldr	r3, [pc, #1776]	; 452ec <__assert_fail@plt+0x340e0>
   44bf8:	mov	r0, r6
   44bfc:	ldr	r3, [r3]
   44c00:	blx	r3
   44c04:	strd	r0, [sp, #160]	; 0xa0
   44c08:	b	42ee8 <__assert_fail@plt+0x31cdc>
   44c0c:	ldr	r3, [r3, #68]	; 0x44
   44c10:	cmp	r3, r2
   44c14:	bhi	452ac <__assert_fail@plt+0x340a0>
   44c18:	ldr	r2, [sp, #332]	; 0x14c
   44c1c:	ldr	r2, [r2, #60]	; 0x3c
   44c20:	cmp	r3, r2
   44c24:	bhi	44f74 <__assert_fail@plt+0x33d68>
   44c28:	ldr	r2, [sp, #332]	; 0x14c
   44c2c:	ldrd	r0, [sp, #160]	; 0xa0
   44c30:	ldr	ip, [r2, #52]	; 0x34
   44c34:	lsl	r2, r3, #3
   44c38:	add	r3, r3, #1
   44c3c:	strd	r0, [ip, r2]
   44c40:	ldr	r2, [sp, #332]	; 0x14c
   44c44:	str	r3, [r2, #68]	; 0x44
   44c48:	b	42e80 <__assert_fail@plt+0x31c74>
   44c4c:	mov	r2, #5
   44c50:	ldr	r1, [pc, #1688]	; 452f0 <__assert_fail@plt+0x340e4>
   44c54:	mov	r0, #0
   44c58:	bl	10f90 <dcgettext@plt>
   44c5c:	bl	10f24 <printf@plt>
   44c60:	b	42e80 <__assert_fail@plt+0x31c74>
   44c64:	mov	r2, #5
   44c68:	ldr	r1, [pc, #1668]	; 452f4 <__assert_fail@plt+0x340e8>
   44c6c:	mov	r0, r8
   44c70:	bl	10f90 <dcgettext@plt>
   44c74:	bl	10f24 <printf@plt>
   44c78:	b	42e80 <__assert_fail@plt+0x31c74>
   44c7c:	ldr	r0, [pc, #1652]	; 452f8 <__assert_fail@plt+0x340ec>
   44c80:	bl	10f24 <printf@plt>
   44c84:	b	42e80 <__assert_fail@plt+0x31c74>
   44c88:	ldr	r0, [pc, #1644]	; 452fc <__assert_fail@plt+0x340f0>
   44c8c:	bl	10f24 <printf@plt>
   44c90:	b	42e80 <__assert_fail@plt+0x31c74>
   44c94:	ldr	r0, [pc, #1636]	; 45300 <__assert_fail@plt+0x340f4>
   44c98:	bl	10f24 <printf@plt>
   44c9c:	b	42e80 <__assert_fail@plt+0x31c74>
   44ca0:	ldr	r0, [pc, #1628]	; 45304 <__assert_fail@plt+0x340f8>
   44ca4:	bl	10f24 <printf@plt>
   44ca8:	b	42e80 <__assert_fail@plt+0x31c74>
   44cac:	ldr	r0, [pc, #1620]	; 45308 <__assert_fail@plt+0x340fc>
   44cb0:	bl	10f24 <printf@plt>
   44cb4:	b	42e80 <__assert_fail@plt+0x31c74>
   44cb8:	ldr	r0, [pc, #1612]	; 4530c <__assert_fail@plt+0x34100>
   44cbc:	bl	10f24 <printf@plt>
   44cc0:	b	42e80 <__assert_fail@plt+0x31c74>
   44cc4:	ldr	r3, [sp, #340]	; 0x154
   44cc8:	mov	r2, #0
   44ccc:	ldr	r1, [r3, #16]
   44cd0:	ldr	r3, [sp, #300]	; 0x12c
   44cd4:	add	r0, r1, r8
   44cd8:	mov	r1, r2
   44cdc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   44ce0:	mov	r2, #5
   44ce4:	ldr	r1, [pc, #1572]	; 45310 <__assert_fail@plt+0x34104>
   44ce8:	mov	r5, r0
   44cec:	mov	r0, #0
   44cf0:	bl	10f90 <dcgettext@plt>
   44cf4:	mov	r1, r5
   44cf8:	bl	10f24 <printf@plt>
   44cfc:	cmp	r4, #16
   44d00:	beq	44d3c <__assert_fail@plt+0x33b30>
   44d04:	ldr	r3, [pc, #1544]	; 45314 <__assert_fail@plt+0x34108>
   44d08:	ldr	r3, [r3, #1108]	; 0x454
   44d0c:	cmp	r3, #0
   44d10:	beq	44d3c <__assert_fail@plt+0x33b30>
   44d14:	ldr	r2, [r3]
   44d18:	cmp	r5, r2
   44d1c:	bne	44d30 <__assert_fail@plt+0x33b24>
   44d20:	b	44fac <__assert_fail@plt+0x33da0>
   44d24:	ldr	r2, [r3]
   44d28:	cmp	r2, r5
   44d2c:	beq	44fac <__assert_fail@plt+0x33da0>
   44d30:	ldr	r3, [r3, #20]
   44d34:	cmp	r3, #0
   44d38:	bne	44d24 <__assert_fail@plt+0x33b18>
   44d3c:	mov	r0, #93	; 0x5d
   44d40:	bl	110c8 <putchar@plt>
   44d44:	b	42e80 <__assert_fail@plt+0x31c74>
   44d48:	ldr	r0, [pc, #1480]	; 45318 <__assert_fail@plt+0x3410c>
   44d4c:	bl	10f24 <printf@plt>
   44d50:	b	42e80 <__assert_fail@plt+0x31c74>
   44d54:	ldr	r0, [pc, #1472]	; 4531c <__assert_fail@plt+0x34110>
   44d58:	bl	10f24 <printf@plt>
   44d5c:	b	42e80 <__assert_fail@plt+0x31c74>
   44d60:	ldr	r0, [pc, #1464]	; 45320 <__assert_fail@plt+0x34114>
   44d64:	bl	10f24 <printf@plt>
   44d68:	b	42e80 <__assert_fail@plt+0x31c74>
   44d6c:	add	r2, sp, #160	; 0xa0
   44d70:	add	r1, sp, #184	; 0xb8
   44d74:	mov	r0, r6
   44d78:	bl	55148 <warn@@Base+0x378>
   44d7c:	ldr	r1, [sp, #188]	; 0xbc
   44d80:	cmp	r4, #20
   44d84:	ldrd	r2, [sp, #160]	; 0xa0
   44d88:	ldr	lr, [sp, #184]	; 0xb8
   44d8c:	str	r1, [sp, #88]	; 0x58
   44d90:	bne	43f00 <__assert_fail@plt+0x32cf4>
   44d94:	add	r1, sp, #304	; 0x130
   44d98:	ldrd	r0, [r1]
   44d9c:	adds	r8, r0, r2
   44da0:	adcs	r9, r1, r3
   44da4:	mov	r2, #0
   44da8:	mov	r3, #0
   44dac:	movcs	r2, #1
   44db0:	movcs	r3, #0
   44db4:	orrs	r3, r2, r3
   44db8:	mov	r2, r8
   44dbc:	mov	r3, r9
   44dc0:	beq	43f00 <__assert_fail@plt+0x32cf4>
   44dc4:	ldr	r1, [sp, #88]	; 0x58
   44dc8:	adds	lr, lr, #1
   44dcc:	adc	r1, r1, #0
   44dd0:	str	r1, [sp, #88]	; 0x58
   44dd4:	str	r1, [sp, #188]	; 0xbc
   44dd8:	str	lr, [sp, #184]	; 0xb8
   44ddc:	b	43f00 <__assert_fail@plt+0x32cf4>
   44de0:	mov	r0, r8
   44de4:	add	r1, sp, #184	; 0xb8
   44de8:	add	r2, sp, #192	; 0xc0
   44dec:	bl	55148 <warn@@Base+0x378>
   44df0:	ldr	r6, [sp, #184]	; 0xb8
   44df4:	ldr	r8, [sp, #188]	; 0xbc
   44df8:	ldrd	r0, [sp, #192]	; 0xc0
   44dfc:	b	442a0 <__assert_fail@plt+0x33094>
   44e00:	mov	r0, r6
   44e04:	add	r2, sp, #176	; 0xb0
   44e08:	add	r1, sp, #168	; 0xa8
   44e0c:	bl	55148 <warn@@Base+0x378>
   44e10:	b	44270 <__assert_fail@plt+0x33064>
   44e14:	mov	r0, r6
   44e18:	add	r2, sp, #160	; 0xa0
   44e1c:	add	r1, sp, #184	; 0xb8
   44e20:	bl	55148 <warn@@Base+0x378>
   44e24:	ldrd	r0, [sp, #184]	; 0xb8
   44e28:	ldrd	r2, [sp, #160]	; 0xa0
   44e2c:	b	4434c <__assert_fail@plt+0x33140>
   44e30:	mov	r2, #5
   44e34:	ldr	r1, [pc, #1184]	; 452dc <__assert_fail@plt+0x340d0>
   44e38:	mov	r0, #0
   44e3c:	bl	10f90 <dcgettext@plt>
   44e40:	mov	r5, r0
   44e44:	mov	r0, r4
   44e48:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   44e4c:	mov	r4, r0
   44e50:	ldr	r0, [pc, #1228]	; 45324 <__assert_fail@plt+0x34118>
   44e54:	bl	3df50 <__assert_fail@plt+0x2cd44>
   44e58:	mov	r1, r4
   44e5c:	mov	r2, r0
   44e60:	mov	r0, r5
   44e64:	bl	54dd0 <warn@@Base>
   44e68:	mov	r3, #0
   44e6c:	str	r3, [r8, #1512]	; 0x5e8
   44e70:	b	42e80 <__assert_fail@plt+0x31c74>
   44e74:	ldr	r8, [sp, #336]	; 0x150
   44e78:	b	43ad8 <__assert_fail@plt+0x328cc>
   44e7c:	str	r2, [sp, #60]	; 0x3c
   44e80:	mov	r9, r3
   44e84:	str	r2, [sp, #184]	; 0xb8
   44e88:	str	r3, [sp, #188]	; 0xbc
   44e8c:	mov	r2, lr
   44e90:	mov	r3, ip
   44e94:	strd	r0, [sp, #176]	; 0xb0
   44e98:	str	lr, [sp, #192]	; 0xc0
   44e9c:	str	ip, [sp, #196]	; 0xc4
   44ea0:	str	r6, [sp, #168]	; 0xa8
   44ea4:	str	r8, [sp, #172]	; 0xac
   44ea8:	mov	lr, r0
   44eac:	mov	ip, r1
   44eb0:	mov	r0, r2
   44eb4:	mov	r1, r3
   44eb8:	mov	r2, r6
   44ebc:	mov	r3, r8
   44ec0:	ldr	r6, [sp, #60]	; 0x3c
   44ec4:	mov	r8, r9
   44ec8:	b	442c4 <__assert_fail@plt+0x330b8>
   44ecc:	mov	r1, r4
   44ed0:	b	4494c <__assert_fail@plt+0x33740>
   44ed4:	mov	r2, #5
   44ed8:	ldr	r1, [pc, #1096]	; 45328 <__assert_fail@plt+0x3411c>
   44edc:	mov	r0, #0
   44ee0:	bl	10f90 <dcgettext@plt>
   44ee4:	bl	10f24 <printf@plt>
   44ee8:	b	42e80 <__assert_fail@plt+0x31c74>
   44eec:	mov	r2, #5
   44ef0:	ldr	r1, [pc, #1076]	; 4532c <__assert_fail@plt+0x34120>
   44ef4:	mov	r0, #0
   44ef8:	bl	10f90 <dcgettext@plt>
   44efc:	bl	54dd0 <warn@@Base>
   44f00:	b	43198 <__assert_fail@plt+0x31f8c>
   44f04:	mov	r2, #5
   44f08:	ldr	r1, [pc, #1056]	; 45330 <__assert_fail@plt+0x34124>
   44f0c:	mov	r0, #0
   44f10:	bl	10f90 <dcgettext@plt>
   44f14:	bl	10f24 <printf@plt>
   44f18:	b	42e80 <__assert_fail@plt+0x31c74>
   44f1c:	ldr	r7, [pc, #1040]	; 45334 <__assert_fail@plt+0x34128>
   44f20:	b	43030 <__assert_fail@plt+0x31e24>
   44f24:	add	r3, sp, #304	; 0x130
   44f28:	mov	lr, r0
   44f2c:	str	r0, [sp, #88]	; 0x58
   44f30:	ldrd	r2, [r3]
   44f34:	b	43f00 <__assert_fail@plt+0x32cf4>
   44f38:	ldr	r2, [sp, #68]	; 0x44
   44f3c:	mov	r3, #0
   44f40:	str	fp, [sp]
   44f44:	strd	r2, [sp, #4]
   44f48:	ldrd	r0, [sp, #160]	; 0xa0
   44f4c:	ldr	r2, [sp, #344]	; 0x158
   44f50:	bl	3c814 <__assert_fail@plt+0x2b608>
   44f54:	str	r0, [r8, #1504]	; 0x5e0
   44f58:	b	43198 <__assert_fail@plt+0x31f8c>
   44f5c:	ldrd	r0, [sp, #160]	; 0xa0
   44f60:	bl	3dcf4 <__assert_fail@plt+0x2cae8>
   44f64:	str	r0, [r8, #1504]	; 0x5e0
   44f68:	b	43198 <__assert_fail@plt+0x31f8c>
   44f6c:	str	sl, [r8, #1504]	; 0x5e0
   44f70:	b	43198 <__assert_fail@plt+0x31f8c>
   44f74:	mov	r2, #5
   44f78:	ldr	r1, [pc, #952]	; 45338 <__assert_fail@plt+0x3412c>
   44f7c:	mov	r0, #0
   44f80:	bl	10f90 <dcgettext@plt>
   44f84:	bl	54dd0 <warn@@Base>
   44f88:	b	42e80 <__assert_fail@plt+0x31c74>
   44f8c:	ldrd	r0, [sp, #160]	; 0xa0
   44f90:	bl	3dcf4 <__assert_fail@plt+0x2cae8>
   44f94:	str	r0, [r8, #1508]	; 0x5e4
   44f98:	b	42e80 <__assert_fail@plt+0x31c74>
   44f9c:	ldrd	r0, [sp, #160]	; 0xa0
   44fa0:	bl	3ddec <__assert_fail@plt+0x2cbe0>
   44fa4:	str	r0, [r8, #1508]	; 0x5e4
   44fa8:	b	42e80 <__assert_fail@plt+0x31c74>
   44fac:	ldr	r0, [r3, #4]
   44fb0:	bl	3dee4 <__assert_fail@plt+0x2ccd8>
   44fb4:	mov	r1, r0
   44fb8:	ldr	r0, [pc, #892]	; 4533c <__assert_fail@plt+0x34130>
   44fbc:	bl	10f24 <printf@plt>
   44fc0:	b	44d3c <__assert_fail@plt+0x33b30>
   44fc4:	ldr	r1, [pc, #884]	; 45340 <__assert_fail@plt+0x34134>
   44fc8:	mov	r2, #5
   44fcc:	ldr	r0, [sp, #336]	; 0x150
   44fd0:	bl	10f90 <dcgettext@plt>
   44fd4:	ldr	r3, [sp, #336]	; 0x150
   44fd8:	ldr	r8, [r8, #2672]	; 0xa70
   44fdc:	str	r3, [sp]
   44fe0:	ldrd	r2, [sp, #88]	; 0x58
   44fe4:	mov	r7, r0
   44fe8:	ldr	r0, [pc, #852]	; 45344 <__assert_fail@plt+0x34138>
   44fec:	bl	3c744 <__assert_fail@plt+0x2b538>
   44ff0:	mov	r1, r8
   44ff4:	mov	r2, r0
   44ff8:	mov	r0, r7
   44ffc:	bl	54dd0 <warn@@Base>
   45000:	ldr	r3, [pc, #832]	; 45348 <__assert_fail@plt+0x3413c>
   45004:	b	42a5c <__assert_fail@plt+0x31850>
   45008:	mov	r2, #5
   4500c:	ldr	r1, [pc, #824]	; 4534c <__assert_fail@plt+0x34140>
   45010:	mov	r0, #0
   45014:	bl	10f90 <dcgettext@plt>
   45018:	mov	r7, r0
   4501c:	b	43030 <__assert_fail@plt+0x31e24>
   45020:	mov	r2, #5
   45024:	ldr	r1, [pc, #804]	; 45350 <__assert_fail@plt+0x34144>
   45028:	bl	10f90 <dcgettext@plt>
   4502c:	mov	r7, r0
   45030:	b	43030 <__assert_fail@plt+0x31e24>
   45034:	mov	r2, #5
   45038:	ldr	r1, [pc, #788]	; 45354 <__assert_fail@plt+0x34148>
   4503c:	ldr	r0, [sp, #336]	; 0x150
   45040:	bl	10f90 <dcgettext@plt>
   45044:	mov	r3, r0
   45048:	b	42a5c <__assert_fail@plt+0x31850>
   4504c:	ldr	r1, [pc, #772]	; 45358 <__assert_fail@plt+0x3414c>
   45050:	mov	r2, #5
   45054:	mov	r0, #0
   45058:	mov	r7, r0
   4505c:	bl	10f90 <dcgettext@plt>
   45060:	ldrd	r2, [sp, #104]	; 0x68
   45064:	str	r7, [sp]
   45068:	mov	r8, r0
   4506c:	ldr	r0, [pc, #720]	; 45344 <__assert_fail@plt+0x34138>
   45070:	bl	3c744 <__assert_fail@plt+0x2b538>
   45074:	mov	r1, r0
   45078:	mov	r0, r8
   4507c:	bl	54dd0 <warn@@Base>
   45080:	mov	r0, r7
   45084:	mov	r2, #5
   45088:	ldr	r1, [pc, #716]	; 4535c <__assert_fail@plt+0x34150>
   4508c:	bl	10f90 <dcgettext@plt>
   45090:	mov	r7, r0
   45094:	b	43030 <__assert_fail@plt+0x31e24>
   45098:	ldr	r0, [pc, #704]	; 45360 <__assert_fail@plt+0x34154>
   4509c:	bl	10f24 <printf@plt>
   450a0:	b	42e80 <__assert_fail@plt+0x31c74>
   450a4:	ldr	r0, [pc, #696]	; 45364 <__assert_fail@plt+0x34158>
   450a8:	bl	10f24 <printf@plt>
   450ac:	b	42e80 <__assert_fail@plt+0x31c74>
   450b0:	ldr	r0, [pc, #688]	; 45368 <__assert_fail@plt+0x3415c>
   450b4:	bl	10f24 <printf@plt>
   450b8:	b	42e80 <__assert_fail@plt+0x31c74>
   450bc:	ldr	r0, [pc, #680]	; 4536c <__assert_fail@plt+0x34160>
   450c0:	bl	10f24 <printf@plt>
   450c4:	b	42e80 <__assert_fail@plt+0x31c74>
   450c8:	ldr	r0, [pc, #672]	; 45370 <__assert_fail@plt+0x34164>
   450cc:	bl	10f24 <printf@plt>
   450d0:	b	42e80 <__assert_fail@plt+0x31c74>
   450d4:	ldr	r0, [pc, #664]	; 45374 <__assert_fail@plt+0x34168>
   450d8:	bl	10f24 <printf@plt>
   450dc:	b	42e80 <__assert_fail@plt+0x31c74>
   450e0:	ldr	r0, [pc, #656]	; 45378 <__assert_fail@plt+0x3416c>
   450e4:	bl	10f24 <printf@plt>
   450e8:	b	42e80 <__assert_fail@plt+0x31c74>
   450ec:	subs	r1, r2, #32768	; 0x8000
   450f0:	sbc	r3, r3, #0
   450f4:	str	r3, [sp, #140]	; 0x8c
   450f8:	str	r1, [sp, #136]	; 0x88
   450fc:	ldrd	r0, [sp, #136]	; 0x88
   45100:	mov	r3, #0
   45104:	ldr	r2, [pc, #624]	; 4537c <__assert_fail@plt+0x34170>
   45108:	cmp	r1, r3
   4510c:	cmpeq	r0, r2
   45110:	mov	r2, #5
   45114:	ldrls	r1, [pc, #612]	; 45380 <__assert_fail@plt+0x34174>
   45118:	ldrhi	r1, [pc, #612]	; 45384 <__assert_fail@plt+0x34178>
   4511c:	mov	r0, #0
   45120:	bl	10f90 <dcgettext@plt>
   45124:	mov	r3, #0
   45128:	str	r3, [sp]
   4512c:	ldrd	r2, [sp, #160]	; 0xa0
   45130:	mov	r4, r0
   45134:	ldr	r0, [pc, #520]	; 45344 <__assert_fail@plt+0x34138>
   45138:	bl	3c744 <__assert_fail@plt+0x2b538>
   4513c:	mov	r1, r0
   45140:	mov	r0, r4
   45144:	bl	10f24 <printf@plt>
   45148:	b	42e80 <__assert_fail@plt+0x31c74>
   4514c:	ldr	r0, [pc, #564]	; 45388 <__assert_fail@plt+0x3417c>
   45150:	bl	10f24 <printf@plt>
   45154:	b	42e80 <__assert_fail@plt+0x31c74>
   45158:	ldr	r0, [pc, #556]	; 4538c <__assert_fail@plt+0x34180>
   4515c:	bl	10f24 <printf@plt>
   45160:	b	42e80 <__assert_fail@plt+0x31c74>
   45164:	ldr	r0, [pc, #548]	; 45390 <__assert_fail@plt+0x34184>
   45168:	bl	10f24 <printf@plt>
   4516c:	b	42e80 <__assert_fail@plt+0x31c74>
   45170:	ldr	r0, [pc, #540]	; 45394 <__assert_fail@plt+0x34188>
   45174:	bl	10f24 <printf@plt>
   45178:	b	42e80 <__assert_fail@plt+0x31c74>
   4517c:	ldr	r0, [pc, #532]	; 45398 <__assert_fail@plt+0x3418c>
   45180:	bl	10f24 <printf@plt>
   45184:	b	42e80 <__assert_fail@plt+0x31c74>
   45188:	ldr	r0, [pc, #524]	; 4539c <__assert_fail@plt+0x34190>
   4518c:	bl	10f24 <printf@plt>
   45190:	b	42e80 <__assert_fail@plt+0x31c74>
   45194:	ldr	r0, [pc, #516]	; 453a0 <__assert_fail@plt+0x34194>
   45198:	bl	10f24 <printf@plt>
   4519c:	b	42e80 <__assert_fail@plt+0x31c74>
   451a0:	ldr	r0, [pc, #508]	; 453a4 <__assert_fail@plt+0x34198>
   451a4:	bl	10f24 <printf@plt>
   451a8:	b	42e80 <__assert_fail@plt+0x31c74>
   451ac:	ldr	r0, [pc, #500]	; 453a8 <__assert_fail@plt+0x3419c>
   451b0:	bl	10f24 <printf@plt>
   451b4:	b	42e80 <__assert_fail@plt+0x31c74>
   451b8:	ldr	r0, [pc, #492]	; 453ac <__assert_fail@plt+0x341a0>
   451bc:	bl	10f24 <printf@plt>
   451c0:	b	42e80 <__assert_fail@plt+0x31c74>
   451c4:	ldr	r0, [pc, #484]	; 453b0 <__assert_fail@plt+0x341a4>
   451c8:	bl	10f24 <printf@plt>
   451cc:	b	42e80 <__assert_fail@plt+0x31c74>
   451d0:	ldr	r0, [pc, #476]	; 453b4 <__assert_fail@plt+0x341a8>
   451d4:	bl	10f24 <printf@plt>
   451d8:	b	42e80 <__assert_fail@plt+0x31c74>
   451dc:	ldr	r0, [pc, #468]	; 453b8 <__assert_fail@plt+0x341ac>
   451e0:	bl	10f24 <printf@plt>
   451e4:	b	42e80 <__assert_fail@plt+0x31c74>
   451e8:	ldr	r0, [pc, #460]	; 453bc <__assert_fail@plt+0x341b0>
   451ec:	bl	10f24 <printf@plt>
   451f0:	b	42e80 <__assert_fail@plt+0x31c74>
   451f4:	ldr	r0, [pc, #452]	; 453c0 <__assert_fail@plt+0x341b4>
   451f8:	bl	10f24 <printf@plt>
   451fc:	b	42e80 <__assert_fail@plt+0x31c74>
   45200:	ldr	r0, [pc, #444]	; 453c4 <__assert_fail@plt+0x341b8>
   45204:	bl	10f24 <printf@plt>
   45208:	b	42e80 <__assert_fail@plt+0x31c74>
   4520c:	ldr	r0, [pc, #436]	; 453c8 <__assert_fail@plt+0x341bc>
   45210:	bl	10f24 <printf@plt>
   45214:	b	42e80 <__assert_fail@plt+0x31c74>
   45218:	ldr	r0, [pc, #428]	; 453cc <__assert_fail@plt+0x341c0>
   4521c:	bl	10f24 <printf@plt>
   45220:	b	42e80 <__assert_fail@plt+0x31c74>
   45224:	ldr	r0, [pc, #420]	; 453d0 <__assert_fail@plt+0x341c4>
   45228:	bl	10f24 <printf@plt>
   4522c:	b	42e80 <__assert_fail@plt+0x31c74>
   45230:	ldr	r0, [pc, #412]	; 453d4 <__assert_fail@plt+0x341c8>
   45234:	bl	10f24 <printf@plt>
   45238:	b	42e80 <__assert_fail@plt+0x31c74>
   4523c:	ldr	r0, [pc, #404]	; 453d8 <__assert_fail@plt+0x341cc>
   45240:	bl	10f24 <printf@plt>
   45244:	b	42e80 <__assert_fail@plt+0x31c74>
   45248:	ldr	r0, [pc, #396]	; 453dc <__assert_fail@plt+0x341d0>
   4524c:	bl	10f24 <printf@plt>
   45250:	b	42e80 <__assert_fail@plt+0x31c74>
   45254:	ldr	r0, [pc, #388]	; 453e0 <__assert_fail@plt+0x341d4>
   45258:	bl	10f24 <printf@plt>
   4525c:	b	42e80 <__assert_fail@plt+0x31c74>
   45260:	mov	r2, #5
   45264:	ldr	r1, [pc, #376]	; 453e4 <__assert_fail@plt+0x341d8>
   45268:	mov	r0, #0
   4526c:	bl	10f90 <dcgettext@plt>
   45270:	mov	r7, r0
   45274:	b	43030 <__assert_fail@plt+0x31e24>
   45278:	mov	r2, #5
   4527c:	ldr	r1, [pc, #356]	; 453e8 <__assert_fail@plt+0x341dc>
   45280:	bl	10f90 <dcgettext@plt>
   45284:	mov	r7, r0
   45288:	b	43030 <__assert_fail@plt+0x31e24>
   4528c:	mov	r0, r5
   45290:	bl	3e160 <__assert_fail@plt+0x2cf54>
   45294:	ldr	r3, [pc, #80]	; 452ec <__assert_fail@plt+0x340e0>
   45298:	mov	r0, r6
   4529c:	ldr	r3, [r3]
   452a0:	blx	r3
   452a4:	strd	r0, [sp, #160]	; 0xa0
   452a8:	b	42dcc <__assert_fail@plt+0x31bc0>
   452ac:	ldr	r3, [pc, #312]	; 453ec <__assert_fail@plt+0x341e0>
   452b0:	ldr	r2, [pc, #312]	; 453f0 <__assert_fail@plt+0x341e4>
   452b4:	ldr	r1, [pc, #312]	; 453f4 <__assert_fail@plt+0x341e8>
   452b8:	ldr	r0, [pc, #312]	; 453f8 <__assert_fail@plt+0x341ec>
   452bc:	bl	1120c <__assert_fail@plt>
   452c0:	mov	r0, r3
   452c4:	bl	3e160 <__assert_fail@plt+0x2cf54>
   452c8:	andeq	pc, r7, r8, lsl #27
   452cc:			; <UNDEFINED> instruction: 0x0007e5b0
   452d0:	strdeq	lr, [r7], -ip
   452d4:	andeq	pc, r7, r4, asr sp	; <UNPREDICTABLE>
   452d8:	ldrdeq	pc, [r7], -r0
   452dc:	andeq	r0, r8, r4, rrx
   452e0:	andeq	r2, r6, r0, asr #31
   452e4:	andeq	r0, r8, r0, ror #14
   452e8:	andeq	r0, r8, r8, asr r7
   452ec:	andeq	lr, r9, ip, asr sp
   452f0:	andeq	r0, r8, r8, asr #14
   452f4:	andeq	r0, r8, r4, lsr r7
   452f8:	andeq	r0, r8, r0, lsr #11
   452fc:	andeq	r0, r8, ip, lsl #11
   45300:	andeq	r0, r8, r8, asr r5
   45304:	andeq	r0, r8, r4, asr #10
   45308:	andeq	r0, r8, ip, lsl #10
   4530c:	andeq	r0, r8, r0, lsr #10
   45310:	strdeq	r0, [r8], -r4
   45314:	ldrdeq	ip, [r9], -r0
   45318:			; <UNDEFINED> instruction: 0x000806b4
   4531c:	ldrdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   45320:	andeq	r0, r8, r8, ror #9
   45324:	andeq	r2, r0, r1, lsr r1
   45328:	andeq	r0, r8, r8, lsl #12
   4532c:			; <UNDEFINED> instruction: 0x0007ffb8
   45330:	andeq	r0, r8, r4, lsr #14
   45334:	andeq	fp, r6, ip, ror #2
   45338:	andeq	r0, r8, r0, lsr #32
   4533c:	strdeq	r7, [r6], -r4
   45340:	andeq	pc, r7, ip, ror pc	; <UNPREDICTABLE>
   45344:	andeq	r9, r6, r0, lsr #15
   45348:	andeq	pc, r7, ip, lsr #26
   4534c:			; <UNDEFINED> instruction: 0x0007feb8
   45350:	ldrdeq	pc, [r7], -r8
   45354:	andeq	pc, r7, r0, ror #30
   45358:	andeq	pc, r7, r4, lsl #30
   4535c:	andeq	lr, r7, r8, ror #14
   45360:	andeq	r0, r8, ip, lsl #3
   45364:	muleq	r8, r8, r1
   45368:			; <UNDEFINED> instruction: 0x000802bc
   4536c:	muleq	r8, ip, r2
   45370:	andeq	r0, r8, ip, lsr #5
   45374:			; <UNDEFINED> instruction: 0x000801b8
   45378:	andeq	r0, r8, r0, ror #3
   4537c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   45380:	ldrdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   45384:	strdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   45388:	andeq	r0, r8, r0, lsr #3
   4538c:	andeq	r0, r8, r8, asr #3
   45390:	ldrdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   45394:	andeq	r0, r8, ip, lsl #5
   45398:	andeq	r0, r8, ip, ror r2
   4539c:	andeq	r0, r8, ip, ror #4
   453a0:	andeq	r0, r8, r4, ror r2
   453a4:	andeq	r0, r8, r8, lsl #4
   453a8:	andeq	r0, r8, ip, asr r1
   453ac:	andeq	r0, r8, r4, asr #2
   453b0:	andeq	r0, r8, r0, asr r1
   453b4:	andeq	r0, r8, ip, ror r1
   453b8:	andeq	r0, r8, r8, lsr r2
   453bc:	andeq	r0, r8, r4, lsr r1
   453c0:	andeq	r0, r8, r4, lsr #2
   453c4:	andeq	r0, r8, ip, lsr r1
   453c8:	andeq	r0, r8, r4, lsr #4
   453cc:	andeq	r0, r8, ip, lsl #4
   453d0:	andeq	r0, r8, r8, lsl r2
   453d4:	andeq	r0, r8, r4, ror #4
   453d8:	andeq	r0, r8, r4, asr r2
   453dc:	andeq	r0, r8, r4, asr #4
   453e0:	andeq	r0, r8, ip, asr #4
   453e4:	andeq	lr, r7, ip, ror r7
   453e8:	strdeq	lr, [r7], -r4
   453ec:	strdeq	sp, [r7], -ip
   453f0:	andeq	r0, r0, lr, lsl #17
   453f4:	andeq	lr, r7, r8, lsl #20
   453f8:	strdeq	pc, [r7], -ip
   453fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   45400:	subs	ip, r3, #0
   45404:	sub	sp, sp, #284	; 0x11c
   45408:	mov	r3, r0
   4540c:	str	r0, [sp, #112]	; 0x70
   45410:	ldr	r3, [r3, #32]
   45414:	ldr	r0, [r0, #16]
   45418:	str	ip, [sp, #136]	; 0x88
   4541c:	str	r0, [sp, #92]	; 0x5c
   45420:	str	r2, [sp, #176]	; 0xb0
   45424:	add	sl, r0, r3
   45428:	mov	r7, r1
   4542c:	bne	46314 <__assert_fail@plt+0x35108>
   45430:	ldr	r2, [pc, #4036]	; 463fc <__assert_fail@plt+0x351f0>
   45434:	ldr	r3, [pc, #4036]	; 46400 <__assert_fail@plt+0x351f4>
   45438:	ldr	r2, [r2]
   4543c:	ldr	r3, [r3]
   45440:	orrs	r3, r2, r3
   45444:	streq	ip, [sp, #196]	; 0xc4
   45448:	bne	459b8 <__assert_fail@plt+0x347ac>
   4544c:	mov	r1, r7
   45450:	mov	r0, #10
   45454:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   45458:	mov	r1, r7
   4545c:	mov	r0, #11
   45460:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   45464:	mov	r1, r7
   45468:	mov	r0, #34	; 0x22
   4546c:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   45470:	mov	r1, r7
   45474:	mov	r0, #35	; 0x23
   45478:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   4547c:	mov	r1, r7
   45480:	mov	r0, #36	; 0x24
   45484:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   45488:	mov	r1, r7
   4548c:	mov	r0, #37	; 0x25
   45490:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   45494:	ldr	r4, [sp, #176]	; 0xb0
   45498:	mov	r1, r7
   4549c:	mov	r0, r4
   454a0:	lsl	r5, r4, #3
   454a4:	str	r5, [sp, #192]	; 0xc0
   454a8:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   454ac:	ldr	r2, [pc, #3920]	; 46404 <__assert_fail@plt+0x351f8>
   454b0:	add	r3, r5, r4
   454b4:	str	r2, [sp, #180]	; 0xb4
   454b8:	add	r3, r2, r3, lsl #3
   454bc:	ldr	r3, [r3, #16]
   454c0:	cmp	r3, #0
   454c4:	beq	46894 <__assert_fail@plt+0x35688>
   454c8:	ldr	r3, [pc, #3896]	; 46408 <__assert_fail@plt+0x351fc>
   454cc:	str	r3, [sp, #140]	; 0x8c
   454d0:	ldr	r3, [r3]
   454d4:	cmp	r3, #0
   454d8:	beq	46998 <__assert_fail@plt+0x3578c>
   454dc:	ldr	r3, [sp, #92]	; 0x5c
   454e0:	cmp	r3, sl
   454e4:	bcs	45958 <__assert_fail@plt+0x3474c>
   454e8:	ldr	r3, [pc, #3868]	; 4640c <__assert_fail@plt+0x35200>
   454ec:	str	r3, [sp, #104]	; 0x68
   454f0:	ldr	r9, [sp, #92]	; 0x5c
   454f4:	mov	r6, sl
   454f8:	mov	r3, #0
   454fc:	str	r3, [sp, #116]	; 0x74
   45500:	str	r9, [sp, #56]	; 0x38
   45504:	ldr	r1, [sp, #56]	; 0x38
   45508:	mov	r2, #0
   4550c:	mov	r3, #0
   45510:	add	r5, r1, #4
   45514:	cmp	r5, r6
   45518:	strd	r2, [sp, #200]	; 0xc8
   4551c:	strd	r2, [sp, #208]	; 0xd0
   45520:	bcc	45b14 <__assert_fail@plt+0x34908>
   45524:	sub	r1, r6, r1
   45528:	sub	r3, r1, #1
   4552c:	cmp	r3, #7
   45530:	bls	45b18 <__assert_fail@plt+0x3490c>
   45534:	add	r4, r5, #2
   45538:	mov	r8, #4
   4553c:	cmp	r4, r6
   45540:	str	r8, [sp, #88]	; 0x58
   45544:	str	r8, [sp, #128]	; 0x80
   45548:	mov	r9, #0
   4554c:	bcs	45b90 <__assert_fail@plt+0x34984>
   45550:	mov	r2, #0
   45554:	mov	r3, #0
   45558:	mov	r1, #2
   4555c:	strd	r2, [sp, #80]	; 0x50
   45560:	ldr	r3, [pc, #3936]	; 464c8 <__assert_fail@plt+0x352bc>
   45564:	mov	r0, r5
   45568:	ldr	r3, [r3]
   4556c:	blx	r3
   45570:	uxth	r3, r0
   45574:	str	r3, [sp, #76]	; 0x4c
   45578:	ldr	r3, [sp, #320]	; 0x140
   4557c:	ldr	r2, [sp, #56]	; 0x38
   45580:	cmp	r3, #0
   45584:	ldr	r3, [sp, #92]	; 0x5c
   45588:	movne	r0, #2
   4558c:	sub	r3, r2, r3
   45590:	mov	r1, r3
   45594:	mov	r2, r3
   45598:	str	r3, [sp, #120]	; 0x78
   4559c:	asr	r3, r3, #31
   455a0:	moveq	r0, #1
   455a4:	strd	r2, [sp, #64]	; 0x40
   455a8:	ldr	r3, [sp, #104]	; 0x68
   455ac:	ldrne	r1, [r3, #1528]	; 0x5f8
   455b0:	ldreq	r1, [r3, #1536]	; 0x600
   455b4:	ldrne	r7, [r3, #1524]	; 0x5f4
   455b8:	ldreq	r7, [r3, #1532]	; 0x5fc
   455bc:	cmp	r1, #0
   455c0:	beq	4688c <__assert_fail@plt+0x35680>
   455c4:	add	r0, r0, #1
   455c8:	ldrd	sl, [sp, #64]	; 0x40
   455cc:	lsl	r0, r0, #3
   455d0:	ldrd	r2, [r7, r0]
   455d4:	cmp	fp, r3
   455d8:	cmpeq	sl, r2
   455dc:	beq	45610 <__assert_fail@plt+0x34404>
   455e0:	ldr	ip, [sp, #56]	; 0x38
   455e4:	ldrd	sl, [sp, #64]	; 0x40
   455e8:	b	455fc <__assert_fail@plt+0x343f0>
   455ec:	ldrd	r2, [r7, r0]
   455f0:	cmp	fp, r3
   455f4:	cmpeq	sl, r2
   455f8:	beq	45ba8 <__assert_fail@plt+0x3499c>
   455fc:	subs	r1, r1, #1
   45600:	add	r7, r7, #104	; 0x68
   45604:	bne	455ec <__assert_fail@plt+0x343e0>
   45608:	mov	r7, r1
   4560c:	str	ip, [sp, #56]	; 0x38
   45610:	ldr	r3, [sp, #76]	; 0x4c
   45614:	cmp	r3, #4
   45618:	bls	45aa4 <__assert_fail@plt+0x34898>
   4561c:	add	sl, r5, #3
   45620:	cmp	sl, r6
   45624:	bcc	45f40 <__assert_fail@plt+0x34d34>
   45628:	cmp	r6, r4
   4562c:	bls	45640 <__assert_fail@plt+0x34434>
   45630:	sub	r1, r6, r4
   45634:	sub	r3, r1, #1
   45638:	cmp	r3, #7
   4563c:	bls	46b10 <__assert_fail@plt+0x35904>
   45640:	add	r4, r5, #4
   45644:	mov	r3, #0
   45648:	cmp	r6, r4
   4564c:	str	r3, [sp, #320]	; 0x140
   45650:	str	r3, [sp, #152]	; 0x98
   45654:	bls	45f84 <__assert_fail@plt+0x34d78>
   45658:	mov	r1, #1
   4565c:	ldr	r3, [pc, #3684]	; 464c8 <__assert_fail@plt+0x352bc>
   45660:	mov	r0, sl
   45664:	ldr	r3, [r3]
   45668:	blx	r3
   4566c:	uxtb	r3, r0
   45670:	str	r3, [sp, #108]	; 0x6c
   45674:	ldr	r3, [sp, #88]	; 0x58
   45678:	add	sl, r4, r3
   4567c:	cmp	sl, r6
   45680:	bcc	45ac4 <__assert_fail@plt+0x348b8>
   45684:	cmp	r4, r6
   45688:	bcs	4569c <__assert_fail@plt+0x34490>
   4568c:	sub	r1, r6, r4
   45690:	sub	r3, r1, #1
   45694:	cmp	r3, #7
   45698:	bls	45ac8 <__assert_fail@plt+0x348bc>
   4569c:	mov	r2, #0
   456a0:	mov	r3, #0
   456a4:	cmp	r7, #0
   456a8:	strd	r2, [sp, #144]	; 0x90
   456ac:	beq	45ae4 <__assert_fail@plt+0x348d8>
   456b0:	ldr	r3, [r7, #32]
   456b4:	str	r3, [sp, #160]	; 0xa0
   456b8:	ldr	r3, [r7, #36]	; 0x24
   456bc:	str	r3, [sp, #164]	; 0xa4
   456c0:	ldr	r3, [r7, #84]	; 0x54
   456c4:	str	r3, [sp, #156]	; 0x9c
   456c8:	ldr	r3, [sp, #76]	; 0x4c
   456cc:	cmp	r3, #4
   456d0:	bhi	45a88 <__assert_fail@plt+0x3487c>
   456d4:	add	r5, sl, #1
   456d8:	cmp	r5, r6
   456dc:	bcc	45a68 <__assert_fail@plt+0x3485c>
   456e0:	cmp	r6, sl
   456e4:	bls	456f8 <__assert_fail@plt+0x344ec>
   456e8:	sub	r1, r6, sl
   456ec:	sub	r3, r1, #1
   456f0:	cmp	r3, #7
   456f4:	bls	45a6c <__assert_fail@plt+0x34860>
   456f8:	mov	r4, #0
   456fc:	mov	r2, #5
   45700:	ldr	r1, [pc, #3336]	; 46410 <__assert_fail@plt+0x35204>
   45704:	mov	r0, #0
   45708:	bl	10f90 <dcgettext@plt>
   4570c:	ldr	fp, [sp, #88]	; 0x58
   45710:	mov	r1, r4
   45714:	mov	r2, fp
   45718:	mov	sl, r5
   4571c:	bl	54dd0 <warn@@Base>
   45720:	uxtb	r3, fp
   45724:	str	r3, [sp, #108]	; 0x6c
   45728:	ldr	r3, [sp, #320]	; 0x140
   4572c:	cmp	r3, #0
   45730:	beq	45778 <__assert_fail@plt+0x3456c>
   45734:	add	r4, sl, #8
   45738:	cmp	r4, r6
   4573c:	bls	462dc <__assert_fail@plt+0x350d0>
   45740:	mov	r2, #0
   45744:	mov	r3, #0
   45748:	strd	r2, [sp, #200]	; 0xc8
   4574c:	strd	r2, [sp, #208]	; 0xd0
   45750:	ldr	r3, [sp, #88]	; 0x58
   45754:	add	sl, r4, r3
   45758:	cmp	sl, r6
   4575c:	bcc	45fa0 <__assert_fail@plt+0x34d94>
   45760:	cmp	r4, r6
   45764:	bcs	45778 <__assert_fail@plt+0x3456c>
   45768:	sub	r1, r6, r4
   4576c:	sub	r3, r1, #1
   45770:	cmp	r3, #7
   45774:	bls	45fa4 <__assert_fail@plt+0x34d98>
   45778:	mov	r2, #0
   4577c:	mov	r3, #0
   45780:	strd	r2, [sp, #168]	; 0xa8
   45784:	ldrd	r0, [sp, #80]	; 0x50
   45788:	ldr	r2, [sp, #128]	; 0x80
   4578c:	adds	r3, r0, r2
   45790:	adc	r9, r1, r9
   45794:	ldrd	r0, [sp, #64]	; 0x40
   45798:	ldr	r2, [sp, #140]	; 0x8c
   4579c:	adds	r3, r3, r0
   457a0:	str	r3, [sp, #96]	; 0x60
   457a4:	adc	r3, r9, r1
   457a8:	str	r3, [sp, #100]	; 0x64
   457ac:	ldrd	r0, [sp, #96]	; 0x60
   457b0:	mov	r3, #0
   457b4:	ldr	r5, [r2]
   457b8:	cmp	r3, r1
   457bc:	ldr	r3, [sp, #120]	; 0x78
   457c0:	cmpeq	r5, r0
   457c4:	add	r4, r8, r3
   457c8:	bhi	45e00 <__assert_fail@plt+0x34bf4>
   457cc:	ldr	r3, [sp, #136]	; 0x88
   457d0:	cmp	r3, #0
   457d4:	bne	45dec <__assert_fail@plt+0x34be0>
   457d8:	ldr	r2, [pc, #3100]	; 463fc <__assert_fail@plt+0x351f0>
   457dc:	ldr	r3, [pc, #3100]	; 46400 <__assert_fail@plt+0x351f4>
   457e0:	ldr	r2, [r2]
   457e4:	ldr	r3, [r3]
   457e8:	orrs	r3, r2, r3
   457ec:	beq	45bb0 <__assert_fail@plt+0x349a4>
   457f0:	ldr	r3, [sp, #104]	; 0x68
   457f4:	ldr	r3, [r3, #1488]	; 0x5d0
   457f8:	cmp	r3, #0
   457fc:	bne	45bb0 <__assert_fail@plt+0x349a4>
   45800:	ldr	r3, [sp, #320]	; 0x140
   45804:	cmp	r3, #0
   45808:	bne	45880 <__assert_fail@plt+0x34674>
   4580c:	ldr	r1, [sp, #116]	; 0x74
   45810:	ldr	r2, [sp, #104]	; 0x68
   45814:	add	r3, r1, r1, lsl #2
   45818:	ldr	r2, [r2, #1440]	; 0x5a0
   4581c:	add	r3, r1, r3, lsl #1
   45820:	ldrd	r0, [sp, #64]	; 0x40
   45824:	add	ip, r2, r3, lsl #3
   45828:	strd	r0, [ip, #16]
   4582c:	ldr	r1, [sp, #108]	; 0x6c
   45830:	mov	r0, #0
   45834:	str	r1, [r2, r3, lsl #3]
   45838:	ldr	r1, [sp, #88]	; 0x58
   4583c:	mvn	r2, #0
   45840:	str	r1, [ip, #4]
   45844:	ldr	r1, [sp, #76]	; 0x4c
   45848:	mov	r3, #0
   4584c:	str	r1, [ip, #8]
   45850:	ldr	r1, [sp, #320]	; 0x140
   45854:	strd	r2, [ip, #32]
   45858:	str	r1, [ip, #48]	; 0x30
   4585c:	str	r1, [ip, #56]	; 0x38
   45860:	str	r1, [ip, #64]	; 0x40
   45864:	str	r1, [ip, #60]	; 0x3c
   45868:	str	r1, [ip, #72]	; 0x48
   4586c:	str	r1, [ip, #80]	; 0x50
   45870:	str	r1, [ip, #76]	; 0x4c
   45874:	mov	r1, #0
   45878:	strd	r2, [ip, #40]	; 0x28
   4587c:	strd	r0, [ip, #24]
   45880:	ldr	r3, [sp, #136]	; 0x88
   45884:	cmp	r3, #0
   45888:	beq	45bb0 <__assert_fail@plt+0x349a4>
   4588c:	ldrd	r2, [sp, #80]	; 0x50
   45890:	mov	r5, #0
   45894:	adds	r0, r4, r2
   45898:	adcs	r1, r5, r3
   4589c:	mov	r2, #0
   458a0:	mov	r3, #0
   458a4:	movcs	r2, #1
   458a8:	movcs	r3, #0
   458ac:	orrs	r3, r2, r3
   458b0:	bne	469ac <__assert_fail@plt+0x357a0>
   458b4:	ldr	r3, [sp, #112]	; 0x70
   458b8:	ldrd	r2, [r3, #32]
   458bc:	cmp	r1, r3
   458c0:	cmpeq	r0, r2
   458c4:	bhi	469ac <__assert_fail@plt+0x357a0>
   458c8:	ldr	r3, [sp, #76]	; 0x4c
   458cc:	ldr	r2, [sp, #80]	; 0x50
   458d0:	sub	r3, r3, #2
   458d4:	cmp	r3, #3
   458d8:	ldr	r3, [sp, #56]	; 0x38
   458dc:	add	r2, r8, r2
   458e0:	add	r3, r3, r2
   458e4:	str	r3, [sp, #56]	; 0x38
   458e8:	bhi	463c0 <__assert_fail@plt+0x351b4>
   458ec:	ldr	r5, [sp, #152]	; 0x98
   458f0:	sub	r3, r5, #1
   458f4:	cmp	r3, #1
   458f8:	bls	45fbc <__assert_fail@plt+0x34db0>
   458fc:	mov	r2, #5
   45900:	ldr	r1, [pc, #2828]	; 46414 <__assert_fail@plt+0x35208>
   45904:	mov	r0, #0
   45908:	bl	10f90 <dcgettext@plt>
   4590c:	mov	r1, #0
   45910:	ldrd	r2, [sp, #64]	; 0x40
   45914:	str	r1, [sp]
   45918:	mov	r4, r0
   4591c:	ldr	r0, [pc, #2928]	; 46494 <__assert_fail@plt+0x35288>
   45920:	bl	3c744 <__assert_fail@plt+0x2b538>
   45924:	mov	r2, r5
   45928:	mov	r1, r0
   4592c:	mov	r0, r4
   45930:	bl	54dd0 <warn@@Base>
   45934:	ldr	r3, [sp, #56]	; 0x38
   45938:	cmp	r3, r6
   4593c:	ldr	r3, [sp, #116]	; 0x74
   45940:	add	r3, r3, #1
   45944:	str	r3, [sp, #116]	; 0x74
   45948:	bcc	45504 <__assert_fail@plt+0x342f8>
   4594c:	ldr	r3, [sp, #136]	; 0x88
   45950:	cmp	r3, #0
   45954:	bne	469fc <__assert_fail@plt+0x357f0>
   45958:	ldr	r2, [pc, #2716]	; 463fc <__assert_fail@plt+0x351f0>
   4595c:	ldr	r3, [pc, #2716]	; 46400 <__assert_fail@plt+0x351f4>
   45960:	ldr	r2, [r2]
   45964:	ldr	r3, [r3]
   45968:	orrs	r3, r2, r3
   4596c:	beq	46840 <__assert_fail@plt+0x35634>
   45970:	ldr	r3, [pc, #2708]	; 4640c <__assert_fail@plt+0x35200>
   45974:	ldr	r2, [sp, #320]	; 0x140
   45978:	str	r3, [sp, #104]	; 0x68
   4597c:	ldr	r3, [r3, #1488]	; 0x5d0
   45980:	orrs	r3, r2, r3
   45984:	bne	46840 <__assert_fail@plt+0x35634>
   45988:	ldr	r2, [sp, #104]	; 0x68
   4598c:	ldr	r1, [sp, #196]	; 0xc4
   45990:	ldr	r3, [r2, #1520]	; 0x5f0
   45994:	cmp	r3, r1
   45998:	movcs	r3, r1
   4599c:	ldr	r1, [sp, #136]	; 0x88
   459a0:	str	r3, [r2, #1488]	; 0x5d0
   459a4:	cmp	r1, #0
   459a8:	beq	46840 <__assert_fail@plt+0x35634>
   459ac:	mov	r0, #1
   459b0:	add	sp, sp, #284	; 0x11c
   459b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   459b8:	ldr	r3, [pc, #2636]	; 4640c <__assert_fail@plt+0x35200>
   459bc:	ldr	r2, [sp, #320]	; 0x140
   459c0:	str	r3, [sp, #104]	; 0x68
   459c4:	ldr	r3, [r3, #1488]	; 0x5d0
   459c8:	orrs	r3, r2, r3
   459cc:	bne	468c8 <__assert_fail@plt+0x356bc>
   459d0:	ldr	r3, [sp, #92]	; 0x5c
   459d4:	cmp	r3, sl
   459d8:	bcs	46a5c <__assert_fail@plt+0x35850>
   459dc:	ldr	fp, [sp, #92]	; 0x5c
   459e0:	mov	r3, #0
   459e4:	ldr	r9, [pc, #2780]	; 464c8 <__assert_fail@plt+0x352bc>
   459e8:	str	r7, [sp, #64]	; 0x40
   459ec:	mov	r6, fp
   459f0:	mov	r8, sl
   459f4:	mov	r7, r3
   459f8:	add	sl, r6, #4
   459fc:	cmp	sl, r8
   45a00:	bcc	45e18 <__assert_fail@plt+0x34c0c>
   45a04:	sub	r1, r8, r6
   45a08:	sub	r0, r1, #1
   45a0c:	cmp	r0, #7
   45a10:	bls	45e1c <__assert_fail@plt+0x34c10>
   45a14:	mov	r4, #0
   45a18:	mov	r5, #0
   45a1c:	ldr	r1, [pc, #2548]	; 46418 <__assert_fail@plt+0x3520c>
   45a20:	mov	r2, #5
   45a24:	mov	r0, #0
   45a28:	mov	r8, r0
   45a2c:	bl	10f90 <dcgettext@plt>
   45a30:	mov	r2, r4
   45a34:	mov	r3, r5
   45a38:	str	r8, [sp]
   45a3c:	mov	r6, r0
   45a40:	ldr	r0, [pc, #2636]	; 46494 <__assert_fail@plt+0x35288>
   45a44:	bl	3c744 <__assert_fail@plt+0x2b538>
   45a48:	ldr	r3, [sp, #112]	; 0x70
   45a4c:	ldr	r2, [r3, #8]
   45a50:	mov	r1, r0
   45a54:	mov	r0, r6
   45a58:	bl	54dd0 <warn@@Base>
   45a5c:	mov	r0, r8
   45a60:	add	sp, sp, #284	; 0x11c
   45a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   45a68:	mov	r1, #1
   45a6c:	ldr	r3, [pc, #2644]	; 464c8 <__assert_fail@plt+0x352bc>
   45a70:	mov	r0, sl
   45a74:	mov	sl, r5
   45a78:	ldr	r3, [r3]
   45a7c:	blx	r3
   45a80:	uxtb	r3, r0
   45a84:	str	r3, [sp, #108]	; 0x6c
   45a88:	ldr	r3, [sp, #108]	; 0x6c
   45a8c:	sub	r3, r3, #2
   45a90:	cmp	r3, #6
   45a94:	movhi	r5, sl
   45a98:	ldrhi	r4, [sp, #108]	; 0x6c
   45a9c:	bls	45728 <__assert_fail@plt+0x3451c>
   45aa0:	b	456fc <__assert_fail@plt+0x344f0>
   45aa4:	mov	r3, #1
   45aa8:	str	r3, [sp, #152]	; 0x98
   45aac:	mov	r3, #255	; 0xff
   45ab0:	str	r3, [sp, #108]	; 0x6c
   45ab4:	ldr	r3, [sp, #88]	; 0x58
   45ab8:	add	sl, r4, r3
   45abc:	cmp	sl, r6
   45ac0:	bcs	45684 <__assert_fail@plt+0x34478>
   45ac4:	ldr	r1, [sp, #88]	; 0x58
   45ac8:	ldr	r3, [pc, #2552]	; 464c8 <__assert_fail@plt+0x352bc>
   45acc:	mov	r0, r4
   45ad0:	ldr	r3, [r3]
   45ad4:	blx	r3
   45ad8:	cmp	r7, #0
   45adc:	strd	r0, [sp, #144]	; 0x90
   45ae0:	bne	456b0 <__assert_fail@plt+0x344a4>
   45ae4:	ldr	r2, [sp, #176]	; 0xb0
   45ae8:	ldr	r3, [sp, #192]	; 0xc0
   45aec:	add	r3, r3, r2
   45af0:	mov	r2, #0
   45af4:	str	r2, [sp, #160]	; 0xa0
   45af8:	ldr	r2, [sp, #180]	; 0xb4
   45afc:	add	r3, r2, r3, lsl #3
   45b00:	mov	r2, #0
   45b04:	ldr	r3, [r3, #32]
   45b08:	str	r2, [sp, #164]	; 0xa4
   45b0c:	str	r3, [sp, #156]	; 0x9c
   45b10:	b	456c8 <__assert_fail@plt+0x344bc>
   45b14:	mov	r1, #4
   45b18:	ldr	r3, [pc, #2472]	; 464c8 <__assert_fail@plt+0x352bc>
   45b1c:	ldr	r4, [sp, #56]	; 0x38
   45b20:	ldr	r3, [r3]
   45b24:	mov	r0, r4
   45b28:	blx	r3
   45b2c:	mov	r3, #0
   45b30:	mvn	r2, #0
   45b34:	cmp	r1, r3
   45b38:	cmpeq	r0, r2
   45b3c:	strd	r0, [sp, #80]	; 0x50
   45b40:	bne	462f0 <__assert_fail@plt+0x350e4>
   45b44:	add	r2, r4, #12
   45b48:	cmp	r2, r6
   45b4c:	bcc	46280 <__assert_fail@plt+0x35074>
   45b50:	cmp	r5, r6
   45b54:	bcs	45b68 <__assert_fail@plt+0x3495c>
   45b58:	sub	r1, r6, r5
   45b5c:	sub	r3, r1, #1
   45b60:	cmp	r3, #7
   45b64:	bls	46284 <__assert_fail@plt+0x35078>
   45b68:	mov	r5, r2
   45b6c:	mov	r3, #12
   45b70:	add	r4, r5, #2
   45b74:	str	r3, [sp, #128]	; 0x80
   45b78:	mov	r8, r3
   45b7c:	cmp	r4, r6
   45b80:	mov	r3, #8
   45b84:	mov	r9, #0
   45b88:	str	r3, [sp, #88]	; 0x58
   45b8c:	bcc	45550 <__assert_fail@plt+0x34344>
   45b90:	mov	r2, #0
   45b94:	mov	r3, #0
   45b98:	strd	r2, [sp, #80]	; 0x50
   45b9c:	mov	r3, #0
   45ba0:	str	r3, [sp, #76]	; 0x4c
   45ba4:	b	45578 <__assert_fail@plt+0x3436c>
   45ba8:	str	ip, [sp, #56]	; 0x38
   45bac:	b	45610 <__assert_fail@plt+0x34404>
   45bb0:	cmp	r5, #0
   45bb4:	bne	4588c <__assert_fail@plt+0x34680>
   45bb8:	ldr	r1, [pc, #2140]	; 4641c <__assert_fail@plt+0x35210>
   45bbc:	mov	r2, #5
   45bc0:	mov	r0, r5
   45bc4:	bl	10f90 <dcgettext@plt>
   45bc8:	ldrd	r2, [sp, #64]	; 0x40
   45bcc:	str	r5, [sp]
   45bd0:	mov	r9, r0
   45bd4:	ldr	r0, [pc, #2232]	; 46494 <__assert_fail@plt+0x35288>
   45bd8:	bl	3c744 <__assert_fail@plt+0x2b538>
   45bdc:	mov	r1, r0
   45be0:	mov	r0, r9
   45be4:	bl	10f24 <printf@plt>
   45be8:	ldr	r1, [pc, #2096]	; 46420 <__assert_fail@plt+0x35214>
   45bec:	mov	r2, #5
   45bf0:	mov	r0, r5
   45bf4:	bl	10f90 <dcgettext@plt>
   45bf8:	ldrd	r2, [sp, #80]	; 0x50
   45bfc:	str	r5, [sp]
   45c00:	mov	r9, r0
   45c04:	ldr	r0, [pc, #2184]	; 46494 <__assert_fail@plt+0x35288>
   45c08:	bl	3c744 <__assert_fail@plt+0x2b538>
   45c0c:	ldr	r1, [sp, #88]	; 0x58
   45c10:	ldr	r3, [pc, #2060]	; 46424 <__assert_fail@plt+0x35218>
   45c14:	cmp	r1, #8
   45c18:	ldr	r2, [pc, #2056]	; 46428 <__assert_fail@plt+0x3521c>
   45c1c:	movne	r2, r3
   45c20:	mov	r1, r0
   45c24:	mov	r0, r9
   45c28:	bl	10f24 <printf@plt>
   45c2c:	mov	r2, #5
   45c30:	ldr	r1, [pc, #2036]	; 4642c <__assert_fail@plt+0x35220>
   45c34:	mov	r0, r5
   45c38:	bl	10f90 <dcgettext@plt>
   45c3c:	ldr	r1, [sp, #76]	; 0x4c
   45c40:	bl	10f24 <printf@plt>
   45c44:	ldr	r1, [pc, #2020]	; 46430 <__assert_fail@plt+0x35224>
   45c48:	mov	r2, #5
   45c4c:	mov	r0, r5
   45c50:	bl	10f90 <dcgettext@plt>
   45c54:	ldrd	r2, [sp, #144]	; 0x90
   45c58:	str	r5, [sp]
   45c5c:	mov	r9, r0
   45c60:	ldr	r0, [pc, #2092]	; 46494 <__assert_fail@plt+0x35288>
   45c64:	bl	3c744 <__assert_fail@plt+0x2b538>
   45c68:	mov	r1, r0
   45c6c:	mov	r0, r9
   45c70:	bl	10f24 <printf@plt>
   45c74:	mov	r2, #5
   45c78:	ldr	r1, [pc, #1972]	; 46434 <__assert_fail@plt+0x35228>
   45c7c:	mov	r0, r5
   45c80:	bl	10f90 <dcgettext@plt>
   45c84:	ldr	r1, [sp, #108]	; 0x6c
   45c88:	bl	10f24 <printf@plt>
   45c8c:	ldr	r3, [sp, #320]	; 0x140
   45c90:	cmp	r3, #0
   45c94:	bne	4692c <__assert_fail@plt+0x35720>
   45c98:	cmp	r7, #0
   45c9c:	beq	4588c <__assert_fail@plt+0x34680>
   45ca0:	mov	r2, #5
   45ca4:	ldr	r1, [pc, #1932]	; 46438 <__assert_fail@plt+0x3522c>
   45ca8:	mov	r0, #0
   45cac:	bl	10f90 <dcgettext@plt>
   45cb0:	bl	10f24 <printf@plt>
   45cb4:	ldr	r1, [pc, #1920]	; 4643c <__assert_fail@plt+0x35230>
   45cb8:	mov	r2, #5
   45cbc:	mov	r0, #0
   45cc0:	bl	10f90 <dcgettext@plt>
   45cc4:	mov	r5, #0
   45cc8:	ldrd	r2, [r7, #32]
   45ccc:	str	r5, [sp]
   45cd0:	mov	fp, r0
   45cd4:	ldr	r0, [pc, #1976]	; 46494 <__assert_fail@plt+0x35288>
   45cd8:	bl	3c744 <__assert_fail@plt+0x2b538>
   45cdc:	mov	r3, r5
   45ce0:	ldr	r2, [r7, #84]	; 0x54
   45ce4:	str	r5, [sp]
   45ce8:	mov	r9, r0
   45cec:	ldr	r0, [pc, #1952]	; 46494 <__assert_fail@plt+0x35288>
   45cf0:	bl	3c744 <__assert_fail@plt+0x2b538>
   45cf4:	mov	r1, r9
   45cf8:	mov	r2, r0
   45cfc:	mov	r0, fp
   45d00:	bl	10f24 <printf@plt>
   45d04:	ldr	r1, [pc, #1844]	; 46440 <__assert_fail@plt+0x35234>
   45d08:	mov	r0, r5
   45d0c:	mov	r2, #5
   45d10:	bl	10f90 <dcgettext@plt>
   45d14:	ldrd	r2, [r7, #40]	; 0x28
   45d18:	str	r5, [sp]
   45d1c:	mov	fp, r0
   45d20:	ldr	r0, [pc, #1900]	; 46494 <__assert_fail@plt+0x35288>
   45d24:	bl	3c744 <__assert_fail@plt+0x2b538>
   45d28:	mov	r3, r5
   45d2c:	ldr	r2, [r7, #88]	; 0x58
   45d30:	str	r5, [sp]
   45d34:	mov	r9, r0
   45d38:	ldr	r0, [pc, #1876]	; 46494 <__assert_fail@plt+0x35288>
   45d3c:	bl	3c744 <__assert_fail@plt+0x2b538>
   45d40:	mov	r1, r9
   45d44:	mov	r2, r0
   45d48:	mov	r0, fp
   45d4c:	bl	10f24 <printf@plt>
   45d50:	ldr	r1, [pc, #1772]	; 46444 <__assert_fail@plt+0x35238>
   45d54:	mov	r0, r5
   45d58:	mov	r2, #5
   45d5c:	bl	10f90 <dcgettext@plt>
   45d60:	ldrd	r2, [r7, #48]	; 0x30
   45d64:	str	r5, [sp]
   45d68:	mov	fp, r0
   45d6c:	ldr	r0, [pc, #1824]	; 46494 <__assert_fail@plt+0x35288>
   45d70:	bl	3c744 <__assert_fail@plt+0x2b538>
   45d74:	mov	r3, r5
   45d78:	ldr	r2, [r7, #92]	; 0x5c
   45d7c:	str	r5, [sp]
   45d80:	mov	r9, r0
   45d84:	ldr	r0, [pc, #1800]	; 46494 <__assert_fail@plt+0x35288>
   45d88:	bl	3c744 <__assert_fail@plt+0x2b538>
   45d8c:	mov	r1, r9
   45d90:	mov	r2, r0
   45d94:	mov	r0, fp
   45d98:	bl	10f24 <printf@plt>
   45d9c:	ldr	r1, [pc, #1700]	; 46448 <__assert_fail@plt+0x3523c>
   45da0:	mov	r0, r5
   45da4:	mov	r2, #5
   45da8:	bl	10f90 <dcgettext@plt>
   45dac:	ldrd	r2, [r7, #56]	; 0x38
   45db0:	str	r5, [sp]
   45db4:	mov	fp, r0
   45db8:	ldr	r0, [pc, #1748]	; 46494 <__assert_fail@plt+0x35288>
   45dbc:	bl	3c744 <__assert_fail@plt+0x2b538>
   45dc0:	ldr	r2, [r7, #96]	; 0x60
   45dc4:	mov	r3, r5
   45dc8:	str	r5, [sp]
   45dcc:	mov	r9, r0
   45dd0:	ldr	r0, [pc, #1724]	; 46494 <__assert_fail@plt+0x35288>
   45dd4:	bl	3c744 <__assert_fail@plt+0x2b538>
   45dd8:	mov	r1, r9
   45ddc:	mov	r2, r0
   45de0:	mov	r0, fp
   45de4:	bl	10f24 <printf@plt>
   45de8:	b	4588c <__assert_fail@plt+0x34680>
   45dec:	ldr	r3, [sp, #104]	; 0x68
   45df0:	ldr	r3, [r3, #1488]	; 0x5d0
   45df4:	cmp	r3, #0
   45df8:	bne	4588c <__assert_fail@plt+0x34680>
   45dfc:	b	45800 <__assert_fail@plt+0x345f4>
   45e00:	ldr	r3, [sp, #80]	; 0x50
   45e04:	add	r4, r4, r3
   45e08:	ldr	r3, [sp, #92]	; 0x5c
   45e0c:	add	r3, r3, r4
   45e10:	str	r3, [sp, #56]	; 0x38
   45e14:	b	45934 <__assert_fail@plt+0x34728>
   45e18:	mov	r1, #4
   45e1c:	ldr	r4, [r9]
   45e20:	mov	r0, r6
   45e24:	blx	r4
   45e28:	mov	r3, #0
   45e2c:	mvn	r2, #0
   45e30:	cmp	r1, r3
   45e34:	cmpeq	r0, r2
   45e38:	mov	r4, r0
   45e3c:	mov	r5, r1
   45e40:	beq	464cc <__assert_fail@plt+0x352c0>
   45e44:	adds	r3, r0, #16
   45e48:	str	r3, [sp, #56]	; 0x38
   45e4c:	sbc	r3, r1, #0
   45e50:	str	r3, [sp, #60]	; 0x3c
   45e54:	ldrd	r2, [sp, #56]	; 0x38
   45e58:	cmp	r3, #0
   45e5c:	cmpeq	r2, #14
   45e60:	bls	46a80 <__assert_fail@plt+0x35874>
   45e64:	add	r3, r0, #4
   45e68:	add	r6, r6, r3
   45e6c:	cmp	fp, r6
   45e70:	movls	r3, #0
   45e74:	movhi	r3, #1
   45e78:	cmp	r4, #0
   45e7c:	orrle	r3, r3, #1
   45e80:	cmp	r3, #0
   45e84:	bne	45a1c <__assert_fail@plt+0x34810>
   45e88:	cmp	r6, r8
   45e8c:	add	r7, r7, #1
   45e90:	bcc	459f8 <__assert_fail@plt+0x347ec>
   45e94:	mov	r2, r7
   45e98:	cmp	r2, #0
   45e9c:	mov	sl, r8
   45ea0:	str	r7, [sp, #196]	; 0xc4
   45ea4:	mov	r8, r3
   45ea8:	ldr	r7, [sp, #64]	; 0x40
   45eac:	beq	46a5c <__assert_fail@plt+0x35850>
   45eb0:	ldr	r3, [pc, #1428]	; 4644c <__assert_fail@plt+0x35240>
   45eb4:	cmp	r2, r3
   45eb8:	bhi	46ab8 <__assert_fail@plt+0x358ac>
   45ebc:	ldr	r5, [sp, #196]	; 0xc4
   45ec0:	add	r4, r5, r5, lsl #2
   45ec4:	add	r4, r5, r4, lsl #1
   45ec8:	lsl	r4, r4, #3
   45ecc:	mov	r0, r4
   45ed0:	bl	5861c <warn@@Base+0x384c>
   45ed4:	mov	r2, r4
   45ed8:	ldr	r4, [sp, #104]	; 0x68
   45edc:	mov	r1, r8
   45ee0:	str	r0, [r4, #1440]	; 0x5a0
   45ee4:	bl	110bc <memset@plt>
   45ee8:	ldr	r3, [sp, #136]	; 0x88
   45eec:	str	r5, [r4, #1520]	; 0x5f0
   45ef0:	cmp	r3, #0
   45ef4:	beq	4544c <__assert_fail@plt+0x34240>
   45ef8:	ldr	r4, [sp, #176]	; 0xb0
   45efc:	mov	r1, r7
   45f00:	mov	r0, r4
   45f04:	lsl	r3, r4, #3
   45f08:	mov	r5, r3
   45f0c:	str	r3, [sp, #192]	; 0xc0
   45f10:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   45f14:	ldr	r2, [pc, #1256]	; 46404 <__assert_fail@plt+0x351f8>
   45f18:	add	r3, r5, r4
   45f1c:	str	r2, [sp, #180]	; 0xb4
   45f20:	add	r3, r2, r3, lsl #3
   45f24:	ldr	r3, [r3, #16]
   45f28:	cmp	r3, #0
   45f2c:	beq	46894 <__assert_fail@plt+0x35688>
   45f30:	ldr	r3, [pc, #1232]	; 46408 <__assert_fail@plt+0x351fc>
   45f34:	str	r8, [sp, #320]	; 0x140
   45f38:	str	r3, [sp, #140]	; 0x8c
   45f3c:	b	454f0 <__assert_fail@plt+0x342e4>
   45f40:	ldr	r3, [pc, #1408]	; 464c8 <__assert_fail@plt+0x352bc>
   45f44:	mov	r0, r4
   45f48:	mov	r1, #1
   45f4c:	ldr	r3, [r3]
   45f50:	blx	r3
   45f54:	add	r4, r5, #4
   45f58:	cmp	r6, r4
   45f5c:	sub	r3, r0, #2
   45f60:	clz	r3, r3
   45f64:	lsr	r3, r3, #5
   45f68:	str	r0, [sp, #152]	; 0x98
   45f6c:	str	r3, [sp, #320]	; 0x140
   45f70:	bhi	45658 <__assert_fail@plt+0x3444c>
   45f74:	sub	r1, r6, sl
   45f78:	sub	r3, r1, #1
   45f7c:	cmp	r3, #7
   45f80:	bls	4565c <__assert_fail@plt+0x34450>
   45f84:	ldr	r3, [sp, #88]	; 0x58
   45f88:	add	sl, r4, r3
   45f8c:	cmp	r6, sl
   45f90:	mov	r3, #0
   45f94:	str	r3, [sp, #108]	; 0x6c
   45f98:	bls	4569c <__assert_fail@plt+0x34490>
   45f9c:	b	45ac4 <__assert_fail@plt+0x348b8>
   45fa0:	ldr	r1, [sp, #88]	; 0x58
   45fa4:	ldr	r3, [pc, #1308]	; 464c8 <__assert_fail@plt+0x352bc>
   45fa8:	mov	r0, r4
   45fac:	ldr	r3, [r3]
   45fb0:	blx	r3
   45fb4:	strd	r0, [sp, #168]	; 0xa8
   45fb8:	b	45784 <__assert_fail@plt+0x34578>
   45fbc:	bl	3caa0 <__assert_fail@plt+0x2b894>
   45fc0:	ldrd	r0, [sp, #144]	; 0x90
   45fc4:	ldr	r2, [sp, #156]	; 0x9c
   45fc8:	mov	r3, #0
   45fcc:	cmp	r3, r1
   45fd0:	cmpeq	r2, r0
   45fd4:	bls	467b4 <__assert_fail@plt+0x355a8>
   45fd8:	ldr	r1, [sp, #192]	; 0xc0
   45fdc:	ldr	r0, [sp, #176]	; 0xb0
   45fe0:	add	r4, r1, r0
   45fe4:	ldr	r1, [sp, #160]	; 0xa0
   45fe8:	adds	r0, r2, r1
   45fec:	str	r0, [sp, #184]	; 0xb8
   45ff0:	ldr	r0, [sp, #180]	; 0xb4
   45ff4:	add	r4, r0, r4, lsl #3
   45ff8:	ldr	r0, [sp, #164]	; 0xa4
   45ffc:	adc	r3, r3, r0
   46000:	str	r3, [sp, #188]	; 0xbc
   46004:	ldrd	r8, [sp, #184]	; 0xb8
   46008:	ldrd	r2, [r4, #32]
   4600c:	ldr	r0, [sp, #156]	; 0x9c
   46010:	cmp	r9, r3
   46014:	cmpeq	r8, r2
   46018:	add	r5, r0, r1
   4601c:	bhi	4690c <__assert_fail@plt+0x35700>
   46020:	ldr	r3, [sp, #104]	; 0x68
   46024:	ldr	r3, [r3, #1108]	; 0x454
   46028:	cmp	r3, #0
   4602c:	bne	46048 <__assert_fail@plt+0x34e3c>
   46030:	ldr	r3, [sp, #144]	; 0x90
   46034:	ldr	r0, [r4, #16]
   46038:	add	r3, r1, r3
   4603c:	add	r1, r0, r5
   46040:	add	r0, r0, r3
   46044:	bl	3f114 <__assert_fail@plt+0x2df08>
   46048:	ldr	r3, [sp, #56]	; 0x38
   4604c:	cmp	sl, r3
   46050:	bcs	45934 <__assert_fail@plt+0x34728>
   46054:	ldr	r2, [sp, #116]	; 0x74
   46058:	mov	fp, r6
   4605c:	mov	r1, #0
   46060:	add	r3, r2, r2, lsl #2
   46064:	ldr	r9, [sp, #56]	; 0x38
   46068:	add	r3, r2, r3, lsl #1
   4606c:	str	r1, [sp, #168]	; 0xa8
   46070:	lsl	r3, r3, #3
   46074:	str	r3, [sp, #164]	; 0xa4
   46078:	mvn	r3, #0
   4607c:	str	r3, [sp, #156]	; 0x9c
   46080:	add	r3, sp, #216	; 0xd8
   46084:	str	r1, [sp, #80]	; 0x50
   46088:	str	r3, [sp, #152]	; 0x98
   4608c:	str	r7, [sp, #56]	; 0x38
   46090:	mov	r3, r9
   46094:	mov	r2, #0
   46098:	mov	r0, sl
   4609c:	ldr	r1, [sp, #152]	; 0x98
   460a0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   460a4:	ldr	r3, [sp, #216]	; 0xd8
   460a8:	ldr	r2, [sp, #92]	; 0x5c
   460ac:	sub	r4, sl, r2
   460b0:	add	sl, sl, r3
   460b4:	subs	r8, r0, #0
   460b8:	bne	461f4 <__assert_fail@plt+0x34fe8>
   460bc:	ldr	r3, [sp, #80]	; 0x50
   460c0:	cmp	r3, #0
   460c4:	cmpeq	fp, r9
   460c8:	beq	46384 <__assert_fail@plt+0x35178>
   460cc:	ldr	r3, [sp, #136]	; 0x88
   460d0:	ldr	r1, [sp, #80]	; 0x50
   460d4:	cmp	r3, #0
   460d8:	sub	r5, r1, #1
   460dc:	bne	46130 <__assert_fail@plt+0x34f24>
   460e0:	ldr	r3, [sp, #140]	; 0x8c
   460e4:	ldr	r3, [r3]
   460e8:	cmp	r3, r4
   460ec:	bhi	46130 <__assert_fail@plt+0x34f24>
   460f0:	ldr	r3, [sp, #180]	; 0xb4
   460f4:	ldr	r2, [r3, #3096]	; 0xc18
   460f8:	cmn	r2, #1
   460fc:	movne	r3, #0
   46100:	moveq	r3, #1
   46104:	cmp	r2, r1
   46108:	orrgt	r3, r3, #1
   4610c:	cmp	r3, #0
   46110:	beq	46130 <__assert_fail@plt+0x34f24>
   46114:	mov	r2, #5
   46118:	ldr	r1, [pc, #816]	; 46450 <__assert_fail@plt+0x35244>
   4611c:	mov	r0, #0
   46120:	bl	10f90 <dcgettext@plt>
   46124:	mov	r2, r4
   46128:	ldr	r1, [sp, #80]	; 0x50
   4612c:	bl	10f24 <printf@plt>
   46130:	cmp	r5, #0
   46134:	blt	46194 <__assert_fail@plt+0x34f88>
   46138:	ldr	r3, [sp, #140]	; 0x8c
   4613c:	ldr	r2, [sp, #156]	; 0x9c
   46140:	ldr	r3, [r3]
   46144:	cmp	r3, #0
   46148:	cmpne	r2, r5
   4614c:	bgt	459ac <__assert_fail@plt+0x347a0>
   46150:	str	r5, [sp, #80]	; 0x50
   46154:	cmp	r9, sl
   46158:	bhi	46090 <__assert_fail@plt+0x34e84>
   4615c:	mov	r6, fp
   46160:	str	r9, [sp, #56]	; 0x38
   46164:	b	45934 <__assert_fail@plt+0x34728>
   46168:	mov	r2, sl
   4616c:	cmp	r9, r2
   46170:	beq	4615c <__assert_fail@plt+0x34f50>
   46174:	ldr	r3, [sp, #136]	; 0x88
   46178:	cmp	r3, #0
   4617c:	bne	46190 <__assert_fail@plt+0x34f84>
   46180:	ldr	r3, [sp, #140]	; 0x8c
   46184:	ldr	r3, [r3]
   46188:	cmp	r4, r3
   4618c:	bcs	467f4 <__assert_fail@plt+0x355e8>
   46190:	mvn	r5, #0
   46194:	ldr	r3, [sp, #104]	; 0x68
   46198:	ldr	r3, [r3, #1540]	; 0x604
   4619c:	cmp	r3, #2
   461a0:	bhi	46138 <__assert_fail@plt+0x34f2c>
   461a4:	mov	r2, #5
   461a8:	ldr	r1, [pc, #676]	; 46454 <__assert_fail@plt+0x35248>
   461ac:	mov	r0, #0
   461b0:	bl	10f90 <dcgettext@plt>
   461b4:	ldr	r3, [sp, #112]	; 0x70
   461b8:	mov	r1, r4
   461bc:	ldr	r2, [r3, #8]
   461c0:	bl	54dd0 <warn@@Base>
   461c4:	ldr	r2, [sp, #104]	; 0x68
   461c8:	ldr	r3, [r2, #1540]	; 0x604
   461cc:	add	r3, r3, #1
   461d0:	cmp	r3, #3
   461d4:	str	r3, [r2, #1540]	; 0x604
   461d8:	bne	46138 <__assert_fail@plt+0x34f2c>
   461dc:	mov	r2, #5
   461e0:	ldr	r1, [pc, #624]	; 46458 <__assert_fail@plt+0x3524c>
   461e4:	mov	r0, #0
   461e8:	bl	10f90 <dcgettext@plt>
   461ec:	bl	54dd0 <warn@@Base>
   461f0:	b	46138 <__assert_fail@plt+0x34f2c>
   461f4:	ldr	r3, [sp, #136]	; 0x88
   461f8:	cmp	r3, #0
   461fc:	bne	464f4 <__assert_fail@plt+0x352e8>
   46200:	ldr	r3, [sp, #140]	; 0x8c
   46204:	ldr	r3, [r3]
   46208:	cmp	r3, #0
   4620c:	beq	4622c <__assert_fail@plt+0x35020>
   46210:	cmp	r3, r4
   46214:	ldrhi	r3, [sp, #136]	; 0x88
   46218:	movhi	r5, r3
   4621c:	movhi	r7, r3
   46220:	bhi	46500 <__assert_fail@plt+0x352f4>
   46224:	ldreq	r3, [sp, #80]	; 0x50
   46228:	streq	r3, [sp, #156]	; 0x9c
   4622c:	ldr	r3, [sp, #180]	; 0xb4
   46230:	ldr	r5, [sp, #80]	; 0x50
   46234:	ldr	r3, [r3, #3096]	; 0xc18
   46238:	cmn	r3, #1
   4623c:	movne	r2, #0
   46240:	moveq	r2, #1
   46244:	cmp	r3, r5
   46248:	orrgt	r2, r2, #1
   4624c:	subs	r7, r2, #0
   46250:	beq	46824 <__assert_fail@plt+0x35618>
   46254:	mov	r2, #5
   46258:	ldr	r1, [pc, #508]	; 4645c <__assert_fail@plt+0x35250>
   4625c:	mov	r0, #0
   46260:	bl	10f90 <dcgettext@plt>
   46264:	mov	r1, r5
   46268:	mov	r3, r8
   4626c:	mov	r2, r4
   46270:	bl	10f24 <printf@plt>
   46274:	str	r5, [sp, #168]	; 0xa8
   46278:	mov	r5, #1
   4627c:	b	46500 <__assert_fail@plt+0x352f4>
   46280:	mov	r1, #8
   46284:	ldr	r3, [pc, #572]	; 464c8 <__assert_fail@plt+0x352bc>
   46288:	mov	r0, r5
   4628c:	mov	r5, r2
   46290:	ldr	r3, [r3]
   46294:	blx	r3
   46298:	add	r4, r5, #2
   4629c:	mov	r3, #12
   462a0:	str	r3, [sp, #128]	; 0x80
   462a4:	mov	r8, r3
   462a8:	cmp	r4, r6
   462ac:	mov	r3, #8
   462b0:	mov	r9, #0
   462b4:	str	r3, [sp, #88]	; 0x58
   462b8:	strd	r0, [sp, #80]	; 0x50
   462bc:	bcc	4630c <__assert_fail@plt+0x35100>
   462c0:	cmp	r5, r6
   462c4:	bcs	45b9c <__assert_fail@plt+0x34990>
   462c8:	sub	r1, r6, r5
   462cc:	sub	r3, r1, #1
   462d0:	cmp	r3, #7
   462d4:	bhi	45b9c <__assert_fail@plt+0x34990>
   462d8:	b	45560 <__assert_fail@plt+0x34354>
   462dc:	mov	r0, sl
   462e0:	add	r2, sp, #208	; 0xd0
   462e4:	add	r1, sp, #200	; 0xc8
   462e8:	bl	55148 <warn@@Base+0x378>
   462ec:	b	45750 <__assert_fail@plt+0x34544>
   462f0:	add	r4, r5, #2
   462f4:	mov	r8, #4
   462f8:	cmp	r4, r6
   462fc:	str	r8, [sp, #88]	; 0x58
   46300:	str	r8, [sp, #128]	; 0x80
   46304:	mov	r9, #0
   46308:	bcs	462c0 <__assert_fail@plt+0x350b4>
   4630c:	mov	r1, #2
   46310:	b	45560 <__assert_fail@plt+0x34354>
   46314:	ldr	r3, [pc, #240]	; 4640c <__assert_fail@plt+0x35200>
   46318:	ldr	r2, [sp, #320]	; 0x140
   4631c:	str	r3, [sp, #104]	; 0x68
   46320:	ldr	r3, [r3, #1488]	; 0x5d0
   46324:	orrs	r3, r2, r3
   46328:	beq	459d0 <__assert_fail@plt+0x347c4>
   4632c:	ldr	r4, [sp, #176]	; 0xb0
   46330:	mov	r0, r4
   46334:	lsl	r5, r4, #3
   46338:	str	r5, [sp, #192]	; 0xc0
   4633c:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   46340:	ldr	r2, [pc, #188]	; 46404 <__assert_fail@plt+0x351f8>
   46344:	add	r3, r5, r4
   46348:	str	r2, [sp, #180]	; 0xb4
   4634c:	add	r3, r2, r3, lsl #3
   46350:	ldr	r3, [r3, #16]
   46354:	cmp	r3, #0
   46358:	beq	46894 <__assert_fail@plt+0x35688>
   4635c:	ldr	r3, [sp, #92]	; 0x5c
   46360:	cmp	r3, sl
   46364:	movcs	r3, #0
   46368:	strcs	r3, [sp, #196]	; 0xc4
   4636c:	bcs	469fc <__assert_fail@plt+0x357f0>
   46370:	ldr	r3, [pc, #144]	; 46408 <__assert_fail@plt+0x351fc>
   46374:	str	r3, [sp, #140]	; 0x8c
   46378:	mov	r3, #0
   4637c:	str	r3, [sp, #196]	; 0xc4
   46380:	b	454f0 <__assert_fail@plt+0x342e4>
   46384:	cmp	r9, sl
   46388:	bls	46168 <__assert_fail@plt+0x34f5c>
   4638c:	ldrb	r3, [sl]
   46390:	cmp	r3, #0
   46394:	bne	46174 <__assert_fail@plt+0x34f68>
   46398:	add	r3, sl, #1
   4639c:	b	463b0 <__assert_fail@plt+0x351a4>
   463a0:	ldrb	r2, [r2]
   463a4:	add	r3, r3, #1
   463a8:	cmp	r2, #0
   463ac:	bne	46174 <__assert_fail@plt+0x34f68>
   463b0:	cmp	r3, r9
   463b4:	mov	r2, r3
   463b8:	bne	463a0 <__assert_fail@plt+0x35194>
   463bc:	b	4616c <__assert_fail@plt+0x34f60>
   463c0:	mov	r2, #5
   463c4:	ldr	r1, [pc, #148]	; 46460 <__assert_fail@plt+0x35254>
   463c8:	mov	r0, #0
   463cc:	bl	10f90 <dcgettext@plt>
   463d0:	mov	r1, #0
   463d4:	ldrd	r2, [sp, #64]	; 0x40
   463d8:	str	r1, [sp]
   463dc:	mov	r4, r0
   463e0:	ldr	r0, [pc, #172]	; 46494 <__assert_fail@plt+0x35288>
   463e4:	bl	3c744 <__assert_fail@plt+0x2b538>
   463e8:	ldr	r2, [sp, #76]	; 0x4c
   463ec:	mov	r1, r0
   463f0:	mov	r0, r4
   463f4:	bl	54dd0 <warn@@Base>
   463f8:	b	45934 <__assert_fail@plt+0x34728>
   463fc:	andeq	lr, r9, r4, lsl sp
   46400:	andeq	lr, r9, r8, lsr sp
   46404:	strdeq	r9, [r9], -r0
   46408:	andeq	lr, r9, r8, asr sp
   4640c:	ldrdeq	ip, [r9], -r0
   46410:	strdeq	r0, [r8], -r8
   46414:	andeq	r0, r8, r4, asr #22
   46418:	andeq	r0, r8, r0, ror r8
   4641c:	andeq	r0, r8, r8, lsr r9
   46420:	andeq	r0, r8, ip, asr r9
   46424:	andeq	r0, r8, r4, lsl r8
   46428:	andeq	r0, r8, ip, lsl #16
   4642c:	andeq	r0, r8, ip, ror r9
   46430:	muleq	r8, r4, r9
   46434:	andeq	r0, r8, ip, lsr #19
   46438:	strdeq	r0, [r8], -r4
   4643c:	andeq	r0, r8, r0, lsl sl
   46440:	andeq	r0, r8, ip, lsr sl
   46444:	andeq	r0, r8, r8, ror #20
   46448:	muleq	r8, r4, sl
   4644c:	rsceq	fp, r8, #184320	; 0x2d000
   46450:	andeq	r0, r8, r4, lsr ip
   46454:	andeq	r0, r8, r4, asr ip
   46458:	muleq	r8, r8, ip
   4645c:	ldrdeq	r0, [r8], -r8
   46460:	strdeq	r0, [r8], -ip
   46464:			; <UNDEFINED> instruction: 0x00080db0
   46468:			; <UNDEFINED> instruction: 0x00080dbc
   4646c:	andeq	r0, r8, r8, lsl #28
   46470:	andeq	r0, r8, r4, lsl #23
   46474:	andeq	r0, r8, r8, asr sp
   46478:	ldrdeq	r0, [r8], -r8
   4647c:	muleq	r0, pc, ip	; <UNPREDICTABLE>
   46480:	andeq	r0, r8, r8, asr #27
   46484:	ldrdeq	r0, [r8], -ip
   46488:	andeq	r0, r8, r4, asr #19
   4648c:	ldrdeq	r0, [r8], -ip
   46490:	andeq	r0, r8, r0, asr #21
   46494:	andeq	r9, r6, r0, lsr #15
   46498:	andeq	r0, r8, ip, lsl #26
   4649c:	andeq	sl, r9, ip, lsr #8
   464a0:	andeq	r0, r8, ip, lsl r8
   464a4:	andeq	r0, r8, ip, lsr r8
   464a8:	strdeq	r0, [r8], -r8
   464ac:	andeq	r0, r8, r0, lsr #17
   464b0:	andeq	r0, r0, fp, lsr #25
   464b4:	andeq	r9, r6, r0, lsl #30
   464b8:	andeq	r0, r0, ip, ror ip
   464bc:	andeq	lr, r7, r8, lsl #20
   464c0:	andeq	r0, r8, r0, ror #26
   464c4:	andeq	sp, r7, r8, lsl r7
   464c8:	andeq	lr, r9, ip, asr sp
   464cc:	add	r1, r6, #12
   464d0:	cmp	r8, r1
   464d4:	bhi	467d4 <__assert_fail@plt+0x355c8>
   464d8:	cmp	sl, r8
   464dc:	bcs	45a14 <__assert_fail@plt+0x34808>
   464e0:	sub	r1, r8, sl
   464e4:	sub	r0, r1, #1
   464e8:	cmp	r0, #7
   464ec:	bhi	45a14 <__assert_fail@plt+0x34808>
   464f0:	b	467d8 <__assert_fail@plt+0x355cc>
   464f4:	mov	r3, #0
   464f8:	ldr	r5, [sp, #136]	; 0x88
   464fc:	mov	r7, r3
   46500:	ldr	r3, [sp, #104]	; 0x68
   46504:	ldr	r2, [r3, #1108]	; 0x454
   46508:	cmp	r2, #0
   4650c:	str	r2, [sp, #144]	; 0x90
   46510:	beq	46a14 <__assert_fail@plt+0x35808>
   46514:	ldr	r3, [r2]
   46518:	cmp	r8, r3
   4651c:	beq	46540 <__assert_fail@plt+0x35334>
   46520:	mov	r3, r2
   46524:	ldr	r3, [r3, #20]
   46528:	cmp	r3, #0
   4652c:	beq	46a14 <__assert_fail@plt+0x35808>
   46530:	ldr	r2, [r3]
   46534:	cmp	r2, r8
   46538:	bne	46524 <__assert_fail@plt+0x35318>
   4653c:	str	r3, [sp, #144]	; 0x90
   46540:	ldr	r3, [sp, #144]	; 0x90
   46544:	cmp	r7, #0
   46548:	ldr	r0, [r3, #4]
   4654c:	bne	4684c <__assert_fail@plt+0x35640>
   46550:	cmp	r0, #17
   46554:	beq	4686c <__assert_fail@plt+0x35660>
   46558:	ldr	r2, [sp, #104]	; 0x68
   4655c:	mov	r3, #0
   46560:	cmp	r0, #46	; 0x2e
   46564:	str	r3, [r2, #1496]	; 0x5d8
   46568:	beq	46884 <__assert_fail@plt+0x35678>
   4656c:	cmp	r0, #3
   46570:	beq	46884 <__assert_fail@plt+0x35678>
   46574:	ldr	r3, [sp, #104]	; 0x68
   46578:	ldr	r6, [r3, #1440]	; 0x5a0
   4657c:	cmp	r6, #0
   46580:	beq	46790 <__assert_fail@plt+0x35584>
   46584:	ldr	r3, [r3, #1520]	; 0x5f0
   46588:	ldr	r2, [sp, #116]	; 0x74
   4658c:	cmp	r3, r2
   46590:	bls	46790 <__assert_fail@plt+0x35584>
   46594:	ldr	r3, [sp, #164]	; 0xa4
   46598:	adds	r6, r6, r3
   4659c:	beq	46790 <__assert_fail@plt+0x35584>
   465a0:	ldr	r2, [r6, #60]	; 0x3c
   465a4:	ldr	r3, [r6, #68]	; 0x44
   465a8:	cmp	r2, r3
   465ac:	bne	46afc <__assert_fail@plt+0x358f0>
   465b0:	ldr	r3, [sp, #144]	; 0x90
   465b4:	ldr	r4, [r3, #12]
   465b8:	cmp	r4, #0
   465bc:	beq	46774 <__assert_fail@plt+0x35568>
   465c0:	ldr	r3, [r4]
   465c4:	cmp	r3, #0
   465c8:	beq	46730 <__assert_fail@plt+0x35524>
   465cc:	ldr	r3, [sp, #136]	; 0x88
   465d0:	ldrb	r2, [sp, #108]	; 0x6c
   465d4:	eor	r8, r5, #1
   465d8:	orr	r8, r8, r3
   465dc:	mov	r3, #0
   465e0:	str	r9, [sp, #160]	; 0xa0
   465e4:	strd	r2, [sp, #120]	; 0x78
   465e8:	mov	r9, r7
   465ec:	b	4667c <__assert_fail@plt+0x35470>
   465f0:	ldr	r2, [r4, #8]
   465f4:	cmp	r8, #0
   465f8:	ldm	r4, {r5, r7}
   465fc:	asr	r3, r2, #31
   46600:	beq	46698 <__assert_fail@plt+0x3548c>
   46604:	mov	r1, #32
   46608:	str	r1, [sp, #52]	; 0x34
   4660c:	ldr	r1, [sp, #56]	; 0x38
   46610:	mov	ip, #1
   46614:	str	r1, [sp, #48]	; 0x30
   46618:	ldr	r1, [sp, #112]	; 0x70
   4661c:	strd	sl, [sp]
   46620:	str	r1, [sp, #44]	; 0x2c
   46624:	ldr	r1, [sp, #76]	; 0x4c
   46628:	str	r6, [sp, #36]	; 0x24
   4662c:	str	r1, [sp, #32]
   46630:	ldr	r1, [sp, #88]	; 0x58
   46634:	str	ip, [sp, #40]	; 0x28
   46638:	str	r1, [sp, #24]
   4663c:	mov	r1, #0
   46640:	str	r1, [sp, #28]
   46644:	ldrd	r0, [sp, #120]	; 0x78
   46648:	strd	r0, [sp, #16]
   4664c:	ldrd	r0, [sp, #64]	; 0x40
   46650:	strd	r0, [sp, #8]
   46654:	mov	r1, r7
   46658:	mov	r0, r5
   4665c:	bl	4276c <__assert_fail@plt+0x31560>
   46660:	ldr	r4, [r4, #12]
   46664:	cmp	r4, #0
   46668:	mov	sl, r0
   4666c:	beq	46724 <__assert_fail@plt+0x35518>
   46670:	ldr	r3, [r4]
   46674:	cmp	r3, #0
   46678:	beq	46724 <__assert_fail@plt+0x35518>
   4667c:	cmp	r9, #0
   46680:	beq	465f0 <__assert_fail@plt+0x353e4>
   46684:	ldr	r3, [sp, #92]	; 0x5c
   46688:	ldr	r0, [pc, #-556]	; 46464 <__assert_fail@plt+0x35258>
   4668c:	sub	r1, sl, r3
   46690:	bl	10f24 <printf@plt>
   46694:	b	465f0 <__assert_fail@plt+0x353e4>
   46698:	mov	r0, r5
   4669c:	strd	r2, [sp, #128]	; 0x80
   466a0:	bl	3df50 <__assert_fail@plt+0x2cd44>
   466a4:	mov	r1, r0
   466a8:	ldr	r0, [pc, #-584]	; 46468 <__assert_fail@plt+0x3525c>
   466ac:	bl	10f24 <printf@plt>
   466b0:	mov	r3, #32
   466b4:	str	r3, [sp, #52]	; 0x34
   466b8:	ldr	r3, [sp, #56]	; 0x38
   466bc:	strd	sl, [sp]
   466c0:	str	r3, [sp, #48]	; 0x30
   466c4:	ldr	r3, [sp, #112]	; 0x70
   466c8:	mov	r1, r7
   466cc:	str	r3, [sp, #44]	; 0x2c
   466d0:	ldr	r3, [sp, #76]	; 0x4c
   466d4:	str	r8, [sp, #40]	; 0x28
   466d8:	str	r3, [sp, #32]
   466dc:	ldr	r3, [sp, #88]	; 0x58
   466e0:	str	r6, [sp, #36]	; 0x24
   466e4:	str	r3, [sp, #24]
   466e8:	mov	r3, #0
   466ec:	str	r3, [sp, #28]
   466f0:	ldrd	r2, [sp, #120]	; 0x78
   466f4:	mov	r0, r5
   466f8:	strd	r2, [sp, #16]
   466fc:	ldrd	r2, [sp, #64]	; 0x40
   46700:	strd	r2, [sp, #8]
   46704:	ldrd	r2, [sp, #128]	; 0x80
   46708:	bl	4276c <__assert_fail@plt+0x31560>
   4670c:	mov	sl, r0
   46710:	mov	r0, #10
   46714:	bl	110c8 <putchar@plt>
   46718:	ldr	r4, [r4, #12]
   4671c:	cmp	r4, #0
   46720:	bne	46670 <__assert_fail@plt+0x35464>
   46724:	cmp	r6, #0
   46728:	ldr	r9, [sp, #160]	; 0xa0
   4672c:	beq	46774 <__assert_fail@plt+0x35568>
   46730:	ldr	r1, [r6, #60]	; 0x3c
   46734:	ldr	r2, [r6, #68]	; 0x44
   46738:	sub	r3, r1, r2
   4673c:	cmp	r3, #1
   46740:	beq	468d4 <__assert_fail@plt+0x356c8>
   46744:	cmp	r3, #0
   46748:	beq	46774 <__assert_fail@plt+0x35568>
   4674c:	cmn	r3, #1
   46750:	bne	46ae8 <__assert_fail@plt+0x358dc>
   46754:	mov	r2, #5
   46758:	ldr	r1, [pc, #-756]	; 4646c <__assert_fail@plt+0x35260>
   4675c:	mov	r0, #0
   46760:	bl	10f90 <dcgettext@plt>
   46764:	bl	54dd0 <warn@@Base>
   46768:	ldr	r3, [r6, #68]	; 0x44
   4676c:	sub	r3, r3, #1
   46770:	str	r3, [r6, #68]	; 0x44
   46774:	ldr	r3, [sp, #144]	; 0x90
   46778:	ldr	r3, [r3, #8]
   4677c:	cmp	r3, #0
   46780:	ldrne	r3, [sp, #80]	; 0x50
   46784:	addne	r3, r3, #1
   46788:	strne	r3, [sp, #80]	; 0x50
   4678c:	b	46154 <__assert_fail@plt+0x34f48>
   46790:	ldr	r3, [sp, #144]	; 0x90
   46794:	ldr	r4, [r3, #12]
   46798:	cmp	r4, #0
   4679c:	beq	46774 <__assert_fail@plt+0x35568>
   467a0:	ldr	r3, [r4]
   467a4:	cmp	r3, #0
   467a8:	movne	r6, #0
   467ac:	bne	465cc <__assert_fail@plt+0x353c0>
   467b0:	b	46774 <__assert_fail@plt+0x35568>
   467b4:	mov	r2, #5
   467b8:	ldr	r1, [pc, #-848]	; 46470 <__assert_fail@plt+0x35264>
   467bc:	mov	r0, #0
   467c0:	bl	10f90 <dcgettext@plt>
   467c4:	ldr	r2, [sp, #156]	; 0x9c
   467c8:	ldr	r1, [sp, #144]	; 0x90
   467cc:	bl	54dd0 <warn@@Base>
   467d0:	b	46048 <__assert_fail@plt+0x34e3c>
   467d4:	mov	r1, #8
   467d8:	ldr	r3, [r9]
   467dc:	mov	r0, sl
   467e0:	blx	r3
   467e4:	mov	r4, r0
   467e8:	mov	r5, r1
   467ec:	add	r3, r0, #12
   467f0:	b	45e68 <__assert_fail@plt+0x34c5c>
   467f4:	ldr	r3, [sp, #180]	; 0xb4
   467f8:	ldr	r1, [sp, #80]	; 0x50
   467fc:	ldr	r2, [r3, #3096]	; 0xc18
   46800:	cmn	r2, #1
   46804:	movne	r3, #0
   46808:	moveq	r3, #1
   4680c:	cmp	r1, r2
   46810:	orrlt	r3, r3, #1
   46814:	cmp	r3, #0
   46818:	mvnne	r5, #0
   4681c:	bne	46114 <__assert_fail@plt+0x34f08>
   46820:	b	46190 <__assert_fail@plt+0x34f84>
   46824:	ldr	r2, [sp, #168]	; 0xa8
   46828:	cmp	r3, r2
   4682c:	bgt	46a8c <__assert_fail@plt+0x35880>
   46830:	ldr	r3, [sp, #80]	; 0x50
   46834:	mov	r5, r7
   46838:	str	r3, [sp, #168]	; 0xa8
   4683c:	b	46500 <__assert_fail@plt+0x352f4>
   46840:	mov	r0, #10
   46844:	bl	110c8 <putchar@plt>
   46848:	b	459ac <__assert_fail@plt+0x347a0>
   4684c:	bl	3dee4 <__assert_fail@plt+0x2ccd8>
   46850:	mov	r1, r0
   46854:	ldr	r0, [pc, #-1000]	; 46474 <__assert_fail@plt+0x35268>
   46858:	bl	10f24 <printf@plt>
   4685c:	ldr	r3, [sp, #144]	; 0x90
   46860:	ldr	r0, [r3, #4]
   46864:	cmp	r0, #17
   46868:	bne	46558 <__assert_fail@plt+0x3534c>
   4686c:	ldr	r2, [sp, #104]	; 0x68
   46870:	ldr	r1, [sp, #136]	; 0x88
   46874:	mov	r3, #1
   46878:	str	r1, [r2, #1500]	; 0x5dc
   4687c:	str	r3, [r2, #1496]	; 0x5d8
   46880:	b	46574 <__assert_fail@plt+0x35368>
   46884:	str	r3, [r2, #1492]	; 0x5d4
   46888:	b	46574 <__assert_fail@plt+0x35368>
   4688c:	mov	r7, r1
   46890:	b	45610 <__assert_fail@plt+0x34404>
   46894:	mov	r2, #5
   46898:	ldr	r1, [pc, #-1064]	; 46478 <__assert_fail@plt+0x3526c>
   4689c:	mov	r0, #0
   468a0:	bl	10f90 <dcgettext@plt>
   468a4:	ldr	r2, [sp, #176]	; 0xb0
   468a8:	ldr	r3, [sp, #192]	; 0xc0
   468ac:	add	r3, r3, r2
   468b0:	ldr	r2, [sp, #180]	; 0xb4
   468b4:	ldr	r1, [r2, r3, lsl #3]
   468b8:	bl	54dd0 <warn@@Base>
   468bc:	mov	r0, #0
   468c0:	add	sp, sp, #284	; 0x11c
   468c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   468c8:	ldr	r3, [sp, #136]	; 0x88
   468cc:	str	r3, [sp, #196]	; 0xc4
   468d0:	b	4544c <__assert_fail@plt+0x34240>
   468d4:	ldr	r0, [r6, #52]	; 0x34
   468d8:	lsl	r3, r2, #3
   468dc:	mvn	r4, #0
   468e0:	add	r2, r2, #1
   468e4:	mvn	r5, #0
   468e8:	cmp	r2, r1
   468ec:	strd	r4, [r0, r3]
   468f0:	str	r2, [r6, #68]	; 0x44
   468f4:	beq	46774 <__assert_fail@plt+0x35568>
   468f8:	ldr	r3, [pc, #-1084]	; 464c4 <__assert_fail@plt+0x352b8>
   468fc:	ldr	r2, [pc, #-1160]	; 4647c <__assert_fail@plt+0x35270>
   46900:	ldr	r1, [pc, #-1100]	; 464bc <__assert_fail@plt+0x352b0>
   46904:	ldr	r0, [pc, #-1164]	; 46480 <__assert_fail@plt+0x35274>
   46908:	bl	1120c <__assert_fail@plt>
   4690c:	mov	r2, #5
   46910:	ldr	r1, [pc, #-1172]	; 46484 <__assert_fail@plt+0x35278>
   46914:	mov	r0, #0
   46918:	bl	10f90 <dcgettext@plt>
   4691c:	ldr	r2, [r4, #32]
   46920:	mov	r1, r5
   46924:	bl	54dd0 <warn@@Base>
   46928:	b	46048 <__assert_fail@plt+0x34e3c>
   4692c:	add	r3, sp, #216	; 0xd8
   46930:	mov	r2, #5
   46934:	ldr	r1, [pc, #-1204]	; 46488 <__assert_fail@plt+0x3527c>
   46938:	mov	r0, r5
   4693c:	mov	fp, r3
   46940:	bl	10f90 <dcgettext@plt>
   46944:	ldrd	r2, [sp, #208]	; 0xd0
   46948:	str	fp, [sp]
   4694c:	mov	r9, r0
   46950:	ldrd	r0, [sp, #200]	; 0xc8
   46954:	bl	3e35c <__assert_fail@plt+0x2d150>
   46958:	mov	r1, r0
   4695c:	mov	r0, r9
   46960:	bl	10f24 <printf@plt>
   46964:	ldr	r1, [pc, #-1248]	; 4648c <__assert_fail@plt+0x35280>
   46968:	mov	r2, #5
   4696c:	mov	r0, r5
   46970:	bl	10f90 <dcgettext@plt>
   46974:	str	r5, [sp]
   46978:	ldrd	r2, [sp, #168]	; 0xa8
   4697c:	mov	r9, r0
   46980:	ldr	r0, [pc, #-1268]	; 46494 <__assert_fail@plt+0x35288>
   46984:	bl	3c744 <__assert_fail@plt+0x2b538>
   46988:	mov	r1, r0
   4698c:	mov	r0, r9
   46990:	bl	10f24 <printf@plt>
   46994:	b	45c98 <__assert_fail@plt+0x34a8c>
   46998:	ldr	r3, [sp, #112]	; 0x70
   4699c:	add	r1, r3, #12
   469a0:	add	r0, r3, #8
   469a4:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   469a8:	b	454dc <__assert_fail@plt+0x342d0>
   469ac:	mov	r2, #5
   469b0:	ldr	r1, [pc, #-1320]	; 46490 <__assert_fail@plt+0x35284>
   469b4:	mov	r0, #0
   469b8:	bl	10f90 <dcgettext@plt>
   469bc:	ldr	r3, [sp, #112]	; 0x70
   469c0:	mov	r1, #0
   469c4:	ldr	r5, [r3, #8]
   469c8:	ldrd	r2, [sp, #80]	; 0x50
   469cc:	str	r1, [sp]
   469d0:	mov	r4, r0
   469d4:	ldr	r0, [pc, #-1352]	; 46494 <__assert_fail@plt+0x35288>
   469d8:	bl	3c744 <__assert_fail@plt+0x2b538>
   469dc:	ldr	ip, [sp, #116]	; 0x74
   469e0:	ldr	r2, [sp, #120]	; 0x78
   469e4:	mov	r1, r5
   469e8:	str	ip, [sp, #196]	; 0xc4
   469ec:	mov	r3, r0
   469f0:	mov	r0, r4
   469f4:	bl	54dd0 <warn@@Base>
   469f8:	b	4594c <__assert_fail@plt+0x34740>
   469fc:	ldr	r3, [sp, #104]	; 0x68
   46a00:	ldr	r2, [sp, #320]	; 0x140
   46a04:	ldr	r3, [r3, #1488]	; 0x5d0
   46a08:	orrs	r3, r2, r3
   46a0c:	bne	459ac <__assert_fail@plt+0x347a0>
   46a10:	b	45988 <__assert_fail@plt+0x3477c>
   46a14:	cmp	r7, #0
   46a18:	mov	fp, r4
   46a1c:	bne	46a44 <__assert_fail@plt+0x35838>
   46a20:	mov	r2, #5
   46a24:	ldr	r1, [pc, #-1428]	; 46498 <__assert_fail@plt+0x3528c>
   46a28:	mov	r0, #0
   46a2c:	bl	10f90 <dcgettext@plt>
   46a30:	mov	r2, r8
   46a34:	mov	r1, fp
   46a38:	bl	54dd0 <warn@@Base>
   46a3c:	mov	r0, #0
   46a40:	b	459b0 <__assert_fail@plt+0x347a4>
   46a44:	mov	r0, #10
   46a48:	bl	110c8 <putchar@plt>
   46a4c:	ldr	r3, [pc, #-1464]	; 4649c <__assert_fail@plt+0x35290>
   46a50:	ldr	r0, [r3]
   46a54:	bl	10f3c <fflush@plt>
   46a58:	b	46a20 <__assert_fail@plt+0x35814>
   46a5c:	mov	r2, #5
   46a60:	ldr	r1, [pc, #-1480]	; 464a0 <__assert_fail@plt+0x35294>
   46a64:	mov	r0, #0
   46a68:	bl	10f90 <dcgettext@plt>
   46a6c:	ldr	r3, [sp, #112]	; 0x70
   46a70:	ldr	r1, [r3, #8]
   46a74:	bl	548ac <error@@Base>
   46a78:	mov	r0, #0
   46a7c:	b	459b0 <__assert_fail@plt+0x347a4>
   46a80:	mov	r2, #5
   46a84:	ldr	r1, [pc, #-1512]	; 464a4 <__assert_fail@plt+0x35298>
   46a88:	b	45a24 <__assert_fail@plt+0x34818>
   46a8c:	mov	r2, #5
   46a90:	ldr	r1, [pc, #-1520]	; 464a8 <__assert_fail@plt+0x3529c>
   46a94:	mov	r0, r7
   46a98:	bl	10f90 <dcgettext@plt>
   46a9c:	ldr	r6, [sp, #80]	; 0x50
   46aa0:	mov	r2, r4
   46aa4:	mov	r1, r6
   46aa8:	bl	10f24 <printf@plt>
   46aac:	mov	r5, r7
   46ab0:	str	r6, [sp, #168]	; 0xa8
   46ab4:	b	46500 <__assert_fail@plt+0x352f4>
   46ab8:	ldr	r4, [sp, #104]	; 0x68
   46abc:	mov	r2, #5
   46ac0:	ldr	r1, [pc, #-1564]	; 464ac <__assert_fail@plt+0x352a0>
   46ac4:	mov	r0, r8
   46ac8:	str	r8, [r4, #1440]	; 0x5a0
   46acc:	bl	10f90 <dcgettext@plt>
   46ad0:	ldr	r1, [sp, #196]	; 0xc4
   46ad4:	bl	548ac <error@@Base>
   46ad8:	str	r8, [r4, #1488]	; 0x5d0
   46adc:	str	r8, [r4, #1520]	; 0x5f0
   46ae0:	mov	r0, r8
   46ae4:	b	459b0 <__assert_fail@plt+0x347a4>
   46ae8:	ldr	r3, [pc, #-1580]	; 464c4 <__assert_fail@plt+0x352b8>
   46aec:	ldr	r2, [pc, #-1604]	; 464b0 <__assert_fail@plt+0x352a4>
   46af0:	ldr	r1, [pc, #-1596]	; 464bc <__assert_fail@plt+0x352b0>
   46af4:	ldr	r0, [pc, #-1608]	; 464b4 <__assert_fail@plt+0x352a8>
   46af8:	bl	1120c <__assert_fail@plt>
   46afc:	ldr	r3, [pc, #-1600]	; 464c4 <__assert_fail@plt+0x352b8>
   46b00:	ldr	r2, [pc, #-1616]	; 464b8 <__assert_fail@plt+0x352ac>
   46b04:	ldr	r1, [pc, #-1616]	; 464bc <__assert_fail@plt+0x352b0>
   46b08:	ldr	r0, [pc, #-1616]	; 464c0 <__assert_fail@plt+0x352b4>
   46b0c:	bl	1120c <__assert_fail@plt>
   46b10:	ldr	r3, [pc, #-1616]	; 464c8 <__assert_fail@plt+0x352bc>
   46b14:	mov	r0, r4
   46b18:	add	r4, r5, #4
   46b1c:	ldr	r3, [r3]
   46b20:	blx	r3
   46b24:	cmp	r6, r4
   46b28:	sub	r3, r0, #2
   46b2c:	clz	r3, r3
   46b30:	lsr	r3, r3, #5
   46b34:	str	r0, [sp, #152]	; 0x98
   46b38:	str	r3, [sp, #320]	; 0x140
   46b3c:	bhi	45658 <__assert_fail@plt+0x3444c>
   46b40:	b	45f84 <__assert_fail@plt+0x34d78>
   46b44:	push	{lr}		; (str lr, [sp, #-4]!)
   46b48:	sub	sp, sp, #12
   46b4c:	mov	r3, #1
   46b50:	ldr	r2, [r0, #40]	; 0x28
   46b54:	str	r3, [sp]
   46b58:	mov	r3, #0
   46b5c:	bl	453fc <__assert_fail@plt+0x341f0>
   46b60:	add	sp, sp, #12
   46b64:	pop	{pc}		; (ldr pc, [sp], #4)
   46b68:	b	46b44 <__assert_fail@plt+0x35938>
   46b6c:	push	{lr}		; (str lr, [sp, #-4]!)
   46b70:	sub	sp, sp, #12
   46b74:	mov	r3, #0
   46b78:	ldr	r2, [r0, #40]	; 0x28
   46b7c:	str	r3, [sp]
   46b80:	bl	453fc <__assert_fail@plt+0x341f0>
   46b84:	add	sp, sp, #12
   46b88:	pop	{pc}		; (ldr pc, [sp], #4)
   46b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   46b90:	sub	sp, sp, #164	; 0xa4
   46b94:	ldr	ip, [r0, #16]
   46b98:	ldr	r3, [r0, #32]
   46b9c:	str	r0, [sp, #124]	; 0x7c
   46ba0:	add	r6, ip, r3
   46ba4:	mov	r4, r1
   46ba8:	add	r1, r0, #12
   46bac:	add	r0, r0, #8
   46bb0:	mov	r5, ip
   46bb4:	str	ip, [sp, #120]	; 0x78
   46bb8:	str	r6, [sp, #132]	; 0x84
   46bbc:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   46bc0:	mov	r1, r4
   46bc4:	mov	r0, #10
   46bc8:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   46bcc:	cmp	r5, r6
   46bd0:	bcs	47760 <__assert_fail@plt+0x36554>
   46bd4:	ldr	r3, [sp, #120]	; 0x78
   46bd8:	ldr	r2, [sp, #132]	; 0x84
   46bdc:	add	r5, r3, #4
   46be0:	cmp	r5, r2
   46be4:	bcc	46c84 <__assert_fail@plt+0x35a78>
   46be8:	sub	r1, r2, r3
   46bec:	sub	r3, r1, #1
   46bf0:	cmp	r3, #7
   46bf4:	movhi	r3, #4
   46bf8:	strhi	r3, [sp, #76]	; 0x4c
   46bfc:	bls	46c88 <__assert_fail@plt+0x35a7c>
   46c00:	ldr	r3, [sp, #124]	; 0x7c
   46c04:	mov	r1, #0
   46c08:	mov	r8, #0
   46c0c:	ldr	r0, [r3, #16]
   46c10:	mov	r9, #0
   46c14:	sub	r0, r5, r0
   46c18:	mov	ip, #0
   46c1c:	str	r5, [sp, #72]	; 0x48
   46c20:	ldr	r3, [sp, #124]	; 0x7c
   46c24:	ldrd	r2, [r3, #32]
   46c28:	cmp	r3, r1
   46c2c:	cmpeq	r2, r0
   46c30:	bcc	46cfc <__assert_fail@plt+0x35af0>
   46c34:	ldr	r3, [sp, #72]	; 0x48
   46c38:	add	r7, r5, #2
   46c3c:	cmp	r7, r3
   46c40:	bcc	46d5c <__assert_fail@plt+0x35b50>
   46c44:	cmp	r5, r3
   46c48:	bcc	47b70 <__assert_fail@plt+0x36964>
   46c4c:	ldr	r1, [pc, #4064]	; 47c34 <__assert_fail@plt+0x36a28>
   46c50:	mov	r2, #5
   46c54:	mov	r0, #0
   46c58:	bl	10f90 <dcgettext@plt>
   46c5c:	mov	r1, #0
   46c60:	bl	10f24 <printf@plt>
   46c64:	mov	r2, #5
   46c68:	ldr	r1, [pc, #4040]	; 47c38 <__assert_fail@plt+0x36a2c>
   46c6c:	mov	r0, #0
   46c70:	bl	10f90 <dcgettext@plt>
   46c74:	bl	54dd0 <warn@@Base>
   46c78:	mov	r0, #0
   46c7c:	add	sp, sp, #164	; 0xa4
   46c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46c84:	mov	r1, #4
   46c88:	ldr	r3, [pc, #4012]	; 47c3c <__assert_fail@plt+0x36a30>
   46c8c:	ldr	r0, [sp, #120]	; 0x78
   46c90:	str	r3, [sp, #104]	; 0x68
   46c94:	ldr	r3, [r3]
   46c98:	blx	r3
   46c9c:	mov	r3, #0
   46ca0:	mvn	r2, #0
   46ca4:	cmp	r1, r3
   46ca8:	cmpeq	r0, r2
   46cac:	movne	r3, #4
   46cb0:	mov	r8, r0
   46cb4:	mov	r9, r1
   46cb8:	strne	r3, [sp, #76]	; 0x4c
   46cbc:	beq	47bb8 <__assert_fail@plt+0x369ac>
   46cc0:	ldr	r3, [sp, #124]	; 0x7c
   46cc4:	mov	ip, r8
   46cc8:	ldr	r2, [r3, #16]
   46ccc:	mov	r3, #0
   46cd0:	sub	r2, r5, r2
   46cd4:	adds	r0, r2, r8
   46cd8:	adcs	r1, r3, r9
   46cdc:	add	r3, r5, r8
   46ce0:	mov	r2, #0
   46ce4:	str	r3, [sp, #72]	; 0x48
   46ce8:	movcs	r2, #1
   46cec:	mov	r3, #0
   46cf0:	movcs	r3, #0
   46cf4:	orrs	r3, r2, r3
   46cf8:	beq	46c20 <__assert_fail@plt+0x35a14>
   46cfc:	mov	r2, #5
   46d00:	ldr	r1, [pc, #3896]	; 47c40 <__assert_fail@plt+0x36a34>
   46d04:	mov	r0, #0
   46d08:	bl	10f90 <dcgettext@plt>
   46d0c:	ldr	r1, [sp, #124]	; 0x7c
   46d10:	mov	r4, #0
   46d14:	mov	r2, r8
   46d18:	ldr	r5, [r1, #16]
   46d1c:	ldr	r7, [r1, #8]
   46d20:	mov	r3, r9
   46d24:	str	r4, [sp]
   46d28:	mov	r6, r0
   46d2c:	ldr	r0, [sp, #120]	; 0x78
   46d30:	sub	r5, r0, r5
   46d34:	ldr	r0, [pc, #3848]	; 47c44 <__assert_fail@plt+0x36a38>
   46d38:	bl	3c744 <__assert_fail@plt+0x2b538>
   46d3c:	mov	r2, r5
   46d40:	mov	r1, r7
   46d44:	mov	r3, r0
   46d48:	mov	r0, r6
   46d4c:	bl	54dd0 <warn@@Base>
   46d50:	mov	r0, r4
   46d54:	add	sp, sp, #164	; 0xa4
   46d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   46d5c:	mov	r1, #2
   46d60:	ldr	r3, [pc, #3796]	; 47c3c <__assert_fail@plt+0x36a30>
   46d64:	mov	r0, r5
   46d68:	str	r3, [sp, #104]	; 0x68
   46d6c:	ldr	r3, [r3]
   46d70:	blx	r3
   46d74:	mov	r2, #5
   46d78:	ldr	r1, [pc, #3764]	; 47c34 <__assert_fail@plt+0x36a28>
   46d7c:	uxth	r4, r0
   46d80:	mov	r0, #0
   46d84:	bl	10f90 <dcgettext@plt>
   46d88:	mov	r1, r4
   46d8c:	bl	10f24 <printf@plt>
   46d90:	cmp	r4, #5
   46d94:	bne	46c64 <__assert_fail@plt+0x35a58>
   46d98:	ldr	r3, [sp, #72]	; 0x48
   46d9c:	add	r6, r5, #4
   46da0:	cmp	r6, r3
   46da4:	bcc	47b00 <__assert_fail@plt+0x368f4>
   46da8:	cmp	r7, r3
   46dac:	bcs	46dc0 <__assert_fail@plt+0x35bb4>
   46db0:	sub	r3, r8, #3
   46db4:	cmp	r3, #7
   46db8:	subls	r1, r8, #2
   46dbc:	bls	47b04 <__assert_fail@plt+0x368f8>
   46dc0:	ldr	r3, [sp, #72]	; 0x48
   46dc4:	add	r4, r5, #8
   46dc8:	cmp	r4, r3
   46dcc:	bcs	46df0 <__assert_fail@plt+0x35be4>
   46dd0:	mov	r1, #4
   46dd4:	ldr	r3, [sp, #104]	; 0x68
   46dd8:	mov	r0, r6
   46ddc:	ldr	r3, [r3]
   46de0:	blx	r3
   46de4:	subs	r3, r0, #0
   46de8:	mov	sl, r3
   46dec:	bne	46e0c <__assert_fail@plt+0x35c00>
   46df0:	mov	r2, #5
   46df4:	ldr	r1, [pc, #3660]	; 47c48 <__assert_fail@plt+0x36a3c>
   46df8:	mov	r0, #0
   46dfc:	bl	10f90 <dcgettext@plt>
   46e00:	bl	54dd0 <warn@@Base>
   46e04:	mov	r3, #0
   46e08:	mov	sl, r3
   46e0c:	ldr	r3, [sp, #72]	; 0x48
   46e10:	add	r7, r5, #12
   46e14:	cmp	r7, r3
   46e18:	bcc	47ab4 <__assert_fail@plt+0x368a8>
   46e1c:	cmp	r4, r3
   46e20:	bcs	46e34 <__assert_fail@plt+0x35c28>
   46e24:	sub	r1, r3, r4
   46e28:	sub	r3, r1, #1
   46e2c:	cmp	r3, #7
   46e30:	bls	47ab8 <__assert_fail@plt+0x368ac>
   46e34:	ldr	r3, [sp, #72]	; 0x48
   46e38:	add	r6, r5, #16
   46e3c:	cmp	r3, r6
   46e40:	mov	r3, #0
   46e44:	str	r3, [sp, #56]	; 0x38
   46e48:	bhi	47a68 <__assert_fail@plt+0x3685c>
   46e4c:	ldr	r3, [sp, #72]	; 0x48
   46e50:	add	r4, r5, #20
   46e54:	cmp	r3, r4
   46e58:	mov	r9, #0
   46e5c:	bhi	4793c <__assert_fail@plt+0x36730>
   46e60:	ldr	r3, [sp, #72]	; 0x48
   46e64:	add	r7, r5, #24
   46e68:	cmp	r3, r7
   46e6c:	mov	r3, #0
   46e70:	str	r3, [sp, #92]	; 0x5c
   46e74:	str	r3, [sp, #68]	; 0x44
   46e78:	bhi	479f0 <__assert_fail@plt+0x367e4>
   46e7c:	ldr	r3, [sp, #72]	; 0x48
   46e80:	add	r6, r5, #28
   46e84:	cmp	r6, r3
   46e88:	mov	r3, #0
   46e8c:	str	r3, [sp, #88]	; 0x58
   46e90:	str	r3, [sp, #84]	; 0x54
   46e94:	str	r3, [sp, #128]	; 0x80
   46e98:	bcc	479c0 <__assert_fail@plt+0x367b4>
   46e9c:	ldr	r3, [sp, #72]	; 0x48
   46ea0:	add	r4, r5, #32
   46ea4:	cmp	r4, r3
   46ea8:	bcs	47b4c <__assert_fail@plt+0x36940>
   46eac:	mov	r1, #4
   46eb0:	mov	r3, #0
   46eb4:	str	r3, [sp, #80]	; 0x50
   46eb8:	ldr	r3, [sp, #104]	; 0x68
   46ebc:	mov	r0, r6
   46ec0:	ldr	r3, [r3]
   46ec4:	blx	r3
   46ec8:	tst	r0, #3
   46ecc:	mov	r8, r0
   46ed0:	beq	46ef8 <__assert_fail@plt+0x35cec>
   46ed4:	mov	r2, #5
   46ed8:	ldr	r1, [pc, #3436]	; 47c4c <__assert_fail@plt+0x36a40>
   46edc:	mov	r0, #0
   46ee0:	bl	10f90 <dcgettext@plt>
   46ee4:	mov	r1, r8
   46ee8:	bl	54dd0 <warn@@Base>
   46eec:	rsb	r3, r8, #0
   46ef0:	and	r3, r3, #3
   46ef4:	add	r8, r8, r3
   46ef8:	mov	r2, #5
   46efc:	ldr	r1, [pc, #3404]	; 47c50 <__assert_fail@plt+0x36a44>
   46f00:	mov	r0, #0
   46f04:	bl	10f90 <dcgettext@plt>
   46f08:	bl	10f24 <printf@plt>
   46f0c:	cmp	r8, #0
   46f10:	beq	47d04 <__assert_fail@plt+0x36af8>
   46f14:	mov	fp, r9
   46f18:	ldr	r5, [pc, #3380]	; 47c54 <__assert_fail@plt+0x36a48>
   46f1c:	add	r8, r4, r8
   46f20:	ldr	r7, [sp, #72]	; 0x48
   46f24:	ldr	r9, [sp, #104]	; 0x68
   46f28:	b	46f5c <__assert_fail@plt+0x35d50>
   46f2c:	cmp	r7, r4
   46f30:	bls	46f44 <__assert_fail@plt+0x35d38>
   46f34:	sub	r1, r7, r4
   46f38:	sub	r3, r1, #1
   46f3c:	cmp	r3, #7
   46f40:	bls	46f6c <__assert_fail@plt+0x35d60>
   46f44:	mov	r1, #0
   46f48:	mov	r0, r5
   46f4c:	bl	10f24 <printf@plt>
   46f50:	cmp	r8, r6
   46f54:	mov	r4, r6
   46f58:	beq	46f80 <__assert_fail@plt+0x35d74>
   46f5c:	add	r6, r4, #1
   46f60:	cmp	r6, r7
   46f64:	bcs	46f2c <__assert_fail@plt+0x35d20>
   46f68:	mov	r1, #1
   46f6c:	mov	r0, r4
   46f70:	ldr	r3, [r9]
   46f74:	blx	r3
   46f78:	uxtb	r1, r0
   46f7c:	b	46f48 <__assert_fail@plt+0x35d3c>
   46f80:	mov	r9, fp
   46f84:	ldr	r3, [pc, #3276]	; 47c58 <__assert_fail@plt+0x36a4c>
   46f88:	mov	r0, #10
   46f8c:	mov	r4, r3
   46f90:	ldr	r1, [r3]
   46f94:	bl	11158 <putc@plt>
   46f98:	ldr	r1, [r4]
   46f9c:	mov	r0, #10
   46fa0:	bl	11158 <putc@plt>
   46fa4:	mov	r2, #5
   46fa8:	ldr	r1, [pc, #3244]	; 47c5c <__assert_fail@plt+0x36a50>
   46fac:	mov	r0, #0
   46fb0:	bl	10f90 <dcgettext@plt>
   46fb4:	bl	10f24 <printf@plt>
   46fb8:	cmp	sl, #0
   46fbc:	beq	4705c <__assert_fail@plt+0x35e50>
   46fc0:	mov	r0, r8
   46fc4:	str	r8, [sp, #96]	; 0x60
   46fc8:	ldr	r7, [pc, #3216]	; 47c60 <__assert_fail@plt+0x36a54>
   46fcc:	mov	r4, #0
   46fd0:	ldr	r6, [sp, #76]	; 0x4c
   46fd4:	ldr	r8, [sp, #72]	; 0x48
   46fd8:	str	r9, [sp, #100]	; 0x64
   46fdc:	ldr	fp, [sp, #104]	; 0x68
   46fe0:	b	47030 <__assert_fail@plt+0x35e24>
   46fe4:	sub	r3, r5, r6
   46fe8:	cmp	r8, r3
   46fec:	bls	47000 <__assert_fail@plt+0x35df4>
   46ff0:	sub	r1, r8, r0
   46ff4:	sub	r3, r1, #1
   46ff8:	cmp	r3, #7
   46ffc:	bls	47040 <__assert_fail@plt+0x35e34>
   47000:	mov	r9, #0
   47004:	mov	r2, #5
   47008:	mov	r1, r7
   4700c:	mov	r0, #0
   47010:	bl	10f90 <dcgettext@plt>
   47014:	mov	r1, r4
   47018:	mov	r2, r9
   4701c:	add	r4, r4, #1
   47020:	bl	10f24 <printf@plt>
   47024:	cmp	sl, r4
   47028:	mov	r0, r5
   4702c:	beq	47050 <__assert_fail@plt+0x35e44>
   47030:	add	r5, r0, r6
   47034:	cmp	r5, r8
   47038:	bcs	46fe4 <__assert_fail@plt+0x35dd8>
   4703c:	mov	r1, r6
   47040:	ldr	r3, [fp]
   47044:	blx	r3
   47048:	mov	r9, r0
   4704c:	b	47004 <__assert_fail@plt+0x35df8>
   47050:	ldrd	r8, [sp, #96]	; 0x60
   47054:	ldr	r2, [sp, #76]	; 0x4c
   47058:	mla	r8, r2, sl, r8
   4705c:	ldr	r3, [pc, #3060]	; 47c58 <__assert_fail@plt+0x36a4c>
   47060:	mov	r0, #10
   47064:	ldr	r1, [r3]
   47068:	bl	11158 <putc@plt>
   4706c:	mov	r2, #5
   47070:	ldr	r1, [pc, #3052]	; 47c64 <__assert_fail@plt+0x36a58>
   47074:	mov	r0, #0
   47078:	bl	10f90 <dcgettext@plt>
   4707c:	bl	10f24 <printf@plt>
   47080:	ldr	r3, [sp, #56]	; 0x38
   47084:	cmp	r3, #0
   47088:	beq	4712c <__assert_fail@plt+0x35f20>
   4708c:	mov	r0, r8
   47090:	mov	sl, r8
   47094:	ldr	r7, [pc, #3012]	; 47c60 <__assert_fail@plt+0x36a54>
   47098:	mov	r4, #0
   4709c:	ldr	r6, [sp, #76]	; 0x4c
   470a0:	ldr	r8, [sp, #72]	; 0x48
   470a4:	str	r9, [sp, #96]	; 0x60
   470a8:	ldr	fp, [sp, #104]	; 0x68
   470ac:	b	47100 <__assert_fail@plt+0x35ef4>
   470b0:	sub	r3, r5, r6
   470b4:	cmp	r8, r3
   470b8:	bls	470cc <__assert_fail@plt+0x35ec0>
   470bc:	sub	r1, r8, r0
   470c0:	sub	r3, r1, #1
   470c4:	cmp	r3, #7
   470c8:	bls	47110 <__assert_fail@plt+0x35f04>
   470cc:	mov	r9, #0
   470d0:	mov	r2, #5
   470d4:	mov	r1, r7
   470d8:	mov	r0, #0
   470dc:	bl	10f90 <dcgettext@plt>
   470e0:	mov	r1, r4
   470e4:	mov	r2, r9
   470e8:	bl	10f24 <printf@plt>
   470ec:	ldr	r3, [sp, #56]	; 0x38
   470f0:	add	r4, r4, #1
   470f4:	cmp	r4, r3
   470f8:	mov	r0, r5
   470fc:	beq	47120 <__assert_fail@plt+0x35f14>
   47100:	add	r5, r0, r6
   47104:	cmp	r5, r8
   47108:	bcs	470b0 <__assert_fail@plt+0x35ea4>
   4710c:	mov	r1, r6
   47110:	ldr	r3, [fp]
   47114:	blx	r3
   47118:	mov	r9, r0
   4711c:	b	470d0 <__assert_fail@plt+0x35ec4>
   47120:	ldr	r3, [sp, #76]	; 0x4c
   47124:	ldr	r9, [sp, #96]	; 0x60
   47128:	mla	r8, r3, r4, sl
   4712c:	ldr	r3, [pc, #2852]	; 47c58 <__assert_fail@plt+0x36a4c>
   47130:	mov	r0, #10
   47134:	ldr	r1, [r3]
   47138:	bl	11158 <putc@plt>
   4713c:	mov	r2, #5
   47140:	ldr	r1, [pc, #2848]	; 47c68 <__assert_fail@plt+0x36a5c>
   47144:	mov	r0, #0
   47148:	bl	10f90 <dcgettext@plt>
   4714c:	bl	10f24 <printf@plt>
   47150:	cmp	r9, #0
   47154:	beq	47200 <__assert_fail@plt+0x35ff4>
   47158:	mov	r0, r8
   4715c:	mov	sl, r8
   47160:	mov	r6, #0
   47164:	ldr	r7, [sp, #72]	; 0x48
   47168:	ldr	r8, [sp, #104]	; 0x68
   4716c:	b	471d8 <__assert_fail@plt+0x35fcc>
   47170:	cmp	r7, r0
   47174:	bls	47188 <__assert_fail@plt+0x35f7c>
   47178:	sub	r1, r7, r0
   4717c:	sub	r2, r1, #1
   47180:	cmp	r2, #7
   47184:	bls	471e8 <__assert_fail@plt+0x35fdc>
   47188:	mov	r4, #0
   4718c:	mov	r5, #0
   47190:	mov	r2, #5
   47194:	ldr	r1, [pc, #2768]	; 47c6c <__assert_fail@plt+0x36a60>
   47198:	mov	r0, #0
   4719c:	bl	10f90 <dcgettext@plt>
   471a0:	mov	r1, r6
   471a4:	bl	10f24 <printf@plt>
   471a8:	mov	r0, r4
   471ac:	mov	r1, r5
   471b0:	mov	r2, #8
   471b4:	bl	3ca6c <__assert_fail@plt+0x2b860>
   471b8:	ldr	r3, [pc, #2712]	; 47c58 <__assert_fail@plt+0x36a4c>
   471bc:	add	r6, r6, #1
   471c0:	mov	r0, #10
   471c4:	ldr	r1, [r3]
   471c8:	bl	11158 <putc@plt>
   471cc:	cmp	r6, r9
   471d0:	mov	r0, fp
   471d4:	beq	471fc <__assert_fail@plt+0x35ff0>
   471d8:	add	fp, r0, #8
   471dc:	cmp	fp, r7
   471e0:	bcs	47170 <__assert_fail@plt+0x35f64>
   471e4:	mov	r1, #8
   471e8:	ldr	r2, [r8]
   471ec:	blx	r2
   471f0:	mov	r4, r0
   471f4:	mov	r5, r1
   471f8:	b	47190 <__assert_fail@plt+0x35f84>
   471fc:	add	r8, sl, r6, lsl #3
   47200:	ldr	r3, [sp, #92]	; 0x5c
   47204:	ldr	r2, [sp, #84]	; 0x54
   47208:	add	r3, r8, r3
   4720c:	str	r3, [sp, #92]	; 0x5c
   47210:	add	r3, r3, r2
   47214:	ldr	r2, [sp, #88]	; 0x58
   47218:	str	r3, [sp, #96]	; 0x60
   4721c:	add	r3, r3, r2
   47220:	add	r6, r3, r2
   47224:	str	r3, [sp, #88]	; 0x58
   47228:	ldr	r3, [sp, #80]	; 0x50
   4722c:	mov	r0, #10
   47230:	add	r9, r6, r3
   47234:	ldr	r3, [pc, #2588]	; 47c58 <__assert_fail@plt+0x36a4c>
   47238:	ldr	r1, [r3]
   4723c:	bl	11158 <putc@plt>
   47240:	ldr	r3, [sp, #72]	; 0x48
   47244:	cmp	r9, r3
   47248:	bhi	47cc8 <__assert_fail@plt+0x36abc>
   4724c:	ldr	r3, [sp, #68]	; 0x44
   47250:	cmp	r3, #0
   47254:	moveq	r8, r3
   47258:	beq	47284 <__assert_fail@plt+0x36078>
   4725c:	ldr	r3, [sp, #68]	; 0x44
   47260:	add	r1, r8, r3, lsl #2
   47264:	sub	r1, r1, #4
   47268:	sub	r3, r8, #4
   4726c:	mov	r8, #0
   47270:	ldr	r2, [r3, #4]!
   47274:	cmp	r2, #0
   47278:	addne	r8, r8, #1
   4727c:	cmp	r3, r1
   47280:	bne	47270 <__assert_fail@plt+0x36064>
   47284:	ldr	r4, [sp, #68]	; 0x44
   47288:	mov	r3, #5
   4728c:	str	r3, [sp]
   47290:	ldr	r2, [pc, #2520]	; 47c70 <__assert_fail@plt+0x36a64>
   47294:	mov	r3, r4
   47298:	ldr	r1, [pc, #2516]	; 47c74 <__assert_fail@plt+0x36a68>
   4729c:	mov	r0, #0
   472a0:	bl	11200 <dcngettext@plt>
   472a4:	mov	r2, r4
   472a8:	mov	r1, r8
   472ac:	bl	10f24 <printf@plt>
   472b0:	ldr	r3, [sp, #128]	; 0x80
   472b4:	cmp	r3, #0
   472b8:	moveq	r4, r3
   472bc:	moveq	sl, r3
   472c0:	beq	47364 <__assert_fail@plt+0x36158>
   472c4:	ldr	r2, [sp, #128]	; 0x80
   472c8:	ldr	r3, [sp, #92]	; 0x5c
   472cc:	str	r8, [sp, #56]	; 0x38
   472d0:	add	r7, r3, r2, lsl #2
   472d4:	sub	r1, r7, #4
   472d8:	mov	r2, #0
   472dc:	str	r6, [sp, #80]	; 0x50
   472e0:	mov	fp, r2
   472e4:	mov	sl, r2
   472e8:	ldr	r0, [r3]
   472ec:	mov	r8, r3
   472f0:	mov	r7, r1
   472f4:	mov	r6, r2
   472f8:	str	r9, [sp, #84]	; 0x54
   472fc:	ldr	r5, [sp, #68]	; 0x44
   47300:	b	47308 <__assert_fail@plt+0x360fc>
   47304:	mov	r0, r4
   47308:	cmp	r7, r8
   4730c:	beq	47350 <__assert_fail@plt+0x36144>
   47310:	mov	r1, r5
   47314:	bl	588cc <warn@@Base+0x3afc>
   47318:	ldr	r4, [r8, #4]!
   4731c:	mov	r0, r4
   47320:	mov	r9, r1
   47324:	mov	r1, r5
   47328:	bl	588cc <warn@@Base+0x3afc>
   4732c:	cmp	r9, r1
   47330:	movne	r6, #0
   47334:	bne	47304 <__assert_fail@plt+0x360f8>
   47338:	add	r6, r6, #1
   4733c:	cmp	fp, r6
   47340:	add	r3, sl, #1
   47344:	movcc	fp, r6
   47348:	mov	sl, r3
   4734c:	b	47304 <__assert_fail@plt+0x360f8>
   47350:	ldr	r8, [sp, #56]	; 0x38
   47354:	ldr	r6, [sp, #80]	; 0x50
   47358:	ldr	r9, [sp, #84]	; 0x54
   4735c:	mov	r4, fp
   47360:	add	r8, r8, sl
   47364:	mov	r2, #5
   47368:	ldr	r1, [pc, #2312]	; 47c78 <__assert_fail@plt+0x36a6c>
   4736c:	mov	r0, #0
   47370:	bl	10f90 <dcgettext@plt>
   47374:	mov	r3, r4
   47378:	ldr	r4, [sp, #128]	; 0x80
   4737c:	mov	r2, sl
   47380:	mov	r1, r4
   47384:	bl	10f24 <printf@plt>
   47388:	cmp	r4, r8
   4738c:	bne	47d0c <__assert_fail@plt+0x36b00>
   47390:	mov	r3, #0
   47394:	ldrd	r4, [sp, #136]	; 0x88
   47398:	mov	r7, r3
   4739c:	str	r3, [sp, #80]	; 0x50
   473a0:	str	r3, [sp, #68]	; 0x44
   473a4:	mov	r3, r9
   473a8:	mov	r2, #0
   473ac:	mov	r0, r6
   473b0:	add	r1, sp, #156	; 0x9c
   473b4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   473b8:	ldr	r3, [sp, #156]	; 0x9c
   473bc:	add	r6, r6, r3
   473c0:	orrs	r2, r0, r1
   473c4:	strd	r0, [sp, #56]	; 0x38
   473c8:	beq	47514 <__assert_fail@plt+0x36308>
   473cc:	ldr	r3, [sp, #68]	; 0x44
   473d0:	ldr	r2, [sp, #80]	; 0x50
   473d4:	cmp	r3, r2
   473d8:	beq	474f0 <__assert_fail@plt+0x362e4>
   473dc:	ldr	r3, [sp, #68]	; 0x44
   473e0:	ldr	r2, [sp, #80]	; 0x50
   473e4:	cmp	r3, r2
   473e8:	bcs	47c20 <__assert_fail@plt+0x36a14>
   473ec:	lsl	r0, r3, #4
   473f0:	add	r8, r7, r0
   473f4:	cmp	r7, r8
   473f8:	bcs	4743c <__assert_fail@plt+0x36230>
   473fc:	ldrd	r2, [r7]
   47400:	ldrd	sl, [sp, #56]	; 0x38
   47404:	cmp	fp, r3
   47408:	cmpeq	sl, r2
   4740c:	beq	474c4 <__assert_fail@plt+0x362b8>
   47410:	sub	r0, r0, #16
   47414:	add	r0, r0, r7
   47418:	mov	r1, r7
   4741c:	ldrd	sl, [sp, #56]	; 0x38
   47420:	b	47434 <__assert_fail@plt+0x36228>
   47424:	ldrd	r2, [r1, #16]!
   47428:	cmp	r3, fp
   4742c:	cmpeq	r2, sl
   47430:	beq	474c4 <__assert_fail@plt+0x362b8>
   47434:	cmp	r0, r1
   47438:	bne	47424 <__assert_fail@plt+0x36218>
   4743c:	ldrd	r2, [sp, #56]	; 0x38
   47440:	str	r6, [r8, #8]
   47444:	mov	r0, r6
   47448:	strd	r2, [r8]
   4744c:	add	r1, sp, #156	; 0x9c
   47450:	mov	r3, r9
   47454:	mov	r2, #0
   47458:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4745c:	ldr	r3, [sp, #156]	; 0x9c
   47460:	ldr	r2, [sp, #68]	; 0x44
   47464:	add	r6, r6, r3
   47468:	add	r2, r2, #1
   4746c:	str	r2, [sp, #68]	; 0x44
   47470:	mov	r3, r9
   47474:	mov	r2, #0
   47478:	mov	r0, r6
   4747c:	add	r1, sp, #156	; 0x9c
   47480:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   47484:	ldr	r2, [sp, #156]	; 0x9c
   47488:	mov	r3, r9
   4748c:	add	r6, r6, r2
   47490:	mov	r2, #0
   47494:	mov	sl, r0
   47498:	mov	r8, r1
   4749c:	mov	r0, r6
   474a0:	add	r1, sp, #156	; 0x9c
   474a4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   474a8:	ldr	r3, [sp, #156]	; 0x9c
   474ac:	add	r6, r6, r3
   474b0:	orr	r4, r0, sl
   474b4:	orr	r5, r1, r8
   474b8:	orrs	r3, r4, r5
   474bc:	bne	47470 <__assert_fail@plt+0x36264>
   474c0:	b	473a4 <__assert_fail@plt+0x36198>
   474c4:	mov	r2, #5
   474c8:	ldr	r1, [pc, #1964]	; 47c7c <__assert_fail@plt+0x36a70>
   474cc:	mov	r0, #0
   474d0:	bl	10f90 <dcgettext@plt>
   474d4:	ldr	r3, [sp, #124]	; 0x7c
   474d8:	ldr	r1, [sp, #56]	; 0x38
   474dc:	ldr	r2, [r3, #16]
   474e0:	ldr	r3, [sp, #120]	; 0x78
   474e4:	sub	r2, r3, r2
   474e8:	bl	54dd0 <warn@@Base>
   474ec:	b	4743c <__assert_fail@plt+0x36230>
   474f0:	lsl	r3, r3, #1
   474f4:	cmp	r3, #256	; 0x100
   474f8:	movcc	r3, #256	; 0x100
   474fc:	mov	r0, r7
   47500:	lsl	r1, r3, #4
   47504:	str	r3, [sp, #80]	; 0x50
   47508:	bl	58678 <warn@@Base+0x38a8>
   4750c:	mov	r7, r0
   47510:	b	473dc <__assert_fail@plt+0x361d0>
   47514:	mov	r2, #5
   47518:	ldr	r1, [pc, #1888]	; 47c80 <__assert_fail@plt+0x36a74>
   4751c:	mov	r0, #0
   47520:	str	r7, [sp, #80]	; 0x50
   47524:	strd	r4, [sp, #136]	; 0x88
   47528:	ldr	r7, [sp, #68]	; 0x44
   4752c:	bl	10f90 <dcgettext@plt>
   47530:	bl	10f24 <printf@plt>
   47534:	ldr	r3, [sp, #128]	; 0x80
   47538:	cmp	r3, #0
   4753c:	beq	47740 <__assert_fail@plt+0x36534>
   47540:	ldr	r3, [sp, #80]	; 0x50
   47544:	ldrd	sl, [sp, #144]	; 0x90
   47548:	add	r3, r3, r7, lsl #4
   4754c:	str	r3, [sp, #84]	; 0x54
   47550:	ldr	r3, [sp, #92]	; 0x5c
   47554:	str	r9, [sp, #68]	; 0x44
   47558:	sub	r3, r3, #4
   4755c:	str	r3, [sp, #116]	; 0x74
   47560:	ldr	r3, [sp, #88]	; 0x58
   47564:	str	r3, [sp, #108]	; 0x6c
   47568:	ldr	r3, [sp, #96]	; 0x60
   4756c:	str	r3, [sp, #112]	; 0x70
   47570:	mov	r3, #0
   47574:	str	r3, [sp, #100]	; 0x64
   47578:	ldr	r3, [sp, #112]	; 0x70
   4757c:	ldr	r2, [sp, #76]	; 0x4c
   47580:	mov	r0, r3
   47584:	add	r3, r3, r2
   47588:	ldr	r2, [sp, #72]	; 0x48
   4758c:	str	r3, [sp, #112]	; 0x70
   47590:	cmp	r2, r3
   47594:	bhi	47908 <__assert_fail@plt+0x366fc>
   47598:	cmp	r0, r2
   4759c:	bcs	475b0 <__assert_fail@plt+0x363a4>
   475a0:	sub	r1, r2, r0
   475a4:	sub	r3, r1, #1
   475a8:	cmp	r3, #7
   475ac:	bls	4790c <__assert_fail@plt+0x36700>
   475b0:	mov	r4, #0
   475b4:	mov	r5, #0
   475b8:	ldr	r3, [sp, #108]	; 0x6c
   475bc:	ldr	r2, [sp, #76]	; 0x4c
   475c0:	mov	r0, r3
   475c4:	add	r3, r3, r2
   475c8:	ldr	r2, [sp, #72]	; 0x48
   475cc:	str	r3, [sp, #108]	; 0x6c
   475d0:	cmp	r2, r3
   475d4:	bhi	478e8 <__assert_fail@plt+0x366dc>
   475d8:	cmp	r0, r2
   475dc:	bcs	475f0 <__assert_fail@plt+0x363e4>
   475e0:	sub	r1, r2, r0
   475e4:	sub	r3, r1, #1
   475e8:	cmp	r3, #7
   475ec:	bls	478ec <__assert_fail@plt+0x366e0>
   475f0:	ldr	r3, [sp, #68]	; 0x44
   475f4:	str	r3, [sp, #96]	; 0x60
   475f8:	ldr	r3, [sp, #116]	; 0x74
   475fc:	mov	r0, r4
   47600:	mov	r1, r5
   47604:	ldr	r4, [r3, #4]!
   47608:	mvn	r9, #1
   4760c:	str	r3, [sp, #116]	; 0x74
   47610:	bl	3dcf4 <__assert_fail@plt+0x2cae8>
   47614:	mov	r2, r4
   47618:	ldr	r1, [sp, #100]	; 0x64
   4761c:	mov	r3, r0
   47620:	ldr	r0, [pc, #1628]	; 47c84 <__assert_fail@plt+0x36a78>
   47624:	bl	10f24 <printf@plt>
   47628:	ldr	r8, [sp, #96]	; 0x60
   4762c:	mvn	r3, #0
   47630:	str	r3, [sp, #88]	; 0x58
   47634:	str	r3, [sp, #92]	; 0x5c
   47638:	ldr	r3, [sp, #72]	; 0x48
   4763c:	mov	r2, #0
   47640:	add	r1, sp, #156	; 0x9c
   47644:	mov	r0, r8
   47648:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4764c:	cmn	r9, #1
   47650:	mov	r6, r0
   47654:	mov	r7, r1
   47658:	beq	478d8 <__assert_fail@plt+0x366cc>
   4765c:	orrs	r3, r6, r7
   47660:	beq	4770c <__assert_fail@plt+0x36500>
   47664:	cmp	r9, #0
   47668:	ldr	r5, [sp, #156]	; 0x9c
   4766c:	blt	476a4 <__assert_fail@plt+0x36498>
   47670:	ldr	r2, [sp, #88]	; 0x58
   47674:	ldr	r0, [sp, #92]	; 0x5c
   47678:	moveq	r3, #1
   4767c:	movne	r3, #0
   47680:	orrs	r2, r2, r0
   47684:	movne	r3, #0
   47688:	ldr	r2, [pc, #1528]	; 47c88 <__assert_fail@plt+0x36a7c>
   4768c:	cmp	r3, #0
   47690:	ldr	r1, [pc, #1524]	; 47c8c <__assert_fail@plt+0x36a80>
   47694:	ldr	r0, [pc, #1524]	; 47c90 <__assert_fail@plt+0x36a84>
   47698:	moveq	r1, r2
   4769c:	mov	r2, r6
   476a0:	bl	10f24 <printf@plt>
   476a4:	ldr	r1, [sp, #80]	; 0x50
   476a8:	ldr	r0, [sp, #84]	; 0x54
   476ac:	cmp	r1, r0
   476b0:	bcs	476e4 <__assert_fail@plt+0x364d8>
   476b4:	ldrd	r2, [r1]
   476b8:	cmp	r7, r3
   476bc:	cmpeq	r6, r2
   476c0:	bne	476d8 <__assert_fail@plt+0x364cc>
   476c4:	b	4776c <__assert_fail@plt+0x36560>
   476c8:	ldrd	r2, [r1]
   476cc:	cmp	r3, r7
   476d0:	cmpeq	r2, r6
   476d4:	beq	47770 <__assert_fail@plt+0x36564>
   476d8:	add	r1, r1, #16
   476dc:	cmp	r1, r0
   476e0:	bcc	476c8 <__assert_fail@plt+0x364bc>
   476e4:	mov	r2, #5
   476e8:	ldr	r1, [pc, #1444]	; 47c94 <__assert_fail@plt+0x36a88>
   476ec:	mov	r0, #0
   476f0:	bl	10f90 <dcgettext@plt>
   476f4:	ldr	r3, [sp, #124]	; 0x7c
   476f8:	mov	r1, r6
   476fc:	ldr	r2, [r3, #16]
   47700:	ldr	r3, [sp, #120]	; 0x78
   47704:	sub	r2, r3, r2
   47708:	bl	54dd0 <warn@@Base>
   4770c:	cmp	r9, #0
   47710:	ble	47924 <__assert_fail@plt+0x36718>
   47714:	ldr	r3, [sp, #100]	; 0x64
   47718:	mov	r0, #10
   4771c:	add	r4, r3, #1
   47720:	ldr	r3, [pc, #1328]	; 47c58 <__assert_fail@plt+0x36a4c>
   47724:	str	r4, [sp, #100]	; 0x64
   47728:	ldr	r1, [r3]
   4772c:	bl	11158 <putc@plt>
   47730:	ldr	r3, [sp, #128]	; 0x80
   47734:	cmp	r3, r4
   47738:	bne	47578 <__assert_fail@plt+0x3636c>
   4773c:	strd	sl, [sp, #144]	; 0x90
   47740:	ldr	r3, [sp, #72]	; 0x48
   47744:	ldr	r0, [sp, #80]	; 0x50
   47748:	mov	r4, r3
   4774c:	str	r3, [sp, #120]	; 0x78
   47750:	bl	10f54 <free@plt>
   47754:	ldr	r2, [sp, #132]	; 0x84
   47758:	cmp	r2, r4
   4775c:	bhi	46bd4 <__assert_fail@plt+0x359c8>
   47760:	mov	r0, #1
   47764:	add	sp, sp, #164	; 0xa4
   47768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4776c:	ldr	r1, [sp, #80]	; 0x50
   47770:	ldr	r4, [r1, #8]
   47774:	ldr	r3, [sp, #68]	; 0x44
   47778:	mov	r0, r4
   4777c:	mov	r2, #0
   47780:	add	r1, sp, #156	; 0x9c
   47784:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   47788:	ldr	r3, [sp, #156]	; 0x9c
   4778c:	cmp	r9, #0
   47790:	add	r4, r4, r3
   47794:	blt	477a8 <__assert_fail@plt+0x3659c>
   47798:	bl	3dee4 <__assert_fail@plt+0x2ccd8>
   4779c:	mov	r1, r0
   477a0:	ldr	r0, [pc, #1264]	; 47c98 <__assert_fail@plt+0x36a8c>
   477a4:	bl	10f24 <printf@plt>
   477a8:	add	r8, r8, r5
   477ac:	str	r9, [sp, #56]	; 0x38
   477b0:	mov	r5, #0
   477b4:	mov	r9, r8
   477b8:	b	47820 <__assert_fail@plt+0x36614>
   477bc:	ldr	r1, [sp, #76]	; 0x4c
   477c0:	ldr	r3, [sp, #56]	; 0x38
   477c4:	mov	r0, #0
   477c8:	str	r1, [sp, #24]
   477cc:	mov	r1, #0
   477d0:	lsr	r2, r3, #31
   477d4:	strd	r0, [sp, #16]
   477d8:	strd	r0, [sp, #8]
   477dc:	ldr	r1, [sp, #72]	; 0x48
   477e0:	mov	ip, #61	; 0x3d
   477e4:	mov	r3, #5
   477e8:	str	r1, [sp, #4]
   477ec:	str	r9, [sp]
   477f0:	str	r2, [sp, #40]	; 0x28
   477f4:	str	r3, [sp, #32]
   477f8:	str	r5, [sp, #48]	; 0x30
   477fc:	str	r5, [sp, #44]	; 0x2c
   47800:	str	r5, [sp, #36]	; 0x24
   47804:	str	r5, [sp, #28]
   47808:	mov	r1, r6
   4780c:	str	ip, [sp, #52]	; 0x34
   47810:	mov	r2, #0
   47814:	mov	r3, #0
   47818:	bl	4276c <__assert_fail@plt+0x31560>
   4781c:	mov	r9, r0
   47820:	ldr	r6, [sp, #68]	; 0x44
   47824:	mov	r2, #0
   47828:	mov	r3, r6
   4782c:	mov	r0, r4
   47830:	add	r1, sp, #156	; 0x9c
   47834:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   47838:	ldr	r2, [sp, #156]	; 0x9c
   4783c:	mov	r3, r6
   47840:	add	r4, r4, r2
   47844:	mov	r2, #0
   47848:	mov	r7, r0
   4784c:	mov	r8, r1
   47850:	mov	r0, r4
   47854:	add	r1, sp, #156	; 0x9c
   47858:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4785c:	ldr	r3, [sp, #156]	; 0x9c
   47860:	add	r4, r4, r3
   47864:	orr	sl, r0, r7
   47868:	orr	fp, r1, r8
   4786c:	orrs	r3, sl, fp
   47870:	mov	r6, r0
   47874:	beq	478a0 <__assert_fail@plt+0x36694>
   47878:	ldr	r3, [sp, #56]	; 0x38
   4787c:	cmp	r3, #0
   47880:	blt	477bc <__assert_fail@plt+0x365b0>
   47884:	mov	r0, r7
   47888:	bl	583c0 <warn@@Base+0x35f0>
   4788c:	subs	r1, r0, #0
   47890:	beq	478b0 <__assert_fail@plt+0x366a4>
   47894:	ldr	r0, [pc, #1020]	; 47c98 <__assert_fail@plt+0x36a8c>
   47898:	bl	10f24 <printf@plt>
   4789c:	b	477bc <__assert_fail@plt+0x365b0>
   478a0:	mov	r8, r9
   478a4:	ldr	r9, [sp, #56]	; 0x38
   478a8:	add	r9, r9, #1
   478ac:	b	47638 <__assert_fail@plt+0x3642c>
   478b0:	mov	r2, #5
   478b4:	ldr	r1, [pc, #992]	; 47c9c <__assert_fail@plt+0x36a90>
   478b8:	bl	10f90 <dcgettext@plt>
   478bc:	mov	r1, #100	; 0x64
   478c0:	mov	r3, r7
   478c4:	mov	r2, r0
   478c8:	ldr	r0, [pc, #976]	; 47ca0 <__assert_fail@plt+0x36a94>
   478cc:	bl	110b0 <snprintf@plt>
   478d0:	ldr	r1, [pc, #968]	; 47ca0 <__assert_fail@plt+0x36a94>
   478d4:	b	47894 <__assert_fail@plt+0x36688>
   478d8:	strd	r6, [sp, #88]	; 0x58
   478dc:	ldr	r8, [sp, #96]	; 0x60
   478e0:	mov	r9, #0
   478e4:	b	47638 <__assert_fail@plt+0x3642c>
   478e8:	ldr	r1, [sp, #76]	; 0x4c
   478ec:	ldr	r3, [sp, #104]	; 0x68
   478f0:	ldr	r3, [r3]
   478f4:	blx	r3
   478f8:	ldr	r3, [sp, #68]	; 0x44
   478fc:	add	r3, r3, r0
   47900:	str	r3, [sp, #96]	; 0x60
   47904:	b	475f8 <__assert_fail@plt+0x363ec>
   47908:	ldr	r1, [sp, #76]	; 0x4c
   4790c:	ldr	r3, [sp, #104]	; 0x68
   47910:	ldr	r3, [r3]
   47914:	blx	r3
   47918:	mov	r4, r0
   4791c:	mov	r5, r1
   47920:	b	475b8 <__assert_fail@plt+0x363ac>
   47924:	mov	r2, #5
   47928:	ldr	r1, [pc, #884]	; 47ca4 <__assert_fail@plt+0x36a98>
   4792c:	mov	r0, #0
   47930:	bl	10f90 <dcgettext@plt>
   47934:	bl	10f24 <printf@plt>
   47938:	b	47714 <__assert_fail@plt+0x36508>
   4793c:	mov	r1, #4
   47940:	ldr	r3, [sp, #104]	; 0x68
   47944:	mov	r0, r6
   47948:	add	r7, r5, #24
   4794c:	ldr	r3, [r3]
   47950:	blx	r3
   47954:	ldr	r2, [sp, #72]	; 0x48
   47958:	cmp	r7, r2
   4795c:	lsl	r3, r0, #2
   47960:	str	r0, [sp, #68]	; 0x44
   47964:	str	r3, [sp, #92]	; 0x5c
   47968:	bcc	479f0 <__assert_fail@plt+0x367e4>
   4796c:	ldr	r3, [sp, #72]	; 0x48
   47970:	cmp	r3, r4
   47974:	bls	46e7c <__assert_fail@plt+0x35c70>
   47978:	sub	r1, r3, r4
   4797c:	sub	r3, r1, #1
   47980:	cmp	r3, #7
   47984:	bhi	46e7c <__assert_fail@plt+0x35c70>
   47988:	ldr	r3, [sp, #104]	; 0x68
   4798c:	mov	r0, r4
   47990:	add	r6, r5, #28
   47994:	ldr	r3, [r3]
   47998:	blx	r3
   4799c:	ldr	r2, [sp, #72]	; 0x48
   479a0:	cmp	r2, r6
   479a4:	lsl	r2, r0, #2
   479a8:	str	r2, [sp, #84]	; 0x54
   479ac:	ldr	r2, [sp, #76]	; 0x4c
   479b0:	str	r0, [sp, #128]	; 0x80
   479b4:	mul	r3, r0, r2
   479b8:	str	r3, [sp, #88]	; 0x58
   479bc:	bls	46e9c <__assert_fail@plt+0x35c90>
   479c0:	ldr	r3, [sp, #104]	; 0x68
   479c4:	mov	r0, r7
   479c8:	mov	r1, #4
   479cc:	ldr	r3, [r3]
   479d0:	blx	r3
   479d4:	ldr	r3, [sp, #72]	; 0x48
   479d8:	add	r4, r5, #32
   479dc:	cmp	r4, r3
   479e0:	str	r0, [sp, #80]	; 0x50
   479e4:	bcs	47b84 <__assert_fail@plt+0x36978>
   479e8:	mov	r1, #4
   479ec:	b	46eb8 <__assert_fail@plt+0x35cac>
   479f0:	ldr	r3, [sp, #104]	; 0x68
   479f4:	mov	r0, r4
   479f8:	mov	r1, #4
   479fc:	ldr	r3, [r3]
   47a00:	blx	r3
   47a04:	ldr	r2, [sp, #72]	; 0x48
   47a08:	add	r6, r5, #28
   47a0c:	cmp	r2, r6
   47a10:	lsl	r2, r0, #2
   47a14:	str	r2, [sp, #84]	; 0x54
   47a18:	ldr	r2, [sp, #76]	; 0x4c
   47a1c:	str	r0, [sp, #128]	; 0x80
   47a20:	mul	r3, r0, r2
   47a24:	str	r3, [sp, #88]	; 0x58
   47a28:	bhi	479c0 <__assert_fail@plt+0x367b4>
   47a2c:	ldr	r3, [sp, #72]	; 0x48
   47a30:	sub	r1, r3, r7
   47a34:	sub	r3, r1, #1
   47a38:	cmp	r3, #7
   47a3c:	bhi	46e9c <__assert_fail@plt+0x35c90>
   47a40:	ldr	r3, [sp, #104]	; 0x68
   47a44:	mov	r0, r7
   47a48:	add	r4, r5, #32
   47a4c:	ldr	r3, [r3]
   47a50:	blx	r3
   47a54:	ldr	r3, [sp, #72]	; 0x48
   47a58:	cmp	r4, r3
   47a5c:	str	r0, [sp, #80]	; 0x50
   47a60:	bcs	47b54 <__assert_fail@plt+0x36948>
   47a64:	b	479e8 <__assert_fail@plt+0x367dc>
   47a68:	mov	r1, #4
   47a6c:	ldr	r3, [sp, #104]	; 0x68
   47a70:	mov	r0, r7
   47a74:	add	r4, r5, #20
   47a78:	ldr	r3, [r3]
   47a7c:	blx	r3
   47a80:	ldr	r3, [sp, #72]	; 0x48
   47a84:	cmp	r4, r3
   47a88:	mov	r9, r0
   47a8c:	bcc	4793c <__assert_fail@plt+0x36730>
   47a90:	ldr	r3, [sp, #72]	; 0x48
   47a94:	cmp	r3, r6
   47a98:	bls	46e60 <__assert_fail@plt+0x35c54>
   47a9c:	ldr	r3, [sp, #72]	; 0x48
   47aa0:	sub	r1, r3, r6
   47aa4:	sub	r3, r1, #1
   47aa8:	cmp	r3, #7
   47aac:	bhi	46e60 <__assert_fail@plt+0x35c54>
   47ab0:	b	47940 <__assert_fail@plt+0x36734>
   47ab4:	mov	r1, #4
   47ab8:	ldr	r3, [sp, #104]	; 0x68
   47abc:	mov	r0, r4
   47ac0:	add	r6, r5, #16
   47ac4:	ldr	r3, [r3]
   47ac8:	blx	r3
   47acc:	ldr	r3, [sp, #72]	; 0x48
   47ad0:	cmp	r6, r3
   47ad4:	str	r0, [sp, #56]	; 0x38
   47ad8:	bcc	47a68 <__assert_fail@plt+0x3685c>
   47adc:	ldr	r3, [sp, #72]	; 0x48
   47ae0:	cmp	r7, r3
   47ae4:	bcs	46e4c <__assert_fail@plt+0x35c40>
   47ae8:	ldr	r3, [sp, #72]	; 0x48
   47aec:	sub	r1, r3, r7
   47af0:	sub	r3, r1, #1
   47af4:	cmp	r3, #7
   47af8:	bhi	46e4c <__assert_fail@plt+0x35c40>
   47afc:	b	47a6c <__assert_fail@plt+0x36860>
   47b00:	mov	r1, #2
   47b04:	ldr	r3, [sp, #104]	; 0x68
   47b08:	mov	r0, r7
   47b0c:	ldr	r3, [r3]
   47b10:	blx	r3
   47b14:	uxth	r4, r0
   47b18:	cmp	r4, #0
   47b1c:	bne	47b9c <__assert_fail@plt+0x36990>
   47b20:	ldr	r3, [sp, #72]	; 0x48
   47b24:	add	r4, r5, #8
   47b28:	cmp	r4, r3
   47b2c:	bcc	46dd0 <__assert_fail@plt+0x35bc4>
   47b30:	cmp	r6, r3
   47b34:	bcs	46df0 <__assert_fail@plt+0x35be4>
   47b38:	sub	r1, r3, r6
   47b3c:	sub	r3, r1, #1
   47b40:	cmp	r3, #7
   47b44:	bls	46dd4 <__assert_fail@plt+0x35bc8>
   47b48:	b	46df0 <__assert_fail@plt+0x35be4>
   47b4c:	mov	r3, #0
   47b50:	str	r3, [sp, #80]	; 0x50
   47b54:	mov	r2, #5
   47b58:	ldr	r1, [pc, #240]	; 47c50 <__assert_fail@plt+0x36a44>
   47b5c:	mov	r0, #0
   47b60:	bl	10f90 <dcgettext@plt>
   47b64:	mov	r8, r4
   47b68:	bl	10f24 <printf@plt>
   47b6c:	b	46f84 <__assert_fail@plt+0x35d78>
   47b70:	sub	r3, ip, #1
   47b74:	cmp	r3, #7
   47b78:	bhi	46c4c <__assert_fail@plt+0x35a40>
   47b7c:	mov	r1, ip
   47b80:	b	46d60 <__assert_fail@plt+0x35b54>
   47b84:	ldr	r3, [sp, #72]	; 0x48
   47b88:	sub	r1, r3, r6
   47b8c:	sub	r3, r1, #1
   47b90:	cmp	r3, #7
   47b94:	bhi	47b54 <__assert_fail@plt+0x36948>
   47b98:	b	46eb8 <__assert_fail@plt+0x35cac>
   47b9c:	mov	r2, #5
   47ba0:	ldr	r1, [pc, #256]	; 47ca8 <__assert_fail@plt+0x36a9c>
   47ba4:	mov	r0, #0
   47ba8:	bl	10f90 <dcgettext@plt>
   47bac:	mov	r1, r4
   47bb0:	bl	54dd0 <warn@@Base>
   47bb4:	b	47b20 <__assert_fail@plt+0x36914>
   47bb8:	ldr	r3, [sp, #120]	; 0x78
   47bbc:	add	r4, r3, #12
   47bc0:	ldr	r3, [sp, #132]	; 0x84
   47bc4:	cmp	r4, r3
   47bc8:	bcc	47bf4 <__assert_fail@plt+0x369e8>
   47bcc:	cmp	r5, r3
   47bd0:	bcs	47be4 <__assert_fail@plt+0x369d8>
   47bd4:	sub	r1, r3, r5
   47bd8:	sub	r3, r1, #1
   47bdc:	cmp	r3, #7
   47be0:	bls	47bf8 <__assert_fail@plt+0x369ec>
   47be4:	mov	r3, #8
   47be8:	mov	r5, r4
   47bec:	str	r3, [sp, #76]	; 0x4c
   47bf0:	b	46c00 <__assert_fail@plt+0x359f4>
   47bf4:	mov	r1, #8
   47bf8:	ldr	r3, [sp, #104]	; 0x68
   47bfc:	mov	r0, r5
   47c00:	mov	r5, r4
   47c04:	ldr	r3, [r3]
   47c08:	blx	r3
   47c0c:	mov	r3, #8
   47c10:	str	r3, [sp, #76]	; 0x4c
   47c14:	mov	r8, r0
   47c18:	mov	r9, r1
   47c1c:	b	46cc0 <__assert_fail@plt+0x35ab4>
   47c20:	ldr	r3, [pc, #144]	; 47cb8 <__assert_fail@plt+0x36aac>
   47c24:	ldr	r2, [pc, #128]	; 47cac <__assert_fail@plt+0x36aa0>
   47c28:	ldr	r1, [pc, #148]	; 47cc4 <__assert_fail@plt+0x36ab8>
   47c2c:	ldr	r0, [pc, #124]	; 47cb0 <__assert_fail@plt+0x36aa4>
   47c30:	bl	1120c <__assert_fail@plt>
   47c34:	andeq	lr, r7, r4, asr #23
   47c38:	andeq	r0, r8, ip, lsr #28
   47c3c:	andeq	lr, r9, ip, asr sp
   47c40:	andeq	r0, r8, r0, asr #21
   47c44:	andeq	r9, r6, r0, lsr #15
   47c48:	andeq	r0, r8, r0, lsr #29
   47c4c:	strdeq	r0, [r8], -r0	; <UNPREDICTABLE>
   47c50:	ldrdeq	r0, [r8], -r8
   47c54:	andeq	lr, r7, r8, ror #13
   47c58:	andeq	sl, r9, ip, lsr #8
   47c5c:	andeq	r0, r8, r8, asr #30
   47c60:	andeq	r0, r8, r4, asr pc
   47c64:	andeq	r0, r8, ip, ror #30
   47c68:	andeq	r0, r8, r4, ror #30
   47c6c:	andeq	r0, r8, r8, ror pc
   47c70:	ldrdeq	r0, [r8], -r8
   47c74:	strdeq	r0, [r8], -r4
   47c78:	andeq	r1, r8, r0, lsl r0
   47c7c:	strheq	r1, [r8], -ip
   47c80:	andeq	lr, r7, r4, asr lr
   47c84:	andeq	r1, r8, r0, lsl #2
   47c88:	andeq	fp, r6, r8, ror #10
   47c8c:	andeq	r8, r6, ip, ror ip
   47c90:	andeq	r1, r8, r0, lsl r1
   47c94:	andeq	r1, r8, r8, lsl r1
   47c98:	andeq	pc, r7, r0, asr #8
   47c9c:	andeq	r1, r8, ip, asr r1
   47ca0:	ldrdeq	ip, [r9], -r8
   47ca4:	andeq	r1, r8, r4, ror r1
   47ca8:	andeq	r0, r8, r8, ror #28
   47cac:	andeq	r2, r0, r6, lsl #3
   47cb0:	andeq	r1, r8, ip, lsl #1
   47cb4:	andeq	r0, r8, r0, lsl #31
   47cb8:	andeq	sp, r7, ip, lsr #14
   47cbc:	andeq	r2, r0, sl, ror #2
   47cc0:	andeq	r1, r8, ip, asr r0
   47cc4:	andeq	lr, r7, r8, lsl #20
   47cc8:	mov	r2, #5
   47ccc:	ldr	r1, [pc, #-32]	; 47cb4 <__assert_fail@plt+0x36aa8>
   47cd0:	mov	r0, #0
   47cd4:	bl	10f90 <dcgettext@plt>
   47cd8:	ldr	r3, [sp, #124]	; 0x7c
   47cdc:	ldr	r2, [sp, #72]	; 0x48
   47ce0:	ldr	r1, [r3, #16]
   47ce4:	ldr	r3, [sp, #120]	; 0x78
   47ce8:	sub	r2, r2, r1
   47cec:	sub	r3, r3, r1
   47cf0:	sub	r1, r9, r1
   47cf4:	bl	54dd0 <warn@@Base>
   47cf8:	mov	r0, #0
   47cfc:	add	sp, sp, #164	; 0xa4
   47d00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47d04:	mov	r8, r4
   47d08:	b	46f84 <__assert_fail@plt+0x35d78>
   47d0c:	ldr	r3, [pc, #-92]	; 47cb8 <__assert_fail@plt+0x36aac>
   47d10:	ldr	r2, [pc, #-92]	; 47cbc <__assert_fail@plt+0x36ab0>
   47d14:	ldr	r1, [pc, #-88]	; 47cc4 <__assert_fail@plt+0x36ab8>
   47d18:	ldr	r0, [pc, #-96]	; 47cc0 <__assert_fail@plt+0x36ab4>
   47d1c:	bl	1120c <__assert_fail@plt>
   47d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   47d24:	sub	sp, sp, #1184	; 0x4a0
   47d28:	sub	sp, sp, #4
   47d2c:	ldr	r6, [r0, #16]
   47d30:	ldr	r3, [r0, #32]
   47d34:	mov	r5, r0
   47d38:	str	r0, [sp, #128]	; 0x80
   47d3c:	mov	r4, r1
   47d40:	mov	r0, #10
   47d44:	add	fp, r6, r3
   47d48:	str	r6, [sp, #112]	; 0x70
   47d4c:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   47d50:	mov	r1, r4
   47d54:	mov	r0, #4
   47d58:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   47d5c:	add	r1, r5, #12
   47d60:	add	r0, r5, #8
   47d64:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   47d68:	cmp	r6, fp
   47d6c:	bcs	48b08 <__assert_fail@plt+0x378fc>
   47d70:	mov	r9, r6
   47d74:	mov	r7, fp
   47d78:	ldr	r3, [sp, #112]	; 0x70
   47d7c:	add	r4, r9, #2
   47d80:	sub	r5, r9, r3
   47d84:	cmp	r4, r7
   47d88:	mov	sl, r5
   47d8c:	bcc	47dcc <__assert_fail@plt+0x36bc0>
   47d90:	sub	r1, r7, r9
   47d94:	sub	r3, r1, #1
   47d98:	cmp	r3, #7
   47d9c:	bls	47dd0 <__assert_fail@plt+0x36bc4>
   47da0:	mov	r2, #5
   47da4:	ldr	r1, [pc, #3924]	; 48d00 <__assert_fail@plt+0x37af4>
   47da8:	mov	r0, #0
   47dac:	bl	10f90 <dcgettext@plt>
   47db0:	ldr	r3, [sp, #128]	; 0x80
   47db4:	ldr	r1, [r3, #8]
   47db8:	bl	548ac <error@@Base>
   47dbc:	mov	r0, #0
   47dc0:	add	sp, sp, #1184	; 0x4a0
   47dc4:	add	sp, sp, #4
   47dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47dcc:	mov	r1, #2
   47dd0:	ldr	r8, [pc, #3884]	; 48d04 <__assert_fail@plt+0x37af8>
   47dd4:	mov	r0, r9
   47dd8:	ldr	r3, [r8]
   47ddc:	blx	r3
   47de0:	sub	r3, r0, #4
   47de4:	cmp	r3, #1
   47de8:	str	r0, [sp, #88]	; 0x58
   47dec:	bhi	47da0 <__assert_fail@plt+0x36b94>
   47df0:	add	r9, r9, #3
   47df4:	cmp	r9, r7
   47df8:	bcc	47e88 <__assert_fail@plt+0x36c7c>
   47dfc:	cmp	r4, r7
   47e00:	bcs	47e14 <__assert_fail@plt+0x36c08>
   47e04:	sub	r1, r7, r4
   47e08:	sub	r3, r1, #1
   47e0c:	cmp	r3, #7
   47e10:	bls	47e8c <__assert_fail@plt+0x36c80>
   47e14:	mov	r2, #5
   47e18:	ldr	r1, [pc, #3816]	; 48d08 <__assert_fail@plt+0x37afc>
   47e1c:	mov	r0, #0
   47e20:	bl	10f90 <dcgettext@plt>
   47e24:	mov	r1, sl
   47e28:	bl	10f24 <printf@plt>
   47e2c:	mov	r2, #5
   47e30:	ldr	r1, [pc, #3796]	; 48d0c <__assert_fail@plt+0x37b00>
   47e34:	mov	r0, #0
   47e38:	bl	10f90 <dcgettext@plt>
   47e3c:	ldr	r1, [sp, #88]	; 0x58
   47e40:	bl	10f24 <printf@plt>
   47e44:	ldr	r1, [pc, #3780]	; 48d10 <__assert_fail@plt+0x37b04>
   47e48:	mov	r2, #5
   47e4c:	mov	r0, #0
   47e50:	bl	10f90 <dcgettext@plt>
   47e54:	mov	r1, #4
   47e58:	bl	10f24 <printf@plt>
   47e5c:	mov	r0, #10
   47e60:	bl	110c8 <putchar@plt>
   47e64:	mov	r2, #5
   47e68:	ldr	r1, [pc, #3748]	; 48d14 <__assert_fail@plt+0x37b08>
   47e6c:	mov	r0, #0
   47e70:	bl	10f90 <dcgettext@plt>
   47e74:	bl	548ac <error@@Base>
   47e78:	mov	r0, #0
   47e7c:	add	sp, sp, #1184	; 0x4a0
   47e80:	add	sp, sp, #4
   47e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   47e88:	mov	r1, #1
   47e8c:	ldr	r3, [r8]
   47e90:	mov	r0, r4
   47e94:	blx	r3
   47e98:	mov	r2, #5
   47e9c:	ldr	r1, [pc, #3684]	; 48d08 <__assert_fail@plt+0x37afc>
   47ea0:	tst	r0, #1
   47ea4:	mov	r4, r0
   47ea8:	mov	r0, #0
   47eac:	moveq	sl, #4
   47eb0:	movne	sl, #8
   47eb4:	bl	10f90 <dcgettext@plt>
   47eb8:	mov	r1, r5
   47ebc:	bl	10f24 <printf@plt>
   47ec0:	mov	r2, #5
   47ec4:	ldr	r1, [pc, #3648]	; 48d0c <__assert_fail@plt+0x37b00>
   47ec8:	mov	r0, #0
   47ecc:	bl	10f90 <dcgettext@plt>
   47ed0:	ldr	r1, [sp, #88]	; 0x58
   47ed4:	bl	10f24 <printf@plt>
   47ed8:	mov	r2, #5
   47edc:	ldr	r1, [pc, #3628]	; 48d10 <__assert_fail@plt+0x37b04>
   47ee0:	mov	r0, #0
   47ee4:	bl	10f90 <dcgettext@plt>
   47ee8:	mov	r1, sl
   47eec:	bl	10f24 <printf@plt>
   47ef0:	ands	r3, r4, #2
   47ef4:	str	r3, [sp, #92]	; 0x5c
   47ef8:	and	r4, r4, #4
   47efc:	beq	48b20 <__assert_fail@plt+0x37914>
   47f00:	add	r5, r9, sl
   47f04:	cmp	r5, r7
   47f08:	bcc	4811c <__assert_fail@plt+0x36f10>
   47f0c:	cmp	r9, r7
   47f10:	bcc	484a0 <__assert_fail@plt+0x37294>
   47f14:	mov	r2, #0
   47f18:	mov	r3, #0
   47f1c:	mov	r6, #0
   47f20:	strd	r2, [sp, #96]	; 0x60
   47f24:	ldr	r1, [pc, #3564]	; 48d18 <__assert_fail@plt+0x37b0c>
   47f28:	mov	r2, #5
   47f2c:	mov	r0, #0
   47f30:	bl	10f90 <dcgettext@plt>
   47f34:	mov	r1, r6
   47f38:	bl	10f24 <printf@plt>
   47f3c:	cmp	r4, #0
   47f40:	beq	48aac <__assert_fail@plt+0x378a0>
   47f44:	add	fp, r5, #1
   47f48:	cmp	fp, r7
   47f4c:	bcc	4806c <__assert_fail@plt+0x36e60>
   47f50:	cmp	r5, r7
   47f54:	bcs	47e5c <__assert_fail@plt+0x36c50>
   47f58:	sub	r1, r7, r5
   47f5c:	sub	r3, r1, #1
   47f60:	cmp	r3, #7
   47f64:	bhi	47e5c <__assert_fail@plt+0x36c50>
   47f68:	mov	r0, r5
   47f6c:	ldr	r3, [r8]
   47f70:	add	r4, sp, #160	; 0xa0
   47f74:	str	r4, [sp, #68]	; 0x44
   47f78:	blx	r3
   47f7c:	mov	r2, #1024	; 0x400
   47f80:	mov	r1, #0
   47f84:	mov	r5, r0
   47f88:	str	r0, [sp, #104]	; 0x68
   47f8c:	mov	r0, r4
   47f90:	bl	110bc <memset@plt>
   47f94:	cmp	r5, #0
   47f98:	beq	47e5c <__assert_fail@plt+0x36c50>
   47f9c:	mov	r2, #5
   47fa0:	ldr	r1, [pc, #3444]	; 48d1c <__assert_fail@plt+0x37b10>
   47fa4:	mov	r0, #0
   47fa8:	bl	10f90 <dcgettext@plt>
   47fac:	bl	10f24 <printf@plt>
   47fb0:	add	r3, sp, #152	; 0x98
   47fb4:	mov	r9, #0
   47fb8:	str	r3, [sp, #116]	; 0x74
   47fbc:	str	sl, [sp, #136]	; 0x88
   47fc0:	b	48040 <__assert_fail@plt+0x36e34>
   47fc4:	cmp	r7, fp
   47fc8:	bls	47fdc <__assert_fail@plt+0x36dd0>
   47fcc:	sub	r1, r7, fp
   47fd0:	sub	r3, r1, #1
   47fd4:	cmp	r3, #7
   47fd8:	bls	48050 <__assert_fail@plt+0x36e44>
   47fdc:	ldr	ip, [sp, #68]	; 0x44
   47fe0:	mov	r5, #0
   47fe4:	mov	r3, r7
   47fe8:	mov	r2, #0
   47fec:	ldr	r1, [sp, #116]	; 0x74
   47ff0:	mov	r0, r4
   47ff4:	str	r4, [ip]
   47ff8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   47ffc:	ldr	fp, [sp, #152]	; 0x98
   48000:	add	fp, r4, fp
   48004:	mov	r2, r0
   48008:	mov	r3, r1
   4800c:	strd	r2, [sp, #56]	; 0x38
   48010:	orrs	r3, r2, r3
   48014:	mov	r2, #5
   48018:	bne	48640 <__assert_fail@plt+0x37434>
   4801c:	ldr	r1, [pc, #3324]	; 48d20 <__assert_fail@plt+0x37b14>
   48020:	mov	r0, #0
   48024:	bl	10f90 <dcgettext@plt>
   48028:	mov	r1, r5
   4802c:	bl	10f24 <printf@plt>
   48030:	ldr	r3, [sp, #104]	; 0x68
   48034:	add	r9, r9, #1
   48038:	cmp	r3, r9
   4803c:	bls	48af0 <__assert_fail@plt+0x378e4>
   48040:	add	r4, fp, #1
   48044:	cmp	r4, r7
   48048:	bcs	47fc4 <__assert_fail@plt+0x36db8>
   4804c:	mov	r1, #1
   48050:	ldr	r3, [r8]
   48054:	mov	r0, fp
   48058:	blx	r3
   4805c:	ldr	r3, [sp, #68]	; 0x44
   48060:	mov	r5, r0
   48064:	add	ip, r3, r0, lsl #2
   48068:	b	47fe4 <__assert_fail@plt+0x36dd8>
   4806c:	mov	r0, r5
   48070:	ldr	r3, [r8]
   48074:	add	r4, sp, #160	; 0xa0
   48078:	mov	r1, #1
   4807c:	str	r4, [sp, #68]	; 0x44
   48080:	blx	r3
   48084:	mov	r2, #1024	; 0x400
   48088:	mov	r1, #0
   4808c:	mov	r5, r0
   48090:	str	r0, [sp, #104]	; 0x68
   48094:	mov	r0, r4
   48098:	bl	110bc <memset@plt>
   4809c:	cmp	r5, #0
   480a0:	bne	47f9c <__assert_fail@plt+0x36d90>
   480a4:	ldr	r3, [sp, #68]	; 0x44
   480a8:	mov	r0, #10
   480ac:	str	r3, [sp, #136]	; 0x88
   480b0:	bl	110c8 <putchar@plt>
   480b4:	add	r9, fp, #1
   480b8:	cmp	r9, r7
   480bc:	bcc	4818c <__assert_fail@plt+0x36f80>
   480c0:	sub	r1, r7, fp
   480c4:	sub	r3, r1, #1
   480c8:	cmp	r3, #7
   480cc:	bhi	48b00 <__assert_fail@plt+0x378f4>
   480d0:	mov	r0, fp
   480d4:	ldr	r3, [r8]
   480d8:	blx	r3
   480dc:	subs	r4, r0, #0
   480e0:	beq	48b00 <__assert_fail@plt+0x378f4>
   480e4:	sub	r3, r4, #1
   480e8:	cmp	r3, #9
   480ec:	ldrls	pc, [pc, r3, lsl #2]
   480f0:	b	48b3c <__assert_fail@plt+0x37930>
   480f4:	andeq	r8, r4, r8, ror #8
   480f8:	andeq	r8, r4, r4, lsl r4
   480fc:	andeq	r8, r4, ip, lsl #7
   48100:	andeq	r8, r4, r0, ror r3
   48104:	andeq	r8, r4, r0, lsl r3
   48108:			; <UNDEFINED> instruction: 0x000482b0
   4810c:	andeq	r8, r4, ip, ror #4
   48110:	andeq	r8, r4, r8, lsl r2
   48114:			; <UNDEFINED> instruction: 0x000481b0
   48118:	andeq	r8, r4, r8, lsr r1
   4811c:	mov	r1, sl
   48120:	mov	r0, r9
   48124:	ldr	r3, [r8]
   48128:	blx	r3
   4812c:	strd	r0, [sp, #96]	; 0x60
   48130:	mov	r6, r0
   48134:	b	47f24 <__assert_fail@plt+0x36d18>
   48138:	add	fp, r9, sl
   4813c:	cmp	fp, r7
   48140:	bcc	4859c <__assert_fail@plt+0x37390>
   48144:	cmp	r9, r7
   48148:	bcs	4815c <__assert_fail@plt+0x36f50>
   4814c:	sub	r1, r7, r9
   48150:	sub	r3, r1, #1
   48154:	cmp	r3, #7
   48158:	bls	485a0 <__assert_fail@plt+0x37394>
   4815c:	mov	r4, #0
   48160:	ldr	r1, [pc, #3004]	; 48d24 <__assert_fail@plt+0x37b18>
   48164:	mov	r2, #5
   48168:	mov	r0, #0
   4816c:	bl	10f90 <dcgettext@plt>
   48170:	mov	r1, r4
   48174:	bl	10f24 <printf@plt>
   48178:	cmp	r7, fp
   4817c:	bls	47e64 <__assert_fail@plt+0x36c58>
   48180:	add	r9, fp, #1
   48184:	cmp	r9, r7
   48188:	bcs	480c0 <__assert_fail@plt+0x36eb4>
   4818c:	mov	r0, fp
   48190:	ldr	r3, [r8]
   48194:	mov	r1, #1
   48198:	blx	r3
   4819c:	subs	r4, r0, #0
   481a0:	bne	480e4 <__assert_fail@plt+0x36ed8>
   481a4:	mov	r0, #10
   481a8:	bl	110c8 <putchar@plt>
   481ac:	b	47d78 <__assert_fail@plt+0x36b6c>
   481b0:	mov	r3, r7
   481b4:	mov	r2, #0
   481b8:	add	r1, sp, #152	; 0x98
   481bc:	mov	r0, r9
   481c0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   481c4:	mov	r4, r0
   481c8:	ldr	r0, [sp, #152]	; 0x98
   481cc:	add	r0, r9, r0
   481d0:	add	fp, r0, sl
   481d4:	cmp	fp, r7
   481d8:	bcc	485c8 <__assert_fail@plt+0x373bc>
   481dc:	cmp	r7, r0
   481e0:	bls	481f4 <__assert_fail@plt+0x36fe8>
   481e4:	sub	r1, r7, r0
   481e8:	sub	r3, r1, #1
   481ec:	cmp	r3, #7
   481f0:	bls	485cc <__assert_fail@plt+0x373c0>
   481f4:	mov	r5, #0
   481f8:	ldr	r1, [pc, #2856]	; 48d28 <__assert_fail@plt+0x37b1c>
   481fc:	mov	r2, #5
   48200:	mov	r0, #0
   48204:	bl	10f90 <dcgettext@plt>
   48208:	mov	r2, r5
   4820c:	mov	r1, r4
   48210:	bl	10f24 <printf@plt>
   48214:	b	48178 <__assert_fail@plt+0x36f6c>
   48218:	mov	r3, r7
   4821c:	mov	r2, #0
   48220:	add	r1, sp, #152	; 0x98
   48224:	mov	r0, r9
   48228:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4822c:	mov	r4, r0
   48230:	ldr	r0, [sp, #152]	; 0x98
   48234:	add	r0, r9, r0
   48238:	add	fp, r0, sl
   4823c:	cmp	fp, r7
   48240:	bcc	485b4 <__assert_fail@plt+0x373a8>
   48244:	cmp	r7, r0
   48248:	bls	4825c <__assert_fail@plt+0x37050>
   4824c:	sub	r1, r7, r0
   48250:	sub	r3, r1, #1
   48254:	cmp	r3, #7
   48258:	bls	485b8 <__assert_fail@plt+0x373ac>
   4825c:	mov	r5, #0
   48260:	mov	r2, #5
   48264:	ldr	r1, [pc, #2752]	; 48d2c <__assert_fail@plt+0x37b20>
   48268:	b	48200 <__assert_fail@plt+0x36ff4>
   4826c:	add	fp, r9, sl
   48270:	cmp	fp, r7
   48274:	bcc	48564 <__assert_fail@plt+0x37358>
   48278:	cmp	r9, r7
   4827c:	bcs	48290 <__assert_fail@plt+0x37084>
   48280:	sub	r1, r7, r9
   48284:	sub	r3, r1, #1
   48288:	cmp	r3, #7
   4828c:	bls	48568 <__assert_fail@plt+0x3735c>
   48290:	mov	r4, #0
   48294:	mov	r2, #5
   48298:	ldr	r1, [pc, #2704]	; 48d30 <__assert_fail@plt+0x37b24>
   4829c:	mov	r0, #0
   482a0:	bl	10f90 <dcgettext@plt>
   482a4:	mov	r1, r4
   482a8:	bl	10f24 <printf@plt>
   482ac:	b	48178 <__assert_fail@plt+0x36f6c>
   482b0:	mov	r3, r7
   482b4:	mov	r2, #0
   482b8:	add	r1, sp, #152	; 0x98
   482bc:	mov	r0, r9
   482c0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   482c4:	mov	r4, r0
   482c8:	ldr	r0, [sp, #152]	; 0x98
   482cc:	add	r0, r9, r0
   482d0:	add	fp, r0, sl
   482d4:	cmp	fp, r7
   482d8:	bcc	4858c <__assert_fail@plt+0x37380>
   482dc:	cmp	r7, r0
   482e0:	bls	482f4 <__assert_fail@plt+0x370e8>
   482e4:	sub	r1, r7, r0
   482e8:	sub	r3, r1, #1
   482ec:	cmp	r3, #7
   482f0:	bls	48590 <__assert_fail@plt+0x37384>
   482f4:	mov	r0, #0
   482f8:	mov	r1, #0
   482fc:	bl	3dcf4 <__assert_fail@plt+0x2cae8>
   48300:	mov	r2, #5
   48304:	ldr	r1, [pc, #2600]	; 48d34 <__assert_fail@plt+0x37b28>
   48308:	mov	r5, r0
   4830c:	b	48200 <__assert_fail@plt+0x36ff4>
   48310:	mov	r3, r7
   48314:	mov	r2, #0
   48318:	add	r1, sp, #152	; 0x98
   4831c:	mov	r0, r9
   48320:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48324:	mov	r4, r0
   48328:	ldr	r0, [sp, #152]	; 0x98
   4832c:	add	r0, r9, r0
   48330:	add	fp, r0, sl
   48334:	cmp	fp, r7
   48338:	bcc	4857c <__assert_fail@plt+0x37370>
   4833c:	cmp	r7, r0
   48340:	bls	48354 <__assert_fail@plt+0x37148>
   48344:	sub	r1, r7, r0
   48348:	sub	r3, r1, #1
   4834c:	cmp	r3, #7
   48350:	bls	48580 <__assert_fail@plt+0x37374>
   48354:	mov	r0, #0
   48358:	mov	r1, #0
   4835c:	bl	3dcf4 <__assert_fail@plt+0x2cae8>
   48360:	mov	r2, #5
   48364:	ldr	r1, [pc, #2508]	; 48d38 <__assert_fail@plt+0x37b2c>
   48368:	mov	r5, r0
   4836c:	b	48200 <__assert_fail@plt+0x36ff4>
   48370:	mov	r2, #5
   48374:	ldr	r1, [pc, #2496]	; 48d3c <__assert_fail@plt+0x37b30>
   48378:	mov	r0, #0
   4837c:	bl	10f90 <dcgettext@plt>
   48380:	mov	fp, r9
   48384:	bl	10f24 <printf@plt>
   48388:	b	48178 <__assert_fail@plt+0x36f6c>
   4838c:	add	r3, sp, #160	; 0xa0
   48390:	add	r4, sp, #152	; 0x98
   48394:	str	r3, [sp, #104]	; 0x68
   48398:	mov	r2, #0
   4839c:	mov	r3, r7
   483a0:	mov	r0, r9
   483a4:	mov	r1, r4
   483a8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   483ac:	ldr	fp, [sp, #152]	; 0x98
   483b0:	mov	r1, r4
   483b4:	add	r9, r9, fp
   483b8:	mov	r3, r7
   483bc:	mov	r2, #0
   483c0:	str	r0, [sp, #68]	; 0x44
   483c4:	mov	r0, r9
   483c8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   483cc:	ldr	fp, [sp, #152]	; 0x98
   483d0:	add	fp, r9, fp
   483d4:	str	r0, [sp, #56]	; 0x38
   483d8:	ldr	r0, [sp, #92]	; 0x5c
   483dc:	cmp	r0, #0
   483e0:	bne	484b4 <__assert_fail@plt+0x372a8>
   483e4:	mov	r2, #5
   483e8:	ldr	r1, [pc, #2384]	; 48d40 <__assert_fail@plt+0x37b34>
   483ec:	bl	10f90 <dcgettext@plt>
   483f0:	bl	548ac <error@@Base>
   483f4:	mov	r2, #5
   483f8:	ldr	r1, [pc, #2372]	; 48d44 <__assert_fail@plt+0x37b38>
   483fc:	mov	r0, #0
   48400:	bl	10f90 <dcgettext@plt>
   48404:	ldr	r2, [sp, #56]	; 0x38
   48408:	ldr	r1, [sp, #68]	; 0x44
   4840c:	bl	10f24 <printf@plt>
   48410:	b	48178 <__assert_fail@plt+0x36f6c>
   48414:	mov	r2, #0
   48418:	mov	r3, r7
   4841c:	mov	r0, r9
   48420:	add	r1, sp, #152	; 0x98
   48424:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48428:	mov	r4, r0
   4842c:	ldr	r0, [sp, #152]	; 0x98
   48430:	add	r9, r9, r0
   48434:	sub	r1, r7, r9
   48438:	mov	r0, r9
   4843c:	bl	11104 <strnlen@plt>
   48440:	ldr	r1, [pc, #2304]	; 48d48 <__assert_fail@plt+0x37b3c>
   48444:	mov	r2, #5
   48448:	add	fp, r0, #1
   4844c:	mov	r0, #0
   48450:	bl	10f90 <dcgettext@plt>
   48454:	mov	r2, r9
   48458:	mov	r1, r4
   4845c:	add	fp, r9, fp
   48460:	bl	10f24 <printf@plt>
   48464:	b	48178 <__assert_fail@plt+0x36f6c>
   48468:	mov	r2, #0
   4846c:	mov	r3, r7
   48470:	mov	r0, r9
   48474:	add	r1, sp, #152	; 0x98
   48478:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4847c:	mov	r4, r0
   48480:	ldr	r0, [sp, #152]	; 0x98
   48484:	add	r9, r9, r0
   48488:	sub	r1, r7, r9
   4848c:	mov	r0, r9
   48490:	bl	11104 <strnlen@plt>
   48494:	mov	r2, #5
   48498:	ldr	r1, [pc, #2220]	; 48d4c <__assert_fail@plt+0x37b40>
   4849c:	b	48448 <__assert_fail@plt+0x3723c>
   484a0:	sub	r1, r7, r9
   484a4:	sub	r3, r1, #1
   484a8:	cmp	r3, #7
   484ac:	bhi	47f14 <__assert_fail@plt+0x36d08>
   484b0:	b	48120 <__assert_fail@plt+0x36f14>
   484b4:	ldr	r6, [pc, #2196]	; 48d50 <__assert_fail@plt+0x37b44>
   484b8:	ldr	r3, [sp, #56]	; 0x38
   484bc:	ldr	r4, [r6, #304]	; 0x130
   484c0:	str	r3, [sp, #80]	; 0x50
   484c4:	mov	r3, #0
   484c8:	cmp	r4, r3
   484cc:	str	r3, [sp, #84]	; 0x54
   484d0:	beq	483f4 <__assert_fail@plt+0x371e8>
   484d4:	add	r6, r6, #320	; 0x140
   484d8:	ldrd	r0, [sp, #96]	; 0x60
   484dc:	ldrd	r2, [r6]
   484e0:	cmp	r1, r3
   484e4:	cmpeq	r0, r2
   484e8:	bcs	483f4 <__assert_fail@plt+0x371e8>
   484ec:	ldrd	r0, [sp, #80]	; 0x50
   484f0:	orrs	r1, r0, r1
   484f4:	beq	483f4 <__assert_fail@plt+0x371e8>
   484f8:	ldrd	r0, [sp, #96]	; 0x60
   484fc:	add	ip, r4, r2
   48500:	str	ip, [sp, #116]	; 0x74
   48504:	add	r5, r4, r0
   48508:	add	r9, r5, #4
   4850c:	cmp	ip, r9
   48510:	bhi	485dc <__assert_fail@plt+0x373d0>
   48514:	cmp	r5, ip
   48518:	bcc	489c4 <__assert_fail@plt+0x377b8>
   4851c:	mov	r0, #4
   48520:	mov	r1, #0
   48524:	mov	ip, #4
   48528:	str	ip, [sp, #132]	; 0x84
   4852c:	cmp	r3, r1
   48530:	cmpeq	r2, r0
   48534:	bcc	483f4 <__assert_fail@plt+0x371e8>
   48538:	ldr	r2, [sp, #116]	; 0x74
   4853c:	add	r3, r9, #2
   48540:	cmp	r2, r3
   48544:	bhi	48790 <__assert_fail@plt+0x37584>
   48548:	cmp	r2, r9
   4854c:	bls	483f4 <__assert_fail@plt+0x371e8>
   48550:	sub	r1, r2, r9
   48554:	sub	r3, r1, #1
   48558:	cmp	r3, #7
   4855c:	bhi	483f4 <__assert_fail@plt+0x371e8>
   48560:	b	48794 <__assert_fail@plt+0x37588>
   48564:	mov	r1, sl
   48568:	mov	r0, r9
   4856c:	ldr	r3, [r8]
   48570:	blx	r3
   48574:	mov	r4, r0
   48578:	b	48294 <__assert_fail@plt+0x37088>
   4857c:	mov	r1, sl
   48580:	ldr	r3, [r8]
   48584:	blx	r3
   48588:	b	4835c <__assert_fail@plt+0x37150>
   4858c:	mov	r1, sl
   48590:	ldr	r3, [r8]
   48594:	blx	r3
   48598:	b	482fc <__assert_fail@plt+0x370f0>
   4859c:	mov	r1, sl
   485a0:	mov	r0, r9
   485a4:	ldr	r3, [r8]
   485a8:	blx	r3
   485ac:	mov	r4, r0
   485b0:	b	48160 <__assert_fail@plt+0x36f54>
   485b4:	mov	r1, sl
   485b8:	ldr	r3, [r8]
   485bc:	blx	r3
   485c0:	mov	r5, r0
   485c4:	b	48260 <__assert_fail@plt+0x37054>
   485c8:	mov	r1, sl
   485cc:	ldr	r3, [r8]
   485d0:	blx	r3
   485d4:	mov	r5, r0
   485d8:	b	481f8 <__assert_fail@plt+0x36fec>
   485dc:	mov	r1, #4
   485e0:	ldr	r3, [r8]
   485e4:	mov	r0, r5
   485e8:	blx	r3
   485ec:	mov	r3, #0
   485f0:	mvn	r2, #0
   485f4:	cmp	r1, r3
   485f8:	cmpeq	r0, r2
   485fc:	beq	48a64 <__assert_fail@plt+0x37858>
   48600:	mov	r2, #4
   48604:	mov	r3, #0
   48608:	mov	ip, #4
   4860c:	str	ip, [sp, #132]	; 0x84
   48610:	adds	r4, r2, r0
   48614:	adcs	r5, r3, r1
   48618:	mov	r2, #0
   4861c:	mov	r3, #0
   48620:	movcs	r2, #1
   48624:	movcs	r3, #0
   48628:	orrs	r3, r2, r3
   4862c:	mov	r0, r4
   48630:	mov	r1, r5
   48634:	bne	483f4 <__assert_fail@plt+0x371e8>
   48638:	ldrd	r2, [r6]
   4863c:	b	4852c <__assert_fail@plt+0x37320>
   48640:	ldr	r1, [pc, #1804]	; 48d54 <__assert_fail@plt+0x37b48>
   48644:	mov	r0, #0
   48648:	bl	10f90 <dcgettext@plt>
   4864c:	mov	r1, r5
   48650:	bl	10f24 <printf@plt>
   48654:	ldrd	r2, [sp, #56]	; 0x38
   48658:	str	r9, [sp, #132]	; 0x84
   4865c:	mov	r4, #0
   48660:	subs	r1, r2, #1
   48664:	mov	r5, #0
   48668:	mov	r9, r7
   4866c:	sbc	r3, r3, #0
   48670:	str	r1, [sp, #120]	; 0x78
   48674:	str	r3, [sp, #124]	; 0x7c
   48678:	add	sl, fp, #1
   4867c:	cmp	sl, r9
   48680:	mov	r1, #1
   48684:	bcc	48718 <__assert_fail@plt+0x3750c>
   48688:	sub	r1, r9, fp
   4868c:	cmp	r9, fp
   48690:	sub	r3, r1, #1
   48694:	bls	486a0 <__assert_fail@plt+0x37494>
   48698:	cmp	r3, #7
   4869c:	bls	48718 <__assert_fail@plt+0x3750c>
   486a0:	mov	r0, #0
   486a4:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   486a8:	ldrd	r2, [sp, #56]	; 0x38
   486ac:	mov	r1, r0
   486b0:	subs	r0, r2, #1
   486b4:	sbc	r3, r3, #0
   486b8:	str	r0, [sp, #72]	; 0x48
   486bc:	str	r3, [sp, #76]	; 0x4c
   486c0:	ldrd	r2, [sp, #72]	; 0x48
   486c4:	cmp	r3, r5
   486c8:	cmpeq	r2, r4
   486cc:	beq	48a50 <__assert_fail@plt+0x37844>
   486d0:	ldr	r2, [pc, #1664]	; 48d58 <__assert_fail@plt+0x37b4c>
   486d4:	ldr	r0, [pc, #1664]	; 48d5c <__assert_fail@plt+0x37b50>
   486d8:	bl	10f24 <printf@plt>
   486dc:	mov	r8, #0
   486e0:	mov	r2, #5
   486e4:	ldr	r1, [pc, #1652]	; 48d60 <__assert_fail@plt+0x37b54>
   486e8:	mov	r0, #0
   486ec:	bl	10f90 <dcgettext@plt>
   486f0:	mov	r4, r0
   486f4:	mov	r0, r8
   486f8:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   486fc:	mov	r1, r0
   48700:	mov	r0, r4
   48704:	bl	548ac <error@@Base>
   48708:	mov	r0, #0
   4870c:	add	sp, sp, #1184	; 0x4a0
   48710:	add	sp, sp, #4
   48714:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48718:	ldr	r3, [r8]
   4871c:	mov	r0, fp
   48720:	blx	r3
   48724:	mov	fp, sl
   48728:	mov	r6, r0
   4872c:	bl	3dfd4 <__assert_fail@plt+0x2cdc8>
   48730:	ldrd	r2, [sp, #120]	; 0x78
   48734:	cmp	r3, r5
   48738:	ldr	r3, [pc, #1572]	; 48d64 <__assert_fail@plt+0x37b58>
   4873c:	cmpeq	r2, r4
   48740:	ldr	r2, [pc, #1552]	; 48d58 <__assert_fail@plt+0x37b4c>
   48744:	moveq	r2, r3
   48748:	mov	r1, r0
   4874c:	ldr	r0, [pc, #1544]	; 48d5c <__assert_fail@plt+0x37b50>
   48750:	bl	10f24 <printf@plt>
   48754:	cmp	r6, #3
   48758:	bcc	48b34 <__assert_fail@plt+0x37928>
   4875c:	cmp	r6, #15
   48760:	bls	4876c <__assert_fail@plt+0x37560>
   48764:	cmp	r6, #23
   48768:	bne	48b34 <__assert_fail@plt+0x37928>
   4876c:	ldrd	r2, [sp, #56]	; 0x38
   48770:	adds	r4, r4, #1
   48774:	adc	r5, r5, #0
   48778:	cmp	r5, r3
   4877c:	cmpeq	r4, r2
   48780:	bne	48678 <__assert_fail@plt+0x3746c>
   48784:	mov	r7, r9
   48788:	ldr	r9, [sp, #132]	; 0x84
   4878c:	b	48030 <__assert_fail@plt+0x36e24>
   48790:	mov	r1, #2
   48794:	ldr	r3, [r8]
   48798:	mov	r0, r9
   4879c:	blx	r3
   487a0:	sub	r3, r0, #2
   487a4:	cmp	r3, #2
   487a8:	bhi	483f4 <__assert_fail@plt+0x371e8>
   487ac:	ldr	r3, [sp, #132]	; 0x84
   487b0:	cmp	r0, #4
   487b4:	add	r3, r3, #3
   487b8:	add	r3, r9, r3
   487bc:	addeq	r3, r3, #1
   487c0:	ldr	r2, [sp, #116]	; 0x74
   487c4:	add	r9, r3, #4
   487c8:	cmp	r2, r9
   487cc:	add	r0, r3, #3
   487d0:	bls	489a8 <__assert_fail@plt+0x3779c>
   487d4:	mov	r1, #1
   487d8:	ldr	r3, [r8]
   487dc:	blx	r3
   487e0:	cmp	r0, #0
   487e4:	beq	483f4 <__assert_fail@plt+0x371e8>
   487e8:	sub	r0, r0, #1
   487ec:	ldr	r4, [sp, #116]	; 0x74
   487f0:	add	r9, r9, r0
   487f4:	cmp	r4, r9
   487f8:	movhi	r6, r9
   487fc:	bhi	48818 <__assert_fail@plt+0x3760c>
   48800:	b	483f4 <__assert_fail@plt+0x371e8>
   48804:	bl	11104 <strnlen@plt>
   48808:	add	r0, r0, #1
   4880c:	add	r6, r6, r0
   48810:	cmp	r4, r6
   48814:	bls	483f4 <__assert_fail@plt+0x371e8>
   48818:	ldrb	r3, [r6]
   4881c:	sub	r1, r4, r6
   48820:	mov	r0, r6
   48824:	cmp	r3, #0
   48828:	bne	48804 <__assert_fail@plt+0x375f8>
   4882c:	add	r5, r6, #1
   48830:	cmp	r4, r5
   48834:	str	r4, [sp, #116]	; 0x74
   48838:	bls	483f4 <__assert_fail@plt+0x371e8>
   4883c:	ldrd	r0, [sp, #80]	; 0x50
   48840:	ldrb	r2, [r6, #1]
   48844:	cmp	r1, #0
   48848:	cmpeq	r0, #1
   4884c:	movne	r3, #1
   48850:	moveq	r3, #0
   48854:	cmp	r2, #0
   48858:	moveq	r3, #0
   4885c:	cmp	r3, #0
   48860:	beq	48928 <__assert_fail@plt+0x3771c>
   48864:	str	sl, [sp, #132]	; 0x84
   48868:	str	r9, [sp, #140]	; 0x8c
   4886c:	mov	sl, r0
   48870:	mov	r9, fp
   48874:	mov	fp, r1
   48878:	sub	r1, r4, r5
   4887c:	mov	r0, r5
   48880:	bl	11104 <strnlen@plt>
   48884:	mov	r3, r4
   48888:	mov	r2, #0
   4888c:	add	r1, sp, #156	; 0x9c
   48890:	add	r0, r0, #1
   48894:	add	r5, r5, r0
   48898:	mov	r0, r5
   4889c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   488a0:	ldr	r6, [sp, #156]	; 0x9c
   488a4:	mov	r3, r4
   488a8:	add	r6, r5, r6
   488ac:	mov	r0, r6
   488b0:	mov	r2, #0
   488b4:	add	r1, sp, #156	; 0x9c
   488b8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   488bc:	ldr	r2, [sp, #156]	; 0x9c
   488c0:	mov	r3, r4
   488c4:	add	r6, r6, r2
   488c8:	mov	r0, r6
   488cc:	mov	r2, #0
   488d0:	add	r1, sp, #156	; 0x9c
   488d4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   488d8:	ldr	r3, [sp, #156]	; 0x9c
   488dc:	subs	sl, sl, #1
   488e0:	add	r5, r6, r3
   488e4:	sbc	fp, fp, #0
   488e8:	cmp	r4, r5
   488ec:	bls	48b10 <__assert_fail@plt+0x37904>
   488f0:	ldrb	r2, [r6, r3]
   488f4:	cmp	fp, #0
   488f8:	cmpeq	sl, #1
   488fc:	movne	r3, #1
   48900:	moveq	r3, #0
   48904:	cmp	r2, #0
   48908:	moveq	r3, #0
   4890c:	cmp	r3, #0
   48910:	bne	48878 <__assert_fail@plt+0x3766c>
   48914:	strd	sl, [sp, #80]	; 0x50
   48918:	mov	fp, r9
   4891c:	ldr	sl, [sp, #132]	; 0x84
   48920:	ldr	r9, [sp, #140]	; 0x8c
   48924:	str	r4, [sp, #116]	; 0x74
   48928:	cmp	r2, #0
   4892c:	beq	483f4 <__assert_fail@plt+0x371e8>
   48930:	ldr	r4, [sp, #116]	; 0x74
   48934:	mov	r0, r5
   48938:	sub	r1, r4, r5
   4893c:	bl	11104 <strnlen@plt>
   48940:	add	r0, r0, #1
   48944:	add	r0, r5, r0
   48948:	cmp	r4, r0
   4894c:	bls	483f4 <__assert_fail@plt+0x371e8>
   48950:	ldr	r3, [sp, #104]	; 0x68
   48954:	mov	r2, #0
   48958:	sub	r1, r3, #4
   4895c:	mov	r3, r4
   48960:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48964:	mov	r2, r0
   48968:	mov	r3, r1
   4896c:	orrs	r1, r2, r3
   48970:	ldrne	r4, [sp, #116]	; 0x74
   48974:	bne	489fc <__assert_fail@plt+0x377f0>
   48978:	ldr	r9, [pc, #1000]	; 48d68 <__assert_fail@plt+0x37b5c>
   4897c:	mov	r2, #5
   48980:	ldr	r1, [pc, #996]	; 48d6c <__assert_fail@plt+0x37b60>
   48984:	mov	r0, #0
   48988:	bl	10f90 <dcgettext@plt>
   4898c:	mov	r3, r9
   48990:	stm	sp, {r3, r5}
   48994:	ldr	r2, [sp, #56]	; 0x38
   48998:	mov	r3, r9
   4899c:	ldr	r1, [sp, #68]	; 0x44
   489a0:	bl	10f24 <printf@plt>
   489a4:	b	48178 <__assert_fail@plt+0x36f6c>
   489a8:	cmp	r2, r0
   489ac:	bls	483f4 <__assert_fail@plt+0x371e8>
   489b0:	sub	r1, r2, r0
   489b4:	sub	r3, r1, #1
   489b8:	cmp	r3, #7
   489bc:	bls	487d8 <__assert_fail@plt+0x375cc>
   489c0:	b	483f4 <__assert_fail@plt+0x371e8>
   489c4:	sub	r1, r2, r0
   489c8:	sub	r0, r1, #1
   489cc:	cmp	r0, #7
   489d0:	bhi	4851c <__assert_fail@plt+0x37310>
   489d4:	b	485e0 <__assert_fail@plt+0x373d4>
   489d8:	strd	r2, [sp, #104]	; 0x68
   489dc:	bl	11104 <strnlen@plt>
   489e0:	ldrd	r2, [sp, #104]	; 0x68
   489e4:	subs	r2, r2, #1
   489e8:	sbc	r3, r3, #0
   489ec:	add	r0, r0, #1
   489f0:	add	r9, r9, r0
   489f4:	cmp	r4, r9
   489f8:	bls	483f4 <__assert_fail@plt+0x371e8>
   489fc:	ldrb	lr, [r9]
   48a00:	cmp	r3, #0
   48a04:	cmpeq	r2, #1
   48a08:	movhi	ip, #1
   48a0c:	movls	ip, #0
   48a10:	cmp	lr, #0
   48a14:	moveq	ip, #0
   48a18:	cmp	ip, #0
   48a1c:	sub	r1, r4, r9
   48a20:	mov	r0, r9
   48a24:	bne	489d8 <__assert_fail@plt+0x377cc>
   48a28:	cmp	r4, r9
   48a2c:	bls	483f4 <__assert_fail@plt+0x371e8>
   48a30:	cmp	lr, #0
   48a34:	beq	483f4 <__assert_fail@plt+0x371e8>
   48a38:	mov	r0, ip
   48a3c:	mov	r2, #5
   48a40:	ldr	r1, [pc, #804]	; 48d6c <__assert_fail@plt+0x37b60>
   48a44:	bl	10f90 <dcgettext@plt>
   48a48:	ldr	r3, [pc, #800]	; 48d70 <__assert_fail@plt+0x37b64>
   48a4c:	b	48990 <__assert_fail@plt+0x37784>
   48a50:	ldr	r2, [pc, #780]	; 48d64 <__assert_fail@plt+0x37b58>
   48a54:	ldr	r0, [pc, #768]	; 48d5c <__assert_fail@plt+0x37b50>
   48a58:	bl	10f24 <printf@plt>
   48a5c:	mov	r8, #0
   48a60:	b	486e0 <__assert_fail@plt+0x374d4>
   48a64:	ldr	r3, [sp, #116]	; 0x74
   48a68:	add	r5, r5, #12
   48a6c:	cmp	r3, r5
   48a70:	bhi	48ac8 <__assert_fail@plt+0x378bc>
   48a74:	cmp	r3, r9
   48a78:	bls	48a90 <__assert_fail@plt+0x37884>
   48a7c:	ldr	r3, [sp, #116]	; 0x74
   48a80:	sub	r1, r3, r9
   48a84:	sub	r3, r1, #1
   48a88:	cmp	r3, #7
   48a8c:	bls	48acc <__assert_fail@plt+0x378c0>
   48a90:	mov	ip, #8
   48a94:	mov	r9, r5
   48a98:	ldrd	r2, [r6]
   48a9c:	mov	r0, #12
   48aa0:	mov	r1, #0
   48aa4:	str	ip, [sp, #132]	; 0x84
   48aa8:	b	4852c <__assert_fail@plt+0x37320>
   48aac:	mov	fp, r5
   48ab0:	str	r4, [sp, #136]	; 0x88
   48ab4:	mov	r0, #10
   48ab8:	bl	110c8 <putchar@plt>
   48abc:	cmp	fp, r7
   48ac0:	bcc	480b4 <__assert_fail@plt+0x36ea8>
   48ac4:	b	47e64 <__assert_fail@plt+0x36c58>
   48ac8:	mov	r1, #8
   48acc:	mov	r0, r9
   48ad0:	ldr	r3, [r8]
   48ad4:	blx	r3
   48ad8:	mov	ip, #8
   48adc:	mov	r9, r5
   48ae0:	mov	r2, #12
   48ae4:	mov	r3, #0
   48ae8:	str	ip, [sp, #132]	; 0x84
   48aec:	b	48610 <__assert_fail@plt+0x37404>
   48af0:	ldr	r3, [sp, #68]	; 0x44
   48af4:	ldr	sl, [sp, #136]	; 0x88
   48af8:	str	r3, [sp, #136]	; 0x88
   48afc:	b	48ab4 <__assert_fail@plt+0x378a8>
   48b00:	mov	r0, #10
   48b04:	bl	110c8 <putchar@plt>
   48b08:	mov	r0, #1
   48b0c:	b	47dc0 <__assert_fail@plt+0x36bb4>
   48b10:	strd	sl, [sp, #80]	; 0x50
   48b14:	ldr	sl, [sp, #132]	; 0x84
   48b18:	mov	fp, r9
   48b1c:	b	483f4 <__assert_fail@plt+0x371e8>
   48b20:	mov	r2, #0
   48b24:	mov	r3, #0
   48b28:	mov	r5, r9
   48b2c:	strd	r2, [sp, #96]	; 0x60
   48b30:	b	47f3c <__assert_fail@plt+0x36d30>
   48b34:	mov	r8, r6
   48b38:	b	486e0 <__assert_fail@plt+0x374d4>
   48b3c:	ldr	r3, [sp, #136]	; 0x88
   48b40:	cmp	r3, #0
   48b44:	beq	48b9c <__assert_fail@plt+0x37990>
   48b48:	ldr	r5, [r3, r4, lsl #2]
   48b4c:	cmp	r5, #0
   48b50:	beq	48b9c <__assert_fail@plt+0x37990>
   48b54:	mov	r3, r7
   48b58:	mov	r2, #0
   48b5c:	add	r1, sp, #152	; 0x98
   48b60:	mov	r0, r5
   48b64:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48b68:	mov	r2, r0
   48b6c:	mov	r3, r1
   48b70:	strd	r2, [sp, #56]	; 0x38
   48b74:	orrs	r3, r2, r3
   48b78:	bne	48bbc <__assert_fail@plt+0x379b0>
   48b7c:	mov	r2, #5
   48b80:	ldr	r1, [pc, #492]	; 48d74 <__assert_fail@plt+0x37b68>
   48b84:	mov	r0, #0
   48b88:	bl	10f90 <dcgettext@plt>
   48b8c:	mov	r1, r4
   48b90:	mov	fp, r9
   48b94:	bl	10f24 <printf@plt>
   48b98:	b	48178 <__assert_fail@plt+0x36f6c>
   48b9c:	mov	r2, #5
   48ba0:	ldr	r1, [pc, #464]	; 48d78 <__assert_fail@plt+0x37b6c>
   48ba4:	mov	r0, #0
   48ba8:	bl	10f90 <dcgettext@plt>
   48bac:	mov	r1, r4
   48bb0:	bl	548ac <error@@Base>
   48bb4:	mov	r0, #0
   48bb8:	b	47dc0 <__assert_fail@plt+0x36bb4>
   48bbc:	ldr	r3, [sp, #152]	; 0x98
   48bc0:	mov	r2, #5
   48bc4:	add	r3, r5, r3
   48bc8:	ldr	r1, [pc, #428]	; 48d7c <__assert_fail@plt+0x37b70>
   48bcc:	mov	r0, #0
   48bd0:	str	r3, [sp, #68]	; 0x44
   48bd4:	bl	10f90 <dcgettext@plt>
   48bd8:	mov	r1, r4
   48bdc:	bl	10f24 <printf@plt>
   48be0:	ldrd	r2, [sp, #56]	; 0x38
   48be4:	mov	fp, r9
   48be8:	mov	r4, #0
   48bec:	subs	r1, r2, #1
   48bf0:	sbc	r3, r3, #0
   48bf4:	str	r3, [sp, #148]	; 0x94
   48bf8:	ldr	r3, [sp, #68]	; 0x44
   48bfc:	mov	r9, fp
   48c00:	mov	r6, #0
   48c04:	mov	fp, sl
   48c08:	mov	sl, r4
   48c0c:	mov	r5, #0
   48c10:	str	r1, [sp, #144]	; 0x90
   48c14:	str	r5, [sp, #104]	; 0x68
   48c18:	add	r2, r3, #1
   48c1c:	cmp	r2, r7
   48c20:	str	r2, [sp, #68]	; 0x44
   48c24:	bcc	48ce8 <__assert_fail@plt+0x37adc>
   48c28:	cmp	r7, r3
   48c2c:	bls	48c40 <__assert_fail@plt+0x37a34>
   48c30:	sub	r1, r7, r3
   48c34:	sub	r0, r1, #1
   48c38:	cmp	r0, #7
   48c3c:	bls	48cec <__assert_fail@plt+0x37ae0>
   48c40:	mov	r1, #0
   48c44:	ldr	r2, [sp, #88]	; 0x58
   48c48:	mov	r3, #32
   48c4c:	str	r2, [sp, #32]
   48c50:	mov	r2, #0
   48c54:	str	r2, [sp, #28]
   48c58:	ldr	r2, [sp, #104]	; 0x68
   48c5c:	str	r9, [sp]
   48c60:	str	r2, [sp, #20]
   48c64:	str	r2, [sp, #12]
   48c68:	str	r3, [sp, #52]	; 0x34
   48c6c:	mov	r2, #0
   48c70:	mov	r3, #0
   48c74:	str	r6, [sp, #48]	; 0x30
   48c78:	str	r6, [sp, #44]	; 0x2c
   48c7c:	str	r6, [sp, #40]	; 0x28
   48c80:	str	r6, [sp, #36]	; 0x24
   48c84:	str	fp, [sp, #24]
   48c88:	str	sl, [sp, #16]
   48c8c:	str	sl, [sp, #8]
   48c90:	str	r7, [sp, #4]
   48c94:	mov	r0, #0
   48c98:	bl	4276c <__assert_fail@plt+0x31560>
   48c9c:	ldrd	r2, [sp, #144]	; 0x90
   48ca0:	cmp	r3, r5
   48ca4:	cmpeq	r2, r4
   48ca8:	mov	r9, r0
   48cac:	beq	48cb8 <__assert_fail@plt+0x37aac>
   48cb0:	mov	r0, #44	; 0x2c
   48cb4:	bl	110c8 <putchar@plt>
   48cb8:	ldrd	r2, [sp, #56]	; 0x38
   48cbc:	adds	r4, r4, #1
   48cc0:	adc	r5, r5, #0
   48cc4:	cmp	r5, r3
   48cc8:	cmpeq	r4, r2
   48ccc:	ldr	r3, [sp, #68]	; 0x44
   48cd0:	bne	48c18 <__assert_fail@plt+0x37a0c>
   48cd4:	mov	r0, #10
   48cd8:	mov	sl, fp
   48cdc:	mov	fp, r9
   48ce0:	bl	110c8 <putchar@plt>
   48ce4:	b	48178 <__assert_fail@plt+0x36f6c>
   48ce8:	mov	r1, #1
   48cec:	mov	r0, r3
   48cf0:	ldr	r3, [r8]
   48cf4:	blx	r3
   48cf8:	mov	r1, r0
   48cfc:	b	48c44 <__assert_fail@plt+0x37a38>
   48d00:	andeq	r1, r8, r8, lsl #3
   48d04:	andeq	lr, r9, ip, asr sp
   48d08:	andeq	r1, r8, ip, asr #3
   48d0c:	strdeq	r1, [r8], -r4
   48d10:	andeq	r1, r8, r8, lsl r2
   48d14:	andeq	r1, r8, ip, ror #5
   48d18:	andeq	r1, r8, ip, lsr r2
   48d1c:	andeq	r1, r8, r4, ror #4
   48d20:	andeq	r1, r8, r4, lsl #5
   48d24:	andeq	r1, r8, ip, ror #9
   48d28:			; <UNDEFINED> instruction: 0x000814b4
   48d2c:	andeq	r1, r8, r8, ror r4
   48d30:	andeq	r1, r8, r4, asr r4
   48d34:	andeq	r1, r8, r4, lsr #8
   48d38:	strdeq	r1, [r8], -r4
   48d3c:	andeq	r1, r8, r8, lsl #7
   48d40:	andeq	r1, r8, r8, lsl r3
   48d44:	andeq	r1, r8, r8, asr r3
   48d48:	andeq	r1, r8, r8, asr #7
   48d4c:	muleq	r8, ip, r3
   48d50:	strdeq	r9, [r9], -r0
   48d54:	andeq	r1, r8, r8, lsr #5
   48d58:			; <UNDEFINED> instruction: 0x00068eb8
   48d5c:	muleq	r8, r8, sl
   48d60:	andeq	r1, r8, r8, asr #5
   48d64:	muleq	r7, ip, sl
   48d68:	andeq	fp, r6, ip, ror #2
   48d6c:	andeq	r1, r8, ip, asr r5
   48d70:	andeq	r1, r8, r4, lsl #3
   48d74:	andeq	r1, r8, r8, lsr r5
   48d78:	andeq	r1, r8, r4, lsl r5
   48d7c:	andeq	r1, r8, r8, asr #10
   48d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   48d84:	mov	sl, r2
   48d88:	sub	sp, sp, #124	; 0x7c
   48d8c:	add	r2, r0, #1
   48d90:	cmp	r2, sl
   48d94:	str	r2, [sp, #104]	; 0x68
   48d98:	mov	r6, r1
   48d9c:	str	r3, [sp, #76]	; 0x4c
   48da0:	bcc	48ec8 <__assert_fail@plt+0x37cbc>
   48da4:	cmp	r0, sl
   48da8:	bcc	49024 <__assert_fail@plt+0x37e18>
   48dac:	ldr	fp, [sp, #104]	; 0x68
   48db0:	add	r9, sp, #116	; 0x74
   48db4:	mov	r3, #0
   48db8:	str	r3, [sp, #68]	; 0x44
   48dbc:	mov	r3, sl
   48dc0:	mov	r2, #0
   48dc4:	mov	r1, r9
   48dc8:	mov	r0, fp
   48dcc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48dd0:	ldr	r3, [sp, #116]	; 0x74
   48dd4:	add	r3, fp, r3
   48dd8:	cmp	sl, r3
   48ddc:	str	r3, [sp, #92]	; 0x5c
   48de0:	strd	r0, [sp, #96]	; 0x60
   48de4:	beq	4924c <__assert_fail@plt+0x38040>
   48de8:	ldrd	r2, [sp, #96]	; 0x60
   48dec:	orrs	r3, r2, r3
   48df0:	mov	r2, #5
   48df4:	beq	4926c <__assert_fail@plt+0x38060>
   48df8:	ldr	r1, [pc, #1212]	; 492bc <__assert_fail@plt+0x380b0>
   48dfc:	mov	r0, #0
   48e00:	bl	10f90 <dcgettext@plt>
   48e04:	ldr	r3, [sp, #92]	; 0x5c
   48e08:	ldr	r1, [sp, #168]	; 0xa8
   48e0c:	sub	r2, r3, r6
   48e10:	bl	10f24 <printf@plt>
   48e14:	mov	r2, #5
   48e18:	ldr	r1, [pc, #1184]	; 492c0 <__assert_fail@plt+0x380b4>
   48e1c:	mov	r0, #0
   48e20:	mov	fp, #2
   48e24:	bl	10f90 <dcgettext@plt>
   48e28:	bl	10f24 <printf@plt>
   48e2c:	str	fp, [sp, #72]	; 0x48
   48e30:	ldr	fp, [sp, #68]	; 0x44
   48e34:	cmp	fp, #0
   48e38:	beq	48fac <__assert_fail@plt+0x37da0>
   48e3c:	ldr	r3, [sp, #72]	; 0x48
   48e40:	ldr	r4, [sp, #104]	; 0x68
   48e44:	mov	r5, #0
   48e48:	and	r8, r3, #1
   48e4c:	mov	r2, #0
   48e50:	mov	r3, sl
   48e54:	mov	r0, r4
   48e58:	mov	r1, r9
   48e5c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48e60:	ldr	r3, [sp, #116]	; 0x74
   48e64:	add	r4, r4, r3
   48e68:	cmp	r1, #0
   48e6c:	cmpeq	r0, #1
   48e70:	movne	r2, #1
   48e74:	moveq	r2, #0
   48e78:	cmp	r2, r8
   48e7c:	mov	r6, r0
   48e80:	mov	r7, r1
   48e84:	beq	48f80 <__assert_fail@plt+0x37d74>
   48e88:	subs	r3, r0, #1
   48e8c:	str	r3, [sp, #56]	; 0x38
   48e90:	sbc	r3, r1, #0
   48e94:	str	r3, [sp, #60]	; 0x3c
   48e98:	ldrd	r2, [sp, #56]	; 0x38
   48e9c:	cmp	r3, #0
   48ea0:	cmpeq	r2, #4
   48ea4:	bhi	49038 <__assert_fail@plt+0x37e2c>
   48ea8:	cmp	r2, #4
   48eac:	ldrls	pc, [pc, r2, lsl #2]
   48eb0:	b	49038 <__assert_fail@plt+0x37e2c>
   48eb4:	andeq	r9, r4, ip
   48eb8:	strdeq	r8, [r4], -r4
   48ebc:	ldrdeq	r8, [r4], -ip
   48ec0:	andeq	r8, r4, r4, asr #31
   48ec4:	andeq	r8, r4, ip, ror #30
   48ec8:	mov	r1, #1
   48ecc:	ldr	r3, [pc, #1008]	; 492c4 <__assert_fail@plt+0x380b8>
   48ed0:	ldr	r3, [r3]
   48ed4:	blx	r3
   48ed8:	ldr	fp, [sp, #104]	; 0x68
   48edc:	uxtb	r5, r0
   48ee0:	cmp	r5, #0
   48ee4:	str	r5, [sp, #68]	; 0x44
   48ee8:	beq	492b4 <__assert_fail@plt+0x380a8>
   48eec:	mov	r4, #0
   48ef0:	add	r9, sp, #116	; 0x74
   48ef4:	b	48f00 <__assert_fail@plt+0x37cf4>
   48ef8:	cmp	r5, r3
   48efc:	bls	48dbc <__assert_fail@plt+0x37bb0>
   48f00:	mov	r3, sl
   48f04:	mov	r2, #0
   48f08:	mov	r0, fp
   48f0c:	mov	r1, r9
   48f10:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48f14:	ldr	r2, [sp, #116]	; 0x74
   48f18:	mov	r3, sl
   48f1c:	add	fp, fp, r2
   48f20:	mov	r0, fp
   48f24:	mov	r2, #0
   48f28:	mov	r1, r9
   48f2c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48f30:	ldr	r3, [sp, #116]	; 0x74
   48f34:	add	r4, r4, #1
   48f38:	add	fp, fp, r3
   48f3c:	cmp	sl, fp
   48f40:	uxtb	r3, r4
   48f44:	bne	48ef8 <__assert_fail@plt+0x37cec>
   48f48:	ldr	r1, [pc, #888]	; 492c8 <__assert_fail@plt+0x380bc>
   48f4c:	mov	r2, #5
   48f50:	mov	r0, #0
   48f54:	bl	10f90 <dcgettext@plt>
   48f58:	ldr	r1, [sp, #168]	; 0xa8
   48f5c:	bl	54dd0 <warn@@Base>
   48f60:	mov	r0, fp
   48f64:	add	sp, sp, #124	; 0x7c
   48f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   48f6c:	mov	r2, #5
   48f70:	ldr	r1, [pc, #852]	; 492cc <__assert_fail@plt+0x380c0>
   48f74:	mov	r0, #0
   48f78:	bl	10f90 <dcgettext@plt>
   48f7c:	bl	10f24 <printf@plt>
   48f80:	add	r5, r5, #1
   48f84:	mov	r3, sl
   48f88:	mov	r2, #0
   48f8c:	mov	r0, r4
   48f90:	mov	r1, r9
   48f94:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   48f98:	uxtb	r2, r5
   48f9c:	ldr	r3, [sp, #116]	; 0x74
   48fa0:	cmp	r2, fp
   48fa4:	add	r4, r4, r3
   48fa8:	bcc	48e4c <__assert_fail@plt+0x37c40>
   48fac:	ldr	r3, [sp, #72]	; 0x48
   48fb0:	cmp	r3, #1
   48fb4:	beq	49074 <__assert_fail@plt+0x37e68>
   48fb8:	mov	r3, #1
   48fbc:	str	r3, [sp, #72]	; 0x48
   48fc0:	b	48e34 <__assert_fail@plt+0x37c28>
   48fc4:	mov	r2, #5
   48fc8:	ldr	r1, [pc, #768]	; 492d0 <__assert_fail@plt+0x380c4>
   48fcc:	mov	r0, #0
   48fd0:	bl	10f90 <dcgettext@plt>
   48fd4:	bl	10f24 <printf@plt>
   48fd8:	b	48f80 <__assert_fail@plt+0x37d74>
   48fdc:	mov	r2, #5
   48fe0:	ldr	r1, [pc, #748]	; 492d4 <__assert_fail@plt+0x380c8>
   48fe4:	mov	r0, #0
   48fe8:	bl	10f90 <dcgettext@plt>
   48fec:	bl	10f24 <printf@plt>
   48ff0:	b	48f80 <__assert_fail@plt+0x37d74>
   48ff4:	mov	r2, #5
   48ff8:	ldr	r1, [pc, #728]	; 492d8 <__assert_fail@plt+0x380cc>
   48ffc:	mov	r0, #0
   49000:	bl	10f90 <dcgettext@plt>
   49004:	bl	10f24 <printf@plt>
   49008:	b	48f80 <__assert_fail@plt+0x37d74>
   4900c:	mov	r2, #5
   49010:	ldr	r1, [pc, #708]	; 492dc <__assert_fail@plt+0x380d0>
   49014:	mov	r0, #0
   49018:	bl	10f90 <dcgettext@plt>
   4901c:	bl	10f24 <printf@plt>
   49020:	b	48f80 <__assert_fail@plt+0x37d74>
   49024:	sub	r1, sl, r0
   49028:	sub	r3, r1, #1
   4902c:	cmp	r3, #7
   49030:	bhi	48dac <__assert_fail@plt+0x37ba0>
   49034:	b	48ecc <__assert_fail@plt+0x37cc0>
   49038:	mov	r2, #5
   4903c:	ldr	r1, [pc, #668]	; 492e0 <__assert_fail@plt+0x380d4>
   49040:	mov	r0, #0
   49044:	bl	10f90 <dcgettext@plt>
   49048:	mov	r1, #0
   4904c:	str	r1, [sp]
   49050:	mov	r2, r6
   49054:	mov	r3, r7
   49058:	str	r0, [sp, #80]	; 0x50
   4905c:	ldr	r0, [pc, #640]	; 492e4 <__assert_fail@plt+0x380d8>
   49060:	bl	3c744 <__assert_fail@plt+0x2b538>
   49064:	mov	r1, r0
   49068:	ldr	r0, [sp, #80]	; 0x50
   4906c:	bl	10f24 <printf@plt>
   49070:	b	48f80 <__assert_fail@plt+0x37d74>
   49074:	mov	r3, #0
   49078:	mov	r5, r3
   4907c:	ldr	r3, [pc, #612]	; 492e8 <__assert_fail@plt+0x380dc>
   49080:	mov	r2, #0
   49084:	mov	r4, r2
   49088:	mov	r8, r5
   4908c:	mov	r7, r9
   49090:	mov	r0, #10
   49094:	ldr	r1, [r3]
   49098:	strd	r4, [sp, #80]	; 0x50
   4909c:	bl	11158 <putc@plt>
   490a0:	str	r4, [sp, #108]	; 0x6c
   490a4:	ldr	r1, [sp, #80]	; 0x50
   490a8:	ldr	r0, [pc, #572]	; 492ec <__assert_fail@plt+0x380e0>
   490ac:	bl	10f24 <printf@plt>
   490b0:	mov	r3, #2
   490b4:	str	r3, [sp, #88]	; 0x58
   490b8:	ldr	r9, [sp, #108]	; 0x6c
   490bc:	mov	r3, r8
   490c0:	mov	r8, r7
   490c4:	mov	r7, r3
   490c8:	ldr	r3, [sp, #68]	; 0x44
   490cc:	cmp	r3, #0
   490d0:	ldreq	fp, [sp, #92]	; 0x5c
   490d4:	beq	491e0 <__assert_fail@plt+0x37fd4>
   490d8:	ldr	r3, [sp, #88]	; 0x58
   490dc:	mov	r5, #0
   490e0:	and	r3, r3, #1
   490e4:	str	r3, [sp, #72]	; 0x48
   490e8:	ldr	fp, [sp, #92]	; 0x5c
   490ec:	mov	r3, r9
   490f0:	ldr	r4, [sp, #104]	; 0x68
   490f4:	mov	r6, r5
   490f8:	mov	r9, r8
   490fc:	mov	r8, r5
   49100:	mov	r5, r3
   49104:	mov	r3, sl
   49108:	mov	r2, #0
   4910c:	mov	r0, r4
   49110:	mov	r1, r9
   49114:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49118:	ldr	r2, [sp, #116]	; 0x74
   4911c:	mov	r3, sl
   49120:	add	r4, r4, r2
   49124:	mov	r2, #0
   49128:	add	r8, r8, #1
   4912c:	strd	r0, [sp, #56]	; 0x38
   49130:	mov	r0, r4
   49134:	mov	r1, r9
   49138:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4913c:	ldrd	r2, [sp, #56]	; 0x38
   49140:	ldr	lr, [sp, #72]	; 0x48
   49144:	ldr	r1, [sp, #116]	; 0x74
   49148:	cmp	r3, #0
   4914c:	ldr	r3, [sp, #76]	; 0x4c
   49150:	cmpeq	r2, #1
   49154:	ldr	r2, [sp, #160]	; 0xa0
   49158:	ldrh	ip, [r3]
   4915c:	moveq	r3, #1
   49160:	movne	r3, #0
   49164:	eor	r3, r3, lr
   49168:	mov	lr, #9
   4916c:	ldr	r2, [r2]
   49170:	str	lr, [sp, #52]	; 0x34
   49174:	ldr	lr, [sp, #164]	; 0xa4
   49178:	str	fp, [sp]
   4917c:	str	r3, [sp, #40]	; 0x28
   49180:	str	r2, [sp, #24]
   49184:	mov	r3, #0
   49188:	mov	r2, #0
   4918c:	str	r6, [sp, #48]	; 0x30
   49190:	str	lr, [sp, #44]	; 0x2c
   49194:	str	r6, [sp, #36]	; 0x24
   49198:	str	r6, [sp, #28]
   4919c:	str	r5, [sp, #16]
   491a0:	str	r7, [sp, #20]
   491a4:	str	r5, [sp, #8]
   491a8:	str	r7, [sp, #12]
   491ac:	str	sl, [sp, #4]
   491b0:	str	ip, [sp, #32]
   491b4:	add	r4, r4, r1
   491b8:	mov	r1, r0
   491bc:	mov	r0, #0
   491c0:	bl	4276c <__assert_fail@plt+0x31560>
   491c4:	ldr	r2, [sp, #68]	; 0x44
   491c8:	uxtb	r3, r8
   491cc:	cmp	r3, r2
   491d0:	mov	fp, r0
   491d4:	bcc	49104 <__assert_fail@plt+0x37ef8>
   491d8:	mov	r8, r9
   491dc:	mov	r9, r5
   491e0:	ldr	r3, [sp, #88]	; 0x58
   491e4:	cmp	r3, #1
   491e8:	movne	r3, #1
   491ec:	strne	r3, [sp, #88]	; 0x58
   491f0:	bne	490c8 <__assert_fail@plt+0x37ebc>
   491f4:	mov	r3, r7
   491f8:	cmp	sl, fp
   491fc:	mov	r7, r8
   49200:	mov	r8, r3
   49204:	beq	49290 <__assert_fail@plt+0x38084>
   49208:	ldr	r3, [pc, #216]	; 492e8 <__assert_fail@plt+0x380dc>
   4920c:	mov	r0, #10
   49210:	ldr	r1, [r3]
   49214:	bl	11158 <putc@plt>
   49218:	ldr	r3, [sp, #80]	; 0x50
   4921c:	adds	r3, r3, #1
   49220:	str	r3, [sp, #80]	; 0x50
   49224:	ldr	r3, [sp, #84]	; 0x54
   49228:	adc	r3, r3, #0
   4922c:	str	r3, [sp, #84]	; 0x54
   49230:	ldrd	r0, [sp, #80]	; 0x50
   49234:	ldrd	r2, [sp, #96]	; 0x60
   49238:	cmp	r3, r1
   4923c:	cmpeq	r2, r0
   49240:	beq	48f60 <__assert_fail@plt+0x37d54>
   49244:	str	fp, [sp, #92]	; 0x5c
   49248:	b	490a4 <__assert_fail@plt+0x37e98>
   4924c:	mov	r2, #5
   49250:	ldr	r1, [pc, #152]	; 492f0 <__assert_fail@plt+0x380e4>
   49254:	mov	r0, #0
   49258:	bl	10f90 <dcgettext@plt>
   4925c:	ldr	r1, [sp, #168]	; 0xa8
   49260:	mov	fp, sl
   49264:	bl	54dd0 <warn@@Base>
   49268:	b	48f60 <__assert_fail@plt+0x37d54>
   4926c:	ldr	r1, [pc, #128]	; 492f4 <__assert_fail@plt+0x380e8>
   49270:	mov	r0, #0
   49274:	bl	10f90 <dcgettext@plt>
   49278:	ldr	r1, [sp, #168]	; 0xa8
   4927c:	ldr	fp, [sp, #92]	; 0x5c
   49280:	bl	10f24 <printf@plt>
   49284:	mov	r0, fp
   49288:	add	sp, sp, #124	; 0x7c
   4928c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   49290:	mov	r2, #5
   49294:	ldr	r1, [pc, #92]	; 492f8 <__assert_fail@plt+0x380ec>
   49298:	mov	r0, #0
   4929c:	bl	10f90 <dcgettext@plt>
   492a0:	ldr	r1, [sp, #168]	; 0xa8
   492a4:	bl	54dd0 <warn@@Base>
   492a8:	mov	r0, fp
   492ac:	add	sp, sp, #124	; 0x7c
   492b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   492b4:	add	r9, sp, #116	; 0x74
   492b8:	b	48dbc <__assert_fail@plt+0x37bb0>
   492bc:	andeq	r1, r8, ip, ror #11
   492c0:	andeq	r1, r8, ip, lsl #12
   492c4:	andeq	lr, r9, ip, asr sp
   492c8:	muleq	r8, ip, r5
   492cc:	andeq	r1, r8, r4, lsr r6
   492d0:	andeq	r1, r8, ip, lsr #12
   492d4:	andeq	r1, r8, r4, lsr #12
   492d8:	andeq	r1, r8, ip, lsl r6
   492dc:	andeq	r1, r8, r4, lsl r6
   492e0:	andeq	r1, r8, ip, lsr r6
   492e4:	andeq	r3, r6, ip, asr #17
   492e8:	andeq	sl, r9, ip, lsr #8
   492ec:	andeq	r1, r8, r0, ror #12
   492f0:			; <UNDEFINED> instruction: 0x000815bc
   492f4:	ldrdeq	r1, [r8], -r0
   492f8:	andeq	r1, r8, r8, ror #12
   492fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   49300:	sub	sp, sp, #228	; 0xe4
   49304:	ldr	sl, [r0, #16]
   49308:	str	r1, [sp, #132]	; 0x84
   4930c:	ldr	r1, [pc, #4032]	; 4a2d4 <__assert_fail@plt+0x390c8>
   49310:	ldr	r2, [r0, #32]
   49314:	str	r0, [sp, #76]	; 0x4c
   49318:	ldr	r3, [r1]
   4931c:	add	fp, sl, r2
   49320:	cmp	r3, #0
   49324:	moveq	r3, #1
   49328:	streq	r3, [r1]
   4932c:	bne	49370 <__assert_fail@plt+0x38164>
   49330:	ldr	r3, [pc, #4000]	; 4a2d8 <__assert_fail@plt+0x390cc>
   49334:	mov	r2, #5
   49338:	ldr	r3, [r3]
   4933c:	cmp	r3, #0
   49340:	beq	49bd4 <__assert_fail@plt+0x389c8>
   49344:	ldr	r4, [sp, #76]	; 0x4c
   49348:	ldr	r3, [r4, #12]
   4934c:	cmp	r3, #0
   49350:	beq	49bd4 <__assert_fail@plt+0x389c8>
   49354:	ldr	r1, [pc, #3968]	; 4a2dc <__assert_fail@plt+0x390d0>
   49358:	mov	r0, #0
   4935c:	bl	10f90 <dcgettext@plt>
   49360:	ldr	r2, [r4, #12]
   49364:	ldr	r1, [r4, #8]
   49368:	bl	10f24 <printf@plt>
   4936c:	b	49bec <__assert_fail@plt+0x389e0>
   49370:	tst	r3, #1
   49374:	bne	49330 <__assert_fail@plt+0x38124>
   49378:	tst	r3, #2
   4937c:	bne	4938c <__assert_fail@plt+0x38180>
   49380:	mov	r0, #1
   49384:	add	sp, sp, #228	; 0xe4
   49388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4938c:	ldr	r3, [sp, #76]	; 0x4c
   49390:	add	r1, r3, #12
   49394:	add	r0, r3, #8
   49398:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   4939c:	cmp	sl, fp
   493a0:	bcs	49380 <__assert_fail@plt+0x38174>
   493a4:	mov	r3, #1
   493a8:	str	r3, [sp, #172]	; 0xac
   493ac:	add	r3, sp, #184	; 0xb8
   493b0:	str	r3, [sp, #92]	; 0x5c
   493b4:	ldr	r7, [pc, #3876]	; 4a2e0 <__assert_fail@plt+0x390d4>
   493b8:	ldr	r3, [sp, #76]	; 0x4c
   493bc:	mov	r2, #12
   493c0:	ldr	r1, [pc, #3868]	; 4a2e4 <__assert_fail@plt+0x390d8>
   493c4:	ldr	r5, [r3, #8]
   493c8:	mov	r0, r5
   493cc:	bl	111d0 <strncmp@plt>
   493d0:	subs	r4, r0, #0
   493d4:	bne	4a864 <__assert_fail@plt+0x39658>
   493d8:	mov	r0, r5
   493dc:	ldr	r1, [pc, #3844]	; 4a2e8 <__assert_fail@plt+0x390dc>
   493e0:	bl	10f18 <strcmp@plt>
   493e4:	cmp	r0, #0
   493e8:	beq	4a864 <__assert_fail@plt+0x39658>
   493ec:	ldr	lr, [pc, #3832]	; 4a2ec <__assert_fail@plt+0x390e0>
   493f0:	ldr	ip, [sp, #92]	; 0x5c
   493f4:	add	r5, lr, #8
   493f8:	str	fp, [sp, #176]	; 0xb0
   493fc:	ldm	r5!, {r0, r1, r2, r3}
   49400:	stmia	ip!, {r0, r1, r2, r3}
   49404:	ldm	r5!, {r0, r1, r2, r3}
   49408:	stmia	ip!, {r0, r1, r2, r3}
   4940c:	ldm	r5, {r0, r1}
   49410:	stm	ip, {r0, r1}
   49414:	ldrb	r0, [sp, #216]	; 0xd8
   49418:	cmp	r0, #0
   4941c:	beq	4b954 <__assert_fail@plt+0x3a748>
   49420:	sub	r9, lr, #224	; 0xe0
   49424:	mov	r1, #0
   49428:	mov	r3, #1
   4942c:	ldrb	r0, [sp, #210]	; 0xd2
   49430:	mov	r2, r1
   49434:	str	r1, [sp, #56]	; 0x38
   49438:	strh	r4, [lr, #-200]	; 0xffffff38
   4943c:	mov	r6, sl
   49440:	str	r1, [r9, #-8]
   49444:	str	r3, [r7, #1460]	; 0x5b4
   49448:	sub	r1, lr, #240	; 0xf0
   4944c:	str	r3, [r7, #1464]	; 0x5b8
   49450:	mov	lr, fp
   49454:	ldr	r3, [pc, #3940]	; 4a3c0 <__assert_fail@plt+0x391b4>
   49458:	cmp	r6, lr
   4945c:	str	r4, [sp, #80]	; 0x50
   49460:	str	r4, [r7, #1456]	; 0x5b0
   49464:	str	r4, [r7, #1468]	; 0x5bc
   49468:	str	r4, [r7, #1476]	; 0x5c4
   4946c:	str	r4, [r7, #1484]	; 0x5cc
   49470:	str	r1, [sp, #116]	; 0x74
   49474:	str	r2, [r9, #-4]
   49478:	str	r2, [sp, #60]	; 0x3c
   4947c:	str	r4, [sp, #88]	; 0x58
   49480:	str	r4, [sp, #64]	; 0x40
   49484:	str	r4, [sp, #112]	; 0x70
   49488:	str	r0, [r7, #1472]	; 0x5c0
   4948c:	str	r3, [sp, #96]	; 0x60
   49490:	bcs	4a980 <__assert_fail@plt+0x39774>
   49494:	mov	r3, lr
   49498:	b	49604 <__assert_fail@plt+0x383f8>
   4949c:	sub	r0, r5, r0
   494a0:	ldrb	r6, [sp, #216]	; 0xd8
   494a4:	uxtb	r4, r0
   494a8:	mov	r0, r4
   494ac:	mov	r1, r6
   494b0:	bl	586e0 <warn@@Base+0x3910>
   494b4:	ldrb	r1, [sp, #209]	; 0xd1
   494b8:	ldrd	r2, [r9, #-8]
   494bc:	ldrb	r8, [sp, #208]	; 0xd0
   494c0:	cmp	r1, #1
   494c4:	strd	r2, [sp, #104]	; 0x68
   494c8:	uxtb	r0, r0
   494cc:	beq	4aa60 <__assert_fail@plt+0x39854>
   494d0:	ldrb	ip, [r7, #1480]	; 0x5c8
   494d4:	add	r0, ip, r0
   494d8:	bl	588cc <warn@@Base+0x3afc>
   494dc:	ldrd	r2, [sp, #104]	; 0x68
   494e0:	mul	r0, r8, r0
   494e4:	strb	r1, [r7, #1480]	; 0x5c8
   494e8:	adds	r2, r2, r0
   494ec:	adc	r3, r3, #0
   494f0:	cmp	r0, #0
   494f4:	strd	r2, [r9, #-8]
   494f8:	movne	r3, #0
   494fc:	strne	r3, [r7, #1456]	; 0x5b0
   49500:	mov	r1, r6
   49504:	mov	r0, r4
   49508:	bl	588cc <warn@@Base+0x3afc>
   4950c:	ldr	r3, [sp, #212]	; 0xd4
   49510:	ldr	r2, [r7, #1464]	; 0x5b8
   49514:	uxtab	r1, r3, r1
   49518:	add	r1, r1, r2
   4951c:	str	r1, [r7, #1464]	; 0x5b8
   49520:	ldr	r3, [sp, #64]	; 0x40
   49524:	cmp	r3, #0
   49528:	beq	499ec <__assert_fail@plt+0x387e0>
   4952c:	ldr	r4, [r7, #1460]	; 0x5b4
   49530:	ldr	r3, [sp, #88]	; 0x58
   49534:	sub	r4, r4, #1
   49538:	cmp	r4, r3
   4953c:	bcs	4aa30 <__assert_fail@plt+0x39824>
   49540:	ldr	r3, [sp, #64]	; 0x40
   49544:	ldr	r6, [r3, r4, lsl #4]
   49548:	mov	r0, r6
   4954c:	bl	11080 <strlen@plt>
   49550:	cmp	r0, #35	; 0x23
   49554:	mov	r8, r0
   49558:	bls	4aa10 <__assert_fail@plt+0x39804>
   4955c:	ldr	r3, [pc, #3736]	; 4a3fc <__assert_fail@plt+0x391f0>
   49560:	ldr	r3, [r3]
   49564:	cmp	r3, #0
   49568:	beq	4a9e0 <__assert_fail@plt+0x397d4>
   4956c:	add	r8, r0, #1
   49570:	mov	r0, r8
   49574:	bl	5861c <warn@@Base+0x384c>
   49578:	mov	r2, r8
   4957c:	mov	r1, r6
   49580:	mov	r4, r0
   49584:	bl	110d4 <strncpy@plt>
   49588:	ldr	r3, [pc, #3692]	; 4a3fc <__assert_fail@plt+0x391f0>
   4958c:	ldr	r3, [r3]
   49590:	cmp	r3, #0
   49594:	bne	4a9b0 <__assert_fail@plt+0x397a4>
   49598:	ldrb	r3, [sp, #209]	; 0xd1
   4959c:	ldr	r2, [r7, #1464]	; 0x5b8
   495a0:	ldrd	r0, [r9, #-8]
   495a4:	cmp	r3, #1
   495a8:	beq	4a99c <__assert_fail@plt+0x39790>
   495ac:	ldrb	r3, [r7, #1480]	; 0x5c8
   495b0:	strd	r0, [sp]
   495b4:	mov	r1, r4
   495b8:	str	r3, [sp, #8]
   495bc:	ldr	r0, [pc, #3372]	; 4a2f0 <__assert_fail@plt+0x390e4>
   495c0:	bl	10f24 <printf@plt>
   495c4:	ldr	r1, [r7, #1456]	; 0x5b0
   495c8:	cmp	r1, #0
   495cc:	beq	4a988 <__assert_fail@plt+0x3977c>
   495d0:	ldr	r0, [pc, #3356]	; 4a2f4 <__assert_fail@plt+0x390e8>
   495d4:	bl	10f24 <printf@plt>
   495d8:	ldr	r3, [r7, #1456]	; 0x5b0
   495dc:	cmn	r5, #1
   495e0:	add	r3, r3, #1
   495e4:	str	r3, [r7, #1456]	; 0x5b0
   495e8:	beq	4a814 <__assert_fail@plt+0x39608>
   495ec:	mov	r0, r4
   495f0:	bl	10f54 <free@plt>
   495f4:	ldr	r3, [sp, #176]	; 0xb0
   495f8:	cmp	r3, sl
   495fc:	bls	4969c <__assert_fail@plt+0x38490>
   49600:	mov	r6, sl
   49604:	mov	sl, r6
   49608:	ldrb	r0, [sp, #217]	; 0xd9
   4960c:	ldrb	r5, [sl], #1
   49610:	cmp	r5, r0
   49614:	bcs	4949c <__assert_fail@plt+0x38290>
   49618:	cmp	r5, #12
   4961c:	ldrls	pc, [pc, r5, lsl #2]
   49620:	b	49940 <__assert_fail@plt+0x38734>
   49624:	andeq	r9, r4, r4, lsl #20
   49628:	ldrdeq	r9, [r4], -r8
   4962c:	andeq	r9, r4, r0, lsl #17
   49630:	andeq	r9, r4, r4, asr r8
   49634:	andeq	r9, r4, r0, ror #14
   49638:	andeq	r9, r4, ip, lsr r7
   4963c:	andeq	r9, r4, ip, lsr #18
   49640:	andeq	r9, r4, r0, ror #17
   49644:	andeq	r9, r4, ip, ror #17
   49648:	andeq	r9, r4, r8, ror #13
   4964c:	ldrdeq	r9, [r4], -r8
   49650:	ldrdeq	r9, [r4], -r8
   49654:	andeq	r9, r4, r8, asr r6
   49658:	mov	r3, fp
   4965c:	mov	r2, #0
   49660:	mov	r0, sl
   49664:	add	r1, sp, #180	; 0xb4
   49668:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4966c:	ldr	r3, [sp, #180]	; 0xb4
   49670:	mov	r2, #5
   49674:	ldr	r1, [pc, #3196]	; 4a2f8 <__assert_fail@plt+0x390ec>
   49678:	add	sl, sl, r3
   4967c:	mov	r4, r0
   49680:	mov	r0, #0
   49684:	bl	10f90 <dcgettext@plt>
   49688:	mov	r1, r4
   4968c:	bl	10f24 <printf@plt>
   49690:	ldr	r3, [sp, #176]	; 0xb0
   49694:	cmp	r3, sl
   49698:	bhi	49600 <__assert_fail@plt+0x383f4>
   4969c:	ldr	r3, [sp, #64]	; 0x40
   496a0:	cmp	r3, #0
   496a4:	beq	496b0 <__assert_fail@plt+0x384a4>
   496a8:	mov	r0, r3
   496ac:	bl	10f54 <free@plt>
   496b0:	ldr	r3, [sp, #80]	; 0x50
   496b4:	cmp	r3, #0
   496b8:	beq	496c4 <__assert_fail@plt+0x384b8>
   496bc:	mov	r0, r3
   496c0:	bl	10f54 <free@plt>
   496c4:	ldr	r3, [sp, #96]	; 0x60
   496c8:	mov	r0, #10
   496cc:	ldr	r1, [r3]
   496d0:	bl	11158 <putc@plt>
   496d4:	cmp	fp, sl
   496d8:	bhi	493b8 <__assert_fail@plt+0x381ac>
   496dc:	ldr	r0, [sp, #172]	; 0xac
   496e0:	add	sp, sp, #228	; 0xe4
   496e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   496e8:	add	r6, r6, #3
   496ec:	cmp	fp, r6
   496f0:	bhi	4aaa0 <__assert_fail@plt+0x39894>
   496f4:	cmp	fp, sl
   496f8:	bls	4970c <__assert_fail@plt+0x38500>
   496fc:	sub	r1, fp, sl
   49700:	sub	r3, r1, #1
   49704:	cmp	r3, #7
   49708:	bls	4aaa4 <__assert_fail@plt+0x39898>
   4970c:	mov	r0, #0
   49710:	mov	r1, r0
   49714:	ldr	r3, [r9, #-8]
   49718:	ldr	r2, [r9, #-4]
   4971c:	adds	r3, r3, r0
   49720:	adc	r2, r2, r1
   49724:	mov	r1, #0
   49728:	mov	sl, r6
   4972c:	str	r3, [r9, #-8]
   49730:	str	r2, [r9, #-4]
   49734:	strb	r1, [r7, #1480]	; 0x5c8
   49738:	b	495f4 <__assert_fail@plt+0x383e8>
   4973c:	mov	r3, fp
   49740:	mov	r0, sl
   49744:	mov	r2, #0
   49748:	add	r1, sp, #180	; 0xb4
   4974c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49750:	ldr	r3, [sp, #180]	; 0xb4
   49754:	add	sl, sl, r3
   49758:	str	r0, [r7, #1468]	; 0x5bc
   4975c:	b	495f4 <__assert_fail@plt+0x383e8>
   49760:	mov	r3, fp
   49764:	mov	r0, sl
   49768:	mov	r2, #0
   4976c:	add	r1, sp, #180	; 0xb4
   49770:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49774:	ldr	r3, [sp, #88]	; 0x58
   49778:	clz	r4, r3
   4977c:	ldr	r3, [sp, #64]	; 0x40
   49780:	lsr	r4, r4, #5
   49784:	cmp	r3, #0
   49788:	moveq	r4, #1
   4978c:	ldr	r3, [sp, #180]	; 0xb4
   49790:	cmp	r4, #0
   49794:	add	sl, sl, r3
   49798:	mov	r5, r0
   4979c:	str	r0, [r7, #1460]	; 0x5b4
   497a0:	sub	r6, r0, #1
   497a4:	bne	4abf0 <__assert_fail@plt+0x399e4>
   497a8:	ldr	r3, [sp, #88]	; 0x58
   497ac:	cmp	r6, r3
   497b0:	bcs	4b638 <__assert_fail@plt+0x3a42c>
   497b4:	ldr	r3, [sp, #64]	; 0x40
   497b8:	add	r8, r3, r6, lsl #4
   497bc:	ldr	r5, [r8, #4]
   497c0:	cmp	r5, #0
   497c4:	beq	4b85c <__assert_fail@plt+0x3a650>
   497c8:	ldrd	r2, [sp, #56]	; 0x38
   497cc:	mov	r1, r2
   497d0:	orrs	r3, r1, r3
   497d4:	ldr	r3, [sp, #80]	; 0x50
   497d8:	moveq	r6, #1
   497dc:	movne	r6, #0
   497e0:	cmp	r3, #0
   497e4:	moveq	r6, #1
   497e8:	cmp	r6, #0
   497ec:	bne	4b970 <__assert_fail@plt+0x3a764>
   497f0:	ldrd	r0, [sp, #56]	; 0x38
   497f4:	mov	r3, #0
   497f8:	cmp	r1, r3
   497fc:	cmpeq	r0, r5
   49800:	bcs	4b8e0 <__assert_fail@plt+0x3a6d4>
   49804:	ldr	r1, [pc, #2800]	; 4a2fc <__assert_fail@plt+0x390f0>
   49808:	mov	r2, #5
   4980c:	mov	r0, r6
   49810:	bl	10f90 <dcgettext@plt>
   49814:	ldrd	r2, [sp, #56]	; 0x38
   49818:	str	r6, [sp]
   4981c:	mov	r4, r0
   49820:	ldr	r0, [pc, #2880]	; 4a368 <__assert_fail@plt+0x3915c>
   49824:	bl	3c744 <__assert_fail@plt+0x2b538>
   49828:	mov	r1, r5
   4982c:	mov	r2, r0
   49830:	mov	r0, r4
   49834:	bl	54dd0 <warn@@Base>
   49838:	mov	r0, r6
   4983c:	mov	r2, #5
   49840:	ldr	r1, [pc, #2744]	; 4a300 <__assert_fail@plt+0x390f4>
   49844:	bl	10f90 <dcgettext@plt>
   49848:	mov	r1, r5
   4984c:	bl	10f24 <printf@plt>
   49850:	b	495f4 <__assert_fail@plt+0x383e8>
   49854:	mov	r3, fp
   49858:	mov	r2, #1
   4985c:	mov	r0, sl
   49860:	add	r1, sp, #180	; 0xb4
   49864:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49868:	ldr	r3, [r7, #1464]	; 0x5b8
   4986c:	ldr	r2, [sp, #180]	; 0xb4
   49870:	add	sl, sl, r2
   49874:	add	r0, r3, r0
   49878:	str	r0, [r7, #1464]	; 0x5b8
   4987c:	b	495f4 <__assert_fail@plt+0x383e8>
   49880:	mov	r3, fp
   49884:	mov	r0, sl
   49888:	mov	r2, #0
   4988c:	add	r1, sp, #180	; 0xb4
   49890:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49894:	ldrb	r1, [sp, #209]	; 0xd1
   49898:	ldr	r3, [sp, #180]	; 0xb4
   4989c:	ldrd	r4, [r9, #-8]
   498a0:	cmp	r1, #1
   498a4:	add	sl, sl, r3
   498a8:	beq	4abd0 <__assert_fail@plt+0x399c4>
   498ac:	ldrb	r3, [r7, #1480]	; 0x5c8
   498b0:	add	r0, r3, r0
   498b4:	bl	588cc <warn@@Base+0x3afc>
   498b8:	ldrb	r3, [sp, #208]	; 0xd0
   498bc:	mul	r0, r0, r3
   498c0:	strb	r1, [r7, #1480]	; 0x5c8
   498c4:	adds	r4, r4, r0
   498c8:	adc	r5, r5, #0
   498cc:	cmp	r0, #0
   498d0:	movne	r3, #0
   498d4:	strd	r4, [r9, #-8]
   498d8:	strne	r3, [r7, #1456]	; 0x5b0
   498dc:	b	495f4 <__assert_fail@plt+0x383e8>
   498e0:	mov	r3, #1
   498e4:	str	r3, [r7, #1476]	; 0x5c4
   498e8:	b	495f4 <__assert_fail@plt+0x383e8>
   498ec:	ldrb	r1, [sp, #216]	; 0xd8
   498f0:	rsb	r0, r0, #255	; 0xff
   498f4:	bl	588ec <warn@@Base+0x3b1c>
   498f8:	ldrb	r1, [sp, #209]	; 0xd1
   498fc:	ldrb	r6, [sp, #208]	; 0xd0
   49900:	ldrd	r2, [r9, #-8]
   49904:	cmp	r1, #1
   49908:	mov	r4, r2
   4990c:	mov	r5, r3
   49910:	muleq	r0, r6, r0
   49914:	beq	498c4 <__assert_fail@plt+0x386b8>
   49918:	ldrb	r3, [r7, #1480]	; 0x5c8
   4991c:	add	r0, r3, r0
   49920:	bl	588cc <warn@@Base+0x3afc>
   49924:	mul	r0, r6, r0
   49928:	b	498c0 <__assert_fail@plt+0x386b4>
   4992c:	ldr	r3, [r7, #1472]	; 0x5c0
   49930:	clz	r3, r3
   49934:	lsr	r3, r3, #5
   49938:	str	r3, [r7, #1472]	; 0x5c0
   4993c:	b	495f4 <__assert_fail@plt+0x383e8>
   49940:	mov	r2, #5
   49944:	ldr	r1, [pc, #2488]	; 4a304 <__assert_fail@plt+0x390f8>
   49948:	mov	r0, #0
   4994c:	bl	10f90 <dcgettext@plt>
   49950:	mov	r1, r5
   49954:	bl	10f24 <printf@plt>
   49958:	ldr	r3, [sp, #112]	; 0x70
   4995c:	cmp	r3, #0
   49960:	beq	499c8 <__assert_fail@plt+0x387bc>
   49964:	add	r3, r3, r5
   49968:	ldrb	r4, [r3, #-1]
   4996c:	cmp	r4, #0
   49970:	beq	499c8 <__assert_fail@plt+0x387bc>
   49974:	ldr	r8, [pc, #2544]	; 4a36c <__assert_fail@plt+0x39160>
   49978:	add	r6, sp, #180	; 0xb4
   4997c:	mov	r3, fp
   49980:	mov	r2, #0
   49984:	mov	r1, r6
   49988:	mov	r0, sl
   4998c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49990:	mov	r3, #0
   49994:	str	r3, [sp]
   49998:	mov	r2, r0
   4999c:	mov	r3, r1
   499a0:	mov	r0, r8
   499a4:	bl	3c744 <__assert_fail@plt+0x2b538>
   499a8:	cmp	r4, #1
   499ac:	mov	r1, r0
   499b0:	bne	4bbcc <__assert_fail@plt+0x3a9c0>
   499b4:	ldr	r2, [pc, #2484]	; 4a370 <__assert_fail@plt+0x39164>
   499b8:	ldr	r0, [pc, #2376]	; 4a308 <__assert_fail@plt+0x390fc>
   499bc:	bl	10f24 <printf@plt>
   499c0:	ldr	r3, [sp, #180]	; 0xb4
   499c4:	add	sl, sl, r3
   499c8:	ldr	r3, [sp, #96]	; 0x60
   499cc:	mov	r0, #10
   499d0:	ldr	r1, [r3]
   499d4:	bl	11158 <putc@plt>
   499d8:	cmp	r5, #1
   499dc:	bne	495f4 <__assert_fail@plt+0x383e8>
   499e0:	ldr	r3, [sp, #64]	; 0x40
   499e4:	cmp	r3, #0
   499e8:	bne	4952c <__assert_fail@plt+0x38320>
   499ec:	mov	r2, #5
   499f0:	ldr	r1, [pc, #2324]	; 4a30c <__assert_fail@plt+0x39100>
   499f4:	ldr	r0, [sp, #64]	; 0x40
   499f8:	bl	10f90 <dcgettext@plt>
   499fc:	mov	r6, r0
   49a00:	b	49548 <__assert_fail@plt+0x3833c>
   49a04:	add	r6, sp, #180	; 0xb4
   49a08:	mov	r1, r6
   49a0c:	mov	r2, #0
   49a10:	mov	r0, sl
   49a14:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49a18:	subs	r1, r0, #0
   49a1c:	beq	4abdc <__assert_fail@plt+0x399d0>
   49a20:	ldr	r4, [sp, #180]	; 0xb4
   49a24:	add	r5, sl, r4
   49a28:	ldrb	r3, [sl, r4]
   49a2c:	add	r4, r1, r4
   49a30:	add	sl, sl, r4
   49a34:	sub	r2, r3, #1
   49a38:	add	r8, r5, #1
   49a3c:	cmp	r2, #21
   49a40:	ldrls	pc, [pc, r2, lsl #2]
   49a44:	b	49aa0 <__assert_fail@plt+0x38894>
   49a48:	andeq	r9, r4, ip, asr #21
   49a4c:	andeq	r9, r4, r0, lsl #23
   49a50:	ldrdeq	r9, [r4], -ip
   49a54:	andeq	r9, r4, ip, asr #21
   49a58:	andeq	r9, r4, r0, lsr #21
   49a5c:	andeq	r9, r4, r0, lsr #21
   49a60:	andeq	r9, r4, r0, lsr #21
   49a64:	andeq	r9, r4, r0, lsr #21
   49a68:	andeq	r9, r4, r0, lsr #21
   49a6c:	andeq	r9, r4, r0, lsr #21
   49a70:	andeq	r9, r4, r0, lsr #21
   49a74:	andeq	r9, r4, r0, lsr #21
   49a78:	andeq	r9, r4, r0, lsr #21
   49a7c:	andeq	r9, r4, r0, lsr #21
   49a80:	andeq	r9, r4, r0, lsr #21
   49a84:	andeq	r9, r4, r0, lsr #21
   49a88:	andeq	r9, r4, r0, lsr #21
   49a8c:	andeq	r9, r4, r0, lsr #21
   49a90:	andeq	r9, r4, r0, lsr #21
   49a94:	andeq	r9, r4, r0, lsr #21
   49a98:	andeq	r9, r4, r0, lsr #21
   49a9c:	andeq	r9, r4, ip, asr #21
   49aa0:	mov	r2, #5
   49aa4:	ldr	r1, [pc, #2148]	; 4a310 <__assert_fail@plt+0x39104>
   49aa8:	mov	r0, #0
   49aac:	str	r3, [sp, #104]	; 0x68
   49ab0:	bl	10f90 <dcgettext@plt>
   49ab4:	ldr	r3, [sp, #104]	; 0x68
   49ab8:	ldr	r2, [sp, #180]	; 0xb4
   49abc:	mov	r1, r3
   49ac0:	sub	r2, r4, r2
   49ac4:	bl	10f24 <printf@plt>
   49ac8:	ldr	r3, [sp, #104]	; 0x68
   49acc:	cmp	r3, #1
   49ad0:	bne	495f4 <__assert_fail@plt+0x383e8>
   49ad4:	mvn	r5, #0
   49ad8:	b	49520 <__assert_fail@plt+0x38314>
   49adc:	ldr	r3, [sp, #88]	; 0x58
   49ae0:	ldr	r0, [sp, #64]	; 0x40
   49ae4:	add	r3, r3, #1
   49ae8:	str	r3, [sp, #88]	; 0x58
   49aec:	lsl	r4, r3, #4
   49af0:	mov	r1, r4
   49af4:	bl	58678 <warn@@Base+0x38a8>
   49af8:	sub	r4, r4, #16
   49afc:	ldr	r3, [r7, #1484]	; 0x5cc
   49b00:	add	r3, r3, #1
   49b04:	str	r3, [r7, #1484]	; 0x5cc
   49b08:	mov	r2, r0
   49b0c:	str	r8, [r0, r4]
   49b10:	str	r0, [sp, #64]	; 0x40
   49b14:	mov	r0, r8
   49b18:	add	r4, r2, r4
   49b1c:	bl	11080 <strlen@plt>
   49b20:	ldr	r3, [sp, #176]	; 0xb0
   49b24:	mov	r2, #0
   49b28:	mov	r1, r6
   49b2c:	add	r0, r0, #1
   49b30:	add	r8, r8, r0
   49b34:	mov	r0, r8
   49b38:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49b3c:	ldr	r3, [sp, #176]	; 0xb0
   49b40:	mov	r2, #0
   49b44:	mov	r1, r6
   49b48:	str	r0, [r4, #4]
   49b4c:	ldr	r0, [sp, #180]	; 0xb4
   49b50:	add	r8, r8, r0
   49b54:	mov	r0, r8
   49b58:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49b5c:	ldr	r3, [sp, #176]	; 0xb0
   49b60:	mov	r1, r6
   49b64:	mov	r2, #0
   49b68:	str	r0, [r4, #8]
   49b6c:	ldr	r0, [sp, #180]	; 0xb4
   49b70:	add	r0, r8, r0
   49b74:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49b78:	str	r0, [r4, #12]
   49b7c:	b	495f4 <__assert_fail@plt+0x383e8>
   49b80:	sub	r4, r1, #1
   49b84:	cmp	r4, #8
   49b88:	bhi	4b910 <__assert_fail@plt+0x3a704>
   49b8c:	cmp	fp, sl
   49b90:	bhi	49ba0 <__assert_fail@plt+0x38994>
   49b94:	cmp	fp, r8
   49b98:	bls	4ba10 <__assert_fail@plt+0x3a804>
   49b9c:	sub	r4, fp, r8
   49ba0:	sub	r3, r4, #1
   49ba4:	cmp	r3, #7
   49ba8:	movls	r1, r4
   49bac:	bhi	4ba10 <__assert_fail@plt+0x3a804>
   49bb0:	ldr	r3, [pc, #2124]	; 4a404 <__assert_fail@plt+0x391f8>
   49bb4:	mov	r0, r8
   49bb8:	ldr	r3, [r3]
   49bbc:	blx	r3
   49bc0:	strd	r0, [r9, #-8]
   49bc4:	mov	r3, #0
   49bc8:	strb	r3, [r7, #1480]	; 0x5c8
   49bcc:	str	r3, [r7, #1456]	; 0x5b0
   49bd0:	b	495f4 <__assert_fail@plt+0x383e8>
   49bd4:	ldr	r1, [pc, #1848]	; 4a314 <__assert_fail@plt+0x39108>
   49bd8:	mov	r0, #0
   49bdc:	bl	10f90 <dcgettext@plt>
   49be0:	ldr	r3, [sp, #76]	; 0x4c
   49be4:	ldr	r1, [r3, #8]
   49be8:	bl	10f24 <printf@plt>
   49bec:	cmp	sl, fp
   49bf0:	bcs	4bad0 <__assert_fail@plt+0x3a8c4>
   49bf4:	add	r3, sp, #184	; 0xb8
   49bf8:	ldr	r6, [pc, #1760]	; 4a2e0 <__assert_fail@plt+0x390d4>
   49bfc:	mov	r9, sl
   49c00:	str	r3, [sp, #92]	; 0x5c
   49c04:	str	sl, [sp, #88]	; 0x58
   49c08:	b	49c24 <__assert_fail@plt+0x38a18>
   49c0c:	ldr	r1, [pc, #1796]	; 4a318 <__assert_fail@plt+0x3910c>
   49c10:	mov	r0, #0
   49c14:	bl	10f90 <dcgettext@plt>
   49c18:	bl	10f24 <printf@plt>
   49c1c:	cmp	fp, r9
   49c20:	bls	49f64 <__assert_fail@plt+0x38d58>
   49c24:	ldr	r3, [sp, #76]	; 0x4c
   49c28:	mov	r2, #12
   49c2c:	ldr	r1, [pc, #1712]	; 4a2e4 <__assert_fail@plt+0x390d8>
   49c30:	ldr	r5, [r3, #8]
   49c34:	mov	r0, r5
   49c38:	bl	111d0 <strncmp@plt>
   49c3c:	subs	r4, r0, #0
   49c40:	bne	4a5a8 <__assert_fail@plt+0x3939c>
   49c44:	mov	r0, r5
   49c48:	ldr	r1, [pc, #1688]	; 4a2e8 <__assert_fail@plt+0x390dc>
   49c4c:	bl	10f18 <strcmp@plt>
   49c50:	cmp	r0, #0
   49c54:	beq	4a5a8 <__assert_fail@plt+0x3939c>
   49c58:	ldr	ip, [pc, #1872]	; 4a3b0 <__assert_fail@plt+0x391a4>
   49c5c:	ldr	lr, [sp, #92]	; 0x5c
   49c60:	str	fp, [sp, #176]	; 0xb0
   49c64:	ldm	ip!, {r0, r1, r2, r3}
   49c68:	stmia	lr!, {r0, r1, r2, r3}
   49c6c:	ldm	ip!, {r0, r1, r2, r3}
   49c70:	stmia	lr!, {r0, r1, r2, r3}
   49c74:	ldm	ip, {r0, r1}
   49c78:	stm	lr, {r0, r1}
   49c7c:	ldrb	r0, [sp, #216]	; 0xd8
   49c80:	cmp	r0, #0
   49c84:	beq	4ba20 <__assert_fail@plt+0x3a814>
   49c88:	ldrb	r2, [sp, #210]	; 0xd2
   49c8c:	sub	r3, ip, #224	; 0xe0
   49c90:	mov	r0, #0
   49c94:	mov	r1, #0
   49c98:	str	r4, [r6, #1456]	; 0x5b0
   49c9c:	str	r4, [r6, #1468]	; 0x5bc
   49ca0:	str	r4, [r6, #1476]	; 0x5c4
   49ca4:	strh	r4, [ip, #-200]	; 0xffffff38
   49ca8:	str	r4, [r6, #1484]	; 0x5cc
   49cac:	str	r4, [sp, #56]	; 0x38
   49cb0:	mov	r4, fp
   49cb4:	str	r3, [sp, #80]	; 0x50
   49cb8:	mov	r3, #1
   49cbc:	strd	r0, [ip, #-232]	; 0xffffff18
   49cc0:	str	r2, [r6, #1472]	; 0x5c0
   49cc4:	str	r3, [r6, #1460]	; 0x5b4
   49cc8:	str	r3, [r6, #1464]	; 0x5b8
   49ccc:	cmp	r9, r4
   49cd0:	mov	r2, #5
   49cd4:	bcs	49c0c <__assert_fail@plt+0x38a00>
   49cd8:	ldr	r1, [pc, #1596]	; 4a31c <__assert_fail@plt+0x39110>
   49cdc:	mov	r0, #0
   49ce0:	bl	10f90 <dcgettext@plt>
   49ce4:	bl	10f24 <printf@plt>
   49ce8:	ldr	r3, [sp, #176]	; 0xb0
   49cec:	cmp	r9, r3
   49cf0:	bcs	4b94c <__assert_fail@plt+0x3a740>
   49cf4:	str	fp, [sp, #64]	; 0x40
   49cf8:	ldr	fp, [sp, #80]	; 0x50
   49cfc:	b	49e78 <__assert_fail@plt+0x38c6c>
   49d00:	sub	r7, r7, r0
   49d04:	ldrb	r1, [sp, #216]	; 0xd8
   49d08:	uxtb	r7, r7
   49d0c:	mov	r0, r7
   49d10:	bl	586e0 <warn@@Base+0x3910>
   49d14:	ldrd	r2, [fp, #-8]
   49d18:	ldrb	ip, [sp, #209]	; 0xd1
   49d1c:	ldrb	r4, [sp, #208]	; 0xd0
   49d20:	strd	r2, [sp, #96]	; 0x60
   49d24:	mov	r3, #0
   49d28:	cmp	ip, #1
   49d2c:	uxtb	r0, r0
   49d30:	uxtb	r2, r0
   49d34:	strd	r2, [sp, #80]	; 0x50
   49d38:	beq	4a524 <__assert_fail@plt+0x39318>
   49d3c:	ldrb	r2, [r6, #1480]	; 0x5c8
   49d40:	ldrd	r8, [sp, #80]	; 0x50
   49d44:	mov	r3, #0
   49d48:	adds	r0, r2, r8
   49d4c:	adc	r1, r3, r9
   49d50:	mov	r2, ip
   49d54:	mov	r3, #0
   49d58:	bl	58c00 <warn@@Base+0x3e30>
   49d5c:	ldrd	r8, [sp, #96]	; 0x60
   49d60:	ldr	r1, [pc, #1464]	; 4a320 <__assert_fail@plt+0x39114>
   49d64:	mul	r4, r0, r4
   49d68:	strb	r2, [r6, #1480]	; 0x5c8
   49d6c:	adds	r8, r8, r4
   49d70:	adc	r9, r9, #0
   49d74:	cmp	r4, #0
   49d78:	movne	r3, #0
   49d7c:	mov	r2, #5
   49d80:	mov	r0, #0
   49d84:	strne	r3, [r6, #1456]	; 0x5b0
   49d88:	mov	r4, r0
   49d8c:	strd	r8, [fp, #-8]
   49d90:	bl	10f90 <dcgettext@plt>
   49d94:	ldrd	r2, [sp, #80]	; 0x50
   49d98:	str	r4, [sp]
   49d9c:	mov	r5, r0
   49da0:	ldr	r0, [pc, #1472]	; 4a368 <__assert_fail@plt+0x3915c>
   49da4:	bl	3c744 <__assert_fail@plt+0x2b538>
   49da8:	str	r4, [sp]
   49dac:	ldrd	r2, [fp, #-8]
   49db0:	mov	r8, r0
   49db4:	ldr	r0, [pc, #1456]	; 4a36c <__assert_fail@plt+0x39160>
   49db8:	bl	3c744 <__assert_fail@plt+0x2b538>
   49dbc:	ldrb	r1, [r6, #1480]	; 0x5c8
   49dc0:	ldr	r3, [pc, #1448]	; 4a370 <__assert_fail@plt+0x39164>
   49dc4:	mov	r2, r8
   49dc8:	stm	sp, {r1, r3}
   49dcc:	mov	r1, r7
   49dd0:	mov	r3, r0
   49dd4:	mov	r0, r5
   49dd8:	bl	10f24 <printf@plt>
   49ddc:	mov	r0, r7
   49de0:	ldrb	r1, [sp, #216]	; 0xd8
   49de4:	bl	588cc <warn@@Base+0x3afc>
   49de8:	ldr	r4, [sp, #212]	; 0xd4
   49dec:	ldr	r3, [r6, #1464]	; 0x5b8
   49df0:	mov	r2, #5
   49df4:	mov	r0, #0
   49df8:	mov	r5, r0
   49dfc:	uxtab	r4, r4, r1
   49e00:	ldr	r1, [pc, #1308]	; 4a324 <__assert_fail@plt+0x39118>
   49e04:	add	r3, r3, r4
   49e08:	str	r3, [r6, #1464]	; 0x5b8
   49e0c:	bl	10f90 <dcgettext@plt>
   49e10:	mov	r2, r4
   49e14:	asr	r3, r4, #31
   49e18:	str	r5, [sp]
   49e1c:	mov	r7, r0
   49e20:	ldr	r0, [pc, #1332]	; 4a35c <__assert_fail@plt+0x39150>
   49e24:	bl	3c744 <__assert_fail@plt+0x2b538>
   49e28:	ldr	r2, [r6, #1464]	; 0x5b8
   49e2c:	mov	r1, r0
   49e30:	mov	r0, r7
   49e34:	bl	10f24 <printf@plt>
   49e38:	ldr	r4, [r6, #1456]	; 0x5b0
   49e3c:	cmp	r4, r5
   49e40:	beq	4a510 <__assert_fail@plt+0x39304>
   49e44:	ldr	r1, [pc, #1288]	; 4a354 <__assert_fail@plt+0x39148>
   49e48:	mov	r0, r5
   49e4c:	mov	r2, #5
   49e50:	bl	10f90 <dcgettext@plt>
   49e54:	mov	r1, r4
   49e58:	bl	10f24 <printf@plt>
   49e5c:	ldr	r3, [r6, #1456]	; 0x5b0
   49e60:	add	r3, r3, #1
   49e64:	str	r3, [r6, #1456]	; 0x5b0
   49e68:	ldr	r3, [sp, #176]	; 0xb0
   49e6c:	cmp	r3, sl
   49e70:	bls	49f44 <__assert_fail@plt+0x38d38>
   49e74:	mov	r9, sl
   49e78:	ldr	r3, [sp, #88]	; 0x58
   49e7c:	mov	sl, r9
   49e80:	sub	r1, r9, r3
   49e84:	ldr	r0, [pc, #1180]	; 4a328 <__assert_fail@plt+0x3911c>
   49e88:	bl	10f24 <printf@plt>
   49e8c:	ldrb	r7, [sl], #1
   49e90:	ldrb	r0, [sp, #217]	; 0xd9
   49e94:	cmp	r7, r0
   49e98:	bcs	49d00 <__assert_fail@plt+0x38af4>
   49e9c:	cmp	r7, #12
   49ea0:	ldrls	pc, [pc, r7, lsl #2]
   49ea4:	b	4bb0c <__assert_fail@plt+0x3a900>
   49ea8:	andeq	sl, r4, r0, lsl r1
   49eac:	andeq	sl, r4, r4, lsr #8
   49eb0:	strdeq	sl, [r4], -ip
   49eb4:	andeq	sl, r4, ip, lsl #3
   49eb8:	andeq	sl, r4, r8, lsr #2
   49ebc:	andeq	sl, r4, ip, lsr #9
   49ec0:	andeq	sl, r4, r0, ror #8
   49ec4:	strdeq	sl, [r4], -r0
   49ec8:	andeq	sl, r4, r4, asr r0
   49ecc:	andeq	r9, r4, r4, asr #31
   49ed0:	andeq	r9, r4, ip, lsr #31
   49ed4:	muleq	r4, r4, pc	; <UNPREDICTABLE>
   49ed8:	ldrdeq	r9, [r4], -ip
   49edc:	ldr	r3, [sp, #64]	; 0x40
   49ee0:	mov	r2, #0
   49ee4:	mov	r0, sl
   49ee8:	add	r1, sp, #180	; 0xb4
   49eec:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   49ef0:	ldr	r3, [sp, #180]	; 0xb4
   49ef4:	mov	r2, #5
   49ef8:	add	sl, sl, r3
   49efc:	mov	r4, r0
   49f00:	mov	r5, r1
   49f04:	mov	r0, #0
   49f08:	ldr	r1, [pc, #1052]	; 4a32c <__assert_fail@plt+0x39120>
   49f0c:	bl	10f90 <dcgettext@plt>
   49f10:	mov	r1, #0
   49f14:	mov	r3, r5
   49f18:	mov	r2, r4
   49f1c:	str	r1, [sp]
   49f20:	mov	r7, r0
   49f24:	ldr	r0, [pc, #1084]	; 4a368 <__assert_fail@plt+0x3915c>
   49f28:	bl	3c744 <__assert_fail@plt+0x2b538>
   49f2c:	mov	r1, r0
   49f30:	mov	r0, r7
   49f34:	bl	10f24 <printf@plt>
   49f38:	ldr	r3, [sp, #176]	; 0xb0
   49f3c:	cmp	r3, sl
   49f40:	bhi	49e74 <__assert_fail@plt+0x38c68>
   49f44:	ldr	fp, [sp, #64]	; 0x40
   49f48:	ldr	r3, [pc, #1136]	; 4a3c0 <__assert_fail@plt+0x391b4>
   49f4c:	mov	r0, #10
   49f50:	mov	r9, sl
   49f54:	ldr	r1, [r3]
   49f58:	bl	11158 <putc@plt>
   49f5c:	cmp	fp, r9
   49f60:	bhi	49c24 <__assert_fail@plt+0x38a18>
   49f64:	ldr	r3, [pc, #872]	; 4a2d4 <__assert_fail@plt+0x390c8>
   49f68:	ldr	sl, [sp, #88]	; 0x58
   49f6c:	ldr	r3, [r3]
   49f70:	tst	r3, #2
   49f74:	beq	49380 <__assert_fail@plt+0x38174>
   49f78:	ldr	r3, [sp, #76]	; 0x4c
   49f7c:	add	r1, r3, #12
   49f80:	add	r0, r3, #8
   49f84:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   49f88:	mov	r3, #1
   49f8c:	str	r3, [sp, #172]	; 0xac
   49f90:	b	493b4 <__assert_fail@plt+0x381a8>
   49f94:	mov	r2, #5
   49f98:	ldr	r1, [pc, #912]	; 4a330 <__assert_fail@plt+0x39124>
   49f9c:	mov	r0, #0
   49fa0:	bl	10f90 <dcgettext@plt>
   49fa4:	bl	10f24 <printf@plt>
   49fa8:	b	49e68 <__assert_fail@plt+0x38c5c>
   49fac:	mov	r2, #5
   49fb0:	ldr	r1, [pc, #892]	; 4a334 <__assert_fail@plt+0x39128>
   49fb4:	mov	r0, #0
   49fb8:	bl	10f90 <dcgettext@plt>
   49fbc:	bl	10f24 <printf@plt>
   49fc0:	b	49e68 <__assert_fail@plt+0x38c5c>
   49fc4:	ldr	r3, [sp, #64]	; 0x40
   49fc8:	add	r9, r9, #3
   49fcc:	cmp	r3, r9
   49fd0:	bhi	4b86c <__assert_fail@plt+0x3a660>
   49fd4:	cmp	r3, sl
   49fd8:	bhi	4b8fc <__assert_fail@plt+0x3a6f0>
   49fdc:	mov	r5, #0
   49fe0:	mov	r7, r5
   49fe4:	ldrd	r2, [fp, #-8]
   49fe8:	mov	r4, #0
   49fec:	mov	r0, r4
   49ff0:	adds	r1, r2, r5
   49ff4:	adc	r3, r3, r7
   49ff8:	str	r1, [fp, #-8]
   49ffc:	mov	r2, #5
   4a000:	ldr	r1, [pc, #816]	; 4a338 <__assert_fail@plt+0x3912c>
   4a004:	str	r3, [fp, #-4]
   4a008:	strb	r4, [r6, #1480]	; 0x5c8
   4a00c:	bl	10f90 <dcgettext@plt>
   4a010:	mov	r2, r5
   4a014:	mov	r3, r7
   4a018:	str	r4, [sp]
   4a01c:	mov	sl, r9
   4a020:	mov	r8, r0
   4a024:	ldr	r0, [pc, #828]	; 4a368 <__assert_fail@plt+0x3915c>
   4a028:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a02c:	str	r4, [sp]
   4a030:	ldrd	r2, [fp, #-8]
   4a034:	mov	r5, r0
   4a038:	ldr	r0, [pc, #812]	; 4a36c <__assert_fail@plt+0x39160>
   4a03c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a040:	mov	r1, r5
   4a044:	mov	r2, r0
   4a048:	mov	r0, r8
   4a04c:	bl	10f24 <printf@plt>
   4a050:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a054:	ldrb	r3, [sp, #209]	; 0xd1
   4a058:	cmp	r3, #0
   4a05c:	beq	4b88c <__assert_fail@plt+0x3a680>
   4a060:	ldrb	r1, [sp, #216]	; 0xd8
   4a064:	rsb	r0, r0, #255	; 0xff
   4a068:	bl	588ec <warn@@Base+0x3b1c>
   4a06c:	ldrb	r4, [sp, #208]	; 0xd0
   4a070:	ldr	r3, [fp, #-8]
   4a074:	ldr	r2, [fp, #-4]
   4a078:	smull	r4, r5, r0, r4
   4a07c:	adds	r3, r3, r4
   4a080:	adc	r2, r2, r5
   4a084:	orrs	r1, r4, r5
   4a088:	str	r3, [fp, #-8]
   4a08c:	ldr	r1, [pc, #680]	; 4a33c <__assert_fail@plt+0x39130>
   4a090:	movne	r3, #0
   4a094:	str	r2, [fp, #-4]
   4a098:	mov	r0, #0
   4a09c:	mov	r2, #5
   4a0a0:	strne	r3, [r6, #1456]	; 0x5b0
   4a0a4:	mov	r7, r0
   4a0a8:	bl	10f90 <dcgettext@plt>
   4a0ac:	mov	r2, r4
   4a0b0:	mov	r3, r5
   4a0b4:	str	r7, [sp]
   4a0b8:	mov	r8, r0
   4a0bc:	ldr	r0, [pc, #676]	; 4a368 <__assert_fail@plt+0x3915c>
   4a0c0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a0c4:	str	r7, [sp]
   4a0c8:	ldrd	r2, [fp, #-8]
   4a0cc:	mov	r4, r0
   4a0d0:	ldr	r0, [pc, #660]	; 4a36c <__assert_fail@plt+0x39160>
   4a0d4:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a0d8:	mov	r1, r4
   4a0dc:	ldr	r3, [pc, #652]	; 4a370 <__assert_fail@plt+0x39164>
   4a0e0:	mov	r2, r0
   4a0e4:	mov	r0, r8
   4a0e8:	bl	10f24 <printf@plt>
   4a0ec:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a0f0:	mov	r2, #5
   4a0f4:	ldr	r1, [pc, #580]	; 4a340 <__assert_fail@plt+0x39134>
   4a0f8:	mov	r0, #0
   4a0fc:	bl	10f90 <dcgettext@plt>
   4a100:	bl	10f24 <printf@plt>
   4a104:	mov	r3, #1
   4a108:	str	r3, [r6, #1476]	; 0x5c4
   4a10c:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a110:	mov	r0, sl
   4a114:	ldr	r2, [sp, #64]	; 0x40
   4a118:	ldrb	r1, [sp, #210]	; 0xd2
   4a11c:	bl	418ec <__assert_fail@plt+0x306e0>
   4a120:	add	sl, sl, r0
   4a124:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a128:	ldr	r3, [sp, #64]	; 0x40
   4a12c:	mov	r2, #0
   4a130:	mov	r0, sl
   4a134:	add	r1, sp, #180	; 0xb4
   4a138:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4a13c:	ldr	r3, [sp, #180]	; 0xb4
   4a140:	mov	r2, #5
   4a144:	add	sl, sl, r3
   4a148:	mov	r4, r0
   4a14c:	mov	r7, r1
   4a150:	mov	r0, #0
   4a154:	ldr	r1, [pc, #488]	; 4a344 <__assert_fail@plt+0x39138>
   4a158:	bl	10f90 <dcgettext@plt>
   4a15c:	mov	r1, #0
   4a160:	mov	r3, r7
   4a164:	mov	r2, r4
   4a168:	str	r1, [sp]
   4a16c:	mov	r5, r0
   4a170:	ldr	r0, [pc, #484]	; 4a35c <__assert_fail@plt+0x39150>
   4a174:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a178:	mov	r1, r0
   4a17c:	mov	r0, r5
   4a180:	bl	10f24 <printf@plt>
   4a184:	str	r4, [r6, #1460]	; 0x5b4
   4a188:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a18c:	ldr	r3, [sp, #64]	; 0x40
   4a190:	mov	r2, #1
   4a194:	add	r1, sp, #180	; 0xb4
   4a198:	mov	r0, sl
   4a19c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4a1a0:	ldr	r3, [sp, #180]	; 0xb4
   4a1a4:	mov	r2, #5
   4a1a8:	add	sl, sl, r3
   4a1ac:	mov	r4, r0
   4a1b0:	ldr	r0, [r6, #1464]	; 0x5b8
   4a1b4:	mov	r7, r1
   4a1b8:	add	r0, r0, r4
   4a1bc:	str	r0, [r6, #1464]	; 0x5b8
   4a1c0:	ldr	r1, [pc, #384]	; 4a348 <__assert_fail@plt+0x3913c>
   4a1c4:	mov	r0, #0
   4a1c8:	bl	10f90 <dcgettext@plt>
   4a1cc:	mov	r1, #0
   4a1d0:	mov	r2, r4
   4a1d4:	str	r1, [sp]
   4a1d8:	mov	r3, r7
   4a1dc:	mov	r5, r0
   4a1e0:	ldr	r0, [pc, #372]	; 4a35c <__assert_fail@plt+0x39150>
   4a1e4:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a1e8:	ldr	r2, [r6, #1464]	; 0x5b8
   4a1ec:	mov	r1, r0
   4a1f0:	mov	r0, r5
   4a1f4:	bl	10f24 <printf@plt>
   4a1f8:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a1fc:	ldr	r3, [sp, #64]	; 0x40
   4a200:	mov	r2, #0
   4a204:	mov	r0, sl
   4a208:	add	r1, sp, #180	; 0xb4
   4a20c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4a210:	ldrb	r2, [sp, #209]	; 0xd1
   4a214:	ldr	r3, [sp, #180]	; 0xb4
   4a218:	cmp	r2, #1
   4a21c:	add	sl, sl, r3
   4a220:	mov	r8, r0
   4a224:	mov	r7, r1
   4a228:	ldrd	r0, [fp, #-8]
   4a22c:	strd	r0, [sp, #80]	; 0x50
   4a230:	beq	4b990 <__assert_fail@plt+0x3a784>
   4a234:	ldrb	r0, [r6, #1480]	; 0x5c8
   4a238:	mov	r1, #0
   4a23c:	mov	r3, #0
   4a240:	adds	r0, r0, r8
   4a244:	adc	r1, r1, r7
   4a248:	bl	58c00 <warn@@Base+0x3e30>
   4a24c:	ldrb	r3, [sp, #208]	; 0xd0
   4a250:	ldrd	r4, [sp, #80]	; 0x50
   4a254:	ldr	r1, [pc, #240]	; 4a34c <__assert_fail@plt+0x39140>
   4a258:	mul	r0, r0, r3
   4a25c:	strb	r2, [r6, #1480]	; 0x5c8
   4a260:	adds	r4, r4, r0
   4a264:	adc	r5, r5, #0
   4a268:	cmp	r0, #0
   4a26c:	movne	r3, #0
   4a270:	mov	r2, #5
   4a274:	mov	r0, #0
   4a278:	strne	r3, [r6, #1456]	; 0x5b0
   4a27c:	strd	r4, [fp, #-8]
   4a280:	mov	r4, r0
   4a284:	bl	10f90 <dcgettext@plt>
   4a288:	mov	r2, r8
   4a28c:	mov	r3, r7
   4a290:	str	r4, [sp]
   4a294:	mov	r5, r0
   4a298:	ldr	r0, [pc, #200]	; 4a368 <__assert_fail@plt+0x3915c>
   4a29c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a2a0:	str	r4, [sp]
   4a2a4:	ldrd	r2, [fp, #-8]
   4a2a8:	mov	r7, r0
   4a2ac:	ldr	r0, [pc, #184]	; 4a36c <__assert_fail@plt+0x39160>
   4a2b0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a2b4:	ldr	r3, [pc, #180]	; 4a370 <__assert_fail@plt+0x39164>
   4a2b8:	mov	r1, r7
   4a2bc:	str	r3, [sp]
   4a2c0:	ldrb	r3, [r6, #1480]	; 0x5c8
   4a2c4:	mov	r2, r0
   4a2c8:	mov	r0, r5
   4a2cc:	bl	10f24 <printf@plt>
   4a2d0:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a2d4:	andeq	lr, r9, r4, lsr sp
   4a2d8:	andeq	lr, r9, ip, lsl sp
   4a2dc:	andeq	r1, r8, r4, lsl #13
   4a2e0:	ldrdeq	ip, [r9], -r0
   4a2e4:	andeq	fp, r6, r8, lsr #19
   4a2e8:	strdeq	r1, [r8], -r0
   4a2ec:	andeq	ip, r9, r0, ror #24
   4a2f0:	strdeq	r1, [r8], -r8
   4a2f4:	andeq	r1, r8, r0, asr #30
   4a2f8:	andeq	r1, r8, r8, lsr #29
   4a2fc:	andeq	r1, r8, r4, lsr #26
   4a300:	andeq	r1, r8, r0, ror lr
   4a304:	andeq	r1, r8, r4, lsl #25
   4a308:	andeq	r1, r8, r8, lsr #25
   4a30c:	andeq	r2, r6, r0, asr #31
   4a310:			; <UNDEFINED> instruction: 0x00081db0
   4a314:	andeq	r1, r8, r4, asr #13
   4a318:	andeq	r1, r8, r0, lsr #20
   4a31c:	andeq	r1, r8, r0, asr #20
   4a320:	andeq	r1, r8, r0, lsr #21
   4a324:	ldrdeq	r1, [r8], -ip
   4a328:	andeq	r1, r8, ip, asr sl
   4a32c:	andeq	r1, r8, r0, ror ip
   4a330:	andeq	r1, r8, r0, asr ip
   4a334:	andeq	r1, r8, r4, lsr ip
   4a338:	andeq	r1, r8, r4, lsl #24
   4a33c:	ldrdeq	r1, [r8], -ip
   4a340:	andeq	r1, r8, r8, asr #23
   4a344:	andeq	r1, r8, r8, ror #22
   4a348:	andeq	r1, r8, ip, asr #22
   4a34c:	andeq	r1, r8, r8, lsr #22
   4a350:	andeq	r1, r8, r0, lsl #22
   4a354:	strdeq	r1, [r8], -r4
   4a358:			; <UNDEFINED> instruction: 0x00081bb0
   4a35c:	andeq	r8, r6, ip, rrx
   4a360:	muleq	r8, ip, fp
   4a364:	andeq	r1, r8, r8, ror #20
   4a368:	andeq	r3, r6, ip, asr #17
   4a36c:	andeq	r9, r6, r0, lsr #15
   4a370:	andeq	fp, r6, ip, ror #2
   4a374:	andeq	r1, r8, ip, asr #3
   4a378:	andeq	r1, r8, r4, asr r7
   4a37c:	andeq	r1, r8, r8, ror r7
   4a380:	muleq	r8, ip, r7
   4a384:	andeq	r1, r8, r0, asr #15
   4a388:	andeq	r1, r8, r8, lsl #16
   4a38c:	andeq	r1, r8, ip, lsr #16
   4a390:	andeq	r1, r8, r0, asr r8
   4a394:	andeq	r1, r8, r4, ror r8
   4a398:	andeq	ip, r9, r8, ror fp
   4a39c:	strdeq	r1, [r8], -r4
   4a3a0:	andeq	r1, r8, r0, lsl #18
   4a3a4:	andeq	r1, r8, ip, lsl r9
   4a3a8:	andeq	r1, r8, ip, asr #18
   4a3ac:	andeq	r1, r8, r4, lsr #19
   4a3b0:	andeq	ip, r9, r0, asr #24
   4a3b4:	andeq	ip, r9, r0, ror fp
   4a3b8:	andeq	r1, r8, r0, ror #26
   4a3bc:	andeq	ip, r9, r8, ror #24
   4a3c0:	andeq	sl, r9, ip, lsr #8
   4a3c4:	andeq	r1, r8, r0, ror #29
   4a3c8:	andeq	r1, r8, r8, lsr #30
   4a3cc:	andeq	r1, r8, r4, lsl pc
   4a3d0:			; <UNDEFINED> instruction: 0x00081ebc
   4a3d4:	andeq	r3, r6, ip
   4a3d8:	muleq	r8, r8, r8
   4a3dc:	andeq	r1, r8, r4, ror #15
   4a3e0:	andeq	r1, r8, r8, ror #30
   4a3e4:	andeq	r1, r8, r4, lsr r9
   4a3e8:	andeq	r1, r8, r0, asr #18
   4a3ec:	andeq	pc, r7, r4, ror #17
   4a3f0:	andeq	r1, r8, ip, asr #27
   4a3f4:	andeq	r1, r8, r4, ror #25
   4a3f8:	andeq	r1, r8, r0, lsl #26
   4a3fc:	andeq	lr, r9, r8, lsr #26
   4a400:	andeq	r1, r8, ip, lsl sp
   4a404:	andeq	lr, r9, ip, asr sp
   4a408:	andeq	r8, r6, ip, asr #15
   4a40c:	andeq	r1, r8, r4, asr sp
   4a410:			; <UNDEFINED> instruction: 0x0007e5b0
   4a414:	strdeq	lr, [r7], -ip
   4a418:	andeq	r1, r8, r0, ror r9
   4a41c:	muleq	r8, r8, r9
   4a420:	andeq	r1, r8, r8, asr #19
   4a424:	mov	r2, #5
   4a428:	ldr	r1, [pc, #-224]	; 4a350 <__assert_fail@plt+0x39144>
   4a42c:	mov	r0, #0
   4a430:	bl	10f90 <dcgettext@plt>
   4a434:	bl	10f24 <printf@plt>
   4a438:	ldr	r4, [r6, #1456]	; 0x5b0
   4a43c:	cmp	r4, #0
   4a440:	beq	4a510 <__assert_fail@plt+0x39304>
   4a444:	mov	r2, #5
   4a448:	ldr	r1, [pc, #-252]	; 4a354 <__assert_fail@plt+0x39148>
   4a44c:	mov	r0, #0
   4a450:	bl	10f90 <dcgettext@plt>
   4a454:	mov	r1, r4
   4a458:	bl	10f24 <printf@plt>
   4a45c:	b	49e5c <__assert_fail@plt+0x38c50>
   4a460:	mov	r2, #5
   4a464:	ldr	r1, [pc, #-276]	; 4a358 <__assert_fail@plt+0x3914c>
   4a468:	mov	r0, #0
   4a46c:	ldr	r4, [r6, #1472]	; 0x5c0
   4a470:	bl	10f90 <dcgettext@plt>
   4a474:	clz	r4, r4
   4a478:	mov	r1, #0
   4a47c:	lsr	r4, r4, #5
   4a480:	mov	r2, r4
   4a484:	mov	r3, #0
   4a488:	str	r1, [sp]
   4a48c:	mov	r5, r0
   4a490:	ldr	r0, [pc, #-316]	; 4a35c <__assert_fail@plt+0x39150>
   4a494:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a498:	mov	r1, r0
   4a49c:	mov	r0, r5
   4a4a0:	bl	10f24 <printf@plt>
   4a4a4:	str	r4, [r6, #1472]	; 0x5c0
   4a4a8:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a4ac:	ldr	r3, [sp, #64]	; 0x40
   4a4b0:	mov	r2, #0
   4a4b4:	mov	r0, sl
   4a4b8:	add	r1, sp, #180	; 0xb4
   4a4bc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4a4c0:	ldr	r3, [sp, #180]	; 0xb4
   4a4c4:	mov	r2, #5
   4a4c8:	add	sl, sl, r3
   4a4cc:	mov	r4, r0
   4a4d0:	mov	r7, r1
   4a4d4:	mov	r0, #0
   4a4d8:	ldr	r1, [pc, #-384]	; 4a360 <__assert_fail@plt+0x39154>
   4a4dc:	bl	10f90 <dcgettext@plt>
   4a4e0:	mov	r1, #0
   4a4e4:	mov	r3, r7
   4a4e8:	mov	r2, r4
   4a4ec:	str	r1, [sp]
   4a4f0:	mov	r5, r0
   4a4f4:	ldr	r0, [pc, #-404]	; 4a368 <__assert_fail@plt+0x3915c>
   4a4f8:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a4fc:	mov	r1, r0
   4a500:	mov	r0, r5
   4a504:	bl	10f24 <printf@plt>
   4a508:	str	r4, [r6, #1468]	; 0x5bc
   4a50c:	b	49e68 <__assert_fail@plt+0x38c5c>
   4a510:	ldr	r3, [pc, #-344]	; 4a3c0 <__assert_fail@plt+0x391b4>
   4a514:	mov	r0, #10
   4a518:	ldr	r1, [r3]
   4a51c:	bl	11158 <putc@plt>
   4a520:	b	49e5c <__assert_fail@plt+0x38c50>
   4a524:	umull	r4, r5, r0, r4
   4a528:	ldrd	r0, [sp, #96]	; 0x60
   4a52c:	adds	r3, r4, r0
   4a530:	adc	r2, r5, r1
   4a534:	orrs	r1, r4, r5
   4a538:	str	r3, [fp, #-8]
   4a53c:	ldr	r1, [pc, #-480]	; 4a364 <__assert_fail@plt+0x39158>
   4a540:	movne	r3, #0
   4a544:	str	r2, [fp, #-4]
   4a548:	mov	r0, #0
   4a54c:	mov	r2, #5
   4a550:	strne	r3, [r6, #1456]	; 0x5b0
   4a554:	mov	r8, r0
   4a558:	bl	10f90 <dcgettext@plt>
   4a55c:	mov	r2, r4
   4a560:	mov	r3, r5
   4a564:	str	r8, [sp]
   4a568:	mov	r9, r0
   4a56c:	ldr	r0, [pc, #-524]	; 4a368 <__assert_fail@plt+0x3915c>
   4a570:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a574:	str	r8, [sp]
   4a578:	ldrd	r2, [fp, #-8]
   4a57c:	mov	r4, r0
   4a580:	ldr	r0, [pc, #-540]	; 4a36c <__assert_fail@plt+0x39160>
   4a584:	bl	3c744 <__assert_fail@plt+0x2b538>
   4a588:	ldr	r3, [pc, #-544]	; 4a370 <__assert_fail@plt+0x39164>
   4a58c:	mov	r2, r4
   4a590:	str	r3, [sp]
   4a594:	mov	r1, r7
   4a598:	mov	r3, r0
   4a59c:	mov	r0, r9
   4a5a0:	bl	10f24 <printf@plt>
   4a5a4:	b	49ddc <__assert_fail@plt+0x38bd0>
   4a5a8:	add	r3, sp, #176	; 0xb0
   4a5ac:	str	r3, [sp]
   4a5b0:	mov	r2, fp
   4a5b4:	ldr	r3, [sp, #92]	; 0x5c
   4a5b8:	mov	r1, r9
   4a5bc:	ldr	r0, [sp, #76]	; 0x4c
   4a5c0:	bl	3d170 <__assert_fail@plt+0x2bf64>
   4a5c4:	subs	r3, r0, #0
   4a5c8:	str	r3, [sp, #56]	; 0x38
   4a5cc:	beq	4ba78 <__assert_fail@plt+0x3a86c>
   4a5d0:	mov	r2, #5
   4a5d4:	ldr	r1, [pc, #-616]	; 4a374 <__assert_fail@plt+0x39168>
   4a5d8:	mov	r0, #0
   4a5dc:	bl	10f90 <dcgettext@plt>
   4a5e0:	ldr	r3, [sp, #88]	; 0x58
   4a5e4:	sub	r1, r9, r3
   4a5e8:	bl	10f24 <printf@plt>
   4a5ec:	mov	r2, #5
   4a5f0:	ldr	r1, [pc, #-640]	; 4a378 <__assert_fail@plt+0x3916c>
   4a5f4:	mov	r0, #0
   4a5f8:	bl	10f90 <dcgettext@plt>
   4a5fc:	ldr	r1, [sp, #184]	; 0xb8
   4a600:	bl	10f24 <printf@plt>
   4a604:	mov	r2, #5
   4a608:	ldr	r1, [pc, #-660]	; 4a37c <__assert_fail@plt+0x39170>
   4a60c:	mov	r0, #0
   4a610:	bl	10f90 <dcgettext@plt>
   4a614:	ldrh	r1, [sp, #192]	; 0xc0
   4a618:	bl	10f24 <printf@plt>
   4a61c:	mov	r2, #5
   4a620:	ldr	r1, [pc, #-680]	; 4a380 <__assert_fail@plt+0x39174>
   4a624:	mov	r0, #0
   4a628:	bl	10f90 <dcgettext@plt>
   4a62c:	ldr	r1, [sp, #200]	; 0xc8
   4a630:	bl	10f24 <printf@plt>
   4a634:	mov	r2, #5
   4a638:	ldr	r1, [pc, #-700]	; 4a384 <__assert_fail@plt+0x39178>
   4a63c:	mov	r0, #0
   4a640:	bl	10f90 <dcgettext@plt>
   4a644:	ldrb	r1, [sp, #208]	; 0xd0
   4a648:	bl	10f24 <printf@plt>
   4a64c:	ldrh	r3, [sp, #192]	; 0xc0
   4a650:	cmp	r3, #3
   4a654:	bhi	4aad8 <__assert_fail@plt+0x398cc>
   4a658:	mov	r2, #5
   4a65c:	ldr	r1, [pc, #-732]	; 4a388 <__assert_fail@plt+0x3917c>
   4a660:	mov	r0, #0
   4a664:	bl	10f90 <dcgettext@plt>
   4a668:	ldrb	r1, [sp, #210]	; 0xd2
   4a66c:	bl	10f24 <printf@plt>
   4a670:	mov	r2, #5
   4a674:	ldr	r1, [pc, #-752]	; 4a38c <__assert_fail@plt+0x39180>
   4a678:	mov	r0, #0
   4a67c:	bl	10f90 <dcgettext@plt>
   4a680:	ldr	r1, [sp, #212]	; 0xd4
   4a684:	bl	10f24 <printf@plt>
   4a688:	mov	r2, #5
   4a68c:	ldr	r1, [pc, #-772]	; 4a390 <__assert_fail@plt+0x39184>
   4a690:	mov	r0, #0
   4a694:	bl	10f90 <dcgettext@plt>
   4a698:	ldrb	r1, [sp, #216]	; 0xd8
   4a69c:	bl	10f24 <printf@plt>
   4a6a0:	mov	r2, #5
   4a6a4:	ldr	r1, [pc, #-792]	; 4a394 <__assert_fail@plt+0x39188>
   4a6a8:	mov	r0, #0
   4a6ac:	bl	10f90 <dcgettext@plt>
   4a6b0:	ldrb	r1, [sp, #217]	; 0xd9
   4a6b4:	bl	10f24 <printf@plt>
   4a6b8:	ldrb	r0, [sp, #216]	; 0xd8
   4a6bc:	cmp	r0, #0
   4a6c0:	beq	4aabc <__assert_fail@plt+0x398b0>
   4a6c4:	ldrb	r0, [sp, #210]	; 0xd2
   4a6c8:	ldrb	r3, [sp, #217]	; 0xd9
   4a6cc:	ldr	r1, [pc, #-828]	; 4a398 <__assert_fail@plt+0x3918c>
   4a6d0:	ldr	r2, [sp, #56]	; 0x38
   4a6d4:	str	r0, [r6, #1472]	; 0x5c0
   4a6d8:	add	r3, r2, r3
   4a6dc:	mov	r0, #0
   4a6e0:	strh	r0, [r1, #32]
   4a6e4:	cmp	fp, r3
   4a6e8:	add	r1, r1, #8
   4a6ec:	mov	r2, #0
   4a6f0:	mov	r3, #0
   4a6f4:	mov	r4, #1
   4a6f8:	str	r0, [r6, #1456]	; 0x5b0
   4a6fc:	str	r0, [r6, #1468]	; 0x5bc
   4a700:	str	r0, [r6, #1476]	; 0x5c4
   4a704:	str	r0, [r6, #1484]	; 0x5cc
   4a708:	strd	r2, [r1, #-8]
   4a70c:	str	r4, [r6, #1460]	; 0x5b4
   4a710:	str	r4, [r6, #1464]	; 0x5b8
   4a714:	str	r1, [sp, #80]	; 0x50
   4a718:	bls	4ba80 <__assert_fail@plt+0x3a874>
   4a71c:	mov	r2, #5
   4a720:	ldr	r1, [pc, #-908]	; 4a39c <__assert_fail@plt+0x39190>
   4a724:	bl	10f90 <dcgettext@plt>
   4a728:	bl	10f24 <printf@plt>
   4a72c:	ldrb	r3, [sp, #217]	; 0xd9
   4a730:	cmp	r3, #1
   4a734:	bls	4a780 <__assert_fail@plt+0x39574>
   4a738:	ldr	r3, [sp, #56]	; 0x38
   4a73c:	ldr	r9, [pc, #-932]	; 4a3a0 <__assert_fail@plt+0x39194>
   4a740:	ldr	r8, [pc, #-932]	; 4a3a4 <__assert_fail@plt+0x39198>
   4a744:	sub	r5, r3, #1
   4a748:	mov	r7, #5
   4a74c:	ldrb	r3, [r5, #1]!
   4a750:	mov	r2, r9
   4a754:	mov	r1, r8
   4a758:	str	r7, [sp]
   4a75c:	mov	r0, #0
   4a760:	bl	11200 <dcngettext@plt>
   4a764:	mov	r1, r4
   4a768:	ldrb	r2, [r5]
   4a76c:	bl	10f24 <printf@plt>
   4a770:	ldrb	r3, [sp, #217]	; 0xd9
   4a774:	add	r4, r4, #1
   4a778:	cmp	r4, r3
   4a77c:	blt	4a74c <__assert_fail@plt+0x39540>
   4a780:	ldrh	r2, [sp, #192]	; 0xc0
   4a784:	ldr	r1, [sp, #56]	; 0x38
   4a788:	sub	r3, r3, #1
   4a78c:	cmp	r2, #4
   4a790:	add	r4, r1, r3
   4a794:	bhi	4ab4c <__assert_fail@plt+0x39940>
   4a798:	ldr	r2, [sp, #56]	; 0x38
   4a79c:	ldrb	r0, [r2, r3]
   4a7a0:	mov	r2, #5
   4a7a4:	cmp	r0, #0
   4a7a8:	bne	4b370 <__assert_fail@plt+0x3a164>
   4a7ac:	ldr	r1, [pc, #-1036]	; 4a3a8 <__assert_fail@plt+0x3919c>
   4a7b0:	bl	10f90 <dcgettext@plt>
   4a7b4:	bl	10f24 <printf@plt>
   4a7b8:	ldrb	r0, [r4, #1]
   4a7bc:	add	r9, r4, #1
   4a7c0:	mov	r2, #5
   4a7c4:	cmp	r0, #0
   4a7c8:	bne	4b3fc <__assert_fail@plt+0x3a1f0>
   4a7cc:	ldr	r1, [pc, #-1064]	; 4a3ac <__assert_fail@plt+0x391a0>
   4a7d0:	bl	10f90 <dcgettext@plt>
   4a7d4:	bl	10f24 <printf@plt>
   4a7d8:	add	r9, r9, #1
   4a7dc:	ldr	r3, [pc, #-1060]	; 4a3c0 <__assert_fail@plt+0x391b4>
   4a7e0:	mov	r0, #10
   4a7e4:	ldr	r1, [r3]
   4a7e8:	bl	11158 <putc@plt>
   4a7ec:	ldr	lr, [sp, #92]	; 0x5c
   4a7f0:	ldr	ip, [pc, #-1096]	; 4a3b0 <__assert_fail@plt+0x391a4>
   4a7f4:	ldr	r4, [sp, #176]	; 0xb0
   4a7f8:	ldm	lr!, {r0, r1, r2, r3}
   4a7fc:	stmia	ip!, {r0, r1, r2, r3}
   4a800:	ldm	lr!, {r0, r1, r2, r3}
   4a804:	stmia	ip!, {r0, r1, r2, r3}
   4a808:	ldm	lr, {r0, r1}
   4a80c:	stm	ip, {r0, r1}
   4a810:	b	49ccc <__assert_fail@plt+0x38ac0>
   4a814:	ldrb	r3, [sp, #210]	; 0xd2
   4a818:	ldr	r2, [sp, #116]	; 0x74
   4a81c:	mov	r0, #0
   4a820:	str	r3, [r7, #1472]	; 0x5c0
   4a824:	mov	r3, #0
   4a828:	strh	r3, [r2, #40]	; 0x28
   4a82c:	ldr	r2, [sp, #96]	; 0x60
   4a830:	mov	r1, #0
   4a834:	mov	ip, #1
   4a838:	strd	r0, [r9, #-8]
   4a83c:	ldr	r1, [r2]
   4a840:	mov	r0, #10
   4a844:	str	r3, [r7, #1456]	; 0x5b0
   4a848:	str	r3, [r7, #1468]	; 0x5bc
   4a84c:	str	r3, [r7, #1476]	; 0x5c4
   4a850:	str	r3, [r7, #1484]	; 0x5cc
   4a854:	str	ip, [r7, #1460]	; 0x5b4
   4a858:	str	ip, [r7, #1464]	; 0x5b8
   4a85c:	bl	11158 <putc@plt>
   4a860:	b	495ec <__assert_fail@plt+0x383e0>
   4a864:	add	r3, sp, #176	; 0xb0
   4a868:	str	r3, [sp]
   4a86c:	mov	r1, sl
   4a870:	ldr	r3, [sp, #92]	; 0x5c
   4a874:	mov	r2, fp
   4a878:	ldr	r0, [sp, #76]	; 0x4c
   4a87c:	bl	3d170 <__assert_fail@plt+0x2bf64>
   4a880:	subs	r3, r0, #0
   4a884:	str	r3, [sp, #112]	; 0x70
   4a888:	beq	4b964 <__assert_fail@plt+0x3a758>
   4a88c:	ldrb	r0, [sp, #216]	; 0xd8
   4a890:	cmp	r0, #0
   4a894:	beq	4aa84 <__assert_fail@plt+0x39878>
   4a898:	ldrb	r3, [sp, #217]	; 0xd9
   4a89c:	ldrb	r2, [sp, #210]	; 0xd2
   4a8a0:	ldr	r1, [pc, #-1268]	; 4a3b4 <__assert_fail@plt+0x391a8>
   4a8a4:	ldr	r0, [sp, #112]	; 0x70
   4a8a8:	sub	r6, r3, #1
   4a8ac:	add	r6, r0, r6
   4a8b0:	str	r2, [r7, #1472]	; 0x5c0
   4a8b4:	add	r2, r1, #16
   4a8b8:	mov	r0, #0
   4a8bc:	mov	r8, #1
   4a8c0:	cmp	fp, r6
   4a8c4:	str	r1, [sp, #116]	; 0x74
   4a8c8:	mov	r5, r0
   4a8cc:	strh	r0, [r1, #40]	; 0x28
   4a8d0:	str	r0, [r7, #1456]	; 0x5b0
   4a8d4:	str	r0, [r7, #1468]	; 0x5bc
   4a8d8:	str	r0, [r7, #1476]	; 0x5c4
   4a8dc:	str	r0, [r7, #1484]	; 0x5cc
   4a8e0:	str	r0, [r2, #-8]
   4a8e4:	str	r0, [r1, #12]
   4a8e8:	str	r8, [r7, #1460]	; 0x5b4
   4a8ec:	str	r8, [r7, #1464]	; 0x5b8
   4a8f0:	mov	r9, r2
   4a8f4:	bls	4ba60 <__assert_fail@plt+0x3a854>
   4a8f8:	ldrh	r2, [sp, #192]	; 0xc0
   4a8fc:	cmp	r2, #4
   4a900:	bhi	4ac0c <__assert_fail@plt+0x39a00>
   4a904:	ldrb	r3, [r6]
   4a908:	str	r0, [sp, #56]	; 0x38
   4a90c:	str	r0, [sp, #60]	; 0x3c
   4a910:	cmp	r3, #0
   4a914:	streq	r3, [sp, #80]	; 0x50
   4a918:	bne	4aaf4 <__assert_fail@plt+0x398e8>
   4a91c:	add	r4, r6, #1
   4a920:	cmp	fp, r4
   4a924:	bhi	4aa68 <__assert_fail@plt+0x3985c>
   4a928:	add	r6, r6, #2
   4a92c:	mov	r3, #0
   4a930:	str	r3, [sp, #88]	; 0x58
   4a934:	str	r3, [sp, #64]	; 0x40
   4a938:	mov	r2, #5
   4a93c:	ldr	r1, [pc, #-1420]	; 4a3b8 <__assert_fail@plt+0x391ac>
   4a940:	mov	r0, #0
   4a944:	bl	10f90 <dcgettext@plt>
   4a948:	bl	10f24 <printf@plt>
   4a94c:	ldr	r4, [sp, #92]	; 0x5c
   4a950:	ldr	ip, [pc, #-1436]	; 4a3bc <__assert_fail@plt+0x391b0>
   4a954:	ldr	lr, [sp, #176]	; 0xb0
   4a958:	ldm	r4!, {r0, r1, r2, r3}
   4a95c:	cmp	r6, lr
   4a960:	stmia	ip!, {r0, r1, r2, r3}
   4a964:	ldm	r4!, {r0, r1, r2, r3}
   4a968:	stmia	ip!, {r0, r1, r2, r3}
   4a96c:	ldm	r4, {r0, r1}
   4a970:	ldr	r3, [pc, #-1464]	; 4a3c0 <__assert_fail@plt+0x391b4>
   4a974:	stm	ip, {r0, r1}
   4a978:	str	r3, [sp, #96]	; 0x60
   4a97c:	bcc	49494 <__assert_fail@plt+0x38288>
   4a980:	mov	sl, r6
   4a984:	b	4969c <__assert_fail@plt+0x38490>
   4a988:	ldr	r3, [sp, #96]	; 0x60
   4a98c:	mov	r0, #10
   4a990:	ldr	r1, [r3]
   4a994:	bl	11158 <putc@plt>
   4a998:	b	495d8 <__assert_fail@plt+0x383cc>
   4a99c:	strd	r0, [sp]
   4a9a0:	mov	r1, r4
   4a9a4:	ldr	r0, [pc, #-1512]	; 4a3c4 <__assert_fail@plt+0x391b8>
   4a9a8:	bl	10f24 <printf@plt>
   4a9ac:	b	495c4 <__assert_fail@plt+0x383b8>
   4a9b0:	ldrb	r3, [sp, #209]	; 0xd1
   4a9b4:	ldr	r2, [r7, #1464]	; 0x5b8
   4a9b8:	ldrd	r0, [r9, #-8]
   4a9bc:	cmp	r3, #1
   4a9c0:	beq	4a9fc <__assert_fail@plt+0x397f0>
   4a9c4:	ldrb	r3, [r7, #1480]	; 0x5c8
   4a9c8:	strd	r0, [sp]
   4a9cc:	mov	r1, r4
   4a9d0:	str	r3, [sp, #8]
   4a9d4:	ldr	r0, [pc, #-1556]	; 4a3c8 <__assert_fail@plt+0x391bc>
   4a9d8:	bl	10f24 <printf@plt>
   4a9dc:	b	495c4 <__assert_fail@plt+0x383b8>
   4a9e0:	mov	r0, #36	; 0x24
   4a9e4:	bl	5861c <warn@@Base+0x384c>
   4a9e8:	sub	r1, r8, #35	; 0x23
   4a9ec:	add	r1, r6, r1
   4a9f0:	mov	r2, #36	; 0x24
   4a9f4:	mov	r4, r0
   4a9f8:	b	49584 <__assert_fail@plt+0x38378>
   4a9fc:	strd	r0, [sp]
   4aa00:	mov	r1, r4
   4aa04:	ldr	r0, [pc, #-1600]	; 4a3cc <__assert_fail@plt+0x391c0>
   4aa08:	bl	10f24 <printf@plt>
   4aa0c:	b	495c4 <__assert_fail@plt+0x383b8>
   4aa10:	add	r8, r0, #1
   4aa14:	mov	r0, r8
   4aa18:	bl	5861c <warn@@Base+0x384c>
   4aa1c:	mov	r2, r8
   4aa20:	mov	r1, r6
   4aa24:	mov	r4, r0
   4aa28:	bl	110d4 <strncpy@plt>
   4aa2c:	b	49598 <__assert_fail@plt+0x3838c>
   4aa30:	mov	r2, #5
   4aa34:	ldr	r1, [pc, #-1644]	; 4a3d0 <__assert_fail@plt+0x391c4>
   4aa38:	mov	r0, #0
   4aa3c:	bl	10f90 <dcgettext@plt>
   4aa40:	mov	r1, r4
   4aa44:	bl	54dd0 <warn@@Base>
   4aa48:	mov	r2, #5
   4aa4c:	ldr	r1, [pc, #-1664]	; 4a3d4 <__assert_fail@plt+0x391c8>
   4aa50:	mov	r0, #0
   4aa54:	bl	10f90 <dcgettext@plt>
   4aa58:	mov	r6, r0
   4aa5c:	b	49548 <__assert_fail@plt+0x3833c>
   4aa60:	smulbb	r0, r0, r8
   4aa64:	b	494e8 <__assert_fail@plt+0x382dc>
   4aa68:	ldrb	r3, [r6, #1]
   4aa6c:	cmp	r3, #0
   4aa70:	bne	4b588 <__assert_fail@plt+0x3a37c>
   4aa74:	str	r3, [sp, #88]	; 0x58
   4aa78:	add	r6, r6, #2
   4aa7c:	str	r3, [sp, #64]	; 0x40
   4aa80:	b	4a938 <__assert_fail@plt+0x3972c>
   4aa84:	mov	r2, #5
   4aa88:	ldr	r1, [pc, #-1720]	; 4a3d8 <__assert_fail@plt+0x391cc>
   4aa8c:	bl	10f90 <dcgettext@plt>
   4aa90:	bl	54dd0 <warn@@Base>
   4aa94:	mov	r3, #1
   4aa98:	strb	r3, [sp, #216]	; 0xd8
   4aa9c:	b	4a898 <__assert_fail@plt+0x3968c>
   4aaa0:	mov	r1, #2
   4aaa4:	ldr	r3, [pc, #-1704]	; 4a404 <__assert_fail@plt+0x391f8>
   4aaa8:	mov	r0, sl
   4aaac:	ldr	r3, [r3]
   4aab0:	blx	r3
   4aab4:	mov	r1, #0
   4aab8:	b	49714 <__assert_fail@plt+0x38508>
   4aabc:	mov	r2, #5
   4aac0:	ldr	r1, [pc, #-1776]	; 4a3d8 <__assert_fail@plt+0x391cc>
   4aac4:	bl	10f90 <dcgettext@plt>
   4aac8:	bl	54dd0 <warn@@Base>
   4aacc:	mov	r3, #1
   4aad0:	strb	r3, [sp, #216]	; 0xd8
   4aad4:	b	4a6c4 <__assert_fail@plt+0x394b8>
   4aad8:	mov	r2, #5
   4aadc:	ldr	r1, [pc, #-1800]	; 4a3dc <__assert_fail@plt+0x391d0>
   4aae0:	mov	r0, #0
   4aae4:	bl	10f90 <dcgettext@plt>
   4aae8:	ldrb	r1, [sp, #209]	; 0xd1
   4aaec:	bl	10f24 <printf@plt>
   4aaf0:	b	4a658 <__assert_fail@plt+0x3944c>
   4aaf4:	mov	r5, r9
   4aaf8:	mov	r4, r6
   4aafc:	ldrd	r8, [sp, #56]	; 0x38
   4ab00:	b	4ab10 <__assert_fail@plt+0x39904>
   4ab04:	ldrb	r3, [r4]
   4ab08:	cmp	r3, #0
   4ab0c:	beq	4b750 <__assert_fail@plt+0x3a544>
   4ab10:	sub	r1, fp, r4
   4ab14:	mov	r0, r4
   4ab18:	bl	11104 <strnlen@plt>
   4ab1c:	adds	r8, r8, #1
   4ab20:	adc	r9, r9, #0
   4ab24:	add	r0, r0, #1
   4ab28:	add	r4, r4, r0
   4ab2c:	cmp	fp, r4
   4ab30:	bhi	4ab04 <__assert_fail@plt+0x398f8>
   4ab34:	mov	r2, #5
   4ab38:	ldr	r1, [pc, #-1888]	; 4a3e0 <__assert_fail@plt+0x391d4>
   4ab3c:	mov	r0, #0
   4ab40:	bl	10f90 <dcgettext@plt>
   4ab44:	bl	54dd0 <warn@@Base>
   4ab48:	b	496dc <__assert_fail@plt+0x384d0>
   4ab4c:	ldr	r1, [sp, #132]	; 0x84
   4ab50:	mov	r0, #11
   4ab54:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   4ab58:	mov	r2, #5
   4ab5c:	ldr	r1, [pc, #-1920]	; 4a3e4 <__assert_fail@plt+0x391d8>
   4ab60:	mov	r0, #0
   4ab64:	bl	10f90 <dcgettext@plt>
   4ab68:	ldr	r7, [sp, #76]	; 0x4c
   4ab6c:	ldr	r8, [sp, #88]	; 0x58
   4ab70:	add	r5, sp, #220	; 0xdc
   4ab74:	add	r3, sp, #192	; 0xc0
   4ab78:	mov	r2, fp
   4ab7c:	mov	r1, r8
   4ab80:	str	r7, [sp, #4]
   4ab84:	str	r5, [sp]
   4ab88:	str	r0, [sp, #8]
   4ab8c:	mov	r0, r4
   4ab90:	bl	48d80 <__assert_fail@plt+0x37b74>
   4ab94:	mov	r2, #5
   4ab98:	ldr	r1, [pc, #-1976]	; 4a3e8 <__assert_fail@plt+0x391dc>
   4ab9c:	mov	r4, r0
   4aba0:	mov	r0, #0
   4aba4:	bl	10f90 <dcgettext@plt>
   4aba8:	str	r5, [sp]
   4abac:	add	r3, sp, #192	; 0xc0
   4abb0:	str	r7, [sp, #4]
   4abb4:	mov	r2, fp
   4abb8:	mov	r1, r8
   4abbc:	str	r0, [sp, #8]
   4abc0:	mov	r0, r4
   4abc4:	bl	48d80 <__assert_fail@plt+0x37b74>
   4abc8:	mov	r9, r0
   4abcc:	b	4a7dc <__assert_fail@plt+0x395d0>
   4abd0:	ldrb	r3, [sp, #208]	; 0xd0
   4abd4:	mul	r0, r0, r3
   4abd8:	b	498c4 <__assert_fail@plt+0x386b8>
   4abdc:	mov	r2, #5
   4abe0:	ldr	r1, [pc, #-2044]	; 4a3ec <__assert_fail@plt+0x391e0>
   4abe4:	bl	10f90 <dcgettext@plt>
   4abe8:	bl	54dd0 <warn@@Base>
   4abec:	b	495f4 <__assert_fail@plt+0x383e8>
   4abf0:	mov	r2, #5
   4abf4:	ldr	r1, [pc, #-2060]	; 4a3f0 <__assert_fail@plt+0x391e4>
   4abf8:	mov	r0, #0
   4abfc:	bl	10f90 <dcgettext@plt>
   4ac00:	mov	r1, r6
   4ac04:	bl	10f24 <printf@plt>
   4ac08:	b	495f4 <__assert_fail@plt+0x383e8>
   4ac0c:	ldr	r2, [sp, #112]	; 0x70
   4ac10:	ldr	r1, [sp, #132]	; 0x84
   4ac14:	add	r3, r2, r3
   4ac18:	mov	sl, r3
   4ac1c:	mov	r0, #11
   4ac20:	str	r3, [sp, #96]	; 0x60
   4ac24:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   4ac28:	cmp	fp, sl
   4ac2c:	bhi	4b7bc <__assert_fail@plt+0x3a5b0>
   4ac30:	sub	r1, fp, r6
   4ac34:	sub	r3, r1, #1
   4ac38:	cmp	r3, #7
   4ac3c:	bls	4b7c0 <__assert_fail@plt+0x3a5b4>
   4ac40:	ldr	r6, [sp, #96]	; 0x60
   4ac44:	add	sl, sp, #180	; 0xb4
   4ac48:	str	r5, [sp, #120]	; 0x78
   4ac4c:	str	r5, [sp, #124]	; 0x7c
   4ac50:	mov	r3, fp
   4ac54:	mov	r2, #0
   4ac58:	mov	r1, sl
   4ac5c:	mov	r0, r6
   4ac60:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4ac64:	ldr	r3, [sp, #180]	; 0xb4
   4ac68:	add	r8, r6, r3
   4ac6c:	cmp	fp, r8
   4ac70:	strd	r0, [sp, #56]	; 0x38
   4ac74:	beq	4baa0 <__assert_fail@plt+0x3a894>
   4ac78:	ldrd	r4, [sp, #56]	; 0x38
   4ac7c:	lsl	r0, r4, #2
   4ac80:	bl	5861c <warn@@Base+0x384c>
   4ac84:	orrs	r3, r4, r5
   4ac88:	str	r0, [sp, #80]	; 0x50
   4ac8c:	beq	4b178 <__assert_fail@plt+0x39f6c>
   4ac90:	mov	r2, #0
   4ac94:	mov	r3, #0
   4ac98:	mov	r6, fp
   4ac9c:	str	sl, [sp, #88]	; 0x58
   4aca0:	mov	r4, r0
   4aca4:	mov	sl, r2
   4aca8:	mov	fp, r3
   4acac:	str	r2, [sp, #156]	; 0x9c
   4acb0:	str	r3, [sp, #168]	; 0xa8
   4acb4:	str	r9, [sp, #152]	; 0x98
   4acb8:	ldrd	r2, [sp, #120]	; 0x78
   4acbc:	orrs	r1, r2, r3
   4acc0:	beq	4b148 <__assert_fail@plt+0x39f3c>
   4acc4:	strd	sl, [sp, #136]	; 0x88
   4acc8:	str	r2, [sp, #128]	; 0x80
   4accc:	ldr	r9, [sp, #96]	; 0x60
   4acd0:	mov	r5, #0
   4acd4:	mov	fp, r4
   4acd8:	b	4ad54 <__assert_fail@plt+0x39b48>
   4acdc:	ldr	r3, [sp, #76]	; 0x4c
   4ace0:	ldrh	ip, [sp, #192]	; 0xc0
   4ace4:	str	r3, [sp, #44]	; 0x2c
   4ace8:	ldr	r3, [sp, #156]	; 0x9c
   4acec:	ldr	r1, [sp, #168]	; 0xa8
   4acf0:	mov	r0, #0
   4acf4:	mov	r2, #9
   4acf8:	str	r3, [sp, #16]
   4acfc:	str	r3, [sp, #8]
   4ad00:	mov	r3, #1
   4ad04:	str	r1, [sp, #20]
   4ad08:	str	r1, [sp, #12]
   4ad0c:	str	r8, [sp]
   4ad10:	add	r5, r5, r3
   4ad14:	str	r2, [sp, #52]	; 0x34
   4ad18:	str	r3, [sp, #40]	; 0x28
   4ad1c:	str	r4, [sp, #24]
   4ad20:	mov	r3, #0
   4ad24:	str	r6, [sp, #4]
   4ad28:	ldr	r1, [sp, #64]	; 0x40
   4ad2c:	str	ip, [sp, #32]
   4ad30:	str	r0, [sp, #48]	; 0x30
   4ad34:	str	r0, [sp, #36]	; 0x24
   4ad38:	str	r0, [sp, #28]
   4ad3c:	mov	r2, #0
   4ad40:	bl	4276c <__assert_fail@plt+0x31560>
   4ad44:	ldr	r3, [sp, #128]	; 0x80
   4ad48:	cmp	r3, r5
   4ad4c:	mov	r8, r0
   4ad50:	beq	4b140 <__assert_fail@plt+0x39f34>
   4ad54:	ldr	r4, [sp, #88]	; 0x58
   4ad58:	mov	r3, r6
   4ad5c:	mov	r2, #0
   4ad60:	mov	r0, r9
   4ad64:	mov	r1, r4
   4ad68:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4ad6c:	ldr	r2, [sp, #180]	; 0xb4
   4ad70:	mov	r3, r6
   4ad74:	add	r9, r9, r2
   4ad78:	mov	r2, #0
   4ad7c:	strd	r0, [sp, #104]	; 0x68
   4ad80:	mov	r0, r9
   4ad84:	mov	r1, r4
   4ad88:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4ad8c:	ldr	r3, [sp, #180]	; 0xb4
   4ad90:	cmp	r6, r8
   4ad94:	add	r9, r9, r3
   4ad98:	strd	r0, [sp, #64]	; 0x40
   4ad9c:	beq	4ae6c <__assert_fail@plt+0x39c60>
   4ada0:	ldrd	r2, [sp, #104]	; 0x68
   4ada4:	ldr	r4, [sp, #220]	; 0xdc
   4ada8:	cmp	r3, #0
   4adac:	cmpeq	r2, #1
   4adb0:	bne	4acdc <__assert_fail@plt+0x39ad0>
   4adb4:	ldrd	r2, [sp, #64]	; 0x40
   4adb8:	cmp	r3, #0
   4adbc:	cmpeq	r2, #8
   4adc0:	streq	r8, [fp]
   4adc4:	beq	4acdc <__assert_fail@plt+0x39ad0>
   4adc8:	cmp	r3, #0
   4adcc:	cmpeq	r2, #31
   4add0:	bne	4acdc <__assert_fail@plt+0x39ad0>
   4add4:	cmp	r4, #8
   4add8:	bhi	4ae24 <__assert_fail@plt+0x39c18>
   4addc:	add	r3, r8, r4
   4ade0:	cmp	r6, r3
   4ade4:	bhi	4adf4 <__assert_fail@plt+0x39be8>
   4ade8:	cmp	r6, r8
   4adec:	bls	4ae60 <__assert_fail@plt+0x39c54>
   4adf0:	sub	r4, r6, r8
   4adf4:	sub	r3, r4, #1
   4adf8:	cmp	r3, #7
   4adfc:	movls	r1, r4
   4ae00:	bhi	4ae60 <__assert_fail@plt+0x39c54>
   4ae04:	ldr	r3, [pc, #-2568]	; 4a404 <__assert_fail@plt+0x391f8>
   4ae08:	mov	r0, r8
   4ae0c:	ldr	r3, [r3]
   4ae10:	blx	r3
   4ae14:	bl	3ddec <__assert_fail@plt+0x2cbe0>
   4ae18:	ldr	r4, [sp, #220]	; 0xdc
   4ae1c:	str	r0, [fp]
   4ae20:	b	4acdc <__assert_fail@plt+0x39ad0>
   4ae24:	mov	r3, #5
   4ae28:	str	r3, [sp]
   4ae2c:	ldr	r2, [pc, #-2596]	; 4a410 <__assert_fail@plt+0x39204>
   4ae30:	mov	r3, r4
   4ae34:	ldr	r1, [pc, #-2600]	; 4a414 <__assert_fail@plt+0x39208>
   4ae38:	mov	r0, #0
   4ae3c:	bl	11200 <dcngettext@plt>
   4ae40:	mov	r1, r4
   4ae44:	mov	r2, #8
   4ae48:	bl	548ac <error@@Base>
   4ae4c:	add	r3, r8, #8
   4ae50:	cmp	r6, r3
   4ae54:	bls	4ade8 <__assert_fail@plt+0x39bdc>
   4ae58:	mov	r1, #8
   4ae5c:	b	4ae04 <__assert_fail@plt+0x39bf8>
   4ae60:	mov	r0, #0
   4ae64:	mov	r1, #0
   4ae68:	b	4ae14 <__assert_fail@plt+0x39c08>
   4ae6c:	mov	r2, #5
   4ae70:	ldr	r1, [pc, #-2692]	; 4a3f4 <__assert_fail@plt+0x391e8>
   4ae74:	mov	r0, #0
   4ae78:	mov	fp, r6
   4ae7c:	ldr	r9, [sp, #152]	; 0x98
   4ae80:	ldr	sl, [sp, #88]	; 0x58
   4ae84:	bl	10f90 <dcgettext@plt>
   4ae88:	bl	54dd0 <warn@@Base>
   4ae8c:	mov	r2, #5
   4ae90:	ldr	r1, [pc, #-2724]	; 4a3f4 <__assert_fail@plt+0x391e8>
   4ae94:	mov	r0, #0
   4ae98:	bl	10f90 <dcgettext@plt>
   4ae9c:	add	r3, r8, #1
   4aea0:	mov	r4, r3
   4aea4:	str	r3, [sp, #152]	; 0x98
   4aea8:	bl	54dd0 <warn@@Base>
   4aeac:	cmp	fp, r4
   4aeb0:	bls	4b1a0 <__assert_fail@plt+0x39f94>
   4aeb4:	mov	r1, #1
   4aeb8:	ldr	r3, [pc, #-2748]	; 4a404 <__assert_fail@plt+0x391f8>
   4aebc:	mov	r0, r8
   4aec0:	ldr	r3, [r3]
   4aec4:	blx	r3
   4aec8:	ldr	r6, [sp, #152]	; 0x98
   4aecc:	uxtb	r3, r0
   4aed0:	str	r3, [sp, #144]	; 0x90
   4aed4:	mov	r3, #0
   4aed8:	str	r3, [sp, #148]	; 0x94
   4aedc:	ldrd	r2, [sp, #144]	; 0x90
   4aee0:	orrs	r1, r2, r3
   4aee4:	beq	4af4c <__assert_fail@plt+0x39d40>
   4aee8:	str	r9, [sp, #64]	; 0x40
   4aeec:	mov	r4, #0
   4aef0:	mov	r5, #0
   4aef4:	mov	r8, r2
   4aef8:	mov	r9, r3
   4aefc:	mov	r3, fp
   4af00:	mov	r2, #0
   4af04:	mov	r0, r6
   4af08:	mov	r1, sl
   4af0c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4af10:	ldr	r2, [sp, #180]	; 0xb4
   4af14:	mov	r3, fp
   4af18:	add	r6, r6, r2
   4af1c:	mov	r0, r6
   4af20:	mov	r2, #0
   4af24:	mov	r1, sl
   4af28:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4af2c:	adds	r4, r4, #1
   4af30:	adc	r5, r5, #0
   4af34:	ldr	r3, [sp, #180]	; 0xb4
   4af38:	cmp	r9, r5
   4af3c:	cmpeq	r8, r4
   4af40:	add	r6, r6, r3
   4af44:	bne	4aefc <__assert_fail@plt+0x39cf0>
   4af48:	ldr	r9, [sp, #64]	; 0x40
   4af4c:	mov	r3, fp
   4af50:	mov	r0, r6
   4af54:	mov	r2, #0
   4af58:	mov	r1, sl
   4af5c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4af60:	mov	r3, r0
   4af64:	str	r0, [sp, #156]	; 0x9c
   4af68:	ldr	r0, [sp, #180]	; 0xb4
   4af6c:	str	r3, [sp, #88]	; 0x58
   4af70:	add	r6, r6, r0
   4af74:	cmp	fp, r6
   4af78:	beq	4bab8 <__assert_fail@plt+0x3a8ac>
   4af7c:	ldr	r3, [sp, #156]	; 0x9c
   4af80:	mov	r0, #1
   4af84:	str	r3, [sp, #160]	; 0xa0
   4af88:	lsl	r1, r3, #4
   4af8c:	bl	58640 <warn@@Base+0x3870>
   4af90:	mov	r3, #0
   4af94:	str	r3, [sp, #164]	; 0xa4
   4af98:	ldrd	r4, [sp, #160]	; 0xa0
   4af9c:	orrs	r2, r4, r5
   4afa0:	str	r0, [sp, #64]	; 0x40
   4afa4:	beq	4b1e0 <__assert_fail@plt+0x39fd4>
   4afa8:	str	r9, [sp, #168]	; 0xa8
   4afac:	mov	r9, r0
   4afb0:	str	r3, [sp, #104]	; 0x68
   4afb4:	str	sl, [sp, #128]	; 0x80
   4afb8:	ldrd	r2, [sp, #144]	; 0x90
   4afbc:	orrs	r1, r2, r3
   4afc0:	beq	4b2c8 <__assert_fail@plt+0x3a0bc>
   4afc4:	str	r2, [sp, #136]	; 0x88
   4afc8:	ldr	sl, [sp, #152]	; 0x98
   4afcc:	mov	r8, #0
   4afd0:	b	4b074 <__assert_fail@plt+0x39e68>
   4afd4:	cmp	r5, #0
   4afd8:	cmpeq	r4, #2
   4afdc:	bne	4b008 <__assert_fail@plt+0x39dfc>
   4afe0:	ldrd	r2, [sp, #96]	; 0x60
   4afe4:	cmp	r3, #0
   4afe8:	cmpeq	r2, #11
   4afec:	beq	4b35c <__assert_fail@plt+0x3a150>
   4aff0:	cmp	r3, #0
   4aff4:	cmpeq	r2, #15
   4aff8:	beq	4b33c <__assert_fail@plt+0x3a130>
   4affc:	cmp	r3, #0
   4b000:	cmpeq	r2, #5
   4b004:	beq	4b250 <__assert_fail@plt+0x3a044>
   4b008:	ldr	r4, [sp, #220]	; 0xdc
   4b00c:	ldr	r3, [sp, #76]	; 0x4c
   4b010:	ldrh	ip, [sp, #192]	; 0xc0
   4b014:	mov	r0, #0
   4b018:	mov	r1, #0
   4b01c:	str	r3, [sp, #44]	; 0x2c
   4b020:	mov	r2, #9
   4b024:	mov	r3, #1
   4b028:	strd	r0, [sp, #16]
   4b02c:	strd	r0, [sp, #8]
   4b030:	stm	sp, {r6, fp}
   4b034:	add	r8, r8, r3
   4b038:	str	r2, [sp, #52]	; 0x34
   4b03c:	str	r3, [sp, #40]	; 0x28
   4b040:	str	r4, [sp, #24]
   4b044:	mov	r3, #0
   4b048:	ldr	r1, [sp, #96]	; 0x60
   4b04c:	str	ip, [sp, #32]
   4b050:	str	r0, [sp, #48]	; 0x30
   4b054:	str	r0, [sp, #36]	; 0x24
   4b058:	str	r0, [sp, #28]
   4b05c:	mov	r2, #0
   4b060:	bl	4276c <__assert_fail@plt+0x31560>
   4b064:	ldr	r3, [sp, #136]	; 0x88
   4b068:	cmp	r8, r3
   4b06c:	mov	r6, r0
   4b070:	beq	4b2c8 <__assert_fail@plt+0x3a0bc>
   4b074:	mov	r3, fp
   4b078:	mov	r2, #0
   4b07c:	mov	r0, sl
   4b080:	ldr	r1, [sp, #128]	; 0x80
   4b084:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b088:	ldr	r2, [sp, #180]	; 0xb4
   4b08c:	mov	r3, fp
   4b090:	add	sl, sl, r2
   4b094:	mov	r2, #0
   4b098:	mov	r4, r0
   4b09c:	mov	r5, r1
   4b0a0:	mov	r0, sl
   4b0a4:	ldr	r1, [sp, #128]	; 0x80
   4b0a8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b0ac:	ldr	r3, [sp, #180]	; 0xb4
   4b0b0:	cmp	fp, r6
   4b0b4:	add	sl, sl, r3
   4b0b8:	strd	r0, [sp, #96]	; 0x60
   4b0bc:	beq	4b1b4 <__assert_fail@plt+0x39fa8>
   4b0c0:	cmp	r5, #0
   4b0c4:	cmpeq	r4, #1
   4b0c8:	bne	4afd4 <__assert_fail@plt+0x39dc8>
   4b0cc:	ldrd	r2, [sp, #96]	; 0x60
   4b0d0:	ldr	r4, [sp, #220]	; 0xdc
   4b0d4:	cmp	r3, #0
   4b0d8:	cmpeq	r2, #8
   4b0dc:	streq	r6, [r9]
   4b0e0:	beq	4b00c <__assert_fail@plt+0x39e00>
   4b0e4:	cmp	r3, #0
   4b0e8:	cmpeq	r2, #31
   4b0ec:	bne	4b00c <__assert_fail@plt+0x39e00>
   4b0f0:	cmp	r4, #8
   4b0f4:	bhi	4b2f4 <__assert_fail@plt+0x3a0e8>
   4b0f8:	add	r3, r6, r4
   4b0fc:	cmp	fp, r3
   4b100:	bhi	4b110 <__assert_fail@plt+0x39f04>
   4b104:	cmp	fp, r6
   4b108:	bls	4b330 <__assert_fail@plt+0x3a124>
   4b10c:	sub	r4, fp, r6
   4b110:	sub	r3, r4, #1
   4b114:	cmp	r3, #7
   4b118:	movls	r1, r4
   4b11c:	bhi	4b330 <__assert_fail@plt+0x3a124>
   4b120:	ldr	r3, [pc, #-3364]	; 4a404 <__assert_fail@plt+0x391f8>
   4b124:	mov	r0, r6
   4b128:	ldr	r3, [r3]
   4b12c:	blx	r3
   4b130:	bl	3ddec <__assert_fail@plt+0x2cbe0>
   4b134:	ldr	r4, [sp, #220]	; 0xdc
   4b138:	str	r0, [r9]
   4b13c:	b	4b00c <__assert_fail@plt+0x39e00>
   4b140:	mov	r4, fp
   4b144:	ldrd	sl, [sp, #136]	; 0x88
   4b148:	cmp	r6, r8
   4b14c:	beq	4bafc <__assert_fail@plt+0x3a8f0>
   4b150:	ldrd	r2, [sp, #56]	; 0x38
   4b154:	adds	sl, sl, #1
   4b158:	adc	fp, fp, #0
   4b15c:	cmp	r3, fp
   4b160:	cmpeq	r2, sl
   4b164:	add	r4, r4, #4
   4b168:	bne	4acb8 <__assert_fail@plt+0x39aac>
   4b16c:	ldr	r9, [sp, #152]	; 0x98
   4b170:	ldr	sl, [sp, #88]	; 0x58
   4b174:	mov	fp, r6
   4b178:	add	r3, r8, #1
   4b17c:	cmp	fp, r3
   4b180:	str	r3, [sp, #152]	; 0x98
   4b184:	bhi	4aeb4 <__assert_fail@plt+0x39ca8>
   4b188:	cmp	fp, r8
   4b18c:	bls	4b1a0 <__assert_fail@plt+0x39f94>
   4b190:	sub	r1, fp, r8
   4b194:	sub	r3, r1, #1
   4b198:	cmp	r3, #7
   4b19c:	bls	4aeb8 <__assert_fail@plt+0x39cac>
   4b1a0:	mov	r2, #0
   4b1a4:	mov	r3, #0
   4b1a8:	ldr	r6, [sp, #152]	; 0x98
   4b1ac:	strd	r2, [sp, #144]	; 0x90
   4b1b0:	b	4af4c <__assert_fail@plt+0x39d40>
   4b1b4:	mov	r2, #5
   4b1b8:	ldr	r1, [pc, #-3528]	; 4a3f8 <__assert_fail@plt+0x391ec>
   4b1bc:	mov	r0, #0
   4b1c0:	ldr	r9, [sp, #168]	; 0xa8
   4b1c4:	bl	10f90 <dcgettext@plt>
   4b1c8:	bl	54dd0 <warn@@Base>
   4b1cc:	mov	r2, #5
   4b1d0:	ldr	r1, [pc, #-3552]	; 4a3f8 <__assert_fail@plt+0x391ec>
   4b1d4:	mov	r0, #0
   4b1d8:	bl	10f90 <dcgettext@plt>
   4b1dc:	bl	54dd0 <warn@@Base>
   4b1e0:	ldr	r3, [sp, #64]	; 0x40
   4b1e4:	ldr	r4, [r3, #4]
   4b1e8:	cmp	r4, #0
   4b1ec:	beq	4b27c <__assert_fail@plt+0x3a070>
   4b1f0:	ldrd	r2, [sp, #56]	; 0x38
   4b1f4:	orrs	r3, r2, r3
   4b1f8:	beq	4b7a4 <__assert_fail@plt+0x3a598>
   4b1fc:	ldrd	r0, [sp, #56]	; 0x38
   4b200:	mov	r3, #0
   4b204:	cmp	r3, r1
   4b208:	cmpeq	r4, r0
   4b20c:	bhi	4b890 <__assert_fail@plt+0x3a684>
   4b210:	ldr	r3, [sp, #80]	; 0x50
   4b214:	sub	r4, r4, #-1073741823	; 0xc0000001
   4b218:	ldr	r4, [r3, r4, lsl #2]
   4b21c:	ldr	r3, [pc, #-3624]	; 4a3fc <__assert_fail@plt+0x391f0>
   4b220:	ldr	r3, [r3]
   4b224:	cmp	r3, #0
   4b228:	bne	4b280 <__assert_fail@plt+0x3a074>
   4b22c:	mov	r0, r4
   4b230:	bl	11080 <strlen@plt>
   4b234:	cmp	r0, #75	; 0x4b
   4b238:	bls	4b280 <__assert_fail@plt+0x3a074>
   4b23c:	ldr	r3, [sp, #64]	; 0x40
   4b240:	ldr	r0, [pc, #-3656]	; 4a400 <__assert_fail@plt+0x391f4>
   4b244:	ldr	r1, [r3]
   4b248:	bl	10f24 <printf@plt>
   4b24c:	b	4a938 <__assert_fail@plt+0x3972c>
   4b250:	add	r3, r6, #2
   4b254:	cmp	fp, r3
   4b258:	bls	4b2a4 <__assert_fail@plt+0x3a098>
   4b25c:	mov	r1, #2
   4b260:	ldr	r3, [pc, #-3684]	; 4a404 <__assert_fail@plt+0x391f8>
   4b264:	mov	r0, r6
   4b268:	ldr	r3, [r3]
   4b26c:	blx	r3
   4b270:	ldr	r4, [sp, #220]	; 0xdc
   4b274:	str	r0, [r9, #4]
   4b278:	b	4b00c <__assert_fail@plt+0x39e00>
   4b27c:	ldr	r4, [pc, #-3708]	; 4a408 <__assert_fail@plt+0x391fc>
   4b280:	mov	r2, #5
   4b284:	ldr	r1, [pc, #-3712]	; 4a40c <__assert_fail@plt+0x39200>
   4b288:	mov	r0, #0
   4b28c:	bl	10f90 <dcgettext@plt>
   4b290:	ldr	r3, [sp, #64]	; 0x40
   4b294:	mov	r1, r4
   4b298:	ldr	r2, [r3]
   4b29c:	bl	10f24 <printf@plt>
   4b2a0:	b	4a938 <__assert_fail@plt+0x3972c>
   4b2a4:	cmp	fp, r6
   4b2a8:	bls	4b2bc <__assert_fail@plt+0x3a0b0>
   4b2ac:	sub	r1, fp, r6
   4b2b0:	sub	r3, r1, #1
   4b2b4:	cmp	r3, #7
   4b2b8:	bls	4b260 <__assert_fail@plt+0x3a054>
   4b2bc:	mov	r3, #0
   4b2c0:	str	r3, [r9, #4]
   4b2c4:	b	4b008 <__assert_fail@plt+0x39dfc>
   4b2c8:	cmp	fp, r6
   4b2cc:	beq	4baf4 <__assert_fail@plt+0x3a8e8>
   4b2d0:	ldr	r3, [sp, #104]	; 0x68
   4b2d4:	ldr	r2, [sp, #156]	; 0x9c
   4b2d8:	add	r3, r3, #1
   4b2dc:	cmp	r3, r2
   4b2e0:	str	r3, [sp, #104]	; 0x68
   4b2e4:	add	r9, r9, #16
   4b2e8:	bne	4afb8 <__assert_fail@plt+0x39dac>
   4b2ec:	ldr	r9, [sp, #168]	; 0xa8
   4b2f0:	b	4b1e0 <__assert_fail@plt+0x39fd4>
   4b2f4:	mov	r3, #5
   4b2f8:	str	r3, [sp]
   4b2fc:	ldr	r2, [pc, #-3828]	; 4a410 <__assert_fail@plt+0x39204>
   4b300:	mov	r3, r4
   4b304:	ldr	r1, [pc, #-3832]	; 4a414 <__assert_fail@plt+0x39208>
   4b308:	mov	r0, #0
   4b30c:	bl	11200 <dcngettext@plt>
   4b310:	mov	r1, r4
   4b314:	mov	r2, #8
   4b318:	bl	548ac <error@@Base>
   4b31c:	add	r3, r6, #8
   4b320:	cmp	fp, r3
   4b324:	bls	4b104 <__assert_fail@plt+0x39ef8>
   4b328:	mov	r1, #8
   4b32c:	b	4b120 <__assert_fail@plt+0x39f14>
   4b330:	mov	r0, #0
   4b334:	mov	r1, #0
   4b338:	b	4b130 <__assert_fail@plt+0x39f24>
   4b33c:	mov	r2, #0
   4b340:	mov	r1, r2
   4b344:	mov	r3, fp
   4b348:	mov	r0, r6
   4b34c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b350:	ldr	r4, [sp, #220]	; 0xdc
   4b354:	str	r0, [r9, #4]
   4b358:	b	4b00c <__assert_fail@plt+0x39e00>
   4b35c:	add	r3, r6, #1
   4b360:	cmp	fp, r3
   4b364:	bls	4b2a4 <__assert_fail@plt+0x3a098>
   4b368:	mov	r1, #1
   4b36c:	b	4b260 <__assert_fail@plt+0x3a054>
   4b370:	ldr	r1, [pc, #-3936]	; 4a418 <__assert_fail@plt+0x3920c>
   4b374:	mov	r0, #0
   4b378:	bl	10f90 <dcgettext@plt>
   4b37c:	ldr	r3, [sp, #88]	; 0x58
   4b380:	sub	r1, r4, r3
   4b384:	bl	10f24 <printf@plt>
   4b388:	cmp	fp, r4
   4b38c:	bls	4b3ec <__assert_fail@plt+0x3a1e0>
   4b390:	ldrb	r3, [r4]
   4b394:	cmp	r3, #0
   4b398:	beq	4b3ec <__assert_fail@plt+0x3a1e0>
   4b39c:	ldr	r8, [pc, #-3976]	; 4a41c <__assert_fail@plt+0x39210>
   4b3a0:	mov	r5, #0
   4b3a4:	b	4b3b4 <__assert_fail@plt+0x3a1a8>
   4b3a8:	ldrb	r3, [r4]
   4b3ac:	cmp	r3, #0
   4b3b0:	beq	4b3ec <__assert_fail@plt+0x3a1e0>
   4b3b4:	sub	r7, fp, r4
   4b3b8:	add	r5, r5, #1
   4b3bc:	mov	r3, r4
   4b3c0:	mov	r1, r5
   4b3c4:	mov	r2, r7
   4b3c8:	mov	r0, r8
   4b3cc:	bl	10f24 <printf@plt>
   4b3d0:	mov	r0, r4
   4b3d4:	mov	r1, r7
   4b3d8:	bl	11104 <strnlen@plt>
   4b3dc:	add	r0, r0, #1
   4b3e0:	add	r4, r4, r0
   4b3e4:	cmp	fp, r4
   4b3e8:	bhi	4b3a8 <__assert_fail@plt+0x3a19c>
   4b3ec:	sub	r3, fp, #1
   4b3f0:	cmp	r4, r3
   4b3f4:	bcc	4a7b8 <__assert_fail@plt+0x395ac>
   4b3f8:	b	49f64 <__assert_fail@plt+0x38d58>
   4b3fc:	ldr	r1, [pc, #-4068]	; 4a420 <__assert_fail@plt+0x39214>
   4b400:	mov	r0, #0
   4b404:	bl	10f90 <dcgettext@plt>
   4b408:	ldr	r3, [sp, #88]	; 0x58
   4b40c:	sub	r1, r9, r3
   4b410:	bl	10f24 <printf@plt>
   4b414:	mov	r2, #5
   4b418:	ldr	r1, [pc, #1992]	; 4bbe8 <__assert_fail@plt+0x3a9dc>
   4b41c:	mov	r0, #0
   4b420:	bl	10f90 <dcgettext@plt>
   4b424:	bl	10f24 <printf@plt>
   4b428:	cmp	fp, r9
   4b42c:	bls	4a7d8 <__assert_fail@plt+0x395cc>
   4b430:	ldrb	r3, [r4, #1]
   4b434:	cmp	r3, #0
   4b438:	beq	4a7d8 <__assert_fail@plt+0x395cc>
   4b43c:	ldr	sl, [pc, #1960]	; 4bbec <__assert_fail@plt+0x3a9e0>
   4b440:	ldr	r8, [pc, #1960]	; 4bbf0 <__assert_fail@plt+0x3a9e4>
   4b444:	add	r7, sp, #180	; 0xb4
   4b448:	mov	r5, #0
   4b44c:	b	4b460 <__assert_fail@plt+0x3a254>
   4b450:	bls	4a7d8 <__assert_fail@plt+0x395cc>
   4b454:	ldrb	r3, [r4, r3]
   4b458:	cmp	r3, #0
   4b45c:	beq	4a7d8 <__assert_fail@plt+0x395cc>
   4b460:	ldr	r3, [r6, #1484]	; 0x5cc
   4b464:	sub	r2, fp, r9
   4b468:	add	r3, r3, #1
   4b46c:	mov	r4, r2
   4b470:	mov	r1, r3
   4b474:	ldr	r0, [pc, #1912]	; 4bbf4 <__assert_fail@plt+0x3a9e8>
   4b478:	str	r3, [r6, #1484]	; 0x5cc
   4b47c:	bl	10f24 <printf@plt>
   4b480:	mov	r1, r4
   4b484:	mov	r0, r9
   4b488:	str	r4, [sp, #64]	; 0x40
   4b48c:	bl	11104 <strnlen@plt>
   4b490:	mov	r3, fp
   4b494:	mov	r2, #0
   4b498:	mov	r1, r7
   4b49c:	add	r4, r0, #1
   4b4a0:	add	r4, r9, r4
   4b4a4:	mov	r0, r4
   4b4a8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b4ac:	str	r5, [sp]
   4b4b0:	mov	r2, r0
   4b4b4:	mov	r3, r1
   4b4b8:	mov	r0, sl
   4b4bc:	bl	3c744 <__assert_fail@plt+0x2b538>
   4b4c0:	mov	r1, r0
   4b4c4:	mov	r0, r8
   4b4c8:	bl	10f24 <printf@plt>
   4b4cc:	ldr	r0, [sp, #180]	; 0xb4
   4b4d0:	mov	r3, fp
   4b4d4:	add	r4, r4, r0
   4b4d8:	mov	r0, r4
   4b4dc:	mov	r2, #0
   4b4e0:	mov	r1, r7
   4b4e4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b4e8:	str	r5, [sp]
   4b4ec:	mov	r2, r0
   4b4f0:	mov	r3, r1
   4b4f4:	mov	r0, sl
   4b4f8:	bl	3c744 <__assert_fail@plt+0x2b538>
   4b4fc:	mov	r1, r0
   4b500:	mov	r0, r8
   4b504:	bl	10f24 <printf@plt>
   4b508:	ldr	r0, [sp, #180]	; 0xb4
   4b50c:	mov	r3, fp
   4b510:	add	r4, r4, r0
   4b514:	mov	r2, #0
   4b518:	mov	r0, r4
   4b51c:	mov	r1, r7
   4b520:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b524:	str	r5, [sp]
   4b528:	mov	r2, r0
   4b52c:	mov	r3, r1
   4b530:	mov	r0, sl
   4b534:	bl	3c744 <__assert_fail@plt+0x2b538>
   4b538:	mov	r1, r0
   4b53c:	mov	r0, r8
   4b540:	bl	10f24 <printf@plt>
   4b544:	ldr	r3, [sp, #180]	; 0xb4
   4b548:	ldr	r1, [sp, #64]	; 0x40
   4b54c:	mov	r2, r9
   4b550:	ldr	r0, [pc, #1696]	; 4bbf8 <__assert_fail@plt+0x3a9ec>
   4b554:	add	r9, r4, r3
   4b558:	str	r3, [sp, #64]	; 0x40
   4b55c:	bl	10f24 <printf@plt>
   4b560:	cmp	fp, r9
   4b564:	ldr	r3, [sp, #64]	; 0x40
   4b568:	bne	4b450 <__assert_fail@plt+0x3a244>
   4b56c:	mov	r2, #5
   4b570:	ldr	r1, [pc, #1668]	; 4bbfc <__assert_fail@plt+0x3a9f0>
   4b574:	mov	r0, #0
   4b578:	bl	10f90 <dcgettext@plt>
   4b57c:	bl	54dd0 <warn@@Base>
   4b580:	mov	r9, fp
   4b584:	b	4a7d8 <__assert_fail@plt+0x395cc>
   4b588:	mov	r3, #0
   4b58c:	mov	r5, r4
   4b590:	str	r4, [sp, #64]	; 0x40
   4b594:	add	sl, sp, #180	; 0xb4
   4b598:	mov	r4, r3
   4b59c:	b	4b5ac <__assert_fail@plt+0x3a3a0>
   4b5a0:	ldrb	r3, [r8, r3]
   4b5a4:	cmp	r3, #0
   4b5a8:	beq	4b670 <__assert_fail@plt+0x3a464>
   4b5ac:	sub	r1, fp, r5
   4b5b0:	mov	r0, r5
   4b5b4:	bl	11104 <strnlen@plt>
   4b5b8:	mov	r3, fp
   4b5bc:	mov	r2, #0
   4b5c0:	mov	r1, sl
   4b5c4:	add	r4, r4, #1
   4b5c8:	add	r8, r0, #1
   4b5cc:	add	r8, r5, r8
   4b5d0:	mov	r0, r8
   4b5d4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b5d8:	ldr	r5, [sp, #180]	; 0xb4
   4b5dc:	mov	r3, fp
   4b5e0:	add	r8, r8, r5
   4b5e4:	mov	r0, r8
   4b5e8:	mov	r2, #0
   4b5ec:	mov	r1, sl
   4b5f0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b5f4:	ldr	r0, [sp, #180]	; 0xb4
   4b5f8:	mov	r3, fp
   4b5fc:	add	r8, r8, r0
   4b600:	mov	r0, r8
   4b604:	mov	r2, #0
   4b608:	mov	r1, sl
   4b60c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b610:	ldr	r3, [sp, #180]	; 0xb4
   4b614:	add	r5, r8, r3
   4b618:	cmp	fp, r5
   4b61c:	bhi	4b5a0 <__assert_fail@plt+0x3a394>
   4b620:	mov	r2, #5
   4b624:	ldr	r1, [pc, #1492]	; 4bc00 <__assert_fail@plt+0x3a9f4>
   4b628:	mov	r0, #0
   4b62c:	bl	10f90 <dcgettext@plt>
   4b630:	bl	54dd0 <warn@@Base>
   4b634:	b	496dc <__assert_fail@plt+0x384d0>
   4b638:	mov	r2, #5
   4b63c:	ldr	r1, [pc, #1472]	; 4bc04 <__assert_fail@plt+0x3a9f8>
   4b640:	mov	r0, r4
   4b644:	bl	10f90 <dcgettext@plt>
   4b648:	ldr	r2, [sp, #88]	; 0x58
   4b64c:	mov	r1, r5
   4b650:	bl	54dd0 <warn@@Base>
   4b654:	mov	r0, r4
   4b658:	mov	r2, #5
   4b65c:	ldr	r1, [pc, #1444]	; 4bc08 <__assert_fail@plt+0x3a9fc>
   4b660:	bl	10f90 <dcgettext@plt>
   4b664:	mov	r1, r6
   4b668:	bl	10f24 <printf@plt>
   4b66c:	b	495f4 <__assert_fail@plt+0x383e8>
   4b670:	mov	r3, r4
   4b674:	str	r4, [sp, #88]	; 0x58
   4b678:	lsl	r0, r3, #4
   4b67c:	ldr	r4, [sp, #64]	; 0x40
   4b680:	bl	5861c <warn@@Base+0x384c>
   4b684:	ldrb	r3, [r6, #1]
   4b688:	cmp	r3, #0
   4b68c:	str	r0, [sp, #64]	; 0x40
   4b690:	ldrne	r8, [sp, #64]	; 0x40
   4b694:	beq	4b720 <__assert_fail@plt+0x3a514>
   4b698:	str	r4, [r8]
   4b69c:	sub	r1, fp, r4
   4b6a0:	mov	r0, r4
   4b6a4:	bl	11104 <strnlen@plt>
   4b6a8:	mov	r3, fp
   4b6ac:	mov	r2, #0
   4b6b0:	mov	r1, sl
   4b6b4:	add	r8, r8, #16
   4b6b8:	add	r6, r0, #1
   4b6bc:	add	r6, r4, r6
   4b6c0:	mov	r0, r6
   4b6c4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b6c8:	ldr	r2, [sp, #180]	; 0xb4
   4b6cc:	mov	r3, fp
   4b6d0:	add	r6, r6, r2
   4b6d4:	mov	r1, sl
   4b6d8:	mov	r2, #0
   4b6dc:	str	r0, [r8, #-12]
   4b6e0:	mov	r0, r6
   4b6e4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b6e8:	ldr	r2, [sp, #180]	; 0xb4
   4b6ec:	mov	r3, fp
   4b6f0:	add	r6, r6, r2
   4b6f4:	mov	r1, sl
   4b6f8:	mov	r2, #0
   4b6fc:	str	r0, [r8, #-8]
   4b700:	mov	r0, r6
   4b704:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b708:	ldr	r3, [sp, #180]	; 0xb4
   4b70c:	add	r4, r6, r3
   4b710:	str	r0, [r8, #-4]
   4b714:	ldrb	r3, [r6, r3]
   4b718:	cmp	r3, #0
   4b71c:	bne	4b698 <__assert_fail@plt+0x3a48c>
   4b720:	ldr	r3, [sp, #80]	; 0x50
   4b724:	add	r6, r5, #1
   4b728:	cmp	r3, #0
   4b72c:	bne	4b1e0 <__assert_fail@plt+0x39fd4>
   4b730:	mov	r2, #5
   4b734:	ldr	r1, [pc, #1232]	; 4bc0c <__assert_fail@plt+0x3aa00>
   4b738:	ldr	r0, [sp, #80]	; 0x50
   4b73c:	bl	10f90 <dcgettext@plt>
   4b740:	ldr	r3, [sp, #64]	; 0x40
   4b744:	ldr	r1, [r3]
   4b748:	bl	10f24 <printf@plt>
   4b74c:	b	4a938 <__assert_fail@plt+0x3972c>
   4b750:	strd	r8, [sp, #56]	; 0x38
   4b754:	ldr	r3, [sp, #56]	; 0x38
   4b758:	mov	r9, r5
   4b75c:	lsl	r0, r3, #2
   4b760:	bl	5861c <warn@@Base+0x384c>
   4b764:	ldrb	r3, [r6]
   4b768:	cmp	r3, #0
   4b76c:	str	r0, [sp, #80]	; 0x50
   4b770:	ldrne	r3, [sp, #80]	; 0x50
   4b774:	subne	r5, r3, #4
   4b778:	beq	4b79c <__assert_fail@plt+0x3a590>
   4b77c:	str	r6, [r5, #4]!
   4b780:	sub	r1, r6, fp
   4b784:	mov	r0, r6
   4b788:	bl	11104 <strnlen@plt>
   4b78c:	add	r0, r0, #1
   4b790:	ldrb	r3, [r6, r0]!
   4b794:	cmp	r3, #0
   4b798:	bne	4b77c <__assert_fail@plt+0x3a570>
   4b79c:	mov	r6, r4
   4b7a0:	b	4a91c <__assert_fail@plt+0x39710>
   4b7a4:	mov	r2, #5
   4b7a8:	ldr	r1, [pc, #1120]	; 4bc10 <__assert_fail@plt+0x3aa04>
   4b7ac:	mov	r0, #0
   4b7b0:	bl	10f90 <dcgettext@plt>
   4b7b4:	mov	r4, r0
   4b7b8:	b	4b21c <__assert_fail@plt+0x3a010>
   4b7bc:	mov	r1, r8
   4b7c0:	ldr	r3, [pc, #1100]	; 4bc14 <__assert_fail@plt+0x3aa08>
   4b7c4:	mov	r0, r6
   4b7c8:	ldr	r3, [r3]
   4b7cc:	blx	r3
   4b7d0:	ldr	r6, [sp, #96]	; 0x60
   4b7d4:	uxtb	r3, r0
   4b7d8:	str	r3, [sp, #120]	; 0x78
   4b7dc:	mov	r3, #0
   4b7e0:	str	r3, [sp, #124]	; 0x7c
   4b7e4:	ldrd	r2, [sp, #120]	; 0x78
   4b7e8:	orrs	r1, r2, r3
   4b7ec:	beq	4ba98 <__assert_fail@plt+0x3a88c>
   4b7f0:	str	r9, [sp, #56]	; 0x38
   4b7f4:	mov	r4, #0
   4b7f8:	mov	r5, #0
   4b7fc:	add	sl, sp, #180	; 0xb4
   4b800:	mov	r8, r2
   4b804:	mov	r9, r3
   4b808:	mov	r3, fp
   4b80c:	mov	r2, #0
   4b810:	mov	r0, r6
   4b814:	mov	r1, sl
   4b818:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b81c:	ldr	r2, [sp, #180]	; 0xb4
   4b820:	mov	r3, fp
   4b824:	add	r6, r6, r2
   4b828:	mov	r0, r6
   4b82c:	mov	r2, #0
   4b830:	mov	r1, sl
   4b834:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4b838:	adds	r4, r4, #1
   4b83c:	adc	r5, r5, #0
   4b840:	ldr	r3, [sp, #180]	; 0xb4
   4b844:	cmp	r5, r9
   4b848:	cmpeq	r4, r8
   4b84c:	add	r6, r6, r3
   4b850:	bne	4b808 <__assert_fail@plt+0x3a5fc>
   4b854:	ldr	r9, [sp, #56]	; 0x38
   4b858:	b	4ac50 <__assert_fail@plt+0x39a44>
   4b85c:	ldr	r1, [r3, r6, lsl #4]
   4b860:	ldr	r0, [pc, #944]	; 4bc18 <__assert_fail@plt+0x3aa0c>
   4b864:	bl	10f24 <printf@plt>
   4b868:	b	495f4 <__assert_fail@plt+0x383e8>
   4b86c:	mov	r1, #2
   4b870:	ldr	r3, [pc, #924]	; 4bc14 <__assert_fail@plt+0x3aa08>
   4b874:	mov	r0, sl
   4b878:	ldr	r3, [r3]
   4b87c:	blx	r3
   4b880:	mov	r5, r0
   4b884:	mov	r7, r1
   4b888:	b	49fe4 <__assert_fail@plt+0x38dd8>
   4b88c:	udf	#0
   4b890:	ldr	r1, [pc, #900]	; 4bc1c <__assert_fail@plt+0x3aa10>
   4b894:	mov	r2, #5
   4b898:	mov	r0, #0
   4b89c:	mov	r5, r0
   4b8a0:	bl	10f90 <dcgettext@plt>
   4b8a4:	ldrd	r2, [sp, #56]	; 0x38
   4b8a8:	str	r5, [sp]
   4b8ac:	mov	r8, r0
   4b8b0:	ldr	r0, [pc, #820]	; 4bbec <__assert_fail@plt+0x3a9e0>
   4b8b4:	bl	3c744 <__assert_fail@plt+0x2b538>
   4b8b8:	mov	r1, r4
   4b8bc:	mov	r2, r0
   4b8c0:	mov	r0, r8
   4b8c4:	bl	54dd0 <warn@@Base>
   4b8c8:	mov	r0, r5
   4b8cc:	mov	r2, #5
   4b8d0:	ldr	r1, [pc, #840]	; 4bc20 <__assert_fail@plt+0x3aa14>
   4b8d4:	bl	10f90 <dcgettext@plt>
   4b8d8:	mov	r4, r0
   4b8dc:	b	4b21c <__assert_fail@plt+0x3a010>
   4b8e0:	ldr	r3, [sp, #80]	; 0x50
   4b8e4:	sub	r5, r5, #-1073741823	; 0xc0000001
   4b8e8:	ldr	r2, [r8]
   4b8ec:	ldr	r1, [r3, r5, lsl #2]
   4b8f0:	ldr	r0, [pc, #812]	; 4bc24 <__assert_fail@plt+0x3aa18>
   4b8f4:	bl	10f24 <printf@plt>
   4b8f8:	b	495f4 <__assert_fail@plt+0x383e8>
   4b8fc:	sub	r1, r3, sl
   4b900:	sub	r3, r1, #1
   4b904:	cmp	r3, #7
   4b908:	bhi	49fdc <__assert_fail@plt+0x38dd0>
   4b90c:	b	4b870 <__assert_fail@plt+0x3a664>
   4b910:	mov	r3, #5
   4b914:	str	r3, [sp]
   4b918:	ldr	r2, [pc, #776]	; 4bc28 <__assert_fail@plt+0x3aa1c>
   4b91c:	mov	r3, r4
   4b920:	ldr	r1, [pc, #772]	; 4bc2c <__assert_fail@plt+0x3aa20>
   4b924:	mov	r0, #0
   4b928:	bl	11200 <dcngettext@plt>
   4b92c:	add	r5, r5, #9
   4b930:	mov	r1, r4
   4b934:	mov	r2, #8
   4b938:	bl	548ac <error@@Base>
   4b93c:	cmp	fp, r5
   4b940:	bls	49b94 <__assert_fail@plt+0x38988>
   4b944:	mov	r1, #8
   4b948:	b	49bb0 <__assert_fail@plt+0x389a4>
   4b94c:	mov	sl, r9
   4b950:	b	49f48 <__assert_fail@plt+0x38d3c>
   4b954:	mov	r2, #5
   4b958:	ldr	r1, [pc, #720]	; 4bc30 <__assert_fail@plt+0x3aa24>
   4b95c:	bl	10f90 <dcgettext@plt>
   4b960:	bl	54dd0 <warn@@Base>
   4b964:	mov	r0, #0
   4b968:	add	sp, sp, #228	; 0xe4
   4b96c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4b970:	mov	r0, r4
   4b974:	mov	r2, #5
   4b978:	ldr	r1, [pc, #692]	; 4bc34 <__assert_fail@plt+0x3aa28>
   4b97c:	bl	10f90 <dcgettext@plt>
   4b980:	mov	r2, r5
   4b984:	ldr	r1, [r8]
   4b988:	bl	10f24 <printf@plt>
   4b98c:	b	495f4 <__assert_fail@plt+0x383e8>
   4b990:	ldrb	r2, [sp, #208]	; 0xd0
   4b994:	umull	r8, r9, r2, r8
   4b998:	mla	r9, r2, r7, r9
   4b99c:	adds	r3, r8, r0
   4b9a0:	adc	r2, r9, r1
   4b9a4:	orrs	r1, r8, r9
   4b9a8:	str	r3, [fp, #-8]
   4b9ac:	ldr	r1, [pc, #644]	; 4bc38 <__assert_fail@plt+0x3aa2c>
   4b9b0:	movne	r3, #0
   4b9b4:	str	r2, [fp, #-4]
   4b9b8:	mov	r0, #0
   4b9bc:	mov	r2, #5
   4b9c0:	strne	r3, [r6, #1456]	; 0x5b0
   4b9c4:	mov	r4, r0
   4b9c8:	bl	10f90 <dcgettext@plt>
   4b9cc:	mov	r2, r8
   4b9d0:	mov	r3, r9
   4b9d4:	str	r4, [sp]
   4b9d8:	mov	r5, r0
   4b9dc:	ldr	r0, [pc, #520]	; 4bbec <__assert_fail@plt+0x3a9e0>
   4b9e0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4b9e4:	str	r4, [sp]
   4b9e8:	ldrd	r2, [fp, #-8]
   4b9ec:	mov	r7, r0
   4b9f0:	ldr	r0, [pc, #580]	; 4bc3c <__assert_fail@plt+0x3aa30>
   4b9f4:	bl	3c744 <__assert_fail@plt+0x2b538>
   4b9f8:	mov	r1, r7
   4b9fc:	ldr	r3, [pc, #572]	; 4bc40 <__assert_fail@plt+0x3aa34>
   4ba00:	mov	r2, r0
   4ba04:	mov	r0, r5
   4ba08:	bl	10f24 <printf@plt>
   4ba0c:	b	49e68 <__assert_fail@plt+0x38c5c>
   4ba10:	mov	r2, #0
   4ba14:	mov	r3, #0
   4ba18:	strd	r2, [r9, #-8]
   4ba1c:	b	49bc4 <__assert_fail@plt+0x389b8>
   4ba20:	mov	r2, #5
   4ba24:	ldr	r1, [pc, #516]	; 4bc30 <__assert_fail@plt+0x3aa24>
   4ba28:	ldr	sl, [sp, #88]	; 0x58
   4ba2c:	bl	10f90 <dcgettext@plt>
   4ba30:	bl	54dd0 <warn@@Base>
   4ba34:	ldr	r3, [pc, #520]	; 4bc44 <__assert_fail@plt+0x3aa38>
   4ba38:	ldr	r0, [r3]
   4ba3c:	ands	r0, r0, #2
   4ba40:	beq	49384 <__assert_fail@plt+0x38178>
   4ba44:	ldr	r3, [sp, #76]	; 0x4c
   4ba48:	add	r1, r3, #12
   4ba4c:	add	r0, r3, #8
   4ba50:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   4ba54:	mov	r3, #0
   4ba58:	str	r3, [sp, #172]	; 0xac
   4ba5c:	b	493b4 <__assert_fail@plt+0x381a8>
   4ba60:	mov	r2, #5
   4ba64:	ldr	r1, [pc, #476]	; 4bc48 <__assert_fail@plt+0x3aa3c>
   4ba68:	bl	10f90 <dcgettext@plt>
   4ba6c:	ldrb	r1, [sp, #217]	; 0xd9
   4ba70:	bl	54dd0 <warn@@Base>
   4ba74:	b	4b964 <__assert_fail@plt+0x3a758>
   4ba78:	ldr	sl, [sp, #88]	; 0x58
   4ba7c:	b	4ba34 <__assert_fail@plt+0x3a828>
   4ba80:	mov	r2, #5
   4ba84:	ldr	r1, [pc, #448]	; 4bc4c <__assert_fail@plt+0x3aa40>
   4ba88:	ldr	sl, [sp, #88]	; 0x58
   4ba8c:	bl	10f90 <dcgettext@plt>
   4ba90:	bl	54dd0 <warn@@Base>
   4ba94:	b	4ba34 <__assert_fail@plt+0x3a828>
   4ba98:	add	sl, sp, #180	; 0xb4
   4ba9c:	b	4ac50 <__assert_fail@plt+0x39a44>
   4baa0:	mov	r2, #5
   4baa4:	ldr	r1, [pc, #420]	; 4bc50 <__assert_fail@plt+0x3aa44>
   4baa8:	mov	r0, #0
   4baac:	bl	10f90 <dcgettext@plt>
   4bab0:	bl	54dd0 <warn@@Base>
   4bab4:	b	496dc <__assert_fail@plt+0x384d0>
   4bab8:	mov	r2, #5
   4babc:	ldr	r1, [pc, #400]	; 4bc54 <__assert_fail@plt+0x3aa48>
   4bac0:	mov	r0, #0
   4bac4:	bl	10f90 <dcgettext@plt>
   4bac8:	bl	54dd0 <warn@@Base>
   4bacc:	b	496dc <__assert_fail@plt+0x384d0>
   4bad0:	ldr	r3, [pc, #364]	; 4bc44 <__assert_fail@plt+0x3aa38>
   4bad4:	ldr	r3, [r3]
   4bad8:	tst	r3, #2
   4badc:	beq	49380 <__assert_fail@plt+0x38174>
   4bae0:	ldr	r3, [sp, #76]	; 0x4c
   4bae4:	add	r1, r3, #12
   4bae8:	add	r0, r3, #8
   4baec:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   4baf0:	b	49380 <__assert_fail@plt+0x38174>
   4baf4:	ldr	r9, [sp, #168]	; 0xa8
   4baf8:	b	4b1cc <__assert_fail@plt+0x39fc0>
   4bafc:	mov	fp, r6
   4bb00:	ldr	r9, [sp, #152]	; 0x98
   4bb04:	ldr	sl, [sp, #88]	; 0x58
   4bb08:	b	4ae8c <__assert_fail@plt+0x39c80>
   4bb0c:	mov	r2, #5
   4bb10:	ldr	r1, [pc, #320]	; 4bc58 <__assert_fail@plt+0x3aa4c>
   4bb14:	mov	r0, #0
   4bb18:	bl	10f90 <dcgettext@plt>
   4bb1c:	mov	r1, r7
   4bb20:	bl	10f24 <printf@plt>
   4bb24:	ldr	r3, [sp, #56]	; 0x38
   4bb28:	cmp	r3, #0
   4bb2c:	bne	4bb44 <__assert_fail@plt+0x3a938>
   4bb30:	ldr	r3, [pc, #292]	; 4bc5c <__assert_fail@plt+0x3aa50>
   4bb34:	mov	r0, #10
   4bb38:	ldr	r1, [r3]
   4bb3c:	bl	11158 <putc@plt>
   4bb40:	b	49e68 <__assert_fail@plt+0x38c5c>
   4bb44:	add	r7, r3, r7
   4bb48:	ldrb	r4, [r7, #-1]
   4bb4c:	cmp	r4, #0
   4bb50:	beq	4bb30 <__assert_fail@plt+0x3a924>
   4bb54:	ldr	r8, [pc, #224]	; 4bc3c <__assert_fail@plt+0x3aa30>
   4bb58:	ldr	r7, [pc, #256]	; 4bc60 <__assert_fail@plt+0x3aa54>
   4bb5c:	add	r5, sp, #180	; 0xb4
   4bb60:	mov	r9, #0
   4bb64:	ldr	r3, [sp, #64]	; 0x40
   4bb68:	mov	r2, #0
   4bb6c:	mov	r1, r5
   4bb70:	mov	r0, sl
   4bb74:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4bb78:	str	r9, [sp]
   4bb7c:	mov	r2, r0
   4bb80:	mov	r3, r1
   4bb84:	mov	r0, r8
   4bb88:	bl	3c744 <__assert_fail@plt+0x2b538>
   4bb8c:	cmp	r4, #1
   4bb90:	mov	r1, r0
   4bb94:	beq	4bbb4 <__assert_fail@plt+0x3a9a8>
   4bb98:	mov	r2, r7
   4bb9c:	ldr	r0, [pc, #192]	; 4bc64 <__assert_fail@plt+0x3aa58>
   4bba0:	bl	10f24 <printf@plt>
   4bba4:	ldr	r3, [sp, #180]	; 0xb4
   4bba8:	sub	r4, r4, #1
   4bbac:	add	sl, sl, r3
   4bbb0:	b	4bb64 <__assert_fail@plt+0x3a958>
   4bbb4:	ldr	r2, [pc, #132]	; 4bc40 <__assert_fail@plt+0x3aa34>
   4bbb8:	ldr	r0, [pc, #164]	; 4bc64 <__assert_fail@plt+0x3aa58>
   4bbbc:	bl	10f24 <printf@plt>
   4bbc0:	ldr	r3, [sp, #180]	; 0xb4
   4bbc4:	add	sl, sl, r3
   4bbc8:	b	4bb30 <__assert_fail@plt+0x3a924>
   4bbcc:	ldr	r2, [pc, #140]	; 4bc60 <__assert_fail@plt+0x3aa54>
   4bbd0:	ldr	r0, [pc, #140]	; 4bc64 <__assert_fail@plt+0x3aa58>
   4bbd4:	bl	10f24 <printf@plt>
   4bbd8:	ldr	r3, [sp, #180]	; 0xb4
   4bbdc:	sub	r4, r4, #1
   4bbe0:	add	sl, sl, r3
   4bbe4:	b	4997c <__assert_fail@plt+0x38770>
   4bbe8:	andeq	pc, r7, r8, lsr #19
   4bbec:	andeq	r3, r6, ip, asr #17
   4bbf0:	andeq	pc, r7, ip, asr #19
   4bbf4:	strdeq	r1, [r8], -r0
   4bbf8:	strdeq	r1, [r8], -r8
   4bbfc:	andeq	r1, r8, r0, lsl #20
   4bc00:	andeq	r1, r8, r8, asr #30
   4bc04:	andeq	r1, r8, ip, ror #27
   4bc08:	andeq	r1, r8, r0, lsl lr
   4bc0c:	andeq	r1, r8, r8, lsl sp
   4bc10:	andeq	r2, r6, r0, asr #31
   4bc14:	andeq	lr, r9, ip, asr sp
   4bc18:	andeq	r1, r8, r4, lsr lr
   4bc1c:	andeq	r1, r8, r4, lsr #26
   4bc20:	andeq	r3, r6, ip
   4bc24:	muleq	r8, ip, lr
   4bc28:			; <UNDEFINED> instruction: 0x0007e5b0
   4bc2c:	strdeq	lr, [r7], -ip
   4bc30:	andeq	r1, r8, r0, lsl #14
   4bc34:	andeq	r1, r8, r0, asr #28
   4bc38:	andeq	r1, r8, r8, lsl #22
   4bc3c:	andeq	r9, r6, r0, lsr #15
   4bc40:	andeq	fp, r6, ip, ror #2
   4bc44:	andeq	lr, r9, r4, lsr sp
   4bc48:			; <UNDEFINED> instruction: 0x00081cb0
   4bc4c:	andeq	r1, r8, r8, asr #17
   4bc50:	andeq	r1, r8, r4, ror #25
   4bc54:	andeq	r1, r8, r0, lsl #26
   4bc58:	andeq	r1, r8, r4, lsl #25
   4bc5c:	andeq	sl, r9, ip, lsr #8
   4bc60:			; <UNDEFINED> instruction: 0x00068eb8
   4bc64:	andeq	r1, r8, r8, lsr #25
   4bc68:	ldr	r3, [pc, #16]	; 4bc80 <__assert_fail@plt+0x3aa74>
   4bc6c:	ldr	r1, [pc, #16]	; 4bc84 <__assert_fail@plt+0x3aa78>
   4bc70:	mov	r2, #101	; 0x65
   4bc74:	str	r1, [r3, #72]	; 0x48
   4bc78:	str	r2, [r3, #76]	; 0x4c
   4bc7c:	bx	lr
   4bc80:	ldrdeq	ip, [r9], -r0
   4bc84:	andeq	sp, r7, r0, asr #14
   4bc88:	ldr	r3, [pc, #16]	; 4bca0 <__assert_fail@plt+0x3aa94>
   4bc8c:	ldr	r1, [pc, #16]	; 4bca4 <__assert_fail@plt+0x3aa98>
   4bc90:	mov	r2, #101	; 0x65
   4bc94:	str	r1, [r3, #72]	; 0x48
   4bc98:	str	r2, [r3, #76]	; 0x4c
   4bc9c:	bx	lr
   4bca0:	ldrdeq	ip, [r9], -r0
   4bca4:	ldrdeq	sp, [r7], -r4
   4bca8:	ldr	r3, [pc, #16]	; 4bcc0 <__assert_fail@plt+0x3aab4>
   4bcac:	ldr	r1, [pc, #16]	; 4bcc4 <__assert_fail@plt+0x3aab8>
   4bcb0:	mov	r2, #126	; 0x7e
   4bcb4:	str	r1, [r3, #72]	; 0x48
   4bcb8:	str	r2, [r3, #76]	; 0x4c
   4bcbc:	bx	lr
   4bcc0:	ldrdeq	ip, [r9], -r0
   4bcc4:	andeq	sp, r7, r8, ror #20
   4bcc8:	ldr	r3, [pc, #16]	; 4bce0 <__assert_fail@plt+0x3aad4>
   4bccc:	ldr	r1, [pc, #16]	; 4bce4 <__assert_fail@plt+0x3aad8>
   4bcd0:	mov	r2, #96	; 0x60
   4bcd4:	str	r1, [r3, #72]	; 0x48
   4bcd8:	str	r2, [r3, #76]	; 0x4c
   4bcdc:	bx	lr
   4bce0:	ldrdeq	ip, [r9], -r0
   4bce4:	andeq	sp, r7, r0, ror #24
   4bce8:	ldr	r3, [pc, #16]	; 4bd00 <__assert_fail@plt+0x3aaf4>
   4bcec:	ldr	r1, [pc, #16]	; 4bd04 <__assert_fail@plt+0x3aaf8>
   4bcf0:	mov	r2, #84	; 0x54
   4bcf4:	str	r1, [r3, #72]	; 0x48
   4bcf8:	str	r2, [r3, #76]	; 0x4c
   4bcfc:	bx	lr
   4bd00:	ldrdeq	ip, [r9], -r0
   4bd04:	andeq	sp, r7, r0, ror #27
   4bd08:	ldr	r3, [pc, #16]	; 4bd20 <__assert_fail@plt+0x3ab14>
   4bd0c:	ldr	r1, [pc, #16]	; 4bd24 <__assert_fail@plt+0x3ab18>
   4bd10:	mov	r2, #64	; 0x40
   4bd14:	str	r1, [r3, #72]	; 0x48
   4bd18:	str	r2, [r3, #76]	; 0x4c
   4bd1c:	bx	lr
   4bd20:	ldrdeq	ip, [r9], -r0
   4bd24:	andeq	sp, r7, r0, lsr pc
   4bd28:	cmp	r0, #62	; 0x3e
   4bd2c:	beq	4bd9c <__assert_fail@plt+0x3ab90>
   4bd30:	bhi	4bd64 <__assert_fail@plt+0x3ab58>
   4bd34:	cmp	r0, #6
   4bd38:	beq	4bdb4 <__assert_fail@plt+0x3aba8>
   4bd3c:	cmp	r0, #22
   4bd40:	beq	4bdcc <__assert_fail@plt+0x3abc0>
   4bd44:	cmp	r0, #3
   4bd48:	bxne	lr
   4bd4c:	ldr	r3, [pc, #168]	; 4bdfc <__assert_fail@plt+0x3abf0>
   4bd50:	ldr	r1, [pc, #168]	; 4be00 <__assert_fail@plt+0x3abf4>
   4bd54:	mov	r2, #101	; 0x65
   4bd58:	str	r1, [r3, #72]	; 0x48
   4bd5c:	str	r2, [r3, #76]	; 0x4c
   4bd60:	bx	lr
   4bd64:	cmp	r0, #183	; 0xb7
   4bd68:	beq	4bde4 <__assert_fail@plt+0x3abd8>
   4bd6c:	bls	4bd90 <__assert_fail@plt+0x3ab84>
   4bd70:	cmp	r0, #243	; 0xf3
   4bd74:	bxne	lr
   4bd78:	ldr	r3, [pc, #124]	; 4bdfc <__assert_fail@plt+0x3abf0>
   4bd7c:	ldr	r1, [pc, #128]	; 4be04 <__assert_fail@plt+0x3abf8>
   4bd80:	mov	r2, #64	; 0x40
   4bd84:	str	r1, [r3, #72]	; 0x48
   4bd88:	str	r2, [r3, #76]	; 0x4c
   4bd8c:	bx	lr
   4bd90:	sub	r0, r0, #180	; 0xb4
   4bd94:	cmp	r0, #1
   4bd98:	bxhi	lr
   4bd9c:	ldr	r3, [pc, #88]	; 4bdfc <__assert_fail@plt+0x3abf0>
   4bda0:	ldr	r1, [pc, #96]	; 4be08 <__assert_fail@plt+0x3abfc>
   4bda4:	mov	r2, #126	; 0x7e
   4bda8:	str	r1, [r3, #72]	; 0x48
   4bdac:	str	r2, [r3, #76]	; 0x4c
   4bdb0:	bx	lr
   4bdb4:	ldr	r3, [pc, #64]	; 4bdfc <__assert_fail@plt+0x3abf0>
   4bdb8:	ldr	r1, [pc, #76]	; 4be0c <__assert_fail@plt+0x3ac00>
   4bdbc:	mov	r2, #101	; 0x65
   4bdc0:	str	r1, [r3, #72]	; 0x48
   4bdc4:	str	r2, [r3, #76]	; 0x4c
   4bdc8:	bx	lr
   4bdcc:	ldr	r3, [pc, #40]	; 4bdfc <__assert_fail@plt+0x3abf0>
   4bdd0:	ldr	r1, [pc, #56]	; 4be10 <__assert_fail@plt+0x3ac04>
   4bdd4:	mov	r2, #84	; 0x54
   4bdd8:	str	r1, [r3, #72]	; 0x48
   4bddc:	str	r2, [r3, #76]	; 0x4c
   4bde0:	bx	lr
   4bde4:	ldr	r3, [pc, #16]	; 4bdfc <__assert_fail@plt+0x3abf0>
   4bde8:	ldr	r1, [pc, #36]	; 4be14 <__assert_fail@plt+0x3ac08>
   4bdec:	mov	r2, #96	; 0x60
   4bdf0:	str	r1, [r3, #72]	; 0x48
   4bdf4:	str	r2, [r3, #76]	; 0x4c
   4bdf8:	bx	lr
   4bdfc:	ldrdeq	ip, [r9], -r0
   4be00:	andeq	sp, r7, r0, asr #14
   4be04:	andeq	sp, r7, r0, lsr pc
   4be08:	andeq	sp, r7, r8, ror #20
   4be0c:	ldrdeq	sp, [r7], -r4
   4be10:	andeq	sp, r7, r0, ror #27
   4be14:	andeq	sp, r7, r0, ror #24
   4be18:	push	{r4, r5, r6, lr}
   4be1c:	mov	r4, r0
   4be20:	mvn	r0, #0
   4be24:	mov	r5, r1
   4be28:	bl	586e0 <warn@@Base+0x3910>
   4be2c:	cmp	r0, r4
   4be30:	bls	4be40 <__assert_fail@plt+0x3ac34>
   4be34:	mul	r0, r4, r5
   4be38:	pop	{r4, r5, r6, lr}
   4be3c:	b	5861c <warn@@Base+0x384c>
   4be40:	mov	r0, #0
   4be44:	pop	{r4, r5, r6, pc}
   4be48:	push	{r4, r5, r6, lr}
   4be4c:	mov	r4, r0
   4be50:	mvn	r0, #0
   4be54:	mov	r5, r1
   4be58:	bl	586e0 <warn@@Base+0x3910>
   4be5c:	cmp	r0, r4
   4be60:	bls	4be70 <__assert_fail@plt+0x3ac64>
   4be64:	mul	r0, r4, r5
   4be68:	pop	{r4, r5, r6, lr}
   4be6c:	b	5861c <warn@@Base+0x384c>
   4be70:	ldr	r3, [pc, #40]	; 4bea0 <__assert_fail@plt+0x3ac94>
   4be74:	mov	r2, #5
   4be78:	ldr	r1, [pc, #36]	; 4bea4 <__assert_fail@plt+0x3ac98>
   4be7c:	mov	r0, #0
   4be80:	ldr	r5, [r3]
   4be84:	bl	10f90 <dcgettext@plt>
   4be88:	mov	r2, r4
   4be8c:	mov	r1, r0
   4be90:	mov	r0, r5
   4be94:	bl	11098 <fprintf@plt>
   4be98:	mov	r0, #1
   4be9c:	bl	58528 <warn@@Base+0x3758>
   4bea0:	andeq	sl, r9, r8, lsr #8
   4bea4:	andeq	r1, r8, ip, lsl #31
   4bea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4beac:	sub	sp, sp, #380	; 0x17c
   4beb0:	ldr	r2, [r0, #16]
   4beb4:	ldr	r3, [r0, #32]
   4beb8:	mov	r5, r0
   4bebc:	str	r0, [sp, #144]	; 0x90
   4bec0:	ldr	r1, [pc, #3464]	; 4cc50 <__assert_fail@plt+0x3ba44>
   4bec4:	ldr	r0, [r0, #8]
   4bec8:	add	fp, r2, r3
   4becc:	str	r2, [sp, #128]	; 0x80
   4bed0:	str	r2, [sp, #344]	; 0x158
   4bed4:	bl	10f18 <strcmp@plt>
   4bed8:	mov	r4, #0
   4bedc:	mov	r2, #5
   4bee0:	ldr	r1, [pc, #3436]	; 4cc54 <__assert_fail@plt+0x3ba48>
   4bee4:	str	r4, [sp, #352]	; 0x160
   4bee8:	str	r4, [sp, #148]	; 0x94
   4beec:	str	r0, [sp, #140]	; 0x8c
   4bef0:	mov	r0, r4
   4bef4:	bl	10f90 <dcgettext@plt>
   4bef8:	ldr	r3, [pc, #3416]	; 4cc58 <__assert_fail@plt+0x3ba4c>
   4befc:	add	r1, r5, #12
   4bf00:	str	r4, [sp, #332]	; 0x14c
   4bf04:	ldr	r3, [r3]
   4bf08:	str	r3, [sp, #136]	; 0x88
   4bf0c:	str	r0, [sp, #132]	; 0x84
   4bf10:	add	r0, r5, #8
   4bf14:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   4bf18:	ldr	sl, [sp, #344]	; 0x158
   4bf1c:	str	r4, [sp, #328]	; 0x148
   4bf20:	mov	r9, sl
   4bf24:	mov	sl, fp
   4bf28:	cmp	sl, r9
   4bf2c:	bls	4c050 <__assert_fail@plt+0x3ae44>
   4bf30:	add	r2, r9, #4
   4bf34:	mov	r3, #0
   4bf38:	mov	r1, #1
   4bf3c:	cmp	r2, sl
   4bf40:	str	r1, [sp, #360]	; 0x168
   4bf44:	str	r3, [sp, #364]	; 0x16c
   4bf48:	str	r3, [sp, #368]	; 0x170
   4bf4c:	bcc	4bfb4 <__assert_fail@plt+0x3ada8>
   4bf50:	sub	r1, sl, r9
   4bf54:	sub	r3, r1, #1
   4bf58:	cmp	r3, #7
   4bf5c:	bls	4bfb8 <__assert_fail@plt+0x3adac>
   4bf60:	str	r2, [sp, #344]	; 0x158
   4bf64:	ldr	r3, [sp, #128]	; 0x80
   4bf68:	ldr	r0, [pc, #3308]	; 4cc5c <__assert_fail@plt+0x3ba50>
   4bf6c:	sub	r1, r9, r3
   4bf70:	bl	10f24 <printf@plt>
   4bf74:	ldr	r9, [sp, #344]	; 0x158
   4bf78:	cmp	sl, r9
   4bf7c:	bls	4bf28 <__assert_fail@plt+0x3ad1c>
   4bf80:	ldrb	r3, [r9]
   4bf84:	cmp	r3, #0
   4bf88:	bne	4bf28 <__assert_fail@plt+0x3ad1c>
   4bf8c:	add	r3, r9, #1
   4bf90:	cmp	sl, r3
   4bf94:	str	r3, [sp, #344]	; 0x158
   4bf98:	mov	r9, r3
   4bf9c:	beq	4bf28 <__assert_fail@plt+0x3ad1c>
   4bfa0:	ldrb	r2, [r3]
   4bfa4:	add	r3, r3, #1
   4bfa8:	cmp	r2, #0
   4bfac:	beq	4bf90 <__assert_fail@plt+0x3ad84>
   4bfb0:	b	4bf28 <__assert_fail@plt+0x3ad1c>
   4bfb4:	mov	r1, #4
   4bfb8:	ldr	r3, [pc, #3232]	; 4cc60 <__assert_fail@plt+0x3ba54>
   4bfbc:	mov	r0, r9
   4bfc0:	ldr	r3, [r3]
   4bfc4:	blx	r3
   4bfc8:	mov	r2, r0
   4bfcc:	mov	r3, r1
   4bfd0:	ldr	r1, [sp, #344]	; 0x158
   4bfd4:	strd	r2, [sp, #24]
   4bfd8:	add	r0, r1, #4
   4bfdc:	orrs	r3, r2, r3
   4bfe0:	str	r0, [sp, #344]	; 0x158
   4bfe4:	beq	4bf64 <__assert_fail@plt+0x3ad58>
   4bfe8:	ldrd	r4, [sp, #24]
   4bfec:	mov	r3, #0
   4bff0:	mvn	r2, #0
   4bff4:	cmp	r5, r3
   4bff8:	cmpeq	r4, r2
   4bffc:	beq	4ebdc <__assert_fail@plt+0x3d9d0>
   4c000:	add	fp, r4, #4
   4c004:	add	fp, r9, fp
   4c008:	cmp	fp, r0
   4c00c:	cmpcs	sl, fp
   4c010:	mov	r6, #4
   4c014:	bcc	4ec2c <__assert_fail@plt+0x3da20>
   4c018:	add	r3, r0, r6
   4c01c:	cmp	r3, sl
   4c020:	bcc	4c064 <__assert_fail@plt+0x3ae58>
   4c024:	cmp	sl, r0
   4c028:	bls	4c03c <__assert_fail@plt+0x3ae30>
   4c02c:	sub	r1, sl, r0
   4c030:	sub	r2, r1, #1
   4c034:	cmp	r2, #7
   4c038:	bls	4c068 <__assert_fail@plt+0x3ae5c>
   4c03c:	ldr	r2, [sp, #140]	; 0x8c
   4c040:	str	r3, [sp, #344]	; 0x158
   4c044:	cmp	r2, #0
   4c048:	bne	4ef24 <__assert_fail@plt+0x3dd18>
   4c04c:	str	sl, [sp, #344]	; 0x158
   4c050:	mov	r0, #10
   4c054:	bl	110c8 <putchar@plt>
   4c058:	mov	r0, #1
   4c05c:	add	sp, sp, #380	; 0x17c
   4c060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4c064:	mov	r1, r6
   4c068:	ldr	r3, [pc, #3056]	; 4cc60 <__assert_fail@plt+0x3ba54>
   4c06c:	ldr	r3, [r3]
   4c070:	blx	r3
   4c074:	mov	r2, r0
   4c078:	mov	r3, r1
   4c07c:	ldr	r0, [sp, #344]	; 0x158
   4c080:	ldr	r1, [sp, #140]	; 0x8c
   4c084:	add	r0, r0, r6
   4c088:	cmp	r1, #0
   4c08c:	strd	r2, [sp, #120]	; 0x78
   4c090:	str	r0, [sp, #344]	; 0x158
   4c094:	beq	4e81c <__assert_fail@plt+0x3d610>
   4c098:	ldrd	r4, [sp, #120]	; 0x78
   4c09c:	mov	r3, #0
   4c0a0:	mvn	r2, #0
   4c0a4:	cmp	r5, r3
   4c0a8:	cmpeq	r4, r2
   4c0ac:	moveq	r1, #1
   4c0b0:	movne	r1, #0
   4c0b4:	cmp	r6, #4
   4c0b8:	movne	r1, #0
   4c0bc:	andeq	r1, r1, #1
   4c0c0:	cmp	r1, #0
   4c0c4:	strdne	r2, [sp, #120]	; 0x78
   4c0c8:	beq	4f3c4 <__assert_fail@plt+0x3e1b8>
   4c0cc:	mov	r3, #0
   4c0d0:	cmp	r0, sl
   4c0d4:	str	r3, [sp, #356]	; 0x164
   4c0d8:	bcs	4c04c <__assert_fail@plt+0x3ae40>
   4c0dc:	add	r2, sp, #364	; 0x16c
   4c0e0:	add	r3, sp, #368	; 0x170
   4c0e4:	str	r2, [sp, #4]
   4c0e8:	str	r3, [sp]
   4c0ec:	add	r2, sp, #356	; 0x164
   4c0f0:	add	r3, sp, #372	; 0x174
   4c0f4:	mov	r1, sl
   4c0f8:	bl	421a4 <__assert_fail@plt+0x30f98>
   4c0fc:	ldr	r5, [sp, #356]	; 0x164
   4c100:	cmp	r5, #0
   4c104:	str	r0, [sp, #344]	; 0x158
   4c108:	beq	4c050 <__assert_fail@plt+0x3ae44>
   4c10c:	ldr	r3, [sp, #352]	; 0x160
   4c110:	ldr	r1, [r5, #64]	; 0x40
   4c114:	cmp	r3, #0
   4c118:	subne	r3, r3, #1
   4c11c:	ldr	r2, [sp, #328]	; 0x148
   4c120:	cmp	r3, r1
   4c124:	movcs	r1, r3
   4c128:	str	r2, [r5]
   4c12c:	str	r9, [r5, #4]
   4c130:	mov	r0, r5
   4c134:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4c138:	cmp	r0, #0
   4c13c:	blt	4c050 <__assert_fail@plt+0x3ae44>
   4c140:	ldrb	r3, [r5, #68]	; 0x44
   4c144:	cmp	r3, #0
   4c148:	beq	4f2a4 <__assert_fail@plt+0x3e098>
   4c14c:	and	r3, r3, #7
   4c150:	sub	r3, r3, #2
   4c154:	cmp	r3, #2
   4c158:	ldrls	r2, [pc, #2820]	; 4cc64 <__assert_fail@plt+0x3ba58>
   4c15c:	ldrhi	r3, [pc, #2804]	; 4cc58 <__assert_fail@plt+0x3ba4c>
   4c160:	addls	r3, r2, r3, lsl #2
   4c164:	ldrhi	r3, [r3]
   4c168:	ldrls	r3, [r3, #1024]	; 0x400
   4c16c:	str	r3, [sp, #116]	; 0x74
   4c170:	ldr	r3, [sp, #128]	; 0x80
   4c174:	ldr	r0, [pc, #2796]	; 4cc68 <__assert_fail@plt+0x3ba5c>
   4c178:	sub	r1, r9, r3
   4c17c:	ldr	r3, [pc, #2792]	; 4cc6c <__assert_fail@plt+0x3ba60>
   4c180:	mov	r4, r3
   4c184:	str	r3, [sp, #112]	; 0x70
   4c188:	bl	10f24 <printf@plt>
   4c18c:	ldrd	r0, [sp, #24]
   4c190:	ldrb	r2, [r5, #70]	; 0x46
   4c194:	bl	3ca6c <__assert_fail@plt+0x2b860>
   4c198:	mov	r2, r6
   4c19c:	ldrd	r0, [sp, #120]	; 0x78
   4c1a0:	bl	3ca6c <__assert_fail@plt+0x2b860>
   4c1a4:	ldr	r3, [r4]
   4c1a8:	cmp	r3, #0
   4c1ac:	beq	4f234 <__assert_fail@plt+0x3e028>
   4c1b0:	ldr	r0, [r5, #64]	; 0x40
   4c1b4:	ldrd	r2, [r5, #24]
   4c1b8:	ldr	r1, [r5, #20]
   4c1bc:	str	r0, [sp]
   4c1c0:	ldr	r0, [pc, #2728]	; 4cc70 <__assert_fail@plt+0x3ba64>
   4c1c4:	bl	10f24 <printf@plt>
   4c1c8:	str	r5, [sp, #328]	; 0x148
   4c1cc:	ldr	r4, [sp, #344]	; 0x158
   4c1d0:	mov	r2, r4
   4c1d4:	cmp	fp, r2
   4c1d8:	bls	4c528 <__assert_fail@plt+0x3b31c>
   4c1dc:	add	r0, r2, #1
   4c1e0:	str	r0, [sp, #344]	; 0x158
   4c1e4:	ldrb	r3, [r0, #-1]
   4c1e8:	ands	r1, r3, #192	; 0xc0
   4c1ec:	and	r6, r3, #63	; 0x3f
   4c1f0:	movne	r3, r1
   4c1f4:	sub	r3, r3, #1
   4c1f8:	cmp	r3, #191	; 0xbf
   4c1fc:	ldrls	pc, [pc, r3, lsl #2]
   4c200:	b	4cc48 <__assert_fail@plt+0x3ba3c>
   4c204:	andeq	ip, r4, r8, lsr #23
   4c208:	andeq	ip, r4, r0, lsr #23
   4c20c:	muleq	r4, r8, fp
   4c210:	muleq	r4, r0, fp
   4c214:	andeq	ip, r4, r4, lsl fp
   4c218:	andeq	ip, r4, r0, lsr #21
   4c21c:	andeq	ip, r4, ip, lsr #20
   4c220:			; <UNDEFINED> instruction: 0x0004c9b8
   4c224:	andeq	ip, r4, r0, lsr #18
   4c228:	andeq	ip, r4, r8, asr #24
   4c22c:	andeq	ip, r4, r8, asr #24
   4c230:	strdeq	ip, [r4], -r0
   4c234:	andeq	ip, r4, r4, lsl #10
   4c238:	andeq	ip, r4, r4, lsl #10
   4c23c:	andeq	ip, r4, r8, lsr r8
   4c240:	strdeq	ip, [r4], -r4
   4c244:	andeq	ip, r4, ip, lsl r6
   4c248:	ldrdeq	ip, [r4], -r8
   4c24c:	andeq	ip, r4, ip, asr #11
   4c250:	andeq	ip, r4, r4, lsl fp
   4c254:	andeq	ip, r4, ip, lsl r6
   4c258:	strdeq	ip, [r4], -r4
   4c25c:	andeq	ip, r4, r8, asr #24
   4c260:	andeq	ip, r4, r8, asr #24
   4c264:	andeq	ip, r4, r8, asr #24
   4c268:	andeq	ip, r4, r8, asr #24
   4c26c:	andeq	ip, r4, r8, asr #24
   4c270:	andeq	ip, r4, r8, asr #24
   4c274:	andeq	ip, r4, r4, asr #11
   4c278:	andeq	ip, r4, r8, asr #24
   4c27c:	andeq	ip, r4, r8, asr #24
   4c280:	andeq	ip, r4, r8, asr #24
   4c284:	andeq	ip, r4, r8, asr #24
   4c288:	andeq	ip, r4, r8, asr #24
   4c28c:	andeq	ip, r4, r8, asr #24
   4c290:	andeq	ip, r4, r8, asr #24
   4c294:	andeq	ip, r4, r8, asr #24
   4c298:	andeq	ip, r4, r8, asr #24
   4c29c:	andeq	ip, r4, r8, asr #24
   4c2a0:	andeq	ip, r4, r8, asr #24
   4c2a4:	andeq	ip, r4, r8, asr #24
   4c2a8:	andeq	ip, r4, r8, asr #24
   4c2ac:	andeq	ip, r4, r8, asr #24
   4c2b0:	andeq	ip, r4, r8, asr #24
   4c2b4:	andeq	ip, r4, r8, asr #24
   4c2b8:	andeq	ip, r4, r4, lsl #10
   4c2bc:	andeq	ip, r4, ip, asr #23
   4c2c0:	andeq	ip, r4, r8, asr #24
   4c2c4:	andeq	ip, r4, r8, asr #24
   4c2c8:	andeq	ip, r4, r8, asr #24
   4c2cc:	andeq	ip, r4, r8, asr #24
   4c2d0:	andeq	ip, r4, r8, asr #24
   4c2d4:	andeq	ip, r4, r8, asr #24
   4c2d8:	andeq	ip, r4, r8, asr #24
   4c2dc:	andeq	ip, r4, r8, asr #24
   4c2e0:	andeq	ip, r4, r8, asr #24
   4c2e4:	andeq	ip, r4, r8, asr #24
   4c2e8:	andeq	ip, r4, r8, asr #24
   4c2ec:	andeq	ip, r4, r8, asr #24
   4c2f0:	andeq	ip, r4, r8, asr #24
   4c2f4:	andeq	ip, r4, r8, asr #24
   4c2f8:	andeq	ip, r4, r8, asr #24
   4c2fc:	andeq	ip, r4, r8, asr #24
   4c300:	andeq	ip, r4, r8, asr #24
   4c304:	andeq	ip, r4, r8, asr #24
   4c308:	andeq	ip, r4, r8, asr #24
   4c30c:	andeq	ip, r4, r8, asr #24
   4c310:	andeq	ip, r4, r8, asr #24
   4c314:	andeq	ip, r4, r8, asr #24
   4c318:	andeq	ip, r4, r8, asr #24
   4c31c:	andeq	ip, r4, r8, asr #24
   4c320:	andeq	ip, r4, r8, asr #24
   4c324:	andeq	ip, r4, r8, asr #24
   4c328:	andeq	ip, r4, r8, asr #24
   4c32c:	andeq	ip, r4, r8, asr #24
   4c330:	andeq	ip, r4, r8, asr #24
   4c334:	andeq	ip, r4, r8, asr #24
   4c338:	andeq	ip, r4, r8, asr #24
   4c33c:	andeq	ip, r4, r8, asr #24
   4c340:	andeq	ip, r4, r8, asr #24
   4c344:	andeq	ip, r4, r8, asr #24
   4c348:	andeq	ip, r4, r8, asr #24
   4c34c:	andeq	ip, r4, r8, asr #24
   4c350:	andeq	ip, r4, r8, asr #24
   4c354:	andeq	ip, r4, r8, asr #24
   4c358:	andeq	ip, r4, r8, asr #24
   4c35c:	andeq	ip, r4, r8, asr #24
   4c360:	andeq	ip, r4, r8, asr #24
   4c364:	andeq	ip, r4, r8, asr #24
   4c368:	andeq	ip, r4, r8, asr #24
   4c36c:	andeq	ip, r4, r8, asr #24
   4c370:	andeq	ip, r4, r8, asr #24
   4c374:	andeq	ip, r4, r8, asr #24
   4c378:	andeq	ip, r4, r8, asr #24
   4c37c:	andeq	ip, r4, r8, asr #24
   4c380:	andeq	ip, r4, r8, asr #24
   4c384:	andeq	ip, r4, r8, asr #24
   4c388:	andeq	ip, r4, r8, asr #24
   4c38c:	andeq	ip, r4, r8, asr #24
   4c390:	andeq	ip, r4, r8, asr #24
   4c394:	andeq	ip, r4, r8, asr #24
   4c398:	andeq	ip, r4, r8, asr #24
   4c39c:	andeq	ip, r4, r8, asr #24
   4c3a0:	andeq	ip, r4, r8, asr #24
   4c3a4:	andeq	ip, r4, r8, asr #24
   4c3a8:	andeq	ip, r4, r8, asr #24
   4c3ac:	andeq	ip, r4, r8, asr #24
   4c3b0:	andeq	ip, r4, r8, asr #24
   4c3b4:	andeq	ip, r4, r8, asr #24
   4c3b8:	andeq	ip, r4, r8, asr #24
   4c3bc:	andeq	ip, r4, r8, asr #24
   4c3c0:	andeq	ip, r4, r8, asr #24
   4c3c4:	andeq	ip, r4, r8, asr #24
   4c3c8:	andeq	ip, r4, r8, asr #24
   4c3cc:	andeq	ip, r4, r8, asr #24
   4c3d0:	andeq	ip, r4, r8, asr #24
   4c3d4:	andeq	ip, r4, r8, asr #24
   4c3d8:	andeq	ip, r4, r8, asr #24
   4c3dc:	andeq	ip, r4, r8, asr #24
   4c3e0:	andeq	ip, r4, r8, asr #24
   4c3e4:	andeq	ip, r4, r8, asr #24
   4c3e8:	andeq	ip, r4, r8, asr #24
   4c3ec:	andeq	ip, r4, r8, asr #24
   4c3f0:	andeq	ip, r4, r8, asr #24
   4c3f4:	andeq	ip, r4, r8, asr #24
   4c3f8:	andeq	ip, r4, r8, asr #24
   4c3fc:	andeq	ip, r4, r8, asr #24
   4c400:	andeq	ip, r4, r0, ror #17
   4c404:	andeq	ip, r4, r8, asr #24
   4c408:	andeq	ip, r4, r8, asr #24
   4c40c:	andeq	ip, r4, r8, asr #24
   4c410:	andeq	ip, r4, r8, asr #24
   4c414:	andeq	ip, r4, r8, asr #24
   4c418:	andeq	ip, r4, r8, asr #24
   4c41c:	andeq	ip, r4, r8, asr #24
   4c420:	andeq	ip, r4, r8, asr #24
   4c424:	andeq	ip, r4, r8, asr #24
   4c428:	andeq	ip, r4, r8, asr #24
   4c42c:	andeq	ip, r4, r8, asr #24
   4c430:	andeq	ip, r4, r8, asr #24
   4c434:	andeq	ip, r4, r8, asr #24
   4c438:	andeq	ip, r4, r8, asr #24
   4c43c:	andeq	ip, r4, r8, asr #24
   4c440:	andeq	ip, r4, r8, asr #24
   4c444:	andeq	ip, r4, r8, asr #24
   4c448:	andeq	ip, r4, r8, asr #24
   4c44c:	andeq	ip, r4, r8, asr #24
   4c450:	andeq	ip, r4, r8, asr #24
   4c454:	andeq	ip, r4, r8, asr #24
   4c458:	andeq	ip, r4, r8, asr #24
   4c45c:	andeq	ip, r4, r8, asr #24
   4c460:	andeq	ip, r4, r8, asr #24
   4c464:	andeq	ip, r4, r8, asr #24
   4c468:	andeq	ip, r4, r8, asr #24
   4c46c:	andeq	ip, r4, r8, asr #24
   4c470:	andeq	ip, r4, r8, asr #24
   4c474:	andeq	ip, r4, r8, asr #24
   4c478:	andeq	ip, r4, r8, asr #24
   4c47c:	andeq	ip, r4, r8, asr #24
   4c480:	andeq	ip, r4, r8, asr #24
   4c484:	andeq	ip, r4, r8, asr #24
   4c488:	andeq	ip, r4, r8, asr #24
   4c48c:	andeq	ip, r4, r8, asr #24
   4c490:	andeq	ip, r4, r8, asr #24
   4c494:	andeq	ip, r4, r8, asr #24
   4c498:	andeq	ip, r4, r8, asr #24
   4c49c:	andeq	ip, r4, r8, asr #24
   4c4a0:	andeq	ip, r4, r8, asr #24
   4c4a4:	andeq	ip, r4, r8, asr #24
   4c4a8:	andeq	ip, r4, r8, asr #24
   4c4ac:	andeq	ip, r4, r8, asr #24
   4c4b0:	andeq	ip, r4, r8, asr #24
   4c4b4:	andeq	ip, r4, r8, asr #24
   4c4b8:	andeq	ip, r4, r8, asr #24
   4c4bc:	andeq	ip, r4, r8, asr #24
   4c4c0:	andeq	ip, r4, r8, asr #24
   4c4c4:	andeq	ip, r4, r8, asr #24
   4c4c8:	andeq	ip, r4, r8, asr #24
   4c4cc:	andeq	ip, r4, r8, asr #24
   4c4d0:	andeq	ip, r4, r8, asr #24
   4c4d4:	andeq	ip, r4, r8, asr #24
   4c4d8:	andeq	ip, r4, r8, asr #24
   4c4dc:	andeq	ip, r4, r8, asr #24
   4c4e0:	andeq	ip, r4, r8, asr #24
   4c4e4:	andeq	ip, r4, r8, asr #24
   4c4e8:	andeq	ip, r4, r8, asr #24
   4c4ec:	andeq	ip, r4, r8, asr #24
   4c4f0:	andeq	ip, r4, r8, asr #24
   4c4f4:	andeq	ip, r4, r8, asr #24
   4c4f8:	andeq	ip, r4, r8, asr #24
   4c4fc:	andeq	ip, r4, r8, asr #24
   4c500:			; <UNDEFINED> instruction: 0x0004cbb4
   4c504:	mov	r3, sl
   4c508:	mov	r2, #0
   4c50c:	add	r1, sp, #348	; 0x15c
   4c510:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c514:	ldr	r2, [sp, #344]	; 0x158
   4c518:	ldr	r3, [sp, #348]	; 0x15c
   4c51c:	add	r2, r2, r3
   4c520:	cmp	fp, r2
   4c524:	bhi	4c1dc <__assert_fail@plt+0x3afd0>
   4c528:	mov	r9, #1
   4c52c:	str	r4, [sp, #344]	; 0x158
   4c530:	str	r9, [sp, #24]
   4c534:	cmp	fp, r4
   4c538:	bls	4c588 <__assert_fail@plt+0x3b37c>
   4c53c:	add	r0, r4, #1
   4c540:	str	r0, [sp, #344]	; 0x158
   4c544:	ldrb	r3, [r4]
   4c548:	ands	r2, r3, #192	; 0xc0
   4c54c:	and	r8, r3, #63	; 0x3f
   4c550:	movne	r3, r2
   4c554:	bne	4cd08 <__assert_fail@plt+0x3bafc>
   4c558:	cmp	r3, #0
   4c55c:	bne	4cd08 <__assert_fail@plt+0x3bafc>
   4c560:	ldr	r3, [sp, #112]	; 0x70
   4c564:	ldr	r3, [r3]
   4c568:	cmp	r3, #0
   4c56c:	movne	r4, r0
   4c570:	bne	4c534 <__assert_fail@plt+0x3b328>
   4c574:	ldr	r0, [pc, #1784]	; 4cc74 <__assert_fail@plt+0x3ba68>
   4c578:	bl	11014 <puts@plt>
   4c57c:	ldr	r4, [sp, #344]	; 0x158
   4c580:	cmp	fp, r4
   4c584:	bhi	4c53c <__assert_fail@plt+0x3b330>
   4c588:	ldr	r3, [sp, #112]	; 0x70
   4c58c:	ldr	r9, [sp, #24]
   4c590:	ldr	r3, [r3]
   4c594:	eor	r9, r9, #1
   4c598:	cmp	r3, #0
   4c59c:	andne	r9, r9, #1
   4c5a0:	moveq	r9, #0
   4c5a4:	cmp	r9, #0
   4c5a8:	bne	4ef9c <__assert_fail@plt+0x3dd90>
   4c5ac:	ldr	r3, [pc, #1700]	; 4cc58 <__assert_fail@plt+0x3ba4c>
   4c5b0:	ldr	r2, [sp, #136]	; 0x88
   4c5b4:	mov	r9, fp
   4c5b8:	str	fp, [sp, #344]	; 0x158
   4c5bc:	str	r2, [r3]
   4c5c0:	b	4bf28 <__assert_fail@plt+0x3ad1c>
   4c5c4:	add	r2, r2, #9
   4c5c8:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4c5cc:	mov	r3, sl
   4c5d0:	mov	r2, #1
   4c5d4:	b	4c50c <__assert_fail@plt+0x3b300>
   4c5d8:	mov	r3, sl
   4c5dc:	mov	r2, #0
   4c5e0:	add	r1, sp, #348	; 0x15c
   4c5e4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c5e8:	ldr	r3, [sp, #348]	; 0x15c
   4c5ec:	ldr	ip, [sp, #344]	; 0x158
   4c5f0:	add	r1, sp, #348	; 0x15c
   4c5f4:	add	ip, ip, r3
   4c5f8:	mov	r0, ip
   4c5fc:	mov	r3, sl
   4c600:	mov	r2, #1
   4c604:	str	ip, [sp, #344]	; 0x158
   4c608:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c60c:	ldr	r2, [sp, #344]	; 0x158
   4c610:	ldr	r3, [sp, #348]	; 0x15c
   4c614:	add	r2, r2, r3
   4c618:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4c61c:	add	r8, sp, #348	; 0x15c
   4c620:	mov	r3, sl
   4c624:	mov	r2, #0
   4c628:	mov	r1, r8
   4c62c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c630:	mov	r9, #0
   4c634:	str	r9, [sp, #100]	; 0x64
   4c638:	str	r0, [sp, #96]	; 0x60
   4c63c:	ldrd	r2, [sp, #96]	; 0x60
   4c640:	mov	r6, r0
   4c644:	mov	r7, r1
   4c648:	cmp	r3, r1
   4c64c:	cmpeq	r2, r0
   4c650:	beq	4c694 <__assert_fail@plt+0x3b488>
   4c654:	ldr	r1, [pc, #1688]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4c658:	mov	r2, #5
   4c65c:	mov	r0, r9
   4c660:	bl	10f90 <dcgettext@plt>
   4c664:	mov	r2, r6
   4c668:	mov	r3, r7
   4c66c:	str	r9, [sp]
   4c670:	str	r0, [sp, #24]
   4c674:	ldr	r0, [pc, #1660]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4c678:	bl	3c744 <__assert_fail@plt+0x2b538>
   4c67c:	ldr	r1, [sp, #24]
   4c680:	ldr	r2, [pc, #1520]	; 4cc78 <__assert_fail@plt+0x3ba6c>
   4c684:	mov	r3, r0
   4c688:	mov	r0, r1
   4c68c:	ldr	r1, [pc, #1644]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4c690:	bl	548ac <error@@Base>
   4c694:	ldr	r3, [sp, #348]	; 0x15c
   4c698:	ldr	ip, [sp, #344]	; 0x158
   4c69c:	mov	r1, r8
   4c6a0:	add	ip, ip, r3
   4c6a4:	mov	r0, ip
   4c6a8:	mov	r3, sl
   4c6ac:	mov	r2, #1
   4c6b0:	str	ip, [sp, #344]	; 0x158
   4c6b4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c6b8:	ldr	r3, [sp, #344]	; 0x158
   4c6bc:	ldr	r2, [sp, #348]	; 0x15c
   4c6c0:	mov	r1, r6
   4c6c4:	add	r3, r3, r2
   4c6c8:	mov	r0, r5
   4c6cc:	str	r3, [sp, #344]	; 0x158
   4c6d0:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4c6d4:	cmp	r0, #0
   4c6d8:	blt	4c6ec <__assert_fail@plt+0x3b4e0>
   4c6dc:	ldr	r3, [r5, #12]
   4c6e0:	lsl	r6, r6, #1
   4c6e4:	mov	r2, #7
   4c6e8:	strh	r2, [r3, r6]
   4c6ec:	ldr	r2, [sp, #344]	; 0x158
   4c6f0:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4c6f4:	add	r8, sp, #348	; 0x15c
   4c6f8:	mov	r3, sl
   4c6fc:	mov	r2, #0
   4c700:	mov	r1, r8
   4c704:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c708:	mov	r6, #0
   4c70c:	str	r6, [sp, #84]	; 0x54
   4c710:	str	r0, [sp, #80]	; 0x50
   4c714:	mov	r2, r0
   4c718:	mov	r3, r1
   4c71c:	ldrd	r0, [sp, #80]	; 0x50
   4c720:	strd	r2, [sp, #24]
   4c724:	cmp	r1, r3
   4c728:	cmpeq	r0, r2
   4c72c:	beq	4c768 <__assert_fail@plt+0x3b55c>
   4c730:	ldr	r1, [pc, #1468]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4c734:	mov	r2, #5
   4c738:	mov	r0, r6
   4c73c:	bl	10f90 <dcgettext@plt>
   4c740:	ldrd	r2, [sp, #24]
   4c744:	str	r6, [sp]
   4c748:	mov	r7, r0
   4c74c:	ldr	r0, [pc, #1444]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4c750:	bl	3c744 <__assert_fail@plt+0x2b538>
   4c754:	ldr	r2, [pc, #1312]	; 4cc7c <__assert_fail@plt+0x3ba70>
   4c758:	ldr	r1, [pc, #1440]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4c75c:	mov	r3, r0
   4c760:	mov	r0, r7
   4c764:	bl	548ac <error@@Base>
   4c768:	ldr	ip, [sp, #344]	; 0x158
   4c76c:	ldr	r3, [sp, #348]	; 0x15c
   4c770:	mov	r1, r8
   4c774:	add	ip, ip, r3
   4c778:	mov	r2, #0
   4c77c:	mov	r3, sl
   4c780:	mov	r0, ip
   4c784:	str	ip, [sp, #344]	; 0x158
   4c788:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c78c:	mov	r8, #0
   4c790:	str	r8, [sp, #92]	; 0x5c
   4c794:	str	r0, [sp, #88]	; 0x58
   4c798:	ldrd	r2, [sp, #88]	; 0x58
   4c79c:	mov	r6, r0
   4c7a0:	mov	r7, r1
   4c7a4:	cmp	r3, r1
   4c7a8:	cmpeq	r2, r0
   4c7ac:	beq	4c7ec <__assert_fail@plt+0x3b5e0>
   4c7b0:	ldr	r1, [pc, #1340]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4c7b4:	mov	r2, #5
   4c7b8:	mov	r0, r8
   4c7bc:	bl	10f90 <dcgettext@plt>
   4c7c0:	mov	r2, r6
   4c7c4:	mov	r3, r7
   4c7c8:	str	r8, [sp]
   4c7cc:	mov	r9, r0
   4c7d0:	ldr	r0, [pc, #1312]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4c7d4:	bl	3c744 <__assert_fail@plt+0x2b538>
   4c7d8:	ldr	r2, [pc, #1184]	; 4cc80 <__assert_fail@plt+0x3ba74>
   4c7dc:	ldr	r1, [pc, #1308]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4c7e0:	mov	r3, r0
   4c7e4:	mov	r0, r9
   4c7e8:	bl	548ac <error@@Base>
   4c7ec:	ldr	r3, [sp, #344]	; 0x158
   4c7f0:	ldr	r2, [sp, #348]	; 0x15c
   4c7f4:	add	r3, r3, r2
   4c7f8:	adds	r2, r3, r6
   4c7fc:	str	r3, [sp, #344]	; 0x158
   4c800:	strcc	r2, [sp, #344]	; 0x158
   4c804:	bcs	4e7e8 <__assert_fail@plt+0x3d5dc>
   4c808:	ldr	r1, [sp, #24]
   4c80c:	mov	r0, r5
   4c810:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4c814:	cmp	r0, #0
   4c818:	blt	4c6ec <__assert_fail@plt+0x3b4e0>
   4c81c:	ldr	r3, [sp, #24]
   4c820:	ldr	r2, [r5, #12]
   4c824:	mov	r1, #7
   4c828:	lsl	r3, r3, #1
   4c82c:	strh	r1, [r2, r3]
   4c830:	ldr	r2, [sp, #344]	; 0x158
   4c834:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4c838:	mov	r3, sl
   4c83c:	mov	r2, #0
   4c840:	add	r1, sp, #348	; 0x15c
   4c844:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c848:	mov	r8, #0
   4c84c:	str	r8, [sp, #76]	; 0x4c
   4c850:	str	r0, [sp, #72]	; 0x48
   4c854:	ldrd	r2, [sp, #72]	; 0x48
   4c858:	mov	r6, r0
   4c85c:	mov	r7, r1
   4c860:	cmp	r1, r3
   4c864:	cmpeq	r0, r2
   4c868:	beq	4c8a8 <__assert_fail@plt+0x3b69c>
   4c86c:	ldr	r1, [pc, #1152]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4c870:	mov	r2, #5
   4c874:	mov	r0, r8
   4c878:	bl	10f90 <dcgettext@plt>
   4c87c:	mov	r2, r6
   4c880:	mov	r3, r7
   4c884:	str	r8, [sp]
   4c888:	mov	r9, r0
   4c88c:	ldr	r0, [pc, #1124]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4c890:	bl	3c744 <__assert_fail@plt+0x2b538>
   4c894:	ldr	r2, [pc, #1000]	; 4cc84 <__assert_fail@plt+0x3ba78>
   4c898:	ldr	r1, [pc, #1120]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4c89c:	mov	r3, r0
   4c8a0:	mov	r0, r9
   4c8a4:	bl	548ac <error@@Base>
   4c8a8:	ldr	r3, [sp, #344]	; 0x158
   4c8ac:	ldr	r2, [sp, #348]	; 0x15c
   4c8b0:	add	r3, r3, r2
   4c8b4:	adds	r2, r3, r6
   4c8b8:	str	r3, [sp, #344]	; 0x158
   4c8bc:	bcc	4c1d4 <__assert_fail@plt+0x3afc8>
   4c8c0:	mov	r2, #5
   4c8c4:	ldr	r1, [pc, #956]	; 4cc88 <__assert_fail@plt+0x3ba7c>
   4c8c8:	mov	r0, #0
   4c8cc:	bl	10f90 <dcgettext@plt>
   4c8d0:	mov	r1, r6
   4c8d4:	bl	54dd0 <warn@@Base>
   4c8d8:	mov	r2, fp
   4c8dc:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4c8e0:	mov	r3, sl
   4c8e4:	mov	r2, #0
   4c8e8:	add	r1, sp, #348	; 0x15c
   4c8ec:	b	4c6b4 <__assert_fail@plt+0x3b4a8>
   4c8f0:	mov	r3, sl
   4c8f4:	mov	r2, #0
   4c8f8:	add	r1, sp, #348	; 0x15c
   4c8fc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c900:	ldr	r3, [sp, #348]	; 0x15c
   4c904:	ldr	ip, [sp, #344]	; 0x158
   4c908:	add	r1, sp, #348	; 0x15c
   4c90c:	add	ip, ip, r3
   4c910:	mov	r0, ip
   4c914:	mov	r3, sl
   4c918:	mov	r2, #0
   4c91c:	b	4c604 <__assert_fail@plt+0x3b3f8>
   4c920:	add	r8, sp, #348	; 0x15c
   4c924:	mov	r3, sl
   4c928:	mov	r2, #0
   4c92c:	mov	r1, r8
   4c930:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c934:	mov	r9, #0
   4c938:	str	r9, [sp, #68]	; 0x44
   4c93c:	str	r0, [sp, #64]	; 0x40
   4c940:	ldrd	r2, [sp, #64]	; 0x40
   4c944:	mov	r6, r0
   4c948:	mov	r7, r1
   4c94c:	cmp	r1, r3
   4c950:	cmpeq	r0, r2
   4c954:	beq	4c998 <__assert_fail@plt+0x3b78c>
   4c958:	ldr	r1, [pc, #916]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4c95c:	mov	r2, #5
   4c960:	mov	r0, r9
   4c964:	bl	10f90 <dcgettext@plt>
   4c968:	mov	r2, r6
   4c96c:	mov	r3, r7
   4c970:	str	r9, [sp]
   4c974:	str	r0, [sp, #24]
   4c978:	ldr	r0, [pc, #888]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4c97c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4c980:	ldr	r1, [sp, #24]
   4c984:	ldr	r2, [pc, #768]	; 4cc8c <__assert_fail@plt+0x3ba80>
   4c988:	mov	r3, r0
   4c98c:	mov	r0, r1
   4c990:	ldr	r1, [pc, #872]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4c994:	bl	548ac <error@@Base>
   4c998:	ldr	r3, [sp, #348]	; 0x15c
   4c99c:	ldr	ip, [sp, #344]	; 0x158
   4c9a0:	mov	r1, r8
   4c9a4:	add	ip, ip, r3
   4c9a8:	mov	r0, ip
   4c9ac:	mov	r3, sl
   4c9b0:	mov	r2, #0
   4c9b4:	b	4c6b0 <__assert_fail@plt+0x3b4a4>
   4c9b8:	mov	r3, sl
   4c9bc:	mov	r2, #0
   4c9c0:	add	r1, sp, #348	; 0x15c
   4c9c4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4c9c8:	mov	r8, #0
   4c9cc:	str	r8, [sp, #60]	; 0x3c
   4c9d0:	str	r0, [sp, #56]	; 0x38
   4c9d4:	ldrd	r2, [sp, #56]	; 0x38
   4c9d8:	mov	r6, r0
   4c9dc:	mov	r7, r1
   4c9e0:	cmp	r1, r3
   4c9e4:	cmpeq	r0, r2
   4c9e8:	beq	4c6b8 <__assert_fail@plt+0x3b4ac>
   4c9ec:	ldr	r1, [pc, #768]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4c9f0:	mov	r2, #5
   4c9f4:	mov	r0, r8
   4c9f8:	bl	10f90 <dcgettext@plt>
   4c9fc:	mov	r2, r6
   4ca00:	mov	r3, r7
   4ca04:	str	r8, [sp]
   4ca08:	mov	r9, r0
   4ca0c:	ldr	r0, [pc, #740]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4ca10:	bl	3c744 <__assert_fail@plt+0x2b538>
   4ca14:	ldr	r2, [pc, #628]	; 4cc90 <__assert_fail@plt+0x3ba84>
   4ca18:	ldr	r1, [pc, #736]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4ca1c:	mov	r3, r0
   4ca20:	mov	r0, r9
   4ca24:	bl	548ac <error@@Base>
   4ca28:	b	4c6b8 <__assert_fail@plt+0x3b4ac>
   4ca2c:	mov	r3, sl
   4ca30:	mov	r2, #0
   4ca34:	add	r1, sp, #348	; 0x15c
   4ca38:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4ca3c:	mov	r8, #0
   4ca40:	str	r8, [sp, #52]	; 0x34
   4ca44:	str	r0, [sp, #48]	; 0x30
   4ca48:	ldrd	r2, [sp, #48]	; 0x30
   4ca4c:	mov	r6, r0
   4ca50:	mov	r7, r1
   4ca54:	cmp	r3, r1
   4ca58:	cmpeq	r2, r0
   4ca5c:	beq	4c6b8 <__assert_fail@plt+0x3b4ac>
   4ca60:	ldr	r1, [pc, #652]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4ca64:	mov	r2, #5
   4ca68:	mov	r0, r8
   4ca6c:	bl	10f90 <dcgettext@plt>
   4ca70:	mov	r2, r6
   4ca74:	mov	r3, r7
   4ca78:	str	r8, [sp]
   4ca7c:	mov	r9, r0
   4ca80:	ldr	r0, [pc, #624]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4ca84:	bl	3c744 <__assert_fail@plt+0x2b538>
   4ca88:	ldr	r2, [pc, #516]	; 4cc94 <__assert_fail@plt+0x3ba88>
   4ca8c:	ldr	r1, [pc, #620]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4ca90:	mov	r3, r0
   4ca94:	mov	r0, r9
   4ca98:	bl	548ac <error@@Base>
   4ca9c:	b	4c6b8 <__assert_fail@plt+0x3b4ac>
   4caa0:	mov	r3, sl
   4caa4:	mov	r2, #0
   4caa8:	add	r1, sp, #348	; 0x15c
   4caac:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4cab0:	mov	r8, #0
   4cab4:	str	r8, [sp, #44]	; 0x2c
   4cab8:	str	r0, [sp, #40]	; 0x28
   4cabc:	ldrd	r2, [sp, #40]	; 0x28
   4cac0:	mov	r6, r0
   4cac4:	mov	r7, r1
   4cac8:	cmp	r3, r1
   4cacc:	cmpeq	r2, r0
   4cad0:	beq	4c6b8 <__assert_fail@plt+0x3b4ac>
   4cad4:	ldr	r1, [pc, #536]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4cad8:	mov	r2, #5
   4cadc:	mov	r0, r8
   4cae0:	bl	10f90 <dcgettext@plt>
   4cae4:	mov	r2, r6
   4cae8:	mov	r3, r7
   4caec:	str	r8, [sp]
   4caf0:	mov	r9, r0
   4caf4:	ldr	r0, [pc, #508]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4caf8:	bl	3c744 <__assert_fail@plt+0x2b538>
   4cafc:	ldr	r2, [pc, #404]	; 4cc98 <__assert_fail@plt+0x3ba8c>
   4cb00:	ldr	r1, [pc, #504]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4cb04:	mov	r3, r0
   4cb08:	mov	r0, r9
   4cb0c:	bl	548ac <error@@Base>
   4cb10:	b	4c6b8 <__assert_fail@plt+0x3b4ac>
   4cb14:	add	r8, sp, #348	; 0x15c
   4cb18:	mov	r3, sl
   4cb1c:	mov	r2, #0
   4cb20:	mov	r1, r8
   4cb24:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4cb28:	mov	r9, #0
   4cb2c:	str	r9, [sp, #36]	; 0x24
   4cb30:	str	r0, [sp, #32]
   4cb34:	ldrd	r2, [sp, #32]
   4cb38:	mov	r6, r0
   4cb3c:	mov	r7, r1
   4cb40:	cmp	r3, r1
   4cb44:	cmpeq	r2, r0
   4cb48:	beq	4c998 <__assert_fail@plt+0x3b78c>
   4cb4c:	ldr	r1, [pc, #416]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4cb50:	mov	r2, #5
   4cb54:	mov	r0, r9
   4cb58:	bl	10f90 <dcgettext@plt>
   4cb5c:	mov	r2, r6
   4cb60:	mov	r3, r7
   4cb64:	str	r9, [sp]
   4cb68:	str	r0, [sp, #24]
   4cb6c:	ldr	r0, [pc, #388]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4cb70:	bl	3c744 <__assert_fail@plt+0x2b538>
   4cb74:	ldr	r1, [sp, #24]
   4cb78:	ldr	r2, [pc, #284]	; 4cc9c <__assert_fail@plt+0x3ba90>
   4cb7c:	mov	r3, r0
   4cb80:	mov	r0, r1
   4cb84:	ldr	r1, [pc, #372]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4cb88:	bl	548ac <error@@Base>
   4cb8c:	b	4c998 <__assert_fail@plt+0x3b78c>
   4cb90:	add	r2, r2, #5
   4cb94:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4cb98:	add	r2, r2, #3
   4cb9c:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4cba0:	add	r2, r2, #2
   4cba4:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4cba8:	ldr	r3, [sp, #116]	; 0x74
   4cbac:	add	r2, r0, r3
   4cbb0:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4cbb4:	mov	r1, r6
   4cbb8:	mov	r0, r5
   4cbbc:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4cbc0:	cmp	r0, #0
   4cbc4:	bge	4c6dc <__assert_fail@plt+0x3b4d0>
   4cbc8:	b	4c6ec <__assert_fail@plt+0x3b4e0>
   4cbcc:	add	r8, sp, #348	; 0x15c
   4cbd0:	mov	r3, sl
   4cbd4:	mov	r1, r8
   4cbd8:	mov	r2, #0
   4cbdc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4cbe0:	mov	r3, #0
   4cbe4:	str	r3, [sp, #108]	; 0x6c
   4cbe8:	str	r0, [sp, #104]	; 0x68
   4cbec:	mov	r6, r0
   4cbf0:	mov	r7, r1
   4cbf4:	ldrd	r0, [sp, #104]	; 0x68
   4cbf8:	cmp	r1, r7
   4cbfc:	cmpeq	r0, r6
   4cc00:	beq	4c998 <__assert_fail@plt+0x3b78c>
   4cc04:	ldr	r1, [pc, #232]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4cc08:	mov	r2, #5
   4cc0c:	mov	r0, r3
   4cc10:	bl	10f90 <dcgettext@plt>
   4cc14:	mov	r3, #0
   4cc18:	str	r3, [sp]
   4cc1c:	mov	r2, r6
   4cc20:	mov	r3, r7
   4cc24:	mov	r9, r0
   4cc28:	ldr	r0, [pc, #200]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4cc2c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4cc30:	ldr	r2, [pc, #104]	; 4cca0 <__assert_fail@plt+0x3ba94>
   4cc34:	ldr	r1, [pc, #196]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4cc38:	mov	r3, r0
   4cc3c:	mov	r0, r9
   4cc40:	bl	548ac <error@@Base>
   4cc44:	b	4c998 <__assert_fail@plt+0x3b78c>
   4cc48:	mov	r2, r0
   4cc4c:	b	4c1d4 <__assert_fail@plt+0x3afc8>
   4cc50:	strdeq	r8, [r6], -ip
   4cc54:	ldrdeq	r1, [r8], -r8
   4cc58:	andeq	lr, r9, ip, lsr #26
   4cc5c:	andeq	r1, r8, r8, ror #31
   4cc60:	andeq	lr, r9, ip, asr sp
   4cc64:			; <UNDEFINED> instruction: 0x0007d2bc
   4cc68:	andeq	r2, r8, ip, lsr #32
   4cc6c:	andeq	lr, r9, r8, asr #26
   4cc70:	andeq	r2, r8, r4, lsr r0
   4cc74:	strdeq	r2, [r8], -ip
   4cc78:	andeq	r1, r0, r7, lsr #29
   4cc7c:	muleq	r0, r7, lr
   4cc80:	muleq	r0, r8, lr
   4cc84:	andeq	r1, r0, fp, lsl #29
   4cc88:	andeq	r2, r8, r8, lsr #4
   4cc8c:	andeq	r1, r0, fp, ror lr
   4cc90:	andeq	r1, r0, r6, ror lr
   4cc94:	andeq	r1, r0, r1, ror lr
   4cc98:	andeq	r1, r0, ip, ror #28
   4cc9c:	andeq	r1, r0, r6, ror #28
   4cca0:			; <UNDEFINED> instruction: 0x00001eba
   4cca4:	strdeq	r1, [r0], -r3
   4cca8:	muleq	r8, r4, r2
   4ccac:	andeq	r2, r0, pc, ror r0
   4ccb0:	andeq	r2, r0, r5, lsl #1
   4ccb4:	andeq	r2, r8, r8, lsl #13
   4ccb8:	andeq	r2, r0, r4, lsr #32
   4ccbc:	andeq	r2, r0, r5, lsr #32
   4ccc0:	andeq	fp, r6, ip, ror #2
   4ccc4:	andeq	r2, r8, r0, lsr #11
   4ccc8:			; <UNDEFINED> instruction: 0x000826b0
   4cccc:	andeq	r2, r0, ip, asr #32
   4ccd0:	andeq	r1, r0, sl, asr #30
   4ccd4:	andeq	r1, r0, fp, asr #30
   4ccd8:	andeq	r2, r8, r4, asr r3
   4ccdc:	andeq	r2, r8, r0, lsr r3
   4cce0:	andeq	r1, r0, r5, ror #31
   4cce4:			; <UNDEFINED> instruction: 0x000824bc
   4cce8:	ldrdeq	r1, [r0], -ip
   4ccec:	muleq	r8, ip, r4
   4ccf0:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   4ccf4:	andeq	pc, r7, r4, lsr #25
   4ccf8:	andeq	r3, r6, ip, asr #17
   4ccfc:	muleq	r0, sp, pc	; <UNPREDICTABLE>
   4cd00:	andeq	lr, r7, r8, lsl #20
   4cd04:	andeq	r2, r8, r4, lsl #8
   4cd08:	sub	r2, r3, #1
   4cd0c:	cmp	r2, #191	; 0xbf
   4cd10:	ldrls	pc, [pc, r2, lsl #2]
   4cd14:	b	4e7a8 <__assert_fail@plt+0x3d59c>
   4cd18:	strdeq	lr, [r4], -r8
   4cd1c:	andeq	lr, r4, r4, lsr #14
   4cd20:	andeq	lr, r4, r4, asr #12
   4cd24:	ldrdeq	sp, [r4], -r8
   4cd28:	andeq	sp, r4, r0, ror #12
   4cd2c:	andeq	sp, r4, r4, asr #29
   4cd30:	andeq	sp, r4, r4, ror #27
   4cd34:	andeq	lr, r4, r4, lsl r5
   4cd38:	andeq	sp, r4, r0, ror fp
   4cd3c:	andeq	sp, r4, r8, asr #21
   4cd40:	andeq	sp, r4, r4, lsl sl
   4cd44:	andeq	sp, r4, r0, lsr #18
   4cd48:	andeq	sp, r4, ip, asr r8
   4cd4c:	andeq	lr, r4, r4, asr #9
   4cd50:	muleq	r4, r0, r2
   4cd54:	andeq	lr, r4, r0, asr r3
   4cd58:	andeq	sp, r4, ip, ror #25
   4cd5c:	andeq	lr, r4, r8
   4cd60:	andeq	sp, r4, r4, lsr #31
   4cd64:	andeq	lr, r4, r8, lsl r1
   4cd68:	andeq	sp, r4, r4, asr r5
   4cd6c:			; <UNDEFINED> instruction: 0x0004d3b8
   4cd70:	andeq	lr, r4, r8, lsr #15
   4cd74:	andeq	lr, r4, r8, lsr #15
   4cd78:	andeq	lr, r4, r8, lsr #15
   4cd7c:	andeq	lr, r4, r8, lsr #15
   4cd80:	andeq	lr, r4, r8, lsr #15
   4cd84:	andeq	lr, r4, r8, lsr #15
   4cd88:	andeq	sp, r4, r4, lsl #6
   4cd8c:	andeq	lr, r4, r8, lsr #15
   4cd90:	andeq	lr, r4, r8, lsr #15
   4cd94:	andeq	lr, r4, r8, lsr #15
   4cd98:	andeq	lr, r4, r8, lsr #15
   4cd9c:	andeq	lr, r4, r8, lsr #15
   4cda0:	andeq	lr, r4, r8, lsr #15
   4cda4:	andeq	lr, r4, r8, lsr #15
   4cda8:	andeq	lr, r4, r8, lsr #15
   4cdac:	andeq	lr, r4, r8, lsr #15
   4cdb0:	andeq	lr, r4, r8, lsr #15
   4cdb4:	andeq	lr, r4, r8, lsr #15
   4cdb8:	andeq	lr, r4, r8, lsr #15
   4cdbc:	andeq	lr, r4, r8, lsr #15
   4cdc0:	andeq	lr, r4, r8, lsr #15
   4cdc4:	andeq	lr, r4, r8, lsr #15
   4cdc8:	andeq	sp, r4, r4, lsr #10
   4cdcc:	andeq	sp, r4, r0, asr r1
   4cdd0:	strdeq	sp, [r4], -r4
   4cdd4:	andeq	lr, r4, r8, lsr #15
   4cdd8:	andeq	lr, r4, r8, lsr #15
   4cddc:	andeq	lr, r4, r8, lsr #15
   4cde0:	andeq	lr, r4, r8, lsr #15
   4cde4:	andeq	lr, r4, r8, lsr #15
   4cde8:	andeq	lr, r4, r8, lsr #15
   4cdec:	andeq	lr, r4, r8, lsr #15
   4cdf0:	andeq	lr, r4, r8, lsr #15
   4cdf4:	andeq	lr, r4, r8, lsr #15
   4cdf8:	andeq	lr, r4, r8, lsr #15
   4cdfc:	andeq	lr, r4, r8, lsr #15
   4ce00:	andeq	lr, r4, r8, lsr #15
   4ce04:	andeq	lr, r4, r8, lsr #15
   4ce08:	andeq	lr, r4, r8, lsr #15
   4ce0c:	andeq	lr, r4, r8, lsr #15
   4ce10:	andeq	lr, r4, r8, lsr #15
   4ce14:	andeq	sp, r4, r8, lsl #2
   4ce18:	andeq	lr, r4, r8, lsr #15
   4ce1c:	andeq	lr, r4, r8, lsr #15
   4ce20:	andeq	lr, r4, r8, lsr #15
   4ce24:	andeq	lr, r4, r8, lsr #15
   4ce28:	andeq	lr, r4, r8, lsr #15
   4ce2c:	andeq	lr, r4, r8, lsr #15
   4ce30:	andeq	lr, r4, r8, lsr #15
   4ce34:	andeq	lr, r4, r8, lsr #15
   4ce38:	andeq	lr, r4, r8, lsr #15
   4ce3c:	andeq	lr, r4, r8, lsr #15
   4ce40:	andeq	lr, r4, r8, lsr #15
   4ce44:	andeq	lr, r4, r8, lsr #15
   4ce48:	andeq	lr, r4, r8, lsr #15
   4ce4c:	andeq	lr, r4, r8, lsr #15
   4ce50:	andeq	lr, r4, r8, lsr #15
   4ce54:	andeq	lr, r4, r8, lsr #15
   4ce58:	andeq	lr, r4, r8, lsr #15
   4ce5c:	andeq	lr, r4, r8, lsr #15
   4ce60:	andeq	lr, r4, r8, lsr #15
   4ce64:	andeq	lr, r4, r8, lsr #15
   4ce68:	andeq	lr, r4, r8, lsr #15
   4ce6c:	andeq	lr, r4, r8, lsr #15
   4ce70:	andeq	lr, r4, r8, lsr #15
   4ce74:	andeq	lr, r4, r8, lsr #15
   4ce78:	andeq	lr, r4, r8, lsr #15
   4ce7c:	andeq	lr, r4, r8, lsr #15
   4ce80:	andeq	lr, r4, r8, lsr #15
   4ce84:	andeq	lr, r4, r8, lsr #15
   4ce88:	andeq	lr, r4, r8, lsr #15
   4ce8c:	andeq	lr, r4, r8, lsr #15
   4ce90:	andeq	lr, r4, r8, lsr #15
   4ce94:	andeq	lr, r4, r8, lsr #15
   4ce98:	andeq	lr, r4, r8, lsr #15
   4ce9c:	andeq	lr, r4, r8, lsr #15
   4cea0:	andeq	lr, r4, r8, lsr #15
   4cea4:	andeq	lr, r4, r8, lsr #15
   4cea8:	andeq	lr, r4, r8, lsr #15
   4ceac:	andeq	lr, r4, r8, lsr #15
   4ceb0:	andeq	lr, r4, r8, lsr #15
   4ceb4:	andeq	lr, r4, r8, lsr #15
   4ceb8:	andeq	lr, r4, r8, lsr #15
   4cebc:	andeq	lr, r4, r8, lsr #15
   4cec0:	andeq	lr, r4, r8, lsr #15
   4cec4:	andeq	lr, r4, r8, lsr #15
   4cec8:	andeq	lr, r4, r8, lsr #15
   4cecc:	andeq	lr, r4, r8, lsr #15
   4ced0:	andeq	lr, r4, r8, lsr #15
   4ced4:	andeq	lr, r4, r8, lsr #15
   4ced8:	andeq	lr, r4, r8, lsr #15
   4cedc:	andeq	lr, r4, r8, lsr #15
   4cee0:	andeq	lr, r4, r8, lsr #15
   4cee4:	andeq	lr, r4, r8, lsr #15
   4cee8:	andeq	lr, r4, r8, lsr #15
   4ceec:	andeq	lr, r4, r8, lsr #15
   4cef0:	andeq	lr, r4, r8, lsr #15
   4cef4:	andeq	lr, r4, r8, lsr #15
   4cef8:	andeq	lr, r4, r8, lsr #15
   4cefc:	andeq	lr, r4, r8, lsr #15
   4cf00:	andeq	lr, r4, r8, lsr #15
   4cf04:	andeq	lr, r4, r8, lsr #15
   4cf08:	andeq	lr, r4, r8, lsr #15
   4cf0c:	andeq	lr, r4, r8, lsr #15
   4cf10:	andeq	lr, r4, r8, lsr #15
   4cf14:	andeq	sp, r4, r8, lsl r0
   4cf18:	andeq	lr, r4, r8, lsr #15
   4cf1c:	andeq	lr, r4, r8, lsr #15
   4cf20:	andeq	lr, r4, r8, lsr #15
   4cf24:	andeq	lr, r4, r8, lsr #15
   4cf28:	andeq	lr, r4, r8, lsr #15
   4cf2c:	andeq	lr, r4, r8, lsr #15
   4cf30:	andeq	lr, r4, r8, lsr #15
   4cf34:	andeq	lr, r4, r8, lsr #15
   4cf38:	andeq	lr, r4, r8, lsr #15
   4cf3c:	andeq	lr, r4, r8, lsr #15
   4cf40:	andeq	lr, r4, r8, lsr #15
   4cf44:	andeq	lr, r4, r8, lsr #15
   4cf48:	andeq	lr, r4, r8, lsr #15
   4cf4c:	andeq	lr, r4, r8, lsr #15
   4cf50:	andeq	lr, r4, r8, lsr #15
   4cf54:	andeq	lr, r4, r8, lsr #15
   4cf58:	andeq	lr, r4, r8, lsr #15
   4cf5c:	andeq	lr, r4, r8, lsr #15
   4cf60:	andeq	lr, r4, r8, lsr #15
   4cf64:	andeq	lr, r4, r8, lsr #15
   4cf68:	andeq	lr, r4, r8, lsr #15
   4cf6c:	andeq	lr, r4, r8, lsr #15
   4cf70:	andeq	lr, r4, r8, lsr #15
   4cf74:	andeq	lr, r4, r8, lsr #15
   4cf78:	andeq	lr, r4, r8, lsr #15
   4cf7c:	andeq	lr, r4, r8, lsr #15
   4cf80:	andeq	lr, r4, r8, lsr #15
   4cf84:	andeq	lr, r4, r8, lsr #15
   4cf88:	andeq	lr, r4, r8, lsr #15
   4cf8c:	andeq	lr, r4, r8, lsr #15
   4cf90:	andeq	lr, r4, r8, lsr #15
   4cf94:	andeq	lr, r4, r8, lsr #15
   4cf98:	andeq	lr, r4, r8, lsr #15
   4cf9c:	andeq	lr, r4, r8, lsr #15
   4cfa0:	andeq	lr, r4, r8, lsr #15
   4cfa4:	andeq	lr, r4, r8, lsr #15
   4cfa8:	andeq	lr, r4, r8, lsr #15
   4cfac:	andeq	lr, r4, r8, lsr #15
   4cfb0:	andeq	lr, r4, r8, lsr #15
   4cfb4:	andeq	lr, r4, r8, lsr #15
   4cfb8:	andeq	lr, r4, r8, lsr #15
   4cfbc:	andeq	lr, r4, r8, lsr #15
   4cfc0:	andeq	lr, r4, r8, lsr #15
   4cfc4:	andeq	lr, r4, r8, lsr #15
   4cfc8:	andeq	lr, r4, r8, lsr #15
   4cfcc:	andeq	lr, r4, r8, lsr #15
   4cfd0:	andeq	lr, r4, r8, lsr #15
   4cfd4:	andeq	lr, r4, r8, lsr #15
   4cfd8:	andeq	lr, r4, r8, lsr #15
   4cfdc:	andeq	lr, r4, r8, lsr #15
   4cfe0:	andeq	lr, r4, r8, lsr #15
   4cfe4:	andeq	lr, r4, r8, lsr #15
   4cfe8:	andeq	lr, r4, r8, lsr #15
   4cfec:	andeq	lr, r4, r8, lsr #15
   4cff0:	andeq	lr, r4, r8, lsr #15
   4cff4:	andeq	lr, r4, r8, lsr #15
   4cff8:	andeq	lr, r4, r8, lsr #15
   4cffc:	andeq	lr, r4, r8, lsr #15
   4d000:	andeq	lr, r4, r8, lsr #15
   4d004:	andeq	lr, r4, r8, lsr #15
   4d008:	andeq	lr, r4, r8, lsr #15
   4d00c:	andeq	lr, r4, r8, lsr #15
   4d010:	andeq	lr, r4, r8, lsr #15
   4d014:	andeq	lr, r4, r8, asr #13
   4d018:	mov	r3, sl
   4d01c:	mov	r2, #0
   4d020:	add	r1, sp, #348	; 0x15c
   4d024:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d028:	mov	r4, #0
   4d02c:	str	r4, [sp, #180]	; 0xb4
   4d030:	str	r0, [sp, #176]	; 0xb0
   4d034:	ldrd	r2, [sp, #176]	; 0xb0
   4d038:	mov	r6, r0
   4d03c:	mov	r7, r1
   4d040:	cmp	r3, r1
   4d044:	cmpeq	r2, r0
   4d048:	beq	4d088 <__assert_fail@plt+0x3be7c>
   4d04c:	ldr	r1, [pc, #-864]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d050:	mov	r2, #5
   4d054:	mov	r0, r4
   4d058:	bl	10f90 <dcgettext@plt>
   4d05c:	mov	r2, r6
   4d060:	mov	r3, r7
   4d064:	str	r4, [sp]
   4d068:	mov	r9, r0
   4d06c:	ldr	r0, [pc, #-892]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d070:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d074:	ldr	r2, [pc, #-984]	; 4cca4 <__assert_fail@plt+0x3ba98>
   4d078:	ldr	r1, [pc, #-896]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d07c:	mov	r3, r0
   4d080:	mov	r0, r9
   4d084:	bl	548ac <error@@Base>
   4d088:	ldr	r3, [r5, #8]
   4d08c:	ldr	r4, [sp, #344]	; 0x158
   4d090:	ldr	r2, [sp, #348]	; 0x15c
   4d094:	cmp	r3, r8
   4d098:	ldr	r3, [sp, #112]	; 0x70
   4d09c:	add	r4, r4, r2
   4d0a0:	str	r4, [sp, #344]	; 0x158
   4d0a4:	ldr	r1, [r3]
   4d0a8:	bhi	4f338 <__assert_fail@plt+0x3e12c>
   4d0ac:	cmp	r1, #0
   4d0b0:	beq	4d0c4 <__assert_fail@plt+0x3beb8>
   4d0b4:	ldr	r3, [sp, #132]	; 0x84
   4d0b8:	ldrb	r3, [r3]
   4d0bc:	cmp	r3, #0
   4d0c0:	beq	4f340 <__assert_fail@plt+0x3e134>
   4d0c4:	mov	r1, #0
   4d0c8:	mov	r0, r8
   4d0cc:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4d0d0:	ldr	r3, [r5, #28]
   4d0d4:	ldr	r4, [sp, #132]	; 0x84
   4d0d8:	mul	r3, r3, r6
   4d0dc:	mov	r1, r4
   4d0e0:	mov	r2, r0
   4d0e4:	ldr	r0, [pc, #-1092]	; 4cca8 <__assert_fail@plt+0x3ba9c>
   4d0e8:	bl	10f24 <printf@plt>
   4d0ec:	ldrb	r3, [r4]
   4d0f0:	cmp	r3, #0
   4d0f4:	beq	4f764 <__assert_fail@plt+0x3e558>
   4d0f8:	mov	r3, #0
   4d0fc:	ldr	r4, [sp, #344]	; 0x158
   4d100:	str	r3, [sp, #24]
   4d104:	b	4c534 <__assert_fail@plt+0x3b328>
   4d108:	ldr	r3, [sp, #112]	; 0x70
   4d10c:	ldr	r0, [r3]
   4d110:	cmp	r0, #0
   4d114:	beq	4f370 <__assert_fail@plt+0x3e164>
   4d118:	add	r2, sp, #352	; 0x160
   4d11c:	add	r1, sp, #360	; 0x168
   4d120:	mov	r0, r5
   4d124:	bl	3caf8 <__assert_fail@plt+0x2b8ec>
   4d128:	ldr	r1, [r5, #24]
   4d12c:	ldrd	r2, [r5, #32]
   4d130:	ldr	r4, [sp, #344]	; 0x158
   4d134:	mul	r8, r1, r8
   4d138:	adds	r0, r2, r8
   4d13c:	adc	r1, r3, #0
   4d140:	mov	r3, #0
   4d144:	str	r3, [sp, #24]
   4d148:	strd	r0, [r5, #32]
   4d14c:	b	4c534 <__assert_fail@plt+0x3b328>
   4d150:	mov	r3, sl
   4d154:	mov	r2, #0
   4d158:	add	r1, sp, #348	; 0x15c
   4d15c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d160:	add	r3, sp, #312	; 0x138
   4d164:	mov	r4, #0
   4d168:	str	r4, [sp, #316]	; 0x13c
   4d16c:	str	r0, [sp, #312]	; 0x138
   4d170:	ldrd	r2, [r3]
   4d174:	mov	r6, r0
   4d178:	mov	r7, r1
   4d17c:	cmp	r3, r1
   4d180:	cmpeq	r2, r0
   4d184:	beq	4d1c4 <__assert_fail@plt+0x3bfb8>
   4d188:	ldr	r1, [pc, #-1180]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d18c:	mov	r2, #5
   4d190:	mov	r0, r4
   4d194:	bl	10f90 <dcgettext@plt>
   4d198:	mov	r2, r6
   4d19c:	mov	r3, r7
   4d1a0:	str	r4, [sp]
   4d1a4:	mov	r8, r0
   4d1a8:	ldr	r0, [pc, #-1208]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d1ac:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d1b0:	ldr	r2, [pc, #-1292]	; 4ccac <__assert_fail@plt+0x3baa0>
   4d1b4:	ldr	r1, [pc, #-1212]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d1b8:	mov	r3, r0
   4d1bc:	mov	r0, r8
   4d1c0:	bl	548ac <error@@Base>
   4d1c4:	ldr	r2, [sp, #112]	; 0x70
   4d1c8:	ldr	r4, [sp, #344]	; 0x158
   4d1cc:	ldr	r3, [sp, #348]	; 0x15c
   4d1d0:	ldr	r2, [r2]
   4d1d4:	add	r4, r4, r3
   4d1d8:	cmp	r2, #0
   4d1dc:	str	r2, [sp, #24]
   4d1e0:	str	r4, [sp, #344]	; 0x158
   4d1e4:	beq	4f530 <__assert_fail@plt+0x3e324>
   4d1e8:	mov	r3, #0
   4d1ec:	str	r3, [sp, #24]
   4d1f0:	b	4c534 <__assert_fail@plt+0x3b328>
   4d1f4:	add	r4, sp, #348	; 0x15c
   4d1f8:	mov	r3, sl
   4d1fc:	mov	r2, #0
   4d200:	mov	r1, r4
   4d204:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d208:	add	r3, sp, #320	; 0x140
   4d20c:	mov	r6, #0
   4d210:	str	r6, [sp, #324]	; 0x144
   4d214:	str	r0, [sp, #320]	; 0x140
   4d218:	ldrd	r2, [r3]
   4d21c:	mov	r8, r0
   4d220:	mov	r9, r1
   4d224:	cmp	r3, r1
   4d228:	cmpeq	r2, r0
   4d22c:	str	r0, [sp, #24]
   4d230:	beq	4d270 <__assert_fail@plt+0x3c064>
   4d234:	ldr	r1, [pc, #-1352]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d238:	mov	r2, #5
   4d23c:	mov	r0, r6
   4d240:	bl	10f90 <dcgettext@plt>
   4d244:	mov	r2, r8
   4d248:	mov	r3, r9
   4d24c:	str	r6, [sp]
   4d250:	mov	r7, r0
   4d254:	ldr	r0, [pc, #-1380]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d258:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d25c:	ldr	r2, [pc, #-1460]	; 4ccb0 <__assert_fail@plt+0x3baa4>
   4d260:	ldr	r1, [pc, #-1384]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d264:	mov	r3, r0
   4d268:	mov	r0, r7
   4d26c:	bl	548ac <error@@Base>
   4d270:	ldr	ip, [sp, #344]	; 0x158
   4d274:	ldr	r3, [sp, #348]	; 0x15c
   4d278:	mov	r2, #1
   4d27c:	add	ip, ip, r3
   4d280:	mov	r0, ip
   4d284:	mov	r3, sl
   4d288:	mov	r1, r4
   4d28c:	str	ip, [sp, #344]	; 0x158
   4d290:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d294:	ldr	r3, [sp, #344]	; 0x158
   4d298:	ldr	r2, [sp, #348]	; 0x15c
   4d29c:	mov	r1, r8
   4d2a0:	add	r3, r3, r2
   4d2a4:	str	r3, [sp, #344]	; 0x158
   4d2a8:	mov	r6, r0
   4d2ac:	mov	r0, r5
   4d2b0:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4d2b4:	rsbs	r6, r6, #0
   4d2b8:	ldr	r3, [sp, #112]	; 0x70
   4d2bc:	cmp	r0, #0
   4d2c0:	blt	4f3ec <__assert_fail@plt+0x3e1e0>
   4d2c4:	ldr	r1, [r3]
   4d2c8:	cmp	r1, #0
   4d2cc:	beq	4f80c <__assert_fail@plt+0x3e600>
   4d2d0:	ldr	r3, [r5, #28]
   4d2d4:	ldr	r2, [r5, #12]
   4d2d8:	lsl	r8, r8, #1
   4d2dc:	mov	r1, #128	; 0x80
   4d2e0:	mul	r6, r3, r6
   4d2e4:	ldr	r3, [r5, #16]
   4d2e8:	strh	r1, [r2, r8]
   4d2ec:	ldr	r2, [sp, #24]
   4d2f0:	ldr	r4, [sp, #344]	; 0x158
   4d2f4:	str	r6, [r3, r2, lsl #2]
   4d2f8:	mov	r3, #0
   4d2fc:	str	r3, [sp, #24]
   4d300:	b	4c534 <__assert_fail@plt+0x3b328>
   4d304:	add	r4, r4, #9
   4d308:	cmp	fp, r4
   4d30c:	bhi	4f214 <__assert_fail@plt+0x3e008>
   4d310:	cmp	r0, fp
   4d314:	bcs	4d328 <__assert_fail@plt+0x3c11c>
   4d318:	sub	r1, fp, r0
   4d31c:	sub	r3, r1, #1
   4d320:	cmp	r3, #7
   4d324:	bls	4f218 <__assert_fail@plt+0x3e00c>
   4d328:	mov	r6, #0
   4d32c:	mov	r4, r6
   4d330:	ldr	r3, [sp, #112]	; 0x70
   4d334:	add	r0, r0, #8
   4d338:	str	r0, [sp, #344]	; 0x158
   4d33c:	ldr	ip, [r3]
   4d340:	cmp	ip, #0
   4d344:	bne	4e808 <__assert_fail@plt+0x3d5fc>
   4d348:	ldr	r1, [r5, #24]
   4d34c:	ldrd	r2, [r5, #32]
   4d350:	ldrb	lr, [r5, #70]	; 0x46
   4d354:	umull	r8, r9, r1, r6
   4d358:	str	lr, [sp]
   4d35c:	mla	r9, r1, r4, r9
   4d360:	adds	r2, r8, r2
   4d364:	mov	r0, ip
   4d368:	adc	r3, r9, r3
   4d36c:	mul	r7, r6, r1
   4d370:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d374:	mov	r1, r7
   4d378:	mov	r2, r0
   4d37c:	ldr	r0, [pc, #-1744]	; 4ccb4 <__assert_fail@plt+0x3baa8>
   4d380:	bl	10f24 <printf@plt>
   4d384:	ldr	r0, [r5, #24]
   4d388:	ldr	r1, [r5, #32]
   4d38c:	umull	r6, r7, r0, r6
   4d390:	mla	r7, r0, r4, r7
   4d394:	ldr	r0, [r5, #36]	; 0x24
   4d398:	adds	r1, r1, r6
   4d39c:	adc	r3, r0, r7
   4d3a0:	str	r3, [r5, #36]	; 0x24
   4d3a4:	mov	r3, #0
   4d3a8:	str	r1, [r5, #32]
   4d3ac:	ldr	r4, [sp, #344]	; 0x158
   4d3b0:	str	r3, [sp, #24]
   4d3b4:	b	4c534 <__assert_fail@plt+0x3b328>
   4d3b8:	add	r4, sp, #348	; 0x15c
   4d3bc:	mov	r3, sl
   4d3c0:	mov	r2, #0
   4d3c4:	mov	r1, r4
   4d3c8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d3cc:	add	r3, sp, #280	; 0x118
   4d3d0:	mov	r6, #0
   4d3d4:	str	r6, [sp, #284]	; 0x11c
   4d3d8:	str	r0, [sp, #280]	; 0x118
   4d3dc:	ldrd	r2, [r3]
   4d3e0:	mov	r8, r0
   4d3e4:	mov	r9, r1
   4d3e8:	cmp	r3, r1
   4d3ec:	cmpeq	r2, r0
   4d3f0:	beq	4d430 <__assert_fail@plt+0x3c224>
   4d3f4:	ldr	r1, [pc, #-1800]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d3f8:	mov	r2, #5
   4d3fc:	mov	r0, r6
   4d400:	bl	10f90 <dcgettext@plt>
   4d404:	mov	r2, r8
   4d408:	mov	r3, r9
   4d40c:	str	r6, [sp]
   4d410:	mov	r7, r0
   4d414:	ldr	r0, [pc, #-1828]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d418:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d41c:	ldr	r2, [pc, #-1900]	; 4ccb8 <__assert_fail@plt+0x3baac>
   4d420:	ldr	r1, [pc, #-1832]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d424:	mov	r3, r0
   4d428:	mov	r0, r7
   4d42c:	bl	548ac <error@@Base>
   4d430:	ldr	ip, [sp, #344]	; 0x158
   4d434:	ldr	r3, [sp, #348]	; 0x15c
   4d438:	mov	r1, r4
   4d43c:	add	ip, ip, r3
   4d440:	mov	r2, #0
   4d444:	mov	r3, sl
   4d448:	mov	r0, ip
   4d44c:	str	ip, [sp, #344]	; 0x158
   4d450:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d454:	mov	r4, #0
   4d458:	str	r4, [sp, #156]	; 0x9c
   4d45c:	str	r0, [sp, #152]	; 0x98
   4d460:	ldrd	r2, [sp, #152]	; 0x98
   4d464:	mov	r6, r0
   4d468:	mov	r7, r1
   4d46c:	cmp	r3, r1
   4d470:	cmpeq	r2, r0
   4d474:	beq	4d4b8 <__assert_fail@plt+0x3c2ac>
   4d478:	ldr	r1, [pc, #-1932]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d47c:	mov	r2, #5
   4d480:	mov	r0, r4
   4d484:	bl	10f90 <dcgettext@plt>
   4d488:	mov	r2, r6
   4d48c:	mov	r3, r7
   4d490:	str	r4, [sp]
   4d494:	str	r0, [sp, #24]
   4d498:	ldr	r0, [pc, #-1960]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d49c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d4a0:	ldr	r1, [sp, #24]
   4d4a4:	ldr	r2, [pc, #-2032]	; 4ccbc <__assert_fail@plt+0x3bab0>
   4d4a8:	mov	r3, r0
   4d4ac:	mov	r0, r1
   4d4b0:	ldr	r1, [pc, #-1976]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d4b4:	bl	548ac <error@@Base>
   4d4b8:	ldr	r2, [sp, #348]	; 0x15c
   4d4bc:	ldr	r3, [sp, #344]	; 0x158
   4d4c0:	ldr	r1, [r5, #8]
   4d4c4:	add	r3, r3, r2
   4d4c8:	add	r4, r3, r6
   4d4cc:	cmp	r3, r4
   4d4d0:	movls	r2, #0
   4d4d4:	movhi	r2, #1
   4d4d8:	cmp	fp, r4
   4d4dc:	orrcc	r2, r2, #1
   4d4e0:	ldr	ip, [pc, #-2088]	; 4ccc0 <__assert_fail@plt+0x3bab4>
   4d4e4:	cmp	r3, fp
   4d4e8:	orrcs	r2, r2, #1
   4d4ec:	ldr	r0, [sp, #132]	; 0x84
   4d4f0:	cmp	r1, r8
   4d4f4:	movhi	r0, ip
   4d4f8:	cmp	r2, #0
   4d4fc:	str	r0, [sp, #24]
   4d500:	str	r3, [sp, #344]	; 0x158
   4d504:	beq	4f7d8 <__assert_fail@plt+0x3e5cc>
   4d508:	mov	r1, r6
   4d50c:	ldr	r0, [pc, #-2128]	; 4ccc4 <__assert_fail@plt+0x3bab8>
   4d510:	bl	10f24 <printf@plt>
   4d514:	mov	r3, #0
   4d518:	str	r3, [sp, #24]
   4d51c:	ldr	r4, [sp, #344]	; 0x158
   4d520:	b	4c534 <__assert_fail@plt+0x3b328>
   4d524:	ldr	r3, [sp, #112]	; 0x70
   4d528:	ldr	r3, [r3]
   4d52c:	cmp	r3, #0
   4d530:	str	r3, [sp, #24]
   4d534:	movne	r3, #0
   4d538:	movne	r4, r0
   4d53c:	strne	r3, [sp, #24]
   4d540:	bne	4c534 <__assert_fail@plt+0x3b328>
   4d544:	ldr	r0, [pc, #-2180]	; 4ccc8 <__assert_fail@plt+0x3babc>
   4d548:	bl	11014 <puts@plt>
   4d54c:	ldr	r4, [sp, #344]	; 0x158
   4d550:	b	4c534 <__assert_fail@plt+0x3b328>
   4d554:	add	r4, sp, #348	; 0x15c
   4d558:	mov	r3, sl
   4d55c:	mov	r2, #0
   4d560:	mov	r1, r4
   4d564:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d568:	add	r3, sp, #296	; 0x128
   4d56c:	mov	r9, #0
   4d570:	str	r9, [sp, #300]	; 0x12c
   4d574:	str	r0, [sp, #296]	; 0x128
   4d578:	ldrd	r2, [r3]
   4d57c:	mov	r6, r0
   4d580:	mov	r7, r1
   4d584:	cmp	r3, r1
   4d588:	cmpeq	r2, r0
   4d58c:	mov	r8, r0
   4d590:	beq	4d5d4 <__assert_fail@plt+0x3c3c8>
   4d594:	ldr	r1, [pc, #-2216]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d598:	mov	r2, #5
   4d59c:	mov	r0, r9
   4d5a0:	bl	10f90 <dcgettext@plt>
   4d5a4:	mov	r2, r6
   4d5a8:	mov	r3, r7
   4d5ac:	str	r9, [sp]
   4d5b0:	str	r0, [sp, #24]
   4d5b4:	ldr	r0, [pc, #-2244]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d5b8:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d5bc:	ldr	r1, [sp, #24]
   4d5c0:	ldr	r2, [pc, #-2300]	; 4cccc <__assert_fail@plt+0x3bac0>
   4d5c4:	mov	r3, r0
   4d5c8:	mov	r0, r1
   4d5cc:	ldr	r1, [pc, #-2260]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d5d0:	bl	548ac <error@@Base>
   4d5d4:	ldr	ip, [sp, #344]	; 0x158
   4d5d8:	ldr	r3, [sp, #348]	; 0x15c
   4d5dc:	mov	r1, r4
   4d5e0:	add	ip, ip, r3
   4d5e4:	mov	r0, ip
   4d5e8:	mov	r3, sl
   4d5ec:	mov	r2, #1
   4d5f0:	str	ip, [sp, #344]	; 0x158
   4d5f4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d5f8:	ldr	r3, [sp, #344]	; 0x158
   4d5fc:	ldr	r2, [sp, #348]	; 0x15c
   4d600:	mov	r1, r6
   4d604:	add	r3, r3, r2
   4d608:	str	r3, [sp, #344]	; 0x158
   4d60c:	mov	r4, r0
   4d610:	mov	r0, r5
   4d614:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4d618:	ldr	r3, [sp, #112]	; 0x70
   4d61c:	cmp	r0, #0
   4d620:	blt	4f440 <__assert_fail@plt+0x3e234>
   4d624:	ldr	r1, [r3]
   4d628:	cmp	r1, #0
   4d62c:	beq	4f850 <__assert_fail@plt+0x3e644>
   4d630:	ldr	r3, [r5, #28]
   4d634:	ldr	r1, [r5, #12]
   4d638:	ldr	r2, [r5, #16]
   4d63c:	mul	r3, r4, r3
   4d640:	lsl	r6, r6, #1
   4d644:	mov	r0, #20
   4d648:	strh	r0, [r1, r6]
   4d64c:	ldr	r4, [sp, #344]	; 0x158
   4d650:	str	r3, [r2, r8, lsl #2]
   4d654:	mov	r3, #0
   4d658:	str	r3, [sp, #24]
   4d65c:	b	4c534 <__assert_fail@plt+0x3b328>
   4d660:	add	r4, sp, #348	; 0x15c
   4d664:	mov	r3, sl
   4d668:	mov	r2, #0
   4d66c:	mov	r1, r4
   4d670:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d674:	mov	r8, #0
   4d678:	str	r8, [sp, #188]	; 0xbc
   4d67c:	str	r0, [sp, #184]	; 0xb8
   4d680:	ldrd	r2, [sp, #184]	; 0xb8
   4d684:	mov	r6, r0
   4d688:	mov	r7, r1
   4d68c:	cmp	r3, r1
   4d690:	cmpeq	r2, r0
   4d694:	str	r0, [sp, #116]	; 0x74
   4d698:	beq	4d6d8 <__assert_fail@plt+0x3c4cc>
   4d69c:	ldr	r1, [pc, #-2480]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d6a0:	mov	r2, #5
   4d6a4:	mov	r0, r8
   4d6a8:	bl	10f90 <dcgettext@plt>
   4d6ac:	mov	r2, r6
   4d6b0:	mov	r3, r7
   4d6b4:	str	r8, [sp]
   4d6b8:	mov	r9, r0
   4d6bc:	ldr	r0, [pc, #-2508]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d6c0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d6c4:	ldr	r2, [pc, #-2556]	; 4ccd0 <__assert_fail@plt+0x3bac4>
   4d6c8:	ldr	r1, [pc, #-2512]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d6cc:	mov	r3, r0
   4d6d0:	mov	r0, r9
   4d6d4:	bl	548ac <error@@Base>
   4d6d8:	ldr	ip, [sp, #344]	; 0x158
   4d6dc:	ldr	r3, [sp, #348]	; 0x15c
   4d6e0:	mov	r1, r4
   4d6e4:	add	ip, ip, r3
   4d6e8:	mov	r2, #0
   4d6ec:	mov	r3, sl
   4d6f0:	mov	r0, ip
   4d6f4:	str	ip, [sp, #344]	; 0x158
   4d6f8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d6fc:	mov	r4, #0
   4d700:	str	r4, [sp, #196]	; 0xc4
   4d704:	str	r0, [sp, #192]	; 0xc0
   4d708:	ldrd	r2, [sp, #192]	; 0xc0
   4d70c:	mov	r8, r0
   4d710:	mov	r9, r1
   4d714:	cmp	r1, r3
   4d718:	cmpeq	r0, r2
   4d71c:	beq	4d760 <__assert_fail@plt+0x3c554>
   4d720:	ldr	r1, [pc, #-2612]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d724:	mov	r2, #5
   4d728:	mov	r0, r4
   4d72c:	bl	10f90 <dcgettext@plt>
   4d730:	mov	r2, r8
   4d734:	mov	r3, r9
   4d738:	str	r4, [sp]
   4d73c:	str	r0, [sp, #24]
   4d740:	ldr	r0, [pc, #-2640]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d744:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d748:	ldr	r1, [sp, #24]
   4d74c:	ldr	r2, [pc, #-2688]	; 4ccd4 <__assert_fail@plt+0x3bac8>
   4d750:	mov	r3, r0
   4d754:	mov	r0, r1
   4d758:	ldr	r1, [pc, #-2656]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d75c:	bl	548ac <error@@Base>
   4d760:	ldr	r3, [r5, #8]
   4d764:	ldr	r4, [sp, #344]	; 0x158
   4d768:	ldr	r2, [sp, #348]	; 0x15c
   4d76c:	cmp	r3, r6
   4d770:	ldr	r3, [sp, #112]	; 0x70
   4d774:	add	r4, r4, r2
   4d778:	str	r4, [sp, #344]	; 0x158
   4d77c:	ldr	r1, [r3]
   4d780:	bhi	4f314 <__assert_fail@plt+0x3e108>
   4d784:	cmp	r1, #0
   4d788:	beq	4d79c <__assert_fail@plt+0x3c590>
   4d78c:	ldr	r3, [sp, #132]	; 0x84
   4d790:	ldrb	r3, [r3]
   4d794:	cmp	r3, #0
   4d798:	beq	4f31c <__assert_fail@plt+0x3e110>
   4d79c:	mov	r1, #0
   4d7a0:	mov	r0, r6
   4d7a4:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4d7a8:	ldr	r3, [r5, #28]
   4d7ac:	ldr	r4, [sp, #132]	; 0x84
   4d7b0:	mul	r3, r3, r8
   4d7b4:	mov	r1, r4
   4d7b8:	mov	r2, r0
   4d7bc:	ldr	r0, [pc, #-2796]	; 4ccd8 <__assert_fail@plt+0x3bacc>
   4d7c0:	bl	10f24 <printf@plt>
   4d7c4:	ldrb	r3, [r4]
   4d7c8:	cmp	r3, #0
   4d7cc:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4d7d0:	ldr	r4, [sp, #344]	; 0x158
   4d7d4:	b	4f31c <__assert_fail@plt+0x3e110>
   4d7d8:	add	r4, r4, #5
   4d7dc:	cmp	fp, r4
   4d7e0:	bhi	4f2f4 <__assert_fail@plt+0x3e0e8>
   4d7e4:	cmp	r0, fp
   4d7e8:	bcs	4d7fc <__assert_fail@plt+0x3c5f0>
   4d7ec:	sub	r1, fp, r0
   4d7f0:	sub	r3, r1, #1
   4d7f4:	cmp	r3, #7
   4d7f8:	bls	4f2f8 <__assert_fail@plt+0x3e0ec>
   4d7fc:	mov	r6, #0
   4d800:	mov	r4, r6
   4d804:	ldr	r3, [sp, #112]	; 0x70
   4d808:	add	r0, r0, #4
   4d80c:	str	r0, [sp, #344]	; 0x158
   4d810:	ldr	ip, [r3]
   4d814:	cmp	ip, #0
   4d818:	bne	4e808 <__assert_fail@plt+0x3d5fc>
   4d81c:	ldr	r1, [r5, #24]
   4d820:	ldrd	r2, [r5, #32]
   4d824:	ldrb	lr, [r5, #70]	; 0x46
   4d828:	umull	r8, r9, r1, r6
   4d82c:	str	lr, [sp]
   4d830:	mla	r9, r1, r4, r9
   4d834:	adds	r2, r8, r2
   4d838:	mov	r0, ip
   4d83c:	adc	r3, r9, r3
   4d840:	mul	r7, r6, r1
   4d844:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d848:	mov	r1, r7
   4d84c:	mov	r2, r0
   4d850:	ldr	r0, [pc, #-2940]	; 4ccdc <__assert_fail@plt+0x3bad0>
   4d854:	bl	10f24 <printf@plt>
   4d858:	b	4d384 <__assert_fail@plt+0x3c178>
   4d85c:	mov	r3, sl
   4d860:	mov	r2, #0
   4d864:	add	r1, sp, #348	; 0x15c
   4d868:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d86c:	add	r3, sp, #264	; 0x108
   4d870:	mov	r4, #0
   4d874:	str	r4, [sp, #268]	; 0x10c
   4d878:	str	r0, [sp, #264]	; 0x108
   4d87c:	ldrd	r2, [r3]
   4d880:	mov	r6, r0
   4d884:	mov	r7, r1
   4d888:	cmp	r3, r1
   4d88c:	cmpeq	r2, r0
   4d890:	str	r0, [r5, #48]	; 0x30
   4d894:	beq	4d8d4 <__assert_fail@plt+0x3c6c8>
   4d898:	ldr	r1, [pc, #-2988]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d89c:	mov	r2, #5
   4d8a0:	mov	r0, r4
   4d8a4:	bl	10f90 <dcgettext@plt>
   4d8a8:	mov	r2, r6
   4d8ac:	mov	r3, r7
   4d8b0:	str	r4, [sp]
   4d8b4:	mov	r8, r0
   4d8b8:	ldr	r0, [pc, #-3016]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d8bc:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d8c0:	ldr	r2, [pc, #-3048]	; 4cce0 <__assert_fail@plt+0x3bad4>
   4d8c4:	ldr	r1, [pc, #-3020]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d8c8:	mov	r3, r0
   4d8cc:	mov	r0, r8
   4d8d0:	bl	548ac <error@@Base>
   4d8d4:	ldr	r2, [sp, #112]	; 0x70
   4d8d8:	ldr	r4, [sp, #344]	; 0x158
   4d8dc:	ldr	r3, [sp, #348]	; 0x15c
   4d8e0:	ldr	r2, [r2]
   4d8e4:	add	r4, r4, r3
   4d8e8:	cmp	r2, #0
   4d8ec:	mov	r3, #0
   4d8f0:	str	r2, [sp, #24]
   4d8f4:	str	r4, [sp, #344]	; 0x158
   4d8f8:	strb	r3, [r5, #69]	; 0x45
   4d8fc:	bne	4d1ec <__assert_fail@plt+0x3bfe0>
   4d900:	mov	r1, r2
   4d904:	ldr	r0, [r5, #48]	; 0x30
   4d908:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4d90c:	mov	r1, r0
   4d910:	ldr	r0, [pc, #-3124]	; 4cce4 <__assert_fail@plt+0x3bad8>
   4d914:	bl	10f24 <printf@plt>
   4d918:	ldr	r4, [sp, #344]	; 0x158
   4d91c:	b	4c534 <__assert_fail@plt+0x3b328>
   4d920:	add	r4, sp, #348	; 0x15c
   4d924:	mov	r3, sl
   4d928:	mov	r2, #0
   4d92c:	mov	r1, r4
   4d930:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d934:	add	r3, sp, #256	; 0x100
   4d938:	mov	r8, #0
   4d93c:	str	r8, [sp, #260]	; 0x104
   4d940:	str	r0, [sp, #256]	; 0x100
   4d944:	ldrd	r2, [r3]
   4d948:	mov	r6, r0
   4d94c:	mov	r7, r1
   4d950:	cmp	r3, r1
   4d954:	cmpeq	r2, r0
   4d958:	str	r0, [r5, #48]	; 0x30
   4d95c:	beq	4d99c <__assert_fail@plt+0x3c790>
   4d960:	ldr	r1, [pc, #-3188]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4d964:	mov	r2, #5
   4d968:	mov	r0, r8
   4d96c:	bl	10f90 <dcgettext@plt>
   4d970:	mov	r2, r6
   4d974:	mov	r3, r7
   4d978:	str	r8, [sp]
   4d97c:	mov	r9, r0
   4d980:	ldr	r0, [pc, #-3216]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4d984:	bl	3c744 <__assert_fail@plt+0x2b538>
   4d988:	ldr	r2, [pc, #-3240]	; 4cce8 <__assert_fail@plt+0x3badc>
   4d98c:	ldr	r1, [pc, #-3220]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4d990:	mov	r3, r0
   4d994:	mov	r0, r9
   4d998:	bl	548ac <error@@Base>
   4d99c:	ldr	ip, [sp, #344]	; 0x158
   4d9a0:	ldr	r3, [sp, #348]	; 0x15c
   4d9a4:	mov	r1, r4
   4d9a8:	add	ip, ip, r3
   4d9ac:	mov	r2, #0
   4d9b0:	mov	r3, sl
   4d9b4:	mov	r0, ip
   4d9b8:	str	ip, [sp, #344]	; 0x158
   4d9bc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4d9c0:	ldr	r2, [sp, #112]	; 0x70
   4d9c4:	ldr	r4, [sp, #344]	; 0x158
   4d9c8:	ldr	r3, [sp, #348]	; 0x15c
   4d9cc:	ldr	r2, [r2]
   4d9d0:	add	r4, r4, r3
   4d9d4:	cmp	r2, #0
   4d9d8:	mov	r3, #0
   4d9dc:	str	r2, [sp, #24]
   4d9e0:	str	r4, [sp, #344]	; 0x158
   4d9e4:	strb	r3, [r5, #69]	; 0x45
   4d9e8:	strd	r0, [r5, #56]	; 0x38
   4d9ec:	bne	4d1ec <__assert_fail@plt+0x3bfe0>
   4d9f0:	mov	r1, r2
   4d9f4:	ldr	r0, [r5, #48]	; 0x30
   4d9f8:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4d9fc:	ldr	r2, [r5, #56]	; 0x38
   4da00:	mov	r1, r0
   4da04:	ldr	r0, [pc, #-3360]	; 4ccec <__assert_fail@plt+0x3bae0>
   4da08:	bl	10f24 <printf@plt>
   4da0c:	ldr	r4, [sp, #344]	; 0x158
   4da10:	b	4c534 <__assert_fail@plt+0x3b328>
   4da14:	ldr	r3, [sp, #112]	; 0x70
   4da18:	ldr	r3, [r3]
   4da1c:	cmp	r3, #0
   4da20:	beq	4f4e8 <__assert_fail@plt+0x3e2dc>
   4da24:	ldr	r3, [sp, #148]	; 0x94
   4da28:	cmp	r3, #0
   4da2c:	beq	4f510 <__assert_fail@plt+0x3e304>
   4da30:	ldr	ip, [sp, #148]	; 0x94
   4da34:	ldrd	r2, [ip, #56]	; 0x38
   4da38:	ldr	r0, [ip, #48]	; 0x30
   4da3c:	ldr	r1, [ip, #64]	; 0x40
   4da40:	ldr	r4, [ip]
   4da44:	str	r0, [r5, #48]	; 0x30
   4da48:	str	r1, [r5, #64]	; 0x40
   4da4c:	strd	r2, [r5, #56]	; 0x38
   4da50:	ldrb	r3, [ip, #69]	; 0x45
   4da54:	mov	r0, r5
   4da58:	strb	r3, [r5, #69]	; 0x45
   4da5c:	ldr	r1, [ip, #8]
   4da60:	sub	r1, r1, #1
   4da64:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4da68:	cmp	r0, #0
   4da6c:	blt	4f570 <__assert_fail@plt+0x3e364>
   4da70:	ldr	r6, [sp, #148]	; 0x94
   4da74:	ldr	r0, [r5, #12]
   4da78:	ldr	r2, [r6, #8]
   4da7c:	ldr	r1, [r6, #12]
   4da80:	lsl	r2, r2, #1
   4da84:	bl	10f6c <memcpy@plt>
   4da88:	ldr	r2, [r6, #8]
   4da8c:	ldr	r1, [r6, #16]
   4da90:	ldr	r0, [r5, #16]
   4da94:	lsl	r2, r2, #2
   4da98:	bl	10f6c <memcpy@plt>
   4da9c:	ldr	r0, [r6, #12]
   4daa0:	bl	10f54 <free@plt>
   4daa4:	ldr	r0, [r6, #16]
   4daa8:	bl	10f54 <free@plt>
   4daac:	mov	r0, r6
   4dab0:	bl	10f54 <free@plt>
   4dab4:	mov	r3, #0
   4dab8:	str	r4, [sp, #148]	; 0x94
   4dabc:	str	r3, [sp, #24]
   4dac0:	ldr	r4, [sp, #344]	; 0x158
   4dac4:	b	4c534 <__assert_fail@plt+0x3b328>
   4dac8:	ldr	r3, [sp, #112]	; 0x70
   4dacc:	ldr	r3, [r3]
   4dad0:	cmp	r3, #0
   4dad4:	beq	4f540 <__assert_fail@plt+0x3e334>
   4dad8:	mov	r0, #72	; 0x48
   4dadc:	bl	5861c <warn@@Base+0x384c>
   4dae0:	ldrd	r2, [r5, #56]	; 0x38
   4dae4:	ldr	r1, [r5, #64]	; 0x40
   4dae8:	mov	r6, r0
   4daec:	ldr	r0, [r5, #48]	; 0x30
   4daf0:	strd	r2, [r6, #56]	; 0x38
   4daf4:	str	r0, [r6, #48]	; 0x30
   4daf8:	str	r1, [r6, #64]	; 0x40
   4dafc:	ldrb	r3, [r5, #69]	; 0x45
   4db00:	mov	r2, #0
   4db04:	mov	r1, #2
   4db08:	strb	r3, [r6, #69]	; 0x45
   4db0c:	ldr	r3, [r5, #8]
   4db10:	str	r2, [sp, #24]
   4db14:	mov	r0, r3
   4db18:	str	r3, [r6, #8]
   4db1c:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   4db20:	mov	r1, #4
   4db24:	str	r0, [r6, #12]
   4db28:	ldr	r0, [r6, #8]
   4db2c:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   4db30:	ldr	r2, [r6, #8]
   4db34:	ldr	r1, [r5, #12]
   4db38:	lsl	r2, r2, #1
   4db3c:	str	r0, [r6, #16]
   4db40:	ldr	r0, [r6, #12]
   4db44:	bl	10f6c <memcpy@plt>
   4db48:	ldr	r2, [r6, #8]
   4db4c:	ldr	r0, [r6, #16]
   4db50:	ldr	r1, [r5, #16]
   4db54:	lsl	r2, r2, #2
   4db58:	bl	10f6c <memcpy@plt>
   4db5c:	ldr	r3, [sp, #148]	; 0x94
   4db60:	ldr	r4, [sp, #344]	; 0x158
   4db64:	str	r3, [r6]
   4db68:	str	r6, [sp, #148]	; 0x94
   4db6c:	b	4c534 <__assert_fail@plt+0x3b328>
   4db70:	add	r4, sp, #348	; 0x15c
   4db74:	mov	r3, sl
   4db78:	mov	r2, #0
   4db7c:	mov	r1, r4
   4db80:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4db84:	mov	r8, #0
   4db88:	str	r8, [sp, #244]	; 0xf4
   4db8c:	str	r0, [sp, #240]	; 0xf0
   4db90:	ldrd	r2, [sp, #240]	; 0xf0
   4db94:	mov	r6, r0
   4db98:	mov	r7, r1
   4db9c:	cmp	r3, r1
   4dba0:	cmpeq	r2, r0
   4dba4:	str	r0, [sp, #116]	; 0x74
   4dba8:	beq	4dbe8 <__assert_fail@plt+0x3c9dc>
   4dbac:	ldr	r1, [pc, #-3776]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4dbb0:	mov	r2, #5
   4dbb4:	mov	r0, r8
   4dbb8:	bl	10f90 <dcgettext@plt>
   4dbbc:	mov	r2, r6
   4dbc0:	mov	r3, r7
   4dbc4:	str	r8, [sp]
   4dbc8:	mov	r9, r0
   4dbcc:	ldr	r0, [pc, #-3804]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4dbd0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4dbd4:	ldr	r2, [pc, #-3820]	; 4ccf0 <__assert_fail@plt+0x3bae4>
   4dbd8:	ldr	r1, [pc, #-3808]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4dbdc:	mov	r3, r0
   4dbe0:	mov	r0, r9
   4dbe4:	bl	548ac <error@@Base>
   4dbe8:	ldr	ip, [sp, #344]	; 0x158
   4dbec:	ldr	r3, [sp, #348]	; 0x15c
   4dbf0:	mov	r1, r4
   4dbf4:	add	ip, ip, r3
   4dbf8:	mov	r2, #0
   4dbfc:	mov	r3, sl
   4dc00:	mov	r0, ip
   4dc04:	str	ip, [sp, #344]	; 0x158
   4dc08:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4dc0c:	mov	r4, #0
   4dc10:	str	r4, [sp, #252]	; 0xfc
   4dc14:	str	r0, [sp, #248]	; 0xf8
   4dc18:	ldrd	r2, [sp, #248]	; 0xf8
   4dc1c:	mov	r8, r0
   4dc20:	mov	r9, r1
   4dc24:	cmp	r3, r1
   4dc28:	cmpeq	r2, r0
   4dc2c:	beq	4dc70 <__assert_fail@plt+0x3ca64>
   4dc30:	ldr	r1, [pc, #-3908]	; 4ccf4 <__assert_fail@plt+0x3bae8>
   4dc34:	mov	r2, #5
   4dc38:	mov	r0, r4
   4dc3c:	bl	10f90 <dcgettext@plt>
   4dc40:	mov	r2, r8
   4dc44:	mov	r3, r9
   4dc48:	str	r4, [sp]
   4dc4c:	str	r0, [sp, #24]
   4dc50:	ldr	r0, [pc, #-3936]	; 4ccf8 <__assert_fail@plt+0x3baec>
   4dc54:	bl	3c744 <__assert_fail@plt+0x2b538>
   4dc58:	ldr	r1, [sp, #24]
   4dc5c:	ldr	r2, [pc, #-3944]	; 4ccfc <__assert_fail@plt+0x3baf0>
   4dc60:	mov	r3, r0
   4dc64:	mov	r0, r1
   4dc68:	ldr	r1, [pc, #-3952]	; 4cd00 <__assert_fail@plt+0x3baf4>
   4dc6c:	bl	548ac <error@@Base>
   4dc70:	ldr	r3, [r5, #8]
   4dc74:	ldr	r4, [sp, #344]	; 0x158
   4dc78:	ldr	r2, [sp, #348]	; 0x15c
   4dc7c:	cmp	r3, r6
   4dc80:	ldr	r3, [sp, #112]	; 0x70
   4dc84:	add	r4, r4, r2
   4dc88:	str	r4, [sp, #344]	; 0x158
   4dc8c:	ldr	r3, [r3]
   4dc90:	bhi	4f1e0 <__assert_fail@plt+0x3dfd4>
   4dc94:	cmp	r3, #0
   4dc98:	beq	4dcac <__assert_fail@plt+0x3caa0>
   4dc9c:	ldr	r3, [sp, #132]	; 0x84
   4dca0:	ldrb	r3, [r3]
   4dca4:	cmp	r3, #0
   4dca8:	beq	4f1e8 <__assert_fail@plt+0x3dfdc>
   4dcac:	mov	r1, #0
   4dcb0:	mov	r0, r6
   4dcb4:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4dcb8:	ldr	r4, [sp, #132]	; 0x84
   4dcbc:	mov	r1, r4
   4dcc0:	mov	r2, r0
   4dcc4:	ldr	r0, [pc, #-4040]	; 4cd04 <__assert_fail@plt+0x3baf8>
   4dcc8:	bl	10f24 <printf@plt>
   4dccc:	mov	r1, #0
   4dcd0:	mov	r0, r8
   4dcd4:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4dcd8:	bl	11014 <puts@plt>
   4dcdc:	ldrb	r3, [r4]
   4dce0:	cmp	r3, #0
   4dce4:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4dce8:	b	4f68c <__assert_fail@plt+0x3e480>
   4dcec:	add	r4, sp, #348	; 0x15c
   4dcf0:	mov	r3, sl
   4dcf4:	mov	r2, #0
   4dcf8:	mov	r1, r4
   4dcfc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4dd00:	add	r3, sp, #288	; 0x120
   4dd04:	mov	r9, #0
   4dd08:	str	r9, [sp, #292]	; 0x124
   4dd0c:	str	r0, [sp, #288]	; 0x120
   4dd10:	ldrd	r2, [r3]
   4dd14:	mov	r6, r0
   4dd18:	mov	r7, r1
   4dd1c:	cmp	r1, r3
   4dd20:	cmpeq	r0, r2
   4dd24:	mov	r8, r0
   4dd28:	beq	4dd6c <__assert_fail@plt+0x3cb60>
   4dd2c:	ldr	r1, [pc, #3996]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4dd30:	mov	r2, #5
   4dd34:	mov	r0, r9
   4dd38:	bl	10f90 <dcgettext@plt>
   4dd3c:	mov	r2, r6
   4dd40:	mov	r3, r7
   4dd44:	str	r9, [sp]
   4dd48:	str	r0, [sp, #24]
   4dd4c:	ldr	r0, [pc, #3968]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4dd50:	bl	3c744 <__assert_fail@plt+0x2b538>
   4dd54:	ldr	r1, [sp, #24]
   4dd58:	ldr	r2, [pc, #3836]	; 4ec5c <__assert_fail@plt+0x3da50>
   4dd5c:	mov	r3, r0
   4dd60:	mov	r0, r1
   4dd64:	ldr	r1, [pc, #3952]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4dd68:	bl	548ac <error@@Base>
   4dd6c:	ldr	ip, [sp, #344]	; 0x158
   4dd70:	ldr	r3, [sp, #348]	; 0x15c
   4dd74:	mov	r1, r4
   4dd78:	add	ip, ip, r3
   4dd7c:	mov	r0, ip
   4dd80:	mov	r3, sl
   4dd84:	mov	r2, #1
   4dd88:	str	ip, [sp, #344]	; 0x158
   4dd8c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4dd90:	ldr	r3, [sp, #344]	; 0x158
   4dd94:	ldr	r2, [sp, #348]	; 0x15c
   4dd98:	mov	r1, r6
   4dd9c:	add	r3, r3, r2
   4dda0:	str	r3, [sp, #344]	; 0x158
   4dda4:	mov	r4, r0
   4dda8:	mov	r0, r5
   4ddac:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4ddb0:	ldr	r3, [sp, #112]	; 0x70
   4ddb4:	cmp	r0, #0
   4ddb8:	blt	4f494 <__assert_fail@plt+0x3e288>
   4ddbc:	ldr	r1, [r3]
   4ddc0:	cmp	r1, #0
   4ddc4:	beq	4f7b4 <__assert_fail@plt+0x3e5a8>
   4ddc8:	ldr	r3, [r5, #28]
   4ddcc:	ldr	r1, [r5, #12]
   4ddd0:	lsl	r6, r6, #1
   4ddd4:	mul	r3, r4, r3
   4ddd8:	ldr	r2, [r5, #16]
   4dddc:	mov	r0, #128	; 0x80
   4dde0:	b	4d648 <__assert_fail@plt+0x3c43c>
   4dde4:	mov	r3, sl
   4dde8:	mov	r2, #0
   4ddec:	add	r1, sp, #348	; 0x15c
   4ddf0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4ddf4:	mov	r4, #0
   4ddf8:	str	r4, [sp, #228]	; 0xe4
   4ddfc:	str	r0, [sp, #224]	; 0xe0
   4de00:	ldrd	r2, [sp, #224]	; 0xe0
   4de04:	mov	r6, r0
   4de08:	mov	r7, r1
   4de0c:	cmp	r3, r1
   4de10:	cmpeq	r2, r0
   4de14:	mov	r8, r0
   4de18:	beq	4de58 <__assert_fail@plt+0x3cc4c>
   4de1c:	ldr	r1, [pc, #3756]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4de20:	mov	r2, #5
   4de24:	mov	r0, r4
   4de28:	bl	10f90 <dcgettext@plt>
   4de2c:	mov	r2, r6
   4de30:	mov	r3, r7
   4de34:	str	r4, [sp]
   4de38:	mov	r9, r0
   4de3c:	ldr	r0, [pc, #3728]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4de40:	bl	3c744 <__assert_fail@plt+0x2b538>
   4de44:	mov	r2, #8064	; 0x1f80
   4de48:	ldr	r1, [pc, #3724]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4de4c:	mov	r3, r0
   4de50:	mov	r0, r9
   4de54:	bl	548ac <error@@Base>
   4de58:	ldr	r3, [r5, #8]
   4de5c:	ldr	r4, [sp, #344]	; 0x158
   4de60:	ldr	r2, [sp, #348]	; 0x15c
   4de64:	cmp	r3, r6
   4de68:	ldr	r3, [sp, #112]	; 0x70
   4de6c:	add	r4, r4, r2
   4de70:	str	r4, [sp, #344]	; 0x158
   4de74:	ldr	r1, [r3]
   4de78:	bhi	4f1b8 <__assert_fail@plt+0x3dfac>
   4de7c:	cmp	r1, #0
   4de80:	beq	4de94 <__assert_fail@plt+0x3cc88>
   4de84:	ldr	r3, [sp, #132]	; 0x84
   4de88:	ldrb	r3, [r3]
   4de8c:	cmp	r3, #0
   4de90:	beq	4f1c0 <__assert_fail@plt+0x3dfb4>
   4de94:	mov	r1, #0
   4de98:	mov	r0, r6
   4de9c:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4dea0:	ldr	r4, [sp, #132]	; 0x84
   4dea4:	mov	r1, r4
   4dea8:	mov	r2, r0
   4deac:	ldr	r0, [pc, #3708]	; 4ed30 <__assert_fail@plt+0x3db24>
   4deb0:	bl	10f24 <printf@plt>
   4deb4:	ldrb	r3, [r4]
   4deb8:	cmp	r3, #0
   4debc:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4dec0:	b	4f6ac <__assert_fail@plt+0x3e4a0>
   4dec4:	mov	r3, sl
   4dec8:	mov	r2, #0
   4decc:	add	r1, sp, #348	; 0x15c
   4ded0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4ded4:	mov	r4, #0
   4ded8:	str	r4, [sp, #220]	; 0xdc
   4dedc:	str	r0, [sp, #216]	; 0xd8
   4dee0:	ldrd	r2, [sp, #216]	; 0xd8
   4dee4:	mov	r6, r0
   4dee8:	mov	r7, r1
   4deec:	cmp	r3, r1
   4def0:	cmpeq	r2, r0
   4def4:	beq	4df34 <__assert_fail@plt+0x3cd28>
   4def8:	ldr	r1, [pc, #3536]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4defc:	mov	r2, #5
   4df00:	mov	r0, r4
   4df04:	bl	10f90 <dcgettext@plt>
   4df08:	mov	r2, r6
   4df0c:	mov	r3, r7
   4df10:	str	r4, [sp]
   4df14:	mov	r8, r0
   4df18:	ldr	r0, [pc, #3508]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4df1c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4df20:	ldr	r2, [pc, #3384]	; 4ec60 <__assert_fail@plt+0x3da54>
   4df24:	ldr	r1, [pc, #3504]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4df28:	mov	r3, r0
   4df2c:	mov	r0, r8
   4df30:	bl	548ac <error@@Base>
   4df34:	ldr	r3, [r5, #8]
   4df38:	ldr	r4, [sp, #344]	; 0x158
   4df3c:	ldr	r2, [sp, #348]	; 0x15c
   4df40:	cmp	r3, r6
   4df44:	ldr	r3, [sp, #112]	; 0x70
   4df48:	add	r4, r4, r2
   4df4c:	str	r4, [sp, #344]	; 0x158
   4df50:	ldr	r1, [r3]
   4df54:	bhi	4f178 <__assert_fail@plt+0x3df6c>
   4df58:	cmp	r1, #0
   4df5c:	beq	4df70 <__assert_fail@plt+0x3cd64>
   4df60:	ldr	r3, [sp, #132]	; 0x84
   4df64:	ldrb	r3, [r3]
   4df68:	cmp	r3, #0
   4df6c:	beq	4f180 <__assert_fail@plt+0x3df74>
   4df70:	mov	r1, #0
   4df74:	mov	r0, r6
   4df78:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4df7c:	ldr	r4, [sp, #132]	; 0x84
   4df80:	mov	r1, r4
   4df84:	mov	r2, r0
   4df88:	ldr	r0, [pc, #3508]	; 4ed44 <__assert_fail@plt+0x3db38>
   4df8c:	bl	10f24 <printf@plt>
   4df90:	ldrb	r3, [r4]
   4df94:	ldr	r4, [sp, #344]	; 0x158
   4df98:	cmp	r3, #0
   4df9c:	bne	4d1e8 <__assert_fail@plt+0x3bfdc>
   4dfa0:	b	4f180 <__assert_fail@plt+0x3df74>
   4dfa4:	mov	r3, sl
   4dfa8:	mov	r2, #0
   4dfac:	add	r1, sp, #348	; 0x15c
   4dfb0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4dfb4:	ldr	ip, [r5, #28]
   4dfb8:	ldr	r4, [sp, #344]	; 0x158
   4dfbc:	ldr	lr, [sp, #348]	; 0x15c
   4dfc0:	asr	r7, ip, #31
   4dfc4:	add	r4, r4, lr
   4dfc8:	ldr	lr, [sp, #112]	; 0x70
   4dfcc:	str	r4, [sp, #344]	; 0x158
   4dfd0:	ldr	lr, [lr]
   4dfd4:	cmp	lr, #0
   4dfd8:	str	lr, [sp, #24]
   4dfdc:	mul	r1, ip, r1
   4dfe0:	umull	r2, r3, ip, r0
   4dfe4:	mla	r1, r0, r7, r1
   4dfe8:	add	r3, r1, r3
   4dfec:	strd	r2, [r5, #56]	; 0x38
   4dff0:	bne	4d1e8 <__assert_fail@plt+0x3bfdc>
   4dff4:	mov	r1, r2
   4dff8:	ldr	r0, [pc, #3172]	; 4ec64 <__assert_fail@plt+0x3da58>
   4dffc:	bl	10f24 <printf@plt>
   4e000:	ldr	r4, [sp, #344]	; 0x158
   4e004:	b	4c534 <__assert_fail@plt+0x3b328>
   4e008:	add	r4, sp, #348	; 0x15c
   4e00c:	mov	r3, sl
   4e010:	mov	r2, #0
   4e014:	mov	r1, r4
   4e018:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e01c:	add	r3, sp, #304	; 0x130
   4e020:	mov	r8, #0
   4e024:	str	r8, [sp, #308]	; 0x134
   4e028:	str	r0, [sp, #304]	; 0x130
   4e02c:	ldrd	r2, [r3]
   4e030:	mov	r6, r0
   4e034:	mov	r7, r1
   4e038:	cmp	r3, r1
   4e03c:	cmpeq	r2, r0
   4e040:	str	r0, [r5, #48]	; 0x30
   4e044:	beq	4e084 <__assert_fail@plt+0x3ce78>
   4e048:	ldr	r1, [pc, #3200]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4e04c:	mov	r2, #5
   4e050:	mov	r0, r8
   4e054:	bl	10f90 <dcgettext@plt>
   4e058:	mov	r2, r6
   4e05c:	mov	r3, r7
   4e060:	str	r8, [sp]
   4e064:	mov	r9, r0
   4e068:	ldr	r0, [pc, #3172]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4e06c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e070:	ldr	r2, [pc, #3056]	; 4ec68 <__assert_fail@plt+0x3da5c>
   4e074:	ldr	r1, [pc, #3168]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4e078:	mov	r3, r0
   4e07c:	mov	r0, r9
   4e080:	bl	548ac <error@@Base>
   4e084:	ldr	ip, [sp, #344]	; 0x158
   4e088:	ldr	r3, [sp, #348]	; 0x15c
   4e08c:	mov	r1, r4
   4e090:	add	ip, ip, r3
   4e094:	mov	r0, ip
   4e098:	mov	r3, sl
   4e09c:	mov	r2, #0
   4e0a0:	str	ip, [sp, #344]	; 0x158
   4e0a4:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e0a8:	ldr	ip, [r5, #28]
   4e0ac:	ldr	r4, [sp, #344]	; 0x158
   4e0b0:	ldr	lr, [sp, #348]	; 0x15c
   4e0b4:	asr	r7, ip, #31
   4e0b8:	add	r4, r4, lr
   4e0bc:	ldr	lr, [sp, #112]	; 0x70
   4e0c0:	str	r4, [sp, #344]	; 0x158
   4e0c4:	ldr	lr, [lr]
   4e0c8:	str	lr, [sp, #24]
   4e0cc:	cmp	lr, #0
   4e0d0:	mov	lr, #0
   4e0d4:	strb	lr, [r5, #69]	; 0x45
   4e0d8:	strne	lr, [sp, #24]
   4e0dc:	mul	r1, ip, r1
   4e0e0:	umull	r2, r3, ip, r0
   4e0e4:	mla	r1, r0, r7, r1
   4e0e8:	add	r3, r1, r3
   4e0ec:	strd	r2, [r5, #56]	; 0x38
   4e0f0:	bne	4c534 <__assert_fail@plt+0x3b328>
   4e0f4:	ldr	r1, [sp, #24]
   4e0f8:	ldr	r0, [r5, #48]	; 0x30
   4e0fc:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4e100:	ldr	r2, [r5, #56]	; 0x38
   4e104:	mov	r1, r0
   4e108:	ldr	r0, [pc, #2908]	; 4ec6c <__assert_fail@plt+0x3da60>
   4e10c:	bl	10f24 <printf@plt>
   4e110:	ldr	r4, [sp, #344]	; 0x158
   4e114:	b	4c534 <__assert_fail@plt+0x3b328>
   4e118:	add	r4, sp, #348	; 0x15c
   4e11c:	mov	r3, sl
   4e120:	mov	r2, #0
   4e124:	mov	r1, r4
   4e128:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e12c:	mov	r8, #0
   4e130:	str	r8, [sp, #204]	; 0xcc
   4e134:	str	r0, [sp, #200]	; 0xc8
   4e138:	ldrd	r2, [sp, #200]	; 0xc8
   4e13c:	mov	r6, r0
   4e140:	mov	r7, r1
   4e144:	cmp	r3, r1
   4e148:	cmpeq	r2, r0
   4e14c:	str	r0, [sp, #116]	; 0x74
   4e150:	beq	4e190 <__assert_fail@plt+0x3cf84>
   4e154:	ldr	r1, [pc, #2932]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4e158:	mov	r2, #5
   4e15c:	mov	r0, r8
   4e160:	bl	10f90 <dcgettext@plt>
   4e164:	mov	r2, r6
   4e168:	mov	r3, r7
   4e16c:	str	r8, [sp]
   4e170:	mov	r9, r0
   4e174:	ldr	r0, [pc, #2904]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4e178:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e17c:	ldr	r2, [pc, #2796]	; 4ec70 <__assert_fail@plt+0x3da64>
   4e180:	ldr	r1, [pc, #2900]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4e184:	mov	r3, r0
   4e188:	mov	r0, r9
   4e18c:	bl	548ac <error@@Base>
   4e190:	ldr	ip, [sp, #344]	; 0x158
   4e194:	ldr	r3, [sp, #348]	; 0x15c
   4e198:	mov	r1, r4
   4e19c:	add	ip, ip, r3
   4e1a0:	mov	r2, #0
   4e1a4:	mov	r3, sl
   4e1a8:	mov	r0, ip
   4e1ac:	str	ip, [sp, #344]	; 0x158
   4e1b0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e1b4:	mov	r4, #0
   4e1b8:	str	r4, [sp, #212]	; 0xd4
   4e1bc:	str	r0, [sp, #208]	; 0xd0
   4e1c0:	ldrd	r2, [sp, #208]	; 0xd0
   4e1c4:	mov	r8, r0
   4e1c8:	mov	r9, r1
   4e1cc:	cmp	r3, r1
   4e1d0:	cmpeq	r2, r0
   4e1d4:	beq	4e218 <__assert_fail@plt+0x3d00c>
   4e1d8:	ldr	r1, [pc, #2800]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4e1dc:	mov	r2, #5
   4e1e0:	mov	r0, r4
   4e1e4:	bl	10f90 <dcgettext@plt>
   4e1e8:	mov	r2, r8
   4e1ec:	mov	r3, r9
   4e1f0:	str	r4, [sp]
   4e1f4:	str	r0, [sp, #24]
   4e1f8:	ldr	r0, [pc, #2772]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4e1fc:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e200:	ldr	r1, [sp, #24]
   4e204:	ldr	r2, [pc, #2664]	; 4ec74 <__assert_fail@plt+0x3da68>
   4e208:	mov	r3, r0
   4e20c:	mov	r0, r1
   4e210:	ldr	r1, [pc, #2756]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4e214:	bl	548ac <error@@Base>
   4e218:	ldr	r3, [r5, #8]
   4e21c:	ldr	r4, [sp, #344]	; 0x158
   4e220:	ldr	r2, [sp, #348]	; 0x15c
   4e224:	cmp	r3, r6
   4e228:	ldr	r3, [sp, #112]	; 0x70
   4e22c:	add	r4, r4, r2
   4e230:	str	r4, [sp, #344]	; 0x158
   4e234:	ldr	r1, [r3]
   4e238:	bhi	4f140 <__assert_fail@plt+0x3df34>
   4e23c:	cmp	r1, #0
   4e240:	beq	4e254 <__assert_fail@plt+0x3d048>
   4e244:	ldr	r3, [sp, #132]	; 0x84
   4e248:	ldrb	r3, [r3]
   4e24c:	cmp	r3, #0
   4e250:	beq	4f148 <__assert_fail@plt+0x3df3c>
   4e254:	mov	r1, #0
   4e258:	mov	r0, r6
   4e25c:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4e260:	ldr	r3, [r5, #28]
   4e264:	ldr	r4, [sp, #132]	; 0x84
   4e268:	mul	r3, r3, r8
   4e26c:	mov	r1, r4
   4e270:	mov	r2, r0
   4e274:	ldr	r0, [pc, #2764]	; 4ed48 <__assert_fail@plt+0x3db3c>
   4e278:	bl	10f24 <printf@plt>
   4e27c:	ldrb	r3, [r4]
   4e280:	cmp	r3, #0
   4e284:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4e288:	ldr	r4, [sp, #344]	; 0x158
   4e28c:	b	4f148 <__assert_fail@plt+0x3df3c>
   4e290:	mov	r3, sl
   4e294:	mov	r2, #0
   4e298:	add	r1, sp, #348	; 0x15c
   4e29c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e2a0:	mov	r4, #0
   4e2a4:	str	r4, [sp, #164]	; 0xa4
   4e2a8:	str	r0, [sp, #160]	; 0xa0
   4e2ac:	ldrd	r2, [sp, #160]	; 0xa0
   4e2b0:	mov	r6, r0
   4e2b4:	mov	r7, r1
   4e2b8:	cmp	r3, r1
   4e2bc:	cmpeq	r2, r0
   4e2c0:	beq	4e300 <__assert_fail@plt+0x3d0f4>
   4e2c4:	ldr	r1, [pc, #2564]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4e2c8:	mov	r2, #5
   4e2cc:	mov	r0, r4
   4e2d0:	bl	10f90 <dcgettext@plt>
   4e2d4:	mov	r2, r6
   4e2d8:	mov	r3, r7
   4e2dc:	str	r4, [sp]
   4e2e0:	mov	r8, r0
   4e2e4:	ldr	r0, [pc, #2536]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4e2e8:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e2ec:	ldr	r2, [pc, #2436]	; 4ec78 <__assert_fail@plt+0x3da6c>
   4e2f0:	ldr	r1, [pc, #2532]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4e2f4:	mov	r3, r0
   4e2f8:	mov	r0, r8
   4e2fc:	bl	548ac <error@@Base>
   4e300:	ldr	r4, [sp, #344]	; 0x158
   4e304:	ldr	r3, [sp, #348]	; 0x15c
   4e308:	add	r4, r4, r3
   4e30c:	cmp	r4, fp
   4e310:	str	r4, [sp, #344]	; 0x158
   4e314:	bcs	4ef70 <__assert_fail@plt+0x3dd64>
   4e318:	sub	r3, fp, r4
   4e31c:	cmp	r3, r6
   4e320:	bcc	4ef70 <__assert_fail@plt+0x3dd64>
   4e324:	ldr	r3, [sp, #112]	; 0x70
   4e328:	ldr	r8, [r3]
   4e32c:	cmp	r8, #0
   4e330:	beq	4f8c4 <__assert_fail@plt+0x3e6b8>
   4e334:	mov	r3, #1
   4e338:	add	r4, r4, r6
   4e33c:	strb	r3, [r5, #69]	; 0x45
   4e340:	mov	r3, #0
   4e344:	str	r4, [sp, #344]	; 0x158
   4e348:	str	r3, [sp, #24]
   4e34c:	b	4c534 <__assert_fail@plt+0x3b328>
   4e350:	add	r4, sp, #348	; 0x15c
   4e354:	mov	r3, sl
   4e358:	mov	r2, #0
   4e35c:	mov	r1, r4
   4e360:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e364:	add	r3, sp, #272	; 0x110
   4e368:	mov	r6, #0
   4e36c:	str	r6, [sp, #276]	; 0x114
   4e370:	str	r0, [sp, #272]	; 0x110
   4e374:	ldrd	r2, [r3]
   4e378:	mov	r8, r0
   4e37c:	mov	r9, r1
   4e380:	cmp	r1, r3
   4e384:	cmpeq	r0, r2
   4e388:	beq	4e3c8 <__assert_fail@plt+0x3d1bc>
   4e38c:	ldr	r1, [pc, #2364]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4e390:	mov	r2, #5
   4e394:	mov	r0, r6
   4e398:	bl	10f90 <dcgettext@plt>
   4e39c:	mov	r2, r8
   4e3a0:	mov	r3, r9
   4e3a4:	str	r6, [sp]
   4e3a8:	mov	r7, r0
   4e3ac:	ldr	r0, [pc, #2336]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4e3b0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e3b4:	ldr	r2, [pc, #2240]	; 4ec7c <__assert_fail@plt+0x3da70>
   4e3b8:	ldr	r1, [pc, #2332]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4e3bc:	mov	r3, r0
   4e3c0:	mov	r0, r7
   4e3c4:	bl	548ac <error@@Base>
   4e3c8:	ldr	ip, [sp, #344]	; 0x158
   4e3cc:	ldr	r3, [sp, #348]	; 0x15c
   4e3d0:	mov	r1, r4
   4e3d4:	add	ip, ip, r3
   4e3d8:	mov	r2, #0
   4e3dc:	mov	r3, sl
   4e3e0:	mov	r0, ip
   4e3e4:	str	ip, [sp, #344]	; 0x158
   4e3e8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e3ec:	mov	r4, #0
   4e3f0:	str	r4, [sp, #172]	; 0xac
   4e3f4:	str	r0, [sp, #168]	; 0xa8
   4e3f8:	ldrd	r2, [sp, #168]	; 0xa8
   4e3fc:	mov	r6, r0
   4e400:	mov	r7, r1
   4e404:	cmp	r1, r3
   4e408:	cmpeq	r0, r2
   4e40c:	beq	4e450 <__assert_fail@plt+0x3d244>
   4e410:	ldr	r1, [pc, #2232]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4e414:	mov	r2, #5
   4e418:	mov	r0, r4
   4e41c:	bl	10f90 <dcgettext@plt>
   4e420:	mov	r2, r6
   4e424:	mov	r3, r7
   4e428:	str	r4, [sp]
   4e42c:	str	r0, [sp, #24]
   4e430:	ldr	r0, [pc, #2204]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4e434:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e438:	ldr	r1, [sp, #24]
   4e43c:	ldr	r2, [pc, #2108]	; 4ec80 <__assert_fail@plt+0x3da74>
   4e440:	mov	r3, r0
   4e444:	mov	r0, r1
   4e448:	ldr	r1, [pc, #2188]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4e44c:	bl	548ac <error@@Base>
   4e450:	ldr	r3, [sp, #344]	; 0x158
   4e454:	ldr	r2, [sp, #348]	; 0x15c
   4e458:	ldr	r1, [r5, #8]
   4e45c:	ldr	r0, [pc, #2292]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4e460:	add	r3, r3, r2
   4e464:	cmp	r1, r8
   4e468:	ldr	r2, [sp, #132]	; 0x84
   4e46c:	movhi	r2, r0
   4e470:	adds	r4, r3, r6
   4e474:	str	r2, [sp, #24]
   4e478:	movcs	r2, #1
   4e47c:	movcc	r2, #0
   4e480:	cmp	fp, r4
   4e484:	orrcc	r2, r2, #1
   4e488:	cmp	r3, fp
   4e48c:	orrcs	r2, r2, #1
   4e490:	cmp	r2, #0
   4e494:	str	r3, [sp, #344]	; 0x158
   4e498:	beq	4f704 <__assert_fail@plt+0x3e4f8>
   4e49c:	ldr	r1, [pc, #2016]	; 4ec84 <__assert_fail@plt+0x3da78>
   4e4a0:	mov	r2, #5
   4e4a4:	mov	r0, #0
   4e4a8:	bl	10f90 <dcgettext@plt>
   4e4ac:	mov	r1, r6
   4e4b0:	bl	10f24 <printf@plt>
   4e4b4:	mov	r3, #0
   4e4b8:	str	r3, [sp, #24]
   4e4bc:	ldr	r4, [sp, #344]	; 0x158
   4e4c0:	b	4c534 <__assert_fail@plt+0x3b328>
   4e4c4:	mov	r3, sl
   4e4c8:	mov	r2, #0
   4e4cc:	add	r1, sp, #348	; 0x15c
   4e4d0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e4d4:	ldr	r2, [sp, #112]	; 0x70
   4e4d8:	ldr	r4, [sp, #344]	; 0x158
   4e4dc:	ldr	r3, [sp, #348]	; 0x15c
   4e4e0:	ldr	r2, [r2]
   4e4e4:	add	r4, r4, r3
   4e4e8:	cmp	r2, #0
   4e4ec:	str	r2, [sp, #24]
   4e4f0:	str	r4, [sp, #344]	; 0x158
   4e4f4:	str	r0, [r5, #56]	; 0x38
   4e4f8:	str	r1, [r5, #60]	; 0x3c
   4e4fc:	bne	4d1e8 <__assert_fail@plt+0x3bfdc>
   4e500:	mov	r1, r0
   4e504:	ldr	r0, [pc, #1916]	; 4ec88 <__assert_fail@plt+0x3da7c>
   4e508:	bl	10f24 <printf@plt>
   4e50c:	ldr	r4, [sp, #344]	; 0x158
   4e510:	b	4c534 <__assert_fail@plt+0x3b328>
   4e514:	mov	r3, sl
   4e518:	mov	r2, #0
   4e51c:	add	r1, sp, #348	; 0x15c
   4e520:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4e524:	mov	r4, #0
   4e528:	str	r4, [sp, #236]	; 0xec
   4e52c:	str	r0, [sp, #232]	; 0xe8
   4e530:	ldrd	r2, [sp, #232]	; 0xe8
   4e534:	mov	r6, r0
   4e538:	mov	r7, r1
   4e53c:	cmp	r3, r1
   4e540:	cmpeq	r2, r0
   4e544:	mov	r8, r0
   4e548:	beq	4e588 <__assert_fail@plt+0x3d37c>
   4e54c:	ldr	r1, [pc, #1916]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4e550:	mov	r2, #5
   4e554:	mov	r0, r4
   4e558:	bl	10f90 <dcgettext@plt>
   4e55c:	mov	r2, r6
   4e560:	mov	r3, r7
   4e564:	str	r4, [sp]
   4e568:	mov	r9, r0
   4e56c:	ldr	r0, [pc, #1888]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4e570:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e574:	ldr	r2, [pc, #1808]	; 4ec8c <__assert_fail@plt+0x3da80>
   4e578:	ldr	r1, [pc, #1884]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4e57c:	mov	r3, r0
   4e580:	mov	r0, r9
   4e584:	bl	548ac <error@@Base>
   4e588:	ldr	r3, [r5, #8]
   4e58c:	ldr	r4, [sp, #344]	; 0x158
   4e590:	ldr	r2, [sp, #348]	; 0x15c
   4e594:	cmp	r3, r6
   4e598:	ldr	r3, [sp, #112]	; 0x70
   4e59c:	add	r4, r4, r2
   4e5a0:	str	r4, [sp, #344]	; 0x158
   4e5a4:	ldr	r1, [r3]
   4e5a8:	bhi	4f0b4 <__assert_fail@plt+0x3dea8>
   4e5ac:	cmp	r1, #0
   4e5b0:	beq	4e5c4 <__assert_fail@plt+0x3d3b8>
   4e5b4:	ldr	r3, [sp, #132]	; 0x84
   4e5b8:	ldrb	r3, [r3]
   4e5bc:	cmp	r3, #0
   4e5c0:	beq	4f0bc <__assert_fail@plt+0x3deb0>
   4e5c4:	mov	r1, #0
   4e5c8:	mov	r0, r6
   4e5cc:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4e5d0:	ldr	r4, [sp, #132]	; 0x84
   4e5d4:	mov	r1, r4
   4e5d8:	mov	r2, r0
   4e5dc:	ldr	r0, [pc, #1904]	; 4ed54 <__assert_fail@plt+0x3db48>
   4e5e0:	bl	10f24 <printf@plt>
   4e5e4:	ldrb	r3, [r4]
   4e5e8:	cmp	r3, #0
   4e5ec:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4e5f0:	ldr	r4, [sp, #344]	; 0x158
   4e5f4:	b	4f0bc <__assert_fail@plt+0x3deb0>
   4e5f8:	ldr	r2, [sp, #144]	; 0x90
   4e5fc:	ldrb	r1, [r5, #68]	; 0x44
   4e600:	add	r3, r2, #24
   4e604:	str	fp, [sp]
   4e608:	add	r2, r2, #16
   4e60c:	add	r0, sp, #344	; 0x158
   4e610:	bl	3e038 <__assert_fail@plt+0x2ce2c>
   4e614:	ldr	r3, [sp, #112]	; 0x70
   4e618:	mov	r6, r0
   4e61c:	ldr	r0, [r3]
   4e620:	mov	r7, r1
   4e624:	cmp	r0, #0
   4e628:	beq	4f2d0 <__assert_fail@plt+0x3e0c4>
   4e62c:	add	r2, sp, #352	; 0x160
   4e630:	add	r1, sp, #360	; 0x168
   4e634:	mov	r0, r5
   4e638:	bl	3caf8 <__assert_fail@plt+0x2b8ec>
   4e63c:	strd	r6, [r5, #32]
   4e640:	b	4d0f8 <__assert_fail@plt+0x3beec>
   4e644:	add	r4, r4, #3
   4e648:	cmp	fp, r4
   4e64c:	bhi	4f2b0 <__assert_fail@plt+0x3e0a4>
   4e650:	cmp	r0, fp
   4e654:	bcs	4e668 <__assert_fail@plt+0x3d45c>
   4e658:	sub	r1, fp, r0
   4e65c:	sub	r3, r1, #1
   4e660:	cmp	r3, #7
   4e664:	bls	4f2b4 <__assert_fail@plt+0x3e0a8>
   4e668:	mov	r6, #0
   4e66c:	mov	r4, r6
   4e670:	ldr	r3, [sp, #112]	; 0x70
   4e674:	add	r0, r0, #2
   4e678:	str	r0, [sp, #344]	; 0x158
   4e67c:	ldr	ip, [r3]
   4e680:	cmp	ip, #0
   4e684:	bne	4e808 <__assert_fail@plt+0x3d5fc>
   4e688:	ldr	r1, [r5, #24]
   4e68c:	ldrd	r2, [r5, #32]
   4e690:	ldrb	lr, [r5, #70]	; 0x46
   4e694:	umull	r8, r9, r1, r6
   4e698:	str	lr, [sp]
   4e69c:	mla	r9, r1, r4, r9
   4e6a0:	adds	r2, r8, r2
   4e6a4:	mov	r0, ip
   4e6a8:	adc	r3, r9, r3
   4e6ac:	mul	r7, r6, r1
   4e6b0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e6b4:	mov	r1, r7
   4e6b8:	mov	r2, r0
   4e6bc:	ldr	r0, [pc, #1484]	; 4ec90 <__assert_fail@plt+0x3da84>
   4e6c0:	bl	10f24 <printf@plt>
   4e6c4:	b	4d384 <__assert_fail@plt+0x3c178>
   4e6c8:	ldr	r3, [r5, #8]
   4e6cc:	ldr	r2, [sp, #112]	; 0x70
   4e6d0:	cmp	r3, r8
   4e6d4:	ldr	r1, [r2]
   4e6d8:	bhi	4f0dc <__assert_fail@plt+0x3ded0>
   4e6dc:	cmp	r1, #0
   4e6e0:	beq	4e6f4 <__assert_fail@plt+0x3d4e8>
   4e6e4:	ldr	r3, [sp, #132]	; 0x84
   4e6e8:	ldrb	r3, [r3]
   4e6ec:	cmp	r3, #0
   4e6f0:	beq	4f0e4 <__assert_fail@plt+0x3ded8>
   4e6f4:	mov	r1, #0
   4e6f8:	mov	r0, r8
   4e6fc:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4e700:	ldr	r4, [sp, #132]	; 0x84
   4e704:	mov	r1, r4
   4e708:	mov	r2, r0
   4e70c:	ldr	r0, [pc, #1556]	; 4ed28 <__assert_fail@plt+0x3db1c>
   4e710:	bl	10f24 <printf@plt>
   4e714:	ldrb	r3, [r4]
   4e718:	cmp	r3, #0
   4e71c:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4e720:	b	4f600 <__assert_fail@plt+0x3e3f4>
   4e724:	add	r4, r4, #2
   4e728:	cmp	sl, r4
   4e72c:	bhi	4f120 <__assert_fail@plt+0x3df14>
   4e730:	cmp	r0, sl
   4e734:	bcs	4e748 <__assert_fail@plt+0x3d53c>
   4e738:	sub	r1, sl, r0
   4e73c:	sub	r3, r1, #1
   4e740:	cmp	r3, #7
   4e744:	bls	4f124 <__assert_fail@plt+0x3df18>
   4e748:	mov	r6, #0
   4e74c:	mov	r4, r6
   4e750:	ldr	r3, [sp, #112]	; 0x70
   4e754:	add	r0, r0, #1
   4e758:	str	r0, [sp, #344]	; 0x158
   4e75c:	ldr	ip, [r3]
   4e760:	cmp	ip, #0
   4e764:	bne	4e808 <__assert_fail@plt+0x3d5fc>
   4e768:	ldr	r1, [r5, #24]
   4e76c:	ldrd	r2, [r5, #32]
   4e770:	ldrb	lr, [r5, #70]	; 0x46
   4e774:	umull	r8, r9, r1, r6
   4e778:	str	lr, [sp]
   4e77c:	mla	r9, r1, r4, r9
   4e780:	adds	r2, r8, r2
   4e784:	mov	r0, ip
   4e788:	adc	r3, r9, r3
   4e78c:	mul	r7, r6, r1
   4e790:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e794:	mov	r1, r7
   4e798:	mov	r2, r0
   4e79c:	ldr	r0, [pc, #1264]	; 4ec94 <__assert_fail@plt+0x3da88>
   4e7a0:	bl	10f24 <printf@plt>
   4e7a4:	b	4d384 <__assert_fail@plt+0x3c178>
   4e7a8:	sub	r2, r3, #28
   4e7ac:	cmp	r2, #35	; 0x23
   4e7b0:	str	r3, [sp, #24]
   4e7b4:	mov	r2, #5
   4e7b8:	bhi	4f1f8 <__assert_fail@plt+0x3dfec>
   4e7bc:	ldr	r1, [pc, #1236]	; 4ec98 <__assert_fail@plt+0x3da8c>
   4e7c0:	mov	r0, #0
   4e7c4:	bl	10f90 <dcgettext@plt>
   4e7c8:	ldr	r3, [sp, #24]
   4e7cc:	mov	r1, r3
   4e7d0:	bl	10f24 <printf@plt>
   4e7d4:	mov	r3, #0
   4e7d8:	str	fp, [sp, #344]	; 0x158
   4e7dc:	mov	r4, fp
   4e7e0:	str	r3, [sp, #24]
   4e7e4:	b	4c534 <__assert_fail@plt+0x3b328>
   4e7e8:	mov	r2, #5
   4e7ec:	ldr	r1, [pc, #1192]	; 4ec9c <__assert_fail@plt+0x3da90>
   4e7f0:	mov	r0, #0
   4e7f4:	bl	10f90 <dcgettext@plt>
   4e7f8:	mov	r1, r6
   4e7fc:	bl	54dd0 <warn@@Base>
   4e800:	str	fp, [sp, #344]	; 0x158
   4e804:	b	4c808 <__assert_fail@plt+0x3b5fc>
   4e808:	add	r2, sp, #352	; 0x160
   4e80c:	add	r1, sp, #360	; 0x168
   4e810:	mov	r0, r5
   4e814:	bl	3caf8 <__assert_fail@plt+0x2b8ec>
   4e818:	b	4d384 <__assert_fail@plt+0x3c178>
   4e81c:	orrs	r3, r2, r3
   4e820:	beq	4c0cc <__assert_fail@plt+0x3aec0>
   4e824:	lsl	r3, r6, #3
   4e828:	sub	r2, r3, #1
   4e82c:	mov	r3, #1
   4e830:	lsl	r3, r3, r2
   4e834:	ldr	r2, [sp, #120]	; 0x78
   4e838:	sub	r4, r3, #4
   4e83c:	eor	r3, r3, r2
   4e840:	sub	r3, r4, r3
   4e844:	add	r4, r0, r3
   4e848:	cmp	r4, r9
   4e84c:	bhi	4eaa4 <__assert_fail@plt+0x3d898>
   4e850:	ldr	r5, [sp, #328]	; 0x148
   4e854:	cmp	r5, #0
   4e858:	str	r5, [sp, #356]	; 0x164
   4e85c:	beq	4e88c <__assert_fail@plt+0x3d680>
   4e860:	ldr	r3, [r5, #4]
   4e864:	cmp	r4, r3
   4e868:	bne	4e87c <__assert_fail@plt+0x3d670>
   4e86c:	b	4fa90 <__assert_fail@plt+0x3e884>
   4e870:	ldr	r3, [r5, #4]
   4e874:	cmp	r3, r4
   4e878:	beq	4ed80 <__assert_fail@plt+0x3db74>
   4e87c:	ldr	r5, [r5]
   4e880:	cmp	r5, #0
   4e884:	bne	4e870 <__assert_fail@plt+0x3d664>
   4e888:	str	r5, [sp, #356]	; 0x164
   4e88c:	mov	r2, #72	; 0x48
   4e890:	mov	r1, #0
   4e894:	ldr	r0, [pc, #1160]	; 4ed24 <__assert_fail@plt+0x3db18>
   4e898:	bl	110bc <memset@plt>
   4e89c:	ldrd	r2, [sp, #120]	; 0x78
   4e8a0:	str	r6, [sp]
   4e8a4:	mov	r0, #0
   4e8a8:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e8ac:	ldr	r3, [sp, #128]	; 0x80
   4e8b0:	ldr	r4, [pc, #1036]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4e8b4:	sub	r8, r9, r3
   4e8b8:	mov	r2, r8
   4e8bc:	ldr	r7, [pc, #1120]	; 4ed24 <__assert_fail@plt+0x3db18>
   4e8c0:	mov	r1, r0
   4e8c4:	ldr	r0, [pc, #980]	; 4eca0 <__assert_fail@plt+0x3da94>
   4e8c8:	bl	54dd0 <warn@@Base>
   4e8cc:	mov	r3, #0
   4e8d0:	mov	r0, #2
   4e8d4:	str	r3, [r4, #1736]	; 0x6c8
   4e8d8:	bl	5861c <warn@@Base+0x384c>
   4e8dc:	str	r0, [r4, #1740]	; 0x6cc
   4e8e0:	mov	r0, #4
   4e8e4:	bl	5861c <warn@@Base+0x384c>
   4e8e8:	ldr	r1, [sp, #352]	; 0x160
   4e8ec:	cmp	r1, #0
   4e8f0:	subne	r1, r1, #1
   4e8f4:	str	r0, [r4, #1744]	; 0x6d0
   4e8f8:	mov	r0, r7
   4e8fc:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4e900:	cmp	r0, #0
   4e904:	blt	4fb0c <__assert_fail@plt+0x3e900>
   4e908:	ldr	r3, [pc, #1124]	; 4ed74 <__assert_fail@plt+0x3db68>
   4e90c:	ldr	r1, [pc, #944]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4e910:	ldr	r2, [pc, #1088]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4e914:	ldr	r3, [r3]
   4e918:	mov	r9, #0
   4e91c:	strb	r3, [r1, #1798]	; 0x706
   4e920:	ldr	r3, [sp, #136]	; 0x88
   4e924:	str	r7, [sp, #356]	; 0x164
   4e928:	str	r2, [r1, #1748]	; 0x6d4
   4e92c:	strb	r9, [r1, #1796]	; 0x704
   4e930:	strb	r9, [r1, #1799]	; 0x707
   4e934:	str	r3, [sp, #116]	; 0x74
   4e938:	ldr	r1, [pc, #900]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4e93c:	ldr	r2, [sp, #144]	; 0x90
   4e940:	str	sl, [sp]
   4e944:	add	r3, r2, #24
   4e948:	ldrb	r1, [r1, #1796]	; 0x704
   4e94c:	add	r2, r2, #16
   4e950:	add	r0, sp, #344	; 0x158
   4e954:	bl	3e038 <__assert_fail@plt+0x2ce2c>
   4e958:	ldr	r3, [sp, #116]	; 0x74
   4e95c:	cmp	r3, #8
   4e960:	strd	r0, [r7, #32]
   4e964:	bhi	4eb80 <__assert_fail@plt+0x3d974>
   4e968:	ldr	r3, [sp, #344]	; 0x158
   4e96c:	ldr	r2, [sp, #116]	; 0x74
   4e970:	add	r2, r3, r2
   4e974:	cmp	sl, r2
   4e978:	bls	4ebc0 <__assert_fail@plt+0x3d9b4>
   4e97c:	ldr	r1, [sp, #116]	; 0x74
   4e980:	sub	r2, r1, #1
   4e984:	cmp	r2, #7
   4e988:	bhi	4ebcc <__assert_fail@plt+0x3d9c0>
   4e98c:	mov	r0, r3
   4e990:	ldr	r3, [pc, #996]	; 4ed7c <__assert_fail@plt+0x3db70>
   4e994:	ldr	r3, [r3]
   4e998:	blx	r3
   4e99c:	ldr	r3, [sp, #344]	; 0x158
   4e9a0:	strd	r0, [r7, #40]	; 0x28
   4e9a4:	ldr	r2, [sp, #356]	; 0x164
   4e9a8:	ldr	r1, [sp, #116]	; 0x74
   4e9ac:	add	r0, r3, r1
   4e9b0:	ldr	r3, [r2, #20]
   4e9b4:	str	r0, [sp, #344]	; 0x158
   4e9b8:	ldrb	r3, [r3]
   4e9bc:	cmp	r3, #122	; 0x7a
   4e9c0:	beq	4efb0 <__assert_fail@plt+0x3dda4>
   4e9c4:	ldr	r5, [pc, #760]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4e9c8:	ldrd	r2, [sp, #24]
   4e9cc:	mov	r0, #0
   4e9d0:	ldrb	r1, [r5, #1798]	; 0x706
   4e9d4:	str	r1, [sp]
   4e9d8:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e9dc:	ldrd	r2, [sp, #120]	; 0x78
   4e9e0:	str	r6, [sp]
   4e9e4:	mov	r4, r0
   4e9e8:	mov	r0, #0
   4e9ec:	bl	3c744 <__assert_fail@plt+0x2b538>
   4e9f0:	ldr	r3, [sp, #356]	; 0x164
   4e9f4:	ldr	ip, [sp, #128]	; 0x80
   4e9f8:	mov	r2, r4
   4e9fc:	ldr	r3, [r3, #4]
   4ea00:	mov	r1, r8
   4ea04:	sub	r3, r3, ip
   4ea08:	str	r3, [sp]
   4ea0c:	mov	r3, r0
   4ea10:	ldr	r0, [pc, #652]	; 4eca4 <__assert_fail@plt+0x3da98>
   4ea14:	bl	10f24 <printf@plt>
   4ea18:	ldrb	r3, [r5, #1799]	; 0x707
   4ea1c:	cmp	r3, #0
   4ea20:	bne	4ef40 <__assert_fail@plt+0x3dd34>
   4ea24:	ldr	r5, [pc, #664]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4ea28:	ldrd	r2, [r7, #32]
   4ea2c:	mov	r0, #0
   4ea30:	ldrb	r1, [r5, #1798]	; 0x706
   4ea34:	str	r1, [sp]
   4ea38:	bl	3c744 <__assert_fail@plt+0x2b538>
   4ea3c:	ldr	r1, [r7, #40]	; 0x28
   4ea40:	ldr	r2, [r7, #32]
   4ea44:	ldr	r3, [r7, #36]	; 0x24
   4ea48:	adds	r2, r2, r1
   4ea4c:	ldr	r1, [r7, #44]	; 0x2c
   4ea50:	adc	r3, r3, r1
   4ea54:	mov	r4, r0
   4ea58:	ldrb	r0, [r5, #1798]	; 0x706
   4ea5c:	str	r0, [sp]
   4ea60:	ldr	r0, [pc, #576]	; 4eca8 <__assert_fail@plt+0x3da9c>
   4ea64:	mov	r5, r0
   4ea68:	str	r0, [sp, #112]	; 0x70
   4ea6c:	mov	r0, #0
   4ea70:	bl	3c744 <__assert_fail@plt+0x2b538>
   4ea74:	mov	r1, r4
   4ea78:	mov	r2, r0
   4ea7c:	ldr	r0, [pc, #552]	; 4ecac <__assert_fail@plt+0x3daa0>
   4ea80:	bl	10f24 <printf@plt>
   4ea84:	ldr	r3, [r5]
   4ea88:	cmp	r3, #0
   4ea8c:	bne	4ea9c <__assert_fail@plt+0x3d890>
   4ea90:	ldr	r1, [sp, #368]	; 0x170
   4ea94:	cmp	r1, #0
   4ea98:	bne	4f3a4 <__assert_fail@plt+0x3e198>
   4ea9c:	mov	r5, r7
   4eaa0:	b	4c1cc <__assert_fail@plt+0x3afc0>
   4eaa4:	ldr	r5, [sp, #332]	; 0x14c
   4eaa8:	cmp	r5, #0
   4eaac:	str	r5, [sp, #356]	; 0x164
   4eab0:	beq	4eae0 <__assert_fail@plt+0x3d8d4>
   4eab4:	ldr	r3, [r5, #4]
   4eab8:	cmp	r4, r3
   4eabc:	bne	4ead0 <__assert_fail@plt+0x3d8c4>
   4eac0:	b	4fa80 <__assert_fail@plt+0x3e874>
   4eac4:	ldr	r3, [r5, #4]
   4eac8:	cmp	r3, r4
   4eacc:	beq	4ed80 <__assert_fail@plt+0x3db74>
   4ead0:	ldr	r5, [r5]
   4ead4:	cmp	r5, #0
   4ead8:	bne	4eac4 <__assert_fail@plt+0x3d8b8>
   4eadc:	str	r5, [sp, #356]	; 0x164
   4eae0:	add	r7, r4, #4
   4eae4:	cmp	r7, sl
   4eae8:	movcc	r1, #4
   4eaec:	bcs	4f59c <__assert_fail@plt+0x3e390>
   4eaf0:	ldr	r3, [pc, #644]	; 4ed7c <__assert_fail@plt+0x3db70>
   4eaf4:	mov	r0, r4
   4eaf8:	ldr	r3, [r3]
   4eafc:	blx	r3
   4eb00:	mov	r3, #0
   4eb04:	mvn	r2, #0
   4eb08:	cmp	r1, r3
   4eb0c:	cmpeq	r0, r2
   4eb10:	strd	r0, [sp, #24]
   4eb14:	movne	r5, #4
   4eb18:	beq	4faa0 <__assert_fail@plt+0x3e894>
   4eb1c:	ldrd	r2, [sp, #24]
   4eb20:	orrs	r3, r2, r3
   4eb24:	beq	4f8bc <__assert_fail@plt+0x3e6b0>
   4eb28:	add	r8, r7, r5
   4eb2c:	cmp	r8, sl
   4eb30:	bcc	4f888 <__assert_fail@plt+0x3e67c>
   4eb34:	cmp	r7, sl
   4eb38:	bcs	4eb4c <__assert_fail@plt+0x3d940>
   4eb3c:	sub	r1, sl, r7
   4eb40:	sub	r3, r1, #1
   4eb44:	cmp	r3, #7
   4eb48:	bls	4f88c <__assert_fail@plt+0x3e680>
   4eb4c:	ldr	r3, [sp, #140]	; 0x8c
   4eb50:	cmp	r3, #0
   4eb54:	bne	4f8bc <__assert_fail@plt+0x3e6b0>
   4eb58:	mov	r3, #0
   4eb5c:	cmp	r8, sl
   4eb60:	str	r3, [sp, #356]	; 0x164
   4eb64:	bcc	4f9e0 <__assert_fail@plt+0x3e7d4>
   4eb68:	mov	r2, #5
   4eb6c:	ldr	r1, [pc, #316]	; 4ecb0 <__assert_fail@plt+0x3daa4>
   4eb70:	mov	r0, #0
   4eb74:	bl	10f90 <dcgettext@plt>
   4eb78:	bl	54dd0 <warn@@Base>
   4eb7c:	b	4c050 <__assert_fail@plt+0x3ae44>
   4eb80:	ldr	r4, [sp, #116]	; 0x74
   4eb84:	mov	r3, #5
   4eb88:	str	r3, [sp]
   4eb8c:	ldr	r2, [pc, #288]	; 4ecb4 <__assert_fail@plt+0x3daa8>
   4eb90:	mov	r3, r4
   4eb94:	ldr	r1, [pc, #284]	; 4ecb8 <__assert_fail@plt+0x3daac>
   4eb98:	mov	r0, #0
   4eb9c:	bl	11200 <dcngettext@plt>
   4eba0:	mov	r2, #8
   4eba4:	mov	r1, r4
   4eba8:	bl	548ac <error@@Base>
   4ebac:	ldr	r3, [sp, #344]	; 0x158
   4ebb0:	add	r2, r3, #8
   4ebb4:	cmp	sl, r2
   4ebb8:	movhi	r1, #8
   4ebbc:	bhi	4e98c <__assert_fail@plt+0x3d780>
   4ebc0:	cmp	sl, r3
   4ebc4:	subhi	r1, sl, r3
   4ebc8:	bhi	4e980 <__assert_fail@plt+0x3d774>
   4ebcc:	mov	r0, #0
   4ebd0:	mov	r1, #0
   4ebd4:	strd	r0, [r7, #40]	; 0x28
   4ebd8:	b	4e9a4 <__assert_fail@plt+0x3d798>
   4ebdc:	add	r1, r1, #12
   4ebe0:	cmp	sl, r1
   4ebe4:	bhi	4ef7c <__assert_fail@plt+0x3dd70>
   4ebe8:	cmp	r0, sl
   4ebec:	bcs	4ec00 <__assert_fail@plt+0x3d9f4>
   4ebf0:	sub	r1, sl, r0
   4ebf4:	sub	r3, r1, #1
   4ebf8:	cmp	r3, #7
   4ebfc:	bls	4ef80 <__assert_fail@plt+0x3dd74>
   4ec00:	mov	r2, #0
   4ec04:	mov	r3, #0
   4ec08:	mov	fp, #12
   4ec0c:	strd	r2, [sp, #24]
   4ec10:	mov	r6, #8
   4ec14:	add	r0, r0, r6
   4ec18:	add	fp, r9, fp
   4ec1c:	cmp	fp, r0
   4ec20:	cmpcs	sl, fp
   4ec24:	str	r0, [sp, #344]	; 0x158
   4ec28:	bcs	4c018 <__assert_fail@plt+0x3ae0c>
   4ec2c:	ldrd	r2, [sp, #24]
   4ec30:	str	r6, [sp]
   4ec34:	mov	r0, #0
   4ec38:	bl	3c744 <__assert_fail@plt+0x2b538>
   4ec3c:	ldr	r3, [sp, #128]	; 0x80
   4ec40:	mov	fp, sl
   4ec44:	sub	r2, r9, r3
   4ec48:	mov	r1, r0
   4ec4c:	ldr	r0, [pc, #104]	; 4ecbc <__assert_fail@plt+0x3dab0>
   4ec50:	bl	54dd0 <warn@@Base>
   4ec54:	ldr	r0, [sp, #344]	; 0x158
   4ec58:	b	4c018 <__assert_fail@plt+0x3ae0c>
   4ec5c:	andeq	r2, r0, ip, lsr r0
   4ec60:	andeq	r1, r0, sl, ror #30
   4ec64:	andeq	r2, r8, r8, ror #12
   4ec68:	andeq	r2, r0, ip, asr r0
   4ec6c:	andeq	r2, r8, r8, asr #12
   4ec70:	andeq	r1, r0, sl, asr pc
   4ec74:	andeq	r1, r0, fp, asr pc
   4ec78:	strdeq	r1, [r0], -r8
   4ec7c:	andeq	r2, r0, sl
   4ec80:	andeq	r2, r0, fp
   4ec84:	andeq	r2, r8, ip, asr r5
   4ec88:	ldrdeq	r2, [r8], -ip
   4ec8c:	andeq	r1, r0, lr, lsl #31
   4ec90:	andeq	r2, r8, ip, lsl #6
   4ec94:	andeq	r2, r8, r8, ror #5
   4ec98:	andeq	r2, r8, r4, lsr #14
   4ec9c:	andeq	r2, r8, r0, asr r2
   4eca0:	andeq	r2, r8, ip, ror #2
   4eca4:	strdeq	r2, [r8], -r8
   4eca8:	andeq	lr, r9, r8, asr #26
   4ecac:	andeq	r2, r8, r0, lsr #4
   4ecb0:	andeq	r2, r8, r4, lsr r1
   4ecb4:			; <UNDEFINED> instruction: 0x0007e5b0
   4ecb8:	strdeq	lr, [r7], -ip
   4ecbc:	andeq	r2, r8, r4
   4ecc0:	muleq	r8, r8, r1
   4ecc4:	ldrdeq	ip, [r9], -r0
   4ecc8:	andeq	r2, r8, r8, lsl r2
   4eccc:	andeq	r2, r8, ip, lsl #10
   4ecd0:	andeq	pc, r7, r4, lsr #25
   4ecd4:	andeq	r3, r6, ip, asr #17
   4ecd8:	andeq	r1, r0, sp, lsl #28
   4ecdc:	andeq	lr, r7, r8, lsl #20
   4ece0:	ldrdeq	r2, [r8], -r0
   4ece4:	andeq	r9, r6, r0, lsr #15
   4ece8:	andeq	r2, r8, r4, asr r7
   4ecec:	andeq	r2, r8, r0, asr r0
   4ecf0:	andeq	r2, r8, r4, asr r0
   4ecf4:	andeq	r2, r8, r4, ror r0
   4ecf8:	ldrdeq	r2, [r8], -r4
   4ecfc:	strdeq	r2, [r8], -r4
   4ed00:	andeq	r2, r8, r4, lsl r1
   4ed04:	ldrdeq	r2, [r8], -r0
   4ed08:	andeq	r2, r8, r4, ror r2
   4ed0c:	andeq	sl, r9, ip, lsr #8
   4ed10:	andeq	r2, r8, r8, lsr r4
   4ed14:	andeq	r2, r8, ip, ror r4
   4ed18:	andeq	r2, r8, ip, asr #13
   4ed1c:	andeq	r2, r8, r0, lsr #8
   4ed20:	andeq	r2, r8, r0, asr r4
   4ed24:	muleq	r9, r0, ip
   4ed28:			; <UNDEFINED> instruction: 0x000822b8
   4ed2c:	andeq	r2, r8, r4, lsl #8
   4ed30:	andeq	r2, r8, ip, asr #7
   4ed34:	muleq	r8, r4, r0
   4ed38:	strheq	r2, [r8], -r4
   4ed3c:	andeq	r2, r8, r4, asr r3
   4ed40:	muleq	r8, r4, r2
   4ed44:	andeq	r2, r8, r8, lsr #7
   4ed48:	andeq	r2, r8, r0, lsl #7
   4ed4c:	andeq	r2, r8, ip, ror #11
   4ed50:	andeq	r2, r8, ip, ror #13
   4ed54:	andeq	r2, r8, r8, ror #7
   4ed58:	andeq	fp, r6, ip, ror #2
   4ed5c:	andeq	r2, r8, ip, lsl r6
   4ed60:	andeq	r2, r8, ip, lsr r5
   4ed64:	andeq	r2, r8, r4, lsl #11
   4ed68:	andeq	r2, r8, ip, asr #11
   4ed6c:	andeq	r0, r8, r0, asr #2
   4ed70:			; <UNDEFINED> instruction: 0x0007d2bc
   4ed74:	andeq	lr, r9, ip, lsr #26
   4ed78:	andeq	r2, r8, r4, asr r1
   4ed7c:	andeq	lr, r9, ip, asr sp
   4ed80:	ldr	r3, [sp, #136]	; 0x88
   4ed84:	str	r5, [sp, #356]	; 0x164
   4ed88:	str	r3, [sp, #116]	; 0x74
   4ed8c:	mov	r2, #72	; 0x48
   4ed90:	mov	r1, #0
   4ed94:	ldr	r0, [pc, #-120]	; 4ed24 <__assert_fail@plt+0x3db18>
   4ed98:	bl	110bc <memset@plt>
   4ed9c:	ldr	r4, [pc, #-224]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4eda0:	ldr	r3, [r5, #8]
   4eda4:	mov	r1, #2
   4eda8:	mov	r0, r3
   4edac:	str	r3, [r4, #1736]	; 0x6c8
   4edb0:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   4edb4:	mov	r1, #4
   4edb8:	add	r7, r4, #1728	; 0x6c0
   4edbc:	str	r0, [r4, #1740]	; 0x6cc
   4edc0:	ldr	r0, [r4, #1736]	; 0x6c8
   4edc4:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   4edc8:	ldr	r3, [sp, #356]	; 0x164
   4edcc:	ldr	r2, [r4, #1736]	; 0x6c8
   4edd0:	ldr	r1, [r3, #12]
   4edd4:	lsl	r2, r2, #1
   4edd8:	str	r0, [r4, #1744]	; 0x6d0
   4eddc:	ldr	r0, [r4, #1740]	; 0x6cc
   4ede0:	bl	10f6c <memcpy@plt>
   4ede4:	ldr	r3, [sp, #356]	; 0x164
   4ede8:	ldr	r2, [r4, #1736]	; 0x6c8
   4edec:	ldr	r0, [r4, #1744]	; 0x6d0
   4edf0:	ldr	r1, [r3, #16]
   4edf4:	lsl	r2, r2, #2
   4edf8:	bl	10f6c <memcpy@plt>
   4edfc:	ldr	r0, [sp, #356]	; 0x164
   4ee00:	ldr	r1, [sp, #352]	; 0x160
   4ee04:	ldrb	r3, [r0, #70]	; 0x46
   4ee08:	ldr	r2, [r0, #20]
   4ee0c:	ldrb	ip, [r0, #71]	; 0x47
   4ee10:	strb	r3, [r4, #1798]	; 0x706
   4ee14:	str	r2, [r4, #1748]	; 0x6d4
   4ee18:	ldrb	r3, [r0, #70]	; 0x46
   4ee1c:	ldr	r2, [pc, #-176]	; 4ed74 <__assert_fail@plt+0x3db68>
   4ee20:	strb	ip, [r4, #1799]	; 0x707
   4ee24:	ldr	ip, [r0, #24]
   4ee28:	ldr	lr, [r0, #28]
   4ee2c:	str	r3, [r2]
   4ee30:	str	ip, [r4, #1752]	; 0x6d8
   4ee34:	ldrd	r2, [r0, #56]	; 0x38
   4ee38:	ldr	ip, [r0, #48]	; 0x30
   4ee3c:	ldr	r0, [r0, #64]	; 0x40
   4ee40:	cmp	r1, #0
   4ee44:	str	r0, [r4, #1792]	; 0x700
   4ee48:	subne	r1, r1, #1
   4ee4c:	ldr	r0, [pc, #-304]	; 4ed24 <__assert_fail@plt+0x3db18>
   4ee50:	str	lr, [r4, #1756]	; 0x6dc
   4ee54:	strd	r2, [r7, #56]	; 0x38
   4ee58:	str	ip, [r4, #1776]	; 0x6f0
   4ee5c:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4ee60:	cmp	r0, #0
   4ee64:	blt	4fb0c <__assert_fail@plt+0x3e900>
   4ee68:	ldr	r3, [sp, #356]	; 0x164
   4ee6c:	ldr	r2, [sp, #128]	; 0x80
   4ee70:	ldrb	r3, [r3, #68]	; 0x44
   4ee74:	sub	r8, r9, r2
   4ee78:	ldr	r2, [pc, #-444]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4ee7c:	cmp	r3, #0
   4ee80:	ldrb	r9, [r2, #1799]	; 0x707
   4ee84:	strb	r3, [r2, #1796]	; 0x704
   4ee88:	beq	4eeb0 <__assert_fail@plt+0x3dca4>
   4ee8c:	and	r3, r3, #7
   4ee90:	sub	r3, r3, #2
   4ee94:	cmp	r3, #2
   4ee98:	ldrls	r2, [pc, #-304]	; 4ed70 <__assert_fail@plt+0x3db64>
   4ee9c:	ldrhi	r3, [pc, #-304]	; 4ed74 <__assert_fail@plt+0x3db68>
   4eea0:	addls	r3, r2, r3, lsl #2
   4eea4:	ldrhi	r3, [r3]
   4eea8:	ldrls	r3, [r3, #1024]	; 0x400
   4eeac:	str	r3, [sp, #116]	; 0x74
   4eeb0:	cmp	r9, #0
   4eeb4:	beq	4e938 <__assert_fail@plt+0x3d72c>
   4eeb8:	cmp	r9, #4
   4eebc:	bls	4eee4 <__assert_fail@plt+0x3dcd8>
   4eec0:	ldr	r4, [pc, #-516]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4eec4:	mov	r2, #5
   4eec8:	ldr	r1, [pc, #-528]	; 4ecc0 <__assert_fail@plt+0x3dab4>
   4eecc:	mov	r0, #0
   4eed0:	bl	10f90 <dcgettext@plt>
   4eed4:	mov	r9, #4
   4eed8:	ldrb	r1, [r4, #1799]	; 0x707
   4eedc:	bl	54dd0 <warn@@Base>
   4eee0:	strb	r9, [r4, #1799]	; 0x707
   4eee4:	ldr	r3, [sp, #344]	; 0x158
   4eee8:	add	r2, r3, r9
   4eeec:	cmp	sl, r2
   4eef0:	bhi	4ef50 <__assert_fail@plt+0x3dd44>
   4eef4:	cmp	r3, sl
   4eef8:	bcs	4ef0c <__assert_fail@plt+0x3dd00>
   4eefc:	sub	r9, sl, r3
   4ef00:	sub	r2, r9, #1
   4ef04:	cmp	r2, #7
   4ef08:	bls	4ef50 <__assert_fail@plt+0x3dd44>
   4ef0c:	mov	r9, #0
   4ef10:	ldr	r2, [pc, #-596]	; 4ecc4 <__assert_fail@plt+0x3dab8>
   4ef14:	ldrb	r2, [r2, #1799]	; 0x707
   4ef18:	add	r3, r3, r2
   4ef1c:	str	r3, [sp, #344]	; 0x158
   4ef20:	b	4e938 <__assert_fail@plt+0x3d72c>
   4ef24:	mov	r2, #0
   4ef28:	mov	r3, #0
   4ef2c:	strd	r2, [sp, #120]	; 0x78
   4ef30:	ldr	r3, [sp, #128]	; 0x80
   4ef34:	ldr	r2, [sp, #120]	; 0x78
   4ef38:	add	r4, r3, r2
   4ef3c:	b	4e848 <__assert_fail@plt+0x3d63c>
   4ef40:	mov	r1, r9
   4ef44:	ldr	r0, [pc, #-644]	; 4ecc8 <__assert_fail@plt+0x3dabc>
   4ef48:	bl	10f24 <printf@plt>
   4ef4c:	b	4ea24 <__assert_fail@plt+0x3d818>
   4ef50:	mov	r0, r3
   4ef54:	ldr	r3, [pc, #-480]	; 4ed7c <__assert_fail@plt+0x3db70>
   4ef58:	mov	r1, r9
   4ef5c:	ldr	r3, [r3]
   4ef60:	blx	r3
   4ef64:	ldr	r3, [sp, #344]	; 0x158
   4ef68:	mov	r9, r0
   4ef6c:	b	4ef10 <__assert_fail@plt+0x3dd04>
   4ef70:	mov	r2, #5
   4ef74:	ldr	r1, [pc, #-688]	; 4eccc <__assert_fail@plt+0x3dac0>
   4ef78:	b	4e4a4 <__assert_fail@plt+0x3d298>
   4ef7c:	mov	r1, #8
   4ef80:	ldr	r3, [pc, #-524]	; 4ed7c <__assert_fail@plt+0x3db70>
   4ef84:	ldr	r3, [r3]
   4ef88:	blx	r3
   4ef8c:	strd	r0, [sp, #24]
   4ef90:	add	fp, r0, #12
   4ef94:	ldr	r0, [sp, #344]	; 0x158
   4ef98:	b	4ec10 <__assert_fail@plt+0x3da04>
   4ef9c:	mov	r0, r5
   4efa0:	add	r2, sp, #352	; 0x160
   4efa4:	add	r1, sp, #360	; 0x168
   4efa8:	bl	3caf8 <__assert_fail@plt+0x2b8ec>
   4efac:	b	4c5ac <__assert_fail@plt+0x3b3a0>
   4efb0:	mov	r3, sl
   4efb4:	mov	r2, #0
   4efb8:	add	r1, sp, #348	; 0x15c
   4efbc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   4efc0:	add	r2, sp, #336	; 0x150
   4efc4:	mov	r3, #0
   4efc8:	str	r3, [sp, #340]	; 0x154
   4efcc:	mov	r4, r0
   4efd0:	mov	r5, r1
   4efd4:	str	r0, [sp, #336]	; 0x150
   4efd8:	ldrd	r0, [r2]
   4efdc:	str	r4, [sp, #368]	; 0x170
   4efe0:	cmp	r1, r5
   4efe4:	cmpeq	r0, r4
   4efe8:	mov	r1, r4
   4efec:	beq	4f038 <__assert_fail@plt+0x3de2c>
   4eff0:	ldr	r1, [pc, #-808]	; 4ecd0 <__assert_fail@plt+0x3dac4>
   4eff4:	mov	r2, #5
   4eff8:	mov	r0, r3
   4effc:	bl	10f90 <dcgettext@plt>
   4f000:	mov	r3, #0
   4f004:	str	r3, [sp]
   4f008:	mov	r2, r4
   4f00c:	mov	r3, r5
   4f010:	str	r0, [sp, #112]	; 0x70
   4f014:	ldr	r0, [pc, #-840]	; 4ecd4 <__assert_fail@plt+0x3dac8>
   4f018:	bl	3c744 <__assert_fail@plt+0x2b538>
   4f01c:	ldr	r1, [sp, #112]	; 0x70
   4f020:	ldr	r2, [pc, #-848]	; 4ecd8 <__assert_fail@plt+0x3dacc>
   4f024:	mov	r3, r0
   4f028:	mov	r0, r1
   4f02c:	ldr	r1, [pc, #-856]	; 4ecdc <__assert_fail@plt+0x3dad0>
   4f030:	bl	548ac <error@@Base>
   4f034:	ldr	r1, [sp, #368]	; 0x170
   4f038:	ldr	r3, [sp, #344]	; 0x158
   4f03c:	ldr	r2, [sp, #348]	; 0x15c
   4f040:	add	r3, r3, r2
   4f044:	add	r2, r3, r1
   4f048:	cmp	r2, sl
   4f04c:	str	r3, [sp, #364]	; 0x16c
   4f050:	str	r2, [sp, #344]	; 0x158
   4f054:	bcs	4f06c <__assert_fail@plt+0x3de60>
   4f058:	cmp	r3, r2
   4f05c:	movls	r3, #0
   4f060:	movhi	r3, #1
   4f064:	orrs	r3, r3, r1, lsr #31
   4f068:	beq	4e9c4 <__assert_fail@plt+0x3d7b8>
   4f06c:	ldr	r1, [pc, #-916]	; 4ece0 <__assert_fail@plt+0x3dad4>
   4f070:	mov	r2, #5
   4f074:	mov	r0, #0
   4f078:	mov	r4, r0
   4f07c:	bl	10f90 <dcgettext@plt>
   4f080:	mov	r3, r4
   4f084:	ldr	r2, [sp, #368]	; 0x170
   4f088:	str	r4, [sp]
   4f08c:	mov	r5, r0
   4f090:	ldr	r0, [pc, #-948]	; 4ece4 <__assert_fail@plt+0x3dad8>
   4f094:	bl	3c744 <__assert_fail@plt+0x2b538>
   4f098:	mov	r1, r0
   4f09c:	mov	r0, r5
   4f0a0:	bl	54dd0 <warn@@Base>
   4f0a4:	str	r4, [sp, #364]	; 0x16c
   4f0a8:	str	r4, [sp, #368]	; 0x170
   4f0ac:	str	sl, [sp, #344]	; 0x158
   4f0b0:	b	4e9c4 <__assert_fail@plt+0x3d7b8>
   4f0b4:	cmp	r1, #0
   4f0b8:	beq	4f830 <__assert_fail@plt+0x3e624>
   4f0bc:	ldrd	r2, [r5, #12]
   4f0c0:	lsl	r6, r6, #1
   4f0c4:	mov	r9, #0
   4f0c8:	mov	r1, #8
   4f0cc:	strh	r1, [r2, r6]
   4f0d0:	str	r9, [r3, r8, lsl #2]
   4f0d4:	str	r9, [sp, #24]
   4f0d8:	b	4c534 <__assert_fail@plt+0x3b328>
   4f0dc:	cmp	r1, #0
   4f0e0:	beq	4f5e8 <__assert_fail@plt+0x3e3dc>
   4f0e4:	ldr	r3, [sp, #356]	; 0x164
   4f0e8:	sxth	r2, r8
   4f0ec:	ldr	r1, [r3, #8]
   4f0f0:	cmp	r8, r1
   4f0f4:	lsl	r1, r2, #1
   4f0f8:	bcc	4f874 <__assert_fail@plt+0x3e668>
   4f0fc:	ldr	r0, [r5, #12]
   4f100:	ldr	r3, [r5, #16]
   4f104:	mov	r9, #0
   4f108:	mov	ip, #7
   4f10c:	strh	ip, [r0, r1]
   4f110:	str	r9, [sp, #24]
   4f114:	str	r9, [r3, r2, lsl #2]
   4f118:	ldr	r4, [sp, #344]	; 0x158
   4f11c:	b	4c534 <__assert_fail@plt+0x3b328>
   4f120:	mov	r1, #1
   4f124:	ldr	r3, [pc, #-944]	; 4ed7c <__assert_fail@plt+0x3db70>
   4f128:	ldr	r3, [r3]
   4f12c:	blx	r3
   4f130:	mov	r6, r0
   4f134:	mov	r4, r1
   4f138:	ldr	r0, [sp, #344]	; 0x158
   4f13c:	b	4e750 <__assert_fail@plt+0x3d544>
   4f140:	cmp	r1, #0
   4f144:	beq	4f78c <__assert_fail@plt+0x3e580>
   4f148:	ldr	r3, [r5, #28]
   4f14c:	ldr	r2, [r5, #12]
   4f150:	lsl	r6, r6, #1
   4f154:	mul	r8, r3, r8
   4f158:	ldr	r3, [r5, #16]
   4f15c:	mov	r1, #20
   4f160:	strh	r1, [r2, r6]
   4f164:	mov	r2, #0
   4f168:	str	r2, [sp, #24]
   4f16c:	ldr	r2, [sp, #116]	; 0x74
   4f170:	str	r8, [r3, r2, lsl #2]
   4f174:	b	4c534 <__assert_fail@plt+0x3b328>
   4f178:	cmp	r1, #0
   4f17c:	beq	4f76c <__assert_fail@plt+0x3e560>
   4f180:	ldr	r3, [sp, #356]	; 0x164
   4f184:	lsl	r1, r6, #1
   4f188:	lsl	r2, r6, #2
   4f18c:	ldr	r0, [r3, #8]
   4f190:	ldr	ip, [r5, #12]
   4f194:	cmp	r0, r6
   4f198:	ldr	r0, [r5, #16]
   4f19c:	bhi	4f54c <__assert_fail@plt+0x3e340>
   4f1a0:	mov	r3, #0
   4f1a4:	mov	lr, #7
   4f1a8:	strh	lr, [ip, r1]
   4f1ac:	str	r3, [sp, #24]
   4f1b0:	str	r3, [r0, r2]
   4f1b4:	b	4c534 <__assert_fail@plt+0x3b328>
   4f1b8:	cmp	r1, #0
   4f1bc:	beq	4f694 <__assert_fail@plt+0x3e488>
   4f1c0:	ldrd	r2, [r5, #12]
   4f1c4:	lsl	r6, r6, #1
   4f1c8:	mov	r9, #0
   4f1cc:	mov	r1, #7
   4f1d0:	strh	r1, [r2, r6]
   4f1d4:	str	r9, [r3, r8, lsl #2]
   4f1d8:	str	r9, [sp, #24]
   4f1dc:	b	4c534 <__assert_fail@plt+0x3b328>
   4f1e0:	cmp	r3, #0
   4f1e4:	beq	4f658 <__assert_fail@plt+0x3e44c>
   4f1e8:	ldrd	r2, [r5, #12]
   4f1ec:	lsl	r6, r6, #1
   4f1f0:	mov	r1, #9
   4f1f4:	b	4f160 <__assert_fail@plt+0x3df54>
   4f1f8:	ldr	r1, [pc, #-1304]	; 4ece8 <__assert_fail@plt+0x3dadc>
   4f1fc:	mov	r0, #0
   4f200:	bl	10f90 <dcgettext@plt>
   4f204:	ldr	r3, [sp, #24]
   4f208:	mov	r1, r3
   4f20c:	bl	54dd0 <warn@@Base>
   4f210:	b	4e7d4 <__assert_fail@plt+0x3d5c8>
   4f214:	mov	r1, #8
   4f218:	ldr	r3, [pc, #-1188]	; 4ed7c <__assert_fail@plt+0x3db70>
   4f21c:	ldr	r3, [r3]
   4f220:	blx	r3
   4f224:	mov	r6, r0
   4f228:	mov	r4, r1
   4f22c:	ldr	r0, [sp, #344]	; 0x158
   4f230:	b	4d330 <__assert_fail@plt+0x3c124>
   4f234:	ldr	r0, [pc, #-1360]	; 4ecec <__assert_fail@plt+0x3dae0>
   4f238:	bl	11014 <puts@plt>
   4f23c:	ldr	r1, [sp, #372]	; 0x174
   4f240:	ldr	r0, [pc, #-1368]	; 4ecf0 <__assert_fail@plt+0x3dae4>
   4f244:	bl	10f24 <printf@plt>
   4f248:	ldr	r1, [r5, #20]
   4f24c:	ldr	r0, [pc, #-1376]	; 4ecf4 <__assert_fail@plt+0x3dae8>
   4f250:	bl	10f24 <printf@plt>
   4f254:	ldr	r3, [sp, #372]	; 0x174
   4f258:	cmp	r3, #3
   4f25c:	bgt	4f6c0 <__assert_fail@plt+0x3e4b4>
   4f260:	ldr	r1, [r5, #24]
   4f264:	ldr	r0, [pc, #-1396]	; 4ecf8 <__assert_fail@plt+0x3daec>
   4f268:	bl	10f24 <printf@plt>
   4f26c:	ldr	r1, [r5, #28]
   4f270:	ldr	r0, [pc, #-1404]	; 4ecfc <__assert_fail@plt+0x3daf0>
   4f274:	bl	10f24 <printf@plt>
   4f278:	ldr	r1, [r5, #64]	; 0x40
   4f27c:	ldr	r0, [pc, #-1412]	; 4ed00 <__assert_fail@plt+0x3daf4>
   4f280:	bl	10f24 <printf@plt>
   4f284:	ldr	r1, [sp, #368]	; 0x170
   4f288:	cmp	r1, #0
   4f28c:	bne	4f6b4 <__assert_fail@plt+0x3e4a8>
   4f290:	ldr	r3, [pc, #-1420]	; 4ed0c <__assert_fail@plt+0x3db00>
   4f294:	mov	r0, #10
   4f298:	ldr	r1, [r3]
   4f29c:	bl	11158 <putc@plt>
   4f2a0:	b	4c1c8 <__assert_fail@plt+0x3afbc>
   4f2a4:	ldr	r3, [sp, #136]	; 0x88
   4f2a8:	str	r3, [sp, #116]	; 0x74
   4f2ac:	b	4c170 <__assert_fail@plt+0x3af64>
   4f2b0:	mov	r1, #2
   4f2b4:	ldr	r3, [pc, #-1344]	; 4ed7c <__assert_fail@plt+0x3db70>
   4f2b8:	ldr	r3, [r3]
   4f2bc:	blx	r3
   4f2c0:	mov	r6, r0
   4f2c4:	mov	r4, r1
   4f2c8:	ldr	r0, [sp, #344]	; 0x158
   4f2cc:	b	4e670 <__assert_fail@plt+0x3d464>
   4f2d0:	ldrb	r1, [r5, #70]	; 0x46
   4f2d4:	mov	r2, r6
   4f2d8:	mov	r3, r7
   4f2dc:	str	r1, [sp]
   4f2e0:	bl	3c744 <__assert_fail@plt+0x2b538>
   4f2e4:	mov	r1, r0
   4f2e8:	ldr	r0, [pc, #-1516]	; 4ed04 <__assert_fail@plt+0x3daf8>
   4f2ec:	bl	10f24 <printf@plt>
   4f2f0:	b	4e63c <__assert_fail@plt+0x3d430>
   4f2f4:	mov	r1, #4
   4f2f8:	ldr	r3, [pc, #-1412]	; 4ed7c <__assert_fail@plt+0x3db70>
   4f2fc:	ldr	r3, [r3]
   4f300:	blx	r3
   4f304:	mov	r6, r0
   4f308:	mov	r4, r1
   4f30c:	ldr	r0, [sp, #344]	; 0x158
   4f310:	b	4d804 <__assert_fail@plt+0x3c5f8>
   4f314:	cmp	r1, #0
   4f318:	beq	4f6dc <__assert_fail@plt+0x3e4d0>
   4f31c:	ldr	r3, [r5, #28]
   4f320:	ldr	r2, [r5, #12]
   4f324:	lsl	r6, r6, #1
   4f328:	mul	r8, r3, r8
   4f32c:	mov	r1, #128	; 0x80
   4f330:	ldr	r3, [r5, #16]
   4f334:	b	4f160 <__assert_fail@plt+0x3df54>
   4f338:	cmp	r1, #0
   4f33c:	beq	4f744 <__assert_fail@plt+0x3e538>
   4f340:	ldr	r3, [r5, #28]
   4f344:	sxth	r8, r8
   4f348:	ldr	r1, [r5, #12]
   4f34c:	mul	r6, r3, r6
   4f350:	lsl	r2, r8, #1
   4f354:	ldr	r3, [r5, #16]
   4f358:	mov	r0, #128	; 0x80
   4f35c:	strh	r0, [r1, r2]
   4f360:	mov	r2, #0
   4f364:	str	r2, [sp, #24]
   4f368:	str	r6, [r3, r8, lsl #2]
   4f36c:	b	4c534 <__assert_fail@plt+0x3b328>
   4f370:	ldr	r4, [r5, #24]
   4f374:	ldrd	r6, [r5, #32]
   4f378:	ldrb	r1, [r5, #70]	; 0x46
   4f37c:	mul	r4, r4, r8
   4f380:	str	r1, [sp]
   4f384:	adds	r2, r6, r4
   4f388:	adc	r3, r7, #0
   4f38c:	bl	3c744 <__assert_fail@plt+0x2b538>
   4f390:	mov	r1, r4
   4f394:	mov	r2, r0
   4f398:	ldr	r0, [pc, #-1688]	; 4ed08 <__assert_fail@plt+0x3dafc>
   4f39c:	bl	10f24 <printf@plt>
   4f3a0:	b	4d128 <__assert_fail@plt+0x3bf1c>
   4f3a4:	ldr	r0, [sp, #364]	; 0x16c
   4f3a8:	bl	3db70 <__assert_fail@plt+0x2c964>
   4f3ac:	ldr	r3, [pc, #-1704]	; 4ed0c <__assert_fail@plt+0x3db00>
   4f3b0:	mov	r0, #10
   4f3b4:	mov	r5, r7
   4f3b8:	ldr	r1, [r3]
   4f3bc:	bl	11158 <putc@plt>
   4f3c0:	b	4c1cc <__assert_fail@plt+0x3afc0>
   4f3c4:	and	r3, r4, r5
   4f3c8:	cmp	r6, #8
   4f3cc:	cmneq	r3, #1
   4f3d0:	mov	r2, r4
   4f3d4:	mvneq	r3, #0
   4f3d8:	mvneq	r2, #0
   4f3dc:	mov	r1, r4
   4f3e0:	strdeq	r2, [sp, #120]	; 0x78
   4f3e4:	bne	4ef30 <__assert_fail@plt+0x3dd24>
   4f3e8:	b	4c0cc <__assert_fail@plt+0x3aec0>
   4f3ec:	ldr	r3, [r3]
   4f3f0:	cmp	r3, #0
   4f3f4:	beq	4f408 <__assert_fail@plt+0x3e1fc>
   4f3f8:	ldr	r3, [sp, #132]	; 0x84
   4f3fc:	ldrb	r3, [r3]
   4f400:	cmp	r3, #0
   4f404:	beq	4d2d0 <__assert_fail@plt+0x3c0c4>
   4f408:	mov	r1, #0
   4f40c:	mov	r0, r8
   4f410:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f414:	ldr	r3, [r5, #28]
   4f418:	ldr	r4, [sp, #132]	; 0x84
   4f41c:	mul	r3, r3, r6
   4f420:	mov	r1, r4
   4f424:	mov	r2, r0
   4f428:	ldr	r0, [pc, #-1760]	; 4ed50 <__assert_fail@plt+0x3db44>
   4f42c:	bl	10f24 <printf@plt>
   4f430:	ldrb	r3, [r4]
   4f434:	cmp	r3, #0
   4f438:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4f43c:	b	4d2d0 <__assert_fail@plt+0x3c0c4>
   4f440:	ldr	r3, [r3]
   4f444:	cmp	r3, #0
   4f448:	beq	4f45c <__assert_fail@plt+0x3e250>
   4f44c:	ldr	r3, [sp, #132]	; 0x84
   4f450:	ldrb	r3, [r3]
   4f454:	cmp	r3, #0
   4f458:	beq	4d630 <__assert_fail@plt+0x3c424>
   4f45c:	mov	r1, #0
   4f460:	mov	r0, r6
   4f464:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f468:	ldr	r3, [r5, #28]
   4f46c:	ldr	r9, [sp, #132]	; 0x84
   4f470:	mul	r3, r3, r4
   4f474:	mov	r1, r9
   4f478:	mov	r2, r0
   4f47c:	ldr	r0, [pc, #-1832]	; 4ed5c <__assert_fail@plt+0x3db50>
   4f480:	bl	10f24 <printf@plt>
   4f484:	ldrb	r3, [r9]
   4f488:	cmp	r3, #0
   4f48c:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4f490:	b	4d630 <__assert_fail@plt+0x3c424>
   4f494:	ldr	r3, [r3]
   4f498:	cmp	r3, #0
   4f49c:	beq	4f4b0 <__assert_fail@plt+0x3e2a4>
   4f4a0:	ldr	r3, [sp, #132]	; 0x84
   4f4a4:	ldrb	r3, [r3]
   4f4a8:	cmp	r3, #0
   4f4ac:	beq	4ddc8 <__assert_fail@plt+0x3cbbc>
   4f4b0:	mov	r1, #0
   4f4b4:	mov	r0, r6
   4f4b8:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f4bc:	ldr	r3, [r5, #28]
   4f4c0:	ldr	r9, [sp, #132]	; 0x84
   4f4c4:	mul	r3, r3, r4
   4f4c8:	mov	r1, r9
   4f4cc:	mov	r2, r0
   4f4d0:	ldr	r0, [pc, #-1932]	; 4ed4c <__assert_fail@plt+0x3db40>
   4f4d4:	bl	10f24 <printf@plt>
   4f4d8:	ldrb	r3, [r9]
   4f4dc:	cmp	r3, #0
   4f4e0:	bne	4d0f8 <__assert_fail@plt+0x3beec>
   4f4e4:	b	4ddc8 <__assert_fail@plt+0x3cbbc>
   4f4e8:	ldr	r0, [pc, #-2016]	; 4ed10 <__assert_fail@plt+0x3db04>
   4f4ec:	bl	11014 <puts@plt>
   4f4f0:	ldr	r3, [sp, #148]	; 0x94
   4f4f4:	cmp	r3, #0
   4f4f8:	bne	4da30 <__assert_fail@plt+0x3c824>
   4f4fc:	ldr	r3, [sp, #112]	; 0x70
   4f500:	ldr	r3, [r3]
   4f504:	cmp	r3, #0
   4f508:	str	r3, [sp, #24]
   4f50c:	beq	4e4bc <__assert_fail@plt+0x3d2b0>
   4f510:	mov	r3, #0
   4f514:	mov	r4, r3
   4f518:	ldr	r0, [pc, #-2060]	; 4ed14 <__assert_fail@plt+0x3db08>
   4f51c:	str	r3, [sp, #24]
   4f520:	bl	11014 <puts@plt>
   4f524:	str	r4, [sp, #148]	; 0x94
   4f528:	ldr	r4, [sp, #344]	; 0x158
   4f52c:	b	4c534 <__assert_fail@plt+0x3b328>
   4f530:	mov	r1, r6
   4f534:	ldr	r0, [pc, #-2084]	; 4ed18 <__assert_fail@plt+0x3db0c>
   4f538:	bl	10f24 <printf@plt>
   4f53c:	b	4e4bc <__assert_fail@plt+0x3d2b0>
   4f540:	ldr	r0, [pc, #-2092]	; 4ed1c <__assert_fail@plt+0x3db10>
   4f544:	bl	11014 <puts@plt>
   4f548:	b	4dad8 <__assert_fail@plt+0x3c8cc>
   4f54c:	ldr	lr, [r3, #12]
   4f550:	ldr	r3, [r3, #16]
   4f554:	mov	r6, #0
   4f558:	ldrsh	lr, [lr, r1]
   4f55c:	ldr	r3, [r3, r2]
   4f560:	str	r6, [sp, #24]
   4f564:	strh	lr, [ip, r1]
   4f568:	str	r3, [r0, r2]
   4f56c:	b	4c534 <__assert_fail@plt+0x3b328>
   4f570:	mov	r2, #5
   4f574:	ldr	r1, [pc, #-2140]	; 4ed20 <__assert_fail@plt+0x3db14>
   4f578:	mov	r0, #0
   4f57c:	mov	r9, #0
   4f580:	bl	10f90 <dcgettext@plt>
   4f584:	bl	54dd0 <warn@@Base>
   4f588:	str	r4, [sp, #148]	; 0x94
   4f58c:	str	r9, [r5, #8]
   4f590:	str	r9, [sp, #24]
   4f594:	ldr	r4, [sp, #344]	; 0x158
   4f598:	b	4c534 <__assert_fail@plt+0x3b328>
   4f59c:	cmp	r4, sl
   4f5a0:	bcs	4f5b4 <__assert_fail@plt+0x3e3a8>
   4f5a4:	sub	r1, sl, r4
   4f5a8:	sub	r3, r1, #1
   4f5ac:	cmp	r3, #7
   4f5b0:	bls	4eaf0 <__assert_fail@plt+0x3d8e4>
   4f5b4:	ldr	r5, [sp, #356]	; 0x164
   4f5b8:	mov	r2, #0
   4f5bc:	mov	r3, #0
   4f5c0:	strd	r2, [sp, #24]
   4f5c4:	mov	r2, #72	; 0x48
   4f5c8:	mov	r1, #0
   4f5cc:	ldr	r0, [pc, #-2224]	; 4ed24 <__assert_fail@plt+0x3db18>
   4f5d0:	bl	110bc <memset@plt>
   4f5d4:	cmp	r5, #0
   4f5d8:	beq	4e89c <__assert_fail@plt+0x3d690>
   4f5dc:	ldr	r3, [sp, #136]	; 0x88
   4f5e0:	str	r3, [sp, #116]	; 0x74
   4f5e4:	b	4ed9c <__assert_fail@plt+0x3db90>
   4f5e8:	mov	r0, r8
   4f5ec:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f5f0:	ldr	r1, [pc, #-2208]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f5f4:	mov	r2, r0
   4f5f8:	ldr	r0, [pc, #-2264]	; 4ed28 <__assert_fail@plt+0x3db1c>
   4f5fc:	bl	10f24 <printf@plt>
   4f600:	ldr	r3, [sp, #356]	; 0x164
   4f604:	sxth	r2, r8
   4f608:	ldr	r1, [r3, #8]
   4f60c:	cmp	r1, r8
   4f610:	lsl	r1, r2, #1
   4f614:	bls	4f0fc <__assert_fail@plt+0x3def0>
   4f618:	ldr	ip, [sp, #112]	; 0x70
   4f61c:	ldr	r0, [r3, #12]
   4f620:	ldr	ip, [ip]
   4f624:	ldrsh	r0, [r0, r1]
   4f628:	cmp	ip, #0
   4f62c:	bne	4f87c <__assert_fail@plt+0x3e670>
   4f630:	ldr	ip, [r3, #16]
   4f634:	ldr	lr, [r5, #12]
   4f638:	ldr	r3, [r5, #16]
   4f63c:	ldr	ip, [ip, r2, lsl #2]
   4f640:	ldr	r4, [sp, #344]	; 0x158
   4f644:	strh	r0, [lr, r1]
   4f648:	str	ip, [r3, r2, lsl #2]
   4f64c:	mov	r3, #0
   4f650:	str	r3, [sp, #24]
   4f654:	b	4c534 <__assert_fail@plt+0x3b328>
   4f658:	mov	r1, r3
   4f65c:	mov	r0, r6
   4f660:	str	r3, [sp, #24]
   4f664:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f668:	ldr	r1, [pc, #-2328]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f66c:	mov	r2, r0
   4f670:	ldr	r0, [pc, #-2380]	; 4ed2c <__assert_fail@plt+0x3db20>
   4f674:	bl	10f24 <printf@plt>
   4f678:	ldr	r3, [sp, #24]
   4f67c:	mov	r0, r8
   4f680:	mov	r1, r3
   4f684:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f688:	bl	11014 <puts@plt>
   4f68c:	ldr	r4, [sp, #344]	; 0x158
   4f690:	b	4f1e8 <__assert_fail@plt+0x3dfdc>
   4f694:	mov	r0, r6
   4f698:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f69c:	ldr	r1, [pc, #-2380]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f6a0:	mov	r2, r0
   4f6a4:	ldr	r0, [pc, #-2428]	; 4ed30 <__assert_fail@plt+0x3db24>
   4f6a8:	bl	10f24 <printf@plt>
   4f6ac:	ldr	r4, [sp, #344]	; 0x158
   4f6b0:	b	4f1c0 <__assert_fail@plt+0x3dfb4>
   4f6b4:	ldr	r0, [sp, #364]	; 0x16c
   4f6b8:	bl	3db70 <__assert_fail@plt+0x2c964>
   4f6bc:	b	4f290 <__assert_fail@plt+0x3e084>
   4f6c0:	ldrb	r1, [r5, #70]	; 0x46
   4f6c4:	ldr	r0, [pc, #-2456]	; 4ed34 <__assert_fail@plt+0x3db28>
   4f6c8:	bl	10f24 <printf@plt>
   4f6cc:	ldrb	r1, [r5, #71]	; 0x47
   4f6d0:	ldr	r0, [pc, #-2464]	; 4ed38 <__assert_fail@plt+0x3db2c>
   4f6d4:	bl	10f24 <printf@plt>
   4f6d8:	b	4f260 <__assert_fail@plt+0x3e054>
   4f6dc:	mov	r0, r6
   4f6e0:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f6e4:	ldr	r3, [r5, #28]
   4f6e8:	ldr	r1, [pc, #-2456]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f6ec:	mul	r3, r3, r8
   4f6f0:	mov	r2, r0
   4f6f4:	ldr	r0, [pc, #-2496]	; 4ed3c <__assert_fail@plt+0x3db30>
   4f6f8:	bl	10f24 <printf@plt>
   4f6fc:	ldr	r4, [sp, #344]	; 0x158
   4f700:	b	4f31c <__assert_fail@plt+0x3e110>
   4f704:	ldr	r3, [sp, #112]	; 0x70
   4f708:	ldr	r3, [r3]
   4f70c:	cmp	r3, #0
   4f710:	beq	4f910 <__assert_fail@plt+0x3e704>
   4f714:	ldr	r3, [sp, #24]
   4f718:	ldrb	r3, [r3]
   4f71c:	cmp	r3, #0
   4f720:	bne	4f910 <__assert_fail@plt+0x3e704>
   4f724:	ldr	r2, [r5, #12]
   4f728:	lsl	r3, r8, #1
   4f72c:	mov	r1, #16
   4f730:	strh	r1, [r2, r3]
   4f734:	mov	r3, #0
   4f738:	str	r4, [sp, #344]	; 0x158
   4f73c:	str	r3, [sp, #24]
   4f740:	b	4c534 <__assert_fail@plt+0x3b328>
   4f744:	mov	r0, r8
   4f748:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f74c:	ldr	r3, [r5, #28]
   4f750:	ldr	r1, [pc, #-2560]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f754:	mul	r3, r3, r6
   4f758:	mov	r2, r0
   4f75c:	ldr	r0, [pc, #-2596]	; 4ed40 <__assert_fail@plt+0x3db34>
   4f760:	bl	10f24 <printf@plt>
   4f764:	ldr	r4, [sp, #344]	; 0x158
   4f768:	b	4f340 <__assert_fail@plt+0x3e134>
   4f76c:	mov	r0, r6
   4f770:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f774:	ldr	r1, [pc, #-2596]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f778:	mov	r2, r0
   4f77c:	ldr	r0, [pc, #-2624]	; 4ed44 <__assert_fail@plt+0x3db38>
   4f780:	bl	10f24 <printf@plt>
   4f784:	ldr	r4, [sp, #344]	; 0x158
   4f788:	b	4f180 <__assert_fail@plt+0x3df74>
   4f78c:	mov	r0, r6
   4f790:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f794:	ldr	r3, [r5, #28]
   4f798:	ldr	r1, [pc, #-2632]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f79c:	mul	r3, r3, r8
   4f7a0:	mov	r2, r0
   4f7a4:	ldr	r0, [pc, #-2660]	; 4ed48 <__assert_fail@plt+0x3db3c>
   4f7a8:	bl	10f24 <printf@plt>
   4f7ac:	ldr	r4, [sp, #344]	; 0x158
   4f7b0:	b	4f148 <__assert_fail@plt+0x3df3c>
   4f7b4:	mov	r0, r6
   4f7b8:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f7bc:	ldr	r3, [r5, #28]
   4f7c0:	ldr	r1, [pc, #-2672]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f7c4:	mul	r3, r3, r4
   4f7c8:	mov	r2, r0
   4f7cc:	ldr	r0, [pc, #-2696]	; 4ed4c <__assert_fail@plt+0x3db40>
   4f7d0:	bl	10f24 <printf@plt>
   4f7d4:	b	4ddc8 <__assert_fail@plt+0x3cbbc>
   4f7d8:	ldr	r3, [sp, #112]	; 0x70
   4f7dc:	ldr	r3, [r3]
   4f7e0:	cmp	r3, #0
   4f7e4:	beq	4f978 <__assert_fail@plt+0x3e76c>
   4f7e8:	ldr	r3, [sp, #24]
   4f7ec:	ldrb	r3, [r3]
   4f7f0:	cmp	r3, #0
   4f7f4:	bne	4f978 <__assert_fail@plt+0x3e76c>
   4f7f8:	ldr	r2, [r5, #12]
   4f7fc:	lsl	r3, r8, #1
   4f800:	mov	r1, #22
   4f804:	strh	r1, [r2, r3]
   4f808:	b	4f734 <__assert_fail@plt+0x3e528>
   4f80c:	mov	r0, r8
   4f810:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f814:	ldr	r3, [r5, #28]
   4f818:	ldr	r1, [pc, #-2760]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f81c:	mul	r3, r3, r6
   4f820:	mov	r2, r0
   4f824:	ldr	r0, [pc, #-2780]	; 4ed50 <__assert_fail@plt+0x3db44>
   4f828:	bl	10f24 <printf@plt>
   4f82c:	b	4d2d0 <__assert_fail@plt+0x3c0c4>
   4f830:	mov	r0, r6
   4f834:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f838:	ldr	r1, [pc, #-2792]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f83c:	mov	r2, r0
   4f840:	ldr	r0, [pc, #-2804]	; 4ed54 <__assert_fail@plt+0x3db48>
   4f844:	bl	10f24 <printf@plt>
   4f848:	ldr	r4, [sp, #344]	; 0x158
   4f84c:	b	4f0bc <__assert_fail@plt+0x3deb0>
   4f850:	mov	r0, r6
   4f854:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f858:	ldr	r3, [r5, #28]
   4f85c:	ldr	r1, [pc, #-2828]	; 4ed58 <__assert_fail@plt+0x3db4c>
   4f860:	mul	r3, r3, r4
   4f864:	mov	r2, r0
   4f868:	ldr	r0, [pc, #-2836]	; 4ed5c <__assert_fail@plt+0x3db50>
   4f86c:	bl	10f24 <printf@plt>
   4f870:	b	4d630 <__assert_fail@plt+0x3c424>
   4f874:	ldr	r0, [r3, #12]
   4f878:	ldrsh	r0, [r0, r1]
   4f87c:	cmn	r0, #1
   4f880:	bne	4f630 <__assert_fail@plt+0x3e424>
   4f884:	b	4f0fc <__assert_fail@plt+0x3def0>
   4f888:	mov	r1, r5
   4f88c:	ldr	r3, [pc, #-2840]	; 4ed7c <__assert_fail@plt+0x3db70>
   4f890:	mov	r0, r7
   4f894:	ldr	r3, [r3]
   4f898:	blx	r3
   4f89c:	ldr	r3, [sp, #140]	; 0x8c
   4f8a0:	cmp	r3, #0
   4f8a4:	bne	4fac8 <__assert_fail@plt+0x3e8bc>
   4f8a8:	orrs	r3, r0, r1
   4f8ac:	moveq	r5, #1
   4f8b0:	movne	r5, #0
   4f8b4:	cmp	r5, #0
   4f8b8:	bne	4eb58 <__assert_fail@plt+0x3d94c>
   4f8bc:	ldr	r5, [sp, #356]	; 0x164
   4f8c0:	b	4f5c4 <__assert_fail@plt+0x3e3b8>
   4f8c4:	ldr	r0, [pc, #-2924]	; 4ed60 <__assert_fail@plt+0x3db54>
   4f8c8:	bl	10f24 <printf@plt>
   4f8cc:	ldr	r3, [sp, #144]	; 0x90
   4f8d0:	mov	r0, #0
   4f8d4:	mov	r1, #0
   4f8d8:	str	r3, [sp, #16]
   4f8dc:	strd	r0, [sp, #8]
   4f8e0:	ldrd	r2, [sp, #160]	; 0xa0
   4f8e4:	ldr	r1, [pc, #-2936]	; 4ed74 <__assert_fail@plt+0x3db68>
   4f8e8:	ldr	r0, [sp, #344]	; 0x158
   4f8ec:	strd	r2, [sp]
   4f8f0:	mov	r2, r8
   4f8f4:	mvn	r3, #0
   4f8f8:	ldr	r1, [r1]
   4f8fc:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   4f900:	ldr	r0, [pc, #-2972]	; 4ed6c <__assert_fail@plt+0x3db60>
   4f904:	bl	11014 <puts@plt>
   4f908:	ldr	r4, [sp, #344]	; 0x158
   4f90c:	b	4e334 <__assert_fail@plt+0x3d128>
   4f910:	mov	r1, #0
   4f914:	mov	r0, r8
   4f918:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f91c:	ldr	r6, [sp, #24]
   4f920:	mov	r1, r6
   4f924:	mov	r2, r0
   4f928:	ldr	r0, [pc, #-3020]	; 4ed64 <__assert_fail@plt+0x3db58>
   4f92c:	bl	10f24 <printf@plt>
   4f930:	ldr	r1, [sp, #144]	; 0x90
   4f934:	mov	r2, #0
   4f938:	str	r1, [sp, #16]
   4f93c:	ldrd	r0, [sp, #168]	; 0xa8
   4f940:	mov	r3, #0
   4f944:	strd	r0, [sp]
   4f948:	ldr	r1, [pc, #-3036]	; 4ed74 <__assert_fail@plt+0x3db68>
   4f94c:	strd	r2, [sp, #8]
   4f950:	ldr	r0, [sp, #344]	; 0x158
   4f954:	mvn	r3, #0
   4f958:	ldr	r1, [r1]
   4f95c:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   4f960:	ldr	r0, [pc, #-3068]	; 4ed6c <__assert_fail@plt+0x3db60>
   4f964:	bl	11014 <puts@plt>
   4f968:	ldrb	r3, [r6]
   4f96c:	cmp	r3, #0
   4f970:	bne	4f734 <__assert_fail@plt+0x3e528>
   4f974:	b	4f724 <__assert_fail@plt+0x3e518>
   4f978:	mov	r1, #0
   4f97c:	mov	r0, r8
   4f980:	bl	3c4ac <__assert_fail@plt+0x2b2a0>
   4f984:	ldr	r6, [sp, #24]
   4f988:	mov	r1, r6
   4f98c:	mov	r2, r0
   4f990:	ldr	r0, [pc, #-3120]	; 4ed68 <__assert_fail@plt+0x3db5c>
   4f994:	bl	10f24 <printf@plt>
   4f998:	ldr	r1, [sp, #144]	; 0x90
   4f99c:	mov	r2, #0
   4f9a0:	str	r1, [sp, #16]
   4f9a4:	ldrd	r0, [sp, #152]	; 0x98
   4f9a8:	mov	r3, #0
   4f9ac:	strd	r0, [sp]
   4f9b0:	ldr	r1, [pc, #-3140]	; 4ed74 <__assert_fail@plt+0x3db68>
   4f9b4:	strd	r2, [sp, #8]
   4f9b8:	ldr	r0, [sp, #344]	; 0x158
   4f9bc:	mvn	r3, #0
   4f9c0:	ldr	r1, [r1]
   4f9c4:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   4f9c8:	ldr	r0, [pc, #-3172]	; 4ed6c <__assert_fail@plt+0x3db60>
   4f9cc:	bl	11014 <puts@plt>
   4f9d0:	ldrb	r3, [r6]
   4f9d4:	cmp	r3, #0
   4f9d8:	bne	4f734 <__assert_fail@plt+0x3e528>
   4f9dc:	b	4f7f8 <__assert_fail@plt+0x3e5ec>
   4f9e0:	add	r2, sp, #364	; 0x16c
   4f9e4:	add	r3, sp, #368	; 0x170
   4f9e8:	str	r2, [sp, #4]
   4f9ec:	str	r3, [sp]
   4f9f0:	mov	r0, r8
   4f9f4:	add	r3, sp, #372	; 0x174
   4f9f8:	add	r2, sp, #356	; 0x164
   4f9fc:	mov	r1, sl
   4fa00:	bl	421a4 <__assert_fail@plt+0x30f98>
   4fa04:	ldr	r7, [sp, #356]	; 0x164
   4fa08:	cmp	r7, #0
   4fa0c:	beq	4eb68 <__assert_fail@plt+0x3d95c>
   4fa10:	ldr	r3, [sp, #352]	; 0x160
   4fa14:	ldr	r1, [r7, #64]	; 0x40
   4fa18:	cmp	r3, #0
   4fa1c:	subne	r3, r3, #1
   4fa20:	ldr	r2, [sp, #332]	; 0x14c
   4fa24:	cmp	r3, r1
   4fa28:	movcs	r1, r3
   4fa2c:	str	r2, [r7]
   4fa30:	str	r4, [r7, #4]
   4fa34:	mov	r0, r7
   4fa38:	bl	3e18c <__assert_fail@plt+0x2cf80>
   4fa3c:	cmp	r0, #0
   4fa40:	blt	4fb0c <__assert_fail@plt+0x3e900>
   4fa44:	ldr	r5, [sp, #356]	; 0x164
   4fa48:	ldrb	r3, [r5, #68]	; 0x44
   4fa4c:	cmp	r3, #0
   4fa50:	beq	4fb24 <__assert_fail@plt+0x3e918>
   4fa54:	and	r3, r3, #7
   4fa58:	sub	r3, r3, #2
   4fa5c:	cmp	r3, #2
   4fa60:	ldrls	r2, [pc, #-3320]	; 4ed70 <__assert_fail@plt+0x3db64>
   4fa64:	ldrhi	r3, [pc, #-3320]	; 4ed74 <__assert_fail@plt+0x3db68>
   4fa68:	addls	r3, r2, r3, lsl #2
   4fa6c:	ldrhi	r3, [r3]
   4fa70:	ldrls	r3, [r3, #1024]	; 0x400
   4fa74:	str	r3, [sp, #116]	; 0x74
   4fa78:	str	r7, [sp, #332]	; 0x14c
   4fa7c:	b	4ed8c <__assert_fail@plt+0x3db80>
   4fa80:	ldr	r3, [sp, #136]	; 0x88
   4fa84:	ldr	r5, [sp, #332]	; 0x14c
   4fa88:	str	r3, [sp, #116]	; 0x74
   4fa8c:	b	4ed8c <__assert_fail@plt+0x3db80>
   4fa90:	ldr	r3, [sp, #136]	; 0x88
   4fa94:	ldr	r5, [sp, #328]	; 0x148
   4fa98:	str	r3, [sp, #116]	; 0x74
   4fa9c:	b	4ed8c <__assert_fail@plt+0x3db80>
   4faa0:	add	r2, r4, #12
   4faa4:	cmp	r2, sl
   4faa8:	bcc	4fb30 <__assert_fail@plt+0x3e924>
   4faac:	cmp	r7, sl
   4fab0:	bcs	4f5b4 <__assert_fail@plt+0x3e3a8>
   4fab4:	sub	r1, sl, r7
   4fab8:	sub	r3, r1, #1
   4fabc:	cmp	r3, #7
   4fac0:	bhi	4f5b4 <__assert_fail@plt+0x3e3a8>
   4fac4:	b	4fb34 <__assert_fail@plt+0x3e928>
   4fac8:	mov	r3, #0
   4facc:	cmp	r1, r3
   4fad0:	mvn	r2, #0
   4fad4:	cmpeq	r0, r2
   4fad8:	moveq	r3, #1
   4fadc:	movne	r3, #0
   4fae0:	cmp	r5, #4
   4fae4:	movne	r3, #0
   4fae8:	andeq	r3, r3, #1
   4faec:	cmp	r3, #0
   4faf0:	bne	4eb58 <__assert_fail@plt+0x3d94c>
   4faf4:	and	r0, r0, r1
   4faf8:	cmp	r5, #8
   4fafc:	cmneq	r0, #1
   4fb00:	moveq	r5, #1
   4fb04:	movne	r5, #0
   4fb08:	b	4f8b4 <__assert_fail@plt+0x3e6a8>
   4fb0c:	mov	r2, #5
   4fb10:	ldr	r1, [pc, #-3488]	; 4ed78 <__assert_fail@plt+0x3db6c>
   4fb14:	mov	r0, #0
   4fb18:	bl	10f90 <dcgettext@plt>
   4fb1c:	bl	54dd0 <warn@@Base>
   4fb20:	b	4c050 <__assert_fail@plt+0x3ae44>
   4fb24:	ldr	r3, [sp, #136]	; 0x88
   4fb28:	str	r3, [sp, #116]	; 0x74
   4fb2c:	b	4fa78 <__assert_fail@plt+0x3e86c>
   4fb30:	mov	r1, #8
   4fb34:	ldr	r3, [pc, #-3520]	; 4ed7c <__assert_fail@plt+0x3db70>
   4fb38:	mov	r0, r7
   4fb3c:	mov	r7, r2
   4fb40:	ldr	r3, [r3]
   4fb44:	blx	r3
   4fb48:	mov	r5, #8
   4fb4c:	strd	r0, [sp, #24]
   4fb50:	b	4eb1c <__assert_fail@plt+0x3d910>
   4fb54:	push	{r4, r5, r6, lr}
   4fb58:	mov	r4, r1
   4fb5c:	mov	r6, r0
   4fb60:	mov	r1, r2
   4fb64:	mvn	r0, #0
   4fb68:	mov	r5, r2
   4fb6c:	bl	586e0 <warn@@Base+0x3910>
   4fb70:	cmp	r0, r4
   4fb74:	bls	4fb88 <__assert_fail@plt+0x3e97c>
   4fb78:	mul	r1, r4, r5
   4fb7c:	mov	r0, r6
   4fb80:	pop	{r4, r5, r6, lr}
   4fb84:	b	58678 <warn@@Base+0x38a8>
   4fb88:	mov	r0, r4
   4fb8c:	bl	3e160 <__assert_fail@plt+0x2cf54>
   4fb90:	push	{r4, r5, r6, lr}
   4fb94:	mov	r4, r0
   4fb98:	mvn	r0, #0
   4fb9c:	mov	r5, r1
   4fba0:	bl	586e0 <warn@@Base+0x3910>
   4fba4:	cmp	r0, r4
   4fba8:	bls	4fbbc <__assert_fail@plt+0x3e9b0>
   4fbac:	mov	r1, r5
   4fbb0:	mov	r0, r4
   4fbb4:	pop	{r4, r5, r6, lr}
   4fbb8:	b	58640 <warn@@Base+0x3870>
   4fbbc:	mov	r2, #5
   4fbc0:	ldr	r1, [pc, #20]	; 4fbdc <__assert_fail@plt+0x3e9d0>
   4fbc4:	mov	r0, #0
   4fbc8:	bl	10f90 <dcgettext@plt>
   4fbcc:	mov	r1, r4
   4fbd0:	bl	548ac <error@@Base>
   4fbd4:	mov	r0, #1
   4fbd8:	bl	58528 <warn@@Base+0x3758>
   4fbdc:	muleq	r8, r8, r7
   4fbe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4fbe4:	mov	r7, r0
   4fbe8:	ldr	r6, [r0, #16]
   4fbec:	sub	sp, sp, #156	; 0x9c
   4fbf0:	cmp	r6, #0
   4fbf4:	ldrd	r8, [r0, #32]
   4fbf8:	moveq	r2, #5
   4fbfc:	ldreq	r1, [pc, #3752]	; 50aac <__assert_fail@plt+0x3f8a0>
   4fc00:	beq	4fdbc <__assert_fail@plt+0x3ebb0>
   4fc04:	cmp	r9, #0
   4fc08:	cmpeq	r8, #23
   4fc0c:	bls	4fdb4 <__assert_fail@plt+0x3eba8>
   4fc10:	add	r4, r6, r8
   4fc14:	add	r3, r6, #4
   4fc18:	cmp	r3, r4
   4fc1c:	mov	sl, r1
   4fc20:	add	r5, r6, #8
   4fc24:	bcs	4fcec <__assert_fail@plt+0x3eae0>
   4fc28:	mov	r1, #4
   4fc2c:	ldr	fp, [pc, #3708]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   4fc30:	mov	r0, r6
   4fc34:	str	r3, [sp, #12]
   4fc38:	ldr	r2, [fp]
   4fc3c:	blx	r2
   4fc40:	cmp	r0, #1
   4fc44:	str	r0, [sp, #16]
   4fc48:	bls	4fe80 <__assert_fail@plt+0x3ec74>
   4fc4c:	cmp	r4, r5
   4fc50:	ldr	r3, [sp, #12]
   4fc54:	bhi	4fe5c <__assert_fail@plt+0x3ec50>
   4fc58:	cmp	r3, r4
   4fc5c:	bcs	4fc70 <__assert_fail@plt+0x3ea64>
   4fc60:	sub	r2, r8, #5
   4fc64:	cmp	r2, #7
   4fc68:	subls	r1, r8, #4
   4fc6c:	bls	4fe60 <__assert_fail@plt+0x3ec54>
   4fc70:	add	r3, r6, #12
   4fc74:	mov	r2, #0
   4fc78:	cmp	r4, r3
   4fc7c:	str	r2, [sp, #20]
   4fc80:	bhi	4fd10 <__assert_fail@plt+0x3eb04>
   4fc84:	add	r5, r6, #16
   4fc88:	cmp	r4, r5
   4fc8c:	bhi	4fe20 <__assert_fail@plt+0x3ec14>
   4fc90:	mov	r3, #0
   4fc94:	str	r3, [sp, #24]
   4fc98:	cmp	r5, r6
   4fc9c:	bcc	500d8 <__assert_fail@plt+0x3eecc>
   4fca0:	mov	fp, #0
   4fca4:	str	r5, [sp, #32]
   4fca8:	str	r5, [sp, #12]
   4fcac:	cmp	sl, #0
   4fcb0:	bne	4fe8c <__assert_fail@plt+0x3ec80>
   4fcb4:	ldr	r3, [sp, #12]
   4fcb8:	cmp	r4, r3
   4fcbc:	bcc	500a4 <__assert_fail@plt+0x3ee98>
   4fcc0:	ldr	r3, [sp, #16]
   4fcc4:	cmp	r3, #1
   4fcc8:	beq	4ff08 <__assert_fail@plt+0x3ecfc>
   4fccc:	ldr	r3, [sp, #16]
   4fcd0:	cmp	r3, #2
   4fcd4:	beq	50140 <__assert_fail@plt+0x3ef34>
   4fcd8:	cmp	sl, #0
   4fcdc:	bne	504c8 <__assert_fail@plt+0x3f2bc>
   4fce0:	mov	r0, #1
   4fce4:	add	sp, sp, #156	; 0x9c
   4fce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4fcec:	cmp	r6, r4
   4fcf0:	bcc	4fe48 <__assert_fail@plt+0x3ec3c>
   4fcf4:	mov	r3, #0
   4fcf8:	str	r3, [sp, #16]
   4fcfc:	str	r3, [sp, #20]
   4fd00:	add	r3, r6, #12
   4fd04:	cmp	r3, r4
   4fd08:	bcs	4fdd8 <__assert_fail@plt+0x3ebcc>
   4fd0c:	ldr	fp, [pc, #3484]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   4fd10:	mov	r0, r5
   4fd14:	ldr	r2, [fp]
   4fd18:	mov	r1, #4
   4fd1c:	str	r3, [sp, #12]
   4fd20:	blx	r2
   4fd24:	add	r5, r6, #16
   4fd28:	cmp	r5, r4
   4fd2c:	ldr	r3, [sp, #12]
   4fd30:	movcc	r1, #4
   4fd34:	str	r0, [sp, #24]
   4fd38:	bcs	4fe34 <__assert_fail@plt+0x3ec28>
   4fd3c:	ldr	r2, [fp]
   4fd40:	mov	r0, r3
   4fd44:	blx	r2
   4fd48:	add	r3, r5, r0, lsl #3
   4fd4c:	add	r2, r3, r0, lsl #2
   4fd50:	cmp	r6, r2
   4fd54:	cmpls	r5, r3
   4fd58:	mov	fp, r0
   4fd5c:	str	r2, [sp, #12]
   4fd60:	bhi	4fd80 <__assert_fail@plt+0x3eb74>
   4fd64:	cmp	r0, #0
   4fd68:	sub	r2, r5, r3
   4fd6c:	clz	r2, r2
   4fd70:	lsr	r2, r2, #5
   4fd74:	moveq	r2, #0
   4fd78:	cmp	r2, #0
   4fd7c:	beq	4fe74 <__assert_fail@plt+0x3ec68>
   4fd80:	mov	r3, #5
   4fd84:	str	r3, [sp]
   4fd88:	ldr	r2, [pc, #3364]	; 50ab4 <__assert_fail@plt+0x3f8a8>
   4fd8c:	mov	r3, fp
   4fd90:	ldr	r1, [pc, #3360]	; 50ab8 <__assert_fail@plt+0x3f8ac>
   4fd94:	mov	r0, #0
   4fd98:	bl	11200 <dcngettext@plt>
   4fd9c:	mov	r2, fp
   4fda0:	ldr	r1, [r7, #8]
   4fda4:	bl	54dd0 <warn@@Base>
   4fda8:	mov	r0, #0
   4fdac:	add	sp, sp, #156	; 0x9c
   4fdb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4fdb4:	ldr	r1, [pc, #3328]	; 50abc <__assert_fail@plt+0x3f8b0>
   4fdb8:	mov	r2, #5
   4fdbc:	mov	r0, #0
   4fdc0:	bl	10f90 <dcgettext@plt>
   4fdc4:	ldr	r1, [r7, #8]
   4fdc8:	bl	54dd0 <warn@@Base>
   4fdcc:	mov	r0, #0
   4fdd0:	add	sp, sp, #156	; 0x9c
   4fdd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4fdd8:	cmp	r4, r5
   4fddc:	bls	4fc84 <__assert_fail@plt+0x3ea78>
   4fde0:	sub	r2, r8, #9
   4fde4:	cmp	r2, #7
   4fde8:	bhi	4fc84 <__assert_fail@plt+0x3ea78>
   4fdec:	ldr	fp, [pc, #3260]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   4fdf0:	mov	r0, r5
   4fdf4:	sub	r1, r8, #8
   4fdf8:	ldr	r2, [fp]
   4fdfc:	str	r3, [sp, #12]
   4fe00:	blx	r2
   4fe04:	add	r5, r6, #16
   4fe08:	cmp	r5, r4
   4fe0c:	movcc	r1, #4
   4fe10:	ldrcc	r3, [sp, #12]
   4fe14:	str	r0, [sp, #24]
   4fe18:	bcc	4fd3c <__assert_fail@plt+0x3eb30>
   4fe1c:	b	4fc98 <__assert_fail@plt+0x3ea8c>
   4fe20:	mov	r2, #0
   4fe24:	mov	r1, #4
   4fe28:	str	r2, [sp, #24]
   4fe2c:	ldr	fp, [pc, #3196]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   4fe30:	b	4fd3c <__assert_fail@plt+0x3eb30>
   4fe34:	sub	r2, r8, #13
   4fe38:	cmp	r2, #7
   4fe3c:	bhi	4fc98 <__assert_fail@plt+0x3ea8c>
   4fe40:	sub	r1, r8, #12
   4fe44:	b	4fd3c <__assert_fail@plt+0x3eb30>
   4fe48:	sub	r2, r8, #1
   4fe4c:	cmp	r2, #7
   4fe50:	movls	r1, r8
   4fe54:	bhi	4fcf4 <__assert_fail@plt+0x3eae8>
   4fe58:	b	4fc2c <__assert_fail@plt+0x3ea20>
   4fe5c:	mov	r1, #4
   4fe60:	ldr	r2, [fp]
   4fe64:	mov	r0, r3
   4fe68:	blx	r2
   4fe6c:	str	r0, [sp, #20]
   4fe70:	b	4fd00 <__assert_fail@plt+0x3eaf4>
   4fe74:	str	r5, [sp, #32]
   4fe78:	mov	r5, r3
   4fe7c:	b	4fcac <__assert_fail@plt+0x3eaa0>
   4fe80:	mov	r3, #0
   4fe84:	str	r3, [sp, #20]
   4fe88:	b	4fd00 <__assert_fail@plt+0x3eaf4>
   4fe8c:	add	r1, r7, #12
   4fe90:	add	r0, r7, #8
   4fe94:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   4fe98:	mov	r2, #5
   4fe9c:	ldr	r1, [pc, #3100]	; 50ac0 <__assert_fail@plt+0x3f8b4>
   4fea0:	mov	r0, #0
   4fea4:	bl	10f90 <dcgettext@plt>
   4fea8:	ldr	r6, [sp, #16]
   4feac:	mov	r1, r6
   4feb0:	bl	10f24 <printf@plt>
   4feb4:	cmp	r6, #1
   4feb8:	bls	4fed4 <__assert_fail@plt+0x3ecc8>
   4febc:	ldr	r1, [pc, #3072]	; 50ac4 <__assert_fail@plt+0x3f8b8>
   4fec0:	mov	r2, #5
   4fec4:	mov	r0, #0
   4fec8:	bl	10f90 <dcgettext@plt>
   4fecc:	ldr	r1, [sp, #20]
   4fed0:	bl	10f24 <printf@plt>
   4fed4:	mov	r2, #5
   4fed8:	ldr	r1, [pc, #3048]	; 50ac8 <__assert_fail@plt+0x3f8bc>
   4fedc:	mov	r0, #0
   4fee0:	bl	10f90 <dcgettext@plt>
   4fee4:	ldr	r1, [sp, #24]
   4fee8:	bl	10f24 <printf@plt>
   4feec:	mov	r2, #5
   4fef0:	ldr	r1, [pc, #3028]	; 50acc <__assert_fail@plt+0x3f8c0>
   4fef4:	mov	r0, #0
   4fef8:	bl	10f90 <dcgettext@plt>
   4fefc:	mov	r1, fp
   4ff00:	bl	10f24 <printf@plt>
   4ff04:	b	4fcb4 <__assert_fail@plt+0x3eaa8>
   4ff08:	cmp	sl, #0
   4ff0c:	beq	504e4 <__assert_fail@plt+0x3f2d8>
   4ff10:	cmp	fp, #0
   4ff14:	beq	4ff7c <__assert_fail@plt+0x3ed70>
   4ff18:	ldr	r9, [pc, #2960]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   4ff1c:	ldr	r8, [pc, #2988]	; 50ad0 <__assert_fail@plt+0x3f8c4>
   4ff20:	ldr	r0, [sp, #32]
   4ff24:	mov	r3, #0
   4ff28:	str	r3, [sp, #16]
   4ff2c:	str	fp, [sp, #20]
   4ff30:	str	r7, [sp, #24]
   4ff34:	add	r7, r0, #8
   4ff38:	cmp	r7, r4
   4ff3c:	add	fp, r5, #4
   4ff40:	bls	4ff88 <__assert_fail@plt+0x3ed7c>
   4ff44:	mov	r2, #0
   4ff48:	mov	r3, #0
   4ff4c:	strd	r2, [sp, #72]	; 0x48
   4ff50:	strd	r2, [sp, #80]	; 0x50
   4ff54:	ldr	r3, [sp, #16]
   4ff58:	ldr	r2, [sp, #20]
   4ff5c:	add	r3, r3, #1
   4ff60:	cmp	r3, r2
   4ff64:	str	r3, [sp, #16]
   4ff68:	mov	r0, r7
   4ff6c:	mov	r5, fp
   4ff70:	bcc	4ff34 <__assert_fail@plt+0x3ed28>
   4ff74:	cmp	sl, #0
   4ff78:	beq	4fce0 <__assert_fail@plt+0x3ead4>
   4ff7c:	mov	r0, #10
   4ff80:	bl	110c8 <putchar@plt>
   4ff84:	b	4fce0 <__assert_fail@plt+0x3ead4>
   4ff88:	add	r2, sp, #80	; 0x50
   4ff8c:	add	r1, sp, #72	; 0x48
   4ff90:	bl	55148 <warn@@Base+0x378>
   4ff94:	ldrd	r2, [sp, #72]	; 0x48
   4ff98:	orrs	r3, r2, r3
   4ff9c:	beq	50538 <__assert_fail@plt+0x3f32c>
   4ffa0:	cmp	fp, r4
   4ffa4:	movcc	r1, #4
   4ffa8:	bcs	50080 <__assert_fail@plt+0x3ee74>
   4ffac:	mov	r0, r5
   4ffb0:	ldr	r3, [r9]
   4ffb4:	blx	r3
   4ffb8:	ldr	r3, [sp, #12]
   4ffbc:	add	r5, r3, r0, lsl #2
   4ffc0:	cmp	r5, r3
   4ffc4:	bcc	5085c <__assert_fail@plt+0x3f650>
   4ffc8:	cmp	sl, #0
   4ffcc:	bne	500e0 <__assert_fail@plt+0x3eed4>
   4ffd0:	cmp	r4, r5
   4ffd4:	bls	500c8 <__assert_fail@plt+0x3eebc>
   4ffd8:	mov	r0, r5
   4ffdc:	b	4fff4 <__assert_fail@plt+0x3ede8>
   4ffe0:	ldr	r0, [pc, #2796]	; 50ad4 <__assert_fail@plt+0x3f8c8>
   4ffe4:	bl	10f24 <printf@plt>
   4ffe8:	cmp	r5, r4
   4ffec:	mov	r0, r5
   4fff0:	bcs	500c8 <__assert_fail@plt+0x3eebc>
   4fff4:	add	r5, r0, #4
   4fff8:	cmp	r5, r4
   4fffc:	bcc	5004c <__assert_fail@plt+0x3ee40>
   50000:	sub	r1, r4, r0
   50004:	sub	r3, r1, #1
   50008:	cmp	r3, #7
   5000c:	bhi	5006c <__assert_fail@plt+0x3ee60>
   50010:	ldr	r3, [r9]
   50014:	blx	r3
   50018:	subs	r1, r0, #0
   5001c:	beq	5006c <__assert_fail@plt+0x3ee60>
   50020:	cmp	sl, #0
   50024:	bne	4ffe0 <__assert_fail@plt+0x3edd4>
   50028:	ldr	r3, [r8, #1824]	; 0x720
   5002c:	ldr	r2, [r8, #1820]	; 0x71c
   50030:	cmp	r3, r2
   50034:	bcs	50054 <__assert_fail@plt+0x3ee48>
   50038:	ldr	r2, [r8, #1816]	; 0x718
   5003c:	add	r0, r3, #1
   50040:	str	r0, [r8, #1824]	; 0x720
   50044:	str	r1, [r2, r3, lsl #2]
   50048:	b	4ffe8 <__assert_fail@plt+0x3eddc>
   5004c:	mov	r1, #4
   50050:	b	50010 <__assert_fail@plt+0x3ee04>
   50054:	mov	r2, #5
   50058:	ldr	r1, [pc, #2680]	; 50ad8 <__assert_fail@plt+0x3f8cc>
   5005c:	mov	r0, sl
   50060:	bl	10f90 <dcgettext@plt>
   50064:	bl	548ac <error@@Base>
   50068:	b	4ffe8 <__assert_fail@plt+0x3eddc>
   5006c:	cmp	sl, #0
   50070:	beq	5011c <__assert_fail@plt+0x3ef10>
   50074:	mov	r0, #10
   50078:	bl	110c8 <putchar@plt>
   5007c:	b	4ff54 <__assert_fail@plt+0x3ed48>
   50080:	sub	r3, fp, #4
   50084:	cmp	r4, r3
   50088:	bls	5009c <__assert_fail@plt+0x3ee90>
   5008c:	sub	r1, r4, r5
   50090:	sub	r3, r1, #1
   50094:	cmp	r3, #7
   50098:	bls	4ffac <__assert_fail@plt+0x3eda0>
   5009c:	ldr	r5, [sp, #12]
   500a0:	b	4ffc8 <__assert_fail@plt+0x3edbc>
   500a4:	mov	r2, #5
   500a8:	ldr	r1, [pc, #2604]	; 50adc <__assert_fail@plt+0x3f8d0>
   500ac:	mov	r0, #0
   500b0:	bl	10f90 <dcgettext@plt>
   500b4:	mov	r2, fp
   500b8:	ldr	r1, [r7, #8]
   500bc:	bl	54dd0 <warn@@Base>
   500c0:	mov	r0, #0
   500c4:	b	4fdac <__assert_fail@plt+0x3eba0>
   500c8:	ldr	r7, [sp, #24]
   500cc:	mov	r2, #5
   500d0:	ldr	r1, [pc, #2568]	; 50ae0 <__assert_fail@plt+0x3f8d4>
   500d4:	b	4fdbc <__assert_fail@plt+0x3ebb0>
   500d8:	mov	fp, #0
   500dc:	b	4fd80 <__assert_fail@plt+0x3eb74>
   500e0:	mov	r2, #5
   500e4:	ldr	r1, [pc, #2552]	; 50ae4 <__assert_fail@plt+0x3f8d8>
   500e8:	mov	r0, #0
   500ec:	bl	10f90 <dcgettext@plt>
   500f0:	add	r3, sp, #88	; 0x58
   500f4:	str	r3, [sp]
   500f8:	ldrd	r2, [sp, #80]	; 0x50
   500fc:	mov	r6, r0
   50100:	ldrd	r0, [sp, #72]	; 0x48
   50104:	bl	3e35c <__assert_fail@plt+0x2d150>
   50108:	ldr	r1, [sp, #16]
   5010c:	mov	r2, r0
   50110:	mov	r0, r6
   50114:	bl	10f24 <printf@plt>
   50118:	b	4ffd0 <__assert_fail@plt+0x3edc4>
   5011c:	ldr	r3, [r8, #1824]	; 0x720
   50120:	ldr	r2, [r8, #1820]	; 0x71c
   50124:	cmp	r3, r2
   50128:	bcs	5056c <__assert_fail@plt+0x3f360>
   5012c:	ldr	r2, [r8, #1816]	; 0x718
   50130:	add	r1, r3, #1
   50134:	str	r1, [r8, #1824]	; 0x720
   50138:	str	sl, [r2, r3, lsl #2]
   5013c:	b	4ff54 <__assert_fail@plt+0x3ed48>
   50140:	ldr	r1, [sp, #20]
   50144:	ldr	r2, [sp, #12]
   50148:	lsl	r3, r1, #2
   5014c:	adds	r2, r2, r3
   50150:	str	r3, [sp, #40]	; 0x28
   50154:	str	r2, [sp, #44]	; 0x2c
   50158:	bcs	503b8 <__assert_fail@plt+0x3f1ac>
   5015c:	mov	r2, r3
   50160:	cmp	r2, #0
   50164:	add	r3, r3, #3
   50168:	movge	r3, r2
   5016c:	cmp	r1, r3, asr #2
   50170:	bne	503b8 <__assert_fail@plt+0x3f1ac>
   50174:	ldr	r2, [sp, #40]	; 0x28
   50178:	ldr	r3, [sp, #24]
   5017c:	mul	r3, r3, r2
   50180:	ldr	r2, [sp, #44]	; 0x2c
   50184:	add	r2, r2, r3
   50188:	add	r3, r2, r3
   5018c:	cmp	r4, r3
   50190:	str	r2, [sp, #64]	; 0x40
   50194:	bcc	509a8 <__assert_fail@plt+0x3f79c>
   50198:	ldr	r0, [r7, #8]
   5019c:	ldr	r1, [pc, #2372]	; 50ae8 <__assert_fail@plt+0x3f8dc>
   501a0:	bl	10f18 <strcmp@plt>
   501a4:	cmp	sl, #0
   501a8:	str	r0, [sp, #60]	; 0x3c
   501ac:	bne	5088c <__assert_fail@plt+0x3f680>
   501b0:	ldr	r3, [sp, #60]	; 0x3c
   501b4:	ldr	r6, [pc, #2324]	; 50ad0 <__assert_fail@plt+0x3f8c4>
   501b8:	cmp	r3, #0
   501bc:	ldr	r3, [sp, #24]
   501c0:	mov	r1, #104	; 0x68
   501c4:	mov	r0, r3
   501c8:	bne	50878 <__assert_fail@plt+0x3f66c>
   501cc:	str	r3, [r6, #1528]	; 0x5f8
   501d0:	bl	4fb90 <__assert_fail@plt+0x3e984>
   501d4:	str	r0, [sp, #56]	; 0x38
   501d8:	str	r0, [r6, #1524]	; 0x5f4
   501dc:	cmp	fp, #0
   501e0:	beq	50594 <__assert_fail@plt+0x3f388>
   501e4:	ldr	r9, [sp, #32]
   501e8:	mov	r3, #0
   501ec:	mov	r6, r5
   501f0:	str	r3, [sp, #16]
   501f4:	str	r5, [sp, #68]	; 0x44
   501f8:	mov	r8, r9
   501fc:	str	fp, [sp, #36]	; 0x24
   50200:	b	5023c <__assert_fail@plt+0x3f030>
   50204:	cmp	r4, r6
   50208:	bls	5021c <__assert_fail@plt+0x3f010>
   5020c:	sub	r1, r4, r6
   50210:	sub	r3, r1, #1
   50214:	cmp	r3, #7
   50218:	bls	50268 <__assert_fail@plt+0x3f05c>
   5021c:	ldr	r3, [sp, #16]
   50220:	ldr	r2, [sp, #36]	; 0x24
   50224:	add	r3, r3, #1
   50228:	cmp	r3, r2
   5022c:	str	r3, [sp, #16]
   50230:	mov	r8, fp
   50234:	mov	r6, r9
   50238:	bcs	50584 <__assert_fail@plt+0x3f378>
   5023c:	add	fp, r8, #8
   50240:	cmp	fp, r4
   50244:	bls	50420 <__assert_fail@plt+0x3f214>
   50248:	mov	r2, #0
   5024c:	mov	r3, #0
   50250:	strd	r2, [sp, #72]	; 0x48
   50254:	strd	r2, [sp, #80]	; 0x50
   50258:	add	r9, r6, #4
   5025c:	cmp	r9, r4
   50260:	bcs	50204 <__assert_fail@plt+0x3eff8>
   50264:	mov	r1, #4
   50268:	ldr	r3, [pc, #2112]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   5026c:	mov	r0, r6
   50270:	ldr	r3, [r3]
   50274:	blx	r3
   50278:	subs	r7, r0, #0
   5027c:	beq	5021c <__assert_fail@plt+0x3f010>
   50280:	ldr	r3, [sp, #24]
   50284:	cmp	r7, r3
   50288:	bhi	50a60 <__assert_fail@plt+0x3f854>
   5028c:	cmp	sl, #0
   50290:	bne	50450 <__assert_fail@plt+0x3f244>
   50294:	cmp	fp, r4
   50298:	bcs	50a84 <__assert_fail@plt+0x3f878>
   5029c:	ldr	r2, [sp, #40]	; 0x28
   502a0:	ldr	r0, [sp, #44]	; 0x2c
   502a4:	sub	r5, r7, #-1073741823	; 0xc0000001
   502a8:	add	r3, r7, r7, lsl #1
   502ac:	mla	r5, r2, r5, r0
   502b0:	add	r3, r7, r3, lsl #2
   502b4:	cmp	r4, r5
   502b8:	cmpcs	r5, r0
   502bc:	lsl	r3, r3, #3
   502c0:	ldr	r0, [sp, #56]	; 0x38
   502c4:	sub	r3, r3, #104	; 0x68
   502c8:	ldr	r2, [r8, #4]
   502cc:	ldr	r1, [r8]
   502d0:	add	r8, r0, r3
   502d4:	str	r1, [r0, r3]
   502d8:	str	r2, [r8, #4]
   502dc:	bcc	50548 <__assert_fail@plt+0x3f33c>
   502e0:	ldr	r3, [sp, #20]
   502e4:	cmp	r3, #0
   502e8:	beq	5021c <__assert_fail@plt+0x3f010>
   502ec:	ldr	r3, [sp, #12]
   502f0:	str	fp, [sp, #48]	; 0x30
   502f4:	str	r9, [sp, #52]	; 0x34
   502f8:	mov	r6, #0
   502fc:	ldr	fp, [sp, #20]
   50300:	mov	r9, r3
   50304:	b	50374 <__assert_fail@plt+0x3f168>
   50308:	cmp	r0, r4
   5030c:	bcs	50320 <__assert_fail@plt+0x3f114>
   50310:	sub	r1, r4, r0
   50314:	sub	r2, r1, #1
   50318:	cmp	r2, #7
   5031c:	bls	5038c <__assert_fail@plt+0x3f180>
   50320:	cmp	sl, #0
   50324:	mov	r2, #0
   50328:	bne	503a4 <__assert_fail@plt+0x3f198>
   5032c:	add	r7, r9, #4
   50330:	cmp	r4, r7
   50334:	bhi	503d8 <__assert_fail@plt+0x3f1cc>
   50338:	cmp	r9, r4
   5033c:	bcs	50350 <__assert_fail@plt+0x3f144>
   50340:	sub	r1, r4, r9
   50344:	sub	r0, r1, #1
   50348:	cmp	r0, #7
   5034c:	bls	503dc <__assert_fail@plt+0x3f1d0>
   50350:	mov	r1, sl
   50354:	add	r3, r1, #1
   50358:	mov	r1, #0
   5035c:	str	r2, [r8, r3, lsl #3]
   50360:	add	r3, r8, r3, lsl #3
   50364:	str	r1, [r3, #4]
   50368:	cmp	r6, fp
   5036c:	mov	r9, r7
   50370:	bcs	50434 <__assert_fail@plt+0x3f228>
   50374:	mov	r0, r5
   50378:	add	r5, r5, #4
   5037c:	cmp	r4, r5
   50380:	add	r6, r6, #1
   50384:	bls	50308 <__assert_fail@plt+0x3f0fc>
   50388:	mov	r1, #4
   5038c:	ldr	r3, [pc, #1820]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   50390:	ldr	r2, [r3]
   50394:	blx	r2
   50398:	cmp	sl, #0
   5039c:	mov	r2, r0
   503a0:	beq	5032c <__assert_fail@plt+0x3f120>
   503a4:	mov	r1, r2
   503a8:	ldr	r0, [pc, #1852]	; 50aec <__assert_fail@plt+0x3f8e0>
   503ac:	add	r7, r9, #4
   503b0:	bl	10f24 <printf@plt>
   503b4:	b	50368 <__assert_fail@plt+0x3f15c>
   503b8:	mov	r2, #5
   503bc:	ldr	r1, [pc, #1836]	; 50af0 <__assert_fail@plt+0x3f8e4>
   503c0:	mov	r0, #0
   503c4:	bl	10f90 <dcgettext@plt>
   503c8:	ldr	r1, [sp, #20]
   503cc:	bl	54dd0 <warn@@Base>
   503d0:	mov	r0, #0
   503d4:	b	4fdac <__assert_fail@plt+0x3eba0>
   503d8:	mov	r1, #4
   503dc:	ldr	r3, [pc, #1740]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   503e0:	mov	r0, r9
   503e4:	str	r2, [sp, #28]
   503e8:	ldr	r3, [r3]
   503ec:	blx	r3
   503f0:	ldr	r2, [sp, #28]
   503f4:	cmp	r0, #7
   503f8:	mov	r9, r0
   503fc:	mov	r1, r0
   50400:	bls	50354 <__assert_fail@plt+0x3f148>
   50404:	mov	r2, #5
   50408:	ldr	r1, [pc, #1764]	; 50af4 <__assert_fail@plt+0x3f8e8>
   5040c:	mov	r0, #0
   50410:	bl	10f90 <dcgettext@plt>
   50414:	mov	r1, r9
   50418:	bl	54dd0 <warn@@Base>
   5041c:	b	50368 <__assert_fail@plt+0x3f15c>
   50420:	add	r2, sp, #80	; 0x50
   50424:	add	r1, sp, #72	; 0x48
   50428:	mov	r0, r8
   5042c:	bl	55148 <warn@@Base+0x378>
   50430:	b	50258 <__assert_fail@plt+0x3f04c>
   50434:	cmp	sl, #0
   50438:	ldr	fp, [sp, #48]	; 0x30
   5043c:	ldr	r9, [sp, #52]	; 0x34
   50440:	beq	5021c <__assert_fail@plt+0x3f010>
   50444:	mov	r0, #10
   50448:	bl	110c8 <putchar@plt>
   5044c:	b	5021c <__assert_fail@plt+0x3f010>
   50450:	ldrd	r2, [sp, #40]	; 0x28
   50454:	sub	r5, r7, #-1073741823	; 0xc0000001
   50458:	mla	r5, r2, r5, r3
   5045c:	cmp	r4, r5
   50460:	cmpcs	r5, r3
   50464:	movcc	r0, #1
   50468:	movcs	r0, #0
   5046c:	bcc	50548 <__assert_fail@plt+0x3f33c>
   50470:	mov	r2, #5
   50474:	ldr	r1, [pc, #1660]	; 50af8 <__assert_fail@plt+0x3f8ec>
   50478:	bl	10f90 <dcgettext@plt>
   5047c:	add	r3, sp, #88	; 0x58
   50480:	str	r3, [sp]
   50484:	ldrd	r2, [sp, #80]	; 0x50
   50488:	mov	r6, r0
   5048c:	ldrd	r0, [sp, #72]	; 0x48
   50490:	bl	3e35c <__assert_fail@plt+0x2d150>
   50494:	ldr	r1, [sp, #16]
   50498:	mov	r2, r0
   5049c:	mov	r0, r6
   504a0:	bl	10f24 <printf@plt>
   504a4:	ldr	r3, [sp, #20]
   504a8:	cmp	r3, #0
   504ac:	beq	50444 <__assert_fail@plt+0x3f238>
   504b0:	add	r8, r7, r7, lsl #1
   504b4:	ldr	r3, [sp, #56]	; 0x38
   504b8:	add	r8, r7, r8, lsl #2
   504bc:	add	r8, r3, r8, lsl #3
   504c0:	sub	r8, r8, #104	; 0x68
   504c4:	b	502ec <__assert_fail@plt+0x3f0e0>
   504c8:	mov	r2, #5
   504cc:	ldr	r1, [pc, #1576]	; 50afc <__assert_fail@plt+0x3f8f0>
   504d0:	mov	r0, #0
   504d4:	bl	10f90 <dcgettext@plt>
   504d8:	ldr	r1, [sp, #16]
   504dc:	bl	10f24 <printf@plt>
   504e0:	b	4ff7c <__assert_fail@plt+0x3ed70>
   504e4:	ldr	r6, [pc, #1508]	; 50ad0 <__assert_fail@plt+0x3f8c4>
   504e8:	ldr	r3, [sp, #12]
   504ec:	sub	r3, r4, r3
   504f0:	cmp	r3, #0
   504f4:	add	r1, r3, #3
   504f8:	ldr	r0, [r6, #1816]	; 0x718
   504fc:	movlt	r3, r1
   50500:	cmp	r0, #0
   50504:	asr	r3, r3, #2
   50508:	beq	5098c <__assert_fail@plt+0x3f780>
   5050c:	ldr	r1, [r6, #1824]	; 0x720
   50510:	add	r1, r3, r1
   50514:	cmn	r1, #-1073741822	; 0xc0000002
   50518:	str	r1, [r6, #1820]	; 0x71c
   5051c:	bhi	50aa4 <__assert_fail@plt+0x3f898>
   50520:	lsl	r1, r1, #2
   50524:	bl	58678 <warn@@Base+0x38a8>
   50528:	str	r0, [r6, #1816]	; 0x718
   5052c:	cmp	fp, #0
   50530:	bne	4ff18 <__assert_fail@plt+0x3ed0c>
   50534:	b	4fce0 <__assert_fail@plt+0x3ead4>
   50538:	ldrd	r2, [sp, #80]	; 0x50
   5053c:	orrs	r3, r2, r3
   50540:	bne	4ffa0 <__assert_fail@plt+0x3ed94>
   50544:	b	4ff54 <__assert_fail@plt+0x3ed48>
   50548:	mov	r2, #5
   5054c:	ldr	r1, [pc, #1452]	; 50b00 <__assert_fail@plt+0x3f8f4>
   50550:	mov	r0, #0
   50554:	bl	10f90 <dcgettext@plt>
   50558:	ldr	r2, [sp, #20]
   5055c:	mov	r1, r7
   50560:	bl	54dd0 <warn@@Base>
   50564:	mov	r0, #0
   50568:	b	4fdac <__assert_fail@plt+0x3eba0>
   5056c:	mov	r2, #5
   50570:	ldr	r1, [pc, #1376]	; 50ad8 <__assert_fail@plt+0x3f8cc>
   50574:	mov	r0, sl
   50578:	bl	10f90 <dcgettext@plt>
   5057c:	bl	548ac <error@@Base>
   50580:	b	4ff54 <__assert_fail@plt+0x3ed48>
   50584:	cmp	sl, #0
   50588:	ldr	r5, [sp, #68]	; 0x44
   5058c:	mov	fp, r2
   50590:	bne	509fc <__assert_fail@plt+0x3f7f0>
   50594:	ldr	r3, [sp, #20]
   50598:	cmp	r3, #0
   5059c:	beq	5065c <__assert_fail@plt+0x3f450>
   505a0:	str	r5, [sp, #16]
   505a4:	ldr	r9, [pc, #1368]	; 50b04 <__assert_fail@plt+0x3f8f8>
   505a8:	ldr	r8, [pc, #1280]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   505ac:	ldr	r6, [sp, #12]
   505b0:	mov	r7, #0
   505b4:	ldr	r5, [sp, #20]
   505b8:	b	505e4 <__assert_fail@plt+0x3f3d8>
   505bc:	cmp	r0, r4
   505c0:	bcs	505d4 <__assert_fail@plt+0x3f3c8>
   505c4:	sub	r1, r4, r0
   505c8:	sub	r3, r1, #1
   505cc:	cmp	r3, #7
   505d0:	bls	505fc <__assert_fail@plt+0x3f3f0>
   505d4:	cmp	sl, #0
   505d8:	bne	50630 <__assert_fail@plt+0x3f424>
   505dc:	cmp	r7, r5
   505e0:	bcs	50650 <__assert_fail@plt+0x3f444>
   505e4:	mov	r0, r6
   505e8:	add	r6, r6, #4
   505ec:	cmp	r4, r6
   505f0:	add	r7, r7, #1
   505f4:	bls	505bc <__assert_fail@plt+0x3f3b0>
   505f8:	mov	r1, #4
   505fc:	ldr	r3, [r8]
   50600:	blx	r3
   50604:	cmp	sl, #0
   50608:	beq	505dc <__assert_fail@plt+0x3f3d0>
   5060c:	sub	r3, r0, #1
   50610:	cmp	r3, #7
   50614:	bhi	50634 <__assert_fail@plt+0x3f428>
   50618:	ldr	r2, [pc, #1256]	; 50b08 <__assert_fail@plt+0x3f8fc>
   5061c:	add	r3, r2, r3, lsl #2
   50620:	ldr	r1, [r3, #3444]	; 0xd74
   50624:	mov	r0, r9
   50628:	bl	10f24 <printf@plt>
   5062c:	b	505dc <__assert_fail@plt+0x3f3d0>
   50630:	mov	r0, #0
   50634:	mov	r3, r0
   50638:	mov	r1, #16
   5063c:	ldr	r2, [pc, #1224]	; 50b0c <__assert_fail@plt+0x3f900>
   50640:	ldr	r0, [pc, #1224]	; 50b10 <__assert_fail@plt+0x3f904>
   50644:	bl	110b0 <snprintf@plt>
   50648:	ldr	r1, [pc, #1216]	; 50b10 <__assert_fail@plt+0x3f904>
   5064c:	b	50624 <__assert_fail@plt+0x3f418>
   50650:	cmp	sl, #0
   50654:	ldr	r5, [sp, #16]
   50658:	bne	50a4c <__assert_fail@plt+0x3f840>
   5065c:	cmp	fp, #0
   50660:	beq	4fce0 <__assert_fail@plt+0x3ead4>
   50664:	mov	r7, #0
   50668:	ldr	r0, [sp, #32]
   5066c:	str	fp, [sp, #16]
   50670:	b	506a4 <__assert_fail@plt+0x3f498>
   50674:	cmp	r4, r5
   50678:	bls	5068c <__assert_fail@plt+0x3f480>
   5067c:	sub	r1, r4, r5
   50680:	sub	r3, r1, #1
   50684:	cmp	r3, #7
   50688:	bls	506d0 <__assert_fail@plt+0x3f4c4>
   5068c:	ldr	r3, [sp, #16]
   50690:	add	r7, r7, #1
   50694:	cmp	r7, r3
   50698:	mov	r0, r9
   5069c:	mov	r5, r8
   506a0:	bcs	4ff74 <__assert_fail@plt+0x3ed68>
   506a4:	add	r9, r0, #8
   506a8:	cmp	r9, r4
   506ac:	bls	5082c <__assert_fail@plt+0x3f620>
   506b0:	mov	r2, #0
   506b4:	mov	r3, #0
   506b8:	strd	r2, [sp, #72]	; 0x48
   506bc:	strd	r2, [sp, #80]	; 0x50
   506c0:	add	r8, r5, #4
   506c4:	cmp	r8, r4
   506c8:	bcs	50674 <__assert_fail@plt+0x3f468>
   506cc:	mov	r1, #4
   506d0:	ldr	r3, [pc, #984]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   506d4:	mov	r0, r5
   506d8:	ldr	r3, [r3]
   506dc:	blx	r3
   506e0:	subs	r6, r0, #0
   506e4:	beq	5068c <__assert_fail@plt+0x3f480>
   506e8:	ldr	r3, [sp, #40]	; 0x28
   506ec:	sub	r5, r6, #-1073741823	; 0xc0000001
   506f0:	ldr	r2, [sp, #64]	; 0x40
   506f4:	cmp	sl, #0
   506f8:	mla	fp, r3, r5, r2
   506fc:	bne	509b4 <__assert_fail@plt+0x3f7a8>
   50700:	ldr	r3, [sp, #20]
   50704:	cmp	r3, #0
   50708:	beq	5068c <__assert_fail@plt+0x3f480>
   5070c:	add	r2, r6, r6, lsl #1
   50710:	ldr	r1, [sp, #56]	; 0x38
   50714:	add	r2, r6, r2, lsl #2
   50718:	ldr	r3, [sp, #12]
   5071c:	add	r2, r1, r2, lsl #3
   50720:	sub	r2, r2, #104	; 0x68
   50724:	mov	r5, fp
   50728:	str	r8, [sp, #32]
   5072c:	str	r2, [sp, #24]
   50730:	mov	r6, #0
   50734:	str	r9, [sp, #28]
   50738:	ldr	fp, [sp, #20]
   5073c:	str	r7, [sp, #36]	; 0x24
   50740:	mov	r8, r3
   50744:	b	507ac <__assert_fail@plt+0x3f5a0>
   50748:	cmp	r0, r4
   5074c:	bcs	50760 <__assert_fail@plt+0x3f554>
   50750:	sub	r1, r4, r0
   50754:	sub	r2, r1, #1
   50758:	cmp	r2, #7
   5075c:	bls	507c4 <__assert_fail@plt+0x3f5b8>
   50760:	mov	r7, #0
   50764:	cmp	sl, #0
   50768:	bne	50818 <__assert_fail@plt+0x3f60c>
   5076c:	add	r9, r8, #4
   50770:	cmp	r4, r9
   50774:	bhi	507d8 <__assert_fail@plt+0x3f5cc>
   50778:	cmp	r8, r4
   5077c:	bcs	50790 <__assert_fail@plt+0x3f584>
   50780:	sub	r1, r4, r8
   50784:	sub	r0, r1, #1
   50788:	cmp	r0, #7
   5078c:	bls	507dc <__assert_fail@plt+0x3f5d0>
   50790:	mov	r1, sl
   50794:	ldr	r3, [sp, #24]
   50798:	add	r1, r1, #18
   5079c:	str	r7, [r3, r1, lsl #2]
   507a0:	cmp	r6, fp
   507a4:	mov	r8, r9
   507a8:	bcs	5083c <__assert_fail@plt+0x3f630>
   507ac:	mov	r0, r5
   507b0:	add	r5, r5, #4
   507b4:	cmp	r4, r5
   507b8:	add	r6, r6, #1
   507bc:	bls	50748 <__assert_fail@plt+0x3f53c>
   507c0:	mov	r1, #4
   507c4:	ldr	r3, [pc, #740]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   507c8:	ldr	r2, [r3]
   507cc:	blx	r2
   507d0:	mov	r7, r0
   507d4:	b	50764 <__assert_fail@plt+0x3f558>
   507d8:	mov	r1, #4
   507dc:	ldr	r3, [pc, #716]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   507e0:	mov	r0, r8
   507e4:	ldr	r3, [r3]
   507e8:	blx	r3
   507ec:	cmp	r0, #7
   507f0:	mov	r8, r0
   507f4:	mov	r1, r0
   507f8:	bls	50794 <__assert_fail@plt+0x3f588>
   507fc:	mov	r2, #5
   50800:	ldr	r1, [pc, #748]	; 50af4 <__assert_fail@plt+0x3f8e8>
   50804:	mov	r0, #0
   50808:	bl	10f90 <dcgettext@plt>
   5080c:	mov	r1, r8
   50810:	bl	54dd0 <warn@@Base>
   50814:	b	507a0 <__assert_fail@plt+0x3f594>
   50818:	mov	r1, r7
   5081c:	ldr	r0, [pc, #712]	; 50aec <__assert_fail@plt+0x3f8e0>
   50820:	add	r9, r8, #4
   50824:	bl	10f24 <printf@plt>
   50828:	b	507a0 <__assert_fail@plt+0x3f594>
   5082c:	add	r2, sp, #80	; 0x50
   50830:	add	r1, sp, #72	; 0x48
   50834:	bl	55148 <warn@@Base+0x378>
   50838:	b	506c0 <__assert_fail@plt+0x3f4b4>
   5083c:	cmp	sl, #0
   50840:	ldr	r9, [sp, #28]
   50844:	ldr	r8, [sp, #32]
   50848:	ldr	r7, [sp, #36]	; 0x24
   5084c:	beq	5068c <__assert_fail@plt+0x3f480>
   50850:	mov	r0, #10
   50854:	bl	110c8 <putchar@plt>
   50858:	b	5068c <__assert_fail@plt+0x3f480>
   5085c:	mov	r2, #5
   50860:	ldr	r1, [pc, #684]	; 50b14 <__assert_fail@plt+0x3f908>
   50864:	mov	r0, #0
   50868:	bl	10f90 <dcgettext@plt>
   5086c:	bl	54dd0 <warn@@Base>
   50870:	mov	r0, #0
   50874:	b	4fdac <__assert_fail@plt+0x3eba0>
   50878:	str	r3, [r6, #1536]	; 0x600
   5087c:	bl	4fb90 <__assert_fail@plt+0x3e984>
   50880:	str	r0, [sp, #56]	; 0x38
   50884:	str	r0, [r6, #1532]	; 0x5fc
   50888:	b	501dc <__assert_fail@plt+0x3efd0>
   5088c:	ldr	r1, [pc, #644]	; 50b18 <__assert_fail@plt+0x3f90c>
   50890:	mov	r2, #5
   50894:	mov	r0, #0
   50898:	bl	10f90 <dcgettext@plt>
   5089c:	bl	10f24 <printf@plt>
   508a0:	ldr	r0, [sp, #60]	; 0x3c
   508a4:	mov	r2, #5
   508a8:	cmp	r0, #0
   508ac:	movne	r0, #0
   508b0:	ldreq	r1, [pc, #612]	; 50b1c <__assert_fail@plt+0x3f910>
   508b4:	ldrne	r1, [pc, #612]	; 50b20 <__assert_fail@plt+0x3f914>
   508b8:	bl	10f90 <dcgettext@plt>
   508bc:	mov	r1, r0
   508c0:	ldr	r0, [pc, #604]	; 50b24 <__assert_fail@plt+0x3f918>
   508c4:	bl	10f24 <printf@plt>
   508c8:	ldr	r3, [sp, #20]
   508cc:	cmp	r3, #0
   508d0:	beq	5096c <__assert_fail@plt+0x3f760>
   508d4:	str	r5, [sp, #16]
   508d8:	ldr	r7, [pc, #464]	; 50ab0 <__assert_fail@plt+0x3f8a4>
   508dc:	ldr	r9, [pc, #548]	; 50b08 <__assert_fail@plt+0x3f8fc>
   508e0:	ldr	r8, [pc, #540]	; 50b04 <__assert_fail@plt+0x3f8f8>
   508e4:	ldr	r6, [sp, #12]
   508e8:	ldr	r5, [sp, #44]	; 0x2c
   508ec:	b	50934 <__assert_fail@plt+0x3f728>
   508f0:	cmp	r0, r4
   508f4:	bcs	50908 <__assert_fail@plt+0x3f6fc>
   508f8:	sub	r1, r4, r0
   508fc:	sub	r3, r1, #1
   50900:	cmp	r3, #7
   50904:	bls	50948 <__assert_fail@plt+0x3f73c>
   50908:	mov	r0, #0
   5090c:	mov	r3, r0
   50910:	mov	r1, #16
   50914:	ldr	r2, [pc, #496]	; 50b0c <__assert_fail@plt+0x3f900>
   50918:	ldr	r0, [pc, #496]	; 50b10 <__assert_fail@plt+0x3f904>
   5091c:	bl	110b0 <snprintf@plt>
   50920:	ldr	r1, [pc, #488]	; 50b10 <__assert_fail@plt+0x3f904>
   50924:	mov	r0, r8
   50928:	bl	10f24 <printf@plt>
   5092c:	cmp	r5, r6
   50930:	beq	50968 <__assert_fail@plt+0x3f75c>
   50934:	mov	r0, r6
   50938:	add	r6, r6, #4
   5093c:	cmp	r4, r6
   50940:	bls	508f0 <__assert_fail@plt+0x3f6e4>
   50944:	mov	r1, #4
   50948:	ldr	r3, [r7]
   5094c:	blx	r3
   50950:	sub	r2, r0, #1
   50954:	cmp	r2, #7
   50958:	bhi	5090c <__assert_fail@plt+0x3f700>
   5095c:	add	r2, r9, r2, lsl #2
   50960:	ldr	r1, [r2, #3444]	; 0xd74
   50964:	b	50924 <__assert_fail@plt+0x3f718>
   50968:	ldr	r5, [sp, #16]
   5096c:	mov	r0, #10
   50970:	bl	110c8 <putchar@plt>
   50974:	cmp	fp, #0
   50978:	streq	fp, [sp, #56]	; 0x38
   5097c:	beq	509fc <__assert_fail@plt+0x3f7f0>
   50980:	mov	r3, #0
   50984:	str	r3, [sp, #56]	; 0x38
   50988:	b	501e4 <__assert_fail@plt+0x3efd8>
   5098c:	mov	r0, r3
   50990:	mov	r1, #4
   50994:	str	r3, [r6, #1820]	; 0x71c
   50998:	str	sl, [r6, #1824]	; 0x720
   5099c:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   509a0:	str	r0, [r6, #1816]	; 0x718
   509a4:	b	5052c <__assert_fail@plt+0x3f320>
   509a8:	mov	r2, #5
   509ac:	ldr	r1, [pc, #372]	; 50b28 <__assert_fail@plt+0x3f91c>
   509b0:	b	4fdbc <__assert_fail@plt+0x3ebb0>
   509b4:	mov	r2, #5
   509b8:	ldr	r1, [pc, #312]	; 50af8 <__assert_fail@plt+0x3f8ec>
   509bc:	mov	r0, #0
   509c0:	bl	10f90 <dcgettext@plt>
   509c4:	add	r3, sp, #88	; 0x58
   509c8:	str	r3, [sp]
   509cc:	ldrd	r2, [sp, #80]	; 0x50
   509d0:	mov	r5, r0
   509d4:	ldrd	r0, [sp, #72]	; 0x48
   509d8:	bl	3e35c <__assert_fail@plt+0x2d150>
   509dc:	mov	r1, r7
   509e0:	mov	r2, r0
   509e4:	mov	r0, r5
   509e8:	bl	10f24 <printf@plt>
   509ec:	ldr	r3, [sp, #20]
   509f0:	cmp	r3, #0
   509f4:	bne	5070c <__assert_fail@plt+0x3f500>
   509f8:	b	50850 <__assert_fail@plt+0x3f644>
   509fc:	mov	r0, #10
   50a00:	bl	110c8 <putchar@plt>
   50a04:	ldr	r1, [pc, #288]	; 50b2c <__assert_fail@plt+0x3f920>
   50a08:	mov	r2, #5
   50a0c:	mov	r0, #0
   50a10:	bl	10f90 <dcgettext@plt>
   50a14:	bl	10f24 <printf@plt>
   50a18:	ldr	r0, [sp, #60]	; 0x3c
   50a1c:	mov	r2, #5
   50a20:	cmp	r0, #0
   50a24:	movne	r0, #0
   50a28:	ldreq	r1, [pc, #236]	; 50b1c <__assert_fail@plt+0x3f910>
   50a2c:	ldrne	r1, [pc, #236]	; 50b20 <__assert_fail@plt+0x3f914>
   50a30:	bl	10f90 <dcgettext@plt>
   50a34:	mov	r1, r0
   50a38:	ldr	r0, [pc, #228]	; 50b24 <__assert_fail@plt+0x3f918>
   50a3c:	bl	10f24 <printf@plt>
   50a40:	ldr	r3, [sp, #20]
   50a44:	cmp	r3, #0
   50a48:	bne	505a0 <__assert_fail@plt+0x3f394>
   50a4c:	mov	r0, #10
   50a50:	bl	110c8 <putchar@plt>
   50a54:	cmp	fp, #0
   50a58:	bne	50664 <__assert_fail@plt+0x3f458>
   50a5c:	b	4ff7c <__assert_fail@plt+0x3ed70>
   50a60:	mov	r2, #5
   50a64:	ldr	r1, [pc, #196]	; 50b30 <__assert_fail@plt+0x3f924>
   50a68:	mov	r0, #0
   50a6c:	bl	10f90 <dcgettext@plt>
   50a70:	ldr	r2, [sp, #24]
   50a74:	mov	r1, r7
   50a78:	bl	54dd0 <warn@@Base>
   50a7c:	mov	r0, #0
   50a80:	b	4fdac <__assert_fail@plt+0x3eba0>
   50a84:	mov	r2, #5
   50a88:	ldr	r1, [pc, #164]	; 50b34 <__assert_fail@plt+0x3f928>
   50a8c:	mov	r0, sl
   50a90:	bl	10f90 <dcgettext@plt>
   50a94:	mov	r1, r8
   50a98:	bl	54dd0 <warn@@Base>
   50a9c:	mov	r0, sl
   50aa0:	b	4fdac <__assert_fail@plt+0x3eba0>
   50aa4:	mov	r0, r1
   50aa8:	bl	3e160 <__assert_fail@plt+0x2cf54>
   50aac:	andeq	r2, r8, ip, ror #15
   50ab0:	andeq	lr, r9, ip, asr sp
   50ab4:	andeq	r2, r8, r8, lsr r8
   50ab8:	andeq	r2, r8, r0, ror #16
   50abc:	andeq	r2, r8, r4, lsl #16
   50ac0:	andeq	r2, r8, r8, lsl #17
   50ac4:	andeq	r2, r8, r8, lsr #17
   50ac8:	andeq	r2, r8, r8, asr #17
   50acc:	andeq	r2, r8, r8, ror #17
   50ad0:	ldrdeq	ip, [r9], -r0
   50ad4:	andeq	r7, r6, r0, lsl #30
   50ad8:			; <UNDEFINED> instruction: 0x000829bc
   50adc:	andeq	r2, r8, r8, lsl #18
   50ae0:	muleq	r8, r4, r9
   50ae4:	andeq	r2, r8, ip, ror #18
   50ae8:	andeq	r2, r8, r8, asr #20
   50aec:	andeq	r2, r8, r8, asr fp
   50af0:	strdeq	r2, [r8], -r0
   50af4:	andeq	r2, r8, r0, ror #22
   50af8:	andeq	r2, r8, r8, asr #22
   50afc:	muleq	r8, ip, fp
   50b00:	andeq	r2, r8, r8, lsl #22
   50b04:	andeq	r2, r8, ip, lsl #21
   50b08:			; <UNDEFINED> instruction: 0x0007d2bc
   50b0c:	andeq	ip, r6, r8, ror r0
   50b10:	ldrdeq	ip, [r9], -r8
   50b14:	andeq	r2, r8, r8, lsr r9
   50b18:	andeq	r2, r8, r8, asr sl
   50b1c:	andeq	r2, r8, r8, ror #20
   50b20:	andeq	r2, r8, r4, ror sl
   50b24:	andeq	r2, r8, ip, ror sl
   50b28:	andeq	r2, r8, r4, lsl sl
   50b2c:	andeq	r2, r8, ip, lsl #23
   50b30:	muleq	r8, r4, sl
   50b34:	ldrdeq	r2, [r8], -r0
   50b38:	push	{r4, r5, r6, lr}
   50b3c:	mov	r5, r0
   50b40:	ldr	r4, [pc, #116]	; 50bbc <__assert_fail@plt+0x3f9b0>
   50b44:	ldr	r0, [r4, #3100]	; 0xc1c
   50b48:	cmn	r0, #1
   50b4c:	popne	{r4, r5, r6, pc}
   50b50:	mov	r3, #1
   50b54:	mov	r1, r5
   50b58:	mov	r0, #38	; 0x26
   50b5c:	str	r3, [r4, #3100]	; 0xc1c
   50b60:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   50b64:	cmp	r0, #0
   50b68:	bne	50ba4 <__assert_fail@plt+0x3f998>
   50b6c:	mov	r1, r5
   50b70:	mov	r0, #39	; 0x27
   50b74:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   50b78:	cmp	r0, #0
   50b7c:	bne	50b88 <__assert_fail@plt+0x3f97c>
   50b80:	ldr	r0, [r4, #3100]	; 0xc1c
   50b84:	pop	{r4, r5, r6, pc}
   50b88:	mov	r1, #0
   50b8c:	ldr	r0, [pc, #44]	; 50bc0 <__assert_fail@plt+0x3f9b4>
   50b90:	bl	4fbe0 <__assert_fail@plt+0x3e9d4>
   50b94:	cmp	r0, #0
   50b98:	bne	50b80 <__assert_fail@plt+0x3f974>
   50b9c:	str	r0, [r4, #3100]	; 0xc1c
   50ba0:	pop	{r4, r5, r6, pc}
   50ba4:	mov	r1, #0
   50ba8:	add	r0, r4, #2736	; 0xab0
   50bac:	bl	4fbe0 <__assert_fail@plt+0x3e9d4>
   50bb0:	cmp	r0, #0
   50bb4:	streq	r0, [r4, #3100]	; 0xc1c
   50bb8:	b	50b6c <__assert_fail@plt+0x3f960>
   50bbc:	strdeq	r9, [r9], -r0
   50bc0:	andeq	sl, r9, r8, ror #5
   50bc4:	push	{r4, r5, r6, lr}
   50bc8:	mov	r6, r1
   50bcc:	bl	50b38 <__assert_fail@plt+0x3f92c>
   50bd0:	cmp	r0, #0
   50bd4:	popeq	{r4, r5, r6, pc}
   50bd8:	ldr	r3, [pc, #136]	; 50c68 <__assert_fail@plt+0x3fa5c>
   50bdc:	ldr	r5, [r3, #1824]	; 0x720
   50be0:	cmp	r5, #0
   50be4:	beq	50c28 <__assert_fail@plt+0x3fa1c>
   50be8:	ldr	r0, [r3, #1816]	; 0x718
   50bec:	ldr	r3, [r0]
   50bf0:	cmp	r6, r3
   50bf4:	popeq	{r4, r5, r6, pc}
   50bf8:	add	ip, r0, #4
   50bfc:	mov	r2, #0
   50c00:	b	50c18 <__assert_fail@plt+0x3fa0c>
   50c04:	ldr	r4, [lr]
   50c08:	add	ip, ip, #4
   50c0c:	cmp	r4, r6
   50c10:	beq	50c30 <__assert_fail@plt+0x3fa24>
   50c14:	mov	r2, r3
   50c18:	add	r3, r2, #1
   50c1c:	cmp	r3, r5
   50c20:	mov	lr, ip
   50c24:	bne	50c04 <__assert_fail@plt+0x3f9f8>
   50c28:	mov	r0, #0
   50c2c:	pop	{r4, r5, r6, pc}
   50c30:	add	r2, r2, #1073741824	; 0x40000000
   50c34:	ldr	r1, [r0, r2, lsl #2]
   50c38:	cmp	r1, #0
   50c3c:	addne	r2, r0, r2, lsl #2
   50c40:	beq	50c60 <__assert_fail@plt+0x3fa54>
   50c44:	subs	r3, r3, #1
   50c48:	popeq	{r4, r5, r6, pc}
   50c4c:	ldr	r1, [r2, #-4]!
   50c50:	cmp	r1, #0
   50c54:	bne	50c44 <__assert_fail@plt+0x3fa38>
   50c58:	add	r0, r0, r3, lsl #2
   50c5c:	pop	{r4, r5, r6, pc}
   50c60:	mov	r0, lr
   50c64:	pop	{r4, r5, r6, pc}
   50c68:	ldrdeq	ip, [r9], -r0
   50c6c:	push	{r4, r5, r6, lr}
   50c70:	sub	sp, sp, #8
   50c74:	ldr	r6, [pc, #188]	; 50d38 <__assert_fail@plt+0x3fb2c>
   50c78:	ldr	r4, [r6, #1488]	; 0x5d0
   50c7c:	cmn	r4, #1
   50c80:	moveq	r4, #0
   50c84:	beq	50c90 <__assert_fail@plt+0x3fa84>
   50c88:	cmp	r4, #0
   50c8c:	beq	50c9c <__assert_fail@plt+0x3fa90>
   50c90:	mov	r0, r4
   50c94:	add	sp, sp, #8
   50c98:	pop	{r4, r5, r6, pc}
   50c9c:	mov	r5, r0
   50ca0:	bl	50b38 <__assert_fail@plt+0x3f92c>
   50ca4:	mov	r1, r5
   50ca8:	mov	r0, #3
   50cac:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   50cb0:	cmp	r0, #0
   50cb4:	beq	50ce8 <__assert_fail@plt+0x3fadc>
   50cb8:	str	r4, [sp]
   50cbc:	mov	r3, #1
   50cc0:	mov	r2, r4
   50cc4:	mov	r1, r5
   50cc8:	ldr	r0, [pc, #108]	; 50d3c <__assert_fail@plt+0x3fb30>
   50ccc:	bl	453fc <__assert_fail@plt+0x341f0>
   50cd0:	cmp	r0, #0
   50cd4:	beq	50ce8 <__assert_fail@plt+0x3fadc>
   50cd8:	ldr	r4, [r6, #1488]	; 0x5d0
   50cdc:	mov	r0, r4
   50ce0:	add	sp, sp, #8
   50ce4:	pop	{r4, r5, r6, pc}
   50ce8:	mov	r1, r5
   50cec:	mov	r0, #27
   50cf0:	bl	3d9f4 <__assert_fail@plt+0x2c7e8>
   50cf4:	cmp	r0, #0
   50cf8:	bne	50d10 <__assert_fail@plt+0x3fb04>
   50cfc:	mvn	r3, #0
   50d00:	mov	r0, r4
   50d04:	str	r3, [r6, #1488]	; 0x5d0
   50d08:	add	sp, sp, #8
   50d0c:	pop	{r4, r5, r6, pc}
   50d10:	mov	r3, #0
   50d14:	str	r3, [sp]
   50d18:	mov	r1, r5
   50d1c:	mov	r3, #1
   50d20:	mov	r2, #28
   50d24:	ldr	r0, [pc, #20]	; 50d40 <__assert_fail@plt+0x3fb34>
   50d28:	bl	453fc <__assert_fail@plt+0x341f0>
   50d2c:	cmp	r0, #0
   50d30:	beq	50cfc <__assert_fail@plt+0x3faf0>
   50d34:	b	50cd8 <__assert_fail@plt+0x3facc>
   50d38:	ldrdeq	ip, [r9], -r0
   50d3c:	andeq	r9, r9, r8, asr #17
   50d40:	andeq	r9, r9, r8, lsl #31
   50d44:	ldrd	r2, [r0, #32]
   50d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   50d4c:	sub	sp, sp, #28
   50d50:	orrs	r3, r2, r3
   50d54:	str	r0, [sp, #16]
   50d58:	beq	50fb0 <__assert_fail@plt+0x3fda4>
   50d5c:	mov	r0, r1
   50d60:	bl	50c6c <__assert_fail@plt+0x3fa60>
   50d64:	subs	r4, r0, #0
   50d68:	beq	50f8c <__assert_fail@plt+0x3fd80>
   50d6c:	ldr	r3, [sp, #16]
   50d70:	ldr	r8, [pc, #660]	; 5100c <__assert_fail@plt+0x3fe00>
   50d74:	add	r1, r3, #12
   50d78:	add	r0, r3, #8
   50d7c:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   50d80:	ldr	r0, [r8, #1488]	; 0x5d0
   50d84:	mov	r1, #4
   50d88:	add	r0, r0, #1
   50d8c:	bl	58640 <warn@@Base+0x3870>
   50d90:	ldr	r4, [r8, #1488]	; 0x5d0
   50d94:	cmp	r4, #0
   50d98:	str	r0, [sp, #20]
   50d9c:	beq	50fd8 <__assert_fail@plt+0x3fdcc>
   50da0:	mov	fp, #0
   50da4:	mvn	sl, #0
   50da8:	mov	r6, #0
   50dac:	strd	sl, [sp, #8]
   50db0:	ldr	r9, [pc, #600]	; 51010 <__assert_fail@plt+0x3fe04>
   50db4:	mov	r4, r6
   50db8:	mov	fp, r0
   50dbc:	b	50dd0 <__assert_fail@plt+0x3fbc4>
   50dc0:	ldr	r3, [r8, #1488]	; 0x5d0
   50dc4:	add	r4, r4, #1
   50dc8:	cmp	r4, r3
   50dcc:	bcs	50e4c <__assert_fail@plt+0x3fc40>
   50dd0:	add	r3, r4, r4, lsl #2
   50dd4:	ldr	r5, [r8, #1440]	; 0x5a0
   50dd8:	add	r3, r4, r3, lsl #1
   50ddc:	lsl	ip, r6, #2
   50de0:	add	r5, r5, r3, lsl #3
   50de4:	ldrd	r2, [sp, #8]
   50de8:	ldrd	r0, [r5, #32]
   50dec:	add	lr, ip, #4
   50df0:	add	r7, fp, ip
   50df4:	cmp	r1, r3
   50df8:	cmpeq	r0, r2
   50dfc:	beq	50dc0 <__assert_fail@plt+0x3fbb4>
   50e00:	ldr	r3, [sp, #16]
   50e04:	ldrd	r2, [r3, #32]
   50e08:	cmp	r1, r3
   50e0c:	cmpeq	r0, r2
   50e10:	addcc	r6, r6, #1
   50e14:	addcc	r7, fp, lr
   50e18:	strcc	r5, [fp, ip]
   50e1c:	bcc	50dc0 <__assert_fail@plt+0x3fbb4>
   50e20:	mov	r2, #5
   50e24:	mov	r1, r9
   50e28:	mov	r0, #0
   50e2c:	bl	10f90 <dcgettext@plt>
   50e30:	mov	r2, r4
   50e34:	ldr	r1, [r5, #32]
   50e38:	bl	54dd0 <warn@@Base>
   50e3c:	ldr	r3, [r8, #1488]	; 0x5d0
   50e40:	add	r4, r4, #1
   50e44:	cmp	r4, r3
   50e48:	bcc	50dd0 <__assert_fail@plt+0x3fbc4>
   50e4c:	mov	r0, #88	; 0x58
   50e50:	bl	5861c <warn@@Base+0x384c>
   50e54:	ldr	r3, [sp, #16]
   50e58:	ldr	fp, [sp, #20]
   50e5c:	mov	r2, #4
   50e60:	ldrd	r4, [r3, #32]
   50e64:	mov	r1, r6
   50e68:	ldr	r3, [pc, #420]	; 51014 <__assert_fail@plt+0x3fe08>
   50e6c:	str	r0, [r7]
   50e70:	strd	r4, [r0, #32]
   50e74:	mov	r0, fp
   50e78:	bl	11170 <qsort@plt>
   50e7c:	cmp	r6, #0
   50e80:	beq	50f70 <__assert_fail@plt+0x3fd64>
   50e84:	ldr	sl, [pc, #396]	; 51018 <__assert_fail@plt+0x3fe0c>
   50e88:	add	r3, fp, r6, lsl #2
   50e8c:	str	r3, [sp, #8]
   50e90:	ldr	r3, [fp]
   50e94:	ldr	r1, [pc, #384]	; 5101c <__assert_fail@plt+0x3fe10>
   50e98:	mov	r2, #5
   50e9c:	mov	r0, #0
   50ea0:	ldr	r5, [r3]
   50ea4:	bl	10f90 <dcgettext@plt>
   50ea8:	ldr	r3, [fp], #4
   50eac:	mov	r4, #0
   50eb0:	ldrd	r2, [r3, #16]
   50eb4:	str	r4, [sp]
   50eb8:	mov	r6, r0
   50ebc:	ldr	r0, [pc, #348]	; 51020 <__assert_fail@plt+0x3fe14>
   50ec0:	bl	3c744 <__assert_fail@plt+0x2b538>
   50ec4:	mov	r1, r0
   50ec8:	mov	r0, r6
   50ecc:	bl	10f24 <printf@plt>
   50ed0:	mov	r2, #5
   50ed4:	ldr	r1, [pc, #328]	; 51024 <__assert_fail@plt+0x3fe18>
   50ed8:	mov	r0, r4
   50edc:	bl	10f90 <dcgettext@plt>
   50ee0:	bl	10f24 <printf@plt>
   50ee4:	ldr	r3, [fp, #-4]
   50ee8:	ldr	r2, [fp]
   50eec:	ldr	r1, [sp, #16]
   50ef0:	ldr	r3, [r3, #32]
   50ef4:	ldr	r2, [r2, #32]
   50ef8:	ldr	r8, [r1, #16]
   50efc:	add	r9, r8, r3
   50f00:	add	r8, r8, r2
   50f04:	cmp	r9, r8
   50f08:	bcs	50f64 <__assert_fail@plt+0x3fd58>
   50f0c:	ldr	r3, [sl]
   50f10:	mov	r0, r9
   50f14:	mov	r1, r5
   50f18:	blx	r3
   50f1c:	mov	r2, #5
   50f20:	add	r9, r9, r5
   50f24:	mov	r6, r0
   50f28:	mov	r7, r1
   50f2c:	mov	r0, #0
   50f30:	ldr	r1, [pc, #240]	; 51028 <__assert_fail@plt+0x3fe1c>
   50f34:	bl	10f90 <dcgettext@plt>
   50f38:	mov	r1, r4
   50f3c:	bl	10f24 <printf@plt>
   50f40:	mov	r2, r5
   50f44:	mov	r0, r6
   50f48:	mov	r1, r7
   50f4c:	bl	3ca6c <__assert_fail@plt+0x2b860>
   50f50:	mov	r0, #10
   50f54:	bl	110c8 <putchar@plt>
   50f58:	cmp	r8, r9
   50f5c:	add	r4, r4, #1
   50f60:	bhi	50f0c <__assert_fail@plt+0x3fd00>
   50f64:	ldr	r3, [sp, #8]
   50f68:	cmp	r3, fp
   50f6c:	bne	50e90 <__assert_fail@plt+0x3fc84>
   50f70:	mov	r0, #10
   50f74:	bl	110c8 <putchar@plt>
   50f78:	ldr	r0, [sp, #20]
   50f7c:	bl	10f54 <free@plt>
   50f80:	mov	r0, #1
   50f84:	add	sp, sp, #28
   50f88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50f8c:	mov	r2, #5
   50f90:	ldr	r1, [pc, #148]	; 5102c <__assert_fail@plt+0x3fe20>
   50f94:	bl	10f90 <dcgettext@plt>
   50f98:	ldr	r3, [sp, #16]
   50f9c:	ldr	r1, [r3, #8]
   50fa0:	bl	54dd0 <warn@@Base>
   50fa4:	mov	r0, r4
   50fa8:	add	sp, sp, #28
   50fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50fb0:	mov	r2, #5
   50fb4:	ldr	r1, [pc, #116]	; 51030 <__assert_fail@plt+0x3fe24>
   50fb8:	mov	r0, #0
   50fbc:	bl	10f90 <dcgettext@plt>
   50fc0:	ldr	r3, [sp, #16]
   50fc4:	ldr	r1, [r3, #8]
   50fc8:	bl	10f24 <printf@plt>
   50fcc:	mov	r0, #0
   50fd0:	add	sp, sp, #28
   50fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   50fd8:	mov	r0, #88	; 0x58
   50fdc:	bl	5861c <warn@@Base+0x384c>
   50fe0:	ldr	r3, [sp, #16]
   50fe4:	ldr	ip, [sp, #20]
   50fe8:	mov	r1, r4
   50fec:	ldrd	r6, [r3, #32]
   50ff0:	mov	r2, #4
   50ff4:	ldr	r3, [pc, #24]	; 51014 <__assert_fail@plt+0x3fe08>
   50ff8:	str	r0, [ip]
   50ffc:	strd	r6, [r0, #32]
   51000:	mov	r0, ip
   51004:	bl	11170 <qsort@plt>
   51008:	b	50f70 <__assert_fail@plt+0x3fd64>
   5100c:	ldrdeq	ip, [r9], -r0
   51010:	andeq	r2, r8, ip, lsl #24
   51014:	andeq	ip, r3, r0, asr #8
   51018:	andeq	lr, r9, ip, asr sp
   5101c:	andeq	r2, r8, r4, asr #24
   51020:	andeq	r9, r6, r0, lsr #15
   51024:	andeq	r2, r8, ip, ror #24
   51028:	andeq	r2, r8, ip, ror ip
   5102c:			; <UNDEFINED> instruction: 0x00082bb8
   51030:	andeq	lr, r7, ip, lsl #14
   51034:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   51038:	sub	sp, sp, #52	; 0x34
   5103c:	ldrd	r4, [r0, #32]
   51040:	ldr	sl, [r0, #16]
   51044:	str	r0, [sp, #12]
   51048:	cmp	r4, #0
   5104c:	str	r1, [sp, #28]
   51050:	str	r4, [sp, #32]
   51054:	add	fp, sl, r4
   51058:	beq	51438 <__assert_fail@plt+0x4022c>
   5105c:	ldr	r3, [sp, #12]
   51060:	ldr	r1, [pc, #1652]	; 516dc <__assert_fail@plt+0x404d0>
   51064:	ldr	r0, [r3, #8]
   51068:	bl	10f00 <strstr@plt>
   5106c:	subs	r3, r0, #0
   51070:	str	r3, [sp, #24]
   51074:	beq	51560 <__assert_fail@plt+0x40354>
   51078:	add	r6, sl, #4
   5107c:	cmp	r6, fp
   51080:	bcs	51114 <__assert_fail@plt+0x3ff08>
   51084:	mov	r1, #4
   51088:	ldr	r7, [pc, #1616]	; 516e0 <__assert_fail@plt+0x404d4>
   5108c:	mov	r0, sl
   51090:	ldr	r3, [r7]
   51094:	blx	r3
   51098:	mov	r3, #0
   5109c:	mvn	r2, #0
   510a0:	cmp	r1, r3
   510a4:	cmpeq	r0, r2
   510a8:	mov	r8, r0
   510ac:	beq	51570 <__assert_fail@plt+0x40364>
   510b0:	adds	r3, r0, #4
   510b4:	str	r3, [sp, #16]
   510b8:	adc	r3, r1, #0
   510bc:	str	r3, [sp, #20]
   510c0:	ldr	r3, [sp, #12]
   510c4:	mov	r2, #4
   510c8:	ldrd	r4, [r3, #32]
   510cc:	ldrd	r0, [sp, #16]
   510d0:	cmp	r5, r1
   510d4:	cmpeq	r4, r0
   510d8:	bcc	51150 <__assert_fail@plt+0x3ff44>
   510dc:	add	r4, r6, #2
   510e0:	cmp	r4, fp
   510e4:	bcc	51188 <__assert_fail@plt+0x3ff7c>
   510e8:	cmp	r6, fp
   510ec:	bcc	51460 <__assert_fail@plt+0x40254>
   510f0:	mov	r2, #5
   510f4:	ldr	r1, [pc, #1512]	; 516e4 <__assert_fail@plt+0x404d8>
   510f8:	mov	r0, #0
   510fc:	bl	10f90 <dcgettext@plt>
   51100:	bl	54dd0 <warn@@Base>
   51104:	mov	r4, #0
   51108:	mov	r0, r4
   5110c:	add	sp, sp, #52	; 0x34
   51110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51114:	cmp	sl, fp
   51118:	bcs	51130 <__assert_fail@plt+0x3ff24>
   5111c:	ldr	r3, [sp, #32]
   51120:	sub	r3, r3, #1
   51124:	cmp	r3, #7
   51128:	movls	r1, r4
   5112c:	bls	51088 <__assert_fail@plt+0x3fe7c>
   51130:	mov	r2, #4
   51134:	mov	r3, #0
   51138:	mov	r8, #0
   5113c:	strd	r2, [sp, #16]
   51140:	ldrd	r0, [sp, #16]
   51144:	cmp	r5, r1
   51148:	cmpeq	r4, r0
   5114c:	bcs	510dc <__assert_fail@plt+0x3fed0>
   51150:	ldr	r0, [sp, #12]
   51154:	mov	r3, #0
   51158:	ldr	r1, [r0, #16]
   5115c:	sub	r1, r6, r1
   51160:	sub	r2, r1, r2
   51164:	bl	35750 <__assert_fail@plt+0x24544>
   51168:	subs	r4, r0, #0
   5116c:	bne	510dc <__assert_fail@plt+0x3fed0>
   51170:	mov	r2, #5
   51174:	ldr	r1, [pc, #1388]	; 516e8 <__assert_fail@plt+0x404dc>
   51178:	bl	10f90 <dcgettext@plt>
   5117c:	mov	r1, r8
   51180:	bl	54dd0 <warn@@Base>
   51184:	b	51108 <__assert_fail@plt+0x3fefc>
   51188:	mov	r1, #2
   5118c:	ldr	r7, [pc, #1356]	; 516e0 <__assert_fail@plt+0x404d4>
   51190:	mov	r0, r6
   51194:	ldr	r3, [r7]
   51198:	blx	r3
   5119c:	uxth	r0, r0
   511a0:	cmp	r0, #5
   511a4:	bne	510f0 <__assert_fail@plt+0x3fee4>
   511a8:	add	r5, r6, #3
   511ac:	cmp	r5, fp
   511b0:	bcs	51474 <__assert_fail@plt+0x40268>
   511b4:	mov	r0, r4
   511b8:	ldr	r3, [r7]
   511bc:	mov	r1, #1
   511c0:	blx	r3
   511c4:	add	r4, r6, #4
   511c8:	cmp	fp, r4
   511cc:	uxtb	r3, r0
   511d0:	str	r3, [sp, #32]
   511d4:	bhi	514a0 <__assert_fail@plt+0x40294>
   511d8:	sub	r1, fp, r5
   511dc:	sub	r3, r1, #1
   511e0:	cmp	r3, #7
   511e4:	bls	514a4 <__assert_fail@plt+0x40298>
   511e8:	add	r3, r6, #8
   511ec:	cmp	fp, r3
   511f0:	str	r3, [sp, #16]
   511f4:	bls	51210 <__assert_fail@plt+0x40004>
   511f8:	mov	r1, #4
   511fc:	mov	r0, r4
   51200:	ldr	r3, [r7]
   51204:	blx	r3
   51208:	subs	r4, r0, #0
   5120c:	bne	51690 <__assert_fail@plt+0x40484>
   51210:	ldr	r0, [sp, #28]
   51214:	bl	50c6c <__assert_fail@plt+0x3fa60>
   51218:	subs	r4, r0, #0
   5121c:	beq	515e4 <__assert_fail@plt+0x403d8>
   51220:	ldr	r3, [pc, #1220]	; 516ec <__assert_fail@plt+0x404e0>
   51224:	ldr	r1, [r3, #1488]	; 0x5d0
   51228:	cmp	r1, #0
   5122c:	beq	515c8 <__assert_fail@plt+0x403bc>
   51230:	ldr	r3, [pc, #1204]	; 516ec <__assert_fail@plt+0x404e0>
   51234:	add	r2, r1, r1, lsl #2
   51238:	mov	r4, #0
   5123c:	ldr	r3, [r3, #1440]	; 0x5a0
   51240:	add	r1, r1, r2, lsl #1
   51244:	add	r1, r3, r1, lsl #3
   51248:	ldr	r2, [r3, #76]	; 0x4c
   5124c:	add	r3, r3, #88	; 0x58
   51250:	cmp	r3, r1
   51254:	add	r4, r4, r2
   51258:	bne	51248 <__assert_fail@plt+0x4003c>
   5125c:	cmp	r4, #0
   51260:	beq	515c8 <__assert_fail@plt+0x403bc>
   51264:	lsl	r0, r4, #4
   51268:	bl	5861c <warn@@Base+0x384c>
   5126c:	ldr	r3, [pc, #1144]	; 516ec <__assert_fail@plt+0x404e0>
   51270:	ldr	r3, [r3, #1488]	; 0x5d0
   51274:	cmp	r3, #0
   51278:	str	r0, [sp, #40]	; 0x28
   5127c:	beq	512e0 <__assert_fail@plt+0x400d4>
   51280:	ldr	r2, [pc, #1124]	; 516ec <__assert_fail@plt+0x404e0>
   51284:	add	r7, r3, r3, lsl #2
   51288:	ldr	r6, [sp, #40]	; 0x28
   5128c:	ldr	ip, [r2, #1440]	; 0x5a0
   51290:	add	r3, r3, r7, lsl #1
   51294:	add	r7, ip, r3, lsl #3
   51298:	ldr	r5, [ip, #76]	; 0x4c
   5129c:	cmp	r5, #0
   512a0:	beq	512d4 <__assert_fail@plt+0x400c8>
   512a4:	ldr	r2, [ip, #72]	; 0x48
   512a8:	add	r3, r6, #16
   512ac:	add	lr, r2, r5, lsl #3
   512b0:	sub	lr, lr, #8
   512b4:	sub	r2, r2, #8
   512b8:	ldrd	r0, [r2, #8]!
   512bc:	add	r3, r3, #16
   512c0:	str	ip, [r3, #-24]	; 0xffffffe8
   512c4:	cmp	lr, r2
   512c8:	strd	r0, [r3, #-32]	; 0xffffffe0
   512cc:	bne	512b8 <__assert_fail@plt+0x400ac>
   512d0:	add	r6, r6, r5, lsl #4
   512d4:	add	ip, ip, #88	; 0x58
   512d8:	cmp	ip, r7
   512dc:	bne	51298 <__assert_fail@plt+0x4008c>
   512e0:	ldr	r3, [pc, #1032]	; 516f0 <__assert_fail@plt+0x404e4>
   512e4:	mov	r2, #16
   512e8:	mov	r1, r4
   512ec:	ldr	r0, [sp, #40]	; 0x28
   512f0:	bl	11170 <qsort@plt>
   512f4:	ldr	r3, [pc, #1008]	; 516ec <__assert_fail@plt+0x404e0>
   512f8:	ldr	r3, [r3, #1828]	; 0x724
   512fc:	cmp	r3, #0
   51300:	beq	51314 <__assert_fail@plt+0x40108>
   51304:	ldr	r3, [sp, #40]	; 0x28
   51308:	ldrd	r2, [r3]
   5130c:	orrs	r3, r2, r3
   51310:	bne	51640 <__assert_fail@plt+0x40434>
   51314:	ldr	r3, [sp, #12]
   51318:	mov	r7, #0
   5131c:	add	r1, r3, #12
   51320:	add	r0, r3, #8
   51324:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   51328:	mov	r2, #5
   5132c:	ldr	r1, [pc, #960]	; 516f4 <__assert_fail@plt+0x404e8>
   51330:	mov	r0, #0
   51334:	bl	10f90 <dcgettext@plt>
   51338:	bl	10f24 <printf@plt>
   5133c:	ldr	r1, [sp, #24]
   51340:	ldr	r3, [pc, #944]	; 516f8 <__assert_fail@plt+0x404ec>
   51344:	ldr	r2, [pc, #944]	; 516fc <__assert_fail@plt+0x404f0>
   51348:	cmp	r1, #0
   5134c:	moveq	r2, r3
   51350:	str	r2, [sp, #36]	; 0x24
   51354:	ldr	r5, [sp, #40]	; 0x28
   51358:	mov	r3, sl
   5135c:	str	r4, [sp, #28]
   51360:	b	5139c <__assert_fail@plt+0x40190>
   51364:	mov	r3, r6
   51368:	str	r9, [sp]
   5136c:	mov	r2, r8
   51370:	mov	r1, fp
   51374:	mov	r0, r4
   51378:	ldr	ip, [sp, #36]	; 0x24
   5137c:	blx	ip
   51380:	mov	r3, r4
   51384:	str	r4, [sp, #16]
   51388:	ldr	r2, [sp, #28]
   5138c:	add	r7, r7, #1
   51390:	cmp	r2, r7
   51394:	add	r5, r5, #16
   51398:	beq	51538 <__assert_fail@plt+0x4032c>
   5139c:	ldr	r2, [sp, #24]
   513a0:	ldr	r1, [r5, #8]
   513a4:	cmp	r2, #0
   513a8:	ldr	r6, [r5]
   513ac:	ldrne	r8, [sp, #32]
   513b0:	ldreq	r8, [r1]
   513b4:	add	r4, sl, r6
   513b8:	sub	r2, r8, #2
   513bc:	cmp	r2, #6
   513c0:	bhi	514e8 <__assert_fail@plt+0x402dc>
   513c4:	cmp	fp, r4
   513c8:	movhi	r0, #0
   513cc:	movls	r0, #1
   513d0:	cmp	sl, r4
   513d4:	orrhi	r0, r0, #1
   513d8:	cmp	r0, #0
   513dc:	bne	51510 <__assert_fail@plt+0x40304>
   513e0:	ldr	r2, [pc, #772]	; 516ec <__assert_fail@plt+0x404e0>
   513e4:	ldr	r9, [r1, #24]
   513e8:	ldr	r2, [r2, #1828]	; 0x724
   513ec:	cmp	r2, #0
   513f0:	cmpne	r7, #0
   513f4:	beq	51364 <__assert_fail@plt+0x40158>
   513f8:	ldr	r2, [sp, #16]
   513fc:	cmp	r4, r2
   51400:	bhi	515bc <__assert_fail@plt+0x403b0>
   51404:	bcs	51364 <__assert_fail@plt+0x40158>
   51408:	cmp	r4, r3
   5140c:	beq	51388 <__assert_fail@plt+0x4017c>
   51410:	ldr	r1, [pc, #744]	; 51700 <__assert_fail@plt+0x404f4>
   51414:	mov	r2, #5
   51418:	bl	10f90 <dcgettext@plt>
   5141c:	ldr	r3, [sp, #16]
   51420:	mov	r2, r6
   51424:	sub	r1, r3, sl
   51428:	ldr	r3, [sp, #12]
   5142c:	ldr	r3, [r3, #8]
   51430:	bl	54dd0 <warn@@Base>
   51434:	b	51364 <__assert_fail@plt+0x40158>
   51438:	mov	r2, #5
   5143c:	ldr	r1, [pc, #704]	; 51704 <__assert_fail@plt+0x404f8>
   51440:	mov	r0, r4
   51444:	bl	10f90 <dcgettext@plt>
   51448:	ldr	r3, [sp, #12]
   5144c:	ldr	r1, [r3, #8]
   51450:	bl	10f24 <printf@plt>
   51454:	mov	r0, r4
   51458:	add	sp, sp, #52	; 0x34
   5145c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51460:	sub	r1, fp, r6
   51464:	sub	r3, r1, #1
   51468:	cmp	r3, #7
   5146c:	bls	5118c <__assert_fail@plt+0x3ff80>
   51470:	b	510f0 <__assert_fail@plt+0x3fee4>
   51474:	cmp	r4, fp
   51478:	bcs	5148c <__assert_fail@plt+0x40280>
   5147c:	sub	r1, fp, r4
   51480:	sub	r3, r1, #1
   51484:	cmp	r3, #7
   51488:	bls	516b8 <__assert_fail@plt+0x404ac>
   5148c:	add	r4, r6, #4
   51490:	mov	r3, #0
   51494:	cmp	fp, r4
   51498:	str	r3, [sp, #32]
   5149c:	bls	511e8 <__assert_fail@plt+0x3ffdc>
   514a0:	mov	r1, #1
   514a4:	mov	r0, r5
   514a8:	ldr	r3, [r7]
   514ac:	blx	r3
   514b0:	uxtb	r5, r0
   514b4:	cmp	r5, #0
   514b8:	bne	51668 <__assert_fail@plt+0x4045c>
   514bc:	add	r3, r6, #8
   514c0:	cmp	r3, fp
   514c4:	str	r3, [sp, #16]
   514c8:	bcc	511f8 <__assert_fail@plt+0x3ffec>
   514cc:	cmp	r4, fp
   514d0:	bcs	51210 <__assert_fail@plt+0x40004>
   514d4:	sub	r1, fp, r4
   514d8:	sub	r3, r1, #1
   514dc:	cmp	r3, #7
   514e0:	bhi	51210 <__assert_fail@plt+0x40004>
   514e4:	b	511fc <__assert_fail@plt+0x3fff0>
   514e8:	mov	r2, #5
   514ec:	ldr	r1, [pc, #532]	; 51708 <__assert_fail@plt+0x404fc>
   514f0:	mov	r0, #0
   514f4:	str	r3, [sp, #44]	; 0x2c
   514f8:	bl	10f90 <dcgettext@plt>
   514fc:	mov	r2, r6
   51500:	mov	r1, r8
   51504:	bl	54dd0 <warn@@Base>
   51508:	ldr	r3, [sp, #44]	; 0x2c
   5150c:	b	51388 <__assert_fail@plt+0x4017c>
   51510:	mov	r2, #5
   51514:	ldr	r1, [pc, #496]	; 5170c <__assert_fail@plt+0x40500>
   51518:	mov	r0, #0
   5151c:	str	r3, [sp, #44]	; 0x2c
   51520:	bl	10f90 <dcgettext@plt>
   51524:	mov	r2, r7
   51528:	mov	r1, r6
   5152c:	bl	54dd0 <warn@@Base>
   51530:	ldr	r3, [sp, #44]	; 0x2c
   51534:	b	51388 <__assert_fail@plt+0x4017c>
   51538:	ldr	r3, [pc, #464]	; 51710 <__assert_fail@plt+0x40504>
   5153c:	mov	r0, #10
   51540:	mov	r4, #1
   51544:	ldr	r1, [r3]
   51548:	bl	11158 <putc@plt>
   5154c:	ldr	r0, [sp, #40]	; 0x28
   51550:	bl	10f54 <free@plt>
   51554:	mov	r0, r4
   51558:	add	sp, sp, #52	; 0x34
   5155c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51560:	ldr	r3, [sp, #24]
   51564:	str	sl, [sp, #16]
   51568:	str	r3, [sp, #32]
   5156c:	b	51210 <__assert_fail@plt+0x40004>
   51570:	add	r3, sl, #12
   51574:	cmp	r3, fp
   51578:	bcc	51600 <__assert_fail@plt+0x403f4>
   5157c:	cmp	r6, fp
   51580:	bcs	51598 <__assert_fail@plt+0x4038c>
   51584:	ldr	r2, [sp, #32]
   51588:	sub	r2, r2, #5
   5158c:	cmp	r2, #7
   51590:	subls	r1, r4, #4
   51594:	bls	51604 <__assert_fail@plt+0x403f8>
   51598:	mov	r6, r3
   5159c:	ldr	r3, [sp, #12]
   515a0:	mov	r2, #12
   515a4:	mov	r8, #0
   515a8:	ldrd	r4, [r3, #32]
   515ac:	mov	r3, #0
   515b0:	strd	r2, [sp, #16]
   515b4:	mov	r2, #8
   515b8:	b	510cc <__assert_fail@plt+0x3fec0>
   515bc:	mov	r2, #5
   515c0:	ldr	r1, [pc, #332]	; 51714 <__assert_fail@plt+0x40508>
   515c4:	b	51418 <__assert_fail@plt+0x4020c>
   515c8:	mov	r2, #5
   515cc:	ldr	r1, [pc, #324]	; 51718 <__assert_fail@plt+0x4050c>
   515d0:	mov	r0, #0
   515d4:	bl	10f90 <dcgettext@plt>
   515d8:	bl	10f24 <printf@plt>
   515dc:	mov	r4, #1
   515e0:	b	51108 <__assert_fail@plt+0x3fefc>
   515e4:	mov	r2, #5
   515e8:	ldr	r1, [pc, #300]	; 5171c <__assert_fail@plt+0x40510>
   515ec:	bl	10f90 <dcgettext@plt>
   515f0:	ldr	r3, [sp, #12]
   515f4:	ldr	r1, [r3, #8]
   515f8:	bl	54dd0 <warn@@Base>
   515fc:	b	51108 <__assert_fail@plt+0x3fefc>
   51600:	mov	r1, #8
   51604:	ldr	r2, [r7]
   51608:	mov	r0, r6
   5160c:	str	r3, [sp, #32]
   51610:	blx	r2
   51614:	mov	r2, #8
   51618:	adds	r3, r0, #12
   5161c:	str	r3, [sp, #16]
   51620:	adc	r3, r1, #0
   51624:	str	r3, [sp, #20]
   51628:	ldr	r3, [sp, #32]
   5162c:	mov	r8, r0
   51630:	mov	r6, r3
   51634:	ldr	r3, [sp, #12]
   51638:	ldrd	r4, [r3, #32]
   5163c:	b	510cc <__assert_fail@plt+0x3fec0>
   51640:	mov	r2, #5
   51644:	ldr	r1, [pc, #212]	; 51720 <__assert_fail@plt+0x40514>
   51648:	mov	r0, #0
   5164c:	bl	10f90 <dcgettext@plt>
   51650:	ldr	r3, [sp, #40]	; 0x28
   51654:	ldr	r2, [r3]
   51658:	ldr	r3, [sp, #12]
   5165c:	ldr	r1, [r3, #8]
   51660:	bl	54dd0 <warn@@Base>
   51664:	b	51314 <__assert_fail@plt+0x40108>
   51668:	mov	r2, #5
   5166c:	ldr	r1, [pc, #176]	; 51724 <__assert_fail@plt+0x40518>
   51670:	mov	r0, #0
   51674:	bl	10f90 <dcgettext@plt>
   51678:	ldr	r3, [sp, #12]
   5167c:	mov	r2, r5
   51680:	mov	r4, #0
   51684:	ldr	r1, [r3, #8]
   51688:	bl	54dd0 <warn@@Base>
   5168c:	b	51108 <__assert_fail@plt+0x3fefc>
   51690:	mov	r2, #5
   51694:	ldr	r1, [pc, #140]	; 51728 <__assert_fail@plt+0x4051c>
   51698:	mov	r0, #0
   5169c:	bl	10f90 <dcgettext@plt>
   516a0:	ldr	r3, [sp, #12]
   516a4:	mov	r2, r4
   516a8:	mov	r4, #0
   516ac:	ldr	r1, [r3, #8]
   516b0:	bl	54dd0 <warn@@Base>
   516b4:	b	51108 <__assert_fail@plt+0x3fefc>
   516b8:	mov	r0, r4
   516bc:	ldr	r3, [r7]
   516c0:	blx	r3
   516c4:	add	r4, r6, #4
   516c8:	cmp	fp, r4
   516cc:	uxtb	r3, r0
   516d0:	str	r3, [sp, #32]
   516d4:	bls	511e8 <__assert_fail@plt+0x3ffdc>
   516d8:	b	514a0 <__assert_fail@plt+0x40294>
   516dc:	andeq	r2, r8, r4, lsl #25
   516e0:	andeq	lr, r9, ip, asr sp
   516e4:	strdeq	r2, [r8], -r0
   516e8:	muleq	r8, r4, ip
   516ec:	ldrdeq	ip, [r9], -r0
   516f0:	andeq	ip, r3, r0, asr r4
   516f4:	andeq	r2, r8, r8, asr #27
   516f8:	andeq	sp, r3, r4, asr #14
   516fc:	andeq	r1, r4, r8, lsl #2
   51700:	andeq	r2, r8, ip, ror lr
   51704:	andeq	lr, r7, ip, lsl #14
   51708:	andeq	r2, r8, r4, ror #27
   5170c:	andeq	r2, r8, r0, lsr #28
   51710:	andeq	sl, r9, ip, lsr #8
   51714:	andeq	r2, r8, ip, asr #28
   51718:	andeq	r2, r8, r4, ror sp
   5171c:			; <UNDEFINED> instruction: 0x00082bb8
   51720:	muleq	r8, ip, sp
   51724:	andeq	lr, r7, r0, ror r5
   51728:	andeq	r2, r8, r4, lsr sp
   5172c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   51730:	sub	sp, sp, #252	; 0xfc
   51734:	ldr	r3, [r0, #16]
   51738:	ldr	r4, [r0, #8]
   5173c:	mov	r2, r3
   51740:	str	r3, [sp, #148]	; 0x94
   51744:	mov	r3, #0
   51748:	str	r0, [sp, #80]	; 0x50
   5174c:	mov	r9, r1
   51750:	mov	r0, r4
   51754:	mov	r1, #46	; 0x2e
   51758:	strd	r2, [sp, #236]	; 0xec
   5175c:	bl	11128 <strrchr@plt>
   51760:	subs	r3, r0, #0
   51764:	streq	r3, [sp, #180]	; 0xb4
   51768:	beq	51780 <__assert_fail@plt+0x40574>
   5176c:	ldr	r1, [pc, #3712]	; 525f4 <__assert_fail@plt+0x413e8>
   51770:	bl	10f18 <strcmp@plt>
   51774:	clz	r3, r0
   51778:	lsr	r3, r3, #5
   5177c:	str	r3, [sp, #180]	; 0xb4
   51780:	ldr	r3, [sp, #80]	; 0x50
   51784:	ldr	r3, [r3, #32]
   51788:	cmp	r3, #0
   5178c:	str	r3, [sp, #176]	; 0xb0
   51790:	beq	51a58 <__assert_fail@plt+0x4084c>
   51794:	mov	r0, r4
   51798:	ldr	r1, [pc, #3672]	; 525f8 <__assert_fail@plt+0x413ec>
   5179c:	bl	10f00 <strstr@plt>
   517a0:	subs	r3, r0, #0
   517a4:	str	r3, [sp, #196]	; 0xc4
   517a8:	beq	530c4 <__assert_fail@plt+0x41eb8>
   517ac:	ldr	r3, [sp, #148]	; 0x94
   517b0:	ldr	r2, [sp, #176]	; 0xb0
   517b4:	add	r4, r3, #4
   517b8:	add	r5, r3, r2
   517bc:	cmp	r4, r5
   517c0:	bcs	51818 <__assert_fail@plt+0x4060c>
   517c4:	mov	r1, #4
   517c8:	ldr	r6, [pc, #3788]	; 5269c <__assert_fail@plt+0x41490>
   517cc:	ldr	r0, [sp, #148]	; 0x94
   517d0:	ldr	r3, [r6]
   517d4:	blx	r3
   517d8:	mov	r3, #0
   517dc:	mvn	r2, #0
   517e0:	cmp	r1, r3
   517e4:	cmpeq	r0, r2
   517e8:	beq	530f4 <__assert_fail@plt+0x41ee8>
   517ec:	add	r7, r4, #2
   517f0:	cmp	r7, r5
   517f4:	bcc	51b00 <__assert_fail@plt+0x408f4>
   517f8:	cmp	r4, r5
   517fc:	bcs	51810 <__assert_fail@plt+0x40604>
   51800:	sub	r1, r5, r4
   51804:	sub	r3, r1, #1
   51808:	cmp	r3, #7
   5180c:	bls	51834 <__assert_fail@plt+0x40628>
   51810:	mov	r4, #0
   51814:	b	51850 <__assert_fail@plt+0x40644>
   51818:	cmp	r3, r5
   5181c:	bcc	51a84 <__assert_fail@plt+0x40878>
   51820:	add	r7, r4, #2
   51824:	cmp	r5, r7
   51828:	bls	51810 <__assert_fail@plt+0x40604>
   5182c:	ldr	r6, [pc, #3688]	; 5269c <__assert_fail@plt+0x41490>
   51830:	mov	r1, #2
   51834:	ldr	r3, [r6]
   51838:	mov	r0, r4
   5183c:	blx	r3
   51840:	uxth	r0, r0
   51844:	cmp	r0, #5
   51848:	beq	5187c <__assert_fail@plt+0x40670>
   5184c:	mov	r4, r0
   51850:	mov	r2, #5
   51854:	ldr	r1, [pc, #3488]	; 525fc <__assert_fail@plt+0x413f0>
   51858:	mov	r0, #0
   5185c:	bl	10f90 <dcgettext@plt>
   51860:	ldr	r3, [sp, #80]	; 0x50
   51864:	mov	r2, r4
   51868:	ldr	r1, [r3, #8]
   5186c:	bl	54dd0 <warn@@Base>
   51870:	mov	r0, #0
   51874:	add	sp, sp, #252	; 0xfc
   51878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5187c:	add	r8, r4, #3
   51880:	cmp	r8, r5
   51884:	bcs	51a98 <__assert_fail@plt+0x4088c>
   51888:	mov	r0, r7
   5188c:	ldr	r3, [r6]
   51890:	mov	r1, #1
   51894:	add	r7, r4, #4
   51898:	blx	r3
   5189c:	cmp	r5, r7
   518a0:	bhi	51abc <__assert_fail@plt+0x408b0>
   518a4:	sub	r1, r5, r8
   518a8:	sub	r3, r1, #1
   518ac:	cmp	r3, #7
   518b0:	bls	51ac0 <__assert_fail@plt+0x408b4>
   518b4:	add	r4, r4, #8
   518b8:	cmp	r5, r4
   518bc:	bls	518d8 <__assert_fail@plt+0x406cc>
   518c0:	mov	r1, #4
   518c4:	ldr	r3, [r6]
   518c8:	mov	r0, r7
   518cc:	blx	r3
   518d0:	subs	r5, r0, #0
   518d4:	bne	532b0 <__assert_fail@plt+0x420a4>
   518d8:	ldr	r3, [sp, #148]	; 0x94
   518dc:	sub	r4, r4, r3
   518e0:	mov	r2, r4
   518e4:	asr	r3, r4, #31
   518e8:	strd	r2, [sp, #64]	; 0x40
   518ec:	mov	r0, r9
   518f0:	bl	50c6c <__assert_fail@plt+0x3fa60>
   518f4:	subs	r4, r0, #0
   518f8:	beq	531e4 <__assert_fail@plt+0x41fd8>
   518fc:	ldr	r3, [pc, #3452]	; 52680 <__assert_fail@plt+0x41474>
   51900:	ldr	r3, [r3, #1488]	; 0x5d0
   51904:	cmp	r3, #0
   51908:	str	r3, [sp, #40]	; 0x28
   5190c:	streq	r3, [sp, #24]
   51910:	streq	r3, [sp, #144]	; 0x90
   51914:	moveq	r3, #1
   51918:	streq	r3, [sp, #168]	; 0xa8
   5191c:	beq	531c0 <__assert_fail@plt+0x41fb4>
   51920:	ldr	r3, [pc, #3416]	; 52680 <__assert_fail@plt+0x41474>
   51924:	mov	r2, #0
   51928:	mov	r6, r2
   5192c:	ldr	r3, [r3, #1440]	; 0x5a0
   51930:	str	r2, [sp, #144]	; 0x90
   51934:	str	r3, [sp, #60]	; 0x3c
   51938:	mov	fp, r3
   5193c:	mov	sl, r2
   51940:	mov	r7, r2
   51944:	str	r2, [sp, #24]
   51948:	mov	r1, #1
   5194c:	b	51964 <__assert_fail@plt+0x40758>
   51950:	ldr	r3, [sp, #40]	; 0x28
   51954:	add	r6, r6, #1
   51958:	cmp	r3, r6
   5195c:	add	fp, fp, #88	; 0x58
   51960:	beq	51b08 <__assert_fail@plt+0x408fc>
   51964:	ldr	r3, [sp, #24]
   51968:	ldr	r8, [fp, #60]	; 0x3c
   5196c:	cmp	r3, r8
   51970:	movcc	r3, r8
   51974:	cmp	r8, #0
   51978:	str	r3, [sp, #24]
   5197c:	movne	r3, r1
   51980:	moveq	r3, #0
   51984:	cmp	r3, #0
   51988:	beq	51950 <__assert_fail@plt+0x40744>
   5198c:	cmp	r2, #0
   51990:	movne	ip, #0
   51994:	bne	519ac <__assert_fail@plt+0x407a0>
   51998:	ldrd	r2, [fp, #48]	; 0x30
   5199c:	mov	ip, #1
   519a0:	str	r6, [sp, #144]	; 0x90
   519a4:	ldr	r7, [r2]
   519a8:	ldr	sl, [r3]
   519ac:	cmp	r8, ip
   519b0:	bls	532d8 <__assert_fail@plt+0x420cc>
   519b4:	ldr	r9, [fp, #48]	; 0x30
   519b8:	lsl	lr, ip, #3
   519bc:	mov	r1, #0
   519c0:	ldrd	r2, [r9, lr]
   519c4:	mov	r0, r7
   519c8:	add	r9, r9, lr
   519cc:	cmp	r1, r3
   519d0:	cmpeq	r7, r2
   519d4:	bhi	532e4 <__assert_fail@plt+0x420d8>
   519d8:	ldr	r4, [fp, #52]	; 0x34
   519dc:	sub	lr, lr, #8
   519e0:	str	r6, [sp, #52]	; 0x34
   519e4:	str	fp, [sp, #56]	; 0x38
   519e8:	add	lr, r4, lr
   519ec:	mov	fp, r8
   519f0:	mov	r6, r9
   519f4:	b	51a18 <__assert_fail@plt+0x4080c>
   519f8:	cmp	fp, ip
   519fc:	mov	r7, r2
   51a00:	mov	sl, r4
   51a04:	beq	530b0 <__assert_fail@plt+0x41ea4>
   51a08:	ldrd	r2, [r6, #8]!
   51a0c:	cmp	r3, r1
   51a10:	cmpeq	r2, r0
   51a14:	bcc	51a44 <__assert_fail@plt+0x40838>
   51a18:	cmp	r3, r1
   51a1c:	cmpeq	r2, r0
   51a20:	add	ip, ip, #1
   51a24:	mov	r0, r2
   51a28:	mov	r1, #0
   51a2c:	ldrd	r4, [lr, #8]!
   51a30:	bne	519f8 <__assert_fail@plt+0x407ec>
   51a34:	mov	r9, #0
   51a38:	cmp	r9, r5
   51a3c:	cmpeq	sl, r4
   51a40:	bls	519f8 <__assert_fail@plt+0x407ec>
   51a44:	ldr	r6, [sp, #52]	; 0x34
   51a48:	ldr	fp, [sp, #56]	; 0x38
   51a4c:	mov	r1, #0
   51a50:	mov	r2, #1
   51a54:	b	51950 <__assert_fail@plt+0x40744>
   51a58:	mov	r2, #5
   51a5c:	ldr	r1, [pc, #2972]	; 52600 <__assert_fail@plt+0x413f4>
   51a60:	mov	r0, r3
   51a64:	mov	r4, r3
   51a68:	bl	10f90 <dcgettext@plt>
   51a6c:	ldr	r3, [sp, #80]	; 0x50
   51a70:	ldr	r1, [r3, #8]
   51a74:	bl	10f24 <printf@plt>
   51a78:	mov	r0, r4
   51a7c:	add	sp, sp, #252	; 0xfc
   51a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a84:	sub	r3, r2, #1
   51a88:	cmp	r3, #7
   51a8c:	movls	r1, r2
   51a90:	bhi	51820 <__assert_fail@plt+0x40614>
   51a94:	b	517c8 <__assert_fail@plt+0x405bc>
   51a98:	cmp	r5, r7
   51a9c:	bls	51ab0 <__assert_fail@plt+0x408a4>
   51aa0:	sub	r1, r5, r7
   51aa4:	sub	r3, r1, #1
   51aa8:	cmp	r3, #7
   51aac:	bls	532f0 <__assert_fail@plt+0x420e4>
   51ab0:	add	r7, r4, #4
   51ab4:	cmp	r5, r7
   51ab8:	bls	518b4 <__assert_fail@plt+0x406a8>
   51abc:	mov	r1, #1
   51ac0:	mov	r0, r8
   51ac4:	ldr	r3, [r6]
   51ac8:	blx	r3
   51acc:	uxtb	r8, r0
   51ad0:	cmp	r8, #0
   51ad4:	bne	53288 <__assert_fail@plt+0x4207c>
   51ad8:	add	r4, r4, #8
   51adc:	cmp	r4, r5
   51ae0:	bcc	518c0 <__assert_fail@plt+0x406b4>
   51ae4:	cmp	r5, r7
   51ae8:	bls	518d8 <__assert_fail@plt+0x406cc>
   51aec:	sub	r1, r5, r7
   51af0:	sub	r3, r1, #1
   51af4:	cmp	r3, #7
   51af8:	bhi	518d8 <__assert_fail@plt+0x406cc>
   51afc:	b	518c4 <__assert_fail@plt+0x406b8>
   51b00:	mov	r1, #2
   51b04:	b	51834 <__assert_fail@plt+0x40628>
   51b08:	str	r1, [sp, #168]	; 0xa8
   51b0c:	ldr	r1, [sp, #144]	; 0x90
   51b10:	cmp	r2, #0
   51b14:	add	r3, r1, r1, lsl #2
   51b18:	add	r3, r1, r3, lsl #1
   51b1c:	lsl	r3, r3, #3
   51b20:	str	r3, [sp, #40]	; 0x28
   51b24:	beq	531c0 <__assert_fail@plt+0x41fb4>
   51b28:	ldr	r3, [sp, #60]	; 0x3c
   51b2c:	ldr	r2, [sp, #40]	; 0x28
   51b30:	add	r5, r3, r2
   51b34:	ldr	r3, [r5, #60]	; 0x3c
   51b38:	cmp	r3, #0
   51b3c:	beq	51b6c <__assert_fail@plt+0x40960>
   51b40:	ldr	r3, [r5, #48]	; 0x30
   51b44:	ldrd	r0, [sp, #64]	; 0x40
   51b48:	ldrd	r2, [r3]
   51b4c:	cmp	r3, r1
   51b50:	cmpeq	r2, r0
   51b54:	beq	51b6c <__assert_fail@plt+0x40960>
   51b58:	ldr	r3, [r5, #52]	; 0x34
   51b5c:	ldrd	r2, [r3]
   51b60:	cmp	r3, r1
   51b64:	cmpeq	r2, r0
   51b68:	bne	5321c <__assert_fail@plt+0x42010>
   51b6c:	ldr	r3, [sp, #168]	; 0xa8
   51b70:	cmp	r3, #0
   51b74:	movne	r3, #0
   51b78:	strne	r3, [sp, #216]	; 0xd8
   51b7c:	beq	531ac <__assert_fail@plt+0x41fa0>
   51b80:	ldr	r4, [sp, #80]	; 0x50
   51b84:	add	r1, r4, #12
   51b88:	add	r0, r4, #8
   51b8c:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   51b90:	mov	r2, #0
   51b94:	mov	r3, #0
   51b98:	mov	r0, r4
   51b9c:	bl	35750 <__assert_fail@plt+0x24544>
   51ba0:	cmp	r0, #0
   51ba4:	bne	53194 <__assert_fail@plt+0x41f88>
   51ba8:	mov	r2, #5
   51bac:	ldr	r1, [pc, #2640]	; 52604 <__assert_fail@plt+0x413f8>
   51bb0:	mov	r0, #0
   51bb4:	bl	10f90 <dcgettext@plt>
   51bb8:	bl	10f24 <printf@plt>
   51bbc:	ldr	r3, [pc, #2748]	; 52680 <__assert_fail@plt+0x41474>
   51bc0:	ldr	r2, [sp, #144]	; 0x90
   51bc4:	ldr	r3, [r3, #1488]	; 0x5d0
   51bc8:	cmp	r2, r3
   51bcc:	ldr	r3, [pc, #2612]	; 52608 <__assert_fail@plt+0x413fc>
   51bd0:	movcc	r7, #0
   51bd4:	str	r3, [sp, #212]	; 0xd4
   51bd8:	bcs	524c8 <__assert_fail@plt+0x412bc>
   51bdc:	ldr	r1, [sp, #144]	; 0x90
   51be0:	ldr	r3, [pc, #2712]	; 52680 <__assert_fail@plt+0x41474>
   51be4:	add	r2, r1, r1, lsl #2
   51be8:	ldr	r3, [r3, #1440]	; 0x5a0
   51bec:	add	r2, r1, r2, lsl #1
   51bf0:	ldr	r1, [sp, #168]	; 0xa8
   51bf4:	lsl	r2, r2, #3
   51bf8:	add	r3, r3, r2
   51bfc:	cmp	r1, #0
   51c00:	str	r2, [sp, #140]	; 0x8c
   51c04:	ldr	r1, [r3, #60]	; 0x3c
   51c08:	beq	52ee8 <__assert_fail@plt+0x41cdc>
   51c0c:	cmp	r1, #0
   51c10:	beq	524ac <__assert_fail@plt+0x412a0>
   51c14:	ldr	r2, [sp, #216]	; 0xd8
   51c18:	sub	r2, r2, #4
   51c1c:	str	r2, [sp, #60]	; 0x3c
   51c20:	mov	r2, #1
   51c24:	str	r2, [sp, #84]	; 0x54
   51c28:	mov	r2, #0
   51c2c:	str	r2, [sp, #52]	; 0x34
   51c30:	b	51e44 <__assert_fail@plt+0x40c38>
   51c34:	ldr	r2, [sp, #60]	; 0x3c
   51c38:	ldr	r0, [sp, #52]	; 0x34
   51c3c:	ldr	r2, [r2, #4]
   51c40:	cmp	r0, #0
   51c44:	lsl	r0, r2, #3
   51c48:	ldrd	r4, [r1, r0]
   51c4c:	strd	r4, [sp, #24]
   51c50:	ldrd	r4, [ip, r0]
   51c54:	beq	51c78 <__assert_fail@plt+0x40a6c>
   51c58:	ldr	r0, [sp, #60]	; 0x3c
   51c5c:	ldr	lr, [r0]
   51c60:	lsl	lr, lr, #3
   51c64:	ldrd	r0, [r1, lr]
   51c68:	ldrd	r8, [sp, #24]
   51c6c:	cmp	r1, r9
   51c70:	cmpeq	r0, r8
   51c74:	beq	52474 <__assert_fail@plt+0x41268>
   51c78:	lsl	r2, r2, #2
   51c7c:	ldr	r1, [r3, #56]	; 0x38
   51c80:	mvn	r9, #0
   51c84:	mvn	r8, #0
   51c88:	cmp	r5, r9
   51c8c:	cmpeq	r4, r8
   51c90:	ldrd	r8, [sp, #24]
   51c94:	ldr	r2, [r1, r2]
   51c98:	ldr	r1, [sp, #148]	; 0x94
   51c9c:	ldr	r0, [r3, #24]
   51ca0:	ldr	r3, [r3, #28]
   51ca4:	str	r2, [sp, #108]	; 0x6c
   51ca8:	add	r2, r1, r8
   51cac:	str	r8, [sp, #136]	; 0x88
   51cb0:	str	r2, [sp, #56]	; 0x38
   51cb4:	str	r0, [sp, #112]	; 0x70
   51cb8:	str	r3, [sp, #64]	; 0x40
   51cbc:	beq	51e80 <__assert_fail@plt+0x40c74>
   51cc0:	adds	fp, r1, r4
   51cc4:	movne	r6, #1
   51cc8:	moveq	r6, #0
   51ccc:	str	r6, [sp, #104]	; 0x68
   51cd0:	cmp	r2, fp
   51cd4:	movls	r6, #0
   51cd8:	andhi	r6, r6, #1
   51cdc:	cmp	r6, #0
   51ce0:	beq	51d0c <__assert_fail@plt+0x40b00>
   51ce4:	mov	r3, r2
   51ce8:	add	r1, sp, #240	; 0xf0
   51cec:	ldr	r2, [sp, #144]	; 0x90
   51cf0:	ldr	r0, [sp, #80]	; 0x50
   51cf4:	str	fp, [sp, #240]	; 0xf0
   51cf8:	bl	415f8 <__assert_fail@plt+0x303ec>
   51cfc:	ldr	r3, [sp, #236]	; 0xec
   51d00:	cmp	r3, fp
   51d04:	strne	r6, [sp, #104]	; 0x68
   51d08:	beq	52af4 <__assert_fail@plt+0x418e8>
   51d0c:	ldr	r3, [sp, #84]	; 0x54
   51d10:	eor	r7, r7, #1
   51d14:	eor	r0, r3, #1
   51d18:	orrs	r0, r7, r0
   51d1c:	bne	51d34 <__assert_fail@plt+0x40b28>
   51d20:	ldr	r3, [sp, #236]	; 0xec
   51d24:	ldr	r2, [sp, #56]	; 0x38
   51d28:	cmp	r3, r2
   51d2c:	bcc	52488 <__assert_fail@plt+0x4127c>
   51d30:	bhi	52518 <__assert_fail@plt+0x4130c>
   51d34:	ldr	r3, [sp, #176]	; 0xb0
   51d38:	mov	r0, #0
   51d3c:	str	r3, [sp, #32]
   51d40:	str	r0, [sp, #36]	; 0x24
   51d44:	ldrd	r2, [sp, #32]
   51d48:	ldrd	r6, [sp, #24]
   51d4c:	str	fp, [sp, #240]	; 0xf0
   51d50:	cmp	r3, r7
   51d54:	ldr	r3, [sp, #56]	; 0x38
   51d58:	cmpeq	r2, r6
   51d5c:	str	r3, [sp, #236]	; 0xec
   51d60:	mvn	r2, #0
   51d64:	bls	52458 <__assert_fail@plt+0x4124c>
   51d68:	ldrd	r6, [sp, #32]
   51d6c:	cmp	r7, r5
   51d70:	cmpeq	r6, r4
   51d74:	movls	r3, #1
   51d78:	movhi	r3, #0
   51d7c:	cmp	fp, #0
   51d80:	moveq	r3, #0
   51d84:	cmp	r3, #0
   51d88:	bne	52524 <__assert_fail@plt+0x41318>
   51d8c:	ldr	r1, [sp, #196]	; 0xc4
   51d90:	cmp	r1, #0
   51d94:	beq	52380 <__assert_fail@plt+0x41174>
   51d98:	ldr	r2, [sp, #180]	; 0xb4
   51d9c:	cmp	r2, #0
   51da0:	beq	51eac <__assert_fail@plt+0x40ca0>
   51da4:	mov	r0, r3
   51da8:	mov	r2, #5
   51dac:	ldr	r1, [pc, #2136]	; 5260c <__assert_fail@plt+0x41400>
   51db0:	bl	10f90 <dcgettext@plt>
   51db4:	bl	54dd0 <warn@@Base>
   51db8:	ldr	r3, [sp, #104]	; 0x68
   51dbc:	ldr	r2, [sp, #84]	; 0x54
   51dc0:	tst	r3, r2
   51dc4:	beq	51e74 <__assert_fail@plt+0x40c68>
   51dc8:	ldrd	r2, [sp, #236]	; 0xec
   51dcc:	cmp	r2, fp
   51dd0:	beq	52540 <__assert_fail@plt+0x41334>
   51dd4:	ldr	r2, [sp, #56]	; 0x38
   51dd8:	cmp	r2, r3
   51ddc:	beq	52508 <__assert_fail@plt+0x412fc>
   51de0:	mov	r2, #5
   51de4:	ldr	r1, [pc, #2084]	; 52610 <__assert_fail@plt+0x41404>
   51de8:	mov	r0, #0
   51dec:	bl	10f90 <dcgettext@plt>
   51df0:	bl	54dd0 <warn@@Base>
   51df4:	mov	r3, #0
   51df8:	str	r3, [sp, #84]	; 0x54
   51dfc:	ldr	r3, [sp, #236]	; 0xec
   51e00:	cmp	r3, fp
   51e04:	ldreq	r3, [sp, #240]	; 0xf0
   51e08:	beq	52548 <__assert_fail@plt+0x4133c>
   51e0c:	mov	r7, #1
   51e10:	ldr	r3, [pc, #2152]	; 52680 <__assert_fail@plt+0x41474>
   51e14:	ldr	r2, [sp, #52]	; 0x34
   51e18:	ldr	r3, [r3, #1440]	; 0x5a0
   51e1c:	add	r1, r2, #1
   51e20:	ldr	r2, [sp, #140]	; 0x8c
   51e24:	str	r1, [sp, #52]	; 0x34
   51e28:	add	r3, r3, r2
   51e2c:	ldr	r2, [sp, #60]	; 0x3c
   51e30:	add	r2, r2, #4
   51e34:	str	r2, [sp, #60]	; 0x3c
   51e38:	ldr	r2, [r3, #60]	; 0x3c
   51e3c:	cmp	r2, r1
   51e40:	bls	524ac <__assert_fail@plt+0x412a0>
   51e44:	ldr	r2, [sp, #168]	; 0xa8
   51e48:	ldr	r1, [r3, #48]	; 0x30
   51e4c:	cmp	r2, #0
   51e50:	ldr	ip, [r3, #52]	; 0x34
   51e54:	beq	51c34 <__assert_fail@plt+0x40a28>
   51e58:	ldr	r2, [sp, #52]	; 0x34
   51e5c:	cmp	r2, #0
   51e60:	bne	51e8c <__assert_fail@plt+0x40c80>
   51e64:	ldrd	r0, [r1]
   51e68:	ldrd	r4, [ip]
   51e6c:	strd	r0, [sp, #24]
   51e70:	b	51c7c <__assert_fail@plt+0x40a70>
   51e74:	cmp	fp, #0
   51e78:	beq	51e0c <__assert_fail@plt+0x40c00>
   51e7c:	b	51dfc <__assert_fail@plt+0x40bf0>
   51e80:	mov	fp, #0
   51e84:	str	fp, [sp, #104]	; 0x68
   51e88:	b	51d0c <__assert_fail@plt+0x40b00>
   51e8c:	ldr	r0, [sp, #52]	; 0x34
   51e90:	lsl	r2, r0, #3
   51e94:	sub	lr, r2, #8
   51e98:	ldrd	r4, [r1, r2]
   51e9c:	strd	r4, [sp, #24]
   51ea0:	ldrd	r4, [ip, r2]
   51ea4:	mov	r2, r0
   51ea8:	b	51c64 <__assert_fail@plt+0x40a58>
   51eac:	ldr	r3, [pc, #1996]	; 52680 <__assert_fail@plt+0x41474>
   51eb0:	ldr	r2, [sp, #144]	; 0x90
   51eb4:	ldr	r3, [r3, #1488]	; 0x5d0
   51eb8:	cmp	r2, r3
   51ebc:	bcs	52e54 <__assert_fail@plt+0x41c48>
   51ec0:	ldr	r3, [pc, #1976]	; 52680 <__assert_fail@plt+0x41474>
   51ec4:	ldr	r1, [sp, #140]	; 0x8c
   51ec8:	ldr	r2, [r3, #1440]	; 0x5a0
   51ecc:	add	r3, r2, r1
   51ed0:	ldr	r9, [r2, r1]
   51ed4:	sub	r2, r9, #2
   51ed8:	cmp	r2, #6
   51edc:	bhi	52e34 <__assert_fail@plt+0x41c28>
   51ee0:	ldr	r2, [sp, #80]	; 0x50
   51ee4:	ldr	sl, [sp, #56]	; 0x38
   51ee8:	mov	r8, fp
   51eec:	ldr	r5, [r2, #16]
   51ef0:	ldr	r2, [r2, #32]
   51ef4:	str	fp, [sp, #120]	; 0x78
   51ef8:	add	r5, r5, r2
   51efc:	ldr	r2, [r3, #16]
   51f00:	ldr	fp, [sp, #112]	; 0x70
   51f04:	str	r2, [sp, #200]	; 0xc8
   51f08:	ldr	r2, [r3, #4]
   51f0c:	ldr	r3, [r3, #8]
   51f10:	mvn	r0, #0
   51f14:	mvn	r1, #0
   51f18:	str	r3, [sp, #192]	; 0xc0
   51f1c:	mov	r3, sl
   51f20:	strd	r0, [sp, #88]	; 0x58
   51f24:	strd	r0, [sp, #40]	; 0x28
   51f28:	str	r2, [sp, #172]	; 0xac
   51f2c:	ldrd	r0, [sp, #24]
   51f30:	sub	r3, sl, r3
   51f34:	add	r4, sl, #1
   51f38:	adds	r0, r0, r3
   51f3c:	cmp	r5, r4
   51f40:	bcc	53010 <__assert_fail@plt+0x41e04>
   51f44:	mov	r1, r0
   51f48:	ldr	r0, [pc, #1768]	; 52638 <__assert_fail@plt+0x4142c>
   51f4c:	bl	10f24 <printf@plt>
   51f50:	cmp	r5, r4
   51f54:	bne	51fcc <__assert_fail@plt+0x40dc0>
   51f58:	cmp	r5, sl
   51f5c:	bhi	51fcc <__assert_fail@plt+0x40dc0>
   51f60:	mov	r2, #5
   51f64:	ldr	r1, [pc, #1748]	; 52640 <__assert_fail@plt+0x41434>
   51f68:	mov	r0, #0
   51f6c:	ldr	fp, [sp, #120]	; 0x78
   51f70:	bl	10f90 <dcgettext@plt>
   51f74:	bl	10f24 <printf@plt>
   51f78:	ldrd	r0, [sp, #40]	; 0x28
   51f7c:	ldrd	r2, [sp, #88]	; 0x58
   51f80:	mov	ip, r0
   51f84:	and	r1, r1, r3
   51f88:	and	ip, ip, r2
   51f8c:	str	r1, [sp, #228]	; 0xe4
   51f90:	str	ip, [sp, #224]	; 0xe0
   51f94:	ldrd	r2, [sp, #224]	; 0xe0
   51f98:	mvn	r1, #0
   51f9c:	mvn	r0, #0
   51fa0:	cmp	r3, r1
   51fa4:	cmpeq	r2, r0
   51fa8:	beq	51fc0 <__assert_fail@plt+0x40db4>
   51fac:	mov	r2, #5
   51fb0:	ldr	r1, [pc, #1628]	; 52614 <__assert_fail@plt+0x41408>
   51fb4:	mov	r0, #0
   51fb8:	bl	10f90 <dcgettext@plt>
   51fbc:	bl	10f24 <printf@plt>
   51fc0:	str	r4, [sp, #236]	; 0xec
   51fc4:	str	r8, [sp, #240]	; 0xf0
   51fc8:	b	51db8 <__assert_fail@plt+0x40bac>
   51fcc:	ldr	r3, [pc, #1736]	; 5269c <__assert_fail@plt+0x41490>
   51fd0:	mov	r0, sl
   51fd4:	mov	r1, #1
   51fd8:	ldr	r3, [r3]
   51fdc:	blx	r3
   51fe0:	cmp	r8, #0
   51fe4:	sub	r3, r0, #4
   51fe8:	clz	r3, r3
   51fec:	lsr	r3, r3, #5
   51ff0:	moveq	r3, #0
   51ff4:	cmp	r3, #0
   51ff8:	beq	5224c <__assert_fail@plt+0x41040>
   51ffc:	ldr	ip, [sp, #236]	; 0xec
   52000:	ldrd	r6, [sp, #24]
   52004:	add	sl, sp, #244	; 0xf4
   52008:	sub	ip, r8, ip
   5200c:	mov	r3, r5
   52010:	mov	r2, #0
   52014:	mov	r0, r8
   52018:	mov	r1, sl
   5201c:	adds	r6, r6, ip
   52020:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52024:	ldr	r3, [sp, #244]	; 0xf4
   52028:	mov	r2, r9
   5202c:	add	r8, r8, r3
   52030:	strd	r0, [sp, #40]	; 0x28
   52034:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   52038:	mov	r3, r5
   5203c:	mov	r0, r8
   52040:	mov	r2, #0
   52044:	mov	r1, sl
   52048:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   5204c:	ldr	r3, [sp, #244]	; 0xf4
   52050:	mov	r2, r9
   52054:	add	r8, r8, r3
   52058:	strd	r0, [sp, #88]	; 0x58
   5205c:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   52060:	mov	r2, #5
   52064:	ldr	r1, [pc, #1496]	; 52644 <__assert_fail@plt+0x41438>
   52068:	mov	r0, #0
   5206c:	bl	10f90 <dcgettext@plt>
   52070:	mov	r1, r6
   52074:	ldr	r3, [pc, #1484]	; 52648 <__assert_fail@plt+0x4143c>
   52078:	mov	r2, #8
   5207c:	bl	10f24 <printf@plt>
   52080:	mov	r3, r5
   52084:	mov	r2, #0
   52088:	mov	r0, r4
   5208c:	mov	r1, sl
   52090:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52094:	ldr	r2, [sp, #244]	; 0xf4
   52098:	mov	r3, r5
   5209c:	add	r4, r4, r2
   520a0:	mov	r2, #0
   520a4:	strd	r0, [sp, #112]	; 0x70
   520a8:	mov	r0, r4
   520ac:	mov	r1, sl
   520b0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   520b4:	ldr	r3, [sp, #244]	; 0xf4
   520b8:	add	r4, r4, r3
   520bc:	add	r3, r4, #2
   520c0:	cmp	r5, r3
   520c4:	strd	r0, [sp, #96]	; 0x60
   520c8:	bcc	530d4 <__assert_fail@plt+0x41ec8>
   520cc:	mov	r1, sl
   520d0:	mov	r3, r5
   520d4:	mov	r2, #0
   520d8:	mov	r0, r4
   520dc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   520e0:	ldrd	r2, [sp, #112]	; 0x70
   520e4:	ldr	r6, [sp, #64]	; 0x40
   520e8:	ldr	ip, [sp, #244]	; 0xf4
   520ec:	add	r4, r4, ip
   520f0:	mov	sl, r0
   520f4:	adds	r0, r2, fp
   520f8:	str	r1, [sp, #160]	; 0xa0
   520fc:	mov	r2, r9
   52100:	adc	r1, r3, r6
   52104:	bl	3ca6c <__assert_fail@plt+0x2b860>
   52108:	ldr	r3, [sp, #96]	; 0x60
   5210c:	mov	r2, r9
   52110:	adds	r0, r3, fp
   52114:	ldr	r3, [sp, #100]	; 0x64
   52118:	adc	r1, r3, r6
   5211c:	bl	3ca6c <__assert_fail@plt+0x2b860>
   52120:	ldr	r6, [sp, #212]	; 0xd4
   52124:	mov	r0, #40	; 0x28
   52128:	ldr	r1, [r6]
   5212c:	bl	11158 <putc@plt>
   52130:	ldr	r3, [sp, #160]	; 0xa0
   52134:	ldr	r2, [sp, #172]	; 0xac
   52138:	str	r3, [sp, #4]
   5213c:	ldr	r3, [sp, #80]	; 0x50
   52140:	mov	r1, r9
   52144:	str	r3, [sp, #16]
   52148:	ldr	r3, [sp, #200]	; 0xc8
   5214c:	str	sl, [sp]
   52150:	str	r3, [sp, #8]
   52154:	mov	r3, #0
   52158:	str	r3, [sp, #12]
   5215c:	mov	r0, r4
   52160:	ldr	r3, [sp, #192]	; 0xc0
   52164:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   52168:	ldr	r1, [r6]
   5216c:	str	r0, [sp, #160]	; 0xa0
   52170:	mov	r0, #41	; 0x29
   52174:	bl	11158 <putc@plt>
   52178:	ldr	r3, [sp, #108]	; 0x6c
   5217c:	clz	r0, r3
   52180:	ldr	r3, [sp, #160]	; 0xa0
   52184:	lsr	r0, r0, #5
   52188:	cmp	r3, #0
   5218c:	moveq	r0, #0
   52190:	cmp	r0, #0
   52194:	bne	52e10 <__assert_fail@plt+0x41c04>
   52198:	ldrd	r2, [sp, #112]	; 0x70
   5219c:	ldrd	r0, [sp, #96]	; 0x60
   521a0:	ldrd	r6, [sp, #88]	; 0x58
   521a4:	cmp	r3, r1
   521a8:	cmpeq	r2, r0
   521ac:	ldrd	r0, [sp, #40]	; 0x28
   521b0:	moveq	r3, #1
   521b4:	movne	r3, #0
   521b8:	cmp	r1, r7
   521bc:	cmpeq	r0, r6
   521c0:	moveq	r2, r3
   521c4:	movne	r2, #0
   521c8:	cmp	r2, #0
   521cc:	bne	52e28 <__assert_fail@plt+0x41c1c>
   521d0:	ldrd	r0, [sp, #112]	; 0x70
   521d4:	ldrd	r6, [sp, #96]	; 0x60
   521d8:	cmp	r1, r7
   521dc:	cmpeq	r0, r6
   521e0:	bhi	52204 <__assert_fail@plt+0x40ff8>
   521e4:	ldrd	r0, [sp, #40]	; 0x28
   521e8:	ldrd	r6, [sp, #88]	; 0x58
   521ec:	cmp	r1, r7
   521f0:	cmpeq	r0, r6
   521f4:	movls	r3, #0
   521f8:	andhi	r3, r3, #1
   521fc:	cmp	r3, #0
   52200:	beq	52220 <__assert_fail@plt+0x41014>
   52204:	ldr	r1, [pc, #1064]	; 52634 <__assert_fail@plt+0x41428>
   52208:	mov	r2, #5
   5220c:	mov	r0, #0
   52210:	bl	10f90 <dcgettext@plt>
   52214:	ldr	r3, [sp, #212]	; 0xd4
   52218:	ldr	r1, [r3]
   5221c:	bl	111c4 <fputs@plt>
   52220:	ldr	r3, [sp, #212]	; 0xd4
   52224:	mvn	r6, #0
   52228:	mvn	r7, #0
   5222c:	add	sl, r4, sl
   52230:	ldr	r1, [r3]
   52234:	mov	r0, #10
   52238:	strd	r6, [sp, #88]	; 0x58
   5223c:	bl	11158 <putc@plt>
   52240:	strd	r6, [sp, #40]	; 0x28
   52244:	ldr	r3, [sp, #236]	; 0xec
   52248:	b	51f2c <__assert_fail@plt+0x40d20>
   5224c:	cmp	r0, #9
   52250:	ldrls	pc, [pc, r0, lsl #2]
   52254:	b	5235c <__assert_fail@plt+0x41150>
   52258:	andeq	r1, r5, r0, ror #30
   5225c:	andeq	r2, r5, ip, asr r3
   52260:	andeq	r2, r5, ip, asr r3
   52264:	andeq	r2, r5, ip, asr r3
   52268:	andeq	r3, r5, r0, lsr r3
   5226c:	andeq	r2, r5, ip, asr r3
   52270:	andeq	r2, r5, r8, lsl #6
   52274:	andeq	r2, r5, ip, asr r3
   52278:	andeq	r2, r5, ip, asr r3
   5227c:	andeq	r2, r5, r0, lsl #5
   52280:	cmp	r8, #0
   52284:	beq	5229c <__assert_fail@plt+0x41090>
   52288:	mov	r2, #5
   5228c:	ldr	r1, [pc, #900]	; 52618 <__assert_fail@plt+0x4140c>
   52290:	mov	r0, #0
   52294:	bl	10f90 <dcgettext@plt>
   52298:	bl	10f24 <printf@plt>
   5229c:	add	sl, sp, #244	; 0xf4
   522a0:	mov	r3, r5
   522a4:	mov	r1, sl
   522a8:	mov	r2, #0
   522ac:	mov	r0, r4
   522b0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   522b4:	ldr	r3, [sp, #244]	; 0xf4
   522b8:	mov	r2, r9
   522bc:	add	r4, r4, r3
   522c0:	strd	r0, [sp, #40]	; 0x28
   522c4:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   522c8:	mov	r3, r5
   522cc:	mov	r1, sl
   522d0:	mov	r0, r4
   522d4:	mov	r2, #0
   522d8:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   522dc:	ldr	sl, [sp, #244]	; 0xf4
   522e0:	mov	r2, r9
   522e4:	add	sl, r4, sl
   522e8:	strd	r0, [sp, #88]	; 0x58
   522ec:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   522f0:	mov	r2, #5
   522f4:	ldr	r1, [pc, #800]	; 5261c <__assert_fail@plt+0x41410>
   522f8:	mov	r0, #0
   522fc:	bl	10f90 <dcgettext@plt>
   52300:	bl	10f24 <printf@plt>
   52304:	b	52244 <__assert_fail@plt+0x41038>
   52308:	add	sl, r4, r9
   5230c:	cmp	r5, sl
   52310:	bhi	52df0 <__assert_fail@plt+0x41be4>
   52314:	cmp	r5, r4
   52318:	bls	5232c <__assert_fail@plt+0x41120>
   5231c:	sub	r1, r5, r4
   52320:	sub	r3, r1, #1
   52324:	cmp	r3, #7
   52328:	bls	52df4 <__assert_fail@plt+0x41be8>
   5232c:	mov	fp, #0
   52330:	str	fp, [sp, #64]	; 0x40
   52334:	mov	r2, r9
   52338:	mov	r0, fp
   5233c:	ldr	r1, [sp, #64]	; 0x40
   52340:	bl	3ca6c <__assert_fail@plt+0x2b860>
   52344:	mov	r2, #5
   52348:	ldr	r1, [pc, #748]	; 5263c <__assert_fail@plt+0x41430>
   5234c:	mov	r0, #0
   52350:	bl	10f90 <dcgettext@plt>
   52354:	bl	10f24 <printf@plt>
   52358:	b	52244 <__assert_fail@plt+0x41038>
   5235c:	mov	r6, r0
   52360:	mov	r2, #5
   52364:	ldr	r1, [pc, #692]	; 52620 <__assert_fail@plt+0x41414>
   52368:	mov	r0, #0
   5236c:	ldr	fp, [sp, #120]	; 0x78
   52370:	bl	10f90 <dcgettext@plt>
   52374:	mov	r1, r6
   52378:	bl	548ac <error@@Base>
   5237c:	b	51db8 <__assert_fail@plt+0x40bac>
   52380:	ldr	r3, [sp, #80]	; 0x50
   52384:	ldr	r0, [sp, #180]	; 0xb4
   52388:	ldr	r1, [r3, #16]
   5238c:	ldr	r3, [r3, #32]
   52390:	cmp	r0, #0
   52394:	add	r8, r1, r3
   52398:	ldr	r3, [pc, #736]	; 52680 <__assert_fail@plt+0x41474>
   5239c:	ldr	r3, [r3, #1488]	; 0x5d0
   523a0:	beq	52560 <__assert_fail@plt+0x41354>
   523a4:	ldr	r2, [sp, #144]	; 0x90
   523a8:	cmp	r2, r3
   523ac:	bcs	52f80 <__assert_fail@plt+0x41d74>
   523b0:	ldr	r3, [pc, #712]	; 52680 <__assert_fail@plt+0x41474>
   523b4:	ldr	r1, [sp, #140]	; 0x8c
   523b8:	ldr	r2, [r3, #1440]	; 0x5a0
   523bc:	add	r3, r2, r1
   523c0:	ldr	r2, [r2, r1]
   523c4:	str	r2, [sp, #40]	; 0x28
   523c8:	sub	r2, r2, #2
   523cc:	cmp	r2, #6
   523d0:	bhi	53034 <__assert_fail@plt+0x41e28>
   523d4:	ldr	r2, [r3, #16]
   523d8:	ldr	r4, [sp, #56]	; 0x38
   523dc:	str	r2, [sp, #96]	; 0x60
   523e0:	mov	r1, r4
   523e4:	ldr	r2, [r3, #4]
   523e8:	mov	r7, fp
   523ec:	ldr	r3, [r3, #8]
   523f0:	str	r2, [sp, #64]	; 0x40
   523f4:	str	r3, [sp, #88]	; 0x58
   523f8:	str	fp, [sp, #112]	; 0x70
   523fc:	ldr	r3, [sp, #136]	; 0x88
   52400:	sub	r1, r4, r1
   52404:	add	r1, r1, r3
   52408:	ldr	r0, [pc, #552]	; 52638 <__assert_fail@plt+0x4142c>
   5240c:	bl	10f24 <printf@plt>
   52410:	cmp	r4, r8
   52414:	bcs	5312c <__assert_fail@plt+0x41f20>
   52418:	add	r5, r4, #1
   5241c:	cmp	r5, r8
   52420:	bcc	52b38 <__assert_fail@plt+0x4192c>
   52424:	sub	r1, r8, r4
   52428:	sub	r3, r1, #1
   5242c:	cmp	r3, #7
   52430:	bls	52b3c <__assert_fail@plt+0x41930>
   52434:	mov	r2, #5
   52438:	ldr	r1, [pc, #512]	; 52640 <__assert_fail@plt+0x41434>
   5243c:	mov	r0, #0
   52440:	ldr	fp, [sp, #112]	; 0x70
   52444:	str	r5, [sp, #236]	; 0xec
   52448:	str	r7, [sp, #240]	; 0xf0
   5244c:	bl	10f90 <dcgettext@plt>
   52450:	bl	10f24 <printf@plt>
   52454:	b	51db8 <__assert_fail@plt+0x40bac>
   52458:	mov	r2, #5
   5245c:	ldr	r1, [pc, #448]	; 52624 <__assert_fail@plt+0x41418>
   52460:	bl	10f90 <dcgettext@plt>
   52464:	ldr	r1, [sp, #136]	; 0x88
   52468:	bl	54dd0 <warn@@Base>
   5246c:	mov	r7, #1
   52470:	b	51e10 <__assert_fail@plt+0x40c04>
   52474:	ldrd	r0, [ip, lr]
   52478:	cmp	r1, r5
   5247c:	cmpeq	r0, r4
   52480:	bne	51c78 <__assert_fail@plt+0x40a6c>
   52484:	b	51e10 <__assert_fail@plt+0x40c04>
   52488:	ldr	r1, [pc, #408]	; 52628 <__assert_fail@plt+0x4141c>
   5248c:	mov	r2, #5
   52490:	bl	10f90 <dcgettext@plt>
   52494:	ldr	r1, [sp, #236]	; 0xec
   52498:	ldr	r3, [sp, #148]	; 0x94
   5249c:	ldr	r2, [sp, #136]	; 0x88
   524a0:	sub	r1, r1, r3
   524a4:	bl	54dd0 <warn@@Base>
   524a8:	b	51d34 <__assert_fail@plt+0x40b28>
   524ac:	ldr	r3, [pc, #460]	; 52680 <__assert_fail@plt+0x41474>
   524b0:	ldr	r2, [sp, #144]	; 0x90
   524b4:	ldr	r3, [r3, #1488]	; 0x5d0
   524b8:	add	r2, r2, #1
   524bc:	cmp	r3, r2
   524c0:	str	r2, [sp, #144]	; 0x90
   524c4:	bhi	51bdc <__assert_fail@plt+0x409d0>
   524c8:	ldr	r2, [sp, #80]	; 0x50
   524cc:	ldr	r3, [r2, #16]
   524d0:	ldr	r1, [r2, #32]
   524d4:	ldr	r2, [sp, #236]	; 0xec
   524d8:	add	r3, r3, r1
   524dc:	cmp	r3, r2
   524e0:	bhi	53154 <__assert_fail@plt+0x41f48>
   524e4:	ldr	r3, [sp, #212]	; 0xd4
   524e8:	mov	r0, #10
   524ec:	ldr	r1, [r3]
   524f0:	bl	11158 <putc@plt>
   524f4:	ldr	r0, [sp, #216]	; 0xd8
   524f8:	bl	10f54 <free@plt>
   524fc:	mov	r0, #1
   52500:	add	sp, sp, #252	; 0xfc
   52504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52508:	mov	r3, #1
   5250c:	str	r3, [sp, #84]	; 0x54
   52510:	mov	r7, r3
   52514:	b	51e10 <__assert_fail@plt+0x40c04>
   52518:	mov	r2, #5
   5251c:	ldr	r1, [pc, #264]	; 5262c <__assert_fail@plt+0x41420>
   52520:	b	52490 <__assert_fail@plt+0x41284>
   52524:	mov	r2, #5
   52528:	ldr	r1, [pc, #256]	; 52630 <__assert_fail@plt+0x41424>
   5252c:	bl	10f90 <dcgettext@plt>
   52530:	mov	r1, r4
   52534:	bl	54dd0 <warn@@Base>
   52538:	mov	r7, #1
   5253c:	b	51e10 <__assert_fail@plt+0x40c04>
   52540:	mov	r2, #1
   52544:	str	r2, [sp, #84]	; 0x54
   52548:	ldr	r2, [sp, #144]	; 0x90
   5254c:	add	r1, sp, #236	; 0xec
   52550:	ldr	r0, [sp, #80]	; 0x50
   52554:	bl	415f8 <__assert_fail@plt+0x303ec>
   52558:	mov	r7, #1
   5255c:	b	51e10 <__assert_fail@plt+0x40c04>
   52560:	ldr	r1, [sp, #144]	; 0x90
   52564:	cmp	r1, r3
   52568:	bcs	52f64 <__assert_fail@plt+0x41d58>
   5256c:	ldr	r3, [pc, #268]	; 52680 <__assert_fail@plt+0x41474>
   52570:	ldr	r0, [sp, #140]	; 0x8c
   52574:	ldr	r3, [r3, #1440]	; 0x5a0
   52578:	add	r1, r3, r0
   5257c:	ldr	r9, [r3, r0]
   52580:	sub	r3, r9, #2
   52584:	cmp	r3, #6
   52588:	bhi	52e34 <__assert_fail@plt+0x41c28>
   5258c:	lsl	r3, r9, #3
   52590:	sub	r0, r3, #1
   52594:	sub	ip, r3, #33	; 0x21
   52598:	lsl	r2, r2, r0
   5259c:	mvn	r3, #1
   525a0:	rsb	lr, r0, #32
   525a4:	orr	r2, r2, r3, lsl ip
   525a8:	mvn	r0, r3, lsl r0
   525ac:	orr	r2, r2, r3, lsr lr
   525b0:	ldr	r3, [r1, #16]
   525b4:	ldr	sl, [sp, #56]	; 0x38
   525b8:	str	r3, [sp, #208]	; 0xd0
   525bc:	mvn	r3, r2
   525c0:	str	r3, [sp, #156]	; 0x9c
   525c4:	ldr	r3, [r1, #4]
   525c8:	str	fp, [sp, #88]	; 0x58
   525cc:	str	r3, [sp, #200]	; 0xc8
   525d0:	ldr	r3, [r1, #8]
   525d4:	str	fp, [sp, #220]	; 0xdc
   525d8:	str	r3, [sp, #204]	; 0xcc
   525dc:	lsl	r3, r9, #1
   525e0:	str	r3, [sp, #192]	; 0xc0
   525e4:	str	r0, [sp, #152]	; 0x98
   525e8:	mov	r3, sl
   525ec:	ldr	fp, [sp, #212]	; 0xd4
   525f0:	b	52910 <__assert_fail@plt+0x41704>
   525f4:	andeq	r3, r8, r8, asr ip
   525f8:			; <UNDEFINED> instruction: 0x00082eb0
   525fc:	andeq	r2, r8, r0, asr #29
   52600:	andeq	lr, r7, ip, lsl #14
   52604:	strdeq	r2, [r8], -r0
   52608:	andeq	sl, r9, ip, lsr #8
   5260c:	andeq	r3, r8, r8, lsl #5
   52610:	andeq	r3, r8, r4, ror r3
   52614:	andeq	r3, r8, ip, asr #6
   52618:	andeq	r3, r8, r4, ror #5
   5261c:	andeq	r3, r8, r8, lsl r3
   52620:	andeq	r3, r8, r4, lsr #6
   52624:	andeq	r3, r8, r0, lsr #1
   52628:	andeq	r3, r8, ip, lsr #32
   5262c:	andeq	r3, r8, r4, rrx
   52630:	ldrdeq	r3, [r8], -r8
   52634:	andeq	r3, r8, r8, ror r2
   52638:	muleq	r7, ip, r6
   5263c:	andeq	pc, r7, r0, asr #15
   52640:	andeq	lr, r7, r8, lsr #13
   52644:			; <UNDEFINED> instruction: 0x000831bc
   52648:	andeq	fp, r6, ip, ror #2
   5264c:	andeq	r2, r6, ip, asr #31
   52650:	ldrdeq	r3, [r8], -ip
   52654:	andeq	r3, r8, r8, ror #4
   52658:	andeq	r3, r8, r4, lsr #5
   5265c:	andeq	ip, r3, r8, asr #7
   52660:	andeq	r0, r8, r0, lsl #15
   52664:	andeq	r3, r8, ip, lsr #4
   52668:	andeq	r3, r8, r4, lsl r1
   5266c:	andeq	r3, r8, r8, asr #2
   52670:			; <UNDEFINED> instruction: 0x000833bc
   52674:	strdeq	r3, [r8], -r4
   52678:	muleq	r8, ip, pc	; <UNPREDICTABLE>
   5267c:	andeq	r2, r8, r4, asr #30
   52680:	ldrdeq	ip, [r9], -r0
   52684:			; <UNDEFINED> instruction: 0x00082bb8
   52688:	andeq	r2, r8, r0, ror pc
   5268c:	andeq	r9, r6, r0, lsr #15
   52690:	andeq	r3, r8, r0, lsl #3
   52694:	andeq	lr, r7, r0, ror r5
   52698:	andeq	r2, r8, r4, lsl #30
   5269c:	andeq	lr, r9, ip, asr sp
   526a0:	strdeq	r3, [r8], -ip
   526a4:	andeq	r3, r8, r4, lsl #4
   526a8:	cmp	sl, r8
   526ac:	bcs	526c0 <__assert_fail@plt+0x414b4>
   526b0:	sub	r1, r8, sl
   526b4:	sub	r3, r1, #1
   526b8:	cmp	r3, #7
   526bc:	bls	5330c <__assert_fail@plt+0x42100>
   526c0:	cmp	r7, r8
   526c4:	mov	r4, #0
   526c8:	mov	r5, #0
   526cc:	addeq	sl, r6, r9
   526d0:	strdeq	r4, [sp, #40]	; 0x28
   526d4:	bne	52970 <__assert_fail@plt+0x41764>
   526d8:	ldrd	r2, [sp, #96]	; 0x60
   526dc:	ldr	r0, [sp, #80]	; 0x50
   526e0:	bl	35750 <__assert_fail@plt+0x24544>
   526e4:	cmp	r0, #0
   526e8:	beq	52b04 <__assert_fail@plt+0x418f8>
   526ec:	ldrd	r2, [sp, #152]	; 0x98
   526f0:	mov	r1, r2
   526f4:	and	r1, r1, r4
   526f8:	str	r1, [sp, #72]	; 0x48
   526fc:	mov	r1, r3
   52700:	and	r1, r1, r5
   52704:	str	r1, [sp, #76]	; 0x4c
   52708:	ldrd	r0, [sp, #72]	; 0x48
   5270c:	cmp	r3, r1
   52710:	cmpeq	r2, r0
   52714:	beq	52a30 <__assert_fail@plt+0x41824>
   52718:	ldr	r0, [sp, #88]	; 0x58
   5271c:	cmp	r0, #0
   52720:	beq	529e8 <__assert_fail@plt+0x417dc>
   52724:	ldrd	r6, [sp, #24]
   52728:	ldr	ip, [sp, #236]	; 0xec
   5272c:	add	r3, sp, #244	; 0xf4
   52730:	sub	ip, r0, ip
   52734:	adds	r6, r6, ip
   52738:	adc	r7, r7, ip, asr #31
   5273c:	str	r3, [sp, #120]	; 0x78
   52740:	mov	r1, r3
   52744:	mov	r2, #0
   52748:	mov	r3, r8
   5274c:	strd	r6, [sp, #160]	; 0xa0
   52750:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52754:	ldr	r3, [sp, #88]	; 0x58
   52758:	ldr	r6, [sp, #244]	; 0xf4
   5275c:	mov	r2, r9
   52760:	add	r6, r3, r6
   52764:	strd	r0, [sp, #96]	; 0x60
   52768:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   5276c:	mov	r3, r8
   52770:	mov	r0, r6
   52774:	mov	r2, #0
   52778:	ldr	r1, [sp, #120]	; 0x78
   5277c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52780:	ldr	r3, [sp, #244]	; 0xf4
   52784:	mov	r2, r9
   52788:	add	r3, r6, r3
   5278c:	str	r3, [sp, #88]	; 0x58
   52790:	add	r6, sl, #2
   52794:	strd	r0, [sp, #120]	; 0x78
   52798:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   5279c:	mov	r2, #5
   527a0:	ldr	r1, [pc, #-356]	; 52644 <__assert_fail@plt+0x41438>
   527a4:	mov	r0, #0
   527a8:	bl	10f90 <dcgettext@plt>
   527ac:	ldr	r1, [sp, #160]	; 0xa0
   527b0:	ldr	r3, [pc, #-368]	; 52648 <__assert_fail@plt+0x4143c>
   527b4:	mov	r2, #8
   527b8:	bl	10f24 <printf@plt>
   527bc:	cmp	r6, r8
   527c0:	bhi	52a04 <__assert_fail@plt+0x417f8>
   527c4:	bne	529b4 <__assert_fail@plt+0x417a8>
   527c8:	cmp	sl, r8
   527cc:	bcc	529b4 <__assert_fail@plt+0x417a8>
   527d0:	mov	sl, r8
   527d4:	mov	r3, #0
   527d8:	str	r3, [sp, #160]	; 0xa0
   527dc:	str	r3, [sp, #172]	; 0xac
   527e0:	ldr	r7, [sp, #112]	; 0x70
   527e4:	ldr	r3, [sp, #64]	; 0x40
   527e8:	adds	r0, r7, r4
   527ec:	adc	r1, r3, r5
   527f0:	mov	r2, r9
   527f4:	bl	3ca6c <__assert_fail@plt+0x2b860>
   527f8:	ldr	r1, [sp, #40]	; 0x28
   527fc:	ldr	r3, [sp, #64]	; 0x40
   52800:	adds	r0, r7, r1
   52804:	ldr	r1, [sp, #44]	; 0x2c
   52808:	mov	r2, r9
   5280c:	adc	r1, r3, r1
   52810:	bl	3ca6c <__assert_fail@plt+0x2b860>
   52814:	ldr	r1, [fp]
   52818:	mov	r0, #40	; 0x28
   5281c:	bl	11158 <putc@plt>
   52820:	ldr	r3, [sp, #80]	; 0x50
   52824:	mov	r7, #0
   52828:	str	r3, [sp, #16]
   5282c:	ldr	r3, [sp, #208]	; 0xd0
   52830:	mov	r0, r6
   52834:	str	r3, [sp, #8]
   52838:	ldr	r3, [sp, #160]	; 0xa0
   5283c:	mov	r1, r9
   52840:	str	r3, [sp]
   52844:	ldr	r3, [sp, #172]	; 0xac
   52848:	str	r7, [sp, #12]
   5284c:	str	r3, [sp, #4]
   52850:	ldrd	r2, [sp, #200]	; 0xc8
   52854:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   52858:	ldr	r1, [fp]
   5285c:	mov	r6, r0
   52860:	mov	r0, #41	; 0x29
   52864:	bl	11158 <putc@plt>
   52868:	cmp	r6, r7
   5286c:	ldr	r3, [sp, #108]	; 0x6c
   52870:	clz	r0, r3
   52874:	lsr	r0, r0, #5
   52878:	moveq	r0, r7
   5287c:	cmp	r0, r7
   52880:	bne	52ab8 <__assert_fail@plt+0x418ac>
   52884:	ldrd	r2, [sp, #40]	; 0x28
   52888:	ldrd	r0, [sp, #96]	; 0x60
   5288c:	ldrd	r6, [sp, #120]	; 0x78
   52890:	cmp	r5, r3
   52894:	cmpeq	r4, r2
   52898:	moveq	r3, #1
   5289c:	movne	r3, #0
   528a0:	cmp	r1, r7
   528a4:	cmpeq	r0, r6
   528a8:	moveq	r2, r3
   528ac:	movne	r2, #0
   528b0:	cmp	r2, #0
   528b4:	bne	52a9c <__assert_fail@plt+0x41890>
   528b8:	ldrd	r0, [sp, #40]	; 0x28
   528bc:	cmp	r5, r1
   528c0:	cmpeq	r4, r0
   528c4:	bhi	528e8 <__assert_fail@plt+0x416dc>
   528c8:	ldrd	r0, [sp, #96]	; 0x60
   528cc:	ldrd	r4, [sp, #120]	; 0x78
   528d0:	cmp	r1, r5
   528d4:	cmpeq	r0, r4
   528d8:	movls	r3, #0
   528dc:	andhi	r3, r3, #1
   528e0:	cmp	r3, #0
   528e4:	beq	52900 <__assert_fail@plt+0x416f4>
   528e8:	ldr	r1, [pc, #-700]	; 52634 <__assert_fail@plt+0x41428>
   528ec:	mov	r2, #5
   528f0:	mov	r0, #0
   528f4:	bl	10f90 <dcgettext@plt>
   528f8:	ldr	r1, [fp]
   528fc:	bl	111c4 <fputs@plt>
   52900:	ldr	r1, [fp]
   52904:	mov	r0, #10
   52908:	bl	11158 <putc@plt>
   5290c:	ldr	r3, [sp, #236]	; 0xec
   52910:	ldrd	r0, [sp, #24]
   52914:	sub	r3, sl, r3
   52918:	ldr	r2, [sp, #192]	; 0xc0
   5291c:	adds	r0, r0, r3
   52920:	adc	r1, r1, r3, asr #31
   52924:	add	r7, sl, r2
   52928:	cmp	r7, r8
   5292c:	strd	r0, [sp, #96]	; 0x60
   52930:	bhi	52a04 <__assert_fail@plt+0x417f8>
   52934:	ldr	r1, [sp, #96]	; 0x60
   52938:	ldr	r0, [pc, #-776]	; 52638 <__assert_fail@plt+0x4142c>
   5293c:	add	r6, sl, r9
   52940:	bl	10f24 <printf@plt>
   52944:	cmp	r6, r8
   52948:	bcs	526a8 <__assert_fail@plt+0x4149c>
   5294c:	ldr	r3, [pc, #-696]	; 5269c <__assert_fail@plt+0x41490>
   52950:	mov	r0, sl
   52954:	mov	r1, r9
   52958:	ldr	r3, [r3]
   5295c:	blx	r3
   52960:	cmp	r7, r8
   52964:	mov	r4, r0
   52968:	mov	r5, r1
   5296c:	beq	52ad0 <__assert_fail@plt+0x418c4>
   52970:	mov	r1, r9
   52974:	ldr	r3, [pc, #-736]	; 5269c <__assert_fail@plt+0x41490>
   52978:	mov	r0, r6
   5297c:	ldr	r3, [r3]
   52980:	blx	r3
   52984:	mov	r3, r1
   52988:	mov	r2, r0
   5298c:	orr	r1, r0, r4
   52990:	strd	r2, [sp, #40]	; 0x28
   52994:	orr	r3, r3, r5
   52998:	str	r1, [sp, #128]	; 0x80
   5299c:	str	r3, [sp, #132]	; 0x84
   529a0:	ldrd	r2, [sp, #128]	; 0x80
   529a4:	add	sl, r6, r9
   529a8:	orrs	r3, r2, r3
   529ac:	bne	526ec <__assert_fail@plt+0x414e0>
   529b0:	b	526d8 <__assert_fail@plt+0x414cc>
   529b4:	ldr	r3, [pc, #-800]	; 5269c <__assert_fail@plt+0x41490>
   529b8:	mov	r0, sl
   529bc:	mov	r1, #2
   529c0:	ldr	r2, [r3]
   529c4:	blx	r2
   529c8:	uxtah	sl, r6, r0
   529cc:	cmp	sl, r8
   529d0:	bhi	52fe4 <__assert_fail@plt+0x41dd8>
   529d4:	uxth	r3, r0
   529d8:	str	r3, [sp, #160]	; 0xa0
   529dc:	mov	r3, #0
   529e0:	str	r3, [sp, #172]	; 0xac
   529e4:	b	527e0 <__assert_fail@plt+0x415d4>
   529e8:	mvn	r2, #0
   529ec:	mvn	r3, #0
   529f0:	add	r6, sl, #2
   529f4:	cmp	r6, r8
   529f8:	strd	r2, [sp, #120]	; 0x78
   529fc:	strd	r2, [sp, #96]	; 0x60
   52a00:	bls	527c4 <__assert_fail@plt+0x415b8>
   52a04:	ldr	r1, [pc, #-892]	; 52690 <__assert_fail@plt+0x41484>
   52a08:	mov	r2, #5
   52a0c:	mov	r0, #0
   52a10:	ldr	fp, [sp, #220]	; 0xdc
   52a14:	bl	10f90 <dcgettext@plt>
   52a18:	ldr	r1, [sp, #136]	; 0x88
   52a1c:	bl	54dd0 <warn@@Base>
   52a20:	ldr	r3, [sp, #88]	; 0x58
   52a24:	str	sl, [sp, #236]	; 0xec
   52a28:	str	r3, [sp, #240]	; 0xf0
   52a2c:	b	51db8 <__assert_fail@plt+0x40bac>
   52a30:	ldrd	r0, [sp, #40]	; 0x28
   52a34:	mov	ip, r2
   52a38:	and	ip, ip, r0
   52a3c:	and	r1, r3, r1
   52a40:	str	ip, [sp, #184]	; 0xb8
   52a44:	str	r1, [sp, #188]	; 0xbc
   52a48:	ldrd	r0, [sp, #184]	; 0xb8
   52a4c:	cmp	r3, r1
   52a50:	cmpeq	r2, r0
   52a54:	beq	52718 <__assert_fail@plt+0x4150c>
   52a58:	mov	r0, r4
   52a5c:	mov	r1, r5
   52a60:	mov	r2, r9
   52a64:	bl	3ca6c <__assert_fail@plt+0x2b860>
   52a68:	ldrd	r4, [sp, #40]	; 0x28
   52a6c:	mov	r2, r9
   52a70:	mov	r0, r4
   52a74:	mov	r1, r5
   52a78:	bl	3ca6c <__assert_fail@plt+0x2b860>
   52a7c:	mov	r2, #5
   52a80:	ldr	r1, [pc, #-1100]	; 5263c <__assert_fail@plt+0x41430>
   52a84:	mov	r0, #0
   52a88:	bl	10f90 <dcgettext@plt>
   52a8c:	bl	10f24 <printf@plt>
   52a90:	str	r4, [sp, #112]	; 0x70
   52a94:	str	r5, [sp, #64]	; 0x40
   52a98:	b	5290c <__assert_fail@plt+0x41700>
   52a9c:	mov	r2, #5
   52aa0:	ldr	r1, [pc, #-1108]	; 52654 <__assert_fail@plt+0x41448>
   52aa4:	mov	r0, #0
   52aa8:	bl	10f90 <dcgettext@plt>
   52aac:	ldr	r1, [fp]
   52ab0:	bl	111c4 <fputs@plt>
   52ab4:	b	52900 <__assert_fail@plt+0x416f4>
   52ab8:	mov	r2, #5
   52abc:	ldr	r1, [pc, #-1124]	; 52660 <__assert_fail@plt+0x41454>
   52ac0:	mov	r0, r7
   52ac4:	bl	10f90 <dcgettext@plt>
   52ac8:	bl	10f24 <printf@plt>
   52acc:	b	52884 <__assert_fail@plt+0x41678>
   52ad0:	sub	r1, r8, r6
   52ad4:	sub	r3, r1, #1
   52ad8:	cmp	r3, #7
   52adc:	bls	52974 <__assert_fail@plt+0x41768>
   52ae0:	mov	r2, #0
   52ae4:	mov	r3, #0
   52ae8:	strd	r4, [sp, #128]	; 0x80
   52aec:	strd	r2, [sp, #40]	; 0x28
   52af0:	b	529a0 <__assert_fail@plt+0x41794>
   52af4:	ldr	r3, [sp, #240]	; 0xf0
   52af8:	str	r6, [sp, #104]	; 0x68
   52afc:	str	r3, [sp, #236]	; 0xec
   52b00:	b	51d0c <__assert_fail@plt+0x40b00>
   52b04:	ldrd	r2, [sp, #96]	; 0x60
   52b08:	ldr	r0, [sp, #80]	; 0x50
   52b0c:	adds	r2, r2, r9
   52b10:	adc	r3, r3, #0
   52b14:	bl	35750 <__assert_fail@plt+0x24544>
   52b18:	cmp	r0, #0
   52b1c:	bne	526ec <__assert_fail@plt+0x414e0>
   52b20:	mov	r2, #5
   52b24:	ldr	r1, [pc, #-1260]	; 52640 <__assert_fail@plt+0x41434>
   52b28:	ldr	fp, [sp, #220]	; 0xdc
   52b2c:	bl	10f90 <dcgettext@plt>
   52b30:	bl	10f24 <printf@plt>
   52b34:	b	52a20 <__assert_fail@plt+0x41814>
   52b38:	ldr	r1, [sp, #180]	; 0xb4
   52b3c:	ldr	r3, [pc, #-1192]	; 5269c <__assert_fail@plt+0x41490>
   52b40:	mov	r0, r4
   52b44:	ldr	r3, [r3]
   52b48:	blx	r3
   52b4c:	cmp	r7, #0
   52b50:	mov	r6, r0
   52b54:	beq	52e70 <__assert_fail@plt+0x41c64>
   52b58:	sub	r3, r0, #2
   52b5c:	cmp	r3, #2
   52b60:	bhi	52f9c <__assert_fail@plt+0x41d90>
   52b64:	ldr	ip, [sp, #236]	; 0xec
   52b68:	ldrd	sl, [sp, #24]
   52b6c:	add	r9, sp, #244	; 0xf4
   52b70:	sub	ip, r7, ip
   52b74:	mov	r3, r8
   52b78:	mov	r2, #0
   52b7c:	mov	r0, r7
   52b80:	mov	r1, r9
   52b84:	adds	sl, sl, ip
   52b88:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52b8c:	ldr	r3, [sp, #244]	; 0xf4
   52b90:	mov	r2, #8
   52b94:	add	r7, r7, r3
   52b98:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   52b9c:	mov	r3, r8
   52ba0:	mov	r0, r7
   52ba4:	mov	r2, #0
   52ba8:	mov	r1, r9
   52bac:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52bb0:	ldr	r3, [sp, #244]	; 0xf4
   52bb4:	mov	r2, #8
   52bb8:	add	r7, r7, r3
   52bbc:	bl	3e304 <__assert_fail@plt+0x2d0f8>
   52bc0:	mov	r2, #5
   52bc4:	ldr	r1, [pc, #-1416]	; 52644 <__assert_fail@plt+0x41438>
   52bc8:	mov	r0, #0
   52bcc:	bl	10f90 <dcgettext@plt>
   52bd0:	ldr	r3, [pc, #-1424]	; 52648 <__assert_fail@plt+0x4143c>
   52bd4:	mov	r1, sl
   52bd8:	mov	r2, #8
   52bdc:	bl	10f24 <printf@plt>
   52be0:	cmp	r6, #4
   52be4:	ldrls	pc, [pc, r6, lsl #2]
   52be8:	b	53364 <__assert_fail@plt+0x42158>
   52bec:	andeq	r2, r5, r4, lsr r4
   52bf0:	andeq	r2, r5, r0, lsr #27
   52bf4:	andeq	r2, r5, ip, asr sp
   52bf8:	andeq	r2, r5, ip, lsl #26
   52bfc:	andeq	r2, r5, r0, lsl #24
   52c00:	add	r6, r4, #5
   52c04:	cmp	r6, r8
   52c08:	bcc	53070 <__assert_fail@plt+0x41e64>
   52c0c:	cmp	r5, r8
   52c10:	bcs	52c24 <__assert_fail@plt+0x41a18>
   52c14:	sub	r1, r8, r5
   52c18:	sub	r3, r1, #1
   52c1c:	cmp	r3, #7
   52c20:	bls	53338 <__assert_fail@plt+0x4212c>
   52c24:	add	r4, r4, #9
   52c28:	mov	r1, #0
   52c2c:	ldr	r0, [pc, #-1428]	; 526a0 <__assert_fail@plt+0x41494>
   52c30:	bl	10f24 <printf@plt>
   52c34:	cmp	r8, r4
   52c38:	bls	52d50 <__assert_fail@plt+0x41b44>
   52c3c:	mov	r1, #4
   52c40:	ldr	r3, [pc, #-1452]	; 5269c <__assert_fail@plt+0x41490>
   52c44:	mov	r0, r6
   52c48:	ldr	r3, [r3]
   52c4c:	blx	r3
   52c50:	mov	r1, r0
   52c54:	ldr	r0, [pc, #-1468]	; 526a0 <__assert_fail@plt+0x41494>
   52c58:	bl	10f24 <printf@plt>
   52c5c:	add	r9, r4, #2
   52c60:	cmp	r9, r8
   52c64:	bhi	5312c <__assert_fail@plt+0x41f20>
   52c68:	bne	52eb8 <__assert_fail@plt+0x41cac>
   52c6c:	cmp	r4, r8
   52c70:	bcc	52eb8 <__assert_fail@plt+0x41cac>
   52c74:	mov	r5, #0
   52c78:	mov	fp, r5
   52c7c:	mov	r4, r8
   52c80:	ldr	sl, [sp, #212]	; 0xd4
   52c84:	mov	r0, #40	; 0x28
   52c88:	mov	r6, #0
   52c8c:	ldr	r1, [sl]
   52c90:	bl	11158 <putc@plt>
   52c94:	ldr	r3, [sp, #80]	; 0x50
   52c98:	str	r5, [sp]
   52c9c:	str	r3, [sp, #16]
   52ca0:	ldr	r3, [sp, #96]	; 0x60
   52ca4:	ldr	r2, [sp, #64]	; 0x40
   52ca8:	str	r3, [sp, #8]
   52cac:	ldr	r1, [sp, #40]	; 0x28
   52cb0:	ldr	r3, [sp, #88]	; 0x58
   52cb4:	str	fp, [sp, #4]
   52cb8:	mov	r0, r9
   52cbc:	str	r6, [sp, #12]
   52cc0:	bl	3f4a8 <__assert_fail@plt+0x2e29c>
   52cc4:	ldr	r1, [sl]
   52cc8:	mov	r5, r0
   52ccc:	mov	r0, #41	; 0x29
   52cd0:	bl	11158 <putc@plt>
   52cd4:	cmp	r5, r6
   52cd8:	ldr	r3, [sp, #108]	; 0x6c
   52cdc:	clz	r0, r3
   52ce0:	lsr	r0, r0, #5
   52ce4:	moveq	r0, r6
   52ce8:	cmp	r0, r6
   52cec:	bne	52f4c <__assert_fail@plt+0x41d40>
   52cf0:	ldr	r3, [sp, #212]	; 0xd4
   52cf4:	mov	r0, #10
   52cf8:	ldr	r1, [r3]
   52cfc:	bl	11158 <putc@plt>
   52d00:	ldr	r1, [sp, #236]	; 0xec
   52d04:	b	523fc <__assert_fail@plt+0x411f0>
   52d08:	add	r9, sp, #244	; 0xf4
   52d0c:	mov	r3, r8
   52d10:	mov	r2, #0
   52d14:	mov	r0, r5
   52d18:	mov	r1, r9
   52d1c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52d20:	ldr	r3, [sp, #244]	; 0xf4
   52d24:	add	r5, r5, r3
   52d28:	add	r4, r5, #4
   52d2c:	bl	3e2c8 <__assert_fail@plt+0x2d0bc>
   52d30:	cmp	r4, r8
   52d34:	bcc	53054 <__assert_fail@plt+0x41e48>
   52d38:	cmp	r5, r8
   52d3c:	bcs	52d50 <__assert_fail@plt+0x41b44>
   52d40:	sub	r1, r8, r5
   52d44:	sub	r3, r1, #1
   52d48:	cmp	r3, #7
   52d4c:	bls	53058 <__assert_fail@plt+0x41e4c>
   52d50:	mov	r1, #0
   52d54:	b	52c54 <__assert_fail@plt+0x41a48>
   52d58:	add	r9, sp, #244	; 0xf4
   52d5c:	mov	r3, r8
   52d60:	mov	r2, #0
   52d64:	mov	r1, r9
   52d68:	mov	r0, r5
   52d6c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52d70:	ldr	r4, [sp, #244]	; 0xf4
   52d74:	bl	3e2c8 <__assert_fail@plt+0x2d0bc>
   52d78:	add	r4, r5, r4
   52d7c:	mov	r3, r8
   52d80:	mov	r1, r9
   52d84:	mov	r0, r4
   52d88:	mov	r2, #0
   52d8c:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52d90:	ldr	r3, [sp, #244]	; 0xf4
   52d94:	add	r4, r4, r3
   52d98:	bl	3e2c8 <__assert_fail@plt+0x2d0bc>
   52d9c:	b	52c5c <__assert_fail@plt+0x41a50>
   52da0:	mov	r3, r8
   52da4:	mov	r2, #0
   52da8:	mov	r1, r9
   52dac:	mov	r0, r5
   52db0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52db4:	ldr	r4, [sp, #244]	; 0xf4
   52db8:	bl	3e2c8 <__assert_fail@plt+0x2d0bc>
   52dbc:	cmp	r7, #0
   52dc0:	add	r4, r5, r4
   52dc4:	movne	r1, #21
   52dc8:	moveq	r1, #9
   52dcc:	ldr	r2, [pc, #-1932]	; 52648 <__assert_fail@plt+0x4143c>
   52dd0:	ldr	r0, [pc, #-1932]	; 5264c <__assert_fail@plt+0x41440>
   52dd4:	bl	10f24 <printf@plt>
   52dd8:	mov	r2, #5
   52ddc:	ldr	r1, [pc, #-1940]	; 52650 <__assert_fail@plt+0x41444>
   52de0:	mov	r0, #0
   52de4:	bl	10f90 <dcgettext@plt>
   52de8:	bl	10f24 <printf@plt>
   52dec:	b	52d00 <__assert_fail@plt+0x41af4>
   52df0:	mov	r1, r9
   52df4:	ldr	r3, [pc, #-1888]	; 5269c <__assert_fail@plt+0x41490>
   52df8:	mov	r0, r4
   52dfc:	ldr	r3, [r3]
   52e00:	blx	r3
   52e04:	mov	fp, r0
   52e08:	str	r1, [sp, #64]	; 0x40
   52e0c:	b	52334 <__assert_fail@plt+0x41128>
   52e10:	mov	r2, #5
   52e14:	ldr	r1, [pc, #-1980]	; 52660 <__assert_fail@plt+0x41454>
   52e18:	mov	r0, #0
   52e1c:	bl	10f90 <dcgettext@plt>
   52e20:	bl	10f24 <printf@plt>
   52e24:	b	52198 <__assert_fail@plt+0x40f8c>
   52e28:	mov	r2, #5
   52e2c:	ldr	r1, [pc, #-2016]	; 52654 <__assert_fail@plt+0x41448>
   52e30:	b	5220c <__assert_fail@plt+0x41000>
   52e34:	mov	r2, #5
   52e38:	ldr	r1, [pc, #-2004]	; 5266c <__assert_fail@plt+0x41460>
   52e3c:	ldr	r0, [sp, #180]	; 0xb4
   52e40:	bl	10f90 <dcgettext@plt>
   52e44:	ldr	r2, [sp, #144]	; 0x90
   52e48:	mov	r1, r9
   52e4c:	bl	54dd0 <warn@@Base>
   52e50:	b	51db8 <__assert_fail@plt+0x40bac>
   52e54:	mov	r2, #5
   52e58:	ldr	r1, [pc, #-2056]	; 52658 <__assert_fail@plt+0x4144c>
   52e5c:	ldr	r0, [sp, #180]	; 0xb4
   52e60:	bl	10f90 <dcgettext@plt>
   52e64:	ldr	r1, [sp, #144]	; 0x90
   52e68:	bl	54dd0 <warn@@Base>
   52e6c:	b	51db8 <__assert_fail@plt+0x40bac>
   52e70:	cmp	r0, #4
   52e74:	ldrls	pc, [pc, r0, lsl #2]
   52e78:	b	53364 <__assert_fail@plt+0x42158>
   52e7c:	andeq	r2, r5, r4, lsr r4
   52e80:	muleq	r5, r0, lr
   52e84:	andeq	r2, r5, r8, asr sp
   52e88:	andeq	r2, r5, r8, lsl #26
   52e8c:	andeq	r2, r5, r0, lsl #24
   52e90:	mov	r3, r8
   52e94:	mov	r2, #0
   52e98:	add	r1, sp, #244	; 0xf4
   52e9c:	mov	r0, r5
   52ea0:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52ea4:	ldr	r4, [sp, #244]	; 0xf4
   52ea8:	bl	3e2c8 <__assert_fail@plt+0x2d0bc>
   52eac:	add	r4, r5, r4
   52eb0:	mov	r1, #9
   52eb4:	b	52dcc <__assert_fail@plt+0x41bc0>
   52eb8:	ldr	r3, [pc, #-2084]	; 5269c <__assert_fail@plt+0x41490>
   52ebc:	mov	r0, r4
   52ec0:	mov	r1, #2
   52ec4:	ldr	r2, [r3]
   52ec8:	blx	r2
   52ecc:	uxtah	r4, r9, r0
   52ed0:	cmp	r4, r8
   52ed4:	bhi	53264 <__assert_fail@plt+0x42058>
   52ed8:	mov	r3, #0
   52edc:	uxth	r5, r0
   52ee0:	mov	fp, r3
   52ee4:	b	52c80 <__assert_fail@plt+0x41a74>
   52ee8:	cmp	r1, #0
   52eec:	beq	52f10 <__assert_fail@plt+0x41d04>
   52ef0:	ldr	r2, [sp, #216]	; 0xd8
   52ef4:	sub	r0, r2, #4
   52ef8:	ldr	r2, [sp, #168]	; 0xa8
   52efc:	str	r2, [r0, #4]!
   52f00:	ldr	r1, [r3, #60]	; 0x3c
   52f04:	add	r2, r2, #1
   52f08:	cmp	r1, r2
   52f0c:	bhi	52efc <__assert_fail@plt+0x41cf0>
   52f10:	ldr	lr, [pc, #-2200]	; 52680 <__assert_fail@plt+0x41474>
   52f14:	ldr	r0, [r3, #48]	; 0x30
   52f18:	ldr	ip, [r3, #52]	; 0x34
   52f1c:	mov	r4, lr
   52f20:	ldr	r3, [pc, #-2252]	; 5265c <__assert_fail@plt+0x41450>
   52f24:	mov	r2, #4
   52f28:	str	r0, [lr]
   52f2c:	ldr	r0, [sp, #216]	; 0xd8
   52f30:	str	ip, [lr, #4]
   52f34:	bl	11170 <qsort@plt>
   52f38:	ldr	r3, [r4, #1440]	; 0x5a0
   52f3c:	ldr	r2, [sp, #140]	; 0x8c
   52f40:	add	r3, r3, r2
   52f44:	ldr	r1, [r3, #60]	; 0x3c
   52f48:	b	51c0c <__assert_fail@plt+0x40a00>
   52f4c:	mov	r2, #5
   52f50:	ldr	r1, [pc, #-2296]	; 52660 <__assert_fail@plt+0x41454>
   52f54:	mov	r0, r6
   52f58:	bl	10f90 <dcgettext@plt>
   52f5c:	bl	10f24 <printf@plt>
   52f60:	b	52cf0 <__assert_fail@plt+0x41ae4>
   52f64:	mov	r2, #5
   52f68:	ldr	r1, [pc, #-2316]	; 52664 <__assert_fail@plt+0x41458>
   52f6c:	ldr	r0, [sp, #180]	; 0xb4
   52f70:	bl	10f90 <dcgettext@plt>
   52f74:	ldr	r1, [sp, #144]	; 0x90
   52f78:	bl	54dd0 <warn@@Base>
   52f7c:	b	51db8 <__assert_fail@plt+0x40bac>
   52f80:	mov	r2, #5
   52f84:	ldr	r1, [pc, #-2340]	; 52668 <__assert_fail@plt+0x4145c>
   52f88:	ldr	r0, [sp, #196]	; 0xc4
   52f8c:	bl	10f90 <dcgettext@plt>
   52f90:	ldr	r1, [sp, #144]	; 0x90
   52f94:	bl	54dd0 <warn@@Base>
   52f98:	b	51db8 <__assert_fail@plt+0x40bac>
   52f9c:	cmp	r0, #4
   52fa0:	ldrls	pc, [pc, r0, lsl #2]
   52fa4:	b	53364 <__assert_fail@plt+0x42158>
   52fa8:	andeq	r2, r5, r4, lsr r4
   52fac:			; <UNDEFINED> instruction: 0x00052fbc
   52fb0:	andeq	r2, r5, r8, asr sp
   52fb4:	andeq	r2, r5, r8, lsl #26
   52fb8:	andeq	r2, r5, r0, lsl #24
   52fbc:	mov	r3, r8
   52fc0:	mov	r2, #0
   52fc4:	add	r1, sp, #244	; 0xf4
   52fc8:	mov	r0, r5
   52fcc:	bl	3efd0 <__assert_fail@plt+0x2ddc4>
   52fd0:	ldr	r4, [sp, #244]	; 0xf4
   52fd4:	bl	3e2c8 <__assert_fail@plt+0x2d0bc>
   52fd8:	add	r4, r5, r4
   52fdc:	mov	r1, #21
   52fe0:	b	52dcc <__assert_fail@plt+0x41bc0>
   52fe4:	mov	r2, #5
   52fe8:	ldr	r1, [pc, #-2400]	; 52690 <__assert_fail@plt+0x41484>
   52fec:	mov	r0, #0
   52ff0:	ldr	fp, [sp, #220]	; 0xdc
   52ff4:	str	r6, [sp, #24]
   52ff8:	bl	10f90 <dcgettext@plt>
   52ffc:	ldr	r3, [sp, #24]
   53000:	ldr	r1, [sp, #136]	; 0x88
   53004:	mov	sl, r3
   53008:	bl	54dd0 <warn@@Base>
   5300c:	b	52a20 <__assert_fail@plt+0x41814>
   53010:	mov	r2, #5
   53014:	ldr	r1, [pc, #-2444]	; 52690 <__assert_fail@plt+0x41484>
   53018:	mov	r0, #0
   5301c:	ldr	fp, [sp, #120]	; 0x78
   53020:	bl	10f90 <dcgettext@plt>
   53024:	ldr	r1, [sp, #136]	; 0x88
   53028:	mov	r4, sl
   5302c:	bl	54dd0 <warn@@Base>
   53030:	b	51f78 <__assert_fail@plt+0x40d6c>
   53034:	mov	r2, #5
   53038:	ldr	r1, [pc, #-2516]	; 5266c <__assert_fail@plt+0x41460>
   5303c:	ldr	r0, [sp, #196]	; 0xc4
   53040:	bl	10f90 <dcgettext@plt>
   53044:	ldr	r2, [sp, #144]	; 0x90
   53048:	ldr	r1, [sp, #40]	; 0x28
   5304c:	bl	54dd0 <warn@@Base>
   53050:	b	51db8 <__assert_fail@plt+0x40bac>
   53054:	mov	r1, #4
   53058:	ldr	r3, [pc, #-2500]	; 5269c <__assert_fail@plt+0x41490>
   5305c:	mov	r0, r5
   53060:	ldr	r3, [r3]
   53064:	blx	r3
   53068:	mov	r1, r0
   5306c:	b	52c54 <__assert_fail@plt+0x41a48>
   53070:	ldr	r3, [pc, #-2524]	; 5269c <__assert_fail@plt+0x41490>
   53074:	mov	r0, r5
   53078:	mov	r1, #4
   5307c:	ldr	r3, [r3]
   53080:	blx	r3
   53084:	add	r4, r4, #9
   53088:	mov	r1, r0
   5308c:	ldr	r0, [pc, #-2548]	; 526a0 <__assert_fail@plt+0x41494>
   53090:	bl	10f24 <printf@plt>
   53094:	cmp	r4, r8
   53098:	bcc	52c3c <__assert_fail@plt+0x41a30>
   5309c:	sub	r1, r8, r6
   530a0:	sub	r3, r1, #1
   530a4:	cmp	r3, #7
   530a8:	bhi	52d50 <__assert_fail@plt+0x41b44>
   530ac:	b	52c40 <__assert_fail@plt+0x41a34>
   530b0:	mov	r1, #1
   530b4:	ldr	r6, [sp, #52]	; 0x34
   530b8:	ldr	fp, [sp, #56]	; 0x38
   530bc:	mov	r2, r1
   530c0:	b	51950 <__assert_fail@plt+0x40744>
   530c4:	mov	r2, #0
   530c8:	mov	r3, #0
   530cc:	strd	r2, [sp, #64]	; 0x40
   530d0:	b	518ec <__assert_fail@plt+0x406e0>
   530d4:	mov	r2, #5
   530d8:	ldr	r1, [pc, #-2640]	; 52690 <__assert_fail@plt+0x41484>
   530dc:	mov	r0, #0
   530e0:	ldr	fp, [sp, #120]	; 0x78
   530e4:	bl	10f90 <dcgettext@plt>
   530e8:	ldr	r1, [sp, #136]	; 0x88
   530ec:	bl	54dd0 <warn@@Base>
   530f0:	b	51f78 <__assert_fail@plt+0x40d6c>
   530f4:	ldr	r3, [sp, #148]	; 0x94
   530f8:	add	r7, r3, #12
   530fc:	cmp	r7, r5
   53100:	bcc	53204 <__assert_fail@plt+0x41ff8>
   53104:	cmp	r4, r5
   53108:	bcs	53124 <__assert_fail@plt+0x41f18>
   5310c:	ldr	r3, [sp, #176]	; 0xb0
   53110:	sub	r3, r3, #5
   53114:	cmp	r3, #7
   53118:	ldrls	r3, [sp, #176]	; 0xb0
   5311c:	subls	r1, r3, #4
   53120:	bls	53208 <__assert_fail@plt+0x41ffc>
   53124:	mov	r4, r7
   53128:	b	51820 <__assert_fail@plt+0x40614>
   5312c:	ldr	r1, [pc, #-2724]	; 52690 <__assert_fail@plt+0x41484>
   53130:	mov	r2, #5
   53134:	mov	r0, #0
   53138:	ldr	fp, [sp, #112]	; 0x70
   5313c:	bl	10f90 <dcgettext@plt>
   53140:	ldr	r1, [sp, #136]	; 0x88
   53144:	bl	54dd0 <warn@@Base>
   53148:	str	r4, [sp, #236]	; 0xec
   5314c:	str	r7, [sp, #240]	; 0xf0
   53150:	b	51db8 <__assert_fail@plt+0x40bac>
   53154:	mov	r1, #5
   53158:	sub	r3, r3, r2
   5315c:	str	r1, [sp]
   53160:	ldr	r2, [pc, #-2808]	; 52670 <__assert_fail@plt+0x41464>
   53164:	ldr	r1, [pc, #-2808]	; 52674 <__assert_fail@plt+0x41468>
   53168:	mov	r0, #0
   5316c:	bl	11200 <dcngettext@plt>
   53170:	ldr	ip, [sp, #80]	; 0x50
   53174:	ldr	r1, [sp, #236]	; 0xec
   53178:	ldr	r2, [ip, #32]
   5317c:	ldr	r3, [ip, #16]
   53180:	add	r3, r3, r2
   53184:	sub	r1, r3, r1
   53188:	ldr	r2, [ip, #8]
   5318c:	bl	54dd0 <warn@@Base>
   53190:	b	524e4 <__assert_fail@plt+0x412d8>
   53194:	mov	r2, #5
   53198:	ldr	r1, [pc, #-2856]	; 52678 <__assert_fail@plt+0x4146c>
   5319c:	mov	r0, #0
   531a0:	bl	10f90 <dcgettext@plt>
   531a4:	bl	10f24 <printf@plt>
   531a8:	b	51ba8 <__assert_fail@plt+0x4099c>
   531ac:	ldr	r0, [sp, #24]
   531b0:	mov	r1, #4
   531b4:	bl	4be48 <__assert_fail@plt+0x3ac3c>
   531b8:	str	r0, [sp, #216]	; 0xd8
   531bc:	b	51b80 <__assert_fail@plt+0x40974>
   531c0:	mov	r2, #5
   531c4:	ldr	r1, [pc, #-2896]	; 5267c <__assert_fail@plt+0x41470>
   531c8:	mov	r0, #0
   531cc:	bl	10f90 <dcgettext@plt>
   531d0:	bl	548ac <error@@Base>
   531d4:	ldr	r3, [pc, #-2908]	; 52680 <__assert_fail@plt+0x41474>
   531d8:	ldr	r3, [r3, #1440]	; 0x5a0
   531dc:	str	r3, [sp, #60]	; 0x3c
   531e0:	b	51b28 <__assert_fail@plt+0x4091c>
   531e4:	mov	r2, #5
   531e8:	ldr	r1, [pc, #-2924]	; 52684 <__assert_fail@plt+0x41478>
   531ec:	bl	10f90 <dcgettext@plt>
   531f0:	ldr	r3, [sp, #80]	; 0x50
   531f4:	ldr	r1, [r3, #8]
   531f8:	bl	54dd0 <warn@@Base>
   531fc:	mov	r0, r4
   53200:	b	51874 <__assert_fail@plt+0x40668>
   53204:	mov	r1, #8
   53208:	mov	r0, r4
   5320c:	ldr	r3, [r6]
   53210:	blx	r3
   53214:	mov	r4, r7
   53218:	b	517ec <__assert_fail@plt+0x405e0>
   5321c:	mov	r2, #5
   53220:	ldr	r1, [pc, #-2976]	; 52688 <__assert_fail@plt+0x4147c>
   53224:	mov	r0, #0
   53228:	bl	10f90 <dcgettext@plt>
   5322c:	ldr	r3, [r5, #48]	; 0x30
   53230:	ldr	r2, [sp, #80]	; 0x50
   53234:	mov	r1, #0
   53238:	ldr	r5, [r2, #8]
   5323c:	ldrd	r2, [r3]
   53240:	str	r1, [sp]
   53244:	mov	r4, r0
   53248:	ldr	r0, [pc, #-3012]	; 5268c <__assert_fail@plt+0x41480>
   5324c:	bl	3c744 <__assert_fail@plt+0x2b538>
   53250:	mov	r1, r5
   53254:	mov	r2, r0
   53258:	mov	r0, r4
   5325c:	bl	54dd0 <warn@@Base>
   53260:	b	51b6c <__assert_fail@plt+0x40960>
   53264:	mov	r2, #5
   53268:	ldr	r1, [pc, #-3040]	; 52690 <__assert_fail@plt+0x41484>
   5326c:	mov	r0, #0
   53270:	ldr	fp, [sp, #112]	; 0x70
   53274:	bl	10f90 <dcgettext@plt>
   53278:	ldr	r1, [sp, #136]	; 0x88
   5327c:	mov	r4, r9
   53280:	bl	54dd0 <warn@@Base>
   53284:	b	53148 <__assert_fail@plt+0x41f3c>
   53288:	mov	r2, #5
   5328c:	ldr	r1, [pc, #-3072]	; 52694 <__assert_fail@plt+0x41488>
   53290:	mov	r0, #0
   53294:	bl	10f90 <dcgettext@plt>
   53298:	ldr	r3, [sp, #80]	; 0x50
   5329c:	mov	r2, r8
   532a0:	ldr	r1, [r3, #8]
   532a4:	bl	54dd0 <warn@@Base>
   532a8:	mov	r0, #0
   532ac:	b	51874 <__assert_fail@plt+0x40668>
   532b0:	mov	r2, #5
   532b4:	ldr	r1, [pc, #-3108]	; 52698 <__assert_fail@plt+0x4148c>
   532b8:	mov	r0, #0
   532bc:	bl	10f90 <dcgettext@plt>
   532c0:	ldr	r3, [sp, #80]	; 0x50
   532c4:	mov	r2, r5
   532c8:	ldr	r1, [r3, #8]
   532cc:	bl	54dd0 <warn@@Base>
   532d0:	mov	r0, #0
   532d4:	b	51874 <__assert_fail@plt+0x40668>
   532d8:	mov	r1, #1
   532dc:	mov	r2, r1
   532e0:	b	51950 <__assert_fail@plt+0x40744>
   532e4:	mov	r1, #0
   532e8:	mov	r2, #1
   532ec:	b	51950 <__assert_fail@plt+0x40744>
   532f0:	mov	r0, r7
   532f4:	ldr	r3, [r6]
   532f8:	add	r7, r4, #4
   532fc:	blx	r3
   53300:	cmp	r5, r7
   53304:	bls	518b4 <__assert_fail@plt+0x406a8>
   53308:	b	51abc <__assert_fail@plt+0x408b0>
   5330c:	ldr	r3, [pc, #-3192]	; 5269c <__assert_fail@plt+0x41490>
   53310:	mov	r0, sl
   53314:	ldr	r3, [r3]
   53318:	blx	r3
   5331c:	cmp	r7, r8
   53320:	mov	r4, r0
   53324:	mov	r5, r1
   53328:	beq	52ae0 <__assert_fail@plt+0x418d4>
   5332c:	b	52970 <__assert_fail@plt+0x41764>
   53330:	add	sl, sp, #244	; 0xf4
   53334:	b	52080 <__assert_fail@plt+0x40e74>
   53338:	ldr	r3, [pc, #-3236]	; 5269c <__assert_fail@plt+0x41490>
   5333c:	mov	r0, r5
   53340:	add	r4, r4, #9
   53344:	ldr	r3, [r3]
   53348:	blx	r3
   5334c:	mov	r1, r0
   53350:	ldr	r0, [pc, #-3256]	; 526a0 <__assert_fail@plt+0x41494>
   53354:	bl	10f24 <printf@plt>
   53358:	cmp	r4, r8
   5335c:	bcc	52c3c <__assert_fail@plt+0x41a30>
   53360:	b	52d50 <__assert_fail@plt+0x41b44>
   53364:	mov	r2, #5
   53368:	ldr	r1, [pc, #-3276]	; 526a4 <__assert_fail@plt+0x41498>
   5336c:	mov	r0, #0
   53370:	ldr	fp, [sp, #112]	; 0x70
   53374:	bl	10f90 <dcgettext@plt>
   53378:	mov	r1, r6
   5337c:	bl	54dd0 <warn@@Base>
   53380:	str	r5, [sp, #236]	; 0xec
   53384:	str	r7, [sp, #240]	; 0xf0
   53388:	b	51db8 <__assert_fail@plt+0x40bac>
   5338c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53390:	mov	r4, r0
   53394:	sub	sp, sp, #44	; 0x2c
   53398:	ldr	r5, [r4, #16]
   5339c:	ldr	r3, [r4, #32]
   533a0:	str	r0, [sp, #28]
   533a4:	mov	r0, r1
   533a8:	add	fp, r5, r3
   533ac:	str	r2, [sp, #24]
   533b0:	str	r5, [sp, #8]
   533b4:	bl	50c6c <__assert_fail@plt+0x3fa60>
   533b8:	add	r1, r4, #12
   533bc:	add	r0, r4, #8
   533c0:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   533c4:	cmp	r5, fp
   533c8:	bcs	538dc <__assert_fail@plt+0x426d0>
   533cc:	ldr	sl, [pc, #1376]	; 53934 <__assert_fail@plt+0x42728>
   533d0:	b	53538 <__assert_fail@plt+0x4232c>
   533d4:	sub	r1, fp, r3
   533d8:	sub	r3, r1, #1
   533dc:	cmp	r3, #7
   533e0:	movhi	r5, #4
   533e4:	movhi	r6, r5
   533e8:	bls	5354c <__assert_fail@plt+0x42340>
   533ec:	ldr	r3, [sp, #28]
   533f0:	mov	r2, #0
   533f4:	mov	r1, #0
   533f8:	ldr	r4, [r3, #16]
   533fc:	mov	r3, #0
   53400:	sub	r4, r7, r4
   53404:	mov	r0, r4
   53408:	strd	r2, [sp, #16]
   5340c:	ldr	r3, [sp, #28]
   53410:	ldrd	r2, [r3, #32]
   53414:	cmp	r3, r1
   53418:	cmpeq	r2, r0
   5341c:	bcc	53894 <__assert_fail@plt+0x42688>
   53420:	ldr	r3, [sp, #16]
   53424:	add	r5, r7, #2
   53428:	add	r3, r7, r3
   5342c:	cmp	r5, fp
   53430:	str	r3, [sp, #8]
   53434:	bcc	535c0 <__assert_fail@plt+0x423b4>
   53438:	cmp	fp, r7
   5343c:	bls	53450 <__assert_fail@plt+0x42244>
   53440:	sub	r1, fp, r7
   53444:	sub	r3, r1, #1
   53448:	cmp	r3, #7
   5344c:	bls	53904 <__assert_fail@plt+0x426f8>
   53450:	add	r9, r5, r6
   53454:	cmp	fp, r9
   53458:	bls	537f0 <__assert_fail@plt+0x425e4>
   5345c:	ldr	r7, [pc, #1236]	; 53938 <__assert_fail@plt+0x4272c>
   53460:	mov	r4, #0
   53464:	mov	r1, r6
   53468:	mov	r0, r5
   5346c:	ldr	r3, [sl]
   53470:	blx	r3
   53474:	mov	r8, r0
   53478:	ldr	r3, [pc, #1212]	; 5393c <__assert_fail@plt+0x42730>
   5347c:	ldr	ip, [r3, #1488]	; 0x5d0
   53480:	sub	r3, ip, #1
   53484:	cmn	r3, #3
   53488:	bls	5378c <__assert_fail@plt+0x42580>
   5348c:	add	r5, r9, r6
   53490:	cmp	r5, fp
   53494:	bcc	535a8 <__assert_fail@plt+0x4239c>
   53498:	cmp	fp, r9
   5349c:	bls	534b0 <__assert_fail@plt+0x422a4>
   534a0:	sub	r1, fp, r9
   534a4:	sub	r3, r1, #1
   534a8:	cmp	r3, #7
   534ac:	bls	535ac <__assert_fail@plt+0x423a0>
   534b0:	mov	r9, #0
   534b4:	mov	r2, #5
   534b8:	ldr	r1, [pc, #1152]	; 53940 <__assert_fail@plt+0x42734>
   534bc:	mov	r0, #0
   534c0:	bl	10f90 <dcgettext@plt>
   534c4:	ldr	r1, [sp, #16]
   534c8:	bl	10f24 <printf@plt>
   534cc:	mov	r2, #5
   534d0:	ldr	r1, [pc, #1132]	; 53944 <__assert_fail@plt+0x42738>
   534d4:	mov	r0, #0
   534d8:	bl	10f90 <dcgettext@plt>
   534dc:	mov	r1, r4
   534e0:	bl	10f24 <printf@plt>
   534e4:	mov	r2, #5
   534e8:	ldr	r1, [pc, #1112]	; 53948 <__assert_fail@plt+0x4273c>
   534ec:	mov	r0, #0
   534f0:	bl	10f90 <dcgettext@plt>
   534f4:	mov	r1, r8
   534f8:	bl	10f24 <printf@plt>
   534fc:	mov	r2, #5
   53500:	ldr	r1, [pc, #1092]	; 5394c <__assert_fail@plt+0x42740>
   53504:	mov	r0, #0
   53508:	bl	10f90 <dcgettext@plt>
   5350c:	mov	r1, r9
   53510:	bl	10f24 <printf@plt>
   53514:	cmp	r7, #1
   53518:	bls	53604 <__assert_fail@plt+0x423f8>
   5351c:	ldr	r3, [pc, #1048]	; 5393c <__assert_fail@plt+0x42730>
   53520:	ldr	r0, [r3, #1832]	; 0x728
   53524:	cmp	r0, #0
   53528:	beq	53810 <__assert_fail@plt+0x42604>
   5352c:	ldr	r3, [sp, #8]
   53530:	cmp	fp, r3
   53534:	bls	538dc <__assert_fail@plt+0x426d0>
   53538:	ldr	r3, [sp, #8]
   5353c:	add	r7, r3, #4
   53540:	cmp	r7, fp
   53544:	bcs	533d4 <__assert_fail@plt+0x421c8>
   53548:	mov	r1, #4
   5354c:	ldr	r4, [sp, #8]
   53550:	ldr	r3, [sl]
   53554:	mov	r0, r4
   53558:	blx	r3
   5355c:	mov	r3, #0
   53560:	mvn	r2, #0
   53564:	cmp	r1, r3
   53568:	cmpeq	r0, r2
   5356c:	strd	r0, [sp, #16]
   53570:	bne	538f0 <__assert_fail@plt+0x426e4>
   53574:	add	r3, r4, #12
   53578:	cmp	r3, fp
   5357c:	bcc	53830 <__assert_fail@plt+0x42624>
   53580:	cmp	r7, fp
   53584:	bcs	53598 <__assert_fail@plt+0x4238c>
   53588:	sub	r1, fp, r7
   5358c:	sub	r2, r1, #1
   53590:	cmp	r2, #7
   53594:	bls	53834 <__assert_fail@plt+0x42628>
   53598:	mov	r7, r3
   5359c:	mov	r5, #12
   535a0:	mov	r6, #8
   535a4:	b	533ec <__assert_fail@plt+0x421e0>
   535a8:	mov	r1, r6
   535ac:	mov	r0, r9
   535b0:	ldr	r3, [sl]
   535b4:	blx	r3
   535b8:	mov	r9, r0
   535bc:	b	534b4 <__assert_fail@plt+0x422a8>
   535c0:	mov	r0, r7
   535c4:	ldr	r3, [sl]
   535c8:	mov	r1, #2
   535cc:	blx	r3
   535d0:	add	r9, r5, r6
   535d4:	cmp	fp, r9
   535d8:	uxth	r4, r0
   535dc:	bhi	53804 <__assert_fail@plt+0x425f8>
   535e0:	sub	r1, fp, r5
   535e4:	sub	r3, r1, #1
   535e8:	cmp	r3, #7
   535ec:	sub	r7, r4, #2
   535f0:	movhi	r8, #0
   535f4:	uxth	r7, r7
   535f8:	movhi	r0, r8
   535fc:	bhi	53478 <__assert_fail@plt+0x4226c>
   53600:	b	53468 <__assert_fail@plt+0x4225c>
   53604:	ldr	r3, [sp, #24]
   53608:	mov	r2, #5
   5360c:	cmp	r3, #0
   53610:	movne	r0, #0
   53614:	ldrne	r1, [pc, #820]	; 53950 <__assert_fail@plt+0x42744>
   53618:	ldreq	r1, [pc, #820]	; 53954 <__assert_fail@plt+0x42748>
   5361c:	ldreq	r0, [sp, #24]
   53620:	bl	10f90 <dcgettext@plt>
   53624:	ldr	r9, [pc, #812]	; 53958 <__assert_fail@plt+0x4274c>
   53628:	bl	10f24 <printf@plt>
   5362c:	mov	r0, r5
   53630:	add	r7, r0, r6
   53634:	cmp	r7, fp
   53638:	bcc	53664 <__assert_fail@plt+0x42458>
   5363c:	cmp	r0, fp
   53640:	mov	r5, r0
   53644:	bcs	5352c <__assert_fail@plt+0x42320>
   53648:	sub	r1, fp, r0
   5364c:	sub	r3, r1, #1
   53650:	cmp	r3, #7
   53654:	bhi	5352c <__assert_fail@plt+0x42320>
   53658:	ldr	r3, [sl]
   5365c:	blx	r3
   53660:	b	5352c <__assert_fail@plt+0x42320>
   53664:	ldr	r3, [sl]
   53668:	mov	r1, r6
   5366c:	blx	r3
   53670:	orrs	r3, r0, r1
   53674:	mov	r8, r0
   53678:	moveq	r0, #1
   5367c:	movne	r0, #0
   53680:	beq	5352c <__assert_fail@plt+0x42320>
   53684:	ldr	r3, [sp, #24]
   53688:	sub	r1, fp, r7
   5368c:	cmp	r3, #0
   53690:	beq	5376c <__assert_fail@plt+0x42560>
   53694:	add	r4, r7, #1
   53698:	cmp	r4, fp
   5369c:	sub	r5, r1, #2
   536a0:	bcc	5370c <__assert_fail@plt+0x42500>
   536a4:	sub	r3, r1, #1
   536a8:	cmp	r3, #7
   536ac:	bls	53710 <__assert_fail@plt+0x42504>
   536b0:	mov	r2, #5
   536b4:	ldr	r1, [pc, #672]	; 5395c <__assert_fail@plt+0x42750>
   536b8:	bl	10f90 <dcgettext@plt>
   536bc:	mov	r7, r0
   536c0:	mov	r2, #5
   536c4:	ldr	r1, [pc, #660]	; 53960 <__assert_fail@plt+0x42754>
   536c8:	mov	r0, #0
   536cc:	bl	10f90 <dcgettext@plt>
   536d0:	mov	r2, r0
   536d4:	str	r4, [sp, #4]
   536d8:	str	r5, [sp]
   536dc:	mov	r3, r7
   536e0:	mov	r1, r8
   536e4:	mov	r0, r9
   536e8:	bl	10f24 <printf@plt>
   536ec:	mov	r1, r5
   536f0:	mov	r0, r4
   536f4:	bl	11104 <strnlen@plt>
   536f8:	add	r0, r0, #1
   536fc:	add	r0, r4, r0
   53700:	cmp	fp, r0
   53704:	bhi	53630 <__assert_fail@plt+0x42424>
   53708:	b	5352c <__assert_fail@plt+0x42320>
   5370c:	ldr	r1, [sp, #24]
   53710:	mov	r0, r7
   53714:	ldr	r3, [sl]
   53718:	blx	r3
   5371c:	mov	r2, #5
   53720:	lsl	r3, r0, #24
   53724:	str	r3, [sp, #16]
   53728:	lsr	r1, r3, #26
   5372c:	ldr	r3, [pc, #560]	; 53964 <__assert_fail@plt+0x42758>
   53730:	and	r1, r1, #28
   53734:	add	r1, r3, r1
   53738:	mov	r0, #0
   5373c:	ldr	r1, [r1, #1056]	; 0x420
   53740:	bl	10f90 <dcgettext@plt>
   53744:	ldr	r3, [sp, #16]
   53748:	cmp	r3, #0
   5374c:	mov	r7, r0
   53750:	bge	536c0 <__assert_fail@plt+0x424b4>
   53754:	mov	r2, #5
   53758:	ldr	r1, [pc, #520]	; 53968 <__assert_fail@plt+0x4275c>
   5375c:	mov	r0, #0
   53760:	bl	10f90 <dcgettext@plt>
   53764:	mov	r2, r0
   53768:	b	536d4 <__assert_fail@plt+0x424c8>
   5376c:	sub	r5, r1, #1
   53770:	mov	r2, r5
   53774:	mov	r1, r8
   53778:	mov	r3, r7
   5377c:	ldr	r0, [pc, #488]	; 5396c <__assert_fail@plt+0x42760>
   53780:	bl	10f24 <printf@plt>
   53784:	mov	r4, r7
   53788:	b	536ec <__assert_fail@plt+0x424e0>
   5378c:	ldr	r2, [pc, #424]	; 5393c <__assert_fail@plt+0x42730>
   53790:	mov	r3, #0
   53794:	str	r0, [sp, #32]
   53798:	str	r3, [sp, #36]	; 0x24
   5379c:	mov	lr, r4
   537a0:	ldr	r2, [r2, #1440]	; 0x5a0
   537a4:	ldrd	r4, [sp, #32]
   537a8:	ldrd	r0, [r2, #16]
   537ac:	add	r3, r3, #1
   537b0:	add	r2, r2, #88	; 0x58
   537b4:	cmp	r1, r5
   537b8:	cmpeq	r0, r4
   537bc:	beq	538fc <__assert_fail@plt+0x426f0>
   537c0:	cmp	ip, r3
   537c4:	bne	537a8 <__assert_fail@plt+0x4259c>
   537c8:	mov	r2, #5
   537cc:	ldr	r1, [pc, #412]	; 53970 <__assert_fail@plt+0x42764>
   537d0:	mov	r0, #0
   537d4:	mov	r4, lr
   537d8:	bl	10f90 <dcgettext@plt>
   537dc:	ldr	r3, [sp, #28]
   537e0:	mov	r1, r8
   537e4:	ldr	r2, [r3, #8]
   537e8:	bl	54dd0 <warn@@Base>
   537ec:	b	5348c <__assert_fail@plt+0x42280>
   537f0:	mov	r4, #0
   537f4:	mov	r8, r4
   537f8:	mov	r0, r4
   537fc:	ldr	r7, [pc, #308]	; 53938 <__assert_fail@plt+0x4272c>
   53800:	b	53478 <__assert_fail@plt+0x4226c>
   53804:	sub	r7, r4, #2
   53808:	uxth	r7, r7
   5380c:	b	53464 <__assert_fail@plt+0x42258>
   53810:	mov	r2, #5
   53814:	ldr	r1, [pc, #344]	; 53974 <__assert_fail@plt+0x42768>
   53818:	bl	10f90 <dcgettext@plt>
   5381c:	bl	54dd0 <warn@@Base>
   53820:	ldr	r2, [pc, #276]	; 5393c <__assert_fail@plt+0x42730>
   53824:	mov	r3, #1
   53828:	str	r3, [r2, #1832]	; 0x728
   5382c:	b	5352c <__assert_fail@plt+0x42320>
   53830:	mov	r1, #8
   53834:	mov	r0, r7
   53838:	ldr	r2, [sl]
   5383c:	mov	r7, r3
   53840:	blx	r2
   53844:	mov	r5, #12
   53848:	mov	r6, #8
   5384c:	strd	r0, [sp, #16]
   53850:	ldr	r3, [sp, #28]
   53854:	ldrd	r8, [sp, #16]
   53858:	mov	r2, #0
   5385c:	ldr	r4, [r3, #16]
   53860:	mov	r3, #0
   53864:	sub	r4, r7, r4
   53868:	strd	r2, [sp, #8]
   5386c:	adds	r0, r4, r8
   53870:	mov	r3, #0
   53874:	adcs	r1, r3, r9
   53878:	mov	r2, r4
   5387c:	movcs	r3, #0
   53880:	movcs	r2, #1
   53884:	strdcs	r2, [sp, #8]
   53888:	ldrd	r2, [sp, #8]
   5388c:	orrs	r3, r2, r3
   53890:	beq	5340c <__assert_fail@plt+0x42200>
   53894:	mov	r2, #5
   53898:	ldr	r1, [pc, #216]	; 53978 <__assert_fail@plt+0x4276c>
   5389c:	mov	r0, #0
   538a0:	bl	10f90 <dcgettext@plt>
   538a4:	ldr	r3, [sp, #28]
   538a8:	mov	r1, #0
   538ac:	sub	r4, r4, r5
   538b0:	ldr	r5, [r3, #8]
   538b4:	ldrd	r2, [sp, #16]
   538b8:	str	r1, [sp]
   538bc:	mov	r6, r0
   538c0:	ldr	r0, [pc, #180]	; 5397c <__assert_fail@plt+0x42770>
   538c4:	bl	3c744 <__assert_fail@plt+0x2b538>
   538c8:	mov	r2, r4
   538cc:	mov	r1, r5
   538d0:	mov	r3, r0
   538d4:	mov	r0, r6
   538d8:	bl	54dd0 <warn@@Base>
   538dc:	mov	r0, #10
   538e0:	bl	110c8 <putchar@plt>
   538e4:	mov	r0, #1
   538e8:	add	sp, sp, #44	; 0x2c
   538ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   538f0:	mov	r5, #4
   538f4:	mov	r6, r5
   538f8:	b	53850 <__assert_fail@plt+0x42644>
   538fc:	mov	r4, lr
   53900:	b	5348c <__assert_fail@plt+0x42280>
   53904:	mov	r0, r7
   53908:	ldr	r3, [sl]
   5390c:	blx	r3
   53910:	add	r9, r5, r6
   53914:	cmp	fp, r9
   53918:	uxth	r4, r0
   5391c:	bhi	53804 <__assert_fail@plt+0x425f8>
   53920:	sub	r7, r4, #2
   53924:	mov	r8, #0
   53928:	uxth	r7, r7
   5392c:	mov	r0, r8
   53930:	b	53478 <__assert_fail@plt+0x4226c>
   53934:	andeq	lr, r9, ip, asr sp
   53938:	strdeq	pc, [r0], -lr
   5393c:	ldrdeq	ip, [r9], -r0
   53940:	andeq	r3, r8, r8, lsr #8
   53944:	andeq	r3, r8, r4, asr r4
   53948:	andeq	r3, r8, r0, lsl #9
   5394c:			; <UNDEFINED> instruction: 0x000834b0
   53950:	andeq	r3, r8, r4, lsl r5
   53954:	andeq	r3, r8, r8, lsr r5
   53958:	andeq	r3, r8, ip, asr #10
   5395c:	andeq	r3, r8, r8, ror r5
   53960:	strdeq	r9, [r6], -r4
   53964:			; <UNDEFINED> instruction: 0x0007d2bc
   53968:	andeq	pc, r7, r4, lsl #8
   5396c:	andeq	r3, r8, r8, ror #10
   53970:	andeq	r3, r8, r0, lsl #11
   53974:	ldrdeq	r3, [r8], -ip
   53978:	andeq	r0, r8, r0, asr #21
   5397c:	andeq	r9, r6, r0, lsr #15
   53980:	mov	r2, #1
   53984:	b	5338c <__assert_fail@plt+0x42180>
   53988:	mov	r2, #0
   5398c:	b	5338c <__assert_fail@plt+0x42180>
   53990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53994:	sub	sp, sp, #52	; 0x34
   53998:	ldr	ip, [r0, #16]
   5399c:	ldr	r3, [r0, #32]
   539a0:	str	r0, [sp, #36]	; 0x24
   539a4:	mov	r4, r1
   539a8:	add	r1, r0, #12
   539ac:	add	r0, r0, #8
   539b0:	mov	r5, ip
   539b4:	add	sl, ip, r3
   539b8:	str	ip, [sp, #32]
   539bc:	bl	3e3d4 <__assert_fail@plt+0x2d1c8>
   539c0:	mov	r0, r4
   539c4:	bl	50c6c <__assert_fail@plt+0x3fa60>
   539c8:	cmp	r5, sl
   539cc:	bcs	53cf8 <__assert_fail@plt+0x42aec>
   539d0:	ldr	fp, [pc, #1540]	; 53fdc <__assert_fail@plt+0x42dd0>
   539d4:	ldr	r3, [sp, #32]
   539d8:	add	r4, r3, #4
   539dc:	cmp	r4, sl
   539e0:	bcc	53d0c <__assert_fail@plt+0x42b00>
   539e4:	sub	r1, sl, r3
   539e8:	sub	r3, r1, #1
   539ec:	cmp	r3, #7
   539f0:	movhi	r3, #4
   539f4:	strhi	r3, [sp, #20]
   539f8:	movhi	r6, r3
   539fc:	bls	53d10 <__assert_fail@plt+0x42b04>
   53a00:	ldr	r3, [sp, #36]	; 0x24
   53a04:	mov	r2, #0
   53a08:	mov	r1, #0
   53a0c:	ldr	r5, [r3, #16]
   53a10:	mov	r3, #0
   53a14:	sub	r5, r4, r5
   53a18:	mov	r0, r5
   53a1c:	strd	r2, [sp, #8]
   53a20:	ldr	r3, [sp, #36]	; 0x24
   53a24:	ldrd	r2, [r3, #32]
   53a28:	cmp	r3, r1
   53a2c:	cmpeq	r2, r0
   53a30:	bcc	53f20 <__assert_fail@plt+0x42d14>
   53a34:	add	r5, r4, #2
   53a38:	cmp	r5, sl
   53a3c:	bcc	53d70 <__assert_fail@plt+0x42b64>
   53a40:	cmp	sl, r4
   53a44:	bls	53a58 <__assert_fail@plt+0x4284c>
   53a48:	sub	r1, sl, r4
   53a4c:	sub	r3, r1, #1
   53a50:	cmp	r3, #7
   53a54:	bls	53fb0 <__assert_fail@plt+0x42da4>
   53a58:	add	r8, r5, r6
   53a5c:	cmp	sl, r8
   53a60:	bls	53e9c <__assert_fail@plt+0x42c90>
   53a64:	ldr	r9, [pc, #1396]	; 53fe0 <__assert_fail@plt+0x42dd4>
   53a68:	mov	r7, #0
   53a6c:	mov	r1, r6
   53a70:	mov	r0, r5
   53a74:	ldr	r3, [fp]
   53a78:	blx	r3
   53a7c:	mov	r6, r0
   53a80:	ldr	r3, [pc, #1372]	; 53fe4 <__assert_fail@plt+0x42dd8>
   53a84:	ldr	ip, [r3, #1488]	; 0x5d0
   53a88:	sub	r3, ip, #1
   53a8c:	cmn	r3, #3
   53a90:	bls	53e40 <__assert_fail@plt+0x42c34>
   53a94:	add	r4, r8, #1
   53a98:	cmp	r4, sl
   53a9c:	bcc	53db0 <__assert_fail@plt+0x42ba4>
   53aa0:	cmp	sl, r8
   53aa4:	bls	53ab8 <__assert_fail@plt+0x428ac>
   53aa8:	sub	r1, sl, r8
   53aac:	sub	r3, r1, #1
   53ab0:	cmp	r3, #7
   53ab4:	bls	53e0c <__assert_fail@plt+0x42c00>
   53ab8:	add	r8, r8, #2
   53abc:	cmp	sl, r8
   53ac0:	movhi	r1, #1
   53ac4:	movhi	r5, #0
   53ac8:	bhi	53e2c <__assert_fail@plt+0x42c20>
   53acc:	mov	r5, #0
   53ad0:	mov	r4, r5
   53ad4:	cmp	r9, #1
   53ad8:	bhi	53dec <__assert_fail@plt+0x42be0>
   53adc:	mov	r2, #5
   53ae0:	ldr	r1, [pc, #1280]	; 53fe8 <__assert_fail@plt+0x42ddc>
   53ae4:	mov	r0, #0
   53ae8:	bl	10f90 <dcgettext@plt>
   53aec:	ldr	r1, [sp, #8]
   53af0:	bl	10f24 <printf@plt>
   53af4:	mov	r2, #5
   53af8:	ldr	r1, [pc, #1260]	; 53fec <__assert_fail@plt+0x42de0>
   53afc:	mov	r0, #0
   53b00:	bl	10f90 <dcgettext@plt>
   53b04:	mov	r1, r7
   53b08:	bl	10f24 <printf@plt>
   53b0c:	mov	r2, #5
   53b10:	ldr	r1, [pc, #1240]	; 53ff0 <__assert_fail@plt+0x42de4>
   53b14:	mov	r0, #0
   53b18:	bl	10f90 <dcgettext@plt>
   53b1c:	mov	r1, r6
   53b20:	bl	10f24 <printf@plt>
   53b24:	mov	r2, #5
   53b28:	ldr	r1, [pc, #1220]	; 53ff4 <__assert_fail@plt+0x42de8>
   53b2c:	mov	r0, #0
   53b30:	bl	10f90 <dcgettext@plt>
   53b34:	mov	r1, r5
   53b38:	bl	10f24 <printf@plt>
   53b3c:	mov	r2, #5
   53b40:	ldr	r1, [pc, #1200]	; 53ff8 <__assert_fail@plt+0x42dec>
   53b44:	mov	r0, #0
   53b48:	bl	10f90 <dcgettext@plt>
   53b4c:	mov	r1, r4
   53b50:	add	r4, r4, r5
   53b54:	bl	10f24 <printf@plt>
   53b58:	uxtb	r4, r4
   53b5c:	sub	r0, r4, #1
   53b60:	mov	r2, #5
   53b64:	uxtb	r3, r0
   53b68:	cmp	r3, #7
   53b6c:	bhi	53f80 <__assert_fail@plt+0x42d74>
   53b70:	ands	r0, r0, r4
   53b74:	bne	53f9c <__assert_fail@plt+0x42d90>
   53b78:	cmp	r4, #4
   53b7c:	sxth	r7, r4
   53b80:	ldrhi	r1, [pc, #1140]	; 53ffc <__assert_fail@plt+0x42df0>
   53b84:	ldrls	r1, [pc, #1140]	; 54000 <__assert_fail@plt+0x42df4>
   53b88:	bl	10f90 <dcgettext@plt>
   53b8c:	bl	10f24 <printf@plt>
   53b90:	ldr	r3, [sp, #32]
   53b94:	sub	r0, r8, r3
   53b98:	lsl	r3, r7, #1
   53b9c:	mov	r1, r3
   53ba0:	mov	r5, r3
   53ba4:	str	r3, [sp, #24]
   53ba8:	bl	58b0c <warn@@Base+0x3d3c>
   53bac:	ldr	r2, [sp, #8]
   53bb0:	cmp	r1, #0
   53bb4:	movne	r3, r5
   53bb8:	subne	r1, r3, r1
   53bbc:	ldr	r3, [sp, #20]
   53bc0:	addne	r8, r8, r1
   53bc4:	add	r3, r3, r2
   53bc8:	ldr	r2, [sp, #32]
   53bcc:	add	r2, r2, r3
   53bd0:	ldr	r3, [sp, #24]
   53bd4:	str	r2, [sp, #32]
   53bd8:	add	r3, r8, r3
   53bdc:	cmp	r2, r3
   53be0:	lslcs	r7, r7, #1
   53be4:	addcs	r5, r8, r4
   53be8:	movcs	r9, r7
   53bec:	bcs	53c9c <__assert_fail@plt+0x42a90>
   53bf0:	b	53cec <__assert_fail@plt+0x42ae0>
   53bf4:	sub	r3, r5, r4
   53bf8:	cmp	sl, r3
   53bfc:	bls	53c10 <__assert_fail@plt+0x42a04>
   53c00:	sub	r1, sl, r8
   53c04:	sub	r3, r1, #1
   53c08:	cmp	r3, #7
   53c0c:	bls	53cac <__assert_fail@plt+0x42aa0>
   53c10:	mov	r8, #0
   53c14:	cmp	sl, r6
   53c18:	mov	r7, r8
   53c1c:	movls	r3, r8
   53c20:	strls	r8, [sp, #8]
   53c24:	bls	53c40 <__assert_fail@plt+0x42a34>
   53c28:	mov	r1, r4
   53c2c:	ldr	r3, [fp]
   53c30:	mov	r0, r5
   53c34:	blx	r3
   53c38:	mov	r3, r0
   53c3c:	str	r1, [sp, #8]
   53c40:	ldr	r0, [pc, #956]	; 54004 <__assert_fail@plt+0x42df8>
   53c44:	str	r3, [sp, #20]
   53c48:	bl	10f24 <printf@plt>
   53c4c:	mov	r0, r8
   53c50:	mov	r2, r4
   53c54:	mov	r1, r7
   53c58:	bl	3ca6c <__assert_fail@plt+0x2b860>
   53c5c:	ldr	r3, [sp, #20]
   53c60:	mov	r2, r4
   53c64:	mov	r0, r3
   53c68:	ldr	r1, [sp, #8]
   53c6c:	bl	3ca6c <__assert_fail@plt+0x2b860>
   53c70:	ldr	r3, [pc, #912]	; 54008 <__assert_fail@plt+0x42dfc>
   53c74:	mov	r0, #10
   53c78:	mov	r8, r6
   53c7c:	ldr	r1, [r3]
   53c80:	bl	11158 <putc@plt>
   53c84:	ldr	r3, [sp, #24]
   53c88:	ldr	r2, [sp, #32]
   53c8c:	add	r3, r6, r3
   53c90:	cmp	r2, r3
   53c94:	add	r5, r5, r9
   53c98:	bcc	53cec <__assert_fail@plt+0x42ae0>
   53c9c:	cmp	r5, sl
   53ca0:	add	r6, r8, r9
   53ca4:	bcs	53bf4 <__assert_fail@plt+0x429e8>
   53ca8:	mov	r1, r4
   53cac:	mov	r0, r8
   53cb0:	ldr	r3, [fp]
   53cb4:	blx	r3
   53cb8:	cmp	sl, r6
   53cbc:	mov	r8, r0
   53cc0:	mov	r7, r1
   53cc4:	bhi	53c28 <__assert_fail@plt+0x42a1c>
   53cc8:	cmp	r5, sl
   53ccc:	bcs	53ce0 <__assert_fail@plt+0x42ad4>
   53cd0:	sub	r1, sl, r5
   53cd4:	sub	r3, r1, #1
   53cd8:	cmp	r3, #7
   53cdc:	bls	53c2c <__assert_fail@plt+0x42a20>
   53ce0:	mov	r3, #0
   53ce4:	str	r3, [sp, #8]
   53ce8:	b	53c40 <__assert_fail@plt+0x42a34>
   53cec:	ldr	r3, [sp, #32]
   53cf0:	cmp	sl, r3
   53cf4:	bhi	539d4 <__assert_fail@plt+0x427c8>
   53cf8:	mov	r0, #10
   53cfc:	bl	110c8 <putchar@plt>
   53d00:	mov	r0, #1
   53d04:	add	sp, sp, #52	; 0x34
   53d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53d0c:	mov	r1, #4
   53d10:	ldr	r5, [sp, #32]
   53d14:	ldr	r3, [fp]
   53d18:	mov	r0, r5
   53d1c:	blx	r3
   53d20:	mov	r3, #0
   53d24:	mvn	r2, #0
   53d28:	cmp	r1, r3
   53d2c:	cmpeq	r0, r2
   53d30:	strd	r0, [sp, #8]
   53d34:	bne	53f70 <__assert_fail@plt+0x42d64>
   53d38:	add	r3, r5, #12
   53d3c:	cmp	r3, sl
   53d40:	bcc	53eb8 <__assert_fail@plt+0x42cac>
   53d44:	cmp	r4, sl
   53d48:	bcs	53d5c <__assert_fail@plt+0x42b50>
   53d4c:	sub	r1, sl, r4
   53d50:	sub	r2, r1, #1
   53d54:	cmp	r2, #7
   53d58:	bls	53ebc <__assert_fail@plt+0x42cb0>
   53d5c:	mov	r4, r3
   53d60:	mov	r3, #12
   53d64:	str	r3, [sp, #20]
   53d68:	mov	r6, #8
   53d6c:	b	53a00 <__assert_fail@plt+0x427f4>
   53d70:	mov	r0, r4
   53d74:	ldr	r3, [fp]
   53d78:	mov	r1, #2
   53d7c:	blx	r3
   53d80:	add	r8, r5, r6
   53d84:	cmp	r8, sl
   53d88:	uxth	r7, r0
   53d8c:	bcc	53eac <__assert_fail@plt+0x42ca0>
   53d90:	sub	r6, sl, r5
   53d94:	sub	r3, r6, #1
   53d98:	sub	r9, r7, #2
   53d9c:	cmp	r3, #7
   53da0:	uxth	r9, r9
   53da4:	movhi	r6, #0
   53da8:	bhi	53a80 <__assert_fail@plt+0x42874>
   53dac:	b	53a6c <__assert_fail@plt+0x42860>
   53db0:	mov	r0, r8
   53db4:	ldr	r3, [fp]
   53db8:	mov	r1, #1
   53dbc:	blx	r3
   53dc0:	add	r8, r8, #2
   53dc4:	cmp	r8, sl
   53dc8:	uxtb	r5, r0
   53dcc:	bcc	53e28 <__assert_fail@plt+0x42c1c>
   53dd0:	sub	r1, sl, r4
   53dd4:	sub	r3, r1, #1
   53dd8:	cmp	r3, #7
   53ddc:	bls	53e2c <__assert_fail@plt+0x42c20>
   53de0:	cmp	r9, #1
   53de4:	mov	r4, #0
   53de8:	bls	53adc <__assert_fail@plt+0x428d0>
   53dec:	cmp	r7, #0
   53df0:	beq	53cf8 <__assert_fail@plt+0x42aec>
   53df4:	mov	r2, #5
   53df8:	ldr	r1, [pc, #524]	; 5400c <__assert_fail@plt+0x42e00>
   53dfc:	mov	r0, #0
   53e00:	bl	10f90 <dcgettext@plt>
   53e04:	bl	54dd0 <warn@@Base>
   53e08:	b	53cf8 <__assert_fail@plt+0x42aec>
   53e0c:	mov	r0, r8
   53e10:	ldr	r3, [fp]
   53e14:	blx	r3
   53e18:	add	r8, r8, #2
   53e1c:	cmp	r8, sl
   53e20:	uxtb	r5, r0
   53e24:	bcs	53de0 <__assert_fail@plt+0x42bd4>
   53e28:	mov	r1, #1
   53e2c:	mov	r0, r4
   53e30:	ldr	r3, [fp]
   53e34:	blx	r3
   53e38:	uxtb	r4, r0
   53e3c:	b	53ad4 <__assert_fail@plt+0x428c8>
   53e40:	ldr	r2, [pc, #412]	; 53fe4 <__assert_fail@plt+0x42dd8>
   53e44:	mov	r3, #0
   53e48:	str	r6, [sp, #40]	; 0x28
   53e4c:	str	r3, [sp, #44]	; 0x2c
   53e50:	ldr	r2, [r2, #1440]	; 0x5a0
   53e54:	ldrd	r4, [sp, #40]	; 0x28
   53e58:	ldrd	r0, [r2, #16]
   53e5c:	add	r3, r3, #1
   53e60:	add	r2, r2, #88	; 0x58
   53e64:	cmp	r1, r5
   53e68:	cmpeq	r0, r4
   53e6c:	beq	53a94 <__assert_fail@plt+0x42888>
   53e70:	cmp	ip, r3
   53e74:	bne	53e58 <__assert_fail@plt+0x42c4c>
   53e78:	mov	r2, #5
   53e7c:	ldr	r1, [pc, #396]	; 54010 <__assert_fail@plt+0x42e04>
   53e80:	mov	r0, #0
   53e84:	bl	10f90 <dcgettext@plt>
   53e88:	ldr	r3, [sp, #36]	; 0x24
   53e8c:	mov	r1, r6
   53e90:	ldr	r2, [r3, #8]
   53e94:	bl	54dd0 <warn@@Base>
   53e98:	b	53a94 <__assert_fail@plt+0x42888>
   53e9c:	mov	r7, #0
   53ea0:	mov	r6, r7
   53ea4:	ldr	r9, [pc, #308]	; 53fe0 <__assert_fail@plt+0x42dd4>
   53ea8:	b	53a80 <__assert_fail@plt+0x42874>
   53eac:	sub	r9, r7, #2
   53eb0:	uxth	r9, r9
   53eb4:	b	53a6c <__assert_fail@plt+0x42860>
   53eb8:	mov	r1, #8
   53ebc:	mov	r0, r4
   53ec0:	ldr	r2, [fp]
   53ec4:	mov	r4, r3
   53ec8:	blx	r2
   53ecc:	mov	r6, #8
   53ed0:	mov	r3, #12
   53ed4:	str	r3, [sp, #20]
   53ed8:	strd	r0, [sp, #8]
   53edc:	ldr	r3, [sp, #36]	; 0x24
   53ee0:	ldrd	r8, [sp, #8]
   53ee4:	mov	r2, #0
   53ee8:	ldr	r5, [r3, #16]
   53eec:	mov	r3, #0
   53ef0:	sub	r5, r4, r5
   53ef4:	strd	r2, [sp, #24]
   53ef8:	adds	r0, r5, r8
   53efc:	mov	r3, #0
   53f00:	adcs	r1, r3, r9
   53f04:	mov	r2, r5
   53f08:	movcs	r3, #0
   53f0c:	movcs	r2, #1
   53f10:	strdcs	r2, [sp, #24]
   53f14:	ldrd	r2, [sp, #24]
   53f18:	orrs	r3, r2, r3
   53f1c:	beq	53a20 <__assert_fail@plt+0x42814>
   53f20:	mov	r2, #5
   53f24:	ldr	r1, [pc, #232]	; 54014 <__assert_fail@plt+0x42e08>
   53f28:	mov	r0, #0
   53f2c:	bl	10f90 <dcgettext@plt>
   53f30:	ldr	r3, [sp, #20]
   53f34:	mov	r1, #0
   53f38:	sub	r5, r5, r3
   53f3c:	ldr	r3, [sp, #36]	; 0x24
   53f40:	ldr	r6, [r3, #8]
   53f44:	ldrd	r2, [sp, #8]
   53f48:	str	r1, [sp]
   53f4c:	mov	r4, r0
   53f50:	ldr	r0, [pc, #192]	; 54018 <__assert_fail@plt+0x42e0c>
   53f54:	bl	3c744 <__assert_fail@plt+0x2b538>
   53f58:	mov	r2, r5
   53f5c:	mov	r1, r6
   53f60:	mov	r3, r0
   53f64:	mov	r0, r4
   53f68:	bl	54dd0 <warn@@Base>
   53f6c:	b	53cf8 <__assert_fail@plt+0x42aec>
   53f70:	mov	r3, #4
   53f74:	str	r3, [sp, #20]
   53f78:	mov	r6, r3
   53f7c:	b	53edc <__assert_fail@plt+0x42cd0>
   53f80:	ldr	r1, [pc, #148]	; 5401c <__assert_fail@plt+0x42e10>
   53f84:	mov	r0, #0
   53f88:	bl	10f90 <dcgettext@plt>
   53f8c:	ldr	r3, [sp, #36]	; 0x24
   53f90:	ldr	r1, [r3, #8]
   53f94:	bl	548ac <error@@Base>
   53f98:	b	53cf8 <__assert_fail@plt+0x42aec>
   53f9c:	ldr	r1, [pc, #124]	; 54020 <__assert_fail@plt+0x42e14>
   53fa0:	mov	r0, #0
   53fa4:	bl	10f90 <dcgettext@plt>
   53fa8:	bl	54dd0 <warn@@Base>
   53fac:	b	53cf8 <__assert_fail@plt+0x42aec>
   53fb0:	mov	r0, r4
   53fb4:	ldr	r3, [fp]
   53fb8:	blx	r3
   53fbc:	add	r8, r5, r6
   53fc0:	cmp	r8, sl
   53fc4:	uxth	r7, r0
   53fc8:	bcc	53eac <__assert_fail@plt+0x42ca0>
   53fcc:	sub	r9, r7, #2
   53fd0:	mov	r6, #0
   53fd4:	uxth	r9, r9
   53fd8:	b	53a80 <__assert_fail@plt+0x42874>
   53fdc:	andeq	lr, r9, ip, asr sp
   53fe0:	strdeq	pc, [r0], -lr
   53fe4:	ldrdeq	ip, [r9], -r0
   53fe8:	andeq	r3, r8, r4, lsl #12
   53fec:	andeq	r3, r8, r8, lsr #12
   53ff0:	andeq	r3, r8, r8, asr #12
   53ff4:	andeq	r3, r8, ip, ror #12
   53ff8:	andeq	r3, r8, ip, lsl #13
   53ffc:	andeq	r3, r8, r8, lsl #14
   54000:	andeq	r3, r8, r8, lsr #14
   54004:	andeq	r8, r6, r4, asr #26
   54008:	andeq	sl, r9, ip, lsr #8
   5400c:	andeq	r3, r8, ip, asr #11
   54010:	andeq	r3, r8, r0, lsl #11
   54014:	andeq	r0, r8, r0, asr #21
   54018:	andeq	r9, r6, r0, lsr #15
   5401c:	andeq	r3, r8, ip, lsr #13
   54020:	ldrdeq	r3, [r8], -r4
   54024:	mov	r1, #1
   54028:	b	4fbe0 <__assert_fail@plt+0x3e9d4>
   5402c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   54030:	sub	sp, sp, #16
   54034:	ldr	r5, [pc, #640]	; 542bc <__assert_fail@plt+0x430b0>
   54038:	ldr	r6, [pc, #640]	; 542c0 <__assert_fail@plt+0x430b4>
   5403c:	ldr	r2, [r5]
   54040:	ldr	r3, [r6]
   54044:	orrs	r3, r2, r3
   54048:	beq	540fc <__assert_fail@plt+0x42ef0>
   5404c:	mov	r7, r1
   54050:	mov	r4, r0
   54054:	mov	r1, r0
   54058:	mov	r0, #10
   5405c:	bl	3580c <__assert_fail@plt+0x24600>
   54060:	cmp	r0, #0
   54064:	bne	5410c <__assert_fail@plt+0x42f00>
   54068:	ldr	r3, [r5]
   5406c:	cmp	r3, #0
   54070:	beq	540fc <__assert_fail@plt+0x42ef0>
   54074:	mov	r1, r4
   54078:	mov	r0, #41	; 0x29
   5407c:	bl	3580c <__assert_fail@plt+0x24600>
   54080:	cmp	r0, #0
   54084:	bne	540d0 <__assert_fail@plt+0x42ec4>
   54088:	mov	r1, r4
   5408c:	mov	r0, #40	; 0x28
   54090:	bl	3580c <__assert_fail@plt+0x24600>
   54094:	cmp	r0, #0
   54098:	moveq	r4, r0
   5409c:	streq	r0, [r5]
   540a0:	beq	540f0 <__assert_fail@plt+0x42ee4>
   540a4:	add	r3, sp, #12
   540a8:	str	r3, [sp]
   540ac:	mov	r0, r7
   540b0:	ldr	r3, [pc, #524]	; 542c4 <__assert_fail@plt+0x430b8>
   540b4:	ldr	r2, [pc, #524]	; 542c8 <__assert_fail@plt+0x430bc>
   540b8:	ldr	r1, [pc, #524]	; 542cc <__assert_fail@plt+0x430c0>
   540bc:	bl	3cd7c <__assert_fail@plt+0x2bb70>
   540c0:	mov	r4, r0
   540c4:	mov	r0, r4
   540c8:	add	sp, sp, #16
   540cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   540d0:	add	r3, sp, #12
   540d4:	str	r3, [sp]
   540d8:	mov	r0, r7
   540dc:	ldr	r3, [pc, #492]	; 542d0 <__assert_fail@plt+0x430c4>
   540e0:	ldr	r2, [pc, #492]	; 542d4 <__assert_fail@plt+0x430c8>
   540e4:	ldr	r1, [pc, #492]	; 542d8 <__assert_fail@plt+0x430cc>
   540e8:	bl	3cd7c <__assert_fail@plt+0x2bb70>
   540ec:	mov	r4, r0
   540f0:	mov	r0, r4
   540f4:	add	sp, sp, #16
   540f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   540fc:	mov	r4, #0
   54100:	mov	r0, r4
   54104:	add	sp, sp, #16
   54108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   5410c:	mov	r1, r4
   54110:	mov	r0, #0
   54114:	bl	3580c <__assert_fail@plt+0x24600>
   54118:	cmp	r0, #0
   5411c:	beq	54068 <__assert_fail@plt+0x42e5c>
   54120:	mov	r1, r4
   54124:	mov	r0, #3
   54128:	bl	3580c <__assert_fail@plt+0x24600>
   5412c:	cmp	r0, #0
   54130:	beq	54068 <__assert_fail@plt+0x42e5c>
   54134:	ldr	r9, [pc, #416]	; 542dc <__assert_fail@plt+0x430d0>
   54138:	ldr	sl, [pc, #416]	; 542e0 <__assert_fail@plt+0x430d4>
   5413c:	mov	r8, #0
   54140:	str	r8, [sp]
   54144:	mov	r2, r8
   54148:	add	r0, sl, #216	; 0xd8
   5414c:	mov	r3, #1
   54150:	mov	r1, r4
   54154:	str	r8, [r9, #1508]	; 0x5e4
   54158:	str	r8, [r9, #1504]	; 0x5e0
   5415c:	str	r8, [r9, #1512]	; 0x5e8
   54160:	str	r8, [r9, #1516]	; 0x5ec
   54164:	bl	453fc <__assert_fail@plt+0x341f0>
   54168:	cmp	r0, r8
   5416c:	beq	54068 <__assert_fail@plt+0x42e5c>
   54170:	ldr	r3, [r9, #1504]	; 0x5e0
   54174:	cmp	r3, r8
   54178:	beq	54068 <__assert_fail@plt+0x42e5c>
   5417c:	ldr	r3, [r6]
   54180:	cmp	r3, r8
   54184:	bne	541e8 <__assert_fail@plt+0x42fdc>
   54188:	ldr	r3, [r5]
   5418c:	cmp	r3, #0
   54190:	beq	540fc <__assert_fail@plt+0x42ef0>
   54194:	ldr	r2, [r9, #1504]	; 0x5e0
   54198:	mov	r3, #0
   5419c:	ldr	r1, [pc, #320]	; 542e4 <__assert_fail@plt+0x430d8>
   541a0:	ldr	r0, [r9, #1508]	; 0x5e4
   541a4:	bl	56364 <warn@@Base+0x1594>
   541a8:	mov	r5, r0
   541ac:	bl	3ac20 <__assert_fail@plt+0x29a14>
   541b0:	mov	r2, #5
   541b4:	cmp	r0, #0
   541b8:	mov	r4, r0
   541bc:	str	r0, [r9, #1116]	; 0x45c
   541c0:	beq	542a0 <__assert_fail@plt+0x43094>
   541c4:	ldr	r1, [pc, #284]	; 542e8 <__assert_fail@plt+0x430dc>
   541c8:	mov	r0, #0
   541cc:	bl	10f90 <dcgettext@plt>
   541d0:	mov	r2, r5
   541d4:	mov	r1, r7
   541d8:	bl	10f24 <printf@plt>
   541dc:	str	r5, [r9, #1120]	; 0x460
   541e0:	ldr	r4, [r9, #1116]	; 0x45c
   541e4:	b	540f0 <__assert_fail@plt+0x42ee4>
   541e8:	mov	r2, #5
   541ec:	ldr	r1, [pc, #248]	; 542ec <__assert_fail@plt+0x430e0>
   541f0:	mov	r0, r8
   541f4:	bl	10f90 <dcgettext@plt>
   541f8:	ldr	r1, [sl, #216]	; 0xd8
   541fc:	bl	10f24 <printf@plt>
   54200:	mov	r2, #5
   54204:	ldr	r1, [pc, #228]	; 542f0 <__assert_fail@plt+0x430e4>
   54208:	mov	r0, r8
   5420c:	bl	10f90 <dcgettext@plt>
   54210:	ldr	r1, [r9, #1504]	; 0x5e0
   54214:	bl	10f24 <printf@plt>
   54218:	ldr	r1, [pc, #212]	; 542f4 <__assert_fail@plt+0x430e8>
   5421c:	mov	r0, r8
   54220:	mov	r2, #5
   54224:	bl	10f90 <dcgettext@plt>
   54228:	ldr	r1, [r9, #1508]	; 0x5e4
   5422c:	cmp	r1, r8
   54230:	mov	r4, r0
   54234:	beq	54288 <__assert_fail@plt+0x4307c>
   54238:	mov	r0, r4
   5423c:	bl	10f24 <printf@plt>
   54240:	ldr	r0, [r9, #1512]	; 0x5e8
   54244:	mov	r2, #5
   54248:	cmp	r0, #0
   5424c:	beq	54278 <__assert_fail@plt+0x4306c>
   54250:	ldr	r1, [pc, #160]	; 542f8 <__assert_fail@plt+0x430ec>
   54254:	mov	r0, #0
   54258:	bl	10f90 <dcgettext@plt>
   5425c:	bl	10f24 <printf@plt>
   54260:	ldr	r2, [r9, #1516]	; 0x5ec
   54264:	ldr	r1, [r9, #1512]	; 0x5e8
   54268:	bl	3da9c <__assert_fail@plt+0x2c890>
   5426c:	ldr	r0, [pc, #136]	; 542fc <__assert_fail@plt+0x430f0>
   54270:	bl	11014 <puts@plt>
   54274:	b	54188 <__assert_fail@plt+0x42f7c>
   54278:	ldr	r1, [pc, #128]	; 54300 <__assert_fail@plt+0x430f4>
   5427c:	bl	10f90 <dcgettext@plt>
   54280:	bl	10f24 <printf@plt>
   54284:	b	5426c <__assert_fail@plt+0x43060>
   54288:	mov	r0, r1
   5428c:	mov	r2, #5
   54290:	ldr	r1, [pc, #108]	; 54304 <__assert_fail@plt+0x430f8>
   54294:	bl	10f90 <dcgettext@plt>
   54298:	mov	r1, r0
   5429c:	b	54238 <__assert_fail@plt+0x4302c>
   542a0:	ldr	r1, [pc, #96]	; 54308 <__assert_fail@plt+0x430fc>
   542a4:	bl	10f90 <dcgettext@plt>
   542a8:	mov	r1, r5
   542ac:	bl	54dd0 <warn@@Base>
   542b0:	mov	r0, r5
   542b4:	bl	10f54 <free@plt>
   542b8:	b	540f0 <__assert_fail@plt+0x42ee4>
   542bc:	andeq	lr, r9, ip, lsl sp
   542c0:	andeq	lr, r9, ip, asr #26
   542c4:	andeq	ip, r3, r8, asr #10
   542c8:	andeq	ip, r3, r4, ror r6
   542cc:	andeq	sl, r9, r0, lsr r3
   542d0:	andeq	ip, r3, r4, lsr r5
   542d4:	ldrdeq	ip, [r3], -r4
   542d8:	andeq	sl, r9, r8, ror r3
   542dc:	ldrdeq	ip, [r9], -r0
   542e0:	strdeq	r9, [r9], -r0
   542e4:	andeq	r1, r8, r4, lsl #3
   542e8:	andeq	r3, r8, r8, ror #15
   542ec:	andeq	r3, r8, r0, asr #14
   542f0:	andeq	r3, r8, r0, ror r7
   542f4:	andeq	r3, r8, r4, lsl #15
   542f8:	andeq	r3, r8, r4, lsr #15
   542fc:	muleq	r7, ip, sl
   54300:			; <UNDEFINED> instruction: 0x000837b4
   54304:	muleq	r8, r8, r7
   54308:	andeq	r3, r8, r8, asr #15
   5430c:	push	{r4, r5, r6, r7, r8, lr}
   54310:	bl	3caa0 <__assert_fail@plt+0x2b894>
   54314:	mov	r4, #0
   54318:	mov	r0, r4
   5431c:	add	r4, r4, #1
   54320:	bl	357cc <__assert_fail@plt+0x245c0>
   54324:	cmp	r4, #43	; 0x2b
   54328:	bne	54318 <__assert_fail@plt+0x4310c>
   5432c:	ldr	r6, [pc, #192]	; 543f4 <__assert_fail@plt+0x431e8>
   54330:	ldr	r7, [r6, #1440]	; 0x5a0
   54334:	cmp	r7, #0
   54338:	beq	543cc <__assert_fail@plt+0x431c0>
   5433c:	ldr	r3, [r6, #1488]	; 0x5d0
   54340:	sub	r2, r3, #1
   54344:	cmn	r2, #3
   54348:	bhi	543b4 <__assert_fail@plt+0x431a8>
   5434c:	add	r5, r3, r3, lsl #2
   54350:	mov	r4, r7
   54354:	add	r3, r3, r5, lsl #1
   54358:	add	r5, r7, r3, lsl #3
   5435c:	b	54378 <__assert_fail@plt+0x4316c>
   54360:	ldr	r3, [r4, #80]	; 0x50
   54364:	cmp	r3, #0
   54368:	beq	543a0 <__assert_fail@plt+0x43194>
   5436c:	add	r4, r4, #88	; 0x58
   54370:	cmp	r4, r5
   54374:	beq	543b4 <__assert_fail@plt+0x431a8>
   54378:	ldr	r3, [r4, #64]	; 0x40
   5437c:	cmp	r3, #0
   54380:	bne	54360 <__assert_fail@plt+0x43154>
   54384:	ldr	r0, [r4, #48]	; 0x30
   54388:	bl	10f54 <free@plt>
   5438c:	ldr	r0, [r4, #56]	; 0x38
   54390:	bl	10f54 <free@plt>
   54394:	ldr	r3, [r4, #80]	; 0x50
   54398:	cmp	r3, #0
   5439c:	bne	5436c <__assert_fail@plt+0x43160>
   543a0:	ldr	r0, [r4, #72]	; 0x48
   543a4:	add	r4, r4, #88	; 0x58
   543a8:	bl	10f54 <free@plt>
   543ac:	cmp	r4, r5
   543b0:	bne	54378 <__assert_fail@plt+0x4316c>
   543b4:	mov	r0, r7
   543b8:	bl	10f54 <free@plt>
   543bc:	mov	r3, #0
   543c0:	str	r3, [r6, #1440]	; 0x5a0
   543c4:	str	r3, [r6, #1488]	; 0x5d0
   543c8:	str	r3, [r6, #1520]	; 0x5f0
   543cc:	ldr	r0, [r6, #1116]	; 0x45c
   543d0:	cmp	r0, #0
   543d4:	popeq	{r4, r5, r6, r7, r8, pc}
   543d8:	bl	3ac1c <__assert_fail@plt+0x29a10>
   543dc:	mov	r4, #0
   543e0:	ldr	r0, [r6, #1120]	; 0x460
   543e4:	str	r4, [r6, #1116]	; 0x45c
   543e8:	bl	10f54 <free@plt>
   543ec:	str	r4, [r6, #1120]	; 0x460
   543f0:	pop	{r4, r5, r6, r7, r8, pc}
   543f4:	ldrdeq	ip, [r9], -r0
   543f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   543fc:	mov	r6, r0
   54400:	ldrb	r3, [r0]
   54404:	ldr	r8, [pc, #216]	; 544e4 <__assert_fail@plt+0x432d8>
   54408:	ldr	sl, [pc, #216]	; 544e8 <__assert_fail@plt+0x432dc>
   5440c:	cmp	r3, #0
   54410:	ldr	r9, [pc, #212]	; 544ec <__assert_fail@plt+0x432e0>
   54414:	ldr	fp, [pc, #212]	; 544f0 <__assert_fail@plt+0x432e4>
   54418:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5441c:	ldr	r7, [pc, #208]	; 544f4 <__assert_fail@plt+0x432e8>
   54420:	mov	r5, #6
   54424:	mov	r4, r8
   54428:	b	54434 <__assert_fail@plt+0x43228>
   5442c:	bl	11080 <strlen@plt>
   54430:	mov	r5, r0
   54434:	mov	r2, r5
   54438:	mov	r1, r4
   5443c:	mov	r0, r6
   54440:	bl	111d0 <strncmp@plt>
   54444:	add	r2, r6, r5
   54448:	cmp	r0, #0
   5444c:	bne	54460 <__assert_fail@plt+0x43254>
   54450:	ldrb	r3, [r6, r5]
   54454:	cmp	r3, #0
   54458:	cmpne	r3, #44	; 0x2c
   5445c:	beq	544b4 <__assert_fail@plt+0x432a8>
   54460:	ldr	r4, [r7, #12]!
   54464:	cmp	r4, #0
   54468:	mov	r0, r4
   5446c:	bne	5442c <__assert_fail@plt+0x43220>
   54470:	mov	r2, #5
   54474:	mov	r1, sl
   54478:	bl	10f90 <dcgettext@plt>
   5447c:	mov	r1, r6
   54480:	bl	54dd0 <warn@@Base>
   54484:	mov	r0, r6
   54488:	mov	r1, #44	; 0x2c
   5448c:	bl	1108c <strchr@plt>
   54490:	subs	r6, r0, #0
   54494:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54498:	ldrb	r3, [r6]
   5449c:	cmp	r3, #44	; 0x2c
   544a0:	ldrbeq	r3, [r6, #1]
   544a4:	addeq	r6, r6, #1
   544a8:	cmp	r3, #0
   544ac:	bne	5441c <__assert_fail@plt+0x43210>
   544b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   544b4:	ldr	r1, [r7, #4]
   544b8:	ldr	r0, [r7, #8]
   544bc:	ldr	r3, [r1]
   544c0:	orr	r3, r3, r0
   544c4:	str	r3, [r1]
   544c8:	ldr	r3, [r9]
   544cc:	cmp	r3, #0
   544d0:	moveq	r6, r2
   544d4:	movne	r3, #1
   544d8:	movne	r6, r2
   544dc:	strne	r3, [fp]
   544e0:	b	54498 <__assert_fail@plt+0x4328c>
   544e4:	andeq	r3, r8, r4, lsl r8
   544e8:	andeq	r3, r8, ip, lsl r8
   544ec:	andeq	lr, r9, r8, asr #26
   544f0:	andeq	lr, r9, ip, lsl #26
   544f4:	andeq	lr, r7, r0, asr r0
   544f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   544fc:	mov	r5, r0
   54500:	ldr	fp, [pc, #608]	; 54768 <__assert_fail@plt+0x4355c>
   54504:	ldr	sl, [pc, #608]	; 5476c <__assert_fail@plt+0x43560>
   54508:	ldr	r9, [pc, #608]	; 54770 <__assert_fail@plt+0x43564>
   5450c:	ldr	r8, [pc, #608]	; 54774 <__assert_fail@plt+0x43568>
   54510:	ldr	r7, [pc, #608]	; 54778 <__assert_fail@plt+0x4356c>
   54514:	ldr	r6, [pc, #608]	; 5477c <__assert_fail@plt+0x43570>
   54518:	sub	r4, r0, #1
   5451c:	ldrb	r3, [r4, #1]!
   54520:	cmp	r3, #0
   54524:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54528:	sub	r3, r3, #65	; 0x41
   5452c:	cmp	r3, #52	; 0x34
   54530:	ldrls	pc, [pc, r3, lsl #2]
   54534:	b	5474c <__assert_fail@plt+0x43540>
   54538:	andeq	r4, r5, ip, lsr r7
   5453c:	andeq	r4, r5, ip, asr #14
   54540:	andeq	r4, r5, ip, asr #14
   54544:	andeq	r4, r5, ip, asr #14
   54548:	andeq	r4, r5, ip, asr #14
   5454c:	andeq	r4, r5, ip, lsl #12
   54550:	andeq	r4, r5, ip, asr #14
   54554:	andeq	r4, r5, ip, asr #14
   54558:	andeq	r4, r5, ip, asr #14
   5455c:	andeq	r4, r5, ip, asr #14
   54560:	andeq	r4, r5, ip, lsr #14
   54564:	andeq	r4, r5, r8, lsl r7
   54568:	andeq	r4, r5, ip, asr #14
   5456c:	andeq	r4, r5, ip, asr #14
   54570:	andeq	r4, r5, ip, asr #14
   54574:	andeq	r4, r5, ip, asr #14
   54578:	andeq	r4, r5, ip, asr #14
   5457c:	andeq	r4, r5, r8, lsl #14
   54580:	andeq	r4, r5, ip, asr #14
   54584:	strdeq	r4, [r5], -ip
   54588:	strdeq	r4, [r5], -r0
   5458c:	andeq	r4, r5, ip, asr #14
   54590:	andeq	r4, r5, ip, asr #14
   54594:	andeq	r4, r5, ip, asr #14
   54598:	andeq	r4, r5, ip, asr #14
   5459c:	andeq	r4, r5, ip, asr #14
   545a0:	andeq	r4, r5, ip, asr #14
   545a4:	andeq	r4, r5, ip, asr #14
   545a8:	andeq	r4, r5, ip, asr #14
   545ac:	andeq	r4, r5, ip, asr #14
   545b0:	andeq	r4, r5, ip, asr #14
   545b4:	andeq	r4, r5, ip, asr #14
   545b8:	andeq	r4, r5, r0, ror #13
   545bc:	andeq	r4, r5, ip, asr #14
   545c0:	ldrdeq	r4, [r5], -r0
   545c4:	andeq	r4, r5, ip, asr #14
   545c8:	andeq	r4, r5, ip, asr #14
   545cc:	andeq	r4, r5, r8, lsl r6
   545d0:	andeq	r4, r5, r0, asr #13
   545d4:	andeq	r4, r5, ip, asr #14
   545d8:			; <UNDEFINED> instruction: 0x000546b0
   545dc:	andeq	r4, r5, ip, asr #14
   545e0:	andeq	r4, r5, r0, lsr #13
   545e4:	andeq	r4, r5, ip, lsl #13
   545e8:	andeq	r4, r5, ip, ror r6
   545ec:	andeq	r4, r5, ip, asr #14
   545f0:	andeq	r4, r5, ip, ror #12
   545f4:	andeq	r4, r5, ip, asr r6
   545f8:	andeq	r4, r5, ip, asr #14
   545fc:	andeq	r4, r5, ip, asr #12
   54600:	andeq	r4, r5, r0, asr #12
   54604:	andeq	r4, r5, r4, lsr r6
   54608:	andeq	r4, r5, r8, lsr #12
   5460c:	ldr	r3, [pc, #364]	; 54780 <__assert_fail@plt+0x43574>
   54610:	mov	r2, #1
   54614:	str	r2, [r3]
   54618:	ldr	r3, [pc, #356]	; 54784 <__assert_fail@plt+0x43578>
   5461c:	mov	r2, #1
   54620:	str	r2, [r3]
   54624:	b	5451c <__assert_fail@plt+0x43310>
   54628:	mov	r3, #1
   5462c:	str	r3, [sl]
   54630:	b	5451c <__assert_fail@plt+0x43310>
   54634:	mov	r3, #1
   54638:	str	r3, [r8]
   5463c:	b	5451c <__assert_fail@plt+0x43310>
   54640:	mov	r3, #1
   54644:	str	r3, [r6]
   54648:	b	5451c <__assert_fail@plt+0x43310>
   5464c:	ldr	r3, [pc, #308]	; 54788 <__assert_fail@plt+0x4357c>
   54650:	mov	r2, #1
   54654:	str	r2, [r3]
   54658:	b	5451c <__assert_fail@plt+0x43310>
   5465c:	ldr	r3, [pc, #296]	; 5478c <__assert_fail@plt+0x43580>
   54660:	mov	r2, #1
   54664:	str	r2, [r3]
   54668:	b	5451c <__assert_fail@plt+0x43310>
   5466c:	ldr	r3, [pc, #284]	; 54790 <__assert_fail@plt+0x43584>
   54670:	mov	r2, #1
   54674:	str	r2, [r3]
   54678:	b	5451c <__assert_fail@plt+0x43310>
   5467c:	ldr	r3, [pc, #272]	; 54794 <__assert_fail@plt+0x43588>
   54680:	mov	r2, #1
   54684:	str	r2, [r3]
   54688:	b	5451c <__assert_fail@plt+0x43310>
   5468c:	ldr	r2, [pc, #260]	; 54798 <__assert_fail@plt+0x4358c>
   54690:	ldr	r3, [r2]
   54694:	orr	r3, r3, #1
   54698:	str	r3, [r2]
   5469c:	b	5451c <__assert_fail@plt+0x43310>
   546a0:	ldr	r3, [pc, #244]	; 5479c <__assert_fail@plt+0x43590>
   546a4:	mov	r2, #1
   546a8:	str	r2, [r3]
   546ac:	b	5451c <__assert_fail@plt+0x43310>
   546b0:	ldr	r3, [pc, #232]	; 547a0 <__assert_fail@plt+0x43594>
   546b4:	mov	r2, #1
   546b8:	str	r2, [r3]
   546bc:	b	5451c <__assert_fail@plt+0x43310>
   546c0:	ldr	r3, [pc, #220]	; 547a4 <__assert_fail@plt+0x43598>
   546c4:	mov	r2, #1
   546c8:	str	r2, [r3]
   546cc:	b	5451c <__assert_fail@plt+0x43310>
   546d0:	ldr	r3, [pc, #208]	; 547a8 <__assert_fail@plt+0x4359c>
   546d4:	mov	r2, #1
   546d8:	str	r2, [r3]
   546dc:	b	5451c <__assert_fail@plt+0x43310>
   546e0:	ldr	r3, [pc, #196]	; 547ac <__assert_fail@plt+0x435a0>
   546e4:	mov	r2, #1
   546e8:	str	r2, [r3]
   546ec:	b	5451c <__assert_fail@plt+0x43310>
   546f0:	mov	r3, #1
   546f4:	str	r3, [r9]
   546f8:	b	5451c <__assert_fail@plt+0x43310>
   546fc:	mov	r3, #1
   54700:	str	r3, [r7]
   54704:	b	5451c <__assert_fail@plt+0x43310>
   54708:	ldr	r3, [pc, #160]	; 547b0 <__assert_fail@plt+0x435a4>
   5470c:	mov	r2, #1
   54710:	str	r2, [r3]
   54714:	b	5451c <__assert_fail@plt+0x43310>
   54718:	ldr	r2, [pc, #120]	; 54798 <__assert_fail@plt+0x4358c>
   5471c:	ldr	r3, [r2]
   54720:	orr	r3, r3, #2
   54724:	str	r3, [r2]
   54728:	b	5451c <__assert_fail@plt+0x43310>
   5472c:	ldr	r3, [pc, #128]	; 547b4 <__assert_fail@plt+0x435a8>
   54730:	mov	r2, #1
   54734:	str	r2, [r3]
   54738:	b	5451c <__assert_fail@plt+0x43310>
   5473c:	ldr	r3, [pc, #116]	; 547b8 <__assert_fail@plt+0x435ac>
   54740:	mov	r2, #1
   54744:	str	r2, [r3]
   54748:	b	5451c <__assert_fail@plt+0x43310>
   5474c:	mov	r1, fp
   54750:	mov	r2, #5
   54754:	mov	r0, #0
   54758:	bl	10f90 <dcgettext@plt>
   5475c:	mov	r1, r5
   54760:	bl	54dd0 <warn@@Base>
   54764:	b	5451c <__assert_fail@plt+0x43310>
   54768:	andeq	r3, r8, ip, lsl r8
   5476c:	andeq	lr, r9, r0, lsr sp
   54770:	andeq	lr, r9, ip, lsr sp
   54774:	andeq	lr, r9, r0, asr #26
   54778:	andeq	lr, r9, r4, lsr #26
   5477c:	andeq	lr, r9, r0, lsl #26
   54780:	andeq	lr, r9, r8, asr #26
   54784:	andeq	lr, r9, ip, lsl #26
   54788:	andeq	lr, r9, r8, lsl #26
   5478c:	andeq	lr, r9, r0, lsl sp
   54790:	andeq	lr, r9, r4, lsl sp
   54794:	andeq	lr, r9, r4, asr #26
   54798:	andeq	lr, r9, r4, lsr sp
   5479c:	andeq	lr, r9, ip, asr #26
   547a0:	andeq	lr, r9, r4, lsl #26
   547a4:	andeq	lr, r9, r0, asr sp
   547a8:	andeq	lr, r9, r4, asr sp
   547ac:	andeq	lr, r9, r8, lsl sp
   547b0:	andeq	lr, r9, r8, lsr sp
   547b4:	andeq	lr, r9, ip, lsl sp
   547b8:	andeq	lr, r9, r0, lsr #26
   547bc:	ldr	r2, [pc, #156]	; 54860 <__assert_fail@plt+0x43654>
   547c0:	mov	r3, #1
   547c4:	push	{r4, lr}
   547c8:	ldr	ip, [pc, #148]	; 54864 <__assert_fail@plt+0x43658>
   547cc:	str	r3, [r2]
   547d0:	ldr	r4, [pc, #144]	; 54868 <__assert_fail@plt+0x4365c>
   547d4:	ldr	lr, [pc, #144]	; 5486c <__assert_fail@plt+0x43660>
   547d8:	ldr	r0, [pc, #144]	; 54870 <__assert_fail@plt+0x43664>
   547dc:	ldr	r1, [pc, #144]	; 54874 <__assert_fail@plt+0x43668>
   547e0:	ldr	r2, [pc, #144]	; 54878 <__assert_fail@plt+0x4366c>
   547e4:	str	r3, [r4]
   547e8:	str	r3, [lr]
   547ec:	str	r3, [ip]
   547f0:	str	r3, [r0]
   547f4:	str	r3, [r1]
   547f8:	str	r3, [r2]
   547fc:	ldr	r4, [pc, #120]	; 5487c <__assert_fail@plt+0x43670>
   54800:	ldr	lr, [pc, #120]	; 54880 <__assert_fail@plt+0x43674>
   54804:	ldr	ip, [pc, #120]	; 54884 <__assert_fail@plt+0x43678>
   54808:	ldr	r0, [pc, #120]	; 54888 <__assert_fail@plt+0x4367c>
   5480c:	ldr	r1, [pc, #120]	; 5488c <__assert_fail@plt+0x43680>
   54810:	ldr	r2, [pc, #120]	; 54890 <__assert_fail@plt+0x43684>
   54814:	str	r3, [r4]
   54818:	str	r3, [lr]
   5481c:	str	r3, [ip]
   54820:	str	r3, [r0]
   54824:	str	r3, [r1]
   54828:	str	r3, [r2]
   5482c:	ldr	r4, [pc, #96]	; 54894 <__assert_fail@plt+0x43688>
   54830:	ldr	lr, [pc, #96]	; 54898 <__assert_fail@plt+0x4368c>
   54834:	ldr	ip, [pc, #96]	; 5489c <__assert_fail@plt+0x43690>
   54838:	ldr	r0, [pc, #96]	; 548a0 <__assert_fail@plt+0x43694>
   5483c:	ldr	r1, [pc, #96]	; 548a4 <__assert_fail@plt+0x43698>
   54840:	ldr	r2, [pc, #96]	; 548a8 <__assert_fail@plt+0x4369c>
   54844:	str	r3, [r4]
   54848:	str	r3, [lr]
   5484c:	str	r3, [ip]
   54850:	str	r3, [r0]
   54854:	str	r3, [r1]
   54858:	str	r3, [r2]
   5485c:	pop	{r4, pc}
   54860:	andeq	lr, r9, r4, lsl #26
   54864:	andeq	lr, r9, r0, lsl sp
   54868:	andeq	lr, r9, r8, lsl sp
   5486c:	andeq	lr, r9, r4, lsr sp
   54870:	andeq	lr, r9, r0, asr #26
   54874:	andeq	lr, r9, r8, lsl #26
   54878:	andeq	lr, r9, r8, lsr sp
   5487c:	andeq	lr, r9, ip, lsl #26
   54880:	andeq	lr, r9, r4, asr #26
   54884:	andeq	lr, r9, r0, lsl #26
   54888:	andeq	lr, r9, r4, lsl sp
   5488c:	andeq	lr, r9, r0, asr sp
   54890:	andeq	lr, r9, ip, lsr sp
   54894:	andeq	lr, r9, r0, lsr sp
   54898:	andeq	lr, r9, r4, lsr #26
   5489c:	andeq	lr, r9, r0, lsr #26
   548a0:	andeq	lr, r9, r4, asr sp
   548a4:	andeq	lr, r9, ip, lsl sp
   548a8:	andeq	lr, r9, ip, asr #26

000548ac <error@@Base>:
   548ac:	push	{r0, r1, r2, r3}
   548b0:	ldr	r3, [pc, #96]	; 54918 <error@@Base+0x6c>
   548b4:	push	{r4, r5, lr}
   548b8:	sub	sp, sp, #12
   548bc:	ldr	r4, [pc, #88]	; 5491c <error@@Base+0x70>
   548c0:	ldr	r0, [r3]
   548c4:	bl	10f3c <fflush@plt>
   548c8:	add	r3, sp, #28
   548cc:	mov	r2, #5
   548d0:	ldr	r1, [pc, #72]	; 54920 <error@@Base+0x74>
   548d4:	mov	r0, #0
   548d8:	ldr	r5, [r4]
   548dc:	str	r3, [sp, #4]
   548e0:	bl	10f90 <dcgettext@plt>
   548e4:	ldr	r3, [pc, #56]	; 54924 <error@@Base+0x78>
   548e8:	ldr	r2, [r3]
   548ec:	mov	r1, r0
   548f0:	mov	r0, r5
   548f4:	bl	11098 <fprintf@plt>
   548f8:	ldr	r0, [r4]
   548fc:	ldr	r1, [sp, #24]
   54900:	ldr	r2, [sp, #4]
   54904:	bl	11134 <vfprintf@plt>
   54908:	add	sp, sp, #12
   5490c:	pop	{r4, r5, lr}
   54910:	add	sp, sp, #16
   54914:	bx	lr
   54918:	andeq	sl, r9, ip, lsr #8
   5491c:	andeq	sl, r9, r8, lsr #8
   54920:	andeq	r4, r8, r0, ror #3
   54924:	andeq	r9, r9, r0, lsl #8
   54928:	sub	r3, r1, #1
   5492c:	push	{r4, r5, r6, r7, r8, lr}
   54930:	cmp	r3, #7
   54934:	ldrls	pc, [pc, r3, lsl #2]
   54938:	b	54a4c <error@@Base+0x1a0>
   5493c:	andeq	r4, r5, r8, lsr #19
   54940:			; <UNDEFINED> instruction: 0x000549b4
   54944:	andeq	r4, r5, r8, asr #19
   54948:	andeq	r4, r5, r8, ror #19
   5494c:	strdeq	r4, [r5], -r8
   54950:	andeq	r4, r5, r8, lsl #20
   54954:	andeq	r4, r5, r4, lsr #20
   54958:	andeq	r4, r5, ip, asr r9
   5495c:	ldrb	ip, [r0, #5]
   54960:	ldrb	r1, [r0, #1]
   54964:	ldrb	r2, [r0, #4]
   54968:	ldrb	r3, [r0]
   5496c:	ldrb	r4, [r0, #6]
   54970:	ldrb	lr, [r0, #2]
   54974:	orr	r2, r2, ip, lsl #8
   54978:	orr	r3, r3, r1, lsl #8
   5497c:	ldrb	ip, [r0, #7]
   54980:	ldrb	r1, [r0, #3]
   54984:	orr	r2, r2, r4, lsl #16
   54988:	orr	r3, r3, lr, lsl #16
   5498c:	orr	r0, r2, ip, lsl #24
   54990:	orr	r1, r3, r1, lsl #24
   54994:	rev	r2, r0
   54998:	rev	r3, r1
   5499c:	mov	r0, r2
   549a0:	mov	r1, r3
   549a4:	pop	{r4, r5, r6, r7, r8, pc}
   549a8:	ldrb	r2, [r0]
   549ac:	mov	r3, #0
   549b0:	b	5499c <error@@Base+0xf0>
   549b4:	ldrh	r2, [r0]
   549b8:	mov	r3, #0
   549bc:	rev16	r2, r2
   549c0:	uxth	r2, r2
   549c4:	b	5499c <error@@Base+0xf0>
   549c8:	ldrb	r3, [r0]
   549cc:	ldrb	r1, [r0, #1]
   549d0:	ldrb	r0, [r0, #2]
   549d4:	lsl	r2, r3, #16
   549d8:	orr	r2, r2, r1, lsl #8
   549dc:	orr	r2, r2, r0
   549e0:	mov	r3, #0
   549e4:	b	5499c <error@@Base+0xf0>
   549e8:	ldr	r2, [r0]
   549ec:	mov	r3, #0
   549f0:	rev	r2, r2
   549f4:	b	5499c <error@@Base+0xf0>
   549f8:	ldr	r1, [r0, #1]
   549fc:	ldrb	r3, [r0]
   54a00:	rev	r2, r1
   54a04:	b	5499c <error@@Base+0xf0>
   54a08:	ldrb	r4, [r0]
   54a0c:	ldr	r1, [r0, #2]
   54a10:	ldrb	r0, [r0, #1]
   54a14:	mov	r5, #0
   54a18:	rev	r2, r1
   54a1c:	orr	r3, r0, r4, lsl #8
   54a20:	b	5499c <error@@Base+0xf0>
   54a24:	ldrb	r6, [r0, #1]
   54a28:	ldr	r1, [r0, #3]
   54a2c:	ldrb	r4, [r0, #2]
   54a30:	ldrb	r0, [r0]
   54a34:	mov	r7, #0
   54a38:	orr	r4, r4, r6, lsl #8
   54a3c:	mov	r5, #0
   54a40:	rev	r2, r1
   54a44:	orr	r3, r4, r0, lsl #16
   54a48:	b	5499c <error@@Base+0xf0>
   54a4c:	mov	r4, r1
   54a50:	mov	r2, #5
   54a54:	ldr	r1, [pc, #16]	; 54a6c <error@@Base+0x1c0>
   54a58:	mov	r0, #0
   54a5c:	bl	10f90 <dcgettext@plt>
   54a60:	mov	r1, r4
   54a64:	bl	548ac <error@@Base>
   54a68:	bl	111dc <abort@plt>
   54a6c:	andeq	r4, r8, ip, ror #3
   54a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   54a74:	mov	r5, #0
   54a78:	ldrb	r7, [r0, #110]	; 0x6e
   54a7c:	mov	r4, r0
   54a80:	strb	r5, [r0, #110]	; 0x6e
   54a84:	sub	sp, sp, #28
   54a88:	mov	r6, r1
   54a8c:	mov	r8, r2
   54a90:	mov	r1, r5
   54a94:	add	r0, r0, #100	; 0x64
   54a98:	mov	r2, #10
   54a9c:	bl	11074 <strtoul@plt>
   54aa0:	strb	r7, [r4, #110]	; 0x6e
   54aa4:	subs	r7, r0, #0
   54aa8:	blt	54bf4 <error@@Base+0x348>
   54aac:	ldr	r3, [r4, #40]	; 0x28
   54ab0:	add	r7, r7, #1
   54ab4:	bic	r7, r7, #1
   54ab8:	add	r3, r3, #60	; 0x3c
   54abc:	add	r3, r3, r7
   54ac0:	cmp	r8, #0
   54ac4:	str	r3, [r4, #40]	; 0x28
   54ac8:	beq	54b14 <error@@Base+0x268>
   54acc:	cmp	r7, r6
   54ad0:	bcc	54b5c <error@@Base+0x2b0>
   54ad4:	add	r0, sp, #16
   54ad8:	ldr	r3, [r4, #4]
   54adc:	mov	r2, r6
   54ae0:	mov	r1, #1
   54ae4:	bl	10ffc <fread@plt>
   54ae8:	cmp	r6, r0
   54aec:	movne	r0, r5
   54af0:	beq	54b78 <error@@Base+0x2cc>
   54af4:	ldr	r1, [pc, #680]	; 54da4 <error@@Base+0x4f8>
   54af8:	mov	r2, #5
   54afc:	bl	10f90 <dcgettext@plt>
   54b00:	ldr	r1, [r4]
   54b04:	bl	548ac <error@@Base>
   54b08:	mov	r0, #0
   54b0c:	add	sp, sp, #28
   54b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54b14:	mov	r1, r7
   54b18:	mov	r2, #1
   54b1c:	ldr	r0, [r4, #4]
   54b20:	bl	111a0 <fseek@plt>
   54b24:	cmp	r0, #0
   54b28:	bne	54d14 <error@@Base+0x468>
   54b2c:	ldr	r3, [r4, #4]
   54b30:	mov	r2, #60	; 0x3c
   54b34:	mov	r1, #1
   54b38:	add	r0, r4, #52	; 0x34
   54b3c:	bl	10ffc <fread@plt>
   54b40:	cmp	r0, #60	; 0x3c
   54b44:	cmpne	r0, #0
   54b48:	moveq	r0, #1
   54b4c:	beq	54b0c <error@@Base+0x260>
   54b50:	mov	r2, #5
   54b54:	ldr	r1, [pc, #588]	; 54da8 <error@@Base+0x4fc>
   54b58:	b	54d1c <error@@Base+0x470>
   54b5c:	mov	r0, r5
   54b60:	mov	r2, #5
   54b64:	ldr	r1, [pc, #576]	; 54dac <error@@Base+0x500>
   54b68:	bl	10f90 <dcgettext@plt>
   54b6c:	ldr	r1, [r4]
   54b70:	bl	548ac <error@@Base>
   54b74:	b	54b08 <error@@Base+0x25c>
   54b78:	add	r0, sp, #16
   54b7c:	mov	r1, r6
   54b80:	bl	54928 <error@@Base+0x7c>
   54b84:	mov	fp, #0
   54b88:	sub	r7, r7, r6
   54b8c:	mov	sl, r7
   54b90:	umull	r2, r3, r6, r0
   54b94:	mla	r3, r6, r1, r3
   54b98:	mov	r8, r0
   54b9c:	cmp	fp, r3
   54ba0:	cmpeq	r7, r2
   54ba4:	movcc	r3, #1
   54ba8:	movcs	r3, #0
   54bac:	cmp	r1, fp
   54bb0:	cmpeq	r0, r7
   54bb4:	mov	r9, r1
   54bb8:	movls	sl, r3
   54bbc:	orrhi	sl, r3, #1
   54bc0:	cmp	sl, #0
   54bc4:	strd	r8, [r4, #8]
   54bc8:	beq	54c1c <error@@Base+0x370>
   54bcc:	mov	r0, r5
   54bd0:	mov	r2, #5
   54bd4:	ldr	r1, [pc, #468]	; 54db0 <error@@Base+0x504>
   54bd8:	bl	10f90 <dcgettext@plt>
   54bdc:	str	r7, [sp]
   54be0:	mov	r3, r6
   54be4:	ldr	r2, [r4, #8]
   54be8:	ldr	r1, [r4]
   54bec:	bl	548ac <error@@Base>
   54bf0:	b	54b08 <error@@Base+0x25c>
   54bf4:	mov	r2, #5
   54bf8:	ldr	r1, [pc, #436]	; 54db4 <error@@Base+0x508>
   54bfc:	mov	r0, r5
   54c00:	bl	10f90 <dcgettext@plt>
   54c04:	mov	r2, r7
   54c08:	ldr	r1, [r4]
   54c0c:	bl	548ac <error@@Base>
   54c10:	mov	r0, r5
   54c14:	add	sp, sp, #28
   54c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54c1c:	mul	r0, r6, r0
   54c20:	bl	11020 <malloc@plt>
   54c24:	subs	r5, r0, #0
   54c28:	beq	54d40 <error@@Base+0x494>
   54c2c:	mov	r2, r8
   54c30:	ldr	r3, [r4, #4]
   54c34:	mov	r1, r6
   54c38:	bl	10ffc <fread@plt>
   54c3c:	ldrd	r2, [r4, #8]
   54c40:	mov	r9, #0
   54c44:	cmp	r9, r3
   54c48:	cmpeq	r0, r2
   54c4c:	mov	r8, r0
   54c50:	bne	54d30 <error@@Base+0x484>
   54c54:	mul	r3, r6, r0
   54c58:	lsl	r0, r0, #3
   54c5c:	sub	r3, r7, r3
   54c60:	str	r3, [sp, #12]
   54c64:	bl	11020 <malloc@plt>
   54c68:	cmp	r0, #0
   54c6c:	mov	fp, r0
   54c70:	str	r0, [r4, #16]
   54c74:	beq	54d84 <error@@Base+0x4d8>
   54c78:	orrs	r3, r8, r9
   54c7c:	beq	54cc0 <error@@Base+0x414>
   54c80:	mov	r7, sl
   54c84:	mov	sl, r5
   54c88:	b	54c90 <error@@Base+0x3e4>
   54c8c:	ldr	fp, [r4, #16]
   54c90:	mov	r0, sl
   54c94:	mov	r1, r6
   54c98:	bl	54928 <error@@Base+0x7c>
   54c9c:	lsl	r3, r7, #3
   54ca0:	mov	r9, #0
   54ca4:	add	r7, r7, #1
   54ca8:	add	sl, sl, r6
   54cac:	strd	r0, [fp, r3]
   54cb0:	ldrd	r2, [r4, #8]
   54cb4:	cmp	r9, r3
   54cb8:	cmpeq	r7, r2
   54cbc:	bcc	54c8c <error@@Base+0x3e0>
   54cc0:	mov	r0, r5
   54cc4:	bl	10f54 <free@plt>
   54cc8:	ldr	r3, [sp, #12]
   54ccc:	cmp	r3, #0
   54cd0:	beq	54d54 <error@@Base+0x4a8>
   54cd4:	ldr	r0, [sp, #12]
   54cd8:	bl	11020 <malloc@plt>
   54cdc:	cmp	r0, #0
   54ce0:	str	r0, [r4, #20]
   54ce4:	beq	54d70 <error@@Base+0x4c4>
   54ce8:	ldr	r5, [sp, #12]
   54cec:	ldr	r3, [r4, #4]
   54cf0:	str	r5, [r4, #24]
   54cf4:	mov	r2, r5
   54cf8:	mov	r1, #1
   54cfc:	bl	10ffc <fread@plt>
   54d00:	cmp	r5, r0
   54d04:	beq	54b2c <error@@Base+0x280>
   54d08:	mov	r2, #5
   54d0c:	ldr	r1, [pc, #164]	; 54db8 <error@@Base+0x50c>
   54d10:	b	54d1c <error@@Base+0x470>
   54d14:	ldr	r1, [pc, #160]	; 54dbc <error@@Base+0x510>
   54d18:	mov	r2, #5
   54d1c:	mov	r0, #0
   54d20:	bl	10f90 <dcgettext@plt>
   54d24:	ldr	r1, [r4]
   54d28:	bl	548ac <error@@Base>
   54d2c:	b	54b08 <error@@Base+0x25c>
   54d30:	mov	r0, r5
   54d34:	bl	10f54 <free@plt>
   54d38:	mov	r0, sl
   54d3c:	b	54af4 <error@@Base+0x248>
   54d40:	mov	r2, #5
   54d44:	ldr	r1, [pc, #116]	; 54dc0 <error@@Base+0x514>
   54d48:	bl	10f90 <dcgettext@plt>
   54d4c:	bl	548ac <error@@Base>
   54d50:	b	54b08 <error@@Base+0x25c>
   54d54:	mov	r0, r3
   54d58:	mov	r2, #5
   54d5c:	ldr	r1, [pc, #96]	; 54dc4 <error@@Base+0x518>
   54d60:	bl	10f90 <dcgettext@plt>
   54d64:	ldr	r1, [r4]
   54d68:	bl	548ac <error@@Base>
   54d6c:	b	54b08 <error@@Base+0x25c>
   54d70:	mov	r2, #5
   54d74:	ldr	r1, [pc, #76]	; 54dc8 <error@@Base+0x51c>
   54d78:	bl	10f90 <dcgettext@plt>
   54d7c:	bl	548ac <error@@Base>
   54d80:	b	54b08 <error@@Base+0x25c>
   54d84:	mov	r0, r5
   54d88:	bl	10f54 <free@plt>
   54d8c:	mov	r2, #5
   54d90:	ldr	r1, [pc, #52]	; 54dcc <error@@Base+0x520>
   54d94:	mov	r0, fp
   54d98:	bl	10f90 <dcgettext@plt>
   54d9c:	bl	548ac <error@@Base>
   54da0:	b	54b08 <error@@Base+0x25c>
   54da4:	andeq	r4, r8, ip, ror r2
   54da8:	andeq	r4, r8, r4, lsr #8
   54dac:	andeq	r4, r8, ip, asr r2
   54db0:	andeq	r4, r8, r0, lsr #5
   54db4:	andeq	r4, r8, r8, lsl #4
   54db8:	strdeq	r4, [r8], -r4	; <UNPREDICTABLE>
   54dbc:	andeq	r4, r8, r0, lsr r2
   54dc0:	andeq	r4, r8, r4, lsl #6
   54dc4:	andeq	r4, r8, r4, lsl #7
   54dc8:			; <UNDEFINED> instruction: 0x000843b4
   54dcc:	andeq	r4, r8, r0, asr #6

00054dd0 <warn@@Base>:
   54dd0:	push	{r0, r1, r2, r3}
   54dd4:	ldr	r3, [pc, #96]	; 54e3c <warn@@Base+0x6c>
   54dd8:	push	{r4, r5, lr}
   54ddc:	sub	sp, sp, #12
   54de0:	ldr	r4, [pc, #88]	; 54e40 <warn@@Base+0x70>
   54de4:	ldr	r0, [r3]
   54de8:	bl	10f3c <fflush@plt>
   54dec:	add	r3, sp, #28
   54df0:	mov	r2, #5
   54df4:	ldr	r1, [pc, #72]	; 54e44 <warn@@Base+0x74>
   54df8:	mov	r0, #0
   54dfc:	ldr	r5, [r4]
   54e00:	str	r3, [sp, #4]
   54e04:	bl	10f90 <dcgettext@plt>
   54e08:	ldr	r3, [pc, #56]	; 54e48 <warn@@Base+0x78>
   54e0c:	ldr	r2, [r3]
   54e10:	mov	r1, r0
   54e14:	mov	r0, r5
   54e18:	bl	11098 <fprintf@plt>
   54e1c:	ldr	r0, [r4]
   54e20:	ldr	r1, [sp, #24]
   54e24:	ldr	r2, [sp, #4]
   54e28:	bl	11134 <vfprintf@plt>
   54e2c:	add	sp, sp, #12
   54e30:	pop	{r4, r5, lr}
   54e34:	add	sp, sp, #16
   54e38:	bx	lr
   54e3c:	andeq	sl, r9, ip, lsr #8
   54e40:	andeq	sl, r9, r8, lsr #8
   54e44:	andeq	r4, r8, r0, ror #8
   54e48:	andeq	r9, r9, r0, lsl #8
   54e4c:	push	{r4, lr}
   54e50:	ldr	r4, [sp, #8]
   54e54:	sub	r1, r4, #1
   54e58:	cmp	r1, #7
   54e5c:	ldrls	pc, [pc, r1, lsl #2]
   54e60:	b	54ec0 <warn@@Base+0xf0>
   54e64:			; <UNDEFINED> instruction: 0x00054eb8
   54e68:			; <UNDEFINED> instruction: 0x00054eb0
   54e6c:	andeq	r4, r5, r8, lsr #29
   54e70:	andeq	r4, r5, r0, lsr #29
   54e74:	andeq	r4, r5, r0, asr #29
   54e78:	andeq	r4, r5, r0, asr #29
   54e7c:	andeq	r4, r5, r0, asr #29
   54e80:	andeq	r4, r5, r4, lsl #29
   54e84:	lsr	lr, r3, #24
   54e88:	lsr	ip, r3, #16
   54e8c:	lsr	r1, r3, #8
   54e90:	strb	r3, [r0, #4]
   54e94:	strb	lr, [r0, #7]
   54e98:	strb	ip, [r0, #6]
   54e9c:	strb	r1, [r0, #5]
   54ea0:	lsr	r3, r2, #24
   54ea4:	strb	r3, [r0, #3]
   54ea8:	lsr	r3, r2, #16
   54eac:	strb	r3, [r0, #2]
   54eb0:	lsr	r3, r2, #8
   54eb4:	strb	r3, [r0, #1]
   54eb8:	strb	r2, [r0]
   54ebc:	pop	{r4, pc}
   54ec0:	mov	r2, #5
   54ec4:	ldr	r1, [pc, #16]	; 54edc <warn@@Base+0x10c>
   54ec8:	mov	r0, #0
   54ecc:	bl	10f90 <dcgettext@plt>
   54ed0:	mov	r1, r4
   54ed4:	bl	548ac <error@@Base>
   54ed8:	bl	111dc <abort@plt>
   54edc:	andeq	r4, r8, ip, ror #3
   54ee0:	push	{r4, lr}
   54ee4:	ldr	r4, [sp, #8]
   54ee8:	sub	r1, r4, #1
   54eec:	cmp	r1, #7
   54ef0:	ldrls	pc, [pc, r1, lsl #2]
   54ef4:	b	54f70 <warn@@Base+0x1a0>
   54ef8:	andeq	r4, r5, r8, ror #30
   54efc:	andeq	r4, r5, ip, asr pc
   54f00:	andeq	r4, r5, ip, asr #30
   54f04:	andeq	r4, r5, ip, lsr pc
   54f08:	andeq	r4, r5, r0, ror pc
   54f0c:	andeq	r4, r5, r0, ror pc
   54f10:	andeq	r4, r5, r0, ror pc
   54f14:	andeq	r4, r5, r8, lsl pc
   54f18:	lsr	lr, r2, #8
   54f1c:	lsr	ip, r2, #16
   54f20:	lsr	r1, r2, #24
   54f24:	strb	r2, [r0, #7]
   54f28:	mov	r2, r3
   54f2c:	mov	r3, #0
   54f30:	strb	lr, [r0, #6]
   54f34:	strb	ip, [r0, #5]
   54f38:	strb	r1, [r0, #4]
   54f3c:	lsr	r1, r2, #8
   54f40:	strb	r2, [r0, #3]
   54f44:	orr	r2, r1, r3, lsl #24
   54f48:	lsr	r3, r3, #8
   54f4c:	lsr	r1, r2, #8
   54f50:	strb	r2, [r0, #2]
   54f54:	orr	r2, r1, r3, lsl #24
   54f58:	lsr	r3, r3, #8
   54f5c:	lsr	r1, r2, #8
   54f60:	strb	r2, [r0, #1]
   54f64:	orr	r2, r1, r3, lsl #24
   54f68:	strb	r2, [r0]
   54f6c:	pop	{r4, pc}
   54f70:	mov	r2, #5
   54f74:	ldr	r1, [pc, #16]	; 54f8c <warn@@Base+0x1bc>
   54f78:	mov	r0, #0
   54f7c:	bl	10f90 <dcgettext@plt>
   54f80:	mov	r1, r4
   54f84:	bl	548ac <error@@Base>
   54f88:	bl	111dc <abort@plt>
   54f8c:	andeq	r4, r8, ip, ror #3
   54f90:	sub	r3, r1, #1
   54f94:	push	{r4, r5, r6, r7, r8, lr}
   54f98:	cmp	r3, #7
   54f9c:	ldrls	pc, [pc, r3, lsl #2]
   54fa0:	b	55094 <warn@@Base+0x2c4>
   54fa4:	andeq	r5, r5, r8
   54fa8:	andeq	r5, r5, r4, lsl r0
   54fac:	andeq	r5, r5, r0, lsr #32
   54fb0:	andeq	r5, r5, r0, asr #32
   54fb4:	andeq	r5, r5, ip, asr #32
   54fb8:	andeq	r5, r5, r8, asr r0
   54fbc:	andeq	r5, r5, r0, ror r0
   54fc0:	andeq	r4, r5, r4, asr #31
   54fc4:	ldrb	r1, [r0, #1]
   54fc8:	ldrb	r3, [r0]
   54fcc:	ldrb	r2, [r0, #5]
   54fd0:	ldrb	r4, [r0, #6]
   54fd4:	orr	r3, r3, r1, lsl #8
   54fd8:	ldrb	r5, [r0, #2]
   54fdc:	ldrb	r1, [r0, #4]
   54fe0:	ldrb	lr, [r0, #3]
   54fe4:	ldrb	ip, [r0, #7]
   54fe8:	orr	r1, r1, r2, lsl #8
   54fec:	orr	r0, r3, r5, lsl #16
   54ff0:	orr	r1, r1, r4, lsl #16
   54ff4:	orr	r2, r0, lr, lsl #24
   54ff8:	orr	r3, r1, ip, lsl #24
   54ffc:	mov	r0, r2
   55000:	mov	r1, r3
   55004:	pop	{r4, r5, r6, r7, r8, pc}
   55008:	ldrb	r2, [r0]
   5500c:	mov	r3, #0
   55010:	b	54ffc <warn@@Base+0x22c>
   55014:	ldrh	r2, [r0]
   55018:	mov	r3, #0
   5501c:	b	54ffc <warn@@Base+0x22c>
   55020:	ldrb	r3, [r0, #2]
   55024:	ldrb	r1, [r0, #1]
   55028:	ldrb	r0, [r0]
   5502c:	lsl	r2, r3, #16
   55030:	orr	r2, r2, r1, lsl #8
   55034:	orr	r2, r2, r0
   55038:	mov	r3, #0
   5503c:	b	54ffc <warn@@Base+0x22c>
   55040:	ldr	r2, [r0]
   55044:	mov	r3, #0
   55048:	b	54ffc <warn@@Base+0x22c>
   5504c:	ldr	r2, [r0]
   55050:	ldrb	r3, [r0, #4]
   55054:	b	54ffc <warn@@Base+0x22c>
   55058:	ldrb	r4, [r0, #5]
   5505c:	ldr	r2, [r0]
   55060:	ldrb	r0, [r0, #4]
   55064:	mov	r5, #0
   55068:	orr	r3, r0, r4, lsl #8
   5506c:	b	54ffc <warn@@Base+0x22c>
   55070:	ldrb	r6, [r0, #5]
   55074:	ldrb	r4, [r0, #4]
   55078:	ldr	r2, [r0]
   5507c:	ldrb	r0, [r0, #6]
   55080:	orr	r4, r4, r6, lsl #8
   55084:	mov	r7, #0
   55088:	mov	r5, #0
   5508c:	orr	r3, r4, r0, lsl #16
   55090:	b	54ffc <warn@@Base+0x22c>
   55094:	mov	r4, r1
   55098:	mov	r2, #5
   5509c:	ldr	r1, [pc, #16]	; 550b4 <warn@@Base+0x2e4>
   550a0:	mov	r0, #0
   550a4:	bl	10f90 <dcgettext@plt>
   550a8:	mov	r1, r4
   550ac:	bl	548ac <error@@Base>
   550b0:	bl	111dc <abort@plt>
   550b4:	andeq	r4, r8, ip, ror #3
   550b8:	ldr	r3, [pc, #132]	; 55144 <warn@@Base+0x374>
   550bc:	push	{r4, lr}
   550c0:	mov	r4, r1
   550c4:	ldr	r3, [r3]
   550c8:	blx	r3
   550cc:	sub	r3, r4, #1
   550d0:	cmp	r3, #7
   550d4:	ldrls	pc, [pc, r3, lsl #2]
   550d8:	b	55140 <warn@@Base+0x370>
   550dc:	andeq	r5, r5, r0, lsl r1
   550e0:	andeq	r5, r5, r0, lsr #2
   550e4:	andeq	r5, r5, r0, lsr r1
   550e8:	andeq	r5, r5, r0, lsl #2
   550ec:	strdeq	r5, [r5], -ip
   550f0:	strdeq	r5, [r5], -ip
   550f4:	strdeq	r5, [r5], -ip
   550f8:	strdeq	r5, [r5], -ip
   550fc:	pop	{r4, pc}
   55100:	add	r0, r0, #-2147483648	; 0x80000000
   55104:	adds	r0, r0, #-2147483648	; 0x80000000
   55108:	sbc	r1, r1, #0
   5510c:	pop	{r4, pc}
   55110:	eor	r0, r0, #128	; 0x80
   55114:	subs	r0, r0, #128	; 0x80
   55118:	sbc	r1, r1, #0
   5511c:	pop	{r4, pc}
   55120:	eor	r0, r0, #32768	; 0x8000
   55124:	subs	r0, r0, #32768	; 0x8000
   55128:	sbc	r1, r1, #0
   5512c:	pop	{r4, pc}
   55130:	eor	r0, r0, #8388608	; 0x800000
   55134:	subs	r0, r0, #8388608	; 0x800000
   55138:	sbc	r1, r1, #0
   5513c:	pop	{r4, pc}
   55140:	bl	111dc <abort@plt>
   55144:	andeq	lr, r9, ip, asr sp
   55148:	ldr	ip, [pc, #100]	; 551b4 <warn@@Base+0x3e4>
   5514c:	push	{r4, r5, r6, r7, r8, lr}
   55150:	mov	r6, r1
   55154:	ldr	r3, [pc, #92]	; 551b8 <warn@@Base+0x3e8>
   55158:	ldr	r1, [ip]
   5515c:	mov	r5, r2
   55160:	cmp	r1, r3
   55164:	add	r7, r0, #4
   55168:	beq	55194 <warn@@Base+0x3c4>
   5516c:	mov	r4, r0
   55170:	mov	r1, #4
   55174:	mov	r0, r7
   55178:	bl	54f90 <warn@@Base+0x1c0>
   5517c:	strd	r0, [r6]
   55180:	mov	r0, r4
   55184:	mov	r1, #4
   55188:	bl	54f90 <warn@@Base+0x1c0>
   5518c:	strd	r0, [r5]
   55190:	pop	{r4, r5, r6, r7, r8, pc}
   55194:	mov	r1, #4
   55198:	bl	54928 <error@@Base+0x7c>
   5519c:	strd	r0, [r6]
   551a0:	mov	r0, r7
   551a4:	mov	r1, #4
   551a8:	bl	54928 <error@@Base+0x7c>
   551ac:	strd	r0, [r5]
   551b0:	pop	{r4, r5, r6, r7, r8, pc}
   551b4:	andeq	lr, r9, ip, asr sp
   551b8:	andeq	r4, r5, r8, lsr #18
   551bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   551c0:	mov	r7, r1
   551c4:	mov	r8, r0
   551c8:	mov	r6, r2
   551cc:	bl	584d4 <warn@@Base+0x3704>
   551d0:	ldrb	r4, [r7]
   551d4:	cmp	r8, r0
   551d8:	cmpne	r4, #47	; 0x2f
   551dc:	moveq	r4, #1
   551e0:	movne	r4, #0
   551e4:	bne	5521c <warn@@Base+0x44c>
   551e8:	adds	r0, r6, #1
   551ec:	moveq	r4, r0
   551f0:	beq	55214 <warn@@Base+0x444>
   551f4:	bl	11020 <malloc@plt>
   551f8:	subs	r4, r0, #0
   551fc:	beq	5528c <warn@@Base+0x4bc>
   55200:	mov	r1, r7
   55204:	mov	r2, r6
   55208:	bl	10f6c <memcpy@plt>
   5520c:	mov	r3, #0
   55210:	strb	r3, [r4, r6]
   55214:	mov	r0, r4
   55218:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   5521c:	sub	r5, r0, r8
   55220:	add	r9, r5, r6
   55224:	add	r0, r9, #1
   55228:	cmp	r6, r0
   5522c:	cmpls	r5, r0
   55230:	movhi	sl, #1
   55234:	movls	sl, #0
   55238:	bhi	55270 <warn@@Base+0x4a0>
   5523c:	bl	11020 <malloc@plt>
   55240:	subs	r4, r0, #0
   55244:	beq	5528c <warn@@Base+0x4bc>
   55248:	mov	r1, r8
   5524c:	mov	r2, r5
   55250:	bl	10f6c <memcpy@plt>
   55254:	mov	r2, r6
   55258:	mov	r1, r7
   5525c:	add	r0, r4, r5
   55260:	bl	10f6c <memcpy@plt>
   55264:	strb	sl, [r4, r9]
   55268:	mov	r0, r4
   5526c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   55270:	mov	r2, #5
   55274:	ldr	r1, [pc, #36]	; 552a0 <warn@@Base+0x4d0>
   55278:	mov	r0, r4
   5527c:	bl	10f90 <dcgettext@plt>
   55280:	mov	r1, r6
   55284:	bl	548ac <error@@Base>
   55288:	b	55214 <warn@@Base+0x444>
   5528c:	mov	r2, #5
   55290:	ldr	r1, [pc, #12]	; 552a4 <warn@@Base+0x4d4>
   55294:	bl	10f90 <dcgettext@plt>
   55298:	bl	548ac <error@@Base>
   5529c:	b	55214 <warn@@Base+0x444>
   552a0:	andeq	r4, r8, r0, lsl #9
   552a4:	andeq	r4, r8, r0, ror r4
   552a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   552ac:	mov	r4, r0
   552b0:	mov	r0, r1
   552b4:	mov	r6, r2
   552b8:	mov	r8, r3
   552bc:	mov	r9, r1
   552c0:	bl	10f9c <strdup@plt>
   552c4:	mov	r2, #0
   552c8:	mov	r3, #0
   552cc:	mov	r5, #0
   552d0:	mov	r7, #8
   552d4:	str	r8, [r4, #44]	; 0x2c
   552d8:	strd	r2, [r4, #8]
   552dc:	str	r6, [r4, #4]
   552e0:	str	r5, [r4, #16]
   552e4:	str	r5, [r4, #20]
   552e8:	str	r5, [r4, #24]
   552ec:	str	r5, [r4, #28]
   552f0:	str	r5, [r4, #32]
   552f4:	str	r5, [r4, #36]	; 0x24
   552f8:	str	r5, [r4, #48]	; 0x30
   552fc:	str	r7, [r4, #40]	; 0x28
   55300:	mov	r2, r5
   55304:	mov	r1, r7
   55308:	str	r0, [r4]
   5530c:	mov	r0, r6
   55310:	bl	111a0 <fseek@plt>
   55314:	subs	r8, r0, #0
   55318:	bne	55430 <warn@@Base+0x660>
   5531c:	add	r5, r4, #52	; 0x34
   55320:	mov	r0, r5
   55324:	mov	r3, r6
   55328:	mov	r2, #60	; 0x3c
   5532c:	mov	r1, #1
   55330:	bl	10ffc <fread@plt>
   55334:	cmp	r0, #60	; 0x3c
   55338:	beq	5534c <warn@@Base+0x57c>
   5533c:	cmp	r0, #0
   55340:	bne	55474 <warn@@Base+0x6a4>
   55344:	mov	r0, r8
   55348:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   5534c:	mov	r2, #16
   55350:	ldr	r1, [pc, #512]	; 55558 <warn@@Base+0x788>
   55354:	mov	r0, r5
   55358:	bl	111d0 <strncmp@plt>
   5535c:	cmp	r0, #0
   55360:	beq	55454 <warn@@Base+0x684>
   55364:	mov	r2, #16
   55368:	ldr	r1, [pc, #492]	; 5555c <warn@@Base+0x78c>
   5536c:	mov	r0, r5
   55370:	bl	111d0 <strncmp@plt>
   55374:	cmp	r0, #0
   55378:	beq	554b8 <warn@@Base+0x6e8>
   5537c:	ldr	r3, [sp, #32]
   55380:	cmp	r3, #0
   55384:	bne	554dc <warn@@Base+0x70c>
   55388:	mov	r0, r5
   5538c:	mov	r2, #16
   55390:	ldr	r1, [pc, #456]	; 55560 <warn@@Base+0x790>
   55394:	bl	111d0 <strncmp@plt>
   55398:	subs	r5, r0, #0
   5539c:	bne	55344 <warn@@Base+0x574>
   553a0:	ldrb	r8, [r4, #110]	; 0x6e
   553a4:	mov	r2, #10
   553a8:	strb	r5, [r4, #110]	; 0x6e
   553ac:	mov	r1, r5
   553b0:	add	r0, r4, #100	; 0x64
   553b4:	bl	11074 <strtoul@plt>
   553b8:	strb	r8, [r4, #110]	; 0x6e
   553bc:	cmp	r0, #7
   553c0:	mov	r7, r0
   553c4:	str	r0, [r4, #32]
   553c8:	bls	55498 <warn@@Base+0x6c8>
   553cc:	cmp	r0, #0
   553d0:	blt	554f8 <warn@@Base+0x728>
   553d4:	ldr	r3, [r4, #40]	; 0x28
   553d8:	add	r0, r0, #1
   553dc:	add	r3, r3, #60	; 0x3c
   553e0:	add	r3, r3, r7
   553e4:	str	r3, [r4, #40]	; 0x28
   553e8:	bl	11020 <malloc@plt>
   553ec:	cmp	r0, #0
   553f0:	str	r0, [r4, #28]
   553f4:	beq	55534 <warn@@Base+0x764>
   553f8:	mov	r1, r7
   553fc:	mov	r3, r6
   55400:	mov	r2, #1
   55404:	bl	10ffc <fread@plt>
   55408:	cmp	r0, #1
   5540c:	bne	55508 <warn@@Base+0x738>
   55410:	ldr	r3, [r4, #32]
   55414:	tst	r3, #1
   55418:	bne	55548 <warn@@Base+0x778>
   5541c:	ldr	r1, [r4, #28]
   55420:	mov	r2, #0
   55424:	mov	r8, r2
   55428:	strb	r2, [r1, r3]
   5542c:	b	55344 <warn@@Base+0x574>
   55430:	mov	r2, #5
   55434:	mov	r0, r5
   55438:	ldr	r1, [pc, #292]	; 55564 <warn@@Base+0x794>
   5543c:	bl	10f90 <dcgettext@plt>
   55440:	mov	r8, #1
   55444:	mov	r1, r9
   55448:	bl	548ac <error@@Base>
   5544c:	mov	r0, r8
   55450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   55454:	ldr	r2, [sp, #32]
   55458:	mov	r1, #4
   5545c:	mov	r0, r4
   55460:	bl	54a70 <error@@Base+0x1c4>
   55464:	cmp	r0, #0
   55468:	bne	55388 <warn@@Base+0x5b8>
   5546c:	mov	r8, #1
   55470:	b	55344 <warn@@Base+0x574>
   55474:	mov	r2, #5
   55478:	mov	r0, r8
   5547c:	ldr	r1, [pc, #228]	; 55568 <warn@@Base+0x798>
   55480:	bl	10f90 <dcgettext@plt>
   55484:	mov	r8, #1
   55488:	mov	r1, r9
   5548c:	bl	548ac <error@@Base>
   55490:	mov	r0, r8
   55494:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   55498:	ldr	r1, [pc, #204]	; 5556c <warn@@Base+0x79c>
   5549c:	mov	r0, r5
   554a0:	mov	r2, #5
   554a4:	bl	10f90 <dcgettext@plt>
   554a8:	ldr	r2, [r4, #32]
   554ac:	mov	r1, r9
   554b0:	bl	548ac <error@@Base>
   554b4:	b	5546c <warn@@Base+0x69c>
   554b8:	mov	r3, #1
   554bc:	mov	r1, r7
   554c0:	str	r3, [r4, #48]	; 0x30
   554c4:	ldr	r2, [sp, #32]
   554c8:	mov	r0, r4
   554cc:	bl	54a70 <error@@Base+0x1c4>
   554d0:	cmp	r0, #0
   554d4:	bne	55388 <warn@@Base+0x5b8>
   554d8:	b	5546c <warn@@Base+0x69c>
   554dc:	mov	r2, #5
   554e0:	ldr	r1, [pc, #136]	; 55570 <warn@@Base+0x7a0>
   554e4:	mov	r0, r8
   554e8:	bl	10f90 <dcgettext@plt>
   554ec:	mov	r1, r9
   554f0:	bl	10f24 <printf@plt>
   554f4:	b	55388 <warn@@Base+0x5b8>
   554f8:	mov	r0, r5
   554fc:	mov	r2, #5
   55500:	ldr	r1, [pc, #108]	; 55574 <warn@@Base+0x7a4>
   55504:	b	554a4 <warn@@Base+0x6d4>
   55508:	ldr	r0, [r4, #28]
   5550c:	bl	10f54 <free@plt>
   55510:	mov	r2, #5
   55514:	ldr	r1, [pc, #92]	; 55578 <warn@@Base+0x7a8>
   55518:	str	r5, [r4, #28]
   5551c:	mov	r0, r5
   55520:	bl	10f90 <dcgettext@plt>
   55524:	mov	r1, r9
   55528:	bl	548ac <error@@Base>
   5552c:	mov	r8, #1
   55530:	b	55344 <warn@@Base+0x574>
   55534:	mov	r2, #5
   55538:	ldr	r1, [pc, #60]	; 5557c <warn@@Base+0x7ac>
   5553c:	bl	10f90 <dcgettext@plt>
   55540:	bl	548ac <error@@Base>
   55544:	b	5546c <warn@@Base+0x69c>
   55548:	mov	r0, r6
   5554c:	bl	111e8 <getc@plt>
   55550:	ldr	r3, [r4, #32]
   55554:	b	5541c <warn@@Base+0x64c>
   55558:	andeq	r4, r8, r0, ror #9
   5555c:	strdeq	r4, [r8], -r4	; <UNPREDICTABLE>
   55560:	andeq	r4, r8, r4, lsr #10
   55564:			; <UNDEFINED> instruction: 0x000844b4
   55568:	andeq	ip, r6, r4, asr lr
   5556c:	andeq	r4, r8, r8, lsr r5
   55570:	andeq	r4, r8, r8, lsl #10
   55574:	andeq	r4, r8, r8, ror #10
   55578:	andeq	r4, r8, ip, asr #11
   5557c:	muleq	r8, r8, r5
   55580:	push	{r4, lr}
   55584:	mov	r4, r0
   55588:	ldr	r0, [r0]
   5558c:	cmp	r0, #0
   55590:	beq	55598 <warn@@Base+0x7c8>
   55594:	bl	10f54 <free@plt>
   55598:	ldr	r0, [r4, #16]
   5559c:	cmp	r0, #0
   555a0:	beq	555a8 <warn@@Base+0x7d8>
   555a4:	bl	10f54 <free@plt>
   555a8:	ldr	r0, [r4, #20]
   555ac:	cmp	r0, #0
   555b0:	beq	555b8 <warn@@Base+0x7e8>
   555b4:	bl	10f54 <free@plt>
   555b8:	ldr	r0, [r4, #28]
   555bc:	cmp	r0, #0
   555c0:	popeq	{r4, pc}
   555c4:	pop	{r4, lr}
   555c8:	b	10f54 <free@plt>
   555cc:	push	{r4, r5, lr}
   555d0:	mov	r4, r0
   555d4:	ldr	r0, [r0]
   555d8:	sub	sp, sp, #12
   555dc:	cmp	r0, #0
   555e0:	mov	r5, r1
   555e4:	beq	555f4 <warn@@Base+0x824>
   555e8:	bl	10f18 <strcmp@plt>
   555ec:	cmp	r0, #0
   555f0:	beq	55638 <warn@@Base+0x868>
   555f4:	ldr	r0, [r4, #4]
   555f8:	cmp	r0, #0
   555fc:	beq	55604 <warn@@Base+0x834>
   55600:	bl	110f8 <fclose@plt>
   55604:	mov	r0, r4
   55608:	bl	55580 <warn@@Base+0x7b0>
   5560c:	ldr	r1, [pc, #44]	; 55640 <warn@@Base+0x870>
   55610:	mov	r0, r5
   55614:	bl	11164 <fopen64@plt>
   55618:	subs	r2, r0, #0
   5561c:	moveq	r0, #1
   55620:	beq	55638 <warn@@Base+0x868>
   55624:	mov	r3, #0
   55628:	mov	r1, r5
   5562c:	mov	r0, r4
   55630:	str	r3, [sp]
   55634:	bl	552a8 <warn@@Base+0x4d8>
   55638:	add	sp, sp, #12
   5563c:	pop	{r4, r5, pc}
   55640:	andeq	r5, r6, r0, ror r4
   55644:	push	{r4, r5, r6, lr}
   55648:	mov	r4, r0
   5564c:	mov	r6, r2
   55650:	ldr	r0, [r0, #4]
   55654:	mov	r2, #0
   55658:	bl	111a0 <fseek@plt>
   5565c:	subs	r5, r0, #0
   55660:	bne	556c8 <warn@@Base+0x8f8>
   55664:	ldr	r3, [r4, #4]
   55668:	mov	r2, #60	; 0x3c
   5566c:	mov	r1, #1
   55670:	add	r0, r4, #52	; 0x34
   55674:	bl	10ffc <fread@plt>
   55678:	cmp	r0, #60	; 0x3c
   5567c:	bne	556e8 <warn@@Base+0x918>
   55680:	ldrb	r3, [r4, #110]	; 0x6e
   55684:	cmp	r3, #96	; 0x60
   55688:	beq	556ac <warn@@Base+0x8dc>
   5568c:	mov	r2, #5
   55690:	ldr	r1, [pc, #112]	; 55708 <warn@@Base+0x938>
   55694:	mov	r0, #0
   55698:	bl	10f90 <dcgettext@plt>
   5569c:	ldr	r1, [r4]
   556a0:	bl	548ac <error@@Base>
   556a4:	mov	r0, #0
   556a8:	pop	{r4, r5, r6, pc}
   556ac:	ldrb	r3, [r4, #111]	; 0x6f
   556b0:	cmp	r3, #10
   556b4:	bne	5568c <warn@@Base+0x8bc>
   556b8:	mov	r1, r6
   556bc:	mov	r0, r4
   556c0:	pop	{r4, r5, r6, lr}
   556c4:	b	55714 <warn@@Base+0x944>
   556c8:	mov	r2, #5
   556cc:	ldr	r1, [pc, #56]	; 5570c <warn@@Base+0x93c>
   556d0:	mov	r0, #0
   556d4:	bl	10f90 <dcgettext@plt>
   556d8:	ldr	r1, [r4]
   556dc:	bl	548ac <error@@Base>
   556e0:	mov	r0, #0
   556e4:	pop	{r4, r5, r6, pc}
   556e8:	mov	r2, #5
   556ec:	mov	r0, r5
   556f0:	ldr	r1, [pc, #24]	; 55710 <warn@@Base+0x940>
   556f4:	bl	10f90 <dcgettext@plt>
   556f8:	ldr	r1, [r4]
   556fc:	bl	548ac <error@@Base>
   55700:	mov	r0, #0
   55704:	pop	{r4, r5, r6, pc}
   55708:	andeq	ip, r6, r8, ror lr
   5570c:	andeq	r4, r8, r0, lsl #12
   55710:	andeq	ip, r6, r4, asr lr
   55714:	push	{r4, r5, r6, r7, r8, lr}
   55718:	mov	r4, r0
   5571c:	ldrb	r3, [r0, #52]	; 0x34
   55720:	sub	sp, sp, #8
   55724:	cmp	r3, #47	; 0x2f
   55728:	addne	r6, r0, #52	; 0x34
   5572c:	movne	r2, r6
   55730:	movne	r3, #0
   55734:	bne	55748 <warn@@Base+0x978>
   55738:	b	55794 <warn@@Base+0x9c4>
   5573c:	ldrb	r1, [r2, #1]!
   55740:	cmp	r1, #47	; 0x2f
   55744:	beq	557d0 <warn@@Base+0xa00>
   55748:	add	r3, r3, #1
   5574c:	cmp	r3, #16
   55750:	bne	5573c <warn@@Base+0x96c>
   55754:	mov	r0, #17
   55758:	bl	5861c <warn@@Base+0x384c>
   5575c:	ldr	ip, [r6]
   55760:	ldr	r1, [r6, #8]
   55764:	ldr	r2, [r6, #12]
   55768:	mov	r3, #0
   5576c:	mov	r5, r0
   55770:	ldr	r0, [r6, #4]
   55774:	str	ip, [r5]
   55778:	str	r0, [r5, #4]
   5577c:	str	r1, [r5, #8]
   55780:	str	r2, [r5, #12]
   55784:	strb	r3, [r5, #16]
   55788:	mov	r0, r5
   5578c:	add	sp, sp, #8
   55790:	pop	{r4, r5, r6, r7, r8, pc}
   55794:	ldr	r3, [r0, #28]
   55798:	cmp	r3, #0
   5579c:	beq	557ac <warn@@Base+0x9dc>
   557a0:	ldr	r3, [r0, #32]
   557a4:	cmp	r3, #0
   557a8:	bne	557ec <warn@@Base+0xa1c>
   557ac:	mov	r2, #5
   557b0:	ldr	r1, [pc, #476]	; 55994 <warn@@Base+0xbc4>
   557b4:	mov	r0, #0
   557b8:	bl	10f90 <dcgettext@plt>
   557bc:	bl	548ac <error@@Base>
   557c0:	mov	r5, #0
   557c4:	mov	r0, r5
   557c8:	add	sp, sp, #8
   557cc:	pop	{r4, r5, r6, r7, r8, pc}
   557d0:	add	r3, r4, r3
   557d4:	mov	r2, #0
   557d8:	mov	r5, r6
   557dc:	mov	r0, r5
   557e0:	strb	r2, [r3, #52]	; 0x34
   557e4:	add	sp, sp, #8
   557e8:	pop	{r4, r5, r6, r7, r8, pc}
   557ec:	mov	r5, #0
   557f0:	ldrb	r8, [r0, #110]	; 0x6e
   557f4:	str	r5, [r0, #36]	; 0x24
   557f8:	strb	r5, [r0, #110]	; 0x6e
   557fc:	mov	r6, r1
   55800:	mov	r2, #10
   55804:	add	r1, sp, #4
   55808:	add	r0, r0, #53	; 0x35
   5580c:	bl	11074 <strtoul@plt>
   55810:	ldr	r3, [r4, #44]	; 0x2c
   55814:	cmp	r3, r5
   55818:	mov	r7, r0
   5581c:	beq	55838 <warn@@Base+0xa68>
   55820:	ldr	r0, [sp, #4]
   55824:	cmp	r0, r5
   55828:	beq	55838 <warn@@Base+0xa68>
   5582c:	ldrb	r3, [r0]
   55830:	cmp	r3, #58	; 0x3a
   55834:	beq	55954 <warn@@Base+0xb84>
   55838:	ldr	r5, [r4, #32]
   5583c:	strb	r8, [r4, #110]	; 0x6e
   55840:	cmp	r7, r5
   55844:	bhi	5596c <warn@@Base+0xb9c>
   55848:	ldr	lr, [r4, #28]
   5584c:	bcs	5598c <warn@@Base+0xbbc>
   55850:	ldrb	r2, [lr, r7]
   55854:	add	r3, lr, r7
   55858:	cmp	r2, #0
   5585c:	cmpne	r2, #10
   55860:	subne	r0, r5, #1
   55864:	addne	r0, r0, lr
   55868:	rsbne	ip, lr, #1
   5586c:	beq	5598c <warn@@Base+0xbbc>
   55870:	cmp	r3, r0
   55874:	add	r2, ip, r3
   55878:	beq	5588c <warn@@Base+0xabc>
   5587c:	ldrb	r1, [r3, #1]!
   55880:	cmp	r1, #10
   55884:	cmpne	r1, #0
   55888:	bne	55870 <warn@@Base+0xaa0>
   5588c:	cmp	r2, #0
   55890:	beq	558b0 <warn@@Base+0xae0>
   55894:	sub	r3, r2, #1
   55898:	ldrb	r1, [lr, r3]
   5589c:	cmp	r1, #47	; 0x2f
   558a0:	moveq	r2, r3
   558a4:	cmp	r2, r5
   558a8:	movcs	r2, r5
   558ac:	add	lr, lr, r2
   558b0:	mov	r5, #0
   558b4:	strb	r5, [lr]
   558b8:	ldr	r3, [r4, #44]	; 0x2c
   558bc:	cmp	r3, r5
   558c0:	beq	55930 <warn@@Base+0xb60>
   558c4:	ldr	r3, [r4, #36]	; 0x24
   558c8:	cmp	r3, r5
   558cc:	beq	55930 <warn@@Base+0xb60>
   558d0:	cmp	r7, r2
   558d4:	bcs	5593c <warn@@Base+0xb6c>
   558d8:	ldr	r1, [r4, #28]
   558dc:	sub	r2, r2, r7
   558e0:	add	r1, r1, r7
   558e4:	ldr	r0, [r4]
   558e8:	bl	551bc <warn@@Base+0x3ec>
   558ec:	subs	r8, r0, #0
   558f0:	beq	55928 <warn@@Base+0xb58>
   558f4:	mov	r1, r8
   558f8:	mov	r0, r6
   558fc:	bl	555cc <warn@@Base+0x7fc>
   55900:	subs	r2, r0, #0
   55904:	bne	55928 <warn@@Base+0xb58>
   55908:	mov	r0, r6
   5590c:	ldr	r1, [r4, #36]	; 0x24
   55910:	bl	55644 <warn@@Base+0x874>
   55914:	subs	r5, r0, #0
   55918:	beq	55928 <warn@@Base+0xb58>
   5591c:	mov	r0, r8
   55920:	bl	10f54 <free@plt>
   55924:	b	55788 <warn@@Base+0x9b8>
   55928:	mov	r0, r8
   5592c:	bl	10f54 <free@plt>
   55930:	ldr	r5, [r4, #28]
   55934:	add	r5, r5, r7
   55938:	b	55788 <warn@@Base+0x9b8>
   5593c:	mov	r2, #5
   55940:	ldr	r1, [pc, #80]	; 55998 <warn@@Base+0xbc8>
   55944:	mov	r0, r5
   55948:	bl	10f90 <dcgettext@plt>
   5594c:	bl	548ac <error@@Base>
   55950:	b	55788 <warn@@Base+0x9b8>
   55954:	mov	r1, r5
   55958:	add	r0, r0, #1
   5595c:	mov	r2, #10
   55960:	bl	11074 <strtoul@plt>
   55964:	str	r0, [r4, #36]	; 0x24
   55968:	b	55838 <warn@@Base+0xa68>
   5596c:	mov	r2, #5
   55970:	ldr	r1, [pc, #36]	; 5599c <warn@@Base+0xbcc>
   55974:	mov	r0, #0
   55978:	bl	10f90 <dcgettext@plt>
   5597c:	mov	r1, r7
   55980:	bl	548ac <error@@Base>
   55984:	mov	r5, #0
   55988:	b	55788 <warn@@Base+0x9b8>
   5598c:	mov	r2, r7
   55990:	b	5588c <warn@@Base+0xabc>
   55994:	andeq	r4, r8, ip, lsr #12
   55998:	andeq	r4, r8, r8, lsr #13
   5599c:	andeq	r4, r8, ip, ror #12
   559a0:	push	{r4, r5, r6, r7, r8, r9, lr}
   559a4:	mov	r5, r0
   559a8:	sub	sp, sp, #12
   559ac:	mov	r7, r2
   559b0:	mov	r9, r1
   559b4:	mov	r2, #5
   559b8:	ldr	r1, [pc, #324]	; 55b04 <warn@@Base+0xd34>
   559bc:	mov	r0, #0
   559c0:	bl	10f90 <dcgettext@plt>
   559c4:	ldr	r6, [r5]
   559c8:	mov	r8, r0
   559cc:	mov	r0, r6
   559d0:	bl	11080 <strlen@plt>
   559d4:	mov	r4, r0
   559d8:	mov	r0, r7
   559dc:	bl	11080 <strlen@plt>
   559e0:	ldr	r3, [r5, #44]	; 0x2c
   559e4:	cmp	r3, #0
   559e8:	add	r0, r4, r0
   559ec:	add	r4, r0, #3
   559f0:	beq	55a30 <warn@@Base+0xc60>
   559f4:	ldr	r3, [r5, #36]	; 0x24
   559f8:	cmp	r3, #0
   559fc:	bne	55a60 <warn@@Base+0xc90>
   55a00:	mov	r0, r4
   55a04:	bl	11020 <malloc@plt>
   55a08:	subs	r5, r0, #0
   55a0c:	beq	55ae8 <warn@@Base+0xd18>
   55a10:	str	r7, [sp]
   55a14:	mov	r3, r6
   55a18:	mov	r1, r4
   55a1c:	ldr	r2, [pc, #228]	; 55b08 <warn@@Base+0xd38>
   55a20:	bl	110b0 <snprintf@plt>
   55a24:	mov	r0, r5
   55a28:	add	sp, sp, #12
   55a2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   55a30:	mov	r0, r4
   55a34:	bl	11020 <malloc@plt>
   55a38:	subs	r5, r0, #0
   55a3c:	beq	55ae8 <warn@@Base+0xd18>
   55a40:	str	r7, [sp]
   55a44:	mov	r3, r6
   55a48:	mov	r1, r4
   55a4c:	ldr	r2, [pc, #184]	; 55b0c <warn@@Base+0xd3c>
   55a50:	bl	110b0 <snprintf@plt>
   55a54:	mov	r0, r5
   55a58:	add	sp, sp, #12
   55a5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   55a60:	ldr	r9, [r9]
   55a64:	add	r4, r0, #5
   55a68:	cmp	r9, #0
   55a6c:	beq	55ab0 <warn@@Base+0xce0>
   55a70:	mov	r0, r9
   55a74:	bl	11080 <strlen@plt>
   55a78:	add	r4, r0, r4
   55a7c:	mov	r0, r4
   55a80:	bl	11020 <malloc@plt>
   55a84:	subs	r5, r0, #0
   55a88:	beq	55ae8 <warn@@Base+0xd18>
   55a8c:	str	r7, [sp, #4]
   55a90:	str	r9, [sp]
   55a94:	mov	r3, r6
   55a98:	mov	r1, r4
   55a9c:	ldr	r2, [pc, #108]	; 55b10 <warn@@Base+0xd40>
   55aa0:	bl	110b0 <snprintf@plt>
   55aa4:	mov	r0, r5
   55aa8:	add	sp, sp, #12
   55aac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   55ab0:	mov	r0, r8
   55ab4:	bl	11080 <strlen@plt>
   55ab8:	add	r4, r0, r4
   55abc:	mov	r0, r4
   55ac0:	bl	11020 <malloc@plt>
   55ac4:	subs	r5, r0, #0
   55ac8:	beq	55ae8 <warn@@Base+0xd18>
   55acc:	str	r7, [sp, #4]
   55ad0:	str	r8, [sp]
   55ad4:	mov	r3, r6
   55ad8:	mov	r1, r4
   55adc:	ldr	r2, [pc, #44]	; 55b10 <warn@@Base+0xd40>
   55ae0:	bl	110b0 <snprintf@plt>
   55ae4:	b	55a54 <warn@@Base+0xc84>
   55ae8:	mov	r2, #5
   55aec:	ldr	r1, [pc, #32]	; 55b14 <warn@@Base+0xd44>
   55af0:	mov	r0, #0
   55af4:	bl	10f90 <dcgettext@plt>
   55af8:	bl	548ac <error@@Base>
   55afc:	mov	r5, #0
   55b00:	b	55a54 <warn@@Base+0xc84>
   55b04:	andeq	r3, r6, ip
   55b08:	andeq	r4, r8, r0, ror #13
   55b0c:	ldrdeq	r4, [r8], -r8
   55b10:	andeq	r4, r8, ip, asr #13
   55b14:	andeq	r4, r8, r0, ror r4
   55b18:	push	{r4, r5, r6, lr}
   55b1c:	subs	r5, r0, #0
   55b20:	beq	55bb8 <warn@@Base+0xde8>
   55b24:	ldr	r3, [r5]
   55b28:	cmp	r3, #0
   55b2c:	beq	55ba8 <warn@@Base+0xdd8>
   55b30:	mov	r3, r5
   55b34:	mov	r0, #0
   55b38:	b	55b40 <warn@@Base+0xd70>
   55b3c:	mov	r0, r1
   55b40:	ldr	r2, [r3, #4]!
   55b44:	add	r1, r0, #1
   55b48:	cmp	r2, #0
   55b4c:	bne	55b3c <warn@@Base+0xd6c>
   55b50:	add	r0, r0, #2
   55b54:	lsl	r0, r0, #2
   55b58:	bl	5861c <warn@@Base+0x384c>
   55b5c:	ldr	r2, [r5]
   55b60:	cmp	r2, #0
   55b64:	mov	r6, r0
   55b68:	beq	55bb0 <warn@@Base+0xde0>
   55b6c:	sub	r4, r0, #4
   55b70:	mov	r0, r2
   55b74:	bl	586b8 <warn@@Base+0x38e8>
   55b78:	ldr	r2, [r5, #4]!
   55b7c:	add	r3, r4, #8
   55b80:	cmp	r2, #0
   55b84:	sub	r3, r3, r6
   55b88:	add	r4, r4, #4
   55b8c:	str	r0, [r4]
   55b90:	bne	55b70 <warn@@Base+0xda0>
   55b94:	add	r3, r6, r3
   55b98:	mov	r2, #0
   55b9c:	str	r2, [r3]
   55ba0:	mov	r0, r6
   55ba4:	pop	{r4, r5, r6, pc}
   55ba8:	mov	r0, #4
   55bac:	b	55b58 <warn@@Base+0xd88>
   55bb0:	mov	r3, r0
   55bb4:	b	55b98 <warn@@Base+0xdc8>
   55bb8:	mov	r6, r5
   55bbc:	b	55ba0 <warn@@Base+0xdd0>
   55bc0:	push	{r4, r5, r6, lr}
   55bc4:	subs	r5, r0, #0
   55bc8:	popeq	{r4, r5, r6, pc}
   55bcc:	ldr	r0, [r5]
   55bd0:	cmp	r0, #0
   55bd4:	beq	55bec <warn@@Base+0xe1c>
   55bd8:	mov	r4, r5
   55bdc:	bl	10f54 <free@plt>
   55be0:	ldr	r0, [r4, #4]!
   55be4:	cmp	r0, #0
   55be8:	bne	55bdc <warn@@Base+0xe0c>
   55bec:	mov	r0, r5
   55bf0:	pop	{r4, r5, r6, lr}
   55bf4:	b	10f54 <free@plt>
   55bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   55bfc:	subs	r4, r0, #0
   55c00:	sub	sp, sp, #12
   55c04:	moveq	r9, r4
   55c08:	beq	55da0 <warn@@Base+0xfd0>
   55c0c:	bl	11080 <strlen@plt>
   55c10:	mov	r9, #0
   55c14:	ldr	r6, [pc, #480]	; 55dfc <warn@@Base+0x102c>
   55c18:	mov	fp, r9
   55c1c:	mov	sl, r9
   55c20:	mov	r5, r9
   55c24:	mov	r8, r9
   55c28:	mov	r7, r9
   55c2c:	add	r0, r0, #1
   55c30:	bl	5861c <warn@@Base+0x384c>
   55c34:	str	r0, [sp]
   55c38:	ldrb	r2, [r4]
   55c3c:	lsl	r2, r2, #1
   55c40:	ldrh	r2, [r6, r2]
   55c44:	tst	r2, #64	; 0x40
   55c48:	beq	55c60 <warn@@Base+0xe90>
   55c4c:	ldrb	r2, [r4, #1]!
   55c50:	lsl	r2, r2, #1
   55c54:	ldrh	r2, [r6, r2]
   55c58:	tst	r2, #64	; 0x40
   55c5c:	bne	55c4c <warn@@Base+0xe7c>
   55c60:	cmp	fp, #0
   55c64:	lsl	r2, sl, #2
   55c68:	beq	55c7c <warn@@Base+0xeac>
   55c6c:	sub	r1, fp, #1
   55c70:	cmp	r1, sl
   55c74:	addgt	r1, r9, r2
   55c78:	bgt	55cac <warn@@Base+0xedc>
   55c7c:	cmp	r9, #0
   55c80:	str	r2, [sp, #4]
   55c84:	beq	55de4 <warn@@Base+0x1014>
   55c88:	lsl	fp, fp, #1
   55c8c:	mov	r0, r9
   55c90:	lsl	r1, fp, #2
   55c94:	bl	58678 <warn@@Base+0x38a8>
   55c98:	ldr	r2, [sp, #4]
   55c9c:	mov	r9, r0
   55ca0:	add	r1, r9, r2
   55ca4:	mov	r3, #0
   55ca8:	str	r3, [r9, r2]
   55cac:	ldrb	r2, [r4]
   55cb0:	ldr	r0, [sp]
   55cb4:	cmp	r2, #0
   55cb8:	bne	55cdc <warn@@Base+0xf0c>
   55cbc:	b	55d40 <warn@@Base+0xf70>
   55cc0:	cmp	r2, #39	; 0x27
   55cc4:	moveq	r7, r5
   55cc8:	beq	55cd0 <warn@@Base+0xf00>
   55ccc:	strb	r2, [r0], #1
   55cd0:	ldrb	r2, [r4, #1]!
   55cd4:	cmp	r2, #0
   55cd8:	beq	55d40 <warn@@Base+0xf70>
   55cdc:	lsl	ip, r2, #1
   55ce0:	ldrh	ip, [r6, ip]
   55ce4:	tst	ip, #64	; 0x40
   55ce8:	beq	55cf8 <warn@@Base+0xf28>
   55cec:	orr	ip, r8, r7
   55cf0:	orrs	ip, ip, r5
   55cf4:	beq	55dd4 <warn@@Base+0x1004>
   55cf8:	cmp	r5, #0
   55cfc:	movne	r5, #0
   55d00:	strbne	r2, [r0], #1
   55d04:	bne	55cd0 <warn@@Base+0xf00>
   55d08:	cmp	r2, #92	; 0x5c
   55d0c:	moveq	r5, #1
   55d10:	beq	55cd0 <warn@@Base+0xf00>
   55d14:	cmp	r7, #0
   55d18:	bne	55cc0 <warn@@Base+0xef0>
   55d1c:	cmp	r8, #0
   55d20:	beq	55dac <warn@@Base+0xfdc>
   55d24:	cmp	r2, #34	; 0x22
   55d28:	mov	r5, r7
   55d2c:	moveq	r8, r7
   55d30:	bne	55ccc <warn@@Base+0xefc>
   55d34:	ldrb	r2, [r4, #1]!
   55d38:	cmp	r2, #0
   55d3c:	bne	55cdc <warn@@Base+0xf0c>
   55d40:	mov	r3, #0
   55d44:	strb	r3, [r0]
   55d48:	ldr	r0, [sp]
   55d4c:	str	r1, [sp, #4]
   55d50:	bl	586b8 <warn@@Base+0x38e8>
   55d54:	ldr	r1, [sp, #4]
   55d58:	mov	r3, #0
   55d5c:	add	sl, sl, #1
   55d60:	str	r3, [r1, #4]
   55d64:	str	r0, [r1]
   55d68:	ldrb	r2, [r4]
   55d6c:	lsl	r1, r2, #1
   55d70:	ldrh	r1, [r6, r1]
   55d74:	tst	r1, #64	; 0x40
   55d78:	beq	55d90 <warn@@Base+0xfc0>
   55d7c:	ldrb	r2, [r4, #1]!
   55d80:	lsl	r1, r2, #1
   55d84:	ldrh	r1, [r6, r1]
   55d88:	tst	r1, #64	; 0x40
   55d8c:	bne	55d7c <warn@@Base+0xfac>
   55d90:	cmp	r2, #0
   55d94:	bne	55c38 <warn@@Base+0xe68>
   55d98:	ldr	r0, [sp]
   55d9c:	bl	10f54 <free@plt>
   55da0:	mov	r0, r9
   55da4:	add	sp, sp, #12
   55da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55dac:	cmp	r2, #39	; 0x27
   55db0:	mov	r5, r8
   55db4:	moveq	r7, #1
   55db8:	beq	55cd0 <warn@@Base+0xf00>
   55dbc:	cmp	r2, #34	; 0x22
   55dc0:	moveq	r7, r8
   55dc4:	strbne	r2, [r0], #1
   55dc8:	movne	r7, r8
   55dcc:	moveq	r8, #1
   55dd0:	b	55cd0 <warn@@Base+0xf00>
   55dd4:	mov	r8, ip
   55dd8:	mov	r7, ip
   55ddc:	mov	r5, ip
   55de0:	b	55d40 <warn@@Base+0xf70>
   55de4:	mov	r0, #32
   55de8:	bl	5861c <warn@@Base+0x384c>
   55dec:	mov	fp, #8
   55df0:	ldr	r2, [sp, #4]
   55df4:	mov	r9, r0
   55df8:	b	55ca0 <warn@@Base+0xed0>
   55dfc:	andeq	r7, r8, r8, ror #25
   55e00:	push	{r4, r5, r6, r7, r8, lr}
   55e04:	subs	r6, r1, #0
   55e08:	beq	55e94 <warn@@Base+0x10c4>
   55e0c:	ldr	r5, [r0]
   55e10:	mov	r8, r0
   55e14:	cmp	r5, #0
   55e18:	beq	55ebc <warn@@Base+0x10ec>
   55e1c:	ldr	r7, [pc, #160]	; 55ec4 <warn@@Base+0x10f4>
   55e20:	ldrb	r4, [r5]
   55e24:	cmp	r4, #0
   55e28:	bne	55e3c <warn@@Base+0x106c>
   55e2c:	b	55e9c <warn@@Base+0x10cc>
   55e30:	ldrb	r4, [r5, #1]!
   55e34:	cmp	r4, #0
   55e38:	beq	55e9c <warn@@Base+0x10cc>
   55e3c:	lsl	r3, r4, #1
   55e40:	mov	r1, r6
   55e44:	ldrh	r3, [r7, r3]
   55e48:	mov	r0, #92	; 0x5c
   55e4c:	tst	r3, #64	; 0x40
   55e50:	bne	55e74 <warn@@Base+0x10a4>
   55e54:	cmp	r4, #39	; 0x27
   55e58:	cmpne	r4, r0
   55e5c:	moveq	r3, #1
   55e60:	movne	r3, #0
   55e64:	cmp	r4, #34	; 0x22
   55e68:	orreq	r3, r3, #1
   55e6c:	cmp	r3, #0
   55e70:	beq	55e80 <warn@@Base+0x10b0>
   55e74:	bl	11140 <fputc@plt>
   55e78:	cmn	r0, #1
   55e7c:	beq	55e94 <warn@@Base+0x10c4>
   55e80:	mov	r0, r4
   55e84:	mov	r1, r6
   55e88:	bl	11140 <fputc@plt>
   55e8c:	cmn	r0, #1
   55e90:	bne	55e30 <warn@@Base+0x1060>
   55e94:	mov	r0, #1
   55e98:	pop	{r4, r5, r6, r7, r8, pc}
   55e9c:	mov	r1, r6
   55ea0:	mov	r0, #10
   55ea4:	bl	11140 <fputc@plt>
   55ea8:	cmn	r0, #1
   55eac:	beq	55e94 <warn@@Base+0x10c4>
   55eb0:	ldr	r5, [r8, #4]!
   55eb4:	cmp	r5, #0
   55eb8:	bne	55e20 <warn@@Base+0x1050>
   55ebc:	mov	r0, #0
   55ec0:	pop	{r4, r5, r6, r7, r8, pc}
   55ec4:	andeq	r7, r8, r8, ror #25
   55ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   55ecc:	mov	r7, r1
   55ed0:	ldr	r1, [r0]
   55ed4:	sub	sp, sp, #132	; 0x84
   55ed8:	ldr	r3, [r7]
   55edc:	mov	sl, r0
   55ee0:	mov	fp, #2000	; 0x7d0
   55ee4:	mov	r5, #0
   55ee8:	str	r3, [sp, #20]
   55eec:	add	r4, r5, #1
   55ef0:	cmp	r4, r1
   55ef4:	bge	55ff0 <warn@@Base+0x1220>
   55ef8:	ldr	r3, [r7]
   55efc:	lsl	r8, r4, #2
   55f00:	ldr	r0, [r3, r4, lsl #2]
   55f04:	ldrb	r2, [r0]
   55f08:	cmp	r2, #64	; 0x40
   55f0c:	bne	55ffc <warn@@Base+0x122c>
   55f10:	subs	fp, fp, #1
   55f14:	beq	5618c <warn@@Base+0x13bc>
   55f18:	add	r6, r0, #1
   55f1c:	mov	r1, r6
   55f20:	add	r2, sp, #24
   55f24:	mov	r0, #3
   55f28:	bl	111b8 <__xstat64@plt>
   55f2c:	cmp	r0, #0
   55f30:	blt	55ff8 <warn@@Base+0x1228>
   55f34:	ldr	r3, [sp, #40]	; 0x28
   55f38:	and	r3, r3, #61440	; 0xf000
   55f3c:	cmp	r3, #16384	; 0x4000
   55f40:	beq	561a8 <warn@@Base+0x13d8>
   55f44:	mov	r0, r6
   55f48:	ldr	r1, [pc, #656]	; 561e0 <warn@@Base+0x1410>
   55f4c:	bl	11164 <fopen64@plt>
   55f50:	subs	r9, r0, #0
   55f54:	beq	55ff8 <warn@@Base+0x1228>
   55f58:	mov	r2, #2
   55f5c:	mov	r1, #0
   55f60:	bl	111a0 <fseek@plt>
   55f64:	cmn	r0, #1
   55f68:	beq	55fd4 <warn@@Base+0x1204>
   55f6c:	mov	r0, r9
   55f70:	bl	10f78 <ftell@plt>
   55f74:	cmn	r0, #1
   55f78:	mov	r6, r0
   55f7c:	beq	55fd4 <warn@@Base+0x1204>
   55f80:	mov	r2, #0
   55f84:	mov	r1, r2
   55f88:	mov	r0, r9
   55f8c:	bl	111a0 <fseek@plt>
   55f90:	cmn	r0, #1
   55f94:	beq	55fd4 <warn@@Base+0x1204>
   55f98:	add	r0, r6, #1
   55f9c:	bl	5861c <warn@@Base+0x384c>
   55fa0:	mov	r3, r9
   55fa4:	mov	r2, r6
   55fa8:	mov	r1, #1
   55fac:	str	r0, [sp, #4]
   55fb0:	bl	10ffc <fread@plt>
   55fb4:	cmp	r6, r0
   55fb8:	mov	r3, r0
   55fbc:	beq	56008 <warn@@Base+0x1238>
   55fc0:	str	r0, [sp, #8]
   55fc4:	mov	r0, r9
   55fc8:	bl	10f60 <ferror@plt>
   55fcc:	cmp	r0, #0
   55fd0:	beq	56004 <warn@@Base+0x1234>
   55fd4:	mov	r0, r9
   55fd8:	bl	110f8 <fclose@plt>
   55fdc:	mov	r5, r4
   55fe0:	ldr	r1, [sl]
   55fe4:	add	r4, r5, #1
   55fe8:	cmp	r4, r1
   55fec:	blt	55ef8 <warn@@Base+0x1128>
   55ff0:	add	sp, sp, #132	; 0x84
   55ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55ff8:	ldr	r1, [sl]
   55ffc:	mov	r5, r4
   56000:	b	55eec <warn@@Base+0x111c>
   56004:	ldr	r3, [sp, #8]
   56008:	ldr	r1, [sp, #4]
   5600c:	mov	r2, #0
   56010:	strb	r2, [r1, r3]
   56014:	ldrb	r3, [r1]
   56018:	cmp	r3, r2
   5601c:	beq	5605c <warn@@Base+0x128c>
   56020:	ldr	r2, [pc, #444]	; 561e4 <warn@@Base+0x1414>
   56024:	lsl	r3, r3, #1
   56028:	ldrh	r3, [r2, r3]
   5602c:	tst	r3, #64	; 0x40
   56030:	beq	5609c <warn@@Base+0x12cc>
   56034:	ldr	r2, [sp, #4]
   56038:	b	56050 <warn@@Base+0x1280>
   5603c:	ldr	r1, [pc, #416]	; 561e4 <warn@@Base+0x1414>
   56040:	lsl	r3, r3, #1
   56044:	ldrh	r3, [r1, r3]
   56048:	tst	r3, #64	; 0x40
   5604c:	beq	5609c <warn@@Base+0x12cc>
   56050:	ldrb	r3, [r2, #1]!
   56054:	cmp	r3, #0
   56058:	bne	5603c <warn@@Base+0x126c>
   5605c:	mov	r0, #4
   56060:	bl	5861c <warn@@Base+0x384c>
   56064:	ldr	r2, [sp, #20]
   56068:	mov	r6, #0
   5606c:	mov	r3, r0
   56070:	str	r0, [sp, #8]
   56074:	ldr	r0, [r7]
   56078:	str	r6, [r3]
   5607c:	cmp	r2, r0
   56080:	bne	56180 <warn@@Base+0x13b0>
   56084:	mov	r0, r2
   56088:	bl	55b18 <warn@@Base+0xd48>
   5608c:	mov	r3, r6
   56090:	mov	r2, r8
   56094:	str	r0, [r7]
   56098:	b	560ec <warn@@Base+0x131c>
   5609c:	ldr	r0, [sp, #4]
   560a0:	bl	55bf8 <warn@@Base+0xe28>
   560a4:	ldr	r2, [sp, #20]
   560a8:	mov	r3, r0
   560ac:	str	r0, [sp, #8]
   560b0:	ldr	r0, [r7]
   560b4:	cmp	r0, r2
   560b8:	beq	561c8 <warn@@Base+0x13f8>
   560bc:	ldr	r6, [r3]
   560c0:	cmp	r6, #0
   560c4:	beq	56180 <warn@@Base+0x13b0>
   560c8:	ldr	r2, [sp, #8]
   560cc:	mov	r6, #0
   560d0:	ldr	r3, [r2, #4]!
   560d4:	add	r6, r6, #1
   560d8:	cmp	r3, #0
   560dc:	lsl	r3, r6, #2
   560e0:	bne	560d0 <warn@@Base+0x1300>
   560e4:	add	r2, r4, r6
   560e8:	lsl	r2, r2, #2
   560ec:	ldr	r0, [r0, r8]
   560f0:	str	r3, [sp, #12]
   560f4:	str	r2, [sp, #16]
   560f8:	bl	10f54 <free@plt>
   560fc:	ldr	r1, [sl]
   56100:	ldr	r0, [r7]
   56104:	add	r1, r1, #1
   56108:	add	r1, r1, r6
   5610c:	lsl	r1, r1, #2
   56110:	bl	58678 <warn@@Base+0x38a8>
   56114:	ldr	r2, [sp, #16]
   56118:	add	ip, r8, #4
   5611c:	mov	r1, r0
   56120:	ldr	r0, [sl]
   56124:	str	r1, [r7]
   56128:	sub	r4, r0, r4
   5612c:	add	r0, r1, r2
   56130:	add	r1, r1, ip
   56134:	lsl	r2, r4, #2
   56138:	bl	10f48 <memmove@plt>
   5613c:	ldr	r4, [sp, #8]
   56140:	ldr	r3, [sp, #12]
   56144:	ldr	r0, [r7]
   56148:	mov	r2, r3
   5614c:	mov	r1, r4
   56150:	add	r0, r0, r8
   56154:	bl	10f6c <memcpy@plt>
   56158:	ldr	r3, [sl]
   5615c:	mov	r0, r4
   56160:	sub	r3, r3, #1
   56164:	add	r6, r3, r6
   56168:	str	r6, [sl]
   5616c:	bl	10f54 <free@plt>
   56170:	ldr	r0, [sp, #4]
   56174:	bl	10f54 <free@plt>
   56178:	mov	r4, r5
   5617c:	b	55fd4 <warn@@Base+0x1204>
   56180:	mov	r3, r6
   56184:	mov	r2, r8
   56188:	b	560ec <warn@@Base+0x131c>
   5618c:	ldr	r0, [pc, #84]	; 561e8 <warn@@Base+0x1418>
   56190:	ldr	r2, [r3]
   56194:	ldr	r1, [pc, #80]	; 561ec <warn@@Base+0x141c>
   56198:	ldr	r0, [r0]
   5619c:	bl	11098 <fprintf@plt>
   561a0:	mov	r0, #1
   561a4:	bl	58528 <warn@@Base+0x3758>
   561a8:	ldr	r2, [r7]
   561ac:	ldr	r3, [pc, #52]	; 561e8 <warn@@Base+0x1418>
   561b0:	ldr	r1, [pc, #56]	; 561f0 <warn@@Base+0x1420>
   561b4:	ldr	r2, [r2]
   561b8:	ldr	r0, [r3]
   561bc:	bl	11098 <fprintf@plt>
   561c0:	mov	r0, #1
   561c4:	bl	58528 <warn@@Base+0x3758>
   561c8:	ldr	r3, [sp, #8]
   561cc:	ldr	r0, [sp, #20]
   561d0:	ldr	r6, [r3]
   561d4:	bl	55b18 <warn@@Base+0xd48>
   561d8:	str	r0, [r7]
   561dc:	b	560c0 <warn@@Base+0x12f0>
   561e0:	andeq	r5, r8, ip, lsl #27
   561e4:	andeq	r7, r8, r8, ror #25
   561e8:	andeq	sl, r9, r8, lsr #8
   561ec:	andeq	r4, r8, r8, ror #13
   561f0:	andeq	r4, r8, r4, lsl r7
   561f4:	subs	r3, r0, #0
   561f8:	beq	56220 <warn@@Base+0x1450>
   561fc:	ldr	r0, [r3]
   56200:	cmp	r0, #0
   56204:	bxeq	lr
   56208:	mov	r0, #0
   5620c:	ldr	r2, [r3, #4]!
   56210:	add	r0, r0, #1
   56214:	cmp	r2, #0
   56218:	bne	5620c <warn@@Base+0x143c>
   5621c:	bx	lr
   56220:	mov	r0, r3
   56224:	bx	lr
   56228:	push	{r0, r1, r2, r3}
   5622c:	push	{r4, r5, lr}
   56230:	sub	sp, sp, #12
   56234:	add	r4, sp, #28
   56238:	ldr	r3, [sp, #24]
   5623c:	str	r4, [sp, #4]
   56240:	cmp	r3, #0
   56244:	beq	56278 <warn@@Base+0x14a8>
   56248:	mov	r5, #0
   5624c:	mov	r0, r3
   56250:	bl	11080 <strlen@plt>
   56254:	ldr	r3, [r4], #4
   56258:	cmp	r3, #0
   5625c:	add	r5, r5, r0
   56260:	bne	5624c <warn@@Base+0x147c>
   56264:	mov	r0, r5
   56268:	add	sp, sp, #12
   5626c:	pop	{r4, r5, lr}
   56270:	add	sp, sp, #16
   56274:	bx	lr
   56278:	mov	r5, r3
   5627c:	b	56264 <warn@@Base+0x1494>
   56280:	push	{r1, r2, r3}
   56284:	push	{r4, r5, r6, r7, r8, lr}
   56288:	sub	sp, sp, #12
   5628c:	add	r4, sp, #40	; 0x28
   56290:	ldr	r5, [sp, #36]	; 0x24
   56294:	mov	r7, r0
   56298:	cmp	r5, #0
   5629c:	str	r4, [sp, #4]
   562a0:	mov	r6, r0
   562a4:	beq	562d4 <warn@@Base+0x1504>
   562a8:	mov	r0, r5
   562ac:	bl	11080 <strlen@plt>
   562b0:	mov	r1, r5
   562b4:	mov	r8, r0
   562b8:	mov	r2, r0
   562bc:	mov	r0, r6
   562c0:	bl	10f6c <memcpy@plt>
   562c4:	ldr	r5, [r4], #4
   562c8:	add	r6, r6, r8
   562cc:	cmp	r5, #0
   562d0:	bne	562a8 <warn@@Base+0x14d8>
   562d4:	mov	r3, #0
   562d8:	mov	r0, r7
   562dc:	strb	r3, [r6]
   562e0:	add	sp, sp, #12
   562e4:	pop	{r4, r5, r6, r7, r8, lr}
   562e8:	add	sp, sp, #12
   562ec:	bx	lr
   562f0:	push	{r0, r1, r2, r3}
   562f4:	push	{r4, r5, r6, r7, r8, lr}
   562f8:	sub	sp, sp, #8
   562fc:	ldr	r7, [pc, #92]	; 56360 <warn@@Base+0x1590>
   56300:	ldr	r5, [sp, #32]
   56304:	add	r4, sp, #36	; 0x24
   56308:	cmp	r5, #0
   5630c:	ldr	r6, [r7]
   56310:	str	r4, [sp, #4]
   56314:	beq	56344 <warn@@Base+0x1574>
   56318:	mov	r0, r5
   5631c:	bl	11080 <strlen@plt>
   56320:	mov	r1, r5
   56324:	mov	r8, r0
   56328:	mov	r2, r0
   5632c:	mov	r0, r6
   56330:	bl	10f6c <memcpy@plt>
   56334:	ldr	r5, [r4], #4
   56338:	add	r6, r6, r8
   5633c:	cmp	r5, #0
   56340:	bne	56318 <warn@@Base+0x1548>
   56344:	mov	r3, #0
   56348:	strb	r3, [r6]
   5634c:	ldr	r0, [r7]
   56350:	add	sp, sp, #8
   56354:	pop	{r4, r5, r6, r7, r8, lr}
   56358:	add	sp, sp, #16
   5635c:	bx	lr
   56360:	andeq	lr, r9, r4, ror #26
   56364:	push	{r0, r1, r2, r3}
   56368:	push	{r4, r5, r6, r7, r8, lr}
   5636c:	sub	sp, sp, #8
   56370:	add	r7, sp, #36	; 0x24
   56374:	ldr	r4, [sp, #32]
   56378:	str	r7, [sp, #4]
   5637c:	cmp	r4, #0
   56380:	beq	56404 <warn@@Base+0x1634>
   56384:	mov	r6, r7
   56388:	mov	r3, r4
   5638c:	mov	r5, #0
   56390:	mov	r0, r3
   56394:	bl	11080 <strlen@plt>
   56398:	ldr	r3, [r6], #4
   5639c:	cmp	r3, #0
   563a0:	add	r5, r5, r0
   563a4:	bne	56390 <warn@@Base+0x15c0>
   563a8:	add	r0, r5, #1
   563ac:	bl	5861c <warn@@Base+0x384c>
   563b0:	str	r7, [sp, #4]
   563b4:	mov	r8, r0
   563b8:	mov	r5, r0
   563bc:	mov	r0, r4
   563c0:	bl	11080 <strlen@plt>
   563c4:	mov	r1, r4
   563c8:	mov	r6, r0
   563cc:	mov	r2, r0
   563d0:	mov	r0, r5
   563d4:	bl	10f6c <memcpy@plt>
   563d8:	ldr	r4, [r7], #4
   563dc:	add	r5, r5, r6
   563e0:	cmp	r4, #0
   563e4:	bne	563bc <warn@@Base+0x15ec>
   563e8:	mov	r3, #0
   563ec:	mov	r0, r8
   563f0:	strb	r3, [r5]
   563f4:	add	sp, sp, #8
   563f8:	pop	{r4, r5, r6, r7, r8, lr}
   563fc:	add	sp, sp, #16
   56400:	bx	lr
   56404:	mov	r0, #1
   56408:	bl	5861c <warn@@Base+0x384c>
   5640c:	str	r7, [sp, #4]
   56410:	mov	r5, r0
   56414:	mov	r8, r0
   56418:	b	563e8 <warn@@Base+0x1618>
   5641c:	push	{r1, r2, r3}
   56420:	push	{r4, r5, r6, r7, r8, r9, lr}
   56424:	sub	sp, sp, #8
   56428:	add	r7, sp, #40	; 0x28
   5642c:	ldr	r4, [sp, #36]	; 0x24
   56430:	mov	r8, r0
   56434:	cmp	r4, #0
   56438:	str	r7, [sp, #4]
   5643c:	beq	564d0 <warn@@Base+0x1700>
   56440:	mov	r6, r7
   56444:	mov	r3, r4
   56448:	mov	r5, #0
   5644c:	mov	r0, r3
   56450:	bl	11080 <strlen@plt>
   56454:	ldr	r3, [r6], #4
   56458:	cmp	r3, #0
   5645c:	add	r5, r5, r0
   56460:	bne	5644c <warn@@Base+0x167c>
   56464:	add	r0, r5, #1
   56468:	bl	5861c <warn@@Base+0x384c>
   5646c:	str	r7, [sp, #4]
   56470:	mov	r9, r0
   56474:	mov	r5, r0
   56478:	mov	r0, r4
   5647c:	bl	11080 <strlen@plt>
   56480:	mov	r1, r4
   56484:	mov	r6, r0
   56488:	mov	r2, r0
   5648c:	mov	r0, r5
   56490:	bl	10f6c <memcpy@plt>
   56494:	ldr	r4, [r7], #4
   56498:	add	r5, r5, r6
   5649c:	cmp	r4, #0
   564a0:	bne	56478 <warn@@Base+0x16a8>
   564a4:	mov	r3, #0
   564a8:	cmp	r8, #0
   564ac:	strb	r3, [r5]
   564b0:	beq	564bc <warn@@Base+0x16ec>
   564b4:	mov	r0, r8
   564b8:	bl	10f54 <free@plt>
   564bc:	mov	r0, r9
   564c0:	add	sp, sp, #8
   564c4:	pop	{r4, r5, r6, r7, r8, r9, lr}
   564c8:	add	sp, sp, #12
   564cc:	bx	lr
   564d0:	mov	r0, #1
   564d4:	bl	5861c <warn@@Base+0x384c>
   564d8:	str	r7, [sp, #4]
   564dc:	mov	r5, r0
   564e0:	mov	r9, r0
   564e4:	b	564a4 <warn@@Base+0x16d4>
   564e8:	cmp	r0, #49	; 0x31
   564ec:	beq	56b00 <warn@@Base+0x1d30>
   564f0:	bls	56554 <warn@@Base+0x1784>
   564f4:	cmp	r0, #72	; 0x48
   564f8:	beq	56af8 <warn@@Base+0x1d28>
   564fc:	bls	56630 <warn@@Base+0x1860>
   56500:	ldr	r3, [pc, #1536]	; 56b08 <warn@@Base+0x1d38>
   56504:	cmp	r0, r3
   56508:	beq	56ae8 <warn@@Base+0x1d18>
   5650c:	bls	565f0 <warn@@Base+0x1820>
   56510:	ldr	r3, [pc, #1524]	; 56b0c <warn@@Base+0x1d3c>
   56514:	cmp	r0, r3
   56518:	beq	56ac8 <warn@@Base+0x1cf8>
   5651c:	bhi	565c0 <warn@@Base+0x17f0>
   56520:	sub	r3, r3, #3
   56524:	cmp	r0, r3
   56528:	beq	56a88 <warn@@Base+0x1cb8>
   5652c:	bhi	565a0 <warn@@Base+0x17d0>
   56530:	sub	r3, r3, #2
   56534:	cmp	r0, r3
   56538:	beq	56918 <warn@@Base+0x1b48>
   5653c:	ldr	r2, [pc, #1484]	; 56b10 <warn@@Base+0x1d40>
   56540:	ldr	r3, [pc, #1484]	; 56b14 <warn@@Base+0x1d44>
   56544:	cmp	r0, r2
   56548:	movne	r3, #0
   5654c:	mov	r0, r3
   56550:	bx	lr
   56554:	cmp	r0, #27
   56558:	beq	56af0 <warn@@Base+0x1d20>
   5655c:	bhi	567c0 <warn@@Base+0x19f0>
   56560:	cmp	r0, #15
   56564:	beq	56ad0 <warn@@Base+0x1d00>
   56568:	bhi	56790 <warn@@Base+0x19c0>
   5656c:	cmp	r0, #4
   56570:	beq	56a90 <warn@@Base+0x1cc0>
   56574:	bls	56814 <warn@@Base+0x1a44>
   56578:	cmp	r0, #10
   5657c:	beq	56a68 <warn@@Base+0x1c98>
   56580:	bhi	56778 <warn@@Base+0x19a8>
   56584:	cmp	r0, #5
   56588:	beq	569a8 <warn@@Base+0x1bd8>
   5658c:	ldr	r3, [pc, #1412]	; 56b18 <warn@@Base+0x1d48>
   56590:	cmp	r0, #8
   56594:	movne	r3, #0
   56598:	mov	r0, r3
   5659c:	bx	lr
   565a0:	ldr	r3, [pc, #1396]	; 56b1c <warn@@Base+0x1d4c>
   565a4:	cmp	r0, r3
   565a8:	beq	569a0 <warn@@Base+0x1bd0>
   565ac:	ldr	r2, [pc, #1388]	; 56b20 <warn@@Base+0x1d50>
   565b0:	ldr	r3, [pc, #1388]	; 56b24 <warn@@Base+0x1d54>
   565b4:	cmp	r0, r2
   565b8:	movne	r3, #0
   565bc:	b	5654c <warn@@Base+0x177c>
   565c0:	ldr	r3, [pc, #1376]	; 56b28 <warn@@Base+0x1d58>
   565c4:	cmp	r0, r3
   565c8:	beq	56a48 <warn@@Base+0x1c78>
   565cc:	bhi	5666c <warn@@Base+0x189c>
   565d0:	sub	r3, r3, #2
   565d4:	cmp	r0, r3
   565d8:	beq	56998 <warn@@Base+0x1bc8>
   565dc:	ldr	r2, [pc, #1352]	; 56b2c <warn@@Base+0x1d5c>
   565e0:	ldr	r3, [pc, #1352]	; 56b30 <warn@@Base+0x1d60>
   565e4:	cmp	r0, r2
   565e8:	movne	r3, #0
   565ec:	b	5654c <warn@@Base+0x177c>
   565f0:	sub	r3, r3, #116	; 0x74
   565f4:	cmp	r0, r3
   565f8:	beq	56a98 <warn@@Base+0x1cc8>
   565fc:	bls	56714 <warn@@Base+0x1944>
   56600:	ldr	r3, [pc, #1324]	; 56b34 <warn@@Base+0x1d64>
   56604:	cmp	r0, r3
   56608:	beq	56a70 <warn@@Base+0x1ca0>
   5660c:	bhi	566f4 <warn@@Base+0x1924>
   56610:	sub	r3, r3, #112	; 0x70
   56614:	cmp	r0, r3
   56618:	beq	56990 <warn@@Base+0x1bc0>
   5661c:	ldr	r2, [pc, #1300]	; 56b38 <warn@@Base+0x1d68>
   56620:	ldr	r3, [pc, #1300]	; 56b3c <warn@@Base+0x1d6c>
   56624:	cmp	r0, r2
   56628:	movne	r3, #0
   5662c:	b	5654c <warn@@Base+0x177c>
   56630:	cmp	r0, #60	; 0x3c
   56634:	beq	56ae0 <warn@@Base+0x1d10>
   56638:	bhi	566c4 <warn@@Base+0x18f4>
   5663c:	cmp	r0, #54	; 0x36
   56640:	beq	56aa0 <warn@@Base+0x1cd0>
   56644:	bls	566a0 <warn@@Base+0x18d0>
   56648:	cmp	r0, #57	; 0x39
   5664c:	beq	56a80 <warn@@Base+0x1cb0>
   56650:	bhi	56688 <warn@@Base+0x18b8>
   56654:	cmp	r0, #55	; 0x37
   56658:	beq	56988 <warn@@Base+0x1bb8>
   5665c:	cmp	r0, #56	; 0x38
   56660:	ldr	r3, [pc, #1240]	; 56b40 <warn@@Base+0x1d70>
   56664:	movne	r3, #0
   56668:	b	5654c <warn@@Base+0x177c>
   5666c:	cmp	r0, #40960	; 0xa000
   56670:	beq	56980 <warn@@Base+0x1bb0>
   56674:	ldr	r2, [pc, #1224]	; 56b44 <warn@@Base+0x1d74>
   56678:	ldr	r3, [pc, #1224]	; 56b48 <warn@@Base+0x1d78>
   5667c:	cmp	r0, r2
   56680:	movne	r3, #0
   56684:	b	5654c <warn@@Base+0x177c>
   56688:	cmp	r0, #58	; 0x3a
   5668c:	beq	56978 <warn@@Base+0x1ba8>
   56690:	cmp	r0, #59	; 0x3b
   56694:	ldr	r3, [pc, #1200]	; 56b4c <warn@@Base+0x1d7c>
   56698:	movne	r3, #0
   5669c:	b	5654c <warn@@Base+0x177c>
   566a0:	cmp	r0, #51	; 0x33
   566a4:	beq	56a40 <warn@@Base+0x1c70>
   566a8:	bcc	569e0 <warn@@Base+0x1c10>
   566ac:	cmp	r0, #52	; 0x34
   566b0:	beq	569c8 <warn@@Base+0x1bf8>
   566b4:	cmp	r0, #53	; 0x35
   566b8:	ldr	r3, [pc, #1168]	; 56b50 <warn@@Base+0x1d80>
   566bc:	movne	r3, #0
   566c0:	b	5654c <warn@@Base+0x177c>
   566c4:	cmp	r0, #66	; 0x42
   566c8:	beq	56ab0 <warn@@Base+0x1ce0>
   566cc:	bls	56754 <warn@@Base+0x1984>
   566d0:	cmp	r0, #69	; 0x45
   566d4:	beq	56a60 <warn@@Base+0x1c90>
   566d8:	bhi	5673c <warn@@Base+0x196c>
   566dc:	cmp	r0, #67	; 0x43
   566e0:	beq	56970 <warn@@Base+0x1ba0>
   566e4:	cmp	r0, #68	; 0x44
   566e8:	ldr	r3, [pc, #1124]	; 56b54 <warn@@Base+0x1d84>
   566ec:	movne	r3, #0
   566f0:	b	5654c <warn@@Base+0x177c>
   566f4:	ldr	r3, [pc, #1116]	; 56b58 <warn@@Base+0x1d88>
   566f8:	cmp	r0, r3
   566fc:	beq	56968 <warn@@Base+0x1b98>
   56700:	ldr	r2, [pc, #1108]	; 56b5c <warn@@Base+0x1d8c>
   56704:	ldr	r3, [pc, #1108]	; 56b60 <warn@@Base+0x1d90>
   56708:	cmp	r0, r2
   5670c:	movne	r3, #0
   56710:	b	5654c <warn@@Base+0x177c>
   56714:	cmp	r0, #74	; 0x4a
   56718:	beq	56a28 <warn@@Base+0x1c58>
   5671c:	bcc	569e8 <warn@@Base+0x1c18>
   56720:	cmp	r0, #75	; 0x4b
   56724:	beq	569d8 <warn@@Base+0x1c08>
   56728:	ldr	r2, [pc, #1076]	; 56b64 <warn@@Base+0x1d94>
   5672c:	ldr	r3, [pc, #1076]	; 56b68 <warn@@Base+0x1d98>
   56730:	cmp	r0, r2
   56734:	movne	r3, #0
   56738:	b	5654c <warn@@Base+0x177c>
   5673c:	cmp	r0, #70	; 0x46
   56740:	beq	56960 <warn@@Base+0x1b90>
   56744:	cmp	r0, #71	; 0x47
   56748:	ldr	r3, [pc, #1052]	; 56b6c <warn@@Base+0x1d9c>
   5674c:	movne	r3, #0
   56750:	b	5654c <warn@@Base+0x177c>
   56754:	cmp	r0, #63	; 0x3f
   56758:	beq	56a30 <warn@@Base+0x1c60>
   5675c:	bls	5683c <warn@@Base+0x1a6c>
   56760:	cmp	r0, #64	; 0x40
   56764:	beq	56958 <warn@@Base+0x1b88>
   56768:	cmp	r0, #65	; 0x41
   5676c:	ldr	r3, [pc, #1020]	; 56b70 <warn@@Base+0x1da0>
   56770:	movne	r3, #0
   56774:	b	5654c <warn@@Base+0x177c>
   56778:	cmp	r0, #11
   5677c:	beq	56950 <warn@@Base+0x1b80>
   56780:	cmp	r0, #13
   56784:	ldr	r3, [pc, #1000]	; 56b74 <warn@@Base+0x1da4>
   56788:	movne	r3, #0
   5678c:	b	5654c <warn@@Base+0x177c>
   56790:	cmp	r0, #21
   56794:	beq	56ac0 <warn@@Base+0x1cf0>
   56798:	bls	5684c <warn@@Base+0x1a7c>
   5679c:	cmp	r0, #24
   567a0:	beq	56a50 <warn@@Base+0x1c80>
   567a4:	bhi	567fc <warn@@Base+0x1a2c>
   567a8:	cmp	r0, #22
   567ac:	beq	56948 <warn@@Base+0x1b78>
   567b0:	cmp	r0, #23
   567b4:	ldr	r3, [pc, #956]	; 56b78 <warn@@Base+0x1da8>
   567b8:	movne	r3, #0
   567bc:	b	5654c <warn@@Base+0x177c>
   567c0:	cmp	r0, #38	; 0x26
   567c4:	beq	56ad8 <warn@@Base+0x1d08>
   567c8:	bhi	568ac <warn@@Base+0x1adc>
   567cc:	cmp	r0, #32
   567d0:	beq	56ab8 <warn@@Base+0x1ce8>
   567d4:	bls	56888 <warn@@Base+0x1ab8>
   567d8:	cmp	r0, #35	; 0x23
   567dc:	beq	56a78 <warn@@Base+0x1ca8>
   567e0:	bhi	56870 <warn@@Base+0x1aa0>
   567e4:	cmp	r0, #33	; 0x21
   567e8:	beq	56940 <warn@@Base+0x1b70>
   567ec:	cmp	r0, #34	; 0x22
   567f0:	ldr	r3, [pc, #900]	; 56b7c <warn@@Base+0x1dac>
   567f4:	movne	r3, #0
   567f8:	b	5654c <warn@@Base+0x177c>
   567fc:	cmp	r0, #25
   56800:	beq	56938 <warn@@Base+0x1b68>
   56804:	cmp	r0, #26
   56808:	ldr	r3, [pc, #880]	; 56b80 <warn@@Base+0x1db0>
   5680c:	movne	r3, #0
   56810:	b	5654c <warn@@Base+0x177c>
   56814:	cmp	r0, #1
   56818:	beq	56a38 <warn@@Base+0x1c68>
   5681c:	cmp	r0, #0
   56820:	beq	569f0 <warn@@Base+0x1c20>
   56824:	cmp	r0, #2
   56828:	beq	569c0 <warn@@Base+0x1bf0>
   5682c:	cmp	r0, #3
   56830:	ldr	r3, [pc, #844]	; 56b84 <warn@@Base+0x1db4>
   56834:	movne	r3, #0
   56838:	b	5654c <warn@@Base+0x177c>
   5683c:	cmp	r0, #61	; 0x3d
   56840:	ldr	r3, [pc, #832]	; 56b88 <warn@@Base+0x1db8>
   56844:	movne	r3, #0
   56848:	b	5654c <warn@@Base+0x177c>
   5684c:	cmp	r0, #17
   56850:	beq	56a18 <warn@@Base+0x1c48>
   56854:	bcc	569f8 <warn@@Base+0x1c28>
   56858:	cmp	r0, #18
   5685c:	beq	569b8 <warn@@Base+0x1be8>
   56860:	cmp	r0, #19
   56864:	ldr	r3, [pc, #800]	; 56b8c <warn@@Base+0x1dbc>
   56868:	movne	r3, #0
   5686c:	b	5654c <warn@@Base+0x177c>
   56870:	cmp	r0, #36	; 0x24
   56874:	beq	56930 <warn@@Base+0x1b60>
   56878:	cmp	r0, #37	; 0x25
   5687c:	ldr	r3, [pc, #780]	; 56b90 <warn@@Base+0x1dc0>
   56880:	movne	r3, #0
   56884:	b	5654c <warn@@Base+0x177c>
   56888:	cmp	r0, #29
   5688c:	beq	56a20 <warn@@Base+0x1c50>
   56890:	bcc	56a00 <warn@@Base+0x1c30>
   56894:	cmp	r0, #30
   56898:	beq	569d0 <warn@@Base+0x1c00>
   5689c:	cmp	r0, #31
   568a0:	ldr	r3, [pc, #748]	; 56b94 <warn@@Base+0x1dc4>
   568a4:	movne	r3, #0
   568a8:	b	5654c <warn@@Base+0x177c>
   568ac:	cmp	r0, #43	; 0x2b
   568b0:	beq	56aa8 <warn@@Base+0x1cd8>
   568b4:	bls	568dc <warn@@Base+0x1b0c>
   568b8:	cmp	r0, #46	; 0x2e
   568bc:	beq	56a58 <warn@@Base+0x1c88>
   568c0:	bhi	56900 <warn@@Base+0x1b30>
   568c4:	cmp	r0, #44	; 0x2c
   568c8:	beq	56928 <warn@@Base+0x1b58>
   568cc:	cmp	r0, #45	; 0x2d
   568d0:	ldr	r3, [pc, #704]	; 56b98 <warn@@Base+0x1dc8>
   568d4:	movne	r3, #0
   568d8:	b	5654c <warn@@Base+0x177c>
   568dc:	cmp	r0, #40	; 0x28
   568e0:	beq	56a10 <warn@@Base+0x1c40>
   568e4:	bcc	56a08 <warn@@Base+0x1c38>
   568e8:	cmp	r0, #41	; 0x29
   568ec:	beq	569b0 <warn@@Base+0x1be0>
   568f0:	cmp	r0, #42	; 0x2a
   568f4:	ldr	r3, [pc, #672]	; 56b9c <warn@@Base+0x1dcc>
   568f8:	movne	r3, #0
   568fc:	b	5654c <warn@@Base+0x177c>
   56900:	cmp	r0, #47	; 0x2f
   56904:	beq	56920 <warn@@Base+0x1b50>
   56908:	cmp	r0, #48	; 0x30
   5690c:	ldr	r3, [pc, #652]	; 56ba0 <warn@@Base+0x1dd0>
   56910:	movne	r3, #0
   56914:	b	5654c <warn@@Base+0x177c>
   56918:	ldr	r3, [pc, #644]	; 56ba4 <warn@@Base+0x1dd4>
   5691c:	b	5654c <warn@@Base+0x177c>
   56920:	ldr	r3, [pc, #640]	; 56ba8 <warn@@Base+0x1dd8>
   56924:	b	5654c <warn@@Base+0x177c>
   56928:	ldr	r3, [pc, #636]	; 56bac <warn@@Base+0x1ddc>
   5692c:	b	5654c <warn@@Base+0x177c>
   56930:	ldr	r3, [pc, #632]	; 56bb0 <warn@@Base+0x1de0>
   56934:	b	5654c <warn@@Base+0x177c>
   56938:	ldr	r3, [pc, #628]	; 56bb4 <warn@@Base+0x1de4>
   5693c:	b	5654c <warn@@Base+0x177c>
   56940:	ldr	r3, [pc, #624]	; 56bb8 <warn@@Base+0x1de8>
   56944:	b	5654c <warn@@Base+0x177c>
   56948:	ldr	r3, [pc, #620]	; 56bbc <warn@@Base+0x1dec>
   5694c:	b	5654c <warn@@Base+0x177c>
   56950:	ldr	r3, [pc, #616]	; 56bc0 <warn@@Base+0x1df0>
   56954:	b	5654c <warn@@Base+0x177c>
   56958:	ldr	r3, [pc, #612]	; 56bc4 <warn@@Base+0x1df4>
   5695c:	b	5654c <warn@@Base+0x177c>
   56960:	ldr	r3, [pc, #608]	; 56bc8 <warn@@Base+0x1df8>
   56964:	b	5654c <warn@@Base+0x177c>
   56968:	ldr	r3, [pc, #604]	; 56bcc <warn@@Base+0x1dfc>
   5696c:	b	5654c <warn@@Base+0x177c>
   56970:	ldr	r3, [pc, #600]	; 56bd0 <warn@@Base+0x1e00>
   56974:	b	5654c <warn@@Base+0x177c>
   56978:	ldr	r3, [pc, #596]	; 56bd4 <warn@@Base+0x1e04>
   5697c:	b	5654c <warn@@Base+0x177c>
   56980:	ldr	r3, [pc, #592]	; 56bd8 <warn@@Base+0x1e08>
   56984:	b	5654c <warn@@Base+0x177c>
   56988:	ldr	r3, [pc, #588]	; 56bdc <warn@@Base+0x1e0c>
   5698c:	b	5654c <warn@@Base+0x177c>
   56990:	ldr	r3, [pc, #584]	; 56be0 <warn@@Base+0x1e10>
   56994:	b	5654c <warn@@Base+0x177c>
   56998:	ldr	r3, [pc, #580]	; 56be4 <warn@@Base+0x1e14>
   5699c:	b	5654c <warn@@Base+0x177c>
   569a0:	ldr	r3, [pc, #576]	; 56be8 <warn@@Base+0x1e18>
   569a4:	b	5654c <warn@@Base+0x177c>
   569a8:	ldr	r3, [pc, #572]	; 56bec <warn@@Base+0x1e1c>
   569ac:	b	5654c <warn@@Base+0x177c>
   569b0:	ldr	r3, [pc, #568]	; 56bf0 <warn@@Base+0x1e20>
   569b4:	b	5654c <warn@@Base+0x177c>
   569b8:	ldr	r3, [pc, #564]	; 56bf4 <warn@@Base+0x1e24>
   569bc:	b	5654c <warn@@Base+0x177c>
   569c0:	ldr	r3, [pc, #560]	; 56bf8 <warn@@Base+0x1e28>
   569c4:	b	5654c <warn@@Base+0x177c>
   569c8:	ldr	r3, [pc, #556]	; 56bfc <warn@@Base+0x1e2c>
   569cc:	b	5654c <warn@@Base+0x177c>
   569d0:	ldr	r3, [pc, #552]	; 56c00 <warn@@Base+0x1e30>
   569d4:	b	5654c <warn@@Base+0x177c>
   569d8:	ldr	r3, [pc, #548]	; 56c04 <warn@@Base+0x1e34>
   569dc:	b	5654c <warn@@Base+0x177c>
   569e0:	ldr	r3, [pc, #544]	; 56c08 <warn@@Base+0x1e38>
   569e4:	b	5654c <warn@@Base+0x177c>
   569e8:	ldr	r3, [pc, #540]	; 56c0c <warn@@Base+0x1e3c>
   569ec:	b	5654c <warn@@Base+0x177c>
   569f0:	ldr	r3, [pc, #536]	; 56c10 <warn@@Base+0x1e40>
   569f4:	b	5654c <warn@@Base+0x177c>
   569f8:	ldr	r3, [pc, #532]	; 56c14 <warn@@Base+0x1e44>
   569fc:	b	5654c <warn@@Base+0x177c>
   56a00:	ldr	r3, [pc, #528]	; 56c18 <warn@@Base+0x1e48>
   56a04:	b	5654c <warn@@Base+0x177c>
   56a08:	ldr	r3, [pc, #524]	; 56c1c <warn@@Base+0x1e4c>
   56a0c:	b	5654c <warn@@Base+0x177c>
   56a10:	ldr	r3, [pc, #520]	; 56c20 <warn@@Base+0x1e50>
   56a14:	b	5654c <warn@@Base+0x177c>
   56a18:	ldr	r3, [pc, #516]	; 56c24 <warn@@Base+0x1e54>
   56a1c:	b	5654c <warn@@Base+0x177c>
   56a20:	ldr	r3, [pc, #512]	; 56c28 <warn@@Base+0x1e58>
   56a24:	b	5654c <warn@@Base+0x177c>
   56a28:	ldr	r3, [pc, #508]	; 56c2c <warn@@Base+0x1e5c>
   56a2c:	b	5654c <warn@@Base+0x177c>
   56a30:	ldr	r3, [pc, #504]	; 56c30 <warn@@Base+0x1e60>
   56a34:	b	5654c <warn@@Base+0x177c>
   56a38:	ldr	r3, [pc, #500]	; 56c34 <warn@@Base+0x1e64>
   56a3c:	b	5654c <warn@@Base+0x177c>
   56a40:	ldr	r3, [pc, #496]	; 56c38 <warn@@Base+0x1e68>
   56a44:	b	5654c <warn@@Base+0x177c>
   56a48:	ldr	r3, [pc, #492]	; 56c3c <warn@@Base+0x1e6c>
   56a4c:	b	5654c <warn@@Base+0x177c>
   56a50:	ldr	r3, [pc, #488]	; 56c40 <warn@@Base+0x1e70>
   56a54:	b	5654c <warn@@Base+0x177c>
   56a58:	ldr	r3, [pc, #484]	; 56c44 <warn@@Base+0x1e74>
   56a5c:	b	5654c <warn@@Base+0x177c>
   56a60:	ldr	r3, [pc, #480]	; 56c48 <warn@@Base+0x1e78>
   56a64:	b	5654c <warn@@Base+0x177c>
   56a68:	ldr	r3, [pc, #476]	; 56c4c <warn@@Base+0x1e7c>
   56a6c:	b	5654c <warn@@Base+0x177c>
   56a70:	ldr	r3, [pc, #472]	; 56c50 <warn@@Base+0x1e80>
   56a74:	b	5654c <warn@@Base+0x177c>
   56a78:	ldr	r3, [pc, #468]	; 56c54 <warn@@Base+0x1e84>
   56a7c:	b	5654c <warn@@Base+0x177c>
   56a80:	ldr	r3, [pc, #464]	; 56c58 <warn@@Base+0x1e88>
   56a84:	b	5654c <warn@@Base+0x177c>
   56a88:	ldr	r3, [pc, #460]	; 56c5c <warn@@Base+0x1e8c>
   56a8c:	b	5654c <warn@@Base+0x177c>
   56a90:	ldr	r3, [pc, #456]	; 56c60 <warn@@Base+0x1e90>
   56a94:	b	5654c <warn@@Base+0x177c>
   56a98:	ldr	r3, [pc, #452]	; 56c64 <warn@@Base+0x1e94>
   56a9c:	b	5654c <warn@@Base+0x177c>
   56aa0:	ldr	r3, [pc, #448]	; 56c68 <warn@@Base+0x1e98>
   56aa4:	b	5654c <warn@@Base+0x177c>
   56aa8:	ldr	r3, [pc, #444]	; 56c6c <warn@@Base+0x1e9c>
   56aac:	b	5654c <warn@@Base+0x177c>
   56ab0:	ldr	r3, [pc, #440]	; 56c70 <warn@@Base+0x1ea0>
   56ab4:	b	5654c <warn@@Base+0x177c>
   56ab8:	ldr	r3, [pc, #436]	; 56c74 <warn@@Base+0x1ea4>
   56abc:	b	5654c <warn@@Base+0x177c>
   56ac0:	ldr	r3, [pc, #432]	; 56c78 <warn@@Base+0x1ea8>
   56ac4:	b	5654c <warn@@Base+0x177c>
   56ac8:	ldr	r3, [pc, #428]	; 56c7c <warn@@Base+0x1eac>
   56acc:	b	5654c <warn@@Base+0x177c>
   56ad0:	ldr	r3, [pc, #424]	; 56c80 <warn@@Base+0x1eb0>
   56ad4:	b	5654c <warn@@Base+0x177c>
   56ad8:	ldr	r3, [pc, #420]	; 56c84 <warn@@Base+0x1eb4>
   56adc:	b	5654c <warn@@Base+0x177c>
   56ae0:	ldr	r3, [pc, #416]	; 56c88 <warn@@Base+0x1eb8>
   56ae4:	b	5654c <warn@@Base+0x177c>
   56ae8:	ldr	r3, [pc, #412]	; 56c8c <warn@@Base+0x1ebc>
   56aec:	b	5654c <warn@@Base+0x177c>
   56af0:	ldr	r3, [pc, #408]	; 56c90 <warn@@Base+0x1ec0>
   56af4:	b	5654c <warn@@Base+0x177c>
   56af8:	ldr	r3, [pc, #404]	; 56c94 <warn@@Base+0x1ec4>
   56afc:	b	5654c <warn@@Base+0x177c>
   56b00:	ldr	r3, [pc, #400]	; 56c98 <warn@@Base+0x1ec8>
   56b04:	b	5654c <warn@@Base+0x177c>
   56b08:	andeq	r4, r0, r4, lsl #2
   56b0c:	andeq	r4, r0, sl, lsl #2
   56b10:	andeq	r4, r0, r6, lsl #2
   56b14:	andeq	r5, r8, ip, lsl #14
   56b18:	ldrdeq	r5, [r8], -ip
   56b1c:	andeq	r4, r0, r8, lsl #2
   56b20:	andeq	r4, r0, r9, lsl #2
   56b24:	andeq	r5, r8, r8, ror r7
   56b28:	andeq	r8, r0, r7, ror #14
   56b2c:	andeq	r8, r0, r6, ror #14
   56b30:	andeq	r5, r8, r8, asr #15
   56b34:	andeq	r4, r0, r1, lsl #2
   56b38:	muleq	r0, r2, r0
   56b3c:	andeq	r5, r8, r0, lsl #13
   56b40:	andeq	r5, r8, r8, lsl #9
   56b44:	andeq	sl, r0, r0, lsr #32
   56b48:	andeq	r5, r8, r0, lsl r8
   56b4c:	andeq	r5, r8, ip, asr #9
   56b50:	andeq	r5, r8, r0, asr #8
   56b54:	andeq	r5, r8, r4, lsl #11
   56b58:	andeq	r4, r0, r2, lsl #2
   56b5c:	andeq	r4, r0, r3, lsl #2
   56b60:	andeq	r5, r8, ip, asr #13
   56b64:	andeq	r4, r0, r1, lsl #1
   56b68:	andeq	r5, r8, r8, lsr r6
   56b6c:	andeq	r5, r8, r4, asr #11
   56b70:	andeq	r5, r8, r8, lsr r5
   56b74:	andeq	r5, r8, r0, lsr #2
   56b78:	andeq	r5, r8, r4, asr #3
   56b7c:			; <UNDEFINED> instruction: 0x000852b8
   56b80:	andeq	r5, r8, r8, lsl #4
   56b84:	muleq	r8, r8, r0
   56b88:	strdeq	r5, [r8], -r8
   56b8c:	andeq	r5, r8, r4, lsl #3
   56b90:	strdeq	r5, [r8], -ip
   56b94:	andeq	r5, r8, r4, ror r2
   56b98:	muleq	r8, r4, r3
   56b9c:	andeq	r5, r8, ip, asr r3
   56ba0:	ldrdeq	r5, [r8], -r8
   56ba4:	strdeq	r5, [r8], -r8
   56ba8:			; <UNDEFINED> instruction: 0x000853bc
   56bac:	andeq	r5, r8, ip, ror r3
   56bb0:	andeq	r5, r8, r8, ror #5
   56bb4:	strdeq	r5, [r8], -r8
   56bb8:	andeq	r5, r8, r0, lsr #5
   56bbc:			; <UNDEFINED> instruction: 0x000851b4
   56bc0:	andeq	r5, r8, r8, lsl #2
   56bc4:	andeq	r5, r8, r4, lsr #10
   56bc8:			; <UNDEFINED> instruction: 0x000855b0
   56bcc:			; <UNDEFINED> instruction: 0x000856b0
   56bd0:	andeq	r5, r8, ip, ror #10
   56bd4:			; <UNDEFINED> instruction: 0x000854b4
   56bd8:	strdeq	r5, [r8], -r8
   56bdc:	andeq	r5, r8, r0, ror r4
   56be0:	andeq	r5, r8, r8, ror #12
   56be4:			; <UNDEFINED> instruction: 0x000857b0
   56be8:	andeq	r5, r8, r4, asr r7
   56bec:	andeq	r5, r8, r4, asr #1
   56bf0:	andeq	r5, r8, r8, asr #6
   56bf4:	andeq	r5, r8, r0, ror r1
   56bf8:	andeq	r5, r8, r4, lsl #1
   56bfc:	andeq	r5, r8, r0, lsr r4
   56c00:	andeq	r5, r8, r4, ror #4
   56c04:	andeq	r5, r8, r0, lsr #12
   56c08:	andeq	r5, r8, r8, lsl #8
   56c0c:	andeq	r5, r8, ip, ror #11
   56c10:	andeq	r5, r8, r4, ror r0
   56c14:	andeq	r5, r8, r4, asr #2
   56c18:	andeq	r5, r8, r4, lsr r2
   56c1c:	andeq	r5, r8, r4, lsr #6
   56c20:	andeq	r5, r8, r4, lsr r3
   56c24:	andeq	r5, r8, ip, asr r1
   56c28:	andeq	r5, r8, r8, asr #4
   56c2c:	andeq	r5, r8, r8, lsl #12
   56c30:	andeq	r5, r8, r0, lsl r5
   56c34:	andeq	r5, r8, ip, lsr #16
   56c38:	andeq	r5, r8, ip, lsl r4
   56c3c:	andeq	r5, r8, r0, ror #15
   56c40:	ldrdeq	r5, [r8], -r8
   56c44:	andeq	r5, r8, r8, lsr #7
   56c48:	muleq	r8, r8, r5
   56c4c:	strdeq	r5, [r8], -r8
   56c50:	muleq	r8, ip, r6
   56c54:	andeq	r5, r8, ip, asr #5
   56c58:	andeq	r5, r8, r0, lsr #9
   56c5c:	andeq	r5, r8, r0, lsr r7
   56c60:	andeq	r5, r8, ip, lsr #1
   56c64:	andeq	r5, r8, ip, asr #12
   56c68:	andeq	r5, r8, r8, asr r4
   56c6c:	andeq	r5, r8, ip, ror #6
   56c70:	andeq	r5, r8, ip, asr #10
   56c74:	muleq	r8, r0, r2
   56c78:	muleq	r8, ip, r1
   56c7c:	muleq	r8, r0, r7
   56c80:	andeq	r5, r8, r0, lsr r1
   56c84:	andeq	r5, r8, r0, lsl r3
   56c88:	andeq	r5, r8, r4, ror #9
   56c8c:	andeq	r5, r8, r4, ror #13
   56c90:	andeq	r5, r8, ip, lsl r2
   56c94:	ldrdeq	r5, [r8], -r8
   56c98:	strdeq	r5, [r8], -r4
   56c9c:	cmp	r0, #25
   56ca0:	beq	57010 <warn@@Base+0x2240>
   56ca4:	bls	56ce8 <warn@@Base+0x1f18>
   56ca8:	cmp	r0, #37	; 0x25
   56cac:	beq	57008 <warn@@Base+0x2238>
   56cb0:	bhi	56e44 <warn@@Base+0x2074>
   56cb4:	cmp	r0, #31
   56cb8:	beq	56fe8 <warn@@Base+0x2218>
   56cbc:	bls	56e1c <warn@@Base+0x204c>
   56cc0:	cmp	r0, #34	; 0x22
   56cc4:	beq	56fc0 <warn@@Base+0x21f0>
   56cc8:	bhi	56d28 <warn@@Base+0x1f58>
   56ccc:	cmp	r0, #32
   56cd0:	beq	56f20 <warn@@Base+0x2150>
   56cd4:	ldr	r3, [pc, #828]	; 57018 <warn@@Base+0x2248>
   56cd8:	cmp	r0, #33	; 0x21
   56cdc:	moveq	r0, r3
   56ce0:	movne	r0, #0
   56ce4:	bx	lr
   56ce8:	cmp	r0, #13
   56cec:	beq	57000 <warn@@Base+0x2230>
   56cf0:	bhi	56d88 <warn@@Base+0x1fb8>
   56cf4:	cmp	r0, #7
   56cf8:	beq	56ff8 <warn@@Base+0x2228>
   56cfc:	bls	56d60 <warn@@Base+0x1f90>
   56d00:	cmp	r0, #10
   56d04:	beq	56fa0 <warn@@Base+0x21d0>
   56d08:	bhi	56d44 <warn@@Base+0x1f74>
   56d0c:	cmp	r0, #8
   56d10:	beq	56f98 <warn@@Base+0x21c8>
   56d14:	ldr	r3, [pc, #768]	; 5701c <warn@@Base+0x224c>
   56d18:	cmp	r0, #9
   56d1c:	moveq	r0, r3
   56d20:	movne	r0, #0
   56d24:	bx	lr
   56d28:	cmp	r0, #35	; 0x23
   56d2c:	beq	56f90 <warn@@Base+0x21c0>
   56d30:	ldr	r3, [pc, #744]	; 57020 <warn@@Base+0x2250>
   56d34:	cmp	r0, #36	; 0x24
   56d38:	moveq	r0, r3
   56d3c:	movne	r0, #0
   56d40:	bx	lr
   56d44:	cmp	r0, #11
   56d48:	beq	56f88 <warn@@Base+0x21b8>
   56d4c:	ldr	r3, [pc, #720]	; 57024 <warn@@Base+0x2254>
   56d50:	cmp	r0, #12
   56d54:	moveq	r0, r3
   56d58:	movne	r0, #0
   56d5c:	bx	lr
   56d60:	cmp	r0, #4
   56d64:	beq	56fc8 <warn@@Base+0x21f8>
   56d68:	bhi	56dbc <warn@@Base+0x1fec>
   56d6c:	cmp	r0, #1
   56d70:	beq	56f80 <warn@@Base+0x21b0>
   56d74:	ldr	r3, [pc, #684]	; 57028 <warn@@Base+0x2258>
   56d78:	cmp	r0, #3
   56d7c:	moveq	r0, r3
   56d80:	movne	r0, #0
   56d84:	bx	lr
   56d88:	cmp	r0, #19
   56d8c:	beq	56ff0 <warn@@Base+0x2220>
   56d90:	bls	56df4 <warn@@Base+0x2024>
   56d94:	cmp	r0, #22
   56d98:	beq	56fd8 <warn@@Base+0x2208>
   56d9c:	bhi	56dd8 <warn@@Base+0x2008>
   56da0:	cmp	r0, #20
   56da4:	beq	56f78 <warn@@Base+0x21a8>
   56da8:	ldr	r3, [pc, #636]	; 5702c <warn@@Base+0x225c>
   56dac:	cmp	r0, #21
   56db0:	moveq	r0, r3
   56db4:	movne	r0, #0
   56db8:	bx	lr
   56dbc:	cmp	r0, #5
   56dc0:	beq	56f70 <warn@@Base+0x21a0>
   56dc4:	ldr	r3, [pc, #612]	; 57030 <warn@@Base+0x2260>
   56dc8:	cmp	r0, #6
   56dcc:	moveq	r0, r3
   56dd0:	movne	r0, #0
   56dd4:	bx	lr
   56dd8:	cmp	r0, #23
   56ddc:	beq	56f68 <warn@@Base+0x2198>
   56de0:	ldr	r3, [pc, #588]	; 57034 <warn@@Base+0x2264>
   56de4:	cmp	r0, #24
   56de8:	moveq	r0, r3
   56dec:	movne	r0, #0
   56df0:	bx	lr
   56df4:	cmp	r0, #16
   56df8:	beq	56fd0 <warn@@Base+0x2200>
   56dfc:	bhi	56e80 <warn@@Base+0x20b0>
   56e00:	cmp	r0, #14
   56e04:	beq	56f60 <warn@@Base+0x2190>
   56e08:	ldr	r3, [pc, #552]	; 57038 <warn@@Base+0x2268>
   56e0c:	cmp	r0, #15
   56e10:	moveq	r0, r3
   56e14:	movne	r0, #0
   56e18:	bx	lr
   56e1c:	cmp	r0, #28
   56e20:	beq	56fa8 <warn@@Base+0x21d8>
   56e24:	bhi	56e9c <warn@@Base+0x20cc>
   56e28:	cmp	r0, #26
   56e2c:	beq	56f58 <warn@@Base+0x2188>
   56e30:	ldr	r3, [pc, #516]	; 5703c <warn@@Base+0x226c>
   56e34:	cmp	r0, #27
   56e38:	moveq	r0, r3
   56e3c:	movne	r0, #0
   56e40:	bx	lr
   56e44:	cmp	r0, #43	; 0x2b
   56e48:	beq	56fe0 <warn@@Base+0x2210>
   56e4c:	bls	56edc <warn@@Base+0x210c>
   56e50:	ldr	r3, [pc, #488]	; 57040 <warn@@Base+0x2270>
   56e54:	cmp	r0, r3
   56e58:	beq	56fb0 <warn@@Base+0x21e0>
   56e5c:	bhi	56eb8 <warn@@Base+0x20e8>
   56e60:	cmp	r0, #44	; 0x2c
   56e64:	beq	56f50 <warn@@Base+0x2180>
   56e68:	ldr	r2, [pc, #468]	; 57044 <warn@@Base+0x2274>
   56e6c:	ldr	r3, [pc, #468]	; 57048 <warn@@Base+0x2278>
   56e70:	cmp	r0, r2
   56e74:	moveq	r0, r3
   56e78:	movne	r0, #0
   56e7c:	bx	lr
   56e80:	cmp	r0, #17
   56e84:	beq	56f48 <warn@@Base+0x2178>
   56e88:	ldr	r3, [pc, #444]	; 5704c <warn@@Base+0x227c>
   56e8c:	cmp	r0, #18
   56e90:	moveq	r0, r3
   56e94:	movne	r0, #0
   56e98:	bx	lr
   56e9c:	cmp	r0, #29
   56ea0:	beq	56f40 <warn@@Base+0x2170>
   56ea4:	ldr	r3, [pc, #420]	; 57050 <warn@@Base+0x2280>
   56ea8:	cmp	r0, #30
   56eac:	moveq	r0, r3
   56eb0:	movne	r0, #0
   56eb4:	bx	lr
   56eb8:	ldr	r3, [pc, #404]	; 57054 <warn@@Base+0x2284>
   56ebc:	cmp	r0, r3
   56ec0:	beq	56f38 <warn@@Base+0x2168>
   56ec4:	ldr	r2, [pc, #396]	; 57058 <warn@@Base+0x2288>
   56ec8:	ldr	r3, [pc, #396]	; 5705c <warn@@Base+0x228c>
   56ecc:	cmp	r0, r2
   56ed0:	moveq	r0, r3
   56ed4:	movne	r0, #0
   56ed8:	bx	lr
   56edc:	cmp	r0, #40	; 0x28
   56ee0:	beq	56fb8 <warn@@Base+0x21e8>
   56ee4:	bhi	56f04 <warn@@Base+0x2134>
   56ee8:	cmp	r0, #38	; 0x26
   56eec:	beq	56f30 <warn@@Base+0x2160>
   56ef0:	ldr	r3, [pc, #360]	; 57060 <warn@@Base+0x2290>
   56ef4:	cmp	r0, #39	; 0x27
   56ef8:	moveq	r0, r3
   56efc:	movne	r0, #0
   56f00:	bx	lr
   56f04:	cmp	r0, #41	; 0x29
   56f08:	beq	56f28 <warn@@Base+0x2158>
   56f0c:	ldr	r3, [pc, #336]	; 57064 <warn@@Base+0x2294>
   56f10:	cmp	r0, #42	; 0x2a
   56f14:	moveq	r0, r3
   56f18:	movne	r0, #0
   56f1c:	bx	lr
   56f20:	ldr	r0, [pc, #320]	; 57068 <warn@@Base+0x2298>
   56f24:	bx	lr
   56f28:	ldr	r0, [pc, #316]	; 5706c <warn@@Base+0x229c>
   56f2c:	bx	lr
   56f30:	ldr	r0, [pc, #312]	; 57070 <warn@@Base+0x22a0>
   56f34:	bx	lr
   56f38:	ldr	r0, [pc, #308]	; 57074 <warn@@Base+0x22a4>
   56f3c:	bx	lr
   56f40:	ldr	r0, [pc, #304]	; 57078 <warn@@Base+0x22a8>
   56f44:	bx	lr
   56f48:	ldr	r0, [pc, #300]	; 5707c <warn@@Base+0x22ac>
   56f4c:	bx	lr
   56f50:	ldr	r0, [pc, #296]	; 57080 <warn@@Base+0x22b0>
   56f54:	bx	lr
   56f58:	ldr	r0, [pc, #292]	; 57084 <warn@@Base+0x22b4>
   56f5c:	bx	lr
   56f60:	ldr	r0, [pc, #288]	; 57088 <warn@@Base+0x22b8>
   56f64:	bx	lr
   56f68:	ldr	r0, [pc, #284]	; 5708c <warn@@Base+0x22bc>
   56f6c:	bx	lr
   56f70:	ldr	r0, [pc, #280]	; 57090 <warn@@Base+0x22c0>
   56f74:	bx	lr
   56f78:	ldr	r0, [pc, #276]	; 57094 <warn@@Base+0x22c4>
   56f7c:	bx	lr
   56f80:	ldr	r0, [pc, #272]	; 57098 <warn@@Base+0x22c8>
   56f84:	bx	lr
   56f88:	ldr	r0, [pc, #268]	; 5709c <warn@@Base+0x22cc>
   56f8c:	bx	lr
   56f90:	ldr	r0, [pc, #264]	; 570a0 <warn@@Base+0x22d0>
   56f94:	bx	lr
   56f98:	ldr	r0, [pc, #260]	; 570a4 <warn@@Base+0x22d4>
   56f9c:	bx	lr
   56fa0:	ldr	r0, [pc, #256]	; 570a8 <warn@@Base+0x22d8>
   56fa4:	bx	lr
   56fa8:	ldr	r0, [pc, #252]	; 570ac <warn@@Base+0x22dc>
   56fac:	bx	lr
   56fb0:	ldr	r0, [pc, #248]	; 570b0 <warn@@Base+0x22e0>
   56fb4:	bx	lr
   56fb8:	ldr	r0, [pc, #244]	; 570b4 <warn@@Base+0x22e4>
   56fbc:	bx	lr
   56fc0:	ldr	r0, [pc, #240]	; 570b8 <warn@@Base+0x22e8>
   56fc4:	bx	lr
   56fc8:	ldr	r0, [pc, #236]	; 570bc <warn@@Base+0x22ec>
   56fcc:	bx	lr
   56fd0:	ldr	r0, [pc, #232]	; 570c0 <warn@@Base+0x22f0>
   56fd4:	bx	lr
   56fd8:	ldr	r0, [pc, #228]	; 570c4 <warn@@Base+0x22f4>
   56fdc:	bx	lr
   56fe0:	ldr	r0, [pc, #224]	; 570c8 <warn@@Base+0x22f8>
   56fe4:	bx	lr
   56fe8:	ldr	r0, [pc, #220]	; 570cc <warn@@Base+0x22fc>
   56fec:	bx	lr
   56ff0:	ldr	r0, [pc, #216]	; 570d0 <warn@@Base+0x2300>
   56ff4:	bx	lr
   56ff8:	ldr	r0, [pc, #212]	; 570d4 <warn@@Base+0x2304>
   56ffc:	bx	lr
   57000:	ldr	r0, [pc, #208]	; 570d8 <warn@@Base+0x2308>
   57004:	bx	lr
   57008:	ldr	r0, [pc, #204]	; 570dc <warn@@Base+0x230c>
   5700c:	bx	lr
   57010:	ldr	r0, [pc, #200]	; 570e0 <warn@@Base+0x2310>
   57014:	bx	lr
   57018:	andeq	r5, r8, r8, asr #20
   5701c:	andeq	r5, r8, r0, lsr #17
   57020:	andeq	r5, r8, r8, lsl #21
   57024:	ldrdeq	r5, [r8], -r0
   57028:	andeq	r5, r8, r8, ror fp
   5702c:	andeq	r5, r8, r4, ror #18
   57030:	andeq	r5, r8, r0, ror r8
   57034:	andeq	r5, r8, r0, lsr #19
   57038:	andeq	r5, r8, r0, lsl #18
   5703c:	andeq	r5, r8, ip, ror #19
   57040:	andeq	r1, r0, r2, lsl #30
   57044:	andeq	r1, r0, r1, lsl #30
   57048:	andeq	r5, r8, ip, lsl fp
   5704c:	andeq	r5, r8, r4, lsr r9
   57050:	andeq	r5, r8, r4, lsr #20
   57054:	andeq	r1, r0, r0, lsr #30
   57058:	andeq	r1, r0, r1, lsr #30
   5705c:	andeq	r5, r8, r0, ror #22
   57060:			; <UNDEFINED> instruction: 0x00085abc
   57064:	andeq	r5, r8, ip, ror #21
   57068:	andeq	r5, r8, r8, asr #19
   5706c:	ldrdeq	r5, [r8], -ip
   57070:	andeq	r5, r8, ip, lsr #21
   57074:	andeq	r5, r8, ip, asr #22
   57078:	andeq	r5, r8, r0, lsl sl
   5707c:	andeq	r5, r8, r4, lsr #18
   57080:	andeq	r5, r8, ip, lsl #22
   57084:	ldrdeq	r5, [r8], -ip
   57088:	strdeq	r5, [r8], -r0
   5708c:	andeq	r5, r8, ip, lsl #19
   57090:	andeq	r5, r8, r0, ror #16
   57094:	andeq	r5, r8, r4, asr r9
   57098:	andeq	r5, r8, r0, asr #16
   5709c:	andeq	r5, r8, r0, asr #17
   570a0:	andeq	r5, r8, r4, ror sl
   570a4:	muleq	r8, r0, r8
   570a8:			; <UNDEFINED> instruction: 0x000858b0
   570ac:	strdeq	r5, [r8], -ip
   570b0:	andeq	r5, r8, r4, lsr fp
   570b4:	andeq	r5, r8, ip, asr #21
   570b8:	andeq	r5, r8, r0, ror #20
   570bc:	andeq	r5, r8, r0, asr r8
   570c0:	andeq	r5, r8, r0, lsl r9
   570c4:	andeq	r5, r8, r8, ror r9
   570c8:	strdeq	r5, [r8], -ip
   570cc:	andeq	r5, r8, r4, lsr sl
   570d0:	andeq	r5, r8, r4, asr #18
   570d4:	andeq	r5, r8, r0, lsl #17
   570d8:	andeq	r5, r8, r0, ror #17
   570dc:	muleq	r8, ip, sl
   570e0:			; <UNDEFINED> instruction: 0x000859b0
   570e4:	cmp	r0, #122	; 0x7a
   570e8:	beq	57f5c <warn@@Base+0x318c>
   570ec:	bls	5715c <warn@@Base+0x238c>
   570f0:	ldr	r3, [pc, #3692]	; 57f64 <warn@@Base+0x3194>
   570f4:	cmp	r0, r3
   570f8:	beq	57f54 <warn@@Base+0x3184>
   570fc:	bls	57470 <warn@@Base+0x26a0>
   57100:	ldr	r3, [pc, #3680]	; 57f68 <warn@@Base+0x3198>
   57104:	cmp	r0, r3
   57108:	beq	57f44 <warn@@Base+0x3174>
   5710c:	bls	57428 <warn@@Base+0x2658>
   57110:	ldr	r3, [pc, #3668]	; 57f6c <warn@@Base+0x319c>
   57114:	cmp	r0, r3
   57118:	beq	57f24 <warn@@Base+0x3154>
   5711c:	bls	577f0 <warn@@Base+0x2a20>
   57120:	ldr	r3, [pc, #3656]	; 57f70 <warn@@Base+0x31a0>
   57124:	cmp	r0, r3
   57128:	beq	57ee4 <warn@@Base+0x3114>
   5712c:	bhi	573dc <warn@@Base+0x260c>
   57130:	sub	r3, r3, #4
   57134:	cmp	r0, r3
   57138:	beq	57dd4 <warn@@Base+0x3004>
   5713c:	bls	571b0 <warn@@Base+0x23e0>
   57140:	ldr	r3, [pc, #3628]	; 57f74 <warn@@Base+0x31a4>
   57144:	cmp	r0, r3
   57148:	beq	57d3c <warn@@Base+0x2f6c>
   5714c:	bhi	57ac4 <warn@@Base+0x2cf4>
   57150:	ldr	r3, [pc, #3616]	; 57f78 <warn@@Base+0x31a8>
   57154:	mov	r0, r3
   57158:	bx	lr
   5715c:	cmp	r0, #68	; 0x44
   57160:	beq	57f4c <warn@@Base+0x317c>
   57164:	bls	572c4 <warn@@Base+0x24f4>
   57168:	cmp	r0, #94	; 0x5e
   5716c:	beq	57f3c <warn@@Base+0x316c>
   57170:	bls	5728c <warn@@Base+0x24bc>
   57174:	cmp	r0, #107	; 0x6b
   57178:	beq	57f04 <warn@@Base+0x3134>
   5717c:	bls	5720c <warn@@Base+0x243c>
   57180:	cmp	r0, #114	; 0x72
   57184:	beq	57ed4 <warn@@Base+0x3104>
   57188:	bhi	571ec <warn@@Base+0x241c>
   5718c:	cmp	r0, #110	; 0x6e
   57190:	beq	57e44 <warn@@Base+0x3074>
   57194:	bls	571d4 <warn@@Base+0x2404>
   57198:	cmp	r0, #112	; 0x70
   5719c:	beq	57cfc <warn@@Base+0x2f2c>
   571a0:	bhi	57cbc <warn@@Base+0x2eec>
   571a4:	ldr	r3, [pc, #3536]	; 57f7c <warn@@Base+0x31ac>
   571a8:	mov	r0, r3
   571ac:	bx	lr
   571b0:	sub	r3, r3, #2
   571b4:	cmp	r0, r3
   571b8:	beq	57cb4 <warn@@Base+0x2ee4>
   571bc:	ldr	r2, [pc, #3516]	; 57f80 <warn@@Base+0x31b0>
   571c0:	ldr	r3, [pc, #3516]	; 57f84 <warn@@Base+0x31b4>
   571c4:	cmp	r0, r2
   571c8:	movne	r3, #0
   571cc:	mov	r0, r3
   571d0:	bx	lr
   571d4:	cmp	r0, #108	; 0x6c
   571d8:	beq	57cac <warn@@Base+0x2edc>
   571dc:	cmp	r0, #109	; 0x6d
   571e0:	ldr	r3, [pc, #3488]	; 57f88 <warn@@Base+0x31b8>
   571e4:	movne	r3, #0
   571e8:	b	57154 <warn@@Base+0x2384>
   571ec:	cmp	r0, #118	; 0x76
   571f0:	beq	57e4c <warn@@Base+0x307c>
   571f4:	bls	57238 <warn@@Base+0x2468>
   571f8:	cmp	r0, #120	; 0x78
   571fc:	beq	57cf4 <warn@@Base+0x2f24>
   57200:	bhi	57ca4 <warn@@Base+0x2ed4>
   57204:	ldr	r3, [pc, #3456]	; 57f8c <warn@@Base+0x31bc>
   57208:	b	57154 <warn@@Base+0x2384>
   5720c:	cmp	r0, #100	; 0x64
   57210:	beq	57ea4 <warn@@Base+0x30d4>
   57214:	bls	57268 <warn@@Base+0x2498>
   57218:	cmp	r0, #103	; 0x67
   5721c:	beq	57dc4 <warn@@Base+0x2ff4>
   57220:	bls	57250 <warn@@Base+0x2480>
   57224:	cmp	r0, #105	; 0x69
   57228:	beq	57cc4 <warn@@Base+0x2ef4>
   5722c:	bhi	57c9c <warn@@Base+0x2ecc>
   57230:	ldr	r3, [pc, #3416]	; 57f90 <warn@@Base+0x31c0>
   57234:	b	57154 <warn@@Base+0x2384>
   57238:	cmp	r0, #115	; 0x73
   5723c:	beq	57c94 <warn@@Base+0x2ec4>
   57240:	cmp	r0, #116	; 0x74
   57244:	ldr	r3, [pc, #3400]	; 57f94 <warn@@Base+0x31c4>
   57248:	movne	r3, #0
   5724c:	b	57154 <warn@@Base+0x2384>
   57250:	cmp	r0, #101	; 0x65
   57254:	beq	57c8c <warn@@Base+0x2ebc>
   57258:	cmp	r0, #102	; 0x66
   5725c:	ldr	r3, [pc, #3380]	; 57f98 <warn@@Base+0x31c8>
   57260:	movne	r3, #0
   57264:	b	57154 <warn@@Base+0x2384>
   57268:	cmp	r0, #97	; 0x61
   5726c:	beq	57d84 <warn@@Base+0x2fb4>
   57270:	bhi	57308 <warn@@Base+0x2538>
   57274:	cmp	r0, #95	; 0x5f
   57278:	beq	57c84 <warn@@Base+0x2eb4>
   5727c:	cmp	r0, #96	; 0x60
   57280:	ldr	r3, [pc, #3348]	; 57f9c <warn@@Base+0x31cc>
   57284:	movne	r3, #0
   57288:	b	57154 <warn@@Base+0x2384>
   5728c:	cmp	r0, #81	; 0x51
   57290:	beq	57ef4 <warn@@Base+0x3124>
   57294:	bls	5735c <warn@@Base+0x258c>
   57298:	cmp	r0, #87	; 0x57
   5729c:	beq	57eac <warn@@Base+0x30dc>
   572a0:	bls	57338 <warn@@Base+0x2568>
   572a4:	cmp	r0, #90	; 0x5a
   572a8:	beq	57e04 <warn@@Base+0x3034>
   572ac:	bls	57320 <warn@@Base+0x2550>
   572b0:	cmp	r0, #92	; 0x5c
   572b4:	beq	57d1c <warn@@Base+0x2f4c>
   572b8:	bhi	57c7c <warn@@Base+0x2eac>
   572bc:	ldr	r3, [pc, #3292]	; 57fa0 <warn@@Base+0x31d0>
   572c0:	b	57154 <warn@@Base+0x2384>
   572c4:	cmp	r0, #33	; 0x21
   572c8:	beq	57f2c <warn@@Base+0x315c>
   572cc:	bls	5793c <warn@@Base+0x2b6c>
   572d0:	cmp	r0, #54	; 0x36
   572d4:	beq	57f1c <warn@@Base+0x314c>
   572d8:	bls	578b8 <warn@@Base+0x2ae8>
   572dc:	cmp	r0, #61	; 0x3d
   572e0:	beq	57ec4 <warn@@Base+0x30f4>
   572e4:	bhi	578e4 <warn@@Base+0x2b14>
   572e8:	cmp	r0, #57	; 0x39
   572ec:	beq	57dec <warn@@Base+0x301c>
   572f0:	bls	57410 <warn@@Base+0x2640>
   572f4:	cmp	r0, #59	; 0x3b
   572f8:	beq	57d24 <warn@@Base+0x2f54>
   572fc:	bhi	57c74 <warn@@Base+0x2ea4>
   57300:	ldr	r3, [pc, #3228]	; 57fa4 <warn@@Base+0x31d4>
   57304:	b	57154 <warn@@Base+0x2384>
   57308:	cmp	r0, #98	; 0x62
   5730c:	beq	57c6c <warn@@Base+0x2e9c>
   57310:	cmp	r0, #99	; 0x63
   57314:	ldr	r3, [pc, #3212]	; 57fa8 <warn@@Base+0x31d8>
   57318:	movne	r3, #0
   5731c:	b	57154 <warn@@Base+0x2384>
   57320:	cmp	r0, #88	; 0x58
   57324:	beq	57c64 <warn@@Base+0x2e94>
   57328:	cmp	r0, #89	; 0x59
   5732c:	ldr	r3, [pc, #3192]	; 57fac <warn@@Base+0x31dc>
   57330:	movne	r3, #0
   57334:	b	57154 <warn@@Base+0x2384>
   57338:	cmp	r0, #84	; 0x54
   5733c:	beq	57dac <warn@@Base+0x2fdc>
   57340:	bhi	57388 <warn@@Base+0x25b8>
   57344:	cmp	r0, #82	; 0x52
   57348:	beq	57c5c <warn@@Base+0x2e8c>
   5734c:	cmp	r0, #83	; 0x53
   57350:	ldr	r3, [pc, #3160]	; 57fb0 <warn@@Base+0x31e0>
   57354:	movne	r3, #0
   57358:	b	57154 <warn@@Base+0x2384>
   5735c:	cmp	r0, #74	; 0x4a
   57360:	beq	57e9c <warn@@Base+0x30cc>
   57364:	bls	573b8 <warn@@Base+0x25e8>
   57368:	cmp	r0, #77	; 0x4d
   5736c:	beq	57e0c <warn@@Base+0x303c>
   57370:	bls	573a0 <warn@@Base+0x25d0>
   57374:	cmp	r0, #79	; 0x4f
   57378:	beq	57d14 <warn@@Base+0x2f44>
   5737c:	bhi	57c54 <warn@@Base+0x2e84>
   57380:	ldr	r3, [pc, #3116]	; 57fb4 <warn@@Base+0x31e4>
   57384:	b	57154 <warn@@Base+0x2384>
   57388:	cmp	r0, #85	; 0x55
   5738c:	beq	57c4c <warn@@Base+0x2e7c>
   57390:	cmp	r0, #86	; 0x56
   57394:	ldr	r3, [pc, #3100]	; 57fb8 <warn@@Base+0x31e8>
   57398:	movne	r3, #0
   5739c:	b	57154 <warn@@Base+0x2384>
   573a0:	cmp	r0, #75	; 0x4b
   573a4:	beq	57c44 <warn@@Base+0x2e74>
   573a8:	cmp	r0, #76	; 0x4c
   573ac:	ldr	r3, [pc, #3080]	; 57fbc <warn@@Base+0x31ec>
   573b0:	movne	r3, #0
   573b4:	b	57154 <warn@@Base+0x2384>
   573b8:	cmp	r0, #71	; 0x47
   573bc:	beq	57d9c <warn@@Base+0x2fcc>
   573c0:	bhi	57830 <warn@@Base+0x2a60>
   573c4:	cmp	r0, #69	; 0x45
   573c8:	beq	57c3c <warn@@Base+0x2e6c>
   573cc:	cmp	r0, #70	; 0x46
   573d0:	ldr	r3, [pc, #3048]	; 57fc0 <warn@@Base+0x31f0>
   573d4:	movne	r3, #0
   573d8:	b	57154 <warn@@Base+0x2384>
   573dc:	ldr	r3, [pc, #3040]	; 57fc4 <warn@@Base+0x31f4>
   573e0:	cmp	r0, r3
   573e4:	beq	57df4 <warn@@Base+0x3024>
   573e8:	bls	57904 <warn@@Base+0x2b34>
   573ec:	ldr	r3, [pc, #3028]	; 57fc8 <warn@@Base+0x31f8>
   573f0:	cmp	r0, r3
   573f4:	beq	57d0c <warn@@Base+0x2f3c>
   573f8:	bcc	57c34 <warn@@Base+0x2e64>
   573fc:	ldr	r2, [pc, #3016]	; 57fcc <warn@@Base+0x31fc>
   57400:	ldr	r3, [pc, #3016]	; 57fd0 <warn@@Base+0x3200>
   57404:	cmp	r0, r2
   57408:	movne	r3, #0
   5740c:	b	57154 <warn@@Base+0x2384>
   57410:	cmp	r0, #55	; 0x37
   57414:	beq	57c2c <warn@@Base+0x2e5c>
   57418:	cmp	r0, #56	; 0x38
   5741c:	ldr	r3, [pc, #2992]	; 57fd4 <warn@@Base+0x3204>
   57420:	movne	r3, #0
   57424:	b	57154 <warn@@Base+0x2384>
   57428:	sub	r3, r3, #35	; 0x23
   5742c:	cmp	r0, r3
   57430:	beq	57f14 <warn@@Base+0x3144>
   57434:	bls	57748 <warn@@Base+0x2978>
   57438:	ldr	r3, [pc, #2968]	; 57fd8 <warn@@Base+0x3208>
   5743c:	cmp	r0, r3
   57440:	beq	57ecc <warn@@Base+0x30fc>
   57444:	bhi	57720 <warn@@Base+0x2950>
   57448:	sub	r3, r3, #4
   5744c:	cmp	r0, r3
   57450:	beq	57dfc <warn@@Base+0x302c>
   57454:	bls	574d4 <warn@@Base+0x2704>
   57458:	ldr	r3, [pc, #2940]	; 57fdc <warn@@Base+0x320c>
   5745c:	cmp	r0, r3
   57460:	beq	57d04 <warn@@Base+0x2f34>
   57464:	bhi	57c24 <warn@@Base+0x2e54>
   57468:	ldr	r3, [pc, #2928]	; 57fe0 <warn@@Base+0x3210>
   5746c:	b	57154 <warn@@Base+0x2384>
   57470:	sub	r3, r3, #254	; 0xfe
   57474:	cmp	r0, r3
   57478:	beq	57f34 <warn@@Base+0x3164>
   5747c:	bls	57574 <warn@@Base+0x27a4>
   57480:	ldr	r3, [pc, #2908]	; 57fe4 <warn@@Base+0x3214>
   57484:	cmp	r0, r3
   57488:	beq	57f0c <warn@@Base+0x313c>
   5748c:	bls	5753c <warn@@Base+0x276c>
   57490:	ldr	r3, [pc, #2896]	; 57fe8 <warn@@Base+0x3218>
   57494:	cmp	r0, r3
   57498:	beq	57edc <warn@@Base+0x310c>
   5749c:	bhi	57514 <warn@@Base+0x2744>
   574a0:	sub	r3, r3, #7
   574a4:	cmp	r0, r3
   574a8:	beq	57e54 <warn@@Base+0x3084>
   574ac:	bls	574f4 <warn@@Base+0x2724>
   574b0:	ldr	r3, [pc, #2868]	; 57fec <warn@@Base+0x321c>
   574b4:	cmp	r0, r3
   574b8:	beq	57ce4 <warn@@Base+0x2f14>
   574bc:	bhi	57c1c <warn@@Base+0x2e4c>
   574c0:	ldr	r2, [pc, #2856]	; 57ff0 <warn@@Base+0x3220>
   574c4:	ldr	r3, [pc, #2856]	; 57ff4 <warn@@Base+0x3224>
   574c8:	cmp	r0, r2
   574cc:	movne	r3, #0
   574d0:	b	57154 <warn@@Base+0x2384>
   574d4:	sub	r3, r3, #2
   574d8:	cmp	r0, r3
   574dc:	beq	57c14 <warn@@Base+0x2e44>
   574e0:	ldr	r2, [pc, #2832]	; 57ff8 <warn@@Base+0x3228>
   574e4:	ldr	r3, [pc, #2832]	; 57ffc <warn@@Base+0x322c>
   574e8:	cmp	r0, r2
   574ec:	movne	r3, #0
   574f0:	b	57154 <warn@@Base+0x2384>
   574f4:	sub	r3, r3, #2
   574f8:	cmp	r0, r3
   574fc:	beq	57c0c <warn@@Base+0x2e3c>
   57500:	ldr	r2, [pc, #2808]	; 58000 <warn@@Base+0x3230>
   57504:	ldr	r3, [pc, #2808]	; 58004 <warn@@Base+0x3234>
   57508:	cmp	r0, r2
   5750c:	movne	r3, #0
   57510:	b	57154 <warn@@Base+0x2384>
   57514:	ldr	r3, [pc, #2796]	; 58008 <warn@@Base+0x3238>
   57518:	cmp	r0, r3
   5751c:	beq	57e3c <warn@@Base+0x306c>
   57520:	bls	575b4 <warn@@Base+0x27e4>
   57524:	ldr	r3, [pc, #2784]	; 5800c <warn@@Base+0x323c>
   57528:	cmp	r0, r3
   5752c:	beq	57cec <warn@@Base+0x2f1c>
   57530:	bhi	57c04 <warn@@Base+0x2e34>
   57534:	ldr	r3, [pc, #2772]	; 58010 <warn@@Base+0x3240>
   57538:	b	57154 <warn@@Base+0x2384>
   5753c:	sub	r3, r3, #7
   57540:	cmp	r0, r3
   57544:	beq	57e84 <warn@@Base+0x30b4>
   57548:	bls	576b8 <warn@@Base+0x28e8>
   5754c:	ldr	r3, [pc, #2752]	; 58014 <warn@@Base+0x3244>
   57550:	cmp	r0, r3
   57554:	beq	57dcc <warn@@Base+0x2ffc>
   57558:	bls	57698 <warn@@Base+0x28c8>
   5755c:	ldr	r3, [pc, #2740]	; 58018 <warn@@Base+0x3248>
   57560:	cmp	r0, r3
   57564:	beq	57cd4 <warn@@Base+0x2f04>
   57568:	bhi	57bfc <warn@@Base+0x2e2c>
   5756c:	ldr	r3, [pc, #2728]	; 5801c <warn@@Base+0x324c>
   57570:	b	57154 <warn@@Base+0x2384>
   57574:	cmp	r0, #135	; 0x87
   57578:	beq	57efc <warn@@Base+0x312c>
   5757c:	bls	57618 <warn@@Base+0x2848>
   57580:	cmp	r0, #8192	; 0x2000
   57584:	beq	57e7c <warn@@Base+0x30ac>
   57588:	bls	575f4 <warn@@Base+0x2824>
   5758c:	ldr	r3, [pc, #2700]	; 58020 <warn@@Base+0x3250>
   57590:	cmp	r0, r3
   57594:	beq	57e64 <warn@@Base+0x3094>
   57598:	bls	575d4 <warn@@Base+0x2804>
   5759c:	ldr	r3, [pc, #2688]	; 58024 <warn@@Base+0x3254>
   575a0:	cmp	r0, r3
   575a4:	beq	57ccc <warn@@Base+0x2efc>
   575a8:	bhi	57bf4 <warn@@Base+0x2e24>
   575ac:	ldr	r3, [pc, #2676]	; 58028 <warn@@Base+0x3258>
   575b0:	b	57154 <warn@@Base+0x2384>
   575b4:	sub	r3, r3, #222	; 0xde
   575b8:	cmp	r0, r3
   575bc:	beq	57bec <warn@@Base+0x2e1c>
   575c0:	ldr	r2, [pc, #2660]	; 5802c <warn@@Base+0x325c>
   575c4:	ldr	r3, [pc, #2660]	; 58030 <warn@@Base+0x3260>
   575c8:	cmp	r0, r2
   575cc:	movne	r3, #0
   575d0:	b	57154 <warn@@Base+0x2384>
   575d4:	sub	r3, r3, #2
   575d8:	cmp	r0, r3
   575dc:	beq	57be4 <warn@@Base+0x2e14>
   575e0:	ldr	r2, [pc, #2636]	; 58034 <warn@@Base+0x3264>
   575e4:	ldr	r3, [pc, #2636]	; 58038 <warn@@Base+0x3268>
   575e8:	cmp	r0, r2
   575ec:	movne	r3, #0
   575f0:	b	57154 <warn@@Base+0x2384>
   575f4:	cmp	r0, #138	; 0x8a
   575f8:	beq	57d8c <warn@@Base+0x2fbc>
   575fc:	bhi	57644 <warn@@Base+0x2874>
   57600:	cmp	r0, #136	; 0x88
   57604:	beq	57bdc <warn@@Base+0x2e0c>
   57608:	cmp	r0, #137	; 0x89
   5760c:	ldr	r3, [pc, #2600]	; 5803c <warn@@Base+0x326c>
   57610:	movne	r3, #0
   57614:	b	57154 <warn@@Base+0x2384>
   57618:	cmp	r0, #128	; 0x80
   5761c:	beq	57e74 <warn@@Base+0x30a4>
   57620:	bls	57674 <warn@@Base+0x28a4>
   57624:	cmp	r0, #131	; 0x83
   57628:	beq	57e5c <warn@@Base+0x308c>
   5762c:	bls	5765c <warn@@Base+0x288c>
   57630:	cmp	r0, #133	; 0x85
   57634:	beq	57cdc <warn@@Base+0x2f0c>
   57638:	bhi	57bd4 <warn@@Base+0x2e04>
   5763c:	ldr	r3, [pc, #2556]	; 58040 <warn@@Base+0x3270>
   57640:	b	57154 <warn@@Base+0x2384>
   57644:	cmp	r0, #139	; 0x8b
   57648:	beq	57bcc <warn@@Base+0x2dfc>
   5764c:	cmp	r0, #140	; 0x8c
   57650:	ldr	r3, [pc, #2540]	; 58044 <warn@@Base+0x3274>
   57654:	movne	r3, #0
   57658:	b	57154 <warn@@Base+0x2384>
   5765c:	cmp	r0, #129	; 0x81
   57660:	beq	57bc4 <warn@@Base+0x2df4>
   57664:	cmp	r0, #130	; 0x82
   57668:	ldr	r3, [pc, #2520]	; 58048 <warn@@Base+0x3278>
   5766c:	movne	r3, #0
   57670:	b	57154 <warn@@Base+0x2384>
   57674:	cmp	r0, #125	; 0x7d
   57678:	beq	57d74 <warn@@Base+0x2fa4>
   5767c:	bhi	576e8 <warn@@Base+0x2918>
   57680:	cmp	r0, #123	; 0x7b
   57684:	beq	57bbc <warn@@Base+0x2dec>
   57688:	cmp	r0, #124	; 0x7c
   5768c:	ldr	r3, [pc, #2488]	; 5804c <warn@@Base+0x327c>
   57690:	movne	r3, #0
   57694:	b	57154 <warn@@Base+0x2384>
   57698:	sub	r3, r3, #2
   5769c:	cmp	r0, r3
   576a0:	beq	57bb4 <warn@@Base+0x2de4>
   576a4:	ldr	r2, [pc, #2468]	; 58050 <warn@@Base+0x3280>
   576a8:	ldr	r3, [pc, #2468]	; 58054 <warn@@Base+0x3284>
   576ac:	cmp	r0, r2
   576b0:	movne	r3, #0
   576b4:	b	57154 <warn@@Base+0x2384>
   576b8:	sub	r3, r3, #7
   576bc:	cmp	r0, r3
   576c0:	beq	57d7c <warn@@Base+0x2fac>
   576c4:	bhi	57700 <warn@@Base+0x2930>
   576c8:	sub	r3, r3, #2
   576cc:	cmp	r0, r3
   576d0:	beq	57bac <warn@@Base+0x2ddc>
   576d4:	ldr	r2, [pc, #2428]	; 58058 <warn@@Base+0x3288>
   576d8:	ldr	r3, [pc, #2428]	; 5805c <warn@@Base+0x328c>
   576dc:	cmp	r0, r2
   576e0:	movne	r3, #0
   576e4:	b	57154 <warn@@Base+0x2384>
   576e8:	cmp	r0, #126	; 0x7e
   576ec:	beq	57ba4 <warn@@Base+0x2dd4>
   576f0:	cmp	r0, #127	; 0x7f
   576f4:	ldr	r3, [pc, #2404]	; 58060 <warn@@Base+0x3290>
   576f8:	movne	r3, #0
   576fc:	b	57154 <warn@@Base+0x2384>
   57700:	ldr	r3, [pc, #2396]	; 58064 <warn@@Base+0x3294>
   57704:	cmp	r0, r3
   57708:	beq	57b9c <warn@@Base+0x2dcc>
   5770c:	ldr	r2, [pc, #2388]	; 58068 <warn@@Base+0x3298>
   57710:	ldr	r3, [pc, #2388]	; 5806c <warn@@Base+0x329c>
   57714:	cmp	r0, r2
   57718:	movne	r3, #0
   5771c:	b	57154 <warn@@Base+0x2384>
   57720:	ldr	r3, [pc, #2376]	; 58070 <warn@@Base+0x32a0>
   57724:	cmp	r0, r3
   57728:	beq	57e24 <warn@@Base+0x3054>
   5772c:	bls	57780 <warn@@Base+0x29b0>
   57730:	ldr	r3, [pc, #2364]	; 58074 <warn@@Base+0x32a4>
   57734:	cmp	r0, r3
   57738:	beq	57d54 <warn@@Base+0x2f84>
   5773c:	bhi	57b94 <warn@@Base+0x2dc4>
   57740:	ldr	r3, [pc, #2352]	; 58078 <warn@@Base+0x32a8>
   57744:	b	57154 <warn@@Base+0x2384>
   57748:	sub	r3, r3, #7
   5774c:	cmp	r0, r3
   57750:	beq	57ebc <warn@@Base+0x30ec>
   57754:	bls	577c0 <warn@@Base+0x29f0>
   57758:	ldr	r3, [pc, #2332]	; 5807c <warn@@Base+0x32ac>
   5775c:	cmp	r0, r3
   57760:	beq	57e34 <warn@@Base+0x3064>
   57764:	bls	577a0 <warn@@Base+0x29d0>
   57768:	ldr	r3, [pc, #2320]	; 58080 <warn@@Base+0x32b0>
   5776c:	cmp	r0, r3
   57770:	beq	57d64 <warn@@Base+0x2f94>
   57774:	bhi	57b8c <warn@@Base+0x2dbc>
   57778:	ldr	r3, [pc, #2308]	; 58084 <warn@@Base+0x32b4>
   5777c:	b	57154 <warn@@Base+0x2384>
   57780:	sub	r3, r3, #23
   57784:	cmp	r0, r3
   57788:	beq	57b84 <warn@@Base+0x2db4>
   5778c:	ldr	r2, [pc, #2292]	; 58088 <warn@@Base+0x32b8>
   57790:	ldr	r3, [pc, #2292]	; 5808c <warn@@Base+0x32bc>
   57794:	cmp	r0, r2
   57798:	movne	r3, #0
   5779c:	b	57154 <warn@@Base+0x2384>
   577a0:	sub	r3, r3, #2
   577a4:	cmp	r0, r3
   577a8:	beq	57b7c <warn@@Base+0x2dac>
   577ac:	ldr	r2, [pc, #2268]	; 58090 <warn@@Base+0x32c0>
   577b0:	ldr	r3, [pc, #2268]	; 58094 <warn@@Base+0x32c4>
   577b4:	cmp	r0, r2
   577b8:	movne	r3, #0
   577bc:	b	57154 <warn@@Base+0x2384>
   577c0:	sub	r3, r3, #3
   577c4:	cmp	r0, r3
   577c8:	beq	57d6c <warn@@Base+0x2f9c>
   577cc:	bhi	57848 <warn@@Base+0x2a78>
   577d0:	sub	r3, r3, #2
   577d4:	cmp	r0, r3
   577d8:	beq	57b74 <warn@@Base+0x2da4>
   577dc:	ldr	r2, [pc, #2228]	; 58098 <warn@@Base+0x32c8>
   577e0:	ldr	r3, [pc, #2228]	; 5809c <warn@@Base+0x32cc>
   577e4:	cmp	r0, r2
   577e8:	movne	r3, #0
   577ec:	b	57154 <warn@@Base+0x2384>
   577f0:	sub	r3, r3, #5888	; 0x1700
   577f4:	cmp	r0, r3
   577f8:	beq	57e6c <warn@@Base+0x309c>
   577fc:	bls	57888 <warn@@Base+0x2ab8>
   57800:	ldr	r3, [pc, #2200]	; 580a0 <warn@@Base+0x32d0>
   57804:	cmp	r0, r3
   57808:	beq	57e14 <warn@@Base+0x3044>
   5780c:	bls	57868 <warn@@Base+0x2a98>
   57810:	cmp	r0, #14848	; 0x3a00
   57814:	beq	57d4c <warn@@Base+0x2f7c>
   57818:	bhi	57b6c <warn@@Base+0x2d9c>
   5781c:	ldr	r2, [pc, #2176]	; 580a4 <warn@@Base+0x32d4>
   57820:	ldr	r3, [pc, #2176]	; 580a8 <warn@@Base+0x32d8>
   57824:	cmp	r0, r2
   57828:	movne	r3, #0
   5782c:	b	57154 <warn@@Base+0x2384>
   57830:	cmp	r0, #72	; 0x48
   57834:	beq	57b64 <warn@@Base+0x2d94>
   57838:	cmp	r0, #73	; 0x49
   5783c:	ldr	r3, [pc, #2152]	; 580ac <warn@@Base+0x32dc>
   57840:	movne	r3, #0
   57844:	b	57154 <warn@@Base+0x2384>
   57848:	ldr	r3, [pc, #2144]	; 580b0 <warn@@Base+0x32e0>
   5784c:	cmp	r0, r3
   57850:	beq	57b5c <warn@@Base+0x2d8c>
   57854:	ldr	r2, [pc, #2136]	; 580b4 <warn@@Base+0x32e4>
   57858:	ldr	r3, [pc, #2136]	; 580b8 <warn@@Base+0x32e8>
   5785c:	cmp	r0, r2
   57860:	movne	r3, #0
   57864:	b	57154 <warn@@Base+0x2384>
   57868:	sub	r3, r3, #2
   5786c:	cmp	r0, r3
   57870:	beq	57b54 <warn@@Base+0x2d84>
   57874:	ldr	r2, [pc, #2112]	; 580bc <warn@@Base+0x32ec>
   57878:	ldr	r3, [pc, #2112]	; 580c0 <warn@@Base+0x32f0>
   5787c:	cmp	r0, r2
   57880:	movne	r3, #0
   57884:	b	57154 <warn@@Base+0x2384>
   57888:	ldr	r3, [pc, #2100]	; 580c4 <warn@@Base+0x32f4>
   5788c:	cmp	r0, r3
   57890:	beq	57db4 <warn@@Base+0x2fe4>
   57894:	bhi	5797c <warn@@Base+0x2bac>
   57898:	sub	r3, r3, #2
   5789c:	cmp	r0, r3
   578a0:	beq	57b4c <warn@@Base+0x2d7c>
   578a4:	ldr	r2, [pc, #2076]	; 580c8 <warn@@Base+0x32f8>
   578a8:	ldr	r3, [pc, #2076]	; 580cc <warn@@Base+0x32fc>
   578ac:	cmp	r0, r2
   578b0:	movne	r3, #0
   578b4:	b	57154 <warn@@Base+0x2384>
   578b8:	cmp	r0, #46	; 0x2e
   578bc:	beq	57eb4 <warn@@Base+0x30e4>
   578c0:	bls	57a70 <warn@@Base+0x2ca0>
   578c4:	cmp	r0, #50	; 0x32
   578c8:	beq	57e1c <warn@@Base+0x304c>
   578cc:	bls	57a58 <warn@@Base+0x2c88>
   578d0:	cmp	r0, #52	; 0x34
   578d4:	beq	57d44 <warn@@Base+0x2f74>
   578d8:	bhi	57b44 <warn@@Base+0x2d74>
   578dc:	ldr	r3, [pc, #2028]	; 580d0 <warn@@Base+0x3300>
   578e0:	b	57154 <warn@@Base+0x2384>
   578e4:	cmp	r0, #64	; 0x40
   578e8:	beq	57e2c <warn@@Base+0x305c>
   578ec:	bls	57924 <warn@@Base+0x2b54>
   578f0:	cmp	r0, #66	; 0x42
   578f4:	beq	57d5c <warn@@Base+0x2f8c>
   578f8:	bhi	57b3c <warn@@Base+0x2d6c>
   578fc:	ldr	r3, [pc, #2000]	; 580d4 <warn@@Base+0x3304>
   57900:	b	57154 <warn@@Base+0x2384>
   57904:	sub	r3, r3, #2
   57908:	cmp	r0, r3
   5790c:	beq	57b34 <warn@@Base+0x2d64>
   57910:	ldr	r2, [pc, #1984]	; 580d8 <warn@@Base+0x3308>
   57914:	ldr	r3, [pc, #1984]	; 580dc <warn@@Base+0x330c>
   57918:	cmp	r0, r2
   5791c:	movne	r3, #0
   57920:	b	57154 <warn@@Base+0x2384>
   57924:	cmp	r0, #62	; 0x3e
   57928:	beq	57b2c <warn@@Base+0x2d5c>
   5792c:	cmp	r0, #63	; 0x3f
   57930:	ldr	r3, [pc, #1960]	; 580e0 <warn@@Base+0x3310>
   57934:	movne	r3, #0
   57938:	b	57154 <warn@@Base+0x2384>
   5793c:	cmp	r0, #19
   57940:	beq	57eec <warn@@Base+0x311c>
   57944:	bls	579d8 <warn@@Base+0x2c08>
   57948:	cmp	r0, #25
   5794c:	beq	57e8c <warn@@Base+0x30bc>
   57950:	bls	579b4 <warn@@Base+0x2be4>
   57954:	cmp	r0, #28
   57958:	beq	57ddc <warn@@Base+0x300c>
   5795c:	bls	5799c <warn@@Base+0x2bcc>
   57960:	cmp	r0, #30
   57964:	beq	57d34 <warn@@Base+0x2f64>
   57968:	bcc	57b24 <warn@@Base+0x2d54>
   5796c:	cmp	r0, #32
   57970:	ldr	r3, [pc, #1900]	; 580e4 <warn@@Base+0x3314>
   57974:	movne	r3, #0
   57978:	b	57154 <warn@@Base+0x2384>
   5797c:	ldr	r3, [pc, #1892]	; 580e8 <warn@@Base+0x3318>
   57980:	cmp	r0, r3
   57984:	beq	57b1c <warn@@Base+0x2d4c>
   57988:	ldr	r2, [pc, #1884]	; 580ec <warn@@Base+0x331c>
   5798c:	ldr	r3, [pc, #1884]	; 580f0 <warn@@Base+0x3320>
   57990:	cmp	r0, r2
   57994:	movne	r3, #0
   57998:	b	57154 <warn@@Base+0x2384>
   5799c:	cmp	r0, #26
   579a0:	beq	57b14 <warn@@Base+0x2d44>
   579a4:	cmp	r0, #27
   579a8:	ldr	r3, [pc, #1860]	; 580f4 <warn@@Base+0x3324>
   579ac:	movne	r3, #0
   579b0:	b	57154 <warn@@Base+0x2384>
   579b4:	cmp	r0, #22
   579b8:	beq	57dbc <warn@@Base+0x2fec>
   579bc:	bhi	57a04 <warn@@Base+0x2c34>
   579c0:	cmp	r0, #20
   579c4:	beq	57b0c <warn@@Base+0x2d3c>
   579c8:	cmp	r0, #21
   579cc:	ldr	r3, [pc, #1828]	; 580f8 <warn@@Base+0x3328>
   579d0:	movne	r3, #0
   579d4:	b	57154 <warn@@Base+0x2384>
   579d8:	cmp	r0, #11
   579dc:	beq	57e94 <warn@@Base+0x30c4>
   579e0:	bls	57a34 <warn@@Base+0x2c64>
   579e4:	cmp	r0, #15
   579e8:	beq	57de4 <warn@@Base+0x3014>
   579ec:	bls	57a1c <warn@@Base+0x2c4c>
   579f0:	cmp	r0, #17
   579f4:	beq	57d2c <warn@@Base+0x2f5c>
   579f8:	bhi	57b04 <warn@@Base+0x2d34>
   579fc:	ldr	r3, [pc, #1784]	; 580fc <warn@@Base+0x332c>
   57a00:	b	57154 <warn@@Base+0x2384>
   57a04:	cmp	r0, #23
   57a08:	beq	57afc <warn@@Base+0x2d2c>
   57a0c:	cmp	r0, #24
   57a10:	ldr	r3, [pc, #1768]	; 58100 <warn@@Base+0x3330>
   57a14:	movne	r3, #0
   57a18:	b	57154 <warn@@Base+0x2384>
   57a1c:	cmp	r0, #12
   57a20:	beq	57af4 <warn@@Base+0x2d24>
   57a24:	cmp	r0, #13
   57a28:	ldr	r3, [pc, #1748]	; 58104 <warn@@Base+0x3334>
   57a2c:	movne	r3, #0
   57a30:	b	57154 <warn@@Base+0x2384>
   57a34:	cmp	r0, #3
   57a38:	beq	57d94 <warn@@Base+0x2fc4>
   57a3c:	bhi	57a94 <warn@@Base+0x2cc4>
   57a40:	cmp	r0, #1
   57a44:	beq	57aec <warn@@Base+0x2d1c>
   57a48:	cmp	r0, #2
   57a4c:	ldr	r3, [pc, #1716]	; 58108 <warn@@Base+0x3338>
   57a50:	movne	r3, #0
   57a54:	b	57154 <warn@@Base+0x2384>
   57a58:	cmp	r0, #47	; 0x2f
   57a5c:	beq	57ae4 <warn@@Base+0x2d14>
   57a60:	cmp	r0, #49	; 0x31
   57a64:	ldr	r3, [pc, #1696]	; 5810c <warn@@Base+0x333c>
   57a68:	movne	r3, #0
   57a6c:	b	57154 <warn@@Base+0x2384>
   57a70:	cmp	r0, #39	; 0x27
   57a74:	beq	57da4 <warn@@Base+0x2fd4>
   57a78:	bhi	57aac <warn@@Base+0x2cdc>
   57a7c:	cmp	r0, #34	; 0x22
   57a80:	beq	57adc <warn@@Base+0x2d0c>
   57a84:	cmp	r0, #37	; 0x25
   57a88:	ldr	r3, [pc, #1664]	; 58110 <warn@@Base+0x3340>
   57a8c:	movne	r3, #0
   57a90:	b	57154 <warn@@Base+0x2384>
   57a94:	cmp	r0, #9
   57a98:	beq	57ad4 <warn@@Base+0x2d04>
   57a9c:	cmp	r0, #10
   57aa0:	ldr	r3, [pc, #1644]	; 58114 <warn@@Base+0x3344>
   57aa4:	movne	r3, #0
   57aa8:	b	57154 <warn@@Base+0x2384>
   57aac:	cmp	r0, #42	; 0x2a
   57ab0:	beq	57acc <warn@@Base+0x2cfc>
   57ab4:	cmp	r0, #44	; 0x2c
   57ab8:	ldr	r3, [pc, #1624]	; 58118 <warn@@Base+0x3348>
   57abc:	movne	r3, #0
   57ac0:	b	57154 <warn@@Base+0x2384>
   57ac4:	ldr	r3, [pc, #1616]	; 5811c <warn@@Base+0x334c>
   57ac8:	b	57154 <warn@@Base+0x2384>
   57acc:	ldr	r3, [pc, #1612]	; 58120 <warn@@Base+0x3350>
   57ad0:	b	57154 <warn@@Base+0x2384>
   57ad4:	ldr	r3, [pc, #1608]	; 58124 <warn@@Base+0x3354>
   57ad8:	b	57154 <warn@@Base+0x2384>
   57adc:	ldr	r3, [pc, #1604]	; 58128 <warn@@Base+0x3358>
   57ae0:	b	57154 <warn@@Base+0x2384>
   57ae4:	ldr	r3, [pc, #1600]	; 5812c <warn@@Base+0x335c>
   57ae8:	b	57154 <warn@@Base+0x2384>
   57aec:	ldr	r3, [pc, #1596]	; 58130 <warn@@Base+0x3360>
   57af0:	b	57154 <warn@@Base+0x2384>
   57af4:	ldr	r3, [pc, #1592]	; 58134 <warn@@Base+0x3364>
   57af8:	b	57154 <warn@@Base+0x2384>
   57afc:	ldr	r3, [pc, #1588]	; 58138 <warn@@Base+0x3368>
   57b00:	b	57154 <warn@@Base+0x2384>
   57b04:	ldr	r3, [pc, #1584]	; 5813c <warn@@Base+0x336c>
   57b08:	b	57154 <warn@@Base+0x2384>
   57b0c:	ldr	r3, [pc, #1580]	; 58140 <warn@@Base+0x3370>
   57b10:	b	57154 <warn@@Base+0x2384>
   57b14:	ldr	r3, [pc, #1576]	; 58144 <warn@@Base+0x3374>
   57b18:	b	57154 <warn@@Base+0x2384>
   57b1c:	ldr	r3, [pc, #1572]	; 58148 <warn@@Base+0x3378>
   57b20:	b	57154 <warn@@Base+0x2384>
   57b24:	ldr	r3, [pc, #1568]	; 5814c <warn@@Base+0x337c>
   57b28:	b	57154 <warn@@Base+0x2384>
   57b2c:	ldr	r3, [pc, #1564]	; 58150 <warn@@Base+0x3380>
   57b30:	b	57154 <warn@@Base+0x2384>
   57b34:	ldr	r3, [pc, #1560]	; 58154 <warn@@Base+0x3384>
   57b38:	b	57154 <warn@@Base+0x2384>
   57b3c:	ldr	r3, [pc, #1556]	; 58158 <warn@@Base+0x3388>
   57b40:	b	57154 <warn@@Base+0x2384>
   57b44:	ldr	r3, [pc, #1552]	; 5815c <warn@@Base+0x338c>
   57b48:	b	57154 <warn@@Base+0x2384>
   57b4c:	ldr	r3, [pc, #1548]	; 58160 <warn@@Base+0x3390>
   57b50:	b	57154 <warn@@Base+0x2384>
   57b54:	ldr	r3, [pc, #1544]	; 58164 <warn@@Base+0x3394>
   57b58:	b	57154 <warn@@Base+0x2384>
   57b5c:	ldr	r3, [pc, #1540]	; 58168 <warn@@Base+0x3398>
   57b60:	b	57154 <warn@@Base+0x2384>
   57b64:	ldr	r3, [pc, #1536]	; 5816c <warn@@Base+0x339c>
   57b68:	b	57154 <warn@@Base+0x2384>
   57b6c:	ldr	r3, [pc, #1532]	; 58170 <warn@@Base+0x33a0>
   57b70:	b	57154 <warn@@Base+0x2384>
   57b74:	ldr	r3, [pc, #1528]	; 58174 <warn@@Base+0x33a4>
   57b78:	b	57154 <warn@@Base+0x2384>
   57b7c:	ldr	r3, [pc, #1524]	; 58178 <warn@@Base+0x33a8>
   57b80:	b	57154 <warn@@Base+0x2384>
   57b84:	ldr	r3, [pc, #1520]	; 5817c <warn@@Base+0x33ac>
   57b88:	b	57154 <warn@@Base+0x2384>
   57b8c:	ldr	r3, [pc, #1516]	; 58180 <warn@@Base+0x33b0>
   57b90:	b	57154 <warn@@Base+0x2384>
   57b94:	ldr	r3, [pc, #1512]	; 58184 <warn@@Base+0x33b4>
   57b98:	b	57154 <warn@@Base+0x2384>
   57b9c:	ldr	r3, [pc, #1508]	; 58188 <warn@@Base+0x33b8>
   57ba0:	b	57154 <warn@@Base+0x2384>
   57ba4:	ldr	r3, [pc, #1504]	; 5818c <warn@@Base+0x33bc>
   57ba8:	b	57154 <warn@@Base+0x2384>
   57bac:	ldr	r3, [pc, #1500]	; 58190 <warn@@Base+0x33c0>
   57bb0:	b	57154 <warn@@Base+0x2384>
   57bb4:	ldr	r3, [pc, #1496]	; 58194 <warn@@Base+0x33c4>
   57bb8:	b	57154 <warn@@Base+0x2384>
   57bbc:	ldr	r3, [pc, #1492]	; 58198 <warn@@Base+0x33c8>
   57bc0:	b	57154 <warn@@Base+0x2384>
   57bc4:	ldr	r3, [pc, #1488]	; 5819c <warn@@Base+0x33cc>
   57bc8:	b	57154 <warn@@Base+0x2384>
   57bcc:	ldr	r3, [pc, #1484]	; 581a0 <warn@@Base+0x33d0>
   57bd0:	b	57154 <warn@@Base+0x2384>
   57bd4:	ldr	r3, [pc, #1480]	; 581a4 <warn@@Base+0x33d4>
   57bd8:	b	57154 <warn@@Base+0x2384>
   57bdc:	ldr	r3, [pc, #1476]	; 581a8 <warn@@Base+0x33d8>
   57be0:	b	57154 <warn@@Base+0x2384>
   57be4:	ldr	r3, [pc, #1472]	; 581ac <warn@@Base+0x33dc>
   57be8:	b	57154 <warn@@Base+0x2384>
   57bec:	ldr	r3, [pc, #1468]	; 581b0 <warn@@Base+0x33e0>
   57bf0:	b	57154 <warn@@Base+0x2384>
   57bf4:	ldr	r3, [pc, #1464]	; 581b4 <warn@@Base+0x33e4>
   57bf8:	b	57154 <warn@@Base+0x2384>
   57bfc:	ldr	r3, [pc, #1460]	; 581b8 <warn@@Base+0x33e8>
   57c00:	b	57154 <warn@@Base+0x2384>
   57c04:	ldr	r3, [pc, #1456]	; 581bc <warn@@Base+0x33ec>
   57c08:	b	57154 <warn@@Base+0x2384>
   57c0c:	ldr	r3, [pc, #1452]	; 581c0 <warn@@Base+0x33f0>
   57c10:	b	57154 <warn@@Base+0x2384>
   57c14:	ldr	r3, [pc, #1448]	; 581c4 <warn@@Base+0x33f4>
   57c18:	b	57154 <warn@@Base+0x2384>
   57c1c:	ldr	r3, [pc, #1444]	; 581c8 <warn@@Base+0x33f8>
   57c20:	b	57154 <warn@@Base+0x2384>
   57c24:	ldr	r3, [pc, #1440]	; 581cc <warn@@Base+0x33fc>
   57c28:	b	57154 <warn@@Base+0x2384>
   57c2c:	ldr	r3, [pc, #1436]	; 581d0 <warn@@Base+0x3400>
   57c30:	b	57154 <warn@@Base+0x2384>
   57c34:	ldr	r3, [pc, #1432]	; 581d4 <warn@@Base+0x3404>
   57c38:	b	57154 <warn@@Base+0x2384>
   57c3c:	ldr	r3, [pc, #1428]	; 581d8 <warn@@Base+0x3408>
   57c40:	b	57154 <warn@@Base+0x2384>
   57c44:	ldr	r3, [pc, #1424]	; 581dc <warn@@Base+0x340c>
   57c48:	b	57154 <warn@@Base+0x2384>
   57c4c:	ldr	r3, [pc, #1420]	; 581e0 <warn@@Base+0x3410>
   57c50:	b	57154 <warn@@Base+0x2384>
   57c54:	ldr	r3, [pc, #1416]	; 581e4 <warn@@Base+0x3414>
   57c58:	b	57154 <warn@@Base+0x2384>
   57c5c:	ldr	r3, [pc, #1412]	; 581e8 <warn@@Base+0x3418>
   57c60:	b	57154 <warn@@Base+0x2384>
   57c64:	ldr	r3, [pc, #1408]	; 581ec <warn@@Base+0x341c>
   57c68:	b	57154 <warn@@Base+0x2384>
   57c6c:	ldr	r3, [pc, #1404]	; 581f0 <warn@@Base+0x3420>
   57c70:	b	57154 <warn@@Base+0x2384>
   57c74:	ldr	r3, [pc, #1400]	; 581f4 <warn@@Base+0x3424>
   57c78:	b	57154 <warn@@Base+0x2384>
   57c7c:	ldr	r3, [pc, #1396]	; 581f8 <warn@@Base+0x3428>
   57c80:	b	57154 <warn@@Base+0x2384>
   57c84:	ldr	r3, [pc, #1392]	; 581fc <warn@@Base+0x342c>
   57c88:	b	57154 <warn@@Base+0x2384>
   57c8c:	ldr	r3, [pc, #1388]	; 58200 <warn@@Base+0x3430>
   57c90:	b	57154 <warn@@Base+0x2384>
   57c94:	ldr	r3, [pc, #1384]	; 58204 <warn@@Base+0x3434>
   57c98:	b	57154 <warn@@Base+0x2384>
   57c9c:	ldr	r3, [pc, #1380]	; 58208 <warn@@Base+0x3438>
   57ca0:	b	57154 <warn@@Base+0x2384>
   57ca4:	ldr	r3, [pc, #1376]	; 5820c <warn@@Base+0x343c>
   57ca8:	b	57154 <warn@@Base+0x2384>
   57cac:	ldr	r3, [pc, #1372]	; 58210 <warn@@Base+0x3440>
   57cb0:	b	57154 <warn@@Base+0x2384>
   57cb4:	ldr	r3, [pc, #1368]	; 58214 <warn@@Base+0x3444>
   57cb8:	b	57154 <warn@@Base+0x2384>
   57cbc:	ldr	r3, [pc, #1364]	; 58218 <warn@@Base+0x3448>
   57cc0:	b	57154 <warn@@Base+0x2384>
   57cc4:	ldr	r3, [pc, #1360]	; 5821c <warn@@Base+0x344c>
   57cc8:	b	57154 <warn@@Base+0x2384>
   57ccc:	ldr	r3, [pc, #1356]	; 58220 <warn@@Base+0x3450>
   57cd0:	b	57154 <warn@@Base+0x2384>
   57cd4:	ldr	r3, [pc, #1352]	; 58224 <warn@@Base+0x3454>
   57cd8:	b	57154 <warn@@Base+0x2384>
   57cdc:	ldr	r3, [pc, #1348]	; 58228 <warn@@Base+0x3458>
   57ce0:	b	57154 <warn@@Base+0x2384>
   57ce4:	ldr	r3, [pc, #1344]	; 5822c <warn@@Base+0x345c>
   57ce8:	b	57154 <warn@@Base+0x2384>
   57cec:	ldr	r3, [pc, #1340]	; 58230 <warn@@Base+0x3460>
   57cf0:	b	57154 <warn@@Base+0x2384>
   57cf4:	ldr	r3, [pc, #1336]	; 58234 <warn@@Base+0x3464>
   57cf8:	b	57154 <warn@@Base+0x2384>
   57cfc:	ldr	r3, [pc, #1332]	; 58238 <warn@@Base+0x3468>
   57d00:	b	57154 <warn@@Base+0x2384>
   57d04:	ldr	r3, [pc, #1328]	; 5823c <warn@@Base+0x346c>
   57d08:	b	57154 <warn@@Base+0x2384>
   57d0c:	ldr	r3, [pc, #1324]	; 58240 <warn@@Base+0x3470>
   57d10:	b	57154 <warn@@Base+0x2384>
   57d14:	ldr	r3, [pc, #1320]	; 58244 <warn@@Base+0x3474>
   57d18:	b	57154 <warn@@Base+0x2384>
   57d1c:	ldr	r3, [pc, #1316]	; 58248 <warn@@Base+0x3478>
   57d20:	b	57154 <warn@@Base+0x2384>
   57d24:	ldr	r3, [pc, #1312]	; 5824c <warn@@Base+0x347c>
   57d28:	b	57154 <warn@@Base+0x2384>
   57d2c:	ldr	r3, [pc, #1308]	; 58250 <warn@@Base+0x3480>
   57d30:	b	57154 <warn@@Base+0x2384>
   57d34:	ldr	r3, [pc, #1304]	; 58254 <warn@@Base+0x3484>
   57d38:	b	57154 <warn@@Base+0x2384>
   57d3c:	ldr	r3, [pc, #1300]	; 58258 <warn@@Base+0x3488>
   57d40:	b	57154 <warn@@Base+0x2384>
   57d44:	ldr	r3, [pc, #1296]	; 5825c <warn@@Base+0x348c>
   57d48:	b	57154 <warn@@Base+0x2384>
   57d4c:	ldr	r3, [pc, #1292]	; 58260 <warn@@Base+0x3490>
   57d50:	b	57154 <warn@@Base+0x2384>
   57d54:	ldr	r3, [pc, #1288]	; 58264 <warn@@Base+0x3494>
   57d58:	b	57154 <warn@@Base+0x2384>
   57d5c:	ldr	r3, [pc, #1284]	; 58268 <warn@@Base+0x3498>
   57d60:	b	57154 <warn@@Base+0x2384>
   57d64:	ldr	r3, [pc, #1280]	; 5826c <warn@@Base+0x349c>
   57d68:	b	57154 <warn@@Base+0x2384>
   57d6c:	ldr	r3, [pc, #1276]	; 58270 <warn@@Base+0x34a0>
   57d70:	b	57154 <warn@@Base+0x2384>
   57d74:	ldr	r3, [pc, #1272]	; 58274 <warn@@Base+0x34a4>
   57d78:	b	57154 <warn@@Base+0x2384>
   57d7c:	ldr	r3, [pc, #1268]	; 58278 <warn@@Base+0x34a8>
   57d80:	b	57154 <warn@@Base+0x2384>
   57d84:	ldr	r3, [pc, #1264]	; 5827c <warn@@Base+0x34ac>
   57d88:	b	57154 <warn@@Base+0x2384>
   57d8c:	ldr	r3, [pc, #1260]	; 58280 <warn@@Base+0x34b0>
   57d90:	b	57154 <warn@@Base+0x2384>
   57d94:	ldr	r3, [pc, #1256]	; 58284 <warn@@Base+0x34b4>
   57d98:	b	57154 <warn@@Base+0x2384>
   57d9c:	ldr	r3, [pc, #1252]	; 58288 <warn@@Base+0x34b8>
   57da0:	b	57154 <warn@@Base+0x2384>
   57da4:	ldr	r3, [pc, #1248]	; 5828c <warn@@Base+0x34bc>
   57da8:	b	57154 <warn@@Base+0x2384>
   57dac:	ldr	r3, [pc, #1244]	; 58290 <warn@@Base+0x34c0>
   57db0:	b	57154 <warn@@Base+0x2384>
   57db4:	ldr	r3, [pc, #1240]	; 58294 <warn@@Base+0x34c4>
   57db8:	b	57154 <warn@@Base+0x2384>
   57dbc:	ldr	r3, [pc, #1236]	; 58298 <warn@@Base+0x34c8>
   57dc0:	b	57154 <warn@@Base+0x2384>
   57dc4:	ldr	r3, [pc, #1232]	; 5829c <warn@@Base+0x34cc>
   57dc8:	b	57154 <warn@@Base+0x2384>
   57dcc:	ldr	r3, [pc, #1228]	; 582a0 <warn@@Base+0x34d0>
   57dd0:	b	57154 <warn@@Base+0x2384>
   57dd4:	ldr	r3, [pc, #1224]	; 582a4 <warn@@Base+0x34d4>
   57dd8:	b	57154 <warn@@Base+0x2384>
   57ddc:	ldr	r3, [pc, #1220]	; 582a8 <warn@@Base+0x34d8>
   57de0:	b	57154 <warn@@Base+0x2384>
   57de4:	ldr	r3, [pc, #1216]	; 582ac <warn@@Base+0x34dc>
   57de8:	b	57154 <warn@@Base+0x2384>
   57dec:	ldr	r3, [pc, #1212]	; 582b0 <warn@@Base+0x34e0>
   57df0:	b	57154 <warn@@Base+0x2384>
   57df4:	ldr	r3, [pc, #1208]	; 582b4 <warn@@Base+0x34e4>
   57df8:	b	57154 <warn@@Base+0x2384>
   57dfc:	ldr	r3, [pc, #1204]	; 582b8 <warn@@Base+0x34e8>
   57e00:	b	57154 <warn@@Base+0x2384>
   57e04:	ldr	r3, [pc, #1200]	; 582bc <warn@@Base+0x34ec>
   57e08:	b	57154 <warn@@Base+0x2384>
   57e0c:	ldr	r3, [pc, #1196]	; 582c0 <warn@@Base+0x34f0>
   57e10:	b	57154 <warn@@Base+0x2384>
   57e14:	ldr	r3, [pc, #1192]	; 582c4 <warn@@Base+0x34f4>
   57e18:	b	57154 <warn@@Base+0x2384>
   57e1c:	ldr	r3, [pc, #1188]	; 582c8 <warn@@Base+0x34f8>
   57e20:	b	57154 <warn@@Base+0x2384>
   57e24:	ldr	r3, [pc, #1184]	; 582cc <warn@@Base+0x34fc>
   57e28:	b	57154 <warn@@Base+0x2384>
   57e2c:	ldr	r3, [pc, #1180]	; 582d0 <warn@@Base+0x3500>
   57e30:	b	57154 <warn@@Base+0x2384>
   57e34:	ldr	r3, [pc, #1176]	; 582d4 <warn@@Base+0x3504>
   57e38:	b	57154 <warn@@Base+0x2384>
   57e3c:	ldr	r3, [pc, #1172]	; 582d8 <warn@@Base+0x3508>
   57e40:	b	57154 <warn@@Base+0x2384>
   57e44:	ldr	r3, [pc, #1168]	; 582dc <warn@@Base+0x350c>
   57e48:	b	57154 <warn@@Base+0x2384>
   57e4c:	ldr	r3, [pc, #1164]	; 582e0 <warn@@Base+0x3510>
   57e50:	b	57154 <warn@@Base+0x2384>
   57e54:	ldr	r3, [pc, #1160]	; 582e4 <warn@@Base+0x3514>
   57e58:	b	57154 <warn@@Base+0x2384>
   57e5c:	ldr	r3, [pc, #1156]	; 582e8 <warn@@Base+0x3518>
   57e60:	b	57154 <warn@@Base+0x2384>
   57e64:	ldr	r3, [pc, #1152]	; 582ec <warn@@Base+0x351c>
   57e68:	b	57154 <warn@@Base+0x2384>
   57e6c:	ldr	r3, [pc, #1148]	; 582f0 <warn@@Base+0x3520>
   57e70:	b	57154 <warn@@Base+0x2384>
   57e74:	ldr	r3, [pc, #1144]	; 582f4 <warn@@Base+0x3524>
   57e78:	b	57154 <warn@@Base+0x2384>
   57e7c:	ldr	r3, [pc, #1140]	; 582f8 <warn@@Base+0x3528>
   57e80:	b	57154 <warn@@Base+0x2384>
   57e84:	ldr	r3, [pc, #1136]	; 582fc <warn@@Base+0x352c>
   57e88:	b	57154 <warn@@Base+0x2384>
   57e8c:	ldr	r3, [pc, #1132]	; 58300 <warn@@Base+0x3530>
   57e90:	b	57154 <warn@@Base+0x2384>
   57e94:	ldr	r3, [pc, #1128]	; 58304 <warn@@Base+0x3534>
   57e98:	b	57154 <warn@@Base+0x2384>
   57e9c:	ldr	r3, [pc, #1124]	; 58308 <warn@@Base+0x3538>
   57ea0:	b	57154 <warn@@Base+0x2384>
   57ea4:	ldr	r3, [pc, #1120]	; 5830c <warn@@Base+0x353c>
   57ea8:	b	57154 <warn@@Base+0x2384>
   57eac:	ldr	r3, [pc, #1116]	; 58310 <warn@@Base+0x3540>
   57eb0:	b	57154 <warn@@Base+0x2384>
   57eb4:	ldr	r3, [pc, #1112]	; 58314 <warn@@Base+0x3544>
   57eb8:	b	57154 <warn@@Base+0x2384>
   57ebc:	ldr	r3, [pc, #1108]	; 58318 <warn@@Base+0x3548>
   57ec0:	b	57154 <warn@@Base+0x2384>
   57ec4:	ldr	r3, [pc, #1104]	; 5831c <warn@@Base+0x354c>
   57ec8:	b	57154 <warn@@Base+0x2384>
   57ecc:	ldr	r3, [pc, #1100]	; 58320 <warn@@Base+0x3550>
   57ed0:	b	57154 <warn@@Base+0x2384>
   57ed4:	ldr	r3, [pc, #1096]	; 58324 <warn@@Base+0x3554>
   57ed8:	b	57154 <warn@@Base+0x2384>
   57edc:	ldr	r3, [pc, #1092]	; 58328 <warn@@Base+0x3558>
   57ee0:	b	57154 <warn@@Base+0x2384>
   57ee4:	ldr	r3, [pc, #1088]	; 5832c <warn@@Base+0x355c>
   57ee8:	b	57154 <warn@@Base+0x2384>
   57eec:	ldr	r3, [pc, #1084]	; 58330 <warn@@Base+0x3560>
   57ef0:	b	57154 <warn@@Base+0x2384>
   57ef4:	ldr	r3, [pc, #1080]	; 58334 <warn@@Base+0x3564>
   57ef8:	b	57154 <warn@@Base+0x2384>
   57efc:	ldr	r3, [pc, #1076]	; 58338 <warn@@Base+0x3568>
   57f00:	b	57154 <warn@@Base+0x2384>
   57f04:	ldr	r3, [pc, #1072]	; 5833c <warn@@Base+0x356c>
   57f08:	b	57154 <warn@@Base+0x2384>
   57f0c:	ldr	r3, [pc, #1068]	; 58340 <warn@@Base+0x3570>
   57f10:	b	57154 <warn@@Base+0x2384>
   57f14:	ldr	r3, [pc, #1064]	; 58344 <warn@@Base+0x3574>
   57f18:	b	57154 <warn@@Base+0x2384>
   57f1c:	ldr	r3, [pc, #1060]	; 58348 <warn@@Base+0x3578>
   57f20:	b	57154 <warn@@Base+0x2384>
   57f24:	ldr	r3, [pc, #1056]	; 5834c <warn@@Base+0x357c>
   57f28:	b	57154 <warn@@Base+0x2384>
   57f2c:	ldr	r3, [pc, #1052]	; 58350 <warn@@Base+0x3580>
   57f30:	b	57154 <warn@@Base+0x2384>
   57f34:	ldr	r3, [pc, #1048]	; 58354 <warn@@Base+0x3584>
   57f38:	b	57154 <warn@@Base+0x2384>
   57f3c:	ldr	r3, [pc, #1044]	; 58358 <warn@@Base+0x3588>
   57f40:	b	57154 <warn@@Base+0x2384>
   57f44:	ldr	r3, [pc, #1040]	; 5835c <warn@@Base+0x358c>
   57f48:	b	57154 <warn@@Base+0x2384>
   57f4c:	ldr	r3, [pc, #1036]	; 58360 <warn@@Base+0x3590>
   57f50:	b	57154 <warn@@Base+0x2384>
   57f54:	ldr	r3, [pc, #1032]	; 58364 <warn@@Base+0x3594>
   57f58:	b	57154 <warn@@Base+0x2384>
   57f5c:	ldr	r3, [pc, #1028]	; 58368 <warn@@Base+0x3598>
   57f60:	b	57154 <warn@@Base+0x2384>
   57f64:	andeq	r2, r0, r5, lsl #2
   57f68:	andeq	r2, r0, r5, lsr r1
   57f6c:	andeq	r3, r0, r2, lsl #20
   57f70:	andeq	r3, r0, r7, ror #31
   57f74:	andeq	r3, r0, r5, ror #31
   57f78:	andeq	r6, r8, ip, asr #24
   57f7c:	andeq	r6, r8, r4, ror r2
   57f80:	andeq	r3, r0, r2, ror #31
   57f84:	andeq	r6, r8, r8, lsr #24
   57f88:	andeq	r6, r8, ip, asr #4
   57f8c:	andeq	r6, r8, ip, lsl #6
   57f90:	andeq	r6, r8, r8, ror #3
   57f94:	andeq	r6, r8, r8, ror #5
   57f98:	andeq	r6, r8, ip, asr #3
   57f9c:	andeq	r6, r8, r4, asr r1
   57fa0:	strdeq	r6, [r8], -r8
   57fa4:	andeq	r5, r8, ip, lsl #29
   57fa8:	muleq	r8, r4, r1
   57fac:	ldrdeq	r6, [r8], -r4
   57fb0:	andeq	r6, r8, ip, rrx
   57fb4:	andeq	r6, r8, r0, lsl r0
   57fb8:	muleq	r8, ip, r0
   57fbc:	andeq	r5, r8, r0, ror #31
   57fc0:	andeq	r5, r8, ip, ror #30
   57fc4:	andeq	r3, r0, sl, ror #31
   57fc8:	andeq	r3, r0, ip, ror #31
   57fcc:	andeq	r3, r0, sp, ror #31
   57fd0:	andeq	r6, r8, ip, asr #26
   57fd4:	andeq	r5, r8, ip, asr lr
   57fd8:	andeq	r2, r0, r9, lsl r1
   57fdc:	andeq	r2, r0, r7, lsl r1
   57fe0:	andeq	r6, r8, r4, ror #19
   57fe4:	andeq	r2, r0, r8, lsl r0
   57fe8:	andeq	r2, r0, r2, lsr #32
   57fec:	andeq	r2, r0, r0, lsr #32
   57ff0:	andeq	r2, r0, pc, lsl r0
   57ff4:	andeq	r6, r8, r0, asr r7
   57ff8:	andeq	r2, r0, r4, lsl r1
   57ffc:	andeq	r6, r8, r8, lsr #19
   58000:	andeq	r2, r0, sl, lsl r0
   58004:	andeq	r6, r8, r4, lsr #14
   58008:	andeq	r2, r0, r1, lsl #2
   5800c:	andeq	r2, r0, r3, lsl #2
   58010:	strdeq	r6, [r8], -r8
   58014:	andeq	r2, r0, r4, lsl r0
   58018:	andeq	r2, r0, r6, lsl r0
   5801c:	muleq	r8, r4, r6
   58020:	andeq	r2, r0, r3
   58024:	andeq	r2, r0, r5
   58028:	andeq	r6, r8, r8, lsr #10
   5802c:	andeq	r2, r0, r9, lsr #32
   58030:	andeq	r6, r8, ip, asr #15
   58034:	andeq	r2, r0, r2
   58038:	strdeq	r6, [r8], -r4
   5803c:	muleq	r8, r8, r4
   58040:	andeq	r6, r8, r8, lsr #8
   58044:	ldrdeq	r6, [r8], -r0
   58048:	strdeq	r6, [r8], -ip
   5804c:	andeq	r6, r8, r8, ror r3
   58050:	andeq	r2, r0, r3, lsl r0
   58054:	andeq	r6, r8, r4, ror #12
   58058:	andeq	r2, r0, r9
   5805c:			; <UNDEFINED> instruction: 0x000865b0
   58060:	andeq	r6, r8, r0, asr #7
   58064:	andeq	r2, r0, fp
   58068:	andeq	r2, r0, r0, lsl r0
   5806c:	andeq	r6, r8, r4, lsl r6
   58070:	andeq	r2, r0, r1, lsr r1
   58074:	andeq	r2, r0, r3, lsr r1
   58078:	muleq	r8, r0, sl
   5807c:	andeq	r2, r0, lr, lsl #2
   58080:	andeq	r2, r0, r0, lsl r1
   58084:	andeq	r6, r8, r0, lsr #18
   58088:	andeq	r2, r0, r0, lsr r1
   5808c:	andeq	r6, r8, r8, ror #20
   58090:	andeq	r2, r0, sp, lsl #2
   58094:	ldrdeq	r6, [r8], -ip
   58098:	andeq	r2, r0, r7, lsl #2
   5809c:	andeq	r6, r8, r0, asr r8
   580a0:	andeq	r2, r0, r5, lsl #6
   580a4:	andeq	r3, r0, r0, lsl r2
   580a8:			; <UNDEFINED> instruction: 0x00086bbc
   580ac:	andeq	r5, r8, r4, lsr #31
   580b0:	andeq	r2, r0, r9, lsl #2
   580b4:	andeq	r2, r0, sl, lsl #2
   580b8:	muleq	r8, r4, r8
   580bc:	andeq	r2, r0, r4, lsl #6
   580c0:	muleq	r8, r4, fp
   580c4:	andeq	r2, r0, r8, lsr r1
   580c8:	andeq	r2, r0, r7, lsr r1
   580cc:	strdeq	r6, [r8], -ip
   580d0:	strdeq	r5, [r8], -r8
   580d4:	andeq	r5, r8, r8, lsl #30
   580d8:	andeq	r3, r0, r9, ror #31
   580dc:	ldrdeq	r6, [r8], -r4
   580e0:	andeq	r5, r8, r4, ror #29
   580e4:	andeq	r5, r8, r0, lsr #26
   580e8:	andeq	r2, r0, r1, lsl #4
   580ec:	andeq	r2, r0, r1, lsl #6
   580f0:	andeq	r6, r8, r4, asr #22
   580f4:	ldrdeq	r5, [r8], -r0
   580f8:	andeq	r5, r8, r0, ror #24
   580fc:	andeq	r5, r8, r0, lsl ip
   58100:	muleq	r8, r4, ip
   58104:	andeq	r5, r8, ip, ror #23
   58108:	andeq	r6, r8, r4, ror #26
   5810c:	andeq	r5, r8, ip, asr #27
   58110:	andeq	r5, r8, r8, asr sp
   58114:			; <UNDEFINED> instruction: 0x00085bb4
   58118:	muleq	r8, r0, sp
   5811c:	andeq	r6, r8, r0, lsl #25
   58120:	andeq	r5, r8, ip, ror sp
   58124:	andeq	r5, r8, r4, lsr #23
   58128:	andeq	r5, r8, r4, asr #26
   5812c:			; <UNDEFINED> instruction: 0x00085db8
   58130:	andeq	r5, r8, r8, lsl #23
   58134:	ldrdeq	r5, [r8], -r8
   58138:	andeq	r5, r8, r0, lsl #25
   5813c:	andeq	r5, r8, r0, lsr ip
   58140:	andeq	r5, r8, r0, asr ip
   58144:			; <UNDEFINED> instruction: 0x00085cb8
   58148:	andeq	r6, r8, r8, lsr #22
   5814c:	strdeq	r5, [r8], -r4
   58150:	ldrdeq	r5, [r8], -r4
   58154:			; <UNDEFINED> instruction: 0x00086cb8
   58158:	andeq	r5, r8, r0, lsr pc
   5815c:	andeq	r5, r8, r0, lsr #28
   58160:	andeq	r6, r8, r4, ror #21
   58164:	andeq	r6, r8, r0, lsl #23
   58168:	andeq	r6, r8, ip, ror r8
   5816c:	muleq	r8, r0, pc	; <UNPREDICTABLE>
   58170:	andeq	r6, r8, r8, ror #23
   58174:	andeq	r6, r8, r0, asr #16
   58178:	andeq	r6, r8, r0, asr #17
   5817c:	andeq	r6, r8, r4, asr sl
   58180:	andeq	r6, r8, r0, asr r9
   58184:			; <UNDEFINED> instruction: 0x00086abc
   58188:	andeq	r6, r8, r4, ror #11
   5818c:	andeq	r6, r8, ip, lsr #7
   58190:	muleq	r8, ip, r5
   58194:	andeq	r6, r8, ip, asr #12
   58198:	andeq	r6, r8, ip, asr r3
   5819c:	andeq	r6, r8, ip, ror #7
   581a0:	andeq	r6, r8, r0, asr #9
   581a4:	andeq	r6, r8, r0, ror #8
   581a8:	andeq	r6, r8, r8, lsl #9
   581ac:	andeq	r6, r8, r4, ror #9
   581b0:			; <UNDEFINED> instruction: 0x000867b0
   581b4:	andeq	r6, r8, r0, ror #10
   581b8:	andeq	r6, r8, r4, asr #13
   581bc:	andeq	r6, r8, r8, lsl r8
   581c0:	andeq	r6, r8, r0, lsl #14
   581c4:	andeq	r6, r8, ip, lsl #19
   581c8:	andeq	r6, r8, r8, ror r7
   581cc:	andeq	r6, r8, r0, lsr #20
   581d0:	andeq	r5, r8, r0, asr lr
   581d4:	andeq	r6, r8, ip, lsl #26
   581d8:	andeq	r5, r8, ip, asr pc
   581dc:	andeq	r5, r8, r4, asr #31
   581e0:	andeq	r6, r8, ip, lsl #1
   581e4:	andeq	r6, r8, r4, lsr r0
   581e8:	andeq	r6, r8, ip, asr r0
   581ec:	andeq	r6, r8, r4, asr #1
   581f0:	andeq	r6, r8, ip, ror r1
   581f4:	andeq	r5, r8, ip, lsr #29
   581f8:	andeq	r6, r8, r0, lsr #2
   581fc:	andeq	r6, r8, r0, asr #2
   58200:			; <UNDEFINED> instruction: 0x000861bc
   58204:	ldrdeq	r6, [r8], -r8
   58208:	andeq	r6, r8, r8, lsl #4
   5820c:	andeq	r6, r8, r4, lsr r3
   58210:	andeq	r6, r8, r8, lsr r2
   58214:	andeq	r6, r8, r0, lsl ip
   58218:			; <UNDEFINED> instruction: 0x000862b4
   5821c:	strdeq	r6, [r8], -r8
   58220:	andeq	r6, r8, r0, asr #10
   58224:			; <UNDEFINED> instruction: 0x000866b0
   58228:	andeq	r6, r8, r4, asr #8
   5822c:	andeq	r6, r8, r4, ror #14
   58230:	andeq	r6, r8, r8, lsl #16
   58234:	andeq	r6, r8, ip, lsl r3
   58238:	muleq	r8, r4, r2
   5823c:	andeq	r6, r8, r4, lsl #20
   58240:	andeq	r6, r8, ip, lsr #26
   58244:	andeq	r6, r8, r0, lsr #32
   58248:	andeq	r6, r8, ip, lsl #2
   5824c:	muleq	r8, ip, lr
   58250:	andeq	r5, r8, r0, lsr #24
   58254:	andeq	r5, r8, ip, lsl #26
   58258:	andeq	r6, r8, r0, ror #24
   5825c:	andeq	r5, r8, ip, lsl #28
   58260:	ldrdeq	r6, [r8], -r8
   58264:	andeq	r6, r8, r8, lsr #21
   58268:	andeq	r5, r8, r8, lsl pc
   5826c:	andeq	r6, r8, r8, lsr r9
   58270:	andeq	r6, r8, r4, ror #16
   58274:	muleq	r8, r4, r3
   58278:	andeq	r6, r8, ip, asr #11
   5827c:	andeq	r6, r8, ip, ror #2
   58280:			; <UNDEFINED> instruction: 0x000864b0
   58284:	muleq	r8, r8, fp
   58288:	andeq	r5, r8, ip, ror pc
   5828c:	andeq	r5, r8, r8, ror #26
   58290:	andeq	r6, r8, ip, ror r0
   58294:	andeq	r6, r8, r0, lsl fp
   58298:	andeq	r5, r8, ip, ror #24
   5829c:	ldrdeq	r6, [r8], -ip
   582a0:	andeq	r6, r8, r0, lsl #13
   582a4:	andeq	r6, r8, ip, lsr ip
   582a8:	andeq	r5, r8, r0, ror #25
   582ac:	strdeq	r5, [r8], -ip
   582b0:	andeq	r5, r8, r8, ror lr
   582b4:	strdeq	r6, [r8], -r0
   582b8:	ldrdeq	r6, [r8], -r0
   582bc:	andeq	r6, r8, r4, ror #1
   582c0:	strdeq	r5, [r8], -r4
   582c4:	andeq	r6, r8, ip, lsr #23
   582c8:	andeq	r5, r8, r4, ror #27
   582cc:	andeq	r6, r8, ip, ror sl
   582d0:	strdeq	r5, [r8], -r4
   582d4:	andeq	r6, r8, r0, lsl #18
   582d8:	andeq	r6, r8, r8, ror #15
   582dc:	andeq	r6, r8, r0, ror #4
   582e0:	strdeq	r6, [r8], -ip
   582e4:	andeq	r6, r8, ip, lsr r7
   582e8:	andeq	r6, r8, r4, lsl r4
   582ec:	andeq	r6, r8, ip, lsl #10
   582f0:	andeq	r6, r8, r4, ror #22
   582f4:	ldrdeq	r6, [r8], -r4
   582f8:	strdeq	r6, [r8], -ip
   582fc:	andeq	r6, r8, r0, lsr r6
   58300:	andeq	r5, r8, r4, lsr #25
   58304:	andeq	r5, r8, r8, asr #23
   58308:			; <UNDEFINED> instruction: 0x00085fb0
   5830c:	andeq	r6, r8, r4, lsr #3
   58310:	strheq	r6, [r8], -r0
   58314:	andeq	r5, r8, r4, lsr #27
   58318:	andeq	r6, r8, r8, lsr #17
   5831c:	andeq	r5, r8, r0, asr #29
   58320:	andeq	r6, r8, r0, asr #20
   58324:	andeq	r6, r8, r0, asr #5
   58328:	muleq	r8, r4, r7
   5832c:	muleq	r8, ip, ip
   58330:	andeq	r5, r8, r0, asr #24
   58334:	andeq	r6, r8, r8, asr #32
   58338:	andeq	r6, r8, r8, ror r4
   5833c:	andeq	r6, r8, r0, lsr #4
   58340:	andeq	r6, r8, r0, ror #13
   58344:	andeq	r6, r8, ip, ror #18
   58348:	andeq	r5, r8, r4, lsr lr
   5834c:	strdeq	r6, [r8], -ip
   58350:	andeq	r5, r8, r0, lsr sp
   58354:	andeq	r6, r8, r4, lsl #11
   58358:	andeq	r6, r8, ip, lsr #2
   5835c:	ldrdeq	r6, [r8], -r0
   58360:	andeq	r5, r8, r4, asr #30
   58364:	andeq	r6, r8, ip, lsr #16
   58368:	andeq	r6, r8, r4, asr #6
   5836c:	sub	r0, r0, #3
   58370:	cmp	r0, #250	; 0xfa
   58374:	ldrls	r3, [pc, #8]	; 58384 <warn@@Base+0x35b4>
   58378:	ldrls	r0, [r3, r0, lsl #2]
   5837c:	movhi	r0, #0
   58380:	bx	lr
   58384:	andeq	r4, r8, r0, asr #14
   58388:	cmp	r0, #144	; 0x90
   5838c:	ldrls	r3, [pc, #12]	; 583a0 <warn@@Base+0x35d0>
   58390:	addls	r0, r3, r0, lsl #2
   58394:	ldrls	r0, [r0, #1004]	; 0x3ec
   58398:	movhi	r0, #0
   5839c:	bx	lr
   583a0:	andeq	r4, r8, r0, asr #14
   583a4:	cmp	r0, #192	; 0xc0
   583a8:	ldrls	r3, [pc, #12]	; 583bc <warn@@Base+0x35ec>
   583ac:	addls	r0, r3, r0, lsl #2
   583b0:	ldrls	r0, [r0, #1584]	; 0x630
   583b4:	movhi	r0, #0
   583b8:	bx	lr
   583bc:	andeq	r4, r8, r0, asr #14
   583c0:	cmp	r0, #4
   583c4:	beq	58450 <warn@@Base+0x3680>
   583c8:	bls	583fc <warn@@Base+0x362c>
   583cc:	cmp	r0, #8192	; 0x2000
   583d0:	beq	58448 <warn@@Base+0x3678>
   583d4:	bls	5841c <warn@@Base+0x364c>
   583d8:	ldr	r3, [pc, #120]	; 58458 <warn@@Base+0x3688>
   583dc:	cmp	r0, r3
   583e0:	beq	58430 <warn@@Base+0x3660>
   583e4:	ldr	r2, [pc, #112]	; 5845c <warn@@Base+0x368c>
   583e8:	ldr	r3, [pc, #112]	; 58460 <warn@@Base+0x3690>
   583ec:	cmp	r0, r2
   583f0:	moveq	r0, r3
   583f4:	movne	r0, #0
   583f8:	bx	lr
   583fc:	cmp	r0, #2
   58400:	beq	58440 <warn@@Base+0x3670>
   58404:	bhi	58438 <warn@@Base+0x3668>
   58408:	ldr	r3, [pc, #84]	; 58464 <warn@@Base+0x3694>
   5840c:	cmp	r0, #1
   58410:	moveq	r0, r3
   58414:	movne	r0, #0
   58418:	bx	lr
   5841c:	ldr	r3, [pc, #68]	; 58468 <warn@@Base+0x3698>
   58420:	cmp	r0, #5
   58424:	moveq	r0, r3
   58428:	movne	r0, #0
   5842c:	bx	lr
   58430:	ldr	r0, [pc, #52]	; 5846c <warn@@Base+0x369c>
   58434:	bx	lr
   58438:	ldr	r0, [pc, #48]	; 58470 <warn@@Base+0x36a0>
   5843c:	bx	lr
   58440:	ldr	r0, [pc, #44]	; 58474 <warn@@Base+0x36a4>
   58444:	bx	lr
   58448:	ldr	r0, [pc, #40]	; 58478 <warn@@Base+0x36a8>
   5844c:	bx	lr
   58450:	ldr	r0, [pc, #36]	; 5847c <warn@@Base+0x36ac>
   58454:	bx	lr
   58458:	andeq	r2, r0, r1
   5845c:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   58460:	andeq	r6, r8, r0, asr #27
   58464:	andeq	r6, r8, r4, ror sp
   58468:	andeq	r6, r8, ip, lsr #27
   5846c:	andeq	r6, r8, r4, ror #27
   58470:	andeq	r6, r8, r8, lsl #27
   58474:	strdeq	r6, [r8], -r8
   58478:	ldrdeq	r6, [r8], -r0
   5847c:	muleq	r8, ip, sp
   58480:	ldrb	r3, [r0]
   58484:	ldr	r1, [pc, #68]	; 584d0 <warn@@Base+0x3700>
   58488:	lsl	r2, r3, #1
   5848c:	ldrh	r2, [r1, r2]
   58490:	tst	r2, #136	; 0x88
   58494:	beq	584a8 <warn@@Base+0x36d8>
   58498:	ldrb	r2, [r0, #1]
   5849c:	cmp	r2, #58	; 0x3a
   584a0:	ldrbeq	r3, [r0, #2]
   584a4:	addeq	r0, r0, #2
   584a8:	cmp	r3, #0
   584ac:	bxeq	lr
   584b0:	add	r2, r0, #1
   584b4:	cmp	r3, #92	; 0x5c
   584b8:	cmpne	r3, #47	; 0x2f
   584bc:	moveq	r0, r2
   584c0:	ldrb	r3, [r2], #1
   584c4:	cmp	r3, #0
   584c8:	bne	584b4 <warn@@Base+0x36e4>
   584cc:	bx	lr
   584d0:	andeq	r7, r8, r8, ror #25
   584d4:	ldrb	r3, [r0]
   584d8:	cmp	r3, #0
   584dc:	bxeq	lr
   584e0:	add	r2, r0, #1
   584e4:	cmp	r3, #47	; 0x2f
   584e8:	moveq	r0, r2
   584ec:	ldrb	r3, [r2], #1
   584f0:	cmp	r3, #0
   584f4:	bne	584e4 <warn@@Base+0x3714>
   584f8:	bx	lr
   584fc:	b	584d4 <warn@@Base+0x3704>
   58500:	push	{r4, lr}
   58504:	sub	sp, sp, #4096	; 0x1000
   58508:	mov	r1, sp
   5850c:	mov	r4, r0
   58510:	bl	111f4 <realpath@plt>
   58514:	cmp	r0, #0
   58518:	moveq	r0, r4
   5851c:	bl	10f9c <strdup@plt>
   58520:	add	sp, sp, #4096	; 0x1000
   58524:	pop	{r4, pc}
   58528:	ldr	r3, [pc, #28]	; 5854c <warn@@Base+0x377c>
   5852c:	push	{r4, lr}
   58530:	mov	r4, r0
   58534:	ldr	r3, [r3]
   58538:	cmp	r3, #0
   5853c:	beq	58544 <warn@@Base+0x3774>
   58540:	blx	r3
   58544:	mov	r0, r4
   58548:	bl	1105c <exit@plt>
   5854c:	andeq	lr, r9, r8, ror #26
   58550:	push	{r4, lr}
   58554:	ldr	r4, [pc, #32]	; 5857c <warn@@Base+0x37ac>
   58558:	ldr	r2, [pc, #32]	; 58580 <warn@@Base+0x37b0>
   5855c:	ldr	r3, [r4]
   58560:	str	r0, [r2]
   58564:	cmp	r3, #0
   58568:	popne	{r4, pc}
   5856c:	mov	r0, r3
   58570:	bl	11188 <sbrk@plt>
   58574:	str	r0, [r4]
   58578:	pop	{r4, pc}
   5857c:	strdeq	lr, [r9], -ip
   58580:	andeq	sl, r9, r0, lsl r4
   58584:	ldr	r3, [pc, #116]	; 58600 <warn@@Base+0x3830>
   58588:	push	{lr}		; (str lr, [sp, #-4]!)
   5858c:	mov	r5, r0
   58590:	ldr	r4, [r3]
   58594:	sub	sp, sp, #12
   58598:	cmp	r4, #0
   5859c:	beq	585ec <warn@@Base+0x381c>
   585a0:	mov	r0, #0
   585a4:	bl	11188 <sbrk@plt>
   585a8:	sub	r4, r0, r4
   585ac:	ldr	r1, [pc, #80]	; 58604 <warn@@Base+0x3834>
   585b0:	ldr	r2, [pc, #80]	; 58608 <warn@@Base+0x3838>
   585b4:	ldr	r3, [pc, #80]	; 5860c <warn@@Base+0x383c>
   585b8:	ldr	r1, [r1]
   585bc:	ldr	r0, [r2]
   585c0:	mov	r2, r1
   585c4:	ldrb	ip, [r1]
   585c8:	ldr	r1, [pc, #64]	; 58610 <warn@@Base+0x3840>
   585cc:	str	r4, [sp, #4]
   585d0:	cmp	ip, #0
   585d4:	moveq	r3, r1
   585d8:	str	r5, [sp]
   585dc:	ldr	r1, [pc, #48]	; 58614 <warn@@Base+0x3844>
   585e0:	bl	11098 <fprintf@plt>
   585e4:	mov	r0, #1
   585e8:	bl	58528 <warn@@Base+0x3758>
   585ec:	mov	r0, r4
   585f0:	bl	11188 <sbrk@plt>
   585f4:	ldr	r4, [pc, #28]	; 58618 <warn@@Base+0x3848>
   585f8:	sub	r4, r0, r4
   585fc:	b	585ac <warn@@Base+0x37dc>
   58600:	strdeq	lr, [r9], -ip
   58604:	andeq	sl, r9, r0, lsl r4
   58608:	andeq	sl, r9, r8, lsr #8
   5860c:	andeq	fp, r6, r8, lsr #5
   58610:	andeq	fp, r6, ip, ror #2
   58614:	andeq	r7, r8, r8, ror #29
   58618:	andeq	sl, r9, r8, lsl r4
   5861c:	push	{r4, lr}
   58620:	subs	r4, r0, #0
   58624:	moveq	r4, #1
   58628:	mov	r0, r4
   5862c:	bl	11020 <malloc@plt>
   58630:	cmp	r0, #0
   58634:	popne	{r4, pc}
   58638:	mov	r0, r4
   5863c:	bl	58584 <warn@@Base+0x37b4>
   58640:	cmp	r1, #0
   58644:	cmpne	r0, #0
   58648:	push	{r4, r5, r6, lr}
   5864c:	moveq	r4, #1
   58650:	moveq	r5, r4
   58654:	movne	r5, r0
   58658:	movne	r4, r1
   5865c:	mov	r1, r4
   58660:	mov	r0, r5
   58664:	bl	10ef4 <calloc@plt>
   58668:	cmp	r0, #0
   5866c:	popne	{r4, r5, r6, pc}
   58670:	mul	r0, r4, r5
   58674:	bl	58584 <warn@@Base+0x37b4>
   58678:	push	{r4, lr}
   5867c:	subs	r4, r1, #0
   58680:	moveq	r4, #1
   58684:	cmp	r0, #0
   58688:	beq	586a4 <warn@@Base+0x38d4>
   5868c:	mov	r1, r4
   58690:	bl	10fb4 <realloc@plt>
   58694:	cmp	r0, #0
   58698:	popne	{r4, pc}
   5869c:	mov	r0, r4
   586a0:	bl	58584 <warn@@Base+0x37b4>
   586a4:	mov	r0, r4
   586a8:	bl	11020 <malloc@plt>
   586ac:	cmp	r0, #0
   586b0:	popne	{r4, pc}
   586b4:	b	5869c <warn@@Base+0x38cc>
   586b8:	push	{r4, r5, r6, lr}
   586bc:	mov	r5, r0
   586c0:	bl	11080 <strlen@plt>
   586c4:	add	r4, r0, #1
   586c8:	mov	r0, r4
   586cc:	bl	5861c <warn@@Base+0x384c>
   586d0:	mov	r2, r4
   586d4:	mov	r1, r5
   586d8:	pop	{r4, r5, r6, lr}
   586dc:	b	10f6c <memcpy@plt>
   586e0:	subs	r2, r1, #1
   586e4:	bxeq	lr
   586e8:	bcc	588c0 <warn@@Base+0x3af0>
   586ec:	cmp	r0, r1
   586f0:	bls	588a4 <warn@@Base+0x3ad4>
   586f4:	tst	r1, r2
   586f8:	beq	588b0 <warn@@Base+0x3ae0>
   586fc:	clz	r3, r0
   58700:	clz	r2, r1
   58704:	sub	r3, r2, r3
   58708:	rsbs	r3, r3, #31
   5870c:	addne	r3, r3, r3, lsl #1
   58710:	mov	r2, #0
   58714:	addne	pc, pc, r3, lsl #2
   58718:	nop			; (mov r0, r0)
   5871c:	cmp	r0, r1, lsl #31
   58720:	adc	r2, r2, r2
   58724:	subcs	r0, r0, r1, lsl #31
   58728:	cmp	r0, r1, lsl #30
   5872c:	adc	r2, r2, r2
   58730:	subcs	r0, r0, r1, lsl #30
   58734:	cmp	r0, r1, lsl #29
   58738:	adc	r2, r2, r2
   5873c:	subcs	r0, r0, r1, lsl #29
   58740:	cmp	r0, r1, lsl #28
   58744:	adc	r2, r2, r2
   58748:	subcs	r0, r0, r1, lsl #28
   5874c:	cmp	r0, r1, lsl #27
   58750:	adc	r2, r2, r2
   58754:	subcs	r0, r0, r1, lsl #27
   58758:	cmp	r0, r1, lsl #26
   5875c:	adc	r2, r2, r2
   58760:	subcs	r0, r0, r1, lsl #26
   58764:	cmp	r0, r1, lsl #25
   58768:	adc	r2, r2, r2
   5876c:	subcs	r0, r0, r1, lsl #25
   58770:	cmp	r0, r1, lsl #24
   58774:	adc	r2, r2, r2
   58778:	subcs	r0, r0, r1, lsl #24
   5877c:	cmp	r0, r1, lsl #23
   58780:	adc	r2, r2, r2
   58784:	subcs	r0, r0, r1, lsl #23
   58788:	cmp	r0, r1, lsl #22
   5878c:	adc	r2, r2, r2
   58790:	subcs	r0, r0, r1, lsl #22
   58794:	cmp	r0, r1, lsl #21
   58798:	adc	r2, r2, r2
   5879c:	subcs	r0, r0, r1, lsl #21
   587a0:	cmp	r0, r1, lsl #20
   587a4:	adc	r2, r2, r2
   587a8:	subcs	r0, r0, r1, lsl #20
   587ac:	cmp	r0, r1, lsl #19
   587b0:	adc	r2, r2, r2
   587b4:	subcs	r0, r0, r1, lsl #19
   587b8:	cmp	r0, r1, lsl #18
   587bc:	adc	r2, r2, r2
   587c0:	subcs	r0, r0, r1, lsl #18
   587c4:	cmp	r0, r1, lsl #17
   587c8:	adc	r2, r2, r2
   587cc:	subcs	r0, r0, r1, lsl #17
   587d0:	cmp	r0, r1, lsl #16
   587d4:	adc	r2, r2, r2
   587d8:	subcs	r0, r0, r1, lsl #16
   587dc:	cmp	r0, r1, lsl #15
   587e0:	adc	r2, r2, r2
   587e4:	subcs	r0, r0, r1, lsl #15
   587e8:	cmp	r0, r1, lsl #14
   587ec:	adc	r2, r2, r2
   587f0:	subcs	r0, r0, r1, lsl #14
   587f4:	cmp	r0, r1, lsl #13
   587f8:	adc	r2, r2, r2
   587fc:	subcs	r0, r0, r1, lsl #13
   58800:	cmp	r0, r1, lsl #12
   58804:	adc	r2, r2, r2
   58808:	subcs	r0, r0, r1, lsl #12
   5880c:	cmp	r0, r1, lsl #11
   58810:	adc	r2, r2, r2
   58814:	subcs	r0, r0, r1, lsl #11
   58818:	cmp	r0, r1, lsl #10
   5881c:	adc	r2, r2, r2
   58820:	subcs	r0, r0, r1, lsl #10
   58824:	cmp	r0, r1, lsl #9
   58828:	adc	r2, r2, r2
   5882c:	subcs	r0, r0, r1, lsl #9
   58830:	cmp	r0, r1, lsl #8
   58834:	adc	r2, r2, r2
   58838:	subcs	r0, r0, r1, lsl #8
   5883c:	cmp	r0, r1, lsl #7
   58840:	adc	r2, r2, r2
   58844:	subcs	r0, r0, r1, lsl #7
   58848:	cmp	r0, r1, lsl #6
   5884c:	adc	r2, r2, r2
   58850:	subcs	r0, r0, r1, lsl #6
   58854:	cmp	r0, r1, lsl #5
   58858:	adc	r2, r2, r2
   5885c:	subcs	r0, r0, r1, lsl #5
   58860:	cmp	r0, r1, lsl #4
   58864:	adc	r2, r2, r2
   58868:	subcs	r0, r0, r1, lsl #4
   5886c:	cmp	r0, r1, lsl #3
   58870:	adc	r2, r2, r2
   58874:	subcs	r0, r0, r1, lsl #3
   58878:	cmp	r0, r1, lsl #2
   5887c:	adc	r2, r2, r2
   58880:	subcs	r0, r0, r1, lsl #2
   58884:	cmp	r0, r1, lsl #1
   58888:	adc	r2, r2, r2
   5888c:	subcs	r0, r0, r1, lsl #1
   58890:	cmp	r0, r1
   58894:	adc	r2, r2, r2
   58898:	subcs	r0, r0, r1
   5889c:	mov	r0, r2
   588a0:	bx	lr
   588a4:	moveq	r0, #1
   588a8:	movne	r0, #0
   588ac:	bx	lr
   588b0:	clz	r2, r1
   588b4:	rsb	r2, r2, #31
   588b8:	lsr	r0, r0, r2
   588bc:	bx	lr
   588c0:	cmp	r0, #0
   588c4:	mvnne	r0, #0
   588c8:	b	58c3c <warn@@Base+0x3e6c>
   588cc:	cmp	r1, #0
   588d0:	beq	588c0 <warn@@Base+0x3af0>
   588d4:	push	{r0, r1, lr}
   588d8:	bl	586e0 <warn@@Base+0x3910>
   588dc:	pop	{r1, r2, lr}
   588e0:	mul	r3, r2, r0
   588e4:	sub	r1, r1, r3
   588e8:	bx	lr
   588ec:	cmp	r1, #0
   588f0:	beq	58afc <warn@@Base+0x3d2c>
   588f4:	eor	ip, r0, r1
   588f8:	rsbmi	r1, r1, #0
   588fc:	subs	r2, r1, #1
   58900:	beq	58ac8 <warn@@Base+0x3cf8>
   58904:	movs	r3, r0
   58908:	rsbmi	r3, r0, #0
   5890c:	cmp	r3, r1
   58910:	bls	58ad4 <warn@@Base+0x3d04>
   58914:	tst	r1, r2
   58918:	beq	58ae4 <warn@@Base+0x3d14>
   5891c:	clz	r2, r3
   58920:	clz	r0, r1
   58924:	sub	r2, r0, r2
   58928:	rsbs	r2, r2, #31
   5892c:	addne	r2, r2, r2, lsl #1
   58930:	mov	r0, #0
   58934:	addne	pc, pc, r2, lsl #2
   58938:	nop			; (mov r0, r0)
   5893c:	cmp	r3, r1, lsl #31
   58940:	adc	r0, r0, r0
   58944:	subcs	r3, r3, r1, lsl #31
   58948:	cmp	r3, r1, lsl #30
   5894c:	adc	r0, r0, r0
   58950:	subcs	r3, r3, r1, lsl #30
   58954:	cmp	r3, r1, lsl #29
   58958:	adc	r0, r0, r0
   5895c:	subcs	r3, r3, r1, lsl #29
   58960:	cmp	r3, r1, lsl #28
   58964:	adc	r0, r0, r0
   58968:	subcs	r3, r3, r1, lsl #28
   5896c:	cmp	r3, r1, lsl #27
   58970:	adc	r0, r0, r0
   58974:	subcs	r3, r3, r1, lsl #27
   58978:	cmp	r3, r1, lsl #26
   5897c:	adc	r0, r0, r0
   58980:	subcs	r3, r3, r1, lsl #26
   58984:	cmp	r3, r1, lsl #25
   58988:	adc	r0, r0, r0
   5898c:	subcs	r3, r3, r1, lsl #25
   58990:	cmp	r3, r1, lsl #24
   58994:	adc	r0, r0, r0
   58998:	subcs	r3, r3, r1, lsl #24
   5899c:	cmp	r3, r1, lsl #23
   589a0:	adc	r0, r0, r0
   589a4:	subcs	r3, r3, r1, lsl #23
   589a8:	cmp	r3, r1, lsl #22
   589ac:	adc	r0, r0, r0
   589b0:	subcs	r3, r3, r1, lsl #22
   589b4:	cmp	r3, r1, lsl #21
   589b8:	adc	r0, r0, r0
   589bc:	subcs	r3, r3, r1, lsl #21
   589c0:	cmp	r3, r1, lsl #20
   589c4:	adc	r0, r0, r0
   589c8:	subcs	r3, r3, r1, lsl #20
   589cc:	cmp	r3, r1, lsl #19
   589d0:	adc	r0, r0, r0
   589d4:	subcs	r3, r3, r1, lsl #19
   589d8:	cmp	r3, r1, lsl #18
   589dc:	adc	r0, r0, r0
   589e0:	subcs	r3, r3, r1, lsl #18
   589e4:	cmp	r3, r1, lsl #17
   589e8:	adc	r0, r0, r0
   589ec:	subcs	r3, r3, r1, lsl #17
   589f0:	cmp	r3, r1, lsl #16
   589f4:	adc	r0, r0, r0
   589f8:	subcs	r3, r3, r1, lsl #16
   589fc:	cmp	r3, r1, lsl #15
   58a00:	adc	r0, r0, r0
   58a04:	subcs	r3, r3, r1, lsl #15
   58a08:	cmp	r3, r1, lsl #14
   58a0c:	adc	r0, r0, r0
   58a10:	subcs	r3, r3, r1, lsl #14
   58a14:	cmp	r3, r1, lsl #13
   58a18:	adc	r0, r0, r0
   58a1c:	subcs	r3, r3, r1, lsl #13
   58a20:	cmp	r3, r1, lsl #12
   58a24:	adc	r0, r0, r0
   58a28:	subcs	r3, r3, r1, lsl #12
   58a2c:	cmp	r3, r1, lsl #11
   58a30:	adc	r0, r0, r0
   58a34:	subcs	r3, r3, r1, lsl #11
   58a38:	cmp	r3, r1, lsl #10
   58a3c:	adc	r0, r0, r0
   58a40:	subcs	r3, r3, r1, lsl #10
   58a44:	cmp	r3, r1, lsl #9
   58a48:	adc	r0, r0, r0
   58a4c:	subcs	r3, r3, r1, lsl #9
   58a50:	cmp	r3, r1, lsl #8
   58a54:	adc	r0, r0, r0
   58a58:	subcs	r3, r3, r1, lsl #8
   58a5c:	cmp	r3, r1, lsl #7
   58a60:	adc	r0, r0, r0
   58a64:	subcs	r3, r3, r1, lsl #7
   58a68:	cmp	r3, r1, lsl #6
   58a6c:	adc	r0, r0, r0
   58a70:	subcs	r3, r3, r1, lsl #6
   58a74:	cmp	r3, r1, lsl #5
   58a78:	adc	r0, r0, r0
   58a7c:	subcs	r3, r3, r1, lsl #5
   58a80:	cmp	r3, r1, lsl #4
   58a84:	adc	r0, r0, r0
   58a88:	subcs	r3, r3, r1, lsl #4
   58a8c:	cmp	r3, r1, lsl #3
   58a90:	adc	r0, r0, r0
   58a94:	subcs	r3, r3, r1, lsl #3
   58a98:	cmp	r3, r1, lsl #2
   58a9c:	adc	r0, r0, r0
   58aa0:	subcs	r3, r3, r1, lsl #2
   58aa4:	cmp	r3, r1, lsl #1
   58aa8:	adc	r0, r0, r0
   58aac:	subcs	r3, r3, r1, lsl #1
   58ab0:	cmp	r3, r1
   58ab4:	adc	r0, r0, r0
   58ab8:	subcs	r3, r3, r1
   58abc:	cmp	ip, #0
   58ac0:	rsbmi	r0, r0, #0
   58ac4:	bx	lr
   58ac8:	teq	ip, r0
   58acc:	rsbmi	r0, r0, #0
   58ad0:	bx	lr
   58ad4:	movcc	r0, #0
   58ad8:	asreq	r0, ip, #31
   58adc:	orreq	r0, r0, #1
   58ae0:	bx	lr
   58ae4:	clz	r2, r1
   58ae8:	rsb	r2, r2, #31
   58aec:	cmp	ip, #0
   58af0:	lsr	r0, r3, r2
   58af4:	rsbmi	r0, r0, #0
   58af8:	bx	lr
   58afc:	cmp	r0, #0
   58b00:	mvngt	r0, #-2147483648	; 0x80000000
   58b04:	movlt	r0, #-2147483648	; 0x80000000
   58b08:	b	58c3c <warn@@Base+0x3e6c>
   58b0c:	cmp	r1, #0
   58b10:	beq	58afc <warn@@Base+0x3d2c>
   58b14:	push	{r0, r1, lr}
   58b18:	bl	588f4 <warn@@Base+0x3b24>
   58b1c:	pop	{r1, r2, lr}
   58b20:	mul	r3, r2, r0
   58b24:	sub	r1, r1, r3
   58b28:	bx	lr
   58b2c:	cmp	r3, #0
   58b30:	cmpeq	r2, #0
   58b34:	bne	58b58 <warn@@Base+0x3d88>
   58b38:	cmp	r1, #0
   58b3c:	movlt	r1, #-2147483648	; 0x80000000
   58b40:	movlt	r0, #0
   58b44:	blt	58b54 <warn@@Base+0x3d84>
   58b48:	cmpeq	r0, #0
   58b4c:	mvnne	r1, #-2147483648	; 0x80000000
   58b50:	mvnne	r0, #0
   58b54:	b	58c3c <warn@@Base+0x3e6c>
   58b58:	sub	sp, sp, #8
   58b5c:	push	{sp, lr}
   58b60:	cmp	r1, #0
   58b64:	blt	58b84 <warn@@Base+0x3db4>
   58b68:	cmp	r3, #0
   58b6c:	blt	58bb8 <warn@@Base+0x3de8>
   58b70:	bl	58c4c <warn@@Base+0x3e7c>
   58b74:	ldr	lr, [sp, #4]
   58b78:	add	sp, sp, #8
   58b7c:	pop	{r2, r3}
   58b80:	bx	lr
   58b84:	rsbs	r0, r0, #0
   58b88:	sbc	r1, r1, r1, lsl #1
   58b8c:	cmp	r3, #0
   58b90:	blt	58bdc <warn@@Base+0x3e0c>
   58b94:	bl	58c4c <warn@@Base+0x3e7c>
   58b98:	ldr	lr, [sp, #4]
   58b9c:	add	sp, sp, #8
   58ba0:	pop	{r2, r3}
   58ba4:	rsbs	r0, r0, #0
   58ba8:	sbc	r1, r1, r1, lsl #1
   58bac:	rsbs	r2, r2, #0
   58bb0:	sbc	r3, r3, r3, lsl #1
   58bb4:	bx	lr
   58bb8:	rsbs	r2, r2, #0
   58bbc:	sbc	r3, r3, r3, lsl #1
   58bc0:	bl	58c4c <warn@@Base+0x3e7c>
   58bc4:	ldr	lr, [sp, #4]
   58bc8:	add	sp, sp, #8
   58bcc:	pop	{r2, r3}
   58bd0:	rsbs	r0, r0, #0
   58bd4:	sbc	r1, r1, r1, lsl #1
   58bd8:	bx	lr
   58bdc:	rsbs	r2, r2, #0
   58be0:	sbc	r3, r3, r3, lsl #1
   58be4:	bl	58c4c <warn@@Base+0x3e7c>
   58be8:	ldr	lr, [sp, #4]
   58bec:	add	sp, sp, #8
   58bf0:	pop	{r2, r3}
   58bf4:	rsbs	r2, r2, #0
   58bf8:	sbc	r3, r3, r3, lsl #1
   58bfc:	bx	lr
   58c00:	cmp	r3, #0
   58c04:	cmpeq	r2, #0
   58c08:	bne	58c20 <warn@@Base+0x3e50>
   58c0c:	cmp	r1, #0
   58c10:	cmpeq	r0, #0
   58c14:	mvnne	r1, #0
   58c18:	mvnne	r0, #0
   58c1c:	b	58c3c <warn@@Base+0x3e6c>
   58c20:	sub	sp, sp, #8
   58c24:	push	{sp, lr}
   58c28:	bl	58c4c <warn@@Base+0x3e7c>
   58c2c:	ldr	lr, [sp, #4]
   58c30:	add	sp, sp, #8
   58c34:	pop	{r2, r3}
   58c38:	bx	lr
   58c3c:	push	{r1, lr}
   58c40:	mov	r0, #8
   58c44:	bl	10f0c <raise@plt>
   58c48:	pop	{r1, pc}
   58c4c:	cmp	r1, r3
   58c50:	cmpeq	r0, r2
   58c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58c58:	mov	r4, r0
   58c5c:	movcc	r0, #0
   58c60:	mov	r5, r1
   58c64:	ldr	lr, [sp, #36]	; 0x24
   58c68:	movcc	r1, r0
   58c6c:	bcc	58d68 <warn@@Base+0x3f98>
   58c70:	cmp	r3, #0
   58c74:	clzeq	ip, r2
   58c78:	clzne	ip, r3
   58c7c:	addeq	ip, ip, #32
   58c80:	cmp	r5, #0
   58c84:	clzeq	r1, r4
   58c88:	addeq	r1, r1, #32
   58c8c:	clzne	r1, r5
   58c90:	sub	ip, ip, r1
   58c94:	sub	sl, ip, #32
   58c98:	lsl	r9, r3, ip
   58c9c:	rsb	fp, ip, #32
   58ca0:	orr	r9, r9, r2, lsl sl
   58ca4:	orr	r9, r9, r2, lsr fp
   58ca8:	lsl	r8, r2, ip
   58cac:	cmp	r5, r9
   58cb0:	cmpeq	r4, r8
   58cb4:	movcc	r0, #0
   58cb8:	movcc	r1, r0
   58cbc:	bcc	58cd8 <warn@@Base+0x3f08>
   58cc0:	mov	r0, #1
   58cc4:	subs	r4, r4, r8
   58cc8:	lsl	r1, r0, sl
   58ccc:	orr	r1, r1, r0, lsr fp
   58cd0:	lsl	r0, r0, ip
   58cd4:	sbc	r5, r5, r9
   58cd8:	cmp	ip, #0
   58cdc:	beq	58d68 <warn@@Base+0x3f98>
   58ce0:	lsr	r6, r8, #1
   58ce4:	orr	r6, r6, r9, lsl #31
   58ce8:	lsr	r7, r9, #1
   58cec:	mov	r2, ip
   58cf0:	b	58d14 <warn@@Base+0x3f44>
   58cf4:	subs	r3, r4, r6
   58cf8:	sbc	r8, r5, r7
   58cfc:	adds	r3, r3, r3
   58d00:	adc	r8, r8, r8
   58d04:	adds	r4, r3, #1
   58d08:	adc	r5, r8, #0
   58d0c:	subs	r2, r2, #1
   58d10:	beq	58d30 <warn@@Base+0x3f60>
   58d14:	cmp	r5, r7
   58d18:	cmpeq	r4, r6
   58d1c:	bcs	58cf4 <warn@@Base+0x3f24>
   58d20:	adds	r4, r4, r4
   58d24:	adc	r5, r5, r5
   58d28:	subs	r2, r2, #1
   58d2c:	bne	58d14 <warn@@Base+0x3f44>
   58d30:	lsr	r3, r4, ip
   58d34:	orr	r3, r3, r5, lsl fp
   58d38:	lsr	r2, r5, ip
   58d3c:	orr	r3, r3, r5, lsr sl
   58d40:	adds	r0, r0, r4
   58d44:	mov	r4, r3
   58d48:	lsl	r3, r2, ip
   58d4c:	orr	r3, r3, r4, lsl sl
   58d50:	lsl	ip, r4, ip
   58d54:	orr	r3, r3, r4, lsr fp
   58d58:	adc	r1, r1, r5
   58d5c:	subs	r0, r0, ip
   58d60:	mov	r5, r2
   58d64:	sbc	r1, r1, r3
   58d68:	cmp	lr, #0
   58d6c:	strdne	r4, [lr]
   58d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   58d74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   58d78:	mov	r7, r0
   58d7c:	ldr	r6, [pc, #72]	; 58dcc <warn@@Base+0x3ffc>
   58d80:	ldr	r5, [pc, #72]	; 58dd0 <warn@@Base+0x4000>
   58d84:	add	r6, pc, r6
   58d88:	add	r5, pc, r5
   58d8c:	sub	r6, r6, r5
   58d90:	mov	r8, r1
   58d94:	mov	r9, r2
   58d98:	bl	10ed4 <calloc@plt-0x20>
   58d9c:	asrs	r6, r6, #2
   58da0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   58da4:	mov	r4, #0
   58da8:	add	r4, r4, #1
   58dac:	ldr	r3, [r5], #4
   58db0:	mov	r2, r9
   58db4:	mov	r1, r8
   58db8:	mov	r0, r7
   58dbc:	blx	r3
   58dc0:	cmp	r6, r4
   58dc4:	bne	58da8 <warn@@Base+0x3fd8>
   58dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   58dcc:	andeq	r0, r4, r8, ror r1
   58dd0:	andeq	r0, r4, r0, ror r1
   58dd4:	bx	lr

Disassembly of section .fini:

00058dd8 <.fini>:
   58dd8:	push	{r3, lr}
   58ddc:	pop	{r3, pc}
