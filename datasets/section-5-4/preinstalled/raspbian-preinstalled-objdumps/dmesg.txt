
raspbian-preinstalled/dmesg:     file format elf32-littlearm


Disassembly of section .init:

000117a8 <.init>:
   117a8:	push	{r3, lr}
   117ac:	bl	13608 <__assert_fail@plt+0x18f4>
   117b0:	pop	{r3, pc}

Disassembly of section .plt:

000117b4 <raise@plt-0x14>:
   117b4:	push	{lr}		; (str lr, [sp, #-4]!)
   117b8:	ldr	lr, [pc, #4]	; 117c4 <raise@plt-0x4>
   117bc:	add	lr, pc, lr
   117c0:	ldr	pc, [lr, #8]!
   117c4:	andeq	fp, r1, r8, asr r6

000117c8 <raise@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #110592	; 0x1b000
   117d0:	ldr	pc, [ip, #1624]!	; 0x658

000117d4 <tigetnum@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #110592	; 0x1b000
   117dc:	ldr	pc, [ip, #1616]!	; 0x650

000117e0 <gmtime_r@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #110592	; 0x1b000
   117e8:	ldr	pc, [ip, #1608]!	; 0x648

000117ec <strcmp@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #110592	; 0x1b000
   117f4:	ldr	pc, [ip, #1600]!	; 0x640

000117f8 <strtol@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #110592	; 0x1b000
   11800:	ldr	pc, [ip, #1592]!	; 0x638

00011804 <strcspn@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #110592	; 0x1b000
   1180c:	ldr	pc, [ip, #1584]!	; 0x630

00011810 <read@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #110592	; 0x1b000
   11818:	ldr	pc, [ip, #1576]!	; 0x628

0001181c <mktime@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #110592	; 0x1b000
   11824:	ldr	pc, [ip, #1568]!	; 0x620

00011828 <fflush@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #110592	; 0x1b000
   11830:	ldr	pc, [ip, #1560]!	; 0x618

00011834 <getuid@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #110592	; 0x1b000
   1183c:	ldr	pc, [ip, #1552]!	; 0x610

00011840 <free@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #110592	; 0x1b000
   11848:	ldr	pc, [ip, #1544]!	; 0x608

0001184c <fgets@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #110592	; 0x1b000
   11854:	ldr	pc, [ip, #1536]!	; 0x600

00011858 <faccessat@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #110592	; 0x1b000
   11860:	ldr	pc, [ip, #1528]!	; 0x5f8

00011864 <ferror@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #110592	; 0x1b000
   1186c:	ldr	pc, [ip, #1520]!	; 0x5f0

00011870 <strndup@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #110592	; 0x1b000
   11878:	ldr	pc, [ip, #1512]!	; 0x5e8

0001187c <_exit@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #110592	; 0x1b000
   11884:	ldr	pc, [ip, #1504]!	; 0x5e0

00011888 <memcpy@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #110592	; 0x1b000
   11890:	ldr	pc, [ip, #1496]!	; 0x5d8

00011894 <execvp@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #110592	; 0x1b000
   1189c:	ldr	pc, [ip, #1488]!	; 0x5d0

000118a0 <mmap64@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #110592	; 0x1b000
   118a8:	ldr	pc, [ip, #1480]!	; 0x5c8

000118ac <__strtoull_internal@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #110592	; 0x1b000
   118b4:	ldr	pc, [ip, #1472]!	; 0x5c0

000118b8 <time@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #110592	; 0x1b000
   118c0:	ldr	pc, [ip, #1464]!	; 0x5b8

000118c4 <select@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #110592	; 0x1b000
   118cc:	ldr	pc, [ip, #1456]!	; 0x5b0

000118d0 <dcgettext@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #110592	; 0x1b000
   118d8:	ldr	pc, [ip, #1448]!	; 0x5a8

000118dc <strdup@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #110592	; 0x1b000
   118e4:	ldr	pc, [ip, #1440]!	; 0x5a0

000118e8 <__stack_chk_fail@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #110592	; 0x1b000
   118f0:	ldr	pc, [ip, #1432]!	; 0x598

000118f4 <dup2@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #110592	; 0x1b000
   118fc:	ldr	pc, [ip, #1424]!	; 0x590

00011900 <realloc@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #110592	; 0x1b000
   11908:	ldr	pc, [ip, #1416]!	; 0x588

0001190c <strptime@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #110592	; 0x1b000
   11914:	ldr	pc, [ip, #1408]!	; 0x580

00011918 <dup@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #110592	; 0x1b000
   11920:	ldr	pc, [ip, #1400]!	; 0x578

00011924 <localtime_r@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #110592	; 0x1b000
   1192c:	ldr	pc, [ip, #1392]!	; 0x570

00011930 <textdomain@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #110592	; 0x1b000
   11938:	ldr	pc, [ip, #1384]!	; 0x568

0001193c <strcasecmp@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #110592	; 0x1b000
   11944:	ldr	pc, [ip, #1376]!	; 0x560

00011948 <err@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #110592	; 0x1b000
   11950:	ldr	pc, [ip, #1368]!	; 0x558

00011954 <geteuid@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #110592	; 0x1b000
   1195c:	ldr	pc, [ip, #1360]!	; 0x550

00011960 <iswprint@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #110592	; 0x1b000
   11968:	ldr	pc, [ip, #1352]!	; 0x548

0001196c <__fxstat64@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #110592	; 0x1b000
   11974:	ldr	pc, [ip, #1344]!	; 0x540

00011978 <getegid@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #110592	; 0x1b000
   11980:	ldr	pc, [ip, #1336]!	; 0x538

00011984 <sigaction@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #110592	; 0x1b000
   1198c:	ldr	pc, [ip, #1328]!	; 0x530

00011990 <fwrite@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #110592	; 0x1b000
   11998:	ldr	pc, [ip, #1320]!	; 0x528

0001199c <lseek64@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #110592	; 0x1b000
   119a4:	ldr	pc, [ip, #1312]!	; 0x520

000119a8 <strtoll@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #110592	; 0x1b000
   119b0:	ldr	pc, [ip, #1304]!	; 0x518

000119b4 <waitpid@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #110592	; 0x1b000
   119bc:	ldr	pc, [ip, #1296]!	; 0x510

000119c0 <gettimeofday@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #110592	; 0x1b000
   119c8:	ldr	pc, [ip, #1288]!	; 0x508

000119cc <__fpending@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #110592	; 0x1b000
   119d4:	ldr	pc, [ip, #1280]!	; 0x500

000119d8 <mbrtowc@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #110592	; 0x1b000
   119e0:	ldr	pc, [ip, #1272]!	; 0x4f8

000119e4 <opendir@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #110592	; 0x1b000
   119ec:	ldr	pc, [ip, #1264]!	; 0x4f0

000119f0 <open64@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #110592	; 0x1b000
   119f8:	ldr	pc, [ip, #1256]!	; 0x4e8

000119fc <__asprintf_chk@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #110592	; 0x1b000
   11a04:	ldr	pc, [ip, #1248]!	; 0x4e0

00011a08 <getenv@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #110592	; 0x1b000
   11a10:	ldr	pc, [ip, #1240]!	; 0x4d8

00011a14 <puts@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #110592	; 0x1b000
   11a1c:	ldr	pc, [ip, #1232]!	; 0x4d0

00011a20 <sysinfo@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #110592	; 0x1b000
   11a28:	ldr	pc, [ip, #1224]!	; 0x4c8

00011a2c <malloc@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #110592	; 0x1b000
   11a34:	ldr	pc, [ip, #1216]!	; 0x4c0

00011a38 <__libc_start_main@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #110592	; 0x1b000
   11a40:	ldr	pc, [ip, #1208]!	; 0x4b8

00011a44 <strerror@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #110592	; 0x1b000
   11a4c:	ldr	pc, [ip, #1200]!	; 0x4b0

00011a50 <strftime@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #110592	; 0x1b000
   11a58:	ldr	pc, [ip, #1192]!	; 0x4a8

00011a5c <__vfprintf_chk@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #110592	; 0x1b000
   11a64:	ldr	pc, [ip, #1184]!	; 0x4a0

00011a68 <__ctype_tolower_loc@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #110592	; 0x1b000
   11a70:	ldr	pc, [ip, #1176]!	; 0x498

00011a74 <__gmon_start__@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #110592	; 0x1b000
   11a7c:	ldr	pc, [ip, #1168]!	; 0x490

00011a80 <getopt_long@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #110592	; 0x1b000
   11a88:	ldr	pc, [ip, #1160]!	; 0x488

00011a8c <__ctype_b_loc@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #110592	; 0x1b000
   11a94:	ldr	pc, [ip, #1152]!	; 0x480

00011a98 <getpid@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #110592	; 0x1b000
   11aa0:	ldr	pc, [ip, #1144]!	; 0x478

00011aa4 <exit@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #110592	; 0x1b000
   11aac:	ldr	pc, [ip, #1136]!	; 0x470

00011ab0 <feof@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #110592	; 0x1b000
   11ab8:	ldr	pc, [ip, #1128]!	; 0x468

00011abc <strtoul@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #110592	; 0x1b000
   11ac4:	ldr	pc, [ip, #1120]!	; 0x460

00011ac8 <strlen@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #110592	; 0x1b000
   11ad0:	ldr	pc, [ip, #1112]!	; 0x458

00011ad4 <strchr@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #110592	; 0x1b000
   11adc:	ldr	pc, [ip, #1104]!	; 0x450

00011ae0 <setenv@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #110592	; 0x1b000
   11ae8:	ldr	pc, [ip, #1096]!	; 0x448

00011aec <warnx@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #110592	; 0x1b000
   11af4:	ldr	pc, [ip, #1088]!	; 0x440

00011af8 <getpagesize@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #110592	; 0x1b000
   11b00:	ldr	pc, [ip, #1080]!	; 0x438

00011b04 <setlinebuf@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #110592	; 0x1b000
   11b0c:	ldr	pc, [ip, #1072]!	; 0x430

00011b10 <__open64_2@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #110592	; 0x1b000
   11b18:	ldr	pc, [ip, #1064]!	; 0x428

00011b1c <__errno_location@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #110592	; 0x1b000
   11b24:	ldr	pc, [ip, #1056]!	; 0x420

00011b28 <strncasecmp@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #110592	; 0x1b000
   11b30:	ldr	pc, [ip, #1048]!	; 0x418

00011b34 <klogctl@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #110592	; 0x1b000
   11b3c:	ldr	pc, [ip, #1040]!	; 0x410

00011b40 <__cxa_atexit@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #110592	; 0x1b000
   11b48:	ldr	pc, [ip, #1032]!	; 0x408

00011b4c <__vasprintf_chk@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #110592	; 0x1b000
   11b54:	ldr	pc, [ip, #1024]!	; 0x400

00011b58 <getgid@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #110592	; 0x1b000
   11b60:	ldr	pc, [ip, #1016]!	; 0x3f8

00011b64 <memset@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #110592	; 0x1b000
   11b6c:	ldr	pc, [ip, #1008]!	; 0x3f0

00011b70 <strncpy@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #110592	; 0x1b000
   11b78:	ldr	pc, [ip, #1000]!	; 0x3e8

00011b7c <fgetc@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #110592	; 0x1b000
   11b84:	ldr	pc, [ip, #992]!	; 0x3e0

00011b88 <__printf_chk@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #110592	; 0x1b000
   11b90:	ldr	pc, [ip, #984]!	; 0x3d8

00011b94 <strtod@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #110592	; 0x1b000
   11b9c:	ldr	pc, [ip, #976]!	; 0x3d0

00011ba0 <__fprintf_chk@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #110592	; 0x1b000
   11ba8:	ldr	pc, [ip, #968]!	; 0x3c8

00011bac <access@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #110592	; 0x1b000
   11bb4:	ldr	pc, [ip, #960]!	; 0x3c0

00011bb8 <setupterm@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #110592	; 0x1b000
   11bc0:	ldr	pc, [ip, #952]!	; 0x3b8

00011bc4 <fclose@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #110592	; 0x1b000
   11bcc:	ldr	pc, [ip, #944]!	; 0x3b0

00011bd0 <pipe@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #110592	; 0x1b000
   11bd8:	ldr	pc, [ip, #936]!	; 0x3a8

00011bdc <munmap@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #110592	; 0x1b000
   11be4:	ldr	pc, [ip, #928]!	; 0x3a0

00011be8 <strtok@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #110592	; 0x1b000
   11bf0:	ldr	pc, [ip, #920]!	; 0x398

00011bf4 <setlocale@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #110592	; 0x1b000
   11bfc:	ldr	pc, [ip, #912]!	; 0x390

00011c00 <fork@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #110592	; 0x1b000
   11c08:	ldr	pc, [ip, #904]!	; 0x388

00011c0c <errx@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #110592	; 0x1b000
   11c14:	ldr	pc, [ip, #896]!	; 0x380

00011c18 <strrchr@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #110592	; 0x1b000
   11c20:	ldr	pc, [ip, #888]!	; 0x378

00011c24 <warn@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #110592	; 0x1b000
   11c2c:	ldr	pc, [ip, #880]!	; 0x370

00011c30 <fputc@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #110592	; 0x1b000
   11c38:	ldr	pc, [ip, #872]!	; 0x368

00011c3c <sscanf@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #110592	; 0x1b000
   11c44:	ldr	pc, [ip, #864]!	; 0x360

00011c48 <localeconv@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #110592	; 0x1b000
   11c50:	ldr	pc, [ip, #856]!	; 0x358

00011c54 <readdir64@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #110592	; 0x1b000
   11c5c:	ldr	pc, [ip, #848]!	; 0x350

00011c60 <putc@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #110592	; 0x1b000
   11c68:	ldr	pc, [ip, #840]!	; 0x348

00011c6c <__strtoll_internal@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #110592	; 0x1b000
   11c74:	ldr	pc, [ip, #832]!	; 0x340

00011c78 <fopen64@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #110592	; 0x1b000
   11c80:	ldr	pc, [ip, #824]!	; 0x338

00011c84 <qsort@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #110592	; 0x1b000
   11c8c:	ldr	pc, [ip, #816]!	; 0x330

00011c90 <clock_gettime@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #110592	; 0x1b000
   11c98:	ldr	pc, [ip, #808]!	; 0x328

00011c9c <bindtextdomain@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #110592	; 0x1b000
   11ca4:	ldr	pc, [ip, #800]!	; 0x320

00011ca8 <memmem@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #110592	; 0x1b000
   11cb0:	ldr	pc, [ip, #792]!	; 0x318

00011cb4 <isatty@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #110592	; 0x1b000
   11cbc:	ldr	pc, [ip, #784]!	; 0x310

00011cc0 <fputs@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #110592	; 0x1b000
   11cc8:	ldr	pc, [ip, #776]!	; 0x308

00011ccc <strncmp@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #110592	; 0x1b000
   11cd4:	ldr	pc, [ip, #768]!	; 0x300

00011cd8 <abort@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #110592	; 0x1b000
   11ce0:	ldr	pc, [ip, #760]!	; 0x2f8

00011ce4 <close@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #110592	; 0x1b000
   11cec:	ldr	pc, [ip, #752]!	; 0x2f0

00011cf0 <closedir@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #110592	; 0x1b000
   11cf8:	ldr	pc, [ip, #744]!	; 0x2e8

00011cfc <__snprintf_chk@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #110592	; 0x1b000
   11d04:	ldr	pc, [ip, #736]!	; 0x2e0

00011d08 <strspn@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #110592	; 0x1b000
   11d10:	ldr	pc, [ip, #728]!	; 0x2d8

00011d14 <__assert_fail@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #110592	; 0x1b000
   11d1c:	ldr	pc, [ip, #720]!	; 0x2d0

Disassembly of section .text:

00011d20 <.text>:
   11d20:	ldr	r3, [pc, #4012]	; 12cd4 <__assert_fail@plt+0xfc0>
   11d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d28:	sub	sp, sp, #204	; 0xcc
   11d2c:	ldr	r3, [r3]
   11d30:	mov	r2, #40	; 0x28
   11d34:	mov	r6, r0
   11d38:	mov	r9, r1
   11d3c:	add	r0, sp, #156	; 0x9c
   11d40:	mov	r1, #0
   11d44:	str	r3, [sp, #196]	; 0xc4
   11d48:	bl	11b64 <memset@plt>
   11d4c:	ldr	r1, [pc, #3972]	; 12cd8 <__assert_fail@plt+0xfc4>
   11d50:	mov	r0, #6
   11d54:	bl	11bf4 <setlocale@plt>
   11d58:	ldr	sl, [pc, #3964]	; 12cdc <__assert_fail@plt+0xfc8>
   11d5c:	ldr	r1, [pc, #3964]	; 12ce0 <__assert_fail@plt+0xfcc>
   11d60:	ldr	r0, [pc, #3964]	; 12ce4 <__assert_fail@plt+0xfd0>
   11d64:	bl	11c9c <bindtextdomain@plt>
   11d68:	ldr	r8, [pc, #3960]	; 12ce8 <__assert_fail@plt+0xfd4>
   11d6c:	ldr	r0, [pc, #3952]	; 12ce4 <__assert_fail@plt+0xfd0>
   11d70:	ldr	r7, [pc, #3956]	; 12cec <__assert_fail@plt+0xfd8>
   11d74:	bl	11930 <textdomain@plt>
   11d78:	sub	fp, sl, #8192	; 0x2000
   11d7c:	mov	r3, #0
   11d80:	ldr	r0, [pc, #3944]	; 12cf0 <__assert_fail@plt+0xfdc>
   11d84:	mov	r4, r3
   11d88:	str	r3, [sp, #32]
   11d8c:	bl	1a040 <__assert_fail@plt+0x832c>
   11d90:	mov	r3, #3
   11d94:	str	r4, [sp, #36]	; 0x24
   11d98:	str	r4, [sp, #28]
   11d9c:	str	r3, [sp, #16]
   11da0:	mov	r5, #0
   11da4:	str	r5, [sp]
   11da8:	mov	r3, r8
   11dac:	mov	r2, r7
   11db0:	mov	r1, r9
   11db4:	mov	r0, r6
   11db8:	bl	11a80 <getopt_long@plt>
   11dbc:	cmn	r0, #1
   11dc0:	beq	12258 <__assert_fail@plt+0x544>
   11dc4:	cmp	r0, #66	; 0x42
   11dc8:	ble	11e4c <__assert_fail@plt+0x138>
   11dcc:	ldr	r5, [pc, #3872]	; 12cf4 <__assert_fail@plt+0xfe0>
   11dd0:	add	r2, sp, #156	; 0x9c
   11dd4:	mov	r3, #67	; 0x43
   11dd8:	cmp	r0, r3
   11ddc:	blt	11e28 <__assert_fail@plt+0x114>
   11de0:	beq	11e10 <__assert_fail@plt+0xfc>
   11de4:	mov	ip, r5
   11de8:	ldr	r1, [ip, #4]!
   11dec:	cmp	r0, r1
   11df0:	movlt	r3, #0
   11df4:	movge	r3, #1
   11df8:	cmp	r1, #0
   11dfc:	moveq	r3, #0
   11e00:	cmp	r3, #0
   11e04:	beq	11e28 <__assert_fail@plt+0x114>
   11e08:	cmp	r0, r1
   11e0c:	bne	11de8 <__assert_fail@plt+0xd4>
   11e10:	ldr	r3, [r2]
   11e14:	cmp	r3, #0
   11e18:	streq	r0, [r2]
   11e1c:	beq	11e28 <__assert_fail@plt+0x114>
   11e20:	cmp	r0, r3
   11e24:	bne	12b08 <__assert_fail@plt+0xdf4>
   11e28:	ldr	r3, [r5, #64]!	; 0x40
   11e2c:	add	r2, r2, #4
   11e30:	cmp	r0, r3
   11e34:	movlt	r1, #0
   11e38:	movge	r1, #1
   11e3c:	cmp	r3, #0
   11e40:	moveq	r1, #0
   11e44:	cmp	r1, #0
   11e48:	bne	11dd8 <__assert_fail@plt+0xc4>
   11e4c:	sub	r0, r0, #67	; 0x43
   11e50:	cmp	r0, #61	; 0x3d
   11e54:	ldrls	pc, [pc, r0, lsl #2]
   11e58:	b	129fc <__assert_fail@plt+0xce8>
   11e5c:	andeq	r2, r1, r8, asr #4
   11e60:	andeq	r2, r1, r8, lsr r2
   11e64:	andeq	r2, r1, r8, lsr #4
   11e68:	andeq	r2, r1, r8, lsl #4
   11e6c:	strdeq	r2, [r1], -ip
   11e70:	andeq	r2, r1, r8, ror #3
   11e74:	strdeq	r2, [r1], -ip
   11e78:	strdeq	r2, [r1], -ip
   11e7c:	strdeq	r2, [r1], -ip
   11e80:			; <UNDEFINED> instruction: 0x000121b0
   11e84:	strdeq	r2, [r1], -ip
   11e88:	strdeq	r2, [r1], -ip
   11e8c:	strdeq	r2, [r1], -ip
   11e90:	andeq	r2, r1, r4, lsr #3
   11e94:	strdeq	r2, [r1], -ip
   11e98:	strdeq	r2, [r1], -ip
   11e9c:	muleq	r1, r4, r1
   11ea0:	andeq	r2, r1, r8, lsl #3
   11ea4:	strdeq	r2, [r1], -ip
   11ea8:	andeq	r2, r1, r0, asr #2
   11eac:	strdeq	r2, [r1], -ip
   11eb0:	strdeq	r2, [r1], -ip
   11eb4:	strdeq	r2, [r1], -ip
   11eb8:	strdeq	r2, [r1], -ip
   11ebc:	strdeq	r2, [r1], -ip
   11ec0:	strdeq	r2, [r1], -ip
   11ec4:	strdeq	r2, [r1], -ip
   11ec8:	strdeq	r2, [r1], -ip
   11ecc:	strdeq	r2, [r1], -ip
   11ed0:	strdeq	r2, [r1], -ip
   11ed4:	strdeq	r2, [r1], -ip
   11ed8:	strdeq	r2, [r1], -ip
   11edc:	andeq	r2, r1, r0, lsr r1
   11ee0:	andeq	r2, r1, r4, lsr #2
   11ee4:	andeq	r2, r1, r8, lsl r1
   11ee8:	andeq	r2, r1, r4, lsl #2
   11eec:	strdeq	r2, [r1], -ip
   11ef0:	ldrdeq	r2, [r1], -ip
   11ef4:	strdeq	r2, [r1], -ip
   11ef8:	strdeq	r2, [r1], -ip
   11efc:	andeq	r2, r1, r0, ror #1
   11f00:	strheq	r2, [r1], -r0
   11f04:	strdeq	r2, [r1], -ip
   11f08:	andeq	r2, r1, r8, lsr r0
   11f0c:	strdeq	r2, [r1], -ip
   11f10:	andeq	r2, r1, r8, lsr #32
   11f14:	strdeq	r2, [r1], -ip
   11f18:	andeq	r2, r1, r8, lsl r0
   11f1c:	ldrdeq	r1, [r1], -ip
   11f20:	muleq	r1, r4, r0
   11f24:	andeq	r2, r1, ip, asr r0
   11f28:	strdeq	r2, [r1], -ip
   11f2c:	andeq	r2, r1, r0, lsr #1
   11f30:	andeq	r1, r1, ip, asr #31
   11f34:	strdeq	r2, [r1], -ip
   11f38:	strdeq	r2, [r1], -ip
   11f3c:	strdeq	r2, [r1], -ip
   11f40:	strdeq	r2, [r1], -ip
   11f44:	strdeq	r2, [r1], -ip
   11f48:	strdeq	r2, [r1], -ip
   11f4c:	strdeq	r2, [r1], -ip
   11f50:	andeq	r1, r1, r4, asr pc
   11f54:	ldr	r3, [pc, #3484]	; 12cf8 <__assert_fail@plt+0xfe4>
   11f58:	ldr	r1, [pc, #3484]	; 12cfc <__assert_fail@plt+0xfe8>
   11f5c:	ldr	r4, [r3]
   11f60:	mov	r0, r4
   11f64:	bl	117ec <strcmp@plt>
   11f68:	cmp	r0, #0
   11f6c:	beq	11fc4 <__assert_fail@plt+0x2b0>
   11f70:	ldr	r1, [pc, #3464]	; 12d00 <__assert_fail@plt+0xfec>
   11f74:	mov	r0, r4
   11f78:	bl	117ec <strcmp@plt>
   11f7c:	cmp	r0, #0
   11f80:	beq	12578 <__assert_fail@plt+0x864>
   11f84:	ldr	r1, [pc, #3448]	; 12d04 <__assert_fail@plt+0xff0>
   11f88:	mov	r0, r4
   11f8c:	bl	117ec <strcmp@plt>
   11f90:	cmp	r0, #0
   11f94:	beq	125b0 <__assert_fail@plt+0x89c>
   11f98:	ldr	r1, [pc, #3432]	; 12d08 <__assert_fail@plt+0xff4>
   11f9c:	mov	r0, r4
   11fa0:	bl	117ec <strcmp@plt>
   11fa4:	cmp	r0, #0
   11fa8:	beq	125b8 <__assert_fail@plt+0x8a4>
   11fac:	ldr	r1, [pc, #3416]	; 12d0c <__assert_fail@plt+0xff8>
   11fb0:	mov	r0, r4
   11fb4:	bl	117ec <strcmp@plt>
   11fb8:	cmp	r0, #0
   11fbc:	bne	13558 <__assert_fail@plt+0x1844>
   11fc0:	mov	r0, #7
   11fc4:	str	r0, [sl, #96]	; 0x60
   11fc8:	b	11da0 <__assert_fail@plt+0x8c>
   11fcc:	ldrb	r3, [sl, #100]	; 0x64
   11fd0:	orr	r3, r3, #16
   11fd4:	strb	r3, [sl, #100]	; 0x64
   11fd8:	b	11da0 <__assert_fail@plt+0x8c>
   11fdc:	ldr	r3, [pc, #3348]	; 12cf8 <__assert_fail@plt+0xfe4>
   11fe0:	mov	r2, #5
   11fe4:	ldr	r1, [pc, #3364]	; 12d10 <__assert_fail@plt+0xffc>
   11fe8:	mov	r0, #0
   11fec:	ldr	r4, [r3]
   11ff0:	bl	118d0 <dcgettext@plt>
   11ff4:	mov	r1, r0
   11ff8:	mov	r0, r4
   11ffc:	bl	15f4c <__assert_fail@plt+0x4238>
   12000:	ldr	r3, [pc, #3340]	; 12d14 <__assert_fail@plt+0x1000>
   12004:	cmp	r0, #4096	; 0x1000
   12008:	movcc	r2, #4096	; 0x1000
   1200c:	strcs	r0, [r3, #72]	; 0x48
   12010:	strcc	r2, [r3, #72]	; 0x48
   12014:	b	11da0 <__assert_fail@plt+0x8c>
   12018:	ldrb	r3, [sl, #100]	; 0x64
   1201c:	orr	r3, r3, #2
   12020:	strb	r3, [sl, #100]	; 0x64
   12024:	b	11da0 <__assert_fail@plt+0x8c>
   12028:	ldrb	r3, [sl, #100]	; 0x64
   1202c:	orr	r3, r3, #128	; 0x80
   12030:	strb	r3, [sl, #100]	; 0x64
   12034:	b	11da0 <__assert_fail@plt+0x8c>
   12038:	ldr	r3, [pc, #3284]	; 12d14 <__assert_fail@plt+0x1000>
   1203c:	mov	r2, #8
   12040:	mov	r1, #0
   12044:	str	r2, [r3, #64]	; 0x40
   12048:	ldr	r3, [pc, #3240]	; 12cf8 <__assert_fail@plt+0xfe4>
   1204c:	ldr	r0, [r3]
   12050:	bl	138d8 <__assert_fail@plt+0x1bc4>
   12054:	str	r0, [sp, #36]	; 0x24
   12058:	b	11da0 <__assert_fail@plt+0x8c>
   1205c:	ldrb	r2, [sl, #100]	; 0x64
   12060:	mov	r3, #1
   12064:	mov	ip, r3
   12068:	orr	r2, r2, #8
   1206c:	strb	r2, [sl, #100]	; 0x64
   12070:	add	r1, fp, r3, asr #3
   12074:	and	r0, r3, #7
   12078:	ldrb	r2, [r1, #2]
   1207c:	add	r3, r3, #1
   12080:	cmp	r3, #12
   12084:	orr	r2, r2, ip, lsl r0
   12088:	strb	r2, [r1, #2]
   1208c:	bne	12070 <__assert_fail@plt+0x35c>
   12090:	b	11da0 <__assert_fail@plt+0x8c>
   12094:	mov	r3, #0
   12098:	str	r3, [sl, #96]	; 0x60
   1209c:	b	11da0 <__assert_fail@plt+0x8c>
   120a0:	ldrb	r3, [sl, #100]	; 0x64
   120a4:	orr	r3, r3, #1
   120a8:	strb	r3, [sl, #100]	; 0x64
   120ac:	b	11da0 <__assert_fail@plt+0x8c>
   120b0:	ldrb	r3, [sl, #100]	; 0x64
   120b4:	ldr	r2, [pc, #3164]	; 12d18 <__assert_fail@plt+0x1004>
   120b8:	mov	r1, fp
   120bc:	orr	r3, r3, #4
   120c0:	ldr	r0, [pc, #3120]	; 12cf8 <__assert_fail@plt+0xfe4>
   120c4:	ldr	r0, [r0]
   120c8:	strb	r3, [sl, #100]	; 0x64
   120cc:	bl	16b3c <__assert_fail@plt+0x4e28>
   120d0:	cmp	r0, #0
   120d4:	bge	11da0 <__assert_fail@plt+0x8c>
   120d8:	mov	r0, #1
   120dc:	b	1216c <__assert_fail@plt+0x458>
   120e0:	ldr	r3, [pc, #3116]	; 12d14 <__assert_fail@plt+0x1000>
   120e4:	add	r0, r3, #8192	; 0x2000
   120e8:	ldrb	r1, [r3, #2]
   120ec:	ldrb	r2, [r0, #100]	; 0x64
   120f0:	orr	r1, r1, #1
   120f4:	orr	r2, r2, #8
   120f8:	strb	r1, [r3, #2]
   120fc:	strb	r2, [r0, #100]	; 0x64
   12100:	b	11da0 <__assert_fail@plt+0x8c>
   12104:	ldrb	r3, [sl, #100]	; 0x64
   12108:	ldr	r2, [pc, #3084]	; 12d1c <__assert_fail@plt+0x1008>
   1210c:	ldr	r1, [pc, #3084]	; 12d20 <__assert_fail@plt+0x100c>
   12110:	orr	r3, r3, #8
   12114:	b	120c0 <__assert_fail@plt+0x3ac>
   12118:	mov	r3, #4
   1211c:	str	r3, [sl, #96]	; 0x60
   12120:	b	11da0 <__assert_fail@plt+0x8c>
   12124:	mov	r3, #1
   12128:	str	r3, [sp, #32]
   1212c:	b	11da0 <__assert_fail@plt+0x8c>
   12130:	ldr	r3, [pc, #3036]	; 12d14 <__assert_fail@plt+0x1000>
   12134:	mov	r2, #4
   12138:	str	r2, [r3, #64]	; 0x40
   1213c:	b	11da0 <__assert_fail@plt+0x8c>
   12140:	mov	r2, #5
   12144:	ldr	r1, [pc, #3032]	; 12d24 <__assert_fail@plt+0x1010>
   12148:	mov	r0, #0
   1214c:	bl	118d0 <dcgettext@plt>
   12150:	ldr	r2, [pc, #3024]	; 12d28 <__assert_fail@plt+0x1014>
   12154:	ldr	r3, [pc, #3024]	; 12d2c <__assert_fail@plt+0x1018>
   12158:	ldr	r2, [r2]
   1215c:	mov	r1, r0
   12160:	mov	r0, #1
   12164:	bl	11b88 <__printf_chk@plt>
   12168:	mov	r0, #0
   1216c:	ldr	r3, [pc, #2912]	; 12cd4 <__assert_fail@plt+0xfc0>
   12170:	ldr	r2, [sp, #196]	; 0xc4
   12174:	ldr	r3, [r3]
   12178:	cmp	r2, r3
   1217c:	bne	135c8 <__assert_fail@plt+0x18b4>
   12180:	add	sp, sp, #204	; 0xcc
   12184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12188:	mov	r3, #1
   1218c:	str	r3, [sl, #96]	; 0x60
   12190:	b	11da0 <__assert_fail@plt+0x8c>
   12194:	ldr	r3, [pc, #2936]	; 12d14 <__assert_fail@plt+0x1000>
   12198:	mov	r2, #1
   1219c:	str	r2, [r3, #68]	; 0x44
   121a0:	b	11da0 <__assert_fail@plt+0x8c>
   121a4:	mov	r3, #1
   121a8:	str	r3, [sp, #28]
   121ac:	b	11da0 <__assert_fail@plt+0x8c>
   121b0:	ldr	r3, [pc, #2880]	; 12cf8 <__assert_fail@plt+0xfe4>
   121b4:	ldr	r4, [r3]
   121b8:	cmp	r4, #0
   121bc:	streq	r4, [sp, #16]
   121c0:	beq	11da0 <__assert_fail@plt+0x8c>
   121c4:	mov	r2, #5
   121c8:	ldr	r1, [pc, #2912]	; 12d30 <__assert_fail@plt+0x101c>
   121cc:	mov	r0, #0
   121d0:	bl	118d0 <dcgettext@plt>
   121d4:	mov	r1, r0
   121d8:	mov	r0, r4
   121dc:	bl	19dac <__assert_fail@plt+0x8098>
   121e0:	str	r0, [sp, #16]
   121e4:	b	11da0 <__assert_fail@plt+0x8c>
   121e8:	ldrb	r3, [sl, #100]	; 0x64
   121ec:	mov	r2, #4
   121f0:	str	r2, [sl, #96]	; 0x60
   121f4:	orr	r3, r3, #32
   121f8:	strb	r3, [sl, #100]	; 0x64
   121fc:	mov	r3, #0
   12200:	str	r3, [sp, #16]
   12204:	b	11da0 <__assert_fail@plt+0x8c>
   12208:	ldr	r3, [pc, #2820]	; 12d14 <__assert_fail@plt+0x1000>
   1220c:	ldr	r2, [pc, #2788]	; 12cf8 <__assert_fail@plt+0xfe4>
   12210:	mov	r1, #2
   12214:	str	r1, [r3, #68]	; 0x44
   12218:	ldr	r2, [r2]
   1221c:	add	r3, r3, #8192	; 0x2000
   12220:	str	r2, [r3, #84]	; 0x54
   12224:	b	11da0 <__assert_fail@plt+0x8c>
   12228:	ldr	r3, [pc, #2788]	; 12d14 <__assert_fail@plt+0x1000>
   1222c:	mov	r2, #7
   12230:	str	r2, [r3, #64]	; 0x40
   12234:	b	11da0 <__assert_fail@plt+0x8c>
   12238:	ldr	r3, [pc, #2772]	; 12d14 <__assert_fail@plt+0x1000>
   1223c:	mov	r2, #6
   12240:	str	r2, [r3, #64]	; 0x40
   12244:	b	11da0 <__assert_fail@plt+0x8c>
   12248:	ldr	r3, [pc, #2756]	; 12d14 <__assert_fail@plt+0x1000>
   1224c:	mov	r2, #5
   12250:	str	r2, [r3, #64]	; 0x40
   12254:	b	11da0 <__assert_fail@plt+0x8c>
   12258:	ldr	r3, [pc, #2772]	; 12d34 <__assert_fail@plt+0x1020>
   1225c:	mov	r4, r0
   12260:	ldr	r3, [r3]
   12264:	cmp	r3, r6
   12268:	bne	135a0 <__assert_fail@plt+0x188c>
   1226c:	ldr	r7, [pc, #2720]	; 12d14 <__assert_fail@plt+0x1000>
   12270:	add	r6, r7, #8192	; 0x2000
   12274:	ldr	r2, [r6, #96]	; 0x60
   12278:	cmp	r2, #1
   1227c:	cmpne	r2, #4
   12280:	moveq	r3, #1
   12284:	movne	r3, #0
   12288:	cmp	r2, #7
   1228c:	orreq	r3, r3, #1
   12290:	cmp	r3, #0
   12294:	beq	12334 <__assert_fail@plt+0x620>
   12298:	add	r0, r7, #56	; 0x38
   1229c:	bl	1475c <__assert_fail@plt+0x2a48>
   122a0:	cmp	r0, #0
   122a4:	beq	12334 <__assert_fail@plt+0x620>
   122a8:	ldr	r3, [sp, #32]
   122ac:	str	r5, [r6, #96]	; 0x60
   122b0:	cmp	r3, #0
   122b4:	bne	12590 <__assert_fail@plt+0x87c>
   122b8:	ldr	r0, [sp, #16]
   122bc:	ldr	r1, [pc, #2676]	; 12d38 <__assert_fail@plt+0x1024>
   122c0:	bl	19800 <__assert_fail@plt+0x7aec>
   122c4:	ldrb	r2, [r6, #100]	; 0x64
   122c8:	ldr	r3, [sp, #28]
   122cc:	bic	r2, r2, #64	; 0x40
   122d0:	eor	r3, r3, #1
   122d4:	adds	r0, r0, #0
   122d8:	movne	r0, #1
   122dc:	orr	r0, r2, r0, lsl #6
   122e0:	strb	r0, [r6, #100]	; 0x64
   122e4:	bics	r3, r3, r0
   122e8:	ldrb	r2, [r6, #100]	; 0x64
   122ec:	lsrne	r3, r0, #5
   122f0:	andne	r3, r3, #1
   122f4:	bic	r2, r2, #32
   122f8:	orr	r3, r2, r3, lsl #5
   122fc:	tst	r3, #32
   12300:	strb	r3, [r6, #100]	; 0x64
   12304:	bne	1259c <__assert_fail@plt+0x888>
   12308:	ldr	r0, [r7, #64]	; 0x40
   1230c:	sub	r3, r0, #3
   12310:	cmp	r3, #5
   12314:	ldrls	pc, [pc, r3, lsl #2]
   12318:	b	13578 <__assert_fail@plt+0x1864>
   1231c:	andeq	r2, r1, ip, ror #6
   12320:	andeq	r2, r1, ip, ror #6
   12324:	andeq	r2, r1, r8, ror #10
   12328:	andeq	r2, r1, r8, ror #10
   1232c:	andeq	r2, r1, r8, ror #10
   12330:	andeq	r2, r1, r8, asr #10
   12334:	ldr	r3, [sp, #32]
   12338:	cmp	r3, #0
   1233c:	beq	122b8 <__assert_fail@plt+0x5a4>
   12340:	ldr	r3, [r6, #96]	; 0x60
   12344:	cmp	r3, #5
   12348:	beq	12afc <__assert_fail@plt+0xde8>
   1234c:	cmp	r3, #7
   12350:	bne	12580 <__assert_fail@plt+0x86c>
   12354:	mov	r2, #5
   12358:	ldr	r1, [pc, #2524]	; 12d3c <__assert_fail@plt+0x1028>
   1235c:	mov	r0, #0
   12360:	bl	118d0 <dcgettext@plt>
   12364:	bl	11aec <warnx@plt>
   12368:	b	122b8 <__assert_fail@plt+0x5a4>
   1236c:	ldr	r5, [r7, #68]	; 0x44
   12370:	cmp	r5, #0
   12374:	beq	12bd8 <__assert_fail@plt+0xec4>
   12378:	ldrb	r3, [r6, #100]	; 0x64
   1237c:	tst	r3, #2
   12380:	bne	131f0 <__assert_fail@plt+0x14dc>
   12384:	tst	r3, #128	; 0x80
   12388:	bne	125c0 <__assert_fail@plt+0x8ac>
   1238c:	ldrb	r3, [r6, #100]	; 0x64
   12390:	tst	r3, #32
   12394:	bne	130f0 <__assert_fail@plt+0x13dc>
   12398:	ldr	r3, [r7, #68]	; 0x44
   1239c:	cmp	r3, #1
   123a0:	beq	130f8 <__assert_fail@plt+0x13e4>
   123a4:	cmp	r3, #2
   123a8:	bne	125a4 <__assert_fail@plt+0x890>
   123ac:	ldr	r9, [r6, #84]	; 0x54
   123b0:	cmp	r9, #0
   123b4:	beq	134d0 <__assert_fail@plt+0x17bc>
   123b8:	mov	r1, #0
   123bc:	mov	r0, r9
   123c0:	bl	119f0 <open64@plt>
   123c4:	subs	r4, r0, #0
   123c8:	movlt	r2, #5
   123cc:	ldrlt	r1, [pc, #2412]	; 12d40 <__assert_fail@plt+0x102c>
   123d0:	blt	134ec <__assert_fail@plt+0x17d8>
   123d4:	add	r2, sp, #48	; 0x30
   123d8:	mov	r1, r4
   123dc:	mov	r0, #3
   123e0:	bl	1196c <__fxstat64@plt>
   123e4:	subs	r5, r0, #0
   123e8:	bne	134e4 <__assert_fail@plt+0x17d0>
   123ec:	mov	r9, #0
   123f0:	mov	r8, #0
   123f4:	mov	r3, #1
   123f8:	strd	r8, [sp, #8]
   123fc:	mov	r2, r3
   12400:	ldr	r1, [sp, #96]	; 0x60
   12404:	str	r4, [sp]
   12408:	bl	118a0 <mmap64@plt>
   1240c:	cmn	r0, #1
   12410:	mov	r9, r0
   12414:	moveq	r2, #5
   12418:	moveq	r0, r5
   1241c:	ldreq	r1, [pc, #2336]	; 12d44 <__assert_fail@plt+0x1030>
   12420:	beq	134f0 <__assert_fail@plt+0x17dc>
   12424:	str	r9, [r6, #88]	; 0x58
   12428:	bl	11af8 <getpagesize@plt>
   1242c:	str	r0, [r6, #92]	; 0x5c
   12430:	mov	r0, r4
   12434:	bl	11ce4 <close@plt>
   12438:	ldr	r4, [sp, #96]	; 0x60
   1243c:	cmp	r4, #0
   12440:	ble	134d4 <__assert_fail@plt+0x17c0>
   12444:	ldrb	r2, [r6, #100]	; 0x64
   12448:	mov	r3, #0
   1244c:	str	r9, [sp, #72]	; 0x48
   12450:	ands	sl, r2, #2
   12454:	str	r4, [sp, #76]	; 0x4c
   12458:	str	r3, [sp, #52]	; 0x34
   1245c:	str	r3, [sp, #48]	; 0x30
   12460:	str	r3, [sp, #56]	; 0x38
   12464:	str	r3, [sp, #60]	; 0x3c
   12468:	str	r3, [sp, #64]	; 0x40
   1246c:	str	r3, [sp, #68]	; 0x44
   12470:	mov	r8, r4
   12474:	bne	133c8 <__assert_fail@plt+0x16b4>
   12478:	ldr	fp, [pc, #2248]	; 12d48 <__assert_fail@plt+0x1034>
   1247c:	ldr	r3, [r7, #68]	; 0x44
   12480:	sub	r3, r3, #1
   12484:	cmp	r3, #1
   12488:	bhi	12adc <__assert_fail@plt+0xdc8>
   1248c:	ldr	ip, [sp, #72]	; 0x48
   12490:	cmp	ip, #0
   12494:	beq	12adc <__assert_fail@plt+0xdc8>
   12498:	ldr	r2, [sp, #76]	; 0x4c
   1249c:	cmp	r2, #0
   124a0:	beq	12adc <__assert_fail@plt+0xdc8>
   124a4:	ldr	r0, [r6, #88]	; 0x58
   124a8:	mvn	r3, #0
   124ac:	cmp	r0, #0
   124b0:	str	sl, [sp, #48]	; 0x30
   124b4:	str	sl, [sp, #52]	; 0x34
   124b8:	str	sl, [sp, #64]	; 0x40
   124bc:	str	sl, [sp, #68]	; 0x44
   124c0:	str	r3, [sp, #60]	; 0x3c
   124c4:	str	r3, [sp, #56]	; 0x38
   124c8:	beq	124dc <__assert_fail@plt+0x7c8>
   124cc:	ldr	r1, [r6, #92]	; 0x5c
   124d0:	sub	r3, ip, r0
   124d4:	cmp	r3, r1
   124d8:	bhi	1320c <__assert_fail@plt+0x14f8>
   124dc:	mov	r5, #0
   124e0:	mov	r3, r5
   124e4:	cmp	r3, r2
   124e8:	bcs	12adc <__assert_fail@plt+0xdc8>
   124ec:	add	r8, ip, r3
   124f0:	add	r1, r3, #1
   124f4:	cmp	r5, #0
   124f8:	moveq	r5, r8
   124fc:	cmp	r1, r2
   12500:	addeq	r8, r8, #1
   12504:	moveq	r3, r2
   12508:	beq	12528 <__assert_fail@plt+0x814>
   1250c:	ldrsb	r1, [ip, r3]
   12510:	cmp	r1, #10
   12514:	movne	r8, #0
   12518:	bne	12528 <__assert_fail@plt+0x814>
   1251c:	ldrsb	r1, [r8, #1]
   12520:	cmp	r1, #60	; 0x3c
   12524:	movne	r8, #0
   12528:	cmp	r5, #0
   1252c:	beq	12540 <__assert_fail@plt+0x82c>
   12530:	ldrsb	r1, [r5]
   12534:	cmp	r1, #0
   12538:	bne	12a34 <__assert_fail@plt+0xd20>
   1253c:	mov	r5, r1
   12540:	add	r3, r3, #1
   12544:	b	124e4 <__assert_fail@plt+0x7d0>
   12548:	ldr	r2, [sp, #36]	; 0x24
   1254c:	mov	r1, #0
   12550:	mov	r0, #8
   12554:	bl	11b34 <klogctl@plt>
   12558:	cmp	r0, #0
   1255c:	bne	1354c <__assert_fail@plt+0x1838>
   12560:	mov	r0, #0
   12564:	b	1216c <__assert_fail@plt+0x458>
   12568:	mov	r2, #0
   1256c:	mov	r1, r2
   12570:	bl	11b34 <klogctl@plt>
   12574:	b	12558 <__assert_fail@plt+0x844>
   12578:	mov	r0, #1
   1257c:	b	11fc4 <__assert_fail@plt+0x2b0>
   12580:	cmp	r3, #1
   12584:	moveq	r3, #2
   12588:	streq	r3, [r6, #96]	; 0x60
   1258c:	beq	122b8 <__assert_fail@plt+0x5a4>
   12590:	mov	r3, #3
   12594:	str	r3, [r6, #96]	; 0x60
   12598:	b	122b8 <__assert_fail@plt+0x5a4>
   1259c:	bl	15214 <__assert_fail@plt+0x3500>
   125a0:	b	12308 <__assert_fail@plt+0x5f4>
   125a4:	cmp	r3, #0
   125a8:	beq	12c50 <__assert_fail@plt+0xf3c>
   125ac:	bl	11cd8 <abort@plt>
   125b0:	mov	r0, #3
   125b4:	b	11fc4 <__assert_fail@plt+0x2b0>
   125b8:	mov	r0, #4
   125bc:	b	11fc4 <__assert_fail@plt+0x2b0>
   125c0:	ldr	r3, [r7, #68]	; 0x44
   125c4:	cmp	r3, #0
   125c8:	beq	12c44 <__assert_fail@plt+0xf30>
   125cc:	ldrb	r3, [r6, #100]	; 0x64
   125d0:	bic	r3, r3, #128	; 0x80
   125d4:	strb	r3, [r6, #100]	; 0x64
   125d8:	b	1238c <__assert_fail@plt+0x678>
   125dc:	ldr	r3, [pc, #2124]	; 12e30 <__assert_fail@plt+0x111c>
   125e0:	mov	r2, #5
   125e4:	ldr	r1, [pc, #1888]	; 12d4c <__assert_fail@plt+0x1038>
   125e8:	ldr	r4, [r3]
   125ec:	mov	r0, #0
   125f0:	bl	118d0 <dcgettext@plt>
   125f4:	mov	r1, r4
   125f8:	bl	11cc0 <fputs@plt>
   125fc:	mov	r2, #5
   12600:	ldr	r1, [pc, #1864]	; 12d50 <__assert_fail@plt+0x103c>
   12604:	mov	r0, #0
   12608:	bl	118d0 <dcgettext@plt>
   1260c:	ldr	r3, [pc, #1812]	; 12d28 <__assert_fail@plt+0x1014>
   12610:	mov	r1, #1
   12614:	mov	r6, #0
   12618:	ldr	r3, [r3]
   1261c:	ldr	r5, [pc, #1840]	; 12d54 <__assert_fail@plt+0x1040>
   12620:	ldr	r8, [pc, #1840]	; 12d58 <__assert_fail@plt+0x1044>
   12624:	mov	r2, r0
   12628:	mov	r0, r4
   1262c:	bl	11ba0 <__fprintf_chk@plt>
   12630:	mov	r1, r4
   12634:	mov	r0, #10
   12638:	bl	11c30 <fputc@plt>
   1263c:	mov	r2, #5
   12640:	ldr	r1, [pc, #1812]	; 12d5c <__assert_fail@plt+0x1048>
   12644:	mov	r0, r6
   12648:	bl	118d0 <dcgettext@plt>
   1264c:	mov	r1, r4
   12650:	bl	11cc0 <fputs@plt>
   12654:	mov	r2, #5
   12658:	ldr	r1, [pc, #1792]	; 12d60 <__assert_fail@plt+0x104c>
   1265c:	mov	r0, r6
   12660:	bl	118d0 <dcgettext@plt>
   12664:	mov	r1, r4
   12668:	bl	11cc0 <fputs@plt>
   1266c:	mov	r2, #5
   12670:	ldr	r1, [pc, #1772]	; 12d64 <__assert_fail@plt+0x1050>
   12674:	mov	r0, r6
   12678:	bl	118d0 <dcgettext@plt>
   1267c:	mov	r1, r4
   12680:	bl	11cc0 <fputs@plt>
   12684:	mov	r2, #5
   12688:	ldr	r1, [pc, #1752]	; 12d68 <__assert_fail@plt+0x1054>
   1268c:	mov	r0, r6
   12690:	bl	118d0 <dcgettext@plt>
   12694:	mov	r1, r4
   12698:	bl	11cc0 <fputs@plt>
   1269c:	mov	r2, #5
   126a0:	ldr	r1, [pc, #1732]	; 12d6c <__assert_fail@plt+0x1058>
   126a4:	mov	r0, r6
   126a8:	bl	118d0 <dcgettext@plt>
   126ac:	mov	r1, r4
   126b0:	bl	11cc0 <fputs@plt>
   126b4:	mov	r2, #5
   126b8:	ldr	r1, [pc, #1712]	; 12d70 <__assert_fail@plt+0x105c>
   126bc:	mov	r0, r6
   126c0:	bl	118d0 <dcgettext@plt>
   126c4:	mov	r1, r4
   126c8:	bl	11cc0 <fputs@plt>
   126cc:	mov	r2, #5
   126d0:	ldr	r1, [pc, #1692]	; 12d74 <__assert_fail@plt+0x1060>
   126d4:	mov	r0, r6
   126d8:	bl	118d0 <dcgettext@plt>
   126dc:	mov	r1, r4
   126e0:	bl	11cc0 <fputs@plt>
   126e4:	mov	r2, #5
   126e8:	ldr	r1, [pc, #1672]	; 12d78 <__assert_fail@plt+0x1064>
   126ec:	mov	r0, r6
   126f0:	bl	118d0 <dcgettext@plt>
   126f4:	mov	r1, r4
   126f8:	bl	11cc0 <fputs@plt>
   126fc:	mov	r2, #5
   12700:	ldr	r1, [pc, #1652]	; 12d7c <__assert_fail@plt+0x1068>
   12704:	mov	r0, r6
   12708:	bl	118d0 <dcgettext@plt>
   1270c:	mov	r1, r4
   12710:	bl	11cc0 <fputs@plt>
   12714:	mov	r2, #5
   12718:	ldr	r1, [pc, #1632]	; 12d80 <__assert_fail@plt+0x106c>
   1271c:	mov	r0, r6
   12720:	bl	118d0 <dcgettext@plt>
   12724:	mov	r1, r4
   12728:	bl	11cc0 <fputs@plt>
   1272c:	mov	r2, #5
   12730:	ldr	r1, [pc, #1612]	; 12d84 <__assert_fail@plt+0x1070>
   12734:	mov	r0, r6
   12738:	bl	118d0 <dcgettext@plt>
   1273c:	mov	r1, r4
   12740:	bl	11cc0 <fputs@plt>
   12744:	mov	r2, #5
   12748:	ldr	r1, [pc, #1592]	; 12d88 <__assert_fail@plt+0x1074>
   1274c:	mov	r0, r6
   12750:	bl	118d0 <dcgettext@plt>
   12754:	ldr	r2, [pc, #1584]	; 12d8c <__assert_fail@plt+0x1078>
   12758:	mov	r1, #1
   1275c:	mov	r3, r0
   12760:	mov	r0, r4
   12764:	bl	11ba0 <__fprintf_chk@plt>
   12768:	mov	r2, #5
   1276c:	ldr	r1, [pc, #1564]	; 12d90 <__assert_fail@plt+0x107c>
   12770:	mov	r0, r6
   12774:	bl	118d0 <dcgettext@plt>
   12778:	mov	r1, r4
   1277c:	bl	11cc0 <fputs@plt>
   12780:	mov	r2, #5
   12784:	ldr	r1, [pc, #1544]	; 12d94 <__assert_fail@plt+0x1080>
   12788:	mov	r0, r6
   1278c:	bl	118d0 <dcgettext@plt>
   12790:	mov	r1, r4
   12794:	bl	11cc0 <fputs@plt>
   12798:	mov	r2, #5
   1279c:	ldr	r1, [pc, #1524]	; 12d98 <__assert_fail@plt+0x1084>
   127a0:	mov	r0, r6
   127a4:	bl	118d0 <dcgettext@plt>
   127a8:	mov	r1, r4
   127ac:	bl	11cc0 <fputs@plt>
   127b0:	mov	r2, #5
   127b4:	ldr	r1, [pc, #1504]	; 12d9c <__assert_fail@plt+0x1088>
   127b8:	mov	r0, r6
   127bc:	bl	118d0 <dcgettext@plt>
   127c0:	mov	r1, r4
   127c4:	bl	11cc0 <fputs@plt>
   127c8:	mov	r2, #5
   127cc:	ldr	r1, [pc, #1484]	; 12da0 <__assert_fail@plt+0x108c>
   127d0:	mov	r0, r6
   127d4:	bl	118d0 <dcgettext@plt>
   127d8:	mov	r1, r4
   127dc:	bl	11cc0 <fputs@plt>
   127e0:	mov	r2, #5
   127e4:	ldr	r1, [pc, #1464]	; 12da4 <__assert_fail@plt+0x1090>
   127e8:	mov	r0, r6
   127ec:	bl	118d0 <dcgettext@plt>
   127f0:	mov	r1, r4
   127f4:	bl	11cc0 <fputs@plt>
   127f8:	mov	r2, #5
   127fc:	ldr	r1, [pc, #1444]	; 12da8 <__assert_fail@plt+0x1094>
   12800:	mov	r0, r6
   12804:	bl	118d0 <dcgettext@plt>
   12808:	mov	r1, r4
   1280c:	bl	11cc0 <fputs@plt>
   12810:	mov	r2, #5
   12814:	ldr	r1, [pc, #1424]	; 12dac <__assert_fail@plt+0x1098>
   12818:	mov	r0, r6
   1281c:	bl	118d0 <dcgettext@plt>
   12820:	mov	r1, r4
   12824:	bl	11cc0 <fputs@plt>
   12828:	mov	r2, #5
   1282c:	ldr	r1, [pc, #1404]	; 12db0 <__assert_fail@plt+0x109c>
   12830:	mov	r0, r6
   12834:	bl	118d0 <dcgettext@plt>
   12838:	mov	r1, r4
   1283c:	bl	11cc0 <fputs@plt>
   12840:	mov	r2, #5
   12844:	ldr	r1, [pc, #1384]	; 12db4 <__assert_fail@plt+0x10a0>
   12848:	mov	r0, r6
   1284c:	bl	118d0 <dcgettext@plt>
   12850:	mov	r1, r4
   12854:	bl	11cc0 <fputs@plt>
   12858:	mov	r2, #5
   1285c:	ldr	r1, [pc, #1364]	; 12db8 <__assert_fail@plt+0x10a4>
   12860:	mov	r0, r6
   12864:	bl	118d0 <dcgettext@plt>
   12868:	mov	r1, r4
   1286c:	bl	11cc0 <fputs@plt>
   12870:	mov	r2, #5
   12874:	ldr	r1, [pc, #1344]	; 12dbc <__assert_fail@plt+0x10a8>
   12878:	mov	r0, r6
   1287c:	bl	118d0 <dcgettext@plt>
   12880:	mov	r1, r4
   12884:	bl	11cc0 <fputs@plt>
   12888:	mov	r2, #5
   1288c:	ldr	r1, [pc, #1324]	; 12dc0 <__assert_fail@plt+0x10ac>
   12890:	mov	r0, r6
   12894:	bl	118d0 <dcgettext@plt>
   12898:	mov	r1, r4
   1289c:	bl	11cc0 <fputs@plt>
   128a0:	mov	r2, #5
   128a4:	ldr	r1, [pc, #1304]	; 12dc4 <__assert_fail@plt+0x10b0>
   128a8:	mov	r0, r6
   128ac:	bl	118d0 <dcgettext@plt>
   128b0:	mov	r1, r4
   128b4:	bl	11cc0 <fputs@plt>
   128b8:	mov	r2, #5
   128bc:	ldr	r1, [pc, #1284]	; 12dc8 <__assert_fail@plt+0x10b4>
   128c0:	mov	r0, r6
   128c4:	bl	118d0 <dcgettext@plt>
   128c8:	mov	r1, r4
   128cc:	bl	11cc0 <fputs@plt>
   128d0:	mov	r1, r4
   128d4:	mov	r0, #10
   128d8:	bl	11c30 <fputc@plt>
   128dc:	mov	r2, #5
   128e0:	ldr	r1, [pc, #1252]	; 12dcc <__assert_fail@plt+0x10b8>
   128e4:	mov	r0, r6
   128e8:	bl	118d0 <dcgettext@plt>
   128ec:	mov	r2, #5
   128f0:	ldr	r1, [pc, #1240]	; 12dd0 <__assert_fail@plt+0x10bc>
   128f4:	mov	r7, r0
   128f8:	mov	r0, r6
   128fc:	bl	118d0 <dcgettext@plt>
   12900:	ldr	r2, [pc, #1228]	; 12dd4 <__assert_fail@plt+0x10c0>
   12904:	mov	r3, r7
   12908:	str	r2, [sp]
   1290c:	ldr	r1, [pc, #1220]	; 12dd8 <__assert_fail@plt+0x10c4>
   12910:	ldr	r2, [pc, #1220]	; 12ddc <__assert_fail@plt+0x10c8>
   12914:	str	r0, [sp, #4]
   12918:	mov	r0, #1
   1291c:	bl	11b88 <__printf_chk@plt>
   12920:	ldr	r1, [pc, #1208]	; 12de0 <__assert_fail@plt+0x10cc>
   12924:	mov	r2, #5
   12928:	mov	r0, r6
   1292c:	bl	118d0 <dcgettext@plt>
   12930:	mov	r1, r4
   12934:	bl	11cc0 <fputs@plt>
   12938:	ldr	r1, [r5, #4]
   1293c:	mov	r2, #5
   12940:	mov	r0, #0
   12944:	ldr	r7, [r5]
   12948:	bl	118d0 <dcgettext@plt>
   1294c:	add	r6, r6, #1
   12950:	mov	r3, r7
   12954:	mov	r2, r8
   12958:	mov	r1, #1
   1295c:	add	r5, r5, #8
   12960:	str	r0, [sp]
   12964:	mov	r0, r4
   12968:	bl	11ba0 <__fprintf_chk@plt>
   1296c:	cmp	r6, #8
   12970:	bne	12938 <__assert_fail@plt+0xc24>
   12974:	mov	r2, #5
   12978:	ldr	r1, [pc, #1124]	; 12de4 <__assert_fail@plt+0x10d0>
   1297c:	mov	r0, #0
   12980:	bl	118d0 <dcgettext@plt>
   12984:	mov	r1, r4
   12988:	bl	11cc0 <fputs@plt>
   1298c:	ldr	r5, [pc, #1108]	; 12de8 <__assert_fail@plt+0x10d4>
   12990:	ldr	r8, [pc, #960]	; 12d58 <__assert_fail@plt+0x1044>
   12994:	mov	r6, #0
   12998:	ldr	r1, [r5, #4]
   1299c:	mov	r2, #5
   129a0:	mov	r0, #0
   129a4:	ldr	r7, [r5]
   129a8:	bl	118d0 <dcgettext@plt>
   129ac:	add	r6, r6, #1
   129b0:	mov	r3, r7
   129b4:	mov	r2, r8
   129b8:	mov	r1, #1
   129bc:	add	r5, r5, #8
   129c0:	str	r0, [sp]
   129c4:	mov	r0, r4
   129c8:	bl	11ba0 <__fprintf_chk@plt>
   129cc:	cmp	r6, #8
   129d0:	bne	12998 <__assert_fail@plt+0xc84>
   129d4:	mov	r2, #5
   129d8:	ldr	r1, [pc, #1036]	; 12dec <__assert_fail@plt+0x10d8>
   129dc:	mov	r0, #0
   129e0:	bl	118d0 <dcgettext@plt>
   129e4:	ldr	r2, [pc, #1028]	; 12df0 <__assert_fail@plt+0x10dc>
   129e8:	mov	r1, r0
   129ec:	mov	r0, #1
   129f0:	bl	11b88 <__printf_chk@plt>
   129f4:	mov	r0, #0
   129f8:	bl	11aa4 <exit@plt>
   129fc:	ldr	r3, [pc, #1096]	; 12e4c <__assert_fail@plt+0x1138>
   12a00:	ldr	r1, [pc, #1096]	; 12e50 <__assert_fail@plt+0x113c>
   12a04:	mov	r2, #5
   12a08:	mov	r0, #0
   12a0c:	ldr	r4, [r3]
   12a10:	bl	118d0 <dcgettext@plt>
   12a14:	ldr	r3, [pc, #780]	; 12d28 <__assert_fail@plt+0x1014>
   12a18:	mov	r1, #1
   12a1c:	ldr	r3, [r3]
   12a20:	mov	r2, r0
   12a24:	mov	r0, r4
   12a28:	bl	11ba0 <__fprintf_chk@plt>
   12a2c:	mov	r0, #1
   12a30:	bl	11aa4 <exit@plt>
   12a34:	cmp	r8, #0
   12a38:	cmpne	r5, r8
   12a3c:	bcs	12540 <__assert_fail@plt+0x82c>
   12a40:	cmp	r1, #60	; 0x3c
   12a44:	beq	131bc <__assert_fail@plt+0x14a8>
   12a48:	ldrsb	r3, [r5]
   12a4c:	cmp	r3, #91	; 0x5b
   12a50:	beq	13144 <__assert_fail@plt+0x1430>
   12a54:	sub	r3, r8, r5
   12a58:	str	r5, [sp, #48]	; 0x30
   12a5c:	str	r3, [sp, #52]	; 0x34
   12a60:	ldrsb	r2, [r8]
   12a64:	cmp	r2, #10
   12a68:	beq	12a7c <__assert_fail@plt+0xd68>
   12a6c:	ldrsb	r2, [r8, #-1]
   12a70:	cmp	r2, #10
   12a74:	subeq	r3, r3, #1
   12a78:	streq	r3, [sp, #52]	; 0x34
   12a7c:	ldrd	r2, [sp, #72]	; 0x48
   12a80:	sub	r2, r8, r2
   12a84:	sub	r3, r3, r2
   12a88:	cmp	r3, #0
   12a8c:	str	r3, [sp, #76]	; 0x4c
   12a90:	streq	r3, [sp, #72]	; 0x48
   12a94:	addne	r8, r8, #1
   12a98:	subne	r3, r3, #1
   12a9c:	strne	r8, [sp, #72]	; 0x48
   12aa0:	strne	r3, [sp, #76]	; 0x4c
   12aa4:	add	r0, sp, #48	; 0x30
   12aa8:	bl	13c48 <__assert_fail@plt+0x1f34>
   12aac:	b	1247c <__assert_fail@plt+0x768>
   12ab0:	ldr	r3, [fp]
   12ab4:	mov	r1, r4
   12ab8:	mov	r0, r9
   12abc:	bl	13a48 <__assert_fail@plt+0x1d34>
   12ac0:	add	r3, r9, r4
   12ac4:	ldrsb	r5, [r3, #-1]
   12ac8:	cmp	r5, #10
   12acc:	beq	12adc <__assert_fail@plt+0xdc8>
   12ad0:	ldr	r1, [fp]
   12ad4:	mov	r0, #10
   12ad8:	bl	11c60 <putc@plt>
   12adc:	ldr	r3, [r6, #88]	; 0x58
   12ae0:	cmp	r3, #0
   12ae4:	beq	130c4 <__assert_fail@plt+0x13b0>
   12ae8:	ldr	r0, [r7, #76]	; 0x4c
   12aec:	cmp	r0, #0
   12af0:	blt	12560 <__assert_fail@plt+0x84c>
   12af4:	bl	11ce4 <close@plt>
   12af8:	b	12560 <__assert_fail@plt+0x84c>
   12afc:	mov	r3, #6
   12b00:	str	r3, [r6, #96]	; 0x60
   12b04:	b	122b8 <__assert_fail@plt+0x5a4>
   12b08:	ldr	r6, [pc, #828]	; 12e4c <__assert_fail@plt+0x1138>
   12b0c:	mov	r2, #5
   12b10:	ldr	r1, [pc, #732]	; 12df4 <__assert_fail@plt+0x10e0>
   12b14:	mov	r0, #0
   12b18:	ldr	sl, [r6]
   12b1c:	bl	118d0 <dcgettext@plt>
   12b20:	ldr	r3, [pc, #512]	; 12d28 <__assert_fail@plt+0x1014>
   12b24:	mov	r1, #1
   12b28:	sub	r4, r5, #4
   12b2c:	ldr	r3, [r3]
   12b30:	add	r5, r5, #56	; 0x38
   12b34:	ldr	r7, [pc, #700]	; 12df8 <__assert_fail@plt+0x10e4>
   12b38:	ldr	r9, [pc, #700]	; 12dfc <__assert_fail@plt+0x10e8>
   12b3c:	ldr	r8, [pc, #700]	; 12e00 <__assert_fail@plt+0x10ec>
   12b40:	mov	r2, r0
   12b44:	mov	r0, sl
   12b48:	bl	11ba0 <__fprintf_chk@plt>
   12b4c:	ldr	r0, [r4, #4]!
   12b50:	cmp	r0, #0
   12b54:	beq	12bac <__assert_fail@plt+0xe98>
   12b58:	cmp	r0, #115	; 0x73
   12b5c:	beq	12bc0 <__assert_fail@plt+0xeac>
   12b60:	ldr	r2, [pc, #384]	; 12ce8 <__assert_fail@plt+0xfd4>
   12b64:	b	12b78 <__assert_fail@plt+0xe64>
   12b68:	add	r2, r2, #16
   12b6c:	ldr	r1, [r2, #12]
   12b70:	cmp	r0, r1
   12b74:	beq	12bc4 <__assert_fail@plt+0xeb0>
   12b78:	ldr	r3, [r2, #16]
   12b7c:	cmp	r3, #0
   12b80:	bne	12b68 <__assert_fail@plt+0xe54>
   12b84:	sub	r3, r0, #33	; 0x21
   12b88:	cmp	r3, #93	; 0x5d
   12b8c:	bhi	12ba4 <__assert_fail@plt+0xe90>
   12b90:	mov	r3, r0
   12b94:	mov	r2, r8
   12b98:	mov	r1, #1
   12b9c:	ldr	r0, [r6]
   12ba0:	bl	11ba0 <__fprintf_chk@plt>
   12ba4:	cmp	r5, r4
   12ba8:	bne	12b4c <__assert_fail@plt+0xe38>
   12bac:	ldr	r1, [r6]
   12bb0:	mov	r0, #10
   12bb4:	bl	11c30 <fputc@plt>
   12bb8:	mov	r0, #1
   12bbc:	bl	11aa4 <exit@plt>
   12bc0:	mov	r3, r9
   12bc4:	mov	r2, r7
   12bc8:	mov	r1, #1
   12bcc:	ldr	r0, [r6]
   12bd0:	bl	11ba0 <__fprintf_chk@plt>
   12bd4:	b	12ba4 <__assert_fail@plt+0xe90>
   12bd8:	ldrb	r3, [r6, #100]	; 0x64
   12bdc:	tst	r3, #1
   12be0:	moveq	r5, #2048	; 0x800
   12be4:	bne	133a0 <__assert_fail@plt+0x168c>
   12be8:	mov	r1, r5
   12bec:	ldr	r0, [pc, #528]	; 12e04 <__assert_fail@plt+0x10f0>
   12bf0:	bl	11b10 <__open64_2@plt>
   12bf4:	cmp	r0, #0
   12bf8:	str	r0, [r7, #76]	; 0x4c
   12bfc:	blt	132ac <__assert_fail@plt+0x1598>
   12c00:	mov	r3, #3
   12c04:	str	r3, [sp]
   12c08:	mov	r2, #0
   12c0c:	mov	r3, #0
   12c10:	bl	1199c <lseek64@plt>
   12c14:	bl	13bfc <__assert_fail@plt+0x1ee8>
   12c18:	cmp	r0, #0
   12c1c:	str	r0, [r7, #80]	; 0x50
   12c20:	blt	1329c <__assert_fail@plt+0x1588>
   12c24:	ldrb	r3, [r6, #100]	; 0x64
   12c28:	tst	r3, #2
   12c2c:	beq	12384 <__assert_fail@plt+0x670>
   12c30:	ldr	r2, [r7, #68]	; 0x44
   12c34:	cmp	r2, #0
   12c38:	bne	131f0 <__assert_fail@plt+0x14dc>
   12c3c:	tst	r3, #128	; 0x80
   12c40:	beq	1238c <__assert_fail@plt+0x678>
   12c44:	ldrb	r3, [r6, #100]	; 0x64
   12c48:	tst	r3, #32
   12c4c:	bne	130f0 <__assert_fail@plt+0x13dc>
   12c50:	ldr	r3, [r7, #76]	; 0x4c
   12c54:	cmp	r3, #0
   12c58:	movlt	r9, #0
   12c5c:	blt	1328c <__assert_fail@plt+0x1578>
   12c60:	ldr	r0, [r7, #80]	; 0x50
   12c64:	ldr	r9, [pc, #448]	; 12e2c <__assert_fail@plt+0x1118>
   12c68:	ldr	r8, [pc, #408]	; 12e08 <__assert_fail@plt+0x10f4>
   12c6c:	ldr	sl, [pc, #408]	; 12e0c <__assert_fail@plt+0x10f8>
   12c70:	cmp	r0, #0
   12c74:	ble	130a8 <__assert_fail@plt+0x1394>
   12c78:	mov	r3, #0
   12c7c:	strb	r3, [r9, r0]
   12c80:	ldrsb	r2, [r7, #84]	; 0x54
   12c84:	cmp	r2, r3
   12c88:	beq	13000 <__assert_fail@plt+0x12ec>
   12c8c:	add	r2, r7, #8192	; 0x2000
   12c90:	sub	r0, r0, #1
   12c94:	ldrb	fp, [r2, #100]	; 0x64
   12c98:	add	r5, r9, r0
   12c9c:	mvn	r2, #0
   12ca0:	cmp	r5, r9
   12ca4:	str	r3, [sp, #48]	; 0x30
   12ca8:	str	r3, [sp, #52]	; 0x34
   12cac:	str	r3, [sp, #64]	; 0x40
   12cb0:	str	r3, [sp, #68]	; 0x44
   12cb4:	and	fp, fp, #94	; 0x5e
   12cb8:	str	r2, [sp, #60]	; 0x3c
   12cbc:	str	r2, [sp, #56]	; 0x38
   12cc0:	bls	13350 <__assert_fail@plt+0x163c>
   12cc4:	bl	11a8c <__ctype_b_loc@plt>
   12cc8:	ldr	r3, [pc, #348]	; 12e2c <__assert_fail@plt+0x1118>
   12ccc:	ldr	r0, [r0]
   12cd0:	b	12e60 <__assert_fail@plt+0x114c>
   12cd4:	andeq	ip, r2, r8, lsl #26
   12cd8:	strdeq	fp, [r1], -r4
   12cdc:	andeq	pc, r2, r8
   12ce0:	andeq	sl, r1, r4, asr r7
   12ce4:	andeq	sl, r1, r8, ror #14
   12ce8:	andeq	sl, r1, r4, ror r1
   12cec:	strheq	fp, [r1], -r4
   12cf0:	andeq	r4, r1, r4, lsr #12
   12cf4:	andeq	sl, r1, r4, lsr #6
   12cf8:	andeq	pc, r2, r0, lsr #1
   12cfc:	andeq	fp, r1, r0, asr r0
   12d00:	andeq	fp, r1, r8, asr r0
   12d04:	andeq	fp, r1, r0, rrx
   12d08:	andeq	fp, r1, r8, rrx
   12d0c:	andeq	fp, r1, r0, ror r0
   12d10:	andeq	fp, r1, r0, lsl r0
   12d14:	andeq	sp, r2, r8
   12d18:	ldrdeq	r3, [r1], -r8
   12d1c:	andeq	r3, r1, r4, ror r7
   12d20:	andeq	sp, r2, sl
   12d24:	andeq	fp, r1, r0, lsr r0
   12d28:	andeq	pc, r2, r8, lsl #1
   12d2c:	andeq	fp, r1, ip, lsr r0
   12d30:	strdeq	sl, [r1], -r8
   12d34:	muleq	r2, r0, r0
   12d38:	andeq	fp, r1, r8, lsr #2
   12d3c:	andeq	fp, r1, r4, ror #1
   12d40:	muleq	r1, ip, r1
   12d44:	andeq	fp, r1, r0, asr #3
   12d48:	strdeq	fp, [r1], -r8
   12d4c:	andeq	sl, r1, r0, lsr #15
   12d50:	andeq	sl, r1, ip, lsr #15
   12d54:	andeq	sl, r1, r4, rrx
   12d58:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12d5c:			; <UNDEFINED> instruction: 0x0001a7bc
   12d60:	andeq	sl, r1, r8, ror #15
   12d64:	strdeq	sl, [r1], -r4
   12d68:	andeq	sl, r1, r0, lsr r8
   12d6c:	andeq	sl, r1, ip, ror #16
   12d70:			; <UNDEFINED> instruction: 0x0001a8b0
   12d74:	strdeq	sl, [r1], -r4
   12d78:	andeq	sl, r1, r0, asr #18
   12d7c:	andeq	sl, r1, r4, lsl #19
   12d80:			; <UNDEFINED> instruction: 0x0001a9b8
   12d84:	strdeq	sl, [r1], -r0
   12d88:	andeq	sl, r1, r8, lsr sl
   12d8c:	andeq	sl, r1, r8, asr sl
   12d90:	andeq	sl, r1, ip, ror sl
   12d94:			; <UNDEFINED> instruction: 0x0001aabc
   12d98:	andeq	sl, r1, r4, lsl #22
   12d9c:	andeq	sl, r1, r4, asr #22
   12da0:	andeq	sl, r1, r0, lsr #23
   12da4:	ldrdeq	sl, [r1], -ip
   12da8:	andeq	sl, r1, r8, lsr #24
   12dac:	andeq	sl, r1, r4, ror ip
   12db0:			; <UNDEFINED> instruction: 0x0001acb0
   12db4:	andeq	sl, r1, r4, ror #25
   12db8:	andeq	sl, r1, r0, lsr sp
   12dbc:	andeq	sl, r1, r8, ror sp
   12dc0:	andeq	sl, r1, r8, asr #27
   12dc4:	andeq	sl, r1, ip, lsl lr
   12dc8:	andeq	sl, r1, r4, ror #28
   12dcc:	andeq	sl, r1, ip, lsr #30
   12dd0:	andeq	sl, r1, r0, asr #30
   12dd4:	andeq	sl, r1, r0, ror pc
   12dd8:	andeq	sl, r1, ip, asr pc
   12ddc:	andeq	sl, r1, r0, asr pc
   12de0:	andeq	sl, r1, r0, lsl #31
   12de4:	andeq	sl, r1, r8, lsr #31
   12de8:	andeq	sl, r1, r4, asr #1
   12dec:	ldrdeq	sl, [r1], -r0
   12df0:	andeq	sl, r1, ip, ror #31
   12df4:	andeq	sl, r1, r4, ror r7
   12df8:	andeq	fp, r1, r0, asr #4
   12dfc:	andeq	sl, r1, r8, asr #14
   12e00:	muleq	r1, r8, r7
   12e04:	andeq	fp, r1, r0, lsr r1
   12e08:	andeq	fp, r1, r8, asr #23
   12e0c:	strdeq	fp, [r1], -r4
   12e10:	andeq	fp, r1, ip, ror #3
   12e14:	strdeq	fp, [r1], -r0
   12e18:	andeq	fp, r1, r0, lsl #4
   12e1c:	strdeq	fp, [r1], -ip
   12e20:	andeq	fp, r1, ip, lsr r1
   12e24:	andeq	r4, r0, r8
   12e28:	andeq	r4, pc, r0, asr #4
   12e2c:	andeq	sp, r2, ip, asr r0
   12e30:	muleq	r2, ip, r0
   12e34:	andeq	fp, r1, ip, lsr #3
   12e38:	andeq	fp, r1, r0, lsr r2
   12e3c:	andeq	fp, r1, r4, ror r0
   12e40:	andeq	fp, r1, ip, lsl r2
   12e44:	ldrdeq	fp, [r1], -r0
   12e48:	ldrdeq	fp, [r1], -r8
   12e4c:	muleq	r2, r8, r0
   12e50:	andeq	fp, r1, ip, lsl #1
   12e54:	cmp	r5, r3
   12e58:	mov	r4, r3
   12e5c:	beq	13064 <__assert_fail@plt+0x1350>
   12e60:	ldrsb	r2, [r3]
   12e64:	mov	r4, r3
   12e68:	add	r3, r3, #1
   12e6c:	lsl	r1, r2, #1
   12e70:	ldrh	r1, [r0, r1]
   12e74:	tst	r1, #8192	; 0x2000
   12e78:	bne	12e54 <__assert_fail@plt+0x1140>
   12e7c:	cmp	fp, #0
   12e80:	bne	1306c <__assert_fail@plt+0x1358>
   12e84:	cmp	r4, r5
   12e88:	bcs	1335c <__assert_fail@plt+0x1648>
   12e8c:	subs	r1, r2, #0
   12e90:	mov	r4, r3
   12e94:	beq	12ec4 <__assert_fail@plt+0x11b0>
   12e98:	ldr	fp, [pc, #-144]	; 12e10 <__assert_fail@plt+0x10fc>
   12e9c:	b	12eb4 <__assert_fail@plt+0x11a0>
   12ea0:	cmp	r5, r4
   12ea4:	beq	12ec4 <__assert_fail@plt+0x11b0>
   12ea8:	ldrsb	r1, [r4], #1
   12eac:	cmp	r1, #0
   12eb0:	beq	12ecc <__assert_fail@plt+0x11b8>
   12eb4:	mov	r0, fp
   12eb8:	bl	11ad4 <strchr@plt>
   12ebc:	cmp	r0, #0
   12ec0:	beq	12ea0 <__assert_fail@plt+0x118c>
   12ec4:	cmp	r4, #0
   12ec8:	beq	13084 <__assert_fail@plt+0x1370>
   12ecc:	ldrsb	r1, [r4]
   12ed0:	cmp	r1, #0
   12ed4:	beq	13008 <__assert_fail@plt+0x12f4>
   12ed8:	ldrsb	r3, [r4, #-1]
   12edc:	cmp	r3, #59	; 0x3b
   12ee0:	beq	13008 <__assert_fail@plt+0x12f4>
   12ee4:	cmp	r5, r4
   12ee8:	bls	12f30 <__assert_fail@plt+0x121c>
   12eec:	add	r4, r4, #1
   12ef0:	ldr	fp, [pc, #-228]	; 12e14 <__assert_fail@plt+0x1100>
   12ef4:	b	12f0c <__assert_fail@plt+0x11f8>
   12ef8:	cmp	r4, r5
   12efc:	beq	12f1c <__assert_fail@plt+0x1208>
   12f00:	ldrsb	r1, [r4], #1
   12f04:	cmp	r1, #0
   12f08:	beq	12f24 <__assert_fail@plt+0x1210>
   12f0c:	mov	r0, fp
   12f10:	bl	11ad4 <strchr@plt>
   12f14:	cmp	r0, #0
   12f18:	beq	12ef8 <__assert_fail@plt+0x11e4>
   12f1c:	cmp	r4, #0
   12f20:	beq	13084 <__assert_fail@plt+0x1370>
   12f24:	ldrsb	r3, [r4]
   12f28:	cmp	r3, #0
   12f2c:	beq	13008 <__assert_fail@plt+0x12f4>
   12f30:	ldrsb	r3, [r4, #-1]
   12f34:	cmp	r3, #59	; 0x3b
   12f38:	beq	13008 <__assert_fail@plt+0x12f4>
   12f3c:	ldr	r3, [r6, #96]	; 0x60
   12f40:	cmp	r3, #0
   12f44:	bne	132b8 <__assert_fail@plt+0x15a4>
   12f48:	ldr	fp, [pc, #-316]	; 12e14 <__assert_fail@plt+0x1100>
   12f4c:	b	12f6c <__assert_fail@plt+0x1258>
   12f50:	ldrsb	r1, [r4], #1
   12f54:	cmp	r1, #0
   12f58:	beq	12f7c <__assert_fail@plt+0x1268>
   12f5c:	mov	r0, fp
   12f60:	bl	11ad4 <strchr@plt>
   12f64:	cmp	r0, #0
   12f68:	bne	12f7c <__assert_fail@plt+0x1268>
   12f6c:	cmp	r5, r4
   12f70:	bhi	12f50 <__assert_fail@plt+0x123c>
   12f74:	cmp	r4, #0
   12f78:	beq	13084 <__assert_fail@plt+0x1370>
   12f7c:	ldrsb	r3, [r4]
   12f80:	cmp	r3, #0
   12f84:	beq	13008 <__assert_fail@plt+0x12f4>
   12f88:	ldrsb	r3, [r4, #-1]
   12f8c:	cmp	r3, #59	; 0x3b
   12f90:	bne	12fb4 <__assert_fail@plt+0x12a0>
   12f94:	b	13008 <__assert_fail@plt+0x12f4>
   12f98:	ldrsb	r1, [r4], #1
   12f9c:	cmp	r1, #0
   12fa0:	beq	1333c <__assert_fail@plt+0x1628>
   12fa4:	mov	r0, sl
   12fa8:	bl	11ad4 <strchr@plt>
   12fac:	cmp	r0, #0
   12fb0:	bne	1333c <__assert_fail@plt+0x1628>
   12fb4:	cmp	r5, r4
   12fb8:	bhi	12f98 <__assert_fail@plt+0x1284>
   12fbc:	mov	fp, r4
   12fc0:	str	r4, [sp, #48]	; 0x30
   12fc4:	cmp	r4, #0
   12fc8:	beq	13000 <__assert_fail@plt+0x12ec>
   12fcc:	ldrsb	r3, [r4]
   12fd0:	mov	r1, fp
   12fd4:	mov	r0, fp
   12fd8:	cmp	r3, #0
   12fdc:	cmpne	r3, #10
   12fe0:	subne	r4, r4, #1
   12fe4:	sub	r2, r4, fp
   12fe8:	add	r2, r2, #1
   12fec:	bl	14a38 <__assert_fail@plt+0x2d24>
   12ff0:	sub	r3, r0, #1
   12ff4:	add	r0, sp, #48	; 0x30
   12ff8:	str	r3, [sp, #52]	; 0x34
   12ffc:	bl	13c48 <__assert_fail@plt+0x1f34>
   13000:	bl	13bfc <__assert_fail@plt+0x1ee8>
   13004:	b	12c70 <__assert_fail@plt+0xf5c>
   13008:	cmp	r5, r4
   1300c:	str	r4, [sp, #48]	; 0x30
   13010:	bls	1336c <__assert_fail@plt+0x1658>
   13014:	mov	r3, r4
   13018:	mov	fp, r4
   1301c:	ldrsb	r1, [r3], #1
   13020:	cmp	r1, #0
   13024:	beq	134a0 <__assert_fail@plt+0x178c>
   13028:	mov	r4, r3
   1302c:	mov	r0, r8
   13030:	bl	11ad4 <strchr@plt>
   13034:	cmp	r0, #0
   13038:	bne	12fc4 <__assert_fail@plt+0x12b0>
   1303c:	cmp	r5, r4
   13040:	bls	12fc4 <__assert_fail@plt+0x12b0>
   13044:	ldrsb	r1, [r4], #1
   13048:	cmp	r1, #0
   1304c:	bne	1302c <__assert_fail@plt+0x1318>
   13050:	mov	r3, r4
   13054:	mov	r4, fp
   13058:	mov	fp, r4
   1305c:	mov	r4, r3
   13060:	b	12fcc <__assert_fail@plt+0x12b8>
   13064:	cmp	fp, #0
   13068:	beq	12ec4 <__assert_fail@plt+0x11b0>
   1306c:	mov	r0, r4
   13070:	add	r2, sp, #56	; 0x38
   13074:	add	r1, sp, #60	; 0x3c
   13078:	bl	136c0 <__assert_fail@plt+0x19ac>
   1307c:	mov	r4, r0
   13080:	b	12ec4 <__assert_fail@plt+0x11b0>
   13084:	mov	fp, #0
   13088:	cmp	r5, #0
   1308c:	str	fp, [sp, #48]	; 0x30
   13090:	beq	13000 <__assert_fail@plt+0x12ec>
   13094:	ldrsb	r1, [fp]
   13098:	cmp	r1, #0
   1309c:	beq	134c4 <__assert_fail@plt+0x17b0>
   130a0:	mov	r3, #1
   130a4:	b	13028 <__assert_fail@plt+0x1314>
   130a8:	ldr	r3, [r7, #64]	; 0x40
   130ac:	cmp	r3, #4
   130b0:	beq	134a8 <__assert_fail@plt+0x1794>
   130b4:	ldr	r9, [r6, #88]	; 0x58
   130b8:	cmp	r9, #0
   130bc:	bne	12ae8 <__assert_fail@plt+0xdd4>
   130c0:	mov	r4, r9
   130c4:	mov	r0, r9
   130c8:	bl	11840 <free@plt>
   130cc:	cmp	r4, #0
   130d0:	bge	12ae8 <__assert_fail@plt+0xdd4>
   130d4:	ldr	r1, [pc, #-708]	; 12e18 <__assert_fail@plt+0x1104>
   130d8:	mov	r2, #5
   130dc:	mov	r0, #0
   130e0:	bl	118d0 <dcgettext@plt>
   130e4:	mov	r1, r0
   130e8:	mov	r0, #1
   130ec:	bl	11948 <err@plt>
   130f0:	bl	15214 <__assert_fail@plt+0x3500>
   130f4:	b	12398 <__assert_fail@plt+0x684>
   130f8:	ldr	r2, [r7, #72]	; 0x48
   130fc:	cmp	r2, #0
   13100:	beq	13224 <__assert_fail@plt+0x1510>
   13104:	add	r4, r2, #8
   13108:	mov	r0, r4
   1310c:	bl	11a2c <malloc@plt>
   13110:	adds	r3, r4, #0
   13114:	movne	r3, #1
   13118:	mov	r2, r4
   1311c:	cmp	r0, #0
   13120:	movne	r3, #0
   13124:	cmp	r3, #0
   13128:	mov	r9, r0
   1312c:	bne	13594 <__assert_fail@plt+0x1880>
   13130:	mov	r1, r0
   13134:	ldr	r0, [r7, #64]	; 0x40
   13138:	bl	11b34 <klogctl@plt>
   1313c:	mov	r4, r0
   13140:	b	1243c <__assert_fail@plt+0x728>
   13144:	ldrsb	r3, [r5, #1]
   13148:	cmp	r3, #32
   1314c:	str	r3, [sp, #16]
   13150:	beq	13170 <__assert_fail@plt+0x145c>
   13154:	bl	11a8c <__ctype_b_loc@plt>
   13158:	ldr	r3, [sp, #16]
   1315c:	lsl	r3, r3, #1
   13160:	ldr	r2, [r0]
   13164:	ldrh	r3, [r2, r3]
   13168:	tst	r3, #2048	; 0x800
   1316c:	beq	12a54 <__assert_fail@plt+0xd40>
   13170:	ldr	r3, [r6, #96]	; 0x60
   13174:	cmp	r3, #0
   13178:	beq	13190 <__assert_fail@plt+0x147c>
   1317c:	b	1342c <__assert_fail@plt+0x1718>
   13180:	ldr	r0, [pc, #-876]	; 12e1c <__assert_fail@plt+0x1108>
   13184:	bl	11ad4 <strchr@plt>
   13188:	cmp	r0, #0
   1318c:	bne	131a4 <__assert_fail@plt+0x1490>
   13190:	cmp	r8, r5
   13194:	bls	12a54 <__assert_fail@plt+0xd40>
   13198:	ldrsb	r1, [r5], #1
   1319c:	cmp	r1, #0
   131a0:	bne	13180 <__assert_fail@plt+0x146c>
   131a4:	cmp	r8, r5
   131a8:	bls	12a54 <__assert_fail@plt+0xd40>
   131ac:	ldrsb	r3, [r5]
   131b0:	cmp	r3, #32
   131b4:	addeq	r5, r5, #1
   131b8:	b	12a54 <__assert_fail@plt+0xd40>
   131bc:	ldrb	r3, [r6, #100]	; 0x64
   131c0:	tst	r3, #92	; 0x5c
   131c4:	bne	133b0 <__assert_fail@plt+0x169c>
   131c8:	ldrsb	r1, [r5], #1
   131cc:	cmp	r1, #0
   131d0:	beq	12a48 <__assert_fail@plt+0xd34>
   131d4:	mov	r0, fp
   131d8:	bl	11ad4 <strchr@plt>
   131dc:	cmp	r0, #0
   131e0:	bne	12a48 <__assert_fail@plt+0xd34>
   131e4:	cmp	r8, r5
   131e8:	bhi	131c8 <__assert_fail@plt+0x14b4>
   131ec:	b	12a48 <__assert_fail@plt+0xd34>
   131f0:	tst	r3, #12
   131f4:	movne	r2, #5
   131f8:	ldrne	r1, [pc, #-992]	; 12e20 <__assert_fail@plt+0x110c>
   131fc:	bne	13580 <__assert_fail@plt+0x186c>
   13200:	tst	r3, #128	; 0x80
   13204:	beq	1238c <__assert_fail@plt+0x678>
   13208:	b	125cc <__assert_fail@plt+0x8b8>
   1320c:	add	r3, r0, r1
   13210:	str	r3, [r6, #88]	; 0x58
   13214:	bl	11bdc <munmap@plt>
   13218:	ldr	ip, [sp, #72]	; 0x48
   1321c:	ldr	r2, [sp, #76]	; 0x4c
   13220:	b	124dc <__assert_fail@plt+0x7c8>
   13224:	mov	r1, r2
   13228:	mov	r0, #10
   1322c:	bl	11b34 <klogctl@plt>
   13230:	cmp	r0, #0
   13234:	bic	r2, r0, r0, asr #31
   13238:	ldrle	r5, [pc, #-1052]	; 12e24 <__assert_fail@plt+0x1110>
   1323c:	str	r2, [r7, #72]	; 0x48
   13240:	ble	13260 <__assert_fail@plt+0x154c>
   13244:	b	13104 <__assert_fail@plt+0x13f0>
   13248:	cmp	r5, #268435456	; 0x10000000
   1324c:	cmpls	r5, r0
   13250:	bne	13374 <__assert_fail@plt+0x1660>
   13254:	mov	r0, r9
   13258:	bl	11840 <free@plt>
   1325c:	lsl	r5, r5, #2
   13260:	mov	r0, r5
   13264:	bl	11a2c <malloc@plt>
   13268:	mov	r2, r5
   1326c:	subs	r9, r0, #0
   13270:	beq	13594 <__assert_fail@plt+0x1880>
   13274:	mov	r1, r9
   13278:	mov	r0, #3
   1327c:	bl	11b34 <klogctl@plt>
   13280:	cmp	r0, #0
   13284:	bge	13248 <__assert_fail@plt+0x1534>
   13288:	mov	r4, r0
   1328c:	ldr	r3, [r6, #88]	; 0x58
   13290:	cmp	r3, #0
   13294:	beq	130c4 <__assert_fail@plt+0x13b0>
   13298:	b	130d4 <__assert_fail@plt+0x13c0>
   1329c:	ldr	r0, [r7, #76]	; 0x4c
   132a0:	bl	11ce4 <close@plt>
   132a4:	mvn	r3, #0
   132a8:	str	r3, [r7, #76]	; 0x4c
   132ac:	mov	r3, #1
   132b0:	str	r3, [r7, #68]	; 0x44
   132b4:	b	12378 <__assert_fail@plt+0x664>
   132b8:	mov	r2, #0
   132bc:	str	r2, [sp, #44]	; 0x2c
   132c0:	bl	11b1c <__errno_location@plt>
   132c4:	mov	r2, #0
   132c8:	mov	r3, r2
   132cc:	add	r1, sp, #44	; 0x2c
   132d0:	str	r2, [r0]
   132d4:	mov	fp, r0
   132d8:	mov	r2, #10
   132dc:	mov	r0, r4
   132e0:	bl	118ac <__strtoull_internal@plt>
   132e4:	ldr	r3, [fp]
   132e8:	cmp	r3, #0
   132ec:	strd	r0, [sp, #16]
   132f0:	bne	12f74 <__assert_fail@plt+0x1260>
   132f4:	ldr	fp, [sp, #44]	; 0x2c
   132f8:	cmp	fp, #0
   132fc:	beq	12f74 <__assert_fail@plt+0x1260>
   13300:	ldrsb	r3, [fp]
   13304:	cmp	r3, #44	; 0x2c
   13308:	cmpne	r3, #59	; 0x3b
   1330c:	bne	12f74 <__assert_fail@plt+0x1260>
   13310:	ldr	r2, [pc, #-1264]	; 12e28 <__assert_fail@plt+0x1114>
   13314:	mov	r3, #0
   13318:	bl	19e68 <__assert_fail@plt+0x8154>
   1331c:	ldrd	r0, [sp, #16]
   13320:	mov	r3, #0
   13324:	add	r4, fp, #1
   13328:	str	r2, [sp, #68]	; 0x44
   1332c:	ldr	r2, [pc, #-1292]	; 12e28 <__assert_fail@plt+0x1114>
   13330:	bl	19e68 <__assert_fail@plt+0x8154>
   13334:	str	r0, [sp, #64]	; 0x40
   13338:	b	12f74 <__assert_fail@plt+0x1260>
   1333c:	cmp	r5, r4
   13340:	str	r4, [sp, #48]	; 0x30
   13344:	bhi	13014 <__assert_fail@plt+0x1300>
   13348:	mov	r3, r4
   1334c:	b	13058 <__assert_fail@plt+0x1344>
   13350:	cmp	fp, #0
   13354:	ldr	r4, [pc, #-1328]	; 12e2c <__assert_fail@plt+0x1118>
   13358:	bne	1306c <__assert_fail@plt+0x1358>
   1335c:	ldrsb	r1, [r4]
   13360:	cmp	r1, #0
   13364:	bne	12ed8 <__assert_fail@plt+0x11c4>
   13368:	str	r4, [sp, #48]	; 0x30
   1336c:	mov	fp, r4
   13370:	b	12fcc <__assert_fail@plt+0x12b8>
   13374:	cmp	r0, #0
   13378:	mov	r4, r0
   1337c:	beq	12adc <__assert_fail@plt+0xdc8>
   13380:	ldr	r0, [r7, #64]	; 0x40
   13384:	cmp	r0, #4
   13388:	bne	12444 <__assert_fail@plt+0x730>
   1338c:	mov	r2, r5
   13390:	mov	r1, r9
   13394:	bl	11b34 <klogctl@plt>
   13398:	mov	r4, r0
   1339c:	b	1243c <__assert_fail@plt+0x728>
   133a0:	ldr	fp, [pc, #-1400]	; 12e30 <__assert_fail@plt+0x111c>
   133a4:	ldr	r0, [fp]
   133a8:	bl	11b04 <setlinebuf@plt>
   133ac:	b	12be8 <__assert_fail@plt+0xed4>
   133b0:	add	r0, r5, #1
   133b4:	add	r2, sp, #56	; 0x38
   133b8:	add	r1, sp, #60	; 0x3c
   133bc:	bl	136c0 <__assert_fail@plt+0x19ac>
   133c0:	mov	r5, r0
   133c4:	b	12a48 <__assert_fail@plt+0xd34>
   133c8:	ldr	r2, [r6, #88]	; 0x58
   133cc:	ldr	fp, [pc, #-1444]	; 12e30 <__assert_fail@plt+0x111c>
   133d0:	cmp	r2, #0
   133d4:	beq	12ab0 <__assert_fail@plt+0xd9c>
   133d8:	ldr	r5, [r6, #92]	; 0x5c
   133dc:	ldr	sl, [r6, #88]	; 0x58
   133e0:	cmp	r8, r5
   133e4:	movcc	r5, r8
   133e8:	mov	r1, r5
   133ec:	mov	r0, sl
   133f0:	ldr	r3, [fp]
   133f4:	mov	r2, #0
   133f8:	bl	13a48 <__assert_fail@plt+0x1d34>
   133fc:	ldr	r3, [r6, #88]	; 0x58
   13400:	add	r2, sl, r5
   13404:	add	r3, r3, r5
   13408:	sub	r8, r8, r5
   1340c:	mov	r1, r5
   13410:	mov	r0, sl
   13414:	ldrsb	r5, [r2, #-1]
   13418:	str	r3, [r6, #88]	; 0x58
   1341c:	bl	11bdc <munmap@plt>
   13420:	cmp	r8, #0
   13424:	bne	133d8 <__assert_fail@plt+0x16c4>
   13428:	b	12ac8 <__assert_fail@plt+0xdb4>
   1342c:	adds	r5, r5, #1
   13430:	str	sl, [sp, #44]	; 0x2c
   13434:	beq	131a4 <__assert_fail@plt+0x1490>
   13438:	bl	11b1c <__errno_location@plt>
   1343c:	add	r1, sp, #44	; 0x2c
   13440:	mov	r2, #10
   13444:	str	r0, [sp, #16]
   13448:	str	sl, [r0]
   1344c:	mov	r0, r5
   13450:	bl	117f8 <strtol@plt>
   13454:	ldr	r3, [sp, #16]
   13458:	ldr	ip, [r3]
   1345c:	cmp	ip, #0
   13460:	str	r0, [sp, #64]	; 0x40
   13464:	bne	131a4 <__assert_fail@plt+0x1490>
   13468:	ldr	r2, [sp, #44]	; 0x2c
   1346c:	cmp	r2, #0
   13470:	beq	131a4 <__assert_fail@plt+0x1490>
   13474:	ldrsb	r3, [r2]
   13478:	cmp	r3, #46	; 0x2e
   1347c:	movne	r3, r5
   13480:	beq	13504 <__assert_fail@plt+0x17f0>
   13484:	cmp	r2, #0
   13488:	cmpne	r2, r3
   1348c:	beq	131a4 <__assert_fail@plt+0x1490>
   13490:	ldrsb	r3, [r2]
   13494:	cmp	r3, #93	; 0x5d
   13498:	addeq	r5, r2, #1
   1349c:	b	131a4 <__assert_fail@plt+0x1490>
   134a0:	mov	r4, r3
   134a4:	b	12fc4 <__assert_fail@plt+0x12b0>
   134a8:	mov	r2, #0
   134ac:	mov	r1, r2
   134b0:	mov	r0, #5
   134b4:	bl	11b34 <klogctl@plt>
   134b8:	mov	r9, #0
   134bc:	mov	r4, r0
   134c0:	b	1243c <__assert_fail@plt+0x728>
   134c4:	mov	fp, r1
   134c8:	mov	r4, #1
   134cc:	b	12fcc <__assert_fail@plt+0x12b8>
   134d0:	mvn	r4, #0
   134d4:	ldr	r3, [r6, #88]	; 0x58
   134d8:	cmp	r3, #0
   134dc:	bne	130cc <__assert_fail@plt+0x13b8>
   134e0:	b	130c4 <__assert_fail@plt+0x13b0>
   134e4:	ldr	r1, [pc, #-1720]	; 12e34 <__assert_fail@plt+0x1120>
   134e8:	mov	r2, #5
   134ec:	mov	r0, #0
   134f0:	bl	118d0 <dcgettext@plt>
   134f4:	ldr	r2, [r6, #84]	; 0x54
   134f8:	mov	r1, r0
   134fc:	mov	r0, #1
   13500:	bl	11948 <err@plt>
   13504:	ldrsb	r3, [r2, #1]
   13508:	cmp	r3, #0
   1350c:	beq	131a4 <__assert_fail@plt+0x1490>
   13510:	add	r3, r2, #1
   13514:	mov	r0, r3
   13518:	mov	r2, #10
   1351c:	add	r1, sp, #44	; 0x2c
   13520:	str	r3, [sp, #28]
   13524:	str	ip, [sp, #44]	; 0x2c
   13528:	bl	117f8 <strtol@plt>
   1352c:	ldr	r3, [sp, #16]
   13530:	ldr	r2, [r3]
   13534:	cmp	r2, #0
   13538:	str	r0, [sp, #68]	; 0x44
   1353c:	bne	131a4 <__assert_fail@plt+0x1490>
   13540:	ldr	r2, [sp, #44]	; 0x2c
   13544:	ldr	r3, [sp, #28]
   13548:	b	13484 <__assert_fail@plt+0x1770>
   1354c:	mov	r2, #5
   13550:	ldr	r1, [pc, #-1824]	; 12e38 <__assert_fail@plt+0x1124>
   13554:	b	130dc <__assert_fail@plt+0x13c8>
   13558:	mov	r2, #5
   1355c:	ldr	r1, [pc, #-1832]	; 12e3c <__assert_fail@plt+0x1128>
   13560:	mov	r0, #0
   13564:	bl	118d0 <dcgettext@plt>
   13568:	mov	r2, r4
   1356c:	mov	r1, r0
   13570:	mov	r0, #1
   13574:	bl	11c0c <errx@plt>
   13578:	ldr	r1, [pc, #-1856]	; 12e40 <__assert_fail@plt+0x112c>
   1357c:	mov	r2, #5
   13580:	mov	r0, #0
   13584:	bl	118d0 <dcgettext@plt>
   13588:	mov	r1, r0
   1358c:	mov	r0, #1
   13590:	bl	11c0c <errx@plt>
   13594:	ldr	r1, [pc, #-1880]	; 12e44 <__assert_fail@plt+0x1130>
   13598:	mov	r0, #1
   1359c:	bl	11948 <err@plt>
   135a0:	mov	r2, #5
   135a4:	ldr	r1, [pc, #-1892]	; 12e48 <__assert_fail@plt+0x1134>
   135a8:	mov	r0, r5
   135ac:	bl	118d0 <dcgettext@plt>
   135b0:	bl	11aec <warnx@plt>
   135b4:	ldr	r3, [pc, #-1904]	; 12e4c <__assert_fail@plt+0x1138>
   135b8:	mov	r0, r5
   135bc:	mov	r2, #5
   135c0:	ldr	r1, [pc, #-1912]	; 12e50 <__assert_fail@plt+0x113c>
   135c4:	b	12a0c <__assert_fail@plt+0xcf8>
   135c8:	bl	118e8 <__stack_chk_fail@plt>
   135cc:	mov	fp, #0
   135d0:	mov	lr, #0
   135d4:	pop	{r1}		; (ldr r1, [sp], #4)
   135d8:	mov	r2, sp
   135dc:	push	{r2}		; (str r2, [sp, #-4]!)
   135e0:	push	{r0}		; (str r0, [sp, #-4]!)
   135e4:	ldr	ip, [pc, #16]	; 135fc <__assert_fail@plt+0x18e8>
   135e8:	push	{ip}		; (str ip, [sp, #-4]!)
   135ec:	ldr	r0, [pc, #12]	; 13600 <__assert_fail@plt+0x18ec>
   135f0:	ldr	r3, [pc, #12]	; 13604 <__assert_fail@plt+0x18f0>
   135f4:	bl	11a38 <__libc_start_main@plt>
   135f8:	bl	11cd8 <abort@plt>
   135fc:	andeq	sl, r1, ip, lsr r0
   13600:	andeq	r1, r1, r0, lsr #26
   13604:	ldrdeq	r9, [r1], -ip
   13608:	ldr	r3, [pc, #20]	; 13624 <__assert_fail@plt+0x1910>
   1360c:	ldr	r2, [pc, #20]	; 13628 <__assert_fail@plt+0x1914>
   13610:	add	r3, pc, r3
   13614:	ldr	r2, [r3, r2]
   13618:	cmp	r2, #0
   1361c:	bxeq	lr
   13620:	b	11a74 <__gmon_start__@plt>
   13624:	andeq	r9, r1, r4, lsl #16
   13628:	ldrdeq	r0, [r0], -ip
   1362c:	ldr	r0, [pc, #24]	; 1364c <__assert_fail@plt+0x1938>
   13630:	ldr	r3, [pc, #24]	; 13650 <__assert_fail@plt+0x193c>
   13634:	cmp	r3, r0
   13638:	bxeq	lr
   1363c:	ldr	r3, [pc, #16]	; 13654 <__assert_fail@plt+0x1940>
   13640:	cmp	r3, #0
   13644:	bxeq	lr
   13648:	bx	r3
   1364c:	andeq	pc, r2, r8, lsl #1
   13650:	andeq	pc, r2, r8, lsl #1
   13654:	andeq	r0, r0, r0
   13658:	ldr	r0, [pc, #36]	; 13684 <__assert_fail@plt+0x1970>
   1365c:	ldr	r1, [pc, #36]	; 13688 <__assert_fail@plt+0x1974>
   13660:	sub	r1, r1, r0
   13664:	asr	r1, r1, #2
   13668:	add	r1, r1, r1, lsr #31
   1366c:	asrs	r1, r1, #1
   13670:	bxeq	lr
   13674:	ldr	r3, [pc, #16]	; 1368c <__assert_fail@plt+0x1978>
   13678:	cmp	r3, #0
   1367c:	bxeq	lr
   13680:	bx	r3
   13684:	andeq	pc, r2, r8, lsl #1
   13688:	andeq	pc, r2, r8, lsl #1
   1368c:	andeq	r0, r0, r0
   13690:	push	{r4, lr}
   13694:	ldr	r4, [pc, #24]	; 136b4 <__assert_fail@plt+0x19a0>
   13698:	ldrb	r3, [r4]
   1369c:	cmp	r3, #0
   136a0:	popne	{r4, pc}
   136a4:	bl	1362c <__assert_fail@plt+0x1918>
   136a8:	mov	r3, #1
   136ac:	strb	r3, [r4]
   136b0:	pop	{r4, pc}
   136b4:	andeq	pc, r2, r4, lsr #1
   136b8:	b	13658 <__assert_fail@plt+0x1944>
   136bc:	andeq	r0, r0, r0
   136c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   136c4:	sub	sp, sp, #12
   136c8:	ldr	r5, [pc, #160]	; 13770 <__assert_fail@plt+0x1a5c>
   136cc:	mov	r6, #0
   136d0:	subs	r4, r0, #0
   136d4:	ldr	r3, [r5]
   136d8:	str	r6, [sp]
   136dc:	str	r3, [sp, #4]
   136e0:	beq	13714 <__assert_fail@plt+0x1a00>
   136e4:	mov	r8, r1
   136e8:	mov	r9, r2
   136ec:	bl	11b1c <__errno_location@plt>
   136f0:	mov	r2, #10
   136f4:	mov	r1, sp
   136f8:	mov	r7, r0
   136fc:	str	r6, [r0]
   13700:	mov	r0, r4
   13704:	bl	117f8 <strtol@plt>
   13708:	ldr	r3, [r7]
   1370c:	cmp	r3, r6
   13710:	beq	13730 <__assert_fail@plt+0x1a1c>
   13714:	ldr	r2, [sp, #4]
   13718:	ldr	r3, [r5]
   1371c:	mov	r0, r4
   13720:	cmp	r2, r3
   13724:	bne	1376c <__assert_fail@plt+0x1a58>
   13728:	add	sp, sp, #12
   1372c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13730:	ldr	r3, [sp]
   13734:	cmp	r3, r6
   13738:	cmpne	r3, r4
   1373c:	bls	13714 <__assert_fail@plt+0x1a00>
   13740:	asr	r2, r0, #3
   13744:	and	r2, r2, #127	; 0x7f
   13748:	and	r0, r0, #7
   1374c:	str	r2, [r8]
   13750:	str	r0, [r9]
   13754:	ldr	r2, [r8]
   13758:	add	r4, r3, #1
   1375c:	cmp	r2, #13
   13760:	mvncs	r2, #0
   13764:	str	r2, [r8]
   13768:	b	13714 <__assert_fail@plt+0x1a00>
   1376c:	bl	118e8 <__stack_chk_fail@plt>
   13770:	andeq	ip, r2, r8, lsl #26
   13774:	push	{r4, r5, r6, r7, r8, r9, lr}
   13778:	sub	sp, sp, #12
   1377c:	ldr	r8, [pc, #320]	; 138c4 <__assert_fail@plt+0x1bb0>
   13780:	subs	r7, r0, #0
   13784:	ldr	r3, [r8]
   13788:	str	r3, [sp, #4]
   1378c:	beq	138b8 <__assert_fail@plt+0x1ba4>
   13790:	cmp	r1, #0
   13794:	mov	r6, r1
   13798:	beq	13828 <__assert_fail@plt+0x1b14>
   1379c:	bl	11b1c <__errno_location@plt>
   137a0:	mov	r9, #0
   137a4:	str	r9, [r0]
   137a8:	mov	r5, r0
   137ac:	bl	11a8c <__ctype_b_loc@plt>
   137b0:	ldrsb	r3, [r7]
   137b4:	lsl	r3, r3, #1
   137b8:	ldr	r2, [r0]
   137bc:	ldrh	r4, [r2, r3]
   137c0:	ands	r4, r4, #2048	; 0x800
   137c4:	bne	13834 <__assert_fail@plt+0x1b20>
   137c8:	ldr	r5, [pc, #248]	; 138c8 <__assert_fail@plt+0x1bb4>
   137cc:	ldr	r9, [pc, #248]	; 138cc <__assert_fail@plt+0x1bb8>
   137d0:	b	137d8 <__assert_fail@plt+0x1ac4>
   137d4:	ldr	r5, [r9, r4, lsl #3]
   137d8:	mov	r2, r6
   137dc:	mov	r1, r5
   137e0:	mov	r0, r7
   137e4:	bl	11b28 <strncasecmp@plt>
   137e8:	cmp	r0, #0
   137ec:	bne	137fc <__assert_fail@plt+0x1ae8>
   137f0:	ldrsb	r3, [r5, r6]
   137f4:	cmp	r3, #0
   137f8:	beq	1389c <__assert_fail@plt+0x1b88>
   137fc:	add	r4, r4, #1
   13800:	cmp	r4, #12
   13804:	bne	137d4 <__assert_fail@plt+0x1ac0>
   13808:	mov	r2, #5
   1380c:	ldr	r1, [pc, #188]	; 138d0 <__assert_fail@plt+0x1bbc>
   13810:	mov	r0, #0
   13814:	bl	118d0 <dcgettext@plt>
   13818:	mov	r2, r7
   1381c:	mov	r1, r0
   13820:	mov	r0, #1
   13824:	bl	11c0c <errx@plt>
   13828:	bl	11ac8 <strlen@plt>
   1382c:	mov	r6, r0
   13830:	b	1379c <__assert_fail@plt+0x1a88>
   13834:	mov	r2, #10
   13838:	mov	r1, sp
   1383c:	mov	r0, r7
   13840:	str	r9, [sp]
   13844:	bl	117f8 <strtol@plt>
   13848:	ldr	r3, [r5]
   1384c:	cmp	r3, r9
   13850:	bne	1387c <__assert_fail@plt+0x1b68>
   13854:	ldr	r3, [sp]
   13858:	cmp	r3, r9
   1385c:	cmpne	r3, r7
   13860:	bls	13808 <__assert_fail@plt+0x1af4>
   13864:	sub	r3, r3, r7
   13868:	cmp	r3, r6
   1386c:	bne	13808 <__assert_fail@plt+0x1af4>
   13870:	cmp	r0, #11
   13874:	bhi	13808 <__assert_fail@plt+0x1af4>
   13878:	b	138a0 <__assert_fail@plt+0x1b8c>
   1387c:	mov	r2, #5
   13880:	ldr	r1, [pc, #76]	; 138d4 <__assert_fail@plt+0x1bc0>
   13884:	mov	r0, r9
   13888:	bl	118d0 <dcgettext@plt>
   1388c:	mov	r2, r7
   13890:	mov	r1, r0
   13894:	mov	r0, #1
   13898:	bl	11948 <err@plt>
   1389c:	mov	r0, r4
   138a0:	ldr	r2, [sp, #4]
   138a4:	ldr	r3, [r8]
   138a8:	cmp	r2, r3
   138ac:	bne	138c0 <__assert_fail@plt+0x1bac>
   138b0:	add	sp, sp, #12
   138b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   138b8:	mvn	r0, #0
   138bc:	b	138a0 <__assert_fail@plt+0x1b8c>
   138c0:	bl	118e8 <__stack_chk_fail@plt>
   138c4:	andeq	ip, r2, r8, lsl #26
   138c8:	andeq	sl, r1, r4, lsr #11
   138cc:	andeq	sl, r1, r4, rrx
   138d0:	andeq	sl, r1, ip, lsr #11
   138d4:	andeq	sl, r1, r4, asr #11
   138d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138dc:	sub	sp, sp, #8
   138e0:	ldr	r7, [pc, #332]	; 13a34 <__assert_fail@plt+0x1d20>
   138e4:	subs	r6, r0, #0
   138e8:	ldr	r3, [r7]
   138ec:	str	r3, [sp, #4]
   138f0:	beq	13a28 <__assert_fail@plt+0x1d14>
   138f4:	cmp	r1, #0
   138f8:	mov	r5, r1
   138fc:	movne	r8, #0
   13900:	beq	13990 <__assert_fail@plt+0x1c7c>
   13904:	bl	11b1c <__errno_location@plt>
   13908:	mov	sl, #0
   1390c:	str	sl, [r0]
   13910:	mov	r9, r0
   13914:	bl	11a8c <__ctype_b_loc@plt>
   13918:	ldrsb	r3, [r6]
   1391c:	lsl	r3, r3, #1
   13920:	ldr	r2, [r0]
   13924:	ldrh	r4, [r2, r3]
   13928:	ands	r4, r4, #2048	; 0x800
   1392c:	bne	139a0 <__assert_fail@plt+0x1c8c>
   13930:	ldr	r9, [pc, #256]	; 13a38 <__assert_fail@plt+0x1d24>
   13934:	ldr	sl, [pc, #256]	; 13a3c <__assert_fail@plt+0x1d28>
   13938:	b	13940 <__assert_fail@plt+0x1c2c>
   1393c:	ldr	r9, [sl, r4, lsl #3]
   13940:	mov	r2, r5
   13944:	mov	r1, r9
   13948:	mov	r0, r6
   1394c:	bl	11b28 <strncasecmp@plt>
   13950:	cmp	r0, #0
   13954:	bne	13964 <__assert_fail@plt+0x1c50>
   13958:	ldrsb	r3, [r9, r5]
   1395c:	cmp	r3, #0
   13960:	beq	13a0c <__assert_fail@plt+0x1cf8>
   13964:	add	r4, r4, #1
   13968:	cmp	r4, #8
   1396c:	bne	1393c <__assert_fail@plt+0x1c28>
   13970:	mov	r2, #5
   13974:	ldr	r1, [pc, #196]	; 13a40 <__assert_fail@plt+0x1d2c>
   13978:	mov	r0, #0
   1397c:	bl	118d0 <dcgettext@plt>
   13980:	mov	r2, r6
   13984:	mov	r1, r0
   13988:	mov	r0, #1
   1398c:	bl	11c0c <errx@plt>
   13990:	bl	11ac8 <strlen@plt>
   13994:	mov	r8, #1
   13998:	mov	r5, r0
   1399c:	b	13904 <__assert_fail@plt+0x1bf0>
   139a0:	mov	r2, #10
   139a4:	mov	r1, sp
   139a8:	mov	r0, r6
   139ac:	str	sl, [sp]
   139b0:	bl	117f8 <strtol@plt>
   139b4:	ldr	r3, [r9]
   139b8:	cmp	r3, sl
   139bc:	bne	139ec <__assert_fail@plt+0x1cd8>
   139c0:	ldr	r3, [sp]
   139c4:	cmp	r3, sl
   139c8:	cmpne	r3, r6
   139cc:	bls	13970 <__assert_fail@plt+0x1c5c>
   139d0:	sub	r3, r3, r6
   139d4:	cmp	r3, r5
   139d8:	bne	13970 <__assert_fail@plt+0x1c5c>
   139dc:	sub	r8, r0, r8
   139e0:	cmp	r8, #7
   139e4:	bhi	13970 <__assert_fail@plt+0x1c5c>
   139e8:	b	13a10 <__assert_fail@plt+0x1cfc>
   139ec:	mov	r2, #5
   139f0:	ldr	r1, [pc, #76]	; 13a44 <__assert_fail@plt+0x1d30>
   139f4:	mov	r0, sl
   139f8:	bl	118d0 <dcgettext@plt>
   139fc:	mov	r2, r6
   13a00:	mov	r1, r0
   13a04:	mov	r0, #1
   13a08:	bl	11948 <err@plt>
   13a0c:	add	r0, r8, r4
   13a10:	ldr	r2, [sp, #4]
   13a14:	ldr	r3, [r7]
   13a18:	cmp	r2, r3
   13a1c:	bne	13a30 <__assert_fail@plt+0x1d1c>
   13a20:	add	sp, sp, #8
   13a24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a28:	mvn	r0, #0
   13a2c:	b	13a10 <__assert_fail@plt+0x1cfc>
   13a30:	bl	118e8 <__stack_chk_fail@plt>
   13a34:	andeq	ip, r2, r8, lsl #26
   13a38:	andeq	sl, r1, r4, ror #11
   13a3c:	andeq	sl, r1, r4, asr #1
   13a40:	andeq	sl, r1, ip, ror #11
   13a44:	andeq	sl, r1, r0, lsl #12
   13a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a4c:	subs	r7, r1, #0
   13a50:	ldr	r1, [pc, #400]	; 13be8 <__assert_fail@plt+0x1ed4>
   13a54:	sub	sp, sp, #28
   13a58:	mov	r6, #0
   13a5c:	ldr	r1, [r1]
   13a60:	str	r6, [sp, #16]
   13a64:	str	r1, [sp, #20]
   13a68:	str	r6, [sp, #12]
   13a6c:	beq	13af8 <__assert_fail@plt+0x1de4>
   13a70:	ldr	r9, [pc, #372]	; 13bec <__assert_fail@plt+0x1ed8>
   13a74:	mov	sl, r0
   13a78:	mov	fp, r2
   13a7c:	mov	r8, r3
   13a80:	add	r5, sl, r6
   13a84:	mov	r1, r5
   13a88:	add	r3, sp, #12
   13a8c:	sub	r2, r7, r6
   13a90:	add	r0, sp, #8
   13a94:	bl	119d8 <mbrtowc@plt>
   13a98:	subs	r4, r0, #0
   13a9c:	beq	13af8 <__assert_fail@plt+0x1de4>
   13aa0:	cmn	r4, #2
   13aa4:	bcs	13b70 <__assert_fail@plt+0x1e5c>
   13aa8:	cmp	r4, #1
   13aac:	beq	13b14 <__assert_fail@plt+0x1e00>
   13ab0:	ldr	r0, [sp, #8]
   13ab4:	bl	11960 <iswprint@plt>
   13ab8:	add	r6, r6, r4
   13abc:	cmp	r0, #0
   13ac0:	bne	13b18 <__assert_fail@plt+0x1e04>
   13ac4:	sub	r5, r5, #1
   13ac8:	add	r4, r5, r4
   13acc:	ldrsb	r3, [r5, #1]!
   13ad0:	mov	r2, r9
   13ad4:	mov	r1, #1
   13ad8:	mov	r0, r8
   13adc:	bl	11ba0 <__fprintf_chk@plt>
   13ae0:	cmp	r0, #0
   13ae4:	blt	13b58 <__assert_fail@plt+0x1e44>
   13ae8:	cmp	r4, r5
   13aec:	bne	13acc <__assert_fail@plt+0x1db8>
   13af0:	cmp	r7, r6
   13af4:	bhi	13a80 <__assert_fail@plt+0x1d6c>
   13af8:	ldr	r3, [pc, #232]	; 13be8 <__assert_fail@plt+0x1ed4>
   13afc:	ldr	r2, [sp, #20]
   13b00:	ldr	r3, [r3]
   13b04:	cmp	r2, r3
   13b08:	bne	13bc8 <__assert_fail@plt+0x1eb4>
   13b0c:	add	sp, sp, #28
   13b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b14:	add	r6, r6, #1
   13b18:	ldrsb	r3, [r5]
   13b1c:	mov	r0, r5
   13b20:	cmp	r3, #10
   13b24:	bne	13b38 <__assert_fail@plt+0x1e24>
   13b28:	ldrsb	r3, [r5, #1]
   13b2c:	cmp	r3, #0
   13b30:	cmpne	fp, #0
   13b34:	bne	13b88 <__assert_fail@plt+0x1e74>
   13b38:	mov	r2, r4
   13b3c:	mov	r3, r8
   13b40:	mov	r1, #1
   13b44:	bl	11990 <fwrite@plt>
   13b48:	subs	r4, r0, r4
   13b4c:	movne	r4, #1
   13b50:	cmp	r4, #0
   13b54:	beq	13af0 <__assert_fail@plt+0x1ddc>
   13b58:	bl	11b1c <__errno_location@plt>
   13b5c:	ldr	r3, [r0]
   13b60:	cmp	r3, #32
   13b64:	bne	13bcc <__assert_fail@plt+0x1eb8>
   13b68:	mov	r0, #0
   13b6c:	bl	11aa4 <exit@plt>
   13b70:	mov	r3, #0
   13b74:	add	r6, r6, #1
   13b78:	str	r3, [sp, #12]
   13b7c:	str	r3, [sp, #16]
   13b80:	mov	r4, #1
   13b84:	b	13ac4 <__assert_fail@plt+0x1db0>
   13b88:	mov	r2, r4
   13b8c:	mov	r3, r8
   13b90:	mov	r1, #1
   13b94:	bl	11990 <fwrite@plt>
   13b98:	ldr	r3, [pc, #80]	; 13bf0 <__assert_fail@plt+0x1edc>
   13b9c:	ldr	r2, [pc, #80]	; 13bf4 <__assert_fail@plt+0x1ee0>
   13ba0:	str	r3, [sp]
   13ba4:	mov	r1, #1
   13ba8:	mov	r3, fp
   13bac:	subs	r4, r0, r4
   13bb0:	mov	r0, r8
   13bb4:	movne	r4, #1
   13bb8:	bl	11ba0 <__fprintf_chk@plt>
   13bbc:	cmp	fp, r0
   13bc0:	beq	13b50 <__assert_fail@plt+0x1e3c>
   13bc4:	b	13b58 <__assert_fail@plt+0x1e44>
   13bc8:	bl	118e8 <__stack_chk_fail@plt>
   13bcc:	ldr	r1, [pc, #36]	; 13bf8 <__assert_fail@plt+0x1ee4>
   13bd0:	mov	r2, #5
   13bd4:	mov	r0, #0
   13bd8:	bl	118d0 <dcgettext@plt>
   13bdc:	mov	r1, r0
   13be0:	mov	r0, #1
   13be4:	bl	11948 <err@plt>
   13be8:	andeq	ip, r2, r8, lsl #26
   13bec:	andeq	sl, r1, ip, lsl r6
   13bf0:	strdeq	fp, [r1], -r4
   13bf4:	andeq	sl, r1, r8, lsr #12
   13bf8:	andeq	sl, r1, ip, lsr #12
   13bfc:	push	{r4, r5, r6, r7, r8, lr}
   13c00:	ldr	r4, [pc, #56]	; 13c40 <__assert_fail@plt+0x1f2c>
   13c04:	ldr	r7, [pc, #56]	; 13c44 <__assert_fail@plt+0x1f30>
   13c08:	add	r6, r4, #84	; 0x54
   13c0c:	b	13c20 <__assert_fail@plt+0x1f0c>
   13c10:	bl	11b1c <__errno_location@plt>
   13c14:	ldr	r3, [r0]
   13c18:	cmp	r3, #32
   13c1c:	bne	13c38 <__assert_fail@plt+0x1f24>
   13c20:	mov	r2, r7
   13c24:	mov	r1, r6
   13c28:	ldr	r0, [r4, #76]	; 0x4c
   13c2c:	bl	11810 <read@plt>
   13c30:	subs	r5, r0, #0
   13c34:	blt	13c10 <__assert_fail@plt+0x1efc>
   13c38:	mov	r0, r5
   13c3c:	pop	{r4, r5, r6, r7, r8, pc}
   13c40:	andeq	sp, r2, r8
   13c44:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   13c48:	ldr	r3, [pc, #2008]	; 14428 <__assert_fail@plt+0x2714>
   13c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c50:	sub	sp, sp, #316	; 0x13c
   13c54:	ldrh	r6, [r3, #160]	; 0xa0
   13c58:	ldr	r3, [pc, #1996]	; 1442c <__assert_fail@plt+0x2718>
   13c5c:	ldr	r4, [pc, #1996]	; 14430 <__assert_fail@plt+0x271c>
   13c60:	mov	r2, #30
   13c64:	ldr	r3, [r3]
   13c68:	mov	r1, #0
   13c6c:	mov	sl, r0
   13c70:	add	r5, r4, #8192	; 0x2000
   13c74:	add	r0, sp, #86	; 0x56
   13c78:	str	r3, [sp, #308]	; 0x134
   13c7c:	strh	r6, [sp, #84]	; 0x54
   13c80:	bl	11b64 <memset@plt>
   13c84:	mov	r2, #62	; 0x3e
   13c88:	mov	r1, #0
   13c8c:	add	r0, sp, #118	; 0x76
   13c90:	strh	r6, [sp, #116]	; 0x74
   13c94:	bl	11b64 <memset@plt>
   13c98:	ldrb	r2, [r5, #100]	; 0x64
   13c9c:	tst	r2, #4
   13ca0:	beq	13d7c <__assert_fail@plt+0x2068>
   13ca4:	ldr	r1, [sl, #12]
   13ca8:	cmp	r1, #0
   13cac:	blt	13d60 <__assert_fail@plt+0x204c>
   13cb0:	ldr	r3, [sl, #8]
   13cb4:	cmp	r3, #0
   13cb8:	add	r0, r3, #7
   13cbc:	movge	r0, r3
   13cc0:	rsbs	ip, r3, #0
   13cc4:	asr	r0, r0, #3
   13cc8:	and	ip, ip, #7
   13ccc:	ldrsb	r0, [r4, r0]
   13cd0:	and	r3, r3, #7
   13cd4:	rsbpl	r3, ip, #0
   13cd8:	asr	r3, r0, r3
   13cdc:	tst	r3, #1
   13ce0:	beq	13d60 <__assert_fail@plt+0x204c>
   13ce4:	tst	r2, #8
   13ce8:	bne	13d90 <__assert_fail@plt+0x207c>
   13cec:	ldr	r7, [sl, #4]
   13cf0:	cmp	r7, #0
   13cf4:	beq	13db4 <__assert_fail@plt+0x20a0>
   13cf8:	tst	r2, #2
   13cfc:	bne	144f0 <__assert_fail@plt+0x27dc>
   13d00:	tst	r2, #16
   13d04:	beq	13d14 <__assert_fail@plt+0x2000>
   13d08:	ldr	r3, [sl, #8]
   13d0c:	cmp	r3, #7
   13d10:	bls	13dc8 <__assert_fail@plt+0x20b4>
   13d14:	ldr	r6, [r5, #96]	; 0x60
   13d18:	cmp	r6, #7
   13d1c:	ldrls	pc, [pc, r6, lsl #2]
   13d20:	b	14600 <__assert_fail@plt+0x28ec>
   13d24:			; <UNDEFINED> instruction: 0x000141bc
   13d28:	andeq	r4, r1, r4, asr r1
   13d2c:	muleq	r1, r8, r0
   13d30:			; <UNDEFINED> instruction: 0x000142bc
   13d34:	andeq	r4, r1, r8, asr #3
   13d38:	andeq	r4, r1, r8, lsr r3
   13d3c:	andeq	r4, r1, r4, lsl r0
   13d40:	andeq	r3, r1, ip, lsl #28
   13d44:	ldr	r1, [r6]
   13d48:	ldr	r0, [sp, #28]
   13d4c:	str	r1, [sp, #24]
   13d50:	bl	11840 <free@plt>
   13d54:	ldr	r1, [sp, #24]
   13d58:	mov	r0, #10
   13d5c:	bl	11c60 <putc@plt>
   13d60:	ldr	r3, [pc, #1732]	; 1442c <__assert_fail@plt+0x2718>
   13d64:	ldr	r2, [sp, #308]	; 0x134
   13d68:	ldr	r3, [r3]
   13d6c:	cmp	r2, r3
   13d70:	bne	145f0 <__assert_fail@plt+0x28dc>
   13d74:	add	sp, sp, #316	; 0x13c
   13d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d7c:	tst	r2, #8
   13d80:	beq	13cec <__assert_fail@plt+0x1fd8>
   13d84:	ldr	r1, [sl, #12]
   13d88:	cmp	r1, #0
   13d8c:	blt	13d60 <__assert_fail@plt+0x204c>
   13d90:	add	r3, r4, r1, asr #3
   13d94:	and	r1, r1, #7
   13d98:	ldrsb	r3, [r3, #2]
   13d9c:	asr	r1, r3, r1
   13da0:	tst	r1, #1
   13da4:	beq	13d60 <__assert_fail@plt+0x204c>
   13da8:	ldr	r7, [sl, #4]
   13dac:	cmp	r7, #0
   13db0:	bne	13cf8 <__assert_fail@plt+0x1fe4>
   13db4:	ldr	r3, [pc, #1656]	; 14434 <__assert_fail@plt+0x2720>
   13db8:	mov	r0, #10
   13dbc:	ldr	r1, [r3]
   13dc0:	bl	11c60 <putc@plt>
   13dc4:	b	13d60 <__assert_fail@plt+0x204c>
   13dc8:	ldr	r2, [sl, #12]
   13dcc:	cmp	r2, #11
   13dd0:	bhi	13d14 <__assert_fail@plt+0x2000>
   13dd4:	ldr	r1, [pc, #1612]	; 14428 <__assert_fail@plt+0x2714>
   13dd8:	add	r3, r1, r3, lsl #3
   13ddc:	ldr	r1, [r1, r2, lsl #3]
   13de0:	ldr	r0, [r3, #96]	; 0x60
   13de4:	ldr	r2, [pc, #1612]	; 14438 <__assert_fail@plt+0x2724>
   13de8:	mov	r3, #32
   13dec:	str	r0, [sp, #8]
   13df0:	str	r1, [sp, #4]
   13df4:	str	r2, [sp]
   13df8:	mov	r1, r3
   13dfc:	mov	r2, #1
   13e00:	add	r0, sp, #84	; 0x54
   13e04:	bl	11cfc <__snprintf_chk@plt>
   13e08:	b	13d14 <__assert_fail@plt+0x2000>
   13e0c:	ldr	r0, [r4, #56]	; 0x38
   13e10:	ldr	r3, [sl, #16]
   13e14:	add	r6, sp, #180	; 0xb4
   13e18:	ldr	ip, [sl, #20]
   13e1c:	add	r0, r0, r3
   13e20:	mov	r2, r6
   13e24:	mov	r3, #128	; 0x80
   13e28:	mov	r1, #55	; 0x37
   13e2c:	str	r0, [sp, #40]	; 0x28
   13e30:	add	r0, sp, #40	; 0x28
   13e34:	str	ip, [sp, #44]	; 0x2c
   13e38:	bl	17e4c <__assert_fail@plt+0x6138>
   13e3c:	mov	r4, #0
   13e40:	ldr	r2, [pc, #1524]	; 1443c <__assert_fail@plt+0x2728>
   13e44:	mov	r3, #64	; 0x40
   13e48:	str	r2, [sp]
   13e4c:	mov	r1, r3
   13e50:	mov	r2, #1
   13e54:	cmp	r0, r4
   13e58:	movne	r6, r4
   13e5c:	str	r6, [sp, #4]
   13e60:	add	r0, sp, #116	; 0x74
   13e64:	bl	11cfc <__snprintf_chk@plt>
   13e68:	mov	r6, r0
   13e6c:	str	r0, [r5, #104]	; 0x68
   13e70:	add	r0, sp, #84	; 0x54
   13e74:	bl	11ac8 <strlen@plt>
   13e78:	add	r0, r0, r6
   13e7c:	str	r0, [r5, #104]	; 0x68
   13e80:	cmp	r4, #0
   13e84:	movne	r3, #2
   13e88:	mov	r4, #0
   13e8c:	moveq	r3, #1
   13e90:	ldr	r6, [pc, #1436]	; 14434 <__assert_fail@plt+0x2720>
   13e94:	str	r3, [sp, #24]
   13e98:	str	r4, [sp, #28]
   13e9c:	b	13f3c <__assert_fail@plt+0x2228>
   13ea0:	ldr	r3, [sl, #8]
   13ea4:	ldr	r8, [r6]
   13ea8:	sub	r3, r3, #1
   13eac:	cmp	r3, #3
   13eb0:	bhi	144c0 <__assert_fail@plt+0x27ac>
   13eb4:	ldr	r2, [pc, #1388]	; 14428 <__assert_fail@plt+0x2714>
   13eb8:	add	r3, r2, r3, lsl #2
   13ebc:	ldr	r3, [r3, #256]	; 0x100
   13ec0:	cmp	r3, #0
   13ec4:	blt	14558 <__assert_fail@plt+0x2844>
   13ec8:	ldr	r2, [pc, #1368]	; 14428 <__assert_fail@plt+0x2714>
   13ecc:	add	r3, r2, r3, lsl #3
   13ed0:	mov	r2, r8
   13ed4:	ldrd	r0, [r3, #192]	; 0xc0
   13ed8:	bl	197ac <__assert_fail@plt+0x7a98>
   13edc:	mov	r0, r4
   13ee0:	mov	r1, r7
   13ee4:	ldr	r3, [r6]
   13ee8:	ldr	r2, [r5, #104]	; 0x68
   13eec:	bl	13a48 <__assert_fail@plt+0x1d34>
   13ef0:	ldr	r0, [r6]
   13ef4:	bl	197cc <__assert_fail@plt+0x7ab8>
   13ef8:	ldrsb	r3, [r5, #100]	; 0x64
   13efc:	cmp	r3, #0
   13f00:	bge	14394 <__assert_fail@plt+0x2680>
   13f04:	ldr	r1, [pc, #1332]	; 14440 <__assert_fail@plt+0x272c>
   13f08:	mov	r0, #0
   13f0c:	bl	11be8 <strtok@plt>
   13f10:	subs	r4, r0, #0
   13f14:	beq	13d44 <__assert_fail@plt+0x2030>
   13f18:	ldrsb	r3, [r4]
   13f1c:	ldr	r1, [r6]
   13f20:	cmp	r3, #0
   13f24:	beq	13d48 <__assert_fail@plt+0x2034>
   13f28:	mov	r0, #10
   13f2c:	bl	11c60 <putc@plt>
   13f30:	mov	r0, r4
   13f34:	bl	11ac8 <strlen@plt>
   13f38:	mov	r7, r0
   13f3c:	ldrsb	r3, [sp, #84]	; 0x54
   13f40:	cmp	r3, #0
   13f44:	bne	143e0 <__assert_fail@plt+0x26cc>
   13f48:	ldrsb	r2, [sp, #116]	; 0x74
   13f4c:	ldrb	r3, [r5, #100]	; 0x64
   13f50:	cmp	r2, #0
   13f54:	beq	13fa4 <__assert_fail@plt+0x2290>
   13f58:	tst	r3, #64	; 0x40
   13f5c:	beq	13f78 <__assert_fail@plt+0x2264>
   13f60:	ldr	r2, [sp, #24]
   13f64:	ldr	r3, [pc, #1212]	; 14428 <__assert_fail@plt+0x2714>
   13f68:	add	r3, r3, r2, lsl #3
   13f6c:	ldr	r2, [r6]
   13f70:	ldrd	r0, [r3, #192]	; 0xc0
   13f74:	bl	197ac <__assert_fail@plt+0x7a98>
   13f78:	ldr	r3, [r5, #96]	; 0x60
   13f7c:	cmp	r3, #4
   13f80:	bne	143f0 <__assert_fail@plt+0x26dc>
   13f84:	cmp	r4, #0
   13f88:	beq	143f0 <__assert_fail@plt+0x26dc>
   13f8c:	ldr	r1, [pc, #1200]	; 14444 <__assert_fail@plt+0x2730>
   13f90:	mov	r0, #1
   13f94:	bl	11b88 <__printf_chk@plt>
   13f98:	ldrb	r3, [r5, #100]	; 0x64
   13f9c:	tst	r3, #64	; 0x40
   13fa0:	bne	14408 <__assert_fail@plt+0x26f4>
   13fa4:	tst	r3, #128	; 0x80
   13fa8:	bne	1439c <__assert_fail@plt+0x2688>
   13fac:	ldm	sl, {r4, r7}
   13fb0:	tst	r3, #64	; 0x40
   13fb4:	beq	14374 <__assert_fail@plt+0x2660>
   13fb8:	cmp	r7, #0
   13fbc:	beq	13ea0 <__assert_fail@plt+0x218c>
   13fc0:	mov	r9, r7
   13fc4:	mov	fp, r4
   13fc8:	mov	r2, #58	; 0x3a
   13fcc:	mov	r1, r9
   13fd0:	mov	r0, fp
   13fd4:	bl	15e94 <__assert_fail@plt+0x4180>
   13fd8:	subs	r8, r0, #0
   13fdc:	beq	13ea0 <__assert_fail@plt+0x218c>
   13fe0:	sub	fp, r8, fp
   13fe4:	mvn	fp, fp
   13fe8:	adds	r9, r9, fp
   13fec:	beq	13ea0 <__assert_fail@plt+0x218c>
   13ff0:	bl	11a8c <__ctype_b_loc@plt>
   13ff4:	ldrsb	r3, [r8, #1]
   13ff8:	lsl	r3, r3, #1
   13ffc:	ldr	r2, [r0]
   14000:	ldrh	r3, [r2, r3]
   14004:	tst	r3, #1
   14008:	bne	14484 <__assert_fail@plt+0x2770>
   1400c:	add	fp, r8, #1
   14010:	b	13fc8 <__assert_fail@plt+0x22b4>
   14014:	ldr	r3, [r4, #4]
   14018:	ldr	r2, [r4, #8]
   1401c:	ldr	lr, [sl, #20]
   14020:	orrs	r1, r3, r2
   14024:	subne	r2, lr, r2
   14028:	vldrne	d4, [pc, #1000]	; 14418 <__assert_fail@plt+0x2704>
   1402c:	vmovne	s15, r2
   14030:	ldr	ip, [sl, #16]
   14034:	vldreq	d7, [pc, #996]	; 14420 <__assert_fail@plt+0x270c>
   14038:	subne	r3, ip, r3
   1403c:	vcvtne.f64.s32	d6, s15
   14040:	vmovne	s15, r3
   14044:	add	r3, sl, #16
   14048:	ldr	r2, [pc, #1016]	; 14448 <__assert_fail@plt+0x2734>
   1404c:	ldm	r3, {r0, r1}
   14050:	vcvtne.f64.s32	d7, s15
   14054:	str	lr, [sp, #8]
   14058:	ldr	lr, [pc, #1004]	; 1444c <__assert_fail@plt+0x2738>
   1405c:	vdivne.f64	d5, d6, d4
   14060:	mov	r3, #64	; 0x40
   14064:	str	ip, [sp, #4]
   14068:	mov	r4, #0
   1406c:	vaddne.f64	d7, d5, d7
   14070:	vstr	d7, [sp, #16]
   14074:	stm	r2, {r0, r1}
   14078:	str	lr, [sp]
   1407c:	mov	r1, r3
   14080:	mov	r2, #1
   14084:	add	r0, sp, #116	; 0x74
   14088:	bl	11cfc <__snprintf_chk@plt>
   1408c:	str	r0, [r5, #104]	; 0x68
   14090:	mov	r6, r0
   14094:	b	13e70 <__assert_fail@plt+0x215c>
   14098:	ldr	r2, [sl, #16]
   1409c:	ldr	r3, [r4, #56]	; 0x38
   140a0:	add	r1, sp, #40	; 0x28
   140a4:	add	r3, r3, r2
   140a8:	add	r0, sp, #36	; 0x24
   140ac:	add	r6, sp, #180	; 0xb4
   140b0:	str	r3, [sp, #36]	; 0x24
   140b4:	bl	11924 <localtime_r@plt>
   140b8:	add	r3, sp, #40	; 0x28
   140bc:	ldr	r2, [pc, #908]	; 14450 <__assert_fail@plt+0x273c>
   140c0:	mov	r1, #128	; 0x80
   140c4:	mov	r0, r6
   140c8:	bl	11a50 <strftime@plt>
   140cc:	ldr	r2, [r4, #4]
   140d0:	ldr	r1, [r4, #8]
   140d4:	cmp	r0, #0
   140d8:	strbeq	r0, [sp, #180]	; 0xb4
   140dc:	orrs	r3, r2, r1
   140e0:	beq	14540 <__assert_fail@plt+0x282c>
   140e4:	ldr	r3, [sl, #20]
   140e8:	vldr	d4, [pc, #808]	; 14418 <__assert_fail@plt+0x2704>
   140ec:	sub	r3, r3, r1
   140f0:	vmov	s12, r3
   140f4:	ldr	r3, [sl, #16]
   140f8:	sub	r3, r3, r2
   140fc:	vcvt.f64.s32	d6, s12
   14100:	vmov	s15, r3
   14104:	vcvt.f64.s32	d7, s15
   14108:	vdiv.f64	d5, d6, d4
   1410c:	vadd.f64	d7, d5, d7
   14110:	add	r3, sl, #16
   14114:	ldr	r2, [pc, #812]	; 14448 <__assert_fail@plt+0x2734>
   14118:	ldm	r3, {r0, r1}
   1411c:	ldr	ip, [pc, #816]	; 14454 <__assert_fail@plt+0x2740>
   14120:	mov	r3, #64	; 0x40
   14124:	str	r6, [sp, #4]
   14128:	vstr	d7, [sp, #8]
   1412c:	stm	r2, {r0, r1}
   14130:	str	ip, [sp]
   14134:	mov	r1, r3
   14138:	mov	r2, #1
   1413c:	add	r0, sp, #116	; 0x74
   14140:	bl	11cfc <__snprintf_chk@plt>
   14144:	mov	r4, #0
   14148:	str	r0, [r5, #104]	; 0x68
   1414c:	mov	r6, r0
   14150:	b	13e70 <__assert_fail@plt+0x215c>
   14154:	ldr	r3, [r4, #56]	; 0x38
   14158:	ldr	r2, [sl, #16]
   1415c:	add	r6, sp, #180	; 0xb4
   14160:	add	r3, r3, r2
   14164:	add	r1, sp, #40	; 0x28
   14168:	add	r0, sp, #36	; 0x24
   1416c:	str	r3, [sp, #36]	; 0x24
   14170:	bl	11924 <localtime_r@plt>
   14174:	add	r3, sp, #40	; 0x28
   14178:	mov	r0, r6
   1417c:	ldr	r2, [pc, #716]	; 14450 <__assert_fail@plt+0x273c>
   14180:	mov	r1, #128	; 0x80
   14184:	bl	11a50 <strftime@plt>
   14188:	ldr	r2, [pc, #712]	; 14458 <__assert_fail@plt+0x2744>
   1418c:	mov	r3, #64	; 0x40
   14190:	mov	r1, r3
   14194:	stm	sp, {r2, r6}
   14198:	mov	r2, #1
   1419c:	mov	r4, #0
   141a0:	cmp	r0, #0
   141a4:	strbeq	r0, [sp, #180]	; 0xb4
   141a8:	add	r0, sp, #116	; 0x74
   141ac:	bl	11cfc <__snprintf_chk@plt>
   141b0:	str	r0, [r5, #104]	; 0x68
   141b4:	mov	r6, r0
   141b8:	b	13e70 <__assert_fail@plt+0x215c>
   141bc:	mov	r4, #0
   141c0:	str	r4, [r5, #104]	; 0x68
   141c4:	b	13e70 <__assert_fail@plt+0x215c>
   141c8:	ldr	r2, [sl, #16]
   141cc:	ldr	r3, [r4, #56]	; 0x38
   141d0:	add	r1, sp, #40	; 0x28
   141d4:	add	r3, r3, r2
   141d8:	add	r0, sp, #36	; 0x24
   141dc:	str	r3, [sp, #36]	; 0x24
   141e0:	bl	11924 <localtime_r@plt>
   141e4:	ldr	r2, [r4, #4]
   141e8:	ldr	r1, [r4, #8]
   141ec:	orrs	r3, r2, r1
   141f0:	beq	14548 <__assert_fail@plt+0x2834>
   141f4:	ldr	r3, [sl, #20]
   141f8:	vldr	d4, [pc, #536]	; 14418 <__assert_fail@plt+0x2704>
   141fc:	sub	r3, r3, r1
   14200:	vmov	s12, r3
   14204:	ldr	r3, [sl, #16]
   14208:	sub	r3, r3, r2
   1420c:	vcvt.f64.s32	d6, s12
   14210:	vmov	s15, r3
   14214:	vcvt.f64.s32	d7, s15
   14218:	vdiv.f64	d5, d6, d4
   1421c:	vadd.f64	d7, d5, d7
   14220:	add	r3, sl, #16
   14224:	ldr	r2, [pc, #540]	; 14448 <__assert_fail@plt+0x2734>
   14228:	ldm	r3, {r0, r1}
   1422c:	ldr	ip, [sp, #44]	; 0x2c
   14230:	ldr	r3, [r4, #16]
   14234:	stm	r2, {r0, r1}
   14238:	cmp	ip, r3
   1423c:	bne	14250 <__assert_fail@plt+0x253c>
   14240:	ldr	r2, [sp, #48]	; 0x30
   14244:	ldr	r3, [r4, #20]
   14248:	cmp	r2, r3
   1424c:	beq	14570 <__assert_fail@plt+0x285c>
   14250:	add	r6, sp, #180	; 0xb4
   14254:	mov	r0, r6
   14258:	add	r3, sp, #40	; 0x28
   1425c:	ldr	r2, [pc, #504]	; 1445c <__assert_fail@plt+0x2748>
   14260:	mov	r1, #128	; 0x80
   14264:	bl	11a50 <strftime@plt>
   14268:	ldr	r2, [pc, #488]	; 14458 <__assert_fail@plt+0x2744>
   1426c:	mov	r3, #64	; 0x40
   14270:	mov	r1, r3
   14274:	stm	sp, {r2, r6}
   14278:	mov	r2, #1
   1427c:	mov	r4, #1
   14280:	cmp	r0, #0
   14284:	strbeq	r0, [sp, #180]	; 0xb4
   14288:	add	r0, sp, #116	; 0x74
   1428c:	bl	11cfc <__snprintf_chk@plt>
   14290:	mov	r6, r0
   14294:	str	r0, [r5, #104]	; 0x68
   14298:	add	ip, sp, #40	; 0x28
   1429c:	ldr	lr, [pc, #444]	; 14460 <__assert_fail@plt+0x274c>
   142a0:	ldm	ip!, {r0, r1, r2, r3}
   142a4:	stmia	lr!, {r0, r1, r2, r3}
   142a8:	ldm	ip!, {r0, r1, r2, r3}
   142ac:	stmia	lr!, {r0, r1, r2, r3}
   142b0:	ldm	ip, {r0, r1, r2}
   142b4:	stm	lr, {r0, r1, r2}
   142b8:	b	13e70 <__assert_fail@plt+0x215c>
   142bc:	ldr	r2, [r4, #4]
   142c0:	ldr	r1, [r4, #8]
   142c4:	orrs	r3, r2, r1
   142c8:	beq	14550 <__assert_fail@plt+0x283c>
   142cc:	ldr	r3, [sl, #20]
   142d0:	vldr	d4, [pc, #320]	; 14418 <__assert_fail@plt+0x2704>
   142d4:	sub	r3, r3, r1
   142d8:	vmov	s12, r3
   142dc:	ldr	r3, [sl, #16]
   142e0:	sub	r3, r3, r2
   142e4:	vcvt.f64.s32	d6, s12
   142e8:	vmov	s15, r3
   142ec:	vcvt.f64.s32	d7, s15
   142f0:	vdiv.f64	d5, d6, d4
   142f4:	vadd.f64	d7, d5, d7
   142f8:	add	r3, sl, #16
   142fc:	ldr	r2, [pc, #324]	; 14448 <__assert_fail@plt+0x2734>
   14300:	ldm	r3, {r0, r1}
   14304:	ldr	ip, [pc, #344]	; 14464 <__assert_fail@plt+0x2750>
   14308:	mov	r3, #64	; 0x40
   1430c:	vstr	d7, [sp, #8]
   14310:	stm	r2, {r0, r1}
   14314:	str	ip, [sp]
   14318:	mov	r1, r3
   1431c:	mov	r2, #1
   14320:	add	r0, sp, #116	; 0x74
   14324:	bl	11cfc <__snprintf_chk@plt>
   14328:	mov	r4, #0
   1432c:	str	r0, [r5, #104]	; 0x68
   14330:	mov	r6, r0
   14334:	b	13e70 <__assert_fail@plt+0x215c>
   14338:	ldr	r0, [sl, #20]
   1433c:	ldr	r1, [sl, #16]
   14340:	ldr	r2, [pc, #288]	; 14468 <__assert_fail@plt+0x2754>
   14344:	mov	r3, #64	; 0x40
   14348:	str	r0, [sp, #8]
   1434c:	str	r1, [sp, #4]
   14350:	str	r2, [sp]
   14354:	mov	r1, r3
   14358:	mov	r2, #1
   1435c:	add	r0, sp, #116	; 0x74
   14360:	bl	11cfc <__snprintf_chk@plt>
   14364:	mov	r4, #0
   14368:	str	r0, [r5, #104]	; 0x68
   1436c:	mov	r6, r0
   14370:	b	13e70 <__assert_fail@plt+0x215c>
   14374:	ldr	r3, [r6]
   14378:	mov	r1, r7
   1437c:	mov	r0, r4
   14380:	ldr	r2, [r5, #104]	; 0x68
   14384:	bl	13a48 <__assert_fail@plt+0x1d34>
   14388:	ldrsb	r3, [r5, #100]	; 0x64
   1438c:	cmp	r3, #0
   14390:	blt	13f04 <__assert_fail@plt+0x21f0>
   14394:	ldr	r1, [r6]
   14398:	b	13d58 <__assert_fail@plt+0x2044>
   1439c:	cmp	r4, #0
   143a0:	bne	13fb0 <__assert_fail@plt+0x229c>
   143a4:	ldr	r0, [sl]
   143a8:	cmp	r0, #0
   143ac:	beq	14538 <__assert_fail@plt+0x2824>
   143b0:	bl	118dc <strdup@plt>
   143b4:	subs	r3, r0, #0
   143b8:	str	r3, [sp, #28]
   143bc:	beq	145f4 <__assert_fail@plt+0x28e0>
   143c0:	ldr	r1, [pc, #120]	; 14440 <__assert_fail@plt+0x272c>
   143c4:	ldr	r0, [sp, #28]
   143c8:	bl	11be8 <strtok@plt>
   143cc:	mov	r4, r0
   143d0:	bl	11ac8 <strlen@plt>
   143d4:	ldrb	r3, [r5, #100]	; 0x64
   143d8:	mov	r7, r0
   143dc:	b	13fb0 <__assert_fail@plt+0x229c>
   143e0:	ldr	r1, [r6]
   143e4:	add	r0, sp, #84	; 0x54
   143e8:	bl	11cc0 <fputs@plt>
   143ec:	b	13f48 <__assert_fail@plt+0x2234>
   143f0:	ldr	r1, [r6]
   143f4:	add	r0, sp, #116	; 0x74
   143f8:	bl	11cc0 <fputs@plt>
   143fc:	ldrb	r3, [r5, #100]	; 0x64
   14400:	tst	r3, #64	; 0x40
   14404:	beq	13fa4 <__assert_fail@plt+0x2290>
   14408:	ldr	r0, [r6]
   1440c:	bl	197cc <__assert_fail@plt+0x7ab8>
   14410:	ldrb	r3, [r5, #100]	; 0x64
   14414:	b	13fa4 <__assert_fail@plt+0x2290>
   14418:	andeq	r0, r0, r0
   1441c:	smlawbmi	lr, r0, r4, r8
	...
   14428:	andeq	sl, r1, r4, rrx
   1442c:	andeq	ip, r2, r8, lsl #26
   14430:	andeq	sp, r2, r8
   14434:	muleq	r2, ip, r0
   14438:	andeq	sl, r1, r0, asr r6
   1443c:	ldrdeq	sl, [r1], -ip
   14440:	andeq	fp, r1, r8, asr #23
   14444:	andeq	sl, r1, r0, ror #13
   14448:	andeq	sp, r2, ip
   1444c:	andeq	sl, r1, r4, asr #13
   14450:	andeq	sl, r1, ip, asr r6
   14454:	andeq	sl, r1, ip, ror r6
   14458:	andeq	sl, r1, r4, ror r6
   1445c:	muleq	r1, ip, r6
   14460:	andeq	sp, r2, r4, lsl r0
   14464:	andeq	sl, r1, ip, lsl #13
   14468:	andeq	sl, r1, r0, asr #12
   1446c:	andeq	sl, r1, ip, lsr #14
   14470:	andeq	sl, r1, r4, lsr r7
   14474:	andeq	sl, r1, r8, lsl #14
   14478:	andeq	sl, r1, r4, lsl r7
   1447c:	andeq	sl, r1, r0, lsr #14
   14480:	andeq	sl, r1, ip, lsr r6
   14484:	sub	r9, r8, r4
   14488:	ldr	r2, [r6]
   1448c:	ldr	r1, [pc, #-40]	; 1446c <__assert_fail@plt+0x2758>
   14490:	ldr	r0, [pc, #-40]	; 14470 <__assert_fail@plt+0x275c>
   14494:	bl	197ac <__assert_fail@plt+0x7a98>
   14498:	mov	r0, r4
   1449c:	mov	r1, r9
   144a0:	ldr	r3, [r6]
   144a4:	ldr	r2, [r5, #104]	; 0x68
   144a8:	bl	13a48 <__assert_fail@plt+0x1d34>
   144ac:	ldr	r0, [r6]
   144b0:	sub	r7, r7, r9
   144b4:	mov	r4, r8
   144b8:	bl	197cc <__assert_fail@plt+0x7ab8>
   144bc:	b	13ea0 <__assert_fail@plt+0x218c>
   144c0:	mov	r3, #11
   144c4:	ldr	r2, [pc, #-88]	; 14474 <__assert_fail@plt+0x2760>
   144c8:	mov	r1, r7
   144cc:	mov	r0, r4
   144d0:	bl	11ca8 <memmem@plt>
   144d4:	cmp	r0, #0
   144d8:	beq	14558 <__assert_fail@plt+0x2844>
   144dc:	mov	r2, r8
   144e0:	ldr	r1, [pc, #-112]	; 14478 <__assert_fail@plt+0x2764>
   144e4:	ldr	r0, [pc, #-112]	; 1447c <__assert_fail@plt+0x2768>
   144e8:	bl	197ac <__assert_fail@plt+0x7a98>
   144ec:	b	13edc <__assert_fail@plt+0x21c8>
   144f0:	ldr	r3, [sl, #8]
   144f4:	ldr	r2, [sl, #12]
   144f8:	ldr	r0, [sl, #16]
   144fc:	ldr	ip, [sl, #20]
   14500:	ldr	r1, [pc, #-136]	; 14480 <__assert_fail@plt+0x276c>
   14504:	orr	r2, r2, r3
   14508:	mov	r3, #64	; 0x40
   1450c:	str	r2, [sp, #4]
   14510:	str	r0, [sp, #8]
   14514:	str	r1, [sp]
   14518:	str	ip, [sp, #12]
   1451c:	mov	r1, r3
   14520:	mov	r2, #1
   14524:	add	r0, sp, #116	; 0x74
   14528:	bl	11cfc <__snprintf_chk@plt>
   1452c:	mov	r4, #0
   14530:	str	r0, [r5, #104]	; 0x68
   14534:	b	13e80 <__assert_fail@plt+0x216c>
   14538:	str	r4, [sp, #28]
   1453c:	b	143c0 <__assert_fail@plt+0x26ac>
   14540:	vldr	d7, [pc, #192]	; 14608 <__assert_fail@plt+0x28f4>
   14544:	b	14110 <__assert_fail@plt+0x23fc>
   14548:	vldr	d7, [pc, #184]	; 14608 <__assert_fail@plt+0x28f4>
   1454c:	b	14220 <__assert_fail@plt+0x250c>
   14550:	vldr	d7, [pc, #176]	; 14608 <__assert_fail@plt+0x28f4>
   14554:	b	142f8 <__assert_fail@plt+0x25e4>
   14558:	mov	r3, r8
   1455c:	mov	r1, r7
   14560:	mov	r0, r4
   14564:	ldr	r2, [r5, #104]	; 0x68
   14568:	bl	13a48 <__assert_fail@plt+0x1d34>
   1456c:	b	13ef8 <__assert_fail@plt+0x21e4>
   14570:	ldr	r3, [r4, #40]	; 0x28
   14574:	ldr	r2, [sp, #68]	; 0x44
   14578:	cmp	r2, r3
   1457c:	bne	14250 <__assert_fail@plt+0x253c>
   14580:	vldr	d6, [pc, #136]	; 14610 <__assert_fail@plt+0x28fc>
   14584:	vcmpe.f64	d7, d6
   14588:	vmrs	APSR_nzcv, fpscr
   1458c:	bpl	145c0 <__assert_fail@plt+0x28ac>
   14590:	ldr	r2, [pc, #128]	; 14618 <__assert_fail@plt+0x2904>
   14594:	mov	r3, #64	; 0x40
   14598:	str	r2, [sp]
   1459c:	vstr	d7, [sp, #8]
   145a0:	mov	r1, r3
   145a4:	mov	r2, #1
   145a8:	add	r0, sp, #116	; 0x74
   145ac:	bl	11cfc <__snprintf_chk@plt>
   145b0:	mov	r4, #0
   145b4:	mov	r6, r0
   145b8:	str	r0, [r5, #104]	; 0x68
   145bc:	b	14298 <__assert_fail@plt+0x2584>
   145c0:	ldr	r2, [pc, #84]	; 1461c <__assert_fail@plt+0x2908>
   145c4:	mov	r3, #64	; 0x40
   145c8:	str	r2, [sp]
   145cc:	vstr	d7, [sp, #8]
   145d0:	mov	r1, r3
   145d4:	mov	r2, #1
   145d8:	add	r0, sp, #116	; 0x74
   145dc:	bl	11cfc <__snprintf_chk@plt>
   145e0:	mov	r4, #0
   145e4:	mov	r6, r0
   145e8:	str	r0, [r5, #104]	; 0x68
   145ec:	b	14298 <__assert_fail@plt+0x2584>
   145f0:	bl	118e8 <__stack_chk_fail@plt>
   145f4:	ldr	r1, [pc, #36]	; 14620 <__assert_fail@plt+0x290c>
   145f8:	mov	r0, #1
   145fc:	bl	11948 <err@plt>
   14600:	bl	11cd8 <abort@plt>
   14604:	nop			; (mov r0, r0)
	...
   14614:	eormi	r0, r4, r0
   14618:	andeq	sl, r1, r8, lsr #13
   1461c:			; <UNDEFINED> instruction: 0x0001a6b8
   14620:	strdeq	sl, [r1], -r0
   14624:	ldr	r3, [pc, #292]	; 14750 <__assert_fail@plt+0x2a3c>
   14628:	push	{r4, r5, r6, lr}
   1462c:	ldr	r4, [r3]
   14630:	mov	r0, r4
   14634:	bl	119cc <__fpending@plt>
   14638:	mov	r6, r0
   1463c:	mov	r0, r4
   14640:	bl	11864 <ferror@plt>
   14644:	mov	r5, r0
   14648:	mov	r0, r4
   1464c:	bl	11bc4 <fclose@plt>
   14650:	cmp	r5, #0
   14654:	mov	r4, r0
   14658:	bne	14700 <__assert_fail@plt+0x29ec>
   1465c:	cmp	r0, #0
   14660:	beq	1467c <__assert_fail@plt+0x2968>
   14664:	bl	11b1c <__errno_location@plt>
   14668:	cmp	r6, #0
   1466c:	ldr	r3, [r0]
   14670:	bne	146d8 <__assert_fail@plt+0x29c4>
   14674:	cmp	r3, #9
   14678:	bne	146d8 <__assert_fail@plt+0x29c4>
   1467c:	ldr	r3, [pc, #208]	; 14754 <__assert_fail@plt+0x2a40>
   14680:	ldr	r4, [r3]
   14684:	mov	r0, r4
   14688:	bl	119cc <__fpending@plt>
   1468c:	mov	r6, r0
   14690:	mov	r0, r4
   14694:	bl	11864 <ferror@plt>
   14698:	mov	r5, r0
   1469c:	mov	r0, r4
   146a0:	bl	11bc4 <fclose@plt>
   146a4:	cmp	r5, #0
   146a8:	mov	r4, r0
   146ac:	bne	14734 <__assert_fail@plt+0x2a20>
   146b0:	cmp	r0, #0
   146b4:	popeq	{r4, r5, r6, pc}
   146b8:	cmp	r6, #0
   146bc:	bne	146d0 <__assert_fail@plt+0x29bc>
   146c0:	bl	11b1c <__errno_location@plt>
   146c4:	ldr	r3, [r0]
   146c8:	cmp	r3, #9
   146cc:	popeq	{r4, r5, r6, pc}
   146d0:	mov	r0, #1
   146d4:	bl	1187c <_exit@plt>
   146d8:	cmp	r3, #32
   146dc:	beq	1467c <__assert_fail@plt+0x2968>
   146e0:	cmp	r3, #0
   146e4:	beq	1471c <__assert_fail@plt+0x2a08>
   146e8:	mov	r2, #5
   146ec:	ldr	r1, [pc, #100]	; 14758 <__assert_fail@plt+0x2a44>
   146f0:	mov	r0, #0
   146f4:	bl	118d0 <dcgettext@plt>
   146f8:	bl	11c24 <warn@plt>
   146fc:	b	146d0 <__assert_fail@plt+0x29bc>
   14700:	bl	11b1c <__errno_location@plt>
   14704:	cmp	r4, #0
   14708:	ldr	r3, [r0]
   1470c:	bne	146d8 <__assert_fail@plt+0x29c4>
   14710:	cmp	r3, #32
   14714:	strne	r4, [r0]
   14718:	beq	1467c <__assert_fail@plt+0x2968>
   1471c:	mov	r2, #5
   14720:	ldr	r1, [pc, #48]	; 14758 <__assert_fail@plt+0x2a44>
   14724:	mov	r0, #0
   14728:	bl	118d0 <dcgettext@plt>
   1472c:	bl	11aec <warnx@plt>
   14730:	b	146d0 <__assert_fail@plt+0x29bc>
   14734:	cmp	r0, #0
   14738:	bne	146d0 <__assert_fail@plt+0x29bc>
   1473c:	bl	11b1c <__errno_location@plt>
   14740:	ldr	r3, [r0]
   14744:	cmp	r3, #32
   14748:	strne	r4, [r0]
   1474c:	b	146d0 <__assert_fail@plt+0x29bc>
   14750:	muleq	r2, ip, r0
   14754:	muleq	r2, r8, r0
   14758:	andeq	sl, r1, ip, lsr r7
   1475c:	push	{r4, r5, lr}
   14760:	sub	sp, sp, #92	; 0x5c
   14764:	ldr	r4, [pc, #196]	; 14830 <__assert_fail@plt+0x2b1c>
   14768:	mov	r5, r0
   1476c:	mov	r1, #0
   14770:	ldr	r3, [r4]
   14774:	add	r0, sp, #12
   14778:	str	r3, [sp, #84]	; 0x54
   1477c:	bl	119c0 <gettimeofday@plt>
   14780:	cmp	r0, #0
   14784:	beq	147ac <__assert_fail@plt+0x2a98>
   14788:	bl	11b1c <__errno_location@plt>
   1478c:	ldr	r0, [r0]
   14790:	rsb	r0, r0, #0
   14794:	ldr	r2, [sp, #84]	; 0x54
   14798:	ldr	r3, [r4]
   1479c:	cmp	r2, r3
   147a0:	bne	1482c <__assert_fail@plt+0x2b18>
   147a4:	add	sp, sp, #92	; 0x5c
   147a8:	pop	{r4, r5, pc}
   147ac:	add	r1, sp, #4
   147b0:	mov	r0, #7
   147b4:	bl	11c90 <clock_gettime@plt>
   147b8:	cmp	r0, #0
   147bc:	bne	14804 <__assert_fail@plt+0x2af0>
   147c0:	ldr	r2, [sp, #8]
   147c4:	ldr	r1, [pc, #104]	; 14834 <__assert_fail@plt+0x2b20>
   147c8:	ldr	r3, [sp, #16]
   147cc:	asr	ip, r2, #31
   147d0:	smull	r2, r1, r1, r2
   147d4:	ldr	r2, [sp, #12]
   147d8:	rsb	r1, ip, r1, asr #6
   147dc:	ldr	ip, [sp, #4]
   147e0:	sub	r3, r3, r1
   147e4:	sub	r2, r2, ip
   147e8:	cmp	r3, #0
   147ec:	strd	r2, [r5]
   147f0:	addlt	r3, r3, #999424	; 0xf4000
   147f4:	addlt	r3, r3, #576	; 0x240
   147f8:	sublt	r2, r2, #1
   147fc:	strdlt	r2, [r5]
   14800:	b	14794 <__assert_fail@plt+0x2a80>
   14804:	add	r0, sp, #20
   14808:	bl	11a20 <sysinfo@plt>
   1480c:	cmp	r0, #0
   14810:	bne	14788 <__assert_fail@plt+0x2a74>
   14814:	ldr	r3, [sp, #12]
   14818:	ldr	r2, [sp, #20]
   1481c:	str	r0, [r5, #4]
   14820:	sub	r3, r3, r2
   14824:	str	r3, [r5]
   14828:	b	14794 <__assert_fail@plt+0x2a80>
   1482c:	bl	118e8 <__stack_chk_fail@plt>
   14830:	andeq	ip, r2, r8, lsl #26
   14834:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   14838:	push	{r4, r5, lr}
   1483c:	sub	sp, sp, #20
   14840:	ldr	r4, [pc, #88]	; 148a0 <__assert_fail@plt+0x2b8c>
   14844:	mov	r5, r0
   14848:	add	r1, sp, #4
   1484c:	ldr	r3, [r4]
   14850:	mov	r0, #4
   14854:	str	r3, [sp, #12]
   14858:	bl	11c90 <clock_gettime@plt>
   1485c:	cmp	r0, #0
   14860:	bne	14884 <__assert_fail@plt+0x2b70>
   14864:	ldr	r3, [sp, #8]
   14868:	ldr	r2, [pc, #52]	; 148a4 <__assert_fail@plt+0x2b90>
   1486c:	ldr	r1, [sp, #4]
   14870:	smull	ip, r2, r2, r3
   14874:	str	r1, [r5]
   14878:	asr	r3, r3, #31
   1487c:	rsb	r3, r3, r2, asr #6
   14880:	str	r3, [r5, #4]
   14884:	ldr	r2, [sp, #12]
   14888:	ldr	r3, [r4]
   1488c:	cmp	r2, r3
   14890:	bne	1489c <__assert_fail@plt+0x2b88>
   14894:	add	sp, sp, #20
   14898:	pop	{r4, r5, pc}
   1489c:	bl	118e8 <__stack_chk_fail@plt>
   148a0:	andeq	ip, r2, r8, lsl #26
   148a4:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   148a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148ac:	subs	r9, r0, #0
   148b0:	beq	14950 <__assert_fail@plt+0x2c3c>
   148b4:	bl	11ac8 <strlen@plt>
   148b8:	lsl	r0, r0, #2
   148bc:	add	r0, r0, #1
   148c0:	bl	11a2c <malloc@plt>
   148c4:	subs	r7, r0, #0
   148c8:	beq	14950 <__assert_fail@plt+0x2c3c>
   148cc:	ldrsb	r8, [r9]
   148d0:	cmp	r8, #0
   148d4:	beq	1495c <__assert_fail@plt+0x2c48>
   148d8:	ldr	r5, [pc, #132]	; 14964 <__assert_fail@plt+0x2c50>
   148dc:	mov	r4, r7
   148e0:	add	r5, pc, r5
   148e4:	mov	r6, #92	; 0x5c
   148e8:	mov	r1, r8
   148ec:	mov	r0, r5
   148f0:	bl	11ad4 <strchr@plt>
   148f4:	uxtb	r3, r8
   148f8:	asr	r2, r8, #6
   148fc:	asr	r1, r3, #3
   14900:	and	r2, r2, #3
   14904:	and	r1, r1, #7
   14908:	and	r3, r3, #7
   1490c:	add	r2, r2, #48	; 0x30
   14910:	add	r1, r1, #48	; 0x30
   14914:	add	r3, r3, #48	; 0x30
   14918:	cmp	r0, #0
   1491c:	strbeq	r8, [r4], #1
   14920:	ldrsb	r8, [r9, #1]!
   14924:	strbne	r6, [r4]
   14928:	strbne	r2, [r4, #1]
   1492c:	strbne	r1, [r4, #2]
   14930:	strbne	r3, [r4, #3]
   14934:	addne	r4, r4, #4
   14938:	cmp	r8, #0
   1493c:	bne	148e8 <__assert_fail@plt+0x2bd4>
   14940:	mov	r3, #0
   14944:	strb	r3, [r4]
   14948:	mov	r0, r7
   1494c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14950:	mov	r7, #0
   14954:	mov	r0, r7
   14958:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1495c:	mov	r4, r7
   14960:	b	14940 <__assert_fail@plt+0x2c2c>
   14964:	andeq	r6, r0, r4, asr #25
   14968:	cmp	r0, #0
   1496c:	bxeq	lr
   14970:	ldrsb	r3, [r0]
   14974:	cmp	r3, #0
   14978:	beq	14a2c <__assert_fail@plt+0x2d18>
   1497c:	subs	r2, r2, #1
   14980:	beq	14a2c <__assert_fail@plt+0x2d18>
   14984:	push	{r4, r5, r6, r7, lr}
   14988:	mov	ip, #0
   1498c:	mov	r6, #8
   14990:	b	149b4 <__assert_fail@plt+0x2ca0>
   14994:	add	r0, r0, #1
   14998:	add	ip, ip, #1
   1499c:	strb	r3, [r1, #-1]
   149a0:	ldrsb	r3, [r0]
   149a4:	cmp	r3, #0
   149a8:	beq	14a20 <__assert_fail@plt+0x2d0c>
   149ac:	cmp	ip, r2
   149b0:	bcs	14a20 <__assert_fail@plt+0x2d0c>
   149b4:	cmp	r3, #92	; 0x5c
   149b8:	add	r1, r1, #1
   149bc:	bne	14994 <__assert_fail@plt+0x2c80>
   149c0:	add	lr, ip, #3
   149c4:	cmp	lr, r2
   149c8:	bcs	14994 <__assert_fail@plt+0x2c80>
   149cc:	ldrsb	lr, [r0, #1]
   149d0:	bic	r4, lr, #7
   149d4:	cmp	r4, #48	; 0x30
   149d8:	bne	14994 <__assert_fail@plt+0x2c80>
   149dc:	ldrsb	r4, [r0, #2]
   149e0:	bic	r5, r4, #7
   149e4:	cmp	r5, #48	; 0x30
   149e8:	bne	14994 <__assert_fail@plt+0x2c80>
   149ec:	ldrsb	r5, [r0, #3]
   149f0:	bic	r7, r5, #7
   149f4:	cmp	r7, #48	; 0x30
   149f8:	bne	14994 <__assert_fail@plt+0x2c80>
   149fc:	and	r3, lr, #7
   14a00:	and	r4, r4, #7
   14a04:	smlabb	r3, r6, r3, r4
   14a08:	and	r5, r5, #7
   14a0c:	add	r0, r0, #4
   14a10:	add	r3, r5, r3, lsl #3
   14a14:	add	ip, ip, #4
   14a18:	sxtb	r3, r3
   14a1c:	b	1499c <__assert_fail@plt+0x2c88>
   14a20:	mov	r3, #0
   14a24:	strb	r3, [r1]
   14a28:	pop	{r4, r5, r6, r7, pc}
   14a2c:	mov	r3, #0
   14a30:	strb	r3, [r1]
   14a34:	bx	lr
   14a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a3c:	subs	r5, r0, #0
   14a40:	sub	sp, sp, #12
   14a44:	moveq	r0, r5
   14a48:	beq	14b58 <__assert_fail@plt+0x2e44>
   14a4c:	mov	r9, r1
   14a50:	sub	r8, r2, #1
   14a54:	mov	r7, r1
   14a58:	mov	r6, #0
   14a5c:	b	14a70 <__assert_fail@plt+0x2d5c>
   14a60:	add	r5, r5, #1
   14a64:	add	r6, r6, #1
   14a68:	strb	r4, [r7]
   14a6c:	add	r7, r7, #1
   14a70:	ldrsb	r4, [r5]
   14a74:	cmp	r4, #0
   14a78:	beq	14b48 <__assert_fail@plt+0x2e34>
   14a7c:	cmp	r6, r8
   14a80:	bcs	14b48 <__assert_fail@plt+0x2e34>
   14a84:	cmp	r4, #92	; 0x5c
   14a88:	bne	14a60 <__assert_fail@plt+0x2d4c>
   14a8c:	add	r3, r6, #3
   14a90:	cmp	r3, r8
   14a94:	bcs	14a60 <__assert_fail@plt+0x2d4c>
   14a98:	ldrsb	r3, [r5, #1]
   14a9c:	cmp	r3, #120	; 0x78
   14aa0:	bne	14a60 <__assert_fail@plt+0x2d4c>
   14aa4:	bl	11a8c <__ctype_b_loc@plt>
   14aa8:	ldrsb	r3, [r5, #2]
   14aac:	sxth	r1, r3
   14ab0:	lsl	r2, r1, #1
   14ab4:	ldr	r0, [r0]
   14ab8:	ldrh	ip, [r0, r2]
   14abc:	tst	ip, #4096	; 0x1000
   14ac0:	beq	14a60 <__assert_fail@plt+0x2d4c>
   14ac4:	ldrsb	sl, [r5, #3]
   14ac8:	sxth	r2, sl
   14acc:	lsl	lr, r2, #1
   14ad0:	ldrh	fp, [r0, lr]
   14ad4:	tst	fp, #4096	; 0x1000
   14ad8:	beq	14a60 <__assert_fail@plt+0x2d4c>
   14adc:	tst	ip, #2048	; 0x800
   14ae0:	bne	14b60 <__assert_fail@plt+0x2e4c>
   14ae4:	stm	sp, {r1, r2}
   14ae8:	bl	11a68 <__ctype_tolower_loc@plt>
   14aec:	ldr	r1, [sp]
   14af0:	ldr	r2, [sp, #4]
   14af4:	ldr	r3, [r0]
   14af8:	ldr	r4, [r3, r1, lsl #2]
   14afc:	sub	r4, r4, #87	; 0x57
   14b00:	lsl	r4, r4, #4
   14b04:	sxtb	r4, r4
   14b08:	tst	fp, #2048	; 0x800
   14b0c:	subne	r3, sl, #48	; 0x30
   14b10:	sxtbne	r3, r3
   14b14:	bne	14b34 <__assert_fail@plt+0x2e20>
   14b18:	str	r2, [sp]
   14b1c:	bl	11a68 <__ctype_tolower_loc@plt>
   14b20:	ldr	r2, [sp]
   14b24:	ldr	r3, [r0]
   14b28:	ldr	r3, [r3, r2, lsl #2]
   14b2c:	sub	r3, r3, #87	; 0x57
   14b30:	sxtb	r3, r3
   14b34:	orr	r3, r4, r3
   14b38:	strb	r3, [r7]
   14b3c:	add	r5, r5, #4
   14b40:	add	r6, r6, #4
   14b44:	b	14a6c <__assert_fail@plt+0x2d58>
   14b48:	sub	r0, r7, r9
   14b4c:	add	r0, r0, #1
   14b50:	mov	r3, #0
   14b54:	strb	r3, [r7]
   14b58:	add	sp, sp, #12
   14b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b60:	sub	r4, r3, #48	; 0x30
   14b64:	lsl	r4, r4, #4
   14b68:	sxtb	r4, r4
   14b6c:	b	14b08 <__assert_fail@plt+0x2df4>
   14b70:	push	{r4, r5, r6, lr}
   14b74:	subs	r4, r0, #0
   14b78:	beq	14c00 <__assert_fail@plt+0x2eec>
   14b7c:	ldrsb	r3, [r4]
   14b80:	bics	r2, r3, #32
   14b84:	beq	14bf0 <__assert_fail@plt+0x2edc>
   14b88:	cmp	r3, #9
   14b8c:	beq	14bf0 <__assert_fail@plt+0x2edc>
   14b90:	mov	ip, r4
   14b94:	b	14ba0 <__assert_fail@plt+0x2e8c>
   14b98:	cmp	r3, #9
   14b9c:	beq	14bac <__assert_fail@plt+0x2e98>
   14ba0:	ldrsb	r3, [ip, #1]!
   14ba4:	bics	r2, r3, #32
   14ba8:	bne	14b98 <__assert_fail@plt+0x2e84>
   14bac:	sub	r5, ip, r4
   14bb0:	cmp	r1, #0
   14bb4:	add	r5, r5, #1
   14bb8:	beq	14bc0 <__assert_fail@plt+0x2eac>
   14bbc:	str	ip, [r1]
   14bc0:	cmp	r4, ip
   14bc4:	beq	14c00 <__assert_fail@plt+0x2eec>
   14bc8:	mov	r0, r5
   14bcc:	bl	11a2c <malloc@plt>
   14bd0:	subs	r6, r0, #0
   14bd4:	beq	14be8 <__assert_fail@plt+0x2ed4>
   14bd8:	mov	r2, r5
   14bdc:	mov	r0, r4
   14be0:	mov	r1, r6
   14be4:	bl	14968 <__assert_fail@plt+0x2c54>
   14be8:	mov	r0, r6
   14bec:	pop	{r4, r5, r6, pc}
   14bf0:	cmp	r1, #0
   14bf4:	movne	ip, r4
   14bf8:	movne	r5, #1
   14bfc:	bne	14bbc <__assert_fail@plt+0x2ea8>
   14c00:	mov	r6, #0
   14c04:	mov	r0, r6
   14c08:	pop	{r4, r5, r6, pc}
   14c0c:	push	{r4, r5, r6, r7, lr}
   14c10:	sub	sp, sp, #12
   14c14:	ldr	r4, [pc, #204]	; 14ce8 <__assert_fail@plt+0x2fd4>
   14c18:	ldr	r2, [pc, #204]	; 14cec <__assert_fail@plt+0x2fd8>
   14c1c:	add	r4, pc, r4
   14c20:	ldr	r3, [pc, #200]	; 14cf0 <__assert_fail@plt+0x2fdc>
   14c24:	ldr	r5, [r4, r2]
   14c28:	mov	r6, sp
   14c2c:	ldr	r2, [r5]
   14c30:	str	r2, [sp, #4]
   14c34:	ldr	r3, [r4, r3]
   14c38:	ldr	r0, [r3]
   14c3c:	bl	11828 <fflush@plt>
   14c40:	ldr	r3, [pc, #172]	; 14cf4 <__assert_fail@plt+0x2fe0>
   14c44:	ldr	r3, [r4, r3]
   14c48:	ldr	r0, [r3]
   14c4c:	bl	11828 <fflush@plt>
   14c50:	mov	r0, #1
   14c54:	bl	11ce4 <close@plt>
   14c58:	mov	r0, #2
   14c5c:	bl	11ce4 <close@plt>
   14c60:	ldr	r3, [pc, #144]	; 14cf8 <__assert_fail@plt+0x2fe4>
   14c64:	add	r3, pc, r3
   14c68:	ldr	r7, [r3, #4]
   14c6c:	b	14c84 <__assert_fail@plt+0x2f70>
   14c70:	bl	11b1c <__errno_location@plt>
   14c74:	ldr	r3, [r0]
   14c78:	mov	r4, r0
   14c7c:	cmp	r3, #4
   14c80:	bne	14cb4 <__assert_fail@plt+0x2fa0>
   14c84:	mov	r2, #0
   14c88:	mov	r1, r6
   14c8c:	mov	r0, r7
   14c90:	bl	119b4 <waitpid@plt>
   14c94:	cmp	r0, #0
   14c98:	blt	14c70 <__assert_fail@plt+0x2f5c>
   14c9c:	ldr	r2, [sp, #4]
   14ca0:	ldr	r3, [r5]
   14ca4:	cmp	r2, r3
   14ca8:	bne	14ce4 <__assert_fail@plt+0x2fd0>
   14cac:	add	sp, sp, #12
   14cb0:	pop	{r4, r5, r6, r7, pc}
   14cb4:	ldr	r1, [pc, #64]	; 14cfc <__assert_fail@plt+0x2fe8>
   14cb8:	mov	r2, #5
   14cbc:	add	r1, pc, r1
   14cc0:	mov	r0, #0
   14cc4:	bl	118d0 <dcgettext@plt>
   14cc8:	mov	r5, r0
   14ccc:	ldr	r0, [r4]
   14cd0:	bl	11a44 <strerror@plt>
   14cd4:	mov	r1, r5
   14cd8:	mov	r2, r0
   14cdc:	mov	r0, #1
   14ce0:	bl	11948 <err@plt>
   14ce4:	bl	118e8 <__stack_chk_fail@plt>
   14ce8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14cec:	ldrdeq	r0, [r0], -r4
   14cf0:	andeq	r0, r0, r0, ror #3
   14cf4:	ldrdeq	r0, [r0], -r8
   14cf8:	andeq	sl, r1, ip, lsr r4
   14cfc:	strdeq	r6, [r0], -r0
   14d00:	ldr	r3, [pc, #16]	; 14d18 <__assert_fail@plt+0x3004>
   14d04:	add	r3, pc, r3
   14d08:	ldr	r3, [r3, #4]
   14d0c:	cmp	r3, #0
   14d10:	bxeq	lr
   14d14:	b	14c0c <__assert_fail@plt+0x2ef8>
   14d18:	muleq	r1, ip, r3
   14d1c:	ldr	r3, [pc, #36]	; 14d48 <__assert_fail@plt+0x3034>
   14d20:	push	{r4, lr}
   14d24:	add	r3, pc, r3
   14d28:	mov	r4, r0
   14d2c:	ldr	r3, [r3, #4]
   14d30:	cmp	r3, #0
   14d34:	beq	14d3c <__assert_fail@plt+0x3028>
   14d38:	bl	14c0c <__assert_fail@plt+0x2ef8>
   14d3c:	mov	r0, r4
   14d40:	pop	{r4, lr}
   14d44:	b	117c8 <raise@plt>
   14d48:	andeq	sl, r1, ip, ror r3
   14d4c:	ldr	r1, [pc, #204]	; 14e20 <__assert_fail@plt+0x310c>
   14d50:	ldr	r0, [pc, #204]	; 14e24 <__assert_fail@plt+0x3110>
   14d54:	add	r1, pc, r1
   14d58:	push	{r4, r5, r6, r7, lr}
   14d5c:	sub	sp, sp, #276	; 0x114
   14d60:	ldr	r6, [r1, r0]
   14d64:	add	r3, sp, #8
   14d68:	add	r2, sp, #136	; 0x88
   14d6c:	ldr	r1, [r6]
   14d70:	mov	r4, #0
   14d74:	str	r1, [sp, #268]	; 0x10c
   14d78:	str	r4, [r3, #4]!
   14d7c:	cmp	r3, r2
   14d80:	bne	14d78 <__assert_fail@plt+0x3064>
   14d84:	ldr	ip, [sp, #12]
   14d88:	add	r3, sp, #140	; 0x8c
   14d8c:	add	r5, sp, #12
   14d90:	orr	ip, ip, #1
   14d94:	mov	r0, r3
   14d98:	mov	r1, r5
   14d9c:	mov	r2, #128	; 0x80
   14da0:	str	ip, [sp, #12]
   14da4:	bl	11888 <memcpy@plt>
   14da8:	ldr	r7, [pc, #120]	; 14e28 <__assert_fail@plt+0x3114>
   14dac:	mov	r1, r5
   14db0:	mov	r2, #0
   14db4:	str	r4, [sp]
   14db8:	add	r7, pc, r7
   14dbc:	mov	r3, r0
   14dc0:	mov	r0, #1
   14dc4:	bl	118c4 <select@plt>
   14dc8:	ldr	r1, [pc, #92]	; 14e2c <__assert_fail@plt+0x3118>
   14dcc:	mov	r0, r7
   14dd0:	mov	r2, #0
   14dd4:	add	r1, pc, r1
   14dd8:	bl	11ae0 <setenv@plt>
   14ddc:	cmp	r0, #0
   14de0:	bne	14dfc <__assert_fail@plt+0x30e8>
   14de4:	ldr	r2, [sp, #268]	; 0x10c
   14de8:	ldr	r3, [r6]
   14dec:	cmp	r2, r3
   14df0:	bne	14e1c <__assert_fail@plt+0x3108>
   14df4:	add	sp, sp, #276	; 0x114
   14df8:	pop	{r4, r5, r6, r7, pc}
   14dfc:	ldr	r1, [pc, #44]	; 14e30 <__assert_fail@plt+0x311c>
   14e00:	mov	r2, #5
   14e04:	add	r1, pc, r1
   14e08:	mov	r0, #0
   14e0c:	bl	118d0 <dcgettext@plt>
   14e10:	mov	r1, r7
   14e14:	bl	11c24 <warn@plt>
   14e18:	b	14de4 <__assert_fail@plt+0x30d0>
   14e1c:	bl	118e8 <__stack_chk_fail@plt>
   14e20:	andeq	r8, r1, r0, asr #1
   14e24:	ldrdeq	r0, [r0], -r4
   14e28:	andeq	r6, r0, r0, lsl r8
   14e2c:	andeq	r6, r0, ip, ror #15
   14e30:	andeq	r6, r0, ip, asr #15
   14e34:	ldr	r3, [pc, #916]	; 151d0 <__assert_fail@plt+0x34bc>
   14e38:	ldr	r2, [pc, #916]	; 151d4 <__assert_fail@plt+0x34c0>
   14e3c:	add	r3, pc, r3
   14e40:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e44:	sub	sp, sp, #148	; 0x94
   14e48:	ldr	r5, [r3, r2]
   14e4c:	ldr	r0, [pc, #900]	; 151d8 <__assert_fail@plt+0x34c4>
   14e50:	ldr	r3, [r5]
   14e54:	add	r0, pc, r0
   14e58:	str	r3, [sp, #140]	; 0x8c
   14e5c:	bl	11a08 <getenv@plt>
   14e60:	mov	r4, r0
   14e64:	mov	r0, #1
   14e68:	bl	11cb4 <isatty@plt>
   14e6c:	cmp	r0, #0
   14e70:	beq	1500c <__assert_fail@plt+0x32f8>
   14e74:	cmp	r4, #0
   14e78:	beq	150b8 <__assert_fail@plt+0x33a4>
   14e7c:	ldrsb	r6, [r4]
   14e80:	cmp	r6, #0
   14e84:	beq	1500c <__assert_fail@plt+0x32f8>
   14e88:	ldr	r1, [pc, #844]	; 151dc <__assert_fail@plt+0x34c8>
   14e8c:	mov	r0, r4
   14e90:	add	r1, pc, r1
   14e94:	bl	117ec <strcmp@plt>
   14e98:	cmp	r0, #0
   14e9c:	beq	1500c <__assert_fail@plt+0x32f8>
   14ea0:	cmp	r6, #47	; 0x2f
   14ea4:	beq	15024 <__assert_fail@plt+0x3310>
   14ea8:	ldr	r0, [pc, #816]	; 151e0 <__assert_fail@plt+0x34cc>
   14eac:	add	r0, pc, r0
   14eb0:	bl	11a08 <getenv@plt>
   14eb4:	cmp	r0, #0
   14eb8:	beq	1500c <__assert_fail@plt+0x32f8>
   14ebc:	bl	118dc <strdup@plt>
   14ec0:	subs	r9, r0, #0
   14ec4:	beq	15128 <__assert_fail@plt+0x3414>
   14ec8:	ldr	r1, [pc, #788]	; 151e4 <__assert_fail@plt+0x34d0>
   14ecc:	add	r1, pc, r1
   14ed0:	bl	11be8 <strtok@plt>
   14ed4:	cmp	r0, #0
   14ed8:	beq	14f2c <__assert_fail@plt+0x3218>
   14edc:	ldr	r8, [pc, #772]	; 151e8 <__assert_fail@plt+0x34d4>
   14ee0:	add	r8, pc, r8
   14ee4:	mov	r1, #524288	; 0x80000
   14ee8:	bl	119f0 <open64@plt>
   14eec:	subs	r6, r0, #0
   14ef0:	blt	14f18 <__assert_fail@plt+0x3204>
   14ef4:	mov	r3, #0
   14ef8:	mov	r2, #1
   14efc:	mov	r1, r4
   14f00:	bl	11858 <faccessat@plt>
   14f04:	mov	r7, r0
   14f08:	mov	r0, r6
   14f0c:	bl	11ce4 <close@plt>
   14f10:	cmp	r7, #0
   14f14:	beq	150d8 <__assert_fail@plt+0x33c4>
   14f18:	mov	r1, r8
   14f1c:	mov	r0, #0
   14f20:	bl	11be8 <strtok@plt>
   14f24:	cmp	r0, #0
   14f28:	bne	14ee4 <__assert_fail@plt+0x31d0>
   14f2c:	ldr	r2, [sp, #140]	; 0x8c
   14f30:	ldr	r3, [r5]
   14f34:	cmp	r2, r3
   14f38:	bne	15114 <__assert_fail@plt+0x3400>
   14f3c:	mov	r0, r9
   14f40:	add	sp, sp, #148	; 0x94
   14f44:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14f48:	b	11840 <free@plt>
   14f4c:	mov	r0, #0
   14f50:	bl	11828 <fflush@plt>
   14f54:	bl	11c00 <fork@plt>
   14f58:	cmp	r0, #0
   14f5c:	str	r0, [r6, #4]
   14f60:	beq	151ac <__assert_fail@plt+0x3498>
   14f64:	ldr	r0, [r6, #8]
   14f68:	blt	15108 <__assert_fail@plt+0x33f4>
   14f6c:	cmp	r0, #0
   14f70:	bne	150e4 <__assert_fail@plt+0x33d0>
   14f74:	mov	r4, sp
   14f78:	mov	r1, #1
   14f7c:	bl	118f4 <dup2@plt>
   14f80:	mov	r0, #2
   14f84:	bl	11cb4 <isatty@plt>
   14f88:	cmp	r0, #0
   14f8c:	bne	150f0 <__assert_fail@plt+0x33dc>
   14f90:	ldr	r6, [pc, #596]	; 151ec <__assert_fail@plt+0x34d8>
   14f94:	add	r6, pc, r6
   14f98:	ldr	r0, [r6, #8]
   14f9c:	bl	11ce4 <close@plt>
   14fa0:	mov	r2, #136	; 0x88
   14fa4:	mov	r1, #0
   14fa8:	add	r0, sp, #4
   14fac:	bl	11b64 <memset@plt>
   14fb0:	ldr	r3, [pc, #568]	; 151f0 <__assert_fail@plt+0x34dc>
   14fb4:	add	r2, r6, #28
   14fb8:	add	r3, pc, r3
   14fbc:	mov	r1, r4
   14fc0:	mov	r0, #2
   14fc4:	str	r3, [sp]
   14fc8:	bl	11984 <sigaction@plt>
   14fcc:	add	r2, r6, #168	; 0xa8
   14fd0:	mov	r1, r4
   14fd4:	mov	r0, #1
   14fd8:	bl	11984 <sigaction@plt>
   14fdc:	add	r2, r6, #308	; 0x134
   14fe0:	mov	r1, r4
   14fe4:	mov	r0, #15
   14fe8:	bl	11984 <sigaction@plt>
   14fec:	add	r2, r6, #448	; 0x1c0
   14ff0:	mov	r1, r4
   14ff4:	mov	r0, #3
   14ff8:	bl	11984 <sigaction@plt>
   14ffc:	add	r2, r6, #588	; 0x24c
   15000:	mov	r1, r4
   15004:	mov	r0, #13
   15008:	bl	11984 <sigaction@plt>
   1500c:	ldr	r2, [sp, #140]	; 0x8c
   15010:	ldr	r3, [r5]
   15014:	cmp	r2, r3
   15018:	bne	15114 <__assert_fail@plt+0x3400>
   1501c:	add	sp, sp, #148	; 0x94
   15020:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15024:	mov	r1, #1
   15028:	mov	r0, r4
   1502c:	bl	11bac <access@plt>
   15030:	cmp	r0, #0
   15034:	bne	1500c <__assert_fail@plt+0x32f8>
   15038:	ldr	r6, [pc, #436]	; 151f4 <__assert_fail@plt+0x34e0>
   1503c:	ldr	r3, [pc, #436]	; 151f8 <__assert_fail@plt+0x34e4>
   15040:	add	r6, pc, r6
   15044:	ldr	r2, [pc, #432]	; 151fc <__assert_fail@plt+0x34e8>
   15048:	ldrb	r0, [r6, #728]	; 0x2d8
   1504c:	add	r3, pc, r3
   15050:	add	r2, pc, r2
   15054:	mvn	r1, #0
   15058:	ands	r7, r0, #1
   1505c:	str	r1, [r6, #8]
   15060:	str	r2, [r6, #732]	; 0x2dc
   15064:	str	r3, [r6]
   15068:	str	r4, [r3, #8]
   1506c:	bne	14f4c <__assert_fail@plt+0x3238>
   15070:	mov	r4, sp
   15074:	mov	r0, r4
   15078:	bl	11bd0 <pipe@plt>
   1507c:	cmp	r0, #0
   15080:	blt	150c4 <__assert_fail@plt+0x33b0>
   15084:	ldr	r3, [sp, #4]
   15088:	mov	r0, r7
   1508c:	str	r3, [r6, #8]
   15090:	bl	11828 <fflush@plt>
   15094:	bl	11c00 <fork@plt>
   15098:	cmp	r0, #0
   1509c:	str	r0, [r6, #4]
   150a0:	beq	15138 <__assert_fail@plt+0x3424>
   150a4:	ldr	r0, [sp]
   150a8:	blt	15118 <__assert_fail@plt+0x3404>
   150ac:	bl	11ce4 <close@plt>
   150b0:	ldr	r0, [r6, #8]
   150b4:	b	14f78 <__assert_fail@plt+0x3264>
   150b8:	ldr	r4, [pc, #320]	; 15200 <__assert_fail@plt+0x34ec>
   150bc:	add	r4, pc, r4
   150c0:	b	14ea8 <__assert_fail@plt+0x3194>
   150c4:	ldr	r0, [r6, #12]
   150c8:	cmp	r0, #0
   150cc:	ble	1500c <__assert_fail@plt+0x32f8>
   150d0:	bl	11ce4 <close@plt>
   150d4:	b	1500c <__assert_fail@plt+0x32f8>
   150d8:	mov	r0, r9
   150dc:	bl	11840 <free@plt>
   150e0:	b	15038 <__assert_fail@plt+0x3324>
   150e4:	bl	11ce4 <close@plt>
   150e8:	ldr	r0, [r6, #8]
   150ec:	b	14f74 <__assert_fail@plt+0x3260>
   150f0:	ldr	r3, [pc, #268]	; 15204 <__assert_fail@plt+0x34f0>
   150f4:	mov	r1, #2
   150f8:	add	r3, pc, r3
   150fc:	ldr	r0, [r3, #8]
   15100:	bl	118f4 <dup2@plt>
   15104:	b	14f90 <__assert_fail@plt+0x327c>
   15108:	cmp	r0, #0
   1510c:	beq	1500c <__assert_fail@plt+0x32f8>
   15110:	b	150d0 <__assert_fail@plt+0x33bc>
   15114:	bl	118e8 <__stack_chk_fail@plt>
   15118:	bl	11ce4 <close@plt>
   1511c:	ldr	r0, [sp, #4]
   15120:	bl	11ce4 <close@plt>
   15124:	b	1500c <__assert_fail@plt+0x32f8>
   15128:	ldr	r1, [pc, #216]	; 15208 <__assert_fail@plt+0x34f4>
   1512c:	mov	r0, #1
   15130:	add	r1, pc, r1
   15134:	bl	11948 <err@plt>
   15138:	mov	r1, r0
   1513c:	ldr	r0, [sp]
   15140:	bl	118f4 <dup2@plt>
   15144:	ldr	r0, [sp]
   15148:	bl	11ce4 <close@plt>
   1514c:	ldr	r0, [sp, #4]
   15150:	bl	11ce4 <close@plt>
   15154:	ldr	r4, [pc, #176]	; 1520c <__assert_fail@plt+0x34f8>
   15158:	add	r4, pc, r4
   1515c:	ldr	r3, [r4, #732]	; 0x2dc
   15160:	blx	r3
   15164:	ldr	r1, [r4]
   15168:	ldr	r0, [r1]
   1516c:	bl	11894 <execvp@plt>
   15170:	bl	11b1c <__errno_location@plt>
   15174:	ldr	r1, [pc, #148]	; 15210 <__assert_fail@plt+0x34fc>
   15178:	mov	r2, #5
   1517c:	add	r1, pc, r1
   15180:	ldr	r3, [r0]
   15184:	mov	r0, #0
   15188:	cmp	r3, #2
   1518c:	moveq	r5, #127	; 0x7f
   15190:	movne	r5, #126	; 0x7e
   15194:	bl	118d0 <dcgettext@plt>
   15198:	ldr	r3, [r4]
   1519c:	ldr	r2, [r3]
   151a0:	mov	r1, r0
   151a4:	mov	r0, r5
   151a8:	bl	11948 <err@plt>
   151ac:	ldr	r3, [r6, #8]
   151b0:	cmp	r3, #0
   151b4:	ble	15154 <__assert_fail@plt+0x3440>
   151b8:	mov	r1, r0
   151bc:	mov	r0, r3
   151c0:	bl	118f4 <dup2@plt>
   151c4:	ldr	r0, [r6, #8]
   151c8:	bl	11ce4 <close@plt>
   151cc:	b	15154 <__assert_fail@plt+0x3440>
   151d0:	ldrdeq	r7, [r1], -r8
   151d4:	ldrdeq	r0, [r0], -r4
   151d8:			; <UNDEFINED> instruction: 0x000067b0
   151dc:	andeq	r6, r0, ip, ror r7
   151e0:	andeq	r6, r0, r4, ror #14
   151e4:	andeq	r5, r0, r0, asr #17
   151e8:	andeq	r5, r0, ip, lsr #17
   151ec:	andeq	sl, r1, ip, lsl #2
   151f0:			; <UNDEFINED> instruction: 0xfffffd5c
   151f4:	andeq	sl, r1, r0, rrx
   151f8:	andeq	sl, r1, r0, lsr #32
   151fc:			; <UNDEFINED> instruction: 0xfffffcf4
   15200:	andeq	r6, r0, r0, asr #10
   15204:	andeq	r9, r1, r8, lsr #31
   15208:			; <UNDEFINED> instruction: 0x000055b8
   1520c:	andeq	r9, r1, r8, asr #30
   15210:	muleq	r0, ip, r4
   15214:	ldr	r3, [pc, #36]	; 15240 <__assert_fail@plt+0x352c>
   15218:	add	r3, pc, r3
   1521c:	ldr	r3, [r3, #4]
   15220:	cmp	r3, #0
   15224:	bxne	lr
   15228:	push	{r4, lr}
   1522c:	bl	14e34 <__assert_fail@plt+0x3120>
   15230:	ldr	r0, [pc, #12]	; 15244 <__assert_fail@plt+0x3530>
   15234:	pop	{r4, lr}
   15238:	add	r0, pc, r0
   1523c:	b	1a040 <__assert_fail@plt+0x832c>
   15240:	andeq	r9, r1, r8, lsl #29
   15244:			; <UNDEFINED> instruction: 0xfffffac0
   15248:	push	{r4, lr}
   1524c:	ldr	r4, [pc, #44]	; 15280 <__assert_fail@plt+0x356c>
   15250:	add	r4, pc, r4
   15254:	ldr	r3, [r4, #4]
   15258:	cmp	r3, #0
   1525c:	popne	{r4, pc}
   15260:	mov	r0, #1
   15264:	bl	11918 <dup@plt>
   15268:	str	r0, [r4, #24]
   1526c:	mov	r0, #2
   15270:	bl	11918 <dup@plt>
   15274:	str	r0, [r4, #20]
   15278:	pop	{r4, lr}
   1527c:	b	14e34 <__assert_fail@plt+0x3120>
   15280:	andeq	r9, r1, r0, asr lr
   15284:	push	{r4, lr}
   15288:	ldr	r4, [pc, #156]	; 1532c <__assert_fail@plt+0x3618>
   1528c:	add	r4, pc, r4
   15290:	ldr	r3, [r4, #4]
   15294:	cmp	r3, #0
   15298:	popeq	{r4, pc}
   1529c:	bl	14c0c <__assert_fail@plt+0x2ef8>
   152a0:	mov	r1, #1
   152a4:	ldr	r0, [r4, #24]
   152a8:	bl	118f4 <dup2@plt>
   152ac:	mov	r1, #2
   152b0:	ldr	r0, [r4, #20]
   152b4:	bl	118f4 <dup2@plt>
   152b8:	ldr	r0, [r4, #24]
   152bc:	bl	11ce4 <close@plt>
   152c0:	ldr	r0, [r4, #20]
   152c4:	bl	11ce4 <close@plt>
   152c8:	add	r1, r4, #28
   152cc:	mov	r2, #0
   152d0:	mov	r0, #2
   152d4:	bl	11984 <sigaction@plt>
   152d8:	add	r1, r4, #168	; 0xa8
   152dc:	mov	r2, #0
   152e0:	mov	r0, #1
   152e4:	bl	11984 <sigaction@plt>
   152e8:	add	r1, r4, #308	; 0x134
   152ec:	mov	r2, #0
   152f0:	mov	r0, #15
   152f4:	bl	11984 <sigaction@plt>
   152f8:	add	r1, r4, #448	; 0x1c0
   152fc:	mov	r2, #0
   15300:	mov	r0, #3
   15304:	bl	11984 <sigaction@plt>
   15308:	add	r1, r4, #588	; 0x24c
   1530c:	mov	r2, #0
   15310:	mov	r0, #13
   15314:	bl	11984 <sigaction@plt>
   15318:	mov	r0, r4
   1531c:	mov	r2, #736	; 0x2e0
   15320:	mov	r1, #0
   15324:	pop	{r4, lr}
   15328:	b	11b64 <memset@plt>
   1532c:	andeq	r9, r1, r4, lsl lr
   15330:	cmp	r0, #0
   15334:	mov	r3, #0
   15338:	str	r3, [r1]
   1533c:	bxeq	lr
   15340:	ldrsb	r2, [r0]
   15344:	cmp	r2, #47	; 0x2f
   15348:	bne	15384 <__assert_fail@plt+0x3670>
   1534c:	ldrsb	r3, [r0, #1]
   15350:	cmp	r3, #47	; 0x2f
   15354:	bne	1538c <__assert_fail@plt+0x3678>
   15358:	add	r3, r0, #1
   1535c:	b	1536c <__assert_fail@plt+0x3658>
   15360:	ldrsb	r2, [r3]
   15364:	cmp	r2, #47	; 0x2f
   15368:	bne	1538c <__assert_fail@plt+0x3678>
   1536c:	cmp	r3, #0
   15370:	mov	r0, r3
   15374:	bxeq	lr
   15378:	ldrsb	r2, [r3], #1
   1537c:	cmp	r2, #47	; 0x2f
   15380:	beq	15360 <__assert_fail@plt+0x364c>
   15384:	cmp	r2, #0
   15388:	beq	153c8 <__assert_fail@plt+0x36b4>
   1538c:	mov	r3, #1
   15390:	str	r3, [r1]
   15394:	ldrsb	r3, [r0, #1]
   15398:	add	r2, r0, #1
   1539c:	cmp	r3, #47	; 0x2f
   153a0:	cmpne	r3, #0
   153a4:	bxeq	lr
   153a8:	rsb	r3, r0, #1
   153ac:	add	ip, r2, r3
   153b0:	str	ip, [r1]
   153b4:	ldrsb	ip, [r2, #1]!
   153b8:	cmp	ip, #0
   153bc:	cmpne	ip, #47	; 0x2f
   153c0:	bne	153ac <__assert_fail@plt+0x3698>
   153c4:	bx	lr
   153c8:	mov	r0, r2
   153cc:	bx	lr
   153d0:	push	{r4, r5, r6, r7, r8, lr}
   153d4:	mov	r7, r1
   153d8:	ldrsb	r1, [r0]
   153dc:	cmp	r1, #0
   153e0:	movne	r5, r0
   153e4:	movne	r4, #0
   153e8:	beq	15454 <__assert_fail@plt+0x3740>
   153ec:	cmp	r1, #92	; 0x5c
   153f0:	addne	r6, r5, r4
   153f4:	beq	15424 <__assert_fail@plt+0x3710>
   153f8:	mov	r0, r7
   153fc:	bl	11ad4 <strchr@plt>
   15400:	cmp	r0, #0
   15404:	bne	1544c <__assert_fail@plt+0x3738>
   15408:	ldrsb	r1, [r6, #1]!
   1540c:	add	r4, r4, #1
   15410:	mov	r0, r4
   15414:	cmp	r1, #0
   15418:	popeq	{r4, r5, r6, r7, r8, pc}
   1541c:	cmp	r1, #92	; 0x5c
   15420:	bne	153f8 <__assert_fail@plt+0x36e4>
   15424:	add	r3, r5, r4
   15428:	ldrsb	r3, [r3, #1]
   1542c:	cmp	r3, #0
   15430:	beq	1544c <__assert_fail@plt+0x3738>
   15434:	add	r4, r4, #2
   15438:	mov	r0, r4
   1543c:	ldrsb	r1, [r5, r4]
   15440:	cmp	r1, #0
   15444:	bne	153ec <__assert_fail@plt+0x36d8>
   15448:	pop	{r4, r5, r6, r7, r8, pc}
   1544c:	mov	r0, r4
   15450:	pop	{r4, r5, r6, r7, r8, pc}
   15454:	mov	r0, r1
   15458:	pop	{r4, r5, r6, r7, r8, pc}
   1545c:	ldr	ip, [pc, #244]	; 15558 <__assert_fail@plt+0x3844>
   15460:	push	{r4, r5, r6, r7, r8, r9, lr}
   15464:	add	ip, pc, ip
   15468:	ldr	lr, [pc, #236]	; 1555c <__assert_fail@plt+0x3848>
   1546c:	sub	sp, sp, #12
   15470:	mov	r5, #0
   15474:	ldr	r7, [ip, lr]
   15478:	mov	r4, r0
   1547c:	mov	r8, r1
   15480:	ldr	r3, [r7]
   15484:	mov	r0, ip
   15488:	mov	r9, r2
   1548c:	str	r5, [sp]
   15490:	str	r3, [sp, #4]
   15494:	bl	11b1c <__errno_location@plt>
   15498:	cmp	r4, r5
   1549c:	str	r5, [r0]
   154a0:	beq	154b0 <__assert_fail@plt+0x379c>
   154a4:	ldrsb	r3, [r4]
   154a8:	cmp	r3, r5
   154ac:	bne	154d0 <__assert_fail@plt+0x37bc>
   154b0:	ldr	r1, [pc, #168]	; 15560 <__assert_fail@plt+0x384c>
   154b4:	mov	r3, r4
   154b8:	add	r1, pc, r1
   154bc:	mov	r2, r8
   154c0:	ldr	r0, [r1]
   154c4:	ldr	r1, [pc, #152]	; 15564 <__assert_fail@plt+0x3850>
   154c8:	add	r1, pc, r1
   154cc:	bl	11c0c <errx@plt>
   154d0:	mov	r6, r0
   154d4:	mov	r2, r9
   154d8:	mov	r3, r5
   154dc:	mov	r1, sp
   154e0:	mov	r0, r4
   154e4:	bl	118ac <__strtoull_internal@plt>
   154e8:	ldr	r2, [r6]
   154ec:	cmp	r2, r5
   154f0:	bne	1552c <__assert_fail@plt+0x3818>
   154f4:	ldr	r3, [sp]
   154f8:	cmp	r3, r4
   154fc:	beq	154b0 <__assert_fail@plt+0x379c>
   15500:	cmp	r3, r5
   15504:	beq	15514 <__assert_fail@plt+0x3800>
   15508:	ldrsb	r3, [r3]
   1550c:	cmp	r3, r5
   15510:	bne	154b0 <__assert_fail@plt+0x379c>
   15514:	ldr	r2, [sp, #4]
   15518:	ldr	r3, [r7]
   1551c:	cmp	r2, r3
   15520:	bne	15554 <__assert_fail@plt+0x3840>
   15524:	add	sp, sp, #12
   15528:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1552c:	ldr	r3, [pc, #52]	; 15568 <__assert_fail@plt+0x3854>
   15530:	cmp	r2, #34	; 0x22
   15534:	add	r3, pc, r3
   15538:	ldr	r0, [r3]
   1553c:	bne	154b0 <__assert_fail@plt+0x379c>
   15540:	ldr	r1, [pc, #36]	; 1556c <__assert_fail@plt+0x3858>
   15544:	mov	r3, r4
   15548:	mov	r2, r8
   1554c:	add	r1, pc, r1
   15550:	bl	11948 <err@plt>
   15554:	bl	118e8 <__stack_chk_fail@plt>
   15558:			; <UNDEFINED> instruction: 0x000179b0
   1555c:	ldrdeq	r0, [r0], -r4
   15560:	andeq	r9, r1, r4, asr #23
   15564:	andeq	r6, r0, r0, ror r1
   15568:	andeq	r9, r1, r8, asr #22
   1556c:	andeq	r6, r0, ip, ror #1
   15570:	push	{r4, lr}
   15574:	mov	r5, r0
   15578:	mov	r4, r1
   1557c:	bl	11b1c <__errno_location@plt>
   15580:	ldr	ip, [pc, #32]	; 155a8 <__assert_fail@plt+0x3894>
   15584:	ldr	r1, [pc, #32]	; 155ac <__assert_fail@plt+0x3898>
   15588:	add	ip, pc, ip
   1558c:	mov	lr, #34	; 0x22
   15590:	mov	r3, r5
   15594:	mov	r2, r4
   15598:	add	r1, pc, r1
   1559c:	str	lr, [r0]
   155a0:	ldr	r0, [ip]
   155a4:	bl	11948 <err@plt>
   155a8:	strdeq	r9, [r1], -r4
   155ac:	andeq	r6, r0, r0, lsr #1
   155b0:	push	{r4, r5, r6, lr}
   155b4:	mov	r4, r0
   155b8:	mov	r5, r1
   155bc:	bl	1545c <__assert_fail@plt+0x3748>
   155c0:	mov	r3, #0
   155c4:	mvn	r2, #0
   155c8:	cmp	r1, r3
   155cc:	cmpeq	r0, r2
   155d0:	popls	{r4, r5, r6, pc}
   155d4:	mov	r1, r5
   155d8:	mov	r0, r4
   155dc:	bl	15570 <__assert_fail@plt+0x385c>
   155e0:	ldr	r3, [pc, #8]	; 155f0 <__assert_fail@plt+0x38dc>
   155e4:	add	r3, pc, r3
   155e8:	str	r0, [r3]
   155ec:	bx	lr
   155f0:	muleq	r1, r8, sl
   155f4:	ldr	r3, [pc, #1648]	; 15c6c <__assert_fail@plt+0x3f58>
   155f8:	ldr	ip, [pc, #1648]	; 15c70 <__assert_fail@plt+0x3f5c>
   155fc:	add	r3, pc, r3
   15600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15604:	mov	r5, r1
   15608:	ldr	r1, [r3, ip]
   1560c:	sub	sp, sp, #52	; 0x34
   15610:	mov	ip, r1
   15614:	mov	r8, r0
   15618:	str	r1, [sp, #24]
   1561c:	mov	r0, #0
   15620:	mov	r1, #0
   15624:	ldr	r3, [ip]
   15628:	strd	r0, [r5]
   1562c:	mov	r9, r2
   15630:	str	r3, [sp, #44]	; 0x2c
   15634:	bl	11b1c <__errno_location@plt>
   15638:	cmp	r8, #0
   1563c:	mov	r4, r0
   15640:	beq	15820 <__assert_fail@plt+0x3b0c>
   15644:	ldrsb	fp, [r8]
   15648:	cmp	fp, #0
   1564c:	beq	15820 <__assert_fail@plt+0x3b0c>
   15650:	bl	11a8c <__ctype_b_loc@plt>
   15654:	mov	r2, r8
   15658:	ldr	r1, [r0]
   1565c:	b	15664 <__assert_fail@plt+0x3950>
   15660:	ldrsb	fp, [r2, #1]!
   15664:	uxtb	r3, fp
   15668:	lsl	r3, r3, #1
   1566c:	ldrh	ip, [r1, r3]
   15670:	ands	ip, ip, #8192	; 0x2000
   15674:	bne	15660 <__assert_fail@plt+0x394c>
   15678:	cmp	fp, #45	; 0x2d
   1567c:	beq	15820 <__assert_fail@plt+0x3b0c>
   15680:	add	fp, sp, #40	; 0x28
   15684:	mov	r3, ip
   15688:	mov	r2, ip
   1568c:	str	ip, [r4]
   15690:	mov	r1, fp
   15694:	mov	r0, r8
   15698:	str	ip, [sp, #40]	; 0x28
   1569c:	bl	118ac <__strtoull_internal@plt>
   156a0:	ldr	sl, [sp, #40]	; 0x28
   156a4:	cmp	sl, r8
   156a8:	mov	r2, r0
   156ac:	mov	r3, r1
   156b0:	ldr	r0, [r4]
   156b4:	strd	r2, [sp, #16]
   156b8:	beq	159a0 <__assert_fail@plt+0x3c8c>
   156bc:	cmp	r0, #0
   156c0:	bne	15848 <__assert_fail@plt+0x3b34>
   156c4:	cmp	sl, #0
   156c8:	beq	159d4 <__assert_fail@plt+0x3cc0>
   156cc:	ldrsb	r0, [sl]
   156d0:	cmp	r0, #0
   156d4:	beq	159c8 <__assert_fail@plt+0x3cb4>
   156d8:	mov	r8, #0
   156dc:	mov	r2, #0
   156e0:	mov	r3, #0
   156e4:	str	r9, [sp, #32]
   156e8:	mov	r6, fp
   156ec:	mov	r9, sl
   156f0:	mov	r7, r8
   156f4:	mov	sl, r2
   156f8:	mov	fp, r3
   156fc:	str	r5, [sp, #28]
   15700:	ldrsb	r2, [r9, #1]
   15704:	cmp	r2, #105	; 0x69
   15708:	beq	1588c <__assert_fail@plt+0x3b78>
   1570c:	bic	r1, r2, #32
   15710:	cmp	r1, #66	; 0x42
   15714:	bne	159ac <__assert_fail@plt+0x3c98>
   15718:	ldrsb	r2, [r9, #2]
   1571c:	cmp	r2, #0
   15720:	beq	15b90 <__assert_fail@plt+0x3e7c>
   15724:	bl	11c48 <localeconv@plt>
   15728:	cmp	r0, #0
   1572c:	beq	15820 <__assert_fail@plt+0x3b0c>
   15730:	ldr	r2, [r0]
   15734:	cmp	r2, #0
   15738:	beq	15820 <__assert_fail@plt+0x3b0c>
   1573c:	mov	r0, r2
   15740:	str	r2, [sp]
   15744:	bl	11ac8 <strlen@plt>
   15748:	orrs	r3, sl, fp
   1574c:	mov	r5, r0
   15750:	bne	15820 <__assert_fail@plt+0x3b0c>
   15754:	ldrsb	r1, [r9]
   15758:	cmp	r1, #0
   1575c:	beq	15820 <__assert_fail@plt+0x3b0c>
   15760:	ldr	r2, [sp]
   15764:	mov	r1, r9
   15768:	mov	r0, r2
   1576c:	mov	r2, r5
   15770:	bl	11ccc <strncmp@plt>
   15774:	cmp	r0, #0
   15778:	bne	15820 <__assert_fail@plt+0x3b0c>
   1577c:	ldrsb	r2, [r9, r5]
   15780:	add	r5, r9, r5
   15784:	cmp	r2, #48	; 0x30
   15788:	bne	157a8 <__assert_fail@plt+0x3a94>
   1578c:	add	r8, r8, #1
   15790:	sub	r1, r8, r5
   15794:	mov	r3, r5
   15798:	add	r8, r3, r1
   1579c:	ldrsb	r2, [r3, #1]!
   157a0:	cmp	r2, #48	; 0x30
   157a4:	beq	15798 <__assert_fail@plt+0x3a84>
   157a8:	mov	r3, #0
   157ac:	str	r7, [r4]
   157b0:	mov	r2, r3
   157b4:	mov	r1, r6
   157b8:	mov	r0, r5
   157bc:	str	r7, [sp, #40]	; 0x28
   157c0:	bl	118ac <__strtoull_internal@plt>
   157c4:	ldr	r9, [sp, #40]	; 0x28
   157c8:	cmp	r9, r5
   157cc:	mov	sl, r0
   157d0:	mov	fp, r1
   157d4:	beq	1599c <__assert_fail@plt+0x3c88>
   157d8:	ldr	ip, [r4]
   157dc:	cmp	ip, #0
   157e0:	beq	15878 <__assert_fail@plt+0x3b64>
   157e4:	subs	r3, r0, #1
   157e8:	str	r3, [sp, #8]
   157ec:	sbc	r3, r1, #0
   157f0:	str	r3, [sp, #12]
   157f4:	ldrd	r2, [sp, #8]
   157f8:	mvn	r1, #0
   157fc:	mvn	r0, #2
   15800:	cmp	r3, r1
   15804:	cmpeq	r2, r0
   15808:	bhi	15bcc <__assert_fail@plt+0x3eb8>
   1580c:	cmp	r9, #0
   15810:	beq	15820 <__assert_fail@plt+0x3b0c>
   15814:	ldrsb	r2, [r9]
   15818:	cmp	r2, #0
   1581c:	bne	15700 <__assert_fail@plt+0x39ec>
   15820:	mov	r3, #22
   15824:	mvn	r0, #21
   15828:	str	r3, [r4]
   1582c:	ldr	r3, [sp, #24]
   15830:	ldr	r2, [sp, #44]	; 0x2c
   15834:	ldr	r3, [r3]
   15838:	cmp	r2, r3
   1583c:	bne	15c68 <__assert_fail@plt+0x3f54>
   15840:	add	sp, sp, #52	; 0x34
   15844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15848:	subs	r6, r2, #1
   1584c:	sbc	r7, r3, #0
   15850:	mvn	r3, #0
   15854:	mvn	r2, #2
   15858:	cmp	r7, r3
   1585c:	cmpeq	r6, r2
   15860:	bls	156c4 <__assert_fail@plt+0x39b0>
   15864:	rsb	r0, r0, #0
   15868:	cmp	r0, #0
   1586c:	bge	1582c <__assert_fail@plt+0x3b18>
   15870:	rsb	r3, r0, #0
   15874:	b	15828 <__assert_fail@plt+0x3b14>
   15878:	orrs	r3, sl, fp
   1587c:	bne	1580c <__assert_fail@plt+0x3af8>
   15880:	ldrsb	r2, [r9, #1]
   15884:	cmp	r2, #105	; 0x69
   15888:	bne	1570c <__assert_fail@plt+0x39f8>
   1588c:	ldrsb	r2, [r9, #2]
   15890:	bic	r2, r2, #32
   15894:	cmp	r2, #66	; 0x42
   15898:	bne	15724 <__assert_fail@plt+0x3a10>
   1589c:	ldrsb	r2, [r9, #3]
   158a0:	cmp	r2, #0
   158a4:	bne	15724 <__assert_fail@plt+0x3a10>
   158a8:	strd	sl, [sp]
   158ac:	mov	sl, r9
   158b0:	ldr	r9, [sp, #32]
   158b4:	mov	r3, #1024	; 0x400
   158b8:	ldr	r5, [sp, #28]
   158bc:	str	r3, [sp, #28]
   158c0:	ldrsb	r7, [sl]
   158c4:	ldr	r6, [pc, #936]	; 15c74 <__assert_fail@plt+0x3f60>
   158c8:	add	r6, pc, r6
   158cc:	mov	r1, r7
   158d0:	mov	r0, r6
   158d4:	bl	11ad4 <strchr@plt>
   158d8:	cmp	r0, #0
   158dc:	beq	15bac <__assert_fail@plt+0x3e98>
   158e0:	sub	ip, r0, r6
   158e4:	add	fp, ip, #1
   158e8:	cmp	fp, #0
   158ec:	beq	159b8 <__assert_fail@plt+0x3ca4>
   158f0:	ldr	r3, [sp, #20]
   158f4:	ldr	r6, [sp, #28]
   158f8:	cmp	r3, #0
   158fc:	mov	r0, #0
   15900:	asr	r7, r6, #31
   15904:	mov	r1, #0
   15908:	bne	15c08 <__assert_fail@plt+0x3ef4>
   1590c:	orrs	r3, r0, r1
   15910:	bne	159fc <__assert_fail@plt+0x3ce8>
   15914:	str	fp, [sp, #32]
   15918:	sub	ip, ip, #1
   1591c:	str	r8, [sp, #36]	; 0x24
   15920:	mov	fp, r4
   15924:	ldrd	r0, [sp, #16]
   15928:	mov	lr, r5
   1592c:	mov	sl, r9
   15930:	b	15940 <__assert_fail@plt+0x3c2c>
   15934:	orrs	r3, r4, r5
   15938:	sub	ip, ip, #1
   1593c:	bne	159e4 <__assert_fail@plt+0x3cd0>
   15940:	mul	r2, r0, r7
   15944:	cmn	ip, #1
   15948:	mla	r2, r6, r1, r2
   1594c:	umull	r0, r1, r0, r6
   15950:	add	r2, r2, r1
   15954:	mov	r1, r2
   15958:	beq	15b70 <__assert_fail@plt+0x3e5c>
   1595c:	cmp	r2, #0
   15960:	mov	r4, #0
   15964:	mov	r5, #0
   15968:	beq	15934 <__assert_fail@plt+0x3c20>
   1596c:	umull	r2, r3, r6, r2
   15970:	umull	r8, r9, r0, r6
   15974:	strd	r2, [sp, #8]
   15978:	mov	r8, r9
   1597c:	ldr	r3, [sp, #12]
   15980:	adds	r8, r2, r8
   15984:	mov	r2, #0
   15988:	adc	r3, r3, r2
   1598c:	cmp	r3, r2
   15990:	movne	r4, #1
   15994:	movne	r5, #0
   15998:	b	15934 <__assert_fail@plt+0x3c20>
   1599c:	ldr	r0, [r4]
   159a0:	cmp	r0, #0
   159a4:	beq	15820 <__assert_fail@plt+0x3b0c>
   159a8:	b	15864 <__assert_fail@plt+0x3b50>
   159ac:	cmp	r2, #0
   159b0:	bne	15724 <__assert_fail@plt+0x3a10>
   159b4:	b	158a8 <__assert_fail@plt+0x3b94>
   159b8:	cmp	r9, #0
   159bc:	movne	r0, fp
   159c0:	bne	15a08 <__assert_fail@plt+0x3cf4>
   159c4:	mov	r0, r9
   159c8:	ldrd	r2, [sp, #16]
   159cc:	strd	r2, [r5]
   159d0:	b	1582c <__assert_fail@plt+0x3b18>
   159d4:	ldrd	r2, [sp, #16]
   159d8:	mov	r0, sl
   159dc:	strd	r2, [r5]
   159e0:	b	1582c <__assert_fail@plt+0x3b18>
   159e4:	mov	r4, fp
   159e8:	ldr	r8, [sp, #36]	; 0x24
   159ec:	ldr	fp, [sp, #32]
   159f0:	mov	r5, lr
   159f4:	mov	r9, sl
   159f8:	strd	r0, [sp, #16]
   159fc:	mvn	r0, #33	; 0x21
   15a00:	cmp	r9, #0
   15a04:	beq	15a0c <__assert_fail@plt+0x3cf8>
   15a08:	str	fp, [r9]
   15a0c:	ldrd	r2, [sp]
   15a10:	mov	r1, r2
   15a14:	orrs	r3, r1, r3
   15a18:	movne	r3, #1
   15a1c:	moveq	r3, #0
   15a20:	cmp	fp, #0
   15a24:	moveq	r3, #0
   15a28:	cmp	r3, #0
   15a2c:	beq	15b64 <__assert_fail@plt+0x3e50>
   15a30:	ldr	r3, [pc, #576]	; 15c78 <__assert_fail@plt+0x3f64>
   15a34:	ldr	r1, [pc, #576]	; 15c7c <__assert_fail@plt+0x3f68>
   15a38:	umull	ip, r3, r3, r8
   15a3c:	smull	ip, r1, r1, r8
   15a40:	lsr	r3, r3, #1
   15a44:	rsb	r1, r1, r8, asr #31
   15a48:	add	r3, r3, r3, lsl #1
   15a4c:	add	r1, r1, fp
   15a50:	subs	r3, r8, r3
   15a54:	sub	r6, r1, #1
   15a58:	bne	15bd4 <__assert_fail@plt+0x3ec0>
   15a5c:	ldrd	r8, [sp]
   15a60:	adds	r3, r8, r8
   15a64:	adc	r2, r9, r9
   15a68:	adds	r3, r3, r8
   15a6c:	adc	r2, r2, r9
   15a70:	lsl	ip, r3, #5
   15a74:	lsl	lr, r2, #5
   15a78:	orr	lr, lr, r3, lsr #27
   15a7c:	adds	r3, r3, ip
   15a80:	adc	r2, r2, lr
   15a84:	adds	r3, r8, r3
   15a88:	str	r3, [sp]
   15a8c:	ldr	r3, [sp, #4]
   15a90:	adc	r3, r3, r2
   15a94:	str	r3, [sp, #4]
   15a98:	cmp	r6, #0
   15a9c:	blt	15820 <__assert_fail@plt+0x3b0c>
   15aa0:	beq	15b48 <__assert_fail@plt+0x3e34>
   15aa4:	ldr	r3, [sp, #4]
   15aa8:	ldr	r8, [sp, #28]
   15aac:	cmp	r3, #0
   15ab0:	mov	r6, #0
   15ab4:	asr	r9, r8, #31
   15ab8:	mov	r7, #0
   15abc:	bne	15c3c <__assert_fail@plt+0x3f28>
   15ac0:	orrs	r3, r6, r7
   15ac4:	bne	15b48 <__assert_fail@plt+0x3e34>
   15ac8:	sub	r1, r1, #3
   15acc:	ldrd	r2, [sp]
   15ad0:	mov	lr, r4
   15ad4:	str	r5, [sp, #8]
   15ad8:	b	15ae8 <__assert_fail@plt+0x3dd4>
   15adc:	orrs	ip, r6, r7
   15ae0:	sub	r1, r1, #1
   15ae4:	bne	15b3c <__assert_fail@plt+0x3e28>
   15ae8:	mul	ip, r2, r9
   15aec:	cmn	r1, #1
   15af0:	mla	ip, r8, r3, ip
   15af4:	umull	r2, r3, r2, r8
   15af8:	add	ip, ip, r3
   15afc:	mov	r3, ip
   15b00:	beq	15b3c <__assert_fail@plt+0x3e28>
   15b04:	cmp	ip, #0
   15b08:	mov	r6, #0
   15b0c:	mov	r7, #0
   15b10:	beq	15adc <__assert_fail@plt+0x3dc8>
   15b14:	umull	sl, fp, r2, r8
   15b18:	umull	r4, r5, r8, ip
   15b1c:	mov	ip, fp
   15b20:	adds	ip, r4, ip
   15b24:	mov	ip, #0
   15b28:	adc	ip, r5, ip
   15b2c:	cmp	ip, #0
   15b30:	movne	r6, #1
   15b34:	movne	r7, #0
   15b38:	b	15adc <__assert_fail@plt+0x3dc8>
   15b3c:	ldr	r5, [sp, #8]
   15b40:	mov	r4, lr
   15b44:	strd	r2, [sp]
   15b48:	ldrd	r2, [sp]
   15b4c:	ldr	r1, [sp, #16]
   15b50:	adds	r1, r1, r2
   15b54:	str	r1, [sp, #16]
   15b58:	ldr	r1, [sp, #20]
   15b5c:	adc	r3, r1, r3
   15b60:	str	r3, [sp, #20]
   15b64:	ldrd	r2, [sp, #16]
   15b68:	strd	r2, [r5]
   15b6c:	b	15868 <__assert_fail@plt+0x3b54>
   15b70:	mov	r4, fp
   15b74:	strd	r0, [sp, #16]
   15b78:	ldr	r8, [sp, #36]	; 0x24
   15b7c:	ldr	fp, [sp, #32]
   15b80:	mov	r5, lr
   15b84:	mov	r9, sl
   15b88:	mov	r0, #0
   15b8c:	b	15a00 <__assert_fail@plt+0x3cec>
   15b90:	mov	r3, #1000	; 0x3e8
   15b94:	strd	sl, [sp]
   15b98:	ldr	r5, [sp, #28]
   15b9c:	mov	sl, r9
   15ba0:	str	r3, [sp, #28]
   15ba4:	ldr	r9, [sp, #32]
   15ba8:	b	158c0 <__assert_fail@plt+0x3bac>
   15bac:	ldr	r6, [pc, #204]	; 15c80 <__assert_fail@plt+0x3f6c>
   15bb0:	mov	r1, r7
   15bb4:	add	r6, pc, r6
   15bb8:	mov	r0, r6
   15bbc:	bl	11ad4 <strchr@plt>
   15bc0:	cmp	r0, #0
   15bc4:	bne	158e0 <__assert_fail@plt+0x3bcc>
   15bc8:	b	15820 <__assert_fail@plt+0x3b0c>
   15bcc:	mov	r0, ip
   15bd0:	b	15864 <__assert_fail@plt+0x3b50>
   15bd4:	cmp	r3, #1
   15bd8:	bne	15a98 <__assert_fail@plt+0x3d84>
   15bdc:	ldrd	r8, [sp]
   15be0:	lsl	r2, r9, #2
   15be4:	lsl	r3, r8, #2
   15be8:	adds	r3, r3, r8
   15bec:	orr	r2, r2, r8, lsr #30
   15bf0:	adc	r2, r2, r9
   15bf4:	adds	r3, r3, r3
   15bf8:	str	r3, [sp]
   15bfc:	adc	r3, r2, r2
   15c00:	str	r3, [sp, #4]
   15c04:	b	15a98 <__assert_fail@plt+0x3d84>
   15c08:	ldr	lr, [sp, #28]
   15c0c:	ldr	r3, [sp, #16]
   15c10:	ldr	sl, [sp, #20]
   15c14:	umull	r2, r3, r3, lr
   15c18:	str	r3, [sp, #8]
   15c1c:	mov	r3, #0
   15c20:	str	r3, [sp, #12]
   15c24:	ldrd	r2, [sp, #8]
   15c28:	umlal	r2, r3, sl, lr
   15c2c:	cmp	r3, #0
   15c30:	movne	r0, #1
   15c34:	movne	r1, #0
   15c38:	b	1590c <__assert_fail@plt+0x3bf8>
   15c3c:	ldr	r3, [sp]
   15c40:	ldr	ip, [sp, #28]
   15c44:	ldr	lr, [sp, #4]
   15c48:	umull	sl, fp, r3, ip
   15c4c:	mov	r3, #0
   15c50:	mov	r2, fp
   15c54:	umlal	r2, r3, lr, ip
   15c58:	cmp	r3, #0
   15c5c:	movne	r6, #1
   15c60:	movne	r7, #0
   15c64:	b	15ac0 <__assert_fail@plt+0x3dac>
   15c68:	bl	118e8 <__stack_chk_fail@plt>
   15c6c:	andeq	r7, r1, r8, lsl r8
   15c70:	ldrdeq	r0, [r0], -r4
   15c74:	andeq	r5, r0, ip, ror sp
   15c78:	bge	feac072c <optarg@@GLIBC_2.4+0xfea9168c>
   15c7c:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   15c80:	muleq	r0, ip, sl
   15c84:	mov	r2, #0
   15c88:	b	155f4 <__assert_fail@plt+0x38e0>
   15c8c:	push	{r4, r5, r6, lr}
   15c90:	subs	r5, r0, #0
   15c94:	mov	r6, r1
   15c98:	beq	15d04 <__assert_fail@plt+0x3ff0>
   15c9c:	ldrsb	r4, [r5]
   15ca0:	cmp	r4, #0
   15ca4:	beq	15d18 <__assert_fail@plt+0x4004>
   15ca8:	bl	11a8c <__ctype_b_loc@plt>
   15cac:	mov	r3, r5
   15cb0:	ldr	r0, [r0]
   15cb4:	b	15ccc <__assert_fail@plt+0x3fb8>
   15cb8:	adds	r3, r3, #1
   15cbc:	beq	15d04 <__assert_fail@plt+0x3ff0>
   15cc0:	ldrsb	r4, [r3]
   15cc4:	cmp	r4, #0
   15cc8:	beq	15ce0 <__assert_fail@plt+0x3fcc>
   15ccc:	uxtb	r4, r4
   15cd0:	lsl	r4, r4, #1
   15cd4:	ldrh	r2, [r0, r4]
   15cd8:	tst	r2, #2048	; 0x800
   15cdc:	bne	15cb8 <__assert_fail@plt+0x3fa4>
   15ce0:	cmp	r6, #0
   15ce4:	strne	r3, [r6]
   15ce8:	cmp	r5, r3
   15cec:	bcs	15d10 <__assert_fail@plt+0x3ffc>
   15cf0:	ldrsb	r3, [r3]
   15cf4:	cmp	r3, #0
   15cf8:	bne	15d10 <__assert_fail@plt+0x3ffc>
   15cfc:	mov	r0, #1
   15d00:	pop	{r4, r5, r6, pc}
   15d04:	cmp	r6, #0
   15d08:	movne	r3, #0
   15d0c:	strne	r3, [r6]
   15d10:	mov	r0, #0
   15d14:	pop	{r4, r5, r6, pc}
   15d18:	cmp	r1, #0
   15d1c:	strne	r5, [r1]
   15d20:	b	15d10 <__assert_fail@plt+0x3ffc>
   15d24:	push	{r4, r5, r6, lr}
   15d28:	subs	r5, r0, #0
   15d2c:	mov	r6, r1
   15d30:	beq	15d9c <__assert_fail@plt+0x4088>
   15d34:	ldrsb	r4, [r5]
   15d38:	cmp	r4, #0
   15d3c:	beq	15db0 <__assert_fail@plt+0x409c>
   15d40:	bl	11a8c <__ctype_b_loc@plt>
   15d44:	mov	r3, r5
   15d48:	ldr	r0, [r0]
   15d4c:	b	15d64 <__assert_fail@plt+0x4050>
   15d50:	adds	r3, r3, #1
   15d54:	beq	15d9c <__assert_fail@plt+0x4088>
   15d58:	ldrsb	r4, [r3]
   15d5c:	cmp	r4, #0
   15d60:	beq	15d78 <__assert_fail@plt+0x4064>
   15d64:	uxtb	r4, r4
   15d68:	lsl	r4, r4, #1
   15d6c:	ldrh	r2, [r0, r4]
   15d70:	tst	r2, #4096	; 0x1000
   15d74:	bne	15d50 <__assert_fail@plt+0x403c>
   15d78:	cmp	r6, #0
   15d7c:	strne	r3, [r6]
   15d80:	cmp	r5, r3
   15d84:	bcs	15da8 <__assert_fail@plt+0x4094>
   15d88:	ldrsb	r3, [r3]
   15d8c:	cmp	r3, #0
   15d90:	bne	15da8 <__assert_fail@plt+0x4094>
   15d94:	mov	r0, #1
   15d98:	pop	{r4, r5, r6, pc}
   15d9c:	cmp	r6, #0
   15da0:	movne	r3, #0
   15da4:	strne	r3, [r6]
   15da8:	mov	r0, #0
   15dac:	pop	{r4, r5, r6, pc}
   15db0:	cmp	r1, #0
   15db4:	strne	r5, [r1]
   15db8:	b	15da8 <__assert_fail@plt+0x4094>
   15dbc:	push	{r1, r2, r3}
   15dc0:	ldr	r3, [pc, #188]	; 15e84 <__assert_fail@plt+0x4170>
   15dc4:	ldr	r2, [pc, #188]	; 15e88 <__assert_fail@plt+0x4174>
   15dc8:	add	r3, pc, r3
   15dcc:	push	{r4, r5, r6, r7, r8, lr}
   15dd0:	sub	sp, sp, #12
   15dd4:	ldr	r7, [r3, r2]
   15dd8:	ldr	r8, [sp, #36]	; 0x24
   15ddc:	mov	r6, r0
   15de0:	ldr	r3, [r7]
   15de4:	add	r4, sp, #48	; 0x30
   15de8:	str	r3, [sp, #4]
   15dec:	b	15e08 <__assert_fail@plt+0x40f4>
   15df0:	mov	r1, r5
   15df4:	mov	r0, r6
   15df8:	bl	117ec <strcmp@plt>
   15dfc:	add	r4, r4, #8
   15e00:	cmp	r0, #0
   15e04:	beq	15e40 <__assert_fail@plt+0x412c>
   15e08:	ldr	r1, [r4, #-8]
   15e0c:	sub	r3, r4, #4
   15e10:	cmp	r1, #0
   15e14:	str	r3, [sp]
   15e18:	beq	15e60 <__assert_fail@plt+0x414c>
   15e1c:	ldr	r5, [r4, #-4]
   15e20:	str	r4, [sp]
   15e24:	cmp	r5, #0
   15e28:	beq	15e60 <__assert_fail@plt+0x414c>
   15e2c:	mov	r0, r6
   15e30:	bl	117ec <strcmp@plt>
   15e34:	cmp	r0, #0
   15e38:	bne	15df0 <__assert_fail@plt+0x40dc>
   15e3c:	mov	r0, #1
   15e40:	ldr	r2, [sp, #4]
   15e44:	ldr	r3, [r7]
   15e48:	cmp	r2, r3
   15e4c:	bne	15e80 <__assert_fail@plt+0x416c>
   15e50:	add	sp, sp, #12
   15e54:	pop	{r4, r5, r6, r7, r8, lr}
   15e58:	add	sp, sp, #12
   15e5c:	bx	lr
   15e60:	ldr	r1, [pc, #36]	; 15e8c <__assert_fail@plt+0x4178>
   15e64:	mov	r3, r6
   15e68:	add	r1, pc, r1
   15e6c:	mov	r2, r8
   15e70:	ldr	r0, [r1]
   15e74:	ldr	r1, [pc, #20]	; 15e90 <__assert_fail@plt+0x417c>
   15e78:	add	r1, pc, r1
   15e7c:	bl	11c0c <errx@plt>
   15e80:	bl	118e8 <__stack_chk_fail@plt>
   15e84:	andeq	r7, r1, ip, asr #32
   15e88:	ldrdeq	r0, [r0], -r4
   15e8c:	andeq	r9, r1, r4, lsl r2
   15e90:	andeq	r5, r0, r0, asr #15
   15e94:	cmp	r1, #0
   15e98:	beq	15ee4 <__assert_fail@plt+0x41d0>
   15e9c:	ldrsb	r3, [r0]
   15ea0:	cmp	r3, #0
   15ea4:	beq	15ee4 <__assert_fail@plt+0x41d0>
   15ea8:	sxtb	r2, r2
   15eac:	cmp	r3, r2
   15eb0:	bxeq	lr
   15eb4:	add	r1, r0, r1
   15eb8:	add	r3, r0, #1
   15ebc:	b	15ed8 <__assert_fail@plt+0x41c4>
   15ec0:	ldrsb	ip, [r3]
   15ec4:	add	r3, r3, #1
   15ec8:	cmp	ip, #0
   15ecc:	beq	15ee4 <__assert_fail@plt+0x41d0>
   15ed0:	cmp	ip, r2
   15ed4:	bxeq	lr
   15ed8:	cmp	r3, r1
   15edc:	mov	r0, r3
   15ee0:	bne	15ec0 <__assert_fail@plt+0x41ac>
   15ee4:	mov	r0, #0
   15ee8:	bx	lr
   15eec:	push	{r4, r5, r6, lr}
   15ef0:	mov	r2, #10
   15ef4:	mov	r4, r0
   15ef8:	mov	r5, r1
   15efc:	bl	155b0 <__assert_fail@plt+0x389c>
   15f00:	cmp	r0, #65536	; 0x10000
   15f04:	bcs	15f10 <__assert_fail@plt+0x41fc>
   15f08:	uxth	r0, r0
   15f0c:	pop	{r4, r5, r6, pc}
   15f10:	mov	r1, r5
   15f14:	mov	r0, r4
   15f18:	bl	15570 <__assert_fail@plt+0x385c>
   15f1c:	push	{r4, r5, r6, lr}
   15f20:	mov	r2, #16
   15f24:	mov	r4, r0
   15f28:	mov	r5, r1
   15f2c:	bl	155b0 <__assert_fail@plt+0x389c>
   15f30:	cmp	r0, #65536	; 0x10000
   15f34:	bcs	15f40 <__assert_fail@plt+0x422c>
   15f38:	uxth	r0, r0
   15f3c:	pop	{r4, r5, r6, pc}
   15f40:	mov	r1, r5
   15f44:	mov	r0, r4
   15f48:	bl	15570 <__assert_fail@plt+0x385c>
   15f4c:	mov	r2, #10
   15f50:	b	155b0 <__assert_fail@plt+0x389c>
   15f54:	mov	r2, #16
   15f58:	b	155b0 <__assert_fail@plt+0x389c>
   15f5c:	ldr	r2, [pc, #236]	; 16050 <__assert_fail@plt+0x433c>
   15f60:	ldr	ip, [pc, #236]	; 16054 <__assert_fail@plt+0x4340>
   15f64:	add	r2, pc, r2
   15f68:	push	{r4, r5, r6, r7, r8, lr}
   15f6c:	sub	sp, sp, #8
   15f70:	ldr	r7, [r2, ip]
   15f74:	mov	r5, #0
   15f78:	mov	r4, r0
   15f7c:	ldr	r3, [r7]
   15f80:	mov	r8, r1
   15f84:	str	r5, [sp]
   15f88:	str	r3, [sp, #4]
   15f8c:	bl	11b1c <__errno_location@plt>
   15f90:	cmp	r4, r5
   15f94:	str	r5, [r0]
   15f98:	beq	15fa8 <__assert_fail@plt+0x4294>
   15f9c:	ldrsb	r3, [r4]
   15fa0:	cmp	r3, r5
   15fa4:	bne	15fc8 <__assert_fail@plt+0x42b4>
   15fa8:	ldr	r1, [pc, #168]	; 16058 <__assert_fail@plt+0x4344>
   15fac:	mov	r3, r4
   15fb0:	add	r1, pc, r1
   15fb4:	mov	r2, r8
   15fb8:	ldr	r0, [r1]
   15fbc:	ldr	r1, [pc, #152]	; 1605c <__assert_fail@plt+0x4348>
   15fc0:	add	r1, pc, r1
   15fc4:	bl	11c0c <errx@plt>
   15fc8:	mov	r6, r0
   15fcc:	mov	r2, #10
   15fd0:	mov	r3, r5
   15fd4:	mov	r1, sp
   15fd8:	mov	r0, r4
   15fdc:	bl	11c6c <__strtoll_internal@plt>
   15fe0:	ldr	r2, [r6]
   15fe4:	cmp	r2, r5
   15fe8:	bne	16024 <__assert_fail@plt+0x4310>
   15fec:	ldr	r3, [sp]
   15ff0:	cmp	r3, r4
   15ff4:	beq	15fa8 <__assert_fail@plt+0x4294>
   15ff8:	cmp	r3, r5
   15ffc:	beq	1600c <__assert_fail@plt+0x42f8>
   16000:	ldrsb	r3, [r3]
   16004:	cmp	r3, r5
   16008:	bne	15fa8 <__assert_fail@plt+0x4294>
   1600c:	ldr	r2, [sp, #4]
   16010:	ldr	r3, [r7]
   16014:	cmp	r2, r3
   16018:	bne	1604c <__assert_fail@plt+0x4338>
   1601c:	add	sp, sp, #8
   16020:	pop	{r4, r5, r6, r7, r8, pc}
   16024:	ldr	r3, [pc, #52]	; 16060 <__assert_fail@plt+0x434c>
   16028:	cmp	r2, #34	; 0x22
   1602c:	add	r3, pc, r3
   16030:	ldr	r0, [r3]
   16034:	bne	15fa8 <__assert_fail@plt+0x4294>
   16038:	ldr	r1, [pc, #36]	; 16064 <__assert_fail@plt+0x4350>
   1603c:	mov	r3, r4
   16040:	mov	r2, r8
   16044:	add	r1, pc, r1
   16048:	bl	11948 <err@plt>
   1604c:	bl	118e8 <__stack_chk_fail@plt>
   16050:			; <UNDEFINED> instruction: 0x00016eb0
   16054:	ldrdeq	r0, [r0], -r4
   16058:	andeq	r9, r1, ip, asr #1
   1605c:	andeq	r5, r0, r8, ror r6
   16060:	andeq	r9, r1, r0, asr r0
   16064:	strdeq	r5, [r0], -r4
   16068:	push	{r4, r5, r6, r7, r8, lr}
   1606c:	mov	r7, r0
   16070:	mov	r6, r1
   16074:	bl	15f5c <__assert_fail@plt+0x4248>
   16078:	mov	r3, #0
   1607c:	mvn	r2, #0
   16080:	adds	r4, r0, #-2147483648	; 0x80000000
   16084:	adc	r5, r1, #0
   16088:	cmp	r5, r3
   1608c:	cmpeq	r4, r2
   16090:	popls	{r4, r5, r6, r7, r8, pc}
   16094:	bl	11b1c <__errno_location@plt>
   16098:	ldr	ip, [pc, #32]	; 160c0 <__assert_fail@plt+0x43ac>
   1609c:	ldr	r1, [pc, #32]	; 160c4 <__assert_fail@plt+0x43b0>
   160a0:	add	ip, pc, ip
   160a4:	mov	lr, #34	; 0x22
   160a8:	mov	r3, r7
   160ac:	mov	r2, r6
   160b0:	add	r1, pc, r1
   160b4:	str	lr, [r0]
   160b8:	ldr	r0, [ip]
   160bc:	bl	11948 <err@plt>
   160c0:	ldrdeq	r8, [r1], -ip
   160c4:	andeq	r5, r0, r8, lsl #11
   160c8:	push	{r4, r5, r6, lr}
   160cc:	mov	r5, r0
   160d0:	mov	r4, r1
   160d4:	bl	16068 <__assert_fail@plt+0x4354>
   160d8:	add	r3, r0, #32768	; 0x8000
   160dc:	cmp	r3, #65536	; 0x10000
   160e0:	bcs	160ec <__assert_fail@plt+0x43d8>
   160e4:	sxth	r0, r0
   160e8:	pop	{r4, r5, r6, pc}
   160ec:	bl	11b1c <__errno_location@plt>
   160f0:	ldr	ip, [pc, #32]	; 16118 <__assert_fail@plt+0x4404>
   160f4:	ldr	r1, [pc, #32]	; 1611c <__assert_fail@plt+0x4408>
   160f8:	add	ip, pc, ip
   160fc:	mov	lr, #34	; 0x22
   16100:	mov	r3, r5
   16104:	mov	r2, r4
   16108:	add	r1, pc, r1
   1610c:	str	lr, [r0]
   16110:	ldr	r0, [ip]
   16114:	bl	11948 <err@plt>
   16118:	andeq	r8, r1, r4, lsl #31
   1611c:	andeq	r5, r0, r0, lsr r5
   16120:	mov	r2, #10
   16124:	b	1545c <__assert_fail@plt+0x3748>
   16128:	mov	r2, #16
   1612c:	b	1545c <__assert_fail@plt+0x3748>
   16130:	ldr	r2, [pc, #228]	; 1621c <__assert_fail@plt+0x4508>
   16134:	ldr	r3, [pc, #228]	; 16220 <__assert_fail@plt+0x450c>
   16138:	add	r2, pc, r2
   1613c:	push	{r4, r5, r6, r7, r8, lr}
   16140:	sub	sp, sp, #8
   16144:	ldr	r7, [r2, r3]
   16148:	mov	r5, #0
   1614c:	mov	r4, r0
   16150:	ldr	r3, [r7]
   16154:	mov	r8, r1
   16158:	str	r5, [sp]
   1615c:	str	r3, [sp, #4]
   16160:	bl	11b1c <__errno_location@plt>
   16164:	cmp	r4, r5
   16168:	str	r5, [r0]
   1616c:	beq	1617c <__assert_fail@plt+0x4468>
   16170:	ldrsb	r3, [r4]
   16174:	cmp	r3, r5
   16178:	bne	1619c <__assert_fail@plt+0x4488>
   1617c:	ldr	r1, [pc, #160]	; 16224 <__assert_fail@plt+0x4510>
   16180:	mov	r3, r4
   16184:	add	r1, pc, r1
   16188:	mov	r2, r8
   1618c:	ldr	r0, [r1]
   16190:	ldr	r1, [pc, #144]	; 16228 <__assert_fail@plt+0x4514>
   16194:	add	r1, pc, r1
   16198:	bl	11c0c <errx@plt>
   1619c:	mov	r6, r0
   161a0:	mov	r1, sp
   161a4:	mov	r0, r4
   161a8:	bl	11b94 <strtod@plt>
   161ac:	ldr	r2, [r6]
   161b0:	cmp	r2, r5
   161b4:	bne	161f0 <__assert_fail@plt+0x44dc>
   161b8:	ldr	r3, [sp]
   161bc:	cmp	r3, r4
   161c0:	beq	1617c <__assert_fail@plt+0x4468>
   161c4:	cmp	r3, r5
   161c8:	beq	161d8 <__assert_fail@plt+0x44c4>
   161cc:	ldrsb	r3, [r3]
   161d0:	cmp	r3, r5
   161d4:	bne	1617c <__assert_fail@plt+0x4468>
   161d8:	ldr	r2, [sp, #4]
   161dc:	ldr	r3, [r7]
   161e0:	cmp	r2, r3
   161e4:	bne	16218 <__assert_fail@plt+0x4504>
   161e8:	add	sp, sp, #8
   161ec:	pop	{r4, r5, r6, r7, r8, pc}
   161f0:	ldr	r3, [pc, #52]	; 1622c <__assert_fail@plt+0x4518>
   161f4:	cmp	r2, #34	; 0x22
   161f8:	add	r3, pc, r3
   161fc:	ldr	r0, [r3]
   16200:	bne	1617c <__assert_fail@plt+0x4468>
   16204:	ldr	r1, [pc, #36]	; 16230 <__assert_fail@plt+0x451c>
   16208:	mov	r3, r4
   1620c:	mov	r2, r8
   16210:	add	r1, pc, r1
   16214:	bl	11948 <err@plt>
   16218:	bl	118e8 <__stack_chk_fail@plt>
   1621c:	ldrdeq	r6, [r1], -ip
   16220:	ldrdeq	r0, [r0], -r4
   16224:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   16228:	andeq	r5, r0, r4, lsr #9
   1622c:	andeq	r8, r1, r4, lsl #29
   16230:	andeq	r5, r0, r8, lsr #8
   16234:	ldr	r2, [pc, #232]	; 16324 <__assert_fail@plt+0x4610>
   16238:	ldr	r3, [pc, #232]	; 16328 <__assert_fail@plt+0x4614>
   1623c:	add	r2, pc, r2
   16240:	push	{r4, r5, r6, r7, r8, lr}
   16244:	sub	sp, sp, #8
   16248:	ldr	r7, [r2, r3]
   1624c:	mov	r5, #0
   16250:	mov	r4, r0
   16254:	ldr	r3, [r7]
   16258:	mov	r8, r1
   1625c:	str	r5, [sp]
   16260:	str	r3, [sp, #4]
   16264:	bl	11b1c <__errno_location@plt>
   16268:	cmp	r4, r5
   1626c:	str	r5, [r0]
   16270:	beq	16280 <__assert_fail@plt+0x456c>
   16274:	ldrsb	r3, [r4]
   16278:	cmp	r3, r5
   1627c:	bne	162a0 <__assert_fail@plt+0x458c>
   16280:	ldr	r1, [pc, #164]	; 1632c <__assert_fail@plt+0x4618>
   16284:	mov	r3, r4
   16288:	add	r1, pc, r1
   1628c:	mov	r2, r8
   16290:	ldr	r0, [r1]
   16294:	ldr	r1, [pc, #148]	; 16330 <__assert_fail@plt+0x461c>
   16298:	add	r1, pc, r1
   1629c:	bl	11c0c <errx@plt>
   162a0:	mov	r6, r0
   162a4:	mov	r2, #10
   162a8:	mov	r1, sp
   162ac:	mov	r0, r4
   162b0:	bl	117f8 <strtol@plt>
   162b4:	ldr	r2, [r6]
   162b8:	cmp	r2, r5
   162bc:	bne	162f8 <__assert_fail@plt+0x45e4>
   162c0:	ldr	r3, [sp]
   162c4:	cmp	r3, r4
   162c8:	beq	16280 <__assert_fail@plt+0x456c>
   162cc:	cmp	r3, r5
   162d0:	beq	162e0 <__assert_fail@plt+0x45cc>
   162d4:	ldrsb	r3, [r3]
   162d8:	cmp	r3, r5
   162dc:	bne	16280 <__assert_fail@plt+0x456c>
   162e0:	ldr	r2, [sp, #4]
   162e4:	ldr	r3, [r7]
   162e8:	cmp	r2, r3
   162ec:	bne	16320 <__assert_fail@plt+0x460c>
   162f0:	add	sp, sp, #8
   162f4:	pop	{r4, r5, r6, r7, r8, pc}
   162f8:	ldr	r3, [pc, #52]	; 16334 <__assert_fail@plt+0x4620>
   162fc:	cmp	r2, #34	; 0x22
   16300:	add	r3, pc, r3
   16304:	ldr	r0, [r3]
   16308:	bne	16280 <__assert_fail@plt+0x456c>
   1630c:	ldr	r1, [pc, #36]	; 16338 <__assert_fail@plt+0x4624>
   16310:	mov	r3, r4
   16314:	mov	r2, r8
   16318:	add	r1, pc, r1
   1631c:	bl	11948 <err@plt>
   16320:	bl	118e8 <__stack_chk_fail@plt>
   16324:	ldrdeq	r6, [r1], -r8
   16328:	ldrdeq	r0, [r0], -r4
   1632c:	strdeq	r8, [r1], -r4
   16330:	andeq	r5, r0, r0, lsr #7
   16334:	andeq	r8, r1, ip, ror sp
   16338:	andeq	r5, r0, r0, lsr #6
   1633c:	ldr	r2, [pc, #232]	; 1642c <__assert_fail@plt+0x4718>
   16340:	ldr	r3, [pc, #232]	; 16430 <__assert_fail@plt+0x471c>
   16344:	add	r2, pc, r2
   16348:	push	{r4, r5, r6, r7, r8, lr}
   1634c:	sub	sp, sp, #8
   16350:	ldr	r7, [r2, r3]
   16354:	mov	r5, #0
   16358:	mov	r4, r0
   1635c:	ldr	r3, [r7]
   16360:	mov	r8, r1
   16364:	str	r5, [sp]
   16368:	str	r3, [sp, #4]
   1636c:	bl	11b1c <__errno_location@plt>
   16370:	cmp	r4, r5
   16374:	str	r5, [r0]
   16378:	beq	16388 <__assert_fail@plt+0x4674>
   1637c:	ldrsb	r3, [r4]
   16380:	cmp	r3, r5
   16384:	bne	163a8 <__assert_fail@plt+0x4694>
   16388:	ldr	r1, [pc, #164]	; 16434 <__assert_fail@plt+0x4720>
   1638c:	mov	r3, r4
   16390:	add	r1, pc, r1
   16394:	mov	r2, r8
   16398:	ldr	r0, [r1]
   1639c:	ldr	r1, [pc, #148]	; 16438 <__assert_fail@plt+0x4724>
   163a0:	add	r1, pc, r1
   163a4:	bl	11c0c <errx@plt>
   163a8:	mov	r6, r0
   163ac:	mov	r2, #10
   163b0:	mov	r1, sp
   163b4:	mov	r0, r4
   163b8:	bl	11abc <strtoul@plt>
   163bc:	ldr	r2, [r6]
   163c0:	cmp	r2, r5
   163c4:	bne	16400 <__assert_fail@plt+0x46ec>
   163c8:	ldr	r3, [sp]
   163cc:	cmp	r3, r4
   163d0:	beq	16388 <__assert_fail@plt+0x4674>
   163d4:	cmp	r3, r5
   163d8:	beq	163e8 <__assert_fail@plt+0x46d4>
   163dc:	ldrsb	r3, [r3]
   163e0:	cmp	r3, r5
   163e4:	bne	16388 <__assert_fail@plt+0x4674>
   163e8:	ldr	r2, [sp, #4]
   163ec:	ldr	r3, [r7]
   163f0:	cmp	r2, r3
   163f4:	bne	16428 <__assert_fail@plt+0x4714>
   163f8:	add	sp, sp, #8
   163fc:	pop	{r4, r5, r6, r7, r8, pc}
   16400:	ldr	r3, [pc, #52]	; 1643c <__assert_fail@plt+0x4728>
   16404:	cmp	r2, #34	; 0x22
   16408:	add	r3, pc, r3
   1640c:	ldr	r0, [r3]
   16410:	bne	16388 <__assert_fail@plt+0x4674>
   16414:	ldr	r1, [pc, #36]	; 16440 <__assert_fail@plt+0x472c>
   16418:	mov	r3, r4
   1641c:	mov	r2, r8
   16420:	add	r1, pc, r1
   16424:	bl	11948 <err@plt>
   16428:	bl	118e8 <__stack_chk_fail@plt>
   1642c:	ldrdeq	r6, [r1], -r0
   16430:	ldrdeq	r0, [r0], -r4
   16434:	andeq	r8, r1, ip, ror #25
   16438:	muleq	r0, r8, r2
   1643c:	andeq	r8, r1, r4, ror ip
   16440:	andeq	r5, r0, r8, lsl r2
   16444:	ldr	r3, [pc, #140]	; 164d8 <__assert_fail@plt+0x47c4>
   16448:	ldr	r2, [pc, #140]	; 164dc <__assert_fail@plt+0x47c8>
   1644c:	add	r3, pc, r3
   16450:	push	{r4, r5, r6, lr}
   16454:	sub	sp, sp, #16
   16458:	ldr	r4, [r3, r2]
   1645c:	mov	r5, r1
   16460:	mov	r1, sp
   16464:	ldr	r3, [r4]
   16468:	mov	r6, r0
   1646c:	str	r3, [sp, #12]
   16470:	bl	15c84 <__assert_fail@plt+0x3f70>
   16474:	cmp	r0, #0
   16478:	beq	164b8 <__assert_fail@plt+0x47a4>
   1647c:	bl	11b1c <__errno_location@plt>
   16480:	ldr	r3, [pc, #88]	; 164e0 <__assert_fail@plt+0x47cc>
   16484:	mov	r2, r5
   16488:	ldr	r1, [pc, r3]
   1648c:	ldr	r3, [r0]
   16490:	mov	r0, r1
   16494:	cmp	r3, #0
   16498:	mov	r3, r6
   1649c:	beq	164ac <__assert_fail@plt+0x4798>
   164a0:	ldr	r1, [pc, #60]	; 164e4 <__assert_fail@plt+0x47d0>
   164a4:	add	r1, pc, r1
   164a8:	bl	11948 <err@plt>
   164ac:	ldr	r1, [pc, #52]	; 164e8 <__assert_fail@plt+0x47d4>
   164b0:	add	r1, pc, r1
   164b4:	bl	11c0c <errx@plt>
   164b8:	ldr	r2, [sp, #12]
   164bc:	ldr	r3, [r4]
   164c0:	ldrd	r0, [sp]
   164c4:	cmp	r2, r3
   164c8:	bne	164d4 <__assert_fail@plt+0x47c0>
   164cc:	add	sp, sp, #16
   164d0:	pop	{r4, r5, r6, pc}
   164d4:	bl	118e8 <__stack_chk_fail@plt>
   164d8:	andeq	r6, r1, r8, asr #19
   164dc:	ldrdeq	r0, [r0], -r4
   164e0:	strdeq	r8, [r1], -r4
   164e4:	muleq	r0, r4, r1
   164e8:	andeq	r5, r0, r8, lsl #3
   164ec:	push	{r4, lr}
   164f0:	mov	r4, r1
   164f4:	mov	r1, r2
   164f8:	bl	16130 <__assert_fail@plt+0x441c>
   164fc:	vldr	d6, [pc, #28]	; 16520 <__assert_fail@plt+0x480c>
   16500:	vcvt.s32.f64	s15, d0
   16504:	vcvt.f64.s32	d5, s15
   16508:	vstr	s15, [r4]
   1650c:	vsub.f64	d0, d0, d5
   16510:	vmul.f64	d0, d0, d6
   16514:	vcvt.s32.f64	s0, d0
   16518:	vstr	s0, [r4, #4]
   1651c:	pop	{r4, pc}
   16520:	andeq	r0, r0, r0
   16524:	smlawbmi	lr, r0, r4, r8
   16528:	and	r2, r0, #61440	; 0xf000
   1652c:	cmp	r2, #16384	; 0x4000
   16530:	moveq	r2, r1
   16534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16538:	moveq	sl, #100	; 0x64
   1653c:	mov	r3, r0
   16540:	add	r9, r1, #1
   16544:	add	r8, r1, #2
   16548:	add	r7, r1, #3
   1654c:	add	r6, r1, #4
   16550:	add	r5, r1, #5
   16554:	add	r4, r1, #6
   16558:	add	lr, r1, #7
   1655c:	add	ip, r1, #8
   16560:	add	r0, r1, #9
   16564:	strbeq	sl, [r2], #10
   16568:	beq	1660c <__assert_fail@plt+0x48f8>
   1656c:	cmp	r2, #40960	; 0xa000
   16570:	moveq	r2, r1
   16574:	moveq	sl, #108	; 0x6c
   16578:	strbeq	sl, [r2], #10
   1657c:	beq	1660c <__assert_fail@plt+0x48f8>
   16580:	cmp	r2, #8192	; 0x2000
   16584:	moveq	r2, r1
   16588:	moveq	sl, #99	; 0x63
   1658c:	strbeq	sl, [r2], #10
   16590:	beq	1660c <__assert_fail@plt+0x48f8>
   16594:	cmp	r2, #24576	; 0x6000
   16598:	moveq	r2, r1
   1659c:	moveq	sl, #98	; 0x62
   165a0:	strbeq	sl, [r2], #10
   165a4:	beq	1660c <__assert_fail@plt+0x48f8>
   165a8:	cmp	r2, #49152	; 0xc000
   165ac:	moveq	r2, r1
   165b0:	moveq	sl, #115	; 0x73
   165b4:	strbeq	sl, [r2], #10
   165b8:	beq	1660c <__assert_fail@plt+0x48f8>
   165bc:	cmp	r2, #4096	; 0x1000
   165c0:	moveq	r2, r1
   165c4:	moveq	sl, #112	; 0x70
   165c8:	strbeq	sl, [r2], #10
   165cc:	beq	1660c <__assert_fail@plt+0x48f8>
   165d0:	cmp	r2, #32768	; 0x8000
   165d4:	moveq	r2, r1
   165d8:	moveq	sl, #45	; 0x2d
   165dc:	strbeq	sl, [r2], #10
   165e0:	beq	1660c <__assert_fail@plt+0x48f8>
   165e4:	mov	r2, r0
   165e8:	mov	r0, ip
   165ec:	mov	ip, lr
   165f0:	mov	lr, r4
   165f4:	mov	r4, r5
   165f8:	mov	r5, r6
   165fc:	mov	r6, r7
   16600:	mov	r7, r8
   16604:	mov	r8, r9
   16608:	mov	r9, r1
   1660c:	tst	r3, #256	; 0x100
   16610:	movne	fp, #114	; 0x72
   16614:	moveq	fp, #45	; 0x2d
   16618:	tst	r3, #128	; 0x80
   1661c:	movne	sl, #119	; 0x77
   16620:	moveq	sl, #45	; 0x2d
   16624:	tst	r3, #2048	; 0x800
   16628:	strb	fp, [r9]
   1662c:	and	r9, r3, #64	; 0x40
   16630:	strb	sl, [r8]
   16634:	beq	166d0 <__assert_fail@plt+0x49bc>
   16638:	cmp	r9, #0
   1663c:	movne	r9, #115	; 0x73
   16640:	moveq	r9, #83	; 0x53
   16644:	tst	r3, #32
   16648:	movne	r8, #114	; 0x72
   1664c:	moveq	r8, #45	; 0x2d
   16650:	tst	r3, #16
   16654:	strb	r9, [r7]
   16658:	movne	r7, #119	; 0x77
   1665c:	moveq	r7, #45	; 0x2d
   16660:	tst	r3, #1024	; 0x400
   16664:	strb	r8, [r6]
   16668:	and	r6, r3, #8
   1666c:	strb	r7, [r5]
   16670:	beq	166e0 <__assert_fail@plt+0x49cc>
   16674:	cmp	r6, #0
   16678:	movne	r6, #115	; 0x73
   1667c:	moveq	r6, #83	; 0x53
   16680:	tst	r3, #4
   16684:	movne	r5, #114	; 0x72
   16688:	moveq	r5, #45	; 0x2d
   1668c:	tst	r3, #2
   16690:	strb	r6, [r4]
   16694:	movne	r4, #119	; 0x77
   16698:	moveq	r4, #45	; 0x2d
   1669c:	tst	r3, #512	; 0x200
   166a0:	strb	r5, [lr]
   166a4:	and	r3, r3, #1
   166a8:	strb	r4, [ip]
   166ac:	beq	166f0 <__assert_fail@plt+0x49dc>
   166b0:	cmp	r3, #0
   166b4:	movne	ip, #116	; 0x74
   166b8:	moveq	ip, #84	; 0x54
   166bc:	mov	r3, #0
   166c0:	strb	ip, [r0]
   166c4:	mov	r0, r1
   166c8:	strb	r3, [r2]
   166cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166d0:	cmp	r9, #0
   166d4:	movne	r9, #120	; 0x78
   166d8:	moveq	r9, #45	; 0x2d
   166dc:	b	16644 <__assert_fail@plt+0x4930>
   166e0:	cmp	r6, #0
   166e4:	movne	r6, #120	; 0x78
   166e8:	moveq	r6, #45	; 0x2d
   166ec:	b	16680 <__assert_fail@plt+0x496c>
   166f0:	cmp	r3, #0
   166f4:	movne	ip, #120	; 0x78
   166f8:	moveq	ip, #45	; 0x2d
   166fc:	b	166bc <__assert_fail@plt+0x49a8>
   16700:	ldr	r1, [pc, #680]	; 169b0 <__assert_fail@plt+0x4c9c>
   16704:	ldr	ip, [pc, #680]	; 169b4 <__assert_fail@plt+0x4ca0>
   16708:	add	r1, pc, r1
   1670c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16710:	sub	sp, sp, #108	; 0x6c
   16714:	ldr	r8, [r1, ip]
   16718:	tst	r0, #2
   1671c:	strd	r2, [sp, #32]
   16720:	ldr	r1, [r8]
   16724:	addeq	r9, sp, #60	; 0x3c
   16728:	str	r1, [sp, #100]	; 0x64
   1672c:	ldrd	r2, [sp, #32]
   16730:	movne	r1, #32
   16734:	strbne	r1, [sp, #60]	; 0x3c
   16738:	addne	ip, sp, #61	; 0x3d
   1673c:	addne	r9, sp, #60	; 0x3c
   16740:	moveq	ip, r9
   16744:	mov	r1, #10
   16748:	mov	sl, #1
   1674c:	sub	lr, r1, #32
   16750:	lsl	r4, sl, r1
   16754:	lsl	r5, sl, lr
   16758:	rsb	lr, r1, #32
   1675c:	orr	r5, r5, sl, lsr lr
   16760:	cmp	r3, r5
   16764:	cmpeq	r2, r4
   16768:	bcc	16924 <__assert_fail@plt+0x4c10>
   1676c:	add	r1, r1, #10
   16770:	cmp	r1, #70	; 0x46
   16774:	bne	1674c <__assert_fail@plt+0x4a38>
   16778:	mov	lr, ip
   1677c:	strd	r2, [sp, #32]
   16780:	mov	r4, r2
   16784:	tst	r0, #1
   16788:	mov	r2, #69	; 0x45
   1678c:	bic	r5, r3, #-268435456	; 0xf0000000
   16790:	lsr	sl, r3, #28
   16794:	strb	r2, [lr], #1
   16798:	bne	1690c <__assert_fail@plt+0x4bf8>
   1679c:	orrs	r3, r4, r5
   167a0:	mov	r3, #0
   167a4:	strb	r3, [lr]
   167a8:	beq	1694c <__assert_fail@plt+0x4c38>
   167ac:	sub	r2, r1, #20
   167b0:	rsb	r0, r2, #32
   167b4:	lsr	r3, r4, r2
   167b8:	sub	r1, r1, #52	; 0x34
   167bc:	orr	r3, r3, r5, lsl r0
   167c0:	orr	r3, r3, r5, lsr r1
   167c4:	lsr	r2, r5, r2
   167c8:	adds	r6, r3, #50	; 0x32
   167cc:	adc	r7, r2, #0
   167d0:	mov	r3, #0
   167d4:	mov	r2, #100	; 0x64
   167d8:	mov	r0, r6
   167dc:	mov	r1, r7
   167e0:	bl	19e68 <__assert_fail@plt+0x8154>
   167e4:	cmp	r1, #0
   167e8:	cmpeq	r0, #10
   167ec:	mov	r2, r0
   167f0:	mov	r3, r1
   167f4:	addeq	sl, sl, #1
   167f8:	beq	1694c <__assert_fail@plt+0x4c38>
   167fc:	cmp	r7, #0
   16800:	cmpeq	r6, #99	; 0x63
   16804:	strd	r2, [sp, #32]
   16808:	bls	1694c <__assert_fail@plt+0x4c38>
   1680c:	bl	11c48 <localeconv@plt>
   16810:	ldrd	r2, [sp, #32]
   16814:	cmp	r0, #0
   16818:	beq	16994 <__assert_fail@plt+0x4c80>
   1681c:	ldr	r0, [r0]
   16820:	cmp	r0, #0
   16824:	beq	169a0 <__assert_fail@plt+0x4c8c>
   16828:	ldrsb	r1, [r0]
   1682c:	cmp	r1, #0
   16830:	ldreq	r0, [pc, #384]	; 169b8 <__assert_fail@plt+0x4ca4>
   16834:	addeq	r0, pc, r0
   16838:	ldr	r1, [pc, #380]	; 169bc <__assert_fail@plt+0x4ca8>
   1683c:	strd	r2, [sp, #16]
   16840:	add	r1, pc, r1
   16844:	add	r4, sp, #68	; 0x44
   16848:	mov	r3, #32
   1684c:	str	r0, [sp, #8]
   16850:	str	r1, [sp]
   16854:	str	r9, [sp, #24]
   16858:	str	sl, [sp, #4]
   1685c:	mov	r0, r4
   16860:	mov	r1, r3
   16864:	mov	r2, #1
   16868:	bl	11cfc <__snprintf_chk@plt>
   1686c:	b	16974 <__assert_fail@plt+0x4c60>
   16870:	ldr	r4, [pc, #328]	; 169c0 <__assert_fail@plt+0x4cac>
   16874:	mvn	sl, #0
   16878:	ldr	fp, [pc, #324]	; 169c4 <__assert_fail@plt+0x4cb0>
   1687c:	umull	r2, r3, lr, r4
   16880:	sub	r4, r1, #42	; 0x2a
   16884:	strd	r2, [sp, #40]	; 0x28
   16888:	ldr	r3, [sp, #44]	; 0x2c
   1688c:	lsl	r2, sl, lr
   16890:	lsr	r3, r3, #3
   16894:	str	r3, [sp, #52]	; 0x34
   16898:	ldr	r3, [sp, #32]
   1689c:	str	r4, [sp, #48]	; 0x30
   168a0:	orr	r4, r2, sl, lsl r4
   168a4:	lsr	r2, r3, lr
   168a8:	mov	r3, r2
   168ac:	ldr	r2, [sp, #52]	; 0x34
   168b0:	add	fp, pc, fp
   168b4:	str	r4, [sp, #40]	; 0x28
   168b8:	ldrsb	fp, [fp, r2]
   168bc:	mov	r2, r3
   168c0:	ldr	r3, [sp, #36]	; 0x24
   168c4:	rsb	r5, lr, #32
   168c8:	ldr	r4, [sp, #40]	; 0x28
   168cc:	orr	r2, r2, r3, lsl r5
   168d0:	orr	r4, r4, sl, lsr r5
   168d4:	ldr	r3, [sp, #32]
   168d8:	str	r4, [sp, #40]	; 0x28
   168dc:	cmp	r0, #0
   168e0:	bic	r4, r3, sl, lsl lr
   168e4:	ldr	r0, [sp, #36]	; 0x24
   168e8:	ldr	r3, [sp, #48]	; 0x30
   168ec:	mov	lr, ip
   168f0:	orr	sl, r2, r0, lsr r3
   168f4:	ldr	r3, [sp, #40]	; 0x28
   168f8:	strb	fp, [lr], #1
   168fc:	bic	r5, r0, r3
   16900:	beq	1679c <__assert_fail@plt+0x4a88>
   16904:	cmp	fp, #66	; 0x42
   16908:	beq	1679c <__assert_fail@plt+0x4a88>
   1690c:	mov	r3, #105	; 0x69
   16910:	strb	r3, [ip, #1]
   16914:	mov	r3, #66	; 0x42
   16918:	add	lr, ip, #3
   1691c:	strb	r3, [ip, #2]
   16920:	b	1679c <__assert_fail@plt+0x4a88>
   16924:	subs	lr, r1, #10
   16928:	strd	r2, [sp, #32]
   1692c:	and	r0, r0, #1
   16930:	bne	16870 <__assert_fail@plt+0x4b5c>
   16934:	ldr	sl, [sp, #32]
   16938:	cmp	r0, #0
   1693c:	movne	r0, lr
   16940:	mov	r3, #66	; 0x42
   16944:	strb	r0, [ip, #1]
   16948:	strb	r3, [ip]
   1694c:	ldr	r2, [pc, #116]	; 169c8 <__assert_fail@plt+0x4cb4>
   16950:	add	r4, sp, #68	; 0x44
   16954:	add	r2, pc, r2
   16958:	mov	r3, #32
   1695c:	stm	sp, {r2, sl}
   16960:	str	r9, [sp, #8]
   16964:	mov	r0, r4
   16968:	mov	r1, r3
   1696c:	mov	r2, #1
   16970:	bl	11cfc <__snprintf_chk@plt>
   16974:	mov	r0, r4
   16978:	bl	118dc <strdup@plt>
   1697c:	ldr	r2, [sp, #100]	; 0x64
   16980:	ldr	r3, [r8]
   16984:	cmp	r2, r3
   16988:	bne	169ac <__assert_fail@plt+0x4c98>
   1698c:	add	sp, sp, #108	; 0x6c
   16990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16994:	ldr	r0, [pc, #48]	; 169cc <__assert_fail@plt+0x4cb8>
   16998:	add	r0, pc, r0
   1699c:	b	16838 <__assert_fail@plt+0x4b24>
   169a0:	ldr	r0, [pc, #40]	; 169d0 <__assert_fail@plt+0x4cbc>
   169a4:	add	r0, pc, r0
   169a8:	b	16838 <__assert_fail@plt+0x4b24>
   169ac:	bl	118e8 <__stack_chk_fail@plt>
   169b0:	andeq	r6, r1, ip, lsl #14
   169b4:	ldrdeq	r0, [r0], -r4
   169b8:			; <UNDEFINED> instruction: 0x00004fbc
   169bc:	andeq	r4, r0, r4, lsr #28
   169c0:	stclgt	12, cr12, [ip], {205}	; 0xcd
   169c4:	andeq	r4, r0, ip, lsr #27
   169c8:	andeq	r4, r0, ip, lsl sp
   169cc:	andeq	r4, r0, r8, asr lr
   169d0:	andeq	r4, r0, ip, asr #28
   169d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169d8:	subs	r4, r0, #0
   169dc:	beq	16aac <__assert_fail@plt+0x4d98>
   169e0:	ldrsb	lr, [r4]
   169e4:	cmp	lr, #0
   169e8:	beq	16aac <__assert_fail@plt+0x4d98>
   169ec:	cmp	r1, #0
   169f0:	clz	ip, r2
   169f4:	lsr	ip, ip, #5
   169f8:	moveq	r0, #1
   169fc:	movne	r0, ip
   16a00:	cmp	r3, #0
   16a04:	moveq	r0, #1
   16a08:	cmp	r0, #0
   16a0c:	bne	16aac <__assert_fail@plt+0x4d98>
   16a10:	mov	r8, r3
   16a14:	mov	r7, r2
   16a18:	mov	r9, r1
   16a1c:	mov	r5, r0
   16a20:	b	16a7c <__assert_fail@plt+0x4d68>
   16a24:	cmp	r3, #0
   16a28:	bne	16a68 <__assert_fail@plt+0x4d54>
   16a2c:	cmn	r4, #1
   16a30:	add	r6, r4, #1
   16a34:	beq	16ab4 <__assert_fail@plt+0x4da0>
   16a38:	cmp	r0, r6
   16a3c:	bcs	16aac <__assert_fail@plt+0x4d98>
   16a40:	sub	r1, r6, r0
   16a44:	blx	r8
   16a48:	cmn	r0, #1
   16a4c:	beq	16aac <__assert_fail@plt+0x4d98>
   16a50:	str	r0, [r9, r5, lsl #2]
   16a54:	ldrsb	r3, [r6]
   16a58:	add	r5, r5, #1
   16a5c:	cmp	r3, #0
   16a60:	beq	16ab4 <__assert_fail@plt+0x4da0>
   16a64:	mov	r0, #0
   16a68:	cmn	r4, #1
   16a6c:	beq	16ab4 <__assert_fail@plt+0x4da0>
   16a70:	ldrsb	lr, [r4, #1]!
   16a74:	cmp	lr, #0
   16a78:	beq	16ab4 <__assert_fail@plt+0x4da0>
   16a7c:	cmp	r7, r5
   16a80:	mov	r6, r4
   16a84:	bls	16abc <__assert_fail@plt+0x4da8>
   16a88:	cmp	r0, #0
   16a8c:	moveq	r0, r4
   16a90:	cmp	lr, #44	; 0x2c
   16a94:	ldrsb	r3, [r4, #1]
   16a98:	bne	16a24 <__assert_fail@plt+0x4d10>
   16a9c:	cmp	r3, #0
   16aa0:	beq	16a2c <__assert_fail@plt+0x4d18>
   16aa4:	cmp	r0, r6
   16aa8:	bcc	16a40 <__assert_fail@plt+0x4d2c>
   16aac:	mvn	r0, #0
   16ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ab4:	mov	r0, r5
   16ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16abc:	mvn	r0, #1
   16ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ac4:	cmp	r0, #0
   16ac8:	beq	16b34 <__assert_fail@plt+0x4e20>
   16acc:	push	{r4, lr}
   16ad0:	mov	r4, r3
   16ad4:	cmp	r4, #0
   16ad8:	ldrsb	ip, [r0]
   16adc:	clz	r3, ip
   16ae0:	lsr	r3, r3, #5
   16ae4:	moveq	r3, #1
   16ae8:	cmp	r3, #0
   16aec:	bne	16b2c <__assert_fail@plt+0x4e18>
   16af0:	ldr	lr, [r4]
   16af4:	cmp	lr, r2
   16af8:	bhi	16b2c <__assert_fail@plt+0x4e18>
   16afc:	cmp	ip, #43	; 0x2b
   16b00:	strne	r3, [r4]
   16b04:	addeq	r0, r0, #1
   16b08:	ldr	r3, [sp, #8]
   16b0c:	addeq	r1, r1, lr, lsl #2
   16b10:	subeq	r2, r2, lr
   16b14:	bl	169d4 <__assert_fail@plt+0x4cc0>
   16b18:	cmp	r0, #0
   16b1c:	ldrgt	r3, [r4]
   16b20:	addgt	r3, r3, r0
   16b24:	strgt	r3, [r4]
   16b28:	pop	{r4, pc}
   16b2c:	mvn	r0, #0
   16b30:	pop	{r4, pc}
   16b34:	mvn	r0, #0
   16b38:	bx	lr
   16b3c:	cmp	r2, #0
   16b40:	clz	r3, r1
   16b44:	lsr	r3, r3, #5
   16b48:	moveq	r3, #1
   16b4c:	cmp	r0, #0
   16b50:	moveq	r3, #1
   16b54:	cmp	r3, #0
   16b58:	bne	16c24 <__assert_fail@plt+0x4f10>
   16b5c:	push	{r4, r5, r6, r7, r8, lr}
   16b60:	mov	r6, r2
   16b64:	mov	r2, r3
   16b68:	ldrsb	r3, [r0]
   16b6c:	mov	r8, r1
   16b70:	mov	r4, r0
   16b74:	mov	r7, #1
   16b78:	cmp	r3, #0
   16b7c:	beq	16bec <__assert_fail@plt+0x4ed8>
   16b80:	cmp	r2, #0
   16b84:	moveq	r2, r4
   16b88:	cmp	r3, #44	; 0x2c
   16b8c:	mov	r5, r4
   16b90:	ldrsb	r3, [r4, #1]!
   16b94:	beq	16bf4 <__assert_fail@plt+0x4ee0>
   16b98:	cmp	r3, #0
   16b9c:	bne	16c14 <__assert_fail@plt+0x4f00>
   16ba0:	mov	r5, r4
   16ba4:	cmp	r2, r5
   16ba8:	sub	r1, r5, r2
   16bac:	mov	r0, r2
   16bb0:	bcs	16c0c <__assert_fail@plt+0x4ef8>
   16bb4:	blx	r6
   16bb8:	mov	r2, r4
   16bbc:	cmp	r0, #0
   16bc0:	and	r1, r0, #7
   16bc4:	poplt	{r4, r5, r6, r7, r8, pc}
   16bc8:	ldrb	r3, [r8, r0, asr #3]
   16bcc:	orr	r3, r3, r7, lsl r1
   16bd0:	strb	r3, [r8, r0, asr #3]
   16bd4:	ldrsb	r3, [r5]
   16bd8:	cmp	r3, #0
   16bdc:	beq	16bec <__assert_fail@plt+0x4ed8>
   16be0:	ldrsb	r3, [r4]
   16be4:	cmp	r3, #0
   16be8:	bne	16b88 <__assert_fail@plt+0x4e74>
   16bec:	mov	r0, #0
   16bf0:	pop	{r4, r5, r6, r7, r8, pc}
   16bf4:	cmp	r3, #0
   16bf8:	moveq	r5, r4
   16bfc:	cmp	r2, r5
   16c00:	sub	r1, r5, r2
   16c04:	mov	r0, r2
   16c08:	bcc	16bb4 <__assert_fail@plt+0x4ea0>
   16c0c:	mvn	r0, #0
   16c10:	pop	{r4, r5, r6, r7, r8, pc}
   16c14:	adds	r4, r5, #1
   16c18:	bne	16b78 <__assert_fail@plt+0x4e64>
   16c1c:	mov	r0, #0
   16c20:	pop	{r4, r5, r6, r7, r8, pc}
   16c24:	mvn	r0, #21
   16c28:	bx	lr
   16c2c:	cmp	r2, #0
   16c30:	clz	r3, r1
   16c34:	lsr	r3, r3, #5
   16c38:	moveq	r3, #1
   16c3c:	cmp	r0, #0
   16c40:	moveq	r3, #1
   16c44:	cmp	r3, #0
   16c48:	bne	16d0c <__assert_fail@plt+0x4ff8>
   16c4c:	push	{r4, r5, r6, r7, r8, lr}
   16c50:	mov	r6, r2
   16c54:	mov	r2, r3
   16c58:	ldrsb	r3, [r0]
   16c5c:	mov	r7, r1
   16c60:	mov	r4, r0
   16c64:	cmp	r3, #0
   16c68:	beq	16cd4 <__assert_fail@plt+0x4fc0>
   16c6c:	cmp	r2, #0
   16c70:	moveq	r2, r4
   16c74:	cmp	r3, #44	; 0x2c
   16c78:	mov	r5, r4
   16c7c:	ldrsb	r3, [r4, #1]!
   16c80:	beq	16cdc <__assert_fail@plt+0x4fc8>
   16c84:	cmp	r3, #0
   16c88:	bne	16cfc <__assert_fail@plt+0x4fe8>
   16c8c:	mov	r5, r4
   16c90:	cmp	r2, r5
   16c94:	sub	r1, r5, r2
   16c98:	mov	r0, r2
   16c9c:	bcs	16cf4 <__assert_fail@plt+0x4fe0>
   16ca0:	blx	r6
   16ca4:	mov	r2, r4
   16ca8:	cmp	r0, #0
   16cac:	poplt	{r4, r5, r6, r7, r8, pc}
   16cb0:	ldr	r3, [r7]
   16cb4:	orr	r3, r3, r0
   16cb8:	str	r3, [r7]
   16cbc:	ldrsb	r3, [r5]
   16cc0:	cmp	r3, #0
   16cc4:	beq	16cd4 <__assert_fail@plt+0x4fc0>
   16cc8:	ldrsb	r3, [r4]
   16ccc:	cmp	r3, #0
   16cd0:	bne	16c74 <__assert_fail@plt+0x4f60>
   16cd4:	mov	r0, #0
   16cd8:	pop	{r4, r5, r6, r7, r8, pc}
   16cdc:	cmp	r3, #0
   16ce0:	moveq	r5, r4
   16ce4:	cmp	r2, r5
   16ce8:	sub	r1, r5, r2
   16cec:	mov	r0, r2
   16cf0:	bcc	16ca0 <__assert_fail@plt+0x4f8c>
   16cf4:	mvn	r0, #0
   16cf8:	pop	{r4, r5, r6, r7, r8, pc}
   16cfc:	adds	r4, r5, #1
   16d00:	bne	16c64 <__assert_fail@plt+0x4f50>
   16d04:	mov	r0, #0
   16d08:	pop	{r4, r5, r6, r7, r8, pc}
   16d0c:	mvn	r0, #21
   16d10:	bx	lr
   16d14:	ldr	ip, [pc, #396]	; 16ea8 <__assert_fail@plt+0x5194>
   16d18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16d1c:	add	ip, pc, ip
   16d20:	ldr	lr, [pc, #388]	; 16eac <__assert_fail@plt+0x5198>
   16d24:	sub	sp, sp, #8
   16d28:	mov	r9, r3
   16d2c:	ldr	r5, [ip, lr]
   16d30:	mov	sl, #0
   16d34:	subs	r4, r0, #0
   16d38:	ldr	r3, [r5]
   16d3c:	mov	r7, r1
   16d40:	str	sl, [sp]
   16d44:	mov	r1, ip
   16d48:	str	r3, [sp, #4]
   16d4c:	beq	16dc0 <__assert_fail@plt+0x50ac>
   16d50:	str	r9, [r7]
   16d54:	str	r9, [r2]
   16d58:	mov	r6, r2
   16d5c:	bl	11b1c <__errno_location@plt>
   16d60:	str	sl, [r0]
   16d64:	ldrsb	r3, [r4]
   16d68:	mov	r8, r0
   16d6c:	cmp	r3, #58	; 0x3a
   16d70:	beq	16ddc <__assert_fail@plt+0x50c8>
   16d74:	mov	sl, sp
   16d78:	mov	r1, sl
   16d7c:	mov	r2, #10
   16d80:	mov	r0, r4
   16d84:	bl	117f8 <strtol@plt>
   16d88:	str	r0, [r7]
   16d8c:	str	r0, [r6]
   16d90:	ldr	r0, [r8]
   16d94:	cmp	r0, #0
   16d98:	bne	16e2c <__assert_fail@plt+0x5118>
   16d9c:	ldr	r2, [sp]
   16da0:	cmp	r2, #0
   16da4:	cmpne	r2, r4
   16da8:	beq	16e2c <__assert_fail@plt+0x5118>
   16dac:	ldrsb	r3, [r2]
   16db0:	cmp	r3, #58	; 0x3a
   16db4:	beq	16e34 <__assert_fail@plt+0x5120>
   16db8:	cmp	r3, #45	; 0x2d
   16dbc:	beq	16e44 <__assert_fail@plt+0x5130>
   16dc0:	mov	r0, #0
   16dc4:	ldr	r2, [sp, #4]
   16dc8:	ldr	r3, [r5]
   16dcc:	cmp	r2, r3
   16dd0:	bne	16ea4 <__assert_fail@plt+0x5190>
   16dd4:	add	sp, sp, #8
   16dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ddc:	add	r4, r4, #1
   16de0:	mov	r0, r4
   16de4:	mov	r2, #10
   16de8:	mov	r1, sp
   16dec:	bl	117f8 <strtol@plt>
   16df0:	str	r0, [r6]
   16df4:	ldr	r3, [r8]
   16df8:	cmp	r3, #0
   16dfc:	bne	16e2c <__assert_fail@plt+0x5118>
   16e00:	ldr	r3, [sp]
   16e04:	cmp	r3, #0
   16e08:	beq	16e2c <__assert_fail@plt+0x5118>
   16e0c:	ldrsb	r2, [r3]
   16e10:	sub	r3, r3, r4
   16e14:	clz	r3, r3
   16e18:	cmp	r2, #0
   16e1c:	lsr	r3, r3, #5
   16e20:	movne	r3, #1
   16e24:	cmp	r3, #0
   16e28:	beq	16dc0 <__assert_fail@plt+0x50ac>
   16e2c:	mvn	r0, #0
   16e30:	b	16dc4 <__assert_fail@plt+0x50b0>
   16e34:	ldrsb	r3, [r2, #1]
   16e38:	cmp	r3, #0
   16e3c:	streq	r9, [r6]
   16e40:	beq	16dc4 <__assert_fail@plt+0x50b0>
   16e44:	mov	r3, #0
   16e48:	add	r4, r2, #1
   16e4c:	str	r3, [r8]
   16e50:	mov	r1, sl
   16e54:	mov	r0, r4
   16e58:	mov	r2, #10
   16e5c:	str	r3, [sp]
   16e60:	bl	117f8 <strtol@plt>
   16e64:	str	r0, [r6]
   16e68:	ldr	r3, [r8]
   16e6c:	cmp	r3, #0
   16e70:	bne	16e2c <__assert_fail@plt+0x5118>
   16e74:	ldr	r2, [sp]
   16e78:	cmp	r2, #0
   16e7c:	beq	16e2c <__assert_fail@plt+0x5118>
   16e80:	ldrsb	r3, [r2]
   16e84:	sub	r2, r2, r4
   16e88:	clz	r2, r2
   16e8c:	cmp	r3, #0
   16e90:	lsr	r2, r2, #5
   16e94:	movne	r2, #1
   16e98:	cmp	r2, #0
   16e9c:	beq	16dc0 <__assert_fail@plt+0x50ac>
   16ea0:	b	16e2c <__assert_fail@plt+0x5118>
   16ea4:	bl	118e8 <__stack_chk_fail@plt>
   16ea8:	strdeq	r6, [r1], -r8
   16eac:	ldrdeq	r0, [r0], -r4
   16eb0:	ldr	r3, [pc, #244]	; 16fac <__assert_fail@plt+0x5298>
   16eb4:	ldr	r2, [pc, #244]	; 16fb0 <__assert_fail@plt+0x529c>
   16eb8:	add	r3, pc, r3
   16ebc:	push	{r4, r5, r6, r7, r8, r9, lr}
   16ec0:	sub	sp, sp, #20
   16ec4:	ldr	r9, [r3, r2]
   16ec8:	cmp	r0, #0
   16ecc:	cmpne	r1, #0
   16ed0:	ldr	r3, [r9]
   16ed4:	str	r3, [sp, #12]
   16ed8:	beq	16fa0 <__assert_fail@plt+0x528c>
   16edc:	mov	r4, r1
   16ee0:	add	r8, sp, #4
   16ee4:	add	r7, sp, #8
   16ee8:	b	16f28 <__assert_fail@plt+0x5214>
   16eec:	cmp	r4, r3
   16ef0:	bne	16fa0 <__assert_fail@plt+0x528c>
   16ef4:	mov	r2, r4
   16ef8:	mov	r1, r6
   16efc:	mov	r0, r5
   16f00:	bl	11ccc <strncmp@plt>
   16f04:	cmp	r0, #0
   16f08:	bne	16fa0 <__assert_fail@plt+0x528c>
   16f0c:	adds	r0, r5, r4
   16f10:	moveq	r3, #0
   16f14:	movne	r3, #1
   16f18:	adds	r4, r6, r4
   16f1c:	moveq	r3, #0
   16f20:	cmp	r3, #0
   16f24:	beq	16fa0 <__assert_fail@plt+0x528c>
   16f28:	mov	r1, r8
   16f2c:	bl	15330 <__assert_fail@plt+0x361c>
   16f30:	mov	r1, r7
   16f34:	mov	r5, r0
   16f38:	mov	r0, r4
   16f3c:	bl	15330 <__assert_fail@plt+0x361c>
   16f40:	ldr	r4, [sp, #4]
   16f44:	ldr	r3, [sp, #8]
   16f48:	mov	r6, r0
   16f4c:	adds	r0, r4, r3
   16f50:	beq	16f84 <__assert_fail@plt+0x5270>
   16f54:	cmp	r0, #1
   16f58:	bne	16eec <__assert_fail@plt+0x51d8>
   16f5c:	cmp	r5, #0
   16f60:	beq	16f70 <__assert_fail@plt+0x525c>
   16f64:	ldrsb	r2, [r5]
   16f68:	cmp	r2, #47	; 0x2f
   16f6c:	beq	16f88 <__assert_fail@plt+0x5274>
   16f70:	cmp	r6, #0
   16f74:	beq	16eec <__assert_fail@plt+0x51d8>
   16f78:	ldrsb	r2, [r6]
   16f7c:	cmp	r2, #47	; 0x2f
   16f80:	bne	16eec <__assert_fail@plt+0x51d8>
   16f84:	mov	r0, #1
   16f88:	ldr	r2, [sp, #12]
   16f8c:	ldr	r3, [r9]
   16f90:	cmp	r2, r3
   16f94:	bne	16fa8 <__assert_fail@plt+0x5294>
   16f98:	add	sp, sp, #20
   16f9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16fa0:	mov	r0, #0
   16fa4:	b	16f88 <__assert_fail@plt+0x5274>
   16fa8:	bl	118e8 <__stack_chk_fail@plt>
   16fac:	andeq	r5, r1, ip, asr pc
   16fb0:	ldrdeq	r0, [r0], -r4
   16fb4:	orrs	r3, r0, r1
   16fb8:	beq	17034 <__assert_fail@plt+0x5320>
   16fbc:	cmp	r0, #0
   16fc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fc4:	mov	r4, r1
   16fc8:	mov	r5, r0
   16fcc:	beq	17040 <__assert_fail@plt+0x532c>
   16fd0:	cmp	r1, #0
   16fd4:	beq	17050 <__assert_fail@plt+0x533c>
   16fd8:	mov	r6, r2
   16fdc:	bl	11ac8 <strlen@plt>
   16fe0:	mvn	r3, r0
   16fe4:	cmp	r6, r3
   16fe8:	mov	r7, r0
   16fec:	movhi	r8, #0
   16ff0:	bhi	1702c <__assert_fail@plt+0x5318>
   16ff4:	add	r9, r6, r0
   16ff8:	add	r0, r9, #1
   16ffc:	bl	11a2c <malloc@plt>
   17000:	subs	r8, r0, #0
   17004:	beq	1702c <__assert_fail@plt+0x5318>
   17008:	mov	r1, r5
   1700c:	mov	r2, r7
   17010:	bl	11888 <memcpy@plt>
   17014:	mov	r2, r6
   17018:	mov	r1, r4
   1701c:	add	r0, r8, r7
   17020:	bl	11888 <memcpy@plt>
   17024:	mov	r3, #0
   17028:	strb	r3, [r8, r9]
   1702c:	mov	r0, r8
   17030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17034:	ldr	r0, [pc, #28]	; 17058 <__assert_fail@plt+0x5344>
   17038:	add	r0, pc, r0
   1703c:	b	118dc <strdup@plt>
   17040:	mov	r0, r4
   17044:	mov	r1, r2
   17048:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1704c:	b	11870 <strndup@plt>
   17050:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17054:	b	118dc <strdup@plt>
   17058:			; <UNDEFINED> instruction: 0x00004bb4
   1705c:	push	{r4, r5, r6, lr}
   17060:	subs	r4, r1, #0
   17064:	mov	r5, r0
   17068:	moveq	r2, r4
   1706c:	beq	1707c <__assert_fail@plt+0x5368>
   17070:	mov	r0, r4
   17074:	bl	11ac8 <strlen@plt>
   17078:	mov	r2, r0
   1707c:	mov	r1, r4
   17080:	mov	r0, r5
   17084:	pop	{r4, r5, r6, lr}
   17088:	b	16fb4 <__assert_fail@plt+0x52a0>
   1708c:	push	{r1, r2, r3}
   17090:	ldr	r1, [pc, #132]	; 1711c <__assert_fail@plt+0x5408>
   17094:	ldr	r3, [pc, #132]	; 17120 <__assert_fail@plt+0x540c>
   17098:	add	r1, pc, r1
   1709c:	push	{r4, r5, lr}
   170a0:	mov	r5, r0
   170a4:	ldr	r4, [r1, r3]
   170a8:	sub	sp, sp, #16
   170ac:	add	ip, sp, #32
   170b0:	ldr	r0, [r4]
   170b4:	ldr	r2, [sp, #28]
   170b8:	str	r0, [sp, #12]
   170bc:	mov	r3, ip
   170c0:	add	r0, sp, #8
   170c4:	mov	r1, #1
   170c8:	str	ip, [sp, #4]
   170cc:	bl	11b4c <__vasprintf_chk@plt>
   170d0:	subs	r2, r0, #0
   170d4:	movlt	r5, #0
   170d8:	blt	170f4 <__assert_fail@plt+0x53e0>
   170dc:	mov	r0, r5
   170e0:	ldr	r1, [sp, #8]
   170e4:	bl	16fb4 <__assert_fail@plt+0x52a0>
   170e8:	mov	r5, r0
   170ec:	ldr	r0, [sp, #8]
   170f0:	bl	11840 <free@plt>
   170f4:	ldr	r2, [sp, #12]
   170f8:	ldr	r3, [r4]
   170fc:	mov	r0, r5
   17100:	cmp	r2, r3
   17104:	bne	17118 <__assert_fail@plt+0x5404>
   17108:	add	sp, sp, #16
   1710c:	pop	{r4, r5, lr}
   17110:	add	sp, sp, #12
   17114:	bx	lr
   17118:	bl	118e8 <__stack_chk_fail@plt>
   1711c:	andeq	r5, r1, ip, ror sp
   17120:	ldrdeq	r0, [r0], -r4
   17124:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17128:	mov	r6, r0
   1712c:	ldr	r0, [pc, #348]	; 17290 <__assert_fail@plt+0x557c>
   17130:	ldr	ip, [pc, #348]	; 17294 <__assert_fail@plt+0x5580>
   17134:	add	r0, pc, r0
   17138:	ldr	r5, [r6]
   1713c:	ldr	r8, [r0, ip]
   17140:	sub	sp, sp, #8
   17144:	ldrsb	r4, [r5]
   17148:	mov	r9, r2
   1714c:	ldr	r2, [r8]
   17150:	cmp	r4, #0
   17154:	mov	r7, r1
   17158:	str	r2, [sp, #4]
   1715c:	mov	r1, r0
   17160:	beq	17210 <__assert_fail@plt+0x54fc>
   17164:	mov	r0, r5
   17168:	mov	r1, r9
   1716c:	mov	sl, r3
   17170:	bl	11d08 <strspn@plt>
   17174:	add	r4, r5, r0
   17178:	ldrsb	r5, [r5, r0]
   1717c:	cmp	r5, #0
   17180:	beq	17278 <__assert_fail@plt+0x5564>
   17184:	cmp	sl, #0
   17188:	beq	1722c <__assert_fail@plt+0x5518>
   1718c:	ldr	r0, [pc, #260]	; 17298 <__assert_fail@plt+0x5584>
   17190:	mov	r1, r5
   17194:	add	r0, pc, r0
   17198:	bl	11ad4 <strchr@plt>
   1719c:	cmp	r0, #0
   171a0:	beq	17248 <__assert_fail@plt+0x5534>
   171a4:	add	sl, r4, #1
   171a8:	mov	r3, #0
   171ac:	mov	r0, sl
   171b0:	mov	r1, sp
   171b4:	strb	r5, [sp]
   171b8:	strb	r3, [sp, #1]
   171bc:	bl	153d0 <__assert_fail@plt+0x36bc>
   171c0:	add	r3, r4, r0
   171c4:	str	r0, [r7]
   171c8:	ldrsb	r3, [r3, #1]
   171cc:	subs	r5, r5, r3
   171d0:	movne	r5, #1
   171d4:	cmp	r3, #0
   171d8:	moveq	r5, #1
   171dc:	cmp	r5, #0
   171e0:	bne	17278 <__assert_fail@plt+0x5564>
   171e4:	add	r0, r0, #2
   171e8:	add	r5, r4, r0
   171ec:	ldrsb	r1, [r4, r0]
   171f0:	cmp	r1, #0
   171f4:	beq	17208 <__assert_fail@plt+0x54f4>
   171f8:	mov	r0, r9
   171fc:	bl	11ad4 <strchr@plt>
   17200:	cmp	r0, #0
   17204:	beq	17278 <__assert_fail@plt+0x5564>
   17208:	mov	r4, sl
   1720c:	str	r5, [r6]
   17210:	ldr	r2, [sp, #4]
   17214:	ldr	r3, [r8]
   17218:	mov	r0, r4
   1721c:	cmp	r2, r3
   17220:	bne	1728c <__assert_fail@plt+0x5578>
   17224:	add	sp, sp, #8
   17228:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1722c:	mov	r1, r9
   17230:	mov	r0, r4
   17234:	bl	11804 <strcspn@plt>
   17238:	add	r3, r4, r0
   1723c:	str	r0, [r7]
   17240:	str	r3, [r6]
   17244:	b	17210 <__assert_fail@plt+0x54fc>
   17248:	mov	r1, r9
   1724c:	mov	r0, r4
   17250:	bl	153d0 <__assert_fail@plt+0x36bc>
   17254:	str	r0, [r7]
   17258:	ldrsb	r1, [r4, r0]
   1725c:	add	r5, r4, r0
   17260:	cmp	r1, #0
   17264:	beq	17284 <__assert_fail@plt+0x5570>
   17268:	mov	r0, r9
   1726c:	bl	11ad4 <strchr@plt>
   17270:	cmp	r0, #0
   17274:	bne	17284 <__assert_fail@plt+0x5570>
   17278:	str	r4, [r6]
   1727c:	mov	r4, #0
   17280:	b	17210 <__assert_fail@plt+0x54fc>
   17284:	str	r5, [r6]
   17288:	b	17210 <__assert_fail@plt+0x54fc>
   1728c:	bl	118e8 <__stack_chk_fail@plt>
   17290:	andeq	r5, r1, r0, ror #25
   17294:	ldrdeq	r0, [r0], -r4
   17298:	andeq	r4, r0, r4, ror #9
   1729c:	push	{r4, lr}
   172a0:	mov	r4, r0
   172a4:	b	172b0 <__assert_fail@plt+0x559c>
   172a8:	cmp	r0, #10
   172ac:	beq	172c8 <__assert_fail@plt+0x55b4>
   172b0:	mov	r0, r4
   172b4:	bl	11b7c <fgetc@plt>
   172b8:	cmn	r0, #1
   172bc:	bne	172a8 <__assert_fail@plt+0x5594>
   172c0:	mov	r0, #1
   172c4:	pop	{r4, pc}
   172c8:	mov	r0, #0
   172cc:	pop	{r4, pc}
   172d0:	ldr	r3, [pc, #656]	; 17568 <__assert_fail@plt+0x5854>
   172d4:	ldr	r2, [pc, #656]	; 1756c <__assert_fail@plt+0x5858>
   172d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172dc:	add	r3, pc, r3
   172e0:	sub	sp, sp, #44	; 0x2c
   172e4:	subs	r4, r0, #0
   172e8:	str	r1, [sp, #28]
   172ec:	ldr	r2, [r3, r2]
   172f0:	str	r2, [sp, #24]
   172f4:	ldr	r3, [r2]
   172f8:	str	r3, [sp, #36]	; 0x24
   172fc:	beq	17544 <__assert_fail@plt+0x5830>
   17300:	ldr	r6, [pc, #616]	; 17570 <__assert_fail@plt+0x585c>
   17304:	mov	r5, #0
   17308:	ldr	r3, [pc, #612]	; 17574 <__assert_fail@plt+0x5860>
   1730c:	add	r6, pc, r6
   17310:	mov	r9, r5
   17314:	add	r3, pc, r3
   17318:	str	r3, [sp, #20]
   1731c:	str	r5, [sp, #16]
   17320:	ldr	r1, [sp, #20]
   17324:	mov	r0, r4
   17328:	bl	11d08 <strspn@plt>
   1732c:	ldrsb	r3, [r4, r0]
   17330:	add	r8, r4, r0
   17334:	cmp	r3, #0
   17338:	beq	17524 <__assert_fail@plt+0x5810>
   1733c:	bl	11b1c <__errno_location@plt>
   17340:	mov	r5, #0
   17344:	add	fp, sp, #32
   17348:	mov	r1, fp
   1734c:	mov	r2, #10
   17350:	mov	r4, r0
   17354:	str	r5, [r0]
   17358:	mov	r0, r8
   1735c:	bl	119a8 <strtoll@plt>
   17360:	ldr	r3, [r4]
   17364:	cmp	r3, r5
   17368:	strd	r0, [sp]
   1736c:	bgt	17514 <__assert_fail@plt+0x5800>
   17370:	ldrd	r2, [sp]
   17374:	cmp	r2, #0
   17378:	sbcs	r3, r3, #0
   1737c:	blt	1751c <__assert_fail@plt+0x5808>
   17380:	ldr	r7, [sp, #32]
   17384:	ldrsb	r3, [r7]
   17388:	cmp	r3, #46	; 0x2e
   1738c:	beq	174c8 <__assert_fail@plt+0x57b4>
   17390:	cmp	r8, r7
   17394:	beq	174a8 <__assert_fail@plt+0x5794>
   17398:	mov	r2, #0
   1739c:	mov	r3, #0
   173a0:	strd	r2, [sp, #8]
   173a4:	ldr	r1, [pc, #460]	; 17578 <__assert_fail@plt+0x5864>
   173a8:	mov	r0, r7
   173ac:	add	r1, pc, r1
   173b0:	bl	11d08 <strspn@plt>
   173b4:	ldr	fp, [pc, #448]	; 1757c <__assert_fail@plt+0x5868>
   173b8:	mov	r8, #0
   173bc:	add	fp, pc, fp
   173c0:	ldr	sl, [sp, #16]
   173c4:	add	r7, r7, r0
   173c8:	str	r7, [sp, #32]
   173cc:	b	173e0 <__assert_fail@plt+0x56cc>
   173d0:	add	r8, r8, #1
   173d4:	cmp	r8, #28
   173d8:	beq	174a8 <__assert_fail@plt+0x5794>
   173dc:	ldr	fp, [r6, r8, lsl #4]
   173e0:	cmp	fp, #0
   173e4:	beq	173d0 <__assert_fail@plt+0x56bc>
   173e8:	mov	r0, fp
   173ec:	bl	11ac8 <strlen@plt>
   173f0:	cmp	r7, #0
   173f4:	cmpne	r0, #0
   173f8:	mov	r4, r0
   173fc:	beq	173d0 <__assert_fail@plt+0x56bc>
   17400:	mov	r2, r0
   17404:	mov	r1, fp
   17408:	mov	r0, r7
   1740c:	bl	11ccc <strncmp@plt>
   17410:	cmp	r0, #0
   17414:	bne	173d0 <__assert_fail@plt+0x56bc>
   17418:	adds	r4, r7, r4
   1741c:	beq	173d0 <__assert_fail@plt+0x56bc>
   17420:	ldr	r3, [pc, #344]	; 17580 <__assert_fail@plt+0x586c>
   17424:	str	sl, [sp, #16]
   17428:	add	r3, pc, r3
   1742c:	add	r3, r3, r8, lsl #4
   17430:	ldrd	sl, [sp, #8]
   17434:	ldr	r8, [r3, #12]
   17438:	ldr	r7, [r3, #8]
   1743c:	cmp	r5, #0
   17440:	mul	r3, sl, r8
   17444:	umull	r0, r1, sl, r7
   17448:	mla	r3, r7, fp, r3
   1744c:	add	r1, r3, r1
   17450:	beq	17470 <__assert_fail@plt+0x575c>
   17454:	ldr	sl, [sp, #16]
   17458:	mov	r2, #10
   1745c:	mov	r3, #0
   17460:	bl	19e68 <__assert_fail@plt+0x8154>
   17464:	subs	r5, r5, #1
   17468:	bne	17458 <__assert_fail@plt+0x5744>
   1746c:	str	sl, [sp, #16]
   17470:	ldrd	r2, [sp]
   17474:	mov	r5, #1
   17478:	mul	r8, r2, r8
   1747c:	umull	sl, fp, r2, r7
   17480:	mla	r7, r7, r3, r8
   17484:	adds	r2, sl, r0
   17488:	add	r3, r7, fp
   1748c:	mov	fp, r3
   17490:	adc	r3, fp, r1
   17494:	adds	r9, r9, r2
   17498:	ldr	r2, [sp, #16]
   1749c:	adc	r3, r2, r3
   174a0:	str	r3, [sp, #16]
   174a4:	b	17320 <__assert_fail@plt+0x560c>
   174a8:	mvn	r0, #21
   174ac:	ldr	r3, [sp, #24]
   174b0:	ldr	r2, [sp, #36]	; 0x24
   174b4:	ldr	r3, [r3]
   174b8:	cmp	r2, r3
   174bc:	bne	17564 <__assert_fail@plt+0x5850>
   174c0:	add	sp, sp, #44	; 0x2c
   174c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174c8:	add	r8, r7, #1
   174cc:	str	r5, [r4]
   174d0:	mov	r1, fp
   174d4:	mov	r0, r8
   174d8:	mov	r2, #10
   174dc:	bl	119a8 <strtoll@plt>
   174e0:	ldr	r3, [r4]
   174e4:	cmp	r3, #0
   174e8:	strd	r0, [sp, #8]
   174ec:	bgt	17514 <__assert_fail@plt+0x5800>
   174f0:	ldrd	r2, [sp, #8]
   174f4:	cmp	r2, #0
   174f8:	sbcs	r3, r3, #0
   174fc:	blt	1751c <__assert_fail@plt+0x5808>
   17500:	ldr	r7, [sp, #32]
   17504:	cmp	r8, r7
   17508:	beq	174a8 <__assert_fail@plt+0x5794>
   1750c:	sub	r5, r7, r8
   17510:	b	173a4 <__assert_fail@plt+0x5690>
   17514:	rsb	r0, r3, #0
   17518:	b	174ac <__assert_fail@plt+0x5798>
   1751c:	mvn	r0, #33	; 0x21
   17520:	b	174ac <__assert_fail@plt+0x5798>
   17524:	cmp	r5, #0
   17528:	ldr	r1, [sp, #16]
   1752c:	beq	174a8 <__assert_fail@plt+0x5794>
   17530:	mov	r0, r3
   17534:	ldr	r3, [sp, #28]
   17538:	str	r9, [r3]
   1753c:	str	r1, [r3, #4]
   17540:	b	174ac <__assert_fail@plt+0x5798>
   17544:	ldr	r3, [pc, #56]	; 17584 <__assert_fail@plt+0x5870>
   17548:	ldr	r1, [pc, #56]	; 17588 <__assert_fail@plt+0x5874>
   1754c:	ldr	r0, [pc, #56]	; 1758c <__assert_fail@plt+0x5878>
   17550:	add	r3, pc, r3
   17554:	mov	r2, #77	; 0x4d
   17558:	add	r1, pc, r1
   1755c:	add	r0, pc, r0
   17560:	bl	11d14 <__assert_fail@plt>
   17564:	bl	118e8 <__stack_chk_fail@plt>
   17568:	andeq	r5, r1, r8, lsr fp
   1756c:	ldrdeq	r0, [r0], -r4
   17570:	andeq	r5, r1, ip, lsl #14
   17574:	muleq	r0, ip, r3
   17578:	andeq	r4, r0, r4, lsl #6
   1757c:	ldrdeq	r4, [r0], -ip
   17580:	strdeq	r5, [r1], -r0
   17584:	andeq	r4, r0, ip, lsr #2
   17588:	andeq	r4, r0, r8, asr #2
   1758c:	andeq	r4, r0, r4, lsr #16
   17590:	ldr	r3, [pc, #1556]	; 17bac <__assert_fail@plt+0x5e98>
   17594:	ldr	r2, [pc, #1556]	; 17bb0 <__assert_fail@plt+0x5e9c>
   17598:	add	r3, pc, r3
   1759c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175a0:	sub	sp, sp, #124	; 0x7c
   175a4:	ldr	r6, [r3, r2]
   175a8:	subs	r4, r0, #0
   175ac:	mov	r5, r1
   175b0:	mov	r0, #0
   175b4:	mov	r1, #0
   175b8:	ldr	r3, [r6]
   175bc:	strd	r0, [sp, #8]
   175c0:	str	r3, [sp, #116]	; 0x74
   175c4:	strd	r0, [sp, #16]
   175c8:	beq	17b84 <__assert_fail@plt+0x5e70>
   175cc:	cmp	r5, #0
   175d0:	beq	17b60 <__assert_fail@plt+0x5e4c>
   175d4:	mov	r0, #0
   175d8:	bl	118b8 <time@plt>
   175dc:	add	r7, sp, #28
   175e0:	mov	r1, r7
   175e4:	str	r0, [sp, #4]
   175e8:	add	r0, sp, #4
   175ec:	bl	11924 <localtime_r@plt>
   175f0:	ldr	r1, [pc, #1468]	; 17bb4 <__assert_fail@plt+0x5ea0>
   175f4:	mvn	r3, #0
   175f8:	add	r1, pc, r1
   175fc:	mov	r0, r4
   17600:	str	r3, [sp, #60]	; 0x3c
   17604:	bl	117ec <strcmp@plt>
   17608:	cmp	r0, #0
   1760c:	beq	17a90 <__assert_fail@plt+0x5d7c>
   17610:	ldr	r1, [pc, #1440]	; 17bb8 <__assert_fail@plt+0x5ea4>
   17614:	mov	r0, r4
   17618:	add	r1, pc, r1
   1761c:	bl	117ec <strcmp@plt>
   17620:	subs	r3, r0, #0
   17624:	beq	179c4 <__assert_fail@plt+0x5cb0>
   17628:	ldr	r1, [pc, #1420]	; 17bbc <__assert_fail@plt+0x5ea8>
   1762c:	mov	r0, r4
   17630:	add	r1, pc, r1
   17634:	bl	117ec <strcmp@plt>
   17638:	subs	r3, r0, #0
   1763c:	beq	17aec <__assert_fail@plt+0x5dd8>
   17640:	ldr	r1, [pc, #1400]	; 17bc0 <__assert_fail@plt+0x5eac>
   17644:	mov	r0, r4
   17648:	add	r1, pc, r1
   1764c:	bl	117ec <strcmp@plt>
   17650:	subs	r3, r0, #0
   17654:	beq	17aa8 <__assert_fail@plt+0x5d94>
   17658:	ldrsb	r3, [r4]
   1765c:	cmp	r3, #43	; 0x2b
   17660:	beq	17afc <__assert_fail@plt+0x5de8>
   17664:	cmp	r3, #45	; 0x2d
   17668:	beq	17b14 <__assert_fail@plt+0x5e00>
   1766c:	mov	r0, r4
   17670:	bl	11ac8 <strlen@plt>
   17674:	cmp	r0, #3
   17678:	bls	17b2c <__assert_fail@plt+0x5e18>
   1767c:	sub	r0, r0, #4
   17680:	add	r2, r4, r0
   17684:	ldrb	r3, [r4, r0]
   17688:	cmp	r3, #32
   1768c:	beq	17a3c <__assert_fail@plt+0x5d28>
   17690:	ldr	r9, [pc, #1324]	; 17bc4 <__assert_fail@plt+0x5eb0>
   17694:	mov	sl, #0
   17698:	add	r9, pc, r9
   1769c:	ldr	fp, [pc, #1316]	; 17bc8 <__assert_fail@plt+0x5eb4>
   176a0:	add	fp, pc, fp
   176a4:	add	fp, fp, #448	; 0x1c0
   176a8:	cmp	r9, #0
   176ac:	beq	17ad8 <__assert_fail@plt+0x5dc4>
   176b0:	mov	r0, r9
   176b4:	bl	11ac8 <strlen@plt>
   176b8:	subs	r8, r0, #0
   176bc:	beq	17ad8 <__assert_fail@plt+0x5dc4>
   176c0:	mov	r1, r9
   176c4:	mov	r2, r8
   176c8:	mov	r0, r4
   176cc:	bl	11b28 <strncasecmp@plt>
   176d0:	cmp	r0, #0
   176d4:	bne	17ad8 <__assert_fail@plt+0x5dc4>
   176d8:	cmn	r4, r8
   176dc:	beq	17ad8 <__assert_fail@plt+0x5dc4>
   176e0:	ldrsb	r3, [r4, r8]
   176e4:	cmp	r3, #32
   176e8:	bne	17ad8 <__assert_fail@plt+0x5dc4>
   176ec:	ldr	r3, [pc, #1240]	; 17bcc <__assert_fail@plt+0x5eb8>
   176f0:	add	r8, r8, #1
   176f4:	add	r3, pc, r3
   176f8:	add	sl, r3, sl, lsl #3
   176fc:	add	r4, r4, r8
   17700:	ldr	r8, [sl, #452]	; 0x1c4
   17704:	mov	lr, r7
   17708:	add	r9, sp, #72	; 0x48
   1770c:	ldm	lr!, {r0, r1, r2, r3}
   17710:	mov	ip, r9
   17714:	stmia	ip!, {r0, r1, r2, r3}
   17718:	ldm	lr!, {r0, r1, r2, r3}
   1771c:	stmia	ip!, {r0, r1, r2, r3}
   17720:	ldm	lr, {r0, r1, r2}
   17724:	stm	ip, {r0, r1, r2}
   17728:	mov	r2, r7
   1772c:	ldr	r1, [pc, #1180]	; 17bd0 <__assert_fail@plt+0x5ebc>
   17730:	mov	r0, r4
   17734:	add	r1, pc, r1
   17738:	bl	1190c <strptime@plt>
   1773c:	cmp	r0, #0
   17740:	beq	17750 <__assert_fail@plt+0x5a3c>
   17744:	ldrsb	r3, [r0]
   17748:	cmp	r3, #0
   1774c:	beq	17994 <__assert_fail@plt+0x5c80>
   17750:	mov	lr, r9
   17754:	mov	ip, r7
   17758:	ldm	lr!, {r0, r1, r2, r3}
   1775c:	stmia	ip!, {r0, r1, r2, r3}
   17760:	ldm	lr!, {r0, r1, r2, r3}
   17764:	stmia	ip!, {r0, r1, r2, r3}
   17768:	ldm	lr, {r0, r1, r2}
   1776c:	stm	ip, {r0, r1, r2}
   17770:	mov	r2, r7
   17774:	ldr	r1, [pc, #1112]	; 17bd4 <__assert_fail@plt+0x5ec0>
   17778:	mov	r0, r4
   1777c:	add	r1, pc, r1
   17780:	bl	1190c <strptime@plt>
   17784:	cmp	r0, #0
   17788:	beq	17798 <__assert_fail@plt+0x5a84>
   1778c:	ldrsb	r3, [r0]
   17790:	cmp	r3, #0
   17794:	beq	17994 <__assert_fail@plt+0x5c80>
   17798:	mov	lr, r9
   1779c:	mov	ip, r7
   177a0:	ldm	lr!, {r0, r1, r2, r3}
   177a4:	stmia	ip!, {r0, r1, r2, r3}
   177a8:	ldm	lr!, {r0, r1, r2, r3}
   177ac:	stmia	ip!, {r0, r1, r2, r3}
   177b0:	ldm	lr, {r0, r1, r2}
   177b4:	stm	ip, {r0, r1, r2}
   177b8:	mov	r2, r7
   177bc:	ldr	r1, [pc, #1044]	; 17bd8 <__assert_fail@plt+0x5ec4>
   177c0:	mov	r0, r4
   177c4:	add	r1, pc, r1
   177c8:	bl	1190c <strptime@plt>
   177cc:	cmp	r0, #0
   177d0:	beq	177e0 <__assert_fail@plt+0x5acc>
   177d4:	ldrsb	r3, [r0]
   177d8:	cmp	r3, #0
   177dc:	beq	1798c <__assert_fail@plt+0x5c78>
   177e0:	mov	lr, r9
   177e4:	mov	ip, r7
   177e8:	ldm	lr!, {r0, r1, r2, r3}
   177ec:	stmia	ip!, {r0, r1, r2, r3}
   177f0:	ldm	lr!, {r0, r1, r2, r3}
   177f4:	stmia	ip!, {r0, r1, r2, r3}
   177f8:	ldm	lr, {r0, r1, r2}
   177fc:	stm	ip, {r0, r1, r2}
   17800:	mov	r2, r7
   17804:	ldr	r1, [pc, #976]	; 17bdc <__assert_fail@plt+0x5ec8>
   17808:	mov	r0, r4
   1780c:	add	r1, pc, r1
   17810:	bl	1190c <strptime@plt>
   17814:	cmp	r0, #0
   17818:	beq	17828 <__assert_fail@plt+0x5b14>
   1781c:	ldrsb	r3, [r0]
   17820:	cmp	r3, #0
   17824:	beq	1798c <__assert_fail@plt+0x5c78>
   17828:	mov	lr, r9
   1782c:	mov	ip, r7
   17830:	ldm	lr!, {r0, r1, r2, r3}
   17834:	stmia	ip!, {r0, r1, r2, r3}
   17838:	ldm	lr!, {r0, r1, r2, r3}
   1783c:	stmia	ip!, {r0, r1, r2, r3}
   17840:	ldm	lr, {r0, r1, r2}
   17844:	stm	ip, {r0, r1, r2}
   17848:	mov	r2, r7
   1784c:	ldr	r1, [pc, #908]	; 17be0 <__assert_fail@plt+0x5ecc>
   17850:	mov	r0, r4
   17854:	add	r1, pc, r1
   17858:	bl	1190c <strptime@plt>
   1785c:	cmp	r0, #0
   17860:	beq	17870 <__assert_fail@plt+0x5b5c>
   17864:	ldrsb	r3, [r0]
   17868:	cmp	r3, #0
   1786c:	beq	17b44 <__assert_fail@plt+0x5e30>
   17870:	mov	lr, r9
   17874:	mov	ip, r7
   17878:	ldm	lr!, {r0, r1, r2, r3}
   1787c:	stmia	ip!, {r0, r1, r2, r3}
   17880:	ldm	lr!, {r0, r1, r2, r3}
   17884:	stmia	ip!, {r0, r1, r2, r3}
   17888:	ldm	lr, {r0, r1, r2}
   1788c:	stm	ip, {r0, r1, r2}
   17890:	mov	r2, r7
   17894:	ldr	r1, [pc, #840]	; 17be4 <__assert_fail@plt+0x5ed0>
   17898:	mov	r0, r4
   1789c:	add	r1, pc, r1
   178a0:	bl	1190c <strptime@plt>
   178a4:	cmp	r0, #0
   178a8:	beq	178b8 <__assert_fail@plt+0x5ba4>
   178ac:	ldrsb	r3, [r0]
   178b0:	cmp	r3, #0
   178b4:	beq	17b44 <__assert_fail@plt+0x5e30>
   178b8:	mov	lr, r9
   178bc:	mov	ip, r7
   178c0:	ldm	lr!, {r0, r1, r2, r3}
   178c4:	stmia	ip!, {r0, r1, r2, r3}
   178c8:	ldm	lr!, {r0, r1, r2, r3}
   178cc:	stmia	ip!, {r0, r1, r2, r3}
   178d0:	ldm	lr, {r0, r1, r2}
   178d4:	stm	ip, {r0, r1, r2}
   178d8:	mov	r2, r7
   178dc:	ldr	r1, [pc, #772]	; 17be8 <__assert_fail@plt+0x5ed4>
   178e0:	mov	r0, r4
   178e4:	add	r1, pc, r1
   178e8:	bl	1190c <strptime@plt>
   178ec:	cmp	r0, #0
   178f0:	beq	17900 <__assert_fail@plt+0x5bec>
   178f4:	ldrsb	r3, [r0]
   178f8:	cmp	r3, #0
   178fc:	beq	17994 <__assert_fail@plt+0x5c80>
   17900:	mov	lr, r9
   17904:	mov	ip, r7
   17908:	ldm	lr!, {r0, r1, r2, r3}
   1790c:	stmia	ip!, {r0, r1, r2, r3}
   17910:	ldm	lr!, {r0, r1, r2, r3}
   17914:	stmia	ip!, {r0, r1, r2, r3}
   17918:	ldm	lr, {r0, r1, r2}
   1791c:	stm	ip, {r0, r1, r2}
   17920:	mov	r2, r7
   17924:	ldr	r1, [pc, #704]	; 17bec <__assert_fail@plt+0x5ed8>
   17928:	mov	r0, r4
   1792c:	add	r1, pc, r1
   17930:	bl	1190c <strptime@plt>
   17934:	cmp	r0, #0
   17938:	beq	17948 <__assert_fail@plt+0x5c34>
   1793c:	ldrsb	r3, [r0]
   17940:	cmp	r3, #0
   17944:	beq	1798c <__assert_fail@plt+0x5c78>
   17948:	ldm	r9!, {r0, r1, r2, r3}
   1794c:	mov	ip, r7
   17950:	stmia	ip!, {r0, r1, r2, r3}
   17954:	ldm	r9!, {r0, r1, r2, r3}
   17958:	stmia	ip!, {r0, r1, r2, r3}
   1795c:	ldm	r9, {r0, r1, r2}
   17960:	stm	ip, {r0, r1, r2}
   17964:	mov	r0, r4
   17968:	ldr	r1, [pc, #640]	; 17bf0 <__assert_fail@plt+0x5edc>
   1796c:	mov	r2, r7
   17970:	add	r1, pc, r1
   17974:	bl	1190c <strptime@plt>
   17978:	cmp	r0, #0
   1797c:	beq	179bc <__assert_fail@plt+0x5ca8>
   17980:	ldrsb	r3, [r0]
   17984:	cmp	r3, #0
   17988:	bne	179bc <__assert_fail@plt+0x5ca8>
   1798c:	mov	r3, #0
   17990:	str	r3, [sp, #28]
   17994:	mov	r0, r7
   17998:	bl	1181c <mktime@plt>
   1799c:	cmn	r0, #1
   179a0:	str	r0, [sp, #4]
   179a4:	beq	179bc <__assert_fail@plt+0x5ca8>
   179a8:	cmp	r8, #0
   179ac:	blt	179e4 <__assert_fail@plt+0x5cd0>
   179b0:	ldr	r3, [sp, #52]	; 0x34
   179b4:	cmp	r3, r8
   179b8:	beq	179e4 <__assert_fail@plt+0x5cd0>
   179bc:	mvn	r4, #21
   179c0:	b	17a20 <__assert_fail@plt+0x5d0c>
   179c4:	mov	r0, r7
   179c8:	str	r3, [sp, #36]	; 0x24
   179cc:	str	r3, [sp, #32]
   179d0:	str	r3, [sp, #28]
   179d4:	bl	1181c <mktime@plt>
   179d8:	cmn	r0, #1
   179dc:	str	r0, [sp, #4]
   179e0:	beq	179bc <__assert_fail@plt+0x5ca8>
   179e4:	ldr	r1, [pc, #520]	; 17bf4 <__assert_fail@plt+0x5ee0>
   179e8:	ldrd	r2, [sp, #8]
   179ec:	ldrd	r8, [sp, #16]
   179f0:	smlal	r2, r3, r1, r0
   179f4:	cmp	r9, r3
   179f8:	cmpeq	r8, r2
   179fc:	mov	r0, r2
   17a00:	movcs	r2, #0
   17a04:	mov	r1, r3
   17a08:	movcs	r3, r2
   17a0c:	bcs	17a18 <__assert_fail@plt+0x5d04>
   17a10:	subs	r2, r0, r8
   17a14:	sbc	r3, r1, r9
   17a18:	mov	r4, #0
   17a1c:	strd	r2, [r5]
   17a20:	ldr	r2, [sp, #116]	; 0x74
   17a24:	ldr	r3, [r6]
   17a28:	mov	r0, r4
   17a2c:	cmp	r2, r3
   17a30:	bne	17ba8 <__assert_fail@plt+0x5e94>
   17a34:	add	sp, sp, #124	; 0x7c
   17a38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a3c:	ldrb	r3, [r2, #1]!
   17a40:	cmp	r3, #97	; 0x61
   17a44:	bne	17690 <__assert_fail@plt+0x597c>
   17a48:	ldrb	r3, [r2, #1]!
   17a4c:	cmp	r3, #103	; 0x67
   17a50:	bne	17690 <__assert_fail@plt+0x597c>
   17a54:	ldrb	r3, [r2, #1]
   17a58:	cmp	r3, #111	; 0x6f
   17a5c:	bne	17690 <__assert_fail@plt+0x597c>
   17a60:	mov	r1, r0
   17a64:	mov	r0, r4
   17a68:	bl	11870 <strndup@plt>
   17a6c:	subs	r8, r0, #0
   17a70:	beq	17b58 <__assert_fail@plt+0x5e44>
   17a74:	add	r1, sp, #16
   17a78:	bl	172d0 <__assert_fail@plt+0x55bc>
   17a7c:	mov	r4, r0
   17a80:	mov	r0, r8
   17a84:	bl	11840 <free@plt>
   17a88:	cmp	r4, #0
   17a8c:	blt	17a20 <__assert_fail@plt+0x5d0c>
   17a90:	mov	r0, r7
   17a94:	bl	1181c <mktime@plt>
   17a98:	cmn	r0, #1
   17a9c:	str	r0, [sp, #4]
   17aa0:	bne	179e4 <__assert_fail@plt+0x5cd0>
   17aa4:	b	179bc <__assert_fail@plt+0x5ca8>
   17aa8:	ldr	r2, [sp, #40]	; 0x28
   17aac:	mov	r0, r7
   17ab0:	add	r2, r2, #1
   17ab4:	str	r3, [sp, #36]	; 0x24
   17ab8:	str	r3, [sp, #32]
   17abc:	str	r3, [sp, #28]
   17ac0:	str	r2, [sp, #40]	; 0x28
   17ac4:	bl	1181c <mktime@plt>
   17ac8:	cmn	r0, #1
   17acc:	str	r0, [sp, #4]
   17ad0:	bne	179e4 <__assert_fail@plt+0x5cd0>
   17ad4:	b	179bc <__assert_fail@plt+0x5ca8>
   17ad8:	add	sl, sl, #1
   17adc:	cmp	sl, #14
   17ae0:	beq	17b3c <__assert_fail@plt+0x5e28>
   17ae4:	ldr	r9, [fp, sl, lsl #3]
   17ae8:	b	176a8 <__assert_fail@plt+0x5994>
   17aec:	ldr	r2, [sp, #40]	; 0x28
   17af0:	mov	r0, r7
   17af4:	sub	r2, r2, #1
   17af8:	b	17ab4 <__assert_fail@plt+0x5da0>
   17afc:	add	r0, r4, #1
   17b00:	add	r1, sp, #8
   17b04:	bl	172d0 <__assert_fail@plt+0x55bc>
   17b08:	subs	r4, r0, #0
   17b0c:	bge	17a90 <__assert_fail@plt+0x5d7c>
   17b10:	b	17a20 <__assert_fail@plt+0x5d0c>
   17b14:	add	r0, r4, #1
   17b18:	add	r1, sp, #16
   17b1c:	bl	172d0 <__assert_fail@plt+0x55bc>
   17b20:	subs	r4, r0, #0
   17b24:	bge	17a90 <__assert_fail@plt+0x5d7c>
   17b28:	b	17a20 <__assert_fail@plt+0x5d0c>
   17b2c:	ldr	r9, [pc, #196]	; 17bf8 <__assert_fail@plt+0x5ee4>
   17b30:	mov	sl, #0
   17b34:	add	r9, pc, r9
   17b38:	b	1769c <__assert_fail@plt+0x5988>
   17b3c:	mvn	r8, #0
   17b40:	b	17704 <__assert_fail@plt+0x59f0>
   17b44:	mov	r3, #0
   17b48:	str	r3, [sp, #36]	; 0x24
   17b4c:	str	r3, [sp, #32]
   17b50:	str	r3, [sp, #28]
   17b54:	b	17994 <__assert_fail@plt+0x5c80>
   17b58:	mvn	r4, #11
   17b5c:	b	17a20 <__assert_fail@plt+0x5d0c>
   17b60:	ldr	r3, [pc, #148]	; 17bfc <__assert_fail@plt+0x5ee8>
   17b64:	ldr	r1, [pc, #148]	; 17c00 <__assert_fail@plt+0x5eec>
   17b68:	ldr	r0, [pc, #148]	; 17c04 <__assert_fail@plt+0x5ef0>
   17b6c:	add	r3, pc, r3
   17b70:	mov	r2, #196	; 0xc4
   17b74:	add	r3, r3, #12
   17b78:	add	r1, pc, r1
   17b7c:	add	r0, pc, r0
   17b80:	bl	11d14 <__assert_fail@plt>
   17b84:	ldr	r3, [pc, #124]	; 17c08 <__assert_fail@plt+0x5ef4>
   17b88:	ldr	r1, [pc, #124]	; 17c0c <__assert_fail@plt+0x5ef8>
   17b8c:	ldr	r0, [pc, #124]	; 17c10 <__assert_fail@plt+0x5efc>
   17b90:	add	r3, pc, r3
   17b94:	mov	r2, #195	; 0xc3
   17b98:	add	r3, r3, #12
   17b9c:	add	r1, pc, r1
   17ba0:	add	r0, pc, r0
   17ba4:	bl	11d14 <__assert_fail@plt>
   17ba8:	bl	118e8 <__stack_chk_fail@plt>
   17bac:	andeq	r5, r1, ip, ror r8
   17bb0:	ldrdeq	r0, [r0], -r4
   17bb4:	ldrdeq	r4, [r0], -r0
   17bb8:	strheq	r4, [r0], -r4	; <UNPREDICTABLE>
   17bbc:	andeq	r4, r0, r4, lsr #1
   17bc0:	muleq	r0, r8, r0
   17bc4:	andeq	r4, r0, r0, lsr #32
   17bc8:	andeq	r5, r1, r8, ror r3
   17bcc:	andeq	r5, r1, r4, lsr #6
   17bd0:	andeq	r3, r0, r0, asr #31
   17bd4:	andeq	r3, r0, ip, lsl #31
   17bd8:	andeq	r3, r0, r8, asr pc
   17bdc:	andeq	r3, r0, r0, lsr #30
   17be0:	andeq	r3, r0, r8, ror #29
   17be4:	andeq	r3, r0, ip, lsr #29
   17be8:	andeq	r3, r0, r0, ror lr
   17bec:	andeq	r3, r0, r4, lsr lr
   17bf0:	strdeq	r3, [r0], -r8
   17bf4:	andeq	r4, pc, r0, asr #4
   17bf8:	andeq	r3, r0, r4, lsl #23
   17bfc:	andeq	r3, r0, r0, lsl fp
   17c00:	andeq	r3, r0, r8, lsr #22
   17c04:	andeq	r3, r0, r4, asr #22
   17c08:	andeq	r3, r0, ip, ror #21
   17c0c:	andeq	r3, r0, r4, lsl #22
   17c10:	andeq	r4, r0, r0, ror #3
   17c14:	ldr	r3, [r0, #32]
   17c18:	cmp	r3, #0
   17c1c:	ldrge	r0, [r0, #36]	; 0x24
   17c20:	movlt	r0, #0
   17c24:	bx	lr
   17c28:	push	{r4, r5, r6, r7, r8, lr}
   17c2c:	sub	sp, sp, #16
   17c30:	tst	r2, #1
   17c34:	mov	r5, r2
   17c38:	mov	r7, r0
   17c3c:	mov	r8, r1
   17c40:	mov	r6, r3
   17c44:	ldr	r4, [sp, #40]	; 0x28
   17c48:	bne	17dd4 <__assert_fail@plt+0x60c0>
   17c4c:	and	r3, r5, #3
   17c50:	cmp	r3, #3
   17c54:	beq	17d58 <__assert_fail@plt+0x6044>
   17c58:	tst	r5, #2
   17c5c:	bne	17d7c <__assert_fail@plt+0x6068>
   17c60:	tst	r5, #8
   17c64:	bne	17dc8 <__assert_fail@plt+0x60b4>
   17c68:	tst	r5, #16
   17c6c:	bne	17c84 <__assert_fail@plt+0x5f70>
   17c70:	tst	r5, #4
   17c74:	bne	17cbc <__assert_fail@plt+0x5fa8>
   17c78:	mov	r0, #0
   17c7c:	add	sp, sp, #16
   17c80:	pop	{r4, r5, r6, r7, r8, pc}
   17c84:	ldr	r3, [pc, #416]	; 17e2c <__assert_fail@plt+0x6118>
   17c88:	add	r3, pc, r3
   17c8c:	stm	sp, {r3, r8}
   17c90:	mov	r2, #1
   17c94:	mvn	r3, #0
   17c98:	mov	r1, r4
   17c9c:	mov	r0, r6
   17ca0:	bl	11cfc <__snprintf_chk@plt>
   17ca4:	cmp	r0, r4
   17ca8:	bhi	17d38 <__assert_fail@plt+0x6024>
   17cac:	tst	r5, #4
   17cb0:	sub	r4, r4, r0
   17cb4:	add	r6, r6, r0
   17cb8:	beq	17c78 <__assert_fail@plt+0x5f64>
   17cbc:	mov	r0, r7
   17cc0:	bl	17c14 <__assert_fail@plt+0x5f00>
   17cc4:	ldr	r2, [pc, #356]	; 17e30 <__assert_fail@plt+0x611c>
   17cc8:	mov	r5, r0
   17ccc:	asr	ip, r0, #31
   17cd0:	smull	r1, r3, r2, r5
   17cd4:	ldr	r1, [pc, #344]	; 17e34 <__assert_fail@plt+0x6120>
   17cd8:	add	r3, r3, r5
   17cdc:	mov	r0, r6
   17ce0:	rsb	r3, ip, r3, asr #5
   17ce4:	smull	r1, lr, r1, r5
   17ce8:	smull	r1, r2, r2, r3
   17cec:	add	r1, r2, r3
   17cf0:	asr	r2, r3, #31
   17cf4:	rsb	r2, r2, r1, asr #5
   17cf8:	add	r1, lr, r5
   17cfc:	rsb	r2, r2, r2, lsl #4
   17d00:	ldr	lr, [pc, #304]	; 17e38 <__assert_fail@plt+0x6124>
   17d04:	sub	r3, r3, r2, lsl #2
   17d08:	cmp	r3, #0
   17d0c:	rsblt	r3, r3, #0
   17d10:	rsb	r1, ip, r1, asr #11
   17d14:	add	lr, pc, lr
   17d18:	stmib	sp, {r1, r3}
   17d1c:	str	lr, [sp]
   17d20:	mvn	r3, #0
   17d24:	mov	r2, #1
   17d28:	mov	r1, r4
   17d2c:	bl	11cfc <__snprintf_chk@plt>
   17d30:	cmp	r0, r4
   17d34:	bls	17c78 <__assert_fail@plt+0x5f64>
   17d38:	ldr	r1, [pc, #252]	; 17e3c <__assert_fail@plt+0x6128>
   17d3c:	mov	r2, #5
   17d40:	add	r1, pc, r1
   17d44:	mov	r0, #0
   17d48:	bl	118d0 <dcgettext@plt>
   17d4c:	bl	11aec <warnx@plt>
   17d50:	mvn	r0, #0
   17d54:	b	17c7c <__assert_fail@plt+0x5f68>
   17d58:	cmp	r4, #0
   17d5c:	beq	17d38 <__assert_fail@plt+0x6024>
   17d60:	tst	r5, #32
   17d64:	movne	r3, #84	; 0x54
   17d68:	moveq	r3, #32
   17d6c:	tst	r5, #2
   17d70:	sub	r4, r4, #1
   17d74:	strb	r3, [r6], #1
   17d78:	beq	17c60 <__assert_fail@plt+0x5f4c>
   17d7c:	ldrd	r0, [r7]
   17d80:	ldr	r3, [pc, #184]	; 17e40 <__assert_fail@plt+0x612c>
   17d84:	ldr	r2, [r7, #8]
   17d88:	add	r3, pc, r3
   17d8c:	str	r0, [sp, #12]
   17d90:	str	r1, [sp, #8]
   17d94:	str	r2, [sp, #4]
   17d98:	str	r3, [sp]
   17d9c:	mov	r2, #1
   17da0:	mvn	r3, #0
   17da4:	mov	r1, r4
   17da8:	mov	r0, r6
   17dac:	bl	11cfc <__snprintf_chk@plt>
   17db0:	cmp	r0, r4
   17db4:	bhi	17d38 <__assert_fail@plt+0x6024>
   17db8:	tst	r5, #8
   17dbc:	sub	r4, r4, r0
   17dc0:	add	r6, r6, r0
   17dc4:	beq	17c68 <__assert_fail@plt+0x5f54>
   17dc8:	ldr	r3, [pc, #116]	; 17e44 <__assert_fail@plt+0x6130>
   17dcc:	add	r3, pc, r3
   17dd0:	b	17c8c <__assert_fail@plt+0x5f78>
   17dd4:	ldr	r3, [r0, #20]
   17dd8:	ldr	r1, [r0, #16]
   17ddc:	ldr	r2, [pc, #100]	; 17e48 <__assert_fail@plt+0x6134>
   17de0:	ldr	r0, [r0, #12]
   17de4:	add	r3, r3, #1888	; 0x760
   17de8:	add	r2, pc, r2
   17dec:	add	r3, r3, #12
   17df0:	add	r1, r1, #1
   17df4:	str	r3, [sp, #4]
   17df8:	str	r1, [sp, #8]
   17dfc:	str	r0, [sp, #12]
   17e00:	str	r2, [sp]
   17e04:	mov	r1, r4
   17e08:	mov	r0, r6
   17e0c:	mvn	r3, #0
   17e10:	mov	r2, #1
   17e14:	bl	11cfc <__snprintf_chk@plt>
   17e18:	cmp	r0, r4
   17e1c:	subls	r4, r4, r0
   17e20:	addls	r6, r6, r0
   17e24:	bls	17c4c <__assert_fail@plt+0x5f38>
   17e28:	b	17d38 <__assert_fail@plt+0x6024>
   17e2c:	andeq	r3, r0, ip, lsr fp
   17e30:	stmhi	r8, {r0, r3, r7, fp, pc}
   17e34:			; <UNDEFINED> instruction: 0x91a2b3c5
   17e38:			; <UNDEFINED> instruction: 0x00003ab8
   17e3c:	andeq	r3, r0, r8, asr #20
   17e40:	andeq	r3, r0, r4, lsr #20
   17e44:	strdeq	r3, [r0], -r0
   17e48:	muleq	r0, r0, r9
   17e4c:	ldr	ip, [pc, #164]	; 17ef8 <__assert_fail@plt+0x61e4>
   17e50:	push	{r4, r5, r6, r7, r8, r9, lr}
   17e54:	add	ip, pc, ip
   17e58:	ldr	lr, [pc, #156]	; 17efc <__assert_fail@plt+0x61e8>
   17e5c:	sub	sp, sp, #60	; 0x3c
   17e60:	mov	r6, r1
   17e64:	ldr	r4, [ip, lr]
   17e68:	tst	r1, #64	; 0x40
   17e6c:	mov	r1, ip
   17e70:	ldr	ip, [r4]
   17e74:	add	r5, sp, #8
   17e78:	mov	r8, r2
   17e7c:	mov	r9, r3
   17e80:	mov	r7, r0
   17e84:	str	ip, [sp, #52]	; 0x34
   17e88:	mov	r1, r5
   17e8c:	beq	17ecc <__assert_fail@plt+0x61b8>
   17e90:	bl	117e0 <gmtime_r@plt>
   17e94:	cmp	r0, #0
   17e98:	beq	17ed4 <__assert_fail@plt+0x61c0>
   17e9c:	str	r9, [sp]
   17ea0:	mov	r3, r8
   17ea4:	mov	r2, r6
   17ea8:	ldr	r1, [r7, #4]
   17eac:	mov	r0, r5
   17eb0:	bl	17c28 <__assert_fail@plt+0x5f14>
   17eb4:	ldr	r2, [sp, #52]	; 0x34
   17eb8:	ldr	r3, [r4]
   17ebc:	cmp	r2, r3
   17ec0:	bne	17ef4 <__assert_fail@plt+0x61e0>
   17ec4:	add	sp, sp, #60	; 0x3c
   17ec8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ecc:	bl	11924 <localtime_r@plt>
   17ed0:	b	17e94 <__assert_fail@plt+0x6180>
   17ed4:	ldr	r1, [pc, #36]	; 17f00 <__assert_fail@plt+0x61ec>
   17ed8:	mov	r2, #5
   17edc:	add	r1, pc, r1
   17ee0:	bl	118d0 <dcgettext@plt>
   17ee4:	ldr	r1, [r7]
   17ee8:	bl	11aec <warnx@plt>
   17eec:	mvn	r0, #0
   17ef0:	b	17eb4 <__assert_fail@plt+0x61a0>
   17ef4:	bl	118e8 <__stack_chk_fail@plt>
   17ef8:	andeq	r4, r1, r0, asr #31
   17efc:	ldrdeq	r0, [r0], -r4
   17f00:	strdeq	r3, [r0], -ip
   17f04:	push	{lr}		; (str lr, [sp, #-4]!)
   17f08:	sub	sp, sp, #12
   17f0c:	str	r3, [sp]
   17f10:	mov	r3, r2
   17f14:	mov	r2, r1
   17f18:	mov	r1, #0
   17f1c:	bl	17c28 <__assert_fail@plt+0x5f14>
   17f20:	add	sp, sp, #12
   17f24:	pop	{pc}		; (ldr pc, [sp], #4)
   17f28:	ldr	ip, [pc, #164]	; 17fd4 <__assert_fail@plt+0x62c0>
   17f2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17f30:	add	ip, pc, ip
   17f34:	ldr	lr, [pc, #156]	; 17fd8 <__assert_fail@plt+0x62c4>
   17f38:	sub	sp, sp, #60	; 0x3c
   17f3c:	mov	r6, r1
   17f40:	ldr	r4, [ip, lr]
   17f44:	tst	r1, #64	; 0x40
   17f48:	mov	r1, ip
   17f4c:	ldr	ip, [r4]
   17f50:	add	r5, sp, #8
   17f54:	mov	r7, r2
   17f58:	mov	r8, r3
   17f5c:	mov	r9, r0
   17f60:	str	ip, [sp, #52]	; 0x34
   17f64:	mov	r1, r5
   17f68:	beq	17fa8 <__assert_fail@plt+0x6294>
   17f6c:	bl	117e0 <gmtime_r@plt>
   17f70:	cmp	r0, #0
   17f74:	beq	17fb0 <__assert_fail@plt+0x629c>
   17f78:	str	r8, [sp]
   17f7c:	mov	r3, r7
   17f80:	mov	r2, r6
   17f84:	mov	r0, r5
   17f88:	mov	r1, #0
   17f8c:	bl	17c28 <__assert_fail@plt+0x5f14>
   17f90:	ldr	r2, [sp, #52]	; 0x34
   17f94:	ldr	r3, [r4]
   17f98:	cmp	r2, r3
   17f9c:	bne	17fd0 <__assert_fail@plt+0x62bc>
   17fa0:	add	sp, sp, #60	; 0x3c
   17fa4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17fa8:	bl	11924 <localtime_r@plt>
   17fac:	b	17f70 <__assert_fail@plt+0x625c>
   17fb0:	ldr	r1, [pc, #36]	; 17fdc <__assert_fail@plt+0x62c8>
   17fb4:	mov	r2, #5
   17fb8:	add	r1, pc, r1
   17fbc:	bl	118d0 <dcgettext@plt>
   17fc0:	mov	r1, r9
   17fc4:	bl	11aec <warnx@plt>
   17fc8:	mvn	r0, #0
   17fcc:	b	17f90 <__assert_fail@plt+0x627c>
   17fd0:	bl	118e8 <__stack_chk_fail@plt>
   17fd4:	andeq	r4, r1, r4, ror #29
   17fd8:	ldrdeq	r0, [r0], -r4
   17fdc:	andeq	r3, r0, r0, lsr #16
   17fe0:	push	{r4, r5, r6, lr}
   17fe4:	mov	r4, r1
   17fe8:	ldr	r1, [r1]
   17fec:	mov	r5, r0
   17ff0:	cmp	r1, #0
   17ff4:	beq	18030 <__assert_fail@plt+0x631c>
   17ff8:	ldr	lr, [r5]
   17ffc:	ldr	r3, [pc, #60]	; 18040 <__assert_fail@plt+0x632c>
   18000:	asr	r2, r1, #31
   18004:	asr	r0, lr, #31
   18008:	smull	r4, ip, r3, lr
   1800c:	smull	r4, r3, r3, r1
   18010:	add	ip, ip, lr
   18014:	add	r3, r3, r1
   18018:	rsb	r0, r0, ip, asr #16
   1801c:	rsb	r3, r2, r3, asr #16
   18020:	sub	r0, r0, r3
   18024:	clz	r0, r0
   18028:	lsr	r0, r0, #5
   1802c:	pop	{r4, r5, r6, pc}
   18030:	mov	r0, r4
   18034:	bl	119c0 <gettimeofday@plt>
   18038:	ldr	r1, [r4]
   1803c:	b	17ff8 <__assert_fail@plt+0x62e4>
   18040:	eorgt	r4, lr, #29360128	; 0x1c00000
   18044:	push	{r4, r5, r6, lr}
   18048:	mov	r4, r1
   1804c:	ldr	r1, [r1]
   18050:	mov	r5, r0
   18054:	cmp	r1, #0
   18058:	beq	1808c <__assert_fail@plt+0x6378>
   1805c:	ldr	r3, [r5]
   18060:	ldr	ip, [pc, #52]	; 1809c <__assert_fail@plt+0x6388>
   18064:	asr	r2, r1, #31
   18068:	asr	r0, r3, #31
   1806c:	smull	lr, r3, ip, r3
   18070:	smull	ip, r1, ip, r1
   18074:	rsb	r0, r0, r3, asr #23
   18078:	rsb	r1, r2, r1, asr #23
   1807c:	sub	r0, r0, r1
   18080:	clz	r0, r0
   18084:	lsr	r0, r0, #5
   18088:	pop	{r4, r5, r6, pc}
   1808c:	mov	r0, r4
   18090:	bl	119c0 <gettimeofday@plt>
   18094:	ldr	r1, [r4]
   18098:	b	1805c <__assert_fail@plt+0x6348>
   1809c:	ldrmi	sl, [r8], #-1147	; 0xfffffb85
   180a0:	ldr	ip, [pc, #276]	; 181bc <__assert_fail@plt+0x64a8>
   180a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   180a8:	add	ip, pc, ip
   180ac:	ldr	lr, [pc, #268]	; 181c0 <__assert_fail@plt+0x64ac>
   180b0:	sub	sp, sp, #68	; 0x44
   180b4:	add	r7, sp, #16
   180b8:	ldr	r4, [ip, lr]
   180bc:	mov	r8, r3
   180c0:	mov	r6, r1
   180c4:	ldr	r3, [r4]
   180c8:	mov	r1, r7
   180cc:	mov	r5, r0
   180d0:	mov	r9, r2
   180d4:	str	r3, [sp, #60]	; 0x3c
   180d8:	bl	11924 <localtime_r@plt>
   180dc:	mov	r1, r6
   180e0:	mov	r0, r5
   180e4:	bl	17fe0 <__assert_fail@plt+0x62cc>
   180e8:	cmp	r0, #0
   180ec:	beq	18148 <__assert_fail@plt+0x6434>
   180f0:	ldr	r3, [pc, #204]	; 181c4 <__assert_fail@plt+0x64b0>
   180f4:	ldr	r1, [sp, #20]
   180f8:	ldr	r2, [sp, #24]
   180fc:	add	r3, pc, r3
   18100:	str	r1, [sp, #8]
   18104:	str	r2, [sp, #4]
   18108:	str	r3, [sp]
   1810c:	mov	r0, r8
   18110:	mvn	r3, #0
   18114:	mov	r2, #1
   18118:	ldr	r1, [sp, #96]	; 0x60
   1811c:	bl	11cfc <__snprintf_chk@plt>
   18120:	ldr	r3, [sp, #96]	; 0x60
   18124:	cmp	r0, r3
   18128:	movls	r0, #0
   1812c:	mvnhi	r0, #0
   18130:	ldr	r2, [sp, #60]	; 0x3c
   18134:	ldr	r3, [r4]
   18138:	cmp	r2, r3
   1813c:	bne	181b8 <__assert_fail@plt+0x64a4>
   18140:	add	sp, sp, #68	; 0x44
   18144:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18148:	mov	r1, r6
   1814c:	mov	r0, r5
   18150:	bl	18044 <__assert_fail@plt+0x6330>
   18154:	mov	r3, r7
   18158:	cmp	r0, #0
   1815c:	mov	r0, r8
   18160:	beq	181a4 <__assert_fail@plt+0x6490>
   18164:	tst	r9, #2
   18168:	bne	18190 <__assert_fail@plt+0x647c>
   1816c:	ldr	r2, [pc, #84]	; 181c8 <__assert_fail@plt+0x64b4>
   18170:	ldr	r1, [sp, #96]	; 0x60
   18174:	add	r2, pc, r2
   18178:	bl	11a50 <strftime@plt>
   1817c:	cmp	r0, #0
   18180:	movgt	r0, #0
   18184:	movle	r0, #1
   18188:	rsb	r0, r0, #0
   1818c:	b	18130 <__assert_fail@plt+0x641c>
   18190:	ldr	r2, [pc, #52]	; 181cc <__assert_fail@plt+0x64b8>
   18194:	ldr	r1, [sp, #96]	; 0x60
   18198:	add	r2, pc, r2
   1819c:	bl	11a50 <strftime@plt>
   181a0:	b	1817c <__assert_fail@plt+0x6468>
   181a4:	ldr	r2, [pc, #36]	; 181d0 <__assert_fail@plt+0x64bc>
   181a8:	ldr	r1, [sp, #96]	; 0x60
   181ac:	add	r2, pc, r2
   181b0:	bl	11a50 <strftime@plt>
   181b4:	b	1817c <__assert_fail@plt+0x6468>
   181b8:	bl	118e8 <__stack_chk_fail@plt>
   181bc:	andeq	r4, r1, ip, ror #26
   181c0:	ldrdeq	r0, [r0], -r4
   181c4:	strdeq	r3, [r0], -r8
   181c8:	muleq	r0, r8, r6
   181cc:	andeq	r3, r0, r8, ror #12
   181d0:	andeq	r3, r0, r8, ror #12
   181d4:	push	{r0, r1, r2, r3}
   181d8:	ldr	r0, [pc, #104]	; 18248 <__assert_fail@plt+0x6534>
   181dc:	ldr	r2, [pc, #104]	; 1824c <__assert_fail@plt+0x6538>
   181e0:	add	r0, pc, r0
   181e4:	push	{r4, r5, lr}
   181e8:	sub	sp, sp, #12
   181ec:	ldr	r4, [r0, r2]
   181f0:	ldr	r1, [pc, #88]	; 18250 <__assert_fail@plt+0x653c>
   181f4:	add	r3, sp, #28
   181f8:	ldr	ip, [r4]
   181fc:	str	r3, [sp]
   18200:	str	ip, [sp, #4]
   18204:	ldr	r5, [r0, r1]
   18208:	ldr	r2, [sp, #24]
   1820c:	mov	r1, #1
   18210:	ldr	r0, [r5]
   18214:	bl	11a5c <__vfprintf_chk@plt>
   18218:	ldr	r1, [r5]
   1821c:	mov	r0, #10
   18220:	bl	11c30 <fputc@plt>
   18224:	ldr	r2, [sp, #4]
   18228:	ldr	r3, [r4]
   1822c:	cmp	r2, r3
   18230:	bne	18244 <__assert_fail@plt+0x6530>
   18234:	add	sp, sp, #12
   18238:	pop	{r4, r5, lr}
   1823c:	add	sp, sp, #16
   18240:	bx	lr
   18244:	bl	118e8 <__stack_chk_fail@plt>
   18248:	andeq	r4, r1, r4, lsr ip
   1824c:	ldrdeq	r0, [r0], -r4
   18250:	ldrdeq	r0, [r0], -r8
   18254:	ldr	r1, [r1]
   18258:	ldr	r0, [r0]
   1825c:	b	117ec <strcmp@plt>
   18260:	push	{r4, r5, r6, r7, lr}
   18264:	sub	sp, sp, #20
   18268:	ldr	r4, [pc, #328]	; 183b8 <__assert_fail@plt+0x66a4>
   1826c:	ldr	r3, [pc, #328]	; 183bc <__assert_fail@plt+0x66a8>
   18270:	add	r4, pc, r4
   18274:	mov	r0, #1
   18278:	ldr	r6, [r4, r3]
   1827c:	ldr	r3, [r6]
   18280:	str	r3, [sp, #12]
   18284:	bl	11cb4 <isatty@plt>
   18288:	cmp	r0, #1
   1828c:	beq	182bc <__assert_fail@plt+0x65a8>
   18290:	ldr	r3, [pc, #296]	; 183c0 <__assert_fail@plt+0x66ac>
   18294:	ldr	r0, [pc, r3]
   18298:	ands	r5, r0, #4
   1829c:	bne	18360 <__assert_fail@plt+0x664c>
   182a0:	ldr	r2, [sp, #12]
   182a4:	ldr	r3, [r6]
   182a8:	mov	r0, r5
   182ac:	cmp	r2, r3
   182b0:	bne	183b4 <__assert_fail@plt+0x66a0>
   182b4:	add	sp, sp, #20
   182b8:	pop	{r4, r5, r6, r7, pc}
   182bc:	mov	r1, r0
   182c0:	add	r2, sp, #8
   182c4:	mov	r0, #0
   182c8:	bl	11bb8 <setupterm@plt>
   182cc:	cmp	r0, #0
   182d0:	bne	18290 <__assert_fail@plt+0x657c>
   182d4:	ldr	r5, [sp, #8]
   182d8:	cmp	r5, #1
   182dc:	bne	18290 <__assert_fail@plt+0x657c>
   182e0:	ldr	r0, [pc, #220]	; 183c4 <__assert_fail@plt+0x66b0>
   182e4:	add	r0, pc, r0
   182e8:	bl	117d4 <tigetnum@plt>
   182ec:	cmp	r0, #2
   182f0:	mov	r7, r0
   182f4:	ble	18290 <__assert_fail@plt+0x657c>
   182f8:	ldr	r3, [pc, #200]	; 183c8 <__assert_fail@plt+0x66b4>
   182fc:	add	r3, pc, r3
   18300:	ldr	r3, [r3]
   18304:	tst	r3, #4
   18308:	beq	182a0 <__assert_fail@plt+0x658c>
   1830c:	ldr	r3, [pc, #184]	; 183cc <__assert_fail@plt+0x66b8>
   18310:	ldr	r3, [r4, r3]
   18314:	ldr	r4, [r3]
   18318:	bl	11a98 <getpid@plt>
   1831c:	ldr	r2, [pc, #172]	; 183d0 <__assert_fail@plt+0x66bc>
   18320:	ldr	r3, [pc, #172]	; 183d4 <__assert_fail@plt+0x66c0>
   18324:	add	r2, pc, r2
   18328:	str	r2, [sp, #4]
   1832c:	ldr	r2, [pc, #164]	; 183d8 <__assert_fail@plt+0x66c4>
   18330:	add	r3, pc, r3
   18334:	str	r3, [sp]
   18338:	mov	r1, r5
   1833c:	add	r2, pc, r2
   18340:	mov	r3, r0
   18344:	mov	r0, r4
   18348:	bl	11ba0 <__fprintf_chk@plt>
   1834c:	ldr	r0, [pc, #136]	; 183dc <__assert_fail@plt+0x66c8>
   18350:	mov	r1, r7
   18354:	add	r0, pc, r0
   18358:	bl	181d4 <__assert_fail@plt+0x64c0>
   1835c:	b	182a0 <__assert_fail@plt+0x658c>
   18360:	ldr	r3, [pc, #100]	; 183cc <__assert_fail@plt+0x66b8>
   18364:	mov	r5, #0
   18368:	ldr	r3, [r4, r3]
   1836c:	ldr	r4, [r3]
   18370:	bl	11a98 <getpid@plt>
   18374:	ldr	r2, [pc, #100]	; 183e0 <__assert_fail@plt+0x66cc>
   18378:	ldr	r3, [pc, #100]	; 183e4 <__assert_fail@plt+0x66d0>
   1837c:	add	r2, pc, r2
   18380:	str	r2, [sp, #4]
   18384:	ldr	r2, [pc, #92]	; 183e8 <__assert_fail@plt+0x66d4>
   18388:	add	r3, pc, r3
   1838c:	str	r3, [sp]
   18390:	add	r2, pc, r2
   18394:	mov	r1, #1
   18398:	mov	r3, r0
   1839c:	mov	r0, r4
   183a0:	bl	11ba0 <__fprintf_chk@plt>
   183a4:	ldr	r0, [pc, #64]	; 183ec <__assert_fail@plt+0x66d8>
   183a8:	add	r0, pc, r0
   183ac:	bl	181d4 <__assert_fail@plt+0x64c0>
   183b0:	b	182a0 <__assert_fail@plt+0x658c>
   183b4:	bl	118e8 <__stack_chk_fail@plt>
   183b8:	andeq	r4, r1, r4, lsr #23
   183bc:	ldrdeq	r0, [r0], -r4
   183c0:	andeq	r7, r1, ip, ror #1
   183c4:	andeq	r3, r0, r8, lsr r6
   183c8:	andeq	r7, r1, r4, lsl #1
   183cc:	ldrdeq	r0, [r0], -r8
   183d0:	andeq	r3, r0, ip, ror #11
   183d4:	andeq	r3, r0, r8, ror #11
   183d8:	andeq	r3, r0, r4, asr #11
   183dc:	ldrdeq	r3, [r0], -r0
   183e0:	muleq	r0, r4, r5
   183e4:	muleq	r0, r0, r5
   183e8:	andeq	r3, r0, r0, ror r5
   183ec:	andeq	r3, r0, r4, lsr #11
   183f0:	ldr	r3, [pc, #260]	; 184fc <__assert_fail@plt+0x67e8>
   183f4:	ldr	r2, [pc, #260]	; 18500 <__assert_fail@plt+0x67ec>
   183f8:	add	r3, pc, r3
   183fc:	push	{r4, r5, r6, lr}
   18400:	add	r2, pc, r2
   18404:	ldr	r3, [r3]
   18408:	sub	sp, sp, #8
   1840c:	tst	r3, #8
   18410:	bne	184ac <__assert_fail@plt+0x6798>
   18414:	ldr	r4, [pc, #232]	; 18504 <__assert_fail@plt+0x67f0>
   18418:	add	r4, pc, r4
   1841c:	ldr	r3, [r4, #20]
   18420:	cmp	r3, #0
   18424:	beq	1845c <__assert_fail@plt+0x6748>
   18428:	mov	r5, #0
   1842c:	ldr	r3, [r4, #16]
   18430:	lsl	r6, r5, #3
   18434:	ldr	r0, [r3, r5, lsl #3]
   18438:	bl	11840 <free@plt>
   1843c:	ldr	r3, [r4, #16]
   18440:	add	r5, r5, #1
   18444:	add	r3, r3, r6
   18448:	ldr	r0, [r3, #4]
   1844c:	bl	11840 <free@plt>
   18450:	ldr	r3, [r4, #20]
   18454:	cmp	r5, r3
   18458:	bcc	1842c <__assert_fail@plt+0x6718>
   1845c:	ldr	r4, [pc, #164]	; 18508 <__assert_fail@plt+0x67f4>
   18460:	mov	r5, #0
   18464:	add	r4, pc, r4
   18468:	ldr	r0, [r4, #16]
   1846c:	bl	11840 <free@plt>
   18470:	ldr	r0, [r4, #12]
   18474:	str	r5, [r4, #16]
   18478:	str	r5, [r4, #20]
   1847c:	str	r5, [r4, #24]
   18480:	bl	11840 <free@plt>
   18484:	mov	r2, #3
   18488:	str	r5, [r4, #12]
   1848c:	str	r5, [r4, #4]
   18490:	str	r5, [r4, #8]
   18494:	str	r5, [r4, #36]	; 0x24
   18498:	str	r2, [r4, #28]
   1849c:	str	r5, [r4, #40]	; 0x28
   184a0:	str	r5, [r4, #44]	; 0x2c
   184a4:	add	sp, sp, #8
   184a8:	pop	{r4, r5, r6, pc}
   184ac:	ldr	r3, [pc, #88]	; 1850c <__assert_fail@plt+0x67f8>
   184b0:	ldr	r3, [r2, r3]
   184b4:	ldr	r4, [r3]
   184b8:	bl	11a98 <getpid@plt>
   184bc:	ldr	r2, [pc, #76]	; 18510 <__assert_fail@plt+0x67fc>
   184c0:	ldr	r3, [pc, #76]	; 18514 <__assert_fail@plt+0x6800>
   184c4:	add	r2, pc, r2
   184c8:	str	r2, [sp, #4]
   184cc:	ldr	r2, [pc, #68]	; 18518 <__assert_fail@plt+0x6804>
   184d0:	add	r3, pc, r3
   184d4:	str	r3, [sp]
   184d8:	add	r2, pc, r2
   184dc:	mov	r1, #1
   184e0:	mov	r3, r0
   184e4:	mov	r0, r4
   184e8:	bl	11ba0 <__fprintf_chk@plt>
   184ec:	ldr	r0, [pc, #40]	; 1851c <__assert_fail@plt+0x6808>
   184f0:	add	r0, pc, r0
   184f4:	bl	181d4 <__assert_fail@plt+0x64c0>
   184f8:	b	18414 <__assert_fail@plt+0x6700>
   184fc:	andeq	r6, r1, r8, lsl #31
   18500:	andeq	r4, r1, r4, lsl sl
   18504:	andeq	r6, r1, r8, ror #30
   18508:	andeq	r6, r1, ip, lsl pc
   1850c:	ldrdeq	r0, [r0], -r8
   18510:	andeq	r3, r0, r0, lsr #9
   18514:	andeq	r3, r0, r8, asr #8
   18518:	andeq	r3, r0, r8, lsr #8
   1851c:	andeq	r3, r0, ip, ror r4
   18520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18524:	sub	sp, sp, #4160	; 0x1040
   18528:	ldr	r4, [pc, #1608]	; 18b78 <__assert_fail@plt+0x6e64>
   1852c:	ldr	r3, [pc, #1608]	; 18b7c <__assert_fail@plt+0x6e68>
   18530:	sub	sp, sp, #12
   18534:	add	r4, pc, r4
   18538:	add	r2, sp, #72	; 0x48
   1853c:	str	r2, [sp, #36]	; 0x24
   18540:	str	r0, [sp, #28]
   18544:	str	r4, [sp, #32]
   18548:	ldr	r3, [r4, r3]
   1854c:	add	ip, sp, #4160	; 0x1040
   18550:	str	r3, [sp, #40]	; 0x28
   18554:	add	ip, ip, #4
   18558:	ldr	r3, [r3]
   1855c:	mov	r5, r0
   18560:	mov	r2, #4096	; 0x1000
   18564:	add	r0, sp, #68	; 0x44
   18568:	mov	r1, #0
   1856c:	str	r3, [ip]
   18570:	bl	11b64 <memset@plt>
   18574:	cmp	r5, #0
   18578:	beq	18b38 <__assert_fail@plt+0x6e24>
   1857c:	ldr	r2, [pc, #1532]	; 18b80 <__assert_fail@plt+0x6e6c>
   18580:	add	r2, pc, r2
   18584:	ldr	r3, [r2, #4]
   18588:	cmp	r3, #0
   1858c:	beq	18b38 <__assert_fail@plt+0x6e24>
   18590:	ldrsb	r3, [r3]
   18594:	cmp	r3, #0
   18598:	beq	18b38 <__assert_fail@plt+0x6e24>
   1859c:	ldr	r3, [r2]
   185a0:	tst	r3, #4
   185a4:	bne	18a54 <__assert_fail@plt+0x6d40>
   185a8:	ldr	r0, [sp, #28]
   185ac:	bl	119e4 <opendir@plt>
   185b0:	subs	fp, r0, #0
   185b4:	beq	18ab8 <__assert_fail@plt+0x6da4>
   185b8:	ldr	r4, [pc, #1476]	; 18b84 <__assert_fail@plt+0x6e70>
   185bc:	add	r4, pc, r4
   185c0:	ldr	r0, [r4, #4]
   185c4:	bl	11ac8 <strlen@plt>
   185c8:	str	r0, [sp, #48]	; 0x30
   185cc:	ldr	r0, [r4, #8]
   185d0:	cmp	r0, #0
   185d4:	streq	r0, [sp, #56]	; 0x38
   185d8:	beq	185e4 <__assert_fail@plt+0x68d0>
   185dc:	bl	11ac8 <strlen@plt>
   185e0:	str	r0, [sp, #56]	; 0x38
   185e4:	ldr	r3, [pc, #1436]	; 18b88 <__assert_fail@plt+0x6e74>
   185e8:	ldr	r9, [pc, #1436]	; 18b8c <__assert_fail@plt+0x6e78>
   185ec:	add	r3, pc, r3
   185f0:	str	r3, [sp, #44]	; 0x2c
   185f4:	ldr	r3, [pc, #1428]	; 18b90 <__assert_fail@plt+0x6e7c>
   185f8:	add	r9, pc, r9
   185fc:	add	r3, pc, r3
   18600:	str	r3, [sp, #60]	; 0x3c
   18604:	mov	r0, fp
   18608:	bl	11c54 <readdir64@plt>
   1860c:	cmp	r0, #0
   18610:	beq	187e4 <__assert_fail@plt+0x6ad0>
   18614:	ldrsb	r3, [r0, #19]
   18618:	cmp	r3, #46	; 0x2e
   1861c:	beq	18604 <__assert_fail@plt+0x68f0>
   18620:	ldrb	r2, [r0, #18]
   18624:	and	r1, r2, #247	; 0xf7
   18628:	cmp	r2, #10
   1862c:	cmpne	r1, #0
   18630:	bne	18604 <__assert_fail@plt+0x68f0>
   18634:	cmp	r3, #0
   18638:	add	r4, r0, #19
   1863c:	beq	18604 <__assert_fail@plt+0x68f0>
   18640:	mov	r0, r4
   18644:	bl	11ac8 <strlen@plt>
   18648:	cmp	r0, #4096	; 0x1000
   1864c:	bhi	18604 <__assert_fail@plt+0x68f0>
   18650:	mov	r1, #46	; 0x2e
   18654:	mov	r0, r4
   18658:	bl	11c18 <strrchr@plt>
   1865c:	ldr	r8, [r9]
   18660:	and	r8, r8, #4
   18664:	subs	r5, r0, #0
   18668:	beq	18830 <__assert_fail@plt+0x6b1c>
   1866c:	ldr	r1, [pc, #1312]	; 18b94 <__assert_fail@plt+0x6e80>
   18670:	add	r5, r5, #1
   18674:	mov	r0, r5
   18678:	add	r1, pc, r1
   1867c:	bl	117ec <strcmp@plt>
   18680:	subs	sl, r0, #0
   18684:	beq	186a4 <__assert_fail@plt+0x6990>
   18688:	ldr	r1, [pc, #1288]	; 18b98 <__assert_fail@plt+0x6e84>
   1868c:	mov	r0, r5
   18690:	add	r1, pc, r1
   18694:	bl	117ec <strcmp@plt>
   18698:	cmp	r0, #0
   1869c:	moveq	sl, #1
   186a0:	bne	18a30 <__assert_fail@plt+0x6d1c>
   186a4:	cmp	r5, r4
   186a8:	beq	18b44 <__assert_fail@plt+0x6e30>
   186ac:	mov	r1, #64	; 0x40
   186b0:	mov	r0, r4
   186b4:	bl	11ad4 <strchr@plt>
   186b8:	cmp	r0, #0
   186bc:	beq	188e8 <__assert_fail@plt+0x6bd4>
   186c0:	adds	r7, r0, #1
   186c4:	beq	18908 <__assert_fail@plt+0x6bf4>
   186c8:	sub	r5, r5, r7
   186cc:	cmp	r0, r4
   186d0:	sub	r3, r5, #1
   186d4:	str	r3, [sp, #24]
   186d8:	subne	r6, r7, r4
   186dc:	moveq	r3, #0
   186e0:	subne	r3, r6, #1
   186e4:	movne	r5, r4
   186e8:	movne	r6, #31
   186ec:	moveq	r5, r3
   186f0:	moveq	r6, #11
   186f4:	strne	r3, [sp, #20]
   186f8:	streq	r3, [sp, #20]
   186fc:	cmp	r8, #0
   18700:	addeq	r8, sl, #8
   18704:	bne	18860 <__assert_fail@plt+0x6b4c>
   18708:	ldr	r3, [pc, #1164]	; 18b9c <__assert_fail@plt+0x6e88>
   1870c:	add	r3, pc, r3
   18710:	add	r2, r3, r8, lsl #2
   18714:	ldr	r2, [r2, #4]
   18718:	cmp	r6, r2
   1871c:	blt	18604 <__assert_fail@plt+0x68f0>
   18720:	ldr	r1, [sp, #20]
   18724:	cmp	r1, #0
   18728:	beq	1874c <__assert_fail@plt+0x6a38>
   1872c:	ldr	r2, [sp, #48]	; 0x30
   18730:	cmp	r2, r1
   18734:	bne	18604 <__assert_fail@plt+0x68f0>
   18738:	ldr	r1, [r3, #4]
   1873c:	mov	r0, r5
   18740:	bl	11ccc <strncmp@plt>
   18744:	cmp	r0, #0
   18748:	bne	18604 <__assert_fail@plt+0x68f0>
   1874c:	ldr	r2, [sp, #24]
   18750:	cmp	r2, #0
   18754:	beq	18794 <__assert_fail@plt+0x6a80>
   18758:	ldr	r1, [sp, #56]	; 0x38
   1875c:	clz	r3, r1
   18760:	lsr	r3, r3, #5
   18764:	cmp	r1, r2
   18768:	orrne	r3, r3, #1
   1876c:	cmp	r3, #0
   18770:	bne	18604 <__assert_fail@plt+0x68f0>
   18774:	ldr	r3, [pc, #1060]	; 18ba0 <__assert_fail@plt+0x6e8c>
   18778:	mov	r2, r1
   1877c:	add	r3, pc, r3
   18780:	mov	r0, r7
   18784:	ldr	r1, [r3, #8]
   18788:	bl	11ccc <strncmp@plt>
   1878c:	cmp	r0, #0
   18790:	bne	18604 <__assert_fail@plt+0x68f0>
   18794:	ldr	r3, [pc, #1032]	; 18ba4 <__assert_fail@plt+0x6e90>
   18798:	add	r3, pc, r3
   1879c:	ldr	r3, [r3]
   187a0:	tst	r3, #4
   187a4:	bne	189b0 <__assert_fail@plt+0x6c9c>
   187a8:	ldr	r3, [pc, #1016]	; 18ba8 <__assert_fail@plt+0x6e94>
   187ac:	cmp	sl, #2
   187b0:	add	r3, pc, r3
   187b4:	add	r8, r3, r8, lsl #2
   187b8:	str	r6, [r8, #4]
   187bc:	bne	18604 <__assert_fail@plt+0x68f0>
   187c0:	ldr	r3, [sp, #36]	; 0x24
   187c4:	mov	r1, r4
   187c8:	mov	r2, #4096	; 0x1000
   187cc:	sub	r0, r3, #4
   187d0:	bl	11b70 <strncpy@plt>
   187d4:	mov	r0, fp
   187d8:	bl	11c54 <readdir64@plt>
   187dc:	cmp	r0, #0
   187e0:	bne	18614 <__assert_fail@plt+0x6900>
   187e4:	ldr	r3, [sp, #36]	; 0x24
   187e8:	mov	r4, r0
   187ec:	ldrsb	r3, [r3, #-4]
   187f0:	cmp	r3, #0
   187f4:	bne	18ac8 <__assert_fail@plt+0x6db4>
   187f8:	mov	r4, #0
   187fc:	mov	r0, fp
   18800:	bl	11cf0 <closedir@plt>
   18804:	add	r3, sp, #4160	; 0x1040
   18808:	add	r3, r3, #4
   1880c:	ldr	r2, [r3]
   18810:	ldr	r3, [sp, #40]	; 0x28
   18814:	mov	r0, r4
   18818:	ldr	r3, [r3]
   1881c:	cmp	r2, r3
   18820:	bne	18b40 <__assert_fail@plt+0x6e2c>
   18824:	add	sp, sp, #4160	; 0x1040
   18828:	add	sp, sp, #12
   1882c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18830:	ldr	r1, [sp, #44]	; 0x2c
   18834:	mov	r0, r4
   18838:	bl	117ec <strcmp@plt>
   1883c:	subs	sl, r0, #0
   18840:	bne	18924 <__assert_fail@plt+0x6c10>
   18844:	cmp	r8, #0
   18848:	mov	r7, sl
   1884c:	str	sl, [sp, #24]
   18850:	str	sl, [sp, #20]
   18854:	mov	r6, #1
   18858:	addeq	r8, sl, #8
   1885c:	beq	18708 <__assert_fail@plt+0x69f4>
   18860:	ldr	r2, [sp, #32]
   18864:	ldr	r3, [pc, #832]	; 18bac <__assert_fail@plt+0x6e98>
   18868:	add	r8, sl, #8
   1886c:	ldr	r3, [r2, r3]
   18870:	ldr	r3, [r3]
   18874:	str	r3, [sp, #52]	; 0x34
   18878:	bl	11a98 <getpid@plt>
   1887c:	ldr	r2, [pc, #812]	; 18bb0 <__assert_fail@plt+0x6e9c>
   18880:	ldr	r3, [pc, #812]	; 18bb4 <__assert_fail@plt+0x6ea0>
   18884:	add	r2, pc, r2
   18888:	str	r2, [sp, #4]
   1888c:	ldr	r2, [pc, #804]	; 18bb8 <__assert_fail@plt+0x6ea4>
   18890:	add	r3, pc, r3
   18894:	str	r3, [sp]
   18898:	add	r2, pc, r2
   1889c:	mov	r1, #1
   188a0:	mov	r3, r0
   188a4:	ldr	r0, [sp, #52]	; 0x34
   188a8:	bl	11ba0 <__fprintf_chk@plt>
   188ac:	ldr	r3, [pc, #776]	; 18bbc <__assert_fail@plt+0x6ea8>
   188b0:	ldr	ip, [sp, #24]
   188b4:	add	r3, pc, r3
   188b8:	add	r3, r3, r8, lsl #2
   188bc:	ldr	r0, [pc, #764]	; 18bc0 <__assert_fail@plt+0x6eac>
   188c0:	ldr	r3, [r3, #4]
   188c4:	stmib	sp, {r5, ip}
   188c8:	ldr	ip, [sp, #20]
   188cc:	mov	r2, r6
   188d0:	mov	r1, r4
   188d4:	add	r0, pc, r0
   188d8:	str	r7, [sp, #12]
   188dc:	str	ip, [sp]
   188e0:	bl	181d4 <__assert_fail@plt+0x64c0>
   188e4:	b	18708 <__assert_fail@plt+0x69f4>
   188e8:	sub	r5, r5, r4
   188ec:	sub	r3, r5, #1
   188f0:	mov	r7, r0
   188f4:	str	r3, [sp, #20]
   188f8:	str	r0, [sp, #24]
   188fc:	mov	r5, r4
   18900:	mov	r6, #21
   18904:	b	186fc <__assert_fail@plt+0x69e8>
   18908:	sub	r5, r5, r4
   1890c:	sub	r3, r5, #1
   18910:	str	r3, [sp, #20]
   18914:	mov	r5, r4
   18918:	str	r7, [sp, #24]
   1891c:	mov	r6, #21
   18920:	b	186fc <__assert_fail@plt+0x69e8>
   18924:	ldr	r1, [sp, #60]	; 0x3c
   18928:	mov	r0, r4
   1892c:	bl	117ec <strcmp@plt>
   18930:	cmp	r0, #0
   18934:	beq	18b14 <__assert_fail@plt+0x6e00>
   18938:	ldr	r1, [pc, #644]	; 18bc4 <__assert_fail@plt+0x6eb0>
   1893c:	mov	r0, r4
   18940:	add	r1, pc, r1
   18944:	bl	117ec <strcmp@plt>
   18948:	cmp	r0, #0
   1894c:	beq	18b60 <__assert_fail@plt+0x6e4c>
   18950:	cmp	r8, #0
   18954:	beq	18604 <__assert_fail@plt+0x68f0>
   18958:	ldr	r2, [sp, #32]
   1895c:	ldr	r3, [pc, #584]	; 18bac <__assert_fail@plt+0x6e98>
   18960:	ldr	r3, [r2, r3]
   18964:	ldr	r5, [r3]
   18968:	bl	11a98 <getpid@plt>
   1896c:	ldr	r2, [pc, #596]	; 18bc8 <__assert_fail@plt+0x6eb4>
   18970:	ldr	r3, [pc, #596]	; 18bcc <__assert_fail@plt+0x6eb8>
   18974:	add	r2, pc, r2
   18978:	str	r2, [sp, #4]
   1897c:	ldr	r2, [pc, #588]	; 18bd0 <__assert_fail@plt+0x6ebc>
   18980:	add	r3, pc, r3
   18984:	str	r3, [sp]
   18988:	add	r2, pc, r2
   1898c:	mov	r1, #1
   18990:	mov	r3, r0
   18994:	mov	r0, r5
   18998:	bl	11ba0 <__fprintf_chk@plt>
   1899c:	ldr	r0, [pc, #560]	; 18bd4 <__assert_fail@plt+0x6ec0>
   189a0:	mov	r1, r4
   189a4:	add	r0, pc, r0
   189a8:	bl	181d4 <__assert_fail@plt+0x64c0>
   189ac:	b	18604 <__assert_fail@plt+0x68f0>
   189b0:	ldr	r2, [sp, #32]
   189b4:	ldr	r3, [pc, #496]	; 18bac <__assert_fail@plt+0x6e98>
   189b8:	ldr	r3, [r2, r3]
   189bc:	ldr	r5, [r3]
   189c0:	bl	11a98 <getpid@plt>
   189c4:	ldr	r2, [pc, #524]	; 18bd8 <__assert_fail@plt+0x6ec4>
   189c8:	ldr	r3, [pc, #524]	; 18bdc <__assert_fail@plt+0x6ec8>
   189cc:	add	r2, pc, r2
   189d0:	str	r2, [sp, #4]
   189d4:	ldr	r2, [pc, #516]	; 18be0 <__assert_fail@plt+0x6ecc>
   189d8:	add	r3, pc, r3
   189dc:	str	r3, [sp]
   189e0:	add	r2, pc, r2
   189e4:	mov	r1, #1
   189e8:	mov	r3, r0
   189ec:	mov	r0, r5
   189f0:	bl	11ba0 <__fprintf_chk@plt>
   189f4:	cmp	sl, #2
   189f8:	beq	18b08 <__assert_fail@plt+0x6df4>
   189fc:	cmp	sl, #0
   18a00:	bne	18b2c <__assert_fail@plt+0x6e18>
   18a04:	ldr	r1, [pc, #472]	; 18be4 <__assert_fail@plt+0x6ed0>
   18a08:	add	r1, pc, r1
   18a0c:	ldr	r2, [pc, #468]	; 18be8 <__assert_fail@plt+0x6ed4>
   18a10:	ldr	r0, [pc, #468]	; 18bec <__assert_fail@plt+0x6ed8>
   18a14:	add	r2, pc, r2
   18a18:	add	r2, r2, r8, lsl #2
   18a1c:	mov	r3, r6
   18a20:	ldr	r2, [r2, #4]
   18a24:	add	r0, pc, r0
   18a28:	bl	181d4 <__assert_fail@plt+0x64c0>
   18a2c:	b	187a8 <__assert_fail@plt+0x6a94>
   18a30:	ldr	r1, [pc, #440]	; 18bf0 <__assert_fail@plt+0x6edc>
   18a34:	mov	r0, r5
   18a38:	add	r1, pc, r1
   18a3c:	bl	117ec <strcmp@plt>
   18a40:	cmp	r0, #0
   18a44:	moveq	sl, #2
   18a48:	beq	186a4 <__assert_fail@plt+0x6990>
   18a4c:	mov	r4, r5
   18a50:	b	18950 <__assert_fail@plt+0x6c3c>
   18a54:	ldr	r2, [sp, #32]
   18a58:	ldr	r3, [pc, #332]	; 18bac <__assert_fail@plt+0x6e98>
   18a5c:	ldr	r3, [r2, r3]
   18a60:	ldr	r4, [r3]
   18a64:	bl	11a98 <getpid@plt>
   18a68:	ldr	r2, [pc, #388]	; 18bf4 <__assert_fail@plt+0x6ee0>
   18a6c:	ldr	r3, [pc, #388]	; 18bf8 <__assert_fail@plt+0x6ee4>
   18a70:	add	r2, pc, r2
   18a74:	str	r2, [sp, #4]
   18a78:	ldr	r2, [pc, #380]	; 18bfc <__assert_fail@plt+0x6ee8>
   18a7c:	add	r3, pc, r3
   18a80:	add	r2, pc, r2
   18a84:	str	r3, [sp]
   18a88:	mov	r1, #1
   18a8c:	mov	r3, r0
   18a90:	mov	r0, r4
   18a94:	bl	11ba0 <__fprintf_chk@plt>
   18a98:	ldr	r0, [pc, #352]	; 18c00 <__assert_fail@plt+0x6eec>
   18a9c:	ldr	r1, [sp, #28]
   18aa0:	add	r0, pc, r0
   18aa4:	bl	181d4 <__assert_fail@plt+0x64c0>
   18aa8:	ldr	r0, [sp, #28]
   18aac:	bl	119e4 <opendir@plt>
   18ab0:	subs	fp, r0, #0
   18ab4:	bne	185b8 <__assert_fail@plt+0x68a4>
   18ab8:	bl	11b1c <__errno_location@plt>
   18abc:	ldr	r4, [r0]
   18ac0:	rsb	r4, r4, #0
   18ac4:	b	18804 <__assert_fail@plt+0x6af0>
   18ac8:	ldr	r1, [sp, #36]	; 0x24
   18acc:	ldr	r0, [pc, #304]	; 18c04 <__assert_fail@plt+0x6ef0>
   18ad0:	sub	r2, r1, #4
   18ad4:	str	r2, [sp]
   18ad8:	ldr	r2, [pc, #296]	; 18c08 <__assert_fail@plt+0x6ef4>
   18adc:	add	r0, pc, r0
   18ae0:	strb	r4, [r1, #4091]	; 0xffb
   18ae4:	ldr	r3, [sp, #28]
   18ae8:	add	r0, r0, #12
   18aec:	add	r2, pc, r2
   18af0:	mov	r1, #1
   18af4:	bl	119fc <__asprintf_chk@plt>
   18af8:	cmp	r0, #0
   18afc:	mvnle	r4, #11
   18b00:	bgt	187f8 <__assert_fail@plt+0x6ae4>
   18b04:	b	187fc <__assert_fail@plt+0x6ae8>
   18b08:	ldr	r1, [pc, #252]	; 18c0c <__assert_fail@plt+0x6ef8>
   18b0c:	add	r1, pc, r1
   18b10:	b	18a0c <__assert_fail@plt+0x6cf8>
   18b14:	mov	sl, #1
   18b18:	mov	r6, sl
   18b1c:	mov	r7, r5
   18b20:	str	r5, [sp, #24]
   18b24:	str	r5, [sp, #20]
   18b28:	b	186fc <__assert_fail@plt+0x69e8>
   18b2c:	ldr	r1, [pc, #220]	; 18c10 <__assert_fail@plt+0x6efc>
   18b30:	add	r1, pc, r1
   18b34:	b	18a0c <__assert_fail@plt+0x6cf8>
   18b38:	mvn	r4, #21
   18b3c:	b	18804 <__assert_fail@plt+0x6af0>
   18b40:	bl	118e8 <__stack_chk_fail@plt>
   18b44:	mov	r3, #0
   18b48:	str	r3, [sp, #24]
   18b4c:	str	r3, [sp, #20]
   18b50:	mov	r7, r3
   18b54:	mov	r5, r3
   18b58:	mov	r6, #1
   18b5c:	b	186fc <__assert_fail@plt+0x69e8>
   18b60:	mov	r7, r5
   18b64:	str	r5, [sp, #24]
   18b68:	str	r5, [sp, #20]
   18b6c:	mov	sl, #2
   18b70:	mov	r6, #1
   18b74:	b	186fc <__assert_fail@plt+0x69e8>
   18b78:	andeq	r4, r1, r0, ror #17
   18b7c:	ldrdeq	r0, [r0], -r4
   18b80:	andeq	r6, r1, r0, lsl #28
   18b84:	andeq	r6, r1, r4, asr #27
   18b88:	muleq	r0, ip, r3
   18b8c:	andeq	r6, r1, r8, lsl #27
   18b90:	andeq	r3, r0, ip, ror r3
   18b94:	andeq	r3, r0, r0, lsl r3
   18b98:	andeq	r3, r0, r8, ror #5
   18b9c:	andeq	r6, r1, r4, ror ip
   18ba0:	andeq	r6, r1, r4, lsl #24
   18ba4:	andeq	r6, r1, r8, ror #23
   18ba8:	ldrdeq	r6, [r1], -r0
   18bac:	ldrdeq	r0, [r0], -r8
   18bb0:	andeq	r3, r0, ip, lsl #1
   18bb4:	andeq	r3, r0, r8, lsl #1
   18bb8:	andeq	r3, r0, r8, rrx
   18bbc:	andeq	r6, r1, ip, asr #21
   18bc0:	andeq	r3, r0, r4, ror #1
   18bc4:	andeq	r3, r0, r0, asr #32
   18bc8:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   18bcc:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   18bd0:	andeq	r2, r0, r8, ror pc
   18bd4:	andeq	r3, r0, r0
   18bd8:	andeq	r2, r0, r4, asr #30
   18bdc:	andeq	r2, r0, r0, asr #30
   18be0:	andeq	r2, r0, r0, lsr #30
   18be4:	andeq	r2, r0, r0, lsl #31
   18be8:	andeq	r6, r1, ip, ror #18
   18bec:	ldrdeq	r2, [r0], -r0
   18bf0:	andeq	r2, r0, r8, asr #30
   18bf4:	andeq	r2, r0, r0, lsr #29
   18bf8:	muleq	r0, ip, lr
   18bfc:	andeq	r2, r0, r0, lsl #29
   18c00:	strdeq	r2, [r0], -r0
   18c04:	andeq	r6, r1, r4, lsr #17
   18c08:	andeq	r2, r0, r8, lsr #30
   18c0c:	andeq	r2, r0, r4, ror lr
   18c10:	andeq	r2, r0, r8, asr #28
   18c14:	ldr	r3, [pc, #252]	; 18d18 <__assert_fail@plt+0x7004>
   18c18:	ldr	r2, [pc, #252]	; 18d1c <__assert_fail@plt+0x7008>
   18c1c:	add	r3, pc, r3
   18c20:	push	{r4, r5, lr}
   18c24:	sub	sp, sp, #4096	; 0x1000
   18c28:	ldr	r4, [r3, r2]
   18c2c:	sub	sp, sp, #20
   18c30:	add	r2, sp, #4096	; 0x1000
   18c34:	ldr	r0, [pc, #228]	; 18d20 <__assert_fail@plt+0x700c>
   18c38:	add	r2, r2, #12
   18c3c:	ldr	r3, [r4]
   18c40:	add	r0, pc, r0
   18c44:	str	r3, [r2]
   18c48:	bl	11a08 <getenv@plt>
   18c4c:	ldr	r3, [pc, #208]	; 18d24 <__assert_fail@plt+0x7010>
   18c50:	add	r3, pc, r3
   18c54:	str	r0, [r3, #8]
   18c58:	ldr	r0, [pc, #200]	; 18d28 <__assert_fail@plt+0x7014>
   18c5c:	add	r0, pc, r0
   18c60:	bl	11a08 <getenv@plt>
   18c64:	cmp	r0, #0
   18c68:	beq	18cf4 <__assert_fail@plt+0x6fe0>
   18c6c:	ldr	r2, [pc, #184]	; 18d2c <__assert_fail@plt+0x7018>
   18c70:	add	r2, pc, r2
   18c74:	mov	r3, #4096	; 0x1000
   18c78:	add	r5, sp, #12
   18c7c:	str	r0, [sp, #4]
   18c80:	str	r2, [sp]
   18c84:	mov	r1, r3
   18c88:	mov	r2, #1
   18c8c:	mov	r0, r5
   18c90:	bl	11cfc <__snprintf_chk@plt>
   18c94:	mov	r0, r5
   18c98:	bl	18520 <__assert_fail@plt+0x680c>
   18c9c:	cmn	r0, #13
   18ca0:	beq	18cb0 <__assert_fail@plt+0x6f9c>
   18ca4:	add	r3, r0, #2
   18ca8:	cmp	r3, #1
   18cac:	bhi	18cbc <__assert_fail@plt+0x6fa8>
   18cb0:	ldr	r0, [pc, #120]	; 18d30 <__assert_fail@plt+0x701c>
   18cb4:	add	r0, pc, r0
   18cb8:	bl	18520 <__assert_fail@plt+0x680c>
   18cbc:	ldr	r3, [pc, #112]	; 18d34 <__assert_fail@plt+0x7020>
   18cc0:	add	r2, sp, #4096	; 0x1000
   18cc4:	add	r3, pc, r3
   18cc8:	add	r2, r2, #12
   18ccc:	ldr	ip, [r2]
   18cd0:	ldrb	r2, [r3, #32]
   18cd4:	ldr	r1, [r4]
   18cd8:	orr	r2, r2, #8
   18cdc:	cmp	ip, r1
   18ce0:	strb	r2, [r3, #32]
   18ce4:	bne	18d14 <__assert_fail@plt+0x7000>
   18ce8:	add	sp, sp, #4096	; 0x1000
   18cec:	add	sp, sp, #20
   18cf0:	pop	{r4, r5, pc}
   18cf4:	ldr	r0, [pc, #60]	; 18d38 <__assert_fail@plt+0x7024>
   18cf8:	add	r0, pc, r0
   18cfc:	bl	11a08 <getenv@plt>
   18d00:	cmp	r0, #0
   18d04:	beq	18cb0 <__assert_fail@plt+0x6f9c>
   18d08:	ldr	r2, [pc, #44]	; 18d3c <__assert_fail@plt+0x7028>
   18d0c:	add	r2, pc, r2
   18d10:	b	18c74 <__assert_fail@plt+0x6f60>
   18d14:	bl	118e8 <__stack_chk_fail@plt>
   18d18:	strdeq	r4, [r1], -r8
   18d1c:	ldrdeq	r0, [r0], -r4
   18d20:	ldrdeq	r2, [r0], -ip
   18d24:	andeq	r6, r1, r0, lsr r7
   18d28:	andeq	r2, r0, r8, asr #27
   18d2c:	andeq	r2, r0, r4, asr #27
   18d30:	andeq	r2, r0, r0, lsr #27
   18d34:			; <UNDEFINED> instruction: 0x000166bc
   18d38:	andeq	r2, r0, r4, asr sp
   18d3c:	andeq	r2, r0, r0, ror #26
   18d40:	ldr	r2, [pc, #2024]	; 19530 <__assert_fail@plt+0x781c>
   18d44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d48:	sub	sp, sp, #8448	; 0x2100
   18d4c:	ldr	r3, [pc, #2016]	; 19534 <__assert_fail@plt+0x7820>
   18d50:	add	r2, pc, r2
   18d54:	sub	sp, sp, #44	; 0x2c
   18d58:	ldr	r4, [pc, #2008]	; 19538 <__assert_fail@plt+0x7824>
   18d5c:	str	r2, [sp, #20]
   18d60:	add	r4, pc, r4
   18d64:	ldr	r3, [r2, r3]
   18d68:	add	r1, sp, #8448	; 0x2100
   18d6c:	mov	r2, r3
   18d70:	str	r3, [sp, #16]
   18d74:	ldrb	r3, [r4, #32]
   18d78:	ldr	r2, [r2]
   18d7c:	add	r1, r1, #36	; 0x24
   18d80:	tst	r3, #8
   18d84:	str	r2, [r1]
   18d88:	beq	19238 <__assert_fail@plt+0x7524>
   18d8c:	orr	r3, r3, #4
   18d90:	strb	r3, [r4, #32]
   18d94:	ldr	r4, [pc, #1952]	; 1953c <__assert_fail@plt+0x7828>
   18d98:	add	r4, pc, r4
   18d9c:	ldr	r0, [r4, #12]
   18da0:	cmp	r0, #0
   18da4:	beq	19368 <__assert_fail@plt+0x7654>
   18da8:	ldr	r3, [r4]
   18dac:	tst	r3, #8
   18db0:	bne	190bc <__assert_fail@plt+0x73a8>
   18db4:	ldr	r1, [pc, #1924]	; 19540 <__assert_fail@plt+0x782c>
   18db8:	add	r1, pc, r1
   18dbc:	bl	11c78 <fopen64@plt>
   18dc0:	subs	sl, r0, #0
   18dc4:	beq	19370 <__assert_fail@plt+0x765c>
   18dc8:	add	r3, sp, #296	; 0x128
   18dcc:	str	r3, [sp, #12]
   18dd0:	ldr	r3, [pc, #1900]	; 19544 <__assert_fail@plt+0x7830>
   18dd4:	add	fp, sp, #292	; 0x124
   18dd8:	mov	r9, #0
   18ddc:	add	r3, pc, r3
   18de0:	str	r3, [sp, #8]
   18de4:	mov	r2, sl
   18de8:	mov	r1, #8192	; 0x2000
   18dec:	mov	r0, fp
   18df0:	bl	1184c <fgets@plt>
   18df4:	cmp	r0, #0
   18df8:	beq	191c4 <__assert_fail@plt+0x74b0>
   18dfc:	mov	r1, #10
   18e00:	mov	r0, fp
   18e04:	bl	11ad4 <strchr@plt>
   18e08:	cmp	r0, #0
   18e0c:	beq	1909c <__assert_fail@plt+0x7388>
   18e10:	strb	r9, [r0]
   18e14:	bl	11a8c <__ctype_b_loc@plt>
   18e18:	mov	r3, fp
   18e1c:	ldr	ip, [r0]
   18e20:	mov	r4, r0
   18e24:	mov	r0, r3
   18e28:	ldrsb	r2, [r3], #1
   18e2c:	lsl	r1, r2, #1
   18e30:	ldrh	r1, [ip, r1]
   18e34:	tst	r1, #1
   18e38:	bne	18e24 <__assert_fail@plt+0x7110>
   18e3c:	cmp	r2, #0
   18e40:	sub	r6, r2, #35	; 0x23
   18e44:	clz	r6, r6
   18e48:	lsr	r6, r6, #5
   18e4c:	moveq	r6, #1
   18e50:	cmp	r6, #0
   18e54:	bne	18de4 <__assert_fail@plt+0x70d0>
   18e58:	add	r8, sp, #40	; 0x28
   18e5c:	sub	r5, r8, #12
   18e60:	add	r7, sp, #160	; 0xa0
   18e64:	mov	r2, r5
   18e68:	mov	r3, r7
   18e6c:	ldr	r1, [sp, #8]
   18e70:	bl	11c3c <sscanf@plt>
   18e74:	cmp	r0, #2
   18e78:	bne	18de4 <__assert_fail@plt+0x70d0>
   18e7c:	ldr	r2, [sp, #12]
   18e80:	ldrb	r3, [r2, #-268]	; 0xfffffef4
   18e84:	cmp	r3, #0
   18e88:	beq	18de4 <__assert_fail@plt+0x70d0>
   18e8c:	ldrsb	r3, [r2, #-136]	; 0xffffff78
   18e90:	cmp	r3, #0
   18e94:	beq	18de4 <__assert_fail@plt+0x70d0>
   18e98:	ldr	r2, [pc, #1704]	; 19548 <__assert_fail@plt+0x7834>
   18e9c:	ldr	r1, [sp, #12]
   18ea0:	add	r2, pc, r2
   18ea4:	ldr	r2, [r2]
   18ea8:	str	r6, [r1, #-272]	; 0xfffffef0
   18eac:	tst	r2, #8
   18eb0:	bne	19390 <__assert_fail@plt+0x767c>
   18eb4:	ldr	r2, [sp, #12]
   18eb8:	cmp	r3, #92	; 0x5c
   18ebc:	str	r9, [r2, #-272]	; 0xfffffef0
   18ec0:	beq	18ed8 <__assert_fail@plt+0x71c4>
   18ec4:	ldr	r2, [r4]
   18ec8:	lsl	r3, r3, #1
   18ecc:	ldrh	r3, [r2, r3]
   18ed0:	tst	r3, #1024	; 0x400
   18ed4:	bne	1941c <__assert_fail@plt+0x7708>
   18ed8:	ldr	r2, [pc, #1644]	; 1954c <__assert_fail@plt+0x7838>
   18edc:	mov	r3, r7
   18ee0:	sub	r0, r8, #16
   18ee4:	add	r2, pc, r2
   18ee8:	mov	r1, #1
   18eec:	bl	119fc <__asprintf_chk@plt>
   18ef0:	cmp	r0, #0
   18ef4:	ble	19440 <__assert_fail@plt+0x772c>
   18ef8:	ldr	r3, [sp, #12]
   18efc:	ldr	r3, [r3, #-272]	; 0xfffffef0
   18f00:	cmp	r3, #0
   18f04:	beq	1914c <__assert_fail@plt+0x7438>
   18f08:	ldrsb	r1, [r3]
   18f0c:	cmp	r1, #0
   18f10:	beq	1914c <__assert_fail@plt+0x7438>
   18f14:	mov	ip, r3
   18f18:	mov	lr, #92	; 0x5c
   18f1c:	mov	r8, #63	; 0x3f
   18f20:	mov	r7, #35	; 0x23
   18f24:	mov	r6, #32
   18f28:	cmp	r1, #92	; 0x5c
   18f2c:	movne	r2, ip
   18f30:	strbne	r1, [r3], #1
   18f34:	bne	19124 <__assert_fail@plt+0x7410>
   18f38:	ldrsb	r2, [ip, #1]
   18f3c:	sub	r2, r2, #35	; 0x23
   18f40:	cmp	r2, #83	; 0x53
   18f44:	addls	pc, pc, r2, lsl #2
   18f48:	b	19350 <__assert_fail@plt+0x763c>
   18f4c:	b	19318 <__assert_fail@plt+0x7604>
   18f50:	b	19350 <__assert_fail@plt+0x763c>
   18f54:	b	19350 <__assert_fail@plt+0x763c>
   18f58:	b	19350 <__assert_fail@plt+0x763c>
   18f5c:	b	19350 <__assert_fail@plt+0x763c>
   18f60:	b	19350 <__assert_fail@plt+0x763c>
   18f64:	b	19350 <__assert_fail@plt+0x763c>
   18f68:	b	19350 <__assert_fail@plt+0x763c>
   18f6c:	b	19350 <__assert_fail@plt+0x763c>
   18f70:	b	19350 <__assert_fail@plt+0x763c>
   18f74:	b	19350 <__assert_fail@plt+0x763c>
   18f78:	b	19350 <__assert_fail@plt+0x763c>
   18f7c:	b	19350 <__assert_fail@plt+0x763c>
   18f80:	b	19350 <__assert_fail@plt+0x763c>
   18f84:	b	19350 <__assert_fail@plt+0x763c>
   18f88:	b	19350 <__assert_fail@plt+0x763c>
   18f8c:	b	19350 <__assert_fail@plt+0x763c>
   18f90:	b	19350 <__assert_fail@plt+0x763c>
   18f94:	b	19350 <__assert_fail@plt+0x763c>
   18f98:	b	19350 <__assert_fail@plt+0x763c>
   18f9c:	b	19350 <__assert_fail@plt+0x763c>
   18fa0:	b	19350 <__assert_fail@plt+0x763c>
   18fa4:	b	19350 <__assert_fail@plt+0x763c>
   18fa8:	b	19350 <__assert_fail@plt+0x763c>
   18fac:	b	19350 <__assert_fail@plt+0x763c>
   18fb0:	b	19350 <__assert_fail@plt+0x763c>
   18fb4:	b	19350 <__assert_fail@plt+0x763c>
   18fb8:	b	19350 <__assert_fail@plt+0x763c>
   18fbc:	b	19310 <__assert_fail@plt+0x75fc>
   18fc0:	b	19350 <__assert_fail@plt+0x763c>
   18fc4:	b	19350 <__assert_fail@plt+0x763c>
   18fc8:	b	19350 <__assert_fail@plt+0x763c>
   18fcc:	b	19350 <__assert_fail@plt+0x763c>
   18fd0:	b	19350 <__assert_fail@plt+0x763c>
   18fd4:	b	19350 <__assert_fail@plt+0x763c>
   18fd8:	b	19350 <__assert_fail@plt+0x763c>
   18fdc:	b	19350 <__assert_fail@plt+0x763c>
   18fe0:	b	19350 <__assert_fail@plt+0x763c>
   18fe4:	b	19350 <__assert_fail@plt+0x763c>
   18fe8:	b	19350 <__assert_fail@plt+0x763c>
   18fec:	b	19350 <__assert_fail@plt+0x763c>
   18ff0:	b	19350 <__assert_fail@plt+0x763c>
   18ff4:	b	19350 <__assert_fail@plt+0x763c>
   18ff8:	b	19350 <__assert_fail@plt+0x763c>
   18ffc:	b	19350 <__assert_fail@plt+0x763c>
   19000:	b	19350 <__assert_fail@plt+0x763c>
   19004:	b	19350 <__assert_fail@plt+0x763c>
   19008:	b	19350 <__assert_fail@plt+0x763c>
   1900c:	b	19350 <__assert_fail@plt+0x763c>
   19010:	b	19350 <__assert_fail@plt+0x763c>
   19014:	b	19350 <__assert_fail@plt+0x763c>
   19018:	b	19350 <__assert_fail@plt+0x763c>
   1901c:	b	19350 <__assert_fail@plt+0x763c>
   19020:	b	19350 <__assert_fail@plt+0x763c>
   19024:	b	19350 <__assert_fail@plt+0x763c>
   19028:	b	19350 <__assert_fail@plt+0x763c>
   1902c:	b	19350 <__assert_fail@plt+0x763c>
   19030:	b	19308 <__assert_fail@plt+0x75f4>
   19034:	b	19350 <__assert_fail@plt+0x763c>
   19038:	b	19350 <__assert_fail@plt+0x763c>
   1903c:	b	19300 <__assert_fail@plt+0x75ec>
   19040:	b	19350 <__assert_fail@plt+0x763c>
   19044:	b	192f4 <__assert_fail@plt+0x75e0>
   19048:	b	192e8 <__assert_fail@plt+0x75d4>
   1904c:	b	19350 <__assert_fail@plt+0x763c>
   19050:	b	19350 <__assert_fail@plt+0x763c>
   19054:	b	192dc <__assert_fail@plt+0x75c8>
   19058:	b	192d0 <__assert_fail@plt+0x75bc>
   1905c:	b	19350 <__assert_fail@plt+0x763c>
   19060:	b	19350 <__assert_fail@plt+0x763c>
   19064:	b	19350 <__assert_fail@plt+0x763c>
   19068:	b	19350 <__assert_fail@plt+0x763c>
   1906c:	b	19350 <__assert_fail@plt+0x763c>
   19070:	b	19350 <__assert_fail@plt+0x763c>
   19074:	b	19350 <__assert_fail@plt+0x763c>
   19078:	b	192b8 <__assert_fail@plt+0x75a4>
   1907c:	b	19350 <__assert_fail@plt+0x763c>
   19080:	b	19350 <__assert_fail@plt+0x763c>
   19084:	b	19350 <__assert_fail@plt+0x763c>
   19088:	b	192ac <__assert_fail@plt+0x7598>
   1908c:	b	19350 <__assert_fail@plt+0x763c>
   19090:	b	192c4 <__assert_fail@plt+0x75b0>
   19094:	b	19350 <__assert_fail@plt+0x763c>
   19098:	b	19118 <__assert_fail@plt+0x7404>
   1909c:	mov	r0, sl
   190a0:	bl	11ab0 <feof@plt>
   190a4:	cmp	r0, #0
   190a8:	beq	19380 <__assert_fail@plt+0x766c>
   190ac:	mov	r0, fp
   190b0:	bl	11ac8 <strlen@plt>
   190b4:	add	r0, fp, r0
   190b8:	b	18e10 <__assert_fail@plt+0x70fc>
   190bc:	ldr	r2, [sp, #20]
   190c0:	ldr	r3, [pc, #1160]	; 19550 <__assert_fail@plt+0x783c>
   190c4:	ldr	r3, [r2, r3]
   190c8:	ldr	r5, [r3]
   190cc:	bl	11a98 <getpid@plt>
   190d0:	ldr	r2, [pc, #1148]	; 19554 <__assert_fail@plt+0x7840>
   190d4:	ldr	r3, [pc, #1148]	; 19558 <__assert_fail@plt+0x7844>
   190d8:	add	r2, pc, r2
   190dc:	str	r2, [sp, #4]
   190e0:	ldr	r2, [pc, #1140]	; 1955c <__assert_fail@plt+0x7848>
   190e4:	add	r3, pc, r3
   190e8:	str	r3, [sp]
   190ec:	add	r2, pc, r2
   190f0:	mov	r1, #1
   190f4:	mov	r3, r0
   190f8:	mov	r0, r5
   190fc:	bl	11ba0 <__fprintf_chk@plt>
   19100:	ldr	r0, [pc, #1112]	; 19560 <__assert_fail@plt+0x784c>
   19104:	ldr	r1, [r4, #12]
   19108:	add	r0, pc, r0
   1910c:	bl	181d4 <__assert_fail@plt+0x64c0>
   19110:	ldr	r0, [r4, #12]
   19114:	b	18db4 <__assert_fail@plt+0x70a0>
   19118:	mov	r2, #11
   1911c:	strb	r2, [r3], #1
   19120:	add	r2, ip, #1
   19124:	adds	ip, r2, #1
   19128:	beq	19138 <__assert_fail@plt+0x7424>
   1912c:	ldrsb	r1, [r2, #1]
   19130:	cmp	r1, #0
   19134:	bne	18f28 <__assert_fail@plt+0x7214>
   19138:	ldr	r2, [sp, #12]
   1913c:	ldr	r2, [r2, #-272]	; 0xfffffef0
   19140:	sub	r2, r3, r2
   19144:	cmp	r2, r0
   19148:	bgt	194e8 <__assert_fail@plt+0x77d4>
   1914c:	strb	r9, [r3]
   19150:	ldr	r3, [sp, #12]
   19154:	ldr	r0, [r3, #-272]	; 0xfffffef0
   19158:	ldrsb	r3, [r0]
   1915c:	ldr	r2, [r4]
   19160:	lsl	r3, r3, #1
   19164:	ldrh	r3, [r2, r3]
   19168:	tst	r3, #1024	; 0x400
   1916c:	bne	19320 <__assert_fail@plt+0x760c>
   19170:	ldr	r4, [pc, #1004]	; 19564 <__assert_fail@plt+0x7850>
   19174:	add	r4, pc, r4
   19178:	ldr	r6, [r4, #20]
   1917c:	ldr	r3, [r4, #24]
   19180:	ldr	r7, [r4, #16]
   19184:	cmp	r6, r3
   19188:	beq	193f0 <__assert_fail@plt+0x76dc>
   1918c:	ldr	r3, [sp, #12]
   19190:	add	r4, r7, r6, lsl #3
   19194:	mov	r0, r5
   19198:	ldr	r8, [r3, #-272]	; 0xfffffef0
   1919c:	str	r8, [r4, #4]
   191a0:	bl	118dc <strdup@plt>
   191a4:	cmp	r0, #0
   191a8:	str	r0, [r7, r6, lsl #3]
   191ac:	beq	19508 <__assert_fail@plt+0x77f4>
   191b0:	ldr	r3, [pc, #944]	; 19568 <__assert_fail@plt+0x7854>
   191b4:	add	r6, r6, #1
   191b8:	add	r3, pc, r3
   191bc:	str	r6, [r3, #20]
   191c0:	b	18de4 <__assert_fail@plt+0x70d0>
   191c4:	mov	r6, r0
   191c8:	mov	r0, sl
   191cc:	bl	11bc4 <fclose@plt>
   191d0:	ldr	r4, [pc, #916]	; 1956c <__assert_fail@plt+0x7858>
   191d4:	add	r4, pc, r4
   191d8:	ldr	r1, [r4, #20]
   191dc:	cmp	r1, #0
   191e0:	beq	1920c <__assert_fail@plt+0x74f8>
   191e4:	ldr	r3, [r4]
   191e8:	tst	r3, #8
   191ec:	bne	19254 <__assert_fail@plt+0x7540>
   191f0:	ldr	r2, [pc, #888]	; 19570 <__assert_fail@plt+0x785c>
   191f4:	ldr	r3, [pc, #888]	; 19574 <__assert_fail@plt+0x7860>
   191f8:	add	r2, pc, r2
   191fc:	add	r3, pc, r3
   19200:	ldr	r0, [r2, #16]
   19204:	mov	r2, #8
   19208:	bl	11c84 <qsort@plt>
   1920c:	add	r3, sp, #8448	; 0x2100
   19210:	add	r3, r3, #36	; 0x24
   19214:	ldr	r2, [r3]
   19218:	ldr	r3, [sp, #16]
   1921c:	mov	r0, r6
   19220:	ldr	r3, [r3]
   19224:	cmp	r2, r3
   19228:	bne	1952c <__assert_fail@plt+0x7818>
   1922c:	add	sp, sp, #8448	; 0x2100
   19230:	add	sp, sp, #44	; 0x2c
   19234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19238:	bl	18c14 <__assert_fail@plt+0x6f00>
   1923c:	ldrb	r3, [r4, #32]
   19240:	orr	r3, r3, #4
   19244:	strb	r3, [r4, #32]
   19248:	subs	r6, r0, #0
   1924c:	beq	18d94 <__assert_fail@plt+0x7080>
   19250:	b	191d0 <__assert_fail@plt+0x74bc>
   19254:	ldr	r2, [sp, #20]
   19258:	ldr	r3, [pc, #752]	; 19550 <__assert_fail@plt+0x783c>
   1925c:	ldr	r3, [r2, r3]
   19260:	ldr	r5, [r3]
   19264:	bl	11a98 <getpid@plt>
   19268:	ldr	r2, [pc, #776]	; 19578 <__assert_fail@plt+0x7864>
   1926c:	ldr	r3, [pc, #776]	; 1957c <__assert_fail@plt+0x7868>
   19270:	add	r2, pc, r2
   19274:	str	r2, [sp, #4]
   19278:	ldr	r2, [pc, #768]	; 19580 <__assert_fail@plt+0x786c>
   1927c:	add	r3, pc, r3
   19280:	mov	r1, #1
   19284:	str	r3, [sp]
   19288:	add	r2, pc, r2
   1928c:	mov	r3, r0
   19290:	mov	r0, r5
   19294:	bl	11ba0 <__fprintf_chk@plt>
   19298:	ldr	r0, [pc, #740]	; 19584 <__assert_fail@plt+0x7870>
   1929c:	add	r0, pc, r0
   192a0:	bl	181d4 <__assert_fail@plt+0x64c0>
   192a4:	ldr	r1, [r4, #20]
   192a8:	b	191f0 <__assert_fail@plt+0x74dc>
   192ac:	mov	r2, #13
   192b0:	strb	r2, [r3], #1
   192b4:	b	19120 <__assert_fail@plt+0x740c>
   192b8:	mov	r2, #10
   192bc:	strb	r2, [r3], #1
   192c0:	b	19120 <__assert_fail@plt+0x740c>
   192c4:	mov	r2, #9
   192c8:	strb	r2, [r3], #1
   192cc:	b	19120 <__assert_fail@plt+0x740c>
   192d0:	mov	r2, #12
   192d4:	strb	r2, [r3], #1
   192d8:	b	19120 <__assert_fail@plt+0x740c>
   192dc:	mov	r2, #27
   192e0:	strb	r2, [r3], #1
   192e4:	b	19120 <__assert_fail@plt+0x740c>
   192e8:	mov	r2, #8
   192ec:	strb	r2, [r3], #1
   192f0:	b	19120 <__assert_fail@plt+0x740c>
   192f4:	mov	r2, #7
   192f8:	strb	r2, [r3], #1
   192fc:	b	19120 <__assert_fail@plt+0x740c>
   19300:	strb	r6, [r3], #1
   19304:	b	19120 <__assert_fail@plt+0x740c>
   19308:	strb	lr, [r3], #1
   1930c:	b	19120 <__assert_fail@plt+0x740c>
   19310:	strb	r8, [r3], #1
   19314:	b	19120 <__assert_fail@plt+0x740c>
   19318:	strb	r7, [r3], #1
   1931c:	b	19120 <__assert_fail@plt+0x740c>
   19320:	bl	19df4 <__assert_fail@plt+0x80e0>
   19324:	cmp	r0, #0
   19328:	beq	19448 <__assert_fail@plt+0x7734>
   1932c:	bl	118dc <strdup@plt>
   19330:	ldr	r6, [sp, #12]
   19334:	ldr	r3, [r6, #-272]	; 0xfffffef0
   19338:	subs	r4, r0, #0
   1933c:	mov	r0, r3
   19340:	beq	19478 <__assert_fail@plt+0x7764>
   19344:	bl	11840 <free@plt>
   19348:	str	r4, [r6, #-272]	; 0xfffffef0
   1934c:	b	19170 <__assert_fail@plt+0x745c>
   19350:	mov	r2, r3
   19354:	strb	lr, [r2], #2
   19358:	ldrsb	r1, [ip, #1]
   1935c:	strb	r1, [r3, #1]
   19360:	mov	r3, r2
   19364:	b	19120 <__assert_fail@plt+0x740c>
   19368:	mov	r6, r0
   1936c:	b	191d0 <__assert_fail@plt+0x74bc>
   19370:	bl	11b1c <__errno_location@plt>
   19374:	ldr	r0, [r0]
   19378:	rsb	r6, r0, #0
   1937c:	b	191d0 <__assert_fail@plt+0x74bc>
   19380:	bl	11b1c <__errno_location@plt>
   19384:	ldr	r0, [r0]
   19388:	rsb	r6, r0, #0
   1938c:	b	191c8 <__assert_fail@plt+0x74b4>
   19390:	ldr	r2, [sp, #20]
   19394:	ldr	r3, [pc, #436]	; 19550 <__assert_fail@plt+0x783c>
   19398:	ldr	r3, [r2, r3]
   1939c:	ldr	r6, [r3]
   193a0:	bl	11a98 <getpid@plt>
   193a4:	ldr	r2, [pc, #476]	; 19588 <__assert_fail@plt+0x7874>
   193a8:	ldr	r3, [pc, #476]	; 1958c <__assert_fail@plt+0x7878>
   193ac:	add	r2, pc, r2
   193b0:	str	r2, [sp, #4]
   193b4:	ldr	r2, [pc, #468]	; 19590 <__assert_fail@plt+0x787c>
   193b8:	add	r3, pc, r3
   193bc:	str	r3, [sp]
   193c0:	add	r2, pc, r2
   193c4:	mov	r1, #1
   193c8:	mov	r3, r0
   193cc:	mov	r0, r6
   193d0:	bl	11ba0 <__fprintf_chk@plt>
   193d4:	ldr	r0, [pc, #440]	; 19594 <__assert_fail@plt+0x7880>
   193d8:	mov	r1, r5
   193dc:	add	r0, pc, r0
   193e0:	bl	181d4 <__assert_fail@plt+0x64c0>
   193e4:	ldr	r3, [sp, #12]
   193e8:	ldrsb	r3, [r3, #-136]	; 0xffffff78
   193ec:	b	18eb4 <__assert_fail@plt+0x71a0>
   193f0:	add	r1, r6, #10
   193f4:	mov	r0, r7
   193f8:	lsl	r1, r1, #3
   193fc:	bl	11900 <realloc@plt>
   19400:	subs	r7, r0, #0
   19404:	beq	19470 <__assert_fail@plt+0x775c>
   19408:	ldr	r6, [r4, #20]
   1940c:	str	r7, [r4, #16]
   19410:	add	r3, r6, #10
   19414:	str	r3, [r4, #24]
   19418:	b	1918c <__assert_fail@plt+0x7478>
   1941c:	mov	r0, r7
   19420:	bl	19df4 <__assert_fail@plt+0x80e0>
   19424:	cmp	r0, #0
   19428:	moveq	r0, r7
   1942c:	bl	118dc <strdup@plt>
   19430:	ldr	r3, [sp, #12]
   19434:	cmp	r0, #0
   19438:	str	r0, [r3, #-272]	; 0xfffffef0
   1943c:	bne	19158 <__assert_fail@plt+0x7444>
   19440:	mvn	r6, #11
   19444:	b	191c8 <__assert_fail@plt+0x74b4>
   19448:	ldr	r3, [pc, #328]	; 19598 <__assert_fail@plt+0x7884>
   1944c:	add	r3, pc, r3
   19450:	ldr	r3, [r3]
   19454:	tst	r3, #8
   19458:	bne	19480 <__assert_fail@plt+0x776c>
   1945c:	ldr	r3, [sp, #12]
   19460:	mvn	r6, #21
   19464:	ldr	r0, [r3, #-272]	; 0xfffffef0
   19468:	bl	11840 <free@plt>
   1946c:	b	191c8 <__assert_fail@plt+0x74b4>
   19470:	ldr	r3, [sp, #12]
   19474:	ldr	r0, [r3, #-272]	; 0xfffffef0
   19478:	bl	11840 <free@plt>
   1947c:	b	19440 <__assert_fail@plt+0x772c>
   19480:	ldr	r2, [sp, #20]
   19484:	ldr	r3, [pc, #196]	; 19550 <__assert_fail@plt+0x783c>
   19488:	mvn	r6, #21
   1948c:	ldr	r3, [r2, r3]
   19490:	ldr	r4, [r3]
   19494:	bl	11a98 <getpid@plt>
   19498:	ldr	r2, [pc, #252]	; 1959c <__assert_fail@plt+0x7888>
   1949c:	ldr	r3, [pc, #252]	; 195a0 <__assert_fail@plt+0x788c>
   194a0:	add	r2, pc, r2
   194a4:	str	r2, [sp, #4]
   194a8:	ldr	r2, [pc, #244]	; 195a4 <__assert_fail@plt+0x7890>
   194ac:	add	r3, pc, r3
   194b0:	str	r3, [sp]
   194b4:	add	r2, pc, r2
   194b8:	mov	r1, #1
   194bc:	mov	r3, r0
   194c0:	mov	r0, r4
   194c4:	bl	11ba0 <__fprintf_chk@plt>
   194c8:	ldr	r4, [sp, #12]
   194cc:	ldr	r0, [pc, #212]	; 195a8 <__assert_fail@plt+0x7894>
   194d0:	ldr	r1, [r4, #-272]	; 0xfffffef0
   194d4:	add	r0, pc, r0
   194d8:	bl	181d4 <__assert_fail@plt+0x64c0>
   194dc:	ldr	r0, [r4, #-272]	; 0xfffffef0
   194e0:	bl	11840 <free@plt>
   194e4:	b	191c8 <__assert_fail@plt+0x74b4>
   194e8:	ldr	r3, [pc, #188]	; 195ac <__assert_fail@plt+0x7898>
   194ec:	ldr	r1, [pc, #188]	; 195b0 <__assert_fail@plt+0x789c>
   194f0:	ldr	r0, [pc, #188]	; 195b4 <__assert_fail@plt+0x78a0>
   194f4:	add	r3, pc, r3
   194f8:	ldr	r2, [pc, #184]	; 195b8 <__assert_fail@plt+0x78a4>
   194fc:	add	r1, pc, r1
   19500:	add	r0, pc, r0
   19504:	bl	11d14 <__assert_fail@plt>
   19508:	mov	r5, r0
   1950c:	mov	r0, r8
   19510:	bl	11840 <free@plt>
   19514:	ldr	r0, [r4]
   19518:	bl	11840 <free@plt>
   1951c:	mvn	r6, #11
   19520:	str	r5, [r4]
   19524:	str	r5, [r4, #4]
   19528:	b	191c8 <__assert_fail@plt+0x74b4>
   1952c:	bl	118e8 <__stack_chk_fail@plt>
   19530:	andeq	r4, r1, r4, asr #1
   19534:	ldrdeq	r0, [r0], -r4
   19538:	andeq	r6, r1, r0, lsr #12
   1953c:	andeq	r6, r1, r8, ror #11
   19540:	andeq	r2, r0, ip, lsl #9
   19544:	andeq	r2, r0, r4, asr #25
   19548:	andeq	r6, r1, r0, ror #9
   1954c:	andeq	r2, r0, r8, lsr #24
   19550:	ldrdeq	r0, [r0], -r8
   19554:	andeq	r2, r0, ip, lsl #17
   19558:	andeq	r2, r0, r4, lsr r8
   1955c:	andeq	r2, r0, r4, lsl r8
   19560:	andeq	r2, r0, r4, lsl #19
   19564:	andeq	r6, r1, ip, lsl #4
   19568:	andeq	r6, r1, r8, asr #3
   1956c:	andeq	r6, r1, ip, lsr #3
   19570:	andeq	r6, r1, r8, lsl #3
   19574:			; <UNDEFINED> instruction: 0xfffff050
   19578:	strdeq	r2, [r0], -r4
   1957c:	muleq	r0, ip, r6
   19580:	andeq	r2, r0, r8, ror r6
   19584:	andeq	r2, r0, r4, ror #16
   19588:			; <UNDEFINED> instruction: 0x000025b8
   1958c:	andeq	r2, r0, r0, ror #10
   19590:	andeq	r2, r0, r0, asr #10
   19594:	ldrdeq	r2, [r0], -r8
   19598:	andeq	r5, r1, r4, lsr pc
   1959c:	andeq	r2, r0, r4, asr #9
   195a0:	andeq	r2, r0, ip, ror #8
   195a4:	andeq	r2, r0, ip, asr #8
   195a8:	andeq	r2, r0, r0, lsl r6
   195ac:	andeq	r2, r0, r0, lsl #8
   195b0:	andeq	r2, r0, r4, asr #11
   195b4:	ldrdeq	r2, [r0], -r0
   195b8:	andeq	r0, r0, fp, lsr #3
   195bc:	ldr	r2, [pc, #16]	; 195d4 <__assert_fail@plt+0x78c0>
   195c0:	add	r2, pc, r2
   195c4:	ldrb	r3, [r2, #32]
   195c8:	orr	r3, r3, #2
   195cc:	strb	r3, [r2, #32]
   195d0:	bx	lr
   195d4:	andeq	r5, r1, r0, asr #27
   195d8:	ldr	r2, [pc, #16]	; 195f0 <__assert_fail@plt+0x78dc>
   195dc:	add	r2, pc, r2
   195e0:	ldrb	r3, [r2, #32]
   195e4:	bic	r3, r3, #2
   195e8:	strb	r3, [r2, #32]
   195ec:	bx	lr
   195f0:	andeq	r5, r1, r4, lsr #27
   195f4:	ldr	r3, [pc, #12]	; 19608 <__assert_fail@plt+0x78f4>
   195f8:	add	r3, pc, r3
   195fc:	ldrb	r0, [r3, #32]
   19600:	and	r0, r0, #1
   19604:	bx	lr
   19608:	andeq	r5, r1, r8, lsl #27
   1960c:	ldr	r3, [pc, #40]	; 1963c <__assert_fail@plt+0x7928>
   19610:	cmp	r0, #0
   19614:	add	r3, pc, r3
   19618:	ldrb	r3, [r3, #32]
   1961c:	and	r2, r3, #3
   19620:	sub	r3, r2, #1
   19624:	clz	r3, r3
   19628:	lsr	r3, r3, #5
   1962c:	moveq	r3, #0
   19630:	cmp	r3, #0
   19634:	bxeq	lr
   19638:	b	11cc0 <fputs@plt>
   1963c:	andeq	r5, r1, ip, ror #26
   19640:	ldr	r3, [pc, #320]	; 19788 <__assert_fail@plt+0x7a74>
   19644:	push	{r4, r5, r6, r7, r8, r9, lr}
   19648:	add	r3, pc, r3
   1964c:	ldr	r4, [pc, #312]	; 1978c <__assert_fail@plt+0x7a78>
   19650:	ldrb	r3, [r3, #32]
   19654:	add	r4, pc, r4
   19658:	sub	sp, sp, #12
   1965c:	and	r2, r3, #3
   19660:	cmp	r2, #1
   19664:	movne	r0, #0
   19668:	bne	19704 <__assert_fail@plt+0x79f0>
   1966c:	cmp	r0, #0
   19670:	mov	r8, r1
   19674:	mov	r7, r0
   19678:	beq	19700 <__assert_fail@plt+0x79ec>
   1967c:	ldrsb	r2, [r0]
   19680:	cmp	r2, #0
   19684:	beq	19700 <__assert_fail@plt+0x79ec>
   19688:	tst	r3, #4
   1968c:	beq	19778 <__assert_fail@plt+0x7a64>
   19690:	ldr	r6, [pc, #248]	; 19790 <__assert_fail@plt+0x7a7c>
   19694:	add	r6, pc, r6
   19698:	ldr	r5, [r6, #20]
   1969c:	cmp	r5, #0
   196a0:	beq	19700 <__assert_fail@plt+0x79ec>
   196a4:	ldr	r3, [r6]
   196a8:	tst	r3, #8
   196ac:	bne	19720 <__assert_fail@plt+0x7a0c>
   196b0:	ldr	r3, [pc, #220]	; 19794 <__assert_fail@plt+0x7a80>
   196b4:	mov	r6, #0
   196b8:	add	r3, pc, r3
   196bc:	ldr	r9, [r3, #16]
   196c0:	b	196cc <__assert_fail@plt+0x79b8>
   196c4:	beq	1970c <__assert_fail@plt+0x79f8>
   196c8:	add	r6, r4, #1
   196cc:	cmp	r6, r5
   196d0:	bcs	19700 <__assert_fail@plt+0x79ec>
   196d4:	add	r4, r6, r5
   196d8:	mov	r0, r7
   196dc:	lsr	r4, r4, #1
   196e0:	ldr	r1, [r9, r4, lsl #3]
   196e4:	bl	117ec <strcmp@plt>
   196e8:	add	r3, r9, r4, lsl #3
   196ec:	cmp	r0, #0
   196f0:	bge	196c4 <__assert_fail@plt+0x79b0>
   196f4:	cmp	r4, r6
   196f8:	mov	r5, r4
   196fc:	bhi	196d4 <__assert_fail@plt+0x79c0>
   19700:	mov	r0, r8
   19704:	add	sp, sp, #12
   19708:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1970c:	ldr	r0, [r3, #4]
   19710:	cmp	r0, #0
   19714:	beq	19700 <__assert_fail@plt+0x79ec>
   19718:	add	sp, sp, #12
   1971c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19720:	ldr	r3, [pc, #112]	; 19798 <__assert_fail@plt+0x7a84>
   19724:	ldr	r3, [r4, r3]
   19728:	ldr	r4, [r3]
   1972c:	bl	11a98 <getpid@plt>
   19730:	ldr	r2, [pc, #100]	; 1979c <__assert_fail@plt+0x7a88>
   19734:	ldr	r3, [pc, #100]	; 197a0 <__assert_fail@plt+0x7a8c>
   19738:	add	r2, pc, r2
   1973c:	str	r2, [sp, #4]
   19740:	ldr	r2, [pc, #92]	; 197a4 <__assert_fail@plt+0x7a90>
   19744:	add	r3, pc, r3
   19748:	str	r3, [sp]
   1974c:	add	r2, pc, r2
   19750:	mov	r1, #1
   19754:	mov	r3, r0
   19758:	mov	r0, r4
   1975c:	bl	11ba0 <__fprintf_chk@plt>
   19760:	ldr	r0, [pc, #64]	; 197a8 <__assert_fail@plt+0x7a94>
   19764:	mov	r1, r7
   19768:	add	r0, pc, r0
   1976c:	bl	181d4 <__assert_fail@plt+0x64c0>
   19770:	ldr	r5, [r6, #20]
   19774:	b	196b0 <__assert_fail@plt+0x799c>
   19778:	bl	18d40 <__assert_fail@plt+0x702c>
   1977c:	cmp	r0, #0
   19780:	beq	19690 <__assert_fail@plt+0x797c>
   19784:	b	19700 <__assert_fail@plt+0x79ec>
   19788:	andeq	r5, r1, r8, lsr sp
   1978c:	andeq	r3, r1, r0, asr #15
   19790:	andeq	r5, r1, ip, ror #25
   19794:	andeq	r5, r1, r8, asr #25
   19798:	ldrdeq	r0, [r0], -r8
   1979c:	andeq	r2, r0, ip, lsr #4
   197a0:	ldrdeq	r2, [r0], -r4
   197a4:			; <UNDEFINED> instruction: 0x000021b4
   197a8:	andeq	r2, r0, ip, lsr #7
   197ac:	push	{r4, lr}
   197b0:	mov	r4, r2
   197b4:	bl	19640 <__assert_fail@plt+0x792c>
   197b8:	cmp	r0, #0
   197bc:	popeq	{r4, pc}
   197c0:	mov	r1, r4
   197c4:	pop	{r4, lr}
   197c8:	b	1960c <__assert_fail@plt+0x78f8>
   197cc:	ldr	r2, [pc, #36]	; 197f8 <__assert_fail@plt+0x7ae4>
   197d0:	add	r2, pc, r2
   197d4:	ldrb	r1, [r2, #32]
   197d8:	and	r1, r1, #3
   197dc:	cmp	r1, #1
   197e0:	bxne	lr
   197e4:	mov	r3, r0
   197e8:	ldr	r0, [pc, #12]	; 197fc <__assert_fail@plt+0x7ae8>
   197ec:	mov	r2, #4
   197f0:	add	r0, pc, r0
   197f4:	b	11990 <fwrite@plt>
   197f8:			; <UNDEFINED> instruction: 0x00015bb0
   197fc:	andeq	r2, r0, r0, lsr r3
   19800:	push	{r4, r5, r6, r7, r8, lr}
   19804:	mov	r8, r0
   19808:	ldr	r6, [pc, #1152]	; 19c90 <__assert_fail@plt+0x7f7c>
   1980c:	ldr	r3, [pc, #1152]	; 19c94 <__assert_fail@plt+0x7f80>
   19810:	add	r6, pc, r6
   19814:	ldr	r5, [pc, #1148]	; 19c98 <__assert_fail@plt+0x7f84>
   19818:	ldr	r7, [r6, r3]
   1981c:	ldr	r0, [pc, #1144]	; 19c9c <__assert_fail@plt+0x7f88>
   19820:	add	r5, pc, r5
   19824:	sub	sp, sp, #16
   19828:	ldr	r3, [r7]
   1982c:	add	r0, pc, r0
   19830:	str	r8, [r5, #28]
   19834:	str	r1, [r5, #4]
   19838:	str	r3, [sp, #12]
   1983c:	bl	11a08 <getenv@plt>
   19840:	ldr	r4, [r5]
   19844:	ands	r2, r4, #2
   19848:	beq	198b0 <__assert_fail@plt+0x7b9c>
   1984c:	bl	11834 <getuid@plt>
   19850:	mov	r5, r0
   19854:	bl	11954 <geteuid@plt>
   19858:	cmp	r5, r0
   1985c:	beq	19bf8 <__assert_fail@plt+0x7ee4>
   19860:	ldr	r5, [pc, #1080]	; 19ca0 <__assert_fail@plt+0x7f8c>
   19864:	ldr	r3, [pc, #1080]	; 19ca4 <__assert_fail@plt+0x7f90>
   19868:	add	r5, pc, r5
   1986c:	orr	r4, r4, #16777216	; 0x1000000
   19870:	str	r4, [r5]
   19874:	ldr	r3, [r6, r3]
   19878:	ldr	r4, [r3]
   1987c:	bl	11a98 <getpid@plt>
   19880:	ldr	r3, [pc, #1056]	; 19ca8 <__assert_fail@plt+0x7f94>
   19884:	ldr	r2, [pc, #1056]	; 19cac <__assert_fail@plt+0x7f98>
   19888:	add	r3, pc, r3
   1988c:	str	r3, [sp]
   19890:	add	r2, pc, r2
   19894:	mov	r1, #1
   19898:	mov	r3, r0
   1989c:	mov	r0, r4
   198a0:	bl	11ba0 <__fprintf_chk@plt>
   198a4:	ldr	r4, [r5]
   198a8:	orr	r4, r4, #2
   198ac:	b	19904 <__assert_fail@plt+0x7bf0>
   198b0:	cmp	r0, #0
   198b4:	beq	19900 <__assert_fail@plt+0x7bec>
   198b8:	add	r1, sp, #8
   198bc:	bl	11abc <strtoul@plt>
   198c0:	mov	r4, r0
   198c4:	ldr	r0, [sp, #8]
   198c8:	cmp	r0, #0
   198cc:	beq	198ec <__assert_fail@plt+0x7bd8>
   198d0:	ldr	r1, [pc, #984]	; 19cb0 <__assert_fail@plt+0x7f9c>
   198d4:	add	r1, pc, r1
   198d8:	bl	117ec <strcmp@plt>
   198dc:	cmp	r0, #0
   198e0:	ldreq	r4, [pc, #972]	; 19cb4 <__assert_fail@plt+0x7fa0>
   198e4:	streq	r4, [r5]
   198e8:	beq	1984c <__assert_fail@plt+0x7b38>
   198ec:	ldr	r3, [pc, #964]	; 19cb8 <__assert_fail@plt+0x7fa4>
   198f0:	cmp	r4, #0
   198f4:	add	r3, pc, r3
   198f8:	str	r4, [r3]
   198fc:	bne	1984c <__assert_fail@plt+0x7b38>
   19900:	mov	r4, #2
   19904:	ldr	r5, [pc, #944]	; 19cbc <__assert_fail@plt+0x7fa8>
   19908:	cmp	r8, #3
   1990c:	add	r5, pc, r5
   19910:	str	r4, [r5]
   19914:	beq	19970 <__assert_fail@plt+0x7c5c>
   19918:	ldr	r3, [r5, #28]
   1991c:	cmp	r3, #0
   19920:	beq	19c60 <__assert_fail@plt+0x7f4c>
   19924:	cmp	r3, #2
   19928:	bne	199d0 <__assert_fail@plt+0x7cbc>
   1992c:	ldr	r2, [pc, #908]	; 19cc0 <__assert_fail@plt+0x7fac>
   19930:	add	r2, pc, r2
   19934:	ldrb	r3, [r2, #32]
   19938:	orr	r3, r3, #1
   1993c:	strb	r3, [r2, #32]
   19940:	tst	r4, #4
   19944:	bne	199ec <__assert_fail@plt+0x7cd8>
   19948:	ldr	r3, [pc, #884]	; 19cc4 <__assert_fail@plt+0x7fb0>
   1994c:	ldr	r1, [sp, #12]
   19950:	add	r3, pc, r3
   19954:	ldr	r2, [r7]
   19958:	ldrb	r0, [r3, #32]
   1995c:	cmp	r1, r2
   19960:	and	r0, r0, #1
   19964:	bne	19c8c <__assert_fail@plt+0x7f78>
   19968:	add	sp, sp, #16
   1996c:	pop	{r4, r5, r6, r7, r8, pc}
   19970:	bl	18260 <__assert_fail@plt+0x654c>
   19974:	subs	r4, r0, #0
   19978:	beq	19bcc <__assert_fail@plt+0x7eb8>
   1997c:	bl	18c14 <__assert_fail@plt+0x6f00>
   19980:	cmp	r0, #0
   19984:	movne	r3, #0
   19988:	strne	r3, [r5, #28]
   1998c:	bne	19c2c <__assert_fail@plt+0x7f18>
   19990:	ldr	r3, [r5, #36]	; 0x24
   19994:	ldr	r2, [r5, #40]	; 0x28
   19998:	ldr	r0, [pc, #808]	; 19cc8 <__assert_fail@plt+0x7fb4>
   1999c:	cmp	r3, r2
   199a0:	movle	r3, #0
   199a4:	movgt	r3, #1
   199a8:	add	r0, pc, r0
   199ac:	str	r3, [r5, #28]
   199b0:	bl	1a040 <__assert_fail@plt+0x832c>
   199b4:	ldr	r3, [r5, #28]
   199b8:	cmp	r3, #0
   199bc:	beq	19c2c <__assert_fail@plt+0x7f18>
   199c0:	cmp	r3, #2
   199c4:	ldreq	r4, [r5]
   199c8:	beq	1992c <__assert_fail@plt+0x7c18>
   199cc:	ldr	r4, [r5]
   199d0:	ldr	r2, [pc, #756]	; 19ccc <__assert_fail@plt+0x7fb8>
   199d4:	tst	r4, #4
   199d8:	add	r2, pc, r2
   199dc:	ldrb	r3, [r2, #32]
   199e0:	bic	r3, r3, #1
   199e4:	strb	r3, [r2, #32]
   199e8:	beq	19948 <__assert_fail@plt+0x7c34>
   199ec:	ldr	r0, [pc, #732]	; 19cd0 <__assert_fail@plt+0x7fbc>
   199f0:	ldr	r4, [pc, #732]	; 19cd4 <__assert_fail@plt+0x7fc0>
   199f4:	add	r0, pc, r0
   199f8:	bl	11a14 <puts@plt>
   199fc:	add	r4, pc, r4
   19a00:	ldr	r1, [pc, #720]	; 19cd8 <__assert_fail@plt+0x7fc4>
   19a04:	ldr	r2, [r4, #4]
   19a08:	add	r1, pc, r1
   19a0c:	mov	r0, #1
   19a10:	bl	11b88 <__printf_chk@plt>
   19a14:	ldr	r1, [pc, #704]	; 19cdc <__assert_fail@plt+0x7fc8>
   19a18:	ldr	r2, [r4, #8]
   19a1c:	add	r1, pc, r1
   19a20:	mov	r0, #1
   19a24:	bl	11b88 <__printf_chk@plt>
   19a28:	ldr	r1, [pc, #688]	; 19ce0 <__assert_fail@plt+0x7fcc>
   19a2c:	ldr	r2, [r4, #12]
   19a30:	add	r1, pc, r1
   19a34:	mov	r0, #1
   19a38:	bl	11b88 <__printf_chk@plt>
   19a3c:	ldr	r3, [r4, #28]
   19a40:	cmp	r3, #3
   19a44:	beq	19c54 <__assert_fail@plt+0x7f40>
   19a48:	cmp	r3, #0
   19a4c:	bne	19c10 <__assert_fail@plt+0x7efc>
   19a50:	ldr	r2, [pc, #652]	; 19ce4 <__assert_fail@plt+0x7fd0>
   19a54:	add	r2, pc, r2
   19a58:	ldr	r4, [pc, #648]	; 19ce8 <__assert_fail@plt+0x7fd4>
   19a5c:	ldr	r1, [pc, #648]	; 19cec <__assert_fail@plt+0x7fd8>
   19a60:	add	r4, pc, r4
   19a64:	add	r1, pc, r1
   19a68:	mov	r0, #1
   19a6c:	bl	11b88 <__printf_chk@plt>
   19a70:	ldrb	r2, [r4, #32]
   19a74:	ldr	r1, [pc, #628]	; 19cf0 <__assert_fail@plt+0x7fdc>
   19a78:	mov	r0, #1
   19a7c:	add	r1, pc, r1
   19a80:	and	r2, r2, r0
   19a84:	bl	11b88 <__printf_chk@plt>
   19a88:	ldrb	r2, [r4, #32]
   19a8c:	mov	r0, #1
   19a90:	ldr	r1, [pc, #604]	; 19cf4 <__assert_fail@plt+0x7fe0>
   19a94:	ldr	r5, [pc, #604]	; 19cf8 <__assert_fail@plt+0x7fe4>
   19a98:	lsr	r2, r2, r0
   19a9c:	add	r1, pc, r1
   19aa0:	and	r2, r2, r0
   19aa4:	bl	11b88 <__printf_chk@plt>
   19aa8:	ldrb	r2, [r4, #32]
   19aac:	ldr	r1, [pc, #584]	; 19cfc <__assert_fail@plt+0x7fe8>
   19ab0:	mov	r0, #1
   19ab4:	add	r1, pc, r1
   19ab8:	lsr	r2, r2, #3
   19abc:	and	r2, r2, r0
   19ac0:	bl	11b88 <__printf_chk@plt>
   19ac4:	ldrb	r2, [r4, #32]
   19ac8:	ldr	r1, [pc, #560]	; 19d00 <__assert_fail@plt+0x7fec>
   19acc:	mov	r0, #1
   19ad0:	add	r1, pc, r1
   19ad4:	lsr	r2, r2, #2
   19ad8:	and	r2, r2, r0
   19adc:	bl	11b88 <__printf_chk@plt>
   19ae0:	ldr	r3, [pc, #540]	; 19d04 <__assert_fail@plt+0x7ff0>
   19ae4:	mov	r0, #10
   19ae8:	add	r5, pc, r5
   19aec:	ldr	r6, [r6, r3]
   19af0:	ldr	r1, [r6]
   19af4:	bl	11c30 <fputc@plt>
   19af8:	ldr	r2, [pc, #520]	; 19d08 <__assert_fail@plt+0x7ff4>
   19afc:	ldr	r3, [r4, #36]	; 0x24
   19b00:	mov	r1, r5
   19b04:	add	r2, pc, r2
   19b08:	mov	r0, #1
   19b0c:	bl	11b88 <__printf_chk@plt>
   19b10:	ldr	r2, [pc, #500]	; 19d0c <__assert_fail@plt+0x7ff8>
   19b14:	ldr	r3, [r4, #40]	; 0x28
   19b18:	mov	r1, r5
   19b1c:	add	r2, pc, r2
   19b20:	mov	r0, #1
   19b24:	bl	11b88 <__printf_chk@plt>
   19b28:	ldr	r2, [pc, #480]	; 19d10 <__assert_fail@plt+0x7ffc>
   19b2c:	ldr	r3, [r4, #44]	; 0x2c
   19b30:	mov	r1, r5
   19b34:	add	r2, pc, r2
   19b38:	mov	r0, #1
   19b3c:	bl	11b88 <__printf_chk@plt>
   19b40:	ldr	r1, [r6]
   19b44:	mov	r0, #10
   19b48:	bl	11c30 <fputc@plt>
   19b4c:	ldr	r3, [r4, #20]
   19b50:	cmp	r3, #0
   19b54:	beq	19bbc <__assert_fail@plt+0x7ea8>
   19b58:	ldr	r8, [pc, #436]	; 19d14 <__assert_fail@plt+0x8000>
   19b5c:	mov	r5, #0
   19b60:	add	r8, pc, r8
   19b64:	mov	r2, r5
   19b68:	mov	r1, r8
   19b6c:	mov	r0, #1
   19b70:	bl	11b88 <__printf_chk@plt>
   19b74:	ldr	r3, [r4, #16]
   19b78:	ldr	r2, [r6]
   19b7c:	mov	r1, #0
   19b80:	ldr	r0, [r3, r5, lsl #3]
   19b84:	bl	197ac <__assert_fail@plt+0x7a98>
   19b88:	ldr	r3, [r4, #16]
   19b8c:	ldr	r1, [r6]
   19b90:	ldr	r0, [r3, r5, lsl #3]
   19b94:	bl	11cc0 <fputs@plt>
   19b98:	ldr	r0, [r6]
   19b9c:	bl	197cc <__assert_fail@plt+0x7ab8>
   19ba0:	ldr	r1, [r6]
   19ba4:	mov	r0, #10
   19ba8:	bl	11c30 <fputc@plt>
   19bac:	ldr	r3, [r4, #20]
   19bb0:	add	r5, r5, #1
   19bb4:	cmp	r5, r3
   19bb8:	bcc	19b64 <__assert_fail@plt+0x7e50>
   19bbc:	ldr	r1, [r6]
   19bc0:	mov	r0, #10
   19bc4:	bl	11c30 <fputc@plt>
   19bc8:	b	19948 <__assert_fail@plt+0x7c34>
   19bcc:	ldr	r0, [r5, #28]
   19bd0:	ldr	r4, [r5]
   19bd4:	cmp	r0, #0
   19bd8:	bne	19c48 <__assert_fail@plt+0x7f34>
   19bdc:	ldr	r2, [pc, #308]	; 19d18 <__assert_fail@plt+0x8004>
   19be0:	add	r2, pc, r2
   19be4:	ldrb	r3, [r2, #32]
   19be8:	bic	r3, r3, #1
   19bec:	orr	r0, r0, r3
   19bf0:	strb	r0, [r2, #32]
   19bf4:	b	19940 <__assert_fail@plt+0x7c2c>
   19bf8:	bl	11b58 <getgid@plt>
   19bfc:	mov	r5, r0
   19c00:	bl	11978 <getegid@plt>
   19c04:	cmp	r5, r0
   19c08:	bne	19860 <__assert_fail@plt+0x7b4c>
   19c0c:	b	198a8 <__assert_fail@plt+0x7b94>
   19c10:	cmp	r3, #1
   19c14:	beq	19c80 <__assert_fail@plt+0x7f6c>
   19c18:	cmp	r3, #2
   19c1c:	beq	19c74 <__assert_fail@plt+0x7f60>
   19c20:	ldr	r2, [pc, #244]	; 19d1c <__assert_fail@plt+0x8008>
   19c24:	add	r2, pc, r2
   19c28:	b	19a58 <__assert_fail@plt+0x7d44>
   19c2c:	cmn	r4, #1
   19c30:	beq	19c60 <__assert_fail@plt+0x7f4c>
   19c34:	ldr	r3, [pc, #228]	; 19d20 <__assert_fail@plt+0x800c>
   19c38:	and	r0, r4, #1
   19c3c:	add	r3, pc, r3
   19c40:	ldr	r4, [r3]
   19c44:	b	19bdc <__assert_fail@plt+0x7ec8>
   19c48:	cmp	r0, #2
   19c4c:	beq	1992c <__assert_fail@plt+0x7c18>
   19c50:	b	199d0 <__assert_fail@plt+0x7cbc>
   19c54:	ldr	r2, [pc, #200]	; 19d24 <__assert_fail@plt+0x8010>
   19c58:	add	r2, pc, r2
   19c5c:	b	19a58 <__assert_fail@plt+0x7d44>
   19c60:	bl	18260 <__assert_fail@plt+0x654c>
   19c64:	ldr	r3, [pc, #188]	; 19d28 <__assert_fail@plt+0x8014>
   19c68:	ldr	r4, [pc, r3]
   19c6c:	and	r0, r0, #1
   19c70:	b	19bdc <__assert_fail@plt+0x7ec8>
   19c74:	ldr	r2, [pc, #176]	; 19d2c <__assert_fail@plt+0x8018>
   19c78:	add	r2, pc, r2
   19c7c:	b	19a58 <__assert_fail@plt+0x7d44>
   19c80:	ldr	r2, [pc, #168]	; 19d30 <__assert_fail@plt+0x801c>
   19c84:	add	r2, pc, r2
   19c88:	b	19a58 <__assert_fail@plt+0x7d44>
   19c8c:	bl	118e8 <__stack_chk_fail@plt>
   19c90:	andeq	r3, r1, r4, lsl #12
   19c94:	ldrdeq	r0, [r0], -r4
   19c98:	andeq	r5, r1, r0, ror #22
   19c9c:	andeq	r2, r0, r4, lsr #6
   19ca0:	andeq	r5, r1, r8, lsl fp
   19ca4:	ldrdeq	r0, [r0], -r8
   19ca8:	muleq	r0, r0, r0
   19cac:	ldrdeq	r2, [r0], -ip
   19cb0:	muleq	r0, r4, r2
   19cb4:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   19cb8:	andeq	r5, r1, ip, lsl #21
   19cbc:	andeq	r5, r1, r4, ror sl
   19cc0:	andeq	r5, r1, r0, asr sl
   19cc4:	andeq	r5, r1, r0, lsr sl
   19cc8:			; <UNDEFINED> instruction: 0xffffea40
   19ccc:	andeq	r5, r1, r8, lsr #19
   19cd0:			; <UNDEFINED> instruction: 0x000021b4
   19cd4:	andeq	r5, r1, r4, lsl #19
   19cd8:	andeq	r2, r0, r8, lsr #3
   19cdc:	andeq	r2, r0, r8, lsr #3
   19ce0:	andeq	r2, r0, r8, lsr #3
   19ce4:	andeq	r2, r0, r0, ror #1
   19ce8:	andeq	r5, r1, r0, lsr #18
   19cec:	andeq	r2, r0, ip, lsl #3
   19cf0:	andeq	r2, r0, r0, lsl #3
   19cf4:	andeq	r2, r0, r4, ror r1
   19cf8:	andeq	r2, r0, r4, ror #2
   19cfc:	andeq	r2, r0, ip, ror #2
   19d00:	andeq	r2, r0, r4, ror #2
   19d04:	andeq	r0, r0, r0, ror #3
   19d08:	andeq	r1, r0, r4, lsl #29
   19d0c:	andeq	r1, r0, ip, asr lr
   19d10:	andeq	r1, r0, ip, asr #28
   19d14:	strdeq	r2, [r0], -ip
   19d18:	andeq	r5, r1, r0, lsr #15
   19d1c:	andeq	r1, r0, r8, lsr #30
   19d20:	andeq	r5, r1, r4, asr #14
   19d24:	ldrdeq	r1, [r0], -r0
   19d28:	andeq	r5, r1, r8, lsl r7
   19d2c:	andeq	r1, r0, ip, asr #29
   19d30:			; <UNDEFINED> instruction: 0x00001eb8
   19d34:	push	{r4, r5, r6, lr}
   19d38:	subs	r6, r0, #0
   19d3c:	beq	19d9c <__assert_fail@plt+0x8088>
   19d40:	ldrsb	r3, [r6]
   19d44:	cmp	r3, #0
   19d48:	beq	19d9c <__assert_fail@plt+0x8088>
   19d4c:	ldr	r1, [pc, #80]	; 19da4 <__assert_fail@plt+0x8090>
   19d50:	mov	r0, r6
   19d54:	add	r1, pc, r1
   19d58:	bl	1193c <strcasecmp@plt>
   19d5c:	ldr	r5, [pc, #68]	; 19da8 <__assert_fail@plt+0x8094>
   19d60:	mov	r4, #0
   19d64:	add	r5, pc, r5
   19d68:	add	r5, r5, #4
   19d6c:	cmp	r0, #0
   19d70:	beq	19d94 <__assert_fail@plt+0x8080>
   19d74:	add	r4, r4, #1
   19d78:	cmp	r4, #4
   19d7c:	beq	19d9c <__assert_fail@plt+0x8088>
   19d80:	ldr	r1, [r5], #4
   19d84:	mov	r0, r6
   19d88:	bl	1193c <strcasecmp@plt>
   19d8c:	cmp	r0, #0
   19d90:	bne	19d74 <__assert_fail@plt+0x8060>
   19d94:	mov	r0, r4
   19d98:	pop	{r4, r5, r6, pc}
   19d9c:	mvn	r0, #21
   19da0:	pop	{r4, r5, r6, pc}
   19da4:	andeq	r1, r0, r0, ror #27
   19da8:	andeq	r2, r1, r4, ror #29
   19dac:	push	{r4, r5, r6, lr}
   19db0:	subs	r4, r0, #0
   19db4:	mov	r5, r1
   19db8:	beq	19dc8 <__assert_fail@plt+0x80b4>
   19dbc:	ldrsb	r3, [r4]
   19dc0:	cmp	r3, #61	; 0x3d
   19dc4:	addeq	r4, r4, #1
   19dc8:	mov	r0, r4
   19dcc:	bl	19d34 <__assert_fail@plt+0x8020>
   19dd0:	cmp	r0, #0
   19dd4:	popge	{r4, r5, r6, pc}
   19dd8:	ldr	r1, [pc, #16]	; 19df0 <__assert_fail@plt+0x80dc>
   19ddc:	mov	r3, r4
   19de0:	mov	r2, r5
   19de4:	add	r1, pc, r1
   19de8:	mov	r0, #1
   19dec:	bl	11c0c <errx@plt>
   19df0:	andeq	r1, r0, r4, asr r8
   19df4:	push	{r4, r5, r6, r7, r8, lr}
   19df8:	subs	r8, r0, #0
   19dfc:	beq	19e40 <__assert_fail@plt+0x812c>
   19e00:	ldr	r6, [pc, #92]	; 19e64 <__assert_fail@plt+0x8150>
   19e04:	mov	r7, #21
   19e08:	mov	r5, #0
   19e0c:	add	r6, pc, r6
   19e10:	add	r4, r5, r7
   19e14:	mov	r0, r8
   19e18:	lsr	r4, r4, #1
   19e1c:	ldr	r1, [r6, r4, lsl #3]
   19e20:	bl	117ec <strcmp@plt>
   19e24:	add	r3, r6, r4, lsl #3
   19e28:	cmp	r0, #0
   19e2c:	blt	19e48 <__assert_fail@plt+0x8134>
   19e30:	add	r5, r4, #1
   19e34:	beq	19e5c <__assert_fail@plt+0x8148>
   19e38:	cmp	r5, r7
   19e3c:	bcc	19e10 <__assert_fail@plt+0x80fc>
   19e40:	mov	r0, #0
   19e44:	pop	{r4, r5, r6, r7, r8, pc}
   19e48:	cmp	r4, r5
   19e4c:	mov	r7, r4
   19e50:	bhi	19e10 <__assert_fail@plt+0x80fc>
   19e54:	mov	r0, #0
   19e58:	pop	{r4, r5, r6, r7, r8, pc}
   19e5c:	ldr	r0, [r3, #4]
   19e60:	pop	{r4, r5, r6, r7, r8, pc}
   19e64:	andeq	r2, r1, ip, asr #28
   19e68:	cmp	r3, #0
   19e6c:	cmpeq	r2, #0
   19e70:	bne	19e88 <__assert_fail@plt+0x8174>
   19e74:	cmp	r1, #0
   19e78:	cmpeq	r0, #0
   19e7c:	mvnne	r1, #0
   19e80:	mvnne	r0, #0
   19e84:	b	19ea4 <__assert_fail@plt+0x8190>
   19e88:	sub	sp, sp, #8
   19e8c:	push	{sp, lr}
   19e90:	bl	19eb4 <__assert_fail@plt+0x81a0>
   19e94:	ldr	lr, [sp, #4]
   19e98:	add	sp, sp, #8
   19e9c:	pop	{r2, r3}
   19ea0:	bx	lr
   19ea4:	push	{r1, lr}
   19ea8:	mov	r0, #8
   19eac:	bl	117c8 <raise@plt>
   19eb0:	pop	{r1, pc}
   19eb4:	cmp	r1, r3
   19eb8:	cmpeq	r0, r2
   19ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ec0:	mov	r4, r0
   19ec4:	movcc	r0, #0
   19ec8:	mov	r5, r1
   19ecc:	ldr	lr, [sp, #36]	; 0x24
   19ed0:	movcc	r1, r0
   19ed4:	bcc	19fd0 <__assert_fail@plt+0x82bc>
   19ed8:	cmp	r3, #0
   19edc:	clzeq	ip, r2
   19ee0:	clzne	ip, r3
   19ee4:	addeq	ip, ip, #32
   19ee8:	cmp	r5, #0
   19eec:	clzeq	r1, r4
   19ef0:	addeq	r1, r1, #32
   19ef4:	clzne	r1, r5
   19ef8:	sub	ip, ip, r1
   19efc:	sub	sl, ip, #32
   19f00:	lsl	r9, r3, ip
   19f04:	rsb	fp, ip, #32
   19f08:	orr	r9, r9, r2, lsl sl
   19f0c:	orr	r9, r9, r2, lsr fp
   19f10:	lsl	r8, r2, ip
   19f14:	cmp	r5, r9
   19f18:	cmpeq	r4, r8
   19f1c:	movcc	r0, #0
   19f20:	movcc	r1, r0
   19f24:	bcc	19f40 <__assert_fail@plt+0x822c>
   19f28:	mov	r0, #1
   19f2c:	subs	r4, r4, r8
   19f30:	lsl	r1, r0, sl
   19f34:	orr	r1, r1, r0, lsr fp
   19f38:	lsl	r0, r0, ip
   19f3c:	sbc	r5, r5, r9
   19f40:	cmp	ip, #0
   19f44:	beq	19fd0 <__assert_fail@plt+0x82bc>
   19f48:	lsr	r6, r8, #1
   19f4c:	orr	r6, r6, r9, lsl #31
   19f50:	lsr	r7, r9, #1
   19f54:	mov	r2, ip
   19f58:	b	19f7c <__assert_fail@plt+0x8268>
   19f5c:	subs	r3, r4, r6
   19f60:	sbc	r8, r5, r7
   19f64:	adds	r3, r3, r3
   19f68:	adc	r8, r8, r8
   19f6c:	adds	r4, r3, #1
   19f70:	adc	r5, r8, #0
   19f74:	subs	r2, r2, #1
   19f78:	beq	19f98 <__assert_fail@plt+0x8284>
   19f7c:	cmp	r5, r7
   19f80:	cmpeq	r4, r6
   19f84:	bcs	19f5c <__assert_fail@plt+0x8248>
   19f88:	adds	r4, r4, r4
   19f8c:	adc	r5, r5, r5
   19f90:	subs	r2, r2, #1
   19f94:	bne	19f7c <__assert_fail@plt+0x8268>
   19f98:	lsr	r3, r4, ip
   19f9c:	orr	r3, r3, r5, lsl fp
   19fa0:	lsr	r2, r5, ip
   19fa4:	orr	r3, r3, r5, lsr sl
   19fa8:	adds	r0, r0, r4
   19fac:	mov	r4, r3
   19fb0:	lsl	r3, r2, ip
   19fb4:	orr	r3, r3, r4, lsl sl
   19fb8:	lsl	ip, r4, ip
   19fbc:	orr	r3, r3, r4, lsr fp
   19fc0:	adc	r1, r1, r5
   19fc4:	subs	r0, r0, ip
   19fc8:	mov	r5, r2
   19fcc:	sbc	r1, r1, r3
   19fd0:	cmp	lr, #0
   19fd4:	strdne	r4, [lr]
   19fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fe0:	mov	r7, r0
   19fe4:	ldr	r6, [pc, #72]	; 1a034 <__assert_fail@plt+0x8320>
   19fe8:	ldr	r5, [pc, #72]	; 1a038 <__assert_fail@plt+0x8324>
   19fec:	add	r6, pc, r6
   19ff0:	add	r5, pc, r5
   19ff4:	sub	r6, r6, r5
   19ff8:	mov	r8, r1
   19ffc:	mov	r9, r2
   1a000:	bl	117a8 <raise@plt-0x20>
   1a004:	asrs	r6, r6, #2
   1a008:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a00c:	mov	r4, #0
   1a010:	add	r4, r4, #1
   1a014:	ldr	r3, [r5], #4
   1a018:	mov	r2, r9
   1a01c:	mov	r1, r8
   1a020:	mov	r0, r7
   1a024:	blx	r3
   1a028:	cmp	r6, r4
   1a02c:	bne	1a010 <__assert_fail@plt+0x82fc>
   1a030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a034:	andeq	r2, r1, r8, lsr #20
   1a038:	andeq	r2, r1, r0, lsr #20
   1a03c:	bx	lr
   1a040:	ldr	r3, [pc, #12]	; 1a054 <__assert_fail@plt+0x8340>
   1a044:	mov	r1, #0
   1a048:	add	r3, pc, r3
   1a04c:	ldr	r2, [r3]
   1a050:	b	11b40 <__cxa_atexit@plt>
   1a054:			; <UNDEFINED> instruction: 0x00012fb4

Disassembly of section .fini:

0001a058 <.fini>:
   1a058:	push	{r3, lr}
   1a05c:	pop	{r3, pc}
