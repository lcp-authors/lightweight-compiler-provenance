
raspbian-preinstalled/alsatplg:     file format elf32-littlearm


Disassembly of section .init:

00010684 <.init>:
   10684:	push	{r3, lr}
   10688:	bl	109f4 <snd_tplg_free@plt+0x29c>
   1068c:	pop	{r3, pc}

Disassembly of section .plt:

00010690 <abort@plt-0x14>:
   10690:	push	{lr}		; (str lr, [sp, #-4]!)
   10694:	ldr	lr, [pc, #4]	; 106a0 <abort@plt-0x4>
   10698:	add	lr, pc, lr
   1069c:	ldr	pc, [lr, #8]!
   106a0:	andeq	r0, r1, ip, lsl #18

000106a4 <abort@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2316]!	; 0x90c

000106b0 <__libc_start_main@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2308]!	; 0x904

000106bc <__gmon_start__@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2300]!	; 0x8fc

000106c8 <__printf_chk@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2292]!	; 0x8f4

000106d4 <snd_tplg_new@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2284]!	; 0x8ec

000106e0 <__assert_fail@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2276]!	; 0x8e4

000106ec <getopt_long@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2268]!	; 0x8dc

000106f8 <snd_tplg_verbose@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2260]!	; 0x8d4

00010704 <unlink@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2252]!	; 0x8cc

00010710 <strtol@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2244]!	; 0x8c4

0001071c <fwrite@plt>:
   1071c:	add	ip, pc, #0, 12
   10720:	add	ip, ip, #16, 20	; 0x10000
   10724:	ldr	pc, [ip, #2236]!	; 0x8bc

00010728 <__stack_chk_fail@plt>:
   10728:	add	ip, pc, #0, 12
   1072c:	add	ip, ip, #16, 20	; 0x10000
   10730:	ldr	pc, [ip, #2228]!	; 0x8b4

00010734 <__fprintf_chk@plt>:
   10734:	add	ip, pc, #0, 12
   10738:	add	ip, ip, #16, 20	; 0x10000
   1073c:	ldr	pc, [ip, #2220]!	; 0x8ac

00010740 <snd_tplg_build_file@plt>:
   10740:	add	ip, pc, #0, 12
   10744:	add	ip, ip, #16, 20	; 0x10000
   10748:	ldr	pc, [ip, #2212]!	; 0x8a4

0001074c <snd_output_stdio_attach@plt>:
   1074c:	add	ip, pc, #0, 12
   10750:	add	ip, ip, #16, 20	; 0x10000
   10754:	ldr	pc, [ip, #2204]!	; 0x89c

00010758 <snd_tplg_free@plt>:
   10758:	add	ip, pc, #0, 12
   1075c:	add	ip, ip, #16, 20	; 0x10000
   10760:	ldr	pc, [ip, #2196]!	; 0x894

Disassembly of section .text:

00010764 <.text>:
   10764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10768:	sub	sp, sp, #28
   1076c:	ldr	r9, [pc, #528]	; 10984 <snd_tplg_free@plt+0x22c>
   10770:	ldr	sl, [pc, #528]	; 10988 <snd_tplg_free@plt+0x230>
   10774:	mov	r8, r0
   10778:	ldr	r3, [r9]
   1077c:	mov	r4, r1
   10780:	mov	r2, #0
   10784:	ldr	r1, [sl]
   10788:	ldr	r0, [pc, #508]	; 1098c <snd_tplg_free@plt+0x234>
   1078c:	str	r3, [sp, #20]
   10790:	bl	1074c <snd_output_stdio_attach@plt>
   10794:	cmp	r0, #0
   10798:	blt	1096c <snd_tplg_free@plt+0x214>
   1079c:	ldr	r7, [pc, #492]	; 10990 <snd_tplg_free@plt+0x238>
   107a0:	ldr	fp, [pc, #492]	; 10994 <snd_tplg_free@plt+0x23c>
   107a4:	add	r6, sp, #16
   107a8:	mov	r5, #0
   107ac:	str	r5, [sp, #12]
   107b0:	str	r5, [sp, #8]
   107b4:	str	r6, [sp]
   107b8:	mov	r3, r7
   107bc:	ldr	r2, [pc, #468]	; 10998 <snd_tplg_free@plt+0x240>
   107c0:	mov	r1, r4
   107c4:	mov	r0, r8
   107c8:	bl	106ec <getopt_long@plt>
   107cc:	cmn	r0, #1
   107d0:	beq	108ac <snd_tplg_free@plt+0x154>
   107d4:	sub	r0, r0, #99	; 0x63
   107d8:	cmp	r0, #19
   107dc:	ldrls	pc, [pc, r0, lsl #2]
   107e0:	b	10890 <snd_tplg_free@plt+0x138>
   107e4:	andeq	r0, r1, r4, lsl #17
   107e8:	muleq	r1, r0, r8
   107ec:	muleq	r1, r0, r8
   107f0:	muleq	r1, r0, r8
   107f4:	muleq	r1, r0, r8
   107f8:	andeq	r0, r1, r8, asr r8
   107fc:	muleq	r1, r0, r8
   10800:	muleq	r1, r0, r8
   10804:	muleq	r1, r0, r8
   10808:	muleq	r1, r0, r8
   1080c:	muleq	r1, r0, r8
   10810:	muleq	r1, r0, r8
   10814:	andeq	r0, r1, ip, asr #16
   10818:	muleq	r1, r0, r8
   1081c:	muleq	r1, r0, r8
   10820:	muleq	r1, r0, r8
   10824:	muleq	r1, r0, r8
   10828:	muleq	r1, r0, r8
   1082c:	muleq	r1, r0, r8
   10830:	andeq	r0, r1, r4, lsr r8
   10834:	mov	r2, #10
   10838:	mov	r1, #0
   1083c:	ldr	r0, [fp]
   10840:	bl	10710 <strtol@plt>
   10844:	mov	r5, r0
   10848:	b	107b4 <snd_tplg_free@plt+0x5c>
   1084c:	ldr	r3, [fp]
   10850:	str	r3, [sp, #12]
   10854:	b	107b4 <snd_tplg_free@plt+0x5c>
   10858:	ldr	r2, [r4]
   1085c:	ldr	r1, [pc, #312]	; 1099c <snd_tplg_free@plt+0x244>
   10860:	mov	r0, #1
   10864:	bl	106c8 <__printf_chk@plt>
   10868:	mov	r0, #0
   1086c:	ldr	r2, [sp, #20]
   10870:	ldr	r3, [r9]
   10874:	cmp	r2, r3
   10878:	bne	10980 <snd_tplg_free@plt+0x228>
   1087c:	add	sp, sp, #28
   10880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10884:	ldr	r3, [fp]
   10888:	str	r3, [sp, #8]
   1088c:	b	107b4 <snd_tplg_free@plt+0x5c>
   10890:	ldr	r3, [r4]
   10894:	ldr	r0, [sl]
   10898:	ldr	r2, [pc, #256]	; 109a0 <snd_tplg_free@plt+0x248>
   1089c:	mov	r1, #1
   108a0:	bl	10734 <__fprintf_chk@plt>
   108a4:	mov	r0, #1
   108a8:	b	1086c <snd_tplg_free@plt+0x114>
   108ac:	ldr	r3, [sp, #12]
   108b0:	clz	r0, r3
   108b4:	ldr	r3, [sp, #8]
   108b8:	lsr	r0, r0, #5
   108bc:	cmp	r3, #0
   108c0:	movne	r6, r0
   108c4:	moveq	r6, #1
   108c8:	cmp	r6, #0
   108cc:	bne	10928 <snd_tplg_free@plt+0x1d0>
   108d0:	bl	106d4 <snd_tplg_new@plt>
   108d4:	subs	r4, r0, #0
   108d8:	beq	1090c <snd_tplg_free@plt+0x1b4>
   108dc:	mov	r1, r5
   108e0:	bl	106f8 <snd_tplg_verbose@plt>
   108e4:	ldr	r2, [sp, #12]
   108e8:	ldr	r1, [sp, #8]
   108ec:	mov	r0, r4
   108f0:	bl	10740 <snd_tplg_build_file@plt>
   108f4:	cmp	r0, #0
   108f8:	blt	10940 <snd_tplg_free@plt+0x1e8>
   108fc:	mov	r0, r4
   10900:	bl	10758 <snd_tplg_free@plt>
   10904:	mov	r0, r6
   10908:	b	1086c <snd_tplg_free@plt+0x114>
   1090c:	ldr	r3, [sl]
   10910:	mov	r2, #38	; 0x26
   10914:	mov	r1, #1
   10918:	ldr	r0, [pc, #132]	; 109a4 <snd_tplg_free@plt+0x24c>
   1091c:	bl	1071c <fwrite@plt>
   10920:	mov	r0, #1
   10924:	b	1086c <snd_tplg_free@plt+0x114>
   10928:	ldr	r2, [r4]
   1092c:	ldr	r1, [pc, #104]	; 1099c <snd_tplg_free@plt+0x244>
   10930:	mov	r0, #1
   10934:	bl	106c8 <__printf_chk@plt>
   10938:	mov	r0, #1
   1093c:	b	1086c <snd_tplg_free@plt+0x114>
   10940:	ldr	r3, [sp, #8]
   10944:	ldr	r2, [pc, #92]	; 109a8 <snd_tplg_free@plt+0x250>
   10948:	mov	r1, #1
   1094c:	ldr	r0, [sl]
   10950:	bl	10734 <__fprintf_chk@plt>
   10954:	mov	r0, r4
   10958:	bl	10758 <snd_tplg_free@plt>
   1095c:	ldr	r0, [sp, #12]
   10960:	bl	10704 <unlink@plt>
   10964:	mov	r0, #1
   10968:	b	1086c <snd_tplg_free@plt+0x114>
   1096c:	ldr	r3, [pc, #56]	; 109ac <snd_tplg_free@plt+0x254>
   10970:	mov	r2, #71	; 0x47
   10974:	ldr	r1, [pc, #52]	; 109b0 <snd_tplg_free@plt+0x258>
   10978:	ldr	r0, [pc, #52]	; 109b4 <snd_tplg_free@plt+0x25c>
   1097c:	bl	106e0 <__assert_fail@plt>
   10980:	bl	10728 <__stack_chk_fail@plt>
   10984:	andeq	r0, r2, r8, lsl #29
   10988:	andeq	r1, r2, r8
   1098c:	andeq	r1, r2, r8, lsl r0
   10990:	andeq	r0, r1, r0, lsr #22
   10994:	andeq	r1, r2, r0, lsl r0
   10998:	andeq	r0, r1, r0, ror fp
   1099c:	muleq	r1, r0, fp
   109a0:	andeq	r0, r1, r8, asr #24
   109a4:	andeq	r0, r1, r0, ror ip
   109a8:	muleq	r1, r8, ip
   109ac:	andeq	r0, r1, r8, lsl fp
   109b0:	andeq	r0, r1, r8, ror fp
   109b4:	andeq	r0, r1, r4, lsl #23
   109b8:	mov	fp, #0
   109bc:	mov	lr, #0
   109c0:	pop	{r1}		; (ldr r1, [sp], #4)
   109c4:	mov	r2, sp
   109c8:	push	{r2}		; (str r2, [sp, #-4]!)
   109cc:	push	{r0}		; (str r0, [sp, #-4]!)
   109d0:	ldr	ip, [pc, #16]	; 109e8 <snd_tplg_free@plt+0x290>
   109d4:	push	{ip}		; (str ip, [sp, #-4]!)
   109d8:	ldr	r0, [pc, #12]	; 109ec <snd_tplg_free@plt+0x294>
   109dc:	ldr	r3, [pc, #12]	; 109f0 <snd_tplg_free@plt+0x298>
   109e0:	bl	106b0 <__libc_start_main@plt>
   109e4:	bl	106a4 <abort@plt>
   109e8:	andeq	r0, r1, r8, lsl #22
   109ec:	andeq	r0, r1, r4, ror #14
   109f0:	andeq	r0, r1, r8, lsr #21
   109f4:	ldr	r3, [pc, #20]	; 10a10 <snd_tplg_free@plt+0x2b8>
   109f8:	ldr	r2, [pc, #20]	; 10a14 <snd_tplg_free@plt+0x2bc>
   109fc:	add	r3, pc, r3
   10a00:	ldr	r2, [r3, r2]
   10a04:	cmp	r2, #0
   10a08:	bxeq	lr
   10a0c:	b	106bc <__gmon_start__@plt>
   10a10:	andeq	r0, r1, r8, lsr #11
   10a14:	andeq	r0, r0, ip, asr #32
   10a18:	ldr	r0, [pc, #24]	; 10a38 <snd_tplg_free@plt+0x2e0>
   10a1c:	ldr	r3, [pc, #24]	; 10a3c <snd_tplg_free@plt+0x2e4>
   10a20:	cmp	r3, r0
   10a24:	bxeq	lr
   10a28:	ldr	r3, [pc, #16]	; 10a40 <snd_tplg_free@plt+0x2e8>
   10a2c:	cmp	r3, #0
   10a30:	bxeq	lr
   10a34:	bx	r3
   10a38:	andeq	r1, r2, r8
   10a3c:	andeq	r1, r2, r8
   10a40:	andeq	r0, r0, r0
   10a44:	ldr	r0, [pc, #36]	; 10a70 <snd_tplg_free@plt+0x318>
   10a48:	ldr	r1, [pc, #36]	; 10a74 <snd_tplg_free@plt+0x31c>
   10a4c:	sub	r1, r1, r0
   10a50:	asr	r1, r1, #2
   10a54:	add	r1, r1, r1, lsr #31
   10a58:	asrs	r1, r1, #1
   10a5c:	bxeq	lr
   10a60:	ldr	r3, [pc, #16]	; 10a78 <snd_tplg_free@plt+0x320>
   10a64:	cmp	r3, #0
   10a68:	bxeq	lr
   10a6c:	bx	r3
   10a70:	andeq	r1, r2, r8
   10a74:	andeq	r1, r2, r8
   10a78:	andeq	r0, r0, r0
   10a7c:	push	{r4, lr}
   10a80:	ldr	r4, [pc, #24]	; 10aa0 <snd_tplg_free@plt+0x348>
   10a84:	ldrb	r3, [r4]
   10a88:	cmp	r3, #0
   10a8c:	popne	{r4, pc}
   10a90:	bl	10a18 <snd_tplg_free@plt+0x2c0>
   10a94:	mov	r3, #1
   10a98:	strb	r3, [r4]
   10a9c:	pop	{r4, pc}
   10aa0:	andeq	r1, r2, r4, lsl r0
   10aa4:	b	10a44 <snd_tplg_free@plt+0x2ec>
   10aa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10aac:	mov	r7, r0
   10ab0:	ldr	r6, [pc, #72]	; 10b00 <snd_tplg_free@plt+0x3a8>
   10ab4:	ldr	r5, [pc, #72]	; 10b04 <snd_tplg_free@plt+0x3ac>
   10ab8:	add	r6, pc, r6
   10abc:	add	r5, pc, r5
   10ac0:	sub	r6, r6, r5
   10ac4:	mov	r8, r1
   10ac8:	mov	r9, r2
   10acc:	bl	10684 <abort@plt-0x20>
   10ad0:	asrs	r6, r6, #2
   10ad4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ad8:	mov	r4, #0
   10adc:	add	r4, r4, #1
   10ae0:	ldr	r3, [r5], #4
   10ae4:	mov	r2, r9
   10ae8:	mov	r1, r8
   10aec:	mov	r0, r7
   10af0:	blx	r3
   10af4:	cmp	r6, r4
   10af8:	bne	10adc <snd_tplg_free@plt+0x384>
   10afc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b00:	andeq	r0, r1, r4, asr #7
   10b04:			; <UNDEFINED> instruction: 0x000103bc
   10b08:	bx	lr

Disassembly of section .fini:

00010b0c <.fini>:
   10b0c:	push	{r3, lr}
   10b10:	pop	{r3, pc}
