
raspbian-preinstalled/gpgtar:     file format elf32-littlearm


Disassembly of section .init:

000122dc <.init>:
   122dc:	push	{r3, lr}
   122e0:	bl	12fe0 <__assert_fail@plt+0x498>
   122e4:	pop	{r3, pc}

Disassembly of section .plt:

000122e8 <gcry_xmalloc@plt-0x14>:
   122e8:	push	{lr}		; (str lr, [sp, #-4]!)
   122ec:	ldr	lr, [pc, #4]	; 122f8 <gcry_xmalloc@plt-0x4>
   122f0:	add	lr, pc, lr
   122f4:	ldr	pc, [lr, #8]!
   122f8:	andeq	r9, r2, r0, lsr sl

000122fc <gcry_xmalloc@plt>:
   122fc:	add	ip, pc, #0, 12
   12300:	add	ip, ip, #167936	; 0x29000
   12304:	ldr	pc, [ip, #2608]!	; 0xa30

00012308 <calloc@plt>:
   12308:	add	ip, pc, #0, 12
   1230c:	add	ip, ip, #167936	; 0x29000
   12310:	ldr	pc, [ip, #2600]!	; 0xa28

00012314 <strstr@plt>:
   12314:	add	ip, pc, #0, 12
   12318:	add	ip, ip, #167936	; 0x29000
   1231c:	ldr	pc, [ip, #2592]!	; 0xa20

00012320 <raise@plt>:
   12320:	add	ip, pc, #0, 12
   12324:	add	ip, ip, #167936	; 0x29000
   12328:	ldr	pc, [ip, #2584]!	; 0xa18

0001232c <gpgrt_funlockfile@plt>:
   1232c:	add	ip, pc, #0, 12
   12330:	add	ip, ip, #167936	; 0x29000
   12334:	ldr	pc, [ip, #2576]!	; 0xa10

00012338 <gcry_malloc@plt>:
   12338:	add	ip, pc, #0, 12
   1233c:	add	ip, ip, #167936	; 0x29000
   12340:	ldr	pc, [ip, #2568]!	; 0xa08

00012344 <gmtime_r@plt>:
   12344:	add	ip, pc, #0, 12
   12348:	add	ip, ip, #167936	; 0x29000
   1234c:	ldr	pc, [ip, #2560]!	; 0xa00

00012350 <gpgrt_write@plt>:
   12350:	add	ip, pc, #0, 12
   12354:	add	ip, ip, #167936	; 0x29000
   12358:	ldr	pc, [ip, #2552]!	; 0x9f8

0001235c <getpwnam@plt>:
   1235c:	add	ip, pc, #0, 12
   12360:	add	ip, ip, #167936	; 0x29000
   12364:	ldr	pc, [ip, #2544]!	; 0x9f0

00012368 <fsync@plt>:
   12368:	add	ip, pc, #0, 12
   1236c:	add	ip, ip, #167936	; 0x29000
   12370:	ldr	pc, [ip, #2536]!	; 0x9e8

00012374 <iconv_close@plt>:
   12374:	add	ip, pc, #0, 12
   12378:	add	ip, ip, #167936	; 0x29000
   1237c:	ldr	pc, [ip, #2528]!	; 0x9e0

00012380 <iconv@plt>:
   12380:	add	ip, pc, #0, 12
   12384:	add	ip, ip, #167936	; 0x29000
   12388:	ldr	pc, [ip, #2520]!	; 0x9d8

0001238c <strcmp@plt>:
   1238c:	add	ip, pc, #0, 12
   12390:	add	ip, ip, #167936	; 0x29000
   12394:	ldr	pc, [ip, #2512]!	; 0x9d0

00012398 <gpgrt_vfprintf_unlocked@plt>:
   12398:	add	ip, pc, #0, 12
   1239c:	add	ip, ip, #167936	; 0x29000
   123a0:	ldr	pc, [ip, #2504]!	; 0x9c8

000123a4 <strtol@plt>:
   123a4:	add	ip, pc, #0, 12
   123a8:	add	ip, ip, #167936	; 0x29000
   123ac:	ldr	pc, [ip, #2496]!	; 0x9c0

000123b0 <gpgrt_set_binary@plt>:
   123b0:	add	ip, pc, #0, 12
   123b4:	add	ip, ip, #167936	; 0x29000
   123b8:	ldr	pc, [ip, #2488]!	; 0x9b8

000123bc <getpwuid@plt>:
   123bc:	add	ip, pc, #0, 12
   123c0:	add	ip, ip, #167936	; 0x29000
   123c4:	ldr	pc, [ip, #2480]!	; 0x9b0

000123c8 <strcspn@plt>:
   123c8:	add	ip, pc, #0, 12
   123cc:	add	ip, ip, #167936	; 0x29000
   123d0:	ldr	pc, [ip, #2472]!	; 0x9a8

000123d4 <setrlimit64@plt>:
   123d4:	add	ip, pc, #0, 12
   123d8:	add	ip, ip, #167936	; 0x29000
   123dc:	ldr	pc, [ip, #2464]!	; 0x9a0

000123e0 <read@plt>:
   123e0:	add	ip, pc, #0, 12
   123e4:	add	ip, ip, #167936	; 0x29000
   123e8:	ldr	pc, [ip, #2456]!	; 0x998

000123ec <mktime@plt>:
   123ec:	add	ip, pc, #0, 12
   123f0:	add	ip, ip, #167936	; 0x29000
   123f4:	ldr	pc, [ip, #2448]!	; 0x990

000123f8 <fflush@plt>:
   123f8:	add	ip, pc, #0, 12
   123fc:	add	ip, ip, #167936	; 0x29000
   12400:	ldr	pc, [ip, #2440]!	; 0x988

00012404 <getuid@plt>:
   12404:	add	ip, pc, #0, 12
   12408:	add	ip, ip, #167936	; 0x29000
   1240c:	ldr	pc, [ip, #2432]!	; 0x980

00012410 <sigprocmask@plt>:
   12410:	add	ip, pc, #0, 12
   12414:	add	ip, ip, #167936	; 0x29000
   12418:	ldr	pc, [ip, #2424]!	; 0x978

0001241c <memmove@plt>:
   1241c:	add	ip, pc, #0, 12
   12420:	add	ip, ip, #167936	; 0x29000
   12424:	ldr	pc, [ip, #2416]!	; 0x970

00012428 <free@plt>:
   12428:	add	ip, pc, #0, 12
   1242c:	add	ip, ip, #167936	; 0x29000
   12430:	ldr	pc, [ip, #2408]!	; 0x968

00012434 <_gpgrt_putc_overflow@plt>:
   12434:	add	ip, pc, #0, 12
   12438:	add	ip, ip, #167936	; 0x29000
   1243c:	ldr	pc, [ip, #2400]!	; 0x960

00012440 <nanosleep@plt>:
   12440:	add	ip, pc, #0, 12
   12444:	add	ip, ip, #167936	; 0x29000
   12448:	ldr	pc, [ip, #2392]!	; 0x958

0001244c <gpgrt_fname_get@plt>:
   1244c:	add	ip, pc, #0, 12
   12450:	add	ip, ip, #167936	; 0x29000
   12454:	ldr	pc, [ip, #2384]!	; 0x950

00012458 <ferror@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #167936	; 0x29000
   12460:	ldr	pc, [ip, #2376]!	; 0x948

00012464 <inet_pton@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #167936	; 0x29000
   1246c:	ldr	pc, [ip, #2368]!	; 0x940

00012470 <_exit@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #167936	; 0x29000
   12478:	ldr	pc, [ip, #2360]!	; 0x938

0001247c <memcpy@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #167936	; 0x29000
   12484:	ldr	pc, [ip, #2352]!	; 0x930

00012488 <gpgrt_read@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #167936	; 0x29000
   12490:	ldr	pc, [ip, #2344]!	; 0x928

00012494 <time@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #167936	; 0x29000
   1249c:	ldr	pc, [ip, #2336]!	; 0x920

000124a0 <gcry_free@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #167936	; 0x29000
   124a8:	ldr	pc, [ip, #2328]!	; 0x918

000124ac <memcmp@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #167936	; 0x29000
   124b4:	ldr	pc, [ip, #2320]!	; 0x910

000124b8 <sleep@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #167936	; 0x29000
   124c0:	ldr	pc, [ip, #2312]!	; 0x908

000124c4 <stpcpy@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #167936	; 0x29000
   124cc:	ldr	pc, [ip, #2304]!	; 0x900

000124d0 <gpgrt_fwrite@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #167936	; 0x29000
   124d8:	ldr	pc, [ip, #2296]!	; 0x8f8

000124dc <dcgettext@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #167936	; 0x29000
   124e4:	ldr	pc, [ip, #2288]!	; 0x8f0

000124e8 <__stack_chk_fail@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #167936	; 0x29000
   124f0:	ldr	pc, [ip, #2280]!	; 0x8e8

000124f4 <gpgrt_set_alloc_func@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #167936	; 0x29000
   124fc:	ldr	pc, [ip, #2272]!	; 0x8e0

00012500 <sysconf@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #167936	; 0x29000
   12508:	ldr	pc, [ip, #2264]!	; 0x8d8

0001250c <dup2@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #167936	; 0x29000
   12514:	ldr	pc, [ip, #2256]!	; 0x8d0

00012518 <gpgrt_ferror@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #167936	; 0x29000
   12520:	ldr	pc, [ip, #2248]!	; 0x8c8

00012524 <getrlimit64@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #167936	; 0x29000
   1252c:	ldr	pc, [ip, #2240]!	; 0x8c0

00012530 <realloc@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #167936	; 0x29000
   12538:	ldr	pc, [ip, #2232]!	; 0x8b8

0001253c <gpgrt_fflush@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #167936	; 0x29000
   12544:	ldr	pc, [ip, #2224]!	; 0x8b0

00012548 <gpgrt_ftello@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #167936	; 0x29000
   12550:	ldr	pc, [ip, #2216]!	; 0x8a8

00012554 <dup@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #167936	; 0x29000
   1255c:	ldr	pc, [ip, #2208]!	; 0x8a0

00012560 <textdomain@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #167936	; 0x29000
   12568:	ldr	pc, [ip, #2200]!	; 0x898

0001256c <tmpfile64@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #167936	; 0x29000
   12574:	ldr	pc, [ip, #2192]!	; 0x890

00012578 <chdir@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #167936	; 0x29000
   12580:	ldr	pc, [ip, #2184]!	; 0x888

00012584 <geteuid@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #167936	; 0x29000
   1258c:	ldr	pc, [ip, #2176]!	; 0x880

00012590 <gpgrt_fputs_unlocked@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #167936	; 0x29000
   12598:	ldr	pc, [ip, #2168]!	; 0x878

0001259c <gpgrt_fread@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #167936	; 0x29000
   125a4:	ldr	pc, [ip, #2160]!	; 0x870

000125a8 <__fxstat64@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #167936	; 0x29000
   125b0:	ldr	pc, [ip, #2152]!	; 0x868

000125b4 <readlink@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #167936	; 0x29000
   125bc:	ldr	pc, [ip, #2144]!	; 0x860

000125c0 <sigaction@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #167936	; 0x29000
   125c8:	ldr	pc, [ip, #2136]!	; 0x858

000125cc <__memcpy_chk@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #167936	; 0x29000
   125d4:	ldr	pc, [ip, #2128]!	; 0x850

000125d8 <gpgrt_feof@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #167936	; 0x29000
   125e0:	ldr	pc, [ip, #2120]!	; 0x848

000125e4 <gpg_err_code_from_errno@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #167936	; 0x29000
   125ec:	ldr	pc, [ip, #2112]!	; 0x840

000125f0 <fwrite@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #167936	; 0x29000
   125f8:	ldr	pc, [ip, #2104]!	; 0x838

000125fc <lseek64@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #167936	; 0x29000
   12604:	ldr	pc, [ip, #2096]!	; 0x830

00012608 <gcry_check_version@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #167936	; 0x29000
   12610:	ldr	pc, [ip, #2088]!	; 0x828

00012614 <waitpid@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #167936	; 0x29000
   1261c:	ldr	pc, [ip, #2080]!	; 0x820

00012620 <strcpy@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #167936	; 0x29000
   12628:	ldr	pc, [ip, #2072]!	; 0x818

0001262c <bind_textdomain_codeset@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #167936	; 0x29000
   12634:	ldr	pc, [ip, #2064]!	; 0x810

00012638 <gpgrt_flockfile@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #167936	; 0x29000
   12640:	ldr	pc, [ip, #2056]!	; 0x808

00012644 <gpgrt_fclose@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #167936	; 0x29000
   1264c:	ldr	pc, [ip, #2048]!	; 0x800

00012650 <gpgrt_setvbuf@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #167936	; 0x29000
   12658:	ldr	pc, [ip, #2040]!	; 0x7f8

0001265c <opendir@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #167936	; 0x29000
   12664:	ldr	pc, [ip, #2032]!	; 0x7f0

00012668 <open64@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #167936	; 0x29000
   12670:	ldr	pc, [ip, #2024]!	; 0x7e8

00012674 <getenv@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #167936	; 0x29000
   1267c:	ldr	pc, [ip, #2016]!	; 0x7e0

00012680 <gcry_malloc_secure@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #167936	; 0x29000
   12688:	ldr	pc, [ip, #2008]!	; 0x7d8

0001268c <gpgrt_fdopen@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #167936	; 0x29000
   12694:	ldr	pc, [ip, #2000]!	; 0x7d0

00012698 <gcry_xrealloc@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #167936	; 0x29000
   126a0:	ldr	pc, [ip, #1992]!	; 0x7c8

000126a4 <malloc@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #167936	; 0x29000
   126ac:	ldr	pc, [ip, #1984]!	; 0x7c0

000126b0 <iconv_open@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #167936	; 0x29000
   126b8:	ldr	pc, [ip, #1976]!	; 0x7b8

000126bc <__libc_start_main@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #167936	; 0x29000
   126c4:	ldr	pc, [ip, #1968]!	; 0x7b0

000126c8 <strerror@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #167936	; 0x29000
   126d0:	ldr	pc, [ip, #1960]!	; 0x7a8

000126d4 <gpgrt_poll@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #167936	; 0x29000
   126dc:	ldr	pc, [ip, #1952]!	; 0x7a0

000126e0 <strftime@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #167936	; 0x29000
   126e8:	ldr	pc, [ip, #1944]!	; 0x798

000126ec <localtime@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #167936	; 0x29000
   126f4:	ldr	pc, [ip, #1936]!	; 0x790

000126f8 <__ctype_tolower_loc@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #167936	; 0x29000
   12700:	ldr	pc, [ip, #1928]!	; 0x788

00012704 <__ctype_toupper_loc@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #167936	; 0x29000
   1270c:	ldr	pc, [ip, #1920]!	; 0x780

00012710 <__gmon_start__@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #167936	; 0x29000
   12718:	ldr	pc, [ip, #1912]!	; 0x778

0001271c <rename@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #167936	; 0x29000
   12724:	ldr	pc, [ip, #1904]!	; 0x770

00012728 <kill@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #167936	; 0x29000
   12730:	ldr	pc, [ip, #1896]!	; 0x768

00012734 <__ctype_b_loc@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #167936	; 0x29000
   1273c:	ldr	pc, [ip, #1888]!	; 0x760

00012740 <_gpgrt_get_std_stream@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #167936	; 0x29000
   12748:	ldr	pc, [ip, #1880]!	; 0x758

0001274c <getcwd@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #167936	; 0x29000
   12754:	ldr	pc, [ip, #1872]!	; 0x750

00012758 <getpid@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #167936	; 0x29000
   12760:	ldr	pc, [ip, #1864]!	; 0x748

00012764 <exit@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #167936	; 0x29000
   1276c:	ldr	pc, [ip, #1856]!	; 0x740

00012770 <gpgrt_fprintf_unlocked@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #167936	; 0x29000
   12778:	ldr	pc, [ip, #1848]!	; 0x738

0001277c <strtoul@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #167936	; 0x29000
   12784:	ldr	pc, [ip, #1840]!	; 0x730

00012788 <strlen@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #167936	; 0x29000
   12790:	ldr	pc, [ip, #1832]!	; 0x728

00012794 <inotify_init@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #167936	; 0x29000
   1279c:	ldr	pc, [ip, #1824]!	; 0x720

000127a0 <setsid@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #167936	; 0x29000
   127a8:	ldr	pc, [ip, #1816]!	; 0x718

000127ac <strchr@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #167936	; 0x29000
   127b4:	ldr	pc, [ip, #1808]!	; 0x710

000127b8 <setenv@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #167936	; 0x29000
   127c0:	ldr	pc, [ip, #1800]!	; 0x708

000127c4 <gpg_err_code_from_syserror@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #167936	; 0x29000
   127cc:	ldr	pc, [ip, #1792]!	; 0x700

000127d0 <gpgrt_fopenmem@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #167936	; 0x29000
   127d8:	ldr	pc, [ip, #1784]!	; 0x6f8

000127dc <execv@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #167936	; 0x29000
   127e4:	ldr	pc, [ip, #1776]!	; 0x6f0

000127e8 <__open64_2@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #167936	; 0x29000
   127f0:	ldr	pc, [ip, #1768]!	; 0x6e8

000127f4 <sigfillset@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #167936	; 0x29000
   127fc:	ldr	pc, [ip, #1760]!	; 0x6e0

00012800 <inotify_add_watch@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #167936	; 0x29000
   12808:	ldr	pc, [ip, #1752]!	; 0x6d8

0001280c <__errno_location@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #167936	; 0x29000
   12814:	ldr	pc, [ip, #1744]!	; 0x6d0

00012818 <__strcat_chk@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #167936	; 0x29000
   12820:	ldr	pc, [ip, #1736]!	; 0x6c8

00012824 <strncasecmp@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #167936	; 0x29000
   1282c:	ldr	pc, [ip, #1728]!	; 0x6c0

00012830 <__sprintf_chk@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #167936	; 0x29000
   12838:	ldr	pc, [ip, #1720]!	; 0x6b8

0001283c <__cxa_atexit@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #167936	; 0x29000
   12844:	ldr	pc, [ip, #1712]!	; 0x6b0

00012848 <mkdir@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #167936	; 0x29000
   12850:	ldr	pc, [ip, #1704]!	; 0x6a8

00012854 <memset@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #167936	; 0x29000
   1285c:	ldr	pc, [ip, #1696]!	; 0x6a0

00012860 <gcry_calloc@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #167936	; 0x29000
   12868:	ldr	pc, [ip, #1688]!	; 0x698

0001286c <strncpy@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #167936	; 0x29000
   12874:	ldr	pc, [ip, #1680]!	; 0x690

00012878 <gpgrt_vasprintf@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #167936	; 0x29000
   12880:	ldr	pc, [ip, #1672]!	; 0x688

00012884 <gcry_cipher_algo_name@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #167936	; 0x29000
   1288c:	ldr	pc, [ip, #1664]!	; 0x680

00012890 <gmtime@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #167936	; 0x29000
   12898:	ldr	pc, [ip, #1656]!	; 0x678

0001289c <gpgrt_write_sanitized@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #167936	; 0x29000
   128a4:	ldr	pc, [ip, #1648]!	; 0x670

000128a8 <gpgrt_fopen@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #167936	; 0x29000
   128b0:	ldr	pc, [ip, #1640]!	; 0x668

000128b4 <write@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #167936	; 0x29000
   128bc:	ldr	pc, [ip, #1632]!	; 0x660

000128c0 <gpgrt_fgetc@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #167936	; 0x29000
   128c8:	ldr	pc, [ip, #1624]!	; 0x658

000128cc <difftime@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #167936	; 0x29000
   128d4:	ldr	pc, [ip, #1616]!	; 0x650

000128d8 <__fprintf_chk@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #167936	; 0x29000
   128e0:	ldr	pc, [ip, #1608]!	; 0x648

000128e4 <gcry_xstrdup@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #167936	; 0x29000
   128ec:	ldr	pc, [ip, #1600]!	; 0x640

000128f0 <access@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #167936	; 0x29000
   128f8:	ldr	pc, [ip, #1592]!	; 0x638

000128fc <gcry_realloc@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #167936	; 0x29000
   12904:	ldr	pc, [ip, #1584]!	; 0x630

00012908 <gpgrt_fputs@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #167936	; 0x29000
   12910:	ldr	pc, [ip, #1576]!	; 0x628

00012914 <pipe@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #167936	; 0x29000
   1291c:	ldr	pc, [ip, #1568]!	; 0x620

00012920 <gpgrt_snprintf@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #167936	; 0x29000
   12928:	ldr	pc, [ip, #1560]!	; 0x618

0001292c <fcntl64@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #167936	; 0x29000
   12934:	ldr	pc, [ip, #1552]!	; 0x610

00012938 <gcry_md_hash_buffer@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #167936	; 0x29000
   12940:	ldr	pc, [ip, #1544]!	; 0x608

00012944 <setlocale@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #167936	; 0x29000
   1294c:	ldr	pc, [ip, #1536]!	; 0x600

00012950 <sigemptyset@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #167936	; 0x29000
   12958:	ldr	pc, [ip, #1528]!	; 0x5f8

0001295c <fork@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #167936	; 0x29000
   12964:	ldr	pc, [ip, #1520]!	; 0x5f0

00012968 <putenv@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #167936	; 0x29000
   12970:	ldr	pc, [ip, #1512]!	; 0x5e8

00012974 <__explicit_bzero_chk@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #167936	; 0x29000
   1297c:	ldr	pc, [ip, #1504]!	; 0x5e0

00012980 <strrchr@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #167936	; 0x29000
   12988:	ldr	pc, [ip, #1496]!	; 0x5d8

0001298c <gcry_set_outofcore_handler@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #167936	; 0x29000
   12994:	ldr	pc, [ip, #1488]!	; 0x5d0

00012998 <nl_langinfo@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #167936	; 0x29000
   129a0:	ldr	pc, [ip, #1480]!	; 0x5c8

000129a4 <gpg_err_set_errno@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #167936	; 0x29000
   129ac:	ldr	pc, [ip, #1472]!	; 0x5c0

000129b0 <gpgrt_fseek@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #167936	; 0x29000
   129b8:	ldr	pc, [ip, #1464]!	; 0x5b8

000129bc <readdir64@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #167936	; 0x29000
   129c4:	ldr	pc, [ip, #1456]!	; 0x5b0

000129c8 <timegm@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #167936	; 0x29000
   129d0:	ldr	pc, [ip, #1448]!	; 0x5a8

000129d4 <gpg_strerror@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #167936	; 0x29000
   129dc:	ldr	pc, [ip, #1440]!	; 0x5a0

000129e0 <gpgrt_fopencookie@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #167936	; 0x29000
   129e8:	ldr	pc, [ip, #1432]!	; 0x598

000129ec <putc@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #167936	; 0x29000
   129f4:	ldr	pc, [ip, #1424]!	; 0x590

000129f8 <getsockname@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #167936	; 0x29000
   12a00:	ldr	pc, [ip, #1416]!	; 0x588

00012a04 <gpg_err_init@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #167936	; 0x29000
   12a0c:	ldr	pc, [ip, #1408]!	; 0x580

00012a10 <remove@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #167936	; 0x29000
   12a18:	ldr	pc, [ip, #1400]!	; 0x578

00012a1c <gcry_create_nonce@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #167936	; 0x29000
   12a24:	ldr	pc, [ip, #1392]!	; 0x570

00012a28 <gcry_control@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #167936	; 0x29000
   12a30:	ldr	pc, [ip, #1384]!	; 0x568

00012a34 <strpbrk@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #167936	; 0x29000
   12a3c:	ldr	pc, [ip, #1376]!	; 0x560

00012a40 <socket@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #167936	; 0x29000
   12a48:	ldr	pc, [ip, #1368]!	; 0x558

00012a4c <gpgrt_fprintf@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #167936	; 0x29000
   12a54:	ldr	pc, [ip, #1360]!	; 0x550

00012a58 <bindtextdomain@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #167936	; 0x29000
   12a60:	ldr	pc, [ip, #1352]!	; 0x548

00012a64 <gcry_xcalloc@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #167936	; 0x29000
   12a6c:	ldr	pc, [ip, #1344]!	; 0x540

00012a70 <gcry_set_log_handler@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #167936	; 0x29000
   12a78:	ldr	pc, [ip, #1336]!	; 0x538

00012a7c <gcry_set_fatalerror_handler@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #167936	; 0x29000
   12a84:	ldr	pc, [ip, #1328]!	; 0x530

00012a88 <chmod@plt>:
   12a88:	add	ip, pc, #0, 12
   12a8c:	add	ip, ip, #167936	; 0x29000
   12a90:	ldr	pc, [ip, #1320]!	; 0x528

00012a94 <__xstat64@plt>:
   12a94:	add	ip, pc, #0, 12
   12a98:	add	ip, ip, #167936	; 0x29000
   12a9c:	ldr	pc, [ip, #1312]!	; 0x520

00012aa0 <isatty@plt>:
   12aa0:	add	ip, pc, #0, 12
   12aa4:	add	ip, ip, #167936	; 0x29000
   12aa8:	ldr	pc, [ip, #1304]!	; 0x518

00012aac <unsetenv@plt>:
   12aac:	add	ip, pc, #0, 12
   12ab0:	add	ip, ip, #167936	; 0x29000
   12ab4:	ldr	pc, [ip, #1296]!	; 0x510

00012ab8 <fputs@plt>:
   12ab8:	add	ip, pc, #0, 12
   12abc:	add	ip, ip, #167936	; 0x29000
   12ac0:	ldr	pc, [ip, #1288]!	; 0x508

00012ac4 <strncmp@plt>:
   12ac4:	add	ip, pc, #0, 12
   12ac8:	add	ip, ip, #167936	; 0x29000
   12acc:	ldr	pc, [ip, #1280]!	; 0x500

00012ad0 <abort@plt>:
   12ad0:	add	ip, pc, #0, 12
   12ad4:	add	ip, ip, #167936	; 0x29000
   12ad8:	ldr	pc, [ip, #1272]!	; 0x4f8

00012adc <getc@plt>:
   12adc:	add	ip, pc, #0, 12
   12ae0:	add	ip, ip, #167936	; 0x29000
   12ae4:	ldr	pc, [ip, #1264]!	; 0x4f0

00012ae8 <gpgrt_fileno@plt>:
   12ae8:	add	ip, pc, #0, 12
   12aec:	add	ip, ip, #167936	; 0x29000
   12af0:	ldr	pc, [ip, #1256]!	; 0x4e8

00012af4 <close@plt>:
   12af4:	add	ip, pc, #0, 12
   12af8:	add	ip, ip, #167936	; 0x29000
   12afc:	ldr	pc, [ip, #1248]!	; 0x4e0

00012b00 <__lxstat64@plt>:
   12b00:	add	ip, pc, #0, 12
   12b04:	add	ip, ip, #167936	; 0x29000
   12b08:	ldr	pc, [ip, #1240]!	; 0x4d8

00012b0c <gcry_strdup@plt>:
   12b0c:	add	ip, pc, #0, 12
   12b10:	add	ip, ip, #167936	; 0x29000
   12b14:	ldr	pc, [ip, #1232]!	; 0x4d0

00012b18 <connect@plt>:
   12b18:	add	ip, pc, #0, 12
   12b1c:	add	ip, ip, #167936	; 0x29000
   12b20:	ldr	pc, [ip, #1224]!	; 0x4c8

00012b24 <closedir@plt>:
   12b24:	add	ip, pc, #0, 12
   12b28:	add	ip, ip, #167936	; 0x29000
   12b2c:	ldr	pc, [ip, #1216]!	; 0x4c0

00012b30 <getgrgid@plt>:
   12b30:	add	ip, pc, #0, 12
   12b34:	add	ip, ip, #167936	; 0x29000
   12b38:	ldr	pc, [ip, #1208]!	; 0x4b8

00012b3c <gpgrt_mopen@plt>:
   12b3c:	add	ip, pc, #0, 12
   12b40:	add	ip, ip, #167936	; 0x29000
   12b44:	ldr	pc, [ip, #1200]!	; 0x4b0

00012b48 <__assert_fail@plt>:
   12b48:	add	ip, pc, #0, 12
   12b4c:	add	ip, ip, #167936	; 0x29000
   12b50:	ldr	pc, [ip, #1192]!	; 0x4a8

Disassembly of section .text:

00012b58 <.text>:
   12b58:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b5c:	sub	sp, sp, #72	; 0x48
   12b60:	ldr	r7, [pc, #1012]	; 12f5c <__assert_fail@plt+0x414>
   12b64:	str	r0, [sp, #4]
   12b68:	ldr	r0, [pc, #1008]	; 12f60 <__assert_fail@plt+0x418>
   12b6c:	ldr	r3, [r7]
   12b70:	str	r1, [sp]
   12b74:	str	r3, [sp, #68]	; 0x44
   12b78:	bl	1d150 <__assert_fail@plt+0xa608>
   12b7c:	ldr	r0, [pc, #992]	; 12f64 <__assert_fail@plt+0x41c>
   12b80:	bl	1b458 <__assert_fail@plt+0x8910>
   12b84:	add	r4, sp, #4
   12b88:	mov	r1, #1
   12b8c:	ldr	r0, [pc, #972]	; 12f60 <__assert_fail@plt+0x418>
   12b90:	ldr	r5, [pc, #976]	; 12f68 <__assert_fail@plt+0x420>
   12b94:	bl	1c49c <__assert_fail@plt+0x9954>
   12b98:	bl	16104 <__assert_fail@plt+0x35bc>
   12b9c:	mov	r2, sp
   12ba0:	mov	r1, r4
   12ba4:	mov	r0, #0
   12ba8:	bl	1cca4 <__assert_fail@plt+0xa15c>
   12bac:	mov	r3, #1
   12bb0:	add	r0, sp, #12
   12bb4:	ldr	r1, [pc, #944]	; 12f6c <__assert_fail@plt+0x424>
   12bb8:	str	r3, [sp, #20]
   12bbc:	str	r4, [sp, #12]
   12bc0:	str	sp, [sp, #16]
   12bc4:	bl	13454 <__assert_fail@plt+0x90c>
   12bc8:	ldmib	r5, {r0, r3}
   12bcc:	cmp	r0, #0
   12bd0:	beq	12f20 <__assert_fail@plt+0x3d8>
   12bd4:	cmp	r3, #0
   12bd8:	bne	12bf0 <__assert_fail@plt+0xa8>
   12bdc:	ldr	r0, [pc, #908]	; 12f70 <__assert_fail@plt+0x428>
   12be0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   12be4:	ldr	r0, [r5, #4]
   12be8:	cmp	r0, #0
   12bec:	beq	12c00 <__assert_fail@plt+0xb8>
   12bf0:	ldr	r1, [pc, #892]	; 12f74 <__assert_fail@plt+0x42c>
   12bf4:	bl	1238c <strcmp@plt>
   12bf8:	cmp	r0, #0
   12bfc:	bne	12e54 <__assert_fail@plt+0x30c>
   12c00:	mov	r0, #0
   12c04:	bl	1c430 <__assert_fail@plt+0x98e8>
   12c08:	subs	r9, r0, #0
   12c0c:	bne	12f54 <__assert_fail@plt+0x40c>
   12c10:	ldr	r6, [pc, #864]	; 12f78 <__assert_fail@plt+0x430>
   12c14:	ldr	r3, [sp, #20]
   12c18:	ldr	r2, [r6, #8]
   12c1c:	and	r3, r3, #256	; 0x100
   12c20:	orrs	r3, r3, r2
   12c24:	bne	12c94 <__assert_fail@plt+0x14c>
   12c28:	ldr	r0, [sp, #4]
   12c2c:	cmp	r0, #0
   12c30:	ble	12c94 <__assert_fail@plt+0x14c>
   12c34:	ldr	sl, [pc, #832]	; 12f7c <__assert_fail@plt+0x434>
   12c38:	mov	r4, r9
   12c3c:	b	12c4c <__assert_fail@plt+0x104>
   12c40:	add	r4, r4, #1
   12c44:	cmp	r0, r4
   12c48:	ble	12c94 <__assert_fail@plt+0x14c>
   12c4c:	ldr	r3, [sp]
   12c50:	lsl	r8, r4, #2
   12c54:	ldr	r3, [r3, r4, lsl #2]
   12c58:	ldrb	r2, [r3]
   12c5c:	cmp	r2, #45	; 0x2d
   12c60:	bne	12c40 <__assert_fail@plt+0xf8>
   12c64:	ldrb	r3, [r3, #1]
   12c68:	cmp	r3, #45	; 0x2d
   12c6c:	bne	12c40 <__assert_fail@plt+0xf8>
   12c70:	mov	r2, #5
   12c74:	mov	r1, sl
   12c78:	mov	r0, #0
   12c7c:	bl	124dc <dcgettext@plt>
   12c80:	ldr	r3, [sp]
   12c84:	ldr	r1, [r3, r8]
   12c88:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   12c8c:	ldr	r0, [sp, #4]
   12c90:	b	12c40 <__assert_fail@plt+0xf8>
   12c94:	ldr	r3, [r6, #16]
   12c98:	cmp	r3, #0
   12c9c:	beq	12f2c <__assert_fail@plt+0x3e4>
   12ca0:	ldr	r3, [r6]
   12ca4:	cmp	r3, #1
   12ca8:	movgt	r3, #1024	; 0x400
   12cac:	strgt	r3, [r6, #4]
   12cb0:	ldr	r3, [r5]
   12cb4:	cmp	r3, #115	; 0x73
   12cb8:	beq	12e2c <__assert_fail@plt+0x2e4>
   12cbc:	bhi	12d4c <__assert_fail@plt+0x204>
   12cc0:	cmp	r3, #100	; 0x64
   12cc4:	bne	12e24 <__assert_fail@plt+0x2dc>
   12cc8:	ldr	r3, [sp, #4]
   12ccc:	cmp	r3, #1
   12cd0:	bne	12f04 <__assert_fail@plt+0x3bc>
   12cd4:	ldr	r3, [r6, #24]
   12cd8:	cmp	r3, #0
   12cdc:	beq	12ce8 <__assert_fail@plt+0x1a0>
   12ce0:	ldr	r0, [pc, #664]	; 12f80 <__assert_fail@plt+0x438>
   12ce4:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   12ce8:	ldr	r3, [r5, #4]
   12cec:	cmp	r3, #0
   12cf0:	beq	12cfc <__assert_fail@plt+0x1b4>
   12cf4:	ldr	r0, [pc, #648]	; 12f84 <__assert_fail@plt+0x43c>
   12cf8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   12cfc:	ldr	r0, [sp, #4]
   12d00:	ldr	r1, [r5, #12]
   12d04:	cmp	r0, #0
   12d08:	clz	r1, r1
   12d0c:	ldrne	r3, [sp]
   12d10:	lsr	r1, r1, #5
   12d14:	ldrne	r0, [r3]
   12d18:	bl	15194 <__assert_fail@plt+0x264c>
   12d1c:	subs	r4, r0, #0
   12d20:	beq	12dfc <__assert_fail@plt+0x2b4>
   12d24:	mov	r0, #0
   12d28:	bl	1c430 <__assert_fail@plt+0x98e8>
   12d2c:	cmp	r0, #0
   12d30:	bne	12dfc <__assert_fail@plt+0x2b4>
   12d34:	mov	r0, r4
   12d38:	bl	129d4 <gpg_strerror@plt>
   12d3c:	mov	r1, r0
   12d40:	ldr	r0, [pc, #576]	; 12f88 <__assert_fail@plt+0x440>
   12d44:	bl	1c744 <__assert_fail@plt+0x9bfc>
   12d48:	b	12dfc <__assert_fail@plt+0x2b4>
   12d4c:	cmp	r3, #116	; 0x74
   12d50:	bne	12ddc <__assert_fail@plt+0x294>
   12d54:	ldr	r0, [sp, #4]
   12d58:	cmp	r0, #1
   12d5c:	bgt	12f10 <__assert_fail@plt+0x3c8>
   12d60:	cmp	r0, #0
   12d64:	moveq	r4, r0
   12d68:	ldrne	r3, [sp]
   12d6c:	ldrne	r4, [r3]
   12d70:	ldr	r3, [r6, #40]	; 0x28
   12d74:	cmp	r3, #0
   12d78:	beq	12d84 <__assert_fail@plt+0x23c>
   12d7c:	ldr	r0, [pc, #520]	; 12f8c <__assert_fail@plt+0x444>
   12d80:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   12d84:	ldr	r3, [r5, #4]
   12d88:	cmp	r3, #0
   12d8c:	beq	12d98 <__assert_fail@plt+0x250>
   12d90:	ldr	r0, [pc, #492]	; 12f84 <__assert_fail@plt+0x43c>
   12d94:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   12d98:	ldr	r1, [r5, #12]
   12d9c:	mov	r0, r4
   12da0:	clz	r1, r1
   12da4:	lsr	r1, r1, #5
   12da8:	bl	15e74 <__assert_fail@plt+0x332c>
   12dac:	subs	r4, r0, #0
   12db0:	beq	12dfc <__assert_fail@plt+0x2b4>
   12db4:	mov	r0, #0
   12db8:	bl	1c430 <__assert_fail@plt+0x98e8>
   12dbc:	cmp	r0, #0
   12dc0:	bne	12dfc <__assert_fail@plt+0x2b4>
   12dc4:	mov	r0, r4
   12dc8:	bl	129d4 <gpg_strerror@plt>
   12dcc:	mov	r1, r0
   12dd0:	ldr	r0, [pc, #440]	; 12f90 <__assert_fail@plt+0x448>
   12dd4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   12dd8:	b	12dfc <__assert_fail@plt+0x2b4>
   12ddc:	ldr	r2, [pc, #432]	; 12f94 <__assert_fail@plt+0x44c>
   12de0:	cmp	r3, r2
   12de4:	beq	12e2c <__assert_fail@plt+0x2e4>
   12de8:	mov	r2, #5
   12dec:	ldr	r1, [pc, #420]	; 12f98 <__assert_fail@plt+0x450>
   12df0:	mov	r0, #0
   12df4:	bl	124dc <dcgettext@plt>
   12df8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   12dfc:	mov	r0, #0
   12e00:	bl	1c430 <__assert_fail@plt+0x98e8>
   12e04:	ldr	r2, [sp, #68]	; 0x44
   12e08:	ldr	r3, [r7]
   12e0c:	adds	r0, r0, #0
   12e10:	movne	r0, #1
   12e14:	cmp	r2, r3
   12e18:	bne	12f50 <__assert_fail@plt+0x408>
   12e1c:	add	sp, sp, #72	; 0x48
   12e20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e24:	cmp	r3, #101	; 0x65
   12e28:	bne	12de8 <__assert_fail@plt+0x2a0>
   12e2c:	ldr	r3, [sp, #4]
   12e30:	ldr	r2, [r5, #8]
   12e34:	cmp	r3, #0
   12e38:	bne	12e60 <__assert_fail@plt+0x318>
   12e3c:	cmp	r2, #0
   12e40:	beq	12e68 <__assert_fail@plt+0x320>
   12e44:	ldr	r3, [r6, #40]	; 0x28
   12e48:	cmp	r3, #0
   12e4c:	bne	12e7c <__assert_fail@plt+0x334>
   12e50:	b	12e90 <__assert_fail@plt+0x348>
   12e54:	ldr	r0, [pc, #320]	; 12f9c <__assert_fail@plt+0x454>
   12e58:	bl	1c744 <__assert_fail@plt+0x9bfc>
   12e5c:	b	12c00 <__assert_fail@plt+0xb8>
   12e60:	cmp	r2, #0
   12e64:	beq	12f3c <__assert_fail@plt+0x3f4>
   12e68:	mov	r0, #1
   12e6c:	bl	1b30c <__assert_fail@plt+0x87c4>
   12e70:	ldr	r3, [r6, #40]	; 0x28
   12e74:	cmp	r3, #0
   12e78:	beq	12e84 <__assert_fail@plt+0x33c>
   12e7c:	ldr	r0, [pc, #264]	; 12f8c <__assert_fail@plt+0x444>
   12e80:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   12e84:	ldr	r3, [r5, #8]
   12e88:	cmp	r3, #0
   12e8c:	beq	12f48 <__assert_fail@plt+0x400>
   12e90:	mov	r0, #0
   12e94:	ldr	r1, [r5, #12]
   12e98:	ldr	r2, [r5]
   12e9c:	ldr	r3, [pc, #240]	; 12f94 <__assert_fail@plt+0x44c>
   12ea0:	cmp	r1, #0
   12ea4:	sub	r3, r2, r3
   12ea8:	clz	r3, r3
   12eac:	lsr	r3, r3, #5
   12eb0:	bne	12ec0 <__assert_fail@plt+0x378>
   12eb4:	cmp	r2, #101	; 0x65
   12eb8:	movne	r9, r3
   12ebc:	orreq	r9, r3, #1
   12ec0:	cmp	r2, #115	; 0x73
   12ec4:	movne	r2, r3
   12ec8:	orreq	r2, r3, #1
   12ecc:	mov	r1, r9
   12ed0:	bl	13ed8 <__assert_fail@plt+0x1390>
   12ed4:	subs	r4, r0, #0
   12ed8:	beq	12dfc <__assert_fail@plt+0x2b4>
   12edc:	mov	r0, #0
   12ee0:	bl	1c430 <__assert_fail@plt+0x98e8>
   12ee4:	cmp	r0, #0
   12ee8:	bne	12dfc <__assert_fail@plt+0x2b4>
   12eec:	mov	r0, r4
   12ef0:	bl	129d4 <gpg_strerror@plt>
   12ef4:	mov	r1, r0
   12ef8:	ldr	r0, [pc, #160]	; 12fa0 <__assert_fail@plt+0x458>
   12efc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   12f00:	b	12dfc <__assert_fail@plt+0x2b4>
   12f04:	mov	r0, #1
   12f08:	bl	1b30c <__assert_fail@plt+0x87c4>
   12f0c:	b	12cd4 <__assert_fail@plt+0x18c>
   12f10:	mov	r0, #1
   12f14:	bl	1b30c <__assert_fail@plt+0x87c4>
   12f18:	ldr	r0, [sp, #4]
   12f1c:	b	12d60 <__assert_fail@plt+0x218>
   12f20:	cmp	r3, #0
   12f24:	beq	12c00 <__assert_fail@plt+0xb8>
   12f28:	b	12bdc <__assert_fail@plt+0x94>
   12f2c:	mov	r0, #8
   12f30:	bl	1e2cc <__assert_fail@plt+0xb784>
   12f34:	str	r0, [r6, #16]
   12f38:	b	12ca0 <__assert_fail@plt+0x158>
   12f3c:	ldr	r3, [r6, #40]	; 0x28
   12f40:	cmp	r3, #0
   12f44:	bne	12e7c <__assert_fail@plt+0x334>
   12f48:	ldr	r0, [sp]
   12f4c:	b	12e94 <__assert_fail@plt+0x34c>
   12f50:	bl	124e8 <__stack_chk_fail@plt>
   12f54:	mov	r0, #2
   12f58:	bl	12764 <exit@plt>
   12f5c:	andeq	fp, r3, r0, lsl fp
   12f60:	andeq	r7, r2, r8, lsl lr
   12f64:	ldrdeq	r3, [r1], -r0
   12f68:	andeq	ip, r3, ip, lsl #5
   12f6c:	andeq	ip, r3, r8, lsl #1
   12f70:	andeq	r7, r2, r0, lsr #28
   12f74:	andeq	r7, r2, ip, asr lr
   12f78:	andeq	ip, r3, ip, asr #10
   12f7c:	andeq	r7, r2, ip, lsl #29
   12f80:	andeq	r7, r2, ip, lsr pc
   12f84:	ldrdeq	r7, [r2], -ip
   12f88:	andeq	r7, r2, ip, asr pc
   12f8c:			; <UNDEFINED> instruction: 0x00027eb4
   12f90:	andeq	r7, r2, r0, lsl #30
   12f94:	strdeq	r0, [r0], -r5
   12f98:	andeq	r7, r2, ip, ror pc
   12f9c:	andeq	r7, r2, r0, ror #28
   12fa0:	andeq	r7, r2, ip, lsl pc
   12fa4:	mov	fp, #0
   12fa8:	mov	lr, #0
   12fac:	pop	{r1}		; (ldr r1, [sp], #4)
   12fb0:	mov	r2, sp
   12fb4:	push	{r2}		; (str r2, [sp, #-4]!)
   12fb8:	push	{r0}		; (str r0, [sp, #-4]!)
   12fbc:	ldr	ip, [pc, #16]	; 12fd4 <__assert_fail@plt+0x48c>
   12fc0:	push	{ip}		; (str ip, [sp, #-4]!)
   12fc4:	ldr	r0, [pc, #12]	; 12fd8 <__assert_fail@plt+0x490>
   12fc8:	ldr	r3, [pc, #12]	; 12fdc <__assert_fail@plt+0x494>
   12fcc:	bl	126bc <__libc_start_main@plt>
   12fd0:	bl	12ad0 <abort@plt>
   12fd4:	andeq	r7, r2, r4, lsr #24
   12fd8:	andeq	r2, r1, r8, asr fp
   12fdc:	andeq	r7, r2, r4, asr #23
   12fe0:	ldr	r3, [pc, #20]	; 12ffc <__assert_fail@plt+0x4b4>
   12fe4:	ldr	r2, [pc, #20]	; 13000 <__assert_fail@plt+0x4b8>
   12fe8:	add	r3, pc, r3
   12fec:	ldr	r2, [r3, r2]
   12ff0:	cmp	r2, #0
   12ff4:	bxeq	lr
   12ff8:	b	12710 <__gmon_start__@plt>
   12ffc:	andeq	r8, r2, r8, lsr sp
   13000:	ldrdeq	r0, [r0], -r4
   13004:	ldr	r0, [pc, #24]	; 13024 <__assert_fail@plt+0x4dc>
   13008:	ldr	r3, [pc, #24]	; 13028 <__assert_fail@plt+0x4e0>
   1300c:	cmp	r3, r0
   13010:	bxeq	lr
   13014:	ldr	r3, [pc, #16]	; 1302c <__assert_fail@plt+0x4e4>
   13018:	cmp	r3, #0
   1301c:	bxeq	lr
   13020:	bx	r3
   13024:	andeq	ip, r3, r0, lsl #5
   13028:	andeq	ip, r3, r0, lsl #5
   1302c:	andeq	r0, r0, r0
   13030:	ldr	r0, [pc, #36]	; 1305c <__assert_fail@plt+0x514>
   13034:	ldr	r1, [pc, #36]	; 13060 <__assert_fail@plt+0x518>
   13038:	sub	r1, r1, r0
   1303c:	asr	r1, r1, #2
   13040:	add	r1, r1, r1, lsr #31
   13044:	asrs	r1, r1, #1
   13048:	bxeq	lr
   1304c:	ldr	r3, [pc, #16]	; 13064 <__assert_fail@plt+0x51c>
   13050:	cmp	r3, #0
   13054:	bxeq	lr
   13058:	bx	r3
   1305c:	andeq	ip, r3, r0, lsl #5
   13060:	andeq	ip, r3, r0, lsl #5
   13064:	andeq	r0, r0, r0
   13068:	push	{r4, lr}
   1306c:	ldr	r4, [pc, #24]	; 1308c <__assert_fail@plt+0x544>
   13070:	ldrb	r3, [r4]
   13074:	cmp	r3, #0
   13078:	popne	{r4, pc}
   1307c:	bl	13004 <__assert_fail@plt+0x4bc>
   13080:	mov	r3, #1
   13084:	strb	r3, [r4]
   13088:	pop	{r4, pc}
   1308c:	andeq	ip, r3, r8, lsl #5
   13090:	b	13030 <__assert_fail@plt+0x4e8>
   13094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13098:	sub	sp, sp, #1040	; 0x410
   1309c:	ldr	r9, [pc, #532]	; 132b8 <__assert_fail@plt+0x770>
   130a0:	ldrb	r5, [r0]
   130a4:	sub	sp, sp, #4
   130a8:	ldr	r3, [r9]
   130ac:	mov	r8, #0
   130b0:	cmp	r5, #0
   130b4:	str	r1, [sp, #4]
   130b8:	str	r3, [sp, #1036]	; 0x40c
   130bc:	str	r8, [sp, #8]
   130c0:	beq	13160 <__assert_fail@plt+0x618>
   130c4:	mov	fp, r0
   130c8:	bl	12734 <__ctype_b_loc@plt>
   130cc:	add	r6, sp, #12
   130d0:	ldr	r7, [pc, #484]	; 132bc <__assert_fail@plt+0x774>
   130d4:	mov	ip, r6
   130d8:	mov	r3, fp
   130dc:	str	r8, [sp]
   130e0:	ldr	r1, [r0]
   130e4:	mov	sl, r0
   130e8:	lsl	r0, r5, #1
   130ec:	mov	r4, r3
   130f0:	ldrh	r0, [r1, r0]
   130f4:	add	r8, sp, #8
   130f8:	tst	r0, #8192	; 0x2000
   130fc:	beq	13128 <__assert_fail@plt+0x5e0>
   13100:	cmp	ip, r6
   13104:	bhi	13240 <__assert_fail@plt+0x6f8>
   13108:	ldrb	r5, [r4, #1]
   1310c:	cmp	r5, #0
   13110:	beq	1315c <__assert_fail@plt+0x614>
   13114:	lsl	r0, r5, #1
   13118:	add	r4, r4, #1
   1311c:	ldrh	r0, [r1, r0]
   13120:	tst	r0, #8192	; 0x2000
   13124:	bne	13100 <__assert_fail@plt+0x5b8>
   13128:	cmp	r5, #34	; 0x22
   1312c:	cmpne	r5, #39	; 0x27
   13130:	beq	13188 <__assert_fail@plt+0x640>
   13134:	sub	r0, ip, r6
   13138:	add	r0, r0, #2
   1313c:	cmp	r0, r7
   13140:	bhi	13284 <__assert_fail@plt+0x73c>
   13144:	strb	r5, [ip], #1
   13148:	ldrb	r5, [r4, #1]
   1314c:	cmp	r5, #0
   13150:	bne	13114 <__assert_fail@plt+0x5cc>
   13154:	cmp	ip, r6
   13158:	bhi	1326c <__assert_fail@plt+0x724>
   1315c:	ldr	r5, [sp, #8]
   13160:	ldr	r3, [sp, #4]
   13164:	mov	r0, #0
   13168:	str	r5, [r3]
   1316c:	ldr	r2, [sp, #1036]	; 0x40c
   13170:	ldr	r3, [r9]
   13174:	cmp	r2, r3
   13178:	bne	132b4 <__assert_fail@plt+0x76c>
   1317c:	add	sp, sp, #1040	; 0x410
   13180:	add	sp, sp, #4
   13184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13188:	ldrb	r0, [r4, #1]
   1318c:	add	r3, r4, #1
   13190:	cmp	r0, #0
   13194:	beq	13154 <__assert_fail@plt+0x60c>
   13198:	cmp	r5, #34	; 0x22
   1319c:	bne	13204 <__assert_fail@plt+0x6bc>
   131a0:	cmp	fp, r3
   131a4:	bcs	132a0 <__assert_fail@plt+0x758>
   131a8:	cmp	r0, #34	; 0x22
   131ac:	beq	131dc <__assert_fail@plt+0x694>
   131b0:	sub	lr, ip, r6
   131b4:	add	lr, lr, #2
   131b8:	cmp	lr, r7
   131bc:	bhi	13284 <__assert_fail@plt+0x73c>
   131c0:	strb	r0, [ip], #1
   131c4:	ldrb	r0, [r3, #1]!
   131c8:	cmp	r0, #0
   131cc:	bne	131a0 <__assert_fail@plt+0x658>
   131d0:	cmp	ip, r6
   131d4:	bls	1315c <__assert_fail@plt+0x614>
   131d8:	b	1326c <__assert_fail@plt+0x724>
   131dc:	ldrb	lr, [r3, #-1]
   131e0:	cmp	lr, #92	; 0x5c
   131e4:	beq	131b0 <__assert_fail@plt+0x668>
   131e8:	ldrb	r5, [r3, #1]
   131ec:	add	r3, r3, #1
   131f0:	cmp	r5, #0
   131f4:	bne	130e8 <__assert_fail@plt+0x5a0>
   131f8:	cmp	ip, r6
   131fc:	bls	1315c <__assert_fail@plt+0x614>
   13200:	b	1326c <__assert_fail@plt+0x724>
   13204:	cmp	r5, #39	; 0x27
   13208:	bne	1328c <__assert_fail@plt+0x744>
   1320c:	cmp	r0, #39	; 0x27
   13210:	beq	131e8 <__assert_fail@plt+0x6a0>
   13214:	sub	lr, ip, r6
   13218:	add	lr, lr, #2
   1321c:	cmp	lr, r7
   13220:	bhi	13284 <__assert_fail@plt+0x73c>
   13224:	strb	r0, [ip], #1
   13228:	ldrb	r0, [r3, #1]!
   1322c:	cmp	r0, #0
   13230:	bne	1320c <__assert_fail@plt+0x6c4>
   13234:	cmp	ip, r6
   13238:	bls	1315c <__assert_fail@plt+0x614>
   1323c:	b	1326c <__assert_fail@plt+0x724>
   13240:	ldr	r3, [sp]
   13244:	mov	r1, r6
   13248:	strb	r3, [ip]
   1324c:	mov	r0, r8
   13250:	bl	18170 <__assert_fail@plt+0x5628>
   13254:	ldrb	r5, [r4, #1]
   13258:	cmp	r5, #0
   1325c:	beq	1315c <__assert_fail@plt+0x614>
   13260:	ldr	r1, [sl]
   13264:	mov	ip, r6
   13268:	b	13114 <__assert_fail@plt+0x5cc>
   1326c:	mov	r3, #0
   13270:	mov	r1, r6
   13274:	add	r0, sp, #8
   13278:	strb	r3, [ip]
   1327c:	bl	18170 <__assert_fail@plt+0x5628>
   13280:	b	1315c <__assert_fail@plt+0x614>
   13284:	mov	r0, #1
   13288:	b	1316c <__assert_fail@plt+0x624>
   1328c:	ldr	r3, [pc, #44]	; 132c0 <__assert_fail@plt+0x778>
   13290:	mov	r2, #248	; 0xf8
   13294:	ldr	r1, [pc, #40]	; 132c4 <__assert_fail@plt+0x77c>
   13298:	ldr	r0, [pc, #40]	; 132c8 <__assert_fail@plt+0x780>
   1329c:	bl	12b48 <__assert_fail@plt>
   132a0:	ldr	r3, [pc, #24]	; 132c0 <__assert_fail@plt+0x778>
   132a4:	mov	r2, #240	; 0xf0
   132a8:	ldr	r1, [pc, #20]	; 132c4 <__assert_fail@plt+0x77c>
   132ac:	ldr	r0, [pc, #24]	; 132cc <__assert_fail@plt+0x784>
   132b0:	bl	12b48 <__assert_fail@plt>
   132b4:	bl	124e8 <__stack_chk_fail@plt>
   132b8:	andeq	fp, r3, r0, lsl fp
   132bc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   132c0:	andeq	r7, r2, ip, asr #24
   132c4:	andeq	r7, r2, r4, ror #24
   132c8:	andeq	r7, r2, ip, lsr #25
   132cc:	andeq	r7, r2, ip, ror ip
   132d0:	sub	r0, r0, #1
   132d4:	cmp	r0, #40	; 0x28
   132d8:	ldrls	pc, [pc, r0, lsl #2]
   132dc:	b	133cc <__assert_fail@plt+0x884>
   132e0:			; <UNDEFINED> instruction: 0x000133b4
   132e4:	andeq	r3, r1, ip, asr #7
   132e8:	andeq	r3, r1, ip, asr #7
   132ec:	andeq	r3, r1, ip, asr #7
   132f0:	andeq	r3, r1, ip, asr #7
   132f4:	andeq	r3, r1, ip, asr #7
   132f8:	andeq	r3, r1, ip, asr #7
   132fc:	andeq	r3, r1, ip, asr #7
   13300:	andeq	r3, r1, ip, asr #7
   13304:	andeq	r3, r1, ip, asr #7
   13308:	andeq	r3, r1, r4, lsl #7
   1330c:	andeq	r3, r1, ip, asr #7
   13310:	andeq	r3, r1, r4, asr #7
   13314:	andeq	r3, r1, ip, asr #7
   13318:	andeq	r3, r1, ip, asr #7
   1331c:	andeq	r3, r1, ip, asr #7
   13320:	andeq	r3, r1, ip, lsl #7
   13324:	andeq	r3, r1, ip, asr #7
   13328:	muleq	r1, r4, r3
   1332c:	andeq	r3, r1, ip, asr #7
   13330:	andeq	r3, r1, ip, asr #7
   13334:	andeq	r3, r1, ip, asr #7
   13338:	andeq	r3, r1, ip, asr #7
   1333c:	andeq	r3, r1, ip, asr #7
   13340:	andeq	r3, r1, ip, asr #7
   13344:	andeq	r3, r1, ip, asr #7
   13348:	andeq	r3, r1, ip, asr #7
   1334c:	andeq	r3, r1, ip, asr #7
   13350:	andeq	r3, r1, ip, asr #7
   13354:	andeq	r3, r1, ip, asr #7
   13358:	andeq	r3, r1, ip, asr #7
   1335c:	andeq	r3, r1, ip, asr #7
   13360:	andeq	r3, r1, ip, asr #7
   13364:	andeq	r3, r1, ip, asr #7
   13368:	andeq	r3, r1, ip, asr #7
   1336c:	andeq	r3, r1, ip, asr #7
   13370:	andeq	r3, r1, ip, asr #7
   13374:	andeq	r3, r1, ip, asr #7
   13378:	andeq	r3, r1, ip, asr #7
   1337c:			; <UNDEFINED> instruction: 0x000133b4
   13380:	andeq	r3, r1, r4, lsr #7
   13384:	ldr	r0, [pc, #72]	; 133d4 <__assert_fail@plt+0x88c>
   13388:	bx	lr
   1338c:	ldr	r0, [pc, #68]	; 133d8 <__assert_fail@plt+0x890>
   13390:	bx	lr
   13394:	mov	r2, #5
   13398:	ldr	r1, [pc, #60]	; 133dc <__assert_fail@plt+0x894>
   1339c:	mov	r0, #0
   133a0:	b	124dc <dcgettext@plt>
   133a4:	mov	r2, #5
   133a8:	ldr	r1, [pc, #48]	; 133e0 <__assert_fail@plt+0x898>
   133ac:	mov	r0, #0
   133b0:	b	124dc <dcgettext@plt>
   133b4:	mov	r2, #5
   133b8:	ldr	r1, [pc, #36]	; 133e4 <__assert_fail@plt+0x89c>
   133bc:	mov	r0, #0
   133c0:	b	124dc <dcgettext@plt>
   133c4:	ldr	r0, [pc, #28]	; 133e8 <__assert_fail@plt+0x8a0>
   133c8:	bx	lr
   133cc:	mov	r0, #0
   133d0:	bx	lr
   133d4:			; <UNDEFINED> instruction: 0x00027cb8
   133d8:	andeq	r7, r2, ip, asr #25
   133dc:	andeq	r7, r2, r0, ror #25
   133e0:	andeq	r7, r2, r0, asr #26
   133e4:	andeq	r7, r2, r4, lsl #26
   133e8:	ldrdeq	r7, [r2], -r8
   133ec:	ldr	r2, [pc, #84]	; 13448 <__assert_fail@plt+0x900>
   133f0:	ldr	r3, [r2]
   133f4:	cmp	r3, r0
   133f8:	cmpne	r3, #0
   133fc:	beq	13410 <__assert_fail@plt+0x8c8>
   13400:	cmp	r3, #115	; 0x73
   13404:	cmpeq	r0, #101	; 0x65
   13408:	bne	13418 <__assert_fail@plt+0x8d0>
   1340c:	ldr	r0, [pc, #56]	; 1344c <__assert_fail@plt+0x904>
   13410:	str	r0, [r2]
   13414:	bx	lr
   13418:	cmp	r3, #101	; 0x65
   1341c:	cmpeq	r0, #115	; 0x73
   13420:	moveq	r0, #1
   13424:	movne	r0, #0
   13428:	beq	1340c <__assert_fail@plt+0x8c4>
   1342c:	push	{r4, lr}
   13430:	mov	r2, #5
   13434:	ldr	r1, [pc, #20]	; 13450 <__assert_fail@plt+0x908>
   13438:	bl	124dc <dcgettext@plt>
   1343c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13440:	mov	r0, #2
   13444:	bl	12764 <exit@plt>
   13448:	andeq	ip, r3, ip, lsl #5
   1344c:	strdeq	r0, [r0], -r5
   13450:	muleq	r2, r8, sp
   13454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13458:	mov	r4, r0
   1345c:	ldr	r9, [pc, #808]	; 1378c <__assert_fail@plt+0xc44>
   13460:	ldr	r7, [pc, #808]	; 13790 <__assert_fail@plt+0xc48>
   13464:	ldr	r8, [pc, #808]	; 13794 <__assert_fail@plt+0xc4c>
   13468:	ldr	fp, [pc, #808]	; 13798 <__assert_fail@plt+0xc50>
   1346c:	ldr	sl, [pc, #808]	; 1379c <__assert_fail@plt+0xc54>
   13470:	sub	sp, sp, #84	; 0x54
   13474:	ldr	r3, [r9]
   13478:	mov	r6, r1
   1347c:	str	r3, [sp, #76]	; 0x4c
   13480:	ldr	r5, [pc, #792]	; 137a0 <__assert_fail@plt+0xc58>
   13484:	mov	r2, #0
   13488:	str	r6, [sp]
   1348c:	mov	r1, r2
   13490:	mov	r0, r2
   13494:	mov	r3, r4
   13498:	bl	1a8fc <__assert_fail@plt+0x7db4>
   1349c:	cmp	r0, #0
   134a0:	beq	13754 <__assert_fail@plt+0xc0c>
   134a4:	ldr	r0, [r4, #16]
   134a8:	cmp	r0, #118	; 0x76
   134ac:	beq	136e8 <__assert_fail@plt+0xba0>
   134b0:	ble	13500 <__assert_fail@plt+0x9b8>
   134b4:	cmp	r0, r7
   134b8:	beq	13728 <__assert_fail@plt+0xbe0>
   134bc:	ble	1357c <__assert_fail@plt+0xa34>
   134c0:	ldr	r3, [pc, #732]	; 137a4 <__assert_fail@plt+0xc5c>
   134c4:	cmp	r0, r3
   134c8:	beq	135f8 <__assert_fail@plt+0xab0>
   134cc:	ble	13538 <__assert_fail@plt+0x9f0>
   134d0:	cmp	r0, #600	; 0x258
   134d4:	beq	136d0 <__assert_fail@plt+0xb88>
   134d8:	ldr	r3, [pc, #712]	; 137a8 <__assert_fail@plt+0xc60>
   134dc:	cmp	r0, r3
   134e0:	beq	136b8 <__assert_fail@plt+0xb70>
   134e4:	sub	r3, r3, #91	; 0x5b
   134e8:	cmp	r0, r3
   134ec:	beq	136ac <__assert_fail@plt+0xb64>
   134f0:	mov	r3, #2
   134f4:	str	r3, [r4, #12]
   134f8:	ldr	r5, [pc, #672]	; 137a0 <__assert_fail@plt+0xc58>
   134fc:	b	13484 <__assert_fail@plt+0x93c>
   13500:	cmp	r0, #111	; 0x6f
   13504:	beq	136f8 <__assert_fail@plt+0xbb0>
   13508:	bgt	135c0 <__assert_fail@plt+0xa78>
   1350c:	cmp	r0, #99	; 0x63
   13510:	beq	13704 <__assert_fail@plt+0xbbc>
   13514:	bgt	135b0 <__assert_fail@plt+0xa68>
   13518:	cmp	r0, #67	; 0x43
   1351c:	beq	13694 <__assert_fail@plt+0xb4c>
   13520:	cmp	r0, #84	; 0x54
   13524:	bne	134f0 <__assert_fail@plt+0x9a8>
   13528:	ldr	r3, [pc, #636]	; 137ac <__assert_fail@plt+0xc64>
   1352c:	ldr	r2, [r4, #24]
   13530:	str	r2, [r3, #4]
   13534:	b	13480 <__assert_fail@plt+0x938>
   13538:	sub	r3, r3, #2
   1353c:	cmp	r0, r3
   13540:	beq	13734 <__assert_fail@plt+0xbec>
   13544:	cmp	r0, #508	; 0x1fc
   13548:	bne	134f0 <__assert_fail@plt+0x9a8>
   1354c:	add	r1, sp, #20
   13550:	ldr	r0, [r4, #24]
   13554:	bl	13094 <__assert_fail@plt+0x54c>
   13558:	cmp	r0, #0
   1355c:	bne	1376c <__assert_fail@plt+0xc24>
   13560:	ldr	r0, [r8, #20]
   13564:	cmp	r0, #0
   13568:	beq	1377c <__assert_fail@plt+0xc34>
   1356c:	bl	182d8 <__assert_fail@plt+0x5790>
   13570:	ldr	r3, [sp, #20]
   13574:	str	r3, [r0]
   13578:	b	13480 <__assert_fail@plt+0x938>
   1357c:	cmp	r0, r5
   13580:	beq	13718 <__assert_fail@plt+0xbd0>
   13584:	bgt	13484 <__assert_fail@plt+0x93c>
   13588:	cmp	r0, #500	; 0x1f4
   1358c:	moveq	r3, #0
   13590:	streq	r3, [r8]
   13594:	beq	13480 <__assert_fail@plt+0x938>
   13598:	ldr	r3, [pc, #528]	; 137b0 <__assert_fail@plt+0xc68>
   1359c:	cmp	r0, r3
   135a0:	bne	134f0 <__assert_fail@plt+0x9a8>
   135a4:	ldr	r3, [r4, #24]
   135a8:	str	r3, [r8, #16]
   135ac:	b	13480 <__assert_fail@plt+0x938>
   135b0:	cmp	r0, #101	; 0x65
   135b4:	bgt	134f0 <__assert_fail@plt+0x9a8>
   135b8:	bl	133ec <__assert_fail@plt+0x8a4>
   135bc:	b	13480 <__assert_fail@plt+0x938>
   135c0:	cmp	r0, #116	; 0x74
   135c4:	bgt	136a0 <__assert_fail@plt+0xb58>
   135c8:	cmp	r0, #115	; 0x73
   135cc:	bge	135b8 <__assert_fail@plt+0xa70>
   135d0:	cmp	r0, #113	; 0x71
   135d4:	moveq	r3, #1
   135d8:	streq	r3, [r8, #8]
   135dc:	beq	13480 <__assert_fail@plt+0x938>
   135e0:	cmp	r0, #114	; 0x72
   135e4:	bne	134f0 <__assert_fail@plt+0x9a8>
   135e8:	ldr	r1, [r4, #24]
   135ec:	ldr	r0, [pc, #448]	; 137b4 <__assert_fail@plt+0xc6c>
   135f0:	bl	18030 <__assert_fail@plt+0x54e8>
   135f4:	b	13480 <__assert_fail@plt+0x938>
   135f8:	add	r1, sp, #20
   135fc:	ldr	r0, [r4, #24]
   13600:	bl	13094 <__assert_fail@plt+0x54c>
   13604:	cmp	r0, #0
   13608:	bne	13744 <__assert_fail@plt+0xbfc>
   1360c:	ldr	r0, [sp, #20]
   13610:	bl	18380 <__assert_fail@plt+0x5838>
   13614:	mov	r1, #4
   13618:	str	r0, [sp, #12]
   1361c:	bl	12860 <gcry_calloc@plt>
   13620:	cmp	r0, #0
   13624:	str	r0, [sp, #16]
   13628:	beq	13744 <__assert_fail@plt+0xbfc>
   1362c:	ldr	r3, [sp, #20]
   13630:	cmp	r3, #0
   13634:	beq	13650 <__assert_fail@plt+0xb08>
   13638:	sub	r0, r0, #4
   1363c:	add	r2, r3, #8
   13640:	ldr	r3, [r3]
   13644:	str	r2, [r0, #4]!
   13648:	cmp	r3, #0
   1364c:	bne	1363c <__assert_fail@plt+0xaf4>
   13650:	add	r3, sp, #12
   13654:	add	r2, sp, #16
   13658:	str	r3, [sp, #20]
   1365c:	add	r0, sp, #20
   13660:	mov	r3, #16
   13664:	mov	r1, fp
   13668:	str	r3, [sp, #28]
   1366c:	str	r2, [sp, #24]
   13670:	bl	13454 <__assert_fail@plt+0x90c>
   13674:	ldr	r3, [sp, #32]
   13678:	cmp	r3, #0
   1367c:	beq	134f4 <__assert_fail@plt+0x9ac>
   13680:	ldr	r1, [r4, #24]
   13684:	ldr	r0, [pc, #300]	; 137b8 <__assert_fail@plt+0xc70>
   13688:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1368c:	ldr	r3, [sp, #32]
   13690:	b	134f4 <__assert_fail@plt+0x9ac>
   13694:	ldr	r3, [r4, #24]
   13698:	str	r3, [r8, #44]	; 0x2c
   1369c:	b	13480 <__assert_fail@plt+0x938>
   136a0:	ldr	r3, [r4, #24]
   136a4:	str	r3, [r8, #32]
   136a8:	b	13480 <__assert_fail@plt+0x938>
   136ac:	mov	r3, #1
   136b0:	str	r3, [r8, #12]
   136b4:	b	13480 <__assert_fail@plt+0x938>
   136b8:	mov	r0, #100	; 0x64
   136bc:	bl	133ec <__assert_fail@plt+0x8a4>
   136c0:	ldr	r3, [pc, #228]	; 137ac <__assert_fail@plt+0xc64>
   136c4:	mov	r2, #1
   136c8:	str	r2, [r3, #12]
   136cc:	b	13480 <__assert_fail@plt+0x938>
   136d0:	mov	r0, #101	; 0x65
   136d4:	bl	133ec <__assert_fail@plt+0x8a4>
   136d8:	ldr	r3, [pc, #204]	; 137ac <__assert_fail@plt+0xc64>
   136dc:	mov	r2, #1
   136e0:	str	r2, [r3, #12]
   136e4:	b	13480 <__assert_fail@plt+0x938>
   136e8:	ldr	r3, [r8]
   136ec:	add	r3, r3, #1
   136f0:	str	r3, [r8]
   136f4:	b	13480 <__assert_fail@plt+0x938>
   136f8:	ldr	r3, [r4, #24]
   136fc:	str	r3, [r8, #24]
   13700:	b	13480 <__assert_fail@plt+0x938>
   13704:	mov	r0, #101	; 0x65
   13708:	bl	133ec <__assert_fail@plt+0x8a4>
   1370c:	mov	r3, #1
   13710:	str	r3, [r8, #36]	; 0x24
   13714:	b	13480 <__assert_fail@plt+0x938>
   13718:	ldr	r3, [pc, #140]	; 137ac <__assert_fail@plt+0xc64>
   1371c:	mov	r2, #1
   13720:	str	r2, [r3, #12]
   13724:	b	13480 <__assert_fail@plt+0x938>
   13728:	ldr	r3, [r4, #24]
   1372c:	str	r3, [r8, #40]	; 0x28
   13730:	b	13480 <__assert_fail@plt+0x938>
   13734:	ldr	r3, [pc, #112]	; 137ac <__assert_fail@plt+0xc64>
   13738:	mov	r2, #1
   1373c:	str	r2, [r3, #8]
   13740:	b	13480 <__assert_fail@plt+0x938>
   13744:	ldr	r1, [r4, #24]
   13748:	mov	r0, sl
   1374c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13750:	b	13480 <__assert_fail@plt+0x938>
   13754:	ldr	r2, [sp, #76]	; 0x4c
   13758:	ldr	r3, [r9]
   1375c:	cmp	r2, r3
   13760:	bne	13788 <__assert_fail@plt+0xc40>
   13764:	add	sp, sp, #84	; 0x54
   13768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1376c:	ldr	r1, [r4, #24]
   13770:	ldr	r0, [pc, #68]	; 137bc <__assert_fail@plt+0xc74>
   13774:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13778:	b	13480 <__assert_fail@plt+0x938>
   1377c:	ldr	r3, [sp, #20]
   13780:	str	r3, [r8, #20]
   13784:	b	13480 <__assert_fail@plt+0x938>
   13788:	bl	124e8 <__stack_chk_fail@plt>
   1378c:	andeq	fp, r3, r0, lsl fp
   13790:	strdeq	r0, [r0], -sl
   13794:	andeq	ip, r3, ip, asr #10
   13798:	andeq	ip, r3, r8
   1379c:	ldrdeq	r7, [r2], -r4
   137a0:	strdeq	r0, [r0], -r7
   137a4:	strdeq	r0, [r0], -sp
   137a8:	andeq	r0, r0, r9, asr r2
   137ac:	andeq	ip, r3, ip, lsl #5
   137b0:	strdeq	r0, [r0], -r6
   137b4:	andeq	ip, r3, r8, ror #10
   137b8:	strdeq	r7, [r2], -r8
   137bc:			; <UNDEFINED> instruction: 0x00027db0
   137c0:	push	{r4, r5, r6, lr}
   137c4:	mov	r4, r0
   137c8:	mov	r3, r4
   137cc:	mov	r0, r1
   137d0:	mov	r2, #512	; 0x200
   137d4:	mov	r1, #1
   137d8:	bl	1259c <gpgrt_fread@plt>
   137dc:	cmp	r0, #512	; 0x200
   137e0:	moveq	r6, #0
   137e4:	bne	137f0 <__assert_fail@plt+0xca8>
   137e8:	mov	r0, r6
   137ec:	pop	{r4, r5, r6, pc}
   137f0:	mov	r5, r0
   137f4:	bl	127c4 <gpg_err_code_from_syserror@plt>
   137f8:	uxth	r6, r0
   137fc:	mov	r0, r4
   13800:	bl	12518 <gpgrt_ferror@plt>
   13804:	cmp	r0, #0
   13808:	mov	r0, r4
   1380c:	beq	13838 <__assert_fail@plt+0xcf0>
   13810:	bl	1244c <gpgrt_fname_get@plt>
   13814:	mov	r4, r0
   13818:	mov	r0, r6
   1381c:	bl	129d4 <gpg_strerror@plt>
   13820:	mov	r1, r4
   13824:	mov	r2, r0
   13828:	ldr	r0, [pc, #36]	; 13854 <__assert_fail@plt+0xd0c>
   1382c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13830:	mov	r0, r6
   13834:	pop	{r4, r5, r6, pc}
   13838:	bl	1244c <gpgrt_fname_get@plt>
   1383c:	mov	r2, r5
   13840:	mov	r1, r0
   13844:	ldr	r0, [pc, #12]	; 13858 <__assert_fail@plt+0xd10>
   13848:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1384c:	mov	r0, r6
   13850:	pop	{r4, r5, r6, pc}
   13854:	andeq	r7, r2, ip, lsr #31
   13858:	andeq	r7, r2, r4, asr #31
   1385c:	push	{r4, r5, r6, lr}
   13860:	mov	r4, r0
   13864:	mov	r3, r4
   13868:	mov	r0, r1
   1386c:	mov	r2, #512	; 0x200
   13870:	mov	r1, #1
   13874:	bl	124d0 <gpgrt_fwrite@plt>
   13878:	cmp	r0, #512	; 0x200
   1387c:	moveq	r5, #0
   13880:	beq	138b0 <__assert_fail@plt+0xd68>
   13884:	bl	127c4 <gpg_err_code_from_syserror@plt>
   13888:	uxth	r5, r0
   1388c:	mov	r0, r4
   13890:	bl	1244c <gpgrt_fname_get@plt>
   13894:	mov	r4, r0
   13898:	mov	r0, r5
   1389c:	bl	129d4 <gpg_strerror@plt>
   138a0:	mov	r1, r4
   138a4:	mov	r2, r0
   138a8:	ldr	r0, [pc, #8]	; 138b8 <__assert_fail@plt+0xd70>
   138ac:	bl	1c744 <__assert_fail@plt+0x9bfc>
   138b0:	mov	r0, r5
   138b4:	pop	{r4, r5, r6, pc}
   138b8:	andeq	r8, r2, r4
   138bc:	add	r0, r0, r1
   138c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138c4:	mov	r5, r3
   138c8:	sub	r7, r0, #1
   138cc:	sub	r8, r1, #1
   138d0:	mov	r3, #0
   138d4:	mov	r6, r1
   138d8:	strb	r3, [r0, #-1]
   138dc:	mov	r4, r2
   138e0:	mov	lr, r7
   138e4:	mov	ip, r8
   138e8:	mov	r0, r2
   138ec:	mov	r1, r5
   138f0:	b	13900 <__assert_fail@plt+0xdb8>
   138f4:	mov	r0, r2
   138f8:	mov	r1, r3
   138fc:	mov	ip, r9
   13900:	cmp	r1, #0
   13904:	cmpeq	r0, #7
   13908:	movhi	r2, #1
   1390c:	movls	r2, #0
   13910:	subs	r9, ip, #1
   13914:	moveq	r2, #0
   13918:	and	r3, r0, #7
   1391c:	add	r3, r3, #48	; 0x30
   13920:	cmp	r2, #0
   13924:	lsr	r2, r0, #3
   13928:	strb	r3, [lr, #-1]!
   1392c:	orr	r2, r2, r1, lsl #29
   13930:	lsr	r3, r1, #3
   13934:	bne	138f4 <__assert_fail@plt+0xdac>
   13938:	cmp	r1, #0
   1393c:	cmpeq	r0, #7
   13940:	bhi	1397c <__assert_fail@plt+0xe34>
   13944:	cmp	r9, #0
   13948:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1394c:	rsb	ip, ip, #1
   13950:	add	ip, lr, ip
   13954:	mov	r3, #48	; 0x30
   13958:	strb	r3, [lr, #-1]!
   1395c:	cmp	ip, lr
   13960:	bne	13958 <__assert_fail@plt+0xe10>
   13964:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13968:	mov	r6, r8
   1396c:	mov	r4, r2
   13970:	mov	r5, ip
   13974:	sub	r7, r7, #1
   13978:	sub	r8, r8, #1
   1397c:	cmp	r5, #0
   13980:	cmpeq	r4, #255	; 0xff
   13984:	movhi	r3, #1
   13988:	movls	r3, #0
   1398c:	cmp	r8, #0
   13990:	moveq	r3, #0
   13994:	uxtb	r1, r4
   13998:	lsr	r2, r4, #8
   1399c:	cmp	r3, #0
   139a0:	strb	r1, [r7]
   139a4:	orr	r2, r2, r5, lsl #24
   139a8:	mov	r0, r7
   139ac:	lsr	ip, r5, #8
   139b0:	bne	13968 <__assert_fail@plt+0xe20>
   139b4:	cmp	r5, #0
   139b8:	cmpeq	r4, #255	; 0xff
   139bc:	bhi	13a08 <__assert_fail@plt+0xec0>
   139c0:	cmp	r8, #0
   139c4:	beq	139e8 <__assert_fail@plt+0xea0>
   139c8:	rsb	r7, r6, #1
   139cc:	add	r7, r0, r7
   139d0:	strb	r3, [r0, #-1]!
   139d4:	cmp	r7, r0
   139d8:	bne	139d0 <__assert_fail@plt+0xe88>
   139dc:	mov	r1, #128	; 0x80
   139e0:	strb	r1, [r7]
   139e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139e8:	sxtb	r4, r4
   139ec:	cmp	r4, #0
   139f0:	orrge	r1, r1, #128	; 0x80
   139f4:	bge	139e0 <__assert_fail@plt+0xe98>
   139f8:	ldr	r2, [pc, #24]	; 13a18 <__assert_fail@plt+0xed0>
   139fc:	ldr	r1, [pc, #24]	; 13a1c <__assert_fail@plt+0xed4>
   13a00:	ldr	r0, [pc, #24]	; 13a20 <__assert_fail@plt+0xed8>
   13a04:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   13a08:	ldr	r2, [pc, #8]	; 13a18 <__assert_fail@plt+0xed0>
   13a0c:	ldr	r1, [pc, #16]	; 13a24 <__assert_fail@plt+0xedc>
   13a10:	ldr	r0, [pc, #8]	; 13a20 <__assert_fail@plt+0xed8>
   13a14:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   13a18:	strdeq	r8, [r2], -r0
   13a1c:	andeq	r0, r0, pc, ror #3
   13a20:	andeq	r8, r2, ip, lsl r3
   13a24:	strdeq	r0, [r0], -r3
   13a28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a2c:	sub	sp, sp, #112	; 0x70
   13a30:	ldr	r6, [pc, #708]	; 13cfc <__assert_fail@plt+0x11b4>
   13a34:	mov	r8, r1
   13a38:	mov	r7, r2
   13a3c:	ldr	r3, [r6]
   13a40:	mov	sl, r0
   13a44:	str	r3, [sp, #108]	; 0x6c
   13a48:	bl	12788 <strlen@plt>
   13a4c:	subs	r5, r0, #0
   13a50:	beq	13ce4 <__assert_fail@plt+0x119c>
   13a54:	cmp	r8, #0
   13a58:	add	r4, r5, #66	; 0x42
   13a5c:	beq	13c30 <__assert_fail@plt+0x10e8>
   13a60:	mov	r0, r8
   13a64:	bl	12788 <strlen@plt>
   13a68:	add	r1, r0, r4
   13a6c:	mov	r0, #1
   13a70:	bl	12860 <gcry_calloc@plt>
   13a74:	subs	r4, r0, #0
   13a78:	beq	13c80 <__assert_fail@plt+0x1138>
   13a7c:	add	r9, r4, #56	; 0x38
   13a80:	mov	r1, sl
   13a84:	mov	r0, r9
   13a88:	bl	124c4 <stpcpy@plt>
   13a8c:	add	r5, sl, r5
   13a90:	mov	r1, r8
   13a94:	ldrb	r3, [r5, #-1]
   13a98:	cmp	r3, #47	; 0x2f
   13a9c:	movne	r3, #47	; 0x2f
   13aa0:	strbne	r3, [r0], #1
   13aa4:	bl	12620 <strcpy@plt>
   13aa8:	mov	r2, sp
   13aac:	mov	r1, r9
   13ab0:	mov	r0, #3
   13ab4:	bl	12b00 <__lxstat64@plt>
   13ab8:	cmp	r0, #0
   13abc:	bne	13c8c <__assert_fail@plt+0x1144>
   13ac0:	ldr	r3, [sp, #16]
   13ac4:	and	r2, r3, #61440	; 0xf000
   13ac8:	cmp	r2, #32768	; 0x8000
   13acc:	beq	13b28 <__assert_fail@plt+0xfe0>
   13ad0:	cmp	r2, #16384	; 0x4000
   13ad4:	beq	13b24 <__assert_fail@plt+0xfdc>
   13ad8:	cmp	r2, #8192	; 0x2000
   13adc:	moveq	r0, #3
   13ae0:	streq	r0, [r4, #40]	; 0x28
   13ae4:	beq	13b2c <__assert_fail@plt+0xfe4>
   13ae8:	cmp	r2, #24576	; 0x6000
   13aec:	moveq	r0, #4
   13af0:	streq	r0, [r4, #40]	; 0x28
   13af4:	beq	13b2c <__assert_fail@plt+0xfe4>
   13af8:	cmp	r2, #4096	; 0x1000
   13afc:	moveq	r0, #6
   13b00:	streq	r0, [r4, #40]	; 0x28
   13b04:	beq	13b2c <__assert_fail@plt+0xfe4>
   13b08:	cmp	r2, #40960	; 0xa000
   13b0c:	movne	r2, #9
   13b10:	moveq	r0, #2
   13b14:	streq	r0, [r4, #40]	; 0x28
   13b18:	movne	r0, r2
   13b1c:	strne	r2, [r4, #40]	; 0x28
   13b20:	b	13b2c <__assert_fail@plt+0xfe4>
   13b24:	mov	r0, #5
   13b28:	str	r0, [r4, #40]	; 0x28
   13b2c:	tst	r3, #256	; 0x100
   13b30:	ldr	r1, [sp, #20]
   13b34:	ldrne	r2, [r4, #4]
   13b38:	str	r1, [r4, #8]
   13b3c:	orrne	r2, r2, #256	; 0x100
   13b40:	strne	r2, [r4, #4]
   13b44:	tst	r3, #128	; 0x80
   13b48:	ldrne	r2, [r4, #4]
   13b4c:	orrne	r2, r2, #128	; 0x80
   13b50:	strne	r2, [r4, #4]
   13b54:	tst	r3, #64	; 0x40
   13b58:	ldrne	r2, [r4, #4]
   13b5c:	orrne	r2, r2, #64	; 0x40
   13b60:	strne	r2, [r4, #4]
   13b64:	tst	r3, #32
   13b68:	ldrne	r2, [r4, #4]
   13b6c:	orrne	r2, r2, #32
   13b70:	strne	r2, [r4, #4]
   13b74:	tst	r3, #16
   13b78:	ldrne	r2, [r4, #4]
   13b7c:	orrne	r2, r2, #16
   13b80:	strne	r2, [r4, #4]
   13b84:	tst	r3, #8
   13b88:	ldrne	r2, [r4, #4]
   13b8c:	orrne	r2, r2, #8
   13b90:	strne	r2, [r4, #4]
   13b94:	tst	r3, #4
   13b98:	ldrne	r2, [r4, #4]
   13b9c:	orrne	r2, r2, #4
   13ba0:	strne	r2, [r4, #4]
   13ba4:	tst	r3, #2
   13ba8:	ldrne	r2, [r4, #4]
   13bac:	orrne	r2, r2, #2
   13bb0:	strne	r2, [r4, #4]
   13bb4:	tst	r3, #1
   13bb8:	ldrne	r2, [r4, #4]
   13bbc:	orrne	r2, r2, #1
   13bc0:	strne	r2, [r4, #4]
   13bc4:	tst	r3, #512	; 0x200
   13bc8:	ldr	r2, [sp, #24]
   13bcc:	ldrne	r3, [r4, #4]
   13bd0:	orrne	r3, r3, #512	; 0x200
   13bd4:	strne	r3, [r4, #4]
   13bd8:	ldr	r3, [sp, #28]
   13bdc:	cmp	r0, #0
   13be0:	strd	r2, [r4, #12]
   13be4:	ldrdeq	r2, [sp, #48]	; 0x30
   13be8:	strdeq	r2, [r4, #24]
   13bec:	ldr	r2, [sp, #80]	; 0x50
   13bf0:	asr	r3, r2, #31
   13bf4:	strd	r2, [r4, #32]
   13bf8:	ldr	r3, [pc, #256]	; 13d00 <__assert_fail@plt+0x11b8>
   13bfc:	ldr	r3, [r3]
   13c00:	cmp	r3, #0
   13c04:	bne	13c6c <__assert_fail@plt+0x1124>
   13c08:	ldr	r3, [r7]
   13c0c:	mov	r0, #0
   13c10:	str	r4, [r3]
   13c14:	str	r4, [r7]
   13c18:	ldr	r2, [sp, #108]	; 0x6c
   13c1c:	ldr	r3, [r6]
   13c20:	cmp	r2, r3
   13c24:	bne	13cf8 <__assert_fail@plt+0x11b0>
   13c28:	add	sp, sp, #112	; 0x70
   13c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c30:	mov	r1, r4
   13c34:	mov	r0, #1
   13c38:	bl	12860 <gcry_calloc@plt>
   13c3c:	subs	r4, r0, #0
   13c40:	beq	13c80 <__assert_fail@plt+0x1138>
   13c44:	sub	r5, r5, #1
   13c48:	add	r9, r4, #56	; 0x38
   13c4c:	add	r5, r4, r5
   13c50:	mov	r1, sl
   13c54:	mov	r0, r9
   13c58:	bl	12620 <strcpy@plt>
   13c5c:	ldrb	r3, [r5, #56]	; 0x38
   13c60:	cmp	r3, #47	; 0x2f
   13c64:	strbeq	r8, [r5, #56]	; 0x38
   13c68:	b	13aa8 <__assert_fail@plt+0xf60>
   13c6c:	bl	1c5dc <__assert_fail@plt+0x9a94>
   13c70:	mov	r1, r0
   13c74:	mov	r0, r4
   13c78:	bl	160f4 <__assert_fail@plt+0x35ac>
   13c7c:	b	13c08 <__assert_fail@plt+0x10c0>
   13c80:	bl	127c4 <gpg_err_code_from_syserror@plt>
   13c84:	uxth	r0, r0
   13c88:	b	13c18 <__assert_fail@plt+0x10d0>
   13c8c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   13c90:	subs	r5, r0, #0
   13c94:	bne	13cb0 <__assert_fail@plt+0x1168>
   13c98:	bl	129d4 <gpg_strerror@plt>
   13c9c:	mov	r1, r9
   13ca0:	mov	r2, r0
   13ca4:	ldr	r0, [pc, #88]	; 13d04 <__assert_fail@plt+0x11bc>
   13ca8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13cac:	b	13bf8 <__assert_fail@plt+0x10b0>
   13cb0:	uxth	r5, r5
   13cb4:	mov	r0, r5
   13cb8:	bl	129d4 <gpg_strerror@plt>
   13cbc:	mov	r1, r9
   13cc0:	mov	r2, r0
   13cc4:	ldr	r0, [pc, #56]	; 13d04 <__assert_fail@plt+0x11bc>
   13cc8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13ccc:	cmp	r5, #0
   13cd0:	beq	13bf8 <__assert_fail@plt+0x10b0>
   13cd4:	mov	r0, r4
   13cd8:	bl	124a0 <gcry_free@plt>
   13cdc:	mov	r0, #0
   13ce0:	b	13c18 <__assert_fail@plt+0x10d0>
   13ce4:	ldr	r3, [pc, #28]	; 13d08 <__assert_fail@plt+0x11c0>
   13ce8:	mov	r2, #228	; 0xe4
   13cec:	ldr	r1, [pc, #24]	; 13d0c <__assert_fail@plt+0x11c4>
   13cf0:	ldr	r0, [pc, #24]	; 13d10 <__assert_fail@plt+0x11c8>
   13cf4:	bl	12b48 <__assert_fail@plt>
   13cf8:	bl	124e8 <__stack_chk_fail@plt>
   13cfc:	andeq	fp, r3, r0, lsl fp
   13d00:	andeq	ip, r3, ip, asr #10
   13d04:	andeq	r8, r2, r4, asr #6
   13d08:	andeq	r8, r2, r0, lsl #6
   13d0c:	andeq	r8, r2, ip, lsl r3
   13d10:	andeq	r8, r2, r8, lsr r3
   13d14:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d18:	ldr	r3, [r1, #8]
   13d1c:	cmp	r3, #200	; 0xc8
   13d20:	bgt	13e50 <__assert_fail@plt+0x1308>
   13d24:	ldr	sl, [r1, #4]
   13d28:	add	r3, r3, #1
   13d2c:	cmp	sl, #0
   13d30:	mov	r5, r1
   13d34:	str	r3, [r1, #8]
   13d38:	beq	13e9c <__assert_fail@plt+0x1354>
   13d3c:	ldrb	r3, [r0]
   13d40:	mov	r9, r0
   13d44:	cmp	r3, #0
   13d48:	moveq	r6, sl
   13d4c:	bne	13dd4 <__assert_fail@plt+0x128c>
   13d50:	ldr	r4, [sl]
   13d54:	cmp	r4, #0
   13d58:	beq	13d94 <__assert_fail@plt+0x124c>
   13d5c:	ldr	r3, [r6]
   13d60:	cmp	r4, r3
   13d64:	beq	13d94 <__assert_fail@plt+0x124c>
   13d68:	ldr	r8, [pc, #320]	; 13eb0 <__assert_fail@plt+0x1368>
   13d6c:	ldr	r9, [pc, #320]	; 13eb4 <__assert_fail@plt+0x136c>
   13d70:	ldr	r3, [r4, #40]	; 0x28
   13d74:	cmp	r3, #5
   13d78:	beq	13da8 <__assert_fail@plt+0x1260>
   13d7c:	ldr	r4, [r4]
   13d80:	cmp	r4, #0
   13d84:	beq	13d94 <__assert_fail@plt+0x124c>
   13d88:	ldr	r3, [r6]
   13d8c:	cmp	r3, r4
   13d90:	bne	13d70 <__assert_fail@plt+0x1228>
   13d94:	ldr	r3, [r5, #8]
   13d98:	mov	r0, #0
   13d9c:	sub	r3, r3, #1
   13da0:	str	r3, [r5, #8]
   13da4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13da8:	ldr	r3, [r8]
   13dac:	add	r7, r4, #56	; 0x38
   13db0:	cmp	r3, #1
   13db4:	ble	13dc4 <__assert_fail@plt+0x127c>
   13db8:	mov	r1, r7
   13dbc:	mov	r0, r9
   13dc0:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   13dc4:	mov	r0, r7
   13dc8:	mov	r1, r5
   13dcc:	bl	13d14 <__assert_fail@plt+0x11cc>
   13dd0:	b	13d7c <__assert_fail@plt+0x1234>
   13dd4:	bl	1265c <opendir@plt>
   13dd8:	subs	r6, r0, #0
   13ddc:	beq	13e60 <__assert_fail@plt+0x1318>
   13de0:	ldr	r7, [pc, #208]	; 13eb8 <__assert_fail@plt+0x1370>
   13de4:	ldr	r8, [pc, #208]	; 13ebc <__assert_fail@plt+0x1374>
   13de8:	add	fp, r5, #4
   13dec:	mov	r0, r6
   13df0:	bl	129bc <readdir64@plt>
   13df4:	cmp	r0, #0
   13df8:	beq	13e40 <__assert_fail@plt+0x12f8>
   13dfc:	add	r4, r0, #19
   13e00:	mov	r0, r4
   13e04:	mov	r1, r7
   13e08:	bl	1238c <strcmp@plt>
   13e0c:	cmp	r0, #0
   13e10:	beq	13dec <__assert_fail@plt+0x12a4>
   13e14:	mov	r1, r8
   13e18:	mov	r0, r4
   13e1c:	bl	1238c <strcmp@plt>
   13e20:	cmp	r0, #0
   13e24:	beq	13dec <__assert_fail@plt+0x12a4>
   13e28:	mov	r1, r4
   13e2c:	mov	r2, fp
   13e30:	mov	r0, r9
   13e34:	bl	13a28 <__assert_fail@plt+0xee0>
   13e38:	cmp	r0, #0
   13e3c:	beq	13dec <__assert_fail@plt+0x12a4>
   13e40:	mov	r0, r6
   13e44:	bl	12b24 <closedir@plt>
   13e48:	ldr	r6, [r5, #4]
   13e4c:	b	13d50 <__assert_fail@plt+0x1208>
   13e50:	ldr	r0, [pc, #104]	; 13ec0 <__assert_fail@plt+0x1378>
   13e54:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13e58:	mov	r0, #33	; 0x21
   13e5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e60:	bl	127c4 <gpg_err_code_from_syserror@plt>
   13e64:	mov	r2, #5
   13e68:	ldr	r1, [pc, #84]	; 13ec4 <__assert_fail@plt+0x137c>
   13e6c:	mov	r7, r0
   13e70:	mov	r0, r6
   13e74:	bl	124dc <dcgettext@plt>
   13e78:	mov	r4, r0
   13e7c:	uxth	r0, r7
   13e80:	bl	129d4 <gpg_strerror@plt>
   13e84:	mov	r1, r9
   13e88:	mov	r2, r0
   13e8c:	mov	r0, r4
   13e90:	bl	1c744 <__assert_fail@plt+0x9bfc>
   13e94:	ldr	r6, [r5, #4]
   13e98:	b	13d50 <__assert_fail@plt+0x1208>
   13e9c:	ldr	r3, [pc, #36]	; 13ec8 <__assert_fail@plt+0x1380>
   13ea0:	ldr	r2, [pc, #36]	; 13ecc <__assert_fail@plt+0x1384>
   13ea4:	ldr	r1, [pc, #36]	; 13ed0 <__assert_fail@plt+0x1388>
   13ea8:	ldr	r0, [pc, #36]	; 13ed4 <__assert_fail@plt+0x138c>
   13eac:	bl	12b48 <__assert_fail@plt>
   13eb0:	andeq	ip, r3, ip, asr #10
   13eb4:	andeq	r8, r2, r0, asr #7
   13eb8:	andeq	r9, r2, r4
   13ebc:			; <UNDEFINED> instruction: 0x000283bc
   13ec0:	andeq	r8, r2, r0, ror #6
   13ec4:	muleq	r2, r8, r3
   13ec8:	andeq	r8, r2, ip, lsl #6
   13ecc:	muleq	r0, r6, r1
   13ed0:	andeq	r8, r2, ip, lsl r3
   13ed4:	andeq	r8, r2, r0, lsl #7
   13ed8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13edc:	sub	sp, sp, #4160	; 0x1040
   13ee0:	sub	sp, sp, #28
   13ee4:	ldr	r3, [pc, #3312]	; 14bdc <__assert_fail@plt+0x2094>
   13ee8:	str	r2, [sp, #36]	; 0x24
   13eec:	add	r2, sp, #4160	; 0x1040
   13ef0:	ldr	r3, [r3]
   13ef4:	add	r2, r2, #20
   13ef8:	subs	r5, r0, #0
   13efc:	str	r1, [sp, #32]
   13f00:	str	r3, [r2]
   13f04:	beq	149f0 <__assert_fail@plt+0x1ea8>
   13f08:	ldr	r8, [pc, #3280]	; 14be0 <__assert_fail@plt+0x2098>
   13f0c:	add	r9, sp, #56	; 0x38
   13f10:	mov	r3, #0
   13f14:	str	r3, [r9, #8]
   13f18:	str	r9, [sp, #60]	; 0x3c
   13f1c:	str	r3, [sp, #56]	; 0x38
   13f20:	cmp	r5, #0
   13f24:	ldreq	sl, [pc, #3256]	; 14be4 <__assert_fail@plt+0x209c>
   13f28:	beq	14148 <__assert_fail@plt+0x1600>
   13f2c:	ldr	r0, [r5]
   13f30:	cmp	r0, #0
   13f34:	beq	143b0 <__assert_fail@plt+0x1868>
   13f38:	ldrb	r3, [r0]
   13f3c:	add	r5, r5, #4
   13f40:	cmp	r3, #0
   13f44:	beq	13f20 <__assert_fail@plt+0x13d8>
   13f48:	bl	12b0c <gcry_strdup@plt>
   13f4c:	mov	r7, #0
   13f50:	mov	fp, r0
   13f54:	cmp	fp, #0
   13f58:	beq	14b10 <__assert_fail@plt+0x1fc8>
   13f5c:	ldrb	r3, [fp]
   13f60:	cmp	r3, #0
   13f64:	movne	r2, fp
   13f68:	movne	r1, #47	; 0x2f
   13f6c:	beq	140f4 <__assert_fail@plt+0x15ac>
   13f70:	cmp	r3, #92	; 0x5c
   13f74:	strbeq	r1, [r2]
   13f78:	ldrb	r3, [r2, #1]!
   13f7c:	cmp	r3, #0
   13f80:	bne	13f70 <__assert_fail@plt+0x1428>
   13f84:	ldr	r3, [r8]
   13f88:	mov	r4, r8
   13f8c:	cmp	r3, #1
   13f90:	bgt	14280 <__assert_fail@plt+0x1738>
   13f94:	ldrb	r3, [fp]
   13f98:	cmp	r3, #0
   13f9c:	beq	14104 <__assert_fail@plt+0x15bc>
   13fa0:	cmp	r3, #46	; 0x2e
   13fa4:	beq	142f0 <__assert_fail@plt+0x17a8>
   13fa8:	cmp	r3, #47	; 0x2f
   13fac:	beq	14104 <__assert_fail@plt+0x15bc>
   13fb0:	add	r2, sp, #88	; 0x58
   13fb4:	mov	r1, #0
   13fb8:	ldr	r6, [r2, #-28]!	; 0xffffffe4
   13fbc:	mov	r0, fp
   13fc0:	bl	13a28 <__assert_fail@plt+0xee0>
   13fc4:	cmp	r0, #0
   13fc8:	bne	13fe4 <__assert_fail@plt+0x149c>
   13fcc:	ldr	r3, [r6]
   13fd0:	cmp	r3, #0
   13fd4:	beq	13fe4 <__assert_fail@plt+0x149c>
   13fd8:	ldr	r3, [r3, #40]	; 0x28
   13fdc:	tst	r3, #5
   13fe0:	bne	14390 <__assert_fail@plt+0x1848>
   13fe4:	mov	r0, fp
   13fe8:	bl	124a0 <gcry_free@plt>
   13fec:	cmp	r7, #0
   13ff0:	beq	13f20 <__assert_fail@plt+0x13d8>
   13ff4:	str	r4, [sp, #28]
   13ff8:	ldr	r3, [sp, #28]
   13ffc:	ldr	r4, [r3, #24]
   14000:	cmp	r4, #0
   14004:	beq	14ad0 <__assert_fail@plt+0x1f88>
   14008:	ldr	r1, [pc, #3032]	; 14be8 <__assert_fail@plt+0x20a0>
   1400c:	mov	r0, r4
   14010:	bl	1238c <strcmp@plt>
   14014:	cmp	r0, #0
   14018:	beq	14380 <__assert_fail@plt+0x1838>
   1401c:	mov	r0, r4
   14020:	ldr	r1, [pc, #3012]	; 14bec <__assert_fail@plt+0x20a4>
   14024:	bl	128a8 <gpgrt_fopen@plt>
   14028:	mov	r5, r0
   1402c:	cmp	r5, #0
   14030:	beq	14b34 <__assert_fail@plt+0x1fec>
   14034:	mov	r0, #1
   14038:	bl	12740 <_gpgrt_get_std_stream@plt>
   1403c:	cmp	r5, r0
   14040:	beq	14ae0 <__assert_fail@plt+0x1f98>
   14044:	ldr	r3, [sp, #32]
   14048:	ldr	r2, [sp, #36]	; 0x24
   1404c:	orrs	r3, r3, r2
   14050:	str	r3, [sp, #52]	; 0x34
   14054:	ldreq	fp, [sp, #52]	; 0x34
   14058:	bne	14a60 <__assert_fail@plt+0x1f18>
   1405c:	ldr	r4, [sp, #56]	; 0x38
   14060:	cmp	r4, #0
   14064:	addeq	r7, sp, #84	; 0x54
   14068:	beq	14700 <__assert_fail@plt+0x1bb8>
   1406c:	ldr	r8, [pc, #2940]	; 14bf0 <__assert_fail@plt+0x20a8>
   14070:	str	fp, [sp, #24]
   14074:	add	r7, sp, #84	; 0x54
   14078:	mov	fp, r5
   1407c:	mov	r2, #512	; 0x200
   14080:	mov	r1, #0
   14084:	mov	r0, r7
   14088:	add	sl, r4, #56	; 0x38
   1408c:	bl	12854 <memset@plt>
   14090:	mov	r0, sl
   14094:	bl	12788 <strlen@plt>
   14098:	cmp	r0, #99	; 0x63
   1409c:	bls	148e8 <__assert_fail@plt+0x1da0>
   140a0:	cmp	r0, #155	; 0x9b
   140a4:	movcc	r5, r0
   140a8:	movcs	r5, #155	; 0x9b
   140ac:	add	r3, r5, #55	; 0x37
   140b0:	add	r3, r4, r3
   140b4:	sub	r5, r5, #1
   140b8:	ldrb	r2, [r3], #-1
   140bc:	cmp	r2, #47	; 0x2f
   140c0:	beq	143bc <__assert_fail@plt+0x1874>
   140c4:	subs	r5, r5, #1
   140c8:	bne	140b8 <__assert_fail@plt+0x1570>
   140cc:	mov	r0, #67	; 0x43
   140d0:	mov	r5, fp
   140d4:	ldr	fp, [sp, #24]
   140d8:	bl	129d4 <gpg_strerror@plt>
   140dc:	mov	r1, sl
   140e0:	mov	r6, #67	; 0x43
   140e4:	mov	r2, r0
   140e8:	ldr	r0, [pc, #2820]	; 14bf4 <__assert_fail@plt+0x20ac>
   140ec:	bl	1c744 <__assert_fail@plt+0x9bfc>
   140f0:	b	14310 <__assert_fail@plt+0x17c8>
   140f4:	ldr	r3, [r8]
   140f8:	mov	r4, r8
   140fc:	cmp	r3, #1
   14100:	bgt	14280 <__assert_fail@plt+0x1738>
   14104:	mov	r1, fp
   14108:	ldr	r0, [pc, #2792]	; 14bf8 <__assert_fail@plt+0x20b0>
   1410c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14110:	mov	r0, fp
   14114:	bl	124a0 <gcry_free@plt>
   14118:	cmp	r7, #0
   1411c:	beq	13f20 <__assert_fail@plt+0x13d8>
   14120:	b	13ff4 <__assert_fail@plt+0x14ac>
   14124:	add	r3, sp, #88	; 0x58
   14128:	cmp	r6, #1
   1412c:	orrls	fp, fp, #1
   14130:	add	r6, r3, r6
   14134:	cmp	fp, #0
   14138:	strb	r4, [r6, #-4]
   1413c:	beq	143a0 <__assert_fail@plt+0x1858>
   14140:	cmp	r7, #0
   14144:	bne	143b0 <__assert_fail@plt+0x1868>
   14148:	mov	r6, #0
   1414c:	mov	fp, r6
   14150:	mov	r7, r6
   14154:	b	14168 <__assert_fail@plt+0x1620>
   14158:	cmp	fp, #0
   1415c:	beq	14268 <__assert_fail@plt+0x1720>
   14160:	cmp	r4, #0
   14164:	beq	14124 <__assert_fail@plt+0x15dc>
   14168:	mov	r0, #0
   1416c:	bl	12740 <_gpgrt_get_std_stream@plt>
   14170:	bl	128c0 <gpgrt_fgetc@plt>
   14174:	cmn	r0, #1
   14178:	mov	r4, r0
   1417c:	beq	1419c <__assert_fail@plt+0x1654>
   14180:	cmp	r6, sl
   14184:	bhi	14158 <__assert_fail@plt+0x1610>
   14188:	add	r3, sp, #88	; 0x58
   1418c:	add	r3, r3, r6
   14190:	add	r6, r6, #1
   14194:	strb	r4, [r3, #-4]
   14198:	b	14160 <__assert_fail@plt+0x1618>
   1419c:	mov	r0, #0
   141a0:	bl	12740 <_gpgrt_get_std_stream@plt>
   141a4:	bl	12518 <gpgrt_ferror@plt>
   141a8:	subs	r4, r0, #0
   141ac:	beq	14300 <__assert_fail@plt+0x17b8>
   141b0:	bl	127c4 <gpg_err_code_from_syserror@plt>
   141b4:	mov	fp, #0
   141b8:	uxth	r6, r0
   141bc:	bl	1280c <__errno_location@plt>
   141c0:	ldr	r0, [r0]
   141c4:	bl	126c8 <strerror@plt>
   141c8:	ldr	r1, [pc, #2604]	; 14bfc <__assert_fail@plt+0x20b4>
   141cc:	mov	r2, r0
   141d0:	ldr	r0, [pc, #2600]	; 14c00 <__assert_fail@plt+0x20b8>
   141d4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   141d8:	cmp	r6, #0
   141dc:	bne	14308 <__assert_fail@plt+0x17c0>
   141e0:	mov	r0, #1
   141e4:	bl	12740 <_gpgrt_get_std_stream@plt>
   141e8:	cmp	r5, r0
   141ec:	beq	14a54 <__assert_fail@plt+0x1f0c>
   141f0:	mov	r0, r5
   141f4:	bl	12644 <gpgrt_fclose@plt>
   141f8:	mov	r6, r0
   141fc:	mov	r0, #1
   14200:	bl	12740 <_gpgrt_get_std_stream@plt>
   14204:	cmp	fp, r0
   14208:	beq	14a9c <__assert_fail@plt+0x1f54>
   1420c:	mov	r0, fp
   14210:	bl	12644 <gpgrt_fclose@plt>
   14214:	mov	r4, r0
   14218:	cmp	r4, #0
   1421c:	beq	14290 <__assert_fail@plt+0x1748>
   14220:	ldr	r3, [pc, #2488]	; 14be0 <__assert_fail@plt+0x2098>
   14224:	str	r3, [sp, #28]
   14228:	ldr	r5, [r3, #24]
   1422c:	cmp	r5, #0
   14230:	beq	14af0 <__assert_fail@plt+0x1fa8>
   14234:	mov	r0, r4
   14238:	bl	129d4 <gpg_strerror@plt>
   1423c:	mov	r1, r5
   14240:	mov	r6, r4
   14244:	mov	r2, r0
   14248:	ldr	r0, [pc, #2484]	; 14c04 <__assert_fail@plt+0x20bc>
   1424c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14250:	ldr	r3, [sp, #28]
   14254:	ldr	r0, [r3, #24]
   14258:	cmp	r0, #0
   1425c:	beq	14298 <__assert_fail@plt+0x1750>
   14260:	bl	1d364 <__assert_fail@plt+0xa81c>
   14264:	b	14298 <__assert_fail@plt+0x1750>
   14268:	ldr	r2, [pc, #2456]	; 14c08 <__assert_fail@plt+0x20c0>
   1426c:	ldr	r1, [pc, #2440]	; 14bfc <__assert_fail@plt+0x20b4>
   14270:	ldr	r0, [pc, #2440]	; 14c00 <__assert_fail@plt+0x20b8>
   14274:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14278:	mov	fp, #1
   1427c:	b	14160 <__assert_fail@plt+0x1618>
   14280:	mov	r1, fp
   14284:	ldr	r0, [pc, #2432]	; 14c0c <__assert_fail@plt+0x20c4>
   14288:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   1428c:	b	13f94 <__assert_fail@plt+0x144c>
   14290:	cmp	r6, #0
   14294:	bne	14b8c <__assert_fail@plt+0x2044>
   14298:	ldr	r0, [sp, #56]	; 0x38
   1429c:	mov	r3, #0
   142a0:	cmp	r0, r3
   142a4:	str	r3, [sp, #60]	; 0x3c
   142a8:	beq	142c4 <__assert_fail@plt+0x177c>
   142ac:	ldr	r3, [r0]
   142b0:	str	r3, [sp, #56]	; 0x38
   142b4:	bl	124a0 <gcry_free@plt>
   142b8:	ldr	r0, [sp, #56]	; 0x38
   142bc:	cmp	r0, #0
   142c0:	bne	142ac <__assert_fail@plt+0x1764>
   142c4:	add	r3, sp, #4160	; 0x1040
   142c8:	add	r3, r3, #20
   142cc:	ldr	r2, [r3]
   142d0:	ldr	r3, [pc, #2308]	; 14bdc <__assert_fail@plt+0x2094>
   142d4:	mov	r0, r6
   142d8:	ldr	r3, [r3]
   142dc:	cmp	r2, r3
   142e0:	bne	14bbc <__assert_fail@plt+0x2074>
   142e4:	add	sp, sp, #4160	; 0x1040
   142e8:	add	sp, sp, #28
   142ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f0:	ldrb	r3, [fp, #1]
   142f4:	cmp	r3, #46	; 0x2e
   142f8:	bne	13fb0 <__assert_fail@plt+0x1468>
   142fc:	b	14104 <__assert_fail@plt+0x15bc>
   14300:	mov	r7, #1
   14304:	b	14180 <__assert_fail@plt+0x1638>
   14308:	ldr	r3, [pc, #2256]	; 14be0 <__assert_fail@plt+0x2098>
   1430c:	str	r3, [sp, #28]
   14310:	ldr	r3, [sp, #28]
   14314:	mov	r0, r6
   14318:	ldr	r4, [r3, #24]
   1431c:	ldr	r3, [pc, #2244]	; 14be8 <__assert_fail@plt+0x20a0>
   14320:	cmp	r4, #0
   14324:	moveq	r4, r3
   14328:	bl	129d4 <gpg_strerror@plt>
   1432c:	mov	r1, r4
   14330:	mov	r2, r0
   14334:	ldr	r0, [pc, #2248]	; 14c04 <__assert_fail@plt+0x20bc>
   14338:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1433c:	cmp	r5, #0
   14340:	beq	1435c <__assert_fail@plt+0x1814>
   14344:	mov	r0, #1
   14348:	bl	12740 <_gpgrt_get_std_stream@plt>
   1434c:	cmp	r5, r0
   14350:	beq	1435c <__assert_fail@plt+0x1814>
   14354:	mov	r0, r5
   14358:	bl	12644 <gpgrt_fclose@plt>
   1435c:	cmp	fp, #0
   14360:	beq	14250 <__assert_fail@plt+0x1708>
   14364:	mov	r0, #1
   14368:	bl	12740 <_gpgrt_get_std_stream@plt>
   1436c:	cmp	fp, r0
   14370:	beq	14250 <__assert_fail@plt+0x1708>
   14374:	mov	r0, fp
   14378:	bl	12644 <gpgrt_fclose@plt>
   1437c:	b	14250 <__assert_fail@plt+0x1708>
   14380:	mov	r0, #1
   14384:	bl	12740 <_gpgrt_get_std_stream@plt>
   14388:	mov	r5, r0
   1438c:	b	1402c <__assert_fail@plt+0x14e4>
   14390:	mov	r1, r9
   14394:	mov	r0, fp
   14398:	bl	13d14 <__assert_fail@plt+0x11cc>
   1439c:	b	13fe4 <__assert_fail@plt+0x149c>
   143a0:	add	r0, sp, #84	; 0x54
   143a4:	bl	12b0c <gcry_strdup@plt>
   143a8:	mov	fp, r0
   143ac:	b	13f54 <__assert_fail@plt+0x140c>
   143b0:	ldr	r3, [pc, #2088]	; 14be0 <__assert_fail@plt+0x2098>
   143b4:	str	r3, [sp, #28]
   143b8:	b	13ff8 <__assert_fail@plt+0x14b0>
   143bc:	sub	r6, r0, r5
   143c0:	cmp	r6, #99	; 0x63
   143c4:	bhi	140cc <__assert_fail@plt+0x1584>
   143c8:	add	r0, sp, #428	; 0x1ac
   143cc:	mov	r3, #167	; 0xa7
   143d0:	mov	r2, r5
   143d4:	mov	r1, sl
   143d8:	add	r0, r0, #1
   143dc:	bl	125cc <__memcpy_chk@plt>
   143e0:	add	r1, r5, #1
   143e4:	add	r1, sl, r1
   143e8:	mov	r2, r6
   143ec:	mov	r3, #512	; 0x200
   143f0:	mov	r0, r7
   143f4:	bl	125cc <__memcpy_chk@plt>
   143f8:	ldr	r2, [r4, #4]
   143fc:	mov	r3, #0
   14400:	mov	r1, #8
   14404:	add	r0, sp, #184	; 0xb8
   14408:	bl	138bc <__assert_fail@plt+0xd74>
   1440c:	ldr	r2, [r4, #12]
   14410:	mov	r3, #0
   14414:	mov	r1, #8
   14418:	add	r0, sp, #192	; 0xc0
   1441c:	bl	138bc <__assert_fail@plt+0xd74>
   14420:	ldr	r2, [r4, #16]
   14424:	mov	r3, #0
   14428:	mov	r1, #8
   1442c:	add	r0, sp, #200	; 0xc8
   14430:	bl	138bc <__assert_fail@plt+0xd74>
   14434:	ldrd	r2, [r4, #24]
   14438:	mov	r1, #12
   1443c:	add	r0, sp, #208	; 0xd0
   14440:	bl	138bc <__assert_fail@plt+0xd74>
   14444:	ldrd	r2, [r4, #32]
   14448:	mov	r1, #12
   1444c:	add	r0, sp, #220	; 0xdc
   14450:	bl	138bc <__assert_fail@plt+0xd74>
   14454:	ldr	r3, [r4, #40]	; 0x28
   14458:	cmp	r3, #6
   1445c:	ldrls	pc, [pc, r3, lsl #2]
   14460:	b	149e0 <__assert_fail@plt+0x1e98>
   14464:	ldrdeq	r4, [r1], -ip
   14468:	ldrdeq	r4, [r1], -r0
   1446c:	andeq	r4, r1, r4, asr #17
   14470:			; <UNDEFINED> instruction: 0x000148b8
   14474:	andeq	r4, r1, r0, lsr #17
   14478:	andeq	r4, r1, ip, lsr #17
   1447c:	andeq	r4, r1, r0, lsl #9
   14480:	mov	r3, #54	; 0x36
   14484:	strb	r3, [sp, #240]	; 0xf0
   14488:	ldr	r0, [pc, #1920]	; 14c10 <__assert_fail@plt+0x20c8>
   1448c:	add	r3, sp, #88	; 0x58
   14490:	add	r3, r3, #253	; 0xfd
   14494:	ldrh	r2, [r0, #4]
   14498:	ldr	r1, [r8]
   1449c:	ldr	r0, [r0]
   144a0:	strh	r2, [r3, #4]
   144a4:	cmp	r1, #0
   144a8:	mov	r3, #48	; 0x30
   144ac:	str	r0, [sp, #341]	; 0x155
   144b0:	strb	r3, [sp, #347]	; 0x15b
   144b4:	strb	r3, [sp, #348]	; 0x15c
   144b8:	ldr	r5, [r4, #12]
   144bc:	beq	144cc <__assert_fail@plt+0x1984>
   144c0:	ldr	r3, [r8, #4]
   144c4:	cmp	r5, r3
   144c8:	beq	144f4 <__assert_fail@plt+0x19ac>
   144cc:	mov	r0, r5
   144d0:	bl	123bc <getpwuid@plt>
   144d4:	mov	r3, #1
   144d8:	stm	r8, {r3, r5}
   144dc:	subs	r6, r0, #0
   144e0:	beq	14994 <__assert_fail@plt+0x1e4c>
   144e4:	ldr	r1, [r6]
   144e8:	mov	r2, #32
   144ec:	ldr	r0, [pc, #1824]	; 14c14 <__assert_fail@plt+0x20cc>
   144f0:	bl	16f50 <__assert_fail@plt+0x4408>
   144f4:	add	r0, sp, #348	; 0x15c
   144f8:	add	r0, r0, #1
   144fc:	mov	r2, #32
   14500:	ldr	r1, [pc, #1804]	; 14c14 <__assert_fail@plt+0x20cc>
   14504:	bl	16f50 <__assert_fail@plt+0x4408>
   14508:	ldr	r3, [r8, #40]	; 0x28
   1450c:	ldr	r5, [r4, #16]
   14510:	cmp	r3, #0
   14514:	beq	14524 <__assert_fail@plt+0x19dc>
   14518:	ldr	r3, [r8, #44]	; 0x2c
   1451c:	cmp	r5, r3
   14520:	beq	14550 <__assert_fail@plt+0x1a08>
   14524:	mov	r0, r5
   14528:	bl	12b30 <getgrgid@plt>
   1452c:	mov	r3, #1
   14530:	str	r5, [r8, #44]	; 0x2c
   14534:	str	r3, [r8, #40]	; 0x28
   14538:	subs	r6, r0, #0
   1453c:	beq	149a8 <__assert_fail@plt+0x1e60>
   14540:	ldr	r1, [r6]
   14544:	mov	r2, #32
   14548:	ldr	r0, [pc, #1736]	; 14c18 <__assert_fail@plt+0x20d0>
   1454c:	bl	16f50 <__assert_fail@plt+0x4408>
   14550:	add	r0, sp, #380	; 0x17c
   14554:	add	r0, r0, #1
   14558:	mov	r2, #32
   1455c:	ldr	r1, [pc, #1716]	; 14c18 <__assert_fail@plt+0x20d0>
   14560:	bl	16f50 <__assert_fail@plt+0x4408>
   14564:	ldr	r3, [r4, #40]	; 0x28
   14568:	cmp	r3, #2
   1456c:	bne	14598 <__assert_fail@plt+0x1a50>
   14570:	mov	r2, #99	; 0x63
   14574:	add	r1, sp, #241	; 0xf1
   14578:	mov	r0, sl
   1457c:	bl	125b4 <readlink@plt>
   14580:	cmp	r0, #0
   14584:	blt	14a0c <__assert_fail@plt+0x1ec4>
   14588:	add	r3, sp, #88	; 0x58
   1458c:	add	r0, r3, r0
   14590:	mov	r3, #0
   14594:	strb	r3, [r0, #153]	; 0x99
   14598:	ldr	r1, [pc, #1660]	; 14c1c <__assert_fail@plt+0x20d4>
   1459c:	mov	r2, #0
   145a0:	mov	r3, r7
   145a4:	add	r0, sp, #596	; 0x254
   145a8:	str	r1, [sp, #232]	; 0xe8
   145ac:	str	r1, [sp, #236]	; 0xec
   145b0:	ldrb	r1, [r3], #1
   145b4:	cmp	r3, r0
   145b8:	add	r2, r2, r1
   145bc:	bne	145b0 <__assert_fail@plt+0x1a68>
   145c0:	mov	r3, #0
   145c4:	mov	r1, #7
   145c8:	add	r0, sp, #232	; 0xe8
   145cc:	bl	138bc <__assert_fail@plt+0xd74>
   145d0:	mov	r3, #32
   145d4:	strb	r3, [sp, #239]	; 0xef
   145d8:	ldr	r3, [r4, #40]	; 0x28
   145dc:	cmp	r3, #0
   145e0:	bne	14900 <__assert_fail@plt+0x1db8>
   145e4:	ldr	r1, [pc, #1588]	; 14c20 <__assert_fail@plt+0x20d8>
   145e8:	mov	r0, sl
   145ec:	bl	128a8 <gpgrt_fopen@plt>
   145f0:	subs	r9, r0, #0
   145f4:	beq	14908 <__assert_fail@plt+0x1dc0>
   145f8:	mov	r1, r7
   145fc:	mov	r0, fp
   14600:	bl	1385c <__assert_fail@plt+0xd14>
   14604:	subs	r5, r0, #0
   14608:	bne	1497c <__assert_fail@plt+0x1e34>
   1460c:	ldr	ip, [r4, #40]	; 0x28
   14610:	cmp	ip, #0
   14614:	bne	146dc <__assert_fail@plt+0x1b94>
   14618:	ldr	r3, [r4, #24]
   1461c:	ldr	r2, [pc, #1536]	; 14c24 <__assert_fail@plt+0x20dc>
   14620:	ldr	r0, [r4, #28]
   14624:	adds	r1, r3, r2
   14628:	adc	r0, r0, #0
   1462c:	lsr	r2, r1, #9
   14630:	orr	r2, r2, r0, lsl #23
   14634:	lsr	r3, r0, #9
   14638:	str	ip, [sp, #20]
   1463c:	str	sl, [sp, #48]	; 0x30
   14640:	mov	r6, fp
   14644:	b	146a0 <__assert_fail@plt+0x1b58>
   14648:	orrs	r3, sl, fp
   1464c:	movne	r5, #512	; 0x200
   14650:	bne	14664 <__assert_fail@plt+0x1b1c>
   14654:	ldr	r5, [r4, #24]
   14658:	ldr	r3, [pc, #1476]	; 14c24 <__assert_fail@plt+0x20dc>
   1465c:	ands	r5, r5, r3
   14660:	moveq	r5, #512	; 0x200
   14664:	mov	r3, r9
   14668:	mov	r2, r5
   1466c:	mov	r1, #1
   14670:	mov	r0, r7
   14674:	bl	1259c <gpgrt_fread@plt>
   14678:	cmp	r5, r0
   1467c:	bne	14934 <__assert_fail@plt+0x1dec>
   14680:	mov	r1, r7
   14684:	mov	r0, r6
   14688:	bl	1385c <__assert_fail@plt+0xd14>
   1468c:	cmp	r0, #0
   14690:	bne	149fc <__assert_fail@plt+0x1eb4>
   14694:	ldrd	r2, [r4, #48]	; 0x30
   14698:	mov	r1, #1
   1469c:	str	r1, [sp, #20]
   146a0:	subs	sl, r2, #1
   146a4:	sbc	fp, r3, #0
   146a8:	orrs	r3, r2, r3
   146ac:	strd	sl, [r4, #48]	; 0x30
   146b0:	bne	14648 <__assert_fail@plt+0x1b00>
   146b4:	mov	r2, #1
   146b8:	mov	r1, r2
   146bc:	mov	r3, r9
   146c0:	mov	r0, r7
   146c4:	strd	sl, [sp, #40]	; 0x28
   146c8:	ldr	sl, [sp, #48]	; 0x30
   146cc:	bl	1259c <gpgrt_fread@plt>
   146d0:	mov	fp, r6
   146d4:	cmp	r0, #0
   146d8:	bne	14ac0 <__assert_fail@plt+0x1f78>
   146dc:	mov	r0, r9
   146e0:	bl	12644 <gpgrt_fclose@plt>
   146e4:	subs	r5, r0, #0
   146e8:	bne	149bc <__assert_fail@plt+0x1e74>
   146ec:	ldr	r4, [r4]
   146f0:	cmp	r4, #0
   146f4:	bne	1407c <__assert_fail@plt+0x1534>
   146f8:	mov	r5, fp
   146fc:	ldr	fp, [sp, #24]
   14700:	mov	r2, #512	; 0x200
   14704:	mov	r1, #0
   14708:	mov	r0, r7
   1470c:	bl	12854 <memset@plt>
   14710:	mov	r1, r7
   14714:	mov	r0, r5
   14718:	bl	1385c <__assert_fail@plt+0xd14>
   1471c:	subs	r6, r0, #0
   14720:	bne	14310 <__assert_fail@plt+0x17c8>
   14724:	mov	r1, r7
   14728:	mov	r0, r5
   1472c:	bl	1385c <__assert_fail@plt+0xd14>
   14730:	subs	r6, r0, #0
   14734:	bne	14310 <__assert_fail@plt+0x17c8>
   14738:	ldr	r3, [sp, #52]	; 0x34
   1473c:	cmp	r3, #0
   14740:	beq	141e0 <__assert_fail@plt+0x1698>
   14744:	mov	r2, r6
   14748:	mov	r1, r6
   1474c:	mov	r0, r5
   14750:	bl	129b0 <gpgrt_fseek@plt>
   14754:	subs	r6, r0, #0
   14758:	bne	14310 <__assert_fail@plt+0x17c8>
   1475c:	ldr	r2, [sp, #28]
   14760:	add	r6, sp, #68	; 0x44
   14764:	mov	r0, r6
   14768:	ldr	r3, [r2, #36]	; 0x24
   1476c:	cmp	r3, #0
   14770:	beq	14780 <__assert_fail@plt+0x1c38>
   14774:	ldr	r1, [r2, #28]
   14778:	cmp	r1, #0
   1477c:	beq	14b84 <__assert_fail@plt+0x203c>
   14780:	mov	r1, #0
   14784:	bl	211f8 <__assert_fail@plt+0xe6b0>
   14788:	ldr	r3, [sp, #32]
   1478c:	cmp	r3, #0
   14790:	beq	147a0 <__assert_fail@plt+0x1c58>
   14794:	ldr	r1, [pc, #1164]	; 14c28 <__assert_fail@plt+0x20e0>
   14798:	mov	r0, r6
   1479c:	bl	21258 <__assert_fail@plt+0xe710>
   147a0:	ldr	r3, [sp, #36]	; 0x24
   147a4:	cmp	r3, #0
   147a8:	bne	14b60 <__assert_fail@plt+0x2018>
   147ac:	ldr	r4, [sp, #28]
   147b0:	ldr	r3, [r4, #32]
   147b4:	cmp	r3, #0
   147b8:	beq	147d4 <__assert_fail@plt+0x1c8c>
   147bc:	ldr	r1, [pc, #1128]	; 14c2c <__assert_fail@plt+0x20e4>
   147c0:	mov	r0, r6
   147c4:	bl	21258 <__assert_fail@plt+0xe710>
   147c8:	ldr	r1, [r4, #32]
   147cc:	mov	r0, r6
   147d0:	bl	21258 <__assert_fail@plt+0xe710>
   147d4:	ldr	r3, [sp, #28]
   147d8:	ldr	r3, [r3, #36]	; 0x24
   147dc:	cmp	r3, #0
   147e0:	bne	14b50 <__assert_fail@plt+0x2008>
   147e4:	ldr	r3, [sp, #28]
   147e8:	ldr	r4, [r3, #28]
   147ec:	cmp	r4, #0
   147f0:	beq	1481c <__assert_fail@plt+0x1cd4>
   147f4:	ldr	r7, [pc, #1076]	; 14c30 <__assert_fail@plt+0x20e8>
   147f8:	mov	r1, r7
   147fc:	mov	r0, r6
   14800:	bl	21258 <__assert_fail@plt+0xe710>
   14804:	add	r1, r4, #8
   14808:	mov	r0, r6
   1480c:	bl	21258 <__assert_fail@plt+0xe710>
   14810:	ldr	r4, [r4]
   14814:	cmp	r4, #0
   14818:	bne	147f8 <__assert_fail@plt+0x1cb0>
   1481c:	ldr	r3, [sp, #28]
   14820:	ldr	r4, [r3, #20]
   14824:	cmp	r4, #0
   14828:	beq	14844 <__assert_fail@plt+0x1cfc>
   1482c:	add	r1, r4, #8
   14830:	mov	r0, r6
   14834:	bl	21258 <__assert_fail@plt+0xe710>
   14838:	ldr	r4, [r4]
   1483c:	cmp	r4, #0
   14840:	bne	1482c <__assert_fail@plt+0x1ce4>
   14844:	mov	r1, #0
   14848:	mov	r0, r6
   1484c:	bl	21258 <__assert_fail@plt+0xe710>
   14850:	mov	r0, r6
   14854:	mov	r1, #0
   14858:	bl	21338 <__assert_fail@plt+0xe7f0>
   1485c:	subs	r4, r0, #0
   14860:	beq	14b70 <__assert_fail@plt+0x2028>
   14864:	ldr	r0, [sp, #28]
   14868:	mov	r3, #0
   1486c:	str	r3, [sp, #8]
   14870:	str	r3, [sp, #4]
   14874:	str	fp, [sp]
   14878:	mov	r2, r5
   1487c:	mov	r1, r4
   14880:	ldr	r0, [r0, #16]
   14884:	bl	25508 <__assert_fail@plt+0x129c0>
   14888:	mov	r6, r0
   1488c:	mov	r0, r4
   14890:	bl	124a0 <gcry_free@plt>
   14894:	cmp	r6, #0
   14898:	beq	141e0 <__assert_fail@plt+0x1698>
   1489c:	b	14310 <__assert_fail@plt+0x17c8>
   148a0:	mov	r3, #52	; 0x34
   148a4:	strb	r3, [sp, #240]	; 0xf0
   148a8:	b	14488 <__assert_fail@plt+0x1940>
   148ac:	mov	r3, #53	; 0x35
   148b0:	strb	r3, [sp, #240]	; 0xf0
   148b4:	b	14488 <__assert_fail@plt+0x1940>
   148b8:	mov	r3, #51	; 0x33
   148bc:	strb	r3, [sp, #240]	; 0xf0
   148c0:	b	14488 <__assert_fail@plt+0x1940>
   148c4:	mov	r3, #50	; 0x32
   148c8:	strb	r3, [sp, #240]	; 0xf0
   148cc:	b	14488 <__assert_fail@plt+0x1940>
   148d0:	mov	r3, #49	; 0x31
   148d4:	strb	r3, [sp, #240]	; 0xf0
   148d8:	b	14488 <__assert_fail@plt+0x1940>
   148dc:	mov	r3, #48	; 0x30
   148e0:	strb	r3, [sp, #240]	; 0xf0
   148e4:	b	14488 <__assert_fail@plt+0x1940>
   148e8:	mov	r2, r0
   148ec:	mov	r3, #512	; 0x200
   148f0:	mov	r1, sl
   148f4:	mov	r0, r7
   148f8:	bl	125cc <__memcpy_chk@plt>
   148fc:	b	143f8 <__assert_fail@plt+0x18b0>
   14900:	mov	r9, #0
   14904:	b	145f8 <__assert_fail@plt+0x1ab0>
   14908:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1490c:	uxth	r5, r0
   14910:	mov	r0, r5
   14914:	bl	129d4 <gpg_strerror@plt>
   14918:	mov	r1, sl
   1491c:	mov	r2, r0
   14920:	ldr	r0, [pc, #780]	; 14c34 <__assert_fail@plt+0x20ec>
   14924:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14928:	cmp	r5, #0
   1492c:	beq	146ec <__assert_fail@plt+0x1ba4>
   14930:	b	14a44 <__assert_fail@plt+0x1efc>
   14934:	strd	sl, [sp, #40]	; 0x28
   14938:	ldr	sl, [sp, #48]	; 0x30
   1493c:	mov	fp, r6
   14940:	ldr	r6, [sp, #20]
   14944:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14948:	uxth	r5, r0
   1494c:	mov	r0, r5
   14950:	bl	129d4 <gpg_strerror@plt>
   14954:	ldr	r2, [pc, #732]	; 14c38 <__assert_fail@plt+0x20f0>
   14958:	cmp	r6, #0
   1495c:	ldr	r3, [pc, #728]	; 14c3c <__assert_fail@plt+0x20f4>
   14960:	mov	r1, sl
   14964:	movne	r3, r2
   14968:	mov	r2, r0
   1496c:	ldr	r0, [pc, #716]	; 14c40 <__assert_fail@plt+0x20f8>
   14970:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14974:	cmp	r5, #0
   14978:	beq	146dc <__assert_fail@plt+0x1b94>
   1497c:	mov	r6, r5
   14980:	mov	r5, fp
   14984:	ldr	fp, [sp, #24]
   14988:	mov	r0, r9
   1498c:	bl	12644 <gpgrt_fclose@plt>
   14990:	b	14310 <__assert_fail@plt+0x17c8>
   14994:	mov	r1, r5
   14998:	ldr	r0, [pc, #676]	; 14c44 <__assert_fail@plt+0x20fc>
   1499c:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   149a0:	strb	r6, [r8, #8]
   149a4:	b	144f4 <__assert_fail@plt+0x19ac>
   149a8:	mov	r1, r5
   149ac:	ldr	r0, [pc, #660]	; 14c48 <__assert_fail@plt+0x2100>
   149b0:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   149b4:	strb	r6, [r8, #48]	; 0x30
   149b8:	b	14550 <__assert_fail@plt+0x1a08>
   149bc:	mov	r6, r5
   149c0:	mov	r5, fp
   149c4:	ldr	fp, [sp, #24]
   149c8:	bl	129d4 <gpg_strerror@plt>
   149cc:	mov	r1, sl
   149d0:	mov	r2, r0
   149d4:	ldr	r0, [pc, #624]	; 14c4c <__assert_fail@plt+0x2104>
   149d8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   149dc:	b	14310 <__assert_fail@plt+0x17c8>
   149e0:	mov	r1, sl
   149e4:	ldr	r0, [pc, #612]	; 14c50 <__assert_fail@plt+0x2108>
   149e8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   149ec:	b	146ec <__assert_fail@plt+0x1ba4>
   149f0:	bl	12740 <_gpgrt_get_std_stream@plt>
   149f4:	bl	123b0 <gpgrt_set_binary@plt>
   149f8:	b	13f08 <__assert_fail@plt+0x13c0>
   149fc:	mov	r5, r6
   14a00:	ldr	fp, [sp, #24]
   14a04:	mov	r6, r0
   14a08:	b	14988 <__assert_fail@plt+0x1e40>
   14a0c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14a10:	subs	r5, r0, #0
   14a14:	beq	14aa8 <__assert_fail@plt+0x1f60>
   14a18:	uxth	r5, r5
   14a1c:	mov	r0, r5
   14a20:	bl	129d4 <gpg_strerror@plt>
   14a24:	mov	r1, sl
   14a28:	mov	r2, r0
   14a2c:	ldr	r0, [pc, #544]	; 14c54 <__assert_fail@plt+0x210c>
   14a30:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14a34:	cmp	r5, #0
   14a38:	beq	145d8 <__assert_fail@plt+0x1a90>
   14a3c:	cmp	r5, #60	; 0x3c
   14a40:	beq	149e0 <__assert_fail@plt+0x1e98>
   14a44:	mov	r6, r5
   14a48:	mov	r5, fp
   14a4c:	ldr	fp, [sp, #24]
   14a50:	b	14310 <__assert_fail@plt+0x17c8>
   14a54:	bl	1253c <gpgrt_fflush@plt>
   14a58:	mov	r6, r0
   14a5c:	b	141fc <__assert_fail@plt+0x16b4>
   14a60:	ldr	r1, [pc, #496]	; 14c58 <__assert_fail@plt+0x2110>
   14a64:	mov	r0, #0
   14a68:	bl	127d0 <gpgrt_fopenmem@plt>
   14a6c:	subs	r4, r0, #0
   14a70:	movne	fp, r5
   14a74:	movne	r5, r4
   14a78:	bne	1405c <__assert_fail@plt+0x1514>
   14a7c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14a80:	mov	fp, r5
   14a84:	cmp	r0, #0
   14a88:	movne	r5, r4
   14a8c:	uxthne	r6, r0
   14a90:	bne	141d8 <__assert_fail@plt+0x1690>
   14a94:	mov	r5, r0
   14a98:	b	141e0 <__assert_fail@plt+0x1698>
   14a9c:	bl	1253c <gpgrt_fflush@plt>
   14aa0:	mov	r4, r0
   14aa4:	b	14218 <__assert_fail@plt+0x16d0>
   14aa8:	bl	129d4 <gpg_strerror@plt>
   14aac:	mov	r1, sl
   14ab0:	mov	r2, r0
   14ab4:	ldr	r0, [pc, #408]	; 14c54 <__assert_fail@plt+0x210c>
   14ab8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14abc:	b	145d8 <__assert_fail@plt+0x1a90>
   14ac0:	mov	r1, sl
   14ac4:	ldr	r0, [pc, #400]	; 14c5c <__assert_fail@plt+0x2114>
   14ac8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   14acc:	b	146dc <__assert_fail@plt+0x1b94>
   14ad0:	mov	r0, #1
   14ad4:	bl	12740 <_gpgrt_get_std_stream@plt>
   14ad8:	mov	r5, r0
   14adc:	b	14034 <__assert_fail@plt+0x14ec>
   14ae0:	mov	r0, #1
   14ae4:	bl	12740 <_gpgrt_get_std_stream@plt>
   14ae8:	bl	123b0 <gpgrt_set_binary@plt>
   14aec:	b	14044 <__assert_fail@plt+0x14fc>
   14af0:	mov	r0, r4
   14af4:	bl	129d4 <gpg_strerror@plt>
   14af8:	ldr	r1, [pc, #232]	; 14be8 <__assert_fail@plt+0x20a0>
   14afc:	mov	r6, r4
   14b00:	mov	r2, r0
   14b04:	ldr	r0, [pc, #248]	; 14c04 <__assert_fail@plt+0x20bc>
   14b08:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14b0c:	b	14250 <__assert_fail@plt+0x1708>
   14b10:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14b14:	mov	r5, fp
   14b18:	uxth	r6, r0
   14b1c:	mov	r0, r6
   14b20:	bl	129d4 <gpg_strerror@plt>
   14b24:	mov	r1, r0
   14b28:	ldr	r0, [pc, #304]	; 14c60 <__assert_fail@plt+0x2118>
   14b2c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14b30:	b	141d8 <__assert_fail@plt+0x1690>
   14b34:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14b38:	cmp	r0, #0
   14b3c:	movne	fp, r5
   14b40:	uxthne	r6, r0
   14b44:	bne	141d8 <__assert_fail@plt+0x1690>
   14b48:	mov	fp, r5
   14b4c:	b	141e0 <__assert_fail@plt+0x1698>
   14b50:	ldr	r1, [pc, #268]	; 14c64 <__assert_fail@plt+0x211c>
   14b54:	mov	r0, r6
   14b58:	bl	21258 <__assert_fail@plt+0xe710>
   14b5c:	b	147e4 <__assert_fail@plt+0x1c9c>
   14b60:	ldr	r1, [pc, #256]	; 14c68 <__assert_fail@plt+0x2120>
   14b64:	mov	r0, r6
   14b68:	bl	21258 <__assert_fail@plt+0xe710>
   14b6c:	b	147ac <__assert_fail@plt+0x1c64>
   14b70:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14b74:	cmp	r0, #0
   14b78:	uxthne	r6, r0
   14b7c:	bne	141d8 <__assert_fail@plt+0x1690>
   14b80:	b	141e0 <__assert_fail@plt+0x1698>
   14b84:	bl	211f8 <__assert_fail@plt+0xe6b0>
   14b88:	b	147a0 <__assert_fail@plt+0x1c58>
   14b8c:	ldr	r3, [pc, #76]	; 14be0 <__assert_fail@plt+0x2098>
   14b90:	str	r3, [sp, #28]
   14b94:	ldr	r4, [r3, #24]
   14b98:	cmp	r4, #0
   14b9c:	beq	14bc0 <__assert_fail@plt+0x2078>
   14ba0:	mov	r0, r6
   14ba4:	bl	129d4 <gpg_strerror@plt>
   14ba8:	mov	r1, r4
   14bac:	mov	r2, r0
   14bb0:	ldr	r0, [pc, #76]	; 14c04 <__assert_fail@plt+0x20bc>
   14bb4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14bb8:	b	14250 <__assert_fail@plt+0x1708>
   14bbc:	bl	124e8 <__stack_chk_fail@plt>
   14bc0:	mov	r0, r6
   14bc4:	bl	129d4 <gpg_strerror@plt>
   14bc8:	ldr	r1, [pc, #24]	; 14be8 <__assert_fail@plt+0x20a0>
   14bcc:	mov	r2, r0
   14bd0:	ldr	r0, [pc, #44]	; 14c04 <__assert_fail@plt+0x20bc>
   14bd4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14bd8:	b	14250 <__assert_fail@plt+0x1708>
   14bdc:	andeq	fp, r3, r0, lsl fp
   14be0:	andeq	ip, r3, ip, asr #10
   14be4:	strdeq	r0, [r0], -lr
   14be8:	andeq	r7, r2, ip, asr lr
   14bec:	andeq	r8, r2, r4, asr r4
   14bf0:	muleq	r3, ip, r2
   14bf4:	andeq	r8, r2, ip, asr r4
   14bf8:	andeq	r8, r2, r8, lsr r4
   14bfc:	andeq	r8, r2, ip, ror #7
   14c00:	andeq	r7, r2, ip, lsr #31
   14c04:	andeq	r8, r2, r0, asr #11
   14c08:	strdeq	r8, [r2], -r4
   14c0c:	andeq	r8, r2, r8, lsr #8
   14c10:	andeq	r8, r2, ip, ror r4
   14c14:	andeq	ip, r3, r4, lsr #5
   14c18:	andeq	ip, r3, ip, asr #5
   14c1c:	eorcs	r2, r0, r0, lsr #32
   14c20:	andeq	r8, r2, r4, lsl #10
   14c24:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14c28:	andeq	r8, r2, r4, lsl #11
   14c2c:	muleq	r2, r8, r5
   14c30:			; <UNDEFINED> instruction: 0x000285b4
   14c34:	andeq	r8, r2, r8, lsl #10
   14c38:	ldrdeq	r8, [r2], -ip
   14c3c:	muleq	r2, r8, r9
   14c40:	andeq	r8, r2, r8, lsr #10
   14c44:	andeq	r8, r2, r4, lsl #9
   14c48:	andeq	r8, r2, r4, lsr #9
   14c4c:	andeq	r8, r2, r4, ror #10
   14c50:	andeq	r8, r2, r4, ror #9
   14c54:	andeq	r8, r2, r4, asr #9
   14c58:	andeq	r8, r2, r8, asr r4
   14c5c:	andeq	r8, r2, r8, asr #10
   14c60:	andeq	r8, r2, r8, lsl #8
   14c64:	andeq	r8, r2, r8, lsr #11
   14c68:	muleq	r2, r0, r5
   14c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c70:	add	r7, r2, #56	; 0x38
   14c74:	ldr	r6, [pc, #1228]	; 15148 <__assert_fail@plt+0x2600>
   14c78:	sub	sp, sp, #548	; 0x224
   14c7c:	mov	r8, r0
   14c80:	ldr	r3, [r6]
   14c84:	mov	r0, r7
   14c88:	mov	r4, r2
   14c8c:	mov	r9, r1
   14c90:	str	r3, [sp, #540]	; 0x21c
   14c94:	bl	12788 <strlen@plt>
   14c98:	subs	r5, r0, #0
   14c9c:	beq	14d58 <__assert_fail@plt+0x2210>
   14ca0:	ldr	r1, [pc, #1188]	; 1514c <__assert_fail@plt+0x2604>
   14ca4:	mov	r0, r7
   14ca8:	bl	12314 <strstr@plt>
   14cac:	cmp	r0, #0
   14cb0:	bne	14d58 <__assert_fail@plt+0x2210>
   14cb4:	ldr	r1, [pc, #1172]	; 15150 <__assert_fail@plt+0x2608>
   14cb8:	mov	r0, r7
   14cbc:	bl	12314 <strstr@plt>
   14cc0:	cmp	r0, #0
   14cc4:	bne	14d58 <__assert_fail@plt+0x2210>
   14cc8:	mov	r2, #3
   14ccc:	ldr	r1, [pc, #1152]	; 15154 <__assert_fail@plt+0x260c>
   14cd0:	mov	r0, r7
   14cd4:	bl	12ac4 <strncmp@plt>
   14cd8:	cmp	r0, #0
   14cdc:	beq	14d58 <__assert_fail@plt+0x2210>
   14ce0:	cmp	r5, #2
   14ce4:	bls	14d00 <__assert_fail@plt+0x21b8>
   14ce8:	sub	r0, r5, #3
   14cec:	add	r0, r7, r0
   14cf0:	ldr	r1, [pc, #1120]	; 15158 <__assert_fail@plt+0x2610>
   14cf4:	bl	1238c <strcmp@plt>
   14cf8:	cmp	r0, #0
   14cfc:	beq	14d58 <__assert_fail@plt+0x2210>
   14d00:	ldr	r1, [r4, #40]	; 0x28
   14d04:	bics	r5, r1, #8
   14d08:	beq	14d84 <__assert_fail@plt+0x223c>
   14d0c:	cmp	r1, #5
   14d10:	beq	14e7c <__assert_fail@plt+0x2334>
   14d14:	mov	r2, r7
   14d18:	ldr	r0, [pc, #1084]	; 1515c <__assert_fail@plt+0x2614>
   14d1c:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   14d20:	mov	r7, #0
   14d24:	ldrd	r2, [r4, #48]	; 0x30
   14d28:	mov	r1, #0
   14d2c:	cmp	r1, r3
   14d30:	cmpeq	r7, r2
   14d34:	bcs	14f24 <__assert_fail@plt+0x23dc>
   14d38:	add	r1, sp, #28
   14d3c:	mov	r0, r8
   14d40:	bl	137c0 <__assert_fail@plt+0xc78>
   14d44:	add	r7, r7, #1
   14d48:	cmp	r0, #0
   14d4c:	beq	14d24 <__assert_fail@plt+0x21dc>
   14d50:	mov	r5, r0
   14d54:	b	14d68 <__assert_fail@plt+0x2220>
   14d58:	mov	r1, r7
   14d5c:	ldr	r0, [pc, #1020]	; 15160 <__assert_fail@plt+0x2618>
   14d60:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14d64:	mov	r5, #88	; 0x58
   14d68:	ldr	r2, [sp, #540]	; 0x21c
   14d6c:	ldr	r3, [r6]
   14d70:	mov	r0, r5
   14d74:	cmp	r2, r3
   14d78:	bne	15144 <__assert_fail@plt+0x25fc>
   14d7c:	add	sp, sp, #548	; 0x224
   14d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d84:	mov	r3, r5
   14d88:	mov	r2, r7
   14d8c:	mov	r0, r9
   14d90:	ldr	r1, [pc, #972]	; 15164 <__assert_fail@plt+0x261c>
   14d94:	bl	17838 <__assert_fail@plt+0x4cf0>
   14d98:	subs	r3, r0, #0
   14d9c:	str	r3, [sp, #12]
   14da0:	beq	150a8 <__assert_fail@plt+0x2560>
   14da4:	ldr	r3, [pc, #956]	; 15168 <__assert_fail@plt+0x2620>
   14da8:	ldr	r1, [pc, #956]	; 1516c <__assert_fail@plt+0x2624>
   14dac:	str	r3, [sp, #16]
   14db0:	ldr	r3, [r3, #12]
   14db4:	cmp	r3, #0
   14db8:	bne	14eec <__assert_fail@plt+0x23a4>
   14dbc:	bl	128a8 <gpgrt_fopen@plt>
   14dc0:	str	r0, [sp, #8]
   14dc4:	ldr	r3, [sp, #8]
   14dc8:	cmp	r3, #0
   14dcc:	beq	150e8 <__assert_fail@plt+0x25a0>
   14dd0:	str	r5, [sp, #20]
   14dd4:	mov	r9, #0
   14dd8:	mov	sl, #0
   14ddc:	mov	fp, #0
   14de0:	ldr	r5, [sp, #8]
   14de4:	b	14e34 <__assert_fail@plt+0x22ec>
   14de8:	ldrd	r2, [r4, #24]
   14dec:	orrs	r1, r2, r3
   14df0:	beq	14e10 <__assert_fail@plt+0x22c8>
   14df4:	lsl	r1, r2, #23
   14df8:	str	r0, [sp, #4]
   14dfc:	lsr	r1, r1, #23
   14e00:	str	r1, [sp]
   14e04:	ldrd	r0, [sp]
   14e08:	orrs	r1, r0, r1
   14e0c:	beq	14e74 <__assert_fail@plt+0x232c>
   14e10:	lsl	r7, r2, #23
   14e14:	lsr	r7, r7, #23
   14e18:	mov	r3, r5
   14e1c:	mov	r2, r7
   14e20:	mov	r1, #1
   14e24:	add	r0, sp, #28
   14e28:	bl	124d0 <gpgrt_fwrite@plt>
   14e2c:	cmp	r7, r0
   14e30:	bne	14f94 <__assert_fail@plt+0x244c>
   14e34:	ldrd	r2, [r4, #48]	; 0x30
   14e38:	cmp	fp, r3
   14e3c:	cmpeq	sl, r2
   14e40:	bcs	14f2c <__assert_fail@plt+0x23e4>
   14e44:	add	r1, sp, #28
   14e48:	mov	r0, r8
   14e4c:	bl	137c0 <__assert_fail@plt+0xc78>
   14e50:	cmp	r0, #0
   14e54:	bne	14f54 <__assert_fail@plt+0x240c>
   14e58:	ldrd	r2, [r4, #48]	; 0x30
   14e5c:	mov	fp, #0
   14e60:	add	r9, r9, #1
   14e64:	cmp	fp, r3
   14e68:	cmpeq	r9, r2
   14e6c:	mov	sl, r9
   14e70:	bcs	14de8 <__assert_fail@plt+0x22a0>
   14e74:	mov	r7, #512	; 0x200
   14e78:	b	14e18 <__assert_fail@plt+0x22d0>
   14e7c:	mov	r0, r9
   14e80:	bl	12788 <strlen@plt>
   14e84:	mov	r2, r7
   14e88:	mov	r3, #0
   14e8c:	ldr	r1, [pc, #720]	; 15164 <__assert_fail@plt+0x261c>
   14e90:	mov	r8, r0
   14e94:	mov	r0, r9
   14e98:	bl	17838 <__assert_fail@plt+0x4cf0>
   14e9c:	subs	r4, r0, #0
   14ea0:	beq	14efc <__assert_fail@plt+0x23b4>
   14ea4:	bl	12788 <strlen@plt>
   14ea8:	sub	r0, r0, #1
   14eac:	ldrb	r3, [r4, r0]
   14eb0:	cmp	r3, #47	; 0x2f
   14eb4:	moveq	r3, #0
   14eb8:	strbeq	r3, [r4, r0]
   14ebc:	ldr	r3, [pc, #676]	; 15168 <__assert_fail@plt+0x2620>
   14ec0:	str	r3, [sp, #16]
   14ec4:	ldr	r7, [r3, #12]
   14ec8:	cmp	r7, #0
   14ecc:	beq	14fe4 <__assert_fail@plt+0x249c>
   14ed0:	ldr	r3, [sp, #16]
   14ed4:	ldr	r5, [r3]
   14ed8:	cmp	r5, #0
   14edc:	bne	14fd0 <__assert_fail@plt+0x2488>
   14ee0:	mov	r0, r4
   14ee4:	bl	124a0 <gcry_free@plt>
   14ee8:	b	14d68 <__assert_fail@plt+0x2220>
   14eec:	mov	r0, r5
   14ef0:	bl	127d0 <gpgrt_fopenmem@plt>
   14ef4:	str	r0, [sp, #8]
   14ef8:	b	14dc4 <__assert_fail@plt+0x227c>
   14efc:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14f00:	subs	r5, r0, #0
   14f04:	bne	1510c <__assert_fail@plt+0x25c4>
   14f08:	bl	129d4 <gpg_strerror@plt>
   14f0c:	mov	r1, r0
   14f10:	ldr	r0, [pc, #600]	; 15170 <__assert_fail@plt+0x2628>
   14f14:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14f18:	ldr	r3, [pc, #584]	; 15168 <__assert_fail@plt+0x2620>
   14f1c:	str	r3, [sp, #16]
   14f20:	b	14ed0 <__assert_fail@plt+0x2388>
   14f24:	mov	r5, #0
   14f28:	b	14d68 <__assert_fail@plt+0x2220>
   14f2c:	ldr	r5, [sp, #20]
   14f30:	ldr	r3, [sp, #16]
   14f34:	ldr	r3, [r3]
   14f38:	cmp	r3, #0
   14f3c:	bne	15098 <__assert_fail@plt+0x2550>
   14f40:	ldr	r0, [sp, #8]
   14f44:	bl	12644 <gpgrt_fclose@plt>
   14f48:	ldr	r0, [sp, #12]
   14f4c:	bl	124a0 <gcry_free@plt>
   14f50:	b	14d68 <__assert_fail@plt+0x2220>
   14f54:	mov	r7, r0
   14f58:	ldr	r0, [sp, #8]
   14f5c:	bl	12644 <gpgrt_fclose@plt>
   14f60:	mov	r5, r7
   14f64:	ldr	r0, [sp, #12]
   14f68:	bl	1d364 <__assert_fail@plt+0xa81c>
   14f6c:	cmp	r0, #0
   14f70:	beq	14f48 <__assert_fail@plt+0x2400>
   14f74:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14f78:	uxth	r0, r0
   14f7c:	bl	129d4 <gpg_strerror@plt>
   14f80:	ldr	r1, [sp, #12]
   14f84:	mov	r2, r0
   14f88:	ldr	r0, [pc, #484]	; 15174 <__assert_fail@plt+0x262c>
   14f8c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14f90:	b	14f48 <__assert_fail@plt+0x2400>
   14f94:	ldr	r5, [sp, #20]
   14f98:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14f9c:	uxth	r4, r0
   14fa0:	mov	r0, r4
   14fa4:	bl	129d4 <gpg_strerror@plt>
   14fa8:	ldr	r1, [sp, #12]
   14fac:	mov	r2, r0
   14fb0:	ldr	r0, [pc, #448]	; 15178 <__assert_fail@plt+0x2630>
   14fb4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   14fb8:	cmp	r4, #0
   14fbc:	beq	14f30 <__assert_fail@plt+0x23e8>
   14fc0:	ldr	r0, [sp, #8]
   14fc4:	bl	12644 <gpgrt_fclose@plt>
   14fc8:	mov	r5, r4
   14fcc:	b	14f64 <__assert_fail@plt+0x241c>
   14fd0:	mov	r1, r4
   14fd4:	ldr	r0, [pc, #416]	; 1517c <__assert_fail@plt+0x2634>
   14fd8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   14fdc:	mov	r5, #0
   14fe0:	b	14ee0 <__assert_fail@plt+0x2398>
   14fe4:	ldr	r1, [pc, #404]	; 15180 <__assert_fail@plt+0x2638>
   14fe8:	mov	r0, r4
   14fec:	bl	1d470 <__assert_fail@plt+0xa928>
   14ff0:	cmp	r0, #0
   14ff4:	beq	14ed0 <__assert_fail@plt+0x2388>
   14ff8:	bl	127c4 <gpg_err_code_from_syserror@plt>
   14ffc:	cmp	r0, #0
   15000:	beq	14ed0 <__assert_fail@plt+0x2388>
   15004:	ldr	r3, [pc, #376]	; 15184 <__assert_fail@plt+0x263c>
   15008:	uxth	r5, r0
   1500c:	cmp	r5, r3
   15010:	beq	14ed0 <__assert_fail@plt+0x2388>
   15014:	add	r3, r3, #46	; 0x2e
   15018:	cmp	r5, r3
   1501c:	bne	15138 <__assert_fail@plt+0x25f0>
   15020:	add	r0, r8, #1
   15024:	add	r0, r4, r0
   15028:	mov	r8, r7
   1502c:	mov	sl, #47	; 0x2f
   15030:	ldr	r9, [pc, #328]	; 15180 <__assert_fail@plt+0x2638>
   15034:	b	15058 <__assert_fail@plt+0x2510>
   15038:	strb	r8, [r7]
   1503c:	mov	r1, r9
   15040:	mov	r0, r4
   15044:	bl	1d470 <__assert_fail@plt+0xa928>
   15048:	strb	sl, [r7]
   1504c:	cmp	r0, #0
   15050:	bne	1507c <__assert_fail@plt+0x2534>
   15054:	add	r0, r7, #1
   15058:	mov	r1, #47	; 0x2f
   1505c:	bl	127ac <strchr@plt>
   15060:	subs	r7, r0, #0
   15064:	bne	15038 <__assert_fail@plt+0x24f0>
   15068:	ldr	r1, [pc, #272]	; 15180 <__assert_fail@plt+0x2638>
   1506c:	mov	r0, r4
   15070:	bl	1d470 <__assert_fail@plt+0xa928>
   15074:	cmp	r0, #0
   15078:	beq	14ed0 <__assert_fail@plt+0x2388>
   1507c:	mov	r0, r5
   15080:	bl	129d4 <gpg_strerror@plt>
   15084:	mov	r1, r4
   15088:	mov	r2, r0
   1508c:	ldr	r0, [pc, #244]	; 15188 <__assert_fail@plt+0x2640>
   15090:	bl	1c744 <__assert_fail@plt+0x9bfc>
   15094:	b	14ee0 <__assert_fail@plt+0x2398>
   15098:	ldr	r1, [sp, #12]
   1509c:	ldr	r0, [pc, #232]	; 1518c <__assert_fail@plt+0x2644>
   150a0:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   150a4:	b	14f40 <__assert_fail@plt+0x23f8>
   150a8:	bl	127c4 <gpg_err_code_from_syserror@plt>
   150ac:	uxth	sl, r0
   150b0:	mov	r0, sl
   150b4:	bl	129d4 <gpg_strerror@plt>
   150b8:	mov	r1, r0
   150bc:	ldr	r0, [pc, #172]	; 15170 <__assert_fail@plt+0x2628>
   150c0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   150c4:	cmp	sl, #0
   150c8:	ldreq	r3, [pc, #152]	; 15168 <__assert_fail@plt+0x2620>
   150cc:	streq	sl, [sp, #8]
   150d0:	streq	r3, [sp, #16]
   150d4:	beq	14f30 <__assert_fail@plt+0x23e8>
   150d8:	mov	r0, #0
   150dc:	mov	r5, sl
   150e0:	bl	12644 <gpgrt_fclose@plt>
   150e4:	b	14f48 <__assert_fail@plt+0x2400>
   150e8:	bl	127c4 <gpg_err_code_from_syserror@plt>
   150ec:	uxth	sl, r0
   150f0:	mov	r0, sl
   150f4:	bl	129d4 <gpg_strerror@plt>
   150f8:	ldr	r1, [sp, #12]
   150fc:	mov	r2, r0
   15100:	ldr	r0, [pc, #136]	; 15190 <__assert_fail@plt+0x2648>
   15104:	bl	1c744 <__assert_fail@plt+0x9bfc>
   15108:	b	150c4 <__assert_fail@plt+0x257c>
   1510c:	uxth	r5, r5
   15110:	mov	r0, r5
   15114:	bl	129d4 <gpg_strerror@plt>
   15118:	mov	r1, r0
   1511c:	ldr	r0, [pc, #76]	; 15170 <__assert_fail@plt+0x2628>
   15120:	bl	1c744 <__assert_fail@plt+0x9bfc>
   15124:	cmp	r5, #0
   15128:	ldreq	r3, [pc, #56]	; 15168 <__assert_fail@plt+0x2620>
   1512c:	streq	r3, [sp, #16]
   15130:	bne	14ee0 <__assert_fail@plt+0x2398>
   15134:	b	14ed0 <__assert_fail@plt+0x2388>
   15138:	cmp	r5, #0
   1513c:	bne	1507c <__assert_fail@plt+0x2534>
   15140:	b	14ed0 <__assert_fail@plt+0x2388>
   15144:	bl	124e8 <__stack_chk_fail@plt>
   15148:	andeq	fp, r3, r0, lsl fp
   1514c:	andeq	r9, r2, r8, lsr #2
   15150:	andeq	r8, r2, r4, ror #11
   15154:	andeq	r8, r2, ip, ror #11
   15158:	strdeq	r8, [r2], -r0
   1515c:	andeq	r8, r2, r4, ror #13
   15160:	strdeq	r8, [r2], -r4
   15164:	andeq	r9, r2, r8, lsr r1
   15168:	andeq	ip, r3, ip, asr #10
   1516c:	andeq	r8, r2, r4, asr r4
   15170:	andeq	r8, r2, r8, lsr #12
   15174:	andeq	r8, r2, r4, ror r6
   15178:	andeq	r8, r2, r4
   1517c:	ldrdeq	r8, [r2], -r0
   15180:	andeq	r8, r2, r0, lsr #13
   15184:	andeq	r8, r0, r3, lsr #32
   15188:	andeq	r8, r2, ip, lsr #13
   1518c:	andeq	r8, r2, r4, ror #12
   15190:	andeq	r8, r2, r8, asr #12
   15194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15198:	sub	sp, sp, #60	; 0x3c
   1519c:	ldr	fp, [pc, #1256]	; 1568c <__assert_fail@plt+0x2b44>
   151a0:	mov	r3, #0
   151a4:	subs	r5, r0, #0
   151a8:	ldr	r2, [fp]
   151ac:	mov	r6, r1
   151b0:	str	r2, [sp, #52]	; 0x34
   151b4:	str	r3, [sp, #32]
   151b8:	beq	155a4 <__assert_fail@plt+0x2a5c>
   151bc:	ldr	r1, [pc, #1228]	; 15690 <__assert_fail@plt+0x2b48>
   151c0:	bl	1238c <strcmp@plt>
   151c4:	cmp	r0, #0
   151c8:	beq	152cc <__assert_fail@plt+0x2784>
   151cc:	ldr	r1, [pc, #1216]	; 15694 <__assert_fail@plt+0x2b4c>
   151d0:	mov	r0, r5
   151d4:	bl	128a8 <gpgrt_fopen@plt>
   151d8:	mov	r4, r0
   151dc:	cmp	r4, #0
   151e0:	beq	155fc <__assert_fail@plt+0x2ab4>
   151e4:	mov	r0, #0
   151e8:	bl	12740 <_gpgrt_get_std_stream@plt>
   151ec:	cmp	r4, r0
   151f0:	beq	155bc <__assert_fail@plt+0x2a74>
   151f4:	cmp	r6, #0
   151f8:	bne	153e0 <__assert_fail@plt+0x2898>
   151fc:	ldr	r3, [pc, #1172]	; 15698 <__assert_fail@plt+0x2b50>
   15200:	str	r6, [sp, #24]
   15204:	str	r3, [sp, #20]
   15208:	ldr	r3, [sp, #20]
   1520c:	ldr	r0, [r3, #44]	; 0x2c
   15210:	cmp	r0, #0
   15214:	beq	152d8 <__assert_fail@plt+0x2790>
   15218:	bl	12b0c <gcry_strdup@plt>
   1521c:	mov	r5, r0
   15220:	ldr	r3, [sp, #20]
   15224:	ldr	r3, [r3]
   15228:	cmp	r3, #0
   1522c:	beq	1525c <__assert_fail@plt+0x2714>
   15230:	b	154a4 <__assert_fail@plt+0x295c>
   15234:	cmp	r2, #0
   15238:	beq	15274 <__assert_fail@plt+0x272c>
   1523c:	mov	r1, r5
   15240:	mov	r0, r4
   15244:	bl	14c6c <__assert_fail@plt+0x2124>
   15248:	subs	r6, r0, #0
   1524c:	bne	154b4 <__assert_fail@plt+0x296c>
   15250:	ldr	r0, [sp, #32]
   15254:	bl	124a0 <gcry_free@plt>
   15258:	str	r6, [sp, #32]
   1525c:	add	r1, sp, #32
   15260:	mov	r0, r4
   15264:	bl	160f0 <__assert_fail@plt+0x35a8>
   15268:	ldr	r2, [sp, #32]
   1526c:	subs	r6, r0, #0
   15270:	beq	15234 <__assert_fail@plt+0x26ec>
   15274:	mov	r0, r2
   15278:	bl	124a0 <gcry_free@plt>
   1527c:	mov	r0, r5
   15280:	bl	124a0 <gcry_free@plt>
   15284:	mov	r0, #0
   15288:	bl	12740 <_gpgrt_get_std_stream@plt>
   1528c:	cmp	r4, r0
   15290:	beq	1529c <__assert_fail@plt+0x2754>
   15294:	mov	r0, r4
   15298:	bl	12644 <gpgrt_fclose@plt>
   1529c:	ldr	r3, [sp, #24]
   152a0:	cmp	r4, r3
   152a4:	beq	152b0 <__assert_fail@plt+0x2768>
   152a8:	mov	r0, r3
   152ac:	bl	12644 <gpgrt_fclose@plt>
   152b0:	ldr	r2, [sp, #52]	; 0x34
   152b4:	ldr	r3, [fp]
   152b8:	mov	r0, r6
   152bc:	cmp	r2, r3
   152c0:	bne	15688 <__assert_fail@plt+0x2b40>
   152c4:	add	sp, sp, #60	; 0x3c
   152c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152cc:	bl	12740 <_gpgrt_get_std_stream@plt>
   152d0:	mov	r4, r0
   152d4:	b	151dc <__assert_fail@plt+0x2694>
   152d8:	ldr	r3, [sp, #20]
   152dc:	ldr	r7, [r3, #40]	; 0x28
   152e0:	cmp	r7, #0
   152e4:	beq	155d8 <__assert_fail@plt+0x2a90>
   152e8:	mov	r1, #47	; 0x2f
   152ec:	mov	r0, r7
   152f0:	bl	12980 <strrchr@plt>
   152f4:	cmp	r0, #0
   152f8:	beq	15308 <__assert_fail@plt+0x27c0>
   152fc:	add	r7, r0, #1
   15300:	cmp	r7, #0
   15304:	beq	15560 <__assert_fail@plt+0x2a18>
   15308:	ldrb	r3, [r7]
   1530c:	cmp	r3, #0
   15310:	beq	154bc <__assert_fail@plt+0x2974>
   15314:	mov	r0, r7
   15318:	bl	12788 <strlen@plt>
   1531c:	cmp	r0, #4
   15320:	subhi	r5, r0, #4
   15324:	bhi	154c4 <__assert_fail@plt+0x297c>
   15328:	mov	r3, #0
   1532c:	str	r3, [sp, #28]
   15330:	ldr	r8, [pc, #868]	; 1569c <__assert_fail@plt+0x2b54>
   15334:	ldr	r9, [pc, #868]	; 156a0 <__assert_fail@plt+0x2b58>
   15338:	ldr	sl, [pc, #868]	; 156a4 <__assert_fail@plt+0x2b5c>
   1533c:	mov	r5, #0
   15340:	mov	r6, #1
   15344:	b	15378 <__assert_fail@plt+0x2830>
   15348:	mov	r1, r9
   1534c:	bl	1d470 <__assert_fail@plt+0xa928>
   15350:	cmp	r0, #0
   15354:	beq	15598 <__assert_fail@plt+0x2a50>
   15358:	bl	1280c <__errno_location@plt>
   1535c:	ldr	r3, [r0]
   15360:	cmp	r3, #17
   15364:	cmpne	r3, #20
   15368:	bne	15580 <__assert_fail@plt+0x2a38>
   1536c:	add	r6, r6, #1
   15370:	cmp	r6, sl
   15374:	beq	15674 <__assert_fail@plt+0x2b2c>
   15378:	mov	r0, r5
   1537c:	bl	124a0 <gcry_free@plt>
   15380:	mov	r2, r6
   15384:	mov	r1, r7
   15388:	mov	r0, r8
   1538c:	bl	21194 <__assert_fail@plt+0xe64c>
   15390:	subs	r5, r0, #0
   15394:	bne	15348 <__assert_fail@plt+0x2800>
   15398:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1539c:	cmp	r0, #0
   153a0:	beq	1556c <__assert_fail@plt+0x2a24>
   153a4:	uxth	r0, r0
   153a8:	cmp	r0, #0
   153ac:	beq	1556c <__assert_fail@plt+0x2a24>
   153b0:	bl	129d4 <gpg_strerror@plt>
   153b4:	mov	r1, r0
   153b8:	ldr	r0, [pc, #744]	; 156a8 <__assert_fail@plt+0x2b60>
   153bc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   153c0:	mov	r0, r5
   153c4:	bl	124a0 <gcry_free@plt>
   153c8:	ldr	r0, [sp, #28]
   153cc:	bl	124a0 <gcry_free@plt>
   153d0:	mov	r5, #0
   153d4:	ldr	r2, [sp, #32]
   153d8:	mov	r6, #1
   153dc:	b	15274 <__assert_fail@plt+0x272c>
   153e0:	ldr	r1, [pc, #708]	; 156ac <__assert_fail@plt+0x2b64>
   153e4:	mov	r0, #0
   153e8:	bl	127d0 <gpgrt_fopenmem@plt>
   153ec:	subs	r7, r0, #0
   153f0:	beq	155cc <__assert_fail@plt+0x2a84>
   153f4:	ldr	r6, [pc, #668]	; 15698 <__assert_fail@plt+0x2b50>
   153f8:	add	r0, sp, #36	; 0x24
   153fc:	mov	r1, #0
   15400:	str	r6, [sp, #20]
   15404:	bl	211f8 <__assert_fail@plt+0xe6b0>
   15408:	add	r0, sp, #36	; 0x24
   1540c:	ldr	r1, [pc, #668]	; 156b0 <__assert_fail@plt+0x2b68>
   15410:	bl	21258 <__assert_fail@plt+0xe710>
   15414:	ldr	r6, [r6, #20]
   15418:	cmp	r6, #0
   1541c:	beq	15438 <__assert_fail@plt+0x28f0>
   15420:	add	r1, r6, #8
   15424:	add	r0, sp, #36	; 0x24
   15428:	bl	21258 <__assert_fail@plt+0xe710>
   1542c:	ldr	r6, [r6]
   15430:	cmp	r6, #0
   15434:	bne	15420 <__assert_fail@plt+0x28d8>
   15438:	mov	r1, #0
   1543c:	add	r0, sp, #36	; 0x24
   15440:	bl	21258 <__assert_fail@plt+0xe710>
   15444:	add	r0, sp, #36	; 0x24
   15448:	mov	r1, #0
   1544c:	bl	21338 <__assert_fail@plt+0xe7f0>
   15450:	subs	r8, r0, #0
   15454:	beq	155cc <__assert_fail@plt+0x2a84>
   15458:	ldr	r0, [sp, #20]
   1545c:	mov	r3, #0
   15460:	str	r3, [sp, #8]
   15464:	str	r3, [sp, #4]
   15468:	str	r7, [sp]
   1546c:	mov	r2, r4
   15470:	mov	r1, r8
   15474:	ldr	r0, [r0, #16]
   15478:	bl	25508 <__assert_fail@plt+0x129c0>
   1547c:	mov	r6, r0
   15480:	mov	r0, r8
   15484:	bl	124a0 <gcry_free@plt>
   15488:	cmp	r6, #0
   1548c:	beq	1553c <__assert_fail@plt+0x29f4>
   15490:	str	r4, [sp, #24]
   15494:	ldr	r2, [sp, #32]
   15498:	mov	r4, r7
   1549c:	mov	r5, #0
   154a0:	b	15274 <__assert_fail@plt+0x272c>
   154a4:	mov	r1, r5
   154a8:	ldr	r0, [pc, #516]	; 156b4 <__assert_fail@plt+0x2b6c>
   154ac:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   154b0:	b	1525c <__assert_fail@plt+0x2714>
   154b4:	ldr	r2, [sp, #32]
   154b8:	b	15274 <__assert_fail@plt+0x272c>
   154bc:	ldr	r7, [pc, #500]	; 156b8 <__assert_fail@plt+0x2b70>
   154c0:	mov	r5, #3
   154c4:	add	r6, r7, r5
   154c8:	mov	r0, r6
   154cc:	ldr	r1, [pc, #488]	; 156bc <__assert_fail@plt+0x2b74>
   154d0:	bl	1739c <__assert_fail@plt+0x4854>
   154d4:	cmp	r0, #0
   154d8:	beq	154f0 <__assert_fail@plt+0x29a8>
   154dc:	ldr	r1, [pc, #476]	; 156c0 <__assert_fail@plt+0x2b78>
   154e0:	mov	r0, r6
   154e4:	bl	1739c <__assert_fail@plt+0x4854>
   154e8:	cmp	r0, #0
   154ec:	bne	15620 <__assert_fail@plt+0x2ad8>
   154f0:	mov	r0, r7
   154f4:	bl	12b0c <gcry_strdup@plt>
   154f8:	subs	r7, r0, #0
   154fc:	movne	r3, #0
   15500:	strbne	r3, [r7, r5]
   15504:	strne	r7, [sp, #28]
   15508:	bne	15330 <__assert_fail@plt+0x27e8>
   1550c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   15510:	subs	r3, r0, #0
   15514:	beq	153cc <__assert_fail@plt+0x2884>
   15518:	uxth	r0, r3
   1551c:	cmp	r0, #0
   15520:	bne	1567c <__assert_fail@plt+0x2b34>
   15524:	mov	r0, r7
   15528:	bl	124a0 <gcry_free@plt>
   1552c:	mov	r5, r7
   15530:	ldr	r2, [sp, #32]
   15534:	mov	r6, #1
   15538:	b	15274 <__assert_fail@plt+0x272c>
   1553c:	mov	r2, r6
   15540:	mov	r1, r6
   15544:	mov	r0, r7
   15548:	bl	129b0 <gpgrt_fseek@plt>
   1554c:	subs	r6, r0, #0
   15550:	bne	15490 <__assert_fail@plt+0x2948>
   15554:	str	r4, [sp, #24]
   15558:	mov	r4, r7
   1555c:	b	15208 <__assert_fail@plt+0x26c0>
   15560:	mov	r5, #3
   15564:	ldr	r7, [pc, #332]	; 156b8 <__assert_fail@plt+0x2b70>
   15568:	b	154c4 <__assert_fail@plt+0x297c>
   1556c:	ldr	r0, [sp, #28]
   15570:	bl	124a0 <gcry_free@plt>
   15574:	mov	r6, #1
   15578:	ldr	r2, [sp, #32]
   1557c:	b	15274 <__assert_fail@plt+0x272c>
   15580:	bl	127c4 <gpg_err_code_from_syserror@plt>
   15584:	cmp	r0, #0
   15588:	beq	15598 <__assert_fail@plt+0x2a50>
   1558c:	uxth	r0, r0
   15590:	cmp	r0, #0
   15594:	bne	153b0 <__assert_fail@plt+0x2868>
   15598:	ldr	r0, [sp, #28]
   1559c:	bl	124a0 <gcry_free@plt>
   155a0:	b	15220 <__assert_fail@plt+0x26d8>
   155a4:	bl	12740 <_gpgrt_get_std_stream@plt>
   155a8:	mov	r4, r0
   155ac:	mov	r0, #0
   155b0:	bl	12740 <_gpgrt_get_std_stream@plt>
   155b4:	cmp	r4, r0
   155b8:	bne	151f4 <__assert_fail@plt+0x26ac>
   155bc:	mov	r0, #0
   155c0:	bl	12740 <_gpgrt_get_std_stream@plt>
   155c4:	bl	123b0 <gpgrt_set_binary@plt>
   155c8:	b	151f4 <__assert_fail@plt+0x26ac>
   155cc:	bl	127c4 <gpg_err_code_from_syserror@plt>
   155d0:	uxth	r6, r0
   155d4:	b	15490 <__assert_fail@plt+0x2948>
   155d8:	cmp	r5, #0
   155dc:	beq	15560 <__assert_fail@plt+0x2a18>
   155e0:	mov	r1, #47	; 0x2f
   155e4:	mov	r0, r5
   155e8:	bl	12980 <strrchr@plt>
   155ec:	cmp	r0, #0
   155f0:	bne	152fc <__assert_fail@plt+0x27b4>
   155f4:	mov	r7, r5
   155f8:	b	15308 <__assert_fail@plt+0x27c0>
   155fc:	bl	127c4 <gpg_err_code_from_syserror@plt>
   15600:	uxth	r6, r0
   15604:	mov	r0, r6
   15608:	bl	129d4 <gpg_strerror@plt>
   1560c:	mov	r1, r5
   15610:	mov	r2, r0
   15614:	ldr	r0, [pc, #168]	; 156c4 <__assert_fail@plt+0x2b7c>
   15618:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1561c:	b	152b0 <__assert_fail@plt+0x2768>
   15620:	ldr	r1, [pc, #160]	; 156c8 <__assert_fail@plt+0x2b80>
   15624:	mov	r0, r6
   15628:	bl	1739c <__assert_fail@plt+0x4854>
   1562c:	cmp	r0, #0
   15630:	beq	154f0 <__assert_fail@plt+0x29a8>
   15634:	ldr	r1, [pc, #144]	; 156cc <__assert_fail@plt+0x2b84>
   15638:	mov	r0, r6
   1563c:	bl	1739c <__assert_fail@plt+0x4854>
   15640:	cmp	r0, #0
   15644:	beq	154f0 <__assert_fail@plt+0x29a8>
   15648:	ldr	r1, [pc, #128]	; 156d0 <__assert_fail@plt+0x2b88>
   1564c:	mov	r0, r6
   15650:	bl	1739c <__assert_fail@plt+0x4854>
   15654:	cmp	r0, #0
   15658:	beq	154f0 <__assert_fail@plt+0x29a8>
   1565c:	mov	r0, r6
   15660:	ldr	r1, [pc, #108]	; 156d4 <__assert_fail@plt+0x2b8c>
   15664:	bl	1739c <__assert_fail@plt+0x4854>
   15668:	cmp	r0, #0
   1566c:	beq	154f0 <__assert_fail@plt+0x29a8>
   15670:	b	15328 <__assert_fail@plt+0x27e0>
   15674:	mov	r0, #183	; 0xb7
   15678:	b	153b0 <__assert_fail@plt+0x2868>
   1567c:	mov	r5, r7
   15680:	str	r7, [sp, #28]
   15684:	b	153b0 <__assert_fail@plt+0x2868>
   15688:	bl	124e8 <__stack_chk_fail@plt>
   1568c:	andeq	fp, r3, r0, lsl fp
   15690:	andeq	r7, r2, ip, asr lr
   15694:	andeq	r8, r2, r4, lsl #10
   15698:	andeq	ip, r3, ip, asr #10
   1569c:	andeq	r8, r2, r0, ror r7
   156a0:	andeq	r8, r2, r0, lsr #13
   156a4:	andeq	r1, r0, r8, lsl #7
   156a8:	andeq	r8, r2, r8, ror r7
   156ac:	andeq	r8, r2, r8, asr r4
   156b0:	andeq	r8, r2, r4, lsr r7
   156b4:	andeq	r8, r2, r4, lsr #15
   156b8:	andeq	r8, r2, r4, lsl r7
   156bc:	andeq	r8, r2, r0, asr #14
   156c0:	andeq	r8, r2, r8, asr #14
   156c4:	andeq	r8, r2, ip, lsl r7
   156c8:	andeq	r8, r2, r0, asr r7
   156cc:	andeq	r8, r2, r8, asr r7
   156d0:	andeq	r8, r2, r0, ror #14
   156d4:	andeq	r8, r2, r8, ror #14
   156d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156dc:	sub	sp, sp, #44	; 0x2c
   156e0:	ldr	r5, [pc, #396]	; 15874 <__assert_fail@plt+0x2d2c>
   156e4:	ldr	r7, [r0, #40]	; 0x28
   156e8:	mov	r3, #63	; 0x3f
   156ec:	ldr	r2, [r5]
   156f0:	mov	r4, r0
   156f4:	mov	r6, r1
   156f8:	str	r2, [sp, #36]	; 0x24
   156fc:	strb	r3, [sp, #24]
   15700:	cmp	r7, #7
   15704:	ldrls	pc, [pc, r7, lsl #2]
   15708:	b	15734 <__assert_fail@plt+0x2bec>
   1570c:	andeq	r5, r1, r8, lsr #16
   15710:	andeq	r5, r1, r4, lsr r8
   15714:	andeq	r5, r1, r0, asr #16
   15718:	andeq	r5, r1, ip, asr #16
   1571c:	andeq	r5, r1, r8, asr r8
   15720:	andeq	r5, r1, r4, ror #16
   15724:	andeq	r5, r1, ip, lsr #14
   15728:	andeq	r5, r1, ip, lsl r8
   1572c:	mov	r3, #102	; 0x66
   15730:	strb	r3, [sp, #24]
   15734:	ldr	lr, [r4, #4]
   15738:	ldr	r1, [pc, #312]	; 15878 <__assert_fail@plt+0x2d30>
   1573c:	add	r2, sp, #25
   15740:	add	ip, sp, #34	; 0x22
   15744:	mov	r3, #256	; 0x100
   15748:	tst	lr, r3
   1574c:	moveq	r0, #45	; 0x2d
   15750:	ldrbne	r0, [r1]
   15754:	lsr	r3, r3, #1
   15758:	add	r1, r1, #1
   1575c:	strb	r0, [r2], #1
   15760:	cmp	r2, ip
   15764:	bne	15748 <__assert_fail@plt+0x2c00>
   15768:	tst	r7, #2048	; 0x800
   1576c:	beq	15784 <__assert_fail@plt+0x2c3c>
   15770:	ldrb	r3, [sp, #27]
   15774:	cmp	r3, #120	; 0x78
   15778:	moveq	r3, #115	; 0x73
   1577c:	movne	r3, #83	; 0x53
   15780:	strb	r3, [sp, #27]
   15784:	tst	r7, #1024	; 0x400
   15788:	beq	157a0 <__assert_fail@plt+0x2c58>
   1578c:	ldrb	r3, [sp, #30]
   15790:	cmp	r3, #120	; 0x78
   15794:	moveq	r3, #115	; 0x73
   15798:	movne	r3, #83	; 0x53
   1579c:	strb	r3, [sp, #30]
   157a0:	tst	r7, #512	; 0x200
   157a4:	bne	15804 <__assert_fail@plt+0x2cbc>
   157a8:	add	r7, r4, #8
   157ac:	mov	r3, #0
   157b0:	ldr	r0, [r4, #32]
   157b4:	ldrd	r8, [r4, #24]
   157b8:	ldm	r7, {r7, sl, fp}
   157bc:	add	r4, r4, #56	; 0x38
   157c0:	strb	r3, [sp, #34]	; 0x22
   157c4:	bl	1f8ec <__assert_fail@plt+0xcda4>
   157c8:	mov	r3, r7
   157cc:	add	r2, sp, #24
   157d0:	strd	r8, [sp, #8]
   157d4:	strd	sl, [sp]
   157d8:	str	r4, [sp, #20]
   157dc:	ldr	r1, [pc, #152]	; 1587c <__assert_fail@plt+0x2d34>
   157e0:	str	r0, [sp, #16]
   157e4:	mov	r0, r6
   157e8:	bl	12a4c <gpgrt_fprintf@plt>
   157ec:	ldr	r2, [sp, #36]	; 0x24
   157f0:	ldr	r3, [r5]
   157f4:	cmp	r2, r3
   157f8:	bne	15870 <__assert_fail@plt+0x2d28>
   157fc:	add	sp, sp, #44	; 0x2c
   15800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15804:	ldrb	r3, [sp, #33]	; 0x21
   15808:	cmp	r3, #120	; 0x78
   1580c:	moveq	r3, #116	; 0x74
   15810:	movne	r3, #84	; 0x54
   15814:	strb	r3, [sp, #33]	; 0x21
   15818:	b	157a8 <__assert_fail@plt+0x2c60>
   1581c:	mov	r3, #61	; 0x3d
   15820:	strb	r3, [sp, #24]
   15824:	b	15734 <__assert_fail@plt+0x2bec>
   15828:	mov	r3, #45	; 0x2d
   1582c:	strb	r3, [sp, #24]
   15830:	b	15734 <__assert_fail@plt+0x2bec>
   15834:	mov	r3, #104	; 0x68
   15838:	strb	r3, [sp, #24]
   1583c:	b	15734 <__assert_fail@plt+0x2bec>
   15840:	mov	r3, #108	; 0x6c
   15844:	strb	r3, [sp, #24]
   15848:	b	15734 <__assert_fail@plt+0x2bec>
   1584c:	mov	r3, #99	; 0x63
   15850:	strb	r3, [sp, #24]
   15854:	b	15734 <__assert_fail@plt+0x2bec>
   15858:	mov	r3, #98	; 0x62
   1585c:	strb	r3, [sp, #24]
   15860:	b	15734 <__assert_fail@plt+0x2bec>
   15864:	mov	r3, #100	; 0x64
   15868:	strb	r3, [sp, #24]
   1586c:	b	15734 <__assert_fail@plt+0x2bec>
   15870:	bl	124e8 <__stack_chk_fail@plt>
   15874:	andeq	fp, r3, r0, lsl fp
   15878:			; <UNDEFINED> instruction: 0x000287bc
   1587c:	andeq	r8, r2, r8, asr #15
   15880:	push	{r4, r5, r6, lr}
   15884:	ldrb	ip, [r0]
   15888:	tst	ip, #128	; 0x80
   1588c:	moveq	r3, r0
   15890:	beq	1589c <__assert_fail@plt+0x2d54>
   15894:	b	158bc <__assert_fail@plt+0x2d74>
   15898:	ldrb	ip, [r3, #1]!
   1589c:	and	r0, ip, #239	; 0xef
   158a0:	cmp	r0, #32
   158a4:	bne	158f4 <__assert_fail@plt+0x2dac>
   158a8:	subs	r1, r1, #1
   158ac:	bne	15898 <__assert_fail@plt+0x2d50>
   158b0:	mov	r0, #0
   158b4:	mov	r1, #0
   158b8:	pop	{r4, r5, r6, pc}
   158bc:	and	ip, ip, #127	; 0x7f
   158c0:	add	r2, r0, r1
   158c4:	add	r3, r0, #1
   158c8:	mov	r1, #0
   158cc:	uxtb	r0, ip
   158d0:	ldrb	r4, [r3], #1
   158d4:	lsl	ip, r1, #8
   158d8:	orr	ip, ip, r0, lsr #24
   158dc:	cmp	r3, r2
   158e0:	mov	r5, #0
   158e4:	orr	r0, r4, r0, lsl #8
   158e8:	mov	r1, ip
   158ec:	bne	158d0 <__assert_fail@plt+0x2d88>
   158f0:	pop	{r4, r5, r6, pc}
   158f4:	cmp	ip, #0
   158f8:	beq	158b0 <__assert_fail@plt+0x2d68>
   158fc:	sub	r6, ip, #48	; 0x30
   15900:	uxtb	r0, r6
   15904:	cmp	r0, #7
   15908:	bhi	15954 <__assert_fail@plt+0x2e0c>
   1590c:	sub	lr, r1, #1
   15910:	add	lr, lr, r3
   15914:	mov	r0, #0
   15918:	mov	r1, #0
   1591c:	lsl	r5, r1, #3
   15920:	lsl	r4, r0, #3
   15924:	orr	r5, r5, r0, lsr #29
   15928:	adds	r0, r4, r6
   1592c:	adc	r1, r5, r6, asr #31
   15930:	cmp	lr, r3
   15934:	popeq	{r4, r5, r6, pc}
   15938:	ldrb	ip, [r3, #1]!
   1593c:	cmp	ip, #0
   15940:	sub	r6, ip, #48	; 0x30
   15944:	uxtb	ip, r6
   15948:	popeq	{r4, r5, r6, pc}
   1594c:	cmp	ip, #7
   15950:	bls	1591c <__assert_fail@plt+0x2dd4>
   15954:	mov	r1, r2
   15958:	ldr	r0, [pc, #12]	; 1596c <__assert_fail@plt+0x2e24>
   1595c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   15960:	mov	r0, #0
   15964:	mov	r1, #0
   15968:	pop	{r4, r5, r6, pc}
   1596c:	andeq	r8, r2, r8, ror #15
   15970:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15974:	sub	sp, sp, #524	; 0x20c
   15978:	ldr	r5, [pc, #1092]	; 15dc4 <__assert_fail@plt+0x327c>
   1597c:	mov	r7, r1
   15980:	add	r1, sp, #4
   15984:	ldr	r3, [r5]
   15988:	mov	r9, r0
   1598c:	str	r3, [sp, #516]	; 0x204
   15990:	bl	137c0 <__assert_fail@plt+0xc78>
   15994:	subs	r6, r0, #0
   15998:	bne	15b5c <__assert_fail@plt+0x3014>
   1599c:	add	r8, sp, #3
   159a0:	add	r4, sp, #512	; 0x200
   159a4:	mov	r3, r8
   159a8:	add	r4, r4, #3
   159ac:	b	159b8 <__assert_fail@plt+0x2e70>
   159b0:	cmp	r4, r3
   159b4:	beq	15c74 <__assert_fail@plt+0x312c>
   159b8:	ldrb	r2, [r3, #1]!
   159bc:	cmp	r2, #0
   159c0:	beq	159b0 <__assert_fail@plt+0x2e68>
   159c4:	mov	r0, r9
   159c8:	bl	1244c <gpgrt_fname_get@plt>
   159cc:	mov	r2, #5
   159d0:	ldr	r1, [pc, #1008]	; 15dc8 <__assert_fail@plt+0x3280>
   159d4:	mov	r9, r0
   159d8:	add	r0, sp, #260	; 0x104
   159dc:	add	r0, r0, #1
   159e0:	bl	124ac <memcmp@plt>
   159e4:	cmp	r0, #0
   159e8:	movne	sl, #0
   159ec:	beq	15c60 <__assert_fail@plt+0x3118>
   159f0:	mov	r4, #0
   159f4:	b	15a04 <__assert_fail@plt+0x2ebc>
   159f8:	cmp	r3, #100	; 0x64
   159fc:	mov	r4, r3
   15a00:	beq	15d38 <__assert_fail@plt+0x31f0>
   15a04:	ldrb	r2, [r8, #1]!
   15a08:	add	r3, r4, #1
   15a0c:	cmp	r2, #0
   15a10:	bne	159f8 <__assert_fail@plt+0x2eb0>
   15a14:	cmp	r3, #100	; 0x64
   15a18:	add	r8, r4, #65	; 0x41
   15a1c:	beq	15a4c <__assert_fail@plt+0x2f04>
   15a20:	add	r2, sp, #520	; 0x208
   15a24:	add	r2, r2, r3
   15a28:	ldrb	r2, [r2, #-516]	; 0xfffffdfc
   15a2c:	cmp	r2, #0
   15a30:	addeq	r2, sp, #4
   15a34:	addeq	r3, r2, r3
   15a38:	addeq	r1, r2, #99	; 0x63
   15a3c:	beq	15b2c <__assert_fail@plt+0x2fe4>
   15a40:	mov	r1, r9
   15a44:	ldr	r0, [pc, #896]	; 15dcc <__assert_fail@plt+0x3284>
   15a48:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   15a4c:	cmp	sl, #0
   15a50:	bne	15b78 <__assert_fail@plt+0x3030>
   15a54:	mov	r1, r8
   15a58:	mov	r0, #1
   15a5c:	bl	12860 <gcry_calloc@plt>
   15a60:	subs	r8, r0, #0
   15a64:	beq	15d54 <__assert_fail@plt+0x320c>
   15a68:	add	r0, r8, #56	; 0x38
   15a6c:	mov	sl, r4
   15a70:	mov	r2, r4
   15a74:	add	r1, sp, #4
   15a78:	add	sl, r8, sl
   15a7c:	bl	1247c <memcpy@plt>
   15a80:	mov	r3, #0
   15a84:	strb	r3, [sl, #56]	; 0x38
   15a88:	mov	r2, r9
   15a8c:	mov	r1, #8
   15a90:	add	r0, sp, #104	; 0x68
   15a94:	bl	15880 <__assert_fail@plt+0x2d38>
   15a98:	mov	r2, r9
   15a9c:	mov	r1, #8
   15aa0:	str	r0, [r8, #4]
   15aa4:	add	r0, sp, #112	; 0x70
   15aa8:	bl	15880 <__assert_fail@plt+0x2d38>
   15aac:	mov	r2, r9
   15ab0:	mov	r1, #8
   15ab4:	str	r0, [r8, #12]
   15ab8:	add	r0, sp, #120	; 0x78
   15abc:	bl	15880 <__assert_fail@plt+0x2d38>
   15ac0:	mov	r2, r9
   15ac4:	mov	r1, #12
   15ac8:	str	r0, [r8, #16]
   15acc:	add	r0, sp, #128	; 0x80
   15ad0:	bl	15880 <__assert_fail@plt+0x2d38>
   15ad4:	mov	r2, r9
   15ad8:	strd	r0, [r8, #24]
   15adc:	mov	r1, #12
   15ae0:	add	r0, sp, #140	; 0x8c
   15ae4:	bl	15880 <__assert_fail@plt+0x2d38>
   15ae8:	ldrb	r3, [sp, #160]	; 0xa0
   15aec:	sub	r3, r3, #48	; 0x30
   15af0:	strd	r0, [r8, #32]
   15af4:	cmp	r3, #7
   15af8:	ldrls	pc, [pc, r3, lsl #2]
   15afc:	b	15db8 <__assert_fail@plt+0x3270>
   15b00:	andeq	r5, r1, r8, lsl #26
   15b04:	strdeq	r5, [r1], -ip
   15b08:	strdeq	r5, [r1], -r0
   15b0c:	andeq	r5, r1, r4, ror #25
   15b10:	ldrdeq	r5, [r1], -r8
   15b14:	andeq	r5, r1, ip, asr #25
   15b18:	andeq	r5, r1, r0, asr #25
   15b1c:	andeq	r5, r1, r0, asr #22
   15b20:	ldrb	r2, [r3, #1]!
   15b24:	cmp	r2, #0
   15b28:	bne	15a40 <__assert_fail@plt+0x2ef8>
   15b2c:	cmp	r1, r3
   15b30:	bne	15b20 <__assert_fail@plt+0x2fd8>
   15b34:	cmp	sl, #0
   15b38:	beq	15a54 <__assert_fail@plt+0x2f0c>
   15b3c:	b	15b78 <__assert_fail@plt+0x3030>
   15b40:	mov	r3, #7
   15b44:	str	r3, [r8, #40]	; 0x28
   15b48:	mov	r3, #0
   15b4c:	mov	r2, r3
   15b50:	str	r3, [r8, #48]	; 0x30
   15b54:	str	r2, [r8, #52]	; 0x34
   15b58:	str	r8, [r7]
   15b5c:	ldr	r2, [sp, #516]	; 0x204
   15b60:	ldr	r3, [r5]
   15b64:	mov	r0, r6
   15b68:	cmp	r2, r3
   15b6c:	bne	15db4 <__assert_fail@plt+0x326c>
   15b70:	add	sp, sp, #524	; 0x20c
   15b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b78:	ldrb	r3, [sp, #349]	; 0x15d
   15b7c:	cmp	r3, #0
   15b80:	beq	15a54 <__assert_fail@plt+0x2f0c>
   15b84:	add	r2, sp, #348	; 0x15c
   15b88:	add	r2, r2, #2
   15b8c:	mov	r3, #0
   15b90:	b	15b98 <__assert_fail@plt+0x3050>
   15b94:	mov	r3, fp
   15b98:	add	fp, r3, #1
   15b9c:	cmp	fp, #155	; 0x9b
   15ba0:	beq	15da0 <__assert_fail@plt+0x3258>
   15ba4:	ldrb	r1, [r2], #1
   15ba8:	cmp	r1, #0
   15bac:	bne	15b94 <__assert_fail@plt+0x304c>
   15bb0:	add	sl, r3, #2
   15bb4:	cmp	sl, #155	; 0x9b
   15bb8:	beq	15c00 <__assert_fail@plt+0x30b8>
   15bbc:	add	r2, sp, #520	; 0x208
   15bc0:	add	r2, r2, sl
   15bc4:	ldrb	r2, [r2, #-171]	; 0xffffff55
   15bc8:	cmp	r2, #0
   15bcc:	bne	15d84 <__assert_fail@plt+0x323c>
   15bd0:	add	r3, r3, #344	; 0x158
   15bd4:	add	r3, r3, #3
   15bd8:	add	r2, sp, #4
   15bdc:	add	r1, sp, #500	; 0x1f4
   15be0:	add	r3, r2, r3
   15be4:	add	r1, r1, #3
   15be8:	b	15bf8 <__assert_fail@plt+0x30b0>
   15bec:	ldrb	r2, [r3, #1]!
   15bf0:	cmp	r2, #0
   15bf4:	bne	15d84 <__assert_fail@plt+0x323c>
   15bf8:	cmp	r3, r1
   15bfc:	bne	15bec <__assert_fail@plt+0x30a4>
   15c00:	add	r1, r8, fp
   15c04:	mov	r0, #1
   15c08:	bl	12860 <gcry_calloc@plt>
   15c0c:	subs	r8, r0, #0
   15c10:	beq	15d54 <__assert_fail@plt+0x320c>
   15c14:	add	r3, r8, #56	; 0x38
   15c18:	add	r1, sp, #348	; 0x15c
   15c1c:	mov	r2, fp
   15c20:	mov	r0, r3
   15c24:	add	r1, r1, #1
   15c28:	bl	1247c <memcpy@plt>
   15c2c:	add	r2, sp, #520	; 0x208
   15c30:	add	r2, r2, fp
   15c34:	ldrb	r2, [r2, #-172]	; 0xffffff54
   15c38:	cmp	r2, #47	; 0x2f
   15c3c:	addne	fp, r8, fp
   15c40:	addeq	sl, r4, fp
   15c44:	mov	r3, r0
   15c48:	addne	r0, r3, sl
   15c4c:	movne	r3, #47	; 0x2f
   15c50:	addeq	r0, r0, fp
   15c54:	addne	sl, r4, sl
   15c58:	strbne	r3, [fp, #56]	; 0x38
   15c5c:	b	15a70 <__assert_fail@plt+0x2f28>
   15c60:	ldrb	r3, [sp, #266]	; 0x10a
   15c64:	tst	r3, #223	; 0xdf
   15c68:	moveq	sl, #1
   15c6c:	movne	sl, #0
   15c70:	b	159f0 <__assert_fail@plt+0x2ea8>
   15c74:	add	r1, sp, #4
   15c78:	mov	r0, r9
   15c7c:	bl	137c0 <__assert_fail@plt+0xc78>
   15c80:	cmp	r0, #0
   15c84:	moveq	r3, r8
   15c88:	beq	15c9c <__assert_fail@plt+0x3154>
   15c8c:	mov	r6, r0
   15c90:	b	15b5c <__assert_fail@plt+0x3014>
   15c94:	cmp	r4, r3
   15c98:	beq	15d94 <__assert_fail@plt+0x324c>
   15c9c:	ldrb	r2, [r3, #1]!
   15ca0:	cmp	r2, #0
   15ca4:	beq	15c94 <__assert_fail@plt+0x314c>
   15ca8:	mov	r0, r9
   15cac:	bl	1244c <gpgrt_fname_get@plt>
   15cb0:	mov	r1, r0
   15cb4:	ldr	r0, [pc, #276]	; 15dd0 <__assert_fail@plt+0x3288>
   15cb8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   15cbc:	b	159c4 <__assert_fail@plt+0x2e7c>
   15cc0:	mov	r3, #6
   15cc4:	str	r3, [r8, #40]	; 0x28
   15cc8:	b	15b48 <__assert_fail@plt+0x3000>
   15ccc:	mov	r3, #5
   15cd0:	str	r3, [r8, #40]	; 0x28
   15cd4:	b	15b48 <__assert_fail@plt+0x3000>
   15cd8:	mov	r3, #4
   15cdc:	str	r3, [r8, #40]	; 0x28
   15ce0:	b	15b48 <__assert_fail@plt+0x3000>
   15ce4:	mov	r3, #3
   15ce8:	str	r3, [r8, #40]	; 0x28
   15cec:	b	15b48 <__assert_fail@plt+0x3000>
   15cf0:	mov	r3, #2
   15cf4:	str	r3, [r8, #40]	; 0x28
   15cf8:	b	15b48 <__assert_fail@plt+0x3000>
   15cfc:	mov	r3, #1
   15d00:	str	r3, [r8, #40]	; 0x28
   15d04:	b	15b48 <__assert_fail@plt+0x3000>
   15d08:	mov	r3, #0
   15d0c:	str	r3, [r8, #40]	; 0x28
   15d10:	ldr	r1, [pc, #188]	; 15dd4 <__assert_fail@plt+0x328c>
   15d14:	ldr	r3, [r8, #24]
   15d18:	ldr	r2, [r8, #28]
   15d1c:	adds	r3, r3, r1
   15d20:	mov	r1, #0
   15d24:	adc	r2, r2, r1
   15d28:	lsr	r3, r3, #9
   15d2c:	orr	r3, r3, r2, lsl #23
   15d30:	lsr	r2, r2, #9
   15d34:	b	15b50 <__assert_fail@plt+0x3008>
   15d38:	mov	r1, r9
   15d3c:	ldr	r0, [pc, #148]	; 15dd8 <__assert_fail@plt+0x3290>
   15d40:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   15d44:	cmp	sl, #0
   15d48:	mov	r8, #165	; 0xa5
   15d4c:	beq	15a54 <__assert_fail@plt+0x2f0c>
   15d50:	b	15b78 <__assert_fail@plt+0x3030>
   15d54:	bl	127c4 <gpg_err_code_from_syserror@plt>
   15d58:	uxth	r0, r0
   15d5c:	bl	129d4 <gpg_strerror@plt>
   15d60:	mov	r1, r9
   15d64:	mov	r2, r0
   15d68:	ldr	r0, [pc, #108]	; 15ddc <__assert_fail@plt+0x3294>
   15d6c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   15d70:	mov	r3, #0
   15d74:	str	r3, [r7]
   15d78:	bl	127c4 <gpg_err_code_from_syserror@plt>
   15d7c:	uxth	r6, r0
   15d80:	b	15b5c <__assert_fail@plt+0x3014>
   15d84:	mov	r1, r9
   15d88:	ldr	r0, [pc, #80]	; 15de0 <__assert_fail@plt+0x3298>
   15d8c:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   15d90:	b	15c00 <__assert_fail@plt+0x30b8>
   15d94:	str	r2, [r7]
   15d98:	mov	r6, r2
   15d9c:	b	15b5c <__assert_fail@plt+0x3014>
   15da0:	mov	r1, r9
   15da4:	ldr	r0, [pc, #56]	; 15de4 <__assert_fail@plt+0x329c>
   15da8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   15dac:	mov	sl, #156	; 0x9c
   15db0:	b	15c00 <__assert_fail@plt+0x30b8>
   15db4:	bl	124e8 <__stack_chk_fail@plt>
   15db8:	mov	r3, #8
   15dbc:	str	r3, [r8, #40]	; 0x28
   15dc0:	b	15d10 <__assert_fail@plt+0x31c8>
   15dc4:	andeq	fp, r3, r0, lsl fp
   15dc8:	andeq	r8, r2, ip, ror r4
   15dcc:	andeq	r8, r2, ip, lsl r8
   15dd0:	andeq	r8, r2, ip, ror #17
   15dd4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15dd8:			; <UNDEFINED> instruction: 0x000288bc
   15ddc:	andeq	r8, r2, r4, ror #16
   15de0:	andeq	r8, r2, r0, asr #16
   15de4:	andeq	r8, r2, r8, lsl #17
   15de8:	push	{r4, r5, r6, r7, r8, lr}
   15dec:	mov	r8, r1
   15df0:	ldr	r7, [pc, #120]	; 15e70 <__assert_fail@plt+0x3328>
   15df4:	ldrd	r2, [r1]
   15df8:	sub	sp, sp, #520	; 0x208
   15dfc:	ldr	r1, [r7]
   15e00:	orrs	r3, r2, r3
   15e04:	str	r1, [sp, #516]	; 0x204
   15e08:	beq	15e50 <__assert_fail@plt+0x3308>
   15e0c:	mov	r6, r0
   15e10:	mov	r4, #0
   15e14:	mov	r5, #0
   15e18:	b	15e34 <__assert_fail@plt+0x32ec>
   15e1c:	ldrd	r2, [r8]
   15e20:	adds	r4, r4, #1
   15e24:	adc	r5, r5, #0
   15e28:	cmp	r5, r3
   15e2c:	cmpeq	r4, r2
   15e30:	bcs	15e50 <__assert_fail@plt+0x3308>
   15e34:	add	r1, sp, #4
   15e38:	mov	r0, r6
   15e3c:	bl	137c0 <__assert_fail@plt+0xc78>
   15e40:	cmp	r0, #0
   15e44:	beq	15e1c <__assert_fail@plt+0x32d4>
   15e48:	mvn	r0, #0
   15e4c:	b	15e54 <__assert_fail@plt+0x330c>
   15e50:	mov	r0, #0
   15e54:	ldr	r2, [sp, #516]	; 0x204
   15e58:	ldr	r3, [r7]
   15e5c:	cmp	r2, r3
   15e60:	bne	15e6c <__assert_fail@plt+0x3324>
   15e64:	add	sp, sp, #520	; 0x208
   15e68:	pop	{r4, r5, r6, r7, r8, pc}
   15e6c:	bl	124e8 <__stack_chk_fail@plt>
   15e70:	andeq	fp, r3, r0, lsl fp
   15e74:	push	{r4, r5, r6, r7, r8, r9, lr}
   15e78:	sub	sp, sp, #44	; 0x2c
   15e7c:	ldr	r7, [pc, #592]	; 160d4 <__assert_fail@plt+0x358c>
   15e80:	mov	r3, #0
   15e84:	subs	r8, r0, #0
   15e88:	ldr	r2, [r7]
   15e8c:	mov	r4, r1
   15e90:	str	r2, [sp, #36]	; 0x24
   15e94:	str	r3, [sp, #16]
   15e98:	beq	16078 <__assert_fail@plt+0x3530>
   15e9c:	ldr	r1, [pc, #564]	; 160d8 <__assert_fail@plt+0x3590>
   15ea0:	bl	1238c <strcmp@plt>
   15ea4:	cmp	r0, #0
   15ea8:	beq	15f88 <__assert_fail@plt+0x3440>
   15eac:	ldr	r1, [pc, #552]	; 160dc <__assert_fail@plt+0x3594>
   15eb0:	mov	r0, r8
   15eb4:	bl	128a8 <gpgrt_fopen@plt>
   15eb8:	mov	r5, r0
   15ebc:	cmp	r5, #0
   15ec0:	beq	160ac <__assert_fail@plt+0x3564>
   15ec4:	mov	r0, #0
   15ec8:	bl	12740 <_gpgrt_get_std_stream@plt>
   15ecc:	cmp	r5, r0
   15ed0:	beq	16090 <__assert_fail@plt+0x3548>
   15ed4:	cmp	r4, #0
   15ed8:	moveq	r8, r4
   15edc:	beq	15f24 <__assert_fail@plt+0x33dc>
   15ee0:	b	15f94 <__assert_fail@plt+0x344c>
   15ee4:	cmp	r4, #0
   15ee8:	beq	15f3c <__assert_fail@plt+0x33f4>
   15eec:	mov	r0, #1
   15ef0:	bl	12740 <_gpgrt_get_std_stream@plt>
   15ef4:	mov	r1, r0
   15ef8:	mov	r0, r4
   15efc:	bl	156d8 <__assert_fail@plt+0x2b90>
   15f00:	ldr	r1, [sp, #16]
   15f04:	mov	r0, r5
   15f08:	add	r1, r1, #48	; 0x30
   15f0c:	bl	15de8 <__assert_fail@plt+0x32a0>
   15f10:	subs	r4, r0, #0
   15f14:	bne	1604c <__assert_fail@plt+0x3504>
   15f18:	ldr	r0, [sp, #16]
   15f1c:	bl	124a0 <gcry_free@plt>
   15f20:	str	r4, [sp, #16]
   15f24:	add	r1, sp, #16
   15f28:	mov	r0, r5
   15f2c:	bl	15970 <__assert_fail@plt+0x2e28>
   15f30:	ldr	r4, [sp, #16]
   15f34:	subs	r6, r0, #0
   15f38:	beq	15ee4 <__assert_fail@plt+0x339c>
   15f3c:	mov	r0, r4
   15f40:	bl	124a0 <gcry_free@plt>
   15f44:	mov	r0, #0
   15f48:	bl	12740 <_gpgrt_get_std_stream@plt>
   15f4c:	cmp	r5, r0
   15f50:	beq	15f5c <__assert_fail@plt+0x3414>
   15f54:	mov	r0, r5
   15f58:	bl	12644 <gpgrt_fclose@plt>
   15f5c:	cmp	r5, r8
   15f60:	beq	15f6c <__assert_fail@plt+0x3424>
   15f64:	mov	r0, r8
   15f68:	bl	12644 <gpgrt_fclose@plt>
   15f6c:	ldr	r2, [sp, #36]	; 0x24
   15f70:	ldr	r3, [r7]
   15f74:	mov	r0, r6
   15f78:	cmp	r2, r3
   15f7c:	bne	160d0 <__assert_fail@plt+0x3588>
   15f80:	add	sp, sp, #44	; 0x2c
   15f84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f88:	bl	12740 <_gpgrt_get_std_stream@plt>
   15f8c:	mov	r5, r0
   15f90:	b	15ebc <__assert_fail@plt+0x3374>
   15f94:	ldr	r1, [pc, #324]	; 160e0 <__assert_fail@plt+0x3598>
   15f98:	mov	r0, #0
   15f9c:	bl	127d0 <gpgrt_fopenmem@plt>
   15fa0:	subs	r9, r0, #0
   15fa4:	beq	160a0 <__assert_fail@plt+0x3558>
   15fa8:	ldr	r6, [pc, #308]	; 160e4 <__assert_fail@plt+0x359c>
   15fac:	add	r0, sp, #20
   15fb0:	mov	r1, #0
   15fb4:	bl	211f8 <__assert_fail@plt+0xe6b0>
   15fb8:	add	r0, sp, #20
   15fbc:	ldr	r1, [pc, #292]	; 160e8 <__assert_fail@plt+0x35a0>
   15fc0:	bl	21258 <__assert_fail@plt+0xe710>
   15fc4:	ldr	r4, [r6, #20]
   15fc8:	cmp	r4, #0
   15fcc:	beq	15fe8 <__assert_fail@plt+0x34a0>
   15fd0:	add	r1, r4, #8
   15fd4:	add	r0, sp, #20
   15fd8:	bl	21258 <__assert_fail@plt+0xe710>
   15fdc:	ldr	r4, [r4]
   15fe0:	cmp	r4, #0
   15fe4:	bne	15fd0 <__assert_fail@plt+0x3488>
   15fe8:	mov	r1, #0
   15fec:	add	r0, sp, #20
   15ff0:	bl	21258 <__assert_fail@plt+0xe710>
   15ff4:	add	r0, sp, #20
   15ff8:	mov	r1, #0
   15ffc:	bl	21338 <__assert_fail@plt+0xe7f0>
   16000:	subs	r4, r0, #0
   16004:	beq	160a0 <__assert_fail@plt+0x3558>
   16008:	mov	r3, #0
   1600c:	str	r9, [sp]
   16010:	mov	r2, r5
   16014:	ldr	r0, [r6, #16]
   16018:	mov	r1, r4
   1601c:	str	r3, [sp, #8]
   16020:	str	r3, [sp, #4]
   16024:	bl	25508 <__assert_fail@plt+0x129c0>
   16028:	mov	r6, r0
   1602c:	mov	r0, r4
   16030:	bl	124a0 <gcry_free@plt>
   16034:	cmp	r6, #0
   16038:	beq	16054 <__assert_fail@plt+0x350c>
   1603c:	mov	r8, r5
   16040:	ldr	r4, [sp, #16]
   16044:	mov	r5, r9
   16048:	b	15f3c <__assert_fail@plt+0x33f4>
   1604c:	ldr	r4, [sp, #16]
   16050:	b	15f3c <__assert_fail@plt+0x33f4>
   16054:	mov	r2, r6
   16058:	mov	r1, r6
   1605c:	mov	r0, r9
   16060:	bl	129b0 <gpgrt_fseek@plt>
   16064:	subs	r6, r0, #0
   16068:	bne	1603c <__assert_fail@plt+0x34f4>
   1606c:	mov	r8, r5
   16070:	mov	r5, r9
   16074:	b	15f24 <__assert_fail@plt+0x33dc>
   16078:	bl	12740 <_gpgrt_get_std_stream@plt>
   1607c:	mov	r5, r0
   16080:	mov	r0, #0
   16084:	bl	12740 <_gpgrt_get_std_stream@plt>
   16088:	cmp	r5, r0
   1608c:	bne	15ed4 <__assert_fail@plt+0x338c>
   16090:	mov	r0, #0
   16094:	bl	12740 <_gpgrt_get_std_stream@plt>
   16098:	bl	123b0 <gpgrt_set_binary@plt>
   1609c:	b	15ed4 <__assert_fail@plt+0x338c>
   160a0:	bl	127c4 <gpg_err_code_from_syserror@plt>
   160a4:	uxth	r6, r0
   160a8:	b	1603c <__assert_fail@plt+0x34f4>
   160ac:	bl	127c4 <gpg_err_code_from_syserror@plt>
   160b0:	uxth	r6, r0
   160b4:	mov	r0, r6
   160b8:	bl	129d4 <gpg_strerror@plt>
   160bc:	mov	r1, r8
   160c0:	mov	r2, r0
   160c4:	ldr	r0, [pc, #32]	; 160ec <__assert_fail@plt+0x35a4>
   160c8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   160cc:	b	15f6c <__assert_fail@plt+0x3424>
   160d0:	bl	124e8 <__stack_chk_fail@plt>
   160d4:	andeq	fp, r3, r0, lsl fp
   160d8:	andeq	r7, r2, ip, asr lr
   160dc:	andeq	r8, r2, r4, lsl #10
   160e0:	andeq	r8, r2, r8, asr r4
   160e4:	andeq	ip, r3, ip, asr #10
   160e8:	andeq	r8, r2, r4, lsr r7
   160ec:	andeq	r8, r2, ip, lsl r7
   160f0:	b	15970 <__assert_fail@plt+0x2e28>
   160f4:	cmp	r0, #0
   160f8:	cmpne	r1, #0
   160fc:	bxeq	lr
   16100:	b	156d8 <__assert_fail@plt+0x2b90>
   16104:	push	{r4, lr}
   16108:	mov	r0, #6
   1610c:	ldr	r4, [pc, #28]	; 16130 <__assert_fail@plt+0x35e8>
   16110:	ldr	r1, [pc, #28]	; 16134 <__assert_fail@plt+0x35ec>
   16114:	bl	12944 <setlocale@plt>
   16118:	mov	r0, r4
   1611c:	ldr	r1, [pc, #20]	; 16138 <__assert_fail@plt+0x35f0>
   16120:	bl	12a58 <bindtextdomain@plt>
   16124:	mov	r0, r4
   16128:	pop	{r4, lr}
   1612c:	b	12560 <textdomain@plt>
   16130:	andeq	r8, r2, r4, lsr #18
   16134:	muleq	r2, r8, r9
   16138:	andeq	r8, r2, r0, lsl r9
   1613c:	push	{r4, r5, r6, lr}
   16140:	mov	r1, #0
   16144:	ldr	r0, [pc, #88]	; 161a4 <__assert_fail@plt+0x365c>
   16148:	bl	1262c <bind_textdomain_codeset@plt>
   1614c:	subs	r4, r0, #0
   16150:	beq	1617c <__assert_fail@plt+0x3634>
   16154:	mov	r0, r4
   16158:	bl	128e4 <gcry_xstrdup@plt>
   1615c:	ldr	r1, [pc, #68]	; 161a8 <__assert_fail@plt+0x3660>
   16160:	mov	r4, r0
   16164:	ldr	r0, [pc, #56]	; 161a4 <__assert_fail@plt+0x365c>
   16168:	bl	1262c <bind_textdomain_codeset@plt>
   1616c:	subs	r5, r0, #0
   16170:	beq	16194 <__assert_fail@plt+0x364c>
   16174:	mov	r0, r4
   16178:	pop	{r4, r5, r6, pc}
   1617c:	mov	r0, #14
   16180:	bl	12998 <nl_langinfo@plt>
   16184:	subs	r4, r0, #0
   16188:	bne	16154 <__assert_fail@plt+0x360c>
   1618c:	mov	r0, r4
   16190:	pop	{r4, r5, r6, pc}
   16194:	mov	r0, r4
   16198:	bl	124a0 <gcry_free@plt>
   1619c:	mov	r4, r5
   161a0:	b	16174 <__assert_fail@plt+0x362c>
   161a4:	andeq	r8, r2, r4, lsr #18
   161a8:	andeq	r8, r2, ip, lsr #18
   161ac:	push	{r4, lr}
   161b0:	subs	r4, r0, #0
   161b4:	popeq	{r4, pc}
   161b8:	mov	r1, r4
   161bc:	ldr	r0, [pc, #12]	; 161d0 <__assert_fail@plt+0x3688>
   161c0:	bl	1262c <bind_textdomain_codeset@plt>
   161c4:	mov	r0, r4
   161c8:	pop	{r4, lr}
   161cc:	b	124a0 <gcry_free@plt>
   161d0:	andeq	r8, r2, r4, lsr #18
   161d4:	push	{r4, r5, r6, lr}
   161d8:	mov	r5, r0
   161dc:	bl	1613c <__assert_fail@plt+0x35f4>
   161e0:	mov	r1, r5
   161e4:	mov	r2, #5
   161e8:	mov	r4, r0
   161ec:	mov	r0, #0
   161f0:	bl	124dc <dcgettext@plt>
   161f4:	cmp	r4, #0
   161f8:	mov	r5, r0
   161fc:	beq	16214 <__assert_fail@plt+0x36cc>
   16200:	mov	r1, r4
   16204:	ldr	r0, [pc, #16]	; 1621c <__assert_fail@plt+0x36d4>
   16208:	bl	1262c <bind_textdomain_codeset@plt>
   1620c:	mov	r0, r4
   16210:	bl	124a0 <gcry_free@plt>
   16214:	mov	r0, r5
   16218:	pop	{r4, r5, r6, pc}
   1621c:	andeq	r8, r2, r4, lsr #18
   16220:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16224:	subs	r5, r0, #0
   16228:	mov	r6, r1
   1622c:	beq	1632c <__assert_fail@plt+0x37e4>
   16230:	ldr	r8, [pc, #376]	; 163b0 <__assert_fail@plt+0x3868>
   16234:	ldr	r4, [r8]
   16238:	cmp	r4, #0
   1623c:	bne	16250 <__assert_fail@plt+0x3708>
   16240:	b	16298 <__assert_fail@plt+0x3750>
   16244:	ldr	r4, [r4]
   16248:	cmp	r4, #0
   1624c:	beq	16298 <__assert_fail@plt+0x3750>
   16250:	mov	r1, r5
   16254:	add	r0, r4, #8
   16258:	bl	1238c <strcmp@plt>
   1625c:	cmp	r0, #0
   16260:	bne	16244 <__assert_fail@plt+0x36fc>
   16264:	ldr	r3, [r4, #4]
   16268:	cmp	r3, #0
   1626c:	beq	16298 <__assert_fail@plt+0x3750>
   16270:	ldr	r2, [r3, #4]
   16274:	cmp	r6, r2
   16278:	bne	1628c <__assert_fail@plt+0x3744>
   1627c:	b	16348 <__assert_fail@plt+0x3800>
   16280:	ldr	r2, [r3, #4]
   16284:	cmp	r2, r6
   16288:	beq	16348 <__assert_fail@plt+0x3800>
   1628c:	ldr	r3, [r3]
   16290:	cmp	r3, #0
   16294:	bne	16280 <__assert_fail@plt+0x3738>
   16298:	mov	r1, #0
   1629c:	mov	r0, #5
   162a0:	bl	12944 <setlocale@plt>
   162a4:	cmp	r0, #0
   162a8:	beq	1632c <__assert_fail@plt+0x37e4>
   162ac:	bl	12b0c <gcry_strdup@plt>
   162b0:	subs	r9, r0, #0
   162b4:	beq	1632c <__assert_fail@plt+0x37e4>
   162b8:	mov	r1, r5
   162bc:	mov	r0, #5
   162c0:	bl	12944 <setlocale@plt>
   162c4:	cmp	r0, #0
   162c8:	beq	16368 <__assert_fail@plt+0x3820>
   162cc:	ldr	r1, [pc, #224]	; 163b4 <__assert_fail@plt+0x386c>
   162d0:	ldr	r0, [pc, #224]	; 163b8 <__assert_fail@plt+0x3870>
   162d4:	bl	12a58 <bindtextdomain@plt>
   162d8:	mov	r2, #5
   162dc:	mov	r1, r6
   162e0:	mov	r0, #0
   162e4:	bl	124dc <dcgettext@plt>
   162e8:	mov	r1, r9
   162ec:	mov	r7, r0
   162f0:	mov	r0, #5
   162f4:	bl	12944 <setlocale@plt>
   162f8:	ldr	r1, [pc, #180]	; 163b4 <__assert_fail@plt+0x386c>
   162fc:	ldr	r0, [pc, #180]	; 163b8 <__assert_fail@plt+0x3870>
   16300:	bl	12a58 <bindtextdomain@plt>
   16304:	cmp	r4, #0
   16308:	beq	16374 <__assert_fail@plt+0x382c>
   1630c:	mov	r0, #12
   16310:	bl	12338 <gcry_malloc@plt>
   16314:	cmp	r0, #0
   16318:	ldrne	r3, [r4, #4]
   1631c:	strdne	r6, [r0, #4]
   16320:	strne	r3, [r0]
   16324:	strne	r0, [r4, #4]
   16328:	b	16350 <__assert_fail@plt+0x3808>
   1632c:	mov	r0, #0
   16330:	bl	124a0 <gcry_free@plt>
   16334:	mov	r1, r6
   16338:	mov	r2, #5
   1633c:	mov	r0, #0
   16340:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16344:	b	124dc <dcgettext@plt>
   16348:	ldr	r7, [r3, #8]
   1634c:	mov	r9, #0
   16350:	mov	r0, r9
   16354:	bl	124a0 <gcry_free@plt>
   16358:	cmp	r7, #0
   1635c:	beq	16334 <__assert_fail@plt+0x37ec>
   16360:	mov	r0, r7
   16364:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16368:	mov	r0, r9
   1636c:	bl	124a0 <gcry_free@plt>
   16370:	b	16334 <__assert_fail@plt+0x37ec>
   16374:	mov	r0, r5
   16378:	bl	12788 <strlen@plt>
   1637c:	add	r0, r0, #12
   16380:	bl	12338 <gcry_malloc@plt>
   16384:	subs	r4, r0, #0
   16388:	beq	16350 <__assert_fail@plt+0x3808>
   1638c:	mov	r1, r5
   16390:	add	r0, r4, #8
   16394:	bl	12620 <strcpy@plt>
   16398:	ldr	r2, [r8]
   1639c:	mov	r3, #0
   163a0:	str	r2, [r4]
   163a4:	str	r4, [r8]
   163a8:	str	r3, [r4, #4]
   163ac:	b	1630c <__assert_fail@plt+0x37c4>
   163b0:	andeq	ip, r3, ip, ror #5
   163b4:	andeq	r8, r2, r0, lsl r9
   163b8:	andeq	r8, r2, r4, lsr #18
   163bc:	push	{r4, r5, r6, r7, lr}
   163c0:	ldrb	r6, [r0]
   163c4:	cmp	r6, #48	; 0x30
   163c8:	beq	16490 <__assert_fail@plt+0x3948>
   163cc:	sub	r7, r6, #48	; 0x30
   163d0:	uxtb	ip, r7
   163d4:	cmp	ip, #9
   163d8:	movhi	ip, #0
   163dc:	bhi	1641c <__assert_fail@plt+0x38d4>
   163e0:	ldrb	r4, [r0, #1]
   163e4:	sub	lr, r4, #48	; 0x30
   163e8:	add	r5, r0, #1
   163ec:	mov	ip, #0
   163f0:	b	16400 <__assert_fail@plt+0x38b8>
   163f4:	ldrb	r4, [r5, #1]!
   163f8:	sub	r7, r6, #48	; 0x30
   163fc:	sub	lr, r4, #48	; 0x30
   16400:	add	ip, ip, ip, lsl #2
   16404:	uxtb	lr, lr
   16408:	cmp	lr, #9
   1640c:	mov	r6, r4
   16410:	add	ip, r7, ip, lsl #1
   16414:	mov	r0, r5
   16418:	bls	163f4 <__assert_fail@plt+0x38ac>
   1641c:	str	ip, [r1]
   16420:	ldrb	r1, [r0]
   16424:	cmp	r1, #46	; 0x2e
   16428:	bne	164a8 <__assert_fail@plt+0x3960>
   1642c:	ldrb	r4, [r0, #1]
   16430:	add	lr, r0, #1
   16434:	cmp	r4, #48	; 0x30
   16438:	beq	164b4 <__assert_fail@plt+0x396c>
   1643c:	sub	ip, r4, #48	; 0x30
   16440:	uxtb	r1, ip
   16444:	cmp	r1, #9
   16448:	movhi	r1, #0
   1644c:	bhi	16470 <__assert_fail@plt+0x3928>
   16450:	mov	r1, #0
   16454:	ldrb	r4, [lr, #1]!
   16458:	add	r1, r1, r1, lsl #2
   1645c:	add	r1, ip, r1, lsl #1
   16460:	sub	ip, r4, #48	; 0x30
   16464:	uxtb	r0, ip
   16468:	cmp	r0, #9
   1646c:	bls	16454 <__assert_fail@plt+0x390c>
   16470:	str	r1, [r2]
   16474:	ldrb	r2, [lr]
   16478:	cmp	r2, #46	; 0x2e
   1647c:	movne	r2, #0
   16480:	beq	164cc <__assert_fail@plt+0x3984>
   16484:	str	r2, [r3]
   16488:	mov	r0, lr
   1648c:	pop	{r4, r5, r6, r7, pc}
   16490:	ldrb	r4, [r0, #1]
   16494:	sub	lr, r4, #48	; 0x30
   16498:	uxtb	ip, lr
   1649c:	cmp	ip, #9
   164a0:	movhi	r7, #0
   164a4:	bhi	163e8 <__assert_fail@plt+0x38a0>
   164a8:	mov	lr, #0
   164ac:	mov	r0, lr
   164b0:	pop	{r4, r5, r6, r7, pc}
   164b4:	ldrb	r1, [r0, #2]
   164b8:	sub	r1, r1, #48	; 0x30
   164bc:	cmp	r1, #9
   164c0:	bls	164a8 <__assert_fail@plt+0x3960>
   164c4:	mov	ip, #0
   164c8:	b	16450 <__assert_fail@plt+0x3908>
   164cc:	ldrb	r0, [lr, #1]
   164d0:	add	r2, lr, #1
   164d4:	cmp	r0, #48	; 0x30
   164d8:	beq	1651c <__assert_fail@plt+0x39d4>
   164dc:	sub	r1, r0, #48	; 0x30
   164e0:	uxtb	r0, r1
   164e4:	cmp	r0, #9
   164e8:	movhi	lr, r2
   164ec:	movhi	r2, #0
   164f0:	bhi	16484 <__assert_fail@plt+0x393c>
   164f4:	mov	lr, r2
   164f8:	mov	r2, #0
   164fc:	ldrb	r0, [lr, #1]!
   16500:	add	r2, r2, r2, lsl #2
   16504:	add	r2, r1, r2, lsl #1
   16508:	sub	r1, r0, #48	; 0x30
   1650c:	uxtb	r0, r1
   16510:	cmp	r0, #9
   16514:	bls	164fc <__assert_fail@plt+0x39b4>
   16518:	b	16484 <__assert_fail@plt+0x393c>
   1651c:	ldrb	r1, [lr, #2]
   16520:	sub	r1, r1, #48	; 0x30
   16524:	cmp	r1, #9
   16528:	bls	164a8 <__assert_fail@plt+0x3960>
   1652c:	mov	r1, #0
   16530:	b	164f4 <__assert_fail@plt+0x39ac>
   16534:	cmp	r1, #0
   16538:	push	{r4, lr}
   1653c:	mov	r4, r0
   16540:	beq	16570 <__assert_fail@plt+0x3a28>
   16544:	mov	r0, r1
   16548:	bl	1235c <getpwnam@plt>
   1654c:	cmp	r0, #0
   16550:	popeq	{r4, pc}
   16554:	cmp	r4, #0
   16558:	ldr	r0, [r0, #20]
   1655c:	beq	16568 <__assert_fail@plt+0x3a20>
   16560:	pop	{r4, lr}
   16564:	b	128e4 <gcry_xstrdup@plt>
   16568:	pop	{r4, lr}
   1656c:	b	12b0c <gcry_strdup@plt>
   16570:	bl	12404 <getuid@plt>
   16574:	bl	123bc <getpwuid@plt>
   16578:	cmp	r0, #0
   1657c:	bne	16554 <__assert_fail@plt+0x3a0c>
   16580:	pop	{r4, pc}
   16584:	push	{r4, r5, r6, r7, r8, lr}
   16588:	sub	sp, sp, #200	; 0xc8
   1658c:	ldr	r8, [pc, #188]	; 16650 <__assert_fail@plt+0x3b08>
   16590:	mov	r5, r1
   16594:	str	r0, [sp, #4]
   16598:	ldr	r3, [r8]
   1659c:	str	r3, [sp, #196]	; 0xc4
   165a0:	bl	12788 <strlen@plt>
   165a4:	mov	r6, r0
   165a8:	ldr	r0, [r5], #4
   165ac:	cmp	r0, #0
   165b0:	str	r0, [sp, #8]
   165b4:	beq	165ec <__assert_fail@plt+0x3aa4>
   165b8:	bl	12788 <strlen@plt>
   165bc:	add	r4, sp, #12
   165c0:	add	r7, sp, #196	; 0xc4
   165c4:	add	r6, r6, r0
   165c8:	b	165dc <__assert_fail@plt+0x3a94>
   165cc:	bl	12788 <strlen@plt>
   165d0:	cmp	r7, r4
   165d4:	add	r6, r6, r0
   165d8:	beq	1663c <__assert_fail@plt+0x3af4>
   165dc:	ldr	r0, [r5], #4
   165e0:	cmp	r0, #0
   165e4:	str	r0, [r4], #4
   165e8:	bne	165cc <__assert_fail@plt+0x3a84>
   165ec:	add	r0, r6, #1
   165f0:	bl	12338 <gcry_malloc@plt>
   165f4:	subs	r5, r0, #0
   165f8:	beq	16620 <__assert_fail@plt+0x3ad8>
   165fc:	ldr	r1, [sp, #4]
   16600:	cmp	r1, #0
   16604:	beq	16620 <__assert_fail@plt+0x3ad8>
   16608:	add	r4, sp, #8
   1660c:	mov	r0, r5
   16610:	bl	124c4 <stpcpy@plt>
   16614:	ldr	r1, [r4], #4
   16618:	cmp	r1, #0
   1661c:	bne	16610 <__assert_fail@plt+0x3ac8>
   16620:	ldr	r2, [sp, #196]	; 0xc4
   16624:	ldr	r3, [r8]
   16628:	mov	r0, r5
   1662c:	cmp	r2, r3
   16630:	bne	1664c <__assert_fail@plt+0x3b04>
   16634:	add	sp, sp, #200	; 0xc8
   16638:	pop	{r4, r5, r6, r7, r8, pc}
   1663c:	mov	r0, #22
   16640:	bl	129a4 <gpg_err_set_errno@plt>
   16644:	mov	r5, #0
   16648:	b	16620 <__assert_fail@plt+0x3ad8>
   1664c:	bl	124e8 <__stack_chk_fail@plt>
   16650:	andeq	fp, r3, r0, lsl fp
   16654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16658:	sub	sp, sp, #148	; 0x94
   1665c:	ldr	r7, [pc, #1020]	; 16a60 <__assert_fail@plt+0x3f18>
   16660:	mov	r9, r0
   16664:	mov	r0, r1
   16668:	ldr	r3, [r7]
   1666c:	mov	fp, r2
   16670:	mov	r6, r1
   16674:	str	r3, [sp, #140]	; 0x8c
   16678:	bl	12788 <strlen@plt>
   1667c:	and	r8, r9, #1
   16680:	mov	r5, r0
   16684:	ldr	r0, [fp], #4
   16688:	cmp	r0, #0
   1668c:	str	r0, [sp, #12]
   16690:	addeq	r5, r5, #1
   16694:	beq	166d4 <__assert_fail@plt+0x3b8c>
   16698:	bl	12788 <strlen@plt>
   1669c:	add	r5, r5, #2
   166a0:	add	r4, sp, #16
   166a4:	add	sl, sp, #140	; 0x8c
   166a8:	add	r5, r5, r0
   166ac:	b	166c4 <__assert_fail@plt+0x3b7c>
   166b0:	bl	12788 <strlen@plt>
   166b4:	cmp	sl, r4
   166b8:	add	r0, r0, #1
   166bc:	add	r5, r5, r0
   166c0:	beq	16860 <__assert_fail@plt+0x3d18>
   166c4:	ldr	r0, [fp], #4
   166c8:	cmp	r0, #0
   166cc:	str	r0, [r4], #4
   166d0:	bne	166b0 <__assert_fail@plt+0x3b68>
   166d4:	ldrb	r3, [r6]
   166d8:	add	r5, r5, #1
   166dc:	cmp	r3, #126	; 0x7e
   166e0:	beq	167dc <__assert_fail@plt+0x3c94>
   166e4:	mov	r4, #0
   166e8:	mov	fp, r4
   166ec:	mov	r3, #1
   166f0:	str	r3, [sp, #4]
   166f4:	cmp	r8, #0
   166f8:	mov	r0, r5
   166fc:	beq	16878 <__assert_fail@plt+0x3d30>
   16700:	bl	122fc <gcry_xmalloc@plt>
   16704:	mov	sl, r0
   16708:	cmp	r4, #0
   1670c:	beq	1697c <__assert_fail@plt+0x3e34>
   16710:	mov	r1, r4
   16714:	mov	r0, sl
   16718:	bl	124c4 <stpcpy@plt>
   1671c:	ldr	r3, [sp, #4]
   16720:	add	r1, r6, r3
   16724:	bl	124c4 <stpcpy@plt>
   16728:	mov	r4, r0
   1672c:	mov	r0, fp
   16730:	bl	124a0 <gcry_free@plt>
   16734:	ldr	r1, [sp, #12]
   16738:	cmp	r1, #0
   1673c:	addne	fp, sp, #16
   16740:	movne	r6, #0
   16744:	movne	r5, #47	; 0x2f
   16748:	bne	16770 <__assert_fail@plt+0x3c28>
   1674c:	b	167ac <__assert_fail@plt+0x3c64>
   16750:	mov	r0, r4
   16754:	add	r6, r6, #1
   16758:	strb	r5, [r0], #1
   1675c:	bl	124c4 <stpcpy@plt>
   16760:	ldr	r1, [fp], #4
   16764:	cmp	r1, #0
   16768:	mov	r4, r0
   1676c:	beq	167ac <__assert_fail@plt+0x3c64>
   16770:	cmp	r6, #0
   16774:	bne	16750 <__assert_fail@plt+0x3c08>
   16778:	ldrb	r3, [sl]
   1677c:	cmp	r3, #47	; 0x2f
   16780:	bne	16750 <__assert_fail@plt+0x3c08>
   16784:	ldrb	r3, [sl, #1]
   16788:	cmp	r3, #0
   1678c:	bne	16750 <__assert_fail@plt+0x3c08>
   16790:	mov	r0, r4
   16794:	bl	124c4 <stpcpy@plt>
   16798:	ldr	r1, [fp], #4
   1679c:	add	r6, r6, #1
   167a0:	cmp	r1, #0
   167a4:	mov	r4, r0
   167a8:	bne	16770 <__assert_fail@plt+0x3c28>
   167ac:	tst	r9, #2
   167b0:	beq	167c0 <__assert_fail@plt+0x3c78>
   167b4:	ldrb	r3, [sl]
   167b8:	cmp	r3, #47	; 0x2f
   167bc:	bne	16890 <__assert_fail@plt+0x3d48>
   167c0:	ldr	r2, [sp, #140]	; 0x8c
   167c4:	ldr	r3, [r7]
   167c8:	mov	r0, sl
   167cc:	cmp	r2, r3
   167d0:	bne	16a5c <__assert_fail@plt+0x3f14>
   167d4:	add	sp, sp, #148	; 0x94
   167d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167dc:	ldrb	r3, [r6, #1]
   167e0:	cmp	r3, #0
   167e4:	cmpne	r3, #47	; 0x2f
   167e8:	beq	16934 <__assert_fail@plt+0x3dec>
   167ec:	cmp	r8, #0
   167f0:	add	r0, r6, #1
   167f4:	beq	16990 <__assert_fail@plt+0x3e48>
   167f8:	bl	128e4 <gcry_xstrdup@plt>
   167fc:	mov	sl, r0
   16800:	mov	r1, #47	; 0x2f
   16804:	mov	r0, sl
   16808:	bl	127ac <strchr@plt>
   1680c:	cmp	r0, #0
   16810:	movne	r3, #0
   16814:	strbne	r3, [r0]
   16818:	mov	r0, sl
   1681c:	bl	12788 <strlen@plt>
   16820:	mov	r1, sl
   16824:	mov	r4, r0
   16828:	mov	r0, r8
   1682c:	bl	16534 <__assert_fail@plt+0x39ec>
   16830:	mov	fp, r0
   16834:	mov	r0, sl
   16838:	bl	124a0 <gcry_free@plt>
   1683c:	cmp	fp, #0
   16840:	beq	1696c <__assert_fail@plt+0x3e24>
   16844:	mov	r0, fp
   16848:	bl	12788 <strlen@plt>
   1684c:	add	r3, r4, #1
   16850:	str	r3, [sp, #4]
   16854:	mov	r4, fp
   16858:	add	r5, r5, r0
   1685c:	b	166f4 <__assert_fail@plt+0x3bac>
   16860:	cmp	r8, #0
   16864:	bne	16a4c <__assert_fail@plt+0x3f04>
   16868:	mov	r0, #22
   1686c:	mov	sl, r8
   16870:	bl	129a4 <gpg_err_set_errno@plt>
   16874:	b	167c0 <__assert_fail@plt+0x3c78>
   16878:	bl	12338 <gcry_malloc@plt>
   1687c:	subs	sl, r0, #0
   16880:	bne	16708 <__assert_fail@plt+0x3bc0>
   16884:	mov	r0, fp
   16888:	bl	124a0 <gcry_free@plt>
   1688c:	b	167c0 <__assert_fail@plt+0x3c78>
   16890:	bl	1d6ec <__assert_fail@plt+0xaba4>
   16894:	subs	r5, r0, #0
   16898:	beq	169f8 <__assert_fail@plt+0x3eb0>
   1689c:	bl	12788 <strlen@plt>
   168a0:	mov	r4, r0
   168a4:	mov	r0, sl
   168a8:	bl	12788 <strlen@plt>
   168ac:	cmp	r8, #0
   168b0:	add	r0, r4, r0
   168b4:	add	r0, r0, #2
   168b8:	beq	169a0 <__assert_fail@plt+0x3e58>
   168bc:	bl	122fc <gcry_xmalloc@plt>
   168c0:	mov	r4, r0
   168c4:	ldrb	r3, [r5]
   168c8:	cmp	r3, #47	; 0x2f
   168cc:	bne	168dc <__assert_fail@plt+0x3d94>
   168d0:	ldrb	r2, [r5, #1]
   168d4:	cmp	r2, #0
   168d8:	beq	169c4 <__assert_fail@plt+0x3e7c>
   168dc:	mov	r1, r5
   168e0:	mov	r0, r4
   168e4:	bl	124c4 <stpcpy@plt>
   168e8:	mov	r3, #47	; 0x2f
   168ec:	mov	r1, sl
   168f0:	strb	r3, [r0], #1
   168f4:	bl	12620 <strcpy@plt>
   168f8:	mov	r0, r5
   168fc:	bl	124a0 <gcry_free@plt>
   16900:	mov	r0, sl
   16904:	bl	124a0 <gcry_free@plt>
   16908:	mov	r0, r4
   1690c:	bl	12788 <strlen@plt>
   16910:	cmp	r0, #2
   16914:	bls	1692c <__assert_fail@plt+0x3de4>
   16918:	sub	r3, r0, #2
   1691c:	add	r2, r4, r3
   16920:	ldrb	r3, [r4, r3]
   16924:	cmp	r3, #47	; 0x2f
   16928:	beq	169d8 <__assert_fail@plt+0x3e90>
   1692c:	mov	sl, r4
   16930:	b	167c0 <__assert_fail@plt+0x3c78>
   16934:	ldr	r0, [pc, #296]	; 16a64 <__assert_fail@plt+0x3f1c>
   16938:	bl	12674 <getenv@plt>
   1693c:	subs	r4, r0, #0
   16940:	movne	fp, #0
   16944:	beq	16a30 <__assert_fail@plt+0x3ee8>
   16948:	ldrb	r3, [r4]
   1694c:	cmp	r3, #0
   16950:	beq	16970 <__assert_fail@plt+0x3e28>
   16954:	mov	r0, r4
   16958:	bl	12788 <strlen@plt>
   1695c:	mov	r3, #1
   16960:	str	r3, [sp, #4]
   16964:	add	r5, r5, r0
   16968:	b	166f4 <__assert_fail@plt+0x3bac>
   1696c:	mov	r4, fp
   16970:	mov	r3, #1
   16974:	str	r3, [sp, #4]
   16978:	b	166f4 <__assert_fail@plt+0x3bac>
   1697c:	mov	r1, r6
   16980:	mov	r0, sl
   16984:	bl	124c4 <stpcpy@plt>
   16988:	mov	r4, r0
   1698c:	b	1672c <__assert_fail@plt+0x3be4>
   16990:	bl	12b0c <gcry_strdup@plt>
   16994:	subs	sl, r0, #0
   16998:	bne	16800 <__assert_fail@plt+0x3cb8>
   1699c:	b	167c0 <__assert_fail@plt+0x3c78>
   169a0:	bl	12338 <gcry_malloc@plt>
   169a4:	subs	r4, r0, #0
   169a8:	bne	168c4 <__assert_fail@plt+0x3d7c>
   169ac:	mov	r0, r5
   169b0:	bl	124a0 <gcry_free@plt>
   169b4:	mov	r0, sl
   169b8:	bl	124a0 <gcry_free@plt>
   169bc:	mov	sl, r8
   169c0:	b	167c0 <__assert_fail@plt+0x3c78>
   169c4:	mov	r0, r4
   169c8:	mov	r1, sl
   169cc:	strb	r3, [r0], #1
   169d0:	bl	12620 <strcpy@plt>
   169d4:	b	168f8 <__assert_fail@plt+0x3db0>
   169d8:	add	r0, r4, r0
   169dc:	ldrb	r3, [r0, #-1]
   169e0:	cmp	r3, #46	; 0x2e
   169e4:	moveq	r3, #0
   169e8:	moveq	sl, r4
   169ec:	strbeq	r3, [r2]
   169f0:	bne	1692c <__assert_fail@plt+0x3de4>
   169f4:	b	167c0 <__assert_fail@plt+0x3c78>
   169f8:	cmp	r8, #0
   169fc:	beq	169b4 <__assert_fail@plt+0x3e6c>
   16a00:	ldr	r3, [pc, #96]	; 16a68 <__assert_fail@plt+0x3f20>
   16a04:	ldr	r4, [r3]
   16a08:	bl	1280c <__errno_location@plt>
   16a0c:	ldr	r0, [r0]
   16a10:	bl	126c8 <strerror@plt>
   16a14:	ldr	r2, [pc, #80]	; 16a6c <__assert_fail@plt+0x3f24>
   16a18:	mov	r1, #1
   16a1c:	mov	r3, r0
   16a20:	mov	r0, r4
   16a24:	bl	128d8 <__fprintf_chk@plt>
   16a28:	mov	r0, #2
   16a2c:	bl	12764 <exit@plt>
   16a30:	mov	r1, r4
   16a34:	mov	r0, r8
   16a38:	bl	16534 <__assert_fail@plt+0x39ec>
   16a3c:	subs	fp, r0, #0
   16a40:	mov	r4, fp
   16a44:	beq	16970 <__assert_fail@plt+0x3e28>
   16a48:	b	16948 <__assert_fail@plt+0x3e00>
   16a4c:	ldr	r2, [pc, #28]	; 16a70 <__assert_fail@plt+0x3f28>
   16a50:	mov	r1, #432	; 0x1b0
   16a54:	ldr	r0, [pc, #24]	; 16a74 <__assert_fail@plt+0x3f2c>
   16a58:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   16a5c:	bl	124e8 <__stack_chk_fail@plt>
   16a60:	andeq	fp, r3, r0, lsl fp
   16a64:	andeq	r8, r2, r0, ror r9
   16a68:	andeq	ip, r3, r0, lsl #5
   16a6c:	andeq	r8, r2, r8, ror r9
   16a70:	andeq	r8, r2, r4, lsr r9
   16a74:	andeq	r8, r2, r4, asr r9
   16a78:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a7c:	mov	fp, r1
   16a80:	ldrb	r1, [r0]
   16a84:	mov	r7, r0
   16a88:	mov	r6, r2
   16a8c:	cmp	r1, #0
   16a90:	beq	16c64 <__assert_fail@plt+0x411c>
   16a94:	mov	r4, r0
   16a98:	mov	r5, #0
   16a9c:	rsb	r8, r0, #1
   16aa0:	b	16ab8 <__assert_fail@plt+0x3f70>
   16aa4:	add	r5, r5, #1
   16aa8:	add	r0, r8, r4
   16aac:	ldrb	r1, [r4, #1]!
   16ab0:	cmp	r1, #0
   16ab4:	beq	16afc <__assert_fail@plt+0x3fb4>
   16ab8:	cmp	r1, #37	; 0x25
   16abc:	cmpne	r1, #58	; 0x3a
   16ac0:	moveq	r3, #1
   16ac4:	movne	r3, #0
   16ac8:	cmp	r1, #10
   16acc:	orreq	r3, r3, #1
   16ad0:	cmp	r3, #0
   16ad4:	bne	16aa4 <__assert_fail@plt+0x3f5c>
   16ad8:	subs	r0, fp, #0
   16adc:	beq	16aa8 <__assert_fail@plt+0x3f60>
   16ae0:	bl	127ac <strchr@plt>
   16ae4:	cmp	r0, #0
   16ae8:	bne	16aa4 <__assert_fail@plt+0x3f5c>
   16aec:	add	r0, r8, r4
   16af0:	ldrb	r1, [r4, #1]!
   16af4:	cmp	r1, #0
   16af8:	bne	16ab8 <__assert_fail@plt+0x3f70>
   16afc:	add	r0, r0, r5, lsl #1
   16b00:	add	r0, r0, #1
   16b04:	cmp	r6, #0
   16b08:	beq	16c44 <__assert_fail@plt+0x40fc>
   16b0c:	bl	122fc <gcry_xmalloc@plt>
   16b10:	ldrb	r5, [r7]
   16b14:	cmp	r5, #0
   16b18:	mov	r6, r0
   16b1c:	beq	16c5c <__assert_fail@plt+0x4114>
   16b20:	mov	r4, #0
   16b24:	mov	r3, #37	; 0x25
   16b28:	mov	r2, #97	; 0x61
   16b2c:	b	16ba8 <__assert_fail@plt+0x4060>
   16b30:	cmp	r5, #37	; 0x25
   16b34:	beq	16bf4 <__assert_fail@plt+0x40ac>
   16b38:	cmp	r5, #10
   16b3c:	beq	16c18 <__assert_fail@plt+0x40d0>
   16b40:	cmp	fp, #0
   16b44:	beq	16c38 <__assert_fail@plt+0x40f0>
   16b48:	mov	r1, r5
   16b4c:	mov	r0, fp
   16b50:	bl	127ac <strchr@plt>
   16b54:	mov	r3, #37	; 0x25
   16b58:	mov	r2, #97	; 0x61
   16b5c:	cmp	r0, #0
   16b60:	beq	16c38 <__assert_fail@plt+0x40f0>
   16b64:	lsr	r1, r5, #4
   16b68:	cmp	r1, #9
   16b6c:	addls	r1, r1, #48	; 0x30
   16b70:	addhi	r1, r1, #87	; 0x57
   16b74:	and	r5, r5, #15
   16b78:	strb	r3, [sl]
   16b7c:	strb	r1, [r8]
   16b80:	add	r1, r4, #2
   16b84:	add	r4, r4, #3
   16b88:	cmp	r5, #9
   16b8c:	add	r8, r6, r4
   16b90:	addls	r5, r5, #48	; 0x30
   16b94:	addhi	r5, r5, #87	; 0x57
   16b98:	strb	r5, [r6, r1]
   16b9c:	ldrb	r5, [r7, #1]!
   16ba0:	cmp	r5, #0
   16ba4:	beq	16be4 <__assert_fail@plt+0x409c>
   16ba8:	add	r9, r4, #1
   16bac:	cmp	r5, #58	; 0x3a
   16bb0:	add	r8, r6, r9
   16bb4:	add	sl, r6, r4
   16bb8:	bne	16b30 <__assert_fail@plt+0x3fe8>
   16bbc:	add	r1, r4, #2
   16bc0:	mov	r0, #51	; 0x33
   16bc4:	strb	r3, [r6, r4]
   16bc8:	strb	r0, [r6, r9]
   16bcc:	strb	r2, [r6, r1]
   16bd0:	ldrb	r5, [r7, #1]!
   16bd4:	add	r4, r4, #3
   16bd8:	add	r8, r6, r4
   16bdc:	cmp	r5, #0
   16be0:	bne	16ba8 <__assert_fail@plt+0x4060>
   16be4:	mov	r3, #0
   16be8:	strb	r3, [r8]
   16bec:	mov	r0, r6
   16bf0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bf4:	add	r1, r4, #2
   16bf8:	mov	r0, #50	; 0x32
   16bfc:	strb	r5, [sl]
   16c00:	add	r4, r4, #3
   16c04:	strb	r0, [r8]
   16c08:	mov	r0, #53	; 0x35
   16c0c:	strb	r0, [r6, r1]
   16c10:	add	r8, r6, r4
   16c14:	b	16b9c <__assert_fail@plt+0x4054>
   16c18:	add	r1, r4, #2
   16c1c:	mov	r0, #48	; 0x30
   16c20:	add	r4, r4, #3
   16c24:	strb	r3, [sl]
   16c28:	strb	r0, [r8]
   16c2c:	strb	r2, [r6, r1]
   16c30:	add	r8, r6, r4
   16c34:	b	16b9c <__assert_fail@plt+0x4054>
   16c38:	mov	r4, r9
   16c3c:	strb	r5, [sl]
   16c40:	b	16b9c <__assert_fail@plt+0x4054>
   16c44:	bl	12338 <gcry_malloc@plt>
   16c48:	subs	r6, r0, #0
   16c4c:	beq	16bec <__assert_fail@plt+0x40a4>
   16c50:	ldrb	r5, [r7]
   16c54:	cmp	r5, #0
   16c58:	bne	16b20 <__assert_fail@plt+0x3fd8>
   16c5c:	mov	r8, r6
   16c60:	b	16be4 <__assert_fail@plt+0x409c>
   16c64:	mov	r0, #1
   16c68:	b	16b04 <__assert_fail@plt+0x3fbc>
   16c6c:	ldrb	r3, [r0]
   16c70:	mov	r2, r0
   16c74:	cmp	r3, #0
   16c78:	beq	16cac <__assert_fail@plt+0x4164>
   16c7c:	mov	r0, #0
   16c80:	and	r3, r3, #192	; 0xc0
   16c84:	cmp	r3, #128	; 0x80
   16c88:	addne	r0, r0, #1
   16c8c:	cmn	r1, #1
   16c90:	beq	16c9c <__assert_fail@plt+0x4154>
   16c94:	subs	r1, r1, #1
   16c98:	bxeq	lr
   16c9c:	ldrb	r3, [r2, #1]!
   16ca0:	cmp	r3, #0
   16ca4:	bne	16c80 <__assert_fail@plt+0x4138>
   16ca8:	bx	lr
   16cac:	mov	r0, r3
   16cb0:	bx	lr
   16cb4:	cmp	r2, #0
   16cb8:	beq	16d20 <__assert_fail@plt+0x41d8>
   16cbc:	add	r2, r0, r2
   16cc0:	push	{r4, r5, r6, lr}
   16cc4:	sub	r0, r0, #1
   16cc8:	sub	r6, r2, #1
   16ccc:	sub	r1, r1, #1
   16cd0:	ldrb	lr, [r0, #1]!
   16cd4:	ldrb	ip, [r1, #1]!
   16cd8:	mov	r2, lr
   16cdc:	cmp	lr, ip
   16ce0:	mov	r3, ip
   16ce4:	sub	r5, lr, #97	; 0x61
   16ce8:	sub	r4, ip, #97	; 0x61
   16cec:	beq	16d08 <__assert_fail@plt+0x41c0>
   16cf0:	cmp	r5, #25
   16cf4:	bicls	r2, lr, #32
   16cf8:	cmp	r4, #25
   16cfc:	bicls	r3, ip, #32
   16d00:	cmp	r3, r2
   16d04:	bne	16d18 <__assert_fail@plt+0x41d0>
   16d08:	cmp	r0, r6
   16d0c:	bne	16cd0 <__assert_fail@plt+0x4188>
   16d10:	mov	r0, #0
   16d14:	pop	{r4, r5, r6, pc}
   16d18:	sub	r0, r2, r3
   16d1c:	pop	{r4, r5, r6, pc}
   16d20:	mov	r0, r2
   16d24:	bx	lr
   16d28:	push	{r4, r5, r6, lr}
   16d2c:	mov	r4, r0
   16d30:	mov	r0, r1
   16d34:	mov	r6, r1
   16d38:	bl	12788 <strlen@plt>
   16d3c:	mov	r1, r6
   16d40:	mov	r2, r0
   16d44:	mov	r5, r0
   16d48:	mov	r0, r4
   16d4c:	bl	12ac4 <strncmp@plt>
   16d50:	cmp	r0, #0
   16d54:	bne	16da4 <__assert_fail@plt+0x425c>
   16d58:	ldrb	r2, [r4, r5]
   16d5c:	add	r0, r4, r5
   16d60:	tst	r2, #223	; 0xdf
   16d64:	sub	r3, r2, #9
   16d68:	clz	r3, r3
   16d6c:	lsr	r3, r3, #5
   16d70:	movne	r1, r3
   16d74:	moveq	r1, #1
   16d78:	cmp	r1, #0
   16d7c:	beq	16da4 <__assert_fail@plt+0x425c>
   16d80:	cmp	r2, #32
   16d84:	orreq	r3, r3, #1
   16d88:	cmp	r3, #0
   16d8c:	popeq	{r4, r5, r6, pc}
   16d90:	ldrb	r3, [r0, #1]!
   16d94:	cmp	r3, #9
   16d98:	cmpne	r3, #32
   16d9c:	beq	16d90 <__assert_fail@plt+0x4248>
   16da0:	pop	{r4, r5, r6, pc}
   16da4:	mov	r0, #0
   16da8:	pop	{r4, r5, r6, pc}
   16dac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16db0:	subs	r5, r1, #0
   16db4:	beq	16e60 <__assert_fail@plt+0x4318>
   16db8:	mov	r4, r0
   16dbc:	mov	r8, r2
   16dc0:	bl	12704 <__ctype_toupper_loc@plt>
   16dc4:	ldrb	r3, [r8]
   16dc8:	mov	r1, r5
   16dcc:	add	r9, r4, r1
   16dd0:	mov	r5, r4
   16dd4:	ldr	r0, [r0]
   16dd8:	ldr	sl, [r0, r3, lsl #2]
   16ddc:	b	16df0 <__assert_fail@plt+0x42a8>
   16de0:	cmp	lr, #0
   16de4:	beq	16e68 <__assert_fail@plt+0x4320>
   16de8:	mov	r1, lr
   16dec:	mov	r5, r3
   16df0:	mov	r3, r5
   16df4:	sub	lr, r1, #1
   16df8:	ldrb	r2, [r3], #1
   16dfc:	ldr	r2, [r0, r2, lsl #2]
   16e00:	cmp	r2, sl
   16e04:	bne	16de0 <__assert_fail@plt+0x4298>
   16e08:	cmp	r3, r9
   16e0c:	add	r4, r8, #1
   16e10:	ldrb	ip, [r8, #1]
   16e14:	beq	16e74 <__assert_fail@plt+0x432c>
   16e18:	ldrb	r6, [r3]
   16e1c:	ldr	r2, [r0, ip, lsl #2]
   16e20:	ldr	r6, [r0, r6, lsl #2]
   16e24:	cmp	r6, r2
   16e28:	bne	16e58 <__assert_fail@plt+0x4310>
   16e2c:	add	fp, r5, r1
   16e30:	add	r1, r3, #1
   16e34:	b	16e4c <__assert_fail@plt+0x4304>
   16e38:	ldrb	r2, [r1], #1
   16e3c:	ldr	r6, [r0, ip, lsl #2]
   16e40:	ldr	r7, [r0, r2, lsl #2]
   16e44:	cmp	r7, r6
   16e48:	bne	16e58 <__assert_fail@plt+0x4310>
   16e4c:	cmp	fp, r1
   16e50:	ldrb	ip, [r4, #1]!
   16e54:	bne	16e38 <__assert_fail@plt+0x42f0>
   16e58:	cmp	ip, #0
   16e5c:	bne	16de8 <__assert_fail@plt+0x42a0>
   16e60:	mov	r0, r5
   16e64:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e68:	mov	r5, lr
   16e6c:	mov	r0, r5
   16e70:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e74:	cmp	ip, #0
   16e78:	bne	16de0 <__assert_fail@plt+0x4298>
   16e7c:	b	16e60 <__assert_fail@plt+0x4318>
   16e80:	cmp	r1, #0
   16e84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e88:	beq	16ed8 <__assert_fail@plt+0x4390>
   16e8c:	ldrb	r6, [r2]
   16e90:	add	r8, r1, #1
   16e94:	add	r8, r2, r8
   16e98:	sub	r3, r6, #97	; 0x61
   16e9c:	cmp	r3, #25
   16ea0:	add	r8, r0, r8
   16ea4:	andls	r6, r6, #223	; 0xdf
   16ea8:	add	r7, r0, r1
   16eac:	ldrb	r1, [r0]
   16eb0:	add	r3, r0, #1
   16eb4:	mov	r9, r0
   16eb8:	sub	r0, r1, #97	; 0x61
   16ebc:	cmp	r0, #25
   16ec0:	bicls	r1, r1, #32
   16ec4:	cmp	r6, r1
   16ec8:	mov	r0, r3
   16ecc:	beq	16ee4 <__assert_fail@plt+0x439c>
   16ed0:	cmp	r7, r3
   16ed4:	bne	16eac <__assert_fail@plt+0x4364>
   16ed8:	mov	r9, #0
   16edc:	mov	r0, r9
   16ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ee4:	cmp	r3, r7
   16ee8:	add	lr, r2, #1
   16eec:	ldrb	ip, [r2, #1]
   16ef0:	beq	16f44 <__assert_fail@plt+0x43fc>
   16ef4:	sub	sl, r8, r3
   16ef8:	b	16f08 <__assert_fail@plt+0x43c0>
   16efc:	ldrb	ip, [lr, #1]!
   16f00:	cmp	lr, sl
   16f04:	beq	16f34 <__assert_fail@plt+0x43ec>
   16f08:	ldrb	r1, [r3]
   16f0c:	sub	r4, ip, #97	; 0x61
   16f10:	add	r3, r3, #1
   16f14:	sub	r5, r1, #97	; 0x61
   16f18:	cmp	r5, #25
   16f1c:	bicls	r1, r1, #32
   16f20:	cmp	r4, #25
   16f24:	mov	r4, ip
   16f28:	bicls	r4, ip, #32
   16f2c:	cmp	r4, r1
   16f30:	beq	16efc <__assert_fail@plt+0x43b4>
   16f34:	cmp	ip, #0
   16f38:	bne	16eac <__assert_fail@plt+0x4364>
   16f3c:	mov	r0, r9
   16f40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f44:	cmp	ip, #0
   16f48:	bne	16ed8 <__assert_fail@plt+0x4390>
   16f4c:	b	16edc <__assert_fail@plt+0x4394>
   16f50:	push	{r4, lr}
   16f54:	subs	r4, r2, #0
   16f58:	sub	sp, sp, #8
   16f5c:	beq	16fb0 <__assert_fail@plt+0x4468>
   16f60:	cmp	r0, #0
   16f64:	beq	16fb8 <__assert_fail@plt+0x4470>
   16f68:	cmp	r4, #1
   16f6c:	beq	16fcc <__assert_fail@plt+0x4484>
   16f70:	ldrb	r3, [r1]
   16f74:	cmp	r3, #0
   16f78:	beq	16fcc <__assert_fail@plt+0x4484>
   16f7c:	sub	ip, r1, #1
   16f80:	add	r2, ip, r4
   16f84:	add	r1, r1, #1
   16f88:	mov	ip, r0
   16f8c:	b	16f9c <__assert_fail@plt+0x4454>
   16f90:	ldrb	r3, [r1], #1
   16f94:	cmp	r3, #0
   16f98:	beq	16fa8 <__assert_fail@plt+0x4460>
   16f9c:	cmp	r1, r2
   16fa0:	strb	r3, [ip], #1
   16fa4:	bne	16f90 <__assert_fail@plt+0x4448>
   16fa8:	mov	r3, #0
   16fac:	strb	r3, [ip]
   16fb0:	add	sp, sp, #8
   16fb4:	pop	{r4, pc}
   16fb8:	mov	r0, r4
   16fbc:	str	r1, [sp, #4]
   16fc0:	bl	122fc <gcry_xmalloc@plt>
   16fc4:	ldr	r1, [sp, #4]
   16fc8:	b	16f68 <__assert_fail@plt+0x4420>
   16fcc:	mov	ip, r0
   16fd0:	b	16fa8 <__assert_fail@plt+0x4460>
   16fd4:	push	{r4, r5, r6, lr}
   16fd8:	mov	r5, r0
   16fdc:	ldrb	r4, [r0]
   16fe0:	cmp	r4, #0
   16fe4:	beq	17060 <__assert_fail@plt+0x4518>
   16fe8:	bl	12734 <__ctype_b_loc@plt>
   16fec:	mov	r1, r5
   16ff0:	ldr	r2, [r0]
   16ff4:	b	17004 <__assert_fail@plt+0x44bc>
   16ff8:	ldrb	r4, [r1, #1]!
   16ffc:	cmp	r4, #0
   17000:	beq	17068 <__assert_fail@plt+0x4520>
   17004:	lsl	r4, r4, #1
   17008:	ldrh	r3, [r2, r4]
   1700c:	ands	r3, r3, #8192	; 0x2000
   17010:	bne	16ff8 <__assert_fail@plt+0x44b0>
   17014:	ldrb	r2, [r1]
   17018:	cmp	r2, #0
   1701c:	strb	r2, [r5]
   17020:	movne	ip, r5
   17024:	beq	17060 <__assert_fail@plt+0x4518>
   17028:	ldr	lr, [r0]
   1702c:	lsl	r2, r2, #1
   17030:	ldrh	r2, [lr, r2]
   17034:	ands	r2, r2, #8192	; 0x2000
   17038:	moveq	r3, r2
   1703c:	beq	17048 <__assert_fail@plt+0x4500>
   17040:	cmp	r3, #0
   17044:	moveq	r3, ip
   17048:	ldrb	r2, [r1, #1]!
   1704c:	cmp	r2, #0
   17050:	strb	r2, [ip, #1]!
   17054:	bne	17028 <__assert_fail@plt+0x44e0>
   17058:	cmp	r3, #0
   1705c:	strbne	r2, [r3]
   17060:	mov	r0, r5
   17064:	pop	{r4, r5, r6, pc}
   17068:	strb	r4, [r5]
   1706c:	mov	r0, r5
   17070:	pop	{r4, r5, r6, pc}
   17074:	push	{r4, r5, r6, lr}
   17078:	mov	r5, r0
   1707c:	ldrb	r4, [r0]
   17080:	cmp	r4, #0
   17084:	beq	170c8 <__assert_fail@plt+0x4580>
   17088:	bl	12734 <__ctype_b_loc@plt>
   1708c:	mov	r2, r5
   17090:	mov	r1, #0
   17094:	ldr	r0, [r0]
   17098:	lsl	r4, r4, #1
   1709c:	ldrh	r3, [r0, r4]
   170a0:	ands	r3, r3, #8192	; 0x2000
   170a4:	moveq	r1, r3
   170a8:	beq	170b4 <__assert_fail@plt+0x456c>
   170ac:	cmp	r1, #0
   170b0:	moveq	r1, r2
   170b4:	ldrb	r4, [r2, #1]!
   170b8:	cmp	r4, #0
   170bc:	bne	17098 <__assert_fail@plt+0x4550>
   170c0:	cmp	r1, #0
   170c4:	strbne	r4, [r1]
   170c8:	mov	r0, r5
   170cc:	pop	{r4, r5, r6, pc}
   170d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   170d4:	subs	r9, r1, #0
   170d8:	beq	17138 <__assert_fail@plt+0x45f0>
   170dc:	mov	r7, r2
   170e0:	mov	sl, r0
   170e4:	mov	r4, r0
   170e8:	add	r8, r0, r9
   170ec:	mov	r5, #0
   170f0:	ldrb	r1, [r4]
   170f4:	mov	r0, r7
   170f8:	bl	127ac <strchr@plt>
   170fc:	mov	r6, r4
   17100:	add	r4, r4, #1
   17104:	cmp	r0, #0
   17108:	moveq	r5, r0
   1710c:	beq	17118 <__assert_fail@plt+0x45d0>
   17110:	cmp	r5, #0
   17114:	moveq	r5, r6
   17118:	cmp	r4, r8
   1711c:	bne	170f0 <__assert_fail@plt+0x45a8>
   17120:	cmp	r5, #0
   17124:	beq	17138 <__assert_fail@plt+0x45f0>
   17128:	mov	r3, #0
   1712c:	sub	r0, r5, sl
   17130:	strb	r3, [r5]
   17134:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17138:	mov	r0, r9
   1713c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17140:	ldr	r2, [pc]	; 17148 <__assert_fail@plt+0x4600>
   17144:	b	170d0 <__assert_fail@plt+0x4588>
   17148:	muleq	r2, r4, r9
   1714c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17150:	subs	r9, r1, #0
   17154:	beq	171ac <__assert_fail@plt+0x4664>
   17158:	mov	r7, r2
   1715c:	mov	sl, r0
   17160:	mov	r4, r0
   17164:	add	r8, r0, r9
   17168:	mov	r6, #0
   1716c:	ldrb	r1, [r4]
   17170:	mov	r0, r7
   17174:	bl	127ac <strchr@plt>
   17178:	mov	r5, r4
   1717c:	add	r4, r4, #1
   17180:	cmp	r0, #0
   17184:	moveq	r6, r0
   17188:	beq	17194 <__assert_fail@plt+0x464c>
   1718c:	cmp	r6, #0
   17190:	moveq	r6, r5
   17194:	cmp	r4, r8
   17198:	bne	1716c <__assert_fail@plt+0x4624>
   1719c:	cmp	r6, #0
   171a0:	beq	171ac <__assert_fail@plt+0x4664>
   171a4:	sub	r0, r6, sl
   171a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171ac:	mov	r0, r9
   171b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171b4:	ldr	r2, [pc]	; 171bc <__assert_fail@plt+0x4674>
   171b8:	b	1714c <__assert_fail@plt+0x4604>
   171bc:	muleq	r2, r4, r9
   171c0:	push	{r4, lr}
   171c4:	mov	r1, #47	; 0x2f
   171c8:	mov	r4, r0
   171cc:	bl	12980 <strrchr@plt>
   171d0:	cmp	r0, #0
   171d4:	beq	171e4 <__assert_fail@plt+0x469c>
   171d8:	add	r0, r0, #1
   171dc:	pop	{r4, lr}
   171e0:	b	128e4 <gcry_xstrdup@plt>
   171e4:	mov	r0, r4
   171e8:	pop	{r4, lr}
   171ec:	b	128e4 <gcry_xstrdup@plt>
   171f0:	push	{r4, r5, r6, lr}
   171f4:	mov	r1, #47	; 0x2f
   171f8:	mov	r5, r0
   171fc:	bl	12980 <strrchr@plt>
   17200:	cmp	r0, #0
   17204:	beq	1722c <__assert_fail@plt+0x46e4>
   17208:	sub	r4, r0, r5
   1720c:	add	r0, r4, #1
   17210:	bl	122fc <gcry_xmalloc@plt>
   17214:	mov	r2, r4
   17218:	mov	r1, r5
   1721c:	bl	1286c <strncpy@plt>
   17220:	mov	r2, #0
   17224:	strb	r2, [r0, r4]
   17228:	pop	{r4, r5, r6, pc}
   1722c:	ldr	r0, [pc, #4]	; 17238 <__assert_fail@plt+0x46f0>
   17230:	pop	{r4, r5, r6, lr}
   17234:	b	128e4 <gcry_xstrdup@plt>
   17238:	andeq	r9, r2, r4
   1723c:	push	{r0, r1, r2, r3}
   17240:	mov	r0, #1
   17244:	push	{r4, lr}
   17248:	sub	sp, sp, #8
   1724c:	ldr	r4, [pc, #60]	; 17290 <__assert_fail@plt+0x4748>
   17250:	add	r3, sp, #20
   17254:	mov	r2, r3
   17258:	ldr	ip, [r4]
   1725c:	ldr	r1, [sp, #16]
   17260:	str	r3, [sp]
   17264:	str	ip, [sp, #4]
   17268:	bl	16654 <__assert_fail@plt+0x3b0c>
   1726c:	ldr	r2, [sp, #4]
   17270:	ldr	r3, [r4]
   17274:	cmp	r2, r3
   17278:	bne	1728c <__assert_fail@plt+0x4744>
   1727c:	add	sp, sp, #8
   17280:	pop	{r4, lr}
   17284:	add	sp, sp, #16
   17288:	bx	lr
   1728c:	bl	124e8 <__stack_chk_fail@plt>
   17290:	andeq	fp, r3, r0, lsl fp
   17294:	push	{r0, r1, r2, r3}
   17298:	mov	r0, #0
   1729c:	push	{r4, lr}
   172a0:	sub	sp, sp, #8
   172a4:	ldr	r4, [pc, #60]	; 172e8 <__assert_fail@plt+0x47a0>
   172a8:	add	r3, sp, #20
   172ac:	mov	r2, r3
   172b0:	ldr	ip, [r4]
   172b4:	ldr	r1, [sp, #16]
   172b8:	str	r3, [sp]
   172bc:	str	ip, [sp, #4]
   172c0:	bl	16654 <__assert_fail@plt+0x3b0c>
   172c4:	ldr	r2, [sp, #4]
   172c8:	ldr	r3, [r4]
   172cc:	cmp	r2, r3
   172d0:	bne	172e4 <__assert_fail@plt+0x479c>
   172d4:	add	sp, sp, #8
   172d8:	pop	{r4, lr}
   172dc:	add	sp, sp, #16
   172e0:	bx	lr
   172e4:	bl	124e8 <__stack_chk_fail@plt>
   172e8:	andeq	fp, r3, r0, lsl fp
   172ec:	push	{r0, r1, r2, r3}
   172f0:	mov	r0, #3
   172f4:	push	{r4, lr}
   172f8:	sub	sp, sp, #8
   172fc:	ldr	r4, [pc, #60]	; 17340 <__assert_fail@plt+0x47f8>
   17300:	add	r3, sp, #20
   17304:	mov	r2, r3
   17308:	ldr	ip, [r4]
   1730c:	ldr	r1, [sp, #16]
   17310:	str	r3, [sp]
   17314:	str	ip, [sp, #4]
   17318:	bl	16654 <__assert_fail@plt+0x3b0c>
   1731c:	ldr	r2, [sp, #4]
   17320:	ldr	r3, [r4]
   17324:	cmp	r2, r3
   17328:	bne	1733c <__assert_fail@plt+0x47f4>
   1732c:	add	sp, sp, #8
   17330:	pop	{r4, lr}
   17334:	add	sp, sp, #16
   17338:	bx	lr
   1733c:	bl	124e8 <__stack_chk_fail@plt>
   17340:	andeq	fp, r3, r0, lsl fp
   17344:	push	{r0, r1, r2, r3}
   17348:	mov	r0, #2
   1734c:	push	{r4, lr}
   17350:	sub	sp, sp, #8
   17354:	ldr	r4, [pc, #60]	; 17398 <__assert_fail@plt+0x4850>
   17358:	add	r3, sp, #20
   1735c:	mov	r2, r3
   17360:	ldr	ip, [r4]
   17364:	ldr	r1, [sp, #16]
   17368:	str	r3, [sp]
   1736c:	str	ip, [sp, #4]
   17370:	bl	16654 <__assert_fail@plt+0x3b0c>
   17374:	ldr	r2, [sp, #4]
   17378:	ldr	r3, [r4]
   1737c:	cmp	r2, r3
   17380:	bne	17394 <__assert_fail@plt+0x484c>
   17384:	add	sp, sp, #8
   17388:	pop	{r4, lr}
   1738c:	add	sp, sp, #16
   17390:	bx	lr
   17394:	bl	124e8 <__stack_chk_fail@plt>
   17398:	andeq	fp, r3, r0, lsl fp
   1739c:	b	1238c <strcmp@plt>
   173a0:	push	{r4, r5, r6, lr}
   173a4:	mov	lr, r0
   173a8:	ldrb	ip, [r0]
   173ac:	cmp	ip, #9
   173b0:	cmpne	ip, #32
   173b4:	bne	173c8 <__assert_fail@plt+0x4880>
   173b8:	ldrb	ip, [lr, #1]!
   173bc:	cmp	ip, #9
   173c0:	cmpne	ip, #32
   173c4:	beq	173b8 <__assert_fail@plt+0x4870>
   173c8:	sub	r6, ip, #48	; 0x30
   173cc:	mov	r0, #0
   173d0:	uxtb	r3, r6
   173d4:	cmp	r3, #9
   173d8:	mov	r1, #0
   173dc:	pophi	{r4, r5, r6, pc}
   173e0:	lsl	r2, r1, #2
   173e4:	lsl	r3, r0, #2
   173e8:	adds	r3, r3, r0
   173ec:	orr	r2, r2, r0, lsr #30
   173f0:	ldrb	ip, [lr, #1]!
   173f4:	adc	r2, r2, r1
   173f8:	adds	r4, r3, r3
   173fc:	adc	r5, r2, r2
   17400:	adds	r0, r4, r6
   17404:	adc	r1, r5, r6, asr #31
   17408:	sub	r6, ip, #48	; 0x30
   1740c:	uxtb	r3, r6
   17410:	cmp	r3, #9
   17414:	bls	173e0 <__assert_fail@plt+0x4898>
   17418:	pop	{r4, r5, r6, pc}
   1741c:	ldrb	r2, [r0]
   17420:	sub	r3, r2, #48	; 0x30
   17424:	uxtb	r1, r3
   17428:	cmp	r1, #9
   1742c:	bls	17454 <__assert_fail@plt+0x490c>
   17430:	sub	r3, r2, #65	; 0x41
   17434:	cmp	r3, #5
   17438:	subls	r3, r2, #55	; 0x37
   1743c:	lslls	r3, r3, #4
   17440:	bls	17458 <__assert_fail@plt+0x4910>
   17444:	sub	r3, r2, #97	; 0x61
   17448:	cmp	r3, #5
   1744c:	bhi	1749c <__assert_fail@plt+0x4954>
   17450:	sub	r3, r2, #87	; 0x57
   17454:	lsl	r3, r3, #4
   17458:	ldrb	r2, [r0, #1]
   1745c:	sub	r0, r2, #48	; 0x30
   17460:	uxtb	r1, r0
   17464:	cmp	r1, #9
   17468:	bls	1747c <__assert_fail@plt+0x4934>
   1746c:	sub	r1, r2, #65	; 0x41
   17470:	cmp	r1, #5
   17474:	bhi	17484 <__assert_fail@plt+0x493c>
   17478:	sub	r0, r2, #55	; 0x37
   1747c:	add	r0, r0, r3
   17480:	bx	lr
   17484:	sub	r1, r2, #97	; 0x61
   17488:	cmp	r1, #5
   1748c:	bhi	1749c <__assert_fail@plt+0x4954>
   17490:	sub	r0, r2, #87	; 0x57
   17494:	add	r0, r0, r3
   17498:	bx	lr
   1749c:	mvn	r0, #0
   174a0:	bx	lr
   174a4:	subs	r3, r1, #0
   174a8:	beq	174b0 <__assert_fail@plt+0x4968>
   174ac:	b	16c6c <__assert_fail@plt+0x4124>
   174b0:	mov	r0, r3
   174b4:	bx	lr
   174b8:	sub	r0, r0, #65	; 0x41
   174bc:	cmp	r0, #25
   174c0:	movhi	r0, #0
   174c4:	movls	r0, #1
   174c8:	bx	lr
   174cc:	sub	r0, r0, #97	; 0x61
   174d0:	cmp	r0, #25
   174d4:	movhi	r0, #0
   174d8:	movls	r0, #1
   174dc:	bx	lr
   174e0:	sub	r3, r0, #97	; 0x61
   174e4:	cmp	r3, #25
   174e8:	bicls	r0, r0, #32
   174ec:	bx	lr
   174f0:	sub	r3, r0, #65	; 0x41
   174f4:	cmp	r3, #25
   174f8:	orrls	r0, r0, #32
   174fc:	bx	lr
   17500:	ldrb	r3, [r0]
   17504:	cmp	r3, #0
   17508:	bxeq	lr
   1750c:	mov	r1, r0
   17510:	tst	r3, #128	; 0x80
   17514:	moveq	r2, #1
   17518:	movne	r2, #0
   1751c:	sub	ip, r3, #65	; 0x41
   17520:	cmp	ip, #25
   17524:	movhi	r2, #0
   17528:	andls	r2, r2, #1
   1752c:	cmp	r2, #0
   17530:	orrne	r3, r3, #32
   17534:	strbne	r3, [r1]
   17538:	ldrb	r3, [r1, #1]!
   1753c:	cmp	r3, #0
   17540:	bne	17510 <__assert_fail@plt+0x49c8>
   17544:	bx	lr
   17548:	cmp	r0, r1
   1754c:	beq	17608 <__assert_fail@plt+0x4ac0>
   17550:	push	{r4, r5, lr}
   17554:	ldrb	r2, [r0]
   17558:	ldrb	r3, [r1]
   1755c:	cmp	r2, #0
   17560:	bne	175a8 <__assert_fail@plt+0x4a60>
   17564:	b	175dc <__assert_fail@plt+0x4a94>
   17568:	cmp	r3, r2
   1756c:	sub	ip, r2, #97	; 0x61
   17570:	beq	17598 <__assert_fail@plt+0x4a50>
   17574:	cmp	ip, #25
   17578:	sub	r4, r3, #97	; 0x61
   1757c:	mov	lr, r2
   17580:	bicls	lr, r2, #32
   17584:	cmp	r4, #25
   17588:	bicls	r3, r3, #32
   1758c:	cmp	r3, lr
   17590:	mov	r5, r2
   17594:	bne	175f0 <__assert_fail@plt+0x4aa8>
   17598:	ldrb	r2, [r0, #1]!
   1759c:	ldrb	r3, [r1, #1]!
   175a0:	cmp	r2, #0
   175a4:	beq	175dc <__assert_fail@plt+0x4a94>
   175a8:	cmp	r3, #0
   175ac:	bne	17568 <__assert_fail@plt+0x4a20>
   175b0:	sub	r3, r2, #97	; 0x61
   175b4:	cmp	r3, #25
   175b8:	mov	r5, r2
   175bc:	mov	r3, #0
   175c0:	bhi	175d4 <__assert_fail@plt+0x4a8c>
   175c4:	bic	r5, r2, #32
   175c8:	sub	r2, r3, #97	; 0x61
   175cc:	cmp	r2, #25
   175d0:	bicls	r3, r3, #32
   175d4:	sub	r0, r5, r3
   175d8:	pop	{r4, r5, pc}
   175dc:	cmp	r3, #0
   175e0:	movne	r5, #0
   175e4:	bne	175c8 <__assert_fail@plt+0x4a80>
   175e8:	mov	r0, #0
   175ec:	pop	{r4, r5, pc}
   175f0:	ldrb	r3, [r1]
   175f4:	cmp	r3, r2
   175f8:	beq	175e8 <__assert_fail@plt+0x4aa0>
   175fc:	cmp	ip, #25
   17600:	bls	175c4 <__assert_fail@plt+0x4a7c>
   17604:	b	175c8 <__assert_fail@plt+0x4a80>
   17608:	mov	r0, #0
   1760c:	bx	lr
   17610:	cmp	r2, #0
   17614:	cmpne	r0, r1
   17618:	beq	17680 <__assert_fail@plt+0x4b38>
   1761c:	push	{r4, r5, lr}
   17620:	sub	r1, r1, #1
   17624:	sub	r4, r0, #1
   17628:	b	17634 <__assert_fail@plt+0x4aec>
   1762c:	cmp	r3, ip
   17630:	bne	17678 <__assert_fail@plt+0x4b30>
   17634:	ldrb	r3, [r4, #1]!
   17638:	sub	ip, r3, #65	; 0x41
   1763c:	cmp	ip, #25
   17640:	ldrb	ip, [r1, #1]!
   17644:	mvn	lr, r4
   17648:	add	lr, lr, r2
   1764c:	sub	r5, ip, #65	; 0x41
   17650:	orrls	r3, r3, #32
   17654:	cmp	r5, #25
   17658:	orrls	ip, ip, #32
   1765c:	cmn	r0, lr
   17660:	moveq	lr, #1
   17664:	movne	lr, #0
   17668:	cmp	r3, #0
   1766c:	moveq	lr, #1
   17670:	cmp	lr, #0
   17674:	beq	1762c <__assert_fail@plt+0x4ae4>
   17678:	sub	r0, r3, ip
   1767c:	pop	{r4, r5, pc}
   17680:	mov	r0, #0
   17684:	bx	lr
   17688:	cmp	r1, r0
   1768c:	beq	17694 <__assert_fail@plt+0x4b4c>
   17690:	b	16cb4 <__assert_fail@plt+0x416c>
   17694:	mov	r0, #0
   17698:	bx	lr
   1769c:	cmp	r0, r1
   176a0:	beq	17700 <__assert_fail@plt+0x4bb8>
   176a4:	ldrb	r2, [r0]
   176a8:	ldrb	ip, [r1]
   176ac:	cmp	r2, #0
   176b0:	beq	176e8 <__assert_fail@plt+0x4ba0>
   176b4:	clz	r3, ip
   176b8:	lsr	r3, r3, #5
   176bc:	b	176d8 <__assert_fail@plt+0x4b90>
   176c0:	ldrb	r2, [r0, #1]!
   176c4:	ldrb	ip, [r1, #1]!
   176c8:	clz	r3, ip
   176cc:	cmp	r2, #0
   176d0:	lsr	r3, r3, #5
   176d4:	beq	176e8 <__assert_fail@plt+0x4ba0>
   176d8:	cmp	ip, r2
   176dc:	orrne	r3, r3, #1
   176e0:	cmp	r3, #0
   176e4:	beq	176c0 <__assert_fail@plt+0x4b78>
   176e8:	cmp	ip, r2
   176ec:	beq	17700 <__assert_fail@plt+0x4bb8>
   176f0:	sxtb	r2, r2
   176f4:	sxtb	r0, ip
   176f8:	sub	r0, r2, r0
   176fc:	bx	lr
   17700:	mov	r0, #0
   17704:	bx	lr
   17708:	push	{r4, r5, r6, r7, r8, lr}
   1770c:	subs	r7, r3, #0
   17710:	mov	r4, r0
   17714:	beq	17774 <__assert_fail@plt+0x4c2c>
   17718:	cmp	r7, r1
   1771c:	bhi	1776c <__assert_fail@plt+0x4c24>
   17720:	sub	r1, r1, r7
   17724:	adds	r5, r0, r1
   17728:	bcs	1776c <__assert_fail@plt+0x4c24>
   1772c:	cmp	r0, r2
   17730:	mov	r6, r2
   17734:	beq	17774 <__assert_fail@plt+0x4c2c>
   17738:	mov	r2, r7
   1773c:	mov	r1, r6
   17740:	mov	r0, r4
   17744:	bl	16cb4 <__assert_fail@plt+0x416c>
   17748:	cmp	r0, #0
   1774c:	beq	17774 <__assert_fail@plt+0x4c2c>
   17750:	add	r4, r4, #1
   17754:	cmp	r5, r4
   17758:	bcc	1776c <__assert_fail@plt+0x4c24>
   1775c:	cmp	r6, r4
   17760:	bne	17738 <__assert_fail@plt+0x4bf0>
   17764:	mov	r0, r6
   17768:	pop	{r4, r5, r6, r7, r8, pc}
   1776c:	mov	r0, #0
   17770:	pop	{r4, r5, r6, r7, r8, pc}
   17774:	mov	r0, r4
   17778:	pop	{r4, r5, r6, r7, r8, pc}
   1777c:	push	{r4, r5, r6, lr}
   17780:	mov	r5, r0
   17784:	ldrb	r4, [r0]
   17788:	cmp	r4, #0
   1778c:	beq	177b0 <__assert_fail@plt+0x4c68>
   17790:	bl	126f8 <__ctype_tolower_loc@plt>
   17794:	mov	r3, r5
   17798:	ldr	r2, [r0]
   1779c:	ldr	r2, [r2, r4, lsl #2]
   177a0:	strb	r2, [r3]
   177a4:	ldrb	r4, [r3, #1]!
   177a8:	cmp	r4, #0
   177ac:	bne	17798 <__assert_fail@plt+0x4c50>
   177b0:	mov	r0, r5
   177b4:	pop	{r4, r5, r6, pc}
   177b8:	cmp	r2, #0
   177bc:	beq	17810 <__assert_fail@plt+0x4cc8>
   177c0:	push	{r4, r5, r6, r7, r8, lr}
   177c4:	sub	r4, r0, #1
   177c8:	add	r8, r4, r2
   177cc:	sub	r7, r1, #1
   177d0:	ldrb	r5, [r4, #1]!
   177d4:	ldrb	r6, [r7, #1]!
   177d8:	cmp	r5, r6
   177dc:	beq	177f8 <__assert_fail@plt+0x4cb0>
   177e0:	bl	12704 <__ctype_toupper_loc@plt>
   177e4:	ldr	r3, [r0]
   177e8:	ldr	r2, [r3, r5, lsl #2]
   177ec:	ldr	r3, [r3, r6, lsl #2]
   177f0:	cmp	r2, r3
   177f4:	bne	17808 <__assert_fail@plt+0x4cc0>
   177f8:	cmp	r8, r4
   177fc:	bne	177d0 <__assert_fail@plt+0x4c88>
   17800:	mov	r0, #0
   17804:	pop	{r4, r5, r6, r7, r8, pc}
   17808:	sub	r0, r5, r6
   1780c:	pop	{r4, r5, r6, r7, r8, pc}
   17810:	mov	r0, r2
   17814:	bx	lr
   17818:	cmp	r0, #0
   1781c:	bxeq	lr
   17820:	mov	r2, #1
   17824:	b	16a78 <__assert_fail@plt+0x3f30>
   17828:	cmp	r0, #0
   1782c:	bxeq	lr
   17830:	mov	r2, #0
   17834:	b	16a78 <__assert_fail@plt+0x3f30>
   17838:	push	{r0, r1, r2, r3}
   1783c:	push	{r4, lr}
   17840:	sub	sp, sp, #8
   17844:	ldr	r4, [pc, #80]	; 1789c <__assert_fail@plt+0x4d54>
   17848:	ldr	r0, [sp, #16]
   1784c:	ldr	r3, [r4]
   17850:	cmp	r0, #0
   17854:	str	r3, [sp, #4]
   17858:	beq	1788c <__assert_fail@plt+0x4d44>
   1785c:	add	r3, sp, #20
   17860:	mov	r1, r3
   17864:	str	r3, [sp]
   17868:	bl	16584 <__assert_fail@plt+0x3a3c>
   1786c:	ldr	r2, [sp, #4]
   17870:	ldr	r3, [r4]
   17874:	cmp	r2, r3
   17878:	bne	17898 <__assert_fail@plt+0x4d50>
   1787c:	add	sp, sp, #8
   17880:	pop	{r4, lr}
   17884:	add	sp, sp, #16
   17888:	bx	lr
   1788c:	ldr	r0, [pc, #12]	; 178a0 <__assert_fail@plt+0x4d58>
   17890:	bl	12b0c <gcry_strdup@plt>
   17894:	b	1786c <__assert_fail@plt+0x4d24>
   17898:	bl	124e8 <__stack_chk_fail@plt>
   1789c:	andeq	fp, r3, r0, lsl fp
   178a0:	muleq	r2, r8, r9
   178a4:	push	{r0, r1, r2, r3}
   178a8:	push	{r4, lr}
   178ac:	sub	sp, sp, #8
   178b0:	ldr	r4, [pc, #144]	; 17948 <__assert_fail@plt+0x4e00>
   178b4:	ldr	r0, [sp, #16]
   178b8:	ldr	r3, [r4]
   178bc:	cmp	r0, #0
   178c0:	str	r3, [sp, #4]
   178c4:	beq	17900 <__assert_fail@plt+0x4db8>
   178c8:	add	r3, sp, #20
   178cc:	mov	r1, r3
   178d0:	str	r3, [sp]
   178d4:	bl	16584 <__assert_fail@plt+0x3a3c>
   178d8:	cmp	r0, #0
   178dc:	beq	17910 <__assert_fail@plt+0x4dc8>
   178e0:	ldr	r2, [sp, #4]
   178e4:	ldr	r3, [r4]
   178e8:	cmp	r2, r3
   178ec:	bne	1790c <__assert_fail@plt+0x4dc4>
   178f0:	add	sp, sp, #8
   178f4:	pop	{r4, lr}
   178f8:	add	sp, sp, #16
   178fc:	bx	lr
   17900:	ldr	r0, [pc, #68]	; 1794c <__assert_fail@plt+0x4e04>
   17904:	bl	128e4 <gcry_xstrdup@plt>
   17908:	b	178d8 <__assert_fail@plt+0x4d90>
   1790c:	bl	124e8 <__stack_chk_fail@plt>
   17910:	bl	1280c <__errno_location@plt>
   17914:	ldr	r3, [pc, #52]	; 17950 <__assert_fail@plt+0x4e08>
   17918:	ldr	r3, [r3]
   1791c:	ldr	r2, [r0]
   17920:	cmp	r2, #22
   17924:	moveq	r2, #37	; 0x25
   17928:	moveq	r1, #1
   1792c:	ldreq	r0, [pc, #32]	; 17954 <__assert_fail@plt+0x4e0c>
   17930:	movne	r2, #22
   17934:	movne	r1, #1
   17938:	ldrne	r0, [pc, #24]	; 17958 <__assert_fail@plt+0x4e10>
   1793c:	bl	125f0 <fwrite@plt>
   17940:	mov	r0, #2
   17944:	bl	12764 <exit@plt>
   17948:	andeq	fp, r3, r0, lsl fp
   1794c:	muleq	r2, r8, r9
   17950:	andeq	ip, r3, r0, lsl #5
   17954:	muleq	r2, ip, r9
   17958:	andeq	r8, r2, r4, asr #19
   1795c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17960:	mov	r6, r2
   17964:	mov	r7, r3
   17968:	mov	r8, r0
   1796c:	mov	r5, r1
   17970:	bl	127ac <strchr@plt>
   17974:	cmp	r0, #0
   17978:	beq	17a04 <__assert_fail@plt+0x4ebc>
   1797c:	mov	r4, #1
   17980:	b	17988 <__assert_fail@plt+0x4e40>
   17984:	mov	r4, r3
   17988:	add	r0, r0, #1
   1798c:	mov	r1, r5
   17990:	bl	127ac <strchr@plt>
   17994:	add	r3, r4, #1
   17998:	cmp	r0, #0
   1799c:	bne	17984 <__assert_fail@plt+0x4e3c>
   179a0:	add	r0, r4, #2
   179a4:	mov	r1, #4
   179a8:	bl	12860 <gcry_calloc@plt>
   179ac:	subs	r9, r0, #0
   179b0:	beq	179fc <__assert_fail@plt+0x4eb4>
   179b4:	str	r8, [r9]
   179b8:	mov	r0, r8
   179bc:	mov	r1, r5
   179c0:	bl	127ac <strchr@plt>
   179c4:	subs	r3, r0, #0
   179c8:	beq	17a0c <__assert_fail@plt+0x4ec4>
   179cc:	mov	r8, r9
   179d0:	mov	r4, #1
   179d4:	add	r0, r3, #1
   179d8:	strb	r6, [r3]
   179dc:	str	r0, [r8, #4]!
   179e0:	mov	r1, r5
   179e4:	bl	127ac <strchr@plt>
   179e8:	add	r4, r4, #1
   179ec:	subs	r3, r0, #0
   179f0:	bne	179d4 <__assert_fail@plt+0x4e8c>
   179f4:	cmp	r7, #0
   179f8:	strne	r4, [r7]
   179fc:	mov	r0, r9
   17a00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a04:	mov	r0, #2
   17a08:	b	179a4 <__assert_fail@plt+0x4e5c>
   17a0c:	mov	r4, #1
   17a10:	b	179f4 <__assert_fail@plt+0x4eac>
   17a14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17a18:	mov	r8, r0
   17a1c:	mov	r6, r1
   17a20:	bl	12a34 <strpbrk@plt>
   17a24:	cmp	r0, #0
   17a28:	beq	17be0 <__assert_fail@plt+0x5098>
   17a2c:	mov	r5, #1
   17a30:	b	17a38 <__assert_fail@plt+0x4ef0>
   17a34:	mov	r5, r3
   17a38:	add	r0, r0, #1
   17a3c:	mov	r1, r6
   17a40:	bl	12a34 <strpbrk@plt>
   17a44:	add	r3, r5, #1
   17a48:	cmp	r0, #0
   17a4c:	bne	17a34 <__assert_fail@plt+0x4eec>
   17a50:	add	r5, r5, #2
   17a54:	tst	r5, #-1073741824	; 0xc0000000
   17a58:	lsl	r5, r5, #2
   17a5c:	bne	17b2c <__assert_fail@plt+0x4fe4>
   17a60:	mov	r0, r8
   17a64:	bl	12788 <strlen@plt>
   17a68:	add	r0, r0, #1
   17a6c:	adds	r0, r5, r0
   17a70:	movcs	r7, #1
   17a74:	movcc	r7, #0
   17a78:	bcs	17b2c <__assert_fail@plt+0x4fe4>
   17a7c:	bl	12338 <gcry_malloc@plt>
   17a80:	subs	r9, r0, #0
   17a84:	beq	17b38 <__assert_fail@plt+0x4ff0>
   17a88:	add	r5, r9, r5
   17a8c:	mov	r1, r8
   17a90:	mov	r0, r5
   17a94:	bl	12620 <strcpy@plt>
   17a98:	mov	r4, r5
   17a9c:	sub	r8, r9, #4
   17aa0:	mov	sl, r7
   17aa4:	mov	r1, r6
   17aa8:	mov	r0, r4
   17aac:	bl	12a34 <strpbrk@plt>
   17ab0:	cmp	r0, #0
   17ab4:	beq	17b40 <__assert_fail@plt+0x4ff8>
   17ab8:	strb	sl, [r0]
   17abc:	ldrb	r3, [r4]
   17ac0:	cmp	r3, #32
   17ac4:	cmpne	r3, #9
   17ac8:	bne	17adc <__assert_fail@plt+0x4f94>
   17acc:	ldrb	r3, [r4, #1]!
   17ad0:	cmp	r3, #9
   17ad4:	cmpne	r3, #32
   17ad8:	beq	17acc <__assert_fail@plt+0x4f84>
   17adc:	sub	r3, r0, #1
   17ae0:	cmp	r3, r4
   17ae4:	bcc	17b1c <__assert_fail@plt+0x4fd4>
   17ae8:	ldrb	r2, [r0, #-1]
   17aec:	cmp	r2, #9
   17af0:	cmpne	r2, #32
   17af4:	bne	17b1c <__assert_fail@plt+0x4fd4>
   17af8:	sub	r1, r4, #1
   17afc:	b	17b10 <__assert_fail@plt+0x4fc8>
   17b00:	ldrb	r2, [r3]
   17b04:	cmp	r2, #9
   17b08:	cmpne	r2, #32
   17b0c:	bne	17b1c <__assert_fail@plt+0x4fd4>
   17b10:	strb	sl, [r3], #-1
   17b14:	cmp	r3, r1
   17b18:	bne	17b00 <__assert_fail@plt+0x4fb8>
   17b1c:	str	r4, [r8, #4]!
   17b20:	add	r7, r7, #1
   17b24:	add	r4, r0, #1
   17b28:	b	17aa4 <__assert_fail@plt+0x4f5c>
   17b2c:	mov	r0, #12
   17b30:	bl	129a4 <gpg_err_set_errno@plt>
   17b34:	mov	r9, #0
   17b38:	mov	r0, r9
   17b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b40:	ldrb	r3, [r4]
   17b44:	cmp	r3, #32
   17b48:	cmpne	r3, #9
   17b4c:	bne	17b60 <__assert_fail@plt+0x5018>
   17b50:	ldrb	r3, [r4, #1]!
   17b54:	cmp	r3, #9
   17b58:	cmpne	r3, #32
   17b5c:	beq	17b50 <__assert_fail@plt+0x5008>
   17b60:	mov	r0, r4
   17b64:	bl	12788 <strlen@plt>
   17b68:	sub	r0, r0, #1
   17b6c:	adds	r3, r4, r0
   17b70:	bcs	17ba8 <__assert_fail@plt+0x5060>
   17b74:	ldrb	r2, [r4, r0]
   17b78:	cmp	r2, #9
   17b7c:	cmpne	r2, #32
   17b80:	bne	17ba8 <__assert_fail@plt+0x5060>
   17b84:	mov	r1, #0
   17b88:	b	17b9c <__assert_fail@plt+0x5054>
   17b8c:	ldrb	r2, [r3]
   17b90:	cmp	r2, #9
   17b94:	cmpne	r2, #32
   17b98:	bne	17ba8 <__assert_fail@plt+0x5060>
   17b9c:	strb	r1, [r3], #-1
   17ba0:	cmp	r3, r4
   17ba4:	bcs	17b8c <__assert_fail@plt+0x5044>
   17ba8:	lsl	r3, r7, #2
   17bac:	add	r2, r3, #8
   17bb0:	add	r2, r9, r2
   17bb4:	add	r3, r9, r3
   17bb8:	cmp	r5, r2
   17bbc:	mov	r2, #0
   17bc0:	str	r4, [r9, r7, lsl #2]
   17bc4:	str	r2, [r3, #4]
   17bc8:	beq	17b38 <__assert_fail@plt+0x4ff0>
   17bcc:	ldr	r3, [pc, #20]	; 17be8 <__assert_fail@plt+0x50a0>
   17bd0:	ldr	r2, [pc, #20]	; 17bec <__assert_fail@plt+0x50a4>
   17bd4:	ldr	r1, [pc, #20]	; 17bf0 <__assert_fail@plt+0x50a8>
   17bd8:	ldr	r0, [pc, #20]	; 17bf4 <__assert_fail@plt+0x50ac>
   17bdc:	bl	12b48 <__assert_fail@plt>
   17be0:	mov	r5, #8
   17be4:	b	17a60 <__assert_fail@plt+0x4f18>
   17be8:	andeq	r8, r2, r8, asr #18
   17bec:	andeq	r0, r0, r2, lsl r5
   17bf0:	andeq	r8, r2, r4, asr r9
   17bf4:	ldrdeq	r8, [r2], -ip
   17bf8:	push	{r4, r5, r6, r7, r8, lr}
   17bfc:	mov	r6, r2
   17c00:	ldrb	r3, [r0]
   17c04:	cmp	r3, #32
   17c08:	bne	17c18 <__assert_fail@plt+0x50d0>
   17c0c:	ldrb	r3, [r0, #1]!
   17c10:	cmp	r3, #32
   17c14:	beq	17c0c <__assert_fail@plt+0x50c4>
   17c18:	cmp	r6, #0
   17c1c:	beq	17c7c <__assert_fail@plt+0x5134>
   17c20:	mov	r4, #0
   17c24:	sub	r5, r1, #4
   17c28:	mov	r7, r4
   17c2c:	str	r0, [r5, #4]!
   17c30:	mov	r1, #32
   17c34:	bl	127ac <strchr@plt>
   17c38:	add	r4, r4, #1
   17c3c:	subs	r3, r0, #0
   17c40:	beq	17c74 <__assert_fail@plt+0x512c>
   17c44:	mov	r0, r3
   17c48:	strb	r7, [r0], #1
   17c4c:	ldrb	r3, [r3, #1]
   17c50:	cmp	r3, #32
   17c54:	bne	17c64 <__assert_fail@plt+0x511c>
   17c58:	ldrb	r3, [r0, #1]!
   17c5c:	cmp	r3, #32
   17c60:	beq	17c58 <__assert_fail@plt+0x5110>
   17c64:	cmp	r3, #0
   17c68:	beq	17c74 <__assert_fail@plt+0x512c>
   17c6c:	cmp	r6, r4
   17c70:	bne	17c2c <__assert_fail@plt+0x50e4>
   17c74:	mov	r0, r4
   17c78:	pop	{r4, r5, r6, r7, r8, pc}
   17c7c:	mov	r4, r6
   17c80:	b	17c74 <__assert_fail@plt+0x512c>
   17c84:	push	{r4, r5, r6, r7, r8, lr}
   17c88:	subs	r7, r2, #0
   17c8c:	beq	17cdc <__assert_fail@plt+0x5194>
   17c90:	mov	r4, #0
   17c94:	sub	r5, r1, #4
   17c98:	mov	r6, r4
   17c9c:	b	17cb8 <__assert_fail@plt+0x5170>
   17ca0:	strb	r6, [r0], #1
   17ca4:	ldrb	r3, [r3, #1]
   17ca8:	cmp	r3, #0
   17cac:	beq	17cd4 <__assert_fail@plt+0x518c>
   17cb0:	cmp	r7, r4
   17cb4:	beq	17cd4 <__assert_fail@plt+0x518c>
   17cb8:	str	r0, [r5, #4]!
   17cbc:	mov	r1, #58	; 0x3a
   17cc0:	bl	127ac <strchr@plt>
   17cc4:	add	r4, r4, #1
   17cc8:	subs	r3, r0, #0
   17ccc:	mov	r0, r3
   17cd0:	bne	17ca0 <__assert_fail@plt+0x5158>
   17cd4:	mov	r0, r4
   17cd8:	pop	{r4, r5, r6, r7, r8, pc}
   17cdc:	mov	r4, r7
   17ce0:	b	17cd4 <__assert_fail@plt+0x518c>
   17ce4:	push	{r4, r5, r6, lr}
   17ce8:	sub	sp, sp, #32
   17cec:	ldr	r4, [pc, #220]	; 17dd0 <__assert_fail@plt+0x5288>
   17cf0:	cmp	r0, #0
   17cf4:	ldr	r3, [r4]
   17cf8:	str	r3, [sp, #28]
   17cfc:	beq	17dc4 <__assert_fail@plt+0x527c>
   17d00:	mov	r5, r1
   17d04:	add	r3, sp, #12
   17d08:	add	r2, sp, #8
   17d0c:	add	r1, sp, #4
   17d10:	bl	163bc <__assert_fail@plt+0x3874>
   17d14:	subs	r6, r0, #0
   17d18:	beq	17dc4 <__assert_fail@plt+0x527c>
   17d1c:	cmp	r5, #0
   17d20:	beq	17d94 <__assert_fail@plt+0x524c>
   17d24:	add	r1, sp, #16
   17d28:	mov	r0, r5
   17d2c:	add	r3, sp, #24
   17d30:	add	r2, sp, #20
   17d34:	bl	163bc <__assert_fail@plt+0x3874>
   17d38:	subs	r1, r0, #0
   17d3c:	beq	17dc4 <__assert_fail@plt+0x527c>
   17d40:	ldr	r3, [sp, #4]
   17d44:	ldr	r2, [sp, #16]
   17d48:	cmp	r3, r2
   17d4c:	subne	r3, r3, r2
   17d50:	beq	17d64 <__assert_fail@plt+0x521c>
   17d54:	cmp	r3, #0
   17d58:	mvnlt	r0, #0
   17d5c:	movge	r0, #1
   17d60:	b	17d98 <__assert_fail@plt+0x5250>
   17d64:	ldr	r3, [sp, #8]
   17d68:	ldr	r0, [sp, #20]
   17d6c:	cmp	r3, r0
   17d70:	bne	17db0 <__assert_fail@plt+0x5268>
   17d74:	ldr	r3, [sp, #12]
   17d78:	ldr	r0, [sp, #24]
   17d7c:	cmp	r3, r0
   17d80:	bne	17db0 <__assert_fail@plt+0x5268>
   17d84:	mov	r0, r6
   17d88:	bl	1238c <strcmp@plt>
   17d8c:	subs	r3, r0, #0
   17d90:	bne	17d54 <__assert_fail@plt+0x520c>
   17d94:	mov	r0, #0
   17d98:	ldr	r2, [sp, #28]
   17d9c:	ldr	r3, [r4]
   17da0:	cmp	r2, r3
   17da4:	bne	17dcc <__assert_fail@plt+0x5284>
   17da8:	add	sp, sp, #32
   17dac:	pop	{r4, r5, r6, pc}
   17db0:	sub	r3, r3, r0
   17db4:	cmp	r3, #0
   17db8:	mvnlt	r0, #0
   17dbc:	movge	r0, #1
   17dc0:	b	17d98 <__assert_fail@plt+0x5250>
   17dc4:	mov	r0, #-2147483648	; 0x80000000
   17dc8:	b	17d98 <__assert_fail@plt+0x5250>
   17dcc:	bl	124e8 <__stack_chk_fail@plt>
   17dd0:	andeq	fp, r3, r0, lsl fp
   17dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dd8:	sub	sp, sp, #12
   17ddc:	mov	r7, r1
   17de0:	str	r2, [sp]
   17de4:	bl	12b0c <gcry_strdup@plt>
   17de8:	subs	r3, r0, #0
   17dec:	str	r3, [sp, #4]
   17df0:	beq	17fbc <__assert_fail@plt+0x5474>
   17df4:	mov	r6, #0
   17df8:	ldr	r9, [pc, #464]	; 17fd0 <__assert_fail@plt+0x5488>
   17dfc:	mov	r5, r6
   17e00:	mov	r8, r6
   17e04:	mov	r4, r3
   17e08:	mov	fp, r3
   17e0c:	mov	r1, r9
   17e10:	mov	r0, fp
   17e14:	bl	123c8 <strcspn@plt>
   17e18:	adds	sl, fp, r0
   17e1c:	beq	17ebc <__assert_fail@plt+0x5374>
   17e20:	ldrb	fp, [sl]
   17e24:	cmp	fp, #10
   17e28:	beq	17ed8 <__assert_fail@plt+0x5390>
   17e2c:	subs	r1, sl, r4
   17e30:	beq	17e40 <__assert_fail@plt+0x52f8>
   17e34:	mov	r0, r4
   17e38:	bl	16c6c <__assert_fail@plt+0x4124>
   17e3c:	mov	r1, r0
   17e40:	cmp	r7, r1
   17e44:	bgt	17ef0 <__assert_fail@plt+0x53a8>
   17e48:	ldr	r3, [sp]
   17e4c:	sub	ip, r1, r7
   17e50:	cmp	r3, r1
   17e54:	sublt	r1, r1, r3
   17e58:	lsl	ip, ip, #1
   17e5c:	sub	r0, r7, r5
   17e60:	addlt	ip, ip, r1, lsl #2
   17e64:	cmp	ip, r0
   17e68:	movlt	ip, #0
   17e6c:	movge	ip, #1
   17e70:	cmp	r5, #0
   17e74:	movne	r5, ip
   17e78:	moveq	r5, #0
   17e7c:	cmp	r5, #0
   17e80:	movne	sl, r8
   17e84:	ldrbne	fp, [r8]
   17e88:	cmp	fp, #0
   17e8c:	beq	17f70 <__assert_fail@plt+0x5428>
   17e90:	mov	fp, sl
   17e94:	mov	r1, #10
   17e98:	strb	r1, [fp], #1
   17e9c:	ldrb	r1, [sl, #1]
   17ea0:	cmp	r1, #32
   17ea4:	beq	17f20 <__assert_fail@plt+0x53d8>
   17ea8:	mov	r6, #0
   17eac:	mov	r5, r6
   17eb0:	mov	r8, r6
   17eb4:	mov	r4, fp
   17eb8:	b	17e0c <__assert_fail@plt+0x52c4>
   17ebc:	ldr	sl, [sp, #4]
   17ec0:	mov	r0, sl
   17ec4:	bl	12788 <strlen@plt>
   17ec8:	add	sl, sl, r0
   17ecc:	ldrb	fp, [sl]
   17ed0:	cmp	fp, #10
   17ed4:	bne	17e2c <__assert_fail@plt+0x52e4>
   17ed8:	add	r4, sl, #1
   17edc:	mov	r5, #0
   17ee0:	mov	fp, r4
   17ee4:	mov	r8, r5
   17ee8:	mov	r6, #1
   17eec:	b	17e0c <__assert_fail@plt+0x52c4>
   17ef0:	cmp	fp, #0
   17ef4:	beq	17f70 <__assert_fail@plt+0x5428>
   17ef8:	ldrb	r0, [sl, #1]
   17efc:	add	fp, sl, #1
   17f00:	cmp	r0, #32
   17f04:	bne	17f14 <__assert_fail@plt+0x53cc>
   17f08:	ldrb	r0, [fp, #1]!
   17f0c:	cmp	r0, #32
   17f10:	beq	17f08 <__assert_fail@plt+0x53c0>
   17f14:	mov	r5, r1
   17f18:	mov	r8, sl
   17f1c:	b	17e0c <__assert_fail@plt+0x52c4>
   17f20:	ldrb	r1, [sl, #2]
   17f24:	cmp	r1, #32
   17f28:	bne	17fc8 <__assert_fail@plt+0x5480>
   17f2c:	add	r2, sl, #3
   17f30:	mov	r4, r2
   17f34:	add	r2, r2, #1
   17f38:	ldrb	r1, [r4]
   17f3c:	cmp	r1, #32
   17f40:	beq	17f30 <__assert_fail@plt+0x53e8>
   17f44:	mov	r0, r4
   17f48:	bl	12788 <strlen@plt>
   17f4c:	mov	r6, #0
   17f50:	mov	r1, r4
   17f54:	mov	r5, r6
   17f58:	mov	r8, r6
   17f5c:	mov	r4, fp
   17f60:	add	r2, r0, #1
   17f64:	mov	r0, fp
   17f68:	bl	1241c <memmove@plt>
   17f6c:	b	17e0c <__assert_fail@plt+0x52c4>
   17f70:	ldr	r4, [sp, #4]
   17f74:	mov	r0, r4
   17f78:	bl	12788 <strlen@plt>
   17f7c:	ldr	r2, [pc, #80]	; 17fd4 <__assert_fail@plt+0x548c>
   17f80:	mov	r1, r0
   17f84:	mov	r0, r4
   17f88:	bl	170d0 <__assert_fail@plt+0x4588>
   17f8c:	cmp	r6, #0
   17f90:	bne	17fbc <__assert_fail@plt+0x5474>
   17f94:	ldrb	r3, [r4]
   17f98:	cmp	r3, #0
   17f9c:	beq	17fbc <__assert_fail@plt+0x5474>
   17fa0:	mov	r0, r4
   17fa4:	bl	12788 <strlen@plt>
   17fa8:	sub	r0, r0, #1
   17fac:	ldrb	r3, [r4, r0]
   17fb0:	cmp	r3, #10
   17fb4:	ldreq	r3, [sp, #4]
   17fb8:	strbeq	r6, [r3, r0]
   17fbc:	ldr	r0, [sp, #4]
   17fc0:	add	sp, sp, #12
   17fc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fc8:	add	r4, sl, #2
   17fcc:	b	17f44 <__assert_fail@plt+0x53fc>
   17fd0:	andeq	r8, r2, r0, lsl #20
   17fd4:	muleq	r2, r8, r1
   17fd8:	cmp	r0, #0
   17fdc:	bxeq	lr
   17fe0:	push	{r4, lr}
   17fe4:	ldr	r4, [r0]
   17fe8:	bl	124a0 <gcry_free@plt>
   17fec:	subs	r0, r4, #0
   17ff0:	bne	17fe4 <__assert_fail@plt+0x549c>
   17ff4:	pop	{r4, pc}
   17ff8:	push	{r4, r5, r6, lr}
   17ffc:	subs	r4, r0, #0
   18000:	popeq	{r4, r5, r6, pc}
   18004:	mov	r0, r4
   18008:	ldr	r5, [r0], #8
   1800c:	bl	12788 <strlen@plt>
   18010:	add	r1, r0, #12
   18014:	mov	r0, r4
   18018:	bl	1caf0 <__assert_fail@plt+0x9fa8>
   1801c:	mov	r0, r4
   18020:	bl	124a0 <gcry_free@plt>
   18024:	subs	r4, r5, #0
   18028:	bne	18004 <__assert_fail@plt+0x54bc>
   1802c:	pop	{r4, r5, r6, pc}
   18030:	push	{r4, r5, r6, lr}
   18034:	mov	r5, r0
   18038:	mov	r0, r1
   1803c:	mov	r6, r1
   18040:	bl	12788 <strlen@plt>
   18044:	add	r0, r0, #12
   18048:	bl	122fc <gcry_xmalloc@plt>
   1804c:	mov	r3, #0
   18050:	mov	r1, r6
   18054:	mov	r4, r0
   18058:	add	r0, r0, #8
   1805c:	str	r3, [r4, #4]
   18060:	bl	12620 <strcpy@plt>
   18064:	ldr	r3, [r5]
   18068:	mov	r0, r4
   1806c:	str	r3, [r4]
   18070:	str	r4, [r5]
   18074:	pop	{r4, r5, r6, pc}
   18078:	push	{r4, r5, r6, lr}
   1807c:	mov	r6, r0
   18080:	mov	r0, r1
   18084:	mov	r5, r1
   18088:	bl	12788 <strlen@plt>
   1808c:	add	r0, r0, #12
   18090:	bl	12338 <gcry_malloc@plt>
   18094:	subs	r4, r0, #0
   18098:	beq	180bc <__assert_fail@plt+0x5574>
   1809c:	mov	r3, #0
   180a0:	str	r3, [r4, #4]
   180a4:	mov	r1, r5
   180a8:	add	r0, r4, #8
   180ac:	bl	12620 <strcpy@plt>
   180b0:	ldr	r3, [r6]
   180b4:	str	r4, [r6]
   180b8:	str	r3, [r4]
   180bc:	mov	r0, r4
   180c0:	pop	{r4, r5, r6, pc}
   180c4:	cmp	r2, #0
   180c8:	beq	180d0 <__assert_fail@plt+0x5588>
   180cc:	b	18030 <__assert_fail@plt+0x54e8>
   180d0:	push	{r4, r5, r6, lr}
   180d4:	mov	r4, r0
   180d8:	mov	r0, r1
   180dc:	bl	18eb4 <__assert_fail@plt+0x636c>
   180e0:	mov	r1, r0
   180e4:	mov	r5, r0
   180e8:	mov	r0, r4
   180ec:	bl	18030 <__assert_fail@plt+0x54e8>
   180f0:	mov	r4, r0
   180f4:	mov	r0, r5
   180f8:	bl	124a0 <gcry_free@plt>
   180fc:	mov	r0, r4
   18100:	pop	{r4, r5, r6, pc}
   18104:	push	{r4, r5, r6, r7, r8, lr}
   18108:	mov	r7, r0
   1810c:	mov	r0, r1
   18110:	mov	r5, r1
   18114:	bl	12788 <strlen@plt>
   18118:	add	r0, r0, #12
   1811c:	bl	12338 <gcry_malloc@plt>
   18120:	subs	r4, r0, #0
   18124:	beq	18168 <__assert_fail@plt+0x5620>
   18128:	mov	r6, #0
   1812c:	mov	r1, r5
   18130:	str	r6, [r4, #4]
   18134:	add	r0, r4, #8
   18138:	bl	12620 <strcpy@plt>
   1813c:	ldr	r2, [r7]
   18140:	str	r6, [r4]
   18144:	cmp	r2, r6
   18148:	streq	r4, [r7]
   1814c:	bne	18158 <__assert_fail@plt+0x5610>
   18150:	b	18168 <__assert_fail@plt+0x5620>
   18154:	mov	r2, r3
   18158:	ldr	r3, [r2]
   1815c:	cmp	r3, #0
   18160:	bne	18154 <__assert_fail@plt+0x560c>
   18164:	str	r4, [r2]
   18168:	mov	r0, r4
   1816c:	pop	{r4, r5, r6, r7, r8, pc}
   18170:	push	{lr}		; (str lr, [sp, #-4]!)
   18174:	sub	sp, sp, #12
   18178:	bl	18104 <__assert_fail@plt+0x55bc>
   1817c:	cmp	r0, #0
   18180:	beq	1818c <__assert_fail@plt+0x5644>
   18184:	add	sp, sp, #12
   18188:	pop	{pc}		; (ldr pc, [sp], #4)
   1818c:	str	r0, [sp, #4]
   18190:	bl	20764 <__assert_fail@plt+0xdc1c>
   18194:	ldr	r0, [sp, #4]
   18198:	add	sp, sp, #12
   1819c:	pop	{pc}		; (ldr pc, [sp], #4)
   181a0:	cmp	r2, #0
   181a4:	push	{r4, r5, r6, lr}
   181a8:	beq	181c0 <__assert_fail@plt+0x5678>
   181ac:	bl	18104 <__assert_fail@plt+0x55bc>
   181b0:	subs	r4, r0, #0
   181b4:	beq	181f4 <__assert_fail@plt+0x56ac>
   181b8:	mov	r0, r4
   181bc:	pop	{r4, r5, r6, pc}
   181c0:	mov	r4, r0
   181c4:	mov	r0, r1
   181c8:	bl	18eb4 <__assert_fail@plt+0x636c>
   181cc:	mov	r1, r0
   181d0:	mov	r5, r0
   181d4:	mov	r0, r4
   181d8:	bl	18104 <__assert_fail@plt+0x55bc>
   181dc:	subs	r4, r0, #0
   181e0:	beq	181fc <__assert_fail@plt+0x56b4>
   181e4:	mov	r0, r5
   181e8:	bl	124a0 <gcry_free@plt>
   181ec:	mov	r0, r4
   181f0:	pop	{r4, r5, r6, pc}
   181f4:	bl	20764 <__assert_fail@plt+0xdc1c>
   181f8:	b	181b8 <__assert_fail@plt+0x5670>
   181fc:	bl	20764 <__assert_fail@plt+0xdc1c>
   18200:	b	181e4 <__assert_fail@plt+0x569c>
   18204:	push	{r4, r5, r6, r7, r8, r9, lr}
   18208:	sub	sp, sp, #20
   1820c:	ldr	r9, [pc, #136]	; 1829c <__assert_fail@plt+0x5754>
   18210:	mov	r8, #0
   18214:	subs	r5, r0, #0
   18218:	ldr	r3, [r9]
   1821c:	str	r8, [sp, #4]
   18220:	str	r3, [sp, #12]
   18224:	beq	18290 <__assert_fail@plt+0x5748>
   18228:	add	r7, sp, #4
   1822c:	add	r6, r5, #8
   18230:	mov	r0, r6
   18234:	bl	12788 <strlen@plt>
   18238:	add	r0, r0, #12
   1823c:	bl	122fc <gcry_xmalloc@plt>
   18240:	ldr	r3, [r5, #4]
   18244:	mov	r1, r6
   18248:	mov	r4, r0
   1824c:	add	r0, r0, #8
   18250:	str	r4, [sp, #8]
   18254:	str	r3, [r4, #4]
   18258:	bl	12620 <strcpy@plt>
   1825c:	str	r8, [r4]
   18260:	ldr	r5, [r5]
   18264:	str	r4, [r7]
   18268:	cmp	r5, #0
   1826c:	add	r7, sp, #8
   18270:	bne	1822c <__assert_fail@plt+0x56e4>
   18274:	ldr	r0, [sp, #4]
   18278:	ldr	r2, [sp, #12]
   1827c:	ldr	r3, [r9]
   18280:	cmp	r2, r3
   18284:	bne	18298 <__assert_fail@plt+0x5750>
   18288:	add	sp, sp, #20
   1828c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18290:	mov	r0, r5
   18294:	b	18278 <__assert_fail@plt+0x5730>
   18298:	bl	124e8 <__stack_chk_fail@plt>
   1829c:	andeq	fp, r3, r0, lsl fp
   182a0:	subs	r3, r0, r1
   182a4:	movne	r3, #1
   182a8:	cmp	r0, #0
   182ac:	moveq	r3, #0
   182b0:	cmp	r3, #0
   182b4:	beq	182d0 <__assert_fail@plt+0x5788>
   182b8:	ldr	r3, [r0]
   182bc:	cmp	r3, #0
   182c0:	cmpne	r1, r3
   182c4:	bxeq	lr
   182c8:	mov	r0, r3
   182cc:	b	182b8 <__assert_fail@plt+0x5770>
   182d0:	mov	r0, r3
   182d4:	bx	lr
   182d8:	cmp	r0, #0
   182dc:	bxeq	lr
   182e0:	ldr	r3, [r0]
   182e4:	cmp	r3, #0
   182e8:	bxeq	lr
   182ec:	mov	r0, r3
   182f0:	b	182e0 <__assert_fail@plt+0x5798>
   182f4:	push	{r4, r5, r6, r7, r8, lr}
   182f8:	ldr	r4, [r0]
   182fc:	cmp	r4, #0
   18300:	moveq	r7, r4
   18304:	beq	1833c <__assert_fail@plt+0x57f4>
   18308:	add	r6, r4, #8
   1830c:	mov	r5, r0
   18310:	mov	r0, r6
   18314:	bl	12788 <strlen@plt>
   18318:	add	r0, r0, #1
   1831c:	bl	122fc <gcry_xmalloc@plt>
   18320:	mov	r1, r6
   18324:	mov	r7, r0
   18328:	bl	12620 <strcpy@plt>
   1832c:	ldr	r3, [r4]
   18330:	mov	r0, r4
   18334:	str	r3, [r5]
   18338:	bl	124a0 <gcry_free@plt>
   1833c:	mov	r0, r7
   18340:	pop	{r4, r5, r6, r7, r8, pc}
   18344:	push	{r4, r5, r6, lr}
   18348:	subs	r4, r0, #0
   1834c:	beq	18378 <__assert_fail@plt+0x5830>
   18350:	mov	r5, r1
   18354:	b	18364 <__assert_fail@plt+0x581c>
   18358:	ldr	r4, [r4]
   1835c:	cmp	r4, #0
   18360:	beq	18378 <__assert_fail@plt+0x5830>
   18364:	mov	r1, r5
   18368:	add	r0, r4, #8
   1836c:	bl	1238c <strcmp@plt>
   18370:	cmp	r0, #0
   18374:	bne	18358 <__assert_fail@plt+0x5810>
   18378:	mov	r0, r4
   1837c:	pop	{r4, r5, r6, pc}
   18380:	subs	r3, r0, #0
   18384:	beq	183a0 <__assert_fail@plt+0x5858>
   18388:	mov	r0, #0
   1838c:	ldr	r3, [r3]
   18390:	add	r0, r0, #1
   18394:	cmp	r3, #0
   18398:	bne	1838c <__assert_fail@plt+0x5844>
   1839c:	bx	lr
   183a0:	mov	r0, r3
   183a4:	bx	lr
   183a8:	ldr	r3, [r0]
   183ac:	cmp	r3, #0
   183b0:	beq	183d4 <__assert_fail@plt+0x588c>
   183b4:	mov	r1, #0
   183b8:	b	183c0 <__assert_fail@plt+0x5878>
   183bc:	mov	r3, r2
   183c0:	ldr	r2, [r3]
   183c4:	str	r1, [r3]
   183c8:	cmp	r2, #0
   183cc:	mov	r1, r3
   183d0:	bne	183bc <__assert_fail@plt+0x5874>
   183d4:	str	r3, [r0]
   183d8:	mov	r0, r3
   183dc:	bx	lr
   183e0:	push	{r4, r5, r6, r7, r8, lr}
   183e4:	mov	r7, r0
   183e8:	mov	r8, r1
   183ec:	mov	r6, r2
   183f0:	bl	1280c <__errno_location@plt>
   183f4:	ldr	r3, [r0]
   183f8:	cmp	r3, #22
   183fc:	beq	18468 <__assert_fail@plt+0x5920>
   18400:	ldr	r4, [pc, #200]	; 184d0 <__assert_fail@plt+0x5988>
   18404:	mov	r5, r0
   18408:	ldr	r0, [r4, #8]
   1840c:	cmp	r0, #0
   18410:	beq	18440 <__assert_fail@plt+0x58f8>
   18414:	mov	r3, #1
   18418:	str	r3, [r4, #8]
   1841c:	cmp	r6, #0
   18420:	popeq	{r4, r5, r6, r7, r8, pc}
   18424:	ldr	r2, [pc, #168]	; 184d4 <__assert_fail@plt+0x598c>
   18428:	ldr	r1, [pc, #168]	; 184d8 <__assert_fail@plt+0x5990>
   1842c:	mov	r3, #0
   18430:	str	r1, [r2]
   18434:	str	r3, [r4, #12]
   18438:	str	r3, [r4, #16]
   1843c:	pop	{r4, r5, r6, r7, r8, pc}
   18440:	mov	r2, #5
   18444:	ldr	r1, [pc, #144]	; 184dc <__assert_fail@plt+0x5994>
   18448:	bl	124dc <dcgettext@plt>
   1844c:	mov	r7, r0
   18450:	ldr	r0, [r5]
   18454:	bl	126c8 <strerror@plt>
   18458:	mov	r1, r0
   1845c:	mov	r0, r7
   18460:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   18464:	b	18414 <__assert_fail@plt+0x58cc>
   18468:	cmp	r7, #0
   1846c:	ldr	r4, [pc, #92]	; 184d0 <__assert_fail@plt+0x5988>
   18470:	beq	18488 <__assert_fail@plt+0x5940>
   18474:	ldr	r1, [pc, #92]	; 184d8 <__assert_fail@plt+0x5990>
   18478:	mov	r0, r7
   1847c:	bl	1238c <strcmp@plt>
   18480:	cmp	r0, #0
   18484:	beq	184c0 <__assert_fail@plt+0x5978>
   18488:	mov	r3, #1
   1848c:	ldr	r0, [r4, #4]
   18490:	str	r3, [r4, #4]
   18494:	cmp	r0, #0
   18498:	bne	1841c <__assert_fail@plt+0x58d4>
   1849c:	mov	r2, #5
   184a0:	ldr	r1, [pc, #56]	; 184e0 <__assert_fail@plt+0x5998>
   184a4:	bl	124dc <dcgettext@plt>
   184a8:	mov	r2, r7
   184ac:	mov	r1, r8
   184b0:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   184b4:	cmp	r6, #0
   184b8:	popeq	{r4, r5, r6, r7, r8, pc}
   184bc:	b	18424 <__assert_fail@plt+0x58dc>
   184c0:	mov	r3, #1
   184c4:	ldr	r0, [r4]
   184c8:	str	r3, [r4]
   184cc:	b	18494 <__assert_fail@plt+0x594c>
   184d0:	strdeq	ip, [r3], -r0
   184d4:	andeq	ip, r3, r8, ror r2
   184d8:	andeq	r8, r2, ip, lsr #18
   184dc:	andeq	r8, r2, r4, asr #20
   184e0:	andeq	r8, r2, r8, lsl sl
   184e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184e8:	sub	sp, sp, #76	; 0x4c
   184ec:	mov	r7, #0
   184f0:	str	r3, [sp, #36]	; 0x24
   184f4:	ldr	r3, [pc, #1932]	; 18c88 <__assert_fail@plt+0x6140>
   184f8:	str	r1, [sp, #28]
   184fc:	add	r1, r0, r1
   18500:	ldr	r3, [r3]
   18504:	str	r0, [sp, #32]
   18508:	str	r3, [sp, #68]	; 0x44
   1850c:	ldr	r3, [sp, #28]
   18510:	ldr	sl, [pc, #1908]	; 18c8c <__assert_fail@plt+0x6144>
   18514:	cmp	r3, #0
   18518:	str	r2, [sp, #24]
   1851c:	sub	fp, r1, #1
   18520:	str	r7, [sp, #16]
   18524:	str	r7, [sp, #20]
   18528:	beq	18634 <__assert_fail@plt+0x5aec>
   1852c:	ldr	r3, [sp, #32]
   18530:	mov	r9, #0
   18534:	mov	r5, r9
   18538:	mov	r8, r9
   1853c:	sub	r6, r3, #1
   18540:	ldr	r4, [sp, #20]
   18544:	b	185a4 <__assert_fail@plt+0x5a5c>
   18548:	tst	r3, #128	; 0x80
   1854c:	bne	186cc <__assert_fail@plt+0x5b84>
   18550:	ldr	r1, [sp, #24]
   18554:	cmn	r1, #1
   18558:	beq	1858c <__assert_fail@plt+0x5a44>
   1855c:	cmp	r3, #127	; 0x7f
   18560:	cmpne	r3, #31
   18564:	bls	18764 <__assert_fail@plt+0x5c1c>
   18568:	cmp	r3, r1
   1856c:	beq	18764 <__assert_fail@plt+0x5c1c>
   18570:	cmp	r1, #0
   18574:	sub	r2, r3, #92	; 0x5c
   18578:	clz	r2, r2
   1857c:	lsr	r2, r2, #5
   18580:	moveq	r2, #0
   18584:	cmp	r2, #0
   18588:	bne	18874 <__assert_fail@plt+0x5d2c>
   1858c:	add	r9, r9, #1
   18590:	mov	r7, #0
   18594:	cmp	r4, #0
   18598:	strbne	r3, [r4], #1
   1859c:	cmp	fp, r6
   185a0:	beq	18610 <__assert_fail@plt+0x5ac8>
   185a4:	cmp	r7, #0
   185a8:	ldrb	r3, [r6, #1]!
   185ac:	beq	185d0 <__assert_fail@plt+0x5a88>
   185b0:	add	r1, r3, #64	; 0x40
   185b4:	lsr	r2, r3, #7
   185b8:	uxtb	r1, r1
   185bc:	cmp	r1, #61	; 0x3d
   185c0:	movls	r2, #0
   185c4:	andhi	r2, r2, #1
   185c8:	cmp	r2, #0
   185cc:	bne	18738 <__assert_fail@plt+0x5bf0>
   185d0:	cmp	r8, #0
   185d4:	beq	18548 <__assert_fail@plt+0x5a00>
   185d8:	eor	r2, r3, #128	; 0x80
   185dc:	cmp	r2, #63	; 0x3f
   185e0:	add	r2, r5, #1
   185e4:	str	r2, [sp, #12]
   185e8:	bls	1867c <__assert_fail@plt+0x5b34>
   185ec:	cmp	r4, #0
   185f0:	bne	188c4 <__assert_fail@plt+0x5d7c>
   185f4:	ldr	r3, [sp, #12]
   185f8:	mov	r5, #0
   185fc:	cmp	fp, r6
   18600:	add	r9, r9, r3, lsl #2
   18604:	mov	r8, r5
   18608:	mov	r7, #1
   1860c:	bne	185a4 <__assert_fail@plt+0x5a5c>
   18610:	ldr	r3, [sp, #20]
   18614:	cmp	r3, #0
   18618:	bne	18648 <__assert_fail@plt+0x5b00>
   1861c:	add	r0, r9, #1
   18620:	bl	122fc <gcry_xmalloc@plt>
   18624:	ldr	r3, [sp, #28]
   18628:	cmp	r3, #0
   1862c:	str	r0, [sp, #20]
   18630:	bne	1852c <__assert_fail@plt+0x59e4>
   18634:	ldr	r3, [sp, #20]
   18638:	ldr	r4, [sp, #20]
   1863c:	cmp	r3, #0
   18640:	ldr	r9, [sp, #28]
   18644:	beq	1861c <__assert_fail@plt+0x5ad4>
   18648:	ldr	r3, [sp, #36]	; 0x24
   1864c:	cmp	r3, #0
   18650:	bne	18ae0 <__assert_fail@plt+0x5f98>
   18654:	ldr	r3, [sp, #36]	; 0x24
   18658:	strb	r3, [r4]
   1865c:	ldr	r3, [pc, #1572]	; 18c88 <__assert_fail@plt+0x6140>
   18660:	ldr	r2, [sp, #68]	; 0x44
   18664:	ldr	r0, [sp, #20]
   18668:	ldr	r3, [r3]
   1866c:	cmp	r2, r3
   18670:	bne	18c74 <__assert_fail@plt+0x612c>
   18674:	add	sp, sp, #76	; 0x4c
   18678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1867c:	add	r2, sp, #72	; 0x48
   18680:	add	r2, r2, r5
   18684:	and	r1, r3, #63	; 0x3f
   18688:	strb	r3, [r2, #-12]
   1868c:	ldr	r3, [sp, #16]
   18690:	subs	r8, r8, #1
   18694:	orr	r3, r1, r3, lsl #6
   18698:	str	r3, [sp, #16]
   1869c:	bne	188b8 <__assert_fail@plt+0x5d70>
   186a0:	ldr	r3, [pc, #1512]	; 18c90 <__assert_fail@plt+0x6148>
   186a4:	ldr	r7, [r3, #12]
   186a8:	cmp	r7, #0
   186ac:	beq	1893c <__assert_fail@plt+0x5df4>
   186b0:	cmp	r4, #0
   186b4:	bne	18a1c <__assert_fail@plt+0x5ed4>
   186b8:	ldr	r3, [sp, #12]
   186bc:	mov	r7, #0
   186c0:	add	r9, r9, r3
   186c4:	mov	r5, r7
   186c8:	b	1859c <__assert_fail@plt+0x5a54>
   186cc:	and	r2, r3, #224	; 0xe0
   186d0:	cmp	r2, #192	; 0xc0
   186d4:	beq	18920 <__assert_fail@plt+0x5dd8>
   186d8:	and	r2, r3, #240	; 0xf0
   186dc:	cmp	r2, #224	; 0xe0
   186e0:	beq	18964 <__assert_fail@plt+0x5e1c>
   186e4:	and	r2, r3, #248	; 0xf8
   186e8:	cmp	r2, #240	; 0xf0
   186ec:	beq	18a00 <__assert_fail@plt+0x5eb8>
   186f0:	and	r2, r3, #252	; 0xfc
   186f4:	cmp	r2, #248	; 0xf8
   186f8:	beq	18a44 <__assert_fail@plt+0x5efc>
   186fc:	and	r2, r3, #254	; 0xfe
   18700:	cmp	r2, #252	; 0xfc
   18704:	beq	18aac <__assert_fail@plt+0x5f64>
   18708:	cmp	r4, #0
   1870c:	beq	1872c <__assert_fail@plt+0x5be4>
   18710:	str	r3, [sp]
   18714:	mov	r0, r4
   18718:	mov	r3, sl
   1871c:	mvn	r2, #0
   18720:	mov	r1, #1
   18724:	bl	12830 <__sprintf_chk@plt>
   18728:	add	r4, r4, #4
   1872c:	add	r9, r9, #4
   18730:	mov	r7, #1
   18734:	b	1859c <__assert_fail@plt+0x5a54>
   18738:	cmp	r4, #0
   1873c:	beq	1875c <__assert_fail@plt+0x5c14>
   18740:	str	r3, [sp]
   18744:	mov	r0, r4
   18748:	mov	r3, sl
   1874c:	mvn	r2, #0
   18750:	mov	r1, #1
   18754:	bl	12830 <__sprintf_chk@plt>
   18758:	add	r4, r4, #4
   1875c:	add	r9, r9, #4
   18760:	b	1859c <__assert_fail@plt+0x5a54>
   18764:	cmp	r4, #0
   18768:	beq	18980 <__assert_fail@plt+0x5e38>
   1876c:	mov	r7, r4
   18770:	mov	r2, #92	; 0x5c
   18774:	strb	r2, [r7], #1
   18778:	cmp	r3, #13
   1877c:	ldrls	pc, [pc, r3, lsl #2]
   18780:	b	18888 <__assert_fail@plt+0x5d40>
   18784:	andeq	r8, r1, r4, lsl r8
   18788:	andeq	r8, r1, r8, lsl #17
   1878c:	andeq	r8, r1, r8, lsl #17
   18790:	andeq	r8, r1, r8, lsl #17
   18794:	andeq	r8, r1, r8, lsl #17
   18798:	andeq	r8, r1, r8, lsl #17
   1879c:	andeq	r8, r1, r8, lsl #17
   187a0:	andeq	r8, r1, r8, lsl #17
   187a4:	ldrdeq	r8, [r1], -ip
   187a8:	andeq	r8, r1, r8, lsl #17
   187ac:	strdeq	r8, [r1], -r4
   187b0:	andeq	r8, r1, r0, asr #15
   187b4:	andeq	r8, r1, r4, asr r8
   187b8:	andeq	r8, r1, r4, lsr r8
   187bc:	mov	r7, #0
   187c0:	subs	r4, r7, #0
   187c4:	add	r9, r9, #2
   187c8:	movne	r3, #118	; 0x76
   187cc:	strbne	r3, [r4], #1
   187d0:	movne	r7, #0
   187d4:	b	1859c <__assert_fail@plt+0x5a54>
   187d8:	mov	r7, #0
   187dc:	subs	r4, r7, #0
   187e0:	add	r9, r9, #2
   187e4:	movne	r3, #98	; 0x62
   187e8:	strbne	r3, [r4], #1
   187ec:	movne	r7, #0
   187f0:	b	1859c <__assert_fail@plt+0x5a54>
   187f4:	cmp	r7, #0
   187f8:	add	r9, r9, #2
   187fc:	beq	18be4 <__assert_fail@plt+0x609c>
   18800:	mov	r3, #110	; 0x6e
   18804:	strb	r3, [r4, #1]
   18808:	mov	r7, #0
   1880c:	add	r4, r4, #2
   18810:	b	1859c <__assert_fail@plt+0x5a54>
   18814:	cmp	r7, #0
   18818:	add	r9, r9, #2
   1881c:	beq	18be4 <__assert_fail@plt+0x609c>
   18820:	mov	r3, #48	; 0x30
   18824:	strb	r3, [r4, #1]
   18828:	mov	r7, #0
   1882c:	add	r4, r4, #2
   18830:	b	1859c <__assert_fail@plt+0x5a54>
   18834:	cmp	r7, #0
   18838:	add	r9, r9, #2
   1883c:	beq	18be4 <__assert_fail@plt+0x609c>
   18840:	mov	r3, #114	; 0x72
   18844:	strb	r3, [r4, #1]
   18848:	mov	r7, #0
   1884c:	add	r4, r4, #2
   18850:	b	1859c <__assert_fail@plt+0x5a54>
   18854:	cmp	r7, #0
   18858:	add	r9, r9, #2
   1885c:	beq	18be4 <__assert_fail@plt+0x609c>
   18860:	mov	r3, #102	; 0x66
   18864:	strb	r3, [r4, #1]
   18868:	mov	r7, #0
   1886c:	add	r4, r4, #2
   18870:	b	1859c <__assert_fail@plt+0x5a54>
   18874:	cmp	r4, #0
   18878:	movne	r7, r4
   1887c:	movne	r3, #92	; 0x5c
   18880:	strbne	r3, [r7], #1
   18884:	beq	18ad0 <__assert_fail@plt+0x5f88>
   18888:	cmp	r7, #0
   1888c:	add	r9, r9, #4
   18890:	beq	18ad8 <__assert_fail@plt+0x5f90>
   18894:	str	r3, [sp]
   18898:	mov	r0, r7
   1889c:	ldr	r3, [pc, #1008]	; 18c94 <__assert_fail@plt+0x614c>
   188a0:	mvn	r2, #0
   188a4:	mov	r1, #1
   188a8:	add	r4, r7, #3
   188ac:	bl	12830 <__sprintf_chk@plt>
   188b0:	mov	r7, #0
   188b4:	b	1859c <__assert_fail@plt+0x5a54>
   188b8:	ldr	r5, [sp, #12]
   188bc:	mov	r7, #0
   188c0:	b	1859c <__assert_fail@plt+0x5a54>
   188c4:	cmp	r5, #0
   188c8:	beq	18ac8 <__assert_fail@plt+0x5f80>
   188cc:	add	r5, r4, r5, lsl #2
   188d0:	add	r7, sp, #60	; 0x3c
   188d4:	ldrb	r1, [r7], #1
   188d8:	mov	r0, r4
   188dc:	mov	r3, sl
   188e0:	str	r1, [sp]
   188e4:	mvn	r2, #0
   188e8:	mov	r1, #1
   188ec:	add	r4, r4, #4
   188f0:	bl	12830 <__sprintf_chk@plt>
   188f4:	cmp	r5, r4
   188f8:	bne	188d4 <__assert_fail@plt+0x5d8c>
   188fc:	ldrb	r3, [r6]
   18900:	str	r3, [sp]
   18904:	mvn	r2, #0
   18908:	mov	r3, sl
   1890c:	mov	r1, #1
   18910:	mov	r0, r5
   18914:	bl	12830 <__sprintf_chk@plt>
   18918:	add	r4, r5, #4
   1891c:	b	185f4 <__assert_fail@plt+0x5aac>
   18920:	mov	r5, #1
   18924:	strb	r3, [sp, #60]	; 0x3c
   18928:	and	r3, r3, #31
   1892c:	mov	r7, r8
   18930:	str	r3, [sp, #16]
   18934:	mov	r8, r5
   18938:	b	1859c <__assert_fail@plt+0x5a54>
   1893c:	ldr	r3, [sp, #36]	; 0x24
   18940:	cmp	r3, #0
   18944:	beq	189d0 <__assert_fail@plt+0x5e88>
   18948:	cmp	r4, #0
   1894c:	bne	18a84 <__assert_fail@plt+0x5f3c>
   18950:	ldr	r3, [sp, #12]
   18954:	mov	r5, #0
   18958:	add	r9, r9, r3
   1895c:	mov	r8, r5
   18960:	b	1859c <__assert_fail@plt+0x5a54>
   18964:	strb	r3, [sp, #60]	; 0x3c
   18968:	and	r3, r3, #15
   1896c:	mov	r7, r8
   18970:	str	r3, [sp, #16]
   18974:	mov	r5, #1
   18978:	mov	r8, #2
   1897c:	b	1859c <__assert_fail@plt+0x5a54>
   18980:	cmp	r3, #13
   18984:	ldrls	pc, [pc, r3, lsl #2]
   18988:	b	18ad0 <__assert_fail@plt+0x5f88>
   1898c:	andeq	r8, r1, r4, asr #19
   18990:	ldrdeq	r8, [r1], -r0
   18994:	ldrdeq	r8, [r1], -r0
   18998:	ldrdeq	r8, [r1], -r0
   1899c:	ldrdeq	r8, [r1], -r0
   189a0:	ldrdeq	r8, [r1], -r0
   189a4:	ldrdeq	r8, [r1], -r0
   189a8:	ldrdeq	r8, [r1], -r0
   189ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   189b0:	ldrdeq	r8, [r1], -r0
   189b4:	andeq	r8, r1, r4, asr #19
   189b8:			; <UNDEFINED> instruction: 0x000187bc
   189bc:	andeq	r8, r1, r4, asr #19
   189c0:	andeq	r8, r1, r4, asr #19
   189c4:	add	r9, r9, #2
   189c8:	mov	r7, #0
   189cc:	b	1859c <__assert_fail@plt+0x5a54>
   189d0:	ldr	r2, [sp, #16]
   189d4:	sub	r3, r2, #128	; 0x80
   189d8:	cmp	r3, #127	; 0x7f
   189dc:	bhi	18a60 <__assert_fail@plt+0x5f18>
   189e0:	cmp	r4, #0
   189e4:	ldr	r5, [sp, #12]
   189e8:	add	r9, r9, #1
   189ec:	beq	18bd8 <__assert_fail@plt+0x6090>
   189f0:	ldr	r8, [sp, #36]	; 0x24
   189f4:	strb	r2, [r4], #1
   189f8:	mov	r7, r8
   189fc:	b	1859c <__assert_fail@plt+0x5a54>
   18a00:	strb	r3, [sp, #60]	; 0x3c
   18a04:	and	r3, r3, #7
   18a08:	mov	r7, r8
   18a0c:	str	r3, [sp, #16]
   18a10:	mov	r5, #1
   18a14:	mov	r8, #3
   18a18:	b	1859c <__assert_fail@plt+0x5a54>
   18a1c:	add	r5, r4, r5
   18a20:	add	r2, sp, #60	; 0x3c
   18a24:	sub	r3, r4, #1
   18a28:	ldrb	r1, [r2], #1
   18a2c:	strb	r1, [r3, #1]!
   18a30:	cmp	r3, r5
   18a34:	bne	18a28 <__assert_fail@plt+0x5ee0>
   18a38:	ldr	r3, [sp, #12]
   18a3c:	add	r4, r4, r3
   18a40:	b	186b8 <__assert_fail@plt+0x5b70>
   18a44:	strb	r3, [sp, #60]	; 0x3c
   18a48:	and	r3, r3, #3
   18a4c:	mov	r7, r8
   18a50:	str	r3, [sp, #16]
   18a54:	mov	r5, #1
   18a58:	mov	r8, #4
   18a5c:	b	1859c <__assert_fail@plt+0x5a54>
   18a60:	ldr	r3, [sp, #12]
   18a64:	cmp	r4, #0
   18a68:	lsl	r8, r3, #2
   18a6c:	bne	18ba4 <__assert_fail@plt+0x605c>
   18a70:	mov	r7, #0
   18a74:	add	r9, r9, r8
   18a78:	mov	r5, r7
   18a7c:	mov	r8, r7
   18a80:	b	1859c <__assert_fail@plt+0x5a54>
   18a84:	add	r5, r4, r5
   18a88:	add	r2, sp, #60	; 0x3c
   18a8c:	sub	r3, r4, #1
   18a90:	ldrb	r1, [r2], #1
   18a94:	strb	r1, [r3, #1]!
   18a98:	cmp	r5, r3
   18a9c:	bne	18a90 <__assert_fail@plt+0x5f48>
   18aa0:	ldr	r3, [sp, #12]
   18aa4:	add	r4, r4, r3
   18aa8:	b	18950 <__assert_fail@plt+0x5e08>
   18aac:	strb	r3, [sp, #60]	; 0x3c
   18ab0:	and	r3, r3, #1
   18ab4:	mov	r7, r8
   18ab8:	str	r3, [sp, #16]
   18abc:	mov	r5, #1
   18ac0:	mov	r8, #5
   18ac4:	b	1859c <__assert_fail@plt+0x5a54>
   18ac8:	mov	r5, r4
   18acc:	b	18900 <__assert_fail@plt+0x5db8>
   18ad0:	mov	r7, #0
   18ad4:	add	r9, r9, #4
   18ad8:	mov	r4, r7
   18adc:	b	1859c <__assert_fail@plt+0x5a54>
   18ae0:	ldr	r7, [pc, #432]	; 18c98 <__assert_fail@plt+0x6150>
   18ae4:	mov	r6, #0
   18ae8:	strb	r6, [r4]
   18aec:	ldr	r0, [r7]
   18af0:	ldr	r1, [pc, #420]	; 18c9c <__assert_fail@plt+0x6154>
   18af4:	bl	126b0 <iconv_open@plt>
   18af8:	cmn	r0, #1
   18afc:	mov	r5, r0
   18b00:	beq	18c3c <__assert_fail@plt+0x60f4>
   18b04:	ldr	r3, [sp, #20]
   18b08:	sub	r4, r4, r3
   18b0c:	add	r0, r4, #1
   18b10:	tst	r0, #-268435456	; 0xf0000000
   18b14:	lsl	r0, r0, #4
   18b18:	str	r4, [sp, #52]	; 0x34
   18b1c:	str	r0, [sp, #56]	; 0x38
   18b20:	str	r3, [sp, #44]	; 0x2c
   18b24:	bne	18c78 <__assert_fail@plt+0x6130>
   18b28:	bl	122fc <gcry_xmalloc@plt>
   18b2c:	add	r3, sp, #56	; 0x38
   18b30:	str	r3, [sp]
   18b34:	add	r2, sp, #52	; 0x34
   18b38:	add	r3, sp, #48	; 0x30
   18b3c:	add	r1, sp, #44	; 0x2c
   18b40:	mov	r4, r0
   18b44:	mov	r0, r5
   18b48:	str	r4, [sp, #48]	; 0x30
   18b4c:	bl	12380 <iconv@plt>
   18b50:	cmn	r0, #1
   18b54:	bne	18bec <__assert_fail@plt+0x60a4>
   18b58:	ldr	r6, [pc, #304]	; 18c90 <__assert_fail@plt+0x6148>
   18b5c:	ldr	r0, [r6, #20]
   18b60:	cmp	r0, #0
   18b64:	beq	18c04 <__assert_fail@plt+0x60bc>
   18b68:	mov	r3, #1
   18b6c:	ldr	r0, [sp, #20]
   18b70:	str	r3, [r6, #20]
   18b74:	bl	124a0 <gcry_free@plt>
   18b78:	mov	r0, r4
   18b7c:	bl	124a0 <gcry_free@plt>
   18b80:	ldr	r2, [sp, #24]
   18b84:	ldr	r1, [sp, #28]
   18b88:	ldr	r0, [sp, #32]
   18b8c:	mov	r3, #0
   18b90:	bl	184e4 <__assert_fail@plt+0x599c>
   18b94:	str	r0, [sp, #20]
   18b98:	mov	r0, r5
   18b9c:	bl	12374 <iconv_close@plt>
   18ba0:	b	1865c <__assert_fail@plt+0x5b14>
   18ba4:	add	r7, r4, r8
   18ba8:	add	r5, sp, #60	; 0x3c
   18bac:	ldrb	r1, [r5], #1
   18bb0:	mov	r0, r4
   18bb4:	mov	r3, sl
   18bb8:	str	r1, [sp]
   18bbc:	mvn	r2, #0
   18bc0:	mov	r1, #1
   18bc4:	add	r4, r4, #4
   18bc8:	bl	12830 <__sprintf_chk@plt>
   18bcc:	cmp	r4, r7
   18bd0:	bne	18bac <__assert_fail@plt+0x6064>
   18bd4:	b	18a70 <__assert_fail@plt+0x5f28>
   18bd8:	mov	r7, r4
   18bdc:	mov	r8, r4
   18be0:	b	1859c <__assert_fail@plt+0x5a54>
   18be4:	mov	r4, r7
   18be8:	b	1859c <__assert_fail@plt+0x5a54>
   18bec:	ldr	r3, [sp, #48]	; 0x30
   18bf0:	ldr	r0, [sp, #20]
   18bf4:	str	r4, [sp, #20]
   18bf8:	strb	r6, [r3]
   18bfc:	bl	124a0 <gcry_free@plt>
   18c00:	b	18b98 <__assert_fail@plt+0x6050>
   18c04:	mov	r2, #5
   18c08:	ldr	r1, [pc, #144]	; 18ca0 <__assert_fail@plt+0x6158>
   18c0c:	bl	124dc <dcgettext@plt>
   18c10:	mov	r8, r0
   18c14:	bl	1280c <__errno_location@plt>
   18c18:	ldr	r7, [r7]
   18c1c:	ldr	r0, [r0]
   18c20:	bl	126c8 <strerror@plt>
   18c24:	mov	r2, r7
   18c28:	ldr	r1, [pc, #108]	; 18c9c <__assert_fail@plt+0x6154>
   18c2c:	mov	r3, r0
   18c30:	mov	r0, r8
   18c34:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   18c38:	b	18b68 <__assert_fail@plt+0x6020>
   18c3c:	mov	r2, #1
   18c40:	ldr	r1, [pc, #84]	; 18c9c <__assert_fail@plt+0x6154>
   18c44:	ldr	r0, [r7]
   18c48:	bl	183e0 <__assert_fail@plt+0x5898>
   18c4c:	ldr	r0, [sp, #20]
   18c50:	bl	124a0 <gcry_free@plt>
   18c54:	ldr	r3, [pc, #52]	; 18c90 <__assert_fail@plt+0x6148>
   18c58:	ldr	r2, [sp, #24]
   18c5c:	ldr	r1, [sp, #28]
   18c60:	ldr	r0, [sp, #32]
   18c64:	ldr	r3, [r3, #16]
   18c68:	bl	184e4 <__assert_fail@plt+0x599c>
   18c6c:	str	r0, [sp, #20]
   18c70:	b	1865c <__assert_fail@plt+0x5b14>
   18c74:	bl	124e8 <__stack_chk_fail@plt>
   18c78:	ldr	r2, [pc, #36]	; 18ca4 <__assert_fail@plt+0x615c>
   18c7c:	ldr	r1, [pc, #36]	; 18ca8 <__assert_fail@plt+0x6160>
   18c80:	ldr	r0, [pc, #36]	; 18cac <__assert_fail@plt+0x6164>
   18c84:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   18c88:	andeq	fp, r3, r0, lsl fp
   18c8c:	andeq	r8, r2, ip, asr sl
   18c90:	strdeq	ip, [r3], -r0
   18c94:	andeq	r8, r2, r4, ror #20
   18c98:	andeq	ip, r3, r8, ror r2
   18c9c:	andeq	r8, r2, ip, lsr #18
   18ca0:	andeq	r8, r2, r4, lsl #21
   18ca4:	andeq	r8, r2, r4, lsl #20
   18ca8:	andeq	r0, r0, r3, lsl #5
   18cac:	andeq	r8, r2, ip, ror #20
   18cb0:	push	{r4, r5, r6, lr}
   18cb4:	subs	r5, r0, #0
   18cb8:	beq	18dbc <__assert_fail@plt+0x6274>
   18cbc:	mov	r0, r5
   18cc0:	bl	12788 <strlen@plt>
   18cc4:	cmp	r0, #3
   18cc8:	bhi	18cfc <__assert_fail@plt+0x61b4>
   18ccc:	ldrb	r3, [r5]
   18cd0:	mov	r4, r5
   18cd4:	cmp	r3, #0
   18cd8:	bne	18d34 <__assert_fail@plt+0x61ec>
   18cdc:	ldr	r3, [pc, #392]	; 18e6c <__assert_fail@plt+0x6324>
   18ce0:	ldr	r2, [pc, #392]	; 18e70 <__assert_fail@plt+0x6328>
   18ce4:	ldr	r1, [pc, #392]	; 18e74 <__assert_fail@plt+0x632c>
   18ce8:	mov	r0, #0
   18cec:	str	r1, [r2]
   18cf0:	str	r0, [r3, #12]
   18cf4:	str	r0, [r3, #16]
   18cf8:	pop	{r4, r5, r6, pc}
   18cfc:	mov	r2, #3
   18d00:	ldr	r1, [pc, #368]	; 18e78 <__assert_fail@plt+0x6330>
   18d04:	mov	r0, r5
   18d08:	bl	17688 <__assert_fail@plt+0x4b40>
   18d0c:	cmp	r0, #0
   18d10:	bne	18ccc <__assert_fail@plt+0x6184>
   18d14:	ldrb	r3, [r5, #3]
   18d18:	cmp	r3, #95	; 0x5f
   18d1c:	cmpne	r3, #45	; 0x2d
   18d20:	addne	r4, r5, #3
   18d24:	ldrbeq	r3, [r5, #4]
   18d28:	addeq	r4, r5, #4
   18d2c:	cmp	r3, #0
   18d30:	beq	18cdc <__assert_fail@plt+0x6194>
   18d34:	ldr	r1, [pc, #320]	; 18e7c <__assert_fail@plt+0x6334>
   18d38:	mov	r0, r4
   18d3c:	bl	17548 <__assert_fail@plt+0x4a00>
   18d40:	cmp	r0, #0
   18d44:	beq	18cdc <__assert_fail@plt+0x6194>
   18d48:	ldr	r1, [pc, #304]	; 18e80 <__assert_fail@plt+0x6338>
   18d4c:	mov	r0, r4
   18d50:	bl	17548 <__assert_fail@plt+0x4a00>
   18d54:	cmp	r0, #0
   18d58:	beq	18cdc <__assert_fail@plt+0x6194>
   18d5c:	ldr	r1, [pc, #288]	; 18e84 <__assert_fail@plt+0x633c>
   18d60:	mov	r0, r4
   18d64:	bl	17548 <__assert_fail@plt+0x4a00>
   18d68:	cmp	r0, #0
   18d6c:	beq	18cdc <__assert_fail@plt+0x6194>
   18d70:	ldr	r1, [pc, #272]	; 18e88 <__assert_fail@plt+0x6340>
   18d74:	mov	r0, r4
   18d78:	bl	17548 <__assert_fail@plt+0x4a00>
   18d7c:	cmp	r0, #0
   18d80:	beq	18cdc <__assert_fail@plt+0x6194>
   18d84:	ldr	r1, [pc, #256]	; 18e8c <__assert_fail@plt+0x6344>
   18d88:	mov	r0, r4
   18d8c:	bl	17548 <__assert_fail@plt+0x4a00>
   18d90:	ldr	r6, [pc, #248]	; 18e90 <__assert_fail@plt+0x6348>
   18d94:	cmp	r0, #0
   18d98:	bne	18dcc <__assert_fail@plt+0x6284>
   18d9c:	ldr	r3, [pc, #200]	; 18e6c <__assert_fail@plt+0x6324>
   18da0:	ldr	r1, [pc, #200]	; 18e70 <__assert_fail@plt+0x6328>
   18da4:	mov	r2, #1
   18da8:	mov	r0, #0
   18dac:	str	r6, [r1]
   18db0:	str	r2, [r3, #12]
   18db4:	str	r0, [r3, #16]
   18db8:	pop	{r4, r5, r6, pc}
   18dbc:	mov	r0, #14
   18dc0:	bl	12998 <nl_langinfo@plt>
   18dc4:	mov	r5, r0
   18dc8:	b	18cbc <__assert_fail@plt+0x6174>
   18dcc:	mov	r0, r4
   18dd0:	mov	r1, r6
   18dd4:	bl	17548 <__assert_fail@plt+0x4a00>
   18dd8:	cmp	r0, #0
   18ddc:	beq	18d9c <__assert_fail@plt+0x6254>
   18de0:	mov	r1, r6
   18de4:	mov	r0, r5
   18de8:	bl	126b0 <iconv_open@plt>
   18dec:	cmn	r0, #1
   18df0:	mov	r4, r0
   18df4:	beq	18e3c <__assert_fail@plt+0x62f4>
   18df8:	bl	12374 <iconv_close@plt>
   18dfc:	mov	r1, r5
   18e00:	mov	r0, r6
   18e04:	bl	126b0 <iconv_open@plt>
   18e08:	cmn	r0, #1
   18e0c:	mov	r4, r0
   18e10:	beq	18e54 <__assert_fail@plt+0x630c>
   18e14:	bl	12374 <iconv_close@plt>
   18e18:	ldr	r3, [pc, #76]	; 18e6c <__assert_fail@plt+0x6324>
   18e1c:	ldr	ip, [pc, #76]	; 18e70 <__assert_fail@plt+0x6328>
   18e20:	mov	r2, #0
   18e24:	mov	r1, #1
   18e28:	mov	r0, r2
   18e2c:	str	r5, [ip]
   18e30:	str	r1, [r3, #16]
   18e34:	str	r2, [r3, #12]
   18e38:	pop	{r4, r5, r6, pc}
   18e3c:	mov	r0, r5
   18e40:	mov	r1, r6
   18e44:	mov	r2, #0
   18e48:	bl	183e0 <__assert_fail@plt+0x5898>
   18e4c:	mov	r0, r4
   18e50:	pop	{r4, r5, r6, pc}
   18e54:	mov	r0, r6
   18e58:	mov	r1, r5
   18e5c:	mov	r2, #0
   18e60:	bl	183e0 <__assert_fail@plt+0x5898>
   18e64:	mov	r0, r4
   18e68:	pop	{r4, r5, r6, pc}
   18e6c:	strdeq	ip, [r3], -r0
   18e70:	andeq	ip, r3, r8, ror r2
   18e74:			; <UNDEFINED> instruction: 0x00028ab4
   18e78:			; <UNDEFINED> instruction: 0x00028ab0
   18e7c:			; <UNDEFINED> instruction: 0x00028ab8
   18e80:	andeq	r8, r2, r0, asr #21
   18e84:	andeq	r8, r2, r4, asr #21
   18e88:	andeq	r8, r2, ip, asr #21
   18e8c:	ldrdeq	r8, [r2], -ip
   18e90:	andeq	r8, r2, ip, lsr #18
   18e94:	ldr	r3, [pc, #4]	; 18ea0 <__assert_fail@plt+0x6358>
   18e98:	ldr	r0, [r3]
   18e9c:	bx	lr
   18ea0:	andeq	ip, r3, r8, ror r2
   18ea4:	ldr	r3, [pc, #4]	; 18eb0 <__assert_fail@plt+0x6368>
   18ea8:	ldr	r0, [r3, #12]
   18eac:	bx	lr
   18eb0:	strdeq	ip, [r3], -r0
   18eb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18eb8:	sub	sp, sp, #32
   18ebc:	ldr	r8, [pc, #520]	; 190cc <__assert_fail@plt+0x6584>
   18ec0:	ldr	r5, [pc, #520]	; 190d0 <__assert_fail@plt+0x6588>
   18ec4:	ldr	r7, [r8, #12]
   18ec8:	ldr	r3, [r5]
   18ecc:	cmp	r7, #0
   18ed0:	str	r3, [sp, #28]
   18ed4:	bne	19038 <__assert_fail@plt+0x64f0>
   18ed8:	mov	r4, r0
   18edc:	ldr	r0, [r8, #16]
   18ee0:	cmp	r0, #0
   18ee4:	bne	18f8c <__assert_fail@plt+0x6444>
   18ee8:	ldrb	r3, [r4]
   18eec:	cmp	r3, #0
   18ef0:	beq	190c0 <__assert_fail@plt+0x6578>
   18ef4:	mov	r2, r4
   18ef8:	tst	r3, #128	; 0x80
   18efc:	ldrb	r3, [r2, #1]!
   18f00:	addeq	r0, r0, #1
   18f04:	addne	r0, r0, #2
   18f08:	cmp	r3, #0
   18f0c:	bne	18ef8 <__assert_fail@plt+0x63b0>
   18f10:	add	r0, r0, #1
   18f14:	bl	122fc <gcry_xmalloc@plt>
   18f18:	ldrb	r3, [r4]
   18f1c:	cmp	r3, #0
   18f20:	mov	r6, r0
   18f24:	mov	r2, r0
   18f28:	beq	18f68 <__assert_fail@plt+0x6420>
   18f2c:	mvn	lr, #63	; 0x3f
   18f30:	mvn	ip, #127	; 0x7f
   18f34:	sxtb	r1, r3
   18f38:	cmp	r1, #0
   18f3c:	movlt	r0, r2
   18f40:	orrlt	r3, lr, r3, lsr #6
   18f44:	strblt	r3, [r0], #2
   18f48:	strbge	r3, [r2], #1
   18f4c:	ldrb	r3, [r4, #1]!
   18f50:	andlt	r1, r1, #63	; 0x3f
   18f54:	orrlt	r1, ip, r1
   18f58:	strblt	r1, [r2, #1]
   18f5c:	movlt	r2, r0
   18f60:	cmp	r3, #0
   18f64:	bne	18f34 <__assert_fail@plt+0x63ec>
   18f68:	mov	r3, #0
   18f6c:	strb	r3, [r2]
   18f70:	ldr	r2, [sp, #28]
   18f74:	ldr	r3, [r5]
   18f78:	mov	r0, r6
   18f7c:	cmp	r2, r3
   18f80:	bne	190c8 <__assert_fail@plt+0x6580>
   18f84:	add	sp, sp, #32
   18f88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f8c:	ldr	sl, [pc, #320]	; 190d4 <__assert_fail@plt+0x658c>
   18f90:	ldr	r0, [pc, #320]	; 190d8 <__assert_fail@plt+0x6590>
   18f94:	ldr	r1, [sl]
   18f98:	bl	126b0 <iconv_open@plt>
   18f9c:	cmn	r0, #1
   18fa0:	mov	r9, r0
   18fa4:	beq	190a0 <__assert_fail@plt+0x6558>
   18fa8:	ldrb	r3, [r4]
   18fac:	cmp	r3, #0
   18fb0:	moveq	r7, r3
   18fb4:	moveq	r0, #1
   18fb8:	beq	18fdc <__assert_fail@plt+0x6494>
   18fbc:	mov	r2, r4
   18fc0:	tst	r3, #128	; 0x80
   18fc4:	ldrb	r3, [r2, #1]!
   18fc8:	addeq	r7, r7, #1
   18fcc:	addne	r7, r7, #6
   18fd0:	cmp	r3, #0
   18fd4:	bne	18fc0 <__assert_fail@plt+0x6478>
   18fd8:	add	r0, r7, #1
   18fdc:	bl	122fc <gcry_xmalloc@plt>
   18fe0:	str	r4, [sp, #12]
   18fe4:	mov	r6, r0
   18fe8:	mov	r0, r4
   18fec:	bl	12788 <strlen@plt>
   18ff0:	add	r3, sp, #24
   18ff4:	str	r3, [sp]
   18ff8:	add	r2, sp, #20
   18ffc:	add	r3, sp, #16
   19000:	add	r1, sp, #12
   19004:	str	r6, [sp, #16]
   19008:	str	r7, [sp, #24]
   1900c:	str	r0, [sp, #20]
   19010:	mov	r0, r9
   19014:	bl	12380 <iconv@plt>
   19018:	cmn	r0, #1
   1901c:	beq	19044 <__assert_fail@plt+0x64fc>
   19020:	ldr	r3, [sp, #16]
   19024:	mov	r2, #0
   19028:	strb	r2, [r3]
   1902c:	mov	r0, r9
   19030:	bl	12374 <iconv_close@plt>
   19034:	b	18f70 <__assert_fail@plt+0x6428>
   19038:	bl	128e4 <gcry_xstrdup@plt>
   1903c:	mov	r6, r0
   19040:	b	18f70 <__assert_fail@plt+0x6428>
   19044:	ldr	r0, [r8, #24]
   19048:	cmp	r0, #0
   1904c:	beq	19068 <__assert_fail@plt+0x6520>
   19050:	mov	r3, #1
   19054:	mov	r1, r4
   19058:	mov	r0, r6
   1905c:	str	r3, [r8, #24]
   19060:	bl	12620 <strcpy@plt>
   19064:	b	1902c <__assert_fail@plt+0x64e4>
   19068:	mov	r2, #5
   1906c:	ldr	r1, [pc, #104]	; 190dc <__assert_fail@plt+0x6594>
   19070:	bl	124dc <dcgettext@plt>
   19074:	mov	r7, r0
   19078:	bl	1280c <__errno_location@plt>
   1907c:	ldr	sl, [sl]
   19080:	ldr	r0, [r0]
   19084:	bl	126c8 <strerror@plt>
   19088:	mov	r1, sl
   1908c:	ldr	r2, [pc, #68]	; 190d8 <__assert_fail@plt+0x6590>
   19090:	mov	r3, r0
   19094:	mov	r0, r7
   19098:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   1909c:	b	19050 <__assert_fail@plt+0x6508>
   190a0:	ldr	r1, [sl]
   190a4:	mov	r2, #1
   190a8:	ldr	r0, [pc, #40]	; 190d8 <__assert_fail@plt+0x6590>
   190ac:	bl	183e0 <__assert_fail@plt+0x5898>
   190b0:	mov	r0, r4
   190b4:	bl	18eb4 <__assert_fail@plt+0x636c>
   190b8:	mov	r6, r0
   190bc:	b	18f70 <__assert_fail@plt+0x6428>
   190c0:	mov	r0, #1
   190c4:	b	18f14 <__assert_fail@plt+0x63cc>
   190c8:	bl	124e8 <__stack_chk_fail@plt>
   190cc:	strdeq	ip, [r3], -r0
   190d0:	andeq	fp, r3, r0, lsl fp
   190d4:	andeq	ip, r3, r8, ror r2
   190d8:	andeq	r8, r2, ip, lsr #18
   190dc:	andeq	r8, r2, r4, lsl #21
   190e0:	ldr	r3, [pc, #4]	; 190ec <__assert_fail@plt+0x65a4>
   190e4:	ldr	r3, [r3, #16]
   190e8:	b	184e4 <__assert_fail@plt+0x599c>
   190ec:	strdeq	ip, [r3], -r0
   190f0:	b	126b0 <iconv_open@plt>
   190f4:	b	12380 <iconv@plt>
   190f8:	b	12374 <iconv_close@plt>
   190fc:	push	{r4, r5, r6, lr}
   19100:	mov	r5, r1
   19104:	ldr	r1, [r0, #8]
   19108:	mov	r4, r0
   1910c:	ands	r3, r1, #32768	; 0x8000
   19110:	bne	19158 <__assert_fail@plt+0x6610>
   19114:	ldr	r2, [r0]
   19118:	orr	r1, r1, #32768	; 0x8000
   1911c:	str	r1, [r0, #8]
   19120:	str	r3, [r0, #28]
   19124:	str	r3, [r0, #32]
   19128:	str	r3, [r0, #36]	; 0x24
   1912c:	str	r3, [r0, #12]
   19130:	ldr	r2, [r2]
   19134:	str	r3, [r0, #40]	; 0x28
   19138:	cmp	r2, #0
   1913c:	str	r3, [r0, #44]	; 0x2c
   19140:	str	r3, [r0, #48]	; 0x30
   19144:	str	r3, [r0, #52]	; 0x34
   19148:	blt	192b0 <__assert_fail@plt+0x6768>
   1914c:	mov	r3, #0
   19150:	str	r3, [r4, #24]
   19154:	pop	{r4, r5, r6, pc}
   19158:	ldr	r3, [r0, #12]
   1915c:	cmp	r3, #0
   19160:	beq	1914c <__assert_fail@plt+0x6604>
   19164:	cmp	r5, #0
   19168:	ldr	r3, [r0, #16]
   1916c:	beq	191f4 <__assert_fail@plt+0x66ac>
   19170:	cmn	r3, #6
   19174:	mov	r6, r2
   19178:	mov	r2, #5
   1917c:	beq	19258 <__assert_fail@plt+0x6710>
   19180:	cmn	r3, #5
   19184:	beq	1926c <__assert_fail@plt+0x6724>
   19188:	cmn	r3, #4
   1918c:	beq	19280 <__assert_fail@plt+0x6738>
   19190:	cmn	r3, #3
   19194:	beq	192b8 <__assert_fail@plt+0x6770>
   19198:	cmn	r3, #12
   1919c:	beq	192e8 <__assert_fail@plt+0x67a0>
   191a0:	cmn	r3, #7
   191a4:	beq	19318 <__assert_fail@plt+0x67d0>
   191a8:	cmn	r3, #10
   191ac:	beq	19348 <__assert_fail@plt+0x6800>
   191b0:	cmn	r3, #11
   191b4:	mov	r0, #0
   191b8:	ldreq	r1, [pc, #496]	; 193b0 <__assert_fail@plt+0x6868>
   191bc:	ldrne	r1, [pc, #496]	; 193b4 <__assert_fail@plt+0x686c>
   191c0:	bl	124dc <dcgettext@plt>
   191c4:	mov	r3, r0
   191c8:	ldr	r2, [r6]
   191cc:	mov	r1, r5
   191d0:	ldr	r0, [pc, #480]	; 193b8 <__assert_fail@plt+0x6870>
   191d4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   191d8:	ldr	r3, [r4, #12]
   191dc:	cmp	r3, #1
   191e0:	moveq	r3, #0
   191e4:	streq	r3, [r4, #12]
   191e8:	beq	1914c <__assert_fail@plt+0x6604>
   191ec:	mov	r0, #2
   191f0:	bl	12764 <exit@plt>
   191f4:	ldr	r6, [r0, #40]	; 0x28
   191f8:	ldr	r2, [pc, #444]	; 193bc <__assert_fail@plt+0x6874>
   191fc:	cmp	r6, #0
   19200:	moveq	r6, r2
   19204:	cmn	r3, #3
   19208:	beq	192cc <__assert_fail@plt+0x6784>
   1920c:	cmn	r3, #12
   19210:	beq	192fc <__assert_fail@plt+0x67b4>
   19214:	cmn	r3, #6
   19218:	beq	1932c <__assert_fail@plt+0x67e4>
   1921c:	cmn	r3, #7
   19220:	beq	1935c <__assert_fail@plt+0x6814>
   19224:	cmn	r3, #8
   19228:	beq	19294 <__assert_fail@plt+0x674c>
   1922c:	cmn	r3, #9
   19230:	beq	19394 <__assert_fail@plt+0x684c>
   19234:	cmn	r3, #11
   19238:	mov	r2, #5
   1923c:	beq	19378 <__assert_fail@plt+0x6830>
   19240:	ldr	r1, [pc, #376]	; 193c0 <__assert_fail@plt+0x6878>
   19244:	mov	r0, #0
   19248:	bl	124dc <dcgettext@plt>
   1924c:	mov	r1, r6
   19250:	bl	1c744 <__assert_fail@plt+0x9bfc>
   19254:	b	191d8 <__assert_fail@plt+0x6690>
   19258:	ldr	r1, [pc, #356]	; 193c4 <__assert_fail@plt+0x687c>
   1925c:	mov	r0, #0
   19260:	bl	124dc <dcgettext@plt>
   19264:	mov	r3, r0
   19268:	b	191c8 <__assert_fail@plt+0x6680>
   1926c:	ldr	r1, [pc, #340]	; 193c8 <__assert_fail@plt+0x6880>
   19270:	mov	r0, #0
   19274:	bl	124dc <dcgettext@plt>
   19278:	mov	r3, r0
   1927c:	b	191c8 <__assert_fail@plt+0x6680>
   19280:	ldr	r1, [pc, #324]	; 193cc <__assert_fail@plt+0x6884>
   19284:	mov	r0, #0
   19288:	bl	124dc <dcgettext@plt>
   1928c:	mov	r3, r0
   19290:	b	191c8 <__assert_fail@plt+0x6680>
   19294:	mov	r0, r5
   19298:	mov	r2, #5
   1929c:	ldr	r1, [pc, #300]	; 193d0 <__assert_fail@plt+0x6888>
   192a0:	bl	124dc <dcgettext@plt>
   192a4:	mov	r1, r6
   192a8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   192ac:	b	191d8 <__assert_fail@plt+0x6690>
   192b0:	ldr	r0, [pc, #284]	; 193d4 <__assert_fail@plt+0x688c>
   192b4:	bl	1c84c <__assert_fail@plt+0x9d04>
   192b8:	ldr	r1, [pc, #280]	; 193d8 <__assert_fail@plt+0x6890>
   192bc:	mov	r0, #0
   192c0:	bl	124dc <dcgettext@plt>
   192c4:	mov	r3, r0
   192c8:	b	191c8 <__assert_fail@plt+0x6680>
   192cc:	mov	r0, r5
   192d0:	mov	r2, #5
   192d4:	ldr	r1, [pc, #256]	; 193dc <__assert_fail@plt+0x6894>
   192d8:	bl	124dc <dcgettext@plt>
   192dc:	mov	r1, r6
   192e0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   192e4:	b	191d8 <__assert_fail@plt+0x6690>
   192e8:	ldr	r1, [pc, #240]	; 193e0 <__assert_fail@plt+0x6898>
   192ec:	mov	r0, #0
   192f0:	bl	124dc <dcgettext@plt>
   192f4:	mov	r3, r0
   192f8:	b	191c8 <__assert_fail@plt+0x6680>
   192fc:	mov	r0, r5
   19300:	mov	r2, #5
   19304:	ldr	r1, [pc, #216]	; 193e4 <__assert_fail@plt+0x689c>
   19308:	bl	124dc <dcgettext@plt>
   1930c:	mov	r1, r6
   19310:	bl	1c744 <__assert_fail@plt+0x9bfc>
   19314:	b	191d8 <__assert_fail@plt+0x6690>
   19318:	ldr	r1, [pc, #200]	; 193e8 <__assert_fail@plt+0x68a0>
   1931c:	mov	r0, #0
   19320:	bl	124dc <dcgettext@plt>
   19324:	mov	r3, r0
   19328:	b	191c8 <__assert_fail@plt+0x6680>
   1932c:	mov	r0, r5
   19330:	mov	r2, #5
   19334:	ldr	r1, [pc, #176]	; 193ec <__assert_fail@plt+0x68a4>
   19338:	bl	124dc <dcgettext@plt>
   1933c:	mov	r1, r6
   19340:	bl	1c744 <__assert_fail@plt+0x9bfc>
   19344:	b	191d8 <__assert_fail@plt+0x6690>
   19348:	ldr	r1, [pc, #160]	; 193f0 <__assert_fail@plt+0x68a8>
   1934c:	mov	r0, #0
   19350:	bl	124dc <dcgettext@plt>
   19354:	mov	r3, r0
   19358:	b	191c8 <__assert_fail@plt+0x6680>
   1935c:	mov	r0, r5
   19360:	mov	r2, #5
   19364:	ldr	r1, [pc, #136]	; 193f4 <__assert_fail@plt+0x68ac>
   19368:	bl	124dc <dcgettext@plt>
   1936c:	mov	r1, r6
   19370:	bl	1c744 <__assert_fail@plt+0x9bfc>
   19374:	b	191d8 <__assert_fail@plt+0x6690>
   19378:	ldr	r1, [pc, #120]	; 193f8 <__assert_fail@plt+0x68b0>
   1937c:	mov	r0, #0
   19380:	bl	124dc <dcgettext@plt>
   19384:	mov	r1, r0
   19388:	ldr	r0, [pc, #108]	; 193fc <__assert_fail@plt+0x68b4>
   1938c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   19390:	b	191d8 <__assert_fail@plt+0x6690>
   19394:	mov	r0, r5
   19398:	mov	r2, #5
   1939c:	ldr	r1, [pc, #92]	; 19400 <__assert_fail@plt+0x68b8>
   193a0:	bl	124dc <dcgettext@plt>
   193a4:	mov	r1, r6
   193a8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   193ac:	b	191d8 <__assert_fail@plt+0x6690>
   193b0:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   193b4:	andeq	r8, r2, r4, ror #23
   193b8:	strdeq	r8, [r2], -r4
   193bc:	andeq	r8, r2, r4, lsr #22
   193c0:	andeq	r8, r2, r8, ror #25
   193c4:	andeq	r8, r2, ip, asr #22
   193c8:	andeq	r8, r2, r4, ror #22
   193cc:	andeq	r8, r2, r0, ror fp
   193d0:	muleq	r2, r8, ip
   193d4:	andeq	r8, r2, ip, lsr #22
   193d8:	andeq	r8, r2, r4, lsl #23
   193dc:	andeq	r8, r2, r0, lsl #24
   193e0:	muleq	r2, r8, fp
   193e4:	andeq	r8, r2, r8, lsr #24
   193e8:	andeq	r8, r2, ip, lsr #23
   193ec:	andeq	r8, r2, r0, asr ip
   193f0:			; <UNDEFINED> instruction: 0x00028bbc
   193f4:	andeq	r8, r2, ip, ror ip
   193f8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   193fc:	andeq	r7, r2, r0, asr #31
   19400:			; <UNDEFINED> instruction: 0x00028cb8
   19404:	tst	r1, #16
   19408:	and	r1, r1, #7
   1940c:	push	{r4, r5, r6, r7, r8, lr}
   19410:	movne	r7, #0
   19414:	moveq	r7, #10
   19418:	cmp	r1, #3
   1941c:	mov	r6, r0
   19420:	str	r1, [r0, #20]
   19424:	mov	r5, r2
   19428:	beq	19448 <__assert_fail@plt+0x6900>
   1942c:	cmp	r1, #4
   19430:	beq	19488 <__assert_fail@plt+0x6940>
   19434:	cmp	r1, #1
   19438:	beq	19448 <__assert_fail@plt+0x6900>
   1943c:	str	r2, [r6, #24]
   19440:	mov	r0, #1
   19444:	pop	{r4, r5, r6, r7, r8, pc}
   19448:	bl	1280c <__errno_location@plt>
   1944c:	mov	r1, #0
   19450:	mov	r2, r7
   19454:	mov	r4, r0
   19458:	mov	r0, r5
   1945c:	str	r1, [r4]
   19460:	bl	123a4 <strtol@plt>
   19464:	sub	r3, r0, #-2147483647	; 0x80000001
   19468:	cmn	r3, #3
   1946c:	bls	1947c <__assert_fail@plt+0x6934>
   19470:	ldr	r3, [r4]
   19474:	cmp	r3, #34	; 0x22
   19478:	beq	19504 <__assert_fail@plt+0x69bc>
   1947c:	str	r0, [r6, #24]
   19480:	mov	r0, #0
   19484:	pop	{r4, r5, r6, r7, r8, pc}
   19488:	ldrb	r4, [r2]
   1948c:	tst	r4, #128	; 0x80
   19490:	bne	194bc <__assert_fail@plt+0x6974>
   19494:	bl	12734 <__ctype_b_loc@plt>
   19498:	ldr	r2, [r0]
   1949c:	b	194ac <__assert_fail@plt+0x6964>
   194a0:	ldrb	r4, [r5, #1]!
   194a4:	tst	r4, #128	; 0x80
   194a8:	bne	194bc <__assert_fail@plt+0x6974>
   194ac:	lsl	r3, r4, #1
   194b0:	ldrh	r3, [r2, r3]
   194b4:	tst	r3, #8192	; 0x2000
   194b8:	bne	194a0 <__assert_fail@plt+0x6958>
   194bc:	cmp	r4, #45	; 0x2d
   194c0:	beq	19514 <__assert_fail@plt+0x69cc>
   194c4:	bl	1280c <__errno_location@plt>
   194c8:	mov	r4, #0
   194cc:	mov	r2, r7
   194d0:	mov	r1, r4
   194d4:	mov	r8, r0
   194d8:	mov	r0, r5
   194dc:	str	r4, [r8]
   194e0:	bl	1277c <strtoul@plt>
   194e4:	cmn	r0, #1
   194e8:	str	r0, [r6, #24]
   194ec:	beq	194f8 <__assert_fail@plt+0x69b0>
   194f0:	mov	r0, r4
   194f4:	pop	{r4, r5, r6, r7, r8, pc}
   194f8:	ldr	r3, [r8]
   194fc:	cmp	r3, #34	; 0x22
   19500:	bne	194f0 <__assert_fail@plt+0x69a8>
   19504:	mvn	r3, #11
   19508:	str	r3, [r6, #16]
   1950c:	mvn	r0, #0
   19510:	pop	{r4, r5, r6, r7, r8, pc}
   19514:	mov	r2, #0
   19518:	mvn	r3, #11
   1951c:	str	r2, [r6, #24]
   19520:	str	r3, [r6, #16]
   19524:	mvn	r0, #0
   19528:	pop	{r4, r5, r6, r7, r8, pc}
   1952c:	push	{r1, r2, r3}
   19530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19534:	sub	sp, sp, #8
   19538:	ldr	r8, [pc, #188]	; 195fc <__assert_fail@plt+0x6ab4>
   1953c:	ldr	r4, [sp, #44]	; 0x2c
   19540:	ldr	r3, [r8]
   19544:	cmp	r4, #0
   19548:	str	r3, [sp, #4]
   1954c:	moveq	r5, r4
   19550:	beq	195d4 <__assert_fail@plt+0x6a8c>
   19554:	cmp	r0, #0
   19558:	add	r2, sp, #48	; 0x30
   1955c:	mov	r9, r0
   19560:	ldr	r6, [pc, #152]	; 19600 <__assert_fail@plt+0x6ab8>
   19564:	ldr	fp, [pc, #152]	; 19604 <__assert_fail@plt+0x6abc>
   19568:	movne	r7, #2
   1956c:	moveq	r7, #1
   19570:	mov	sl, r2
   19574:	mov	r5, #0
   19578:	str	r2, [sp]
   1957c:	b	195ac <__assert_fail@plt+0x6a64>
   19580:	mov	r1, r4
   19584:	mov	r0, r7
   19588:	blx	r2
   1958c:	mov	r0, r4
   19590:	bl	12788 <strlen@plt>
   19594:	add	sl, sl, #4
   19598:	ldr	r4, [sl, #-4]
   1959c:	str	sl, [sp]
   195a0:	cmp	r4, #0
   195a4:	add	r5, r5, r0
   195a8:	beq	195d4 <__assert_fail@plt+0x6a8c>
   195ac:	ldr	r2, [r6]
   195b0:	cmp	r2, #0
   195b4:	bne	19580 <__assert_fail@plt+0x6a38>
   195b8:	cmp	r9, #0
   195bc:	mov	r0, r4
   195c0:	ldrne	r3, [pc, #64]	; 19608 <__assert_fail@plt+0x6ac0>
   195c4:	ldreq	r1, [fp]
   195c8:	ldrne	r1, [r3]
   195cc:	bl	12ab8 <fputs@plt>
   195d0:	b	1958c <__assert_fail@plt+0x6a44>
   195d4:	ldr	r2, [sp, #4]
   195d8:	ldr	r3, [r8]
   195dc:	mov	r0, r5
   195e0:	cmp	r2, r3
   195e4:	bne	195f8 <__assert_fail@plt+0x6ab0>
   195e8:	add	sp, sp, #8
   195ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195f0:	add	sp, sp, #12
   195f4:	bx	lr
   195f8:	bl	124e8 <__stack_chk_fail@plt>
   195fc:	andeq	fp, r3, r0, lsl fp
   19600:	andeq	ip, r3, ip, lsl #6
   19604:	andeq	ip, r3, r4, lsl #5
   19608:	andeq	ip, r3, r0, lsl #5
   1960c:	ldr	r3, [pc, #48]	; 19644 <__assert_fail@plt+0x6afc>
   19610:	ldr	r3, [r3]
   19614:	cmp	r3, #0
   19618:	beq	19630 <__assert_fail@plt+0x6ae8>
   1961c:	cmp	r0, #0
   19620:	movne	r0, #2
   19624:	moveq	r0, #1
   19628:	mov	r1, #0
   1962c:	bx	r3
   19630:	cmp	r0, #0
   19634:	ldrne	r3, [pc, #12]	; 19648 <__assert_fail@plt+0x6b00>
   19638:	ldreq	r3, [pc, #12]	; 1964c <__assert_fail@plt+0x6b04>
   1963c:	ldr	r0, [r3]
   19640:	b	123f8 <fflush@plt>
   19644:	andeq	ip, r3, ip, lsl #6
   19648:	andeq	ip, r3, r0, lsl #5
   1964c:	andeq	ip, r3, r4, lsl #5
   19650:	ldr	r3, [pc, #4]	; 1965c <__assert_fail@plt+0x6b14>
   19654:	str	r0, [r3]
   19658:	bx	lr
   1965c:	andeq	ip, r3, ip, lsl #6
   19660:	ldr	r3, [pc, #244]	; 1975c <__assert_fail@plt+0x6c14>
   19664:	push	{r4, lr}
   19668:	mov	r4, r0
   1966c:	ldr	r3, [r3, #4]
   19670:	cmp	r3, #0
   19674:	beq	19684 <__assert_fail@plt+0x6b3c>
   19678:	blx	r3
   1967c:	cmp	r0, #0
   19680:	bne	19714 <__assert_fail@plt+0x6bcc>
   19684:	sub	r0, r4, #10
   19688:	cmp	r0, #31
   1968c:	ldrls	pc, [pc, r0, lsl #2]
   19690:	b	19754 <__assert_fail@plt+0x6c0c>
   19694:	andeq	r9, r1, r4, lsr #14
   19698:	andeq	r9, r1, ip, lsr #14
   1969c:	andeq	r9, r1, r4, asr r7
   196a0:	andeq	r9, r1, r4, lsr r7
   196a4:	andeq	r9, r1, ip, lsr r7
   196a8:	andeq	r9, r1, r4, asr #14
   196ac:	andeq	r9, r1, ip, asr #14
   196b0:	andeq	r9, r1, r4, asr r7
   196b4:	andeq	r9, r1, r4, asr r7
   196b8:	andeq	r9, r1, r4, asr r7
   196bc:	andeq	r9, r1, r4, asr r7
   196c0:	andeq	r9, r1, r4, asr r7
   196c4:	andeq	r9, r1, r4, asr r7
   196c8:	andeq	r9, r1, r4, asr r7
   196cc:	andeq	r9, r1, r4, asr r7
   196d0:	andeq	r9, r1, r4, asr r7
   196d4:	andeq	r9, r1, r4, asr r7
   196d8:	andeq	r9, r1, r4, asr r7
   196dc:	andeq	r9, r1, r4, asr r7
   196e0:	andeq	r9, r1, r4, asr r7
   196e4:	andeq	r9, r1, r4, asr r7
   196e8:	andeq	r9, r1, r4, asr r7
   196ec:	andeq	r9, r1, r4, asr r7
   196f0:	andeq	r9, r1, r4, asr r7
   196f4:	andeq	r9, r1, r4, asr r7
   196f8:	andeq	r9, r1, r4, asr r7
   196fc:	andeq	r9, r1, r4, asr r7
   19700:	andeq	r9, r1, r4, asr r7
   19704:	andeq	r9, r1, r4, asr r7
   19708:	andeq	r9, r1, r4, asr r7
   1970c:	andeq	r9, r1, ip, lsl r7
   19710:	andeq	r9, r1, ip, lsl r7
   19714:	pop	{r4, lr}
   19718:	b	2723c <__assert_fail@plt+0x146f4>
   1971c:	ldr	r0, [pc, #60]	; 19760 <__assert_fail@plt+0x6c18>
   19720:	pop	{r4, pc}
   19724:	ldr	r0, [pc, #56]	; 19764 <__assert_fail@plt+0x6c1c>
   19728:	pop	{r4, pc}
   1972c:	ldr	r0, [pc, #52]	; 19768 <__assert_fail@plt+0x6c20>
   19730:	pop	{r4, pc}
   19734:	ldr	r0, [pc, #48]	; 1976c <__assert_fail@plt+0x6c24>
   19738:	pop	{r4, pc}
   1973c:	ldr	r0, [pc, #44]	; 19770 <__assert_fail@plt+0x6c28>
   19740:	pop	{r4, pc}
   19744:	ldr	r0, [pc, #40]	; 19774 <__assert_fail@plt+0x6c2c>
   19748:	pop	{r4, pc}
   1974c:	ldr	r0, [pc, #36]	; 19778 <__assert_fail@plt+0x6c30>
   19750:	pop	{r4, pc}
   19754:	mov	r0, #0
   19758:	pop	{r4, pc}
   1975c:	andeq	ip, r3, ip, lsl #6
   19760:	muleq	r2, r8, r9
   19764:	andeq	r9, r2, ip
   19768:	andeq	r8, r2, r0, lsl #26
   1976c:	andeq	r9, r2, r8
   19770:	ldrdeq	r8, [r2], -r4
   19774:	andeq	r8, r2, r8, asr pc
   19778:	andeq	r8, r2, r4, lsl #26
   1977c:	push	{r4, r5, lr}
   19780:	mov	r0, #11
   19784:	sub	sp, sp, #12
   19788:	bl	19660 <__assert_fail@plt+0x6b18>
   1978c:	mov	r2, #0
   19790:	mov	r1, r0
   19794:	mov	r0, r2
   19798:	bl	1952c <__assert_fail@plt+0x69e4>
   1979c:	mov	r0, #12
   197a0:	bl	19660 <__assert_fail@plt+0x6b18>
   197a4:	subs	r2, r0, #0
   197a8:	beq	197c0 <__assert_fail@plt+0x6c78>
   197ac:	mov	r0, #0
   197b0:	str	r0, [sp]
   197b4:	ldr	r3, [pc, #268]	; 198c8 <__assert_fail@plt+0x6d80>
   197b8:	ldr	r1, [pc, #268]	; 198cc <__assert_fail@plt+0x6d84>
   197bc:	bl	1952c <__assert_fail@plt+0x69e4>
   197c0:	mov	r0, #13
   197c4:	bl	19660 <__assert_fail@plt+0x6b18>
   197c8:	mov	ip, #0
   197cc:	ldr	r3, [pc, #252]	; 198d0 <__assert_fail@plt+0x6d88>
   197d0:	str	ip, [sp]
   197d4:	ldr	r1, [pc, #248]	; 198d4 <__assert_fail@plt+0x6d8c>
   197d8:	mov	r5, r3
   197dc:	mov	r4, #20
   197e0:	mov	r2, r0
   197e4:	mov	r0, ip
   197e8:	bl	1952c <__assert_fail@plt+0x69e4>
   197ec:	mov	r0, r4
   197f0:	bl	19660 <__assert_fail@plt+0x6b18>
   197f4:	mov	r3, #0
   197f8:	mov	r2, r5
   197fc:	add	r4, r4, #1
   19800:	subs	r1, r0, #0
   19804:	mov	r0, r3
   19808:	beq	19810 <__assert_fail@plt+0x6cc8>
   1980c:	bl	1952c <__assert_fail@plt+0x69e4>
   19810:	cmp	r4, #30
   19814:	bne	197ec <__assert_fail@plt+0x6ca4>
   19818:	mov	r0, #14
   1981c:	bl	19660 <__assert_fail@plt+0x6b18>
   19820:	subs	r1, r0, #0
   19824:	beq	19838 <__assert_fail@plt+0x6cf0>
   19828:	mov	r3, #0
   1982c:	mov	r0, r3
   19830:	ldr	r2, [pc, #152]	; 198d0 <__assert_fail@plt+0x6d88>
   19834:	bl	1952c <__assert_fail@plt+0x69e4>
   19838:	mov	r0, #10
   1983c:	bl	19660 <__assert_fail@plt+0x6b18>
   19840:	subs	r1, r0, #0
   19844:	beq	19858 <__assert_fail@plt+0x6d10>
   19848:	mov	r3, #0
   1984c:	mov	r0, r3
   19850:	ldr	r2, [pc, #120]	; 198d0 <__assert_fail@plt+0x6d88>
   19854:	bl	1952c <__assert_fail@plt+0x69e4>
   19858:	mov	r0, #15
   1985c:	bl	19660 <__assert_fail@plt+0x6b18>
   19860:	subs	r1, r0, #0
   19864:	beq	19874 <__assert_fail@plt+0x6d2c>
   19868:	mov	r2, #0
   1986c:	mov	r0, r2
   19870:	bl	1952c <__assert_fail@plt+0x69e4>
   19874:	mov	r0, #18
   19878:	bl	19660 <__assert_fail@plt+0x6b18>
   1987c:	subs	r1, r0, #0
   19880:	beq	19890 <__assert_fail@plt+0x6d48>
   19884:	mov	r2, #0
   19888:	mov	r0, r2
   1988c:	bl	1952c <__assert_fail@plt+0x69e4>
   19890:	mov	r0, r4
   19894:	bl	19660 <__assert_fail@plt+0x6b18>
   19898:	mov	r2, #0
   1989c:	add	r4, r4, #1
   198a0:	subs	r1, r0, #0
   198a4:	mov	r0, r2
   198a8:	beq	198b0 <__assert_fail@plt+0x6d68>
   198ac:	bl	1952c <__assert_fail@plt+0x69e4>
   198b0:	cmp	r4, #40	; 0x28
   198b4:	bne	19890 <__assert_fail@plt+0x6d48>
   198b8:	mov	r0, #0
   198bc:	add	sp, sp, #12
   198c0:	pop	{r4, r5, lr}
   198c4:	b	1960c <__assert_fail@plt+0x6ac4>
   198c8:	andeq	r9, r2, ip, asr r0
   198cc:	andeq	r9, r2, r0, rrx
   198d0:	andeq	sl, r2, ip, lsr #4
   198d4:	muleq	r2, r8, r1
   198d8:	ldr	r3, [pc, #1504]	; 19ec0 <__assert_fail@plt+0x7378>
   198dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e0:	sub	sp, sp, #28
   198e4:	ldr	r3, [r3]
   198e8:	mov	r7, r0
   198ec:	str	r3, [sp, #20]
   198f0:	str	r1, [sp, #8]
   198f4:	bl	1977c <__assert_fail@plt+0x6c34>
   198f8:	mov	r2, #0
   198fc:	mov	r0, r2
   19900:	ldr	r1, [pc, #1468]	; 19ec4 <__assert_fail@plt+0x737c>
   19904:	bl	1952c <__assert_fail@plt+0x69e4>
   19908:	mov	r0, #42	; 0x2a
   1990c:	bl	19660 <__assert_fail@plt+0x6b18>
   19910:	cmp	r0, #0
   19914:	beq	19924 <__assert_fail@plt+0x6ddc>
   19918:	ldrb	r3, [r0]
   1991c:	cmp	r3, #49	; 0x31
   19920:	beq	19dd8 <__assert_fail@plt+0x7290>
   19924:	mov	r0, #41	; 0x29
   19928:	bl	19660 <__assert_fail@plt+0x6b18>
   1992c:	mov	r3, #0
   19930:	ldr	r2, [pc, #1420]	; 19ec4 <__assert_fail@plt+0x737c>
   19934:	mov	r1, r0
   19938:	mov	r0, r3
   1993c:	bl	1952c <__assert_fail@plt+0x69e4>
   19940:	ldr	r3, [r7, #12]
   19944:	cmp	r3, #0
   19948:	beq	199f4 <__assert_fail@plt+0x6eac>
   1994c:	ldr	r2, [r7]
   19950:	cmp	r2, #0
   19954:	beq	199cc <__assert_fail@plt+0x6e84>
   19958:	mov	r4, r7
   1995c:	mov	r6, #0
   19960:	b	199a8 <__assert_fail@plt+0x6e60>
   19964:	ldrb	r8, [r3]
   19968:	cmp	r8, #64	; 0x40
   1996c:	beq	1999c <__assert_fail@plt+0x6e54>
   19970:	bl	12788 <strlen@plt>
   19974:	cmp	r8, #124	; 0x7c
   19978:	mov	r5, r0
   1997c:	beq	19cf0 <__assert_fail@plt+0x71a8>
   19980:	cmp	r5, #34	; 0x22
   19984:	movle	r3, #1
   19988:	movgt	r3, #0
   1998c:	cmp	r5, r6
   19990:	movle	r3, #0
   19994:	cmp	r3, #0
   19998:	movne	r6, r5
   1999c:	ldr	r3, [r4, #16]!
   199a0:	cmp	r3, #0
   199a4:	beq	19a34 <__assert_fail@plt+0x6eec>
   199a8:	ldr	r0, [r4, #4]
   199ac:	cmp	r0, #0
   199b0:	beq	1999c <__assert_fail@plt+0x6e54>
   199b4:	ldr	r3, [r4, #12]
   199b8:	cmp	r3, #0
   199bc:	bne	19964 <__assert_fail@plt+0x6e1c>
   199c0:	bl	12788 <strlen@plt>
   199c4:	mov	r5, r0
   199c8:	b	19980 <__assert_fail@plt+0x6e38>
   199cc:	ldrb	r3, [r3]
   199d0:	cmp	r3, #64	; 0x40
   199d4:	bne	19cd4 <__assert_fail@plt+0x718c>
   199d8:	ldr	r3, [sp, #8]
   199dc:	tst	r3, #32
   199e0:	beq	199f4 <__assert_fail@plt+0x6eac>
   199e4:	mov	r2, #0
   199e8:	mov	r0, r2
   199ec:	ldr	r1, [pc, #1236]	; 19ec8 <__assert_fail@plt+0x7380>
   199f0:	bl	1952c <__assert_fail@plt+0x69e4>
   199f4:	mov	r0, #19
   199f8:	bl	19660 <__assert_fail@plt+0x6b18>
   199fc:	subs	r4, r0, #0
   19a00:	beq	19a24 <__assert_fail@plt+0x6edc>
   19a04:	mov	r2, #0
   19a08:	mov	r0, r2
   19a0c:	ldr	r1, [pc, #1200]	; 19ec4 <__assert_fail@plt+0x737c>
   19a10:	bl	1952c <__assert_fail@plt+0x69e4>
   19a14:	mov	r2, #0
   19a18:	mov	r1, r4
   19a1c:	mov	r0, r2
   19a20:	bl	1952c <__assert_fail@plt+0x69e4>
   19a24:	mov	r0, #0
   19a28:	bl	1960c <__assert_fail@plt+0x6ac4>
   19a2c:	mov	r0, #0
   19a30:	bl	12764 <exit@plt>
   19a34:	ldr	r3, [r7, #12]
   19a38:	add	r6, r6, #10
   19a3c:	ldrb	r3, [r3]
   19a40:	cmp	r3, #64	; 0x40
   19a44:	bne	19cd8 <__assert_fail@plt+0x7190>
   19a48:	ldr	r3, [r7]
   19a4c:	cmp	r3, #0
   19a50:	beq	199d8 <__assert_fail@plt+0x6e90>
   19a54:	ldr	fp, [pc, #1136]	; 19ecc <__assert_fail@plt+0x7384>
   19a58:	ldr	sl, [pc, #1136]	; 19ed0 <__assert_fail@plt+0x7388>
   19a5c:	add	r7, r7, #16
   19a60:	mov	r2, #5
   19a64:	ldr	r1, [r7, #-4]
   19a68:	mov	r0, #0
   19a6c:	bl	124dc <dcgettext@plt>
   19a70:	bl	2723c <__assert_fail@plt+0x146f4>
   19a74:	subs	r5, r0, #0
   19a78:	beq	19a88 <__assert_fail@plt+0x6f40>
   19a7c:	ldrb	r3, [r5]
   19a80:	cmp	r3, #64	; 0x40
   19a84:	beq	19c44 <__assert_fail@plt+0x70fc>
   19a88:	ldr	r1, [r7, #-16]
   19a8c:	cmp	r1, #255	; 0xff
   19a90:	bgt	19b74 <__assert_fail@plt+0x702c>
   19a94:	mov	ip, #0
   19a98:	add	r9, sp, #16
   19a9c:	mov	r3, ip
   19aa0:	strb	r1, [sp, #16]
   19aa4:	mov	r0, ip
   19aa8:	mov	r2, r9
   19aac:	ldr	r1, [pc, #1056]	; 19ed4 <__assert_fail@plt+0x738c>
   19ab0:	strb	ip, [sp, #17]
   19ab4:	bl	1952c <__assert_fail@plt+0x69e4>
   19ab8:	ldr	r3, [r7, #-12]
   19abc:	cmp	r3, #0
   19ac0:	movne	r4, #3
   19ac4:	beq	19cb8 <__assert_fail@plt+0x7170>
   19ac8:	ldr	r2, [r7, #-16]
   19acc:	mov	r8, #0
   19ad0:	cmp	r2, #256	; 0x100
   19ad4:	movlt	ip, #44	; 0x2c
   19ad8:	movge	ip, #32
   19adc:	str	r8, [sp]
   19ae0:	mov	r0, r8
   19ae4:	mov	r2, fp
   19ae8:	mov	r1, r9
   19aec:	strb	ip, [sp, #16]
   19af0:	strb	r8, [sp, #17]
   19af4:	bl	1952c <__assert_fail@plt+0x69e4>
   19af8:	cmp	r5, r8
   19afc:	add	r4, r4, r0
   19b00:	beq	19b10 <__assert_fail@plt+0x6fc8>
   19b04:	ldrb	r3, [r5]
   19b08:	cmp	r3, #124	; 0x7c
   19b0c:	beq	19d40 <__assert_fail@plt+0x71f8>
   19b10:	mov	r2, #0
   19b14:	mov	r0, r2
   19b18:	mov	r1, sl
   19b1c:	add	r4, r4, #3
   19b20:	bl	1952c <__assert_fail@plt+0x69e4>
   19b24:	cmp	r6, r4
   19b28:	ble	19b4c <__assert_fail@plt+0x7004>
   19b2c:	ldr	r8, [pc, #932]	; 19ed8 <__assert_fail@plt+0x7390>
   19b30:	mov	r2, #0
   19b34:	add	r4, r4, #1
   19b38:	mov	r0, r2
   19b3c:	mov	r1, r8
   19b40:	bl	1952c <__assert_fail@plt+0x69e4>
   19b44:	cmp	r6, r4
   19b48:	bne	19b30 <__assert_fail@plt+0x6fe8>
   19b4c:	cmp	r5, #0
   19b50:	bne	19b9c <__assert_fail@plt+0x7054>
   19b54:	mov	r2, #0
   19b58:	mov	r0, r2
   19b5c:	ldr	r1, [pc, #864]	; 19ec4 <__assert_fail@plt+0x737c>
   19b60:	bl	1952c <__assert_fail@plt+0x69e4>
   19b64:	ldr	r3, [r7], #16
   19b68:	cmp	r3, #0
   19b6c:	bne	19a60 <__assert_fail@plt+0x6f18>
   19b70:	b	199d8 <__assert_fail@plt+0x6e90>
   19b74:	mov	r2, #0
   19b78:	mov	r0, r2
   19b7c:	mov	r1, sl
   19b80:	bl	1952c <__assert_fail@plt+0x69e4>
   19b84:	ldr	r3, [r7, #-12]
   19b88:	mov	r4, #3
   19b8c:	cmp	r3, #0
   19b90:	addne	r9, sp, #16
   19b94:	bne	19ac8 <__assert_fail@plt+0x6f80>
   19b98:	b	19b2c <__assert_fail@plt+0x6fe4>
   19b9c:	ldrb	r3, [r5]
   19ba0:	cmp	r3, #0
   19ba4:	cmpne	r6, r4
   19ba8:	blt	19e14 <__assert_fail@plt+0x72cc>
   19bac:	cmp	r3, #0
   19bb0:	beq	19b54 <__assert_fail@plt+0x700c>
   19bb4:	cmp	r3, #10
   19bb8:	mov	r8, #0
   19bbc:	ldr	r4, [pc, #788]	; 19ed8 <__assert_fail@plt+0x7390>
   19bc0:	bne	19c18 <__assert_fail@plt+0x70d0>
   19bc4:	ldrb	r3, [r5, #1]
   19bc8:	cmp	r3, #0
   19bcc:	beq	19b54 <__assert_fail@plt+0x700c>
   19bd0:	mov	r2, #0
   19bd4:	mov	r0, r2
   19bd8:	ldr	r1, [pc, #740]	; 19ec4 <__assert_fail@plt+0x737c>
   19bdc:	bl	1952c <__assert_fail@plt+0x69e4>
   19be0:	mov	r9, #0
   19be4:	mov	r2, #0
   19be8:	add	r9, r9, #1
   19bec:	mov	r0, r2
   19bf0:	mov	r1, r4
   19bf4:	bl	1952c <__assert_fail@plt+0x69e4>
   19bf8:	cmp	r6, r9
   19bfc:	bne	19be4 <__assert_fail@plt+0x709c>
   19c00:	ldrb	r3, [r5, #1]
   19c04:	add	r5, r5, #1
   19c08:	cmp	r3, #0
   19c0c:	beq	19b54 <__assert_fail@plt+0x700c>
   19c10:	cmp	r3, #10
   19c14:	beq	19bc4 <__assert_fail@plt+0x707c>
   19c18:	mov	r2, #0
   19c1c:	mov	r0, r2
   19c20:	add	r1, sp, #16
   19c24:	strb	r3, [sp, #16]
   19c28:	strb	r8, [sp, #17]
   19c2c:	bl	1952c <__assert_fail@plt+0x69e4>
   19c30:	ldrb	r3, [r5, #1]
   19c34:	add	r5, r5, #1
   19c38:	cmp	r3, #0
   19c3c:	bne	19c10 <__assert_fail@plt+0x70c8>
   19c40:	b	19b54 <__assert_fail@plt+0x700c>
   19c44:	ldrb	r3, [r5, #1]
   19c48:	cmp	r3, #0
   19c4c:	beq	19b64 <__assert_fail@plt+0x701c>
   19c50:	cmp	r3, #10
   19c54:	add	r5, r5, #1
   19c58:	mov	r4, #0
   19c5c:	ldr	r8, [pc, #608]	; 19ec4 <__assert_fail@plt+0x737c>
   19c60:	bne	19c98 <__assert_fail@plt+0x7150>
   19c64:	ldrb	r3, [r5, #1]
   19c68:	cmp	r3, #0
   19c6c:	beq	19b54 <__assert_fail@plt+0x700c>
   19c70:	mov	r2, #0
   19c74:	mov	r0, r2
   19c78:	mov	r1, r8
   19c7c:	bl	1952c <__assert_fail@plt+0x69e4>
   19c80:	ldrb	r3, [r5, #1]
   19c84:	cmp	r3, #0
   19c88:	add	r5, r5, #1
   19c8c:	beq	19b54 <__assert_fail@plt+0x700c>
   19c90:	cmp	r3, #10
   19c94:	beq	19c64 <__assert_fail@plt+0x711c>
   19c98:	mov	r2, #0
   19c9c:	mov	r0, r2
   19ca0:	add	r1, sp, #16
   19ca4:	strb	r3, [sp, #16]
   19ca8:	strb	r4, [sp, #17]
   19cac:	bl	1952c <__assert_fail@plt+0x69e4>
   19cb0:	ldrb	r3, [r5, #1]
   19cb4:	b	19c84 <__assert_fail@plt+0x713c>
   19cb8:	cmp	r5, #0
   19cbc:	beq	19ccc <__assert_fail@plt+0x7184>
   19cc0:	ldrb	r2, [r5]
   19cc4:	cmp	r2, #124	; 0x7c
   19cc8:	beq	19e50 <__assert_fail@plt+0x7308>
   19ccc:	mov	r4, #3
   19cd0:	b	19b2c <__assert_fail@plt+0x6fe4>
   19cd4:	mov	r6, #10
   19cd8:	mov	r3, #0
   19cdc:	mov	r0, r3
   19ce0:	ldr	r2, [pc, #476]	; 19ec4 <__assert_fail@plt+0x737c>
   19ce4:	ldr	r1, [pc, #496]	; 19edc <__assert_fail@plt+0x7394>
   19ce8:	bl	1952c <__assert_fail@plt+0x69e4>
   19cec:	b	19a48 <__assert_fail@plt+0x6f00>
   19cf0:	bl	18ea4 <__assert_fail@plt+0x635c>
   19cf4:	ldr	r3, [r4, #12]
   19cf8:	add	r2, r3, #1
   19cfc:	ldrb	r3, [r3, #1]
   19d00:	cmp	r3, #61	; 0x3d
   19d04:	beq	19d18 <__assert_fail@plt+0x71d0>
   19d08:	cmp	r3, #124	; 0x7c
   19d0c:	cmpne	r3, #0
   19d10:	add	r5, r5, #1
   19d14:	beq	19980 <__assert_fail@plt+0x6e38>
   19d18:	cmp	r0, #0
   19d1c:	beq	19d2c <__assert_fail@plt+0x71e4>
   19d20:	and	r3, r3, #192	; 0xc0
   19d24:	cmp	r3, #128	; 0x80
   19d28:	addne	r5, r5, #1
   19d2c:	ldrb	r3, [r2, #1]!
   19d30:	cmp	r3, #0
   19d34:	cmpne	r3, #124	; 0x7c
   19d38:	bne	19d18 <__assert_fail@plt+0x71d0>
   19d3c:	b	19980 <__assert_fail@plt+0x6e38>
   19d40:	ldrb	ip, [r5, #1]
   19d44:	add	r3, r5, #1
   19d48:	str	r3, [sp, #12]
   19d4c:	cmp	ip, #61	; 0x3d
   19d50:	bne	19da8 <__assert_fail@plt+0x7260>
   19d54:	mvn	r8, r5
   19d58:	add	r8, r8, r4
   19d5c:	add	r4, r5, #2
   19d60:	mov	r5, #0
   19d64:	mov	r2, #0
   19d68:	mov	r0, r2
   19d6c:	mov	r1, r9
   19d70:	strb	ip, [sp, #16]
   19d74:	strb	r5, [sp, #17]
   19d78:	bl	1952c <__assert_fail@plt+0x69e4>
   19d7c:	mov	r3, r4
   19d80:	add	r2, r8, r4
   19d84:	ldrb	ip, [r4], #1
   19d88:	cmp	ip, #0
   19d8c:	cmpne	ip, #124	; 0x7c
   19d90:	bne	19d64 <__assert_fail@plt+0x721c>
   19d94:	mov	r4, r2
   19d98:	mov	r5, r3
   19d9c:	cmp	ip, #0
   19da0:	addne	r5, r5, #1
   19da4:	b	19b10 <__assert_fail@plt+0x6fc8>
   19da8:	mov	r2, r8
   19dac:	mov	r0, r8
   19db0:	ldr	r1, [pc, #288]	; 19ed8 <__assert_fail@plt+0x7390>
   19db4:	bl	1952c <__assert_fail@plt+0x69e4>
   19db8:	ldrb	ip, [r5, #1]
   19dbc:	ldr	r3, [sp, #12]
   19dc0:	add	r4, r4, #1
   19dc4:	cmp	ip, #124	; 0x7c
   19dc8:	cmpne	ip, r8
   19dcc:	moveq	r5, r3
   19dd0:	bne	19d54 <__assert_fail@plt+0x720c>
   19dd4:	b	19d9c <__assert_fail@plt+0x7254>
   19dd8:	mov	r0, #40	; 0x28
   19ddc:	bl	19660 <__assert_fail@plt+0x6b18>
   19de0:	mov	r2, #0
   19de4:	mov	r4, r0
   19de8:	mov	r1, r0
   19dec:	mov	r0, #1
   19df0:	bl	1952c <__assert_fail@plt+0x69e4>
   19df4:	ldrb	r3, [r4]
   19df8:	cmp	r3, #0
   19dfc:	beq	19924 <__assert_fail@plt+0x6ddc>
   19e00:	mov	r2, #0
   19e04:	ldr	r1, [pc, #184]	; 19ec4 <__assert_fail@plt+0x737c>
   19e08:	mov	r0, #1
   19e0c:	bl	1952c <__assert_fail@plt+0x69e4>
   19e10:	b	19924 <__assert_fail@plt+0x6ddc>
   19e14:	mov	r2, #0
   19e18:	mov	r0, r2
   19e1c:	ldr	r1, [pc, #160]	; 19ec4 <__assert_fail@plt+0x737c>
   19e20:	bl	1952c <__assert_fail@plt+0x69e4>
   19e24:	ldr	r8, [pc, #172]	; 19ed8 <__assert_fail@plt+0x7390>
   19e28:	mov	r4, #0
   19e2c:	mov	r2, #0
   19e30:	add	r4, r4, #1
   19e34:	mov	r0, r2
   19e38:	mov	r1, r8
   19e3c:	bl	1952c <__assert_fail@plt+0x69e4>
   19e40:	cmp	r6, r4
   19e44:	bne	19e2c <__assert_fail@plt+0x72e4>
   19e48:	ldrb	r3, [r5]
   19e4c:	b	19bac <__assert_fail@plt+0x7064>
   19e50:	mov	r2, r3
   19e54:	ldr	r1, [pc, #124]	; 19ed8 <__assert_fail@plt+0x7390>
   19e58:	mov	r0, r3
   19e5c:	str	r3, [sp, #12]
   19e60:	add	r8, r5, #1
   19e64:	bl	1952c <__assert_fail@plt+0x69e4>
   19e68:	rsb	r5, r5, #3
   19e6c:	b	19e8c <__assert_fail@plt+0x7344>
   19e70:	mov	r2, #0
   19e74:	ldr	r3, [sp, #12]
   19e78:	mov	r0, r2
   19e7c:	mov	r1, r9
   19e80:	strb	ip, [sp, #16]
   19e84:	strb	r3, [sp, #17]
   19e88:	bl	1952c <__assert_fail@plt+0x69e4>
   19e8c:	add	r4, r5, r8
   19e90:	mov	r2, r8
   19e94:	ldrb	ip, [r8], #1
   19e98:	cmp	ip, #0
   19e9c:	cmpne	ip, #124	; 0x7c
   19ea0:	bne	19e70 <__assert_fail@plt+0x7328>
   19ea4:	cmp	ip, #0
   19ea8:	movne	r5, r8
   19eac:	moveq	r5, r2
   19eb0:	ldr	r3, [r7, #-12]
   19eb4:	cmp	r3, #0
   19eb8:	bne	19ac8 <__assert_fail@plt+0x6f80>
   19ebc:	b	19b24 <__assert_fail@plt+0x6fdc>
   19ec0:	andeq	fp, r3, r0, lsl fp
   19ec4:	andeq	sl, r2, ip, lsr #4
   19ec8:	andeq	r9, r2, ip, ror r0
   19ecc:	andeq	r9, r2, r8, ror r0
   19ed0:	andeq	r9, r2, r4, ror r0
   19ed4:	andeq	r9, r2, r0, ror r0
   19ed8:	muleq	r2, r8, r1
   19edc:	andeq	r9, r2, r4, rrx
   19ee0:	ldr	ip, [pc, #2540]	; 1a8d4 <__assert_fail@plt+0x7d8c>
   19ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ee8:	sub	sp, sp, #108	; 0x6c
   19eec:	mov	r6, r1
   19ef0:	str	r1, [sp, #16]
   19ef4:	mov	r4, r0
   19ef8:	ldm	ip, {r0, r1, r2, r3}
   19efc:	add	r5, ip, #16
   19f00:	add	lr, sp, #40	; 0x28
   19f04:	stm	lr, {r0, r1, r2, r3}
   19f08:	add	lr, ip, #32
   19f0c:	ldm	r5, {r0, r1, r2, r3}
   19f10:	add	r5, sp, #56	; 0x38
   19f14:	add	ip, ip, #48	; 0x30
   19f18:	stm	r5, {r0, r1, r2, r3}
   19f1c:	ldm	lr, {r0, r1, r2, r3}
   19f20:	add	lr, sp, #72	; 0x48
   19f24:	stm	lr, {r0, r1, r2, r3}
   19f28:	ldm	ip, {r0, r1, r2, r3}
   19f2c:	add	ip, sp, #88	; 0x58
   19f30:	stm	ip, {r0, r1, r2, r3}
   19f34:	ldr	r7, [r6]
   19f38:	cmp	r7, #0
   19f3c:	beq	1a248 <__assert_fail@plt+0x7700>
   19f40:	mov	r7, #0
   19f44:	mov	r5, r6
   19f48:	str	r7, [sp, #20]
   19f4c:	str	r7, [sp, #12]
   19f50:	mov	r9, r7
   19f54:	mov	r6, r7
   19f58:	ldr	r8, [pc, #2424]	; 1a8d8 <__assert_fail@plt+0x7d90>
   19f5c:	ldr	sl, [pc, #2424]	; 1a8dc <__assert_fail@plt+0x7d94>
   19f60:	b	19f68 <__assert_fail@plt+0x7420>
   19f64:	mov	r6, ip
   19f68:	ldr	fp, [r5, #4]
   19f6c:	cmp	fp, #0
   19f70:	beq	19fd8 <__assert_fail@plt+0x7490>
   19f74:	mov	r1, r8
   19f78:	mov	r0, fp
   19f7c:	bl	1238c <strcmp@plt>
   19f80:	cmp	r0, #0
   19f84:	moveq	r9, #1
   19f88:	beq	19fd8 <__assert_fail@plt+0x7490>
   19f8c:	mov	r1, sl
   19f90:	mov	r0, fp
   19f94:	bl	1238c <strcmp@plt>
   19f98:	cmp	r0, #0
   19f9c:	moveq	r3, #1
   19fa0:	streq	r3, [sp, #12]
   19fa4:	beq	19fd8 <__assert_fail@plt+0x7490>
   19fa8:	ldr	r1, [pc, #2352]	; 1a8e0 <__assert_fail@plt+0x7d98>
   19fac:	mov	r0, fp
   19fb0:	bl	1238c <strcmp@plt>
   19fb4:	cmp	r0, #0
   19fb8:	moveq	r3, #1
   19fbc:	streq	r3, [sp, #20]
   19fc0:	beq	19fd8 <__assert_fail@plt+0x7490>
   19fc4:	mov	r0, fp
   19fc8:	ldr	r1, [pc, #2324]	; 1a8e4 <__assert_fail@plt+0x7d9c>
   19fcc:	bl	1238c <strcmp@plt>
   19fd0:	cmp	r0, #0
   19fd4:	moveq	r7, #1
   19fd8:	ldr	r3, [r5, #16]!
   19fdc:	add	ip, r6, #1
   19fe0:	cmp	r3, #0
   19fe4:	bne	19f64 <__assert_fail@plt+0x741c>
   19fe8:	cmp	r9, #0
   19fec:	addeq	ip, r6, #2
   19ff0:	beq	1a258 <__assert_fail@plt+0x7710>
   19ff4:	ldr	r3, [sp, #12]
   19ff8:	cmp	r3, #0
   19ffc:	bne	1a018 <__assert_fail@plt+0x74d0>
   1a000:	add	r3, sp, #56	; 0x38
   1a004:	ldr	lr, [sp, #16]
   1a008:	ldm	r3, {r0, r1, r2, r3}
   1a00c:	add	lr, lr, ip, lsl #4
   1a010:	add	ip, ip, #1
   1a014:	stm	lr, {r0, r1, r2, r3}
   1a018:	ldr	r3, [sp, #20]
   1a01c:	cmp	r3, #0
   1a020:	bne	1a03c <__assert_fail@plt+0x74f4>
   1a024:	add	r3, sp, #72	; 0x48
   1a028:	ldr	lr, [sp, #16]
   1a02c:	ldm	r3, {r0, r1, r2, r3}
   1a030:	add	lr, lr, ip, lsl #4
   1a034:	add	ip, ip, #1
   1a038:	stm	lr, {r0, r1, r2, r3}
   1a03c:	cmp	r7, #0
   1a040:	addeq	r3, sp, #88	; 0x58
   1a044:	ldreq	lr, [sp, #16]
   1a048:	ldmeq	r3, {r0, r1, r2, r3}
   1a04c:	addeq	ip, lr, ip, lsl #4
   1a050:	stmeq	ip, {r0, r1, r2, r3}
   1a054:	mov	r2, #0
   1a058:	mov	r1, r2
   1a05c:	mov	r0, r4
   1a060:	bl	190fc <__assert_fail@plt+0x65b4>
   1a064:	ldr	fp, [r4]
   1a068:	ldr	r9, [r4, #28]
   1a06c:	ldr	r3, [r4, #4]
   1a070:	ldr	r8, [fp]
   1a074:	mov	r1, fp
   1a078:	adds	r2, r8, #0
   1a07c:	movne	r2, #1
   1a080:	cmp	r9, #0
   1a084:	movne	r2, #0
   1a088:	cmp	r2, #0
   1a08c:	ldr	r7, [r3]
   1a090:	mov	r2, r3
   1a094:	beq	1a0b0 <__assert_fail@plt+0x7568>
   1a098:	ldr	r0, [r4, #8]
   1a09c:	tst	r0, #16
   1a0a0:	bne	1a268 <__assert_fail@plt+0x7720>
   1a0a4:	sub	r8, r8, #1
   1a0a8:	add	r7, r7, #4
   1a0ac:	mov	r9, #1
   1a0b0:	cmp	r8, #0
   1a0b4:	beq	1a23c <__assert_fail@plt+0x76f4>
   1a0b8:	ldr	sl, [r4, #36]	; 0x24
   1a0bc:	ldr	r5, [r7]
   1a0c0:	cmp	sl, #0
   1a0c4:	str	r5, [r4, #40]	; 0x28
   1a0c8:	moveq	r1, #1
   1a0cc:	moveq	r0, sl
   1a0d0:	bne	1a110 <__assert_fail@plt+0x75c8>
   1a0d4:	ldrb	r2, [r5]
   1a0d8:	cmp	r2, #45	; 0x2d
   1a0dc:	beq	1a140 <__assert_fail@plt+0x75f8>
   1a0e0:	ldr	r6, [r4, #32]
   1a0e4:	cmp	r6, #0
   1a0e8:	bne	1a29c <__assert_fail@plt+0x7754>
   1a0ec:	ldr	r2, [r4, #8]
   1a0f0:	tst	r2, #4
   1a0f4:	bne	1a270 <__assert_fail@plt+0x7728>
   1a0f8:	str	r1, [r4, #36]	; 0x24
   1a0fc:	ldr	r2, [r4, #36]	; 0x24
   1a100:	ldr	r5, [r7]
   1a104:	cmp	r2, #0
   1a108:	str	r5, [r4, #40]	; 0x28
   1a10c:	beq	1a0d4 <__assert_fail@plt+0x758c>
   1a110:	ldr	r2, [r4, #8]
   1a114:	ands	r2, r2, #2
   1a118:	streq	r2, [r4, #16]
   1a11c:	moveq	r1, fp
   1a120:	moveq	r2, r3
   1a124:	bne	1a270 <__assert_fail@plt+0x7728>
   1a128:	str	r8, [r1]
   1a12c:	str	r7, [r2]
   1a130:	ldr	r0, [r4, #16]
   1a134:	str	r9, [r4, #28]
   1a138:	add	sp, sp, #108	; 0x6c
   1a13c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a140:	ldrb	r2, [r5, #1]
   1a144:	cmp	r2, #45	; 0x2d
   1a148:	beq	1a1fc <__assert_fail@plt+0x76b4>
   1a14c:	cmp	r2, #0
   1a150:	beq	1a0e0 <__assert_fail@plt+0x7598>
   1a154:	ldr	r2, [sp, #16]
   1a158:	ldr	r6, [r4, #32]
   1a15c:	ldr	r2, [r2]
   1a160:	cmp	r6, #0
   1a164:	str	r2, [sp, #20]
   1a168:	bne	1a2a8 <__assert_fail@plt+0x7760>
   1a16c:	ldr	r1, [r4, #8]
   1a170:	mov	r2, #1
   1a174:	tst	r1, #32
   1a178:	add	r1, r5, r2
   1a17c:	str	r2, [r4, #32]
   1a180:	str	r1, [sp, #12]
   1a184:	beq	1a3f8 <__assert_fail@plt+0x78b0>
   1a188:	ldr	r0, [sp, #20]
   1a18c:	cmp	r0, #0
   1a190:	beq	1a778 <__assert_fail@plt+0x7c30>
   1a194:	ldr	r2, [sp, #16]
   1a198:	str	sl, [sp, #28]
   1a19c:	str	r5, [sp, #32]
   1a1a0:	str	r4, [sp, #24]
   1a1a4:	mov	r5, r6
   1a1a8:	mov	sl, r1
   1a1ac:	mov	r4, r2
   1a1b0:	mov	r6, r3
   1a1b4:	ldr	r0, [r4, #4]
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a1d0 <__assert_fail@plt+0x7688>
   1a1c0:	mov	r1, sl
   1a1c4:	bl	1238c <strcmp@plt>
   1a1c8:	cmp	r0, #0
   1a1cc:	beq	1a368 <__assert_fail@plt+0x7820>
   1a1d0:	ldr	r1, [r4, #16]!
   1a1d4:	add	r5, r5, #1
   1a1d8:	cmp	r1, #0
   1a1dc:	bne	1a1b4 <__assert_fail@plt+0x766c>
   1a1e0:	ldr	r5, [sp, #32]
   1a1e4:	mov	r3, r6
   1a1e8:	ldr	sl, [sp, #28]
   1a1ec:	ldr	r4, [sp, #24]
   1a1f0:	ldrb	r1, [r5, #1]
   1a1f4:	mov	r6, #1
   1a1f8:	b	1a2c4 <__assert_fail@plt+0x777c>
   1a1fc:	str	r0, [r4, #32]
   1a200:	ldrb	r2, [r5, #2]
   1a204:	cmp	r2, #0
   1a208:	bne	1a45c <__assert_fail@plt+0x7914>
   1a20c:	ldr	r2, [r4, #8]
   1a210:	tst	r2, #8
   1a214:	bne	1a560 <__assert_fail@plt+0x7a18>
   1a218:	orr	r2, r2, #256	; 0x100
   1a21c:	subs	r8, r8, #1
   1a220:	str	r2, [r4, #8]
   1a224:	str	r1, [r4, #36]	; 0x24
   1a228:	add	r7, r7, #4
   1a22c:	add	r9, r9, #1
   1a230:	bne	1a0fc <__assert_fail@plt+0x75b4>
   1a234:	mov	r1, fp
   1a238:	mov	r2, r3
   1a23c:	mov	r8, #0
   1a240:	str	r8, [r4, #16]
   1a244:	b	1a128 <__assert_fail@plt+0x75e0>
   1a248:	ldr	r5, [sp, #16]
   1a24c:	mov	ip, #1
   1a250:	str	r7, [sp, #20]
   1a254:	str	r7, [sp, #12]
   1a258:	add	r3, sp, #40	; 0x28
   1a25c:	ldm	r3, {r0, r1, r2, r3}
   1a260:	stm	r5, {r0, r1, r2, r3}
   1a264:	b	19ff4 <__assert_fail@plt+0x74ac>
   1a268:	mov	r9, #0
   1a26c:	b	1a0b8 <__assert_fail@plt+0x7570>
   1a270:	mvn	ip, #0
   1a274:	mov	r0, #2
   1a278:	str	r5, [r4, #24]
   1a27c:	add	r8, r8, ip
   1a280:	add	r7, r7, #4
   1a284:	add	r9, r9, #1
   1a288:	mov	r1, fp
   1a28c:	mov	r2, r3
   1a290:	str	ip, [r4, #16]
   1a294:	str	r0, [r4, #20]
   1a298:	b	1a128 <__assert_fail@plt+0x75e0>
   1a29c:	ldr	r2, [sp, #16]
   1a2a0:	ldr	r2, [r2]
   1a2a4:	str	r2, [sp, #20]
   1a2a8:	add	r2, r5, r6
   1a2ac:	str	r2, [sp, #12]
   1a2b0:	ldr	r2, [sp, #20]
   1a2b4:	cmp	r2, #0
   1a2b8:	ldr	r2, [sp, #12]
   1a2bc:	ldrb	r1, [r2]
   1a2c0:	beq	1a780 <__assert_fail@plt+0x7c38>
   1a2c4:	ldr	r2, [sp, #20]
   1a2c8:	mov	ip, r1
   1a2cc:	cmp	r1, r2
   1a2d0:	beq	1a788 <__assert_fail@plt+0x7c40>
   1a2d4:	ldr	r2, [sp, #16]
   1a2d8:	add	r2, r2, #16
   1a2dc:	b	1a2ec <__assert_fail@plt+0x77a4>
   1a2e0:	cmp	lr, r1
   1a2e4:	add	r2, r2, #16
   1a2e8:	beq	1a384 <__assert_fail@plt+0x783c>
   1a2ec:	ldr	lr, [r2]
   1a2f0:	mov	r0, r2
   1a2f4:	cmp	lr, #0
   1a2f8:	bne	1a2e0 <__assert_fail@plt+0x7798>
   1a2fc:	cmp	r1, #63	; 0x3f
   1a300:	cmpne	r1, #104	; 0x68
   1a304:	beq	1a8c8 <__assert_fail@plt+0x7d80>
   1a308:	ldr	r2, [r0, #8]
   1a30c:	ldr	r1, [sp, #12]
   1a310:	tst	r2, #128	; 0x80
   1a314:	add	r6, r6, #1
   1a318:	mvnne	r2, #6
   1a31c:	mvneq	r2, #1
   1a320:	str	r6, [r4, #32]
   1a324:	str	r1, [r4, #24]
   1a328:	str	r2, [r4, #16]
   1a32c:	ldr	r2, [sp, #12]
   1a330:	mov	r1, fp
   1a334:	ldrb	r0, [r2, #1]
   1a338:	mov	r2, r3
   1a33c:	cmp	r0, #0
   1a340:	andne	sl, sl, #1
   1a344:	moveq	sl, #1
   1a348:	cmp	sl, #0
   1a34c:	beq	1a128 <__assert_fail@plt+0x75e0>
   1a350:	mov	r3, #0
   1a354:	sub	r8, r8, #1
   1a358:	add	r7, r7, #4
   1a35c:	add	r9, r9, #1
   1a360:	str	r3, [r4, #32]
   1a364:	b	1a128 <__assert_fail@plt+0x75e0>
   1a368:	ldr	r2, [sp, #16]
   1a36c:	mov	r3, r6
   1a370:	ldr	r4, [sp, #24]
   1a374:	mov	r6, #1
   1a378:	ldr	ip, [r2, r5, lsl #4]
   1a37c:	add	r0, r2, r5, lsl #4
   1a380:	mov	sl, r6
   1a384:	cmp	ip, #0
   1a388:	beq	1a410 <__assert_fail@plt+0x78c8>
   1a38c:	ldr	r1, [r0, #8]
   1a390:	str	ip, [r4, #16]
   1a394:	ands	r2, r1, #7
   1a398:	beq	1a400 <__assert_fail@plt+0x78b8>
   1a39c:	ldr	r2, [sp, #12]
   1a3a0:	eor	sl, sl, #1
   1a3a4:	ldrb	r0, [r2, #1]
   1a3a8:	cmp	r0, #0
   1a3ac:	andne	r0, sl, #1
   1a3b0:	moveq	r0, #0
   1a3b4:	cmp	r0, #0
   1a3b8:	bne	1a764 <__assert_fail@plt+0x7c1c>
   1a3bc:	ldr	r2, [r7, #4]
   1a3c0:	cmp	r2, #0
   1a3c4:	beq	1a41c <__assert_fail@plt+0x78d4>
   1a3c8:	ldrb	ip, [r2]
   1a3cc:	cmp	ip, #45	; 0x2d
   1a3d0:	bne	1a440 <__assert_fail@plt+0x78f8>
   1a3d4:	ldrb	ip, [r2, #1]
   1a3d8:	cmp	ip, #0
   1a3dc:	beq	1a440 <__assert_fail@plt+0x78f8>
   1a3e0:	tst	r1, #8
   1a3e4:	beq	1a440 <__assert_fail@plt+0x78f8>
   1a3e8:	str	r0, [r4, #20]
   1a3ec:	mov	r1, fp
   1a3f0:	mov	r2, r3
   1a3f4:	b	1a350 <__assert_fail@plt+0x7808>
   1a3f8:	mov	r6, r2
   1a3fc:	b	1a2b0 <__assert_fail@plt+0x7768>
   1a400:	add	r6, r6, #1
   1a404:	str	r6, [r4, #32]
   1a408:	str	r2, [r4, #20]
   1a40c:	b	1a32c <__assert_fail@plt+0x77e4>
   1a410:	ldr	r2, [sp, #12]
   1a414:	ldrb	r1, [r2]
   1a418:	b	1a2fc <__assert_fail@plt+0x77b4>
   1a41c:	tst	r1, #8
   1a420:	mvneq	r0, #2
   1a424:	strne	r2, [r4, #20]
   1a428:	movne	r1, fp
   1a42c:	movne	r2, r3
   1a430:	moveq	r1, fp
   1a434:	moveq	r2, r3
   1a438:	streq	r0, [r4, #16]
   1a43c:	b	1a350 <__assert_fail@plt+0x7808>
   1a440:	mov	r0, r4
   1a444:	bl	19404 <__assert_fail@plt+0x68bc>
   1a448:	sub	r8, r8, #1
   1a44c:	add	r7, r7, #4
   1a450:	add	r9, r9, #1
   1a454:	ldm	r4, {r1, r2}
   1a458:	b	1a350 <__assert_fail@plt+0x7808>
   1a45c:	add	r6, r5, #2
   1a460:	mov	r0, r6
   1a464:	mov	r1, #61	; 0x3d
   1a468:	str	r3, [sp, #20]
   1a46c:	bl	127ac <strchr@plt>
   1a470:	subs	r3, r0, #0
   1a474:	str	r3, [sp, #12]
   1a478:	ldr	r3, [sp, #20]
   1a47c:	bne	1a584 <__assert_fail@plt+0x7a3c>
   1a480:	ldr	r2, [sp, #16]
   1a484:	ldr	r2, [r2]
   1a488:	cmp	r2, #0
   1a48c:	str	r2, [sp, #20]
   1a490:	beq	1a53c <__assert_fail@plt+0x79f4>
   1a494:	ldr	fp, [sp, #16]
   1a498:	add	r5, fp, #4
   1a49c:	ldr	r0, [r5, sl, lsl #4]
   1a4a0:	cmp	r0, #0
   1a4a4:	beq	1a4b8 <__assert_fail@plt+0x7970>
   1a4a8:	mov	r1, r6
   1a4ac:	bl	1238c <strcmp@plt>
   1a4b0:	cmp	r0, #0
   1a4b4:	beq	1a680 <__assert_fail@plt+0x7b38>
   1a4b8:	add	sl, sl, #1
   1a4bc:	ldr	r3, [fp, sl, lsl #4]
   1a4c0:	cmp	r3, #0
   1a4c4:	bne	1a49c <__assert_fail@plt+0x7954>
   1a4c8:	mov	r0, r6
   1a4cc:	mov	fp, r3
   1a4d0:	bl	12788 <strlen@plt>
   1a4d4:	str	r4, [sp, #24]
   1a4d8:	ldr	r5, [sp, #16]
   1a4dc:	ldr	r4, [sp, #20]
   1a4e0:	mov	sl, r0
   1a4e4:	str	r0, [sp, #28]
   1a4e8:	ldr	r0, [r5, #4]
   1a4ec:	cmp	r0, #0
   1a4f0:	beq	1a508 <__assert_fail@plt+0x79c0>
   1a4f4:	mov	r2, sl
   1a4f8:	mov	r1, r6
   1a4fc:	bl	12ac4 <strncmp@plt>
   1a500:	cmp	r0, #0
   1a504:	beq	1a5c4 <__assert_fail@plt+0x7a7c>
   1a508:	ldr	r4, [r5, #16]!
   1a50c:	add	fp, fp, #1
   1a510:	cmp	r4, #0
   1a514:	bne	1a4e8 <__assert_fail@plt+0x79a0>
   1a518:	ldr	r3, [sp, #12]
   1a51c:	ldr	r4, [sp, #24]
   1a520:	cmp	r3, #0
   1a524:	beq	1a534 <__assert_fail@plt+0x79ec>
   1a528:	ldr	r2, [sp, #12]
   1a52c:	mov	r3, #61	; 0x3d
   1a530:	strb	r3, [r2]
   1a534:	ldr	fp, [r4]
   1a538:	ldr	r3, [r4, #4]
   1a53c:	mvn	r2, #1
   1a540:	str	r6, [r4, #24]
   1a544:	str	r2, [r4, #16]
   1a548:	sub	r8, r8, #1
   1a54c:	add	r7, r7, #4
   1a550:	add	r9, r9, #1
   1a554:	mov	r1, fp
   1a558:	mov	r2, r3
   1a55c:	b	1a128 <__assert_fail@plt+0x75e0>
   1a560:	add	r6, r5, #2
   1a564:	mov	r0, r6
   1a568:	mov	r1, #61	; 0x3d
   1a56c:	str	r3, [sp, #20]
   1a570:	bl	127ac <strchr@plt>
   1a574:	subs	r3, r0, #0
   1a578:	str	r3, [sp, #12]
   1a57c:	ldr	r3, [sp, #20]
   1a580:	beq	1a53c <__assert_fail@plt+0x79f4>
   1a584:	ldr	r2, [sp, #12]
   1a588:	mov	r3, #0
   1a58c:	strb	r3, [r2]
   1a590:	ldrb	r3, [r5, #2]
   1a594:	cmp	r3, #0
   1a598:	moveq	r3, #61	; 0x3d
   1a59c:	strbeq	r3, [r2]
   1a5a0:	ldreq	fp, [r4]
   1a5a4:	ldreq	r3, [r4, #4]
   1a5a8:	beq	1a53c <__assert_fail@plt+0x79f4>
   1a5ac:	ldr	r3, [sp, #16]
   1a5b0:	ldr	r3, [r3]
   1a5b4:	cmp	r3, #0
   1a5b8:	str	r3, [sp, #20]
   1a5bc:	bne	1a494 <__assert_fail@plt+0x794c>
   1a5c0:	b	1a528 <__assert_fail@plt+0x79e0>
   1a5c4:	ldr	r2, [sp, #16]
   1a5c8:	add	r3, fp, #1
   1a5cc:	mov	r0, r4
   1a5d0:	ldr	r1, [r2, r3, lsl #4]
   1a5d4:	lsl	r3, r3, #4
   1a5d8:	cmp	r1, #0
   1a5dc:	ldr	r4, [sp, #24]
   1a5e0:	add	sl, r2, r3
   1a5e4:	beq	1a8c0 <__assert_fail@plt+0x7d78>
   1a5e8:	sub	r3, r3, #16
   1a5ec:	add	r3, r2, r3
   1a5f0:	sub	r2, r3, sl
   1a5f4:	add	r2, r2, #32
   1a5f8:	str	r7, [sp, #20]
   1a5fc:	str	r8, [sp, #24]
   1a600:	str	r9, [sp, #32]
   1a604:	str	fp, [sp, #36]	; 0x24
   1a608:	ldr	r9, [sp, #28]
   1a60c:	mov	r7, r3
   1a610:	str	r4, [sp, #28]
   1a614:	mov	fp, r0
   1a618:	mov	r4, r1
   1a61c:	mov	r8, r2
   1a620:	ldr	r0, [sl, #4]
   1a624:	cmp	r0, #0
   1a628:	beq	1a658 <__assert_fail@plt+0x7b10>
   1a62c:	mov	r2, r9
   1a630:	mov	r1, r6
   1a634:	bl	12ac4 <strncmp@plt>
   1a638:	cmp	r0, #0
   1a63c:	bne	1a658 <__assert_fail@plt+0x7b10>
   1a640:	cmp	r4, fp
   1a644:	bne	1a838 <__assert_fail@plt+0x7cf0>
   1a648:	ldr	r2, [sl, #8]
   1a64c:	ldr	r3, [r5, #8]
   1a650:	cmp	r2, r3
   1a654:	bne	1a838 <__assert_fail@plt+0x7cf0>
   1a658:	add	r7, r7, #16
   1a65c:	ldr	r4, [r7, #16]
   1a660:	add	sl, sl, r8
   1a664:	cmp	r4, #0
   1a668:	bne	1a620 <__assert_fail@plt+0x7ad8>
   1a66c:	add	r4, sp, #28
   1a670:	ldr	r7, [sp, #20]
   1a674:	ldm	r4, {r4, r9, fp}
   1a678:	ldr	r8, [sp, #24]
   1a67c:	mov	sl, fp
   1a680:	ldr	r2, [sp, #12]
   1a684:	cmp	r2, #0
   1a688:	movne	r3, #61	; 0x3d
   1a68c:	strbne	r3, [r2]
   1a690:	cmp	sl, #0
   1a694:	beq	1a6cc <__assert_fail@plt+0x7b84>
   1a698:	ldr	r3, [sp, #16]
   1a69c:	ldr	r3, [r3, sl, lsl #4]
   1a6a0:	cmp	r3, #32768	; 0x8000
   1a6a4:	beq	1a8c8 <__assert_fail@plt+0x7d80>
   1a6a8:	ldr	r2, [pc, #568]	; 1a8e8 <__assert_fail@plt+0x7da0>
   1a6ac:	cmp	r3, r2
   1a6b0:	beq	1a720 <__assert_fail@plt+0x7bd8>
   1a6b4:	ldr	r2, [pc, #560]	; 1a8ec <__assert_fail@plt+0x7da4>
   1a6b8:	cmp	r3, r2
   1a6bc:	beq	1a814 <__assert_fail@plt+0x7ccc>
   1a6c0:	ldr	r2, [pc, #552]	; 1a8f0 <__assert_fail@plt+0x7da8>
   1a6c4:	cmp	r3, r2
   1a6c8:	beq	1a794 <__assert_fail@plt+0x7c4c>
   1a6cc:	ldr	r3, [sp, #16]
   1a6d0:	add	r2, r3, sl, lsl #4
   1a6d4:	ldr	r3, [r3, sl, lsl #4]
   1a6d8:	ldr	r1, [r2, #8]
   1a6dc:	str	r3, [r4, #16]
   1a6e0:	tst	r1, #7
   1a6e4:	beq	1a738 <__assert_fail@plt+0x7bf0>
   1a6e8:	ldr	r3, [sp, #12]
   1a6ec:	cmp	r3, #0
   1a6f0:	beq	1a86c <__assert_fail@plt+0x7d24>
   1a6f4:	ldrb	r3, [r3, #1]
   1a6f8:	cmp	r3, #0
   1a6fc:	beq	1a7f4 <__assert_fail@plt+0x7cac>
   1a700:	ldr	r3, [sp, #12]
   1a704:	adds	r2, r3, #1
   1a708:	beq	1a7f4 <__assert_fail@plt+0x7cac>
   1a70c:	mov	r0, r4
   1a710:	bl	19404 <__assert_fail@plt+0x68bc>
   1a714:	ldr	fp, [r4]
   1a718:	ldr	r3, [r4, #4]
   1a71c:	b	1a548 <__assert_fail@plt+0x7a00>
   1a720:	ldr	r3, [r4, #8]
   1a724:	ands	r5, r3, #64	; 0x40
   1a728:	bne	1a6cc <__assert_fail@plt+0x7b84>
   1a72c:	bl	1977c <__assert_fail@plt+0x6c34>
   1a730:	mov	r0, r5
   1a734:	bl	12764 <exit@plt>
   1a738:	ldr	r3, [sp, #12]
   1a73c:	cmp	r3, #0
   1a740:	mvnne	r3, #5
   1a744:	ldreq	r2, [sp, #12]
   1a748:	strne	r3, [r4, #20]
   1a74c:	ldrne	fp, [r4]
   1a750:	ldrne	r3, [r4, #4]
   1a754:	ldreq	fp, [r4]
   1a758:	ldreq	r3, [r4, #4]
   1a75c:	streq	r2, [r4, #20]
   1a760:	b	1a548 <__assert_fail@plt+0x7a00>
   1a764:	add	r2, r2, #1
   1a768:	mov	r0, r4
   1a76c:	bl	19404 <__assert_fail@plt+0x68bc>
   1a770:	ldm	r4, {r1, r2}
   1a774:	b	1a350 <__assert_fail@plt+0x7808>
   1a778:	ldrb	r1, [r5, #1]
   1a77c:	mov	r6, r2
   1a780:	ldr	r0, [sp, #16]
   1a784:	b	1a2fc <__assert_fail@plt+0x77b4>
   1a788:	ldr	r0, [sp, #16]
   1a78c:	ldr	ip, [sp, #20]
   1a790:	b	1a38c <__assert_fail@plt+0x7844>
   1a794:	ldr	r3, [sp, #16]
   1a798:	ldr	r3, [r3]
   1a79c:	cmp	r3, #0
   1a7a0:	beq	1a7ec <__assert_fail@plt+0x7ca4>
   1a7a4:	ldr	r6, [pc, #328]	; 1a8f4 <__assert_fail@plt+0x7dac>
   1a7a8:	ldr	r5, [pc, #328]	; 1a8f8 <__assert_fail@plt+0x7db0>
   1a7ac:	ldr	r4, [sp, #16]
   1a7b0:	b	1a7c0 <__assert_fail@plt+0x7c78>
   1a7b4:	ldr	r3, [r4, #16]!
   1a7b8:	cmp	r3, #0
   1a7bc:	beq	1a7ec <__assert_fail@plt+0x7ca4>
   1a7c0:	ldr	r2, [r4, #4]
   1a7c4:	cmp	r2, #0
   1a7c8:	beq	1a7b4 <__assert_fail@plt+0x7c6c>
   1a7cc:	ldr	r3, [r4, #8]
   1a7d0:	ands	r0, r3, #64	; 0x40
   1a7d4:	bne	1a7b4 <__assert_fail@plt+0x7c6c>
   1a7d8:	str	r0, [sp]
   1a7dc:	mov	r3, r6
   1a7e0:	mov	r1, r5
   1a7e4:	bl	1952c <__assert_fail@plt+0x69e4>
   1a7e8:	b	1a7b4 <__assert_fail@plt+0x7c6c>
   1a7ec:	mov	r0, #0
   1a7f0:	bl	12764 <exit@plt>
   1a7f4:	tst	r1, #8
   1a7f8:	movne	r3, #0
   1a7fc:	mvneq	r3, #2
   1a800:	strne	r3, [r4, #20]
   1a804:	streq	r3, [r4, #16]
   1a808:	ldr	fp, [r4]
   1a80c:	ldr	r3, [r4, #4]
   1a810:	b	1a548 <__assert_fail@plt+0x7a00>
   1a814:	mov	r0, #16
   1a818:	bl	19660 <__assert_fail@plt+0x6b18>
   1a81c:	mov	r3, #0
   1a820:	ldr	r2, [pc, #204]	; 1a8f4 <__assert_fail@plt+0x7dac>
   1a824:	mov	r1, r0
   1a828:	mov	r0, r3
   1a82c:	bl	1952c <__assert_fail@plt+0x69e4>
   1a830:	mov	r0, #0
   1a834:	bl	12764 <exit@plt>
   1a838:	ldr	r2, [sp, #12]
   1a83c:	ldr	r4, [sp, #28]
   1a840:	cmp	r2, #0
   1a844:	movne	r3, #61	; 0x3d
   1a848:	strbne	r3, [r2]
   1a84c:	mvn	r3, #7
   1a850:	str	r3, [r4, #16]
   1a854:	ldr	r7, [sp, #20]
   1a858:	ldr	r8, [sp, #24]
   1a85c:	ldr	r9, [sp, #32]
   1a860:	ldr	fp, [r4]
   1a864:	ldr	r3, [r4, #4]
   1a868:	b	1a548 <__assert_fail@plt+0x7a00>
   1a86c:	ldr	r2, [r7, #4]
   1a870:	cmp	r2, #0
   1a874:	beq	1a7f4 <__assert_fail@plt+0x7cac>
   1a878:	ldrb	r3, [r2]
   1a87c:	cmp	r3, #45	; 0x2d
   1a880:	beq	1a8a4 <__assert_fail@plt+0x7d5c>
   1a884:	mov	r0, r4
   1a888:	bl	19404 <__assert_fail@plt+0x68bc>
   1a88c:	sub	r8, r8, #1
   1a890:	add	r7, r7, #4
   1a894:	add	r9, r9, #1
   1a898:	ldr	fp, [r4]
   1a89c:	ldr	r3, [r4, #4]
   1a8a0:	b	1a548 <__assert_fail@plt+0x7a00>
   1a8a4:	tst	r1, #8
   1a8a8:	beq	1a884 <__assert_fail@plt+0x7d3c>
   1a8ac:	ldr	r3, [sp, #12]
   1a8b0:	ldr	fp, [r4]
   1a8b4:	str	r3, [r4, #20]
   1a8b8:	ldr	r3, [r4, #4]
   1a8bc:	b	1a548 <__assert_fail@plt+0x7a00>
   1a8c0:	mov	sl, fp
   1a8c4:	b	1a680 <__assert_fail@plt+0x7b38>
   1a8c8:	ldr	r1, [r4, #8]
   1a8cc:	ldr	r0, [sp, #16]
   1a8d0:	bl	198d8 <__assert_fail@plt+0x6d90>
   1a8d4:	andeq	r8, r2, r4, ror #21
   1a8d8:	strheq	r9, [r2], -r8
   1a8dc:	andeq	r9, r2, r0, asr #1
   1a8e0:	andeq	r9, r2, r8, asr #1
   1a8e4:	ldrdeq	r9, [r2], -r4
   1a8e8:	andeq	r8, r0, r1
   1a8ec:	andeq	r8, r0, r2
   1a8f0:	andeq	r8, r0, r3
   1a8f4:	andeq	sl, r2, ip, lsr #4
   1a8f8:	andeq	r8, r2, r8, lsr #13
   1a8fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a900:	cmp	r0, #0
   1a904:	sub	sp, sp, #252	; 0xfc
   1a908:	stm	sp, {r0, r3}
   1a90c:	ldr	r3, [pc, #2536]	; 1b2fc <__assert_fail@plt+0x87b4>
   1a910:	ldr	r3, [r3]
   1a914:	str	r3, [sp, #244]	; 0xf4
   1a918:	ldr	r3, [sp, #288]	; 0x120
   1a91c:	str	r3, [sp, #8]
   1a920:	beq	1ad18 <__assert_fail@plt+0x81d0>
   1a924:	mov	fp, r2
   1a928:	ldr	r0, [sp, #4]
   1a92c:	bl	190fc <__assert_fail@plt+0x65b4>
   1a930:	ldr	r3, [fp]
   1a934:	cmp	r3, #0
   1a938:	beq	1ac50 <__assert_fail@plt+0x8108>
   1a93c:	mov	sl, #0
   1a940:	mov	r3, #0
   1a944:	mov	r4, r3
   1a948:	mov	r6, r3
   1a94c:	mov	r8, r3
   1a950:	str	r3, [sp, #20]
   1a954:	str	r3, [sp, #16]
   1a958:	str	r3, [sp, #12]
   1a95c:	cmp	sl, #0
   1a960:	beq	1a9cc <__assert_fail@plt+0x7e84>
   1a964:	rsb	r3, sl, #3
   1a968:	add	r2, sp, #248	; 0xf8
   1a96c:	add	r3, r2, r3, lsl #2
   1a970:	sub	sl, sl, #1
   1a974:	ldr	r9, [r3, #-216]	; 0xffffff28
   1a978:	cmn	r9, #1
   1a97c:	cmpne	r9, #10
   1a980:	bne	1a9e4 <__assert_fail@plt+0x7e9c>
   1a984:	cmn	r9, #1
   1a988:	ldrne	r3, [fp]
   1a98c:	addne	r3, r3, #1
   1a990:	strne	r3, [fp]
   1a994:	cmn	r4, #1
   1a998:	beq	1ad0c <__assert_fail@plt+0x81c4>
   1a99c:	cmp	r4, #2
   1a9a0:	beq	1aa80 <__assert_fail@plt+0x7f38>
   1a9a4:	cmp	r4, #3
   1a9a8:	beq	1ad2c <__assert_fail@plt+0x81e4>
   1a9ac:	cmp	r4, #4
   1a9b0:	beq	1ad60 <__assert_fail@plt+0x8218>
   1a9b4:	cmn	r9, #1
   1a9b8:	beq	1adf8 <__assert_fail@plt+0x82b0>
   1a9bc:	mov	r8, #0
   1a9c0:	cmp	sl, #0
   1a9c4:	mov	r4, r8
   1a9c8:	bne	1a964 <__assert_fail@plt+0x7e1c>
   1a9cc:	ldr	r0, [sp]
   1a9d0:	bl	12adc <getc@plt>
   1a9d4:	mov	r9, r0
   1a9d8:	cmn	r9, #1
   1a9dc:	cmpne	r9, #10
   1a9e0:	beq	1a984 <__assert_fail@plt+0x7e3c>
   1a9e4:	cmn	r4, #1
   1a9e8:	beq	1a95c <__assert_fail@plt+0x7e14>
   1a9ec:	cmp	r4, #0
   1a9f0:	beq	1aa24 <__assert_fail@plt+0x7edc>
   1a9f4:	cmp	r4, #1
   1a9f8:	beq	1a95c <__assert_fail@plt+0x7e14>
   1a9fc:	cmp	r4, #2
   1aa00:	beq	1ab00 <__assert_fail@plt+0x7fb8>
   1aa04:	cmp	r4, #3
   1aa08:	bne	1ac1c <__assert_fail@plt+0x80d4>
   1aa0c:	bics	r3, r9, #127	; 0x7f
   1aa10:	beq	1abf8 <__assert_fail@plt+0x80b0>
   1aa14:	strb	r9, [sp, #44]	; 0x2c
   1aa18:	mov	r8, #1
   1aa1c:	mov	r4, #4
   1aa20:	b	1a95c <__assert_fail@plt+0x7e14>
   1aa24:	bics	r4, r9, #127	; 0x7f
   1aa28:	beq	1aa58 <__assert_fail@plt+0x7f10>
   1aa2c:	cmp	r8, #98	; 0x62
   1aa30:	addle	r3, sp, #248	; 0xf8
   1aa34:	ldrgt	r2, [sp, #4]
   1aa38:	addle	r3, r3, r8
   1aa3c:	mvngt	r3, #3
   1aa40:	strgt	r3, [r2, #16]
   1aa44:	mvngt	r4, #0
   1aa48:	strble	r9, [r3, #-204]	; 0xffffff34
   1aa4c:	addle	r8, r8, #1
   1aa50:	movle	r4, #2
   1aa54:	b	1a95c <__assert_fail@plt+0x7e14>
   1aa58:	bl	12734 <__ctype_b_loc@plt>
   1aa5c:	lsl	r3, r9, #1
   1aa60:	ldr	r2, [r0]
   1aa64:	ldrh	r3, [r2, r3]
   1aa68:	tst	r3, #8192	; 0x2000
   1aa6c:	bne	1a95c <__assert_fail@plt+0x7e14>
   1aa70:	cmp	r9, #35	; 0x23
   1aa74:	bne	1aa2c <__assert_fail@plt+0x7ee4>
   1aa78:	mov	r4, #1
   1aa7c:	b	1a95c <__assert_fail@plt+0x7e14>
   1aa80:	ldr	r5, [sp, #8]
   1aa84:	add	r3, sp, #248	; 0xf8
   1aa88:	mov	r6, #0
   1aa8c:	ldr	r4, [r5]
   1aa90:	add	r8, r3, r8
   1aa94:	cmp	r4, r6
   1aa98:	strb	r6, [r8, #-204]	; 0xffffff34
   1aa9c:	beq	1ae74 <__assert_fail@plt+0x832c>
   1aaa0:	ldr	r0, [r5, #4]
   1aaa4:	cmp	r0, #0
   1aaa8:	beq	1aabc <__assert_fail@plt+0x7f74>
   1aaac:	add	r1, sp, #44	; 0x2c
   1aab0:	bl	1238c <strcmp@plt>
   1aab4:	cmp	r0, #0
   1aab8:	beq	1ab8c <__assert_fail@plt+0x8044>
   1aabc:	ldr	r4, [r5, #16]!
   1aac0:	add	r6, r6, #1
   1aac4:	cmp	r4, #0
   1aac8:	bne	1aaa0 <__assert_fail@plt+0x7f58>
   1aacc:	ldr	r5, [r5, #8]
   1aad0:	ldr	r3, [sp, #4]
   1aad4:	tst	r5, #64	; 0x40
   1aad8:	str	r4, [r3, #16]
   1aadc:	bne	1aaf8 <__assert_fail@plt+0x7fb0>
   1aae0:	add	r8, sp, #44	; 0x2c
   1aae4:	mov	r0, r8
   1aae8:	ldr	r1, [pc, #2064]	; 1b300 <__assert_fail@plt+0x87b8>
   1aaec:	bl	1238c <strcmp@plt>
   1aaf0:	subs	r4, r0, #0
   1aaf4:	bne	1abb8 <__assert_fail@plt+0x8070>
   1aaf8:	mov	r8, r4
   1aafc:	b	1a95c <__assert_fail@plt+0x7e14>
   1ab00:	bics	r5, r9, #127	; 0x7f
   1ab04:	bne	1aa2c <__assert_fail@plt+0x7ee4>
   1ab08:	bl	12734 <__ctype_b_loc@plt>
   1ab0c:	lsl	r3, r9, #1
   1ab10:	ldr	r2, [r0]
   1ab14:	mov	r7, r0
   1ab18:	ldrh	r3, [r2, r3]
   1ab1c:	tst	r3, #8192	; 0x2000
   1ab20:	beq	1aa2c <__assert_fail@plt+0x7ee4>
   1ab24:	ldr	r4, [sp, #8]
   1ab28:	add	r3, sp, #248	; 0xf8
   1ab2c:	add	r3, r3, r8
   1ab30:	ldr	r8, [r4]
   1ab34:	strb	r5, [r3, #-204]	; 0xffffff34
   1ab38:	cmp	r8, #0
   1ab3c:	beq	1af80 <__assert_fail@plt+0x8438>
   1ab40:	ldr	r0, [r4, #4]
   1ab44:	cmp	r0, #0
   1ab48:	beq	1ab5c <__assert_fail@plt+0x8014>
   1ab4c:	add	r1, sp, #44	; 0x2c
   1ab50:	bl	1238c <strcmp@plt>
   1ab54:	cmp	r0, #0
   1ab58:	beq	1af54 <__assert_fail@plt+0x840c>
   1ab5c:	ldr	r8, [r4, #16]!
   1ab60:	add	r5, r5, #1
   1ab64:	cmp	r8, #0
   1ab68:	bne	1ab40 <__assert_fail@plt+0x7ff8>
   1ab6c:	ldr	r6, [r4, #8]
   1ab70:	ldr	r3, [sp, #4]
   1ab74:	tst	r6, #64	; 0x40
   1ab78:	str	r8, [r3, #16]
   1ab7c:	beq	1af98 <__assert_fail@plt+0x8450>
   1ab80:	mov	r6, r5
   1ab84:	mov	r8, r5
   1ab88:	b	1aa78 <__assert_fail@plt+0x7f30>
   1ab8c:	ldr	r2, [r5, #8]
   1ab90:	ldr	r3, [sp, #4]
   1ab94:	ands	r1, r2, #64	; 0x40
   1ab98:	mov	r8, r0
   1ab9c:	str	r4, [r3, #16]
   1aba0:	bne	1a9c0 <__assert_fail@plt+0x7e78>
   1aba4:	ands	r3, r2, #7
   1aba8:	bne	1b1c0 <__assert_fail@plt+0x8678>
   1abac:	ldr	r2, [sp, #4]
   1abb0:	str	r3, [r2, #20]
   1abb4:	b	1acec <__assert_fail@plt+0x81a4>
   1abb8:	ldr	r3, [sp, #4]
   1abbc:	ldr	r7, [r3, #52]	; 0x34
   1abc0:	cmp	r7, #0
   1abc4:	bne	1abd8 <__assert_fail@plt+0x8090>
   1abc8:	b	1acd8 <__assert_fail@plt+0x8190>
   1abcc:	ldr	r7, [r7]
   1abd0:	cmp	r7, #0
   1abd4:	beq	1acd8 <__assert_fail@plt+0x8190>
   1abd8:	mov	r1, r8
   1abdc:	add	r0, r7, #4
   1abe0:	bl	1238c <strcmp@plt>
   1abe4:	cmp	r0, #0
   1abe8:	bne	1abcc <__assert_fail@plt+0x8084>
   1abec:	mov	r4, r0
   1abf0:	mov	r8, r4
   1abf4:	b	1a95c <__assert_fail@plt+0x7e14>
   1abf8:	bl	12734 <__ctype_b_loc@plt>
   1abfc:	lsl	r3, r9, #1
   1ac00:	ldr	r2, [r0]
   1ac04:	ldrh	r3, [r2, r3]
   1ac08:	tst	r3, #8192	; 0x2000
   1ac0c:	strbeq	r9, [sp, #44]	; 0x2c
   1ac10:	moveq	r8, #1
   1ac14:	moveq	r4, #4
   1ac18:	b	1a95c <__assert_fail@plt+0x7e14>
   1ac1c:	cmp	r4, #4
   1ac20:	bne	1aa2c <__assert_fail@plt+0x7ee4>
   1ac24:	ldr	r2, [sp, #12]
   1ac28:	mov	r5, r8
   1ac2c:	cmp	r2, #0
   1ac30:	beq	1ae40 <__assert_fail@plt+0x82f8>
   1ac34:	ldr	r3, [sp, #16]
   1ac38:	sub	r3, r3, #1
   1ac3c:	cmp	r3, r8
   1ac40:	bls	1aca8 <__assert_fail@plt+0x8160>
   1ac44:	add	r8, r8, #1
   1ac48:	strb	r9, [r2, r5]
   1ac4c:	b	1a95c <__assert_fail@plt+0x7e14>
   1ac50:	ldr	r6, [sp]
   1ac54:	mov	r0, r6
   1ac58:	bl	12adc <getc@plt>
   1ac5c:	mov	r4, r0
   1ac60:	mov	r0, r6
   1ac64:	str	r4, [sp, #32]
   1ac68:	bl	12adc <getc@plt>
   1ac6c:	mov	r5, r0
   1ac70:	mov	r0, r6
   1ac74:	str	r5, [sp, #36]	; 0x24
   1ac78:	bl	12adc <getc@plt>
   1ac7c:	cmp	r5, #187	; 0xbb
   1ac80:	cmpeq	r4, #239	; 0xef
   1ac84:	movne	r4, #1
   1ac88:	moveq	r4, #0
   1ac8c:	cmp	r0, #191	; 0xbf
   1ac90:	orrne	r4, r4, #1
   1ac94:	cmp	r4, #0
   1ac98:	str	r0, [sp, #40]	; 0x28
   1ac9c:	movne	sl, #3
   1aca0:	bne	1a940 <__assert_fail@plt+0x7df8>
   1aca4:	b	1a93c <__assert_fail@plt+0x7df4>
   1aca8:	ldr	r3, [sp, #16]
   1acac:	ldr	r0, [sp, #12]
   1acb0:	add	r3, r3, #50	; 0x32
   1acb4:	mov	r1, r3
   1acb8:	str	r3, [sp, #16]
   1acbc:	bl	128fc <gcry_realloc@plt>
   1acc0:	cmp	r0, #0
   1acc4:	beq	1b288 <__assert_fail@plt+0x8740>
   1acc8:	add	r8, r8, #1
   1accc:	strb	r9, [r0, r5]
   1acd0:	str	r0, [sp, #12]
   1acd4:	b	1a95c <__assert_fail@plt+0x7e14>
   1acd8:	ldr	r3, [sp, #4]
   1acdc:	tst	r5, #128	; 0x80
   1ace0:	mvnne	r4, #6
   1ace4:	mvneq	r4, #1
   1ace8:	str	r4, [r3, #16]
   1acec:	ldr	r3, [pc, #1544]	; 1b2fc <__assert_fail@plt+0x87b4>
   1acf0:	ldr	r2, [sp, #244]	; 0xf4
   1acf4:	mov	r0, r4
   1acf8:	ldr	r3, [r3]
   1acfc:	cmp	r2, r3
   1ad00:	bne	1b2c8 <__assert_fail@plt+0x8780>
   1ad04:	add	sp, sp, #252	; 0xfc
   1ad08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad0c:	ldr	r3, [sp, #4]
   1ad10:	ldr	r4, [r3, #16]
   1ad14:	b	1acec <__assert_fail@plt+0x81a4>
   1ad18:	mov	r1, r3
   1ad1c:	ldr	r0, [sp, #4]
   1ad20:	bl	19ee0 <__assert_fail@plt+0x7398>
   1ad24:	mov	r4, r0
   1ad28:	b	1acec <__assert_fail@plt+0x81a4>
   1ad2c:	ldr	r3, [sp, #20]
   1ad30:	cmp	r3, #0
   1ad34:	bne	1ae64 <__assert_fail@plt+0x831c>
   1ad38:	ldr	r3, [sp, #8]
   1ad3c:	add	r6, r3, r6, lsl #4
   1ad40:	ldr	r3, [r6, #8]
   1ad44:	tst	r3, #7
   1ad48:	bne	1ae5c <__assert_fail@plt+0x8314>
   1ad4c:	ldr	r2, [sp, #4]
   1ad50:	mov	r3, #0
   1ad54:	str	r3, [r2, #20]
   1ad58:	ldr	r4, [r2, #16]
   1ad5c:	b	1acec <__assert_fail@plt+0x81a4>
   1ad60:	ldr	r3, [sp, #20]
   1ad64:	cmp	r3, #0
   1ad68:	beq	1add4 <__assert_fail@plt+0x828c>
   1ad6c:	ldr	r3, [sp, #12]
   1ad70:	cmp	r3, #0
   1ad74:	beq	1ade8 <__assert_fail@plt+0x82a0>
   1ad78:	ldr	r3, [sp, #12]
   1ad7c:	mov	r6, #0
   1ad80:	ldr	r1, [pc, #1404]	; 1b304 <__assert_fail@plt+0x87bc>
   1ad84:	strb	r6, [r3, r8]
   1ad88:	mov	r0, r3
   1ad8c:	bl	12a34 <strpbrk@plt>
   1ad90:	subs	r5, r0, #0
   1ad94:	beq	1adbc <__assert_fail@plt+0x8274>
   1ad98:	mov	r4, r5
   1ad9c:	strb	r6, [r4], #1
   1ada0:	mov	r0, r4
   1ada4:	bl	16fd4 <__assert_fail@plt+0x448c>
   1ada8:	cmp	r4, r6
   1adac:	beq	1adbc <__assert_fail@plt+0x8274>
   1adb0:	ldrb	r3, [r5, #1]
   1adb4:	cmp	r3, r6
   1adb8:	bne	1ad0c <__assert_fail@plt+0x81c4>
   1adbc:	ldr	r0, [sp, #12]
   1adc0:	bl	124a0 <gcry_free@plt>
   1adc4:	ldr	r3, [sp, #4]
   1adc8:	mvn	r4, #9
   1adcc:	str	r4, [r3, #16]
   1add0:	b	1acec <__assert_fail@plt+0x81a4>
   1add4:	ldr	r3, [sp, #8]
   1add8:	add	r6, r3, r6, lsl #4
   1addc:	ldr	r3, [r6, #8]
   1ade0:	tst	r3, #7
   1ade4:	bne	1aec8 <__assert_fail@plt+0x8380>
   1ade8:	ldr	r3, [sp, #4]
   1adec:	mvn	r4, #5
   1adf0:	str	r4, [r3, #16]
   1adf4:	b	1acec <__assert_fail@plt+0x81a4>
   1adf8:	ldr	r3, [sp, #4]
   1adfc:	ldr	r0, [r3, #52]	; 0x34
   1ae00:	cmp	r0, #0
   1ae04:	beq	1ae18 <__assert_fail@plt+0x82d0>
   1ae08:	ldr	r4, [r0]
   1ae0c:	bl	124a0 <gcry_free@plt>
   1ae10:	subs	r0, r4, #0
   1ae14:	bne	1ae08 <__assert_fail@plt+0x82c0>
   1ae18:	ldm	sp, {r0, r2}
   1ae1c:	mov	r3, #0
   1ae20:	str	r3, [r2, #52]	; 0x34
   1ae24:	bl	12458 <ferror@plt>
   1ae28:	subs	r4, r0, #0
   1ae2c:	beq	1aebc <__assert_fail@plt+0x8374>
   1ae30:	ldr	r3, [sp, #4]
   1ae34:	mvn	r4, #4
   1ae38:	str	r4, [r3, #16]
   1ae3c:	b	1acec <__assert_fail@plt+0x81a4>
   1ae40:	cmp	r8, #98	; 0x62
   1ae44:	bgt	1af1c <__assert_fail@plt+0x83d4>
   1ae48:	add	r3, sp, #248	; 0xf8
   1ae4c:	add	r3, r3, r8
   1ae50:	add	r8, r8, #1
   1ae54:	strb	r9, [r3, #-204]	; 0xffffff34
   1ae58:	b	1a95c <__assert_fail@plt+0x7e14>
   1ae5c:	tst	r3, #8
   1ae60:	bne	1ad4c <__assert_fail@plt+0x8204>
   1ae64:	ldr	r3, [sp, #4]
   1ae68:	mvn	r4, #2
   1ae6c:	str	r4, [r3, #16]
   1ae70:	b	1acec <__assert_fail@plt+0x81a4>
   1ae74:	ldr	r3, [sp, #8]
   1ae78:	mov	r6, r4
   1ae7c:	ldr	r5, [r3, #8]
   1ae80:	ldr	r3, [sp, #4]
   1ae84:	tst	r5, #64	; 0x40
   1ae88:	str	r4, [r3, #16]
   1ae8c:	beq	1aae0 <__assert_fail@plt+0x7f98>
   1ae90:	b	1aaf8 <__assert_fail@plt+0x7fb0>
   1ae94:	add	r3, sp, #248	; 0xf8
   1ae98:	add	r8, r3, r8
   1ae9c:	ldr	r3, [sp, #12]
   1aea0:	add	r0, sp, #44	; 0x2c
   1aea4:	strb	r3, [r8, #-204]	; 0xffffff34
   1aea8:	bl	12b0c <gcry_strdup@plt>
   1aeac:	subs	r3, r0, #0
   1aeb0:	str	r3, [sp, #12]
   1aeb4:	bne	1aee0 <__assert_fail@plt+0x8398>
   1aeb8:	mvn	r4, #10
   1aebc:	ldr	r3, [sp, #4]
   1aec0:	str	r4, [r3, #16]
   1aec4:	b	1acec <__assert_fail@plt+0x81a4>
   1aec8:	ldr	r3, [sp, #12]
   1aecc:	cmp	r3, #0
   1aed0:	beq	1ae94 <__assert_fail@plt+0x834c>
   1aed4:	ldr	r3, [sp, #12]
   1aed8:	ldr	r2, [sp, #20]
   1aedc:	strb	r2, [r3, r8]
   1aee0:	ldr	r4, [sp, #12]
   1aee4:	mov	r0, r4
   1aee8:	bl	16fd4 <__assert_fail@plt+0x448c>
   1aeec:	ldrb	r3, [r4]
   1aef0:	cmp	r3, #34	; 0x22
   1aef4:	beq	1b1e8 <__assert_fail@plt+0x86a0>
   1aef8:	mov	r2, r4
   1aefc:	ldr	r4, [sp, #4]
   1af00:	ldr	r1, [r6, #8]
   1af04:	mov	r0, r4
   1af08:	bl	19404 <__assert_fail@plt+0x68bc>
   1af0c:	cmp	r0, #0
   1af10:	beq	1b1d4 <__assert_fail@plt+0x868c>
   1af14:	ldr	r4, [r4, #16]
   1af18:	b	1acec <__assert_fail@plt+0x81a4>
   1af1c:	mov	r0, #150	; 0x96
   1af20:	bl	12338 <gcry_malloc@plt>
   1af24:	subs	r7, r0, #0
   1af28:	str	r7, [sp, #12]
   1af2c:	beq	1aeb8 <__assert_fail@plt+0x8370>
   1af30:	mov	r2, r8
   1af34:	add	r1, sp, #44	; 0x2c
   1af38:	mov	r0, r7
   1af3c:	bl	1247c <memcpy@plt>
   1af40:	mov	r3, #150	; 0x96
   1af44:	add	r8, r8, #1
   1af48:	str	r3, [sp, #16]
   1af4c:	strb	r9, [r7, r5]
   1af50:	b	1a95c <__assert_fail@plt+0x7e14>
   1af54:	ldr	r3, [r4, #8]
   1af58:	ldr	r2, [sp, #4]
   1af5c:	tst	r3, #64	; 0x40
   1af60:	moveq	r6, r5
   1af64:	str	r8, [r2, #16]
   1af68:	moveq	r4, #3
   1af6c:	mov	r8, r5
   1af70:	beq	1a95c <__assert_fail@plt+0x7e14>
   1af74:	mov	r6, r8
   1af78:	mov	r4, #1
   1af7c:	b	1a95c <__assert_fail@plt+0x7e14>
   1af80:	ldr	r3, [sp, #8]
   1af84:	ldr	r6, [r3, #8]
   1af88:	ldr	r3, [sp, #4]
   1af8c:	tst	r6, #64	; 0x40
   1af90:	str	r8, [r3, #16]
   1af94:	bne	1af74 <__assert_fail@plt+0x842c>
   1af98:	add	r8, sp, #44	; 0x2c
   1af9c:	mov	r0, r8
   1afa0:	ldr	r1, [pc, #864]	; 1b308 <__assert_fail@plt+0x87c0>
   1afa4:	bl	1238c <strcmp@plt>
   1afa8:	cmp	r0, #0
   1afac:	beq	1b1a8 <__assert_fail@plt+0x8660>
   1afb0:	ldr	r1, [pc, #840]	; 1b300 <__assert_fail@plt+0x87b8>
   1afb4:	mov	r0, r8
   1afb8:	bl	1238c <strcmp@plt>
   1afbc:	subs	r4, r0, #0
   1afc0:	bne	1b234 <__assert_fail@plt+0x86ec>
   1afc4:	ldr	r0, [sp]
   1afc8:	bl	12adc <getc@plt>
   1afcc:	ldr	r8, [r7]
   1afd0:	str	r4, [sp, #28]
   1afd4:	cmn	r0, #1
   1afd8:	cmpne	r0, #10
   1afdc:	moveq	r3, #1
   1afe0:	movne	r3, #0
   1afe4:	cmp	r3, #0
   1afe8:	mov	r6, r0
   1afec:	movne	r6, #10
   1aff0:	movne	r3, #1
   1aff4:	moveq	r3, #0
   1aff8:	str	r3, [sp, #24]
   1affc:	lsl	r3, r6, #1
   1b000:	bics	r2, r6, #127	; 0x7f
   1b004:	ldrh	r3, [r8, r3]
   1b008:	and	r3, r3, #8192	; 0x2000
   1b00c:	bne	1b184 <__assert_fail@plt+0x863c>
   1b010:	cmp	r3, #0
   1b014:	bne	1b0c8 <__assert_fail@plt+0x8580>
   1b018:	mov	r3, #1
   1b01c:	ldr	r4, [sp, #24]
   1b020:	mov	r8, r3
   1b024:	mov	r0, r6
   1b028:	add	r3, sp, #248	; 0xf8
   1b02c:	add	r2, r3, r2
   1b030:	cmp	r4, #0
   1b034:	strb	r0, [r2, #-104]	; 0xffffff98
   1b038:	bne	1b2e0 <__assert_fail@plt+0x8798>
   1b03c:	ldr	r0, [sp]
   1b040:	bl	12adc <getc@plt>
   1b044:	cmn	r0, #1
   1b048:	cmpne	r0, #10
   1b04c:	bne	1b2d8 <__assert_fail@plt+0x8790>
   1b050:	mov	r3, #20
   1b054:	mov	r4, #1
   1b058:	mov	r0, #10
   1b05c:	ldr	r2, [r7]
   1b060:	ldrh	r3, [r2, r3]
   1b064:	tst	r3, #8192	; 0x2000
   1b068:	bne	1b0fc <__assert_fail@plt+0x85b4>
   1b06c:	cmp	r8, #98	; 0x62
   1b070:	ble	1b2cc <__assert_fail@plt+0x8784>
   1b074:	cmp	r4, #0
   1b078:	mov	r9, r4
   1b07c:	bne	1b2e0 <__assert_fail@plt+0x8798>
   1b080:	ldr	r0, [sp]
   1b084:	bl	12adc <getc@plt>
   1b088:	cmn	r0, #1
   1b08c:	cmpne	r0, #10
   1b090:	mov	r6, r0
   1b094:	bne	1b220 <__assert_fail@plt+0x86d8>
   1b098:	mov	r6, #10
   1b09c:	mov	r3, #20
   1b0a0:	mov	r0, r6
   1b0a4:	mov	r2, #1
   1b0a8:	str	r2, [sp, #24]
   1b0ac:	ldr	r8, [r7]
   1b0b0:	ldrh	r3, [r8, r3]
   1b0b4:	tst	r3, #8192	; 0x2000
   1b0b8:	beq	1b294 <__assert_fail@plt+0x874c>
   1b0bc:	bics	r3, r0, #127	; 0x7f
   1b0c0:	mov	r6, r0
   1b0c4:	bne	1b110 <__assert_fail@plt+0x85c8>
   1b0c8:	ldr	r3, [sp, #24]
   1b0cc:	cmp	r3, #0
   1b0d0:	bne	1b2e0 <__assert_fail@plt+0x8798>
   1b0d4:	ldr	r0, [sp]
   1b0d8:	bl	12adc <getc@plt>
   1b0dc:	ldr	r8, [r7]
   1b0e0:	cmn	r0, #1
   1b0e4:	cmpne	r0, #10
   1b0e8:	moveq	r3, #1
   1b0ec:	mov	r6, r0
   1b0f0:	streq	r3, [sp, #24]
   1b0f4:	moveq	r6, #10
   1b0f8:	b	1affc <__assert_fail@plt+0x84b4>
   1b0fc:	mov	r3, r8
   1b100:	mov	r6, r0
   1b104:	mov	r8, r2
   1b108:	mov	r9, r3
   1b10c:	str	r4, [sp, #24]
   1b110:	ldr	r3, [sp, #4]
   1b114:	ldr	r4, [r3, #52]	; 0x34
   1b118:	add	r3, sp, #248	; 0xf8
   1b11c:	add	r2, r3, r9
   1b120:	cmp	r4, #0
   1b124:	mov	r3, #0
   1b128:	strb	r3, [r2, #-104]	; 0xffffff98
   1b12c:	beq	1b150 <__assert_fail@plt+0x8608>
   1b130:	add	r1, sp, #144	; 0x90
   1b134:	add	r0, r4, #4
   1b138:	bl	1238c <strcmp@plt>
   1b13c:	cmp	r0, #0
   1b140:	beq	1affc <__assert_fail@plt+0x84b4>
   1b144:	ldr	r4, [r4]
   1b148:	cmp	r4, #0
   1b14c:	bne	1b130 <__assert_fail@plt+0x85e8>
   1b150:	add	r0, r9, #8
   1b154:	bl	12338 <gcry_malloc@plt>
   1b158:	subs	r8, r0, #0
   1b15c:	beq	1aeb8 <__assert_fail@plt+0x8370>
   1b160:	add	r0, r8, #4
   1b164:	add	r1, sp, #144	; 0x90
   1b168:	bl	12620 <strcpy@plt>
   1b16c:	ldr	r2, [sp, #4]
   1b170:	ldr	r3, [r2, #52]	; 0x34
   1b174:	str	r8, [r2, #52]	; 0x34
   1b178:	str	r3, [r8]
   1b17c:	ldr	r8, [r7]
   1b180:	b	1affc <__assert_fail@plt+0x84b4>
   1b184:	cmp	r3, #0
   1b188:	movne	r9, #0
   1b18c:	bne	1b110 <__assert_fail@plt+0x85c8>
   1b190:	mov	r2, r3
   1b194:	mov	r3, #1
   1b198:	ldr	r4, [sp, #24]
   1b19c:	mov	r8, r3
   1b1a0:	mov	r0, r6
   1b1a4:	b	1b028 <__assert_fail@plt+0x84e0>
   1b1a8:	mov	r3, #1
   1b1ac:	mov	r6, r5
   1b1b0:	mov	r8, r5
   1b1b4:	str	r3, [sp, #20]
   1b1b8:	mov	r4, #3
   1b1bc:	b	1a95c <__assert_fail@plt+0x7e14>
   1b1c0:	tst	r2, #8
   1b1c4:	beq	1ae64 <__assert_fail@plt+0x831c>
   1b1c8:	ldr	r3, [sp, #4]
   1b1cc:	str	r1, [r3, #20]
   1b1d0:	b	1acec <__assert_fail@plt+0x81a4>
   1b1d4:	ldr	r0, [sp, #12]
   1b1d8:	bl	124a0 <gcry_free@plt>
   1b1dc:	ldr	r3, [sp, #4]
   1b1e0:	ldr	r4, [r3, #16]
   1b1e4:	b	1acec <__assert_fail@plt+0x81a4>
   1b1e8:	ldr	r5, [sp, #12]
   1b1ec:	add	r4, r5, #1
   1b1f0:	ldrb	r3, [r5, #1]
   1b1f4:	cmp	r3, #0
   1b1f8:	beq	1aef8 <__assert_fail@plt+0x83b0>
   1b1fc:	mov	r0, r4
   1b200:	bl	12788 <strlen@plt>
   1b204:	ldrb	r3, [r5, r0]
   1b208:	cmp	r3, #34	; 0x22
   1b20c:	moveq	r3, #0
   1b210:	ldreq	r2, [sp, #12]
   1b214:	strbeq	r3, [r2, r0]
   1b218:	b	1aef8 <__assert_fail@plt+0x83b0>
   1b21c:	mov	r6, r0
   1b220:	mov	r2, #0
   1b224:	lsl	r3, r6, #1
   1b228:	str	r2, [sp, #24]
   1b22c:	mov	r0, r6
   1b230:	b	1b0ac <__assert_fail@plt+0x8564>
   1b234:	ldr	r3, [sp, #4]
   1b238:	ldr	r4, [r3, #52]	; 0x34
   1b23c:	cmp	r4, #0
   1b240:	beq	1b264 <__assert_fail@plt+0x871c>
   1b244:	mov	r1, r8
   1b248:	add	r0, r4, #4
   1b24c:	bl	1238c <strcmp@plt>
   1b250:	cmp	r0, #0
   1b254:	beq	1ab80 <__assert_fail@plt+0x8038>
   1b258:	ldr	r4, [r4]
   1b25c:	cmp	r4, #0
   1b260:	bne	1b244 <__assert_fail@plt+0x86fc>
   1b264:	ldr	r2, [sp, #4]
   1b268:	tst	r6, #128	; 0x80
   1b26c:	mvnne	r3, #6
   1b270:	mvneq	r3, #1
   1b274:	mov	r6, r5
   1b278:	str	r3, [r2, #16]
   1b27c:	mov	r8, r5
   1b280:	mvn	r4, #0
   1b284:	b	1a95c <__assert_fail@plt+0x7e14>
   1b288:	ldr	r0, [sp, #12]
   1b28c:	bl	124a0 <gcry_free@plt>
   1b290:	b	1aeb8 <__assert_fail@plt+0x8370>
   1b294:	ldr	r3, [sp, #24]
   1b298:	cmp	r3, #0
   1b29c:	bne	1b2e0 <__assert_fail@plt+0x8798>
   1b2a0:	ldr	r0, [sp]
   1b2a4:	bl	12adc <getc@plt>
   1b2a8:	mov	r3, #1
   1b2ac:	str	r3, [sp, #24]
   1b2b0:	mov	r3, #20
   1b2b4:	cmn	r0, #1
   1b2b8:	cmpne	r0, #10
   1b2bc:	bne	1b21c <__assert_fail@plt+0x86d4>
   1b2c0:	mov	r0, #10
   1b2c4:	b	1b0ac <__assert_fail@plt+0x8564>
   1b2c8:	bl	124e8 <__stack_chk_fail@plt>
   1b2cc:	mov	r2, r8
   1b2d0:	add	r8, r8, #1
   1b2d4:	b	1b028 <__assert_fail@plt+0x84e0>
   1b2d8:	lsl	r3, r0, #1
   1b2dc:	b	1b05c <__assert_fail@plt+0x8514>
   1b2e0:	ldr	r3, [fp]
   1b2e4:	ldr	r4, [sp, #28]
   1b2e8:	add	r3, r3, #1
   1b2ec:	mov	r6, r5
   1b2f0:	str	r3, [fp]
   1b2f4:	mov	r8, #0
   1b2f8:	b	1a95c <__assert_fail@plt+0x7e14>
   1b2fc:	andeq	fp, r3, r0, lsl fp
   1b300:	andeq	r9, r2, r4, ror #1
   1b304:	strdeq	r9, [r2], -ip
   1b308:	andeq	r9, r2, r0, lsl #2
   1b30c:	push	{r4, r5, r6, lr}
   1b310:	subs	r4, r0, #0
   1b314:	sub	sp, sp, #16
   1b318:	beq	1b334 <__assert_fail@plt+0x87ec>
   1b31c:	cmp	r4, #1
   1b320:	beq	1b40c <__assert_fail@plt+0x88c4>
   1b324:	cmp	r4, #2
   1b328:	beq	1b390 <__assert_fail@plt+0x8848>
   1b32c:	add	sp, sp, #16
   1b330:	pop	{r4, r5, r6, pc}
   1b334:	mov	r0, #11
   1b338:	bl	19660 <__assert_fail@plt+0x6b18>
   1b33c:	mov	r5, r0
   1b340:	mov	r0, #13
   1b344:	bl	19660 <__assert_fail@plt+0x6b18>
   1b348:	mov	r6, r0
   1b34c:	mov	r0, #14
   1b350:	bl	19660 <__assert_fail@plt+0x6b18>
   1b354:	ldr	ip, [pc, #240]	; 1b44c <__assert_fail@plt+0x8904>
   1b358:	ldr	r2, [pc, #240]	; 1b450 <__assert_fail@plt+0x8908>
   1b35c:	mov	r3, r6
   1b360:	str	r2, [sp]
   1b364:	mov	r1, r5
   1b368:	str	r4, [sp, #12]
   1b36c:	str	ip, [sp, #8]
   1b370:	ldr	r2, [pc, #220]	; 1b454 <__assert_fail@plt+0x890c>
   1b374:	str	r0, [sp, #4]
   1b378:	mov	r0, #1
   1b37c:	bl	1952c <__assert_fail@plt+0x69e4>
   1b380:	mov	r0, #1
   1b384:	add	sp, sp, #16
   1b388:	pop	{r4, r5, r6, lr}
   1b38c:	b	1960c <__assert_fail@plt+0x6ac4>
   1b390:	mov	r0, #42	; 0x2a
   1b394:	bl	19660 <__assert_fail@plt+0x6b18>
   1b398:	cmp	r0, #0
   1b39c:	beq	1b3ac <__assert_fail@plt+0x8864>
   1b3a0:	ldrb	r3, [r0]
   1b3a4:	cmp	r3, #49	; 0x31
   1b3a8:	beq	1b3d0 <__assert_fail@plt+0x8888>
   1b3ac:	mov	r0, #41	; 0x29
   1b3b0:	bl	19660 <__assert_fail@plt+0x6b18>
   1b3b4:	mov	r3, #0
   1b3b8:	ldr	r2, [pc, #140]	; 1b44c <__assert_fail@plt+0x8904>
   1b3bc:	mov	r1, r0
   1b3c0:	mov	r0, r3
   1b3c4:	bl	1952c <__assert_fail@plt+0x69e4>
   1b3c8:	mov	r0, #0
   1b3cc:	bl	12764 <exit@plt>
   1b3d0:	mov	r0, #40	; 0x28
   1b3d4:	bl	19660 <__assert_fail@plt+0x6b18>
   1b3d8:	mov	r2, #0
   1b3dc:	mov	r4, r0
   1b3e0:	mov	r1, r0
   1b3e4:	mov	r0, #1
   1b3e8:	bl	1952c <__assert_fail@plt+0x69e4>
   1b3ec:	ldrb	r3, [r4]
   1b3f0:	cmp	r3, #0
   1b3f4:	beq	1b3ac <__assert_fail@plt+0x8864>
   1b3f8:	mov	r2, #0
   1b3fc:	ldr	r1, [pc, #72]	; 1b44c <__assert_fail@plt+0x8904>
   1b400:	mov	r0, #1
   1b404:	bl	1952c <__assert_fail@plt+0x69e4>
   1b408:	b	1b3ac <__assert_fail@plt+0x8864>
   1b40c:	mov	r0, #40	; 0x28
   1b410:	bl	19660 <__assert_fail@plt+0x6b18>
   1b414:	mov	r2, #0
   1b418:	mov	r5, r0
   1b41c:	mov	r1, r0
   1b420:	mov	r0, r4
   1b424:	bl	1952c <__assert_fail@plt+0x69e4>
   1b428:	ldrb	r3, [r5]
   1b42c:	cmp	r3, #0
   1b430:	beq	1b444 <__assert_fail@plt+0x88fc>
   1b434:	mov	r0, r4
   1b438:	mov	r2, #0
   1b43c:	ldr	r1, [pc, #8]	; 1b44c <__assert_fail@plt+0x8904>
   1b440:	bl	1952c <__assert_fail@plt+0x69e4>
   1b444:	mov	r0, #2
   1b448:	bl	12764 <exit@plt>
   1b44c:	andeq	sl, r2, ip, lsr #4
   1b450:	andeq	r9, r2, r8, lsl #2
   1b454:	muleq	r2, r8, r1
   1b458:	ldr	r3, [pc, #4]	; 1b464 <__assert_fail@plt+0x891c>
   1b45c:	str	r0, [r3, #4]
   1b460:	bx	lr
   1b464:	andeq	ip, r3, ip, lsl #6
   1b468:	push	{r4, lr}
   1b46c:	mov	r4, r0
   1b470:	ldr	r0, [r0]
   1b474:	cmp	r0, #2
   1b478:	cmnne	r0, #1
   1b47c:	bne	1b49c <__assert_fail@plt+0x8954>
   1b480:	mov	r0, r4
   1b484:	bl	124a0 <gcry_free@plt>
   1b488:	ldr	r3, [pc, #20]	; 1b4a4 <__assert_fail@plt+0x895c>
   1b48c:	mvn	r2, #0
   1b490:	mov	r0, #0
   1b494:	str	r2, [r3]
   1b498:	pop	{r4, pc}
   1b49c:	bl	12af4 <close@plt>
   1b4a0:	b	1b480 <__assert_fail@plt+0x8938>
   1b4a4:	andeq	ip, r3, ip, ror r2
   1b4a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b4ac:	mov	r6, r0
   1b4b0:	ldr	r7, [pc, #504]	; 1b6b0 <__assert_fail@plt+0x8b68>
   1b4b4:	sub	sp, sp, #28
   1b4b8:	mov	r4, r1
   1b4bc:	ldr	r3, [r7]
   1b4c0:	cmp	r3, #0
   1b4c4:	beq	1b4ec <__assert_fail@plt+0x89a4>
   1b4c8:	mov	r0, #2
   1b4cc:	bl	12740 <_gpgrt_get_std_stream@plt>
   1b4d0:	ldr	r3, [r7]
   1b4d4:	cmp	r3, r0
   1b4d8:	beq	1b4e4 <__assert_fail@plt+0x899c>
   1b4dc:	mov	r0, r3
   1b4e0:	bl	12644 <gpgrt_fclose@plt>
   1b4e4:	mov	r3, #0
   1b4e8:	str	r3, [r7]
   1b4ec:	cmp	r6, #0
   1b4f0:	beq	1b678 <__assert_fail@plt+0x8b30>
   1b4f4:	ldr	r1, [pc, #440]	; 1b6b4 <__assert_fail@plt+0x8b6c>
   1b4f8:	mov	r0, r6
   1b4fc:	bl	1238c <strcmp@plt>
   1b500:	cmp	r0, #0
   1b504:	beq	1b668 <__assert_fail@plt+0x8b20>
   1b508:	mov	r2, #6
   1b50c:	ldr	r1, [pc, #420]	; 1b6b8 <__assert_fail@plt+0x8b70>
   1b510:	mov	r0, r6
   1b514:	bl	12ac4 <strncmp@plt>
   1b518:	mov	r4, r0
   1b51c:	mov	r0, r6
   1b520:	bl	12788 <strlen@plt>
   1b524:	cmp	r4, #0
   1b528:	add	r4, r0, #20
   1b52c:	bne	1b5e0 <__assert_fail@plt+0x8a98>
   1b530:	ldrb	r3, [r6, #6]
   1b534:	cmp	r3, #0
   1b538:	beq	1b5e0 <__assert_fail@plt+0x8a98>
   1b53c:	mov	r8, #1
   1b540:	mov	r0, r4
   1b544:	bl	122fc <gcry_xmalloc@plt>
   1b548:	mov	r1, r6
   1b54c:	mvn	r4, #0
   1b550:	mov	r5, r0
   1b554:	add	r0, r0, #16
   1b558:	bl	12620 <strcpy@plt>
   1b55c:	mov	r3, #0
   1b560:	str	r3, [r5, #12]
   1b564:	stmib	r5, {r3, r8}
   1b568:	str	r4, [r5]
   1b56c:	ldr	r1, [pc, #328]	; 1b6bc <__assert_fail@plt+0x8b74>
   1b570:	mov	r2, #0
   1b574:	str	r1, [sp, #20]
   1b578:	add	r1, sp, #24
   1b57c:	str	r2, [sp, #16]
   1b580:	ldmdb	r1, {r0, r1}
   1b584:	ldr	ip, [pc, #308]	; 1b6c0 <__assert_fail@plt+0x8b78>
   1b588:	str	r2, [sp, #8]
   1b58c:	add	r3, sp, #8
   1b590:	ldr	r2, [pc, #300]	; 1b6c4 <__assert_fail@plt+0x8b7c>
   1b594:	stm	sp, {r0, r1}
   1b598:	str	r2, [sp, #12]
   1b59c:	mov	r0, r5
   1b5a0:	ldm	r3, {r2, r3}
   1b5a4:	ldr	r1, [pc, #284]	; 1b6c8 <__assert_fail@plt+0x8b80>
   1b5a8:	str	r4, [ip]
   1b5ac:	bl	129e0 <gpgrt_fopencookie@plt>
   1b5b0:	subs	r4, r0, #0
   1b5b4:	beq	1b6a0 <__assert_fail@plt+0x8b58>
   1b5b8:	mov	r3, #0
   1b5bc:	mov	r1, r3
   1b5c0:	mov	r2, #1
   1b5c4:	mov	r0, r4
   1b5c8:	bl	12650 <gpgrt_setvbuf@plt>
   1b5cc:	mov	r3, #0
   1b5d0:	stm	r7, {r4, r8}
   1b5d4:	str	r3, [r7, #8]
   1b5d8:	add	sp, sp, #28
   1b5dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b5e0:	mov	r2, #9
   1b5e4:	ldr	r1, [pc, #224]	; 1b6cc <__assert_fail@plt+0x8b84>
   1b5e8:	mov	r0, r6
   1b5ec:	bl	12ac4 <strncmp@plt>
   1b5f0:	cmp	r0, #0
   1b5f4:	moveq	r8, #2
   1b5f8:	beq	1b540 <__assert_fail@plt+0x89f8>
   1b5fc:	mov	r0, r4
   1b600:	bl	122fc <gcry_xmalloc@plt>
   1b604:	mov	r1, r6
   1b608:	ldr	r9, [pc, #192]	; 1b6d0 <__assert_fail@plt+0x8b88>
   1b60c:	ldr	r8, [pc, #192]	; 1b6d4 <__assert_fail@plt+0x8b8c>
   1b610:	mov	r5, r0
   1b614:	add	r0, r0, #16
   1b618:	bl	12620 <strcpy@plt>
   1b61c:	mov	r3, #0
   1b620:	str	r3, [r5, #4]
   1b624:	str	r3, [r5, #12]
   1b628:	str	r3, [r5, #8]
   1b62c:	b	1b640 <__assert_fail@plt+0x8af8>
   1b630:	bl	1280c <__errno_location@plt>
   1b634:	ldr	r3, [r0]
   1b638:	cmp	r3, #4
   1b63c:	bne	1b660 <__assert_fail@plt+0x8b18>
   1b640:	mov	r2, r9
   1b644:	mov	r1, r8
   1b648:	mov	r0, r6
   1b64c:	bl	12668 <open64@plt>
   1b650:	cmn	r0, #1
   1b654:	mov	r4, r0
   1b658:	str	r0, [r5]
   1b65c:	beq	1b630 <__assert_fail@plt+0x8ae8>
   1b660:	mov	r8, #0
   1b664:	b	1b56c <__assert_fail@plt+0x8a24>
   1b668:	mov	r0, #2
   1b66c:	bl	12740 <_gpgrt_get_std_stream@plt>
   1b670:	bl	12ae8 <gpgrt_fileno@plt>
   1b674:	mov	r4, r0
   1b678:	mov	r0, #20
   1b67c:	bl	122fc <gcry_xmalloc@plt>
   1b680:	mov	r8, #0
   1b684:	mov	r5, r0
   1b688:	str	r4, [r0]
   1b68c:	strb	r8, [r0, #16]
   1b690:	str	r8, [r0, #4]
   1b694:	str	r8, [r0, #12]
   1b698:	str	r8, [r0, #8]
   1b69c:	b	1b56c <__assert_fail@plt+0x8a24>
   1b6a0:	mov	r0, #2
   1b6a4:	bl	12740 <_gpgrt_get_std_stream@plt>
   1b6a8:	mov	r4, r0
   1b6ac:	b	1b5b8 <__assert_fail@plt+0x8a70>
   1b6b0:	andeq	ip, r3, r4, lsl r3
   1b6b4:	andeq	r7, r2, ip, asr lr
   1b6b8:	andeq	r9, r2, r4, lsr #2
   1b6bc:	andeq	fp, r1, r8, ror #8
   1b6c0:	andeq	ip, r3, ip, ror r2
   1b6c4:	ldrdeq	fp, [r1], -r4
   1b6c8:	andeq	r9, r2, ip, lsr #2
   1b6cc:	andeq	r9, r2, r0, lsr r1
   1b6d0:			; <UNDEFINED> instruction: 0x000001b6
   1b6d4:	andeq	r0, r0, r1, asr #8
   1b6d8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b6dc:	sub	sp, sp, #28
   1b6e0:	ldr	r6, [pc, #688]	; 1b998 <__assert_fail@plt+0x8e50>
   1b6e4:	cmp	r0, #1
   1b6e8:	ldr	r3, [r6]
   1b6ec:	str	r3, [sp, #20]
   1b6f0:	beq	1b7c8 <__assert_fail@plt+0x8c80>
   1b6f4:	ldr	r4, [pc, #672]	; 1b99c <__assert_fail@plt+0x8e54>
   1b6f8:	mov	r5, r0
   1b6fc:	mov	r7, r1
   1b700:	ldr	r3, [r4, #12]
   1b704:	ldr	r0, [r4, #4]
   1b708:	cmp	r3, #0
   1b70c:	bne	1b7e0 <__assert_fail@plt+0x8c98>
   1b710:	ldr	r3, [r4, #16]
   1b714:	orrs	r0, r0, r3
   1b718:	bne	1b978 <__assert_fail@plt+0x8e30>
   1b71c:	ldr	r3, [r4, #100]	; 0x64
   1b720:	orrs	r3, r0, r3
   1b724:	bne	1b808 <__assert_fail@plt+0x8cc0>
   1b728:	ldr	r3, [r4, #12]
   1b72c:	cmp	r3, #0
   1b730:	beq	1b860 <__assert_fail@plt+0x8d18>
   1b734:	cmp	r7, #0
   1b738:	bne	1b790 <__assert_fail@plt+0x8c48>
   1b73c:	ldr	r2, [r4, #16]
   1b740:	ldr	r3, [r4, #12]
   1b744:	ldr	r1, [r4, #100]	; 0x64
   1b748:	orr	r3, r3, r2
   1b74c:	ldr	r2, [r4, #4]
   1b750:	orr	r3, r3, r1
   1b754:	orrs	r3, r3, r2
   1b758:	beq	1b790 <__assert_fail@plt+0x8c48>
   1b75c:	ldr	r1, [r4]
   1b760:	ldrb	r3, [r1, #2]
   1b764:	tst	r3, #1
   1b768:	beq	1b8c4 <__assert_fail@plt+0x8d7c>
   1b76c:	ldr	r3, [r1, #16]
   1b770:	ldr	r2, [r1, #8]
   1b774:	cmp	r3, r2
   1b778:	bcs	1b8c4 <__assert_fail@plt+0x8d7c>
   1b77c:	ldr	r2, [r1, #4]
   1b780:	add	r0, r3, #1
   1b784:	str	r0, [r1, #16]
   1b788:	mov	r1, #32
   1b78c:	strb	r1, [r2, r3]
   1b790:	cmp	r5, #7
   1b794:	ldrls	pc, [pc, r5, lsl #2]
   1b798:	b	1b984 <__assert_fail@plt+0x8e3c>
   1b79c:	andeq	fp, r1, r8, asr #15
   1b7a0:	andeq	fp, r1, r8, asr #15
   1b7a4:	andeq	fp, r1, r8, asr #15
   1b7a8:	andeq	fp, r1, r8, asr #15
   1b7ac:	andeq	fp, r1, r8, asr #15
   1b7b0:	andeq	fp, r1, r4, lsr #17
   1b7b4:			; <UNDEFINED> instruction: 0x0001b8b4
   1b7b8:			; <UNDEFINED> instruction: 0x0001b7bc
   1b7bc:	ldr	r1, [r4]
   1b7c0:	ldr	r0, [pc, #472]	; 1b9a0 <__assert_fail@plt+0x8e58>
   1b7c4:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1b7c8:	ldr	r2, [sp, #20]
   1b7cc:	ldr	r3, [r6]
   1b7d0:	cmp	r2, r3
   1b7d4:	bne	1b980 <__assert_fail@plt+0x8e38>
   1b7d8:	add	sp, sp, #28
   1b7dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b7e0:	cmp	r0, #0
   1b7e4:	ldr	r8, [r4]
   1b7e8:	beq	1b914 <__assert_fail@plt+0x8dcc>
   1b7ec:	mov	r1, r8
   1b7f0:	ldr	r0, [pc, #428]	; 1b9a4 <__assert_fail@plt+0x8e5c>
   1b7f4:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1b7f8:	ldr	r0, [r4, #4]
   1b7fc:	ldr	r3, [r4, #100]	; 0x64
   1b800:	orrs	r3, r0, r3
   1b804:	beq	1b728 <__assert_fail@plt+0x8be0>
   1b808:	ldr	r3, [r4, #104]	; 0x68
   1b80c:	cmp	r3, #0
   1b810:	beq	1b8f8 <__assert_fail@plt+0x8db0>
   1b814:	add	r0, sp, #16
   1b818:	blx	r3
   1b81c:	cmp	r0, #0
   1b820:	beq	1b8f8 <__assert_fail@plt+0x8db0>
   1b824:	ldr	r1, [pc, #380]	; 1b9a8 <__assert_fail@plt+0x8e60>
   1b828:	cmp	r0, #1
   1b82c:	ldr	r8, [pc, #376]	; 1b9ac <__assert_fail@plt+0x8e64>
   1b830:	ldr	r9, [r4]
   1b834:	movne	r8, r1
   1b838:	bl	12758 <getpid@plt>
   1b83c:	mov	r1, r8
   1b840:	ldr	r3, [sp, #16]
   1b844:	mov	r2, r0
   1b848:	mov	r0, r9
   1b84c:	bl	12770 <gpgrt_fprintf_unlocked@plt>
   1b850:	ldr	r3, [r4, #12]
   1b854:	cmp	r3, #0
   1b858:	bne	1b8d0 <__assert_fail@plt+0x8d88>
   1b85c:	ldr	r3, [r4, #100]	; 0x64
   1b860:	ldr	r2, [r4, #16]
   1b864:	orrs	r3, r3, r2
   1b868:	beq	1b8d0 <__assert_fail@plt+0x8d88>
   1b86c:	ldr	r1, [r4]
   1b870:	ldrb	r3, [r1, #2]
   1b874:	tst	r3, #1
   1b878:	beq	1b8ec <__assert_fail@plt+0x8da4>
   1b87c:	ldr	r3, [r1, #16]
   1b880:	ldr	r2, [r1, #8]
   1b884:	cmp	r3, r2
   1b888:	bcs	1b8ec <__assert_fail@plt+0x8da4>
   1b88c:	ldr	r2, [r1, #4]
   1b890:	add	r0, r3, #1
   1b894:	str	r0, [r1, #16]
   1b898:	mov	r1, #58	; 0x3a
   1b89c:	strb	r1, [r2, r3]
   1b8a0:	b	1b734 <__assert_fail@plt+0x8bec>
   1b8a4:	ldr	r1, [r4]
   1b8a8:	ldr	r0, [pc, #256]	; 1b9b0 <__assert_fail@plt+0x8e68>
   1b8ac:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1b8b0:	b	1b7c8 <__assert_fail@plt+0x8c80>
   1b8b4:	ldr	r1, [r4]
   1b8b8:	ldr	r0, [pc, #244]	; 1b9b4 <__assert_fail@plt+0x8e6c>
   1b8bc:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1b8c0:	b	1b7c8 <__assert_fail@plt+0x8c80>
   1b8c4:	mov	r0, #32
   1b8c8:	bl	12434 <_gpgrt_putc_overflow@plt>
   1b8cc:	b	1b790 <__assert_fail@plt+0x8c48>
   1b8d0:	ldr	r3, [r4, #4]
   1b8d4:	cmp	r3, #0
   1b8d8:	beq	1b734 <__assert_fail@plt+0x8bec>
   1b8dc:	ldr	r1, [r4]
   1b8e0:	ldrb	r3, [r1, #2]
   1b8e4:	tst	r3, #1
   1b8e8:	bne	1b87c <__assert_fail@plt+0x8d34>
   1b8ec:	mov	r0, #58	; 0x3a
   1b8f0:	bl	12434 <_gpgrt_putc_overflow@plt>
   1b8f4:	b	1b734 <__assert_fail@plt+0x8bec>
   1b8f8:	ldr	r8, [r4]
   1b8fc:	bl	12758 <getpid@plt>
   1b900:	ldr	r1, [pc, #176]	; 1b9b8 <__assert_fail@plt+0x8e70>
   1b904:	mov	r2, r0
   1b908:	mov	r0, r8
   1b90c:	bl	12770 <gpgrt_fprintf_unlocked@plt>
   1b910:	b	1b850 <__assert_fail@plt+0x8d08>
   1b914:	bl	12494 <time@plt>
   1b918:	str	r0, [sp, #16]
   1b91c:	add	r0, sp, #16
   1b920:	bl	126ec <localtime@plt>
   1b924:	mov	r1, r0
   1b928:	mov	r0, r8
   1b92c:	ldr	ip, [r1]
   1b930:	ldr	r3, [r1, #16]
   1b934:	ldr	r2, [r1, #20]
   1b938:	str	ip, [sp, #12]
   1b93c:	ldr	ip, [r1, #4]
   1b940:	add	r2, r2, #1888	; 0x760
   1b944:	str	ip, [sp, #8]
   1b948:	ldr	ip, [r1, #8]
   1b94c:	add	r3, r3, #1
   1b950:	str	ip, [sp, #4]
   1b954:	ldr	r1, [r1, #12]
   1b958:	add	r2, r2, #12
   1b95c:	str	r1, [sp]
   1b960:	ldr	r1, [pc, #84]	; 1b9bc <__assert_fail@plt+0x8e74>
   1b964:	bl	12770 <gpgrt_fprintf_unlocked@plt>
   1b968:	ldr	r0, [r4, #4]
   1b96c:	ldr	r3, [r4, #16]
   1b970:	orrs	r0, r0, r3
   1b974:	beq	1b71c <__assert_fail@plt+0x8bd4>
   1b978:	ldr	r8, [r4]
   1b97c:	b	1b7ec <__assert_fail@plt+0x8ca4>
   1b980:	bl	124e8 <__stack_chk_fail@plt>
   1b984:	mov	r2, r5
   1b988:	ldr	r0, [r4]
   1b98c:	ldr	r1, [pc, #44]	; 1b9c0 <__assert_fail@plt+0x8e78>
   1b990:	bl	12770 <gpgrt_fprintf_unlocked@plt>
   1b994:	b	1b7c8 <__assert_fail@plt+0x8c80>
   1b998:	andeq	fp, r3, r0, lsl fp
   1b99c:	andeq	ip, r3, r4, lsl r3
   1b9a0:	muleq	r2, r4, r1
   1b9a4:	andeq	ip, r3, r8, lsr #6
   1b9a8:	andeq	r9, r2, r8, asr #2
   1b9ac:	andeq	r9, r2, ip, lsr r1
   1b9b0:	andeq	r9, r2, ip, ror r1
   1b9b4:	andeq	r9, r2, r4, lsl #3
   1b9b8:	andeq	r9, r2, r4, ror r1
   1b9bc:	andeq	r9, r2, r4, asr r1
   1b9c0:	muleq	r2, ip, r1
   1b9c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9c8:	sub	sp, sp, #20
   1b9cc:	mov	r5, r3
   1b9d0:	ldr	r8, [sp, #56]	; 0x38
   1b9d4:	ldr	r4, [pc, #868]	; 1bd40 <__assert_fail@plt+0x91f8>
   1b9d8:	cmp	r8, #0
   1b9dc:	mov	sl, r0
   1b9e0:	ldrbne	r3, [r8]
   1b9e4:	ldr	r0, [r4]
   1b9e8:	streq	r8, [sp, #12]
   1b9ec:	subne	r3, r3, #8
   1b9f0:	clzne	r3, r3
   1b9f4:	lsrne	r3, r3, #5
   1b9f8:	strne	r3, [sp, #12]
   1b9fc:	cmp	r0, #0
   1ba00:	mov	r7, r1
   1ba04:	mov	r6, r2
   1ba08:	ldr	fp, [sp, #60]	; 0x3c
   1ba0c:	beq	1bca0 <__assert_fail@plt+0x9158>
   1ba10:	bl	12638 <gpgrt_flockfile@plt>
   1ba14:	ldr	r3, [r4, #8]
   1ba18:	cmp	r3, #0
   1ba1c:	cmpne	sl, #1
   1ba20:	bne	1bccc <__assert_fail@plt+0x9184>
   1ba24:	ldr	r9, [sp, #12]
   1ba28:	mov	r3, #0
   1ba2c:	mov	r1, r9
   1ba30:	mov	r0, sl
   1ba34:	str	r3, [r4, #8]
   1ba38:	bl	1b6d8 <__assert_fail@plt+0x8b90>
   1ba3c:	cmp	r9, #0
   1ba40:	addne	r8, r8, #1
   1ba44:	cmp	r8, #0
   1ba48:	beq	1bbf0 <__assert_fail@plt+0x90a8>
   1ba4c:	cmp	r5, #0
   1ba50:	ldr	r9, [r4]
   1ba54:	beq	1ba68 <__assert_fail@plt+0x8f20>
   1ba58:	mov	r1, r9
   1ba5c:	mov	r0, r5
   1ba60:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1ba64:	ldr	r9, [r4]
   1ba68:	cmp	r7, #0
   1ba6c:	beq	1bc8c <__assert_fail@plt+0x9144>
   1ba70:	ldr	fp, [pc, #716]	; 1bd44 <__assert_fail@plt+0x91fc>
   1ba74:	mov	r5, r8
   1ba78:	b	1bac8 <__assert_fail@plt+0x8f80>
   1ba7c:	cmp	r8, r5
   1ba80:	moveq	r2, #0
   1ba84:	beq	1baa4 <__assert_fail@plt+0x8f5c>
   1ba88:	ldr	r2, [r4, #16]
   1ba8c:	ldr	r0, [r4, #4]
   1ba90:	orrs	r2, r2, r0
   1ba94:	beq	1baa4 <__assert_fail@plt+0x8f5c>
   1ba98:	ldr	r0, [pc, #680]	; 1bd48 <__assert_fail@plt+0x9200>
   1ba9c:	bl	12788 <strlen@plt>
   1baa0:	add	r2, r0, #2
   1baa4:	sub	r3, r7, r5
   1baa8:	add	r3, r3, #1
   1baac:	mov	r0, r9
   1bab0:	stm	sp, {r3, r5}
   1bab4:	ldr	r1, [pc, #656]	; 1bd4c <__assert_fail@plt+0x9204>
   1bab8:	mov	r3, fp
   1babc:	bl	12770 <gpgrt_fprintf_unlocked@plt>
   1bac0:	ldr	r9, [r4]
   1bac4:	add	r5, r7, #1
   1bac8:	mov	r1, #10
   1bacc:	mov	r0, r5
   1bad0:	bl	127ac <strchr@plt>
   1bad4:	subs	r7, r0, #0
   1bad8:	bne	1ba7c <__assert_fail@plt+0x8f34>
   1badc:	mov	r1, r9
   1bae0:	mov	r0, r5
   1bae4:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1bae8:	ldrb	r3, [r8]
   1baec:	cmp	r3, #0
   1baf0:	beq	1bbf0 <__assert_fail@plt+0x90a8>
   1baf4:	mov	r0, r8
   1baf8:	bl	12788 <strlen@plt>
   1bafc:	add	r0, r8, r0
   1bb00:	ldrb	r3, [r0, #-1]
   1bb04:	cmp	r3, #10
   1bb08:	beq	1bbf0 <__assert_fail@plt+0x90a8>
   1bb0c:	mov	r3, #1
   1bb10:	cmp	r6, #0
   1bb14:	str	r3, [r4, #8]
   1bb18:	beq	1bd0c <__assert_fail@plt+0x91c4>
   1bb1c:	ldr	r1, [r4]
   1bb20:	mov	r0, #10
   1bb24:	bl	12434 <_gpgrt_putc_overflow@plt>
   1bb28:	mov	r3, #0
   1bb2c:	str	r3, [r4, #8]
   1bb30:	ldr	r1, [sp, #12]
   1bb34:	mov	r0, sl
   1bb38:	bl	1b6d8 <__assert_fail@plt+0x8b90>
   1bb3c:	ldr	r1, [r4]
   1bb40:	ldr	r0, [pc, #520]	; 1bd50 <__assert_fail@plt+0x9208>
   1bb44:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1bb48:	ldr	r9, [pc, #516]	; 1bd54 <__assert_fail@plt+0x920c>
   1bb4c:	ldr	r1, [r4]
   1bb50:	ldr	fp, [pc, #504]	; 1bd50 <__assert_fail@plt+0x9208>
   1bb54:	ldr	r8, [pc, #508]	; 1bd58 <__assert_fail@plt+0x9210>
   1bb58:	ldr	r7, [pc, #508]	; 1bd5c <__assert_fail@plt+0x9214>
   1bb5c:	mov	r5, #1
   1bb60:	str	r5, [r4, #8]
   1bb64:	ldrb	r0, [r6], #1
   1bb68:	cmp	r0, #0
   1bb6c:	beq	1bbc4 <__assert_fail@plt+0x907c>
   1bb70:	cmp	r0, #92	; 0x5c
   1bb74:	str	r5, [r4, #8]
   1bb78:	beq	1bc14 <__assert_fail@plt+0x90cc>
   1bb7c:	cmp	r0, #13
   1bb80:	beq	1bc24 <__assert_fail@plt+0x90dc>
   1bb84:	cmp	r0, #10
   1bb88:	beq	1bc34 <__assert_fail@plt+0x90ec>
   1bb8c:	ldrb	r3, [r1, #2]
   1bb90:	tst	r3, #1
   1bb94:	beq	1bc08 <__assert_fail@plt+0x90c0>
   1bb98:	ldr	r3, [r1, #16]
   1bb9c:	ldr	r2, [r1, #8]
   1bba0:	cmp	r3, r2
   1bba4:	bcs	1bc08 <__assert_fail@plt+0x90c0>
   1bba8:	ldr	r2, [r1, #4]
   1bbac:	add	ip, r3, #1
   1bbb0:	str	ip, [r1, #16]
   1bbb4:	strb	r0, [r2, r3]
   1bbb8:	ldrb	r0, [r6], #1
   1bbbc:	cmp	r0, #0
   1bbc0:	bne	1bb70 <__assert_fail@plt+0x9028>
   1bbc4:	ldr	r2, [r4, #8]
   1bbc8:	cmp	r2, #0
   1bbcc:	bne	1bc70 <__assert_fail@plt+0x9128>
   1bbd0:	cmp	sl, #5
   1bbd4:	beq	1bcfc <__assert_fail@plt+0x91b4>
   1bbd8:	cmp	sl, #6
   1bbdc:	beq	1bd1c <__assert_fail@plt+0x91d4>
   1bbe0:	mov	r0, r1
   1bbe4:	add	sp, sp, #20
   1bbe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbec:	b	1232c <gpgrt_funlockfile@plt>
   1bbf0:	cmp	r6, #0
   1bbf4:	beq	1bcdc <__assert_fail@plt+0x9194>
   1bbf8:	ldr	r3, [r4, #8]
   1bbfc:	cmp	r3, #0
   1bc00:	beq	1bb30 <__assert_fail@plt+0x8fe8>
   1bc04:	b	1bb1c <__assert_fail@plt+0x8fd4>
   1bc08:	bl	12434 <_gpgrt_putc_overflow@plt>
   1bc0c:	ldr	r1, [r4]
   1bc10:	b	1bb64 <__assert_fail@plt+0x901c>
   1bc14:	mov	r0, r7
   1bc18:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1bc1c:	ldr	r1, [r4]
   1bc20:	b	1bb64 <__assert_fail@plt+0x901c>
   1bc24:	mov	r0, r8
   1bc28:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1bc2c:	ldr	r1, [r4]
   1bc30:	b	1bb64 <__assert_fail@plt+0x901c>
   1bc34:	mov	r0, r9
   1bc38:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1bc3c:	ldrb	r3, [r6]
   1bc40:	cmp	r3, #0
   1bc44:	streq	r3, [r4, #8]
   1bc48:	ldreq	r1, [r4]
   1bc4c:	beq	1bb64 <__assert_fail@plt+0x901c>
   1bc50:	ldr	r1, [sp, #12]
   1bc54:	mov	r0, sl
   1bc58:	bl	1b6d8 <__assert_fail@plt+0x8b90>
   1bc5c:	ldr	r1, [r4]
   1bc60:	mov	r0, fp
   1bc64:	bl	12590 <gpgrt_fputs_unlocked@plt>
   1bc68:	ldr	r1, [r4]
   1bc6c:	b	1bb64 <__assert_fail@plt+0x901c>
   1bc70:	str	r0, [sp, #12]
   1bc74:	mov	r0, #10
   1bc78:	bl	12434 <_gpgrt_putc_overflow@plt>
   1bc7c:	ldr	r3, [sp, #12]
   1bc80:	ldr	r1, [r4]
   1bc84:	str	r3, [r4, #8]
   1bc88:	b	1bbd0 <__assert_fail@plt+0x9088>
   1bc8c:	mov	r2, fp
   1bc90:	mov	r0, r9
   1bc94:	mov	r1, r8
   1bc98:	bl	12398 <gpgrt_vfprintf_unlocked@plt>
   1bc9c:	b	1bae8 <__assert_fail@plt+0x8fa0>
   1bca0:	ldr	r0, [pc, #184]	; 1bd60 <__assert_fail@plt+0x9218>
   1bca4:	mvn	r1, #0
   1bca8:	bl	1b4a8 <__assert_fail@plt+0x8960>
   1bcac:	ldr	r0, [r4]
   1bcb0:	cmp	r0, #0
   1bcb4:	bne	1ba10 <__assert_fail@plt+0x8ec8>
   1bcb8:	ldr	r3, [pc, #164]	; 1bd64 <__assert_fail@plt+0x921c>
   1bcbc:	ldr	r2, [pc, #164]	; 1bd68 <__assert_fail@plt+0x9220>
   1bcc0:	ldr	r1, [pc, #164]	; 1bd6c <__assert_fail@plt+0x9224>
   1bcc4:	ldr	r0, [pc, #164]	; 1bd70 <__assert_fail@plt+0x9228>
   1bcc8:	bl	12b48 <__assert_fail@plt>
   1bccc:	ldr	r1, [r4]
   1bcd0:	mov	r0, #10
   1bcd4:	bl	12434 <_gpgrt_putc_overflow@plt>
   1bcd8:	b	1ba24 <__assert_fail@plt+0x8edc>
   1bcdc:	cmp	sl, #5
   1bce0:	ldr	r1, [r4]
   1bce4:	bne	1bbd8 <__assert_fail@plt+0x9090>
   1bce8:	ldr	r3, [r4, #8]
   1bcec:	cmp	r3, #0
   1bcf0:	beq	1bcfc <__assert_fail@plt+0x91b4>
   1bcf4:	mov	r0, #10
   1bcf8:	bl	12434 <_gpgrt_putc_overflow@plt>
   1bcfc:	ldr	r0, [r4]
   1bd00:	bl	1232c <gpgrt_funlockfile@plt>
   1bd04:	mov	r0, #2
   1bd08:	bl	12764 <exit@plt>
   1bd0c:	cmp	sl, #5
   1bd10:	ldr	r1, [r4]
   1bd14:	bne	1bbd8 <__assert_fail@plt+0x9090>
   1bd18:	b	1bcf4 <__assert_fail@plt+0x91ac>
   1bd1c:	ldr	r3, [r4, #8]
   1bd20:	cmp	r3, #0
   1bd24:	bne	1bd34 <__assert_fail@plt+0x91ec>
   1bd28:	ldr	r0, [r4]
   1bd2c:	bl	1232c <gpgrt_funlockfile@plt>
   1bd30:	bl	12ad0 <abort@plt>
   1bd34:	mov	r0, #10
   1bd38:	bl	12434 <_gpgrt_putc_overflow@plt>
   1bd3c:	b	1bd28 <__assert_fail@plt+0x91e0>
   1bd40:	andeq	ip, r3, r4, lsl r3
   1bd44:	muleq	r2, r8, r9
   1bd48:	andeq	ip, r3, r8, lsr #6
   1bd4c:	ldrdeq	r9, [r2], -ip
   1bd50:	andeq	r9, r2, r4, ror #3
   1bd54:	strdeq	r9, [r2], -r0
   1bd58:	andeq	r9, r2, ip, ror #3
   1bd5c:	andeq	r9, r2, r8, ror #3
   1bd60:	andeq	r7, r2, ip, asr lr
   1bd64:	andeq	r9, r2, ip, lsl #2
   1bd68:	strdeq	r0, [r0], -r1
   1bd6c:			; <UNDEFINED> instruction: 0x000291b8
   1bd70:	ldrdeq	r9, [r2], -r0
   1bd74:	push	{r1, r2, r3}
   1bd78:	mov	r3, #0
   1bd7c:	push	{r4, lr}
   1bd80:	sub	sp, sp, #20
   1bd84:	ldr	r4, [pc, #68]	; 1bdd0 <__assert_fail@plt+0x9288>
   1bd88:	ldr	r2, [sp, #28]
   1bd8c:	add	ip, sp, #32
   1bd90:	ldr	r1, [r4]
   1bd94:	stm	sp, {r2, ip}
   1bd98:	str	r1, [sp, #12]
   1bd9c:	mov	r2, r3
   1bda0:	mov	r1, #1
   1bda4:	str	ip, [sp, #8]
   1bda8:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1bdac:	ldr	r2, [sp, #12]
   1bdb0:	ldr	r3, [r4]
   1bdb4:	cmp	r2, r3
   1bdb8:	bne	1bdcc <__assert_fail@plt+0x9284>
   1bdbc:	add	sp, sp, #20
   1bdc0:	pop	{r4, lr}
   1bdc4:	add	sp, sp, #12
   1bdc8:	bx	lr
   1bdcc:	bl	124e8 <__stack_chk_fail@plt>
   1bdd0:	andeq	fp, r3, r0, lsl fp
   1bdd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdd8:	mov	r4, r0
   1bddc:	ldr	r8, [pc, #1564]	; 1c400 <__assert_fail@plt+0x98b8>
   1bde0:	ldr	r0, [r0, #8]
   1bde4:	sub	sp, sp, #180	; 0xb4
   1bde8:	ldr	r3, [r8]
   1bdec:	cmp	r0, #0
   1bdf0:	mov	r7, r1
   1bdf4:	mov	r9, r2
   1bdf8:	str	r3, [sp, #172]	; 0xac
   1bdfc:	ldr	r6, [r4]
   1be00:	beq	1bfbc <__assert_fail@plt+0x9474>
   1be04:	cmn	r6, #1
   1be08:	beq	1bf0c <__assert_fail@plt+0x93c4>
   1be0c:	ldr	sl, [pc, #1520]	; 1c404 <__assert_fail@plt+0x98bc>
   1be10:	str	r6, [sl]
   1be14:	cmp	r9, #0
   1be18:	beq	1bef0 <__assert_fail@plt+0x93a8>
   1be1c:	mov	r5, r9
   1be20:	b	1be30 <__assert_fail@plt+0x92e8>
   1be24:	subs	r5, r5, r0
   1be28:	add	r7, r7, r0
   1be2c:	beq	1bef0 <__assert_fail@plt+0x93a8>
   1be30:	mov	r2, r5
   1be34:	mov	r1, r7
   1be38:	mov	r0, r6
   1be3c:	bl	128b4 <write@plt>
   1be40:	cmp	r0, #0
   1be44:	bge	1be24 <__assert_fail@plt+0x92dc>
   1be48:	bl	1280c <__errno_location@plt>
   1be4c:	ldr	r3, [r0]
   1be50:	cmp	r3, #4
   1be54:	beq	1be30 <__assert_fail@plt+0x92e8>
   1be58:	ldr	r5, [pc, #1448]	; 1c408 <__assert_fail@plt+0x98c0>
   1be5c:	ldr	r3, [r5, #112]	; 0x70
   1be60:	cmp	r3, #0
   1be64:	bne	1bec8 <__assert_fail@plt+0x9380>
   1be68:	ldr	r3, [r4]
   1be6c:	cmn	r3, #1
   1be70:	beq	1bef0 <__assert_fail@plt+0x93a8>
   1be74:	mov	r0, #2
   1be78:	bl	12740 <_gpgrt_get_std_stream@plt>
   1be7c:	bl	12ae8 <gpgrt_fileno@plt>
   1be80:	bl	12aa0 <isatty@plt>
   1be84:	cmp	r0, #0
   1be88:	beq	1bec8 <__assert_fail@plt+0x9380>
   1be8c:	bl	1280c <__errno_location@plt>
   1be90:	ldrb	r3, [r4, #16]
   1be94:	cmp	r3, #0
   1be98:	mov	r5, r0
   1be9c:	mov	r0, #2
   1bea0:	beq	1c0cc <__assert_fail@plt+0x9584>
   1bea4:	bl	12740 <_gpgrt_get_std_stream@plt>
   1bea8:	mov	r6, r0
   1beac:	ldr	r0, [r5]
   1beb0:	bl	126c8 <strerror@plt>
   1beb4:	add	r2, r4, #16
   1beb8:	ldr	r1, [pc, #1356]	; 1c40c <__assert_fail@plt+0x98c4>
   1bebc:	mov	r3, r0
   1bec0:	mov	r0, r6
   1bec4:	bl	12a4c <gpgrt_fprintf@plt>
   1bec8:	ldr	r3, [r4, #12]
   1becc:	cmp	r3, #0
   1bed0:	beq	1bef0 <__assert_fail@plt+0x93a8>
   1bed4:	ldr	r0, [r4]
   1bed8:	cmn	r0, #1
   1bedc:	beq	1bef0 <__assert_fail@plt+0x93a8>
   1bee0:	bl	12af4 <close@plt>
   1bee4:	mvn	r3, #0
   1bee8:	str	r3, [r4]
   1beec:	str	r3, [sl]
   1bef0:	ldr	r2, [sp, #172]	; 0xac
   1bef4:	ldr	r3, [r8]
   1bef8:	mov	r0, r9
   1befc:	cmp	r2, r3
   1bf00:	bne	1c3e0 <__assert_fail@plt+0x9898>
   1bf04:	add	sp, sp, #180	; 0xb4
   1bf08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf0c:	mov	r3, #0
   1bf10:	add	r6, r4, #16
   1bf14:	mov	r0, r6
   1bf18:	str	r3, [r4, #12]
   1bf1c:	mov	r2, #6
   1bf20:	ldr	r1, [pc, #1256]	; 1c410 <__assert_fail@plt+0x98c8>
   1bf24:	bl	12ac4 <strncmp@plt>
   1bf28:	cmp	r0, #0
   1bf2c:	bne	1bf3c <__assert_fail@plt+0x93f4>
   1bf30:	ldrb	r3, [r4, #22]
   1bf34:	cmp	r3, #0
   1bf38:	bne	1bfd0 <__assert_fail@plt+0x9488>
   1bf3c:	mov	r2, #9
   1bf40:	ldr	r1, [pc, #1228]	; 1c414 <__assert_fail@plt+0x98cc>
   1bf44:	mov	r0, r6
   1bf48:	bl	12ac4 <strncmp@plt>
   1bf4c:	mov	sl, #1
   1bf50:	strh	sl, [sp, #60]	; 0x3c
   1bf54:	cmp	r0, #0
   1bf58:	addeq	r5, r4, #25
   1bf5c:	movne	r5, r6
   1bf60:	ldrb	fp, [r5]
   1bf64:	cmp	fp, #0
   1bf68:	beq	1c1e8 <__assert_fail@plt+0x96a0>
   1bf6c:	mov	r0, r5
   1bf70:	bl	12788 <strlen@plt>
   1bf74:	cmp	r0, #106	; 0x6a
   1bf78:	bls	1c138 <__assert_fail@plt+0x95f0>
   1bf7c:	ldr	r5, [pc, #1156]	; 1c408 <__assert_fail@plt+0x98c0>
   1bf80:	mvn	r3, #0
   1bf84:	str	r3, [r4]
   1bf88:	ldr	r3, [r4, #4]
   1bf8c:	ldr	r2, [r5, #112]	; 0x70
   1bf90:	cmp	r3, #0
   1bf94:	bne	1c294 <__assert_fail@plt+0x974c>
   1bf98:	cmp	r2, #0
   1bf9c:	beq	1c2a4 <__assert_fail@plt+0x975c>
   1bfa0:	ldr	r6, [r4]
   1bfa4:	cmn	r6, #1
   1bfa8:	beq	1c2e8 <__assert_fail@plt+0x97a0>
   1bfac:	mov	r2, #0
   1bfb0:	mov	r3, #1
   1bfb4:	str	r2, [r4, #4]
   1bfb8:	str	r3, [r4, #12]
   1bfbc:	ldr	sl, [pc, #1088]	; 1c404 <__assert_fail@plt+0x98bc>
   1bfc0:	cmn	r6, #1
   1bfc4:	str	r6, [sl]
   1bfc8:	beq	1be58 <__assert_fail@plt+0x9310>
   1bfcc:	b	1be14 <__assert_fail@plt+0x92cc>
   1bfd0:	add	r5, r4, #22
   1bfd4:	mov	r0, r5
   1bfd8:	bl	12788 <strlen@plt>
   1bfdc:	add	r0, r0, #1
   1bfe0:	bl	12338 <gcry_malloc@plt>
   1bfe4:	subs	sl, r0, #0
   1bfe8:	beq	1c288 <__assert_fail@plt+0x9740>
   1bfec:	ldrb	r3, [r4, #22]
   1bff0:	cmp	r3, #91	; 0x5b
   1bff4:	beq	1c0f8 <__assert_fail@plt+0x95b0>
   1bff8:	mov	r1, r5
   1bffc:	bl	12620 <strcpy@plt>
   1c000:	mov	r1, #58	; 0x3a
   1c004:	mov	r0, sl
   1c008:	bl	127ac <strchr@plt>
   1c00c:	cmp	r0, #0
   1c010:	beq	1c120 <__assert_fail@plt+0x95d8>
   1c014:	ldrb	r3, [r0, #1]
   1c018:	add	ip, r0, #1
   1c01c:	sub	r3, r3, #48	; 0x30
   1c020:	uxtb	r2, r3
   1c024:	cmp	r2, #9
   1c028:	bhi	1c120 <__assert_fail@plt+0x95d8>
   1c02c:	ldr	r5, [pc, #996]	; 1c418 <__assert_fail@plt+0x98d0>
   1c030:	b	1c044 <__assert_fail@plt+0x94fc>
   1c034:	add	r3, r3, r3, lsl #2
   1c038:	add	r3, r2, r3, lsl #1
   1c03c:	cmp	r3, r5
   1c040:	bhi	1c120 <__assert_fail@plt+0x95d8>
   1c044:	ldrb	r1, [ip, #1]!
   1c048:	sub	r2, r1, #48	; 0x30
   1c04c:	uxtb	lr, r2
   1c050:	cmp	lr, #9
   1c054:	bls	1c034 <__assert_fail@plt+0x94ec>
   1c058:	adds	r2, r1, #0
   1c05c:	movne	r2, #1
   1c060:	cmp	r3, #0
   1c064:	moveq	r2, #1
   1c068:	cmp	r2, #0
   1c06c:	bne	1c120 <__assert_fail@plt+0x95d8>
   1c070:	rev16	r3, r3
   1c074:	mov	r1, #2
   1c078:	strh	r3, [sp, #18]
   1c07c:	strb	r2, [r0]
   1c080:	str	r2, [sp, #20]
   1c084:	str	r2, [sp, #24]
   1c088:	str	r2, [sp, #28]
   1c08c:	mov	r3, r1
   1c090:	add	r2, sp, #20
   1c094:	add	r5, sp, #16
   1c098:	mov	fp, #16
   1c09c:	strh	r1, [sp, #16]
   1c0a0:	mov	r0, r3
   1c0a4:	mov	r1, sl
   1c0a8:	str	r3, [sp, #12]
   1c0ac:	bl	12464 <inet_pton@plt>
   1c0b0:	ldr	r3, [sp, #12]
   1c0b4:	cmp	r0, #1
   1c0b8:	beq	1c3e4 <__assert_fail@plt+0x989c>
   1c0bc:	mov	r0, sl
   1c0c0:	bl	124a0 <gcry_free@plt>
   1c0c4:	ldr	r5, [pc, #828]	; 1c408 <__assert_fail@plt+0x98c0>
   1c0c8:	b	1bf80 <__assert_fail@plt+0x9438>
   1c0cc:	bl	12740 <_gpgrt_get_std_stream@plt>
   1c0d0:	ldr	r7, [r4]
   1c0d4:	mov	r6, r0
   1c0d8:	ldr	r0, [r5]
   1c0dc:	bl	126c8 <strerror@plt>
   1c0e0:	mov	r2, r7
   1c0e4:	ldr	r1, [pc, #816]	; 1c41c <__assert_fail@plt+0x98d4>
   1c0e8:	mov	r3, r0
   1c0ec:	mov	r0, r6
   1c0f0:	bl	12a4c <gpgrt_fprintf@plt>
   1c0f4:	b	1bec8 <__assert_fail@plt+0x9380>
   1c0f8:	add	r1, r4, #23
   1c0fc:	bl	12620 <strcpy@plt>
   1c100:	mov	r1, #93	; 0x5d
   1c104:	mov	r0, sl
   1c108:	bl	127ac <strchr@plt>
   1c10c:	cmp	r0, #0
   1c110:	beq	1c120 <__assert_fail@plt+0x95d8>
   1c114:	ldrb	r3, [r0, #1]
   1c118:	cmp	r3, #58	; 0x3a
   1c11c:	beq	1c2f4 <__assert_fail@plt+0x97ac>
   1c120:	mov	r0, #22
   1c124:	bl	129a4 <gpg_err_set_errno@plt>
   1c128:	mov	r0, sl
   1c12c:	bl	124a0 <gcry_free@plt>
   1c130:	ldr	r5, [pc, #720]	; 1c408 <__assert_fail@plt+0x98c0>
   1c134:	b	1bf80 <__assert_fail@plt+0x9438>
   1c138:	mov	r1, r5
   1c13c:	mov	r2, #107	; 0x6b
   1c140:	add	r0, sp, #62	; 0x3e
   1c144:	bl	1286c <strncpy@plt>
   1c148:	mov	r3, #0
   1c14c:	add	r0, sp, #62	; 0x3e
   1c150:	strb	r3, [sp, #169]	; 0xa9
   1c154:	bl	12788 <strlen@plt>
   1c158:	mov	r3, sl
   1c15c:	ldr	sl, [pc, #700]	; 1c420 <__assert_fail@plt+0x98d8>
   1c160:	add	r5, sp, #60	; 0x3c
   1c164:	add	fp, r0, #2
   1c168:	mov	r0, r3
   1c16c:	mov	r2, #0
   1c170:	mov	r1, #1
   1c174:	bl	12a40 <socket@plt>
   1c178:	cmn	r0, #1
   1c17c:	str	r0, [r4]
   1c180:	ldreq	r5, [pc, #640]	; 1c408 <__assert_fail@plt+0x98c0>
   1c184:	beq	1bf88 <__assert_fail@plt+0x9440>
   1c188:	mov	r2, fp
   1c18c:	mov	r1, r5
   1c190:	bl	12b18 <connect@plt>
   1c194:	cmn	r0, #1
   1c198:	beq	1c25c <__assert_fail@plt+0x9714>
   1c19c:	ldr	r6, [r4]
   1c1a0:	cmn	r6, #1
   1c1a4:	bne	1bfac <__assert_fail@plt+0x9464>
   1c1a8:	ldr	r5, [pc, #600]	; 1c408 <__assert_fail@plt+0x98c0>
   1c1ac:	ldr	r3, [r5, #112]	; 0x70
   1c1b0:	cmp	r3, #0
   1c1b4:	bne	1c29c <__assert_fail@plt+0x9754>
   1c1b8:	ldr	r3, [r4, #4]
   1c1bc:	cmp	r3, #0
   1c1c0:	moveq	r3, #1
   1c1c4:	streq	r3, [r4, #4]
   1c1c8:	ldr	r3, [r5, #112]	; 0x70
   1c1cc:	ldr	sl, [pc, #560]	; 1c404 <__assert_fail@plt+0x98bc>
   1c1d0:	cmp	r3, #0
   1c1d4:	mvn	r3, #0
   1c1d8:	str	r3, [sl]
   1c1dc:	str	r3, [r4]
   1c1e0:	bne	1bec8 <__assert_fail@plt+0x9380>
   1c1e4:	b	1bef0 <__assert_fail@plt+0x93a8>
   1c1e8:	ldr	r5, [pc, #536]	; 1c408 <__assert_fail@plt+0x98c0>
   1c1ec:	ldr	r3, [r5, #108]	; 0x6c
   1c1f0:	blx	r3
   1c1f4:	subs	r1, r0, #0
   1c1f8:	ldrb	r3, [r1]
   1c1fc:	beq	1c3fc <__assert_fail@plt+0x98b4>
   1c200:	cmp	r3, #0
   1c204:	str	r1, [sp, #12]
   1c208:	beq	1bf80 <__assert_fail@plt+0x9438>
   1c20c:	bl	12788 <strlen@plt>
   1c210:	ldr	r1, [sp, #12]
   1c214:	add	r0, r0, #7
   1c218:	cmp	r0, #106	; 0x6a
   1c21c:	bhi	1bf80 <__assert_fail@plt+0x9438>
   1c220:	mov	r2, #107	; 0x6b
   1c224:	add	r0, sp, #62	; 0x3e
   1c228:	bl	1286c <strncpy@plt>
   1c22c:	mov	r2, #108	; 0x6c
   1c230:	ldr	r1, [pc, #492]	; 1c424 <__assert_fail@plt+0x98dc>
   1c234:	add	r0, sp, #62	; 0x3e
   1c238:	bl	12818 <__strcat_chk@plt>
   1c23c:	add	r0, sp, #62	; 0x3e
   1c240:	strb	fp, [sp, #169]	; 0xa9
   1c244:	bl	12788 <strlen@plt>
   1c248:	add	r5, sp, #60	; 0x3c
   1c24c:	mov	r3, sl
   1c250:	add	sl, sp, #62	; 0x3e
   1c254:	add	fp, r0, #2
   1c258:	b	1c168 <__assert_fail@plt+0x9620>
   1c25c:	ldr	r5, [pc, #420]	; 1c408 <__assert_fail@plt+0x98c0>
   1c260:	ldr	r2, [r4, #4]
   1c264:	ldr	r3, [r5, #112]	; 0x70
   1c268:	orrs	r3, r2, r3
   1c26c:	beq	1c394 <__assert_fail@plt+0x984c>
   1c270:	ldr	r0, [r4]
   1c274:	bl	12af4 <close@plt>
   1c278:	mvn	r3, #0
   1c27c:	str	r3, [r4]
   1c280:	ldr	r3, [r5, #112]	; 0x70
   1c284:	b	1c1b0 <__assert_fail@plt+0x9668>
   1c288:	bl	124a0 <gcry_free@plt>
   1c28c:	ldr	r5, [pc, #372]	; 1c408 <__assert_fail@plt+0x98c0>
   1c290:	b	1bf80 <__assert_fail@plt+0x9438>
   1c294:	cmp	r2, #0
   1c298:	beq	1c1c8 <__assert_fail@plt+0x9680>
   1c29c:	ldr	r6, [r4]
   1c2a0:	b	1bfbc <__assert_fail@plt+0x9474>
   1c2a4:	mov	r0, #2
   1c2a8:	bl	12740 <_gpgrt_get_std_stream@plt>
   1c2ac:	bl	12ae8 <gpgrt_fileno@plt>
   1c2b0:	bl	12aa0 <isatty@plt>
   1c2b4:	cmp	r0, #0
   1c2b8:	beq	1c19c <__assert_fail@plt+0x9654>
   1c2bc:	mov	r0, #2
   1c2c0:	bl	12740 <_gpgrt_get_std_stream@plt>
   1c2c4:	mov	r5, r0
   1c2c8:	bl	1280c <__errno_location@plt>
   1c2cc:	ldr	r0, [r0]
   1c2d0:	bl	126c8 <strerror@plt>
   1c2d4:	ldr	r1, [pc, #332]	; 1c428 <__assert_fail@plt+0x98e0>
   1c2d8:	mov	r2, r0
   1c2dc:	mov	r0, r5
   1c2e0:	bl	12a4c <gpgrt_fprintf@plt>
   1c2e4:	b	1c19c <__assert_fail@plt+0x9654>
   1c2e8:	ldr	sl, [pc, #276]	; 1c404 <__assert_fail@plt+0x98bc>
   1c2ec:	str	r6, [sl]
   1c2f0:	b	1be5c <__assert_fail@plt+0x9314>
   1c2f4:	ldrb	r3, [r0, #2]
   1c2f8:	add	lr, r0, #2
   1c2fc:	sub	r3, r3, #48	; 0x30
   1c300:	uxtb	r2, r3
   1c304:	cmp	r2, #9
   1c308:	bhi	1c120 <__assert_fail@plt+0x95d8>
   1c30c:	ldr	r5, [pc, #260]	; 1c418 <__assert_fail@plt+0x98d0>
   1c310:	b	1c324 <__assert_fail@plt+0x97dc>
   1c314:	add	r3, r3, r3, lsl #2
   1c318:	add	r3, r2, r3, lsl #1
   1c31c:	cmp	r3, r5
   1c320:	bhi	1c120 <__assert_fail@plt+0x95d8>
   1c324:	ldrb	r1, [lr, #1]!
   1c328:	sub	r2, r1, #48	; 0x30
   1c32c:	uxtb	ip, r2
   1c330:	cmp	ip, #9
   1c334:	bls	1c314 <__assert_fail@plt+0x97cc>
   1c338:	cmp	r1, #0
   1c33c:	clz	r2, r3
   1c340:	lsr	r2, r2, #5
   1c344:	moveq	r1, r2
   1c348:	movne	r1, #1
   1c34c:	cmp	r1, #0
   1c350:	bne	1c120 <__assert_fail@plt+0x95d8>
   1c354:	mov	r2, #10
   1c358:	rev16	r3, r3
   1c35c:	strh	r3, [sp, #34]	; 0x22
   1c360:	strh	r2, [sp, #32]
   1c364:	mov	r3, r2
   1c368:	strb	r1, [r0]
   1c36c:	str	r1, [sp, #36]	; 0x24
   1c370:	str	r1, [sp, #40]	; 0x28
   1c374:	str	r1, [sp, #44]	; 0x2c
   1c378:	str	r1, [sp, #48]	; 0x30
   1c37c:	str	r1, [sp, #52]	; 0x34
   1c380:	str	r1, [sp, #56]	; 0x38
   1c384:	add	r5, sp, #32
   1c388:	add	r2, sp, #40	; 0x28
   1c38c:	mov	fp, #28
   1c390:	b	1c0a0 <__assert_fail@plt+0x9558>
   1c394:	mov	r0, #2
   1c398:	bl	12740 <_gpgrt_get_std_stream@plt>
   1c39c:	bl	12ae8 <gpgrt_fileno@plt>
   1c3a0:	bl	12aa0 <isatty@plt>
   1c3a4:	cmp	r0, #0
   1c3a8:	beq	1c270 <__assert_fail@plt+0x9728>
   1c3ac:	mov	r0, #2
   1c3b0:	bl	12740 <_gpgrt_get_std_stream@plt>
   1c3b4:	mov	fp, r0
   1c3b8:	bl	1280c <__errno_location@plt>
   1c3bc:	ldr	r0, [r0]
   1c3c0:	bl	126c8 <strerror@plt>
   1c3c4:	mov	r3, sl
   1c3c8:	mov	r2, r6
   1c3cc:	ldr	r1, [pc, #88]	; 1c42c <__assert_fail@plt+0x98e4>
   1c3d0:	str	r0, [sp]
   1c3d4:	mov	r0, fp
   1c3d8:	bl	12a4c <gpgrt_fprintf@plt>
   1c3dc:	b	1c270 <__assert_fail@plt+0x9728>
   1c3e0:	bl	124e8 <__stack_chk_fail@plt>
   1c3e4:	mov	r0, sl
   1c3e8:	str	r3, [sp, #12]
   1c3ec:	ldr	sl, [pc, #44]	; 1c420 <__assert_fail@plt+0x98d8>
   1c3f0:	bl	124a0 <gcry_free@plt>
   1c3f4:	ldr	r3, [sp, #12]
   1c3f8:	b	1c168 <__assert_fail@plt+0x9620>
   1c3fc:	udf	#0
   1c400:	andeq	fp, r3, r0, lsl fp
   1c404:	andeq	ip, r3, ip, ror r2
   1c408:	andeq	ip, r3, r4, lsl r3
   1c40c:	andeq	r9, r2, r8, asr #4
   1c410:	andeq	r9, r2, r4, lsr #2
   1c414:	andeq	r9, r2, r0, lsr r1
   1c418:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   1c41c:	andeq	r9, r2, r4, ror #4
   1c420:	muleq	r2, r8, r9
   1c424:	strdeq	r9, [r2], -r4
   1c428:	strdeq	r9, [r2], -ip
   1c42c:	andeq	r9, r2, r8, lsr #4
   1c430:	ldr	r3, [pc, #16]	; 1c448 <__assert_fail@plt+0x9900>
   1c434:	cmp	r0, #0
   1c438:	movne	r2, #0
   1c43c:	ldr	r0, [r3, #116]	; 0x74
   1c440:	strne	r2, [r3, #116]	; 0x74
   1c444:	bx	lr
   1c448:	andeq	ip, r3, r4, lsl r3
   1c44c:	ldr	r2, [pc, #12]	; 1c460 <__assert_fail@plt+0x9918>
   1c450:	ldr	r3, [r2, #116]	; 0x74
   1c454:	add	r3, r3, #1
   1c458:	str	r3, [r2, #116]	; 0x74
   1c45c:	bx	lr
   1c460:	andeq	ip, r3, r4, lsl r3
   1c464:	ldr	r3, [pc, #12]	; 1c478 <__assert_fail@plt+0x9930>
   1c468:	cmp	r0, #0
   1c46c:	mvn	r1, #0
   1c470:	moveq	r0, r3
   1c474:	b	1b4a8 <__assert_fail@plt+0x8960>
   1c478:	andeq	r7, r2, ip, asr lr
   1c47c:	ldr	r3, [pc, #4]	; 1c488 <__assert_fail@plt+0x9940>
   1c480:	str	r0, [r3, #108]	; 0x6c
   1c484:	bx	lr
   1c488:	andeq	ip, r3, r4, lsl r3
   1c48c:	ldr	r3, [pc, #4]	; 1c498 <__assert_fail@plt+0x9950>
   1c490:	str	r0, [r3, #104]	; 0x68
   1c494:	bx	lr
   1c498:	andeq	ip, r3, r4, lsl r3
   1c49c:	cmp	r0, #0
   1c4a0:	push	{r4, r5, r6, lr}
   1c4a4:	mov	r4, r1
   1c4a8:	ldr	r5, [pc, #60]	; 1c4ec <__assert_fail@plt+0x99a4>
   1c4ac:	beq	1c4c8 <__assert_fail@plt+0x9980>
   1c4b0:	mov	r1, r0
   1c4b4:	mov	r2, #79	; 0x4f
   1c4b8:	add	r0, r5, #20
   1c4bc:	bl	1286c <strncpy@plt>
   1c4c0:	mov	r3, #0
   1c4c4:	strb	r3, [r5, #99]	; 0x63
   1c4c8:	and	r1, r4, #1
   1c4cc:	and	r2, r4, #2
   1c4d0:	and	r3, r4, #4
   1c4d4:	and	r4, r4, #256	; 0x100
   1c4d8:	str	r1, [r5, #16]
   1c4dc:	str	r2, [r5, #12]
   1c4e0:	str	r3, [r5, #100]	; 0x64
   1c4e4:	str	r4, [r5, #112]	; 0x70
   1c4e8:	pop	{r4, r5, r6, pc}
   1c4ec:	andeq	ip, r3, r4, lsl r3
   1c4f0:	cmp	r0, #0
   1c4f4:	beq	1c544 <__assert_fail@plt+0x99fc>
   1c4f8:	ldr	r2, [pc, #76]	; 1c54c <__assert_fail@plt+0x9a04>
   1c4fc:	ldr	r3, [r2, #16]
   1c500:	ldr	r1, [r2, #12]
   1c504:	adds	r3, r3, #0
   1c508:	movne	r3, #1
   1c50c:	cmp	r1, #0
   1c510:	str	r3, [r0]
   1c514:	orrne	r3, r3, #2
   1c518:	strne	r3, [r0]
   1c51c:	ldr	r3, [r2, #100]	; 0x64
   1c520:	cmp	r3, #0
   1c524:	ldrne	r3, [r0]
   1c528:	orrne	r3, r3, #4
   1c52c:	strne	r3, [r0]
   1c530:	ldr	r3, [r2, #112]	; 0x70
   1c534:	cmp	r3, #0
   1c538:	ldrne	r3, [r0]
   1c53c:	orrne	r3, r3, #256	; 0x100
   1c540:	strne	r3, [r0]
   1c544:	ldr	r0, [pc, #4]	; 1c550 <__assert_fail@plt+0x9a08>
   1c548:	bx	lr
   1c54c:	andeq	ip, r3, r4, lsl r3
   1c550:	andeq	ip, r3, r8, lsr #6
   1c554:	ldr	r3, [pc, #88]	; 1c5b4 <__assert_fail@plt+0x9a6c>
   1c558:	push	{r4, lr}
   1c55c:	mov	r4, r0
   1c560:	ldr	r0, [r3]
   1c564:	cmp	r0, #0
   1c568:	beq	1c58c <__assert_fail@plt+0x9a44>
   1c56c:	bl	12ae8 <gpgrt_fileno@plt>
   1c570:	cmn	r0, #1
   1c574:	sub	r3, r0, r4
   1c578:	clz	r3, r3
   1c57c:	lsr	r3, r3, #5
   1c580:	moveq	r3, #0
   1c584:	cmp	r3, #0
   1c588:	bne	1c5ac <__assert_fail@plt+0x9a64>
   1c58c:	ldr	r3, [pc, #36]	; 1c5b8 <__assert_fail@plt+0x9a70>
   1c590:	ldr	r3, [r3]
   1c594:	cmn	r3, #1
   1c598:	sub	r0, r3, r4
   1c59c:	clz	r0, r0
   1c5a0:	lsr	r0, r0, #5
   1c5a4:	moveq	r0, #0
   1c5a8:	pop	{r4, pc}
   1c5ac:	mov	r0, #1
   1c5b0:	pop	{r4, pc}
   1c5b4:	andeq	ip, r3, r4, lsl r3
   1c5b8:	andeq	ip, r3, ip, ror r2
   1c5bc:	ldr	r3, [pc, #20]	; 1c5d8 <__assert_fail@plt+0x9a90>
   1c5c0:	ldr	r0, [r3]
   1c5c4:	cmp	r0, #0
   1c5c8:	beq	1c5d0 <__assert_fail@plt+0x9a88>
   1c5cc:	b	12ae8 <gpgrt_fileno@plt>
   1c5d0:	mvn	r0, #0
   1c5d4:	bx	lr
   1c5d8:	andeq	ip, r3, r4, lsl r3
   1c5dc:	push	{r4, lr}
   1c5e0:	ldr	r4, [pc, #52]	; 1c61c <__assert_fail@plt+0x9ad4>
   1c5e4:	ldr	r0, [r4]
   1c5e8:	cmp	r0, #0
   1c5ec:	popne	{r4, pc}
   1c5f0:	ldr	r0, [pc, #40]	; 1c620 <__assert_fail@plt+0x9ad8>
   1c5f4:	mvn	r1, #0
   1c5f8:	bl	1b4a8 <__assert_fail@plt+0x8960>
   1c5fc:	ldr	r0, [r4]
   1c600:	cmp	r0, #0
   1c604:	popne	{r4, pc}
   1c608:	ldr	r3, [pc, #20]	; 1c624 <__assert_fail@plt+0x9adc>
   1c60c:	mov	r2, #672	; 0x2a0
   1c610:	ldr	r1, [pc, #16]	; 1c628 <__assert_fail@plt+0x9ae0>
   1c614:	ldr	r0, [pc, #16]	; 1c62c <__assert_fail@plt+0x9ae4>
   1c618:	bl	12b48 <__assert_fail@plt>
   1c61c:	andeq	ip, r3, r4, lsl r3
   1c620:	andeq	r7, r2, ip, asr lr
   1c624:	andeq	r9, r2, r4, lsl r1
   1c628:			; <UNDEFINED> instruction: 0x000291b8
   1c62c:	ldrdeq	r9, [r2], -r0
   1c630:	push	{r1, r2, r3}
   1c634:	mov	r3, #0
   1c638:	push	{r4, lr}
   1c63c:	sub	sp, sp, #20
   1c640:	ldr	r4, [pc, #68]	; 1c68c <__assert_fail@plt+0x9b44>
   1c644:	ldr	r2, [sp, #28]
   1c648:	add	ip, sp, #32
   1c64c:	ldr	r1, [r4]
   1c650:	stm	sp, {r2, ip}
   1c654:	str	r1, [sp, #12]
   1c658:	mov	r2, r3
   1c65c:	mov	r1, r3
   1c660:	str	ip, [sp, #8]
   1c664:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c668:	ldr	r2, [sp, #12]
   1c66c:	ldr	r3, [r4]
   1c670:	cmp	r2, r3
   1c674:	bne	1c688 <__assert_fail@plt+0x9b40>
   1c678:	add	sp, sp, #20
   1c67c:	pop	{r4, lr}
   1c680:	add	sp, sp, #12
   1c684:	bx	lr
   1c688:	bl	124e8 <__stack_chk_fail@plt>
   1c68c:	andeq	fp, r3, r0, lsl fp
   1c690:	push	{lr}		; (str lr, [sp, #-4]!)
   1c694:	sub	sp, sp, #12
   1c698:	mov	r3, #0
   1c69c:	stm	sp, {r1, r2}
   1c6a0:	mov	r2, r3
   1c6a4:	mov	r1, r3
   1c6a8:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c6ac:	add	sp, sp, #12
   1c6b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1c6b8:	sub	sp, sp, #12
   1c6bc:	str	r2, [sp]
   1c6c0:	mov	r2, #0
   1c6c4:	str	r3, [sp, #4]
   1c6c8:	mov	r3, r1
   1c6cc:	mov	r1, r2
   1c6d0:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c6d4:	add	sp, sp, #12
   1c6d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6dc:	b	1bd74 <__assert_fail@plt+0x922c>
   1c6e0:	push	{r0, r1, r2, r3}
   1c6e4:	mov	r3, #0
   1c6e8:	push	{r4, lr}
   1c6ec:	sub	sp, sp, #16
   1c6f0:	ldr	r4, [pc, #72]	; 1c740 <__assert_fail@plt+0x9bf8>
   1c6f4:	ldr	r2, [sp, #24]
   1c6f8:	add	ip, sp, #28
   1c6fc:	ldr	r0, [r4]
   1c700:	stm	sp, {r2, ip}
   1c704:	mov	r1, r3
   1c708:	mov	r2, r3
   1c70c:	str	r0, [sp, #12]
   1c710:	mov	r0, #2
   1c714:	str	ip, [sp, #8]
   1c718:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c71c:	ldr	r2, [sp, #12]
   1c720:	ldr	r3, [r4]
   1c724:	cmp	r2, r3
   1c728:	bne	1c73c <__assert_fail@plt+0x9bf4>
   1c72c:	add	sp, sp, #16
   1c730:	pop	{r4, lr}
   1c734:	add	sp, sp, #16
   1c738:	bx	lr
   1c73c:	bl	124e8 <__stack_chk_fail@plt>
   1c740:	andeq	fp, r3, r0, lsl fp
   1c744:	push	{r0, r1, r2, r3}
   1c748:	mov	r3, #0
   1c74c:	push	{r4, lr}
   1c750:	sub	sp, sp, #16
   1c754:	ldr	r4, [pc, #96]	; 1c7bc <__assert_fail@plt+0x9c74>
   1c758:	ldr	r2, [sp, #24]
   1c75c:	add	ip, sp, #28
   1c760:	ldr	r0, [r4]
   1c764:	mov	r1, r3
   1c768:	stm	sp, {r2, ip}
   1c76c:	str	r0, [sp, #12]
   1c770:	mov	r2, r3
   1c774:	mov	r0, #4
   1c778:	str	ip, [sp, #8]
   1c77c:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c780:	ldr	r2, [pc, #56]	; 1c7c0 <__assert_fail@plt+0x9c78>
   1c784:	ldr	r1, [pc, #56]	; 1c7c4 <__assert_fail@plt+0x9c7c>
   1c788:	ldr	r3, [r2, #116]	; 0x74
   1c78c:	cmp	r3, r1
   1c790:	addle	r3, r3, #1
   1c794:	strle	r3, [r2, #116]	; 0x74
   1c798:	ldr	r2, [sp, #12]
   1c79c:	ldr	r3, [r4]
   1c7a0:	cmp	r2, r3
   1c7a4:	bne	1c7b8 <__assert_fail@plt+0x9c70>
   1c7a8:	add	sp, sp, #16
   1c7ac:	pop	{r4, lr}
   1c7b0:	add	sp, sp, #16
   1c7b4:	bx	lr
   1c7b8:	bl	124e8 <__stack_chk_fail@plt>
   1c7bc:	andeq	fp, r3, r0, lsl fp
   1c7c0:	andeq	ip, r3, r4, lsl r3
   1c7c4:	andeq	r7, r0, pc, lsr #10
   1c7c8:	push	{r0, r1, r2, r3}
   1c7cc:	mov	r0, #5
   1c7d0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c7d4:	sub	sp, sp, #20
   1c7d8:	ldr	r3, [pc, #40]	; 1c808 <__assert_fail@plt+0x9cc0>
   1c7dc:	ldr	r2, [sp, #24]
   1c7e0:	add	ip, sp, #28
   1c7e4:	ldr	lr, [r3]
   1c7e8:	mov	r3, #0
   1c7ec:	stm	sp, {r2, ip}
   1c7f0:	mov	r1, r3
   1c7f4:	mov	r2, r3
   1c7f8:	str	lr, [sp, #12]
   1c7fc:	str	ip, [sp, #8]
   1c800:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c804:	bl	12ad0 <abort@plt>
   1c808:	andeq	fp, r3, r0, lsl fp
   1c80c:	push	{r4, lr}
   1c810:	mov	r4, r0
   1c814:	bl	1da94 <__assert_fail@plt+0xaf4c>
   1c818:	cmp	r0, #0
   1c81c:	beq	1c830 <__assert_fail@plt+0x9ce8>
   1c820:	mov	r1, r4
   1c824:	mov	r0, #0
   1c828:	pop	{r4, lr}
   1c82c:	b	1b4a8 <__assert_fail@plt+0x8960>
   1c830:	bl	1280c <__errno_location@plt>
   1c834:	ldr	r0, [r0]
   1c838:	bl	126c8 <strerror@plt>
   1c83c:	mov	r1, r0
   1c840:	ldr	r0, [pc]	; 1c848 <__assert_fail@plt+0x9d00>
   1c844:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   1c848:	muleq	r2, r0, r2
   1c84c:	push	{r0, r1, r2, r3}
   1c850:	mov	r0, #6
   1c854:	push	{lr}		; (str lr, [sp, #-4]!)
   1c858:	sub	sp, sp, #20
   1c85c:	ldr	r3, [pc, #40]	; 1c88c <__assert_fail@plt+0x9d44>
   1c860:	ldr	r2, [sp, #24]
   1c864:	add	ip, sp, #28
   1c868:	ldr	lr, [r3]
   1c86c:	mov	r3, #0
   1c870:	stm	sp, {r2, ip}
   1c874:	mov	r1, r3
   1c878:	mov	r2, r3
   1c87c:	str	lr, [sp, #12]
   1c880:	str	ip, [sp, #8]
   1c884:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c888:	bl	12ad0 <abort@plt>
   1c88c:	andeq	fp, r3, r0, lsl fp
   1c890:	push	{r0, r1, r2, r3}
   1c894:	mov	r3, #0
   1c898:	push	{r4, lr}
   1c89c:	sub	sp, sp, #16
   1c8a0:	ldr	r4, [pc, #72]	; 1c8f0 <__assert_fail@plt+0x9da8>
   1c8a4:	ldr	r2, [sp, #24]
   1c8a8:	add	ip, sp, #28
   1c8ac:	ldr	r0, [r4]
   1c8b0:	stm	sp, {r2, ip}
   1c8b4:	mov	r1, r3
   1c8b8:	mov	r2, r3
   1c8bc:	str	r0, [sp, #12]
   1c8c0:	mov	r0, #7
   1c8c4:	str	ip, [sp, #8]
   1c8c8:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c8cc:	ldr	r2, [sp, #12]
   1c8d0:	ldr	r3, [r4]
   1c8d4:	cmp	r2, r3
   1c8d8:	bne	1c8ec <__assert_fail@plt+0x9da4>
   1c8dc:	add	sp, sp, #16
   1c8e0:	pop	{r4, lr}
   1c8e4:	add	sp, sp, #16
   1c8e8:	bx	lr
   1c8ec:	bl	124e8 <__stack_chk_fail@plt>
   1c8f0:	andeq	fp, r3, r0, lsl fp
   1c8f4:	push	{r1, r2, r3}
   1c8f8:	mov	r3, #0
   1c8fc:	push	{r4, lr}
   1c900:	sub	sp, sp, #20
   1c904:	ldr	r4, [pc, #72]	; 1c954 <__assert_fail@plt+0x9e0c>
   1c908:	ldr	r1, [sp, #28]
   1c90c:	add	ip, sp, #32
   1c910:	ldr	lr, [r4]
   1c914:	mov	r2, r0
   1c918:	stm	sp, {r1, ip}
   1c91c:	mov	r0, #7
   1c920:	mov	r1, r3
   1c924:	str	lr, [sp, #12]
   1c928:	str	ip, [sp, #8]
   1c92c:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c930:	ldr	r2, [sp, #12]
   1c934:	ldr	r3, [r4]
   1c938:	cmp	r2, r3
   1c93c:	bne	1c950 <__assert_fail@plt+0x9e08>
   1c940:	add	sp, sp, #20
   1c944:	pop	{r4, lr}
   1c948:	add	sp, sp, #12
   1c94c:	bx	lr
   1c950:	bl	124e8 <__stack_chk_fail@plt>
   1c954:	andeq	fp, r3, r0, lsl fp
   1c958:	push	{r0, r1, r2, r3}
   1c95c:	mov	r3, #0
   1c960:	push	{r4, lr}
   1c964:	sub	sp, sp, #16
   1c968:	ldr	r4, [pc, #80]	; 1c9c0 <__assert_fail@plt+0x9e78>
   1c96c:	ldr	r0, [sp, #24]
   1c970:	add	ip, sp, #28
   1c974:	ldr	r1, [r4]
   1c978:	str	r0, [sp]
   1c97c:	subs	r0, r0, r3
   1c980:	mov	r2, r3
   1c984:	movne	r0, #1
   1c988:	str	r1, [sp, #12]
   1c98c:	str	ip, [sp, #4]
   1c990:	mov	r1, r3
   1c994:	str	ip, [sp, #8]
   1c998:	bl	1b9c4 <__assert_fail@plt+0x8e7c>
   1c99c:	ldr	r2, [sp, #12]
   1c9a0:	ldr	r3, [r4]
   1c9a4:	cmp	r2, r3
   1c9a8:	bne	1c9bc <__assert_fail@plt+0x9e74>
   1c9ac:	add	sp, sp, #16
   1c9b0:	pop	{r4, lr}
   1c9b4:	add	sp, sp, #16
   1c9b8:	bx	lr
   1c9bc:	bl	124e8 <__stack_chk_fail@plt>
   1c9c0:	andeq	fp, r3, r0, lsl fp
   1c9c4:	mov	r1, #0
   1c9c8:	mov	r0, #1
   1c9cc:	b	1bd74 <__assert_fail@plt+0x922c>
   1c9d0:	push	{r4, r5, r6, r7, r8, lr}
   1c9d4:	subs	r7, r0, #0
   1c9d8:	mov	r4, r1
   1c9dc:	mov	r5, r2
   1c9e0:	beq	1ca60 <__assert_fail@plt+0x9f18>
   1c9e4:	ldrb	r3, [r7]
   1c9e8:	cmp	r3, #0
   1c9ec:	bne	1ca48 <__assert_fail@plt+0x9f00>
   1c9f0:	cmp	r5, #0
   1c9f4:	bne	1ca04 <__assert_fail@plt+0x9ebc>
   1c9f8:	ldr	r0, [pc, #132]	; 1ca84 <__assert_fail@plt+0x9f3c>
   1c9fc:	pop	{r4, r5, r6, r7, r8, lr}
   1ca00:	b	1c958 <__assert_fail@plt+0x9e10>
   1ca04:	ldr	r0, [pc, #124]	; 1ca88 <__assert_fail@plt+0x9f40>
   1ca08:	ldrb	r1, [r4], #1
   1ca0c:	bl	1c958 <__assert_fail@plt+0x9e10>
   1ca10:	cmp	r5, #1
   1ca14:	sub	r5, r5, #2
   1ca18:	beq	1c9f8 <__assert_fail@plt+0x9eb0>
   1ca1c:	add	r5, r5, #1
   1ca20:	ldr	r6, [pc, #100]	; 1ca8c <__assert_fail@plt+0x9f44>
   1ca24:	add	r5, r4, r5
   1ca28:	ldrb	r1, [r4], #1
   1ca2c:	mov	r0, r6
   1ca30:	bl	1c958 <__assert_fail@plt+0x9e10>
   1ca34:	cmp	r4, r5
   1ca38:	bne	1ca28 <__assert_fail@plt+0x9ee0>
   1ca3c:	cmp	r7, #0
   1ca40:	popeq	{r4, r5, r6, r7, r8, pc}
   1ca44:	b	1c9f8 <__assert_fail@plt+0x9eb0>
   1ca48:	mov	r1, r7
   1ca4c:	ldr	r0, [pc, #60]	; 1ca90 <__assert_fail@plt+0x9f48>
   1ca50:	bl	1c890 <__assert_fail@plt+0x9d48>
   1ca54:	cmp	r5, #0
   1ca58:	beq	1c9f8 <__assert_fail@plt+0x9eb0>
   1ca5c:	b	1ca04 <__assert_fail@plt+0x9ebc>
   1ca60:	cmp	r2, #0
   1ca64:	popeq	{r4, r5, r6, r7, r8, pc}
   1ca68:	ldr	r0, [pc, #24]	; 1ca88 <__assert_fail@plt+0x9f40>
   1ca6c:	ldrb	r1, [r4], #1
   1ca70:	bl	1c958 <__assert_fail@plt+0x9e10>
   1ca74:	cmp	r5, #1
   1ca78:	sub	r5, r5, #2
   1ca7c:	bne	1ca1c <__assert_fail@plt+0x9ed4>
   1ca80:	pop	{r4, r5, r6, r7, r8, pc}
   1ca84:	andeq	sl, r2, ip, lsr #4
   1ca88:			; <UNDEFINED> instruction: 0x000292b8
   1ca8c:			; <UNDEFINED> instruction: 0x000292b0
   1ca90:	andeq	r9, r2, ip, lsr #5
   1ca94:	mov	r1, r0
   1ca98:	ldr	r0, [pc]	; 1caa0 <__assert_fail@plt+0x9f58>
   1ca9c:	b	1c890 <__assert_fail@plt+0x9d48>
   1caa0:	andeq	r9, r2, r0, asr #5
   1caa4:	push	{lr}		; (str lr, [sp, #-4]!)
   1caa8:	sub	sp, sp, #12
   1caac:	mov	r3, r1
   1cab0:	str	r2, [sp]
   1cab4:	ldr	r1, [pc, #12]	; 1cac8 <__assert_fail@plt+0x9f80>
   1cab8:	mov	r2, r0
   1cabc:	mov	r0, #6
   1cac0:	bl	1c630 <__assert_fail@plt+0x9ae8>
   1cac4:	bl	12ad0 <abort@plt>
   1cac8:	andeq	r9, r2, r0, ror #5
   1cacc:	push	{lr}		; (str lr, [sp, #-4]!)
   1cad0:	sub	sp, sp, #12
   1cad4:	stm	sp, {r1, r2}
   1cad8:	mov	r2, r0
   1cadc:	ldr	r1, [pc, #8]	; 1caec <__assert_fail@plt+0x9fa4>
   1cae0:	mov	r0, #6
   1cae4:	bl	1c630 <__assert_fail@plt+0x9ae8>
   1cae8:	bl	12ad0 <abort@plt>
   1caec:	andeq	r9, r2, r0, lsl #6
   1caf0:	mvn	r2, #0
   1caf4:	b	12974 <__explicit_bzero_chk@plt>
   1caf8:	push	{r4, r5, r6, lr}
   1cafc:	sub	sp, sp, #216	; 0xd8
   1cb00:	ldr	r4, [pc, #160]	; 1cba8 <__assert_fail@plt+0xa060>
   1cb04:	mov	r5, r0
   1cb08:	mov	r6, r1
   1cb0c:	ldr	r3, [r4]
   1cb10:	str	r3, [sp, #212]	; 0xd4
   1cb14:	bl	1739c <__assert_fail@plt+0x4854>
   1cb18:	cmp	r0, #0
   1cb1c:	moveq	r0, #1
   1cb20:	bne	1cb3c <__assert_fail@plt+0x9ff4>
   1cb24:	ldr	r2, [sp, #212]	; 0xd4
   1cb28:	ldr	r3, [r4]
   1cb2c:	cmp	r2, r3
   1cb30:	bne	1cba4 <__assert_fail@plt+0xa05c>
   1cb34:	add	sp, sp, #216	; 0xd8
   1cb38:	pop	{r4, r5, r6, pc}
   1cb3c:	mov	r1, r5
   1cb40:	mov	r2, sp
   1cb44:	mov	r0, #3
   1cb48:	bl	12a94 <__xstat64@plt>
   1cb4c:	cmp	r0, #0
   1cb50:	beq	1cb5c <__assert_fail@plt+0xa014>
   1cb54:	mov	r0, #0
   1cb58:	b	1cb24 <__assert_fail@plt+0x9fdc>
   1cb5c:	mov	r1, r6
   1cb60:	add	r2, sp, #104	; 0x68
   1cb64:	mov	r0, #3
   1cb68:	bl	12a94 <__xstat64@plt>
   1cb6c:	cmp	r0, #0
   1cb70:	bne	1cb54 <__assert_fail@plt+0xa00c>
   1cb74:	ldrd	r0, [sp]
   1cb78:	ldrd	r2, [sp, #104]	; 0x68
   1cb7c:	cmp	r1, r3
   1cb80:	cmpeq	r0, r2
   1cb84:	bne	1cb54 <__assert_fail@plt+0xa00c>
   1cb88:	ldrd	r0, [sp, #96]	; 0x60
   1cb8c:	ldrd	r2, [sp, #200]	; 0xc8
   1cb90:	cmp	r1, r3
   1cb94:	cmpeq	r0, r2
   1cb98:	moveq	r0, #1
   1cb9c:	movne	r0, #0
   1cba0:	b	1cb24 <__assert_fail@plt+0x9fdc>
   1cba4:	bl	124e8 <__stack_chk_fail@plt>
   1cba8:	andeq	fp, r3, r0, lsl fp
   1cbac:	push	{r4, r5, r6, lr}
   1cbb0:	ldr	r5, [pc, #44]	; 1cbe4 <__assert_fail@plt+0xa09c>
   1cbb4:	ldr	r3, [r5]
   1cbb8:	cmp	r3, #0
   1cbbc:	popeq	{r4, r5, r6, pc}
   1cbc0:	ldr	r4, [r3]
   1cbc4:	ldr	r3, [r3, #4]
   1cbc8:	blx	r3
   1cbcc:	ldr	r0, [r5]
   1cbd0:	bl	12428 <free@plt>
   1cbd4:	subs	r3, r4, #0
   1cbd8:	str	r4, [r5]
   1cbdc:	bne	1cbc0 <__assert_fail@plt+0xa078>
   1cbe0:	pop	{r4, r5, r6, pc}
   1cbe4:	andeq	ip, r3, ip, lsl #7
   1cbe8:	sub	r2, r0, #1
   1cbec:	cmp	r2, #1
   1cbf0:	bhi	1cc34 <__assert_fail@plt+0xa0ec>
   1cbf4:	cmp	r1, #0
   1cbf8:	push	{r4, lr}
   1cbfc:	mov	r4, r1
   1cc00:	beq	1cc20 <__assert_fail@plt+0xa0d8>
   1cc04:	cmp	r0, #1
   1cc08:	movne	r0, #2
   1cc0c:	bl	12740 <_gpgrt_get_std_stream@plt>
   1cc10:	mov	r1, r0
   1cc14:	mov	r0, r4
   1cc18:	pop	{r4, lr}
   1cc1c:	b	12908 <gpgrt_fputs@plt>
   1cc20:	cmp	r0, #1
   1cc24:	movne	r0, #2
   1cc28:	bl	12740 <_gpgrt_get_std_stream@plt>
   1cc2c:	pop	{r4, lr}
   1cc30:	b	1253c <gpgrt_fflush@plt>
   1cc34:	mvn	r0, #0
   1cc38:	bx	lr
   1cc3c:	push	{r4, r5, r6, lr}
   1cc40:	ldr	r6, [pc, #84]	; 1cc9c <__assert_fail@plt+0xa154>
   1cc44:	ldr	r5, [r6]
   1cc48:	cmp	r5, #0
   1cc4c:	beq	1cc7c <__assert_fail@plt+0xa134>
   1cc50:	ldr	r3, [r5, #4]
   1cc54:	cmp	r0, r3
   1cc58:	popeq	{r4, r5, r6, pc}
   1cc5c:	mov	r3, r5
   1cc60:	b	1cc70 <__assert_fail@plt+0xa128>
   1cc64:	ldr	r2, [r3, #4]
   1cc68:	cmp	r2, r0
   1cc6c:	popeq	{r4, r5, r6, pc}
   1cc70:	ldr	r3, [r3]
   1cc74:	cmp	r3, #0
   1cc78:	bne	1cc64 <__assert_fail@plt+0xa11c>
   1cc7c:	mov	r4, r0
   1cc80:	mov	r0, #8
   1cc84:	bl	126a4 <malloc@plt>
   1cc88:	cmp	r0, #0
   1cc8c:	strne	r0, [r6]
   1cc90:	strne	r4, [r0, #4]
   1cc94:	strne	r5, [r0]
   1cc98:	pop	{r4, r5, r6, pc}
   1cc9c:	andeq	ip, r3, ip, lsl #7
   1cca0:	bx	lr
   1cca4:	ldr	r3, [pc, #136]	; 1cd34 <__assert_fail@plt+0xa1ec>
   1cca8:	push	{r4, r5, r6, lr}
   1ccac:	str	r0, [r3, #4]
   1ccb0:	ldr	r0, [pc, #128]	; 1cd38 <__assert_fail@plt+0xa1f0>
   1ccb4:	bl	27c28 <__assert_fail@plt+0x150e0>
   1ccb8:	mov	r0, #0
   1ccbc:	bl	18cb0 <__assert_fail@plt+0x6168>
   1ccc0:	ldr	r0, [pc, #116]	; 1cd3c <__assert_fail@plt+0xa1f4>
   1ccc4:	bl	12608 <gcry_check_version@plt>
   1ccc8:	subs	r4, r0, #0
   1cccc:	beq	1cd08 <__assert_fail@plt+0xa1c0>
   1ccd0:	bl	12a04 <gpg_err_init@plt>
   1ccd4:	ldr	r0, [pc, #100]	; 1cd40 <__assert_fail@plt+0xa1f8>
   1ccd8:	bl	124f4 <gpgrt_set_alloc_func@plt>
   1ccdc:	mov	r0, #0
   1cce0:	bl	12740 <_gpgrt_get_std_stream@plt>
   1cce4:	mov	r0, #1
   1cce8:	bl	12740 <_gpgrt_get_std_stream@plt>
   1ccec:	mov	r0, #2
   1ccf0:	bl	12740 <_gpgrt_get_std_stream@plt>
   1ccf4:	ldr	r0, [pc, #72]	; 1cd44 <__assert_fail@plt+0xa1fc>
   1ccf8:	bl	19650 <__assert_fail@plt+0x6b08>
   1ccfc:	ldr	r0, [pc, #68]	; 1cd48 <__assert_fail@plt+0xa200>
   1cd00:	pop	{r4, r5, r6, lr}
   1cd04:	b	1c47c <__assert_fail@plt+0x9934>
   1cd08:	mov	r2, #5
   1cd0c:	ldr	r1, [pc, #56]	; 1cd4c <__assert_fail@plt+0xa204>
   1cd10:	bl	124dc <dcgettext@plt>
   1cd14:	mov	r5, r0
   1cd18:	mov	r0, r4
   1cd1c:	bl	12608 <gcry_check_version@plt>
   1cd20:	ldr	r2, [pc, #20]	; 1cd3c <__assert_fail@plt+0xa1f4>
   1cd24:	ldr	r1, [pc, #36]	; 1cd50 <__assert_fail@plt+0xa208>
   1cd28:	mov	r3, r0
   1cd2c:	mov	r0, r5
   1cd30:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   1cd34:	andeq	ip, r3, ip, lsl #7
   1cd38:	andeq	ip, r1, ip, lsr #23
   1cd3c:	andeq	r9, r2, r8, lsr #6
   1cd40:	strdeq	r2, [r1], -ip
   1cd44:	andeq	ip, r1, r8, ror #23
   1cd48:	andeq	lr, r1, r0, asr #2
   1cd4c:	andeq	r9, r2, r0, lsr r3
   1cd50:	andeq	r9, r2, r4, asr r3
   1cd54:	andeq	r0, r0, r0
   1cd58:	ldrb	r3, [r0, #1]
   1cd5c:	mov	r2, r0
   1cd60:	cmp	r3, #0
   1cd64:	beq	1ce10 <__assert_fail@plt+0xa2c8>
   1cd68:	ldrb	r1, [r0, #2]
   1cd6c:	cmp	r3, #114	; 0x72
   1cd70:	movne	r0, #0
   1cd74:	moveq	r0, #256	; 0x100
   1cd78:	cmp	r1, #0
   1cd7c:	bxeq	lr
   1cd80:	ldrb	r3, [r2, #3]
   1cd84:	cmp	r1, #119	; 0x77
   1cd88:	orreq	r0, r0, #128	; 0x80
   1cd8c:	cmp	r3, #0
   1cd90:	bxeq	lr
   1cd94:	cmp	r3, #120	; 0x78
   1cd98:	ldrb	r3, [r2, #4]
   1cd9c:	orreq	r0, r0, #64	; 0x40
   1cda0:	cmp	r3, #0
   1cda4:	bxeq	lr
   1cda8:	cmp	r3, #114	; 0x72
   1cdac:	ldrb	r3, [r2, #5]
   1cdb0:	orreq	r0, r0, #32
   1cdb4:	cmp	r3, #0
   1cdb8:	bxeq	lr
   1cdbc:	cmp	r3, #119	; 0x77
   1cdc0:	ldrb	r3, [r2, #6]
   1cdc4:	orreq	r0, r0, #16
   1cdc8:	cmp	r3, #0
   1cdcc:	bxeq	lr
   1cdd0:	cmp	r3, #120	; 0x78
   1cdd4:	ldrb	r3, [r2, #7]
   1cdd8:	orreq	r0, r0, #8
   1cddc:	cmp	r3, #0
   1cde0:	bxeq	lr
   1cde4:	cmp	r3, #114	; 0x72
   1cde8:	ldrb	r3, [r2, #8]
   1cdec:	orreq	r0, r0, #4
   1cdf0:	cmp	r3, #0
   1cdf4:	bxeq	lr
   1cdf8:	cmp	r3, #119	; 0x77
   1cdfc:	ldrb	r3, [r2, #9]
   1ce00:	orreq	r0, r0, #2
   1ce04:	cmp	r3, #120	; 0x78
   1ce08:	orreq	r0, r0, #1
   1ce0c:	bx	lr
   1ce10:	mov	r0, r3
   1ce14:	bx	lr
   1ce18:	bx	lr
   1ce1c:	push	{r4, r5, lr}
   1ce20:	sub	sp, sp, #28
   1ce24:	ldr	r4, [pc, #160]	; 1cecc <__assert_fail@plt+0xa384>
   1ce28:	mov	r1, sp
   1ce2c:	mov	r0, #4
   1ce30:	ldr	r3, [r4]
   1ce34:	str	r3, [sp, #20]
   1ce38:	bl	12524 <getrlimit64@plt>
   1ce3c:	mov	r1, sp
   1ce40:	cmp	r0, #0
   1ce44:	movne	r2, #0
   1ce48:	movne	r3, #0
   1ce4c:	mov	r0, #4
   1ce50:	strdne	r2, [sp, #8]
   1ce54:	mov	r2, #0
   1ce58:	mov	r3, #0
   1ce5c:	strd	r2, [sp]
   1ce60:	bl	123d4 <setrlimit64@plt>
   1ce64:	cmp	r0, #0
   1ce68:	beq	1ce88 <__assert_fail@plt+0xa340>
   1ce6c:	bl	1280c <__errno_location@plt>
   1ce70:	ldr	r3, [r0]
   1ce74:	mov	r5, r0
   1ce78:	sub	r3, r3, #22
   1ce7c:	bics	r3, r3, #16
   1ce80:	moveq	r0, #1
   1ce84:	bne	1cea4 <__assert_fail@plt+0xa35c>
   1ce88:	ldr	r2, [sp, #20]
   1ce8c:	ldr	r3, [r4]
   1ce90:	cmp	r2, r3
   1ce94:	bne	1cea0 <__assert_fail@plt+0xa358>
   1ce98:	add	sp, sp, #28
   1ce9c:	pop	{r4, r5, pc}
   1cea0:	bl	124e8 <__stack_chk_fail@plt>
   1cea4:	ldr	r1, [pc, #36]	; 1ced0 <__assert_fail@plt+0xa388>
   1cea8:	mov	r2, #5
   1ceac:	mov	r0, #0
   1ceb0:	bl	124dc <dcgettext@plt>
   1ceb4:	mov	r4, r0
   1ceb8:	ldr	r0, [r5]
   1cebc:	bl	126c8 <strerror@plt>
   1cec0:	mov	r1, r0
   1cec4:	mov	r0, r4
   1cec8:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   1cecc:	andeq	fp, r3, r0, lsl fp
   1ced0:	andeq	r9, r2, r0, lsr #7
   1ced4:	push	{r4, lr}
   1ced8:	sub	sp, sp, #24
   1cedc:	ldr	r4, [pc, #76]	; 1cf30 <__assert_fail@plt+0xa3e8>
   1cee0:	mov	r1, sp
   1cee4:	mov	r0, #4
   1cee8:	ldr	r3, [r4]
   1ceec:	str	r3, [sp, #20]
   1cef0:	bl	12524 <getrlimit64@plt>
   1cef4:	cmp	r0, #0
   1cef8:	bne	1cf10 <__assert_fail@plt+0xa3c8>
   1cefc:	ldrd	r2, [sp, #8]
   1cf00:	mov	r1, sp
   1cf04:	mov	r0, #4
   1cf08:	strd	r2, [sp]
   1cf0c:	bl	123d4 <setrlimit64@plt>
   1cf10:	ldr	r2, [sp, #20]
   1cf14:	ldr	r3, [r4]
   1cf18:	mov	r0, #1
   1cf1c:	cmp	r2, r3
   1cf20:	bne	1cf2c <__assert_fail@plt+0xa3e4>
   1cf24:	add	sp, sp, #24
   1cf28:	pop	{r4, pc}
   1cf2c:	bl	124e8 <__stack_chk_fail@plt>
   1cf30:	andeq	fp, r3, r0, lsl fp
   1cf34:	ldr	r3, [pc, #8]	; 1cf44 <__assert_fail@plt+0xa3fc>
   1cf38:	mov	r2, #1
   1cf3c:	str	r2, [r3]
   1cf40:	bx	lr
   1cf44:	muleq	r3, r4, r3
   1cf48:	push	{r4, r5, r6, lr}
   1cf4c:	mov	r5, r0
   1cf50:	ldr	r4, [pc, #48]	; 1cf88 <__assert_fail@plt+0xa440>
   1cf54:	ldr	r3, [r4, #4]
   1cf58:	cmp	r3, #0
   1cf5c:	beq	1cf70 <__assert_fail@plt+0xa428>
   1cf60:	mov	r3, #8
   1cf64:	str	r3, [r5]
   1cf68:	ldr	r0, [pc, #28]	; 1cf8c <__assert_fail@plt+0xa444>
   1cf6c:	pop	{r4, r5, r6, pc}
   1cf70:	mov	r1, #8
   1cf74:	add	r0, r4, r1
   1cf78:	bl	12a1c <gcry_create_nonce@plt>
   1cf7c:	mov	r3, #1
   1cf80:	str	r3, [r4, #4]
   1cf84:	b	1cf60 <__assert_fail@plt+0xa418>
   1cf88:	muleq	r3, r4, r3
   1cf8c:	muleq	r3, ip, r3
   1cf90:	push	{r4, lr}
   1cf94:	sub	sp, sp, #8
   1cf98:	ldr	r4, [pc, #48]	; 1cfd0 <__assert_fail@plt+0xa488>
   1cf9c:	mov	r0, sp
   1cfa0:	mov	r1, #4
   1cfa4:	ldr	r3, [r4]
   1cfa8:	str	r3, [sp, #4]
   1cfac:	bl	12a1c <gcry_create_nonce@plt>
   1cfb0:	ldr	r2, [sp, #4]
   1cfb4:	ldr	r3, [r4]
   1cfb8:	ldr	r0, [sp]
   1cfbc:	cmp	r2, r3
   1cfc0:	bne	1cfcc <__assert_fail@plt+0xa484>
   1cfc4:	add	sp, sp, #8
   1cfc8:	pop	{r4, pc}
   1cfcc:	bl	124e8 <__stack_chk_fail@plt>
   1cfd0:	andeq	fp, r3, r0, lsl fp
   1cfd4:	b	124b8 <sleep@plt>
   1cfd8:	push	{r4, r5, r6, lr}
   1cfdc:	sub	sp, sp, #24
   1cfe0:	ldr	r6, [pc, #144]	; 1d078 <__assert_fail@plt+0xa530>
   1cfe4:	cmp	r0, #0
   1cfe8:	ldr	r3, [r6]
   1cfec:	str	r3, [sp, #20]
   1cff0:	beq	1d05c <__assert_fail@plt+0xa514>
   1cff4:	ldr	r3, [pc, #128]	; 1d07c <__assert_fail@plt+0xa534>
   1cff8:	add	r5, sp, #12
   1cffc:	add	r4, sp, #4
   1d000:	umull	r2, r3, r3, r0
   1d004:	lsr	r3, r3, #18
   1d008:	str	r3, [sp, #4]
   1d00c:	rsb	r2, r3, r3, lsl #5
   1d010:	rsb	r2, r2, r2, lsl #6
   1d014:	add	r3, r3, r2, lsl #3
   1d018:	sub	r0, r0, r3, lsl #6
   1d01c:	rsb	r3, r0, r0, lsl #5
   1d020:	add	r0, r0, r3, lsl #2
   1d024:	lsl	r0, r0, #3
   1d028:	str	r0, [sp, #8]
   1d02c:	b	1d048 <__assert_fail@plt+0xa500>
   1d030:	bl	1280c <__errno_location@plt>
   1d034:	ldr	r3, [r0]
   1d038:	cmp	r3, #4
   1d03c:	bne	1d05c <__assert_fail@plt+0xa514>
   1d040:	ldm	r5, {r0, r1}
   1d044:	stm	r4, {r0, r1}
   1d048:	mov	r1, r5
   1d04c:	mov	r0, r4
   1d050:	bl	12440 <nanosleep@plt>
   1d054:	cmp	r0, #0
   1d058:	blt	1d030 <__assert_fail@plt+0xa4e8>
   1d05c:	ldr	r2, [sp, #20]
   1d060:	ldr	r3, [r6]
   1d064:	cmp	r2, r3
   1d068:	bne	1d074 <__assert_fail@plt+0xa52c>
   1d06c:	add	sp, sp, #24
   1d070:	pop	{r4, r5, r6, pc}
   1d074:	bl	124e8 <__stack_chk_fail@plt>
   1d078:	andeq	fp, r3, r0, lsl fp
   1d07c:	tstmi	fp, #2096	; 0x830
   1d080:	bx	lr
   1d084:	bx	lr
   1d088:	ldr	r3, [pc, #184]	; 1d148 <__assert_fail@plt+0xa600>
   1d08c:	ldr	r3, [r3]
   1d090:	cmp	r3, #0
   1d094:	cmpne	r0, #0
   1d098:	beq	1d140 <__assert_fail@plt+0xa5f8>
   1d09c:	ldrb	r3, [r0]
   1d0a0:	cmp	r3, #45	; 0x2d
   1d0a4:	bne	1d140 <__assert_fail@plt+0xa5f8>
   1d0a8:	ldrb	r3, [r0, #1]
   1d0ac:	cmp	r3, #38	; 0x26
   1d0b0:	bne	1d140 <__assert_fail@plt+0xa5f8>
   1d0b4:	ldrb	r3, [r0, #2]
   1d0b8:	add	r0, r0, #2
   1d0bc:	sub	r1, r3, #48	; 0x30
   1d0c0:	cmp	r1, #9
   1d0c4:	bhi	1d118 <__assert_fail@plt+0xa5d0>
   1d0c8:	mov	ip, r0
   1d0cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1d0d0:	ldrb	r3, [ip, #1]!
   1d0d4:	sub	lr, r3, #48	; 0x30
   1d0d8:	cmp	lr, #9
   1d0dc:	bls	1d0d0 <__assert_fail@plt+0xa588>
   1d0e0:	cmp	r3, #0
   1d0e4:	bne	1d110 <__assert_fail@plt+0xa5c8>
   1d0e8:	cmp	r2, #0
   1d0ec:	beq	1d100 <__assert_fail@plt+0xa5b8>
   1d0f0:	mov	r1, r3
   1d0f4:	mov	r2, #10
   1d0f8:	pop	{lr}		; (ldr lr, [sp], #4)
   1d0fc:	b	123a4 <strtol@plt>
   1d100:	mov	r1, r2
   1d104:	pop	{lr}		; (ldr lr, [sp], #4)
   1d108:	mov	r2, #10
   1d10c:	b	123a4 <strtol@plt>
   1d110:	mvn	r0, #0
   1d114:	pop	{pc}		; (ldr pc, [sp], #4)
   1d118:	cmp	r3, #0
   1d11c:	bne	1d140 <__assert_fail@plt+0xa5f8>
   1d120:	cmp	r2, #0
   1d124:	beq	1d134 <__assert_fail@plt+0xa5ec>
   1d128:	mov	r1, r3
   1d12c:	mov	r2, #10
   1d130:	b	123a4 <strtol@plt>
   1d134:	mov	r1, r2
   1d138:	mov	r2, #10
   1d13c:	b	123a4 <strtol@plt>
   1d140:	mvn	r0, #0
   1d144:	bx	lr
   1d148:	muleq	r3, r4, r3
   1d14c:	b	1256c <tmpfile64@plt>
   1d150:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d154:	mov	r1, #1
   1d158:	mov	r8, r0
   1d15c:	mov	r0, #0
   1d160:	bl	1292c <fcntl64@plt>
   1d164:	cmn	r0, #1
   1d168:	beq	1d2ac <__assert_fail@plt+0xa764>
   1d16c:	mov	r6, #0
   1d170:	mov	r1, #1
   1d174:	mov	r0, r1
   1d178:	bl	1292c <fcntl64@plt>
   1d17c:	cmn	r0, #1
   1d180:	beq	1d2d8 <__assert_fail@plt+0xa790>
   1d184:	mov	r4, #0
   1d188:	mov	r1, #1
   1d18c:	mov	r0, #2
   1d190:	bl	1292c <fcntl64@plt>
   1d194:	cmn	r0, #1
   1d198:	beq	1d208 <__assert_fail@plt+0xa6c0>
   1d19c:	ldr	r3, [pc, #392]	; 1d32c <__assert_fail@plt+0xa7e4>
   1d1a0:	cmp	r4, #2
   1d1a4:	cmpne	r6, #2
   1d1a8:	moveq	r7, #1
   1d1ac:	ldr	r5, [r3]
   1d1b0:	movne	r7, #0
   1d1b4:	mov	r9, #0
   1d1b8:	cmp	r5, #0
   1d1bc:	beq	1d1fc <__assert_fail@plt+0xa6b4>
   1d1c0:	cmp	r6, #1
   1d1c4:	beq	1d254 <__assert_fail@plt+0xa70c>
   1d1c8:	cmp	r4, #1
   1d1cc:	beq	1d270 <__assert_fail@plt+0xa728>
   1d1d0:	cmp	r9, #1
   1d1d4:	beq	1d28c <__assert_fail@plt+0xa744>
   1d1d8:	cmp	r7, #0
   1d1dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d1e0:	mov	r3, r8
   1d1e4:	mov	r0, r5
   1d1e8:	ldr	r2, [pc, #320]	; 1d330 <__assert_fail@plt+0xa7e8>
   1d1ec:	mov	r1, #1
   1d1f0:	bl	128d8 <__fprintf_chk@plt>
   1d1f4:	mov	r0, #3
   1d1f8:	bl	12764 <exit@plt>
   1d1fc:	cmp	r7, #0
   1d200:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d204:	b	1d1f4 <__assert_fail@plt+0xa6ac>
   1d208:	bl	1280c <__errno_location@plt>
   1d20c:	ldr	r3, [r0]
   1d210:	cmp	r3, #9
   1d214:	bne	1d19c <__assert_fail@plt+0xa654>
   1d218:	mov	r1, #1
   1d21c:	ldr	r0, [pc, #272]	; 1d334 <__assert_fail@plt+0xa7ec>
   1d220:	bl	12668 <open64@plt>
   1d224:	cmp	r0, #2
   1d228:	beq	1d304 <__assert_fail@plt+0xa7bc>
   1d22c:	cmp	r4, #0
   1d230:	bne	1d1f4 <__assert_fail@plt+0xa6ac>
   1d234:	ldr	r3, [pc, #252]	; 1d338 <__assert_fail@plt+0xa7f0>
   1d238:	ldr	r5, [r3]
   1d23c:	cmp	r5, #0
   1d240:	beq	1d1f4 <__assert_fail@plt+0xa6ac>
   1d244:	cmp	r6, #1
   1d248:	bne	1d1e0 <__assert_fail@plt+0xa698>
   1d24c:	mov	r7, r6
   1d250:	mov	r9, #2
   1d254:	mov	r3, r8
   1d258:	ldr	r2, [pc, #220]	; 1d33c <__assert_fail@plt+0xa7f4>
   1d25c:	mov	r1, #1
   1d260:	mov	r0, r5
   1d264:	bl	128d8 <__fprintf_chk@plt>
   1d268:	cmp	r4, #1
   1d26c:	bne	1d1d0 <__assert_fail@plt+0xa688>
   1d270:	mov	r1, r4
   1d274:	mov	r3, r8
   1d278:	ldr	r2, [pc, #192]	; 1d340 <__assert_fail@plt+0xa7f8>
   1d27c:	mov	r0, r5
   1d280:	bl	128d8 <__fprintf_chk@plt>
   1d284:	cmp	r9, #1
   1d288:	bne	1d1d8 <__assert_fail@plt+0xa690>
   1d28c:	mov	r1, r9
   1d290:	mov	r3, r8
   1d294:	ldr	r2, [pc, #168]	; 1d344 <__assert_fail@plt+0xa7fc>
   1d298:	mov	r0, r5
   1d29c:	bl	128d8 <__fprintf_chk@plt>
   1d2a0:	cmp	r7, #0
   1d2a4:	bne	1d1e0 <__assert_fail@plt+0xa698>
   1d2a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d2ac:	bl	1280c <__errno_location@plt>
   1d2b0:	ldr	r3, [r0]
   1d2b4:	cmp	r3, #9
   1d2b8:	bne	1d16c <__assert_fail@plt+0xa624>
   1d2bc:	mov	r1, #0
   1d2c0:	ldr	r0, [pc, #108]	; 1d334 <__assert_fail@plt+0xa7ec>
   1d2c4:	bl	12668 <open64@plt>
   1d2c8:	cmp	r0, #0
   1d2cc:	moveq	r6, #1
   1d2d0:	movne	r6, #2
   1d2d4:	b	1d170 <__assert_fail@plt+0xa628>
   1d2d8:	bl	1280c <__errno_location@plt>
   1d2dc:	ldr	r3, [r0]
   1d2e0:	cmp	r3, #9
   1d2e4:	bne	1d184 <__assert_fail@plt+0xa63c>
   1d2e8:	mov	r1, #1
   1d2ec:	ldr	r0, [pc, #64]	; 1d334 <__assert_fail@plt+0xa7ec>
   1d2f0:	bl	12668 <open64@plt>
   1d2f4:	cmp	r0, #1
   1d2f8:	mov	r4, r0
   1d2fc:	movne	r4, #2
   1d300:	b	1d188 <__assert_fail@plt+0xa640>
   1d304:	cmp	r4, #2
   1d308:	cmpne	r6, #2
   1d30c:	moveq	r7, #1
   1d310:	movne	r7, #0
   1d314:	cmp	r4, #0
   1d318:	bne	1d1fc <__assert_fail@plt+0xa6b4>
   1d31c:	ldr	r3, [pc, #20]	; 1d338 <__assert_fail@plt+0xa7f0>
   1d320:	mov	r9, #1
   1d324:	ldr	r5, [r3]
   1d328:	b	1d1b8 <__assert_fail@plt+0xa670>
   1d32c:	andeq	ip, r3, r0, lsl #5
   1d330:	andeq	r9, r2, r4, asr #8
   1d334:	andeq	r9, r2, r0, asr #7
   1d338:	andeq	ip, r3, r4, lsl #5
   1d33c:	andeq	r9, r2, ip, asr #7
   1d340:	strdeq	r9, [r2], -r4
   1d344:	andeq	r9, r2, ip, lsl r4
   1d348:	subs	r2, r0, #0
   1d34c:	bxne	lr
   1d350:	ldr	r1, [pc, #4]	; 1d35c <__assert_fail@plt+0xa814>
   1d354:	ldr	r0, [pc, #4]	; 1d360 <__assert_fail@plt+0xa818>
   1d358:	b	1c6e0 <__assert_fail@plt+0x9b98>
   1d35c:	andeq	r9, r2, r4, lsl #9
   1d360:	andeq	r9, r2, r8, lsr #9
   1d364:	b	12a10 <remove@plt>
   1d368:	push	{r4, r5, r6, r7, r8, lr}
   1d36c:	subs	r8, r2, #0
   1d370:	mov	r6, r0
   1d374:	mov	r7, r1
   1d378:	beq	1d42c <__assert_fail@plt+0xa8e4>
   1d37c:	ldr	r3, [r8]
   1d380:	cmp	r3, #0
   1d384:	bne	1d424 <__assert_fail@plt+0xa8dc>
   1d388:	mov	r1, r7
   1d38c:	mov	r0, r6
   1d390:	bl	1271c <rename@plt>
   1d394:	cmp	r0, #0
   1d398:	bne	1d3a8 <__assert_fail@plt+0xa860>
   1d39c:	mov	r4, #0
   1d3a0:	mov	r0, r4
   1d3a4:	pop	{r4, r5, r6, r7, r8, pc}
   1d3a8:	ldr	r3, [pc, #184]	; 1d468 <__assert_fail@plt+0xa920>
   1d3ac:	ldr	r4, [r3]
   1d3b0:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d3b4:	cmp	r0, #0
   1d3b8:	beq	1d39c <__assert_fail@plt+0xa854>
   1d3bc:	ldr	r3, [r8]
   1d3c0:	lsl	r4, r4, #24
   1d3c4:	and	r4, r4, #2130706432	; 0x7f000000
   1d3c8:	uxth	r0, r0
   1d3cc:	cmp	r3, #0
   1d3d0:	orr	r4, r4, r0
   1d3d4:	beq	1d45c <__assert_fail@plt+0xa914>
   1d3d8:	cmp	r4, #0
   1d3dc:	beq	1d39c <__assert_fail@plt+0xa854>
   1d3e0:	bl	24e78 <__assert_fail@plt+0x12330>
   1d3e4:	mov	r3, #0
   1d3e8:	str	r3, [r8]
   1d3ec:	mov	r2, #5
   1d3f0:	ldr	r1, [pc, #116]	; 1d46c <__assert_fail@plt+0xa924>
   1d3f4:	mov	r0, #0
   1d3f8:	bl	124dc <dcgettext@plt>
   1d3fc:	mov	r5, r0
   1d400:	mov	r0, r4
   1d404:	bl	129d4 <gpg_strerror@plt>
   1d408:	mov	r2, r7
   1d40c:	mov	r1, r6
   1d410:	mov	r3, r0
   1d414:	mov	r0, r5
   1d418:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1d41c:	mov	r0, r4
   1d420:	pop	{r4, r5, r6, r7, r8, pc}
   1d424:	bl	24e04 <__assert_fail@plt+0x122bc>
   1d428:	b	1d388 <__assert_fail@plt+0xa840>
   1d42c:	bl	1271c <rename@plt>
   1d430:	cmp	r0, #0
   1d434:	beq	1d39c <__assert_fail@plt+0xa854>
   1d438:	ldr	r3, [pc, #40]	; 1d468 <__assert_fail@plt+0xa920>
   1d43c:	ldr	r4, [r3]
   1d440:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d444:	cmp	r0, #0
   1d448:	beq	1d39c <__assert_fail@plt+0xa854>
   1d44c:	lsl	r4, r4, #24
   1d450:	and	r4, r4, #2130706432	; 0x7f000000
   1d454:	uxth	r0, r0
   1d458:	orr	r4, r4, r0
   1d45c:	cmp	r4, #0
   1d460:	bne	1d3ec <__assert_fail@plt+0xa8a4>
   1d464:	b	1d39c <__assert_fail@plt+0xa854>
   1d468:	muleq	r3, r0, r3
   1d46c:	andeq	r9, r2, r8, asr #9
   1d470:	subs	r3, r1, #0
   1d474:	push	{r4, lr}
   1d478:	moveq	r1, r3
   1d47c:	mov	r4, r0
   1d480:	beq	1d49c <__assert_fail@plt+0xa954>
   1d484:	ldrb	r1, [r3]
   1d488:	cmp	r1, #0
   1d48c:	beq	1d49c <__assert_fail@plt+0xa954>
   1d490:	mov	r0, r3
   1d494:	bl	1cd58 <__assert_fail@plt+0xa210>
   1d498:	mov	r1, r0
   1d49c:	mov	r0, r4
   1d4a0:	pop	{r4, lr}
   1d4a4:	b	12848 <mkdir@plt>
   1d4a8:	b	12578 <chdir@plt>
   1d4ac:	subs	r3, r1, #0
   1d4b0:	push	{r4, lr}
   1d4b4:	moveq	r1, r3
   1d4b8:	mov	r4, r0
   1d4bc:	beq	1d4d8 <__assert_fail@plt+0xa990>
   1d4c0:	ldrb	r1, [r3]
   1d4c4:	cmp	r1, #0
   1d4c8:	beq	1d4d8 <__assert_fail@plt+0xa990>
   1d4cc:	mov	r0, r3
   1d4d0:	bl	1cd58 <__assert_fail@plt+0xa210>
   1d4d4:	mov	r1, r0
   1d4d8:	mov	r0, r4
   1d4dc:	pop	{r4, lr}
   1d4e0:	b	12a88 <chmod@plt>
   1d4e4:	ldr	r3, [pc, #476]	; 1d6c8 <__assert_fail@plt+0xab80>
   1d4e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4ec:	sub	sp, sp, #28
   1d4f0:	ldr	r3, [r3]
   1d4f4:	mov	r9, r0
   1d4f8:	str	r3, [sp, #20]
   1d4fc:	bl	12788 <strlen@plt>
   1d500:	cmp	r0, #5
   1d504:	bls	1d69c <__assert_fail@plt+0xab54>
   1d508:	sub	r0, r0, #6
   1d50c:	add	r6, r9, r0
   1d510:	mov	r0, r6
   1d514:	ldr	r1, [pc, #432]	; 1d6cc <__assert_fail@plt+0xab84>
   1d518:	bl	1238c <strcmp@plt>
   1d51c:	cmp	r0, #0
   1d520:	bne	1d69c <__assert_fail@plt+0xab54>
   1d524:	bl	1280c <__errno_location@plt>
   1d528:	mov	r1, #8
   1d52c:	ldr	r8, [pc, #412]	; 1d6d0 <__assert_fail@plt+0xab88>
   1d530:	ldr	r7, [pc, #412]	; 1d6d4 <__assert_fail@plt+0xab8c>
   1d534:	ldr	fp, [pc, #412]	; 1d6d8 <__assert_fail@plt+0xab90>
   1d538:	mov	sl, r0
   1d53c:	add	r0, sp, r1
   1d540:	ldr	r3, [sl]
   1d544:	str	r3, [sp, #4]
   1d548:	bl	12a1c <gcry_create_nonce@plt>
   1d54c:	ldrd	r4, [sp, #8]
   1d550:	b	1d57c <__assert_fail@plt+0xaa34>
   1d554:	ldr	r0, [sl]
   1d558:	cmp	r0, #17
   1d55c:	bne	1d6ac <__assert_fail@plt+0xab64>
   1d560:	ldrd	r4, [sp, #8]
   1d564:	ldr	r3, [pc, #368]	; 1d6dc <__assert_fail@plt+0xab94>
   1d568:	adds	r4, r4, r3
   1d56c:	adc	r5, r5, #0
   1d570:	subs	r8, r8, #1
   1d574:	strd	r4, [sp, #8]
   1d578:	beq	1d6a0 <__assert_fail@plt+0xab58>
   1d57c:	mov	r2, #62	; 0x3e
   1d580:	mov	r3, #0
   1d584:	mov	r0, r4
   1d588:	mov	r1, r5
   1d58c:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d590:	mov	r3, #0
   1d594:	mov	r0, r4
   1d598:	mov	r1, r5
   1d59c:	ldrb	ip, [r7, r2]
   1d5a0:	mov	r2, #62	; 0x3e
   1d5a4:	strb	ip, [r6]
   1d5a8:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d5ac:	mov	r2, #62	; 0x3e
   1d5b0:	mov	r3, #0
   1d5b4:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d5b8:	mov	r3, #0
   1d5bc:	mov	r0, r4
   1d5c0:	mov	r1, r5
   1d5c4:	ldrb	ip, [r7, r2]
   1d5c8:	ldr	r2, [pc, #272]	; 1d6e0 <__assert_fail@plt+0xab98>
   1d5cc:	strb	ip, [r6, #1]
   1d5d0:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d5d4:	mov	r2, #62	; 0x3e
   1d5d8:	mov	r3, #0
   1d5dc:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d5e0:	mov	r3, #0
   1d5e4:	mov	r0, r4
   1d5e8:	mov	r1, r5
   1d5ec:	ldrb	ip, [r7, r2]
   1d5f0:	ldr	r2, [pc, #216]	; 1d6d0 <__assert_fail@plt+0xab88>
   1d5f4:	strb	ip, [r6, #2]
   1d5f8:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d5fc:	mov	r2, #62	; 0x3e
   1d600:	mov	r3, #0
   1d604:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d608:	mov	r0, r4
   1d60c:	mov	r1, r5
   1d610:	ldrb	ip, [r7, r2]
   1d614:	add	r3, pc, #156	; 0x9c
   1d618:	ldrd	r2, [r3]
   1d61c:	strb	ip, [r6, #3]
   1d620:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d624:	mov	r2, #62	; 0x3e
   1d628:	mov	r3, #0
   1d62c:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d630:	mov	r0, r4
   1d634:	mov	r1, r5
   1d638:	ldrb	ip, [r7, r2]
   1d63c:	add	r3, pc, #124	; 0x7c
   1d640:	ldrd	r2, [r3]
   1d644:	strb	ip, [r6, #4]
   1d648:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d64c:	mov	r2, #62	; 0x3e
   1d650:	mov	r3, #0
   1d654:	bl	27a50 <__assert_fail@plt+0x14f08>
   1d658:	mov	r1, fp
   1d65c:	mov	r0, r9
   1d660:	ldrb	r3, [r7, r2]
   1d664:	strb	r3, [r6, #5]
   1d668:	bl	1d470 <__assert_fail@plt+0xa928>
   1d66c:	cmp	r0, #0
   1d670:	bne	1d554 <__assert_fail@plt+0xaa0c>
   1d674:	ldr	r0, [sp, #4]
   1d678:	bl	129a4 <gpg_err_set_errno@plt>
   1d67c:	mov	r0, r9
   1d680:	ldr	r3, [pc, #64]	; 1d6c8 <__assert_fail@plt+0xab80>
   1d684:	ldr	r2, [sp, #20]
   1d688:	ldr	r3, [r3]
   1d68c:	cmp	r2, r3
   1d690:	bne	1d6b4 <__assert_fail@plt+0xab6c>
   1d694:	add	sp, sp, #28
   1d698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d69c:	mov	r0, #22
   1d6a0:	bl	129a4 <gpg_err_set_errno@plt>
   1d6a4:	mov	r0, #0
   1d6a8:	b	1d680 <__assert_fail@plt+0xab38>
   1d6ac:	mov	r0, #0
   1d6b0:	b	1d680 <__assert_fail@plt+0xab38>
   1d6b4:	bl	124e8 <__stack_chk_fail@plt>
   1d6b8:	rsceq	r7, r1, r0, lsl r8
   1d6bc:	andeq	r0, r0, r0
   1d6c0:	ldrcc	r1, [fp], r0, ror #7
   1d6c4:	andeq	r0, r0, r0
   1d6c8:	andeq	fp, r3, r0, lsl fp
   1d6cc:	andeq	r9, r2, ip, ror #9
   1d6d0:	strdeq	sl, [r3], -r8
   1d6d4:	andeq	r9, r2, r0, ror #6
   1d6d8:	strdeq	r9, [r2], -r4
   1d6dc:	andeq	r1, r0, r1, ror #28
   1d6e0:	andeq	r0, r0, r4, lsl #30
   1d6e4:	b	127b8 <setenv@plt>
   1d6e8:	b	12aac <unsetenv@plt>
   1d6ec:	push	{r4, r5, r6, lr}
   1d6f0:	mov	r4, #100	; 0x64
   1d6f4:	b	1d720 <__assert_fail@plt+0xabd8>
   1d6f8:	bl	1274c <getcwd@plt>
   1d6fc:	mov	r3, r0
   1d700:	cmp	r5, r3
   1d704:	mov	r0, r5
   1d708:	beq	1d73c <__assert_fail@plt+0xabf4>
   1d70c:	bl	124a0 <gcry_free@plt>
   1d710:	bl	1280c <__errno_location@plt>
   1d714:	ldr	r3, [r0]
   1d718:	cmp	r3, #34	; 0x22
   1d71c:	bne	1d738 <__assert_fail@plt+0xabf0>
   1d720:	add	r0, r4, #1
   1d724:	bl	12338 <gcry_malloc@plt>
   1d728:	mov	r1, r4
   1d72c:	lsl	r4, r4, #1
   1d730:	subs	r5, r0, #0
   1d734:	bne	1d6f8 <__assert_fail@plt+0xabb0>
   1d738:	mov	r3, #0
   1d73c:	mov	r0, r3
   1d740:	pop	{r4, r5, r6, pc}
   1d744:	push	{r4, r5, r6, lr}
   1d748:	mvn	r3, #0
   1d74c:	subs	r4, r1, #0
   1d750:	str	r3, [r0]
   1d754:	beq	1d790 <__assert_fail@plt+0xac48>
   1d758:	mov	r5, r0
   1d75c:	bl	12794 <inotify_init@plt>
   1d760:	cmn	r0, #1
   1d764:	mov	r6, r0
   1d768:	beq	1d7d8 <__assert_fail@plt+0xac90>
   1d76c:	mov	r1, r4
   1d770:	mov	r2, #1024	; 0x400
   1d774:	bl	12800 <inotify_add_watch@plt>
   1d778:	cmn	r0, #1
   1d77c:	movne	r4, #0
   1d780:	strne	r6, [r5]
   1d784:	beq	1d7ac <__assert_fail@plt+0xac64>
   1d788:	mov	r0, r4
   1d78c:	pop	{r4, r5, r6, pc}
   1d790:	ldr	r3, [pc, #100]	; 1d7fc <__assert_fail@plt+0xacb4>
   1d794:	ldr	r4, [r3]
   1d798:	lsl	r4, r4, #24
   1d79c:	and	r4, r4, #2130706432	; 0x7f000000
   1d7a0:	orr	r4, r4, #55	; 0x37
   1d7a4:	mov	r0, r4
   1d7a8:	pop	{r4, r5, r6, pc}
   1d7ac:	ldr	r3, [pc, #72]	; 1d7fc <__assert_fail@plt+0xacb4>
   1d7b0:	ldr	r5, [r3]
   1d7b4:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d7b8:	subs	r4, r0, #0
   1d7bc:	lslne	r5, r5, #24
   1d7c0:	andne	r5, r5, #2130706432	; 0x7f000000
   1d7c4:	uxthne	r4, r4
   1d7c8:	mov	r0, r6
   1d7cc:	orrne	r4, r5, r4
   1d7d0:	bl	12af4 <close@plt>
   1d7d4:	b	1d788 <__assert_fail@plt+0xac40>
   1d7d8:	ldr	r3, [pc, #28]	; 1d7fc <__assert_fail@plt+0xacb4>
   1d7dc:	ldr	r5, [r3]
   1d7e0:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d7e4:	subs	r4, r0, #0
   1d7e8:	lslne	r5, r5, #24
   1d7ec:	andne	r5, r5, #2130706432	; 0x7f000000
   1d7f0:	uxthne	r4, r4
   1d7f4:	orrne	r4, r5, r4
   1d7f8:	b	1d788 <__assert_fail@plt+0xac40>
   1d7fc:	muleq	r3, r0, r3
   1d800:	mvn	r3, #0
   1d804:	cmp	r1, #0
   1d808:	push	{r4, r5, r6, r7, r8, lr}
   1d80c:	str	r3, [r0]
   1d810:	beq	1d880 <__assert_fail@plt+0xad38>
   1d814:	mov	r5, r0
   1d818:	mov	r0, r1
   1d81c:	bl	12b0c <gcry_strdup@plt>
   1d820:	subs	r6, r0, #0
   1d824:	beq	1d8d4 <__assert_fail@plt+0xad8c>
   1d828:	bl	12794 <inotify_init@plt>
   1d82c:	cmn	r0, #1
   1d830:	mov	r7, r0
   1d834:	beq	1d8f8 <__assert_fail@plt+0xadb0>
   1d838:	mov	r1, #47	; 0x2f
   1d83c:	mov	r0, r6
   1d840:	bl	12980 <strrchr@plt>
   1d844:	ldr	r2, [pc, #208]	; 1d91c <__assert_fail@plt+0xadd4>
   1d848:	mov	r1, r6
   1d84c:	cmp	r0, #0
   1d850:	movne	r3, #0
   1d854:	strbne	r3, [r0]
   1d858:	mov	r0, r7
   1d85c:	bl	12800 <inotify_add_watch@plt>
   1d860:	cmn	r0, #1
   1d864:	beq	1d89c <__assert_fail@plt+0xad54>
   1d868:	mov	r4, #0
   1d86c:	mov	r0, r6
   1d870:	bl	124a0 <gcry_free@plt>
   1d874:	str	r7, [r5]
   1d878:	mov	r0, r4
   1d87c:	pop	{r4, r5, r6, r7, r8, pc}
   1d880:	ldr	r3, [pc, #152]	; 1d920 <__assert_fail@plt+0xadd8>
   1d884:	ldr	r4, [r3]
   1d888:	lsl	r4, r4, #24
   1d88c:	and	r4, r4, #2130706432	; 0x7f000000
   1d890:	orr	r4, r4, #55	; 0x37
   1d894:	mov	r0, r4
   1d898:	pop	{r4, r5, r6, r7, r8, pc}
   1d89c:	ldr	r3, [pc, #124]	; 1d920 <__assert_fail@plt+0xadd8>
   1d8a0:	ldr	r5, [r3]
   1d8a4:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d8a8:	subs	r4, r0, #0
   1d8ac:	lslne	r5, r5, #24
   1d8b0:	andne	r5, r5, #2130706432	; 0x7f000000
   1d8b4:	uxthne	r4, r4
   1d8b8:	mov	r0, r7
   1d8bc:	orrne	r4, r5, r4
   1d8c0:	bl	12af4 <close@plt>
   1d8c4:	mov	r0, r6
   1d8c8:	bl	124a0 <gcry_free@plt>
   1d8cc:	mov	r0, r4
   1d8d0:	pop	{r4, r5, r6, r7, r8, pc}
   1d8d4:	ldr	r3, [pc, #68]	; 1d920 <__assert_fail@plt+0xadd8>
   1d8d8:	ldr	r5, [r3]
   1d8dc:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d8e0:	subs	r4, r0, #0
   1d8e4:	lslne	r5, r5, #24
   1d8e8:	andne	r5, r5, #2130706432	; 0x7f000000
   1d8ec:	uxthne	r4, r4
   1d8f0:	orrne	r4, r5, r4
   1d8f4:	b	1d878 <__assert_fail@plt+0xad30>
   1d8f8:	ldr	r3, [pc, #32]	; 1d920 <__assert_fail@plt+0xadd8>
   1d8fc:	ldr	r5, [r3]
   1d900:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d904:	subs	r4, r0, #0
   1d908:	lslne	r5, r5, #24
   1d90c:	andne	r5, r5, #2130706432	; 0x7f000000
   1d910:	uxthne	r4, r4
   1d914:	orrne	r4, r5, r4
   1d918:	b	1d8c4 <__assert_fail@plt+0xad7c>
   1d91c:	streq	r0, [r0], #-1536	; 0xfffffa00
   1d920:	muleq	r3, r0, r3
   1d924:	mov	r0, #0
   1d928:	bx	lr
   1d92c:	push	{r4, r5, r6, r7, r8, lr}
   1d930:	sub	sp, sp, #120	; 0x78
   1d934:	ldr	r5, [pc, #316]	; 1da78 <__assert_fail@plt+0xaf30>
   1d938:	mov	r4, #110	; 0x6e
   1d93c:	mov	r2, sp
   1d940:	ldr	r3, [r5]
   1d944:	add	r1, sp, #4
   1d948:	str	r3, [sp, #116]	; 0x74
   1d94c:	str	r4, [sp]
   1d950:	mov	r8, r0
   1d954:	bl	129f8 <getsockname@plt>
   1d958:	subs	r7, r0, #0
   1d95c:	bne	1d9e8 <__assert_fail@plt+0xaea0>
   1d960:	ldrh	r3, [sp, #4]
   1d964:	cmp	r3, #1
   1d968:	bne	1d9c0 <__assert_fail@plt+0xae78>
   1d96c:	ldr	r3, [sp]
   1d970:	cmp	r3, #2
   1d974:	bls	1d9d4 <__assert_fail@plt+0xae8c>
   1d978:	cmp	r3, #110	; 0x6e
   1d97c:	bhi	1da24 <__assert_fail@plt+0xaedc>
   1d980:	sub	r0, r3, #1
   1d984:	sub	r4, r3, #2
   1d988:	bl	12338 <gcry_malloc@plt>
   1d98c:	subs	r6, r0, #0
   1d990:	beq	1da3c <__assert_fail@plt+0xaef4>
   1d994:	mov	r2, r4
   1d998:	add	r1, sp, #6
   1d99c:	bl	1247c <memcpy@plt>
   1d9a0:	strb	r7, [r6, r4]
   1d9a4:	ldr	r2, [sp, #116]	; 0x74
   1d9a8:	ldr	r3, [r5]
   1d9ac:	mov	r0, r6
   1d9b0:	cmp	r2, r3
   1d9b4:	bne	1da74 <__assert_fail@plt+0xaf2c>
   1d9b8:	add	sp, sp, #120	; 0x78
   1d9bc:	pop	{r4, r5, r6, r7, r8, pc}
   1d9c0:	mov	r1, r8
   1d9c4:	ldr	r0, [pc, #176]	; 1da7c <__assert_fail@plt+0xaf34>
   1d9c8:	mov	r6, r7
   1d9cc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1d9d0:	b	1d9a4 <__assert_fail@plt+0xae5c>
   1d9d4:	mov	r1, r8
   1d9d8:	ldr	r0, [pc, #160]	; 1da80 <__assert_fail@plt+0xaf38>
   1d9dc:	mov	r6, r7
   1d9e0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1d9e4:	b	1d9a4 <__assert_fail@plt+0xae5c>
   1d9e8:	ldr	r3, [pc, #148]	; 1da84 <__assert_fail@plt+0xaf3c>
   1d9ec:	mov	r6, #0
   1d9f0:	ldr	r4, [r3]
   1d9f4:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1d9f8:	cmp	r0, #0
   1d9fc:	lslne	r4, r4, #24
   1da00:	andne	r4, r4, #2130706432	; 0x7f000000
   1da04:	uxthne	r0, r0
   1da08:	orrne	r0, r4, r0
   1da0c:	bl	129d4 <gpg_strerror@plt>
   1da10:	mov	r1, r8
   1da14:	mov	r2, r0
   1da18:	ldr	r0, [pc, #104]	; 1da88 <__assert_fail@plt+0xaf40>
   1da1c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1da20:	b	1d9a4 <__assert_fail@plt+0xae5c>
   1da24:	mov	r2, r4
   1da28:	mov	r1, r8
   1da2c:	ldr	r0, [pc, #88]	; 1da8c <__assert_fail@plt+0xaf44>
   1da30:	mov	r6, r7
   1da34:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1da38:	b	1d9a4 <__assert_fail@plt+0xae5c>
   1da3c:	ldr	r3, [pc, #64]	; 1da84 <__assert_fail@plt+0xaf3c>
   1da40:	ldr	r4, [r3]
   1da44:	bl	127c4 <gpg_err_code_from_syserror@plt>
   1da48:	cmp	r0, #0
   1da4c:	lslne	r4, r4, #24
   1da50:	andne	r4, r4, #2130706432	; 0x7f000000
   1da54:	uxthne	r0, r0
   1da58:	orrne	r0, r4, r0
   1da5c:	bl	129d4 <gpg_strerror@plt>
   1da60:	mov	r1, r8
   1da64:	mov	r2, r0
   1da68:	ldr	r0, [pc, #32]	; 1da90 <__assert_fail@plt+0xaf48>
   1da6c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   1da70:	b	1d9a4 <__assert_fail@plt+0xae5c>
   1da74:	bl	124e8 <__stack_chk_fail@plt>
   1da78:	andeq	fp, r3, r0, lsl fp
   1da7c:	andeq	r9, r2, ip, lsl r5
   1da80:	andeq	r9, r2, ip, asr #10
   1da84:	muleq	r3, r0, r3
   1da88:	strdeq	r9, [r2], -ip
   1da8c:	andeq	r9, r2, ip, ror r5
   1da90:	andeq	r9, r2, ip, asr #11
   1da94:	push	{r4, lr}
   1da98:	bl	12554 <dup@plt>
   1da9c:	cmp	r0, #0
   1daa0:	blt	1dab0 <__assert_fail@plt+0xaf68>
   1daa4:	bl	12af4 <close@plt>
   1daa8:	mov	r0, #1
   1daac:	pop	{r4, pc}
   1dab0:	mov	r0, #0
   1dab4:	pop	{r4, pc}
   1dab8:	ldr	r0, [pc]	; 1dac0 <__assert_fail@plt+0xaf78>
   1dabc:	bx	lr
   1dac0:	andeq	r9, r2, r4, lsr r6
   1dac4:	push	{r4, r5, r6, lr}
   1dac8:	mov	r1, #0
   1dacc:	bl	172ec <__assert_fail@plt+0x47a4>
   1dad0:	mov	r1, #0
   1dad4:	mov	r4, r0
   1dad8:	ldr	r0, [pc, #48]	; 1db10 <__assert_fail@plt+0xafc8>
   1dadc:	bl	172ec <__assert_fail@plt+0x47a4>
   1dae0:	mov	r1, r0
   1dae4:	mov	r5, r0
   1dae8:	mov	r0, r4
   1daec:	bl	1739c <__assert_fail@plt+0x4854>
   1daf0:	mov	r6, r0
   1daf4:	mov	r0, r5
   1daf8:	bl	124a0 <gcry_free@plt>
   1dafc:	mov	r0, r4
   1db00:	bl	124a0 <gcry_free@plt>
   1db04:	clz	r0, r6
   1db08:	lsr	r0, r0, #5
   1db0c:	pop	{r4, r5, r6, pc}
   1db10:	andeq	r9, r2, r0, asr #12
   1db14:	push	{r4, r5, r6, lr}
   1db18:	cmp	r0, #0
   1db1c:	ldr	r5, [pc, #152]	; 1dbbc <__assert_fail@plt+0xb074>
   1db20:	ldr	r4, [r5]
   1db24:	bne	1db38 <__assert_fail@plt+0xaff0>
   1db28:	cmp	r4, #0
   1db2c:	beq	1db48 <__assert_fail@plt+0xb000>
   1db30:	mov	r0, r4
   1db34:	pop	{r4, r5, r6, pc}
   1db38:	mov	r0, r4
   1db3c:	bl	124a0 <gcry_free@plt>
   1db40:	mov	r3, #0
   1db44:	str	r3, [r5]
   1db48:	bl	1dab8 <__assert_fail@plt+0xaf70>
   1db4c:	mov	r2, #0
   1db50:	ldr	r1, [pc, #104]	; 1dbc0 <__assert_fail@plt+0xb078>
   1db54:	mov	r6, r0
   1db58:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1db5c:	mov	r1, #0
   1db60:	mov	r4, r0
   1db64:	bl	128f0 <access@plt>
   1db68:	cmp	r0, #0
   1db6c:	beq	1dbac <__assert_fail@plt+0xb064>
   1db70:	mov	r2, #0
   1db74:	ldr	r1, [pc, #72]	; 1dbc4 <__assert_fail@plt+0xb07c>
   1db78:	mov	r0, r6
   1db7c:	str	r4, [r5]
   1db80:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1db84:	mov	r1, #0
   1db88:	mov	r4, r0
   1db8c:	bl	128f0 <access@plt>
   1db90:	cmp	r0, #0
   1db94:	beq	1dbac <__assert_fail@plt+0xb064>
   1db98:	mov	r0, r4
   1db9c:	bl	124a0 <gcry_free@plt>
   1dba0:	ldr	r4, [r5]
   1dba4:	mov	r0, r4
   1dba8:	pop	{r4, r5, r6, pc}
   1dbac:	ldr	r0, [r5]
   1dbb0:	bl	124a0 <gcry_free@plt>
   1dbb4:	str	r4, [r5]
   1dbb8:	b	1db30 <__assert_fail@plt+0xafe8>
   1dbbc:	andeq	ip, r3, r4, lsr #7
   1dbc0:	andeq	r9, r2, ip, asr #12
   1dbc4:	andeq	r9, r2, r8, asr r6
   1dbc8:	push	{r4, lr}
   1dbcc:	ldrb	r4, [r0]
   1dbd0:	cmp	r4, #0
   1dbd4:	beq	1dbf4 <__assert_fail@plt+0xb0ac>
   1dbd8:	mov	r4, r0
   1dbdc:	bl	12788 <strlen@plt>
   1dbe0:	add	r0, r4, r0
   1dbe4:	ldrb	r3, [r0, #-1]
   1dbe8:	cmp	r3, #47	; 0x2f
   1dbec:	movne	r4, #0
   1dbf0:	beq	1dbfc <__assert_fail@plt+0xb0b4>
   1dbf4:	mov	r0, r4
   1dbf8:	pop	{r4, pc}
   1dbfc:	mov	r0, r4
   1dc00:	bl	128e4 <gcry_xstrdup@plt>
   1dc04:	mov	r4, r0
   1dc08:	bl	12788 <strlen@plt>
   1dc0c:	sub	r0, r0, #1
   1dc10:	add	r3, r4, r0
   1dc14:	cmp	r4, r3
   1dc18:	bcs	1dbf4 <__assert_fail@plt+0xb0ac>
   1dc1c:	ldrb	r2, [r4, r0]
   1dc20:	cmp	r2, #47	; 0x2f
   1dc24:	bne	1dbf4 <__assert_fail@plt+0xb0ac>
   1dc28:	mov	r1, #0
   1dc2c:	b	1dc3c <__assert_fail@plt+0xb0f4>
   1dc30:	ldrb	r2, [r3]
   1dc34:	cmp	r2, #47	; 0x2f
   1dc38:	bne	1dbf4 <__assert_fail@plt+0xb0ac>
   1dc3c:	strb	r1, [r3], #-1
   1dc40:	cmp	r4, r3
   1dc44:	bne	1dc30 <__assert_fail@plt+0xb0e8>
   1dc48:	mov	r0, r4
   1dc4c:	pop	{r4, pc}
   1dc50:	ldr	r0, [pc]	; 1dc58 <__assert_fail@plt+0xb110>
   1dc54:	bx	lr
   1dc58:	andeq	r9, r2, r0, asr #12
   1dc5c:	push	{r4, lr}
   1dc60:	ldr	r0, [pc, #80]	; 1dcb8 <__assert_fail@plt+0xb170>
   1dc64:	bl	12674 <getenv@plt>
   1dc68:	subs	r4, r0, #0
   1dc6c:	beq	1dc7c <__assert_fail@plt+0xb134>
   1dc70:	ldrb	r3, [r4]
   1dc74:	cmp	r3, #0
   1dc78:	bne	1dc88 <__assert_fail@plt+0xb140>
   1dc7c:	ldr	r4, [pc, #56]	; 1dcbc <__assert_fail@plt+0xb174>
   1dc80:	mov	r0, r4
   1dc84:	pop	{r4, pc}
   1dc88:	bl	1dbc8 <__assert_fail@plt+0xb080>
   1dc8c:	cmp	r0, #0
   1dc90:	movne	r4, r0
   1dc94:	mov	r0, r4
   1dc98:	bl	1dac4 <__assert_fail@plt+0xaf7c>
   1dc9c:	cmp	r0, #0
   1dca0:	bne	1dc80 <__assert_fail@plt+0xb138>
   1dca4:	ldr	r3, [pc, #20]	; 1dcc0 <__assert_fail@plt+0xb178>
   1dca8:	mov	r2, #1
   1dcac:	mov	r0, r4
   1dcb0:	strb	r2, [r3, #4]
   1dcb4:	pop	{r4, pc}
   1dcb8:	andeq	r9, r2, r8, ror #12
   1dcbc:	andeq	r9, r2, r0, asr #12
   1dcc0:	andeq	ip, r3, r4, lsr #7
   1dcc4:	push	{r4, r5, r6, lr}
   1dcc8:	subs	r4, r0, #0
   1dccc:	beq	1dcdc <__assert_fail@plt+0xb194>
   1dcd0:	ldrb	r3, [r4]
   1dcd4:	cmp	r3, #0
   1dcd8:	bne	1dd10 <__assert_fail@plt+0xb1c8>
   1dcdc:	bl	1dc5c <__assert_fail@plt+0xb114>
   1dce0:	ldr	r5, [pc, #80]	; 1dd38 <__assert_fail@plt+0xb1f0>
   1dce4:	mov	r6, #0
   1dce8:	mov	r4, r0
   1dcec:	ldr	r0, [r5, #8]
   1dcf0:	bl	124a0 <gcry_free@plt>
   1dcf4:	mov	r0, r4
   1dcf8:	mov	r1, #0
   1dcfc:	bl	172ec <__assert_fail@plt+0x47a4>
   1dd00:	str	r0, [r5, #8]
   1dd04:	mov	r0, r6
   1dd08:	pop	{r4, r5, r6, lr}
   1dd0c:	b	124a0 <gcry_free@plt>
   1dd10:	bl	1dbc8 <__assert_fail@plt+0xb080>
   1dd14:	ldr	r5, [pc, #28]	; 1dd38 <__assert_fail@plt+0xb1f0>
   1dd18:	subs	r6, r0, #0
   1dd1c:	movne	r4, r6
   1dd20:	mov	r0, r4
   1dd24:	bl	1dac4 <__assert_fail@plt+0xaf7c>
   1dd28:	cmp	r0, #0
   1dd2c:	moveq	r3, #1
   1dd30:	strbeq	r3, [r5, #4]
   1dd34:	b	1dcec <__assert_fail@plt+0xb1a4>
   1dd38:	andeq	ip, r3, r4, lsr #7
   1dd3c:	push	{r4, r5, r6, lr}
   1dd40:	ldr	r5, [pc, #44]	; 1dd74 <__assert_fail@plt+0xb22c>
   1dd44:	ldr	r4, [r5, #8]
   1dd48:	cmp	r4, #0
   1dd4c:	beq	1dd58 <__assert_fail@plt+0xb210>
   1dd50:	mov	r0, r4
   1dd54:	pop	{r4, r5, r6, pc}
   1dd58:	bl	1dc5c <__assert_fail@plt+0xb114>
   1dd5c:	mov	r1, r4
   1dd60:	bl	172ec <__assert_fail@plt+0x47a4>
   1dd64:	mov	r4, r0
   1dd68:	str	r0, [r5, #8]
   1dd6c:	mov	r0, r4
   1dd70:	pop	{r4, r5, r6, pc}
   1dd74:	andeq	ip, r3, r4, lsr #7
   1dd78:	ldr	r3, [pc, #12]	; 1dd8c <__assert_fail@plt+0xb244>
   1dd7c:	ldrb	r0, [r3, #4]
   1dd80:	clz	r0, r0
   1dd84:	lsr	r0, r0, #5
   1dd88:	bx	lr
   1dd8c:	andeq	ip, r3, r4, lsr #7
   1dd90:	ldr	r0, [pc]	; 1dd98 <__assert_fail@plt+0xb250>
   1dd94:	bx	lr
   1dd98:	andeq	r9, r2, r8, lsr r1
   1dd9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1dda0:	mov	r2, #0
   1dda4:	ldr	r8, [pc, #884]	; 1e120 <__assert_fail@plt+0xb5d8>
   1dda8:	sub	sp, sp, #188	; 0xbc
   1ddac:	mov	r7, r1
   1ddb0:	ldr	r3, [r8]
   1ddb4:	str	r2, [r1]
   1ddb8:	mov	r9, r0
   1ddbc:	str	r3, [sp, #180]	; 0xb4
   1ddc0:	bl	1dd3c <__assert_fail@plt+0xb1f4>
   1ddc4:	ldr	r5, [pc, #856]	; 1e124 <__assert_fail@plt+0xb5dc>
   1ddc8:	ldr	r4, [pc, #856]	; 1e128 <__assert_fail@plt+0xb5e0>
   1ddcc:	ldr	r6, [pc, #856]	; 1e12c <__assert_fail@plt+0xb5e4>
   1ddd0:	bl	12404 <getuid@plt>
   1ddd4:	mov	r3, r4
   1ddd8:	mov	r2, r6
   1dddc:	mov	r1, #47	; 0x2f
   1dde0:	str	r0, [sp]
   1dde4:	add	r0, sp, #132	; 0x84
   1dde8:	bl	12920 <gpgrt_snprintf@plt>
   1ddec:	add	r2, sp, #8
   1ddf0:	add	r1, sp, #132	; 0x84
   1ddf4:	mov	r0, #3
   1ddf8:	bl	12a94 <__xstat64@plt>
   1ddfc:	cmp	r0, #0
   1de00:	bne	1de14 <__assert_fail@plt+0xb2cc>
   1de04:	ldr	r3, [sp, #24]
   1de08:	and	r3, r3, #61440	; 0xf000
   1de0c:	cmp	r3, #16384	; 0x4000
   1de10:	beq	1de58 <__assert_fail@plt+0xb310>
   1de14:	ldr	r4, [r5], #4
   1de18:	cmp	r4, #0
   1de1c:	bne	1ddd0 <__assert_fail@plt+0xb288>
   1de20:	ldr	r3, [r7]
   1de24:	orr	r3, r3, #2
   1de28:	orr	r3, r3, #128	; 0x80
   1de2c:	str	r3, [r7]
   1de30:	bl	1dd3c <__assert_fail@plt+0xb1f4>
   1de34:	bl	128e4 <gcry_xstrdup@plt>
   1de38:	mov	r4, r0
   1de3c:	ldr	r2, [sp, #180]	; 0xb4
   1de40:	ldr	r3, [r8]
   1de44:	mov	r0, r4
   1de48:	cmp	r2, r3
   1de4c:	bne	1e0e8 <__assert_fail@plt+0xb5a0>
   1de50:	add	sp, sp, #188	; 0xbc
   1de54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1de58:	ldr	r4, [sp, #32]
   1de5c:	bl	12404 <getuid@plt>
   1de60:	cmp	r4, r0
   1de64:	beq	1de7c <__assert_fail@plt+0xb334>
   1de68:	ldr	r3, [r7]
   1de6c:	cmp	r9, #0
   1de70:	orr	r3, r3, #4
   1de74:	str	r3, [r7]
   1de78:	beq	1de28 <__assert_fail@plt+0xb2e0>
   1de7c:	add	r0, sp, #132	; 0x84
   1de80:	bl	12788 <strlen@plt>
   1de84:	add	r2, r0, #7
   1de88:	cmp	r2, #46	; 0x2e
   1de8c:	mov	r3, r0
   1de90:	bls	1dea0 <__assert_fail@plt+0xb358>
   1de94:	ldr	r3, [r7]
   1de98:	orr	r3, r3, #1
   1de9c:	b	1de28 <__assert_fail@plt+0xb2e0>
   1dea0:	ldr	r2, [pc, #648]	; 1e130 <__assert_fail@plt+0xb5e8>
   1dea4:	add	r1, sp, #132	; 0x84
   1dea8:	add	ip, r1, r0
   1deac:	ldrb	lr, [r2, #6]
   1deb0:	ldrh	r1, [r2, #4]
   1deb4:	ldr	r0, [r2]
   1deb8:	add	r2, sp, #132	; 0x84
   1debc:	str	r0, [r2, r3]
   1dec0:	strh	r1, [ip, #4]
   1dec4:	add	r2, sp, #8
   1dec8:	add	r1, sp, #132	; 0x84
   1decc:	strb	lr, [ip, #6]
   1ded0:	mov	r0, #3
   1ded4:	bl	12a94 <__xstat64@plt>
   1ded8:	cmp	r0, #0
   1dedc:	bne	1dfcc <__assert_fail@plt+0xb484>
   1dee0:	ldr	r3, [sp, #24]
   1dee4:	and	r3, r3, #61440	; 0xf000
   1dee8:	cmp	r3, #16384	; 0x4000
   1deec:	beq	1e018 <__assert_fail@plt+0xb4d0>
   1def0:	ldr	r3, [r7]
   1def4:	cmp	r9, #0
   1def8:	orr	r3, r3, #4
   1defc:	str	r3, [r7]
   1df00:	beq	1de28 <__assert_fail@plt+0xb2e0>
   1df04:	ldr	r3, [pc, #552]	; 1e134 <__assert_fail@plt+0xb5ec>
   1df08:	ldrb	r3, [r3, #4]
   1df0c:	cmp	r3, #0
   1df10:	beq	1dffc <__assert_fail@plt+0xb4b4>
   1df14:	ldr	r3, [r7]
   1df18:	orr	r3, r3, #32
   1df1c:	str	r3, [r7]
   1df20:	bl	1dd3c <__assert_fail@plt+0xb1f4>
   1df24:	mov	r4, r0
   1df28:	bl	12788 <strlen@plt>
   1df2c:	mov	r2, r4
   1df30:	add	r1, sp, #112	; 0x70
   1df34:	mov	r3, r0
   1df38:	mov	r0, #2
   1df3c:	bl	12938 <gcry_md_hash_buffer@plt>
   1df40:	add	r0, sp, #112	; 0x70
   1df44:	mov	r1, #120	; 0x78
   1df48:	bl	20118 <__assert_fail@plt+0xd5d0>
   1df4c:	subs	r5, r0, #0
   1df50:	beq	1de94 <__assert_fail@plt+0xb34c>
   1df54:	mov	r3, #0
   1df58:	mov	r2, r5
   1df5c:	ldr	r1, [pc, #468]	; 1e138 <__assert_fail@plt+0xb5f0>
   1df60:	add	r0, sp, #132	; 0x84
   1df64:	bl	17838 <__assert_fail@plt+0x4cf0>
   1df68:	mov	r4, r0
   1df6c:	mov	r0, r5
   1df70:	bl	124a0 <gcry_free@plt>
   1df74:	cmp	r4, #0
   1df78:	beq	1e07c <__assert_fail@plt+0xb534>
   1df7c:	add	r2, sp, #8
   1df80:	mov	r1, r4
   1df84:	mov	r0, #3
   1df88:	bl	12a94 <__xstat64@plt>
   1df8c:	cmp	r0, #0
   1df90:	beq	1e054 <__assert_fail@plt+0xb50c>
   1df94:	bl	1280c <__errno_location@plt>
   1df98:	ldr	r3, [r0]
   1df9c:	mov	r5, r0
   1dfa0:	cmp	r3, #2
   1dfa4:	beq	1e08c <__assert_fail@plt+0xb544>
   1dfa8:	ldr	r3, [r7]
   1dfac:	cmp	r9, #0
   1dfb0:	orr	r3, r3, #1
   1dfb4:	str	r3, [r7]
   1dfb8:	bne	1de3c <__assert_fail@plt+0xb2f4>
   1dfbc:	mov	r0, r4
   1dfc0:	bl	124a0 <gcry_free@plt>
   1dfc4:	ldr	r3, [r7]
   1dfc8:	b	1de28 <__assert_fail@plt+0xb2e0>
   1dfcc:	bl	1280c <__errno_location@plt>
   1dfd0:	ldr	r3, [r0]
   1dfd4:	cmp	r3, #2
   1dfd8:	bne	1de94 <__assert_fail@plt+0xb34c>
   1dfdc:	ldr	r1, [pc, #344]	; 1e13c <__assert_fail@plt+0xb5f4>
   1dfe0:	add	r0, sp, #132	; 0x84
   1dfe4:	bl	1d470 <__assert_fail@plt+0xa928>
   1dfe8:	cmp	r0, #0
   1dfec:	beq	1e038 <__assert_fail@plt+0xb4f0>
   1dff0:	ldr	r3, [r7]
   1dff4:	orr	r3, r3, #16
   1dff8:	b	1de28 <__assert_fail@plt+0xb2e0>
   1dffc:	add	r0, sp, #132	; 0x84
   1e000:	bl	128e4 <gcry_xstrdup@plt>
   1e004:	mov	r4, r0
   1e008:	cmp	r4, #0
   1e00c:	bne	1de3c <__assert_fail@plt+0xb2f4>
   1e010:	ldr	r3, [r7]
   1e014:	b	1de28 <__assert_fail@plt+0xb2e0>
   1e018:	ldr	r4, [sp, #32]
   1e01c:	bl	12404 <getuid@plt>
   1e020:	cmp	r4, r0
   1e024:	bne	1def0 <__assert_fail@plt+0xb3a8>
   1e028:	ldr	r3, [sp, #24]
   1e02c:	tst	r3, #63	; 0x3f
   1e030:	bne	1def0 <__assert_fail@plt+0xb3a8>
   1e034:	b	1df04 <__assert_fail@plt+0xb3bc>
   1e038:	add	r2, sp, #8
   1e03c:	add	r1, sp, #132	; 0x84
   1e040:	mov	r0, #3
   1e044:	bl	12a94 <__xstat64@plt>
   1e048:	cmp	r0, #0
   1e04c:	beq	1dee0 <__assert_fail@plt+0xb398>
   1e050:	b	1de94 <__assert_fail@plt+0xb34c>
   1e054:	ldr	r3, [sp, #24]
   1e058:	and	r3, r3, #61440	; 0xf000
   1e05c:	cmp	r3, #16384	; 0x4000
   1e060:	beq	1e0a4 <__assert_fail@plt+0xb55c>
   1e064:	ldr	r3, [r7]
   1e068:	cmp	r9, #0
   1e06c:	orr	r3, r3, #8
   1e070:	str	r3, [r7]
   1e074:	bne	1de3c <__assert_fail@plt+0xb2f4>
   1e078:	b	1dfbc <__assert_fail@plt+0xb474>
   1e07c:	ldr	r3, [r7]
   1e080:	orr	r3, r3, #1
   1e084:	str	r3, [r7]
   1e088:	b	1de28 <__assert_fail@plt+0xb2e0>
   1e08c:	cmp	r9, #0
   1e090:	beq	1e0c4 <__assert_fail@plt+0xb57c>
   1e094:	ldr	r3, [r7]
   1e098:	orr	r3, r3, #64	; 0x40
   1e09c:	str	r3, [r7]
   1e0a0:	b	1de3c <__assert_fail@plt+0xb2f4>
   1e0a4:	ldr	r5, [sp, #32]
   1e0a8:	bl	12404 <getuid@plt>
   1e0ac:	cmp	r5, r0
   1e0b0:	bne	1e064 <__assert_fail@plt+0xb51c>
   1e0b4:	ldr	r3, [sp, #24]
   1e0b8:	tst	r3, #63	; 0x3f
   1e0bc:	bne	1e064 <__assert_fail@plt+0xb51c>
   1e0c0:	b	1de3c <__assert_fail@plt+0xb2f4>
   1e0c4:	ldr	r1, [pc, #112]	; 1e13c <__assert_fail@plt+0xb5f4>
   1e0c8:	mov	r0, r4
   1e0cc:	bl	1d470 <__assert_fail@plt+0xa928>
   1e0d0:	cmp	r0, #0
   1e0d4:	beq	1e0ec <__assert_fail@plt+0xb5a4>
   1e0d8:	ldr	r3, [r7]
   1e0dc:	orr	r3, r3, #16
   1e0e0:	str	r3, [r7]
   1e0e4:	b	1dfbc <__assert_fail@plt+0xb474>
   1e0e8:	bl	124e8 <__stack_chk_fail@plt>
   1e0ec:	add	r2, sp, #8
   1e0f0:	add	r1, sp, #132	; 0x84
   1e0f4:	mov	r0, #3
   1e0f8:	bl	12a94 <__xstat64@plt>
   1e0fc:	cmp	r0, #0
   1e100:	beq	1e008 <__assert_fail@plt+0xb4c0>
   1e104:	ldr	r2, [r5]
   1e108:	ldr	r3, [r7]
   1e10c:	cmp	r2, #2
   1e110:	orrne	r3, r3, #1
   1e114:	orreq	r3, r3, #64	; 0x40
   1e118:	str	r3, [r7]
   1e11c:	b	1dfbc <__assert_fail@plt+0xb474>
   1e120:	andeq	fp, r3, r0, lsl fp
   1e124:	andeq	r9, r2, r4, lsl #12
   1e128:	andeq	r9, r2, r8, ror r8
   1e12c:	andeq	r9, r2, r4, ror r6
   1e130:	muleq	r2, r8, r6
   1e134:	andeq	ip, r3, r4, lsr #7
   1e138:	andeq	r9, r2, r0, lsl #13
   1e13c:	strdeq	r9, [r2], -r4
   1e140:	push	{r4, r5, lr}
   1e144:	sub	sp, sp, #12
   1e148:	ldr	r5, [pc, #64]	; 1e190 <__assert_fail@plt+0xb648>
   1e14c:	ldr	r4, [pc, #64]	; 1e194 <__assert_fail@plt+0xb64c>
   1e150:	ldr	r0, [r5, #12]
   1e154:	ldr	r3, [r4]
   1e158:	cmp	r0, #0
   1e15c:	str	r3, [sp, #4]
   1e160:	beq	1e17c <__assert_fail@plt+0xb634>
   1e164:	ldr	r2, [sp, #4]
   1e168:	ldr	r3, [r4]
   1e16c:	cmp	r2, r3
   1e170:	bne	1e18c <__assert_fail@plt+0xb644>
   1e174:	add	sp, sp, #12
   1e178:	pop	{r4, r5, pc}
   1e17c:	mov	r1, sp
   1e180:	bl	1dd9c <__assert_fail@plt+0xb254>
   1e184:	str	r0, [r5, #12]
   1e188:	b	1e164 <__assert_fail@plt+0xb61c>
   1e18c:	bl	124e8 <__stack_chk_fail@plt>
   1e190:	andeq	ip, r3, r4, lsr #7
   1e194:	andeq	fp, r3, r0, lsl fp
   1e198:	ldr	r0, [pc]	; 1e1a0 <__assert_fail@plt+0xb658>
   1e19c:	bx	lr
   1e1a0:	andeq	r9, r2, r4, lsl #13
   1e1a4:	ldr	r0, [pc]	; 1e1ac <__assert_fail@plt+0xb664>
   1e1a8:	bx	lr
   1e1ac:	muleq	r2, r0, r6
   1e1b0:	ldr	r0, [pc]	; 1e1b8 <__assert_fail@plt+0xb670>
   1e1b4:	bx	lr
   1e1b8:	andeq	r9, r2, r0, lsr #13
   1e1bc:	ldr	r0, [pc]	; 1e1c4 <__assert_fail@plt+0xb67c>
   1e1c0:	bx	lr
   1e1c4:	andeq	r9, r2, r4, asr #13
   1e1c8:	ldr	r0, [pc]	; 1e1d0 <__assert_fail@plt+0xb688>
   1e1cc:	bx	lr
   1e1d0:	andeq	r8, r2, r0, lsl r9
   1e1d4:	ldr	r0, [pc]	; 1e1dc <__assert_fail@plt+0xb694>
   1e1d8:	bx	lr
   1e1dc:	ldrdeq	r9, [r2], -r8
   1e1e0:	push	{r4, r5, lr}
   1e1e4:	sub	sp, sp, #12
   1e1e8:	ldr	r5, [pc, #96]	; 1e250 <__assert_fail@plt+0xb708>
   1e1ec:	ldr	r4, [pc, #96]	; 1e254 <__assert_fail@plt+0xb70c>
   1e1f0:	ldr	r0, [r5, #16]
   1e1f4:	ldr	r3, [r4]
   1e1f8:	cmp	r0, #0
   1e1fc:	str	r3, [sp, #4]
   1e200:	beq	1e21c <__assert_fail@plt+0xb6d4>
   1e204:	ldr	r2, [sp, #4]
   1e208:	ldr	r3, [r4]
   1e20c:	cmp	r2, r3
   1e210:	bne	1e24c <__assert_fail@plt+0xb704>
   1e214:	add	sp, sp, #12
   1e218:	pop	{r4, r5, pc}
   1e21c:	ldr	r0, [r5, #12]
   1e220:	cmp	r0, #0
   1e224:	beq	1e23c <__assert_fail@plt+0xb6f4>
   1e228:	mov	r2, #0
   1e22c:	ldr	r1, [pc, #36]	; 1e258 <__assert_fail@plt+0xb710>
   1e230:	bl	1723c <__assert_fail@plt+0x46f4>
   1e234:	str	r0, [r5, #16]
   1e238:	b	1e204 <__assert_fail@plt+0xb6bc>
   1e23c:	mov	r1, sp
   1e240:	bl	1dd9c <__assert_fail@plt+0xb254>
   1e244:	str	r0, [r5, #12]
   1e248:	b	1e228 <__assert_fail@plt+0xb6e0>
   1e24c:	bl	124e8 <__stack_chk_fail@plt>
   1e250:	andeq	ip, r3, r4, lsr #7
   1e254:	andeq	fp, r3, r0, lsl fp
   1e258:	andeq	r9, r2, ip, ror #13
   1e25c:	push	{r4, lr}
   1e260:	ldr	r4, [pc, #72]	; 1e2b0 <__assert_fail@plt+0xb768>
   1e264:	ldr	r3, [r4, #20]
   1e268:	cmp	r3, #0
   1e26c:	bne	1e288 <__assert_fail@plt+0xb740>
   1e270:	ldr	r3, [r4, #24]
   1e274:	cmp	r3, #0
   1e278:	bne	1e29c <__assert_fail@plt+0xb754>
   1e27c:	bl	12b0c <gcry_strdup@plt>
   1e280:	str	r0, [r4, #24]
   1e284:	pop	{r4, pc}
   1e288:	ldr	r3, [pc, #36]	; 1e2b4 <__assert_fail@plt+0xb76c>
   1e28c:	ldr	r2, [pc, #36]	; 1e2b8 <__assert_fail@plt+0xb770>
   1e290:	ldr	r1, [pc, #36]	; 1e2bc <__assert_fail@plt+0xb774>
   1e294:	ldr	r0, [pc, #36]	; 1e2c0 <__assert_fail@plt+0xb778>
   1e298:	bl	1cacc <__assert_fail@plt+0x9f84>
   1e29c:	ldr	r3, [pc, #16]	; 1e2b4 <__assert_fail@plt+0xb76c>
   1e2a0:	ldr	r2, [pc, #28]	; 1e2c4 <__assert_fail@plt+0xb77c>
   1e2a4:	ldr	r1, [pc, #16]	; 1e2bc <__assert_fail@plt+0xb774>
   1e2a8:	ldr	r0, [pc, #24]	; 1e2c8 <__assert_fail@plt+0xb780>
   1e2ac:	bl	1cacc <__assert_fail@plt+0x9f84>
   1e2b0:	andeq	ip, r3, r4, lsr #7
   1e2b4:	andeq	r9, r2, ip, lsl #12
   1e2b8:	andeq	r0, r0, sp, lsl #8
   1e2bc:	strdeq	r9, [r2], -r8
   1e2c0:	andeq	r9, r2, r0, lsl r7
   1e2c4:	andeq	r0, r0, lr, lsl #8
   1e2c8:	andeq	r9, r2, ip, lsr #14
   1e2cc:	push	{r4, lr}
   1e2d0:	mov	r3, #1
   1e2d4:	ldr	r4, [pc, #664]	; 1e574 <__assert_fail@plt+0xba2c>
   1e2d8:	sub	r0, r0, #1
   1e2dc:	str	r3, [r4, #20]
   1e2e0:	cmp	r0, #11
   1e2e4:	ldrls	pc, [pc, r0, lsl #2]
   1e2e8:	b	1e564 <__assert_fail@plt+0xba1c>
   1e2ec:	andeq	lr, r1, r0, asr r3
   1e2f0:	andeq	lr, r1, r4, lsl #7
   1e2f4:	muleq	r1, r0, r3
   1e2f8:	andeq	lr, r1, r4, asr #7
   1e2fc:	strdeq	lr, [r1], -r8
   1e300:	andeq	lr, r1, ip, lsr #8
   1e304:	andeq	lr, r1, r0, ror #8
   1e308:	muleq	r1, r4, r4
   1e30c:	andeq	lr, r1, r8, asr #9
   1e310:	strdeq	lr, [r1], -ip
   1e314:	andeq	lr, r1, r0, lsr r5
   1e318:	andeq	lr, r1, ip, lsl r3
   1e31c:	ldr	r0, [r4, #60]	; 0x3c
   1e320:	cmp	r0, #0
   1e324:	popne	{r4, pc}
   1e328:	ldr	r3, [r4, #24]
   1e32c:	mov	r2, r0
   1e330:	cmp	r3, #0
   1e334:	movne	r0, r3
   1e338:	ldrne	r1, [pc, #568]	; 1e578 <__assert_fail@plt+0xba30>
   1e33c:	ldreq	r1, [pc, #568]	; 1e57c <__assert_fail@plt+0xba34>
   1e340:	ldreq	r0, [pc, #568]	; 1e580 <__assert_fail@plt+0xba38>
   1e344:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e348:	str	r0, [r4, #60]	; 0x3c
   1e34c:	pop	{r4, pc}
   1e350:	ldr	r0, [r4, #28]
   1e354:	cmp	r0, #0
   1e358:	popne	{r4, pc}
   1e35c:	ldr	r3, [r4, #24]
   1e360:	mov	r2, r0
   1e364:	cmp	r3, #0
   1e368:	movne	r0, r3
   1e36c:	ldrne	r1, [pc, #528]	; 1e584 <__assert_fail@plt+0xba3c>
   1e370:	ldreq	r1, [pc, #528]	; 1e588 <__assert_fail@plt+0xba40>
   1e374:	ldreq	r0, [pc, #516]	; 1e580 <__assert_fail@plt+0xba38>
   1e378:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e37c:	str	r0, [r4, #28]
   1e380:	pop	{r4, pc}
   1e384:	mov	r0, #0
   1e388:	pop	{r4, lr}
   1e38c:	b	1db14 <__assert_fail@plt+0xafcc>
   1e390:	ldr	r0, [r4, #32]
   1e394:	cmp	r0, #0
   1e398:	popne	{r4, pc}
   1e39c:	ldr	r3, [r4, #24]
   1e3a0:	mov	r2, r0
   1e3a4:	cmp	r3, #0
   1e3a8:	movne	r0, r3
   1e3ac:	ldrne	r1, [pc, #472]	; 1e58c <__assert_fail@plt+0xba44>
   1e3b0:	ldreq	r1, [pc, #472]	; 1e590 <__assert_fail@plt+0xba48>
   1e3b4:	ldreq	r0, [pc, #472]	; 1e594 <__assert_fail@plt+0xba4c>
   1e3b8:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e3bc:	str	r0, [r4, #32]
   1e3c0:	pop	{r4, pc}
   1e3c4:	ldr	r0, [r4, #36]	; 0x24
   1e3c8:	cmp	r0, #0
   1e3cc:	popne	{r4, pc}
   1e3d0:	ldr	r3, [r4, #24]
   1e3d4:	mov	r2, r0
   1e3d8:	cmp	r3, #0
   1e3dc:	movne	r0, r3
   1e3e0:	ldrne	r1, [pc, #432]	; 1e598 <__assert_fail@plt+0xba50>
   1e3e4:	ldreq	r1, [pc, #432]	; 1e59c <__assert_fail@plt+0xba54>
   1e3e8:	ldreq	r0, [pc, #400]	; 1e580 <__assert_fail@plt+0xba38>
   1e3ec:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e3f0:	str	r0, [r4, #36]	; 0x24
   1e3f4:	pop	{r4, pc}
   1e3f8:	ldr	r0, [r4, #40]	; 0x28
   1e3fc:	cmp	r0, #0
   1e400:	popne	{r4, pc}
   1e404:	ldr	r3, [r4, #24]
   1e408:	mov	r2, r0
   1e40c:	cmp	r3, #0
   1e410:	movne	r0, r3
   1e414:	ldrne	r1, [pc, #388]	; 1e5a0 <__assert_fail@plt+0xba58>
   1e418:	ldreq	r1, [pc, #388]	; 1e5a4 <__assert_fail@plt+0xba5c>
   1e41c:	ldreq	r0, [pc, #368]	; 1e594 <__assert_fail@plt+0xba4c>
   1e420:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e424:	str	r0, [r4, #40]	; 0x28
   1e428:	pop	{r4, pc}
   1e42c:	ldr	r0, [r4, #48]	; 0x30
   1e430:	cmp	r0, #0
   1e434:	popne	{r4, pc}
   1e438:	ldr	r3, [r4, #24]
   1e43c:	mov	r2, r0
   1e440:	cmp	r3, #0
   1e444:	movne	r0, r3
   1e448:	ldrne	r1, [pc, #344]	; 1e5a8 <__assert_fail@plt+0xba60>
   1e44c:	ldreq	r1, [pc, #344]	; 1e5ac <__assert_fail@plt+0xba64>
   1e450:	ldreq	r0, [pc, #316]	; 1e594 <__assert_fail@plt+0xba4c>
   1e454:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e458:	str	r0, [r4, #48]	; 0x30
   1e45c:	pop	{r4, pc}
   1e460:	ldr	r0, [r4, #52]	; 0x34
   1e464:	cmp	r0, #0
   1e468:	popne	{r4, pc}
   1e46c:	ldr	r3, [r4, #24]
   1e470:	mov	r2, r0
   1e474:	cmp	r3, #0
   1e478:	movne	r0, r3
   1e47c:	ldrne	r1, [pc, #300]	; 1e5b0 <__assert_fail@plt+0xba68>
   1e480:	ldreq	r1, [pc, #300]	; 1e5b4 <__assert_fail@plt+0xba6c>
   1e484:	ldreq	r0, [pc, #244]	; 1e580 <__assert_fail@plt+0xba38>
   1e488:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e48c:	str	r0, [r4, #52]	; 0x34
   1e490:	pop	{r4, pc}
   1e494:	ldr	r0, [r4, #56]	; 0x38
   1e498:	cmp	r0, #0
   1e49c:	popne	{r4, pc}
   1e4a0:	ldr	r3, [r4, #24]
   1e4a4:	mov	r2, r0
   1e4a8:	cmp	r3, #0
   1e4ac:	movne	r0, r3
   1e4b0:	ldrne	r1, [pc, #256]	; 1e5b8 <__assert_fail@plt+0xba70>
   1e4b4:	ldreq	r1, [pc, #256]	; 1e5bc <__assert_fail@plt+0xba74>
   1e4b8:	ldreq	r0, [pc, #192]	; 1e580 <__assert_fail@plt+0xba38>
   1e4bc:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e4c0:	str	r0, [r4, #56]	; 0x38
   1e4c4:	pop	{r4, pc}
   1e4c8:	ldr	r0, [r4, #64]	; 0x40
   1e4cc:	cmp	r0, #0
   1e4d0:	popne	{r4, pc}
   1e4d4:	ldr	r3, [r4, #24]
   1e4d8:	mov	r2, r0
   1e4dc:	cmp	r3, #0
   1e4e0:	movne	r0, r3
   1e4e4:	ldrne	r1, [pc, #212]	; 1e5c0 <__assert_fail@plt+0xba78>
   1e4e8:	ldreq	r1, [pc, #212]	; 1e5c4 <__assert_fail@plt+0xba7c>
   1e4ec:	ldreq	r0, [pc, #140]	; 1e580 <__assert_fail@plt+0xba38>
   1e4f0:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e4f4:	str	r0, [r4, #64]	; 0x40
   1e4f8:	pop	{r4, pc}
   1e4fc:	ldr	r0, [r4, #68]	; 0x44
   1e500:	cmp	r0, #0
   1e504:	popne	{r4, pc}
   1e508:	ldr	r3, [r4, #24]
   1e50c:	mov	r2, r0
   1e510:	cmp	r3, #0
   1e514:	movne	r0, r3
   1e518:	ldrne	r1, [pc, #168]	; 1e5c8 <__assert_fail@plt+0xba80>
   1e51c:	ldreq	r1, [pc, #168]	; 1e5cc <__assert_fail@plt+0xba84>
   1e520:	ldreq	r0, [pc, #88]	; 1e580 <__assert_fail@plt+0xba38>
   1e524:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e528:	str	r0, [r4, #68]	; 0x44
   1e52c:	pop	{r4, pc}
   1e530:	ldr	r0, [r4, #44]	; 0x2c
   1e534:	cmp	r0, #0
   1e538:	popne	{r4, pc}
   1e53c:	ldr	r3, [r4, #24]
   1e540:	mov	r2, r0
   1e544:	cmp	r3, #0
   1e548:	movne	r0, r3
   1e54c:	ldrne	r1, [pc, #124]	; 1e5d0 <__assert_fail@plt+0xba88>
   1e550:	ldreq	r1, [pc, #124]	; 1e5d4 <__assert_fail@plt+0xba8c>
   1e554:	ldreq	r0, [pc, #56]	; 1e594 <__assert_fail@plt+0xba4c>
   1e558:	bl	178a4 <__assert_fail@plt+0x4d5c>
   1e55c:	str	r0, [r4, #44]	; 0x2c
   1e560:	pop	{r4, pc}
   1e564:	ldr	r2, [pc, #108]	; 1e5d8 <__assert_fail@plt+0xba90>
   1e568:	ldr	r1, [pc, #108]	; 1e5dc <__assert_fail@plt+0xba94>
   1e56c:	ldr	r0, [pc, #108]	; 1e5e0 <__assert_fail@plt+0xba98>
   1e570:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   1e574:	andeq	ip, r3, r4, lsr #7
   1e578:	andeq	r9, r2, ip, lsl r8
   1e57c:	andeq	r9, r2, r0, lsr #16
   1e580:	andeq	r9, r2, r4, lsr r6
   1e584:	andeq	r9, r2, r4, asr #14
   1e588:	andeq	r9, r2, r8, asr r7
   1e58c:	andeq	r9, r2, r4, ror #14
   1e590:	andeq	r9, r2, r8, ror #14
   1e594:	muleq	r2, r0, r6
   1e598:	andeq	r9, r2, r4, ror r7
   1e59c:	andeq	r9, r2, ip, ror r7
   1e5a0:	andeq	r9, r2, r8, lsl #15
   1e5a4:	andeq	r9, r2, r0, lsr #15
   1e5a8:	andeq	r9, r2, ip, asr #15
   1e5ac:	andeq	r9, r2, r8, ror #15
   1e5b0:	strdeq	r9, [r2], -ip
   1e5b4:	andeq	r9, r2, r8, lsl #16
   1e5b8:	andeq	r9, r2, r0, lsl r8
   1e5bc:	andeq	r9, r2, r4, lsl r8
   1e5c0:	andeq	r9, r2, r8, lsr #16
   1e5c4:	andeq	r9, r2, r4, asr #16
   1e5c8:	andeq	r9, r2, r8, asr r8
   1e5cc:	andeq	r9, r2, r8, ror #16
   1e5d0:			; <UNDEFINED> instruction: 0x000297b4
   1e5d4:			; <UNDEFINED> instruction: 0x000297bc
   1e5d8:	andeq	r9, r2, r0, lsr #12
   1e5dc:	andeq	r0, r0, lr, ror r4
   1e5e0:	strdeq	r9, [r2], -r8
   1e5e4:	mov	r0, #1
   1e5e8:	b	1db14 <__assert_fail@plt+0xafcc>
   1e5ec:	andeq	r0, r0, r0
   1e5f0:	add	ip, r0, r0, lsl #3
   1e5f4:	sub	r3, r1, #1
   1e5f8:	add	ip, r0, ip, lsl #3
   1e5fc:	cmp	r1, #2
   1e600:	add	ip, ip, ip, lsl #2
   1e604:	rsb	r3, r3, r3, lsl #5
   1e608:	add	r3, r3, ip
   1e60c:	lslgt	r1, r1, #2
   1e610:	add	r2, r3, r2
   1e614:	ldrgt	r3, [pc, #88]	; 1e674 <__assert_fail@plt+0xbb2c>
   1e618:	addgt	r1, r1, #23
   1e61c:	ldr	ip, [pc, #84]	; 1e678 <__assert_fail@plt+0xbb30>
   1e620:	suble	r0, r0, #1
   1e624:	umullgt	r3, r1, r3, r1
   1e628:	push	{lr}		; (str lr, [sp, #-4]!)
   1e62c:	smull	lr, ip, ip, r0
   1e630:	add	r2, r2, #1720320	; 0x1a4000
   1e634:	add	r2, r2, #740	; 0x2e4
   1e638:	subgt	r2, r2, r1, lsr #3
   1e63c:	asr	r1, r0, #31
   1e640:	add	r3, r0, #3
   1e644:	cmp	r0, #0
   1e648:	rsb	r1, r1, ip, asr #5
   1e64c:	movlt	r0, r3
   1e650:	add	r1, r1, #1
   1e654:	asr	r3, r0, #2
   1e658:	add	r0, r1, r1, lsl #1
   1e65c:	add	r1, r0, #3
   1e660:	cmp	r0, #0
   1e664:	movlt	r0, r1
   1e668:	sub	r0, r3, r0, asr #2
   1e66c:	add	r0, r0, r2
   1e670:	pop	{pc}		; (ldr pc, [sp], #4)
   1e674:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1e678:	mvnpl	r8, pc, lsl r5
   1e67c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e680:	sub	r4, r0, #1720320	; 0x1a4000
   1e684:	mov	r6, r0
   1e688:	ldr	r0, [pc, #592]	; 1e8e0 <__assert_fail@plt+0xbd98>
   1e68c:	sub	sp, sp, #20
   1e690:	sub	r4, r4, #740	; 0x2e4
   1e694:	str	r1, [sp, #4]
   1e698:	umull	r1, r4, r0, r4
   1e69c:	ldr	r7, [pc, #576]	; 1e8e4 <__assert_fail@plt+0xbd9c>
   1e6a0:	strd	r2, [sp, #8]
   1e6a4:	lsr	r4, r4, #8
   1e6a8:	ldr	r8, [pc, #568]	; 1e8e8 <__assert_fail@plt+0xbda0>
   1e6ac:	ldr	r5, [pc, #568]	; 1e8ec <__assert_fail@plt+0xbda4>
   1e6b0:	b	1e6b8 <__assert_fail@plt+0xbb70>
   1e6b4:	add	r4, r4, #1
   1e6b8:	mov	r2, #1
   1e6bc:	mov	r1, r2
   1e6c0:	mov	r0, r4
   1e6c4:	bl	1e5f0 <__assert_fail@plt+0xbaa8>
   1e6c8:	umull	r3, r2, r7, r4
   1e6cc:	lsr	r3, r2, #5
   1e6d0:	add	r3, r3, r3, lsl #2
   1e6d4:	add	r3, r3, r3, lsl #2
   1e6d8:	cmp	r4, r3, lsl #2
   1e6dc:	sub	r0, r6, r0
   1e6e0:	bne	1e6fc <__assert_fail@plt+0xbbb4>
   1e6e4:	lsr	r2, r2, #7
   1e6e8:	add	r2, r2, r2, lsl #2
   1e6ec:	add	r2, r2, r2, lsl #2
   1e6f0:	cmp	r4, r2, lsl #4
   1e6f4:	movne	r3, r5
   1e6f8:	bne	1e708 <__assert_fail@plt+0xbbc0>
   1e6fc:	tst	r4, #3
   1e700:	moveq	r3, r8
   1e704:	movne	r3, r5
   1e708:	cmp	r0, r3
   1e70c:	bgt	1e6b4 <__assert_fail@plt+0xbb6c>
   1e710:	ldr	r3, [pc, #472]	; 1e8f0 <__assert_fail@plt+0xbda8>
   1e714:	asr	r5, r0, #31
   1e718:	ldr	sl, [pc, #452]	; 1e8e4 <__assert_fail@plt+0xbd9c>
   1e71c:	smull	r2, r3, r3, r0
   1e720:	add	r0, r3, r0
   1e724:	rsb	r5, r5, r0, asr #4
   1e728:	add	r5, r5, #1
   1e72c:	umull	r3, r7, sl, r4
   1e730:	add	r5, r5, #1
   1e734:	lsr	r8, r7, #5
   1e738:	lsr	r7, r7, #7
   1e73c:	add	r8, r8, r8, lsl #2
   1e740:	add	r7, r7, r7, lsl #2
   1e744:	add	r8, r8, r8, lsl #2
   1e748:	add	r7, r7, r7, lsl #2
   1e74c:	sub	r8, r4, r8, lsl #2
   1e750:	sub	r7, r4, r7, lsl #4
   1e754:	and	r9, r4, #3
   1e758:	sub	fp, r5, #1
   1e75c:	mov	r1, fp
   1e760:	mov	r2, #1
   1e764:	mov	r0, r4
   1e768:	bl	1e5f0 <__assert_fail@plt+0xbaa8>
   1e76c:	sub	r3, fp, #1
   1e770:	sub	r0, r6, r0
   1e774:	cmp	r3, #11
   1e778:	ldrls	pc, [pc, r3, lsl #2]
   1e77c:	b	1e8d0 <__assert_fail@plt+0xbd88>
   1e780:			; <UNDEFINED> instruction: 0x0001e7b0
   1e784:	andeq	lr, r1, r4, ror r8
   1e788:			; <UNDEFINED> instruction: 0x0001e7b0
   1e78c:	andeq	lr, r1, ip, asr #15
   1e790:			; <UNDEFINED> instruction: 0x0001e7b0
   1e794:	andeq	lr, r1, ip, asr #15
   1e798:			; <UNDEFINED> instruction: 0x0001e7b0
   1e79c:			; <UNDEFINED> instruction: 0x0001e7b0
   1e7a0:	andeq	lr, r1, ip, asr #15
   1e7a4:			; <UNDEFINED> instruction: 0x0001e7b0
   1e7a8:	andeq	lr, r1, ip, asr #15
   1e7ac:			; <UNDEFINED> instruction: 0x0001e7b0
   1e7b0:	mov	r2, #31
   1e7b4:	cmp	r0, r2
   1e7b8:	ble	1e7d8 <__assert_fail@plt+0xbc90>
   1e7bc:	cmp	r5, #13
   1e7c0:	beq	1e8b4 <__assert_fail@plt+0xbd6c>
   1e7c4:	add	r5, r5, #1
   1e7c8:	b	1e758 <__assert_fail@plt+0xbc10>
   1e7cc:	mov	r2, #30
   1e7d0:	cmp	r0, r2
   1e7d4:	bgt	1e7bc <__assert_fail@plt+0xbc74>
   1e7d8:	add	r0, r0, #1
   1e7dc:	cmp	r0, r2
   1e7e0:	ble	1e8ac <__assert_fail@plt+0xbd64>
   1e7e4:	cmp	r5, #13
   1e7e8:	mov	fp, r5
   1e7ec:	moveq	fp, #1
   1e7f0:	moveq	r0, fp
   1e7f4:	moveq	r2, r4
   1e7f8:	addeq	r4, r4, r0
   1e7fc:	bne	1e8c4 <__assert_fail@plt+0xbd7c>
   1e800:	ldr	r3, [sp, #4]
   1e804:	ldr	r1, [pc, #216]	; 1e8e4 <__assert_fail@plt+0xbd9c>
   1e808:	cmp	r2, #0
   1e80c:	str	r4, [r3]
   1e810:	ldr	r3, [sp, #8]
   1e814:	str	fp, [r3]
   1e818:	smull	r1, r3, r1, r2
   1e81c:	ldr	r1, [sp, #12]
   1e820:	str	r0, [r1]
   1e824:	asr	r0, r2, #31
   1e828:	rsb	r0, r0, r3, asr #5
   1e82c:	add	r3, r4, r4, lsl #3
   1e830:	add	r0, r0, #1
   1e834:	add	r4, r4, r3, lsl #3
   1e838:	add	r0, r0, r0, lsl #1
   1e83c:	add	r1, r2, #3
   1e840:	movlt	r2, r1
   1e844:	add	r4, r4, r4, lsl #2
   1e848:	cmp	r0, #0
   1e84c:	add	r3, r0, #3
   1e850:	sub	r6, r6, r4
   1e854:	movge	r3, r0
   1e858:	asr	r2, r2, #2
   1e85c:	sub	r0, r6, #1720320	; 0x1a4000
   1e860:	sub	r3, r2, r3, asr #2
   1e864:	sub	r0, r0, #740	; 0x2e4
   1e868:	sub	r0, r0, r3
   1e86c:	add	sp, sp, #20
   1e870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e874:	cmp	r8, #0
   1e878:	bne	1e888 <__assert_fail@plt+0xbd40>
   1e87c:	cmp	r7, #0
   1e880:	movne	r3, #28
   1e884:	bne	1e894 <__assert_fail@plt+0xbd4c>
   1e888:	cmp	r9, #0
   1e88c:	moveq	r3, #29
   1e890:	movne	r3, #28
   1e894:	cmp	r0, r3
   1e898:	bgt	1e7c4 <__assert_fail@plt+0xbc7c>
   1e89c:	add	r0, r0, #1
   1e8a0:	cmp	r0, r3
   1e8a4:	bgt	1e8c0 <__assert_fail@plt+0xbd78>
   1e8a8:	mov	fp, #2
   1e8ac:	sub	r2, r4, #1
   1e8b0:	b	1e800 <__assert_fail@plt+0xbcb8>
   1e8b4:	add	r4, r4, #1
   1e8b8:	mov	r5, #1
   1e8bc:	b	1e72c <__assert_fail@plt+0xbbe4>
   1e8c0:	mov	fp, #3
   1e8c4:	sub	r2, r4, #1
   1e8c8:	mov	r0, #1
   1e8cc:	b	1e800 <__assert_fail@plt+0xbcb8>
   1e8d0:	ldr	r2, [pc, #28]	; 1e8f4 <__assert_fail@plt+0xbdac>
   1e8d4:	ldr	r1, [pc, #28]	; 1e8f8 <__assert_fail@plt+0xbdb0>
   1e8d8:	ldr	r0, [pc, #28]	; 1e8fc <__assert_fail@plt+0xbdb4>
   1e8dc:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   1e8e0:	movwlt	r6, #62291	; 0xf353
   1e8e4:	mvnpl	r8, pc, lsl r5
   1e8e8:	andeq	r0, r0, lr, ror #2
   1e8ec:	andeq	r0, r0, sp, ror #2
   1e8f0:	strthi	r0, [r1], #-2115	; 0xfffff7bd
   1e8f4:	andeq	r9, r2, r0, lsl #17
   1e8f8:	andeq	r0, r0, r3, lsl r3
   1e8fc:	andeq	r9, r2, r0, lsr #17
   1e900:	add	r1, r0, #8
   1e904:	b	1e90c <__assert_fail@plt+0xbdc4>
   1e908:	mov	r0, r3
   1e90c:	mov	r3, r0
   1e910:	ldrb	r2, [r3], #1
   1e914:	sub	r2, r2, #48	; 0x30
   1e918:	cmp	r2, #9
   1e91c:	bhi	1e9ac <__assert_fail@plt+0xbe64>
   1e920:	cmp	r3, r1
   1e924:	bne	1e908 <__assert_fail@plt+0xbdc0>
   1e928:	ldrb	r3, [r1]
   1e92c:	cmp	r3, #84	; 0x54
   1e930:	bne	1e9ac <__assert_fail@plt+0xbe64>
   1e934:	add	r3, r0, #2
   1e938:	add	r0, r0, #8
   1e93c:	mov	r1, r3
   1e940:	add	r3, r3, #1
   1e944:	ldrb	r2, [r1]
   1e948:	sub	r2, r2, #48	; 0x30
   1e94c:	cmp	r2, #9
   1e950:	bhi	1e9ac <__assert_fail@plt+0xbe64>
   1e954:	cmp	r3, r0
   1e958:	bne	1e93c <__assert_fail@plt+0xbdf4>
   1e95c:	push	{r4, lr}
   1e960:	ldrb	r4, [r3]
   1e964:	cmp	r4, #90	; 0x5a
   1e968:	ldrbeq	r4, [r1, #2]
   1e96c:	cmp	r4, #0
   1e970:	beq	1e9b4 <__assert_fail@plt+0xbe6c>
   1e974:	tst	r4, #128	; 0x80
   1e978:	bne	1e994 <__assert_fail@plt+0xbe4c>
   1e97c:	bl	12734 <__ctype_b_loc@plt>
   1e980:	lsl	r3, r4, #1
   1e984:	ldr	r2, [r0]
   1e988:	ldrh	r3, [r2, r3]
   1e98c:	tst	r3, #8192	; 0x2000
   1e990:	bne	1e9b4 <__assert_fail@plt+0xbe6c>
   1e994:	cmp	r4, #44	; 0x2c
   1e998:	cmpne	r4, #58	; 0x3a
   1e99c:	movne	r4, #1
   1e9a0:	moveq	r4, #0
   1e9a4:	eor	r0, r4, #1
   1e9a8:	pop	{r4, pc}
   1e9ac:	mov	r0, #0
   1e9b0:	bx	lr
   1e9b4:	mov	r0, #1
   1e9b8:	pop	{r4, pc}
   1e9bc:	add	r2, r0, #4
   1e9c0:	ldrb	r3, [r0], #1
   1e9c4:	sub	r3, r3, #48	; 0x30
   1e9c8:	cmp	r3, #9
   1e9cc:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1e9d0:	cmp	r0, r2
   1e9d4:	bne	1e9c0 <__assert_fail@plt+0xbe78>
   1e9d8:	ldrb	r3, [r0]
   1e9dc:	cmp	r3, #45	; 0x2d
   1e9e0:	bne	1ebb4 <__assert_fail@plt+0xc06c>
   1e9e4:	ldrb	r3, [r0, #1]
   1e9e8:	sub	r3, r3, #48	; 0x30
   1e9ec:	uxtb	r2, r3
   1e9f0:	cmp	r2, #9
   1e9f4:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1e9f8:	ldrb	r2, [r0, #2]
   1e9fc:	sub	r2, r2, #48	; 0x30
   1ea00:	uxtb	ip, r2
   1ea04:	cmp	ip, #9
   1ea08:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1ea0c:	ldrb	ip, [r0, #3]
   1ea10:	cmp	ip, #45	; 0x2d
   1ea14:	bne	1ebb4 <__assert_fail@plt+0xc06c>
   1ea18:	add	r3, r3, r3, lsl #2
   1ea1c:	add	r3, r2, r3, lsl #1
   1ea20:	sub	r3, r3, #1
   1ea24:	cmp	r3, #11
   1ea28:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1ea2c:	ldrb	r3, [r0, #4]
   1ea30:	sub	r3, r3, #48	; 0x30
   1ea34:	uxtb	r2, r3
   1ea38:	cmp	r2, #9
   1ea3c:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1ea40:	ldrb	r2, [r0, #5]
   1ea44:	sub	r2, r2, #48	; 0x30
   1ea48:	uxtb	ip, r2
   1ea4c:	cmp	ip, #9
   1ea50:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1ea54:	add	r3, r3, r3, lsl #2
   1ea58:	add	r3, r2, r3, lsl #1
   1ea5c:	sub	r3, r3, #1
   1ea60:	cmp	r3, #30
   1ea64:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1ea68:	ldrb	r2, [r0, #6]
   1ea6c:	cmp	r2, #0
   1ea70:	sub	r3, r2, #44	; 0x2c
   1ea74:	clz	r3, r3
   1ea78:	lsr	r3, r3, #5
   1ea7c:	moveq	r3, #1
   1ea80:	cmp	r3, #0
   1ea84:	bne	1ebbc <__assert_fail@plt+0xc074>
   1ea88:	cmp	r2, #32
   1ea8c:	cmpne	r2, #9
   1ea90:	bne	1ebb4 <__assert_fail@plt+0xc06c>
   1ea94:	cmp	r1, #0
   1ea98:	bne	1ebbc <__assert_fail@plt+0xc074>
   1ea9c:	ldrb	r3, [r0, #7]
   1eaa0:	cmp	r3, #9
   1eaa4:	cmpne	r3, #32
   1eaa8:	beq	1ebbc <__assert_fail@plt+0xc074>
   1eaac:	sub	r3, r3, #48	; 0x30
   1eab0:	uxtb	r2, r3
   1eab4:	cmp	r2, #9
   1eab8:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1eabc:	ldrb	r2, [r0, #8]
   1eac0:	sub	r2, r2, #48	; 0x30
   1eac4:	uxtb	ip, r2
   1eac8:	cmp	ip, #9
   1eacc:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1ead0:	add	r3, r3, r3, lsl #2
   1ead4:	add	r3, r2, r3, lsl #1
   1ead8:	cmp	r3, #23
   1eadc:	bgt	1ebb4 <__assert_fail@plt+0xc06c>
   1eae0:	ldrb	r3, [r0, #9]
   1eae4:	cmp	r3, #44	; 0x2c
   1eae8:	cmpne	r3, #0
   1eaec:	beq	1ebbc <__assert_fail@plt+0xc074>
   1eaf0:	cmp	r3, #58	; 0x3a
   1eaf4:	bne	1ebb4 <__assert_fail@plt+0xc06c>
   1eaf8:	ldrb	r3, [r0, #10]
   1eafc:	sub	r3, r3, #48	; 0x30
   1eb00:	uxtb	r2, r3
   1eb04:	cmp	r2, #9
   1eb08:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1eb0c:	ldrb	r2, [r0, #11]
   1eb10:	sub	r2, r2, #48	; 0x30
   1eb14:	uxtb	r1, r2
   1eb18:	cmp	r1, #9
   1eb1c:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1eb20:	mov	ip, #10
   1eb24:	mla	r3, ip, r3, r2
   1eb28:	cmp	r3, #59	; 0x3b
   1eb2c:	bgt	1ebb4 <__assert_fail@plt+0xc06c>
   1eb30:	ldrb	r2, [r0, #12]
   1eb34:	cmp	r2, #0
   1eb38:	sub	r3, r2, #44	; 0x2c
   1eb3c:	clz	r3, r3
   1eb40:	lsr	r3, r3, #5
   1eb44:	moveq	r3, #1
   1eb48:	cmp	r3, #0
   1eb4c:	bne	1ebbc <__assert_fail@plt+0xc074>
   1eb50:	cmp	r2, #58	; 0x3a
   1eb54:	bne	1ebb4 <__assert_fail@plt+0xc06c>
   1eb58:	ldrb	r2, [r0, #13]
   1eb5c:	sub	r2, r2, #48	; 0x30
   1eb60:	uxtb	r1, r2
   1eb64:	cmp	r1, #9
   1eb68:	bhi	1ebb4 <__assert_fail@plt+0xc06c>
   1eb6c:	push	{lr}		; (str lr, [sp, #-4]!)
   1eb70:	ldrb	r1, [r0, #14]
   1eb74:	sub	r1, r1, #48	; 0x30
   1eb78:	uxtb	lr, r1
   1eb7c:	cmp	lr, #9
   1eb80:	bhi	1ebcc <__assert_fail@plt+0xc084>
   1eb84:	mla	r2, ip, r2, r1
   1eb88:	cmp	r2, #60	; 0x3c
   1eb8c:	bgt	1ebcc <__assert_fail@plt+0xc084>
   1eb90:	ldrb	r0, [r0, #15]
   1eb94:	and	r3, r0, #223	; 0xdf
   1eb98:	cmp	r3, #0
   1eb9c:	cmpne	r0, #44	; 0x2c
   1eba0:	beq	1ebc4 <__assert_fail@plt+0xc07c>
   1eba4:	sub	r0, r0, #9
   1eba8:	clz	r0, r0
   1ebac:	lsr	r0, r0, #5
   1ebb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebb4:	mov	r0, #0
   1ebb8:	bx	lr
   1ebbc:	mov	r0, #1
   1ebc0:	bx	lr
   1ebc4:	mov	r0, #1
   1ebc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebcc:	mov	r0, r3
   1ebd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ebd4:	add	r1, r0, #8
   1ebd8:	b	1ebe0 <__assert_fail@plt+0xc098>
   1ebdc:	mov	r0, r3
   1ebe0:	mov	r3, r0
   1ebe4:	ldrb	r2, [r3], #1
   1ebe8:	sub	r2, r2, #48	; 0x30
   1ebec:	cmp	r2, #9
   1ebf0:	bhi	1ec2c <__assert_fail@plt+0xc0e4>
   1ebf4:	cmp	r3, r1
   1ebf8:	bne	1ebdc <__assert_fail@plt+0xc094>
   1ebfc:	ldrb	r3, [r1]
   1ec00:	cmp	r3, #84	; 0x54
   1ec04:	bne	1ec2c <__assert_fail@plt+0xc0e4>
   1ec08:	add	r0, r0, #7
   1ec0c:	ldrb	r3, [r1, #1]!
   1ec10:	sub	r3, r3, #48	; 0x30
   1ec14:	cmp	r3, #9
   1ec18:	bhi	1ec2c <__assert_fail@plt+0xc0e4>
   1ec1c:	cmp	r0, r1
   1ec20:	bne	1ec0c <__assert_fail@plt+0xc0c4>
   1ec24:	mov	r0, #0
   1ec28:	bx	lr
   1ec2c:	mov	r0, #161	; 0xa1
   1ec30:	bx	lr
   1ec34:	push	{r4, lr}
   1ec38:	mov	r0, #0
   1ec3c:	bl	12494 <time@plt>
   1ec40:	cmn	r0, #1
   1ec44:	beq	1ec7c <__assert_fail@plt+0xc134>
   1ec48:	ldr	r2, [pc, #52]	; 1ec84 <__assert_fail@plt+0xc13c>
   1ec4c:	ldr	r3, [r2]
   1ec50:	cmp	r3, #0
   1ec54:	popeq	{r4, pc}
   1ec58:	cmp	r3, #1
   1ec5c:	ldr	r2, [r2, #4]
   1ec60:	beq	1ec74 <__assert_fail@plt+0xc12c>
   1ec64:	cmp	r3, #2
   1ec68:	addeq	r0, r0, r2
   1ec6c:	subne	r0, r0, r2
   1ec70:	pop	{r4, pc}
   1ec74:	mov	r0, r2
   1ec78:	pop	{r4, pc}
   1ec7c:	ldr	r0, [pc, #4]	; 1ec88 <__assert_fail@plt+0xc140>
   1ec80:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   1ec84:	andeq	ip, r3, ip, ror #7
   1ec88:			; <UNDEFINED> instruction: 0x000298b8
   1ec8c:	b	12344 <gmtime_r@plt>
   1ec90:	push	{r4, r5, lr}
   1ec94:	sub	sp, sp, #84	; 0x54
   1ec98:	ldr	r4, [pc, #140]	; 1ed2c <__assert_fail@plt+0xc1e4>
   1ec9c:	mov	r5, r0
   1eca0:	ldr	r3, [r4]
   1eca4:	str	r3, [sp, #76]	; 0x4c
   1eca8:	bl	1ec34 <__assert_fail@plt+0xc0ec>
   1ecac:	add	r1, sp, #32
   1ecb0:	str	r0, [sp, #28]
   1ecb4:	add	r0, sp, #28
   1ecb8:	bl	12344 <gmtime_r@plt>
   1ecbc:	subs	r2, r0, #0
   1ecc0:	strbeq	r2, [r5]
   1ecc4:	beq	1ed10 <__assert_fail@plt+0xc1c8>
   1ecc8:	ldr	r1, [r2]
   1eccc:	ldr	r3, [r2, #20]
   1ecd0:	str	r1, [sp, #16]
   1ecd4:	ldr	r1, [r2, #4]
   1ecd8:	add	r3, r3, #1888	; 0x760
   1ecdc:	str	r1, [sp, #12]
   1ece0:	ldr	r1, [r2, #8]
   1ece4:	mov	r0, r5
   1ece8:	str	r1, [sp, #8]
   1ecec:	ldr	r1, [r2, #12]
   1ecf0:	add	r3, r3, #12
   1ecf4:	str	r1, [sp, #4]
   1ecf8:	ldr	r1, [r2, #16]
   1ecfc:	ldr	r2, [pc, #44]	; 1ed30 <__assert_fail@plt+0xc1e8>
   1ed00:	add	r1, r1, #1
   1ed04:	str	r1, [sp]
   1ed08:	mov	r1, #16
   1ed0c:	bl	12920 <gpgrt_snprintf@plt>
   1ed10:	ldr	r2, [sp, #76]	; 0x4c
   1ed14:	ldr	r3, [r4]
   1ed18:	cmp	r2, r3
   1ed1c:	bne	1ed28 <__assert_fail@plt+0xc1e0>
   1ed20:	add	sp, sp, #84	; 0x54
   1ed24:	pop	{r4, r5, pc}
   1ed28:	bl	124e8 <__stack_chk_fail@plt>
   1ed2c:	andeq	fp, r3, r0, lsl fp
   1ed30:	andeq	r9, r2, r8, asr #17
   1ed34:	push	{r4, r5, r6, lr}
   1ed38:	mov	r4, r0
   1ed3c:	mov	r0, #0
   1ed40:	mov	r5, r1
   1ed44:	bl	12494 <time@plt>
   1ed48:	ldr	r3, [pc, #72]	; 1ed98 <__assert_fail@plt+0xc250>
   1ed4c:	cmn	r4, #1
   1ed50:	cmpne	r0, r4
   1ed54:	bne	1ed68 <__assert_fail@plt+0xc220>
   1ed58:	mov	r2, #0
   1ed5c:	str	r2, [r3]
   1ed60:	str	r2, [r3, #4]
   1ed64:	pop	{r4, r5, r6, pc}
   1ed68:	cmp	r5, #0
   1ed6c:	beq	1ed7c <__assert_fail@plt+0xc234>
   1ed70:	mov	r2, #1
   1ed74:	stm	r3, {r2, r4}
   1ed78:	pop	{r4, r5, r6, pc}
   1ed7c:	cmp	r0, r4
   1ed80:	sublt	r4, r4, r0
   1ed84:	movlt	r2, #2
   1ed88:	subge	r4, r0, r4
   1ed8c:	movge	r2, #3
   1ed90:	stm	r3, {r2, r4}
   1ed94:	pop	{r4, r5, r6, pc}
   1ed98:	andeq	ip, r3, ip, ror #7
   1ed9c:	ldr	r3, [pc, #4]	; 1eda8 <__assert_fail@plt+0xc260>
   1eda0:	ldr	r0, [r3]
   1eda4:	bx	lr
   1eda8:	andeq	ip, r3, ip, ror #7
   1edac:	b	1ec34 <__assert_fail@plt+0xc0ec>
   1edb0:	push	{r4, r5, r6, r7, r8, lr}
   1edb4:	sub	sp, sp, #48	; 0x30
   1edb8:	ldr	r4, [pc, #340]	; 1ef14 <__assert_fail@plt+0xc3cc>
   1edbc:	mov	r5, r0
   1edc0:	ldr	r3, [r4]
   1edc4:	str	r3, [sp, #44]	; 0x2c
   1edc8:	bl	12788 <strlen@plt>
   1edcc:	cmp	r0, #10
   1edd0:	bne	1ede0 <__assert_fail@plt+0xc298>
   1edd4:	ldrb	r3, [r5, #4]
   1edd8:	cmp	r3, #45	; 0x2d
   1eddc:	beq	1edfc <__assert_fail@plt+0xc2b4>
   1ede0:	mov	r0, #0
   1ede4:	ldr	r2, [sp, #44]	; 0x2c
   1ede8:	ldr	r3, [r4]
   1edec:	cmp	r2, r3
   1edf0:	bne	1ef10 <__assert_fail@plt+0xc3c8>
   1edf4:	add	sp, sp, #48	; 0x30
   1edf8:	pop	{r4, r5, r6, r7, r8, pc}
   1edfc:	ldrb	r3, [r5, #7]
   1ee00:	cmp	r3, #45	; 0x2d
   1ee04:	bne	1ede0 <__assert_fail@plt+0xc298>
   1ee08:	sub	r2, r5, #1
   1ee0c:	add	r1, r5, #3
   1ee10:	ldrb	r3, [r2, #1]!
   1ee14:	sub	r3, r3, #48	; 0x30
   1ee18:	cmp	r3, #9
   1ee1c:	bhi	1ede0 <__assert_fail@plt+0xc298>
   1ee20:	cmp	r2, r1
   1ee24:	bne	1ee10 <__assert_fail@plt+0xc2c8>
   1ee28:	ldrb	r3, [r5, #5]
   1ee2c:	sub	r3, r3, #48	; 0x30
   1ee30:	cmp	r3, #9
   1ee34:	bhi	1ede0 <__assert_fail@plt+0xc298>
   1ee38:	ldrb	r3, [r5, #6]
   1ee3c:	sub	r3, r3, #48	; 0x30
   1ee40:	cmp	r3, #9
   1ee44:	bhi	1ede0 <__assert_fail@plt+0xc298>
   1ee48:	ldrb	r3, [r5, #8]
   1ee4c:	sub	r3, r3, #48	; 0x30
   1ee50:	cmp	r3, #9
   1ee54:	bhi	1ede0 <__assert_fail@plt+0xc298>
   1ee58:	ldrb	r3, [r5, #9]
   1ee5c:	sub	r3, r3, #48	; 0x30
   1ee60:	cmp	r3, #9
   1ee64:	bhi	1ede0 <__assert_fail@plt+0xc298>
   1ee68:	mov	r2, #10
   1ee6c:	mov	r1, #0
   1ee70:	mov	r0, r5
   1ee74:	bl	123a4 <strtol@plt>
   1ee78:	mov	r2, #10
   1ee7c:	mov	r1, #0
   1ee80:	mov	r7, r0
   1ee84:	add	r0, r5, #5
   1ee88:	bl	123a4 <strtol@plt>
   1ee8c:	mov	r1, #0
   1ee90:	mov	r2, #10
   1ee94:	mov	r6, r0
   1ee98:	add	r0, r5, #8
   1ee9c:	bl	123a4 <strtol@plt>
   1eea0:	ldr	r1, [pc, #112]	; 1ef18 <__assert_fail@plt+0xc3d0>
   1eea4:	sub	r6, r6, #1
   1eea8:	cmp	r7, r1
   1eeac:	movgt	r1, #0
   1eeb0:	movle	r1, #1
   1eeb4:	cmp	r6, #11
   1eeb8:	orrhi	r1, r1, #1
   1eebc:	cmp	r1, #0
   1eec0:	mov	r8, r0
   1eec4:	bne	1ede0 <__assert_fail@plt+0xc298>
   1eec8:	sub	r3, r0, #1
   1eecc:	cmp	r3, #30
   1eed0:	bhi	1ede0 <__assert_fail@plt+0xc298>
   1eed4:	mov	r2, #44	; 0x2c
   1eed8:	mov	r0, sp
   1eedc:	bl	12854 <memset@plt>
   1eee0:	sub	r3, r7, #1888	; 0x760
   1eee4:	sub	r3, r3, #12
   1eee8:	mvn	r2, #0
   1eeec:	mov	r0, sp
   1eef0:	str	r3, [sp, #20]
   1eef4:	str	r8, [sp, #12]
   1eef8:	str	r6, [sp, #16]
   1eefc:	str	r2, [sp, #32]
   1ef00:	bl	123ec <mktime@plt>
   1ef04:	cmn	r0, #1
   1ef08:	bne	1ede4 <__assert_fail@plt+0xc29c>
   1ef0c:	b	1ede0 <__assert_fail@plt+0xc298>
   1ef10:	bl	124e8 <__stack_chk_fail@plt>
   1ef14:	andeq	fp, r3, r0, lsl fp
   1ef18:			; <UNDEFINED> instruction: 0x000007b1
   1ef1c:	ldrb	r3, [r0]
   1ef20:	cmp	r3, #0
   1ef24:	beq	1ef2c <__assert_fail@plt+0xc3e4>
   1ef28:	b	1e900 <__assert_fail@plt+0xbdb8>
   1ef2c:	mov	r0, r3
   1ef30:	bx	lr
   1ef34:	ldrb	r3, [r0]
   1ef38:	cmp	r3, #0
   1ef3c:	beq	1ef44 <__assert_fail@plt+0xc3fc>
   1ef40:	b	1e9bc <__assert_fail@plt+0xbe74>
   1ef44:	mov	r0, r3
   1ef48:	bx	lr
   1ef4c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ef50:	subs	r5, r0, #0
   1ef54:	sub	sp, sp, #28
   1ef58:	ldr	r7, [pc, #356]	; 1f0c4 <__assert_fail@plt+0xc57c>
   1ef5c:	addeq	r5, sp, #4
   1ef60:	mov	r8, #0
   1ef64:	ldr	r3, [r7]
   1ef68:	strb	r8, [r5]
   1ef6c:	ldrb	r6, [r1]
   1ef70:	mov	r4, r1
   1ef74:	str	r3, [sp, #20]
   1ef78:	cmp	r6, r8
   1ef7c:	moveq	r0, r6
   1ef80:	beq	1efa8 <__assert_fail@plt+0xc460>
   1ef84:	mov	r0, r1
   1ef88:	bl	1e900 <__assert_fail@plt+0xbdb8>
   1ef8c:	subs	r9, r0, #0
   1ef90:	bne	1f08c <__assert_fail@plt+0xc544>
   1ef94:	mov	r1, r9
   1ef98:	mov	r0, r4
   1ef9c:	bl	1e9bc <__assert_fail@plt+0xbe74>
   1efa0:	cmp	r0, #0
   1efa4:	bne	1efc0 <__assert_fail@plt+0xc478>
   1efa8:	ldr	r2, [sp, #20]
   1efac:	ldr	r3, [r7]
   1efb0:	cmp	r2, r3
   1efb4:	bne	1f0c0 <__assert_fail@plt+0xc578>
   1efb8:	add	sp, sp, #28
   1efbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1efc0:	strb	r6, [r5]
   1efc4:	ldrb	r2, [r4, #1]
   1efc8:	ldr	r3, [pc, #248]	; 1f0c8 <__assert_fail@plt+0xc580>
   1efcc:	strb	r2, [r5, #1]
   1efd0:	ldrb	r1, [r4, #2]
   1efd4:	mov	r2, #84	; 0x54
   1efd8:	strb	r1, [r5, #2]
   1efdc:	ldrb	r1, [r4, #3]
   1efe0:	strb	r1, [r5, #3]
   1efe4:	ldrb	r1, [r4, #5]
   1efe8:	strb	r1, [r5, #4]
   1efec:	ldrb	r1, [r4, #6]
   1eff0:	strb	r1, [r5, #5]
   1eff4:	ldrb	r1, [r4, #8]
   1eff8:	strb	r1, [r5, #6]
   1effc:	ldrb	r1, [r4, #9]
   1f000:	strb	r9, [r5, #15]
   1f004:	str	r3, [r5, #9]
   1f008:	strb	r1, [r5, #7]
   1f00c:	strh	r3, [r5, #13]
   1f010:	strb	r2, [r5, #8]
   1f014:	ldrb	r3, [r4, #10]
   1f018:	cmp	r3, #32
   1f01c:	cmpne	r3, #9
   1f020:	movne	r0, #10
   1f024:	bne	1efa8 <__assert_fail@plt+0xc460>
   1f028:	ldrb	r3, [r4, #11]
   1f02c:	cmp	r3, #9
   1f030:	cmpne	r3, #32
   1f034:	moveq	r0, #11
   1f038:	beq	1efa8 <__assert_fail@plt+0xc460>
   1f03c:	strb	r3, [r5, #9]
   1f040:	ldrb	r3, [r4, #12]
   1f044:	strb	r3, [r5, #10]
   1f048:	ldrb	r3, [r4, #13]
   1f04c:	cmp	r3, #58	; 0x3a
   1f050:	movne	r0, #13
   1f054:	bne	1efa8 <__assert_fail@plt+0xc460>
   1f058:	ldrb	r3, [r4, #14]
   1f05c:	strb	r3, [r5, #11]
   1f060:	ldrb	r3, [r4, #15]
   1f064:	strb	r3, [r5, #12]
   1f068:	ldrb	r3, [r4, #16]
   1f06c:	cmp	r3, #58	; 0x3a
   1f070:	moveq	r0, #19
   1f074:	ldrbeq	r3, [r4, #17]
   1f078:	movne	r0, #16
   1f07c:	strbeq	r3, [r5, #13]
   1f080:	ldrbeq	r3, [r4, #18]
   1f084:	strbeq	r3, [r5, #14]
   1f088:	b	1efa8 <__assert_fail@plt+0xc460>
   1f08c:	ldr	r2, [r4, #4]
   1f090:	ldr	r3, [r4, #8]
   1f094:	ldr	r1, [r4]
   1f098:	str	r2, [r5, #4]
   1f09c:	str	r1, [r5]
   1f0a0:	str	r3, [r5, #8]
   1f0a4:	ldrh	r2, [r4, #12]
   1f0a8:	ldrb	r3, [r4, #14]
   1f0ac:	mov	r0, #15
   1f0b0:	strh	r2, [r5, #12]
   1f0b4:	strb	r3, [r5, #14]
   1f0b8:	strb	r8, [r5, #15]
   1f0bc:	b	1efa8 <__assert_fail@plt+0xc460>
   1f0c0:	bl	124e8 <__stack_chk_fail@plt>
   1f0c4:	andeq	fp, r3, r0, lsl fp
   1f0c8:	eorscc	r3, r0, r0, lsr r0
   1f0cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f0d0:	sub	sp, sp, #52	; 0x34
   1f0d4:	ldr	r6, [pc, #376]	; 1f254 <__assert_fail@plt+0xc70c>
   1f0d8:	ldrb	r5, [r0]
   1f0dc:	ldr	r3, [r6]
   1f0e0:	cmp	r5, #0
   1f0e4:	str	r3, [sp, #44]	; 0x2c
   1f0e8:	beq	1f248 <__assert_fail@plt+0xc700>
   1f0ec:	mov	r4, r0
   1f0f0:	bl	1e900 <__assert_fail@plt+0xbdb8>
   1f0f4:	cmp	r0, #0
   1f0f8:	beq	1f248 <__assert_fail@plt+0xc700>
   1f0fc:	ldrb	r3, [r4, #1]
   1f100:	sub	r5, r5, #48	; 0x30
   1f104:	ldrb	r1, [r4, #2]
   1f108:	add	r5, r5, r5, lsl #2
   1f10c:	sub	r3, r3, #48	; 0x30
   1f110:	ldrb	r2, [r4, #4]
   1f114:	add	r3, r3, r5, lsl #1
   1f118:	ldrb	r0, [r4, #3]
   1f11c:	sub	r1, r1, #48	; 0x30
   1f120:	add	r3, r3, r3, lsl #2
   1f124:	sub	r2, r2, #48	; 0x30
   1f128:	add	r1, r1, r1, lsl #2
   1f12c:	ldrb	r5, [r4, #5]
   1f130:	sub	r0, r0, #48	; 0x30
   1f134:	add	r3, r3, r3, lsl #2
   1f138:	ldr	r8, [pc, #280]	; 1f258 <__assert_fail@plt+0xc710>
   1f13c:	add	r1, r0, r1, lsl #1
   1f140:	add	r2, r2, r2, lsl #2
   1f144:	ldrb	r0, [r4, #13]
   1f148:	add	r3, r1, r3, lsl #2
   1f14c:	cmp	r3, r8
   1f150:	ldrb	r7, [r4, #6]
   1f154:	ldrb	lr, [r4, #9]
   1f158:	ldrb	ip, [r4, #11]
   1f15c:	add	r2, r5, r2, lsl #1
   1f160:	sub	r1, r0, #48	; 0x30
   1f164:	movgt	r8, #0
   1f168:	movle	r8, #1
   1f16c:	sub	r5, r2, #49	; 0x31
   1f170:	cmp	r5, #11
   1f174:	orrhi	r8, r8, #1
   1f178:	ldrb	r9, [r4, #7]
   1f17c:	add	r0, r1, r1, lsl #2
   1f180:	ldrb	r2, [r4, #12]
   1f184:	ldrb	r1, [r4, #14]
   1f188:	sub	r7, r7, #48	; 0x30
   1f18c:	sub	lr, lr, #48	; 0x30
   1f190:	sub	ip, ip, #48	; 0x30
   1f194:	cmp	r8, #0
   1f198:	ldrb	r8, [r4, #10]
   1f19c:	add	r7, r7, r7, lsl #2
   1f1a0:	add	lr, lr, lr, lsl #2
   1f1a4:	add	ip, ip, ip, lsl #2
   1f1a8:	sub	r9, r9, #48	; 0x30
   1f1ac:	sub	r4, r8, #48	; 0x30
   1f1b0:	sub	r2, r2, #48	; 0x30
   1f1b4:	sub	r1, r1, #48	; 0x30
   1f1b8:	add	r7, r9, r7, lsl #1
   1f1bc:	add	lr, r4, lr, lsl #1
   1f1c0:	add	r2, r2, ip, lsl #1
   1f1c4:	add	r1, r1, r0, lsl #1
   1f1c8:	bne	1f248 <__assert_fail@plt+0xc700>
   1f1cc:	sub	r0, r7, #1
   1f1d0:	cmp	r0, #30
   1f1d4:	bhi	1f248 <__assert_fail@plt+0xc700>
   1f1d8:	cmp	lr, #23
   1f1dc:	bgt	1f248 <__assert_fail@plt+0xc700>
   1f1e0:	cmp	r1, #61	; 0x3d
   1f1e4:	cmple	r2, #59	; 0x3b
   1f1e8:	movgt	ip, #1
   1f1ec:	movle	ip, #0
   1f1f0:	bgt	1f248 <__assert_fail@plt+0xc700>
   1f1f4:	sub	r3, r3, #1888	; 0x760
   1f1f8:	sub	r3, r3, #12
   1f1fc:	str	r3, [sp, #20]
   1f200:	mov	r0, sp
   1f204:	mvn	r3, #0
   1f208:	str	ip, [sp, #24]
   1f20c:	str	r1, [sp]
   1f210:	stmib	sp, {r2, lr}
   1f214:	str	r7, [sp, #12]
   1f218:	str	r5, [sp, #16]
   1f21c:	str	ip, [sp, #28]
   1f220:	str	ip, [sp, #36]	; 0x24
   1f224:	str	ip, [sp, #40]	; 0x28
   1f228:	str	r3, [sp, #32]
   1f22c:	bl	129c8 <timegm@plt>
   1f230:	ldr	r2, [sp, #44]	; 0x2c
   1f234:	ldr	r3, [r6]
   1f238:	cmp	r2, r3
   1f23c:	bne	1f250 <__assert_fail@plt+0xc708>
   1f240:	add	sp, sp, #52	; 0x34
   1f244:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f248:	mvn	r0, #0
   1f24c:	b	1f230 <__assert_fail@plt+0xc6e8>
   1f250:	bl	124e8 <__stack_chk_fail@plt>
   1f254:	andeq	fp, r3, r0, lsl fp
   1f258:			; <UNDEFINED> instruction: 0x000007b1
   1f25c:	push	{r4, r5, lr}
   1f260:	sub	sp, sp, #84	; 0x54
   1f264:	ldr	r4, [pc, #144]	; 1f2fc <__assert_fail@plt+0xc7b4>
   1f268:	cmn	r1, #1
   1f26c:	mov	r5, r0
   1f270:	ldr	r3, [r4]
   1f274:	str	r1, [sp, #28]
   1f278:	str	r3, [sp, #76]	; 0x4c
   1f27c:	moveq	r3, #0
   1f280:	strbeq	r3, [r0]
   1f284:	beq	1f2e0 <__assert_fail@plt+0xc798>
   1f288:	add	r1, sp, #32
   1f28c:	add	r0, sp, #28
   1f290:	bl	12344 <gmtime_r@plt>
   1f294:	mov	r1, r0
   1f298:	mov	r0, r5
   1f29c:	ldr	r2, [r1]
   1f2a0:	ldr	r3, [r1, #20]
   1f2a4:	str	r2, [sp, #16]
   1f2a8:	ldr	r2, [r1, #4]
   1f2ac:	add	r3, r3, #1888	; 0x760
   1f2b0:	str	r2, [sp, #12]
   1f2b4:	ldr	r2, [r1, #8]
   1f2b8:	add	r3, r3, #12
   1f2bc:	str	r2, [sp, #8]
   1f2c0:	ldr	ip, [r1, #12]
   1f2c4:	ldr	r2, [pc, #52]	; 1f300 <__assert_fail@plt+0xc7b8>
   1f2c8:	str	ip, [sp, #4]
   1f2cc:	ldr	ip, [r1, #16]
   1f2d0:	mov	r1, #16
   1f2d4:	add	ip, ip, #1
   1f2d8:	str	ip, [sp]
   1f2dc:	bl	12920 <gpgrt_snprintf@plt>
   1f2e0:	ldr	r2, [sp, #76]	; 0x4c
   1f2e4:	ldr	r3, [r4]
   1f2e8:	cmp	r2, r3
   1f2ec:	bne	1f2f8 <__assert_fail@plt+0xc7b0>
   1f2f0:	add	sp, sp, #84	; 0x54
   1f2f4:	pop	{r4, r5, pc}
   1f2f8:	bl	124e8 <__stack_chk_fail@plt>
   1f2fc:	andeq	fp, r3, r0, lsl fp
   1f300:	andeq	r9, r2, r8, asr #17
   1f304:	push	{r4, r5, r6, lr}
   1f308:	ldrb	r6, [r0]
   1f30c:	cmp	r6, #0
   1f310:	beq	1f3fc <__assert_fail@plt+0xc8b4>
   1f314:	mov	r4, r1
   1f318:	mov	r1, #1
   1f31c:	mov	r5, r0
   1f320:	bl	1e9bc <__assert_fail@plt+0xbe74>
   1f324:	cmp	r0, #0
   1f328:	beq	1f3fc <__assert_fail@plt+0xc8b4>
   1f32c:	sub	r6, r6, #48	; 0x30
   1f330:	ldrb	r3, [r5, #1]
   1f334:	add	r6, r6, r6, lsl #2
   1f338:	ldrb	r1, [r5, #2]
   1f33c:	sub	r3, r3, #48	; 0x30
   1f340:	ldrb	r2, [r5, #5]
   1f344:	add	r3, r3, r6, lsl #1
   1f348:	sub	r1, r1, #48	; 0x30
   1f34c:	ldrb	lr, [r5, #3]
   1f350:	add	r3, r3, r3, lsl #2
   1f354:	sub	r2, r2, #48	; 0x30
   1f358:	add	r0, r1, r1, lsl #2
   1f35c:	add	r3, r3, r3, lsl #2
   1f360:	sub	lr, lr, #48	; 0x30
   1f364:	ldrb	ip, [r5, #6]
   1f368:	add	r1, r2, r2, lsl #2
   1f36c:	add	r0, lr, r0, lsl #1
   1f370:	ldrb	r2, [r5, #8]
   1f374:	add	r3, r0, r3, lsl #2
   1f378:	ldr	r0, [pc, #132]	; 1f404 <__assert_fail@plt+0xc8bc>
   1f37c:	add	r1, ip, r1, lsl #1
   1f380:	cmp	r3, r0
   1f384:	sub	r2, r2, #48	; 0x30
   1f388:	ldrb	ip, [r5, #9]
   1f38c:	movgt	r0, #0
   1f390:	movle	r0, #1
   1f394:	sub	r1, r1, #49	; 0x31
   1f398:	cmp	r1, #11
   1f39c:	orrhi	r0, r0, #1
   1f3a0:	add	r2, r2, r2, lsl #2
   1f3a4:	sub	ip, ip, #48	; 0x30
   1f3a8:	cmp	r0, #0
   1f3ac:	add	r2, ip, r2, lsl #1
   1f3b0:	bne	1f3fc <__assert_fail@plt+0xc8b4>
   1f3b4:	sub	ip, r2, #1
   1f3b8:	cmp	ip, #30
   1f3bc:	bhi	1f3fc <__assert_fail@plt+0xc8b4>
   1f3c0:	sub	r3, r3, #1888	; 0x760
   1f3c4:	sub	r3, r3, #12
   1f3c8:	mvn	lr, #0
   1f3cc:	str	r0, [r4, #24]
   1f3d0:	str	r0, [r4, #28]
   1f3d4:	str	r0, [r4, #36]	; 0x24
   1f3d8:	str	r0, [r4, #40]	; 0x28
   1f3dc:	str	r3, [r4, #20]
   1f3e0:	str	r0, [r4]
   1f3e4:	str	r0, [r4, #4]
   1f3e8:	str	r0, [r4, #8]
   1f3ec:	str	r2, [r4, #12]
   1f3f0:	str	r1, [r4, #16]
   1f3f4:	str	lr, [r4, #32]
   1f3f8:	pop	{r4, r5, r6, pc}
   1f3fc:	mvn	r0, #0
   1f400:	pop	{r4, r5, r6, pc}
   1f404:			; <UNDEFINED> instruction: 0x000007b1
   1f408:	push	{r4, r5, r6, r7, lr}
   1f40c:	sub	sp, sp, #52	; 0x34
   1f410:	ldr	r6, [pc, #404]	; 1f5ac <__assert_fail@plt+0xca64>
   1f414:	ldrb	r4, [r0]
   1f418:	mov	r5, r0
   1f41c:	ldr	r3, [r6]
   1f420:	cmp	r4, #32
   1f424:	mov	r7, r1
   1f428:	str	r3, [sp, #44]	; 0x2c
   1f42c:	bne	1f43c <__assert_fail@plt+0xc8f4>
   1f430:	ldrb	r4, [r5, #1]!
   1f434:	cmp	r4, #32
   1f438:	beq	1f430 <__assert_fail@plt+0xc8e8>
   1f43c:	cmp	r4, #0
   1f440:	moveq	r0, r4
   1f444:	beq	1f57c <__assert_fail@plt+0xca34>
   1f448:	mov	r0, r5
   1f44c:	bl	12788 <strlen@plt>
   1f450:	cmp	r0, #14
   1f454:	bls	1f594 <__assert_fail@plt+0xca4c>
   1f458:	ldrb	r3, [r5, #8]
   1f45c:	cmp	r3, #84	; 0x54
   1f460:	bne	1f594 <__assert_fail@plt+0xca4c>
   1f464:	sub	r4, r4, #48	; 0x30
   1f468:	ldrb	r3, [r5, #1]
   1f46c:	ldrb	r2, [r5, #2]
   1f470:	add	r4, r4, r4, lsl #2
   1f474:	sub	r3, r3, #48	; 0x30
   1f478:	add	r4, r3, r4, lsl #1
   1f47c:	sub	r3, r2, #48	; 0x30
   1f480:	ldrb	r2, [r5, #3]
   1f484:	add	r4, r4, r4, lsl #2
   1f488:	add	r3, r3, r3, lsl #2
   1f48c:	sub	r2, r2, #48	; 0x30
   1f490:	add	r4, r4, r4, lsl #2
   1f494:	add	r3, r2, r3, lsl #1
   1f498:	ldr	r2, [pc, #272]	; 1f5b0 <__assert_fail@plt+0xca68>
   1f49c:	add	r4, r3, r4, lsl #2
   1f4a0:	cmp	r4, r2
   1f4a4:	mvnle	r0, #0
   1f4a8:	ble	1f57c <__assert_fail@plt+0xca34>
   1f4ac:	cmp	r7, #0
   1f4b0:	addne	r3, r5, #15
   1f4b4:	strne	r3, [r7]
   1f4b8:	ldr	r3, [pc, #244]	; 1f5b4 <__assert_fail@plt+0xca6c>
   1f4bc:	cmp	r4, r3
   1f4c0:	ldrgt	r0, [pc, #240]	; 1f5b8 <__assert_fail@plt+0xca70>
   1f4c4:	bgt	1f57c <__assert_fail@plt+0xca34>
   1f4c8:	ldrb	ip, [r5, #4]
   1f4cc:	ldrb	lr, [r5, #5]
   1f4d0:	ldrb	r0, [r5, #6]
   1f4d4:	sub	ip, ip, #48	; 0x30
   1f4d8:	ldrb	r1, [r5, #9]
   1f4dc:	add	ip, ip, ip, lsl #2
   1f4e0:	sub	r4, r4, #1888	; 0x760
   1f4e4:	sub	r4, r4, #12
   1f4e8:	sub	r0, r0, #48	; 0x30
   1f4ec:	sub	r1, r1, #48	; 0x30
   1f4f0:	str	r4, [sp, #20]
   1f4f4:	add	r4, lr, ip, lsl #1
   1f4f8:	ldrb	lr, [r5, #7]
   1f4fc:	ldrb	ip, [r5, #10]
   1f500:	ldrb	r2, [r5, #11]
   1f504:	ldrb	r3, [r5, #13]
   1f508:	add	r0, r0, r0, lsl #2
   1f50c:	add	r1, r1, r1, lsl #2
   1f510:	sub	ip, ip, #48	; 0x30
   1f514:	sub	lr, lr, #48	; 0x30
   1f518:	add	lr, lr, r0, lsl #1
   1f51c:	sub	r2, r2, #48	; 0x30
   1f520:	add	r0, ip, r1, lsl #1
   1f524:	sub	r3, r3, #48	; 0x30
   1f528:	ldrb	ip, [r5, #12]
   1f52c:	ldrb	r1, [r5, #14]
   1f530:	add	r2, r2, r2, lsl #2
   1f534:	add	r3, r3, r3, lsl #2
   1f538:	sub	ip, ip, #48	; 0x30
   1f53c:	sub	r1, r1, #48	; 0x30
   1f540:	add	ip, ip, r2, lsl #1
   1f544:	add	r2, r1, r3, lsl #1
   1f548:	sub	r4, r4, #49	; 0x31
   1f54c:	mov	r3, #0
   1f550:	str	r0, [sp, #8]
   1f554:	mov	r0, sp
   1f558:	str	r4, [sp, #16]
   1f55c:	str	lr, [sp, #12]
   1f560:	stm	sp, {r2, ip}
   1f564:	str	r3, [sp, #28]
   1f568:	str	r3, [sp, #24]
   1f56c:	str	r3, [sp, #32]
   1f570:	str	r3, [sp, #36]	; 0x24
   1f574:	str	r3, [sp, #40]	; 0x28
   1f578:	bl	129c8 <timegm@plt>
   1f57c:	ldr	r2, [sp, #44]	; 0x2c
   1f580:	ldr	r3, [r6]
   1f584:	cmp	r2, r3
   1f588:	bne	1f5a8 <__assert_fail@plt+0xca60>
   1f58c:	add	sp, sp, #52	; 0x34
   1f590:	pop	{r4, r5, r6, r7, pc}
   1f594:	mov	r1, r7
   1f598:	mov	r0, r5
   1f59c:	mov	r2, #10
   1f5a0:	bl	1277c <strtoul@plt>
   1f5a4:	b	1f57c <__assert_fail@plt+0xca34>
   1f5a8:	bl	124e8 <__stack_chk_fail@plt>
   1f5ac:	andeq	fp, r3, r0, lsl fp
   1f5b0:	andeq	r0, r0, fp, ror #14
   1f5b4:	strdeq	r0, [r0], -r5
   1f5b8:	svcvc	0x00e80eeb
   1f5bc:	add	r1, r1, r1, lsl #1
   1f5c0:	rsb	r1, r1, r1, lsl #4
   1f5c4:	rsb	r1, r1, r1, lsl #4
   1f5c8:	add	r0, r0, r1, lsl #7
   1f5cc:	bx	lr
   1f5d0:	ldr	r2, [pc, #216]	; 1f6b0 <__assert_fail@plt+0xcb68>
   1f5d4:	push	{r4, r5, r6, r7, lr}
   1f5d8:	mov	r5, r0
   1f5dc:	umull	r2, r0, r2, r0
   1f5e0:	ldr	r3, [pc, #204]	; 1f6b4 <__assert_fail@plt+0xcb6c>
   1f5e4:	ldr	r2, [pc, #204]	; 1f6b8 <__assert_fail@plt+0xcb70>
   1f5e8:	ldr	r4, [pc, #204]	; 1f6bc <__assert_fail@plt+0xcb74>
   1f5ec:	lsr	r0, r0, #16
   1f5f0:	umull	r1, ip, r3, r5
   1f5f4:	umull	r1, r2, r2, r5
   1f5f8:	umull	r1, r4, r4, r0
   1f5fc:	ldr	r1, [pc, #188]	; 1f6c0 <__assert_fail@plt+0xcb78>
   1f600:	sub	lr, r0, r4
   1f604:	lsr	ip, ip, #5
   1f608:	lsr	r2, r2, #11
   1f60c:	add	r4, r4, lr, lsr #1
   1f610:	umull	lr, r3, r3, ip
   1f614:	umull	lr, r1, r1, r2
   1f618:	ldr	r6, [pc, #164]	; 1f6c4 <__assert_fail@plt+0xcb7c>
   1f61c:	lsr	r4, r4, #8
   1f620:	lsr	r3, r3, #5
   1f624:	add	lr, r4, r4, lsl #3
   1f628:	umull	r7, r6, r6, r5
   1f62c:	lsr	r1, r1, #4
   1f630:	add	r4, r4, lr, lsl #3
   1f634:	rsb	r3, r3, r3, lsl #4
   1f638:	add	r1, r1, r1, lsl #1
   1f63c:	sub	sp, sp, #20
   1f640:	add	r4, r4, r4, lsl #2
   1f644:	sub	r3, ip, r3, lsl #2
   1f648:	sub	r1, r2, r1, lsl #3
   1f64c:	sub	r4, r0, r4
   1f650:	lsr	r6, r6, #23
   1f654:	str	r3, [sp, #12]
   1f658:	str	r1, [sp, #8]
   1f65c:	ldr	r3, [pc, #100]	; 1f6c8 <__assert_fail@plt+0xcb80>
   1f660:	str	r4, [sp, #4]
   1f664:	str	r6, [sp]
   1f668:	mov	r2, #30
   1f66c:	mov	r1, #1
   1f670:	ldr	r0, [pc, #84]	; 1f6cc <__assert_fail@plt+0xcb84>
   1f674:	bl	12830 <__sprintf_chk@plt>
   1f678:	ldr	r3, [pc, #80]	; 1f6d0 <__assert_fail@plt+0xcb88>
   1f67c:	cmp	r5, r3
   1f680:	bhi	1f6a4 <__assert_fail@plt+0xcb5c>
   1f684:	cmp	r4, #0
   1f688:	movne	r1, #121	; 0x79
   1f68c:	moveq	r1, #100	; 0x64
   1f690:	ldr	r0, [pc, #52]	; 1f6cc <__assert_fail@plt+0xcb84>
   1f694:	bl	127ac <strchr@plt>
   1f698:	add	r0, r0, #1
   1f69c:	add	sp, sp, #20
   1f6a0:	pop	{r4, r5, r6, r7, pc}
   1f6a4:	ldr	r0, [pc, #32]	; 1f6cc <__assert_fail@plt+0xcb84>
   1f6a8:	add	sp, sp, #20
   1f6ac:	pop	{r4, r5, r6, r7, pc}
   1f6b0:	eorgt	r4, lr, #29360128	; 0x1c00000
   1f6b4:	stmhi	r8, {r0, r3, r7, fp, pc}
   1f6b8:			; <UNDEFINED> instruction: 0x91a2b3c5
   1f6bc:	ldrvs	pc, [r9, -r1, ror #6]
   1f6c0:	bge	feaca174 <stdout@@GLIBC_2.4+0xfea8def0>
   1f6c4:	ldrmi	sl, [r8], #-1147	; 0xfffffb85
   1f6c8:	andeq	r9, r2, r4, ror #17
   1f6cc:	strdeq	ip, [r3], -r4
   1f6d0:	mvneq	r3, pc, ror r3
   1f6d4:	subs	r3, r1, #0
   1f6d8:	push	{r4, r5, lr}
   1f6dc:	mov	r4, r0
   1f6e0:	sub	sp, sp, #12
   1f6e4:	beq	1f7ac <__assert_fail@plt+0xcc64>
   1f6e8:	mov	r1, r4
   1f6ec:	mov	r0, r3
   1f6f0:	bl	128cc <difftime@plt>
   1f6f4:	vcmpe.f64	d0, #0.0
   1f6f8:	vmrs	APSR_nzcv, fpscr
   1f6fc:	bmi	1f808 <__assert_fail@plt+0xccc0>
   1f700:	vldr	d6, [pc, #272]	; 1f818 <__assert_fail@plt+0xccd0>
   1f704:	ldr	ip, [pc, #276]	; 1f820 <__assert_fail@plt+0xccd8>
   1f708:	ldr	r5, [pc, #276]	; 1f824 <__assert_fail@plt+0xccdc>
   1f70c:	ldr	r0, [pc, #276]	; 1f828 <__assert_fail@plt+0xcce0>
   1f710:	vdiv.f64	d7, d0, d6
   1f714:	vcvt.u32.f64	s13, d0
   1f718:	ldr	lr, [pc, #268]	; 1f82c <__assert_fail@plt+0xcce4>
   1f71c:	vmov	r4, s13
   1f720:	umull	r3, r2, ip, r4
   1f724:	lsr	r2, r2, #5
   1f728:	rsb	r2, r2, r2, lsl #4
   1f72c:	sub	r2, r4, r2, lsl #2
   1f730:	vcvt.u32.f64	s15, d7
   1f734:	vmov	r3, s15
   1f738:	lsr	r4, r3, #5
   1f73c:	umull	r1, ip, ip, r3
   1f740:	umull	r1, r4, r5, r4
   1f744:	lsr	ip, ip, #5
   1f748:	umull	r1, r0, r0, r4
   1f74c:	sub	r1, r4, r0
   1f750:	mov	r5, ip
   1f754:	add	r0, r0, r1, lsr #1
   1f758:	umull	r1, lr, lr, ip
   1f75c:	lsr	r0, r0, #8
   1f760:	lsr	lr, lr, #4
   1f764:	add	r1, r0, r0, lsl #3
   1f768:	rsb	ip, ip, ip, lsl #4
   1f76c:	add	r0, r0, r1, lsl #3
   1f770:	add	lr, lr, lr, lsl #1
   1f774:	add	r0, r0, r0, lsl #2
   1f778:	subs	r0, r4, r0
   1f77c:	sub	ip, r3, ip, lsl #2
   1f780:	sub	lr, r5, lr, lsl #3
   1f784:	bne	1f7b8 <__assert_fail@plt+0xcc70>
   1f788:	cmp	lr, #0
   1f78c:	bne	1f7ec <__assert_fail@plt+0xcca4>
   1f790:	cmp	ip, #0
   1f794:	beq	1f7d8 <__assert_fail@plt+0xcc90>
   1f798:	mov	r1, ip
   1f79c:	ldr	r0, [pc, #140]	; 1f830 <__assert_fail@plt+0xcce8>
   1f7a0:	add	sp, sp, #12
   1f7a4:	pop	{r4, r5, lr}
   1f7a8:	b	21194 <__assert_fail@plt+0xe64c>
   1f7ac:	bl	1ec34 <__assert_fail@plt+0xc0ec>
   1f7b0:	mov	r3, r0
   1f7b4:	b	1f6e8 <__assert_fail@plt+0xcba0>
   1f7b8:	str	r2, [sp]
   1f7bc:	mov	r1, r0
   1f7c0:	mov	r3, ip
   1f7c4:	mov	r2, lr
   1f7c8:	ldr	r0, [pc, #100]	; 1f834 <__assert_fail@plt+0xccec>
   1f7cc:	bl	21194 <__assert_fail@plt+0xe64c>
   1f7d0:	add	sp, sp, #12
   1f7d4:	pop	{r4, r5, pc}
   1f7d8:	mov	r1, r2
   1f7dc:	ldr	r0, [pc, #84]	; 1f838 <__assert_fail@plt+0xccf0>
   1f7e0:	add	sp, sp, #12
   1f7e4:	pop	{r4, r5, lr}
   1f7e8:	b	21194 <__assert_fail@plt+0xe64c>
   1f7ec:	mov	r3, r2
   1f7f0:	mov	r1, lr
   1f7f4:	mov	r2, ip
   1f7f8:	ldr	r0, [pc, #60]	; 1f83c <__assert_fail@plt+0xccf4>
   1f7fc:	add	sp, sp, #12
   1f800:	pop	{r4, r5, lr}
   1f804:	b	21194 <__assert_fail@plt+0xe64c>
   1f808:	ldr	r0, [pc, #48]	; 1f840 <__assert_fail@plt+0xccf8>
   1f80c:	add	sp, sp, #12
   1f810:	pop	{r4, r5, lr}
   1f814:	b	12b0c <gcry_strdup@plt>
   1f818:	andeq	r0, r0, r0
   1f81c:	submi	r0, lr, r0
   1f820:	stmhi	r8, {r0, r3, r7, fp, pc}
   1f824:	ldreq	r5, [r0, #2822]!	; 0xb06
   1f828:	ldrvs	pc, [r9, -r1, ror #6]
   1f82c:	bge	feaca2e0 <stdout@@GLIBC_2.4+0xfea8e05c>
   1f830:	andeq	r9, r2, ip, lsl r9
   1f834:	andeq	r9, r2, r0, lsl #18
   1f838:	andeq	r9, r2, r4, lsr #18
   1f83c:	andeq	r9, r2, r0, lsl r9
   1f840:	strdeq	r9, [r2], -r4
   1f844:	push	{r4, lr}
   1f848:	sub	sp, sp, #16
   1f84c:	ldr	r4, [pc, #136]	; 1f8dc <__assert_fail@plt+0xcd94>
   1f850:	cmp	r0, #0
   1f854:	str	r0, [sp, #8]
   1f858:	ldr	r3, [r4]
   1f85c:	str	r3, [sp, #12]
   1f860:	blt	1f8b8 <__assert_fail@plt+0xcd70>
   1f864:	add	r0, sp, #8
   1f868:	bl	12890 <gmtime@plt>
   1f86c:	ldr	r2, [pc, #108]	; 1f8e0 <__assert_fail@plt+0xcd98>
   1f870:	ldr	r1, [r0, #12]
   1f874:	ldr	r3, [r0, #20]
   1f878:	str	r1, [sp, #4]
   1f87c:	ldr	r1, [r0, #16]
   1f880:	add	r3, r3, #1888	; 0x760
   1f884:	add	r1, r1, #1
   1f888:	str	r1, [sp]
   1f88c:	add	r3, r3, #12
   1f890:	mov	r1, #16
   1f894:	ldr	r0, [pc, #72]	; 1f8e4 <__assert_fail@plt+0xcd9c>
   1f898:	bl	12920 <gpgrt_snprintf@plt>
   1f89c:	ldr	r2, [sp, #12]
   1f8a0:	ldr	r3, [r4]
   1f8a4:	ldr	r0, [pc, #56]	; 1f8e4 <__assert_fail@plt+0xcd9c>
   1f8a8:	cmp	r2, r3
   1f8ac:	bne	1f8d8 <__assert_fail@plt+0xcd90>
   1f8b0:	add	sp, sp, #16
   1f8b4:	pop	{r4, pc}
   1f8b8:	ldr	r2, [pc, #40]	; 1f8e8 <__assert_fail@plt+0xcda0>
   1f8bc:	ldr	r3, [pc, #32]	; 1f8e4 <__assert_fail@plt+0xcd9c>
   1f8c0:	ldm	r2, {r0, r1, r2}
   1f8c4:	lsr	ip, r2, #16
   1f8c8:	stmia	r3!, {r0, r1}
   1f8cc:	strh	r2, [r3], #2
   1f8d0:	strb	ip, [r3]
   1f8d4:	b	1f89c <__assert_fail@plt+0xcd54>
   1f8d8:	bl	124e8 <__stack_chk_fail@plt>
   1f8dc:	andeq	fp, r3, r0, lsl fp
   1f8e0:	andeq	r9, r2, r4, lsr r9
   1f8e4:	andeq	ip, r3, r4, lsl r4
   1f8e8:	andeq	r9, r2, r8, lsr #18
   1f8ec:	push	{r4, lr}
   1f8f0:	sub	sp, sp, #32
   1f8f4:	ldr	r4, [pc, #156]	; 1f998 <__assert_fail@plt+0xce50>
   1f8f8:	cmp	r0, #0
   1f8fc:	str	r0, [sp, #24]
   1f900:	ldr	r3, [r4]
   1f904:	str	r3, [sp, #28]
   1f908:	blt	1f978 <__assert_fail@plt+0xce30>
   1f90c:	add	r0, sp, #24
   1f910:	bl	12890 <gmtime@plt>
   1f914:	ldr	r2, [pc, #128]	; 1f99c <__assert_fail@plt+0xce54>
   1f918:	ldr	r1, [r0]
   1f91c:	ldr	r3, [r0, #20]
   1f920:	str	r1, [sp, #16]
   1f924:	ldr	r1, [r0, #4]
   1f928:	add	r3, r3, #1888	; 0x760
   1f92c:	str	r1, [sp, #12]
   1f930:	ldr	r1, [r0, #8]
   1f934:	add	r3, r3, #12
   1f938:	str	r1, [sp, #8]
   1f93c:	ldr	ip, [r0, #12]
   1f940:	mov	r1, #30
   1f944:	str	ip, [sp, #4]
   1f948:	ldr	ip, [r0, #16]
   1f94c:	ldr	r0, [pc, #76]	; 1f9a0 <__assert_fail@plt+0xce58>
   1f950:	add	ip, ip, #1
   1f954:	str	ip, [sp]
   1f958:	bl	12920 <gpgrt_snprintf@plt>
   1f95c:	ldr	r2, [sp, #28]
   1f960:	ldr	r3, [r4]
   1f964:	ldr	r0, [pc, #52]	; 1f9a0 <__assert_fail@plt+0xce58>
   1f968:	cmp	r2, r3
   1f96c:	bne	1f994 <__assert_fail@plt+0xce4c>
   1f970:	add	sp, sp, #32
   1f974:	pop	{r4, pc}
   1f978:	ldr	lr, [pc, #36]	; 1f9a4 <__assert_fail@plt+0xce5c>
   1f97c:	ldr	ip, [pc, #28]	; 1f9a0 <__assert_fail@plt+0xce58>
   1f980:	ldm	lr!, {r0, r1, r2, r3}
   1f984:	ldr	lr, [lr]
   1f988:	stmia	ip!, {r0, r1, r2, r3}
   1f98c:	str	lr, [ip]
   1f990:	b	1f95c <__assert_fail@plt+0xce14>
   1f994:	bl	124e8 <__stack_chk_fail@plt>
   1f998:	andeq	fp, r3, r0, lsl fp
   1f99c:	andeq	r9, r2, r8, asr r9
   1f9a0:	andeq	ip, r3, r4, lsr #8
   1f9a4:	andeq	r9, r2, r4, asr #18
   1f9a8:	push	{r4, r5, r6, lr}
   1f9ac:	sub	sp, sp, #8
   1f9b0:	ldr	r4, [pc, #188]	; 1fa74 <__assert_fail@plt+0xcf2c>
   1f9b4:	cmp	r0, #0
   1f9b8:	str	r0, [sp]
   1f9bc:	ldr	r3, [r4]
   1f9c0:	str	r3, [sp, #4]
   1f9c4:	blt	1fa3c <__assert_fail@plt+0xcef4>
   1f9c8:	mov	r0, sp
   1f9cc:	bl	126ec <localtime@plt>
   1f9d0:	mov	r6, r0
   1f9d4:	ldr	r0, [pc, #156]	; 1fa78 <__assert_fail@plt+0xcf30>
   1f9d8:	bl	12998 <nl_langinfo@plt>
   1f9dc:	mov	r2, #47	; 0x2f
   1f9e0:	mov	r1, r0
   1f9e4:	ldr	r0, [pc, #144]	; 1fa7c <__assert_fail@plt+0xcf34>
   1f9e8:	bl	16f50 <__assert_fail@plt+0x4408>
   1f9ec:	ldr	r1, [pc, #140]	; 1fa80 <__assert_fail@plt+0xcf38>
   1f9f0:	ldr	r0, [pc, #132]	; 1fa7c <__assert_fail@plt+0xcf34>
   1f9f4:	bl	12314 <strstr@plt>
   1f9f8:	cmp	r0, #0
   1f9fc:	beq	1fa5c <__assert_fail@plt+0xcf14>
   1fa00:	ldr	r5, [pc, #124]	; 1fa84 <__assert_fail@plt+0xcf3c>
   1fa04:	mov	r3, r6
   1fa08:	add	r2, r5, #140	; 0x8c
   1fa0c:	add	r0, r5, #88	; 0x58
   1fa10:	mov	r1, #49	; 0x31
   1fa14:	bl	126e0 <strftime@plt>
   1fa18:	mov	r3, #0
   1fa1c:	strb	r3, [r5, #137]	; 0x89
   1fa20:	ldr	r2, [sp, #4]
   1fa24:	ldr	r3, [r4]
   1fa28:	ldr	r0, [pc, #88]	; 1fa88 <__assert_fail@plt+0xcf40>
   1fa2c:	cmp	r2, r3
   1fa30:	bne	1fa70 <__assert_fail@plt+0xcf28>
   1fa34:	add	sp, sp, #8
   1fa38:	pop	{r4, r5, r6, pc}
   1fa3c:	ldr	r2, [pc, #72]	; 1fa8c <__assert_fail@plt+0xcf44>
   1fa40:	ldr	r3, [pc, #64]	; 1fa88 <__assert_fail@plt+0xcf40>
   1fa44:	ldm	r2, {r0, r1, r2}
   1fa48:	lsr	ip, r2, #16
   1fa4c:	stmia	r3!, {r0, r1}
   1fa50:	strh	r2, [r3], #2
   1fa54:	strb	ip, [r3]
   1fa58:	b	1fa20 <__assert_fail@plt+0xced8>
   1fa5c:	mov	r2, #50	; 0x32
   1fa60:	ldr	r1, [pc, #40]	; 1fa90 <__assert_fail@plt+0xcf48>
   1fa64:	ldr	r0, [pc, #16]	; 1fa7c <__assert_fail@plt+0xcf34>
   1fa68:	bl	12818 <__strcat_chk@plt>
   1fa6c:	b	1fa00 <__assert_fail@plt+0xceb8>
   1fa70:	bl	124e8 <__stack_chk_fail@plt>
   1fa74:	andeq	fp, r3, r0, lsl fp
   1fa78:	andeq	r0, r2, r8, lsr #32
   1fa7c:	andeq	ip, r3, r8, ror r4
   1fa80:	andeq	r9, r2, r8, ror r9
   1fa84:	andeq	ip, r3, ip, ror #7
   1fa88:	andeq	ip, r3, r4, asr #8
   1fa8c:	andeq	r9, r2, r8, lsr #18
   1fa90:	andeq	r9, r2, ip, ror r9
   1fa94:	push	{r4, r5, r6, r7, lr}
   1fa98:	sub	sp, sp, #76	; 0x4c
   1fa9c:	ldr	r4, [pc, #216]	; 1fb7c <__assert_fail@plt+0xd034>
   1faa0:	cmp	r0, #0
   1faa4:	str	r0, [sp, #20]
   1faa8:	ldr	r3, [r4]
   1faac:	str	r3, [sp, #68]	; 0x44
   1fab0:	blt	1fb68 <__assert_fail@plt+0xd020>
   1fab4:	add	r1, sp, #24
   1fab8:	add	r0, sp, #20
   1fabc:	bl	12344 <gmtime_r@plt>
   1fac0:	cmp	r0, #0
   1fac4:	beq	1fb50 <__assert_fail@plt+0xd008>
   1fac8:	ldr	r1, [r0, #24]
   1facc:	ldr	lr, [pc, #172]	; 1fb80 <__assert_fail@plt+0xd038>
   1fad0:	ldr	r3, [r0, #16]
   1fad4:	ldr	ip, [pc, #168]	; 1fb84 <__assert_fail@plt+0xd03c>
   1fad8:	ldr	r7, [r0]
   1fadc:	smull	r2, lr, lr, r1
   1fae0:	smull	r2, r6, ip, r3
   1fae4:	ldr	r2, [r0, #12]
   1fae8:	str	r7, [sp, #12]
   1faec:	ldr	ip, [r0, #4]
   1faf0:	add	r5, lr, r1
   1faf4:	str	ip, [sp, #8]
   1faf8:	ldr	lr, [r0, #8]
   1fafc:	asr	ip, r3, #31
   1fb00:	str	lr, [sp, #4]
   1fb04:	rsb	ip, ip, r6, asr #1
   1fb08:	asr	lr, r1, #31
   1fb0c:	rsb	lr, lr, r5, asr #2
   1fb10:	add	ip, ip, ip, lsl #1
   1fb14:	ldr	r0, [r0, #20]
   1fb18:	rsb	lr, lr, lr, lsl #3
   1fb1c:	sub	r1, r1, lr
   1fb20:	sub	r3, r3, ip, lsl #2
   1fb24:	add	r0, r0, #1888	; 0x760
   1fb28:	ldr	lr, [pc, #88]	; 1fb88 <__assert_fail@plt+0xd040>
   1fb2c:	ldr	ip, [pc, #88]	; 1fb8c <__assert_fail@plt+0xd044>
   1fb30:	add	r0, r0, #12
   1fb34:	add	r1, r1, r1, lsl #1
   1fb38:	add	r3, r3, r3, lsl #1
   1fb3c:	str	r0, [sp]
   1fb40:	add	r1, lr, r1
   1fb44:	add	r3, ip, r3
   1fb48:	ldr	r0, [pc, #64]	; 1fb90 <__assert_fail@plt+0xd048>
   1fb4c:	bl	21194 <__assert_fail@plt+0xe64c>
   1fb50:	ldr	r2, [sp, #68]	; 0x44
   1fb54:	ldr	r3, [r4]
   1fb58:	cmp	r2, r3
   1fb5c:	bne	1fb78 <__assert_fail@plt+0xd030>
   1fb60:	add	sp, sp, #76	; 0x4c
   1fb64:	pop	{r4, r5, r6, r7, pc}
   1fb68:	mov	r0, #22
   1fb6c:	bl	129a4 <gpg_err_set_errno@plt>
   1fb70:	mov	r0, #0
   1fb74:	b	1fb50 <__assert_fail@plt+0xd008>
   1fb78:	bl	124e8 <__stack_chk_fail@plt>
   1fb7c:	andeq	fp, r3, r0, lsl fp
   1fb80:	subls	r2, r9, #-1828716544	; 0x93000000
   1fb84:	bcs	feaca638 <stdout@@GLIBC_2.4+0xfea8e3b4>
   1fb88:	andeq	r9, r2, r8, lsr #19
   1fb8c:	andeq	r9, r2, r0, lsl #19
   1fb90:	andeq	r9, r2, r0, asr #19
   1fb94:	ldrb	r3, [r0]
   1fb98:	cmp	r3, #0
   1fb9c:	beq	1fba4 <__assert_fail@plt+0xd05c>
   1fba0:	b	1ebd4 <__assert_fail@plt+0xc08c>
   1fba4:	mov	r0, #26
   1fba8:	bx	lr
   1fbac:	subs	r1, r0, #0
   1fbb0:	push	{lr}		; (str lr, [sp, #-4]!)
   1fbb4:	sub	sp, sp, #20
   1fbb8:	beq	1fbc8 <__assert_fail@plt+0xd080>
   1fbbc:	ldrb	r3, [r1]
   1fbc0:	cmp	r3, #0
   1fbc4:	bne	1fbec <__assert_fail@plt+0xd0a4>
   1fbc8:	mov	r2, #5
   1fbcc:	ldr	r1, [pc, #72]	; 1fc1c <__assert_fail@plt+0xd0d4>
   1fbd0:	mov	r0, #0
   1fbd4:	bl	124dc <dcgettext@plt>
   1fbd8:	mov	r1, r0
   1fbdc:	ldr	r0, [pc, #60]	; 1fc20 <__assert_fail@plt+0xd0d8>
   1fbe0:	add	sp, sp, #20
   1fbe4:	pop	{lr}		; (ldr lr, [sp], #4)
   1fbe8:	b	1c958 <__assert_fail@plt+0x9e10>
   1fbec:	add	r0, r1, #13
   1fbf0:	add	r2, r1, #11
   1fbf4:	add	r3, r1, #9
   1fbf8:	str	r0, [sp, #8]
   1fbfc:	str	r2, [sp, #4]
   1fc00:	str	r3, [sp]
   1fc04:	add	r2, r1, #4
   1fc08:	add	r3, r1, #6
   1fc0c:	ldr	r0, [pc, #16]	; 1fc24 <__assert_fail@plt+0xd0dc>
   1fc10:	bl	1c958 <__assert_fail@plt+0x9e10>
   1fc14:	add	sp, sp, #20
   1fc18:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc1c:	andeq	r9, r2, ip, ror #19
   1fc20:	andeq	sl, r2, r0, ror #30
   1fc24:	strdeq	r9, [r2], -r4
   1fc28:	ldrb	r3, [r1]
   1fc2c:	cmp	r3, #0
   1fc30:	beq	1fc90 <__assert_fail@plt+0xd148>
   1fc34:	push	{r4, r5, r6, lr}
   1fc38:	mov	r5, r0
   1fc3c:	mov	r0, r1
   1fc40:	mov	r4, r1
   1fc44:	bl	12788 <strlen@plt>
   1fc48:	cmp	r0, #15
   1fc4c:	bne	1fc98 <__assert_fail@plt+0xd150>
   1fc50:	ldrb	r3, [r4, #8]
   1fc54:	cmp	r3, #84	; 0x54
   1fc58:	bne	1fc98 <__assert_fail@plt+0xd150>
   1fc5c:	ldr	r1, [r4]
   1fc60:	ldr	r2, [r4, #4]
   1fc64:	ldr	r3, [r4, #8]
   1fc68:	str	r1, [r5]
   1fc6c:	str	r3, [r5, #8]
   1fc70:	str	r2, [r5, #4]
   1fc74:	ldrh	r1, [r4, #12]
   1fc78:	ldrb	r2, [r4, #14]
   1fc7c:	mov	r3, #0
   1fc80:	strh	r1, [r5, #12]
   1fc84:	strb	r2, [r5, #14]
   1fc88:	strb	r3, [r5, #15]
   1fc8c:	pop	{r4, r5, r6, pc}
   1fc90:	strb	r3, [r0]
   1fc94:	bx	lr
   1fc98:	ldr	r2, [pc, #8]	; 1fca8 <__assert_fail@plt+0xd160>
   1fc9c:	ldr	r1, [pc, #8]	; 1fcac <__assert_fail@plt+0xd164>
   1fca0:	ldr	r0, [pc, #8]	; 1fcb0 <__assert_fail@plt+0xd168>
   1fca4:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   1fca8:	muleq	r2, r0, r8
   1fcac:	andeq	r0, r0, r9, lsl #7
   1fcb0:	andeq	r9, r2, r0, lsr #17
   1fcb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcb8:	sub	sp, sp, #52	; 0x34
   1fcbc:	ldr	r8, [pc, #576]	; 1ff04 <__assert_fail@plt+0xd3bc>
   1fcc0:	ldrb	r5, [r0]
   1fcc4:	ldr	r3, [r8]
   1fcc8:	cmp	r5, #0
   1fccc:	str	r3, [sp, #44]	; 0x2c
   1fcd0:	moveq	r9, #26
   1fcd4:	beq	1fedc <__assert_fail@plt+0xd394>
   1fcd8:	mov	r4, r0
   1fcdc:	mov	r7, r1
   1fce0:	bl	1ebd4 <__assert_fail@plt+0xc08c>
   1fce4:	subs	r9, r0, #0
   1fce8:	bne	1fedc <__assert_fail@plt+0xd394>
   1fcec:	cmn	r7, #-2147483585	; 0x8000003f
   1fcf0:	bhi	1fef8 <__assert_fail@plt+0xd3b0>
   1fcf4:	sub	r5, r5, #48	; 0x30
   1fcf8:	ldrb	r3, [r4, #1]
   1fcfc:	ldrb	r6, [r4, #2]
   1fd00:	add	r5, r5, r5, lsl #2
   1fd04:	sub	r3, r3, #48	; 0x30
   1fd08:	add	r5, r3, r5, lsl #1
   1fd0c:	ldrb	fp, [r4, #4]
   1fd10:	sub	r3, r6, #48	; 0x30
   1fd14:	ldrb	ip, [r4, #3]
   1fd18:	add	r5, r5, r5, lsl #2
   1fd1c:	add	r6, r3, r3, lsl #2
   1fd20:	ldrb	r2, [r4, #6]
   1fd24:	sub	fp, fp, #48	; 0x30
   1fd28:	ldrb	r1, [r4, #5]
   1fd2c:	add	r5, r5, r5, lsl #2
   1fd30:	sub	r3, ip, #48	; 0x30
   1fd34:	ldrb	sl, [r4, #9]
   1fd38:	ldrb	lr, [r4, #11]
   1fd3c:	ldrb	r0, [r4, #13]
   1fd40:	add	r3, r3, r6, lsl #1
   1fd44:	add	fp, fp, fp, lsl #2
   1fd48:	ldr	r6, [pc, #440]	; 1ff08 <__assert_fail@plt+0xd3c0>
   1fd4c:	add	r3, r3, r5, lsl #2
   1fd50:	sub	r2, r2, #48	; 0x30
   1fd54:	ldrb	ip, [r4, #7]
   1fd58:	sub	r1, r1, #48	; 0x30
   1fd5c:	add	r1, r1, fp, lsl #1
   1fd60:	sub	sl, sl, #48	; 0x30
   1fd64:	sub	lr, lr, #48	; 0x30
   1fd68:	sub	r0, r0, #48	; 0x30
   1fd6c:	cmp	r3, r6
   1fd70:	ldrb	r5, [r4, #10]
   1fd74:	ldrb	r6, [r4, #12]
   1fd78:	ldrb	fp, [r4, #14]
   1fd7c:	add	r2, r2, r2, lsl #2
   1fd80:	sub	ip, ip, #48	; 0x30
   1fd84:	add	sl, sl, sl, lsl #2
   1fd88:	add	lr, lr, lr, lsl #2
   1fd8c:	add	r0, r0, r0, lsl #2
   1fd90:	add	r2, ip, r2, lsl #1
   1fd94:	sub	r5, r5, #48	; 0x30
   1fd98:	sub	r6, r6, #48	; 0x30
   1fd9c:	sub	fp, fp, #48	; 0x30
   1fda0:	str	r3, [sp, #32]
   1fda4:	str	r1, [sp, #36]	; 0x24
   1fda8:	str	r2, [sp, #40]	; 0x28
   1fdac:	add	ip, r5, sl, lsl #1
   1fdb0:	add	lr, r6, lr, lsl #1
   1fdb4:	add	r0, fp, r0, lsl #1
   1fdb8:	ble	1fef8 <__assert_fail@plt+0xd3b0>
   1fdbc:	ldr	r5, [pc, #328]	; 1ff0c <__assert_fail@plt+0xd3c4>
   1fdc0:	add	r7, r7, r0
   1fdc4:	str	r3, [sp, #24]
   1fdc8:	smull	r0, r6, r5, r7
   1fdcc:	add	r6, r6, r7
   1fdd0:	asr	fp, r7, #31
   1fdd4:	rsb	r6, fp, r6, asr #5
   1fdd8:	add	r6, r6, lr
   1fddc:	smull	r0, r5, r5, r6
   1fde0:	add	r5, r5, r6
   1fde4:	asr	sl, r6, #31
   1fde8:	mov	r0, r3
   1fdec:	rsb	r5, sl, r5, asr #5
   1fdf0:	add	r5, r5, ip
   1fdf4:	bl	1e5f0 <__assert_fail@plt+0xbaa8>
   1fdf8:	ldr	r2, [pc, #272]	; 1ff10 <__assert_fail@plt+0xd3c8>
   1fdfc:	asr	r3, r5, #31
   1fe00:	ldr	r1, [pc, #268]	; 1ff14 <__assert_fail@plt+0xd3cc>
   1fe04:	smull	ip, r2, r2, r5
   1fe08:	ldr	ip, [pc, #264]	; 1ff18 <__assert_fail@plt+0xd3d0>
   1fe0c:	str	r3, [sp, #28]
   1fe10:	rsb	r2, r3, r2, asr #2
   1fe14:	ldr	r3, [sp, #24]
   1fe18:	add	r0, r2, r0
   1fe1c:	add	r1, r0, r1
   1fe20:	cmp	r1, ip
   1fe24:	bhi	1fe3c <__assert_fail@plt+0xd2f4>
   1fe28:	add	r3, sp, #40	; 0x28
   1fe2c:	add	r2, sp, #36	; 0x24
   1fe30:	add	r1, sp, #32
   1fe34:	bl	1e67c <__assert_fail@plt+0xbb34>
   1fe38:	ldr	r3, [sp, #32]
   1fe3c:	ldr	r2, [pc, #216]	; 1ff1c <__assert_fail@plt+0xd3d4>
   1fe40:	cmp	r3, r2
   1fe44:	bgt	1fef8 <__assert_fail@plt+0xd3b0>
   1fe48:	ldr	r1, [sp, #36]	; 0x24
   1fe4c:	cmp	r1, #12
   1fe50:	bgt	1fef8 <__assert_fail@plt+0xd3b0>
   1fe54:	ldr	ip, [sp, #40]	; 0x28
   1fe58:	cmp	r1, #0
   1fe5c:	movgt	r2, #0
   1fe60:	movle	r2, #1
   1fe64:	sub	r0, ip, #1
   1fe68:	cmp	r0, #30
   1fe6c:	orrhi	r2, r2, #1
   1fe70:	orrs	r2, r2, r3, lsr #31
   1fe74:	bne	1fef8 <__assert_fail@plt+0xd3b0>
   1fe78:	ldr	r0, [pc, #140]	; 1ff0c <__assert_fail@plt+0xd3c4>
   1fe7c:	ldr	r2, [pc, #140]	; 1ff10 <__assert_fail@plt+0xd3c8>
   1fe80:	str	ip, [sp, #4]
   1fe84:	smull	lr, ip, r0, r7
   1fe88:	smull	lr, r0, r0, r6
   1fe8c:	smull	lr, r2, r2, r5
   1fe90:	str	r1, [sp]
   1fe94:	add	r1, r0, r6
   1fe98:	add	ip, ip, r7
   1fe9c:	rsb	sl, sl, r1, asr #5
   1fea0:	ldr	r1, [sp, #28]
   1fea4:	rsb	fp, fp, ip, asr #5
   1fea8:	rsb	r2, r1, r2, asr #2
   1feac:	rsb	fp, fp, fp, lsl #4
   1feb0:	rsb	sl, sl, sl, lsl #4
   1feb4:	add	r2, r2, r2, lsl #1
   1feb8:	sub	r7, r7, fp, lsl #2
   1febc:	sub	r6, r6, sl, lsl #2
   1fec0:	sub	r5, r5, r2, lsl #3
   1fec4:	mov	r0, r4
   1fec8:	strd	r6, [sp, #12]
   1fecc:	str	r5, [sp, #8]
   1fed0:	ldr	r2, [pc, #72]	; 1ff20 <__assert_fail@plt+0xd3d8>
   1fed4:	mov	r1, #16
   1fed8:	bl	12920 <gpgrt_snprintf@plt>
   1fedc:	ldr	r2, [sp, #44]	; 0x2c
   1fee0:	ldr	r3, [r8]
   1fee4:	mov	r0, r9
   1fee8:	cmp	r2, r3
   1feec:	bne	1ff00 <__assert_fail@plt+0xd3b8>
   1fef0:	add	sp, sp, #52	; 0x34
   1fef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fef8:	mov	r9, #55	; 0x37
   1fefc:	b	1fedc <__assert_fail@plt+0xd394>
   1ff00:	bl	124e8 <__stack_chk_fail@plt>
   1ff04:	andeq	fp, r3, r0, lsl fp
   1ff08:	andeq	r0, r0, lr, lsr #12
   1ff0c:	stmhi	r8, {r0, r3, r7, fp, pc}
   1ff10:	bcs	feaca9c4 <stdout@@GLIBC_2.4+0xfea8e740>
   1ff14:			; <UNDEFINED> instruction: 0xffe5bbaf
   1ff18:	andseq	r1, r1, ip, ror sp
   1ff1c:	andeq	r2, r0, pc, lsl #14
   1ff20:	andeq	r9, r2, r8, asr #17
   1ff24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff28:	sub	sp, sp, #60	; 0x3c
   1ff2c:	ldr	r5, [pc, #456]	; 200fc <__assert_fail@plt+0xd5b4>
   1ff30:	ldrb	r8, [r0]
   1ff34:	ldr	r3, [r5]
   1ff38:	cmp	r8, #0
   1ff3c:	str	r3, [sp, #52]	; 0x34
   1ff40:	moveq	r7, #26
   1ff44:	beq	200d4 <__assert_fail@plt+0xd58c>
   1ff48:	mov	r4, r0
   1ff4c:	mov	r6, r1
   1ff50:	bl	1ebd4 <__assert_fail@plt+0xc08c>
   1ff54:	subs	r7, r0, #0
   1ff58:	bne	200d4 <__assert_fail@plt+0xd58c>
   1ff5c:	ldr	r3, [pc, #412]	; 20100 <__assert_fail@plt+0xd5b8>
   1ff60:	cmp	r6, r3
   1ff64:	bhi	200f0 <__assert_fail@plt+0xd5a8>
   1ff68:	sub	r8, r8, #48	; 0x30
   1ff6c:	ldrb	r3, [r4, #1]
   1ff70:	ldrb	r1, [r4, #2]
   1ff74:	add	r8, r8, r8, lsl #2
   1ff78:	sub	r3, r3, #48	; 0x30
   1ff7c:	add	r8, r3, r8, lsl #1
   1ff80:	ldrb	r0, [r4, #3]
   1ff84:	sub	r3, r1, #48	; 0x30
   1ff88:	ldrb	ip, [r4, #4]
   1ff8c:	ldrb	r2, [r4, #6]
   1ff90:	add	r3, r3, r3, lsl #2
   1ff94:	sub	r0, r0, #48	; 0x30
   1ff98:	add	r8, r8, r8, lsl #2
   1ff9c:	add	r3, r0, r3, lsl #1
   1ffa0:	sub	ip, ip, #48	; 0x30
   1ffa4:	sub	r2, r2, #48	; 0x30
   1ffa8:	ldrb	r1, [r4, #5]
   1ffac:	ldrb	r0, [r4, #7]
   1ffb0:	add	r8, r8, r8, lsl #2
   1ffb4:	add	ip, ip, ip, lsl #2
   1ffb8:	add	r2, r2, r2, lsl #2
   1ffbc:	ldr	lr, [pc, #320]	; 20104 <__assert_fail@plt+0xd5bc>
   1ffc0:	add	fp, r3, r8, lsl #2
   1ffc4:	sub	r1, r1, #48	; 0x30
   1ffc8:	sub	r0, r0, #48	; 0x30
   1ffcc:	add	r1, r1, ip, lsl #1
   1ffd0:	add	r2, r0, r2, lsl #1
   1ffd4:	cmp	fp, lr
   1ffd8:	str	fp, [sp, #40]	; 0x28
   1ffdc:	str	r1, [sp, #44]	; 0x2c
   1ffe0:	str	r2, [sp, #48]	; 0x30
   1ffe4:	ble	200f0 <__assert_fail@plt+0xd5a8>
   1ffe8:	mov	r0, fp
   1ffec:	bl	1e5f0 <__assert_fail@plt+0xbaa8>
   1fff0:	ldrb	r3, [r4, #10]
   1fff4:	ldr	r2, [pc, #268]	; 20108 <__assert_fail@plt+0xd5c0>
   1fff8:	ldr	r1, [pc, #268]	; 2010c <__assert_fail@plt+0xd5c4>
   1fffc:	str	r3, [sp, #28]
   20000:	ldrb	r3, [r4, #12]
   20004:	ldrb	r8, [r4, #9]
   20008:	ldrb	r9, [r4, #11]
   2000c:	str	r3, [sp, #32]
   20010:	ldrb	r3, [r4, #14]
   20014:	ldrb	sl, [r4, #13]
   20018:	str	r3, [sp, #36]	; 0x24
   2001c:	add	r0, r6, r0
   20020:	add	r2, r0, r2
   20024:	cmp	r2, r1
   20028:	bhi	20040 <__assert_fail@plt+0xd4f8>
   2002c:	add	r3, sp, #48	; 0x30
   20030:	add	r2, sp, #44	; 0x2c
   20034:	add	r1, sp, #40	; 0x28
   20038:	bl	1e67c <__assert_fail@plt+0xbb34>
   2003c:	ldr	fp, [sp, #40]	; 0x28
   20040:	ldr	r2, [pc, #200]	; 20110 <__assert_fail@plt+0xd5c8>
   20044:	cmp	fp, r2
   20048:	bgt	200f0 <__assert_fail@plt+0xd5a8>
   2004c:	ldr	r1, [sp, #44]	; 0x2c
   20050:	cmp	r1, #12
   20054:	bgt	200f0 <__assert_fail@plt+0xd5a8>
   20058:	ldr	r0, [sp, #48]	; 0x30
   2005c:	cmp	r1, #0
   20060:	movgt	r2, #0
   20064:	movle	r2, #1
   20068:	sub	ip, r0, #1
   2006c:	cmp	ip, #30
   20070:	orrhi	r2, r2, #1
   20074:	orrs	r3, r2, fp, lsr #31
   20078:	bne	200f0 <__assert_fail@plt+0xd5a8>
   2007c:	ldr	r2, [sp, #32]
   20080:	sub	sl, sl, #48	; 0x30
   20084:	sub	r9, r9, #48	; 0x30
   20088:	sub	r8, r8, #48	; 0x30
   2008c:	sub	ip, r2, #48	; 0x30
   20090:	ldr	r3, [sp, #36]	; 0x24
   20094:	ldr	r2, [sp, #28]
   20098:	add	sl, sl, sl, lsl #2
   2009c:	add	r9, r9, r9, lsl #2
   200a0:	add	r8, r8, r8, lsl #2
   200a4:	sub	r3, r3, #48	; 0x30
   200a8:	sub	r2, r2, #48	; 0x30
   200ac:	add	sl, r3, sl, lsl #1
   200b0:	add	r8, r2, r8, lsl #1
   200b4:	add	r9, ip, r9, lsl #1
   200b8:	str	r1, [sp]
   200bc:	stmib	sp, {r0, r8, r9, sl}
   200c0:	mov	r3, fp
   200c4:	mov	r0, r4
   200c8:	ldr	r2, [pc, #68]	; 20114 <__assert_fail@plt+0xd5cc>
   200cc:	mov	r1, #16
   200d0:	bl	12920 <gpgrt_snprintf@plt>
   200d4:	ldr	r2, [sp, #52]	; 0x34
   200d8:	ldr	r3, [r5]
   200dc:	mov	r0, r7
   200e0:	cmp	r2, r3
   200e4:	bne	200f8 <__assert_fail@plt+0xd5b0>
   200e8:	add	sp, sp, #60	; 0x3c
   200ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   200f0:	mov	r7, #55	; 0x37
   200f4:	b	200d4 <__assert_fail@plt+0xd58c>
   200f8:	bl	124e8 <__stack_chk_fail@plt>
   200fc:	andeq	fp, r3, r0, lsl fp
   20100:	eorseq	sp, r7, r1, ror r7
   20104:	andeq	r0, r0, lr, lsr #12
   20108:			; <UNDEFINED> instruction: 0xffe5bbaf
   2010c:	andseq	r1, r1, ip, ror sp
   20110:	andeq	r2, r0, pc, lsl #14
   20114:	andeq	r9, r2, r8, asr #17
   20118:	ldr	r2, [pc, #748]	; 2040c <__assert_fail@plt+0xd8c4>
   2011c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20120:	add	r3, r1, #7
   20124:	cmp	r3, r2
   20128:	bhi	20308 <__assert_fail@plt+0xd7c0>
   2012c:	ldr	r2, [pc, #732]	; 20410 <__assert_fail@plt+0xd8c8>
   20130:	lsr	r8, r3, #3
   20134:	mov	r9, r1
   20138:	mov	r4, r0
   2013c:	umull	r1, r0, r2, r8
   20140:	umull	r2, r3, r2, r3
   20144:	lsr	r0, r0, #2
   20148:	lsr	r3, r3, #5
   2014c:	add	r0, r0, r0, lsl #2
   20150:	sub	r0, r8, r0
   20154:	add	r3, r0, r3, lsl #2
   20158:	lsl	r3, r3, #1
   2015c:	cmp	r0, #2
   20160:	movhi	r0, r3
   20164:	addls	r0, r3, #1
   20168:	bl	12338 <gcry_malloc@plt>
   2016c:	subs	sl, r0, #0
   20170:	beq	20300 <__assert_fail@plt+0xd7b8>
   20174:	cmp	r8, #4
   20178:	bls	20404 <__assert_fail@plt+0xd8bc>
   2017c:	ldr	r0, [pc, #656]	; 20414 <__assert_fail@plt+0xd8cc>
   20180:	add	r2, r4, #5
   20184:	add	r3, sl, #8
   20188:	ldrb	lr, [r2, #-4]
   2018c:	ldrb	r4, [r2, #-3]
   20190:	ldrb	fp, [r2, #-5]
   20194:	ldrb	ip, [r2, #-2]
   20198:	ldrb	r1, [r2, #-1]
   2019c:	lsl	r6, lr, #4
   201a0:	lsl	r7, fp, #2
   201a4:	lsl	r5, r4, #1
   201a8:	and	r6, r6, #16
   201ac:	orr	r6, r6, r4, lsr #4
   201b0:	and	r7, r7, #28
   201b4:	lsl	r4, ip, #3
   201b8:	and	r5, r5, #30
   201bc:	orr	r7, r7, lr, lsr #6
   201c0:	orr	r5, r5, ip, lsr #7
   201c4:	asr	lr, lr, #1
   201c8:	and	r4, r4, #24
   201cc:	asr	ip, ip, #2
   201d0:	orr	r4, r4, r1, lsr #5
   201d4:	and	lr, lr, #31
   201d8:	and	ip, ip, #31
   201dc:	and	r1, r1, #31
   201e0:	ldrb	ip, [r0, ip]
   201e4:	ldrb	r4, [r0, r4]
   201e8:	ldrb	fp, [r0, fp, lsr #3]
   201ec:	ldrb	r7, [r0, r7]
   201f0:	ldrb	lr, [r0, lr]
   201f4:	ldrb	r6, [r0, r6]
   201f8:	ldrb	r5, [r0, r5]
   201fc:	ldrb	r1, [r0, r1]
   20200:	sub	r8, r8, #5
   20204:	cmp	r8, #4
   20208:	strb	ip, [r3, #-3]
   2020c:	strb	r4, [r3, #-2]
   20210:	strb	fp, [r3, #-8]
   20214:	strb	r7, [r3, #-7]
   20218:	strb	lr, [r3, #-6]
   2021c:	strb	r6, [r3, #-5]
   20220:	strb	r5, [r3, #-4]
   20224:	strb	r1, [r3, #-1]
   20228:	mov	r4, r2
   2022c:	mov	ip, r3
   20230:	add	r2, r2, #5
   20234:	add	r3, r3, #8
   20238:	bhi	20188 <__assert_fail@plt+0xd640>
   2023c:	sub	r8, r8, #1
   20240:	cmp	r8, #3
   20244:	ldrls	pc, [pc, r8, lsl #2]
   20248:	b	202e8 <__assert_fail@plt+0xd7a0>
   2024c:	andeq	r0, r2, r0, lsr #6
   20250:	andeq	r0, r2, ip, asr #6
   20254:	muleq	r2, ip, r3
   20258:	andeq	r0, r2, ip, asr r2
   2025c:	ldrb	r0, [r4, #1]
   20260:	ldrb	r3, [r4, #2]
   20264:	ldrb	r5, [r4]
   20268:	ldrb	r2, [r4, #3]
   2026c:	lsl	lr, r0, #4
   20270:	and	lr, lr, #16
   20274:	orr	lr, lr, r3, lsr #4
   20278:	lsl	r4, r5, #2
   2027c:	lsl	r3, r3, #1
   20280:	and	r4, r4, #28
   20284:	and	r3, r3, #30
   20288:	ldr	r1, [pc, #388]	; 20414 <__assert_fail@plt+0xd8cc>
   2028c:	orr	r3, r3, r2, lsr #7
   20290:	orr	r4, r4, r0, lsr #6
   20294:	asr	r6, r2, #2
   20298:	asr	r0, r0, #1
   2029c:	lsl	r2, r2, #3
   202a0:	and	r0, r0, #31
   202a4:	and	r6, r6, #31
   202a8:	and	r2, r2, #24
   202ac:	ldrb	r7, [r1, r0]
   202b0:	ldrb	r8, [r1, lr]
   202b4:	ldrb	r4, [r1, r4]
   202b8:	ldrb	lr, [r1, r3]
   202bc:	ldrb	r5, [r1, r5, lsr #3]
   202c0:	ldrb	r0, [r1, r6]
   202c4:	ldrb	r3, [r1, r2]
   202c8:	strb	r4, [ip, #1]
   202cc:	strb	r5, [ip]
   202d0:	strb	r7, [ip, #2]
   202d4:	strb	r8, [ip, #3]
   202d8:	strb	lr, [ip, #4]
   202dc:	strb	r0, [ip, #5]
   202e0:	strb	r3, [ip, #6]
   202e4:	add	ip, ip, #7
   202e8:	ldr	r1, [pc, #288]	; 20410 <__assert_fail@plt+0xd8c8>
   202ec:	add	r9, r9, #4
   202f0:	mov	r3, #0
   202f4:	umull	r2, r9, r1, r9
   202f8:	strb	r3, [ip]
   202fc:	strb	r3, [sl, r9, lsr #2]
   20300:	mov	r0, sl
   20304:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20308:	bl	1280c <__errno_location@plt>
   2030c:	mov	sl, #0
   20310:	mov	r3, #22
   20314:	str	r3, [r0]
   20318:	mov	r0, sl
   2031c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20320:	ldrb	r0, [r4]
   20324:	ldr	r1, [pc, #232]	; 20414 <__assert_fail@plt+0xd8cc>
   20328:	mov	r3, ip
   2032c:	lsl	r2, r0, #2
   20330:	and	r2, r2, #28
   20334:	ldrb	r0, [r1, r0, lsr #3]
   20338:	ldrb	r2, [r1, r2]
   2033c:	strb	r0, [r3], #2
   20340:	strb	r2, [ip, #1]
   20344:	mov	ip, r3
   20348:	b	202e8 <__assert_fail@plt+0xd7a0>
   2034c:	ldrb	lr, [r4]
   20350:	ldrb	r3, [r4, #1]
   20354:	ldr	r1, [pc, #184]	; 20414 <__assert_fail@plt+0xd8cc>
   20358:	add	ip, ip, #4
   2035c:	lsl	r2, lr, #2
   20360:	and	r2, r2, #28
   20364:	orr	r2, r2, r3, lsr #6
   20368:	asr	r0, r3, #1
   2036c:	lsl	r3, r3, #4
   20370:	and	r0, r0, #31
   20374:	and	r3, r3, #16
   20378:	ldrb	r4, [r1, r2]
   2037c:	ldrb	lr, [r1, lr, lsr #3]
   20380:	ldrb	r2, [r1, r0]
   20384:	ldrb	r3, [r1, r3]
   20388:	strb	r4, [ip, #-3]
   2038c:	strb	lr, [ip, #-4]
   20390:	strb	r2, [ip, #-2]
   20394:	strb	r3, [ip, #-1]
   20398:	b	202e8 <__assert_fail@plt+0xd7a0>
   2039c:	ldrb	r3, [r4, #1]
   203a0:	ldrb	lr, [r4]
   203a4:	ldrb	r2, [r4, #2]
   203a8:	ldr	r1, [pc, #100]	; 20414 <__assert_fail@plt+0xd8cc>
   203ac:	lsl	r0, r3, #4
   203b0:	lsl	r4, lr, #2
   203b4:	and	r4, r4, #28
   203b8:	and	r0, r0, #16
   203bc:	orr	r4, r4, r3, lsr #6
   203c0:	orr	r0, r0, r2, lsr #4
   203c4:	asr	r3, r3, #1
   203c8:	lsl	r2, r2, #1
   203cc:	and	r3, r3, #31
   203d0:	and	r2, r2, #30
   203d4:	ldrb	r5, [r1, r4]
   203d8:	ldrb	r4, [r1, lr, lsr #3]
   203dc:	ldrb	lr, [r1, r0]
   203e0:	ldrb	r0, [r1, r3]
   203e4:	ldrb	r3, [r1, r2]
   203e8:	strb	r5, [ip, #1]
   203ec:	strb	r4, [ip]
   203f0:	strb	lr, [ip, #3]
   203f4:	strb	r0, [ip, #2]
   203f8:	strb	r3, [ip, #4]
   203fc:	add	ip, ip, #5
   20400:	b	202e8 <__assert_fail@plt+0xd7a0>
   20404:	mov	ip, sl
   20408:	b	2023c <__assert_fail@plt+0xd6f4>
   2040c:	andeq	r0, r8, r7
   20410:	stclgt	12, cr12, [ip], {205}	; 0xcd
   20414:	andeq	r9, r2, r0, lsl sl
   20418:	push	{r4, r5, r6, r7, lr}
   2041c:	ldrb	r6, [r0]
   20420:	cmp	r6, #48	; 0x30
   20424:	beq	20528 <__assert_fail@plt+0xd9e0>
   20428:	sub	r7, r6, #48	; 0x30
   2042c:	uxtb	ip, r7
   20430:	cmp	ip, #9
   20434:	movhi	ip, #0
   20438:	bhi	20478 <__assert_fail@plt+0xd930>
   2043c:	ldrb	r4, [r0, #1]
   20440:	sub	lr, r4, #48	; 0x30
   20444:	add	r5, r0, #1
   20448:	mov	ip, #0
   2044c:	b	2045c <__assert_fail@plt+0xd914>
   20450:	ldrb	r4, [r5, #1]!
   20454:	sub	r7, r6, #48	; 0x30
   20458:	sub	lr, r4, #48	; 0x30
   2045c:	add	ip, ip, ip, lsl #2
   20460:	uxtb	lr, lr
   20464:	cmp	lr, #9
   20468:	mov	r6, r4
   2046c:	add	ip, r7, ip, lsl #1
   20470:	mov	r0, r5
   20474:	bls	20450 <__assert_fail@plt+0xd908>
   20478:	str	ip, [r1]
   2047c:	ldrb	r1, [r0]
   20480:	cmp	r1, #46	; 0x2e
   20484:	bne	20540 <__assert_fail@plt+0xd9f8>
   20488:	ldrb	lr, [r0, #1]
   2048c:	add	ip, r0, #1
   20490:	cmp	lr, #48	; 0x30
   20494:	beq	20548 <__assert_fail@plt+0xda00>
   20498:	sub	r0, lr, #48	; 0x30
   2049c:	uxtb	r1, r0
   204a0:	cmp	r1, #9
   204a4:	movhi	r1, #0
   204a8:	bhi	204cc <__assert_fail@plt+0xd984>
   204ac:	mov	r1, #0
   204b0:	ldrb	lr, [ip, #1]!
   204b4:	add	r1, r1, r1, lsl #2
   204b8:	add	r1, r0, r1, lsl #1
   204bc:	sub	r0, lr, #48	; 0x30
   204c0:	uxtb	lr, r0
   204c4:	cmp	lr, #9
   204c8:	bls	204b0 <__assert_fail@plt+0xd968>
   204cc:	str	r1, [r2]
   204d0:	ldrb	r2, [ip]
   204d4:	cmp	r2, #46	; 0x2e
   204d8:	bne	20540 <__assert_fail@plt+0xd9f8>
   204dc:	ldrb	lr, [ip, #1]
   204e0:	add	r0, ip, #1
   204e4:	cmp	lr, #48	; 0x30
   204e8:	beq	20560 <__assert_fail@plt+0xda18>
   204ec:	sub	r1, lr, #48	; 0x30
   204f0:	uxtb	r2, r1
   204f4:	cmp	r2, #9
   204f8:	movhi	r2, #0
   204fc:	bhi	20520 <__assert_fail@plt+0xd9d8>
   20500:	mov	r2, #0
   20504:	ldrb	lr, [r0, #1]!
   20508:	add	r2, r2, r2, lsl #2
   2050c:	add	r2, r1, r2, lsl #1
   20510:	sub	r1, lr, #48	; 0x30
   20514:	uxtb	ip, r1
   20518:	cmp	ip, #9
   2051c:	bls	20504 <__assert_fail@plt+0xd9bc>
   20520:	str	r2, [r3]
   20524:	pop	{r4, r5, r6, r7, pc}
   20528:	ldrb	r4, [r0, #1]
   2052c:	sub	lr, r4, #48	; 0x30
   20530:	uxtb	ip, lr
   20534:	cmp	ip, #9
   20538:	movhi	r7, #0
   2053c:	bhi	20444 <__assert_fail@plt+0xd8fc>
   20540:	mov	r0, #0
   20544:	pop	{r4, r5, r6, r7, pc}
   20548:	ldrb	r1, [r0, #2]
   2054c:	sub	r1, r1, #48	; 0x30
   20550:	cmp	r1, #9
   20554:	bls	20540 <__assert_fail@plt+0xd9f8>
   20558:	mov	r0, #0
   2055c:	b	204ac <__assert_fail@plt+0xd964>
   20560:	ldrb	r2, [ip, #2]
   20564:	sub	r2, r2, #48	; 0x30
   20568:	cmp	r2, #9
   2056c:	bls	20540 <__assert_fail@plt+0xd9f8>
   20570:	mov	r1, #0
   20574:	b	20500 <__assert_fail@plt+0xd9b8>
   20578:	subs	r0, r2, #0
   2057c:	push	{r4, lr}
   20580:	beq	20590 <__assert_fail@plt+0xda48>
   20584:	mov	r1, r0
   20588:	ldr	r0, [pc, #12]	; 2059c <__assert_fail@plt+0xda54>
   2058c:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   20590:	mov	r0, r1
   20594:	bl	129d4 <gpg_strerror@plt>
   20598:	b	20584 <__assert_fail@plt+0xda3c>
   2059c:	andeq	r9, r2, r8, asr #20
   205a0:	cmp	r1, #20
   205a4:	mov	ip, r2
   205a8:	beq	20604 <__assert_fail@plt+0xdabc>
   205ac:	ble	205e0 <__assert_fail@plt+0xda98>
   205b0:	cmp	r1, #50	; 0x32
   205b4:	moveq	r0, #6
   205b8:	beq	205d4 <__assert_fail@plt+0xda8c>
   205bc:	cmp	r1, #100	; 0x64
   205c0:	moveq	r0, #7
   205c4:	beq	205d4 <__assert_fail@plt+0xda8c>
   205c8:	cmp	r1, #40	; 0x28
   205cc:	moveq	r0, #5
   205d0:	movne	r0, #4
   205d4:	mov	r2, r3
   205d8:	mov	r1, ip
   205dc:	b	1c690 <__assert_fail@plt+0x9b48>
   205e0:	cmp	r1, #0
   205e4:	moveq	r0, #1
   205e8:	beq	205d4 <__assert_fail@plt+0xda8c>
   205ec:	cmp	r1, #10
   205f0:	moveq	r0, #2
   205f4:	movne	r0, #4
   205f8:	mov	r2, r3
   205fc:	mov	r1, ip
   20600:	b	1c690 <__assert_fail@plt+0x9b48>
   20604:	mov	r0, #3
   20608:	b	205d4 <__assert_fail@plt+0xda8c>
   2060c:	ldr	r3, [pc, #84]	; 20668 <__assert_fail@plt+0xdb20>
   20610:	ldr	r0, [r3]
   20614:	cmp	r0, #0
   20618:	bne	20660 <__assert_fail@plt+0xdb18>
   2061c:	push	{r4, lr}
   20620:	ands	r2, r2, #1
   20624:	mov	r4, r1
   20628:	mov	r1, #1
   2062c:	str	r1, [r3]
   20630:	beq	20648 <__assert_fail@plt+0xdb00>
   20634:	ldr	r1, [pc, #48]	; 2066c <__assert_fail@plt+0xdb24>
   20638:	mov	r2, #5
   2063c:	bl	124dc <dcgettext@plt>
   20640:	mov	r1, r4
   20644:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   20648:	mov	r0, r2
   2064c:	ldr	r1, [pc, #28]	; 20670 <__assert_fail@plt+0xdb28>
   20650:	mov	r2, #5
   20654:	bl	124dc <dcgettext@plt>
   20658:	mov	r1, r4
   2065c:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   20660:	mov	r0, #0
   20664:	bx	lr
   20668:	andeq	ip, r3, ip, lsr #9
   2066c:	andeq	r9, r2, r0, ror #20
   20670:	muleq	r2, r8, sl
   20674:	push	{r4, r5, r6, r7, lr}
   20678:	subs	r7, r2, #0
   2067c:	mov	r6, r0
   20680:	sub	sp, sp, #12
   20684:	mov	r0, r1
   20688:	beq	206c0 <__assert_fail@plt+0xdb78>
   2068c:	ldrsb	r2, [r1]
   20690:	cmp	r2, #0
   20694:	blt	206e8 <__assert_fail@plt+0xdba0>
   20698:	sub	lr, r7, #1
   2069c:	add	lr, lr, r1
   206a0:	rsb	r4, r1, #1
   206a4:	b	206b4 <__assert_fail@plt+0xdb6c>
   206a8:	ldrsb	ip, [r1, #1]!
   206ac:	cmp	ip, #0
   206b0:	blt	206ec <__assert_fail@plt+0xdba4>
   206b4:	cmp	r1, lr
   206b8:	add	r5, r4, r1
   206bc:	bne	206a8 <__assert_fail@plt+0xdb60>
   206c0:	mov	ip, #0
   206c4:	mov	r1, r0
   206c8:	mov	r2, r7
   206cc:	mov	r0, r6
   206d0:	str	ip, [sp]
   206d4:	bl	1289c <gpgrt_write_sanitized@plt>
   206d8:	mov	r4, r0
   206dc:	mov	r0, r4
   206e0:	add	sp, sp, #12
   206e4:	pop	{r4, r5, r6, r7, pc}
   206e8:	mov	r5, #0
   206ec:	cmp	r3, #0
   206f0:	moveq	r2, r3
   206f4:	ldrbne	r2, [r3]
   206f8:	mov	r1, r7
   206fc:	bl	190e0 <__assert_fail@plt+0x6598>
   20700:	mov	r1, r6
   20704:	mov	r7, r0
   20708:	bl	12908 <gpgrt_fputs@plt>
   2070c:	mov	r4, r0
   20710:	mov	r0, r7
   20714:	bl	124a0 <gcry_free@plt>
   20718:	cmn	r4, #1
   2071c:	movne	r4, r5
   20720:	mov	r0, r4
   20724:	add	sp, sp, #12
   20728:	pop	{r4, r5, r6, r7, pc}
   2072c:	push	{r4, lr}
   20730:	mov	r1, #0
   20734:	ldr	r0, [pc, #28]	; 20758 <__assert_fail@plt+0xdc10>
   20738:	bl	12a70 <gcry_set_log_handler@plt>
   2073c:	mov	r1, #0
   20740:	ldr	r0, [pc, #20]	; 2075c <__assert_fail@plt+0xdc14>
   20744:	bl	12a7c <gcry_set_fatalerror_handler@plt>
   20748:	mov	r1, #0
   2074c:	ldr	r0, [pc, #12]	; 20760 <__assert_fail@plt+0xdc18>
   20750:	pop	{r4, lr}
   20754:	b	1298c <gcry_set_outofcore_handler@plt>
   20758:	andeq	r0, r2, r0, lsr #11
   2075c:	andeq	r0, r2, r8, ror r5
   20760:	andeq	r0, r2, ip, lsl #12
   20764:	push	{r4, r5, r6, lr}
   20768:	bl	127c4 <gpg_err_code_from_syserror@plt>
   2076c:	ldr	r1, [pc, #40]	; 2079c <__assert_fail@plt+0xdc54>
   20770:	mov	r2, #5
   20774:	subs	r4, r0, #0
   20778:	mov	r0, #0
   2077c:	uxthne	r4, r4
   20780:	bl	124dc <dcgettext@plt>
   20784:	mov	r5, r0
   20788:	mov	r0, r4
   2078c:	bl	129d4 <gpg_strerror@plt>
   20790:	mov	r1, r0
   20794:	mov	r0, r5
   20798:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   2079c:	andeq	r9, r2, r0, asr #21
   207a0:	push	{r4, lr}
   207a4:	bl	12884 <gcry_cipher_algo_name@plt>
   207a8:	ldr	r1, [pc, #24]	; 207c8 <__assert_fail@plt+0xdc80>
   207ac:	mov	r4, r0
   207b0:	bl	1238c <strcmp@plt>
   207b4:	ldr	r3, [pc, #16]	; 207cc <__assert_fail@plt+0xdc84>
   207b8:	cmp	r0, #0
   207bc:	movne	r0, r4
   207c0:	moveq	r0, r3
   207c4:	pop	{r4, pc}
   207c8:	andeq	r9, r2, ip, ror #21
   207cc:	andeq	r9, r2, r4, ror #21
   207d0:	push	{r4, r5, r6, lr}
   207d4:	subs	r5, r0, #0
   207d8:	mov	r4, r2
   207dc:	beq	20808 <__assert_fail@plt+0xdcc0>
   207e0:	mov	r6, r1
   207e4:	mov	r2, #5
   207e8:	ldr	r1, [pc, #52]	; 20824 <__assert_fail@plt+0xdcdc>
   207ec:	mov	r0, #0
   207f0:	bl	124dc <dcgettext@plt>
   207f4:	mov	r3, r4
   207f8:	mov	r2, r6
   207fc:	mov	r1, r5
   20800:	pop	{r4, r5, r6, lr}
   20804:	b	1c6e0 <__assert_fail@plt+0x9b98>
   20808:	mov	r2, #5
   2080c:	ldr	r1, [pc, #20]	; 20828 <__assert_fail@plt+0xdce0>
   20810:	bl	124dc <dcgettext@plt>
   20814:	mov	r2, r4
   20818:	ldr	r1, [pc, #12]	; 2082c <__assert_fail@plt+0xdce4>
   2081c:	pop	{r4, r5, r6, lr}
   20820:	b	1c6e0 <__assert_fail@plt+0x9b98>
   20824:	strdeq	r9, [r2], -r0
   20828:	andeq	r9, r2, r0, lsr #22
   2082c:	andeq	r8, r2, r8, lsr #13
   20830:	cmp	r0, #0
   20834:	beq	20858 <__assert_fail@plt+0xdd10>
   20838:	ldrb	r3, [r0]
   2083c:	cmp	r3, #45	; 0x2d
   20840:	bxne	lr
   20844:	ldrb	r2, [r0, #1]
   20848:	ldr	r3, [pc, #16]	; 20860 <__assert_fail@plt+0xdd18>
   2084c:	cmp	r2, #0
   20850:	moveq	r0, r3
   20854:	bx	lr
   20858:	ldr	r0, [pc]	; 20860 <__assert_fail@plt+0xdd18>
   2085c:	bx	lr
   20860:	andeq	r9, r2, ip, asr fp
   20864:	cmp	r0, #0
   20868:	beq	2088c <__assert_fail@plt+0xdd44>
   2086c:	ldrb	r3, [r0]
   20870:	cmp	r3, #45	; 0x2d
   20874:	bxne	lr
   20878:	ldrb	r2, [r0, #1]
   2087c:	ldr	r3, [pc, #16]	; 20894 <__assert_fail@plt+0xdd4c>
   20880:	cmp	r2, #0
   20884:	moveq	r0, r3
   20888:	bx	lr
   2088c:	ldr	r0, [pc]	; 20894 <__assert_fail@plt+0xdd4c>
   20890:	bx	lr
   20894:	andeq	r8, r2, ip, ror #7
   20898:	b	20674 <__assert_fail@plt+0xdb2c>
   2089c:	push	{r4, lr}
   208a0:	sub	sp, sp, #8
   208a4:	ldr	r4, [pc, #52]	; 208e0 <__assert_fail@plt+0xdd98>
   208a8:	strb	r3, [sp]
   208ac:	mov	r3, #0
   208b0:	ldr	ip, [r4]
   208b4:	strb	r3, [sp, #1]
   208b8:	mov	r3, sp
   208bc:	str	ip, [sp, #4]
   208c0:	bl	20674 <__assert_fail@plt+0xdb2c>
   208c4:	ldr	r2, [sp, #4]
   208c8:	ldr	r3, [r4]
   208cc:	cmp	r2, r3
   208d0:	bne	208dc <__assert_fail@plt+0xdd94>
   208d4:	add	sp, sp, #8
   208d8:	pop	{r4, pc}
   208dc:	bl	124e8 <__stack_chk_fail@plt>
   208e0:	andeq	fp, r3, r0, lsl fp
   208e4:	mov	r3, #0
   208e8:	b	20674 <__assert_fail@plt+0xdb2c>
   208ec:	push	{r4, r5, r6, lr}
   208f0:	subs	r4, r1, #0
   208f4:	mov	r5, r0
   208f8:	beq	2091c <__assert_fail@plt+0xddd4>
   208fc:	mov	r0, r4
   20900:	bl	12788 <strlen@plt>
   20904:	mov	r2, r0
   20908:	mov	r1, r4
   2090c:	mov	r0, r5
   20910:	mov	r3, #0
   20914:	pop	{r4, r5, r6, lr}
   20918:	b	20674 <__assert_fail@plt+0xdb2c>
   2091c:	mov	r2, r4
   20920:	ldr	r4, [pc]	; 20928 <__assert_fail@plt+0xdde0>
   20924:	b	20908 <__assert_fail@plt+0xddc0>
   20928:	muleq	r2, r8, r9
   2092c:	cmp	r2, #0
   20930:	bxeq	lr
   20934:	push	{r4, r5, r6, lr}
   20938:	sub	r6, r2, #1
   2093c:	mov	r5, r0
   20940:	add	r6, r1, r6
   20944:	sub	r4, r1, #1
   20948:	ldrb	r3, [r4, #1]!
   2094c:	mov	r1, r5
   20950:	lsr	r3, r3, #4
   20954:	cmp	r3, #9
   20958:	add	r0, r3, #55	; 0x37
   2095c:	addls	r0, r3, #48	; 0x30
   20960:	bl	129ec <putc@plt>
   20964:	ldrb	r3, [r4]
   20968:	mov	r1, r5
   2096c:	and	r3, r3, #15
   20970:	cmp	r3, #9
   20974:	add	r0, r3, #55	; 0x37
   20978:	addls	r0, r3, #48	; 0x30
   2097c:	bl	129ec <putc@plt>
   20980:	cmp	r4, r6
   20984:	bne	20948 <__assert_fail@plt+0xde00>
   20988:	pop	{r4, r5, r6, pc}
   2098c:	cmp	r1, #0
   20990:	push	{r4, r5, r6, r7, r8, r9, lr}
   20994:	sub	sp, sp, #12
   20998:	beq	20b58 <__assert_fail@plt+0xe010>
   2099c:	sub	r5, r0, #1
   209a0:	sub	r1, r1, #1
   209a4:	mov	r7, r2
   209a8:	add	r6, r0, r1
   209ac:	mov	r2, r5
   209b0:	mov	r0, #1
   209b4:	b	209e8 <__assert_fail@plt+0xdea0>
   209b8:	cmp	ip, r7
   209bc:	beq	20aa4 <__assert_fail@plt+0xdf5c>
   209c0:	cmp	r7, #0
   209c4:	sub	r3, ip, #92	; 0x5c
   209c8:	clz	r3, r3
   209cc:	lsr	r3, r3, #5
   209d0:	moveq	r3, #0
   209d4:	cmp	r3, #0
   209d8:	addeq	r0, r0, #1
   209dc:	bne	20ab8 <__assert_fail@plt+0xdf70>
   209e0:	cmp	r2, r6
   209e4:	beq	20a10 <__assert_fail@plt+0xdec8>
   209e8:	ldrb	ip, [r2, #1]!
   209ec:	cmp	ip, #127	; 0x7f
   209f0:	cmpne	ip, #31
   209f4:	bhi	209b8 <__assert_fail@plt+0xde70>
   209f8:	cmp	ip, #13
   209fc:	cmpne	ip, #10
   20a00:	bne	20aa4 <__assert_fail@plt+0xdf5c>
   20a04:	cmp	r2, r6
   20a08:	add	r0, r0, #2
   20a0c:	bne	209e8 <__assert_fail@plt+0xdea0>
   20a10:	bl	12338 <gcry_malloc@plt>
   20a14:	ldr	r9, [pc, #336]	; 20b6c <__assert_fail@plt+0xe024>
   20a18:	mov	r8, r0
   20a1c:	mov	r4, r0
   20a20:	b	20a58 <__assert_fail@plt+0xdf10>
   20a24:	cmp	r3, r7
   20a28:	beq	20b04 <__assert_fail@plt+0xdfbc>
   20a2c:	cmp	r7, #0
   20a30:	sub	r2, r3, #92	; 0x5c
   20a34:	clz	r2, r2
   20a38:	lsr	r2, r2, #5
   20a3c:	moveq	r2, #0
   20a40:	cmp	r2, #0
   20a44:	strbeq	r3, [r4]
   20a48:	moveq	r4, r0
   20a4c:	bne	20b04 <__assert_fail@plt+0xdfbc>
   20a50:	cmp	r5, r6
   20a54:	beq	20a90 <__assert_fail@plt+0xdf48>
   20a58:	ldrb	r3, [r5, #1]!
   20a5c:	add	r0, r4, #1
   20a60:	cmp	r3, #127	; 0x7f
   20a64:	cmpne	r3, #31
   20a68:	bhi	20a24 <__assert_fail@plt+0xdedc>
   20a6c:	mov	r2, #92	; 0x5c
   20a70:	cmp	r3, #10
   20a74:	strb	r2, [r4]
   20a78:	bne	20ac0 <__assert_fail@plt+0xdf78>
   20a7c:	mov	r3, #110	; 0x6e
   20a80:	cmp	r5, r6
   20a84:	strb	r3, [r4, #1]
   20a88:	add	r4, r4, #2
   20a8c:	bne	20a58 <__assert_fail@plt+0xdf10>
   20a90:	mov	r3, #0
   20a94:	mov	r0, r8
   20a98:	strb	r3, [r4]
   20a9c:	add	sp, sp, #12
   20aa0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20aa4:	and	r1, ip, #247	; 0xf7
   20aa8:	sub	r3, ip, #11
   20aac:	cmp	r1, #0
   20ab0:	cmpne	r3, #1
   20ab4:	bls	20a04 <__assert_fail@plt+0xdebc>
   20ab8:	add	r0, r0, #5
   20abc:	b	209e0 <__assert_fail@plt+0xde98>
   20ac0:	cmp	r3, #13
   20ac4:	moveq	r3, #114	; 0x72
   20ac8:	strbeq	r3, [r4, #1]
   20acc:	addeq	r4, r4, #2
   20ad0:	beq	20a50 <__assert_fail@plt+0xdf08>
   20ad4:	cmp	r3, #12
   20ad8:	beq	20b28 <__assert_fail@plt+0xdfe0>
   20adc:	cmp	r3, #11
   20ae0:	beq	20b38 <__assert_fail@plt+0xdff0>
   20ae4:	cmp	r3, #8
   20ae8:	beq	20b48 <__assert_fail@plt+0xe000>
   20aec:	cmp	r3, #0
   20af0:	bne	20b0c <__assert_fail@plt+0xdfc4>
   20af4:	mov	r3, #48	; 0x30
   20af8:	strb	r3, [r4, #1]
   20afc:	add	r4, r4, #2
   20b00:	b	20a50 <__assert_fail@plt+0xdf08>
   20b04:	mov	r2, #92	; 0x5c
   20b08:	strb	r2, [r4]
   20b0c:	str	r3, [sp]
   20b10:	mvn	r2, #0
   20b14:	mov	r3, r9
   20b18:	mov	r1, #1
   20b1c:	add	r4, r4, #4
   20b20:	bl	12830 <__sprintf_chk@plt>
   20b24:	b	20a50 <__assert_fail@plt+0xdf08>
   20b28:	mov	r3, #102	; 0x66
   20b2c:	strb	r3, [r4, #1]
   20b30:	add	r4, r4, #2
   20b34:	b	20a50 <__assert_fail@plt+0xdf08>
   20b38:	mov	r3, #118	; 0x76
   20b3c:	strb	r3, [r4, #1]
   20b40:	add	r4, r4, #2
   20b44:	b	20a50 <__assert_fail@plt+0xdf08>
   20b48:	mov	r3, #98	; 0x62
   20b4c:	strb	r3, [r4, #1]
   20b50:	add	r4, r4, #2
   20b54:	b	20a50 <__assert_fail@plt+0xdf08>
   20b58:	mov	r0, #1
   20b5c:	bl	12338 <gcry_malloc@plt>
   20b60:	mov	r4, r0
   20b64:	mov	r8, r0
   20b68:	b	20a90 <__assert_fail@plt+0xdf48>
   20b6c:	andeq	r8, r2, r4, ror #20
   20b70:	push	{r4, lr}
   20b74:	bl	2098c <__assert_fail@plt+0xde44>
   20b78:	cmp	r0, #0
   20b7c:	popne	{r4, pc}
   20b80:	bl	20764 <__assert_fail@plt+0xdc1c>
   20b84:	push	{r4, r5, r6, r7, lr}
   20b88:	mov	r6, r0
   20b8c:	ldr	lr, [pc, #380]	; 20d10 <__assert_fail@plt+0xe1c8>
   20b90:	mov	r7, r1
   20b94:	sub	sp, sp, #44	; 0x2c
   20b98:	ldm	lr!, {r0, r1, r2, r3}
   20b9c:	add	ip, sp, #4
   20ba0:	ldr	r5, [pc, #364]	; 20d14 <__assert_fail@plt+0xe1cc>
   20ba4:	stmia	ip!, {r0, r1, r2, r3}
   20ba8:	ldm	lr, {r0, r1}
   20bac:	ldr	r3, [r5]
   20bb0:	stm	ip, {r0, r1}
   20bb4:	mov	r0, r6
   20bb8:	str	r3, [sp, #36]	; 0x24
   20bbc:	bl	22bdc <__assert_fail@plt+0x10094>
   20bc0:	clz	r3, r7
   20bc4:	lsr	r3, r3, #5
   20bc8:	cmp	r0, #0
   20bcc:	movne	r4, #1
   20bd0:	moveq	r4, r3
   20bd4:	cmp	r4, #0
   20bd8:	movne	r4, #0
   20bdc:	beq	20bfc <__assert_fail@plt+0xe0b4>
   20be0:	ldr	r2, [sp, #36]	; 0x24
   20be4:	ldr	r3, [r5]
   20be8:	mov	r0, r4
   20bec:	cmp	r2, r3
   20bf0:	bne	20d0c <__assert_fail@plt+0xe1c4>
   20bf4:	add	sp, sp, #44	; 0x2c
   20bf8:	pop	{r4, r5, r6, r7, pc}
   20bfc:	mov	r0, r6
   20c00:	bl	22c20 <__assert_fail@plt+0x100d8>
   20c04:	subs	r6, r0, #0
   20c08:	beq	20ce8 <__assert_fail@plt+0xe1a0>
   20c0c:	mov	r3, r4
   20c10:	mov	r2, #1
   20c14:	mov	r1, #3
   20c18:	bl	22d8c <__assert_fail@plt+0x10244>
   20c1c:	mov	r1, sp
   20c20:	mov	r0, r6
   20c24:	bl	2442c <__assert_fail@plt+0x118e4>
   20c28:	cmp	r0, #6
   20c2c:	sbcs	r3, r1, #0
   20c30:	bge	20c44 <__assert_fail@plt+0xe0fc>
   20c34:	ldr	r4, [sp]
   20c38:	cmp	r4, #0
   20c3c:	streq	r4, [r7]
   20c40:	beq	20cd4 <__assert_fail@plt+0xe18c>
   20c44:	add	r1, sp, #28
   20c48:	mov	r2, #6
   20c4c:	mov	r0, r6
   20c50:	bl	2342c <__assert_fail@plt+0x108e4>
   20c54:	cmn	r0, #1
   20c58:	beq	20cfc <__assert_fail@plt+0xe1b4>
   20c5c:	ldr	r2, [sp, #4]
   20c60:	add	r1, sp, #8
   20c64:	add	r0, sp, #28
   20c68:	bl	124ac <memcmp@plt>
   20c6c:	cmp	r0, #0
   20c70:	beq	20cc8 <__assert_fail@plt+0xe180>
   20c74:	ldr	r2, [sp, #12]
   20c78:	add	r1, sp, #16
   20c7c:	add	r0, sp, #28
   20c80:	bl	124ac <memcmp@plt>
   20c84:	cmp	r0, #0
   20c88:	beq	20cc8 <__assert_fail@plt+0xe180>
   20c8c:	add	r0, sp, #28
   20c90:	ldr	r2, [sp, #20]
   20c94:	add	r1, sp, #24
   20c98:	bl	124ac <memcmp@plt>
   20c9c:	cmp	r0, #0
   20ca0:	beq	20cc8 <__assert_fail@plt+0xe180>
   20ca4:	ldrb	r3, [sp, #28]
   20ca8:	tst	r3, #128	; 0x80
   20cac:	beq	20ce0 <__assert_fail@plt+0xe198>
   20cb0:	tst	r3, #64	; 0x40
   20cb4:	asreq	r3, r3, #2
   20cb8:	andne	r3, r3, #63	; 0x3f
   20cbc:	andeq	r3, r3, #15
   20cc0:	cmp	r3, #8
   20cc4:	bne	20ce0 <__assert_fail@plt+0xe198>
   20cc8:	mov	r4, #1
   20ccc:	mov	r3, #0
   20cd0:	str	r3, [r7]
   20cd4:	mov	r0, r6
   20cd8:	bl	22934 <__assert_fail@plt+0xfdec>
   20cdc:	b	20be0 <__assert_fail@plt+0xe098>
   20ce0:	mov	r4, #0
   20ce4:	b	20cd4 <__assert_fail@plt+0xe18c>
   20ce8:	bl	127c4 <gpg_err_code_from_syserror@plt>
   20cec:	mov	r4, r6
   20cf0:	uxth	r0, r0
   20cf4:	str	r0, [r7]
   20cf8:	b	20be0 <__assert_fail@plt+0xe098>
   20cfc:	ldr	r3, [r6, #56]	; 0x38
   20d00:	mov	r4, #0
   20d04:	str	r3, [r7]
   20d08:	b	20cd4 <__assert_fail@plt+0xe18c>
   20d0c:	bl	124e8 <__stack_chk_fail@plt>
   20d10:	andeq	r9, r2, r0, lsr sl
   20d14:	andeq	fp, r3, r0, lsl fp
   20d18:	push	{r4, r5, r6, r7, r8, lr}
   20d1c:	mov	r5, r0
   20d20:	ldr	r7, [pc, #88]	; 20d80 <__assert_fail@plt+0xe238>
   20d24:	mov	r6, r1
   20d28:	b	20d50 <__assert_fail@plt+0xe208>
   20d2c:	bl	12824 <strncasecmp@plt>
   20d30:	cmp	r0, #0
   20d34:	beq	20d78 <__assert_fail@plt+0xe230>
   20d38:	ldrb	r0, [r5, r4]!
   20d3c:	cmp	r0, #124	; 0x7c
   20d40:	ldrbeq	r0, [r5, #1]
   20d44:	addeq	r5, r5, #1
   20d48:	cmp	r0, #0
   20d4c:	popeq	{r4, r5, r6, r7, r8, pc}
   20d50:	mov	r1, r7
   20d54:	mov	r0, r5
   20d58:	bl	123c8 <strcspn@plt>
   20d5c:	mov	r1, r6
   20d60:	subs	r4, r0, #0
   20d64:	mov	r2, r4
   20d68:	mov	r0, r5
   20d6c:	bne	20d2c <__assert_fail@plt+0xe1e4>
   20d70:	mov	r0, r4
   20d74:	pop	{r4, r5, r6, r7, r8, pc}
   20d78:	mov	r0, #1
   20d7c:	pop	{r4, r5, r6, r7, r8, pc}
   20d80:	andeq	r9, r2, r8, ror #22
   20d84:	push	{r4, r5, r6, lr}
   20d88:	sub	sp, sp, #32
   20d8c:	ldr	r4, [pc, #196]	; 20e58 <__assert_fail@plt+0xe310>
   20d90:	cmp	r1, #0
   20d94:	cmpne	r0, #0
   20d98:	ldr	r3, [r4]
   20d9c:	str	r3, [sp, #28]
   20da0:	bne	20dc0 <__assert_fail@plt+0xe278>
   20da4:	mov	r0, #0
   20da8:	ldr	r2, [sp, #28]
   20dac:	ldr	r3, [r4]
   20db0:	cmp	r2, r3
   20db4:	bne	20e54 <__assert_fail@plt+0xe30c>
   20db8:	add	sp, sp, #32
   20dbc:	pop	{r4, r5, r6, pc}
   20dc0:	mov	r5, r1
   20dc4:	add	r3, sp, #12
   20dc8:	add	r2, sp, #8
   20dcc:	add	r1, sp, #4
   20dd0:	bl	20418 <__assert_fail@plt+0xd8d0>
   20dd4:	subs	r6, r0, #0
   20dd8:	beq	20da4 <__assert_fail@plt+0xe25c>
   20ddc:	mov	r0, r5
   20de0:	add	r3, sp, #24
   20de4:	add	r2, sp, #20
   20de8:	add	r1, sp, #16
   20dec:	bl	20418 <__assert_fail@plt+0xd8d0>
   20df0:	cmp	r0, #0
   20df4:	beq	20da4 <__assert_fail@plt+0xe25c>
   20df8:	ldr	r2, [sp, #4]
   20dfc:	ldr	r3, [sp, #16]
   20e00:	cmp	r2, r3
   20e04:	ble	20e10 <__assert_fail@plt+0xe2c8>
   20e08:	mov	r0, #1
   20e0c:	b	20da8 <__assert_fail@plt+0xe260>
   20e10:	bne	20da4 <__assert_fail@plt+0xe25c>
   20e14:	ldr	r2, [sp, #8]
   20e18:	ldr	r3, [sp, #20]
   20e1c:	cmp	r2, r3
   20e20:	bgt	20e08 <__assert_fail@plt+0xe2c0>
   20e24:	bne	20da4 <__assert_fail@plt+0xe25c>
   20e28:	ldr	r2, [sp, #12]
   20e2c:	ldr	r3, [sp, #24]
   20e30:	cmp	r2, r3
   20e34:	bgt	20e08 <__assert_fail@plt+0xe2c0>
   20e38:	bne	20da4 <__assert_fail@plt+0xe25c>
   20e3c:	mov	r1, r0
   20e40:	mov	r0, r6
   20e44:	bl	1238c <strcmp@plt>
   20e48:	cmp	r0, #0
   20e4c:	bge	20e08 <__assert_fail@plt+0xe2c0>
   20e50:	b	20da4 <__assert_fail@plt+0xe25c>
   20e54:	bl	124e8 <__stack_chk_fail@plt>
   20e58:	andeq	fp, r3, r0, lsl fp
   20e5c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e60:	subs	r5, r0, #0
   20e64:	mov	r7, r1
   20e68:	mov	r6, r2
   20e6c:	beq	21004 <__assert_fail@plt+0xe4bc>
   20e70:	ldrb	r4, [r5]
   20e74:	cmp	r4, #32
   20e78:	cmpne	r4, #9
   20e7c:	bne	20e90 <__assert_fail@plt+0xe348>
   20e80:	ldrb	r4, [r5, #1]!
   20e84:	cmp	r4, #9
   20e88:	cmpne	r4, #32
   20e8c:	beq	20e80 <__assert_fail@plt+0xe338>
   20e90:	cmp	r4, #45	; 0x2d
   20e94:	beq	210d4 <__assert_fail@plt+0xe58c>
   20e98:	ldr	r1, [pc, #584]	; 210e8 <__assert_fail@plt+0xe5a0>
   20e9c:	mov	r0, r5
   20ea0:	bl	1238c <strcmp@plt>
   20ea4:	cmp	r0, #0
   20ea8:	beq	20ec0 <__assert_fail@plt+0xe378>
   20eac:	ldr	r1, [pc, #568]	; 210ec <__assert_fail@plt+0xe5a4>
   20eb0:	mov	r0, r5
   20eb4:	bl	1238c <strcmp@plt>
   20eb8:	cmp	r0, #0
   20ebc:	bne	20f1c <__assert_fail@plt+0xe3d4>
   20ec0:	ldr	r0, [pc, #552]	; 210f0 <__assert_fail@plt+0xe5a8>
   20ec4:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   20ec8:	ldr	r2, [r6, #4]
   20ecc:	cmp	r2, #0
   20ed0:	beq	20efc <__assert_fail@plt+0xe3b4>
   20ed4:	ldr	r5, [pc, #536]	; 210f4 <__assert_fail@plt+0xe5ac>
   20ed8:	add	r4, r6, #8
   20edc:	ldr	r1, [r4, #-8]
   20ee0:	mov	r6, r4
   20ee4:	add	r4, r4, #8
   20ee8:	mov	r0, r5
   20eec:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   20ef0:	ldr	r2, [r4, #-4]
   20ef4:	cmp	r2, #0
   20ef8:	bne	20edc <__assert_fail@plt+0xe394>
   20efc:	ldr	r3, [r6]
   20f00:	cmp	r3, #77	; 0x4d
   20f04:	bne	20fcc <__assert_fail@plt+0xe484>
   20f08:	ldr	r0, [r7]
   20f0c:	str	r0, [r7]
   20f10:	mov	r7, #0
   20f14:	mov	r0, r7
   20f18:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f1c:	sub	r4, r4, #48	; 0x30
   20f20:	cmp	r4, #9
   20f24:	bls	20fd4 <__assert_fail@plt+0xe48c>
   20f28:	mov	r0, r5
   20f2c:	ldr	r1, [pc, #452]	; 210f8 <__assert_fail@plt+0xe5b0>
   20f30:	bl	17a14 <__assert_fail@plt+0x4ecc>
   20f34:	subs	r8, r0, #0
   20f38:	beq	210c4 <__assert_fail@plt+0xe57c>
   20f3c:	ldr	fp, [r8]
   20f40:	cmp	fp, #0
   20f44:	beq	210cc <__assert_fail@plt+0xe584>
   20f48:	ldr	r9, [pc, #428]	; 210fc <__assert_fail@plt+0xe5b4>
   20f4c:	mov	r4, r8
   20f50:	mov	r5, #0
   20f54:	b	20f64 <__assert_fail@plt+0xe41c>
   20f58:	ldr	fp, [r4, #4]!
   20f5c:	cmp	fp, #0
   20f60:	beq	20fb8 <__assert_fail@plt+0xe470>
   20f64:	ldrb	r3, [fp]
   20f68:	cmp	r3, #0
   20f6c:	beq	20f58 <__assert_fail@plt+0xe410>
   20f70:	ldr	r1, [r6, #4]
   20f74:	cmp	r1, #0
   20f78:	beq	21068 <__assert_fail@plt+0xe520>
   20f7c:	mov	sl, r6
   20f80:	b	20f94 <__assert_fail@plt+0xe44c>
   20f84:	add	sl, sl, #8
   20f88:	ldr	r1, [sl, #4]
   20f8c:	cmp	r1, #0
   20f90:	beq	21068 <__assert_fail@plt+0xe520>
   20f94:	mov	r0, fp
   20f98:	bl	1238c <strcmp@plt>
   20f9c:	cmp	r0, #0
   20fa0:	bne	20f84 <__assert_fail@plt+0xe43c>
   20fa4:	ldr	fp, [r4, #4]!
   20fa8:	ldr	r3, [sl]
   20fac:	cmp	fp, #0
   20fb0:	orr	r5, r5, r3
   20fb4:	bne	20f64 <__assert_fail@plt+0xe41c>
   20fb8:	mov	r0, r8
   20fbc:	bl	124a0 <gcry_free@plt>
   20fc0:	ldr	r0, [r7]
   20fc4:	orr	r0, r5, r0
   20fc8:	b	20f0c <__assert_fail@plt+0xe3c4>
   20fcc:	mov	r0, #0
   20fd0:	bl	12764 <exit@plt>
   20fd4:	bl	1280c <__errno_location@plt>
   20fd8:	mov	r2, #0
   20fdc:	mov	r1, r2
   20fe0:	mov	r4, r0
   20fe4:	mov	r0, r5
   20fe8:	str	r2, [r4]
   20fec:	bl	1277c <strtoul@plt>
   20ff0:	cmn	r0, #1
   20ff4:	beq	210b8 <__assert_fail@plt+0xe570>
   20ff8:	ldr	r3, [r7]
   20ffc:	orr	r0, r0, r3
   21000:	b	20f0c <__assert_fail@plt+0xe3c4>
   21004:	cmp	r1, #0
   21008:	beq	20f14 <__assert_fail@plt+0xe3cc>
   2100c:	ldr	r0, [pc, #236]	; 21100 <__assert_fail@plt+0xe5b8>
   21010:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   21014:	ldr	r1, [r6, #4]
   21018:	cmp	r1, #0
   2101c:	addne	r6, r6, #8
   21020:	ldrne	r4, [pc, #220]	; 21104 <__assert_fail@plt+0xe5bc>
   21024:	bne	2103c <__assert_fail@plt+0xe4f4>
   21028:	b	21058 <__assert_fail@plt+0xe510>
   2102c:	add	r6, r6, #8
   21030:	ldr	r1, [r6, #-4]
   21034:	cmp	r1, #0
   21038:	beq	21058 <__assert_fail@plt+0xe510>
   2103c:	ldr	r2, [r7]
   21040:	ldr	r3, [r6, #-8]
   21044:	tst	r2, r3
   21048:	beq	2102c <__assert_fail@plt+0xe4e4>
   2104c:	mov	r0, r4
   21050:	bl	1c958 <__assert_fail@plt+0x9e10>
   21054:	b	2102c <__assert_fail@plt+0xe4e4>
   21058:	ldr	r0, [pc, #168]	; 21108 <__assert_fail@plt+0xe5c0>
   2105c:	bl	1c958 <__assert_fail@plt+0x9e10>
   21060:	mov	r7, #0
   21064:	b	20f14 <__assert_fail@plt+0xe3cc>
   21068:	mov	r1, r9
   2106c:	mov	r0, fp
   21070:	bl	1238c <strcmp@plt>
   21074:	cmp	r0, #0
   21078:	streq	r0, [r7]
   2107c:	moveq	r5, r0
   21080:	beq	20f58 <__assert_fail@plt+0xe410>
   21084:	mov	r0, fp
   21088:	ldr	r1, [pc, #124]	; 2110c <__assert_fail@plt+0xe5c4>
   2108c:	bl	1238c <strcmp@plt>
   21090:	cmp	r0, #0
   21094:	mvneq	r5, #0
   21098:	beq	20f58 <__assert_fail@plt+0xe410>
   2109c:	mov	r2, #5
   210a0:	ldr	r1, [pc, #104]	; 21110 <__assert_fail@plt+0xe5c8>
   210a4:	mov	r0, #0
   210a8:	bl	124dc <dcgettext@plt>
   210ac:	ldr	r1, [r4]
   210b0:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   210b4:	b	20f58 <__assert_fail@plt+0xe410>
   210b8:	ldr	r3, [r4]
   210bc:	cmp	r3, #34	; 0x22
   210c0:	bne	20f0c <__assert_fail@plt+0xe3c4>
   210c4:	mvn	r7, #0
   210c8:	b	20f14 <__assert_fail@plt+0xe3cc>
   210cc:	mov	r5, fp
   210d0:	b	20fb8 <__assert_fail@plt+0xe470>
   210d4:	bl	1280c <__errno_location@plt>
   210d8:	mov	r3, #22
   210dc:	mvn	r7, #0
   210e0:	str	r3, [r0]
   210e4:	b	20f14 <__assert_fail@plt+0xe3cc>
   210e8:	andeq	r9, r2, r8, lsl #23
   210ec:	strheq	r9, [r2], -r8
   210f0:	andeq	r9, r2, ip, lsl #23
   210f4:	andeq	r9, r2, r4, lsr #23
   210f8:			; <UNDEFINED> instruction: 0x00029bb0
   210fc:	ldrdeq	r9, [r2], -ip
   21100:	andeq	r9, r2, ip, ror #22
   21104:	andeq	r9, r2, r4, lsl #23
   21108:	andeq	sl, r2, ip, lsr #4
   2110c:			; <UNDEFINED> instruction: 0x00029bb4
   21110:			; <UNDEFINED> instruction: 0x00029bb8
   21114:	push	{r0, r1, r2, r3}
   21118:	push	{r4, lr}
   2111c:	sub	sp, sp, #16
   21120:	ldr	r4, [pc, #100]	; 2118c <__assert_fail@plt+0xe644>
   21124:	add	r3, sp, #28
   21128:	mov	r2, r3
   2112c:	ldr	ip, [r4]
   21130:	ldr	r1, [sp, #24]
   21134:	add	r0, sp, #8
   21138:	str	ip, [sp, #12]
   2113c:	str	r3, [sp, #4]
   21140:	bl	12878 <gpgrt_vasprintf@plt>
   21144:	cmp	r0, #0
   21148:	blt	21170 <__assert_fail@plt+0xe628>
   2114c:	ldr	r2, [sp, #12]
   21150:	ldr	r3, [r4]
   21154:	ldr	r0, [sp, #8]
   21158:	cmp	r2, r3
   2115c:	bne	21188 <__assert_fail@plt+0xe640>
   21160:	add	sp, sp, #16
   21164:	pop	{r4, lr}
   21168:	add	sp, sp, #16
   2116c:	bx	lr
   21170:	bl	1280c <__errno_location@plt>
   21174:	ldr	r0, [r0]
   21178:	bl	126c8 <strerror@plt>
   2117c:	mov	r1, r0
   21180:	ldr	r0, [pc, #8]	; 21190 <__assert_fail@plt+0xe648>
   21184:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   21188:	bl	124e8 <__stack_chk_fail@plt>
   2118c:	andeq	fp, r3, r0, lsl fp
   21190:	andeq	r9, r2, r4, ror #23
   21194:	push	{r0, r1, r2, r3}
   21198:	push	{r4, lr}
   2119c:	sub	sp, sp, #16
   211a0:	ldr	r4, [pc, #76]	; 211f4 <__assert_fail@plt+0xe6ac>
   211a4:	add	r3, sp, #28
   211a8:	mov	r2, r3
   211ac:	ldr	ip, [r4]
   211b0:	ldr	r1, [sp, #24]
   211b4:	add	r0, sp, #8
   211b8:	str	r3, [sp, #4]
   211bc:	str	ip, [sp, #12]
   211c0:	bl	12878 <gpgrt_vasprintf@plt>
   211c4:	ldr	r2, [sp, #12]
   211c8:	ldr	r3, [r4]
   211cc:	cmp	r0, #0
   211d0:	movlt	r0, #0
   211d4:	ldrge	r0, [sp, #8]
   211d8:	cmp	r2, r3
   211dc:	bne	211f0 <__assert_fail@plt+0xe6a8>
   211e0:	add	sp, sp, #16
   211e4:	pop	{r4, lr}
   211e8:	add	sp, sp, #16
   211ec:	bx	lr
   211f0:	bl	124e8 <__stack_chk_fail@plt>
   211f4:	andeq	fp, r3, r0, lsl fp
   211f8:	cmp	r1, #0
   211fc:	moveq	r1, #16
   21200:	push	{r4, lr}
   21204:	mov	r4, r0
   21208:	streq	r1, [r0, #4]
   2120c:	beq	21224 <__assert_fail@plt+0xe6dc>
   21210:	cmp	r1, #65536	; 0x10000
   21214:	movcs	r3, #65536	; 0x10000
   21218:	movcs	r1, r3
   2121c:	strcc	r1, [r0, #4]
   21220:	strcs	r3, [r0, #4]
   21224:	mov	r3, #0
   21228:	mov	r0, r1
   2122c:	str	r3, [r4]
   21230:	str	r3, [r4, #8]
   21234:	mov	r1, #4
   21238:	bl	12860 <gcry_calloc@plt>
   2123c:	cmp	r0, #0
   21240:	str	r0, [r4, #12]
   21244:	popne	{r4, pc}
   21248:	bl	1280c <__errno_location@plt>
   2124c:	ldr	r3, [r0]
   21250:	str	r3, [r4, #8]
   21254:	pop	{r4, pc}
   21258:	ldr	r3, [r0, #8]
   2125c:	cmp	r3, #0
   21260:	bxne	lr
   21264:	push	{r4, r5, r6, r7, r8, lr}
   21268:	mov	r6, r1
   2126c:	ldm	r0, {r3, r5}
   21270:	mov	r4, r0
   21274:	add	r2, r3, #1
   21278:	cmp	r2, r5
   2127c:	bcc	212f0 <__assert_fail@plt+0xe7a8>
   21280:	cmp	r5, #7
   21284:	bls	21318 <__assert_fail@plt+0xe7d0>
   21288:	cmp	r5, #4096	; 0x1000
   2128c:	lslcc	r5, r5, #1
   21290:	bcs	21300 <__assert_fail@plt+0xe7b8>
   21294:	mov	r1, #4
   21298:	mov	r0, r5
   2129c:	bl	12860 <gcry_calloc@plt>
   212a0:	subs	r7, r0, #0
   212a4:	beq	21320 <__assert_fail@plt+0xe7d8>
   212a8:	ldr	lr, [r4, #4]
   212ac:	ldr	r0, [r4, #12]
   212b0:	cmp	lr, #0
   212b4:	addne	lr, r0, lr, lsl #2
   212b8:	subne	lr, lr, #4
   212bc:	subne	r3, r0, #4
   212c0:	subne	r2, r7, #4
   212c4:	beq	212d8 <__assert_fail@plt+0xe790>
   212c8:	ldr	ip, [r3, #4]!
   212cc:	cmp	lr, r3
   212d0:	str	ip, [r2, #4]!
   212d4:	bne	212c8 <__assert_fail@plt+0xe780>
   212d8:	bl	124a0 <gcry_free@plt>
   212dc:	ldr	r3, [r4]
   212e0:	str	r7, [r4, #12]
   212e4:	str	r5, [r4, #4]
   212e8:	add	r2, r3, #1
   212ec:	b	212f4 <__assert_fail@plt+0xe7ac>
   212f0:	ldr	r7, [r0, #12]
   212f4:	str	r2, [r4]
   212f8:	str	r6, [r7, r3, lsl #2]
   212fc:	pop	{r4, r5, r6, r7, r8, pc}
   21300:	cmp	r5, #65536	; 0x10000
   21304:	addcc	r5, r5, #2048	; 0x800
   21308:	bcc	21294 <__assert_fail@plt+0xe74c>
   2130c:	mov	r3, #12
   21310:	str	r3, [r0, #8]
   21314:	pop	{r4, r5, r6, r7, r8, pc}
   21318:	mov	r5, #16
   2131c:	b	21294 <__assert_fail@plt+0xe74c>
   21320:	bl	1280c <__errno_location@plt>
   21324:	ldr	r3, [r0]
   21328:	cmp	r3, #0
   2132c:	moveq	r3, #12
   21330:	str	r3, [r4, #8]
   21334:	pop	{r4, r5, r6, r7, r8, pc}
   21338:	ldr	r2, [r0, #8]
   2133c:	push	{r4, lr}
   21340:	cmp	r2, #0
   21344:	mov	r4, r0
   21348:	ldr	r0, [r0, #12]
   2134c:	bne	21370 <__assert_fail@plt+0xe828>
   21350:	cmp	r1, #0
   21354:	ldrne	r2, [r4]
   21358:	strne	r2, [r1]
   2135c:	mov	r1, #0
   21360:	mov	r2, #12
   21364:	str	r1, [r4, #12]
   21368:	str	r2, [r4, #8]
   2136c:	pop	{r4, pc}
   21370:	cmp	r0, #0
   21374:	beq	21388 <__assert_fail@plt+0xe840>
   21378:	bl	124a0 <gcry_free@plt>
   2137c:	ldr	r2, [r4, #8]
   21380:	mov	r3, #0
   21384:	str	r3, [r4, #12]
   21388:	mov	r0, r2
   2138c:	bl	129a4 <gpg_err_set_errno@plt>
   21390:	mov	r0, #0
   21394:	pop	{r4, pc}
   21398:	push	{r4, r5, r6, lr}
   2139c:	sub	sp, sp, #16
   213a0:	ldr	r5, [pc, #244]	; 2149c <__assert_fail@plt+0xe954>
   213a4:	ldr	r3, [r0]
   213a8:	mov	r4, r0
   213ac:	ldr	r2, [r5]
   213b0:	cmp	r3, #3
   213b4:	str	r2, [sp, #12]
   213b8:	beq	21444 <__assert_fail@plt+0xe8fc>
   213bc:	cmp	r3, #2
   213c0:	bne	21494 <__assert_fail@plt+0xe94c>
   213c4:	ldr	r6, [r0, #60]	; 0x3c
   213c8:	cmp	r6, #0
   213cc:	beq	2148c <__assert_fail@plt+0xe944>
   213d0:	ldr	r2, [r0, #44]	; 0x2c
   213d4:	add	r3, sp, #8
   213d8:	str	r3, [sp]
   213dc:	str	r2, [sp, #8]
   213e0:	ldr	r3, [r0, #48]	; 0x30
   213e4:	ldr	r2, [r0, #76]	; 0x4c
   213e8:	mov	r1, #4
   213ec:	ldr	r0, [r0, #64]	; 0x40
   213f0:	blx	r6
   213f4:	subs	r3, r0, #0
   213f8:	strne	r3, [r4, #56]	; 0x38
   213fc:	beq	21424 <__assert_fail@plt+0xe8dc>
   21400:	mov	r2, #0
   21404:	str	r2, [r4, #44]	; 0x2c
   21408:	ldr	r1, [sp, #12]
   2140c:	ldr	r2, [r5]
   21410:	mov	r0, r3
   21414:	cmp	r1, r2
   21418:	bne	21488 <__assert_fail@plt+0xe940>
   2141c:	add	sp, sp, #16
   21420:	pop	{r4, r5, r6, pc}
   21424:	ldr	r1, [r4, #44]	; 0x2c
   21428:	ldr	r2, [sp, #8]
   2142c:	cmp	r1, r2
   21430:	beq	21400 <__assert_fail@plt+0xe8b8>
   21434:	ldr	r0, [pc, #100]	; 214a0 <__assert_fail@plt+0xe958>
   21438:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   2143c:	mov	r3, #63	; 0x3f
   21440:	b	21400 <__assert_fail@plt+0xe8b8>
   21444:	ldr	r3, [pc, #88]	; 214a4 <__assert_fail@plt+0xe95c>
   21448:	ldr	r1, [r0, #36]	; 0x24
   2144c:	ldr	r3, [r3]
   21450:	add	r6, r1, #8192	; 0x2000
   21454:	cmp	r3, #0
   21458:	bne	21478 <__assert_fail@plt+0xe930>
   2145c:	mov	r1, r6
   21460:	ldr	r0, [r4, #48]	; 0x30
   21464:	bl	12698 <gcry_xrealloc@plt>
   21468:	str	r6, [r4, #36]	; 0x24
   2146c:	mov	r3, #0
   21470:	str	r0, [r4, #48]	; 0x30
   21474:	b	21408 <__assert_fail@plt+0xe8c0>
   21478:	mov	r2, r6
   2147c:	ldr	r0, [pc, #36]	; 214a8 <__assert_fail@plt+0xe960>
   21480:	bl	1c890 <__assert_fail@plt+0x9d48>
   21484:	b	2145c <__assert_fail@plt+0xe914>
   21488:	bl	124e8 <__stack_chk_fail@plt>
   2148c:	ldr	r0, [pc, #24]	; 214ac <__assert_fail@plt+0xe964>
   21490:	bl	1c84c <__assert_fail@plt+0x9d04>
   21494:	ldr	r0, [pc, #20]	; 214b0 <__assert_fail@plt+0xe968>
   21498:	bl	1c84c <__assert_fail@plt+0x9d04>
   2149c:	andeq	fp, r3, r0, lsl fp
   214a0:	andeq	r9, r2, r0, lsl #27
   214a4:	andeq	ip, r3, ip, ror r5
   214a8:	andeq	r9, r2, r0, lsr #26
   214ac:	andeq	r9, r2, r4, ror #26
   214b0:	andeq	r9, r2, r8, asr #26
   214b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   214b8:	cmp	r1, #3
   214bc:	ldr	r8, [sp, #32]
   214c0:	mov	r6, r0
   214c4:	mov	r9, r3
   214c8:	ldr	r5, [r0]
   214cc:	ldr	r4, [r8]
   214d0:	beq	21588 <__assert_fail@plt+0xea40>
   214d4:	cmp	r1, #4
   214d8:	beq	21500 <__assert_fail@plt+0xe9b8>
   214dc:	cmp	r1, #1
   214e0:	beq	21654 <__assert_fail@plt+0xeb0c>
   214e4:	cmp	r1, #5
   214e8:	beq	216a0 <__assert_fail@plt+0xeb58>
   214ec:	cmp	r1, #2
   214f0:	movne	r7, #0
   214f4:	beq	215f4 <__assert_fail@plt+0xeaac>
   214f8:	mov	r0, r7
   214fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21500:	cmp	r4, #0
   21504:	moveq	r7, r4
   21508:	beq	2157c <__assert_fail@plt+0xea34>
   2150c:	mov	sl, r3
   21510:	mov	r2, r4
   21514:	mov	r1, sl
   21518:	mov	r0, r5
   2151c:	bl	128b4 <write@plt>
   21520:	cmn	r0, #1
   21524:	beq	21544 <__assert_fail@plt+0xe9fc>
   21528:	cmp	r0, #0
   2152c:	ble	21510 <__assert_fail@plt+0xe9c8>
   21530:	subs	r4, r4, r0
   21534:	add	sl, sl, r0
   21538:	bne	21510 <__assert_fail@plt+0xe9c8>
   2153c:	mov	r7, r4
   21540:	b	21578 <__assert_fail@plt+0xea30>
   21544:	bl	1280c <__errno_location@plt>
   21548:	ldr	r3, [r0]
   2154c:	cmp	r3, #4
   21550:	beq	21510 <__assert_fail@plt+0xe9c8>
   21554:	bl	127c4 <gpg_err_code_from_syserror@plt>
   21558:	uxth	r7, r0
   2155c:	bl	1280c <__errno_location@plt>
   21560:	ldr	r0, [r0]
   21564:	bl	126c8 <strerror@plt>
   21568:	add	r1, r6, #20
   2156c:	mov	r2, r0
   21570:	ldr	r0, [pc, #552]	; 217a0 <__assert_fail@plt+0xec58>
   21574:	bl	1c744 <__assert_fail@plt+0x9bfc>
   21578:	sub	r4, sl, r9
   2157c:	str	r4, [r8]
   21580:	mov	r0, r7
   21584:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21588:	cmp	r4, #0
   2158c:	beq	2178c <__assert_fail@plt+0xec44>
   21590:	ldr	r7, [r0, #12]
   21594:	cmp	r7, #0
   21598:	movne	r3, #0
   2159c:	strne	r3, [r8]
   215a0:	mvnne	r7, #0
   215a4:	beq	215c0 <__assert_fail@plt+0xea78>
   215a8:	b	214f8 <__assert_fail@plt+0xe9b0>
   215ac:	bl	1280c <__errno_location@plt>
   215b0:	ldr	r3, [r0]
   215b4:	mov	sl, r0
   215b8:	cmp	r3, #4
   215bc:	bne	2166c <__assert_fail@plt+0xeb24>
   215c0:	mov	r2, r4
   215c4:	mov	r1, r9
   215c8:	mov	r0, r5
   215cc:	bl	123e0 <read@plt>
   215d0:	cmn	r0, #1
   215d4:	beq	215ac <__assert_fail@plt+0xea64>
   215d8:	cmp	r0, #0
   215dc:	mvneq	r7, #0
   215e0:	moveq	r3, #1
   215e4:	streq	r3, [r6, #12]
   215e8:	str	r0, [r8]
   215ec:	mov	r0, r7
   215f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   215f4:	cmp	r5, #1
   215f8:	bls	21644 <__assert_fail@plt+0xeafc>
   215fc:	ldr	r7, [pc, #416]	; 217a4 <__assert_fail@plt+0xec5c>
   21600:	ldr	r3, [r7]
   21604:	cmp	r3, #0
   21608:	bne	21728 <__assert_fail@plt+0xebe0>
   2160c:	ldr	r3, [r6, #4]
   21610:	cmp	r3, #0
   21614:	bne	21644 <__assert_fail@plt+0xeafc>
   21618:	ldr	r3, [r6, #8]
   2161c:	cmp	r3, #0
   21620:	beq	216b8 <__assert_fail@plt+0xeb70>
   21624:	mov	r0, r5
   21628:	bl	12af4 <close@plt>
   2162c:	ldr	r3, [r7]
   21630:	cmp	r3, #0
   21634:	beq	21644 <__assert_fail@plt+0xeafc>
   21638:	mov	r1, r5
   2163c:	ldr	r0, [pc, #356]	; 217a8 <__assert_fail@plt+0xec60>
   21640:	bl	1c890 <__assert_fail@plt+0x9d48>
   21644:	mov	r0, r6
   21648:	bl	124a0 <gcry_free@plt>
   2164c:	mov	r7, #0
   21650:	b	214f8 <__assert_fail@plt+0xe9b0>
   21654:	mov	r7, #0
   21658:	str	r7, [r0, #12]
   2165c:	str	r7, [r0, #4]
   21660:	str	r7, [r0, #8]
   21664:	mov	r0, r7
   21668:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2166c:	cmp	r3, #32
   21670:	moveq	r0, #0
   21674:	beq	215e8 <__assert_fail@plt+0xeaa0>
   21678:	bl	127c4 <gpg_err_code_from_syserror@plt>
   2167c:	uxth	r7, r0
   21680:	ldr	r0, [sl]
   21684:	bl	126c8 <strerror@plt>
   21688:	add	r1, r6, #20
   2168c:	mov	r2, r0
   21690:	ldr	r0, [pc, #276]	; 217ac <__assert_fail@plt+0xec64>
   21694:	bl	1c744 <__assert_fail@plt+0x9bfc>
   21698:	mov	r0, #0
   2169c:	b	215e8 <__assert_fail@plt+0xeaa0>
   216a0:	mov	r2, r4
   216a4:	mov	r0, r3
   216a8:	ldr	r1, [pc, #256]	; 217b0 <__assert_fail@plt+0xec68>
   216ac:	bl	16f50 <__assert_fail@plt+0x4408>
   216b0:	mov	r7, #0
   216b4:	b	214f8 <__assert_fail@plt+0xe9b0>
   216b8:	ldrb	r3, [r6, #20]
   216bc:	cmp	r3, #0
   216c0:	beq	21624 <__assert_fail@plt+0xeadc>
   216c4:	ldr	r9, [pc, #232]	; 217b4 <__assert_fail@plt+0xec6c>
   216c8:	add	r8, r6, #20
   216cc:	ldr	r4, [r9]
   216d0:	cmp	r4, #0
   216d4:	bne	216e8 <__assert_fail@plt+0xeba0>
   216d8:	b	2173c <__assert_fail@plt+0xebf4>
   216dc:	ldr	r4, [r4]
   216e0:	cmp	r4, #0
   216e4:	beq	2173c <__assert_fail@plt+0xebf4>
   216e8:	ldr	r3, [r4, #4]
   216ec:	cmn	r3, #1
   216f0:	bne	216dc <__assert_fail@plt+0xeb94>
   216f4:	mov	r1, r8
   216f8:	add	r0, r4, #8
   216fc:	bl	1238c <strcmp@plt>
   21700:	cmp	r0, #0
   21704:	bne	216dc <__assert_fail@plt+0xeb94>
   21708:	ldr	r3, [r7]
   2170c:	str	r5, [r4, #4]
   21710:	cmp	r3, #0
   21714:	beq	21644 <__assert_fail@plt+0xeafc>
   21718:	mov	r1, r8
   2171c:	ldr	r0, [pc, #148]	; 217b8 <__assert_fail@plt+0xec70>
   21720:	bl	1c890 <__assert_fail@plt+0x9d48>
   21724:	b	21644 <__assert_fail@plt+0xeafc>
   21728:	add	r1, r0, #20
   2172c:	mov	r2, r5
   21730:	ldr	r0, [pc, #132]	; 217bc <__assert_fail@plt+0xec74>
   21734:	bl	1c890 <__assert_fail@plt+0x9d48>
   21738:	b	2160c <__assert_fail@plt+0xeac4>
   2173c:	ldr	r3, [r7]
   21740:	cmp	r3, #0
   21744:	bne	2177c <__assert_fail@plt+0xec34>
   21748:	mov	r0, r8
   2174c:	bl	12788 <strlen@plt>
   21750:	add	r1, r0, #12
   21754:	mov	r0, #1
   21758:	bl	12a64 <gcry_xcalloc@plt>
   2175c:	mov	r1, r8
   21760:	mov	r4, r0
   21764:	add	r0, r0, #8
   21768:	bl	12620 <strcpy@plt>
   2176c:	ldr	r3, [r9]
   21770:	str	r4, [r9]
   21774:	stm	r4, {r3, r5}
   21778:	b	21644 <__assert_fail@plt+0xeafc>
   2177c:	mov	r1, r8
   21780:	ldr	r0, [pc, #56]	; 217c0 <__assert_fail@plt+0xec78>
   21784:	bl	1c890 <__assert_fail@plt+0x9d48>
   21788:	b	21748 <__assert_fail@plt+0xec00>
   2178c:	ldr	r3, [pc, #48]	; 217c4 <__assert_fail@plt+0xec7c>
   21790:	ldr	r2, [pc, #48]	; 217c8 <__assert_fail@plt+0xec80>
   21794:	ldr	r1, [pc, #48]	; 217cc <__assert_fail@plt+0xec84>
   21798:	ldr	r0, [pc, #48]	; 217d0 <__assert_fail@plt+0xec88>
   2179c:	bl	12b48 <__assert_fail@plt>
   217a0:	andeq	r9, r2, r4, ror #28
   217a4:	andeq	ip, r3, ip, ror r5
   217a8:	strdeq	r9, [r2], -r8
   217ac:			; <UNDEFINED> instruction: 0x00029dbc
   217b0:	ldrdeq	r9, [r2], -r0
   217b4:			; <UNDEFINED> instruction: 0x0003c4b0
   217b8:	andeq	r9, r2, r4, lsl lr
   217bc:	andeq	r9, r2, r0, ror #27
   217c0:	andeq	r9, r2, ip, lsr lr
   217c4:	andeq	r9, r2, r4, lsl #24
   217c8:	andeq	r0, r0, r6, asr #3
   217cc:	andeq	r9, r2, r4, lsr #27
   217d0:	andeq	sl, r2, r8, lsr #12
   217d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217d8:	sub	sp, sp, #20
   217dc:	ldr	r6, [pc, #512]	; 219e4 <__assert_fail@plt+0xee9c>
   217e0:	ldr	r8, [sp, #56]	; 0x38
   217e4:	mov	fp, #0
   217e8:	ldr	r2, [r6]
   217ec:	cmp	r1, #3
   217f0:	str	r2, [sp, #12]
   217f4:	mov	r7, r0
   217f8:	mov	sl, r3
   217fc:	ldr	r9, [r0]
   21800:	ldr	r2, [r8]
   21804:	str	fp, [sp, #4]
   21808:	beq	218d0 <__assert_fail@plt+0xed88>
   2180c:	cmp	r1, #4
   21810:	beq	21850 <__assert_fail@plt+0xed08>
   21814:	cmp	r1, #1
   21818:	streq	fp, [r0, #12]
   2181c:	streq	fp, [r0, #8]
   21820:	beq	21834 <__assert_fail@plt+0xecec>
   21824:	cmp	r1, #5
   21828:	beq	21950 <__assert_fail@plt+0xee08>
   2182c:	cmp	r1, #2
   21830:	beq	21960 <__assert_fail@plt+0xee18>
   21834:	ldr	r2, [sp, #12]
   21838:	ldr	r3, [r6]
   2183c:	mov	r0, fp
   21840:	cmp	r2, r3
   21844:	bne	219cc <__assert_fail@plt+0xee84>
   21848:	add	sp, sp, #20
   2184c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21850:	cmp	r2, #0
   21854:	moveq	fp, r2
   21858:	beq	218c8 <__assert_fail@plt+0xed80>
   2185c:	mov	r4, fp
   21860:	mov	r5, r3
   21864:	str	r2, [sp, #4]
   21868:	b	21884 <__assert_fail@plt+0xed3c>
   2186c:	ldrd	r2, [sp, #4]
   21870:	sub	r2, r2, r3
   21874:	cmp	r2, #0
   21878:	add	r5, r5, r3
   2187c:	str	r2, [sp, #4]
   21880:	beq	218c4 <__assert_fail@plt+0xed7c>
   21884:	add	r3, sp, #8
   21888:	mov	r1, r5
   2188c:	mov	r0, r9
   21890:	str	r4, [sp, #8]
   21894:	bl	12350 <gpgrt_write@plt>
   21898:	subs	fp, r0, #0
   2189c:	beq	2186c <__assert_fail@plt+0xed24>
   218a0:	bl	127c4 <gpg_err_code_from_syserror@plt>
   218a4:	uxth	fp, r0
   218a8:	bl	1280c <__errno_location@plt>
   218ac:	ldr	r0, [r0]
   218b0:	bl	126c8 <strerror@plt>
   218b4:	add	r1, r7, #20
   218b8:	mov	r2, r0
   218bc:	ldr	r0, [pc, #292]	; 219e8 <__assert_fail@plt+0xeea0>
   218c0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   218c4:	sub	r2, r5, sl
   218c8:	str	r2, [r8]
   218cc:	b	21834 <__assert_fail@plt+0xecec>
   218d0:	cmp	r2, fp
   218d4:	beq	219d0 <__assert_fail@plt+0xee88>
   218d8:	ldr	r3, [r0, #12]
   218dc:	cmp	r3, #0
   218e0:	strne	fp, [r8]
   218e4:	mvnne	fp, #0
   218e8:	bne	21834 <__assert_fail@plt+0xecec>
   218ec:	mov	r1, sl
   218f0:	mov	r0, r9
   218f4:	add	r3, sp, #4
   218f8:	bl	12488 <gpgrt_read@plt>
   218fc:	cmn	r0, #1
   21900:	mov	fp, r0
   21904:	beq	21924 <__assert_fail@plt+0xeddc>
   21908:	ldr	r3, [sp, #4]
   2190c:	cmp	r3, #0
   21910:	mvneq	fp, #0
   21914:	moveq	r2, #1
   21918:	streq	r2, [r7, #12]
   2191c:	str	r3, [r8]
   21920:	b	21834 <__assert_fail@plt+0xecec>
   21924:	bl	127c4 <gpg_err_code_from_syserror@plt>
   21928:	uxth	fp, r0
   2192c:	bl	1280c <__errno_location@plt>
   21930:	ldr	r0, [r0]
   21934:	bl	126c8 <strerror@plt>
   21938:	add	r1, r7, #20
   2193c:	mov	r2, r0
   21940:	ldr	r0, [pc, #164]	; 219ec <__assert_fail@plt+0xeea4>
   21944:	bl	1c744 <__assert_fail@plt+0x9bfc>
   21948:	ldr	r3, [sp, #4]
   2194c:	b	2191c <__assert_fail@plt+0xedd4>
   21950:	mov	r0, r3
   21954:	ldr	r1, [pc, #148]	; 219f0 <__assert_fail@plt+0xeea8>
   21958:	bl	16f50 <__assert_fail@plt+0x4408>
   2195c:	b	21834 <__assert_fail@plt+0xecec>
   21960:	mov	r0, fp
   21964:	bl	12740 <_gpgrt_get_std_stream@plt>
   21968:	cmp	r9, r0
   2196c:	beq	2199c <__assert_fail@plt+0xee54>
   21970:	mov	r0, #1
   21974:	bl	12740 <_gpgrt_get_std_stream@plt>
   21978:	cmp	r9, r0
   2197c:	beq	2199c <__assert_fail@plt+0xee54>
   21980:	ldr	r3, [pc, #108]	; 219f4 <__assert_fail@plt+0xeeac>
   21984:	ldr	r3, [r3]
   21988:	cmp	r3, #0
   2198c:	bne	219b8 <__assert_fail@plt+0xee70>
   21990:	ldr	r3, [r7, #4]
   21994:	cmp	r3, #0
   21998:	beq	219ac <__assert_fail@plt+0xee64>
   2199c:	mov	r0, r7
   219a0:	bl	124a0 <gcry_free@plt>
   219a4:	mov	fp, #0
   219a8:	b	21834 <__assert_fail@plt+0xecec>
   219ac:	mov	r0, r9
   219b0:	bl	12644 <gpgrt_fclose@plt>
   219b4:	b	2199c <__assert_fail@plt+0xee54>
   219b8:	mov	r2, r9
   219bc:	add	r1, r7, #20
   219c0:	ldr	r0, [pc, #48]	; 219f8 <__assert_fail@plt+0xeeb0>
   219c4:	bl	1c890 <__assert_fail@plt+0x9d48>
   219c8:	b	21990 <__assert_fail@plt+0xee48>
   219cc:	bl	124e8 <__stack_chk_fail@plt>
   219d0:	ldr	r3, [pc, #36]	; 219fc <__assert_fail@plt+0xeeb4>
   219d4:	ldr	r2, [pc, #36]	; 21a00 <__assert_fail@plt+0xeeb8>
   219d8:	ldr	r1, [pc, #36]	; 21a04 <__assert_fail@plt+0xeebc>
   219dc:	ldr	r0, [pc, #36]	; 21a08 <__assert_fail@plt+0xeec0>
   219e0:	bl	12b48 <__assert_fail@plt>
   219e4:	andeq	fp, r3, r0, lsl fp
   219e8:	andeq	r9, r2, r4, ror #28
   219ec:			; <UNDEFINED> instruction: 0x00029dbc
   219f0:	andeq	r9, r2, ip, ror lr
   219f4:	andeq	ip, r3, ip, ror r5
   219f8:	andeq	r9, r2, ip, lsl #29
   219fc:	andeq	r9, r2, r0, lsl ip
   21a00:	andeq	r0, r0, r2, ror #4
   21a04:	andeq	r9, r2, r4, lsr #27
   21a08:	andeq	sl, r2, r8, lsr #12
   21a0c:	push	{r4, r5, r6, lr}
   21a10:	sub	sp, sp, #16
   21a14:	ldr	r5, [pc, #108]	; 21a88 <__assert_fail@plt+0xef40>
   21a18:	mov	r3, #32
   21a1c:	cmp	r0, #0
   21a20:	ldr	r2, [r5]
   21a24:	mov	r4, r1
   21a28:	str	r2, [sp, #12]
   21a2c:	str	r3, [sp, #8]
   21a30:	beq	21a78 <__assert_fail@plt+0xef30>
   21a34:	ldr	r6, [r0, #60]	; 0x3c
   21a38:	cmp	r6, #0
   21a3c:	beq	21a78 <__assert_fail@plt+0xef30>
   21a40:	add	r3, sp, #8
   21a44:	str	r3, [sp]
   21a48:	mov	r2, #0
   21a4c:	mov	r3, r1
   21a50:	ldr	r0, [r0, #64]	; 0x40
   21a54:	mov	r1, #5
   21a58:	blx	r6
   21a5c:	ldr	r2, [sp, #12]
   21a60:	ldr	r3, [r5]
   21a64:	mov	r0, r4
   21a68:	cmp	r2, r3
   21a6c:	bne	21a84 <__assert_fail@plt+0xef3c>
   21a70:	add	sp, sp, #16
   21a74:	pop	{r4, r5, r6, pc}
   21a78:	mov	r3, #63	; 0x3f
   21a7c:	strh	r3, [r4]
   21a80:	b	21a5c <__assert_fail@plt+0xef14>
   21a84:	bl	124e8 <__stack_chk_fail@plt>
   21a88:	andeq	fp, r3, r0, lsl fp
   21a8c:	push	{r4, r5, r6, r7, r8, lr}
   21a90:	sub	sp, sp, #56	; 0x38
   21a94:	ldr	r8, [pc, #120]	; 21b14 <__assert_fail@plt+0xefcc>
   21a98:	subs	r4, r0, #0
   21a9c:	ldr	r3, [r8]
   21aa0:	str	r3, [sp, #52]	; 0x34
   21aa4:	beq	21af8 <__assert_fail@plt+0xefb0>
   21aa8:	ldr	r7, [pc, #104]	; 21b18 <__assert_fail@plt+0xefd0>
   21aac:	add	r1, sp, #20
   21ab0:	mov	r0, r4
   21ab4:	ldr	r5, [r4, #80]	; 0x50
   21ab8:	ldr	r6, [r4, #84]	; 0x54
   21abc:	bl	21a0c <__assert_fail@plt+0xeec4>
   21ac0:	ldr	r3, [r4, #44]	; 0x2c
   21ac4:	mov	r2, r6
   21ac8:	str	r3, [sp, #8]
   21acc:	ldr	r3, [r4, #40]	; 0x28
   21ad0:	mov	r1, r5
   21ad4:	str	r3, [sp, #4]
   21ad8:	ldr	r3, [r4, #52]	; 0x34
   21adc:	str	r3, [sp]
   21ae0:	mov	r3, r0
   21ae4:	mov	r0, r7
   21ae8:	bl	1c890 <__assert_fail@plt+0x9d48>
   21aec:	ldr	r4, [r4, #76]	; 0x4c
   21af0:	cmp	r4, #0
   21af4:	bne	21aac <__assert_fail@plt+0xef64>
   21af8:	ldr	r2, [sp, #52]	; 0x34
   21afc:	ldr	r3, [r8]
   21b00:	cmp	r2, r3
   21b04:	bne	21b10 <__assert_fail@plt+0xefc8>
   21b08:	add	sp, sp, #56	; 0x38
   21b0c:	pop	{r4, r5, r6, r7, r8, pc}
   21b10:	bl	124e8 <__stack_chk_fail@plt>
   21b14:	andeq	fp, r3, r0, lsl fp
   21b18:	andeq	r9, r2, r0, lsr #29
   21b1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21b20:	mov	r4, r0
   21b24:	ldr	r7, [pc, #1204]	; 21fe0 <__assert_fail@plt+0xf498>
   21b28:	ldr	r6, [pc, #1204]	; 21fe4 <__assert_fail@plt+0xf49c>
   21b2c:	sub	sp, sp, #24
   21b30:	ldr	r0, [r7]
   21b34:	ldr	r3, [r6]
   21b38:	cmp	r0, #0
   21b3c:	mov	r9, r1
   21b40:	mov	r8, r2
   21b44:	str	r3, [sp, #20]
   21b48:	bne	21c8c <__assert_fail@plt+0xf144>
   21b4c:	ldr	r5, [r4]
   21b50:	cmp	r5, #1
   21b54:	beq	21e54 <__assert_fail@plt+0xf30c>
   21b58:	cmp	r5, #0
   21b5c:	bne	21f7c <__assert_fail@plt+0xf434>
   21b60:	ldr	r1, [r4, #40]	; 0x28
   21b64:	ldr	r2, [r4, #44]	; 0x2c
   21b68:	cmp	r1, r2
   21b6c:	bhi	21f94 <__assert_fail@plt+0xf44c>
   21b70:	ldr	r0, [r4, #48]	; 0x30
   21b74:	sub	r2, r2, r1
   21b78:	str	r2, [r4, #44]	; 0x2c
   21b7c:	add	r1, r0, r1
   21b80:	bl	1241c <memmove@plt>
   21b84:	ldr	r2, [r4, #44]	; 0x2c
   21b88:	str	r5, [r4, #40]	; 0x28
   21b8c:	cmp	r2, r8
   21b90:	mov	r1, r2
   21b94:	bcs	21c14 <__assert_fail@plt+0xf0cc>
   21b98:	ldr	r3, [r4, #52]	; 0x34
   21b9c:	cmp	r3, #0
   21ba0:	beq	21c14 <__assert_fail@plt+0xf0cc>
   21ba4:	ldr	r3, [r7]
   21ba8:	cmp	r3, #0
   21bac:	bne	21e5c <__assert_fail@plt+0xf314>
   21bb0:	cmp	r9, #0
   21bb4:	beq	21e54 <__assert_fail@plt+0xf30c>
   21bb8:	ldr	r5, [r4, #76]	; 0x4c
   21bbc:	cmp	r5, #0
   21bc0:	beq	21eb8 <__assert_fail@plt+0xf370>
   21bc4:	ldr	r3, [r7]
   21bc8:	cmp	r3, #0
   21bcc:	bne	21ee8 <__assert_fail@plt+0xf3a0>
   21bd0:	ldr	r0, [r4, #48]	; 0x30
   21bd4:	bl	124a0 <gcry_free@plt>
   21bd8:	ldr	r0, [r4, #72]	; 0x48
   21bdc:	bl	124a0 <gcry_free@plt>
   21be0:	mov	r2, #88	; 0x58
   21be4:	mov	r1, r5
   21be8:	mov	r0, r4
   21bec:	bl	1247c <memcpy@plt>
   21bf0:	mov	r0, r5
   21bf4:	bl	124a0 <gcry_free@plt>
   21bf8:	ldr	r3, [r7]
   21bfc:	cmp	r3, #0
   21c00:	beq	21e54 <__assert_fail@plt+0xf30c>
   21c04:	mov	r0, r4
   21c08:	bl	21a8c <__assert_fail@plt+0xef44>
   21c0c:	mvn	r0, #0
   21c10:	b	21c64 <__assert_fail@plt+0xf11c>
   21c14:	cmp	r2, #0
   21c18:	bne	21c7c <__assert_fail@plt+0xf134>
   21c1c:	ldr	r0, [r4, #56]	; 0x38
   21c20:	cmp	r0, #0
   21c24:	bne	21f48 <__assert_fail@plt+0xf400>
   21c28:	ldr	r8, [r4, #60]	; 0x3c
   21c2c:	cmp	r8, #0
   21c30:	beq	21e54 <__assert_fail@plt+0xf30c>
   21c34:	ldr	r3, [r4, #52]	; 0x34
   21c38:	cmp	r3, #0
   21c3c:	bne	21c4c <__assert_fail@plt+0xf104>
   21c40:	ldr	r3, [r4, #56]	; 0x38
   21c44:	cmp	r3, #0
   21c48:	beq	21cc0 <__assert_fail@plt+0xf178>
   21c4c:	cmp	r5, r1
   21c50:	bcs	21e54 <__assert_fail@plt+0xf30c>
   21c54:	ldr	r3, [r4, #48]	; 0x30
   21c58:	add	r2, r5, #1
   21c5c:	str	r2, [r4, #40]	; 0x28
   21c60:	ldrb	r0, [r3, r5]
   21c64:	ldr	r2, [sp, #20]
   21c68:	ldr	r3, [r6]
   21c6c:	cmp	r2, r3
   21c70:	bne	21f90 <__assert_fail@plt+0xf448>
   21c74:	add	sp, sp, #24
   21c78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21c7c:	ldr	r8, [r4, #60]	; 0x3c
   21c80:	cmp	r8, #0
   21c84:	beq	21c4c <__assert_fail@plt+0xf104>
   21c88:	b	21c34 <__assert_fail@plt+0xf0ec>
   21c8c:	ldr	r0, [r4, #40]	; 0x28
   21c90:	ldr	r3, [r4, #36]	; 0x24
   21c94:	ldr	r2, [r4, #44]	; 0x2c
   21c98:	add	r1, r3, r0
   21c9c:	sub	r1, r1, r2
   21ca0:	sub	r2, r2, r0
   21ca4:	str	r1, [sp, #4]
   21ca8:	str	r2, [sp]
   21cac:	ldr	r0, [pc, #820]	; 21fe8 <__assert_fail@plt+0xf4a0>
   21cb0:	ldr	r2, [r4, #84]	; 0x54
   21cb4:	ldr	r1, [r4, #80]	; 0x50
   21cb8:	bl	1c890 <__assert_fail@plt+0x9d48>
   21cbc:	b	21b4c <__assert_fail@plt+0xf004>
   21cc0:	ldr	r3, [r4, #36]	; 0x24
   21cc4:	ldr	r0, [r7]
   21cc8:	sub	r3, r3, r2
   21ccc:	cmp	r0, #0
   21cd0:	str	r3, [sp, #12]
   21cd4:	bne	21e70 <__assert_fail@plt+0xf328>
   21cd8:	cmp	r3, #0
   21cdc:	beq	21ee0 <__assert_fail@plt+0xf398>
   21ce0:	ldr	r3, [r4, #48]	; 0x30
   21ce4:	add	r2, sp, #12
   21ce8:	add	r3, r3, r1
   21cec:	str	r2, [sp]
   21cf0:	mov	r1, #3
   21cf4:	ldr	r2, [r4, #76]	; 0x4c
   21cf8:	ldr	r0, [r4, #64]	; 0x40
   21cfc:	blx	r8
   21d00:	ldr	r1, [r4, #44]	; 0x2c
   21d04:	ldr	r3, [sp, #12]
   21d08:	ldr	r2, [r7]
   21d0c:	add	r1, r1, r3
   21d10:	cmp	r2, #0
   21d14:	str	r1, [r4, #44]	; 0x2c
   21d18:	mov	r5, r0
   21d1c:	beq	21d8c <__assert_fail@plt+0xf244>
   21d20:	cmp	r0, #0
   21d24:	ldr	r8, [r4, #80]	; 0x50
   21d28:	ldr	sl, [r4, #84]	; 0x54
   21d2c:	beq	21fbc <__assert_fail@plt+0xf474>
   21d30:	cmn	r0, #1
   21d34:	beq	21efc <__assert_fail@plt+0xf3b4>
   21d38:	bl	129d4 <gpg_strerror@plt>
   21d3c:	ldr	r3, [sp, #12]
   21d40:	mov	r1, r8
   21d44:	str	r3, [sp, #4]
   21d48:	mov	r2, sl
   21d4c:	mov	r3, r5
   21d50:	str	r0, [sp]
   21d54:	ldr	r0, [pc, #656]	; 21fec <__assert_fail@plt+0xf4a4>
   21d58:	bl	1c890 <__assert_fail@plt+0x9d48>
   21d5c:	ldr	r1, [r4, #44]	; 0x2c
   21d60:	cmp	r1, #0
   21d64:	str	r5, [r4, #56]	; 0x38
   21d68:	beq	21e54 <__assert_fail@plt+0xf30c>
   21d6c:	ldr	r5, [r4, #40]	; 0x28
   21d70:	cmp	r5, r1
   21d74:	bls	21c4c <__assert_fail@plt+0xf104>
   21d78:	ldr	r3, [pc, #624]	; 21ff0 <__assert_fail@plt+0xf4a8>
   21d7c:	ldr	r2, [pc, #624]	; 21ff4 <__assert_fail@plt+0xf4ac>
   21d80:	ldr	r1, [pc, #624]	; 21ff8 <__assert_fail@plt+0xf4b0>
   21d84:	ldr	r0, [pc, #624]	; 21ffc <__assert_fail@plt+0xf4b4>
   21d88:	bl	12b48 <__assert_fail@plt>
   21d8c:	cmn	r0, #1
   21d90:	bne	21ec4 <__assert_fail@plt+0xf37c>
   21d94:	mov	r3, #0
   21d98:	add	r2, sp, #16
   21d9c:	str	r2, [sp]
   21da0:	str	r3, [sp, #16]
   21da4:	ldr	r5, [r4, #60]	; 0x3c
   21da8:	ldr	r2, [r4, #76]	; 0x4c
   21dac:	mov	r1, #2
   21db0:	ldr	r0, [r4, #64]	; 0x40
   21db4:	blx	r5
   21db8:	cmp	r0, #0
   21dbc:	bne	21f20 <__assert_fail@plt+0xf3d8>
   21dc0:	ldr	r0, [r4, #64]	; 0x40
   21dc4:	cmp	r0, #0
   21dc8:	beq	21dd8 <__assert_fail@plt+0xf290>
   21dcc:	ldr	r3, [r4, #68]	; 0x44
   21dd0:	cmp	r3, #0
   21dd4:	bne	21f40 <__assert_fail@plt+0xf3f8>
   21dd8:	mov	r3, #0
   21ddc:	mov	r2, #1
   21de0:	cmp	r9, #0
   21de4:	str	r3, [r4, #64]	; 0x40
   21de8:	str	r3, [r4, #60]	; 0x3c
   21dec:	str	r2, [r4, #52]	; 0x34
   21df0:	ldr	r1, [r4, #44]	; 0x2c
   21df4:	beq	21ed0 <__assert_fail@plt+0xf388>
   21df8:	cmp	r1, r3
   21dfc:	bne	21d6c <__assert_fail@plt+0xf224>
   21e00:	ldr	r5, [r4, #76]	; 0x4c
   21e04:	cmp	r5, r3
   21e08:	beq	21e54 <__assert_fail@plt+0xf30c>
   21e0c:	ldr	r3, [r7]
   21e10:	cmp	r3, #0
   21e14:	bne	21fa8 <__assert_fail@plt+0xf460>
   21e18:	ldr	r0, [r4, #48]	; 0x30
   21e1c:	bl	124a0 <gcry_free@plt>
   21e20:	ldr	r0, [r4, #72]	; 0x48
   21e24:	bl	124a0 <gcry_free@plt>
   21e28:	mov	r2, #88	; 0x58
   21e2c:	mov	r1, r5
   21e30:	mov	r0, r4
   21e34:	bl	1247c <memcpy@plt>
   21e38:	mov	r0, r5
   21e3c:	bl	124a0 <gcry_free@plt>
   21e40:	ldr	r3, [r7]
   21e44:	cmp	r3, #0
   21e48:	beq	21e54 <__assert_fail@plt+0xf30c>
   21e4c:	mov	r0, r4
   21e50:	bl	21a8c <__assert_fail@plt+0xef44>
   21e54:	mvn	r0, #0
   21e58:	b	21c64 <__assert_fail@plt+0xf11c>
   21e5c:	ldr	r2, [r4, #84]	; 0x54
   21e60:	ldr	r1, [r4, #80]	; 0x50
   21e64:	ldr	r0, [pc, #404]	; 22000 <__assert_fail@plt+0xf4b8>
   21e68:	bl	1c890 <__assert_fail@plt+0x9d48>
   21e6c:	b	21bb0 <__assert_fail@plt+0xf068>
   21e70:	ldr	r2, [r4, #84]	; 0x54
   21e74:	ldr	r1, [r4, #80]	; 0x50
   21e78:	ldr	r0, [pc, #388]	; 22004 <__assert_fail@plt+0xf4bc>
   21e7c:	bl	1c890 <__assert_fail@plt+0x9d48>
   21e80:	ldr	r3, [sp, #12]
   21e84:	cmp	r3, #0
   21e88:	bne	21f34 <__assert_fail@plt+0xf3ec>
   21e8c:	ldr	r2, [r7]
   21e90:	cmp	r2, #0
   21e94:	beq	21edc <__assert_fail@plt+0xf394>
   21e98:	ldr	r2, [pc, #360]	; 22008 <__assert_fail@plt+0xf4c0>
   21e9c:	ldr	r0, [pc, #328]	; 21fec <__assert_fail@plt+0xf4a4>
   21ea0:	strd	r2, [sp]
   21ea4:	ldr	r2, [r4, #84]	; 0x54
   21ea8:	ldr	r1, [r4, #80]	; 0x50
   21eac:	bl	1c890 <__assert_fail@plt+0x9d48>
   21eb0:	ldr	r1, [r4, #44]	; 0x2c
   21eb4:	b	21d6c <__assert_fail@plt+0xf224>
   21eb8:	str	r5, [r4, #52]	; 0x34
   21ebc:	mvn	r0, #0
   21ec0:	b	21c64 <__assert_fail@plt+0xf11c>
   21ec4:	cmp	r0, #0
   21ec8:	bne	21d60 <__assert_fail@plt+0xf218>
   21ecc:	b	21d6c <__assert_fail@plt+0xf224>
   21ed0:	cmp	r1, #0
   21ed4:	bne	21d6c <__assert_fail@plt+0xf224>
   21ed8:	b	21e54 <__assert_fail@plt+0xf30c>
   21edc:	ldr	r2, [r4, #44]	; 0x2c
   21ee0:	mov	r1, r2
   21ee4:	b	21d6c <__assert_fail@plt+0xf224>
   21ee8:	ldr	r2, [r4, #84]	; 0x54
   21eec:	ldr	r1, [r4, #80]	; 0x50
   21ef0:	ldr	r0, [pc, #276]	; 2200c <__assert_fail@plt+0xf4c4>
   21ef4:	bl	1c890 <__assert_fail@plt+0x9d48>
   21ef8:	b	21bd0 <__assert_fail@plt+0xf088>
   21efc:	ldr	r0, [pc, #268]	; 22010 <__assert_fail@plt+0xf4c8>
   21f00:	str	r3, [sp, #4]
   21f04:	str	r0, [sp]
   21f08:	mov	r3, r5
   21f0c:	mov	r2, sl
   21f10:	mov	r1, r8
   21f14:	ldr	r0, [pc, #208]	; 21fec <__assert_fail@plt+0xf4a4>
   21f18:	bl	1c890 <__assert_fail@plt+0x9d48>
   21f1c:	b	21d94 <__assert_fail@plt+0xf24c>
   21f20:	bl	129d4 <gpg_strerror@plt>
   21f24:	mov	r1, r0
   21f28:	ldr	r0, [pc, #228]	; 22014 <__assert_fail@plt+0xf4cc>
   21f2c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   21f30:	b	21dc0 <__assert_fail@plt+0xf278>
   21f34:	ldr	r8, [r4, #60]	; 0x3c
   21f38:	ldr	r1, [r4, #44]	; 0x2c
   21f3c:	b	21ce0 <__assert_fail@plt+0xf198>
   21f40:	bl	124a0 <gcry_free@plt>
   21f44:	b	21dd8 <__assert_fail@plt+0xf290>
   21f48:	ldr	r3, [r7]
   21f4c:	cmp	r3, #0
   21f50:	beq	21e54 <__assert_fail@plt+0xf30c>
   21f54:	ldr	r5, [r4, #80]	; 0x50
   21f58:	ldr	r4, [r4, #84]	; 0x54
   21f5c:	bl	129d4 <gpg_strerror@plt>
   21f60:	mov	r2, r4
   21f64:	mov	r1, r5
   21f68:	mov	r3, r0
   21f6c:	ldr	r0, [pc, #164]	; 22018 <__assert_fail@plt+0xf4d0>
   21f70:	bl	1c890 <__assert_fail@plt+0x9d48>
   21f74:	mvn	r0, #0
   21f78:	b	21c64 <__assert_fail@plt+0xf11c>
   21f7c:	ldr	r3, [pc, #108]	; 21ff0 <__assert_fail@plt+0xf4a8>
   21f80:	ldr	r2, [pc, #148]	; 2201c <__assert_fail@plt+0xf4d4>
   21f84:	ldr	r1, [pc, #108]	; 21ff8 <__assert_fail@plt+0xf4b0>
   21f88:	ldr	r0, [pc, #144]	; 22020 <__assert_fail@plt+0xf4d8>
   21f8c:	bl	12b48 <__assert_fail@plt>
   21f90:	bl	124e8 <__stack_chk_fail@plt>
   21f94:	ldr	r3, [pc, #84]	; 21ff0 <__assert_fail@plt+0xf4a8>
   21f98:	ldr	r2, [pc, #132]	; 22024 <__assert_fail@plt+0xf4dc>
   21f9c:	ldr	r1, [pc, #84]	; 21ff8 <__assert_fail@plt+0xf4b0>
   21fa0:	ldr	r0, [pc, #84]	; 21ffc <__assert_fail@plt+0xf4b4>
   21fa4:	bl	12b48 <__assert_fail@plt>
   21fa8:	ldr	r2, [r4, #84]	; 0x54
   21fac:	ldr	r1, [r4, #80]	; 0x50
   21fb0:	ldr	r0, [pc, #112]	; 22028 <__assert_fail@plt+0xf4e0>
   21fb4:	bl	1c890 <__assert_fail@plt+0x9d48>
   21fb8:	b	21e18 <__assert_fail@plt+0xf2d0>
   21fbc:	ldr	r0, [pc, #68]	; 22008 <__assert_fail@plt+0xf4c0>
   21fc0:	str	r3, [sp, #4]
   21fc4:	str	r0, [sp]
   21fc8:	mov	r3, r5
   21fcc:	mov	r2, sl
   21fd0:	mov	r1, r8
   21fd4:	ldr	r0, [pc, #16]	; 21fec <__assert_fail@plt+0xf4a4>
   21fd8:	bl	1c890 <__assert_fail@plt+0x9d48>
   21fdc:	b	21eb0 <__assert_fail@plt+0xf368>
   21fe0:	andeq	ip, r3, ip, ror r5
   21fe4:	andeq	fp, r3, r0, lsl fp
   21fe8:	ldrdeq	r9, [r2], -r8
   21fec:	andeq	sl, r2, r8, lsl r0
   21ff0:	andeq	r9, r2, r0, lsr #24
   21ff4:	andeq	r0, r0, r4, ror r7
   21ff8:	andeq	r9, r2, r4, lsr #27
   21ffc:	andeq	r9, r2, r4, asr #30
   22000:	andeq	r9, r2, ip, asr pc
   22004:	andeq	r9, r2, r8, ror #31
   22008:	andeq	sl, r2, r8, asr r0
   2200c:	andeq	r9, r2, r8, lsl #31
   22010:	strheq	sl, [r2], -r4
   22014:	andeq	sl, r2, ip, asr r0
   22018:			; <UNDEFINED> instruction: 0x00029fbc
   2201c:	andeq	r0, r0, pc, ror #13
   22020:	andeq	r9, r2, ip, lsr #30
   22024:	strdeq	r0, [r0], -r4
   22028:	andeq	sl, r2, r8, ror r0
   2202c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22030:	subs	r7, r0, #0
   22034:	beq	220f4 <__assert_fail@plt+0xf5ac>
   22038:	ldr	r8, [pc, #200]	; 22108 <__assert_fail@plt+0xf5c0>
   2203c:	ldr	r3, [r8]
   22040:	cmp	r3, #0
   22044:	bne	220cc <__assert_fail@plt+0xf584>
   22048:	ldr	r3, [pc, #188]	; 2210c <__assert_fail@plt+0xf5c4>
   2204c:	ldr	r4, [r3]
   22050:	cmp	r4, #0
   22054:	beq	220e8 <__assert_fail@plt+0xf5a0>
   22058:	ldr	sl, [pc, #176]	; 22110 <__assert_fail@plt+0xf5c8>
   2205c:	mov	fp, #0
   22060:	mvn	r9, #0
   22064:	ldr	r5, [r4, #4]
   22068:	cmn	r5, #1
   2206c:	beq	220a4 <__assert_fail@plt+0xf55c>
   22070:	add	r6, r4, #8
   22074:	mov	r0, r6
   22078:	mov	r1, r7
   2207c:	bl	1238c <strcmp@plt>
   22080:	cmp	r0, #0
   22084:	bne	220a4 <__assert_fail@plt+0xf55c>
   22088:	ldr	r3, [r8]
   2208c:	cmp	r3, #0
   22090:	bne	220b8 <__assert_fail@plt+0xf570>
   22094:	mov	r0, r5
   22098:	bl	12af4 <close@plt>
   2209c:	str	r9, [r4, #4]
   220a0:	mov	fp, r0
   220a4:	ldr	r4, [r4]
   220a8:	cmp	r4, #0
   220ac:	bne	22064 <__assert_fail@plt+0xf51c>
   220b0:	mov	r0, fp
   220b4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220b8:	mov	r1, r6
   220bc:	mov	r0, sl
   220c0:	bl	1c890 <__assert_fail@plt+0x9d48>
   220c4:	ldr	r5, [r4, #4]
   220c8:	b	22094 <__assert_fail@plt+0xf54c>
   220cc:	mov	r1, r7
   220d0:	ldr	r0, [pc, #60]	; 22114 <__assert_fail@plt+0xf5cc>
   220d4:	bl	1c890 <__assert_fail@plt+0x9d48>
   220d8:	ldr	r3, [pc, #44]	; 2210c <__assert_fail@plt+0xf5c4>
   220dc:	ldr	r4, [r3]
   220e0:	cmp	r4, #0
   220e4:	bne	22058 <__assert_fail@plt+0xf510>
   220e8:	mov	fp, r4
   220ec:	mov	r0, fp
   220f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220f4:	ldr	r3, [pc, #28]	; 22118 <__assert_fail@plt+0xf5d0>
   220f8:	mov	r2, #204	; 0xcc
   220fc:	ldr	r1, [pc, #24]	; 2211c <__assert_fail@plt+0xf5d4>
   22100:	ldr	r0, [pc, #24]	; 22120 <__assert_fail@plt+0xf5d8>
   22104:	bl	12b48 <__assert_fail@plt>
   22108:	andeq	ip, r3, ip, ror r5
   2210c:			; <UNDEFINED> instruction: 0x0003c4b0
   22110:	ldrdeq	sl, [r2], -ip
   22114:	andeq	sl, r2, r0, asr #1
   22118:	andeq	r9, r2, r4, lsr ip
   2211c:	andeq	r9, r2, r4, lsr #27
   22120:	strheq	sl, [r2], -r8
   22124:	ldr	r3, [pc, #140]	; 221b8 <__assert_fail@plt+0xf670>
   22128:	push	{r4, r5, r6, lr}
   2212c:	cmp	r2, #0
   22130:	mov	r6, r1
   22134:	mov	r5, r0
   22138:	mov	r0, r1
   2213c:	mov	r1, #43	; 0x2b
   22140:	movne	r4, #384	; 0x180
   22144:	moveq	r4, r3
   22148:	bl	127ac <strchr@plt>
   2214c:	cmp	r0, #0
   22150:	beq	22178 <__assert_fail@plt+0xf630>
   22154:	mov	r0, r5
   22158:	bl	2202c <__assert_fail@plt+0xf4e4>
   2215c:	cmp	r0, #0
   22160:	moveq	r1, #2
   22164:	bne	221b0 <__assert_fail@plt+0xf668>
   22168:	mov	r2, r4
   2216c:	mov	r0, r5
   22170:	pop	{r4, r5, r6, lr}
   22174:	b	12668 <open64@plt>
   22178:	mov	r1, #119	; 0x77
   2217c:	mov	r0, r6
   22180:	bl	127ac <strchr@plt>
   22184:	subs	r1, r0, #0
   22188:	beq	22168 <__assert_fail@plt+0xf620>
   2218c:	mov	r0, r5
   22190:	bl	2202c <__assert_fail@plt+0xf4e4>
   22194:	cmp	r0, #0
   22198:	bne	221b0 <__assert_fail@plt+0xf668>
   2219c:	mov	r2, r4
   221a0:	mov	r0, r5
   221a4:	ldr	r1, [pc, #16]	; 221bc <__assert_fail@plt+0xf674>
   221a8:	pop	{r4, r5, r6, lr}
   221ac:	b	12668 <open64@plt>
   221b0:	mvn	r0, #0
   221b4:	pop	{r4, r5, r6, pc}
   221b8:			; <UNDEFINED> instruction: 0x000001b6
   221bc:	andeq	r0, r0, r1, asr #4
   221c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221c4:	sub	sp, sp, #52	; 0x34
   221c8:	ldr	r9, [pc, #564]	; 22404 <__assert_fail@plt+0xf8bc>
   221cc:	cmp	r1, #2
   221d0:	mov	r5, r0
   221d4:	ldr	ip, [r9]
   221d8:	mov	r4, r2
   221dc:	mov	r6, r3
   221e0:	str	ip, [sp, #44]	; 0x2c
   221e4:	beq	22334 <__assert_fail@plt+0xf7ec>
   221e8:	cmp	r1, #3
   221ec:	beq	222cc <__assert_fail@plt+0xf784>
   221f0:	cmp	r1, #4
   221f4:	bne	22314 <__assert_fail@plt+0xf7cc>
   221f8:	ldr	sl, [pc, #520]	; 22408 <__assert_fail@plt+0xf8c0>
   221fc:	orrs	r3, r0, r2
   22200:	moveq	r3, #1
   22204:	ldr	r2, [sl]
   22208:	movne	r3, #0
   2220c:	cmp	r6, #0
   22210:	movne	r4, r3
   22214:	moveq	r4, #0
   22218:	cmp	r2, #0
   2221c:	beq	22378 <__assert_fail@plt+0xf830>
   22220:	cmp	r6, #0
   22224:	beq	223d0 <__assert_fail@plt+0xf888>
   22228:	mov	r1, r6
   2222c:	ldr	r0, [pc, #472]	; 2240c <__assert_fail@plt+0xf8c4>
   22230:	bl	1c890 <__assert_fail@plt+0x9d48>
   22234:	cmp	r4, #0
   22238:	beq	22314 <__assert_fail@plt+0xf7cc>
   2223c:	ldr	r3, [sl]
   22240:	cmp	r3, #0
   22244:	beq	22254 <__assert_fail@plt+0xf70c>
   22248:	mov	r1, r6
   2224c:	ldr	r0, [pc, #444]	; 22410 <__assert_fail@plt+0xf8c8>
   22250:	bl	1c890 <__assert_fail@plt+0x9d48>
   22254:	ldr	r3, [pc, #440]	; 22414 <__assert_fail@plt+0xf8cc>
   22258:	ldr	r4, [r3]
   2225c:	cmp	r4, #0
   22260:	beq	223f0 <__assert_fail@plt+0xf8a8>
   22264:	ldr	fp, [pc, #428]	; 22418 <__assert_fail@plt+0xf8d0>
   22268:	mov	r8, #0
   2226c:	b	22288 <__assert_fail@plt+0xf740>
   22270:	mov	r0, r5
   22274:	bl	12368 <fsync@plt>
   22278:	mov	r8, r0
   2227c:	ldr	r4, [r4]
   22280:	cmp	r4, #0
   22284:	beq	22318 <__assert_fail@plt+0xf7d0>
   22288:	ldr	r5, [r4, #4]
   2228c:	cmn	r5, #1
   22290:	beq	2227c <__assert_fail@plt+0xf734>
   22294:	add	r7, r4, #8
   22298:	mov	r0, r7
   2229c:	mov	r1, r6
   222a0:	bl	1238c <strcmp@plt>
   222a4:	cmp	r0, #0
   222a8:	bne	2227c <__assert_fail@plt+0xf734>
   222ac:	ldr	r3, [sl]
   222b0:	cmp	r3, #0
   222b4:	beq	22270 <__assert_fail@plt+0xf728>
   222b8:	mov	r1, r7
   222bc:	mov	r0, fp
   222c0:	bl	1c890 <__assert_fail@plt+0x9d48>
   222c4:	ldr	r5, [r4, #4]
   222c8:	b	22270 <__assert_fail@plt+0xf728>
   222cc:	ldr	r3, [pc, #308]	; 22408 <__assert_fail@plt+0xf8c0>
   222d0:	ldr	r3, [r3]
   222d4:	cmp	r3, #0
   222d8:	bne	2239c <__assert_fail@plt+0xf854>
   222dc:	cmp	r5, #0
   222e0:	beq	22314 <__assert_fail@plt+0xf7cc>
   222e4:	ldr	r2, [r5, #76]	; 0x4c
   222e8:	cmp	r2, #0
   222ec:	bne	222f8 <__assert_fail@plt+0xf7b0>
   222f0:	b	223f8 <__assert_fail@plt+0xf8b0>
   222f4:	mov	r2, r3
   222f8:	ldr	r3, [r2, #76]	; 0x4c
   222fc:	cmp	r3, #0
   22300:	bne	222f4 <__assert_fail@plt+0xf7ac>
   22304:	ldr	r3, [pc, #272]	; 2241c <__assert_fail@plt+0xf8d4>
   22308:	ldr	r1, [r2, #60]	; 0x3c
   2230c:	cmp	r1, r3
   22310:	beq	223e0 <__assert_fail@plt+0xf898>
   22314:	mvn	r8, #0
   22318:	ldr	r2, [sp, #44]	; 0x2c
   2231c:	ldr	r3, [r9]
   22320:	mov	r0, r8
   22324:	cmp	r2, r3
   22328:	bne	22400 <__assert_fail@plt+0xf8b8>
   2232c:	add	sp, sp, #52	; 0x34
   22330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22334:	ldr	r3, [pc, #204]	; 22408 <__assert_fail@plt+0xf8c0>
   22338:	ldr	r3, [r3]
   2233c:	cmp	r3, #0
   22340:	bne	22384 <__assert_fail@plt+0xf83c>
   22344:	orrs	r3, r5, r4
   22348:	moveq	r3, #1
   2234c:	movne	r3, #0
   22350:	cmp	r6, #0
   22354:	moveq	r3, #0
   22358:	cmp	r3, #0
   2235c:	beq	22314 <__assert_fail@plt+0xf7cc>
   22360:	mov	r0, r6
   22364:	bl	2202c <__assert_fail@plt+0xf4e4>
   22368:	adds	r0, r0, #0
   2236c:	movne	r0, #1
   22370:	rsb	r8, r0, #0
   22374:	b	22318 <__assert_fail@plt+0xf7d0>
   22378:	cmp	r4, #0
   2237c:	bne	22254 <__assert_fail@plt+0xf70c>
   22380:	b	22314 <__assert_fail@plt+0xf7cc>
   22384:	cmp	r6, #0
   22388:	ldr	r1, [pc, #144]	; 22420 <__assert_fail@plt+0xf8d8>
   2238c:	ldr	r0, [pc, #144]	; 22424 <__assert_fail@plt+0xf8dc>
   22390:	movne	r1, r6
   22394:	bl	1c890 <__assert_fail@plt+0x9d48>
   22398:	b	22344 <__assert_fail@plt+0xf7fc>
   2239c:	cmp	r0, #0
   223a0:	mvneq	r6, #0
   223a4:	add	r1, sp, #12
   223a8:	ldrdne	r6, [r0, #80]	; 0x50
   223ac:	moveq	r7, r6
   223b0:	bl	21a0c <__assert_fail@plt+0xeec4>
   223b4:	str	r4, [sp]
   223b8:	mov	r2, r7
   223bc:	mov	r1, r6
   223c0:	mov	r3, r0
   223c4:	ldr	r0, [pc, #92]	; 22428 <__assert_fail@plt+0xf8e0>
   223c8:	bl	1c890 <__assert_fail@plt+0x9d48>
   223cc:	b	222dc <__assert_fail@plt+0xf794>
   223d0:	ldr	r1, [pc, #84]	; 2242c <__assert_fail@plt+0xf8e4>
   223d4:	ldr	r0, [pc, #48]	; 2240c <__assert_fail@plt+0xf8c4>
   223d8:	bl	1c890 <__assert_fail@plt+0x9d48>
   223dc:	b	22314 <__assert_fail@plt+0xf7cc>
   223e0:	ldr	r3, [r2, #64]	; 0x40
   223e4:	mov	r8, #0
   223e8:	str	r4, [r3, #8]
   223ec:	b	22318 <__assert_fail@plt+0xf7d0>
   223f0:	mov	r8, r4
   223f4:	b	22318 <__assert_fail@plt+0xf7d0>
   223f8:	mov	r2, r5
   223fc:	b	22304 <__assert_fail@plt+0xf7bc>
   22400:	bl	124e8 <__stack_chk_fail@plt>
   22404:	andeq	fp, r3, r0, lsl fp
   22408:	andeq	ip, r3, ip, ror r5
   2240c:	andeq	sl, r2, r4, asr #2
   22410:	andeq	sl, r2, r4, ror #2
   22414:			; <UNDEFINED> instruction: 0x0003c4b0
   22418:	andeq	sl, r2, r0, lsl #3
   2241c:			; <UNDEFINED> instruction: 0x000214b4
   22420:	andeq	r9, r2, r8, lsl #23
   22424:	strdeq	sl, [r2], -r8
   22428:	andeq	sl, r2, ip, lsl r1
   2242c:	muleq	r2, ip, r1
   22430:	cmp	r0, #0
   22434:	bxeq	lr
   22438:	ldr	r2, [r0, #76]	; 0x4c
   2243c:	cmp	r2, #0
   22440:	bne	2244c <__assert_fail@plt+0xf904>
   22444:	b	22470 <__assert_fail@plt+0xf928>
   22448:	mov	r2, r3
   2244c:	ldr	r3, [r2, #76]	; 0x4c
   22450:	cmp	r3, #0
   22454:	bne	22448 <__assert_fail@plt+0xf900>
   22458:	ldr	r3, [pc, #48]	; 22490 <__assert_fail@plt+0xf948>
   2245c:	ldr	r1, [r2, #60]	; 0x3c
   22460:	cmp	r1, r3
   22464:	beq	22478 <__assert_fail@plt+0xf930>
   22468:	mov	r0, #0
   2246c:	bx	lr
   22470:	mov	r2, r0
   22474:	b	22458 <__assert_fail@plt+0xf910>
   22478:	ldr	r0, [r2, #64]	; 0x40
   2247c:	ldr	r3, [r0, #16]
   22480:	cmp	r3, #0
   22484:	bne	22468 <__assert_fail@plt+0xf920>
   22488:	add	r0, r0, #20
   2248c:	bx	lr
   22490:			; <UNDEFINED> instruction: 0x000214b4
   22494:	ldr	r3, [pc, #32]	; 224bc <__assert_fail@plt+0xf974>
   22498:	ldr	r3, [r3]
   2249c:	cmp	r3, #0
   224a0:	beq	224b4 <__assert_fail@plt+0xf96c>
   224a4:	push	{r4, lr}
   224a8:	bl	21a8c <__assert_fail@plt+0xef44>
   224ac:	mov	r0, #0
   224b0:	pop	{r4, pc}
   224b4:	mov	r0, #0
   224b8:	bx	lr
   224bc:	andeq	ip, r3, ip, ror r5
   224c0:	cmp	r0, #3
   224c4:	push	{r4, r5, r6, lr}
   224c8:	bhi	22528 <__assert_fail@plt+0xf9e0>
   224cc:	cmp	r1, #0
   224d0:	mov	r5, r1
   224d4:	beq	2253c <__assert_fail@plt+0xf9f4>
   224d8:	mov	r6, r0
   224dc:	mov	r1, #88	; 0x58
   224e0:	mov	r0, #1
   224e4:	bl	12a64 <gcry_xcalloc@plt>
   224e8:	mov	r4, r0
   224ec:	mov	r0, r5
   224f0:	str	r6, [r4]
   224f4:	bl	122fc <gcry_xmalloc@plt>
   224f8:	ldr	r1, [pc, #68]	; 22544 <__assert_fail@plt+0xf9fc>
   224fc:	mov	r2, #0
   22500:	str	r5, [r4, #36]	; 0x24
   22504:	ldr	r3, [r1, #4]
   22508:	str	r2, [r4, #84]	; 0x54
   2250c:	add	r3, r3, #1
   22510:	str	r3, [r1, #4]
   22514:	str	r3, [r4, #80]	; 0x50
   22518:	str	r2, [r4, #72]	; 0x48
   2251c:	str	r0, [r4, #48]	; 0x30
   22520:	mov	r0, r4
   22524:	pop	{r4, r5, r6, pc}
   22528:	ldr	r3, [pc, #24]	; 22548 <__assert_fail@plt+0xfa00>
   2252c:	mov	r2, #1104	; 0x450
   22530:	ldr	r1, [pc, #20]	; 2254c <__assert_fail@plt+0xfa04>
   22534:	ldr	r0, [pc, #20]	; 22550 <__assert_fail@plt+0xfa08>
   22538:	bl	12b48 <__assert_fail@plt>
   2253c:	ldr	r0, [pc, #16]	; 22554 <__assert_fail@plt+0xfa0c>
   22540:	bl	1c84c <__assert_fail@plt+0x9d04>
   22544:			; <UNDEFINED> instruction: 0x0003c4b0
   22548:	andeq	r9, r2, r8, asr #24
   2254c:	andeq	r9, r2, r4, lsr #27
   22550:	andeq	sl, r2, r4, lsr #3
   22554:	andeq	sl, r2, r8, lsl #4
   22558:	mov	r3, r1
   2255c:	push	{r4, r5, r6, r7, r8, lr}
   22560:	mov	r1, #119	; 0x77
   22564:	sub	sp, sp, #8
   22568:	mov	r6, r0
   2256c:	mov	r0, r3
   22570:	mov	r7, r2
   22574:	bl	127ac <strchr@plt>
   22578:	mov	r1, #8192	; 0x2000
   2257c:	cmp	r0, #0
   22580:	movne	r0, #2
   22584:	moveq	r0, #0
   22588:	bl	224c0 <__assert_fail@plt+0xf978>
   2258c:	mov	r5, r0
   22590:	mov	r0, #44	; 0x2c
   22594:	bl	122fc <gcry_xmalloc@plt>
   22598:	mov	ip, #1
   2259c:	mov	r1, ip
   225a0:	ldr	r3, [pc, #144]	; 22638 <__assert_fail@plt+0xfaf0>
   225a4:	mvn	r2, #0
   225a8:	str	r6, [sp]
   225ac:	mov	r4, r0
   225b0:	add	r8, r0, #20
   225b4:	mov	r0, r8
   225b8:	str	r6, [r4]
   225bc:	str	r7, [r4, #4]
   225c0:	str	ip, [r4, #16]
   225c4:	bl	12830 <__sprintf_chk@plt>
   225c8:	ldr	r1, [pc, #108]	; 2263c <__assert_fail@plt+0xfaf4>
   225cc:	mov	r3, #0
   225d0:	ldr	r2, [pc, #104]	; 22640 <__assert_fail@plt+0xfaf8>
   225d4:	ldr	r1, [r1]
   225d8:	str	r4, [r5, #64]	; 0x40
   225dc:	cmp	r1, r3
   225e0:	str	r2, [r5, #60]	; 0x3c
   225e4:	str	r3, [r4, #12]
   225e8:	str	r3, [r4, #4]
   225ec:	str	r3, [r4, #8]
   225f0:	beq	22618 <__assert_fail@plt+0xfad0>
   225f4:	ldr	r0, [pc, #72]	; 22644 <__assert_fail@plt+0xfafc>
   225f8:	cmp	r7, #0
   225fc:	ldr	r1, [r5, #80]	; 0x50
   22600:	ldr	r2, [r5, #84]	; 0x54
   22604:	ldr	r3, [pc, #60]	; 22648 <__assert_fail@plt+0xfb00>
   22608:	str	r8, [sp]
   2260c:	movne	r3, r0
   22610:	ldr	r0, [pc, #52]	; 2264c <__assert_fail@plt+0xfb04>
   22614:	bl	1c890 <__assert_fail@plt+0x9d48>
   22618:	mov	r3, #0
   2261c:	mov	r2, #1
   22620:	mov	r1, #3
   22624:	mov	r0, r5
   22628:	bl	221c0 <__assert_fail@plt+0xf678>
   2262c:	mov	r0, r5
   22630:	add	sp, sp, #8
   22634:	pop	{r4, r5, r6, r7, r8, pc}
   22638:	andeq	sl, r2, r4, lsr r2
   2263c:	andeq	ip, r3, ip, ror r5
   22640:			; <UNDEFINED> instruction: 0x000214b4
   22644:	andeq	sl, r2, r0, lsr r2
   22648:	muleq	r2, r8, r9
   2264c:	andeq	sl, r2, ip, lsr r2
   22650:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22654:	subs	r7, r1, #0
   22658:	ldr	r8, [pc, #684]	; 2290c <__assert_fail@plt+0xfdc4>
   2265c:	sub	sp, sp, #48	; 0x30
   22660:	mov	r4, r0
   22664:	ldr	r1, [r8]
   22668:	mov	r9, r2
   2266c:	mov	r6, r3
   22670:	str	r1, [sp, #44]	; 0x2c
   22674:	beq	227bc <__assert_fail@plt+0xfc74>
   22678:	cmp	r0, #0
   2267c:	beq	2271c <__assert_fail@plt+0xfbd4>
   22680:	ldrb	r3, [r0]
   22684:	cmp	r3, #45	; 0x2d
   22688:	beq	22710 <__assert_fail@plt+0xfbc8>
   2268c:	mov	r2, #1
   22690:	mov	r1, #0
   22694:	mov	r0, r4
   22698:	bl	1d088 <__assert_fail@plt+0xa540>
   2269c:	cmn	r0, #1
   226a0:	bne	22870 <__assert_fail@plt+0xfd28>
   226a4:	cmp	r9, #0
   226a8:	bne	227cc <__assert_fail@plt+0xfc84>
   226ac:	ldr	r3, [pc, #604]	; 22910 <__assert_fail@plt+0xfdc8>
   226b0:	ldr	r5, [r3]
   226b4:	cmp	r5, #0
   226b8:	beq	226e8 <__assert_fail@plt+0xfba0>
   226bc:	ldr	r7, [r5, #4]
   226c0:	cmn	r7, #1
   226c4:	beq	226dc <__assert_fail@plt+0xfb94>
   226c8:	mov	r1, r4
   226cc:	add	r0, r5, #8
   226d0:	bl	1238c <strcmp@plt>
   226d4:	cmp	r0, #0
   226d8:	beq	22884 <__assert_fail@plt+0xfd3c>
   226dc:	ldr	r5, [r5]
   226e0:	cmp	r5, #0
   226e4:	bne	226bc <__assert_fail@plt+0xfb74>
   226e8:	ldr	sl, [pc, #548]	; 22914 <__assert_fail@plt+0xfdcc>
   226ec:	ldr	r3, [sl]
   226f0:	cmp	r3, #0
   226f4:	bne	228e8 <__assert_fail@plt+0xfda0>
   226f8:	mov	r1, r6
   226fc:	mov	r2, #0
   22700:	mov	r0, r4
   22704:	bl	22124 <__assert_fail@plt+0xf5dc>
   22708:	mov	r7, r0
   2270c:	b	227e0 <__assert_fail@plt+0xfc98>
   22710:	ldrb	r3, [r0, #1]
   22714:	cmp	r3, #0
   22718:	bne	2268c <__assert_fail@plt+0xfb44>
   2271c:	ldr	r3, [pc, #500]	; 22918 <__assert_fail@plt+0xfdd0>
   22720:	cmp	r9, #0
   22724:	mov	r1, #8192	; 0x2000
   22728:	mov	r0, r9
   2272c:	moveq	r7, #0
   22730:	ldr	r4, [pc, #484]	; 2291c <__assert_fail@plt+0xfdd4>
   22734:	movne	r4, r3
   22738:	bl	224c0 <__assert_fail@plt+0xf978>
   2273c:	ldr	sl, [pc, #464]	; 22914 <__assert_fail@plt+0xfdcc>
   22740:	mov	r6, r0
   22744:	mov	r0, r4
   22748:	bl	12788 <strlen@plt>
   2274c:	mov	r9, r0
   22750:	add	r0, r0, #24
   22754:	bl	122fc <gcry_xmalloc@plt>
   22758:	mov	r3, #1
   2275c:	add	r2, r9, r3
   22760:	mov	r1, r4
   22764:	str	r7, [r0]
   22768:	str	r3, [r0, #16]
   2276c:	mov	r5, r0
   22770:	add	r0, r0, #20
   22774:	bl	1247c <memcpy@plt>
   22778:	ldr	r3, [sl]
   2277c:	ldr	r2, [pc, #412]	; 22920 <__assert_fail@plt+0xfdd8>
   22780:	cmp	r3, #0
   22784:	mov	r3, #0
   22788:	str	r5, [r6, #64]	; 0x40
   2278c:	str	r2, [r6, #60]	; 0x3c
   22790:	str	r3, [r5, #12]
   22794:	str	r3, [r5, #4]
   22798:	str	r3, [r5, #8]
   2279c:	bne	22838 <__assert_fail@plt+0xfcf0>
   227a0:	ldr	r2, [sp, #44]	; 0x2c
   227a4:	ldr	r3, [r8]
   227a8:	mov	r0, r6
   227ac:	cmp	r2, r3
   227b0:	bne	22908 <__assert_fail@plt+0xfdc0>
   227b4:	add	sp, sp, #48	; 0x30
   227b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   227bc:	cmp	r0, #0
   227c0:	bne	226a4 <__assert_fail@plt+0xfb5c>
   227c4:	mov	r6, #0
   227c8:	b	227a0 <__assert_fail@plt+0xfc58>
   227cc:	mov	r1, r6
   227d0:	ldr	r2, [sp, #80]	; 0x50
   227d4:	mov	r0, r4
   227d8:	bl	22124 <__assert_fail@plt+0xf5dc>
   227dc:	mov	r7, r0
   227e0:	cmn	r7, #1
   227e4:	beq	227c4 <__assert_fail@plt+0xfc7c>
   227e8:	ldr	sl, [pc, #292]	; 22914 <__assert_fail@plt+0xfdcc>
   227ec:	mov	r1, #8192	; 0x2000
   227f0:	mov	r0, r9
   227f4:	bl	224c0 <__assert_fail@plt+0xf978>
   227f8:	mov	r6, r0
   227fc:	mov	r0, r4
   22800:	bl	12788 <strlen@plt>
   22804:	add	r0, r0, #24
   22808:	bl	122fc <gcry_xmalloc@plt>
   2280c:	mov	r3, #0
   22810:	mov	r1, r4
   22814:	str	r3, [r0, #16]
   22818:	str	r7, [r0]
   2281c:	mov	r5, r0
   22820:	add	r0, r0, #20
   22824:	bl	12620 <strcpy@plt>
   22828:	mov	r0, r4
   2282c:	bl	128e4 <gcry_xstrdup@plt>
   22830:	str	r0, [r6, #72]	; 0x48
   22834:	b	22778 <__assert_fail@plt+0xfc30>
   22838:	add	r1, sp, #12
   2283c:	mov	r0, r6
   22840:	ldr	r7, [r6, #80]	; 0x50
   22844:	ldr	r9, [r6, #84]	; 0x54
   22848:	bl	21a0c <__assert_fail@plt+0xeec4>
   2284c:	ldr	r3, [r5]
   22850:	mov	r2, r9
   22854:	str	r3, [sp, #4]
   22858:	mov	r1, r7
   2285c:	mov	r3, r4
   22860:	str	r0, [sp]
   22864:	ldr	r0, [pc, #184]	; 22924 <__assert_fail@plt+0xfddc>
   22868:	bl	1c890 <__assert_fail@plt+0x9d48>
   2286c:	b	227a0 <__assert_fail@plt+0xfc58>
   22870:	mov	r1, r6
   22874:	mov	r2, #0
   22878:	bl	22558 <__assert_fail@plt+0xfa10>
   2287c:	mov	r6, r0
   22880:	b	227a0 <__assert_fail@plt+0xfc58>
   22884:	ldr	sl, [pc, #136]	; 22914 <__assert_fail@plt+0xfdcc>
   22888:	mvn	r3, #0
   2288c:	str	r3, [r5, #4]
   22890:	ldr	r3, [sl]
   22894:	cmp	r3, #0
   22898:	bne	228f8 <__assert_fail@plt+0xfdb0>
   2289c:	mov	r6, #0
   228a0:	mov	r2, #0
   228a4:	mov	r3, #0
   228a8:	str	r6, [sp]
   228ac:	mov	r0, r7
   228b0:	bl	125fc <lseek64@plt>
   228b4:	mvn	r3, #0
   228b8:	mvn	r2, #0
   228bc:	cmp	r1, r3
   228c0:	cmpeq	r0, r2
   228c4:	bne	227ec <__assert_fail@plt+0xfca4>
   228c8:	bl	1280c <__errno_location@plt>
   228cc:	ldr	r0, [r0]
   228d0:	bl	126c8 <strerror@plt>
   228d4:	mov	r1, r7
   228d8:	mov	r2, r0
   228dc:	ldr	r0, [pc, #68]	; 22928 <__assert_fail@plt+0xfde0>
   228e0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   228e4:	b	227a0 <__assert_fail@plt+0xfc58>
   228e8:	mov	r1, r4
   228ec:	ldr	r0, [pc, #56]	; 2292c <__assert_fail@plt+0xfde4>
   228f0:	bl	1c890 <__assert_fail@plt+0x9d48>
   228f4:	b	226f8 <__assert_fail@plt+0xfbb0>
   228f8:	mov	r1, r4
   228fc:	ldr	r0, [pc, #44]	; 22930 <__assert_fail@plt+0xfde8>
   22900:	bl	1c890 <__assert_fail@plt+0x9d48>
   22904:	b	2289c <__assert_fail@plt+0xfd54>
   22908:	bl	124e8 <__stack_chk_fail@plt>
   2290c:	andeq	fp, r3, r0, lsl fp
   22910:			; <UNDEFINED> instruction: 0x0003c4b0
   22914:	andeq	ip, r3, ip, ror r5
   22918:	andeq	r9, r2, ip, asr fp
   2291c:	andeq	r8, r2, ip, ror #7
   22920:			; <UNDEFINED> instruction: 0x000214b4
   22924:			; <UNDEFINED> instruction: 0x0002a2b4
   22928:	andeq	sl, r2, ip, ror r2
   2292c:	muleq	r2, r4, r2
   22930:	andeq	sl, r2, r8, asr r2
   22934:	ldr	r3, [pc, #324]	; 22a80 <__assert_fail@plt+0xff38>
   22938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2293c:	sub	sp, sp, #52	; 0x34
   22940:	ldr	r3, [r3]
   22944:	mov	r6, #0
   22948:	subs	r4, r0, #0
   2294c:	str	r6, [sp, #8]
   22950:	str	r3, [sp, #44]	; 0x2c
   22954:	beq	22a58 <__assert_fail@plt+0xff10>
   22958:	ldr	r8, [pc, #292]	; 22a84 <__assert_fail@plt+0xff3c>
   2295c:	ldr	sl, [pc, #292]	; 22a88 <__assert_fail@plt+0xff40>
   22960:	ldr	r9, [pc, #292]	; 22a8c <__assert_fail@plt+0xff44>
   22964:	b	229ec <__assert_fail@plt+0xfea4>
   22968:	ldr	r7, [r4, #60]	; 0x3c
   2296c:	cmp	r7, #0
   22970:	beq	229b4 <__assert_fail@plt+0xfe6c>
   22974:	add	r3, sp, #8
   22978:	ldr	r2, [r4, #76]	; 0x4c
   2297c:	ldr	r0, [r4, #64]	; 0x40
   22980:	mov	r1, #2
   22984:	str	r3, [sp]
   22988:	mov	r3, #0
   2298c:	blx	r7
   22990:	subs	r7, r0, #0
   22994:	beq	229b4 <__assert_fail@plt+0xfe6c>
   22998:	mov	r0, r6
   2299c:	bl	129d4 <gpg_strerror@plt>
   229a0:	mov	r1, r0
   229a4:	mov	r0, r9
   229a8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   229ac:	cmp	r6, #0
   229b0:	moveq	r6, r7
   229b4:	ldr	r0, [r4, #72]	; 0x48
   229b8:	bl	124a0 <gcry_free@plt>
   229bc:	ldr	r0, [r4, #48]	; 0x30
   229c0:	cmp	r0, #0
   229c4:	beq	229dc <__assert_fail@plt+0xfe94>
   229c8:	ldr	r2, [r4, #36]	; 0x24
   229cc:	mov	r1, #0
   229d0:	bl	12854 <memset@plt>
   229d4:	ldr	r0, [r4, #48]	; 0x30
   229d8:	bl	124a0 <gcry_free@plt>
   229dc:	mov	r0, r4
   229e0:	bl	124a0 <gcry_free@plt>
   229e4:	subs	r4, r5, #0
   229e8:	beq	22a5c <__assert_fail@plt+0xff14>
   229ec:	ldr	r3, [r4]
   229f0:	ldr	r5, [r4, #76]	; 0x4c
   229f4:	cmp	r3, #2
   229f8:	beq	22a34 <__assert_fail@plt+0xfeec>
   229fc:	ldr	r3, [r8]
   22a00:	cmp	r3, #0
   22a04:	beq	22968 <__assert_fail@plt+0xfe20>
   22a08:	add	r1, sp, #12
   22a0c:	mov	r0, r4
   22a10:	ldr	r7, [r4, #80]	; 0x50
   22a14:	ldr	fp, [r4, #84]	; 0x54
   22a18:	bl	21a0c <__assert_fail@plt+0xeec4>
   22a1c:	mov	r2, fp
   22a20:	mov	r1, r7
   22a24:	mov	r3, r0
   22a28:	mov	r0, sl
   22a2c:	bl	1c890 <__assert_fail@plt+0x9d48>
   22a30:	b	22968 <__assert_fail@plt+0xfe20>
   22a34:	mov	r0, r4
   22a38:	bl	21398 <__assert_fail@plt+0xe850>
   22a3c:	subs	r6, r0, #0
   22a40:	beq	229fc <__assert_fail@plt+0xfeb4>
   22a44:	bl	129d4 <gpg_strerror@plt>
   22a48:	mov	r1, r0
   22a4c:	ldr	r0, [pc, #60]	; 22a90 <__assert_fail@plt+0xff48>
   22a50:	bl	1c744 <__assert_fail@plt+0x9bfc>
   22a54:	b	229fc <__assert_fail@plt+0xfeb4>
   22a58:	mov	r6, r4
   22a5c:	ldr	r3, [pc, #28]	; 22a80 <__assert_fail@plt+0xff38>
   22a60:	ldr	r2, [sp, #44]	; 0x2c
   22a64:	mov	r0, r6
   22a68:	ldr	r3, [r3]
   22a6c:	cmp	r2, r3
   22a70:	bne	22a7c <__assert_fail@plt+0xff34>
   22a74:	add	sp, sp, #52	; 0x34
   22a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a7c:	bl	124e8 <__stack_chk_fail@plt>
   22a80:	andeq	fp, r3, r0, lsl fp
   22a84:	andeq	ip, r3, ip, ror r5
   22a88:	andeq	sl, r2, r0, lsl #6
   22a8c:	andeq	sl, r2, ip, lsl r3
   22a90:	ldrdeq	sl, [r2], -ip
   22a94:	push	{r4, r5, r6, r7, r8, lr}
   22a98:	sub	sp, sp, #16
   22a9c:	ldr	r8, [pc, #172]	; 22b50 <__assert_fail@plt+0x10008>
   22aa0:	subs	r7, r0, #0
   22aa4:	ldr	r3, [r8]
   22aa8:	str	r3, [sp, #12]
   22aac:	beq	22af8 <__assert_fail@plt+0xffb0>
   22ab0:	ldr	r3, [r7]
   22ab4:	cmp	r3, #2
   22ab8:	beq	22b18 <__assert_fail@plt+0xffd0>
   22abc:	mov	r4, r7
   22ac0:	add	r6, sp, #8
   22ac4:	ldr	r5, [r4, #60]	; 0x3c
   22ac8:	ldr	r2, [r4, #76]	; 0x4c
   22acc:	cmp	r5, #0
   22ad0:	moveq	r4, r2
   22ad4:	beq	22af0 <__assert_fail@plt+0xffa8>
   22ad8:	ldr	r0, [r4, #64]	; 0x40
   22adc:	mov	r3, #0
   22ae0:	str	r6, [sp]
   22ae4:	mov	r1, #6
   22ae8:	blx	r5
   22aec:	ldr	r4, [r4, #76]	; 0x4c
   22af0:	cmp	r4, #0
   22af4:	bne	22ac4 <__assert_fail@plt+0xff7c>
   22af8:	mov	r0, r7
   22afc:	bl	22934 <__assert_fail@plt+0xfdec>
   22b00:	ldr	r2, [sp, #12]
   22b04:	ldr	r3, [r8]
   22b08:	cmp	r2, r3
   22b0c:	bne	22b4c <__assert_fail@plt+0x10004>
   22b10:	add	sp, sp, #16
   22b14:	pop	{r4, r5, r6, r7, r8, pc}
   22b18:	ldr	r3, [r7, #72]	; 0x48
   22b1c:	cmp	r3, #0
   22b20:	beq	22b3c <__assert_fail@plt+0xfff4>
   22b24:	ldrb	r2, [r3]
   22b28:	cmp	r2, #0
   22b2c:	beq	22abc <__assert_fail@plt+0xff74>
   22b30:	mov	r0, r3
   22b34:	bl	12a10 <remove@plt>
   22b38:	b	22abc <__assert_fail@plt+0xff74>
   22b3c:	bl	22430 <__assert_fail@plt+0xf8e8>
   22b40:	subs	r3, r0, #0
   22b44:	beq	22abc <__assert_fail@plt+0xff74>
   22b48:	b	22b24 <__assert_fail@plt+0xffdc>
   22b4c:	bl	124e8 <__stack_chk_fail@plt>
   22b50:	andeq	fp, r3, r0, lsl fp
   22b54:	mov	r1, #8192	; 0x2000
   22b58:	mov	r0, #3
   22b5c:	b	224c0 <__assert_fail@plt+0xf978>
   22b60:	push	{r4, r5, r6, lr}
   22b64:	mov	r4, r0
   22b68:	mov	r0, #1
   22b6c:	mov	r6, r1
   22b70:	bl	224c0 <__assert_fail@plt+0xf978>
   22b74:	ldr	r3, [r0, #36]	; 0x24
   22b78:	cmp	r3, r6
   22b7c:	bne	22bb8 <__assert_fail@plt+0x10070>
   22b80:	cmp	r6, #0
   22b84:	addne	r5, r4, r6
   22b88:	subne	r5, r5, #1
   22b8c:	subne	r3, r4, #1
   22b90:	rsbne	lr, r4, #1
   22b94:	beq	22bb0 <__assert_fail@plt+0x10068>
   22b98:	add	r2, lr, r3
   22b9c:	ldrb	ip, [r3, #1]!
   22ba0:	ldr	r1, [r0, #48]	; 0x30
   22ba4:	cmp	r3, r5
   22ba8:	strb	ip, [r1, r2]
   22bac:	bne	22b98 <__assert_fail@plt+0x10050>
   22bb0:	str	r6, [r0, #44]	; 0x2c
   22bb4:	pop	{r4, r5, r6, pc}
   22bb8:	ldr	r3, [pc, #12]	; 22bcc <__assert_fail@plt+0x10084>
   22bbc:	ldr	r2, [pc, #12]	; 22bd0 <__assert_fail@plt+0x10088>
   22bc0:	ldr	r1, [pc, #12]	; 22bd4 <__assert_fail@plt+0x1008c>
   22bc4:	ldr	r0, [pc, #12]	; 22bd8 <__assert_fail@plt+0x10090>
   22bc8:	bl	12b48 <__assert_fail@plt>
   22bcc:	andeq	r9, r2, r4, asr ip
   22bd0:	andeq	r0, r0, sl, asr #9
   22bd4:	andeq	r9, r2, r4, lsr #27
   22bd8:	andeq	sl, r2, r0, asr #6
   22bdc:	cmp	r0, #0
   22be0:	beq	22c18 <__assert_fail@plt+0x100d0>
   22be4:	ldrb	r3, [r0]
   22be8:	cmp	r3, #45	; 0x2d
   22bec:	bne	22bfc <__assert_fail@plt+0x100b4>
   22bf0:	ldrb	r3, [r0, #1]
   22bf4:	cmp	r3, #0
   22bf8:	beq	22c18 <__assert_fail@plt+0x100d0>
   22bfc:	push	{r4, lr}
   22c00:	mov	r2, #1
   22c04:	mov	r1, #0
   22c08:	bl	1d088 <__assert_fail@plt+0xa540>
   22c0c:	adds	r0, r0, #1
   22c10:	movne	r0, #1
   22c14:	pop	{r4, pc}
   22c18:	mov	r0, #1
   22c1c:	bx	lr
   22c20:	push	{lr}		; (str lr, [sp, #-4]!)
   22c24:	sub	sp, sp, #12
   22c28:	mov	r2, #0
   22c2c:	str	r2, [sp]
   22c30:	ldr	r3, [pc, #12]	; 22c44 <__assert_fail@plt+0x100fc>
   22c34:	mov	r1, #1
   22c38:	bl	22650 <__assert_fail@plt+0xfb08>
   22c3c:	add	sp, sp, #12
   22c40:	pop	{pc}		; (ldr pc, [sp], #4)
   22c44:	andeq	r8, r2, r4, lsl #10
   22c48:	push	{lr}		; (str lr, [sp, #-4]!)
   22c4c:	sub	sp, sp, #12
   22c50:	ldr	r3, [pc, #20]	; 22c6c <__assert_fail@plt+0x10124>
   22c54:	str	r1, [sp]
   22c58:	mov	r2, #2
   22c5c:	mov	r1, #1
   22c60:	bl	22650 <__assert_fail@plt+0xfb08>
   22c64:	add	sp, sp, #12
   22c68:	pop	{pc}		; (ldr pc, [sp], #4)
   22c6c:	andeq	r8, r2, r4, asr r4
   22c70:	push	{lr}		; (str lr, [sp, #-4]!)
   22c74:	sub	sp, sp, #12
   22c78:	mov	r1, #0
   22c7c:	str	r1, [sp]
   22c80:	ldr	r3, [pc, #12]	; 22c94 <__assert_fail@plt+0x1014c>
   22c84:	mov	r2, #2
   22c88:	bl	22650 <__assert_fail@plt+0xfb08>
   22c8c:	add	sp, sp, #12
   22c90:	pop	{pc}		; (ldr pc, [sp], #4)
   22c94:	andeq	sl, r2, r4, asr r3
   22c98:	mov	r2, #0
   22c9c:	b	22558 <__assert_fail@plt+0xfa10>
   22ca0:	mov	r2, #1
   22ca4:	b	22558 <__assert_fail@plt+0xfa10>
   22ca8:	mov	r3, r1
   22cac:	push	{r4, r5, r6, r7, r8, lr}
   22cb0:	mov	r1, #119	; 0x77
   22cb4:	sub	sp, sp, #8
   22cb8:	mov	r6, r0
   22cbc:	mov	r0, r3
   22cc0:	mov	r7, r2
   22cc4:	bl	127ac <strchr@plt>
   22cc8:	mov	r1, #8192	; 0x2000
   22ccc:	cmp	r0, #0
   22cd0:	movne	r0, #2
   22cd4:	moveq	r0, #0
   22cd8:	bl	224c0 <__assert_fail@plt+0xf978>
   22cdc:	mov	r5, r0
   22ce0:	mov	r0, #54	; 0x36
   22ce4:	bl	12338 <gcry_malloc@plt>
   22ce8:	mov	ip, #1
   22cec:	mov	r1, ip
   22cf0:	ldr	r3, [pc, #120]	; 22d70 <__assert_fail@plt+0x10228>
   22cf4:	mvn	r2, #0
   22cf8:	str	r6, [sp]
   22cfc:	mov	r4, r0
   22d00:	add	r8, r0, #20
   22d04:	mov	r0, r8
   22d08:	str	r6, [r4]
   22d0c:	str	r7, [r4, #4]
   22d10:	str	ip, [r4, #16]
   22d14:	bl	12830 <__sprintf_chk@plt>
   22d18:	ldr	r1, [pc, #84]	; 22d74 <__assert_fail@plt+0x1022c>
   22d1c:	mov	r3, #0
   22d20:	ldr	r2, [pc, #80]	; 22d78 <__assert_fail@plt+0x10230>
   22d24:	ldr	r1, [r1]
   22d28:	str	r4, [r5, #64]	; 0x40
   22d2c:	cmp	r1, r3
   22d30:	str	r2, [r5, #60]	; 0x3c
   22d34:	str	r3, [r4, #12]
   22d38:	str	r3, [r4, #8]
   22d3c:	beq	22d64 <__assert_fail@plt+0x1021c>
   22d40:	ldr	r0, [pc, #52]	; 22d7c <__assert_fail@plt+0x10234>
   22d44:	cmp	r7, #0
   22d48:	ldr	r1, [r5, #80]	; 0x50
   22d4c:	ldr	r2, [r5, #84]	; 0x54
   22d50:	ldr	r3, [pc, #40]	; 22d80 <__assert_fail@plt+0x10238>
   22d54:	str	r8, [sp]
   22d58:	movne	r3, r0
   22d5c:	ldr	r0, [pc, #32]	; 22d84 <__assert_fail@plt+0x1023c>
   22d60:	bl	1c890 <__assert_fail@plt+0x9d48>
   22d64:	mov	r0, r5
   22d68:	add	sp, sp, #8
   22d6c:	pop	{r4, r5, r6, r7, r8, pc}
   22d70:	andeq	sl, r2, r8, asr r3
   22d74:	andeq	ip, r3, ip, ror r5
   22d78:	ldrdeq	r1, [r2], -r4
   22d7c:	andeq	sl, r2, r0, lsr r2
   22d80:	muleq	r2, r8, r9
   22d84:	andeq	sl, r2, r0, ror #6
   22d88:	b	22c98 <__assert_fail@plt+0x10150>
   22d8c:	push	{r4, r5, r6, r7, r8, lr}
   22d90:	sub	sp, sp, #48	; 0x30
   22d94:	ldr	r4, [pc, #212]	; 22e70 <__assert_fail@plt+0x10328>
   22d98:	cmp	r1, #1
   22d9c:	ldr	ip, [r4]
   22da0:	str	ip, [sp, #44]	; 0x2c
   22da4:	beq	22dc4 <__assert_fail@plt+0x1027c>
   22da8:	bl	221c0 <__assert_fail@plt+0xf678>
   22dac:	ldr	r2, [sp, #44]	; 0x2c
   22db0:	ldr	r3, [r4]
   22db4:	cmp	r2, r3
   22db8:	bne	22e6c <__assert_fail@plt+0x10324>
   22dbc:	add	sp, sp, #48	; 0x30
   22dc0:	pop	{r4, r5, r6, r7, r8, pc}
   22dc4:	ldr	r3, [pc, #168]	; 22e74 <__assert_fail@plt+0x1032c>
   22dc8:	mov	r5, r0
   22dcc:	mov	r6, r2
   22dd0:	ldr	r3, [r3]
   22dd4:	cmp	r3, #0
   22dd8:	bne	22e1c <__assert_fail@plt+0x102d4>
   22ddc:	cmp	r5, #0
   22de0:	beq	22e14 <__assert_fail@plt+0x102cc>
   22de4:	ldr	r2, [r5, #76]	; 0x4c
   22de8:	cmp	r2, #0
   22dec:	bne	22df8 <__assert_fail@plt+0x102b0>
   22df0:	b	22e54 <__assert_fail@plt+0x1030c>
   22df4:	mov	r2, r3
   22df8:	ldr	r3, [r2, #76]	; 0x4c
   22dfc:	cmp	r3, #0
   22e00:	bne	22df4 <__assert_fail@plt+0x102ac>
   22e04:	ldr	r3, [pc, #108]	; 22e78 <__assert_fail@plt+0x10330>
   22e08:	ldr	r1, [r2, #60]	; 0x3c
   22e0c:	cmp	r1, r3
   22e10:	beq	22e5c <__assert_fail@plt+0x10314>
   22e14:	mvn	r0, #0
   22e18:	b	22dac <__assert_fail@plt+0x10264>
   22e1c:	cmp	r0, #0
   22e20:	mvneq	r7, #0
   22e24:	add	r1, sp, #12
   22e28:	ldrne	r7, [r0, #80]	; 0x50
   22e2c:	ldrne	r8, [r0, #84]	; 0x54
   22e30:	moveq	r8, r7
   22e34:	bl	21a0c <__assert_fail@plt+0xeec4>
   22e38:	str	r6, [sp]
   22e3c:	mov	r2, r8
   22e40:	mov	r1, r7
   22e44:	mov	r3, r0
   22e48:	ldr	r0, [pc, #44]	; 22e7c <__assert_fail@plt+0x10334>
   22e4c:	bl	1c890 <__assert_fail@plt+0x9d48>
   22e50:	b	22ddc <__assert_fail@plt+0x10294>
   22e54:	mov	r2, r5
   22e58:	b	22e04 <__assert_fail@plt+0x102bc>
   22e5c:	ldr	r3, [r2, #64]	; 0x40
   22e60:	mov	r0, #0
   22e64:	str	r6, [r3, #4]
   22e68:	b	22dac <__assert_fail@plt+0x10264>
   22e6c:	bl	124e8 <__stack_chk_fail@plt>
   22e70:	andeq	fp, r3, r0, lsl fp
   22e74:	andeq	ip, r3, ip, ror r5
   22e78:			; <UNDEFINED> instruction: 0x000214b4
   22e7c:	andeq	sl, r2, ip, ror r3
   22e80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22e84:	sub	sp, sp, #48	; 0x30
   22e88:	ldr	r7, [pc, #492]	; 2307c <__assert_fail@plt+0x10534>
   22e8c:	ldr	lr, [r0]
   22e90:	mov	ip, #0
   22e94:	cmp	lr, #2
   22e98:	ldr	lr, [r7]
   22e9c:	mov	r4, r0
   22ea0:	mov	r6, r1
   22ea4:	mov	r9, r2
   22ea8:	mov	r8, r3
   22eac:	str	lr, [sp, #44]	; 0x2c
   22eb0:	str	ip, [sp, #8]
   22eb4:	beq	2303c <__assert_fail@plt+0x104f4>
   22eb8:	ldr	r3, [r4, #84]	; 0x54
   22ebc:	cmp	r3, #63	; 0x3f
   22ec0:	bgt	23054 <__assert_fail@plt+0x1050c>
   22ec4:	mov	r0, #88	; 0x58
   22ec8:	bl	122fc <gcry_xmalloc@plt>
   22ecc:	mov	r2, #88	; 0x58
   22ed0:	mov	r1, r4
   22ed4:	mov	r5, r0
   22ed8:	bl	1247c <memcpy@plt>
   22edc:	ldr	r0, [r4, #72]	; 0x48
   22ee0:	cmp	r0, #0
   22ee4:	beq	22eec <__assert_fail@plt+0x103a4>
   22ee8:	bl	128e4 <gcry_xstrdup@plt>
   22eec:	ldr	r2, [r4]
   22ef0:	mov	r3, #0
   22ef4:	cmp	r2, #3
   22ef8:	str	r0, [r5, #72]	; 0x48
   22efc:	str	r3, [r4, #60]	; 0x3c
   22f00:	str	r3, [r4, #64]	; 0x40
   22f04:	str	r3, [r4, #68]	; 0x44
   22f08:	str	r3, [r4, #52]	; 0x34
   22f0c:	beq	22fe8 <__assert_fail@plt+0x104a0>
   22f10:	cmp	r2, #1
   22f14:	moveq	r2, #8192	; 0x2000
   22f18:	ldrne	r0, [r4, #36]	; 0x24
   22f1c:	moveq	r0, r2
   22f20:	streq	r3, [r4]
   22f24:	streq	r2, [r4, #36]	; 0x24
   22f28:	bl	122fc <gcry_xmalloc@plt>
   22f2c:	ldr	sl, [pc, #332]	; 23080 <__assert_fail@plt+0x10538>
   22f30:	ldr	r3, [r5, #24]
   22f34:	ldr	r1, [r5, #16]
   22f38:	ldr	r2, [r5, #20]
   22f3c:	adds	r1, r3, r1
   22f40:	ldr	r3, [r5, #28]
   22f44:	str	r5, [r4, #76]	; 0x4c
   22f48:	ldr	ip, [sl]
   22f4c:	ldr	r5, [r5, #84]	; 0x54
   22f50:	adc	r3, r3, r2
   22f54:	str	r9, [r4, #64]	; 0x40
   22f58:	str	r8, [r4, #68]	; 0x44
   22f5c:	mov	r9, #0
   22f60:	mov	r8, #0
   22f64:	add	r5, r5, #1
   22f68:	str	r3, [r4, #28]
   22f6c:	cmp	ip, #0
   22f70:	mov	r3, #0
   22f74:	str	r6, [r4, #60]	; 0x3c
   22f78:	str	r1, [r4, #24]
   22f7c:	str	r5, [r4, #84]	; 0x54
   22f80:	strd	r8, [r4, #16]
   22f84:	strd	r8, [r4, #8]
   22f88:	str	r3, [r4, #44]	; 0x2c
   22f8c:	str	r3, [r4, #40]	; 0x28
   22f90:	str	r3, [r4, #32]
   22f94:	str	r0, [r4, #48]	; 0x30
   22f98:	bne	22ffc <__assert_fail@plt+0x104b4>
   22f9c:	cmp	r6, #0
   22fa0:	moveq	r5, r6
   22fa4:	beq	22fcc <__assert_fail@plt+0x10484>
   22fa8:	add	r3, sp, #8
   22fac:	str	r3, [sp]
   22fb0:	mov	r1, #1
   22fb4:	mov	r3, #0
   22fb8:	ldr	r2, [r4, #76]	; 0x4c
   22fbc:	ldr	r0, [r4, #64]	; 0x40
   22fc0:	blx	r6
   22fc4:	subs	r5, r0, #0
   22fc8:	bne	23064 <__assert_fail@plt+0x1051c>
   22fcc:	ldr	r2, [sp, #44]	; 0x2c
   22fd0:	ldr	r3, [r7]
   22fd4:	mov	r0, r5
   22fd8:	cmp	r2, r3
   22fdc:	bne	23078 <__assert_fail@plt+0x10530>
   22fe0:	add	sp, sp, #48	; 0x30
   22fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22fe8:	mov	r3, #2
   22fec:	mov	r0, #8192	; 0x2000
   22ff0:	str	r3, [r4]
   22ff4:	str	r0, [r4, #36]	; 0x24
   22ff8:	b	22f28 <__assert_fail@plt+0x103e0>
   22ffc:	add	r1, sp, #12
   23000:	mov	r0, r4
   23004:	ldr	r6, [r4, #80]	; 0x50
   23008:	bl	21a0c <__assert_fail@plt+0xeec4>
   2300c:	mov	r2, r5
   23010:	mov	r1, r6
   23014:	mov	r3, r0
   23018:	ldr	r0, [pc, #100]	; 23084 <__assert_fail@plt+0x1053c>
   2301c:	bl	1c890 <__assert_fail@plt+0x9d48>
   23020:	ldr	r3, [sl]
   23024:	cmp	r3, #0
   23028:	beq	23034 <__assert_fail@plt+0x104ec>
   2302c:	mov	r0, r4
   23030:	bl	21a8c <__assert_fail@plt+0xef44>
   23034:	ldr	r6, [r4, #60]	; 0x3c
   23038:	b	22f9c <__assert_fail@plt+0x10454>
   2303c:	bl	21398 <__assert_fail@plt+0xe850>
   23040:	subs	r5, r0, #0
   23044:	bne	22fcc <__assert_fail@plt+0x10484>
   23048:	ldr	r3, [r4, #84]	; 0x54
   2304c:	cmp	r3, #63	; 0x3f
   23050:	ble	22ec4 <__assert_fail@plt+0x1037c>
   23054:	ldr	r0, [pc, #44]	; 23088 <__assert_fail@plt+0x10540>
   23058:	bl	1c744 <__assert_fail@plt+0x9bfc>
   2305c:	mov	r5, #89	; 0x59
   23060:	b	22fcc <__assert_fail@plt+0x10484>
   23064:	bl	129d4 <gpg_strerror@plt>
   23068:	mov	r1, r0
   2306c:	ldr	r0, [pc, #24]	; 2308c <__assert_fail@plt+0x10544>
   23070:	bl	1c744 <__assert_fail@plt+0x9bfc>
   23074:	b	22fcc <__assert_fail@plt+0x10484>
   23078:	bl	124e8 <__stack_chk_fail@plt>
   2307c:	andeq	fp, r3, r0, lsl fp
   23080:	andeq	ip, r3, ip, ror r5
   23084:	ldrdeq	sl, [r2], -r4
   23088:	andeq	sl, r2, r4, lsr #7
   2308c:	andeq	sl, r2, ip, ror #7
   23090:	mov	r3, #0
   23094:	b	22e80 <__assert_fail@plt+0x10338>
   23098:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2309c:	mov	r6, r1
   230a0:	ldr	sl, [pc, #596]	; 232fc <__assert_fail@plt+0x107b4>
   230a4:	ldr	r9, [pc, #596]	; 23300 <__assert_fail@plt+0x107b8>
   230a8:	sub	sp, sp, #48	; 0x30
   230ac:	ldr	r3, [sl]
   230b0:	ldr	r1, [r9]
   230b4:	cmp	r3, #0
   230b8:	mov	r3, #0
   230bc:	mov	r8, r2
   230c0:	str	r1, [sp, #44]	; 0x2c
   230c4:	str	r3, [sp, #8]
   230c8:	mov	r7, r0
   230cc:	bne	231fc <__assert_fail@plt+0x106b4>
   230d0:	ldr	r2, [r7]
   230d4:	bic	r3, r2, #2
   230d8:	cmp	r3, #1
   230dc:	bne	2310c <__assert_fail@plt+0x105c4>
   230e0:	ldr	r3, [r7, #76]	; 0x4c
   230e4:	cmp	r3, #0
   230e8:	bne	232c8 <__assert_fail@plt+0x10780>
   230ec:	mov	r5, #0
   230f0:	ldr	r2, [sp, #44]	; 0x2c
   230f4:	ldr	r3, [r9]
   230f8:	mov	r0, r5
   230fc:	cmp	r2, r3
   23100:	bne	232dc <__assert_fail@plt+0x10794>
   23104:	add	sp, sp, #48	; 0x30
   23108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2310c:	ldr	r5, [r7, #60]	; 0x3c
   23110:	cmp	r5, #0
   23114:	movne	r4, r7
   23118:	bne	23178 <__assert_fail@plt+0x10630>
   2311c:	ldr	r4, [r7, #76]	; 0x4c
   23120:	cmp	r4, #0
   23124:	beq	232e0 <__assert_fail@plt+0x10798>
   23128:	ldr	r0, [r7, #48]	; 0x30
   2312c:	bl	124a0 <gcry_free@plt>
   23130:	ldr	r0, [r7, #72]	; 0x48
   23134:	bl	124a0 <gcry_free@plt>
   23138:	mov	r0, r7
   2313c:	mov	r2, #88	; 0x58
   23140:	mov	r1, r4
   23144:	bl	1247c <memcpy@plt>
   23148:	mov	r0, r4
   2314c:	bl	124a0 <gcry_free@plt>
   23150:	b	230f0 <__assert_fail@plt+0x105a8>
   23154:	cmp	r8, #0
   23158:	beq	23194 <__assert_fail@plt+0x1064c>
   2315c:	ldr	r3, [r4, #64]	; 0x40
   23160:	cmp	r3, r8
   23164:	beq	23194 <__assert_fail@plt+0x1064c>
   23168:	ldr	r4, [r4, #76]	; 0x4c
   2316c:	cmp	r4, #0
   23170:	beq	2318c <__assert_fail@plt+0x10644>
   23174:	ldr	r5, [r4, #60]	; 0x3c
   23178:	cmp	r6, r5
   2317c:	beq	23154 <__assert_fail@plt+0x1060c>
   23180:	ldr	r4, [r4, #76]	; 0x4c
   23184:	cmp	r4, #0
   23188:	bne	23174 <__assert_fail@plt+0x1062c>
   2318c:	ldr	r0, [pc, #368]	; 23304 <__assert_fail@plt+0x107bc>
   23190:	bl	1c84c <__assert_fail@plt+0x9d04>
   23194:	cmp	r2, #2
   23198:	beq	2328c <__assert_fail@plt+0x10744>
   2319c:	cmp	r5, #0
   231a0:	ldr	r0, [r4, #64]	; 0x40
   231a4:	beq	231cc <__assert_fail@plt+0x10684>
   231a8:	add	r3, sp, #8
   231ac:	ldr	r2, [r4, #76]	; 0x4c
   231b0:	mov	r1, #2
   231b4:	str	r3, [sp]
   231b8:	mov	r3, #0
   231bc:	blx	r5
   231c0:	subs	r5, r0, #0
   231c4:	bne	232b4 <__assert_fail@plt+0x1076c>
   231c8:	ldr	r0, [r4, #64]	; 0x40
   231cc:	cmp	r0, #0
   231d0:	beq	231e0 <__assert_fail@plt+0x10698>
   231d4:	ldr	r3, [r4, #68]	; 0x44
   231d8:	cmp	r3, #0
   231dc:	bne	23228 <__assert_fail@plt+0x106e0>
   231e0:	cmp	r7, r4
   231e4:	ldr	r4, [r4, #76]	; 0x4c
   231e8:	beq	23238 <__assert_fail@plt+0x106f0>
   231ec:	cmp	r4, #0
   231f0:	beq	23220 <__assert_fail@plt+0x106d8>
   231f4:	ldr	r0, [pc, #268]	; 23308 <__assert_fail@plt+0x107c0>
   231f8:	bl	1c84c <__assert_fail@plt+0x9d04>
   231fc:	add	r1, sp, #12
   23200:	ldrd	r4, [r0, #80]	; 0x50
   23204:	bl	21a0c <__assert_fail@plt+0xeec4>
   23208:	mov	r2, r5
   2320c:	mov	r1, r4
   23210:	mov	r3, r0
   23214:	ldr	r0, [pc, #240]	; 2330c <__assert_fail@plt+0x107c4>
   23218:	bl	1c890 <__assert_fail@plt+0x9d48>
   2321c:	b	230d0 <__assert_fail@plt+0x10588>
   23220:	ldr	r0, [pc, #232]	; 23310 <__assert_fail@plt+0x107c8>
   23224:	bl	1c84c <__assert_fail@plt+0x9d04>
   23228:	bl	124a0 <gcry_free@plt>
   2322c:	mov	r3, #0
   23230:	str	r3, [r4, #64]	; 0x40
   23234:	b	231e0 <__assert_fail@plt+0x10698>
   23238:	cmp	r4, #0
   2323c:	beq	232f4 <__assert_fail@plt+0x107ac>
   23240:	ldr	r0, [r7, #48]	; 0x30
   23244:	bl	124a0 <gcry_free@plt>
   23248:	ldr	r0, [r7, #72]	; 0x48
   2324c:	bl	124a0 <gcry_free@plt>
   23250:	mov	r2, #88	; 0x58
   23254:	mov	r1, r4
   23258:	mov	r0, r7
   2325c:	bl	1247c <memcpy@plt>
   23260:	mov	r0, r4
   23264:	bl	124a0 <gcry_free@plt>
   23268:	ldr	r3, [sl]
   2326c:	cmp	r3, #0
   23270:	beq	230ec <__assert_fail@plt+0x105a4>
   23274:	ldr	r2, [r7, #84]	; 0x54
   23278:	ldr	r1, [r7, #80]	; 0x50
   2327c:	ldr	r0, [pc, #144]	; 23314 <__assert_fail@plt+0x107cc>
   23280:	bl	1c890 <__assert_fail@plt+0x9d48>
   23284:	mov	r5, #0
   23288:	b	230f0 <__assert_fail@plt+0x105a8>
   2328c:	mov	r0, r4
   23290:	bl	21398 <__assert_fail@plt+0xe850>
   23294:	subs	r5, r0, #0
   23298:	ldreq	r5, [r4, #60]	; 0x3c
   2329c:	beq	2319c <__assert_fail@plt+0x10654>
   232a0:	bl	129d4 <gpg_strerror@plt>
   232a4:	mov	r1, r0
   232a8:	ldr	r0, [pc, #104]	; 23318 <__assert_fail@plt+0x107d0>
   232ac:	bl	1c744 <__assert_fail@plt+0x9bfc>
   232b0:	b	230f0 <__assert_fail@plt+0x105a8>
   232b4:	bl	129d4 <gpg_strerror@plt>
   232b8:	mov	r1, r0
   232bc:	ldr	r0, [pc, #88]	; 2331c <__assert_fail@plt+0x107d4>
   232c0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   232c4:	b	230f0 <__assert_fail@plt+0x105a8>
   232c8:	ldr	r3, [pc, #80]	; 23320 <__assert_fail@plt+0x107d8>
   232cc:	ldr	r2, [pc, #80]	; 23324 <__assert_fail@plt+0x107dc>
   232d0:	ldr	r1, [pc, #80]	; 23328 <__assert_fail@plt+0x107e0>
   232d4:	ldr	r0, [pc, #80]	; 2332c <__assert_fail@plt+0x107e4>
   232d8:	bl	12b48 <__assert_fail@plt>
   232dc:	bl	124e8 <__stack_chk_fail@plt>
   232e0:	ldr	r3, [pc, #56]	; 23320 <__assert_fail@plt+0x107d8>
   232e4:	mov	r2, #1680	; 0x690
   232e8:	ldr	r1, [pc, #56]	; 23328 <__assert_fail@plt+0x107e0>
   232ec:	ldr	r0, [pc, #60]	; 23330 <__assert_fail@plt+0x107e8>
   232f0:	bl	12b48 <__assert_fail@plt>
   232f4:	ldr	r0, [pc, #56]	; 23334 <__assert_fail@plt+0x107ec>
   232f8:	bl	1c84c <__assert_fail@plt+0x9d04>
   232fc:	andeq	ip, r3, ip, ror r5
   23300:	andeq	fp, r3, r0, lsl fp
   23304:	andeq	sl, r2, ip, lsl #10
   23308:	ldrdeq	sl, [r2], -r8
   2330c:	andeq	sl, r2, r8, lsl #8
   23310:	andeq	sl, r2, ip, lsr #9
   23314:	muleq	r2, r0, r4
   23318:	andeq	sl, r2, r0, lsr r4
   2331c:	andeq	sl, r2, ip, asr r0
   23320:	andeq	r9, r2, ip, ror #24
   23324:	andeq	r0, r0, sl, lsl #13
   23328:	andeq	r9, r2, r4, lsr #27
   2332c:	andeq	sl, r2, r0, lsr #8
   23330:	andeq	sl, r2, ip, lsr #8
   23334:	andeq	sl, r2, r0, ror #8
   23338:	ldr	r3, [r0]
   2333c:	push	{r4, r6, r7, lr}
   23340:	sub	r3, r3, #2
   23344:	cmp	r3, #1
   23348:	bls	2340c <__assert_fail@plt+0x108c4>
   2334c:	ldr	r3, [r0, #40]	; 0x28
   23350:	ldr	r2, [r0, #44]	; 0x2c
   23354:	mov	r4, r0
   23358:	cmp	r3, r2
   2335c:	bhi	233f8 <__assert_fail@plt+0x108b0>
   23360:	ldrd	r6, [r0, #8]
   23364:	orrs	r1, r6, r7
   23368:	bne	233a8 <__assert_fail@plt+0x10860>
   2336c:	cmp	r3, r2
   23370:	bcs	233c0 <__assert_fail@plt+0x10878>
   23374:	ldr	r0, [r4, #48]	; 0x30
   23378:	add	r1, r3, #1
   2337c:	str	r1, [r4, #40]	; 0x28
   23380:	ldrb	r0, [r0, r3]
   23384:	cmp	r2, r1
   23388:	bcc	233e4 <__assert_fail@plt+0x1089c>
   2338c:	ldr	r3, [r4, #16]
   23390:	ldr	r2, [r4, #20]
   23394:	adds	r3, r3, #1
   23398:	adc	r2, r2, #0
   2339c:	str	r3, [r4, #16]
   233a0:	str	r2, [r4, #20]
   233a4:	pop	{r4, r6, r7, pc}
   233a8:	ldrd	r0, [r0, #16]
   233ac:	cmp	r0, r6
   233b0:	sbcs	r1, r1, r7
   233b4:	blt	2336c <__assert_fail@plt+0x10824>
   233b8:	mvn	r0, #0
   233bc:	pop	{r4, r6, r7, pc}
   233c0:	mov	r2, #1
   233c4:	mov	r1, r2
   233c8:	mov	r0, r4
   233cc:	bl	21b1c <__assert_fail@plt+0xefd4>
   233d0:	cmn	r0, #1
   233d4:	beq	233b8 <__assert_fail@plt+0x10870>
   233d8:	ldr	r1, [r4, #40]	; 0x28
   233dc:	ldr	r2, [r4, #44]	; 0x2c
   233e0:	b	23384 <__assert_fail@plt+0x1083c>
   233e4:	ldr	r3, [pc, #40]	; 23414 <__assert_fail@plt+0x108cc>
   233e8:	ldr	r2, [pc, #40]	; 23418 <__assert_fail@plt+0x108d0>
   233ec:	ldr	r1, [pc, #40]	; 2341c <__assert_fail@plt+0x108d4>
   233f0:	ldr	r0, [pc, #40]	; 23420 <__assert_fail@plt+0x108d8>
   233f4:	bl	12b48 <__assert_fail@plt>
   233f8:	ldr	r3, [pc, #20]	; 23414 <__assert_fail@plt+0x108cc>
   233fc:	ldr	r2, [pc, #32]	; 23424 <__assert_fail@plt+0x108dc>
   23400:	ldr	r1, [pc, #20]	; 2341c <__assert_fail@plt+0x108d4>
   23404:	ldr	r0, [pc, #20]	; 23420 <__assert_fail@plt+0x108d8>
   23408:	bl	12b48 <__assert_fail@plt>
   2340c:	ldr	r0, [pc, #20]	; 23428 <__assert_fail@plt+0x108e0>
   23410:	bl	1c84c <__assert_fail@plt+0x9d04>
   23414:	andeq	r9, r2, r0, lsl #25
   23418:			; <UNDEFINED> instruction: 0x000007b9
   2341c:	andeq	r9, r2, r4, lsr #27
   23420:	andeq	r9, r2, r4, asr #30
   23424:	andeq	r0, r0, sp, lsr #15
   23428:	andeq	sl, r2, ip, lsr r5
   2342c:	ldr	r3, [r0]
   23430:	push	{r4, r5, r6, r7, r8, lr}
   23434:	sub	r3, r3, #2
   23438:	cmp	r3, #1
   2343c:	bls	23574 <__assert_fail@plt+0x10a2c>
   23440:	mov	r6, r2
   23444:	ldrd	r2, [r0, #8]
   23448:	mov	r7, r0
   2344c:	mov	r5, r1
   23450:	orrs	r3, r2, r3
   23454:	beq	2349c <__assert_fail@plt+0x10954>
   23458:	cmp	r6, #0
   2345c:	beq	2356c <__assert_fail@plt+0x10a24>
   23460:	mov	r4, #0
   23464:	b	2347c <__assert_fail@plt+0x10934>
   23468:	cmp	r5, #0
   2346c:	add	r4, r4, #1
   23470:	strbne	r0, [r5], #1
   23474:	cmp	r4, r6
   23478:	beq	234b8 <__assert_fail@plt+0x10970>
   2347c:	mov	r0, r7
   23480:	bl	23338 <__assert_fail@plt+0x107f0>
   23484:	cmn	r0, #1
   23488:	bne	23468 <__assert_fail@plt+0x10920>
   2348c:	cmp	r4, #0
   23490:	bne	234b8 <__assert_fail@plt+0x10970>
   23494:	mvn	r4, #0
   23498:	b	234b8 <__assert_fail@plt+0x10970>
   2349c:	mov	r4, #0
   234a0:	cmp	r6, r4
   234a4:	bhi	234c0 <__assert_fail@plt+0x10978>
   234a8:	ldrd	r2, [r7, #16]
   234ac:	adds	r0, r2, r4
   234b0:	adc	r1, r3, r4, asr #31
   234b4:	strd	r0, [r7, #16]
   234b8:	mov	r0, r4
   234bc:	pop	{r4, r5, r6, r7, r8, pc}
   234c0:	ldr	r1, [r7, #40]	; 0x28
   234c4:	ldr	r8, [r7, #44]	; 0x2c
   234c8:	cmp	r1, r8
   234cc:	bcs	23520 <__assert_fail@plt+0x109d8>
   234d0:	sub	r3, r8, r1
   234d4:	sub	r8, r6, r4
   234d8:	cmp	r8, r3
   234dc:	movcs	r8, r3
   234e0:	cmp	r5, #0
   234e4:	add	r4, r8, r4
   234e8:	addeq	r8, r8, r1
   234ec:	streq	r8, [r7, #40]	; 0x28
   234f0:	beq	23518 <__assert_fail@plt+0x109d0>
   234f4:	ldr	r3, [r7, #48]	; 0x30
   234f8:	mov	r2, r8
   234fc:	add	r1, r3, r1
   23500:	mov	r0, r5
   23504:	bl	1247c <memcpy@plt>
   23508:	ldr	r3, [r7, #40]	; 0x28
   2350c:	add	r5, r5, r8
   23510:	add	r8, r3, r8
   23514:	str	r8, [r7, #40]	; 0x28
   23518:	cmp	r4, r6
   2351c:	bcs	234a8 <__assert_fail@plt+0x10960>
   23520:	mov	r2, #1
   23524:	mov	r1, r2
   23528:	mov	r0, r7
   2352c:	bl	21b1c <__assert_fail@plt+0xefd4>
   23530:	cmn	r0, #1
   23534:	beq	23550 <__assert_fail@plt+0x10a08>
   23538:	cmp	r5, #0
   2353c:	add	r4, r4, #1
   23540:	strbne	r0, [r5], #1
   23544:	cmp	r6, r4
   23548:	bhi	234a0 <__assert_fail@plt+0x10958>
   2354c:	b	234a8 <__assert_fail@plt+0x10960>
   23550:	ldrd	r2, [r7, #16]
   23554:	adds	r0, r2, r4
   23558:	adc	r1, r3, r4, asr #31
   2355c:	cmp	r4, #0
   23560:	strd	r0, [r7, #16]
   23564:	bne	234b8 <__assert_fail@plt+0x10970>
   23568:	b	23494 <__assert_fail@plt+0x1094c>
   2356c:	mov	r4, r6
   23570:	b	234b8 <__assert_fail@plt+0x10970>
   23574:	ldr	r0, [pc]	; 2357c <__assert_fail@plt+0x10a34>
   23578:	bl	1c84c <__assert_fail@plt+0x9d04>
   2357c:	andeq	sl, r2, ip, ror #10
   23580:	push	{r4, r5, r6, r7, r8, lr}
   23584:	subs	r5, r2, #0
   23588:	beq	23658 <__assert_fail@plt+0x10b10>
   2358c:	ldr	r3, [r0]
   23590:	mov	r4, r0
   23594:	cmp	r3, #1
   23598:	bhi	2366c <__assert_fail@plt+0x10b24>
   2359c:	ldr	r2, [r0, #36]	; 0x24
   235a0:	mov	r6, r1
   235a4:	ldr	r3, [r0, #44]	; 0x2c
   235a8:	ldr	r1, [r0, #40]	; 0x28
   235ac:	cmp	r5, r2
   235b0:	movcs	r5, r2
   235b4:	sub	r3, r3, r1
   235b8:	cmp	r3, r5
   235bc:	bcs	23608 <__assert_fail@plt+0x10ac0>
   235c0:	mov	r7, #0
   235c4:	b	235e4 <__assert_fail@plt+0x10a9c>
   235c8:	ldr	r3, [r4, #40]	; 0x28
   235cc:	cmp	r3, #1
   235d0:	bne	23644 <__assert_fail@plt+0x10afc>
   235d4:	ldr	r3, [r4, #44]	; 0x2c
   235d8:	str	r7, [r4, #40]	; 0x28
   235dc:	cmp	r3, r5
   235e0:	bcs	23634 <__assert_fail@plt+0x10aec>
   235e4:	mov	r2, r5
   235e8:	mov	r1, #0
   235ec:	mov	r0, r4
   235f0:	bl	21b1c <__assert_fail@plt+0xefd4>
   235f4:	cmn	r0, #1
   235f8:	bne	235c8 <__assert_fail@plt+0x10a80>
   235fc:	ldr	r1, [r4, #40]	; 0x28
   23600:	ldr	r3, [r4, #44]	; 0x2c
   23604:	sub	r3, r3, r1
   23608:	cmp	r3, r5
   2360c:	movcc	r5, r3
   23610:	cmp	r5, #0
   23614:	beq	2363c <__assert_fail@plt+0x10af4>
   23618:	ldr	r3, [r4, #48]	; 0x30
   2361c:	mov	r0, r6
   23620:	add	r1, r3, r1
   23624:	mov	r2, r5
   23628:	bl	1247c <memcpy@plt>
   2362c:	mov	r0, r5
   23630:	pop	{r4, r5, r6, r7, r8, pc}
   23634:	mov	r1, #0
   23638:	b	23608 <__assert_fail@plt+0x10ac0>
   2363c:	mvn	r5, #0
   23640:	b	2362c <__assert_fail@plt+0x10ae4>
   23644:	ldr	r3, [pc, #52]	; 23680 <__assert_fail@plt+0x10b38>
   23648:	ldr	r2, [pc, #52]	; 23684 <__assert_fail@plt+0x10b3c>
   2364c:	ldr	r1, [pc, #52]	; 23688 <__assert_fail@plt+0x10b40>
   23650:	ldr	r0, [pc, #52]	; 2368c <__assert_fail@plt+0x10b44>
   23654:	bl	12b48 <__assert_fail@plt>
   23658:	ldr	r3, [pc, #32]	; 23680 <__assert_fail@plt+0x10b38>
   2365c:	ldr	r2, [pc, #44]	; 23690 <__assert_fail@plt+0x10b48>
   23660:	ldr	r1, [pc, #32]	; 23688 <__assert_fail@plt+0x10b40>
   23664:	ldr	r0, [pc, #40]	; 23694 <__assert_fail@plt+0x10b4c>
   23668:	bl	12b48 <__assert_fail@plt>
   2366c:	ldr	r3, [pc, #12]	; 23680 <__assert_fail@plt+0x10b38>
   23670:	ldr	r2, [pc, #32]	; 23698 <__assert_fail@plt+0x10b50>
   23674:	ldr	r1, [pc, #12]	; 23688 <__assert_fail@plt+0x10b40>
   23678:	ldr	r0, [pc, #28]	; 2369c <__assert_fail@plt+0x10b54>
   2367c:	bl	12b48 <__assert_fail@plt>
   23680:	muleq	r2, r0, ip
   23684:	andeq	r0, r0, r2, lsr #16
   23688:	andeq	r9, r2, r4, lsr #27
   2368c:	ldrdeq	sl, [r2], -r8
   23690:	andeq	r0, r0, r1, lsl r8
   23694:	muleq	r2, r8, r5
   23698:	andeq	r0, r0, r2, lsl r8
   2369c:	andeq	sl, r2, r4, lsr #11
   236a0:	ldr	r3, [r0]
   236a4:	push	{r4, r5, r6, lr}
   236a8:	cmp	r3, #1
   236ac:	bls	23714 <__assert_fail@plt+0x10bcc>
   236b0:	ldr	r3, [r0, #44]	; 0x2c
   236b4:	ldr	r2, [r0, #36]	; 0x24
   236b8:	mov	r4, r0
   236bc:	cmp	r3, r2
   236c0:	mov	r5, r1
   236c4:	beq	236e8 <__assert_fail@plt+0x10ba0>
   236c8:	cmp	r2, r3
   236cc:	bls	23700 <__assert_fail@plt+0x10bb8>
   236d0:	ldr	r2, [r4, #48]	; 0x30
   236d4:	add	r1, r3, #1
   236d8:	str	r1, [r4, #44]	; 0x2c
   236dc:	mov	r0, #0
   236e0:	strb	r5, [r2, r3]
   236e4:	pop	{r4, r5, r6, pc}
   236e8:	bl	21398 <__assert_fail@plt+0xe850>
   236ec:	cmp	r0, #0
   236f0:	popne	{r4, r5, r6, pc}
   236f4:	ldr	r3, [r4, #44]	; 0x2c
   236f8:	ldr	r2, [r4, #36]	; 0x24
   236fc:	b	236c8 <__assert_fail@plt+0x10b80>
   23700:	ldr	r3, [pc, #20]	; 2371c <__assert_fail@plt+0x10bd4>
   23704:	ldr	r2, [pc, #20]	; 23720 <__assert_fail@plt+0x10bd8>
   23708:	ldr	r1, [pc, #20]	; 23724 <__assert_fail@plt+0x10bdc>
   2370c:	ldr	r0, [pc, #20]	; 23728 <__assert_fail@plt+0x10be0>
   23710:	bl	12b48 <__assert_fail@plt>
   23714:	ldr	r0, [pc, #16]	; 2372c <__assert_fail@plt+0x10be4>
   23718:	bl	1c84c <__assert_fail@plt+0x9d04>
   2371c:	muleq	r2, ip, ip
   23720:	andeq	r0, r0, r5, asr #16
   23724:	andeq	r9, r2, r4, lsr #27
   23728:	andeq	sl, r2, r8, lsl r6
   2372c:	andeq	sl, r2, r8, ror #11
   23730:	ldr	r3, [r0]
   23734:	push	{r4, r5, r6, r7, r8, lr}
   23738:	cmp	r3, #1
   2373c:	bls	237cc <__assert_fail@plt+0x10c84>
   23740:	cmp	r2, #0
   23744:	mov	r5, r0
   23748:	mov	r7, r1
   2374c:	mov	r6, r2
   23750:	beq	23798 <__assert_fail@plt+0x10c50>
   23754:	ldr	r3, [r5, #44]	; 0x2c
   23758:	ldr	r4, [r5, #36]	; 0x24
   2375c:	cmp	r3, r4
   23760:	bcs	237a0 <__assert_fail@plt+0x10c58>
   23764:	sub	r4, r4, r3
   23768:	cmp	r4, r6
   2376c:	ldr	r0, [r5, #48]	; 0x30
   23770:	movcs	r4, r6
   23774:	add	r0, r0, r3
   23778:	mov	r2, r4
   2377c:	mov	r1, r7
   23780:	bl	1247c <memcpy@plt>
   23784:	ldr	r3, [r5, #44]	; 0x2c
   23788:	subs	r6, r6, r4
   2378c:	add	r3, r3, r4
   23790:	str	r3, [r5, #44]	; 0x2c
   23794:	bne	237b4 <__assert_fail@plt+0x10c6c>
   23798:	mov	r0, #0
   2379c:	pop	{r4, r5, r6, r7, r8, pc}
   237a0:	mov	r0, r5
   237a4:	bl	21398 <__assert_fail@plt+0xe850>
   237a8:	cmp	r0, #0
   237ac:	beq	23754 <__assert_fail@plt+0x10c0c>
   237b0:	pop	{r4, r5, r6, r7, r8, pc}
   237b4:	mov	r0, r5
   237b8:	bl	21398 <__assert_fail@plt+0xe850>
   237bc:	cmp	r0, #0
   237c0:	popne	{r4, r5, r6, r7, r8, pc}
   237c4:	add	r7, r7, r4
   237c8:	b	23754 <__assert_fail@plt+0x10c0c>
   237cc:	ldr	r0, [pc]	; 237d4 <__assert_fail@plt+0x10c8c>
   237d0:	bl	1c84c <__assert_fail@plt+0x9d04>
   237d4:	andeq	sl, r2, r0, lsr r6
   237d8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237dc:	mov	r6, r3
   237e0:	ldr	r3, [sp, #40]	; 0x28
   237e4:	cmp	r1, #3
   237e8:	mov	r5, r0
   237ec:	mov	r7, r2
   237f0:	ldr	fp, [r3]
   237f4:	beq	239a4 <__assert_fail@plt+0x10e5c>
   237f8:	cmp	r1, #4
   237fc:	beq	23850 <__assert_fail@plt+0x10d08>
   23800:	cmp	r1, #1
   23804:	beq	23e04 <__assert_fail@plt+0x112bc>
   23808:	cmp	r1, #5
   2380c:	beq	23e54 <__assert_fail@plt+0x1130c>
   23810:	cmp	r1, #2
   23814:	movne	r9, #0
   23818:	bne	23900 <__assert_fail@plt+0x10db8>
   2381c:	ldr	r3, [r0]
   23820:	cmp	r3, #2
   23824:	beq	23eac <__assert_fail@plt+0x11364>
   23828:	ldr	r9, [r0, #4]
   2382c:	cmp	r9, #0
   23830:	bne	23e6c <__assert_fail@plt+0x11324>
   23834:	ldr	r3, [pc, #2184]	; 240c4 <__assert_fail@plt+0x1157c>
   23838:	ldr	r3, [r3]
   2383c:	cmp	r3, #0
   23840:	bne	23e9c <__assert_fail@plt+0x11354>
   23844:	mov	r0, r5
   23848:	bl	124a0 <gcry_free@plt>
   2384c:	b	23900 <__assert_fail@plt+0x10db8>
   23850:	ldr	r2, [r0, #12]
   23854:	cmp	r2, #0
   23858:	beq	24018 <__assert_fail@plt+0x114d0>
   2385c:	ldr	r2, [r0, #20]
   23860:	cmp	r2, #512	; 0x200
   23864:	add	r4, r2, fp
   23868:	bhi	24028 <__assert_fail@plt+0x114e0>
   2386c:	ldr	r8, [pc, #2132]	; 240c8 <__assert_fail@plt+0x11580>
   23870:	cmp	r4, r8
   23874:	ldrhi	sl, [pc, #2128]	; 240cc <__assert_fail@plt+0x11584>
   23878:	bls	23af4 <__assert_fail@plt+0x10fac>
   2387c:	cmp	r4, sl
   23880:	bls	23ab4 <__assert_fail@plt+0x10f6c>
   23884:	mov	r3, #1024	; 0x400
   23888:	mov	r1, #10
   2388c:	b	23894 <__assert_fail@plt+0x10d4c>
   23890:	mov	r1, r2
   23894:	lsl	r3, r3, #1
   23898:	cmp	r4, r3
   2389c:	add	r2, r1, #1
   238a0:	bcs	23890 <__assert_fail@plt+0x10d48>
   238a4:	cmp	r1, #31
   238a8:	lsr	fp, r3, #1
   238ac:	bgt	24088 <__assert_fail@plt+0x11540>
   238b0:	orr	r1, r1, #224	; 0xe0
   238b4:	mov	r0, r7
   238b8:	bl	236a0 <__assert_fail@plt+0x10b58>
   238bc:	ldr	r2, [r5, #20]
   238c0:	cmp	r2, #0
   238c4:	beq	23908 <__assert_fail@plt+0x10dc0>
   238c8:	cmp	r2, #512	; 0x200
   238cc:	bne	2409c <__assert_fail@plt+0x11554>
   238d0:	ldr	r1, [r5, #16]
   238d4:	mov	r0, r7
   238d8:	bl	23730 <__assert_fail@plt+0x10be8>
   238dc:	subs	r9, r0, #0
   238e0:	bne	23998 <__assert_fail@plt+0x10e50>
   238e4:	sub	r4, r4, #512	; 0x200
   238e8:	mov	r3, #0
   238ec:	cmp	r4, fp
   238f0:	str	r3, [r5, #20]
   238f4:	bhi	23914 <__assert_fail@plt+0x10dcc>
   238f8:	cmp	r4, r3
   238fc:	bne	23ac0 <__assert_fail@plt+0x10f78>
   23900:	mov	r0, r9
   23904:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23908:	cmp	r4, fp
   2390c:	mov	r9, r2
   23910:	bls	23ac0 <__assert_fail@plt+0x10f78>
   23914:	mov	r2, fp
   23918:	mov	r1, r6
   2391c:	mov	r0, r7
   23920:	bl	23730 <__assert_fail@plt+0x10be8>
   23924:	cmp	r0, #0
   23928:	bne	23adc <__assert_fail@plt+0x10f94>
   2392c:	sub	r4, r4, fp
   23930:	clz	r3, r9
   23934:	lsr	r3, r3, #5
   23938:	cmp	r4, r8
   2393c:	movls	r2, #0
   23940:	andhi	r2, r3, #1
   23944:	cmp	r2, #0
   23948:	add	r6, r6, fp
   2394c:	bne	2387c <__assert_fail@plt+0x10d34>
   23950:	cmp	r4, #0
   23954:	moveq	r3, #0
   23958:	cmp	r3, #0
   2395c:	beq	23900 <__assert_fail@plt+0x10db8>
   23960:	ldr	r3, [r5, #20]
   23964:	cmp	r3, #0
   23968:	bne	24074 <__assert_fail@plt+0x1152c>
   2396c:	cmp	r4, r8
   23970:	bhi	24060 <__assert_fail@plt+0x11518>
   23974:	ldr	r0, [r5, #16]
   23978:	cmp	r0, #0
   2397c:	beq	23e7c <__assert_fail@plt+0x11334>
   23980:	mov	r1, r6
   23984:	mov	r2, r4
   23988:	bl	1247c <memcpy@plt>
   2398c:	mov	r9, #0
   23990:	str	r4, [r5, #20]
   23994:	b	23900 <__assert_fail@plt+0x10db8>
   23998:	bl	127c4 <gpg_err_code_from_syserror@plt>
   2399c:	uxth	r9, r0
   239a0:	b	238e4 <__assert_fail@plt+0x10d9c>
   239a4:	cmp	fp, #0
   239a8:	beq	240b0 <__assert_fail@plt+0x11568>
   239ac:	ldr	r9, [r0, #28]
   239b0:	cmp	r9, #0
   239b4:	bne	23ae8 <__assert_fail@plt+0x10fa0>
   239b8:	mov	r8, r9
   239bc:	mov	sl, #2
   239c0:	ldr	r2, [r5, #4]
   239c4:	cmp	r2, #0
   239c8:	bne	23a50 <__assert_fail@plt+0x10f08>
   239cc:	ldr	r3, [r5, #12]
   239d0:	cmp	r3, #2
   239d4:	beq	23c2c <__assert_fail@plt+0x110e4>
   239d8:	cmp	r3, #0
   239dc:	beq	24008 <__assert_fail@plt+0x114c0>
   239e0:	ldr	r0, [r5, #24]
   239e4:	cmp	r0, #0
   239e8:	strne	r2, [r5, #24]
   239ec:	bne	23a34 <__assert_fail@plt+0x10eec>
   239f0:	ldr	r3, [r7, #32]
   239f4:	cmp	r3, #0
   239f8:	bne	23bc4 <__assert_fail@plt+0x1107c>
   239fc:	ldr	r1, [r7, #40]	; 0x28
   23a00:	ldr	r3, [r7, #44]	; 0x2c
   23a04:	cmp	r1, r3
   23a08:	bcs	23bc4 <__assert_fail@plt+0x1107c>
   23a0c:	ldr	r3, [r7, #16]
   23a10:	ldr	r2, [r7, #20]
   23a14:	ldr	r0, [r7, #48]	; 0x30
   23a18:	adds	r3, r3, #1
   23a1c:	str	r3, [r7, #16]
   23a20:	adc	r2, r2, #0
   23a24:	add	r3, r1, #1
   23a28:	str	r2, [r7, #20]
   23a2c:	str	r3, [r7, #40]	; 0x28
   23a30:	ldrb	r0, [r0, r1]
   23a34:	cmp	r0, #191	; 0xbf
   23a38:	bgt	23b58 <__assert_fail@plt+0x11010>
   23a3c:	cmp	r0, #0
   23a40:	str	r0, [r5, #4]
   23a44:	mov	r2, r0
   23a48:	str	sl, [r5, #12]
   23a4c:	beq	23c2c <__assert_fail@plt+0x110e4>
   23a50:	cmp	r2, #0
   23a54:	beq	23b4c <__assert_fail@plt+0x11004>
   23a58:	cmp	r2, fp
   23a5c:	movcc	r4, r2
   23a60:	movcs	r4, fp
   23a64:	mov	r2, r4
   23a68:	mov	r1, r6
   23a6c:	mov	r0, r7
   23a70:	bl	2342c <__assert_fail@plt+0x108e4>
   23a74:	cmp	r4, r0
   23a78:	ble	23b28 <__assert_fail@plt+0x10fe0>
   23a7c:	cmn	r0, #1
   23a80:	ldr	r3, [r5, #4]
   23a84:	addne	fp, fp, r0
   23a88:	moveq	r0, #0
   23a8c:	add	r3, r0, r3
   23a90:	mov	r2, fp
   23a94:	mov	r1, r5
   23a98:	ldr	r0, [pc, #1584]	; 240d0 <__assert_fail@plt+0x11588>
   23a9c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   23aa0:	mov	r9, #89	; 0x59
   23aa4:	ldr	r3, [sp, #40]	; 0x28
   23aa8:	mov	r0, r9
   23aac:	str	r8, [r3]
   23ab0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ab4:	mov	r1, #233	; 0xe9
   23ab8:	mov	fp, #512	; 0x200
   23abc:	b	238b4 <__assert_fail@plt+0x10d6c>
   23ac0:	mov	r2, r4
   23ac4:	mov	r1, r6
   23ac8:	mov	r0, r7
   23acc:	bl	23730 <__assert_fail@plt+0x10be8>
   23ad0:	mov	fp, r4
   23ad4:	cmp	r0, #0
   23ad8:	beq	23900 <__assert_fail@plt+0x10db8>
   23adc:	bl	127c4 <gpg_err_code_from_syserror@plt>
   23ae0:	uxth	r9, r0
   23ae4:	b	2392c <__assert_fail@plt+0x10de4>
   23ae8:	mov	r8, #0
   23aec:	mvn	r9, #0
   23af0:	b	23aa4 <__assert_fail@plt+0x10f5c>
   23af4:	ldr	r0, [r0, #16]
   23af8:	cmp	r0, #0
   23afc:	beq	23f30 <__assert_fail@plt+0x113e8>
   23b00:	mov	r1, r6
   23b04:	add	r0, r0, r2
   23b08:	mov	r2, fp
   23b0c:	bl	1247c <memcpy@plt>
   23b10:	ldr	r2, [r5, #20]
   23b14:	mov	r9, #0
   23b18:	add	r3, r2, fp
   23b1c:	str	r3, [r5, #20]
   23b20:	mov	r0, r9
   23b24:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b28:	ldr	r2, [r5, #4]
   23b2c:	subs	fp, fp, r0
   23b30:	sub	r2, r2, r0
   23b34:	add	r6, r6, r0
   23b38:	add	r8, r8, r0
   23b3c:	str	r2, [r5, #4]
   23b40:	beq	23aa4 <__assert_fail@plt+0x10f5c>
   23b44:	cmp	r2, #0
   23b48:	bne	23a58 <__assert_fail@plt+0x10f10>
   23b4c:	cmp	fp, #0
   23b50:	bne	239c0 <__assert_fail@plt+0x10e78>
   23b54:	b	23aa4 <__assert_fail@plt+0x10f5c>
   23b58:	cmp	r0, #223	; 0xdf
   23b5c:	bgt	23be4 <__assert_fail@plt+0x1109c>
   23b60:	ldr	r2, [r7, #32]
   23b64:	sub	r3, r0, #192	; 0xc0
   23b68:	cmp	r2, #0
   23b6c:	lsl	r3, r3, #8
   23b70:	str	r3, [r5, #4]
   23b74:	bne	23c00 <__assert_fail@plt+0x110b8>
   23b78:	ldr	r0, [r7, #40]	; 0x28
   23b7c:	ldr	r2, [r7, #44]	; 0x2c
   23b80:	cmp	r0, r2
   23b84:	bcs	23c00 <__assert_fail@plt+0x110b8>
   23b88:	ldr	r2, [r7, #16]
   23b8c:	ldr	r1, [r7, #20]
   23b90:	ldr	ip, [r7, #48]	; 0x30
   23b94:	adds	r2, r2, #1
   23b98:	str	r2, [r7, #16]
   23b9c:	adc	r1, r1, #0
   23ba0:	add	r2, r0, #1
   23ba4:	str	r1, [r7, #20]
   23ba8:	str	r2, [r7, #40]	; 0x28
   23bac:	ldrb	r2, [ip, r0]
   23bb0:	add	r3, r3, #192	; 0xc0
   23bb4:	str	sl, [r5, #12]
   23bb8:	add	r2, r2, r3
   23bbc:	str	r2, [r5, #4]
   23bc0:	b	23a50 <__assert_fail@plt+0x10f08>
   23bc4:	mov	r0, r7
   23bc8:	bl	23338 <__assert_fail@plt+0x107f0>
   23bcc:	cmn	r0, #1
   23bd0:	bne	23a34 <__assert_fail@plt+0x10eec>
   23bd4:	ldr	r0, [pc, #1272]	; 240d4 <__assert_fail@plt+0x1158c>
   23bd8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   23bdc:	mov	r9, #89	; 0x59
   23be0:	b	23aa4 <__assert_fail@plt+0x10f5c>
   23be4:	cmp	r0, #255	; 0xff
   23be8:	beq	23c44 <__assert_fail@plt+0x110fc>
   23bec:	and	r2, r0, #31
   23bf0:	mov	r3, #1
   23bf4:	lsl	r2, r3, r2
   23bf8:	str	r2, [r5, #4]
   23bfc:	b	23a50 <__assert_fail@plt+0x10f08>
   23c00:	mov	r0, r7
   23c04:	bl	23338 <__assert_fail@plt+0x107f0>
   23c08:	cmn	r0, #1
   23c0c:	beq	23f20 <__assert_fail@plt+0x113d8>
   23c10:	ldr	r2, [r5, #4]
   23c14:	str	sl, [r5, #12]
   23c18:	add	r2, r2, #192	; 0xc0
   23c1c:	add	r2, r2, r0
   23c20:	cmp	r2, #0
   23c24:	str	r2, [r5, #4]
   23c28:	bne	23a50 <__assert_fail@plt+0x10f08>
   23c2c:	clz	r9, r8
   23c30:	mov	r3, #1
   23c34:	lsr	r9, r9, #5
   23c38:	rsb	r9, r9, #0
   23c3c:	str	r3, [r5, #28]
   23c40:	b	23aa4 <__assert_fail@plt+0x10f5c>
   23c44:	ldr	r3, [r7, #32]
   23c48:	cmp	r3, #0
   23c4c:	bne	23d50 <__assert_fail@plt+0x11208>
   23c50:	ldrd	r2, [r7, #40]	; 0x28
   23c54:	cmp	r2, r3
   23c58:	bcs	23d50 <__assert_fail@plt+0x11208>
   23c5c:	ldr	r1, [r7, #16]
   23c60:	ldr	r0, [r7, #20]
   23c64:	ldr	ip, [r7, #48]	; 0x30
   23c68:	adds	r1, r1, #1
   23c6c:	str	r1, [r7, #16]
   23c70:	adc	r0, r0, #0
   23c74:	add	r1, r2, #1
   23c78:	str	r1, [r7, #40]	; 0x28
   23c7c:	str	r0, [r7, #20]
   23c80:	ldrb	r2, [ip, r2]
   23c84:	ldr	r1, [r7, #40]	; 0x28
   23c88:	cmp	r1, r3
   23c8c:	lsl	r2, r2, #24
   23c90:	str	r2, [r5, #4]
   23c94:	bcs	23d7c <__assert_fail@plt+0x11234>
   23c98:	ldr	r0, [r7, #16]
   23c9c:	ldr	ip, [r7, #20]
   23ca0:	ldr	lr, [r7, #48]	; 0x30
   23ca4:	adds	r0, r0, #1
   23ca8:	str	r0, [r7, #16]
   23cac:	adc	ip, ip, #0
   23cb0:	add	r0, r1, #1
   23cb4:	str	r0, [r7, #40]	; 0x28
   23cb8:	str	ip, [r7, #20]
   23cbc:	ldrb	r1, [lr, r1]
   23cc0:	orr	r2, r2, r1, lsl #16
   23cc4:	ldr	r1, [r7, #40]	; 0x28
   23cc8:	str	r2, [r5, #4]
   23ccc:	cmp	r1, r3
   23cd0:	bcs	23db4 <__assert_fail@plt+0x1126c>
   23cd4:	ldr	r0, [r7, #16]
   23cd8:	ldr	ip, [r7, #20]
   23cdc:	ldr	lr, [r7, #48]	; 0x30
   23ce0:	adds	r0, r0, #1
   23ce4:	str	r0, [r7, #16]
   23ce8:	adc	ip, ip, #0
   23cec:	add	r0, r1, #1
   23cf0:	str	r0, [r7, #40]	; 0x28
   23cf4:	str	ip, [r7, #20]
   23cf8:	ldrb	r1, [lr, r1]
   23cfc:	orr	r2, r2, r1, lsl #8
   23d00:	ldr	r1, [r7, #40]	; 0x28
   23d04:	str	r2, [r5, #4]
   23d08:	cmp	r1, r3
   23d0c:	bcs	23dec <__assert_fail@plt+0x112a4>
   23d10:	ldr	r3, [r7, #16]
   23d14:	ldr	r0, [r7, #20]
   23d18:	ldr	ip, [r7, #48]	; 0x30
   23d1c:	adds	r3, r3, #1
   23d20:	adc	r0, r0, #0
   23d24:	str	r3, [r7, #16]
   23d28:	add	r3, r1, #1
   23d2c:	str	r0, [r7, #20]
   23d30:	str	r3, [r7, #40]	; 0x28
   23d34:	ldrb	r0, [ip, r1]
   23d38:	orr	r2, r0, r2
   23d3c:	cmp	r2, #0
   23d40:	str	r2, [r5, #4]
   23d44:	str	sl, [r5, #12]
   23d48:	bne	23a50 <__assert_fail@plt+0x10f08>
   23d4c:	b	23c2c <__assert_fail@plt+0x110e4>
   23d50:	mov	r0, r7
   23d54:	bl	23338 <__assert_fail@plt+0x107f0>
   23d58:	ldr	r3, [r7, #32]
   23d5c:	cmp	r3, #0
   23d60:	lsl	r2, r0, #24
   23d64:	str	r2, [r5, #4]
   23d68:	bne	23d7c <__assert_fail@plt+0x11234>
   23d6c:	ldr	r3, [r7, #44]	; 0x2c
   23d70:	ldr	r1, [r7, #40]	; 0x28
   23d74:	cmp	r1, r3
   23d78:	bcc	23c98 <__assert_fail@plt+0x11150>
   23d7c:	mov	r0, r7
   23d80:	bl	23338 <__assert_fail@plt+0x107f0>
   23d84:	ldr	r2, [r7, #32]
   23d88:	ldr	r3, [r5, #4]
   23d8c:	cmp	r2, #0
   23d90:	lsl	r2, r0, #16
   23d94:	and	r2, r2, #16711680	; 0xff0000
   23d98:	orr	r2, r2, r3
   23d9c:	str	r2, [r5, #4]
   23da0:	bne	23db4 <__assert_fail@plt+0x1126c>
   23da4:	ldr	r3, [r7, #44]	; 0x2c
   23da8:	ldr	r1, [r7, #40]	; 0x28
   23dac:	cmp	r1, r3
   23db0:	bcc	23cd4 <__assert_fail@plt+0x1118c>
   23db4:	mov	r0, r7
   23db8:	bl	23338 <__assert_fail@plt+0x107f0>
   23dbc:	ldr	r2, [r7, #32]
   23dc0:	ldr	r3, [r5, #4]
   23dc4:	cmp	r2, #0
   23dc8:	lsl	r2, r0, #8
   23dcc:	uxth	r2, r2
   23dd0:	orr	r2, r2, r3
   23dd4:	str	r2, [r5, #4]
   23dd8:	bne	23dec <__assert_fail@plt+0x112a4>
   23ddc:	ldr	r3, [r7, #44]	; 0x2c
   23de0:	ldr	r1, [r7, #40]	; 0x28
   23de4:	cmp	r1, r3
   23de8:	bcc	23d10 <__assert_fail@plt+0x111c8>
   23dec:	mov	r0, r7
   23df0:	bl	23338 <__assert_fail@plt+0x107f0>
   23df4:	cmn	r0, #1
   23df8:	beq	23ff8 <__assert_fail@plt+0x114b0>
   23dfc:	ldr	r2, [r5, #4]
   23e00:	b	23d38 <__assert_fail@plt+0x111f0>
   23e04:	ldr	r3, [pc, #696]	; 240c4 <__assert_fail@plt+0x1157c>
   23e08:	ldr	r3, [r3]
   23e0c:	cmp	r3, #0
   23e10:	bne	23e8c <__assert_fail@plt+0x11344>
   23e14:	ldr	r3, [r5, #12]
   23e18:	cmp	r3, #0
   23e1c:	movne	r3, #0
   23e20:	strne	r3, [r5, #8]
   23e24:	bne	23e3c <__assert_fail@plt+0x112f4>
   23e28:	ldr	r3, [r5]
   23e2c:	cmp	r3, #0
   23e30:	streq	r3, [r5, #4]
   23e34:	ldrne	r3, [r5, #4]
   23e38:	str	r3, [r5, #8]
   23e3c:	mov	r9, #0
   23e40:	str	r9, [r5, #28]
   23e44:	str	r9, [r5, #16]
   23e48:	str	r9, [r5, #20]
   23e4c:	mov	r0, r9
   23e50:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23e54:	mov	r2, fp
   23e58:	mov	r0, r6
   23e5c:	ldr	r1, [pc, #628]	; 240d8 <__assert_fail@plt+0x11590>
   23e60:	bl	16f50 <__assert_fail@plt+0x4408>
   23e64:	mov	r9, #0
   23e68:	b	23900 <__assert_fail@plt+0x10db8>
   23e6c:	ldr	r0, [pc, #616]	; 240dc <__assert_fail@plt+0x11594>
   23e70:	bl	1c744 <__assert_fail@plt+0x9bfc>
   23e74:	mov	r9, #0
   23e78:	b	23834 <__assert_fail@plt+0x10cec>
   23e7c:	mov	r0, #512	; 0x200
   23e80:	bl	122fc <gcry_xmalloc@plt>
   23e84:	str	r0, [r5, #16]
   23e88:	b	23980 <__assert_fail@plt+0x10e38>
   23e8c:	mov	r1, r0
   23e90:	ldr	r0, [pc, #584]	; 240e0 <__assert_fail@plt+0x11598>
   23e94:	bl	1c890 <__assert_fail@plt+0x9d48>
   23e98:	b	23e14 <__assert_fail@plt+0x112cc>
   23e9c:	mov	r1, r5
   23ea0:	ldr	r0, [pc, #572]	; 240e4 <__assert_fail@plt+0x1159c>
   23ea4:	bl	1c890 <__assert_fail@plt+0x9d48>
   23ea8:	b	23844 <__assert_fail@plt+0x10cfc>
   23eac:	ldr	r3, [r0, #12]
   23eb0:	cmp	r3, #0
   23eb4:	beq	24050 <__assert_fail@plt+0x11508>
   23eb8:	ldr	r4, [r0, #20]
   23ebc:	cmp	r4, #191	; 0xbf
   23ec0:	bls	23fe4 <__assert_fail@plt+0x1149c>
   23ec4:	cmp	r4, #8384	; 0x20c0
   23ec8:	bcs	23f44 <__assert_fail@plt+0x113fc>
   23ecc:	sub	r6, r4, #192	; 0xc0
   23ed0:	mov	r0, r2
   23ed4:	lsr	r1, r6, #8
   23ed8:	add	r1, r1, #192	; 0xc0
   23edc:	bl	236a0 <__assert_fail@plt+0x10b58>
   23ee0:	cmp	r0, #0
   23ee4:	beq	2403c <__assert_fail@plt+0x114f4>
   23ee8:	bl	1280c <__errno_location@plt>
   23eec:	ldr	r0, [r0]
   23ef0:	bl	126c8 <strerror@plt>
   23ef4:	mov	r1, r0
   23ef8:	ldr	r0, [pc, #488]	; 240e8 <__assert_fail@plt+0x115a0>
   23efc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   23f00:	bl	127c4 <gpg_err_code_from_syserror@plt>
   23f04:	uxth	r9, r0
   23f08:	ldr	r0, [r5, #16]
   23f0c:	bl	124a0 <gcry_free@plt>
   23f10:	mov	r3, #0
   23f14:	str	r3, [r5, #16]
   23f18:	str	r3, [r5, #20]
   23f1c:	b	23834 <__assert_fail@plt+0x10cec>
   23f20:	ldr	r0, [pc, #452]	; 240ec <__assert_fail@plt+0x115a4>
   23f24:	bl	1c744 <__assert_fail@plt+0x9bfc>
   23f28:	mov	r9, #89	; 0x59
   23f2c:	b	23aa4 <__assert_fail@plt+0x10f5c>
   23f30:	mov	r0, #512	; 0x200
   23f34:	bl	122fc <gcry_xmalloc@plt>
   23f38:	ldr	r2, [r5, #20]
   23f3c:	str	r0, [r5, #16]
   23f40:	b	23b00 <__assert_fail@plt+0x10fb8>
   23f44:	mov	r1, #255	; 0xff
   23f48:	mov	r0, r2
   23f4c:	bl	236a0 <__assert_fail@plt+0x10b58>
   23f50:	cmp	r0, #0
   23f54:	bne	23ee8 <__assert_fail@plt+0x113a0>
   23f58:	lsr	r1, r4, #24
   23f5c:	mov	r0, r7
   23f60:	bl	236a0 <__assert_fail@plt+0x10b58>
   23f64:	cmp	r0, #0
   23f68:	bne	23ee8 <__assert_fail@plt+0x113a0>
   23f6c:	lsr	r1, r4, #16
   23f70:	mov	r0, r7
   23f74:	uxtb	r1, r1
   23f78:	bl	236a0 <__assert_fail@plt+0x10b58>
   23f7c:	cmp	r0, #0
   23f80:	bne	23ee8 <__assert_fail@plt+0x113a0>
   23f84:	lsr	r1, r4, #8
   23f88:	mov	r0, r7
   23f8c:	uxtb	r1, r1
   23f90:	bl	236a0 <__assert_fail@plt+0x10b58>
   23f94:	cmp	r0, #0
   23f98:	bne	23ee8 <__assert_fail@plt+0x113a0>
   23f9c:	uxtb	r1, r4
   23fa0:	mov	r0, r7
   23fa4:	bl	236a0 <__assert_fail@plt+0x10b58>
   23fa8:	mov	r9, r0
   23fac:	adds	r3, r4, #0
   23fb0:	movne	r3, #1
   23fb4:	cmp	r9, #0
   23fb8:	movne	r3, #0
   23fbc:	cmp	r3, #0
   23fc0:	beq	23fd8 <__assert_fail@plt+0x11490>
   23fc4:	mov	r2, r4
   23fc8:	mov	r0, r7
   23fcc:	ldr	r1, [r5, #16]
   23fd0:	bl	23730 <__assert_fail@plt+0x10be8>
   23fd4:	mov	r9, r0
   23fd8:	cmp	r9, #0
   23fdc:	beq	23f08 <__assert_fail@plt+0x113c0>
   23fe0:	b	23ee8 <__assert_fail@plt+0x113a0>
   23fe4:	mov	r1, r4
   23fe8:	mov	r0, r2
   23fec:	bl	236a0 <__assert_fail@plt+0x10b58>
   23ff0:	mov	r9, r0
   23ff4:	b	23fac <__assert_fail@plt+0x11464>
   23ff8:	ldr	r0, [pc, #240]	; 240f0 <__assert_fail@plt+0x115a8>
   23ffc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   24000:	mov	r9, #89	; 0x59
   24004:	b	23aa4 <__assert_fail@plt+0x10f5c>
   24008:	ldr	r2, [pc, #228]	; 240f4 <__assert_fail@plt+0x115ac>
   2400c:	ldr	r1, [pc, #228]	; 240f8 <__assert_fail@plt+0x115b0>
   24010:	ldr	r0, [pc, #228]	; 240fc <__assert_fail@plt+0x115b4>
   24014:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   24018:	ldr	r2, [pc, #212]	; 240f4 <__assert_fail@plt+0x115ac>
   2401c:	ldr	r1, [pc, #220]	; 24100 <__assert_fail@plt+0x115b8>
   24020:	ldr	r0, [pc, #212]	; 240fc <__assert_fail@plt+0x115b4>
   24024:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   24028:	ldr	r3, [pc, #212]	; 24104 <__assert_fail@plt+0x115bc>
   2402c:	ldr	r2, [pc, #212]	; 24108 <__assert_fail@plt+0x115c0>
   24030:	ldr	r1, [pc, #196]	; 240fc <__assert_fail@plt+0x115b4>
   24034:	ldr	r0, [pc, #208]	; 2410c <__assert_fail@plt+0x115c4>
   24038:	bl	12b48 <__assert_fail@plt>
   2403c:	uxtb	r1, r6
   24040:	mov	r0, r7
   24044:	bl	236a0 <__assert_fail@plt+0x10b58>
   24048:	mov	r9, r0
   2404c:	b	23fac <__assert_fail@plt+0x11464>
   24050:	ldr	r2, [pc, #156]	; 240f4 <__assert_fail@plt+0x115ac>
   24054:	ldr	r1, [pc, #180]	; 24110 <__assert_fail@plt+0x115c8>
   24058:	ldr	r0, [pc, #156]	; 240fc <__assert_fail@plt+0x115b4>
   2405c:	bl	1caa4 <__assert_fail@plt+0x9f5c>
   24060:	ldr	r3, [pc, #156]	; 24104 <__assert_fail@plt+0x115bc>
   24064:	ldr	r2, [pc, #168]	; 24114 <__assert_fail@plt+0x115cc>
   24068:	ldr	r1, [pc, #140]	; 240fc <__assert_fail@plt+0x115b4>
   2406c:	ldr	r0, [pc, #164]	; 24118 <__assert_fail@plt+0x115d0>
   24070:	bl	12b48 <__assert_fail@plt>
   24074:	ldr	r3, [pc, #136]	; 24104 <__assert_fail@plt+0x115bc>
   24078:	mov	r2, #964	; 0x3c4
   2407c:	ldr	r1, [pc, #120]	; 240fc <__assert_fail@plt+0x115b4>
   24080:	ldr	r0, [pc, #148]	; 2411c <__assert_fail@plt+0x115d4>
   24084:	bl	12b48 <__assert_fail@plt>
   24088:	ldr	r3, [pc, #116]	; 24104 <__assert_fail@plt+0x115bc>
   2408c:	ldr	r2, [pc, #140]	; 24120 <__assert_fail@plt+0x115d8>
   24090:	ldr	r1, [pc, #100]	; 240fc <__assert_fail@plt+0x115b4>
   24094:	ldr	r0, [pc, #136]	; 24124 <__assert_fail@plt+0x115dc>
   24098:	bl	12b48 <__assert_fail@plt>
   2409c:	ldr	r3, [pc, #96]	; 24104 <__assert_fail@plt+0x115bc>
   240a0:	ldr	r2, [pc, #128]	; 24128 <__assert_fail@plt+0x115e0>
   240a4:	ldr	r1, [pc, #80]	; 240fc <__assert_fail@plt+0x115b4>
   240a8:	ldr	r0, [pc, #124]	; 2412c <__assert_fail@plt+0x115e4>
   240ac:	bl	12b48 <__assert_fail@plt>
   240b0:	ldr	r3, [pc, #76]	; 24104 <__assert_fail@plt+0x115bc>
   240b4:	mov	r2, #796	; 0x31c
   240b8:	ldr	r1, [pc, #60]	; 240fc <__assert_fail@plt+0x115b4>
   240bc:	ldr	r0, [pc, #108]	; 24130 <__assert_fail@plt+0x115e8>
   240c0:	bl	12b48 <__assert_fail@plt>
   240c4:	andeq	ip, r3, ip, ror r5
   240c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   240cc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   240d0:	ldrdeq	sl, [r2], -r4
   240d4:	andeq	sl, r2, ip, asr r6
   240d8:	muleq	r2, r8, r7
   240dc:	andeq	sl, r2, r8, lsr #15
   240e0:	andeq	sl, r2, r0, lsl #15
   240e4:	andeq	sl, r2, r8, asr #15
   240e8:	andeq	sl, r2, r0, ror #15
   240ec:	andeq	sl, r2, r4, lsl #13
   240f0:	andeq	sl, r2, ip, lsr #13
   240f4:			; <UNDEFINED> instruction: 0x00029cbc
   240f8:	andeq	r0, r0, r5, ror r3
   240fc:	andeq	r9, r2, r4, lsr #27
   24100:	andeq	r0, r0, lr, asr #7
   24104:	andeq	r9, r2, ip, lsr #25
   24108:	muleq	r0, r6, r3
   2410c:	andeq	sl, r2, r8, lsl #14
   24110:	andeq	r0, r0, r2, lsl r4
   24114:	andeq	r0, r0, r5, asr #7
   24118:	andeq	sl, r2, r0, ror #14
   2411c:	andeq	sl, r2, r4, asr r7
   24120:	andeq	r0, r0, lr, lsr #7
   24124:	andeq	sl, r2, ip, lsr #14
   24128:			; <UNDEFINED> instruction: 0x000003b3
   2412c:	andeq	sl, r2, r8, lsr r7
   24130:	andeq	sl, r2, r8, lsr #12
   24134:	ldr	r3, [r0]
   24138:	push	{r4, r5, r6, lr}
   2413c:	cmp	r3, #1
   24140:	bls	24168 <__assert_fail@plt+0x11620>
   24144:	mov	r4, r0
   24148:	mov	r0, r1
   2414c:	mov	r5, r1
   24150:	bl	12788 <strlen@plt>
   24154:	mov	r1, r5
   24158:	mov	r2, r0
   2415c:	mov	r0, r4
   24160:	pop	{r4, r5, r6, lr}
   24164:	b	23730 <__assert_fail@plt+0x10be8>
   24168:	ldr	r0, [pc]	; 24170 <__assert_fail@plt+0x11628>
   2416c:	bl	1c84c <__assert_fail@plt+0x9d04>
   24170:	andeq	sl, r2, r0, lsl #16
   24174:	push	{r4, r5, r6, r7, r8, lr}
   24178:	sub	sp, sp, #40	; 0x28
   2417c:	ldr	r6, [pc, #152]	; 2421c <__assert_fail@plt+0x116d4>
   24180:	mov	r4, r0
   24184:	mov	r8, r1
   24188:	ldr	r3, [r6]
   2418c:	mov	r7, r2
   24190:	str	r3, [sp, #36]	; 0x24
   24194:	b	2419c <__assert_fail@plt+0x11654>
   24198:	mov	r4, r3
   2419c:	mov	r0, r4
   241a0:	bl	21398 <__assert_fail@plt+0xe850>
   241a4:	cmp	r0, #0
   241a8:	bne	241f0 <__assert_fail@plt+0x116a8>
   241ac:	ldr	r3, [r4, #76]	; 0x4c
   241b0:	cmp	r3, #0
   241b4:	bne	24198 <__assert_fail@plt+0x11650>
   241b8:	ldr	r5, [r4, #44]	; 0x2c
   241bc:	mov	r0, r8
   241c0:	cmp	r5, r7
   241c4:	movcs	r5, r7
   241c8:	mov	r2, r5
   241cc:	ldr	r1, [r4, #48]	; 0x30
   241d0:	bl	1247c <memcpy@plt>
   241d4:	ldr	r2, [sp, #36]	; 0x24
   241d8:	ldr	r3, [r6]
   241dc:	mov	r0, r5
   241e0:	cmp	r2, r3
   241e4:	bne	24218 <__assert_fail@plt+0x116d0>
   241e8:	add	sp, sp, #40	; 0x28
   241ec:	pop	{r4, r5, r6, r7, r8, pc}
   241f0:	add	r1, sp, #4
   241f4:	mov	r0, r4
   241f8:	ldr	r5, [r4, #80]	; 0x50
   241fc:	ldr	r6, [r4, #84]	; 0x54
   24200:	bl	21a0c <__assert_fail@plt+0xeec4>
   24204:	mov	r2, r6
   24208:	mov	r1, r5
   2420c:	mov	r3, r0
   24210:	ldr	r0, [pc, #8]	; 24220 <__assert_fail@plt+0x116d8>
   24214:	bl	1c84c <__assert_fail@plt+0x9d04>
   24218:	bl	124e8 <__stack_chk_fail@plt>
   2421c:	andeq	fp, r3, r0, lsl fp
   24220:	andeq	sl, r2, r0, lsr r8
   24224:	ldr	r3, [r1]
   24228:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2422c:	cmp	r3, #1
   24230:	bhi	242e8 <__assert_fail@plt+0x117a0>
   24234:	ldr	r3, [r0]
   24238:	mov	r8, r0
   2423c:	cmp	r3, #2
   24240:	bne	242d4 <__assert_fail@plt+0x1178c>
   24244:	ldr	r5, [r0, #56]	; 0x38
   24248:	cmp	r5, #0
   2424c:	mvnne	r7, #0
   24250:	bne	242bc <__assert_fail@plt+0x11774>
   24254:	mov	r0, #32768	; 0x8000
   24258:	mov	r9, r1
   2425c:	bl	122fc <gcry_xmalloc@plt>
   24260:	mov	r7, r5
   24264:	mov	r6, r0
   24268:	b	24290 <__assert_fail@plt+0x11748>
   2426c:	cmp	r5, r0
   24270:	mov	r2, r0
   24274:	mov	r1, r6
   24278:	mov	r0, r8
   2427c:	movcc	r5, r4
   24280:	bl	23730 <__assert_fail@plt+0x10be8>
   24284:	cmp	r0, #0
   24288:	bne	242ac <__assert_fail@plt+0x11764>
   2428c:	add	r7, r7, r4
   24290:	mov	r2, #32768	; 0x8000
   24294:	mov	r1, r6
   24298:	mov	r0, r9
   2429c:	bl	2342c <__assert_fail@plt+0x108e4>
   242a0:	cmn	r0, #1
   242a4:	mov	r4, r0
   242a8:	bne	2426c <__assert_fail@plt+0x11724>
   242ac:	cmp	r5, #0
   242b0:	bne	242c4 <__assert_fail@plt+0x1177c>
   242b4:	mov	r0, r6
   242b8:	bl	124a0 <gcry_free@plt>
   242bc:	mov	r0, r7
   242c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   242c4:	mov	r1, r5
   242c8:	mov	r0, r6
   242cc:	bl	1caf0 <__assert_fail@plt+0x9fa8>
   242d0:	b	242b4 <__assert_fail@plt+0x1176c>
   242d4:	ldr	r3, [pc, #32]	; 242fc <__assert_fail@plt+0x117b4>
   242d8:	ldr	r2, [pc, #32]	; 24300 <__assert_fail@plt+0x117b8>
   242dc:	ldr	r1, [pc, #32]	; 24304 <__assert_fail@plt+0x117bc>
   242e0:	ldr	r0, [pc, #32]	; 24308 <__assert_fail@plt+0x117c0>
   242e4:	bl	12b48 <__assert_fail@plt>
   242e8:	ldr	r3, [pc, #12]	; 242fc <__assert_fail@plt+0x117b4>
   242ec:	ldr	r2, [pc, #24]	; 2430c <__assert_fail@plt+0x117c4>
   242f0:	ldr	r1, [pc, #12]	; 24304 <__assert_fail@plt+0x117bc>
   242f4:	ldr	r0, [pc, #20]	; 24310 <__assert_fail@plt+0x117c8>
   242f8:	bl	12b48 <__assert_fail@plt>
   242fc:	andeq	r9, r2, ip, asr #25
   24300:	andeq	r0, r0, pc, lsr #17
   24304:	andeq	r9, r2, r4, lsr #27
   24308:			; <UNDEFINED> instruction: 0x0002a8b8
   2430c:	andeq	r0, r0, lr, lsr #17
   24310:	andeq	sl, r2, r8, ror r8
   24314:	ldr	r3, [r0]
   24318:	push	{r4, lr}
   2431c:	cmp	r3, #1
   24320:	bls	24354 <__assert_fail@plt+0x1180c>
   24324:	ldr	r3, [r0, #76]	; 0x4c
   24328:	mov	r4, r0
   2432c:	cmp	r3, #0
   24330:	popeq	{r4, pc}
   24334:	mov	r2, #0
   24338:	ldr	r1, [r4, #60]	; 0x3c
   2433c:	mov	r0, r4
   24340:	bl	23098 <__assert_fail@plt+0x10550>
   24344:	ldr	r3, [r4, #76]	; 0x4c
   24348:	cmp	r3, #0
   2434c:	bne	24334 <__assert_fail@plt+0x117ec>
   24350:	pop	{r4, pc}
   24354:	ldr	r0, [pc]	; 2435c <__assert_fail@plt+0x11814>
   24358:	bl	1c84c <__assert_fail@plt+0x9d04>
   2435c:	strdeq	sl, [r2], -r8
   24360:	ldr	r3, [r1]
   24364:	push	{r4, r5, r6, lr}
   24368:	sub	r3, r3, #2
   2436c:	cmp	r3, #1
   24370:	bhi	243a8 <__assert_fail@plt+0x11860>
   24374:	ldr	r3, [r0]
   24378:	mov	r5, r0
   2437c:	sub	r3, r3, #2
   24380:	cmp	r3, #1
   24384:	bhi	243bc <__assert_fail@plt+0x11874>
   24388:	mov	r4, r1
   2438c:	mov	r0, r1
   24390:	bl	24314 <__assert_fail@plt+0x117cc>
   24394:	mov	r0, r5
   24398:	ldr	r2, [r4, #44]	; 0x2c
   2439c:	ldr	r1, [r4, #48]	; 0x30
   243a0:	pop	{r4, r5, r6, lr}
   243a4:	b	23730 <__assert_fail@plt+0x10be8>
   243a8:	ldr	r3, [pc, #32]	; 243d0 <__assert_fail@plt+0x11888>
   243ac:	mov	r2, #2176	; 0x880
   243b0:	ldr	r1, [pc, #28]	; 243d4 <__assert_fail@plt+0x1188c>
   243b4:	ldr	r0, [pc, #28]	; 243d8 <__assert_fail@plt+0x11890>
   243b8:	bl	12b48 <__assert_fail@plt>
   243bc:	ldr	r3, [pc, #12]	; 243d0 <__assert_fail@plt+0x11888>
   243c0:	ldr	r2, [pc, #20]	; 243dc <__assert_fail@plt+0x11894>
   243c4:	ldr	r1, [pc, #8]	; 243d4 <__assert_fail@plt+0x1188c>
   243c8:	ldr	r0, [pc, #16]	; 243e0 <__assert_fail@plt+0x11898>
   243cc:	bl	12b48 <__assert_fail@plt>
   243d0:	ldrdeq	r9, [r2], -r8
   243d4:	andeq	r9, r2, r4, lsr #27
   243d8:	andeq	sl, r2, r8, lsr #18
   243dc:	andeq	r0, r0, r1, lsl #17
   243e0:	andeq	sl, r2, r8, ror #18
   243e4:	push	{r4, r5, lr}
   243e8:	orrs	ip, r2, r3
   243ec:	ldr	r1, [r0, #24]
   243f0:	ldr	lr, [r0, #16]
   243f4:	ldr	ip, [r0, #28]
   243f8:	ldr	r5, [r0, #20]
   243fc:	strd	r2, [r0, #8]
   24400:	movne	r4, #1
   24404:	moveq	r4, #0
   24408:	mov	r2, #0
   2440c:	adds	r1, r1, lr
   24410:	mov	r3, #0
   24414:	adc	ip, ip, r5
   24418:	str	r4, [r0, #32]
   2441c:	str	r1, [r0, #24]
   24420:	str	ip, [r0, #28]
   24424:	strd	r2, [r0, #16]
   24428:	pop	{r4, r5, pc}
   2442c:	push	{r4, lr}
   24430:	sub	sp, sp, #112	; 0x70
   24434:	ldr	r4, [pc, #156]	; 244d8 <__assert_fail@plt+0x11990>
   24438:	cmp	r1, #0
   2443c:	ldr	r3, [r4]
   24440:	str	r3, [sp, #108]	; 0x6c
   24444:	movne	r3, #0
   24448:	strne	r3, [r1]
   2444c:	b	24454 <__assert_fail@plt+0x1190c>
   24450:	mov	r0, r3
   24454:	ldr	r3, [r0, #76]	; 0x4c
   24458:	cmp	r3, #0
   2445c:	bne	24450 <__assert_fail@plt+0x11908>
   24460:	ldr	r2, [r0, #60]	; 0x3c
   24464:	ldr	r3, [pc, #112]	; 244dc <__assert_fail@plt+0x11994>
   24468:	cmp	r2, r3
   2446c:	movne	r0, #0
   24470:	movne	r1, #0
   24474:	beq	24490 <__assert_fail@plt+0x11948>
   24478:	ldr	r2, [sp, #108]	; 0x6c
   2447c:	ldr	r3, [r4]
   24480:	cmp	r2, r3
   24484:	bne	244d4 <__assert_fail@plt+0x1198c>
   24488:	add	sp, sp, #112	; 0x70
   2448c:	pop	{r4, pc}
   24490:	ldr	r3, [r0, #64]	; 0x40
   24494:	mov	r2, sp
   24498:	mov	r0, #3
   2449c:	ldr	r1, [r3]
   244a0:	bl	125a8 <__fxstat64@plt>
   244a4:	cmp	r0, #0
   244a8:	ldrdeq	r0, [sp, #48]	; 0x30
   244ac:	beq	24478 <__assert_fail@plt+0x11930>
   244b0:	bl	1280c <__errno_location@plt>
   244b4:	ldr	r0, [r0]
   244b8:	bl	126c8 <strerror@plt>
   244bc:	mov	r1, r0
   244c0:	ldr	r0, [pc, #24]	; 244e0 <__assert_fail@plt+0x11998>
   244c4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   244c8:	mov	r0, #0
   244cc:	mov	r1, #0
   244d0:	b	24478 <__assert_fail@plt+0x11930>
   244d4:	bl	124e8 <__stack_chk_fail@plt>
   244d8:	andeq	fp, r3, r0, lsl fp
   244dc:			; <UNDEFINED> instruction: 0x000214b4
   244e0:	andeq	sl, r2, r4, lsr #19
   244e4:	b	244ec <__assert_fail@plt+0x119a4>
   244e8:	mov	r0, r3
   244ec:	ldr	r3, [r0, #76]	; 0x4c
   244f0:	cmp	r3, #0
   244f4:	bne	244e8 <__assert_fail@plt+0x119a0>
   244f8:	ldr	r3, [pc, #20]	; 24514 <__assert_fail@plt+0x119cc>
   244fc:	ldr	r2, [r0, #60]	; 0x3c
   24500:	cmp	r2, r3
   24504:	ldreq	r3, [r0, #64]	; 0x40
   24508:	ldreq	r0, [r3]
   2450c:	mvnne	r0, #0
   24510:	bx	lr
   24514:			; <UNDEFINED> instruction: 0x000214b4
   24518:	ldr	r3, [r0, #24]
   2451c:	ldr	r2, [r0, #16]
   24520:	ldr	ip, [r0, #28]
   24524:	ldr	r1, [r0, #20]
   24528:	adds	r0, r3, r2
   2452c:	adc	r1, ip, r1
   24530:	bx	lr
   24534:	push	{r4, r5, r6, r7, lr}
   24538:	mov	r7, r3
   2453c:	ldr	r3, [r0]
   24540:	sub	sp, sp, #12
   24544:	bics	r3, r3, #2
   24548:	mov	r4, r0
   2454c:	mov	r6, r2
   24550:	beq	245c4 <__assert_fail@plt+0x11a7c>
   24554:	ldr	r3, [r4, #76]	; 0x4c
   24558:	mov	r0, #0
   2455c:	mov	r1, #0
   24560:	cmp	r3, #0
   24564:	mov	r3, #0
   24568:	strd	r6, [r4, #24]
   2456c:	strd	r0, [r4, #16]
   24570:	strd	r0, [r4, #8]
   24574:	str	r3, [r4, #40]	; 0x28
   24578:	str	r3, [r4, #32]
   2457c:	str	r3, [r4, #56]	; 0x38
   24580:	beq	245b4 <__assert_fail@plt+0x11a6c>
   24584:	ldr	r0, [pc, #172]	; 24638 <__assert_fail@plt+0x11af0>
   24588:	bl	1c890 <__assert_fail@plt+0x9d48>
   2458c:	ldr	r3, [r4, #76]	; 0x4c
   24590:	cmp	r3, #0
   24594:	beq	245b4 <__assert_fail@plt+0x11a6c>
   24598:	mov	r2, #0
   2459c:	ldr	r1, [r4, #60]	; 0x3c
   245a0:	mov	r0, r4
   245a4:	bl	23098 <__assert_fail@plt+0x10550>
   245a8:	ldr	r3, [r4, #76]	; 0x4c
   245ac:	cmp	r3, #0
   245b0:	bne	24598 <__assert_fail@plt+0x11a50>
   245b4:	mov	r0, #0
   245b8:	add	sp, sp, #12
   245bc:	pop	{r4, r5, r6, r7, pc}
   245c0:	mov	r4, r5
   245c4:	ldr	r5, [r4, #76]	; 0x4c
   245c8:	cmp	r5, #0
   245cc:	bne	245c0 <__assert_fail@plt+0x11a78>
   245d0:	ldr	r3, [pc, #100]	; 2463c <__assert_fail@plt+0x11af4>
   245d4:	ldr	r2, [r4, #60]	; 0x3c
   245d8:	cmp	r2, r3
   245dc:	bne	24630 <__assert_fail@plt+0x11ae8>
   245e0:	ldr	r1, [r4, #64]	; 0x40
   245e4:	mov	r2, r6
   245e8:	mov	r3, r7
   245ec:	ldr	r0, [r1]
   245f0:	str	r5, [sp]
   245f4:	bl	125fc <lseek64@plt>
   245f8:	mvn	r3, #0
   245fc:	mvn	r2, #0
   24600:	cmp	r1, r3
   24604:	cmpeq	r0, r2
   24608:	strne	r5, [r4, #44]	; 0x2c
   2460c:	bne	24554 <__assert_fail@plt+0x11a0c>
   24610:	bl	1280c <__errno_location@plt>
   24614:	ldr	r0, [r0]
   24618:	bl	126c8 <strerror@plt>
   2461c:	mov	r1, r0
   24620:	ldr	r0, [pc, #24]	; 24640 <__assert_fail@plt+0x11af8>
   24624:	bl	1c744 <__assert_fail@plt+0x9bfc>
   24628:	mvn	r0, #0
   2462c:	b	245b8 <__assert_fail@plt+0x11a70>
   24630:	mvn	r0, #0
   24634:	b	245b8 <__assert_fail@plt+0x11a70>
   24638:	andeq	sl, r2, ip, asr #19
   2463c:			; <UNDEFINED> instruction: 0x000214b4
   24640:			; <UNDEFINED> instruction: 0x0002a9b8
   24644:	ldr	r3, [r0, #72]	; 0x48
   24648:	cmp	r3, #0
   2464c:	beq	24658 <__assert_fail@plt+0x11b10>
   24650:	mov	r0, r3
   24654:	bx	lr
   24658:	b	22430 <__assert_fail@plt+0xf8e8>
   2465c:	cmp	r0, #0
   24660:	bxeq	lr
   24664:	ldr	r2, [r0, #76]	; 0x4c
   24668:	cmp	r2, #0
   2466c:	bne	24678 <__assert_fail@plt+0x11b30>
   24670:	b	2469c <__assert_fail@plt+0x11b54>
   24674:	mov	r2, r3
   24678:	ldr	r3, [r2, #76]	; 0x4c
   2467c:	cmp	r3, #0
   24680:	bne	24674 <__assert_fail@plt+0x11b2c>
   24684:	ldr	r3, [pc, #36]	; 246b0 <__assert_fail@plt+0x11b68>
   24688:	ldr	r1, [r2, #60]	; 0x3c
   2468c:	cmp	r1, r3
   24690:	beq	246a4 <__assert_fail@plt+0x11b5c>
   24694:	mov	r0, #0
   24698:	bx	lr
   2469c:	mov	r2, r0
   246a0:	b	24684 <__assert_fail@plt+0x11b3c>
   246a4:	ldr	r0, [r2, #64]	; 0x40
   246a8:	add	r0, r0, #20
   246ac:	bx	lr
   246b0:			; <UNDEFINED> instruction: 0x000214b4
   246b4:	cmp	r0, #0
   246b8:	beq	246ec <__assert_fail@plt+0x11ba4>
   246bc:	ldr	r2, [r0, #76]	; 0x4c
   246c0:	cmp	r2, #0
   246c4:	bne	246d0 <__assert_fail@plt+0x11b88>
   246c8:	b	24708 <__assert_fail@plt+0x11bc0>
   246cc:	mov	r2, r3
   246d0:	ldr	r3, [r2, #76]	; 0x4c
   246d4:	cmp	r3, #0
   246d8:	bne	246cc <__assert_fail@plt+0x11b84>
   246dc:	ldr	r3, [pc, #44]	; 24710 <__assert_fail@plt+0x11bc8>
   246e0:	ldr	r1, [r2, #60]	; 0x3c
   246e4:	cmp	r1, r3
   246e8:	beq	246f4 <__assert_fail@plt+0x11bac>
   246ec:	ldr	r0, [pc, #32]	; 24714 <__assert_fail@plt+0x11bcc>
   246f0:	bx	lr
   246f4:	ldr	r0, [r2, #64]	; 0x40
   246f8:	ldr	r3, [pc, #20]	; 24714 <__assert_fail@plt+0x11bcc>
   246fc:	adds	r0, r0, #20
   24700:	moveq	r0, r3
   24704:	bx	lr
   24708:	mov	r2, r0
   2470c:	b	246dc <__assert_fail@plt+0x11b94>
   24710:			; <UNDEFINED> instruction: 0x000214b4
   24714:	andeq	sl, r2, r4, lsl #20
   24718:	push	{r4, r5, r6, lr}
   2471c:	subs	r5, r1, #0
   24720:	mov	r4, r0
   24724:	bne	24760 <__assert_fail@plt+0x11c18>
   24728:	ldr	r3, [r0]
   2472c:	cmp	r3, #0
   24730:	beq	24754 <__assert_fail@plt+0x11c0c>
   24734:	ldr	r3, [pc, #124]	; 247b8 <__assert_fail@plt+0x11c70>
   24738:	ldr	r1, [r4, #60]	; 0x3c
   2473c:	cmp	r1, r3
   24740:	bne	247a4 <__assert_fail@plt+0x11c5c>
   24744:	mov	r0, r4
   24748:	mov	r2, #0
   2474c:	pop	{r4, r5, r6, lr}
   24750:	b	23098 <__assert_fail@plt+0x10550>
   24754:	ldr	r0, [pc, #96]	; 247bc <__assert_fail@plt+0x11c74>
   24758:	bl	1c890 <__assert_fail@plt+0x9d48>
   2475c:	b	24734 <__assert_fail@plt+0x11bec>
   24760:	mov	r1, #32
   24764:	mov	r0, #1
   24768:	bl	12a64 <gcry_xcalloc@plt>
   2476c:	ldr	r3, [r4]
   24770:	mov	lr, #0
   24774:	mov	r1, #1
   24778:	mov	ip, r0
   2477c:	mov	r2, ip
   24780:	mov	r0, r4
   24784:	str	r5, [ip, #24]
   24788:	str	r3, [ip]
   2478c:	str	r1, [ip, #12]
   24790:	mov	r3, lr
   24794:	str	lr, [ip, #4]
   24798:	ldr	r1, [pc, #24]	; 247b8 <__assert_fail@plt+0x11c70>
   2479c:	pop	{r4, r5, r6, lr}
   247a0:	b	22e80 <__assert_fail@plt+0x10338>
   247a4:	ldr	r3, [pc, #20]	; 247c0 <__assert_fail@plt+0x11c78>
   247a8:	mov	r2, #2528	; 0x9e0
   247ac:	ldr	r1, [pc, #16]	; 247c4 <__assert_fail@plt+0x11c7c>
   247b0:	ldr	r0, [pc, #16]	; 247c8 <__assert_fail@plt+0x11c80>
   247b4:	bl	1cacc <__assert_fail@plt+0x9f84>
   247b8:	ldrdeq	r3, [r2], -r8
   247bc:	andeq	sl, r2, r8, lsl #20
   247c0:	andeq	r9, r2, ip, ror #25
   247c4:	andeq	r9, r2, r4, lsr #27
   247c8:	andeq	sl, r2, ip, asr #20
   247cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247d0:	sub	sp, sp, #12
   247d4:	ldr	r8, [r2]
   247d8:	ldr	sl, [r1]
   247dc:	clz	ip, sl
   247e0:	lsr	ip, ip, #5
   247e4:	mov	r9, r2
   247e8:	str	r3, [sp, #4]
   247ec:	mov	r2, r3
   247f0:	cmp	r8, #1
   247f4:	movls	r3, ip
   247f8:	orrhi	r3, ip, #1
   247fc:	cmp	r3, #0
   24800:	str	r1, [sp]
   24804:	mov	r4, r0
   24808:	ldr	r7, [r2]
   2480c:	bne	24844 <__assert_fail@plt+0x11cfc>
   24810:	cmp	r7, #1
   24814:	bls	249dc <__assert_fail@plt+0x11e94>
   24818:	cmp	r7, #256	; 0x100
   2481c:	movcc	r8, r7
   24820:	movcs	r8, #256	; 0x100
   24824:	mov	r0, sl
   24828:	mov	r1, r8
   2482c:	bl	12698 <gcry_xrealloc@plt>
   24830:	ldr	r3, [sp]
   24834:	mov	sl, r0
   24838:	str	r0, [r3]
   2483c:	str	r8, [r9]
   24840:	b	24854 <__assert_fail@plt+0x11d0c>
   24844:	cmp	r8, #1
   24848:	orrls	ip, ip, #1
   2484c:	cmp	ip, #0
   24850:	bne	24818 <__assert_fail@plt+0x11cd0>
   24854:	mov	fp, sl
   24858:	mov	r6, #0
   2485c:	b	248b0 <__assert_fail@plt+0x11d68>
   24860:	ldr	ip, [r4, #16]
   24864:	ldr	lr, [r4, #20]
   24868:	ldr	r5, [r4, #48]	; 0x30
   2486c:	adds	ip, ip, #1
   24870:	str	ip, [r4, #16]
   24874:	adc	lr, lr, #0
   24878:	add	ip, r0, #1
   2487c:	str	lr, [r4, #20]
   24880:	str	ip, [r4, #40]	; 0x28
   24884:	ldrb	ip, [r5, r0]
   24888:	mov	r0, ip
   2488c:	mov	r5, fp
   24890:	cmp	r0, #10
   24894:	add	r6, r6, #1
   24898:	strb	ip, [r5], #1
   2489c:	beq	249ac <__assert_fail@plt+0x11e64>
   248a0:	sub	r0, r8, #1
   248a4:	cmp	r0, r6
   248a8:	beq	248e4 <__assert_fail@plt+0x11d9c>
   248ac:	mov	fp, r5
   248b0:	ldr	r0, [r4, #32]
   248b4:	cmp	r0, #0
   248b8:	bne	248cc <__assert_fail@plt+0x11d84>
   248bc:	ldr	r0, [r4, #40]	; 0x28
   248c0:	ldr	ip, [r4, #44]	; 0x2c
   248c4:	cmp	r0, ip
   248c8:	bcc	24860 <__assert_fail@plt+0x11d18>
   248cc:	mov	r0, r4
   248d0:	bl	23338 <__assert_fail@plt+0x107f0>
   248d4:	cmn	r0, #1
   248d8:	beq	249c0 <__assert_fail@plt+0x11e78>
   248dc:	uxtb	ip, r0
   248e0:	b	2488c <__assert_fail@plt+0x11d44>
   248e4:	cmp	r8, r7
   248e8:	beq	24948 <__assert_fail@plt+0x11e00>
   248ec:	ldr	r3, [pc, #252]	; 249f0 <__assert_fail@plt+0x11ea8>
   248f0:	mov	r0, sl
   248f4:	cmp	r8, r3
   248f8:	movls	r3, #256	; 0x100
   248fc:	movhi	r3, #1024	; 0x400
   24900:	add	r2, r8, r3
   24904:	cmp	r7, r2
   24908:	movcc	r8, r7
   2490c:	movcs	r8, r2
   24910:	mov	r1, r8
   24914:	bl	12698 <gcry_xrealloc@plt>
   24918:	ldr	r3, [sp]
   2491c:	mov	sl, r0
   24920:	str	r0, [r3]
   24924:	add	r5, r0, r6
   24928:	str	r8, [r9]
   2492c:	b	248ac <__assert_fail@plt+0x11d64>
   24930:	mov	r0, r4
   24934:	bl	23338 <__assert_fail@plt+0x107f0>
   24938:	cmn	r0, #1
   2493c:	beq	24990 <__assert_fail@plt+0x11e48>
   24940:	cmp	r0, #10
   24944:	beq	24990 <__assert_fail@plt+0x11e48>
   24948:	ldr	r2, [r4, #32]
   2494c:	cmp	r2, #0
   24950:	bne	24930 <__assert_fail@plt+0x11de8>
   24954:	ldr	r2, [r4, #40]	; 0x28
   24958:	ldr	r0, [r4, #44]	; 0x2c
   2495c:	cmp	r2, r0
   24960:	bcs	24930 <__assert_fail@plt+0x11de8>
   24964:	ldr	r0, [r4, #16]
   24968:	ldr	ip, [r4, #20]
   2496c:	ldr	lr, [r4, #48]	; 0x30
   24970:	adds	r0, r0, #1
   24974:	str	r0, [r4, #16]
   24978:	adc	ip, ip, #0
   2497c:	add	r0, r2, #1
   24980:	str	ip, [r4, #20]
   24984:	str	r0, [r4, #40]	; 0x28
   24988:	ldrb	r0, [lr, r2]
   2498c:	b	24940 <__assert_fail@plt+0x11df8>
   24990:	cmp	sl, r5
   24994:	bcs	249c8 <__assert_fail@plt+0x11e80>
   24998:	ldr	r3, [sp, #4]
   2499c:	mov	r1, #10
   249a0:	mov	r2, #0
   249a4:	strb	r1, [fp]
   249a8:	str	r2, [r3]
   249ac:	mov	r3, #0
   249b0:	mov	r0, r6
   249b4:	strb	r3, [r5]
   249b8:	add	sp, sp, #12
   249bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249c0:	mov	r5, fp
   249c4:	b	249ac <__assert_fail@plt+0x11e64>
   249c8:	ldr	r3, [pc, #36]	; 249f4 <__assert_fail@plt+0x11eac>
   249cc:	ldr	r2, [pc, #36]	; 249f8 <__assert_fail@plt+0x11eb0>
   249d0:	ldr	r1, [pc, #36]	; 249fc <__assert_fail@plt+0x11eb4>
   249d4:	ldr	r0, [pc, #36]	; 24a00 <__assert_fail@plt+0x11eb8>
   249d8:	bl	12b48 <__assert_fail@plt>
   249dc:	ldr	r3, [pc, #16]	; 249f4 <__assert_fail@plt+0x11eac>
   249e0:	mov	r2, #2560	; 0xa00
   249e4:	ldr	r1, [pc, #16]	; 249fc <__assert_fail@plt+0x11eb4>
   249e8:	ldr	r0, [pc, #20]	; 24a04 <__assert_fail@plt+0x11ebc>
   249ec:	bl	12b48 <__assert_fail@plt>
   249f0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   249f4:	andeq	r9, r2, r0, lsl sp
   249f8:	andeq	r0, r0, r1, lsr #20
   249fc:	andeq	r9, r2, r4, lsr #27
   24a00:	muleq	r2, r0, sl
   24a04:	andeq	sl, r2, r8, ror #20
   24a08:	cmp	r2, #0
   24a0c:	push	{r4, r5, r6, r7, r8, lr}
   24a10:	mov	r4, r0
   24a14:	bne	24aec <__assert_fail@plt+0x11fa4>
   24a18:	cmp	r1, #0
   24a1c:	mov	r5, r1
   24a20:	popeq	{r4, r5, r6, r7, r8, pc}
   24a24:	ldr	r3, [r4, #32]
   24a28:	mov	r0, r4
   24a2c:	cmp	r3, #0
   24a30:	beq	24a8c <__assert_fail@plt+0x11f44>
   24a34:	bl	23338 <__assert_fail@plt+0x107f0>
   24a38:	sub	r5, r5, #1
   24a3c:	cmn	r0, #1
   24a40:	popeq	{r4, r5, r6, r7, r8, pc}
   24a44:	cmp	r5, #0
   24a48:	bne	24a7c <__assert_fail@plt+0x11f34>
   24a4c:	pop	{r4, r5, r6, r7, r8, pc}
   24a50:	ldrd	r2, [r4, #16]
   24a54:	cmp	ip, r5
   24a58:	movcs	ip, r5
   24a5c:	adds	r6, r2, ip
   24a60:	sub	r5, r5, ip
   24a64:	adc	r7, r3, #0
   24a68:	cmp	r5, #0
   24a6c:	add	r1, r1, ip
   24a70:	str	r1, [r4, #40]	; 0x28
   24a74:	strd	r6, [r4, #16]
   24a78:	popeq	{r4, r5, r6, r7, r8, pc}
   24a7c:	ldr	r3, [r4, #32]
   24a80:	mov	r0, r4
   24a84:	cmp	r3, #0
   24a88:	bne	24a34 <__assert_fail@plt+0x11eec>
   24a8c:	ldr	r1, [r4, #40]	; 0x28
   24a90:	ldr	r3, [r4, #44]	; 0x2c
   24a94:	cmp	r1, r3
   24a98:	sub	ip, r3, r1
   24a9c:	bcc	24a50 <__assert_fail@plt+0x11f08>
   24aa0:	b	24a34 <__assert_fail@plt+0x11eec>
   24aa4:	ldr	r2, [r4, #44]	; 0x2c
   24aa8:	ldr	r3, [r4, #40]	; 0x28
   24aac:	cmp	r3, r2
   24ab0:	sub	ip, r2, r3
   24ab4:	bcs	24adc <__assert_fail@plt+0x11f94>
   24ab8:	ldrd	r0, [r4, #16]
   24abc:	str	r2, [r4, #40]	; 0x28
   24ac0:	ldr	r3, [r4, #40]	; 0x28
   24ac4:	adds	r6, r0, ip
   24ac8:	adc	r7, r1, #0
   24acc:	cmp	r3, r2
   24ad0:	strd	r6, [r4, #16]
   24ad4:	sub	ip, r2, r3
   24ad8:	bcc	24ab8 <__assert_fail@plt+0x11f70>
   24adc:	mov	r0, r4
   24ae0:	bl	23338 <__assert_fail@plt+0x107f0>
   24ae4:	cmn	r0, #1
   24ae8:	popeq	{r4, r5, r6, r7, r8, pc}
   24aec:	ldr	r3, [r4, #32]
   24af0:	cmp	r3, #0
   24af4:	bne	24adc <__assert_fail@plt+0x11f94>
   24af8:	b	24aa4 <__assert_fail@plt+0x11f5c>
   24afc:	ldr	r3, [pc, #8]	; 24b0c <__assert_fail@plt+0x11fc4>
   24b00:	mov	r2, #1
   24b04:	str	r2, [r3]
   24b08:	bx	lr
   24b0c:			; <UNDEFINED> instruction: 0x0003c4b8
   24b10:	push	{r4, r5, r6, lr}
   24b14:	sub	sp, sp, #288	; 0x120
   24b18:	ldr	r4, [pc, #108]	; 24b8c <__assert_fail@plt+0x12044>
   24b1c:	cmp	r2, #0
   24b20:	mov	r6, r1
   24b24:	ldr	r3, [r4]
   24b28:	mov	r5, r0
   24b2c:	str	r3, [sp, #284]	; 0x11c
   24b30:	beq	24b4c <__assert_fail@plt+0x12004>
   24b34:	add	r2, sp, #4
   24b38:	mov	r1, #0
   24b3c:	bl	125c0 <sigaction@plt>
   24b40:	ldr	r3, [sp, #4]
   24b44:	cmp	r3, #1
   24b48:	beq	24b70 <__assert_fail@plt+0x12028>
   24b4c:	add	r0, sp, #148	; 0x94
   24b50:	str	r6, [sp, #144]	; 0x90
   24b54:	bl	12950 <sigemptyset@plt>
   24b58:	mov	r3, #0
   24b5c:	mov	r0, r5
   24b60:	add	r1, sp, #144	; 0x90
   24b64:	mov	r2, r3
   24b68:	str	r3, [sp, #276]	; 0x114
   24b6c:	bl	125c0 <sigaction@plt>
   24b70:	ldr	r2, [sp, #284]	; 0x11c
   24b74:	ldr	r3, [r4]
   24b78:	cmp	r2, r3
   24b7c:	bne	24b88 <__assert_fail@plt+0x12040>
   24b80:	add	sp, sp, #288	; 0x120
   24b84:	pop	{r4, r5, r6, pc}
   24b88:	bl	124e8 <__stack_chk_fail@plt>
   24b8c:	andeq	fp, r3, r0, lsl fp
   24b90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b94:	mov	r7, r0
   24b98:	ldr	r4, [pc, #392]	; 24d28 <__assert_fail@plt+0x121e0>
   24b9c:	sub	sp, sp, #12
   24ba0:	ldr	r3, [r4, #4]
   24ba4:	cmp	r3, #0
   24ba8:	bne	24d08 <__assert_fail@plt+0x121c0>
   24bac:	ldr	r3, [r4, #8]
   24bb0:	mov	r2, #1
   24bb4:	cmp	r3, #0
   24bb8:	str	r2, [r4, #4]
   24bbc:	beq	24bc4 <__assert_fail@plt+0x1207c>
   24bc0:	blx	r3
   24bc4:	mov	r2, #1
   24bc8:	ldr	r1, [pc, #348]	; 24d2c <__assert_fail@plt+0x121e4>
   24bcc:	mov	r0, #2
   24bd0:	bl	128b4 <write@plt>
   24bd4:	mov	r0, #0
   24bd8:	bl	1c4f0 <__assert_fail@plt+0x99a8>
   24bdc:	subs	r4, r0, #0
   24be0:	beq	24bf8 <__assert_fail@plt+0x120b0>
   24be4:	bl	12788 <strlen@plt>
   24be8:	mov	r1, r4
   24bec:	mov	r2, r0
   24bf0:	mov	r0, #2
   24bf4:	bl	128b4 <write@plt>
   24bf8:	mov	r2, #9
   24bfc:	ldr	r1, [pc, #300]	; 24d30 <__assert_fail@plt+0x121e8>
   24c00:	mov	r0, #2
   24c04:	bl	128b4 <write@plt>
   24c08:	cmp	r7, #64	; 0x40
   24c0c:	bhi	24ca4 <__assert_fail@plt+0x1215c>
   24c10:	ldr	r3, [pc, #284]	; 24d34 <__assert_fail@plt+0x121ec>
   24c14:	ldr	r1, [r3, r7, lsl #2]
   24c18:	cmp	r1, #0
   24c1c:	bne	24d10 <__assert_fail@plt+0x121c8>
   24c20:	ldr	r4, [pc, #272]	; 24d38 <__assert_fail@plt+0x121f0>
   24c24:	ldr	r9, [pc, #272]	; 24d3c <__assert_fail@plt+0x121f4>
   24c28:	ldr	r8, [pc, #272]	; 24d40 <__assert_fail@plt+0x121f8>
   24c2c:	mov	r5, r1
   24c30:	mov	sl, r7
   24c34:	mov	r6, #5
   24c38:	cmp	r4, sl
   24c3c:	and	r3, r5, #1
   24c40:	mov	r1, r4
   24c44:	mov	r0, sl
   24c48:	ble	24ce4 <__assert_fail@plt+0x1219c>
   24c4c:	cmp	r4, #1
   24c50:	orreq	r3, r3, #1
   24c54:	cmp	r3, #0
   24c58:	moveq	r5, r3
   24c5c:	beq	24c8c <__assert_fail@plt+0x12144>
   24c60:	bl	2773c <__assert_fail@plt+0x14bf4>
   24c64:	mov	r2, #1
   24c68:	mov	r1, r9
   24c6c:	cmp	r0, #0
   24c70:	mov	r0, #2
   24c74:	bne	24c8c <__assert_fail@plt+0x12144>
   24c78:	bl	128b4 <write@plt>
   24c7c:	mov	r0, sl
   24c80:	mov	r1, r4
   24c84:	bl	2795c <__assert_fail@plt+0x14e14>
   24c88:	mov	sl, r1
   24c8c:	smull	r2, r3, r8, r4
   24c90:	subs	r6, r6, #1
   24c94:	asr	r4, r4, #31
   24c98:	rsb	r4, r4, r3, asr #2
   24c9c:	bne	24c38 <__assert_fail@plt+0x120f0>
   24ca0:	b	24cb4 <__assert_fail@plt+0x1216c>
   24ca4:	ldr	r1, [pc, #152]	; 24d44 <__assert_fail@plt+0x121fc>
   24ca8:	mov	r2, #1
   24cac:	mov	r0, #2
   24cb0:	bl	128b4 <write@plt>
   24cb4:	mov	r2, #20
   24cb8:	ldr	r1, [pc, #136]	; 24d48 <__assert_fail@plt+0x12200>
   24cbc:	mov	r0, #2
   24cc0:	bl	128b4 <write@plt>
   24cc4:	mov	r2, #0
   24cc8:	mov	r0, r7
   24ccc:	mov	r1, r2
   24cd0:	bl	24b10 <__assert_fail@plt+0x11fc8>
   24cd4:	mov	r0, r7
   24cd8:	add	sp, sp, #12
   24cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ce0:	b	12320 <raise@plt>
   24ce4:	bl	2773c <__assert_fail@plt+0x14bf4>
   24ce8:	mov	r2, #1
   24cec:	mov	fp, r0
   24cf0:	add	r1, r9, r0
   24cf4:	mov	r0, #2
   24cf8:	bl	128b4 <write@plt>
   24cfc:	cmp	fp, #0
   24d00:	movne	r5, #1
   24d04:	b	24c7c <__assert_fail@plt+0x12134>
   24d08:	bl	12320 <raise@plt>
   24d0c:	b	24bac <__assert_fail@plt+0x12064>
   24d10:	mov	r0, r1
   24d14:	str	r1, [sp, #4]
   24d18:	bl	12788 <strlen@plt>
   24d1c:	ldr	r1, [sp, #4]
   24d20:	mov	r2, r0
   24d24:	b	24cac <__assert_fail@plt+0x12164>
   24d28:			; <UNDEFINED> instruction: 0x0003c4b8
   24d2c:	andeq	sl, r2, ip, lsr #4
   24d30:			; <UNDEFINED> instruction: 0x0002aab0
   24d34:	andeq	fp, r3, r4, lsl fp
   24d38:	andeq	r2, r0, r0, lsl r7
   24d3c:			; <UNDEFINED> instruction: 0x0002aabc
   24d40:	strbtvs	r6, [r6], -r7, ror #12
   24d44:	andeq	r9, r2, r8, lsl #23
   24d48:	andeq	sl, r2, r8, asr #21
   24d4c:	push	{r4, lr}
   24d50:	subs	r4, r0, #0
   24d54:	bne	24dd8 <__assert_fail@plt+0x12290>
   24d58:	ldr	ip, [pc, #140]	; 24dec <__assert_fail@plt+0x122a4>
   24d5c:	mov	r3, r1
   24d60:	mov	r2, #1
   24d64:	ldr	r1, [pc, #132]	; 24df0 <__assert_fail@plt+0x122a8>
   24d68:	mov	r0, #2
   24d6c:	str	r3, [ip, #8]
   24d70:	bl	24b10 <__assert_fail@plt+0x11fc8>
   24d74:	mov	r2, #1
   24d78:	mov	r0, r2
   24d7c:	ldr	r1, [pc, #108]	; 24df0 <__assert_fail@plt+0x122a8>
   24d80:	bl	24b10 <__assert_fail@plt+0x11fc8>
   24d84:	mov	r2, #1
   24d88:	ldr	r1, [pc, #96]	; 24df0 <__assert_fail@plt+0x122a8>
   24d8c:	mov	r0, #15
   24d90:	bl	24b10 <__assert_fail@plt+0x11fc8>
   24d94:	mov	r2, #1
   24d98:	ldr	r1, [pc, #80]	; 24df0 <__assert_fail@plt+0x122a8>
   24d9c:	mov	r0, #3
   24da0:	bl	24b10 <__assert_fail@plt+0x11fc8>
   24da4:	mov	r2, #1
   24da8:	ldr	r1, [pc, #64]	; 24df0 <__assert_fail@plt+0x122a8>
   24dac:	mov	r0, #11
   24db0:	bl	24b10 <__assert_fail@plt+0x11fc8>
   24db4:	mov	r2, r4
   24db8:	ldr	r1, [pc, #52]	; 24df4 <__assert_fail@plt+0x122ac>
   24dbc:	mov	r0, #10
   24dc0:	bl	24b10 <__assert_fail@plt+0x11fc8>
   24dc4:	mov	r2, r4
   24dc8:	mov	r1, #1
   24dcc:	mov	r0, #13
   24dd0:	pop	{r4, lr}
   24dd4:	b	24b10 <__assert_fail@plt+0x11fc8>
   24dd8:	ldr	r3, [pc, #24]	; 24df8 <__assert_fail@plt+0x122b0>
   24ddc:	mov	r2, #169	; 0xa9
   24de0:	ldr	r1, [pc, #20]	; 24dfc <__assert_fail@plt+0x122b4>
   24de4:	ldr	r0, [pc, #20]	; 24e00 <__assert_fail@plt+0x122b8>
   24de8:	bl	12b48 <__assert_fail@plt>
   24dec:			; <UNDEFINED> instruction: 0x0003c4b8
   24df0:	muleq	r2, r0, fp
   24df4:	strdeq	r4, [r2], -ip
   24df8:	muleq	r2, ip, sl
   24dfc:	andeq	sl, r2, r0, ror #21
   24e00:	strdeq	sl, [r2], -r8
   24e04:	push	{r4, r5, r6, lr}
   24e08:	sub	sp, sp, #136	; 0x88
   24e0c:	ldr	r4, [pc, #88]	; 24e6c <__assert_fail@plt+0x12324>
   24e10:	ldr	r5, [pc, #88]	; 24e70 <__assert_fail@plt+0x12328>
   24e14:	ldr	r6, [r4, #12]
   24e18:	ldr	r3, [r5]
   24e1c:	cmp	r6, #0
   24e20:	str	r3, [sp, #132]	; 0x84
   24e24:	bne	24e60 <__assert_fail@plt+0x12318>
   24e28:	add	r0, sp, #4
   24e2c:	bl	127f4 <sigfillset@plt>
   24e30:	add	r1, sp, #4
   24e34:	add	r2, r4, #16
   24e38:	mov	r0, r6
   24e3c:	bl	12410 <sigprocmask@plt>
   24e40:	ldr	r1, [sp, #132]	; 0x84
   24e44:	ldr	r2, [r5]
   24e48:	mov	r3, #1
   24e4c:	cmp	r1, r2
   24e50:	str	r3, [r4, #12]
   24e54:	bne	24e68 <__assert_fail@plt+0x12320>
   24e58:	add	sp, sp, #136	; 0x88
   24e5c:	pop	{r4, r5, r6, pc}
   24e60:	ldr	r0, [pc, #12]	; 24e74 <__assert_fail@plt+0x1232c>
   24e64:	bl	1c84c <__assert_fail@plt+0x9d04>
   24e68:	bl	124e8 <__stack_chk_fail@plt>
   24e6c:			; <UNDEFINED> instruction: 0x0003c4b8
   24e70:	andeq	fp, r3, r0, lsl fp
   24e74:	andeq	sl, r2, r0, lsl #22
   24e78:	push	{r4, lr}
   24e7c:	ldr	r4, [pc, #44]	; 24eb0 <__assert_fail@plt+0x12368>
   24e80:	ldr	r3, [r4, #12]
   24e84:	cmp	r3, #0
   24e88:	beq	24ea8 <__assert_fail@plt+0x12360>
   24e8c:	mov	r2, #0
   24e90:	add	r1, r4, #16
   24e94:	mov	r0, #2
   24e98:	bl	12410 <sigprocmask@plt>
   24e9c:	mov	r3, #0
   24ea0:	str	r3, [r4, #12]
   24ea4:	pop	{r4, pc}
   24ea8:	ldr	r0, [pc, #4]	; 24eb4 <__assert_fail@plt+0x1236c>
   24eac:	bl	1c84c <__assert_fail@plt+0x9d04>
   24eb0:			; <UNDEFINED> instruction: 0x0003c4b8
   24eb4:	andeq	sl, r2, r0, lsr #22
   24eb8:	bx	lr
   24ebc:	push	{r4, r5, r6, r7, r8, lr}
   24ec0:	add	r4, r0, #4096	; 0x1000
   24ec4:	ldr	r6, [pc, #268]	; 24fd8 <__assert_fail@plt+0x12490>
   24ec8:	sub	sp, sp, #8
   24ecc:	mov	r7, r1
   24ed0:	ldr	r3, [r6]
   24ed4:	mov	ip, #0
   24ed8:	str	r3, [sp, #4]
   24edc:	mov	r5, r0
   24ee0:	ldm	r4, {r1, r2}
   24ee4:	mov	r0, r7
   24ee8:	mov	r3, sp
   24eec:	str	ip, [sp]
   24ef0:	bl	12350 <gpgrt_write@plt>
   24ef4:	cmp	r0, #0
   24ef8:	bne	24f84 <__assert_fail@plt+0x1243c>
   24efc:	mov	r8, #0
   24f00:	ldr	r3, [r4, #4]
   24f04:	ldr	r1, [sp]
   24f08:	cmp	r3, r1
   24f0c:	bcc	24fac <__assert_fail@plt+0x12464>
   24f10:	ldr	r2, [r4]
   24f14:	sub	r3, r3, r1
   24f18:	add	r2, r2, r1
   24f1c:	sub	r5, r2, r5
   24f20:	cmp	r5, #4096	; 0x1000
   24f24:	strd	r2, [r4]
   24f28:	bhi	24fc4 <__assert_fail@plt+0x1247c>
   24f2c:	cmp	r8, #0
   24f30:	beq	24f50 <__assert_fail@plt+0x12408>
   24f34:	ldr	r2, [sp, #4]
   24f38:	ldr	r3, [r6]
   24f3c:	mov	r0, r8
   24f40:	cmp	r2, r3
   24f44:	bne	24fc0 <__assert_fail@plt+0x12478>
   24f48:	add	sp, sp, #8
   24f4c:	pop	{r4, r5, r6, r7, r8, pc}
   24f50:	mov	r0, r7
   24f54:	bl	1253c <gpgrt_fflush@plt>
   24f58:	cmp	r0, #0
   24f5c:	beq	24f34 <__assert_fail@plt+0x123ec>
   24f60:	ldr	r3, [pc, #116]	; 24fdc <__assert_fail@plt+0x12494>
   24f64:	ldr	r4, [r3]
   24f68:	bl	127c4 <gpg_err_code_from_syserror@plt>
   24f6c:	cmp	r0, #0
   24f70:	lslne	r8, r4, #24
   24f74:	andne	r8, r8, #2130706432	; 0x7f000000
   24f78:	uxthne	r0, r0
   24f7c:	orrne	r8, r8, r0
   24f80:	b	24f34 <__assert_fail@plt+0x123ec>
   24f84:	ldr	r3, [pc, #80]	; 24fdc <__assert_fail@plt+0x12494>
   24f88:	ldr	r8, [r3]
   24f8c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   24f90:	cmp	r0, #0
   24f94:	beq	24efc <__assert_fail@plt+0x123b4>
   24f98:	lsl	r8, r8, #24
   24f9c:	and	r8, r8, #2130706432	; 0x7f000000
   24fa0:	uxth	r0, r0
   24fa4:	orr	r8, r8, r0
   24fa8:	b	24f00 <__assert_fail@plt+0x123b8>
   24fac:	ldr	r3, [pc, #44]	; 24fe0 <__assert_fail@plt+0x12498>
   24fb0:	ldr	r2, [pc, #44]	; 24fe4 <__assert_fail@plt+0x1249c>
   24fb4:	ldr	r1, [pc, #44]	; 24fe8 <__assert_fail@plt+0x124a0>
   24fb8:	ldr	r0, [pc, #44]	; 24fec <__assert_fail@plt+0x124a4>
   24fbc:	bl	1cacc <__assert_fail@plt+0x9f84>
   24fc0:	bl	124e8 <__stack_chk_fail@plt>
   24fc4:	ldr	r3, [pc, #20]	; 24fe0 <__assert_fail@plt+0x12498>
   24fc8:	ldr	r2, [pc, #32]	; 24ff0 <__assert_fail@plt+0x124a8>
   24fcc:	ldr	r1, [pc, #20]	; 24fe8 <__assert_fail@plt+0x124a0>
   24fd0:	ldr	r0, [pc, #28]	; 24ff4 <__assert_fail@plt+0x124ac>
   24fd4:	bl	1cacc <__assert_fail@plt+0x9f84>
   24fd8:	andeq	fp, r3, r0, lsl fp
   24fdc:	muleq	r3, r0, r3
   24fe0:	andeq	sl, r2, ip, lsr fp
   24fe4:	andeq	r0, r0, lr, lsl r1
   24fe8:	muleq	r2, r4, fp
   24fec:	andeq	sl, r2, ip, lsr #23
   24ff0:	andeq	r0, r0, r1, lsr #2
   24ff4:	andeq	sl, r2, r4, asr #23
   24ff8:	push	{r4, r5, r6, r7, r8, lr}
   24ffc:	add	r4, r0, #4096	; 0x1000
   25000:	ldr	r6, [pc, #484]	; 251ec <__assert_fail@plt+0x126a4>
   25004:	ldr	r3, [r4, #4]
   25008:	sub	sp, sp, #8
   2500c:	ldr	lr, [r6]
   25010:	mov	ip, #0
   25014:	cmp	r3, #0
   25018:	mov	r5, r0
   2501c:	mov	r7, r2
   25020:	str	lr, [sp, #4]
   25024:	str	ip, [sp]
   25028:	beq	250d0 <__assert_fail@plt+0x12588>
   2502c:	mov	r2, #0
   25030:	cmp	r7, #0
   25034:	str	r2, [sp]
   25038:	ldr	r1, [r4]
   2503c:	beq	250a8 <__assert_fail@plt+0x12560>
   25040:	mov	r2, r3
   25044:	mov	r0, r7
   25048:	mov	r3, sp
   2504c:	bl	12350 <gpgrt_write@plt>
   25050:	cmp	r0, #0
   25054:	bne	25184 <__assert_fail@plt+0x1263c>
   25058:	mov	r0, #0
   2505c:	ldr	r2, [r4, #4]
   25060:	ldr	r1, [sp]
   25064:	cmp	r2, r1
   25068:	bcc	251c4 <__assert_fail@plt+0x1267c>
   2506c:	ldr	r3, [r4]
   25070:	sub	r2, r2, r1
   25074:	add	r3, r3, r1
   25078:	sub	r5, r3, r5
   2507c:	cmp	r5, #4096	; 0x1000
   25080:	str	r2, [r4, #4]
   25084:	str	r3, [r4]
   25088:	bhi	251b0 <__assert_fail@plt+0x12668>
   2508c:	cmp	r0, #0
   25090:	beq	25108 <__assert_fail@plt+0x125c0>
   25094:	ldr	r3, [pc, #340]	; 251f0 <__assert_fail@plt+0x126a8>
   25098:	uxth	r2, r0
   2509c:	cmp	r2, r3
   250a0:	bne	250b8 <__assert_fail@plt+0x12570>
   250a4:	b	250b4 <__assert_fail@plt+0x1256c>
   250a8:	sub	r1, r1, r5
   250ac:	cmp	r1, #4096	; 0x1000
   250b0:	bhi	251b0 <__assert_fail@plt+0x12668>
   250b4:	mov	r0, #0
   250b8:	ldr	r2, [sp, #4]
   250bc:	ldr	r3, [r6]
   250c0:	cmp	r2, r3
   250c4:	bne	251ac <__assert_fail@plt+0x12664>
   250c8:	add	sp, sp, #8
   250cc:	pop	{r4, r5, r6, r7, r8, pc}
   250d0:	mov	r3, r4
   250d4:	mov	r0, r1
   250d8:	str	r5, [r3], #4
   250dc:	mov	r2, #4096	; 0x1000
   250e0:	mov	r1, r5
   250e4:	bl	12488 <gpgrt_read@plt>
   250e8:	cmp	r0, #0
   250ec:	bne	25150 <__assert_fail@plt+0x12608>
   250f0:	ldr	r3, [r4, #4]
   250f4:	cmp	r3, #4096	; 0x1000
   250f8:	bhi	251d8 <__assert_fail@plt+0x12690>
   250fc:	cmp	r3, #0
   25100:	beq	250b4 <__assert_fail@plt+0x1256c>
   25104:	b	2502c <__assert_fail@plt+0x124e4>
   25108:	mov	r0, r7
   2510c:	bl	1253c <gpgrt_fflush@plt>
   25110:	cmp	r0, #0
   25114:	beq	250b4 <__assert_fail@plt+0x1256c>
   25118:	bl	1280c <__errno_location@plt>
   2511c:	ldr	r3, [r0]
   25120:	cmp	r3, #11
   25124:	beq	250b4 <__assert_fail@plt+0x1256c>
   25128:	ldr	r3, [pc, #196]	; 251f4 <__assert_fail@plt+0x126ac>
   2512c:	ldr	r4, [r3]
   25130:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25134:	cmp	r0, #0
   25138:	beq	250b4 <__assert_fail@plt+0x1256c>
   2513c:	lsl	r4, r4, #24
   25140:	and	r4, r4, #2130706432	; 0x7f000000
   25144:	uxth	r0, r0
   25148:	orr	r0, r4, r0
   2514c:	b	250b8 <__assert_fail@plt+0x12570>
   25150:	ldr	r3, [pc, #156]	; 251f4 <__assert_fail@plt+0x126ac>
   25154:	ldr	r4, [r3]
   25158:	bl	127c4 <gpg_err_code_from_syserror@plt>
   2515c:	cmp	r0, #0
   25160:	beq	250b4 <__assert_fail@plt+0x1256c>
   25164:	ldr	r3, [pc, #132]	; 251f0 <__assert_fail@plt+0x126a8>
   25168:	uxth	r0, r0
   2516c:	lsl	r4, r4, #24
   25170:	and	r4, r4, #2130706432	; 0x7f000000
   25174:	cmp	r0, r3
   25178:	orr	r0, r4, r0
   2517c:	beq	250b4 <__assert_fail@plt+0x1256c>
   25180:	b	250b8 <__assert_fail@plt+0x12570>
   25184:	ldr	r3, [pc, #104]	; 251f4 <__assert_fail@plt+0x126ac>
   25188:	ldr	r8, [r3]
   2518c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25190:	cmp	r0, #0
   25194:	beq	25058 <__assert_fail@plt+0x12510>
   25198:	lsl	r8, r8, #24
   2519c:	and	r8, r8, #2130706432	; 0x7f000000
   251a0:	uxth	r0, r0
   251a4:	orr	r0, r8, r0
   251a8:	b	2505c <__assert_fail@plt+0x12514>
   251ac:	bl	124e8 <__stack_chk_fail@plt>
   251b0:	ldr	r3, [pc, #64]	; 251f8 <__assert_fail@plt+0x126b0>
   251b4:	ldr	r2, [pc, #64]	; 251fc <__assert_fail@plt+0x126b4>
   251b8:	ldr	r1, [pc, #64]	; 25200 <__assert_fail@plt+0x126b8>
   251bc:	ldr	r0, [pc, #64]	; 25204 <__assert_fail@plt+0x126bc>
   251c0:	bl	1cacc <__assert_fail@plt+0x9f84>
   251c4:	ldr	r3, [pc, #44]	; 251f8 <__assert_fail@plt+0x126b0>
   251c8:	mov	r2, #256	; 0x100
   251cc:	ldr	r1, [pc, #44]	; 25200 <__assert_fail@plt+0x126b8>
   251d0:	ldr	r0, [pc, #48]	; 25208 <__assert_fail@plt+0x126c0>
   251d4:	bl	1cacc <__assert_fail@plt+0x9f84>
   251d8:	ldr	r3, [pc, #24]	; 251f8 <__assert_fail@plt+0x126b0>
   251dc:	mov	r2, #244	; 0xf4
   251e0:	ldr	r1, [pc, #24]	; 25200 <__assert_fail@plt+0x126b8>
   251e4:	ldr	r0, [pc, #32]	; 2520c <__assert_fail@plt+0x126c4>
   251e8:	bl	1cacc <__assert_fail@plt+0x9f84>
   251ec:	andeq	fp, r3, r0, lsl fp
   251f0:	andeq	r8, r0, r6
   251f4:	muleq	r3, r0, r3
   251f8:	andeq	sl, r2, r0, asr fp
   251fc:	andeq	r0, r0, r3, lsl #2
   25200:	muleq	r2, r4, fp
   25204:	andeq	sl, r2, r4, asr #23
   25208:	andeq	sl, r2, ip, lsr #23
   2520c:	strdeq	sl, [r2], -r0
   25210:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25214:	subs	r6, r1, #0
   25218:	mov	r4, r0
   2521c:	beq	25398 <__assert_fail@plt+0x12850>
   25220:	ldr	r8, [pc, #712]	; 254f0 <__assert_fail@plt+0x129a8>
   25224:	mov	r9, #0
   25228:	ldr	r0, [r6]
   2522c:	bl	128c0 <gpgrt_fgetc@plt>
   25230:	cmn	r0, #1
   25234:	mov	r5, r0
   25238:	beq	252b0 <__assert_fail@plt+0x12768>
   2523c:	cmp	r0, #10
   25240:	beq	252d0 <__assert_fail@plt+0x12788>
   25244:	ldr	r0, [r4, #20]
   25248:	ldr	r3, [r4, #16]
   2524c:	sub	r2, r0, #1
   25250:	cmp	r3, r2
   25254:	bcs	2526c <__assert_fail@plt+0x12724>
   25258:	ldr	fp, [r4, #24]
   2525c:	add	r2, r3, #1
   25260:	str	r2, [r4, #16]
   25264:	strb	r5, [fp, r3]
   25268:	b	25228 <__assert_fail@plt+0x126e0>
   2526c:	ldr	r1, [r4, #4]
   25270:	cmp	r1, #0
   25274:	beq	252e0 <__assert_fail@plt+0x12798>
   25278:	add	sl, r0, #256	; 0x100
   2527c:	mov	r0, sl
   25280:	bl	12338 <gcry_malloc@plt>
   25284:	subs	fp, r0, #0
   25288:	beq	25348 <__assert_fail@plt+0x12800>
   2528c:	ldr	r7, [r4, #24]
   25290:	ldr	r2, [r4, #16]
   25294:	mov	r1, r7
   25298:	bl	1247c <memcpy@plt>
   2529c:	mov	r0, r7
   252a0:	bl	124a0 <gcry_free@plt>
   252a4:	strd	sl, [r4, #20]
   252a8:	ldr	r3, [r4, #16]
   252ac:	b	2525c <__assert_fail@plt+0x12714>
   252b0:	ldr	r0, [r6]
   252b4:	bl	125d8 <gpgrt_feof@plt>
   252b8:	cmp	r0, #0
   252bc:	beq	252fc <__assert_fail@plt+0x127b4>
   252c0:	ldrb	r3, [r6, #6]
   252c4:	orr	r3, r3, #128	; 0x80
   252c8:	strb	r3, [r6, #6]
   252cc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252d0:	mov	r1, #0
   252d4:	mov	r0, r4
   252d8:	bl	25210 <__assert_fail@plt+0x126c8>
   252dc:	b	25228 <__assert_fail@plt+0x126e0>
   252e0:	mov	r0, r4
   252e4:	bl	25210 <__assert_fail@plt+0x126c8>
   252e8:	mov	r2, #1
   252ec:	ldr	fp, [r4, #24]
   252f0:	ldr	r3, [r4, #16]
   252f4:	str	r2, [r4, #12]
   252f8:	b	2525c <__assert_fail@plt+0x12714>
   252fc:	ldr	r0, [r6]
   25300:	bl	12518 <gpgrt_ferror@plt>
   25304:	cmp	r0, #0
   25308:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2530c:	ldr	r3, [pc, #476]	; 254f0 <__assert_fail@plt+0x129a8>
   25310:	ldr	r5, [r3]
   25314:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25318:	ldr	r4, [r4]
   2531c:	cmp	r0, #0
   25320:	lslne	r3, r5, #24
   25324:	andne	r3, r3, #2130706432	; 0x7f000000
   25328:	uxthne	r0, r0
   2532c:	orrne	r0, r3, r0
   25330:	bl	129d4 <gpg_strerror@plt>
   25334:	mov	r1, r4
   25338:	mov	r2, r0
   2533c:	ldr	r0, [pc, #432]	; 254f4 <__assert_fail@plt+0x129ac>
   25340:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25344:	b	252c0 <__assert_fail@plt+0x12778>
   25348:	ldr	sl, [r8]
   2534c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25350:	cmp	r0, #0
   25354:	lslne	sl, sl, #24
   25358:	andne	sl, sl, #2130706432	; 0x7f000000
   2535c:	uxthne	r0, r0
   25360:	orrne	r0, sl, r0
   25364:	bl	129d4 <gpg_strerror@plt>
   25368:	mov	r1, r0
   2536c:	ldr	r0, [pc, #388]	; 254f8 <__assert_fail@plt+0x129b0>
   25370:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25374:	str	r9, [r4, #4]
   25378:	mov	r1, #0
   2537c:	mov	r0, r4
   25380:	bl	25210 <__assert_fail@plt+0x126c8>
   25384:	mov	r3, #1
   25388:	str	r3, [r4, #12]
   2538c:	ldr	fp, [r4, #24]
   25390:	ldr	r3, [r4, #16]
   25394:	b	2525c <__assert_fail@plt+0x12714>
   25398:	ldr	r3, [r0, #16]
   2539c:	cmp	r3, #0
   253a0:	beq	25448 <__assert_fail@plt+0x12900>
   253a4:	ldr	r2, [r0, #24]
   253a8:	mov	r1, #47	; 0x2f
   253ac:	strb	r6, [r2, r3]
   253b0:	ldr	r5, [r0]
   253b4:	str	r6, [r0, #16]
   253b8:	mov	r0, r5
   253bc:	bl	12980 <strrchr@plt>
   253c0:	cmp	r5, r0
   253c4:	cmpne	r0, #0
   253c8:	bne	254a8 <__assert_fail@plt+0x12960>
   253cc:	ldr	r7, [r4, #4]
   253d0:	ldr	r6, [r4, #24]
   253d4:	cmp	r7, #0
   253d8:	beq	25454 <__assert_fail@plt+0x1290c>
   253dc:	mov	r2, #9
   253e0:	ldr	r1, [pc, #276]	; 254fc <__assert_fail@plt+0x129b4>
   253e4:	mov	r0, r6
   253e8:	bl	12ac4 <strncmp@plt>
   253ec:	subs	r8, r0, #0
   253f0:	bne	25454 <__assert_fail@plt+0x1290c>
   253f4:	ldrb	r3, [r6, #9]
   253f8:	sub	r3, r3, #65	; 0x41
   253fc:	cmp	r3, #25
   25400:	bhi	25454 <__assert_fail@plt+0x1290c>
   25404:	add	r5, r6, #9
   25408:	mov	r0, r5
   2540c:	mov	r1, #32
   25410:	bl	127ac <strchr@plt>
   25414:	cmp	r0, #0
   25418:	beq	254d0 <__assert_fail@plt+0x12988>
   2541c:	mov	r6, r0
   25420:	strb	r8, [r6], #1
   25424:	mov	r0, r6
   25428:	bl	16fd4 <__assert_fail@plt+0x448c>
   2542c:	ldr	r5, [r4, #24]
   25430:	ldr	r7, [r4, #4]
   25434:	add	r5, r5, #9
   25438:	mov	r2, r6
   2543c:	mov	r1, r5
   25440:	ldr	r0, [r4, #8]
   25444:	blx	r7
   25448:	mov	r3, #0
   2544c:	str	r3, [r4, #12]
   25450:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25454:	ldr	r3, [r4, #12]
   25458:	cmp	r3, #0
   2545c:	bne	254b8 <__assert_fail@plt+0x12970>
   25460:	mov	r0, r5
   25464:	bl	12788 <strlen@plt>
   25468:	mov	r1, r5
   2546c:	mov	r2, r0
   25470:	mov	r7, r0
   25474:	mov	r0, r6
   25478:	bl	12ac4 <strncmp@plt>
   2547c:	cmp	r0, #0
   25480:	bne	254a0 <__assert_fail@plt+0x12958>
   25484:	mov	r0, r6
   25488:	bl	12788 <strlen@plt>
   2548c:	cmp	r7, r0
   25490:	bcs	254a0 <__assert_fail@plt+0x12958>
   25494:	ldrb	r3, [r6, r7]
   25498:	cmp	r3, #58	; 0x3a
   2549c:	beq	254e0 <__assert_fail@plt+0x12998>
   254a0:	mov	r2, #58	; 0x3a
   254a4:	b	254bc <__assert_fail@plt+0x12974>
   254a8:	ldrb	r3, [r0, #1]
   254ac:	cmp	r3, #0
   254b0:	addne	r5, r0, #1
   254b4:	b	253cc <__assert_fail@plt+0x12884>
   254b8:	mov	r2, #43	; 0x2b
   254bc:	mov	r3, r6
   254c0:	mov	r1, r5
   254c4:	ldr	r0, [pc, #52]	; 25500 <__assert_fail@plt+0x129b8>
   254c8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   254cc:	b	25448 <__assert_fail@plt+0x12900>
   254d0:	mov	r0, r6
   254d4:	bl	12788 <strlen@plt>
   254d8:	add	r6, r6, r0
   254dc:	b	25438 <__assert_fail@plt+0x128f0>
   254e0:	mov	r1, r6
   254e4:	ldr	r0, [pc, #24]	; 25504 <__assert_fail@plt+0x129bc>
   254e8:	bl	1c6e0 <__assert_fail@plt+0x9b98>
   254ec:	b	25448 <__assert_fail@plt+0x12900>
   254f0:	muleq	r3, r0, r3
   254f4:	andeq	sl, r2, r8, lsr #24
   254f8:	andeq	sl, r2, ip, asr #24
   254fc:	andeq	sl, r2, r0, lsl ip
   25500:	andeq	sl, r2, ip, lsl ip
   25504:	andeq	r7, r2, r0, asr #31
   25508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2550c:	sub	sp, sp, #172	; 0xac
   25510:	ldr	ip, [pc, #1804]	; 25c24 <__assert_fail@plt+0x130dc>
   25514:	mov	r7, r3
   25518:	ldr	r3, [sp, #208]	; 0xd0
   2551c:	str	r0, [sp, #24]
   25520:	str	r1, [sp, #32]
   25524:	ldm	ip, {r0, r1}
   25528:	ldr	ip, [pc, #1784]	; 25c28 <__assert_fail@plt+0x130e0>
   2552c:	str	r3, [sp, #28]
   25530:	ldr	r3, [sp, #212]	; 0xd4
   25534:	add	r9, sp, #104	; 0x68
   25538:	mov	r4, #0
   2553c:	ldr	ip, [ip]
   25540:	str	r3, [sp, #36]	; 0x24
   25544:	ldr	r3, [sp, #216]	; 0xd8
   25548:	stm	r9, {r0, r1}
   2554c:	mov	sl, r2
   25550:	mov	r1, r4
   25554:	mov	r2, #32
   25558:	mvn	fp, #0
   2555c:	add	r0, sp, #112	; 0x70
   25560:	str	ip, [sp, #164]	; 0xa4
   25564:	str	r3, [sp, #40]	; 0x28
   25568:	str	r4, [sp, #52]	; 0x34
   2556c:	str	r4, [sp, #56]	; 0x38
   25570:	str	r4, [sp, #60]	; 0x3c
   25574:	str	r4, [sp, #64]	; 0x40
   25578:	str	fp, [sp, #48]	; 0x30
   2557c:	bl	12854 <memset@plt>
   25580:	ldr	r0, [pc, #1700]	; 25c2c <__assert_fail@plt+0x130e4>
   25584:	str	r4, [sp, #68]	; 0x44
   25588:	str	r4, [sp, #72]	; 0x48
   2558c:	str	r4, [sp, #76]	; 0x4c
   25590:	str	r4, [sp, #80]	; 0x50
   25594:	str	r4, [sp, #84]	; 0x54
   25598:	str	r4, [sp, #88]	; 0x58
   2559c:	str	r4, [sp, #92]	; 0x5c
   255a0:	bl	12338 <gcry_malloc@plt>
   255a4:	subs	r6, r0, #0
   255a8:	beq	25a94 <__assert_fail@plt+0x12f4c>
   255ac:	add	r3, r6, #4096	; 0x1000
   255b0:	ldr	r0, [pc, #1652]	; 25c2c <__assert_fail@plt+0x130e4>
   255b4:	str	r6, [r3]
   255b8:	str	r4, [r3, #4]
   255bc:	bl	12338 <gcry_malloc@plt>
   255c0:	subs	r8, r0, #0
   255c4:	beq	25ad4 <__assert_fail@plt+0x12f8c>
   255c8:	add	r3, r8, #4096	; 0x1000
   255cc:	ldr	r0, [pc, #1624]	; 25c2c <__assert_fail@plt+0x130e4>
   255d0:	str	r8, [r3]
   255d4:	str	r4, [r3, #4]
   255d8:	bl	12338 <gcry_malloc@plt>
   255dc:	subs	r5, r0, #0
   255e0:	beq	25a64 <__assert_fail@plt+0x12f1c>
   255e4:	ldr	r2, [sp, #24]
   255e8:	add	r3, r5, #4096	; 0x1000
   255ec:	str	r2, [sp, #68]	; 0x44
   255f0:	ldr	r2, [sp, #36]	; 0x24
   255f4:	str	r5, [r3]
   255f8:	str	r4, [r3, #4]
   255fc:	str	r2, [sp, #72]	; 0x48
   25600:	mov	r3, #256	; 0x100
   25604:	ldr	r2, [sp, #40]	; 0x28
   25608:	mov	r0, r3
   2560c:	str	r2, [sp, #76]	; 0x4c
   25610:	str	r3, [sp, #88]	; 0x58
   25614:	bl	12338 <gcry_malloc@plt>
   25618:	cmp	r0, #0
   2561c:	str	r0, [sp, #92]	; 0x5c
   25620:	beq	25a64 <__assert_fail@plt+0x12f1c>
   25624:	cmp	r7, #0
   25628:	beq	256c8 <__assert_fail@plt+0x12b80>
   2562c:	mov	r0, r9
   25630:	mov	r2, #1
   25634:	add	r1, sp, #56	; 0x38
   25638:	bl	26524 <__assert_fail@plt+0x139dc>
   2563c:	subs	r4, r0, #0
   25640:	bne	25950 <__assert_fail@plt+0x12e08>
   25644:	ldr	ip, [sp, #104]	; 0x68
   25648:	add	r0, sp, #144	; 0x90
   2564c:	mov	r3, ip
   25650:	ldr	r2, [pc, #1496]	; 25c30 <__assert_fail@plt+0x130e8>
   25654:	mov	r1, #20
   25658:	str	fp, [sp, #100]	; 0x64
   2565c:	str	ip, [sp, #96]	; 0x60
   25660:	bl	12920 <gpgrt_snprintf@plt>
   25664:	ldr	r3, [sp, #32]
   25668:	ldr	r9, [r3]
   2566c:	cmp	r9, #0
   25670:	beq	25c04 <__assert_fail@plt+0x130bc>
   25674:	mov	r2, r4
   25678:	str	r5, [sp, #36]	; 0x24
   2567c:	ldr	fp, [pc, #1456]	; 25c34 <__assert_fail@plt+0x130ec>
   25680:	mov	r5, r3
   25684:	mov	r4, r2
   25688:	b	2569c <__assert_fail@plt+0x12b54>
   2568c:	ldr	r9, [r5, #4]!
   25690:	add	r4, r4, #1
   25694:	cmp	r9, #0
   25698:	beq	25be0 <__assert_fail@plt+0x13098>
   2569c:	mov	r1, fp
   256a0:	mov	r0, r9
   256a4:	bl	1238c <strcmp@plt>
   256a8:	cmp	r0, #0
   256ac:	bne	2568c <__assert_fail@plt+0x12b44>
   256b0:	str	r4, [sp, #44]	; 0x2c
   256b4:	mov	r4, r5
   256b8:	add	r3, sp, #144	; 0x90
   256bc:	ldr	r5, [sp, #36]	; 0x24
   256c0:	str	r3, [r4]
   256c4:	b	256d0 <__assert_fail@plt+0x12b88>
   256c8:	mov	r9, r7
   256cc:	str	fp, [sp, #96]	; 0x60
   256d0:	cmp	sl, #0
   256d4:	moveq	ip, sl
   256d8:	addne	ip, sp, #52	; 0x34
   256dc:	add	r0, sp, #48	; 0x30
   256e0:	add	r1, sp, #64	; 0x40
   256e4:	add	r2, sp, #60	; 0x3c
   256e8:	mov	r3, #16
   256ec:	str	r0, [sp, #16]
   256f0:	str	r1, [sp, #12]
   256f4:	str	r2, [sp, #8]
   256f8:	str	r3, [sp]
   256fc:	str	ip, [sp, #4]
   25700:	mov	r3, #0
   25704:	add	r2, sp, #96	; 0x60
   25708:	ldr	r1, [sp, #32]
   2570c:	ldr	r0, [sp, #24]
   25710:	bl	26540 <__assert_fail@plt+0x139f8>
   25714:	mov	r4, r0
   25718:	ldr	r0, [sp, #104]	; 0x68
   2571c:	cmn	r0, #1
   25720:	beq	25728 <__assert_fail@plt+0x12be0>
   25724:	bl	12af4 <close@plt>
   25728:	cmp	r9, #0
   2572c:	ldrne	r3, [sp, #32]
   25730:	ldrne	r2, [sp, #44]	; 0x2c
   25734:	strne	r9, [r3, r2, lsl #2]
   25738:	cmp	r4, #0
   2573c:	bne	25b70 <__assert_fail@plt+0x13028>
   25740:	ldrb	r3, [sp, #116]	; 0x74
   25744:	cmp	sl, #0
   25748:	ldr	r2, [sp, #52]	; 0x34
   2574c:	orr	r3, r3, #2
   25750:	strb	r3, [sp, #116]	; 0x74
   25754:	ldrbeq	r3, [sp, #118]	; 0x76
   25758:	ldrb	r1, [sp, #124]	; 0x7c
   2575c:	str	r2, [sp, #112]	; 0x70
   25760:	orreq	r3, r3, #128	; 0x80
   25764:	strbeq	r3, [sp, #118]	; 0x76
   25768:	ldrb	r3, [sp, #140]	; 0x8c
   2576c:	cmp	r7, #0
   25770:	ldrb	r2, [sp, #132]	; 0x84
   25774:	orr	r3, r3, #2
   25778:	strb	r3, [sp, #140]	; 0x8c
   2577c:	ldr	r3, [sp, #56]	; 0x38
   25780:	orr	r1, r1, #1
   25784:	str	r3, [sp, #136]	; 0x88
   25788:	ldrbeq	r3, [sp, #142]	; 0x8e
   2578c:	orr	r2, r2, #1
   25790:	ldr	r9, [pc, #1184]	; 25c38 <__assert_fail@plt+0x130f0>
   25794:	strb	r1, [sp, #124]	; 0x7c
   25798:	strb	r2, [sp, #132]	; 0x84
   2579c:	ldr	r1, [sp, #60]	; 0x3c
   257a0:	ldr	r2, [sp, #64]	; 0x40
   257a4:	orreq	r3, r3, #128	; 0x80
   257a8:	str	r1, [sp, #120]	; 0x78
   257ac:	str	r2, [sp, #128]	; 0x80
   257b0:	strbeq	r3, [sp, #142]	; 0x8e
   257b4:	ldrsb	r3, [sp, #126]	; 0x7e
   257b8:	cmp	r3, #0
   257bc:	bge	257cc <__assert_fail@plt+0x12c84>
   257c0:	ldrsb	r3, [sp, #134]	; 0x86
   257c4:	cmp	r3, #0
   257c8:	blt	25b0c <__assert_fail@plt+0x12fc4>
   257cc:	mvn	r2, #0
   257d0:	mov	r1, #4
   257d4:	add	r0, sp, #112	; 0x70
   257d8:	bl	126d4 <gpgrt_poll@plt>
   257dc:	cmn	r0, #1
   257e0:	beq	25b8c <__assert_fail@plt+0x13044>
   257e4:	cmp	r0, #0
   257e8:	beq	25b00 <__assert_fail@plt+0x12fb8>
   257ec:	ldrb	r3, [sp, #117]	; 0x75
   257f0:	tst	r3, #2
   257f4:	bne	2585c <__assert_fail@plt+0x12d14>
   257f8:	ldrb	r3, [sp, #141]	; 0x8d
   257fc:	tst	r3, #2
   25800:	beq	25834 <__assert_fail@plt+0x12cec>
   25804:	cmp	r7, #0
   25808:	beq	25c0c <__assert_fail@plt+0x130c4>
   2580c:	ldr	r2, [sp, #136]	; 0x88
   25810:	mov	r1, r7
   25814:	mov	r0, r5
   25818:	bl	24ff8 <__assert_fail@plt+0x124b0>
   2581c:	subs	r4, r0, #0
   25820:	bne	25bc8 <__assert_fail@plt+0x13080>
   25824:	mov	r0, r7
   25828:	bl	125d8 <gpgrt_feof@plt>
   2582c:	cmp	r0, #0
   25830:	bne	25910 <__assert_fail@plt+0x12dc8>
   25834:	ldrb	r3, [sp, #125]	; 0x7d
   25838:	tst	r3, #1
   2583c:	bne	258c4 <__assert_fail@plt+0x12d7c>
   25840:	ldrb	r3, [sp, #133]	; 0x85
   25844:	tst	r3, #1
   25848:	beq	257b4 <__assert_fail@plt+0x12c6c>
   2584c:	add	r1, sp, #128	; 0x80
   25850:	add	r0, sp, #68	; 0x44
   25854:	bl	25210 <__assert_fail@plt+0x126c8>
   25858:	b	257b4 <__assert_fail@plt+0x12c6c>
   2585c:	ldr	r2, [sp, #112]	; 0x70
   25860:	mov	r1, sl
   25864:	mov	r0, r6
   25868:	bl	24ff8 <__assert_fail@plt+0x124b0>
   2586c:	subs	r4, r0, #0
   25870:	bne	25bc8 <__assert_fail@plt+0x13080>
   25874:	mov	r0, sl
   25878:	bl	125d8 <gpgrt_feof@plt>
   2587c:	cmp	r0, #0
   25880:	beq	257f8 <__assert_fail@plt+0x12cb0>
   25884:	ldr	r1, [sp, #112]	; 0x70
   25888:	mov	r0, r6
   2588c:	bl	24ebc <__assert_fail@plt+0x12374>
   25890:	uxth	r3, r0
   25894:	cmp	r3, r9
   25898:	mov	r4, r0
   2589c:	beq	257b4 <__assert_fail@plt+0x12c6c>
   258a0:	cmp	r0, #0
   258a4:	bne	25bc8 <__assert_fail@plt+0x13080>
   258a8:	ldrb	r3, [sp, #118]	; 0x76
   258ac:	ldr	r0, [sp, #52]	; 0x34
   258b0:	orr	r3, r3, #128	; 0x80
   258b4:	strb	r3, [sp, #118]	; 0x76
   258b8:	bl	12644 <gpgrt_fclose@plt>
   258bc:	str	r4, [sp, #52]	; 0x34
   258c0:	b	257f8 <__assert_fail@plt+0x12cb0>
   258c4:	ldr	r2, [sp, #28]
   258c8:	ldr	r1, [sp, #120]	; 0x78
   258cc:	mov	r0, r8
   258d0:	bl	24ff8 <__assert_fail@plt+0x124b0>
   258d4:	subs	r4, r0, #0
   258d8:	bne	25bec <__assert_fail@plt+0x130a4>
   258dc:	ldr	r0, [sp, #120]	; 0x78
   258e0:	bl	125d8 <gpgrt_feof@plt>
   258e4:	cmp	r0, #0
   258e8:	beq	25840 <__assert_fail@plt+0x12cf8>
   258ec:	ldr	r1, [sp, #28]
   258f0:	mov	r0, r8
   258f4:	bl	24ebc <__assert_fail@plt+0x12374>
   258f8:	subs	r4, r0, #0
   258fc:	bne	25bec <__assert_fail@plt+0x130a4>
   25900:	ldrb	r3, [sp, #126]	; 0x7e
   25904:	orr	r3, r3, #128	; 0x80
   25908:	strb	r3, [sp, #126]	; 0x7e
   2590c:	b	25840 <__assert_fail@plt+0x12cf8>
   25910:	ldr	r1, [sp, #136]	; 0x88
   25914:	mov	r0, r5
   25918:	bl	24ebc <__assert_fail@plt+0x12374>
   2591c:	uxth	r3, r0
   25920:	cmp	r3, r9
   25924:	mov	r4, r0
   25928:	beq	257b4 <__assert_fail@plt+0x12c6c>
   2592c:	cmp	r0, #0
   25930:	bne	25bc8 <__assert_fail@plt+0x13080>
   25934:	ldrb	r3, [sp, #142]	; 0x8e
   25938:	ldr	r0, [sp, #56]	; 0x38
   2593c:	orr	r3, r3, #128	; 0x80
   25940:	strb	r3, [sp, #142]	; 0x8e
   25944:	bl	12644 <gpgrt_fclose@plt>
   25948:	str	r4, [sp, #56]	; 0x38
   2594c:	b	25834 <__assert_fail@plt+0x12cec>
   25950:	bl	129d4 <gpg_strerror@plt>
   25954:	mov	r1, r0
   25958:	ldr	r0, [pc, #732]	; 25c3c <__assert_fail@plt+0x130f4>
   2595c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25960:	ldr	r0, [sp, #48]	; 0x30
   25964:	cmn	r0, #1
   25968:	beq	25970 <__assert_fail@plt+0x12e28>
   2596c:	bl	27124 <__assert_fail@plt+0x145dc>
   25970:	ldr	r0, [sp, #52]	; 0x34
   25974:	bl	12644 <gpgrt_fclose@plt>
   25978:	ldr	r0, [sp, #56]	; 0x38
   2597c:	bl	12644 <gpgrt_fclose@plt>
   25980:	ldr	r0, [sp, #60]	; 0x3c
   25984:	bl	12644 <gpgrt_fclose@plt>
   25988:	ldr	r0, [sp, #64]	; 0x40
   2598c:	bl	12644 <gpgrt_fclose@plt>
   25990:	ldr	r0, [sp, #48]	; 0x30
   25994:	cmn	r0, #1
   25998:	beq	259b4 <__assert_fail@plt+0x12e6c>
   2599c:	mov	r1, r0
   259a0:	mov	r3, #0
   259a4:	ldr	r0, [sp, #24]
   259a8:	mov	r2, #1
   259ac:	bl	26a04 <__assert_fail@plt+0x13ebc>
   259b0:	ldr	r0, [sp, #48]	; 0x30
   259b4:	bl	26f58 <__assert_fail@plt+0x14410>
   259b8:	cmp	r6, #0
   259bc:	beq	259dc <__assert_fail@plt+0x12e94>
   259c0:	mov	r1, #4096	; 0x1000
   259c4:	mov	r0, r6
   259c8:	bl	1caf0 <__assert_fail@plt+0x9fa8>
   259cc:	mov	sl, #0
   259d0:	add	r3, r6, #4096	; 0x1000
   259d4:	mvn	fp, #0
   259d8:	strd	sl, [r3]
   259dc:	mov	r0, r6
   259e0:	bl	124a0 <gcry_free@plt>
   259e4:	cmp	r8, #0
   259e8:	beq	25a08 <__assert_fail@plt+0x12ec0>
   259ec:	mov	r1, #4096	; 0x1000
   259f0:	mov	r0, r8
   259f4:	bl	1caf0 <__assert_fail@plt+0x9fa8>
   259f8:	mov	sl, #0
   259fc:	add	r3, r8, #4096	; 0x1000
   25a00:	mvn	fp, #0
   25a04:	strd	sl, [r3]
   25a08:	mov	r0, r8
   25a0c:	bl	124a0 <gcry_free@plt>
   25a10:	cmp	r5, #0
   25a14:	beq	25a34 <__assert_fail@plt+0x12eec>
   25a18:	mov	r1, #4096	; 0x1000
   25a1c:	mov	r0, r5
   25a20:	bl	1caf0 <__assert_fail@plt+0x9fa8>
   25a24:	mov	r6, #0
   25a28:	add	r3, r5, #4096	; 0x1000
   25a2c:	mvn	r7, #0
   25a30:	strd	r6, [r3]
   25a34:	mov	r0, r5
   25a38:	bl	124a0 <gcry_free@plt>
   25a3c:	ldr	r0, [sp, #92]	; 0x5c
   25a40:	bl	124a0 <gcry_free@plt>
   25a44:	ldr	r3, [pc, #476]	; 25c28 <__assert_fail@plt+0x130e0>
   25a48:	ldr	r2, [sp, #164]	; 0xa4
   25a4c:	mov	r0, r4
   25a50:	ldr	r3, [r3]
   25a54:	cmp	r2, r3
   25a58:	bne	25c20 <__assert_fail@plt+0x130d8>
   25a5c:	add	sp, sp, #172	; 0xac
   25a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25a64:	ldr	r3, [pc, #468]	; 25c40 <__assert_fail@plt+0x130f8>
   25a68:	ldr	r7, [r3]
   25a6c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25a70:	subs	r4, r0, #0
   25a74:	beq	25970 <__assert_fail@plt+0x12e28>
   25a78:	lsl	r3, r7, #24
   25a7c:	and	r3, r3, #2130706432	; 0x7f000000
   25a80:	uxth	r4, r4
   25a84:	orr	r4, r3, r4
   25a88:	cmp	r4, #0
   25a8c:	beq	25970 <__assert_fail@plt+0x12e28>
   25a90:	b	25960 <__assert_fail@plt+0x12e18>
   25a94:	ldr	r3, [pc, #420]	; 25c40 <__assert_fail@plt+0x130f8>
   25a98:	ldr	r4, [r3]
   25a9c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25aa0:	cmp	r0, #0
   25aa4:	beq	25ac4 <__assert_fail@plt+0x12f7c>
   25aa8:	lsl	r4, r4, #24
   25aac:	and	r4, r4, #2130706432	; 0x7f000000
   25ab0:	uxth	r0, r0
   25ab4:	orr	r4, r4, r0
   25ab8:	mov	r5, r6
   25abc:	mov	r8, r6
   25ac0:	b	25a88 <__assert_fail@plt+0x12f40>
   25ac4:	mov	r5, #0
   25ac8:	mov	r8, r5
   25acc:	mov	r4, r5
   25ad0:	b	25970 <__assert_fail@plt+0x12e28>
   25ad4:	ldr	r3, [pc, #356]	; 25c40 <__assert_fail@plt+0x130f8>
   25ad8:	ldr	r4, [r3]
   25adc:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25ae0:	cmp	r0, #0
   25ae4:	beq	25ac4 <__assert_fail@plt+0x12f7c>
   25ae8:	lsl	r4, r4, #24
   25aec:	and	r4, r4, #2130706432	; 0x7f000000
   25af0:	uxth	r0, r0
   25af4:	orr	r4, r4, r0
   25af8:	mov	r5, r8
   25afc:	b	25a88 <__assert_fail@plt+0x12f40>
   25b00:	ldr	r1, [sp, #24]
   25b04:	ldr	r0, [pc, #312]	; 25c44 <__assert_fail@plt+0x130fc>
   25b08:	bl	1c890 <__assert_fail@plt+0x9d48>
   25b0c:	mov	r1, #0
   25b10:	add	r0, sp, #68	; 0x44
   25b14:	bl	25210 <__assert_fail@plt+0x126c8>
   25b18:	ldr	r0, [sp, #52]	; 0x34
   25b1c:	bl	12644 <gpgrt_fclose@plt>
   25b20:	mov	r4, #0
   25b24:	ldr	r0, [sp, #56]	; 0x38
   25b28:	str	r4, [sp, #52]	; 0x34
   25b2c:	bl	12644 <gpgrt_fclose@plt>
   25b30:	ldr	r0, [sp, #60]	; 0x3c
   25b34:	str	r4, [sp, #56]	; 0x38
   25b38:	bl	12644 <gpgrt_fclose@plt>
   25b3c:	ldr	r0, [sp, #64]	; 0x40
   25b40:	str	r4, [sp, #60]	; 0x3c
   25b44:	bl	12644 <gpgrt_fclose@plt>
   25b48:	mov	r3, r4
   25b4c:	mov	r2, #1
   25b50:	ldr	r1, [sp, #48]	; 0x30
   25b54:	ldr	r0, [sp, #24]
   25b58:	str	r4, [sp, #64]	; 0x40
   25b5c:	bl	26a04 <__assert_fail@plt+0x13ebc>
   25b60:	mvn	r3, #0
   25b64:	str	r3, [sp, #48]	; 0x30
   25b68:	mov	r4, r0
   25b6c:	b	25a88 <__assert_fail@plt+0x12f40>
   25b70:	mov	r0, r4
   25b74:	bl	129d4 <gpg_strerror@plt>
   25b78:	ldr	r1, [sp, #24]
   25b7c:	mov	r2, r0
   25b80:	ldr	r0, [pc, #192]	; 25c48 <__assert_fail@plt+0x13100>
   25b84:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25b88:	b	25960 <__assert_fail@plt+0x12e18>
   25b8c:	ldr	r3, [pc, #172]	; 25c40 <__assert_fail@plt+0x130f8>
   25b90:	ldr	r7, [r3]
   25b94:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25b98:	subs	r4, r0, #0
   25b9c:	lslne	r3, r7, #24
   25ba0:	uxthne	r4, r4
   25ba4:	andne	r3, r3, #2130706432	; 0x7f000000
   25ba8:	orrne	r4, r3, r4
   25bac:	mov	r0, r4
   25bb0:	bl	129d4 <gpg_strerror@plt>
   25bb4:	ldr	r1, [sp, #24]
   25bb8:	mov	r2, r0
   25bbc:	ldr	r0, [pc, #136]	; 25c4c <__assert_fail@plt+0x13104>
   25bc0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25bc4:	b	25a88 <__assert_fail@plt+0x12f40>
   25bc8:	bl	129d4 <gpg_strerror@plt>
   25bcc:	ldr	r1, [sp, #24]
   25bd0:	mov	r2, r0
   25bd4:	ldr	r0, [pc, #116]	; 25c50 <__assert_fail@plt+0x13108>
   25bd8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25bdc:	b	25960 <__assert_fail@plt+0x12e18>
   25be0:	str	r4, [sp, #44]	; 0x2c
   25be4:	ldr	r5, [sp, #36]	; 0x24
   25be8:	b	256d0 <__assert_fail@plt+0x12b88>
   25bec:	bl	129d4 <gpg_strerror@plt>
   25bf0:	ldr	r1, [sp, #24]
   25bf4:	mov	r2, r0
   25bf8:	ldr	r0, [pc, #84]	; 25c54 <__assert_fail@plt+0x1310c>
   25bfc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25c00:	b	25960 <__assert_fail@plt+0x12e18>
   25c04:	str	r9, [sp, #44]	; 0x2c
   25c08:	b	256d0 <__assert_fail@plt+0x12b88>
   25c0c:	ldr	r3, [pc, #68]	; 25c58 <__assert_fail@plt+0x13110>
   25c10:	ldr	r2, [pc, #68]	; 25c5c <__assert_fail@plt+0x13114>
   25c14:	ldr	r1, [pc, #68]	; 25c60 <__assert_fail@plt+0x13118>
   25c18:	ldr	r0, [pc, #68]	; 25c64 <__assert_fail@plt+0x1311c>
   25c1c:	bl	1cacc <__assert_fail@plt+0x9f84>
   25c20:	bl	124e8 <__stack_chk_fail@plt>
   25c24:	andeq	sl, r2, r4, ror #22
   25c28:	andeq	fp, r3, r0, lsl fp
   25c2c:	andeq	r1, r0, r8
   25c30:	andeq	sl, r2, r8, lsr #25
   25c34:			; <UNDEFINED> instruction: 0x0002acb0
   25c38:	andeq	r8, r0, r6
   25c3c:	andeq	sl, r2, r8, ror ip
   25c40:	muleq	r3, r0, r3
   25c44:	andeq	sl, r2, ip, ror #25
   25c48:			; <UNDEFINED> instruction: 0x0002acbc
   25c4c:	ldrdeq	sl, [r2], -r4
   25c50:	andeq	sl, r2, r4, lsl sp
   25c54:	andeq	sl, r2, ip, lsr sp
   25c58:	andeq	sl, r2, ip, ror #22
   25c5c:	ldrdeq	r0, [r0], -lr
   25c60:	muleq	r2, r4, fp
   25c64:	andeq	sl, r2, r4, lsr sp
   25c68:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25c6c:	sub	sp, sp, #24
   25c70:	ldr	r7, [pc, #552]	; 25ea0 <__assert_fail@plt+0x13358>
   25c74:	ldr	r8, [sp, #56]	; 0x38
   25c78:	mov	r9, r3
   25c7c:	ldr	ip, [r7]
   25c80:	cmp	r8, #0
   25c84:	mov	r3, #0
   25c88:	str	r3, [r9]
   25c8c:	strne	r3, [r8]
   25c90:	cmp	r2, #0
   25c94:	mov	r5, r0
   25c98:	mov	sl, r1
   25c9c:	mov	r4, r2
   25ca0:	str	ip, [sp, #20]
   25ca4:	beq	25cdc <__assert_fail@plt+0x13194>
   25ca8:	mov	r0, r2
   25cac:	bl	12788 <strlen@plt>
   25cb0:	ldr	r3, [pc, #492]	; 25ea4 <__assert_fail@plt+0x1335c>
   25cb4:	ldr	ip, [pc, #492]	; 25ea8 <__assert_fail@plt+0x13360>
   25cb8:	str	r3, [sp, #8]
   25cbc:	mov	r3, #0
   25cc0:	stm	sp, {r3, ip}
   25cc4:	mov	r2, r0
   25cc8:	mov	r1, r2
   25ccc:	mov	r0, r4
   25cd0:	bl	12b3c <gpgrt_mopen@plt>
   25cd4:	subs	r4, r0, #0
   25cd8:	beq	25e10 <__assert_fail@plt+0x132c8>
   25cdc:	ldr	r1, [pc, #456]	; 25eac <__assert_fail@plt+0x13364>
   25ce0:	mov	r0, #0
   25ce4:	bl	127d0 <gpgrt_fopenmem@plt>
   25ce8:	subs	r6, r0, #0
   25cec:	beq	25db8 <__assert_fail@plt+0x13270>
   25cf0:	mov	r3, #0
   25cf4:	mov	r0, r5
   25cf8:	str	r6, [sp]
   25cfc:	mov	r1, sl
   25d00:	str	r3, [sp, #8]
   25d04:	str	r3, [sp, #4]
   25d08:	mov	r2, r4
   25d0c:	bl	25508 <__assert_fail@plt+0x129c0>
   25d10:	subs	r5, r0, #0
   25d14:	beq	25d54 <__assert_fail@plt+0x1320c>
   25d18:	mov	r0, r4
   25d1c:	bl	12644 <gpgrt_fclose@plt>
   25d20:	mov	r0, r6
   25d24:	bl	12644 <gpgrt_fclose@plt>
   25d28:	ldr	r0, [r9]
   25d2c:	bl	124a0 <gcry_free@plt>
   25d30:	mov	r3, #0
   25d34:	str	r3, [r9]
   25d38:	ldr	r2, [sp, #20]
   25d3c:	ldr	r3, [r7]
   25d40:	mov	r0, r5
   25d44:	cmp	r2, r3
   25d48:	bne	25e90 <__assert_fail@plt+0x13348>
   25d4c:	add	sp, sp, #24
   25d50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25d54:	mov	r0, r6
   25d58:	bl	12548 <gpgrt_ftello@plt>
   25d5c:	mov	r2, r5
   25d60:	mov	r1, r5
   25d64:	mov	sl, r0
   25d68:	mov	r0, r6
   25d6c:	bl	129b0 <gpgrt_fseek@plt>
   25d70:	subs	r5, r0, #0
   25d74:	bne	25d18 <__assert_fail@plt+0x131d0>
   25d78:	add	r0, sl, #1
   25d7c:	bl	12338 <gcry_malloc@plt>
   25d80:	cmp	r0, #0
   25d84:	str	r0, [r9]
   25d88:	beq	25e68 <__assert_fail@plt+0x13320>
   25d8c:	cmp	sl, #0
   25d90:	bne	25e38 <__assert_fail@plt+0x132f0>
   25d94:	cmp	r8, #0
   25d98:	mov	r3, #0
   25d9c:	strb	r3, [r0, sl]
   25da0:	strne	sl, [r8]
   25da4:	mov	r0, r4
   25da8:	bl	12644 <gpgrt_fclose@plt>
   25dac:	mov	r0, r6
   25db0:	bl	12644 <gpgrt_fclose@plt>
   25db4:	b	25d38 <__assert_fail@plt+0x131f0>
   25db8:	ldr	r3, [pc, #240]	; 25eb0 <__assert_fail@plt+0x13368>
   25dbc:	ldr	r8, [r3]
   25dc0:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25dc4:	subs	r5, r0, #0
   25dc8:	bne	25de0 <__assert_fail@plt+0x13298>
   25dcc:	mov	r0, r4
   25dd0:	bl	12644 <gpgrt_fclose@plt>
   25dd4:	mov	r0, r5
   25dd8:	bl	12644 <gpgrt_fclose@plt>
   25ddc:	b	25d38 <__assert_fail@plt+0x131f0>
   25de0:	lsl	r8, r8, #24
   25de4:	and	r8, r8, #2130706432	; 0x7f000000
   25de8:	uxth	r5, r5
   25dec:	orr	r5, r8, r5
   25df0:	mov	r0, r4
   25df4:	bl	12644 <gpgrt_fclose@plt>
   25df8:	mov	r0, r6
   25dfc:	bl	12644 <gpgrt_fclose@plt>
   25e00:	cmp	r5, #0
   25e04:	bne	25d28 <__assert_fail@plt+0x131e0>
   25e08:	mov	r5, #0
   25e0c:	b	25d38 <__assert_fail@plt+0x131f0>
   25e10:	ldr	r3, [pc, #152]	; 25eb0 <__assert_fail@plt+0x13368>
   25e14:	ldr	r5, [r3]
   25e18:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25e1c:	cmp	r0, #0
   25e20:	beq	25e08 <__assert_fail@plt+0x132c0>
   25e24:	lsl	r5, r5, #24
   25e28:	and	r5, r5, #2130706432	; 0x7f000000
   25e2c:	uxth	r0, r0
   25e30:	orr	r5, r5, r0
   25e34:	b	25d38 <__assert_fail@plt+0x131f0>
   25e38:	mov	r1, r0
   25e3c:	add	r3, sp, #16
   25e40:	mov	r2, sl
   25e44:	mov	r0, r6
   25e48:	bl	12488 <gpgrt_read@plt>
   25e4c:	cmp	r0, #0
   25e50:	bne	25e68 <__assert_fail@plt+0x13320>
   25e54:	ldr	r3, [sp, #16]
   25e58:	cmp	r3, sl
   25e5c:	bne	25e94 <__assert_fail@plt+0x1334c>
   25e60:	ldr	r0, [r9]
   25e64:	b	25d94 <__assert_fail@plt+0x1324c>
   25e68:	ldr	r3, [pc, #64]	; 25eb0 <__assert_fail@plt+0x13368>
   25e6c:	ldr	r8, [r3]
   25e70:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25e74:	subs	r5, r0, #0
   25e78:	beq	25da4 <__assert_fail@plt+0x1325c>
   25e7c:	lsl	r3, r8, #24
   25e80:	and	r3, r3, #2130706432	; 0x7f000000
   25e84:	uxth	r5, r5
   25e88:	orr	r5, r3, r5
   25e8c:	b	25df0 <__assert_fail@plt+0x132a8>
   25e90:	bl	124e8 <__stack_chk_fail@plt>
   25e94:	ldr	r1, [pc, #24]	; 25eb4 <__assert_fail@plt+0x1336c>
   25e98:	ldr	r0, [pc, #24]	; 25eb8 <__assert_fail@plt+0x13370>
   25e9c:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   25ea0:	andeq	fp, r3, r0, lsl fp
   25ea4:	andeq	r8, r2, r4, lsl #10
   25ea8:			; <UNDEFINED> instruction: 0x00024eb8
   25eac:	andeq	r8, r2, r4, asr r4
   25eb0:	muleq	r3, r0, r3
   25eb4:	andeq	sl, r2, r4, lsl #23
   25eb8:	andeq	sl, r2, r0, ror #26
   25ebc:	push	{r4, r5, r6, r7, r8, lr}
   25ec0:	mov	r6, r1
   25ec4:	mov	r7, r2
   25ec8:	mov	r4, r3
   25ecc:	mov	r5, r0
   25ed0:	bl	12914 <pipe@plt>
   25ed4:	cmn	r0, #1
   25ed8:	beq	25f1c <__assert_fail@plt+0x133d4>
   25edc:	cmp	r7, #0
   25ee0:	ldreq	r3, [pc, #256]	; 25fe8 <__assert_fail@plt+0x134a0>
   25ee4:	ldreq	r1, [pc, #256]	; 25fec <__assert_fail@plt+0x134a4>
   25ee8:	ldreq	r0, [r5]
   25eec:	ldrne	r1, [pc, #252]	; 25ff0 <__assert_fail@plt+0x134a8>
   25ef0:	ldrne	r3, [pc, #252]	; 25ff4 <__assert_fail@plt+0x134ac>
   25ef4:	ldrne	r0, [r5, #4]
   25ef8:	cmp	r4, #0
   25efc:	moveq	r1, r3
   25f00:	bl	1268c <gpgrt_fdopen@plt>
   25f04:	cmp	r0, #0
   25f08:	str	r0, [r6]
   25f0c:	movne	r4, #0
   25f10:	beq	25f80 <__assert_fail@plt+0x13438>
   25f14:	mov	r0, r4
   25f18:	pop	{r4, r5, r6, r7, r8, pc}
   25f1c:	ldr	r3, [pc, #212]	; 25ff8 <__assert_fail@plt+0x134b0>
   25f20:	ldr	r7, [r3]
   25f24:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25f28:	mov	r2, #5
   25f2c:	ldr	r1, [pc, #200]	; 25ffc <__assert_fail@plt+0x134b4>
   25f30:	subs	r4, r0, #0
   25f34:	lslne	r7, r7, #24
   25f38:	uxthne	r4, r4
   25f3c:	andne	r7, r7, #2130706432	; 0x7f000000
   25f40:	mov	r0, #0
   25f44:	orrne	r4, r7, r4
   25f48:	bl	124dc <dcgettext@plt>
   25f4c:	mov	r7, r0
   25f50:	mov	r0, r4
   25f54:	bl	129d4 <gpg_strerror@plt>
   25f58:	mov	r1, r0
   25f5c:	mov	r0, r7
   25f60:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25f64:	mvn	r3, #0
   25f68:	mov	r2, #0
   25f6c:	str	r3, [r5, #4]
   25f70:	str	r3, [r5]
   25f74:	mov	r0, r4
   25f78:	str	r2, [r6]
   25f7c:	pop	{r4, r5, r6, r7, r8, pc}
   25f80:	ldr	r3, [pc, #112]	; 25ff8 <__assert_fail@plt+0x134b0>
   25f84:	ldr	r6, [r3]
   25f88:	bl	127c4 <gpg_err_code_from_syserror@plt>
   25f8c:	mov	r2, #5
   25f90:	ldr	r1, [pc, #104]	; 26000 <__assert_fail@plt+0x134b8>
   25f94:	subs	r4, r0, #0
   25f98:	lslne	r6, r6, #24
   25f9c:	andne	r6, r6, #2130706432	; 0x7f000000
   25fa0:	uxthne	r4, r4
   25fa4:	mov	r0, #0
   25fa8:	orrne	r4, r6, r4
   25fac:	bl	124dc <dcgettext@plt>
   25fb0:	mov	r6, r0
   25fb4:	mov	r0, r4
   25fb8:	bl	129d4 <gpg_strerror@plt>
   25fbc:	mov	r1, r0
   25fc0:	mov	r0, r6
   25fc4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   25fc8:	ldr	r0, [r5]
   25fcc:	bl	12af4 <close@plt>
   25fd0:	ldr	r0, [r5, #4]
   25fd4:	bl	12af4 <close@plt>
   25fd8:	mvn	r3, #0
   25fdc:	str	r3, [r5, #4]
   25fe0:	str	r3, [r5]
   25fe4:	b	25f14 <__assert_fail@plt+0x133cc>
   25fe8:	andeq	r8, r2, r0, lsl #9
   25fec:	andeq	sl, r2, r8, lsl #27
   25ff0:	muleq	r2, r4, sp
   25ff4:	andeq	r9, r2, ip, lsr #2
   25ff8:	muleq	r3, r0, r3
   25ffc:	andeq	sl, r2, r0, lsr #27
   26000:			; <UNDEFINED> instruction: 0x0002adbc
   26004:	push	{r4, r5, r6, lr}
   26008:	mov	r4, r0
   2600c:	bl	12914 <pipe@plt>
   26010:	cmn	r0, #1
   26014:	beq	26020 <__assert_fail@plt+0x134d8>
   26018:	mov	r0, #0
   2601c:	pop	{r4, r5, r6, pc}
   26020:	ldr	r3, [pc, #40]	; 26050 <__assert_fail@plt+0x13508>
   26024:	ldr	r5, [r3]
   26028:	bl	127c4 <gpg_err_code_from_syserror@plt>
   2602c:	mvn	r3, #0
   26030:	str	r3, [r4, #4]
   26034:	str	r3, [r4]
   26038:	cmp	r0, #0
   2603c:	lslne	r5, r5, #24
   26040:	andne	r5, r5, #2130706432	; 0x7f000000
   26044:	uxthne	r0, r0
   26048:	orrne	r0, r5, r0
   2604c:	pop	{r4, r5, r6, pc}
   26050:	muleq	r3, r0, r3
   26054:	push	{r4, r5, r6, lr}
   26058:	sub	sp, sp, #24
   2605c:	ldr	r6, [pc, #248]	; 2615c <__assert_fail@plt+0x13614>
   26060:	ldr	r0, [pc, #248]	; 26160 <__assert_fail@plt+0x13618>
   26064:	ldr	r3, [r6]
   26068:	str	r3, [sp, #20]
   2606c:	bl	1265c <opendir@plt>
   26070:	subs	r5, r0, #0
   26074:	mvnne	r4, #0
   26078:	beq	260f0 <__assert_fail@plt+0x135a8>
   2607c:	mov	r0, r5
   26080:	bl	129bc <readdir64@plt>
   26084:	cmp	r0, #0
   26088:	beq	260c4 <__assert_fail@plt+0x1357c>
   2608c:	ldrb	r3, [r0, #19]
   26090:	sub	r3, r3, #48	; 0x30
   26094:	cmp	r3, #9
   26098:	bhi	2607c <__assert_fail@plt+0x13534>
   2609c:	mov	r2, #10
   260a0:	mov	r1, #0
   260a4:	add	r0, r0, #19
   260a8:	bl	123a4 <strtol@plt>
   260ac:	cmp	r4, r0
   260b0:	movlt	r4, r0
   260b4:	mov	r0, r5
   260b8:	bl	129bc <readdir64@plt>
   260bc:	cmp	r0, #0
   260c0:	bne	2608c <__assert_fail@plt+0x13544>
   260c4:	mov	r0, r5
   260c8:	bl	12b24 <closedir@plt>
   260cc:	cmn	r4, #1
   260d0:	addne	r0, r4, #1
   260d4:	beq	260f0 <__assert_fail@plt+0x135a8>
   260d8:	ldr	r2, [sp, #20]
   260dc:	ldr	r3, [r6]
   260e0:	cmp	r2, r3
   260e4:	bne	26158 <__assert_fail@plt+0x13610>
   260e8:	add	sp, sp, #24
   260ec:	pop	{r4, r5, r6, pc}
   260f0:	mov	r4, sp
   260f4:	mov	r1, r4
   260f8:	mov	r0, #7
   260fc:	bl	12524 <getrlimit64@plt>
   26100:	cmp	r0, #0
   26104:	bne	26120 <__assert_fail@plt+0x135d8>
   26108:	ldr	r0, [sp, #8]
   2610c:	cmn	r0, #1
   26110:	beq	26120 <__assert_fail@plt+0x135d8>
   26114:	cmn	r0, #-2147483647	; 0x80000001
   26118:	moveq	r0, #256	; 0x100
   2611c:	b	260d8 <__assert_fail@plt+0x13590>
   26120:	mov	r1, r4
   26124:	mov	r0, #7
   26128:	bl	12524 <getrlimit64@plt>
   2612c:	cmp	r0, #0
   26130:	bne	26140 <__assert_fail@plt+0x135f8>
   26134:	ldr	r0, [sp, #8]
   26138:	cmn	r0, #1
   2613c:	bne	26114 <__assert_fail@plt+0x135cc>
   26140:	mov	r0, #4
   26144:	bl	12500 <sysconf@plt>
   26148:	cmp	r0, #0
   2614c:	bge	26114 <__assert_fail@plt+0x135cc>
   26150:	mov	r0, #20
   26154:	b	260d8 <__assert_fail@plt+0x13590>
   26158:	bl	124e8 <__stack_chk_fail@plt>
   2615c:	andeq	fp, r3, r0, lsl fp
   26160:	andeq	sl, r2, r4, ror #27
   26164:	push	{r4, r5, r6, r7, r8, lr}
   26168:	mov	r6, r1
   2616c:	mov	r4, r0
   26170:	bl	26054 <__assert_fail@plt+0x1350c>
   26174:	cmp	r6, #0
   26178:	mov	r7, r0
   2617c:	beq	261f0 <__assert_fail@plt+0x136a8>
   26180:	cmp	r0, r4
   26184:	movgt	r5, #0
   26188:	ble	261d8 <__assert_fail@plt+0x13690>
   2618c:	ldr	r3, [r6, r5, lsl #2]
   26190:	add	r2, r6, r5, lsl #2
   26194:	cmn	r3, #1
   26198:	beq	261c4 <__assert_fail@plt+0x1367c>
   2619c:	cmp	r3, r4
   261a0:	movne	r0, r5
   261a4:	bne	261b4 <__assert_fail@plt+0x1366c>
   261a8:	b	261e4 <__assert_fail@plt+0x1369c>
   261ac:	cmp	r3, r4
   261b0:	beq	261e8 <__assert_fail@plt+0x136a0>
   261b4:	ldr	r3, [r2, #4]!
   261b8:	add	r0, r0, #1
   261bc:	cmn	r3, #1
   261c0:	bne	261ac <__assert_fail@plt+0x13664>
   261c4:	mov	r0, r4
   261c8:	bl	12af4 <close@plt>
   261cc:	add	r4, r4, #1
   261d0:	cmp	r7, r4
   261d4:	bne	2618c <__assert_fail@plt+0x13644>
   261d8:	mov	r0, #0
   261dc:	pop	{r4, r5, r6, r7, r8, lr}
   261e0:	b	129a4 <gpg_err_set_errno@plt>
   261e4:	mov	r0, r5
   261e8:	add	r5, r0, #1
   261ec:	b	261cc <__assert_fail@plt+0x13684>
   261f0:	cmp	r0, r4
   261f4:	ble	261d8 <__assert_fail@plt+0x13690>
   261f8:	mov	r0, r4
   261fc:	add	r4, r4, #1
   26200:	bl	12af4 <close@plt>
   26204:	cmp	r7, r4
   26208:	bne	261f8 <__assert_fail@plt+0x136b0>
   2620c:	mov	r0, #0
   26210:	pop	{r4, r5, r6, r7, r8, lr}
   26214:	b	129a4 <gpg_err_set_errno@plt>
   26218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2621c:	sub	sp, sp, #20
   26220:	ldr	lr, [pc, #444]	; 263e4 <__assert_fail@plt+0x1389c>
   26224:	mov	r8, r2
   26228:	ldr	ip, [sp, #56]	; 0x38
   2622c:	ldr	r2, [lr]
   26230:	subs	r4, r1, #0
   26234:	mov	r5, r0
   26238:	str	r8, [sp]
   2623c:	str	r3, [sp, #4]
   26240:	str	r2, [sp, #12]
   26244:	str	ip, [sp, #8]
   26248:	ldr	r7, [sp, #60]	; 0x3c
   2624c:	ldr	r6, [sp, #64]	; 0x40
   26250:	moveq	r0, r4
   26254:	beq	2627c <__assert_fail@plt+0x13734>
   26258:	ldr	r0, [r4]
   2625c:	cmp	r0, #0
   26260:	beq	2627c <__assert_fail@plt+0x13734>
   26264:	mov	r3, r4
   26268:	mov	r0, #0
   2626c:	ldr	r2, [r3, #4]!
   26270:	add	r0, r0, #1
   26274:	cmp	r2, #0
   26278:	bne	2626c <__assert_fail@plt+0x13724>
   2627c:	mov	r1, #4
   26280:	add	r0, r0, #2
   26284:	bl	12a64 <gcry_xcalloc@plt>
   26288:	mov	r1, #47	; 0x2f
   2628c:	mov	r9, r0
   26290:	mov	r0, r5
   26294:	bl	12980 <strrchr@plt>
   26298:	cmp	r0, #0
   2629c:	str	r0, [r9]
   262a0:	beq	26398 <__assert_fail@plt+0x13850>
   262a4:	add	r0, r0, #1
   262a8:	str	r0, [r9]
   262ac:	cmp	r4, #0
   262b0:	beq	262d8 <__assert_fail@plt+0x13790>
   262b4:	ldr	r3, [r4]
   262b8:	cmp	r3, #0
   262bc:	beq	262d8 <__assert_fail@plt+0x13790>
   262c0:	mov	r1, r4
   262c4:	mov	r2, r9
   262c8:	str	r3, [r2, #4]!
   262cc:	ldr	r3, [r1, #4]!
   262d0:	cmp	r3, #0
   262d4:	bne	262c8 <__assert_fail@plt+0x13780>
   262d8:	cmn	r8, #1
   262dc:	add	sl, sp, #4
   262e0:	mov	r4, #0
   262e4:	ldr	fp, [pc, #252]	; 263e8 <__assert_fail@plt+0x138a0>
   262e8:	beq	26304 <__assert_fail@plt+0x137bc>
   262ec:	add	r4, r4, #1
   262f0:	cmp	r4, #3
   262f4:	beq	2633c <__assert_fail@plt+0x137f4>
   262f8:	ldr	r8, [sl], #4
   262fc:	cmn	r8, #1
   26300:	bne	262ec <__assert_fail@plt+0x137a4>
   26304:	adds	r1, r4, #0
   26308:	movne	r1, #1
   2630c:	mov	r0, fp
   26310:	bl	127e8 <__open64_2@plt>
   26314:	cmn	r0, #1
   26318:	str	r0, [sl, #-4]
   2631c:	bne	262ec <__assert_fail@plt+0x137a4>
   26320:	bl	1280c <__errno_location@plt>
   26324:	ldr	r0, [r0]
   26328:	bl	126c8 <strerror@plt>
   2632c:	ldr	r1, [pc, #180]	; 263e8 <__assert_fail@plt+0x138a0>
   26330:	mov	r2, r0
   26334:	ldr	r0, [pc, #176]	; 263ec <__assert_fail@plt+0x138a4>
   26338:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   2633c:	mov	r8, sp
   26340:	mov	r4, #0
   26344:	ldr	r0, [r8], #4
   26348:	cmp	r0, r4
   2634c:	beq	26360 <__assert_fail@plt+0x13818>
   26350:	mov	r1, r4
   26354:	bl	1250c <dup2@plt>
   26358:	cmn	r0, #1
   2635c:	beq	263a8 <__assert_fail@plt+0x13860>
   26360:	add	r4, r4, #1
   26364:	cmp	r4, #3
   26368:	bne	26344 <__assert_fail@plt+0x137fc>
   2636c:	mov	r1, r7
   26370:	mov	r0, r4
   26374:	bl	26164 <__assert_fail@plt+0x1361c>
   26378:	cmp	r6, #0
   2637c:	beq	26384 <__assert_fail@plt+0x1383c>
   26380:	blx	r6
   26384:	mov	r1, r9
   26388:	mov	r0, r5
   2638c:	bl	127dc <execv@plt>
   26390:	mov	r0, #127	; 0x7f
   26394:	bl	12470 <_exit@plt>
   26398:	mov	r0, r5
   2639c:	bl	128e4 <gcry_xstrdup@plt>
   263a0:	str	r0, [r9]
   263a4:	b	262ac <__assert_fail@plt+0x13764>
   263a8:	cmp	r4, #0
   263ac:	ldreq	r4, [pc, #60]	; 263f0 <__assert_fail@plt+0x138a8>
   263b0:	beq	263c8 <__assert_fail@plt+0x13880>
   263b4:	ldr	r3, [pc, #56]	; 263f4 <__assert_fail@plt+0x138ac>
   263b8:	ldr	r2, [pc, #56]	; 263f8 <__assert_fail@plt+0x138b0>
   263bc:	cmp	r4, #1
   263c0:	moveq	r4, r3
   263c4:	movne	r4, r2
   263c8:	bl	1280c <__errno_location@plt>
   263cc:	ldr	r0, [r0]
   263d0:	bl	126c8 <strerror@plt>
   263d4:	mov	r1, r4
   263d8:	mov	r2, r0
   263dc:	ldr	r0, [pc, #24]	; 263fc <__assert_fail@plt+0x138b4>
   263e0:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   263e4:	andeq	fp, r3, r0, lsl fp
   263e8:	andeq	r9, r2, r0, asr #7
   263ec:	strdeq	sl, [r2], -ip
   263f0:	andeq	sl, r2, r8, lsr #8
   263f4:	strdeq	sl, [r2], -r4
   263f8:	strdeq	sl, [r2], -r8
   263fc:	andeq	sl, r2, r8, lsl lr
   26400:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26404:	sub	sp, sp, #116	; 0x74
   26408:	ldr	sl, [pc, #248]	; 26508 <__assert_fail@plt+0x139c0>
   2640c:	ldr	r3, [sl]
   26410:	str	r3, [sp, #108]	; 0x6c
   26414:	bl	26054 <__assert_fail@plt+0x1350c>
   26418:	mov	r1, #4
   2641c:	mov	r9, r0
   26420:	mov	r0, #32
   26424:	bl	12308 <calloc@plt>
   26428:	subs	r8, r0, #0
   2642c:	beq	264d0 <__assert_fail@plt+0x13988>
   26430:	cmp	r9, #0
   26434:	ble	264fc <__assert_fail@plt+0x139b4>
   26438:	mov	r5, #0
   2643c:	mov	r4, r5
   26440:	mov	r6, #32
   26444:	b	26490 <__assert_fail@plt+0x13948>
   26448:	add	r7, r5, #1
   2644c:	cmp	r7, r6
   26450:	bcc	2647c <__assert_fail@plt+0x13934>
   26454:	cmp	r6, #256	; 0x100
   26458:	movcc	r3, #32
   2645c:	movcs	r3, #256	; 0x100
   26460:	add	r6, r6, r3
   26464:	mov	r0, r8
   26468:	lsl	r1, r6, #2
   2646c:	bl	12530 <realloc@plt>
   26470:	subs	fp, r0, #0
   26474:	beq	264ec <__assert_fail@plt+0x139a4>
   26478:	mov	r8, fp
   2647c:	str	r4, [r8, r5, lsl #2]
   26480:	add	r4, r4, #1
   26484:	cmp	r9, r4
   26488:	mov	r5, r7
   2648c:	beq	264c4 <__assert_fail@plt+0x1397c>
   26490:	mov	r2, sp
   26494:	mov	r1, r4
   26498:	mov	r0, #3
   2649c:	bl	125a8 <__fxstat64@plt>
   264a0:	cmn	r0, #1
   264a4:	bne	26448 <__assert_fail@plt+0x13900>
   264a8:	bl	1280c <__errno_location@plt>
   264ac:	ldr	r3, [r0]
   264b0:	cmp	r3, #9
   264b4:	bne	26448 <__assert_fail@plt+0x13900>
   264b8:	add	r4, r4, #1
   264bc:	cmp	r9, r4
   264c0:	bne	26490 <__assert_fail@plt+0x13948>
   264c4:	add	r5, r8, r5, lsl #2
   264c8:	mvn	r3, #0
   264cc:	str	r3, [r5]
   264d0:	ldr	r2, [sp, #108]	; 0x6c
   264d4:	ldr	r3, [sl]
   264d8:	mov	r0, r8
   264dc:	cmp	r2, r3
   264e0:	bne	26504 <__assert_fail@plt+0x139bc>
   264e4:	add	sp, sp, #116	; 0x74
   264e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   264ec:	mov	r0, r8
   264f0:	bl	12428 <free@plt>
   264f4:	mov	r8, fp
   264f8:	b	264d0 <__assert_fail@plt+0x13988>
   264fc:	mov	r5, r8
   26500:	b	264c8 <__assert_fail@plt+0x13980>
   26504:	bl	124e8 <__stack_chk_fail@plt>
   26508:	andeq	fp, r3, r0, lsl fp
   2650c:	cmp	r1, #0
   26510:	beq	26520 <__assert_fail@plt+0x139d8>
   26514:	mov	r3, r2
   26518:	mov	r2, #0
   2651c:	b	25ebc <__assert_fail@plt+0x13374>
   26520:	b	26004 <__assert_fail@plt+0x134bc>
   26524:	cmp	r1, #0
   26528:	beq	26538 <__assert_fail@plt+0x139f0>
   2652c:	mov	r3, r2
   26530:	mov	r2, #1
   26534:	b	25ebc <__assert_fail@plt+0x13374>
   26538:	b	26004 <__assert_fail@plt+0x134bc>
   2653c:	b	26004 <__assert_fail@plt+0x134bc>
   26540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26544:	sub	sp, sp, #76	; 0x4c
   26548:	ldr	sl, [pc, #976]	; 26920 <__assert_fail@plt+0x13dd8>
   2654c:	ldr	ip, [pc, #976]	; 26924 <__assert_fail@plt+0x13ddc>
   26550:	ldr	r5, [sp, #116]	; 0x74
   26554:	ldr	r6, [sl]
   26558:	cmp	r5, #0
   2655c:	str	r6, [sp, #68]	; 0x44
   26560:	ldrd	r6, [sp, #120]	; 0x78
   26564:	strd	r0, [sp, #16]
   26568:	ldm	ip, {r0, r1}
   2656c:	mov	ip, #0
   26570:	strne	ip, [r5]
   26574:	cmp	r6, #0
   26578:	strd	r2, [sp, #24]
   2657c:	ldr	r4, [sp, #112]	; 0x70
   26580:	movne	r3, #0
   26584:	strne	r3, [r6]
   26588:	ldr	fp, [sp, #128]	; 0x80
   2658c:	cmp	r7, #0
   26590:	movne	r3, #0
   26594:	add	lr, sp, #44	; 0x2c
   26598:	add	r9, sp, #52	; 0x34
   2659c:	add	r8, sp, #60	; 0x3c
   265a0:	strne	r3, [r7]
   265a4:	lsr	r4, r4, #4
   265a8:	mvn	r3, #0
   265ac:	cmp	r5, #0
   265b0:	stm	lr, {r0, r1}
   265b4:	stm	r9, {r0, r1}
   265b8:	stm	r8, {r0, r1}
   265bc:	and	r4, r4, #1
   265c0:	str	ip, [sp, #32]
   265c4:	str	ip, [sp, #36]	; 0x24
   265c8:	str	ip, [sp, #40]	; 0x28
   265cc:	str	r3, [fp]
   265d0:	beq	265f0 <__assert_fail@plt+0x13aa8>
   265d4:	mov	r3, r4
   265d8:	mov	r0, lr
   265dc:	mov	r2, #1
   265e0:	add	r1, sp, #32
   265e4:	bl	25ebc <__assert_fail@plt+0x13374>
   265e8:	subs	r3, r0, #0
   265ec:	bne	266ac <__assert_fail@plt+0x13b64>
   265f0:	cmp	r6, #0
   265f4:	beq	26614 <__assert_fail@plt+0x13acc>
   265f8:	mov	r3, r4
   265fc:	mov	r0, r9
   26600:	mov	r2, #0
   26604:	add	r1, sp, #36	; 0x24
   26608:	bl	25ebc <__assert_fail@plt+0x13374>
   2660c:	subs	r3, r0, #0
   26610:	bne	2672c <__assert_fail@plt+0x13be4>
   26614:	cmp	r7, #0
   26618:	beq	26638 <__assert_fail@plt+0x13af0>
   2661c:	mov	r3, r4
   26620:	mov	r0, r8
   26624:	mov	r2, #0
   26628:	add	r1, sp, #40	; 0x28
   2662c:	bl	25ebc <__assert_fail@plt+0x13374>
   26630:	subs	r3, r0, #0
   26634:	bne	266c8 <__assert_fail@plt+0x13b80>
   26638:	bl	1295c <fork@plt>
   2663c:	cmn	r0, #1
   26640:	str	r0, [fp]
   26644:	beq	26754 <__assert_fail@plt+0x13c0c>
   26648:	cmp	r0, #0
   2664c:	beq	268d8 <__assert_fail@plt+0x13d90>
   26650:	ldr	r0, [sp, #44]	; 0x2c
   26654:	cmn	r0, #1
   26658:	beq	26660 <__assert_fail@plt+0x13b18>
   2665c:	bl	12af4 <close@plt>
   26660:	ldr	r0, [sp, #56]	; 0x38
   26664:	cmn	r0, #1
   26668:	beq	26670 <__assert_fail@plt+0x13b28>
   2666c:	bl	12af4 <close@plt>
   26670:	ldr	r0, [sp, #64]	; 0x40
   26674:	cmn	r0, #1
   26678:	beq	26680 <__assert_fail@plt+0x13b38>
   2667c:	bl	12af4 <close@plt>
   26680:	cmp	r5, #0
   26684:	ldrne	r3, [sp, #32]
   26688:	strne	r3, [r5]
   2668c:	cmp	r6, #0
   26690:	ldrne	r3, [sp, #36]	; 0x24
   26694:	strne	r3, [r6]
   26698:	cmp	r7, #0
   2669c:	movne	r3, #0
   266a0:	ldrne	r2, [sp, #40]	; 0x28
   266a4:	moveq	r3, r7
   266a8:	strne	r2, [r7]
   266ac:	ldr	r1, [sp, #68]	; 0x44
   266b0:	ldr	r2, [sl]
   266b4:	mov	r0, r3
   266b8:	cmp	r1, r2
   266bc:	bne	268d4 <__assert_fail@plt+0x13d8c>
   266c0:	add	sp, sp, #76	; 0x4c
   266c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266c8:	ldr	r0, [sp, #32]
   266cc:	cmp	r0, #0
   266d0:	beq	2682c <__assert_fail@plt+0x13ce4>
   266d4:	str	r3, [sp, #16]
   266d8:	bl	12644 <gpgrt_fclose@plt>
   266dc:	ldr	r3, [sp, #16]
   266e0:	ldr	r0, [sp, #44]	; 0x2c
   266e4:	cmn	r0, #1
   266e8:	beq	266f8 <__assert_fail@plt+0x13bb0>
   266ec:	str	r3, [sp, #16]
   266f0:	bl	12af4 <close@plt>
   266f4:	ldr	r3, [sp, #16]
   266f8:	ldr	r0, [sp, #36]	; 0x24
   266fc:	cmp	r0, #0
   26700:	beq	26848 <__assert_fail@plt+0x13d00>
   26704:	str	r3, [sp, #16]
   26708:	bl	12644 <gpgrt_fclose@plt>
   2670c:	ldr	r3, [sp, #16]
   26710:	ldr	r0, [sp, #56]	; 0x38
   26714:	cmn	r0, #1
   26718:	beq	266ac <__assert_fail@plt+0x13b64>
   2671c:	str	r3, [sp, #16]
   26720:	bl	12af4 <close@plt>
   26724:	ldr	r3, [sp, #16]
   26728:	b	266ac <__assert_fail@plt+0x13b64>
   2672c:	ldr	r0, [sp, #32]
   26730:	cmp	r0, #0
   26734:	beq	26864 <__assert_fail@plt+0x13d1c>
   26738:	str	r3, [sp, #16]
   2673c:	bl	12644 <gpgrt_fclose@plt>
   26740:	ldr	r3, [sp, #16]
   26744:	ldr	r0, [sp, #44]	; 0x2c
   26748:	cmn	r0, #1
   2674c:	beq	266ac <__assert_fail@plt+0x13b64>
   26750:	b	2671c <__assert_fail@plt+0x13bd4>
   26754:	ldr	r3, [pc, #460]	; 26928 <__assert_fail@plt+0x13de0>
   26758:	ldr	r4, [r3]
   2675c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   26760:	mov	r2, #5
   26764:	ldr	r1, [pc, #448]	; 2692c <__assert_fail@plt+0x13de4>
   26768:	subs	r3, r0, #0
   2676c:	lslne	r4, r4, #24
   26770:	uxthne	r3, r3
   26774:	andne	r4, r4, #2130706432	; 0x7f000000
   26778:	orrne	r3, r4, r3
   2677c:	mov	r0, #0
   26780:	str	r3, [sp, #16]
   26784:	bl	124dc <dcgettext@plt>
   26788:	ldr	r3, [sp, #16]
   2678c:	mov	r4, r0
   26790:	mov	r0, r3
   26794:	bl	129d4 <gpg_strerror@plt>
   26798:	mov	r1, r0
   2679c:	mov	r0, r4
   267a0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   267a4:	ldr	r0, [sp, #32]
   267a8:	ldr	r3, [sp, #16]
   267ac:	cmp	r0, #0
   267b0:	beq	26880 <__assert_fail@plt+0x13d38>
   267b4:	bl	12644 <gpgrt_fclose@plt>
   267b8:	ldr	r3, [sp, #16]
   267bc:	ldr	r0, [sp, #44]	; 0x2c
   267c0:	cmn	r0, #1
   267c4:	beq	267d4 <__assert_fail@plt+0x13c8c>
   267c8:	str	r3, [sp, #16]
   267cc:	bl	12af4 <close@plt>
   267d0:	ldr	r3, [sp, #16]
   267d4:	ldr	r0, [sp, #36]	; 0x24
   267d8:	cmp	r0, #0
   267dc:	beq	2689c <__assert_fail@plt+0x13d54>
   267e0:	str	r3, [sp, #16]
   267e4:	bl	12644 <gpgrt_fclose@plt>
   267e8:	ldr	r3, [sp, #16]
   267ec:	ldr	r0, [sp, #56]	; 0x38
   267f0:	cmn	r0, #1
   267f4:	beq	26804 <__assert_fail@plt+0x13cbc>
   267f8:	str	r3, [sp, #16]
   267fc:	bl	12af4 <close@plt>
   26800:	ldr	r3, [sp, #16]
   26804:	ldr	r0, [sp, #40]	; 0x28
   26808:	cmp	r0, #0
   2680c:	beq	268b8 <__assert_fail@plt+0x13d70>
   26810:	str	r3, [sp, #16]
   26814:	bl	12644 <gpgrt_fclose@plt>
   26818:	ldr	r3, [sp, #16]
   2681c:	ldr	r0, [sp, #64]	; 0x40
   26820:	cmn	r0, #1
   26824:	beq	266ac <__assert_fail@plt+0x13b64>
   26828:	b	2671c <__assert_fail@plt+0x13bd4>
   2682c:	ldr	r0, [sp, #48]	; 0x30
   26830:	cmn	r0, #1
   26834:	beq	266e0 <__assert_fail@plt+0x13b98>
   26838:	str	r3, [sp, #16]
   2683c:	bl	12af4 <close@plt>
   26840:	ldr	r3, [sp, #16]
   26844:	b	266e0 <__assert_fail@plt+0x13b98>
   26848:	ldr	r0, [sp, #52]	; 0x34
   2684c:	cmn	r0, #1
   26850:	beq	26710 <__assert_fail@plt+0x13bc8>
   26854:	str	r3, [sp, #16]
   26858:	bl	12af4 <close@plt>
   2685c:	ldr	r3, [sp, #16]
   26860:	b	26710 <__assert_fail@plt+0x13bc8>
   26864:	ldr	r0, [sp, #48]	; 0x30
   26868:	cmn	r0, #1
   2686c:	beq	26744 <__assert_fail@plt+0x13bfc>
   26870:	str	r3, [sp, #16]
   26874:	bl	12af4 <close@plt>
   26878:	ldr	r3, [sp, #16]
   2687c:	b	26744 <__assert_fail@plt+0x13bfc>
   26880:	ldr	r0, [sp, #48]	; 0x30
   26884:	cmn	r0, #1
   26888:	beq	267bc <__assert_fail@plt+0x13c74>
   2688c:	str	r3, [sp, #16]
   26890:	bl	12af4 <close@plt>
   26894:	ldr	r3, [sp, #16]
   26898:	b	267bc <__assert_fail@plt+0x13c74>
   2689c:	ldr	r0, [sp, #52]	; 0x34
   268a0:	cmn	r0, #1
   268a4:	beq	267ec <__assert_fail@plt+0x13ca4>
   268a8:	str	r3, [sp, #16]
   268ac:	bl	12af4 <close@plt>
   268b0:	ldr	r3, [sp, #16]
   268b4:	b	267ec <__assert_fail@plt+0x13ca4>
   268b8:	ldr	r0, [sp, #60]	; 0x3c
   268bc:	cmn	r0, #1
   268c0:	beq	2681c <__assert_fail@plt+0x13cd4>
   268c4:	str	r3, [sp, #16]
   268c8:	bl	12af4 <close@plt>
   268cc:	ldr	r3, [sp, #16]
   268d0:	b	2681c <__assert_fail@plt+0x13cd4>
   268d4:	bl	124e8 <__stack_chk_fail@plt>
   268d8:	mov	r0, #25
   268dc:	bl	12a28 <gcry_control@plt>
   268e0:	ldr	r0, [sp, #32]
   268e4:	bl	12644 <gpgrt_fclose@plt>
   268e8:	ldr	r0, [sp, #36]	; 0x24
   268ec:	bl	12644 <gpgrt_fclose@plt>
   268f0:	ldr	r0, [sp, #40]	; 0x28
   268f4:	bl	12644 <gpgrt_fclose@plt>
   268f8:	ldr	r2, [sp, #28]
   268fc:	ldr	r3, [sp, #64]	; 0x40
   26900:	str	r2, [sp, #8]
   26904:	ldr	r2, [sp, #24]
   26908:	str	r3, [sp]
   2690c:	str	r2, [sp, #4]
   26910:	ldrd	r0, [sp, #16]
   26914:	ldr	r3, [sp, #56]	; 0x38
   26918:	ldr	r2, [sp, #44]	; 0x2c
   2691c:	bl	26218 <__assert_fail@plt+0x136d0>
   26920:	andeq	fp, r3, r0, lsl fp
   26924:	andeq	sl, r2, r0, lsl #27
   26928:	muleq	r3, r0, r3
   2692c:	andeq	sl, r2, r0, lsr lr
   26930:	push	{r4, r5, r6, r7, r8, r9, lr}
   26934:	sub	sp, sp, #20
   26938:	mov	r6, r0
   2693c:	ldr	r5, [sp, #52]	; 0x34
   26940:	mov	r7, r1
   26944:	mov	r8, r2
   26948:	mov	r9, r3
   2694c:	bl	1295c <fork@plt>
   26950:	cmn	r0, #1
   26954:	str	r0, [r5]
   26958:	beq	26978 <__assert_fail@plt+0x13e30>
   2695c:	cmp	r0, #0
   26960:	mov	r4, r0
   26964:	movne	r4, #0
   26968:	beq	269d0 <__assert_fail@plt+0x13e88>
   2696c:	mov	r0, r4
   26970:	add	sp, sp, #20
   26974:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26978:	ldr	r3, [pc, #124]	; 269fc <__assert_fail@plt+0x13eb4>
   2697c:	ldr	r5, [r3]
   26980:	bl	127c4 <gpg_err_code_from_syserror@plt>
   26984:	mov	r2, #5
   26988:	ldr	r1, [pc, #112]	; 26a00 <__assert_fail@plt+0x13eb8>
   2698c:	subs	r4, r0, #0
   26990:	lslne	r5, r5, #24
   26994:	andne	r5, r5, #2130706432	; 0x7f000000
   26998:	uxthne	r4, r4
   2699c:	mov	r0, #0
   269a0:	orrne	r4, r5, r4
   269a4:	bl	124dc <dcgettext@plt>
   269a8:	mov	r5, r0
   269ac:	bl	1280c <__errno_location@plt>
   269b0:	ldr	r0, [r0]
   269b4:	bl	126c8 <strerror@plt>
   269b8:	mov	r1, r0
   269bc:	mov	r0, r5
   269c0:	bl	1c744 <__assert_fail@plt+0x9bfc>
   269c4:	mov	r0, r4
   269c8:	add	sp, sp, #20
   269cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   269d0:	mov	r0, #25
   269d4:	bl	12a28 <gcry_control@plt>
   269d8:	ldr	r3, [sp, #48]	; 0x30
   269dc:	str	r4, [sp, #8]
   269e0:	str	r3, [sp]
   269e4:	str	r4, [sp, #4]
   269e8:	mov	r3, r9
   269ec:	mov	r2, r8
   269f0:	mov	r1, r7
   269f4:	mov	r0, r6
   269f8:	bl	26218 <__assert_fail@plt+0x136d0>
   269fc:	muleq	r3, r0, r3
   26a00:	andeq	sl, r2, r0, lsr lr
   26a04:	push	{r4, r5, r6, r7, r8, r9, lr}
   26a08:	subs	r8, r3, #0
   26a0c:	ldr	r7, [pc, #376]	; 26b8c <__assert_fail@plt+0x14044>
   26a10:	sub	sp, sp, #12
   26a14:	mov	r9, r0
   26a18:	ldr	r3, [r7]
   26a1c:	mov	r6, r1
   26a20:	str	r3, [sp, #4]
   26a24:	mvnne	r3, #0
   26a28:	strne	r3, [r8]
   26a2c:	cmn	r1, #1
   26a30:	beq	26b60 <__assert_fail@plt+0x14018>
   26a34:	clz	r5, r2
   26a38:	lsr	r5, r5, #5
   26a3c:	b	26a54 <__assert_fail@plt+0x13f0c>
   26a40:	bl	1280c <__errno_location@plt>
   26a44:	mov	r4, r0
   26a48:	ldr	r0, [r0]
   26a4c:	cmp	r0, #4
   26a50:	bne	26b08 <__assert_fail@plt+0x13fc0>
   26a54:	mov	r2, r5
   26a58:	mov	r1, sp
   26a5c:	mov	r0, r6
   26a60:	bl	12614 <waitpid@plt>
   26a64:	cmn	r0, #1
   26a68:	beq	26a40 <__assert_fail@plt+0x13ef8>
   26a6c:	cmp	r0, #0
   26a70:	moveq	r0, #62	; 0x3e
   26a74:	bne	26a90 <__assert_fail@plt+0x13f48>
   26a78:	ldr	r2, [sp, #4]
   26a7c:	ldr	r3, [r7]
   26a80:	cmp	r2, r3
   26a84:	bne	26b88 <__assert_fail@plt+0x14040>
   26a88:	add	sp, sp, #12
   26a8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26a90:	ldr	r3, [sp]
   26a94:	ands	r2, r3, #127	; 0x7f
   26a98:	bne	26ae8 <__assert_fail@plt+0x13fa0>
   26a9c:	asr	r3, r3, #8
   26aa0:	uxtb	r0, r3
   26aa4:	cmp	r0, #127	; 0x7f
   26aa8:	beq	26b68 <__assert_fail@plt+0x14020>
   26aac:	cmp	r0, #0
   26ab0:	beq	26b50 <__assert_fail@plt+0x14008>
   26ab4:	cmp	r8, #0
   26ab8:	strne	r0, [r8]
   26abc:	movne	r0, #1
   26ac0:	bne	26a78 <__assert_fail@plt+0x13f30>
   26ac4:	mov	r2, #5
   26ac8:	ldr	r1, [pc, #192]	; 26b90 <__assert_fail@plt+0x14048>
   26acc:	mov	r0, r8
   26ad0:	bl	124dc <dcgettext@plt>
   26ad4:	mov	r1, r9
   26ad8:	ldrb	r2, [sp, #1]
   26adc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26ae0:	mov	r0, #1
   26ae4:	b	26a78 <__assert_fail@plt+0x13f30>
   26ae8:	mov	r2, #5
   26aec:	ldr	r1, [pc, #160]	; 26b94 <__assert_fail@plt+0x1404c>
   26af0:	mov	r0, #0
   26af4:	bl	124dc <dcgettext@plt>
   26af8:	mov	r1, r9
   26afc:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26b00:	mov	r0, #1
   26b04:	b	26a78 <__assert_fail@plt+0x13f30>
   26b08:	bl	125e4 <gpg_err_code_from_errno@plt>
   26b0c:	mov	r2, #5
   26b10:	ldr	r1, [pc, #128]	; 26b98 <__assert_fail@plt+0x14050>
   26b14:	mov	r5, r0
   26b18:	mov	r0, #0
   26b1c:	bl	124dc <dcgettext@plt>
   26b20:	mov	r8, r0
   26b24:	ldr	r0, [r4]
   26b28:	bl	126c8 <strerror@plt>
   26b2c:	mov	r1, r6
   26b30:	mov	r2, r0
   26b34:	mov	r0, r8
   26b38:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26b3c:	cmp	r5, #0
   26b40:	uxthne	r0, r5
   26b44:	bne	26a78 <__assert_fail@plt+0x13f30>
   26b48:	mov	r0, #0
   26b4c:	b	26a78 <__assert_fail@plt+0x13f30>
   26b50:	cmp	r8, #0
   26b54:	strne	r0, [r8]
   26b58:	bne	26a78 <__assert_fail@plt+0x13f30>
   26b5c:	b	26b48 <__assert_fail@plt+0x14000>
   26b60:	mov	r0, #55	; 0x37
   26b64:	b	26a78 <__assert_fail@plt+0x13f30>
   26b68:	mov	r0, r2
   26b6c:	ldr	r1, [pc, #40]	; 26b9c <__assert_fail@plt+0x14054>
   26b70:	mov	r2, #5
   26b74:	bl	124dc <dcgettext@plt>
   26b78:	mov	r1, r9
   26b7c:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26b80:	mov	r0, #115	; 0x73
   26b84:	b	26a78 <__assert_fail@plt+0x13f30>
   26b88:	bl	124e8 <__stack_chk_fail@plt>
   26b8c:	andeq	fp, r3, r0, lsl fp
   26b90:	andeq	sl, r2, r8, ror lr
   26b94:	muleq	r2, ip, lr
   26b98:			; <UNDEFINED> instruction: 0x0002aebc
   26b9c:	andeq	sl, r2, ip, asr #28
   26ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ba4:	sub	sp, sp, #36	; 0x24
   26ba8:	mov	sl, r1
   26bac:	str	r0, [sp, #16]
   26bb0:	ldr	r0, [pc, #896]	; 26f38 <__assert_fail@plt+0x143f0>
   26bb4:	ldr	ip, [sp, #72]	; 0x48
   26bb8:	str	r3, [sp, #12]
   26bbc:	cmp	ip, #0
   26bc0:	ldr	r0, [r0]
   26bc4:	movne	r3, #0
   26bc8:	str	ip, [sp, #4]
   26bcc:	mov	r7, r2
   26bd0:	str	r0, [sp, #28]
   26bd4:	strne	r3, [sp, #8]
   26bd8:	beq	26ed0 <__assert_fail@plt+0x14388>
   26bdc:	cmp	r7, #0
   26be0:	beq	26efc <__assert_fail@plt+0x143b4>
   26be4:	ldr	ip, [sl]
   26be8:	cmn	ip, #1
   26bec:	beq	26e90 <__assert_fail@plt+0x14348>
   26bf0:	ldr	r3, [sp, #4]
   26bf4:	ldr	r9, [pc, #832]	; 26f3c <__assert_fail@plt+0x143f4>
   26bf8:	sub	r3, r3, #4
   26bfc:	mov	r6, r3
   26c00:	mov	r4, sl
   26c04:	mov	r8, r7
   26c08:	mov	r5, #0
   26c0c:	str	r3, [sp, #20]
   26c10:	ldr	r2, [r9]
   26c14:	cmp	r2, #0
   26c18:	beq	26c48 <__assert_fail@plt+0x14100>
   26c1c:	ldr	r3, [r2]
   26c20:	cmp	r3, ip
   26c24:	bne	26c3c <__assert_fail@plt+0x140f4>
   26c28:	b	26ea8 <__assert_fail@plt+0x14360>
   26c2c:	ldr	r1, [r3]
   26c30:	cmp	r1, ip
   26c34:	beq	26c70 <__assert_fail@plt+0x14128>
   26c38:	mov	r2, r3
   26c3c:	ldr	r3, [r2, #8]
   26c40:	cmp	r3, #0
   26c44:	bne	26c2c <__assert_fail@plt+0x140e4>
   26c48:	add	r3, r5, #1
   26c4c:	mvn	fp, #0
   26c50:	cmp	r7, r3
   26c54:	str	fp, [r6, #4]!
   26c58:	beq	26c9c <__assert_fail@plt+0x14154>
   26c5c:	ldr	ip, [r4, #4]!
   26c60:	cmn	ip, #1
   26c64:	beq	26e90 <__assert_fail@plt+0x14348>
   26c68:	mov	r5, r3
   26c6c:	b	26c10 <__assert_fail@plt+0x140c8>
   26c70:	add	r2, r2, #8
   26c74:	ldr	r1, [r3, #8]
   26c78:	mov	r0, r3
   26c7c:	str	r1, [r2]
   26c80:	ldr	fp, [r3, #4]
   26c84:	bl	124a0 <gcry_free@plt>
   26c88:	add	r3, r5, #1
   26c8c:	cmp	r7, r3
   26c90:	sub	r8, r8, #1
   26c94:	str	fp, [r6, #4]!
   26c98:	bne	26c5c <__assert_fail@plt+0x14114>
   26c9c:	cmp	r8, #0
   26ca0:	beq	26e88 <__assert_fail@plt+0x14340>
   26ca4:	ldr	r3, [sp, #12]
   26ca8:	clz	r6, r3
   26cac:	lsr	r6, r6, #5
   26cb0:	b	26cc4 <__assert_fail@plt+0x1417c>
   26cb4:	bl	1280c <__errno_location@plt>
   26cb8:	ldr	r3, [r0]
   26cbc:	cmp	r3, #4
   26cc0:	bne	26d44 <__assert_fail@plt+0x141fc>
   26cc4:	mov	r2, r6
   26cc8:	add	r1, sp, #24
   26ccc:	mvn	r0, #0
   26cd0:	bl	12614 <waitpid@plt>
   26cd4:	cmn	r0, #1
   26cd8:	mov	r4, r0
   26cdc:	beq	26cb4 <__assert_fail@plt+0x1416c>
   26ce0:	cmp	r0, #0
   26ce4:	beq	26f04 <__assert_fail@plt+0x143bc>
   26ce8:	ldr	r3, [sl]
   26cec:	cmp	r0, r3
   26cf0:	beq	26ef4 <__assert_fail@plt+0x143ac>
   26cf4:	mov	r2, sl
   26cf8:	mov	r3, #0
   26cfc:	b	26d10 <__assert_fail@plt+0x141c8>
   26d00:	ldr	r1, [r2, #4]!
   26d04:	lsl	r0, r3, #2
   26d08:	cmp	r1, r4
   26d0c:	beq	26e64 <__assert_fail@plt+0x1431c>
   26d10:	cmp	r5, r3
   26d14:	add	r3, r3, #1
   26d18:	bne	26d00 <__assert_fail@plt+0x141b8>
   26d1c:	mov	r0, #12
   26d20:	ldr	fp, [sp, #24]
   26d24:	bl	12338 <gcry_malloc@plt>
   26d28:	cmp	r0, #0
   26d2c:	beq	26f0c <__assert_fail@plt+0x143c4>
   26d30:	ldr	r3, [r9]
   26d34:	stm	r0, {r4, fp}
   26d38:	str	r3, [r0, #8]
   26d3c:	str	r0, [r9]
   26d40:	b	26cc4 <__assert_fail@plt+0x1417c>
   26d44:	mov	r4, r0
   26d48:	mov	r0, r3
   26d4c:	bl	125e4 <gpg_err_code_from_errno@plt>
   26d50:	mov	r2, #5
   26d54:	ldr	r1, [pc, #484]	; 26f40 <__assert_fail@plt+0x143f8>
   26d58:	str	r0, [sp, #12]
   26d5c:	mov	r0, #0
   26d60:	bl	124dc <dcgettext@plt>
   26d64:	mov	r5, r0
   26d68:	ldr	r0, [r4]
   26d6c:	bl	126c8 <strerror@plt>
   26d70:	mov	r1, r0
   26d74:	mov	r0, r5
   26d78:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26d7c:	ldr	r3, [sp, #12]
   26d80:	ldr	r2, [sp, #4]
   26d84:	ldr	r4, [pc, #440]	; 26f44 <__assert_fail@plt+0x143fc>
   26d88:	add	r7, r2, r7, lsl #2
   26d8c:	ldr	r5, [pc, #436]	; 26f48 <__assert_fail@plt+0x14400>
   26d90:	ldr	r6, [pc, #436]	; 26f4c <__assert_fail@plt+0x14404>
   26d94:	sub	r7, r7, #4
   26d98:	ldr	r8, [sp, #20]
   26d9c:	ldr	r9, [sp, #16]
   26da0:	b	26dcc <__assert_fail@plt+0x14284>
   26da4:	mov	r2, #5
   26da8:	mov	r1, r4
   26dac:	mov	r0, #0
   26db0:	bl	124dc <dcgettext@plt>
   26db4:	ldr	r1, [r9]
   26db8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26dbc:	mov	r3, #1
   26dc0:	cmp	r8, r7
   26dc4:	add	r9, r9, #4
   26dc8:	beq	26e34 <__assert_fail@plt+0x142ec>
   26dcc:	ldr	r2, [r8, #4]!
   26dd0:	cmn	r2, #1
   26dd4:	beq	26dc0 <__assert_fail@plt+0x14278>
   26dd8:	ands	r0, r2, #127	; 0x7f
   26ddc:	bne	26da4 <__assert_fail@plt+0x1425c>
   26de0:	asr	r2, r2, #8
   26de4:	uxtb	r2, r2
   26de8:	cmp	r2, #127	; 0x7f
   26dec:	beq	26eb4 <__assert_fail@plt+0x1436c>
   26df0:	cmp	r2, #0
   26df4:	beq	26dc0 <__assert_fail@plt+0x14278>
   26df8:	ldr	r3, [sp, #8]
   26dfc:	cmp	r3, #0
   26e00:	streq	r2, [r8]
   26e04:	moveq	r3, #1
   26e08:	beq	26dc0 <__assert_fail@plt+0x14278>
   26e0c:	mov	r2, #5
   26e10:	mov	r1, r5
   26e14:	bl	124dc <dcgettext@plt>
   26e18:	ldr	r1, [r9]
   26e1c:	ldrb	r2, [r8, #1]
   26e20:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26e24:	cmp	r8, r7
   26e28:	mov	r3, #1
   26e2c:	add	r9, r9, #4
   26e30:	bne	26dcc <__assert_fail@plt+0x14284>
   26e34:	ldr	r0, [sp, #8]
   26e38:	str	r3, [sp, #4]
   26e3c:	bl	124a0 <gcry_free@plt>
   26e40:	ldr	r3, [sp, #4]
   26e44:	uxth	r0, r3
   26e48:	ldr	r3, [pc, #232]	; 26f38 <__assert_fail@plt+0x143f0>
   26e4c:	ldr	r2, [sp, #28]
   26e50:	ldr	r3, [r3]
   26e54:	cmp	r2, r3
   26e58:	bne	26f34 <__assert_fail@plt+0x143ec>
   26e5c:	add	sp, sp, #36	; 0x24
   26e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e64:	ldr	r3, [sp, #4]
   26e68:	add	r0, r3, r0
   26e6c:	ldr	r3, [r0]
   26e70:	cmn	r3, #1
   26e74:	bne	26f20 <__assert_fail@plt+0x143d8>
   26e78:	ldr	r3, [sp, #24]
   26e7c:	subs	r8, r8, #1
   26e80:	str	r3, [r0]
   26e84:	bne	26cc4 <__assert_fail@plt+0x1417c>
   26e88:	mov	r3, #0
   26e8c:	b	26d80 <__assert_fail@plt+0x14238>
   26e90:	ldr	r3, [pc, #184]	; 26f50 <__assert_fail@plt+0x14408>
   26e94:	ldr	r3, [r3]
   26e98:	lsl	r3, r3, #24
   26e9c:	and	r3, r3, #2130706432	; 0x7f000000
   26ea0:	orr	r0, r3, #55	; 0x37
   26ea4:	b	26e48 <__assert_fail@plt+0x14300>
   26ea8:	mov	r3, r2
   26eac:	ldr	r2, [pc, #136]	; 26f3c <__assert_fail@plt+0x143f4>
   26eb0:	b	26c74 <__assert_fail@plt+0x1412c>
   26eb4:	mov	r2, #5
   26eb8:	mov	r1, r6
   26ebc:	bl	124dc <dcgettext@plt>
   26ec0:	ldr	r1, [r9]
   26ec4:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26ec8:	mov	r3, #115	; 0x73
   26ecc:	b	26dc0 <__assert_fail@plt+0x14278>
   26ed0:	lsl	r0, r2, #2
   26ed4:	bl	12338 <gcry_malloc@plt>
   26ed8:	subs	r3, r0, #0
   26edc:	str	r3, [sp, #4]
   26ee0:	ldrne	r3, [sp, #4]
   26ee4:	strne	r3, [sp, #8]
   26ee8:	bne	26bdc <__assert_fail@plt+0x14094>
   26eec:	bl	127c4 <gpg_err_code_from_syserror@plt>
   26ef0:	b	26e48 <__assert_fail@plt+0x14300>
   26ef4:	ldr	r0, [sp, #4]
   26ef8:	b	26e6c <__assert_fail@plt+0x14324>
   26efc:	mov	r3, r7
   26f00:	b	26e34 <__assert_fail@plt+0x142ec>
   26f04:	mov	r3, #62	; 0x3e
   26f08:	b	26d80 <__assert_fail@plt+0x14238>
   26f0c:	bl	127c4 <gpg_err_code_from_syserror@plt>
   26f10:	cmp	r0, #0
   26f14:	beq	26cc4 <__assert_fail@plt+0x1417c>
   26f18:	mov	r3, r0
   26f1c:	b	26d80 <__assert_fail@plt+0x14238>
   26f20:	mov	r1, r4
   26f24:	ldr	r0, [pc, #40]	; 26f54 <__assert_fail@plt+0x1440c>
   26f28:	bl	1c744 <__assert_fail@plt+0x9bfc>
   26f2c:	mov	r3, #1
   26f30:	b	26d80 <__assert_fail@plt+0x14238>
   26f34:	bl	124e8 <__stack_chk_fail@plt>
   26f38:	andeq	fp, r3, r0, lsl fp
   26f3c:	andeq	ip, r3, r0, lsl #11
   26f40:	andeq	sl, r2, r0, lsl #30
   26f44:	muleq	r2, ip, lr
   26f48:	andeq	sl, r2, r8, ror lr
   26f4c:	andeq	sl, r2, ip, asr #28
   26f50:	muleq	r3, r0, r3
   26f54:	andeq	sl, r2, ip, ror #29
   26f58:	bx	lr
   26f5c:	push	{r4, r5, r6, r7, lr}
   26f60:	sub	sp, sp, #20
   26f64:	mov	r7, r1
   26f68:	mov	r6, r2
   26f6c:	mov	r5, r0
   26f70:	bl	12404 <getuid@plt>
   26f74:	mov	r4, r0
   26f78:	bl	12584 <geteuid@plt>
   26f7c:	cmp	r4, r0
   26f80:	beq	26fa0 <__assert_fail@plt+0x14458>
   26f84:	ldr	r3, [pc, #392]	; 27114 <__assert_fail@plt+0x145cc>
   26f88:	ldr	r0, [r3]
   26f8c:	lsl	r0, r0, #24
   26f90:	and	r0, r0, #2130706432	; 0x7f000000
   26f94:	orr	r0, r0, #59	; 0x3b
   26f98:	add	sp, sp, #20
   26f9c:	pop	{r4, r5, r6, r7, pc}
   26fa0:	mov	r1, #1
   26fa4:	mov	r0, r5
   26fa8:	bl	128f0 <access@plt>
   26fac:	subs	r4, r0, #0
   26fb0:	bne	27008 <__assert_fail@plt+0x144c0>
   26fb4:	bl	1295c <fork@plt>
   26fb8:	cmn	r0, #1
   26fbc:	beq	27050 <__assert_fail@plt+0x14508>
   26fc0:	cmp	r0, #0
   26fc4:	bne	27030 <__assert_fail@plt+0x144e8>
   26fc8:	mov	r0, #25
   26fcc:	bl	12a28 <gcry_control@plt>
   26fd0:	bl	127a0 <setsid@plt>
   26fd4:	cmn	r0, #1
   26fd8:	beq	270c4 <__assert_fail@plt+0x1457c>
   26fdc:	ldr	r0, [pc, #308]	; 27118 <__assert_fail@plt+0x145d0>
   26fe0:	bl	12578 <chdir@plt>
   26fe4:	subs	r4, r0, #0
   26fe8:	bne	270c4 <__assert_fail@plt+0x1457c>
   26fec:	bl	1295c <fork@plt>
   26ff0:	cmn	r0, #1
   26ff4:	beq	270c4 <__assert_fail@plt+0x1457c>
   26ff8:	cmp	r0, #0
   26ffc:	beq	270cc <__assert_fail@plt+0x14584>
   27000:	mov	r0, r4
   27004:	bl	12470 <_exit@plt>
   27008:	ldr	r3, [pc, #260]	; 27114 <__assert_fail@plt+0x145cc>
   2700c:	ldr	r4, [r3]
   27010:	bl	127c4 <gpg_err_code_from_syserror@plt>
   27014:	cmp	r0, #0
   27018:	beq	27044 <__assert_fail@plt+0x144fc>
   2701c:	lsl	r4, r4, #24
   27020:	and	r4, r4, #2130706432	; 0x7f000000
   27024:	uxth	r0, r0
   27028:	orr	r0, r4, r0
   2702c:	b	26f98 <__assert_fail@plt+0x14450>
   27030:	mov	r2, r4
   27034:	mov	r1, r4
   27038:	bl	12614 <waitpid@plt>
   2703c:	cmn	r0, #1
   27040:	beq	270a4 <__assert_fail@plt+0x1455c>
   27044:	mov	r0, #0
   27048:	add	sp, sp, #20
   2704c:	pop	{r4, r5, r6, r7, pc}
   27050:	mov	r2, #5
   27054:	ldr	r1, [pc, #192]	; 2711c <__assert_fail@plt+0x145d4>
   27058:	mov	r0, r4
   2705c:	bl	124dc <dcgettext@plt>
   27060:	mov	r4, r0
   27064:	bl	1280c <__errno_location@plt>
   27068:	ldr	r0, [r0]
   2706c:	bl	126c8 <strerror@plt>
   27070:	mov	r1, r0
   27074:	mov	r0, r4
   27078:	bl	1c744 <__assert_fail@plt+0x9bfc>
   2707c:	ldr	r3, [pc, #144]	; 27114 <__assert_fail@plt+0x145cc>
   27080:	ldr	r4, [r3]
   27084:	bl	127c4 <gpg_err_code_from_syserror@plt>
   27088:	cmp	r0, #0
   2708c:	beq	27044 <__assert_fail@plt+0x144fc>
   27090:	lsl	r3, r4, #24
   27094:	and	r3, r3, #2130706432	; 0x7f000000
   27098:	uxth	r0, r0
   2709c:	orr	r0, r3, r0
   270a0:	b	26f98 <__assert_fail@plt+0x14450>
   270a4:	bl	1280c <__errno_location@plt>
   270a8:	ldr	r0, [r0]
   270ac:	bl	126c8 <strerror@plt>
   270b0:	mov	r1, r0
   270b4:	ldr	r0, [pc, #100]	; 27120 <__assert_fail@plt+0x145d8>
   270b8:	bl	1c744 <__assert_fail@plt+0x9bfc>
   270bc:	mov	r0, r4
   270c0:	b	26f98 <__assert_fail@plt+0x14450>
   270c4:	mov	r0, #1
   270c8:	bl	12470 <_exit@plt>
   270cc:	cmp	r6, #0
   270d0:	subne	r6, r6, #4
   270d4:	bne	270e4 <__assert_fail@plt+0x1459c>
   270d8:	b	270f0 <__assert_fail@plt+0x145a8>
   270dc:	bl	128e4 <gcry_xstrdup@plt>
   270e0:	bl	12968 <putenv@plt>
   270e4:	ldr	r0, [r6, #4]!
   270e8:	cmp	r0, #0
   270ec:	bne	270dc <__assert_fail@plt+0x14594>
   270f0:	mov	r2, #0
   270f4:	mvn	r3, #0
   270f8:	str	r2, [sp, #8]
   270fc:	str	r2, [sp, #4]
   27100:	mov	r1, r7
   27104:	mov	r0, r5
   27108:	str	r3, [sp]
   2710c:	mov	r2, r3
   27110:	bl	26218 <__assert_fail@plt+0x136d0>
   27114:	muleq	r3, r0, r3
   27118:	andeq	r9, r2, r8, lsr r1
   2711c:	andeq	sl, r2, r0, lsr lr
   27120:	andeq	sl, r2, r0, lsr pc
   27124:	cmn	r0, #1
   27128:	bxeq	lr
   2712c:	mov	r1, #15
   27130:	b	12728 <kill@plt>
   27134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27138:	sub	sp, sp, #12
   2713c:	ldr	r9, [pc, #228]	; 27228 <__assert_fail@plt+0x146e0>
   27140:	str	r1, [sp]
   27144:	mov	r1, #64	; 0x40
   27148:	str	r2, [sp, #4]
   2714c:	bl	127ac <strchr@plt>
   27150:	ldr	r8, [pc, #212]	; 2722c <__assert_fail@plt+0x146e4>
   27154:	mov	r4, r0
   27158:	cmp	r4, #0
   2715c:	beq	271a4 <__assert_fail@plt+0x1465c>
   27160:	add	r5, r4, #1
   27164:	mov	r0, r5
   27168:	mov	r1, #64	; 0x40
   2716c:	bl	127ac <strchr@plt>
   27170:	ldrb	r3, [r4, #1]
   27174:	sub	r3, r3, #65	; 0x41
   27178:	cmp	r3, #25
   2717c:	mov	r7, r0
   27180:	bhi	27198 <__assert_fail@plt+0x14650>
   27184:	cmp	r0, #0
   27188:	bne	271b4 <__assert_fail@plt+0x1466c>
   2718c:	mov	r0, r7
   27190:	add	sp, sp, #12
   27194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27198:	mov	r4, r7
   2719c:	cmp	r4, #0
   271a0:	bne	27160 <__assert_fail@plt+0x14618>
   271a4:	mov	r7, r4
   271a8:	mov	r0, r7
   271ac:	add	sp, sp, #12
   271b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271b4:	sub	r6, r0, r5
   271b8:	mov	fp, r9
   271bc:	mov	r0, #5
   271c0:	mov	sl, #0
   271c4:	b	271e0 <__assert_fail@plt+0x14698>
   271c8:	add	sl, sl, #1
   271cc:	cmp	sl, #10
   271d0:	beq	27198 <__assert_fail@plt+0x14650>
   271d4:	ldr	fp, [r8, sl, lsl #3]
   271d8:	mov	r0, fp
   271dc:	bl	12788 <strlen@plt>
   271e0:	cmp	r6, r0
   271e4:	bne	271c8 <__assert_fail@plt+0x14680>
   271e8:	mov	r0, fp
   271ec:	mov	r2, r6
   271f0:	mov	r1, r5
   271f4:	bl	124ac <memcmp@plt>
   271f8:	cmp	r0, #0
   271fc:	bne	271c8 <__assert_fail@plt+0x14680>
   27200:	ldr	r3, [sp]
   27204:	ldr	r2, [pc, #32]	; 2722c <__assert_fail@plt+0x146e4>
   27208:	str	r4, [r3]
   2720c:	add	r3, r2, sl, lsl #3
   27210:	ldr	r2, [sp, #4]
   27214:	str	r7, [r2]
   27218:	ldr	r7, [r3, #4]
   2721c:	mov	r0, r7
   27220:	add	sp, sp, #12
   27224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27228:			; <UNDEFINED> instruction: 0x0002afb4
   2722c:	andeq	sl, r2, r4, ror #30
   27230:	cmp	r0, #0
   27234:	bxeq	lr
   27238:	b	27134 <__assert_fail@plt+0x145ec>
   2723c:	push	{r4, r5, r6, r7, r8, lr}
   27240:	sub	sp, sp, #32
   27244:	ldr	r8, [pc, #336]	; 2739c <__assert_fail@plt+0x14854>
   27248:	ldr	r7, [pc, #336]	; 273a0 <__assert_fail@plt+0x14858>
   2724c:	mov	r5, r0
   27250:	ldr	r3, [r8]
   27254:	ldr	r2, [r7]
   27258:	cmp	r3, #0
   2725c:	str	r2, [sp, #28]
   27260:	bne	27274 <__assert_fail@plt+0x1472c>
   27264:	b	272a8 <__assert_fail@plt+0x14760>
   27268:	ldr	r3, [r3]
   2726c:	cmp	r3, #0
   27270:	beq	272a8 <__assert_fail@plt+0x14760>
   27274:	ldr	r2, [r3, #4]
   27278:	cmp	r5, r2
   2727c:	bne	27268 <__assert_fail@plt+0x14720>
   27280:	ldr	r4, [r3, #8]
   27284:	cmp	r4, #0
   27288:	beq	272b0 <__assert_fail@plt+0x14768>
   2728c:	ldr	r2, [sp, #28]
   27290:	ldr	r3, [r7]
   27294:	mov	r0, r4
   27298:	cmp	r2, r3
   2729c:	bne	27380 <__assert_fail@plt+0x14838>
   272a0:	add	sp, sp, #32
   272a4:	pop	{r4, r5, r6, r7, r8, pc}
   272a8:	cmp	r5, #0
   272ac:	beq	27378 <__assert_fail@plt+0x14830>
   272b0:	add	r2, sp, #8
   272b4:	add	r1, sp, #4
   272b8:	mov	r0, r5
   272bc:	bl	27134 <__assert_fail@plt+0x145ec>
   272c0:	subs	r6, r0, #0
   272c4:	beq	27378 <__assert_fail@plt+0x14830>
   272c8:	mov	r0, r5
   272cc:	bl	12788 <strlen@plt>
   272d0:	mov	r4, r5
   272d4:	add	r1, r0, #100	; 0x64
   272d8:	add	r0, sp, #12
   272dc:	bl	273e8 <__assert_fail@plt+0x148a0>
   272e0:	b	272fc <__assert_fail@plt+0x147b4>
   272e4:	add	r2, sp, #8
   272e8:	add	r1, sp, #4
   272ec:	mov	r0, r4
   272f0:	bl	27134 <__assert_fail@plt+0x145ec>
   272f4:	subs	r6, r0, #0
   272f8:	beq	27328 <__assert_fail@plt+0x147e0>
   272fc:	ldr	r2, [sp, #4]
   27300:	mov	r1, r4
   27304:	sub	r2, r2, r4
   27308:	add	r0, sp, #12
   2730c:	bl	27498 <__assert_fail@plt+0x14950>
   27310:	mov	r1, r6
   27314:	add	r0, sp, #12
   27318:	bl	27560 <__assert_fail@plt+0x14a18>
   2731c:	ldr	r4, [sp, #8]
   27320:	adds	r4, r4, #1
   27324:	bne	272e4 <__assert_fail@plt+0x1479c>
   27328:	mov	r1, r4
   2732c:	add	r0, sp, #12
   27330:	bl	27560 <__assert_fail@plt+0x14a18>
   27334:	mov	r2, #1
   27338:	ldr	r1, [pc, #100]	; 273a4 <__assert_fail@plt+0x1485c>
   2733c:	add	r0, sp, #12
   27340:	bl	27498 <__assert_fail@plt+0x14950>
   27344:	add	r0, sp, #12
   27348:	mov	r1, #0
   2734c:	bl	27660 <__assert_fail@plt+0x14b18>
   27350:	subs	r4, r0, #0
   27354:	beq	27384 <__assert_fail@plt+0x1483c>
   27358:	mov	r0, #12
   2735c:	bl	122fc <gcry_xmalloc@plt>
   27360:	ldr	r3, [r8]
   27364:	str	r5, [r0, #4]
   27368:	str	r4, [r0, #8]
   2736c:	str	r3, [r0]
   27370:	str	r0, [r8]
   27374:	b	2728c <__assert_fail@plt+0x14744>
   27378:	mov	r4, r5
   2737c:	b	2728c <__assert_fail@plt+0x14744>
   27380:	bl	124e8 <__stack_chk_fail@plt>
   27384:	bl	1280c <__errno_location@plt>
   27388:	ldr	r0, [r0]
   2738c:	bl	126c8 <strerror@plt>
   27390:	mov	r1, r0
   27394:	ldr	r0, [pc, #12]	; 273a8 <__assert_fail@plt+0x14860>
   27398:	bl	1c7c8 <__assert_fail@plt+0x9c80>
   2739c:	andeq	ip, r3, r8, asr #10
   273a0:	andeq	fp, r3, r0, lsl fp
   273a4:	muleq	r2, r8, r9
   273a8:			; <UNDEFINED> instruction: 0x0002afbc
   273ac:	push	{r4, lr}
   273b0:	mov	r4, r0
   273b4:	ldr	r0, [r0, #8]
   273b8:	cmp	r0, #0
   273bc:	beq	273d8 <__assert_fail@plt+0x14890>
   273c0:	ldr	r1, [r4]
   273c4:	bl	1caf0 <__assert_fail@plt+0x9fa8>
   273c8:	ldr	r0, [r4, #8]
   273cc:	bl	124a0 <gcry_free@plt>
   273d0:	mov	r3, #0
   273d4:	str	r3, [r4, #8]
   273d8:	ldr	r0, [r4, #12]
   273dc:	bl	129a4 <gpg_err_set_errno@plt>
   273e0:	mov	r0, #0
   273e4:	pop	{r4, pc}
   273e8:	push	{r4, lr}
   273ec:	mov	r4, r0
   273f0:	mov	r3, #0
   273f4:	str	r1, [r0, #4]
   273f8:	mov	r0, r1
   273fc:	str	r3, [r4]
   27400:	str	r3, [r4, #12]
   27404:	bl	12338 <gcry_malloc@plt>
   27408:	cmp	r0, #0
   2740c:	str	r0, [r4, #8]
   27410:	popne	{r4, pc}
   27414:	bl	1280c <__errno_location@plt>
   27418:	ldr	r3, [r0]
   2741c:	str	r3, [r4, #12]
   27420:	pop	{r4, pc}
   27424:	push	{r4, lr}
   27428:	mov	r4, r0
   2742c:	mov	r3, #0
   27430:	str	r1, [r0, #4]
   27434:	mov	r0, r1
   27438:	str	r3, [r4]
   2743c:	str	r3, [r4, #12]
   27440:	bl	12680 <gcry_malloc_secure@plt>
   27444:	cmp	r0, #0
   27448:	str	r0, [r4, #8]
   2744c:	popne	{r4, pc}
   27450:	bl	1280c <__errno_location@plt>
   27454:	ldr	r3, [r0]
   27458:	str	r3, [r4, #12]
   2745c:	pop	{r4, pc}
   27460:	ldr	r3, [r0, #12]
   27464:	cmp	r3, #0
   27468:	bxne	lr
   2746c:	ldr	r2, [r0]
   27470:	cmp	r2, r1
   27474:	bhi	27480 <__assert_fail@plt+0x14938>
   27478:	str	r3, [r0]
   2747c:	bx	lr
   27480:	ldr	r3, [r0, #8]
   27484:	sub	r2, r2, r1
   27488:	str	r2, [r0]
   2748c:	add	r1, r3, r1
   27490:	mov	r0, r3
   27494:	b	1241c <memmove@plt>
   27498:	ldr	ip, [r0, #12]
   2749c:	clz	r3, r2
   274a0:	cmp	ip, #0
   274a4:	lsr	r3, r3, #5
   274a8:	movne	r3, #1
   274ac:	cmp	r3, #0
   274b0:	bxne	lr
   274b4:	ldr	r3, [r0]
   274b8:	push	{r4, r5, r6, lr}
   274bc:	mov	r6, r1
   274c0:	ldr	r1, [r0, #4]
   274c4:	mov	r5, r2
   274c8:	add	r2, r3, r2
   274cc:	cmp	r2, r1
   274d0:	mov	r4, r0
   274d4:	ldr	r0, [r0, #8]
   274d8:	bcc	274fc <__assert_fail@plt+0x149b4>
   274dc:	add	r3, r5, #1024	; 0x400
   274e0:	add	r1, r3, r1
   274e4:	str	r1, [r4, #4]
   274e8:	bl	128fc <gcry_realloc@plt>
   274ec:	cmp	r0, #0
   274f0:	beq	2751c <__assert_fail@plt+0x149d4>
   274f4:	ldr	r3, [r4]
   274f8:	str	r0, [r4, #8]
   274fc:	mov	r2, r5
   27500:	mov	r1, r6
   27504:	add	r0, r0, r3
   27508:	bl	1247c <memcpy@plt>
   2750c:	ldr	r2, [r4]
   27510:	add	r5, r2, r5
   27514:	str	r5, [r4]
   27518:	pop	{r4, r5, r6, pc}
   2751c:	bl	1280c <__errno_location@plt>
   27520:	ldr	r1, [r4]
   27524:	ldr	r3, [r0]
   27528:	ldr	r0, [r4, #8]
   2752c:	cmp	r3, #0
   27530:	moveq	r3, #12
   27534:	str	r3, [r4, #12]
   27538:	pop	{r4, r5, r6, lr}
   2753c:	b	1caf0 <__assert_fail@plt+0x9fa8>
   27540:	cmp	r1, #0
   27544:	beq	27558 <__assert_fail@plt+0x14a10>
   27548:	push	{r4, lr}
   2754c:	bl	27498 <__assert_fail@plt+0x14950>
   27550:	mov	r0, #0
   27554:	pop	{r4, pc}
   27558:	mov	r0, #0
   2755c:	bx	lr
   27560:	push	{r4, r5, r6, lr}
   27564:	mov	r5, r0
   27568:	mov	r0, r1
   2756c:	mov	r4, r1
   27570:	bl	12788 <strlen@plt>
   27574:	mov	r1, r4
   27578:	mov	r2, r0
   2757c:	mov	r0, r5
   27580:	pop	{r4, r5, r6, lr}
   27584:	b	27498 <__assert_fail@plt+0x14950>
   27588:	push	{r1, r2, r3}
   2758c:	push	{r4, r5, r6, lr}
   27590:	mov	r5, r0
   27594:	ldr	r4, [pc, #136]	; 27624 <__assert_fail@plt+0x14adc>
   27598:	sub	sp, sp, #20
   2759c:	add	r3, sp, #40	; 0x28
   275a0:	ldr	r0, [r4]
   275a4:	mov	r2, r3
   275a8:	str	r0, [sp, #12]
   275ac:	ldr	r1, [sp, #36]	; 0x24
   275b0:	add	r0, sp, #8
   275b4:	str	r3, [sp, #4]
   275b8:	bl	12878 <gpgrt_vasprintf@plt>
   275bc:	cmp	r0, #0
   275c0:	blt	27608 <__assert_fail@plt+0x14ac0>
   275c4:	ldr	r6, [sp, #8]
   275c8:	mov	r0, r6
   275cc:	bl	12788 <strlen@plt>
   275d0:	mov	r1, r6
   275d4:	mov	r2, r0
   275d8:	mov	r0, r5
   275dc:	bl	27498 <__assert_fail@plt+0x14950>
   275e0:	ldr	r0, [sp, #8]
   275e4:	bl	124a0 <gcry_free@plt>
   275e8:	ldr	r2, [sp, #12]
   275ec:	ldr	r3, [r4]
   275f0:	cmp	r2, r3
   275f4:	bne	27620 <__assert_fail@plt+0x14ad8>
   275f8:	add	sp, sp, #20
   275fc:	pop	{r4, r5, r6, lr}
   27600:	add	sp, sp, #12
   27604:	bx	lr
   27608:	bl	1280c <__errno_location@plt>
   2760c:	ldr	r3, [r0]
   27610:	cmp	r3, #0
   27614:	moveq	r3, #12
   27618:	str	r3, [r5, #12]
   2761c:	b	275e8 <__assert_fail@plt+0x14aa0>
   27620:	bl	124e8 <__stack_chk_fail@plt>
   27624:	andeq	fp, r3, r0, lsl fp
   27628:	ldr	r2, [r0, #12]
   2762c:	mov	r3, r0
   27630:	cmp	r2, #0
   27634:	bne	2765c <__assert_fail@plt+0x14b14>
   27638:	cmp	r1, #0
   2763c:	ldr	r0, [r0, #8]
   27640:	ldrne	r2, [r3]
   27644:	strne	r2, [r1]
   27648:	mov	r1, #0
   2764c:	mov	r2, #12
   27650:	str	r1, [r3, #8]
   27654:	str	r2, [r3, #12]
   27658:	bx	lr
   2765c:	b	273ac <__assert_fail@plt+0x14864>
   27660:	push	{r4, r5, r6, lr}
   27664:	sub	sp, sp, #8
   27668:	ldr	r6, [pc, #148]	; 27704 <__assert_fail@plt+0x14bbc>
   2766c:	subs	r5, r1, #0
   27670:	ldr	r3, [r6]
   27674:	str	r3, [sp, #4]
   27678:	beq	276e4 <__assert_fail@plt+0x14b9c>
   2767c:	ldr	r3, [r0, #12]
   27680:	cmp	r3, #0
   27684:	bne	276f4 <__assert_fail@plt+0x14bac>
   27688:	ldr	r1, [r0]
   2768c:	mov	r2, #12
   27690:	ldr	r4, [r0, #8]
   27694:	str	r1, [r5]
   27698:	str	r3, [r0, #8]
   2769c:	str	r2, [r0, #12]
   276a0:	cmp	r4, #0
   276a4:	beq	276b4 <__assert_fail@plt+0x14b6c>
   276a8:	ldr	r1, [r5]
   276ac:	cmp	r1, #0
   276b0:	bne	276d0 <__assert_fail@plt+0x14b88>
   276b4:	ldr	r2, [sp, #4]
   276b8:	ldr	r3, [r6]
   276bc:	mov	r0, r4
   276c0:	cmp	r2, r3
   276c4:	bne	27700 <__assert_fail@plt+0x14bb8>
   276c8:	add	sp, sp, #8
   276cc:	pop	{r4, r5, r6, pc}
   276d0:	mov	r0, r4
   276d4:	bl	128fc <gcry_realloc@plt>
   276d8:	cmp	r0, #0
   276dc:	movne	r4, r0
   276e0:	b	276b4 <__assert_fail@plt+0x14b6c>
   276e4:	ldr	r3, [r0, #12]
   276e8:	mov	r5, sp
   276ec:	cmp	r3, #0
   276f0:	beq	27688 <__assert_fail@plt+0x14b40>
   276f4:	bl	273ac <__assert_fail@plt+0x14864>
   276f8:	mov	r4, r0
   276fc:	b	276a0 <__assert_fail@plt+0x14b58>
   27700:	bl	124e8 <__stack_chk_fail@plt>
   27704:	andeq	fp, r3, r0, lsl fp
   27708:	mov	r3, r0
   2770c:	ldr	r0, [r0, #12]
   27710:	cmp	r0, #0
   27714:	bne	2772c <__assert_fail@plt+0x14be4>
   27718:	cmp	r1, #0
   2771c:	ldr	r0, [r3, #8]
   27720:	ldrne	r3, [r3]
   27724:	strne	r3, [r1]
   27728:	bx	lr
   2772c:	push	{r4, lr}
   27730:	bl	129a4 <gpg_err_set_errno@plt>
   27734:	mov	r0, #0
   27738:	pop	{r4, pc}
   2773c:	cmp	r1, #0
   27740:	beq	2794c <__assert_fail@plt+0x14e04>
   27744:	eor	ip, r0, r1
   27748:	rsbmi	r1, r1, #0
   2774c:	subs	r2, r1, #1
   27750:	beq	27918 <__assert_fail@plt+0x14dd0>
   27754:	movs	r3, r0
   27758:	rsbmi	r3, r0, #0
   2775c:	cmp	r3, r1
   27760:	bls	27924 <__assert_fail@plt+0x14ddc>
   27764:	tst	r1, r2
   27768:	beq	27934 <__assert_fail@plt+0x14dec>
   2776c:	clz	r2, r3
   27770:	clz	r0, r1
   27774:	sub	r2, r0, r2
   27778:	rsbs	r2, r2, #31
   2777c:	addne	r2, r2, r2, lsl #1
   27780:	mov	r0, #0
   27784:	addne	pc, pc, r2, lsl #2
   27788:	nop			; (mov r0, r0)
   2778c:	cmp	r3, r1, lsl #31
   27790:	adc	r0, r0, r0
   27794:	subcs	r3, r3, r1, lsl #31
   27798:	cmp	r3, r1, lsl #30
   2779c:	adc	r0, r0, r0
   277a0:	subcs	r3, r3, r1, lsl #30
   277a4:	cmp	r3, r1, lsl #29
   277a8:	adc	r0, r0, r0
   277ac:	subcs	r3, r3, r1, lsl #29
   277b0:	cmp	r3, r1, lsl #28
   277b4:	adc	r0, r0, r0
   277b8:	subcs	r3, r3, r1, lsl #28
   277bc:	cmp	r3, r1, lsl #27
   277c0:	adc	r0, r0, r0
   277c4:	subcs	r3, r3, r1, lsl #27
   277c8:	cmp	r3, r1, lsl #26
   277cc:	adc	r0, r0, r0
   277d0:	subcs	r3, r3, r1, lsl #26
   277d4:	cmp	r3, r1, lsl #25
   277d8:	adc	r0, r0, r0
   277dc:	subcs	r3, r3, r1, lsl #25
   277e0:	cmp	r3, r1, lsl #24
   277e4:	adc	r0, r0, r0
   277e8:	subcs	r3, r3, r1, lsl #24
   277ec:	cmp	r3, r1, lsl #23
   277f0:	adc	r0, r0, r0
   277f4:	subcs	r3, r3, r1, lsl #23
   277f8:	cmp	r3, r1, lsl #22
   277fc:	adc	r0, r0, r0
   27800:	subcs	r3, r3, r1, lsl #22
   27804:	cmp	r3, r1, lsl #21
   27808:	adc	r0, r0, r0
   2780c:	subcs	r3, r3, r1, lsl #21
   27810:	cmp	r3, r1, lsl #20
   27814:	adc	r0, r0, r0
   27818:	subcs	r3, r3, r1, lsl #20
   2781c:	cmp	r3, r1, lsl #19
   27820:	adc	r0, r0, r0
   27824:	subcs	r3, r3, r1, lsl #19
   27828:	cmp	r3, r1, lsl #18
   2782c:	adc	r0, r0, r0
   27830:	subcs	r3, r3, r1, lsl #18
   27834:	cmp	r3, r1, lsl #17
   27838:	adc	r0, r0, r0
   2783c:	subcs	r3, r3, r1, lsl #17
   27840:	cmp	r3, r1, lsl #16
   27844:	adc	r0, r0, r0
   27848:	subcs	r3, r3, r1, lsl #16
   2784c:	cmp	r3, r1, lsl #15
   27850:	adc	r0, r0, r0
   27854:	subcs	r3, r3, r1, lsl #15
   27858:	cmp	r3, r1, lsl #14
   2785c:	adc	r0, r0, r0
   27860:	subcs	r3, r3, r1, lsl #14
   27864:	cmp	r3, r1, lsl #13
   27868:	adc	r0, r0, r0
   2786c:	subcs	r3, r3, r1, lsl #13
   27870:	cmp	r3, r1, lsl #12
   27874:	adc	r0, r0, r0
   27878:	subcs	r3, r3, r1, lsl #12
   2787c:	cmp	r3, r1, lsl #11
   27880:	adc	r0, r0, r0
   27884:	subcs	r3, r3, r1, lsl #11
   27888:	cmp	r3, r1, lsl #10
   2788c:	adc	r0, r0, r0
   27890:	subcs	r3, r3, r1, lsl #10
   27894:	cmp	r3, r1, lsl #9
   27898:	adc	r0, r0, r0
   2789c:	subcs	r3, r3, r1, lsl #9
   278a0:	cmp	r3, r1, lsl #8
   278a4:	adc	r0, r0, r0
   278a8:	subcs	r3, r3, r1, lsl #8
   278ac:	cmp	r3, r1, lsl #7
   278b0:	adc	r0, r0, r0
   278b4:	subcs	r3, r3, r1, lsl #7
   278b8:	cmp	r3, r1, lsl #6
   278bc:	adc	r0, r0, r0
   278c0:	subcs	r3, r3, r1, lsl #6
   278c4:	cmp	r3, r1, lsl #5
   278c8:	adc	r0, r0, r0
   278cc:	subcs	r3, r3, r1, lsl #5
   278d0:	cmp	r3, r1, lsl #4
   278d4:	adc	r0, r0, r0
   278d8:	subcs	r3, r3, r1, lsl #4
   278dc:	cmp	r3, r1, lsl #3
   278e0:	adc	r0, r0, r0
   278e4:	subcs	r3, r3, r1, lsl #3
   278e8:	cmp	r3, r1, lsl #2
   278ec:	adc	r0, r0, r0
   278f0:	subcs	r3, r3, r1, lsl #2
   278f4:	cmp	r3, r1, lsl #1
   278f8:	adc	r0, r0, r0
   278fc:	subcs	r3, r3, r1, lsl #1
   27900:	cmp	r3, r1
   27904:	adc	r0, r0, r0
   27908:	subcs	r3, r3, r1
   2790c:	cmp	ip, #0
   27910:	rsbmi	r0, r0, #0
   27914:	bx	lr
   27918:	teq	ip, r0
   2791c:	rsbmi	r0, r0, #0
   27920:	bx	lr
   27924:	movcc	r0, #0
   27928:	asreq	r0, ip, #31
   2792c:	orreq	r0, r0, #1
   27930:	bx	lr
   27934:	clz	r2, r1
   27938:	rsb	r2, r2, #31
   2793c:	cmp	ip, #0
   27940:	lsr	r0, r3, r2
   27944:	rsbmi	r0, r0, #0
   27948:	bx	lr
   2794c:	cmp	r0, #0
   27950:	mvngt	r0, #-2147483648	; 0x80000000
   27954:	movlt	r0, #-2147483648	; 0x80000000
   27958:	b	27a8c <__assert_fail@plt+0x14f44>
   2795c:	cmp	r1, #0
   27960:	beq	2794c <__assert_fail@plt+0x14e04>
   27964:	push	{r0, r1, lr}
   27968:	bl	27744 <__assert_fail@plt+0x14bfc>
   2796c:	pop	{r1, r2, lr}
   27970:	mul	r3, r2, r0
   27974:	sub	r1, r1, r3
   27978:	bx	lr
   2797c:	cmp	r3, #0
   27980:	cmpeq	r2, #0
   27984:	bne	279a8 <__assert_fail@plt+0x14e60>
   27988:	cmp	r1, #0
   2798c:	movlt	r1, #-2147483648	; 0x80000000
   27990:	movlt	r0, #0
   27994:	blt	279a4 <__assert_fail@plt+0x14e5c>
   27998:	cmpeq	r0, #0
   2799c:	mvnne	r1, #-2147483648	; 0x80000000
   279a0:	mvnne	r0, #0
   279a4:	b	27a8c <__assert_fail@plt+0x14f44>
   279a8:	sub	sp, sp, #8
   279ac:	push	{sp, lr}
   279b0:	cmp	r1, #0
   279b4:	blt	279d4 <__assert_fail@plt+0x14e8c>
   279b8:	cmp	r3, #0
   279bc:	blt	27a08 <__assert_fail@plt+0x14ec0>
   279c0:	bl	27a9c <__assert_fail@plt+0x14f54>
   279c4:	ldr	lr, [sp, #4]
   279c8:	add	sp, sp, #8
   279cc:	pop	{r2, r3}
   279d0:	bx	lr
   279d4:	rsbs	r0, r0, #0
   279d8:	sbc	r1, r1, r1, lsl #1
   279dc:	cmp	r3, #0
   279e0:	blt	27a2c <__assert_fail@plt+0x14ee4>
   279e4:	bl	27a9c <__assert_fail@plt+0x14f54>
   279e8:	ldr	lr, [sp, #4]
   279ec:	add	sp, sp, #8
   279f0:	pop	{r2, r3}
   279f4:	rsbs	r0, r0, #0
   279f8:	sbc	r1, r1, r1, lsl #1
   279fc:	rsbs	r2, r2, #0
   27a00:	sbc	r3, r3, r3, lsl #1
   27a04:	bx	lr
   27a08:	rsbs	r2, r2, #0
   27a0c:	sbc	r3, r3, r3, lsl #1
   27a10:	bl	27a9c <__assert_fail@plt+0x14f54>
   27a14:	ldr	lr, [sp, #4]
   27a18:	add	sp, sp, #8
   27a1c:	pop	{r2, r3}
   27a20:	rsbs	r0, r0, #0
   27a24:	sbc	r1, r1, r1, lsl #1
   27a28:	bx	lr
   27a2c:	rsbs	r2, r2, #0
   27a30:	sbc	r3, r3, r3, lsl #1
   27a34:	bl	27a9c <__assert_fail@plt+0x14f54>
   27a38:	ldr	lr, [sp, #4]
   27a3c:	add	sp, sp, #8
   27a40:	pop	{r2, r3}
   27a44:	rsbs	r2, r2, #0
   27a48:	sbc	r3, r3, r3, lsl #1
   27a4c:	bx	lr
   27a50:	cmp	r3, #0
   27a54:	cmpeq	r2, #0
   27a58:	bne	27a70 <__assert_fail@plt+0x14f28>
   27a5c:	cmp	r1, #0
   27a60:	cmpeq	r0, #0
   27a64:	mvnne	r1, #0
   27a68:	mvnne	r0, #0
   27a6c:	b	27a8c <__assert_fail@plt+0x14f44>
   27a70:	sub	sp, sp, #8
   27a74:	push	{sp, lr}
   27a78:	bl	27a9c <__assert_fail@plt+0x14f54>
   27a7c:	ldr	lr, [sp, #4]
   27a80:	add	sp, sp, #8
   27a84:	pop	{r2, r3}
   27a88:	bx	lr
   27a8c:	push	{r1, lr}
   27a90:	mov	r0, #8
   27a94:	bl	12320 <raise@plt>
   27a98:	pop	{r1, pc}
   27a9c:	cmp	r1, r3
   27aa0:	cmpeq	r0, r2
   27aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27aa8:	mov	r4, r0
   27aac:	movcc	r0, #0
   27ab0:	mov	r5, r1
   27ab4:	ldr	lr, [sp, #36]	; 0x24
   27ab8:	movcc	r1, r0
   27abc:	bcc	27bb8 <__assert_fail@plt+0x15070>
   27ac0:	cmp	r3, #0
   27ac4:	clzeq	ip, r2
   27ac8:	clzne	ip, r3
   27acc:	addeq	ip, ip, #32
   27ad0:	cmp	r5, #0
   27ad4:	clzeq	r1, r4
   27ad8:	addeq	r1, r1, #32
   27adc:	clzne	r1, r5
   27ae0:	sub	ip, ip, r1
   27ae4:	sub	sl, ip, #32
   27ae8:	lsl	r9, r3, ip
   27aec:	rsb	fp, ip, #32
   27af0:	orr	r9, r9, r2, lsl sl
   27af4:	orr	r9, r9, r2, lsr fp
   27af8:	lsl	r8, r2, ip
   27afc:	cmp	r5, r9
   27b00:	cmpeq	r4, r8
   27b04:	movcc	r0, #0
   27b08:	movcc	r1, r0
   27b0c:	bcc	27b28 <__assert_fail@plt+0x14fe0>
   27b10:	mov	r0, #1
   27b14:	subs	r4, r4, r8
   27b18:	lsl	r1, r0, sl
   27b1c:	orr	r1, r1, r0, lsr fp
   27b20:	lsl	r0, r0, ip
   27b24:	sbc	r5, r5, r9
   27b28:	cmp	ip, #0
   27b2c:	beq	27bb8 <__assert_fail@plt+0x15070>
   27b30:	lsr	r6, r8, #1
   27b34:	orr	r6, r6, r9, lsl #31
   27b38:	lsr	r7, r9, #1
   27b3c:	mov	r2, ip
   27b40:	b	27b64 <__assert_fail@plt+0x1501c>
   27b44:	subs	r3, r4, r6
   27b48:	sbc	r8, r5, r7
   27b4c:	adds	r3, r3, r3
   27b50:	adc	r8, r8, r8
   27b54:	adds	r4, r3, #1
   27b58:	adc	r5, r8, #0
   27b5c:	subs	r2, r2, #1
   27b60:	beq	27b80 <__assert_fail@plt+0x15038>
   27b64:	cmp	r5, r7
   27b68:	cmpeq	r4, r6
   27b6c:	bcs	27b44 <__assert_fail@plt+0x14ffc>
   27b70:	adds	r4, r4, r4
   27b74:	adc	r5, r5, r5
   27b78:	subs	r2, r2, #1
   27b7c:	bne	27b64 <__assert_fail@plt+0x1501c>
   27b80:	lsr	r3, r4, ip
   27b84:	orr	r3, r3, r5, lsl fp
   27b88:	lsr	r2, r5, ip
   27b8c:	orr	r3, r3, r5, lsr sl
   27b90:	adds	r0, r0, r4
   27b94:	mov	r4, r3
   27b98:	lsl	r3, r2, ip
   27b9c:	orr	r3, r3, r4, lsl sl
   27ba0:	lsl	ip, r4, ip
   27ba4:	orr	r3, r3, r4, lsr fp
   27ba8:	adc	r1, r1, r5
   27bac:	subs	r0, r0, ip
   27bb0:	mov	r5, r2
   27bb4:	sbc	r1, r1, r3
   27bb8:	cmp	lr, #0
   27bbc:	strdne	r4, [lr]
   27bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27bc8:	mov	r7, r0
   27bcc:	ldr	r6, [pc, #72]	; 27c1c <__assert_fail@plt+0x150d4>
   27bd0:	ldr	r5, [pc, #72]	; 27c20 <__assert_fail@plt+0x150d8>
   27bd4:	add	r6, pc, r6
   27bd8:	add	r5, pc, r5
   27bdc:	sub	r6, r6, r5
   27be0:	mov	r8, r1
   27be4:	mov	r9, r2
   27be8:	bl	122dc <gcry_xmalloc@plt-0x20>
   27bec:	asrs	r6, r6, #2
   27bf0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   27bf4:	mov	r4, #0
   27bf8:	add	r4, r4, #1
   27bfc:	ldr	r3, [r5], #4
   27c00:	mov	r2, r9
   27c04:	mov	r1, r8
   27c08:	mov	r0, r7
   27c0c:	blx	r3
   27c10:	cmp	r6, r4
   27c14:	bne	27bf8 <__assert_fail@plt+0x150b0>
   27c18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27c1c:	andeq	r3, r1, r0, lsr pc
   27c20:	andeq	r3, r1, r8, lsr #30
   27c24:	bx	lr
   27c28:	ldr	r3, [pc, #12]	; 27c3c <__assert_fail@plt+0x150f4>
   27c2c:	mov	r1, #0
   27c30:	add	r3, pc, r3
   27c34:	ldr	r2, [r3]
   27c38:	b	1283c <__cxa_atexit@plt>
   27c3c:	andeq	r4, r1, ip, asr #7

Disassembly of section .fini:

00027c40 <.fini>:
   27c40:	push	{r3, lr}
   27c44:	pop	{r3, pc}
