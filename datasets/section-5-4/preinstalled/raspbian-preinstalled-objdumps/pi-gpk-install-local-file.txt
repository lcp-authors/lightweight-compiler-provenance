
raspbian-preinstalled/pi-gpk-install-local-file:     file format elf32-littlearm


Disassembly of section .init:

00012484 <.init>:
   12484:	push	{r3, lr}
   12488:	bl	12f2c <g_strcmp0@plt+0x3bc>
   1248c:	pop	{r3, pc}

Disassembly of section .plt:

00012490 <gtk_expander_get_expanded@plt-0x14>:
   12490:	push	{lr}		; (str lr, [sp, #-4]!)
   12494:	ldr	lr, [pc, #4]	; 124a0 <gtk_expander_get_expanded@plt-0x4>
   12498:	add	lr, pc, lr
   1249c:	ldr	pc, [lr, #8]!
   124a0:	andeq	sl, r1, r0, ror #22

000124a4 <gtk_expander_get_expanded@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #106496	; 0x1a000
   124ac:	ldr	pc, [ip, #2912]!	; 0xb60

000124b0 <g_object_new@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #106496	; 0x1a000
   124b8:	ldr	pc, [ip, #2904]!	; 0xb58

000124bc <g_get_current_dir@plt>:
   124bc:	add	ip, pc, #0, 12
   124c0:	add	ip, ip, #106496	; 0x1a000
   124c4:	ldr	pc, [ip, #2896]!	; 0xb50

000124c8 <g_malloc_n@plt>:
   124c8:	add	ip, pc, #0, 12
   124cc:	add	ip, ip, #106496	; 0x1a000
   124d0:	ldr	pc, [ip, #2888]!	; 0xb48

000124d4 <g_option_context_parse@plt>:
   124d4:	add	ip, pc, #0, 12
   124d8:	add	ip, ip, #106496	; 0x1a000
   124dc:	ldr	pc, [ip, #2880]!	; 0xb40

000124e0 <g_option_context_add_group@plt>:
   124e0:	add	ip, pc, #0, 12
   124e4:	add	ip, ip, #106496	; 0x1a000
   124e8:	ldr	pc, [ip, #2872]!	; 0xb38

000124ec <gtk_message_dialog_format_secondary_text@plt>:
   124ec:	add	ip, pc, #0, 12
   124f0:	add	ip, ip, #106496	; 0x1a000
   124f4:	ldr	pc, [ip, #2864]!	; 0xb30

000124f8 <g_return_if_fail_warning@plt>:
   124f8:	add	ip, pc, #0, 12
   124fc:	add	ip, ip, #106496	; 0x1a000
   12500:	ldr	pc, [ip, #2856]!	; 0xb28

00012504 <g_type_register_static_simple@plt>:
   12504:	add	ip, pc, #0, 12
   12508:	add	ip, ip, #106496	; 0x1a000
   1250c:	ldr	pc, [ip, #2848]!	; 0xb20

00012510 <pk_package_get_id@plt>:
   12510:	add	ip, pc, #0, 12
   12514:	add	ip, ip, #106496	; 0x1a000
   12518:	ldr	pc, [ip, #2840]!	; 0xb18

0001251c <gtk_dialog_add_button@plt>:
   1251c:	add	ip, pc, #0, 12
   12520:	add	ip, ip, #106496	; 0x1a000
   12524:	ldr	pc, [ip, #2832]!	; 0xb10

00012528 <g_type_class_adjust_private_offset@plt>:
   12528:	add	ip, pc, #0, 12
   1252c:	add	ip, ip, #106496	; 0x1a000
   12530:	ldr	pc, [ip, #2824]!	; 0xb08

00012534 <g_timeout_add@plt>:
   12534:	add	ip, pc, #0, 12
   12538:	add	ip, ip, #106496	; 0x1a000
   1253c:	ldr	pc, [ip, #2816]!	; 0xb00

00012540 <g_error_free@plt>:
   12540:	add	ip, pc, #0, 12
   12544:	add	ip, ip, #106496	; 0x1a000
   12548:	ldr	pc, [ip, #2808]!	; 0xaf8

0001254c <bind_textdomain_codeset@plt>:
   1254c:	add	ip, pc, #0, 12
   12550:	add	ip, ip, #106496	; 0x1a000
   12554:	ldr	pc, [ip, #2800]!	; 0xaf0

00012558 <gtk_label_get_type@plt>:
   12558:	add	ip, pc, #0, 12
   1255c:	add	ip, ip, #106496	; 0x1a000
   12560:	ldr	pc, [ip, #2792]!	; 0xae8

00012564 <gtk_label_set_label@plt>:
   12564:	add	ip, pc, #0, 12
   12568:	add	ip, ip, #106496	; 0x1a000
   1256c:	ldr	pc, [ip, #2784]!	; 0xae0

00012570 <gtk_get_option_group@plt>:
   12570:	add	ip, pc, #0, 12
   12574:	add	ip, ip, #106496	; 0x1a000
   12578:	ldr	pc, [ip, #2776]!	; 0xad8

0001257c <g_log_set_handler@plt>:
   1257c:	add	ip, pc, #0, 12
   12580:	add	ip, ip, #106496	; 0x1a000
   12584:	ldr	pc, [ip, #2768]!	; 0xad0

00012588 <gtk_widget_get_type@plt>:
   12588:	add	ip, pc, #0, 12
   1258c:	add	ip, ip, #106496	; 0x1a000
   12590:	ldr	pc, [ip, #2760]!	; 0xac8

00012594 <g_string_new@plt>:
   12594:	add	ip, pc, #0, 12
   12598:	add	ip, ip, #106496	; 0x1a000
   1259c:	ldr	pc, [ip, #2752]!	; 0xac0

000125a0 <pk_package_id_split@plt>:
   125a0:	add	ip, pc, #0, 12
   125a4:	add	ip, ip, #106496	; 0x1a000
   125a8:	ldr	pc, [ip, #2744]!	; 0xab8

000125ac <gtk_text_buffer_delete_mark@plt>:
   125ac:	add	ip, pc, #0, 12
   125b0:	add	ip, ip, #106496	; 0x1a000
   125b4:	ldr	pc, [ip, #2736]!	; 0xab0

000125b8 <g_type_check_instance_cast@plt>:
   125b8:	add	ip, pc, #0, 12
   125bc:	add	ip, ip, #106496	; 0x1a000
   125c0:	ldr	pc, [ip, #2728]!	; 0xaa8

000125c4 <gtk_text_view_get_type@plt>:
   125c4:	add	ip, pc, #0, 12
   125c8:	add	ip, ip, #106496	; 0x1a000
   125cc:	ldr	pc, [ip, #2720]!	; 0xaa0

000125d0 <g_option_context_new@plt>:
   125d0:	add	ip, pc, #0, 12
   125d4:	add	ip, ip, #106496	; 0x1a000
   125d8:	ldr	pc, [ip, #2712]!	; 0xa98

000125dc <dbus_g_proxy_new_for_name@plt>:
   125dc:	add	ip, pc, #0, 12
   125e0:	add	ip, ip, #106496	; 0x1a000
   125e4:	ldr	pc, [ip, #2704]!	; 0xa90

000125e8 <gtk_widget_get_window@plt>:
   125e8:	add	ip, pc, #0, 12
   125ec:	add	ip, ip, #106496	; 0x1a000
   125f0:	ldr	pc, [ip, #2696]!	; 0xa88

000125f4 <gtk_widget_hide@plt>:
   125f4:	add	ip, pc, #0, 12
   125f8:	add	ip, ip, #106496	; 0x1a000
   125fc:	ldr	pc, [ip, #2688]!	; 0xa80

00012600 <g_option_group_new@plt>:
   12600:	add	ip, pc, #0, 12
   12604:	add	ip, ip, #106496	; 0x1a000
   12608:	ldr	pc, [ip, #2680]!	; 0xa78

0001260c <pk_role_enum_to_string@plt>:
   1260c:	add	ip, pc, #0, 12
   12610:	add	ip, ip, #106496	; 0x1a000
   12614:	ldr	pc, [ip, #2672]!	; 0xa70

00012618 <g_log@plt>:
   12618:	add	ip, pc, #0, 12
   1261c:	add	ip, ip, #106496	; 0x1a000
   12620:	ldr	pc, [ip, #2664]!	; 0xa68

00012624 <g_option_context_set_summary@plt>:
   12624:	add	ip, pc, #0, 12
   12628:	add	ip, ip, #106496	; 0x1a000
   1262c:	ldr	pc, [ip, #2656]!	; 0xa60

00012630 <pk_status_enum_to_string@plt>:
   12630:	add	ip, pc, #0, 12
   12634:	add	ip, ip, #106496	; 0x1a000
   12638:	ldr	pc, [ip, #2648]!	; 0xa58

0001263c <gtk_expander_get_type@plt>:
   1263c:	add	ip, pc, #0, 12
   12640:	add	ip, ip, #106496	; 0x1a000
   12644:	ldr	pc, [ip, #2640]!	; 0xa50

00012648 <gtk_text_buffer_insert@plt>:
   12648:	add	ip, pc, #0, 12
   1264c:	add	ip, ip, #106496	; 0x1a000
   12650:	ldr	pc, [ip, #2632]!	; 0xa48

00012654 <g_build_filename@plt>:
   12654:	add	ip, pc, #0, 12
   12658:	add	ip, ip, #106496	; 0x1a000
   1265c:	ldr	pc, [ip, #2624]!	; 0xa40

00012660 <gtk_window_set_icon_name@plt>:
   12660:	add	ip, pc, #0, 12
   12664:	add	ip, ip, #106496	; 0x1a000
   12668:	ldr	pc, [ip, #2616]!	; 0xa38

0001266c <dbus_g_proxy_call@plt>:
   1266c:	add	ip, pc, #0, 12
   12670:	add	ip, ip, #106496	; 0x1a000
   12674:	ldr	pc, [ip, #2608]!	; 0xa30

00012678 <textdomain@plt>:
   12678:	add	ip, pc, #0, 12
   1267c:	add	ip, ip, #106496	; 0x1a000
   12680:	ldr	pc, [ip, #2600]!	; 0xa28

00012684 <gdk_pixbuf_new_subpixbuf@plt>:
   12684:	add	ip, pc, #0, 12
   12688:	add	ip, ip, #106496	; 0x1a000
   1268c:	ldr	pc, [ip, #2592]!	; 0xa20

00012690 <gtk_text_buffer_get_type@plt>:
   12690:	add	ip, pc, #0, 12
   12694:	add	ip, ip, #106496	; 0x1a000
   12698:	ldr	pc, [ip, #2584]!	; 0xa18

0001269c <g_option_group_set_parse_hooks@plt>:
   1269c:	add	ip, pc, #0, 12
   126a0:	add	ip, ip, #106496	; 0x1a000
   126a4:	ldr	pc, [ip, #2576]!	; 0xa10

000126a8 <pango_attr_list_unref@plt>:
   126a8:	add	ip, pc, #0, 12
   126ac:	add	ip, ip, #106496	; 0x1a000
   126b0:	ldr	pc, [ip, #2568]!	; 0xa08

000126b4 <g_strdup@plt>:
   126b4:	add	ip, pc, #0, 12
   126b8:	add	ip, ip, #106496	; 0x1a000
   126bc:	ldr	pc, [ip, #2560]!	; 0xa00

000126c0 <dbus_g_bus_get@plt>:
   126c0:	add	ip, pc, #0, 12
   126c4:	add	ip, ip, #106496	; 0x1a000
   126c8:	ldr	pc, [ip, #2552]!	; 0x9f8

000126cc <strftime@plt>:
   126cc:	add	ip, pc, #0, 12
   126d0:	add	ip, ip, #106496	; 0x1a000
   126d4:	ldr	pc, [ip, #2544]!	; 0x9f0

000126d8 <memset@plt>:
   126d8:	add	ip, pc, #0, 12
   126dc:	add	ip, ip, #106496	; 0x1a000
   126e0:	ldr	pc, [ip, #2536]!	; 0x9e8

000126e4 <gtk_builder_get_object@plt>:
   126e4:	add	ip, pc, #0, 12
   126e8:	add	ip, ip, #106496	; 0x1a000
   126ec:	ldr	pc, [ip, #2528]!	; 0x9e0

000126f0 <gtk_text_buffer_get_iter_at_mark@plt>:
   126f0:	add	ip, pc, #0, 12
   126f4:	add	ip, ip, #106496	; 0x1a000
   126f8:	ldr	pc, [ip, #2520]!	; 0x9d8

000126fc <gtk_image_set_from_pixbuf@plt>:
   126fc:	add	ip, pc, #0, 12
   12700:	add	ip, ip, #106496	; 0x1a000
   12704:	ldr	pc, [ip, #2512]!	; 0x9d0

00012708 <g_strdup_printf@plt>:
   12708:	add	ip, pc, #0, 12
   1270c:	add	ip, ip, #106496	; 0x1a000
   12710:	ldr	pc, [ip, #2504]!	; 0x9c8

00012714 <dcngettext@plt>:
   12714:	add	ip, pc, #0, 12
   12718:	add	ip, ip, #106496	; 0x1a000
   1271c:	ldr	pc, [ip, #2496]!	; 0x9c0

00012720 <gtk_icon_theme_load_icon@plt>:
   12720:	add	ip, pc, #0, 12
   12724:	add	ip, ip, #106496	; 0x1a000
   12728:	ldr	pc, [ip, #2488]!	; 0x9b8

0001272c <abort@plt>:
   1272c:	add	ip, pc, #0, 12
   12730:	add	ip, ip, #106496	; 0x1a000
   12734:	ldr	pc, [ip, #2480]!	; 0x9b0

00012738 <gdk_pixbuf_get_height@plt>:
   12738:	add	ip, pc, #0, 12
   1273c:	add	ip, ip, #106496	; 0x1a000
   12740:	ldr	pc, [ip, #2472]!	; 0x9a8

00012744 <gtk_window_set_title@plt>:
   12744:	add	ip, pc, #0, 12
   12748:	add	ip, ip, #106496	; 0x1a000
   1274c:	ldr	pc, [ip, #2464]!	; 0x9a0

00012750 <gdk_pixbuf_get_width@plt>:
   12750:	add	ip, pc, #0, 12
   12754:	add	ip, ip, #106496	; 0x1a000
   12758:	ldr	pc, [ip, #2456]!	; 0x998

0001275c <gdk_display_get_default@plt>:
   1275c:	add	ip, pc, #0, 12
   12760:	add	ip, ip, #106496	; 0x1a000
   12764:	ldr	pc, [ip, #2448]!	; 0x990

00012768 <gtk_text_view_set_buffer@plt>:
   12768:	add	ip, pc, #0, 12
   1276c:	add	ip, ip, #106496	; 0x1a000
   12770:	ldr	pc, [ip, #2440]!	; 0x988

00012774 <gtk_window_set_default_size@plt>:
   12774:	add	ip, pc, #0, 12
   12778:	add	ip, ip, #106496	; 0x1a000
   1277c:	ldr	pc, [ip, #2432]!	; 0x980

00012780 <g_strjoin@plt>:
   12780:	add	ip, pc, #0, 12
   12784:	add	ip, ip, #106496	; 0x1a000
   12788:	ldr	pc, [ip, #2424]!	; 0x978

0001278c <g_str_has_prefix@plt>:
   1278c:	add	ip, pc, #0, 12
   12790:	add	ip, ip, #106496	; 0x1a000
   12794:	ldr	pc, [ip, #2416]!	; 0x970

00012798 <localtime@plt>:
   12798:	add	ip, pc, #0, 12
   1279c:	add	ip, ip, #106496	; 0x1a000
   127a0:	ldr	pc, [ip, #2408]!	; 0x968

000127a4 <g_signal_connect_data@plt>:
   127a4:	add	ip, pc, #0, 12
   127a8:	add	ip, ip, #106496	; 0x1a000
   127ac:	ldr	pc, [ip, #2400]!	; 0x960

000127b0 <g_once_init_enter@plt>:
   127b0:	add	ip, pc, #0, 12
   127b4:	add	ip, ip, #106496	; 0x1a000
   127b8:	ldr	pc, [ip, #2392]!	; 0x958

000127bc <gtk_text_tag_table_lookup@plt>:
   127bc:	add	ip, pc, #0, 12
   127c0:	add	ip, ip, #106496	; 0x1a000
   127c4:	ldr	pc, [ip, #2384]!	; 0x950

000127c8 <gtk_widget_destroy@plt>:
   127c8:	add	ip, pc, #0, 12
   127cc:	add	ip, ip, #106496	; 0x1a000
   127d0:	ldr	pc, [ip, #2376]!	; 0x948

000127d4 <gdk_window_set_transient_for@plt>:
   127d4:	add	ip, pc, #0, 12
   127d8:	add	ip, ip, #106496	; 0x1a000
   127dc:	ldr	pc, [ip, #2368]!	; 0x940

000127e0 <gtk_text_tag_table_add@plt>:
   127e0:	add	ip, pc, #0, 12
   127e4:	add	ip, ip, #106496	; 0x1a000
   127e8:	ldr	pc, [ip, #2360]!	; 0x938

000127ec <gtk_text_tag_new@plt>:
   127ec:	add	ip, pc, #0, 12
   127f0:	add	ip, ip, #106496	; 0x1a000
   127f4:	ldr	pc, [ip, #2352]!	; 0x930

000127f8 <g_intern_static_string@plt>:
   127f8:	add	ip, pc, #0, 12
   127fc:	add	ip, ip, #106496	; 0x1a000
   12800:	ldr	pc, [ip, #2344]!	; 0x928

00012804 <gtk_image_get_type@plt>:
   12804:	add	ip, pc, #0, 12
   12808:	add	ip, ip, #106496	; 0x1a000
   1280c:	ldr	pc, [ip, #2336]!	; 0x920

00012810 <g_strfreev@plt>:
   12810:	add	ip, pc, #0, 12
   12814:	add	ip, ip, #106496	; 0x1a000
   12818:	ldr	pc, [ip, #2328]!	; 0x918

0001281c <g_strv_length@plt>:
   1281c:	add	ip, pc, #0, 12
   12820:	add	ip, ip, #106496	; 0x1a000
   12824:	ldr	pc, [ip, #2320]!	; 0x910

00012828 <pango_attr_iterator_range@plt>:
   12828:	add	ip, pc, #0, 12
   1282c:	add	ip, ip, #106496	; 0x1a000
   12830:	ldr	pc, [ip, #2312]!	; 0x908

00012834 <g_option_context_free@plt>:
   12834:	add	ip, pc, #0, 12
   12838:	add	ip, ip, #106496	; 0x1a000
   1283c:	ldr	pc, [ip, #2304]!	; 0x900

00012840 <fileno@plt>:
   12840:	add	ip, pc, #0, 12
   12844:	add	ip, ip, #106496	; 0x1a000
   12848:	ldr	pc, [ip, #2296]!	; 0x8f8

0001284c <gtk_window_present_with_time@plt>:
   1284c:	add	ip, pc, #0, 12
   12850:	add	ip, ip, #106496	; 0x1a000
   12854:	ldr	pc, [ip, #2288]!	; 0x8f0

00012858 <__stack_chk_fail@plt>:
   12858:	add	ip, pc, #0, 12
   1285c:	add	ip, ip, #106496	; 0x1a000
   12860:	ldr	pc, [ip, #2280]!	; 0x8e8

00012864 <gdk_x11_window_foreign_new_for_display@plt>:
   12864:	add	ip, pc, #0, 12
   12868:	add	ip, ip, #106496	; 0x1a000
   1286c:	ldr	pc, [ip, #2272]!	; 0x8e0

00012870 <isatty@plt>:
   12870:	add	ip, pc, #0, 12
   12874:	add	ip, ip, #106496	; 0x1a000
   12878:	ldr	pc, [ip, #2264]!	; 0x8d8

0001287c <g_free@plt>:
   1287c:	add	ip, pc, #0, 12
   12880:	add	ip, ip, #106496	; 0x1a000
   12884:	ldr	pc, [ip, #2256]!	; 0x8d0

00012888 <dcgettext@plt>:
   12888:	add	ip, pc, #0, 12
   1288c:	add	ip, ip, #106496	; 0x1a000
   12890:	ldr	pc, [ip, #2248]!	; 0x8c8

00012894 <gtk_main@plt>:
   12894:	add	ip, pc, #0, 12
   12898:	add	ip, ip, #106496	; 0x1a000
   1289c:	ldr	pc, [ip, #2240]!	; 0x8c0

000128a0 <g_object_set@plt>:
   128a0:	add	ip, pc, #0, 12
   128a4:	add	ip, ip, #106496	; 0x1a000
   128a8:	ldr	pc, [ip, #2232]!	; 0x8b8

000128ac <gtk_text_buffer_insert_at_cursor@plt>:
   128ac:	add	ip, pc, #0, 12
   128b0:	add	ip, ip, #106496	; 0x1a000
   128b4:	ldr	pc, [ip, #2224]!	; 0x8b0

000128b8 <gtk_message_dialog_get_type@plt>:
   128b8:	add	ip, pc, #0, 12
   128bc:	add	ip, ip, #106496	; 0x1a000
   128c0:	ldr	pc, [ip, #2216]!	; 0x8a8

000128c4 <g_ptr_array_new@plt>:
   128c4:	add	ip, pc, #0, 12
   128c8:	add	ip, ip, #106496	; 0x1a000
   128cc:	ldr	pc, [ip, #2208]!	; 0x8a0

000128d0 <g_object_get@plt>:
   128d0:	add	ip, pc, #0, 12
   128d4:	add	ip, ip, #106496	; 0x1a000
   128d8:	ldr	pc, [ip, #2200]!	; 0x898

000128dc <gtk_dialog_get_type@plt>:
   128dc:	add	ip, pc, #0, 12
   128e0:	add	ip, ip, #106496	; 0x1a000
   128e4:	ldr	pc, [ip, #2192]!	; 0x890

000128e8 <gtk_text_buffer_create_mark@plt>:
   128e8:	add	ip, pc, #0, 12
   128ec:	add	ip, ip, #106496	; 0x1a000
   128f0:	ldr	pc, [ip, #2184]!	; 0x888

000128f4 <dbus_g_proxy_set_default_timeout@plt>:
   128f4:	add	ip, pc, #0, 12
   128f8:	add	ip, ip, #106496	; 0x1a000
   128fc:	ldr	pc, [ip, #2176]!	; 0x880

00012900 <g_set_application_name@plt>:
   12900:	add	ip, pc, #0, 12
   12904:	add	ip, ip, #106496	; 0x1a000
   12908:	ldr	pc, [ip, #2168]!	; 0x878

0001290c <raise@plt>:
   1290c:	add	ip, pc, #0, 12
   12910:	add	ip, ip, #106496	; 0x1a000
   12914:	ldr	pc, [ip, #2160]!	; 0x870

00012918 <g_type_check_instance_is_a@plt>:
   12918:	add	ip, pc, #0, 12
   1291c:	add	ip, ip, #106496	; 0x1a000
   12920:	ldr	pc, [ip, #2152]!	; 0x868

00012924 <g_print@plt>:
   12924:	add	ip, pc, #0, 12
   12928:	add	ip, ip, #106496	; 0x1a000
   1292c:	ldr	pc, [ip, #2144]!	; 0x860

00012930 <getuid@plt>:
   12930:	add	ip, pc, #0, 12
   12934:	add	ip, ip, #106496	; 0x1a000
   12938:	ldr	pc, [ip, #2136]!	; 0x858

0001293c <bindtextdomain@plt>:
   1293c:	add	ip, pc, #0, 12
   12940:	add	ip, ip, #106496	; 0x1a000
   12944:	ldr	pc, [ip, #2128]!	; 0x850

00012948 <gtk_style_context_get_color@plt>:
   12948:	add	ip, pc, #0, 12
   1294c:	add	ip, ip, #106496	; 0x1a000
   12950:	ldr	pc, [ip, #2120]!	; 0x848

00012954 <setlocale@plt>:
   12954:	add	ip, pc, #0, 12
   12958:	add	ip, ip, #106496	; 0x1a000
   1295c:	ldr	pc, [ip, #2112]!	; 0x840

00012960 <g_option_context_add_main_entries@plt>:
   12960:	add	ip, pc, #0, 12
   12964:	add	ip, ip, #106496	; 0x1a000
   12968:	ldr	pc, [ip, #2104]!	; 0x838

0001296c <gtk_text_buffer_insert_with_tags@plt>:
   1296c:	add	ip, pc, #0, 12
   12970:	add	ip, ip, #106496	; 0x1a000
   12974:	ldr	pc, [ip, #2096]!	; 0x830

00012978 <gtk_window_set_resizable@plt>:
   12978:	add	ip, pc, #0, 12
   1297c:	add	ip, ip, #106496	; 0x1a000
   12980:	ldr	pc, [ip, #2088]!	; 0x828

00012984 <gtk_builder_new@plt>:
   12984:	add	ip, pc, #0, 12
   12988:	add	ip, ip, #106496	; 0x1a000
   1298c:	ldr	pc, [ip, #2080]!	; 0x820

00012990 <g_string_free@plt>:
   12990:	add	ip, pc, #0, 12
   12994:	add	ip, ip, #106496	; 0x1a000
   12998:	ldr	pc, [ip, #2072]!	; 0x818

0001299c <g_strv_get_type@plt>:
   1299c:	add	ip, pc, #0, 12
   129a0:	add	ip, ip, #106496	; 0x1a000
   129a4:	ldr	pc, [ip, #2064]!	; 0x810

000129a8 <gtk_dialog_run@plt>:
   129a8:	add	ip, pc, #0, 12
   129ac:	add	ip, ip, #106496	; 0x1a000
   129b0:	ldr	pc, [ip, #2056]!	; 0x808

000129b4 <pango_attr_iterator_get@plt>:
   129b4:	add	ip, pc, #0, 12
   129b8:	add	ip, ip, #106496	; 0x1a000
   129bc:	ldr	pc, [ip, #2048]!	; 0x800

000129c0 <pango_attr_iterator_next@plt>:
   129c0:	add	ip, pc, #0, 12
   129c4:	add	ip, ip, #106496	; 0x1a000
   129c8:	ldr	pc, [ip, #2040]!	; 0x7f8

000129cc <pk_info_enum_to_string@plt>:
   129cc:	add	ip, pc, #0, 12
   129d0:	add	ip, ip, #106496	; 0x1a000
   129d4:	ldr	pc, [ip, #2032]!	; 0x7f0

000129d8 <g_object_unref@plt>:
   129d8:	add	ip, pc, #0, 12
   129dc:	add	ip, ip, #106496	; 0x1a000
   129e0:	ldr	pc, [ip, #2024]!	; 0x7e8

000129e4 <strlen@plt>:
   129e4:	add	ip, pc, #0, 12
   129e8:	add	ip, ip, #106496	; 0x1a000
   129ec:	ldr	pc, [ip, #2016]!	; 0x7e0

000129f0 <gtk_text_buffer_get_tag_table@plt>:
   129f0:	add	ip, pc, #0, 12
   129f4:	add	ip, ip, #106496	; 0x1a000
   129f8:	ldr	pc, [ip, #2008]!	; 0x7d8

000129fc <pango_attr_iterator_destroy@plt>:
   129fc:	add	ip, pc, #0, 12
   12a00:	add	ip, ip, #106496	; 0x1a000
   12a04:	ldr	pc, [ip, #2000]!	; 0x7d0

00012a08 <g_once_init_leave@plt>:
   12a08:	add	ip, pc, #0, 12
   12a0c:	add	ip, ip, #106496	; 0x1a000
   12a10:	ldr	pc, [ip, #1992]!	; 0x7c8

00012a14 <gtk_icon_size_lookup@plt>:
   12a14:	add	ip, pc, #0, 12
   12a18:	add	ip, ip, #106496	; 0x1a000
   12a1c:	ldr	pc, [ip, #1984]!	; 0x7c0

00012a20 <g_log_set_fatal_mask@plt>:
   12a20:	add	ip, pc, #0, 12
   12a24:	add	ip, ip, #106496	; 0x1a000
   12a28:	ldr	pc, [ip, #1976]!	; 0x7b8

00012a2c <gtk_window_set_transient_for@plt>:
   12a2c:	add	ip, pc, #0, 12
   12a30:	add	ip, ip, #106496	; 0x1a000
   12a34:	ldr	pc, [ip, #1968]!	; 0x7b0

00012a38 <gtk_text_buffer_new@plt>:
   12a38:	add	ip, pc, #0, 12
   12a3c:	add	ip, ip, #106496	; 0x1a000
   12a40:	ldr	pc, [ip, #1960]!	; 0x7a8

00012a44 <g_source_set_name_by_id@plt>:
   12a44:	add	ip, pc, #0, 12
   12a48:	add	ip, ip, #106496	; 0x1a000
   12a4c:	ldr	pc, [ip, #1952]!	; 0x7a0

00012a50 <g_malloc0_n@plt>:
   12a50:	add	ip, pc, #0, 12
   12a54:	add	ip, ip, #106496	; 0x1a000
   12a58:	ldr	pc, [ip, #1944]!	; 0x798

00012a5c <gtk_main_quit@plt>:
   12a5c:	add	ip, pc, #0, 12
   12a60:	add	ip, ip, #106496	; 0x1a000
   12a64:	ldr	pc, [ip, #1936]!	; 0x790

00012a68 <g_type_class_peek_parent@plt>:
   12a68:	add	ip, pc, #0, 12
   12a6c:	add	ip, ip, #106496	; 0x1a000
   12a70:	ldr	pc, [ip, #1928]!	; 0x788

00012a74 <gtk_window_set_modal@plt>:
   12a74:	add	ip, pc, #0, 12
   12a78:	add	ip, ip, #106496	; 0x1a000
   12a7c:	ldr	pc, [ip, #1920]!	; 0x780

00012a80 <g_ptr_array_add@plt>:
   12a80:	add	ip, pc, #0, 12
   12a84:	add	ip, ip, #106496	; 0x1a000
   12a88:	ldr	pc, [ip, #1912]!	; 0x778

00012a8c <g_markup_escape_text@plt>:
   12a8c:	add	ip, pc, #0, 12
   12a90:	add	ip, ip, #106496	; 0x1a000
   12a94:	ldr	pc, [ip, #1904]!	; 0x770

00012a98 <g_str_has_suffix@plt>:
   12a98:	add	ip, pc, #0, 12
   12a9c:	add	ip, ip, #106496	; 0x1a000
   12aa0:	ldr	pc, [ip, #1896]!	; 0x768

00012aa4 <gtk_init@plt>:
   12aa4:	add	ip, pc, #0, 12
   12aa8:	add	ip, ip, #106496	; 0x1a000
   12aac:	ldr	pc, [ip, #1888]!	; 0x760

00012ab0 <gtk_image_set_from_icon_name@plt>:
   12ab0:	add	ip, pc, #0, 12
   12ab4:	add	ip, ip, #106496	; 0x1a000
   12ab8:	ldr	pc, [ip, #1880]!	; 0x758

00012abc <time@plt>:
   12abc:	add	ip, pc, #0, 12
   12ac0:	add	ip, ip, #106496	; 0x1a000
   12ac4:	ldr	pc, [ip, #1872]!	; 0x750

00012ac8 <pango_parse_markup@plt>:
   12ac8:	add	ip, pc, #0, 12
   12acc:	add	ip, ip, #106496	; 0x1a000
   12ad0:	ldr	pc, [ip, #1864]!	; 0x748

00012ad4 <gtk_message_dialog_new@plt>:
   12ad4:	add	ip, pc, #0, 12
   12ad8:	add	ip, ip, #106496	; 0x1a000
   12adc:	ldr	pc, [ip, #1856]!	; 0x740

00012ae0 <gtk_icon_theme_get_default@plt>:
   12ae0:	add	ip, pc, #0, 12
   12ae4:	add	ip, ip, #106496	; 0x1a000
   12ae8:	ldr	pc, [ip, #1848]!	; 0x738

00012aec <gtk_label_set_markup@plt>:
   12aec:	add	ip, pc, #0, 12
   12af0:	add	ip, ip, #106496	; 0x1a000
   12af4:	ldr	pc, [ip, #1840]!	; 0x730

00012af8 <g_string_append@plt>:
   12af8:	add	ip, pc, #0, 12
   12afc:	add	ip, ip, #106496	; 0x1a000
   12b00:	ldr	pc, [ip, #1832]!	; 0x728

00012b04 <pk_enum_find_string@plt>:
   12b04:	add	ip, pc, #0, 12
   12b08:	add	ip, ip, #106496	; 0x1a000
   12b0c:	ldr	pc, [ip, #1824]!	; 0x720

00012b10 <g_string_append_printf@plt>:
   12b10:	add	ip, pc, #0, 12
   12b14:	add	ip, ip, #106496	; 0x1a000
   12b18:	ldr	pc, [ip, #1816]!	; 0x718

00012b1c <g_type_check_class_cast@plt>:
   12b1c:	add	ip, pc, #0, 12
   12b20:	add	ip, ip, #106496	; 0x1a000
   12b24:	ldr	pc, [ip, #1808]!	; 0x710

00012b28 <__libc_start_main@plt>:
   12b28:	add	ip, pc, #0, 12
   12b2c:	add	ip, ip, #106496	; 0x1a000
   12b30:	ldr	pc, [ip, #1800]!	; 0x708

00012b34 <__gmon_start__@plt>:
   12b34:	add	ip, pc, #0, 12
   12b38:	add	ip, ip, #106496	; 0x1a000
   12b3c:	ldr	pc, [ip, #1792]!	; 0x700

00012b40 <gtk_builder_add_from_file@plt>:
   12b40:	add	ip, pc, #0, 12
   12b44:	add	ip, ip, #106496	; 0x1a000
   12b48:	ldr	pc, [ip, #1784]!	; 0x6f8

00012b4c <pango_attr_list_get_iterator@plt>:
   12b4c:	add	ip, pc, #0, 12
   12b50:	add	ip, ip, #106496	; 0x1a000
   12b54:	ldr	pc, [ip, #1776]!	; 0x6f0

00012b58 <gtk_window_get_type@plt>:
   12b58:	add	ip, pc, #0, 12
   12b5c:	add	ip, ip, #106496	; 0x1a000
   12b60:	ldr	pc, [ip, #1768]!	; 0x6e8

00012b64 <g_source_remove@plt>:
   12b64:	add	ip, pc, #0, 12
   12b68:	add	ip, ip, #106496	; 0x1a000
   12b6c:	ldr	pc, [ip, #1760]!	; 0x6e0

00012b70 <g_strcmp0@plt>:
   12b70:	add	ip, pc, #0, 12
   12b74:	add	ip, ip, #106496	; 0x1a000
   12b78:	ldr	pc, [ip, #1752]!	; 0x6d8

Disassembly of section .text:

00012b80 <.text>:
   12b80:	push	{r4, r5, r6, r7, r8, r9, lr}
   12b84:	sub	sp, sp, #116	; 0x74
   12b88:	ldr	r6, [pc, #780]	; 12e9c <g_strcmp0@plt+0x32c>
   12b8c:	mov	r4, #0
   12b90:	str	r0, [sp, #36]	; 0x24
   12b94:	ldr	r3, [r6]
   12b98:	str	r1, [sp, #32]
   12b9c:	mov	r2, #52	; 0x34
   12ba0:	mov	r1, r4
   12ba4:	ldr	r7, [pc, #756]	; 12ea0 <g_strcmp0@plt+0x330>
   12ba8:	add	r0, sp, #56	; 0x38
   12bac:	mov	r5, #6
   12bb0:	str	r3, [sp, #108]	; 0x6c
   12bb4:	str	r4, [sp, #44]	; 0x2c
   12bb8:	str	r4, [sp, #48]	; 0x30
   12bbc:	bl	126d8 <memset@plt>
   12bc0:	add	r3, sp, #48	; 0x30
   12bc4:	mov	r2, #5
   12bc8:	ldr	r1, [pc, #724]	; 12ea4 <g_strcmp0@plt+0x334>
   12bcc:	mov	r0, r4
   12bd0:	str	r3, [sp, #68]	; 0x44
   12bd4:	str	r5, [sp, #64]	; 0x40
   12bd8:	str	r7, [sp, #52]	; 0x34
   12bdc:	bl	12888 <dcgettext@plt>
   12be0:	mov	r1, r7
   12be4:	str	r0, [sp, #72]	; 0x48
   12be8:	mov	r0, r5
   12bec:	bl	12954 <setlocale@plt>
   12bf0:	ldr	r1, [pc, #688]	; 12ea8 <g_strcmp0@plt+0x338>
   12bf4:	ldr	r0, [pc, #688]	; 12eac <g_strcmp0@plt+0x33c>
   12bf8:	bl	1293c <bindtextdomain@plt>
   12bfc:	ldr	r1, [pc, #684]	; 12eb0 <g_strcmp0@plt+0x340>
   12c00:	ldr	r0, [pc, #676]	; 12eac <g_strcmp0@plt+0x33c>
   12c04:	bl	1254c <bind_textdomain_codeset@plt>
   12c08:	ldr	r0, [pc, #668]	; 12eac <g_strcmp0@plt+0x33c>
   12c0c:	bl	12678 <textdomain@plt>
   12c10:	add	r1, sp, #32
   12c14:	add	r0, sp, #36	; 0x24
   12c18:	bl	12aa4 <gtk_init@plt>
   12c1c:	mov	r2, #5
   12c20:	ldr	r1, [pc, #652]	; 12eb4 <g_strcmp0@plt+0x344>
   12c24:	mov	r0, r4
   12c28:	bl	12888 <dcgettext@plt>
   12c2c:	bl	12900 <g_set_application_name@plt>
   12c30:	ldr	r0, [pc, #640]	; 12eb8 <g_strcmp0@plt+0x348>
   12c34:	bl	125d0 <g_option_context_new@plt>
   12c38:	mov	r2, #5
   12c3c:	ldr	r1, [pc, #632]	; 12ebc <g_strcmp0@plt+0x34c>
   12c40:	mov	r5, r0
   12c44:	mov	r0, r4
   12c48:	bl	12888 <dcgettext@plt>
   12c4c:	mov	r1, r0
   12c50:	mov	r0, r5
   12c54:	bl	12624 <g_option_context_set_summary@plt>
   12c58:	mov	r2, r4
   12c5c:	add	r1, sp, #52	; 0x34
   12c60:	mov	r0, r5
   12c64:	bl	12960 <g_option_context_add_main_entries@plt>
   12c68:	bl	132ac <g_strcmp0@plt+0x73c>
   12c6c:	mov	r1, r0
   12c70:	mov	r0, r5
   12c74:	bl	124e0 <g_option_context_add_group@plt>
   12c78:	mov	r0, #1
   12c7c:	bl	12570 <gtk_get_option_group@plt>
   12c80:	mov	r1, r0
   12c84:	mov	r0, r5
   12c88:	bl	124e0 <g_option_context_add_group@plt>
   12c8c:	mov	r3, r4
   12c90:	add	r2, sp, #32
   12c94:	add	r1, sp, #36	; 0x24
   12c98:	mov	r0, r5
   12c9c:	bl	124d4 <g_option_context_parse@plt>
   12ca0:	mov	r0, r5
   12ca4:	bl	12834 <g_option_context_free@plt>
   12ca8:	mov	r2, #5
   12cac:	ldr	r1, [pc, #524]	; 12ec0 <g_strcmp0@plt+0x350>
   12cb0:	mov	r0, r4
   12cb4:	bl	12888 <dcgettext@plt>
   12cb8:	mov	r1, #1
   12cbc:	bl	13d54 <g_strcmp0@plt+0x11e4>
   12cc0:	subs	r8, r0, #0
   12cc4:	beq	12e1c <g_strcmp0@plt+0x2ac>
   12cc8:	ldr	r5, [sp, #48]	; 0x30
   12ccc:	cmp	r5, r4
   12cd0:	beq	12e30 <g_strcmp0@plt+0x2c0>
   12cd4:	bl	124bc <g_get_current_dir@plt>
   12cd8:	ldr	r3, [sp, #48]	; 0x30
   12cdc:	mov	r7, r0
   12ce0:	ldr	r0, [r3]
   12ce4:	cmp	r0, #0
   12ce8:	ldrne	r5, [pc, #468]	; 12ec4 <g_strcmp0@plt+0x354>
   12cec:	bne	12dec <g_strcmp0@plt+0x27c>
   12cf0:	mov	r0, r7
   12cf4:	bl	1287c <g_free@plt>
   12cf8:	add	r1, sp, #44	; 0x2c
   12cfc:	mov	r0, #0
   12d00:	bl	126c0 <dbus_g_bus_get@plt>
   12d04:	cmp	r0, #0
   12d08:	beq	12e04 <g_strcmp0@plt+0x294>
   12d0c:	ldr	r3, [pc, #436]	; 12ec8 <g_strcmp0@plt+0x358>
   12d10:	ldr	r2, [pc, #436]	; 12ecc <g_strcmp0@plt+0x35c>
   12d14:	ldr	r1, [pc, #436]	; 12ed0 <g_strcmp0@plt+0x360>
   12d18:	bl	125dc <dbus_g_proxy_new_for_name@plt>
   12d1c:	subs	r4, r0, #0
   12d20:	beq	12e68 <g_strcmp0@plt+0x2f8>
   12d24:	mvn	r1, #-2147483648	; 0x80000000
   12d28:	bl	128f4 <dbus_g_proxy_set_default_timeout@plt>
   12d2c:	bl	1299c <g_strv_get_type@plt>
   12d30:	ldr	r1, [pc, #412]	; 12ed4 <g_strcmp0@plt+0x364>
   12d34:	ldr	ip, [sp, #48]	; 0x30
   12d38:	mov	r3, #0
   12d3c:	str	r1, [sp, #16]
   12d40:	mov	r1, #64	; 0x40
   12d44:	str	r3, [sp, #24]
   12d48:	str	r3, [sp, #20]
   12d4c:	str	r3, [sp]
   12d50:	str	r1, [sp, #12]
   12d54:	add	r2, sp, #44	; 0x2c
   12d58:	str	ip, [sp, #8]
   12d5c:	mov	r3, #28
   12d60:	ldr	r1, [pc, #368]	; 12ed8 <g_strcmp0@plt+0x368>
   12d64:	str	r0, [sp, #4]
   12d68:	mov	r0, r4
   12d6c:	bl	1266c <dbus_g_proxy_call@plt>
   12d70:	subs	r8, r0, #0
   12d74:	beq	12e7c <g_strcmp0@plt+0x30c>
   12d78:	ldr	r0, [sp, #44]	; 0x2c
   12d7c:	cmp	r0, #0
   12d80:	beq	12d88 <g_strcmp0@plt+0x218>
   12d84:	bl	12540 <g_error_free@plt>
   12d88:	mov	r0, r4
   12d8c:	bl	129d8 <g_object_unref@plt>
   12d90:	ldr	r0, [sp, #48]	; 0x30
   12d94:	bl	12810 <g_strfreev@plt>
   12d98:	ldr	r2, [sp, #108]	; 0x6c
   12d9c:	ldr	r3, [r6]
   12da0:	clz	r0, r8
   12da4:	cmp	r2, r3
   12da8:	lsr	r0, r0, #5
   12dac:	bne	12e98 <g_strcmp0@plt+0x328>
   12db0:	add	sp, sp, #116	; 0x74
   12db4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12db8:	ldr	r1, [r3, r4]
   12dbc:	mov	r0, r7
   12dc0:	bl	12654 <g_build_filename@plt>
   12dc4:	ldr	r3, [sp, #48]	; 0x30
   12dc8:	mov	r9, r0
   12dcc:	ldr	r0, [r3, r4]
   12dd0:	bl	1287c <g_free@plt>
   12dd4:	ldr	r3, [sp, #48]	; 0x30
   12dd8:	str	r9, [r3, r4]
   12ddc:	add	r4, r4, #4
   12de0:	ldr	r0, [r3, r4]
   12de4:	cmp	r0, #0
   12de8:	beq	12cf0 <g_strcmp0@plt+0x180>
   12dec:	mov	r1, r5
   12df0:	bl	1278c <g_str_has_prefix@plt>
   12df4:	ldr	r3, [sp, #48]	; 0x30
   12df8:	subs	r2, r0, #0
   12dfc:	bne	12ddc <g_strcmp0@plt+0x26c>
   12e00:	b	12db8 <g_strcmp0@plt+0x248>
   12e04:	ldr	r3, [sp, #44]	; 0x2c
   12e08:	ldr	r2, [pc, #204]	; 12edc <g_strcmp0@plt+0x36c>
   12e0c:	mov	r1, #16
   12e10:	ldr	r3, [r3, #8]
   12e14:	ldr	r0, [pc, #196]	; 12ee0 <g_strcmp0@plt+0x370>
   12e18:	bl	12618 <g_log@plt>
   12e1c:	ldr	r0, [sp, #44]	; 0x2c
   12e20:	cmp	r0, #0
   12e24:	beq	12d90 <g_strcmp0@plt+0x220>
   12e28:	bl	12540 <g_error_free@plt>
   12e2c:	b	12d90 <g_strcmp0@plt+0x220>
   12e30:	mov	r2, #5
   12e34:	ldr	r1, [pc, #168]	; 12ee4 <g_strcmp0@plt+0x374>
   12e38:	mov	r0, r5
   12e3c:	bl	12888 <dcgettext@plt>
   12e40:	mov	r2, #5
   12e44:	ldr	r1, [pc, #156]	; 12ee8 <g_strcmp0@plt+0x378>
   12e48:	mov	r4, r0
   12e4c:	mov	r0, r5
   12e50:	bl	12888 <dcgettext@plt>
   12e54:	mov	r2, r5
   12e58:	mov	r1, r0
   12e5c:	mov	r0, r4
   12e60:	bl	14848 <g_strcmp0@plt+0x1cd8>
   12e64:	b	12e1c <g_strcmp0@plt+0x2ac>
   12e68:	ldr	r2, [pc, #124]	; 12eec <g_strcmp0@plt+0x37c>
   12e6c:	mov	r1, #16
   12e70:	ldr	r0, [pc, #104]	; 12ee0 <g_strcmp0@plt+0x370>
   12e74:	bl	12618 <g_log@plt>
   12e78:	b	12e1c <g_strcmp0@plt+0x2ac>
   12e7c:	ldr	r3, [sp, #44]	; 0x2c
   12e80:	ldr	r2, [pc, #84]	; 12edc <g_strcmp0@plt+0x36c>
   12e84:	mov	r1, #16
   12e88:	ldr	r3, [r3, #8]
   12e8c:	ldr	r0, [pc, #76]	; 12ee0 <g_strcmp0@plt+0x370>
   12e90:	bl	12618 <g_log@plt>
   12e94:	b	12d78 <g_strcmp0@plt+0x208>
   12e98:	bl	12858 <__stack_chk_fail@plt>
   12e9c:	andeq	ip, r2, r0, asr lr
   12ea0:	andeq	r7, r1, ip, lsr #25
   12ea4:	andeq	r7, r1, ip, lsr #20
   12ea8:	andeq	r7, r1, r0, asr #20
   12eac:	andeq	r7, r1, r4, asr sl
   12eb0:	andeq	r7, r1, r0, ror #20
   12eb4:	andeq	r7, r1, r8, ror #20
   12eb8:	andeq	r7, r1, ip, ror sl
   12ebc:	muleq	r1, r4, sl
   12ec0:			; <UNDEFINED> instruction: 0x00017ab0
   12ec4:	andeq	r7, r1, r0, lsr #22
   12ec8:	andeq	r7, r1, r4, lsr fp
   12ecc:	andeq	r7, r1, r8, asr fp
   12ed0:	andeq	r7, r1, r4, ror fp
   12ed4:	andeq	r7, r1, r8, asr #23
   12ed8:			; <UNDEFINED> instruction: 0x00017bb4
   12edc:	andeq	r7, r1, r4, ror #29
   12ee0:	andeq	r7, r1, r4, lsr #22
   12ee4:	andeq	r7, r1, r8, asr #21
   12ee8:	strdeq	r7, [r1], -r8
   12eec:	muleq	r1, r0, fp
   12ef0:	mov	fp, #0
   12ef4:	mov	lr, #0
   12ef8:	pop	{r1}		; (ldr r1, [sp], #4)
   12efc:	mov	r2, sp
   12f00:	push	{r2}		; (str r2, [sp, #-4]!)
   12f04:	push	{r0}		; (str r0, [sp, #-4]!)
   12f08:	ldr	ip, [pc, #16]	; 12f20 <g_strcmp0@plt+0x3b0>
   12f0c:	push	{ip}		; (str ip, [sp, #-4]!)
   12f10:	ldr	r0, [pc, #12]	; 12f24 <g_strcmp0@plt+0x3b4>
   12f14:	ldr	r3, [pc, #12]	; 12f28 <g_strcmp0@plt+0x3b8>
   12f18:	bl	12b28 <__libc_start_main@plt>
   12f1c:	bl	1272c <abort@plt>
   12f20:	andeq	r7, r1, ip, lsl sl
   12f24:	andeq	r2, r1, r0, lsl #23
   12f28:			; <UNDEFINED> instruction: 0x000179bc
   12f2c:	ldr	r3, [pc, #20]	; 12f48 <g_strcmp0@plt+0x3d8>
   12f30:	ldr	r2, [pc, #20]	; 12f4c <g_strcmp0@plt+0x3dc>
   12f34:	add	r3, pc, r3
   12f38:	ldr	r2, [r3, r2]
   12f3c:	cmp	r2, #0
   12f40:	bxeq	lr
   12f44:	b	12b34 <__gmon_start__@plt>
   12f48:	andeq	sl, r1, r4, asr #1
   12f4c:	andeq	r0, r0, r4, asr r2
   12f50:	ldr	r0, [pc, #24]	; 12f70 <g_strcmp0@plt+0x400>
   12f54:	ldr	r3, [pc, #24]	; 12f74 <g_strcmp0@plt+0x404>
   12f58:	cmp	r3, r0
   12f5c:	bxeq	lr
   12f60:	ldr	r3, [pc, #16]	; 12f78 <g_strcmp0@plt+0x408>
   12f64:	cmp	r3, #0
   12f68:	bxeq	lr
   12f6c:	bx	r3
   12f70:	andeq	sp, r2, r0, ror #4
   12f74:	andeq	sp, r2, r0, ror #4
   12f78:	andeq	r0, r0, r0
   12f7c:	ldr	r0, [pc, #36]	; 12fa8 <g_strcmp0@plt+0x438>
   12f80:	ldr	r1, [pc, #36]	; 12fac <g_strcmp0@plt+0x43c>
   12f84:	sub	r1, r1, r0
   12f88:	asr	r1, r1, #2
   12f8c:	add	r1, r1, r1, lsr #31
   12f90:	asrs	r1, r1, #1
   12f94:	bxeq	lr
   12f98:	ldr	r3, [pc, #16]	; 12fb0 <g_strcmp0@plt+0x440>
   12f9c:	cmp	r3, #0
   12fa0:	bxeq	lr
   12fa4:	bx	r3
   12fa8:	andeq	sp, r2, r0, ror #4
   12fac:	andeq	sp, r2, r0, ror #4
   12fb0:	andeq	r0, r0, r0
   12fb4:	push	{r4, lr}
   12fb8:	ldr	r4, [pc, #24]	; 12fd8 <g_strcmp0@plt+0x468>
   12fbc:	ldrb	r3, [r4]
   12fc0:	cmp	r3, #0
   12fc4:	popne	{r4, pc}
   12fc8:	bl	12f50 <g_strcmp0@plt+0x3e0>
   12fcc:	mov	r3, #1
   12fd0:	strb	r3, [r4]
   12fd4:	pop	{r4, pc}
   12fd8:	andeq	sp, r2, r4, ror #4
   12fdc:	b	12f7c <g_strcmp0@plt+0x40c>
   12fe0:	bx	lr
   12fe4:	push	{r4, r5, r6, r7, r8, lr}
   12fe8:	sub	sp, sp, #272	; 0x110
   12fec:	ldr	r7, [pc, #312]	; 1312c <g_strcmp0@plt+0x5bc>
   12ff0:	mov	r4, r0
   12ff4:	add	r0, sp, #8
   12ff8:	ldr	r3, [r7]
   12ffc:	mov	r6, r1
   13000:	mov	r8, r2
   13004:	str	r3, [sp, #268]	; 0x10c
   13008:	bl	12abc <time@plt>
   1300c:	add	r0, sp, #8
   13010:	bl	12798 <localtime@plt>
   13014:	ldr	r2, [pc, #276]	; 13130 <g_strcmp0@plt+0x5c0>
   13018:	mov	r1, #254	; 0xfe
   1301c:	mov	r3, r0
   13020:	add	r0, sp, #12
   13024:	bl	126cc <strftime@plt>
   13028:	ldr	r3, [pc, #260]	; 13134 <g_strcmp0@plt+0x5c4>
   1302c:	ldr	r3, [r3]
   13030:	cmp	r3, #0
   13034:	bne	1306c <g_strcmp0@plt+0x4fc>
   13038:	cmp	r6, #128	; 0x80
   1303c:	mov	r3, r8
   13040:	mov	r2, r4
   13044:	add	r1, sp, #12
   13048:	ldreq	r0, [pc, #232]	; 13138 <g_strcmp0@plt+0x5c8>
   1304c:	ldrne	r0, [pc, #232]	; 1313c <g_strcmp0@plt+0x5cc>
   13050:	bl	12924 <g_print@plt>
   13054:	ldr	r2, [sp, #268]	; 0x10c
   13058:	ldr	r3, [r7]
   1305c:	cmp	r2, r3
   13060:	bne	13128 <g_strcmp0@plt+0x5b8>
   13064:	add	sp, sp, #272	; 0x110
   13068:	pop	{r4, r5, r6, r7, r8, pc}
   1306c:	add	r3, sp, #12
   13070:	mov	r2, #32
   13074:	mov	r1, #27
   13078:	ldr	r0, [pc, #192]	; 13140 <g_strcmp0@plt+0x5d0>
   1307c:	bl	12924 <g_print@plt>
   13080:	ldr	r1, [pc, #188]	; 13144 <g_strcmp0@plt+0x5d4>
   13084:	mov	r0, r4
   13088:	bl	12b70 <g_strcmp0@plt>
   1308c:	cmp	r0, #0
   13090:	movne	r3, #0
   13094:	movne	r1, #27
   13098:	moveq	r1, #27
   1309c:	streq	r0, [sp, #4]
   130a0:	moveq	r3, r4
   130a4:	stmne	sp, {r1, r3}
   130a8:	streq	r1, [sp]
   130ac:	movne	r3, r4
   130b0:	moveq	r2, #34	; 0x22
   130b4:	movne	r2, #36	; 0x24
   130b8:	ldr	r0, [pc, #136]	; 13148 <g_strcmp0@plt+0x5d8>
   130bc:	bl	12924 <g_print@plt>
   130c0:	mov	r0, r4
   130c4:	bl	129e4 <strlen@plt>
   130c8:	cmp	r0, #19
   130cc:	mov	r4, r0
   130d0:	bhi	130ec <g_strcmp0@plt+0x57c>
   130d4:	ldr	r5, [pc, #112]	; 1314c <g_strcmp0@plt+0x5dc>
   130d8:	add	r4, r4, #1
   130dc:	mov	r0, r5
   130e0:	bl	12924 <g_print@plt>
   130e4:	cmp	r4, #20
   130e8:	bne	130d8 <g_strcmp0@plt+0x568>
   130ec:	sub	r6, r6, #4
   130f0:	bics	r6, r6, #4
   130f4:	movne	r2, #0
   130f8:	movne	r1, #27
   130fc:	moveq	r1, #27
   13100:	stmne	sp, {r1, r2}
   13104:	streq	r6, [sp, #4]
   13108:	moveq	r3, r8
   1310c:	streq	r1, [sp]
   13110:	moveq	r2, #31
   13114:	movne	r3, r8
   13118:	movne	r2, #34	; 0x22
   1311c:	ldr	r0, [pc, #44]	; 13150 <g_strcmp0@plt+0x5e0>
   13120:	bl	12924 <g_print@plt>
   13124:	b	13054 <g_strcmp0@plt+0x4e4>
   13128:	bl	12858 <__stack_chk_fail@plt>
   1312c:	andeq	ip, r2, r0, asr lr
   13130:	andeq	r7, r1, r4, ror #23
   13134:	andeq	sp, r2, r8, ror #4
   13138:	strdeq	r7, [r1], -r0
   1313c:	strdeq	r7, [r1], -ip
   13140:	andeq	r7, r1, r0, lsl ip
   13144:	andeq	r7, r1, r4, lsr #22
   13148:	andeq	r7, r1, ip, lsl ip
   1314c:	andeq	r7, r1, ip, lsr #24
   13150:	andeq	r7, r1, r0, lsr ip
   13154:	push	{r4, r5, lr}
   13158:	sub	sp, sp, #68	; 0x44
   1315c:	ldr	r4, [pc, #104]	; 131cc <g_strcmp0@plt+0x65c>
   13160:	mov	r5, r0
   13164:	mov	r2, #52	; 0x34
   13168:	ldr	r3, [r4]
   1316c:	mov	r1, #0
   13170:	add	r0, sp, #8
   13174:	str	r3, [sp, #60]	; 0x3c
   13178:	bl	126d8 <memset@plt>
   1317c:	ldr	r2, [pc, #76]	; 131d0 <g_strcmp0@plt+0x660>
   13180:	ldr	r1, [pc, #76]	; 131d4 <g_strcmp0@plt+0x664>
   13184:	ldr	ip, [pc, #76]	; 131d8 <g_strcmp0@plt+0x668>
   13188:	mov	r3, #118	; 0x76
   1318c:	str	r2, [sp, #4]
   13190:	str	r1, [sp, #20]
   13194:	mov	r2, #0
   13198:	mov	r0, r5
   1319c:	add	r1, sp, #4
   131a0:	strb	r3, [sp, #8]
   131a4:	str	ip, [sp, #24]
   131a8:	bl	12960 <g_option_context_add_main_entries@plt>
   131ac:	ldr	r2, [sp, #60]	; 0x3c
   131b0:	ldr	r3, [r4]
   131b4:	cmp	r2, r3
   131b8:	bne	131c8 <g_strcmp0@plt+0x658>
   131bc:	mov	r0, #1
   131c0:	add	sp, sp, #68	; 0x44
   131c4:	pop	{r4, r5, pc}
   131c8:	bl	12858 <__stack_chk_fail@plt>
   131cc:	andeq	ip, r2, r0, asr lr
   131d0:	andeq	r7, r1, r0, asr #24
   131d4:	andeq	sp, r2, ip, ror #4
   131d8:	andeq	r7, r1, r8, asr #24
   131dc:	ldr	r3, [pc, #60]	; 13220 <g_strcmp0@plt+0x6b0>
   131e0:	ldr	r3, [r3, #4]
   131e4:	cmp	r3, #0
   131e8:	beq	13214 <g_strcmp0@plt+0x6a4>
   131ec:	push	{r4, lr}
   131f0:	mov	r1, #12
   131f4:	mov	r4, r0
   131f8:	bl	12a20 <g_log_set_fatal_mask@plt>
   131fc:	mov	r0, r4
   13200:	mov	r3, #0
   13204:	ldr	r2, [pc, #24]	; 13224 <g_strcmp0@plt+0x6b4>
   13208:	mov	r1, #156	; 0x9c
   1320c:	pop	{r4, lr}
   13210:	b	1257c <g_log_set_handler@plt>
   13214:	ldr	r2, [pc, #12]	; 13228 <g_strcmp0@plt+0x6b8>
   13218:	mov	r1, #144	; 0x90
   1321c:	b	1257c <g_log_set_handler@plt>
   13220:	andeq	sp, r2, r8, ror #4
   13224:	andeq	r2, r1, r4, ror #31
   13228:	andeq	r2, r1, r0, ror #31
   1322c:	push	{lr}		; (str lr, [sp, #-4]!)
   13230:	sub	sp, sp, #12
   13234:	ldr	r0, [pc, #88]	; 13294 <g_strcmp0@plt+0x724>
   13238:	bl	131dc <g_strcmp0@plt+0x66c>
   1323c:	ldr	r3, [pc, #84]	; 13298 <g_strcmp0@plt+0x728>
   13240:	ldr	r0, [r3]
   13244:	bl	12840 <fileno@plt>
   13248:	bl	12870 <isatty@plt>
   1324c:	ldr	ip, [pc, #72]	; 1329c <g_strcmp0@plt+0x72c>
   13250:	ldr	r1, [pc, #72]	; 132a0 <g_strcmp0@plt+0x730>
   13254:	ldr	r3, [pc, #72]	; 132a4 <g_strcmp0@plt+0x734>
   13258:	ldr	lr, [ip, #4]
   1325c:	ldr	r2, [pc, #68]	; 132a8 <g_strcmp0@plt+0x738>
   13260:	cmp	lr, #0
   13264:	moveq	r3, r1
   13268:	mov	r1, #128	; 0x80
   1326c:	sub	lr, r0, #1
   13270:	clz	lr, lr
   13274:	lsr	lr, lr, #5
   13278:	str	lr, [sp]
   1327c:	ldr	r0, [pc, #16]	; 13294 <g_strcmp0@plt+0x724>
   13280:	str	lr, [ip]
   13284:	bl	12618 <g_log@plt>
   13288:	mov	r0, #1
   1328c:	add	sp, sp, #12
   13290:	pop	{pc}		; (ldr pc, [sp], #4)
   13294:	andeq	r7, r1, r4, lsr #22
   13298:	andeq	sp, r2, r0, ror #4
   1329c:	andeq	sp, r2, r8, ror #4
   132a0:	andeq	r7, r1, ip, ror ip
   132a4:	andeq	r7, r1, r4, ror ip
   132a8:	andeq	r7, r1, r8, lsl #25
   132ac:	push	{r4, lr}
   132b0:	mov	r2, #5
   132b4:	sub	sp, sp, #8
   132b8:	ldr	r1, [pc, #76]	; 1330c <g_strcmp0@plt+0x79c>
   132bc:	mov	r0, #0
   132c0:	bl	12888 <dcgettext@plt>
   132c4:	mov	r2, #5
   132c8:	ldr	r1, [pc, #64]	; 13310 <g_strcmp0@plt+0x7a0>
   132cc:	mov	r4, r0
   132d0:	mov	r0, #0
   132d4:	bl	12888 <dcgettext@plt>
   132d8:	mov	r3, #0
   132dc:	mov	r1, r4
   132e0:	str	r3, [sp]
   132e4:	mov	r2, r0
   132e8:	ldr	r0, [pc, #36]	; 13314 <g_strcmp0@plt+0x7a4>
   132ec:	bl	12600 <g_option_group_new@plt>
   132f0:	ldr	r2, [pc, #32]	; 13318 <g_strcmp0@plt+0x7a8>
   132f4:	ldr	r1, [pc, #32]	; 1331c <g_strcmp0@plt+0x7ac>
   132f8:	mov	r4, r0
   132fc:	bl	1269c <g_option_group_set_parse_hooks@plt>
   13300:	mov	r0, r4
   13304:	add	sp, sp, #8
   13308:	pop	{r4, pc}
   1330c:			; <UNDEFINED> instruction: 0x00017cb0
   13310:	andeq	r7, r1, r4, asr #25
   13314:	ldrdeq	r7, [r1], -ip
   13318:	andeq	r3, r1, ip, lsr #4
   1331c:	andeq	r3, r1, r4, asr r1
   13320:	ldrb	r2, [r0]
   13324:	cmp	r2, #0
   13328:	beq	13388 <g_strcmp0@plt+0x818>
   1332c:	push	{r4, r5, r6, lr}
   13330:	mov	r4, r0
   13334:	ldr	r1, [pc, #84]	; 13390 <g_strcmp0@plt+0x820>
   13338:	bl	1278c <g_str_has_prefix@plt>
   1333c:	subs	r5, r0, #0
   13340:	bne	13360 <g_strcmp0@plt+0x7f0>
   13344:	mov	r0, r4
   13348:	ldr	r1, [pc, #68]	; 13394 <g_strcmp0@plt+0x824>
   1334c:	bl	12a98 <g_str_has_suffix@plt>
   13350:	cmp	r0, #0
   13354:	bne	13374 <g_strcmp0@plt+0x804>
   13358:	mov	r0, #0
   1335c:	pop	{r4, r5, r6, pc}
   13360:	mov	r2, #5
   13364:	ldr	r1, [pc, #44]	; 13398 <g_strcmp0@plt+0x828>
   13368:	mov	r0, #0
   1336c:	pop	{r4, r5, r6, lr}
   13370:	b	12888 <dcgettext@plt>
   13374:	mov	r0, r5
   13378:	mov	r2, #5
   1337c:	ldr	r1, [pc, #24]	; 1339c <g_strcmp0@plt+0x82c>
   13380:	pop	{r4, r5, r6, lr}
   13384:	b	12888 <dcgettext@plt>
   13388:	mov	r0, #0
   1338c:	bx	lr
   13390:	andeq	r8, r1, r8, ror #2
   13394:	andeq	r7, r1, r0, lsl #27
   13398:	andeq	r7, r1, r8, ror sp
   1339c:	andeq	r7, r1, r4, lsl #27
   133a0:	push	{r4, r5, r6, r7, r8, lr}
   133a4:	mov	r5, r0
   133a8:	ldr	r0, [r0, #4]
   133ac:	mov	r1, #4
   133b0:	add	r0, r0, #1
   133b4:	bl	12a50 <g_malloc0_n@plt>
   133b8:	ldr	r3, [r5, #4]
   133bc:	cmp	r3, #0
   133c0:	mov	r7, r0
   133c4:	beq	133f4 <g_strcmp0@plt+0x884>
   133c8:	sub	r6, r0, #4
   133cc:	mov	r4, #0
   133d0:	ldr	r3, [r5]
   133d4:	ldr	r0, [r3, r4, lsl #2]
   133d8:	bl	12510 <pk_package_get_id@plt>
   133dc:	bl	126b4 <g_strdup@plt>
   133e0:	ldr	r3, [r5, #4]
   133e4:	add	r4, r4, #1
   133e8:	cmp	r3, r4
   133ec:	str	r0, [r6, #4]!
   133f0:	bhi	133d0 <g_strcmp0@plt+0x860>
   133f4:	mov	r0, r7
   133f8:	pop	{r4, r5, r6, r7, r8, pc}
   133fc:	push	{r4, r5, r6, lr}
   13400:	subs	r4, r0, #0
   13404:	beq	1344c <g_strcmp0@plt+0x8dc>
   13408:	bl	128c4 <g_ptr_array_new@plt>
   1340c:	mov	r6, r0
   13410:	mov	r0, r4
   13414:	bl	1281c <g_strv_length@plt>
   13418:	cmp	r0, #0
   1341c:	subne	r4, r4, #4
   13420:	addne	r5, r4, r0, lsl #2
   13424:	beq	13444 <g_strcmp0@plt+0x8d4>
   13428:	ldr	r0, [r4, #4]!
   1342c:	bl	126b4 <g_strdup@plt>
   13430:	mov	r1, r0
   13434:	mov	r0, r6
   13438:	bl	12a80 <g_ptr_array_add@plt>
   1343c:	cmp	r4, r5
   13440:	bne	13428 <g_strcmp0@plt+0x8b8>
   13444:	mov	r0, r6
   13448:	pop	{r4, r5, r6, pc}
   1344c:	ldr	r2, [pc, #20]	; 13468 <g_strcmp0@plt+0x8f8>
   13450:	ldr	r1, [pc, #20]	; 1346c <g_strcmp0@plt+0x8fc>
   13454:	ldr	r0, [pc, #20]	; 13470 <g_strcmp0@plt+0x900>
   13458:	mov	r6, r4
   1345c:	bl	124f8 <g_return_if_fail_warning@plt>
   13460:	mov	r0, r6
   13464:	pop	{r4, r5, r6, pc}
   13468:	andeq	r7, r1, ip, lsl #27
   1346c:	andeq	r7, r1, r4, ror #25
   13470:	andeq	r7, r1, r4, lsr #22
   13474:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13478:	mov	r7, r1
   1347c:	ldr	r8, [pc, #1156]	; 13908 <g_strcmp0@plt+0xd98>
   13480:	sub	sp, sp, #60	; 0x3c
   13484:	mov	r3, #0
   13488:	ldr	r1, [r8]
   1348c:	subs	r6, r0, #0
   13490:	str	r1, [sp, #52]	; 0x34
   13494:	str	r3, [sp, #24]
   13498:	beq	134fc <g_strcmp0@plt+0x98c>
   1349c:	mov	r4, r2
   134a0:	bl	12690 <gtk_text_buffer_get_type@plt>
   134a4:	ldr	r3, [r6]
   134a8:	cmp	r3, #0
   134ac:	beq	134bc <g_strcmp0@plt+0x94c>
   134b0:	ldr	r3, [r3]
   134b4:	cmp	r3, r0
   134b8:	beq	134d0 <g_strcmp0@plt+0x960>
   134bc:	mov	r1, r0
   134c0:	mov	r0, r6
   134c4:	bl	12918 <g_type_check_instance_is_a@plt>
   134c8:	cmp	r0, #0
   134cc:	beq	134fc <g_strcmp0@plt+0x98c>
   134d0:	cmp	r4, #0
   134d4:	beq	138ac <g_strcmp0@plt+0xd3c>
   134d8:	ldrb	r3, [r4]
   134dc:	cmp	r3, #0
   134e0:	bne	13510 <g_strcmp0@plt+0x9a0>
   134e4:	ldr	r2, [sp, #52]	; 0x34
   134e8:	ldr	r3, [r8]
   134ec:	cmp	r2, r3
   134f0:	bne	13904 <g_strcmp0@plt+0xd94>
   134f4:	add	sp, sp, #60	; 0x3c
   134f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134fc:	ldr	r2, [pc, #1032]	; 1390c <g_strcmp0@plt+0xd9c>
   13500:	ldr	r1, [pc, #1032]	; 13910 <g_strcmp0@plt+0xda0>
   13504:	ldr	r0, [pc, #1032]	; 13914 <g_strcmp0@plt+0xda4>
   13508:	bl	124f8 <g_return_if_fail_warning@plt>
   1350c:	b	134e4 <g_strcmp0@plt+0x974>
   13510:	mov	r5, #0
   13514:	add	r2, sp, #24
   13518:	add	r3, sp, #28
   1351c:	str	r2, [sp, #8]
   13520:	str	r3, [sp]
   13524:	mov	r0, r4
   13528:	str	r5, [sp, #4]
   1352c:	mov	r2, r5
   13530:	add	r3, sp, #20
   13534:	mvn	r1, #0
   13538:	bl	12ac8 <pango_parse_markup@plt>
   1353c:	cmp	r0, r5
   13540:	beq	138c0 <g_strcmp0@plt+0xd50>
   13544:	ldr	r3, [sp, #20]
   13548:	cmp	r3, #0
   1354c:	beq	138e4 <g_strcmp0@plt+0xd74>
   13550:	mov	r3, r5
   13554:	mov	r1, r5
   13558:	mov	r2, r7
   1355c:	mov	r0, r6
   13560:	bl	128e8 <gtk_text_buffer_create_mark@plt>
   13564:	ldr	fp, [pc, #940]	; 13918 <g_strcmp0@plt+0xda8>
   13568:	ldr	sl, [pc, #940]	; 1391c <g_strcmp0@plt+0xdac>
   1356c:	mov	r9, r0
   13570:	ldr	r0, [sp, #20]
   13574:	bl	12b4c <pango_attr_list_get_iterator@plt>
   13578:	mov	r4, r0
   1357c:	add	r2, sp, #36	; 0x24
   13580:	add	r1, sp, #32
   13584:	mov	r0, r4
   13588:	bl	12828 <pango_attr_iterator_range@plt>
   1358c:	ldr	r3, [sp, #36]	; 0x24
   13590:	mov	r0, #0
   13594:	cmn	r3, #-2147483647	; 0x80000001
   13598:	ldreq	r3, [sp, #32]
   1359c:	subeq	r3, r3, #1
   135a0:	streq	r3, [sp, #36]	; 0x24
   135a4:	bl	127ec <gtk_text_tag_new@plt>
   135a8:	mov	r1, #1
   135ac:	mov	r5, r0
   135b0:	mov	r0, r4
   135b4:	bl	129b4 <pango_attr_iterator_get@plt>
   135b8:	cmp	r0, #0
   135bc:	beq	135d4 <g_strcmp0@plt+0xa64>
   135c0:	ldr	r2, [r0, #12]
   135c4:	mov	r3, #0
   135c8:	mov	r1, fp
   135cc:	mov	r0, r5
   135d0:	bl	128a0 <g_object_set@plt>
   135d4:	mov	r1, #2
   135d8:	mov	r0, r4
   135dc:	bl	129b4 <pango_attr_iterator_get@plt>
   135e0:	cmp	r0, #0
   135e4:	beq	135fc <g_strcmp0@plt+0xa8c>
   135e8:	ldr	r2, [r0, #12]
   135ec:	mov	r3, #0
   135f0:	mov	r1, sl
   135f4:	mov	r0, r5
   135f8:	bl	128a0 <g_object_set@plt>
   135fc:	mov	r1, #3
   13600:	mov	r0, r4
   13604:	bl	129b4 <pango_attr_iterator_get@plt>
   13608:	cmp	r0, #0
   1360c:	beq	13624 <g_strcmp0@plt+0xab4>
   13610:	ldr	r2, [r0, #12]
   13614:	mov	r3, #0
   13618:	ldr	r1, [pc, #768]	; 13920 <g_strcmp0@plt+0xdb0>
   1361c:	mov	r0, r5
   13620:	bl	128a0 <g_object_set@plt>
   13624:	mov	r1, #4
   13628:	mov	r0, r4
   1362c:	bl	129b4 <pango_attr_iterator_get@plt>
   13630:	cmp	r0, #0
   13634:	beq	1364c <g_strcmp0@plt+0xadc>
   13638:	ldr	r2, [r0, #12]
   1363c:	mov	r3, #0
   13640:	ldr	r1, [pc, #732]	; 13924 <g_strcmp0@plt+0xdb4>
   13644:	mov	r0, r5
   13648:	bl	128a0 <g_object_set@plt>
   1364c:	mov	r1, #5
   13650:	mov	r0, r4
   13654:	bl	129b4 <pango_attr_iterator_get@plt>
   13658:	cmp	r0, #0
   1365c:	beq	13674 <g_strcmp0@plt+0xb04>
   13660:	ldr	r2, [r0, #12]
   13664:	mov	r3, #0
   13668:	ldr	r1, [pc, #696]	; 13928 <g_strcmp0@plt+0xdb8>
   1366c:	mov	r0, r5
   13670:	bl	128a0 <g_object_set@plt>
   13674:	mov	r1, #6
   13678:	mov	r0, r4
   1367c:	bl	129b4 <pango_attr_iterator_get@plt>
   13680:	cmp	r0, #0
   13684:	beq	1369c <g_strcmp0@plt+0xb2c>
   13688:	ldr	r2, [r0, #12]
   1368c:	mov	r3, #0
   13690:	ldr	r1, [pc, #660]	; 1392c <g_strcmp0@plt+0xdbc>
   13694:	mov	r0, r5
   13698:	bl	128a0 <g_object_set@plt>
   1369c:	mov	r1, #7
   136a0:	mov	r0, r4
   136a4:	bl	129b4 <pango_attr_iterator_get@plt>
   136a8:	cmp	r0, #0
   136ac:	beq	136c4 <g_strcmp0@plt+0xb54>
   136b0:	ldr	r2, [r0, #12]
   136b4:	mov	r3, #0
   136b8:	ldr	r1, [pc, #624]	; 13930 <g_strcmp0@plt+0xdc0>
   136bc:	mov	r0, r5
   136c0:	bl	128a0 <g_object_set@plt>
   136c4:	mov	r1, #8
   136c8:	mov	r0, r4
   136cc:	bl	129b4 <pango_attr_iterator_get@plt>
   136d0:	cmp	r0, #0
   136d4:	beq	136ec <g_strcmp0@plt+0xb7c>
   136d8:	ldr	r2, [r0, #12]
   136dc:	mov	r3, #0
   136e0:	ldr	r1, [pc, #588]	; 13934 <g_strcmp0@plt+0xdc4>
   136e4:	mov	r0, r5
   136e8:	bl	128a0 <g_object_set@plt>
   136ec:	mov	r1, #9
   136f0:	mov	r0, r4
   136f4:	bl	129b4 <pango_attr_iterator_get@plt>
   136f8:	cmp	r0, #0
   136fc:	beq	1372c <g_strcmp0@plt+0xbbc>
   13700:	ldr	r1, [r0, #12]
   13704:	ldrh	lr, [r0, #16]
   13708:	mov	ip, #0
   1370c:	str	r1, [sp, #44]	; 0x2c
   13710:	mov	r3, ip
   13714:	add	r2, sp, #40	; 0x28
   13718:	ldr	r1, [pc, #536]	; 13938 <g_strcmp0@plt+0xdc8>
   1371c:	mov	r0, r5
   13720:	strh	lr, [sp, #48]	; 0x30
   13724:	str	ip, [sp, #40]	; 0x28
   13728:	bl	128a0 <g_object_set@plt>
   1372c:	mov	r1, #10
   13730:	mov	r0, r4
   13734:	bl	129b4 <pango_attr_iterator_get@plt>
   13738:	cmp	r0, #0
   1373c:	beq	1376c <g_strcmp0@plt+0xbfc>
   13740:	ldr	r1, [r0, #12]
   13744:	ldrh	lr, [r0, #16]
   13748:	mov	ip, #0
   1374c:	str	r1, [sp, #44]	; 0x2c
   13750:	mov	r3, ip
   13754:	add	r2, sp, #40	; 0x28
   13758:	ldr	r1, [pc, #476]	; 1393c <g_strcmp0@plt+0xdcc>
   1375c:	mov	r0, r5
   13760:	strh	lr, [sp, #48]	; 0x30
   13764:	str	ip, [sp, #40]	; 0x28
   13768:	bl	128a0 <g_object_set@plt>
   1376c:	mov	r1, #11
   13770:	mov	r0, r4
   13774:	bl	129b4 <pango_attr_iterator_get@plt>
   13778:	cmp	r0, #0
   1377c:	beq	13794 <g_strcmp0@plt+0xc24>
   13780:	ldr	r2, [r0, #12]
   13784:	mov	r3, #0
   13788:	ldr	r1, [pc, #432]	; 13940 <g_strcmp0@plt+0xdd0>
   1378c:	mov	r0, r5
   13790:	bl	128a0 <g_object_set@plt>
   13794:	mov	r1, #12
   13798:	mov	r0, r4
   1379c:	bl	129b4 <pango_attr_iterator_get@plt>
   137a0:	cmp	r0, #0
   137a4:	beq	137c4 <g_strcmp0@plt+0xc54>
   137a8:	ldr	r2, [r0, #12]
   137ac:	mov	r3, #0
   137b0:	subs	r2, r2, r3
   137b4:	movne	r2, #1
   137b8:	ldr	r1, [pc, #388]	; 13944 <g_strcmp0@plt+0xdd4>
   137bc:	mov	r0, r5
   137c0:	bl	128a0 <g_object_set@plt>
   137c4:	mov	r1, #13
   137c8:	mov	r0, r4
   137cc:	bl	129b4 <pango_attr_iterator_get@plt>
   137d0:	cmp	r0, #0
   137d4:	beq	137ec <g_strcmp0@plt+0xc7c>
   137d8:	ldr	r2, [r0, #12]
   137dc:	mov	r3, #0
   137e0:	ldr	r1, [pc, #352]	; 13948 <g_strcmp0@plt+0xdd8>
   137e4:	mov	r0, r5
   137e8:	bl	128a0 <g_object_set@plt>
   137ec:	mov	r1, #15
   137f0:	mov	r0, r4
   137f4:	bl	129b4 <pango_attr_iterator_get@plt>
   137f8:	cmp	r0, #0
   137fc:	beq	13818 <g_strcmp0@plt+0xca8>
   13800:	mov	r1, #0
   13804:	ldrd	r2, [r0, #16]
   13808:	str	r1, [sp]
   1380c:	mov	r0, r5
   13810:	ldr	r1, [pc, #308]	; 1394c <g_strcmp0@plt+0xddc>
   13814:	bl	128a0 <g_object_set@plt>
   13818:	mov	r0, r6
   1381c:	bl	129f0 <gtk_text_buffer_get_tag_table@plt>
   13820:	mov	r1, r5
   13824:	bl	127e0 <gtk_text_tag_table_add@plt>
   13828:	mov	r0, r6
   1382c:	bl	129f0 <gtk_text_buffer_get_tag_table@plt>
   13830:	ldr	r1, [pc, #280]	; 13950 <g_strcmp0@plt+0xde0>
   13834:	bl	127bc <gtk_text_tag_table_lookup@plt>
   13838:	ldrd	r2, [sp, #32]
   1383c:	ldr	ip, [sp, #28]
   13840:	mov	r1, #0
   13844:	sub	r3, r3, r2
   13848:	str	r1, [sp, #8]
   1384c:	add	r2, ip, r2
   13850:	mov	r1, r7
   13854:	str	r5, [sp]
   13858:	str	r0, [sp, #4]
   1385c:	mov	r0, r6
   13860:	bl	1296c <gtk_text_buffer_insert_with_tags@plt>
   13864:	mov	r2, r9
   13868:	mov	r1, r7
   1386c:	mov	r0, r6
   13870:	bl	126f0 <gtk_text_buffer_get_iter_at_mark@plt>
   13874:	mov	r0, r4
   13878:	bl	129c0 <pango_attr_iterator_next@plt>
   1387c:	cmp	r0, #0
   13880:	bne	1357c <g_strcmp0@plt+0xa0c>
   13884:	mov	r1, r9
   13888:	mov	r0, r6
   1388c:	bl	125ac <gtk_text_buffer_delete_mark@plt>
   13890:	mov	r0, r4
   13894:	bl	129fc <pango_attr_iterator_destroy@plt>
   13898:	ldr	r0, [sp, #20]
   1389c:	bl	126a8 <pango_attr_list_unref@plt>
   138a0:	ldr	r0, [sp, #28]
   138a4:	bl	1287c <g_free@plt>
   138a8:	b	134e4 <g_strcmp0@plt+0x974>
   138ac:	ldr	r2, [pc, #160]	; 13954 <g_strcmp0@plt+0xde4>
   138b0:	ldr	r1, [pc, #88]	; 13910 <g_strcmp0@plt+0xda0>
   138b4:	ldr	r0, [pc, #88]	; 13914 <g_strcmp0@plt+0xda4>
   138b8:	bl	124f8 <g_return_if_fail_warning@plt>
   138bc:	b	134e4 <g_strcmp0@plt+0x974>
   138c0:	ldr	r3, [sp, #24]
   138c4:	ldr	r2, [pc, #140]	; 13958 <g_strcmp0@plt+0xde8>
   138c8:	mov	r1, #16
   138cc:	ldr	r3, [r3, #8]
   138d0:	ldr	r0, [pc, #60]	; 13914 <g_strcmp0@plt+0xda4>
   138d4:	bl	12618 <g_log@plt>
   138d8:	ldr	r0, [sp, #24]
   138dc:	bl	12540 <g_error_free@plt>
   138e0:	b	134e4 <g_strcmp0@plt+0x974>
   138e4:	mov	r0, r6
   138e8:	mov	r1, r7
   138ec:	mvn	r3, #0
   138f0:	ldr	r2, [sp, #28]
   138f4:	bl	12648 <gtk_text_buffer_insert@plt>
   138f8:	ldr	r0, [sp, #28]
   138fc:	bl	1287c <g_free@plt>
   13900:	b	134e4 <g_strcmp0@plt+0x974>
   13904:	bl	12858 <__stack_chk_fail@plt>
   13908:	andeq	ip, r2, r0, asr lr
   1390c:	muleq	r1, ip, sp
   13910:	strdeq	r7, [r1], -ip
   13914:	andeq	r7, r1, r4, lsr #22
   13918:	andeq	r7, r1, r4, ror #27
   1391c:	strdeq	r7, [r1], -r0
   13920:	strdeq	r7, [r1], -r8
   13924:	andeq	r7, r1, r0, lsl #28
   13928:	andeq	r7, r1, r8, lsl #28
   1392c:	andeq	r7, r1, r0, lsl lr
   13930:	andeq	r7, r1, r8, lsl lr
   13934:	andeq	r7, r1, r0, lsr #28
   13938:	andeq	r7, r1, ip, lsr #28
   1393c:	andeq	r7, r1, ip, lsr lr
   13940:	andeq	r7, r1, ip, asr #28
   13944:	andeq	r7, r1, r8, asr lr
   13948:	andeq	r7, r1, r8, ror #28
   1394c:	andeq	r7, r1, r0, ror lr
   13950:	andeq	r7, r1, r8, ror lr
   13954:			; <UNDEFINED> instruction: 0x00017db8
   13958:	andeq	r7, r1, r8, asr #27
   1395c:	cmp	r1, #0
   13960:	clz	r3, r2
   13964:	lsr	r3, r3, #5
   13968:	push	{r4, r5, r6, r7, lr}
   1396c:	movne	r4, r3
   13970:	moveq	r4, #1
   13974:	cmp	r4, #0
   13978:	sub	sp, sp, #12
   1397c:	beq	13998 <g_strcmp0@plt+0xe28>
   13980:	ldr	r3, [pc, #88]	; 139e0 <g_strcmp0@plt+0xe70>
   13984:	ldr	r0, [r3]
   13988:	clz	r0, r0
   1398c:	lsr	r0, r0, #5
   13990:	add	sp, sp, #12
   13994:	pop	{r4, r5, r6, r7, pc}
   13998:	mov	r3, r1
   1399c:	mov	r6, r2
   139a0:	mov	r5, r1
   139a4:	mov	r7, r0
   139a8:	str	r2, [sp]
   139ac:	mov	r1, #128	; 0x80
   139b0:	ldr	r2, [pc, #44]	; 139e4 <g_strcmp0@plt+0xe74>
   139b4:	ldr	r0, [pc, #44]	; 139e8 <g_strcmp0@plt+0xe78>
   139b8:	bl	12618 <g_log@plt>
   139bc:	mov	r0, r7
   139c0:	mov	r2, r6
   139c4:	mov	r1, r5
   139c8:	bl	12774 <gtk_window_set_default_size@plt>
   139cc:	ldr	r3, [pc, #12]	; 139e0 <g_strcmp0@plt+0xe70>
   139d0:	mov	r0, #1
   139d4:	str	r4, [r3]
   139d8:	add	sp, sp, #12
   139dc:	pop	{r4, r5, r6, r7, pc}
   139e0:	andeq	sp, r2, r0, ror r2
   139e4:	andeq	r7, r1, r0, lsl #29
   139e8:	andeq	r7, r1, r4, lsr #22
   139ec:	push	{r4, r5, r6, lr}
   139f0:	subs	r4, r1, #0
   139f4:	bne	13a10 <g_strcmp0@plt+0xea0>
   139f8:	ldr	r2, [pc, #92]	; 13a5c <g_strcmp0@plt+0xeec>
   139fc:	ldr	r1, [pc, #92]	; 13a60 <g_strcmp0@plt+0xef0>
   13a00:	ldr	r0, [pc, #92]	; 13a64 <g_strcmp0@plt+0xef4>
   13a04:	bl	124f8 <g_return_if_fail_warning@plt>
   13a08:	mov	r0, r4
   13a0c:	pop	{r4, r5, r6, pc}
   13a10:	mov	r5, r0
   13a14:	bl	1275c <gdk_display_get_default@plt>
   13a18:	mov	r1, r4
   13a1c:	bl	12864 <gdk_x11_window_foreign_new_for_display@plt>
   13a20:	mov	r6, r0
   13a24:	bl	12588 <gtk_widget_get_type@plt>
   13a28:	mov	r1, r0
   13a2c:	mov	r0, r5
   13a30:	bl	125b8 <g_type_check_instance_cast@plt>
   13a34:	bl	125e8 <gtk_widget_get_window@plt>
   13a38:	mov	r1, #1
   13a3c:	mov	r4, r0
   13a40:	mov	r0, r5
   13a44:	bl	12a74 <gtk_window_set_modal@plt>
   13a48:	mov	r0, r4
   13a4c:	mov	r1, r6
   13a50:	bl	127d4 <gdk_window_set_transient_for@plt>
   13a54:	mov	r0, #1
   13a58:	pop	{r4, r5, r6, pc}
   13a5c:	muleq	r1, ip, lr
   13a60:	andeq	r7, r1, ip, lsl sp
   13a64:	andeq	r7, r1, r4, lsr #22
   13a68:	push	{r4, r5, r6, r7, r8, lr}
   13a6c:	sub	sp, sp, #40	; 0x28
   13a70:	ldr	r6, [pc, #520]	; 13c80 <g_strcmp0@plt+0x1110>
   13a74:	subs	r4, r1, #0
   13a78:	ldr	r3, [r6]
   13a7c:	str	r3, [sp, #36]	; 0x24
   13a80:	beq	13c14 <g_strcmp0@plt+0x10a4>
   13a84:	cmp	r0, #0
   13a88:	mov	r7, r2
   13a8c:	beq	13c28 <g_strcmp0@plt+0x10b8>
   13a90:	mov	r2, sp
   13a94:	mov	r1, #8
   13a98:	bl	12948 <gtk_style_context_get_color@plt>
   13a9c:	vldr	d4, [pc, #468]	; 13c78 <g_strcmp0@plt+0x1108>
   13aa0:	vldr	d5, [sp, #16]
   13aa4:	vldr	d6, [sp, #8]
   13aa8:	vldr	d7, [sp]
   13aac:	ldr	r0, [pc, #464]	; 13c84 <g_strcmp0@plt+0x1114>
   13ab0:	vmul.f64	d5, d5, d4
   13ab4:	vmul.f64	d6, d6, d4
   13ab8:	vmul.f64	d7, d7, d4
   13abc:	vcvt.u32.f64	s11, d5
   13ac0:	vcvt.u32.f64	s13, d6
   13ac4:	vcvt.u32.f64	s15, d7
   13ac8:	vmov	r3, s11
   13acc:	vmov	r2, s13
   13ad0:	vmov	r1, s15
   13ad4:	bl	12708 <g_strdup_printf@plt>
   13ad8:	mov	r8, r0
   13adc:	mov	r0, r4
   13ae0:	bl	125a0 <pk_package_id_split@plt>
   13ae4:	subs	r5, r0, #0
   13ae8:	beq	13c54 <g_strcmp0@plt+0x10e4>
   13aec:	cmp	r7, #0
   13af0:	beq	13b00 <g_strcmp0@plt+0xf90>
   13af4:	ldrb	r3, [r7]
   13af8:	cmp	r3, #0
   13afc:	bne	13b80 <g_strcmp0@plt+0x1010>
   13b00:	ldr	r0, [r5]
   13b04:	bl	12594 <g_string_new@plt>
   13b08:	ldr	r2, [r5, #4]
   13b0c:	ldrb	r3, [r2]
   13b10:	cmp	r3, #0
   13b14:	mov	r4, r0
   13b18:	bne	13c38 <g_strcmp0@plt+0x10c8>
   13b1c:	ldr	r0, [r5, #8]
   13b20:	bl	13320 <g_strcmp0@plt+0x7b0>
   13b24:	subs	r2, r0, #0
   13b28:	beq	13b38 <g_strcmp0@plt+0xfc8>
   13b2c:	ldr	r1, [pc, #340]	; 13c88 <g_strcmp0@plt+0x1118>
   13b30:	mov	r0, r4
   13b34:	bl	12b10 <g_string_append_printf@plt>
   13b38:	mov	r0, r4
   13b3c:	mov	r1, #0
   13b40:	bl	12990 <g_string_free@plt>
   13b44:	mov	r7, #0
   13b48:	mov	r4, r0
   13b4c:	mov	r0, r7
   13b50:	bl	1287c <g_free@plt>
   13b54:	mov	r0, r8
   13b58:	bl	1287c <g_free@plt>
   13b5c:	mov	r0, r5
   13b60:	bl	12810 <g_strfreev@plt>
   13b64:	ldr	r2, [sp, #36]	; 0x24
   13b68:	ldr	r3, [r6]
   13b6c:	mov	r0, r4
   13b70:	cmp	r2, r3
   13b74:	bne	13c74 <g_strcmp0@plt+0x1104>
   13b78:	add	sp, sp, #40	; 0x28
   13b7c:	pop	{r4, r5, r6, r7, r8, pc}
   13b80:	ldr	r0, [pc, #260]	; 13c8c <g_strcmp0@plt+0x111c>
   13b84:	bl	12594 <g_string_new@plt>
   13b88:	mvn	r1, #0
   13b8c:	mov	r4, r0
   13b90:	mov	r0, r7
   13b94:	bl	12a8c <g_markup_escape_text@plt>
   13b98:	ldr	r1, [pc, #240]	; 13c90 <g_strcmp0@plt+0x1120>
   13b9c:	mov	r2, r0
   13ba0:	mov	r7, r0
   13ba4:	mov	r0, r4
   13ba8:	bl	12b10 <g_string_append_printf@plt>
   13bac:	mov	r2, r8
   13bb0:	mov	r0, r4
   13bb4:	ldr	r1, [pc, #216]	; 13c94 <g_strcmp0@plt+0x1124>
   13bb8:	bl	12b10 <g_string_append_printf@plt>
   13bbc:	mov	r0, r4
   13bc0:	ldr	r1, [r5]
   13bc4:	bl	12af8 <g_string_append@plt>
   13bc8:	ldr	r2, [r5, #4]
   13bcc:	ldrb	r3, [r2]
   13bd0:	cmp	r3, #0
   13bd4:	bne	13c44 <g_strcmp0@plt+0x10d4>
   13bd8:	ldr	r0, [r5, #8]
   13bdc:	bl	13320 <g_strcmp0@plt+0x7b0>
   13be0:	subs	r2, r0, #0
   13be4:	beq	13bf4 <g_strcmp0@plt+0x1084>
   13be8:	ldr	r1, [pc, #152]	; 13c88 <g_strcmp0@plt+0x1118>
   13bec:	mov	r0, r4
   13bf0:	bl	12b10 <g_string_append_printf@plt>
   13bf4:	ldr	r1, [pc, #156]	; 13c98 <g_strcmp0@plt+0x1128>
   13bf8:	mov	r0, r4
   13bfc:	bl	12af8 <g_string_append@plt>
   13c00:	mov	r0, r4
   13c04:	mov	r1, #0
   13c08:	bl	12990 <g_string_free@plt>
   13c0c:	mov	r4, r0
   13c10:	b	13b4c <g_strcmp0@plt+0xfdc>
   13c14:	ldr	r2, [pc, #128]	; 13c9c <g_strcmp0@plt+0x112c>
   13c18:	ldr	r1, [pc, #128]	; 13ca0 <g_strcmp0@plt+0x1130>
   13c1c:	ldr	r0, [pc, #128]	; 13ca4 <g_strcmp0@plt+0x1134>
   13c20:	bl	124f8 <g_return_if_fail_warning@plt>
   13c24:	b	13b64 <g_strcmp0@plt+0xff4>
   13c28:	ldr	r0, [pc, #120]	; 13ca8 <g_strcmp0@plt+0x1138>
   13c2c:	bl	126b4 <g_strdup@plt>
   13c30:	mov	r8, r0
   13c34:	b	13adc <g_strcmp0@plt+0xf6c>
   13c38:	ldr	r1, [pc, #108]	; 13cac <g_strcmp0@plt+0x113c>
   13c3c:	bl	12b10 <g_string_append_printf@plt>
   13c40:	b	13b1c <g_strcmp0@plt+0xfac>
   13c44:	ldr	r1, [pc, #96]	; 13cac <g_strcmp0@plt+0x113c>
   13c48:	mov	r0, r4
   13c4c:	bl	12b10 <g_string_append_printf@plt>
   13c50:	b	13bd8 <g_strcmp0@plt+0x1068>
   13c54:	mov	r3, r4
   13c58:	ldr	r2, [pc, #80]	; 13cb0 <g_strcmp0@plt+0x1140>
   13c5c:	mov	r1, #16
   13c60:	ldr	r0, [pc, #60]	; 13ca4 <g_strcmp0@plt+0x1134>
   13c64:	bl	12618 <g_log@plt>
   13c68:	mov	r4, r5
   13c6c:	mov	r7, r5
   13c70:	b	13b4c <g_strcmp0@plt+0xfdc>
   13c74:	bl	12858 <__stack_chk_fail@plt>
   13c78:	andeq	r0, r0, r0
   13c7c:	rsbmi	lr, pc, r0
   13c80:	andeq	ip, r2, r0, asr lr
   13c84:			; <UNDEFINED> instruction: 0x00017ebc
   13c88:	andeq	r7, r1, ip, ror #29
   13c8c:	andeq	r7, r1, ip, lsr #25
   13c90:	strdeq	r7, [r1], -r4
   13c94:	strdeq	r7, [r1], -r8
   13c98:	andeq	r7, r1, ip, lsl #30
   13c9c:	andeq	r7, r1, r8, lsr #29
   13ca0:	andeq	r7, r1, r8, lsr sp
   13ca4:	andeq	r7, r1, r4, lsr #22
   13ca8:	andeq	r7, r1, ip, asr #29
   13cac:	andeq	r7, r1, r8, ror #29
   13cb0:	ldrdeq	r7, [r1], -r4
   13cb4:	push	{r4, r5, r6, lr}
   13cb8:	subs	r4, r0, #0
   13cbc:	beq	13d2c <g_strcmp0@plt+0x11bc>
   13cc0:	mov	r5, r1
   13cc4:	bl	125a0 <pk_package_id_split@plt>
   13cc8:	cmp	r5, #0
   13ccc:	mov	r6, r0
   13cd0:	beq	13ce0 <g_strcmp0@plt+0x1170>
   13cd4:	ldrb	r3, [r5]
   13cd8:	cmp	r3, #0
   13cdc:	bne	13cfc <g_strcmp0@plt+0x118c>
   13ce0:	ldr	r0, [r6]
   13ce4:	bl	126b4 <g_strdup@plt>
   13ce8:	mov	r4, r0
   13cec:	mov	r0, r6
   13cf0:	bl	12810 <g_strfreev@plt>
   13cf4:	mov	r0, r4
   13cf8:	pop	{r4, r5, r6, pc}
   13cfc:	mov	r0, r5
   13d00:	mvn	r1, #0
   13d04:	bl	12a8c <g_markup_escape_text@plt>
   13d08:	ldr	r2, [r6]
   13d0c:	mov	r5, r0
   13d10:	mov	r1, r0
   13d14:	ldr	r0, [pc, #40]	; 13d44 <g_strcmp0@plt+0x11d4>
   13d18:	bl	12708 <g_strdup_printf@plt>
   13d1c:	mov	r4, r0
   13d20:	mov	r0, r5
   13d24:	bl	1287c <g_free@plt>
   13d28:	b	13cec <g_strcmp0@plt+0x117c>
   13d2c:	ldr	r2, [pc, #20]	; 13d48 <g_strcmp0@plt+0x11d8>
   13d30:	ldr	r1, [pc, #20]	; 13d4c <g_strcmp0@plt+0x11dc>
   13d34:	ldr	r0, [pc, #20]	; 13d50 <g_strcmp0@plt+0x11e0>
   13d38:	bl	124f8 <g_return_if_fail_warning@plt>
   13d3c:	mov	r0, r4
   13d40:	pop	{r4, r5, r6, pc}
   13d44:	andeq	r7, r1, r4, lsl pc
   13d48:	andeq	r7, r1, r8, lsr #29
   13d4c:	andeq	r7, r1, r8, asr sp
   13d50:	andeq	r7, r1, r4, lsr #22
   13d54:	push	{r4, r5, r6, r7, r8, r9, lr}
   13d58:	sub	sp, sp, #12
   13d5c:	mov	r4, r1
   13d60:	mov	r5, r0
   13d64:	bl	12930 <getuid@plt>
   13d68:	adds	r0, r0, #0
   13d6c:	movne	r0, #1
   13d70:	cmp	r4, #0
   13d74:	moveq	r0, #1
   13d78:	cmp	r0, #0
   13d7c:	movne	r4, #0
   13d80:	movne	r5, r4
   13d84:	movne	r6, #1
   13d88:	beq	13da8 <g_strcmp0@plt+0x1238>
   13d8c:	mov	r0, r4
   13d90:	bl	1287c <g_free@plt>
   13d94:	mov	r0, r5
   13d98:	bl	1287c <g_free@plt>
   13d9c:	mov	r0, r6
   13da0:	add	sp, sp, #12
   13da4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13da8:	cmp	r5, #0
   13dac:	beq	13ed8 <g_strcmp0@plt+0x1368>
   13db0:	mov	r2, #5
   13db4:	ldr	r1, [pc, #312]	; 13ef4 <g_strcmp0@plt+0x1384>
   13db8:	bl	12888 <dcgettext@plt>
   13dbc:	mov	r1, r5
   13dc0:	bl	12708 <g_strdup_printf@plt>
   13dc4:	mov	r4, r0
   13dc8:	mov	r2, #5
   13dcc:	ldr	r1, [pc, #292]	; 13ef8 <g_strcmp0@plt+0x1388>
   13dd0:	mov	r0, #0
   13dd4:	bl	12888 <dcgettext@plt>
   13dd8:	mov	r2, #5
   13ddc:	ldr	r1, [pc, #280]	; 13efc <g_strcmp0@plt+0x138c>
   13de0:	ldr	r8, [pc, #280]	; 13f00 <g_strcmp0@plt+0x1390>
   13de4:	mov	r5, r0
   13de8:	mov	r0, #0
   13dec:	bl	12888 <dcgettext@plt>
   13df0:	mov	r1, r5
   13df4:	mov	r3, #0
   13df8:	mov	r2, r0
   13dfc:	ldr	r0, [pc, #256]	; 13f04 <g_strcmp0@plt+0x1394>
   13e00:	bl	12780 <g_strjoin@plt>
   13e04:	mov	r2, #1
   13e08:	mov	r3, #3
   13e0c:	mov	r1, r2
   13e10:	str	r4, [sp, #4]
   13e14:	str	r8, [sp]
   13e18:	mov	r5, r0
   13e1c:	mov	r0, #0
   13e20:	bl	12ad4 <gtk_message_dialog_new@plt>
   13e24:	mov	r6, r0
   13e28:	bl	128dc <gtk_dialog_get_type@plt>
   13e2c:	mov	r7, r0
   13e30:	mov	r1, r0
   13e34:	mov	r0, r6
   13e38:	bl	125b8 <g_type_check_instance_cast@plt>
   13e3c:	mov	r2, #5
   13e40:	ldr	r1, [pc, #192]	; 13f08 <g_strcmp0@plt+0x1398>
   13e44:	mov	r9, r0
   13e48:	mov	r0, #0
   13e4c:	bl	12888 <dcgettext@plt>
   13e50:	mvn	r2, #4
   13e54:	mov	r1, r0
   13e58:	mov	r0, r9
   13e5c:	bl	1251c <gtk_dialog_add_button@plt>
   13e60:	bl	128b8 <gtk_message_dialog_get_type@plt>
   13e64:	mov	r1, r0
   13e68:	mov	r0, r6
   13e6c:	bl	125b8 <g_type_check_instance_cast@plt>
   13e70:	mov	r2, r5
   13e74:	mov	r1, r8
   13e78:	bl	124ec <gtk_message_dialog_format_secondary_text@plt>
   13e7c:	bl	12b58 <gtk_window_get_type@plt>
   13e80:	mov	r1, r0
   13e84:	mov	r0, r6
   13e88:	bl	125b8 <g_type_check_instance_cast@plt>
   13e8c:	ldr	r1, [pc, #120]	; 13f0c <g_strcmp0@plt+0x139c>
   13e90:	bl	12660 <gtk_window_set_icon_name@plt>
   13e94:	mov	r1, r7
   13e98:	mov	r0, r6
   13e9c:	bl	125b8 <g_type_check_instance_cast@plt>
   13ea0:	bl	129a8 <gtk_dialog_run@plt>
   13ea4:	mov	r7, r0
   13ea8:	mov	r0, r6
   13eac:	bl	127c8 <gtk_widget_destroy@plt>
   13eb0:	cmn	r7, #5
   13eb4:	moveq	r6, #1
   13eb8:	beq	13d8c <g_strcmp0@plt+0x121c>
   13ebc:	mov	r3, #0
   13ec0:	ldr	r2, [pc, #72]	; 13f10 <g_strcmp0@plt+0x13a0>
   13ec4:	mov	r1, #16
   13ec8:	ldr	r0, [pc, #68]	; 13f14 <g_strcmp0@plt+0x13a4>
   13ecc:	bl	12618 <g_log@plt>
   13ed0:	mov	r6, #0
   13ed4:	b	13d8c <g_strcmp0@plt+0x121c>
   13ed8:	mov	r2, #5
   13edc:	ldr	r1, [pc, #52]	; 13f18 <g_strcmp0@plt+0x13a8>
   13ee0:	mov	r0, r5
   13ee4:	bl	12888 <dcgettext@plt>
   13ee8:	bl	126b4 <g_strdup@plt>
   13eec:	mov	r4, r0
   13ef0:	b	13dc8 <g_strcmp0@plt+0x1258>
   13ef4:	andeq	r7, r1, r8, asr pc
   13ef8:	andeq	r7, r1, ip, ror pc
   13efc:			; <UNDEFINED> instruction: 0x00017fb4
   13f00:	andeq	r7, r1, r4, ror #29
   13f04:	andeq	r7, r1, ip, lsl #24
   13f08:	andeq	r8, r1, r0, lsl r0
   13f0c:	andeq	r8, r1, r4, lsr #32
   13f10:	andeq	r8, r1, ip, lsr r0
   13f14:	andeq	r7, r1, r4, lsr #22
   13f18:	andeq	r7, r1, r4, lsr #30
   13f1c:	push	{r4, r5, r6, r7, r8, lr}
   13f20:	mov	r4, r0
   13f24:	mov	r0, r1
   13f28:	mov	r5, r1
   13f2c:	mov	r7, r2
   13f30:	bl	16ab0 <g_strcmp0@plt+0x3f40>
   13f34:	ldr	r1, [pc, #124]	; 13fb8 <g_strcmp0@plt+0x1448>
   13f38:	mov	r6, r0
   13f3c:	bl	1278c <g_str_has_prefix@plt>
   13f40:	cmp	r0, #0
   13f44:	bne	13f88 <g_strcmp0@plt+0x1418>
   13f48:	ldr	r1, [pc, #108]	; 13fbc <g_strcmp0@plt+0x144c>
   13f4c:	mov	r0, r6
   13f50:	bl	1278c <g_str_has_prefix@plt>
   13f54:	cmp	r0, #0
   13f58:	movne	r1, #50	; 0x32
   13f5c:	beq	13fa4 <g_strcmp0@plt+0x1434>
   13f60:	mov	r0, r4
   13f64:	bl	16f3c <g_strcmp0@plt+0x43cc>
   13f68:	mov	r2, r6
   13f6c:	mov	r1, r7
   13f70:	mov	r0, r4
   13f74:	bl	17254 <g_strcmp0@plt+0x46e4>
   13f78:	cmp	r5, #18
   13f7c:	beq	13f90 <g_strcmp0@plt+0x1420>
   13f80:	mov	r0, #1
   13f84:	pop	{r4, r5, r6, r7, r8, pc}
   13f88:	mov	r1, #150	; 0x96
   13f8c:	b	13f60 <g_strcmp0@plt+0x13f0>
   13f90:	mov	r0, r4
   13f94:	mov	r1, #0
   13f98:	bl	17004 <g_strcmp0@plt+0x4494>
   13f9c:	mov	r0, #1
   13fa0:	pop	{r4, r5, r6, r7, r8, pc}
   13fa4:	mov	r2, r6
   13fa8:	mov	r1, r7
   13fac:	mov	r0, r4
   13fb0:	bl	17194 <g_strcmp0@plt+0x4624>
   13fb4:	b	13f78 <g_strcmp0@plt+0x1408>
   13fb8:	andeq	r8, r1, r0, asr r0
   13fbc:	andeq	r8, r1, ip, asr r0
   13fc0:	push	{r4, lr}
   13fc4:	subs	r4, r0, #0
   13fc8:	sub	sp, sp, #8
   13fcc:	beq	14050 <g_strcmp0@plt+0x14e0>
   13fd0:	cmp	r4, #59	; 0x3b
   13fd4:	bls	14068 <g_strcmp0@plt+0x14f8>
   13fd8:	vmov	s15, r4
   13fdc:	vldr	d4, [pc, #156]	; 14080 <g_strcmp0@plt+0x1510>
   13fe0:	vldr	d5, [pc, #160]	; 14088 <g_strcmp0@plt+0x1518>
   13fe4:	vcvt.f64.u32	d6, s15
   13fe8:	vdiv.f64	d7, d6, d4
   13fec:	vadd.f64	d7, d7, d5
   13ff0:	vcvt.u32.f64	s15, d7
   13ff4:	vmov	r4, s15
   13ff8:	cmp	r4, #59	; 0x3b
   13ffc:	bls	14038 <g_strcmp0@plt+0x14c8>
   14000:	ldr	r3, [pc, #136]	; 14090 <g_strcmp0@plt+0x1520>
   14004:	mov	r2, #5
   14008:	str	r2, [sp]
   1400c:	umull	r3, r4, r3, r4
   14010:	ldr	r2, [pc, #124]	; 14094 <g_strcmp0@plt+0x1524>
   14014:	ldr	r1, [pc, #124]	; 14098 <g_strcmp0@plt+0x1528>
   14018:	lsr	r4, r4, #5
   1401c:	mov	r3, r4
   14020:	mov	r0, #0
   14024:	bl	12714 <dcngettext@plt>
   14028:	mov	r1, r4
   1402c:	add	sp, sp, #8
   14030:	pop	{r4, lr}
   14034:	b	12708 <g_strdup_printf@plt>
   14038:	mov	r3, #5
   1403c:	str	r3, [sp]
   14040:	ldr	r2, [pc, #84]	; 1409c <g_strcmp0@plt+0x152c>
   14044:	vmov	r3, s15
   14048:	ldr	r1, [pc, #80]	; 140a0 <g_strcmp0@plt+0x1530>
   1404c:	b	14020 <g_strcmp0@plt+0x14b0>
   14050:	mov	r2, #5
   14054:	ldr	r1, [pc, #72]	; 140a4 <g_strcmp0@plt+0x1534>
   14058:	bl	12888 <dcgettext@plt>
   1405c:	add	sp, sp, #8
   14060:	pop	{r4, lr}
   14064:	b	12708 <g_strdup_printf@plt>
   14068:	mov	r3, #5
   1406c:	str	r3, [sp]
   14070:	ldr	r2, [pc, #48]	; 140a8 <g_strcmp0@plt+0x1538>
   14074:	mov	r3, r4
   14078:	ldr	r1, [pc, #44]	; 140ac <g_strcmp0@plt+0x153c>
   1407c:	b	14020 <g_strcmp0@plt+0x14b0>
   14080:	andeq	r0, r0, r0
   14084:	submi	r0, lr, r0
   14088:	andeq	r0, r0, r0
   1408c:	svccc	0x00e00000
   14090:	stmhi	r8, {r0, r3, r7, fp, pc}
   14094:	andeq	r8, r1, r0, lsr #1
   14098:	andeq	r8, r1, ip, lsr #1
   1409c:	andeq	r8, r1, r8, lsl #1
   140a0:	muleq	r1, r4, r0
   140a4:	andeq	r8, r1, ip, rrx
   140a8:	andeq	r8, r1, r0, ror r0
   140ac:	andeq	r8, r1, ip, ror r0
   140b0:	push	{r4, r5, r6, r7, r8, lr}
   140b4:	subs	r5, r0, #0
   140b8:	sub	sp, sp, #8
   140bc:	beq	141e4 <g_strcmp0@plt+0x1674>
   140c0:	cmp	r5, #59	; 0x3b
   140c4:	bls	14268 <g_strcmp0@plt+0x16f8>
   140c8:	vmov	s15, r5
   140cc:	vldr	d5, [pc, #436]	; 14288 <g_strcmp0@plt+0x1718>
   140d0:	vldr	d6, [pc, #440]	; 14290 <g_strcmp0@plt+0x1720>
   140d4:	vcvt.f64.u32	d4, s15
   140d8:	vdiv.f64	d7, d4, d5
   140dc:	vadd.f64	d7, d7, d6
   140e0:	vcvt.u32.f64	s15, d7
   140e4:	vmov	r4, s15
   140e8:	cmp	r4, #59	; 0x3b
   140ec:	bls	14134 <g_strcmp0@plt+0x15c4>
   140f0:	ldr	r5, [pc, #416]	; 14298 <g_strcmp0@plt+0x1728>
   140f4:	umull	r3, r5, r5, r4
   140f8:	lsr	r5, r5, #5
   140fc:	rsb	r3, r5, r5, lsl #4
   14100:	subs	r4, r4, r3, lsl #2
   14104:	bne	14178 <g_strcmp0@plt+0x1608>
   14108:	mov	r3, #5
   1410c:	ldr	r2, [pc, #392]	; 1429c <g_strcmp0@plt+0x172c>
   14110:	ldr	r1, [pc, #392]	; 142a0 <g_strcmp0@plt+0x1730>
   14114:	str	r3, [sp]
   14118:	mov	r0, r4
   1411c:	mov	r3, r5
   14120:	bl	12714 <dcngettext@plt>
   14124:	mov	r1, r5
   14128:	add	sp, sp, #8
   1412c:	pop	{r4, r5, r6, r7, r8, lr}
   14130:	b	12708 <g_strdup_printf@plt>
   14134:	ldr	r6, [pc, #348]	; 14298 <g_strcmp0@plt+0x1728>
   14138:	umull	r3, r6, r6, r5
   1413c:	lsr	r6, r6, #5
   14140:	rsb	r6, r6, r6, lsl #4
   14144:	subs	r6, r5, r6, lsl #2
   14148:	bne	141fc <g_strcmp0@plt+0x168c>
   1414c:	mov	r3, #5
   14150:	str	r3, [sp]
   14154:	mov	r0, r6
   14158:	vmov	r3, s15
   1415c:	ldr	r2, [pc, #320]	; 142a4 <g_strcmp0@plt+0x1734>
   14160:	ldr	r1, [pc, #320]	; 142a8 <g_strcmp0@plt+0x1738>
   14164:	bl	12714 <dcngettext@plt>
   14168:	mov	r1, r4
   1416c:	add	sp, sp, #8
   14170:	pop	{r4, r5, r6, r7, r8, lr}
   14174:	b	12708 <g_strdup_printf@plt>
   14178:	mov	r2, #5
   1417c:	ldr	r1, [pc, #296]	; 142ac <g_strcmp0@plt+0x173c>
   14180:	mov	r0, #0
   14184:	mov	r6, r2
   14188:	bl	12888 <dcgettext@plt>
   1418c:	mov	r3, r5
   14190:	str	r6, [sp]
   14194:	ldr	r2, [pc, #276]	; 142b0 <g_strcmp0@plt+0x1740>
   14198:	ldr	r1, [pc, #276]	; 142b4 <g_strcmp0@plt+0x1744>
   1419c:	mov	r7, r0
   141a0:	mov	r0, #0
   141a4:	bl	12714 <dcngettext@plt>
   141a8:	mov	r3, r4
   141ac:	str	r6, [sp]
   141b0:	ldr	r2, [pc, #256]	; 142b8 <g_strcmp0@plt+0x1748>
   141b4:	ldr	r1, [pc, #256]	; 142bc <g_strcmp0@plt+0x174c>
   141b8:	mov	r8, r0
   141bc:	mov	r0, #0
   141c0:	bl	12714 <dcngettext@plt>
   141c4:	mov	r2, r8
   141c8:	mov	r3, r4
   141cc:	mov	r1, r5
   141d0:	str	r0, [sp]
   141d4:	mov	r0, r7
   141d8:	bl	12708 <g_strdup_printf@plt>
   141dc:	add	sp, sp, #8
   141e0:	pop	{r4, r5, r6, r7, r8, pc}
   141e4:	mov	r2, #5
   141e8:	ldr	r1, [pc, #208]	; 142c0 <g_strcmp0@plt+0x1750>
   141ec:	bl	12888 <dcgettext@plt>
   141f0:	add	sp, sp, #8
   141f4:	pop	{r4, r5, r6, r7, r8, lr}
   141f8:	b	12708 <g_strdup_printf@plt>
   141fc:	mov	r2, #5
   14200:	ldr	r1, [pc, #164]	; 142ac <g_strcmp0@plt+0x173c>
   14204:	mov	r0, #0
   14208:	mov	r5, r2
   1420c:	bl	12888 <dcgettext@plt>
   14210:	mov	r3, r4
   14214:	str	r5, [sp]
   14218:	ldr	r2, [pc, #152]	; 142b8 <g_strcmp0@plt+0x1748>
   1421c:	ldr	r1, [pc, #152]	; 142bc <g_strcmp0@plt+0x174c>
   14220:	mov	r7, r0
   14224:	mov	r0, #0
   14228:	bl	12714 <dcngettext@plt>
   1422c:	mov	r3, r6
   14230:	str	r5, [sp]
   14234:	ldr	r2, [pc, #136]	; 142c4 <g_strcmp0@plt+0x1754>
   14238:	ldr	r1, [pc, #136]	; 142c8 <g_strcmp0@plt+0x1758>
   1423c:	mov	r8, r0
   14240:	mov	r0, #0
   14244:	bl	12714 <dcngettext@plt>
   14248:	mov	r2, r8
   1424c:	mov	r3, r6
   14250:	mov	r1, r4
   14254:	str	r0, [sp]
   14258:	mov	r0, r7
   1425c:	bl	12708 <g_strdup_printf@plt>
   14260:	add	sp, sp, #8
   14264:	pop	{r4, r5, r6, r7, r8, pc}
   14268:	mov	r3, #5
   1426c:	str	r3, [sp]
   14270:	ldr	r2, [pc, #84]	; 142cc <g_strcmp0@plt+0x175c>
   14274:	mov	r3, r5
   14278:	ldr	r1, [pc, #80]	; 142d0 <g_strcmp0@plt+0x1760>
   1427c:	mov	r0, #0
   14280:	b	14120 <g_strcmp0@plt+0x15b0>
   14284:	nop			; (mov r0, r0)
   14288:	andeq	r0, r0, r0
   1428c:	submi	r0, lr, r0
   14290:	andeq	r0, r0, r0
   14294:	svccc	0x00e00000
   14298:	stmhi	r8, {r0, r3, r7, fp, pc}
   1429c:	andeq	r8, r1, r0, lsr #1
   142a0:	andeq	r8, r1, ip, lsr #1
   142a4:	andeq	r8, r1, r8, lsl #1
   142a8:	muleq	r1, r4, r0
   142ac:	strheq	r8, [r1], -r4
   142b0:	andeq	r8, r1, r0, ror #1
   142b4:	andeq	r8, r1, r8, ror #1
   142b8:	andeq	r8, r1, r0, asr #1
   142bc:	andeq	r8, r1, r8, asr #1
   142c0:	andeq	r8, r1, ip, rrx
   142c4:	ldrdeq	r8, [r1], -r0
   142c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   142cc:	andeq	r8, r1, r0, ror r0
   142d0:	andeq	r8, r1, ip, ror r0
   142d4:	push	{r4, lr}
   142d8:	sub	sp, sp, #8
   142dc:	mov	r4, r0
   142e0:	bl	1281c <g_strv_length@plt>
   142e4:	subs	r2, r0, #0
   142e8:	ldreq	r0, [pc, #224]	; 143d0 <g_strcmp0@plt+0x1860>
   142ec:	beq	14328 <g_strcmp0@plt+0x17b8>
   142f0:	cmp	r2, #1
   142f4:	beq	14324 <g_strcmp0@plt+0x17b4>
   142f8:	cmp	r2, #2
   142fc:	beq	1438c <g_strcmp0@plt+0x181c>
   14300:	cmp	r2, #3
   14304:	beq	143ac <g_strcmp0@plt+0x183c>
   14308:	cmp	r2, #4
   1430c:	beq	14334 <g_strcmp0@plt+0x17c4>
   14310:	cmp	r2, #5
   14314:	movne	r0, #0
   14318:	beq	1435c <g_strcmp0@plt+0x17ec>
   1431c:	add	sp, sp, #8
   14320:	pop	{r4, pc}
   14324:	ldr	r0, [r4]
   14328:	add	sp, sp, #8
   1432c:	pop	{r4, lr}
   14330:	b	126b4 <g_strdup@plt>
   14334:	mov	r2, #5
   14338:	ldr	r1, [pc, #148]	; 143d4 <g_strcmp0@plt+0x1864>
   1433c:	mov	r0, #0
   14340:	bl	12888 <dcgettext@plt>
   14344:	ldr	r2, [r4, #12]
   14348:	ldr	r3, [r4, #8]
   1434c:	str	r2, [sp]
   14350:	ldm	r4, {r1, r2}
   14354:	bl	12708 <g_strdup_printf@plt>
   14358:	b	1431c <g_strcmp0@plt+0x17ac>
   1435c:	ldr	r1, [pc, #116]	; 143d8 <g_strcmp0@plt+0x1868>
   14360:	mov	r0, #0
   14364:	bl	12888 <dcgettext@plt>
   14368:	ldr	r2, [r4, #16]
   1436c:	ldr	r3, [r4, #12]
   14370:	str	r2, [sp, #4]
   14374:	str	r3, [sp]
   14378:	ldrd	r2, [r4, #4]
   1437c:	ldr	r1, [r4]
   14380:	bl	12708 <g_strdup_printf@plt>
   14384:	add	sp, sp, #8
   14388:	pop	{r4, pc}
   1438c:	mov	r2, #5
   14390:	ldr	r1, [pc, #68]	; 143dc <g_strcmp0@plt+0x186c>
   14394:	mov	r0, #0
   14398:	bl	12888 <dcgettext@plt>
   1439c:	ldm	r4, {r1, r2}
   143a0:	add	sp, sp, #8
   143a4:	pop	{r4, lr}
   143a8:	b	12708 <g_strdup_printf@plt>
   143ac:	mov	r2, #5
   143b0:	ldr	r1, [pc, #40]	; 143e0 <g_strcmp0@plt+0x1870>
   143b4:	mov	r0, #0
   143b8:	bl	12888 <dcgettext@plt>
   143bc:	ldrd	r2, [r4, #4]
   143c0:	ldr	r1, [r4]
   143c4:	add	sp, sp, #8
   143c8:	pop	{r4, lr}
   143cc:	b	12708 <g_strdup_printf@plt>
   143d0:	strdeq	r8, [r1], -r0
   143d4:	strdeq	r8, [r1], -ip
   143d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   143dc:	andeq	r8, r1, r4, lsl #2
   143e0:	andeq	r8, r1, r0, lsl #2
   143e4:	mov	r0, #0
   143e8:	bx	lr
   143ec:	push	{r4, r5, r6, lr}
   143f0:	mov	r4, r2
   143f4:	mov	r5, r0
   143f8:	bl	1263c <gtk_expander_get_type@plt>
   143fc:	mov	r1, r0
   14400:	mov	r0, r5
   14404:	bl	125b8 <g_type_check_instance_cast@plt>
   14408:	ldr	r1, [pc, #72]	; 14458 <g_strcmp0@plt+0x18e8>
   1440c:	mov	r5, r0
   14410:	mov	r0, r4
   14414:	bl	126e4 <gtk_builder_get_object@plt>
   14418:	mov	r4, r0
   1441c:	bl	12b58 <gtk_window_get_type@plt>
   14420:	mov	r1, r0
   14424:	mov	r0, r4
   14428:	bl	125b8 <g_type_check_instance_cast@plt>
   1442c:	mov	r4, r0
   14430:	mov	r0, r5
   14434:	bl	124a4 <gtk_expander_get_expanded@plt>
   14438:	subs	r1, r0, #0
   1443c:	mov	r0, r4
   14440:	beq	14450 <g_strcmp0@plt+0x18e0>
   14444:	mov	r1, #1
   14448:	pop	{r4, r5, r6, lr}
   1444c:	b	12978 <gtk_window_set_resizable@plt>
   14450:	pop	{r4, r5, r6, lr}
   14454:	b	12978 <gtk_window_set_resizable@plt>
   14458:	andeq	r8, r1, r4, lsr r1
   1445c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14460:	sub	sp, sp, #28
   14464:	ldr	r9, [pc, #884]	; 147e0 <g_strcmp0@plt+0x1c70>
   14468:	cmp	r2, #0
   1446c:	str	r2, [sp, #8]
   14470:	ldr	r2, [r9]
   14474:	mov	r7, #0
   14478:	str	r1, [sp, #12]
   1447c:	str	r2, [sp, #20]
   14480:	str	r7, [sp, #16]
   14484:	beq	14714 <g_strcmp0@plt+0x1ba4>
   14488:	mov	sl, r3
   1448c:	mov	fp, r0
   14490:	bl	12984 <gtk_builder_new@plt>
   14494:	add	r2, sp, #16
   14498:	ldr	r1, [pc, #836]	; 147e4 <g_strcmp0@plt+0x1c74>
   1449c:	mov	r4, r0
   144a0:	bl	12b40 <gtk_builder_add_from_file@plt>
   144a4:	cmp	r0, r7
   144a8:	beq	146f0 <g_strcmp0@plt+0x1b80>
   144ac:	ldr	r1, [pc, #820]	; 147e8 <g_strcmp0@plt+0x1c78>
   144b0:	mov	r0, r4
   144b4:	bl	126e4 <gtk_builder_get_object@plt>
   144b8:	mov	r6, r0
   144bc:	bl	12588 <gtk_widget_get_type@plt>
   144c0:	mov	r1, r0
   144c4:	mov	r5, r0
   144c8:	mov	r0, r6
   144cc:	bl	125b8 <g_type_check_instance_cast@plt>
   144d0:	mov	r8, r0
   144d4:	bl	12b58 <gtk_window_get_type@plt>
   144d8:	mov	r6, r0
   144dc:	mov	r1, r0
   144e0:	mov	r0, r8
   144e4:	bl	125b8 <g_type_check_instance_cast@plt>
   144e8:	mov	r1, r7
   144ec:	bl	12978 <gtk_window_set_resizable@plt>
   144f0:	mov	r2, #2
   144f4:	mov	r3, r7
   144f8:	str	r2, [sp, #4]
   144fc:	ldr	r1, [pc, #744]	; 147ec <g_strcmp0@plt+0x1c7c>
   14500:	ldr	r2, [pc, #744]	; 147f0 <g_strcmp0@plt+0x1c80>
   14504:	str	r7, [sp]
   14508:	mov	r0, r8
   1450c:	bl	127a4 <g_signal_connect_data@plt>
   14510:	mov	r1, r6
   14514:	mov	r0, r8
   14518:	bl	125b8 <g_type_check_instance_cast@plt>
   1451c:	ldr	r1, [pc, #720]	; 147f4 <g_strcmp0@plt+0x1c84>
   14520:	bl	12744 <gtk_window_set_title@plt>
   14524:	cmp	fp, #0
   14528:	mov	r1, r6
   1452c:	mov	r0, r8
   14530:	beq	1472c <g_strcmp0@plt+0x1bbc>
   14534:	bl	125b8 <g_type_check_instance_cast@plt>
   14538:	mov	r1, fp
   1453c:	bl	12a2c <gtk_window_set_transient_for@plt>
   14540:	mov	r0, r8
   14544:	mov	r1, r6
   14548:	bl	125b8 <g_type_check_instance_cast@plt>
   1454c:	ldr	r1, [pc, #676]	; 147f8 <g_strcmp0@plt+0x1c88>
   14550:	bl	12660 <gtk_window_set_icon_name@plt>
   14554:	ldr	r1, [pc, #672]	; 147fc <g_strcmp0@plt+0x1c8c>
   14558:	mov	r0, r4
   1455c:	bl	126e4 <gtk_builder_get_object@plt>
   14560:	mov	r1, r5
   14564:	bl	125b8 <g_type_check_instance_cast@plt>
   14568:	mov	r7, #0
   1456c:	mov	r3, #2
   14570:	ldr	r2, [pc, #632]	; 147f0 <g_strcmp0@plt+0x1c80>
   14574:	str	r3, [sp, #4]
   14578:	ldr	r1, [pc, #640]	; 14800 <g_strcmp0@plt+0x1c90>
   1457c:	mov	r3, r7
   14580:	str	r7, [sp]
   14584:	bl	127a4 <g_signal_connect_data@plt>
   14588:	ldr	r1, [pc, #628]	; 14804 <g_strcmp0@plt+0x1c94>
   1458c:	mov	r0, r4
   14590:	bl	126e4 <gtk_builder_get_object@plt>
   14594:	mov	r1, r5
   14598:	bl	125b8 <g_type_check_instance_cast@plt>
   1459c:	mov	r3, r4
   145a0:	ldr	r2, [pc, #608]	; 14808 <g_strcmp0@plt+0x1c98>
   145a4:	ldr	r1, [pc, #608]	; 1480c <g_strcmp0@plt+0x1c9c>
   145a8:	str	r7, [sp, #4]
   145ac:	str	r7, [sp]
   145b0:	bl	127a4 <g_signal_connect_data@plt>
   145b4:	ldr	r1, [pc, #596]	; 14810 <g_strcmp0@plt+0x1ca0>
   145b8:	mov	r0, r4
   145bc:	bl	126e4 <gtk_builder_get_object@plt>
   145c0:	mov	r1, r5
   145c4:	bl	125b8 <g_type_check_instance_cast@plt>
   145c8:	mov	fp, r0
   145cc:	bl	12558 <gtk_label_get_type@plt>
   145d0:	mov	r1, r0
   145d4:	mov	r8, r0
   145d8:	mov	r0, fp
   145dc:	bl	125b8 <g_type_check_instance_cast@plt>
   145e0:	ldr	r1, [sp, #12]
   145e4:	bl	12564 <gtk_label_set_label@plt>
   145e8:	ldr	r1, [pc, #548]	; 14814 <g_strcmp0@plt+0x1ca4>
   145ec:	mov	r0, r4
   145f0:	bl	126e4 <gtk_builder_get_object@plt>
   145f4:	mov	r1, r5
   145f8:	bl	125b8 <g_type_check_instance_cast@plt>
   145fc:	mov	r1, r8
   14600:	bl	125b8 <g_type_check_instance_cast@plt>
   14604:	ldr	r1, [sp, #8]
   14608:	bl	12aec <gtk_label_set_markup@plt>
   1460c:	cmp	sl, r7
   14610:	beq	14620 <g_strcmp0@plt+0x1ab0>
   14614:	ldrb	r3, [sl]
   14618:	cmp	r3, r7
   1461c:	bne	1473c <g_strcmp0@plt+0x1bcc>
   14620:	ldr	r1, [pc, #476]	; 14804 <g_strcmp0@plt+0x1c94>
   14624:	mov	r0, r4
   14628:	bl	126e4 <gtk_builder_get_object@plt>
   1462c:	mov	r1, r5
   14630:	bl	125b8 <g_type_check_instance_cast@plt>
   14634:	bl	125f4 <gtk_widget_hide@plt>
   14638:	ldr	r1, [pc, #424]	; 147e8 <g_strcmp0@plt+0x1c78>
   1463c:	mov	r0, r4
   14640:	bl	126e4 <gtk_builder_get_object@plt>
   14644:	mov	r1, r5
   14648:	bl	125b8 <g_type_check_instance_cast@plt>
   1464c:	mov	r1, r6
   14650:	mov	r7, r0
   14654:	bl	125b8 <g_type_check_instance_cast@plt>
   14658:	ldr	r1, [sp, #64]	; 0x40
   1465c:	bl	1284c <gtk_window_present_with_time@plt>
   14660:	mov	r1, r6
   14664:	mov	r0, r7
   14668:	bl	125b8 <g_type_check_instance_cast@plt>
   1466c:	ldr	r1, [pc, #388]	; 147f8 <g_strcmp0@plt+0x1c88>
   14670:	bl	12660 <gtk_window_set_icon_name@plt>
   14674:	bl	12894 <gtk_main@plt>
   14678:	cmp	r7, #0
   1467c:	movne	r8, #0
   14680:	beq	146c0 <g_strcmp0@plt+0x1b50>
   14684:	ldr	r3, [r7]
   14688:	cmp	r3, #0
   1468c:	beq	1469c <g_strcmp0@plt+0x1b2c>
   14690:	ldr	r3, [r3]
   14694:	cmp	r5, r3
   14698:	beq	146e4 <g_strcmp0@plt+0x1b74>
   1469c:	mov	r1, r5
   146a0:	mov	r0, r7
   146a4:	bl	12918 <g_type_check_instance_is_a@plt>
   146a8:	cmp	r0, #0
   146ac:	bne	146e4 <g_strcmp0@plt+0x1b74>
   146b0:	cmp	r8, #0
   146b4:	beq	146c0 <g_strcmp0@plt+0x1b50>
   146b8:	mov	r0, r8
   146bc:	bl	129d8 <g_object_unref@plt>
   146c0:	mov	r0, r4
   146c4:	bl	129d8 <g_object_unref@plt>
   146c8:	mov	r0, #1
   146cc:	ldr	r2, [sp, #20]
   146d0:	ldr	r3, [r9]
   146d4:	cmp	r2, r3
   146d8:	bne	147dc <g_strcmp0@plt+0x1c6c>
   146dc:	add	sp, sp, #28
   146e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e4:	mov	r0, r7
   146e8:	bl	125f4 <gtk_widget_hide@plt>
   146ec:	b	146b0 <g_strcmp0@plt+0x1b40>
   146f0:	ldr	r3, [sp, #16]
   146f4:	ldr	r2, [pc, #284]	; 14818 <g_strcmp0@plt+0x1ca8>
   146f8:	mov	r1, #16
   146fc:	ldr	r3, [r3, #8]
   14700:	ldr	r0, [pc, #276]	; 1481c <g_strcmp0@plt+0x1cac>
   14704:	bl	12618 <g_log@plt>
   14708:	ldr	r0, [sp, #16]
   1470c:	bl	12540 <g_error_free@plt>
   14710:	b	146c0 <g_strcmp0@plt+0x1b50>
   14714:	ldr	r0, [pc, #256]	; 1481c <g_strcmp0@plt+0x1cac>
   14718:	ldr	r2, [pc, #256]	; 14820 <g_strcmp0@plt+0x1cb0>
   1471c:	ldr	r1, [pc, #256]	; 14824 <g_strcmp0@plt+0x1cb4>
   14720:	bl	124f8 <g_return_if_fail_warning@plt>
   14724:	ldr	r0, [sp, #8]
   14728:	b	146cc <g_strcmp0@plt+0x1b5c>
   1472c:	bl	125b8 <g_type_check_instance_cast@plt>
   14730:	mov	r1, #1
   14734:	bl	12a74 <gtk_window_set_modal@plt>
   14738:	b	14540 <g_strcmp0@plt+0x19d0>
   1473c:	mov	r0, r7
   14740:	bl	12a38 <gtk_text_buffer_new@plt>
   14744:	mov	r8, r0
   14748:	mov	r0, sl
   1474c:	bl	129e4 <strlen@plt>
   14750:	mov	r1, sl
   14754:	mov	r2, r0
   14758:	mov	r0, r8
   1475c:	bl	128ac <gtk_text_buffer_insert_at_cursor@plt>
   14760:	ldr	r1, [pc, #192]	; 14828 <g_strcmp0@plt+0x1cb8>
   14764:	mov	r0, r4
   14768:	bl	126e4 <gtk_builder_get_object@plt>
   1476c:	mov	r1, r5
   14770:	bl	125b8 <g_type_check_instance_cast@plt>
   14774:	mov	r7, r0
   14778:	bl	125c4 <gtk_text_view_get_type@plt>
   1477c:	mov	r1, r0
   14780:	mov	r0, r7
   14784:	bl	125b8 <g_type_check_instance_cast@plt>
   14788:	mov	r1, r8
   1478c:	bl	12768 <gtk_text_view_set_buffer@plt>
   14790:	ldr	r1, [pc, #80]	; 147e8 <g_strcmp0@plt+0x1c78>
   14794:	mov	r0, r4
   14798:	bl	126e4 <gtk_builder_get_object@plt>
   1479c:	mov	r1, r5
   147a0:	bl	125b8 <g_type_check_instance_cast@plt>
   147a4:	mov	r1, r6
   147a8:	mov	r7, r0
   147ac:	bl	125b8 <g_type_check_instance_cast@plt>
   147b0:	ldr	r1, [sp, #64]	; 0x40
   147b4:	bl	1284c <gtk_window_present_with_time@plt>
   147b8:	mov	r1, r6
   147bc:	mov	r0, r7
   147c0:	bl	125b8 <g_type_check_instance_cast@plt>
   147c4:	ldr	r1, [pc, #44]	; 147f8 <g_strcmp0@plt+0x1c88>
   147c8:	bl	12660 <gtk_window_set_icon_name@plt>
   147cc:	bl	12894 <gtk_main@plt>
   147d0:	cmp	r7, #0
   147d4:	bne	14684 <g_strcmp0@plt+0x1b14>
   147d8:	b	146b0 <g_strcmp0@plt+0x1b40>
   147dc:	bl	12858 <__stack_chk_fail@plt>
   147e0:	andeq	ip, r2, r0, asr lr
   147e4:	andeq	r8, r1, r4, asr #2
   147e8:	andeq	r8, r1, r4, lsr r1
   147ec:	muleq	r1, r4, r1
   147f0:	andeq	r2, r1, ip, asr sl
   147f4:	andeq	r7, r1, ip, lsr #25
   147f8:	andeq	r8, r1, r4, lsr #32
   147fc:	andeq	r8, r1, r4, lsr #3
   14800:			; <UNDEFINED> instruction: 0x000181b4
   14804:			; <UNDEFINED> instruction: 0x000181bc
   14808:	andeq	r4, r1, ip, ror #7
   1480c:	ldrdeq	r8, [r1], -r0
   14810:	andeq	r8, r1, r4, ror #3
   14814:	strdeq	r8, [r1], -r0
   14818:	andeq	r8, r1, ip, ror r1
   1481c:	andeq	r7, r1, r4, lsr #22
   14820:	andeq	r8, r1, ip, ror #2
   14824:	andeq	r8, r1, r0, lsl r1
   14828:	andeq	r8, r1, r0, lsl #4
   1482c:	push	{lr}		; (str lr, [sp, #-4]!)
   14830:	sub	sp, sp, #12
   14834:	mov	ip, #0
   14838:	str	ip, [sp]
   1483c:	bl	1445c <g_strcmp0@plt+0x18ec>
   14840:	add	sp, sp, #12
   14844:	pop	{pc}		; (ldr pc, [sp], #4)
   14848:	push	{lr}		; (str lr, [sp, #-4]!)
   1484c:	sub	sp, sp, #12
   14850:	mov	ip, #0
   14854:	mov	r3, r2
   14858:	str	ip, [sp]
   1485c:	mov	r2, r1
   14860:	mov	r1, r0
   14864:	mov	r0, ip
   14868:	bl	1445c <g_strcmp0@plt+0x18ec>
   1486c:	add	sp, sp, #12
   14870:	pop	{pc}		; (ldr pc, [sp], #4)
   14874:	cmp	r0, #3
   14878:	ldrls	pc, [pc, r0, lsl #2]
   1487c:	b	148d0 <g_strcmp0@plt+0x1d60>
   14880:	andeq	r4, r1, r0, asr #17
   14884:			; <UNDEFINED> instruction: 0x000148b0
   14888:	andeq	r4, r1, r0, lsr #17
   1488c:	muleq	r1, r0, r8
   14890:	mov	r2, #5
   14894:	ldr	r1, [pc, #80]	; 148ec <g_strcmp0@plt+0x1d7c>
   14898:	mov	r0, #0
   1489c:	b	12888 <dcgettext@plt>
   148a0:	mov	r2, #5
   148a4:	ldr	r1, [pc, #68]	; 148f0 <g_strcmp0@plt+0x1d80>
   148a8:	mov	r0, #0
   148ac:	b	12888 <dcgettext@plt>
   148b0:	mov	r2, #5
   148b4:	ldr	r1, [pc, #56]	; 148f4 <g_strcmp0@plt+0x1d84>
   148b8:	mov	r0, #0
   148bc:	b	12888 <dcgettext@plt>
   148c0:	mov	r2, #5
   148c4:	ldr	r1, [pc, #44]	; 148f8 <g_strcmp0@plt+0x1d88>
   148c8:	mov	r0, #0
   148cc:	b	12888 <dcgettext@plt>
   148d0:	push	{r4, lr}
   148d4:	mov	r1, #16
   148d8:	ldr	r2, [pc, #28]	; 148fc <g_strcmp0@plt+0x1d8c>
   148dc:	ldr	r0, [pc, #28]	; 14900 <g_strcmp0@plt+0x1d90>
   148e0:	bl	12618 <g_log@plt>
   148e4:	mov	r0, #0
   148e8:	pop	{r4, pc}
   148ec:	andeq	r8, r1, ip, ror #15
   148f0:	andeq	r8, r1, r8, ror #15
   148f4:	andeq	r8, r1, r4, ror #15
   148f8:	strdeq	r8, [r1], -r4
   148fc:	strdeq	r8, [r1], -ip
   14900:	andeq	r7, r1, r4, lsr #22
   14904:	cmp	r0, #67	; 0x43
   14908:	ldrls	pc, [pc, r0, lsl #2]
   1490c:	b	14e60 <g_strcmp0@plt+0x22f0>
   14910:	andeq	r4, r1, r0, asr lr
   14914:	andeq	r4, r1, r0, asr #28
   14918:	andeq	r4, r1, r0, lsr lr
   1491c:	andeq	r4, r1, r0, lsr #28
   14920:	andeq	r4, r1, r0, lsl lr
   14924:	andeq	r4, r1, r0, lsl #28
   14928:	strdeq	r4, [r1], -r0
   1492c:	andeq	r4, r1, r0, ror #27
   14930:	ldrdeq	r4, [r1], -r0
   14934:	andeq	r4, r1, r0, asr #27
   14938:			; <UNDEFINED> instruction: 0x00014db0
   1493c:	andeq	r4, r1, r0, lsr #27
   14940:	muleq	r1, r0, sp
   14944:	andeq	r4, r1, r0, lsl #27
   14948:	andeq	r4, r1, r0, ror sp
   1494c:	andeq	r4, r1, r0, ror #26
   14950:	andeq	r4, r1, r0, asr sp
   14954:	andeq	r4, r1, r0, asr #26
   14958:	andeq	r4, r1, r0, lsr sp
   1495c:	andeq	r4, r1, r0, lsr #26
   14960:	andeq	r4, r1, r0, lsl sp
   14964:	andeq	r4, r1, r0, lsl #26
   14968:	strdeq	r4, [r1], -r0
   1496c:	andeq	r4, r1, r0, ror #25
   14970:	ldrdeq	r4, [r1], -r0
   14974:	andeq	r4, r1, r0, asr #25
   14978:			; <UNDEFINED> instruction: 0x00014cb0
   1497c:	andeq	r4, r1, r0, lsr #25
   14980:	muleq	r1, r0, ip
   14984:	andeq	r4, r1, r0, lsl #25
   14988:	andeq	r4, r1, r0, ror ip
   1498c:	andeq	r4, r1, r0, ror #24
   14990:	andeq	r4, r1, r0, asr ip
   14994:	andeq	r4, r1, r0, asr #24
   14998:	andeq	r4, r1, r0, lsr ip
   1499c:	andeq	r4, r1, r0, lsr #24
   149a0:	andeq	r4, r1, r0, lsl ip
   149a4:	andeq	r4, r1, r0, lsl #24
   149a8:	strdeq	r4, [r1], -r0
   149ac:	andeq	r4, r1, r0, ror #23
   149b0:	ldrdeq	r4, [r1], -r0
   149b4:	andeq	r4, r1, r0, asr #23
   149b8:			; <UNDEFINED> instruction: 0x00014bb0
   149bc:	andeq	r4, r1, r0, lsr #23
   149c0:	muleq	r1, r0, fp
   149c4:	andeq	r4, r1, r0, lsl #23
   149c8:	andeq	r4, r1, r0, ror fp
   149cc:	andeq	r4, r1, r0, ror #22
   149d0:	andeq	r4, r1, r0, asr fp
   149d4:	andeq	r4, r1, r0, asr #22
   149d8:	andeq	r4, r1, r0, lsr fp
   149dc:	andeq	r4, r1, r0, lsr #22
   149e0:	andeq	r4, r1, r0, lsl fp
   149e4:	andeq	r4, r1, r0, lsl #22
   149e8:	strdeq	r4, [r1], -r0
   149ec:	andeq	r4, r1, r0, ror #21
   149f0:	ldrdeq	r4, [r1], -r0
   149f4:	andeq	r4, r1, r0, asr #21
   149f8:			; <UNDEFINED> instruction: 0x00014ab0
   149fc:	andeq	r4, r1, r0, lsr #21
   14a00:	muleq	r1, r0, sl
   14a04:	andeq	r4, r1, r0, lsl #21
   14a08:	andeq	r4, r1, r0, ror sl
   14a0c:	andeq	r4, r1, r0, ror #20
   14a10:	andeq	r4, r1, r0, asr sl
   14a14:	andeq	r4, r1, r0, asr #20
   14a18:	andeq	r4, r1, r0, lsr sl
   14a1c:	andeq	r4, r1, r0, lsr #20
   14a20:	mov	r2, #5
   14a24:	ldr	r1, [pc, #1104]	; 14e7c <g_strcmp0@plt+0x230c>
   14a28:	mov	r0, #0
   14a2c:	b	12888 <dcgettext@plt>
   14a30:	mov	r2, #5
   14a34:	ldr	r1, [pc, #1092]	; 14e80 <g_strcmp0@plt+0x2310>
   14a38:	mov	r0, #0
   14a3c:	b	12888 <dcgettext@plt>
   14a40:	mov	r2, #5
   14a44:	ldr	r1, [pc, #1080]	; 14e84 <g_strcmp0@plt+0x2314>
   14a48:	mov	r0, #0
   14a4c:	b	12888 <dcgettext@plt>
   14a50:	mov	r2, #5
   14a54:	ldr	r1, [pc, #1068]	; 14e88 <g_strcmp0@plt+0x2318>
   14a58:	mov	r0, #0
   14a5c:	b	12888 <dcgettext@plt>
   14a60:	mov	r2, #5
   14a64:	ldr	r1, [pc, #1056]	; 14e8c <g_strcmp0@plt+0x231c>
   14a68:	mov	r0, #0
   14a6c:	b	12888 <dcgettext@plt>
   14a70:	mov	r2, #5
   14a74:	ldr	r1, [pc, #1044]	; 14e90 <g_strcmp0@plt+0x2320>
   14a78:	mov	r0, #0
   14a7c:	b	12888 <dcgettext@plt>
   14a80:	mov	r2, #5
   14a84:	ldr	r1, [pc, #1032]	; 14e94 <g_strcmp0@plt+0x2324>
   14a88:	mov	r0, #0
   14a8c:	b	12888 <dcgettext@plt>
   14a90:	mov	r2, #5
   14a94:	ldr	r1, [pc, #1020]	; 14e98 <g_strcmp0@plt+0x2328>
   14a98:	mov	r0, #0
   14a9c:	b	12888 <dcgettext@plt>
   14aa0:	mov	r2, #5
   14aa4:	ldr	r1, [pc, #1008]	; 14e9c <g_strcmp0@plt+0x232c>
   14aa8:	mov	r0, #0
   14aac:	b	12888 <dcgettext@plt>
   14ab0:	mov	r2, #5
   14ab4:	ldr	r1, [pc, #996]	; 14ea0 <g_strcmp0@plt+0x2330>
   14ab8:	mov	r0, #0
   14abc:	b	12888 <dcgettext@plt>
   14ac0:	mov	r2, #5
   14ac4:	ldr	r1, [pc, #984]	; 14ea4 <g_strcmp0@plt+0x2334>
   14ac8:	mov	r0, #0
   14acc:	b	12888 <dcgettext@plt>
   14ad0:	mov	r2, #5
   14ad4:	ldr	r1, [pc, #972]	; 14ea8 <g_strcmp0@plt+0x2338>
   14ad8:	mov	r0, #0
   14adc:	b	12888 <dcgettext@plt>
   14ae0:	mov	r2, #5
   14ae4:	ldr	r1, [pc, #960]	; 14eac <g_strcmp0@plt+0x233c>
   14ae8:	mov	r0, #0
   14aec:	b	12888 <dcgettext@plt>
   14af0:	mov	r2, #5
   14af4:	ldr	r1, [pc, #948]	; 14eb0 <g_strcmp0@plt+0x2340>
   14af8:	mov	r0, #0
   14afc:	b	12888 <dcgettext@plt>
   14b00:	mov	r2, #5
   14b04:	ldr	r1, [pc, #936]	; 14eb4 <g_strcmp0@plt+0x2344>
   14b08:	mov	r0, #0
   14b0c:	b	12888 <dcgettext@plt>
   14b10:	mov	r2, #5
   14b14:	ldr	r1, [pc, #924]	; 14eb8 <g_strcmp0@plt+0x2348>
   14b18:	mov	r0, #0
   14b1c:	b	12888 <dcgettext@plt>
   14b20:	mov	r2, #5
   14b24:	ldr	r1, [pc, #912]	; 14ebc <g_strcmp0@plt+0x234c>
   14b28:	mov	r0, #0
   14b2c:	b	12888 <dcgettext@plt>
   14b30:	mov	r2, #5
   14b34:	ldr	r1, [pc, #900]	; 14ec0 <g_strcmp0@plt+0x2350>
   14b38:	mov	r0, #0
   14b3c:	b	12888 <dcgettext@plt>
   14b40:	mov	r2, #5
   14b44:	ldr	r1, [pc, #888]	; 14ec4 <g_strcmp0@plt+0x2354>
   14b48:	mov	r0, #0
   14b4c:	b	12888 <dcgettext@plt>
   14b50:	mov	r2, #5
   14b54:	ldr	r1, [pc, #876]	; 14ec8 <g_strcmp0@plt+0x2358>
   14b58:	mov	r0, #0
   14b5c:	b	12888 <dcgettext@plt>
   14b60:	mov	r2, #5
   14b64:	ldr	r1, [pc, #864]	; 14ecc <g_strcmp0@plt+0x235c>
   14b68:	mov	r0, #0
   14b6c:	b	12888 <dcgettext@plt>
   14b70:	mov	r2, #5
   14b74:	ldr	r1, [pc, #852]	; 14ed0 <g_strcmp0@plt+0x2360>
   14b78:	mov	r0, #0
   14b7c:	b	12888 <dcgettext@plt>
   14b80:	mov	r2, #5
   14b84:	ldr	r1, [pc, #840]	; 14ed4 <g_strcmp0@plt+0x2364>
   14b88:	mov	r0, #0
   14b8c:	b	12888 <dcgettext@plt>
   14b90:	mov	r2, #5
   14b94:	ldr	r1, [pc, #828]	; 14ed8 <g_strcmp0@plt+0x2368>
   14b98:	mov	r0, #0
   14b9c:	b	12888 <dcgettext@plt>
   14ba0:	mov	r2, #5
   14ba4:	ldr	r1, [pc, #816]	; 14edc <g_strcmp0@plt+0x236c>
   14ba8:	mov	r0, #0
   14bac:	b	12888 <dcgettext@plt>
   14bb0:	mov	r2, #5
   14bb4:	ldr	r1, [pc, #804]	; 14ee0 <g_strcmp0@plt+0x2370>
   14bb8:	mov	r0, #0
   14bbc:	b	12888 <dcgettext@plt>
   14bc0:	mov	r2, #5
   14bc4:	ldr	r1, [pc, #792]	; 14ee4 <g_strcmp0@plt+0x2374>
   14bc8:	mov	r0, #0
   14bcc:	b	12888 <dcgettext@plt>
   14bd0:	mov	r2, #5
   14bd4:	ldr	r1, [pc, #780]	; 14ee8 <g_strcmp0@plt+0x2378>
   14bd8:	mov	r0, #0
   14bdc:	b	12888 <dcgettext@plt>
   14be0:	mov	r2, #5
   14be4:	ldr	r1, [pc, #768]	; 14eec <g_strcmp0@plt+0x237c>
   14be8:	mov	r0, #0
   14bec:	b	12888 <dcgettext@plt>
   14bf0:	mov	r2, #5
   14bf4:	ldr	r1, [pc, #756]	; 14ef0 <g_strcmp0@plt+0x2380>
   14bf8:	mov	r0, #0
   14bfc:	b	12888 <dcgettext@plt>
   14c00:	mov	r2, #5
   14c04:	ldr	r1, [pc, #744]	; 14ef4 <g_strcmp0@plt+0x2384>
   14c08:	mov	r0, #0
   14c0c:	b	12888 <dcgettext@plt>
   14c10:	mov	r2, #5
   14c14:	ldr	r1, [pc, #732]	; 14ef8 <g_strcmp0@plt+0x2388>
   14c18:	mov	r0, #0
   14c1c:	b	12888 <dcgettext@plt>
   14c20:	mov	r2, #5
   14c24:	ldr	r1, [pc, #720]	; 14efc <g_strcmp0@plt+0x238c>
   14c28:	mov	r0, #0
   14c2c:	b	12888 <dcgettext@plt>
   14c30:	mov	r2, #5
   14c34:	ldr	r1, [pc, #708]	; 14f00 <g_strcmp0@plt+0x2390>
   14c38:	mov	r0, #0
   14c3c:	b	12888 <dcgettext@plt>
   14c40:	mov	r2, #5
   14c44:	ldr	r1, [pc, #696]	; 14f04 <g_strcmp0@plt+0x2394>
   14c48:	mov	r0, #0
   14c4c:	b	12888 <dcgettext@plt>
   14c50:	mov	r2, #5
   14c54:	ldr	r1, [pc, #684]	; 14f08 <g_strcmp0@plt+0x2398>
   14c58:	mov	r0, #0
   14c5c:	b	12888 <dcgettext@plt>
   14c60:	mov	r2, #5
   14c64:	ldr	r1, [pc, #672]	; 14f0c <g_strcmp0@plt+0x239c>
   14c68:	mov	r0, #0
   14c6c:	b	12888 <dcgettext@plt>
   14c70:	mov	r2, #5
   14c74:	ldr	r1, [pc, #660]	; 14f10 <g_strcmp0@plt+0x23a0>
   14c78:	mov	r0, #0
   14c7c:	b	12888 <dcgettext@plt>
   14c80:	mov	r2, #5
   14c84:	ldr	r1, [pc, #648]	; 14f14 <g_strcmp0@plt+0x23a4>
   14c88:	mov	r0, #0
   14c8c:	b	12888 <dcgettext@plt>
   14c90:	mov	r2, #5
   14c94:	ldr	r1, [pc, #636]	; 14f18 <g_strcmp0@plt+0x23a8>
   14c98:	mov	r0, #0
   14c9c:	b	12888 <dcgettext@plt>
   14ca0:	mov	r2, #5
   14ca4:	ldr	r1, [pc, #624]	; 14f1c <g_strcmp0@plt+0x23ac>
   14ca8:	mov	r0, #0
   14cac:	b	12888 <dcgettext@plt>
   14cb0:	mov	r2, #5
   14cb4:	ldr	r1, [pc, #612]	; 14f20 <g_strcmp0@plt+0x23b0>
   14cb8:	mov	r0, #0
   14cbc:	b	12888 <dcgettext@plt>
   14cc0:	mov	r2, #5
   14cc4:	ldr	r1, [pc, #600]	; 14f24 <g_strcmp0@plt+0x23b4>
   14cc8:	mov	r0, #0
   14ccc:	b	12888 <dcgettext@plt>
   14cd0:	mov	r2, #5
   14cd4:	ldr	r1, [pc, #588]	; 14f28 <g_strcmp0@plt+0x23b8>
   14cd8:	mov	r0, #0
   14cdc:	b	12888 <dcgettext@plt>
   14ce0:	mov	r2, #5
   14ce4:	ldr	r1, [pc, #576]	; 14f2c <g_strcmp0@plt+0x23bc>
   14ce8:	mov	r0, #0
   14cec:	b	12888 <dcgettext@plt>
   14cf0:	mov	r2, #5
   14cf4:	ldr	r1, [pc, #564]	; 14f30 <g_strcmp0@plt+0x23c0>
   14cf8:	mov	r0, #0
   14cfc:	b	12888 <dcgettext@plt>
   14d00:	mov	r2, #5
   14d04:	ldr	r1, [pc, #552]	; 14f34 <g_strcmp0@plt+0x23c4>
   14d08:	mov	r0, #0
   14d0c:	b	12888 <dcgettext@plt>
   14d10:	mov	r2, #5
   14d14:	ldr	r1, [pc, #540]	; 14f38 <g_strcmp0@plt+0x23c8>
   14d18:	mov	r0, #0
   14d1c:	b	12888 <dcgettext@plt>
   14d20:	mov	r2, #5
   14d24:	ldr	r1, [pc, #528]	; 14f3c <g_strcmp0@plt+0x23cc>
   14d28:	mov	r0, #0
   14d2c:	b	12888 <dcgettext@plt>
   14d30:	mov	r2, #5
   14d34:	ldr	r1, [pc, #516]	; 14f40 <g_strcmp0@plt+0x23d0>
   14d38:	mov	r0, #0
   14d3c:	b	12888 <dcgettext@plt>
   14d40:	mov	r2, #5
   14d44:	ldr	r1, [pc, #504]	; 14f44 <g_strcmp0@plt+0x23d4>
   14d48:	mov	r0, #0
   14d4c:	b	12888 <dcgettext@plt>
   14d50:	mov	r2, #5
   14d54:	ldr	r1, [pc, #492]	; 14f48 <g_strcmp0@plt+0x23d8>
   14d58:	mov	r0, #0
   14d5c:	b	12888 <dcgettext@plt>
   14d60:	mov	r2, #5
   14d64:	ldr	r1, [pc, #480]	; 14f4c <g_strcmp0@plt+0x23dc>
   14d68:	mov	r0, #0
   14d6c:	b	12888 <dcgettext@plt>
   14d70:	mov	r2, #5
   14d74:	ldr	r1, [pc, #468]	; 14f50 <g_strcmp0@plt+0x23e0>
   14d78:	mov	r0, #0
   14d7c:	b	12888 <dcgettext@plt>
   14d80:	mov	r2, #5
   14d84:	ldr	r1, [pc, #456]	; 14f54 <g_strcmp0@plt+0x23e4>
   14d88:	mov	r0, #0
   14d8c:	b	12888 <dcgettext@plt>
   14d90:	mov	r2, #5
   14d94:	ldr	r1, [pc, #444]	; 14f58 <g_strcmp0@plt+0x23e8>
   14d98:	mov	r0, #0
   14d9c:	b	12888 <dcgettext@plt>
   14da0:	mov	r2, #5
   14da4:	ldr	r1, [pc, #432]	; 14f5c <g_strcmp0@plt+0x23ec>
   14da8:	mov	r0, #0
   14dac:	b	12888 <dcgettext@plt>
   14db0:	mov	r2, #5
   14db4:	ldr	r1, [pc, #420]	; 14f60 <g_strcmp0@plt+0x23f0>
   14db8:	mov	r0, #0
   14dbc:	b	12888 <dcgettext@plt>
   14dc0:	mov	r2, #5
   14dc4:	ldr	r1, [pc, #408]	; 14f64 <g_strcmp0@plt+0x23f4>
   14dc8:	mov	r0, #0
   14dcc:	b	12888 <dcgettext@plt>
   14dd0:	mov	r2, #5
   14dd4:	ldr	r1, [pc, #396]	; 14f68 <g_strcmp0@plt+0x23f8>
   14dd8:	mov	r0, #0
   14ddc:	b	12888 <dcgettext@plt>
   14de0:	mov	r2, #5
   14de4:	ldr	r1, [pc, #384]	; 14f6c <g_strcmp0@plt+0x23fc>
   14de8:	mov	r0, #0
   14dec:	b	12888 <dcgettext@plt>
   14df0:	mov	r2, #5
   14df4:	ldr	r1, [pc, #372]	; 14f70 <g_strcmp0@plt+0x2400>
   14df8:	mov	r0, #0
   14dfc:	b	12888 <dcgettext@plt>
   14e00:	mov	r2, #5
   14e04:	ldr	r1, [pc, #360]	; 14f74 <g_strcmp0@plt+0x2404>
   14e08:	mov	r0, #0
   14e0c:	b	12888 <dcgettext@plt>
   14e10:	mov	r2, #5
   14e14:	ldr	r1, [pc, #348]	; 14f78 <g_strcmp0@plt+0x2408>
   14e18:	mov	r0, #0
   14e1c:	b	12888 <dcgettext@plt>
   14e20:	mov	r2, #5
   14e24:	ldr	r1, [pc, #336]	; 14f7c <g_strcmp0@plt+0x240c>
   14e28:	mov	r0, #0
   14e2c:	b	12888 <dcgettext@plt>
   14e30:	mov	r2, #5
   14e34:	ldr	r1, [pc, #324]	; 14f80 <g_strcmp0@plt+0x2410>
   14e38:	mov	r0, #0
   14e3c:	b	12888 <dcgettext@plt>
   14e40:	mov	r2, #5
   14e44:	ldr	r1, [pc, #312]	; 14f84 <g_strcmp0@plt+0x2414>
   14e48:	mov	r0, #0
   14e4c:	b	12888 <dcgettext@plt>
   14e50:	mov	r2, #5
   14e54:	ldr	r1, [pc, #300]	; 14f88 <g_strcmp0@plt+0x2418>
   14e58:	mov	r0, #0
   14e5c:	b	12888 <dcgettext@plt>
   14e60:	push	{r4, lr}
   14e64:	mov	r1, #16
   14e68:	ldr	r2, [pc, #284]	; 14f8c <g_strcmp0@plt+0x241c>
   14e6c:	ldr	r0, [pc, #284]	; 14f90 <g_strcmp0@plt+0x2420>
   14e70:	bl	12618 <g_log@plt>
   14e74:	mov	r0, #0
   14e78:	pop	{r4, pc}
   14e7c:	andeq	r9, r1, r0, lsl r0
   14e80:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14e84:	ldrdeq	r8, [r1], -ip
   14e88:			; <UNDEFINED> instruction: 0x00018fbc
   14e8c:	andeq	r8, r1, r4, lsr #31
   14e90:	andeq	r8, r1, ip, ror pc
   14e94:	andeq	r8, r1, r8, asr pc
   14e98:	andeq	r8, r1, r0, lsr pc
   14e9c:	andeq	r8, r1, r0, lsl pc
   14ea0:	strdeq	r8, [r1], -r4
   14ea4:	ldrdeq	r8, [r1], -ip
   14ea8:	andeq	r8, r1, r0, asr #29
   14eac:	andeq	r8, r1, ip, lsr #29
   14eb0:	muleq	r1, r4, lr
   14eb4:	andeq	r8, r1, r8, ror lr
   14eb8:	andeq	r8, r1, ip, asr lr
   14ebc:	andeq	r8, r1, r8, lsr lr
   14ec0:	andeq	r8, r1, r0, lsl lr
   14ec4:	strdeq	r8, [r1], -ip
   14ec8:	andeq	r8, r1, r4, ror #27
   14ecc:	andeq	r8, r1, r8, asr #27
   14ed0:	andeq	r8, r1, r8, lsr #27
   14ed4:	andeq	r8, r1, ip, ror sp
   14ed8:	andeq	r8, r1, r0, asr sp
   14edc:	andeq	r8, r1, r0, lsr sp
   14ee0:	andeq	r8, r1, r8, lsl #26
   14ee4:	andeq	r8, r1, r4, ror #25
   14ee8:	ldrdeq	r8, [r1], -r0
   14eec:			; <UNDEFINED> instruction: 0x00018cb8
   14ef0:	andeq	r8, r1, r0, lsr #25
   14ef4:	andeq	r8, r1, ip, lsl #23
   14ef8:	andeq	r8, r1, r0, ror fp
   14efc:	andeq	r8, r1, r8, asr #22
   14f00:	andeq	r8, r1, r8, lsr #22
   14f04:	andeq	r8, r1, ip, ror ip
   14f08:	andeq	r8, r1, r4, lsl #22
   14f0c:	andeq	r8, r1, r0, ror #24
   14f10:	andeq	r8, r1, r8, asr #24
   14f14:	andeq	r8, r1, r0, lsr ip
   14f18:	andeq	r8, r1, r8, lsl #24
   14f1c:	strdeq	r8, [r1], -r0
   14f20:	andeq	r8, r1, r0, ror #23
   14f24:	andeq	r8, r1, r4, ror #21
   14f28:			; <UNDEFINED> instruction: 0x00018abc
   14f2c:	andeq	r8, r1, ip, asr #23
   14f30:			; <UNDEFINED> instruction: 0x00018bb4
   14f34:	muleq	r1, r8, sl
   14f38:	andeq	r8, r1, r4, asr sl
   14f3c:	andeq	r8, r1, r4, lsr sl
   14f40:	andeq	r8, r1, r0, asr r8
   14f44:	andeq	r8, r1, r0, lsl #21
   14f48:	andeq	r8, r1, r0, lsr #20
   14f4c:	andeq	r8, r1, r0, lsl #17
   14f50:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   14f54:			; <UNDEFINED> instruction: 0x000189b8
   14f58:	muleq	r1, ip, r9
   14f5c:	andeq	r8, r1, r4, lsl #19
   14f60:	andeq	r8, r1, r8, ror #18
   14f64:	andeq	r8, r1, r4, asr #18
   14f68:	andeq	r8, r1, r8, lsr #18
   14f6c:	andeq	r8, r1, r8, lsl #18
   14f70:	strdeq	r8, [r1], -r4
   14f74:	andeq	r8, r1, r4, ror #17
   14f78:			; <UNDEFINED> instruction: 0x000188bc
   14f7c:	muleq	r1, ip, r8
   14f80:	andeq	r8, r1, r0, lsr r8
   14f84:	andeq	r8, r1, r0, ror r8
   14f88:	andeq	r8, r1, r0, lsl r8
   14f8c:	andeq	r9, r1, r0, lsr #32
   14f90:	andeq	r7, r1, r4, lsr #22
   14f94:	cmp	r0, #67	; 0x43
   14f98:	ldrls	pc, [pc, r0, lsl #2]
   14f9c:	b	154f0 <g_strcmp0@plt+0x2980>
   14fa0:	andeq	r5, r1, r0, ror #9
   14fa4:	ldrdeq	r5, [r1], -r0
   14fa8:	andeq	r5, r1, r0, asr #9
   14fac:			; <UNDEFINED> instruction: 0x000154b0
   14fb0:	andeq	r5, r1, r0, lsr #9
   14fb4:	muleq	r1, r0, r4
   14fb8:	andeq	r5, r1, r0, lsl #9
   14fbc:	andeq	r5, r1, r0, ror r4
   14fc0:	andeq	r5, r1, r0, ror #8
   14fc4:	andeq	r5, r1, r0, asr r4
   14fc8:	andeq	r5, r1, r0, asr #8
   14fcc:	andeq	r5, r1, r0, lsr r4
   14fd0:	andeq	r5, r1, r0, lsr #8
   14fd4:	andeq	r5, r1, r0, lsl r4
   14fd8:	andeq	r5, r1, r0, lsl #8
   14fdc:	strdeq	r5, [r1], -r0
   14fe0:	andeq	r5, r1, r0, ror #7
   14fe4:	ldrdeq	r5, [r1], -r0
   14fe8:	andeq	r5, r1, r0, asr #7
   14fec:			; <UNDEFINED> instruction: 0x000153b0
   14ff0:	andeq	r5, r1, r0, lsr #7
   14ff4:	muleq	r1, r0, r3
   14ff8:	andeq	r5, r1, r0, lsl #7
   14ffc:	andeq	r5, r1, r0, ror r3
   15000:	andeq	r5, r1, r0, ror #6
   15004:	andeq	r5, r1, r0, asr r3
   15008:	andeq	r5, r1, r0, asr #6
   1500c:	andeq	r5, r1, r0, lsr r3
   15010:	andeq	r5, r1, r0, lsr #6
   15014:	andeq	r5, r1, r0, lsl r3
   15018:	andeq	r5, r1, r0, lsl #6
   1501c:	strdeq	r5, [r1], -r0
   15020:	andeq	r5, r1, r0, ror #5
   15024:	ldrdeq	r5, [r1], -r0
   15028:	andeq	r5, r1, r0, asr #5
   1502c:			; <UNDEFINED> instruction: 0x000152b0
   15030:	andeq	r5, r1, r0, lsr #5
   15034:	muleq	r1, r0, r2
   15038:	andeq	r5, r1, r0, lsl #5
   1503c:	andeq	r5, r1, r0, ror r2
   15040:	andeq	r5, r1, r0, ror #4
   15044:	andeq	r5, r1, r0, asr r2
   15048:	andeq	r5, r1, r0, asr #4
   1504c:	andeq	r5, r1, r0, lsr r2
   15050:	andeq	r5, r1, r0, lsr #4
   15054:	andeq	r5, r1, r0, lsl r2
   15058:	andeq	r5, r1, r0, lsl #4
   1505c:	strdeq	r5, [r1], -r0
   15060:	andeq	r5, r1, r0, ror #3
   15064:	ldrdeq	r5, [r1], -r0
   15068:	andeq	r5, r1, r0, asr #3
   1506c:			; <UNDEFINED> instruction: 0x000151b0
   15070:	andeq	r5, r1, r0, lsr #3
   15074:	muleq	r1, r0, r1
   15078:	andeq	r5, r1, r0, lsl #3
   1507c:	andeq	r5, r1, r0, ror r1
   15080:	andeq	r5, r1, r0, ror #2
   15084:	andeq	r5, r1, r0, asr r1
   15088:	andeq	r5, r1, r0, asr #2
   1508c:	andeq	r5, r1, r0, lsr r1
   15090:	andeq	r5, r1, r0, lsr #2
   15094:	andeq	r5, r1, r0, lsl r1
   15098:	andeq	r5, r1, r0, lsl #2
   1509c:	strdeq	r5, [r1], -r0
   150a0:	andeq	r5, r1, r0, ror #1
   150a4:	ldrdeq	r5, [r1], -r0
   150a8:	andeq	r5, r1, r0, asr #1
   150ac:	strheq	r5, [r1], -r0
   150b0:	mov	r2, #5
   150b4:	ldr	r1, [pc, #1084]	; 154f8 <g_strcmp0@plt+0x2988>
   150b8:	mov	r0, #0
   150bc:	b	12888 <dcgettext@plt>
   150c0:	mov	r2, #5
   150c4:	ldr	r1, [pc, #1072]	; 154fc <g_strcmp0@plt+0x298c>
   150c8:	mov	r0, #0
   150cc:	b	12888 <dcgettext@plt>
   150d0:	mov	r2, #5
   150d4:	ldr	r1, [pc, #1060]	; 15500 <g_strcmp0@plt+0x2990>
   150d8:	mov	r0, #0
   150dc:	b	12888 <dcgettext@plt>
   150e0:	mov	r2, #5
   150e4:	ldr	r1, [pc, #1048]	; 15504 <g_strcmp0@plt+0x2994>
   150e8:	mov	r0, #0
   150ec:	b	12888 <dcgettext@plt>
   150f0:	mov	r2, #5
   150f4:	ldr	r1, [pc, #1036]	; 15508 <g_strcmp0@plt+0x2998>
   150f8:	mov	r0, #0
   150fc:	b	12888 <dcgettext@plt>
   15100:	mov	r2, #5
   15104:	ldr	r1, [pc, #1024]	; 1550c <g_strcmp0@plt+0x299c>
   15108:	mov	r0, #0
   1510c:	b	12888 <dcgettext@plt>
   15110:	mov	r2, #5
   15114:	ldr	r1, [pc, #1012]	; 15510 <g_strcmp0@plt+0x29a0>
   15118:	mov	r0, #0
   1511c:	b	12888 <dcgettext@plt>
   15120:	mov	r2, #5
   15124:	ldr	r1, [pc, #1000]	; 15514 <g_strcmp0@plt+0x29a4>
   15128:	mov	r0, #0
   1512c:	b	12888 <dcgettext@plt>
   15130:	mov	r2, #5
   15134:	ldr	r1, [pc, #988]	; 15518 <g_strcmp0@plt+0x29a8>
   15138:	mov	r0, #0
   1513c:	b	12888 <dcgettext@plt>
   15140:	mov	r2, #5
   15144:	ldr	r1, [pc, #976]	; 1551c <g_strcmp0@plt+0x29ac>
   15148:	mov	r0, #0
   1514c:	b	12888 <dcgettext@plt>
   15150:	mov	r2, #5
   15154:	ldr	r1, [pc, #964]	; 15520 <g_strcmp0@plt+0x29b0>
   15158:	mov	r0, #0
   1515c:	b	12888 <dcgettext@plt>
   15160:	mov	r2, #5
   15164:	ldr	r1, [pc, #952]	; 15524 <g_strcmp0@plt+0x29b4>
   15168:	mov	r0, #0
   1516c:	b	12888 <dcgettext@plt>
   15170:	mov	r2, #5
   15174:	ldr	r1, [pc, #940]	; 15528 <g_strcmp0@plt+0x29b8>
   15178:	mov	r0, #0
   1517c:	b	12888 <dcgettext@plt>
   15180:	mov	r2, #5
   15184:	ldr	r1, [pc, #928]	; 1552c <g_strcmp0@plt+0x29bc>
   15188:	mov	r0, #0
   1518c:	b	12888 <dcgettext@plt>
   15190:	mov	r2, #5
   15194:	ldr	r1, [pc, #916]	; 15530 <g_strcmp0@plt+0x29c0>
   15198:	mov	r0, #0
   1519c:	b	12888 <dcgettext@plt>
   151a0:	mov	r2, #5
   151a4:	ldr	r1, [pc, #904]	; 15534 <g_strcmp0@plt+0x29c4>
   151a8:	mov	r0, #0
   151ac:	b	12888 <dcgettext@plt>
   151b0:	mov	r2, #5
   151b4:	ldr	r1, [pc, #892]	; 15538 <g_strcmp0@plt+0x29c8>
   151b8:	mov	r0, #0
   151bc:	b	12888 <dcgettext@plt>
   151c0:	mov	r2, #5
   151c4:	ldr	r1, [pc, #880]	; 1553c <g_strcmp0@plt+0x29cc>
   151c8:	mov	r0, #0
   151cc:	b	12888 <dcgettext@plt>
   151d0:	mov	r2, #5
   151d4:	ldr	r1, [pc, #868]	; 15540 <g_strcmp0@plt+0x29d0>
   151d8:	mov	r0, #0
   151dc:	b	12888 <dcgettext@plt>
   151e0:	mov	r2, #5
   151e4:	ldr	r1, [pc, #856]	; 15544 <g_strcmp0@plt+0x29d4>
   151e8:	mov	r0, #0
   151ec:	b	12888 <dcgettext@plt>
   151f0:	mov	r2, #5
   151f4:	ldr	r1, [pc, #844]	; 15548 <g_strcmp0@plt+0x29d8>
   151f8:	mov	r0, #0
   151fc:	b	12888 <dcgettext@plt>
   15200:	mov	r2, #5
   15204:	ldr	r1, [pc, #832]	; 1554c <g_strcmp0@plt+0x29dc>
   15208:	mov	r0, #0
   1520c:	b	12888 <dcgettext@plt>
   15210:	mov	r2, #5
   15214:	ldr	r1, [pc, #820]	; 15550 <g_strcmp0@plt+0x29e0>
   15218:	mov	r0, #0
   1521c:	b	12888 <dcgettext@plt>
   15220:	mov	r2, #5
   15224:	ldr	r1, [pc, #808]	; 15554 <g_strcmp0@plt+0x29e4>
   15228:	mov	r0, #0
   1522c:	b	12888 <dcgettext@plt>
   15230:	mov	r2, #5
   15234:	ldr	r1, [pc, #796]	; 15558 <g_strcmp0@plt+0x29e8>
   15238:	mov	r0, #0
   1523c:	b	12888 <dcgettext@plt>
   15240:	mov	r2, #5
   15244:	ldr	r1, [pc, #784]	; 1555c <g_strcmp0@plt+0x29ec>
   15248:	mov	r0, #0
   1524c:	b	12888 <dcgettext@plt>
   15250:	mov	r2, #5
   15254:	ldr	r1, [pc, #772]	; 15560 <g_strcmp0@plt+0x29f0>
   15258:	mov	r0, #0
   1525c:	b	12888 <dcgettext@plt>
   15260:	mov	r2, #5
   15264:	ldr	r1, [pc, #760]	; 15564 <g_strcmp0@plt+0x29f4>
   15268:	mov	r0, #0
   1526c:	b	12888 <dcgettext@plt>
   15270:	mov	r2, #5
   15274:	ldr	r1, [pc, #748]	; 15568 <g_strcmp0@plt+0x29f8>
   15278:	mov	r0, #0
   1527c:	b	12888 <dcgettext@plt>
   15280:	mov	r2, #5
   15284:	ldr	r1, [pc, #736]	; 1556c <g_strcmp0@plt+0x29fc>
   15288:	mov	r0, #0
   1528c:	b	12888 <dcgettext@plt>
   15290:	mov	r2, #5
   15294:	ldr	r1, [pc, #724]	; 15570 <g_strcmp0@plt+0x2a00>
   15298:	mov	r0, #0
   1529c:	b	12888 <dcgettext@plt>
   152a0:	mov	r2, #5
   152a4:	ldr	r1, [pc, #712]	; 15574 <g_strcmp0@plt+0x2a04>
   152a8:	mov	r0, #0
   152ac:	b	12888 <dcgettext@plt>
   152b0:	mov	r2, #5
   152b4:	ldr	r1, [pc, #700]	; 15578 <g_strcmp0@plt+0x2a08>
   152b8:	mov	r0, #0
   152bc:	b	12888 <dcgettext@plt>
   152c0:	mov	r2, #5
   152c4:	ldr	r1, [pc, #688]	; 1557c <g_strcmp0@plt+0x2a0c>
   152c8:	mov	r0, #0
   152cc:	b	12888 <dcgettext@plt>
   152d0:	mov	r2, #5
   152d4:	ldr	r1, [pc, #676]	; 15580 <g_strcmp0@plt+0x2a10>
   152d8:	mov	r0, #0
   152dc:	b	12888 <dcgettext@plt>
   152e0:	mov	r2, #5
   152e4:	ldr	r1, [pc, #664]	; 15584 <g_strcmp0@plt+0x2a14>
   152e8:	mov	r0, #0
   152ec:	b	12888 <dcgettext@plt>
   152f0:	mov	r2, #5
   152f4:	ldr	r1, [pc, #652]	; 15588 <g_strcmp0@plt+0x2a18>
   152f8:	mov	r0, #0
   152fc:	b	12888 <dcgettext@plt>
   15300:	mov	r2, #5
   15304:	ldr	r1, [pc, #640]	; 1558c <g_strcmp0@plt+0x2a1c>
   15308:	mov	r0, #0
   1530c:	b	12888 <dcgettext@plt>
   15310:	mov	r2, #5
   15314:	ldr	r1, [pc, #628]	; 15590 <g_strcmp0@plt+0x2a20>
   15318:	mov	r0, #0
   1531c:	b	12888 <dcgettext@plt>
   15320:	mov	r2, #5
   15324:	ldr	r1, [pc, #616]	; 15594 <g_strcmp0@plt+0x2a24>
   15328:	mov	r0, #0
   1532c:	b	12888 <dcgettext@plt>
   15330:	mov	r2, #5
   15334:	ldr	r1, [pc, #604]	; 15598 <g_strcmp0@plt+0x2a28>
   15338:	mov	r0, #0
   1533c:	b	12888 <dcgettext@plt>
   15340:	mov	r2, #5
   15344:	ldr	r1, [pc, #592]	; 1559c <g_strcmp0@plt+0x2a2c>
   15348:	mov	r0, #0
   1534c:	b	12888 <dcgettext@plt>
   15350:	mov	r2, #5
   15354:	ldr	r1, [pc, #580]	; 155a0 <g_strcmp0@plt+0x2a30>
   15358:	mov	r0, #0
   1535c:	b	12888 <dcgettext@plt>
   15360:	mov	r2, #5
   15364:	ldr	r1, [pc, #568]	; 155a4 <g_strcmp0@plt+0x2a34>
   15368:	mov	r0, #0
   1536c:	b	12888 <dcgettext@plt>
   15370:	mov	r2, #5
   15374:	ldr	r1, [pc, #556]	; 155a8 <g_strcmp0@plt+0x2a38>
   15378:	mov	r0, #0
   1537c:	b	12888 <dcgettext@plt>
   15380:	mov	r2, #5
   15384:	ldr	r1, [pc, #544]	; 155ac <g_strcmp0@plt+0x2a3c>
   15388:	mov	r0, #0
   1538c:	b	12888 <dcgettext@plt>
   15390:	mov	r2, #5
   15394:	ldr	r1, [pc, #532]	; 155b0 <g_strcmp0@plt+0x2a40>
   15398:	mov	r0, #0
   1539c:	b	12888 <dcgettext@plt>
   153a0:	mov	r2, #5
   153a4:	ldr	r1, [pc, #520]	; 155b4 <g_strcmp0@plt+0x2a44>
   153a8:	mov	r0, #0
   153ac:	b	12888 <dcgettext@plt>
   153b0:	mov	r2, #5
   153b4:	ldr	r1, [pc, #508]	; 155b8 <g_strcmp0@plt+0x2a48>
   153b8:	mov	r0, #0
   153bc:	b	12888 <dcgettext@plt>
   153c0:	mov	r2, #5
   153c4:	ldr	r1, [pc, #496]	; 155bc <g_strcmp0@plt+0x2a4c>
   153c8:	mov	r0, #0
   153cc:	b	12888 <dcgettext@plt>
   153d0:	mov	r2, #5
   153d4:	ldr	r1, [pc, #484]	; 155c0 <g_strcmp0@plt+0x2a50>
   153d8:	mov	r0, #0
   153dc:	b	12888 <dcgettext@plt>
   153e0:	mov	r2, #5
   153e4:	ldr	r1, [pc, #472]	; 155c4 <g_strcmp0@plt+0x2a54>
   153e8:	mov	r0, #0
   153ec:	b	12888 <dcgettext@plt>
   153f0:	mov	r2, #5
   153f4:	ldr	r1, [pc, #460]	; 155c8 <g_strcmp0@plt+0x2a58>
   153f8:	mov	r0, #0
   153fc:	b	12888 <dcgettext@plt>
   15400:	mov	r2, #5
   15404:	ldr	r1, [pc, #448]	; 155cc <g_strcmp0@plt+0x2a5c>
   15408:	mov	r0, #0
   1540c:	b	12888 <dcgettext@plt>
   15410:	mov	r2, #5
   15414:	ldr	r1, [pc, #436]	; 155d0 <g_strcmp0@plt+0x2a60>
   15418:	mov	r0, #0
   1541c:	b	12888 <dcgettext@plt>
   15420:	mov	r2, #5
   15424:	ldr	r1, [pc, #424]	; 155d4 <g_strcmp0@plt+0x2a64>
   15428:	mov	r0, #0
   1542c:	b	12888 <dcgettext@plt>
   15430:	mov	r2, #5
   15434:	ldr	r1, [pc, #412]	; 155d8 <g_strcmp0@plt+0x2a68>
   15438:	mov	r0, #0
   1543c:	b	12888 <dcgettext@plt>
   15440:	mov	r2, #5
   15444:	ldr	r1, [pc, #400]	; 155dc <g_strcmp0@plt+0x2a6c>
   15448:	mov	r0, #0
   1544c:	b	12888 <dcgettext@plt>
   15450:	mov	r2, #5
   15454:	ldr	r1, [pc, #388]	; 155e0 <g_strcmp0@plt+0x2a70>
   15458:	mov	r0, #0
   1545c:	b	12888 <dcgettext@plt>
   15460:	mov	r2, #5
   15464:	ldr	r1, [pc, #376]	; 155e4 <g_strcmp0@plt+0x2a74>
   15468:	mov	r0, #0
   1546c:	b	12888 <dcgettext@plt>
   15470:	mov	r2, #5
   15474:	ldr	r1, [pc, #364]	; 155e8 <g_strcmp0@plt+0x2a78>
   15478:	mov	r0, #0
   1547c:	b	12888 <dcgettext@plt>
   15480:	mov	r2, #5
   15484:	ldr	r1, [pc, #352]	; 155ec <g_strcmp0@plt+0x2a7c>
   15488:	mov	r0, #0
   1548c:	b	12888 <dcgettext@plt>
   15490:	mov	r2, #5
   15494:	ldr	r1, [pc, #340]	; 155f0 <g_strcmp0@plt+0x2a80>
   15498:	mov	r0, #0
   1549c:	b	12888 <dcgettext@plt>
   154a0:	mov	r2, #5
   154a4:	ldr	r1, [pc, #328]	; 155f4 <g_strcmp0@plt+0x2a84>
   154a8:	mov	r0, #0
   154ac:	b	12888 <dcgettext@plt>
   154b0:	mov	r2, #5
   154b4:	ldr	r1, [pc, #316]	; 155f8 <g_strcmp0@plt+0x2a88>
   154b8:	mov	r0, #0
   154bc:	b	12888 <dcgettext@plt>
   154c0:	mov	r2, #5
   154c4:	ldr	r1, [pc, #304]	; 155fc <g_strcmp0@plt+0x2a8c>
   154c8:	mov	r0, #0
   154cc:	b	12888 <dcgettext@plt>
   154d0:	mov	r2, #5
   154d4:	ldr	r1, [pc, #292]	; 15600 <g_strcmp0@plt+0x2a90>
   154d8:	mov	r0, #0
   154dc:	b	12888 <dcgettext@plt>
   154e0:	mov	r2, #5
   154e4:	ldr	r1, [pc, #280]	; 15604 <g_strcmp0@plt+0x2a94>
   154e8:	mov	r0, #0
   154ec:	b	12888 <dcgettext@plt>
   154f0:	mov	r0, #0
   154f4:	bx	lr
   154f8:	andeq	sl, r1, ip, asr #15
   154fc:	andeq	sl, r1, r0, asr #14
   15500:	andeq	sl, r1, ip, ror r7
   15504:	andeq	sl, r1, r8, lsl #14
   15508:	andeq	sl, r1, r8, asr #13
   1550c:	andeq	sl, r1, ip, lsl #13
   15510:	andeq	sl, r1, ip, asr #12
   15514:	andeq	sl, r1, ip, asr #11
   15518:	andeq	sl, r1, r8, asr r5
   1551c:	andeq	sl, r1, r8, ror #9
   15520:	andeq	sl, r1, r8, ror r4
   15524:	andeq	sl, r1, r4, lsl #8
   15528:	andeq	sl, r1, r4, lsl #7
   1552c:	andeq	sl, r1, r0, asr r3
   15530:	andeq	sl, r1, r8, lsl #6
   15534:	ldrdeq	sl, [r1], -r4
   15538:	muleq	r1, ip, r2
   1553c:	andeq	sl, r1, r0, ror #4
   15540:	andeq	sl, r1, r4, ror #3
   15544:	andeq	sl, r1, r0, lsl #3
   15548:	andeq	sl, r1, r4, asr #2
   1554c:	ldrdeq	sl, [r1], -r8
   15550:	andeq	sl, r1, r8, lsl #1
   15554:	strdeq	r9, [r1], -ip
   15558:	andeq	r9, r1, r8, ror pc
   1555c:	andeq	r9, r1, ip, lsl #30
   15560:			; <UNDEFINED> instruction: 0x00019ebc
   15564:	andeq	r9, r1, ip, ror #28
   15568:	andeq	r9, r1, r8, lsl lr
   1556c:	andeq	r9, r1, r4, lsr #27
   15570:	andeq	r9, r1, r8, asr #20
   15574:	andeq	r9, r1, r8, asr #19
   15578:	andeq	r9, r1, r4, ror #18
   1557c:	andeq	r9, r1, r4, lsl #18
   15580:	andeq	r9, r1, r8, ror #26
   15584:	muleq	r1, r4, r8
   15588:	strdeq	r9, [r1], -r4
   1558c:			; <UNDEFINED> instruction: 0x00019cbc
   15590:	andeq	r9, r1, r4, ror #24
   15594:	andeq	r9, r1, r0, lsr ip
   15598:	andeq	r9, r1, r0, lsl #24
   1559c:	andeq	r9, r1, r8, lsl #23
   155a0:	andeq	r9, r1, r8, ror #16
   155a4:	andeq	r9, r1, r4, lsl #16
   155a8:	andeq	r9, r1, r8, lsr fp
   155ac:	andeq	r9, r1, r8, asr #21
   155b0:	muleq	r1, ip, r7
   155b4:	andeq	r9, r1, r4, lsr #14
   155b8:	andeq	r9, r1, r0, asr #13
   155bc:	strheq	r9, [r1], -r0
   155c0:	andeq	r9, r1, r8, asr r7
   155c4:	andeq	r9, r1, r8, asr r6
   155c8:	andeq	r9, r1, ip, ror r1
   155cc:	andeq	r9, r1, r4, lsr #11
   155d0:	andeq	r9, r1, ip, lsr #10
   155d4:			; <UNDEFINED> instruction: 0x000194b4
   155d8:	andeq	r9, r1, r8, ror #8
   155dc:	andeq	r9, r1, r0, lsr #8
   155e0:	ldrdeq	r9, [r1], -ip
   155e4:	andeq	r9, r1, r0, lsl #7
   155e8:	andeq	r9, r1, r0, lsr r3
   155ec:	ldrdeq	r9, [r1], -r0
   155f0:	andeq	r9, r1, r4, asr #5
   155f4:	andeq	r9, r1, ip, lsr r2
   155f8:			; <UNDEFINED> instruction: 0x000191b8
   155fc:	andeq	r9, r1, r0, asr r0
   15600:	andeq	r9, r1, r0, lsl r1
   15604:	andeq	r9, r1, r0, lsr r0
   15608:	sub	r3, r0, #1
   1560c:	cmp	r3, #5
   15610:	ldrls	pc, [pc, r3, lsl #2]
   15614:	b	15690 <g_strcmp0@plt+0x2b20>
   15618:	andeq	r5, r1, r0, asr #12
   1561c:	andeq	r5, r1, r0, asr r6
   15620:	andeq	r5, r1, r0, ror #12
   15624:	andeq	r5, r1, r0, ror r6
   15628:	andeq	r5, r1, r0, lsl #13
   1562c:	andeq	r5, r1, r0, lsr r6
   15630:	mov	r2, #5
   15634:	ldr	r1, [pc, #116]	; 156b0 <g_strcmp0@plt+0x2b40>
   15638:	mov	r0, #0
   1563c:	b	12888 <dcgettext@plt>
   15640:	mov	r2, #5
   15644:	ldr	r1, [pc, #104]	; 156b4 <g_strcmp0@plt+0x2b44>
   15648:	mov	r0, #0
   1564c:	b	12888 <dcgettext@plt>
   15650:	mov	r2, #5
   15654:	ldr	r1, [pc, #92]	; 156b8 <g_strcmp0@plt+0x2b48>
   15658:	mov	r0, #0
   1565c:	b	12888 <dcgettext@plt>
   15660:	mov	r2, #5
   15664:	ldr	r1, [pc, #80]	; 156bc <g_strcmp0@plt+0x2b4c>
   15668:	mov	r0, #0
   1566c:	b	12888 <dcgettext@plt>
   15670:	mov	r2, #5
   15674:	ldr	r1, [pc, #68]	; 156c0 <g_strcmp0@plt+0x2b50>
   15678:	mov	r0, #0
   1567c:	b	12888 <dcgettext@plt>
   15680:	mov	r2, #5
   15684:	ldr	r1, [pc, #56]	; 156c4 <g_strcmp0@plt+0x2b54>
   15688:	mov	r0, #0
   1568c:	b	12888 <dcgettext@plt>
   15690:	mov	r3, r0
   15694:	push	{r4, lr}
   15698:	mov	r1, #16
   1569c:	ldr	r2, [pc, #36]	; 156c8 <g_strcmp0@plt+0x2b58>
   156a0:	ldr	r0, [pc, #36]	; 156cc <g_strcmp0@plt+0x2b5c>
   156a4:	bl	12618 <g_log@plt>
   156a8:	mov	r0, #0
   156ac:	pop	{r4, pc}
   156b0:	ldrdeq	sl, [r1], -r4
   156b4:	strdeq	sl, [r1], -r0
   156b8:	andeq	sl, r1, ip, lsl #16
   156bc:	andeq	sl, r1, r0, asr #16
   156c0:	andeq	sl, r1, r0, ror r8
   156c4:	andeq	sl, r1, ip, lsl #17
   156c8:	andeq	sl, r1, ip, lsl #18
   156cc:	andeq	r7, r1, r4, lsr #22
   156d0:	sub	r3, r0, #1
   156d4:	cmp	r3, #5
   156d8:	ldrls	pc, [pc, r3, lsl #2]
   156dc:	b	15758 <g_strcmp0@plt+0x2be8>
   156e0:	andeq	r5, r1, r8, lsl #14
   156e4:	andeq	r5, r1, r8, lsl r7
   156e8:	andeq	r5, r1, r8, lsr #14
   156ec:	andeq	r5, r1, r8, lsr r7
   156f0:	andeq	r5, r1, r8, asr #14
   156f4:	strdeq	r5, [r1], -r8
   156f8:	mov	r2, #5
   156fc:	ldr	r1, [pc, #116]	; 15778 <g_strcmp0@plt+0x2c08>
   15700:	mov	r0, #0
   15704:	b	12888 <dcgettext@plt>
   15708:	mov	r2, #5
   1570c:	ldr	r1, [pc, #104]	; 1577c <g_strcmp0@plt+0x2c0c>
   15710:	mov	r0, #0
   15714:	b	12888 <dcgettext@plt>
   15718:	mov	r2, #5
   1571c:	ldr	r1, [pc, #92]	; 15780 <g_strcmp0@plt+0x2c10>
   15720:	mov	r0, #0
   15724:	b	12888 <dcgettext@plt>
   15728:	mov	r2, #5
   1572c:	ldr	r1, [pc, #80]	; 15784 <g_strcmp0@plt+0x2c14>
   15730:	mov	r0, #0
   15734:	b	12888 <dcgettext@plt>
   15738:	mov	r2, #5
   1573c:	ldr	r1, [pc, #68]	; 15788 <g_strcmp0@plt+0x2c18>
   15740:	mov	r0, #0
   15744:	b	12888 <dcgettext@plt>
   15748:	mov	r2, #5
   1574c:	ldr	r1, [pc, #56]	; 1578c <g_strcmp0@plt+0x2c1c>
   15750:	mov	r0, #0
   15754:	b	12888 <dcgettext@plt>
   15758:	mov	r3, r0
   1575c:	push	{r4, lr}
   15760:	mov	r1, #16
   15764:	ldr	r2, [pc, #36]	; 15790 <g_strcmp0@plt+0x2c20>
   15768:	ldr	r0, [pc, #36]	; 15794 <g_strcmp0@plt+0x2c24>
   1576c:	bl	12618 <g_log@plt>
   15770:	mov	r0, #0
   15774:	pop	{r4, pc}
   15778:	andeq	sl, r1, r0, ror #19
   1577c:	andeq	sl, r1, r8, lsr #18
   15780:	andeq	sl, r1, r0, lsl #19
   15784:	andeq	sl, r1, r8, asr r9
   15788:	andeq	sl, r1, r0, asr #18
   1578c:	andeq	sl, r1, r8, lsr #19
   15790:	andeq	sl, r1, ip, lsl #18
   15794:	andeq	r7, r1, r4, lsr #22
   15798:	cmp	r0, #2
   1579c:	beq	157d0 <g_strcmp0@plt+0x2c60>
   157a0:	cmp	r0, #3
   157a4:	beq	157f0 <g_strcmp0@plt+0x2c80>
   157a8:	cmp	r0, #1
   157ac:	beq	157e0 <g_strcmp0@plt+0x2c70>
   157b0:	mov	r3, r0
   157b4:	push	{r4, lr}
   157b8:	mov	r1, #16
   157bc:	ldr	r2, [pc, #60]	; 15800 <g_strcmp0@plt+0x2c90>
   157c0:	ldr	r0, [pc, #60]	; 15804 <g_strcmp0@plt+0x2c94>
   157c4:	bl	12618 <g_log@plt>
   157c8:	mov	r0, #0
   157cc:	pop	{r4, pc}
   157d0:	mov	r2, #5
   157d4:	ldr	r1, [pc, #44]	; 15808 <g_strcmp0@plt+0x2c98>
   157d8:	mov	r0, #0
   157dc:	b	12888 <dcgettext@plt>
   157e0:	mov	r2, #5
   157e4:	ldr	r1, [pc, #32]	; 1580c <g_strcmp0@plt+0x2c9c>
   157e8:	mov	r0, #0
   157ec:	b	12888 <dcgettext@plt>
   157f0:	mov	r2, #5
   157f4:	ldr	r1, [pc, #20]	; 15810 <g_strcmp0@plt+0x2ca0>
   157f8:	mov	r0, #0
   157fc:	b	12888 <dcgettext@plt>
   15800:	andeq	sl, r1, r4, lsr #20
   15804:	andeq	r7, r1, r4, lsr #22
   15808:	andeq	sl, r1, r0, lsl sl
   1580c:	andeq	sl, r1, r8, lsl #20
   15810:	andeq	sl, r1, ip, lsl sl
   15814:	cmp	r0, #35	; 0x23
   15818:	ldrls	pc, [pc, r0, lsl #2]
   1581c:	b	15af0 <g_strcmp0@plt+0x2f80>
   15820:	andeq	r5, r1, r0, ror #21
   15824:	ldrdeq	r5, [r1], -r0
   15828:	andeq	r5, r1, r0, asr #21
   1582c:			; <UNDEFINED> instruction: 0x00015ab0
   15830:	andeq	r5, r1, r0, lsr #21
   15834:	muleq	r1, r0, sl
   15838:	andeq	r5, r1, r0, lsl #21
   1583c:	andeq	r5, r1, r0, ror sl
   15840:	andeq	r5, r1, r0, ror #20
   15844:	andeq	r5, r1, r0, asr sl
   15848:	andeq	r5, r1, r0, asr #20
   1584c:	andeq	r5, r1, r0, lsr sl
   15850:	andeq	r5, r1, r0, lsr #20
   15854:	andeq	r5, r1, r0, lsl sl
   15858:	andeq	r5, r1, r0, lsl #20
   1585c:	strdeq	r5, [r1], -r0
   15860:	andeq	r5, r1, r0, ror #19
   15864:	ldrdeq	r5, [r1], -r0
   15868:	andeq	r5, r1, r0, asr #19
   1586c:			; <UNDEFINED> instruction: 0x000159b0
   15870:	andeq	r5, r1, r0, lsr #19
   15874:	muleq	r1, r0, r9
   15878:	andeq	r5, r1, r0, lsl #19
   1587c:	andeq	r5, r1, r0, ror r9
   15880:	andeq	r5, r1, r0, ror #18
   15884:	andeq	r5, r1, r0, asr r9
   15888:	andeq	r5, r1, r0, asr #18
   1588c:	andeq	r5, r1, r0, lsr r9
   15890:	andeq	r5, r1, r0, lsr #18
   15894:	andeq	r5, r1, r0, lsl r9
   15898:	andeq	r5, r1, r0, lsl #18
   1589c:	strdeq	r5, [r1], -r0
   158a0:	andeq	r5, r1, r0, ror #17
   158a4:	ldrdeq	r5, [r1], -r0
   158a8:	andeq	r5, r1, r0, asr #17
   158ac:			; <UNDEFINED> instruction: 0x000158b0
   158b0:	mov	r2, #5
   158b4:	ldr	r1, [pc, #600]	; 15b14 <g_strcmp0@plt+0x2fa4>
   158b8:	mov	r0, #0
   158bc:	b	12888 <dcgettext@plt>
   158c0:	mov	r2, #5
   158c4:	ldr	r1, [pc, #588]	; 15b18 <g_strcmp0@plt+0x2fa8>
   158c8:	mov	r0, #0
   158cc:	b	12888 <dcgettext@plt>
   158d0:	mov	r2, #5
   158d4:	ldr	r1, [pc, #576]	; 15b1c <g_strcmp0@plt+0x2fac>
   158d8:	mov	r0, #0
   158dc:	b	12888 <dcgettext@plt>
   158e0:	mov	r2, #5
   158e4:	ldr	r1, [pc, #564]	; 15b20 <g_strcmp0@plt+0x2fb0>
   158e8:	mov	r0, #0
   158ec:	b	12888 <dcgettext@plt>
   158f0:	mov	r2, #5
   158f4:	ldr	r1, [pc, #552]	; 15b24 <g_strcmp0@plt+0x2fb4>
   158f8:	mov	r0, #0
   158fc:	b	12888 <dcgettext@plt>
   15900:	mov	r2, #5
   15904:	ldr	r1, [pc, #540]	; 15b28 <g_strcmp0@plt+0x2fb8>
   15908:	mov	r0, #0
   1590c:	b	12888 <dcgettext@plt>
   15910:	mov	r2, #5
   15914:	ldr	r1, [pc, #528]	; 15b2c <g_strcmp0@plt+0x2fbc>
   15918:	mov	r0, #0
   1591c:	b	12888 <dcgettext@plt>
   15920:	mov	r2, #5
   15924:	ldr	r1, [pc, #516]	; 15b30 <g_strcmp0@plt+0x2fc0>
   15928:	mov	r0, #0
   1592c:	b	12888 <dcgettext@plt>
   15930:	mov	r2, #5
   15934:	ldr	r1, [pc, #504]	; 15b34 <g_strcmp0@plt+0x2fc4>
   15938:	mov	r0, #0
   1593c:	b	12888 <dcgettext@plt>
   15940:	mov	r2, #5
   15944:	ldr	r1, [pc, #492]	; 15b38 <g_strcmp0@plt+0x2fc8>
   15948:	mov	r0, #0
   1594c:	b	12888 <dcgettext@plt>
   15950:	mov	r2, #5
   15954:	ldr	r1, [pc, #480]	; 15b3c <g_strcmp0@plt+0x2fcc>
   15958:	mov	r0, #0
   1595c:	b	12888 <dcgettext@plt>
   15960:	mov	r2, #5
   15964:	ldr	r1, [pc, #468]	; 15b40 <g_strcmp0@plt+0x2fd0>
   15968:	mov	r0, #0
   1596c:	b	12888 <dcgettext@plt>
   15970:	mov	r2, #5
   15974:	ldr	r1, [pc, #456]	; 15b44 <g_strcmp0@plt+0x2fd4>
   15978:	mov	r0, #0
   1597c:	b	12888 <dcgettext@plt>
   15980:	mov	r2, #5
   15984:	ldr	r1, [pc, #444]	; 15b48 <g_strcmp0@plt+0x2fd8>
   15988:	mov	r0, #0
   1598c:	b	12888 <dcgettext@plt>
   15990:	mov	r2, #5
   15994:	ldr	r1, [pc, #432]	; 15b4c <g_strcmp0@plt+0x2fdc>
   15998:	mov	r0, #0
   1599c:	b	12888 <dcgettext@plt>
   159a0:	mov	r2, #5
   159a4:	ldr	r1, [pc, #420]	; 15b50 <g_strcmp0@plt+0x2fe0>
   159a8:	mov	r0, #0
   159ac:	b	12888 <dcgettext@plt>
   159b0:	mov	r2, #5
   159b4:	ldr	r1, [pc, #408]	; 15b54 <g_strcmp0@plt+0x2fe4>
   159b8:	mov	r0, #0
   159bc:	b	12888 <dcgettext@plt>
   159c0:	mov	r2, #5
   159c4:	ldr	r1, [pc, #396]	; 15b58 <g_strcmp0@plt+0x2fe8>
   159c8:	mov	r0, #0
   159cc:	b	12888 <dcgettext@plt>
   159d0:	mov	r2, #5
   159d4:	ldr	r1, [pc, #384]	; 15b5c <g_strcmp0@plt+0x2fec>
   159d8:	mov	r0, #0
   159dc:	b	12888 <dcgettext@plt>
   159e0:	mov	r2, #5
   159e4:	ldr	r1, [pc, #372]	; 15b60 <g_strcmp0@plt+0x2ff0>
   159e8:	mov	r0, #0
   159ec:	b	12888 <dcgettext@plt>
   159f0:	mov	r2, #5
   159f4:	ldr	r1, [pc, #360]	; 15b64 <g_strcmp0@plt+0x2ff4>
   159f8:	mov	r0, #0
   159fc:	b	12888 <dcgettext@plt>
   15a00:	mov	r2, #5
   15a04:	ldr	r1, [pc, #348]	; 15b68 <g_strcmp0@plt+0x2ff8>
   15a08:	mov	r0, #0
   15a0c:	b	12888 <dcgettext@plt>
   15a10:	mov	r2, #5
   15a14:	ldr	r1, [pc, #336]	; 15b6c <g_strcmp0@plt+0x2ffc>
   15a18:	mov	r0, #0
   15a1c:	b	12888 <dcgettext@plt>
   15a20:	mov	r2, #5
   15a24:	ldr	r1, [pc, #324]	; 15b70 <g_strcmp0@plt+0x3000>
   15a28:	mov	r0, #0
   15a2c:	b	12888 <dcgettext@plt>
   15a30:	mov	r2, #5
   15a34:	ldr	r1, [pc, #312]	; 15b74 <g_strcmp0@plt+0x3004>
   15a38:	mov	r0, #0
   15a3c:	b	12888 <dcgettext@plt>
   15a40:	mov	r2, #5
   15a44:	ldr	r1, [pc, #300]	; 15b78 <g_strcmp0@plt+0x3008>
   15a48:	mov	r0, #0
   15a4c:	b	12888 <dcgettext@plt>
   15a50:	mov	r2, #5
   15a54:	ldr	r1, [pc, #288]	; 15b7c <g_strcmp0@plt+0x300c>
   15a58:	mov	r0, #0
   15a5c:	b	12888 <dcgettext@plt>
   15a60:	mov	r2, #5
   15a64:	ldr	r1, [pc, #276]	; 15b80 <g_strcmp0@plt+0x3010>
   15a68:	mov	r0, #0
   15a6c:	b	12888 <dcgettext@plt>
   15a70:	mov	r2, #5
   15a74:	ldr	r1, [pc, #264]	; 15b84 <g_strcmp0@plt+0x3014>
   15a78:	mov	r0, #0
   15a7c:	b	12888 <dcgettext@plt>
   15a80:	mov	r2, #5
   15a84:	ldr	r1, [pc, #252]	; 15b88 <g_strcmp0@plt+0x3018>
   15a88:	mov	r0, #0
   15a8c:	b	12888 <dcgettext@plt>
   15a90:	mov	r2, #5
   15a94:	ldr	r1, [pc, #240]	; 15b8c <g_strcmp0@plt+0x301c>
   15a98:	mov	r0, #0
   15a9c:	b	12888 <dcgettext@plt>
   15aa0:	mov	r2, #5
   15aa4:	ldr	r1, [pc, #228]	; 15b90 <g_strcmp0@plt+0x3020>
   15aa8:	mov	r0, #0
   15aac:	b	12888 <dcgettext@plt>
   15ab0:	mov	r2, #5
   15ab4:	ldr	r1, [pc, #216]	; 15b94 <g_strcmp0@plt+0x3024>
   15ab8:	mov	r0, #0
   15abc:	b	12888 <dcgettext@plt>
   15ac0:	mov	r2, #5
   15ac4:	ldr	r1, [pc, #204]	; 15b98 <g_strcmp0@plt+0x3028>
   15ac8:	mov	r0, #0
   15acc:	b	12888 <dcgettext@plt>
   15ad0:	mov	r2, #5
   15ad4:	ldr	r1, [pc, #192]	; 15b9c <g_strcmp0@plt+0x302c>
   15ad8:	mov	r0, #0
   15adc:	b	12888 <dcgettext@plt>
   15ae0:	mov	r2, #5
   15ae4:	ldr	r1, [pc, #180]	; 15ba0 <g_strcmp0@plt+0x3030>
   15ae8:	mov	r0, #0
   15aec:	b	12888 <dcgettext@plt>
   15af0:	push	{r4, lr}
   15af4:	bl	12630 <pk_status_enum_to_string@plt>
   15af8:	ldr	r2, [pc, #164]	; 15ba4 <g_strcmp0@plt+0x3034>
   15afc:	mov	r1, #16
   15b00:	mov	r3, r0
   15b04:	ldr	r0, [pc, #156]	; 15ba8 <g_strcmp0@plt+0x3038>
   15b08:	bl	12618 <g_log@plt>
   15b0c:	mov	r0, #0
   15b10:	pop	{r4, pc}
   15b14:	andeq	sl, r1, r8, ror sp
   15b18:	andeq	sl, r1, r0, asr sp
   15b1c:	andeq	sl, r1, r4, lsr #26
   15b20:	strdeq	sl, [r1], -r8
   15b24:	ldrdeq	sl, [r1], -ip
   15b28:			; <UNDEFINED> instruction: 0x0001acb8
   15b2c:	muleq	r1, ip, ip
   15b30:	andeq	sl, r1, ip, ror ip
   15b34:	andeq	sl, r1, ip, ror #24
   15b38:	andeq	sl, r1, r8, asr ip
   15b3c:	andeq	sl, r1, r8, lsr ip
   15b40:	andeq	sl, r1, r4, lsr #24
   15b44:	andeq	sl, r1, r4, lsl #24
   15b48:	andeq	sl, r1, ip, ror #23
   15b4c:	andeq	sl, r1, ip, asr #23
   15b50:	andeq	sl, r1, r8, lsr #23
   15b54:	muleq	r1, ip, fp
   15b58:	muleq	r1, r0, fp
   15b5c:	andeq	sl, r1, r0, lsl #23
   15b60:	andeq	sl, r1, ip, ror #22
   15b64:	andeq	sl, r1, ip, asr fp
   15b68:	andeq	sl, r1, r8, asr #22
   15b6c:	andeq	sl, r1, r0, lsr fp
   15b70:	andeq	sl, r1, ip, lsl fp
   15b74:	andeq	sl, r1, r4, lsl #22
   15b78:	strdeq	sl, [r1], -r0
   15b7c:	andeq	sl, r1, r0, asr #21
   15b80:	andeq	sl, r1, r8, lsr #21
   15b84:	ldrdeq	sl, [r1], -r4
   15b88:	muleq	r1, r4, sl
   15b8c:	andeq	sl, r1, r0, lsl #21
   15b90:	andeq	sl, r1, r4, ror sl
   15b94:	andeq	sl, r1, ip, ror #20
   15b98:	andeq	sl, r1, ip, asr #20
   15b9c:	andeq	sl, r1, r8, asr sl
   15ba0:	andeq	sl, r1, ip, lsr sl
   15ba4:	andeq	sl, r1, r8, lsl #27
   15ba8:	andeq	r7, r1, r4, lsr #22
   15bac:	sub	r3, r0, #3
   15bb0:	push	{r4, lr}
   15bb4:	mov	r4, r1
   15bb8:	sub	sp, sp, #8
   15bbc:	cmp	r3, #6
   15bc0:	ldrls	pc, [pc, r3, lsl #2]
   15bc4:	b	15ca0 <g_strcmp0@plt+0x3130>
   15bc8:	andeq	r5, r1, r0, lsl ip
   15bcc:	andeq	r5, r1, r8, lsr #24
   15bd0:	andeq	r5, r1, r0, asr #24
   15bd4:	andeq	r5, r1, r8, asr ip
   15bd8:	andeq	r5, r1, r0, ror ip
   15bdc:	andeq	r5, r1, r8, lsl #25
   15be0:	andeq	r5, r1, r4, ror #23
   15be4:	mov	r3, #5
   15be8:	str	r3, [sp]
   15bec:	ldr	r2, [pc, #208]	; 15cc4 <g_strcmp0@plt+0x3154>
   15bf0:	mov	r3, r1
   15bf4:	ldr	r1, [pc, #204]	; 15cc8 <g_strcmp0@plt+0x3158>
   15bf8:	mov	r0, #0
   15bfc:	bl	12714 <dcngettext@plt>
   15c00:	mov	r1, r4
   15c04:	add	sp, sp, #8
   15c08:	pop	{r4, lr}
   15c0c:	b	12708 <g_strdup_printf@plt>
   15c10:	mov	r3, #5
   15c14:	str	r3, [sp]
   15c18:	ldr	r2, [pc, #172]	; 15ccc <g_strcmp0@plt+0x315c>
   15c1c:	mov	r3, r1
   15c20:	ldr	r1, [pc, #168]	; 15cd0 <g_strcmp0@plt+0x3160>
   15c24:	b	15bf8 <g_strcmp0@plt+0x3088>
   15c28:	mov	r3, #5
   15c2c:	str	r3, [sp]
   15c30:	ldr	r2, [pc, #156]	; 15cd4 <g_strcmp0@plt+0x3164>
   15c34:	mov	r3, r1
   15c38:	ldr	r1, [pc, #152]	; 15cd8 <g_strcmp0@plt+0x3168>
   15c3c:	b	15bf8 <g_strcmp0@plt+0x3088>
   15c40:	mov	r3, #5
   15c44:	str	r3, [sp]
   15c48:	ldr	r2, [pc, #140]	; 15cdc <g_strcmp0@plt+0x316c>
   15c4c:	mov	r3, r1
   15c50:	ldr	r1, [pc, #136]	; 15ce0 <g_strcmp0@plt+0x3170>
   15c54:	b	15bf8 <g_strcmp0@plt+0x3088>
   15c58:	mov	r3, #5
   15c5c:	str	r3, [sp]
   15c60:	ldr	r2, [pc, #124]	; 15ce4 <g_strcmp0@plt+0x3174>
   15c64:	mov	r3, r1
   15c68:	ldr	r1, [pc, #120]	; 15ce8 <g_strcmp0@plt+0x3178>
   15c6c:	b	15bf8 <g_strcmp0@plt+0x3088>
   15c70:	mov	r3, #5
   15c74:	str	r3, [sp]
   15c78:	ldr	r2, [pc, #108]	; 15cec <g_strcmp0@plt+0x317c>
   15c7c:	mov	r3, r1
   15c80:	ldr	r1, [pc, #104]	; 15cf0 <g_strcmp0@plt+0x3180>
   15c84:	b	15bf8 <g_strcmp0@plt+0x3088>
   15c88:	mov	r3, #5
   15c8c:	str	r3, [sp]
   15c90:	ldr	r2, [pc, #92]	; 15cf4 <g_strcmp0@plt+0x3184>
   15c94:	mov	r3, r1
   15c98:	ldr	r1, [pc, #88]	; 15cf8 <g_strcmp0@plt+0x3188>
   15c9c:	b	15bf8 <g_strcmp0@plt+0x3088>
   15ca0:	bl	129cc <pk_info_enum_to_string@plt>
   15ca4:	ldr	r2, [pc, #80]	; 15cfc <g_strcmp0@plt+0x318c>
   15ca8:	mov	r1, #16
   15cac:	mov	r3, r0
   15cb0:	ldr	r0, [pc, #72]	; 15d00 <g_strcmp0@plt+0x3190>
   15cb4:	bl	12618 <g_log@plt>
   15cb8:	mov	r0, #0
   15cbc:	add	sp, sp, #8
   15cc0:	pop	{r4, pc}
   15cc4:	andeq	sl, r1, ip, lsl #29
   15cc8:	andeq	sl, r1, r0, lsr #29
   15ccc:	andeq	sl, r1, r0, lsr #27
   15cd0:			; <UNDEFINED> instruction: 0x0001adb4
   15cd4:	andeq	sl, r1, ip, asr lr
   15cd8:	andeq	sl, r1, r4, ror lr
   15cdc:	andeq	sl, r1, r8, asr #27
   15ce0:	ldrdeq	sl, [r1], -r4
   15ce4:	andeq	sl, r1, r4, lsr lr
   15ce8:	andeq	sl, r1, r8, asr #28
   15cec:	andeq	sl, r1, r0, ror #27
   15cf0:	strdeq	sl, [r1], -r8
   15cf4:	andeq	sl, r1, ip, lsl #28
   15cf8:	andeq	sl, r1, r0, lsr #28
   15cfc:			; <UNDEFINED> instruction: 0x0001aeb4
   15d00:	andeq	r7, r1, r4, lsr #22
   15d04:	sub	r3, r0, #1
   15d08:	cmp	r3, #23
   15d0c:	ldrls	pc, [pc, r3, lsl #2]
   15d10:	b	15e24 <g_strcmp0@plt+0x32b4>
   15d14:	andeq	r5, r1, r4, lsl #27
   15d18:	muleq	r1, r4, sp
   15d1c:	andeq	r5, r1, r4, lsr #27
   15d20:			; <UNDEFINED> instruction: 0x00015db4
   15d24:	andeq	r5, r1, r4, asr #27
   15d28:	ldrdeq	r5, [r1], -r4
   15d2c:	andeq	r5, r1, r4, ror #27
   15d30:	strdeq	r5, [r1], -r4
   15d34:	andeq	r5, r1, r4, lsl #28
   15d38:	andeq	r5, r1, r4, lsr #28
   15d3c:	andeq	r5, r1, r4, lsr #28
   15d40:	andeq	r5, r1, r4, lsr #28
   15d44:	andeq	r5, r1, r4, lsr #28
   15d48:	andeq	r5, r1, r4, lsr #28
   15d4c:	andeq	r5, r1, r4, lsr #28
   15d50:	andeq	r5, r1, r4, lsl #27
   15d54:	muleq	r1, r4, sp
   15d58:	andeq	r5, r1, r4, lsr #28
   15d5c:	andeq	r5, r1, r4, lsr #28
   15d60:	andeq	r5, r1, r4, lsr #28
   15d64:	andeq	r5, r1, r4, lsr #28
   15d68:	andeq	r5, r1, r4, lsr #28
   15d6c:	andeq	r5, r1, r4, lsl lr
   15d70:	andeq	r5, r1, r4, ror sp
   15d74:	mov	r2, #5
   15d78:	ldr	r1, [pc, #200]	; 15e48 <g_strcmp0@plt+0x32d8>
   15d7c:	mov	r0, #0
   15d80:	b	12888 <dcgettext@plt>
   15d84:	mov	r2, #5
   15d88:	ldr	r1, [pc, #188]	; 15e4c <g_strcmp0@plt+0x32dc>
   15d8c:	mov	r0, #0
   15d90:	b	12888 <dcgettext@plt>
   15d94:	mov	r2, #5
   15d98:	ldr	r1, [pc, #176]	; 15e50 <g_strcmp0@plt+0x32e0>
   15d9c:	mov	r0, #0
   15da0:	b	12888 <dcgettext@plt>
   15da4:	mov	r2, #5
   15da8:	ldr	r1, [pc, #164]	; 15e54 <g_strcmp0@plt+0x32e4>
   15dac:	mov	r0, #0
   15db0:	b	12888 <dcgettext@plt>
   15db4:	mov	r2, #5
   15db8:	ldr	r1, [pc, #152]	; 15e58 <g_strcmp0@plt+0x32e8>
   15dbc:	mov	r0, #0
   15dc0:	b	12888 <dcgettext@plt>
   15dc4:	mov	r2, #5
   15dc8:	ldr	r1, [pc, #140]	; 15e5c <g_strcmp0@plt+0x32ec>
   15dcc:	mov	r0, #0
   15dd0:	b	12888 <dcgettext@plt>
   15dd4:	mov	r2, #5
   15dd8:	ldr	r1, [pc, #128]	; 15e60 <g_strcmp0@plt+0x32f0>
   15ddc:	mov	r0, #0
   15de0:	b	12888 <dcgettext@plt>
   15de4:	mov	r2, #5
   15de8:	ldr	r1, [pc, #116]	; 15e64 <g_strcmp0@plt+0x32f4>
   15dec:	mov	r0, #0
   15df0:	b	12888 <dcgettext@plt>
   15df4:	mov	r2, #5
   15df8:	ldr	r1, [pc, #104]	; 15e68 <g_strcmp0@plt+0x32f8>
   15dfc:	mov	r0, #0
   15e00:	b	12888 <dcgettext@plt>
   15e04:	mov	r2, #5
   15e08:	ldr	r1, [pc, #92]	; 15e6c <g_strcmp0@plt+0x32fc>
   15e0c:	mov	r0, #0
   15e10:	b	12888 <dcgettext@plt>
   15e14:	mov	r2, #5
   15e18:	ldr	r1, [pc, #80]	; 15e70 <g_strcmp0@plt+0x3300>
   15e1c:	mov	r0, #0
   15e20:	b	12888 <dcgettext@plt>
   15e24:	push	{r4, lr}
   15e28:	bl	129cc <pk_info_enum_to_string@plt>
   15e2c:	ldr	r2, [pc, #64]	; 15e74 <g_strcmp0@plt+0x3304>
   15e30:	mov	r1, #16
   15e34:	mov	r3, r0
   15e38:	ldr	r0, [pc, #56]	; 15e78 <g_strcmp0@plt+0x3308>
   15e3c:	bl	12618 <g_log@plt>
   15e40:	mov	r0, #0
   15e44:	pop	{r4, pc}
   15e48:	andeq	sl, r1, r4, ror #30
   15e4c:	andeq	sl, r1, ip, asr #30
   15e50:	andeq	sl, r1, r8, asr pc
   15e54:	ldrdeq	sl, [r1], -r4
   15e58:	andeq	sl, r1, r8, lsr #30
   15e5c:	andeq	sl, r1, r4, ror #29
   15e60:	andeq	sl, r1, r8, lsl pc
   15e64:	strdeq	sl, [r1], -r4
   15e68:	andeq	sl, r1, r8, lsl #30
   15e6c:	andeq	sl, r1, ip, lsr pc
   15e70:	andeq	sl, r1, ip, ror #30
   15e74:	andeq	sl, r1, r8, ror pc
   15e78:	andeq	r7, r1, r4, lsr #22
   15e7c:	sub	r3, r0, #10
   15e80:	cmp	r3, #12
   15e84:	ldrls	pc, [pc, r3, lsl #2]
   15e88:	b	15f50 <g_strcmp0@plt+0x33e0>
   15e8c:	ldrdeq	r5, [r1], -r0
   15e90:	andeq	r5, r1, r0, ror #29
   15e94:	strdeq	r5, [r1], -r0
   15e98:	andeq	r5, r1, r0, lsl #30
   15e9c:	andeq	r5, r1, r0, lsl pc
   15ea0:	andeq	r5, r1, r0, lsr #30
   15ea4:	andeq	r5, r1, r0, asr pc
   15ea8:	andeq	r5, r1, r0, asr pc
   15eac:	andeq	r5, r1, r0, asr pc
   15eb0:	andeq	r5, r1, r0, lsr pc
   15eb4:	andeq	r5, r1, r0, asr pc
   15eb8:	andeq	r5, r1, r0, asr #30
   15ebc:	andeq	r5, r1, r0, asr #29
   15ec0:	mov	r2, #5
   15ec4:	ldr	r1, [pc, #168]	; 15f74 <g_strcmp0@plt+0x3404>
   15ec8:	mov	r0, #0
   15ecc:	b	12888 <dcgettext@plt>
   15ed0:	mov	r2, #5
   15ed4:	ldr	r1, [pc, #156]	; 15f78 <g_strcmp0@plt+0x3408>
   15ed8:	mov	r0, #0
   15edc:	b	12888 <dcgettext@plt>
   15ee0:	mov	r2, #5
   15ee4:	ldr	r1, [pc, #144]	; 15f7c <g_strcmp0@plt+0x340c>
   15ee8:	mov	r0, #0
   15eec:	b	12888 <dcgettext@plt>
   15ef0:	mov	r2, #5
   15ef4:	ldr	r1, [pc, #132]	; 15f80 <g_strcmp0@plt+0x3410>
   15ef8:	mov	r0, #0
   15efc:	b	12888 <dcgettext@plt>
   15f00:	mov	r2, #5
   15f04:	ldr	r1, [pc, #120]	; 15f84 <g_strcmp0@plt+0x3414>
   15f08:	mov	r0, #0
   15f0c:	b	12888 <dcgettext@plt>
   15f10:	mov	r2, #5
   15f14:	ldr	r1, [pc, #108]	; 15f88 <g_strcmp0@plt+0x3418>
   15f18:	mov	r0, #0
   15f1c:	b	12888 <dcgettext@plt>
   15f20:	mov	r2, #5
   15f24:	ldr	r1, [pc, #96]	; 15f8c <g_strcmp0@plt+0x341c>
   15f28:	mov	r0, #0
   15f2c:	b	12888 <dcgettext@plt>
   15f30:	mov	r2, #5
   15f34:	ldr	r1, [pc, #84]	; 15f90 <g_strcmp0@plt+0x3420>
   15f38:	mov	r0, #0
   15f3c:	b	12888 <dcgettext@plt>
   15f40:	mov	r2, #5
   15f44:	ldr	r1, [pc, #72]	; 15f94 <g_strcmp0@plt+0x3424>
   15f48:	mov	r0, #0
   15f4c:	b	12888 <dcgettext@plt>
   15f50:	push	{r4, lr}
   15f54:	bl	129cc <pk_info_enum_to_string@plt>
   15f58:	ldr	r2, [pc, #56]	; 15f98 <g_strcmp0@plt+0x3428>
   15f5c:	mov	r1, #16
   15f60:	mov	r3, r0
   15f64:	ldr	r0, [pc, #48]	; 15f9c <g_strcmp0@plt+0x342c>
   15f68:	bl	12618 <g_log@plt>
   15f6c:	mov	r0, #0
   15f70:	pop	{r4, pc}
   15f74:	strdeq	sl, [r1], -r4
   15f78:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15f7c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   15f80:	andeq	sl, r1, r8, lsr #31
   15f84:			; <UNDEFINED> instruction: 0x0001afb4
   15f88:	andeq	sl, r1, r0, asr #31
   15f8c:	andeq	sl, r1, ip, asr #31
   15f90:	ldrdeq	sl, [r1], -r8
   15f94:	andeq	sl, r1, r8, ror #31
   15f98:	andeq	sl, r1, r8, ror pc
   15f9c:	andeq	r7, r1, r4, lsr #22
   15fa0:	sub	r3, r0, #10
   15fa4:	cmp	r3, #12
   15fa8:	ldrls	pc, [pc, r3, lsl #2]
   15fac:	b	16074 <g_strcmp0@plt+0x3504>
   15fb0:	strdeq	r5, [r1], -r4
   15fb4:	andeq	r6, r1, r4
   15fb8:	andeq	r6, r1, r4, lsl r0
   15fbc:	andeq	r6, r1, r4, lsr #32
   15fc0:	andeq	r6, r1, r4, lsr r0
   15fc4:	andeq	r6, r1, r4, asr #32
   15fc8:	andeq	r6, r1, r4, ror r0
   15fcc:	andeq	r6, r1, r4, ror r0
   15fd0:	andeq	r6, r1, r4, ror r0
   15fd4:	andeq	r6, r1, r4, asr r0
   15fd8:	andeq	r6, r1, r4, ror r0
   15fdc:	andeq	r6, r1, r4, rrx
   15fe0:	andeq	r5, r1, r4, ror #31
   15fe4:	mov	r2, #5
   15fe8:	ldr	r1, [pc, #168]	; 16098 <g_strcmp0@plt+0x3528>
   15fec:	mov	r0, #0
   15ff0:	b	12888 <dcgettext@plt>
   15ff4:	mov	r2, #5
   15ff8:	ldr	r1, [pc, #156]	; 1609c <g_strcmp0@plt+0x352c>
   15ffc:	mov	r0, #0
   16000:	b	12888 <dcgettext@plt>
   16004:	mov	r2, #5
   16008:	ldr	r1, [pc, #144]	; 160a0 <g_strcmp0@plt+0x3530>
   1600c:	mov	r0, #0
   16010:	b	12888 <dcgettext@plt>
   16014:	mov	r2, #5
   16018:	ldr	r1, [pc, #132]	; 160a4 <g_strcmp0@plt+0x3534>
   1601c:	mov	r0, #0
   16020:	b	12888 <dcgettext@plt>
   16024:	mov	r2, #5
   16028:	ldr	r1, [pc, #120]	; 160a8 <g_strcmp0@plt+0x3538>
   1602c:	mov	r0, #0
   16030:	b	12888 <dcgettext@plt>
   16034:	mov	r2, #5
   16038:	ldr	r1, [pc, #108]	; 160ac <g_strcmp0@plt+0x353c>
   1603c:	mov	r0, #0
   16040:	b	12888 <dcgettext@plt>
   16044:	mov	r2, #5
   16048:	ldr	r1, [pc, #96]	; 160b0 <g_strcmp0@plt+0x3540>
   1604c:	mov	r0, #0
   16050:	b	12888 <dcgettext@plt>
   16054:	mov	r2, #5
   16058:	ldr	r1, [pc, #84]	; 160b4 <g_strcmp0@plt+0x3544>
   1605c:	mov	r0, #0
   16060:	b	12888 <dcgettext@plt>
   16064:	mov	r2, #5
   16068:	ldr	r1, [pc, #72]	; 160b8 <g_strcmp0@plt+0x3548>
   1606c:	mov	r0, #0
   16070:	b	12888 <dcgettext@plt>
   16074:	push	{r4, lr}
   16078:	bl	129cc <pk_info_enum_to_string@plt>
   1607c:	ldr	r2, [pc, #56]	; 160bc <g_strcmp0@plt+0x354c>
   16080:	mov	r1, #16
   16084:	mov	r3, r0
   16088:	ldr	r0, [pc, #48]	; 160c0 <g_strcmp0@plt+0x3550>
   1608c:	bl	12618 <g_log@plt>
   16090:	mov	r0, #0
   16094:	pop	{r4, pc}
   16098:	andeq	fp, r1, r0, asr r0
   1609c:	andeq	fp, r1, r4
   160a0:	andeq	fp, r1, r0, lsl r0
   160a4:	andeq	sl, r1, ip, asr #30
   160a8:	andeq	fp, r1, r8, lsl r0
   160ac:	andeq	fp, r1, r0, lsr #32
   160b0:	andeq	fp, r1, ip, lsr #32
   160b4:	andeq	fp, r1, r8, lsr r0
   160b8:	andeq	fp, r1, r4, asr #32
   160bc:	andeq	sl, r1, r8, ror pc
   160c0:	andeq	r7, r1, r4, lsr #22
   160c4:	cmp	r0, #32
   160c8:	ldrls	pc, [pc, r0, lsl #2]
   160cc:	b	16344 <g_strcmp0@plt+0x37d4>
   160d0:	andeq	r6, r1, r4, lsr r3
   160d4:	andeq	r6, r1, r4, lsr #6
   160d8:	andeq	r6, r1, r4, lsl r3
   160dc:	andeq	r6, r1, r4, lsl #6
   160e0:	strdeq	r6, [r1], -r4
   160e4:	andeq	r6, r1, r4, ror #5
   160e8:	ldrdeq	r6, [r1], -r4
   160ec:	andeq	r6, r1, r4, asr #5
   160f0:			; <UNDEFINED> instruction: 0x000162b4
   160f4:	andeq	r6, r1, r4, lsr #5
   160f8:	muleq	r1, r4, r2
   160fc:	andeq	r6, r1, r4, lsl #5
   16100:	andeq	r6, r1, r4, ror r2
   16104:	andeq	r6, r1, r4, ror #4
   16108:	andeq	r6, r1, r4, asr r2
   1610c:	andeq	r6, r1, r4, asr #4
   16110:	andeq	r6, r1, r4, lsr r2
   16114:	andeq	r6, r1, r4, lsr #4
   16118:	andeq	r6, r1, r4, lsl r2
   1611c:	andeq	r6, r1, r4, lsl #4
   16120:	strdeq	r6, [r1], -r4
   16124:	andeq	r6, r1, r4, ror #3
   16128:	ldrdeq	r6, [r1], -r4
   1612c:	andeq	r6, r1, r4, asr #3
   16130:			; <UNDEFINED> instruction: 0x000161b4
   16134:	andeq	r6, r1, r4, lsr #3
   16138:	muleq	r1, r4, r1
   1613c:	andeq	r6, r1, r4, lsl #3
   16140:	andeq	r6, r1, r4, ror r1
   16144:	andeq	r6, r1, r4, ror #2
   16148:	andeq	r6, r1, r4, lsl #6
   1614c:	strdeq	r6, [r1], -r4
   16150:	andeq	r6, r1, r4, asr r1
   16154:	mov	r2, #5
   16158:	ldr	r1, [pc, #520]	; 16368 <g_strcmp0@plt+0x37f8>
   1615c:	mov	r0, #0
   16160:	b	12888 <dcgettext@plt>
   16164:	mov	r2, #5
   16168:	ldr	r1, [pc, #508]	; 1636c <g_strcmp0@plt+0x37fc>
   1616c:	mov	r0, #0
   16170:	b	12888 <dcgettext@plt>
   16174:	mov	r2, #5
   16178:	ldr	r1, [pc, #496]	; 16370 <g_strcmp0@plt+0x3800>
   1617c:	mov	r0, #0
   16180:	b	12888 <dcgettext@plt>
   16184:	mov	r2, #5
   16188:	ldr	r1, [pc, #484]	; 16374 <g_strcmp0@plt+0x3804>
   1618c:	mov	r0, #0
   16190:	b	12888 <dcgettext@plt>
   16194:	mov	r2, #5
   16198:	ldr	r1, [pc, #472]	; 16378 <g_strcmp0@plt+0x3808>
   1619c:	mov	r0, #0
   161a0:	b	12888 <dcgettext@plt>
   161a4:	mov	r2, #5
   161a8:	ldr	r1, [pc, #460]	; 1637c <g_strcmp0@plt+0x380c>
   161ac:	mov	r0, #0
   161b0:	b	12888 <dcgettext@plt>
   161b4:	mov	r2, #5
   161b8:	ldr	r1, [pc, #448]	; 16380 <g_strcmp0@plt+0x3810>
   161bc:	mov	r0, #0
   161c0:	b	12888 <dcgettext@plt>
   161c4:	mov	r2, #5
   161c8:	ldr	r1, [pc, #436]	; 16384 <g_strcmp0@plt+0x3814>
   161cc:	mov	r0, #0
   161d0:	b	12888 <dcgettext@plt>
   161d4:	mov	r2, #5
   161d8:	ldr	r1, [pc, #424]	; 16388 <g_strcmp0@plt+0x3818>
   161dc:	mov	r0, #0
   161e0:	b	12888 <dcgettext@plt>
   161e4:	mov	r2, #5
   161e8:	ldr	r1, [pc, #412]	; 1638c <g_strcmp0@plt+0x381c>
   161ec:	mov	r0, #0
   161f0:	b	12888 <dcgettext@plt>
   161f4:	mov	r2, #5
   161f8:	ldr	r1, [pc, #400]	; 16390 <g_strcmp0@plt+0x3820>
   161fc:	mov	r0, #0
   16200:	b	12888 <dcgettext@plt>
   16204:	mov	r2, #5
   16208:	ldr	r1, [pc, #388]	; 16394 <g_strcmp0@plt+0x3824>
   1620c:	mov	r0, #0
   16210:	b	12888 <dcgettext@plt>
   16214:	mov	r2, #5
   16218:	ldr	r1, [pc, #376]	; 16398 <g_strcmp0@plt+0x3828>
   1621c:	mov	r0, #0
   16220:	b	12888 <dcgettext@plt>
   16224:	mov	r2, #5
   16228:	ldr	r1, [pc, #364]	; 1639c <g_strcmp0@plt+0x382c>
   1622c:	mov	r0, #0
   16230:	b	12888 <dcgettext@plt>
   16234:	mov	r2, #5
   16238:	ldr	r1, [pc, #352]	; 163a0 <g_strcmp0@plt+0x3830>
   1623c:	mov	r0, #0
   16240:	b	12888 <dcgettext@plt>
   16244:	mov	r2, #5
   16248:	ldr	r1, [pc, #340]	; 163a4 <g_strcmp0@plt+0x3834>
   1624c:	mov	r0, #0
   16250:	b	12888 <dcgettext@plt>
   16254:	mov	r2, #5
   16258:	ldr	r1, [pc, #328]	; 163a8 <g_strcmp0@plt+0x3838>
   1625c:	mov	r0, #0
   16260:	b	12888 <dcgettext@plt>
   16264:	mov	r2, #5
   16268:	ldr	r1, [pc, #316]	; 163ac <g_strcmp0@plt+0x383c>
   1626c:	mov	r0, #0
   16270:	b	12888 <dcgettext@plt>
   16274:	mov	r2, #5
   16278:	ldr	r1, [pc, #304]	; 163b0 <g_strcmp0@plt+0x3840>
   1627c:	mov	r0, #0
   16280:	b	12888 <dcgettext@plt>
   16284:	mov	r2, #5
   16288:	ldr	r1, [pc, #292]	; 163b4 <g_strcmp0@plt+0x3844>
   1628c:	mov	r0, #0
   16290:	b	12888 <dcgettext@plt>
   16294:	mov	r2, #5
   16298:	ldr	r1, [pc, #280]	; 163b8 <g_strcmp0@plt+0x3848>
   1629c:	mov	r0, #0
   162a0:	b	12888 <dcgettext@plt>
   162a4:	mov	r2, #5
   162a8:	ldr	r1, [pc, #268]	; 163bc <g_strcmp0@plt+0x384c>
   162ac:	mov	r0, #0
   162b0:	b	12888 <dcgettext@plt>
   162b4:	mov	r2, #5
   162b8:	ldr	r1, [pc, #256]	; 163c0 <g_strcmp0@plt+0x3850>
   162bc:	mov	r0, #0
   162c0:	b	12888 <dcgettext@plt>
   162c4:	mov	r2, #5
   162c8:	ldr	r1, [pc, #244]	; 163c4 <g_strcmp0@plt+0x3854>
   162cc:	mov	r0, #0
   162d0:	b	12888 <dcgettext@plt>
   162d4:	mov	r2, #5
   162d8:	ldr	r1, [pc, #232]	; 163c8 <g_strcmp0@plt+0x3858>
   162dc:	mov	r0, #0
   162e0:	b	12888 <dcgettext@plt>
   162e4:	mov	r2, #5
   162e8:	ldr	r1, [pc, #220]	; 163cc <g_strcmp0@plt+0x385c>
   162ec:	mov	r0, #0
   162f0:	b	12888 <dcgettext@plt>
   162f4:	mov	r2, #5
   162f8:	ldr	r1, [pc, #208]	; 163d0 <g_strcmp0@plt+0x3860>
   162fc:	mov	r0, #0
   16300:	b	12888 <dcgettext@plt>
   16304:	mov	r2, #5
   16308:	ldr	r1, [pc, #196]	; 163d4 <g_strcmp0@plt+0x3864>
   1630c:	mov	r0, #0
   16310:	b	12888 <dcgettext@plt>
   16314:	mov	r2, #5
   16318:	ldr	r1, [pc, #184]	; 163d8 <g_strcmp0@plt+0x3868>
   1631c:	mov	r0, #0
   16320:	b	12888 <dcgettext@plt>
   16324:	mov	r2, #5
   16328:	ldr	r1, [pc, #172]	; 163dc <g_strcmp0@plt+0x386c>
   1632c:	mov	r0, #0
   16330:	b	12888 <dcgettext@plt>
   16334:	mov	r2, #5
   16338:	ldr	r1, [pc, #160]	; 163e0 <g_strcmp0@plt+0x3870>
   1633c:	mov	r0, #0
   16340:	b	12888 <dcgettext@plt>
   16344:	push	{r4, lr}
   16348:	bl	1260c <pk_role_enum_to_string@plt>
   1634c:	ldr	r2, [pc, #144]	; 163e4 <g_strcmp0@plt+0x3874>
   16350:	mov	r1, #16
   16354:	mov	r3, r0
   16358:	ldr	r0, [pc, #136]	; 163e8 <g_strcmp0@plt+0x3878>
   1635c:	bl	12618 <g_log@plt>
   16360:	mov	r0, #0
   16364:	pop	{r4, pc}
   16368:	andeq	fp, r1, r4, lsr #3
   1636c:	andeq	fp, r1, r4, lsr #5
   16370:	andeq	fp, r1, r8, lsl #5
   16374:	andeq	fp, r1, r4, ror r2
   16378:	andeq	fp, r1, r8, asr #4
   1637c:	andeq	sl, r1, r8, lsr #21
   16380:	andeq	fp, r1, r8, lsr r2
   16384:	strdeq	fp, [r1], -r0
   16388:	andeq	fp, r1, ip, asr r1
   1638c:	andeq	fp, r1, r4, lsl r1
   16390:	andeq	fp, r1, r0, lsl #2
   16394:	andeq	fp, r1, ip, ror #1
   16398:	ldrdeq	fp, [r1], -r8
   1639c:	ldrdeq	fp, [r1], -r0
   163a0:			; <UNDEFINED> instruction: 0x0001b1b8
   163a4:	muleq	r1, r0, r1
   163a8:			; <UNDEFINED> instruction: 0x0001afb4
   163ac:	andeq	fp, r1, r0, asr #2
   163b0:	andeq	fp, r1, r8, lsl #4
   163b4:	andeq	sl, r1, r8, lsr #31
   163b8:	andeq	fp, r1, r0, lsr r1
   163bc:	andeq	fp, r1, r8, asr #1
   163c0:	andeq	fp, r1, ip, lsl #1
   163c4:	strheq	fp, [r1], -r4
   163c8:	andeq	fp, r1, r0, ror r1
   163cc:	andeq	fp, r1, r0, lsr #4
   163d0:	ldrdeq	fp, [r1], -ip
   163d4:	andeq	fp, r1, r4, lsr #1
   163d8:	andeq	fp, r1, r4, ror r0
   163dc:	muleq	r1, ip, fp
   163e0:	andeq	fp, r1, r0, rrx
   163e4:			; <UNDEFINED> instruction: 0x0001b2bc
   163e8:	andeq	r7, r1, r4, lsr #22
   163ec:	cmp	r0, #32
   163f0:	ldrls	pc, [pc, r0, lsl #2]
   163f4:	b	1666c <g_strcmp0@plt+0x3afc>
   163f8:	andeq	r6, r1, ip, asr r6
   163fc:	andeq	r6, r1, ip, asr #12
   16400:	andeq	r6, r1, ip, lsr r6
   16404:	andeq	r6, r1, ip, lsr #12
   16408:	andeq	r6, r1, ip, lsl r6
   1640c:	andeq	r6, r1, ip, lsl #12
   16410:	strdeq	r6, [r1], -ip
   16414:	andeq	r6, r1, ip, ror #11
   16418:	ldrdeq	r6, [r1], -ip
   1641c:	andeq	r6, r1, ip, asr #11
   16420:			; <UNDEFINED> instruction: 0x000165bc
   16424:	andeq	r6, r1, ip, lsr #11
   16428:	muleq	r1, ip, r5
   1642c:	andeq	r6, r1, ip, lsl #11
   16430:	andeq	r6, r1, ip, ror r5
   16434:	andeq	r6, r1, ip, ror #10
   16438:	andeq	r6, r1, ip, asr r5
   1643c:	andeq	r6, r1, ip, asr #10
   16440:	andeq	r6, r1, ip, lsr r5
   16444:	andeq	r6, r1, ip, lsr #10
   16448:	andeq	r6, r1, ip, lsl r5
   1644c:	andeq	r6, r1, ip, lsl #10
   16450:	strdeq	r6, [r1], -ip
   16454:	andeq	r6, r1, ip, ror #9
   16458:	ldrdeq	r6, [r1], -ip
   1645c:	andeq	r6, r1, ip, asr #9
   16460:			; <UNDEFINED> instruction: 0x000164bc
   16464:	andeq	r6, r1, ip, lsr #9
   16468:	muleq	r1, ip, r4
   1646c:	andeq	r6, r1, ip, lsl #9
   16470:	andeq	r6, r1, ip, lsr #12
   16474:	andeq	r6, r1, ip, lsl r6
   16478:	andeq	r6, r1, ip, ror r4
   1647c:	mov	r2, #5
   16480:	ldr	r1, [pc, #520]	; 16690 <g_strcmp0@plt+0x3b20>
   16484:	mov	r0, #0
   16488:	b	12888 <dcgettext@plt>
   1648c:	mov	r2, #5
   16490:	ldr	r1, [pc, #508]	; 16694 <g_strcmp0@plt+0x3b24>
   16494:	mov	r0, #0
   16498:	b	12888 <dcgettext@plt>
   1649c:	mov	r2, #5
   164a0:	ldr	r1, [pc, #496]	; 16698 <g_strcmp0@plt+0x3b28>
   164a4:	mov	r0, #0
   164a8:	b	12888 <dcgettext@plt>
   164ac:	mov	r2, #5
   164b0:	ldr	r1, [pc, #484]	; 1669c <g_strcmp0@plt+0x3b2c>
   164b4:	mov	r0, #0
   164b8:	b	12888 <dcgettext@plt>
   164bc:	mov	r2, #5
   164c0:	ldr	r1, [pc, #472]	; 166a0 <g_strcmp0@plt+0x3b30>
   164c4:	mov	r0, #0
   164c8:	b	12888 <dcgettext@plt>
   164cc:	mov	r2, #5
   164d0:	ldr	r1, [pc, #460]	; 166a4 <g_strcmp0@plt+0x3b34>
   164d4:	mov	r0, #0
   164d8:	b	12888 <dcgettext@plt>
   164dc:	mov	r2, #5
   164e0:	ldr	r1, [pc, #448]	; 166a8 <g_strcmp0@plt+0x3b38>
   164e4:	mov	r0, #0
   164e8:	b	12888 <dcgettext@plt>
   164ec:	mov	r2, #5
   164f0:	ldr	r1, [pc, #436]	; 166ac <g_strcmp0@plt+0x3b3c>
   164f4:	mov	r0, #0
   164f8:	b	12888 <dcgettext@plt>
   164fc:	mov	r2, #5
   16500:	ldr	r1, [pc, #424]	; 166b0 <g_strcmp0@plt+0x3b40>
   16504:	mov	r0, #0
   16508:	b	12888 <dcgettext@plt>
   1650c:	mov	r2, #5
   16510:	ldr	r1, [pc, #412]	; 166b4 <g_strcmp0@plt+0x3b44>
   16514:	mov	r0, #0
   16518:	b	12888 <dcgettext@plt>
   1651c:	mov	r2, #5
   16520:	ldr	r1, [pc, #400]	; 166b8 <g_strcmp0@plt+0x3b48>
   16524:	mov	r0, #0
   16528:	b	12888 <dcgettext@plt>
   1652c:	mov	r2, #5
   16530:	ldr	r1, [pc, #388]	; 166bc <g_strcmp0@plt+0x3b4c>
   16534:	mov	r0, #0
   16538:	b	12888 <dcgettext@plt>
   1653c:	mov	r2, #5
   16540:	ldr	r1, [pc, #376]	; 166c0 <g_strcmp0@plt+0x3b50>
   16544:	mov	r0, #0
   16548:	b	12888 <dcgettext@plt>
   1654c:	mov	r2, #5
   16550:	ldr	r1, [pc, #364]	; 166c4 <g_strcmp0@plt+0x3b54>
   16554:	mov	r0, #0
   16558:	b	12888 <dcgettext@plt>
   1655c:	mov	r2, #5
   16560:	ldr	r1, [pc, #352]	; 166c8 <g_strcmp0@plt+0x3b58>
   16564:	mov	r0, #0
   16568:	b	12888 <dcgettext@plt>
   1656c:	mov	r2, #5
   16570:	ldr	r1, [pc, #340]	; 166cc <g_strcmp0@plt+0x3b5c>
   16574:	mov	r0, #0
   16578:	b	12888 <dcgettext@plt>
   1657c:	mov	r2, #5
   16580:	ldr	r1, [pc, #328]	; 166d0 <g_strcmp0@plt+0x3b60>
   16584:	mov	r0, #0
   16588:	b	12888 <dcgettext@plt>
   1658c:	mov	r2, #5
   16590:	ldr	r1, [pc, #316]	; 166d4 <g_strcmp0@plt+0x3b64>
   16594:	mov	r0, #0
   16598:	b	12888 <dcgettext@plt>
   1659c:	mov	r2, #5
   165a0:	ldr	r1, [pc, #304]	; 166d8 <g_strcmp0@plt+0x3b68>
   165a4:	mov	r0, #0
   165a8:	b	12888 <dcgettext@plt>
   165ac:	mov	r2, #5
   165b0:	ldr	r1, [pc, #292]	; 166dc <g_strcmp0@plt+0x3b6c>
   165b4:	mov	r0, #0
   165b8:	b	12888 <dcgettext@plt>
   165bc:	mov	r2, #5
   165c0:	ldr	r1, [pc, #280]	; 166e0 <g_strcmp0@plt+0x3b70>
   165c4:	mov	r0, #0
   165c8:	b	12888 <dcgettext@plt>
   165cc:	mov	r2, #5
   165d0:	ldr	r1, [pc, #268]	; 166e4 <g_strcmp0@plt+0x3b74>
   165d4:	mov	r0, #0
   165d8:	b	12888 <dcgettext@plt>
   165dc:	mov	r2, #5
   165e0:	ldr	r1, [pc, #256]	; 166e8 <g_strcmp0@plt+0x3b78>
   165e4:	mov	r0, #0
   165e8:	b	12888 <dcgettext@plt>
   165ec:	mov	r2, #5
   165f0:	ldr	r1, [pc, #244]	; 166ec <g_strcmp0@plt+0x3b7c>
   165f4:	mov	r0, #0
   165f8:	b	12888 <dcgettext@plt>
   165fc:	mov	r2, #5
   16600:	ldr	r1, [pc, #232]	; 166f0 <g_strcmp0@plt+0x3b80>
   16604:	mov	r0, #0
   16608:	b	12888 <dcgettext@plt>
   1660c:	mov	r2, #5
   16610:	ldr	r1, [pc, #220]	; 166f4 <g_strcmp0@plt+0x3b84>
   16614:	mov	r0, #0
   16618:	b	12888 <dcgettext@plt>
   1661c:	mov	r2, #5
   16620:	ldr	r1, [pc, #208]	; 166f8 <g_strcmp0@plt+0x3b88>
   16624:	mov	r0, #0
   16628:	b	12888 <dcgettext@plt>
   1662c:	mov	r2, #5
   16630:	ldr	r1, [pc, #196]	; 166fc <g_strcmp0@plt+0x3b8c>
   16634:	mov	r0, #0
   16638:	b	12888 <dcgettext@plt>
   1663c:	mov	r2, #5
   16640:	ldr	r1, [pc, #184]	; 16700 <g_strcmp0@plt+0x3b90>
   16644:	mov	r0, #0
   16648:	b	12888 <dcgettext@plt>
   1664c:	mov	r2, #5
   16650:	ldr	r1, [pc, #172]	; 16704 <g_strcmp0@plt+0x3b94>
   16654:	mov	r0, #0
   16658:	b	12888 <dcgettext@plt>
   1665c:	mov	r2, #5
   16660:	ldr	r1, [pc, #160]	; 16708 <g_strcmp0@plt+0x3b98>
   16664:	mov	r0, #0
   16668:	b	12888 <dcgettext@plt>
   1666c:	push	{r4, lr}
   16670:	bl	1260c <pk_role_enum_to_string@plt>
   16674:	ldr	r2, [pc, #144]	; 1670c <g_strcmp0@plt+0x3b9c>
   16678:	mov	r1, #16
   1667c:	mov	r3, r0
   16680:	ldr	r0, [pc, #136]	; 16710 <g_strcmp0@plt+0x3ba0>
   16684:	bl	12618 <g_log@plt>
   16688:	mov	r0, #0
   1668c:	pop	{r4, pc}
   16690:	andeq	fp, r1, ip, lsr #8
   16694:	andeq	fp, r1, r4, lsl r5
   16698:	strdeq	fp, [r1], -ip
   1669c:	andeq	fp, r1, ip, ror #9
   166a0:	ldrdeq	fp, [r1], -r0
   166a4:			; <UNDEFINED> instruction: 0x0001b4bc
   166a8:	andeq	fp, r1, ip, lsr #9
   166ac:	andeq	fp, r1, r0, ror r4
   166b0:	ldrdeq	fp, [r1], -ip
   166b4:	andeq	fp, r1, r8, ror #6
   166b8:	andeq	fp, r1, r8, asr r3
   166bc:	andeq	fp, r1, r4, asr #6
   166c0:	andeq	fp, r1, r4, lsr #6
   166c4:	andeq	fp, r1, r4, asr r4
   166c8:	andeq	fp, r1, r0, asr #8
   166cc:	andeq	fp, r1, r8, lsl r4
   166d0:	andeq	fp, r1, r4, lsl #7
   166d4:	andeq	fp, r1, r4, asr #7
   166d8:	andeq	fp, r1, r4, lsl #9
   166dc:	muleq	r1, r8, r3
   166e0:	andeq	fp, r1, ip, lsr #7
   166e4:	andeq	fp, r1, r8, lsl r3
   166e8:	andeq	fp, r1, r8, ror #5
   166ec:	andeq	fp, r1, r8, lsl #6
   166f0:	strdeq	fp, [r1], -ip
   166f4:	muleq	r1, r8, r4
   166f8:	andeq	fp, r1, r0, ror #8
   166fc:	strdeq	fp, [r1], -ip
   16700:	ldrdeq	fp, [r1], -r4
   16704:	strdeq	fp, [r1], -r0
   16708:	andeq	fp, r1, r0, rrx
   1670c:			; <UNDEFINED> instruction: 0x0001b2bc
   16710:	andeq	r7, r1, r4, lsr #22
   16714:	cmp	r0, #34	; 0x22
   16718:	ldrls	pc, [pc, r0, lsl #2]
   1671c:	b	169dc <g_strcmp0@plt+0x3e6c>
   16720:	andeq	r6, r1, ip, asr #19
   16724:			; <UNDEFINED> instruction: 0x000169bc
   16728:	andeq	r6, r1, ip, lsr #19
   1672c:	muleq	r1, ip, r9
   16730:	andeq	r6, r1, ip, lsl #19
   16734:	andeq	r6, r1, ip, ror r9
   16738:	andeq	r6, r1, ip, ror #18
   1673c:	andeq	r6, r1, ip, asr r9
   16740:	andeq	r6, r1, ip, asr #18
   16744:	andeq	r6, r1, ip, lsr r9
   16748:	andeq	r6, r1, ip, lsr #18
   1674c:	andeq	r6, r1, ip, lsl r9
   16750:	andeq	r6, r1, ip, lsl #18
   16754:	strdeq	r6, [r1], -ip
   16758:	andeq	r6, r1, ip, ror #17
   1675c:	ldrdeq	r6, [r1], -ip
   16760:	andeq	r6, r1, ip, asr #17
   16764:			; <UNDEFINED> instruction: 0x000168bc
   16768:	andeq	r6, r1, ip, lsr #17
   1676c:	muleq	r1, ip, r8
   16770:	andeq	r6, r1, ip, lsl #17
   16774:	andeq	r6, r1, ip, ror r8
   16778:	andeq	r6, r1, ip, ror #16
   1677c:	andeq	r6, r1, ip, asr r8
   16780:	andeq	r6, r1, ip, asr #16
   16784:	andeq	r6, r1, ip, lsr r8
   16788:	andeq	r6, r1, ip, lsr #16
   1678c:	andeq	r6, r1, ip, lsl r8
   16790:	andeq	r6, r1, ip, lsl #16
   16794:	strdeq	r6, [r1], -ip
   16798:	andeq	r6, r1, ip, ror #15
   1679c:	ldrdeq	r6, [r1], -ip
   167a0:	andeq	r6, r1, ip, asr #15
   167a4:			; <UNDEFINED> instruction: 0x000167bc
   167a8:	andeq	r6, r1, ip, lsr #15
   167ac:	mov	r2, #5
   167b0:	ldr	r1, [pc, #580]	; 169fc <g_strcmp0@plt+0x3e8c>
   167b4:	mov	r0, #0
   167b8:	b	12888 <dcgettext@plt>
   167bc:	mov	r2, #5
   167c0:	ldr	r1, [pc, #568]	; 16a00 <g_strcmp0@plt+0x3e90>
   167c4:	mov	r0, #0
   167c8:	b	12888 <dcgettext@plt>
   167cc:	mov	r2, #5
   167d0:	ldr	r1, [pc, #556]	; 16a04 <g_strcmp0@plt+0x3e94>
   167d4:	mov	r0, #0
   167d8:	b	12888 <dcgettext@plt>
   167dc:	mov	r2, #5
   167e0:	ldr	r1, [pc, #544]	; 16a08 <g_strcmp0@plt+0x3e98>
   167e4:	mov	r0, #0
   167e8:	b	12888 <dcgettext@plt>
   167ec:	mov	r2, #5
   167f0:	ldr	r1, [pc, #532]	; 16a0c <g_strcmp0@plt+0x3e9c>
   167f4:	mov	r0, #0
   167f8:	b	12888 <dcgettext@plt>
   167fc:	mov	r2, #5
   16800:	ldr	r1, [pc, #520]	; 16a10 <g_strcmp0@plt+0x3ea0>
   16804:	mov	r0, #0
   16808:	b	12888 <dcgettext@plt>
   1680c:	mov	r2, #5
   16810:	ldr	r1, [pc, #508]	; 16a14 <g_strcmp0@plt+0x3ea4>
   16814:	mov	r0, #0
   16818:	b	12888 <dcgettext@plt>
   1681c:	mov	r2, #5
   16820:	ldr	r1, [pc, #496]	; 16a18 <g_strcmp0@plt+0x3ea8>
   16824:	mov	r0, #0
   16828:	b	12888 <dcgettext@plt>
   1682c:	mov	r2, #5
   16830:	ldr	r1, [pc, #484]	; 16a1c <g_strcmp0@plt+0x3eac>
   16834:	mov	r0, #0
   16838:	b	12888 <dcgettext@plt>
   1683c:	mov	r2, #5
   16840:	ldr	r1, [pc, #472]	; 16a20 <g_strcmp0@plt+0x3eb0>
   16844:	mov	r0, #0
   16848:	b	12888 <dcgettext@plt>
   1684c:	mov	r2, #5
   16850:	ldr	r1, [pc, #460]	; 16a24 <g_strcmp0@plt+0x3eb4>
   16854:	mov	r0, #0
   16858:	b	12888 <dcgettext@plt>
   1685c:	mov	r2, #5
   16860:	ldr	r1, [pc, #448]	; 16a28 <g_strcmp0@plt+0x3eb8>
   16864:	mov	r0, #0
   16868:	b	12888 <dcgettext@plt>
   1686c:	mov	r2, #5
   16870:	ldr	r1, [pc, #436]	; 16a2c <g_strcmp0@plt+0x3ebc>
   16874:	mov	r0, #0
   16878:	b	12888 <dcgettext@plt>
   1687c:	mov	r2, #5
   16880:	ldr	r1, [pc, #424]	; 16a30 <g_strcmp0@plt+0x3ec0>
   16884:	mov	r0, #0
   16888:	b	12888 <dcgettext@plt>
   1688c:	mov	r2, #5
   16890:	ldr	r1, [pc, #412]	; 16a34 <g_strcmp0@plt+0x3ec4>
   16894:	mov	r0, #0
   16898:	b	12888 <dcgettext@plt>
   1689c:	mov	r2, #5
   168a0:	ldr	r1, [pc, #400]	; 16a38 <g_strcmp0@plt+0x3ec8>
   168a4:	mov	r0, #0
   168a8:	b	12888 <dcgettext@plt>
   168ac:	mov	r2, #5
   168b0:	ldr	r1, [pc, #388]	; 16a3c <g_strcmp0@plt+0x3ecc>
   168b4:	mov	r0, #0
   168b8:	b	12888 <dcgettext@plt>
   168bc:	mov	r2, #5
   168c0:	ldr	r1, [pc, #376]	; 16a40 <g_strcmp0@plt+0x3ed0>
   168c4:	mov	r0, #0
   168c8:	b	12888 <dcgettext@plt>
   168cc:	mov	r2, #5
   168d0:	ldr	r1, [pc, #364]	; 16a44 <g_strcmp0@plt+0x3ed4>
   168d4:	mov	r0, #0
   168d8:	b	12888 <dcgettext@plt>
   168dc:	mov	r2, #5
   168e0:	ldr	r1, [pc, #352]	; 16a48 <g_strcmp0@plt+0x3ed8>
   168e4:	mov	r0, #0
   168e8:	b	12888 <dcgettext@plt>
   168ec:	mov	r2, #5
   168f0:	ldr	r1, [pc, #340]	; 16a4c <g_strcmp0@plt+0x3edc>
   168f4:	mov	r0, #0
   168f8:	b	12888 <dcgettext@plt>
   168fc:	mov	r2, #5
   16900:	ldr	r1, [pc, #328]	; 16a50 <g_strcmp0@plt+0x3ee0>
   16904:	mov	r0, #0
   16908:	b	12888 <dcgettext@plt>
   1690c:	mov	r2, #5
   16910:	ldr	r1, [pc, #316]	; 16a54 <g_strcmp0@plt+0x3ee4>
   16914:	mov	r0, #0
   16918:	b	12888 <dcgettext@plt>
   1691c:	mov	r2, #5
   16920:	ldr	r1, [pc, #304]	; 16a58 <g_strcmp0@plt+0x3ee8>
   16924:	mov	r0, #0
   16928:	b	12888 <dcgettext@plt>
   1692c:	mov	r2, #5
   16930:	ldr	r1, [pc, #292]	; 16a5c <g_strcmp0@plt+0x3eec>
   16934:	mov	r0, #0
   16938:	b	12888 <dcgettext@plt>
   1693c:	mov	r2, #5
   16940:	ldr	r1, [pc, #280]	; 16a60 <g_strcmp0@plt+0x3ef0>
   16944:	mov	r0, #0
   16948:	b	12888 <dcgettext@plt>
   1694c:	mov	r2, #5
   16950:	ldr	r1, [pc, #268]	; 16a64 <g_strcmp0@plt+0x3ef4>
   16954:	mov	r0, #0
   16958:	b	12888 <dcgettext@plt>
   1695c:	mov	r2, #5
   16960:	ldr	r1, [pc, #256]	; 16a68 <g_strcmp0@plt+0x3ef8>
   16964:	mov	r0, #0
   16968:	b	12888 <dcgettext@plt>
   1696c:	mov	r2, #5
   16970:	ldr	r1, [pc, #244]	; 16a6c <g_strcmp0@plt+0x3efc>
   16974:	mov	r0, #0
   16978:	b	12888 <dcgettext@plt>
   1697c:	mov	r2, #5
   16980:	ldr	r1, [pc, #232]	; 16a70 <g_strcmp0@plt+0x3f00>
   16984:	mov	r0, #0
   16988:	b	12888 <dcgettext@plt>
   1698c:	mov	r2, #5
   16990:	ldr	r1, [pc, #220]	; 16a74 <g_strcmp0@plt+0x3f04>
   16994:	mov	r0, #0
   16998:	b	12888 <dcgettext@plt>
   1699c:	mov	r2, #5
   169a0:	ldr	r1, [pc, #208]	; 16a78 <g_strcmp0@plt+0x3f08>
   169a4:	mov	r0, #0
   169a8:	b	12888 <dcgettext@plt>
   169ac:	mov	r2, #5
   169b0:	ldr	r1, [pc, #196]	; 16a7c <g_strcmp0@plt+0x3f0c>
   169b4:	mov	r0, #0
   169b8:	b	12888 <dcgettext@plt>
   169bc:	mov	r2, #5
   169c0:	ldr	r1, [pc, #184]	; 16a80 <g_strcmp0@plt+0x3f10>
   169c4:	mov	r0, #0
   169c8:	b	12888 <dcgettext@plt>
   169cc:	mov	r2, #5
   169d0:	ldr	r1, [pc, #172]	; 16a84 <g_strcmp0@plt+0x3f14>
   169d4:	mov	r0, #0
   169d8:	b	12888 <dcgettext@plt>
   169dc:	mov	r3, r0
   169e0:	push	{r4, lr}
   169e4:	mov	r1, #16
   169e8:	ldr	r2, [pc, #152]	; 16a88 <g_strcmp0@plt+0x3f18>
   169ec:	ldr	r0, [pc, #152]	; 16a8c <g_strcmp0@plt+0x3f1c>
   169f0:	bl	12618 <g_log@plt>
   169f4:	mov	r0, #0
   169f8:	pop	{r4, pc}
   169fc:			; <UNDEFINED> instruction: 0x0001b6bc
   16a00:			; <UNDEFINED> instruction: 0x0001b6b4
   16a04:	andeq	fp, r1, r0, lsr #13
   16a08:	muleq	r1, r4, r6
   16a0c:	andeq	fp, r1, r4, lsl #13
   16a10:	andeq	fp, r1, ip, ror r6
   16a14:	andeq	fp, r1, ip, lsl r6
   16a18:	muleq	r1, r8, r5
   16a1c:	andeq	fp, r1, r8, ror #11
   16a20:	andeq	fp, r1, ip, lsr #12
   16a24:	andeq	fp, r1, ip, ror #12
   16a28:	ldrdeq	fp, [r1], -ip
   16a2c:	andeq	fp, r1, r0, lsl #11
   16a30:	andeq	fp, r1, r8, lsr r6
   16a34:	andeq	fp, r1, r8, ror r5
   16a38:	andeq	fp, r1, r0, ror r5
   16a3c:	andeq	fp, r1, ip, asr r6
   16a40:	andeq	fp, r1, ip, lsl #11
   16a44:	andeq	fp, r1, r4, ror #12
   16a48:	andeq	fp, r1, ip, lsl #12
   16a4c:	andeq	fp, r1, r4, lsl #12
   16a50:	andeq	fp, r1, r4, ror #10
   16a54:	andeq	fp, r1, r8, asr r5
   16a58:	andeq	fp, r1, r0, asr r5
   16a5c:	strdeq	fp, [r1], -r0
   16a60:	andeq	fp, r1, r4, asr #10
   16a64:			; <UNDEFINED> instruction: 0x0001b5bc
   16a68:	andeq	fp, r1, ip, asr #11
   16a6c:			; <UNDEFINED> instruction: 0x0001b5b0
   16a70:	andeq	fp, r1, r0, lsr #11
   16a74:	andeq	fp, r1, ip, asr #12
   16a78:	strdeq	fp, [r1], -r8
   16a7c:	andeq	fp, r1, r8, lsr r5
   16a80:	andeq	fp, r1, r8, lsr #10
   16a84:	andeq	fp, r1, ip, asr #13
   16a88:	ldrdeq	fp, [r1], -ip
   16a8c:	andeq	r7, r1, r4, lsr #22
   16a90:	mov	r1, r0
   16a94:	ldr	r0, [pc]	; 16a9c <g_strcmp0@plt+0x3f2c>
   16a98:	b	12b04 <pk_enum_find_string@plt>
   16a9c:	andeq	r8, r1, r4, lsl r2
   16aa0:	mov	r1, r0
   16aa4:	ldr	r0, [pc]	; 16aac <g_strcmp0@plt+0x3f3c>
   16aa8:	b	12b04 <pk_enum_find_string@plt>
   16aac:	andeq	r8, r1, r4, ror #5
   16ab0:	mov	r1, r0
   16ab4:	ldr	r0, [pc]	; 16abc <g_strcmp0@plt+0x3f4c>
   16ab8:	b	12b04 <pk_enum_find_string@plt>
   16abc:	andeq	r8, r1, ip, lsl #8
   16ac0:	mov	r1, r0
   16ac4:	ldr	r0, [pc]	; 16acc <g_strcmp0@plt+0x3f5c>
   16ac8:	b	12b04 <pk_enum_find_string@plt>
   16acc:	andeq	r8, r1, r4, lsr r5
   16ad0:	mov	r1, r0
   16ad4:	ldr	r0, [pc]	; 16adc <g_strcmp0@plt+0x3f6c>
   16ad8:	b	12b04 <pk_enum_find_string@plt>
   16adc:	andeq	r8, r1, r4, asr #12
   16ae0:	mov	r1, r0
   16ae4:	push	{r4, lr}
   16ae8:	ldr	r0, [pc, #16]	; 16b00 <g_strcmp0@plt+0x3f90>
   16aec:	bl	12b04 <pk_enum_find_string@plt>
   16af0:	ldrb	r3, [r0]
   16af4:	cmp	r3, #0
   16af8:	moveq	r0, #0
   16afc:	pop	{r4, pc}
   16b00:	andeq	r8, r1, r4, ror #14
   16b04:	mov	r1, r0
   16b08:	ldr	r0, [pc]	; 16b10 <g_strcmp0@plt+0x3fa0>
   16b0c:	b	12b04 <pk_enum_find_string@plt>
   16b10:	andeq	r8, r1, r4, lsr #15
   16b14:	cmp	r0, #25
   16b18:	bhi	16b20 <g_strcmp0@plt+0x3fb0>
   16b1c:	b	15e7c <g_strcmp0@plt+0x330c>
   16b20:	sub	r0, r0, #26
   16b24:	b	15fa0 <g_strcmp0@plt+0x3430>
   16b28:	cmp	r0, #10
   16b2c:	beq	16b50 <g_strcmp0@plt+0x3fe0>
   16b30:	sub	r3, r0, #11
   16b34:	cmp	r3, #1
   16b38:	bls	16b58 <g_strcmp0@plt+0x3fe8>
   16b3c:	cmp	r0, #25
   16b40:	bhi	16b60 <g_strcmp0@plt+0x3ff0>
   16b44:	mov	r1, r0
   16b48:	ldr	r0, [pc, #28]	; 16b6c <g_strcmp0@plt+0x3ffc>
   16b4c:	b	12b04 <pk_enum_find_string@plt>
   16b50:	ldr	r0, [pc, #24]	; 16b70 <g_strcmp0@plt+0x4000>
   16b54:	bx	lr
   16b58:	ldr	r0, [pc, #20]	; 16b74 <g_strcmp0@plt+0x4004>
   16b5c:	bx	lr
   16b60:	sub	r1, r0, #26
   16b64:	ldr	r0, [pc]	; 16b6c <g_strcmp0@plt+0x3ffc>
   16b68:	b	12b04 <pk_enum_find_string@plt>
   16b6c:	andeq	r8, r1, r4, lsl r2
   16b70:	strdeq	fp, [r1], -r4
   16b74:	andeq	fp, r1, ip, lsl #14
   16b78:	push	{r4, lr}
   16b7c:	sub	sp, sp, #16
   16b80:	bl	12804 <gtk_image_get_type@plt>
   16b84:	mov	r4, r0
   16b88:	ldr	r0, [pc, #48]	; 16bc0 <g_strcmp0@plt+0x4050>
   16b8c:	bl	127f8 <g_intern_static_string@plt>
   16b90:	ldr	r1, [pc, #44]	; 16bc4 <g_strcmp0@plt+0x4054>
   16b94:	mov	r2, #0
   16b98:	mov	r3, #48	; 0x30
   16b9c:	stmib	sp, {r1, r2}
   16ba0:	str	r3, [sp]
   16ba4:	mov	r2, #444	; 0x1bc
   16ba8:	ldr	r3, [pc, #24]	; 16bc8 <g_strcmp0@plt+0x4058>
   16bac:	mov	r1, r0
   16bb0:	mov	r0, r4
   16bb4:	bl	12504 <g_type_register_static_simple@plt>
   16bb8:	add	sp, sp, #16
   16bbc:	pop	{r4, pc}
   16bc0:	andeq	fp, r1, ip, ror #26
   16bc4:	andeq	r6, r1, r8, lsr sp
   16bc8:	andeq	r6, r1, ip, asr #23
   16bcc:	push	{r4, r5, r6, lr}
   16bd0:	mov	r5, r0
   16bd4:	ldr	r4, [pc, #68]	; 16c20 <g_strcmp0@plt+0x40b0>
   16bd8:	bl	12a68 <g_type_class_peek_parent@plt>
   16bdc:	ldr	r3, [r4]
   16be0:	cmp	r3, #0
   16be4:	bne	16c10 <g_strcmp0@plt+0x40a0>
   16be8:	bl	12588 <gtk_widget_get_type@plt>
   16bec:	mov	r1, r0
   16bf0:	mov	r0, r5
   16bf4:	bl	12b1c <g_type_check_class_cast@plt>
   16bf8:	ldr	r3, [pc, #36]	; 16c24 <g_strcmp0@plt+0x40b4>
   16bfc:	str	r3, [r0, #76]	; 0x4c
   16c00:	mov	r0, r5
   16c04:	bl	12a68 <g_type_class_peek_parent@plt>
   16c08:	str	r0, [r4, #4]
   16c0c:	pop	{r4, r5, r6, pc}
   16c10:	mov	r1, r4
   16c14:	mov	r0, r5
   16c18:	bl	12528 <g_type_class_adjust_private_offset@plt>
   16c1c:	b	16be8 <g_strcmp0@plt+0x4078>
   16c20:	andeq	sp, r2, r4, ror r2
   16c24:	andeq	r6, r1, r8, asr #29
   16c28:	ldr	r1, [pc, #164]	; 16cd4 <g_strcmp0@plt+0x4164>
   16c2c:	ldr	r3, [pc, #164]	; 16cd8 <g_strcmp0@plt+0x4168>
   16c30:	push	{r4, r5, r6, lr}
   16c34:	mov	r4, r0
   16c38:	ldr	r2, [r1, #8]
   16c3c:	add	r0, r2, #1
   16c40:	umull	ip, r3, r3, r2
   16c44:	str	r0, [r1, #8]
   16c48:	lsr	r3, r3, #4
   16c4c:	add	r3, r3, r3, lsl #2
   16c50:	cmp	r2, r3, lsl #2
   16c54:	beq	16c9c <g_strcmp0@plt+0x412c>
   16c58:	ldr	r5, [r4, #44]	; 0x2c
   16c5c:	cmp	r5, #0
   16c60:	beq	16cb8 <g_strcmp0@plt+0x4148>
   16c64:	bl	12804 <gtk_image_get_type@plt>
   16c68:	mov	r1, r0
   16c6c:	mov	r0, r4
   16c70:	bl	125b8 <g_type_check_instance_cast@plt>
   16c74:	ldr	r2, [r4, #32]
   16c78:	ldr	r3, [r4, #44]	; 0x2c
   16c7c:	ldr	r1, [r3, r2, lsl #2]
   16c80:	bl	126fc <gtk_image_set_from_pixbuf@plt>
   16c84:	ldrd	r0, [r4, #32]
   16c88:	add	r0, r0, #1
   16c8c:	bl	1774c <g_strcmp0@plt+0x4bdc>
   16c90:	mov	r0, #1
   16c94:	str	r1, [r4, #32]
   16c98:	pop	{r4, r5, r6, pc}
   16c9c:	ldr	r2, [pc, #56]	; 16cdc <g_strcmp0@plt+0x416c>
   16ca0:	mov	r1, #128	; 0x80
   16ca4:	ldr	r0, [pc, #52]	; 16ce0 <g_strcmp0@plt+0x4170>
   16ca8:	bl	12618 <g_log@plt>
   16cac:	ldr	r5, [r4, #44]	; 0x2c
   16cb0:	cmp	r5, #0
   16cb4:	bne	16c64 <g_strcmp0@plt+0x40f4>
   16cb8:	ldr	r2, [pc, #36]	; 16ce4 <g_strcmp0@plt+0x4174>
   16cbc:	mov	r1, #16
   16cc0:	ldr	r0, [pc, #24]	; 16ce0 <g_strcmp0@plt+0x4170>
   16cc4:	bl	12618 <g_log@plt>
   16cc8:	str	r5, [r4, #28]
   16ccc:	mov	r0, r5
   16cd0:	pop	{r4, r5, r6, pc}
   16cd4:	andeq	sp, r2, r4, ror r2
   16cd8:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16cdc:	andeq	fp, r1, ip, ror sp
   16ce0:	andeq	r7, r1, r4, lsr #22
   16ce4:	andeq	fp, r1, ip, lsl #27
   16ce8:	push	{r4, lr}
   16cec:	mcr	15, 0, r0, cr7, cr10, {5}
   16cf0:	ldr	r4, [pc, #60]	; 16d34 <g_strcmp0@plt+0x41c4>
   16cf4:	ldr	r3, [r4, #12]
   16cf8:	mcr	15, 0, r0, cr7, cr10, {5}
   16cfc:	cmp	r3, #0
   16d00:	beq	16d0c <g_strcmp0@plt+0x419c>
   16d04:	ldr	r0, [r4, #12]
   16d08:	pop	{r4, pc}
   16d0c:	add	r0, r4, #12
   16d10:	bl	127b0 <g_once_init_enter@plt>
   16d14:	cmp	r0, #0
   16d18:	beq	16d04 <g_strcmp0@plt+0x4194>
   16d1c:	bl	16b78 <g_strcmp0@plt+0x4008>
   16d20:	mov	r1, r0
   16d24:	add	r0, r4, #12
   16d28:	bl	12a08 <g_once_init_leave@plt>
   16d2c:	ldr	r0, [r4, #12]
   16d30:	pop	{r4, pc}
   16d34:	andeq	sp, r2, r4, ror r2
   16d38:	push	{r4, r5, lr}
   16d3c:	mov	r4, r0
   16d40:	sub	sp, sp, #12
   16d44:	bl	16ce8 <g_strcmp0@plt+0x4178>
   16d48:	cmp	r4, #0
   16d4c:	beq	16dcc <g_strcmp0@plt+0x425c>
   16d50:	ldr	r3, [r4]
   16d54:	cmp	r3, #0
   16d58:	beq	16d68 <g_strcmp0@plt+0x41f8>
   16d5c:	ldr	r3, [r3]
   16d60:	cmp	r3, r0
   16d64:	beq	16d7c <g_strcmp0@plt+0x420c>
   16d68:	mov	r1, r0
   16d6c:	mov	r0, r4
   16d70:	bl	12918 <g_type_check_instance_is_a@plt>
   16d74:	cmp	r0, #0
   16d78:	beq	16dcc <g_strcmp0@plt+0x425c>
   16d7c:	mov	r5, #0
   16d80:	mov	r3, #200	; 0xc8
   16d84:	str	r3, [r4, #40]	; 0x28
   16d88:	str	r5, [r4, #44]	; 0x2c
   16d8c:	str	r5, [r4, #24]
   16d90:	str	r5, [r4, #28]
   16d94:	str	r5, [r4, #32]
   16d98:	str	r5, [r4, #36]	; 0x24
   16d9c:	bl	12588 <gtk_widget_get_type@plt>
   16da0:	mov	r1, r0
   16da4:	mov	r0, r4
   16da8:	bl	125b8 <g_type_check_instance_cast@plt>
   16dac:	str	r5, [sp, #4]
   16db0:	str	r5, [sp]
   16db4:	mov	r3, r4
   16db8:	ldr	r2, [pc, #36]	; 16de4 <g_strcmp0@plt+0x4274>
   16dbc:	ldr	r1, [pc, #36]	; 16de8 <g_strcmp0@plt+0x4278>
   16dc0:	bl	127a4 <g_signal_connect_data@plt>
   16dc4:	add	sp, sp, #12
   16dc8:	pop	{r4, r5, pc}
   16dcc:	ldr	r2, [pc, #24]	; 16dec <g_strcmp0@plt+0x427c>
   16dd0:	ldr	r1, [pc, #24]	; 16df0 <g_strcmp0@plt+0x4280>
   16dd4:	ldr	r0, [pc, #24]	; 16df4 <g_strcmp0@plt+0x4284>
   16dd8:	add	sp, sp, #12
   16ddc:	pop	{r4, r5, lr}
   16de0:	b	124f8 <g_return_if_fail_warning@plt>
   16de4:	andeq	r7, r1, r8, lsl #2
   16de8:	andeq	fp, r1, r0, asr #27
   16dec:	andeq	fp, r1, r4, lsr #27
   16df0:	andeq	fp, r1, r8, lsr #25
   16df4:	andeq	r7, r1, r4, lsr #22
   16df8:	push	{r4, r5, r6, lr}
   16dfc:	mov	r5, r0
   16e00:	bl	16ce8 <g_strcmp0@plt+0x4178>
   16e04:	cmp	r5, #0
   16e08:	beq	16e88 <g_strcmp0@plt+0x4318>
   16e0c:	ldr	r3, [r5]
   16e10:	cmp	r3, #0
   16e14:	beq	16e24 <g_strcmp0@plt+0x42b4>
   16e18:	ldr	r3, [r3]
   16e1c:	cmp	r3, r0
   16e20:	beq	16e38 <g_strcmp0@plt+0x42c8>
   16e24:	mov	r1, r0
   16e28:	mov	r0, r5
   16e2c:	bl	12918 <g_type_check_instance_is_a@plt>
   16e30:	cmp	r0, #0
   16e34:	beq	16e88 <g_strcmp0@plt+0x4318>
   16e38:	ldr	r6, [r5, #44]	; 0x2c
   16e3c:	cmp	r6, #0
   16e40:	beq	16ea0 <g_strcmp0@plt+0x4330>
   16e44:	ldr	r3, [r5, #36]	; 0x24
   16e48:	cmp	r3, #0
   16e4c:	movne	r4, #0
   16e50:	beq	16e70 <g_strcmp0@plt+0x4300>
   16e54:	ldr	r0, [r6, r4, lsl #2]
   16e58:	bl	129d8 <g_object_unref@plt>
   16e5c:	ldr	r3, [r5, #36]	; 0x24
   16e60:	add	r4, r4, #1
   16e64:	cmp	r4, r3
   16e68:	ldr	r6, [r5, #44]	; 0x2c
   16e6c:	bcc	16e54 <g_strcmp0@plt+0x42e4>
   16e70:	mov	r0, r6
   16e74:	bl	1287c <g_free@plt>
   16e78:	mov	r3, #0
   16e7c:	mov	r0, #1
   16e80:	str	r3, [r5, #44]	; 0x2c
   16e84:	pop	{r4, r5, r6, pc}
   16e88:	ldr	r2, [pc, #40]	; 16eb8 <g_strcmp0@plt+0x4348>
   16e8c:	ldr	r1, [pc, #40]	; 16ebc <g_strcmp0@plt+0x434c>
   16e90:	ldr	r0, [pc, #40]	; 16ec0 <g_strcmp0@plt+0x4350>
   16e94:	bl	124f8 <g_return_if_fail_warning@plt>
   16e98:	mov	r0, #0
   16e9c:	pop	{r4, r5, r6, pc}
   16ea0:	ldr	r2, [pc, #28]	; 16ec4 <g_strcmp0@plt+0x4354>
   16ea4:	mov	r1, #128	; 0x80
   16ea8:	ldr	r0, [pc, #16]	; 16ec0 <g_strcmp0@plt+0x4350>
   16eac:	bl	12618 <g_log@plt>
   16eb0:	mov	r0, r6
   16eb4:	pop	{r4, r5, r6, pc}
   16eb8:	andeq	fp, r1, r4, lsr #27
   16ebc:	andeq	fp, r1, r0, asr #25
   16ec0:	andeq	r7, r1, r4, lsr #22
   16ec4:	ldrdeq	fp, [r1], -r0
   16ec8:	push	{r4, r5, r6, lr}
   16ecc:	mov	r5, r0
   16ed0:	bl	16ce8 <g_strcmp0@plt+0x4178>
   16ed4:	mov	r1, r0
   16ed8:	mov	r0, r5
   16edc:	bl	125b8 <g_type_check_instance_cast@plt>
   16ee0:	mov	r4, r0
   16ee4:	ldr	r0, [r0, #28]
   16ee8:	cmp	r0, #0
   16eec:	bne	16f30 <g_strcmp0@plt+0x43c0>
   16ef0:	ldr	r0, [r4, #24]
   16ef4:	bl	1287c <g_free@plt>
   16ef8:	mov	r3, #0
   16efc:	str	r3, [r4, #24]
   16f00:	mov	r0, r4
   16f04:	bl	16df8 <g_strcmp0@plt+0x4288>
   16f08:	ldr	r3, [pc, #40]	; 16f38 <g_strcmp0@plt+0x43c8>
   16f0c:	ldr	r4, [r3, #4]
   16f10:	bl	12588 <gtk_widget_get_type@plt>
   16f14:	mov	r1, r0
   16f18:	mov	r0, r4
   16f1c:	bl	12b1c <g_type_check_class_cast@plt>
   16f20:	ldr	r3, [r0, #76]	; 0x4c
   16f24:	mov	r0, r5
   16f28:	pop	{r4, r5, r6, lr}
   16f2c:	bx	r3
   16f30:	bl	12b64 <g_source_remove@plt>
   16f34:	b	16ef0 <g_strcmp0@plt+0x4380>
   16f38:	andeq	sp, r2, r4, ror r2
   16f3c:	push	{r4, r5, r6, lr}
   16f40:	mov	r4, r0
   16f44:	mov	r5, r1
   16f48:	bl	16ce8 <g_strcmp0@plt+0x4178>
   16f4c:	cmp	r4, #0
   16f50:	beq	16fac <g_strcmp0@plt+0x443c>
   16f54:	ldr	r3, [r4]
   16f58:	cmp	r3, #0
   16f5c:	beq	16f6c <g_strcmp0@plt+0x43fc>
   16f60:	ldr	r3, [r3]
   16f64:	cmp	r3, r0
   16f68:	beq	16f80 <g_strcmp0@plt+0x4410>
   16f6c:	mov	r1, r0
   16f70:	mov	r0, r4
   16f74:	bl	12918 <g_type_check_instance_is_a@plt>
   16f78:	cmp	r0, #0
   16f7c:	beq	16fac <g_strcmp0@plt+0x443c>
   16f80:	ldr	r0, [pc, #100]	; 16fec <g_strcmp0@plt+0x447c>
   16f84:	mov	r3, r5
   16f88:	ldr	r2, [pc, #96]	; 16ff0 <g_strcmp0@plt+0x4480>
   16f8c:	mov	r1, #128	; 0x80
   16f90:	bl	12618 <g_log@plt>
   16f94:	ldr	r0, [r4, #28]
   16f98:	str	r5, [r4, #40]	; 0x28
   16f9c:	cmp	r0, #0
   16fa0:	bne	16fc4 <g_strcmp0@plt+0x4454>
   16fa4:	mov	r0, #1
   16fa8:	pop	{r4, r5, r6, pc}
   16fac:	ldr	r2, [pc, #64]	; 16ff4 <g_strcmp0@plt+0x4484>
   16fb0:	ldr	r1, [pc, #64]	; 16ff8 <g_strcmp0@plt+0x4488>
   16fb4:	ldr	r0, [pc, #48]	; 16fec <g_strcmp0@plt+0x447c>
   16fb8:	bl	124f8 <g_return_if_fail_warning@plt>
   16fbc:	mov	r0, #0
   16fc0:	pop	{r4, r5, r6, pc}
   16fc4:	bl	12b64 <g_source_remove@plt>
   16fc8:	mov	r2, r4
   16fcc:	ldr	r1, [pc, #40]	; 16ffc <g_strcmp0@plt+0x448c>
   16fd0:	ldr	r0, [r4, #40]	; 0x28
   16fd4:	bl	12534 <g_timeout_add@plt>
   16fd8:	ldr	r1, [pc, #32]	; 17000 <g_strcmp0@plt+0x4490>
   16fdc:	str	r0, [r4, #28]
   16fe0:	bl	12a44 <g_source_set_name_by_id@plt>
   16fe4:	mov	r0, #1
   16fe8:	pop	{r4, r5, r6, pc}
   16fec:	andeq	r7, r1, r4, lsr #22
   16ff0:	andeq	fp, r1, r0, ror #27
   16ff4:	andeq	fp, r1, r4, lsr #27
   16ff8:	andeq	fp, r1, r0, ror #25
   16ffc:	andeq	r6, r1, r8, lsr #24
   17000:	strdeq	fp, [r1], -r8
   17004:	push	{r4, r5, r6, lr}
   17008:	mov	r4, r0
   1700c:	mov	r5, r1
   17010:	bl	16ce8 <g_strcmp0@plt+0x4178>
   17014:	cmp	r4, #0
   17018:	beq	17074 <g_strcmp0@plt+0x4504>
   1701c:	ldr	r3, [r4]
   17020:	cmp	r3, #0
   17024:	beq	17034 <g_strcmp0@plt+0x44c4>
   17028:	ldr	r3, [r3]
   1702c:	cmp	r3, r0
   17030:	beq	17048 <g_strcmp0@plt+0x44d8>
   17034:	mov	r1, r0
   17038:	mov	r0, r4
   1703c:	bl	12918 <g_type_check_instance_is_a@plt>
   17040:	cmp	r0, #0
   17044:	beq	17074 <g_strcmp0@plt+0x4504>
   17048:	cmp	r5, #0
   1704c:	ldr	r0, [r4, #28]
   17050:	bne	1708c <g_strcmp0@plt+0x451c>
   17054:	cmp	r0, #0
   17058:	bne	170c4 <g_strcmp0@plt+0x4554>
   1705c:	ldr	r2, [pc, #136]	; 170ec <g_strcmp0@plt+0x457c>
   17060:	mov	r1, #128	; 0x80
   17064:	ldr	r0, [pc, #132]	; 170f0 <g_strcmp0@plt+0x4580>
   17068:	bl	12618 <g_log@plt>
   1706c:	mov	r0, r5
   17070:	pop	{r4, r5, r6, pc}
   17074:	ldr	r2, [pc, #120]	; 170f4 <g_strcmp0@plt+0x4584>
   17078:	ldr	r1, [pc, #120]	; 170f8 <g_strcmp0@plt+0x4588>
   1707c:	ldr	r0, [pc, #108]	; 170f0 <g_strcmp0@plt+0x4580>
   17080:	bl	124f8 <g_return_if_fail_warning@plt>
   17084:	mov	r0, #0
   17088:	pop	{r4, r5, r6, pc}
   1708c:	cmp	r0, #0
   17090:	bne	170d4 <g_strcmp0@plt+0x4564>
   17094:	mov	r2, r4
   17098:	str	r0, [r4, #32]
   1709c:	ldr	r1, [pc, #88]	; 170fc <g_strcmp0@plt+0x458c>
   170a0:	ldr	r0, [r4, #40]	; 0x28
   170a4:	bl	12534 <g_timeout_add@plt>
   170a8:	ldr	r1, [pc, #80]	; 17100 <g_strcmp0@plt+0x4590>
   170ac:	str	r0, [r4, #28]
   170b0:	bl	12a44 <g_source_set_name_by_id@plt>
   170b4:	mov	r0, r4
   170b8:	bl	16c28 <g_strcmp0@plt+0x40b8>
   170bc:	mov	r0, #1
   170c0:	pop	{r4, r5, r6, pc}
   170c4:	bl	12b64 <g_source_remove@plt>
   170c8:	str	r5, [r4, #28]
   170cc:	mov	r0, #1
   170d0:	pop	{r4, r5, r6, pc}
   170d4:	ldr	r2, [pc, #40]	; 17104 <g_strcmp0@plt+0x4594>
   170d8:	mov	r1, #128	; 0x80
   170dc:	ldr	r0, [pc, #12]	; 170f0 <g_strcmp0@plt+0x4580>
   170e0:	bl	12618 <g_log@plt>
   170e4:	mov	r0, #0
   170e8:	pop	{r4, r5, r6, pc}
   170ec:	andeq	fp, r1, r4, lsr #28
   170f0:	andeq	r7, r1, r4, lsr #22
   170f4:	andeq	fp, r1, r4, lsr #27
   170f8:	andeq	fp, r1, r4, lsl #26
   170fc:	andeq	r6, r1, r8, lsr #24
   17100:	andeq	fp, r1, r4, ror #28
   17104:	andeq	fp, r1, r4, asr #28
   17108:	push	{r4, r5, r6, lr}
   1710c:	sub	sp, sp, #8
   17110:	ldr	r4, [pc, #108]	; 17184 <g_strcmp0@plt+0x4614>
   17114:	mov	r6, r2
   17118:	mov	r3, #0
   1711c:	ldr	ip, [r4]
   17120:	mov	r2, sp
   17124:	ldr	r1, [pc, #92]	; 17188 <g_strcmp0@plt+0x4618>
   17128:	str	ip, [sp, #4]
   1712c:	bl	128d0 <g_object_get@plt>
   17130:	ldr	r5, [sp]
   17134:	cmp	r5, #0
   17138:	bne	17148 <g_strcmp0@plt+0x45d8>
   1713c:	ldr	r3, [r6, #28]
   17140:	cmp	r3, #0
   17144:	bne	17160 <g_strcmp0@plt+0x45f0>
   17148:	ldr	r2, [sp, #4]
   1714c:	ldr	r3, [r4]
   17150:	cmp	r2, r3
   17154:	bne	17180 <g_strcmp0@plt+0x4610>
   17158:	add	sp, sp, #8
   1715c:	pop	{r4, r5, r6, pc}
   17160:	ldr	r2, [pc, #36]	; 1718c <g_strcmp0@plt+0x461c>
   17164:	mov	r1, #128	; 0x80
   17168:	ldr	r0, [pc, #32]	; 17190 <g_strcmp0@plt+0x4620>
   1716c:	bl	12618 <g_log@plt>
   17170:	mov	r1, r5
   17174:	mov	r0, r6
   17178:	bl	17004 <g_strcmp0@plt+0x4494>
   1717c:	b	17148 <g_strcmp0@plt+0x45d8>
   17180:	bl	12858 <__stack_chk_fail@plt>
   17184:	andeq	ip, r2, r0, asr lr
   17188:	andeq	fp, r1, r8, asr #27
   1718c:	andeq	fp, r1, r4, lsl #29
   17190:	andeq	r7, r1, r4, lsr #22
   17194:	push	{r4, r5, r6, lr}
   17198:	mov	r5, r0
   1719c:	mov	r6, r1
   171a0:	mov	r4, r2
   171a4:	bl	16ce8 <g_strcmp0@plt+0x4178>
   171a8:	cmp	r5, #0
   171ac:	beq	17214 <g_strcmp0@plt+0x46a4>
   171b0:	ldr	r3, [r5]
   171b4:	cmp	r3, #0
   171b8:	beq	171c8 <g_strcmp0@plt+0x4658>
   171bc:	ldr	r3, [r3]
   171c0:	cmp	r3, r0
   171c4:	beq	171dc <g_strcmp0@plt+0x466c>
   171c8:	mov	r1, r0
   171cc:	mov	r0, r5
   171d0:	bl	12918 <g_type_check_instance_is_a@plt>
   171d4:	cmp	r0, #0
   171d8:	beq	17214 <g_strcmp0@plt+0x46a4>
   171dc:	cmp	r4, #0
   171e0:	beq	1722c <g_strcmp0@plt+0x46bc>
   171e4:	mov	r1, #0
   171e8:	mov	r0, r5
   171ec:	bl	17004 <g_strcmp0@plt+0x4494>
   171f0:	bl	12804 <gtk_image_get_type@plt>
   171f4:	mov	r1, r0
   171f8:	mov	r0, r5
   171fc:	bl	125b8 <g_type_check_instance_cast@plt>
   17200:	mov	r2, r6
   17204:	mov	r1, r4
   17208:	bl	12ab0 <gtk_image_set_from_icon_name@plt>
   1720c:	mov	r0, #1
   17210:	pop	{r4, r5, r6, pc}
   17214:	ldr	r2, [pc, #40]	; 17244 <g_strcmp0@plt+0x46d4>
   17218:	ldr	r1, [pc, #40]	; 17248 <g_strcmp0@plt+0x46d8>
   1721c:	ldr	r0, [pc, #40]	; 1724c <g_strcmp0@plt+0x46dc>
   17220:	bl	124f8 <g_return_if_fail_warning@plt>
   17224:	mov	r0, #0
   17228:	pop	{r4, r5, r6, pc}
   1722c:	ldr	r2, [pc, #28]	; 17250 <g_strcmp0@plt+0x46e0>
   17230:	ldr	r1, [pc, #16]	; 17248 <g_strcmp0@plt+0x46d8>
   17234:	ldr	r0, [pc, #16]	; 1724c <g_strcmp0@plt+0x46dc>
   17238:	bl	124f8 <g_return_if_fail_warning@plt>
   1723c:	mov	r0, r4
   17240:	pop	{r4, r5, r6, pc}
   17244:	andeq	fp, r1, r4, lsr #27
   17248:	andeq	fp, r1, r8, lsr #26
   1724c:	andeq	r7, r1, r4, lsr #22
   17250:	andeq	fp, r1, r4, lsr #29
   17254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17258:	sub	sp, sp, #36	; 0x24
   1725c:	ldr	fp, [pc, #704]	; 17524 <g_strcmp0@plt+0x49b4>
   17260:	mov	r7, r0
   17264:	mov	r5, r1
   17268:	ldr	r3, [fp]
   1726c:	mov	r4, r2
   17270:	str	r3, [sp, #28]
   17274:	bl	16ce8 <g_strcmp0@plt+0x4178>
   17278:	cmp	r7, #0
   1727c:	beq	17384 <g_strcmp0@plt+0x4814>
   17280:	ldr	r3, [r7]
   17284:	cmp	r3, #0
   17288:	beq	17298 <g_strcmp0@plt+0x4728>
   1728c:	ldr	r3, [r3]
   17290:	cmp	r3, r0
   17294:	beq	172ac <g_strcmp0@plt+0x473c>
   17298:	mov	r1, r0
   1729c:	mov	r0, r7
   172a0:	bl	12918 <g_type_check_instance_is_a@plt>
   172a4:	cmp	r0, #0
   172a8:	beq	17384 <g_strcmp0@plt+0x4814>
   172ac:	cmp	r4, #0
   172b0:	beq	173cc <g_strcmp0@plt+0x485c>
   172b4:	mov	r1, r4
   172b8:	ldr	r0, [r7, #24]
   172bc:	bl	12b70 <g_strcmp0@plt>
   172c0:	subs	r8, r0, #0
   172c4:	beq	173b4 <g_strcmp0@plt+0x4844>
   172c8:	mov	r1, #0
   172cc:	mov	r0, r7
   172d0:	bl	17004 <g_strcmp0@plt+0x4494>
   172d4:	ldr	r0, [r7, #24]
   172d8:	bl	1287c <g_free@plt>
   172dc:	mov	r0, r4
   172e0:	bl	126b4 <g_strdup@plt>
   172e4:	ldr	r3, [r7, #44]	; 0x2c
   172e8:	cmp	r3, #0
   172ec:	str	r0, [r7, #24]
   172f0:	beq	172fc <g_strcmp0@plt+0x478c>
   172f4:	mov	r0, r7
   172f8:	bl	16df8 <g_strcmp0@plt+0x4288>
   172fc:	mov	r3, r4
   17300:	ldr	r2, [pc, #544]	; 17528 <g_strcmp0@plt+0x49b8>
   17304:	mov	r1, #128	; 0x80
   17308:	ldr	r0, [pc, #540]	; 1752c <g_strcmp0@plt+0x49bc>
   1730c:	bl	12618 <g_log@plt>
   17310:	mov	r0, r5
   17314:	add	r2, sp, #24
   17318:	add	r1, sp, #20
   1731c:	bl	12a14 <gtk_icon_size_lookup@plt>
   17320:	subs	r8, r0, #0
   17324:	beq	173e4 <g_strcmp0@plt+0x4874>
   17328:	bl	12ae0 <gtk_icon_theme_get_default@plt>
   1732c:	mov	r3, #0
   17330:	str	r3, [sp]
   17334:	ldr	r2, [sp, #20]
   17338:	mov	r1, r4
   1733c:	bl	12720 <gtk_icon_theme_load_icon@plt>
   17340:	subs	r8, r0, #0
   17344:	beq	17508 <g_strcmp0@plt+0x4998>
   17348:	mov	r0, r4
   1734c:	ldr	r1, [pc, #476]	; 17530 <g_strcmp0@plt+0x49c0>
   17350:	bl	12b70 <g_strcmp0@plt>
   17354:	cmp	r0, #0
   17358:	beq	174cc <g_strcmp0@plt+0x495c>
   1735c:	ldr	r3, [sp, #20]
   17360:	mov	r0, r8
   17364:	cmp	r3, #0
   17368:	beq	17378 <g_strcmp0@plt+0x4808>
   1736c:	ldr	r3, [sp, #24]
   17370:	cmp	r3, #0
   17374:	bne	173f8 <g_strcmp0@plt+0x4888>
   17378:	bl	129d8 <g_object_unref@plt>
   1737c:	mov	r8, #0
   17380:	b	17398 <g_strcmp0@plt+0x4828>
   17384:	ldr	r2, [pc, #424]	; 17534 <g_strcmp0@plt+0x49c4>
   17388:	ldr	r1, [pc, #424]	; 17538 <g_strcmp0@plt+0x49c8>
   1738c:	ldr	r0, [pc, #408]	; 1752c <g_strcmp0@plt+0x49bc>
   17390:	bl	124f8 <g_return_if_fail_warning@plt>
   17394:	mov	r8, #0
   17398:	ldr	r2, [sp, #28]
   1739c:	ldr	r3, [fp]
   173a0:	mov	r0, r8
   173a4:	cmp	r2, r3
   173a8:	bne	17520 <g_strcmp0@plt+0x49b0>
   173ac:	add	sp, sp, #36	; 0x24
   173b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173b4:	mov	r3, r4
   173b8:	ldr	r2, [pc, #380]	; 1753c <g_strcmp0@plt+0x49cc>
   173bc:	mov	r1, #128	; 0x80
   173c0:	ldr	r0, [pc, #356]	; 1752c <g_strcmp0@plt+0x49bc>
   173c4:	bl	12618 <g_log@plt>
   173c8:	b	17398 <g_strcmp0@plt+0x4828>
   173cc:	ldr	r2, [pc, #364]	; 17540 <g_strcmp0@plt+0x49d0>
   173d0:	ldr	r1, [pc, #352]	; 17538 <g_strcmp0@plt+0x49c8>
   173d4:	ldr	r0, [pc, #336]	; 1752c <g_strcmp0@plt+0x49bc>
   173d8:	mov	r8, r4
   173dc:	bl	124f8 <g_return_if_fail_warning@plt>
   173e0:	b	17398 <g_strcmp0@plt+0x4828>
   173e4:	ldr	r2, [pc, #344]	; 17544 <g_strcmp0@plt+0x49d4>
   173e8:	mov	r1, #16
   173ec:	ldr	r0, [pc, #312]	; 1752c <g_strcmp0@plt+0x49bc>
   173f0:	bl	12618 <g_log@plt>
   173f4:	b	17398 <g_strcmp0@plt+0x4828>
   173f8:	bl	12750 <gdk_pixbuf_get_width@plt>
   173fc:	ldr	r1, [sp, #20]
   17400:	bl	1776c <g_strcmp0@plt+0x4bfc>
   17404:	mov	r4, #0
   17408:	mov	sl, r0
   1740c:	mov	r0, r8
   17410:	bl	12738 <gdk_pixbuf_get_height@plt>
   17414:	ldr	r1, [sp, #24]
   17418:	bl	1776c <g_strcmp0@plt+0x4bfc>
   1741c:	str	r4, [r7, #32]
   17420:	mov	r1, #4
   17424:	mov	r5, r0
   17428:	str	r0, [sp, #12]
   1742c:	mul	r0, r0, sl
   17430:	str	r0, [r7, #36]	; 0x24
   17434:	bl	124c8 <g_malloc_n@plt>
   17438:	cmp	r5, r4
   1743c:	strgt	r4, [sp, #8]
   17440:	movgt	r9, r4
   17444:	str	r0, [r7, #44]	; 0x2c
   17448:	ble	174b0 <g_strcmp0@plt+0x4940>
   1744c:	cmp	sl, #0
   17450:	ble	174a0 <g_strcmp0@plt+0x4930>
   17454:	ldr	r3, [sp, #8]
   17458:	mov	r4, #0
   1745c:	lsl	r5, r3, #2
   17460:	ldr	r2, [sp, #24]
   17464:	ldr	r3, [sp, #20]
   17468:	str	r2, [sp]
   1746c:	mov	r0, r8
   17470:	mul	r1, r4, r3
   17474:	mul	r2, r9, r2
   17478:	ldr	r6, [r7, #44]	; 0x2c
   1747c:	bl	12684 <gdk_pixbuf_new_subpixbuf@plt>
   17480:	add	r4, r4, #1
   17484:	cmp	sl, r4
   17488:	str	r0, [r6, r5]
   1748c:	add	r5, r5, #4
   17490:	bne	17460 <g_strcmp0@plt+0x48f0>
   17494:	ldr	r3, [sp, #8]
   17498:	add	r3, sl, r3
   1749c:	str	r3, [sp, #8]
   174a0:	ldr	r3, [sp, #12]
   174a4:	add	r9, r9, #1
   174a8:	cmp	r3, r9
   174ac:	bne	1744c <g_strcmp0@plt+0x48dc>
   174b0:	mov	r0, r8
   174b4:	bl	129d8 <g_object_unref@plt>
   174b8:	mov	r0, r7
   174bc:	mov	r1, #1
   174c0:	bl	17004 <g_strcmp0@plt+0x4494>
   174c4:	mov	r8, #1
   174c8:	b	17398 <g_strcmp0@plt+0x4828>
   174cc:	mov	r0, r8
   174d0:	bl	12750 <gdk_pixbuf_get_width@plt>
   174d4:	cmp	r0, #0
   174d8:	add	r3, r0, #7
   174dc:	movge	r3, r0
   174e0:	mov	r0, r8
   174e4:	asr	r3, r3, #3
   174e8:	str	r3, [sp, #20]
   174ec:	bl	12738 <gdk_pixbuf_get_height@plt>
   174f0:	add	r3, r0, #3
   174f4:	cmp	r0, #0
   174f8:	movlt	r0, r3
   174fc:	asr	r3, r0, #2
   17500:	str	r3, [sp, #24]
   17504:	b	1735c <g_strcmp0@plt+0x47ec>
   17508:	mov	r3, r4
   1750c:	ldr	r2, [pc, #52]	; 17548 <g_strcmp0@plt+0x49d8>
   17510:	mov	r1, #128	; 0x80
   17514:	ldr	r0, [pc, #16]	; 1752c <g_strcmp0@plt+0x49bc>
   17518:	bl	12618 <g_log@plt>
   1751c:	b	17398 <g_strcmp0@plt+0x4828>
   17520:	bl	12858 <__stack_chk_fail@plt>
   17524:	andeq	ip, r2, r0, asr lr
   17528:	andeq	fp, r1, r0, ror #29
   1752c:	andeq	r7, r1, r4, lsr #22
   17530:	andeq	r8, r1, ip, asr r0
   17534:	andeq	fp, r1, r4, lsr #27
   17538:	andeq	fp, r1, r8, asr #26
   1753c:			; <UNDEFINED> instruction: 0x0001beb4
   17540:	andeq	fp, r1, r4, lsr #29
   17544:	strdeq	fp, [r1], -r0
   17548:	andeq	fp, r1, ip, lsl #30
   1754c:	push	{r4, lr}
   17550:	bl	16ce8 <g_strcmp0@plt+0x4178>
   17554:	mov	r1, #0
   17558:	pop	{r4, lr}
   1755c:	b	124b0 <g_object_new@plt>
   17560:	subs	r2, r1, #1
   17564:	bxeq	lr
   17568:	bcc	17740 <g_strcmp0@plt+0x4bd0>
   1756c:	cmp	r0, r1
   17570:	bls	17724 <g_strcmp0@plt+0x4bb4>
   17574:	tst	r1, r2
   17578:	beq	17730 <g_strcmp0@plt+0x4bc0>
   1757c:	clz	r3, r0
   17580:	clz	r2, r1
   17584:	sub	r3, r2, r3
   17588:	rsbs	r3, r3, #31
   1758c:	addne	r3, r3, r3, lsl #1
   17590:	mov	r2, #0
   17594:	addne	pc, pc, r3, lsl #2
   17598:	nop			; (mov r0, r0)
   1759c:	cmp	r0, r1, lsl #31
   175a0:	adc	r2, r2, r2
   175a4:	subcs	r0, r0, r1, lsl #31
   175a8:	cmp	r0, r1, lsl #30
   175ac:	adc	r2, r2, r2
   175b0:	subcs	r0, r0, r1, lsl #30
   175b4:	cmp	r0, r1, lsl #29
   175b8:	adc	r2, r2, r2
   175bc:	subcs	r0, r0, r1, lsl #29
   175c0:	cmp	r0, r1, lsl #28
   175c4:	adc	r2, r2, r2
   175c8:	subcs	r0, r0, r1, lsl #28
   175cc:	cmp	r0, r1, lsl #27
   175d0:	adc	r2, r2, r2
   175d4:	subcs	r0, r0, r1, lsl #27
   175d8:	cmp	r0, r1, lsl #26
   175dc:	adc	r2, r2, r2
   175e0:	subcs	r0, r0, r1, lsl #26
   175e4:	cmp	r0, r1, lsl #25
   175e8:	adc	r2, r2, r2
   175ec:	subcs	r0, r0, r1, lsl #25
   175f0:	cmp	r0, r1, lsl #24
   175f4:	adc	r2, r2, r2
   175f8:	subcs	r0, r0, r1, lsl #24
   175fc:	cmp	r0, r1, lsl #23
   17600:	adc	r2, r2, r2
   17604:	subcs	r0, r0, r1, lsl #23
   17608:	cmp	r0, r1, lsl #22
   1760c:	adc	r2, r2, r2
   17610:	subcs	r0, r0, r1, lsl #22
   17614:	cmp	r0, r1, lsl #21
   17618:	adc	r2, r2, r2
   1761c:	subcs	r0, r0, r1, lsl #21
   17620:	cmp	r0, r1, lsl #20
   17624:	adc	r2, r2, r2
   17628:	subcs	r0, r0, r1, lsl #20
   1762c:	cmp	r0, r1, lsl #19
   17630:	adc	r2, r2, r2
   17634:	subcs	r0, r0, r1, lsl #19
   17638:	cmp	r0, r1, lsl #18
   1763c:	adc	r2, r2, r2
   17640:	subcs	r0, r0, r1, lsl #18
   17644:	cmp	r0, r1, lsl #17
   17648:	adc	r2, r2, r2
   1764c:	subcs	r0, r0, r1, lsl #17
   17650:	cmp	r0, r1, lsl #16
   17654:	adc	r2, r2, r2
   17658:	subcs	r0, r0, r1, lsl #16
   1765c:	cmp	r0, r1, lsl #15
   17660:	adc	r2, r2, r2
   17664:	subcs	r0, r0, r1, lsl #15
   17668:	cmp	r0, r1, lsl #14
   1766c:	adc	r2, r2, r2
   17670:	subcs	r0, r0, r1, lsl #14
   17674:	cmp	r0, r1, lsl #13
   17678:	adc	r2, r2, r2
   1767c:	subcs	r0, r0, r1, lsl #13
   17680:	cmp	r0, r1, lsl #12
   17684:	adc	r2, r2, r2
   17688:	subcs	r0, r0, r1, lsl #12
   1768c:	cmp	r0, r1, lsl #11
   17690:	adc	r2, r2, r2
   17694:	subcs	r0, r0, r1, lsl #11
   17698:	cmp	r0, r1, lsl #10
   1769c:	adc	r2, r2, r2
   176a0:	subcs	r0, r0, r1, lsl #10
   176a4:	cmp	r0, r1, lsl #9
   176a8:	adc	r2, r2, r2
   176ac:	subcs	r0, r0, r1, lsl #9
   176b0:	cmp	r0, r1, lsl #8
   176b4:	adc	r2, r2, r2
   176b8:	subcs	r0, r0, r1, lsl #8
   176bc:	cmp	r0, r1, lsl #7
   176c0:	adc	r2, r2, r2
   176c4:	subcs	r0, r0, r1, lsl #7
   176c8:	cmp	r0, r1, lsl #6
   176cc:	adc	r2, r2, r2
   176d0:	subcs	r0, r0, r1, lsl #6
   176d4:	cmp	r0, r1, lsl #5
   176d8:	adc	r2, r2, r2
   176dc:	subcs	r0, r0, r1, lsl #5
   176e0:	cmp	r0, r1, lsl #4
   176e4:	adc	r2, r2, r2
   176e8:	subcs	r0, r0, r1, lsl #4
   176ec:	cmp	r0, r1, lsl #3
   176f0:	adc	r2, r2, r2
   176f4:	subcs	r0, r0, r1, lsl #3
   176f8:	cmp	r0, r1, lsl #2
   176fc:	adc	r2, r2, r2
   17700:	subcs	r0, r0, r1, lsl #2
   17704:	cmp	r0, r1, lsl #1
   17708:	adc	r2, r2, r2
   1770c:	subcs	r0, r0, r1, lsl #1
   17710:	cmp	r0, r1
   17714:	adc	r2, r2, r2
   17718:	subcs	r0, r0, r1
   1771c:	mov	r0, r2
   17720:	bx	lr
   17724:	moveq	r0, #1
   17728:	movne	r0, #0
   1772c:	bx	lr
   17730:	clz	r2, r1
   17734:	rsb	r2, r2, #31
   17738:	lsr	r0, r0, r2
   1773c:	bx	lr
   17740:	cmp	r0, #0
   17744:	mvnne	r0, #0
   17748:	b	179ac <g_strcmp0@plt+0x4e3c>
   1774c:	cmp	r1, #0
   17750:	beq	17740 <g_strcmp0@plt+0x4bd0>
   17754:	push	{r0, r1, lr}
   17758:	bl	17560 <g_strcmp0@plt+0x49f0>
   1775c:	pop	{r1, r2, lr}
   17760:	mul	r3, r2, r0
   17764:	sub	r1, r1, r3
   17768:	bx	lr
   1776c:	cmp	r1, #0
   17770:	beq	1797c <g_strcmp0@plt+0x4e0c>
   17774:	eor	ip, r0, r1
   17778:	rsbmi	r1, r1, #0
   1777c:	subs	r2, r1, #1
   17780:	beq	17948 <g_strcmp0@plt+0x4dd8>
   17784:	movs	r3, r0
   17788:	rsbmi	r3, r0, #0
   1778c:	cmp	r3, r1
   17790:	bls	17954 <g_strcmp0@plt+0x4de4>
   17794:	tst	r1, r2
   17798:	beq	17964 <g_strcmp0@plt+0x4df4>
   1779c:	clz	r2, r3
   177a0:	clz	r0, r1
   177a4:	sub	r2, r0, r2
   177a8:	rsbs	r2, r2, #31
   177ac:	addne	r2, r2, r2, lsl #1
   177b0:	mov	r0, #0
   177b4:	addne	pc, pc, r2, lsl #2
   177b8:	nop			; (mov r0, r0)
   177bc:	cmp	r3, r1, lsl #31
   177c0:	adc	r0, r0, r0
   177c4:	subcs	r3, r3, r1, lsl #31
   177c8:	cmp	r3, r1, lsl #30
   177cc:	adc	r0, r0, r0
   177d0:	subcs	r3, r3, r1, lsl #30
   177d4:	cmp	r3, r1, lsl #29
   177d8:	adc	r0, r0, r0
   177dc:	subcs	r3, r3, r1, lsl #29
   177e0:	cmp	r3, r1, lsl #28
   177e4:	adc	r0, r0, r0
   177e8:	subcs	r3, r3, r1, lsl #28
   177ec:	cmp	r3, r1, lsl #27
   177f0:	adc	r0, r0, r0
   177f4:	subcs	r3, r3, r1, lsl #27
   177f8:	cmp	r3, r1, lsl #26
   177fc:	adc	r0, r0, r0
   17800:	subcs	r3, r3, r1, lsl #26
   17804:	cmp	r3, r1, lsl #25
   17808:	adc	r0, r0, r0
   1780c:	subcs	r3, r3, r1, lsl #25
   17810:	cmp	r3, r1, lsl #24
   17814:	adc	r0, r0, r0
   17818:	subcs	r3, r3, r1, lsl #24
   1781c:	cmp	r3, r1, lsl #23
   17820:	adc	r0, r0, r0
   17824:	subcs	r3, r3, r1, lsl #23
   17828:	cmp	r3, r1, lsl #22
   1782c:	adc	r0, r0, r0
   17830:	subcs	r3, r3, r1, lsl #22
   17834:	cmp	r3, r1, lsl #21
   17838:	adc	r0, r0, r0
   1783c:	subcs	r3, r3, r1, lsl #21
   17840:	cmp	r3, r1, lsl #20
   17844:	adc	r0, r0, r0
   17848:	subcs	r3, r3, r1, lsl #20
   1784c:	cmp	r3, r1, lsl #19
   17850:	adc	r0, r0, r0
   17854:	subcs	r3, r3, r1, lsl #19
   17858:	cmp	r3, r1, lsl #18
   1785c:	adc	r0, r0, r0
   17860:	subcs	r3, r3, r1, lsl #18
   17864:	cmp	r3, r1, lsl #17
   17868:	adc	r0, r0, r0
   1786c:	subcs	r3, r3, r1, lsl #17
   17870:	cmp	r3, r1, lsl #16
   17874:	adc	r0, r0, r0
   17878:	subcs	r3, r3, r1, lsl #16
   1787c:	cmp	r3, r1, lsl #15
   17880:	adc	r0, r0, r0
   17884:	subcs	r3, r3, r1, lsl #15
   17888:	cmp	r3, r1, lsl #14
   1788c:	adc	r0, r0, r0
   17890:	subcs	r3, r3, r1, lsl #14
   17894:	cmp	r3, r1, lsl #13
   17898:	adc	r0, r0, r0
   1789c:	subcs	r3, r3, r1, lsl #13
   178a0:	cmp	r3, r1, lsl #12
   178a4:	adc	r0, r0, r0
   178a8:	subcs	r3, r3, r1, lsl #12
   178ac:	cmp	r3, r1, lsl #11
   178b0:	adc	r0, r0, r0
   178b4:	subcs	r3, r3, r1, lsl #11
   178b8:	cmp	r3, r1, lsl #10
   178bc:	adc	r0, r0, r0
   178c0:	subcs	r3, r3, r1, lsl #10
   178c4:	cmp	r3, r1, lsl #9
   178c8:	adc	r0, r0, r0
   178cc:	subcs	r3, r3, r1, lsl #9
   178d0:	cmp	r3, r1, lsl #8
   178d4:	adc	r0, r0, r0
   178d8:	subcs	r3, r3, r1, lsl #8
   178dc:	cmp	r3, r1, lsl #7
   178e0:	adc	r0, r0, r0
   178e4:	subcs	r3, r3, r1, lsl #7
   178e8:	cmp	r3, r1, lsl #6
   178ec:	adc	r0, r0, r0
   178f0:	subcs	r3, r3, r1, lsl #6
   178f4:	cmp	r3, r1, lsl #5
   178f8:	adc	r0, r0, r0
   178fc:	subcs	r3, r3, r1, lsl #5
   17900:	cmp	r3, r1, lsl #4
   17904:	adc	r0, r0, r0
   17908:	subcs	r3, r3, r1, lsl #4
   1790c:	cmp	r3, r1, lsl #3
   17910:	adc	r0, r0, r0
   17914:	subcs	r3, r3, r1, lsl #3
   17918:	cmp	r3, r1, lsl #2
   1791c:	adc	r0, r0, r0
   17920:	subcs	r3, r3, r1, lsl #2
   17924:	cmp	r3, r1, lsl #1
   17928:	adc	r0, r0, r0
   1792c:	subcs	r3, r3, r1, lsl #1
   17930:	cmp	r3, r1
   17934:	adc	r0, r0, r0
   17938:	subcs	r3, r3, r1
   1793c:	cmp	ip, #0
   17940:	rsbmi	r0, r0, #0
   17944:	bx	lr
   17948:	teq	ip, r0
   1794c:	rsbmi	r0, r0, #0
   17950:	bx	lr
   17954:	movcc	r0, #0
   17958:	asreq	r0, ip, #31
   1795c:	orreq	r0, r0, #1
   17960:	bx	lr
   17964:	clz	r2, r1
   17968:	rsb	r2, r2, #31
   1796c:	cmp	ip, #0
   17970:	lsr	r0, r3, r2
   17974:	rsbmi	r0, r0, #0
   17978:	bx	lr
   1797c:	cmp	r0, #0
   17980:	mvngt	r0, #-2147483648	; 0x80000000
   17984:	movlt	r0, #-2147483648	; 0x80000000
   17988:	b	179ac <g_strcmp0@plt+0x4e3c>
   1798c:	cmp	r1, #0
   17990:	beq	1797c <g_strcmp0@plt+0x4e0c>
   17994:	push	{r0, r1, lr}
   17998:	bl	17774 <g_strcmp0@plt+0x4c04>
   1799c:	pop	{r1, r2, lr}
   179a0:	mul	r3, r2, r0
   179a4:	sub	r1, r1, r3
   179a8:	bx	lr
   179ac:	push	{r1, lr}
   179b0:	mov	r0, #8
   179b4:	bl	1290c <raise@plt>
   179b8:	pop	{r1, pc}
   179bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   179c0:	mov	r7, r0
   179c4:	ldr	r6, [pc, #72]	; 17a14 <g_strcmp0@plt+0x4ea4>
   179c8:	ldr	r5, [pc, #72]	; 17a18 <g_strcmp0@plt+0x4ea8>
   179cc:	add	r6, pc, r6
   179d0:	add	r5, pc, r5
   179d4:	sub	r6, r6, r5
   179d8:	mov	r8, r1
   179dc:	mov	r9, r2
   179e0:	bl	12484 <gtk_expander_get_expanded@plt-0x20>
   179e4:	asrs	r6, r6, #2
   179e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   179ec:	mov	r4, #0
   179f0:	add	r4, r4, #1
   179f4:	ldr	r3, [r5], #4
   179f8:	mov	r2, r9
   179fc:	mov	r1, r8
   17a00:	mov	r0, r7
   17a04:	blx	r3
   17a08:	cmp	r6, r4
   17a0c:	bne	179f0 <g_strcmp0@plt+0x4e80>
   17a10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17a14:	andeq	r5, r1, r8, ror r4
   17a18:	andeq	r5, r1, r0, ror r4
   17a1c:	bx	lr

Disassembly of section .fini:

00017a20 <.fini>:
   17a20:	push	{r3, lr}
   17a24:	pop	{r3, pc}
