
raspbian-preinstalled/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010cd8 <.init>:
   10cd8:	push	{r3, lr}
   10cdc:	bl	1153c <__assert_fail@plt+0x5e0>
   10ce0:	pop	{r3, pc}

Disassembly of section .plt:

00010ce4 <calloc@plt-0x14>:
   10ce4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ce8:	ldr	lr, [pc, #4]	; 10cf4 <calloc@plt-0x4>
   10cec:	add	lr, pc, lr
   10cf0:	ldr	pc, [lr, #8]!
   10cf4:	andeq	r6, r1, ip, lsl #6

00010cf8 <calloc@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #90112	; 0x16000
   10d00:	ldr	pc, [ip, #780]!	; 0x30c

00010d04 <fputs_unlocked@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #90112	; 0x16000
   10d0c:	ldr	pc, [ip, #772]!	; 0x304

00010d10 <raise@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #90112	; 0x16000
   10d18:	ldr	pc, [ip, #764]!	; 0x2fc

00010d1c <strcmp@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #90112	; 0x16000
   10d24:	ldr	pc, [ip, #756]!	; 0x2f4

00010d28 <posix_fadvise64@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #90112	; 0x16000
   10d30:	ldr	pc, [ip, #748]!	; 0x2ec

00010d34 <fflush@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #90112	; 0x16000
   10d3c:	ldr	pc, [ip, #740]!	; 0x2e4

00010d40 <free@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #90112	; 0x16000
   10d48:	ldr	pc, [ip, #732]!	; 0x2dc

00010d4c <strndup@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #90112	; 0x16000
   10d54:	ldr	pc, [ip, #724]!	; 0x2d4

00010d58 <_exit@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #90112	; 0x16000
   10d60:	ldr	pc, [ip, #716]!	; 0x2cc

00010d64 <memcpy@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #90112	; 0x16000
   10d6c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d70 <mbsinit@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #90112	; 0x16000
   10d78:	ldr	pc, [ip, #700]!	; 0x2bc

00010d7c <fwrite_unlocked@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #90112	; 0x16000
   10d84:	ldr	pc, [ip, #692]!	; 0x2b4

00010d88 <memcmp@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #90112	; 0x16000
   10d90:	ldr	pc, [ip, #684]!	; 0x2ac

00010d94 <dcgettext@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #90112	; 0x16000
   10d9c:	ldr	pc, [ip, #676]!	; 0x2a4

00010da0 <__stack_chk_fail@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #90112	; 0x16000
   10da8:	ldr	pc, [ip, #668]!	; 0x29c

00010dac <realloc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #90112	; 0x16000
   10db4:	ldr	pc, [ip, #660]!	; 0x294

00010db8 <textdomain@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #652]!	; 0x28c

00010dc4 <iswprint@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #644]!	; 0x284

00010dd0 <fwrite@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #636]!	; 0x27c

00010ddc <lseek64@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #628]!	; 0x274

00010de8 <__ctype_get_mb_cur_max@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #620]!	; 0x26c

00010df4 <__fpending@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #612]!	; 0x264

00010e00 <mbrtowc@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #604]!	; 0x25c

00010e0c <error@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #596]!	; 0x254

00010e18 <malloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #588]!	; 0x24c

00010e24 <__libc_start_main@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #580]!	; 0x244

00010e30 <__freading@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #572]!	; 0x23c

00010e3c <__gmon_start__@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #564]!	; 0x234

00010e48 <getopt_long@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #556]!	; 0x22c

00010e54 <__ctype_b_loc@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #548]!	; 0x224

00010e60 <exit@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #540]!	; 0x21c

00010e6c <strlen@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #532]!	; 0x214

00010e78 <__errno_location@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #524]!	; 0x20c

00010e84 <__cxa_atexit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #516]!	; 0x204

00010e90 <memset@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #508]!	; 0x1fc

00010e9c <__printf_chk@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #500]!	; 0x1f4

00010ea8 <fileno@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #492]!	; 0x1ec

00010eb4 <__fprintf_chk@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #484]!	; 0x1e4

00010ec0 <fclose@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #476]!	; 0x1dc

00010ecc <fseeko64@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #468]!	; 0x1d4

00010ed8 <__uflow@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ee4 <__overflow@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #452]!	; 0x1c4

00010ef0 <setlocale@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #444]!	; 0x1bc

00010efc <strrchr@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #436]!	; 0x1b4

00010f08 <nl_langinfo@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #428]!	; 0x1ac

00010f14 <clearerr_unlocked@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #420]!	; 0x1a4

00010f20 <fopen64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #412]!	; 0x19c

00010f2c <bindtextdomain@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #404]!	; 0x194

00010f38 <strncmp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #396]!	; 0x18c

00010f44 <abort@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #388]!	; 0x184

00010f50 <strspn@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #380]!	; 0x17c

00010f5c <__assert_fail@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #372]!	; 0x174

Disassembly of section .text:

00010f68 <.text>:
   10f68:	ldr	r3, [pc, #1200]	; 11420 <__assert_fail@plt+0x4c4>
   10f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f70:	sub	sp, sp, #44	; 0x2c
   10f74:	ldr	r3, [r3]
   10f78:	mov	r6, r0
   10f7c:	ldr	r0, [r1]
   10f80:	str	r3, [sp, #36]	; 0x24
   10f84:	mov	r4, r1
   10f88:	bl	124a0 <__assert_fail@plt+0x1544>
   10f8c:	ldr	r1, [pc, #1168]	; 11424 <__assert_fail@plt+0x4c8>
   10f90:	mov	r0, #6
   10f94:	bl	10ef0 <setlocale@plt>
   10f98:	mov	r9, #0
   10f9c:	ldr	r1, [pc, #1156]	; 11428 <__assert_fail@plt+0x4cc>
   10fa0:	ldr	r0, [pc, #1156]	; 1142c <__assert_fail@plt+0x4d0>
   10fa4:	ldr	r8, [pc, #1156]	; 11430 <__assert_fail@plt+0x4d4>
   10fa8:	ldr	r7, [pc, #1156]	; 11434 <__assert_fail@plt+0x4d8>
   10fac:	bl	10f2c <bindtextdomain@plt>
   10fb0:	mov	r5, r9
   10fb4:	ldr	r0, [pc, #1136]	; 1142c <__assert_fail@plt+0x4d0>
   10fb8:	bl	10db8 <textdomain@plt>
   10fbc:	ldr	r0, [pc, #1140]	; 11438 <__assert_fail@plt+0x4dc>
   10fc0:	bl	15608 <__assert_fail@plt+0x46ac>
   10fc4:	str	r9, [sp, #16]
   10fc8:	str	r5, [sp]
   10fcc:	mov	r3, r8
   10fd0:	mov	r2, r7
   10fd4:	mov	r1, r4
   10fd8:	mov	r0, r6
   10fdc:	bl	10e48 <getopt_long@plt>
   10fe0:	cmn	r0, #1
   10fe4:	beq	1111c <__assert_fail@plt+0x1c0>
   10fe8:	cmp	r0, #63	; 0x3f
   10fec:	beq	114bc <__assert_fail@plt+0x560>
   10ff0:	ble	11068 <__assert_fail@plt+0x10c>
   10ff4:	cmp	r0, #116	; 0x74
   10ff8:	beq	110c4 <__assert_fail@plt+0x168>
   10ffc:	cmp	r0, #256	; 0x100
   11000:	mov	r3, #1
   11004:	beq	110b0 <__assert_fail@plt+0x154>
   11008:	cmp	r0, #97	; 0x61
   1100c:	beq	110b8 <__assert_fail@plt+0x15c>
   11010:	ldr	r3, [sp, #16]
   11014:	cmp	r3, #0
   11018:	beq	11100 <__assert_fail@plt+0x1a4>
   1101c:	ldrd	r2, [sp, #8]
   11020:	add	fp, pc, #1008	; 0x3f0
   11024:	ldrd	sl, [fp]
   11028:	cmp	r3, fp
   1102c:	cmpeq	r2, sl
   11030:	bhi	114e4 <__assert_fail@plt+0x588>
   11034:	mov	r1, #10
   11038:	mov	fp, r3
   1103c:	umull	r2, r3, r2, r1
   11040:	mla	r3, r1, fp, r3
   11044:	sub	r0, r0, #48	; 0x30
   11048:	adds	sl, r2, r0
   1104c:	adc	fp, r3, r0, asr #31
   11050:	ldrd	r2, [sp, #8]
   11054:	cmp	fp, r3
   11058:	cmpeq	sl, r2
   1105c:	bcc	114e4 <__assert_fail@plt+0x588>
   11060:	strd	sl, [sp, #8]
   11064:	b	10fc8 <__assert_fail@plt+0x6c>
   11068:	cmn	r0, #2
   1106c:	beq	114b4 <__assert_fail@plt+0x558>
   11070:	cmp	r0, #44	; 0x2c
   11074:	beq	110e0 <__assert_fail@plt+0x184>
   11078:	cmn	r0, #3
   1107c:	bne	11010 <__assert_fail@plt+0xb4>
   11080:	ldr	r1, [pc, #948]	; 1143c <__assert_fail@plt+0x4e0>
   11084:	ldr	r3, [pc, #948]	; 11440 <__assert_fail@plt+0x4e4>
   11088:	ldr	r2, [pc, #948]	; 11444 <__assert_fail@plt+0x4e8>
   1108c:	str	r5, [sp, #4]
   11090:	ldr	r0, [r1]
   11094:	ldr	r3, [r3]
   11098:	ldr	r1, [pc, #936]	; 11448 <__assert_fail@plt+0x4ec>
   1109c:	str	r2, [sp]
   110a0:	ldr	r2, [pc, #932]	; 1144c <__assert_fail@plt+0x4f0>
   110a4:	bl	14b70 <__assert_fail@plt+0x3c14>
   110a8:	mov	r0, #0
   110ac:	bl	10e60 <exit@plt>
   110b0:	mov	r9, r3
   110b4:	b	10fc8 <__assert_fail@plt+0x6c>
   110b8:	ldr	r2, [pc, #912]	; 11450 <__assert_fail@plt+0x4f4>
   110bc:	strb	r3, [r2]
   110c0:	b	10fc8 <__assert_fail@plt+0x6c>
   110c4:	ldr	r2, [pc, #904]	; 11454 <__assert_fail@plt+0x4f8>
   110c8:	mov	r3, #1
   110cc:	ldr	r0, [r2]
   110d0:	ldr	r2, [pc, #888]	; 11450 <__assert_fail@plt+0x4f4>
   110d4:	strb	r3, [r2]
   110d8:	bl	11b38 <__assert_fail@plt+0xbdc>
   110dc:	b	10fc8 <__assert_fail@plt+0x6c>
   110e0:	ldr	r3, [sp, #16]
   110e4:	cmp	r3, #0
   110e8:	beq	10fc8 <__assert_fail@plt+0x6c>
   110ec:	ldrd	r0, [sp, #8]
   110f0:	bl	119e0 <__assert_fail@plt+0xa84>
   110f4:	mov	r3, #0
   110f8:	str	r3, [sp, #16]
   110fc:	b	10fc8 <__assert_fail@plt+0x6c>
   11100:	sub	r0, r0, #48	; 0x30
   11104:	mov	r2, r0
   11108:	asr	r3, r0, #31
   1110c:	strd	r2, [sp, #8]
   11110:	mov	r3, #1
   11114:	str	r3, [sp, #16]
   11118:	b	10fc8 <__assert_fail@plt+0x6c>
   1111c:	cmp	r9, #0
   11120:	ldr	sl, [sp, #16]
   11124:	ldrne	r3, [pc, #804]	; 11450 <__assert_fail@plt+0x4f4>
   11128:	strbne	r5, [r3]
   1112c:	cmp	sl, #0
   11130:	bne	114a8 <__assert_fail@plt+0x54c>
   11134:	bl	11e6c <__assert_fail@plt+0xf10>
   11138:	ldr	r3, [pc, #792]	; 11458 <__assert_fail@plt+0x4fc>
   1113c:	ldr	r0, [r3]
   11140:	cmp	r0, r6
   11144:	addlt	r0, r4, r0, lsl #2
   11148:	movge	r0, #0
   1114c:	bl	120e4 <__assert_fail@plt+0x1188>
   11150:	mov	r0, #0
   11154:	bl	1210c <__assert_fail@plt+0x11b0>
   11158:	subs	sl, r0, #0
   1115c:	beq	113ec <__assert_fail@plt+0x490>
   11160:	ldr	r3, [pc, #756]	; 1145c <__assert_fail@plt+0x500>
   11164:	ldr	fp, [pc, #720]	; 1143c <__assert_fail@plt+0x4e0>
   11168:	ldr	r0, [r3]
   1116c:	bl	14c74 <__assert_fail@plt+0x3d18>
   11170:	str	r0, [sp, #20]
   11174:	mov	r7, #0
   11178:	mov	r3, #1
   1117c:	str	r3, [sp, #8]
   11180:	str	r7, [sp, #16]
   11184:	mov	r6, r3
   11188:	mov	r8, #0
   1118c:	mov	r9, #0
   11190:	str	r7, [sp, #32]
   11194:	b	11248 <__assert_fail@plt+0x2ec>
   11198:	cmp	r4, #8
   1119c:	beq	11360 <__assert_fail@plt+0x404>
   111a0:	adds	r8, r8, #1
   111a4:	adc	r9, r9, #0
   111a8:	orrs	r3, r8, r9
   111ac:	beq	114c4 <__assert_fail@plt+0x568>
   111b0:	mov	r6, #1
   111b4:	cmp	r7, #0
   111b8:	str	r5, [sp, #8]
   111bc:	beq	11204 <__assert_fail@plt+0x2a8>
   111c0:	ldr	r3, [sp, #16]
   111c4:	mov	r1, #1
   111c8:	cmp	r7, #1
   111cc:	movls	r3, #0
   111d0:	andhi	r3, r3, #1
   111d4:	cmp	r3, #0
   111d8:	movne	r3, #9
   111dc:	ldrne	r2, [sp, #20]
   111e0:	ldr	r0, [sp, #20]
   111e4:	strbne	r3, [r2]
   111e8:	ldr	r3, [fp]
   111ec:	mov	r2, r7
   111f0:	bl	10d7c <fwrite_unlocked@plt>
   111f4:	cmp	r0, r7
   111f8:	bne	113b4 <__assert_fail@plt+0x458>
   111fc:	mov	r3, #0
   11200:	str	r3, [sp, #16]
   11204:	ldr	r3, [pc, #580]	; 11450 <__assert_fail@plt+0x4f4>
   11208:	cmp	r4, #0
   1120c:	ldrb	r3, [r3]
   11210:	orr	r3, r5, r3
   11214:	and	r6, r6, r3
   11218:	blt	113e4 <__assert_fail@plt+0x488>
   1121c:	mov	r7, #0
   11220:	ldr	r0, [fp]
   11224:	ldr	r3, [r0, #20]
   11228:	ldr	r2, [r0, #24]
   1122c:	cmp	r3, r2
   11230:	addcc	r2, r3, #1
   11234:	strcc	r2, [r0, #20]
   11238:	strbcc	r4, [r3]
   1123c:	bcs	113a4 <__assert_fail@plt+0x448>
   11240:	cmp	r4, #10
   11244:	beq	11174 <__assert_fail@plt+0x218>
   11248:	ldr	r3, [sl, #4]
   1124c:	ldr	r2, [sl, #8]
   11250:	cmp	r3, r2
   11254:	bcs	11314 <__assert_fail@plt+0x3b8>
   11258:	add	r2, r3, #1
   1125c:	str	r2, [sl, #4]
   11260:	ldrb	r4, [r3]
   11264:	cmp	r6, #0
   11268:	beq	11220 <__assert_fail@plt+0x2c4>
   1126c:	bl	10e54 <__ctype_b_loc@plt>
   11270:	lsl	r3, r4, #1
   11274:	ldr	r2, [r0]
   11278:	ldrh	r3, [r2, r3]
   1127c:	and	r3, r3, #1
   11280:	uxth	r2, r3
   11284:	cmp	r2, #0
   11288:	uxtb	r5, r3
   1128c:	beq	11198 <__assert_fail@plt+0x23c>
   11290:	add	r3, sp, #31
   11294:	add	r2, sp, #32
   11298:	mov	r0, r8
   1129c:	mov	r1, r9
   112a0:	bl	11fb0 <__assert_fail@plt+0x1054>
   112a4:	ldrb	r3, [sp, #31]
   112a8:	cmp	r3, #0
   112ac:	bne	113dc <__assert_fail@plt+0x480>
   112b0:	cmp	r9, r1
   112b4:	cmpeq	r8, r0
   112b8:	bhi	114f4 <__assert_fail@plt+0x598>
   112bc:	cmp	r4, #9
   112c0:	beq	11470 <__assert_fail@plt+0x514>
   112c4:	adds	r8, r8, #1
   112c8:	adc	r9, r9, #0
   112cc:	ldr	r3, [sp, #8]
   112d0:	cmp	r1, r9
   112d4:	cmpeq	r0, r8
   112d8:	eor	r6, r3, #1
   112dc:	orrne	r6, r6, #1
   112e0:	ands	r6, r6, #255	; 0xff
   112e4:	bne	11480 <__assert_fail@plt+0x524>
   112e8:	ldr	r2, [sp, #20]
   112ec:	mov	r0, r8
   112f0:	mov	r1, r9
   112f4:	mov	r3, #9
   112f8:	strb	r3, [r2]
   112fc:	mov	r8, r0
   11300:	mov	r9, r1
   11304:	ldr	r7, [sp, #16]
   11308:	mov	r6, #1
   1130c:	mov	r4, #9
   11310:	b	111b4 <__assert_fail@plt+0x258>
   11314:	mov	r0, sl
   11318:	bl	10ed8 <__uflow@plt>
   1131c:	subs	r4, r0, #0
   11320:	bge	11264 <__assert_fail@plt+0x308>
   11324:	mov	r0, sl
   11328:	bl	1210c <__assert_fail@plt+0x11b0>
   1132c:	subs	sl, r0, #0
   11330:	bne	11248 <__assert_fail@plt+0x2ec>
   11334:	cmp	r6, #0
   11338:	beq	113e4 <__assert_fail@plt+0x488>
   1133c:	bl	10e54 <__ctype_b_loc@plt>
   11340:	lsl	r3, r4, #1
   11344:	ldr	r2, [r0]
   11348:	ldrh	r3, [r2, r3]
   1134c:	and	r3, r3, #1
   11350:	cmp	r3, #0
   11354:	uxtb	r5, r3
   11358:	beq	111a0 <__assert_fail@plt+0x244>
   1135c:	b	11290 <__assert_fail@plt+0x334>
   11360:	orrs	r3, r8, r9
   11364:	movne	r1, #1
   11368:	ldr	r3, [sp, #32]
   1136c:	moveq	r1, #0
   11370:	subs	r8, r8, r1
   11374:	sbc	r9, r9, r2
   11378:	cmp	r3, #0
   1137c:	subne	r3, r3, #1
   11380:	cmp	r7, #0
   11384:	str	r3, [sp, #32]
   11388:	strne	r5, [sp, #8]
   1138c:	bne	111c0 <__assert_fail@plt+0x264>
   11390:	ldr	r3, [pc, #184]	; 11450 <__assert_fail@plt+0x4f4>
   11394:	str	r5, [sp, #8]
   11398:	ldrb	r6, [r3]
   1139c:	orr	r6, r5, r6
   113a0:	b	11220 <__assert_fail@plt+0x2c4>
   113a4:	uxtb	r1, r4
   113a8:	bl	10ee4 <__overflow@plt>
   113ac:	cmp	r0, #0
   113b0:	bge	11240 <__assert_fail@plt+0x2e4>
   113b4:	bl	10e78 <__errno_location@plt>
   113b8:	mov	r2, #5
   113bc:	ldr	r1, [pc, #156]	; 11460 <__assert_fail@plt+0x504>
   113c0:	ldr	r4, [r0]
   113c4:	mov	r0, #0
   113c8:	bl	10d94 <dcgettext@plt>
   113cc:	mov	r1, r4
   113d0:	mov	r2, r0
   113d4:	mov	r0, #1
   113d8:	bl	10e0c <error@plt>
   113dc:	mov	r6, #0
   113e0:	b	111b4 <__assert_fail@plt+0x258>
   113e4:	ldr	r0, [sp, #20]
   113e8:	bl	10d40 <free@plt>
   113ec:	bl	122e0 <__assert_fail@plt+0x1384>
   113f0:	ldr	r2, [pc, #40]	; 11420 <__assert_fail@plt+0x4c4>
   113f4:	ldr	r1, [sp, #36]	; 0x24
   113f8:	ldr	r3, [pc, #100]	; 11464 <__assert_fail@plt+0x508>
   113fc:	ldr	r2, [r2]
   11400:	cmp	r1, r2
   11404:	ldr	r0, [r3]
   11408:	bne	114f0 <__assert_fail@plt+0x594>
   1140c:	add	sp, sp, #44	; 0x2c
   11410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11414:	nop			; (mov r0, r0)
   11418:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1141c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11420:	andeq	r6, r2, r8, lsl #30
   11424:	andeq	r5, r1, r0, asr #17
   11428:	andeq	r5, r1, ip, lsl sl
   1142c:	andeq	r5, r1, r0, ror r9
   11430:	andeq	r5, r1, r4, ror #12
   11434:	andeq	r5, r1, ip, asr sl
   11438:	muleq	r1, r0, r3
   1143c:	andeq	r7, r2, r4, asr r1
   11440:	strdeq	r7, [r2], -r0
   11444:	andeq	r5, r1, r0, lsr sl
   11448:	andeq	r5, r1, r4, asr #13
   1144c:	andeq	r5, r1, ip, ror #18
   11450:	muleq	r2, r8, r1
   11454:	andeq	r7, r2, r8, asr r1
   11458:	andeq	r7, r2, r0, asr #2
   1145c:	ldrdeq	r7, [r2], -r8
   11460:	andeq	r5, r1, r4, lsl #21
   11464:	muleq	r2, r4, r1
   11468:	andeq	r5, r1, r0, asr #20
   1146c:	andeq	r5, r1, ip, ror #20
   11470:	cmp	r7, #0
   11474:	ldrne	r3, [sp, #20]
   11478:	strbne	r4, [r3]
   1147c:	b	112fc <__assert_fail@plt+0x3a0>
   11480:	cmp	r1, r9
   11484:	ldr	r3, [sp, #16]
   11488:	cmpeq	r0, r8
   1148c:	moveq	r3, r6
   11490:	str	r3, [sp, #16]
   11494:	ldr	r3, [sp, #20]
   11498:	str	r6, [sp, #8]
   1149c:	strb	r4, [r3, r7]
   114a0:	add	r7, r7, #1
   114a4:	b	11240 <__assert_fail@plt+0x2e4>
   114a8:	ldrd	r0, [sp, #8]
   114ac:	bl	119e0 <__assert_fail@plt+0xa84>
   114b0:	b	11134 <__assert_fail@plt+0x1d8>
   114b4:	mov	r0, #0
   114b8:	bl	115f0 <__assert_fail@plt+0x694>
   114bc:	mov	r0, #1
   114c0:	bl	115f0 <__assert_fail@plt+0x694>
   114c4:	ldr	r1, [pc, #-96]	; 1146c <__assert_fail@plt+0x510>
   114c8:	mov	r2, #5
   114cc:	mov	r0, #0
   114d0:	bl	10d94 <dcgettext@plt>
   114d4:	mov	r1, #0
   114d8:	mov	r2, r0
   114dc:	mov	r0, #1
   114e0:	bl	10e0c <error@plt>
   114e4:	mov	r2, #5
   114e8:	ldr	r1, [pc, #-136]	; 11468 <__assert_fail@plt+0x50c>
   114ec:	b	114cc <__assert_fail@plt+0x570>
   114f0:	bl	10da0 <__stack_chk_fail@plt>
   114f4:	mov	r2, #5
   114f8:	ldr	r1, [pc, #-148]	; 1146c <__assert_fail@plt+0x510>
   114fc:	b	114cc <__assert_fail@plt+0x570>
   11500:	mov	fp, #0
   11504:	mov	lr, #0
   11508:	pop	{r1}		; (ldr r1, [sp], #4)
   1150c:	mov	r2, sp
   11510:	push	{r2}		; (str r2, [sp, #-4]!)
   11514:	push	{r0}		; (str r0, [sp, #-4]!)
   11518:	ldr	ip, [pc, #16]	; 11530 <__assert_fail@plt+0x5d4>
   1151c:	push	{ip}		; (str ip, [sp, #-4]!)
   11520:	ldr	r0, [pc, #12]	; 11534 <__assert_fail@plt+0x5d8>
   11524:	ldr	r3, [pc, #12]	; 11538 <__assert_fail@plt+0x5dc>
   11528:	bl	10e24 <__libc_start_main@plt>
   1152c:	bl	10f44 <abort@plt>
   11530:	andeq	r5, r1, r4, lsl #12
   11534:	andeq	r0, r1, r8, ror #30
   11538:	andeq	r5, r1, r4, lsr #11
   1153c:	ldr	r3, [pc, #20]	; 11558 <__assert_fail@plt+0x5fc>
   11540:	ldr	r2, [pc, #20]	; 1155c <__assert_fail@plt+0x600>
   11544:	add	r3, pc, r3
   11548:	ldr	r2, [r3, r2]
   1154c:	cmp	r2, #0
   11550:	bxeq	lr
   11554:	b	10e3c <__gmon_start__@plt>
   11558:			; <UNDEFINED> instruction: 0x00015ab4
   1155c:	ldrdeq	r0, [r0], -ip
   11560:	ldr	r0, [pc, #24]	; 11580 <__assert_fail@plt+0x624>
   11564:	ldr	r3, [pc, #24]	; 11584 <__assert_fail@plt+0x628>
   11568:	cmp	r3, r0
   1156c:	bxeq	lr
   11570:	ldr	r3, [pc, #16]	; 11588 <__assert_fail@plt+0x62c>
   11574:	cmp	r3, #0
   11578:	bxeq	lr
   1157c:	bx	r3
   11580:	andeq	r7, r2, r8, lsr r1
   11584:	andeq	r7, r2, r8, lsr r1
   11588:	andeq	r0, r0, r0
   1158c:	ldr	r0, [pc, #36]	; 115b8 <__assert_fail@plt+0x65c>
   11590:	ldr	r1, [pc, #36]	; 115bc <__assert_fail@plt+0x660>
   11594:	sub	r1, r1, r0
   11598:	asr	r1, r1, #2
   1159c:	add	r1, r1, r1, lsr #31
   115a0:	asrs	r1, r1, #1
   115a4:	bxeq	lr
   115a8:	ldr	r3, [pc, #16]	; 115c0 <__assert_fail@plt+0x664>
   115ac:	cmp	r3, #0
   115b0:	bxeq	lr
   115b4:	bx	r3
   115b8:	andeq	r7, r2, r8, lsr r1
   115bc:	andeq	r7, r2, r8, lsr r1
   115c0:	andeq	r0, r0, r0
   115c4:	push	{r4, lr}
   115c8:	ldr	r4, [pc, #24]	; 115e8 <__assert_fail@plt+0x68c>
   115cc:	ldrb	r3, [r4]
   115d0:	cmp	r3, #0
   115d4:	popne	{r4, pc}
   115d8:	bl	11560 <__assert_fail@plt+0x604>
   115dc:	mov	r3, #1
   115e0:	strb	r3, [r4]
   115e4:	pop	{r4, pc}
   115e8:	andeq	r7, r2, ip, asr r1
   115ec:	b	1158c <__assert_fail@plt+0x630>
   115f0:	ldr	r3, [pc, #724]	; 118cc <__assert_fail@plt+0x970>
   115f4:	push	{r7, lr}
   115f8:	sub	sp, sp, #64	; 0x40
   115fc:	ldr	r3, [r3]
   11600:	subs	r4, r0, #0
   11604:	str	r3, [sp, #60]	; 0x3c
   11608:	beq	11644 <__assert_fail@plt+0x6e8>
   1160c:	ldr	r3, [pc, #700]	; 118d0 <__assert_fail@plt+0x974>
   11610:	mov	r2, #5
   11614:	ldr	r1, [pc, #696]	; 118d4 <__assert_fail@plt+0x978>
   11618:	mov	r0, #0
   1161c:	ldr	r5, [r3]
   11620:	bl	10d94 <dcgettext@plt>
   11624:	ldr	r3, [pc, #684]	; 118d8 <__assert_fail@plt+0x97c>
   11628:	mov	r1, #1
   1162c:	ldr	r3, [r3]
   11630:	mov	r2, r0
   11634:	mov	r0, r5
   11638:	bl	10eb4 <__fprintf_chk@plt>
   1163c:	mov	r0, r4
   11640:	bl	10e60 <exit@plt>
   11644:	mov	r2, #5
   11648:	ldr	r1, [pc, #652]	; 118dc <__assert_fail@plt+0x980>
   1164c:	bl	10d94 <dcgettext@plt>
   11650:	ldr	r3, [pc, #640]	; 118d8 <__assert_fail@plt+0x97c>
   11654:	ldr	r5, [pc, #644]	; 118e0 <__assert_fail@plt+0x984>
   11658:	ldr	r2, [r3]
   1165c:	mov	r1, r0
   11660:	mov	r0, #1
   11664:	bl	10e9c <__printf_chk@plt>
   11668:	mov	r2, #5
   1166c:	ldr	r1, [pc, #624]	; 118e4 <__assert_fail@plt+0x988>
   11670:	mov	r0, r4
   11674:	bl	10d94 <dcgettext@plt>
   11678:	ldr	r1, [r5]
   1167c:	bl	10d04 <fputs_unlocked@plt>
   11680:	mov	r2, #5
   11684:	ldr	r1, [pc, #604]	; 118e8 <__assert_fail@plt+0x98c>
   11688:	mov	r0, r4
   1168c:	bl	10d94 <dcgettext@plt>
   11690:	ldr	r1, [r5]
   11694:	bl	10d04 <fputs_unlocked@plt>
   11698:	mov	r2, #5
   1169c:	ldr	r1, [pc, #584]	; 118ec <__assert_fail@plt+0x990>
   116a0:	mov	r0, r4
   116a4:	bl	10d94 <dcgettext@plt>
   116a8:	ldr	r1, [r5]
   116ac:	bl	10d04 <fputs_unlocked@plt>
   116b0:	mov	r2, #5
   116b4:	ldr	r1, [pc, #564]	; 118f0 <__assert_fail@plt+0x994>
   116b8:	mov	r0, r4
   116bc:	bl	10d94 <dcgettext@plt>
   116c0:	ldr	r1, [r5]
   116c4:	bl	10d04 <fputs_unlocked@plt>
   116c8:	bl	12328 <__assert_fail@plt+0x13cc>
   116cc:	mov	r2, #5
   116d0:	ldr	r1, [pc, #540]	; 118f4 <__assert_fail@plt+0x998>
   116d4:	mov	r0, r4
   116d8:	bl	10d94 <dcgettext@plt>
   116dc:	ldr	r1, [r5]
   116e0:	bl	10d04 <fputs_unlocked@plt>
   116e4:	mov	r2, #5
   116e8:	ldr	r1, [pc, #520]	; 118f8 <__assert_fail@plt+0x99c>
   116ec:	mov	r0, r4
   116f0:	bl	10d94 <dcgettext@plt>
   116f4:	ldr	r1, [r5]
   116f8:	bl	10d04 <fputs_unlocked@plt>
   116fc:	ldr	lr, [pc, #504]	; 118fc <__assert_fail@plt+0x9a0>
   11700:	add	ip, sp, #4
   11704:	ldm	lr!, {r0, r1, r2, r3}
   11708:	stmia	ip!, {r0, r1, r2, r3}
   1170c:	ldm	lr!, {r0, r1, r2, r3}
   11710:	ldr	r6, [sp, #4]
   11714:	stmia	ip!, {r0, r1, r2, r3}
   11718:	cmp	r6, #0
   1171c:	ldm	lr!, {r0, r1, r2, r3}
   11720:	addeq	r5, sp, #4
   11724:	stmia	ip!, {r0, r1, r2, r3}
   11728:	ldm	lr, {r0, r1}
   1172c:	stm	ip, {r0, r1}
   11730:	beq	11760 <__assert_fail@plt+0x804>
   11734:	ldr	r7, [pc, #452]	; 11900 <__assert_fail@plt+0x9a4>
   11738:	add	r5, sp, #4
   1173c:	b	1174c <__assert_fail@plt+0x7f0>
   11740:	ldr	r6, [r5, #8]!
   11744:	cmp	r6, #0
   11748:	beq	11760 <__assert_fail@plt+0x804>
   1174c:	mov	r1, r6
   11750:	mov	r0, r7
   11754:	bl	10d1c <strcmp@plt>
   11758:	cmp	r0, #0
   1175c:	bne	11740 <__assert_fail@plt+0x7e4>
   11760:	ldr	r5, [r5, #4]
   11764:	mov	r2, #5
   11768:	cmp	r5, #0
   1176c:	ldr	r1, [pc, #400]	; 11904 <__assert_fail@plt+0x9a8>
   11770:	beq	11818 <__assert_fail@plt+0x8bc>
   11774:	mov	r0, #0
   11778:	bl	10d94 <dcgettext@plt>
   1177c:	ldr	r3, [pc, #388]	; 11908 <__assert_fail@plt+0x9ac>
   11780:	ldr	r2, [pc, #388]	; 1190c <__assert_fail@plt+0x9b0>
   11784:	mov	r1, r0
   11788:	mov	r0, #1
   1178c:	bl	10e9c <__printf_chk@plt>
   11790:	mov	r1, #0
   11794:	mov	r0, #5
   11798:	bl	10ef0 <setlocale@plt>
   1179c:	cmp	r0, #0
   117a0:	ldreq	r6, [pc, #344]	; 11900 <__assert_fail@plt+0x9a4>
   117a4:	beq	117c0 <__assert_fail@plt+0x864>
   117a8:	mov	r2, #3
   117ac:	ldr	r1, [pc, #348]	; 11910 <__assert_fail@plt+0x9b4>
   117b0:	bl	10f38 <strncmp@plt>
   117b4:	ldr	r6, [pc, #324]	; 11900 <__assert_fail@plt+0x9a4>
   117b8:	cmp	r0, #0
   117bc:	bne	118a8 <__assert_fail@plt+0x94c>
   117c0:	mov	r2, #5
   117c4:	ldr	r1, [pc, #328]	; 11914 <__assert_fail@plt+0x9b8>
   117c8:	mov	r0, #0
   117cc:	bl	10d94 <dcgettext@plt>
   117d0:	ldr	r3, [pc, #296]	; 11900 <__assert_fail@plt+0x9a4>
   117d4:	ldr	r2, [pc, #300]	; 11908 <__assert_fail@plt+0x9ac>
   117d8:	mov	r1, r0
   117dc:	mov	r0, #1
   117e0:	bl	10e9c <__printf_chk@plt>
   117e4:	mov	r2, #5
   117e8:	ldr	r1, [pc, #296]	; 11918 <__assert_fail@plt+0x9bc>
   117ec:	mov	r0, #0
   117f0:	bl	10d94 <dcgettext@plt>
   117f4:	ldr	r2, [pc, #288]	; 1191c <__assert_fail@plt+0x9c0>
   117f8:	cmp	r5, r6
   117fc:	ldr	r3, [pc, #284]	; 11920 <__assert_fail@plt+0x9c4>
   11800:	movne	r3, r2
   11804:	mov	r1, r0
   11808:	mov	r2, r5
   1180c:	mov	r0, #1
   11810:	bl	10e9c <__printf_chk@plt>
   11814:	b	1163c <__assert_fail@plt+0x6e0>
   11818:	mov	r0, r5
   1181c:	bl	10d94 <dcgettext@plt>
   11820:	ldr	r3, [pc, #224]	; 11908 <__assert_fail@plt+0x9ac>
   11824:	ldr	r2, [pc, #224]	; 1190c <__assert_fail@plt+0x9b0>
   11828:	mov	r1, r0
   1182c:	mov	r0, #1
   11830:	bl	10e9c <__printf_chk@plt>
   11834:	mov	r1, r5
   11838:	mov	r0, #5
   1183c:	bl	10ef0 <setlocale@plt>
   11840:	cmp	r0, #0
   11844:	beq	1185c <__assert_fail@plt+0x900>
   11848:	mov	r2, #3
   1184c:	ldr	r1, [pc, #188]	; 11910 <__assert_fail@plt+0x9b4>
   11850:	bl	10f38 <strncmp@plt>
   11854:	cmp	r0, #0
   11858:	bne	118a0 <__assert_fail@plt+0x944>
   1185c:	mov	r2, #5
   11860:	ldr	r1, [pc, #172]	; 11914 <__assert_fail@plt+0x9b8>
   11864:	mov	r0, #0
   11868:	bl	10d94 <dcgettext@plt>
   1186c:	ldr	r3, [pc, #140]	; 11900 <__assert_fail@plt+0x9a4>
   11870:	ldr	r2, [pc, #144]	; 11908 <__assert_fail@plt+0x9ac>
   11874:	mov	r5, r3
   11878:	mov	r1, r0
   1187c:	mov	r0, #1
   11880:	bl	10e9c <__printf_chk@plt>
   11884:	ldr	r1, [pc, #140]	; 11918 <__assert_fail@plt+0x9bc>
   11888:	mov	r2, #5
   1188c:	mov	r0, #0
   11890:	bl	10d94 <dcgettext@plt>
   11894:	ldr	r3, [pc, #132]	; 11920 <__assert_fail@plt+0x9c4>
   11898:	mov	r1, r0
   1189c:	b	11808 <__assert_fail@plt+0x8ac>
   118a0:	ldr	r6, [pc, #88]	; 11900 <__assert_fail@plt+0x9a4>
   118a4:	mov	r5, r6
   118a8:	mov	r2, #5
   118ac:	ldr	r1, [pc, #112]	; 11924 <__assert_fail@plt+0x9c8>
   118b0:	mov	r0, #0
   118b4:	bl	10d94 <dcgettext@plt>
   118b8:	ldr	r2, [pc, #64]	; 11900 <__assert_fail@plt+0x9a4>
   118bc:	mov	r1, r0
   118c0:	mov	r0, #1
   118c4:	bl	10e9c <__printf_chk@plt>
   118c8:	b	117c0 <__assert_fail@plt+0x864>
   118cc:	andeq	r6, r2, r8, lsl #30
   118d0:	andeq	r7, r2, r8, asr #2
   118d4:	ldrdeq	r5, [r1], -r0
   118d8:	andeq	r7, r2, r4, lsr #3
   118dc:	strdeq	r5, [r1], -r8
   118e0:	andeq	r7, r2, r4, asr r1
   118e4:	andeq	r5, r1, ip, lsl r7
   118e8:	andeq	r5, r1, r0, ror #14
   118ec:	muleq	r1, r8, r7
   118f0:	andeq	r5, r1, r4, ror #15
   118f4:	andeq	r5, r1, r4, asr #17
   118f8:	strdeq	r5, [r1], -r4
   118fc:	andeq	r5, r1, ip, lsr #12
   11900:	andeq	r5, r1, r4, asr #13
   11904:	andeq	r5, r1, ip, lsr #18
   11908:	andeq	r5, r1, r4, asr #18
   1190c:	andeq	r5, r1, ip, ror #18
   11910:	andeq	r5, r1, ip, ror r9
   11914:	andeq	r5, r1, r8, asr #19
   11918:	andeq	r5, r1, r8, ror #19
   1191c:	andeq	r5, r1, r0, asr #17
   11920:	muleq	r1, r8, sl
   11924:	andeq	r5, r1, r0, lsl #19
   11928:	push	{r4, r6, r7, lr}
   1192c:	mov	r6, r0
   11930:	ldr	r4, [pc, #68]	; 1197c <__assert_fail@plt+0xa20>
   11934:	mov	r7, r1
   11938:	ldrd	r2, [r4]
   1193c:	orrs	r3, r2, r3
   11940:	moveq	r0, #1
   11944:	bne	11950 <__assert_fail@plt+0x9f4>
   11948:	strd	r6, [r4]
   1194c:	pop	{r4, r6, r7, pc}
   11950:	mov	r2, #5
   11954:	ldr	r1, [pc, #36]	; 11980 <__assert_fail@plt+0xa24>
   11958:	mov	r0, #0
   1195c:	bl	10d94 <dcgettext@plt>
   11960:	mov	r1, #0
   11964:	mov	r2, r0
   11968:	mov	r0, r1
   1196c:	bl	10e0c <error@plt>
   11970:	mov	r0, #0
   11974:	strd	r6, [r4]
   11978:	pop	{r4, r6, r7, pc}
   1197c:	andeq	r7, r2, r0, ror #2
   11980:	andeq	r5, r1, r0, lsr fp
   11984:	push	{r4, r6, r7, lr}
   11988:	mov	r6, r0
   1198c:	ldr	r4, [pc, #68]	; 119d8 <__assert_fail@plt+0xa7c>
   11990:	mov	r7, r1
   11994:	ldrd	r2, [r4, #8]
   11998:	orrs	r3, r2, r3
   1199c:	moveq	r0, #1
   119a0:	bne	119ac <__assert_fail@plt+0xa50>
   119a4:	strd	r6, [r4, #8]
   119a8:	pop	{r4, r6, r7, pc}
   119ac:	mov	r2, #5
   119b0:	ldr	r1, [pc, #36]	; 119dc <__assert_fail@plt+0xa80>
   119b4:	mov	r0, #0
   119b8:	bl	10d94 <dcgettext@plt>
   119bc:	mov	r1, #0
   119c0:	mov	r2, r0
   119c4:	mov	r0, r1
   119c8:	bl	10e0c <error@plt>
   119cc:	mov	r0, #0
   119d0:	strd	r6, [r4, #8]
   119d4:	pop	{r4, r6, r7, pc}
   119d8:	andeq	r7, r2, r0, ror #2
   119dc:	andeq	r5, r1, r0, ror #22
   119e0:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   119e4:	mov	r6, r0
   119e8:	ldr	r4, [pc, #312]	; 11b28 <__assert_fail@plt+0xbcc>
   119ec:	mov	r7, r1
   119f0:	ldr	r3, [r4, #16]
   119f4:	ldr	r0, [r4, #20]
   119f8:	cmp	r3, #0
   119fc:	ldr	ip, [r4, #24]
   11a00:	beq	11a38 <__assert_fail@plt+0xadc>
   11a04:	sub	r2, r3, #-536870911	; 0xe0000001
   11a08:	lsl	r2, r2, #3
   11a0c:	ldrd	sl, [r0, r2]
   11a10:	cmp	fp, r1
   11a14:	cmpeq	sl, r6
   11a18:	bls	11b1c <__assert_fail@plt+0xbc0>
   11a1c:	cmp	r3, ip
   11a20:	beq	11a8c <__assert_fail@plt+0xb30>
   11a24:	add	r0, r0, r2
   11a28:	add	r3, r3, #1
   11a2c:	strd	r6, [r0, #8]
   11a30:	str	r3, [r4, #16]
   11a34:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   11a38:	mov	r8, r6
   11a3c:	mov	r9, r1
   11a40:	cmp	r3, ip
   11a44:	beq	11a94 <__assert_fail@plt+0xb38>
   11a48:	ldr	r1, [pc, #220]	; 11b2c <__assert_fail@plt+0xbd0>
   11a4c:	lsl	lr, r3, #3
   11a50:	add	ip, r3, #1
   11a54:	ldr	r2, [r1]
   11a58:	mov	r3, #0
   11a5c:	cmp	r3, r9
   11a60:	cmpeq	r2, r8
   11a64:	strd	r6, [r0, lr]
   11a68:	str	ip, [r4, #16]
   11a6c:	popcs	{r4, r6, r7, r8, r9, sl, fp, pc}
   11a70:	mov	r3, #0
   11a74:	mvn	r2, #0
   11a78:	cmp	r9, r3
   11a7c:	cmpeq	r8, r2
   11a80:	bhi	11afc <__assert_fail@plt+0xba0>
   11a84:	str	r8, [r1]
   11a88:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   11a8c:	mov	r8, #0
   11a90:	mov	r9, #0
   11a94:	cmp	r0, #0
   11a98:	beq	11ac8 <__assert_fail@plt+0xb6c>
   11a9c:	ldr	r3, [pc, #140]	; 11b30 <__assert_fail@plt+0xbd4>
   11aa0:	cmp	ip, r3
   11aa4:	bhi	11aec <__assert_fail@plt+0xb90>
   11aa8:	add	r3, ip, #1
   11aac:	add	ip, r3, ip, lsr #1
   11ab0:	lsl	r1, ip, #3
   11ab4:	str	ip, [r4, #24]
   11ab8:	bl	14cd0 <__assert_fail@plt+0x3d74>
   11abc:	ldr	r3, [r4, #16]
   11ac0:	str	r0, [r4, #20]
   11ac4:	b	11a48 <__assert_fail@plt+0xaec>
   11ac8:	cmp	ip, #0
   11acc:	beq	11af0 <__assert_fail@plt+0xb94>
   11ad0:	lsrs	r3, ip, #29
   11ad4:	movne	r3, #1
   11ad8:	moveq	r3, #0
   11adc:	lsls	r1, ip, #3
   11ae0:	bmi	11aec <__assert_fail@plt+0xb90>
   11ae4:	cmp	r3, #0
   11ae8:	beq	11ab4 <__assert_fail@plt+0xb58>
   11aec:	bl	14ebc <__assert_fail@plt+0x3f60>
   11af0:	mov	r1, #64	; 0x40
   11af4:	mov	ip, #8
   11af8:	b	11ab4 <__assert_fail@plt+0xb58>
   11afc:	mov	r2, #5
   11b00:	ldr	r1, [pc, #44]	; 11b34 <__assert_fail@plt+0xbd8>
   11b04:	mov	r0, #0
   11b08:	bl	10d94 <dcgettext@plt>
   11b0c:	mov	r1, #0
   11b10:	mov	r2, r0
   11b14:	mov	r0, #1
   11b18:	bl	10e0c <error@plt>
   11b1c:	subs	r8, r6, sl
   11b20:	sbc	r9, r1, fp
   11b24:	b	11a40 <__assert_fail@plt+0xae4>
   11b28:	andeq	r7, r2, r0, ror #2
   11b2c:	ldrdeq	r7, [r2], -r8
   11b30:	beq	feabc5dc <optarg@@GLIBC_2.4+0xfea95484>
   11b34:	muleq	r1, r0, fp
   11b38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b3c:	sub	sp, sp, #20
   11b40:	ldrb	r9, [r0]
   11b44:	cmp	r9, #0
   11b48:	beq	11c54 <__assert_fail@plt+0xcf8>
   11b4c:	mov	r3, #0
   11b50:	mov	r6, r3
   11b54:	str	r3, [sp]
   11b58:	mov	r8, r3
   11b5c:	mov	r7, r3
   11b60:	mov	r3, #1
   11b64:	mov	r4, r0
   11b68:	mov	sl, #0
   11b6c:	mov	fp, #0
   11b70:	str	r3, [sp, #4]
   11b74:	b	11bd4 <__assert_fail@plt+0xc78>
   11b78:	bl	10e54 <__ctype_b_loc@plt>
   11b7c:	lsl	r2, r9, #1
   11b80:	ldr	r1, [r0]
   11b84:	ldrh	r5, [r1, r2]
   11b88:	ands	r5, r5, #1
   11b8c:	bne	11bdc <__assert_fail@plt+0xc80>
   11b90:	cmp	r9, #47	; 0x2f
   11b94:	beq	11c5c <__assert_fail@plt+0xd00>
   11b98:	cmp	r9, #43	; 0x2b
   11b9c:	beq	11ccc <__assert_fail@plt+0xd70>
   11ba0:	sub	r3, r9, #48	; 0x30
   11ba4:	cmp	r3, #9
   11ba8:	bhi	11e14 <__assert_fail@plt+0xeb8>
   11bac:	cmp	r6, #0
   11bb0:	bne	11d1c <__assert_fail@plt+0xdc0>
   11bb4:	mov	sl, r3
   11bb8:	asr	fp, r3, #31
   11bbc:	mov	r6, #1
   11bc0:	str	r4, [sp]
   11bc4:	ldrb	r9, [r4, #1]
   11bc8:	add	r4, r4, #1
   11bcc:	cmp	r9, #0
   11bd0:	beq	11c1c <__assert_fail@plt+0xcc0>
   11bd4:	cmp	r9, #44	; 0x2c
   11bd8:	bne	11b78 <__assert_fail@plt+0xc1c>
   11bdc:	cmp	r6, #0
   11be0:	beq	11bc4 <__assert_fail@plt+0xc68>
   11be4:	cmp	r7, #0
   11be8:	mov	r0, sl
   11bec:	mov	r1, fp
   11bf0:	bne	11cbc <__assert_fail@plt+0xd60>
   11bf4:	cmp	r8, #0
   11bf8:	beq	11cac <__assert_fail@plt+0xd50>
   11bfc:	bl	11984 <__assert_fail@plt+0xa28>
   11c00:	subs	r8, r0, #0
   11c04:	beq	11e44 <__assert_fail@plt+0xee8>
   11c08:	ldrb	r9, [r4, #1]
   11c0c:	mov	r6, #0
   11c10:	add	r4, r4, #1
   11c14:	cmp	r9, #0
   11c18:	bne	11bd4 <__assert_fail@plt+0xc78>
   11c1c:	ldr	r3, [sp, #4]
   11c20:	tst	r6, r3
   11c24:	beq	11c48 <__assert_fail@plt+0xcec>
   11c28:	cmp	r7, #0
   11c2c:	mov	r0, sl
   11c30:	mov	r1, fp
   11c34:	bne	11dfc <__assert_fail@plt+0xea0>
   11c38:	cmp	r8, #0
   11c3c:	beq	11df0 <__assert_fail@plt+0xe94>
   11c40:	bl	11984 <__assert_fail@plt+0xa28>
   11c44:	str	r0, [sp, #4]
   11c48:	ldr	r3, [sp, #4]
   11c4c:	cmp	r3, #0
   11c50:	beq	11e44 <__assert_fail@plt+0xee8>
   11c54:	add	sp, sp, #20
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c5c:	cmp	r6, #0
   11c60:	moveq	r8, r6
   11c64:	moveq	r7, #1
   11c68:	beq	11bc4 <__assert_fail@plt+0xc68>
   11c6c:	mov	r2, #5
   11c70:	ldr	r1, [pc, #480]	; 11e58 <__assert_fail@plt+0xefc>
   11c74:	mov	r0, r5
   11c78:	bl	10d94 <dcgettext@plt>
   11c7c:	mov	r8, r5
   11c80:	mov	r7, r0
   11c84:	mov	r0, r4
   11c88:	bl	14704 <__assert_fail@plt+0x37a8>
   11c8c:	mov	r2, r7
   11c90:	mov	r1, r5
   11c94:	str	r5, [sp, #4]
   11c98:	mov	r7, r6
   11c9c:	mov	r3, r0
   11ca0:	mov	r0, r5
   11ca4:	bl	10e0c <error@plt>
   11ca8:	b	11bc4 <__assert_fail@plt+0xc68>
   11cac:	bl	119e0 <__assert_fail@plt+0xa84>
   11cb0:	mov	r7, r8
   11cb4:	mov	r6, r8
   11cb8:	b	11bc4 <__assert_fail@plt+0xc68>
   11cbc:	bl	11928 <__assert_fail@plt+0x9cc>
   11cc0:	subs	r7, r0, #0
   11cc4:	bne	11c08 <__assert_fail@plt+0xcac>
   11cc8:	b	11e44 <__assert_fail@plt+0xee8>
   11ccc:	cmp	r6, #0
   11cd0:	moveq	r7, r6
   11cd4:	moveq	r8, #1
   11cd8:	beq	11bc4 <__assert_fail@plt+0xc68>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r1, [pc, #372]	; 11e5c <__assert_fail@plt+0xf00>
   11ce4:	mov	r0, r5
   11ce8:	bl	10d94 <dcgettext@plt>
   11cec:	mov	r8, r6
   11cf0:	mov	r7, r0
   11cf4:	mov	r0, r4
   11cf8:	bl	14704 <__assert_fail@plt+0x37a8>
   11cfc:	mov	r2, r7
   11d00:	mov	r1, r5
   11d04:	str	r5, [sp, #4]
   11d08:	mov	r7, r5
   11d0c:	mov	r3, r0
   11d10:	mov	r0, r5
   11d14:	bl	10e0c <error@plt>
   11d18:	b	11bc4 <__assert_fail@plt+0xc68>
   11d1c:	add	r1, pc, #300	; 0x12c
   11d20:	ldrd	r0, [r1]
   11d24:	cmp	fp, r1
   11d28:	cmpeq	sl, r0
   11d2c:	bls	11da8 <__assert_fail@plt+0xe4c>
   11d30:	ldr	r5, [sp]
   11d34:	ldr	r1, [pc, #292]	; 11e60 <__assert_fail@plt+0xf04>
   11d38:	mov	r0, r5
   11d3c:	bl	10f50 <strspn@plt>
   11d40:	str	r5, [sp]
   11d44:	mov	r1, r0
   11d48:	mov	r4, r0
   11d4c:	mov	r0, r5
   11d50:	bl	14efc <__assert_fail@plt+0x3fa0>
   11d54:	mov	r2, #5
   11d58:	ldr	r1, [pc, #260]	; 11e64 <__assert_fail@plt+0xf08>
   11d5c:	sub	r4, r4, #1
   11d60:	mov	r5, r0
   11d64:	mov	r0, #0
   11d68:	bl	10d94 <dcgettext@plt>
   11d6c:	mov	r9, r0
   11d70:	mov	r0, r5
   11d74:	bl	14704 <__assert_fail@plt+0x37a8>
   11d78:	mov	r1, #0
   11d7c:	mov	r2, r9
   11d80:	mov	r3, r0
   11d84:	mov	r0, r1
   11d88:	bl	10e0c <error@plt>
   11d8c:	mov	r0, r5
   11d90:	bl	10d40 <free@plt>
   11d94:	ldr	r3, [sp]
   11d98:	add	r4, r3, r4
   11d9c:	mov	r3, #0
   11da0:	str	r3, [sp, #4]
   11da4:	b	11bc4 <__assert_fail@plt+0xc68>
   11da8:	lsl	r1, fp, #2
   11dac:	lsl	r2, sl, #2
   11db0:	adds	r2, r2, sl
   11db4:	orr	r1, r1, sl, lsr #30
   11db8:	adc	r1, r1, fp
   11dbc:	adds	r2, r2, r2
   11dc0:	str	r2, [sp, #8]
   11dc4:	adc	r2, r1, r1
   11dc8:	str	r2, [sp, #12]
   11dcc:	ldrd	r0, [sp, #8]
   11dd0:	adds	r0, r0, r3
   11dd4:	adc	r1, r1, r3, asr #31
   11dd8:	cmp	r1, fp
   11ddc:	cmpeq	r0, sl
   11de0:	bcc	11d30 <__assert_fail@plt+0xdd4>
   11de4:	mov	sl, r0
   11de8:	mov	fp, r1
   11dec:	b	11bc4 <__assert_fail@plt+0xc68>
   11df0:	add	sp, sp, #20
   11df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11df8:	b	119e0 <__assert_fail@plt+0xa84>
   11dfc:	bl	11928 <__assert_fail@plt+0x9cc>
   11e00:	str	r0, [sp, #4]
   11e04:	ldr	r3, [sp, #4]
   11e08:	cmp	r3, #0
   11e0c:	bne	11c54 <__assert_fail@plt+0xcf8>
   11e10:	b	11e44 <__assert_fail@plt+0xee8>
   11e14:	mov	r2, #5
   11e18:	ldr	r1, [pc, #72]	; 11e68 <__assert_fail@plt+0xf0c>
   11e1c:	mov	r0, r5
   11e20:	bl	10d94 <dcgettext@plt>
   11e24:	mov	r6, r0
   11e28:	mov	r0, r4
   11e2c:	bl	14704 <__assert_fail@plt+0x37a8>
   11e30:	mov	r2, r6
   11e34:	mov	r1, r5
   11e38:	mov	r3, r0
   11e3c:	mov	r0, r5
   11e40:	bl	10e0c <error@plt>
   11e44:	mov	r0, #1
   11e48:	bl	10e60 <exit@plt>
   11e4c:	nop			; (mov r0, r0)
   11e50:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e54:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e58:	andeq	r5, r1, r8, lsr #23
   11e5c:	ldrdeq	r5, [r1], -r4
   11e60:	andeq	r5, r1, r0, lsl #24
   11e64:	andeq	r5, r1, ip, lsl #24
   11e68:	andeq	r5, r1, r8, lsr #24
   11e6c:	ldr	r3, [pc, #296]	; 11f9c <__assert_fail@plt+0x1040>
   11e70:	push	{r4, r5, r6, r7, r8, lr}
   11e74:	ldr	ip, [r3, #16]
   11e78:	ldr	r2, [r3, #20]
   11e7c:	cmp	ip, #0
   11e80:	beq	11f4c <__assert_fail@plt+0xff0>
   11e84:	ldrd	r4, [r2]
   11e88:	orrs	r1, r4, r5
   11e8c:	mov	r0, r4
   11e90:	mov	r1, r5
   11e94:	movne	lr, #0
   11e98:	bne	11ec0 <__assert_fail@plt+0xf64>
   11e9c:	b	11f90 <__assert_fail@plt+0x1034>
   11ea0:	ldrd	r6, [r2, #8]!
   11ea4:	orrs	r8, r6, r7
   11ea8:	beq	11f90 <__assert_fail@plt+0x1034>
   11eac:	cmp	r1, r7
   11eb0:	cmpeq	r0, r6
   11eb4:	bcs	11f84 <__assert_fail@plt+0x1028>
   11eb8:	mov	r0, r6
   11ebc:	mov	r1, r7
   11ec0:	add	lr, lr, #1
   11ec4:	cmp	ip, lr
   11ec8:	bne	11ea0 <__assert_fail@plt+0xf44>
   11ecc:	ldrd	r6, [r3, #8]
   11ed0:	orrs	r2, r6, r7
   11ed4:	beq	11ee4 <__assert_fail@plt+0xf88>
   11ed8:	ldrd	r0, [r3]
   11edc:	orrs	r2, r0, r1
   11ee0:	bne	11f2c <__assert_fail@plt+0xfd0>
   11ee4:	cmp	ip, #1
   11ee8:	beq	11efc <__assert_fail@plt+0xfa0>
   11eec:	mov	r0, #0
   11ef0:	mov	r1, #0
   11ef4:	strd	r0, [r3, #32]
   11ef8:	pop	{r4, r5, r6, r7, r8, pc}
   11efc:	ldr	r2, [r3, #4]
   11f00:	ldr	ip, [r3]
   11f04:	orr	r1, r7, r2
   11f08:	orr	r0, r6, ip
   11f0c:	orrs	r2, r0, r1
   11f10:	bne	11eec <__assert_fail@plt+0xf90>
   11f14:	strd	r4, [r3, #32]
   11f18:	pop	{r4, r5, r6, r7, r8, pc}
   11f1c:	orrs	r2, r0, r1
   11f20:	moveq	lr, r4
   11f24:	moveq	r0, r4
   11f28:	beq	11f68 <__assert_fail@plt+0x100c>
   11f2c:	ldr	r1, [pc, #108]	; 11fa0 <__assert_fail@plt+0x1044>
   11f30:	mov	r2, #5
   11f34:	mov	r0, #0
   11f38:	bl	10d94 <dcgettext@plt>
   11f3c:	mov	r1, #0
   11f40:	mov	r2, r0
   11f44:	mov	r0, #1
   11f48:	bl	10e0c <error@plt>
   11f4c:	ldrd	r4, [r3, #8]
   11f50:	ldrd	r0, [r3]
   11f54:	orrs	r2, r4, r5
   11f58:	bne	11f1c <__assert_fail@plt+0xfc0>
   11f5c:	orrs	r2, r0, r1
   11f60:	beq	11f7c <__assert_fail@plt+0x1020>
   11f64:	mov	lr, r0
   11f68:	ldr	r2, [pc, #52]	; 11fa4 <__assert_fail@plt+0x1048>
   11f6c:	str	r0, [r3, #32]
   11f70:	str	ip, [r3, #36]	; 0x24
   11f74:	str	lr, [r2]
   11f78:	pop	{r4, r5, r6, r7, r8, pc}
   11f7c:	mov	r0, #8
   11f80:	b	11f64 <__assert_fail@plt+0x1008>
   11f84:	mov	r2, #5
   11f88:	ldr	r1, [pc, #24]	; 11fa8 <__assert_fail@plt+0x104c>
   11f8c:	b	11f34 <__assert_fail@plt+0xfd8>
   11f90:	mov	r2, #5
   11f94:	ldr	r1, [pc, #16]	; 11fac <__assert_fail@plt+0x1050>
   11f98:	b	11f34 <__assert_fail@plt+0xfd8>
   11f9c:	andeq	r7, r2, r0, ror #2
   11fa0:	andeq	r5, r1, r8, lsl #25
   11fa4:	ldrdeq	r7, [r2], -r8
   11fa8:	andeq	r5, r1, ip, ror #24
   11fac:	andeq	r5, r1, r4, asr ip
   11fb0:	ldr	ip, [pc, #296]	; 120e0 <__assert_fail@plt+0x1184>
   11fb4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb8:	mov	lr, #0
   11fbc:	ldrd	r8, [ip, #32]
   11fc0:	strb	lr, [r3]
   11fc4:	mov	sl, r0
   11fc8:	orrs	lr, r8, r9
   11fcc:	mov	fp, r1
   11fd0:	bne	1205c <__assert_fail@plt+0x1100>
   11fd4:	ldr	r1, [r2]
   11fd8:	ldr	lr, [ip, #16]
   11fdc:	cmp	lr, r1
   11fe0:	bls	12030 <__assert_fail@plt+0x10d4>
   11fe4:	ldr	r5, [ip, #20]
   11fe8:	lsl	r4, r1, #3
   11fec:	add	r0, r5, r4
   11ff0:	add	r4, r5, r4
   11ff4:	ldrd	r4, [r4]
   11ff8:	cmp	fp, r5
   11ffc:	cmpeq	sl, r4
   12000:	addcs	r1, r1, #1
   12004:	bcs	12024 <__assert_fail@plt+0x10c8>
   12008:	b	12050 <__assert_fail@plt+0x10f4>
   1200c:	ldrd	r4, [r0, #8]!
   12010:	add	r8, r1, #1
   12014:	cmp	fp, r5
   12018:	cmpeq	sl, r4
   1201c:	bcc	1207c <__assert_fail@plt+0x1120>
   12020:	mov	r1, r8
   12024:	cmp	lr, r1
   12028:	bne	1200c <__assert_fail@plt+0x10b0>
   1202c:	str	lr, [r2]
   12030:	ldrd	r0, [ip]
   12034:	orrs	r2, r0, r1
   12038:	bne	120b8 <__assert_fail@plt+0x115c>
   1203c:	ldrd	r4, [ip, #8]
   12040:	orrs	r2, r4, r5
   12044:	moveq	r2, #1
   12048:	strbeq	r2, [r3]
   1204c:	bne	12084 <__assert_fail@plt+0x1128>
   12050:	mov	r0, r4
   12054:	mov	r1, r5
   12058:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1205c:	adds	r6, r8, r0
   12060:	mov	r2, r8
   12064:	mov	r3, r9
   12068:	adc	r7, r9, r1
   1206c:	bl	15430 <__assert_fail@plt+0x44d4>
   12070:	subs	r4, r6, r2
   12074:	sbc	r5, r7, r3
   12078:	b	12050 <__assert_fail@plt+0x10f4>
   1207c:	str	r1, [r2]
   12080:	b	12050 <__assert_fail@plt+0x10f4>
   12084:	ldr	r3, [ip, #20]
   12088:	adds	r8, r4, sl
   1208c:	add	lr, r3, lr, lsl #3
   12090:	adc	r9, r5, fp
   12094:	ldrd	r0, [lr, #-8]
   12098:	mov	r2, r4
   1209c:	mov	r3, r5
   120a0:	subs	r0, sl, r0
   120a4:	sbc	r1, fp, r1
   120a8:	bl	15430 <__assert_fail@plt+0x44d4>
   120ac:	subs	r4, r8, r2
   120b0:	sbc	r5, r9, r3
   120b4:	b	12050 <__assert_fail@plt+0x10f4>
   120b8:	adds	r8, r0, sl
   120bc:	adc	r9, r1, fp
   120c0:	mov	r2, r0
   120c4:	mov	r3, r1
   120c8:	mov	r0, sl
   120cc:	mov	r1, fp
   120d0:	bl	15430 <__assert_fail@plt+0x44d4>
   120d4:	subs	r4, r8, r2
   120d8:	sbc	r5, r9, r3
   120dc:	b	12050 <__assert_fail@plt+0x10f4>
   120e0:	andeq	r7, r2, r0, ror #2
   120e4:	ldr	r3, [pc, #24]	; 12104 <__assert_fail@plt+0x11a8>
   120e8:	ldr	r2, [pc, #24]	; 12108 <__assert_fail@plt+0x11ac>
   120ec:	cmp	r0, #0
   120f0:	moveq	r0, r3
   120f4:	mov	r3, #0
   120f8:	str	r0, [r2, #44]	; 0x2c
   120fc:	strb	r3, [r2, #40]	; 0x28
   12100:	bx	lr
   12104:	andeq	r7, r2, r8, ror #1
   12108:	andeq	r7, r2, r0, ror #2
   1210c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12110:	subs	r5, r0, #0
   12114:	ldr	r6, [pc, #416]	; 122bc <__assert_fail@plt+0x1360>
   12118:	beq	12150 <__assert_fail@plt+0x11f4>
   1211c:	ldr	r4, [r6, #48]	; 0x30
   12120:	cmp	r4, #0
   12124:	beq	122a8 <__assert_fail@plt+0x134c>
   12128:	ldr	r3, [r5]
   1212c:	tst	r3, #32
   12130:	bne	1226c <__assert_fail@plt+0x1310>
   12134:	mov	r0, r4
   12138:	ldr	r1, [pc, #384]	; 122c0 <__assert_fail@plt+0x1364>
   1213c:	bl	10d1c <strcmp@plt>
   12140:	cmp	r0, #0
   12144:	mov	r0, r5
   12148:	bne	12228 <__assert_fail@plt+0x12cc>
   1214c:	bl	10f14 <clearerr_unlocked@plt>
   12150:	ldr	r3, [r6, #44]	; 0x2c
   12154:	add	r2, r3, #4
   12158:	ldr	r4, [r3]
   1215c:	str	r2, [r6, #44]	; 0x2c
   12160:	cmp	r4, #0
   12164:	beq	1221c <__assert_fail@plt+0x12c0>
   12168:	ldr	r8, [pc, #336]	; 122c0 <__assert_fail@plt+0x1364>
   1216c:	ldr	fp, [pc, #336]	; 122c4 <__assert_fail@plt+0x1368>
   12170:	mov	r7, #1
   12174:	ldr	sl, [pc, #332]	; 122c8 <__assert_fail@plt+0x136c>
   12178:	ldr	r9, [pc, #332]	; 122cc <__assert_fail@plt+0x1370>
   1217c:	b	121d8 <__assert_fail@plt+0x127c>
   12180:	ldr	r5, [sl]
   12184:	strb	r7, [r6, #40]	; 0x28
   12188:	cmp	r5, #0
   1218c:	bne	12204 <__assert_fail@plt+0x12a8>
   12190:	bl	10e78 <__errno_location@plt>
   12194:	mov	r2, r4
   12198:	mov	r1, #3
   1219c:	ldr	r4, [r0]
   121a0:	mov	r0, r5
   121a4:	bl	14538 <__assert_fail@plt+0x35dc>
   121a8:	mov	r2, r9
   121ac:	mov	r1, r4
   121b0:	mov	r3, r0
   121b4:	mov	r0, r5
   121b8:	bl	10e0c <error@plt>
   121bc:	ldr	r3, [r6, #44]	; 0x2c
   121c0:	str	r7, [r6, #52]	; 0x34
   121c4:	add	r2, r3, #4
   121c8:	ldr	r4, [r3]
   121cc:	str	r2, [r6, #44]	; 0x2c
   121d0:	cmp	r4, #0
   121d4:	beq	1221c <__assert_fail@plt+0x12c0>
   121d8:	mov	r1, r8
   121dc:	mov	r0, r4
   121e0:	bl	10d1c <strcmp@plt>
   121e4:	cmp	r0, #0
   121e8:	beq	12180 <__assert_fail@plt+0x1224>
   121ec:	mov	r1, fp
   121f0:	mov	r0, r4
   121f4:	bl	10f20 <fopen64@plt>
   121f8:	mov	r5, r0
   121fc:	cmp	r5, #0
   12200:	beq	12190 <__assert_fail@plt+0x1234>
   12204:	mov	r0, r5
   12208:	mov	r1, #2
   1220c:	str	r4, [r6, #48]	; 0x30
   12210:	bl	1246c <__assert_fail@plt+0x1510>
   12214:	mov	r0, r5
   12218:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1221c:	mov	r5, #0
   12220:	mov	r0, r5
   12224:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12228:	bl	14f10 <__assert_fail@plt+0x3fb4>
   1222c:	cmp	r0, #0
   12230:	beq	12150 <__assert_fail@plt+0x11f4>
   12234:	bl	10e78 <__errno_location@plt>
   12238:	ldr	r2, [r6, #48]	; 0x30
   1223c:	mov	r1, #3
   12240:	ldr	r4, [r0]
   12244:	mov	r0, #0
   12248:	bl	14538 <__assert_fail@plt+0x35dc>
   1224c:	mov	r1, r4
   12250:	ldr	r2, [pc, #116]	; 122cc <__assert_fail@plt+0x1370>
   12254:	mov	r3, r0
   12258:	mov	r0, #0
   1225c:	bl	10e0c <error@plt>
   12260:	mov	r3, #1
   12264:	str	r3, [r6, #52]	; 0x34
   12268:	b	12150 <__assert_fail@plt+0x11f4>
   1226c:	bl	10e78 <__errno_location@plt>
   12270:	mov	r2, r4
   12274:	mov	r1, #3
   12278:	ldr	r4, [r0]
   1227c:	mov	r0, #0
   12280:	bl	14538 <__assert_fail@plt+0x35dc>
   12284:	mov	r1, r4
   12288:	ldr	r2, [pc, #60]	; 122cc <__assert_fail@plt+0x1370>
   1228c:	mov	r3, r0
   12290:	mov	r0, #0
   12294:	bl	10e0c <error@plt>
   12298:	mov	r3, #1
   1229c:	ldr	r4, [r6, #48]	; 0x30
   122a0:	str	r3, [r6, #52]	; 0x34
   122a4:	b	12134 <__assert_fail@plt+0x11d8>
   122a8:	ldr	r3, [pc, #32]	; 122d0 <__assert_fail@plt+0x1374>
   122ac:	ldr	r2, [pc, #32]	; 122d4 <__assert_fail@plt+0x1378>
   122b0:	ldr	r1, [pc, #32]	; 122d8 <__assert_fail@plt+0x137c>
   122b4:	ldr	r0, [pc, #32]	; 122dc <__assert_fail@plt+0x1380>
   122b8:	bl	10f5c <__assert_fail@plt>
   122bc:	andeq	r7, r2, r0, ror #2
   122c0:	ldrdeq	r5, [r1], -r8
   122c4:	ldrdeq	r5, [r1], -ip
   122c8:	andeq	r7, r2, r0, asr r1
   122cc:	andeq	r5, r1, r0, asr ip
   122d0:	andeq	r5, r1, r4, lsr #22
   122d4:	andeq	r0, r0, r5, asr r1
   122d8:			; <UNDEFINED> instruction: 0x00015cb8
   122dc:	andeq	r5, r1, ip, asr #25
   122e0:	ldr	r3, [pc, #52]	; 1231c <__assert_fail@plt+0x13c0>
   122e4:	ldrb	r3, [r3, #40]	; 0x28
   122e8:	cmp	r3, #0
   122ec:	bxeq	lr
   122f0:	ldr	r3, [pc, #40]	; 12320 <__assert_fail@plt+0x13c4>
   122f4:	push	{r4, lr}
   122f8:	ldr	r0, [r3]
   122fc:	bl	14f10 <__assert_fail@plt+0x3fb4>
   12300:	cmp	r0, #0
   12304:	popeq	{r4, pc}
   12308:	bl	10e78 <__errno_location@plt>
   1230c:	ldr	r2, [pc, #16]	; 12324 <__assert_fail@plt+0x13c8>
   12310:	ldr	r1, [r0]
   12314:	mov	r0, #1
   12318:	bl	10e0c <error@plt>
   1231c:	andeq	r7, r2, r0, ror #2
   12320:	andeq	r7, r2, r0, asr r1
   12324:	ldrdeq	r5, [r1], -r8
   12328:	push	{r4, lr}
   1232c:	mov	r2, #5
   12330:	ldr	r4, [pc, #44]	; 12364 <__assert_fail@plt+0x1408>
   12334:	ldr	r1, [pc, #44]	; 12368 <__assert_fail@plt+0x140c>
   12338:	mov	r0, #0
   1233c:	bl	10d94 <dcgettext@plt>
   12340:	ldr	r1, [r4]
   12344:	bl	10d04 <fputs_unlocked@plt>
   12348:	ldr	r1, [pc, #28]	; 1236c <__assert_fail@plt+0x1410>
   1234c:	mov	r2, #5
   12350:	mov	r0, #0
   12354:	bl	10d94 <dcgettext@plt>
   12358:	ldr	r1, [r4]
   1235c:	pop	{r4, lr}
   12360:	b	10d04 <fputs_unlocked@plt>
   12364:	andeq	r7, r2, r4, asr r1
   12368:	andeq	r5, r1, r0, ror #25
   1236c:	andeq	r5, r1, r0, lsr #26
   12370:	ldr	r3, [pc, #4]	; 1237c <__assert_fail@plt+0x1420>
   12374:	str	r0, [r3]
   12378:	bx	lr
   1237c:	muleq	r2, ip, r1
   12380:	ldr	r3, [pc, #4]	; 1238c <__assert_fail@plt+0x1430>
   12384:	strb	r0, [r3, #4]
   12388:	bx	lr
   1238c:	muleq	r2, ip, r1
   12390:	ldr	r3, [pc, #180]	; 1244c <__assert_fail@plt+0x14f0>
   12394:	push	{r4, r5, r6, lr}
   12398:	sub	sp, sp, #8
   1239c:	ldr	r0, [r3]
   123a0:	bl	15130 <__assert_fail@plt+0x41d4>
   123a4:	cmp	r0, #0
   123a8:	beq	123d0 <__assert_fail@plt+0x1474>
   123ac:	bl	10e78 <__errno_location@plt>
   123b0:	ldr	r5, [pc, #152]	; 12450 <__assert_fail@plt+0x14f4>
   123b4:	ldrb	r3, [r5, #4]
   123b8:	cmp	r3, #0
   123bc:	mov	r4, r0
   123c0:	beq	123ec <__assert_fail@plt+0x1490>
   123c4:	ldr	r3, [r0]
   123c8:	cmp	r3, #32
   123cc:	bne	123ec <__assert_fail@plt+0x1490>
   123d0:	ldr	r3, [pc, #124]	; 12454 <__assert_fail@plt+0x14f8>
   123d4:	ldr	r0, [r3]
   123d8:	bl	15130 <__assert_fail@plt+0x41d4>
   123dc:	cmp	r0, #0
   123e0:	bne	1242c <__assert_fail@plt+0x14d0>
   123e4:	add	sp, sp, #8
   123e8:	pop	{r4, r5, r6, pc}
   123ec:	mov	r2, #5
   123f0:	ldr	r1, [pc, #96]	; 12458 <__assert_fail@plt+0x14fc>
   123f4:	mov	r0, #0
   123f8:	bl	10d94 <dcgettext@plt>
   123fc:	mov	r6, r0
   12400:	ldr	r0, [r5]
   12404:	cmp	r0, #0
   12408:	beq	12438 <__assert_fail@plt+0x14dc>
   1240c:	ldr	r4, [r4]
   12410:	bl	14524 <__assert_fail@plt+0x35c8>
   12414:	mov	r1, r4
   12418:	str	r6, [sp]
   1241c:	ldr	r2, [pc, #56]	; 1245c <__assert_fail@plt+0x1500>
   12420:	mov	r3, r0
   12424:	mov	r0, #0
   12428:	bl	10e0c <error@plt>
   1242c:	ldr	r3, [pc, #44]	; 12460 <__assert_fail@plt+0x1504>
   12430:	ldr	r0, [r3]
   12434:	bl	10d58 <_exit@plt>
   12438:	mov	r3, r6
   1243c:	ldr	r1, [r4]
   12440:	ldr	r2, [pc, #28]	; 12464 <__assert_fail@plt+0x1508>
   12444:	bl	10e0c <error@plt>
   12448:	b	1242c <__assert_fail@plt+0x14d0>
   1244c:	andeq	r7, r2, r4, asr r1
   12450:	muleq	r2, ip, r1
   12454:	andeq	r7, r2, r8, asr #2
   12458:	andeq	r5, r1, r4, lsl #21
   1245c:	muleq	r1, r8, lr
   12460:	strdeq	r7, [r2], -r4
   12464:	andeq	r5, r1, r0, asr ip
   12468:	b	10d28 <posix_fadvise64@plt>
   1246c:	cmp	r0, #0
   12470:	bxeq	lr
   12474:	push	{r4, lr}
   12478:	sub	sp, sp, #16
   1247c:	mov	r4, r1
   12480:	bl	10ea8 <fileno@plt>
   12484:	mov	r2, #0
   12488:	mov	r3, #0
   1248c:	str	r4, [sp, #8]
   12490:	strd	r2, [sp]
   12494:	bl	10d28 <posix_fadvise64@plt>
   12498:	add	sp, sp, #16
   1249c:	pop	{r4, pc}
   124a0:	push	{r4, r5, r6, lr}
   124a4:	subs	r4, r0, #0
   124a8:	beq	1251c <__assert_fail@plt+0x15c0>
   124ac:	mov	r1, #47	; 0x2f
   124b0:	bl	10efc <strrchr@plt>
   124b4:	subs	r5, r0, #0
   124b8:	beq	12508 <__assert_fail@plt+0x15ac>
   124bc:	add	r6, r5, #1
   124c0:	sub	r3, r6, r4
   124c4:	cmp	r3, #6
   124c8:	ble	12508 <__assert_fail@plt+0x15ac>
   124cc:	mov	r2, #7
   124d0:	ldr	r1, [pc, #96]	; 12538 <__assert_fail@plt+0x15dc>
   124d4:	sub	r0, r5, #6
   124d8:	bl	10f38 <strncmp@plt>
   124dc:	cmp	r0, #0
   124e0:	bne	12508 <__assert_fail@plt+0x15ac>
   124e4:	mov	r2, #3
   124e8:	ldr	r1, [pc, #76]	; 1253c <__assert_fail@plt+0x15e0>
   124ec:	mov	r0, r6
   124f0:	bl	10f38 <strncmp@plt>
   124f4:	cmp	r0, #0
   124f8:	movne	r4, r6
   124fc:	ldreq	r3, [pc, #60]	; 12540 <__assert_fail@plt+0x15e4>
   12500:	addeq	r4, r5, #4
   12504:	streq	r4, [r3]
   12508:	ldr	r2, [pc, #52]	; 12544 <__assert_fail@plt+0x15e8>
   1250c:	ldr	r3, [pc, #52]	; 12548 <__assert_fail@plt+0x15ec>
   12510:	str	r4, [r2]
   12514:	str	r4, [r3]
   12518:	pop	{r4, r5, r6, pc}
   1251c:	ldr	r3, [pc, #40]	; 1254c <__assert_fail@plt+0x15f0>
   12520:	mov	r2, #55	; 0x37
   12524:	mov	r1, #1
   12528:	ldr	r3, [r3]
   1252c:	ldr	r0, [pc, #28]	; 12550 <__assert_fail@plt+0x15f4>
   12530:	bl	10dd0 <fwrite@plt>
   12534:	bl	10f44 <abort@plt>
   12538:	ldrdeq	r5, [r1], -r8
   1253c:	andeq	r5, r1, r0, ror #29
   12540:	andeq	r7, r2, r8, lsr r1
   12544:	andeq	r7, r2, r4, lsr #3
   12548:	andeq	r7, r2, ip, lsr r1
   1254c:	andeq	r7, r2, r8, asr #2
   12550:	andeq	r5, r1, r0, lsr #29
   12554:	push	{r4, lr}
   12558:	mov	r2, #48	; 0x30
   1255c:	mov	r4, r1
   12560:	mov	r1, #0
   12564:	bl	10e90 <memset@plt>
   12568:	cmp	r4, #10
   1256c:	beq	12578 <__assert_fail@plt+0x161c>
   12570:	str	r4, [r0]
   12574:	pop	{r4, pc}
   12578:	bl	10f44 <abort@plt>
   1257c:	push	{r4, r5, r6, lr}
   12580:	mov	r2, #5
   12584:	mov	r5, r0
   12588:	mov	r6, r1
   1258c:	mov	r1, r0
   12590:	mov	r0, #0
   12594:	bl	10d94 <dcgettext@plt>
   12598:	cmp	r5, r0
   1259c:	mov	r4, r0
   125a0:	beq	125ac <__assert_fail@plt+0x1650>
   125a4:	mov	r0, r4
   125a8:	pop	{r4, r5, r6, pc}
   125ac:	bl	151f0 <__assert_fail@plt+0x4294>
   125b0:	ldrb	r3, [r0]
   125b4:	bic	r3, r3, #32
   125b8:	cmp	r3, #85	; 0x55
   125bc:	bne	1261c <__assert_fail@plt+0x16c0>
   125c0:	ldrb	r3, [r0, #1]
   125c4:	bic	r3, r3, #32
   125c8:	cmp	r3, #84	; 0x54
   125cc:	bne	12694 <__assert_fail@plt+0x1738>
   125d0:	ldrb	r3, [r0, #2]
   125d4:	bic	r3, r3, #32
   125d8:	cmp	r3, #70	; 0x46
   125dc:	bne	12694 <__assert_fail@plt+0x1738>
   125e0:	ldrb	r3, [r0, #3]
   125e4:	cmp	r3, #45	; 0x2d
   125e8:	bne	12694 <__assert_fail@plt+0x1738>
   125ec:	ldrb	r3, [r0, #4]
   125f0:	cmp	r3, #56	; 0x38
   125f4:	bne	12694 <__assert_fail@plt+0x1738>
   125f8:	ldrb	r3, [r0, #5]
   125fc:	cmp	r3, #0
   12600:	bne	12694 <__assert_fail@plt+0x1738>
   12604:	ldrb	r2, [r4]
   12608:	ldr	r3, [pc, #156]	; 126ac <__assert_fail@plt+0x1750>
   1260c:	ldr	r4, [pc, #156]	; 126b0 <__assert_fail@plt+0x1754>
   12610:	cmp	r2, #96	; 0x60
   12614:	movne	r4, r3
   12618:	b	125a4 <__assert_fail@plt+0x1648>
   1261c:	cmp	r3, #71	; 0x47
   12620:	bne	12694 <__assert_fail@plt+0x1738>
   12624:	ldrb	r3, [r0, #1]
   12628:	bic	r3, r3, #32
   1262c:	cmp	r3, #66	; 0x42
   12630:	bne	12694 <__assert_fail@plt+0x1738>
   12634:	ldrb	r3, [r0, #2]
   12638:	cmp	r3, #49	; 0x31
   1263c:	bne	12694 <__assert_fail@plt+0x1738>
   12640:	ldrb	r3, [r0, #3]
   12644:	cmp	r3, #56	; 0x38
   12648:	bne	12694 <__assert_fail@plt+0x1738>
   1264c:	ldrb	r3, [r0, #4]
   12650:	cmp	r3, #48	; 0x30
   12654:	bne	12694 <__assert_fail@plt+0x1738>
   12658:	ldrb	r3, [r0, #5]
   1265c:	cmp	r3, #51	; 0x33
   12660:	bne	12694 <__assert_fail@plt+0x1738>
   12664:	ldrb	r3, [r0, #6]
   12668:	cmp	r3, #48	; 0x30
   1266c:	bne	12694 <__assert_fail@plt+0x1738>
   12670:	ldrb	r3, [r0, #7]
   12674:	cmp	r3, #0
   12678:	bne	12694 <__assert_fail@plt+0x1738>
   1267c:	ldrb	r2, [r4]
   12680:	ldr	r3, [pc, #44]	; 126b4 <__assert_fail@plt+0x1758>
   12684:	ldr	r4, [pc, #44]	; 126b8 <__assert_fail@plt+0x175c>
   12688:	cmp	r2, #96	; 0x60
   1268c:	movne	r4, r3
   12690:	b	125a4 <__assert_fail@plt+0x1648>
   12694:	ldr	r3, [pc, #32]	; 126bc <__assert_fail@plt+0x1760>
   12698:	ldr	r4, [pc, #32]	; 126c0 <__assert_fail@plt+0x1764>
   1269c:	cmp	r6, #9
   126a0:	movne	r4, r3
   126a4:	mov	r0, r4
   126a8:	pop	{r4, r5, r6, pc}
   126ac:	andeq	r5, r1, ip, lsr pc
   126b0:	andeq	r5, r1, r8, asr #30
   126b4:	andeq	r5, r1, r0, asr #30
   126b8:	andeq	r5, r1, r4, asr #30
   126bc:	andeq	r5, r1, ip, asr #30
   126c0:	andeq	r5, r1, r8, lsr pc
   126c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126c8:	sub	sp, sp, #124	; 0x7c
   126cc:	ldr	ip, [pc, #3576]	; 134cc <__assert_fail@plt+0x2570>
   126d0:	str	r3, [sp, #24]
   126d4:	ldr	r3, [sp, #168]	; 0xa8
   126d8:	ldr	ip, [ip]
   126dc:	str	r3, [sp, #56]	; 0x38
   126e0:	ldr	r3, [sp, #172]	; 0xac
   126e4:	ldr	r8, [sp, #160]	; 0xa0
   126e8:	str	r3, [sp, #80]	; 0x50
   126ec:	ldr	r3, [sp, #176]	; 0xb0
   126f0:	mov	fp, r0
   126f4:	str	r3, [sp, #76]	; 0x4c
   126f8:	mov	sl, r1
   126fc:	str	r2, [sp, #36]	; 0x24
   12700:	str	ip, [sp, #116]	; 0x74
   12704:	bl	10de8 <__ctype_get_mb_cur_max@plt>
   12708:	ldr	r3, [sp, #164]	; 0xa4
   1270c:	ands	r4, r3, #2
   12710:	movne	r3, #1
   12714:	moveq	r3, #0
   12718:	str	r3, [sp, #32]
   1271c:	str	r0, [sp, #64]	; 0x40
   12720:	cmp	r8, #10
   12724:	ldrls	pc, [pc, r8, lsl #2]
   12728:	b	13ed8 <__assert_fail@plt+0x2f7c>
   1272c:	andeq	r2, r1, r0, lsr #22
   12730:			; <UNDEFINED> instruction: 0x00012bb8
   12734:			; <UNDEFINED> instruction: 0x000131b8
   12738:	ldrdeq	r2, [r1], -r8
   1273c:	andeq	r2, r1, ip, lsl #21
   12740:	ldrdeq	r2, [r1], -r4
   12744:	andeq	r2, r1, r0, asr fp
   12748:	andeq	r2, r1, r8, lsl #23
   1274c:	andeq	r2, r1, r8, asr r7
   12750:	andeq	r2, r1, r8, asr r7
   12754:	andeq	r2, r1, r8, asr r7
   12758:	cmp	r8, #10
   1275c:	beq	12780 <__assert_fail@plt+0x1824>
   12760:	mov	r1, r8
   12764:	ldr	r0, [pc, #3428]	; 134d0 <__assert_fail@plt+0x2574>
   12768:	bl	1257c <__assert_fail@plt+0x1620>
   1276c:	mov	r1, r8
   12770:	str	r0, [sp, #80]	; 0x50
   12774:	ldr	r0, [pc, #3420]	; 134d8 <__assert_fail@plt+0x257c>
   12778:	bl	1257c <__assert_fail@plt+0x1620>
   1277c:	str	r0, [sp, #76]	; 0x4c
   12780:	cmp	r4, #0
   12784:	movne	r4, #0
   12788:	beq	13b98 <__assert_fail@plt+0x2c3c>
   1278c:	ldr	r7, [sp, #76]	; 0x4c
   12790:	mov	r5, #0
   12794:	mov	r6, #1
   12798:	mov	r0, r7
   1279c:	str	r6, [sp, #40]	; 0x28
   127a0:	str	r5, [sp, #68]	; 0x44
   127a4:	bl	10e6c <strlen@plt>
   127a8:	str	r6, [sp, #28]
   127ac:	str	r5, [sp, #44]	; 0x2c
   127b0:	str	r5, [sp, #72]	; 0x48
   127b4:	str	r7, [sp, #60]	; 0x3c
   127b8:	str	r0, [sp, #52]	; 0x34
   127bc:	str	r8, [sp, #160]	; 0xa0
   127c0:	mov	r8, fp
   127c4:	ldr	fp, [sp, #160]	; 0xa0
   127c8:	mov	r9, #0
   127cc:	ldr	r3, [sp, #24]
   127d0:	cmn	r3, #1
   127d4:	beq	12d3c <__assert_fail@plt+0x1de0>
   127d8:	ldr	r3, [sp, #24]
   127dc:	subs	r6, r3, r9
   127e0:	movne	r6, #1
   127e4:	cmp	r6, #0
   127e8:	beq	12d54 <__assert_fail@plt+0x1df8>
   127ec:	ldr	r7, [sp, #28]
   127f0:	ldr	r0, [sp, #36]	; 0x24
   127f4:	cmp	fp, #2
   127f8:	moveq	r7, #0
   127fc:	andne	r7, r7, #1
   12800:	add	r3, r0, r9
   12804:	cmp	r7, #0
   12808:	str	r3, [sp, #48]	; 0x30
   1280c:	beq	131f8 <__assert_fail@plt+0x229c>
   12810:	ldr	r2, [sp, #52]	; 0x34
   12814:	cmp	r2, #0
   12818:	beq	134dc <__assert_fail@plt+0x2580>
   1281c:	ldr	r1, [sp, #24]
   12820:	cmp	r2, #1
   12824:	mov	r3, r2
   12828:	movls	r3, #0
   1282c:	movhi	r3, #1
   12830:	cmn	r1, #1
   12834:	movne	r3, #0
   12838:	cmp	r3, #0
   1283c:	add	r5, r9, r2
   12840:	beq	1284c <__assert_fail@plt+0x18f0>
   12844:	bl	10e6c <strlen@plt>
   12848:	str	r0, [sp, #24]
   1284c:	ldr	r3, [sp, #24]
   12850:	cmp	r5, r3
   12854:	bhi	134dc <__assert_fail@plt+0x2580>
   12858:	ldr	r2, [sp, #52]	; 0x34
   1285c:	ldr	r1, [sp, #60]	; 0x3c
   12860:	ldr	r0, [sp, #48]	; 0x30
   12864:	bl	10d88 <memcmp@plt>
   12868:	cmp	r0, #0
   1286c:	bne	134dc <__assert_fail@plt+0x2580>
   12870:	ldr	r3, [sp, #32]
   12874:	cmp	r3, #0
   12878:	bne	13d98 <__assert_fail@plt+0x2e3c>
   1287c:	ldr	r3, [sp, #48]	; 0x30
   12880:	ldrb	r5, [r3]
   12884:	cmp	r5, #126	; 0x7e
   12888:	ldrls	pc, [pc, r5, lsl #2]
   1288c:	b	1315c <__assert_fail@plt+0x2200>
   12890:	andeq	r3, r1, r8, asr #32
   12894:	andeq	r3, r1, ip, asr r1
   12898:	andeq	r3, r1, ip, asr r1
   1289c:	andeq	r3, r1, ip, asr r1
   128a0:	andeq	r3, r1, ip, asr r1
   128a4:	andeq	r3, r1, ip, asr r1
   128a8:	andeq	r3, r1, ip, asr r1
   128ac:	andeq	r3, r1, r4, lsl r1
   128b0:	andeq	r3, r1, r4, lsl #2
   128b4:	andeq	r3, r1, r4
   128b8:	andeq	r2, r1, ip, asr #31
   128bc:	andeq	r3, r1, r4, lsr #32
   128c0:	andeq	r3, r1, ip
   128c4:	andeq	r2, r1, ip, lsr pc
   128c8:	andeq	r3, r1, ip, asr r1
   128cc:	andeq	r3, r1, ip, asr r1
   128d0:	andeq	r3, r1, ip, asr r1
   128d4:	andeq	r3, r1, ip, asr r1
   128d8:	andeq	r3, r1, ip, asr r1
   128dc:	andeq	r3, r1, ip, asr r1
   128e0:	andeq	r3, r1, ip, asr r1
   128e4:	andeq	r3, r1, ip, asr r1
   128e8:	andeq	r3, r1, ip, asr r1
   128ec:	andeq	r3, r1, ip, asr r1
   128f0:	andeq	r3, r1, ip, asr r1
   128f4:	andeq	r3, r1, ip, asr r1
   128f8:	andeq	r3, r1, ip, asr r1
   128fc:	andeq	r3, r1, ip, asr r1
   12900:	andeq	r3, r1, ip, asr r1
   12904:	andeq	r3, r1, ip, asr r1
   12908:	andeq	r3, r1, ip, asr r1
   1290c:	andeq	r3, r1, ip, asr r1
   12910:	andeq	r3, r1, ip, lsl r1
   12914:	andeq	r3, r1, r0, lsr r0
   12918:	andeq	r3, r1, r0, lsr r0
   1291c:	andeq	r3, r1, r4, lsr r1
   12920:	andeq	r3, r1, r0, lsr r0
   12924:	andeq	r3, r1, r0, asr r1
   12928:	andeq	r3, r1, r0, lsr r0
   1292c:	andeq	r2, r1, r0, ror lr
   12930:	andeq	r3, r1, r0, lsr r0
   12934:	andeq	r3, r1, r0, lsr r0
   12938:	andeq	r3, r1, r0, lsr r0
   1293c:	andeq	r3, r1, r0, asr r1
   12940:	andeq	r3, r1, r0, asr r1
   12944:	andeq	r3, r1, r0, asr r1
   12948:	andeq	r3, r1, r0, asr r1
   1294c:	andeq	r3, r1, r0, asr r1
   12950:	andeq	r3, r1, r0, asr r1
   12954:	andeq	r3, r1, r0, asr r1
   12958:	andeq	r3, r1, r0, asr r1
   1295c:	andeq	r3, r1, r0, asr r1
   12960:	andeq	r3, r1, r0, asr r1
   12964:	andeq	r3, r1, r0, asr r1
   12968:	andeq	r3, r1, r0, asr r1
   1296c:	andeq	r3, r1, r0, asr r1
   12970:	andeq	r3, r1, r0, asr r1
   12974:	andeq	r3, r1, r0, asr r1
   12978:	andeq	r3, r1, r0, asr r1
   1297c:	andeq	r3, r1, r0, lsr r0
   12980:	andeq	r3, r1, r0, lsr r0
   12984:	andeq	r3, r1, r0, lsr r0
   12988:	andeq	r3, r1, r0, lsr r0
   1298c:	andeq	r2, r1, r4, asr #28
   12990:	andeq	r3, r1, ip, asr r1
   12994:	andeq	r3, r1, r0, asr r1
   12998:	andeq	r3, r1, r0, asr r1
   1299c:	andeq	r3, r1, r0, asr r1
   129a0:	andeq	r3, r1, r0, asr r1
   129a4:	andeq	r3, r1, r0, asr r1
   129a8:	andeq	r3, r1, r0, asr r1
   129ac:	andeq	r3, r1, r0, asr r1
   129b0:	andeq	r3, r1, r0, asr r1
   129b4:	andeq	r3, r1, r0, asr r1
   129b8:	andeq	r3, r1, r0, asr r1
   129bc:	andeq	r3, r1, r0, asr r1
   129c0:	andeq	r3, r1, r0, asr r1
   129c4:	andeq	r3, r1, r0, asr r1
   129c8:	andeq	r3, r1, r0, asr r1
   129cc:	andeq	r3, r1, r0, asr r1
   129d0:	andeq	r3, r1, r0, asr r1
   129d4:	andeq	r3, r1, r0, asr r1
   129d8:	andeq	r3, r1, r0, asr r1
   129dc:	andeq	r3, r1, r0, asr r1
   129e0:	andeq	r3, r1, r0, asr r1
   129e4:	andeq	r3, r1, r0, asr r1
   129e8:	andeq	r3, r1, r0, asr r1
   129ec:	andeq	r3, r1, r0, asr r1
   129f0:	andeq	r3, r1, r0, asr r1
   129f4:	andeq	r3, r1, r0, asr r1
   129f8:	andeq	r3, r1, r0, asr r1
   129fc:	andeq	r3, r1, r0, lsr r0
   12a00:	strdeq	r2, [r1], -ip
   12a04:	andeq	r3, r1, r0, asr r1
   12a08:	andeq	r3, r1, r0, lsr r0
   12a0c:	andeq	r3, r1, r0, asr r1
   12a10:	andeq	r3, r1, r0, lsr r0
   12a14:	andeq	r3, r1, r0, asr r1
   12a18:	andeq	r3, r1, r0, asr r1
   12a1c:	andeq	r3, r1, r0, asr r1
   12a20:	andeq	r3, r1, r0, asr r1
   12a24:	andeq	r3, r1, r0, asr r1
   12a28:	andeq	r3, r1, r0, asr r1
   12a2c:	andeq	r3, r1, r0, asr r1
   12a30:	andeq	r3, r1, r0, asr r1
   12a34:	andeq	r3, r1, r0, asr r1
   12a38:	andeq	r3, r1, r0, asr r1
   12a3c:	andeq	r3, r1, r0, asr r1
   12a40:	andeq	r3, r1, r0, asr r1
   12a44:	andeq	r3, r1, r0, asr r1
   12a48:	andeq	r3, r1, r0, asr r1
   12a4c:	andeq	r3, r1, r0, asr r1
   12a50:	andeq	r3, r1, r0, asr r1
   12a54:	andeq	r3, r1, r0, asr r1
   12a58:	andeq	r3, r1, r0, asr r1
   12a5c:	andeq	r3, r1, r0, asr r1
   12a60:	andeq	r3, r1, r0, asr r1
   12a64:	andeq	r3, r1, r0, asr r1
   12a68:	andeq	r3, r1, r0, asr r1
   12a6c:	andeq	r3, r1, r0, asr r1
   12a70:	andeq	r3, r1, r0, asr r1
   12a74:	andeq	r3, r1, r0, asr r1
   12a78:	andeq	r3, r1, r0, asr r1
   12a7c:	andeq	r2, r1, r4, lsl ip
   12a80:	andeq	r3, r1, r0, lsr r0
   12a84:	andeq	r2, r1, r4, lsl ip
   12a88:	andeq	r3, r1, r4, lsr r1
   12a8c:	cmp	r4, #0
   12a90:	moveq	r3, #1
   12a94:	streq	r3, [sp, #28]
   12a98:	beq	131c4 <__assert_fail@plt+0x2268>
   12a9c:	mov	r3, #0
   12aa0:	mov	r4, r3
   12aa4:	mov	r2, #1
   12aa8:	str	r2, [sp, #40]	; 0x28
   12aac:	str	r3, [sp, #68]	; 0x44
   12ab0:	str	r2, [sp, #32]
   12ab4:	str	r2, [sp, #52]	; 0x34
   12ab8:	ldr	r3, [pc, #2584]	; 134d8 <__assert_fail@plt+0x257c>
   12abc:	str	r4, [sp, #44]	; 0x2c
   12ac0:	str	r4, [sp, #72]	; 0x48
   12ac4:	str	r4, [sp, #28]
   12ac8:	str	r3, [sp, #60]	; 0x3c
   12acc:	mov	r8, #2
   12ad0:	b	127bc <__assert_fail@plt+0x1860>
   12ad4:	cmp	r4, #0
   12ad8:	bne	13d64 <__assert_fail@plt+0x2e08>
   12adc:	cmp	sl, #0
   12ae0:	beq	13b24 <__assert_fail@plt+0x2bc8>
   12ae4:	mov	r3, #34	; 0x22
   12ae8:	strb	r3, [fp]
   12aec:	ldr	r3, [pc, #2528]	; 134d4 <__assert_fail@plt+0x2578>
   12af0:	mov	r1, r4
   12af4:	mov	r2, #1
   12af8:	str	r4, [sp, #68]	; 0x44
   12afc:	str	r2, [sp, #40]	; 0x28
   12b00:	mov	r4, r2
   12b04:	str	r1, [sp, #44]	; 0x2c
   12b08:	str	r1, [sp, #72]	; 0x48
   12b0c:	str	r1, [sp, #32]
   12b10:	str	r2, [sp, #28]
   12b14:	str	r2, [sp, #52]	; 0x34
   12b18:	str	r3, [sp, #60]	; 0x3c
   12b1c:	b	127bc <__assert_fail@plt+0x1860>
   12b20:	mov	r3, #0
   12b24:	str	r3, [sp, #68]	; 0x44
   12b28:	str	r3, [sp, #44]	; 0x2c
   12b2c:	str	r3, [sp, #32]
   12b30:	str	r3, [sp, #28]
   12b34:	str	r3, [sp, #60]	; 0x3c
   12b38:	mov	r3, #1
   12b3c:	str	r8, [sp, #72]	; 0x48
   12b40:	str	r8, [sp, #52]	; 0x34
   12b44:	mov	r4, r8
   12b48:	str	r3, [sp, #40]	; 0x28
   12b4c:	b	127bc <__assert_fail@plt+0x1860>
   12b50:	mov	r3, #1
   12b54:	str	r3, [sp, #40]	; 0x28
   12b58:	str	r3, [sp, #32]
   12b5c:	str	r3, [sp, #28]
   12b60:	str	r3, [sp, #52]	; 0x34
   12b64:	ldr	r3, [pc, #2408]	; 134d4 <__assert_fail@plt+0x2578>
   12b68:	mov	r2, #0
   12b6c:	mov	r4, r2
   12b70:	str	r2, [sp, #68]	; 0x44
   12b74:	str	r2, [sp, #44]	; 0x2c
   12b78:	str	r2, [sp, #72]	; 0x48
   12b7c:	str	r3, [sp, #60]	; 0x3c
   12b80:	mov	r8, #5
   12b84:	b	127bc <__assert_fail@plt+0x1860>
   12b88:	mov	r3, #0
   12b8c:	mov	r2, #1
   12b90:	str	r2, [sp, #40]	; 0x28
   12b94:	mov	r4, r3
   12b98:	str	r3, [sp, #68]	; 0x44
   12b9c:	str	r2, [sp, #28]
   12ba0:	str	r3, [sp, #44]	; 0x2c
   12ba4:	str	r3, [sp, #72]	; 0x48
   12ba8:	str	r3, [sp, #32]
   12bac:	str	r3, [sp, #52]	; 0x34
   12bb0:	str	r3, [sp, #60]	; 0x3c
   12bb4:	b	127bc <__assert_fail@plt+0x1860>
   12bb8:	mov	r2, #1
   12bbc:	mov	r3, #0
   12bc0:	str	r2, [sp, #40]	; 0x28
   12bc4:	mov	r4, r3
   12bc8:	str	r3, [sp, #68]	; 0x44
   12bcc:	str	r8, [sp, #52]	; 0x34
   12bd0:	str	r2, [sp, #32]
   12bd4:	b	12ab8 <__assert_fail@plt+0x1b5c>
   12bd8:	mov	r3, #1
   12bdc:	str	r3, [sp, #40]	; 0x28
   12be0:	str	r3, [sp, #32]
   12be4:	str	r3, [sp, #28]
   12be8:	str	r3, [sp, #52]	; 0x34
   12bec:	ldr	r3, [pc, #2276]	; 134d8 <__assert_fail@plt+0x257c>
   12bf0:	mov	r2, #0
   12bf4:	mov	r4, r2
   12bf8:	str	r2, [sp, #68]	; 0x44
   12bfc:	str	r2, [sp, #44]	; 0x2c
   12c00:	str	r2, [sp, #72]	; 0x48
   12c04:	str	r3, [sp, #60]	; 0x3c
   12c08:	mov	r8, #2
   12c0c:	b	127bc <__assert_fail@plt+0x1860>
   12c10:	mov	r7, #0
   12c14:	ldr	r3, [sp, #24]
   12c18:	cmn	r3, #1
   12c1c:	beq	13758 <__assert_fail@plt+0x27fc>
   12c20:	ldr	r3, [sp, #24]
   12c24:	subs	r3, r3, #1
   12c28:	movne	r3, #1
   12c2c:	cmp	r3, #0
   12c30:	sub	r2, fp, #2
   12c34:	clz	r2, r2
   12c38:	lsr	r2, r2, #5
   12c3c:	bne	12e38 <__assert_fail@plt+0x1edc>
   12c40:	cmp	r9, #0
   12c44:	bne	12e38 <__assert_fail@plt+0x1edc>
   12c48:	ldr	r3, [sp, #32]
   12c4c:	tst	r3, r2
   12c50:	bne	12f58 <__assert_fail@plt+0x1ffc>
   12c54:	ldr	r3, [sp, #28]
   12c58:	eor	r3, r3, #1
   12c5c:	orr	r3, r2, r3
   12c60:	ldr	r2, [sp, #32]
   12c64:	eor	r3, r3, #1
   12c68:	orrs	r3, r2, r3
   12c6c:	beq	12c9c <__assert_fail@plt+0x1d40>
   12c70:	mov	r3, #0
   12c74:	ldr	r1, [sp, #56]	; 0x38
   12c78:	cmp	r1, #0
   12c7c:	beq	12c9c <__assert_fail@plt+0x1d40>
   12c80:	lsr	r2, r5, #5
   12c84:	and	r0, r5, #31
   12c88:	uxtb	r2, r2
   12c8c:	ldr	r1, [r1, r2, lsl #2]
   12c90:	lsr	r2, r1, r0
   12c94:	tst	r2, #1
   12c98:	bne	12ca4 <__assert_fail@plt+0x1d48>
   12c9c:	cmp	r7, #0
   12ca0:	beq	12ef4 <__assert_fail@plt+0x1f98>
   12ca4:	sub	r2, fp, #2
   12ca8:	clz	r2, r2
   12cac:	lsr	r2, r2, #5
   12cb0:	ldr	r3, [sp, #32]
   12cb4:	cmp	r3, #0
   12cb8:	bne	12fe4 <__assert_fail@plt+0x2088>
   12cbc:	ldr	r3, [sp, #44]	; 0x2c
   12cc0:	eor	r3, r3, #1
   12cc4:	ands	r3, r2, r3
   12cc8:	beq	12d00 <__assert_fail@plt+0x1da4>
   12ccc:	cmp	sl, r4
   12cd0:	movhi	r2, #39	; 0x27
   12cd4:	strbhi	r2, [r8, r4]
   12cd8:	add	r2, r4, #1
   12cdc:	cmp	r2, sl
   12ce0:	movcc	r1, #36	; 0x24
   12ce4:	strbcc	r1, [r8, r2]
   12ce8:	add	r2, r4, #2
   12cec:	cmp	r2, sl
   12cf0:	add	r4, r4, #3
   12cf4:	movcc	r1, #39	; 0x27
   12cf8:	strbcc	r1, [r8, r2]
   12cfc:	str	r3, [sp, #44]	; 0x2c
   12d00:	cmp	r4, sl
   12d04:	movcc	r3, #92	; 0x5c
   12d08:	strbcc	r3, [r8, r4]
   12d0c:	add	r9, r9, #1
   12d10:	add	r4, r4, #1
   12d14:	cmp	r4, sl
   12d18:	ldr	r3, [sp, #40]	; 0x28
   12d1c:	strbcc	r5, [r8, r4]
   12d20:	cmp	r6, #0
   12d24:	moveq	r3, #0
   12d28:	str	r3, [sp, #40]	; 0x28
   12d2c:	ldr	r3, [sp, #24]
   12d30:	add	r4, r4, #1
   12d34:	cmn	r3, #1
   12d38:	bne	127d8 <__assert_fail@plt+0x187c>
   12d3c:	ldr	r3, [sp, #36]	; 0x24
   12d40:	ldrb	r6, [r3, r9]
   12d44:	adds	r6, r6, #0
   12d48:	movne	r6, #1
   12d4c:	cmp	r6, #0
   12d50:	bne	127ec <__assert_fail@plt+0x1890>
   12d54:	str	fp, [sp, #160]	; 0xa0
   12d58:	mov	fp, r8
   12d5c:	ldr	r8, [sp, #160]	; 0xa0
   12d60:	ldr	r1, [sp, #32]
   12d64:	cmp	r4, #0
   12d68:	sub	r2, r8, #2
   12d6c:	clz	r2, r2
   12d70:	lsr	r2, r2, #5
   12d74:	andeq	r3, r2, r1
   12d78:	movne	r3, #0
   12d7c:	cmp	r3, #0
   12d80:	bne	13e6c <__assert_fail@plt+0x2f10>
   12d84:	eor	r3, r1, #1
   12d88:	ands	r2, r2, r3
   12d8c:	beq	13da8 <__assert_fail@plt+0x2e4c>
   12d90:	ldr	r3, [sp, #68]	; 0x44
   12d94:	cmp	r3, #0
   12d98:	beq	13dac <__assert_fail@plt+0x2e50>
   12d9c:	ldr	r3, [sp, #40]	; 0x28
   12da0:	cmp	r3, #0
   12da4:	bne	13e28 <__assert_fail@plt+0x2ecc>
   12da8:	ldr	r3, [sp, #72]	; 0x48
   12dac:	adds	r3, r3, #0
   12db0:	movne	r3, #1
   12db4:	cmp	sl, #0
   12db8:	movne	r3, #0
   12dbc:	cmp	r3, #0
   12dc0:	ldreq	r2, [sp, #68]	; 0x44
   12dc4:	beq	13dac <__assert_fail@plt+0x2e50>
   12dc8:	ldr	sl, [sp, #72]	; 0x48
   12dcc:	str	r3, [sp, #68]	; 0x44
   12dd0:	ldr	r3, [pc, #1792]	; 134d8 <__assert_fail@plt+0x257c>
   12dd4:	mov	r2, #39	; 0x27
   12dd8:	mov	r4, #1
   12ddc:	str	r3, [sp, #60]	; 0x3c
   12de0:	mov	r3, #0
   12de4:	strb	r2, [fp]
   12de8:	str	r4, [sp, #52]	; 0x34
   12dec:	mov	r8, #2
   12df0:	str	r3, [sp, #32]
   12df4:	b	127bc <__assert_fail@plt+0x1860>
   12df8:	mov	r7, #0
   12dfc:	cmp	fp, #2
   12e00:	beq	13738 <__assert_fail@plt+0x27dc>
   12e04:	ldr	r3, [sp, #52]	; 0x34
   12e08:	ldr	r2, [sp, #28]
   12e0c:	ldr	r1, [sp, #32]
   12e10:	cmp	r3, #0
   12e14:	andne	r2, r2, r1
   12e18:	moveq	r2, #0
   12e1c:	cmp	r2, #0
   12e20:	moveq	r5, #92	; 0x5c
   12e24:	moveq	r3, r5
   12e28:	bne	13744 <__assert_fail@plt+0x27e8>
   12e2c:	ldr	r1, [sp, #28]
   12e30:	cmp	r1, #0
   12e34:	bne	13eb4 <__assert_fail@plt+0x2f58>
   12e38:	mov	r6, #0
   12e3c:	b	12c54 <__assert_fail@plt+0x1cf8>
   12e40:	mov	r7, #0
   12e44:	cmp	fp, #2
   12e48:	beq	137a8 <__assert_fail@plt+0x284c>
   12e4c:	cmp	fp, #5
   12e50:	beq	1376c <__assert_fail@plt+0x2810>
   12e54:	sub	r2, fp, #2
   12e58:	mov	r6, #0
   12e5c:	clz	r2, r2
   12e60:	mov	r5, #63	; 0x3f
   12e64:	lsr	r2, r2, #5
   12e68:	b	12c54 <__assert_fail@plt+0x1cf8>
   12e6c:	mov	r7, #0
   12e70:	cmp	fp, #2
   12e74:	strne	r6, [sp, #68]	; 0x44
   12e78:	movne	r2, #0
   12e7c:	movne	r5, #39	; 0x27
   12e80:	bne	12c54 <__assert_fail@plt+0x1cf8>
   12e84:	ldr	r3, [sp, #32]
   12e88:	cmp	r3, #0
   12e8c:	bne	13b88 <__assert_fail@plt+0x2c2c>
   12e90:	cmp	sl, #0
   12e94:	ldr	r3, [sp, #72]	; 0x48
   12e98:	clz	r3, r3
   12e9c:	lsr	r3, r3, #5
   12ea0:	moveq	r3, #0
   12ea4:	cmp	r3, #0
   12ea8:	bne	13abc <__assert_fail@plt+0x2b60>
   12eac:	cmp	sl, r4
   12eb0:	movhi	r3, #39	; 0x27
   12eb4:	strbhi	r3, [r8, r4]
   12eb8:	add	r3, r4, #1
   12ebc:	cmp	sl, r3
   12ec0:	movhi	r2, #92	; 0x5c
   12ec4:	strbhi	r2, [r8, r3]
   12ec8:	add	r3, r4, #2
   12ecc:	cmp	sl, r3
   12ed0:	movhi	r2, #39	; 0x27
   12ed4:	strbhi	r2, [r8, r3]
   12ed8:	mov	r3, #0
   12edc:	cmp	r7, #0
   12ee0:	add	r4, r4, #3
   12ee4:	str	r3, [sp, #44]	; 0x2c
   12ee8:	str	r6, [sp, #68]	; 0x44
   12eec:	mov	r5, #39	; 0x27
   12ef0:	bne	12ca4 <__assert_fail@plt+0x1d48>
   12ef4:	ldr	r2, [sp, #44]	; 0x2c
   12ef8:	eor	r3, r3, #1
   12efc:	and	r3, r3, r2
   12f00:	add	r9, r9, #1
   12f04:	uxtb	r3, r3
   12f08:	cmp	r3, #0
   12f0c:	beq	12d14 <__assert_fail@plt+0x1db8>
   12f10:	cmp	sl, r4
   12f14:	movhi	r3, #39	; 0x27
   12f18:	strbhi	r3, [r8, r4]
   12f1c:	add	r3, r4, #1
   12f20:	cmp	sl, r3
   12f24:	movhi	r2, #39	; 0x27
   12f28:	strbhi	r2, [r8, r3]
   12f2c:	mov	r3, #0
   12f30:	add	r4, r4, #2
   12f34:	str	r3, [sp, #44]	; 0x2c
   12f38:	b	12d14 <__assert_fail@plt+0x1db8>
   12f3c:	mov	r3, #114	; 0x72
   12f40:	ldr	r1, [sp, #32]
   12f44:	sub	r2, fp, #2
   12f48:	clz	r2, r2
   12f4c:	lsr	r2, r2, #5
   12f50:	tst	r2, r1
   12f54:	beq	12e2c <__assert_fail@plt+0x1ed0>
   12f58:	mov	fp, r8
   12f5c:	mov	r8, #2
   12f60:	ldr	r3, [sp, #28]
   12f64:	cmp	r3, #0
   12f68:	movne	r8, #4
   12f6c:	ldr	r3, [sp, #164]	; 0xa4
   12f70:	mov	ip, #0
   12f74:	bic	r3, r3, #2
   12f78:	str	r3, [sp, #4]
   12f7c:	ldr	r3, [sp, #76]	; 0x4c
   12f80:	str	r8, [sp]
   12f84:	str	r3, [sp, #16]
   12f88:	ldr	r3, [sp, #80]	; 0x50
   12f8c:	ldr	r2, [sp, #36]	; 0x24
   12f90:	str	r3, [sp, #12]
   12f94:	mov	r1, sl
   12f98:	ldr	r3, [sp, #24]
   12f9c:	mov	r0, fp
   12fa0:	str	ip, [sp, #8]
   12fa4:	bl	126c4 <__assert_fail@plt+0x1768>
   12fa8:	mov	r4, r0
   12fac:	ldr	r3, [pc, #1304]	; 134cc <__assert_fail@plt+0x2570>
   12fb0:	ldr	r2, [sp, #116]	; 0x74
   12fb4:	mov	r0, r4
   12fb8:	ldr	r3, [r3]
   12fbc:	cmp	r2, r3
   12fc0:	bne	13eb0 <__assert_fail@plt+0x2f54>
   12fc4:	add	sp, sp, #124	; 0x7c
   12fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fcc:	mov	r5, #110	; 0x6e
   12fd0:	ldr	r3, [sp, #32]
   12fd4:	mov	r2, #0
   12fd8:	cmp	r3, #0
   12fdc:	mov	r6, r2
   12fe0:	beq	12cbc <__assert_fail@plt+0x1d60>
   12fe4:	str	fp, [sp, #160]	; 0xa0
   12fe8:	mov	fp, r8
   12fec:	ldr	r8, [sp, #160]	; 0xa0
   12ff0:	mov	r3, r2
   12ff4:	ldr	r2, [sp, #28]
   12ff8:	and	r2, r2, r3
   12ffc:	str	r2, [sp, #28]
   13000:	b	12f60 <__assert_fail@plt+0x2004>
   13004:	mov	r5, #116	; 0x74
   13008:	b	12fd0 <__assert_fail@plt+0x2074>
   1300c:	mov	r5, #102	; 0x66
   13010:	ldr	r3, [sp, #32]
   13014:	cmp	r3, #0
   13018:	bne	13bc4 <__assert_fail@plt+0x2c68>
   1301c:	mov	r6, #0
   13020:	b	12d00 <__assert_fail@plt+0x1da4>
   13024:	mov	r5, #118	; 0x76
   13028:	b	13010 <__assert_fail@plt+0x20b4>
   1302c:	mov	r7, #0
   13030:	mov	r6, #0
   13034:	b	12c70 <__assert_fail@plt+0x1d14>
   13038:	ldr	r3, [sp, #32]
   1303c:	cmp	r3, #0
   13040:	bne	13e08 <__assert_fail@plt+0x2eac>
   13044:	mov	r7, r3
   13048:	ldr	r3, [sp, #44]	; 0x2c
   1304c:	sub	r2, fp, #2
   13050:	eor	r3, r3, #1
   13054:	clz	r2, r2
   13058:	lsr	r2, r2, #5
   1305c:	ands	r3, r2, r3
   13060:	beq	13aa8 <__assert_fail@plt+0x2b4c>
   13064:	cmp	sl, r4
   13068:	movhi	r1, #39	; 0x27
   1306c:	strbhi	r1, [r8, r4]
   13070:	add	r1, r4, #1
   13074:	cmp	sl, r1
   13078:	movhi	r0, #36	; 0x24
   1307c:	strbhi	r0, [r8, r1]
   13080:	add	r1, r4, #2
   13084:	cmp	sl, r1
   13088:	movhi	r0, #39	; 0x27
   1308c:	strbhi	r0, [r8, r1]
   13090:	add	r1, r4, #3
   13094:	cmp	sl, r1
   13098:	bls	13b08 <__assert_fail@plt+0x2bac>
   1309c:	mov	r4, r1
   130a0:	mov	r1, #92	; 0x5c
   130a4:	strb	r1, [r8, r4]
   130a8:	mov	r1, r4
   130ac:	str	r3, [sp, #44]	; 0x2c
   130b0:	cmp	fp, #2
   130b4:	add	r4, r4, #1
   130b8:	beq	13b50 <__assert_fail@plt+0x2bf4>
   130bc:	ldr	r0, [sp, #24]
   130c0:	add	r3, r9, #1
   130c4:	cmp	r3, r0
   130c8:	bcs	130e0 <__assert_fail@plt+0x2184>
   130cc:	ldr	r0, [sp, #36]	; 0x24
   130d0:	ldrb	r3, [r0, r3]
   130d4:	sub	r3, r3, #48	; 0x30
   130d8:	cmp	r3, #9
   130dc:	bls	13b60 <__assert_fail@plt+0x2c04>
   130e0:	mov	r5, #48	; 0x30
   130e4:	ldr	r3, [sp, #28]
   130e8:	eor	r3, r3, #1
   130ec:	orrs	r2, r2, r3
   130f0:	mov	r3, r6
   130f4:	moveq	r6, r2
   130f8:	beq	12c74 <__assert_fail@plt+0x1d18>
   130fc:	mov	r6, #0
   13100:	b	12c9c <__assert_fail@plt+0x1d40>
   13104:	mov	r2, #0
   13108:	mov	r6, r2
   1310c:	mov	r5, #98	; 0x62
   13110:	b	12cbc <__assert_fail@plt+0x1d60>
   13114:	mov	r5, #97	; 0x61
   13118:	b	1301c <__assert_fail@plt+0x20c0>
   1311c:	mov	r3, r7
   13120:	mov	r6, r7
   13124:	mov	r2, #0
   13128:	mov	r7, r3
   1312c:	mov	r5, #32
   13130:	b	12c54 <__assert_fail@plt+0x1cf8>
   13134:	cmp	r9, #0
   13138:	mov	r3, r7
   1313c:	bne	13704 <__assert_fail@plt+0x27a8>
   13140:	mov	r6, r7
   13144:	mov	r2, r9
   13148:	mov	r7, r3
   1314c:	b	12c54 <__assert_fail@plt+0x1cf8>
   13150:	mov	r6, r7
   13154:	b	12c70 <__assert_fail@plt+0x1d14>
   13158:	mov	r7, #0
   1315c:	ldr	r3, [sp, #64]	; 0x40
   13160:	cmp	r3, #1
   13164:	bne	137c0 <__assert_fail@plt+0x2864>
   13168:	bl	10e54 <__ctype_b_loc@plt>
   1316c:	ldr	r2, [sp, #64]	; 0x40
   13170:	sxth	r3, r5
   13174:	mov	ip, r2
   13178:	lsl	r3, r3, #1
   1317c:	ldr	r2, [r0]
   13180:	ldrh	r3, [r2, r3]
   13184:	and	r3, r3, #16384	; 0x4000
   13188:	cmp	r3, #0
   1318c:	ldr	r3, [sp, #28]
   13190:	movne	r6, #1
   13194:	moveq	r6, #0
   13198:	movne	r2, #0
   1319c:	andeq	r2, r3, #1
   131a0:	cmp	r2, #0
   131a4:	bne	13ad0 <__assert_fail@plt+0x2b74>
   131a8:	sub	r2, fp, #2
   131ac:	clz	r2, r2
   131b0:	lsr	r2, r2, #5
   131b4:	b	12c54 <__assert_fail@plt+0x1cf8>
   131b8:	cmp	r4, #0
   131bc:	bne	13e7c <__assert_fail@plt+0x2f20>
   131c0:	str	r4, [sp, #28]
   131c4:	cmp	sl, #0
   131c8:	bne	13ec0 <__assert_fail@plt+0x2f64>
   131cc:	ldr	r3, [pc, #772]	; 134d8 <__assert_fail@plt+0x257c>
   131d0:	mov	r4, #1
   131d4:	str	r4, [sp, #40]	; 0x28
   131d8:	str	r3, [sp, #60]	; 0x3c
   131dc:	str	r4, [sp, #52]	; 0x34
   131e0:	str	sl, [sp, #72]	; 0x48
   131e4:	str	sl, [sp, #68]	; 0x44
   131e8:	str	sl, [sp, #44]	; 0x2c
   131ec:	str	sl, [sp, #32]
   131f0:	mov	r8, #2
   131f4:	b	127bc <__assert_fail@plt+0x1860>
   131f8:	ldr	r3, [sp, #36]	; 0x24
   131fc:	ldrb	r5, [r3, r9]
   13200:	cmp	r5, #126	; 0x7e
   13204:	ldrls	pc, [pc, r5, lsl #2]
   13208:	b	1315c <__assert_fail@plt+0x2200>
   1320c:	andeq	r3, r1, r0, asr #8
   13210:	andeq	r3, r1, ip, asr r1
   13214:	andeq	r3, r1, ip, asr r1
   13218:	andeq	r3, r1, ip, asr r1
   1321c:	andeq	r3, r1, ip, asr r1
   13220:	andeq	r3, r1, ip, asr r1
   13224:	andeq	r3, r1, ip, asr r1
   13228:	andeq	r3, r1, ip, lsr #8
   1322c:	andeq	r3, r1, r8, lsl r4
   13230:	andeq	r3, r1, r0, lsl r4
   13234:	andeq	r3, r1, r8, lsl #8
   13238:			; <UNDEFINED> instruction: 0x000134b8
   1323c:	andeq	r3, r1, r4, lsr #9
   13240:	andeq	r2, r1, ip, lsr pc
   13244:	andeq	r3, r1, ip, asr r1
   13248:	andeq	r3, r1, ip, asr r1
   1324c:	andeq	r3, r1, ip, asr r1
   13250:	andeq	r3, r1, ip, asr r1
   13254:	andeq	r3, r1, ip, asr r1
   13258:	andeq	r3, r1, ip, asr r1
   1325c:	andeq	r3, r1, ip, asr r1
   13260:	andeq	r3, r1, ip, asr r1
   13264:	andeq	r3, r1, ip, asr r1
   13268:	andeq	r3, r1, ip, asr r1
   1326c:	andeq	r3, r1, ip, asr r1
   13270:	andeq	r3, r1, ip, asr r1
   13274:	andeq	r3, r1, ip, asr r1
   13278:	andeq	r3, r1, ip, asr r1
   1327c:	andeq	r3, r1, ip, asr r1
   13280:	andeq	r3, r1, ip, asr r1
   13284:	andeq	r3, r1, ip, asr r1
   13288:	andeq	r3, r1, ip, asr r1
   1328c:	muleq	r1, r4, r4
   13290:	andeq	r3, r1, r0, lsl #9
   13294:	andeq	r3, r1, r0, lsl #9
   13298:	andeq	r3, r1, r0, ror r4
   1329c:	andeq	r3, r1, r0, lsl #9
   132a0:	andeq	r3, r1, r8, lsr #3
   132a4:	andeq	r3, r1, r0, lsl #9
   132a8:	andeq	r2, r1, r0, ror lr
   132ac:	andeq	r3, r1, r0, lsl #9
   132b0:	andeq	r3, r1, r0, lsl #9
   132b4:	andeq	r3, r1, r0, lsl #9
   132b8:	andeq	r3, r1, r8, lsr #3
   132bc:	andeq	r3, r1, r8, lsr #3
   132c0:	andeq	r3, r1, r8, lsr #3
   132c4:	andeq	r3, r1, r8, lsr #3
   132c8:	andeq	r3, r1, r8, lsr #3
   132cc:	andeq	r3, r1, r8, lsr #3
   132d0:	andeq	r3, r1, r8, lsr #3
   132d4:	andeq	r3, r1, r8, lsr #3
   132d8:	andeq	r3, r1, r8, lsr #3
   132dc:	andeq	r3, r1, r8, lsr #3
   132e0:	andeq	r3, r1, r8, lsr #3
   132e4:	andeq	r3, r1, r8, lsr #3
   132e8:	andeq	r3, r1, r8, lsr #3
   132ec:	andeq	r3, r1, r8, lsr #3
   132f0:	andeq	r3, r1, r8, lsr #3
   132f4:	andeq	r3, r1, r8, lsr #3
   132f8:	andeq	r3, r1, r0, lsl #9
   132fc:	andeq	r3, r1, r0, lsl #9
   13300:	andeq	r3, r1, r0, lsl #9
   13304:	andeq	r3, r1, r0, lsl #9
   13308:	andeq	r2, r1, r4, asr #28
   1330c:	andeq	r3, r1, ip, asr r1
   13310:	andeq	r3, r1, r8, lsr #3
   13314:	andeq	r3, r1, r8, lsr #3
   13318:	andeq	r3, r1, r8, lsr #3
   1331c:	andeq	r3, r1, r8, lsr #3
   13320:	andeq	r3, r1, r8, lsr #3
   13324:	andeq	r3, r1, r8, lsr #3
   13328:	andeq	r3, r1, r8, lsr #3
   1332c:	andeq	r3, r1, r8, lsr #3
   13330:	andeq	r3, r1, r8, lsr #3
   13334:	andeq	r3, r1, r8, lsr #3
   13338:	andeq	r3, r1, r8, lsr #3
   1333c:	andeq	r3, r1, r8, lsr #3
   13340:	andeq	r3, r1, r8, lsr #3
   13344:	andeq	r3, r1, r8, lsr #3
   13348:	andeq	r3, r1, r8, lsr #3
   1334c:	andeq	r3, r1, r8, lsr #3
   13350:	andeq	r3, r1, r8, lsr #3
   13354:	andeq	r3, r1, r8, lsr #3
   13358:	andeq	r3, r1, r8, lsr #3
   1335c:	andeq	r3, r1, r8, lsr #3
   13360:	andeq	r3, r1, r8, lsr #3
   13364:	andeq	r3, r1, r8, lsr #3
   13368:	andeq	r3, r1, r8, lsr #3
   1336c:	andeq	r3, r1, r8, lsr #3
   13370:	andeq	r3, r1, r8, lsr #3
   13374:	andeq	r3, r1, r8, lsr #3
   13378:	andeq	r3, r1, r0, lsl #9
   1337c:	strdeq	r2, [r1], -ip
   13380:	andeq	r3, r1, r8, lsr #3
   13384:	andeq	r3, r1, r0, lsl #9
   13388:	andeq	r3, r1, r8, lsr #3
   1338c:	andeq	r3, r1, r0, lsl #9
   13390:	andeq	r3, r1, r8, lsr #3
   13394:	andeq	r3, r1, r8, lsr #3
   13398:	andeq	r3, r1, r8, lsr #3
   1339c:	andeq	r3, r1, r8, lsr #3
   133a0:	andeq	r3, r1, r8, lsr #3
   133a4:	andeq	r3, r1, r8, lsr #3
   133a8:	andeq	r3, r1, r8, lsr #3
   133ac:	andeq	r3, r1, r8, lsr #3
   133b0:	andeq	r3, r1, r8, lsr #3
   133b4:	andeq	r3, r1, r8, lsr #3
   133b8:	andeq	r3, r1, r8, lsr #3
   133bc:	andeq	r3, r1, r8, lsr #3
   133c0:	andeq	r3, r1, r8, lsr #3
   133c4:	andeq	r3, r1, r8, lsr #3
   133c8:	andeq	r3, r1, r8, lsr #3
   133cc:	andeq	r3, r1, r8, lsr #3
   133d0:	andeq	r3, r1, r8, lsr #3
   133d4:	andeq	r3, r1, r8, lsr #3
   133d8:	andeq	r3, r1, r8, lsr #3
   133dc:	andeq	r3, r1, r8, lsr #3
   133e0:	andeq	r3, r1, r8, lsr #3
   133e4:	andeq	r3, r1, r8, lsr #3
   133e8:	andeq	r3, r1, r8, lsr #3
   133ec:	andeq	r3, r1, r8, lsr #3
   133f0:	andeq	r3, r1, r8, lsr #3
   133f4:	andeq	r3, r1, r8, lsr #3
   133f8:	andeq	r2, r1, r4, lsl ip
   133fc:	andeq	r3, r1, r0, lsl #9
   13400:	andeq	r2, r1, r4, lsl ip
   13404:	andeq	r3, r1, r0, ror r4
   13408:	mov	r3, #110	; 0x6e
   1340c:	b	12f40 <__assert_fail@plt+0x1fe4>
   13410:	mov	r3, #116	; 0x74
   13414:	b	12f40 <__assert_fail@plt+0x1fe4>
   13418:	sub	r2, fp, #2
   1341c:	mov	r3, #98	; 0x62
   13420:	clz	r2, r2
   13424:	lsr	r2, r2, #5
   13428:	b	12e2c <__assert_fail@plt+0x1ed0>
   1342c:	sub	r2, fp, #2
   13430:	mov	r3, #97	; 0x61
   13434:	clz	r2, r2
   13438:	lsr	r2, r2, #5
   1343c:	b	12e2c <__assert_fail@plt+0x1ed0>
   13440:	ldr	r3, [sp, #28]
   13444:	cmp	r3, #0
   13448:	bne	13038 <__assert_fail@plt+0x20dc>
   1344c:	ldr	r3, [sp, #164]	; 0xa4
   13450:	tst	r3, #1
   13454:	bne	13ac8 <__assert_fail@plt+0x2b6c>
   13458:	ldr	r6, [sp, #28]
   1345c:	sub	r2, fp, #2
   13460:	mov	r7, r6
   13464:	clz	r2, r2
   13468:	lsr	r2, r2, #5
   1346c:	b	12c54 <__assert_fail@plt+0x1cf8>
   13470:	sub	r2, fp, #2
   13474:	clz	r2, r2
   13478:	lsr	r2, r2, #5
   1347c:	b	12c40 <__assert_fail@plt+0x1ce4>
   13480:	sub	r2, fp, #2
   13484:	mov	r6, #0
   13488:	clz	r2, r2
   1348c:	lsr	r2, r2, #5
   13490:	b	12c48 <__assert_fail@plt+0x1cec>
   13494:	sub	r2, fp, #2
   13498:	clz	r2, r2
   1349c:	lsr	r2, r2, #5
   134a0:	b	12c48 <__assert_fail@plt+0x1cec>
   134a4:	sub	r2, fp, #2
   134a8:	mov	r3, #102	; 0x66
   134ac:	clz	r2, r2
   134b0:	lsr	r2, r2, #5
   134b4:	b	12e2c <__assert_fail@plt+0x1ed0>
   134b8:	sub	r2, fp, #2
   134bc:	mov	r3, #118	; 0x76
   134c0:	clz	r2, r2
   134c4:	lsr	r2, r2, #5
   134c8:	b	12e2c <__assert_fail@plt+0x1ed0>
   134cc:	andeq	r6, r2, r8, lsl #30
   134d0:	andeq	r5, r1, r0, asr pc
   134d4:	andeq	r5, r1, r8, lsr pc
   134d8:	andeq	r5, r1, ip, asr #30
   134dc:	ldr	r3, [sp, #48]	; 0x30
   134e0:	ldrb	r5, [r3]
   134e4:	cmp	r5, #126	; 0x7e
   134e8:	ldrls	pc, [pc, r5, lsl #2]
   134ec:	b	13158 <__assert_fail@plt+0x21fc>
   134f0:	andeq	r3, r1, r8, lsr r0
   134f4:	andeq	r3, r1, r8, asr r1
   134f8:	andeq	r3, r1, r8, asr r1
   134fc:	andeq	r3, r1, r8, asr r1
   13500:	andeq	r3, r1, r8, asr r1
   13504:	andeq	r3, r1, r8, asr r1
   13508:	andeq	r3, r1, r8, asr r1
   1350c:	andeq	r3, r1, r0, lsr r7
   13510:	andeq	r3, r1, r8, lsr #14
   13514:	andeq	r3, r1, r4
   13518:	andeq	r2, r1, ip, asr #31
   1351c:	andeq	r3, r1, r4, lsr #32
   13520:	andeq	r3, r1, ip
   13524:	andeq	r3, r1, ip, lsl r7
   13528:	andeq	r3, r1, r8, asr r1
   1352c:	andeq	r3, r1, r8, asr r1
   13530:	andeq	r3, r1, r8, asr r1
   13534:	andeq	r3, r1, r8, asr r1
   13538:	andeq	r3, r1, r8, asr r1
   1353c:	andeq	r3, r1, r8, asr r1
   13540:	andeq	r3, r1, r8, asr r1
   13544:	andeq	r3, r1, r8, asr r1
   13548:	andeq	r3, r1, r8, asr r1
   1354c:	andeq	r3, r1, r8, asr r1
   13550:	andeq	r3, r1, r8, asr r1
   13554:	andeq	r3, r1, r8, asr r1
   13558:	andeq	r3, r1, r8, asr r1
   1355c:	andeq	r3, r1, r8, asr r1
   13560:	andeq	r3, r1, r8, asr r1
   13564:	andeq	r3, r1, r8, asr r1
   13568:	andeq	r3, r1, r8, asr r1
   1356c:	andeq	r3, r1, r8, asr r1
   13570:	andeq	r3, r1, r4, lsl r7
   13574:	andeq	r3, r1, ip, lsr #32
   13578:	andeq	r3, r1, ip, lsr #32
   1357c:	strdeq	r3, [r1], -r8
   13580:	andeq	r3, r1, ip, lsr #32
   13584:	andeq	r3, r1, ip, ror #13
   13588:	andeq	r3, r1, ip, lsr #32
   1358c:	andeq	r2, r1, ip, ror #28
   13590:	andeq	r3, r1, ip, lsr #32
   13594:	andeq	r3, r1, ip, lsr #32
   13598:	andeq	r3, r1, ip, lsr #32
   1359c:	andeq	r3, r1, ip, ror #13
   135a0:	andeq	r3, r1, ip, ror #13
   135a4:	andeq	r3, r1, ip, ror #13
   135a8:	andeq	r3, r1, ip, ror #13
   135ac:	andeq	r3, r1, ip, ror #13
   135b0:	andeq	r3, r1, ip, ror #13
   135b4:	andeq	r3, r1, ip, ror #13
   135b8:	andeq	r3, r1, ip, ror #13
   135bc:	andeq	r3, r1, ip, ror #13
   135c0:	andeq	r3, r1, ip, ror #13
   135c4:	andeq	r3, r1, ip, ror #13
   135c8:	andeq	r3, r1, ip, ror #13
   135cc:	andeq	r3, r1, ip, ror #13
   135d0:	andeq	r3, r1, ip, ror #13
   135d4:	andeq	r3, r1, ip, ror #13
   135d8:	andeq	r3, r1, ip, ror #13
   135dc:	andeq	r3, r1, ip, lsr #32
   135e0:	andeq	r3, r1, ip, lsr #32
   135e4:	andeq	r3, r1, ip, lsr #32
   135e8:	andeq	r3, r1, ip, lsr #32
   135ec:	andeq	r2, r1, r0, asr #28
   135f0:	andeq	r3, r1, r8, asr r1
   135f4:	andeq	r3, r1, ip, ror #13
   135f8:	andeq	r3, r1, ip, ror #13
   135fc:	andeq	r3, r1, ip, ror #13
   13600:	andeq	r3, r1, ip, ror #13
   13604:	andeq	r3, r1, ip, ror #13
   13608:	andeq	r3, r1, ip, ror #13
   1360c:	andeq	r3, r1, ip, ror #13
   13610:	andeq	r3, r1, ip, ror #13
   13614:	andeq	r3, r1, ip, ror #13
   13618:	andeq	r3, r1, ip, ror #13
   1361c:	andeq	r3, r1, ip, ror #13
   13620:	andeq	r3, r1, ip, ror #13
   13624:	andeq	r3, r1, ip, ror #13
   13628:	andeq	r3, r1, ip, ror #13
   1362c:	andeq	r3, r1, ip, ror #13
   13630:	andeq	r3, r1, ip, ror #13
   13634:	andeq	r3, r1, ip, ror #13
   13638:	andeq	r3, r1, ip, ror #13
   1363c:	andeq	r3, r1, ip, ror #13
   13640:	andeq	r3, r1, ip, ror #13
   13644:	andeq	r3, r1, ip, ror #13
   13648:	andeq	r3, r1, ip, ror #13
   1364c:	andeq	r3, r1, ip, ror #13
   13650:	andeq	r3, r1, ip, ror #13
   13654:	andeq	r3, r1, ip, ror #13
   13658:	andeq	r3, r1, ip, ror #13
   1365c:	andeq	r3, r1, ip, lsr #32
   13660:	strdeq	r2, [r1], -r8
   13664:	andeq	r3, r1, ip, ror #13
   13668:	andeq	r3, r1, ip, lsr #32
   1366c:	andeq	r3, r1, ip, ror #13
   13670:	andeq	r3, r1, ip, lsr #32
   13674:	andeq	r3, r1, ip, ror #13
   13678:	andeq	r3, r1, ip, ror #13
   1367c:	andeq	r3, r1, ip, ror #13
   13680:	andeq	r3, r1, ip, ror #13
   13684:	andeq	r3, r1, ip, ror #13
   13688:	andeq	r3, r1, ip, ror #13
   1368c:	andeq	r3, r1, ip, ror #13
   13690:	andeq	r3, r1, ip, ror #13
   13694:	andeq	r3, r1, ip, ror #13
   13698:	andeq	r3, r1, ip, ror #13
   1369c:	andeq	r3, r1, ip, ror #13
   136a0:	andeq	r3, r1, ip, ror #13
   136a4:	andeq	r3, r1, ip, ror #13
   136a8:	andeq	r3, r1, ip, ror #13
   136ac:	andeq	r3, r1, ip, ror #13
   136b0:	andeq	r3, r1, ip, ror #13
   136b4:	andeq	r3, r1, ip, ror #13
   136b8:	andeq	r3, r1, ip, ror #13
   136bc:	andeq	r3, r1, ip, ror #13
   136c0:	andeq	r3, r1, ip, ror #13
   136c4:	andeq	r3, r1, ip, ror #13
   136c8:	andeq	r3, r1, ip, ror #13
   136cc:	andeq	r3, r1, ip, ror #13
   136d0:	andeq	r3, r1, ip, ror #13
   136d4:	andeq	r3, r1, ip, ror #13
   136d8:	andeq	r3, r1, ip, ror #13
   136dc:	andeq	r2, r1, r0, lsl ip
   136e0:	andeq	r3, r1, ip, lsr #32
   136e4:	andeq	r2, r1, r0, lsl ip
   136e8:	strdeq	r3, [r1], -r8
   136ec:	mov	r6, r7
   136f0:	mov	r7, #0
   136f4:	b	12c70 <__assert_fail@plt+0x1d14>
   136f8:	cmp	r9, #0
   136fc:	mov	r3, #0
   13700:	beq	13140 <__assert_fail@plt+0x21e4>
   13704:	mov	r6, #0
   13708:	mov	r7, r3
   1370c:	mov	r3, r6
   13710:	b	12c74 <__assert_fail@plt+0x1d18>
   13714:	mov	r3, #0
   13718:	b	13120 <__assert_fail@plt+0x21c4>
   1371c:	mov	r7, #0
   13720:	mov	r3, #114	; 0x72
   13724:	b	12f40 <__assert_fail@plt+0x1fe4>
   13728:	mov	r5, #98	; 0x62
   1372c:	b	12fd0 <__assert_fail@plt+0x2074>
   13730:	mov	r5, #97	; 0x61
   13734:	b	13010 <__assert_fail@plt+0x20b4>
   13738:	ldr	r3, [sp, #32]
   1373c:	cmp	r3, #0
   13740:	bne	13b88 <__assert_fail@plt+0x2c2c>
   13744:	add	r9, r9, #1
   13748:	ldr	r3, [sp, #44]	; 0x2c
   1374c:	mov	r6, #0
   13750:	mov	r5, #92	; 0x5c
   13754:	b	12f08 <__assert_fail@plt+0x1fac>
   13758:	ldr	r3, [sp, #36]	; 0x24
   1375c:	ldrb	r3, [r3, #1]
   13760:	adds	r3, r3, #0
   13764:	movne	r3, #1
   13768:	b	12c2c <__assert_fail@plt+0x1cd0>
   1376c:	ldr	r3, [sp, #164]	; 0xa4
   13770:	ands	r3, r3, #4
   13774:	beq	13798 <__assert_fail@plt+0x283c>
   13778:	ldr	r2, [sp, #24]
   1377c:	add	r3, r9, #2
   13780:	cmp	r3, r2
   13784:	bcs	13798 <__assert_fail@plt+0x283c>
   13788:	ldr	r2, [sp, #48]	; 0x30
   1378c:	ldrb	r5, [r2, #1]
   13790:	cmp	r5, #63	; 0x3f
   13794:	beq	13bfc <__assert_fail@plt+0x2ca0>
   13798:	mov	r2, #0
   1379c:	mov	r6, r2
   137a0:	mov	r5, #63	; 0x3f
   137a4:	b	12c54 <__assert_fail@plt+0x1cf8>
   137a8:	ldr	r3, [sp, #32]
   137ac:	cmp	r3, #0
   137b0:	bne	13b88 <__assert_fail@plt+0x2c2c>
   137b4:	mov	r6, r3
   137b8:	mov	r5, #63	; 0x3f
   137bc:	b	12c9c <__assert_fail@plt+0x1d40>
   137c0:	ldr	r3, [sp, #24]
   137c4:	cmn	r3, #1
   137c8:	mov	r3, #0
   137cc:	str	r3, [sp, #108]	; 0x6c
   137d0:	str	r3, [sp, #112]	; 0x70
   137d4:	bne	137e4 <__assert_fail@plt+0x2888>
   137d8:	ldr	r0, [sp, #36]	; 0x24
   137dc:	bl	10e6c <strlen@plt>
   137e0:	str	r0, [sp, #24]
   137e4:	mov	r3, #0
   137e8:	str	sl, [sp, #88]	; 0x58
   137ec:	ldr	sl, [sp, #36]	; 0x24
   137f0:	str	r5, [sp, #92]	; 0x5c
   137f4:	mov	r5, r3
   137f8:	str	r7, [sp, #96]	; 0x60
   137fc:	str	r4, [sp, #100]	; 0x64
   13800:	str	r8, [sp, #84]	; 0x54
   13804:	ldr	r3, [sp, #24]
   13808:	add	r4, r9, r5
   1380c:	add	r7, sl, r4
   13810:	sub	r2, r3, r4
   13814:	mov	r1, r7
   13818:	add	r3, sp, #108	; 0x6c
   1381c:	add	r0, sp, #104	; 0x68
   13820:	bl	150b0 <__assert_fail@plt+0x4154>
   13824:	subs	r8, r0, #0
   13828:	beq	13878 <__assert_fail@plt+0x291c>
   1382c:	cmn	r8, #1
   13830:	beq	13bd8 <__assert_fail@plt+0x2c7c>
   13834:	cmn	r8, #2
   13838:	beq	13cf8 <__assert_fail@plt+0x2d9c>
   1383c:	ldr	r3, [sp, #32]
   13840:	cmp	fp, #2
   13844:	movne	r3, #0
   13848:	andeq	r3, r3, #1
   1384c:	cmp	r3, #0
   13850:	bne	139d8 <__assert_fail@plt+0x2a7c>
   13854:	ldr	r0, [sp, #104]	; 0x68
   13858:	bl	10dc4 <iswprint@plt>
   1385c:	add	r5, r5, r8
   13860:	cmp	r0, #0
   13864:	add	r0, sp, #108	; 0x6c
   13868:	moveq	r6, #0
   1386c:	bl	10d70 <mbsinit@plt>
   13870:	cmp	r0, #0
   13874:	beq	13804 <__assert_fail@plt+0x28a8>
   13878:	ldr	r3, [sp, #28]
   1387c:	mov	ip, r5
   13880:	eor	r2, r6, #1
   13884:	ldr	r5, [sp, #92]	; 0x5c
   13888:	ldr	r7, [sp, #96]	; 0x60
   1388c:	ldr	r4, [sp, #100]	; 0x64
   13890:	ldr	r8, [sp, #84]	; 0x54
   13894:	ldr	sl, [sp, #88]	; 0x58
   13898:	and	r2, r2, r3
   1389c:	cmp	ip, #1
   138a0:	bls	131a0 <__assert_fail@plt+0x2244>
   138a4:	add	r1, ip, r9
   138a8:	ldr	lr, [sp, #48]	; 0x30
   138ac:	mov	r0, #0
   138b0:	str	r6, [sp, #48]	; 0x30
   138b4:	mov	ip, #39	; 0x27
   138b8:	ldr	r6, [sp, #44]	; 0x2c
   138bc:	b	13974 <__assert_fail@plt+0x2a18>
   138c0:	ldr	r0, [sp, #32]
   138c4:	sub	r3, fp, #2
   138c8:	cmp	r0, #0
   138cc:	clz	r3, r3
   138d0:	lsr	r3, r3, #5
   138d4:	bne	13adc <__assert_fail@plt+0x2b80>
   138d8:	eor	r0, r6, #1
   138dc:	ands	r3, r3, r0
   138e0:	beq	13910 <__assert_fail@plt+0x29b4>
   138e4:	add	r0, r4, #1
   138e8:	cmp	sl, r4
   138ec:	strbhi	ip, [r8, r4]
   138f0:	cmp	sl, r0
   138f4:	movhi	r6, #36	; 0x24
   138f8:	strbhi	r6, [r8, r0]
   138fc:	add	r0, r4, #2
   13900:	mov	r6, r3
   13904:	add	r4, r4, #3
   13908:	cmp	sl, r0
   1390c:	strbhi	ip, [r8, r0]
   13910:	cmp	sl, r4
   13914:	movhi	r3, #92	; 0x5c
   13918:	strbhi	r3, [r8, r4]
   1391c:	add	r3, r4, #1
   13920:	cmp	sl, r3
   13924:	lsrhi	r0, r5, #6
   13928:	addhi	r0, r0, #48	; 0x30
   1392c:	strbhi	r0, [r8, r3]
   13930:	add	r0, r4, #2
   13934:	cmp	sl, r0
   13938:	lsrhi	r3, r5, #3
   1393c:	andhi	r3, r3, #7
   13940:	addhi	r3, r3, #48	; 0x30
   13944:	add	r9, r9, #1
   13948:	strbhi	r3, [r8, r0]
   1394c:	and	r5, r5, #7
   13950:	cmp	r9, r1
   13954:	add	r5, r5, #48	; 0x30
   13958:	add	r4, r4, #3
   1395c:	bcs	13afc <__assert_fail@plt+0x2ba0>
   13960:	mov	r0, r2
   13964:	cmp	sl, r4
   13968:	strbhi	r5, [r8, r4]
   1396c:	ldrb	r5, [lr, #1]!
   13970:	add	r4, r4, #1
   13974:	cmp	r2, #0
   13978:	bne	138c0 <__assert_fail@plt+0x2964>
   1397c:	eor	r3, r0, #1
   13980:	and	r3, r3, r6
   13984:	cmp	r7, #0
   13988:	uxtb	r3, r3
   1398c:	beq	139a0 <__assert_fail@plt+0x2a44>
   13990:	cmp	sl, r4
   13994:	movhi	r7, #92	; 0x5c
   13998:	strbhi	r7, [r8, r4]
   1399c:	add	r4, r4, #1
   139a0:	add	r9, r9, #1
   139a4:	cmp	r9, r1
   139a8:	bcs	13af0 <__assert_fail@plt+0x2b94>
   139ac:	cmp	r3, #0
   139b0:	beq	13b1c <__assert_fail@plt+0x2bc0>
   139b4:	cmp	sl, r4
   139b8:	add	r3, r4, #1
   139bc:	strbhi	ip, [r8, r4]
   139c0:	mov	r7, #0
   139c4:	cmp	sl, r3
   139c8:	strbhi	ip, [r8, r3]
   139cc:	add	r4, r4, #2
   139d0:	mov	r6, r7
   139d4:	b	13964 <__assert_fail@plt+0x2a08>
   139d8:	cmp	r8, #1
   139dc:	beq	13854 <__assert_fail@plt+0x28f8>
   139e0:	add	r1, r4, #1
   139e4:	add	r3, sl, r8
   139e8:	add	r1, sl, r1
   139ec:	add	r4, r3, r4
   139f0:	ldrb	r3, [r1], #1
   139f4:	sub	r3, r3, #91	; 0x5b
   139f8:	cmp	r3, #33	; 0x21
   139fc:	ldrls	pc, [pc, r3, lsl #2]
   13a00:	b	13a8c <__assert_fail@plt+0x2b30>
   13a04:	muleq	r1, r8, sl
   13a08:	muleq	r1, r8, sl
   13a0c:	andeq	r3, r1, ip, lsl #21
   13a10:	muleq	r1, r8, sl
   13a14:	andeq	r3, r1, ip, lsl #21
   13a18:	muleq	r1, r8, sl
   13a1c:	andeq	r3, r1, ip, lsl #21
   13a20:	andeq	r3, r1, ip, lsl #21
   13a24:	andeq	r3, r1, ip, lsl #21
   13a28:	andeq	r3, r1, ip, lsl #21
   13a2c:	andeq	r3, r1, ip, lsl #21
   13a30:	andeq	r3, r1, ip, lsl #21
   13a34:	andeq	r3, r1, ip, lsl #21
   13a38:	andeq	r3, r1, ip, lsl #21
   13a3c:	andeq	r3, r1, ip, lsl #21
   13a40:	andeq	r3, r1, ip, lsl #21
   13a44:	andeq	r3, r1, ip, lsl #21
   13a48:	andeq	r3, r1, ip, lsl #21
   13a4c:	andeq	r3, r1, ip, lsl #21
   13a50:	andeq	r3, r1, ip, lsl #21
   13a54:	andeq	r3, r1, ip, lsl #21
   13a58:	andeq	r3, r1, ip, lsl #21
   13a5c:	andeq	r3, r1, ip, lsl #21
   13a60:	andeq	r3, r1, ip, lsl #21
   13a64:	andeq	r3, r1, ip, lsl #21
   13a68:	andeq	r3, r1, ip, lsl #21
   13a6c:	andeq	r3, r1, ip, lsl #21
   13a70:	andeq	r3, r1, ip, lsl #21
   13a74:	andeq	r3, r1, ip, lsl #21
   13a78:	andeq	r3, r1, ip, lsl #21
   13a7c:	andeq	r3, r1, ip, lsl #21
   13a80:	andeq	r3, r1, ip, lsl #21
   13a84:	andeq	r3, r1, ip, lsl #21
   13a88:	muleq	r1, r8, sl
   13a8c:	cmp	r4, r1
   13a90:	bne	139f0 <__assert_fail@plt+0x2a94>
   13a94:	b	13854 <__assert_fail@plt+0x28f8>
   13a98:	ldr	fp, [sp, #84]	; 0x54
   13a9c:	ldr	sl, [sp, #88]	; 0x58
   13aa0:	mov	r8, #2
   13aa4:	b	12f60 <__assert_fail@plt+0x2004>
   13aa8:	cmp	sl, r4
   13aac:	movls	r1, r4
   13ab0:	bls	130b0 <__assert_fail@plt+0x2154>
   13ab4:	ldr	r3, [sp, #44]	; 0x2c
   13ab8:	b	130a0 <__assert_fail@plt+0x2144>
   13abc:	str	sl, [sp, #72]	; 0x48
   13ac0:	ldr	sl, [sp, #32]
   13ac4:	b	12ed8 <__assert_fail@plt+0x1f7c>
   13ac8:	add	r9, r9, #1
   13acc:	b	127cc <__assert_fail@plt+0x1870>
   13ad0:	ldr	r2, [sp, #28]
   13ad4:	mov	r6, #0
   13ad8:	b	138a4 <__assert_fail@plt+0x2948>
   13adc:	str	fp, [sp, #160]	; 0xa0
   13ae0:	str	r3, [sp, #28]
   13ae4:	mov	fp, r8
   13ae8:	ldr	r8, [sp, #160]	; 0xa0
   13aec:	b	12f60 <__assert_fail@plt+0x2004>
   13af0:	str	r6, [sp, #44]	; 0x2c
   13af4:	ldr	r6, [sp, #48]	; 0x30
   13af8:	b	12f08 <__assert_fail@plt+0x1fac>
   13afc:	str	r6, [sp, #44]	; 0x2c
   13b00:	ldr	r6, [sp, #48]	; 0x30
   13b04:	b	12d14 <__assert_fail@plt+0x1db8>
   13b08:	add	r4, r4, #4
   13b0c:	str	r3, [sp, #44]	; 0x2c
   13b10:	mov	r6, #0
   13b14:	mov	r5, #48	; 0x30
   13b18:	b	12c9c <__assert_fail@plt+0x1d40>
   13b1c:	mov	r7, r3
   13b20:	b	13964 <__assert_fail@plt+0x2a08>
   13b24:	ldr	r3, [pc, #-1624]	; 134d4 <__assert_fail@plt+0x2578>
   13b28:	mov	r4, #1
   13b2c:	str	r4, [sp, #40]	; 0x28
   13b30:	str	r4, [sp, #28]
   13b34:	str	r4, [sp, #52]	; 0x34
   13b38:	str	sl, [sp, #72]	; 0x48
   13b3c:	str	sl, [sp, #68]	; 0x44
   13b40:	str	sl, [sp, #44]	; 0x2c
   13b44:	str	sl, [sp, #32]
   13b48:	str	r3, [sp, #60]	; 0x3c
   13b4c:	b	127bc <__assert_fail@plt+0x1860>
   13b50:	mov	r3, r6
   13b54:	mov	r5, #48	; 0x30
   13b58:	mov	r6, #0
   13b5c:	b	12c9c <__assert_fail@plt+0x1d40>
   13b60:	cmp	sl, r4
   13b64:	movhi	r3, #48	; 0x30
   13b68:	strbhi	r3, [r8, r4]
   13b6c:	add	r3, r1, #2
   13b70:	cmp	sl, r3
   13b74:	movhi	r0, #48	; 0x30
   13b78:	strbhi	r0, [r8, r3]
   13b7c:	add	r4, r1, #3
   13b80:	mov	r5, #48	; 0x30
   13b84:	b	130e4 <__assert_fail@plt+0x2188>
   13b88:	str	fp, [sp, #160]	; 0xa0
   13b8c:	mov	fp, r8
   13b90:	ldr	r8, [sp, #160]	; 0xa0
   13b94:	b	12f60 <__assert_fail@plt+0x2004>
   13b98:	ldr	r2, [sp, #80]	; 0x50
   13b9c:	ldrb	r3, [r2]
   13ba0:	cmp	r3, #0
   13ba4:	beq	1278c <__assert_fail@plt+0x1830>
   13ba8:	cmp	sl, r4
   13bac:	strbhi	r3, [fp, r4]
   13bb0:	ldrb	r3, [r2, #1]!
   13bb4:	add	r4, r4, #1
   13bb8:	cmp	r3, #0
   13bbc:	bne	13ba8 <__assert_fail@plt+0x2c4c>
   13bc0:	b	1278c <__assert_fail@plt+0x1830>
   13bc4:	str	fp, [sp, #160]	; 0xa0
   13bc8:	mov	r3, #0
   13bcc:	mov	fp, r8
   13bd0:	ldr	r8, [sp, #160]	; 0xa0
   13bd4:	b	12ff4 <__assert_fail@plt+0x2098>
   13bd8:	mov	ip, r5
   13bdc:	ldr	r7, [sp, #96]	; 0x60
   13be0:	ldr	r5, [sp, #92]	; 0x5c
   13be4:	ldr	r4, [sp, #100]	; 0x64
   13be8:	ldr	r8, [sp, #84]	; 0x54
   13bec:	ldr	sl, [sp, #88]	; 0x58
   13bf0:	ldr	r2, [sp, #28]
   13bf4:	mov	r6, #0
   13bf8:	b	1389c <__assert_fail@plt+0x2940>
   13bfc:	ldr	r2, [sp, #36]	; 0x24
   13c00:	ldrb	r1, [r2, r3]
   13c04:	sub	r2, r1, #33	; 0x21
   13c08:	cmp	r2, #29
   13c0c:	ldrls	pc, [pc, r2, lsl #2]
   13c10:	b	13cec <__assert_fail@plt+0x2d90>
   13c14:	andeq	r3, r1, ip, lsl #25
   13c18:	andeq	r3, r1, ip, ror #25
   13c1c:	andeq	r3, r1, ip, ror #25
   13c20:	andeq	r3, r1, ip, ror #25
   13c24:	andeq	r3, r1, ip, ror #25
   13c28:	andeq	r3, r1, ip, ror #25
   13c2c:	andeq	r3, r1, ip, lsl #25
   13c30:	andeq	r3, r1, ip, lsl #25
   13c34:	andeq	r3, r1, ip, lsl #25
   13c38:	andeq	r3, r1, ip, ror #25
   13c3c:	andeq	r3, r1, ip, ror #25
   13c40:	andeq	r3, r1, ip, ror #25
   13c44:	andeq	r3, r1, ip, lsl #25
   13c48:	andeq	r3, r1, ip, ror #25
   13c4c:	andeq	r3, r1, ip, lsl #25
   13c50:	andeq	r3, r1, ip, ror #25
   13c54:	andeq	r3, r1, ip, ror #25
   13c58:	andeq	r3, r1, ip, ror #25
   13c5c:	andeq	r3, r1, ip, ror #25
   13c60:	andeq	r3, r1, ip, ror #25
   13c64:	andeq	r3, r1, ip, ror #25
   13c68:	andeq	r3, r1, ip, ror #25
   13c6c:	andeq	r3, r1, ip, ror #25
   13c70:	andeq	r3, r1, ip, ror #25
   13c74:	andeq	r3, r1, ip, ror #25
   13c78:	andeq	r3, r1, ip, ror #25
   13c7c:	andeq	r3, r1, ip, ror #25
   13c80:	andeq	r3, r1, ip, lsl #25
   13c84:	andeq	r3, r1, ip, lsl #25
   13c88:	andeq	r3, r1, ip, lsl #25
   13c8c:	ldr	r2, [sp, #32]
   13c90:	cmp	r2, #0
   13c94:	bne	13d98 <__assert_fail@plt+0x2e3c>
   13c98:	cmp	sl, r4
   13c9c:	movhi	r2, #63	; 0x3f
   13ca0:	strbhi	r2, [r8, r4]
   13ca4:	add	r2, r4, #1
   13ca8:	cmp	sl, r2
   13cac:	movhi	r0, #34	; 0x22
   13cb0:	strbhi	r0, [r8, r2]
   13cb4:	add	r2, r4, #2
   13cb8:	cmp	sl, r2
   13cbc:	movhi	r0, #34	; 0x22
   13cc0:	strbhi	r0, [r8, r2]
   13cc4:	add	r2, r4, #3
   13cc8:	cmp	sl, r2
   13ccc:	movhi	r0, #63	; 0x3f
   13cd0:	strbhi	r0, [r8, r2]
   13cd4:	mov	r2, #0
   13cd8:	add	r4, r4, #4
   13cdc:	mov	r5, r1
   13ce0:	mov	r9, r3
   13ce4:	mov	r6, r2
   13ce8:	b	130e4 <__assert_fail@plt+0x2188>
   13cec:	mov	r2, #0
   13cf0:	mov	r6, r2
   13cf4:	b	12c54 <__assert_fail@plt+0x1cf8>
   13cf8:	ldr	r0, [sp, #24]
   13cfc:	mov	r1, r4
   13d00:	cmp	r1, r0
   13d04:	mov	r2, r7
   13d08:	mov	r3, r5
   13d0c:	mov	ip, r5
   13d10:	ldr	r7, [sp, #96]	; 0x60
   13d14:	ldr	r5, [sp, #92]	; 0x5c
   13d18:	ldr	r4, [sp, #100]	; 0x64
   13d1c:	ldr	r8, [sp, #84]	; 0x54
   13d20:	ldr	sl, [sp, #88]	; 0x58
   13d24:	bcs	13d58 <__assert_fail@plt+0x2dfc>
   13d28:	ldrb	r6, [r2]
   13d2c:	cmp	r6, #0
   13d30:	bne	13d44 <__assert_fail@plt+0x2de8>
   13d34:	b	13e74 <__assert_fail@plt+0x2f18>
   13d38:	ldrb	r6, [r2, #1]!
   13d3c:	cmp	r6, #0
   13d40:	beq	13dfc <__assert_fail@plt+0x2ea0>
   13d44:	add	r3, r3, #1
   13d48:	add	r1, r9, r3
   13d4c:	cmp	r1, r0
   13d50:	bcc	13d38 <__assert_fail@plt+0x2ddc>
   13d54:	mov	ip, r3
   13d58:	ldr	r2, [sp, #28]
   13d5c:	mov	r6, #0
   13d60:	b	1389c <__assert_fail@plt+0x2940>
   13d64:	mov	r3, #1
   13d68:	str	r3, [sp, #40]	; 0x28
   13d6c:	str	r3, [sp, #32]
   13d70:	str	r3, [sp, #28]
   13d74:	str	r3, [sp, #52]	; 0x34
   13d78:	ldr	r3, [pc, #-2220]	; 134d4 <__assert_fail@plt+0x2578>
   13d7c:	mov	r2, #0
   13d80:	str	r2, [sp, #68]	; 0x44
   13d84:	str	r2, [sp, #44]	; 0x2c
   13d88:	str	r2, [sp, #72]	; 0x48
   13d8c:	mov	r4, r2
   13d90:	str	r3, [sp, #60]	; 0x3c
   13d94:	b	127bc <__assert_fail@plt+0x1860>
   13d98:	str	fp, [sp, #160]	; 0xa0
   13d9c:	mov	fp, r8
   13da0:	ldr	r8, [sp, #160]	; 0xa0
   13da4:	b	12f6c <__assert_fail@plt+0x2010>
   13da8:	mov	r2, r3
   13dac:	ldr	r3, [sp, #60]	; 0x3c
   13db0:	cmp	r3, #0
   13db4:	moveq	r2, #0
   13db8:	andne	r2, r2, #1
   13dbc:	cmp	r2, #0
   13dc0:	beq	13dec <__assert_fail@plt+0x2e90>
   13dc4:	mov	r2, r3
   13dc8:	ldrb	r3, [r3]
   13dcc:	cmp	r3, #0
   13dd0:	beq	13dec <__assert_fail@plt+0x2e90>
   13dd4:	cmp	sl, r4
   13dd8:	strbhi	r3, [fp, r4]
   13ddc:	ldrb	r3, [r2, #1]!
   13de0:	add	r4, r4, #1
   13de4:	cmp	r3, #0
   13de8:	bne	13dd4 <__assert_fail@plt+0x2e78>
   13dec:	cmp	sl, r4
   13df0:	movhi	r3, #0
   13df4:	strbhi	r3, [fp, r4]
   13df8:	b	12fac <__assert_fail@plt+0x2050>
   13dfc:	mov	ip, r3
   13e00:	ldr	r2, [sp, #28]
   13e04:	b	1389c <__assert_fail@plt+0x2940>
   13e08:	str	fp, [sp, #160]	; 0xa0
   13e0c:	mov	fp, r8
   13e10:	ldr	r8, [sp, #160]	; 0xa0
   13e14:	sub	r3, r8, #2
   13e18:	clz	r3, r3
   13e1c:	lsr	r3, r3, #5
   13e20:	str	r3, [sp, #28]
   13e24:	b	12f60 <__assert_fail@plt+0x2004>
   13e28:	ldr	r3, [sp, #76]	; 0x4c
   13e2c:	mov	ip, #5
   13e30:	str	r3, [sp, #16]
   13e34:	ldr	r3, [sp, #80]	; 0x50
   13e38:	ldr	r2, [sp, #36]	; 0x24
   13e3c:	str	r3, [sp, #12]
   13e40:	ldr	r3, [sp, #56]	; 0x38
   13e44:	ldr	r1, [sp, #72]	; 0x48
   13e48:	str	r3, [sp, #8]
   13e4c:	ldr	r3, [sp, #164]	; 0xa4
   13e50:	mov	r0, fp
   13e54:	str	r3, [sp, #4]
   13e58:	str	ip, [sp]
   13e5c:	ldr	r3, [sp, #24]
   13e60:	bl	126c4 <__assert_fail@plt+0x1768>
   13e64:	mov	r4, r0
   13e68:	b	12fac <__assert_fail@plt+0x2050>
   13e6c:	mov	r8, #2
   13e70:	b	12f60 <__assert_fail@plt+0x2004>
   13e74:	ldr	r2, [sp, #28]
   13e78:	b	1389c <__assert_fail@plt+0x2940>
   13e7c:	mov	r3, #0
   13e80:	str	r3, [sp, #68]	; 0x44
   13e84:	str	r3, [sp, #44]	; 0x2c
   13e88:	str	r3, [sp, #72]	; 0x48
   13e8c:	str	r3, [sp, #28]
   13e90:	mov	r4, r3
   13e94:	ldr	r3, [pc, #-2500]	; 134d8 <__assert_fail@plt+0x257c>
   13e98:	mov	r2, #1
   13e9c:	str	r2, [sp, #40]	; 0x28
   13ea0:	str	r2, [sp, #32]
   13ea4:	str	r2, [sp, #52]	; 0x34
   13ea8:	str	r3, [sp, #60]	; 0x3c
   13eac:	b	127bc <__assert_fail@plt+0x1860>
   13eb0:	bl	10da0 <__stack_chk_fail@plt>
   13eb4:	mov	r5, r3
   13eb8:	mov	r6, #0
   13ebc:	b	12cb0 <__assert_fail@plt+0x1d54>
   13ec0:	mov	r3, #0
   13ec4:	mov	r2, #1
   13ec8:	str	r3, [sp, #44]	; 0x2c
   13ecc:	str	r3, [sp, #72]	; 0x48
   13ed0:	str	r2, [sp, #40]	; 0x28
   13ed4:	b	12dcc <__assert_fail@plt+0x1e70>
   13ed8:	bl	10f44 <abort@plt>
   13edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ee0:	sub	sp, sp, #44	; 0x2c
   13ee4:	mov	r6, r0
   13ee8:	mov	r4, r3
   13eec:	mov	sl, r1
   13ef0:	mov	fp, r2
   13ef4:	bl	10e78 <__errno_location@plt>
   13ef8:	ldr	r7, [pc, #364]	; 1406c <__assert_fail@plt+0x3110>
   13efc:	cmp	r6, #0
   13f00:	ldr	r5, [r7]
   13f04:	ldr	r3, [r0]
   13f08:	str	r3, [sp, #24]
   13f0c:	blt	14068 <__assert_fail@plt+0x310c>
   13f10:	ldr	r3, [r7, #4]
   13f14:	mov	r8, r0
   13f18:	cmp	r3, r6
   13f1c:	bgt	13f68 <__assert_fail@plt+0x300c>
   13f20:	cmn	r6, #-268435454	; 0xf0000002
   13f24:	bgt	14064 <__assert_fail@plt+0x3108>
   13f28:	add	r9, r6, #1
   13f2c:	add	r3, r7, #8
   13f30:	cmp	r5, r3
   13f34:	lsl	r1, r9, #3
   13f38:	beq	14044 <__assert_fail@plt+0x30e8>
   13f3c:	mov	r0, r5
   13f40:	bl	14cd0 <__assert_fail@plt+0x3d74>
   13f44:	mov	r5, r0
   13f48:	str	r0, [r7]
   13f4c:	ldr	r0, [r7, #4]
   13f50:	mov	r1, #0
   13f54:	sub	r2, r9, r0
   13f58:	add	r0, r5, r0, lsl #3
   13f5c:	lsl	r2, r2, #3
   13f60:	bl	10e90 <memset@plt>
   13f64:	str	r9, [r7, #4]
   13f68:	add	r3, r5, r6, lsl #3
   13f6c:	ldr	r1, [r4, #4]
   13f70:	ldr	r7, [r3, #4]
   13f74:	ldr	r9, [r5, r6, lsl #3]
   13f78:	ldr	r2, [r4, #40]	; 0x28
   13f7c:	ldr	ip, [r4, #44]	; 0x2c
   13f80:	str	r3, [sp, #28]
   13f84:	ldr	r3, [r4]
   13f88:	orr	r1, r1, #1
   13f8c:	add	lr, r4, #8
   13f90:	str	r1, [sp, #36]	; 0x24
   13f94:	str	r1, [sp, #4]
   13f98:	str	r2, [sp, #12]
   13f9c:	str	r3, [sp]
   13fa0:	mov	r0, r7
   13fa4:	mov	r1, r9
   13fa8:	str	ip, [sp, #16]
   13fac:	str	lr, [sp, #8]
   13fb0:	mov	r3, fp
   13fb4:	mov	r2, sl
   13fb8:	str	lr, [sp, #32]
   13fbc:	bl	126c4 <__assert_fail@plt+0x1768>
   13fc0:	cmp	r9, r0
   13fc4:	bhi	14030 <__assert_fail@plt+0x30d4>
   13fc8:	ldr	r3, [pc, #160]	; 14070 <__assert_fail@plt+0x3114>
   13fcc:	add	r9, r0, #1
   13fd0:	cmp	r7, r3
   13fd4:	str	r9, [r5, r6, lsl #3]
   13fd8:	beq	13fe4 <__assert_fail@plt+0x3088>
   13fdc:	mov	r0, r7
   13fe0:	bl	10d40 <free@plt>
   13fe4:	mov	r0, r9
   13fe8:	bl	14c74 <__assert_fail@plt+0x3d18>
   13fec:	ldr	lr, [sp, #28]
   13ff0:	ldr	ip, [r4, #44]	; 0x2c
   13ff4:	ldr	r5, [r4, #40]	; 0x28
   13ff8:	mov	r3, fp
   13ffc:	mov	r2, sl
   14000:	mov	r1, r9
   14004:	str	r0, [lr, #4]
   14008:	ldr	lr, [r4]
   1400c:	ldr	r4, [sp, #32]
   14010:	str	ip, [sp, #16]
   14014:	str	r4, [sp, #8]
   14018:	ldr	r4, [sp, #36]	; 0x24
   1401c:	str	r5, [sp, #12]
   14020:	str	r4, [sp, #4]
   14024:	str	lr, [sp]
   14028:	mov	r7, r0
   1402c:	bl	126c4 <__assert_fail@plt+0x1768>
   14030:	ldr	r3, [sp, #24]
   14034:	mov	r0, r7
   14038:	str	r3, [r8]
   1403c:	add	sp, sp, #44	; 0x2c
   14040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14044:	mov	r0, #0
   14048:	bl	14cd0 <__assert_fail@plt+0x3d74>
   1404c:	ldr	r3, [pc, #32]	; 14074 <__assert_fail@plt+0x3118>
   14050:	mov	r5, r0
   14054:	ldm	r3, {r0, r1}
   14058:	str	r5, [r7]
   1405c:	stm	r5, {r0, r1}
   14060:	b	13f4c <__assert_fail@plt+0x2ff0>
   14064:	bl	14ebc <__assert_fail@plt+0x3f60>
   14068:	bl	10f44 <abort@plt>
   1406c:	strdeq	r7, [r2], -r8
   14070:	andeq	r7, r2, r8, lsr #3
   14074:	andeq	r7, r2, r0, lsl #2
   14078:	push	{r4, r5, r6, lr}
   1407c:	mov	r5, r0
   14080:	bl	10e78 <__errno_location@plt>
   14084:	cmp	r5, #0
   14088:	mov	r1, #48	; 0x30
   1408c:	mov	r4, r0
   14090:	ldr	r0, [pc, #16]	; 140a8 <__assert_fail@plt+0x314c>
   14094:	ldr	r6, [r4]
   14098:	movne	r0, r5
   1409c:	bl	14e7c <__assert_fail@plt+0x3f20>
   140a0:	str	r6, [r4]
   140a4:	pop	{r4, r5, r6, pc}
   140a8:	andeq	r7, r2, r8, lsr #5
   140ac:	ldr	r3, [pc, #12]	; 140c0 <__assert_fail@plt+0x3164>
   140b0:	cmp	r0, #0
   140b4:	moveq	r0, r3
   140b8:	ldr	r0, [r0]
   140bc:	bx	lr
   140c0:	andeq	r7, r2, r8, lsr #5
   140c4:	ldr	r3, [pc, #12]	; 140d8 <__assert_fail@plt+0x317c>
   140c8:	cmp	r0, #0
   140cc:	moveq	r0, r3
   140d0:	str	r1, [r0]
   140d4:	bx	lr
   140d8:	andeq	r7, r2, r8, lsr #5
   140dc:	ldr	r3, [pc, #52]	; 14118 <__assert_fail@plt+0x31bc>
   140e0:	cmp	r0, #0
   140e4:	moveq	r0, r3
   140e8:	add	r3, r0, #8
   140ec:	push	{lr}		; (str lr, [sp, #-4]!)
   140f0:	lsr	lr, r1, #5
   140f4:	and	r1, r1, #31
   140f8:	ldr	ip, [r3, lr, lsl #2]
   140fc:	lsr	r0, ip, r1
   14100:	eor	r2, r2, r0
   14104:	and	r2, r2, #1
   14108:	and	r0, r0, #1
   1410c:	eor	r1, ip, r2, lsl r1
   14110:	str	r1, [r3, lr, lsl #2]
   14114:	pop	{pc}		; (ldr pc, [sp], #4)
   14118:	andeq	r7, r2, r8, lsr #5
   1411c:	ldr	r3, [pc, #16]	; 14134 <__assert_fail@plt+0x31d8>
   14120:	cmp	r0, #0
   14124:	movne	r3, r0
   14128:	ldr	r0, [r3, #4]
   1412c:	str	r1, [r3, #4]
   14130:	bx	lr
   14134:	andeq	r7, r2, r8, lsr #5
   14138:	ldr	r3, [pc, #44]	; 1416c <__assert_fail@plt+0x3210>
   1413c:	cmp	r0, #0
   14140:	moveq	r0, r3
   14144:	mov	ip, #10
   14148:	cmp	r2, #0
   1414c:	cmpne	r1, #0
   14150:	str	ip, [r0]
   14154:	beq	14164 <__assert_fail@plt+0x3208>
   14158:	str	r1, [r0, #40]	; 0x28
   1415c:	str	r2, [r0, #44]	; 0x2c
   14160:	bx	lr
   14164:	push	{r4, lr}
   14168:	bl	10f44 <abort@plt>
   1416c:	andeq	r7, r2, r8, lsr #5
   14170:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14174:	sub	sp, sp, #24
   14178:	ldr	ip, [pc, #108]	; 141ec <__assert_fail@plt+0x3290>
   1417c:	ldr	r4, [sp, #56]	; 0x38
   14180:	mov	r9, r2
   14184:	cmp	r4, #0
   14188:	moveq	r4, ip
   1418c:	mov	sl, r3
   14190:	mov	r7, r0
   14194:	mov	r8, r1
   14198:	bl	10e78 <__errno_location@plt>
   1419c:	ldr	r3, [r4, #44]	; 0x2c
   141a0:	mov	r1, r8
   141a4:	ldr	r6, [r0]
   141a8:	str	r3, [sp, #16]
   141ac:	ldr	r2, [r4, #40]	; 0x28
   141b0:	add	r3, r4, #8
   141b4:	str	r3, [sp, #8]
   141b8:	str	r2, [sp, #12]
   141bc:	ldr	r2, [r4, #4]
   141c0:	mov	r5, r0
   141c4:	str	r2, [sp, #4]
   141c8:	ldr	ip, [r4]
   141cc:	mov	r3, sl
   141d0:	mov	r2, r9
   141d4:	mov	r0, r7
   141d8:	str	ip, [sp]
   141dc:	bl	126c4 <__assert_fail@plt+0x1768>
   141e0:	str	r6, [r5]
   141e4:	add	sp, sp, #24
   141e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141ec:	andeq	r7, r2, r8, lsr #5
   141f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f4:	cmp	r3, #0
   141f8:	sub	sp, sp, #44	; 0x2c
   141fc:	ldr	r4, [pc, #192]	; 142c4 <__assert_fail@plt+0x3368>
   14200:	mov	r6, r2
   14204:	movne	r4, r3
   14208:	mov	r9, r1
   1420c:	mov	r8, r0
   14210:	bl	10e78 <__errno_location@plt>
   14214:	ldr	r3, [r4, #44]	; 0x2c
   14218:	ldr	r5, [r4, #4]
   1421c:	add	sl, r4, #8
   14220:	cmp	r6, #0
   14224:	orreq	r5, r5, #1
   14228:	mov	r1, #0
   1422c:	ldr	r2, [r0]
   14230:	str	r3, [sp, #16]
   14234:	ldr	r3, [r4, #40]	; 0x28
   14238:	stmib	sp, {r5, sl}
   1423c:	str	r3, [sp, #12]
   14240:	ldr	r3, [r4]
   14244:	mov	r7, r0
   14248:	str	r2, [sp, #28]
   1424c:	str	r3, [sp]
   14250:	mov	r2, r8
   14254:	mov	r3, r9
   14258:	mov	r0, r1
   1425c:	bl	126c4 <__assert_fail@plt+0x1768>
   14260:	add	r1, r0, #1
   14264:	mov	fp, r0
   14268:	mov	r0, r1
   1426c:	str	r1, [sp, #36]	; 0x24
   14270:	bl	14c74 <__assert_fail@plt+0x3d18>
   14274:	ldr	r3, [r4, #44]	; 0x2c
   14278:	mov	r2, r8
   1427c:	str	r3, [sp, #16]
   14280:	ldr	r3, [r4, #40]	; 0x28
   14284:	str	r5, [sp, #4]
   14288:	str	r3, [sp, #12]
   1428c:	str	sl, [sp, #8]
   14290:	ldr	ip, [r4]
   14294:	ldr	r1, [sp, #36]	; 0x24
   14298:	mov	r3, r9
   1429c:	str	ip, [sp]
   142a0:	str	r0, [sp, #32]
   142a4:	bl	126c4 <__assert_fail@plt+0x1768>
   142a8:	ldr	r2, [sp, #28]
   142ac:	cmp	r6, #0
   142b0:	str	r2, [r7]
   142b4:	ldr	r0, [sp, #32]
   142b8:	strne	fp, [r6]
   142bc:	add	sp, sp, #44	; 0x2c
   142c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142c4:	andeq	r7, r2, r8, lsr #5
   142c8:	mov	r3, r2
   142cc:	mov	r2, #0
   142d0:	b	141f0 <__assert_fail@plt+0x3294>
   142d4:	push	{r4, r5, r6, r7, r8, lr}
   142d8:	ldr	r6, [pc, #112]	; 14350 <__assert_fail@plt+0x33f4>
   142dc:	ldr	r3, [r6, #4]
   142e0:	ldr	r7, [r6]
   142e4:	cmp	r3, #1
   142e8:	ble	1430c <__assert_fail@plt+0x33b0>
   142ec:	sub	r5, r7, #8
   142f0:	add	r5, r5, r3, lsl #3
   142f4:	mov	r4, r7
   142f8:	ldr	r0, [r4, #12]
   142fc:	add	r4, r4, #8
   14300:	bl	10d40 <free@plt>
   14304:	cmp	r4, r5
   14308:	bne	142f8 <__assert_fail@plt+0x339c>
   1430c:	ldr	r0, [r7, #4]
   14310:	ldr	r4, [pc, #60]	; 14354 <__assert_fail@plt+0x33f8>
   14314:	cmp	r0, r4
   14318:	beq	1432c <__assert_fail@plt+0x33d0>
   1431c:	bl	10d40 <free@plt>
   14320:	mov	r3, #256	; 0x100
   14324:	str	r4, [r6, #12]
   14328:	str	r3, [r6, #8]
   1432c:	ldr	r4, [pc, #36]	; 14358 <__assert_fail@plt+0x33fc>
   14330:	cmp	r7, r4
   14334:	beq	14344 <__assert_fail@plt+0x33e8>
   14338:	mov	r0, r7
   1433c:	bl	10d40 <free@plt>
   14340:	str	r4, [r6]
   14344:	mov	r3, #1
   14348:	str	r3, [r6, #4]
   1434c:	pop	{r4, r5, r6, r7, r8, pc}
   14350:	strdeq	r7, [r2], -r8
   14354:	andeq	r7, r2, r8, lsr #3
   14358:	andeq	r7, r2, r0, lsl #2
   1435c:	ldr	r3, [pc, #4]	; 14368 <__assert_fail@plt+0x340c>
   14360:	mvn	r2, #0
   14364:	b	13edc <__assert_fail@plt+0x2f80>
   14368:	andeq	r7, r2, r8, lsr #5
   1436c:	ldr	r3, [pc]	; 14374 <__assert_fail@plt+0x3418>
   14370:	b	13edc <__assert_fail@plt+0x2f80>
   14374:	andeq	r7, r2, r8, lsr #5
   14378:	mov	r1, r0
   1437c:	ldr	r3, [pc, #8]	; 1438c <__assert_fail@plt+0x3430>
   14380:	mvn	r2, #0
   14384:	mov	r0, #0
   14388:	b	13edc <__assert_fail@plt+0x2f80>
   1438c:	andeq	r7, r2, r8, lsr #5
   14390:	mov	r2, r1
   14394:	ldr	r3, [pc, #8]	; 143a4 <__assert_fail@plt+0x3448>
   14398:	mov	r1, r0
   1439c:	mov	r0, #0
   143a0:	b	13edc <__assert_fail@plt+0x2f80>
   143a4:	andeq	r7, r2, r8, lsr #5
   143a8:	push	{r4, r5, r6, lr}
   143ac:	sub	sp, sp, #56	; 0x38
   143b0:	ldr	r4, [pc, #68]	; 143fc <__assert_fail@plt+0x34a0>
   143b4:	mov	r6, r2
   143b8:	mov	r5, r0
   143bc:	ldr	r3, [r4]
   143c0:	add	r0, sp, #4
   143c4:	str	r3, [sp, #52]	; 0x34
   143c8:	bl	12554 <__assert_fail@plt+0x15f8>
   143cc:	add	r3, sp, #4
   143d0:	mvn	r2, #0
   143d4:	mov	r1, r6
   143d8:	mov	r0, r5
   143dc:	bl	13edc <__assert_fail@plt+0x2f80>
   143e0:	ldr	r2, [sp, #52]	; 0x34
   143e4:	ldr	r3, [r4]
   143e8:	cmp	r2, r3
   143ec:	bne	143f8 <__assert_fail@plt+0x349c>
   143f0:	add	sp, sp, #56	; 0x38
   143f4:	pop	{r4, r5, r6, pc}
   143f8:	bl	10da0 <__stack_chk_fail@plt>
   143fc:	andeq	r6, r2, r8, lsl #30
   14400:	push	{r4, r5, r6, r7, lr}
   14404:	sub	sp, sp, #60	; 0x3c
   14408:	ldr	r4, [pc, #72]	; 14458 <__assert_fail@plt+0x34fc>
   1440c:	mov	r6, r2
   14410:	mov	r7, r3
   14414:	ldr	ip, [r4]
   14418:	mov	r5, r0
   1441c:	add	r0, sp, #4
   14420:	str	ip, [sp, #52]	; 0x34
   14424:	bl	12554 <__assert_fail@plt+0x15f8>
   14428:	add	r3, sp, #4
   1442c:	mov	r2, r7
   14430:	mov	r1, r6
   14434:	mov	r0, r5
   14438:	bl	13edc <__assert_fail@plt+0x2f80>
   1443c:	ldr	r2, [sp, #52]	; 0x34
   14440:	ldr	r3, [r4]
   14444:	cmp	r2, r3
   14448:	bne	14454 <__assert_fail@plt+0x34f8>
   1444c:	add	sp, sp, #60	; 0x3c
   14450:	pop	{r4, r5, r6, r7, pc}
   14454:	bl	10da0 <__stack_chk_fail@plt>
   14458:	andeq	r6, r2, r8, lsl #30
   1445c:	mov	r2, r1
   14460:	mov	r1, r0
   14464:	mov	r0, #0
   14468:	b	143a8 <__assert_fail@plt+0x344c>
   1446c:	mov	r3, r2
   14470:	mov	r2, r1
   14474:	mov	r1, r0
   14478:	mov	r0, #0
   1447c:	b	14400 <__assert_fail@plt+0x34a4>
   14480:	push	{r4, r5, r6, r7, r8, r9, lr}
   14484:	mov	r4, r2
   14488:	ldr	lr, [pc, #128]	; 14510 <__assert_fail@plt+0x35b4>
   1448c:	mov	r8, r0
   14490:	mov	r9, r1
   14494:	ldm	lr!, {r0, r1, r2, r3}
   14498:	sub	sp, sp, #60	; 0x3c
   1449c:	add	ip, sp, #4
   144a0:	lsr	r6, r4, #5
   144a4:	stmia	ip!, {r0, r1, r2, r3}
   144a8:	add	r7, sp, #12
   144ac:	ldm	lr!, {r0, r1, r2, r3}
   144b0:	and	r4, r4, #31
   144b4:	ldr	r5, [pc, #88]	; 14514 <__assert_fail@plt+0x35b8>
   144b8:	stmia	ip!, {r0, r1, r2, r3}
   144bc:	ldm	lr, {r0, r1, r2, r3}
   144c0:	stm	ip, {r0, r1, r2, r3}
   144c4:	mov	r2, r9
   144c8:	ldr	r3, [r7, r6, lsl #2]
   144cc:	ldr	ip, [r5]
   144d0:	mov	r1, r8
   144d4:	mvn	r0, r3, lsr r4
   144d8:	and	r0, r0, #1
   144dc:	str	ip, [sp, #52]	; 0x34
   144e0:	eor	r4, r3, r0, lsl r4
   144e4:	add	r3, sp, #4
   144e8:	mov	r0, #0
   144ec:	str	r4, [r7, r6, lsl #2]
   144f0:	bl	13edc <__assert_fail@plt+0x2f80>
   144f4:	ldr	r2, [sp, #52]	; 0x34
   144f8:	ldr	r3, [r5]
   144fc:	cmp	r2, r3
   14500:	bne	1450c <__assert_fail@plt+0x35b0>
   14504:	add	sp, sp, #60	; 0x3c
   14508:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1450c:	bl	10da0 <__stack_chk_fail@plt>
   14510:	andeq	r7, r2, r8, lsr #5
   14514:	andeq	r6, r2, r8, lsl #30
   14518:	mov	r2, r1
   1451c:	mvn	r1, #0
   14520:	b	14480 <__assert_fail@plt+0x3524>
   14524:	mov	r2, #58	; 0x3a
   14528:	mvn	r1, #0
   1452c:	b	14480 <__assert_fail@plt+0x3524>
   14530:	mov	r2, #58	; 0x3a
   14534:	b	14480 <__assert_fail@plt+0x3524>
   14538:	push	{r4, r5, r6, r7, r8, lr}
   1453c:	sub	sp, sp, #104	; 0x68
   14540:	ldr	r5, [pc, #120]	; 145c0 <__assert_fail@plt+0x3664>
   14544:	mov	r6, r0
   14548:	mov	r0, sp
   1454c:	ldr	r3, [r5]
   14550:	mov	r7, r2
   14554:	str	r3, [sp, #100]	; 0x64
   14558:	bl	12554 <__assert_fail@plt+0x15f8>
   1455c:	mov	ip, sp
   14560:	add	lr, sp, #52	; 0x34
   14564:	ldm	ip!, {r0, r1, r2, r3}
   14568:	stmia	lr!, {r0, r1, r2, r3}
   1456c:	ldm	ip!, {r0, r1, r2, r3}
   14570:	ldr	r8, [sp, #64]	; 0x40
   14574:	stmia	lr!, {r0, r1, r2, r3}
   14578:	mvn	r4, r8
   1457c:	ldm	ip, {r0, r1, r2, r3}
   14580:	and	ip, r4, #67108864	; 0x4000000
   14584:	eor	ip, ip, r8
   14588:	str	ip, [sp, #64]	; 0x40
   1458c:	stm	lr, {r0, r1, r2, r3}
   14590:	add	r3, sp, #52	; 0x34
   14594:	mvn	r2, #0
   14598:	mov	r1, r7
   1459c:	mov	r0, r6
   145a0:	bl	13edc <__assert_fail@plt+0x2f80>
   145a4:	ldr	r2, [sp, #100]	; 0x64
   145a8:	ldr	r3, [r5]
   145ac:	cmp	r2, r3
   145b0:	bne	145bc <__assert_fail@plt+0x3660>
   145b4:	add	sp, sp, #104	; 0x68
   145b8:	pop	{r4, r5, r6, r7, r8, pc}
   145bc:	bl	10da0 <__stack_chk_fail@plt>
   145c0:	andeq	r6, r2, r8, lsl #30
   145c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   145c8:	mov	r6, r1
   145cc:	ldr	lr, [pc, #132]	; 14658 <__assert_fail@plt+0x36fc>
   145d0:	mov	r5, r2
   145d4:	mov	r8, r0
   145d8:	mov	r9, r3
   145dc:	ldm	lr!, {r0, r1, r2, r3}
   145e0:	sub	sp, sp, #60	; 0x3c
   145e4:	add	ip, sp, #4
   145e8:	ldr	r4, [pc, #108]	; 1465c <__assert_fail@plt+0x3700>
   145ec:	stmia	ip!, {r0, r1, r2, r3}
   145f0:	mov	r7, #10
   145f4:	ldm	lr!, {r0, r1, r2, r3}
   145f8:	cmp	r5, #0
   145fc:	cmpne	r6, #0
   14600:	str	r7, [sp, #4]
   14604:	stmia	ip!, {r0, r1, r2, r3}
   14608:	ldm	lr, {r0, r1, r2, r3}
   1460c:	ldr	lr, [r4]
   14610:	stm	ip, {r0, r1, r2, r3}
   14614:	str	lr, [sp, #52]	; 0x34
   14618:	beq	14654 <__assert_fail@plt+0x36f8>
   1461c:	add	r3, sp, #4
   14620:	ldr	r2, [sp, #88]	; 0x58
   14624:	mov	r1, r9
   14628:	mov	r0, r8
   1462c:	str	r6, [sp, #44]	; 0x2c
   14630:	str	r5, [sp, #48]	; 0x30
   14634:	bl	13edc <__assert_fail@plt+0x2f80>
   14638:	ldr	r2, [sp, #52]	; 0x34
   1463c:	ldr	r3, [r4]
   14640:	cmp	r2, r3
   14644:	bne	14650 <__assert_fail@plt+0x36f4>
   14648:	add	sp, sp, #60	; 0x3c
   1464c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14650:	bl	10da0 <__stack_chk_fail@plt>
   14654:	bl	10f44 <abort@plt>
   14658:	andeq	r7, r2, r8, lsr #5
   1465c:	andeq	r6, r2, r8, lsl #30
   14660:	push	{lr}		; (str lr, [sp, #-4]!)
   14664:	sub	sp, sp, #12
   14668:	mvn	ip, #0
   1466c:	str	ip, [sp]
   14670:	bl	145c4 <__assert_fail@plt+0x3668>
   14674:	add	sp, sp, #12
   14678:	pop	{pc}		; (ldr pc, [sp], #4)
   1467c:	push	{lr}		; (str lr, [sp, #-4]!)
   14680:	sub	sp, sp, #12
   14684:	mvn	ip, #0
   14688:	mov	r3, r2
   1468c:	str	ip, [sp]
   14690:	mov	r2, r1
   14694:	mov	r1, r0
   14698:	mov	r0, #0
   1469c:	bl	145c4 <__assert_fail@plt+0x3668>
   146a0:	add	sp, sp, #12
   146a4:	pop	{pc}		; (ldr pc, [sp], #4)
   146a8:	push	{lr}		; (str lr, [sp, #-4]!)
   146ac:	sub	sp, sp, #12
   146b0:	str	r3, [sp]
   146b4:	mov	r3, r2
   146b8:	mov	r2, r1
   146bc:	mov	r1, r0
   146c0:	mov	r0, #0
   146c4:	bl	145c4 <__assert_fail@plt+0x3668>
   146c8:	add	sp, sp, #12
   146cc:	pop	{pc}		; (ldr pc, [sp], #4)
   146d0:	ldr	r3, [pc]	; 146d8 <__assert_fail@plt+0x377c>
   146d4:	b	13edc <__assert_fail@plt+0x2f80>
   146d8:	andeq	r7, r2, r8, lsl #2
   146dc:	mov	r2, r1
   146e0:	ldr	r3, [pc, #8]	; 146f0 <__assert_fail@plt+0x3794>
   146e4:	mov	r1, r0
   146e8:	mov	r0, #0
   146ec:	b	13edc <__assert_fail@plt+0x2f80>
   146f0:	andeq	r7, r2, r8, lsl #2
   146f4:	ldr	r3, [pc, #4]	; 14700 <__assert_fail@plt+0x37a4>
   146f8:	mvn	r2, #0
   146fc:	b	13edc <__assert_fail@plt+0x2f80>
   14700:	andeq	r7, r2, r8, lsl #2
   14704:	mov	r1, r0
   14708:	ldr	r3, [pc, #8]	; 14718 <__assert_fail@plt+0x37bc>
   1470c:	mvn	r2, #0
   14710:	mov	r0, #0
   14714:	b	13edc <__assert_fail@plt+0x2f80>
   14718:	andeq	r7, r2, r8, lsl #2
   1471c:	push	{r4, r5, r6, lr}
   14720:	sub	sp, sp, #32
   14724:	cmp	r1, #0
   14728:	mov	r5, r0
   1472c:	ldr	r4, [sp, #48]	; 0x30
   14730:	ldr	r6, [sp, #52]	; 0x34
   14734:	beq	147c4 <__assert_fail@plt+0x3868>
   14738:	strd	r2, [sp]
   1473c:	mov	r3, r1
   14740:	ldr	r2, [pc, #828]	; 14a84 <__assert_fail@plt+0x3b28>
   14744:	mov	r1, #1
   14748:	bl	10eb4 <__fprintf_chk@plt>
   1474c:	mov	r2, #5
   14750:	ldr	r1, [pc, #816]	; 14a88 <__assert_fail@plt+0x3b2c>
   14754:	mov	r0, #0
   14758:	bl	10d94 <dcgettext@plt>
   1475c:	ldr	r3, [pc, #808]	; 14a8c <__assert_fail@plt+0x3b30>
   14760:	ldr	r2, [pc, #808]	; 14a90 <__assert_fail@plt+0x3b34>
   14764:	str	r3, [sp]
   14768:	mov	r1, #1
   1476c:	mov	r3, r0
   14770:	mov	r0, r5
   14774:	bl	10eb4 <__fprintf_chk@plt>
   14778:	ldr	r1, [pc, #788]	; 14a94 <__assert_fail@plt+0x3b38>
   1477c:	mov	r2, #5
   14780:	mov	r0, #0
   14784:	bl	10d94 <dcgettext@plt>
   14788:	mov	r1, r5
   1478c:	bl	10d04 <fputs_unlocked@plt>
   14790:	cmp	r6, #9
   14794:	ldrls	pc, [pc, r6, lsl #2]
   14798:	b	14a74 <__assert_fail@plt+0x3b18>
   1479c:	andeq	r4, r1, r0, lsl #21
   147a0:	andeq	r4, r1, r8, asr #16
   147a4:	andeq	r4, r1, r4, ror r8
   147a8:	andeq	r4, r1, r8, lsr #17
   147ac:	andeq	r4, r1, r4, ror #17
   147b0:	andeq	r4, r1, r4, lsr #18
   147b4:	andeq	r4, r1, ip, ror #18
   147b8:			; <UNDEFINED> instruction: 0x000149bc
   147bc:	andeq	r4, r1, r4, lsl sl
   147c0:	ldrdeq	r4, [r1], -ip
   147c4:	str	r3, [sp]
   147c8:	mov	r1, #1
   147cc:	mov	r3, r2
   147d0:	ldr	r2, [pc, #704]	; 14a98 <__assert_fail@plt+0x3b3c>
   147d4:	bl	10eb4 <__fprintf_chk@plt>
   147d8:	b	1474c <__assert_fail@plt+0x37f0>
   147dc:	ldr	r1, [pc, #696]	; 14a9c <__assert_fail@plt+0x3b40>
   147e0:	mov	r2, #5
   147e4:	mov	r0, #0
   147e8:	bl	10d94 <dcgettext@plt>
   147ec:	ldr	r2, [r4, #32]
   147f0:	ldr	r3, [r4, #28]
   147f4:	ldr	r1, [r4, #24]
   147f8:	str	r2, [sp, #28]
   147fc:	ldr	r2, [r4, #20]
   14800:	str	r3, [sp, #24]
   14804:	ldr	r3, [r4, #16]
   14808:	str	r1, [sp, #20]
   1480c:	ldr	r1, [r4, #12]
   14810:	str	r2, [sp, #16]
   14814:	ldr	r2, [r4, #8]
   14818:	str	r3, [sp, #12]
   1481c:	ldr	r3, [r4, #4]
   14820:	str	r1, [sp, #8]
   14824:	str	r2, [sp, #4]
   14828:	str	r3, [sp]
   1482c:	mov	r1, #1
   14830:	ldr	r3, [r4]
   14834:	mov	r2, r0
   14838:	mov	r0, r5
   1483c:	bl	10eb4 <__fprintf_chk@plt>
   14840:	add	sp, sp, #32
   14844:	pop	{r4, r5, r6, pc}
   14848:	mov	r2, #5
   1484c:	ldr	r1, [pc, #588]	; 14aa0 <__assert_fail@plt+0x3b44>
   14850:	mov	r0, #0
   14854:	bl	10d94 <dcgettext@plt>
   14858:	ldr	r3, [r4]
   1485c:	mov	r1, #1
   14860:	mov	r2, r0
   14864:	mov	r0, r5
   14868:	add	sp, sp, #32
   1486c:	pop	{r4, r5, r6, lr}
   14870:	b	10eb4 <__fprintf_chk@plt>
   14874:	mov	r2, #5
   14878:	ldr	r1, [pc, #548]	; 14aa4 <__assert_fail@plt+0x3b48>
   1487c:	mov	r0, #0
   14880:	bl	10d94 <dcgettext@plt>
   14884:	ldr	r2, [r4, #4]
   14888:	ldr	r3, [r4]
   1488c:	mov	r1, #1
   14890:	str	r2, [sp, #48]	; 0x30
   14894:	mov	r2, r0
   14898:	mov	r0, r5
   1489c:	add	sp, sp, #32
   148a0:	pop	{r4, r5, r6, lr}
   148a4:	b	10eb4 <__fprintf_chk@plt>
   148a8:	mov	r2, #5
   148ac:	ldr	r1, [pc, #500]	; 14aa8 <__assert_fail@plt+0x3b4c>
   148b0:	mov	r0, #0
   148b4:	bl	10d94 <dcgettext@plt>
   148b8:	ldr	r2, [r4, #8]
   148bc:	ldr	r3, [r4, #4]
   148c0:	mov	r1, #1
   148c4:	str	r2, [sp, #52]	; 0x34
   148c8:	str	r3, [sp, #48]	; 0x30
   148cc:	ldr	r3, [r4]
   148d0:	mov	r2, r0
   148d4:	mov	r0, r5
   148d8:	add	sp, sp, #32
   148dc:	pop	{r4, r5, r6, lr}
   148e0:	b	10eb4 <__fprintf_chk@plt>
   148e4:	mov	r2, #5
   148e8:	ldr	r1, [pc, #444]	; 14aac <__assert_fail@plt+0x3b50>
   148ec:	mov	r0, #0
   148f0:	bl	10d94 <dcgettext@plt>
   148f4:	ldr	r1, [r4, #12]
   148f8:	ldr	r2, [r4, #8]
   148fc:	ldr	r3, [r4, #4]
   14900:	str	r1, [sp, #8]
   14904:	str	r2, [sp, #4]
   14908:	str	r3, [sp]
   1490c:	mov	r1, #1
   14910:	ldr	r3, [r4]
   14914:	mov	r2, r0
   14918:	mov	r0, r5
   1491c:	bl	10eb4 <__fprintf_chk@plt>
   14920:	b	14840 <__assert_fail@plt+0x38e4>
   14924:	mov	r2, #5
   14928:	ldr	r1, [pc, #384]	; 14ab0 <__assert_fail@plt+0x3b54>
   1492c:	mov	r0, #0
   14930:	bl	10d94 <dcgettext@plt>
   14934:	ldr	r3, [r4, #16]
   14938:	ldr	r1, [r4, #12]
   1493c:	ldr	r2, [r4, #8]
   14940:	str	r3, [sp, #12]
   14944:	ldr	r3, [r4, #4]
   14948:	str	r1, [sp, #8]
   1494c:	str	r2, [sp, #4]
   14950:	str	r3, [sp]
   14954:	mov	r1, #1
   14958:	ldr	r3, [r4]
   1495c:	mov	r2, r0
   14960:	mov	r0, r5
   14964:	bl	10eb4 <__fprintf_chk@plt>
   14968:	b	14840 <__assert_fail@plt+0x38e4>
   1496c:	mov	r2, #5
   14970:	ldr	r1, [pc, #316]	; 14ab4 <__assert_fail@plt+0x3b58>
   14974:	mov	r0, #0
   14978:	bl	10d94 <dcgettext@plt>
   1497c:	ldr	r2, [r4, #20]
   14980:	ldr	r3, [r4, #16]
   14984:	ldr	r1, [r4, #12]
   14988:	str	r2, [sp, #16]
   1498c:	ldr	r2, [r4, #8]
   14990:	str	r3, [sp, #12]
   14994:	ldr	r3, [r4, #4]
   14998:	str	r1, [sp, #8]
   1499c:	str	r2, [sp, #4]
   149a0:	str	r3, [sp]
   149a4:	mov	r1, #1
   149a8:	ldr	r3, [r4]
   149ac:	mov	r2, r0
   149b0:	mov	r0, r5
   149b4:	bl	10eb4 <__fprintf_chk@plt>
   149b8:	b	14840 <__assert_fail@plt+0x38e4>
   149bc:	mov	r2, #5
   149c0:	ldr	r1, [pc, #240]	; 14ab8 <__assert_fail@plt+0x3b5c>
   149c4:	mov	r0, #0
   149c8:	bl	10d94 <dcgettext@plt>
   149cc:	ldr	r1, [r4, #24]
   149d0:	ldr	r2, [r4, #20]
   149d4:	ldr	r3, [r4, #16]
   149d8:	str	r1, [sp, #20]
   149dc:	ldr	r1, [r4, #12]
   149e0:	str	r2, [sp, #16]
   149e4:	ldr	r2, [r4, #8]
   149e8:	str	r3, [sp, #12]
   149ec:	ldr	r3, [r4, #4]
   149f0:	str	r1, [sp, #8]
   149f4:	str	r2, [sp, #4]
   149f8:	str	r3, [sp]
   149fc:	mov	r1, #1
   14a00:	ldr	r3, [r4]
   14a04:	mov	r2, r0
   14a08:	mov	r0, r5
   14a0c:	bl	10eb4 <__fprintf_chk@plt>
   14a10:	b	14840 <__assert_fail@plt+0x38e4>
   14a14:	mov	r2, #5
   14a18:	ldr	r1, [pc, #156]	; 14abc <__assert_fail@plt+0x3b60>
   14a1c:	mov	r0, #0
   14a20:	bl	10d94 <dcgettext@plt>
   14a24:	ldr	r3, [r4, #28]
   14a28:	ldr	r1, [r4, #24]
   14a2c:	ldr	r2, [r4, #20]
   14a30:	str	r3, [sp, #24]
   14a34:	ldr	r3, [r4, #16]
   14a38:	str	r1, [sp, #20]
   14a3c:	ldr	r1, [r4, #12]
   14a40:	str	r2, [sp, #16]
   14a44:	ldr	r2, [r4, #8]
   14a48:	str	r3, [sp, #12]
   14a4c:	ldr	r3, [r4, #4]
   14a50:	str	r1, [sp, #8]
   14a54:	str	r2, [sp, #4]
   14a58:	str	r3, [sp]
   14a5c:	mov	r1, #1
   14a60:	ldr	r3, [r4]
   14a64:	mov	r2, r0
   14a68:	mov	r0, r5
   14a6c:	bl	10eb4 <__fprintf_chk@plt>
   14a70:	b	14840 <__assert_fail@plt+0x38e4>
   14a74:	mov	r2, #5
   14a78:	ldr	r1, [pc, #64]	; 14ac0 <__assert_fail@plt+0x3b64>
   14a7c:	b	147e4 <__assert_fail@plt+0x3888>
   14a80:	bl	10f44 <abort@plt>
   14a84:			; <UNDEFINED> instruction: 0x00015fbc
   14a88:	ldrdeq	r5, [r1], -r0
   14a8c:	andeq	r0, r0, r2, ror #15
   14a90:	andeq	r6, r1, r4, lsr #5
   14a94:	ldrdeq	r5, [r1], -r4
   14a98:	andeq	r5, r1, r8, asr #31
   14a9c:	andeq	r6, r1, ip, lsr #3
   14aa0:	andeq	r6, r1, r0, lsr #1
   14aa4:	strheq	r6, [r1], -r0
   14aa8:	andeq	r6, r1, r8, asr #1
   14aac:	andeq	r6, r1, r4, ror #1
   14ab0:	andeq	r6, r1, r4, lsl #2
   14ab4:	andeq	r6, r1, r8, lsr #2
   14ab8:	andeq	r6, r1, r0, asr r1
   14abc:	andeq	r6, r1, ip, ror r1
   14ac0:	andeq	r6, r1, r0, ror #3
   14ac4:	push	{r4, r5, lr}
   14ac8:	sub	sp, sp, #12
   14acc:	ldr	r5, [sp, #24]
   14ad0:	ldr	ip, [r5]
   14ad4:	cmp	ip, #0
   14ad8:	beq	14af4 <__assert_fail@plt+0x3b98>
   14adc:	mov	lr, r5
   14ae0:	mov	ip, #0
   14ae4:	ldr	r4, [lr, #4]!
   14ae8:	add	ip, ip, #1
   14aec:	cmp	r4, #0
   14af0:	bne	14ae4 <__assert_fail@plt+0x3b88>
   14af4:	stm	sp, {r5, ip}
   14af8:	bl	1471c <__assert_fail@plt+0x37c0>
   14afc:	add	sp, sp, #12
   14b00:	pop	{r4, r5, pc}
   14b04:	push	{r4, r5, r6, lr}
   14b08:	sub	sp, sp, #56	; 0x38
   14b0c:	ldr	r6, [pc, #88]	; 14b6c <__assert_fail@plt+0x3c10>
   14b10:	ldr	r5, [sp, #72]	; 0x48
   14b14:	add	r4, sp, #8
   14b18:	ldr	ip, [r6]
   14b1c:	str	ip, [sp, #52]	; 0x34
   14b20:	mov	ip, #0
   14b24:	ldr	lr, [r5], #4
   14b28:	cmp	lr, #0
   14b2c:	str	lr, [r4, #4]!
   14b30:	beq	14b40 <__assert_fail@plt+0x3be4>
   14b34:	add	ip, ip, #1
   14b38:	cmp	ip, #10
   14b3c:	bne	14b24 <__assert_fail@plt+0x3bc8>
   14b40:	add	lr, sp, #12
   14b44:	str	ip, [sp, #4]
   14b48:	str	lr, [sp]
   14b4c:	bl	1471c <__assert_fail@plt+0x37c0>
   14b50:	ldr	r2, [sp, #52]	; 0x34
   14b54:	ldr	r3, [r6]
   14b58:	cmp	r2, r3
   14b5c:	bne	14b68 <__assert_fail@plt+0x3c0c>
   14b60:	add	sp, sp, #56	; 0x38
   14b64:	pop	{r4, r5, r6, pc}
   14b68:	bl	10da0 <__stack_chk_fail@plt>
   14b6c:	andeq	r6, r2, r8, lsl #30
   14b70:	push	{r3}		; (str r3, [sp, #-4]!)
   14b74:	mov	ip, #0
   14b78:	push	{r4, r5, r6, lr}
   14b7c:	sub	sp, sp, #60	; 0x3c
   14b80:	ldr	r6, [pc, #100]	; 14bec <__assert_fail@plt+0x3c90>
   14b84:	add	r5, sp, #8
   14b88:	add	r4, sp, #80	; 0x50
   14b8c:	ldr	r3, [r6]
   14b90:	str	r4, [sp, #8]
   14b94:	str	r3, [sp, #52]	; 0x34
   14b98:	ldr	r3, [sp, #76]	; 0x4c
   14b9c:	ldr	lr, [r4], #4
   14ba0:	cmp	lr, #0
   14ba4:	str	lr, [r5, #4]!
   14ba8:	beq	14bb8 <__assert_fail@plt+0x3c5c>
   14bac:	add	ip, ip, #1
   14bb0:	cmp	ip, #10
   14bb4:	bne	14b9c <__assert_fail@plt+0x3c40>
   14bb8:	add	lr, sp, #12
   14bbc:	str	ip, [sp, #4]
   14bc0:	str	lr, [sp]
   14bc4:	bl	1471c <__assert_fail@plt+0x37c0>
   14bc8:	ldr	r2, [sp, #52]	; 0x34
   14bcc:	ldr	r3, [r6]
   14bd0:	cmp	r2, r3
   14bd4:	bne	14be8 <__assert_fail@plt+0x3c8c>
   14bd8:	add	sp, sp, #60	; 0x3c
   14bdc:	pop	{r4, r5, r6, lr}
   14be0:	add	sp, sp, #4
   14be4:	bx	lr
   14be8:	bl	10da0 <__stack_chk_fail@plt>
   14bec:	andeq	r6, r2, r8, lsl #30
   14bf0:	push	{r4, lr}
   14bf4:	mov	r2, #5
   14bf8:	ldr	r1, [pc, #88]	; 14c58 <__assert_fail@plt+0x3cfc>
   14bfc:	mov	r0, #0
   14c00:	bl	10d94 <dcgettext@plt>
   14c04:	ldr	r2, [pc, #80]	; 14c5c <__assert_fail@plt+0x3d00>
   14c08:	mov	r1, r0
   14c0c:	mov	r0, #1
   14c10:	bl	10e9c <__printf_chk@plt>
   14c14:	mov	r2, #5
   14c18:	ldr	r1, [pc, #64]	; 14c60 <__assert_fail@plt+0x3d04>
   14c1c:	mov	r0, #0
   14c20:	bl	10d94 <dcgettext@plt>
   14c24:	ldr	r3, [pc, #56]	; 14c64 <__assert_fail@plt+0x3d08>
   14c28:	ldr	r2, [pc, #56]	; 14c68 <__assert_fail@plt+0x3d0c>
   14c2c:	mov	r1, r0
   14c30:	mov	r0, #1
   14c34:	bl	10e9c <__printf_chk@plt>
   14c38:	ldr	r1, [pc, #44]	; 14c6c <__assert_fail@plt+0x3d10>
   14c3c:	mov	r2, #5
   14c40:	mov	r0, #0
   14c44:	bl	10d94 <dcgettext@plt>
   14c48:	ldr	r3, [pc, #32]	; 14c70 <__assert_fail@plt+0x3d14>
   14c4c:	pop	{r4, lr}
   14c50:	ldr	r1, [r3]
   14c54:	b	10d04 <fputs_unlocked@plt>
   14c58:	andeq	r6, r1, ip, lsl r2
   14c5c:	andeq	r6, r1, r4, lsr r2
   14c60:	andeq	r6, r1, ip, asr #4
   14c64:	andeq	r5, r1, r4, asr #18
   14c68:	andeq	r5, r1, ip, ror #18
   14c6c:	andeq	r6, r1, r0, ror #4
   14c70:	andeq	r7, r2, r4, asr r1
   14c74:	push	{r4, lr}
   14c78:	mov	r4, r0
   14c7c:	bl	10e18 <malloc@plt>
   14c80:	adds	r4, r4, #0
   14c84:	movne	r4, #1
   14c88:	cmp	r0, #0
   14c8c:	movne	r4, #0
   14c90:	cmp	r4, #0
   14c94:	popeq	{r4, pc}
   14c98:	bl	14ebc <__assert_fail@plt+0x3f60>
   14c9c:	push	{r4, r5, r6, lr}
   14ca0:	umull	r4, r5, r0, r1
   14ca4:	adds	r3, r5, #0
   14ca8:	movne	r3, #1
   14cac:	cmp	r4, #0
   14cb0:	blt	14cc8 <__assert_fail@plt+0x3d6c>
   14cb4:	cmp	r3, #0
   14cb8:	bne	14cc8 <__assert_fail@plt+0x3d6c>
   14cbc:	mul	r0, r1, r0
   14cc0:	pop	{r4, r5, r6, lr}
   14cc4:	b	14c74 <__assert_fail@plt+0x3d18>
   14cc8:	bl	14ebc <__assert_fail@plt+0x3f60>
   14ccc:	b	14c74 <__assert_fail@plt+0x3d18>
   14cd0:	adds	r3, r0, #0
   14cd4:	movne	r3, #1
   14cd8:	cmp	r1, #0
   14cdc:	movne	r3, #0
   14ce0:	cmp	r3, #0
   14ce4:	push	{r4, lr}
   14ce8:	bne	14d10 <__assert_fail@plt+0x3db4>
   14cec:	mov	r4, r1
   14cf0:	bl	10dac <realloc@plt>
   14cf4:	adds	r4, r4, #0
   14cf8:	movne	r4, #1
   14cfc:	cmp	r0, #0
   14d00:	movne	r4, #0
   14d04:	cmp	r4, #0
   14d08:	popeq	{r4, pc}
   14d0c:	bl	14ebc <__assert_fail@plt+0x3f60>
   14d10:	bl	10d40 <free@plt>
   14d14:	mov	r0, #0
   14d18:	pop	{r4, pc}
   14d1c:	push	{r4, r5, r6, lr}
   14d20:	umull	r4, r5, r1, r2
   14d24:	adds	r3, r5, #0
   14d28:	movne	r3, #1
   14d2c:	cmp	r4, #0
   14d30:	blt	14d48 <__assert_fail@plt+0x3dec>
   14d34:	cmp	r3, #0
   14d38:	bne	14d48 <__assert_fail@plt+0x3dec>
   14d3c:	mul	r1, r2, r1
   14d40:	pop	{r4, r5, r6, lr}
   14d44:	b	14cd0 <__assert_fail@plt+0x3d74>
   14d48:	bl	14ebc <__assert_fail@plt+0x3f60>
   14d4c:	push	{r4, r5, r6, r7, r8, lr}
   14d50:	subs	r7, r0, #0
   14d54:	mov	r6, r1
   14d58:	mov	r5, r2
   14d5c:	ldr	r4, [r1]
   14d60:	beq	14d94 <__assert_fail@plt+0x3e38>
   14d64:	mov	r1, r2
   14d68:	ldr	r0, [pc, #104]	; 14dd8 <__assert_fail@plt+0x3e7c>
   14d6c:	bl	15224 <__assert_fail@plt+0x42c8>
   14d70:	cmp	r0, r4
   14d74:	bls	14db8 <__assert_fail@plt+0x3e5c>
   14d78:	add	r3, r4, #1
   14d7c:	add	r4, r3, r4, lsr #1
   14d80:	str	r4, [r6]
   14d84:	mul	r1, r5, r4
   14d88:	mov	r0, r7
   14d8c:	pop	{r4, r5, r6, r7, r8, lr}
   14d90:	b	14cd0 <__assert_fail@plt+0x3d74>
   14d94:	cmp	r4, #0
   14d98:	beq	14dbc <__assert_fail@plt+0x3e60>
   14d9c:	umull	r0, r1, r4, r5
   14da0:	adds	r3, r1, #0
   14da4:	movne	r3, #1
   14da8:	cmp	r0, #0
   14dac:	blt	14db8 <__assert_fail@plt+0x3e5c>
   14db0:	cmp	r3, #0
   14db4:	beq	14d80 <__assert_fail@plt+0x3e24>
   14db8:	bl	14ebc <__assert_fail@plt+0x3f60>
   14dbc:	mov	r1, r2
   14dc0:	mov	r0, #64	; 0x40
   14dc4:	bl	15224 <__assert_fail@plt+0x42c8>
   14dc8:	cmp	r5, #64	; 0x40
   14dcc:	movls	r4, r0
   14dd0:	addhi	r4, r0, #1
   14dd4:	b	14d9c <__assert_fail@plt+0x3e40>
   14dd8:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   14ddc:	cmp	r0, #0
   14de0:	ldr	r3, [r1]
   14de4:	beq	14e08 <__assert_fail@plt+0x3eac>
   14de8:	ldr	r2, [pc, #60]	; 14e2c <__assert_fail@plt+0x3ed0>
   14dec:	cmp	r3, r2
   14df0:	bhi	14e24 <__assert_fail@plt+0x3ec8>
   14df4:	add	r2, r3, #1
   14df8:	add	r3, r2, r3, lsr #1
   14dfc:	str	r3, [r1]
   14e00:	mov	r1, r3
   14e04:	b	14cd0 <__assert_fail@plt+0x3d74>
   14e08:	cmp	r3, #0
   14e0c:	bne	14e20 <__assert_fail@plt+0x3ec4>
   14e10:	mov	r3, #64	; 0x40
   14e14:	str	r3, [r1]
   14e18:	mov	r1, r3
   14e1c:	b	14cd0 <__assert_fail@plt+0x3d74>
   14e20:	bge	14dfc <__assert_fail@plt+0x3ea0>
   14e24:	push	{r4, lr}
   14e28:	bl	14ebc <__assert_fail@plt+0x3f60>
   14e2c:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   14e30:	push	{r4, lr}
   14e34:	mov	r4, r0
   14e38:	bl	14c74 <__assert_fail@plt+0x3d18>
   14e3c:	mov	r2, r4
   14e40:	mov	r1, #0
   14e44:	pop	{r4, lr}
   14e48:	b	10e90 <memset@plt>
   14e4c:	push	{r4, r5, r6, lr}
   14e50:	umull	r4, r5, r0, r1
   14e54:	adds	r3, r5, #0
   14e58:	movne	r3, #1
   14e5c:	cmp	r4, #0
   14e60:	blt	14e78 <__assert_fail@plt+0x3f1c>
   14e64:	cmp	r3, #0
   14e68:	bne	14e78 <__assert_fail@plt+0x3f1c>
   14e6c:	bl	10cf8 <calloc@plt>
   14e70:	cmp	r0, #0
   14e74:	popne	{r4, r5, r6, pc}
   14e78:	bl	14ebc <__assert_fail@plt+0x3f60>
   14e7c:	push	{r4, r5, r6, lr}
   14e80:	mov	r4, r1
   14e84:	mov	r5, r0
   14e88:	mov	r0, r1
   14e8c:	bl	14c74 <__assert_fail@plt+0x3d18>
   14e90:	mov	r2, r4
   14e94:	mov	r1, r5
   14e98:	pop	{r4, r5, r6, lr}
   14e9c:	b	10d64 <memcpy@plt>
   14ea0:	push	{r4, lr}
   14ea4:	mov	r4, r0
   14ea8:	bl	10e6c <strlen@plt>
   14eac:	add	r1, r0, #1
   14eb0:	mov	r0, r4
   14eb4:	pop	{r4, lr}
   14eb8:	b	14e7c <__assert_fail@plt+0x3f20>
   14ebc:	ldr	r3, [pc, #44]	; 14ef0 <__assert_fail@plt+0x3f94>
   14ec0:	push	{r4, lr}
   14ec4:	mov	r2, #5
   14ec8:	ldr	r1, [pc, #36]	; 14ef4 <__assert_fail@plt+0x3f98>
   14ecc:	mov	r0, #0
   14ed0:	ldr	r4, [r3]
   14ed4:	bl	10d94 <dcgettext@plt>
   14ed8:	ldr	r2, [pc, #24]	; 14ef8 <__assert_fail@plt+0x3f9c>
   14edc:	mov	r1, #0
   14ee0:	mov	r3, r0
   14ee4:	mov	r0, r4
   14ee8:	bl	10e0c <error@plt>
   14eec:	bl	10f44 <abort@plt>
   14ef0:	strdeq	r7, [r2], -r4
   14ef4:	ldrdeq	r6, [r1], -r4
   14ef8:	andeq	r5, r1, r0, asr ip
   14efc:	push	{r4, lr}
   14f00:	bl	10d4c <strndup@plt>
   14f04:	cmp	r0, #0
   14f08:	popne	{r4, pc}
   14f0c:	bl	14ebc <__assert_fail@plt+0x3f60>
   14f10:	push	{r4, r5, lr}
   14f14:	sub	sp, sp, #12
   14f18:	mov	r4, r0
   14f1c:	bl	10ea8 <fileno@plt>
   14f20:	cmp	r0, #0
   14f24:	mov	r0, r4
   14f28:	blt	14fa4 <__assert_fail@plt+0x4048>
   14f2c:	bl	10e30 <__freading@plt>
   14f30:	cmp	r0, #0
   14f34:	bne	14f70 <__assert_fail@plt+0x4014>
   14f38:	mov	r0, r4
   14f3c:	bl	14fb0 <__assert_fail@plt+0x4054>
   14f40:	cmp	r0, #0
   14f44:	beq	14fa0 <__assert_fail@plt+0x4044>
   14f48:	bl	10e78 <__errno_location@plt>
   14f4c:	mov	r5, r0
   14f50:	mov	r0, r4
   14f54:	ldr	r4, [r5]
   14f58:	bl	10ec0 <fclose@plt>
   14f5c:	cmp	r4, #0
   14f60:	mvnne	r0, #0
   14f64:	strne	r4, [r5]
   14f68:	add	sp, sp, #12
   14f6c:	pop	{r4, r5, pc}
   14f70:	mov	r0, r4
   14f74:	bl	10ea8 <fileno@plt>
   14f78:	mov	r3, #1
   14f7c:	str	r3, [sp]
   14f80:	mov	r2, #0
   14f84:	mov	r3, #0
   14f88:	bl	10ddc <lseek64@plt>
   14f8c:	mvn	r3, #0
   14f90:	mvn	r2, #0
   14f94:	cmp	r1, r3
   14f98:	cmpeq	r0, r2
   14f9c:	bne	14f38 <__assert_fail@plt+0x3fdc>
   14fa0:	mov	r0, r4
   14fa4:	add	sp, sp, #12
   14fa8:	pop	{r4, r5, lr}
   14fac:	b	10ec0 <fclose@plt>
   14fb0:	push	{r4, lr}
   14fb4:	subs	r4, r0, #0
   14fb8:	sub	sp, sp, #8
   14fbc:	beq	14fd8 <__assert_fail@plt+0x407c>
   14fc0:	bl	10e30 <__freading@plt>
   14fc4:	cmp	r0, #0
   14fc8:	beq	14fd8 <__assert_fail@plt+0x407c>
   14fcc:	ldr	r3, [r4]
   14fd0:	tst	r3, #256	; 0x100
   14fd4:	bne	14fe8 <__assert_fail@plt+0x408c>
   14fd8:	mov	r0, r4
   14fdc:	add	sp, sp, #8
   14fe0:	pop	{r4, lr}
   14fe4:	b	10d34 <fflush@plt>
   14fe8:	mov	r3, #1
   14fec:	str	r3, [sp]
   14ff0:	mov	r2, #0
   14ff4:	mov	r3, #0
   14ff8:	mov	r0, r4
   14ffc:	bl	15010 <__assert_fail@plt+0x40b4>
   15000:	mov	r0, r4
   15004:	add	sp, sp, #8
   15008:	pop	{r4, lr}
   1500c:	b	10d34 <fflush@plt>
   15010:	push	{r4, r5, r6, r7, r8, lr}
   15014:	sub	sp, sp, #8
   15018:	ldmib	r0, {ip, lr}
   1501c:	mov	r4, r0
   15020:	ldr	r5, [sp, #32]
   15024:	cmp	lr, ip
   15028:	beq	15040 <__assert_fail@plt+0x40e4>
   1502c:	str	r5, [sp, #32]
   15030:	mov	r0, r4
   15034:	add	sp, sp, #8
   15038:	pop	{r4, r5, r6, r7, r8, lr}
   1503c:	b	10ecc <fseeko64@plt>
   15040:	ldr	lr, [r0, #20]
   15044:	ldr	ip, [r0, #16]
   15048:	cmp	lr, ip
   1504c:	bne	1502c <__assert_fail@plt+0x40d0>
   15050:	ldr	r8, [r0, #36]	; 0x24
   15054:	cmp	r8, #0
   15058:	bne	1502c <__assert_fail@plt+0x40d0>
   1505c:	mov	r6, r2
   15060:	mov	r7, r3
   15064:	bl	10ea8 <fileno@plt>
   15068:	mov	r2, r6
   1506c:	mov	r3, r7
   15070:	str	r5, [sp]
   15074:	bl	10ddc <lseek64@plt>
   15078:	mvn	r3, #0
   1507c:	mvn	r2, #0
   15080:	cmp	r1, r3
   15084:	cmpeq	r0, r2
   15088:	beq	150a8 <__assert_fail@plt+0x414c>
   1508c:	ldr	r3, [r4]
   15090:	strd	r0, [r4, #80]	; 0x50
   15094:	mov	r0, r8
   15098:	bic	r3, r3, #16
   1509c:	str	r3, [r4]
   150a0:	add	sp, sp, #8
   150a4:	pop	{r4, r5, r6, r7, r8, pc}
   150a8:	mvn	r0, #0
   150ac:	b	150a0 <__assert_fail@plt+0x4144>
   150b0:	push	{r4, r5, r6, r7, r8, lr}
   150b4:	subs	r7, r0, #0
   150b8:	ldr	r5, [pc, #108]	; 1512c <__assert_fail@plt+0x41d0>
   150bc:	sub	sp, sp, #8
   150c0:	mov	r8, r1
   150c4:	ldr	r1, [r5]
   150c8:	moveq	r7, sp
   150cc:	str	r1, [sp, #4]
   150d0:	mov	r0, r7
   150d4:	mov	r1, r8
   150d8:	mov	r6, r2
   150dc:	bl	10e00 <mbrtowc@plt>
   150e0:	cmp	r6, #0
   150e4:	cmnne	r0, #3
   150e8:	mov	r4, r0
   150ec:	bhi	1510c <__assert_fail@plt+0x41b0>
   150f0:	ldr	r2, [sp, #4]
   150f4:	ldr	r3, [r5]
   150f8:	mov	r0, r4
   150fc:	cmp	r2, r3
   15100:	bne	15128 <__assert_fail@plt+0x41cc>
   15104:	add	sp, sp, #8
   15108:	pop	{r4, r5, r6, r7, r8, pc}
   1510c:	mov	r0, #0
   15110:	bl	151a4 <__assert_fail@plt+0x4248>
   15114:	cmp	r0, #0
   15118:	moveq	r4, #1
   1511c:	ldrbeq	r3, [r8]
   15120:	streq	r3, [r7]
   15124:	b	150f0 <__assert_fail@plt+0x4194>
   15128:	bl	10da0 <__stack_chk_fail@plt>
   1512c:	andeq	r6, r2, r8, lsl #30
   15130:	push	{r4, r5, r6, lr}
   15134:	mov	r4, r0
   15138:	bl	10df4 <__fpending@plt>
   1513c:	ldr	r5, [r4]
   15140:	and	r5, r5, #32
   15144:	mov	r6, r0
   15148:	mov	r0, r4
   1514c:	bl	14f10 <__assert_fail@plt+0x3fb4>
   15150:	cmp	r5, #0
   15154:	mov	r4, r0
   15158:	bne	15184 <__assert_fail@plt+0x4228>
   1515c:	cmp	r0, #0
   15160:	beq	1517c <__assert_fail@plt+0x4220>
   15164:	cmp	r6, #0
   15168:	bne	1519c <__assert_fail@plt+0x4240>
   1516c:	bl	10e78 <__errno_location@plt>
   15170:	ldr	r4, [r0]
   15174:	subs	r4, r4, #9
   15178:	mvnne	r4, #0
   1517c:	mov	r0, r4
   15180:	pop	{r4, r5, r6, pc}
   15184:	cmp	r0, #0
   15188:	bne	1519c <__assert_fail@plt+0x4240>
   1518c:	bl	10e78 <__errno_location@plt>
   15190:	str	r4, [r0]
   15194:	mvn	r4, #0
   15198:	b	1517c <__assert_fail@plt+0x4220>
   1519c:	mvn	r4, #0
   151a0:	b	1517c <__assert_fail@plt+0x4220>
   151a4:	push	{r4, lr}
   151a8:	mov	r1, #0
   151ac:	bl	10ef0 <setlocale@plt>
   151b0:	subs	r4, r0, #0
   151b4:	beq	151e0 <__assert_fail@plt+0x4284>
   151b8:	ldr	r1, [pc, #40]	; 151e8 <__assert_fail@plt+0x428c>
   151bc:	bl	10d1c <strcmp@plt>
   151c0:	cmp	r0, #0
   151c4:	popeq	{r4, pc}
   151c8:	mov	r0, r4
   151cc:	ldr	r1, [pc, #24]	; 151ec <__assert_fail@plt+0x4290>
   151d0:	bl	10d1c <strcmp@plt>
   151d4:	adds	r0, r0, #0
   151d8:	movne	r0, #1
   151dc:	pop	{r4, pc}
   151e0:	mov	r0, #1
   151e4:	pop	{r4, pc}
   151e8:	andeq	r6, r1, r8, ror #5
   151ec:	andeq	r6, r1, ip, ror #5
   151f0:	push	{r4, lr}
   151f4:	mov	r0, #14
   151f8:	bl	10f08 <nl_langinfo@plt>
   151fc:	cmp	r0, #0
   15200:	beq	15218 <__assert_fail@plt+0x42bc>
   15204:	ldrb	r2, [r0]
   15208:	ldr	r3, [pc, #16]	; 15220 <__assert_fail@plt+0x42c4>
   1520c:	cmp	r2, #0
   15210:	moveq	r0, r3
   15214:	pop	{r4, pc}
   15218:	ldr	r0, [pc]	; 15220 <__assert_fail@plt+0x42c4>
   1521c:	pop	{r4, pc}
   15220:	strdeq	r6, [r1], -r4
   15224:	subs	r2, r1, #1
   15228:	bxeq	lr
   1522c:	bcc	15404 <__assert_fail@plt+0x44a8>
   15230:	cmp	r0, r1
   15234:	bls	153e8 <__assert_fail@plt+0x448c>
   15238:	tst	r1, r2
   1523c:	beq	153f4 <__assert_fail@plt+0x4498>
   15240:	clz	r3, r0
   15244:	clz	r2, r1
   15248:	sub	r3, r2, r3
   1524c:	rsbs	r3, r3, #31
   15250:	addne	r3, r3, r3, lsl #1
   15254:	mov	r2, #0
   15258:	addne	pc, pc, r3, lsl #2
   1525c:	nop			; (mov r0, r0)
   15260:	cmp	r0, r1, lsl #31
   15264:	adc	r2, r2, r2
   15268:	subcs	r0, r0, r1, lsl #31
   1526c:	cmp	r0, r1, lsl #30
   15270:	adc	r2, r2, r2
   15274:	subcs	r0, r0, r1, lsl #30
   15278:	cmp	r0, r1, lsl #29
   1527c:	adc	r2, r2, r2
   15280:	subcs	r0, r0, r1, lsl #29
   15284:	cmp	r0, r1, lsl #28
   15288:	adc	r2, r2, r2
   1528c:	subcs	r0, r0, r1, lsl #28
   15290:	cmp	r0, r1, lsl #27
   15294:	adc	r2, r2, r2
   15298:	subcs	r0, r0, r1, lsl #27
   1529c:	cmp	r0, r1, lsl #26
   152a0:	adc	r2, r2, r2
   152a4:	subcs	r0, r0, r1, lsl #26
   152a8:	cmp	r0, r1, lsl #25
   152ac:	adc	r2, r2, r2
   152b0:	subcs	r0, r0, r1, lsl #25
   152b4:	cmp	r0, r1, lsl #24
   152b8:	adc	r2, r2, r2
   152bc:	subcs	r0, r0, r1, lsl #24
   152c0:	cmp	r0, r1, lsl #23
   152c4:	adc	r2, r2, r2
   152c8:	subcs	r0, r0, r1, lsl #23
   152cc:	cmp	r0, r1, lsl #22
   152d0:	adc	r2, r2, r2
   152d4:	subcs	r0, r0, r1, lsl #22
   152d8:	cmp	r0, r1, lsl #21
   152dc:	adc	r2, r2, r2
   152e0:	subcs	r0, r0, r1, lsl #21
   152e4:	cmp	r0, r1, lsl #20
   152e8:	adc	r2, r2, r2
   152ec:	subcs	r0, r0, r1, lsl #20
   152f0:	cmp	r0, r1, lsl #19
   152f4:	adc	r2, r2, r2
   152f8:	subcs	r0, r0, r1, lsl #19
   152fc:	cmp	r0, r1, lsl #18
   15300:	adc	r2, r2, r2
   15304:	subcs	r0, r0, r1, lsl #18
   15308:	cmp	r0, r1, lsl #17
   1530c:	adc	r2, r2, r2
   15310:	subcs	r0, r0, r1, lsl #17
   15314:	cmp	r0, r1, lsl #16
   15318:	adc	r2, r2, r2
   1531c:	subcs	r0, r0, r1, lsl #16
   15320:	cmp	r0, r1, lsl #15
   15324:	adc	r2, r2, r2
   15328:	subcs	r0, r0, r1, lsl #15
   1532c:	cmp	r0, r1, lsl #14
   15330:	adc	r2, r2, r2
   15334:	subcs	r0, r0, r1, lsl #14
   15338:	cmp	r0, r1, lsl #13
   1533c:	adc	r2, r2, r2
   15340:	subcs	r0, r0, r1, lsl #13
   15344:	cmp	r0, r1, lsl #12
   15348:	adc	r2, r2, r2
   1534c:	subcs	r0, r0, r1, lsl #12
   15350:	cmp	r0, r1, lsl #11
   15354:	adc	r2, r2, r2
   15358:	subcs	r0, r0, r1, lsl #11
   1535c:	cmp	r0, r1, lsl #10
   15360:	adc	r2, r2, r2
   15364:	subcs	r0, r0, r1, lsl #10
   15368:	cmp	r0, r1, lsl #9
   1536c:	adc	r2, r2, r2
   15370:	subcs	r0, r0, r1, lsl #9
   15374:	cmp	r0, r1, lsl #8
   15378:	adc	r2, r2, r2
   1537c:	subcs	r0, r0, r1, lsl #8
   15380:	cmp	r0, r1, lsl #7
   15384:	adc	r2, r2, r2
   15388:	subcs	r0, r0, r1, lsl #7
   1538c:	cmp	r0, r1, lsl #6
   15390:	adc	r2, r2, r2
   15394:	subcs	r0, r0, r1, lsl #6
   15398:	cmp	r0, r1, lsl #5
   1539c:	adc	r2, r2, r2
   153a0:	subcs	r0, r0, r1, lsl #5
   153a4:	cmp	r0, r1, lsl #4
   153a8:	adc	r2, r2, r2
   153ac:	subcs	r0, r0, r1, lsl #4
   153b0:	cmp	r0, r1, lsl #3
   153b4:	adc	r2, r2, r2
   153b8:	subcs	r0, r0, r1, lsl #3
   153bc:	cmp	r0, r1, lsl #2
   153c0:	adc	r2, r2, r2
   153c4:	subcs	r0, r0, r1, lsl #2
   153c8:	cmp	r0, r1, lsl #1
   153cc:	adc	r2, r2, r2
   153d0:	subcs	r0, r0, r1, lsl #1
   153d4:	cmp	r0, r1
   153d8:	adc	r2, r2, r2
   153dc:	subcs	r0, r0, r1
   153e0:	mov	r0, r2
   153e4:	bx	lr
   153e8:	moveq	r0, #1
   153ec:	movne	r0, #0
   153f0:	bx	lr
   153f4:	clz	r2, r1
   153f8:	rsb	r2, r2, #31
   153fc:	lsr	r0, r0, r2
   15400:	bx	lr
   15404:	cmp	r0, #0
   15408:	mvnne	r0, #0
   1540c:	b	1546c <__assert_fail@plt+0x4510>
   15410:	cmp	r1, #0
   15414:	beq	15404 <__assert_fail@plt+0x44a8>
   15418:	push	{r0, r1, lr}
   1541c:	bl	15224 <__assert_fail@plt+0x42c8>
   15420:	pop	{r1, r2, lr}
   15424:	mul	r3, r2, r0
   15428:	sub	r1, r1, r3
   1542c:	bx	lr
   15430:	cmp	r3, #0
   15434:	cmpeq	r2, #0
   15438:	bne	15450 <__assert_fail@plt+0x44f4>
   1543c:	cmp	r1, #0
   15440:	cmpeq	r0, #0
   15444:	mvnne	r1, #0
   15448:	mvnne	r0, #0
   1544c:	b	1546c <__assert_fail@plt+0x4510>
   15450:	sub	sp, sp, #8
   15454:	push	{sp, lr}
   15458:	bl	1547c <__assert_fail@plt+0x4520>
   1545c:	ldr	lr, [sp, #4]
   15460:	add	sp, sp, #8
   15464:	pop	{r2, r3}
   15468:	bx	lr
   1546c:	push	{r1, lr}
   15470:	mov	r0, #8
   15474:	bl	10d10 <raise@plt>
   15478:	pop	{r1, pc}
   1547c:	cmp	r1, r3
   15480:	cmpeq	r0, r2
   15484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15488:	mov	r4, r0
   1548c:	movcc	r0, #0
   15490:	mov	r5, r1
   15494:	ldr	lr, [sp, #36]	; 0x24
   15498:	movcc	r1, r0
   1549c:	bcc	15598 <__assert_fail@plt+0x463c>
   154a0:	cmp	r3, #0
   154a4:	clzeq	ip, r2
   154a8:	clzne	ip, r3
   154ac:	addeq	ip, ip, #32
   154b0:	cmp	r5, #0
   154b4:	clzeq	r1, r4
   154b8:	addeq	r1, r1, #32
   154bc:	clzne	r1, r5
   154c0:	sub	ip, ip, r1
   154c4:	sub	sl, ip, #32
   154c8:	lsl	r9, r3, ip
   154cc:	rsb	fp, ip, #32
   154d0:	orr	r9, r9, r2, lsl sl
   154d4:	orr	r9, r9, r2, lsr fp
   154d8:	lsl	r8, r2, ip
   154dc:	cmp	r5, r9
   154e0:	cmpeq	r4, r8
   154e4:	movcc	r0, #0
   154e8:	movcc	r1, r0
   154ec:	bcc	15508 <__assert_fail@plt+0x45ac>
   154f0:	mov	r0, #1
   154f4:	subs	r4, r4, r8
   154f8:	lsl	r1, r0, sl
   154fc:	orr	r1, r1, r0, lsr fp
   15500:	lsl	r0, r0, ip
   15504:	sbc	r5, r5, r9
   15508:	cmp	ip, #0
   1550c:	beq	15598 <__assert_fail@plt+0x463c>
   15510:	lsr	r6, r8, #1
   15514:	orr	r6, r6, r9, lsl #31
   15518:	lsr	r7, r9, #1
   1551c:	mov	r2, ip
   15520:	b	15544 <__assert_fail@plt+0x45e8>
   15524:	subs	r3, r4, r6
   15528:	sbc	r8, r5, r7
   1552c:	adds	r3, r3, r3
   15530:	adc	r8, r8, r8
   15534:	adds	r4, r3, #1
   15538:	adc	r5, r8, #0
   1553c:	subs	r2, r2, #1
   15540:	beq	15560 <__assert_fail@plt+0x4604>
   15544:	cmp	r5, r7
   15548:	cmpeq	r4, r6
   1554c:	bcs	15524 <__assert_fail@plt+0x45c8>
   15550:	adds	r4, r4, r4
   15554:	adc	r5, r5, r5
   15558:	subs	r2, r2, #1
   1555c:	bne	15544 <__assert_fail@plt+0x45e8>
   15560:	lsr	r3, r4, ip
   15564:	orr	r3, r3, r5, lsl fp
   15568:	lsr	r2, r5, ip
   1556c:	orr	r3, r3, r5, lsr sl
   15570:	adds	r0, r0, r4
   15574:	mov	r4, r3
   15578:	lsl	r3, r2, ip
   1557c:	orr	r3, r3, r4, lsl sl
   15580:	lsl	ip, r4, ip
   15584:	orr	r3, r3, r4, lsr fp
   15588:	adc	r1, r1, r5
   1558c:	subs	r0, r0, ip
   15590:	mov	r5, r2
   15594:	sbc	r1, r1, r3
   15598:	cmp	lr, #0
   1559c:	strdne	r4, [lr]
   155a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155a8:	mov	r7, r0
   155ac:	ldr	r6, [pc, #72]	; 155fc <__assert_fail@plt+0x46a0>
   155b0:	ldr	r5, [pc, #72]	; 15600 <__assert_fail@plt+0x46a4>
   155b4:	add	r6, pc, r6
   155b8:	add	r5, pc, r5
   155bc:	sub	r6, r6, r5
   155c0:	mov	r8, r1
   155c4:	mov	r9, r2
   155c8:	bl	10cd8 <calloc@plt-0x20>
   155cc:	asrs	r6, r6, #2
   155d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   155d4:	mov	r4, #0
   155d8:	add	r4, r4, #1
   155dc:	ldr	r3, [r5], #4
   155e0:	mov	r2, r9
   155e4:	mov	r1, r8
   155e8:	mov	r0, r7
   155ec:	blx	r3
   155f0:	cmp	r6, r4
   155f4:	bne	155d8 <__assert_fail@plt+0x467c>
   155f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155fc:	andeq	r1, r1, r8, asr #18
   15600:	andeq	r1, r1, r0, asr #18
   15604:	bx	lr
   15608:	ldr	r3, [pc, #12]	; 1561c <__assert_fail@plt+0x46c0>
   1560c:	mov	r1, #0
   15610:	add	r3, pc, r3
   15614:	ldr	r2, [r3]
   15618:	b	10e84 <__cxa_atexit@plt>
   1561c:	andeq	r1, r1, ip, asr #21

Disassembly of section .fini:

00015620 <.fini>:
   15620:	push	{r3, lr}
   15624:	pop	{r3, pc}
