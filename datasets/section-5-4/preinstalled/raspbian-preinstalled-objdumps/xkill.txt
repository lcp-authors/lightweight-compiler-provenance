
raspbian-preinstalled/xkill:     file format elf32-littlearm


Disassembly of section .init:

00010a24 <_init@@Base>:
   10a24:	push	{r3, lr}
   10a28:	bl	112fc <abort@plt+0x744>
   10a2c:	pop	{r3, pc}

Disassembly of section .plt:

00010a30 <XmuClientWindow@plt-0x14>:
   10a30:	push	{lr}		; (str lr, [sp, #-4]!)
   10a34:	ldr	lr, [pc, #4]	; 10a40 <_init@@Base+0x1c>
   10a38:	add	lr, pc, lr
   10a3c:	ldr	pc, [lr, #8]!
   10a40:	andeq	r1, r1, r0, asr #11

00010a44 <XmuClientWindow@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #69632	; 0x11000
   10a4c:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a50 <XGetDefault@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #69632	; 0x11000
   10a58:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a5c <strtol@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #69632	; 0x11000
   10a64:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a68 <XAllowEvents@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #69632	; 0x11000
   10a70:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a74 <XCreateFontCursor@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #69632	; 0x11000
   10a7c:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a80 <XKillClient@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #69632	; 0x11000
   10a88:	ldr	pc, [ip, #1432]!	; 0x598

00010a8c <XQueryTree@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #69632	; 0x11000
   10a94:	ldr	pc, [ip, #1424]!	; 0x590

00010a98 <__stack_chk_fail@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #69632	; 0x11000
   10aa0:	ldr	pc, [ip, #1416]!	; 0x588

00010aa4 <XFree@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #69632	; 0x11000
   10aac:	ldr	pc, [ip, #1408]!	; 0x580

00010ab0 <strcasecmp@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #69632	; 0x11000
   10ab8:	ldr	pc, [ip, #1400]!	; 0x578

00010abc <XGrabPointer@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #69632	; 0x11000
   10ac4:	ldr	pc, [ip, #1392]!	; 0x570

00010ac8 <puts@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #69632	; 0x11000
   10ad0:	ldr	pc, [ip, #1384]!	; 0x568

00010ad4 <__libc_start_main@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #69632	; 0x11000
   10adc:	ldr	pc, [ip, #1376]!	; 0x560

00010ae0 <XOpenDisplay@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #69632	; 0x11000
   10ae8:	ldr	pc, [ip, #1368]!	; 0x558

00010aec <__gmon_start__@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #69632	; 0x11000
   10af4:	ldr	pc, [ip, #1360]!	; 0x550

00010af8 <__ctype_b_loc@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #69632	; 0x11000
   10b00:	ldr	pc, [ip, #1352]!	; 0x548

00010b04 <exit@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #69632	; 0x11000
   10b0c:	ldr	pc, [ip, #1344]!	; 0x540

00010b10 <strtoul@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #69632	; 0x11000
   10b18:	ldr	pc, [ip, #1336]!	; 0x538

00010b1c <XUngrabPointer@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #69632	; 0x11000
   10b24:	ldr	pc, [ip, #1328]!	; 0x530

00010b28 <XSetErrorHandler@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #69632	; 0x11000
   10b30:	ldr	pc, [ip, #1320]!	; 0x528

00010b34 <XGetPointerMapping@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #69632	; 0x11000
   10b3c:	ldr	pc, [ip, #1312]!	; 0x520

00010b40 <XInternAtom@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #69632	; 0x11000
   10b48:	ldr	pc, [ip, #1304]!	; 0x518

00010b4c <XDisplayName@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #69632	; 0x11000
   10b54:	ldr	pc, [ip, #1296]!	; 0x510

00010b58 <XSync@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #69632	; 0x11000
   10b60:	ldr	pc, [ip, #1288]!	; 0x508

00010b64 <__printf_chk@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #69632	; 0x11000
   10b6c:	ldr	pc, [ip, #1280]!	; 0x500

00010b70 <__fprintf_chk@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #69632	; 0x11000
   10b78:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b7c <XGetWindowAttributes@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #69632	; 0x11000
   10b84:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b88 <XFreeCursor@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #69632	; 0x11000
   10b90:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b94 <XWindowEvent@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #69632	; 0x11000
   10b9c:	ldr	pc, [ip, #1248]!	; 0x4e0

00010ba0 <XGetWindowProperty@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #69632	; 0x11000
   10ba8:	ldr	pc, [ip, #1240]!	; 0x4d8

00010bac <XCloseDisplay@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #69632	; 0x11000
   10bb4:	ldr	pc, [ip, #1232]!	; 0x4d0

00010bb8 <abort@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #69632	; 0x11000
   10bc0:	ldr	pc, [ip, #1224]!	; 0x4c8

Disassembly of section .text:

00010bc4 <.text>:
   10bc4:	ldr	r3, [pc, #1696]	; 1126c <abort@plt+0x6b4>
   10bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bcc:	sub	sp, sp, #412	; 0x19c
   10bd0:	ldr	r9, [pc, #1688]	; 11270 <abort@plt+0x6b8>
   10bd4:	ldr	r8, [r1]
   10bd8:	ldr	r3, [r3]
   10bdc:	cmp	r0, #1
   10be0:	str	r8, [r9]
   10be4:	str	r3, [sp, #404]	; 0x194
   10be8:	ble	10d74 <abort@plt+0x1bc>
   10bec:	mov	r6, r1
   10bf0:	ldr	r1, [r1, #4]
   10bf4:	ldrb	r3, [r1]
   10bf8:	cmp	r3, #45	; 0x2d
   10bfc:	bne	10ca8 <abort@plt+0xf0>
   10c00:	mov	r5, #0
   10c04:	mov	r7, r0
   10c08:	mov	fp, r5
   10c0c:	mov	sl, r5
   10c10:	mov	r4, #1
   10c14:	mov	r0, r5
   10c18:	str	r5, [sp, #32]
   10c1c:	ldrb	r2, [r1, #1]
   10c20:	sub	r2, r2, #97	; 0x61
   10c24:	cmp	r2, #21
   10c28:	ldrls	pc, [pc, r2, lsl #2]
   10c2c:	b	10ca8 <abort@plt+0xf0>
   10c30:	andeq	r0, r1, r8, lsl #25
   10c34:	andeq	r0, r1, ip, asr #26
   10c38:	andeq	r0, r1, r8, lsr #25
   10c3c:	andeq	r0, r1, r8, lsr sp
   10c40:	andeq	r0, r1, r8, lsr #25
   10c44:	andeq	r0, r1, r0, lsr sp
   10c48:	andeq	r0, r1, r8, lsr #25
   10c4c:	andeq	r0, r1, r8, lsr #25
   10c50:	ldrdeq	r0, [r1], -ip
   10c54:	andeq	r0, r1, r8, lsr #25
   10c58:	andeq	r0, r1, r8, lsr #25
   10c5c:	andeq	r0, r1, r8, lsr #25
   10c60:	andeq	r0, r1, r8, lsr #25
   10c64:	andeq	r0, r1, r8, lsr #25
   10c68:	andeq	r0, r1, r8, lsr #25
   10c6c:	andeq	r0, r1, r8, lsr #25
   10c70:	andeq	r0, r1, r8, lsr #25
   10c74:	andeq	r0, r1, r8, lsr #25
   10c78:	andeq	r0, r1, r8, lsr #25
   10c7c:	andeq	r0, r1, r8, lsr #25
   10c80:	andeq	r0, r1, r8, lsr #25
   10c84:	andeq	r0, r1, ip, asr #25
   10c88:	mov	fp, #1
   10c8c:	add	r4, r4, #1
   10c90:	cmp	r7, r4
   10c94:	ble	10dbc <abort@plt+0x204>
   10c98:	ldr	r1, [r6, r4, lsl #2]
   10c9c:	ldrb	r3, [r1]
   10ca0:	cmp	r3, #45	; 0x2d
   10ca4:	beq	10c1c <abort@plt+0x64>
   10ca8:	ldr	r2, [pc, #1476]	; 11274 <abort@plt+0x6bc>
   10cac:	str	r1, [sp]
   10cb0:	mov	r3, r8
   10cb4:	ldr	r0, [r2]
   10cb8:	mov	r1, #1
   10cbc:	ldr	r2, [pc, #1460]	; 11278 <abort@plt+0x6c0>
   10cc0:	bl	10b70 <__fprintf_chk@plt>
   10cc4:	mov	r0, #0
   10cc8:	bl	113b8 <abort@plt+0x800>
   10ccc:	ldr	r0, [pc, #1448]	; 1127c <abort@plt+0x6c4>
   10cd0:	bl	10ac8 <puts@plt>
   10cd4:	mov	r0, #0
   10cd8:	bl	10b04 <exit@plt>
   10cdc:	add	r4, r4, #1
   10ce0:	cmp	r7, r4
   10ce4:	ble	110d8 <abort@plt+0x520>
   10ce8:	mov	r2, #0
   10cec:	mov	r1, r2
   10cf0:	ldr	r0, [r6, r4, lsl #2]
   10cf4:	bl	10b10 <strtoul@plt>
   10cf8:	add	r2, r6, r4, lsl #2
   10cfc:	sub	r3, r0, #1
   10d00:	cmn	r3, #3
   10d04:	bls	10c8c <abort@plt+0xd4>
   10d08:	ldr	r1, [pc, #1380]	; 11274 <abort@plt+0x6bc>
   10d0c:	ldr	r2, [r2]
   10d10:	mov	r3, r8
   10d14:	str	r2, [sp]
   10d18:	ldr	r2, [pc, #1376]	; 11280 <abort@plt+0x6c8>
   10d1c:	ldr	r0, [r1]
   10d20:	mov	r1, #1
   10d24:	bl	10b70 <__fprintf_chk@plt>
   10d28:	mov	r0, #1
   10d2c:	bl	10b04 <exit@plt>
   10d30:	mov	r5, #1
   10d34:	b	10c8c <abort@plt+0xd4>
   10d38:	add	r4, r4, #1
   10d3c:	cmp	r7, r4
   10d40:	bgt	10d6c <abort@plt+0x1b4>
   10d44:	ldr	r0, [pc, #1336]	; 11284 <abort@plt+0x6cc>
   10d48:	bl	113b8 <abort@plt+0x800>
   10d4c:	add	r4, r4, #1
   10d50:	cmp	r7, r4
   10d54:	bgt	10d60 <abort@plt+0x1a8>
   10d58:	ldr	r0, [pc, #1320]	; 11288 <abort@plt+0x6d0>
   10d5c:	bl	113b8 <abort@plt+0x800>
   10d60:	ldr	r3, [r6, r4, lsl #2]
   10d64:	str	r3, [sp, #32]
   10d68:	b	10c8c <abort@plt+0xd4>
   10d6c:	ldr	sl, [r6, r4, lsl #2]
   10d70:	b	10c8c <abort@plt+0xd4>
   10d74:	mov	r0, #0
   10d78:	bl	10ae0 <XOpenDisplay@plt>
   10d7c:	subs	r6, r0, #0
   10d80:	moveq	r3, r6
   10d84:	bne	11030 <abort@plt+0x478>
   10d88:	ldr	r2, [pc, #1252]	; 11274 <abort@plt+0x6bc>
   10d8c:	mov	r0, r3
   10d90:	ldr	r5, [r9]
   10d94:	ldr	r4, [r2]
   10d98:	bl	10b4c <XDisplayName@plt>
   10d9c:	mov	r3, r5
   10da0:	ldr	r2, [pc, #1252]	; 1128c <abort@plt+0x6d4>
   10da4:	mov	r1, #1
   10da8:	str	r0, [sp]
   10dac:	mov	r0, r4
   10db0:	bl	10b70 <__fprintf_chk@plt>
   10db4:	mov	r0, #1
   10db8:	bl	10b04 <exit@plt>
   10dbc:	mov	r3, sl
   10dc0:	mov	sl, r0
   10dc4:	mov	r0, r3
   10dc8:	str	r3, [sp, #36]	; 0x24
   10dcc:	bl	10ae0 <XOpenDisplay@plt>
   10dd0:	ldr	r3, [sp, #36]	; 0x24
   10dd4:	subs	r6, r0, #0
   10dd8:	beq	10d88 <abort@plt+0x1d0>
   10ddc:	cmp	fp, #0
   10de0:	ldr	r8, [r6, #132]	; 0x84
   10de4:	bne	10e34 <abort@plt+0x27c>
   10de8:	cmp	sl, #0
   10dec:	beq	10f50 <abort@plt+0x398>
   10df0:	ldr	r2, [r9]
   10df4:	mov	r3, sl
   10df8:	ldr	r1, [pc, #1168]	; 11290 <abort@plt+0x6d8>
   10dfc:	mov	r0, #1
   10e00:	bl	10b64 <__printf_chk@plt>
   10e04:	mov	r1, #0
   10e08:	mov	r0, r6
   10e0c:	bl	10b58 <XSync@plt>
   10e10:	mov	r1, sl
   10e14:	mov	r0, r6
   10e18:	bl	10a80 <XKillClient@plt>
   10e1c:	mov	r1, #0
   10e20:	mov	r0, r6
   10e24:	bl	10b58 <XSync@plt>
   10e28:	mov	r1, r6
   10e2c:	mov	r0, #0
   10e30:	bl	11420 <abort@plt+0x868>
   10e34:	add	r7, sp, #148	; 0x94
   10e38:	mov	r2, #256	; 0x100
   10e3c:	mov	r1, r7
   10e40:	bl	10b34 <XGetPointerMapping@plt>
   10e44:	mov	r2, #80	; 0x50
   10e48:	ldr	r3, [r6, #140]	; 0x8c
   10e4c:	mul	r2, r2, r8
   10e50:	mov	r9, #0
   10e54:	add	r3, r3, r2
   10e58:	str	r2, [sp, #32]
   10e5c:	mov	r4, r9
   10e60:	ldr	fp, [r3, #8]
   10e64:	mov	sl, r0
   10e68:	b	10e98 <abort@plt+0x2e0>
   10e6c:	ldrb	r2, [r7, r4]
   10e70:	cmp	r2, #0
   10e74:	beq	10e94 <abort@plt+0x2dc>
   10e78:	ldr	r3, [pc, #1044]	; 11294 <abort@plt+0x6dc>
   10e7c:	mov	r1, r8
   10e80:	mov	r0, r6
   10e84:	bl	11440 <abort@plt+0x888>
   10e88:	cmp	fp, r0
   10e8c:	bne	110e0 <abort@plt+0x528>
   10e90:	add	r9, r9, #1
   10e94:	add	r4, r4, #1
   10e98:	cmp	sl, r4
   10e9c:	bgt	10e6c <abort@plt+0x2b4>
   10ea0:	cmp	r9, #0
   10ea4:	beq	110e0 <abort@plt+0x528>
   10ea8:	ldr	r2, [sp, #32]
   10eac:	ldr	r3, [r6, #140]	; 0x8c
   10eb0:	mov	r1, #0
   10eb4:	add	r3, r3, r2
   10eb8:	mov	r0, r6
   10ebc:	ldr	r4, [r3, #8]
   10ec0:	bl	10b58 <XSync@plt>
   10ec4:	ldr	r0, [pc, #972]	; 11298 <abort@plt+0x6e0>
   10ec8:	bl	10b28 <XSetErrorHandler@plt>
   10ecc:	add	ip, sp, #52	; 0x34
   10ed0:	add	r0, sp, #48	; 0x30
   10ed4:	add	r3, sp, #44	; 0x2c
   10ed8:	stm	sp, {r0, ip}
   10edc:	mov	r1, r4
   10ee0:	mov	ip, #0
   10ee4:	mov	r2, r3
   10ee8:	mov	r0, r6
   10eec:	str	ip, [sp, #52]	; 0x34
   10ef0:	bl	10a8c <XQueryTree@plt>
   10ef4:	cmp	r5, #0
   10ef8:	beq	110ec <abort@plt+0x534>
   10efc:	ldr	r0, [sp, #48]	; 0x30
   10f00:	ldr	r3, [sp, #52]	; 0x34
   10f04:	mov	r4, #0
   10f08:	b	10f2c <abort@plt+0x374>
   10f0c:	ldr	r1, [r0, r4, lsl #2]
   10f10:	cmp	r1, #0
   10f14:	beq	10f28 <abort@plt+0x370>
   10f18:	mov	r0, r6
   10f1c:	bl	10a80 <XKillClient@plt>
   10f20:	ldr	r0, [sp, #48]	; 0x30
   10f24:	ldr	r3, [sp, #52]	; 0x34
   10f28:	add	r4, r4, #1
   10f2c:	cmp	r4, r3
   10f30:	bcc	10f0c <abort@plt+0x354>
   10f34:	bl	10aa4 <XFree@plt>
   10f38:	mov	r1, #0
   10f3c:	mov	r0, r6
   10f40:	bl	10b58 <XSync@plt>
   10f44:	mov	r0, #0
   10f48:	bl	10b28 <XSetErrorHandler@plt>
   10f4c:	b	10e28 <abort@plt+0x270>
   10f50:	ldr	r3, [sp, #32]
   10f54:	cmp	r3, #0
   10f58:	beq	11038 <abort@plt+0x480>
   10f5c:	ldr	r4, [sp, #32]
   10f60:	ldr	r1, [pc, #820]	; 1129c <abort@plt+0x6e4>
   10f64:	mov	r0, r4
   10f68:	bl	10ab0 <strcasecmp@plt>
   10f6c:	cmp	r0, #0
   10f70:	movne	r3, r4
   10f74:	subne	r7, r3, #1
   10f78:	bne	10fa0 <abort@plt+0x3e8>
   10f7c:	b	11150 <abort@plt+0x598>
   10f80:	tst	r4, #128	; 0x80
   10f84:	bne	11158 <abort@plt+0x5a0>
   10f88:	bl	10af8 <__ctype_b_loc@plt>
   10f8c:	lsl	r4, r4, #1
   10f90:	ldr	r3, [r0]
   10f94:	ldrh	r3, [r3, r4]
   10f98:	tst	r3, #2048	; 0x800
   10f9c:	beq	11158 <abort@plt+0x5a0>
   10fa0:	ldrb	r4, [r7, #1]!
   10fa4:	cmp	r4, #0
   10fa8:	bne	10f80 <abort@plt+0x3c8>
   10fac:	ldr	r0, [sp, #32]
   10fb0:	mov	r2, #10
   10fb4:	mov	r1, r4
   10fb8:	bl	10a5c <strtol@plt>
   10fbc:	cmn	r0, #2
   10fc0:	cmpne	r0, #0
   10fc4:	mov	sl, r0
   10fc8:	blt	11070 <abort@plt+0x4b8>
   10fcc:	add	r7, sp, #148	; 0x94
   10fd0:	mov	r1, r7
   10fd4:	mov	r2, #256	; 0x100
   10fd8:	mov	r0, r6
   10fdc:	bl	10b34 <XGetPointerMapping@plt>
   10fe0:	cmp	r0, #0
   10fe4:	ble	11180 <abort@plt+0x5c8>
   10fe8:	cmp	sl, #0
   10fec:	blt	1106c <abort@plt+0x4b4>
   10ff0:	ldrb	r3, [r7, r4]
   10ff4:	cmp	r3, sl
   10ff8:	beq	11174 <abort@plt+0x5bc>
   10ffc:	add	r4, r4, #1
   11000:	cmp	r0, r4
   11004:	bne	10ff0 <abort@plt+0x438>
   11008:	ldr	r2, [pc, #612]	; 11274 <abort@plt+0x6bc>
   1100c:	str	sl, [sp]
   11010:	ldr	r3, [r9]
   11014:	ldr	r0, [r2]
   11018:	ldr	r2, [pc, #640]	; 112a0 <abort@plt+0x6e8>
   1101c:	mov	r1, #1
   11020:	bl	10b70 <__fprintf_chk@plt>
   11024:	mov	r1, r6
   11028:	mov	r0, #1
   1102c:	bl	11420 <abort@plt+0x868>
   11030:	ldr	r8, [r6, #132]	; 0x84
   11034:	mov	r5, #0
   11038:	ldr	r2, [pc, #612]	; 112a4 <abort@plt+0x6ec>
   1103c:	ldr	r1, [r9]
   11040:	mov	r0, r6
   11044:	bl	10a50 <XGetDefault@plt>
   11048:	subs	r3, r0, #0
   1104c:	str	r3, [sp, #32]
   11050:	bne	10f5c <abort@plt+0x3a4>
   11054:	mov	r2, #256	; 0x100
   11058:	add	r1, sp, #148	; 0x94
   1105c:	mov	r0, r6
   11060:	bl	10b34 <XGetPointerMapping@plt>
   11064:	cmp	r0, #0
   11068:	ble	11180 <abort@plt+0x5c8>
   1106c:	ldrb	sl, [sp, #148]	; 0x94
   11070:	mov	r2, sl
   11074:	ldr	r3, [pc, #556]	; 112a8 <abort@plt+0x6f0>
   11078:	mov	r1, r8
   1107c:	mov	r0, r6
   11080:	bl	11440 <abort@plt+0x888>
   11084:	subs	r4, r0, #0
   11088:	beq	10e28 <abort@plt+0x270>
   1108c:	mov	r2, #80	; 0x50
   11090:	ldr	r3, [r6, #140]	; 0x8c
   11094:	mul	r8, r2, r8
   11098:	add	r3, r3, r8
   1109c:	ldr	r3, [r3, #8]
   110a0:	cmp	r3, r4
   110a4:	beq	10e28 <abort@plt+0x270>
   110a8:	cmp	r5, #0
   110ac:	movne	sl, r4
   110b0:	bne	10df0 <abort@plt+0x238>
   110b4:	mov	r1, r4
   110b8:	mov	r0, r6
   110bc:	bl	10a44 <XmuClientWindow@plt>
   110c0:	cmp	r4, r0
   110c4:	mov	sl, r0
   110c8:	beq	111a4 <abort@plt+0x5ec>
   110cc:	cmp	r0, #0
   110d0:	beq	10e28 <abort@plt+0x270>
   110d4:	b	10df0 <abort@plt+0x238>
   110d8:	ldr	r0, [pc, #460]	; 112ac <abort@plt+0x6f4>
   110dc:	bl	113b8 <abort@plt+0x800>
   110e0:	ldr	r0, [pc, #456]	; 112b0 <abort@plt+0x6f8>
   110e4:	bl	10ac8 <puts@plt>
   110e8:	b	10e28 <abort@plt+0x270>
   110ec:	mov	r7, r5
   110f0:	b	11100 <abort@plt+0x548>
   110f4:	ldr	r3, [sp, #48]	; 0x30
   110f8:	str	r7, [r3, r4]
   110fc:	add	r5, r5, #1
   11100:	ldr	r3, [sp, #52]	; 0x34
   11104:	ldr	r0, [sp, #48]	; 0x30
   11108:	cmp	r5, r3
   1110c:	bcs	10f04 <abort@plt+0x34c>
   11110:	ldr	r1, [r0, r5, lsl #2]
   11114:	add	r2, sp, #56	; 0x38
   11118:	mov	r0, r6
   1111c:	bl	10b7c <XGetWindowAttributes@plt>
   11120:	lsl	r4, r5, #2
   11124:	cmp	r0, #0
   11128:	beq	110f4 <abort@plt+0x53c>
   1112c:	ldr	r3, [sp, #124]	; 0x7c
   11130:	cmp	r3, #2
   11134:	bne	110f4 <abort@plt+0x53c>
   11138:	ldr	r8, [sp, #48]	; 0x30
   1113c:	mov	r0, r6
   11140:	ldr	r1, [r8, r4]
   11144:	bl	10a44 <XmuClientWindow@plt>
   11148:	str	r0, [r8, r4]
   1114c:	b	110fc <abort@plt+0x544>
   11150:	mvn	sl, #0
   11154:	b	11070 <abort@plt+0x4b8>
   11158:	ldr	r2, [pc, #276]	; 11274 <abort@plt+0x6bc>
   1115c:	ldr	r3, [sp, #32]
   11160:	str	r3, [sp]
   11164:	ldr	r0, [r2]
   11168:	ldr	r3, [r9]
   1116c:	ldr	r2, [pc, #320]	; 112b4 <abort@plt+0x6fc>
   11170:	b	1101c <abort@plt+0x464>
   11174:	cmp	r0, r4
   11178:	bne	11070 <abort@plt+0x4b8>
   1117c:	b	11008 <abort@plt+0x450>
   11180:	ldr	r1, [pc, #236]	; 11274 <abort@plt+0x6bc>
   11184:	ldr	r3, [r9]
   11188:	ldr	r2, [pc, #296]	; 112b8 <abort@plt+0x700>
   1118c:	ldr	r0, [r1]
   11190:	mov	r1, #1
   11194:	bl	10b70 <__fprintf_chk@plt>
   11198:	mov	r1, r6
   1119c:	mov	r0, #1
   111a0:	bl	11420 <abort@plt+0x868>
   111a4:	mov	r2, #1
   111a8:	ldr	r1, [pc, #268]	; 112bc <abort@plt+0x704>
   111ac:	mov	r0, r6
   111b0:	str	r5, [sp, #56]	; 0x38
   111b4:	bl	10b40 <XInternAtom@plt>
   111b8:	add	r4, sp, #56	; 0x38
   111bc:	subs	r2, r0, #0
   111c0:	bne	111f4 <abort@plt+0x63c>
   111c4:	ldr	r3, [r6, #140]	; 0x8c
   111c8:	mov	r2, r4
   111cc:	add	r8, r3, r8
   111d0:	mov	r0, r6
   111d4:	ldr	r1, [r8, #8]
   111d8:	bl	10b7c <XGetWindowAttributes@plt>
   111dc:	cmp	r0, #0
   111e0:	beq	10df0 <abort@plt+0x238>
   111e4:	ldr	r3, [sp, #128]	; 0x80
   111e8:	tst	r3, #1572864	; 0x180000
   111ec:	beq	10df0 <abort@plt+0x238>
   111f0:	b	10e28 <abort@plt+0x270>
   111f4:	add	r1, sp, #52	; 0x34
   111f8:	add	lr, sp, #48	; 0x30
   111fc:	add	ip, sp, #44	; 0x2c
   11200:	str	r1, [sp, #24]
   11204:	add	r1, sp, #40	; 0x28
   11208:	str	r5, [sp, #8]
   1120c:	str	r5, [sp, #4]
   11210:	str	r5, [sp]
   11214:	mov	r3, r5
   11218:	str	r1, [sp, #12]
   1121c:	str	r4, [sp, #28]
   11220:	str	lr, [sp, #20]
   11224:	str	ip, [sp, #16]
   11228:	mov	r1, sl
   1122c:	mov	r0, r6
   11230:	bl	10ba0 <XGetWindowProperty@plt>
   11234:	mov	r5, r0
   11238:	ldr	r0, [sp, #56]	; 0x38
   1123c:	cmp	r0, #0
   11240:	beq	11248 <abort@plt+0x690>
   11244:	bl	10aa4 <XFree@plt>
   11248:	cmp	r5, #0
   1124c:	bne	111c4 <abort@plt+0x60c>
   11250:	ldr	r3, [sp, #40]	; 0x28
   11254:	cmp	r3, #0
   11258:	beq	111c4 <abort@plt+0x60c>
   1125c:	ldr	r3, [sp, #44]	; 0x2c
   11260:	cmp	r3, #0
   11264:	beq	111c4 <abort@plt+0x60c>
   11268:	b	10df0 <abort@plt+0x238>
   1126c:	strdeq	r1, [r2], -r8
   11270:	andeq	r2, r2, r0, lsr #1
   11274:	muleq	r2, r8, r0
   11278:	andeq	r1, r1, r4, lsl #19
   1127c:	andeq	r1, r1, r8, ror r9
   11280:	andeq	r1, r1, r0, asr #18
   11284:	andeq	r1, r1, r4, lsl #18
   11288:	andeq	r1, r1, r8, asr r9
   1128c:	andeq	r1, r1, r4, lsr #19
   11290:	muleq	r1, r8, sl
   11294:	andeq	r1, r1, r8, asr #19
   11298:			; <UNDEFINED> instruction: 0x000113b0
   1129c:	andeq	r1, r1, ip, ror #19
   112a0:	andeq	r1, r1, r0, lsr #20
   112a4:	andeq	r1, r1, r4, ror #19
   112a8:	andeq	r1, r1, r0, ror #20
   112ac:	andeq	r1, r1, r4, lsr #18
   112b0:	ldrdeq	r1, [r1], -r8
   112b4:	andeq	r1, r1, r0, asr #21
   112b8:	strdeq	r1, [r1], -r0
   112bc:	andeq	r1, r1, ip, lsl #21
   112c0:	mov	fp, #0
   112c4:	mov	lr, #0
   112c8:	pop	{r1}		; (ldr r1, [sp], #4)
   112cc:	mov	r2, sp
   112d0:	push	{r2}		; (str r2, [sp, #-4]!)
   112d4:	push	{r0}		; (str r0, [sp, #-4]!)
   112d8:	ldr	ip, [pc, #16]	; 112f0 <abort@plt+0x738>
   112dc:	push	{ip}		; (str ip, [sp, #-4]!)
   112e0:	ldr	r0, [pc, #12]	; 112f4 <abort@plt+0x73c>
   112e4:	ldr	r3, [pc, #12]	; 112f8 <abort@plt+0x740>
   112e8:	bl	10ad4 <__libc_start_main@plt>
   112ec:	bl	10bb8 <abort@plt>
   112f0:	andeq	r1, r1, ip, asr #13
   112f4:	andeq	r0, r1, r4, asr #23
   112f8:	andeq	r1, r1, ip, ror #12
   112fc:	ldr	r3, [pc, #20]	; 11318 <abort@plt+0x760>
   11300:	ldr	r2, [pc, #20]	; 1131c <abort@plt+0x764>
   11304:	add	r3, pc, r3
   11308:	ldr	r2, [r3, r2]
   1130c:	cmp	r2, #0
   11310:	bxeq	lr
   11314:	b	10aec <__gmon_start__@plt>
   11318:	strdeq	r0, [r1], -r4
   1131c:	andeq	r0, r0, ip, lsl #1
   11320:	ldr	r0, [pc, #24]	; 11340 <abort@plt+0x788>
   11324:	ldr	r3, [pc, #24]	; 11344 <abort@plt+0x78c>
   11328:	cmp	r3, r0
   1132c:	bxeq	lr
   11330:	ldr	r3, [pc, #16]	; 11348 <abort@plt+0x790>
   11334:	cmp	r3, #0
   11338:	bxeq	lr
   1133c:	bx	r3
   11340:	muleq	r2, r8, r0
   11344:	muleq	r2, r8, r0
   11348:	andeq	r0, r0, r0
   1134c:	ldr	r0, [pc, #36]	; 11378 <abort@plt+0x7c0>
   11350:	ldr	r1, [pc, #36]	; 1137c <abort@plt+0x7c4>
   11354:	sub	r1, r1, r0
   11358:	asr	r1, r1, #2
   1135c:	add	r1, r1, r1, lsr #31
   11360:	asrs	r1, r1, #1
   11364:	bxeq	lr
   11368:	ldr	r3, [pc, #16]	; 11380 <abort@plt+0x7c8>
   1136c:	cmp	r3, #0
   11370:	bxeq	lr
   11374:	bx	r3
   11378:	muleq	r2, r8, r0
   1137c:	muleq	r2, r8, r0
   11380:	andeq	r0, r0, r0
   11384:	push	{r4, lr}
   11388:	ldr	r4, [pc, #24]	; 113a8 <abort@plt+0x7f0>
   1138c:	ldrb	r3, [r4]
   11390:	cmp	r3, #0
   11394:	popne	{r4, pc}
   11398:	bl	11320 <abort@plt+0x768>
   1139c:	mov	r3, #1
   113a0:	strb	r3, [r4]
   113a4:	pop	{r4, pc}
   113a8:	muleq	r2, ip, r0
   113ac:	b	1134c <abort@plt+0x794>
   113b0:	mov	r0, #0
   113b4:	bx	lr
   113b8:	cmp	r0, #0
   113bc:	push	{lr}		; (str lr, [sp, #-4]!)
   113c0:	sub	sp, sp, #12
   113c4:	ldr	r5, [pc, #64]	; 1140c <abort@plt+0x854>
   113c8:	ldr	r4, [pc, #64]	; 11410 <abort@plt+0x858>
   113cc:	beq	113e8 <abort@plt+0x830>
   113d0:	str	r0, [sp]
   113d4:	ldr	r3, [r5]
   113d8:	ldr	r0, [r4]
   113dc:	ldr	r2, [pc, #48]	; 11414 <abort@plt+0x85c>
   113e0:	mov	r1, #1
   113e4:	bl	10b70 <__fprintf_chk@plt>
   113e8:	ldr	r2, [pc, #40]	; 11418 <abort@plt+0x860>
   113ec:	ldr	r3, [r5]
   113f0:	str	r2, [sp]
   113f4:	ldr	r0, [r4]
   113f8:	ldr	r2, [pc, #28]	; 1141c <abort@plt+0x864>
   113fc:	mov	r1, #1
   11400:	bl	10b70 <__fprintf_chk@plt>
   11404:	mov	r0, #1
   11408:	bl	10b04 <exit@plt>
   1140c:	andeq	r2, r2, r0, lsr #1
   11410:	muleq	r2, r8, r0
   11414:	ldrdeq	r1, [r1], -ip
   11418:	andeq	r1, r1, r4, lsl #14
   1141c:	andeq	r1, r1, r8, ror #13
   11420:	cmp	r1, #0
   11424:	push	{r4, lr}
   11428:	mov	r4, r0
   1142c:	beq	11438 <abort@plt+0x880>
   11430:	mov	r0, r1
   11434:	bl	10bac <XCloseDisplay@plt>
   11438:	mov	r0, r4
   1143c:	bl	10b04 <exit@plt>
   11440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11444:	add	r1, r1, r1, lsl #2
   11448:	ldr	lr, [pc, #504]	; 11648 <abort@plt+0xa90>
   1144c:	ldr	ip, [r0, #140]	; 0x8c
   11450:	sub	sp, sp, #140	; 0x8c
   11454:	add	ip, ip, r1, lsl #4
   11458:	ldr	lr, [lr]
   1145c:	mov	r1, #88	; 0x58
   11460:	mov	r6, r0
   11464:	mov	sl, r2
   11468:	mov	r4, r3
   1146c:	ldr	r9, [ip, #8]
   11470:	str	lr, [sp, #132]	; 0x84
   11474:	bl	10a74 <XCreateFontCursor@plt>
   11478:	subs	fp, r0, #0
   1147c:	beq	1160c <abort@plt+0xa54>
   11480:	mov	r2, r4
   11484:	ldr	r1, [pc, #448]	; 1164c <abort@plt+0xa94>
   11488:	mov	r0, #1
   1148c:	bl	10b64 <__printf_chk@plt>
   11490:	cmn	sl, #1
   11494:	beq	115fc <abort@plt+0xa44>
   11498:	mov	r2, sl
   1149c:	ldr	r1, [pc, #428]	; 11650 <abort@plt+0xa98>
   114a0:	mov	r0, #1
   114a4:	bl	10b64 <__printf_chk@plt>
   114a8:	ldr	r0, [pc, #420]	; 11654 <abort@plt+0xa9c>
   114ac:	bl	10ac8 <puts@plt>
   114b0:	mov	r1, #0
   114b4:	mov	r0, r6
   114b8:	bl	10b58 <XSync@plt>
   114bc:	mov	r4, #1
   114c0:	mov	r2, #0
   114c4:	mov	r3, #12
   114c8:	str	fp, [sp, #12]
   114cc:	str	r2, [sp, #16]
   114d0:	str	r2, [sp, #8]
   114d4:	stm	sp, {r2, r4}
   114d8:	mov	r1, r9
   114dc:	mov	r0, r6
   114e0:	bl	10abc <XGrabPointer@plt>
   114e4:	subs	r7, r0, #0
   114e8:	mvneq	r3, #0
   114ec:	moveq	r8, r7
   114f0:	moveq	r5, r7
   114f4:	streq	r3, [sp, #24]
   114f8:	beq	11528 <abort@plt+0x970>
   114fc:	b	11638 <abort@plt+0xa80>
   11500:	cmp	r5, #0
   11504:	moveq	r7, r5
   11508:	beq	11518 <abort@plt+0x960>
   1150c:	subs	r7, r7, #1
   11510:	movne	r5, #1
   11514:	moveq	r5, #0
   11518:	clz	r4, r8
   1151c:	lsr	r4, r4, #5
   11520:	orrs	r3, r4, r5
   11524:	beq	11578 <abort@plt+0x9c0>
   11528:	mov	r2, #0
   1152c:	mov	r1, #1
   11530:	mov	r0, r6
   11534:	bl	10a68 <XAllowEvents@plt>
   11538:	add	r3, sp, #36	; 0x24
   1153c:	mov	r2, #12
   11540:	mov	r1, r9
   11544:	mov	r0, r6
   11548:	bl	10b94 <XWindowEvent@plt>
   1154c:	ldr	r3, [sp, #36]	; 0x24
   11550:	cmp	r3, #4
   11554:	beq	115d4 <abort@plt+0xa1c>
   11558:	cmp	r3, #5
   1155c:	beq	11500 <abort@plt+0x948>
   11560:	adds	r5, r7, #0
   11564:	movne	r5, #1
   11568:	clz	r4, r8
   1156c:	lsr	r4, r4, #5
   11570:	orrs	r3, r4, r5
   11574:	bne	11528 <abort@plt+0x970>
   11578:	mov	r1, r3
   1157c:	mov	r0, r6
   11580:	str	r3, [sp, #28]
   11584:	bl	10b1c <XUngrabPointer@plt>
   11588:	mov	r1, fp
   1158c:	mov	r0, r6
   11590:	bl	10b88 <XFreeCursor@plt>
   11594:	ldr	r3, [sp, #28]
   11598:	mov	r0, r6
   1159c:	mov	r1, r3
   115a0:	bl	10b58 <XSync@plt>
   115a4:	ldr	r3, [pc, #156]	; 11648 <abort@plt+0xa90>
   115a8:	ldr	r1, [sp, #24]
   115ac:	ldr	r2, [sp, #132]	; 0x84
   115b0:	ldr	r3, [r3]
   115b4:	cmn	sl, #1
   115b8:	cmpne	r1, sl
   115bc:	moveq	r0, r8
   115c0:	movne	r0, #0
   115c4:	cmp	r2, r3
   115c8:	bne	11634 <abort@plt+0xa7c>
   115cc:	add	sp, sp, #140	; 0x8c
   115d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115d4:	cmp	r4, #0
   115d8:	beq	115f0 <abort@plt+0xa38>
   115dc:	ldr	r8, [sp, #60]	; 0x3c
   115e0:	ldr	r3, [sp, #88]	; 0x58
   115e4:	cmp	r8, #0
   115e8:	moveq	r8, r9
   115ec:	str	r3, [sp, #24]
   115f0:	add	r7, r7, #1
   115f4:	mov	r5, #1
   115f8:	b	11518 <abort@plt+0x960>
   115fc:	ldr	r1, [pc, #84]	; 11658 <abort@plt+0xaa0>
   11600:	mov	r0, #1
   11604:	bl	10b64 <__printf_chk@plt>
   11608:	b	114a8 <abort@plt+0x8f0>
   1160c:	ldr	r3, [pc, #72]	; 1165c <abort@plt+0xaa4>
   11610:	ldr	r1, [pc, #72]	; 11660 <abort@plt+0xaa8>
   11614:	ldr	r2, [pc, #72]	; 11664 <abort@plt+0xaac>
   11618:	ldr	r0, [r1]
   1161c:	ldr	r3, [r3]
   11620:	mov	r1, #1
   11624:	bl	10b70 <__fprintf_chk@plt>
   11628:	mov	r1, r6
   1162c:	mov	r0, #1
   11630:	bl	11420 <abort@plt+0x868>
   11634:	bl	10a98 <__stack_chk_fail@plt>
   11638:	ldr	r3, [pc, #28]	; 1165c <abort@plt+0xaa4>
   1163c:	ldr	r1, [pc, #28]	; 11660 <abort@plt+0xaa8>
   11640:	ldr	r2, [pc, #32]	; 11668 <abort@plt+0xab0>
   11644:	b	11618 <abort@plt+0xa60>
   11648:	strdeq	r1, [r2], -r8
   1164c:			; <UNDEFINED> instruction: 0x000118b8
   11650:	ldrdeq	r1, [r1], -r4
   11654:	andeq	r1, r1, r0, ror #17
   11658:	andeq	r1, r1, r8, asr #17
   1165c:	andeq	r2, r2, r0, lsr #1
   11660:	muleq	r2, r8, r0
   11664:	muleq	r1, r0, r8
   11668:	andeq	r1, r1, r8, ror #17
   1166c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11670:	mov	r7, r0
   11674:	ldr	r6, [pc, #72]	; 116c4 <abort@plt+0xb0c>
   11678:	ldr	r5, [pc, #72]	; 116c8 <abort@plt+0xb10>
   1167c:	add	r6, pc, r6
   11680:	add	r5, pc, r5
   11684:	sub	r6, r6, r5
   11688:	mov	r8, r1
   1168c:	mov	r9, r2
   11690:	bl	10a24 <_init@@Base>
   11694:	asrs	r6, r6, #2
   11698:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1169c:	mov	r4, #0
   116a0:	add	r4, r4, #1
   116a4:	ldr	r3, [r5], #4
   116a8:	mov	r2, r9
   116ac:	mov	r1, r8
   116b0:	mov	r0, r7
   116b4:	blx	r3
   116b8:	cmp	r6, r4
   116bc:	bne	116a0 <abort@plt+0xae8>
   116c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   116c4:	andeq	r0, r1, r0, ror r8
   116c8:	andeq	r0, r1, r8, ror #16
   116cc:	bx	lr

Disassembly of section .fini:

000116d0 <_fini@@Base>:
   116d0:	push	{r3, lr}
   116d4:	pop	{r3, pc}
