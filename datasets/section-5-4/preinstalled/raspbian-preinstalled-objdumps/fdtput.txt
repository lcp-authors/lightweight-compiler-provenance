
raspbian-preinstalled/fdtput:     file format elf32-littlearm


Disassembly of section .init:

00010900 <.init>:
   10900:	push	{r3, lr}
   10904:	bl	11514 <__assert_fail@plt+0xa50>
   10908:	pop	{r3, pc}

Disassembly of section .plt:

0001090c <strcmp@plt-0x14>:
   1090c:	push	{lr}		; (str lr, [sp, #-4]!)
   10910:	ldr	lr, [pc, #4]	; 1091c <strcmp@plt-0x4>
   10914:	add	lr, pc, lr
   10918:	ldr	pc, [lr, #8]!
   1091c:	andeq	r6, r1, r0, lsr r6

00010920 <strcmp@plt>:
   10920:	add	ip, pc, #0, 12
   10924:	add	ip, ip, #90112	; 0x16000
   10928:	ldr	pc, [ip, #1584]!	; 0x630

0001092c <strtol@plt>:
   1092c:	add	ip, pc, #0, 12
   10930:	add	ip, ip, #90112	; 0x16000
   10934:	ldr	pc, [ip, #1576]!	; 0x628

00010938 <read@plt>:
   10938:	add	ip, pc, #0, 12
   1093c:	add	ip, ip, #90112	; 0x16000
   10940:	ldr	pc, [ip, #1568]!	; 0x620

00010944 <memmove@plt>:
   10944:	add	ip, pc, #0, 12
   10948:	add	ip, ip, #90112	; 0x16000
   1094c:	ldr	pc, [ip, #1560]!	; 0x618

00010950 <free@plt>:
   10950:	add	ip, pc, #0, 12
   10954:	add	ip, ip, #90112	; 0x16000
   10958:	ldr	pc, [ip, #1552]!	; 0x610

0001095c <__vsnprintf_chk@plt>:
   1095c:	add	ip, pc, #0, 12
   10960:	add	ip, ip, #90112	; 0x16000
   10964:	ldr	pc, [ip, #1544]!	; 0x608

00010968 <memcpy@plt>:
   10968:	add	ip, pc, #0, 12
   1096c:	add	ip, ip, #90112	; 0x16000
   10970:	ldr	pc, [ip, #1536]!	; 0x600

00010974 <memcmp@plt>:
   10974:	add	ip, pc, #0, 12
   10978:	add	ip, ip, #90112	; 0x16000
   1097c:	ldr	pc, [ip, #1528]!	; 0x5f8

00010980 <__stack_chk_fail@plt>:
   10980:	add	ip, pc, #0, 12
   10984:	add	ip, ip, #90112	; 0x16000
   10988:	ldr	pc, [ip, #1520]!	; 0x5f0

0001098c <realloc@plt>:
   1098c:	add	ip, pc, #0, 12
   10990:	add	ip, ip, #90112	; 0x16000
   10994:	ldr	pc, [ip, #1512]!	; 0x5e8

00010998 <fwrite@plt>:
   10998:	add	ip, pc, #0, 12
   1099c:	add	ip, ip, #90112	; 0x16000
   109a0:	ldr	pc, [ip, #1504]!	; 0x5e0

000109a4 <malloc@plt>:
   109a4:	add	ip, pc, #0, 12
   109a8:	add	ip, ip, #90112	; 0x16000
   109ac:	ldr	pc, [ip, #1496]!	; 0x5d8

000109b0 <__libc_start_main@plt>:
   109b0:	add	ip, pc, #0, 12
   109b4:	add	ip, ip, #90112	; 0x16000
   109b8:	ldr	pc, [ip, #1488]!	; 0x5d0

000109bc <strerror@plt>:
   109bc:	add	ip, pc, #0, 12
   109c0:	add	ip, ip, #90112	; 0x16000
   109c4:	ldr	pc, [ip, #1480]!	; 0x5c8

000109c8 <__vfprintf_chk@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #90112	; 0x16000
   109d0:	ldr	pc, [ip, #1472]!	; 0x5c0

000109d4 <__gmon_start__@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #90112	; 0x16000
   109dc:	ldr	pc, [ip, #1464]!	; 0x5b8

000109e0 <open@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #90112	; 0x16000
   109e8:	ldr	pc, [ip, #1456]!	; 0x5b0

000109ec <getopt_long@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #90112	; 0x16000
   109f4:	ldr	pc, [ip, #1448]!	; 0x5a8

000109f8 <__ctype_b_loc@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #90112	; 0x16000
   10a00:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a04 <exit@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #90112	; 0x16000
   10a0c:	ldr	pc, [ip, #1432]!	; 0x598

00010a10 <strlen@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #90112	; 0x16000
   10a18:	ldr	pc, [ip, #1424]!	; 0x590

00010a1c <strchr@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #90112	; 0x16000
   10a24:	ldr	pc, [ip, #1416]!	; 0x588

00010a28 <__errno_location@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #90112	; 0x16000
   10a30:	ldr	pc, [ip, #1408]!	; 0x580

00010a34 <__isoc99_sscanf@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #90112	; 0x16000
   10a3c:	ldr	pc, [ip, #1400]!	; 0x578

00010a40 <memset@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #90112	; 0x16000
   10a48:	ldr	pc, [ip, #1392]!	; 0x570

00010a4c <putchar@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #90112	; 0x16000
   10a54:	ldr	pc, [ip, #1384]!	; 0x568

00010a58 <strncpy@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #90112	; 0x16000
   10a60:	ldr	pc, [ip, #1376]!	; 0x560

00010a64 <__printf_chk@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #90112	; 0x16000
   10a6c:	ldr	pc, [ip, #1368]!	; 0x558

00010a70 <write@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #90112	; 0x16000
   10a78:	ldr	pc, [ip, #1360]!	; 0x550

00010a7c <__fprintf_chk@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #90112	; 0x16000
   10a84:	ldr	pc, [ip, #1352]!	; 0x548

00010a88 <memchr@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #90112	; 0x16000
   10a90:	ldr	pc, [ip, #1344]!	; 0x540

00010a94 <strnlen@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #90112	; 0x16000
   10a9c:	ldr	pc, [ip, #1336]!	; 0x538

00010aa0 <strrchr@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #90112	; 0x16000
   10aa8:	ldr	pc, [ip, #1328]!	; 0x530

00010aac <abort@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #90112	; 0x16000
   10ab4:	ldr	pc, [ip, #1320]!	; 0x528

00010ab8 <close@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #90112	; 0x16000
   10ac0:	ldr	pc, [ip, #1312]!	; 0x520

00010ac4 <__assert_fail@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #90112	; 0x16000
   10acc:	ldr	pc, [ip, #1304]!	; 0x518

Disassembly of section .text:

00010ad0 <.text>:
   10ad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ad4:	sub	sp, sp, #92	; 0x5c
   10ad8:	ldr	r7, [pc, #2416]	; 11450 <__assert_fail@plt+0x98c>
   10adc:	ldr	r3, [pc, #2416]	; 11454 <__assert_fail@plt+0x990>
   10ae0:	add	r7, pc, r7
   10ae4:	ldr	r9, [pc, #2412]	; 11458 <__assert_fail@plt+0x994>
   10ae8:	ldr	r3, [r7, r3]
   10aec:	ldr	sl, [pc, #2408]	; 1145c <__assert_fail@plt+0x998>
   10af0:	str	r3, [sp, #16]
   10af4:	mov	r6, r0
   10af8:	ldr	r3, [r3]
   10afc:	mov	r5, r1
   10b00:	add	r9, pc, r9
   10b04:	add	sl, pc, sl
   10b08:	mov	r8, #0
   10b0c:	mvn	r2, #0
   10b10:	str	r3, [sp, #84]	; 0x54
   10b14:	str	r8, [sp, #64]	; 0x40
   10b18:	str	r8, [sp, #60]	; 0x3c
   10b1c:	str	r8, [sp, #72]	; 0x48
   10b20:	str	r8, [sp, #76]	; 0x4c
   10b24:	str	r2, [sp, #68]	; 0x44
   10b28:	str	r8, [sp]
   10b2c:	mov	r3, r9
   10b30:	mov	r2, sl
   10b34:	mov	r1, r5
   10b38:	mov	r0, r6
   10b3c:	bl	109ec <getopt_long@plt>
   10b40:	cmn	r0, #1
   10b44:	beq	10cbc <__assert_fail@plt+0x1f8>
   10b48:	sub	r0, r0, #63	; 0x3f
   10b4c:	cmp	r0, #55	; 0x37
   10b50:	addls	pc, pc, r0, lsl #2
   10b54:	b	10b28 <__assert_fail@plt+0x64>
   10b58:	b	11258 <__assert_fail@plt+0x794>
   10b5c:	b	10b28 <__assert_fail@plt+0x64>
   10b60:	b	10b28 <__assert_fail@plt+0x64>
   10b64:	b	10b28 <__assert_fail@plt+0x64>
   10b68:	b	10b28 <__assert_fail@plt+0x64>
   10b6c:	b	10b28 <__assert_fail@plt+0x64>
   10b70:	b	10b28 <__assert_fail@plt+0x64>
   10b74:	b	10b28 <__assert_fail@plt+0x64>
   10b78:	b	10b28 <__assert_fail@plt+0x64>
   10b7c:	b	10b28 <__assert_fail@plt+0x64>
   10b80:	b	10b28 <__assert_fail@plt+0x64>
   10b84:	b	10b28 <__assert_fail@plt+0x64>
   10b88:	b	10b28 <__assert_fail@plt+0x64>
   10b8c:	b	10b28 <__assert_fail@plt+0x64>
   10b90:	b	10b28 <__assert_fail@plt+0x64>
   10b94:	b	10b28 <__assert_fail@plt+0x64>
   10b98:	b	10b28 <__assert_fail@plt+0x64>
   10b9c:	b	10b28 <__assert_fail@plt+0x64>
   10ba0:	b	10b28 <__assert_fail@plt+0x64>
   10ba4:	b	10b28 <__assert_fail@plt+0x64>
   10ba8:	b	10b28 <__assert_fail@plt+0x64>
   10bac:	b	10b28 <__assert_fail@plt+0x64>
   10bb0:	b	10b28 <__assert_fail@plt+0x64>
   10bb4:	b	112a4 <__assert_fail@plt+0x7e0>
   10bb8:	b	10b28 <__assert_fail@plt+0x64>
   10bbc:	b	10b28 <__assert_fail@plt+0x64>
   10bc0:	b	10b28 <__assert_fail@plt+0x64>
   10bc4:	b	10b28 <__assert_fail@plt+0x64>
   10bc8:	b	10b28 <__assert_fail@plt+0x64>
   10bcc:	b	10b28 <__assert_fail@plt+0x64>
   10bd0:	b	10b28 <__assert_fail@plt+0x64>
   10bd4:	b	10b28 <__assert_fail@plt+0x64>
   10bd8:	b	10b28 <__assert_fail@plt+0x64>
   10bdc:	b	10b28 <__assert_fail@plt+0x64>
   10be0:	b	10b28 <__assert_fail@plt+0x64>
   10be4:	b	10b28 <__assert_fail@plt+0x64>
   10be8:	b	10cb0 <__assert_fail@plt+0x1ec>
   10bec:	b	10ca4 <__assert_fail@plt+0x1e0>
   10bf0:	b	10b28 <__assert_fail@plt+0x64>
   10bf4:	b	10b28 <__assert_fail@plt+0x64>
   10bf8:	b	10b28 <__assert_fail@plt+0x64>
   10bfc:	b	11280 <__assert_fail@plt+0x7bc>
   10c00:	b	10b28 <__assert_fail@plt+0x64>
   10c04:	b	10b28 <__assert_fail@plt+0x64>
   10c08:	b	10b28 <__assert_fail@plt+0x64>
   10c0c:	b	10b28 <__assert_fail@plt+0x64>
   10c10:	b	10b28 <__assert_fail@plt+0x64>
   10c14:	b	10b28 <__assert_fail@plt+0x64>
   10c18:	b	10b28 <__assert_fail@plt+0x64>
   10c1c:	b	10c98 <__assert_fail@plt+0x1d4>
   10c20:	b	10b28 <__assert_fail@plt+0x64>
   10c24:	b	10c8c <__assert_fail@plt+0x1c8>
   10c28:	b	10b28 <__assert_fail@plt+0x64>
   10c2c:	b	10c44 <__assert_fail@plt+0x180>
   10c30:	b	10b28 <__assert_fail@plt+0x64>
   10c34:	b	10c38 <__assert_fail@plt+0x174>
   10c38:	mov	r3, #1
   10c3c:	str	r3, [sp, #72]	; 0x48
   10c40:	b	10b28 <__assert_fail@plt+0x64>
   10c44:	ldr	r3, [pc, #2068]	; 11460 <__assert_fail@plt+0x99c>
   10c48:	add	r2, sp, #68	; 0x44
   10c4c:	add	r1, sp, #64	; 0x40
   10c50:	ldr	r3, [r7, r3]
   10c54:	ldr	r0, [r3]
   10c58:	bl	120c0 <__assert_fail@plt+0x15fc>
   10c5c:	cmp	r0, #0
   10c60:	beq	10b28 <__assert_fail@plt+0x64>
   10c64:	ldr	r3, [pc, #2040]	; 11464 <__assert_fail@plt+0x9a0>
   10c68:	ldr	r2, [pc, #2040]	; 11468 <__assert_fail@plt+0x9a4>
   10c6c:	add	r3, pc, r3
   10c70:	ldr	r0, [pc, #2036]	; 1146c <__assert_fail@plt+0x9a8>
   10c74:	add	r1, r3, #144	; 0x90
   10c78:	add	r2, pc, r2
   10c7c:	str	r1, [sp]
   10c80:	add	r0, pc, r0
   10c84:	add	r1, r2, #12
   10c88:	bl	123a4 <__assert_fail@plt+0x18e0>
   10c8c:	mov	r3, #2
   10c90:	str	r3, [sp, #60]	; 0x3c
   10c94:	b	10b28 <__assert_fail@plt+0x64>
   10c98:	mov	r3, #1
   10c9c:	str	r3, [sp, #76]	; 0x4c
   10ca0:	b	10b28 <__assert_fail@plt+0x64>
   10ca4:	mov	r3, #3
   10ca8:	str	r3, [sp, #60]	; 0x3c
   10cac:	b	10b28 <__assert_fail@plt+0x64>
   10cb0:	mov	r3, #1
   10cb4:	str	r3, [sp, #60]	; 0x3c
   10cb8:	b	10b28 <__assert_fail@plt+0x64>
   10cbc:	ldr	r3, [pc, #1964]	; 11470 <__assert_fail@plt+0x9ac>
   10cc0:	mov	r4, r0
   10cc4:	ldr	r1, [r7, r3]
   10cc8:	ldr	r3, [r1]
   10ccc:	cmp	r3, r6
   10cd0:	bge	11420 <__assert_fail@plt+0x95c>
   10cd4:	ldr	r2, [r5, r3, lsl #2]
   10cd8:	lsl	fp, r3, #2
   10cdc:	mov	r0, r2
   10ce0:	str	r2, [sp, #12]
   10ce4:	cmp	r0, #0
   10ce8:	add	r2, r3, #1
   10cec:	str	r2, [r1]
   10cf0:	beq	11420 <__assert_fail@plt+0x95c>
   10cf4:	ldr	r3, [sp, #60]	; 0x3c
   10cf8:	add	r1, fp, #4
   10cfc:	cmp	r3, #0
   10d00:	str	r1, [sp, #20]
   10d04:	sub	r6, r6, r2
   10d08:	add	r8, r5, r1
   10d0c:	beq	10d54 <__assert_fail@plt+0x290>
   10d10:	cmp	r6, #0
   10d14:	cmple	r3, #3
   10d18:	beq	113d0 <__assert_fail@plt+0x90c>
   10d1c:	mov	r1, #0
   10d20:	ldr	r0, [sp, #12]
   10d24:	bl	11e88 <__assert_fail@plt+0x13c4>
   10d28:	cmp	r0, #0
   10d2c:	str	r0, [sp, #52]	; 0x34
   10d30:	beq	10ef4 <__assert_fail@plt+0x430>
   10d34:	ldr	r3, [sp, #60]	; 0x3c
   10d38:	cmp	r3, #3
   10d3c:	addls	pc, pc, r3, lsl #2
   10d40:	b	11448 <__assert_fail@plt+0x984>
   10d44:	b	10f4c <__assert_fail@plt+0x488>
   10d48:	b	10d84 <__assert_fail@plt+0x2c0>
   10d4c:	b	10e58 <__assert_fail@plt+0x394>
   10d50:	b	10efc <__assert_fail@plt+0x438>
   10d54:	cmp	r6, #0
   10d58:	ble	113d0 <__assert_fail@plt+0x90c>
   10d5c:	cmp	r6, #1
   10d60:	bne	10d1c <__assert_fail@plt+0x258>
   10d64:	ldr	r0, [pc, #1800]	; 11474 <__assert_fail@plt+0x9b0>
   10d68:	add	r3, r9, #144	; 0x90
   10d6c:	str	r3, [sp]
   10d70:	mov	r2, sl
   10d74:	mov	r3, r9
   10d78:	add	r1, sl, #12
   10d7c:	add	r0, pc, r0
   10d80:	bl	123a4 <__assert_fail@plt+0x18e0>
   10d84:	mov	r5, #0
   10d88:	cmp	r6, #0
   10d8c:	sub	r4, r6, #1
   10d90:	beq	10e98 <__assert_fail@plt+0x3d4>
   10d94:	ldr	r3, [sp, #76]	; 0x4c
   10d98:	cmp	r3, #0
   10d9c:	bne	10e34 <__assert_fail@plt+0x370>
   10da0:	sub	r6, r6, #2
   10da4:	mov	r7, r8
   10da8:	ldr	r8, [r7], #4
   10dac:	mov	r1, #47	; 0x2f
   10db0:	mov	r0, r8
   10db4:	bl	10aa0 <strrchr@plt>
   10db8:	subs	r9, r0, #0
   10dbc:	beq	113bc <__assert_fail@plt+0x8f8>
   10dc0:	mov	r4, r9
   10dc4:	strb	r5, [r4], #1
   10dc8:	mov	r0, r4
   10dcc:	bl	10a10 <strlen@plt>
   10dd0:	add	r1, r0, #4
   10dd4:	bic	r1, r1, #3
   10dd8:	add	r1, r1, #8
   10ddc:	ldr	r0, [sp, #52]	; 0x34
   10de0:	bl	116bc <__assert_fail@plt+0xbf8>
   10de4:	cmp	r8, r9
   10de8:	str	r0, [sp, #52]	; 0x34
   10dec:	bcs	10e50 <__assert_fail@plt+0x38c>
   10df0:	mov	r1, r8
   10df4:	bl	13560 <__assert_fail@plt+0x2a9c>
   10df8:	subs	r1, r0, #0
   10dfc:	blt	10edc <__assert_fail@plt+0x418>
   10e00:	mov	r2, r4
   10e04:	ldr	r0, [sp, #52]	; 0x34
   10e08:	bl	14d78 <__assert_fail@plt+0x42b4>
   10e0c:	cmp	r0, #0
   10e10:	blt	11370 <__assert_fail@plt+0x8ac>
   10e14:	cmn	r6, #1
   10e18:	mov	r8, r7
   10e1c:	mov	r4, r6
   10e20:	beq	10e98 <__assert_fail@plt+0x3d4>
   10e24:	ldr	r3, [sp, #76]	; 0x4c
   10e28:	sub	r6, r6, #1
   10e2c:	cmp	r3, #0
   10e30:	beq	10da8 <__assert_fail@plt+0x2e4>
   10e34:	ldr	r1, [r8], #4
   10e38:	add	r0, sp, #52	; 0x34
   10e3c:	bl	11720 <__assert_fail@plt+0xc5c>
   10e40:	cmp	r0, #0
   10e44:	blt	10eec <__assert_fail@plt+0x428>
   10e48:	mov	r6, r4
   10e4c:	b	10d88 <__assert_fail@plt+0x2c4>
   10e50:	mov	r1, #0
   10e54:	b	10e00 <__assert_fail@plt+0x33c>
   10e58:	cmp	r6, #0
   10e5c:	addne	r5, r5, fp
   10e60:	beq	10e98 <__assert_fail@plt+0x3d4>
   10e64:	ldr	r4, [sp, #52]	; 0x34
   10e68:	ldr	r7, [r5, #4]!
   10e6c:	mov	r0, r4
   10e70:	mov	r1, r7
   10e74:	bl	13560 <__assert_fail@plt+0x2a9c>
   10e78:	subs	r1, r0, #0
   10e7c:	blt	11348 <__assert_fail@plt+0x884>
   10e80:	mov	r0, r4
   10e84:	bl	14da8 <__assert_fail@plt+0x42e4>
   10e88:	cmp	r0, #0
   10e8c:	blt	11398 <__assert_fail@plt+0x8d4>
   10e90:	subs	r6, r6, #1
   10e94:	bne	10e64 <__assert_fail@plt+0x3a0>
   10e98:	ldr	r0, [sp, #52]	; 0x34
   10e9c:	bl	150c8 <__assert_fail@plt+0x4604>
   10ea0:	ldr	r0, [sp, #12]
   10ea4:	ldr	r1, [sp, #52]	; 0x34
   10ea8:	bl	1204c <__assert_fail@plt+0x1588>
   10eac:	mov	r4, r0
   10eb0:	ldr	r0, [sp, #52]	; 0x34
   10eb4:	bl	10950 <free@plt>
   10eb8:	adds	r0, r4, #0
   10ebc:	movne	r0, #1
   10ec0:	ldr	r3, [sp, #16]
   10ec4:	ldr	r2, [sp, #84]	; 0x54
   10ec8:	ldr	r3, [r3]
   10ecc:	cmp	r2, r3
   10ed0:	bne	1141c <__assert_fail@plt+0x958>
   10ed4:	add	sp, sp, #92	; 0x5c
   10ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10edc:	mov	r2, r1
   10ee0:	mov	r0, r8
   10ee4:	mvn	r1, #0
   10ee8:	bl	115c8 <__assert_fail@plt+0xb04>
   10eec:	ldr	r0, [sp, #52]	; 0x34
   10ef0:	bl	10950 <free@plt>
   10ef4:	mov	r0, #1
   10ef8:	b	10ec0 <__assert_fail@plt+0x3fc>
   10efc:	ldr	r3, [sp, #20]
   10f00:	cmp	r6, #1
   10f04:	sub	r6, r6, #1
   10f08:	ldr	r5, [r5, r3]
   10f0c:	ble	10e98 <__assert_fail@plt+0x3d4>
   10f10:	ldr	r4, [sp, #52]	; 0x34
   10f14:	mov	r1, r5
   10f18:	mov	r0, r4
   10f1c:	ldr	r7, [r8, #4]!
   10f20:	bl	13560 <__assert_fail@plt+0x2a9c>
   10f24:	subs	r1, r0, #0
   10f28:	blt	1135c <__assert_fail@plt+0x898>
   10f2c:	mov	r2, r7
   10f30:	mov	r0, r4
   10f34:	bl	14b84 <__assert_fail@plt+0x40c0>
   10f38:	cmp	r0, #0
   10f3c:	blt	11384 <__assert_fail@plt+0x8c0>
   10f40:	subs	r6, r6, #1
   10f44:	bne	10f10 <__assert_fail@plt+0x44c>
   10f48:	b	10e98 <__assert_fail@plt+0x3d4>
   10f4c:	cmp	r6, #1
   10f50:	ble	113f8 <__assert_fail@plt+0x934>
   10f54:	ldr	r3, [sp, #76]	; 0x4c
   10f58:	cmp	r3, #0
   10f5c:	beq	10f78 <__assert_fail@plt+0x4b4>
   10f60:	ldr	r3, [sp, #20]
   10f64:	add	r0, sp, #52	; 0x34
   10f68:	ldr	r1, [r5, r3]
   10f6c:	bl	11720 <__assert_fail@plt+0xc5c>
   10f70:	cmp	r0, #0
   10f74:	bne	10ef4 <__assert_fail@plt+0x430>
   10f78:	ldr	r3, [sp, #72]	; 0x48
   10f7c:	sub	r6, r6, #2
   10f80:	cmp	r3, #0
   10f84:	add	r9, r8, #8
   10f88:	bne	11234 <__assert_fail@plt+0x770>
   10f8c:	ldr	r3, [sp, #64]	; 0x40
   10f90:	mov	r2, #37	; 0x25
   10f94:	cmp	r3, #0
   10f98:	movne	r1, r3
   10f9c:	moveq	r1, #100	; 0x64
   10fa0:	mov	sl, #0
   10fa4:	cmp	r6, #0
   10fa8:	strb	r1, [sp, #81]	; 0x51
   10fac:	strb	r2, [sp, #80]	; 0x50
   10fb0:	strb	sl, [sp, #82]	; 0x52
   10fb4:	beq	11340 <__assert_fail@plt+0x87c>
   10fb8:	ldr	r2, [pc, #1208]	; 11478 <__assert_fail@plt+0x9b4>
   10fbc:	str	r4, [sp, #32]
   10fc0:	add	r2, pc, r2
   10fc4:	str	r2, [sp, #24]
   10fc8:	ldr	r2, [pc, #1196]	; 1147c <__assert_fail@plt+0x9b8>
   10fcc:	mov	fp, sl
   10fd0:	add	r2, pc, r2
   10fd4:	str	r2, [sp, #28]
   10fd8:	ldr	r2, [pc, #1184]	; 11480 <__assert_fail@plt+0x9bc>
   10fdc:	str	r8, [sp, #36]	; 0x24
   10fe0:	add	r2, pc, r2
   10fe4:	str	r2, [sp, #44]	; 0x2c
   10fe8:	mov	r2, r6
   10fec:	mov	r4, r2
   10ff0:	mov	r6, sl
   10ff4:	str	r5, [sp, #40]	; 0x28
   10ff8:	b	110b4 <__assert_fail@plt+0x5f0>
   10ffc:	ldr	r5, [sp, #68]	; 0x44
   11000:	cmn	r5, #1
   11004:	moveq	r5, #4
   11008:	add	r8, r5, r6
   1100c:	cmp	fp, r8
   11010:	blt	111a4 <__assert_fail@plt+0x6e0>
   11014:	add	r1, sp, #80	; 0x50
   11018:	add	r2, sp, #56	; 0x38
   1101c:	ldr	r0, [r9]
   11020:	bl	10a34 <__isoc99_sscanf@plt>
   11024:	ldr	r2, [sp, #56]	; 0x38
   11028:	cmp	r5, #4
   1102c:	add	r6, sl, r6
   11030:	lsreq	r3, r2, #24
   11034:	lsleq	r0, r2, #8
   11038:	lsreq	r1, r2, #8
   1103c:	strbne	r2, [r6]
   11040:	orreq	r3, r3, r2, lsl #24
   11044:	andeq	r0, r0, #16711680	; 0xff0000
   11048:	orreq	r3, r3, r0
   1104c:	andeq	r1, r1, #65280	; 0xff00
   11050:	orreq	r3, r3, r1
   11054:	streq	r3, [r6]
   11058:	ldr	r3, [sp, #72]	; 0x48
   1105c:	cmp	r3, #0
   11060:	beq	110f8 <__assert_fail@plt+0x634>
   11064:	ldr	r3, [pc, #1048]	; 11484 <__assert_fail@plt+0x9c0>
   11068:	ldr	r1, [sp, #68]	; 0x44
   1106c:	ldr	r3, [r7, r3]
   11070:	cmp	r1, #1
   11074:	ldr	r0, [r3]
   11078:	ldreq	r3, [sp, #28]
   1107c:	beq	11090 <__assert_fail@plt+0x5cc>
   11080:	cmp	r1, #2
   11084:	ldreq	r3, [sp, #44]	; 0x2c
   11088:	ldrne	r3, [pc, #1016]	; 11488 <__assert_fail@plt+0x9c4>
   1108c:	addne	r3, pc, r3
   11090:	str	r2, [sp]
   11094:	mov	r1, #1
   11098:	ldr	r2, [sp, #24]
   1109c:	mov	r6, r8
   110a0:	bl	10a7c <__fprintf_chk@plt>
   110a4:	subs	r4, r4, #1
   110a8:	add	r9, r9, #4
   110ac:	beq	11108 <__assert_fail@plt+0x644>
   110b0:	ldr	r3, [sp, #64]	; 0x40
   110b4:	cmp	r3, #115	; 0x73
   110b8:	bne	10ffc <__assert_fail@plt+0x538>
   110bc:	ldr	r0, [r9]
   110c0:	bl	10a10 <strlen@plt>
   110c4:	add	r5, r0, #1
   110c8:	add	r8, r5, r6
   110cc:	cmp	r8, fp
   110d0:	bgt	111f4 <__assert_fail@plt+0x730>
   110d4:	add	r3, sl, r6
   110d8:	mov	r2, r5
   110dc:	mov	r0, r3
   110e0:	ldr	r1, [r9]
   110e4:	bl	10968 <memcpy@plt>
   110e8:	ldr	r2, [sp, #72]	; 0x48
   110ec:	cmp	r2, #0
   110f0:	mov	r3, r0
   110f4:	bne	111d0 <__assert_fail@plt+0x70c>
   110f8:	subs	r4, r4, #1
   110fc:	mov	r6, r8
   11100:	add	r9, r9, #4
   11104:	bne	110b0 <__assert_fail@plt+0x5ec>
   11108:	ldr	r4, [sp, #32]
   1110c:	ldr	r8, [sp, #36]	; 0x24
   11110:	ldr	r5, [sp, #40]	; 0x28
   11114:	ldr	r3, [sp, #72]	; 0x48
   11118:	cmp	r3, #0
   1111c:	bne	11210 <__assert_fail@plt+0x74c>
   11120:	ldr	r3, [sp, #20]
   11124:	ldr	r0, [sp, #52]	; 0x34
   11128:	ldr	r7, [r5, r3]
   1112c:	ldr	r5, [r8, #4]
   11130:	mov	r1, r7
   11134:	bl	13560 <__assert_fail@plt+0x2a9c>
   11138:	subs	r8, r0, #0
   1113c:	movlt	r2, r8
   11140:	movlt	r0, r7
   11144:	blt	11324 <__assert_fail@plt+0x860>
   11148:	str	r6, [sp]
   1114c:	mov	r3, sl
   11150:	mov	r2, r5
   11154:	mov	r1, r8
   11158:	ldr	r0, [sp, #52]	; 0x34
   1115c:	bl	149c8 <__assert_fail@plt+0x3f04>
   11160:	cmn	r0, #3
   11164:	beq	112a8 <__assert_fail@plt+0x7e4>
   11168:	cmp	r0, #0
   1116c:	bne	1131c <__assert_fail@plt+0x858>
   11170:	ldr	r0, [sp, #52]	; 0x34
   11174:	bl	150c8 <__assert_fail@plt+0x4604>
   11178:	ldr	r1, [sp, #52]	; 0x34
   1117c:	ldr	r0, [sp, #12]
   11180:	bl	1204c <__assert_fail@plt+0x1588>
   11184:	mov	r4, r0
   11188:	ldr	r0, [sp, #52]	; 0x34
   1118c:	bl	10950 <free@plt>
   11190:	cmp	sl, #0
   11194:	beq	10eb8 <__assert_fail@plt+0x3f4>
   11198:	mov	r0, sl
   1119c:	bl	10950 <free@plt>
   111a0:	b	10eb8 <__assert_fail@plt+0x3f4>
   111a4:	add	fp, r8, #500	; 0x1f4
   111a8:	mov	r0, sl
   111ac:	mov	r1, fp
   111b0:	bl	1098c <realloc@plt>
   111b4:	subs	sl, r0, #0
   111b8:	bne	11014 <__assert_fail@plt+0x550>
   111bc:	ldr	r0, [pc, #712]	; 1148c <__assert_fail@plt+0x9c8>
   111c0:	mov	r3, fp
   111c4:	mov	r1, r3
   111c8:	add	r0, pc, r0
   111cc:	bl	1163c <__assert_fail@plt+0xb78>
   111d0:	ldr	r1, [pc, #684]	; 11484 <__assert_fail@plt+0x9c0>
   111d4:	ldr	r2, [pc, #692]	; 11490 <__assert_fail@plt+0x9cc>
   111d8:	mov	r6, r8
   111dc:	ldr	r0, [r7, r1]
   111e0:	add	r2, pc, r2
   111e4:	mov	r1, #1
   111e8:	ldr	r0, [r0]
   111ec:	bl	10a7c <__fprintf_chk@plt>
   111f0:	b	110a4 <__assert_fail@plt+0x5e0>
   111f4:	add	fp, r8, #500	; 0x1f4
   111f8:	mov	r0, sl
   111fc:	mov	r1, fp
   11200:	bl	1098c <realloc@plt>
   11204:	subs	sl, r0, #0
   11208:	bne	110d4 <__assert_fail@plt+0x610>
   1120c:	b	111bc <__assert_fail@plt+0x6f8>
   11210:	ldr	r1, [pc, #620]	; 11484 <__assert_fail@plt+0x9c0>
   11214:	ldr	r2, [pc, #632]	; 11494 <__assert_fail@plt+0x9d0>
   11218:	mov	r3, r6
   1121c:	ldr	r0, [r7, r1]
   11220:	add	r2, pc, r2
   11224:	mov	r1, #1
   11228:	ldr	r0, [r0]
   1122c:	bl	10a7c <__fprintf_chk@plt>
   11230:	b	11120 <__assert_fail@plt+0x65c>
   11234:	ldr	r3, [pc, #584]	; 11484 <__assert_fail@plt+0x9c0>
   11238:	ldr	r0, [pc, #600]	; 11498 <__assert_fail@plt+0x9d4>
   1123c:	mov	r2, #16
   11240:	ldr	r3, [r7, r3]
   11244:	mov	r1, #1
   11248:	add	r0, pc, r0
   1124c:	ldr	r3, [r3]
   11250:	bl	10998 <fwrite@plt>
   11254:	b	10f8c <__assert_fail@plt+0x4c8>
   11258:	ldr	r3, [pc, #572]	; 1149c <__assert_fail@plt+0x9d8>
   1125c:	ldr	r2, [pc, #572]	; 114a0 <__assert_fail@plt+0x9dc>
   11260:	add	r3, pc, r3
   11264:	ldr	r0, [pc, #568]	; 114a4 <__assert_fail@plt+0x9e0>
   11268:	add	r1, r3, #144	; 0x90
   1126c:	add	r2, pc, r2
   11270:	str	r1, [sp]
   11274:	add	r0, pc, r0
   11278:	add	r1, r2, #12
   1127c:	bl	123a4 <__assert_fail@plt+0x18e0>
   11280:	ldr	r3, [pc, #544]	; 114a8 <__assert_fail@plt+0x9e4>
   11284:	ldr	r2, [pc, #544]	; 114ac <__assert_fail@plt+0x9e8>
   11288:	add	r3, pc, r3
   1128c:	add	r1, r3, #144	; 0x90
   11290:	add	r2, pc, r2
   11294:	str	r1, [sp]
   11298:	mov	r0, #0
   1129c:	add	r1, r2, #12
   112a0:	bl	123a4 <__assert_fail@plt+0x18e0>
   112a4:	bl	12378 <__assert_fail@plt+0x18b4>
   112a8:	ldr	r9, [sp, #52]	; 0x34
   112ac:	mov	r7, #0
   112b0:	mov	r1, r8
   112b4:	mov	r0, r9
   112b8:	add	r3, sp, #56	; 0x38
   112bc:	mov	r2, r5
   112c0:	str	r7, [sp, #56]	; 0x38
   112c4:	bl	13020 <__assert_fail@plt+0x255c>
   112c8:	cmp	r0, r7
   112cc:	movne	r1, r7
   112d0:	beq	113ac <__assert_fail@plt+0x8e8>
   112d4:	ldr	r3, [sp, #56]	; 0x38
   112d8:	cmp	r3, r6
   112dc:	bge	112f8 <__assert_fail@plt+0x834>
   112e0:	add	r2, r3, #3
   112e4:	add	r3, r6, #3
   112e8:	bic	r2, r2, #3
   112ec:	bic	r3, r3, #3
   112f0:	sub	r3, r3, r2
   112f4:	add	r1, r3, r1
   112f8:	mov	r0, r9
   112fc:	bl	116bc <__assert_fail@plt+0xbf8>
   11300:	str	r6, [sp]
   11304:	mov	r1, r8
   11308:	mov	r3, sl
   1130c:	mov	r2, r5
   11310:	str	r0, [sp, #52]	; 0x34
   11314:	bl	149c8 <__assert_fail@plt+0x3f04>
   11318:	b	11168 <__assert_fail@plt+0x6a4>
   1131c:	mov	r2, r0
   11320:	mov	r0, r5
   11324:	mvn	r1, #0
   11328:	bl	115c8 <__assert_fail@plt+0xb04>
   1132c:	ldr	r0, [sp, #52]	; 0x34
   11330:	bl	10950 <free@plt>
   11334:	cmp	sl, #0
   11338:	bne	11198 <__assert_fail@plt+0x6d4>
   1133c:	b	10ef4 <__assert_fail@plt+0x430>
   11340:	mov	sl, r6
   11344:	b	11114 <__assert_fail@plt+0x650>
   11348:	mov	r2, r1
   1134c:	mov	r0, r7
   11350:	mvn	r1, #0
   11354:	bl	115c8 <__assert_fail@plt+0xb04>
   11358:	b	10eec <__assert_fail@plt+0x428>
   1135c:	mov	r2, r1
   11360:	mov	r0, r5
   11364:	mvn	r1, #0
   11368:	bl	115c8 <__assert_fail@plt+0xb04>
   1136c:	b	10eec <__assert_fail@plt+0x428>
   11370:	mov	r2, r0
   11374:	mvn	r1, #0
   11378:	mov	r0, r4
   1137c:	bl	115c8 <__assert_fail@plt+0xb04>
   11380:	b	10eec <__assert_fail@plt+0x428>
   11384:	mov	r2, r0
   11388:	mvn	r1, #0
   1138c:	mov	r0, r5
   11390:	bl	115c8 <__assert_fail@plt+0xb04>
   11394:	b	10eec <__assert_fail@plt+0x428>
   11398:	mov	r2, r0
   1139c:	mvn	r1, #0
   113a0:	mov	r0, r7
   113a4:	bl	115c8 <__assert_fail@plt+0xb04>
   113a8:	b	10eec <__assert_fail@plt+0x428>
   113ac:	mov	r0, r5
   113b0:	bl	10a10 <strlen@plt>
   113b4:	add	r1, r0, #13
   113b8:	b	112d4 <__assert_fail@plt+0x810>
   113bc:	mov	r0, r8
   113c0:	mvn	r2, #4
   113c4:	mvn	r1, #0
   113c8:	bl	115c8 <__assert_fail@plt+0xb04>
   113cc:	b	10eec <__assert_fail@plt+0x428>
   113d0:	ldr	r3, [pc, #216]	; 114b0 <__assert_fail@plt+0x9ec>
   113d4:	ldr	r2, [pc, #216]	; 114b4 <__assert_fail@plt+0x9f0>
   113d8:	add	r3, pc, r3
   113dc:	ldr	r0, [pc, #212]	; 114b8 <__assert_fail@plt+0x9f4>
   113e0:	add	r1, r3, #144	; 0x90
   113e4:	add	r2, pc, r2
   113e8:	str	r1, [sp]
   113ec:	add	r0, pc, r0
   113f0:	add	r1, r2, #12
   113f4:	bl	123a4 <__assert_fail@plt+0x18e0>
   113f8:	ldr	r3, [pc, #188]	; 114bc <__assert_fail@plt+0x9f8>
   113fc:	ldr	r1, [pc, #188]	; 114c0 <__assert_fail@plt+0x9fc>
   11400:	ldr	r0, [pc, #188]	; 114c4 <__assert_fail@plt+0xa00>
   11404:	add	r3, pc, r3
   11408:	ldr	r2, [pc, #184]	; 114c8 <__assert_fail@plt+0xa04>
   1140c:	add	r3, r3, #436	; 0x1b4
   11410:	add	r1, pc, r1
   11414:	add	r0, pc, r0
   11418:	bl	10ac4 <__assert_fail@plt>
   1141c:	bl	10980 <__stack_chk_fail@plt>
   11420:	ldr	r3, [pc, #164]	; 114cc <__assert_fail@plt+0xa08>
   11424:	ldr	r2, [pc, #164]	; 114d0 <__assert_fail@plt+0xa0c>
   11428:	add	r3, pc, r3
   1142c:	ldr	r0, [pc, #160]	; 114d4 <__assert_fail@plt+0xa10>
   11430:	add	r1, r3, #144	; 0x90
   11434:	add	r2, pc, r2
   11438:	str	r1, [sp]
   1143c:	add	r0, pc, r0
   11440:	add	r1, r2, #12
   11444:	bl	123a4 <__assert_fail@plt+0x18e0>
   11448:	mov	sl, #0
   1144c:	b	11170 <__assert_fail@plt+0x6ac>
   11450:	andeq	r6, r1, r4, ror #8
   11454:	muleq	r0, ip, r0
   11458:	andeq	r6, r1, r8, asr #4
   1145c:	andeq	r5, r0, r8, lsl #6
   11460:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   11464:	ldrdeq	r6, [r1], -ip
   11468:	muleq	r0, r4, r1
   1146c:			; <UNDEFINED> instruction: 0x000053b4
   11470:	andeq	r0, r0, r0, lsr #1
   11474:	strdeq	r5, [r0], -r0
   11478:	andeq	r5, r0, r0, lsl #2
   1147c:	andeq	r5, r0, r0, asr #32
   11480:	andeq	r5, r0, r8, lsr r0
   11484:	andeq	r0, r0, r4, lsr #1
   11488:	muleq	r0, r4, pc	; <UNPREDICTABLE>
   1148c:	andeq	r4, r0, ip, lsr #28
   11490:	ldrdeq	r4, [r0], -r0
   11494:	andeq	r4, r0, ip, lsr #29
   11498:	andeq	r4, r0, r4, asr lr
   1149c:	andeq	r5, r1, r8, ror #21
   114a0:	andeq	r4, r0, r0, lsr #23
   114a4:			; <UNDEFINED> instruction: 0x00004db0
   114a8:	andeq	r5, r1, r0, asr #21
   114ac:	andeq	r4, r0, ip, ror fp
   114b0:	andeq	r5, r1, r0, ror r9
   114b4:	andeq	r4, r0, r8, lsr #20
   114b8:	andeq	r4, r0, r0, ror ip
   114bc:	andeq	r4, r0, r8, lsl #20
   114c0:	andeq	r4, r0, r0, ror ip
   114c4:	andeq	r4, r0, r8, ror ip
   114c8:	andeq	r0, r0, sl, asr r1
   114cc:	andeq	r5, r1, r0, lsr #18
   114d0:	ldrdeq	r4, [r0], -r8
   114d4:	andeq	r4, r0, ip, lsl #24
   114d8:	mov	fp, #0
   114dc:	mov	lr, #0
   114e0:	pop	{r1}		; (ldr r1, [sp], #4)
   114e4:	mov	r2, sp
   114e8:	push	{r2}		; (str r2, [sp, #-4]!)
   114ec:	push	{r0}		; (str r0, [sp, #-4]!)
   114f0:	ldr	ip, [pc, #16]	; 11508 <__assert_fail@plt+0xa44>
   114f4:	push	{ip}		; (str ip, [sp, #-4]!)
   114f8:	ldr	r0, [pc, #12]	; 1150c <__assert_fail@plt+0xa48>
   114fc:	ldr	r3, [pc, #12]	; 11510 <__assert_fail@plt+0xa4c>
   11500:	bl	109b0 <__libc_start_main@plt>
   11504:	bl	10aac <abort@plt>
   11508:	andeq	r5, r1, r4, lsl #28
   1150c:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   11510:	andeq	r5, r1, r4, lsr #27
   11514:	ldr	r3, [pc, #20]	; 11530 <__assert_fail@plt+0xa6c>
   11518:	ldr	r2, [pc, #20]	; 11534 <__assert_fail@plt+0xa70>
   1151c:	add	r3, pc, r3
   11520:	ldr	r2, [r3, r2]
   11524:	cmp	r2, #0
   11528:	bxeq	lr
   1152c:	b	109d4 <__gmon_start__@plt>
   11530:	andeq	r5, r1, r8, lsr #20
   11534:	andeq	r0, r0, r8, lsr #1
   11538:	ldr	r0, [pc, #24]	; 11558 <__assert_fail@plt+0xa94>
   1153c:	ldr	r3, [pc, #24]	; 1155c <__assert_fail@plt+0xa98>
   11540:	cmp	r3, r0
   11544:	bxeq	lr
   11548:	ldr	r3, [pc, #16]	; 11560 <__assert_fail@plt+0xa9c>
   1154c:	cmp	r3, #0
   11550:	bxeq	lr
   11554:	bx	r3
   11558:	andeq	r7, r2, r8
   1155c:	andeq	r7, r2, r8
   11560:	andeq	r0, r0, r0
   11564:	ldr	r0, [pc, #36]	; 11590 <__assert_fail@plt+0xacc>
   11568:	ldr	r1, [pc, #36]	; 11594 <__assert_fail@plt+0xad0>
   1156c:	sub	r1, r1, r0
   11570:	asr	r1, r1, #2
   11574:	add	r1, r1, r1, lsr #31
   11578:	asrs	r1, r1, #1
   1157c:	bxeq	lr
   11580:	ldr	r3, [pc, #16]	; 11598 <__assert_fail@plt+0xad4>
   11584:	cmp	r3, #0
   11588:	bxeq	lr
   1158c:	bx	r3
   11590:	andeq	r7, r2, r8
   11594:	andeq	r7, r2, r8
   11598:	andeq	r0, r0, r0
   1159c:	push	{r4, lr}
   115a0:	ldr	r4, [pc, #24]	; 115c0 <__assert_fail@plt+0xafc>
   115a4:	ldrb	r3, [r4]
   115a8:	cmp	r3, #0
   115ac:	popne	{r4, pc}
   115b0:	bl	11538 <__assert_fail@plt+0xa74>
   115b4:	mov	r3, #1
   115b8:	strb	r3, [r4]
   115bc:	pop	{r4, pc}
   115c0:	andeq	r7, r2, r8
   115c4:	b	11564 <__assert_fail@plt+0xaa0>
   115c8:	push	{r4, r5, r6, r7, lr}
   115cc:	cmn	r1, #1
   115d0:	ldr	r5, [pc, #88]	; 11630 <__assert_fail@plt+0xb6c>
   115d4:	sub	sp, sp, #12
   115d8:	add	r5, pc, r5
   115dc:	mov	r7, r2
   115e0:	mov	r6, r0
   115e4:	movne	r4, r1
   115e8:	bne	115f4 <__assert_fail@plt+0xb30>
   115ec:	bl	10a10 <strlen@plt>
   115f0:	mov	r4, r0
   115f4:	ldr	ip, [pc, #56]	; 11634 <__assert_fail@plt+0xb70>
   115f8:	mov	r0, r7
   115fc:	ldr	r3, [r5, ip]
   11600:	ldr	r5, [r3]
   11604:	bl	15178 <__assert_fail@plt+0x46b4>
   11608:	ldr	r2, [pc, #40]	; 11638 <__assert_fail@plt+0xb74>
   1160c:	str	r6, [sp]
   11610:	mov	r3, r4
   11614:	add	r2, pc, r2
   11618:	mov	r1, #1
   1161c:	str	r0, [sp, #4]
   11620:	mov	r0, r5
   11624:	bl	10a7c <__fprintf_chk@plt>
   11628:	add	sp, sp, #12
   1162c:	pop	{r4, r5, r6, r7, pc}
   11630:	andeq	r5, r1, ip, ror #18
   11634:	andeq	r0, r0, r4, lsr #1
   11638:			; <UNDEFINED> instruction: 0x000049b8
   1163c:	push	{r0, r1, r2, r3}
   11640:	ldr	r3, [pc, #96]	; 116a8 <__assert_fail@plt+0xbe4>
   11644:	ldr	r2, [pc, #96]	; 116ac <__assert_fail@plt+0xbe8>
   11648:	add	r3, pc, r3
   1164c:	push	{lr}		; (str lr, [sp, #-4]!)
   11650:	sub	sp, sp, #12
   11654:	ldr	r1, [r3, r2]
   11658:	ldr	r0, [pc, #80]	; 116b0 <__assert_fail@plt+0xbec>
   1165c:	add	ip, sp, #20
   11660:	str	ip, [sp]
   11664:	ldr	ip, [r1]
   11668:	mov	r2, #13
   1166c:	str	ip, [sp, #4]
   11670:	ldr	r4, [r3, r0]
   11674:	ldr	r0, [pc, #56]	; 116b4 <__assert_fail@plt+0xbf0>
   11678:	mov	r1, #1
   1167c:	add	r0, pc, r0
   11680:	ldr	r3, [r4]
   11684:	bl	10998 <fwrite@plt>
   11688:	ldr	r2, [pc, #40]	; 116b8 <__assert_fail@plt+0xbf4>
   1168c:	ldr	r0, [r4]
   11690:	ldr	r3, [sp]
   11694:	add	r2, pc, r2
   11698:	mov	r1, #1
   1169c:	bl	109c8 <__vfprintf_chk@plt>
   116a0:	mov	r0, #1
   116a4:	bl	10a04 <exit@plt>
   116a8:	strdeq	r5, [r1], -ip
   116ac:	muleq	r0, ip, r0
   116b0:	andeq	r0, r0, r4, lsr #1
   116b4:	andeq	r4, r0, r8, ror #18
   116b8:	andeq	r4, r0, r0, ror #18
   116bc:	push	{r4, r5, r6, lr}
   116c0:	ldr	r3, [r0, #4]
   116c4:	lsr	r4, r3, #24
   116c8:	lsl	r2, r3, #8
   116cc:	orr	r4, r4, r3, lsl #24
   116d0:	and	r2, r2, #16711680	; 0xff0000
   116d4:	lsr	r3, r3, #8
   116d8:	orr	r4, r4, r2
   116dc:	and	r2, r3, #65280	; 0xff00
   116e0:	orr	r4, r4, r2
   116e4:	add	r4, r4, r1
   116e8:	mov	r1, r4
   116ec:	bl	1098c <realloc@plt>
   116f0:	subs	r5, r0, #0
   116f4:	beq	1170c <__assert_fail@plt+0xc48>
   116f8:	mov	r2, r4
   116fc:	mov	r1, r5
   11700:	bl	14e14 <__assert_fail@plt+0x4350>
   11704:	mov	r0, r5
   11708:	pop	{r4, r5, r6, pc}
   1170c:	ldr	r0, [pc, #8]	; 1171c <__assert_fail@plt+0xc58>
   11710:	mov	r1, r4
   11714:	add	r0, pc, r0
   11718:	bl	1163c <__assert_fail@plt+0xb78>
   1171c:	andeq	r4, r0, r0, ror #17
   11720:	push	{r4, r5, r6, r7, r8, lr}
   11724:	mov	r4, r1
   11728:	ldrb	r3, [r1]
   1172c:	mov	r8, r0
   11730:	cmp	r3, #47	; 0x2f
   11734:	bne	11744 <__assert_fail@plt+0xc80>
   11738:	ldrb	r3, [r4, #1]!
   1173c:	cmp	r3, #47	; 0x2f
   11740:	beq	11738 <__assert_fail@plt+0xc74>
   11744:	cmp	r3, #0
   11748:	movne	r7, #0
   1174c:	bne	11790 <__assert_fail@plt+0xccc>
   11750:	b	11804 <__assert_fail@plt+0xd40>
   11754:	sub	r6, r5, r4
   11758:	mov	r3, r6
   1175c:	mov	r2, r4
   11760:	mov	r1, r7
   11764:	ldr	r0, [r8]
   11768:	bl	12cc0 <__assert_fail@plt+0x21fc>
   1176c:	cmn	r0, #1
   11770:	beq	117b4 <__assert_fail@plt+0xcf0>
   11774:	cmp	r0, #0
   11778:	blt	117ec <__assert_fail@plt+0xd28>
   1177c:	mov	r4, r5
   11780:	mov	r7, r0
   11784:	ldrb	r3, [r4], #1
   11788:	cmp	r3, #0
   1178c:	beq	11804 <__assert_fail@plt+0xd40>
   11790:	mov	r1, #47	; 0x2f
   11794:	mov	r0, r4
   11798:	bl	10a1c <strchr@plt>
   1179c:	subs	r5, r0, #0
   117a0:	bne	11754 <__assert_fail@plt+0xc90>
   117a4:	mov	r0, r4
   117a8:	bl	10a10 <strlen@plt>
   117ac:	add	r5, r4, r0
   117b0:	b	11754 <__assert_fail@plt+0xc90>
   117b4:	mov	r0, r4
   117b8:	bl	10a10 <strlen@plt>
   117bc:	add	r1, r0, #4
   117c0:	bic	r1, r1, #3
   117c4:	add	r1, r1, #8
   117c8:	ldr	r0, [r8]
   117cc:	bl	116bc <__assert_fail@plt+0xbf8>
   117d0:	mov	r1, r7
   117d4:	mov	r3, r6
   117d8:	mov	r2, r4
   117dc:	str	r0, [r8]
   117e0:	bl	14c28 <__assert_fail@plt+0x4164>
   117e4:	cmp	r0, #0
   117e8:	bge	1177c <__assert_fail@plt+0xcb8>
   117ec:	mov	r2, r0
   117f0:	mov	r1, r6
   117f4:	mov	r0, r4
   117f8:	bl	115c8 <__assert_fail@plt+0xb04>
   117fc:	mvn	r0, #0
   11800:	pop	{r4, r5, r6, r7, r8, pc}
   11804:	mov	r0, #0
   11808:	pop	{r4, r5, r6, r7, r8, pc}
   1180c:	ldr	ip, [pc, #100]	; 11878 <__assert_fail@plt+0xdb4>
   11810:	push	{r0, r1, r2, r3}
   11814:	add	ip, pc, ip
   11818:	ldr	r2, [pc, #92]	; 1187c <__assert_fail@plt+0xdb8>
   1181c:	push	{lr}		; (str lr, [sp, #-4]!)
   11820:	sub	sp, sp, #12
   11824:	ldr	r2, [ip, r2]
   11828:	ldr	r3, [pc, #80]	; 11880 <__assert_fail@plt+0xdbc>
   1182c:	add	r1, sp, #20
   11830:	str	r1, [sp]
   11834:	ldr	r1, [r2]
   11838:	ldr	r0, [pc, #68]	; 11884 <__assert_fail@plt+0xdc0>
   1183c:	str	r1, [sp, #4]
   11840:	ldr	r4, [ip, r3]
   11844:	ldr	r5, [sp, #16]
   11848:	mov	r2, #13
   1184c:	mov	r1, #1
   11850:	ldr	r3, [r4]
   11854:	add	r0, pc, r0
   11858:	bl	10998 <fwrite@plt>
   1185c:	ldr	r0, [r4]
   11860:	mov	r2, r5
   11864:	ldr	r3, [sp]
   11868:	mov	r1, #1
   1186c:	bl	109c8 <__vfprintf_chk@plt>
   11870:	mov	r0, #1
   11874:	bl	10a04 <exit@plt>
   11878:	andeq	r5, r1, r0, lsr r7
   1187c:	muleq	r0, ip, r0
   11880:	andeq	r0, r0, r4, lsr #1
   11884:	muleq	r0, r0, r7
   11888:	push	{r4, r5, r6, lr}
   1188c:	mov	r6, r0
   11890:	bl	10a10 <strlen@plt>
   11894:	add	r4, r0, #1
   11898:	mov	r0, r4
   1189c:	bl	109a4 <malloc@plt>
   118a0:	subs	r5, r0, #0
   118a4:	beq	118bc <__assert_fail@plt+0xdf8>
   118a8:	mov	r2, r4
   118ac:	mov	r1, r6
   118b0:	bl	10968 <memcpy@plt>
   118b4:	mov	r0, r5
   118b8:	pop	{r4, r5, r6, pc}
   118bc:	ldr	r0, [pc, #4]	; 118c8 <__assert_fail@plt+0xe04>
   118c0:	add	r0, pc, r0
   118c4:	bl	1180c <__assert_fail@plt+0xd48>
   118c8:			; <UNDEFINED> instruction: 0x000049b4
   118cc:	push	{r1, r2, r3}
   118d0:	ldr	r3, [pc, #180]	; 1198c <__assert_fail@plt+0xec8>
   118d4:	ldr	r2, [pc, #180]	; 11990 <__assert_fail@plt+0xecc>
   118d8:	add	r3, pc, r3
   118dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   118e0:	sub	sp, sp, #16
   118e4:	ldr	r9, [r3, r2]
   118e8:	ldr	r7, [sp, #44]	; 0x2c
   118ec:	mov	r8, r0
   118f0:	ldr	r2, [r9]
   118f4:	mov	r5, #0
   118f8:	mov	r4, #128	; 0x80
   118fc:	add	r6, sp, #48	; 0x30
   11900:	str	r2, [sp, #12]
   11904:	b	11914 <__assert_fail@plt+0xe50>
   11908:	cmp	r0, #0
   1190c:	addge	r4, r0, #1
   11910:	lsllt	r4, r4, #1
   11914:	mov	r0, r5
   11918:	mov	r1, r4
   1191c:	bl	1098c <realloc@plt>
   11920:	subs	r5, r0, #0
   11924:	beq	11978 <__assert_fail@plt+0xeb4>
   11928:	str	r6, [sp, #4]
   1192c:	str	r7, [sp]
   11930:	mvn	r3, #0
   11934:	mov	r2, #1
   11938:	mov	r1, r4
   1193c:	str	r6, [sp, #8]
   11940:	bl	1095c <__vsnprintf_chk@plt>
   11944:	cmp	r4, r0
   11948:	bls	11908 <__assert_fail@plt+0xe44>
   1194c:	str	r5, [r8]
   11950:	mov	r0, r5
   11954:	bl	10a10 <strlen@plt>
   11958:	ldr	r2, [sp, #12]
   1195c:	ldr	r3, [r9]
   11960:	cmp	r2, r3
   11964:	bne	11988 <__assert_fail@plt+0xec4>
   11968:	add	sp, sp, #16
   1196c:	pop	{r4, r5, r6, r7, r8, r9, lr}
   11970:	add	sp, sp, #12
   11974:	bx	lr
   11978:	ldr	r0, [pc, #20]	; 11994 <__assert_fail@plt+0xed0>
   1197c:	mov	r1, r4
   11980:	add	r0, pc, r0
   11984:	bl	1180c <__assert_fail@plt+0xd48>
   11988:	bl	10980 <__stack_chk_fail@plt>
   1198c:	andeq	r5, r1, ip, ror #12
   11990:	muleq	r0, ip, r0
   11994:	andeq	r4, r0, r4, ror r6
   11998:	push	{r4, r5, r6, r7, r8, lr}
   1199c:	mov	r6, r1
   119a0:	mov	r8, r0
   119a4:	bl	10a10 <strlen@plt>
   119a8:	mov	r4, r0
   119ac:	mov	r0, r6
   119b0:	bl	10a10 <strlen@plt>
   119b4:	cmp	r4, #0
   119b8:	add	r3, r4, r0
   119bc:	mov	r7, r0
   119c0:	add	r0, r3, #2
   119c4:	beq	119d8 <__assert_fail@plt+0xf14>
   119c8:	add	r2, r8, r4
   119cc:	ldrb	r2, [r2, #-1]
   119d0:	cmp	r2, #47	; 0x2f
   119d4:	beq	11a20 <__assert_fail@plt+0xf5c>
   119d8:	bl	109a4 <malloc@plt>
   119dc:	subs	r5, r0, #0
   119e0:	beq	11a14 <__assert_fail@plt+0xf50>
   119e4:	mov	r2, r4
   119e8:	mov	r1, r8
   119ec:	bl	10968 <memcpy@plt>
   119f0:	mov	r3, #47	; 0x2f
   119f4:	strb	r3, [r5, r4]
   119f8:	add	r4, r4, #1
   119fc:	add	r2, r7, #1
   11a00:	mov	r1, r6
   11a04:	add	r0, r5, r4
   11a08:	bl	10968 <memcpy@plt>
   11a0c:	mov	r0, r5
   11a10:	pop	{r4, r5, r6, r7, r8, pc}
   11a14:	ldr	r0, [pc, #36]	; 11a40 <__assert_fail@plt+0xf7c>
   11a18:	add	r0, pc, r0
   11a1c:	bl	1180c <__assert_fail@plt+0xd48>
   11a20:	add	r0, r3, #1
   11a24:	bl	109a4 <malloc@plt>
   11a28:	subs	r5, r0, #0
   11a2c:	beq	11a14 <__assert_fail@plt+0xf50>
   11a30:	mov	r1, r8
   11a34:	mov	r2, r4
   11a38:	bl	10968 <memcpy@plt>
   11a3c:	b	119fc <__assert_fail@plt+0xf38>
   11a40:	andeq	r4, r0, ip, asr r8
   11a44:	cmp	r1, #0
   11a48:	beq	11ae4 <__assert_fail@plt+0x1020>
   11a4c:	push	{r4, r5, r6, r7, r8, lr}
   11a50:	add	r8, r0, r1
   11a54:	mov	r7, r0
   11a58:	ldrb	r3, [r8, #-1]
   11a5c:	cmp	r3, #0
   11a60:	bne	11adc <__assert_fail@plt+0x1018>
   11a64:	cmp	r0, r8
   11a68:	bcs	11ad4 <__assert_fail@plt+0x1010>
   11a6c:	mov	r5, r7
   11a70:	mov	r6, r5
   11a74:	ldrb	r4, [r5], #1
   11a78:	cmp	r4, #0
   11a7c:	beq	11aa8 <__assert_fail@plt+0xfe4>
   11a80:	bl	109f8 <__ctype_b_loc@plt>
   11a84:	lsl	r4, r4, #1
   11a88:	ldr	r3, [r0]
   11a8c:	ldrh	r0, [r3, r4]
   11a90:	ands	r0, r0, #16384	; 0x4000
   11a94:	popeq	{r4, r5, r6, r7, r8, pc}
   11a98:	cmp	r8, r5
   11a9c:	bhi	11a70 <__assert_fail@plt+0xfac>
   11aa0:	ldrb	r4, [r6, #1]
   11aa4:	mov	r6, r5
   11aa8:	cmp	r4, #0
   11aac:	sub	r7, r6, r7
   11ab0:	clz	r7, r7
   11ab4:	lsr	r7, r7, #5
   11ab8:	moveq	r4, r7
   11abc:	movne	r4, #1
   11ac0:	cmp	r4, #0
   11ac4:	bne	11adc <__assert_fail@plt+0x1018>
   11ac8:	add	r7, r6, #1
   11acc:	cmp	r8, r7
   11ad0:	bhi	11a6c <__assert_fail@plt+0xfa8>
   11ad4:	mov	r0, #1
   11ad8:	pop	{r4, r5, r6, r7, r8, pc}
   11adc:	mov	r0, #0
   11ae0:	pop	{r4, r5, r6, r7, r8, pc}
   11ae4:	mov	r0, r1
   11ae8:	bx	lr
   11aec:	ldr	r3, [pc, #616]	; 11d5c <__assert_fail@plt+0x1298>
   11af0:	ldr	r2, [pc, #616]	; 11d60 <__assert_fail@plt+0x129c>
   11af4:	push	{r4, r5, r6, r7, r8, lr}
   11af8:	add	r3, pc, r3
   11afc:	ldr	r4, [r1]
   11b00:	ldr	r6, [r3, r2]
   11b04:	mov	ip, r0
   11b08:	ldrb	r0, [r0, r4]
   11b0c:	sub	sp, sp, #16
   11b10:	ldr	r2, [r6]
   11b14:	sub	r3, r0, #48	; 0x30
   11b18:	mov	r5, r1
   11b1c:	str	r2, [sp, #12]
   11b20:	add	r1, ip, r4
   11b24:	add	r7, r4, #1
   11b28:	cmp	r3, #72	; 0x48
   11b2c:	addls	pc, pc, r3, lsl #2
   11b30:	b	11c5c <__assert_fail@plt+0x1198>
   11b34:	b	11cf8 <__assert_fail@plt+0x1234>
   11b38:	b	11cf8 <__assert_fail@plt+0x1234>
   11b3c:	b	11cf8 <__assert_fail@plt+0x1234>
   11b40:	b	11cf8 <__assert_fail@plt+0x1234>
   11b44:	b	11cf8 <__assert_fail@plt+0x1234>
   11b48:	b	11cf8 <__assert_fail@plt+0x1234>
   11b4c:	b	11cf8 <__assert_fail@plt+0x1234>
   11b50:	b	11cf8 <__assert_fail@plt+0x1234>
   11b54:	b	11c5c <__assert_fail@plt+0x1198>
   11b58:	b	11c5c <__assert_fail@plt+0x1198>
   11b5c:	b	11c5c <__assert_fail@plt+0x1198>
   11b60:	b	11c5c <__assert_fail@plt+0x1198>
   11b64:	b	11c5c <__assert_fail@plt+0x1198>
   11b68:	b	11c5c <__assert_fail@plt+0x1198>
   11b6c:	b	11c5c <__assert_fail@plt+0x1198>
   11b70:	b	11c5c <__assert_fail@plt+0x1198>
   11b74:	b	11c5c <__assert_fail@plt+0x1198>
   11b78:	b	11c5c <__assert_fail@plt+0x1198>
   11b7c:	b	11c5c <__assert_fail@plt+0x1198>
   11b80:	b	11c5c <__assert_fail@plt+0x1198>
   11b84:	b	11c5c <__assert_fail@plt+0x1198>
   11b88:	b	11c5c <__assert_fail@plt+0x1198>
   11b8c:	b	11c5c <__assert_fail@plt+0x1198>
   11b90:	b	11c5c <__assert_fail@plt+0x1198>
   11b94:	b	11c5c <__assert_fail@plt+0x1198>
   11b98:	b	11c5c <__assert_fail@plt+0x1198>
   11b9c:	b	11c5c <__assert_fail@plt+0x1198>
   11ba0:	b	11c5c <__assert_fail@plt+0x1198>
   11ba4:	b	11c5c <__assert_fail@plt+0x1198>
   11ba8:	b	11c5c <__assert_fail@plt+0x1198>
   11bac:	b	11c5c <__assert_fail@plt+0x1198>
   11bb0:	b	11c5c <__assert_fail@plt+0x1198>
   11bb4:	b	11c5c <__assert_fail@plt+0x1198>
   11bb8:	b	11c5c <__assert_fail@plt+0x1198>
   11bbc:	b	11c5c <__assert_fail@plt+0x1198>
   11bc0:	b	11c5c <__assert_fail@plt+0x1198>
   11bc4:	b	11c5c <__assert_fail@plt+0x1198>
   11bc8:	b	11c5c <__assert_fail@plt+0x1198>
   11bcc:	b	11c5c <__assert_fail@plt+0x1198>
   11bd0:	b	11c5c <__assert_fail@plt+0x1198>
   11bd4:	b	11c5c <__assert_fail@plt+0x1198>
   11bd8:	b	11c5c <__assert_fail@plt+0x1198>
   11bdc:	b	11c5c <__assert_fail@plt+0x1198>
   11be0:	b	11c5c <__assert_fail@plt+0x1198>
   11be4:	b	11c5c <__assert_fail@plt+0x1198>
   11be8:	b	11c5c <__assert_fail@plt+0x1198>
   11bec:	b	11c5c <__assert_fail@plt+0x1198>
   11bf0:	b	11c5c <__assert_fail@plt+0x1198>
   11bf4:	b	11c5c <__assert_fail@plt+0x1198>
   11bf8:	b	11c58 <__assert_fail@plt+0x1194>
   11bfc:	b	11c78 <__assert_fail@plt+0x11b4>
   11c00:	b	11c5c <__assert_fail@plt+0x1198>
   11c04:	b	11c5c <__assert_fail@plt+0x1198>
   11c08:	b	11c5c <__assert_fail@plt+0x1198>
   11c0c:	b	11c80 <__assert_fail@plt+0x11bc>
   11c10:	b	11c5c <__assert_fail@plt+0x1198>
   11c14:	b	11c5c <__assert_fail@plt+0x1198>
   11c18:	b	11c5c <__assert_fail@plt+0x1198>
   11c1c:	b	11c5c <__assert_fail@plt+0x1198>
   11c20:	b	11c5c <__assert_fail@plt+0x1198>
   11c24:	b	11c5c <__assert_fail@plt+0x1198>
   11c28:	b	11c5c <__assert_fail@plt+0x1198>
   11c2c:	b	11c88 <__assert_fail@plt+0x11c4>
   11c30:	b	11c5c <__assert_fail@plt+0x1198>
   11c34:	b	11c5c <__assert_fail@plt+0x1198>
   11c38:	b	11c5c <__assert_fail@plt+0x1198>
   11c3c:	b	11c90 <__assert_fail@plt+0x11cc>
   11c40:	b	11c5c <__assert_fail@plt+0x1198>
   11c44:	b	11c98 <__assert_fail@plt+0x11d4>
   11c48:	b	11c5c <__assert_fail@plt+0x1198>
   11c4c:	b	11ca0 <__assert_fail@plt+0x11dc>
   11c50:	b	11c5c <__assert_fail@plt+0x1198>
   11c54:	b	11ca8 <__assert_fail@plt+0x11e4>
   11c58:	mov	r0, #7
   11c5c:	ldr	r2, [sp, #12]
   11c60:	ldr	r3, [r6]
   11c64:	str	r7, [r5]
   11c68:	cmp	r2, r3
   11c6c:	bne	11d58 <__assert_fail@plt+0x1294>
   11c70:	add	sp, sp, #16
   11c74:	pop	{r4, r5, r6, r7, r8, pc}
   11c78:	mov	r0, #8
   11c7c:	b	11c5c <__assert_fail@plt+0x1198>
   11c80:	mov	r0, #12
   11c84:	b	11c5c <__assert_fail@plt+0x1198>
   11c88:	mov	r0, #10
   11c8c:	b	11c5c <__assert_fail@plt+0x1198>
   11c90:	mov	r0, #13
   11c94:	b	11c5c <__assert_fail@plt+0x1198>
   11c98:	mov	r0, #9
   11c9c:	b	11c5c <__assert_fail@plt+0x1198>
   11ca0:	mov	r0, #11
   11ca4:	b	11c5c <__assert_fail@plt+0x1198>
   11ca8:	add	r4, sp, #8
   11cac:	add	r1, ip, r7
   11cb0:	mov	r3, #0
   11cb4:	mov	r2, #2
   11cb8:	mov	r0, r4
   11cbc:	strb	r3, [sp, #10]
   11cc0:	bl	10a58 <strncpy@plt>
   11cc4:	mov	r0, r4
   11cc8:	mov	r2, #16
   11ccc:	add	r1, sp, #4
   11cd0:	bl	1092c <strtol@plt>
   11cd4:	ldr	r3, [sp, #4]
   11cd8:	cmp	r3, r4
   11cdc:	subhi	r3, r3, r4
   11ce0:	addhi	r7, r7, r3
   11ce4:	uxtbhi	r0, r0
   11ce8:	bhi	11c5c <__assert_fail@plt+0x1198>
   11cec:	ldr	r0, [pc, #112]	; 11d64 <__assert_fail@plt+0x12a0>
   11cf0:	add	r0, pc, r0
   11cf4:	bl	1180c <__assert_fail@plt+0xd48>
   11cf8:	add	r8, sp, #8
   11cfc:	mov	r3, #0
   11d00:	mov	r2, #3
   11d04:	mov	r0, r8
   11d08:	strb	r3, [sp, #11]
   11d0c:	bl	10a58 <strncpy@plt>
   11d10:	mov	r0, r8
   11d14:	mov	r2, #8
   11d18:	add	r1, sp, #4
   11d1c:	bl	1092c <strtol@plt>
   11d20:	ldr	r7, [sp, #4]
   11d24:	cmp	r7, r8
   11d28:	subhi	r7, r7, r8
   11d2c:	addhi	r7, r7, r4
   11d30:	uxtbhi	r0, r0
   11d34:	bhi	11c5c <__assert_fail@plt+0x1198>
   11d38:	ldr	r3, [pc, #40]	; 11d68 <__assert_fail@plt+0x12a4>
   11d3c:	ldr	r1, [pc, #40]	; 11d6c <__assert_fail@plt+0x12a8>
   11d40:	ldr	r0, [pc, #40]	; 11d70 <__assert_fail@plt+0x12ac>
   11d44:	add	r3, pc, r3
   11d48:	mov	r2, #150	; 0x96
   11d4c:	add	r1, pc, r1
   11d50:	add	r0, pc, r0
   11d54:	bl	10ac4 <__assert_fail@plt>
   11d58:	bl	10980 <__stack_chk_fail@plt>
   11d5c:	andeq	r5, r1, ip, asr #8
   11d60:	muleq	r0, ip, r0
   11d64:	andeq	r4, r0, ip, lsr #11
   11d68:	andeq	r4, r0, r4, lsl r5
   11d6c:	andeq	r4, r0, ip, lsr r5
   11d70:	andeq	r4, r0, r0, asr #10
   11d74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11d78:	mov	r4, #0
   11d7c:	str	r4, [r1]
   11d80:	mov	r8, r1
   11d84:	ldr	r1, [pc, #240]	; 11e7c <__assert_fail@plt+0x13b8>
   11d88:	mov	r9, r2
   11d8c:	add	r1, pc, r1
   11d90:	mov	r5, r0
   11d94:	bl	10920 <strcmp@plt>
   11d98:	subs	r7, r0, #0
   11d9c:	beq	11db4 <__assert_fail@plt+0x12f0>
   11da0:	mov	r1, r4
   11da4:	mov	r0, r5
   11da8:	bl	109e0 <open@plt>
   11dac:	subs	r7, r0, #0
   11db0:	blt	11e60 <__assert_fail@plt+0x139c>
   11db4:	mov	r0, #1024	; 0x400
   11db8:	bl	109a4 <malloc@plt>
   11dbc:	subs	r6, r0, #0
   11dc0:	movne	r4, #0
   11dc4:	movne	r5, #1024	; 0x400
   11dc8:	beq	11e70 <__assert_fail@plt+0x13ac>
   11dcc:	sub	r2, r5, r4
   11dd0:	add	r1, r6, r4
   11dd4:	mov	r0, r7
   11dd8:	bl	10938 <read@plt>
   11ddc:	cmp	r0, #0
   11de0:	blt	11e1c <__assert_fail@plt+0x1358>
   11de4:	add	r4, r4, r0
   11de8:	beq	11e4c <__assert_fail@plt+0x1388>
   11dec:	cmp	r5, r4
   11df0:	bne	11dcc <__assert_fail@plt+0x1308>
   11df4:	lsl	r5, r5, #1
   11df8:	mov	r0, r6
   11dfc:	mov	r1, r5
   11e00:	bl	1098c <realloc@plt>
   11e04:	subs	r6, r0, #0
   11e08:	bne	11dcc <__assert_fail@plt+0x1308>
   11e0c:	ldr	r0, [pc, #108]	; 11e80 <__assert_fail@plt+0x13bc>
   11e10:	mov	r1, r5
   11e14:	add	r0, pc, r0
   11e18:	bl	1180c <__assert_fail@plt+0xd48>
   11e1c:	bl	10a28 <__errno_location@plt>
   11e20:	ldr	r4, [r0]
   11e24:	mov	r0, r7
   11e28:	bl	10ab8 <close@plt>
   11e2c:	cmp	r4, #0
   11e30:	beq	11e54 <__assert_fail@plt+0x1390>
   11e34:	mov	r0, r6
   11e38:	bl	10950 <free@plt>
   11e3c:	cmp	r9, #0
   11e40:	strne	r5, [r9]
   11e44:	mov	r0, r4
   11e48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e4c:	mov	r0, r7
   11e50:	bl	10ab8 <close@plt>
   11e54:	mov	r4, #0
   11e58:	str	r6, [r8]
   11e5c:	b	11e3c <__assert_fail@plt+0x1378>
   11e60:	bl	10a28 <__errno_location@plt>
   11e64:	ldr	r4, [r0]
   11e68:	mov	r0, r4
   11e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e70:	ldr	r0, [pc, #12]	; 11e84 <__assert_fail@plt+0x13c0>
   11e74:	add	r0, pc, r0
   11e78:	bl	1180c <__assert_fail@plt+0xd48>
   11e7c:	andeq	r4, r0, r8, lsr r5
   11e80:	andeq	r4, r0, r0, ror #3
   11e84:	andeq	r4, r0, r0, lsl #8
   11e88:	push	{r4, r5, r6, lr}
   11e8c:	sub	sp, sp, #16
   11e90:	ldr	r4, [pc, #124]	; 11f14 <__assert_fail@plt+0x1450>
   11e94:	ldr	r3, [pc, #124]	; 11f18 <__assert_fail@plt+0x1454>
   11e98:	add	r4, pc, r4
   11e9c:	mov	r2, r1
   11ea0:	ldr	r5, [r4, r3]
   11ea4:	add	r1, sp, #8
   11ea8:	mov	r6, r0
   11eac:	ldr	r3, [r5]
   11eb0:	str	r3, [sp, #12]
   11eb4:	bl	11d74 <__assert_fail@plt+0x12b0>
   11eb8:	cmp	r0, #0
   11ebc:	ldreq	r0, [sp, #8]
   11ec0:	bne	11edc <__assert_fail@plt+0x1418>
   11ec4:	ldr	r2, [sp, #12]
   11ec8:	ldr	r3, [r5]
   11ecc:	cmp	r2, r3
   11ed0:	bne	11f10 <__assert_fail@plt+0x144c>
   11ed4:	add	sp, sp, #16
   11ed8:	pop	{r4, r5, r6, pc}
   11edc:	ldr	r3, [pc, #56]	; 11f1c <__assert_fail@plt+0x1458>
   11ee0:	ldr	r3, [r4, r3]
   11ee4:	ldr	r4, [r3]
   11ee8:	bl	109bc <strerror@plt>
   11eec:	ldr	r2, [pc, #44]	; 11f20 <__assert_fail@plt+0x145c>
   11ef0:	mov	r3, r6
   11ef4:	add	r2, pc, r2
   11ef8:	mov	r1, #1
   11efc:	str	r0, [sp]
   11f00:	mov	r0, r4
   11f04:	bl	10a7c <__fprintf_chk@plt>
   11f08:	mov	r0, #0
   11f0c:	b	11ec4 <__assert_fail@plt+0x1400>
   11f10:	bl	10980 <__stack_chk_fail@plt>
   11f14:	andeq	r5, r1, ip, lsr #1
   11f18:	muleq	r0, ip, r0
   11f1c:	andeq	r0, r0, r4, lsr #1
   11f20:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   11f24:	push	{r4, r5, r6, r7, r8, lr}
   11f28:	mov	r6, r1
   11f2c:	ldr	r1, [pc, #268]	; 12040 <__assert_fail@plt+0x157c>
   11f30:	mov	r4, r0
   11f34:	add	r1, pc, r1
   11f38:	bl	10920 <strcmp@plt>
   11f3c:	cmp	r0, #0
   11f40:	bne	11fcc <__assert_fail@plt+0x1508>
   11f44:	ldr	r3, [r6, #4]
   11f48:	lsr	r5, r3, #24
   11f4c:	lsl	r2, r3, #8
   11f50:	orr	r5, r5, r3, lsl #24
   11f54:	and	r2, r2, #16711680	; 0xff0000
   11f58:	lsr	r3, r3, #8
   11f5c:	orr	r5, r5, r2
   11f60:	and	r3, r3, #65280	; 0xff00
   11f64:	orr	r5, r5, r3
   11f68:	cmp	r5, #0
   11f6c:	movgt	r8, #1
   11f70:	ble	1201c <__assert_fail@plt+0x1558>
   11f74:	mov	r4, #0
   11f78:	b	11f84 <__assert_fail@plt+0x14c0>
   11f7c:	cmp	r4, r5
   11f80:	bge	12024 <__assert_fail@plt+0x1560>
   11f84:	sub	r2, r5, r4
   11f88:	add	r1, r6, r4
   11f8c:	mov	r0, r8
   11f90:	bl	10a70 <write@plt>
   11f94:	subs	r7, r0, #0
   11f98:	add	r4, r4, r7
   11f9c:	bge	11f7c <__assert_fail@plt+0x14b8>
   11fa0:	bl	10a28 <__errno_location@plt>
   11fa4:	cmp	r8, #1
   11fa8:	ldr	r7, [r0]
   11fac:	rsb	r7, r7, #0
   11fb0:	beq	11fbc <__assert_fail@plt+0x14f8>
   11fb4:	mov	r0, r8
   11fb8:	bl	10ab8 <close@plt>
   11fbc:	cmp	r7, #0
   11fc0:	bge	1201c <__assert_fail@plt+0x1558>
   11fc4:	rsb	r0, r7, #0
   11fc8:	pop	{r4, r5, r6, r7, r8, pc}
   11fcc:	mov	r0, r4
   11fd0:	ldr	r2, [pc, #108]	; 12044 <__assert_fail@plt+0x1580>
   11fd4:	ldr	r1, [pc, #108]	; 12048 <__assert_fail@plt+0x1584>
   11fd8:	bl	109e0 <open@plt>
   11fdc:	subs	r8, r0, #0
   11fe0:	blt	12034 <__assert_fail@plt+0x1570>
   11fe4:	ldr	r3, [r6, #4]
   11fe8:	lsr	r5, r3, #24
   11fec:	lsl	r2, r3, #8
   11ff0:	orr	r5, r5, r3, lsl #24
   11ff4:	and	r2, r2, #16711680	; 0xff0000
   11ff8:	lsr	r3, r3, #8
   11ffc:	orr	r5, r5, r2
   12000:	and	r3, r3, #65280	; 0xff00
   12004:	orr	r5, r5, r3
   12008:	cmp	r5, #0
   1200c:	bgt	11f74 <__assert_fail@plt+0x14b0>
   12010:	cmp	r8, #1
   12014:	beq	1201c <__assert_fail@plt+0x1558>
   12018:	bl	10ab8 <close@plt>
   1201c:	mov	r0, #0
   12020:	pop	{r4, r5, r6, r7, r8, pc}
   12024:	cmp	r8, #1
   12028:	bne	11fb4 <__assert_fail@plt+0x14f0>
   1202c:	mov	r0, #0
   12030:	pop	{r4, r5, r6, r7, r8, pc}
   12034:	bl	10a28 <__errno_location@plt>
   12038:	ldr	r0, [r0]
   1203c:	pop	{r4, r5, r6, r7, r8, pc}
   12040:	muleq	r0, r0, r3
   12044:			; <UNDEFINED> instruction: 0x000001b6
   12048:	andeq	r0, r0, r1, asr #4
   1204c:	push	{r4, r5, lr}
   12050:	sub	sp, sp, #12
   12054:	mov	r4, r0
   12058:	bl	11f24 <__assert_fail@plt+0x1460>
   1205c:	ldr	r2, [pc, #80]	; 120b4 <__assert_fail@plt+0x15f0>
   12060:	add	r2, pc, r2
   12064:	subs	r3, r0, #0
   12068:	bne	12078 <__assert_fail@plt+0x15b4>
   1206c:	mov	r0, r3
   12070:	add	sp, sp, #12
   12074:	pop	{r4, r5, pc}
   12078:	ldr	r3, [pc, #56]	; 120b8 <__assert_fail@plt+0x15f4>
   1207c:	ldr	r3, [r2, r3]
   12080:	ldr	r5, [r3]
   12084:	bl	109bc <strerror@plt>
   12088:	ldr	r2, [pc, #44]	; 120bc <__assert_fail@plt+0x15f8>
   1208c:	mov	r3, r4
   12090:	add	r2, pc, r2
   12094:	mov	r1, #1
   12098:	str	r0, [sp]
   1209c:	mov	r0, r5
   120a0:	bl	10a7c <__fprintf_chk@plt>
   120a4:	mvn	r3, #0
   120a8:	mov	r0, r3
   120ac:	add	sp, sp, #12
   120b0:	pop	{r4, r5, pc}
   120b4:	andeq	r4, r1, r4, ror #29
   120b8:	andeq	r0, r0, r4, lsr #1
   120bc:	andeq	r4, r0, ip, asr r2
   120c0:	ldrb	r3, [r0]
   120c4:	cmp	r3, #0
   120c8:	beq	121a8 <__assert_fail@plt+0x16e4>
   120cc:	mvn	r3, #0
   120d0:	push	{r4, r5, r6, r7, r8, lr}
   120d4:	mov	r5, r0
   120d8:	str	r3, [r2]
   120dc:	ldrb	r4, [r0]
   120e0:	ldr	r0, [pc, #200]	; 121b0 <__assert_fail@plt+0x16ec>
   120e4:	mov	r8, r1
   120e8:	add	r0, pc, r0
   120ec:	mov	r1, r4
   120f0:	mov	r7, r2
   120f4:	bl	10a1c <strchr@plt>
   120f8:	mov	r6, r4
   120fc:	cmp	r0, #0
   12100:	moveq	r6, r0
   12104:	beq	1211c <__assert_fail@plt+0x1658>
   12108:	ldrb	r3, [r5, #1]
   1210c:	cmp	r4, r3
   12110:	beq	12188 <__assert_fail@plt+0x16c4>
   12114:	add	r5, r5, #1
   12118:	mov	r4, r3
   1211c:	cmp	r4, #0
   12120:	beq	121a0 <__assert_fail@plt+0x16dc>
   12124:	ldr	r0, [pc, #136]	; 121b4 <__assert_fail@plt+0x16f0>
   12128:	mov	r1, r4
   1212c:	add	r0, pc, r0
   12130:	bl	10a1c <strchr@plt>
   12134:	cmp	r0, #0
   12138:	beq	121a0 <__assert_fail@plt+0x16dc>
   1213c:	cmp	r4, #115	; 0x73
   12140:	beq	12170 <__assert_fail@plt+0x16ac>
   12144:	cmp	r6, #98	; 0x62
   12148:	moveq	r3, #1
   1214c:	beq	12168 <__assert_fail@plt+0x16a4>
   12150:	cmp	r6, #104	; 0x68
   12154:	moveq	r3, #2
   12158:	beq	12168 <__assert_fail@plt+0x16a4>
   1215c:	cmp	r6, #108	; 0x6c
   12160:	moveq	r3, #4
   12164:	mvnne	r3, #0
   12168:	str	r3, [r7]
   1216c:	ldrb	r4, [r5]
   12170:	str	r4, [r8]
   12174:	ldrb	r0, [r5, #1]
   12178:	adds	r0, r0, #0
   1217c:	movne	r0, #1
   12180:	rsb	r0, r0, #0
   12184:	pop	{r4, r5, r6, r7, r8, pc}
   12188:	cmp	r6, #104	; 0x68
   1218c:	add	r3, r5, #2
   12190:	ldrb	r4, [r5, #2]
   12194:	moveq	r6, #98	; 0x62
   12198:	mov	r5, r3
   1219c:	b	1211c <__assert_fail@plt+0x1658>
   121a0:	mvn	r0, #0
   121a4:	pop	{r4, r5, r6, r7, r8, pc}
   121a8:	mvn	r0, #0
   121ac:	bx	lr
   121b0:	andeq	r4, r0, r8, lsr #4
   121b4:	andeq	r4, r0, ip, ror #3
   121b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121bc:	subs	fp, r1, #0
   121c0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121c4:	mov	r4, r0
   121c8:	bl	11a44 <__assert_fail@plt+0xf80>
   121cc:	cmp	r0, #0
   121d0:	bne	122f0 <__assert_fail@plt+0x182c>
   121d4:	ands	r5, fp, #3
   121d8:	bne	12278 <__assert_fail@plt+0x17b4>
   121dc:	ldr	r1, [pc, #360]	; 1234c <__assert_fail@plt+0x1888>
   121e0:	mov	r0, #1
   121e4:	add	r1, pc, r1
   121e8:	bl	10a64 <__printf_chk@plt>
   121ec:	cmp	fp, #0
   121f0:	add	r6, fp, #3
   121f4:	movge	r6, fp
   121f8:	cmp	fp, #3
   121fc:	asr	r6, r6, #2
   12200:	ble	1226c <__assert_fail@plt+0x17a8>
   12204:	ldr	sl, [pc, #324]	; 12350 <__assert_fail@plt+0x188c>
   12208:	ldr	r9, [pc, #324]	; 12354 <__assert_fail@plt+0x1890>
   1220c:	ldr	r8, [pc, #324]	; 12358 <__assert_fail@plt+0x1894>
   12210:	add	sl, pc, sl
   12214:	add	r9, pc, r9
   12218:	add	r8, pc, r8
   1221c:	sub	r4, r4, #4
   12220:	sub	r7, r6, #1
   12224:	ldr	r1, [r4, #4]!
   12228:	cmp	r5, r7
   1222c:	movlt	r3, sl
   12230:	lsr	r2, r1, #24
   12234:	lsl	r0, r1, #8
   12238:	orr	r2, r2, r1, lsl #24
   1223c:	and	r0, r0, #16711680	; 0xff0000
   12240:	lsr	r1, r1, #8
   12244:	orr	r2, r2, r0
   12248:	and	r1, r1, #65280	; 0xff00
   1224c:	movge	r3, r9
   12250:	orr	r2, r2, r1
   12254:	add	r5, r5, #1
   12258:	mov	r1, r8
   1225c:	mov	r0, #1
   12260:	bl	10a64 <__printf_chk@plt>
   12264:	cmp	r6, r5
   12268:	bgt	12224 <__assert_fail@plt+0x1760>
   1226c:	mov	r0, #62	; 0x3e
   12270:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12274:	b	10a4c <putchar@plt>
   12278:	ldr	r1, [pc, #220]	; 1235c <__assert_fail@plt+0x1898>
   1227c:	mov	r0, #1
   12280:	add	r1, pc, r1
   12284:	bl	10a64 <__printf_chk@plt>
   12288:	cmp	fp, #0
   1228c:	ble	122e4 <__assert_fail@plt+0x1820>
   12290:	ldr	sl, [pc, #200]	; 12360 <__assert_fail@plt+0x189c>
   12294:	ldr	r9, [pc, #200]	; 12364 <__assert_fail@plt+0x18a0>
   12298:	ldr	r8, [pc, #200]	; 12368 <__assert_fail@plt+0x18a4>
   1229c:	sub	r7, fp, #1
   122a0:	add	sl, pc, sl
   122a4:	add	r9, pc, r9
   122a8:	add	r8, pc, r8
   122ac:	add	fp, r4, fp
   122b0:	mov	r6, r4
   122b4:	add	r6, r6, #1
   122b8:	mov	r3, r6
   122bc:	mov	r1, r8
   122c0:	ldrb	r2, [r3, #-1]!
   122c4:	mov	r0, #1
   122c8:	sub	r3, r3, r4
   122cc:	cmp	r3, r7
   122d0:	movge	r3, sl
   122d4:	movlt	r3, r9
   122d8:	bl	10a64 <__printf_chk@plt>
   122dc:	cmp	r6, fp
   122e0:	bne	122b4 <__assert_fail@plt+0x17f0>
   122e4:	mov	r0, #93	; 0x5d
   122e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ec:	b	10a4c <putchar@plt>
   122f0:	ldr	r1, [pc, #116]	; 1236c <__assert_fail@plt+0x18a8>
   122f4:	mov	r0, #1
   122f8:	add	r1, pc, r1
   122fc:	bl	10a64 <__printf_chk@plt>
   12300:	ldr	r6, [pc, #104]	; 12370 <__assert_fail@plt+0x18ac>
   12304:	ldr	r7, [pc, #104]	; 12374 <__assert_fail@plt+0x18b0>
   12308:	add	r6, pc, r6
   1230c:	add	r7, pc, r7
   12310:	add	fp, r4, fp
   12314:	mov	r2, r4
   12318:	mov	r1, r6
   1231c:	mov	r0, #1
   12320:	bl	10a64 <__printf_chk@plt>
   12324:	mov	r0, r4
   12328:	bl	10a10 <strlen@plt>
   1232c:	add	r0, r0, #1
   12330:	add	r4, r4, r0
   12334:	cmp	r4, fp
   12338:	popcs	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1233c:	mov	r1, r7
   12340:	mov	r0, #1
   12344:	bl	10a64 <__printf_chk@plt>
   12348:	b	12314 <__assert_fail@plt+0x1850>
   1234c:	andeq	r4, r0, ip, asr #2
   12350:	andeq	r3, r0, r0, ror #27
   12354:	muleq	r0, r8, lr
   12358:	andeq	r4, r0, r0, lsr #2
   1235c:	andeq	r4, r0, r4, asr #1
   12360:	andeq	r3, r0, ip, lsl #28
   12364:	andeq	r3, r0, ip, asr #26
   12368:	andeq	r4, r0, r4, lsr #1
   1236c:	andeq	r4, r0, r8, lsr #32
   12370:	andeq	r4, r0, ip, lsl r0
   12374:	andeq	r4, r0, r0, lsr #32
   12378:	ldr	r2, [pc, #28]	; 1239c <__assert_fail@plt+0x18d8>
   1237c:	ldr	r1, [pc, #28]	; 123a0 <__assert_fail@plt+0x18dc>
   12380:	push	{r4, lr}
   12384:	add	r2, pc, r2
   12388:	add	r1, pc, r1
   1238c:	mov	r0, #1
   12390:	bl	10a64 <__printf_chk@plt>
   12394:	mov	r0, #0
   12398:	bl	10a04 <exit@plt>
   1239c:	ldrdeq	r3, [r0], -r0
   123a0:	ldrdeq	r3, [r0], -r8
   123a4:	push	{r7, fp, lr}
   123a8:	sub	sp, sp, #44	; 0x2c
   123ac:	ldr	lr, [pc, #604]	; 12610 <__assert_fail@plt+0x1b4c>
   123b0:	ldr	ip, [pc, #604]	; 12614 <__assert_fail@plt+0x1b50>
   123b4:	add	lr, pc, lr
   123b8:	cmp	r0, #0
   123bc:	str	r0, [sp, #20]
   123c0:	mov	r5, r1
   123c4:	ldr	r1, [lr, ip]
   123c8:	mov	r4, r3
   123cc:	mov	r8, r2
   123d0:	ldr	r3, [r1]
   123d4:	ldr	r6, [sp, #56]	; 0x38
   123d8:	str	r3, [sp, #36]	; 0x24
   123dc:	beq	125bc <__assert_fail@plt+0x1af8>
   123e0:	ldr	r3, [pc, #560]	; 12618 <__assert_fail@plt+0x1b54>
   123e4:	ldr	r2, [pc, #560]	; 1261c <__assert_fail@plt+0x1b58>
   123e8:	add	r3, pc, r3
   123ec:	ldm	r3, {r0, r1}
   123f0:	ldr	r3, [lr, r2]
   123f4:	str	r0, [sp, #28]
   123f8:	add	r0, sp, #28
   123fc:	ldr	r7, [r3]
   12400:	strh	r1, [sp, #32]
   12404:	bl	10a10 <strlen@plt>
   12408:	ldr	r2, [pc, #528]	; 12620 <__assert_fail@plt+0x1b5c>
   1240c:	mov	r1, #1
   12410:	str	r8, [sp]
   12414:	mov	r3, r5
   12418:	add	r2, pc, r2
   1241c:	add	r8, r0, r1
   12420:	mov	r0, r7
   12424:	bl	10a7c <__fprintf_chk@plt>
   12428:	ldr	r0, [r4]
   1242c:	cmp	r0, #0
   12430:	beq	1259c <__assert_fail@plt+0x1ad8>
   12434:	mov	r9, r4
   12438:	mov	r5, #0
   1243c:	bl	10a10 <strlen@plt>
   12440:	ldr	r3, [r9, #4]
   12444:	cmp	r3, #1
   12448:	add	r3, r0, #1
   1244c:	addeq	r3, r3, r8
   12450:	ldr	r0, [r9, #16]!
   12454:	cmp	r5, r3
   12458:	movlt	r5, r3
   1245c:	cmp	r0, #0
   12460:	bne	1243c <__assert_fail@plt+0x1978>
   12464:	ldr	r3, [r6]
   12468:	cmp	r3, #0
   1246c:	beq	1256c <__assert_fail@plt+0x1aa8>
   12470:	ldr	sl, [pc, #428]	; 12624 <__assert_fail@plt+0x1b60>
   12474:	ldr	r9, [pc, #428]	; 12628 <__assert_fail@plt+0x1b64>
   12478:	add	sl, pc, sl
   1247c:	add	r9, pc, r9
   12480:	add	r4, r4, #16
   12484:	b	124fc <__assert_fail@plt+0x1a38>
   12488:	mov	r2, #6
   1248c:	mov	r3, r7
   12490:	mov	r1, #1
   12494:	mov	r0, r9
   12498:	bl	10998 <fwrite@plt>
   1249c:	ldr	r2, [r4, #-12]
   124a0:	ldr	fp, [r4, #-16]
   124a4:	cmp	r2, #0
   124a8:	bne	12528 <__assert_fail@plt+0x1a64>
   124ac:	ldr	r2, [pc, #376]	; 1262c <__assert_fail@plt+0x1b68>
   124b0:	str	fp, [sp]
   124b4:	mov	r3, r5
   124b8:	add	r2, pc, r2
   124bc:	mov	r1, #1
   124c0:	mov	r0, r7
   124c4:	bl	10a7c <__fprintf_chk@plt>
   124c8:	ldr	r2, [pc, #352]	; 12630 <__assert_fail@plt+0x1b6c>
   124cc:	ldr	r3, [r6], #4
   124d0:	add	r2, pc, r2
   124d4:	mov	r1, #1
   124d8:	mov	r0, r7
   124dc:	bl	10a7c <__fprintf_chk@plt>
   124e0:	ldr	r3, [r4]
   124e4:	cmp	r3, #0
   124e8:	beq	12590 <__assert_fail@plt+0x1acc>
   124ec:	ldr	r3, [r6]
   124f0:	add	r4, r4, #16
   124f4:	cmp	r3, #0
   124f8:	beq	1256c <__assert_fail@plt+0x1aa8>
   124fc:	ldr	r3, [r4, #-4]
   12500:	cmp	r3, #126	; 0x7e
   12504:	bgt	12488 <__assert_fail@plt+0x19c4>
   12508:	mov	r2, sl
   1250c:	mov	r1, #1
   12510:	mov	r0, r7
   12514:	bl	10a7c <__fprintf_chk@plt>
   12518:	ldr	r2, [r4, #-12]
   1251c:	ldr	fp, [r4, #-16]
   12520:	cmp	r2, #0
   12524:	beq	124ac <__assert_fail@plt+0x19e8>
   12528:	mov	r0, fp
   1252c:	bl	10a10 <strlen@plt>
   12530:	ldr	r2, [pc, #252]	; 12634 <__assert_fail@plt+0x1b70>
   12534:	sub	ip, r5, r8
   12538:	add	r2, pc, r2
   1253c:	str	r2, [sp, #8]
   12540:	add	r2, sp, #28
   12544:	str	r2, [sp]
   12548:	ldr	r2, [pc, #232]	; 12638 <__assert_fail@plt+0x1b74>
   1254c:	mov	r3, fp
   12550:	add	r2, pc, r2
   12554:	mov	r1, #1
   12558:	sub	ip, ip, r0
   1255c:	str	ip, [sp, #4]
   12560:	mov	r0, r7
   12564:	bl	10a7c <__fprintf_chk@plt>
   12568:	b	124c8 <__assert_fail@plt+0x1a04>
   1256c:	ldr	r3, [pc, #200]	; 1263c <__assert_fail@plt+0x1b78>
   12570:	ldr	r1, [pc, #200]	; 12640 <__assert_fail@plt+0x1b7c>
   12574:	ldr	r0, [pc, #200]	; 12644 <__assert_fail@plt+0x1b80>
   12578:	add	r3, pc, r3
   1257c:	ldr	r2, [pc, #196]	; 12648 <__assert_fail@plt+0x1b84>
   12580:	add	r3, r3, #16
   12584:	add	r1, pc, r1
   12588:	add	r0, pc, r0
   1258c:	bl	10ac4 <__assert_fail@plt>
   12590:	ldr	r3, [sp, #20]
   12594:	cmp	r3, #0
   12598:	beq	12608 <__assert_fail@plt+0x1b44>
   1259c:	ldr	r2, [pc, #168]	; 1264c <__assert_fail@plt+0x1b88>
   125a0:	ldr	r3, [sp, #20]
   125a4:	mov	r0, r7
   125a8:	add	r2, pc, r2
   125ac:	mov	r1, #1
   125b0:	bl	10a7c <__fprintf_chk@plt>
   125b4:	mov	r0, #1
   125b8:	bl	10a04 <exit@plt>
   125bc:	ldr	r1, [pc, #140]	; 12650 <__assert_fail@plt+0x1b8c>
   125c0:	ldr	r2, [pc, #140]	; 12654 <__assert_fail@plt+0x1b90>
   125c4:	mov	r3, r5
   125c8:	ldr	ip, [lr, r1]
   125cc:	add	r2, pc, r2
   125d0:	str	r8, [sp]
   125d4:	ldm	r2, {r0, r1}
   125d8:	ldr	r7, [ip]
   125dc:	ldr	r2, [pc, #116]	; 12658 <__assert_fail@plt+0x1b94>
   125e0:	str	r0, [sp, #28]
   125e4:	strh	r1, [sp, #32]
   125e8:	mov	r0, r7
   125ec:	add	r2, pc, r2
   125f0:	mov	r1, #1
   125f4:	bl	10a7c <__fprintf_chk@plt>
   125f8:	ldr	r0, [r4]
   125fc:	cmp	r0, #0
   12600:	movne	r8, #6
   12604:	bne	12434 <__assert_fail@plt+0x1970>
   12608:	mov	r0, #0
   1260c:	bl	10a04 <exit@plt>
   12610:	muleq	r1, r0, fp
   12614:	muleq	r0, ip, r0
   12618:	andeq	r3, r0, ip, ror #31
   1261c:	andeq	r0, r0, r4, lsr #1
   12620:	andeq	r3, r0, r8, asr pc
   12624:	andeq	r3, r0, r4, lsr pc
   12628:	andeq	r3, r0, r8, lsr #30
   1262c:	strdeq	r3, [r0], -ip
   12630:	andeq	r3, r0, r0, lsl #30
   12634:	andeq	r3, r0, r4, ror fp
   12638:	andeq	r3, r0, ip, ror #28
   1263c:	andeq	r3, r0, r0, ror #25
   12640:	andeq	r3, r0, r4, lsl #26
   12644:	andeq	r3, r0, r4, lsl #28
   12648:			; <UNDEFINED> instruction: 0x000001b7
   1264c:	andeq	r3, r0, r0, lsr #28
   12650:	andeq	r0, r0, ip, lsr #1
   12654:	andeq	r3, r0, r8, lsl #28
   12658:	andeq	r3, r0, r4, lsl #27
   1265c:	push	{lr}		; (str lr, [sp, #-4]!)
   12660:	lsl	r1, r1, #4
   12664:	ldr	r2, [r0, #16]
   12668:	lsr	r3, r2, #24
   1266c:	lsl	lr, r2, #8
   12670:	orr	r3, r3, r2, lsl #24
   12674:	and	lr, lr, #16711680	; 0xff0000
   12678:	lsr	r2, r2, #8
   1267c:	orr	r3, r3, lr
   12680:	and	r2, r2, #65280	; 0xff00
   12684:	orr	r3, r3, r2
   12688:	adds	r1, r1, r3
   1268c:	bcs	126d4 <__assert_fail@plt+0x1c10>
   12690:	ldr	lr, [r0, #4]
   12694:	lsr	r2, lr, #24
   12698:	lsl	r3, lr, #8
   1269c:	orr	r2, r2, lr, lsl #24
   126a0:	and	r3, r3, #16711680	; 0xff0000
   126a4:	lsr	lr, lr, #8
   126a8:	orr	r2, r2, r3
   126ac:	and	lr, lr, #65280	; 0xff00
   126b0:	orr	r2, r2, lr
   126b4:	sub	r2, r2, #16
   126b8:	cmp	r1, r2
   126bc:	bhi	126c8 <__assert_fail@plt+0x1c04>
   126c0:	add	r0, r0, r1
   126c4:	pop	{pc}		; (ldr pc, [sp], #4)
   126c8:	mov	ip, #0
   126cc:	mov	r0, ip
   126d0:	pop	{pc}		; (ldr pc, [sp], #4)
   126d4:	mov	r0, #0
   126d8:	pop	{pc}		; (ldr pc, [sp], #4)
   126dc:	push	{r4, r5, r6, lr}
   126e0:	mov	r6, r2
   126e4:	mov	r4, r0
   126e8:	mov	r5, r1
   126ec:	bl	1580c <__assert_fail@plt+0x4d48>
   126f0:	cmp	r0, #0
   126f4:	blt	12758 <__assert_fail@plt+0x1c94>
   126f8:	ldr	r3, [r4, #8]
   126fc:	cmp	r6, #0
   12700:	lsr	r0, r3, #24
   12704:	lsl	r2, r3, #8
   12708:	orr	r0, r0, r3, lsl #24
   1270c:	and	r2, r2, #16711680	; 0xff0000
   12710:	lsr	r3, r3, #8
   12714:	orr	r0, r0, r2
   12718:	and	r3, r3, #65280	; 0xff00
   1271c:	orr	r0, r0, r3
   12720:	add	r0, r0, r5
   12724:	add	r0, r4, r0
   12728:	popeq	{r4, r5, r6, pc}
   1272c:	ldr	r3, [r0, #4]
   12730:	lsr	r2, r3, #24
   12734:	lsl	r1, r3, #8
   12738:	orr	r2, r2, r3, lsl #24
   1273c:	and	r1, r1, #16711680	; 0xff0000
   12740:	lsr	r3, r3, #8
   12744:	orr	r2, r2, r1
   12748:	and	r3, r3, #65280	; 0xff00
   1274c:	orr	r3, r2, r3
   12750:	str	r3, [r6]
   12754:	pop	{r4, r5, r6, pc}
   12758:	cmp	r6, #0
   1275c:	strne	r0, [r6]
   12760:	mov	r0, #0
   12764:	pop	{r4, r5, r6, pc}
   12768:	ldr	r3, [pc, #136]	; 127f8 <__assert_fail@plt+0x1d34>
   1276c:	ldr	r2, [pc, #136]	; 127fc <__assert_fail@plt+0x1d38>
   12770:	add	r3, pc, r3
   12774:	push	{r4, r5, r6, r7, lr}
   12778:	sub	sp, sp, #12
   1277c:	ldr	r5, [r3, r2]
   12780:	mov	r6, r0
   12784:	mov	r4, r1
   12788:	ldr	r3, [r5]
   1278c:	mov	r7, sp
   12790:	str	r3, [sp, #4]
   12794:	mov	r2, r7
   12798:	mov	r1, r4
   1279c:	mov	r0, r6
   127a0:	bl	15654 <__assert_fail@plt+0x4b90>
   127a4:	cmp	r0, #3
   127a8:	beq	127d8 <__assert_fail@plt+0x1d14>
   127ac:	cmp	r0, #9
   127b0:	bne	127e0 <__assert_fail@plt+0x1d1c>
   127b4:	ldr	r0, [sp]
   127b8:	cmp	r0, #0
   127bc:	mvnge	r0, #10
   127c0:	ldr	r2, [sp, #4]
   127c4:	ldr	r3, [r5]
   127c8:	cmp	r2, r3
   127cc:	bne	127f4 <__assert_fail@plt+0x1d30>
   127d0:	add	sp, sp, #12
   127d4:	pop	{r4, r5, r6, r7, pc}
   127d8:	mov	r0, r4
   127dc:	b	127c0 <__assert_fail@plt+0x1cfc>
   127e0:	cmp	r0, #4
   127e4:	ldr	r4, [sp]
   127e8:	beq	12794 <__assert_fail@plt+0x1cd0>
   127ec:	mvn	r0, #0
   127f0:	b	127c0 <__assert_fail@plt+0x1cfc>
   127f4:	bl	10980 <__stack_chk_fail@plt>
   127f8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   127fc:	muleq	r0, ip, r0
   12800:	push	{r4, r5, r6, r7, r8, lr}
   12804:	mov	r4, r0
   12808:	mov	r6, r1
   1280c:	mov	r5, r2
   12810:	ldr	r7, [r0, #12]
   12814:	bl	151e8 <__assert_fail@plt+0x4724>
   12818:	cmp	r0, #0
   1281c:	bne	12980 <__assert_fail@plt+0x1ebc>
   12820:	ldr	r2, [r4, #4]
   12824:	lsr	r3, r7, #24
   12828:	lsl	lr, r7, #8
   1282c:	lsr	r1, r2, #24
   12830:	lsl	r0, r2, #8
   12834:	orr	r3, r3, r7, lsl #24
   12838:	and	lr, lr, #16711680	; 0xff0000
   1283c:	lsr	ip, r7, #8
   12840:	orr	r1, r1, r2, lsl #24
   12844:	and	r0, r0, #16711680	; 0xff0000
   12848:	lsr	r2, r2, #8
   1284c:	orr	r3, r3, lr
   12850:	and	ip, ip, #65280	; 0xff00
   12854:	orr	r1, r1, r0
   12858:	and	r2, r2, #65280	; 0xff00
   1285c:	orr	r3, r3, ip
   12860:	orr	r2, r1, r2
   12864:	add	r3, r3, r6
   12868:	cmp	r3, r2
   1286c:	bcs	1297c <__assert_fail@plt+0x1eb8>
   12870:	ldr	r1, [r4]
   12874:	ldr	lr, [pc, #316]	; 129b8 <__assert_fail@plt+0x1ef4>
   12878:	sub	r2, r2, r3
   1287c:	lsr	r0, r1, #24
   12880:	lsl	ip, r1, #8
   12884:	orr	r0, r0, r1, lsl #24
   12888:	and	ip, ip, #16711680	; 0xff0000
   1288c:	lsr	r1, r1, #8
   12890:	orr	r0, r0, ip
   12894:	and	r1, r1, #65280	; 0xff00
   12898:	orr	r1, r0, r1
   1289c:	cmp	r1, lr
   128a0:	beq	1291c <__assert_fail@plt+0x1e58>
   128a4:	ldr	r0, [pc, #272]	; 129bc <__assert_fail@plt+0x1ef8>
   128a8:	cmp	r1, r0
   128ac:	bne	12998 <__assert_fail@plt+0x1ed4>
   128b0:	cmp	r6, #0
   128b4:	bge	1297c <__assert_fail@plt+0x1eb8>
   128b8:	ldr	r0, [r4, #32]
   128bc:	lsr	r1, r0, #24
   128c0:	lsl	ip, r0, #8
   128c4:	orr	r1, r1, r0, lsl #24
   128c8:	and	ip, ip, #16711680	; 0xff0000
   128cc:	lsr	r0, r0, #8
   128d0:	orr	r1, r1, ip
   128d4:	and	r0, r0, #65280	; 0xff00
   128d8:	orr	r1, r1, r0
   128dc:	rsb	r1, r1, #0
   128e0:	cmp	r6, r1
   128e4:	bcc	1297c <__assert_fail@plt+0x1eb8>
   128e8:	rsb	r6, r6, #0
   128ec:	cmp	r2, r6
   128f0:	movcs	r2, r6
   128f4:	add	r4, r4, r3
   128f8:	mov	r0, r4
   128fc:	mov	r1, #0
   12900:	bl	10a88 <memchr@plt>
   12904:	cmp	r0, #0
   12908:	beq	129b0 <__assert_fail@plt+0x1eec>
   1290c:	cmp	r5, #0
   12910:	subne	r0, r0, r4
   12914:	strne	r0, [r5]
   12918:	b	12990 <__assert_fail@plt+0x1ecc>
   1291c:	cmp	r6, #0
   12920:	blt	1297c <__assert_fail@plt+0x1eb8>
   12924:	ldr	r1, [r4, #20]
   12928:	lsr	r0, r1, #24
   1292c:	lsl	ip, r1, #8
   12930:	orr	r0, r0, r1, lsl #24
   12934:	and	ip, ip, #16711680	; 0xff0000
   12938:	lsr	r1, r1, #8
   1293c:	orr	r0, r0, ip
   12940:	and	r1, r1, #65280	; 0xff00
   12944:	orr	r1, r0, r1
   12948:	cmp	r1, #16
   1294c:	bls	128f4 <__assert_fail@plt+0x1e30>
   12950:	ldr	r0, [r4, #32]
   12954:	lsr	r1, r0, #24
   12958:	lsl	ip, r0, #8
   1295c:	orr	r1, r1, r0, lsl #24
   12960:	and	ip, ip, #16711680	; 0xff0000
   12964:	lsr	r0, r0, #8
   12968:	orr	r1, r1, ip
   1296c:	and	r0, r0, #65280	; 0xff00
   12970:	orr	r1, r1, r0
   12974:	cmp	r6, r1
   12978:	bcc	129a0 <__assert_fail@plt+0x1edc>
   1297c:	mvn	r0, #3
   12980:	cmp	r5, #0
   12984:	movne	r4, #0
   12988:	moveq	r4, r5
   1298c:	strne	r0, [r5]
   12990:	mov	r0, r4
   12994:	pop	{r4, r5, r6, r7, r8, pc}
   12998:	mvn	r0, #12
   1299c:	b	12980 <__assert_fail@plt+0x1ebc>
   129a0:	sub	r1, r1, r6
   129a4:	cmp	r2, r1
   129a8:	movcs	r2, r1
   129ac:	b	128f4 <__assert_fail@plt+0x1e30>
   129b0:	mvn	r0, #7
   129b4:	b	12980 <__assert_fail@plt+0x1ebc>
   129b8:	andle	pc, sp, sp, ror #29
   129bc:	svccs	0x00f20112
   129c0:	mov	r2, #0
   129c4:	b	12800 <__assert_fail@plt+0x1d3c>
   129c8:	ldr	ip, [pc, #308]	; 12b04 <__assert_fail@plt+0x2040>
   129cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d0:	add	ip, pc, ip
   129d4:	ldr	lr, [pc, #300]	; 12b08 <__assert_fail@plt+0x2044>
   129d8:	sub	sp, sp, #28
   129dc:	mov	r5, r3
   129e0:	ldr	r4, [ip, lr]
   129e4:	mov	r8, r1
   129e8:	mov	r7, r2
   129ec:	ldr	r3, [r4]
   129f0:	mov	r2, ip
   129f4:	mov	r9, r0
   129f8:	str	r3, [sp, #20]
   129fc:	bl	151e8 <__assert_fail@plt+0x4724>
   12a00:	subs	r6, r0, #0
   12a04:	bne	12adc <__assert_fail@plt+0x2018>
   12a08:	mov	r1, r8
   12a0c:	mov	r0, r9
   12a10:	bl	1265c <__assert_fail@plt+0x1b98>
   12a14:	subs	ip, r0, #0
   12a18:	beq	12af8 <__assert_fail@plt+0x2034>
   12a1c:	ldr	r0, [ip]
   12a20:	ldr	r1, [ip, #4]
   12a24:	add	r3, sp, #8
   12a28:	mov	r2, r3
   12a2c:	mov	lr, r0
   12a30:	stmia	r2!, {r0, r1}
   12a34:	ldr	r2, [sp, #12]
   12a38:	lsl	r1, r0, #8
   12a3c:	and	r1, r1, #16711680	; 0xff0000
   12a40:	lsr	r8, r2, #8
   12a44:	lsl	r0, r2, #24
   12a48:	orr	r0, r0, r2, lsr #24
   12a4c:	uxtb	sl, r8
   12a50:	lsr	r2, r2, #16
   12a54:	orr	r8, r0, sl, lsl #16
   12a58:	orr	r9, r1, lr, lsl #24
   12a5c:	uxtb	r0, r2
   12a60:	mov	r1, #0
   12a64:	lsr	sl, lr, #8
   12a68:	strd	r0, [sp]
   12a6c:	ldr	r2, [sp]
   12a70:	and	r1, sl, #65280	; 0xff00
   12a74:	orr	r1, r9, r1
   12a78:	orr	r2, r8, r2, lsl #8
   12a7c:	orr	r1, r1, lr, lsr #24
   12a80:	str	r2, [r7]
   12a84:	str	r1, [r7, #4]
   12a88:	ldr	r0, [ip, #8]!
   12a8c:	mov	lr, r0
   12a90:	ldr	r1, [ip, #4]
   12a94:	lsr	r8, r0, #8
   12a98:	and	r8, r8, #65280	; 0xff00
   12a9c:	stmia	r3!, {r0, r1}
   12aa0:	ldr	r7, [sp, #12]
   12aa4:	lsl	r3, r0, #8
   12aa8:	and	r1, r3, #16711680	; 0xff0000
   12aac:	lsr	r2, r7, #8
   12ab0:	lsr	r0, r7, #16
   12ab4:	uxtb	sl, r2
   12ab8:	lsl	ip, r7, #24
   12abc:	orr	r3, r1, lr, lsl #24
   12ac0:	orr	ip, ip, r7, lsr #24
   12ac4:	uxtb	r0, r0
   12ac8:	orr	r3, r3, r8
   12acc:	orr	r2, ip, sl, lsl #16
   12ad0:	orr	r3, r3, lr, lsr #24
   12ad4:	orr	r0, r2, r0, lsl #8
   12ad8:	stm	r5, {r0, r3}
   12adc:	ldr	r2, [sp, #20]
   12ae0:	ldr	r3, [r4]
   12ae4:	mov	r0, r6
   12ae8:	cmp	r2, r3
   12aec:	bne	12b00 <__assert_fail@plt+0x203c>
   12af0:	add	sp, sp, #28
   12af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12af8:	mvn	r6, #3
   12afc:	b	12adc <__assert_fail@plt+0x2018>
   12b00:	bl	10980 <__stack_chk_fail@plt>
   12b04:	andeq	r4, r1, r4, ror r5
   12b08:	muleq	r0, ip, r0
   12b0c:	ldr	r3, [pc, #196]	; 12bd8 <__assert_fail@plt+0x2114>
   12b10:	ldr	r2, [pc, #196]	; 12bdc <__assert_fail@plt+0x2118>
   12b14:	add	r3, pc, r3
   12b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b1c:	sub	sp, sp, #28
   12b20:	ldr	r8, [r3, r2]
   12b24:	add	r3, sp, #8
   12b28:	str	r3, [sp, #4]
   12b2c:	ldr	r3, [r8]
   12b30:	mov	fp, r0
   12b34:	mov	r9, #0
   12b38:	str	r3, [sp, #20]
   12b3c:	b	12ba0 <__assert_fail@plt+0x20dc>
   12b40:	ldr	r0, [r3, #8]!
   12b44:	ldr	r2, [sp, #4]
   12b48:	ldr	r1, [r3, #4]
   12b4c:	stmia	r2!, {r0, r1}
   12b50:	ldr	r3, [sp, #12]
   12b54:	ldr	ip, [sp, #8]
   12b58:	lsr	r2, r3, #16
   12b5c:	lsr	r0, r3, #8
   12b60:	lsl	lr, r3, #24
   12b64:	lsl	sl, ip, #8
   12b68:	orr	lr, lr, r3, lsr #24
   12b6c:	uxtb	r6, r2
   12b70:	uxtb	r0, r0
   12b74:	and	r3, sl, #16711680	; 0xff0000
   12b78:	lsr	r2, ip, #8
   12b7c:	orr	r3, r3, ip, lsl #24
   12b80:	and	r1, r2, #65280	; 0xff00
   12b84:	orr	r3, r3, r1
   12b88:	orr	r0, lr, r0, lsl #16
   12b8c:	orr	r4, r0, r6, lsl #8
   12b90:	orr	r5, r3, ip, lsr #24
   12b94:	orrs	r3, r4, r5
   12b98:	beq	12bb8 <__assert_fail@plt+0x20f4>
   12b9c:	add	r9, r9, #1
   12ba0:	mov	r1, r9
   12ba4:	mov	r0, fp
   12ba8:	bl	1265c <__assert_fail@plt+0x1b98>
   12bac:	subs	r3, r0, #0
   12bb0:	bne	12b40 <__assert_fail@plt+0x207c>
   12bb4:	mvn	r9, #7
   12bb8:	ldr	r2, [sp, #20]
   12bbc:	ldr	r3, [r8]
   12bc0:	mov	r0, r9
   12bc4:	cmp	r2, r3
   12bc8:	bne	12bd4 <__assert_fail@plt+0x2110>
   12bcc:	add	sp, sp, #28
   12bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bd4:	bl	10980 <__stack_chk_fail@plt>
   12bd8:	andeq	r4, r1, r0, lsr r4
   12bdc:	muleq	r0, ip, r0
   12be0:	push	{r4, r5, r6, r7, r8, lr}
   12be4:	mov	r4, r0
   12be8:	mov	r7, r1
   12bec:	mov	r6, r2
   12bf0:	ldr	r5, [r0, #8]
   12bf4:	bl	151e8 <__assert_fail@plt+0x4724>
   12bf8:	cmp	r0, #0
   12bfc:	beq	12c18 <__assert_fail@plt+0x2154>
   12c00:	cmp	r6, #0
   12c04:	movne	r4, #0
   12c08:	moveq	r4, r6
   12c0c:	strne	r0, [r6]
   12c10:	mov	r0, r4
   12c14:	pop	{r4, r5, r6, r7, r8, pc}
   12c18:	mov	r1, r7
   12c1c:	mov	r0, r4
   12c20:	bl	157cc <__assert_fail@plt+0x4d08>
   12c24:	cmp	r0, #0
   12c28:	blt	12c00 <__assert_fail@plt+0x213c>
   12c2c:	ldr	r3, [r4, #20]
   12c30:	lsr	r1, r5, #24
   12c34:	lsl	r2, r5, #8
   12c38:	orr	r1, r1, r5, lsl #24
   12c3c:	and	r2, r2, #16711680	; 0xff0000
   12c40:	lsr	r5, r5, #8
   12c44:	orr	r1, r1, r2
   12c48:	and	r5, r5, #65280	; 0xff00
   12c4c:	lsr	r2, r3, #24
   12c50:	orr	r5, r1, r5
   12c54:	lsl	r1, r3, #8
   12c58:	orr	r2, r2, r3, lsl #24
   12c5c:	and	r1, r1, #16711680	; 0xff0000
   12c60:	lsr	r3, r3, #8
   12c64:	orr	r2, r2, r1
   12c68:	and	r3, r3, #65280	; 0xff00
   12c6c:	add	r1, r5, r7
   12c70:	orr	r3, r2, r3
   12c74:	add	r4, r4, r1
   12c78:	cmp	r3, #15
   12c7c:	add	r4, r4, #4
   12c80:	bhi	12c9c <__assert_fail@plt+0x21d8>
   12c84:	mov	r0, r4
   12c88:	mov	r1, #47	; 0x2f
   12c8c:	bl	10aa0 <strrchr@plt>
   12c90:	cmp	r0, #0
   12c94:	beq	12cb8 <__assert_fail@plt+0x21f4>
   12c98:	add	r4, r0, #1
   12c9c:	cmp	r6, #0
   12ca0:	beq	12c10 <__assert_fail@plt+0x214c>
   12ca4:	mov	r0, r4
   12ca8:	bl	10a10 <strlen@plt>
   12cac:	str	r0, [r6]
   12cb0:	mov	r0, r4
   12cb4:	pop	{r4, r5, r6, r7, r8, pc}
   12cb8:	mvn	r0, #10
   12cbc:	b	12c00 <__assert_fail@plt+0x213c>
   12cc0:	ldr	ip, [pc, #260]	; 12dcc <__assert_fail@plt+0x2308>
   12cc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cc8:	add	ip, pc, ip
   12ccc:	ldr	lr, [pc, #252]	; 12dd0 <__assert_fail@plt+0x230c>
   12cd0:	sub	sp, sp, #20
   12cd4:	mov	r7, r3
   12cd8:	ldr	r9, [ip, lr]
   12cdc:	mov	r4, r1
   12ce0:	mov	r8, r2
   12ce4:	ldr	r3, [r9]
   12ce8:	mov	r2, ip
   12cec:	mov	r5, r0
   12cf0:	str	r3, [sp, #12]
   12cf4:	bl	151e8 <__assert_fail@plt+0x4724>
   12cf8:	cmp	r0, #0
   12cfc:	bne	12da4 <__assert_fail@plt+0x22e0>
   12d00:	cmp	r4, #0
   12d04:	str	r0, [sp, #4]
   12d08:	blt	12da0 <__assert_fail@plt+0x22dc>
   12d0c:	add	r6, sp, #4
   12d10:	add	sl, sp, #8
   12d14:	mov	r1, r4
   12d18:	mov	r2, r6
   12d1c:	mov	r0, r5
   12d20:	bl	1584c <__assert_fail@plt+0x4d88>
   12d24:	ldr	r3, [sp, #4]
   12d28:	cmp	r0, #0
   12d2c:	cmpge	r3, #0
   12d30:	mov	r4, r0
   12d34:	blt	12dbc <__assert_fail@plt+0x22f8>
   12d38:	cmp	r3, #1
   12d3c:	bne	12d14 <__assert_fail@plt+0x2250>
   12d40:	mov	r2, sl
   12d44:	mov	r1, r4
   12d48:	mov	r0, r5
   12d4c:	bl	12be0 <__assert_fail@plt+0x211c>
   12d50:	subs	fp, r0, #0
   12d54:	beq	12d14 <__assert_fail@plt+0x2250>
   12d58:	ldr	r3, [sp, #8]
   12d5c:	cmp	r7, r3
   12d60:	bgt	12d14 <__assert_fail@plt+0x2250>
   12d64:	mov	r2, r7
   12d68:	mov	r1, r8
   12d6c:	bl	10974 <memcmp@plt>
   12d70:	cmp	r0, #0
   12d74:	bne	12d14 <__assert_fail@plt+0x2250>
   12d78:	ldrb	fp, [fp, r7]
   12d7c:	cmp	fp, #0
   12d80:	beq	12da0 <__assert_fail@plt+0x22dc>
   12d84:	mov	r2, r7
   12d88:	mov	r1, #64	; 0x40
   12d8c:	mov	r0, r8
   12d90:	bl	10a88 <memchr@plt>
   12d94:	cmp	fp, #64	; 0x40
   12d98:	cmpeq	r0, #0
   12d9c:	bne	12d14 <__assert_fail@plt+0x2250>
   12da0:	mov	r0, r4
   12da4:	ldr	r2, [sp, #12]
   12da8:	ldr	r3, [r9]
   12dac:	cmp	r2, r3
   12db0:	bne	12dc8 <__assert_fail@plt+0x2304>
   12db4:	add	sp, sp, #20
   12db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dbc:	cmp	r3, #0
   12dc0:	mvnlt	r4, #0
   12dc4:	b	12da0 <__assert_fail@plt+0x22dc>
   12dc8:	bl	10980 <__stack_chk_fail@plt>
   12dcc:	andeq	r4, r1, ip, ror r2
   12dd0:	muleq	r0, ip, r0
   12dd4:	push	{r4, r5, r6, lr}
   12dd8:	mov	r5, r0
   12ddc:	mov	r0, r2
   12de0:	mov	r4, r2
   12de4:	mov	r6, r1
   12de8:	bl	10a10 <strlen@plt>
   12dec:	mov	r2, r4
   12df0:	mov	r1, r6
   12df4:	mov	r3, r0
   12df8:	mov	r0, r5
   12dfc:	pop	{r4, r5, r6, lr}
   12e00:	b	12cc0 <__assert_fail@plt+0x21fc>
   12e04:	push	{r4, lr}
   12e08:	mov	r4, r0
   12e0c:	bl	157cc <__assert_fail@plt+0x4d08>
   12e10:	subs	r1, r0, #0
   12e14:	poplt	{r4, pc}
   12e18:	mov	r0, r4
   12e1c:	pop	{r4, lr}
   12e20:	b	12768 <__assert_fail@plt+0x1ca4>
   12e24:	push	{r4, lr}
   12e28:	mov	r4, r0
   12e2c:	bl	1580c <__assert_fail@plt+0x4d48>
   12e30:	subs	r1, r0, #0
   12e34:	poplt	{r4, pc}
   12e38:	mov	r0, r4
   12e3c:	pop	{r4, lr}
   12e40:	b	12768 <__assert_fail@plt+0x1ca4>
   12e44:	ldr	ip, [pc, #272]	; 12f5c <__assert_fail@plt+0x2498>
   12e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e4c:	add	ip, pc, ip
   12e50:	ldr	lr, [pc, #264]	; 12f60 <__assert_fail@plt+0x249c>
   12e54:	mov	sl, r2
   12e58:	sub	sp, sp, #20
   12e5c:	ldr	r2, [ip, lr]
   12e60:	mov	r9, r3
   12e64:	mov	r3, ip
   12e68:	ldr	r3, [r2]
   12e6c:	str	r2, [sp, #4]
   12e70:	mov	r5, r0
   12e74:	ldr	r7, [sp, #56]	; 0x38
   12e78:	ldr	fp, [sp, #60]	; 0x3c
   12e7c:	str	r3, [sp, #12]
   12e80:	bl	12e04 <__assert_fail@plt+0x2340>
   12e84:	subs	r4, r0, #0
   12e88:	blt	12f44 <__assert_fail@plt+0x2480>
   12e8c:	add	r8, sp, #8
   12e90:	b	12ea8 <__assert_fail@plt+0x23e4>
   12e94:	mov	r1, r4
   12e98:	mov	r0, r5
   12e9c:	bl	12e24 <__assert_fail@plt+0x2360>
   12ea0:	subs	r4, r0, #0
   12ea4:	blt	12f44 <__assert_fail@plt+0x2480>
   12ea8:	mov	r2, r7
   12eac:	mov	r1, r4
   12eb0:	mov	r0, r5
   12eb4:	bl	126dc <__assert_fail@plt+0x1c18>
   12eb8:	subs	r6, r0, #0
   12ebc:	beq	12f40 <__assert_fail@plt+0x247c>
   12ec0:	ldr	r3, [r6, #8]
   12ec4:	mov	r2, r8
   12ec8:	mov	r0, r5
   12ecc:	lsr	r1, r3, #24
   12ed0:	lsl	ip, r3, #8
   12ed4:	orr	r1, r1, r3, lsl #24
   12ed8:	and	ip, ip, #16711680	; 0xff0000
   12edc:	lsr	r3, r3, #8
   12ee0:	orr	r1, r1, ip
   12ee4:	and	r3, r3, #65280	; 0xff00
   12ee8:	orr	r1, r1, r3
   12eec:	bl	12800 <__assert_fail@plt+0x1d3c>
   12ef0:	cmp	r0, #0
   12ef4:	beq	12e94 <__assert_fail@plt+0x23d0>
   12ef8:	ldr	r3, [sp, #8]
   12efc:	cmp	r9, r3
   12f00:	bne	12e94 <__assert_fail@plt+0x23d0>
   12f04:	mov	r2, r9
   12f08:	mov	r1, sl
   12f0c:	bl	10974 <memcmp@plt>
   12f10:	cmp	r0, #0
   12f14:	bne	12e94 <__assert_fail@plt+0x23d0>
   12f18:	cmp	fp, #0
   12f1c:	strne	r4, [fp]
   12f20:	ldr	r3, [sp, #4]
   12f24:	ldr	r2, [sp, #12]
   12f28:	mov	r0, r6
   12f2c:	ldr	r3, [r3]
   12f30:	cmp	r2, r3
   12f34:	bne	12f58 <__assert_fail@plt+0x2494>
   12f38:	add	sp, sp, #20
   12f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f40:	mvn	r4, #12
   12f44:	cmp	r7, #0
   12f48:	strne	r4, [r7]
   12f4c:	movne	r6, #0
   12f50:	moveq	r6, r7
   12f54:	b	12f20 <__assert_fail@plt+0x245c>
   12f58:	bl	10980 <__stack_chk_fail@plt>
   12f5c:	strdeq	r4, [r1], -r8
   12f60:	muleq	r0, ip, r0
   12f64:	push	{r4, lr}
   12f68:	ldr	r3, [r0, #20]
   12f6c:	lsr	ip, r3, #24
   12f70:	lsl	lr, r3, #8
   12f74:	orr	ip, ip, r3, lsl #24
   12f78:	and	lr, lr, #16711680	; 0xff0000
   12f7c:	lsr	r3, r3, #8
   12f80:	orr	ip, ip, lr
   12f84:	and	r3, r3, #65280	; 0xff00
   12f88:	orr	r3, ip, r3
   12f8c:	cmp	r3, #15
   12f90:	bls	12f9c <__assert_fail@plt+0x24d8>
   12f94:	pop	{r4, lr}
   12f98:	b	126dc <__assert_fail@plt+0x1c18>
   12f9c:	cmp	r2, #0
   12fa0:	mov	r4, r2
   12fa4:	mvnne	r3, #9
   12fa8:	strne	r3, [r2]
   12fac:	mov	r0, #0
   12fb0:	pop	{r4, pc}
   12fb4:	push	{r4, r5, lr}
   12fb8:	sub	sp, sp, #12
   12fbc:	ldr	ip, [r0, #20]
   12fc0:	ldr	r4, [sp, #24]
   12fc4:	lsr	lr, ip, #24
   12fc8:	lsl	r5, ip, #8
   12fcc:	orr	lr, lr, ip, lsl #24
   12fd0:	and	r5, r5, #16711680	; 0xff0000
   12fd4:	lsr	ip, ip, #8
   12fd8:	orr	lr, lr, r5
   12fdc:	and	ip, ip, #65280	; 0xff00
   12fe0:	orr	ip, lr, ip
   12fe4:	cmp	ip, #15
   12fe8:	bls	13000 <__assert_fail@plt+0x253c>
   12fec:	mov	ip, #0
   12ff0:	stm	sp, {r4, ip}
   12ff4:	bl	12e44 <__assert_fail@plt+0x2380>
   12ff8:	add	sp, sp, #12
   12ffc:	pop	{r4, r5, pc}
   13000:	cmp	r4, #0
   13004:	moveq	r0, r4
   13008:	beq	12ff8 <__assert_fail@plt+0x2534>
   1300c:	mvn	r3, #9
   13010:	mov	r0, #0
   13014:	str	r3, [r4]
   13018:	add	sp, sp, #12
   1301c:	pop	{r4, r5, pc}
   13020:	push	{r4, r5, r6, r7, lr}
   13024:	mov	r5, r0
   13028:	sub	sp, sp, #12
   1302c:	mov	r0, r2
   13030:	mov	r7, r3
   13034:	mov	r4, r2
   13038:	mov	r6, r1
   1303c:	bl	10a10 <strlen@plt>
   13040:	str	r7, [sp]
   13044:	mov	r2, r4
   13048:	mov	r1, r6
   1304c:	mov	r3, r0
   13050:	mov	r0, r5
   13054:	bl	12fb4 <__assert_fail@plt+0x24f0>
   13058:	add	sp, sp, #12
   1305c:	pop	{r4, r5, r6, r7, pc}
   13060:	ldr	ip, [pc, #200]	; 13130 <__assert_fail@plt+0x266c>
   13064:	push	{r4, r5, lr}
   13068:	add	ip, pc, ip
   1306c:	ldr	lr, [pc, #192]	; 13134 <__assert_fail@plt+0x2670>
   13070:	sub	sp, sp, #20
   13074:	ldr	r4, [ip, lr]
   13078:	ldr	r5, [sp, #32]
   1307c:	add	ip, sp, #8
   13080:	str	r5, [sp]
   13084:	ldr	lr, [r4]
   13088:	str	ip, [sp, #4]
   1308c:	str	lr, [sp, #12]
   13090:	mov	r5, r0
   13094:	bl	12e44 <__assert_fail@plt+0x2380>
   13098:	cmp	r0, #0
   1309c:	beq	130d0 <__assert_fail@plt+0x260c>
   130a0:	ldr	r3, [r5, #20]
   130a4:	lsr	r2, r3, #24
   130a8:	lsl	r1, r3, #8
   130ac:	orr	r2, r2, r3, lsl #24
   130b0:	and	r1, r1, #16711680	; 0xff0000
   130b4:	lsr	r3, r3, #8
   130b8:	orr	r2, r2, r1
   130bc:	and	r3, r3, #65280	; 0xff00
   130c0:	orr	r3, r2, r3
   130c4:	cmp	r3, #15
   130c8:	bls	130e8 <__assert_fail@plt+0x2624>
   130cc:	add	r0, r0, #12
   130d0:	ldr	r2, [sp, #12]
   130d4:	ldr	r3, [r4]
   130d8:	cmp	r2, r3
   130dc:	bne	1312c <__assert_fail@plt+0x2668>
   130e0:	add	sp, sp, #20
   130e4:	pop	{r4, r5, pc}
   130e8:	ldr	r3, [sp, #8]
   130ec:	add	r3, r3, #12
   130f0:	tst	r3, #7
   130f4:	beq	130cc <__assert_fail@plt+0x2608>
   130f8:	ldr	r3, [r0, #4]
   130fc:	lsr	r2, r3, #24
   13100:	lsl	r1, r3, #8
   13104:	orr	r2, r2, r3, lsl #24
   13108:	and	r1, r1, #16711680	; 0xff0000
   1310c:	lsr	r3, r3, #8
   13110:	orr	r2, r2, r1
   13114:	and	r3, r3, #65280	; 0xff00
   13118:	orr	r3, r2, r3
   1311c:	cmp	r3, #7
   13120:	addhi	r0, r0, #16
   13124:	bls	130cc <__assert_fail@plt+0x2608>
   13128:	b	130d0 <__assert_fail@plt+0x260c>
   1312c:	bl	10980 <__stack_chk_fail@plt>
   13130:	ldrdeq	r3, [r1], -ip
   13134:	muleq	r0, ip, r0
   13138:	ldr	ip, [pc, #292]	; 13264 <__assert_fail@plt+0x27a0>
   1313c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13140:	add	ip, pc, ip
   13144:	ldr	lr, [pc, #284]	; 13268 <__assert_fail@plt+0x27a4>
   13148:	sub	sp, sp, #12
   1314c:	mov	r8, r3
   13150:	ldr	r4, [ip, lr]
   13154:	mov	r3, ip
   13158:	mov	r7, r2
   1315c:	ldr	r3, [r4]
   13160:	mov	r2, r8
   13164:	mov	r9, r0
   13168:	mov	r5, r1
   1316c:	str	r3, [sp, #4]
   13170:	bl	126dc <__assert_fail@plt+0x1c18>
   13174:	subs	r6, r0, #0
   13178:	beq	131f0 <__assert_fail@plt+0x272c>
   1317c:	cmp	r7, #0
   13180:	beq	131c0 <__assert_fail@plt+0x26fc>
   13184:	ldr	r3, [r6, #8]
   13188:	mov	r2, sp
   1318c:	lsr	r1, r3, #24
   13190:	lsl	r0, r3, #8
   13194:	orr	r1, r1, r3, lsl #24
   13198:	and	r0, r0, #16711680	; 0xff0000
   1319c:	lsr	r3, r3, #8
   131a0:	orr	r1, r1, r0
   131a4:	and	r3, r3, #65280	; 0xff00
   131a8:	orr	r1, r1, r3
   131ac:	mov	r0, r9
   131b0:	bl	12800 <__assert_fail@plt+0x1d3c>
   131b4:	cmp	r0, #0
   131b8:	strne	r0, [r7]
   131bc:	beq	1324c <__assert_fail@plt+0x2788>
   131c0:	ldr	r3, [r9, #20]
   131c4:	lsr	r2, r3, #24
   131c8:	lsl	r1, r3, #8
   131cc:	orr	r2, r2, r3, lsl #24
   131d0:	and	r1, r1, #16711680	; 0xff0000
   131d4:	lsr	r3, r3, #8
   131d8:	orr	r2, r2, r1
   131dc:	and	r3, r3, #65280	; 0xff00
   131e0:	orr	r3, r2, r3
   131e4:	cmp	r3, #15
   131e8:	bls	1320c <__assert_fail@plt+0x2748>
   131ec:	add	r6, r6, #12
   131f0:	ldr	r2, [sp, #4]
   131f4:	ldr	r3, [r4]
   131f8:	mov	r0, r6
   131fc:	cmp	r2, r3
   13200:	bne	13260 <__assert_fail@plt+0x279c>
   13204:	add	sp, sp, #12
   13208:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1320c:	add	r5, r5, #12
   13210:	tst	r5, #7
   13214:	beq	131ec <__assert_fail@plt+0x2728>
   13218:	ldr	r3, [r6, #4]
   1321c:	lsr	r2, r3, #24
   13220:	lsl	r1, r3, #8
   13224:	orr	r2, r2, r3, lsl #24
   13228:	and	r1, r1, #16711680	; 0xff0000
   1322c:	lsr	r3, r3, #8
   13230:	orr	r2, r2, r1
   13234:	and	r3, r3, #65280	; 0xff00
   13238:	orr	r3, r2, r3
   1323c:	cmp	r3, #7
   13240:	addhi	r6, r6, #16
   13244:	bls	131ec <__assert_fail@plt+0x2728>
   13248:	b	131f0 <__assert_fail@plt+0x272c>
   1324c:	cmp	r8, #0
   13250:	mov	r6, #0
   13254:	ldrne	r3, [sp]
   13258:	strne	r3, [r8]
   1325c:	b	131f0 <__assert_fail@plt+0x272c>
   13260:	bl	10980 <__stack_chk_fail@plt>
   13264:	andeq	r3, r1, r4, lsl #28
   13268:	muleq	r0, ip, r0
   1326c:	push	{r4, r5, r6, r7, lr}
   13270:	mov	r5, r0
   13274:	sub	sp, sp, #12
   13278:	mov	r0, r2
   1327c:	mov	r7, r3
   13280:	mov	r4, r2
   13284:	mov	r6, r1
   13288:	bl	10a10 <strlen@plt>
   1328c:	str	r7, [sp]
   13290:	mov	r2, r4
   13294:	mov	r1, r6
   13298:	mov	r3, r0
   1329c:	mov	r0, r5
   132a0:	bl	13060 <__assert_fail@plt+0x259c>
   132a4:	add	sp, sp, #12
   132a8:	pop	{r4, r5, r6, r7, pc}
   132ac:	ldr	ip, [pc, #188]	; 13370 <__assert_fail@plt+0x28ac>
   132b0:	ldr	r2, [pc, #188]	; 13374 <__assert_fail@plt+0x28b0>
   132b4:	add	ip, pc, ip
   132b8:	push	{r4, r5, r6, r7, lr}
   132bc:	sub	sp, sp, #12
   132c0:	ldr	r4, [ip, r2]
   132c4:	ldr	r2, [pc, #172]	; 13378 <__assert_fail@plt+0x28b4>
   132c8:	mov	r5, sp
   132cc:	ldr	ip, [r4]
   132d0:	mov	r3, r5
   132d4:	add	r2, pc, r2
   132d8:	mov	r6, r0
   132dc:	mov	r7, r1
   132e0:	str	ip, [sp, #4]
   132e4:	bl	1326c <__assert_fail@plt+0x27a8>
   132e8:	cmp	r0, #0
   132ec:	beq	132fc <__assert_fail@plt+0x2838>
   132f0:	ldr	r3, [sp]
   132f4:	cmp	r3, #4
   132f8:	beq	13344 <__assert_fail@plt+0x2880>
   132fc:	ldr	r2, [pc, #120]	; 1337c <__assert_fail@plt+0x28b8>
   13300:	mov	r3, r5
   13304:	mov	r1, r7
   13308:	mov	r0, r6
   1330c:	add	r2, pc, r2
   13310:	bl	1326c <__assert_fail@plt+0x27a8>
   13314:	cmp	r0, #0
   13318:	beq	1332c <__assert_fail@plt+0x2868>
   1331c:	ldr	r3, [sp]
   13320:	cmp	r3, #4
   13324:	movne	r0, #0
   13328:	beq	13344 <__assert_fail@plt+0x2880>
   1332c:	ldr	r2, [sp, #4]
   13330:	ldr	r3, [r4]
   13334:	cmp	r2, r3
   13338:	bne	1336c <__assert_fail@plt+0x28a8>
   1333c:	add	sp, sp, #12
   13340:	pop	{r4, r5, r6, r7, pc}
   13344:	ldr	r3, [r0]
   13348:	lsr	r0, r3, #24
   1334c:	lsl	r2, r3, #8
   13350:	orr	r0, r0, r3, lsl #24
   13354:	and	r2, r2, #16711680	; 0xff0000
   13358:	lsr	r3, r3, #8
   1335c:	orr	r0, r0, r2
   13360:	and	r3, r3, #65280	; 0xff00
   13364:	orr	r0, r0, r3
   13368:	b	1332c <__assert_fail@plt+0x2868>
   1336c:	bl	10980 <__stack_chk_fail@plt>
   13370:	muleq	r1, r0, ip
   13374:	muleq	r0, ip, r0
   13378:	andeq	r3, r0, r8, lsl #2
   1337c:	ldrdeq	r3, [r0], -r8
   13380:	push	{r4, r5, r6, lr}
   13384:	mov	r2, #0
   13388:	mvn	r1, #0
   1338c:	mov	r6, r0
   13390:	bl	1584c <__assert_fail@plt+0x4d88>
   13394:	cmn	r0, #1
   13398:	beq	13404 <__assert_fail@plt+0x2940>
   1339c:	cmp	r0, #0
   133a0:	mov	r4, r0
   133a4:	movge	r5, #0
   133a8:	bge	133b8 <__assert_fail@plt+0x28f4>
   133ac:	b	133f8 <__assert_fail@plt+0x2934>
   133b0:	cmp	r4, #0
   133b4:	blt	133f8 <__assert_fail@plt+0x2934>
   133b8:	mov	r1, r4
   133bc:	mov	r0, r6
   133c0:	bl	132ac <__assert_fail@plt+0x27e8>
   133c4:	mov	r1, r4
   133c8:	mov	r2, #0
   133cc:	cmn	r0, #1
   133d0:	cmpne	r0, r5
   133d4:	mov	r3, r0
   133d8:	mov	r0, r6
   133dc:	movhi	r5, r3
   133e0:	bl	1584c <__assert_fail@plt+0x4d88>
   133e4:	cmn	r0, #1
   133e8:	mov	r4, r0
   133ec:	bne	133b0 <__assert_fail@plt+0x28ec>
   133f0:	mov	r0, r5
   133f4:	pop	{r4, r5, r6, pc}
   133f8:	mvn	r5, #0
   133fc:	mov	r0, r5
   13400:	pop	{r4, r5, r6, pc}
   13404:	mov	r5, #0
   13408:	b	133f0 <__assert_fail@plt+0x292c>
   1340c:	push	{r4, r5, r6, lr}
   13410:	mov	r5, r1
   13414:	ldr	r1, [pc, #60]	; 13458 <__assert_fail@plt+0x2994>
   13418:	sub	sp, sp, #8
   1341c:	add	r1, pc, r1
   13420:	mov	r6, r2
   13424:	mov	r4, r0
   13428:	bl	13560 <__assert_fail@plt+0x2a9c>
   1342c:	subs	r1, r0, #0
   13430:	movlt	r0, #0
   13434:	blt	13450 <__assert_fail@plt+0x298c>
   13438:	mov	ip, #0
   1343c:	mov	r3, r6
   13440:	mov	r2, r5
   13444:	mov	r0, r4
   13448:	str	ip, [sp]
   1344c:	bl	13060 <__assert_fail@plt+0x259c>
   13450:	add	sp, sp, #8
   13454:	pop	{r4, r5, r6, pc}
   13458:	ldrdeq	r2, [r0], -r8
   1345c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13460:	mov	r4, r1
   13464:	mov	r5, r2
   13468:	mov	r8, r0
   1346c:	bl	151e8 <__assert_fail@plt+0x4724>
   13470:	subs	r7, r0, #0
   13474:	bne	13530 <__assert_fail@plt+0x2a6c>
   13478:	ldrb	r3, [r4]
   1347c:	add	r6, r4, r5
   13480:	cmp	r3, #47	; 0x2f
   13484:	beq	134cc <__assert_fail@plt+0x2a08>
   13488:	mov	r2, r5
   1348c:	mov	r1, #47	; 0x2f
   13490:	mov	r0, r4
   13494:	bl	10a88 <memchr@plt>
   13498:	mov	r1, r4
   1349c:	subs	r7, r0, #0
   134a0:	subne	r5, r7, r4
   134a4:	mov	r2, r5
   134a8:	mov	r0, r8
   134ac:	moveq	r7, r6
   134b0:	bl	1340c <__assert_fail@plt+0x2948>
   134b4:	subs	r1, r0, #0
   134b8:	beq	13558 <__assert_fail@plt+0x2a94>
   134bc:	mov	r0, r8
   134c0:	bl	13560 <__assert_fail@plt+0x2a9c>
   134c4:	mov	r4, r7
   134c8:	mov	r7, r0
   134cc:	cmp	r6, r4
   134d0:	bls	13530 <__assert_fail@plt+0x2a6c>
   134d4:	mov	r1, r4
   134d8:	b	134e4 <__assert_fail@plt+0x2a20>
   134dc:	cmp	r6, r1
   134e0:	beq	13530 <__assert_fail@plt+0x2a6c>
   134e4:	mov	r5, r1
   134e8:	add	r1, r1, #1
   134ec:	ldrb	r3, [r5]
   134f0:	cmp	r3, #47	; 0x2f
   134f4:	beq	134dc <__assert_fail@plt+0x2a18>
   134f8:	sub	r9, r6, r5
   134fc:	mov	r2, r9
   13500:	mov	r1, #47	; 0x2f
   13504:	mov	r0, r5
   13508:	bl	10a88 <memchr@plt>
   1350c:	subs	r4, r0, #0
   13510:	beq	13538 <__assert_fail@plt+0x2a74>
   13514:	mov	r1, r7
   13518:	sub	r3, r4, r5
   1351c:	mov	r2, r5
   13520:	mov	r0, r8
   13524:	bl	12cc0 <__assert_fail@plt+0x21fc>
   13528:	subs	r7, r0, #0
   1352c:	bge	134cc <__assert_fail@plt+0x2a08>
   13530:	mov	r0, r7
   13534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13538:	mov	r1, r7
   1353c:	mov	r3, r9
   13540:	mov	r2, r5
   13544:	mov	r0, r8
   13548:	bl	12cc0 <__assert_fail@plt+0x21fc>
   1354c:	mov	r7, r0
   13550:	mov	r0, r7
   13554:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13558:	mvn	r7, #4
   1355c:	b	13530 <__assert_fail@plt+0x2a6c>
   13560:	push	{r4, r5, r6, lr}
   13564:	mov	r5, r0
   13568:	mov	r0, r1
   1356c:	mov	r4, r1
   13570:	bl	10a10 <strlen@plt>
   13574:	mov	r1, r4
   13578:	mov	r2, r0
   1357c:	mov	r0, r5
   13580:	pop	{r4, r5, r6, lr}
   13584:	b	1345c <__assert_fail@plt+0x2998>
   13588:	push	{r4, r5, r6, lr}
   1358c:	mov	r5, r0
   13590:	mov	r0, r1
   13594:	mov	r4, r1
   13598:	bl	10a10 <strlen@plt>
   1359c:	mov	r1, r4
   135a0:	mov	r2, r0
   135a4:	mov	r0, r5
   135a8:	pop	{r4, r5, r6, lr}
   135ac:	b	1340c <__assert_fail@plt+0x2948>
   135b0:	ldr	ip, [pc, #416]	; 13758 <__assert_fail@plt+0x2c94>
   135b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b8:	add	ip, pc, ip
   135bc:	ldr	lr, [pc, #408]	; 1375c <__assert_fail@plt+0x2c98>
   135c0:	mov	r8, r1
   135c4:	sub	sp, sp, #36	; 0x24
   135c8:	ldr	r1, [ip, lr]
   135cc:	mov	r4, r3
   135d0:	str	r3, [sp]
   135d4:	ldr	r3, [r1]
   135d8:	mov	r6, r2
   135dc:	str	r1, [sp, #8]
   135e0:	mov	r2, ip
   135e4:	mov	r9, r0
   135e8:	str	r3, [sp, #28]
   135ec:	bl	151e8 <__assert_fail@plt+0x4724>
   135f0:	subs	fp, r0, #0
   135f4:	bne	13704 <__assert_fail@plt+0x2c40>
   135f8:	cmp	r4, #1
   135fc:	ble	13750 <__assert_fail@plt+0x2c8c>
   13600:	cmp	r8, #0
   13604:	str	fp, [sp, #20]
   13608:	blt	13748 <__assert_fail@plt+0x2c84>
   1360c:	mov	r0, fp
   13610:	mov	r7, fp
   13614:	mov	r4, fp
   13618:	mov	r5, fp
   1361c:	add	sl, sp, #20
   13620:	add	r3, sp, #24
   13624:	str	r3, [sp, #4]
   13628:	cmp	r0, r5
   1362c:	ble	13694 <__assert_fail@plt+0x2bd0>
   13630:	cmp	r7, r8
   13634:	beq	136e8 <__assert_fail@plt+0x2c24>
   13638:	mov	r1, r7
   1363c:	mov	r2, sl
   13640:	mov	r0, r9
   13644:	bl	1584c <__assert_fail@plt+0x4d88>
   13648:	cmp	r0, #0
   1364c:	cmpge	r8, r0
   13650:	mov	r7, r0
   13654:	blt	13724 <__assert_fail@plt+0x2c60>
   13658:	ldr	r0, [sp, #20]
   1365c:	cmp	r5, r0
   13660:	ble	13628 <__assert_fail@plt+0x2b64>
   13664:	rsb	r1, r6, #1
   13668:	sub	r3, r4, #2
   1366c:	add	r3, r6, r3
   13670:	add	r4, r1, r3
   13674:	ldrb	r2, [r3], #-1
   13678:	cmp	r2, #47	; 0x2f
   1367c:	bne	13670 <__assert_fail@plt+0x2bac>
   13680:	sub	r5, r5, #1
   13684:	cmp	r5, r0
   13688:	bne	13668 <__assert_fail@plt+0x2ba4>
   1368c:	cmp	r0, r5
   13690:	bgt	13630 <__assert_fail@plt+0x2b6c>
   13694:	mov	r1, r7
   13698:	ldr	r2, [sp, #4]
   1369c:	mov	r0, r9
   136a0:	bl	12be0 <__assert_fail@plt+0x211c>
   136a4:	subs	r1, r0, #0
   136a8:	beq	1373c <__assert_fail@plt+0x2c78>
   136ac:	ldr	r2, [sp, #24]
   136b0:	ldr	r0, [sp]
   136b4:	add	r3, r2, r4
   136b8:	cmp	r3, r0
   136bc:	bge	13630 <__assert_fail@plt+0x2b6c>
   136c0:	add	r0, r6, r4
   136c4:	str	r3, [sp, #12]
   136c8:	add	r4, r3, #1
   136cc:	bl	10968 <memcpy@plt>
   136d0:	ldr	r3, [sp, #12]
   136d4:	mov	r2, #47	; 0x2f
   136d8:	cmp	r7, r8
   136dc:	add	r5, r5, #1
   136e0:	strb	r2, [r6, r3]
   136e4:	bne	13638 <__assert_fail@plt+0x2b74>
   136e8:	ldr	r3, [sp, #20]
   136ec:	cmp	r3, r5
   136f0:	bge	13750 <__assert_fail@plt+0x2c8c>
   136f4:	cmp	r4, #1
   136f8:	subgt	r4, r4, #1
   136fc:	mov	r3, #0
   13700:	strb	r3, [r6, r4]
   13704:	ldr	r3, [sp, #8]
   13708:	ldr	r2, [sp, #28]
   1370c:	mov	r0, fp
   13710:	ldr	r3, [r3]
   13714:	cmp	r2, r3
   13718:	bne	13744 <__assert_fail@plt+0x2c80>
   1371c:	add	sp, sp, #36	; 0x24
   13720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13724:	cmn	r0, #1
   13728:	bge	13748 <__assert_fail@plt+0x2c84>
   1372c:	cmn	r0, #4
   13730:	movne	fp, r0
   13734:	mvneq	fp, #10
   13738:	b	13704 <__assert_fail@plt+0x2c40>
   1373c:	ldr	fp, [sp, #24]
   13740:	b	13704 <__assert_fail@plt+0x2c40>
   13744:	bl	10980 <__stack_chk_fail@plt>
   13748:	mvn	fp, #3
   1374c:	b	13704 <__assert_fail@plt+0x2c40>
   13750:	mvn	fp, #2
   13754:	b	13704 <__assert_fail@plt+0x2c40>
   13758:	andeq	r3, r1, ip, lsl #19
   1375c:	muleq	r0, ip, r0
   13760:	ldr	ip, [pc, #224]	; 13848 <__assert_fail@plt+0x2d84>
   13764:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13768:	add	ip, pc, ip
   1376c:	ldr	lr, [pc, #216]	; 1384c <__assert_fail@plt+0x2d88>
   13770:	sub	sp, sp, #8
   13774:	mov	sl, r3
   13778:	ldr	r9, [ip, lr]
   1377c:	mov	r4, r1
   13780:	mov	r6, r2
   13784:	ldr	r3, [r9]
   13788:	mov	r2, ip
   1378c:	mov	r7, r0
   13790:	str	r3, [sp, #4]
   13794:	bl	151e8 <__assert_fail@plt+0x4724>
   13798:	cmp	r0, #0
   1379c:	bne	13808 <__assert_fail@plt+0x2d44>
   137a0:	cmp	r6, #0
   137a4:	blt	1383c <__assert_fail@plt+0x2d78>
   137a8:	cmp	r4, #0
   137ac:	str	r0, [sp]
   137b0:	movge	r3, r0
   137b4:	mvnge	r5, #12
   137b8:	movge	r8, sp
   137bc:	bge	137e4 <__assert_fail@plt+0x2d20>
   137c0:	b	13834 <__assert_fail@plt+0x2d70>
   137c4:	mov	r1, r0
   137c8:	mov	r2, r8
   137cc:	mov	r0, r7
   137d0:	bl	1584c <__assert_fail@plt+0x4d88>
   137d4:	cmp	r0, #0
   137d8:	cmpge	r4, r0
   137dc:	blt	13820 <__assert_fail@plt+0x2d5c>
   137e0:	ldr	r3, [sp]
   137e4:	cmp	r6, r3
   137e8:	moveq	r5, r0
   137ec:	cmp	r4, r0
   137f0:	bne	137c4 <__assert_fail@plt+0x2d00>
   137f4:	cmp	sl, #0
   137f8:	strne	r3, [sl]
   137fc:	cmp	r6, r3
   13800:	movle	r0, r5
   13804:	mvngt	r0, #0
   13808:	ldr	r2, [sp, #4]
   1380c:	ldr	r3, [r9]
   13810:	cmp	r2, r3
   13814:	bne	13844 <__assert_fail@plt+0x2d80>
   13818:	add	sp, sp, #8
   1381c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13820:	cmn	r0, #1
   13824:	bge	13834 <__assert_fail@plt+0x2d70>
   13828:	cmn	r0, #4
   1382c:	mvneq	r0, #10
   13830:	b	13808 <__assert_fail@plt+0x2d44>
   13834:	mvn	r0, #3
   13838:	b	13808 <__assert_fail@plt+0x2d44>
   1383c:	mvn	r0, #0
   13840:	b	13808 <__assert_fail@plt+0x2d44>
   13844:	bl	10980 <__stack_chk_fail@plt>
   13848:	ldrdeq	r3, [r1], -ip
   1384c:	muleq	r0, ip, r0
   13850:	ldr	ip, [pc, #80]	; 138a8 <__assert_fail@plt+0x2de4>
   13854:	push	{r4, lr}
   13858:	add	ip, pc, ip
   1385c:	ldr	lr, [pc, #72]	; 138ac <__assert_fail@plt+0x2de8>
   13860:	sub	sp, sp, #8
   13864:	mov	r3, sp
   13868:	ldr	r4, [ip, lr]
   1386c:	mov	r2, #0
   13870:	ldr	ip, [r4]
   13874:	str	ip, [sp, #4]
   13878:	bl	13760 <__assert_fail@plt+0x2c9c>
   1387c:	cmp	r0, #0
   13880:	ldreq	r0, [sp]
   13884:	beq	1388c <__assert_fail@plt+0x2dc8>
   13888:	mvnge	r0, #12
   1388c:	ldr	r2, [sp, #4]
   13890:	ldr	r3, [r4]
   13894:	cmp	r2, r3
   13898:	bne	138a4 <__assert_fail@plt+0x2de0>
   1389c:	add	sp, sp, #8
   138a0:	pop	{r4, pc}
   138a4:	bl	10980 <__stack_chk_fail@plt>
   138a8:	andeq	r3, r1, ip, ror #13
   138ac:	muleq	r0, ip, r0
   138b0:	push	{r4, r5, r6, lr}
   138b4:	mov	r4, r0
   138b8:	mov	r5, r1
   138bc:	bl	13850 <__assert_fail@plt+0x2d8c>
   138c0:	subs	r2, r0, #0
   138c4:	poplt	{r4, r5, r6, pc}
   138c8:	mov	r1, r5
   138cc:	mov	r0, r4
   138d0:	sub	r2, r2, #1
   138d4:	mov	r3, #0
   138d8:	pop	{r4, r5, r6, lr}
   138dc:	b	13760 <__assert_fail@plt+0x2c9c>
   138e0:	ldr	ip, [pc, #212]	; 139bc <__assert_fail@plt+0x2ef8>
   138e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138e8:	add	ip, pc, ip
   138ec:	ldr	lr, [pc, #204]	; 139c0 <__assert_fail@plt+0x2efc>
   138f0:	sub	sp, sp, #8
   138f4:	mov	sl, r3
   138f8:	ldr	r9, [ip, lr]
   138fc:	mov	r8, r1
   13900:	mov	r7, r2
   13904:	ldr	r3, [r9]
   13908:	mov	r2, ip
   1390c:	mov	r5, r0
   13910:	ldr	r6, [sp, #40]	; 0x28
   13914:	str	r3, [sp, #4]
   13918:	bl	151e8 <__assert_fail@plt+0x4724>
   1391c:	subs	r4, r0, #0
   13920:	beq	13940 <__assert_fail@plt+0x2e7c>
   13924:	ldr	r2, [sp, #4]
   13928:	ldr	r3, [r9]
   1392c:	mov	r0, r4
   13930:	cmp	r2, r3
   13934:	bne	139b8 <__assert_fail@plt+0x2ef4>
   13938:	add	sp, sp, #8
   1393c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13940:	mov	r2, r4
   13944:	mov	r1, r8
   13948:	mov	r0, r5
   1394c:	bl	1584c <__assert_fail@plt+0x4d88>
   13950:	subs	r4, r0, #0
   13954:	blt	13924 <__assert_fail@plt+0x2e60>
   13958:	mov	r8, sp
   1395c:	b	13978 <__assert_fail@plt+0x2eb4>
   13960:	mov	r1, r4
   13964:	mov	r2, #0
   13968:	mov	r0, r5
   1396c:	bl	1584c <__assert_fail@plt+0x4d88>
   13970:	subs	r4, r0, #0
   13974:	blt	13924 <__assert_fail@plt+0x2e60>
   13978:	mov	r3, r8
   1397c:	mov	r2, r7
   13980:	mov	r1, r4
   13984:	mov	r0, r5
   13988:	bl	1326c <__assert_fail@plt+0x27a8>
   1398c:	cmp	r0, #0
   13990:	beq	13960 <__assert_fail@plt+0x2e9c>
   13994:	ldr	r3, [sp]
   13998:	cmp	r3, r6
   1399c:	bne	13960 <__assert_fail@plt+0x2e9c>
   139a0:	mov	r2, r6
   139a4:	mov	r1, sl
   139a8:	bl	10974 <memcmp@plt>
   139ac:	cmp	r0, #0
   139b0:	bne	13960 <__assert_fail@plt+0x2e9c>
   139b4:	b	13924 <__assert_fail@plt+0x2e60>
   139b8:	bl	10980 <__stack_chk_fail@plt>
   139bc:	andeq	r3, r1, ip, asr r6
   139c0:	muleq	r0, ip, r0
   139c4:	sub	r3, r1, #1
   139c8:	cmn	r3, #3
   139cc:	push	{r4, r5, r6, lr}
   139d0:	bhi	13a34 <__assert_fail@plt+0x2f70>
   139d4:	mov	r5, r0
   139d8:	mov	r6, r1
   139dc:	bl	151e8 <__assert_fail@plt+0x4724>
   139e0:	subs	r4, r0, #0
   139e4:	beq	139f0 <__assert_fail@plt+0x2f2c>
   139e8:	mov	r0, r4
   139ec:	pop	{r4, r5, r6, pc}
   139f0:	mov	r2, r4
   139f4:	mvn	r1, #0
   139f8:	mov	r0, r5
   139fc:	b	13a20 <__assert_fail@plt+0x2f5c>
   13a00:	mov	r1, r4
   13a04:	mov	r0, r5
   13a08:	bl	132ac <__assert_fail@plt+0x27e8>
   13a0c:	mov	r1, r4
   13a10:	mov	r2, #0
   13a14:	cmp	r0, r6
   13a18:	mov	r0, r5
   13a1c:	beq	139e8 <__assert_fail@plt+0x2f24>
   13a20:	bl	1584c <__assert_fail@plt+0x4d88>
   13a24:	subs	r4, r0, #0
   13a28:	bge	13a00 <__assert_fail@plt+0x2f3c>
   13a2c:	mov	r0, r4
   13a30:	pop	{r4, r5, r6, pc}
   13a34:	mvn	r4, #5
   13a38:	b	139e8 <__assert_fail@plt+0x2f24>
   13a3c:	push	{r4, r5, r6, r7, r8, lr}
   13a40:	mov	r4, r0
   13a44:	mov	r0, r2
   13a48:	mov	r5, r1
   13a4c:	mov	r7, r2
   13a50:	bl	10a10 <strlen@plt>
   13a54:	cmp	r0, r5
   13a58:	bgt	13ab8 <__assert_fail@plt+0x2ff4>
   13a5c:	mov	r6, r0
   13a60:	add	r8, r0, #1
   13a64:	b	13a8c <__assert_fail@plt+0x2fc8>
   13a68:	bl	10a88 <memchr@plt>
   13a6c:	cmp	r0, #0
   13a70:	sub	r4, r0, r4
   13a74:	add	r4, r4, #1
   13a78:	sub	r5, r5, r4
   13a7c:	popeq	{r4, r5, r6, r7, r8, pc}
   13a80:	cmp	r6, r5
   13a84:	add	r4, r0, #1
   13a88:	bgt	13ab8 <__assert_fail@plt+0x2ff4>
   13a8c:	mov	r2, r8
   13a90:	mov	r1, r4
   13a94:	mov	r0, r7
   13a98:	bl	10974 <memcmp@plt>
   13a9c:	mov	r1, #0
   13aa0:	mov	r2, r5
   13aa4:	cmp	r0, r1
   13aa8:	mov	r0, r4
   13aac:	bne	13a68 <__assert_fail@plt+0x2fa4>
   13ab0:	mov	r0, #1
   13ab4:	pop	{r4, r5, r6, r7, r8, pc}
   13ab8:	mov	r0, #0
   13abc:	pop	{r4, r5, r6, r7, r8, pc}
   13ac0:	ldr	ip, [pc, #144]	; 13b58 <__assert_fail@plt+0x3094>
   13ac4:	push	{r4, r5, r6, r7, lr}
   13ac8:	add	ip, pc, ip
   13acc:	ldr	lr, [pc, #136]	; 13b5c <__assert_fail@plt+0x3098>
   13ad0:	sub	sp, sp, #12
   13ad4:	mov	r3, sp
   13ad8:	ldr	r7, [ip, lr]
   13adc:	ldr	ip, [r7]
   13ae0:	str	ip, [sp, #4]
   13ae4:	bl	1326c <__assert_fail@plt+0x27a8>
   13ae8:	subs	r4, r0, #0
   13aec:	ldreq	r6, [sp]
   13af0:	beq	13b38 <__assert_fail@plt+0x3074>
   13af4:	ldr	r5, [sp]
   13af8:	mov	r6, #0
   13afc:	add	r5, r4, r5
   13b00:	cmp	r4, r5
   13b04:	bcc	13b14 <__assert_fail@plt+0x3050>
   13b08:	b	13b38 <__assert_fail@plt+0x3074>
   13b0c:	add	r6, r6, #1
   13b10:	bcs	13b38 <__assert_fail@plt+0x3074>
   13b14:	sub	r1, r5, r4
   13b18:	mov	r0, r4
   13b1c:	bl	10a94 <strnlen@plt>
   13b20:	add	r0, r0, #1
   13b24:	add	r4, r4, r0
   13b28:	cmp	r4, r5
   13b2c:	str	r0, [sp]
   13b30:	bls	13b0c <__assert_fail@plt+0x3048>
   13b34:	mvn	r6, #14
   13b38:	ldr	r2, [sp, #4]
   13b3c:	ldr	r3, [r7]
   13b40:	mov	r0, r6
   13b44:	cmp	r2, r3
   13b48:	bne	13b54 <__assert_fail@plt+0x3090>
   13b4c:	add	sp, sp, #12
   13b50:	pop	{r4, r5, r6, r7, pc}
   13b54:	bl	10980 <__stack_chk_fail@plt>
   13b58:	andeq	r3, r1, ip, ror r4
   13b5c:	muleq	r0, ip, r0
   13b60:	ldr	ip, [pc, #212]	; 13c3c <__assert_fail@plt+0x3178>
   13b64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b68:	add	ip, pc, ip
   13b6c:	ldr	lr, [pc, #204]	; 13c40 <__assert_fail@plt+0x317c>
   13b70:	sub	sp, sp, #8
   13b74:	mov	r8, r3
   13b78:	ldr	r9, [ip, lr]
   13b7c:	mov	r3, sp
   13b80:	ldr	ip, [r9]
   13b84:	str	ip, [sp, #4]
   13b88:	bl	1326c <__assert_fail@plt+0x27a8>
   13b8c:	subs	r4, r0, #0
   13b90:	ldreq	r7, [sp]
   13b94:	beq	13c0c <__assert_fail@plt+0x3148>
   13b98:	mov	r0, r8
   13b9c:	bl	10a10 <strlen@plt>
   13ba0:	ldr	r5, [sp]
   13ba4:	add	r5, r4, r5
   13ba8:	cmp	r4, r5
   13bac:	add	sl, r0, #1
   13bb0:	bcs	13c28 <__assert_fail@plt+0x3164>
   13bb4:	mov	r7, #0
   13bb8:	b	13bcc <__assert_fail@plt+0x3108>
   13bbc:	cmp	r6, r5
   13bc0:	mov	r4, r6
   13bc4:	add	r7, r7, #1
   13bc8:	bcs	13c28 <__assert_fail@plt+0x3164>
   13bcc:	sub	r1, r5, r4
   13bd0:	mov	r0, r4
   13bd4:	bl	10a94 <strnlen@plt>
   13bd8:	add	r0, r0, #1
   13bdc:	add	r6, r4, r0
   13be0:	cmp	r6, r5
   13be4:	str	r0, [sp]
   13be8:	bhi	13c30 <__assert_fail@plt+0x316c>
   13bec:	cmp	r0, sl
   13bf0:	bne	13bbc <__assert_fail@plt+0x30f8>
   13bf4:	mov	r0, r4
   13bf8:	mov	r2, sl
   13bfc:	mov	r1, r8
   13c00:	bl	10974 <memcmp@plt>
   13c04:	cmp	r0, #0
   13c08:	bne	13bbc <__assert_fail@plt+0x30f8>
   13c0c:	ldr	r2, [sp, #4]
   13c10:	ldr	r3, [r9]
   13c14:	mov	r0, r7
   13c18:	cmp	r2, r3
   13c1c:	bne	13c38 <__assert_fail@plt+0x3174>
   13c20:	add	sp, sp, #8
   13c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c28:	mvn	r7, #0
   13c2c:	b	13c0c <__assert_fail@plt+0x3148>
   13c30:	mvn	r7, #14
   13c34:	b	13c0c <__assert_fail@plt+0x3148>
   13c38:	bl	10980 <__stack_chk_fail@plt>
   13c3c:	ldrdeq	r3, [r1], -ip
   13c40:	muleq	r0, ip, r0
   13c44:	ldr	ip, [pc, #228]	; 13d30 <__assert_fail@plt+0x326c>
   13c48:	push	{r4, r5, r6, r7, r8, lr}
   13c4c:	add	ip, pc, ip
   13c50:	ldr	lr, [pc, #220]	; 13d34 <__assert_fail@plt+0x3270>
   13c54:	sub	sp, sp, #8
   13c58:	mov	r6, r3
   13c5c:	ldr	r7, [ip, lr]
   13c60:	mov	r3, sp
   13c64:	ldr	r8, [sp, #32]
   13c68:	ldr	ip, [r7]
   13c6c:	str	ip, [sp, #4]
   13c70:	bl	1326c <__assert_fail@plt+0x27a8>
   13c74:	subs	r4, r0, #0
   13c78:	beq	13d18 <__assert_fail@plt+0x3254>
   13c7c:	ldr	r5, [sp]
   13c80:	add	r5, r4, r5
   13c84:	cmp	r4, r5
   13c88:	bcc	13ca8 <__assert_fail@plt+0x31e4>
   13c8c:	b	13cf4 <__assert_fail@plt+0x3230>
   13c90:	cmp	r6, #0
   13c94:	beq	13d0c <__assert_fail@plt+0x3248>
   13c98:	cmp	r2, r5
   13c9c:	mov	r4, r2
   13ca0:	sub	r6, r6, #1
   13ca4:	bcs	13cf4 <__assert_fail@plt+0x3230>
   13ca8:	sub	r1, r5, r4
   13cac:	mov	r0, r4
   13cb0:	bl	10a94 <strnlen@plt>
   13cb4:	add	r3, r0, #1
   13cb8:	add	r2, r4, r3
   13cbc:	cmp	r2, r5
   13cc0:	str	r3, [sp]
   13cc4:	bls	13c90 <__assert_fail@plt+0x31cc>
   13cc8:	cmp	r8, #0
   13ccc:	mvnne	r3, #14
   13cd0:	strne	r3, [r8]
   13cd4:	mov	r4, #0
   13cd8:	ldr	r2, [sp, #4]
   13cdc:	ldr	r3, [r7]
   13ce0:	mov	r0, r4
   13ce4:	cmp	r2, r3
   13ce8:	bne	13d2c <__assert_fail@plt+0x3268>
   13cec:	add	sp, sp, #8
   13cf0:	pop	{r4, r5, r6, r7, r8, pc}
   13cf4:	cmp	r8, #0
   13cf8:	beq	13cd4 <__assert_fail@plt+0x3210>
   13cfc:	mvn	r3, #0
   13d00:	mov	r4, #0
   13d04:	str	r3, [r8]
   13d08:	b	13cd8 <__assert_fail@plt+0x3214>
   13d0c:	cmp	r8, #0
   13d10:	strne	r0, [r8]
   13d14:	b	13cd8 <__assert_fail@plt+0x3214>
   13d18:	cmp	r8, #0
   13d1c:	beq	13cd4 <__assert_fail@plt+0x3210>
   13d20:	ldr	r3, [sp]
   13d24:	str	r3, [r8]
   13d28:	b	13cd8 <__assert_fail@plt+0x3214>
   13d2c:	bl	10980 <__stack_chk_fail@plt>
   13d30:	strdeq	r3, [r1], -r8
   13d34:	muleq	r0, ip, r0
   13d38:	ldr	ip, [pc, #104]	; 13da8 <__assert_fail@plt+0x32e4>
   13d3c:	push	{r4, r5, lr}
   13d40:	add	ip, pc, ip
   13d44:	ldr	lr, [pc, #96]	; 13dac <__assert_fail@plt+0x32e8>
   13d48:	mov	r5, r2
   13d4c:	ldr	r2, [pc, #92]	; 13db0 <__assert_fail@plt+0x32ec>
   13d50:	ldr	r4, [ip, lr]
   13d54:	sub	sp, sp, #12
   13d58:	mov	r3, sp
   13d5c:	ldr	ip, [r4]
   13d60:	add	r2, pc, r2
   13d64:	str	ip, [sp, #4]
   13d68:	bl	1326c <__assert_fail@plt+0x27a8>
   13d6c:	cmp	r0, #0
   13d70:	ldreq	r0, [sp]
   13d74:	beq	13d8c <__assert_fail@plt+0x32c8>
   13d78:	mov	r2, r5
   13d7c:	ldr	r1, [sp]
   13d80:	bl	13a3c <__assert_fail@plt+0x2f78>
   13d84:	clz	r0, r0
   13d88:	lsr	r0, r0, #5
   13d8c:	ldr	r2, [sp, #4]
   13d90:	ldr	r3, [r4]
   13d94:	cmp	r2, r3
   13d98:	bne	13da4 <__assert_fail@plt+0x32e0>
   13d9c:	add	sp, sp, #12
   13da0:	pop	{r4, r5, pc}
   13da4:	bl	10980 <__stack_chk_fail@plt>
   13da8:	andeq	r3, r1, r4, lsl #4
   13dac:	muleq	r0, ip, r0
   13db0:	andeq	r2, r0, r0, lsr #13
   13db4:	push	{r4, r5, r6, lr}
   13db8:	mov	r4, r1
   13dbc:	mov	r6, r2
   13dc0:	mov	r5, r0
   13dc4:	bl	151e8 <__assert_fail@plt+0x4724>
   13dc8:	subs	r3, r0, #0
   13dcc:	beq	13dd8 <__assert_fail@plt+0x3314>
   13dd0:	mov	r0, r3
   13dd4:	pop	{r4, r5, r6, pc}
   13dd8:	mov	r2, r3
   13ddc:	mov	r1, r4
   13de0:	mov	r0, r5
   13de4:	b	13e18 <__assert_fail@plt+0x3354>
   13de8:	mov	r2, r6
   13dec:	mov	r1, r4
   13df0:	mov	r0, r5
   13df4:	bl	13d38 <__assert_fail@plt+0x3274>
   13df8:	mov	r1, r4
   13dfc:	mov	r2, #0
   13e00:	mov	r3, r0
   13e04:	cmn	r3, #1
   13e08:	mov	r0, r5
   13e0c:	blt	13dd0 <__assert_fail@plt+0x330c>
   13e10:	cmp	r3, r2
   13e14:	beq	13e24 <__assert_fail@plt+0x3360>
   13e18:	bl	1584c <__assert_fail@plt+0x4d88>
   13e1c:	subs	r4, r0, #0
   13e20:	bge	13de8 <__assert_fail@plt+0x3324>
   13e24:	mov	r3, r4
   13e28:	mov	r0, r3
   13e2c:	pop	{r4, r5, r6, pc}
   13e30:	ldr	r3, [pc, #380]	; 13fb4 <__assert_fail@plt+0x34f0>
   13e34:	ldr	r2, [pc, #380]	; 13fb8 <__assert_fail@plt+0x34f4>
   13e38:	add	r3, pc, r3
   13e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e40:	sub	sp, sp, #20
   13e44:	ldr	r5, [r3, r2]
   13e48:	cmp	r1, #27
   13e4c:	mov	r2, #0
   13e50:	ldr	r3, [r5]
   13e54:	str	r2, [sp, #4]
   13e58:	str	r3, [sp, #12]
   13e5c:	bls	13f98 <__assert_fail@plt+0x34d4>
   13e60:	mov	r7, r1
   13e64:	mov	r6, r0
   13e68:	bl	152fc <__assert_fail@plt+0x4838>
   13e6c:	cmp	r0, #0
   13e70:	mov	r4, r0
   13e74:	str	r0, [sp]
   13e78:	bne	13ebc <__assert_fail@plt+0x33f8>
   13e7c:	ldr	r3, [r6, #4]
   13e80:	lsr	r2, r3, #24
   13e84:	lsl	r1, r3, #8
   13e88:	orr	r2, r2, r3, lsl #24
   13e8c:	and	r1, r1, #16711680	; 0xff0000
   13e90:	lsr	r3, r3, #8
   13e94:	orr	r2, r2, r1
   13e98:	and	r3, r3, #65280	; 0xff00
   13e9c:	orr	r3, r2, r3
   13ea0:	cmp	r7, r3
   13ea4:	bcc	13f98 <__assert_fail@plt+0x34d4>
   13ea8:	mov	r0, r6
   13eac:	bl	12b0c <__assert_fail@plt+0x2048>
   13eb0:	cmp	r0, #0
   13eb4:	movlt	r4, r0
   13eb8:	bge	13ed8 <__assert_fail@plt+0x3414>
   13ebc:	ldr	r2, [sp, #12]
   13ec0:	ldr	r3, [r5]
   13ec4:	mov	r0, r4
   13ec8:	cmp	r2, r3
   13ecc:	bne	13fb0 <__assert_fail@plt+0x34ec>
   13ed0:	add	sp, sp, #20
   13ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed8:	ldr	fp, [sp, #4]
   13edc:	mov	r7, r4
   13ee0:	add	r8, sp, #4
   13ee4:	mov	sl, sp
   13ee8:	add	r9, sp, #8
   13eec:	mov	r2, r8
   13ef0:	mov	r1, fp
   13ef4:	mov	r0, r6
   13ef8:	bl	15654 <__assert_fail@plt+0x4b90>
   13efc:	ldr	r3, [sp, #4]
   13f00:	cmp	r3, #0
   13f04:	blt	13fa0 <__assert_fail@plt+0x34dc>
   13f08:	sub	r0, r0, #1
   13f0c:	cmp	r0, #8
   13f10:	addls	pc, pc, r0, lsl #2
   13f14:	b	13f90 <__assert_fail@plt+0x34cc>
   13f18:	b	13f80 <__assert_fail@plt+0x34bc>
   13f1c:	b	13f3c <__assert_fail@plt+0x3478>
   13f20:	b	13f5c <__assert_fail@plt+0x3498>
   13f24:	b	13f48 <__assert_fail@plt+0x3484>
   13f28:	b	13f90 <__assert_fail@plt+0x34cc>
   13f2c:	b	13f90 <__assert_fail@plt+0x34cc>
   13f30:	b	13f90 <__assert_fail@plt+0x34cc>
   13f34:	b	13f90 <__assert_fail@plt+0x34cc>
   13f38:	b	13f50 <__assert_fail@plt+0x348c>
   13f3c:	cmp	r7, #0
   13f40:	beq	13f88 <__assert_fail@plt+0x34c4>
   13f44:	sub	r7, r7, #1
   13f48:	mov	fp, r3
   13f4c:	b	13eec <__assert_fail@plt+0x3428>
   13f50:	cmp	r7, #0
   13f54:	mvnne	r4, #10
   13f58:	b	13ebc <__assert_fail@plt+0x33f8>
   13f5c:	mov	r1, fp
   13f60:	mov	r3, sl
   13f64:	mov	r2, r9
   13f68:	mov	r0, r6
   13f6c:	bl	13138 <__assert_fail@plt+0x2674>
   13f70:	cmp	r0, #0
   13f74:	beq	13fa8 <__assert_fail@plt+0x34e4>
   13f78:	ldr	r3, [sp, #4]
   13f7c:	b	13f48 <__assert_fail@plt+0x3484>
   13f80:	adds	r7, r7, #1
   13f84:	bpl	13f48 <__assert_fail@plt+0x3484>
   13f88:	mvn	r4, #10
   13f8c:	b	13ebc <__assert_fail@plt+0x33f8>
   13f90:	mvn	r4, #12
   13f94:	b	13ebc <__assert_fail@plt+0x33f8>
   13f98:	mvn	r4, #7
   13f9c:	b	13ebc <__assert_fail@plt+0x33f8>
   13fa0:	mov	r4, r3
   13fa4:	b	13ebc <__assert_fail@plt+0x33f8>
   13fa8:	ldr	r4, [sp]
   13fac:	b	13ebc <__assert_fail@plt+0x33f8>
   13fb0:	bl	10980 <__stack_chk_fail@plt>
   13fb4:	andeq	r3, r1, ip, lsl #2
   13fb8:	muleq	r0, ip, r0
   13fbc:	push	{lr}		; (str lr, [sp, #-4]!)
   13fc0:	ldr	r3, [r0, #16]
   13fc4:	lsr	ip, r3, #24
   13fc8:	lsl	lr, r3, #8
   13fcc:	orr	ip, ip, r3, lsl #24
   13fd0:	and	lr, lr, #16711680	; 0xff0000
   13fd4:	lsr	r3, r3, #8
   13fd8:	orr	ip, ip, lr
   13fdc:	and	r3, r3, #65280	; 0xff00
   13fe0:	orr	r3, ip, r3
   13fe4:	cmp	r3, #39	; 0x27
   13fe8:	bls	1401c <__assert_fail@plt+0x3558>
   13fec:	ldr	ip, [r0, #8]
   13ff0:	add	r3, r1, r3
   13ff4:	lsr	lr, ip, #24
   13ff8:	lsl	r1, ip, #8
   13ffc:	orr	lr, lr, ip, lsl #24
   14000:	and	r1, r1, #16711680	; 0xff0000
   14004:	lsr	ip, ip, #8
   14008:	orr	lr, lr, r1
   1400c:	and	ip, ip, #65280	; 0xff00
   14010:	orr	ip, lr, ip
   14014:	cmp	r3, ip
   14018:	bls	14024 <__assert_fail@plt+0x3560>
   1401c:	mov	r0, #1
   14020:	pop	{pc}		; (ldr pc, [sp], #4)
   14024:	ldr	r3, [r0, #12]
   14028:	add	ip, r2, ip
   1402c:	lsl	r1, r3, #8
   14030:	lsr	r2, r3, #24
   14034:	orr	r2, r2, r3, lsl #24
   14038:	and	r1, r1, #16711680	; 0xff0000
   1403c:	lsr	r3, r3, #8
   14040:	orr	r2, r2, r1
   14044:	and	r3, r3, #65280	; 0xff00
   14048:	orr	r3, r2, r3
   1404c:	cmp	ip, r3
   14050:	bhi	1401c <__assert_fail@plt+0x3558>
   14054:	ldr	r1, [r0, #32]
   14058:	ldr	r2, [r0, #4]
   1405c:	lsl	ip, r1, #8
   14060:	lsr	r0, r1, #24
   14064:	orr	r0, r0, r1, lsl #24
   14068:	and	ip, ip, #16711680	; 0xff0000
   1406c:	lsl	lr, r2, #8
   14070:	orr	r0, r0, ip
   14074:	lsr	r1, r1, #8
   14078:	lsr	ip, r2, #24
   1407c:	orr	ip, ip, r2, lsl #24
   14080:	and	r1, r1, #65280	; 0xff00
   14084:	and	lr, lr, #16711680	; 0xff0000
   14088:	lsr	r2, r2, #8
   1408c:	orr	r0, r0, r1
   14090:	and	r2, r2, #65280	; 0xff00
   14094:	orr	r1, ip, lr
   14098:	add	r0, r0, r3
   1409c:	orr	r2, r1, r2
   140a0:	cmp	r0, r2
   140a4:	movls	r0, #0
   140a8:	movhi	r0, #1
   140ac:	pop	{pc}		; (ldr pc, [sp], #4)
   140b0:	push	{r4, r5, r6, r7, r8, lr}
   140b4:	cmp	r2, #0
   140b8:	ldr	r4, [r0, #12]
   140bc:	ldr	lr, [r0, #32]
   140c0:	lsr	ip, r4, #24
   140c4:	lsl	r6, r4, #8
   140c8:	orr	ip, ip, r4, lsl #24
   140cc:	and	r6, r6, #16711680	; 0xff0000
   140d0:	lsr	r5, lr, #24
   140d4:	orr	ip, ip, r6
   140d8:	lsl	r6, lr, #8
   140dc:	orr	r5, r5, lr, lsl #24
   140e0:	lsr	r4, r4, #8
   140e4:	and	r6, r6, #16711680	; 0xff0000
   140e8:	lsr	lr, lr, #8
   140ec:	and	r4, r4, #65280	; 0xff00
   140f0:	orr	r5, r5, r6
   140f4:	and	lr, lr, #65280	; 0xff00
   140f8:	orr	ip, ip, r4
   140fc:	orr	lr, r5, lr
   14100:	add	ip, ip, lr
   14104:	add	ip, r0, ip
   14108:	blt	1418c <__assert_fail@plt+0x36c8>
   1410c:	add	r6, r1, r2
   14110:	cmp	r6, ip
   14114:	movls	r5, #0
   14118:	movhi	r5, #1
   1411c:	cmp	r1, r0
   14120:	orrcc	r5, r5, #1
   14124:	cmp	r5, #0
   14128:	bne	1418c <__assert_fail@plt+0x36c8>
   1412c:	sub	r7, r3, r2
   14130:	add	r7, ip, r7
   14134:	cmp	r7, r0
   14138:	bcc	1418c <__assert_fail@plt+0x36c8>
   1413c:	ldr	r4, [r0, #4]
   14140:	lsr	lr, r4, #24
   14144:	lsl	r8, r4, #8
   14148:	orr	lr, lr, r4, lsl #24
   1414c:	and	r8, r8, #16711680	; 0xff0000
   14150:	lsr	r4, r4, #8
   14154:	orr	lr, lr, r8
   14158:	and	r4, r4, #65280	; 0xff00
   1415c:	orr	r4, lr, r4
   14160:	add	lr, r0, r4
   14164:	cmp	r7, lr
   14168:	bhi	14194 <__assert_fail@plt+0x36d0>
   1416c:	sub	ip, ip, r1
   14170:	mov	r0, r1
   14174:	sub	r2, ip, r2
   14178:	mov	r1, r6
   1417c:	add	r0, r0, r3
   14180:	bl	10944 <memmove@plt>
   14184:	mov	r0, r5
   14188:	pop	{r4, r5, r6, r7, r8, pc}
   1418c:	mvn	r0, #3
   14190:	pop	{r4, r5, r6, r7, r8, pc}
   14194:	mvn	r0, #2
   14198:	pop	{r4, r5, r6, r7, r8, pc}
   1419c:	push	{r4, r5, r6, lr}
   141a0:	mov	r5, r2
   141a4:	mov	r6, r3
   141a8:	lsl	r2, r2, #4
   141ac:	lsl	r3, r3, #4
   141b0:	mov	r4, r0
   141b4:	bl	140b0 <__assert_fail@plt+0x35ec>
   141b8:	cmp	r0, #0
   141bc:	popne	{r4, r5, r6, pc}
   141c0:	ldr	ip, [r4, #8]
   141c4:	ldr	r1, [r4, #12]
   141c8:	sub	r2, r6, r5
   141cc:	lsr	lr, ip, #24
   141d0:	lsl	r3, ip, #8
   141d4:	orr	lr, lr, ip, lsl #24
   141d8:	and	r3, r3, #16711680	; 0xff0000
   141dc:	orr	lr, lr, r3
   141e0:	lsl	r5, r1, #8
   141e4:	lsr	r3, r1, #24
   141e8:	orr	r3, r3, r1, lsl #24
   141ec:	and	r5, r5, #16711680	; 0xff0000
   141f0:	lsr	ip, ip, #8
   141f4:	lsr	r1, r1, #8
   141f8:	orr	r3, r3, r5
   141fc:	and	r1, r1, #65280	; 0xff00
   14200:	and	ip, ip, #65280	; 0xff00
   14204:	lsl	r2, r2, #4
   14208:	orr	ip, lr, ip
   1420c:	orr	r3, r3, r1
   14210:	add	ip, ip, r2
   14214:	add	r3, r3, r2
   14218:	rev	ip, ip
   1421c:	rev	r3, r3
   14220:	str	ip, [r4, #8]
   14224:	str	r3, [r4, #12]
   14228:	pop	{r4, r5, r6, pc}
   1422c:	push	{r4, r5, r6, lr}
   14230:	mov	r4, r0
   14234:	mov	r5, r2
   14238:	mov	r6, r3
   1423c:	bl	140b0 <__assert_fail@plt+0x35ec>
   14240:	cmp	r0, #0
   14244:	popne	{r4, r5, r6, pc}
   14248:	ldr	r3, [r4, #36]	; 0x24
   1424c:	ldr	r1, [r4, #12]
   14250:	sub	ip, r6, r5
   14254:	lsr	r2, r3, #24
   14258:	lsl	r5, r3, #8
   1425c:	orr	r2, r2, r3, lsl #24
   14260:	and	r5, r5, #16711680	; 0xff0000
   14264:	lsr	lr, r3, #8
   14268:	orr	r2, r2, r5
   1426c:	lsr	r3, r1, #24
   14270:	lsl	r5, r1, #8
   14274:	orr	r3, r3, r1, lsl #24
   14278:	and	r5, r5, #16711680	; 0xff0000
   1427c:	lsr	r1, r1, #8
   14280:	and	lr, lr, #65280	; 0xff00
   14284:	orr	r3, r3, r5
   14288:	and	r1, r1, #65280	; 0xff00
   1428c:	orr	r2, r2, lr
   14290:	orr	r3, r3, r1
   14294:	add	r2, r2, ip
   14298:	add	r3, r3, ip
   1429c:	rev	r2, r2
   142a0:	rev	r3, r3
   142a4:	str	r2, [r4, #36]	; 0x24
   142a8:	str	r3, [r4, #12]
   142ac:	pop	{r4, r5, r6, pc}
   142b0:	push	{r4, r5, r6, r7, r8, lr}
   142b4:	mov	r6, r0
   142b8:	ldr	ip, [r0, #16]
   142bc:	mov	r5, r1
   142c0:	mov	r4, r3
   142c4:	add	r0, r1, #40	; 0x28
   142c8:	lsl	r3, ip, #8
   142cc:	lsr	r1, ip, #24
   142d0:	and	r3, r3, #16711680	; 0xff0000
   142d4:	orr	r1, r1, ip, lsl #24
   142d8:	lsr	ip, ip, #8
   142dc:	and	ip, ip, #65280	; 0xff00
   142e0:	orr	r1, r1, r3
   142e4:	orr	r1, r1, ip
   142e8:	add	r1, r6, r1
   142ec:	add	r7, r2, #40	; 0x28
   142f0:	bl	10944 <memmove@plt>
   142f4:	mov	r3, #671088640	; 0x28000000
   142f8:	str	r3, [r5, #16]
   142fc:	ldr	r0, [r6, #8]
   14300:	mov	r2, r4
   14304:	lsr	r1, r0, #24
   14308:	lsl	r3, r0, #8
   1430c:	and	r3, r3, #16711680	; 0xff0000
   14310:	orr	r1, r1, r0, lsl #24
   14314:	lsr	r0, r0, #8
   14318:	orr	r1, r1, r3
   1431c:	and	r0, r0, #65280	; 0xff00
   14320:	orr	r1, r1, r0
   14324:	add	r1, r6, r1
   14328:	add	r0, r5, r7
   1432c:	bl	10944 <memmove@plt>
   14330:	lsl	r1, r4, #8
   14334:	lsr	r3, r4, #24
   14338:	lsl	r0, r7, #8
   1433c:	lsr	r2, r7, #24
   14340:	and	r0, r0, #16711680	; 0xff0000
   14344:	and	r1, r1, #16711680	; 0xff0000
   14348:	orr	r3, r3, r4, lsl #24
   1434c:	orr	r2, r2, r7, lsl #24
   14350:	orr	r2, r2, r0
   14354:	orr	r3, r3, r1
   14358:	lsr	r0, r7, #8
   1435c:	lsr	r1, r4, #8
   14360:	and	r0, r0, #65280	; 0xff00
   14364:	and	r1, r1, #65280	; 0xff00
   14368:	orr	r2, r2, r0
   1436c:	orr	r3, r3, r1
   14370:	str	r3, [r5, #36]	; 0x24
   14374:	str	r2, [r5, #8]
   14378:	ldr	r2, [r6, #12]
   1437c:	ldr	r0, [r6, #32]
   14380:	add	r4, r7, r4
   14384:	lsr	r1, r2, #24
   14388:	lsl	r3, r2, #8
   1438c:	orr	r1, r1, r2, lsl #24
   14390:	lsr	ip, r0, #24
   14394:	lsl	lr, r0, #8
   14398:	lsr	r2, r2, #8
   1439c:	and	r3, r3, #16711680	; 0xff0000
   143a0:	orr	r3, r1, r3
   143a4:	and	r1, r2, #65280	; 0xff00
   143a8:	orr	r2, ip, r0, lsl #24
   143ac:	and	ip, lr, #16711680	; 0xff0000
   143b0:	lsr	r0, r0, #8
   143b4:	orr	r1, r3, r1
   143b8:	orr	r2, r2, ip
   143bc:	and	r0, r0, #65280	; 0xff00
   143c0:	orr	r2, r2, r0
   143c4:	add	r1, r6, r1
   143c8:	add	r0, r5, r4
   143cc:	bl	10944 <memmove@plt>
   143d0:	lsl	r2, r4, #8
   143d4:	lsr	r3, r4, #24
   143d8:	and	r2, r2, #16711680	; 0xff0000
   143dc:	orr	r3, r3, r4, lsl #24
   143e0:	lsr	r4, r4, #8
   143e4:	orr	r3, r3, r2
   143e8:	and	r4, r4, #65280	; 0xff00
   143ec:	orr	r4, r3, r4
   143f0:	str	r4, [r5, #12]
   143f4:	ldr	r2, [r6, #32]
   143f8:	lsl	r1, r2, #8
   143fc:	lsr	r3, r2, #24
   14400:	orr	r3, r3, r2, lsl #24
   14404:	and	r1, r1, #16711680	; 0xff0000
   14408:	lsr	r2, r2, #8
   1440c:	orr	r3, r3, r1
   14410:	and	r2, r2, #65280	; 0xff00
   14414:	orr	r3, r3, r2
   14418:	rev	r3, r3
   1441c:	str	r3, [r5, #32]
   14420:	pop	{r4, r5, r6, r7, r8, pc}
   14424:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14428:	mov	r8, r2
   1442c:	mov	r6, r3
   14430:	mov	r5, r0
   14434:	bl	157cc <__assert_fail@plt+0x4d08>
   14438:	subs	r7, r0, #0
   1443c:	blt	14560 <__assert_fail@plt+0x3a9c>
   14440:	ldr	r3, [r5, #12]
   14444:	mov	r0, r8
   14448:	lsr	r4, r3, #24
   1444c:	lsl	r2, r3, #8
   14450:	and	r2, r2, #16711680	; 0xff0000
   14454:	orr	r4, r4, r3, lsl #24
   14458:	lsr	r3, r3, #8
   1445c:	orr	r4, r4, r2
   14460:	and	r3, r3, #65280	; 0xff00
   14464:	orr	r3, r4, r3
   14468:	add	r4, r5, r3
   1446c:	bl	10a10 <strlen@plt>
   14470:	ldr	ip, [r5, #32]
   14474:	mov	r2, r8
   14478:	lsr	r1, ip, #24
   1447c:	lsl	r3, ip, #8
   14480:	orr	r1, r1, ip, lsl #24
   14484:	and	r3, r3, #16711680	; 0xff0000
   14488:	lsr	ip, ip, #8
   1448c:	orr	r1, r1, r3
   14490:	and	ip, ip, #65280	; 0xff00
   14494:	orr	r1, r1, ip
   14498:	mov	r9, r0
   1449c:	mov	r0, r4
   144a0:	bl	15a4c <__assert_fail@plt+0x4f88>
   144a4:	subs	r2, r0, #0
   144a8:	subne	sl, r2, r4
   144ac:	beq	14568 <__assert_fail@plt+0x3aa4>
   144b0:	cmp	sl, #0
   144b4:	movlt	r7, sl
   144b8:	blt	14560 <__assert_fail@plt+0x3a9c>
   144bc:	ldr	r2, [r5, #8]
   144c0:	add	r3, r6, #3
   144c4:	bic	r3, r3, #3
   144c8:	lsr	r1, r2, #24
   144cc:	lsl	r0, r2, #8
   144d0:	orr	r1, r1, r2, lsl #24
   144d4:	and	r0, r0, #16711680	; 0xff0000
   144d8:	lsr	r2, r2, #8
   144dc:	orr	r1, r1, r0
   144e0:	and	r2, r2, #65280	; 0xff00
   144e4:	orr	r1, r1, r2
   144e8:	ldr	r2, [sp, #40]	; 0x28
   144ec:	add	r1, r1, r7
   144f0:	add	r1, r5, r1
   144f4:	str	r1, [r2]
   144f8:	mov	r0, r5
   144fc:	add	r3, r3, #12
   14500:	mov	r2, #0
   14504:	bl	1422c <__assert_fail@plt+0x3768>
   14508:	subs	r7, r0, #0
   1450c:	bne	14560 <__assert_fail@plt+0x3a9c>
   14510:	lsr	r1, sl, #24
   14514:	lsl	r2, sl, #8
   14518:	orr	r1, r1, sl, lsl #24
   1451c:	and	r2, r2, #16711680	; 0xff0000
   14520:	lsr	r3, r6, #24
   14524:	orr	r1, r1, r2
   14528:	lsl	r2, r6, #8
   1452c:	orr	r3, r3, r6, lsl #24
   14530:	and	r2, r2, #16711680	; 0xff0000
   14534:	orr	r3, r3, r2
   14538:	ldr	r2, [sp, #40]	; 0x28
   1453c:	lsr	sl, sl, #8
   14540:	lsr	r6, r6, #8
   14544:	and	sl, sl, #65280	; 0xff00
   14548:	ldr	r0, [r2]
   1454c:	and	r6, r6, #65280	; 0xff00
   14550:	orr	r6, r3, r6
   14554:	orr	sl, r1, sl
   14558:	mov	r3, #50331648	; 0x3000000
   1455c:	stm	r0, {r3, r6, sl}
   14560:	mov	r0, r7
   14564:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14568:	ldr	r0, [r5, #32]
   1456c:	ldr	r1, [r5, #12]
   14570:	add	r9, r9, #1
   14574:	lsr	fp, r0, #24
   14578:	lsl	ip, r0, #8
   1457c:	lsr	r3, r1, #24
   14580:	lsl	lr, r1, #8
   14584:	orr	fp, fp, r0, lsl #24
   14588:	orr	r3, r3, r1, lsl #24
   1458c:	and	lr, lr, #16711680	; 0xff0000
   14590:	and	ip, ip, #16711680	; 0xff0000
   14594:	lsr	r0, r0, #8
   14598:	lsr	r1, r1, #8
   1459c:	orr	r3, r3, lr
   145a0:	orr	ip, fp, ip
   145a4:	and	r0, r0, #65280	; 0xff00
   145a8:	and	r1, r1, #65280	; 0xff00
   145ac:	orr	fp, ip, r0
   145b0:	orr	r1, r3, r1
   145b4:	add	r1, r1, fp
   145b8:	add	r1, r5, r1
   145bc:	mov	r3, r9
   145c0:	mov	r0, r5
   145c4:	bl	140b0 <__assert_fail@plt+0x35ec>
   145c8:	subs	sl, r0, #0
   145cc:	bne	144b0 <__assert_fail@plt+0x39ec>
   145d0:	ldr	r2, [r5, #32]
   145d4:	mov	sl, fp
   145d8:	mov	r1, r8
   145dc:	lsr	r3, r2, #24
   145e0:	lsl	ip, r2, #8
   145e4:	orr	r3, r3, r2, lsl #24
   145e8:	and	ip, ip, #16711680	; 0xff0000
   145ec:	lsr	r2, r2, #8
   145f0:	orr	r3, r3, ip
   145f4:	and	r2, r2, #65280	; 0xff00
   145f8:	orr	r3, r3, r2
   145fc:	add	r3, r3, r9
   14600:	rev	r3, r3
   14604:	add	r0, r4, fp
   14608:	str	r3, [r5, #32]
   1460c:	mov	r2, r9
   14610:	bl	10968 <memcpy@plt>
   14614:	cmp	sl, #0
   14618:	movlt	r7, sl
   1461c:	bge	144bc <__assert_fail@plt+0x39f8>
   14620:	b	14560 <__assert_fail@plt+0x3a9c>
   14624:	push	{r4, r5, r6, lr}
   14628:	mov	r5, r0
   1462c:	bl	151e8 <__assert_fail@plt+0x4724>
   14630:	cmp	r0, #0
   14634:	popne	{r4, r5, r6, pc}
   14638:	ldr	r3, [r5, #20]
   1463c:	lsr	r4, r3, #24
   14640:	lsl	r2, r3, #8
   14644:	orr	r4, r4, r3, lsl #24
   14648:	and	r2, r2, #16711680	; 0xff0000
   1464c:	lsr	r3, r3, #8
   14650:	orr	r4, r4, r2
   14654:	and	r3, r3, #65280	; 0xff00
   14658:	orr	r4, r4, r3
   1465c:	cmp	r4, #16
   14660:	bls	146ac <__assert_fail@plt+0x3be8>
   14664:	ldr	r3, [r5, #36]	; 0x24
   14668:	mov	r1, #16
   1466c:	lsr	r2, r3, #24
   14670:	lsl	r0, r3, #8
   14674:	orr	r2, r2, r3, lsl #24
   14678:	and	r0, r0, #16711680	; 0xff0000
   1467c:	lsr	r3, r3, #8
   14680:	orr	r2, r2, r0
   14684:	and	r3, r3, #65280	; 0xff00
   14688:	orr	r2, r2, r3
   1468c:	mov	r0, r5
   14690:	bl	13fbc <__assert_fail@plt+0x34f8>
   14694:	cmp	r0, #0
   14698:	bne	146b4 <__assert_fail@plt+0x3bf0>
   1469c:	cmp	r4, #17
   146a0:	movne	r3, #285212672	; 0x11000000
   146a4:	strne	r3, [r5, #20]
   146a8:	pop	{r4, r5, r6, pc}
   146ac:	mvn	r0, #9
   146b0:	pop	{r4, r5, r6, pc}
   146b4:	mvn	r0, #11
   146b8:	pop	{r4, r5, r6, pc}
   146bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c0:	mov	r8, r2
   146c4:	mov	r9, r3
   146c8:	mov	r5, r0
   146cc:	ldr	r7, [sp, #40]	; 0x28
   146d0:	ldr	r6, [sp, #44]	; 0x2c
   146d4:	bl	14624 <__assert_fail@plt+0x3b60>
   146d8:	subs	sl, r0, #0
   146dc:	beq	146e8 <__assert_fail@plt+0x3c24>
   146e0:	mov	r0, sl
   146e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e8:	mov	r0, r5
   146ec:	bl	12b0c <__assert_fail@plt+0x2048>
   146f0:	ldr	r1, [r5, #16]
   146f4:	mov	r2, sl
   146f8:	mov	r3, #1
   146fc:	lsr	r4, r1, #24
   14700:	lsl	ip, r1, #8
   14704:	orr	r4, r4, r1, lsl #24
   14708:	and	ip, ip, #16711680	; 0xff0000
   1470c:	lsr	r1, r1, #8
   14710:	orr	r4, r4, ip
   14714:	and	r1, r1, #65280	; 0xff00
   14718:	orr	r1, r4, r1
   1471c:	add	r4, r1, r0, lsl #4
   14720:	add	fp, r5, r4
   14724:	mov	r1, fp
   14728:	mov	r0, r5
   1472c:	bl	1419c <__assert_fail@plt+0x36d8>
   14730:	subs	sl, r0, #0
   14734:	bne	146e0 <__assert_fail@plt+0x3c1c>
   14738:	rev	r7, r7
   1473c:	rev	r6, r6
   14740:	rev	r9, r9
   14744:	rev	r8, r8
   14748:	str	r9, [r5, r4]
   1474c:	mov	r0, sl
   14750:	str	r8, [fp, #4]
   14754:	strd	r6, [fp, #8]
   14758:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1475c:	push	{r4, r5, r6, r7, r8, lr}
   14760:	mov	r5, r0
   14764:	mov	r6, r1
   14768:	ldr	r4, [r0, #16]
   1476c:	bl	14624 <__assert_fail@plt+0x3b60>
   14770:	subs	r7, r0, #0
   14774:	beq	14780 <__assert_fail@plt+0x3cbc>
   14778:	mov	r0, r7
   1477c:	pop	{r4, r5, r6, r7, r8, pc}
   14780:	mov	r0, r5
   14784:	bl	12b0c <__assert_fail@plt+0x2048>
   14788:	cmp	r0, r6
   1478c:	ble	147cc <__assert_fail@plt+0x3d08>
   14790:	lsr	r1, r4, #24
   14794:	lsl	r3, r4, #8
   14798:	orr	r1, r1, r4, lsl #24
   1479c:	and	r3, r3, #16711680	; 0xff0000
   147a0:	lsr	r4, r4, #8
   147a4:	orr	r1, r1, r3
   147a8:	and	r4, r4, #65280	; 0xff00
   147ac:	orr	r4, r1, r4
   147b0:	add	r1, r4, r6, lsl #4
   147b4:	mov	r3, r7
   147b8:	add	r1, r5, r1
   147bc:	mov	r0, r5
   147c0:	mov	r2, #1
   147c4:	pop	{r4, r5, r6, r7, r8, lr}
   147c8:	b	1419c <__assert_fail@plt+0x36d8>
   147cc:	mvn	r7, #0
   147d0:	b	14778 <__assert_fail@plt+0x3cb4>
   147d4:	ldr	r3, [pc, #180]	; 14890 <__assert_fail@plt+0x3dcc>
   147d8:	ldr	ip, [pc, #180]	; 14894 <__assert_fail@plt+0x3dd0>
   147dc:	add	r3, pc, r3
   147e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   147e4:	sub	sp, sp, #12
   147e8:	ldr	r4, [r3, ip]
   147ec:	mov	r7, r1
   147f0:	mov	r6, r2
   147f4:	ldr	r3, [r4]
   147f8:	mov	r8, r0
   147fc:	str	r3, [sp, #4]
   14800:	bl	14624 <__assert_fail@plt+0x3b60>
   14804:	subs	r5, r0, #0
   14808:	beq	14828 <__assert_fail@plt+0x3d64>
   1480c:	ldr	r2, [sp, #4]
   14810:	ldr	r3, [r4]
   14814:	mov	r0, r5
   14818:	cmp	r2, r3
   1481c:	bne	1488c <__assert_fail@plt+0x3dc8>
   14820:	add	sp, sp, #12
   14824:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14828:	mov	r1, r7
   1482c:	mov	r2, sp
   14830:	mov	r0, r8
   14834:	bl	12be0 <__assert_fail@plt+0x211c>
   14838:	subs	r7, r0, #0
   1483c:	ldreq	r5, [sp]
   14840:	beq	1480c <__assert_fail@plt+0x3d48>
   14844:	mov	r0, r6
   14848:	bl	10a10 <strlen@plt>
   1484c:	ldr	r2, [sp]
   14850:	mov	r1, r7
   14854:	add	r2, r2, #4
   14858:	bic	r2, r2, #3
   1485c:	add	r3, r0, #4
   14860:	mov	r9, r0
   14864:	bic	r3, r3, #3
   14868:	mov	r0, r8
   1486c:	bl	1422c <__assert_fail@plt+0x3768>
   14870:	subs	r5, r0, #0
   14874:	bne	1480c <__assert_fail@plt+0x3d48>
   14878:	add	r2, r9, #1
   1487c:	mov	r1, r6
   14880:	mov	r0, r7
   14884:	bl	10968 <memcpy@plt>
   14888:	b	1480c <__assert_fail@plt+0x3d48>
   1488c:	bl	10980 <__stack_chk_fail@plt>
   14890:	andeq	r2, r1, r8, ror #14
   14894:	muleq	r0, ip, r0
   14898:	ldr	ip, [pc, #288]	; 149c0 <__assert_fail@plt+0x3efc>
   1489c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148a0:	add	ip, pc, ip
   148a4:	ldr	lr, [pc, #280]	; 149c4 <__assert_fail@plt+0x3f00>
   148a8:	sub	sp, sp, #24
   148ac:	mov	r4, r3
   148b0:	ldr	r5, [ip, lr]
   148b4:	mov	r6, r1
   148b8:	mov	r7, r2
   148bc:	ldr	r3, [r5]
   148c0:	mov	r2, ip
   148c4:	mov	r9, r0
   148c8:	ldr	sl, [sp, #56]	; 0x38
   148cc:	str	r3, [sp, #20]
   148d0:	bl	14624 <__assert_fail@plt+0x3b60>
   148d4:	subs	r8, r0, #0
   148d8:	beq	148f8 <__assert_fail@plt+0x3e34>
   148dc:	ldr	r2, [sp, #20]
   148e0:	ldr	r3, [r5]
   148e4:	mov	r0, r8
   148e8:	cmp	r2, r3
   148ec:	bne	149bc <__assert_fail@plt+0x3ef8>
   148f0:	add	sp, sp, #24
   148f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148f8:	add	r3, sp, #16
   148fc:	mov	r2, r7
   14900:	mov	r1, r6
   14904:	mov	r0, r9
   14908:	bl	13020 <__assert_fail@plt+0x255c>
   1490c:	cmp	r0, #0
   14910:	str	r0, [sp, #12]
   14914:	beq	14974 <__assert_fail@plt+0x3eb0>
   14918:	ldr	r2, [sp, #16]
   1491c:	add	r3, r4, #3
   14920:	add	r2, r2, #3
   14924:	add	r1, r0, #12
   14928:	bic	r2, r2, #3
   1492c:	bic	r3, r3, #3
   14930:	mov	r0, r9
   14934:	bl	1422c <__assert_fail@plt+0x3768>
   14938:	cmp	r0, #0
   1493c:	bne	149ac <__assert_fail@plt+0x3ee8>
   14940:	lsr	r3, r4, #24
   14944:	lsl	r1, r4, #8
   14948:	orr	r3, r3, r4, lsl #24
   1494c:	and	r1, r1, #16711680	; 0xff0000
   14950:	lsr	r4, r4, #8
   14954:	ldr	r2, [sp, #12]
   14958:	orr	r3, r3, r1
   1495c:	and	r4, r4, #65280	; 0xff00
   14960:	orr	r4, r3, r4
   14964:	str	r4, [r2, #4]
   14968:	add	r2, r2, #12
   1496c:	str	r2, [sl]
   14970:	b	148dc <__assert_fail@plt+0x3e18>
   14974:	ldr	r0, [sp, #16]
   14978:	cmn	r0, #1
   1497c:	bne	1499c <__assert_fail@plt+0x3ed8>
   14980:	add	ip, sp, #12
   14984:	mov	r3, r4
   14988:	mov	r2, r7
   1498c:	mov	r1, r6
   14990:	mov	r0, r9
   14994:	str	ip, [sp]
   14998:	bl	14424 <__assert_fail@plt+0x3960>
   1499c:	cmp	r0, #0
   149a0:	bne	149b4 <__assert_fail@plt+0x3ef0>
   149a4:	ldr	r2, [sp, #12]
   149a8:	b	14968 <__assert_fail@plt+0x3ea4>
   149ac:	cmn	r0, #1
   149b0:	beq	14980 <__assert_fail@plt+0x3ebc>
   149b4:	mov	r8, r0
   149b8:	b	148dc <__assert_fail@plt+0x3e18>
   149bc:	bl	10980 <__stack_chk_fail@plt>
   149c0:	andeq	r2, r1, r4, lsr #13
   149c4:	muleq	r0, ip, r0
   149c8:	ldr	ip, [pc, #116]	; 14a44 <__assert_fail@plt+0x3f80>
   149cc:	push	{r4, r5, r6, lr}
   149d0:	add	ip, pc, ip
   149d4:	ldr	lr, [pc, #108]	; 14a48 <__assert_fail@plt+0x3f84>
   149d8:	sub	sp, sp, #16
   149dc:	mov	r6, r3
   149e0:	ldr	r4, [ip, lr]
   149e4:	add	r3, sp, #8
   149e8:	str	r3, [sp]
   149ec:	ldr	lr, [r4]
   149f0:	ldr	r3, [sp, #32]
   149f4:	str	lr, [sp, #12]
   149f8:	bl	14898 <__assert_fail@plt+0x3dd4>
   149fc:	subs	r5, r0, #0
   14a00:	bne	14a10 <__assert_fail@plt+0x3f4c>
   14a04:	ldr	r3, [sp, #32]
   14a08:	cmp	r3, #0
   14a0c:	bne	14a2c <__assert_fail@plt+0x3f68>
   14a10:	ldr	r2, [sp, #12]
   14a14:	ldr	r3, [r4]
   14a18:	mov	r0, r5
   14a1c:	cmp	r2, r3
   14a20:	bne	14a40 <__assert_fail@plt+0x3f7c>
   14a24:	add	sp, sp, #16
   14a28:	pop	{r4, r5, r6, pc}
   14a2c:	mov	r1, r6
   14a30:	mov	r2, r3
   14a34:	ldr	r0, [sp, #8]
   14a38:	bl	10968 <memcpy@plt>
   14a3c:	b	14a10 <__assert_fail@plt+0x3f4c>
   14a40:	bl	10980 <__stack_chk_fail@plt>
   14a44:	andeq	r2, r1, r4, ror r5
   14a48:	muleq	r0, ip, r0
   14a4c:	ldr	ip, [pc, #296]	; 14b7c <__assert_fail@plt+0x40b8>
   14a50:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a54:	add	ip, pc, ip
   14a58:	ldr	lr, [pc, #288]	; 14b80 <__assert_fail@plt+0x40bc>
   14a5c:	sub	sp, sp, #28
   14a60:	mov	r8, r3
   14a64:	ldr	r4, [ip, lr]
   14a68:	mov	r6, r1
   14a6c:	mov	r7, r2
   14a70:	ldr	r3, [r4]
   14a74:	mov	r2, ip
   14a78:	mov	r9, r0
   14a7c:	str	r3, [sp, #20]
   14a80:	bl	14624 <__assert_fail@plt+0x3b60>
   14a84:	subs	r5, r0, #0
   14a88:	beq	14aa8 <__assert_fail@plt+0x3fe4>
   14a8c:	ldr	r2, [sp, #20]
   14a90:	ldr	r3, [r4]
   14a94:	mov	r0, r5
   14a98:	cmp	r2, r3
   14a9c:	bne	14b78 <__assert_fail@plt+0x40b4>
   14aa0:	add	sp, sp, #28
   14aa4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14aa8:	add	r3, sp, #16
   14aac:	mov	r2, r7
   14ab0:	mov	r1, r6
   14ab4:	mov	r0, r9
   14ab8:	bl	13020 <__assert_fail@plt+0x255c>
   14abc:	cmp	r0, #0
   14ac0:	str	r0, [sp, #12]
   14ac4:	beq	14b3c <__assert_fail@plt+0x4078>
   14ac8:	ldr	r2, [sp, #16]
   14acc:	ldr	r3, [sp, #56]	; 0x38
   14ad0:	add	r1, r0, #12
   14ad4:	add	r6, r2, r3
   14ad8:	add	r3, r6, #3
   14adc:	add	r2, r2, #3
   14ae0:	mov	r0, r9
   14ae4:	bic	r2, r2, #3
   14ae8:	bic	r3, r3, #3
   14aec:	bl	1422c <__assert_fail@plt+0x3768>
   14af0:	subs	r5, r0, #0
   14af4:	bne	14a8c <__assert_fail@plt+0x3fc8>
   14af8:	lsr	r3, r6, #24
   14afc:	lsl	r2, r6, #8
   14b00:	ldr	ip, [sp, #12]
   14b04:	orr	r3, r3, r6, lsl #24
   14b08:	and	r2, r2, #16711680	; 0xff0000
   14b0c:	lsr	r6, r6, #8
   14b10:	orr	r3, r3, r2
   14b14:	and	r6, r6, #65280	; 0xff00
   14b18:	ldr	r2, [sp, #16]
   14b1c:	orr	r6, r3, r6
   14b20:	add	r0, ip, #12
   14b24:	mov	r1, r8
   14b28:	str	r6, [ip, #4]
   14b2c:	add	r0, r0, r2
   14b30:	ldr	r2, [sp, #56]	; 0x38
   14b34:	bl	10968 <memcpy@plt>
   14b38:	b	14a8c <__assert_fail@plt+0x3fc8>
   14b3c:	add	r3, sp, #12
   14b40:	str	r3, [sp]
   14b44:	mov	r2, r7
   14b48:	mov	r1, r6
   14b4c:	mov	r0, r9
   14b50:	ldr	r3, [sp, #56]	; 0x38
   14b54:	bl	14424 <__assert_fail@plt+0x3960>
   14b58:	subs	r5, r0, #0
   14b5c:	bne	14a8c <__assert_fail@plt+0x3fc8>
   14b60:	ldr	r0, [sp, #12]
   14b64:	mov	r1, r8
   14b68:	ldr	r2, [sp, #56]	; 0x38
   14b6c:	add	r0, r0, #12
   14b70:	bl	10968 <memcpy@plt>
   14b74:	b	14a8c <__assert_fail@plt+0x3fc8>
   14b78:	bl	10980 <__stack_chk_fail@plt>
   14b7c:	strdeq	r2, [r1], -r0
   14b80:	muleq	r0, ip, r0
   14b84:	ldr	r3, [pc, #148]	; 14c20 <__assert_fail@plt+0x415c>
   14b88:	ldr	ip, [pc, #148]	; 14c24 <__assert_fail@plt+0x4160>
   14b8c:	add	r3, pc, r3
   14b90:	push	{r4, r5, r6, r7, r8, lr}
   14b94:	sub	sp, sp, #8
   14b98:	ldr	r4, [r3, ip]
   14b9c:	mov	r7, r1
   14ba0:	mov	r8, r2
   14ba4:	ldr	r3, [r4]
   14ba8:	mov	r6, r0
   14bac:	str	r3, [sp, #4]
   14bb0:	bl	14624 <__assert_fail@plt+0x3b60>
   14bb4:	subs	r5, r0, #0
   14bb8:	beq	14bd8 <__assert_fail@plt+0x4114>
   14bbc:	ldr	r2, [sp, #4]
   14bc0:	ldr	r3, [r4]
   14bc4:	mov	r0, r5
   14bc8:	cmp	r2, r3
   14bcc:	bne	14c1c <__assert_fail@plt+0x4158>
   14bd0:	add	sp, sp, #8
   14bd4:	pop	{r4, r5, r6, r7, r8, pc}
   14bd8:	mov	r1, r7
   14bdc:	mov	r2, r8
   14be0:	mov	r3, sp
   14be4:	mov	r0, r6
   14be8:	bl	13020 <__assert_fail@plt+0x255c>
   14bec:	subs	r1, r0, #0
   14bf0:	ldreq	r5, [sp]
   14bf4:	beq	14bbc <__assert_fail@plt+0x40f8>
   14bf8:	ldr	r2, [sp]
   14bfc:	mov	r3, r5
   14c00:	add	r2, r2, #3
   14c04:	bic	r2, r2, #3
   14c08:	mov	r0, r6
   14c0c:	add	r2, r2, #12
   14c10:	bl	1422c <__assert_fail@plt+0x3768>
   14c14:	mov	r5, r0
   14c18:	b	14bbc <__assert_fail@plt+0x40f8>
   14c1c:	bl	10980 <__stack_chk_fail@plt>
   14c20:			; <UNDEFINED> instruction: 0x000123b8
   14c24:	muleq	r0, ip, r0
   14c28:	ldr	ip, [pc, #320]	; 14d70 <__assert_fail@plt+0x42ac>
   14c2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c30:	add	ip, pc, ip
   14c34:	ldr	lr, [pc, #312]	; 14d74 <__assert_fail@plt+0x42b0>
   14c38:	sub	sp, sp, #12
   14c3c:	mov	r8, r3
   14c40:	ldr	r6, [ip, lr]
   14c44:	mov	r5, r1
   14c48:	mov	r7, r2
   14c4c:	ldr	r3, [r6]
   14c50:	mov	r2, ip
   14c54:	mov	r4, r0
   14c58:	str	r3, [sp, #4]
   14c5c:	bl	14624 <__assert_fail@plt+0x3b60>
   14c60:	cmp	r0, #0
   14c64:	beq	14c80 <__assert_fail@plt+0x41bc>
   14c68:	ldr	r2, [sp, #4]
   14c6c:	ldr	r3, [r6]
   14c70:	cmp	r2, r3
   14c74:	bne	14d6c <__assert_fail@plt+0x42a8>
   14c78:	add	sp, sp, #12
   14c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c80:	mov	r3, r8
   14c84:	mov	r2, r7
   14c88:	mov	r1, r5
   14c8c:	mov	r0, r4
   14c90:	bl	12cc0 <__assert_fail@plt+0x21fc>
   14c94:	cmp	r0, #0
   14c98:	bge	14d64 <__assert_fail@plt+0x42a0>
   14c9c:	cmn	r0, #1
   14ca0:	bne	14c68 <__assert_fail@plt+0x41a4>
   14ca4:	mov	r9, sp
   14ca8:	mov	r1, r5
   14cac:	mov	r2, r9
   14cb0:	mov	r0, r4
   14cb4:	bl	15654 <__assert_fail@plt+0x4b90>
   14cb8:	ldr	r5, [sp]
   14cbc:	mov	r2, r9
   14cc0:	mov	r1, r5
   14cc4:	mov	r0, r4
   14cc8:	bl	15654 <__assert_fail@plt+0x4b90>
   14ccc:	sub	r0, r0, #3
   14cd0:	cmp	r0, #1
   14cd4:	bls	14cb8 <__assert_fail@plt+0x41f4>
   14cd8:	ldr	r3, [r4, #8]
   14cdc:	add	sl, r8, #4
   14ce0:	bic	sl, sl, #3
   14ce4:	lsr	r9, r3, #24
   14ce8:	lsl	r2, r3, #8
   14cec:	orr	r9, r9, r3, lsl #24
   14cf0:	and	r2, r2, #16711680	; 0xff0000
   14cf4:	lsr	r3, r3, #8
   14cf8:	orr	r9, r9, r2
   14cfc:	and	r3, r3, #65280	; 0xff00
   14d00:	orr	r3, r9, r3
   14d04:	add	r9, r3, r5
   14d08:	add	fp, r4, r9
   14d0c:	mov	r1, fp
   14d10:	add	r3, sl, #8
   14d14:	mov	r2, #0
   14d18:	mov	r0, r4
   14d1c:	bl	1422c <__assert_fail@plt+0x3768>
   14d20:	cmp	r0, #0
   14d24:	bne	14c68 <__assert_fail@plt+0x41a4>
   14d28:	add	r3, fp, #4
   14d2c:	mov	r2, #16777216	; 0x1000000
   14d30:	mov	r1, r0
   14d34:	str	r2, [r4, r9]
   14d38:	mov	r0, r3
   14d3c:	mov	r2, sl
   14d40:	bl	10a40 <memset@plt>
   14d44:	add	sl, fp, sl
   14d48:	mov	r2, r8
   14d4c:	mov	r1, r7
   14d50:	bl	10968 <memcpy@plt>
   14d54:	mov	r3, #33554432	; 0x2000000
   14d58:	mov	r0, r5
   14d5c:	str	r3, [sl, #4]
   14d60:	b	14c68 <__assert_fail@plt+0x41a4>
   14d64:	mvn	r0, #1
   14d68:	b	14c68 <__assert_fail@plt+0x41a4>
   14d6c:	bl	10980 <__stack_chk_fail@plt>
   14d70:	andeq	r2, r1, r4, lsl r3
   14d74:	muleq	r0, ip, r0
   14d78:	push	{r4, r5, r6, lr}
   14d7c:	mov	r5, r0
   14d80:	mov	r0, r2
   14d84:	mov	r4, r2
   14d88:	mov	r6, r1
   14d8c:	bl	10a10 <strlen@plt>
   14d90:	mov	r2, r4
   14d94:	mov	r1, r6
   14d98:	mov	r3, r0
   14d9c:	mov	r0, r5
   14da0:	pop	{r4, r5, r6, lr}
   14da4:	b	14c28 <__assert_fail@plt+0x4164>
   14da8:	push	{r4, r5, r6, lr}
   14dac:	mov	r5, r1
   14db0:	mov	r4, r0
   14db4:	bl	14624 <__assert_fail@plt+0x3b60>
   14db8:	cmp	r0, #0
   14dbc:	popne	{r4, r5, r6, pc}
   14dc0:	mov	r1, r5
   14dc4:	mov	r0, r4
   14dc8:	bl	15cd0 <__assert_fail@plt+0x520c>
   14dcc:	cmp	r0, #0
   14dd0:	poplt	{r4, r5, r6, pc}
   14dd4:	ldr	r3, [r4, #8]
   14dd8:	sub	r2, r0, r5
   14ddc:	mov	r0, r4
   14de0:	lsr	r1, r3, #24
   14de4:	lsl	ip, r3, #8
   14de8:	orr	r1, r1, r3, lsl #24
   14dec:	and	ip, ip, #16711680	; 0xff0000
   14df0:	lsr	r3, r3, #8
   14df4:	and	r3, r3, #65280	; 0xff00
   14df8:	orr	r1, r1, ip
   14dfc:	orr	r1, r1, r3
   14e00:	add	r1, r1, r5
   14e04:	add	r1, r4, r1
   14e08:	mov	r3, #0
   14e0c:	pop	{r4, r5, r6, lr}
   14e10:	b	1422c <__assert_fail@plt+0x3768>
   14e14:	ldr	r3, [pc, #672]	; 150bc <__assert_fail@plt+0x45f8>
   14e18:	ldr	ip, [pc, #672]	; 150c0 <__assert_fail@plt+0x45fc>
   14e1c:	add	r3, pc, r3
   14e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e24:	sub	sp, sp, #20
   14e28:	ldr	r9, [r3, ip]
   14e2c:	mov	r4, r0
   14e30:	mov	r7, r1
   14e34:	ldr	r3, [r9]
   14e38:	mov	r6, r2
   14e3c:	ldr	r8, [r0, #4]
   14e40:	str	r3, [sp, #12]
   14e44:	bl	151e8 <__assert_fail@plt+0x4724>
   14e48:	subs	sl, r0, #0
   14e4c:	beq	14e6c <__assert_fail@plt+0x43a8>
   14e50:	ldr	r2, [sp, #12]
   14e54:	ldr	r3, [r9]
   14e58:	mov	r0, sl
   14e5c:	cmp	r2, r3
   14e60:	bne	150b8 <__assert_fail@plt+0x45f4>
   14e64:	add	sp, sp, #20
   14e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e6c:	mov	r0, r4
   14e70:	bl	12b0c <__assert_fail@plt+0x2048>
   14e74:	ldr	r3, [r4, #20]
   14e78:	lsr	r2, r3, #24
   14e7c:	lsl	r1, r3, #8
   14e80:	orr	r2, r2, r3, lsl #24
   14e84:	and	r1, r1, #16711680	; 0xff0000
   14e88:	lsr	r3, r3, #8
   14e8c:	orr	r2, r2, r1
   14e90:	and	r3, r3, #65280	; 0xff00
   14e94:	orr	r3, r2, r3
   14e98:	cmp	r3, #16
   14e9c:	add	r0, r0, #1
   14ea0:	lsl	fp, r0, #4
   14ea4:	bls	14ff4 <__assert_fail@plt+0x4530>
   14ea8:	ldr	r2, [r4, #36]	; 0x24
   14eac:	lsr	r3, r2, #24
   14eb0:	lsl	r1, r2, #8
   14eb4:	orr	r3, r3, r2, lsl #24
   14eb8:	and	r1, r1, #16711680	; 0xff0000
   14ebc:	lsr	r2, r2, #8
   14ec0:	orr	r3, r3, r1
   14ec4:	and	r2, r2, #65280	; 0xff00
   14ec8:	orr	r3, r3, r2
   14ecc:	str	r3, [sp, #8]
   14ed0:	mov	r2, r3
   14ed4:	mov	r1, fp
   14ed8:	mov	r0, r4
   14edc:	str	r3, [sp, #4]
   14ee0:	bl	13fbc <__assert_fail@plt+0x34f8>
   14ee4:	ldr	r3, [sp, #4]
   14ee8:	cmp	r0, #0
   14eec:	beq	15048 <__assert_fail@plt+0x4584>
   14ef0:	ldr	r2, [r4, #32]
   14ef4:	lsr	r5, r2, #24
   14ef8:	lsl	r1, r2, #8
   14efc:	orr	r5, r5, r2, lsl #24
   14f00:	and	r1, r1, #16711680	; 0xff0000
   14f04:	lsr	r2, r2, #8
   14f08:	orr	r5, r5, r1
   14f0c:	and	r2, r2, #65280	; 0xff00
   14f10:	orr	r5, r5, r2
   14f14:	add	r5, r5, #40	; 0x28
   14f18:	add	r5, r5, fp
   14f1c:	add	r5, r5, r3
   14f20:	cmp	r6, r5
   14f24:	blt	15040 <__assert_fail@plt+0x457c>
   14f28:	lsr	r2, r8, #24
   14f2c:	lsl	r1, r8, #8
   14f30:	orr	r2, r2, r8, lsl #24
   14f34:	and	r1, r1, #16711680	; 0xff0000
   14f38:	lsr	r8, r8, #8
   14f3c:	orr	r2, r2, r1
   14f40:	and	r8, r8, #65280	; 0xff00
   14f44:	orr	r8, r2, r8
   14f48:	add	r1, r7, r5
   14f4c:	cmp	r4, r1
   14f50:	add	r8, r4, r8
   14f54:	movcs	r2, #0
   14f58:	movcc	r2, #1
   14f5c:	cmp	r8, r7
   14f60:	movls	r2, #0
   14f64:	cmp	r2, #0
   14f68:	moveq	r8, r7
   14f6c:	bne	15030 <__assert_fail@plt+0x456c>
   14f70:	mov	r2, fp
   14f74:	mov	r1, r8
   14f78:	mov	r0, r4
   14f7c:	bl	142b0 <__assert_fail@plt+0x37ec>
   14f80:	mov	r2, r5
   14f84:	mov	r1, r8
   14f88:	mov	r0, r7
   14f8c:	bl	10944 <memmove@plt>
   14f90:	lsr	r3, r6, #24
   14f94:	lsl	r2, r6, #8
   14f98:	orr	r3, r3, r6, lsl #24
   14f9c:	and	r2, r2, #16711680	; 0xff0000
   14fa0:	lsr	r6, r6, #8
   14fa4:	orr	r3, r3, r2
   14fa8:	ldr	r1, [pc, #276]	; 150c4 <__assert_fail@plt+0x4600>
   14fac:	and	r6, r6, #65280	; 0xff00
   14fb0:	orr	r6, r3, r6
   14fb4:	mov	r2, #285212672	; 0x11000000
   14fb8:	mov	r3, #268435456	; 0x10000000
   14fbc:	stm	r7, {r1, r6}
   14fc0:	strd	r2, [r7, #20]
   14fc4:	ldr	r2, [r4, #28]
   14fc8:	lsr	r3, r2, #24
   14fcc:	lsl	r1, r2, #8
   14fd0:	orr	r3, r3, r2, lsl #24
   14fd4:	and	r1, r1, #16711680	; 0xff0000
   14fd8:	lsr	r2, r2, #8
   14fdc:	orr	r3, r3, r1
   14fe0:	and	r2, r2, #65280	; 0xff00
   14fe4:	orr	r3, r3, r2
   14fe8:	rev	r3, r3
   14fec:	str	r3, [r7, #28]
   14ff0:	b	14e50 <__assert_fail@plt+0x438c>
   14ff4:	mov	r1, sl
   14ff8:	add	r5, sp, #8
   14ffc:	str	sl, [sp, #8]
   15000:	b	15008 <__assert_fail@plt+0x4544>
   15004:	ldr	r1, [sp, #8]
   15008:	mov	r2, r5
   1500c:	mov	r0, r4
   15010:	bl	15654 <__assert_fail@plt+0x4b90>
   15014:	cmp	r0, #9
   15018:	bne	15004 <__assert_fail@plt+0x4540>
   1501c:	ldr	r3, [sp, #8]
   15020:	cmp	r3, #0
   15024:	movlt	sl, r3
   15028:	bge	14ed0 <__assert_fail@plt+0x440c>
   1502c:	b	14e50 <__assert_fail@plt+0x438c>
   15030:	add	r2, r8, r5
   15034:	add	r1, r7, r6
   15038:	cmp	r2, r1
   1503c:	bls	14f70 <__assert_fail@plt+0x44ac>
   15040:	mvn	sl, #2
   15044:	b	14e50 <__assert_fail@plt+0x438c>
   15048:	mov	r0, r4
   1504c:	mov	r2, r6
   15050:	mov	r1, r7
   15054:	bl	15aac <__assert_fail@plt+0x4fe8>
   15058:	subs	sl, r0, #0
   1505c:	bne	14e50 <__assert_fail@plt+0x438c>
   15060:	ldr	r3, [sp, #8]
   15064:	lsr	r1, r6, #24
   15068:	orr	r1, r1, r6, lsl #24
   1506c:	lsr	r2, r3, #24
   15070:	lsl	r0, r3, #8
   15074:	orr	r2, r2, r3, lsl #24
   15078:	and	r0, r0, #16711680	; 0xff0000
   1507c:	orr	r2, r2, r0
   15080:	lsl	r0, r6, #8
   15084:	lsr	r3, r3, #8
   15088:	and	r0, r0, #16711680	; 0xff0000
   1508c:	lsr	r6, r6, #8
   15090:	orr	r1, r1, r0
   15094:	and	r3, r3, #65280	; 0xff00
   15098:	and	r6, r6, #65280	; 0xff00
   1509c:	orr	r3, r2, r3
   150a0:	orr	r2, r1, r6
   150a4:	mov	r1, #285212672	; 0x11000000
   150a8:	str	r3, [r7, #36]	; 0x24
   150ac:	str	r2, [r7, #4]
   150b0:	str	r1, [r7, #20]
   150b4:	b	14e50 <__assert_fail@plt+0x438c>
   150b8:	bl	10980 <__stack_chk_fail@plt>
   150bc:	andeq	r2, r1, r8, lsr #2
   150c0:	muleq	r0, ip, r0
   150c4:	ldcl	13, cr0, [lr, #832]!	; 0x340
   150c8:	push	{r4, r5, r6, lr}
   150cc:	mov	r4, r0
   150d0:	bl	14624 <__assert_fail@plt+0x3b60>
   150d4:	subs	r5, r0, #0
   150d8:	bne	15170 <__assert_fail@plt+0x46ac>
   150dc:	mov	r0, r4
   150e0:	bl	12b0c <__assert_fail@plt+0x2048>
   150e4:	ldr	r2, [r4, #36]	; 0x24
   150e8:	mov	r1, r4
   150ec:	lsr	r3, r2, #24
   150f0:	lsl	ip, r2, #8
   150f4:	and	ip, ip, #16711680	; 0xff0000
   150f8:	orr	r3, r3, r2, lsl #24
   150fc:	lsr	r2, r2, #8
   15100:	orr	r3, r3, ip
   15104:	and	r2, r2, #65280	; 0xff00
   15108:	orr	r3, r3, r2
   1510c:	add	r2, r0, #1
   15110:	mov	r0, r4
   15114:	lsl	r2, r2, #4
   15118:	bl	142b0 <__assert_fail@plt+0x37ec>
   1511c:	ldr	r1, [r4, #12]
   15120:	ldr	r2, [r4, #32]
   15124:	lsr	r3, r1, #24
   15128:	lsl	ip, r1, #8
   1512c:	orr	r3, r3, r1, lsl #24
   15130:	and	ip, ip, #16711680	; 0xff0000
   15134:	lsr	r0, r2, #24
   15138:	orr	r3, r3, ip
   1513c:	lsl	ip, r2, #8
   15140:	orr	r0, r0, r2, lsl #24
   15144:	lsr	r1, r1, #8
   15148:	and	ip, ip, #16711680	; 0xff0000
   1514c:	lsr	r2, r2, #8
   15150:	and	r1, r1, #65280	; 0xff00
   15154:	orr	r0, r0, ip
   15158:	and	r2, r2, #65280	; 0xff00
   1515c:	orr	r3, r3, r1
   15160:	orr	r2, r0, r2
   15164:	add	r3, r3, r2
   15168:	rev	r3, r3
   1516c:	str	r3, [r4, #4]
   15170:	mov	r0, r5
   15174:	pop	{r4, r5, r6, pc}
   15178:	cmp	r0, #0
   1517c:	bgt	151b0 <__assert_fail@plt+0x46ec>
   15180:	beq	151bc <__assert_fail@plt+0x46f8>
   15184:	cmn	r0, #18
   15188:	bls	151c8 <__assert_fail@plt+0x4704>
   1518c:	ldr	r3, [pc, #64]	; 151d4 <__assert_fail@plt+0x4710>
   15190:	rsb	r0, r0, #0
   15194:	add	r3, pc, r3
   15198:	ldr	r0, [r3, r0, lsl #2]
   1519c:	cmp	r0, #0
   151a0:	bxne	lr
   151a4:	ldr	r0, [pc, #44]	; 151d8 <__assert_fail@plt+0x4714>
   151a8:	add	r0, pc, r0
   151ac:	bx	lr
   151b0:	ldr	r0, [pc, #36]	; 151dc <__assert_fail@plt+0x4718>
   151b4:	add	r0, pc, r0
   151b8:	bx	lr
   151bc:	ldr	r0, [pc, #28]	; 151e0 <__assert_fail@plt+0x471c>
   151c0:	add	r0, pc, r0
   151c4:	bx	lr
   151c8:	ldr	r0, [pc, #20]	; 151e4 <__assert_fail@plt+0x4720>
   151cc:	add	r0, pc, r0
   151d0:	bx	lr
   151d4:	andeq	r1, r1, r8, ror #24
   151d8:	andeq	r1, r0, r4, ror #4
   151dc:	andeq	r1, r0, r4, ror r2
   151e0:	andeq	r1, r0, ip, asr r2
   151e4:	andeq	r1, r0, r0, asr #4
   151e8:	ldr	r3, [r0]
   151ec:	ldr	ip, [pc, #208]	; 152c4 <__assert_fail@plt+0x4800>
   151f0:	lsr	r2, r3, #24
   151f4:	lsl	r1, r3, #8
   151f8:	orr	r2, r2, r3, lsl #24
   151fc:	and	r1, r1, #16711680	; 0xff0000
   15200:	lsr	r3, r3, #8
   15204:	orr	r2, r2, r1
   15208:	and	r3, r3, #65280	; 0xff00
   1520c:	orr	r3, r2, r3
   15210:	cmp	r3, ip
   15214:	beq	15254 <__assert_fail@plt+0x4790>
   15218:	ldr	r2, [pc, #168]	; 152c8 <__assert_fail@plt+0x4804>
   1521c:	cmp	r3, r2
   15220:	bne	152b4 <__assert_fail@plt+0x47f0>
   15224:	ldr	r3, [r0, #36]	; 0x24
   15228:	lsr	r2, r3, #24
   1522c:	lsl	r1, r3, #8
   15230:	orr	r2, r2, r3, lsl #24
   15234:	and	r1, r1, #16711680	; 0xff0000
   15238:	lsr	r3, r3, #8
   1523c:	orr	r2, r2, r1
   15240:	and	r3, r3, #65280	; 0xff00
   15244:	orrs	r3, r2, r3
   15248:	movne	r0, #0
   1524c:	mvneq	r0, #6
   15250:	bx	lr
   15254:	ldr	r3, [r0, #20]
   15258:	lsr	r2, r3, #24
   1525c:	lsl	r1, r3, #8
   15260:	orr	r2, r2, r3, lsl #24
   15264:	and	r1, r1, #16711680	; 0xff0000
   15268:	lsr	r3, r3, #8
   1526c:	orr	r2, r2, r1
   15270:	and	r3, r3, #65280	; 0xff00
   15274:	orr	r3, r2, r3
   15278:	cmp	r3, #1
   1527c:	bls	152bc <__assert_fail@plt+0x47f8>
   15280:	ldr	r3, [r0, #24]
   15284:	lsr	r2, r3, #24
   15288:	lsl	r1, r3, #8
   1528c:	orr	r2, r2, r3, lsl #24
   15290:	and	r1, r1, #16711680	; 0xff0000
   15294:	lsr	r3, r3, #8
   15298:	orr	r2, r2, r1
   1529c:	and	r3, r3, #65280	; 0xff00
   152a0:	orr	r3, r2, r3
   152a4:	cmp	r3, #18
   152a8:	movcc	r0, #0
   152ac:	mvncs	r0, #9
   152b0:	bx	lr
   152b4:	mvn	r0, #8
   152b8:	bx	lr
   152bc:	mvn	r0, #9
   152c0:	bx	lr
   152c4:	andle	pc, sp, sp, ror #29
   152c8:	svccs	0x00f20112
   152cc:	cmp	r0, #1
   152d0:	bls	152f4 <__assert_fail@plt+0x4830>
   152d4:	cmp	r0, #2
   152d8:	beq	152ec <__assert_fail@plt+0x4828>
   152dc:	cmp	r0, #17
   152e0:	movcc	r0, #36	; 0x24
   152e4:	movcs	r0, #40	; 0x28
   152e8:	bx	lr
   152ec:	mov	r0, #32
   152f0:	bx	lr
   152f4:	mov	r0, #28
   152f8:	bx	lr
   152fc:	ldr	r3, [r0]
   15300:	ldr	ip, [pc, #628]	; 1557c <__assert_fail@plt+0x4ab8>
   15304:	lsr	r2, r3, #24
   15308:	lsl	r1, r3, #8
   1530c:	orr	r2, r2, r3, lsl #24
   15310:	and	r1, r1, #16711680	; 0xff0000
   15314:	lsr	r3, r3, #8
   15318:	orr	r2, r2, r1
   1531c:	and	r3, r3, #65280	; 0xff00
   15320:	orr	r3, r2, r3
   15324:	cmp	r3, ip
   15328:	bne	1556c <__assert_fail@plt+0x4aa8>
   1532c:	push	{r4, r5, r6, lr}
   15330:	mov	r4, r0
   15334:	ldr	r3, [r0, #20]
   15338:	lsr	r0, r3, #24
   1533c:	lsl	r2, r3, #8
   15340:	and	r2, r2, #16711680	; 0xff0000
   15344:	orr	r0, r0, r3, lsl #24
   15348:	lsr	r3, r3, #8
   1534c:	orr	r0, r0, r2
   15350:	and	r3, r3, #65280	; 0xff00
   15354:	orr	r0, r0, r3
   15358:	bl	152cc <__assert_fail@plt+0x4808>
   1535c:	ldr	r3, [r4, #20]
   15360:	lsr	r1, r3, #24
   15364:	lsl	r2, r3, #8
   15368:	orr	r1, r1, r3, lsl #24
   1536c:	and	r2, r2, #16711680	; 0xff0000
   15370:	lsr	r3, r3, #8
   15374:	orr	r1, r1, r2
   15378:	and	r3, r3, #65280	; 0xff00
   1537c:	orr	r1, r1, r3
   15380:	cmp	r1, #1
   15384:	mov	r5, r0
   15388:	bls	15574 <__assert_fail@plt+0x4ab0>
   1538c:	ldr	r2, [r4, #24]
   15390:	lsr	r3, r2, #24
   15394:	lsl	ip, r2, #8
   15398:	orr	r3, r3, r2, lsl #24
   1539c:	and	ip, ip, #16711680	; 0xff0000
   153a0:	lsr	r2, r2, #8
   153a4:	and	r2, r2, #65280	; 0xff00
   153a8:	orr	r3, r3, ip
   153ac:	orr	r3, r3, r2
   153b0:	cmp	r1, r3
   153b4:	movcs	r2, #0
   153b8:	movcc	r2, #1
   153bc:	cmp	r3, #17
   153c0:	movls	r3, r2
   153c4:	orrhi	r3, r2, #1
   153c8:	cmp	r3, #0
   153cc:	bne	15574 <__assert_fail@plt+0x4ab0>
   153d0:	ldr	r2, [r4, #4]
   153d4:	lsr	r3, r2, #24
   153d8:	lsl	ip, r2, #8
   153dc:	orr	r3, r3, r2, lsl #24
   153e0:	and	ip, ip, #16711680	; 0xff0000
   153e4:	lsr	r2, r2, #8
   153e8:	orr	r3, r3, ip
   153ec:	and	r2, r2, #65280	; 0xff00
   153f0:	orr	r3, r3, r2
   153f4:	cmp	r0, r3
   153f8:	bhi	15564 <__assert_fail@plt+0x4aa0>
   153fc:	cmp	r3, #0
   15400:	blt	15564 <__assert_fail@plt+0x4aa0>
   15404:	ldr	ip, [r4, #16]
   15408:	lsr	r2, ip, #24
   1540c:	lsl	lr, ip, #8
   15410:	orr	r2, r2, ip, lsl #24
   15414:	and	lr, lr, #16711680	; 0xff0000
   15418:	lsr	ip, ip, #8
   1541c:	and	ip, ip, #65280	; 0xff00
   15420:	orr	r2, r2, lr
   15424:	orr	r2, r2, ip
   15428:	cmp	r0, r2
   1542c:	movhi	ip, #0
   15430:	movls	ip, #1
   15434:	cmp	r3, r2
   15438:	movcc	ip, #0
   1543c:	cmp	ip, #0
   15440:	beq	15564 <__assert_fail@plt+0x4aa0>
   15444:	ldr	ip, [r4, #8]
   15448:	lsr	r2, ip, #24
   1544c:	lsr	lr, ip, #8
   15450:	orr	r2, r2, ip, lsl #24
   15454:	and	lr, lr, #65280	; 0xff00
   15458:	lsl	ip, ip, #8
   1545c:	and	ip, ip, #16711680	; 0xff0000
   15460:	orr	r2, r2, lr
   15464:	orr	r2, r2, ip
   15468:	cmp	r0, r2
   1546c:	movhi	ip, #0
   15470:	movls	ip, #1
   15474:	cmp	r3, r2
   15478:	movcc	ip, #0
   1547c:	cmp	r1, #16
   15480:	bhi	15518 <__assert_fail@plt+0x4a54>
   15484:	cmp	ip, #0
   15488:	beq	15564 <__assert_fail@plt+0x4aa0>
   1548c:	ldr	r1, [r4, #12]
   15490:	lsr	r2, r1, #24
   15494:	lsl	ip, r1, #8
   15498:	orr	r2, r2, r1, lsl #24
   1549c:	and	ip, ip, #16711680	; 0xff0000
   154a0:	lsr	r1, r1, #8
   154a4:	orr	r2, r2, ip
   154a8:	and	r1, r1, #65280	; 0xff00
   154ac:	orr	r2, r2, r1
   154b0:	cmp	r5, r2
   154b4:	movhi	r0, #0
   154b8:	movls	r0, #1
   154bc:	cmp	r3, r2
   154c0:	movcc	r0, #0
   154c4:	cmp	r0, #0
   154c8:	beq	15564 <__assert_fail@plt+0x4aa0>
   154cc:	ldr	r0, [r4, #32]
   154d0:	lsr	r1, r0, #24
   154d4:	lsl	ip, r0, #8
   154d8:	orr	r1, r1, r0, lsl #24
   154dc:	and	ip, ip, #16711680	; 0xff0000
   154e0:	lsr	r0, r0, #8
   154e4:	and	r0, r0, #65280	; 0xff00
   154e8:	orr	r1, r1, ip
   154ec:	orr	r1, r1, r0
   154f0:	adds	r2, r1, r2
   154f4:	movcc	r1, #1
   154f8:	movcs	r1, #0
   154fc:	cmp	r3, r2
   15500:	movcc	r2, #0
   15504:	andcs	r2, r1, #1
   15508:	cmp	r2, #0
   1550c:	mvneq	r0, #7
   15510:	movne	r0, #0
   15514:	pop	{r4, r5, r6, pc}
   15518:	cmp	ip, #0
   1551c:	beq	15564 <__assert_fail@plt+0x4aa0>
   15520:	ldr	ip, [r4, #36]	; 0x24
   15524:	lsr	r1, ip, #24
   15528:	lsl	lr, ip, #8
   1552c:	orr	r1, r1, ip, lsl #24
   15530:	and	lr, lr, #16711680	; 0xff0000
   15534:	lsr	ip, ip, #8
   15538:	orr	r1, r1, lr
   1553c:	and	ip, ip, #65280	; 0xff00
   15540:	orr	r1, r1, ip
   15544:	adds	r2, r2, r1
   15548:	movcc	r1, #1
   1554c:	movcs	r1, #0
   15550:	cmp	r3, r2
   15554:	movcc	r2, #0
   15558:	andcs	r2, r1, #1
   1555c:	cmp	r2, #0
   15560:	bne	1548c <__assert_fail@plt+0x49c8>
   15564:	mvn	r0, #7
   15568:	pop	{r4, r5, r6, pc}
   1556c:	mvn	r0, #8
   15570:	bx	lr
   15574:	mvn	r0, #9
   15578:	pop	{r4, r5, r6, pc}
   1557c:	andle	pc, sp, sp, ror #29
   15580:	push	{r4, r5, lr}
   15584:	ldr	ip, [r0, #8]
   15588:	lsr	r3, ip, #24
   1558c:	lsl	lr, ip, #8
   15590:	orr	r3, r3, ip, lsl #24
   15594:	and	lr, lr, #16711680	; 0xff0000
   15598:	lsr	ip, ip, #8
   1559c:	orr	r3, r3, lr
   155a0:	and	ip, ip, #65280	; 0xff00
   155a4:	orr	r3, r3, ip
   155a8:	adds	r3, r1, r3
   155ac:	bcs	1564c <__assert_fail@plt+0x4b88>
   155b0:	adds	r5, r3, r2
   155b4:	bcs	1564c <__assert_fail@plt+0x4b88>
   155b8:	ldr	ip, [r0, #4]
   155bc:	lsr	lr, ip, #24
   155c0:	lsl	r4, ip, #8
   155c4:	orr	lr, lr, ip, lsl #24
   155c8:	and	r4, r4, #16711680	; 0xff0000
   155cc:	lsr	ip, ip, #8
   155d0:	orr	lr, lr, r4
   155d4:	and	ip, ip, #65280	; 0xff00
   155d8:	orr	ip, lr, ip
   155dc:	cmp	r5, ip
   155e0:	bhi	1564c <__assert_fail@plt+0x4b88>
   155e4:	ldr	ip, [r0, #20]
   155e8:	lsr	lr, ip, #24
   155ec:	lsl	r4, ip, #8
   155f0:	orr	lr, lr, ip, lsl #24
   155f4:	and	r4, r4, #16711680	; 0xff0000
   155f8:	lsr	ip, ip, #8
   155fc:	orr	lr, lr, r4
   15600:	and	ip, ip, #65280	; 0xff00
   15604:	orr	ip, lr, ip
   15608:	cmp	ip, #16
   1560c:	bls	15644 <__assert_fail@plt+0x4b80>
   15610:	adds	r1, r1, r2
   15614:	bcs	1564c <__assert_fail@plt+0x4b88>
   15618:	ldr	r2, [r0, #36]	; 0x24
   1561c:	lsr	ip, r2, #24
   15620:	lsl	lr, r2, #8
   15624:	orr	ip, ip, r2, lsl #24
   15628:	and	lr, lr, #16711680	; 0xff0000
   1562c:	lsr	r2, r2, #8
   15630:	orr	ip, ip, lr
   15634:	and	r2, r2, #65280	; 0xff00
   15638:	orr	r2, ip, r2
   1563c:	cmp	r1, r2
   15640:	bhi	1564c <__assert_fail@plt+0x4b88>
   15644:	add	r0, r0, r3
   15648:	pop	{r4, r5, pc}
   1564c:	mov	r0, #0
   15650:	pop	{r4, r5, pc}
   15654:	mvn	r3, #7
   15658:	push	{r4, r5, r6, r7, r8, lr}
   1565c:	mov	r6, r2
   15660:	str	r3, [r2]
   15664:	mov	r2, #4
   15668:	mov	r7, r0
   1566c:	mov	r8, r1
   15670:	bl	15580 <__assert_fail@plt+0x4abc>
   15674:	cmp	r0, #0
   15678:	beq	15708 <__assert_fail@plt+0x4c44>
   1567c:	ldr	r3, [r0]
   15680:	mvn	r2, #10
   15684:	str	r2, [r6]
   15688:	lsr	r5, r3, #24
   1568c:	lsl	r2, r3, #8
   15690:	orr	r5, r5, r3, lsl #24
   15694:	and	r2, r2, #16711680	; 0xff0000
   15698:	lsr	r3, r3, #8
   1569c:	and	r3, r3, #65280	; 0xff00
   156a0:	orr	r5, r5, r2
   156a4:	orr	r5, r5, r3
   156a8:	sub	r3, r5, #1
   156ac:	add	r4, r8, #4
   156b0:	cmp	r3, #8
   156b4:	addls	pc, pc, r3, lsl #2
   156b8:	b	15708 <__assert_fail@plt+0x4c44>
   156bc:	b	156ec <__assert_fail@plt+0x4c28>
   156c0:	b	157a0 <__assert_fail@plt+0x4cdc>
   156c4:	b	15714 <__assert_fail@plt+0x4c50>
   156c8:	b	157a0 <__assert_fail@plt+0x4cdc>
   156cc:	b	15708 <__assert_fail@plt+0x4c44>
   156d0:	b	15708 <__assert_fail@plt+0x4c44>
   156d4:	b	15708 <__assert_fail@plt+0x4c44>
   156d8:	b	15708 <__assert_fail@plt+0x4c44>
   156dc:	b	157a0 <__assert_fail@plt+0x4cdc>
   156e0:	ldrb	r3, [r0]
   156e4:	cmp	r3, #0
   156e8:	beq	157a0 <__assert_fail@plt+0x4cdc>
   156ec:	mov	r1, r4
   156f0:	mov	r2, #1
   156f4:	mov	r0, r7
   156f8:	bl	15580 <__assert_fail@plt+0x4abc>
   156fc:	add	r4, r4, #1
   15700:	cmp	r0, #0
   15704:	bne	156e0 <__assert_fail@plt+0x4c1c>
   15708:	mov	r5, #9
   1570c:	mov	r0, r5
   15710:	pop	{r4, r5, r6, r7, r8, pc}
   15714:	mov	r1, r4
   15718:	mov	r2, #4
   1571c:	mov	r0, r7
   15720:	bl	15580 <__assert_fail@plt+0x4abc>
   15724:	cmp	r0, #0
   15728:	beq	15708 <__assert_fail@plt+0x4c44>
   1572c:	ldr	r3, [r0]
   15730:	ldr	r2, [r7, #20]
   15734:	add	r1, r8, #12
   15738:	lsr	r4, r3, #24
   1573c:	lsl	ip, r3, #8
   15740:	orr	r4, r4, r3, lsl #24
   15744:	and	ip, ip, #16711680	; 0xff0000
   15748:	lsr	r0, r3, #8
   1574c:	orr	r4, r4, ip
   15750:	lsr	r3, r2, #24
   15754:	lsl	ip, r2, #8
   15758:	orr	r3, r3, r2, lsl #24
   1575c:	and	ip, ip, #16711680	; 0xff0000
   15760:	lsr	r2, r2, #8
   15764:	orr	r3, r3, ip
   15768:	and	r2, r2, #65280	; 0xff00
   1576c:	orr	r2, r3, r2
   15770:	and	r0, r0, #65280	; 0xff00
   15774:	cmp	r2, #15
   15778:	orr	r4, r4, r0
   1577c:	movls	r3, #1
   15780:	movhi	r3, #0
   15784:	cmp	r4, #7
   15788:	movls	r3, #0
   1578c:	cmp	r3, #0
   15790:	add	r4, r1, r4
   15794:	beq	157a0 <__assert_fail@plt+0x4cdc>
   15798:	tst	r1, #7
   1579c:	addne	r4, r4, #4
   157a0:	mov	r0, r7
   157a4:	sub	r2, r4, r8
   157a8:	mov	r1, r8
   157ac:	bl	15580 <__assert_fail@plt+0x4abc>
   157b0:	cmp	r0, #0
   157b4:	beq	15708 <__assert_fail@plt+0x4c44>
   157b8:	add	r4, r4, #3
   157bc:	bic	r4, r4, #3
   157c0:	str	r4, [r6]
   157c4:	mov	r0, r5
   157c8:	pop	{r4, r5, r6, r7, r8, pc}
   157cc:	push	{lr}		; (str lr, [sp, #-4]!)
   157d0:	sub	sp, sp, #12
   157d4:	subs	r3, r1, #0
   157d8:	str	r1, [sp, #4]
   157dc:	blt	15804 <__assert_fail@plt+0x4d40>
   157e0:	tst	r3, #3
   157e4:	bne	15804 <__assert_fail@plt+0x4d40>
   157e8:	add	r2, sp, #4
   157ec:	bl	15654 <__assert_fail@plt+0x4b90>
   157f0:	cmp	r0, #1
   157f4:	bne	15804 <__assert_fail@plt+0x4d40>
   157f8:	ldr	r0, [sp, #4]
   157fc:	add	sp, sp, #12
   15800:	pop	{pc}		; (ldr pc, [sp], #4)
   15804:	mvn	r0, #3
   15808:	b	157fc <__assert_fail@plt+0x4d38>
   1580c:	push	{lr}		; (str lr, [sp, #-4]!)
   15810:	sub	sp, sp, #12
   15814:	subs	r3, r1, #0
   15818:	str	r1, [sp, #4]
   1581c:	blt	15844 <__assert_fail@plt+0x4d80>
   15820:	tst	r3, #3
   15824:	bne	15844 <__assert_fail@plt+0x4d80>
   15828:	add	r2, sp, #4
   1582c:	bl	15654 <__assert_fail@plt+0x4b90>
   15830:	cmp	r0, #3
   15834:	bne	15844 <__assert_fail@plt+0x4d80>
   15838:	ldr	r0, [sp, #4]
   1583c:	add	sp, sp, #12
   15840:	pop	{pc}		; (ldr pc, [sp], #4)
   15844:	mvn	r0, #3
   15848:	b	1583c <__assert_fail@plt+0x4d78>
   1584c:	ldr	r3, [pc, #244]	; 15948 <__assert_fail@plt+0x4e84>
   15850:	ldr	ip, [pc, #244]	; 1594c <__assert_fail@plt+0x4e88>
   15854:	add	r3, pc, r3
   15858:	push	{r4, r5, r6, r7, r8, lr}
   1585c:	sub	sp, sp, #8
   15860:	ldr	r8, [r3, ip]
   15864:	mov	r4, #0
   15868:	cmp	r1, #0
   1586c:	ldr	r3, [r8]
   15870:	mov	r5, r2
   15874:	str	r4, [sp]
   15878:	mov	r6, r0
   1587c:	str	r3, [sp, #4]
   15880:	bge	15924 <__assert_fail@plt+0x4e60>
   15884:	mov	r7, sp
   15888:	mov	r2, r7
   1588c:	mov	r1, r4
   15890:	mov	r0, r6
   15894:	bl	15654 <__assert_fail@plt+0x4b90>
   15898:	cmp	r0, #2
   1589c:	beq	158b8 <__assert_fail@plt+0x4df4>
   158a0:	cmp	r0, #9
   158a4:	beq	15908 <__assert_fail@plt+0x4e44>
   158a8:	cmp	r0, #1
   158ac:	beq	158dc <__assert_fail@plt+0x4e18>
   158b0:	ldr	r4, [sp]
   158b4:	b	15888 <__assert_fail@plt+0x4dc4>
   158b8:	cmp	r5, #0
   158bc:	beq	158b0 <__assert_fail@plt+0x4dec>
   158c0:	ldr	r3, [r5]
   158c4:	sub	r3, r3, #1
   158c8:	cmp	r3, #0
   158cc:	str	r3, [r5]
   158d0:	bge	158b0 <__assert_fail@plt+0x4dec>
   158d4:	ldr	r4, [sp]
   158d8:	b	158ec <__assert_fail@plt+0x4e28>
   158dc:	cmp	r5, #0
   158e0:	ldrne	r3, [r5]
   158e4:	addne	r3, r3, #1
   158e8:	strne	r3, [r5]
   158ec:	ldr	r2, [sp, #4]
   158f0:	ldr	r3, [r8]
   158f4:	mov	r0, r4
   158f8:	cmp	r2, r3
   158fc:	bne	15944 <__assert_fail@plt+0x4e80>
   15900:	add	sp, sp, #8
   15904:	pop	{r4, r5, r6, r7, r8, pc}
   15908:	ldr	r4, [sp]
   1590c:	cmp	r4, #0
   15910:	bge	1593c <__assert_fail@plt+0x4e78>
   15914:	cmp	r5, #0
   15918:	cmneq	r4, #8
   1591c:	mvneq	r4, #0
   15920:	b	158ec <__assert_fail@plt+0x4e28>
   15924:	bl	157cc <__assert_fail@plt+0x4d08>
   15928:	cmp	r0, #0
   1592c:	mov	r4, r0
   15930:	str	r0, [sp]
   15934:	bge	15884 <__assert_fail@plt+0x4dc0>
   15938:	b	158ec <__assert_fail@plt+0x4e28>
   1593c:	mvn	r4, #0
   15940:	b	158ec <__assert_fail@plt+0x4e28>
   15944:	bl	10980 <__stack_chk_fail@plt>
   15948:	strdeq	r1, [r1], -r0
   1594c:	muleq	r0, ip, r0
   15950:	ldr	r3, [pc, #96]	; 159b8 <__assert_fail@plt+0x4ef4>
   15954:	ldr	ip, [pc, #96]	; 159bc <__assert_fail@plt+0x4ef8>
   15958:	add	r3, pc, r3
   1595c:	push	{r4, lr}
   15960:	sub	sp, sp, #8
   15964:	ldr	r4, [r3, ip]
   15968:	mov	lr, #0
   1596c:	mov	r2, sp
   15970:	ldr	r3, [r4]
   15974:	str	lr, [sp]
   15978:	str	r3, [sp, #4]
   1597c:	bl	1584c <__assert_fail@plt+0x4d88>
   15980:	cmp	r0, #0
   15984:	blt	159ac <__assert_fail@plt+0x4ee8>
   15988:	ldr	r3, [sp]
   1598c:	cmp	r3, #1
   15990:	mvnne	r0, #0
   15994:	ldr	r2, [sp, #4]
   15998:	ldr	r3, [r4]
   1599c:	cmp	r2, r3
   159a0:	bne	159b4 <__assert_fail@plt+0x4ef0>
   159a4:	add	sp, sp, #8
   159a8:	pop	{r4, pc}
   159ac:	mvn	r0, #0
   159b0:	b	15994 <__assert_fail@plt+0x4ed0>
   159b4:	bl	10980 <__stack_chk_fail@plt>
   159b8:	andeq	r1, r1, ip, ror #11
   159bc:	muleq	r0, ip, r0
   159c0:	ldr	r3, [pc, #124]	; 15a44 <__assert_fail@plt+0x4f80>
   159c4:	ldr	r2, [pc, #124]	; 15a48 <__assert_fail@plt+0x4f84>
   159c8:	add	r3, pc, r3
   159cc:	push	{r4, r5, r6, lr}
   159d0:	sub	sp, sp, #8
   159d4:	ldr	r6, [r3, r2]
   159d8:	mov	r2, #1
   159dc:	mov	r5, r0
   159e0:	ldr	r3, [r6]
   159e4:	mov	r4, sp
   159e8:	str	r2, [sp]
   159ec:	str	r3, [sp, #4]
   159f0:	b	15a08 <__assert_fail@plt+0x4f44>
   159f4:	ldr	r3, [sp]
   159f8:	cmp	r3, #0
   159fc:	ble	15a1c <__assert_fail@plt+0x4f58>
   15a00:	cmp	r3, #1
   15a04:	beq	15a38 <__assert_fail@plt+0x4f74>
   15a08:	mov	r2, r4
   15a0c:	mov	r0, r5
   15a10:	bl	1584c <__assert_fail@plt+0x4d88>
   15a14:	subs	r1, r0, #0
   15a18:	bge	159f4 <__assert_fail@plt+0x4f30>
   15a1c:	mvn	r0, #0
   15a20:	ldr	r2, [sp, #4]
   15a24:	ldr	r3, [r6]
   15a28:	cmp	r2, r3
   15a2c:	bne	15a40 <__assert_fail@plt+0x4f7c>
   15a30:	add	sp, sp, #8
   15a34:	pop	{r4, r5, r6, pc}
   15a38:	mov	r0, r1
   15a3c:	b	15a20 <__assert_fail@plt+0x4f5c>
   15a40:	bl	10980 <__stack_chk_fail@plt>
   15a44:	andeq	r1, r1, ip, ror r5
   15a48:	muleq	r0, ip, r0
   15a4c:	push	{r4, r5, r6, r7, r8, lr}
   15a50:	mov	r4, r0
   15a54:	mov	r0, r2
   15a58:	mov	r5, r1
   15a5c:	mov	r7, r2
   15a60:	bl	10a10 <strlen@plt>
   15a64:	add	r6, r0, #1
   15a68:	sub	r5, r5, r6
   15a6c:	adds	r5, r4, r5
   15a70:	bcc	15a84 <__assert_fail@plt+0x4fc0>
   15a74:	b	15aa4 <__assert_fail@plt+0x4fe0>
   15a78:	add	r4, r4, #1
   15a7c:	cmp	r5, r4
   15a80:	bcc	15aa4 <__assert_fail@plt+0x4fe0>
   15a84:	mov	r2, r6
   15a88:	mov	r1, r7
   15a8c:	mov	r0, r4
   15a90:	bl	10974 <memcmp@plt>
   15a94:	cmp	r0, #0
   15a98:	bne	15a78 <__assert_fail@plt+0x4fb4>
   15a9c:	mov	r0, r4
   15aa0:	pop	{r4, r5, r6, r7, r8, pc}
   15aa4:	mov	r0, #0
   15aa8:	pop	{r4, r5, r6, r7, r8, pc}
   15aac:	push	{r4, r5, r6, r7, r8, lr}
   15ab0:	mov	r5, r1
   15ab4:	mov	r6, r2
   15ab8:	mov	r7, r0
   15abc:	bl	151e8 <__assert_fail@plt+0x4724>
   15ac0:	subs	r4, r0, #0
   15ac4:	bne	15b00 <__assert_fail@plt+0x503c>
   15ac8:	ldr	r3, [r7, #4]
   15acc:	lsr	r0, r3, #24
   15ad0:	lsl	r2, r3, #8
   15ad4:	orr	r0, r0, r3, lsl #24
   15ad8:	and	r2, r2, #16711680	; 0xff0000
   15adc:	lsr	r3, r3, #8
   15ae0:	orr	r0, r0, r2
   15ae4:	and	r3, r3, #65280	; 0xff00
   15ae8:	orr	r2, r0, r3
   15aec:	cmp	r6, r2
   15af0:	bcc	15b08 <__assert_fail@plt+0x5044>
   15af4:	mov	r1, r7
   15af8:	mov	r0, r5
   15afc:	bl	10944 <memmove@plt>
   15b00:	mov	r0, r4
   15b04:	pop	{r4, r5, r6, r7, r8, pc}
   15b08:	mvn	r4, #2
   15b0c:	b	15b00 <__assert_fail@plt+0x503c>
   15b10:	ldr	ip, [pc, #132]	; 15b9c <__assert_fail@plt+0x50d8>
   15b14:	push	{r4, r5, r6, lr}
   15b18:	add	ip, pc, ip
   15b1c:	ldr	lr, [pc, #124]	; 15ba0 <__assert_fail@plt+0x50dc>
   15b20:	sub	sp, sp, #16
   15b24:	ldr	r4, [ip, lr]
   15b28:	add	lr, sp, #8
   15b2c:	str	lr, [sp]
   15b30:	ldr	ip, [r4]
   15b34:	ldr	r5, [sp, #32]
   15b38:	ldr	r6, [sp, #36]	; 0x24
   15b3c:	str	ip, [sp, #12]
   15b40:	bl	13060 <__assert_fail@plt+0x259c>
   15b44:	cmp	r0, #0
   15b48:	ldreq	r0, [sp, #8]
   15b4c:	beq	15b78 <__assert_fail@plt+0x50b4>
   15b50:	ldr	r2, [sp, #40]	; 0x28
   15b54:	ldr	r3, [sp, #8]
   15b58:	add	r2, r2, r5
   15b5c:	cmp	r2, r3
   15b60:	bhi	15b90 <__assert_fail@plt+0x50cc>
   15b64:	mov	r1, r6
   15b68:	add	r0, r0, r5
   15b6c:	ldr	r2, [sp, #40]	; 0x28
   15b70:	bl	10968 <memcpy@plt>
   15b74:	mov	r0, #0
   15b78:	ldr	r2, [sp, #12]
   15b7c:	ldr	r3, [r4]
   15b80:	cmp	r2, r3
   15b84:	bne	15b98 <__assert_fail@plt+0x50d4>
   15b88:	add	sp, sp, #16
   15b8c:	pop	{r4, r5, r6, pc}
   15b90:	mvn	r0, #2
   15b94:	b	15b78 <__assert_fail@plt+0x50b4>
   15b98:	bl	10980 <__stack_chk_fail@plt>
   15b9c:	andeq	r1, r1, ip, lsr #8
   15ba0:	muleq	r0, ip, r0
   15ba4:	ldr	ip, [pc, #156]	; 15c48 <__assert_fail@plt+0x5184>
   15ba8:	push	{r4, r5, r6, r7, r8, r9, lr}
   15bac:	add	ip, pc, ip
   15bb0:	ldr	lr, [pc, #148]	; 15c4c <__assert_fail@plt+0x5188>
   15bb4:	sub	sp, sp, #28
   15bb8:	mov	r7, r3
   15bbc:	ldr	r4, [ip, lr]
   15bc0:	add	r3, sp, #16
   15bc4:	mov	r8, r0
   15bc8:	ldr	ip, [r4]
   15bcc:	mov	r9, r1
   15bd0:	str	ip, [sp, #20]
   15bd4:	mov	r5, r2
   15bd8:	bl	1326c <__assert_fail@plt+0x27a8>
   15bdc:	cmp	r0, #0
   15be0:	ldreq	r0, [sp, #16]
   15be4:	beq	15c24 <__assert_fail@plt+0x5160>
   15be8:	ldr	r6, [sp, #16]
   15bec:	ldr	r3, [sp, #56]	; 0x38
   15bf0:	cmp	r6, r3
   15bf4:	bne	15c3c <__assert_fail@plt+0x5178>
   15bf8:	mov	r0, r5
   15bfc:	bl	10a10 <strlen@plt>
   15c00:	mov	r3, #0
   15c04:	str	r3, [sp]
   15c08:	str	r6, [sp, #8]
   15c0c:	str	r7, [sp, #4]
   15c10:	mov	r2, r5
   15c14:	mov	r1, r9
   15c18:	mov	r3, r0
   15c1c:	mov	r0, r8
   15c20:	bl	15b10 <__assert_fail@plt+0x504c>
   15c24:	ldr	r2, [sp, #20]
   15c28:	ldr	r3, [r4]
   15c2c:	cmp	r2, r3
   15c30:	bne	15c44 <__assert_fail@plt+0x5180>
   15c34:	add	sp, sp, #28
   15c38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15c3c:	mvn	r0, #2
   15c40:	b	15c24 <__assert_fail@plt+0x5160>
   15c44:	bl	10980 <__stack_chk_fail@plt>
   15c48:	muleq	r1, r8, r3
   15c4c:	muleq	r0, ip, r0
   15c50:	ldr	ip, [pc, #112]	; 15cc8 <__assert_fail@plt+0x5204>
   15c54:	push	{r4, lr}
   15c58:	add	ip, pc, ip
   15c5c:	ldr	lr, [pc, #104]	; 15ccc <__assert_fail@plt+0x5208>
   15c60:	sub	sp, sp, #8
   15c64:	mov	r3, sp
   15c68:	ldr	r4, [ip, lr]
   15c6c:	ldr	ip, [r4]
   15c70:	str	ip, [sp, #4]
   15c74:	bl	13020 <__assert_fail@plt+0x255c>
   15c78:	cmp	r0, #0
   15c7c:	ldreq	r0, [sp]
   15c80:	beq	15cac <__assert_fail@plt+0x51e8>
   15c84:	ldr	r3, [sp]
   15c88:	add	r3, r3, #12
   15c8c:	add	r3, r0, r3
   15c90:	cmp	r0, r3
   15c94:	bcs	15ca8 <__assert_fail@plt+0x51e4>
   15c98:	mov	r2, #67108864	; 0x4000000
   15c9c:	str	r2, [r0], #4
   15ca0:	cmp	r0, r3
   15ca4:	bcc	15c9c <__assert_fail@plt+0x51d8>
   15ca8:	mov	r0, #0
   15cac:	ldr	r2, [sp, #4]
   15cb0:	ldr	r3, [r4]
   15cb4:	cmp	r2, r3
   15cb8:	bne	15cc4 <__assert_fail@plt+0x5200>
   15cbc:	add	sp, sp, #8
   15cc0:	pop	{r4, pc}
   15cc4:	bl	10980 <__stack_chk_fail@plt>
   15cc8:	andeq	r1, r1, ip, ror #5
   15ccc:	muleq	r0, ip, r0
   15cd0:	ldr	r3, [pc, #112]	; 15d48 <__assert_fail@plt+0x5284>
   15cd4:	ldr	r2, [pc, #112]	; 15d4c <__assert_fail@plt+0x5288>
   15cd8:	add	r3, pc, r3
   15cdc:	push	{r4, r5, r6, lr}
   15ce0:	sub	sp, sp, #8
   15ce4:	ldr	r6, [r3, r2]
   15ce8:	mov	ip, #0
   15cec:	cmp	r1, #0
   15cf0:	ldr	r3, [r6]
   15cf4:	str	ip, [sp]
   15cf8:	str	r3, [sp, #4]
   15cfc:	blt	15d28 <__assert_fail@plt+0x5264>
   15d00:	mov	r4, r0
   15d04:	mov	r5, sp
   15d08:	mov	r2, r5
   15d0c:	mov	r0, r4
   15d10:	bl	1584c <__assert_fail@plt+0x4d88>
   15d14:	ldr	r3, [sp]
   15d18:	cmp	r3, #0
   15d1c:	cmpge	r0, #0
   15d20:	mov	r1, r0
   15d24:	bge	15d08 <__assert_fail@plt+0x5244>
   15d28:	ldr	r2, [sp, #4]
   15d2c:	ldr	r3, [r6]
   15d30:	mov	r0, r1
   15d34:	cmp	r2, r3
   15d38:	bne	15d44 <__assert_fail@plt+0x5280>
   15d3c:	add	sp, sp, #8
   15d40:	pop	{r4, r5, r6, pc}
   15d44:	bl	10980 <__stack_chk_fail@plt>
   15d48:	andeq	r1, r1, ip, ror #4
   15d4c:	muleq	r0, ip, r0
   15d50:	push	{r4, r5, r6, lr}
   15d54:	mov	r6, r0
   15d58:	mov	r5, r1
   15d5c:	bl	15cd0 <__assert_fail@plt+0x520c>
   15d60:	subs	r4, r0, #0
   15d64:	blt	15d9c <__assert_fail@plt+0x52d8>
   15d68:	mov	r1, r5
   15d6c:	mov	r0, r6
   15d70:	mov	r2, #0
   15d74:	bl	15580 <__assert_fail@plt+0x4abc>
   15d78:	sub	r1, r4, r5
   15d7c:	add	r1, r0, r1
   15d80:	cmp	r0, r1
   15d84:	bcs	15d98 <__assert_fail@plt+0x52d4>
   15d88:	mov	r3, #67108864	; 0x4000000
   15d8c:	str	r3, [r0], #4
   15d90:	cmp	r0, r1
   15d94:	bcc	15d8c <__assert_fail@plt+0x52c8>
   15d98:	mov	r4, #0
   15d9c:	mov	r0, r4
   15da0:	pop	{r4, r5, r6, pc}
   15da4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15da8:	mov	r7, r0
   15dac:	ldr	r6, [pc, #72]	; 15dfc <__assert_fail@plt+0x5338>
   15db0:	ldr	r5, [pc, #72]	; 15e00 <__assert_fail@plt+0x533c>
   15db4:	add	r6, pc, r6
   15db8:	add	r5, pc, r5
   15dbc:	sub	r6, r6, r5
   15dc0:	mov	r8, r1
   15dc4:	mov	r9, r2
   15dc8:	bl	10900 <strcmp@plt-0x20>
   15dcc:	asrs	r6, r6, #2
   15dd0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15dd4:	mov	r4, #0
   15dd8:	add	r4, r4, #1
   15ddc:	ldr	r3, [r5], #4
   15de0:	mov	r2, r9
   15de4:	mov	r1, r8
   15de8:	mov	r0, r7
   15dec:	blx	r3
   15df0:	cmp	r6, r4
   15df4:	bne	15dd8 <__assert_fail@plt+0x5314>
   15df8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15dfc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15e00:	andeq	r0, r1, r8, lsl #31
   15e04:	bx	lr

Disassembly of section .fini:

00015e08 <.fini>:
   15e08:	push	{r3, lr}
   15e0c:	pop	{r3, pc}
