
raspbian-preinstalled/expr:     file format elf32-littlearm


Disassembly of section .init:

00010d98 <.init>:
   10d98:	push	{r3, lr}
   10d9c:	bl	112c8 <__assert_fail@plt+0x270>
   10da0:	pop	{r3, pc}

Disassembly of section .plt:

00010da4 <calloc@plt-0x14>:
   10da4:	push	{lr}		; (str lr, [sp, #-4]!)
   10da8:	ldr	lr, [pc, #4]	; 10db4 <calloc@plt-0x4>
   10dac:	add	lr, pc, lr
   10db0:	ldr	pc, [lr, #8]!
   10db4:	andeq	r8, r1, ip, asr #4

00010db8 <calloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #24, 20	; 0x18000
   10dc0:	ldr	pc, [ip, #588]!	; 0x24c

00010dc4 <fputs_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #24, 20	; 0x18000
   10dcc:	ldr	pc, [ip, #580]!	; 0x244

00010dd0 <raise@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #24, 20	; 0x18000
   10dd8:	ldr	pc, [ip, #572]!	; 0x23c

00010ddc <strcmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #24, 20	; 0x18000
   10de4:	ldr	pc, [ip, #564]!	; 0x234

00010de8 <strcspn@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #24, 20	; 0x18000
   10df0:	ldr	pc, [ip, #556]!	; 0x22c

00010df4 <fflush@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #24, 20	; 0x18000
   10dfc:	ldr	pc, [ip, #548]!	; 0x224

00010e00 <wcwidth@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #24, 20	; 0x18000
   10e08:	ldr	pc, [ip, #540]!	; 0x21c

00010e0c <free@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #24, 20	; 0x18000
   10e14:	ldr	pc, [ip, #532]!	; 0x214

00010e18 <_exit@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #24, 20	; 0x18000
   10e20:	ldr	pc, [ip, #524]!	; 0x20c

00010e24 <memcpy@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #24, 20	; 0x18000
   10e2c:	ldr	pc, [ip, #516]!	; 0x204

00010e30 <mbsinit@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #24, 20	; 0x18000
   10e38:	ldr	pc, [ip, #508]!	; 0x1fc

00010e3c <memcmp@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #24, 20	; 0x18000
   10e44:	ldr	pc, [ip, #500]!	; 0x1f4

00010e48 <dcgettext@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #24, 20	; 0x18000
   10e50:	ldr	pc, [ip, #492]!	; 0x1ec

00010e54 <__stack_chk_fail@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #24, 20	; 0x18000
   10e5c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e60 <realloc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #24, 20	; 0x18000
   10e68:	ldr	pc, [ip, #476]!	; 0x1dc

00010e6c <textdomain@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #24, 20	; 0x18000
   10e74:	ldr	pc, [ip, #468]!	; 0x1d4

00010e78 <iswcntrl@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #24, 20	; 0x18000
   10e80:	ldr	pc, [ip, #460]!	; 0x1cc

00010e84 <iswprint@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #24, 20	; 0x18000
   10e8c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e90 <fwrite@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #24, 20	; 0x18000
   10e98:	ldr	pc, [ip, #444]!	; 0x1bc

00010e9c <lseek64@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #24, 20	; 0x18000
   10ea4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea8 <regfree@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #24, 20	; 0x18000
   10eb0:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb4 <__ctype_get_mb_cur_max@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #24, 20	; 0x18000
   10ebc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec0 <__fpending@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #24, 20	; 0x18000
   10ec8:	ldr	pc, [ip, #412]!	; 0x19c

00010ecc <mbrtowc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #24, 20	; 0x18000
   10ed4:	ldr	pc, [ip, #404]!	; 0x194

00010ed8 <error@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #24, 20	; 0x18000
   10ee0:	ldr	pc, [ip, #396]!	; 0x18c

00010ee4 <strcoll@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #24, 20	; 0x18000
   10eec:	ldr	pc, [ip, #388]!	; 0x184

00010ef0 <puts@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #24, 20	; 0x18000
   10ef8:	ldr	pc, [ip, #380]!	; 0x17c

00010efc <malloc@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #24, 20	; 0x18000
   10f04:	ldr	pc, [ip, #372]!	; 0x174

00010f08 <__libc_start_main@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #24, 20	; 0x18000
   10f10:	ldr	pc, [ip, #364]!	; 0x16c

00010f14 <__freading@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #24, 20	; 0x18000
   10f1c:	ldr	pc, [ip, #356]!	; 0x164

00010f20 <__gmon_start__@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #24, 20	; 0x18000
   10f28:	ldr	pc, [ip, #348]!	; 0x15c

00010f2c <mempcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #24, 20	; 0x18000
   10f34:	ldr	pc, [ip, #340]!	; 0x154

00010f38 <getopt_long@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #24, 20	; 0x18000
   10f40:	ldr	pc, [ip, #332]!	; 0x14c

00010f44 <__ctype_b_loc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #24, 20	; 0x18000
   10f4c:	ldr	pc, [ip, #324]!	; 0x144

00010f50 <exit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #24, 20	; 0x18000
   10f58:	ldr	pc, [ip, #316]!	; 0x13c

00010f5c <strlen@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #24, 20	; 0x18000
   10f64:	ldr	pc, [ip, #308]!	; 0x134

00010f68 <strchr@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #24, 20	; 0x18000
   10f70:	ldr	pc, [ip, #300]!	; 0x12c

00010f74 <re_match@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #24, 20	; 0x18000
   10f7c:	ldr	pc, [ip, #292]!	; 0x124

00010f80 <__errno_location@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #24, 20	; 0x18000
   10f88:	ldr	pc, [ip, #284]!	; 0x11c

00010f8c <__cxa_atexit@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #24, 20	; 0x18000
   10f94:	ldr	pc, [ip, #276]!	; 0x114

00010f98 <memset@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #24, 20	; 0x18000
   10fa0:	ldr	pc, [ip, #268]!	; 0x10c

00010fa4 <__printf_chk@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #24, 20	; 0x18000
   10fac:	ldr	pc, [ip, #260]!	; 0x104

00010fb0 <fileno@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #24, 20	; 0x18000
   10fb8:	ldr	pc, [ip, #252]!	; 0xfc

00010fbc <__fprintf_chk@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #24, 20	; 0x18000
   10fc4:	ldr	pc, [ip, #244]!	; 0xf4

00010fc8 <memchr@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #24, 20	; 0x18000
   10fd0:	ldr	pc, [ip, #236]!	; 0xec

00010fd4 <fclose@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #24, 20	; 0x18000
   10fdc:	ldr	pc, [ip, #228]!	; 0xe4

00010fe0 <fseeko64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #24, 20	; 0x18000
   10fe8:	ldr	pc, [ip, #220]!	; 0xdc

00010fec <__overflow@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #24, 20	; 0x18000
   10ff4:	ldr	pc, [ip, #212]!	; 0xd4

00010ff8 <setlocale@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #24, 20	; 0x18000
   11000:	ldr	pc, [ip, #204]!	; 0xcc

00011004 <strrchr@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #24, 20	; 0x18000
   1100c:	ldr	pc, [ip, #196]!	; 0xc4

00011010 <nl_langinfo@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #24, 20	; 0x18000
   11018:	ldr	pc, [ip, #188]!	; 0xbc

0001101c <__strtoll_internal@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #24, 20	; 0x18000
   11024:	ldr	pc, [ip, #180]!	; 0xb4

00011028 <bindtextdomain@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #24, 20	; 0x18000
   11030:	ldr	pc, [ip, #172]!	; 0xac

00011034 <re_compile_pattern@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #24, 20	; 0x18000
   1103c:	ldr	pc, [ip, #164]!	; 0xa4

00011040 <strncmp@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #24, 20	; 0x18000
   11048:	ldr	pc, [ip, #156]!	; 0x9c

0001104c <abort@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #24, 20	; 0x18000
   11054:	ldr	pc, [ip, #148]!	; 0x94

00011058 <__assert_fail@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #24, 20	; 0x18000
   11060:	ldr	pc, [ip, #140]!	; 0x8c

Disassembly of section .text:

00011064 <.text>:
   11064:	push	{r4, r5, r6, r7, lr}
   11068:	sub	sp, sp, #60	; 0x3c
   1106c:	ldr	r7, [pc, #464]	; 11244 <__assert_fail@plt+0x1ec>
   11070:	mov	r6, r0
   11074:	ldr	r0, [r1]
   11078:	ldr	r3, [r7]
   1107c:	mov	r5, r1
   11080:	str	r3, [sp, #52]	; 0x34
   11084:	bl	13770 <__assert_fail@plt+0x2718>
   11088:	ldr	r1, [pc, #440]	; 11248 <__assert_fail@plt+0x1f0>
   1108c:	mov	r0, #6
   11090:	bl	10ff8 <setlocale@plt>
   11094:	ldr	r1, [pc, #432]	; 1124c <__assert_fail@plt+0x1f4>
   11098:	ldr	r0, [pc, #432]	; 11250 <__assert_fail@plt+0x1f8>
   1109c:	bl	11028 <bindtextdomain@plt>
   110a0:	ldr	r0, [pc, #424]	; 11250 <__assert_fail@plt+0x1f8>
   110a4:	bl	10e6c <textdomain@plt>
   110a8:	ldr	r3, [pc, #420]	; 11254 <__assert_fail@plt+0x1fc>
   110ac:	mov	r2, #3
   110b0:	ldr	r0, [pc, #416]	; 11258 <__assert_fail@plt+0x200>
   110b4:	str	r2, [r3]
   110b8:	bl	176e4 <__assert_fail@plt+0x668c>
   110bc:	ldr	r2, [pc, #408]	; 1125c <__assert_fail@plt+0x204>
   110c0:	ldr	r3, [pc, #408]	; 11260 <__assert_fail@plt+0x208>
   110c4:	ldr	ip, [pc, #408]	; 11264 <__assert_fail@plt+0x20c>
   110c8:	str	r2, [sp, #12]
   110cc:	ldr	r2, [pc, #404]	; 11268 <__assert_fail@plt+0x210>
   110d0:	ldr	lr, [pc, #404]	; 1126c <__assert_fail@plt+0x214>
   110d4:	str	r3, [sp, #8]
   110d8:	mov	r3, #0
   110dc:	stm	sp, {r2, ip}
   110e0:	str	r3, [sp, #20]
   110e4:	mov	r1, r5
   110e8:	mov	r0, r6
   110ec:	str	lr, [sp, #16]
   110f0:	ldr	r3, [pc, #376]	; 11270 <__assert_fail@plt+0x218>
   110f4:	ldr	r2, [pc, #376]	; 11274 <__assert_fail@plt+0x21c>
   110f8:	bl	13194 <__assert_fail@plt+0x213c>
   110fc:	cmp	r6, #1
   11100:	bls	11214 <__assert_fail@plt+0x1bc>
   11104:	mov	r4, r5
   11108:	ldr	r1, [pc, #360]	; 11278 <__assert_fail@plt+0x220>
   1110c:	ldr	r0, [r4, #4]!
   11110:	bl	10ddc <strcmp@plt>
   11114:	cmp	r0, #0
   11118:	bne	111d4 <__assert_fail@plt+0x17c>
   1111c:	cmp	r6, #2
   11120:	beq	11214 <__assert_fail@plt+0x1bc>
   11124:	ldr	r5, [pc, #336]	; 1127c <__assert_fail@plt+0x224>
   11128:	add	r4, r4, #4
   1112c:	mov	r0, #1
   11130:	str	r4, [r5]
   11134:	bl	12f24 <__assert_fail@plt+0x1ecc>
   11138:	ldr	r5, [r5]
   1113c:	ldr	r3, [r5]
   11140:	cmp	r3, #0
   11144:	mov	r4, r0
   11148:	bne	111dc <__assert_fail@plt+0x184>
   1114c:	ldr	r3, [r0]
   11150:	cmp	r3, #0
   11154:	beq	11188 <__assert_fail@plt+0x130>
   11158:	cmp	r3, #1
   1115c:	bne	11240 <__assert_fail@plt+0x1e8>
   11160:	ldr	r0, [r0, #8]
   11164:	bl	10ef0 <puts@plt>
   11168:	mov	r0, r4
   1116c:	bl	11614 <__assert_fail@plt+0x5bc>
   11170:	ldr	r2, [sp, #52]	; 0x34
   11174:	ldr	r3, [r7]
   11178:	cmp	r2, r3
   1117c:	bne	1123c <__assert_fail@plt+0x1e4>
   11180:	add	sp, sp, #60	; 0x3c
   11184:	pop	{r4, r5, r6, r7, pc}
   11188:	ldr	r5, [pc, #240]	; 11280 <__assert_fail@plt+0x228>
   1118c:	add	r2, sp, #28
   11190:	ldrd	r0, [r0, #8]
   11194:	ldr	r6, [r5]
   11198:	bl	130cc <__assert_fail@plt+0x2074>
   1119c:	mov	r1, r6
   111a0:	bl	10dc4 <fputs_unlocked@plt>
   111a4:	ldr	r0, [r5]
   111a8:	ldr	r3, [r0, #20]
   111ac:	ldr	r2, [r0, #24]
   111b0:	cmp	r3, r2
   111b4:	addcc	r1, r3, #1
   111b8:	movcc	r2, #10
   111bc:	strcc	r1, [r0, #20]
   111c0:	strbcc	r2, [r3]
   111c4:	bcc	11168 <__assert_fail@plt+0x110>
   111c8:	mov	r1, #10
   111cc:	bl	10fec <__overflow@plt>
   111d0:	b	11168 <__assert_fail@plt+0x110>
   111d4:	mov	r4, r5
   111d8:	b	11124 <__assert_fail@plt+0xcc>
   111dc:	mov	r2, #5
   111e0:	ldr	r1, [pc, #156]	; 11284 <__assert_fail@plt+0x22c>
   111e4:	mov	r0, #0
   111e8:	bl	10e48 <dcgettext@plt>
   111ec:	ldr	r2, [r5]
   111f0:	mov	r1, #8
   111f4:	mov	r4, r0
   111f8:	mov	r0, #0
   111fc:	bl	15678 <__assert_fail@plt+0x4620>
   11200:	mov	r2, r4
   11204:	mov	r1, #0
   11208:	mov	r3, r0
   1120c:	mov	r0, #2
   11210:	bl	10ed8 <error@plt>
   11214:	mov	r2, #5
   11218:	ldr	r1, [pc, #104]	; 11288 <__assert_fail@plt+0x230>
   1121c:	mov	r0, #0
   11220:	bl	10e48 <dcgettext@plt>
   11224:	mov	r1, #0
   11228:	mov	r2, r0
   1122c:	mov	r0, r1
   11230:	bl	10ed8 <error@plt>
   11234:	mov	r0, #2
   11238:	bl	117e8 <__assert_fail@plt+0x790>
   1123c:	bl	10e54 <__stack_chk_fail@plt>
   11240:	bl	1104c <abort@plt>
   11244:	andeq	r8, r2, r8, lsl #30
   11248:	andeq	r7, r1, ip, lsl #22
   1124c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11250:	ldrdeq	r7, [r1], -r4
   11254:	strdeq	r9, [r2], -ip
   11258:	strdeq	r2, [r1], -r4
   1125c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   11260:	andeq	r8, r1, r8, lsl #4
   11264:	andeq	r1, r1, r8, ror #15
   11268:	andeq	r8, r1, r4, lsl r2
   1126c:	andeq	r8, r1, ip, ror #3
   11270:	ldrdeq	r7, [r1], -r0
   11274:	andeq	r7, r1, r4, lsr #15
   11278:	andeq	r8, r1, ip, lsl r2
   1127c:	andeq	r9, r2, r4, ror #2
   11280:	andeq	r9, r2, r8, asr r1
   11284:	andeq	r8, r1, r0, lsr r2
   11288:	andeq	r8, r1, r0, lsr #4
   1128c:	mov	fp, #0
   11290:	mov	lr, #0
   11294:	pop	{r1}		; (ldr r1, [sp], #4)
   11298:	mov	r2, sp
   1129c:	push	{r2}		; (str r2, [sp, #-4]!)
   112a0:	push	{r0}		; (str r0, [sp, #-4]!)
   112a4:	ldr	ip, [pc, #16]	; 112bc <__assert_fail@plt+0x264>
   112a8:	push	{ip}		; (str ip, [sp, #-4]!)
   112ac:	ldr	r0, [pc, #12]	; 112c0 <__assert_fail@plt+0x268>
   112b0:	ldr	r3, [pc, #12]	; 112c4 <__assert_fail@plt+0x26c>
   112b4:	bl	10f08 <__libc_start_main@plt>
   112b8:	bl	1104c <abort@plt>
   112bc:	andeq	r7, r1, r0, ror #13
   112c0:	andeq	r1, r1, r4, rrx
   112c4:	andeq	r7, r1, r0, lsl #13
   112c8:	ldr	r3, [pc, #20]	; 112e4 <__assert_fail@plt+0x28c>
   112cc:	ldr	r2, [pc, #20]	; 112e8 <__assert_fail@plt+0x290>
   112d0:	add	r3, pc, r3
   112d4:	ldr	r2, [r3, r2]
   112d8:	cmp	r2, #0
   112dc:	bxeq	lr
   112e0:	b	10f20 <__gmon_start__@plt>
   112e4:	andeq	r7, r1, r8, lsr #26
   112e8:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   112ec:	ldr	r0, [pc, #24]	; 1130c <__assert_fail@plt+0x2b4>
   112f0:	ldr	r3, [pc, #24]	; 11310 <__assert_fail@plt+0x2b8>
   112f4:	cmp	r3, r0
   112f8:	bxeq	lr
   112fc:	ldr	r3, [pc, #16]	; 11314 <__assert_fail@plt+0x2bc>
   11300:	cmp	r3, #0
   11304:	bxeq	lr
   11308:	bx	r3
   1130c:	andeq	r9, r2, r0, asr #2
   11310:	andeq	r9, r2, r0, asr #2
   11314:	andeq	r0, r0, r0
   11318:	ldr	r0, [pc, #36]	; 11344 <__assert_fail@plt+0x2ec>
   1131c:	ldr	r1, [pc, #36]	; 11348 <__assert_fail@plt+0x2f0>
   11320:	sub	r1, r1, r0
   11324:	asr	r1, r1, #2
   11328:	add	r1, r1, r1, lsr #31
   1132c:	asrs	r1, r1, #1
   11330:	bxeq	lr
   11334:	ldr	r3, [pc, #16]	; 1134c <__assert_fail@plt+0x2f4>
   11338:	cmp	r3, #0
   1133c:	bxeq	lr
   11340:	bx	r3
   11344:	andeq	r9, r2, r0, asr #2
   11348:	andeq	r9, r2, r0, asr #2
   1134c:	andeq	r0, r0, r0
   11350:	push	{r4, lr}
   11354:	ldr	r4, [pc, #24]	; 11374 <__assert_fail@plt+0x31c>
   11358:	ldrb	r3, [r4]
   1135c:	cmp	r3, #0
   11360:	popne	{r4, pc}
   11364:	bl	112ec <__assert_fail@plt+0x294>
   11368:	mov	r3, #1
   1136c:	strb	r3, [r4]
   11370:	pop	{r4, pc}
   11374:	andeq	r9, r2, r0, ror #2
   11378:	b	11318 <__assert_fail@plt+0x2c0>
   1137c:	push	{r4, r5, r6, lr}
   11380:	mov	r6, r0
   11384:	ldrd	r4, [r1]
   11388:	ldr	r3, [r2, #4]
   1138c:	ldr	ip, [r2]
   11390:	cmp	r5, #-2147483648	; 0x80000000
   11394:	cmpeq	r4, #0
   11398:	and	r1, ip, r3
   1139c:	movne	r2, #1
   113a0:	moveq	r2, #0
   113a4:	adds	r1, r1, #1
   113a8:	movne	r1, #1
   113ac:	orrs	r2, r2, r1
   113b0:	moveq	r2, #0
   113b4:	moveq	r3, #0
   113b8:	beq	113cc <__assert_fail@plt+0x374>
   113bc:	mov	r2, ip
   113c0:	mov	r0, r4
   113c4:	mov	r1, r5
   113c8:	bl	17438 <__assert_fail@plt+0x63e0>
   113cc:	strd	r2, [r6]
   113d0:	pop	{r4, r5, r6, pc}
   113d4:	push	{r4, r5, r6, lr}
   113d8:	ldr	r5, [pc, #52]	; 11414 <__assert_fail@plt+0x3bc>
   113dc:	ldr	r4, [r5]
   113e0:	ldr	r3, [r4]
   113e4:	cmp	r3, #0
   113e8:	beq	1140c <__assert_fail@plt+0x3b4>
   113ec:	mov	r1, r0
   113f0:	mov	r0, r3
   113f4:	bl	10ddc <strcmp@plt>
   113f8:	clz	r0, r0
   113fc:	lsr	r0, r0, #5
   11400:	add	r4, r4, r0, lsl #2
   11404:	str	r4, [r5]
   11408:	pop	{r4, r5, r6, pc}
   1140c:	mov	r0, r3
   11410:	pop	{r4, r5, r6, pc}
   11414:	andeq	r9, r2, r4, ror #2
   11418:	mov	r3, r0
   1141c:	push	{r4, lr}
   11420:	mov	r1, #34	; 0x22
   11424:	ldr	r2, [pc, #4]	; 11430 <__assert_fail@plt+0x3d8>
   11428:	mov	r0, #3
   1142c:	bl	10ed8 <error@plt>
   11430:	andeq	r7, r1, r4, asr r7
   11434:	push	{r4, r5, r6, r7, r8, lr}
   11438:	ldrd	r4, [r1]
   1143c:	ldm	r2, {r1, r3}
   11440:	subs	r6, r4, r1
   11444:	sbc	r7, r5, r3
   11448:	cmp	r4, r6
   1144c:	sbcs	r2, r5, r7
   11450:	movlt	r2, #1
   11454:	movge	r2, #0
   11458:	cmp	r2, r3, lsr #31
   1145c:	bne	11468 <__assert_fail@plt+0x410>
   11460:	strd	r6, [r0]
   11464:	pop	{r4, r5, r6, r7, r8, pc}
   11468:	mov	r0, #45	; 0x2d
   1146c:	bl	11418 <__assert_fail@plt+0x3c0>
   11470:	push	{r4, r5, r6, r7, r8, lr}
   11474:	ldrd	r4, [r1]
   11478:	ldm	r2, {r1, r3}
   1147c:	adds	r6, r4, r1
   11480:	adc	r7, r5, r3
   11484:	cmp	r6, r4
   11488:	sbcs	r2, r7, r5
   1148c:	movlt	r2, #1
   11490:	movge	r2, #0
   11494:	cmp	r2, r3, lsr #31
   11498:	bne	114a4 <__assert_fail@plt+0x44c>
   1149c:	strd	r6, [r0]
   114a0:	pop	{r4, r5, r6, r7, r8, pc}
   114a4:	mov	r0, #43	; 0x2b
   114a8:	bl	11418 <__assert_fail@plt+0x3c0>
   114ac:	push	{r4, r5, r6, lr}
   114b0:	ldm	r2, {r3, ip}
   114b4:	ldr	r4, [r1]
   114b8:	ldr	r5, [r1, #4]
   114bc:	mul	r1, r4, ip
   114c0:	orrs	r2, r4, r5
   114c4:	moveq	lr, #0
   114c8:	movne	lr, #1
   114cc:	mla	r1, r3, r5, r1
   114d0:	orrs	r2, r3, ip
   114d4:	umull	r2, r3, r4, r3
   114d8:	moveq	lr, #0
   114dc:	cmp	lr, #0
   114e0:	add	r3, r1, r3
   114e4:	beq	114f8 <__assert_fail@plt+0x4a0>
   114e8:	lsr	ip, ip, #31
   114ec:	eor	ip, ip, r5, lsr #31
   114f0:	cmp	ip, r3, lsr #31
   114f4:	bne	11500 <__assert_fail@plt+0x4a8>
   114f8:	strd	r2, [r0]
   114fc:	pop	{r4, r5, r6, pc}
   11500:	mov	r0, #42	; 0x2a
   11504:	bl	11418 <__assert_fail@plt+0x3c0>
   11508:	push	{r4, r5, r6, lr}
   1150c:	ldrd	r4, [r1]
   11510:	ldr	ip, [r2]
   11514:	ldr	r3, [r2, #4]
   11518:	cmp	r5, #-2147483648	; 0x80000000
   1151c:	and	r1, ip, r3
   11520:	cmpeq	r4, #0
   11524:	moveq	r2, #1
   11528:	movne	r2, #0
   1152c:	cmn	r1, #1
   11530:	movne	r1, #0
   11534:	moveq	r1, #1
   11538:	tst	r2, r1
   1153c:	bne	1155c <__assert_fail@plt+0x504>
   11540:	mov	r6, r0
   11544:	mov	r2, ip
   11548:	mov	r0, r4
   1154c:	mov	r1, r5
   11550:	bl	17438 <__assert_fail@plt+0x63e0>
   11554:	strd	r0, [r6]
   11558:	pop	{r4, r5, r6, pc}
   1155c:	mov	r0, #47	; 0x2f
   11560:	bl	11418 <__assert_fail@plt+0x3c0>
   11564:	ldr	r3, [r0]
   11568:	push	{r4, lr}
   1156c:	cmp	r3, #1
   11570:	mov	r4, r0
   11574:	beq	11584 <__assert_fail@plt+0x52c>
   11578:	mov	r0, r4
   1157c:	pop	{r4, lr}
   11580:	b	10e0c <free@plt>
   11584:	ldr	r0, [r0, #8]
   11588:	bl	10e0c <free@plt>
   1158c:	mov	r0, r4
   11590:	pop	{r4, lr}
   11594:	b	10e0c <free@plt>
   11598:	push	{r4, r5, r6, lr}
   1159c:	mov	r5, r0
   115a0:	mov	r0, #16
   115a4:	bl	1619c <__assert_fail@plt+0x5144>
   115a8:	mov	r3, #1
   115ac:	mov	r4, r0
   115b0:	mov	r0, r5
   115b4:	str	r3, [r4]
   115b8:	bl	163c8 <__assert_fail@plt+0x5370>
   115bc:	str	r0, [r4, #8]
   115c0:	mov	r0, r4
   115c4:	pop	{r4, r5, r6, pc}
   115c8:	push	{r4, lr}
   115cc:	mov	r2, #5
   115d0:	ldr	r1, [pc, #52]	; 1160c <__assert_fail@plt+0x5b4>
   115d4:	mov	r0, #0
   115d8:	bl	10e48 <dcgettext@plt>
   115dc:	ldr	r3, [pc, #44]	; 11610 <__assert_fail@plt+0x5b8>
   115e0:	mov	r1, #8
   115e4:	ldr	r3, [r3]
   115e8:	ldr	r2, [r3, #-4]
   115ec:	mov	r4, r0
   115f0:	mov	r0, #0
   115f4:	bl	15678 <__assert_fail@plt+0x4620>
   115f8:	mov	r2, r4
   115fc:	mov	r1, #0
   11600:	mov	r3, r0
   11604:	mov	r0, #2
   11608:	bl	10ed8 <error@plt>
   1160c:	andeq	r7, r1, r8, asr r7
   11610:	andeq	r9, r2, r4, ror #2
   11614:	ldr	r3, [r0]
   11618:	cmp	r3, #0
   1161c:	bne	11634 <__assert_fail@plt+0x5dc>
   11620:	ldrd	r2, [r0, #8]
   11624:	orrs	r3, r2, r3
   11628:	moveq	r0, #1
   1162c:	movne	r0, #0
   11630:	bx	lr
   11634:	cmp	r3, #1
   11638:	bne	11688 <__assert_fail@plt+0x630>
   1163c:	ldr	r1, [r0, #8]
   11640:	ldrb	r2, [r1]
   11644:	cmp	r2, #0
   11648:	beq	11680 <__assert_fail@plt+0x628>
   1164c:	sub	r3, r2, #45	; 0x2d
   11650:	clz	r3, r3
   11654:	lsr	r3, r3, #5
   11658:	add	r2, r1, r3
   1165c:	ldrb	r3, [r1, r3]
   11660:	b	11670 <__assert_fail@plt+0x618>
   11664:	ldrb	r3, [r2, #1]!
   11668:	cmp	r3, #0
   1166c:	beq	11680 <__assert_fail@plt+0x628>
   11670:	cmp	r3, #48	; 0x30
   11674:	beq	11664 <__assert_fail@plt+0x60c>
   11678:	mov	r0, #0
   1167c:	bx	lr
   11680:	mov	r0, #1
   11684:	bx	lr
   11688:	push	{r4, lr}
   1168c:	bl	1104c <abort@plt>
   11690:	push	{r4, lr}
   11694:	mov	r2, #179	; 0xb3
   11698:	ldr	r3, [pc, #8]	; 116a8 <__assert_fail@plt+0x650>
   1169c:	ldr	r1, [pc, #8]	; 116ac <__assert_fail@plt+0x654>
   116a0:	ldr	r0, [pc, #8]	; 116b0 <__assert_fail@plt+0x658>
   116a4:	bl	11058 <__assert_fail@plt>
   116a8:	andeq	r7, r1, r8, lsl #14
   116ac:	andeq	r7, r1, r0, lsl #15
   116b0:	muleq	r1, r0, r7
   116b4:	ldr	r3, [r0]
   116b8:	cmp	r3, #0
   116bc:	bne	116c8 <__assert_fail@plt+0x670>
   116c0:	mov	r0, #1
   116c4:	bx	lr
   116c8:	cmp	r3, #1
   116cc:	push	{r4, r5, r6, lr}
   116d0:	mov	r5, r0
   116d4:	sub	sp, sp, #8
   116d8:	bne	11774 <__assert_fail@plt+0x71c>
   116dc:	ldr	r6, [r0, #8]
   116e0:	ldrb	r2, [r6]
   116e4:	sub	r2, r2, #45	; 0x2d
   116e8:	clz	r2, r2
   116ec:	lsr	r2, r2, #5
   116f0:	add	r3, r6, r2
   116f4:	ldrb	r4, [r6, r2]
   116f8:	sub	r4, r4, #48	; 0x30
   116fc:	cmp	r4, #9
   11700:	bhi	1171c <__assert_fail@plt+0x6c4>
   11704:	ldrb	r4, [r3, #1]!
   11708:	cmp	r4, #0
   1170c:	beq	11728 <__assert_fail@plt+0x6d0>
   11710:	sub	r4, r4, #48	; 0x30
   11714:	cmp	r4, #9
   11718:	bls	11704 <__assert_fail@plt+0x6ac>
   1171c:	mov	r0, #0
   11720:	add	sp, sp, #8
   11724:	pop	{r4, r5, r6, pc}
   11728:	str	r4, [sp]
   1172c:	add	r3, r5, #8
   11730:	mov	r2, #10
   11734:	mov	r1, r4
   11738:	mov	r0, r6
   1173c:	bl	16424 <__assert_fail@plt+0x53cc>
   11740:	cmp	r0, #0
   11744:	bne	11760 <__assert_fail@plt+0x708>
   11748:	mov	r0, r6
   1174c:	bl	10e0c <free@plt>
   11750:	mov	r0, #1
   11754:	str	r4, [r5]
   11758:	add	sp, sp, #8
   1175c:	pop	{r4, r5, r6, pc}
   11760:	mov	r3, r6
   11764:	ldr	r2, [pc, #12]	; 11778 <__assert_fail@plt+0x720>
   11768:	mov	r1, #34	; 0x22
   1176c:	mov	r0, #3
   11770:	bl	10ed8 <error@plt>
   11774:	bl	1104c <abort@plt>
   11778:	ldrdeq	r8, [r1], -r4
   1177c:	push	{r4, r5, lr}
   11780:	sub	sp, sp, #36	; 0x24
   11784:	ldr	r5, [pc, #88]	; 117e4 <__assert_fail@plt+0x78c>
   11788:	ldr	r3, [r0]
   1178c:	ldr	r2, [r5]
   11790:	cmp	r3, #0
   11794:	str	r2, [sp, #28]
   11798:	bne	117d4 <__assert_fail@plt+0x77c>
   1179c:	mov	r4, r0
   117a0:	add	r2, sp, #4
   117a4:	ldrd	r0, [r0, #8]
   117a8:	bl	130cc <__assert_fail@plt+0x2074>
   117ac:	bl	163c8 <__assert_fail@plt+0x5370>
   117b0:	mov	r3, #1
   117b4:	str	r3, [r4]
   117b8:	str	r0, [r4, #8]
   117bc:	ldr	r2, [sp, #28]
   117c0:	ldr	r3, [r5]
   117c4:	cmp	r2, r3
   117c8:	bne	117e0 <__assert_fail@plt+0x788>
   117cc:	add	sp, sp, #36	; 0x24
   117d0:	pop	{r4, r5, pc}
   117d4:	cmp	r3, #1
   117d8:	beq	117bc <__assert_fail@plt+0x764>
   117dc:	bl	1104c <abort@plt>
   117e0:	bl	10e54 <__stack_chk_fail@plt>
   117e4:	andeq	r8, r2, r8, lsl #30
   117e8:	ldr	r3, [pc, #868]	; 11b54 <__assert_fail@plt+0xafc>
   117ec:	push	{r7, lr}
   117f0:	sub	sp, sp, #64	; 0x40
   117f4:	ldr	r3, [r3]
   117f8:	subs	r6, r0, #0
   117fc:	str	r3, [sp, #60]	; 0x3c
   11800:	beq	1183c <__assert_fail@plt+0x7e4>
   11804:	ldr	r3, [pc, #844]	; 11b58 <__assert_fail@plt+0xb00>
   11808:	mov	r2, #5
   1180c:	ldr	r1, [pc, #840]	; 11b5c <__assert_fail@plt+0xb04>
   11810:	mov	r0, #0
   11814:	ldr	r4, [r3]
   11818:	bl	10e48 <dcgettext@plt>
   1181c:	ldr	r3, [pc, #828]	; 11b60 <__assert_fail@plt+0xb08>
   11820:	mov	r1, #1
   11824:	ldr	r3, [r3]
   11828:	mov	r2, r0
   1182c:	mov	r0, r4
   11830:	bl	10fbc <__fprintf_chk@plt>
   11834:	mov	r0, r6
   11838:	bl	10f50 <exit@plt>
   1183c:	mov	r2, #5
   11840:	ldr	r1, [pc, #796]	; 11b64 <__assert_fail@plt+0xb0c>
   11844:	bl	10e48 <dcgettext@plt>
   11848:	ldr	r3, [pc, #784]	; 11b60 <__assert_fail@plt+0xb08>
   1184c:	ldr	r4, [pc, #788]	; 11b68 <__assert_fail@plt+0xb10>
   11850:	ldr	r3, [r3]
   11854:	mov	r2, r3
   11858:	mov	r1, r0
   1185c:	mov	r0, #1
   11860:	bl	10fa4 <__printf_chk@plt>
   11864:	ldr	r0, [r4]
   11868:	ldr	r3, [r0, #20]
   1186c:	ldr	r2, [r0, #24]
   11870:	cmp	r3, r2
   11874:	addcc	r1, r3, #1
   11878:	movcc	r2, #10
   1187c:	strcc	r1, [r0, #20]
   11880:	strbcc	r2, [r3]
   11884:	bcs	11b48 <__assert_fail@plt+0xaf0>
   11888:	mov	r2, #5
   1188c:	ldr	r1, [pc, #728]	; 11b6c <__assert_fail@plt+0xb14>
   11890:	mov	r0, #0
   11894:	bl	10e48 <dcgettext@plt>
   11898:	ldr	r1, [r4]
   1189c:	bl	10dc4 <fputs_unlocked@plt>
   118a0:	mov	r2, #5
   118a4:	ldr	r1, [pc, #708]	; 11b70 <__assert_fail@plt+0xb18>
   118a8:	mov	r0, #0
   118ac:	bl	10e48 <dcgettext@plt>
   118b0:	ldr	r1, [r4]
   118b4:	bl	10dc4 <fputs_unlocked@plt>
   118b8:	mov	r2, #5
   118bc:	ldr	r1, [pc, #688]	; 11b74 <__assert_fail@plt+0xb1c>
   118c0:	mov	r0, #0
   118c4:	bl	10e48 <dcgettext@plt>
   118c8:	ldr	r1, [r4]
   118cc:	bl	10dc4 <fputs_unlocked@plt>
   118d0:	mov	r2, #5
   118d4:	ldr	r1, [pc, #668]	; 11b78 <__assert_fail@plt+0xb20>
   118d8:	mov	r0, #0
   118dc:	bl	10e48 <dcgettext@plt>
   118e0:	ldr	r1, [r4]
   118e4:	bl	10dc4 <fputs_unlocked@plt>
   118e8:	mov	r2, #5
   118ec:	ldr	r1, [pc, #648]	; 11b7c <__assert_fail@plt+0xb24>
   118f0:	mov	r0, #0
   118f4:	bl	10e48 <dcgettext@plt>
   118f8:	ldr	r1, [r4]
   118fc:	bl	10dc4 <fputs_unlocked@plt>
   11900:	mov	r2, #5
   11904:	ldr	r1, [pc, #628]	; 11b80 <__assert_fail@plt+0xb28>
   11908:	mov	r0, #0
   1190c:	bl	10e48 <dcgettext@plt>
   11910:	ldr	r1, [r4]
   11914:	bl	10dc4 <fputs_unlocked@plt>
   11918:	mov	r2, #5
   1191c:	ldr	r1, [pc, #608]	; 11b84 <__assert_fail@plt+0xb2c>
   11920:	mov	r0, #0
   11924:	bl	10e48 <dcgettext@plt>
   11928:	ldr	r1, [r4]
   1192c:	bl	10dc4 <fputs_unlocked@plt>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #588]	; 11b88 <__assert_fail@plt+0xb30>
   11938:	mov	r0, #0
   1193c:	bl	10e48 <dcgettext@plt>
   11940:	ldr	r1, [r4]
   11944:	bl	10dc4 <fputs_unlocked@plt>
   11948:	mov	r2, #5
   1194c:	ldr	r1, [pc, #568]	; 11b8c <__assert_fail@plt+0xb34>
   11950:	mov	r0, #0
   11954:	bl	10e48 <dcgettext@plt>
   11958:	ldr	r1, [r4]
   1195c:	bl	10dc4 <fputs_unlocked@plt>
   11960:	mov	r2, #5
   11964:	ldr	r1, [pc, #548]	; 11b90 <__assert_fail@plt+0xb38>
   11968:	mov	r0, #0
   1196c:	bl	10e48 <dcgettext@plt>
   11970:	ldr	r1, [r4]
   11974:	bl	10dc4 <fputs_unlocked@plt>
   11978:	ldr	lr, [pc, #532]	; 11b94 <__assert_fail@plt+0xb3c>
   1197c:	add	ip, sp, #4
   11980:	ldm	lr!, {r0, r1, r2, r3}
   11984:	stmia	ip!, {r0, r1, r2, r3}
   11988:	ldm	lr!, {r0, r1, r2, r3}
   1198c:	ldr	r5, [sp, #4]
   11990:	stmia	ip!, {r0, r1, r2, r3}
   11994:	cmp	r5, #0
   11998:	ldm	lr!, {r0, r1, r2, r3}
   1199c:	addeq	r4, sp, #4
   119a0:	stmia	ip!, {r0, r1, r2, r3}
   119a4:	ldm	lr, {r0, r1}
   119a8:	stm	ip, {r0, r1}
   119ac:	beq	119dc <__assert_fail@plt+0x984>
   119b0:	ldr	r7, [pc, #480]	; 11b98 <__assert_fail@plt+0xb40>
   119b4:	add	r4, sp, #4
   119b8:	b	119c8 <__assert_fail@plt+0x970>
   119bc:	ldr	r5, [r4, #8]!
   119c0:	cmp	r5, #0
   119c4:	beq	119dc <__assert_fail@plt+0x984>
   119c8:	mov	r1, r5
   119cc:	mov	r0, r7
   119d0:	bl	10ddc <strcmp@plt>
   119d4:	cmp	r0, #0
   119d8:	bne	119bc <__assert_fail@plt+0x964>
   119dc:	ldr	r4, [r4, #4]
   119e0:	mov	r2, #5
   119e4:	cmp	r4, #0
   119e8:	ldr	r1, [pc, #428]	; 11b9c <__assert_fail@plt+0xb44>
   119ec:	beq	11a94 <__assert_fail@plt+0xa3c>
   119f0:	mov	r0, #0
   119f4:	bl	10e48 <dcgettext@plt>
   119f8:	ldr	r3, [pc, #416]	; 11ba0 <__assert_fail@plt+0xb48>
   119fc:	ldr	r2, [pc, #416]	; 11ba4 <__assert_fail@plt+0xb4c>
   11a00:	mov	r1, r0
   11a04:	mov	r0, #1
   11a08:	bl	10fa4 <__printf_chk@plt>
   11a0c:	mov	r1, #0
   11a10:	mov	r0, #5
   11a14:	bl	10ff8 <setlocale@plt>
   11a18:	cmp	r0, #0
   11a1c:	ldreq	r5, [pc, #372]	; 11b98 <__assert_fail@plt+0xb40>
   11a20:	beq	11a3c <__assert_fail@plt+0x9e4>
   11a24:	mov	r2, #3
   11a28:	ldr	r1, [pc, #376]	; 11ba8 <__assert_fail@plt+0xb50>
   11a2c:	bl	11040 <strncmp@plt>
   11a30:	ldr	r5, [pc, #352]	; 11b98 <__assert_fail@plt+0xb40>
   11a34:	cmp	r0, #0
   11a38:	bne	11b24 <__assert_fail@plt+0xacc>
   11a3c:	mov	r2, #5
   11a40:	ldr	r1, [pc, #356]	; 11bac <__assert_fail@plt+0xb54>
   11a44:	mov	r0, #0
   11a48:	bl	10e48 <dcgettext@plt>
   11a4c:	ldr	r3, [pc, #324]	; 11b98 <__assert_fail@plt+0xb40>
   11a50:	ldr	r2, [pc, #328]	; 11ba0 <__assert_fail@plt+0xb48>
   11a54:	mov	r1, r0
   11a58:	mov	r0, #1
   11a5c:	bl	10fa4 <__printf_chk@plt>
   11a60:	mov	r2, #5
   11a64:	ldr	r1, [pc, #324]	; 11bb0 <__assert_fail@plt+0xb58>
   11a68:	mov	r0, #0
   11a6c:	bl	10e48 <dcgettext@plt>
   11a70:	ldr	r2, [pc, #316]	; 11bb4 <__assert_fail@plt+0xb5c>
   11a74:	cmp	r4, r5
   11a78:	ldr	r3, [pc, #312]	; 11bb8 <__assert_fail@plt+0xb60>
   11a7c:	movne	r3, r2
   11a80:	mov	r1, r0
   11a84:	mov	r2, r4
   11a88:	mov	r0, #1
   11a8c:	bl	10fa4 <__printf_chk@plt>
   11a90:	b	11834 <__assert_fail@plt+0x7dc>
   11a94:	mov	r0, r4
   11a98:	bl	10e48 <dcgettext@plt>
   11a9c:	ldr	r3, [pc, #252]	; 11ba0 <__assert_fail@plt+0xb48>
   11aa0:	ldr	r2, [pc, #252]	; 11ba4 <__assert_fail@plt+0xb4c>
   11aa4:	mov	r1, r0
   11aa8:	mov	r0, #1
   11aac:	bl	10fa4 <__printf_chk@plt>
   11ab0:	mov	r1, r4
   11ab4:	mov	r0, #5
   11ab8:	bl	10ff8 <setlocale@plt>
   11abc:	cmp	r0, #0
   11ac0:	beq	11ad8 <__assert_fail@plt+0xa80>
   11ac4:	mov	r2, #3
   11ac8:	ldr	r1, [pc, #216]	; 11ba8 <__assert_fail@plt+0xb50>
   11acc:	bl	11040 <strncmp@plt>
   11ad0:	cmp	r0, #0
   11ad4:	bne	11b1c <__assert_fail@plt+0xac4>
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #200]	; 11bac <__assert_fail@plt+0xb54>
   11ae0:	mov	r0, #0
   11ae4:	bl	10e48 <dcgettext@plt>
   11ae8:	ldr	r3, [pc, #168]	; 11b98 <__assert_fail@plt+0xb40>
   11aec:	ldr	r2, [pc, #172]	; 11ba0 <__assert_fail@plt+0xb48>
   11af0:	mov	r4, r3
   11af4:	mov	r1, r0
   11af8:	mov	r0, #1
   11afc:	bl	10fa4 <__printf_chk@plt>
   11b00:	ldr	r1, [pc, #168]	; 11bb0 <__assert_fail@plt+0xb58>
   11b04:	mov	r2, #5
   11b08:	mov	r0, #0
   11b0c:	bl	10e48 <dcgettext@plt>
   11b10:	ldr	r3, [pc, #160]	; 11bb8 <__assert_fail@plt+0xb60>
   11b14:	mov	r1, r0
   11b18:	b	11a84 <__assert_fail@plt+0xa2c>
   11b1c:	ldr	r5, [pc, #116]	; 11b98 <__assert_fail@plt+0xb40>
   11b20:	mov	r4, r5
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #140]	; 11bbc <__assert_fail@plt+0xb64>
   11b2c:	mov	r0, #0
   11b30:	bl	10e48 <dcgettext@plt>
   11b34:	ldr	r2, [pc, #92]	; 11b98 <__assert_fail@plt+0xb40>
   11b38:	mov	r1, r0
   11b3c:	mov	r0, #1
   11b40:	bl	10fa4 <__printf_chk@plt>
   11b44:	b	11a3c <__assert_fail@plt+0x9e4>
   11b48:	mov	r1, #10
   11b4c:	bl	10fec <__overflow@plt>
   11b50:	b	11888 <__assert_fail@plt+0x830>
   11b54:	andeq	r8, r2, r8, lsl #30
   11b58:	andeq	r9, r2, r0, asr r1
   11b5c:	andeq	r7, r1, ip, lsr #15
   11b60:	andeq	r9, r2, r0, ror r1
   11b64:	ldrdeq	r7, [r1], -r4
   11b68:	andeq	r9, r2, r8, asr r1
   11b6c:	strdeq	r7, [r1], -ip
   11b70:	andeq	r7, r1, ip, lsr #16
   11b74:	andeq	r7, r1, r4, ror #16
   11b78:	andeq	r7, r1, r8, ror r9
   11b7c:	muleq	r1, ip, sl
   11b80:	andeq	r7, r1, r0, lsl fp
   11b84:	andeq	r7, r1, ip, asr #23
   11b88:	andeq	r7, r1, r4, lsl #26
   11b8c:	ldrdeq	r7, [r1], -r0
   11b90:	strdeq	r7, [r1], -r4
   11b94:	andeq	r7, r1, ip, lsl r7
   11b98:	andeq	r7, r1, r4, lsr #15
   11b9c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11ba0:	andeq	r7, r1, r8, lsr #31
   11ba4:	ldrdeq	r7, [r1], -r0
   11ba8:	andeq	r7, r1, r0, ror #31
   11bac:	andeq	r8, r1, ip, lsr #32
   11bb0:	andeq	r8, r1, ip, asr #32
   11bb4:	andeq	r7, r1, ip, lsl #22
   11bb8:	andeq	r8, r1, r0, ror #4
   11bbc:	andeq	r7, r1, r4, ror #31
   11bc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11bc4:	sub	sp, sp, #368	; 0x170
   11bc8:	ldr	r7, [pc, #912]	; 11f60 <__assert_fail@plt+0xf08>
   11bcc:	mov	r5, r1
   11bd0:	mov	r6, r0
   11bd4:	ldr	r3, [r7]
   11bd8:	mov	r4, #0
   11bdc:	str	r3, [sp, #364]	; 0x16c
   11be0:	bl	1177c <__assert_fail@plt+0x724>
   11be4:	mov	r0, r5
   11be8:	bl	1177c <__assert_fail@plt+0x724>
   11bec:	ldr	r5, [r5, #8]
   11bf0:	ldr	r2, [pc, #876]	; 11f64 <__assert_fail@plt+0xf0c>
   11bf4:	ldr	r1, [pc, #876]	; 11f68 <__assert_fail@plt+0xf10>
   11bf8:	add	r3, sp, #108	; 0x6c
   11bfc:	mov	r0, r5
   11c00:	str	r1, [r2]
   11c04:	str	r3, [sp, #36]	; 0x24
   11c08:	str	r4, [sp, #8]
   11c0c:	str	r4, [sp, #12]
   11c10:	str	r4, [sp, #16]
   11c14:	str	r4, [sp, #20]
   11c18:	str	r4, [sp, #24]
   11c1c:	str	r4, [sp, #40]	; 0x28
   11c20:	bl	10f5c <strlen@plt>
   11c24:	add	r2, sp, #20
   11c28:	mov	r1, r0
   11c2c:	mov	r0, r5
   11c30:	bl	11034 <re_compile_pattern@plt>
   11c34:	subs	r9, r0, #0
   11c38:	bne	11ef0 <__assert_fail@plt+0xe98>
   11c3c:	ldrb	r3, [sp, #48]	; 0x30
   11c40:	ldr	r4, [r6, #8]
   11c44:	bic	r3, r3, #128	; 0x80
   11c48:	mov	r0, r4
   11c4c:	strb	r3, [sp, #48]	; 0x30
   11c50:	bl	10f5c <strlen@plt>
   11c54:	add	r3, sp, #8
   11c58:	str	r3, [sp]
   11c5c:	mov	r1, r4
   11c60:	mov	r3, r9
   11c64:	mov	r2, r0
   11c68:	add	r0, sp, #20
   11c6c:	bl	10f74 <re_match@plt>
   11c70:	subs	r8, r0, #0
   11c74:	blt	11d30 <__assert_fail@plt+0xcd8>
   11c78:	ldr	r5, [sp, #44]	; 0x2c
   11c7c:	cmp	r5, #0
   11c80:	beq	11ce4 <__assert_fail@plt+0xc8c>
   11c84:	ldr	r3, [sp, #16]
   11c88:	ldr	r2, [r6, #8]
   11c8c:	ldr	r3, [r3, #4]
   11c90:	strb	r9, [r2, r3]
   11c94:	ldr	r3, [sp, #12]
   11c98:	ldr	r0, [r6, #8]
   11c9c:	ldr	r3, [r3, #4]
   11ca0:	add	r0, r0, r3
   11ca4:	bl	11598 <__assert_fail@plt+0x540>
   11ca8:	mov	r4, r0
   11cac:	ldr	r3, [sp, #8]
   11cb0:	cmp	r3, #0
   11cb4:	bne	11d1c <__assert_fail@plt+0xcc4>
   11cb8:	mov	r3, #0
   11cbc:	add	r0, sp, #20
   11cc0:	str	r3, [sp, #36]	; 0x24
   11cc4:	bl	10ea8 <regfree@plt>
   11cc8:	ldr	r2, [sp, #364]	; 0x16c
   11ccc:	ldr	r3, [r7]
   11cd0:	mov	r0, r4
   11cd4:	cmp	r2, r3
   11cd8:	bne	11eec <__assert_fail@plt+0xe94>
   11cdc:	add	sp, sp, #368	; 0x170
   11ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ce4:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   11ce8:	mov	r9, r8
   11cec:	cmp	r0, #1
   11cf0:	bne	11d74 <__assert_fail@plt+0xd1c>
   11cf4:	mov	r0, #16
   11cf8:	bl	1619c <__assert_fail@plt+0x5144>
   11cfc:	mov	r3, #0
   11d00:	str	r3, [r0]
   11d04:	str	r3, [r0, #12]
   11d08:	ldr	r3, [sp, #8]
   11d0c:	mov	r4, r0
   11d10:	cmp	r3, #0
   11d14:	str	r9, [r0, #8]
   11d18:	beq	11cb8 <__assert_fail@plt+0xc60>
   11d1c:	ldr	r0, [sp, #12]
   11d20:	bl	10e0c <free@plt>
   11d24:	ldr	r0, [sp, #16]
   11d28:	bl	10e0c <free@plt>
   11d2c:	b	11cb8 <__assert_fail@plt+0xc60>
   11d30:	cmn	r8, #1
   11d34:	bne	11f18 <__assert_fail@plt+0xec0>
   11d38:	ldr	r5, [sp, #44]	; 0x2c
   11d3c:	cmp	r5, #0
   11d40:	beq	11d54 <__assert_fail@plt+0xcfc>
   11d44:	ldr	r0, [pc, #544]	; 11f6c <__assert_fail@plt+0xf14>
   11d48:	bl	11598 <__assert_fail@plt+0x540>
   11d4c:	mov	r4, r0
   11d50:	b	11cac <__assert_fail@plt+0xc54>
   11d54:	mov	r0, #16
   11d58:	bl	1619c <__assert_fail@plt+0x5144>
   11d5c:	mov	r2, #0
   11d60:	mov	r3, #0
   11d64:	mov	r4, r0
   11d68:	str	r5, [r0]
   11d6c:	strd	r2, [r0, #8]
   11d70:	b	11cac <__assert_fail@plt+0xc54>
   11d74:	ldr	r9, [r6, #8]
   11d78:	strb	r5, [sp, #52]	; 0x34
   11d7c:	str	r9, [sp, #68]	; 0x44
   11d80:	str	r5, [sp, #56]	; 0x38
   11d84:	strb	r5, [sp, #64]	; 0x40
   11d88:	str	r5, [sp, #60]	; 0x3c
   11d8c:	mov	r6, #1
   11d90:	ldr	sl, [pc, #472]	; 11f70 <__assert_fail@plt+0xf18>
   11d94:	b	11df8 <__assert_fail@plt+0xda0>
   11d98:	ldrb	r3, [r4]
   11d9c:	and	r2, r3, #31
   11da0:	lsr	r3, r3, #5
   11da4:	ldr	r3, [sl, r3, lsl #2]
   11da8:	lsr	r3, r3, r2
   11dac:	tst	r3, #1
   11db0:	beq	11e70 <__assert_fail@plt+0xe18>
   11db4:	str	r6, [sp, #72]	; 0x48
   11db8:	ldrb	r4, [r4]
   11dbc:	strb	r6, [sp, #76]	; 0x4c
   11dc0:	strb	r6, [sp, #64]	; 0x40
   11dc4:	str	r4, [sp, #80]	; 0x50
   11dc8:	cmp	r4, #0
   11dcc:	beq	11ee4 <__assert_fail@plt+0xe8c>
   11dd0:	ldr	r4, [sp, #68]	; 0x44
   11dd4:	sub	r3, r4, r9
   11dd8:	cmp	r3, r8
   11ddc:	bcs	11ee4 <__assert_fail@plt+0xe8c>
   11de0:	ldr	r3, [sp, #72]	; 0x48
   11de4:	add	r5, r5, #1
   11de8:	add	r4, r4, r3
   11dec:	mov	r3, #0
   11df0:	str	r4, [sp, #68]	; 0x44
   11df4:	strb	r3, [sp, #64]	; 0x40
   11df8:	ldrb	r3, [sp, #52]	; 0x34
   11dfc:	ldr	r4, [sp, #68]	; 0x44
   11e00:	cmp	r3, #0
   11e04:	beq	11d98 <__assert_fail@plt+0xd40>
   11e08:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   11e0c:	mov	r1, r0
   11e10:	mov	r0, r4
   11e14:	bl	159ec <__assert_fail@plt+0x4994>
   11e18:	add	r3, sp, #56	; 0x38
   11e1c:	mov	r1, r4
   11e20:	mov	r2, r0
   11e24:	add	r0, sp, #80	; 0x50
   11e28:	bl	16f18 <__assert_fail@plt+0x5ec0>
   11e2c:	cmn	r0, #1
   11e30:	str	r0, [sp, #72]	; 0x48
   11e34:	beq	11e88 <__assert_fail@plt+0xe30>
   11e38:	cmn	r0, #2
   11e3c:	beq	11ea0 <__assert_fail@plt+0xe48>
   11e40:	cmp	r0, #0
   11e44:	beq	11ec0 <__assert_fail@plt+0xe68>
   11e48:	ldr	r4, [sp, #80]	; 0x50
   11e4c:	add	r0, sp, #56	; 0x38
   11e50:	strb	r6, [sp, #76]	; 0x4c
   11e54:	bl	10e30 <mbsinit@plt>
   11e58:	cmp	r0, #0
   11e5c:	movne	r3, #0
   11e60:	strbeq	r6, [sp, #64]	; 0x40
   11e64:	strbne	r6, [sp, #64]	; 0x40
   11e68:	strbne	r3, [sp, #52]	; 0x34
   11e6c:	b	11dc8 <__assert_fail@plt+0xd70>
   11e70:	add	r0, sp, #56	; 0x38
   11e74:	bl	10e30 <mbsinit@plt>
   11e78:	cmp	r0, #0
   11e7c:	beq	11f04 <__assert_fail@plt+0xeac>
   11e80:	strb	r6, [sp, #52]	; 0x34
   11e84:	b	11e08 <__assert_fail@plt+0xdb0>
   11e88:	mov	r3, #0
   11e8c:	str	r6, [sp, #72]	; 0x48
   11e90:	strb	r6, [sp, #64]	; 0x40
   11e94:	strb	r3, [sp, #76]	; 0x4c
   11e98:	ldr	r4, [sp, #68]	; 0x44
   11e9c:	b	11dd4 <__assert_fail@plt+0xd7c>
   11ea0:	ldr	r4, [sp, #68]	; 0x44
   11ea4:	mov	r0, r4
   11ea8:	bl	10f5c <strlen@plt>
   11eac:	mov	r3, #0
   11eb0:	strb	r6, [sp, #64]	; 0x40
   11eb4:	strb	r3, [sp, #76]	; 0x4c
   11eb8:	str	r0, [sp, #72]	; 0x48
   11ebc:	b	11dd4 <__assert_fail@plt+0xd7c>
   11ec0:	ldr	r4, [sp, #68]	; 0x44
   11ec4:	str	r6, [sp, #72]	; 0x48
   11ec8:	ldrb	r3, [r4]
   11ecc:	cmp	r3, #0
   11ed0:	bne	11f4c <__assert_fail@plt+0xef4>
   11ed4:	ldr	r4, [sp, #80]	; 0x50
   11ed8:	cmp	r4, #0
   11edc:	beq	11e4c <__assert_fail@plt+0xdf4>
   11ee0:	bl	11690 <__assert_fail@plt+0x638>
   11ee4:	mov	r9, r5
   11ee8:	b	11cf4 <__assert_fail@plt+0xc9c>
   11eec:	bl	10e54 <__stack_chk_fail@plt>
   11ef0:	mov	r3, r9
   11ef4:	mov	r1, r4
   11ef8:	ldr	r2, [pc, #116]	; 11f74 <__assert_fail@plt+0xf1c>
   11efc:	mov	r0, #2
   11f00:	bl	10ed8 <error@plt>
   11f04:	ldr	r3, [pc, #108]	; 11f78 <__assert_fail@plt+0xf20>
   11f08:	mov	r2, #150	; 0x96
   11f0c:	ldr	r1, [pc, #104]	; 11f7c <__assert_fail@plt+0xf24>
   11f10:	ldr	r0, [pc, #104]	; 11f80 <__assert_fail@plt+0xf28>
   11f14:	bl	11058 <__assert_fail@plt>
   11f18:	cmn	r8, #2
   11f1c:	movne	r4, #75	; 0x4b
   11f20:	bne	11f2c <__assert_fail@plt+0xed4>
   11f24:	bl	10f80 <__errno_location@plt>
   11f28:	ldr	r4, [r0]
   11f2c:	mov	r2, #5
   11f30:	ldr	r1, [pc, #76]	; 11f84 <__assert_fail@plt+0xf2c>
   11f34:	mov	r0, #0
   11f38:	bl	10e48 <dcgettext@plt>
   11f3c:	mov	r1, r4
   11f40:	mov	r2, r0
   11f44:	mov	r0, #3
   11f48:	bl	10ed8 <error@plt>
   11f4c:	ldr	r3, [pc, #36]	; 11f78 <__assert_fail@plt+0xf20>
   11f50:	mov	r2, #178	; 0xb2
   11f54:	ldr	r1, [pc, #32]	; 11f7c <__assert_fail@plt+0xf24>
   11f58:	ldr	r0, [pc, #40]	; 11f88 <__assert_fail@plt+0xf30>
   11f5c:	bl	11058 <__assert_fail@plt>
   11f60:	andeq	r8, r2, r8, lsl #30
   11f64:	andeq	r9, r2, r4, asr r1
   11f68:	andeq	r0, r0, r6, asr #5
   11f6c:	andeq	r7, r1, ip, lsl #22
   11f70:	andeq	r8, r1, r8, lsl r3
   11f74:	ldrdeq	r8, [r1], -r4
   11f78:	andeq	r7, r1, r8, lsl #14
   11f7c:	andeq	r7, r1, r0, lsl #15
   11f80:	andeq	r8, r1, r0, lsl #1
   11f84:	strheq	r8, [r1], -r0
   11f88:	muleq	r1, r8, r0
   11f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f90:	sub	sp, sp, #204	; 0xcc
   11f94:	ldr	r4, [pc, #2488]	; 12954 <__assert_fail@plt+0x18fc>
   11f98:	mov	r8, r0
   11f9c:	ldr	r0, [pc, #2484]	; 12958 <__assert_fail@plt+0x1900>
   11fa0:	ldr	r3, [r4]
   11fa4:	str	r3, [sp, #196]	; 0xc4
   11fa8:	bl	113d4 <__assert_fail@plt+0x37c>
   11fac:	subs	r6, r0, #0
   11fb0:	beq	11ff4 <__assert_fail@plt+0xf9c>
   11fb4:	ldr	r2, [pc, #2464]	; 1295c <__assert_fail@plt+0x1904>
   11fb8:	ldr	r3, [r2]
   11fbc:	ldr	r0, [r3]
   11fc0:	cmp	r0, #0
   11fc4:	beq	128e4 <__assert_fail@plt+0x188c>
   11fc8:	add	r3, r3, #4
   11fcc:	str	r3, [r2]
   11fd0:	bl	11598 <__assert_fail@plt+0x540>
   11fd4:	mov	r5, r0
   11fd8:	ldr	r2, [sp, #196]	; 0xc4
   11fdc:	ldr	r3, [r4]
   11fe0:	mov	r0, r5
   11fe4:	cmp	r2, r3
   11fe8:	bne	128e0 <__assert_fail@plt+0x1888>
   11fec:	add	sp, sp, #204	; 0xcc
   11ff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ff4:	ldr	r0, [pc, #2404]	; 12960 <__assert_fail@plt+0x1908>
   11ff8:	bl	113d4 <__assert_fail@plt+0x37c>
   11ffc:	cmp	r0, #0
   12000:	bne	122b0 <__assert_fail@plt+0x1258>
   12004:	ldr	r0, [pc, #2392]	; 12964 <__assert_fail@plt+0x190c>
   12008:	bl	113d4 <__assert_fail@plt+0x37c>
   1200c:	subs	r6, r0, #0
   12010:	bne	12284 <__assert_fail@plt+0x122c>
   12014:	ldr	r0, [pc, #2380]	; 12968 <__assert_fail@plt+0x1910>
   12018:	bl	113d4 <__assert_fail@plt+0x37c>
   1201c:	subs	r5, r0, #0
   12020:	bne	12398 <__assert_fail@plt+0x1340>
   12024:	ldr	r0, [pc, #2368]	; 1296c <__assert_fail@plt+0x1914>
   12028:	bl	113d4 <__assert_fail@plt+0x37c>
   1202c:	cmp	r0, #0
   12030:	beq	122f0 <__assert_fail@plt+0x1298>
   12034:	mov	r0, r8
   12038:	bl	11f8c <__assert_fail@plt+0xf34>
   1203c:	mov	r7, r0
   12040:	mov	r0, r8
   12044:	bl	11f8c <__assert_fail@plt+0xf34>
   12048:	mov	r6, r0
   1204c:	mov	r0, r8
   12050:	bl	11f8c <__assert_fail@plt+0xf34>
   12054:	mov	r8, r0
   12058:	mov	r0, r7
   1205c:	bl	1177c <__assert_fail@plt+0x724>
   12060:	mov	r0, r6
   12064:	bl	116b4 <__assert_fail@plt+0x65c>
   12068:	cmp	r0, #0
   1206c:	beq	1250c <__assert_fail@plt+0x14b4>
   12070:	mov	r0, r8
   12074:	bl	116b4 <__assert_fail@plt+0x65c>
   12078:	cmp	r0, #0
   1207c:	beq	1250c <__assert_fail@plt+0x14b4>
   12080:	ldrd	r2, [r6, #8]
   12084:	cmp	r2, #0
   12088:	sbcs	r1, r3, #0
   1208c:	mvnlt	r3, #0
   12090:	strlt	r3, [sp, #4]
   12094:	blt	120b8 <__assert_fail@plt+0x1060>
   12098:	cmp	r2, #0
   1209c:	sbcs	r1, r3, #1
   120a0:	bge	12844 <__assert_fail@plt+0x17ec>
   120a4:	cmn	r2, #1
   120a8:	str	r2, [sp, #4]
   120ac:	beq	12844 <__assert_fail@plt+0x17ec>
   120b0:	clz	r5, r2
   120b4:	lsr	r5, r5, #5
   120b8:	ldrd	sl, [r8, #8]
   120bc:	cmp	sl, #0
   120c0:	sbcs	r3, fp, #0
   120c4:	mvnlt	sl, #0
   120c8:	blt	120e4 <__assert_fail@plt+0x108c>
   120cc:	cmp	sl, #0
   120d0:	sbcs	r3, fp, #1
   120d4:	mvnge	sl, #1
   120d8:	bge	120e4 <__assert_fail@plt+0x108c>
   120dc:	cmn	sl, #1
   120e0:	mvneq	sl, #1
   120e4:	ldr	fp, [r7, #8]
   120e8:	mov	r0, fp
   120ec:	bl	10f5c <strlen@plt>
   120f0:	mov	r9, r0
   120f4:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   120f8:	cmp	r0, #1
   120fc:	movls	r0, r9
   12100:	bls	1210c <__assert_fail@plt+0x10b4>
   12104:	mov	r0, fp
   12108:	bl	13574 <__assert_fail@plt+0x251c>
   1210c:	ldr	r3, [sp, #4]
   12110:	cmp	r3, r0
   12114:	orrhi	r5, r5, #1
   12118:	ands	r5, r5, #255	; 0xff
   1211c:	bne	127b4 <__assert_fail@plt+0x175c>
   12120:	sub	r3, sl, #1
   12124:	cmn	r3, #3
   12128:	bhi	127b4 <__assert_fail@plt+0x175c>
   1212c:	ldr	r3, [sp, #4]
   12130:	rsb	r3, r3, #1
   12134:	add	r0, r3, r0
   12138:	cmp	r0, sl
   1213c:	movcc	sl, r0
   12140:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   12144:	cmp	r0, #1
   12148:	beq	128ac <__assert_fail@plt+0x1854>
   1214c:	add	r0, r9, #1
   12150:	bl	1619c <__assert_fail@plt+0x5144>
   12154:	mov	r9, #1
   12158:	str	fp, [sp, #156]	; 0x9c
   1215c:	str	r7, [sp, #12]
   12160:	str	r6, [sp, #16]
   12164:	strb	r5, [sp, #140]	; 0x8c
   12168:	str	r5, [sp, #144]	; 0x90
   1216c:	strb	r5, [sp, #152]	; 0x98
   12170:	str	r5, [sp, #148]	; 0x94
   12174:	mov	fp, r9
   12178:	str	r8, [sp, #20]
   1217c:	ldr	r6, [sp, #4]
   12180:	str	r0, [sp, #8]
   12184:	mov	r7, r0
   12188:	b	1220c <__assert_fail@plt+0x11b4>
   1218c:	ldrb	r3, [r5]
   12190:	ldr	r1, [pc, #2008]	; 12970 <__assert_fail@plt+0x1918>
   12194:	and	r2, r3, #31
   12198:	lsr	r3, r3, #5
   1219c:	ldr	r3, [r1, r3, lsl #2]
   121a0:	lsr	r3, r3, r2
   121a4:	tst	r3, #1
   121a8:	beq	1279c <__assert_fail@plt+0x1744>
   121ac:	str	fp, [sp, #160]	; 0xa0
   121b0:	ldrb	r5, [r5]
   121b4:	strb	fp, [sp, #164]	; 0xa4
   121b8:	strb	fp, [sp, #152]	; 0x98
   121bc:	str	r5, [sp, #168]	; 0xa8
   121c0:	cmp	r5, #0
   121c4:	beq	12890 <__assert_fail@plt+0x1838>
   121c8:	cmp	sl, #0
   121cc:	beq	12890 <__assert_fail@plt+0x1838>
   121d0:	cmp	r6, r9
   121d4:	ldr	r5, [sp, #156]	; 0x9c
   121d8:	ldr	r8, [sp, #160]	; 0xa0
   121dc:	bhi	121f8 <__assert_fail@plt+0x11a0>
   121e0:	mov	r0, r7
   121e4:	mov	r2, r8
   121e8:	mov	r1, r5
   121ec:	bl	10f2c <mempcpy@plt>
   121f0:	sub	sl, sl, #1
   121f4:	mov	r7, r0
   121f8:	add	r9, r9, #1
   121fc:	add	r5, r5, r8
   12200:	mov	r3, #0
   12204:	str	r5, [sp, #156]	; 0x9c
   12208:	strb	r3, [sp, #152]	; 0x98
   1220c:	ldrb	r3, [sp, #140]	; 0x8c
   12210:	ldr	r5, [sp, #156]	; 0x9c
   12214:	cmp	r3, #0
   12218:	beq	1218c <__assert_fail@plt+0x1134>
   1221c:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   12220:	mov	r1, r0
   12224:	mov	r0, r5
   12228:	bl	159ec <__assert_fail@plt+0x4994>
   1222c:	add	r3, sp, #144	; 0x90
   12230:	mov	r1, r5
   12234:	mov	r2, r0
   12238:	add	r0, sp, #168	; 0xa8
   1223c:	bl	16f18 <__assert_fail@plt+0x5ec0>
   12240:	cmn	r0, #1
   12244:	str	r0, [sp, #160]	; 0xa0
   12248:	beq	12824 <__assert_fail@plt+0x17cc>
   1224c:	cmn	r0, #2
   12250:	beq	12850 <__assert_fail@plt+0x17f8>
   12254:	cmp	r0, #0
   12258:	beq	1286c <__assert_fail@plt+0x1814>
   1225c:	ldr	r5, [sp, #168]	; 0xa8
   12260:	add	r0, sp, #144	; 0x90
   12264:	strb	fp, [sp, #164]	; 0xa4
   12268:	bl	10e30 <mbsinit@plt>
   1226c:	cmp	r0, #0
   12270:	movne	r3, #0
   12274:	strbeq	fp, [sp, #152]	; 0x98
   12278:	strbne	fp, [sp, #152]	; 0x98
   1227c:	strbne	r3, [sp, #140]	; 0x8c
   12280:	b	121c0 <__assert_fail@plt+0x1168>
   12284:	mov	r0, r8
   12288:	bl	11f8c <__assert_fail@plt+0xf34>
   1228c:	mov	r5, r0
   12290:	mov	r0, r8
   12294:	bl	11f8c <__assert_fail@plt+0xf34>
   12298:	cmp	r8, #0
   1229c:	mov	r6, r0
   122a0:	bne	12378 <__assert_fail@plt+0x1320>
   122a4:	mov	r0, r6
   122a8:	bl	11564 <__assert_fail@plt+0x50c>
   122ac:	b	11fd8 <__assert_fail@plt+0xf80>
   122b0:	mov	r0, r8
   122b4:	bl	11f8c <__assert_fail@plt+0xf34>
   122b8:	mov	r7, r0
   122bc:	bl	1177c <__assert_fail@plt+0x724>
   122c0:	ldr	r0, [r7, #8]
   122c4:	bl	13574 <__assert_fail@plt+0x251c>
   122c8:	mov	r8, r0
   122cc:	mov	r0, #16
   122d0:	bl	1619c <__assert_fail@plt+0x5144>
   122d4:	mov	r5, r0
   122d8:	mov	r0, r7
   122dc:	str	r8, [r5, #8]
   122e0:	str	r6, [r5]
   122e4:	str	r6, [r5, #12]
   122e8:	bl	11564 <__assert_fail@plt+0x50c>
   122ec:	b	11fd8 <__assert_fail@plt+0xf80>
   122f0:	ldr	r6, [pc, #1636]	; 1295c <__assert_fail@plt+0x1904>
   122f4:	ldr	r3, [r6]
   122f8:	ldr	r3, [r3]
   122fc:	cmp	r3, #0
   12300:	beq	128e4 <__assert_fail@plt+0x188c>
   12304:	ldr	r0, [pc, #1640]	; 12974 <__assert_fail@plt+0x191c>
   12308:	bl	113d4 <__assert_fail@plt+0x37c>
   1230c:	subs	r5, r0, #0
   12310:	beq	1256c <__assert_fail@plt+0x1514>
   12314:	mov	r0, r8
   12318:	bl	12f24 <__assert_fail@plt+0x1ecc>
   1231c:	ldr	r8, [r6]
   12320:	ldr	r7, [r8]
   12324:	cmp	r7, #0
   12328:	mov	r5, r0
   1232c:	beq	12930 <__assert_fail@plt+0x18d8>
   12330:	ldr	r0, [pc, #1600]	; 12978 <__assert_fail@plt+0x1920>
   12334:	bl	113d4 <__assert_fail@plt+0x37c>
   12338:	subs	r7, r0, #0
   1233c:	bne	11fd8 <__assert_fail@plt+0xf80>
   12340:	mov	r2, #5
   12344:	ldr	r1, [pc, #1584]	; 1297c <__assert_fail@plt+0x1924>
   12348:	bl	10e48 <dcgettext@plt>
   1234c:	ldr	r3, [r6]
   12350:	mov	r1, #8
   12354:	ldr	r2, [r3]
   12358:	mov	r4, r0
   1235c:	mov	r0, r7
   12360:	bl	15678 <__assert_fail@plt+0x4620>
   12364:	mov	r2, r4
   12368:	mov	r1, r7
   1236c:	mov	r3, r0
   12370:	mov	r0, #2
   12374:	bl	10ed8 <error@plt>
   12378:	mov	r1, r0
   1237c:	mov	r0, r5
   12380:	bl	11bc0 <__assert_fail@plt+0xb68>
   12384:	mov	r7, r0
   12388:	mov	r0, r5
   1238c:	bl	11564 <__assert_fail@plt+0x50c>
   12390:	mov	r5, r7
   12394:	b	122a4 <__assert_fail@plt+0x124c>
   12398:	mov	r0, r8
   1239c:	bl	11f8c <__assert_fail@plt+0xf34>
   123a0:	mov	r9, r0
   123a4:	mov	r0, r8
   123a8:	bl	11f8c <__assert_fail@plt+0xf34>
   123ac:	mov	r8, r0
   123b0:	mov	r0, r9
   123b4:	bl	1177c <__assert_fail@plt+0x724>
   123b8:	mov	r0, r8
   123bc:	bl	1177c <__assert_fail@plt+0x724>
   123c0:	ldr	sl, [r8, #8]
   123c4:	ldrb	r3, [sl]
   123c8:	cmp	r3, #0
   123cc:	beq	12534 <__assert_fail@plt+0x14dc>
   123d0:	ldr	r5, [r9, #8]
   123d4:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   123d8:	cmp	r0, #1
   123dc:	bls	1275c <__assert_fail@plt+0x1704>
   123e0:	strb	r6, [sp, #28]
   123e4:	ldrb	r3, [sp, #28]
   123e8:	str	r5, [sp, #44]	; 0x2c
   123ec:	str	r6, [sp, #32]
   123f0:	cmp	r3, #0
   123f4:	strb	r6, [sp, #40]	; 0x28
   123f8:	str	r6, [sp, #36]	; 0x24
   123fc:	ldr	fp, [pc, #1388]	; 12970 <__assert_fail@plt+0x1918>
   12400:	str	r8, [sp, #4]
   12404:	ldr	r5, [sp, #44]	; 0x2c
   12408:	bne	12484 <__assert_fail@plt+0x142c>
   1240c:	ldrb	r3, [r5]
   12410:	and	r2, r3, #31
   12414:	lsr	r3, r3, #5
   12418:	ldr	r3, [fp, r3, lsl #2]
   1241c:	lsr	r3, r3, r2
   12420:	tst	r3, #1
   12424:	beq	12740 <__assert_fail@plt+0x16e8>
   12428:	mov	r3, #1
   1242c:	str	r3, [sp, #48]	; 0x30
   12430:	ldrb	r7, [r5]
   12434:	strb	r3, [sp, #52]	; 0x34
   12438:	strb	r3, [sp, #40]	; 0x28
   1243c:	cmp	r7, #0
   12440:	str	r7, [sp, #56]	; 0x38
   12444:	beq	128d4 <__assert_fail@plt+0x187c>
   12448:	add	r6, r6, #1
   1244c:	ldrb	r1, [r5]
   12450:	mov	r0, sl
   12454:	bl	13314 <__assert_fail@plt+0x22bc>
   12458:	cmp	r0, #0
   1245c:	bne	126d4 <__assert_fail@plt+0x167c>
   12460:	mov	r3, #1
   12464:	add	r5, r5, r3
   12468:	mov	r3, #0
   1246c:	strb	r3, [sp, #40]	; 0x28
   12470:	ldrb	r3, [sp, #28]
   12474:	str	r5, [sp, #44]	; 0x2c
   12478:	ldr	r5, [sp, #44]	; 0x2c
   1247c:	cmp	r3, #0
   12480:	beq	1240c <__assert_fail@plt+0x13b4>
   12484:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   12488:	mov	r1, r0
   1248c:	mov	r0, r5
   12490:	bl	159ec <__assert_fail@plt+0x4994>
   12494:	add	r3, sp, #32
   12498:	mov	r1, r5
   1249c:	mov	r2, r0
   124a0:	add	r0, sp, #56	; 0x38
   124a4:	bl	16f18 <__assert_fail@plt+0x5ec0>
   124a8:	cmn	r0, #1
   124ac:	str	r0, [sp, #48]	; 0x30
   124b0:	beq	1277c <__assert_fail@plt+0x1724>
   124b4:	cmn	r0, #2
   124b8:	beq	127dc <__assert_fail@plt+0x1784>
   124bc:	cmp	r0, #0
   124c0:	beq	127fc <__assert_fail@plt+0x17a4>
   124c4:	ldr	r7, [sp, #56]	; 0x38
   124c8:	mov	r5, #1
   124cc:	add	r0, sp, #32
   124d0:	strb	r5, [sp, #52]	; 0x34
   124d4:	bl	10e30 <mbsinit@plt>
   124d8:	cmp	r0, #0
   124dc:	movne	r3, #0
   124e0:	strbeq	r5, [sp, #40]	; 0x28
   124e4:	strbne	r5, [sp, #40]	; 0x28
   124e8:	strbne	r3, [sp, #28]
   124ec:	cmp	r7, #0
   124f0:	beq	128d4 <__assert_fail@plt+0x187c>
   124f4:	ldr	r3, [sp, #48]	; 0x30
   124f8:	add	r6, r6, #1
   124fc:	cmp	r3, #1
   12500:	bne	12598 <__assert_fail@plt+0x1540>
   12504:	ldr	r5, [sp, #44]	; 0x2c
   12508:	b	1244c <__assert_fail@plt+0x13f4>
   1250c:	ldr	r0, [pc, #1132]	; 12980 <__assert_fail@plt+0x1928>
   12510:	bl	11598 <__assert_fail@plt+0x540>
   12514:	mov	r5, r0
   12518:	mov	r0, r7
   1251c:	bl	11564 <__assert_fail@plt+0x50c>
   12520:	mov	r0, r6
   12524:	bl	11564 <__assert_fail@plt+0x50c>
   12528:	mov	r0, r8
   1252c:	bl	11564 <__assert_fail@plt+0x50c>
   12530:	b	11fd8 <__assert_fail@plt+0xf80>
   12534:	mov	r7, #0
   12538:	mov	r6, r7
   1253c:	mov	r0, #16
   12540:	bl	1619c <__assert_fail@plt+0x5144>
   12544:	mov	r3, #0
   12548:	mov	r5, r0
   1254c:	str	r7, [r0, #8]
   12550:	str	r6, [r0, #12]
   12554:	mov	r0, r9
   12558:	str	r3, [r5]
   1255c:	bl	11564 <__assert_fail@plt+0x50c>
   12560:	mov	r0, r8
   12564:	bl	11564 <__assert_fail@plt+0x50c>
   12568:	b	11fd8 <__assert_fail@plt+0xf80>
   1256c:	ldr	r0, [pc, #1028]	; 12978 <__assert_fail@plt+0x1920>
   12570:	bl	113d4 <__assert_fail@plt+0x37c>
   12574:	cmp	r0, #0
   12578:	bne	128e8 <__assert_fail@plt+0x1890>
   1257c:	ldr	r3, [r6]
   12580:	add	r2, r3, #4
   12584:	ldr	r0, [r3]
   12588:	str	r2, [r6]
   1258c:	bl	11598 <__assert_fail@plt+0x540>
   12590:	mov	r5, r0
   12594:	b	11fd8 <__assert_fail@plt+0xf80>
   12598:	mov	r3, #0
   1259c:	str	sl, [sp, #100]	; 0x64
   125a0:	str	r3, [sp, #92]	; 0x5c
   125a4:	strb	r3, [sp, #84]	; 0x54
   125a8:	str	r3, [sp, #88]	; 0x58
   125ac:	strb	r3, [sp, #96]	; 0x60
   125b0:	mov	r5, sl
   125b4:	mov	r7, #1
   125b8:	b	12624 <__assert_fail@plt+0x15cc>
   125bc:	ldrb	r3, [r5]
   125c0:	and	r2, r3, #31
   125c4:	lsr	r3, r3, #5
   125c8:	ldr	r3, [fp, r3, lsl #2]
   125cc:	lsr	r3, r3, r2
   125d0:	tst	r3, #1
   125d4:	beq	126e4 <__assert_fail@plt+0x168c>
   125d8:	str	r7, [sp, #104]	; 0x68
   125dc:	ldrb	r5, [r5]
   125e0:	strb	r7, [sp, #108]	; 0x6c
   125e4:	strb	r7, [sp, #96]	; 0x60
   125e8:	str	r5, [sp, #112]	; 0x70
   125ec:	cmp	r5, #0
   125f0:	beq	12838 <__assert_fail@plt+0x17e0>
   125f4:	ldrb	r3, [sp, #52]	; 0x34
   125f8:	cmp	r3, #0
   125fc:	beq	126a8 <__assert_fail@plt+0x1650>
   12600:	ldr	r3, [sp, #56]	; 0x38
   12604:	cmp	r3, r5
   12608:	beq	126d4 <__assert_fail@plt+0x167c>
   1260c:	ldr	r8, [sp, #104]	; 0x68
   12610:	ldr	r5, [sp, #100]	; 0x64
   12614:	add	r5, r5, r8
   12618:	mov	r3, #0
   1261c:	str	r5, [sp, #100]	; 0x64
   12620:	strb	r3, [sp, #96]	; 0x60
   12624:	ldrb	r3, [sp, #84]	; 0x54
   12628:	cmp	r3, #0
   1262c:	beq	125bc <__assert_fail@plt+0x1564>
   12630:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   12634:	mov	r1, r0
   12638:	mov	r0, r5
   1263c:	bl	159ec <__assert_fail@plt+0x4994>
   12640:	add	r3, sp, #88	; 0x58
   12644:	mov	r1, r5
   12648:	mov	r2, r0
   1264c:	add	r0, sp, #112	; 0x70
   12650:	bl	16f18 <__assert_fail@plt+0x5ec0>
   12654:	cmn	r0, #1
   12658:	str	r0, [sp, #104]	; 0x68
   1265c:	beq	12698 <__assert_fail@plt+0x1640>
   12660:	cmn	r0, #2
   12664:	beq	126fc <__assert_fail@plt+0x16a4>
   12668:	cmp	r0, #0
   1266c:	beq	1271c <__assert_fail@plt+0x16c4>
   12670:	ldr	r5, [sp, #112]	; 0x70
   12674:	add	r0, sp, #88	; 0x58
   12678:	strb	r7, [sp, #108]	; 0x6c
   1267c:	bl	10e30 <mbsinit@plt>
   12680:	cmp	r0, #0
   12684:	movne	r3, #0
   12688:	strbeq	r7, [sp, #96]	; 0x60
   1268c:	strbne	r7, [sp, #96]	; 0x60
   12690:	strbne	r3, [sp, #84]	; 0x54
   12694:	b	125ec <__assert_fail@plt+0x1594>
   12698:	mov	r3, #0
   1269c:	str	r7, [sp, #104]	; 0x68
   126a0:	strb	r7, [sp, #96]	; 0x60
   126a4:	strb	r3, [sp, #108]	; 0x6c
   126a8:	ldr	r5, [sp, #100]	; 0x64
   126ac:	ldr	r8, [sp, #104]	; 0x68
   126b0:	ldr	r2, [sp, #48]	; 0x30
   126b4:	cmp	r8, r2
   126b8:	bne	12614 <__assert_fail@plt+0x15bc>
   126bc:	mov	r2, r8
   126c0:	ldr	r1, [sp, #44]	; 0x2c
   126c4:	mov	r0, r5
   126c8:	bl	10e3c <memcmp@plt>
   126cc:	cmp	r0, #0
   126d0:	bne	12614 <__assert_fail@plt+0x15bc>
   126d4:	mov	r7, r6
   126d8:	ldr	r8, [sp, #4]
   126dc:	mov	r6, #0
   126e0:	b	1253c <__assert_fail@plt+0x14e4>
   126e4:	add	r0, sp, #88	; 0x58
   126e8:	bl	10e30 <mbsinit@plt>
   126ec:	cmp	r0, #0
   126f0:	beq	1291c <__assert_fail@plt+0x18c4>
   126f4:	strb	r7, [sp, #84]	; 0x54
   126f8:	b	12630 <__assert_fail@plt+0x15d8>
   126fc:	ldr	r5, [sp, #100]	; 0x64
   12700:	mov	r0, r5
   12704:	bl	10f5c <strlen@plt>
   12708:	mov	r3, #0
   1270c:	strb	r7, [sp, #96]	; 0x60
   12710:	strb	r3, [sp, #108]	; 0x6c
   12714:	str	r0, [sp, #104]	; 0x68
   12718:	b	126ac <__assert_fail@plt+0x1654>
   1271c:	ldr	r5, [sp, #100]	; 0x64
   12720:	str	r7, [sp, #104]	; 0x68
   12724:	ldrb	r3, [r5]
   12728:	cmp	r3, #0
   1272c:	bne	12908 <__assert_fail@plt+0x18b0>
   12730:	ldr	r5, [sp, #112]	; 0x70
   12734:	cmp	r5, #0
   12738:	beq	12674 <__assert_fail@plt+0x161c>
   1273c:	bl	11690 <__assert_fail@plt+0x638>
   12740:	add	r0, sp, #32
   12744:	bl	10e30 <mbsinit@plt>
   12748:	cmp	r0, #0
   1274c:	beq	1291c <__assert_fail@plt+0x18c4>
   12750:	mov	r3, #1
   12754:	strb	r3, [sp, #28]
   12758:	b	12484 <__assert_fail@plt+0x142c>
   1275c:	mov	r1, sl
   12760:	mov	r0, r5
   12764:	bl	10de8 <strcspn@plt>
   12768:	ldrb	r3, [r5, r0]
   1276c:	cmp	r3, #0
   12770:	beq	12534 <__assert_fail@plt+0x14dc>
   12774:	add	r7, r0, #1
   12778:	b	1253c <__assert_fail@plt+0x14e4>
   1277c:	mov	r3, #1
   12780:	mov	r2, #0
   12784:	add	r6, r6, r3
   12788:	str	r3, [sp, #48]	; 0x30
   1278c:	strb	r3, [sp, #40]	; 0x28
   12790:	strb	r2, [sp, #52]	; 0x34
   12794:	ldr	r5, [sp, #44]	; 0x2c
   12798:	b	1244c <__assert_fail@plt+0x13f4>
   1279c:	add	r0, sp, #144	; 0x90
   127a0:	bl	10e30 <mbsinit@plt>
   127a4:	cmp	r0, #0
   127a8:	beq	1291c <__assert_fail@plt+0x18c4>
   127ac:	strb	fp, [sp, #140]	; 0x8c
   127b0:	b	1221c <__assert_fail@plt+0x11c4>
   127b4:	ldr	r0, [pc, #452]	; 12980 <__assert_fail@plt+0x1928>
   127b8:	bl	163c8 <__assert_fail@plt+0x5370>
   127bc:	str	r0, [sp, #8]
   127c0:	ldr	r9, [sp, #8]
   127c4:	mov	r0, r9
   127c8:	bl	11598 <__assert_fail@plt+0x540>
   127cc:	mov	r5, r0
   127d0:	mov	r0, r9
   127d4:	bl	10e0c <free@plt>
   127d8:	b	12518 <__assert_fail@plt+0x14c0>
   127dc:	ldr	r0, [sp, #44]	; 0x2c
   127e0:	bl	10f5c <strlen@plt>
   127e4:	mov	r3, #0
   127e8:	strb	r3, [sp, #52]	; 0x34
   127ec:	mov	r3, #1
   127f0:	strb	r3, [sp, #40]	; 0x28
   127f4:	str	r0, [sp, #48]	; 0x30
   127f8:	b	124f4 <__assert_fail@plt+0x149c>
   127fc:	ldr	r5, [sp, #44]	; 0x2c
   12800:	mov	r3, #1
   12804:	str	r3, [sp, #48]	; 0x30
   12808:	ldrb	r3, [r5]
   1280c:	cmp	r3, #0
   12810:	bne	12908 <__assert_fail@plt+0x18b0>
   12814:	ldr	r7, [sp, #56]	; 0x38
   12818:	cmp	r7, #0
   1281c:	beq	124c8 <__assert_fail@plt+0x1470>
   12820:	b	1273c <__assert_fail@plt+0x16e4>
   12824:	mov	r3, #0
   12828:	str	fp, [sp, #160]	; 0xa0
   1282c:	strb	fp, [sp, #152]	; 0x98
   12830:	strb	r3, [sp, #164]	; 0xa4
   12834:	b	121c8 <__assert_fail@plt+0x1170>
   12838:	ldr	r5, [sp, #44]	; 0x2c
   1283c:	ldr	r3, [sp, #48]	; 0x30
   12840:	b	12464 <__assert_fail@plt+0x140c>
   12844:	mvn	r3, #1
   12848:	str	r3, [sp, #4]
   1284c:	b	120b8 <__assert_fail@plt+0x1060>
   12850:	ldr	r0, [sp, #156]	; 0x9c
   12854:	bl	10f5c <strlen@plt>
   12858:	mov	r3, #0
   1285c:	strb	fp, [sp, #152]	; 0x98
   12860:	strb	r3, [sp, #164]	; 0xa4
   12864:	str	r0, [sp, #160]	; 0xa0
   12868:	b	121c8 <__assert_fail@plt+0x1170>
   1286c:	ldr	r3, [sp, #156]	; 0x9c
   12870:	str	fp, [sp, #160]	; 0xa0
   12874:	ldrb	r3, [r3]
   12878:	cmp	r3, #0
   1287c:	bne	12908 <__assert_fail@plt+0x18b0>
   12880:	ldr	r5, [sp, #168]	; 0xa8
   12884:	cmp	r5, #0
   12888:	beq	12260 <__assert_fail@plt+0x1208>
   1288c:	b	1273c <__assert_fail@plt+0x16e4>
   12890:	mov	r2, r7
   12894:	ldr	r6, [sp, #16]
   12898:	ldr	r8, [sp, #20]
   1289c:	ldr	r7, [sp, #12]
   128a0:	mov	r3, #0
   128a4:	strb	r3, [r2]
   128a8:	b	127c0 <__assert_fail@plt+0x1768>
   128ac:	add	r0, sl, #1
   128b0:	bl	1619c <__assert_fail@plt+0x5144>
   128b4:	ldr	r3, [sp, #4]
   128b8:	mov	r2, sl
   128bc:	sub	r1, r3, #1
   128c0:	add	r1, fp, r1
   128c4:	str	r0, [sp, #8]
   128c8:	bl	10f2c <mempcpy@plt>
   128cc:	mov	r2, r0
   128d0:	b	128a0 <__assert_fail@plt+0x1848>
   128d4:	ldr	r8, [sp, #4]
   128d8:	mov	r6, r7
   128dc:	b	1253c <__assert_fail@plt+0x14e4>
   128e0:	bl	10e54 <__stack_chk_fail@plt>
   128e4:	bl	115c8 <__assert_fail@plt+0x570>
   128e8:	mov	r2, #5
   128ec:	ldr	r1, [pc, #144]	; 12984 <__assert_fail@plt+0x192c>
   128f0:	mov	r0, r5
   128f4:	bl	10e48 <dcgettext@plt>
   128f8:	mov	r1, r5
   128fc:	mov	r2, r0
   12900:	mov	r0, #2
   12904:	bl	10ed8 <error@plt>
   12908:	ldr	r3, [pc, #120]	; 12988 <__assert_fail@plt+0x1930>
   1290c:	mov	r2, #178	; 0xb2
   12910:	ldr	r1, [pc, #116]	; 1298c <__assert_fail@plt+0x1934>
   12914:	ldr	r0, [pc, #116]	; 12990 <__assert_fail@plt+0x1938>
   12918:	bl	11058 <__assert_fail@plt>
   1291c:	ldr	r3, [pc, #100]	; 12988 <__assert_fail@plt+0x1930>
   12920:	mov	r2, #150	; 0x96
   12924:	ldr	r1, [pc, #96]	; 1298c <__assert_fail@plt+0x1934>
   12928:	ldr	r0, [pc, #100]	; 12994 <__assert_fail@plt+0x193c>
   1292c:	bl	11058 <__assert_fail@plt>
   12930:	mov	r2, #5
   12934:	ldr	r1, [pc, #92]	; 12998 <__assert_fail@plt+0x1940>
   12938:	mov	r0, r7
   1293c:	bl	10e48 <dcgettext@plt>
   12940:	ldr	r2, [r8, #-4]
   12944:	mov	r1, #8
   12948:	mov	r4, r0
   1294c:	mov	r0, r7
   12950:	b	12360 <__assert_fail@plt+0x1308>
   12954:	andeq	r8, r2, r8, lsl #30
   12958:	ldrdeq	r8, [r1], -r4
   1295c:	andeq	r9, r2, r4, ror #2
   12960:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12964:	andeq	r8, r1, r0, ror #1
   12968:	andeq	r8, r1, r8, ror #1
   1296c:	strdeq	r8, [r1], -r0
   12970:	andeq	r8, r1, r8, lsl r3
   12974:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   12978:	andeq	r8, r1, r4, lsr #2
   1297c:	andeq	r8, r1, r8, lsr #2
   12980:	andeq	r7, r1, ip, lsl #22
   12984:	andeq	r8, r1, r4, asr r1
   12988:	andeq	r7, r1, r8, lsl #14
   1298c:	andeq	r7, r1, r0, lsl #15
   12990:	muleq	r1, r8, r0
   12994:	andeq	r8, r1, r0, lsl #1
   12998:	strdeq	r8, [r1], -ip
   1299c:	push	{r4, r5, r6, r7, r8, lr}
   129a0:	mov	r5, r0
   129a4:	bl	11f8c <__assert_fail@plt+0xf34>
   129a8:	ldr	r6, [pc, #88]	; 12a08 <__assert_fail@plt+0x19b0>
   129ac:	mov	r7, r0
   129b0:	b	129bc <__assert_fail@plt+0x1964>
   129b4:	mov	r0, r4
   129b8:	bl	11564 <__assert_fail@plt+0x50c>
   129bc:	mov	r0, r6
   129c0:	bl	113d4 <__assert_fail@plt+0x37c>
   129c4:	cmp	r0, #0
   129c8:	mov	r0, r5
   129cc:	beq	12a00 <__assert_fail@plt+0x19a8>
   129d0:	bl	11f8c <__assert_fail@plt+0xf34>
   129d4:	cmp	r5, #0
   129d8:	mov	r4, r0
   129dc:	beq	129b4 <__assert_fail@plt+0x195c>
   129e0:	mov	r1, r0
   129e4:	mov	r0, r7
   129e8:	bl	11bc0 <__assert_fail@plt+0xb68>
   129ec:	mov	r8, r0
   129f0:	mov	r0, r7
   129f4:	bl	11564 <__assert_fail@plt+0x50c>
   129f8:	mov	r7, r8
   129fc:	b	129b4 <__assert_fail@plt+0x195c>
   12a00:	mov	r0, r7
   12a04:	pop	{r4, r5, r6, r7, r8, pc}
   12a08:	andeq	r8, r1, r4, ror r1
   12a0c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a10:	mov	r5, r0
   12a14:	bl	1299c <__assert_fail@plt+0x1944>
   12a18:	ldr	r6, [pc, #252]	; 12b1c <__assert_fail@plt+0x1ac4>
   12a1c:	ldr	r8, [pc, #252]	; 12b20 <__assert_fail@plt+0x1ac8>
   12a20:	ldr	fp, [pc, #252]	; 12b24 <__assert_fail@plt+0x1acc>
   12a24:	ldr	sl, [pc, #252]	; 12b28 <__assert_fail@plt+0x1ad0>
   12a28:	mov	r7, r0
   12a2c:	b	12ab4 <__assert_fail@plt+0x1a5c>
   12a30:	mov	r0, r8
   12a34:	bl	113d4 <__assert_fail@plt+0x37c>
   12a38:	cmp	r0, #0
   12a3c:	movne	r9, #1
   12a40:	beq	12ad4 <__assert_fail@plt+0x1a7c>
   12a44:	mov	r0, r5
   12a48:	bl	1299c <__assert_fail@plt+0x1944>
   12a4c:	cmp	r5, #0
   12a50:	mov	r4, r0
   12a54:	beq	12aac <__assert_fail@plt+0x1a54>
   12a58:	mov	r0, r7
   12a5c:	bl	116b4 <__assert_fail@plt+0x65c>
   12a60:	cmp	r0, #0
   12a64:	beq	12af0 <__assert_fail@plt+0x1a98>
   12a68:	mov	r0, r4
   12a6c:	bl	116b4 <__assert_fail@plt+0x65c>
   12a70:	cmp	r0, #0
   12a74:	beq	12af0 <__assert_fail@plt+0x1a98>
   12a78:	cmp	r9, #0
   12a7c:	beq	12acc <__assert_fail@plt+0x1a74>
   12a80:	ldrd	r2, [r4, #8]
   12a84:	orrs	r3, r2, r3
   12a88:	beq	12b10 <__assert_fail@plt+0x1ab8>
   12a8c:	ldr	r3, [pc, #152]	; 12b2c <__assert_fail@plt+0x1ad4>
   12a90:	cmp	r9, #1
   12a94:	moveq	r3, sl
   12a98:	mov	r9, r3
   12a9c:	add	r1, r7, #8
   12aa0:	mov	r0, r1
   12aa4:	add	r2, r4, #8
   12aa8:	blx	r9
   12aac:	mov	r0, r4
   12ab0:	bl	11564 <__assert_fail@plt+0x50c>
   12ab4:	mov	r0, r6
   12ab8:	bl	113d4 <__assert_fail@plt+0x37c>
   12abc:	cmp	r0, #0
   12ac0:	beq	12a30 <__assert_fail@plt+0x19d8>
   12ac4:	mov	r9, #0
   12ac8:	b	12a44 <__assert_fail@plt+0x19ec>
   12acc:	mov	r9, fp
   12ad0:	b	12a9c <__assert_fail@plt+0x1a44>
   12ad4:	ldr	r0, [pc, #84]	; 12b30 <__assert_fail@plt+0x1ad8>
   12ad8:	bl	113d4 <__assert_fail@plt+0x37c>
   12adc:	cmp	r0, #0
   12ae0:	movne	r9, #2
   12ae4:	bne	12a44 <__assert_fail@plt+0x19ec>
   12ae8:	mov	r0, r7
   12aec:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12af0:	ldr	r1, [pc, #60]	; 12b34 <__assert_fail@plt+0x1adc>
   12af4:	mov	r2, #5
   12af8:	mov	r0, #0
   12afc:	bl	10e48 <dcgettext@plt>
   12b00:	mov	r1, #0
   12b04:	mov	r2, r0
   12b08:	mov	r0, #2
   12b0c:	bl	10ed8 <error@plt>
   12b10:	mov	r2, #5
   12b14:	ldr	r1, [pc, #28]	; 12b38 <__assert_fail@plt+0x1ae0>
   12b18:	b	12af8 <__assert_fail@plt+0x1aa0>
   12b1c:	andeq	r8, r1, r8, ror r1
   12b20:	andeq	r8, r1, ip, ror r1
   12b24:	andeq	r1, r1, ip, lsr #9
   12b28:	andeq	r1, r1, r8, lsl #10
   12b2c:	andeq	r1, r1, ip, ror r3
   12b30:	andeq	r8, r1, r0, lsl #3
   12b34:	andeq	r8, r1, r4, lsl #3
   12b38:	muleq	r1, ip, r1
   12b3c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b40:	mov	r6, r0
   12b44:	bl	12a0c <__assert_fail@plt+0x19b4>
   12b48:	ldr	r7, [pc, #188]	; 12c0c <__assert_fail@plt+0x1bb4>
   12b4c:	ldr	r9, [pc, #188]	; 12c10 <__assert_fail@plt+0x1bb8>
   12b50:	ldr	fp, [pc, #188]	; 12c14 <__assert_fail@plt+0x1bbc>
   12b54:	ldr	sl, [pc, #188]	; 12c18 <__assert_fail@plt+0x1bc0>
   12b58:	mov	r8, r0
   12b5c:	b	12bcc <__assert_fail@plt+0x1b74>
   12b60:	mov	r0, r9
   12b64:	bl	113d4 <__assert_fail@plt+0x37c>
   12b68:	cmp	r0, #0
   12b6c:	beq	12be4 <__assert_fail@plt+0x1b8c>
   12b70:	mov	r5, #1
   12b74:	mov	r0, r6
   12b78:	bl	12a0c <__assert_fail@plt+0x19b4>
   12b7c:	cmp	r6, #0
   12b80:	mov	r4, r0
   12b84:	beq	12bc4 <__assert_fail@plt+0x1b6c>
   12b88:	mov	r0, r8
   12b8c:	bl	116b4 <__assert_fail@plt+0x65c>
   12b90:	cmp	r0, #0
   12b94:	beq	12bec <__assert_fail@plt+0x1b94>
   12b98:	mov	r0, r4
   12b9c:	bl	116b4 <__assert_fail@plt+0x65c>
   12ba0:	cmp	r0, #0
   12ba4:	beq	12bec <__assert_fail@plt+0x1b94>
   12ba8:	cmp	r5, #0
   12bac:	add	r1, r8, #8
   12bb0:	moveq	r5, fp
   12bb4:	movne	r5, sl
   12bb8:	mov	r0, r1
   12bbc:	add	r2, r4, #8
   12bc0:	blx	r5
   12bc4:	mov	r0, r4
   12bc8:	bl	11564 <__assert_fail@plt+0x50c>
   12bcc:	mov	r0, r7
   12bd0:	bl	113d4 <__assert_fail@plt+0x37c>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12b60 <__assert_fail@plt+0x1b08>
   12bdc:	mov	r5, #0
   12be0:	b	12b74 <__assert_fail@plt+0x1b1c>
   12be4:	mov	r0, r8
   12be8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bec:	mov	r2, #5
   12bf0:	ldr	r1, [pc, #36]	; 12c1c <__assert_fail@plt+0x1bc4>
   12bf4:	mov	r0, #0
   12bf8:	bl	10e48 <dcgettext@plt>
   12bfc:	mov	r1, #0
   12c00:	mov	r2, r0
   12c04:	mov	r0, #2
   12c08:	bl	10ed8 <error@plt>
   12c0c:	ldrdeq	r8, [r1], -r4
   12c10:			; <UNDEFINED> instruction: 0x000181b0
   12c14:	andeq	r1, r1, r0, ror r4
   12c18:	andeq	r1, r1, r4, lsr r4
   12c1c:	andeq	r8, r1, r4, lsl #3
   12c20:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c24:	mov	r5, r0
   12c28:	bl	12b3c <__assert_fail@plt+0x1ae4>
   12c2c:	ldr	r8, [pc, #548]	; 12e58 <__assert_fail@plt+0x1e00>
   12c30:	ldr	r9, [pc, #548]	; 12e5c <__assert_fail@plt+0x1e04>
   12c34:	mov	r4, r0
   12c38:	b	12c98 <__assert_fail@plt+0x1c40>
   12c3c:	mov	r0, r9
   12c40:	bl	113d4 <__assert_fail@plt+0x37c>
   12c44:	cmp	r0, #0
   12c48:	movne	r7, #1
   12c4c:	beq	12d98 <__assert_fail@plt+0x1d40>
   12c50:	mov	r0, r5
   12c54:	bl	12b3c <__assert_fail@plt+0x1ae4>
   12c58:	cmp	r5, #0
   12c5c:	moveq	r7, r5
   12c60:	moveq	sl, r5
   12c64:	mov	r6, r0
   12c68:	bne	12cb0 <__assert_fail@plt+0x1c58>
   12c6c:	mov	r0, r4
   12c70:	bl	11564 <__assert_fail@plt+0x50c>
   12c74:	mov	r0, r6
   12c78:	bl	11564 <__assert_fail@plt+0x50c>
   12c7c:	mov	r0, #16
   12c80:	bl	1619c <__assert_fail@plt+0x5144>
   12c84:	mov	r3, #0
   12c88:	mov	r4, r0
   12c8c:	str	r7, [r0, #8]
   12c90:	str	sl, [r0, #12]
   12c94:	str	r3, [r0]
   12c98:	mov	r0, r8
   12c9c:	bl	113d4 <__assert_fail@plt+0x37c>
   12ca0:	cmp	r0, #0
   12ca4:	beq	12c3c <__assert_fail@plt+0x1be4>
   12ca8:	mov	r7, #0
   12cac:	b	12c50 <__assert_fail@plt+0x1bf8>
   12cb0:	mov	r0, r4
   12cb4:	bl	1177c <__assert_fail@plt+0x724>
   12cb8:	mov	r0, r6
   12cbc:	bl	1177c <__assert_fail@plt+0x724>
   12cc0:	ldr	sl, [r4, #8]
   12cc4:	ldrb	r3, [sl]
   12cc8:	sub	r3, r3, #45	; 0x2d
   12ccc:	clz	r3, r3
   12cd0:	lsr	r3, r3, #5
   12cd4:	add	r2, sl, r3
   12cd8:	ldrb	r3, [sl, r3]
   12cdc:	b	12cec <__assert_fail@plt+0x1c94>
   12ce0:	ldrb	r3, [r2, #1]!
   12ce4:	cmp	r3, #0
   12ce8:	beq	12db0 <__assert_fail@plt+0x1d58>
   12cec:	sub	r3, r3, #48	; 0x30
   12cf0:	cmp	r3, #9
   12cf4:	bls	12ce0 <__assert_fail@plt+0x1c88>
   12cf8:	ldr	fp, [r6, #8]
   12cfc:	bl	10f80 <__errno_location@plt>
   12d00:	mov	r2, #0
   12d04:	mov	r1, fp
   12d08:	mov	r3, r0
   12d0c:	mov	r0, sl
   12d10:	str	r2, [r3]
   12d14:	bl	10ee4 <strcoll@plt>
   12d18:	sub	r7, r7, #1
   12d1c:	cmp	r7, #4
   12d20:	ldrls	pc, [pc, r7, lsl #2]
   12d24:	b	12e48 <__assert_fail@plt+0x1df0>
   12d28:	andeq	r2, r1, r0, ror sp
   12d2c:	andeq	r2, r1, r0, ror #26
   12d30:	andeq	r2, r1, r0, asr sp
   12d34:	andeq	r2, r1, ip, lsr sp
   12d38:	andeq	r2, r1, r4, lsl #27
   12d3c:	asr	r1, r0, #31
   12d40:	mvn	r7, r1
   12d44:	mov	sl, #0
   12d48:	lsr	r7, r7, #31
   12d4c:	b	12c6c <__assert_fail@plt+0x1c14>
   12d50:	adds	r7, r0, #0
   12d54:	movne	r7, #1
   12d58:	mov	sl, #0
   12d5c:	b	12c6c <__assert_fail@plt+0x1c14>
   12d60:	clz	r7, r0
   12d64:	mov	sl, #0
   12d68:	lsr	r7, r7, #5
   12d6c:	b	12c6c <__assert_fail@plt+0x1c14>
   12d70:	cmp	r0, #0
   12d74:	movgt	r7, #0
   12d78:	movle	r7, #1
   12d7c:	mov	sl, #0
   12d80:	b	12c6c <__assert_fail@plt+0x1c14>
   12d84:	cmp	r0, #0
   12d88:	movle	r7, #0
   12d8c:	movgt	r7, #1
   12d90:	mov	sl, #0
   12d94:	b	12c6c <__assert_fail@plt+0x1c14>
   12d98:	ldr	r0, [pc, #192]	; 12e60 <__assert_fail@plt+0x1e08>
   12d9c:	bl	113d4 <__assert_fail@plt+0x37c>
   12da0:	cmp	r0, #0
   12da4:	beq	12df4 <__assert_fail@plt+0x1d9c>
   12da8:	mov	r7, #2
   12dac:	b	12c50 <__assert_fail@plt+0x1bf8>
   12db0:	ldr	fp, [r6, #8]
   12db4:	ldrb	r3, [fp]
   12db8:	sub	r3, r3, #45	; 0x2d
   12dbc:	clz	r3, r3
   12dc0:	lsr	r3, r3, #5
   12dc4:	add	r2, fp, r3
   12dc8:	ldrb	r3, [fp, r3]
   12dcc:	sub	r3, r3, #48	; 0x30
   12dd0:	cmp	r3, #9
   12dd4:	bhi	12cfc <__assert_fail@plt+0x1ca4>
   12dd8:	ldrb	r3, [r2, #1]!
   12ddc:	cmp	r3, #0
   12de0:	bne	12dcc <__assert_fail@plt+0x1d74>
   12de4:	mov	r1, fp
   12de8:	mov	r0, sl
   12dec:	bl	15a18 <__assert_fail@plt+0x49c0>
   12df0:	b	12d18 <__assert_fail@plt+0x1cc0>
   12df4:	ldr	r0, [pc, #104]	; 12e64 <__assert_fail@plt+0x1e0c>
   12df8:	bl	113d4 <__assert_fail@plt+0x37c>
   12dfc:	cmp	r0, #0
   12e00:	bne	12da8 <__assert_fail@plt+0x1d50>
   12e04:	ldr	r0, [pc, #92]	; 12e68 <__assert_fail@plt+0x1e10>
   12e08:	bl	113d4 <__assert_fail@plt+0x37c>
   12e0c:	cmp	r0, #0
   12e10:	movne	r7, #3
   12e14:	bne	12c50 <__assert_fail@plt+0x1bf8>
   12e18:	ldr	r0, [pc, #76]	; 12e6c <__assert_fail@plt+0x1e14>
   12e1c:	bl	113d4 <__assert_fail@plt+0x37c>
   12e20:	cmp	r0, #0
   12e24:	movne	r7, #4
   12e28:	bne	12c50 <__assert_fail@plt+0x1bf8>
   12e2c:	ldr	r0, [pc, #60]	; 12e70 <__assert_fail@plt+0x1e18>
   12e30:	bl	113d4 <__assert_fail@plt+0x37c>
   12e34:	cmp	r0, #0
   12e38:	movne	r7, #5
   12e3c:	bne	12c50 <__assert_fail@plt+0x1bf8>
   12e40:	mov	r0, r4
   12e44:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e48:	asr	r1, r0, #31
   12e4c:	mov	sl, #0
   12e50:	lsr	r7, r1, #31
   12e54:	b	12c6c <__assert_fail@plt+0x1c14>
   12e58:			; <UNDEFINED> instruction: 0x000181b4
   12e5c:			; <UNDEFINED> instruction: 0x000181b8
   12e60:			; <UNDEFINED> instruction: 0x000181bc
   12e64:	andeq	r8, r1, r0, asr #3
   12e68:	andeq	r8, r1, r4, asr #3
   12e6c:	andeq	r8, r1, r8, asr #3
   12e70:	andeq	r8, r1, ip, asr #3
   12e74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e78:	mov	r5, r0
   12e7c:	bl	12c20 <__assert_fail@plt+0x1bc8>
   12e80:	ldr	r8, [pc, #152]	; 12f20 <__assert_fail@plt+0x1ec8>
   12e84:	mov	r9, #0
   12e88:	mov	r6, #0
   12e8c:	mov	r7, #0
   12e90:	mov	r4, r0
   12e94:	mov	r0, r8
   12e98:	bl	113d4 <__assert_fail@plt+0x37c>
   12e9c:	mov	r3, r5
   12ea0:	cmp	r0, #0
   12ea4:	mov	r0, r4
   12ea8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12eac:	cmp	r5, #0
   12eb0:	beq	12ec0 <__assert_fail@plt+0x1e68>
   12eb4:	bl	11614 <__assert_fail@plt+0x5bc>
   12eb8:	eor	r0, r0, #1
   12ebc:	uxtb	r3, r0
   12ec0:	mov	r0, r3
   12ec4:	bl	12c20 <__assert_fail@plt+0x1bc8>
   12ec8:	mov	sl, r0
   12ecc:	mov	r0, r4
   12ed0:	bl	11614 <__assert_fail@plt+0x5bc>
   12ed4:	cmp	r0, #0
   12ed8:	mov	r0, sl
   12edc:	bne	12eec <__assert_fail@plt+0x1e94>
   12ee0:	bl	11614 <__assert_fail@plt+0x5bc>
   12ee4:	cmp	r0, #0
   12ee8:	beq	12f14 <__assert_fail@plt+0x1ebc>
   12eec:	mov	r0, r4
   12ef0:	bl	11564 <__assert_fail@plt+0x50c>
   12ef4:	mov	r0, sl
   12ef8:	bl	11564 <__assert_fail@plt+0x50c>
   12efc:	mov	r0, #16
   12f00:	bl	1619c <__assert_fail@plt+0x5144>
   12f04:	mov	r4, r0
   12f08:	str	r9, [r0]
   12f0c:	strd	r6, [r0, #8]
   12f10:	b	12e94 <__assert_fail@plt+0x1e3c>
   12f14:	mov	r0, sl
   12f18:	bl	11564 <__assert_fail@plt+0x50c>
   12f1c:	b	12e94 <__assert_fail@plt+0x1e3c>
   12f20:	ldrdeq	r8, [r1], -r0
   12f24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12f28:	mov	r8, r0
   12f2c:	bl	12e74 <__assert_fail@plt+0x1e1c>
   12f30:	ldr	r9, [pc, #152]	; 12fd0 <__assert_fail@plt+0x1f78>
   12f34:	mov	sl, #0
   12f38:	mov	r6, #0
   12f3c:	mov	r7, #0
   12f40:	mov	r4, r0
   12f44:	mov	r0, r9
   12f48:	bl	113d4 <__assert_fail@plt+0x37c>
   12f4c:	mov	r3, r8
   12f50:	cmp	r0, #0
   12f54:	mov	r0, r4
   12f58:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f5c:	cmp	r8, #0
   12f60:	beq	12f6c <__assert_fail@plt+0x1f14>
   12f64:	bl	11614 <__assert_fail@plt+0x5bc>
   12f68:	mov	r3, r0
   12f6c:	mov	r0, r3
   12f70:	bl	12e74 <__assert_fail@plt+0x1e1c>
   12f74:	mov	r5, r0
   12f78:	mov	r0, r4
   12f7c:	bl	11614 <__assert_fail@plt+0x5bc>
   12f80:	cmp	r0, #0
   12f84:	mov	r0, r4
   12f88:	beq	12fc4 <__assert_fail@plt+0x1f6c>
   12f8c:	bl	11564 <__assert_fail@plt+0x50c>
   12f90:	mov	r0, r5
   12f94:	bl	11614 <__assert_fail@plt+0x5bc>
   12f98:	mov	r4, r5
   12f9c:	cmp	r0, #0
   12fa0:	beq	12f44 <__assert_fail@plt+0x1eec>
   12fa4:	mov	r0, r5
   12fa8:	bl	11564 <__assert_fail@plt+0x50c>
   12fac:	mov	r0, #16
   12fb0:	bl	1619c <__assert_fail@plt+0x5144>
   12fb4:	mov	r4, r0
   12fb8:	str	sl, [r0]
   12fbc:	strd	r6, [r0, #8]
   12fc0:	b	12f44 <__assert_fail@plt+0x1eec>
   12fc4:	mov	r0, r5
   12fc8:	bl	11564 <__assert_fail@plt+0x50c>
   12fcc:	b	12f44 <__assert_fail@plt+0x1eec>
   12fd0:	ldrdeq	r8, [r1], -r4
   12fd4:	ldr	r3, [pc, #4]	; 12fe0 <__assert_fail@plt+0x1f88>
   12fd8:	str	r0, [r3]
   12fdc:	bx	lr
   12fe0:	andeq	r9, r2, r8, ror #2
   12fe4:	ldr	r3, [pc, #4]	; 12ff0 <__assert_fail@plt+0x1f98>
   12fe8:	strb	r0, [r3, #4]
   12fec:	bx	lr
   12ff0:	andeq	r9, r2, r8, ror #2
   12ff4:	ldr	r3, [pc, #180]	; 130b0 <__assert_fail@plt+0x2058>
   12ff8:	push	{r4, r5, r6, lr}
   12ffc:	sub	sp, sp, #8
   13000:	ldr	r0, [r3]
   13004:	bl	16f98 <__assert_fail@plt+0x5f40>
   13008:	cmp	r0, #0
   1300c:	beq	13034 <__assert_fail@plt+0x1fdc>
   13010:	bl	10f80 <__errno_location@plt>
   13014:	ldr	r5, [pc, #152]	; 130b4 <__assert_fail@plt+0x205c>
   13018:	ldrb	r3, [r5, #4]
   1301c:	cmp	r3, #0
   13020:	mov	r4, r0
   13024:	beq	13050 <__assert_fail@plt+0x1ff8>
   13028:	ldr	r3, [r0]
   1302c:	cmp	r3, #32
   13030:	bne	13050 <__assert_fail@plt+0x1ff8>
   13034:	ldr	r3, [pc, #124]	; 130b8 <__assert_fail@plt+0x2060>
   13038:	ldr	r0, [r3]
   1303c:	bl	16f98 <__assert_fail@plt+0x5f40>
   13040:	cmp	r0, #0
   13044:	bne	13090 <__assert_fail@plt+0x2038>
   13048:	add	sp, sp, #8
   1304c:	pop	{r4, r5, r6, pc}
   13050:	mov	r2, #5
   13054:	ldr	r1, [pc, #96]	; 130bc <__assert_fail@plt+0x2064>
   13058:	mov	r0, #0
   1305c:	bl	10e48 <dcgettext@plt>
   13060:	mov	r6, r0
   13064:	ldr	r0, [r5]
   13068:	cmp	r0, #0
   1306c:	beq	1309c <__assert_fail@plt+0x2044>
   13070:	ldr	r4, [r4]
   13074:	bl	157f4 <__assert_fail@plt+0x479c>
   13078:	mov	r1, r4
   1307c:	str	r6, [sp]
   13080:	ldr	r2, [pc, #56]	; 130c0 <__assert_fail@plt+0x2068>
   13084:	mov	r3, r0
   13088:	mov	r0, #0
   1308c:	bl	10ed8 <error@plt>
   13090:	ldr	r3, [pc, #44]	; 130c4 <__assert_fail@plt+0x206c>
   13094:	ldr	r0, [r3]
   13098:	bl	10e18 <_exit@plt>
   1309c:	mov	r3, r6
   130a0:	ldr	r1, [r4]
   130a4:	ldr	r2, [pc, #28]	; 130c8 <__assert_fail@plt+0x2070>
   130a8:	bl	10ed8 <error@plt>
   130ac:	b	13090 <__assert_fail@plt+0x2038>
   130b0:	andeq	r9, r2, r8, asr r1
   130b4:	andeq	r9, r2, r8, ror #2
   130b8:	andeq	r9, r2, r0, asr r1
   130bc:	andeq	r8, r1, r4, asr #5
   130c0:	ldrdeq	r8, [r1], -r0
   130c4:	strdeq	r9, [r2], -ip
   130c8:	ldrdeq	r8, [r1], -r4
   130cc:	cmp	r0, #0
   130d0:	sbcs	r3, r1, #0
   130d4:	mov	r3, #0
   130d8:	push	{r4, r5, r6, r7, r8, lr}
   130dc:	mov	r4, r0
   130e0:	mov	r5, r1
   130e4:	strb	r3, [r2, #20]
   130e8:	add	r6, r2, #20
   130ec:	blt	1313c <__assert_fail@plt+0x20e4>
   130f0:	mov	r0, r4
   130f4:	mov	r1, r5
   130f8:	mov	r2, #10
   130fc:	mov	r3, #0
   13100:	bl	17438 <__assert_fail@plt+0x63e0>
   13104:	mov	r0, r4
   13108:	mov	r1, r5
   1310c:	mov	r3, #0
   13110:	add	r2, r2, #48	; 0x30
   13114:	strb	r2, [r6, #-1]!
   13118:	mov	r2, #10
   1311c:	bl	17438 <__assert_fail@plt+0x63e0>
   13120:	mov	r4, r0
   13124:	mov	r5, r1
   13128:	orrs	r3, r4, r5
   1312c:	bne	130f0 <__assert_fail@plt+0x2098>
   13130:	mov	r0, r6
   13134:	pop	{r4, r5, r6, r7, r8, pc}
   13138:	mov	r6, r7
   1313c:	mov	r0, r4
   13140:	mov	r1, r5
   13144:	mov	r2, #10
   13148:	mov	r3, #0
   1314c:	bl	17438 <__assert_fail@plt+0x63e0>
   13150:	mov	r0, r4
   13154:	mov	r1, r5
   13158:	mov	r3, #0
   1315c:	sub	r7, r6, #1
   13160:	rsb	r2, r2, #48	; 0x30
   13164:	strb	r2, [r6, #-1]
   13168:	mov	r2, #10
   1316c:	bl	17438 <__assert_fail@plt+0x63e0>
   13170:	mov	r4, r0
   13174:	mov	r5, r1
   13178:	orrs	r3, r4, r5
   1317c:	bne	13138 <__assert_fail@plt+0x20e0>
   13180:	mov	r3, #45	; 0x2d
   13184:	sub	r6, r6, #2
   13188:	strb	r3, [r7, #-1]
   1318c:	mov	r0, r6
   13190:	pop	{r4, r5, r6, r7, r8, pc}
   13194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13198:	sub	sp, sp, #20
   1319c:	ldr	r5, [pc, #184]	; 1325c <__assert_fail@plt+0x2204>
   131a0:	ldr	r4, [pc, #184]	; 13260 <__assert_fail@plt+0x2208>
   131a4:	mov	r6, #0
   131a8:	ldr	ip, [r5]
   131ac:	cmp	r0, #2
   131b0:	ldr	r7, [r4]
   131b4:	str	ip, [sp, #12]
   131b8:	ldr	sl, [sp, #56]	; 0x38
   131bc:	str	r6, [r4]
   131c0:	ldr	fp, [sp, #60]	; 0x3c
   131c4:	beq	131f0 <__assert_fail@plt+0x2198>
   131c8:	ldr	r0, [sp, #12]
   131cc:	ldr	r3, [pc, #144]	; 13264 <__assert_fail@plt+0x220c>
   131d0:	ldr	r1, [r5]
   131d4:	mov	r2, #0
   131d8:	cmp	r0, r1
   131dc:	str	r7, [r4]
   131e0:	str	r2, [r3]
   131e4:	bne	13258 <__assert_fail@plt+0x2200>
   131e8:	add	sp, sp, #20
   131ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f0:	mov	r8, r2
   131f4:	mov	r9, r3
   131f8:	str	r6, [sp]
   131fc:	ldr	r3, [pc, #100]	; 13268 <__assert_fail@plt+0x2210>
   13200:	ldr	r2, [pc, #100]	; 1326c <__assert_fail@plt+0x2214>
   13204:	bl	10f38 <getopt_long@plt>
   13208:	cmn	r0, #1
   1320c:	beq	131c8 <__assert_fail@plt+0x2170>
   13210:	cmp	r0, #104	; 0x68
   13214:	beq	1324c <__assert_fail@plt+0x21f4>
   13218:	cmp	r0, #118	; 0x76
   1321c:	bne	131c8 <__assert_fail@plt+0x2170>
   13220:	ldr	r0, [pc, #72]	; 13270 <__assert_fail@plt+0x2218>
   13224:	add	ip, sp, #64	; 0x40
   13228:	mov	r3, sl
   1322c:	ldr	r0, [r0]
   13230:	mov	r2, r9
   13234:	mov	r1, r8
   13238:	str	ip, [sp]
   1323c:	str	ip, [sp, #8]
   13240:	bl	1602c <__assert_fail@plt+0x4fd4>
   13244:	mov	r0, r6
   13248:	bl	10f50 <exit@plt>
   1324c:	mov	r0, r6
   13250:	blx	fp
   13254:	b	131c8 <__assert_fail@plt+0x2170>
   13258:	bl	10e54 <__stack_chk_fail@plt>
   1325c:	andeq	r8, r2, r8, lsl #30
   13260:	andeq	r9, r2, ip, asr r1
   13264:	andeq	r9, r2, r8, asr #2
   13268:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1326c:	ldrdeq	r8, [r1], -r4
   13270:	andeq	r9, r2, r8, asr r1
   13274:	push	{r4, lr}
   13278:	mov	r4, r0
   1327c:	bl	10e00 <wcwidth@plt>
   13280:	cmp	r0, #0
   13284:	popge	{r4, pc}
   13288:	mov	r0, r4
   1328c:	bl	10e78 <iswcntrl@plt>
   13290:	clz	r0, r0
   13294:	lsr	r0, r0, #5
   13298:	pop	{r4, pc}
   1329c:	mov	r3, r1
   132a0:	push	{r4, r5, r6, lr}
   132a4:	mov	r4, r1
   132a8:	ldr	r1, [r3], #16
   132ac:	ldr	r2, [r4, #4]
   132b0:	cmp	r1, r3
   132b4:	mov	r5, r0
   132b8:	strne	r1, [r0]
   132bc:	beq	132dc <__assert_fail@plt+0x2284>
   132c0:	ldrb	r3, [r4, #8]
   132c4:	str	r2, [r5, #4]
   132c8:	cmp	r3, #0
   132cc:	strb	r3, [r5, #8]
   132d0:	ldrne	r3, [r4, #12]
   132d4:	strne	r3, [r5, #12]
   132d8:	pop	{r4, r5, r6, pc}
   132dc:	add	r3, r0, #16
   132e0:	mov	r0, r3
   132e4:	bl	10e24 <memcpy@plt>
   132e8:	ldr	r2, [r4, #4]
   132ec:	str	r0, [r5]
   132f0:	b	132c0 <__assert_fail@plt+0x2268>
   132f4:	ldr	r3, [pc, #20]	; 13310 <__assert_fail@plt+0x22b8>
   132f8:	lsr	r2, r0, #5
   132fc:	and	r0, r0, #31
   13300:	ldr	r3, [r3, r2, lsl #2]
   13304:	lsr	r0, r3, r0
   13308:	and	r0, r0, #1
   1330c:	bx	lr
   13310:	andeq	r8, r1, r8, lsl r3
   13314:	push	{r4, r5, r6, r7, r8, r9, lr}
   13318:	sub	sp, sp, #68	; 0x44
   1331c:	ldr	r8, [pc, #564]	; 13558 <__assert_fail@plt+0x2500>
   13320:	mov	r9, r0
   13324:	mov	r4, r1
   13328:	ldr	r3, [r8]
   1332c:	str	r3, [sp, #60]	; 0x3c
   13330:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   13334:	cmp	r0, #1
   13338:	bls	13348 <__assert_fail@plt+0x22f0>
   1333c:	uxtb	r6, r4
   13340:	cmp	r6, #47	; 0x2f
   13344:	bhi	1336c <__assert_fail@plt+0x2314>
   13348:	ldr	r2, [sp, #60]	; 0x3c
   1334c:	ldr	r3, [r8]
   13350:	cmp	r2, r3
   13354:	bne	13540 <__assert_fail@plt+0x24e8>
   13358:	mov	r1, r4
   1335c:	mov	r0, r9
   13360:	add	sp, sp, #68	; 0x44
   13364:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13368:	b	10f68 <strchr@plt>
   1336c:	mov	r3, #0
   13370:	ldr	r7, [pc, #484]	; 1355c <__assert_fail@plt+0x2504>
   13374:	mov	r5, #1
   13378:	str	r9, [sp, #20]
   1337c:	str	r3, [sp, #12]
   13380:	strb	r3, [sp, #4]
   13384:	str	r3, [sp, #8]
   13388:	strb	r3, [sp, #16]
   1338c:	b	133e8 <__assert_fail@plt+0x2390>
   13390:	ldrb	r3, [r4]
   13394:	and	r2, r3, #31
   13398:	lsr	r3, r3, #5
   1339c:	ldr	r3, [r7, r3, lsl #2]
   133a0:	lsr	r3, r3, r2
   133a4:	tst	r3, #1
   133a8:	beq	13478 <__assert_fail@plt+0x2420>
   133ac:	str	r5, [sp, #24]
   133b0:	ldrb	r0, [r4]
   133b4:	strb	r5, [sp, #28]
   133b8:	strb	r5, [sp, #16]
   133bc:	cmp	r0, #0
   133c0:	str	r0, [sp, #32]
   133c4:	beq	13524 <__assert_fail@plt+0x24cc>
   133c8:	mov	r0, #1
   133cc:	ldrb	r3, [r4]
   133d0:	cmp	r3, r6
   133d4:	beq	134b4 <__assert_fail@plt+0x245c>
   133d8:	add	r4, r4, r0
   133dc:	mov	r3, #0
   133e0:	str	r4, [sp, #20]
   133e4:	strb	r3, [sp, #16]
   133e8:	ldrb	r3, [sp, #4]
   133ec:	ldr	r4, [sp, #20]
   133f0:	cmp	r3, #0
   133f4:	beq	13390 <__assert_fail@plt+0x2338>
   133f8:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   133fc:	mov	r1, r0
   13400:	mov	r0, r4
   13404:	bl	159ec <__assert_fail@plt+0x4994>
   13408:	add	r3, sp, #8
   1340c:	mov	r1, r4
   13410:	mov	r2, r0
   13414:	add	r0, sp, #32
   13418:	bl	16f18 <__assert_fail@plt+0x5ec0>
   1341c:	cmn	r0, #1
   13420:	str	r0, [sp, #24]
   13424:	beq	13490 <__assert_fail@plt+0x2438>
   13428:	cmn	r0, #2
   1342c:	beq	134d0 <__assert_fail@plt+0x2478>
   13430:	cmp	r0, #0
   13434:	beq	134f0 <__assert_fail@plt+0x2498>
   13438:	ldr	r4, [sp, #32]
   1343c:	add	r0, sp, #8
   13440:	strb	r5, [sp, #28]
   13444:	bl	10e30 <mbsinit@plt>
   13448:	cmp	r0, #0
   1344c:	movne	r3, #0
   13450:	strbeq	r5, [sp, #16]
   13454:	strbne	r5, [sp, #16]
   13458:	strbne	r3, [sp, #4]
   1345c:	cmp	r4, #0
   13460:	beq	134b4 <__assert_fail@plt+0x245c>
   13464:	ldr	r4, [sp, #20]
   13468:	ldr	r0, [sp, #24]
   1346c:	cmp	r0, #1
   13470:	bne	133d8 <__assert_fail@plt+0x2380>
   13474:	b	133cc <__assert_fail@plt+0x2374>
   13478:	add	r0, sp, #8
   1347c:	bl	10e30 <mbsinit@plt>
   13480:	cmp	r0, #0
   13484:	beq	1352c <__assert_fail@plt+0x24d4>
   13488:	strb	r5, [sp, #4]
   1348c:	b	133f8 <__assert_fail@plt+0x23a0>
   13490:	ldr	r4, [sp, #20]
   13494:	mov	r3, #0
   13498:	str	r5, [sp, #24]
   1349c:	strb	r5, [sp, #16]
   134a0:	strb	r3, [sp, #28]
   134a4:	ldrb	r3, [r4]
   134a8:	mov	r0, #1
   134ac:	cmp	r3, r6
   134b0:	bne	133d8 <__assert_fail@plt+0x2380>
   134b4:	ldr	r2, [sp, #60]	; 0x3c
   134b8:	ldr	r3, [r8]
   134bc:	mov	r0, r4
   134c0:	cmp	r2, r3
   134c4:	bne	13540 <__assert_fail@plt+0x24e8>
   134c8:	add	sp, sp, #68	; 0x44
   134cc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   134d0:	ldr	r4, [sp, #20]
   134d4:	mov	r0, r4
   134d8:	bl	10f5c <strlen@plt>
   134dc:	mov	r3, #0
   134e0:	strb	r5, [sp, #16]
   134e4:	strb	r3, [sp, #28]
   134e8:	str	r0, [sp, #24]
   134ec:	b	13468 <__assert_fail@plt+0x2410>
   134f0:	ldr	r4, [sp, #20]
   134f4:	str	r5, [sp, #24]
   134f8:	ldrb	r3, [r4]
   134fc:	cmp	r3, #0
   13500:	bne	13544 <__assert_fail@plt+0x24ec>
   13504:	ldr	r4, [sp, #32]
   13508:	cmp	r4, #0
   1350c:	beq	1343c <__assert_fail@plt+0x23e4>
   13510:	ldr	r3, [pc, #72]	; 13560 <__assert_fail@plt+0x2508>
   13514:	mov	r2, #179	; 0xb3
   13518:	ldr	r1, [pc, #68]	; 13564 <__assert_fail@plt+0x250c>
   1351c:	ldr	r0, [pc, #68]	; 13568 <__assert_fail@plt+0x2510>
   13520:	bl	11058 <__assert_fail@plt>
   13524:	mov	r4, r0
   13528:	b	134b4 <__assert_fail@plt+0x245c>
   1352c:	ldr	r3, [pc, #44]	; 13560 <__assert_fail@plt+0x2508>
   13530:	mov	r2, #150	; 0x96
   13534:	ldr	r1, [pc, #40]	; 13564 <__assert_fail@plt+0x250c>
   13538:	ldr	r0, [pc, #44]	; 1356c <__assert_fail@plt+0x2514>
   1353c:	bl	11058 <__assert_fail@plt>
   13540:	bl	10e54 <__stack_chk_fail@plt>
   13544:	ldr	r3, [pc, #20]	; 13560 <__assert_fail@plt+0x2508>
   13548:	mov	r2, #178	; 0xb2
   1354c:	ldr	r1, [pc, #16]	; 13564 <__assert_fail@plt+0x250c>
   13550:	ldr	r0, [pc, #24]	; 13570 <__assert_fail@plt+0x2518>
   13554:	bl	11058 <__assert_fail@plt>
   13558:	andeq	r8, r2, r8, lsl #30
   1355c:	andeq	r8, r1, r8, lsl r3
   13560:	andeq	r8, r1, r8, lsr r3
   13564:	andeq	r8, r1, ip, asr #6
   13568:	muleq	r1, r0, r7
   1356c:	andeq	r8, r1, r0, lsl #1
   13570:	muleq	r1, r8, r0
   13574:	push	{r4, r5, r6, r7, r8, lr}
   13578:	sub	sp, sp, #64	; 0x40
   1357c:	ldr	r7, [pc, #464]	; 13754 <__assert_fail@plt+0x26fc>
   13580:	mov	r4, r0
   13584:	ldr	r3, [r7]
   13588:	str	r3, [sp, #60]	; 0x3c
   1358c:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   13590:	cmp	r0, #1
   13594:	bhi	135c0 <__assert_fail@plt+0x2568>
   13598:	mov	r0, r4
   1359c:	bl	10f5c <strlen@plt>
   135a0:	mov	r5, r0
   135a4:	ldr	r2, [sp, #60]	; 0x3c
   135a8:	ldr	r3, [r7]
   135ac:	mov	r0, r5
   135b0:	cmp	r2, r3
   135b4:	bne	1373c <__assert_fail@plt+0x26e4>
   135b8:	add	sp, sp, #64	; 0x40
   135bc:	pop	{r4, r5, r6, r7, r8, pc}
   135c0:	mov	r5, #0
   135c4:	str	r4, [sp, #20]
   135c8:	str	r5, [sp, #12]
   135cc:	strb	r5, [sp, #4]
   135d0:	str	r5, [sp, #8]
   135d4:	strb	r5, [sp, #16]
   135d8:	mov	r6, #1
   135dc:	ldr	r8, [pc, #372]	; 13758 <__assert_fail@plt+0x2700>
   135e0:	b	13638 <__assert_fail@plt+0x25e0>
   135e4:	ldrb	r3, [r4]
   135e8:	and	r2, r3, #31
   135ec:	lsr	r3, r3, #5
   135f0:	ldr	r3, [r8, r3, lsl #2]
   135f4:	lsr	r3, r3, r2
   135f8:	tst	r3, #1
   135fc:	beq	136ac <__assert_fail@plt+0x2654>
   13600:	str	r6, [sp, #24]
   13604:	ldrb	r4, [r4]
   13608:	strb	r6, [sp, #28]
   1360c:	strb	r6, [sp, #16]
   13610:	str	r4, [sp, #32]
   13614:	cmp	r4, #0
   13618:	beq	135a4 <__assert_fail@plt+0x254c>
   1361c:	ldr	r4, [sp, #20]
   13620:	ldr	r3, [sp, #24]
   13624:	add	r5, r5, #1
   13628:	add	r4, r4, r3
   1362c:	mov	r3, #0
   13630:	str	r4, [sp, #20]
   13634:	strb	r3, [sp, #16]
   13638:	ldrb	r3, [sp, #4]
   1363c:	cmp	r3, #0
   13640:	beq	135e4 <__assert_fail@plt+0x258c>
   13644:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   13648:	mov	r1, r0
   1364c:	mov	r0, r4
   13650:	bl	159ec <__assert_fail@plt+0x4994>
   13654:	add	r3, sp, #8
   13658:	mov	r1, r4
   1365c:	mov	r2, r0
   13660:	add	r0, sp, #32
   13664:	bl	16f18 <__assert_fail@plt+0x5ec0>
   13668:	cmn	r0, #1
   1366c:	str	r0, [sp, #24]
   13670:	beq	136c4 <__assert_fail@plt+0x266c>
   13674:	cmn	r0, #2
   13678:	beq	136d8 <__assert_fail@plt+0x2680>
   1367c:	cmp	r0, #0
   13680:	beq	136f4 <__assert_fail@plt+0x269c>
   13684:	ldr	r4, [sp, #32]
   13688:	add	r0, sp, #8
   1368c:	strb	r6, [sp, #28]
   13690:	bl	10e30 <mbsinit@plt>
   13694:	cmp	r0, #0
   13698:	movne	r3, #0
   1369c:	strbeq	r6, [sp, #16]
   136a0:	strbne	r6, [sp, #16]
   136a4:	strbne	r3, [sp, #4]
   136a8:	b	13614 <__assert_fail@plt+0x25bc>
   136ac:	add	r0, sp, #8
   136b0:	bl	10e30 <mbsinit@plt>
   136b4:	cmp	r0, #0
   136b8:	beq	13728 <__assert_fail@plt+0x26d0>
   136bc:	strb	r6, [sp, #4]
   136c0:	b	13644 <__assert_fail@plt+0x25ec>
   136c4:	mov	r3, #0
   136c8:	str	r6, [sp, #24]
   136cc:	strb	r3, [sp, #28]
   136d0:	ldr	r4, [sp, #20]
   136d4:	b	13620 <__assert_fail@plt+0x25c8>
   136d8:	ldr	r4, [sp, #20]
   136dc:	mov	r0, r4
   136e0:	bl	10f5c <strlen@plt>
   136e4:	mov	r3, #0
   136e8:	strb	r3, [sp, #28]
   136ec:	str	r0, [sp, #24]
   136f0:	b	13620 <__assert_fail@plt+0x25c8>
   136f4:	ldr	r4, [sp, #20]
   136f8:	str	r6, [sp, #24]
   136fc:	ldrb	r3, [r4]
   13700:	cmp	r3, #0
   13704:	bne	13740 <__assert_fail@plt+0x26e8>
   13708:	ldr	r4, [sp, #32]
   1370c:	cmp	r4, #0
   13710:	beq	13688 <__assert_fail@plt+0x2630>
   13714:	ldr	r3, [pc, #64]	; 1375c <__assert_fail@plt+0x2704>
   13718:	mov	r2, #179	; 0xb3
   1371c:	ldr	r1, [pc, #60]	; 13760 <__assert_fail@plt+0x2708>
   13720:	ldr	r0, [pc, #60]	; 13764 <__assert_fail@plt+0x270c>
   13724:	bl	11058 <__assert_fail@plt>
   13728:	ldr	r3, [pc, #44]	; 1375c <__assert_fail@plt+0x2704>
   1372c:	mov	r2, #150	; 0x96
   13730:	ldr	r1, [pc, #40]	; 13760 <__assert_fail@plt+0x2708>
   13734:	ldr	r0, [pc, #44]	; 13768 <__assert_fail@plt+0x2710>
   13738:	bl	11058 <__assert_fail@plt>
   1373c:	bl	10e54 <__stack_chk_fail@plt>
   13740:	ldr	r3, [pc, #20]	; 1375c <__assert_fail@plt+0x2704>
   13744:	mov	r2, #178	; 0xb2
   13748:	ldr	r1, [pc, #16]	; 13760 <__assert_fail@plt+0x2708>
   1374c:	ldr	r0, [pc, #24]	; 1376c <__assert_fail@plt+0x2714>
   13750:	bl	11058 <__assert_fail@plt>
   13754:	andeq	r8, r2, r8, lsl #30
   13758:	andeq	r8, r1, r8, lsl r3
   1375c:	andeq	r8, r1, ip, asr r3
   13760:	andeq	r8, r1, ip, asr #6
   13764:	muleq	r1, r0, r7
   13768:	andeq	r8, r1, r0, lsl #1
   1376c:	muleq	r1, r8, r0
   13770:	push	{r4, r5, r6, lr}
   13774:	subs	r4, r0, #0
   13778:	beq	137ec <__assert_fail@plt+0x2794>
   1377c:	mov	r1, #47	; 0x2f
   13780:	bl	11004 <strrchr@plt>
   13784:	subs	r5, r0, #0
   13788:	beq	137d8 <__assert_fail@plt+0x2780>
   1378c:	add	r6, r5, #1
   13790:	sub	r3, r6, r4
   13794:	cmp	r3, #6
   13798:	ble	137d8 <__assert_fail@plt+0x2780>
   1379c:	mov	r2, #7
   137a0:	ldr	r1, [pc, #96]	; 13808 <__assert_fail@plt+0x27b0>
   137a4:	sub	r0, r5, #6
   137a8:	bl	11040 <strncmp@plt>
   137ac:	cmp	r0, #0
   137b0:	bne	137d8 <__assert_fail@plt+0x2780>
   137b4:	mov	r2, #3
   137b8:	ldr	r1, [pc, #76]	; 1380c <__assert_fail@plt+0x27b4>
   137bc:	mov	r0, r6
   137c0:	bl	11040 <strncmp@plt>
   137c4:	cmp	r0, #0
   137c8:	movne	r4, r6
   137cc:	ldreq	r3, [pc, #60]	; 13810 <__assert_fail@plt+0x27b8>
   137d0:	addeq	r4, r5, #4
   137d4:	streq	r4, [r3]
   137d8:	ldr	r2, [pc, #52]	; 13814 <__assert_fail@plt+0x27bc>
   137dc:	ldr	r3, [pc, #52]	; 13818 <__assert_fail@plt+0x27c0>
   137e0:	str	r4, [r2]
   137e4:	str	r4, [r3]
   137e8:	pop	{r4, r5, r6, pc}
   137ec:	ldr	r3, [pc, #40]	; 1381c <__assert_fail@plt+0x27c4>
   137f0:	mov	r2, #55	; 0x37
   137f4:	mov	r1, #1
   137f8:	ldr	r3, [r3]
   137fc:	ldr	r0, [pc, #28]	; 13820 <__assert_fail@plt+0x27c8>
   13800:	bl	10e90 <fwrite@plt>
   13804:	bl	1104c <abort@plt>
   13808:	andeq	r8, r1, r8, lsr #7
   1380c:			; <UNDEFINED> instruction: 0x000183b0
   13810:	andeq	r9, r2, r0, asr #2
   13814:	andeq	r9, r2, r0, ror r1
   13818:	andeq	r9, r2, r4, asr #2
   1381c:	andeq	r9, r2, r0, asr r1
   13820:	andeq	r8, r1, r0, ror r3
   13824:	push	{r4, lr}
   13828:	mov	r2, #48	; 0x30
   1382c:	mov	r4, r1
   13830:	mov	r1, #0
   13834:	bl	10f98 <memset@plt>
   13838:	cmp	r4, #10
   1383c:	beq	13848 <__assert_fail@plt+0x27f0>
   13840:	str	r4, [r0]
   13844:	pop	{r4, pc}
   13848:	bl	1104c <abort@plt>
   1384c:	push	{r4, r5, r6, lr}
   13850:	mov	r2, #5
   13854:	mov	r5, r0
   13858:	mov	r6, r1
   1385c:	mov	r1, r0
   13860:	mov	r0, #0
   13864:	bl	10e48 <dcgettext@plt>
   13868:	cmp	r5, r0
   1386c:	mov	r4, r0
   13870:	beq	1387c <__assert_fail@plt+0x2824>
   13874:	mov	r0, r4
   13878:	pop	{r4, r5, r6, pc}
   1387c:	bl	17058 <__assert_fail@plt+0x6000>
   13880:	ldrb	r3, [r0]
   13884:	bic	r3, r3, #32
   13888:	cmp	r3, #85	; 0x55
   1388c:	bne	138ec <__assert_fail@plt+0x2894>
   13890:	ldrb	r3, [r0, #1]
   13894:	bic	r3, r3, #32
   13898:	cmp	r3, #84	; 0x54
   1389c:	bne	13964 <__assert_fail@plt+0x290c>
   138a0:	ldrb	r3, [r0, #2]
   138a4:	bic	r3, r3, #32
   138a8:	cmp	r3, #70	; 0x46
   138ac:	bne	13964 <__assert_fail@plt+0x290c>
   138b0:	ldrb	r3, [r0, #3]
   138b4:	cmp	r3, #45	; 0x2d
   138b8:	bne	13964 <__assert_fail@plt+0x290c>
   138bc:	ldrb	r3, [r0, #4]
   138c0:	cmp	r3, #56	; 0x38
   138c4:	bne	13964 <__assert_fail@plt+0x290c>
   138c8:	ldrb	r3, [r0, #5]
   138cc:	cmp	r3, #0
   138d0:	bne	13964 <__assert_fail@plt+0x290c>
   138d4:	ldrb	r2, [r4]
   138d8:	ldr	r3, [pc, #156]	; 1397c <__assert_fail@plt+0x2924>
   138dc:	ldr	r4, [pc, #156]	; 13980 <__assert_fail@plt+0x2928>
   138e0:	cmp	r2, #96	; 0x60
   138e4:	movne	r4, r3
   138e8:	b	13874 <__assert_fail@plt+0x281c>
   138ec:	cmp	r3, #71	; 0x47
   138f0:	bne	13964 <__assert_fail@plt+0x290c>
   138f4:	ldrb	r3, [r0, #1]
   138f8:	bic	r3, r3, #32
   138fc:	cmp	r3, #66	; 0x42
   13900:	bne	13964 <__assert_fail@plt+0x290c>
   13904:	ldrb	r3, [r0, #2]
   13908:	cmp	r3, #49	; 0x31
   1390c:	bne	13964 <__assert_fail@plt+0x290c>
   13910:	ldrb	r3, [r0, #3]
   13914:	cmp	r3, #56	; 0x38
   13918:	bne	13964 <__assert_fail@plt+0x290c>
   1391c:	ldrb	r3, [r0, #4]
   13920:	cmp	r3, #48	; 0x30
   13924:	bne	13964 <__assert_fail@plt+0x290c>
   13928:	ldrb	r3, [r0, #5]
   1392c:	cmp	r3, #51	; 0x33
   13930:	bne	13964 <__assert_fail@plt+0x290c>
   13934:	ldrb	r3, [r0, #6]
   13938:	cmp	r3, #48	; 0x30
   1393c:	bne	13964 <__assert_fail@plt+0x290c>
   13940:	ldrb	r3, [r0, #7]
   13944:	cmp	r3, #0
   13948:	bne	13964 <__assert_fail@plt+0x290c>
   1394c:	ldrb	r2, [r4]
   13950:	ldr	r3, [pc, #44]	; 13984 <__assert_fail@plt+0x292c>
   13954:	ldr	r4, [pc, #44]	; 13988 <__assert_fail@plt+0x2930>
   13958:	cmp	r2, #96	; 0x60
   1395c:	movne	r4, r3
   13960:	b	13874 <__assert_fail@plt+0x281c>
   13964:	ldr	r3, [pc, #32]	; 1398c <__assert_fail@plt+0x2934>
   13968:	ldr	r4, [pc, #32]	; 13990 <__assert_fail@plt+0x2938>
   1396c:	cmp	r6, #9
   13970:	movne	r4, r3
   13974:	mov	r0, r4
   13978:	pop	{r4, r5, r6, pc}
   1397c:	andeq	r8, r1, ip, lsl #8
   13980:	andeq	r8, r1, r8, lsl r4
   13984:	andeq	r8, r1, r0, lsl r4
   13988:	andeq	r8, r1, r4, lsl r4
   1398c:	andeq	r8, r1, ip, lsl r4
   13990:	andeq	r8, r1, r8, lsl #8
   13994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13998:	sub	sp, sp, #124	; 0x7c
   1399c:	ldr	ip, [pc, #3576]	; 1479c <__assert_fail@plt+0x3744>
   139a0:	str	r3, [sp, #24]
   139a4:	ldr	r3, [sp, #168]	; 0xa8
   139a8:	ldr	ip, [ip]
   139ac:	str	r3, [sp, #56]	; 0x38
   139b0:	ldr	r3, [sp, #172]	; 0xac
   139b4:	ldr	r8, [sp, #160]	; 0xa0
   139b8:	str	r3, [sp, #80]	; 0x50
   139bc:	ldr	r3, [sp, #176]	; 0xb0
   139c0:	mov	fp, r0
   139c4:	str	r3, [sp, #76]	; 0x4c
   139c8:	mov	sl, r1
   139cc:	str	r2, [sp, #36]	; 0x24
   139d0:	str	ip, [sp, #116]	; 0x74
   139d4:	bl	10eb4 <__ctype_get_mb_cur_max@plt>
   139d8:	ldr	r3, [sp, #164]	; 0xa4
   139dc:	ands	r4, r3, #2
   139e0:	movne	r3, #1
   139e4:	moveq	r3, #0
   139e8:	str	r3, [sp, #32]
   139ec:	str	r0, [sp, #64]	; 0x40
   139f0:	cmp	r8, #10
   139f4:	ldrls	pc, [pc, r8, lsl #2]
   139f8:	b	151a8 <__assert_fail@plt+0x4150>
   139fc:	strdeq	r3, [r1], -r0
   13a00:	andeq	r3, r1, r8, lsl #29
   13a04:	andeq	r4, r1, r8, lsl #9
   13a08:	andeq	r3, r1, r8, lsr #29
   13a0c:	andeq	r3, r1, ip, asr sp
   13a10:	andeq	r3, r1, r4, lsr #27
   13a14:	andeq	r3, r1, r0, lsr #28
   13a18:	andeq	r3, r1, r8, asr lr
   13a1c:	andeq	r3, r1, r8, lsr #20
   13a20:	andeq	r3, r1, r8, lsr #20
   13a24:	andeq	r3, r1, r8, lsr #20
   13a28:	cmp	r8, #10
   13a2c:	beq	13a50 <__assert_fail@plt+0x29f8>
   13a30:	mov	r1, r8
   13a34:	ldr	r0, [pc, #3428]	; 147a0 <__assert_fail@plt+0x3748>
   13a38:	bl	1384c <__assert_fail@plt+0x27f4>
   13a3c:	mov	r1, r8
   13a40:	str	r0, [sp, #80]	; 0x50
   13a44:	ldr	r0, [pc, #3420]	; 147a8 <__assert_fail@plt+0x3750>
   13a48:	bl	1384c <__assert_fail@plt+0x27f4>
   13a4c:	str	r0, [sp, #76]	; 0x4c
   13a50:	cmp	r4, #0
   13a54:	movne	r4, #0
   13a58:	beq	14e68 <__assert_fail@plt+0x3e10>
   13a5c:	ldr	r7, [sp, #76]	; 0x4c
   13a60:	mov	r5, #0
   13a64:	mov	r6, #1
   13a68:	mov	r0, r7
   13a6c:	str	r6, [sp, #40]	; 0x28
   13a70:	str	r5, [sp, #68]	; 0x44
   13a74:	bl	10f5c <strlen@plt>
   13a78:	str	r6, [sp, #28]
   13a7c:	str	r5, [sp, #44]	; 0x2c
   13a80:	str	r5, [sp, #72]	; 0x48
   13a84:	str	r7, [sp, #60]	; 0x3c
   13a88:	str	r0, [sp, #52]	; 0x34
   13a8c:	str	r8, [sp, #160]	; 0xa0
   13a90:	mov	r8, fp
   13a94:	ldr	fp, [sp, #160]	; 0xa0
   13a98:	mov	r9, #0
   13a9c:	ldr	r3, [sp, #24]
   13aa0:	cmn	r3, #1
   13aa4:	beq	1400c <__assert_fail@plt+0x2fb4>
   13aa8:	ldr	r3, [sp, #24]
   13aac:	subs	r6, r3, r9
   13ab0:	movne	r6, #1
   13ab4:	cmp	r6, #0
   13ab8:	beq	14024 <__assert_fail@plt+0x2fcc>
   13abc:	ldr	r7, [sp, #28]
   13ac0:	ldr	r0, [sp, #36]	; 0x24
   13ac4:	cmp	fp, #2
   13ac8:	moveq	r7, #0
   13acc:	andne	r7, r7, #1
   13ad0:	add	r3, r0, r9
   13ad4:	cmp	r7, #0
   13ad8:	str	r3, [sp, #48]	; 0x30
   13adc:	beq	144c8 <__assert_fail@plt+0x3470>
   13ae0:	ldr	r2, [sp, #52]	; 0x34
   13ae4:	cmp	r2, #0
   13ae8:	beq	147ac <__assert_fail@plt+0x3754>
   13aec:	ldr	r1, [sp, #24]
   13af0:	cmp	r2, #1
   13af4:	mov	r3, r2
   13af8:	movls	r3, #0
   13afc:	movhi	r3, #1
   13b00:	cmn	r1, #1
   13b04:	movne	r3, #0
   13b08:	cmp	r3, #0
   13b0c:	add	r5, r9, r2
   13b10:	beq	13b1c <__assert_fail@plt+0x2ac4>
   13b14:	bl	10f5c <strlen@plt>
   13b18:	str	r0, [sp, #24]
   13b1c:	ldr	r3, [sp, #24]
   13b20:	cmp	r5, r3
   13b24:	bhi	147ac <__assert_fail@plt+0x3754>
   13b28:	ldr	r2, [sp, #52]	; 0x34
   13b2c:	ldr	r1, [sp, #60]	; 0x3c
   13b30:	ldr	r0, [sp, #48]	; 0x30
   13b34:	bl	10e3c <memcmp@plt>
   13b38:	cmp	r0, #0
   13b3c:	bne	147ac <__assert_fail@plt+0x3754>
   13b40:	ldr	r3, [sp, #32]
   13b44:	cmp	r3, #0
   13b48:	bne	15068 <__assert_fail@plt+0x4010>
   13b4c:	ldr	r3, [sp, #48]	; 0x30
   13b50:	ldrb	r5, [r3]
   13b54:	cmp	r5, #126	; 0x7e
   13b58:	ldrls	pc, [pc, r5, lsl #2]
   13b5c:	b	1442c <__assert_fail@plt+0x33d4>
   13b60:	andeq	r4, r1, r8, lsl r3
   13b64:	andeq	r4, r1, ip, lsr #8
   13b68:	andeq	r4, r1, ip, lsr #8
   13b6c:	andeq	r4, r1, ip, lsr #8
   13b70:	andeq	r4, r1, ip, lsr #8
   13b74:	andeq	r4, r1, ip, lsr #8
   13b78:	andeq	r4, r1, ip, lsr #8
   13b7c:	andeq	r4, r1, r4, ror #7
   13b80:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b84:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b88:	muleq	r1, ip, r2
   13b8c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13b90:	ldrdeq	r4, [r1], -ip
   13b94:	andeq	r4, r1, ip, lsl #4
   13b98:	andeq	r4, r1, ip, lsr #8
   13b9c:	andeq	r4, r1, ip, lsr #8
   13ba0:	andeq	r4, r1, ip, lsr #8
   13ba4:	andeq	r4, r1, ip, lsr #8
   13ba8:	andeq	r4, r1, ip, lsr #8
   13bac:	andeq	r4, r1, ip, lsr #8
   13bb0:	andeq	r4, r1, ip, lsr #8
   13bb4:	andeq	r4, r1, ip, lsr #8
   13bb8:	andeq	r4, r1, ip, lsr #8
   13bbc:	andeq	r4, r1, ip, lsr #8
   13bc0:	andeq	r4, r1, ip, lsr #8
   13bc4:	andeq	r4, r1, ip, lsr #8
   13bc8:	andeq	r4, r1, ip, lsr #8
   13bcc:	andeq	r4, r1, ip, lsr #8
   13bd0:	andeq	r4, r1, ip, lsr #8
   13bd4:	andeq	r4, r1, ip, lsr #8
   13bd8:	andeq	r4, r1, ip, lsr #8
   13bdc:	andeq	r4, r1, ip, lsr #8
   13be0:	andeq	r4, r1, ip, ror #7
   13be4:	andeq	r4, r1, r0, lsl #6
   13be8:	andeq	r4, r1, r0, lsl #6
   13bec:	andeq	r4, r1, r4, lsl #8
   13bf0:	andeq	r4, r1, r0, lsl #6
   13bf4:	andeq	r4, r1, r0, lsr #8
   13bf8:	andeq	r4, r1, r0, lsl #6
   13bfc:	andeq	r4, r1, r0, asr #2
   13c00:	andeq	r4, r1, r0, lsl #6
   13c04:	andeq	r4, r1, r0, lsl #6
   13c08:	andeq	r4, r1, r0, lsl #6
   13c0c:	andeq	r4, r1, r0, lsr #8
   13c10:	andeq	r4, r1, r0, lsr #8
   13c14:	andeq	r4, r1, r0, lsr #8
   13c18:	andeq	r4, r1, r0, lsr #8
   13c1c:	andeq	r4, r1, r0, lsr #8
   13c20:	andeq	r4, r1, r0, lsr #8
   13c24:	andeq	r4, r1, r0, lsr #8
   13c28:	andeq	r4, r1, r0, lsr #8
   13c2c:	andeq	r4, r1, r0, lsr #8
   13c30:	andeq	r4, r1, r0, lsr #8
   13c34:	andeq	r4, r1, r0, lsr #8
   13c38:	andeq	r4, r1, r0, lsr #8
   13c3c:	andeq	r4, r1, r0, lsr #8
   13c40:	andeq	r4, r1, r0, lsr #8
   13c44:	andeq	r4, r1, r0, lsr #8
   13c48:	andeq	r4, r1, r0, lsr #8
   13c4c:	andeq	r4, r1, r0, lsl #6
   13c50:	andeq	r4, r1, r0, lsl #6
   13c54:	andeq	r4, r1, r0, lsl #6
   13c58:	andeq	r4, r1, r0, lsl #6
   13c5c:	andeq	r4, r1, r4, lsl r1
   13c60:	andeq	r4, r1, ip, lsr #8
   13c64:	andeq	r4, r1, r0, lsr #8
   13c68:	andeq	r4, r1, r0, lsr #8
   13c6c:	andeq	r4, r1, r0, lsr #8
   13c70:	andeq	r4, r1, r0, lsr #8
   13c74:	andeq	r4, r1, r0, lsr #8
   13c78:	andeq	r4, r1, r0, lsr #8
   13c7c:	andeq	r4, r1, r0, lsr #8
   13c80:	andeq	r4, r1, r0, lsr #8
   13c84:	andeq	r4, r1, r0, lsr #8
   13c88:	andeq	r4, r1, r0, lsr #8
   13c8c:	andeq	r4, r1, r0, lsr #8
   13c90:	andeq	r4, r1, r0, lsr #8
   13c94:	andeq	r4, r1, r0, lsr #8
   13c98:	andeq	r4, r1, r0, lsr #8
   13c9c:	andeq	r4, r1, r0, lsr #8
   13ca0:	andeq	r4, r1, r0, lsr #8
   13ca4:	andeq	r4, r1, r0, lsr #8
   13ca8:	andeq	r4, r1, r0, lsr #8
   13cac:	andeq	r4, r1, r0, lsr #8
   13cb0:	andeq	r4, r1, r0, lsr #8
   13cb4:	andeq	r4, r1, r0, lsr #8
   13cb8:	andeq	r4, r1, r0, lsr #8
   13cbc:	andeq	r4, r1, r0, lsr #8
   13cc0:	andeq	r4, r1, r0, lsr #8
   13cc4:	andeq	r4, r1, r0, lsr #8
   13cc8:	andeq	r4, r1, r0, lsr #8
   13ccc:	andeq	r4, r1, r0, lsl #6
   13cd0:	andeq	r4, r1, ip, asr #1
   13cd4:	andeq	r4, r1, r0, lsr #8
   13cd8:	andeq	r4, r1, r0, lsl #6
   13cdc:	andeq	r4, r1, r0, lsr #8
   13ce0:	andeq	r4, r1, r0, lsl #6
   13ce4:	andeq	r4, r1, r0, lsr #8
   13ce8:	andeq	r4, r1, r0, lsr #8
   13cec:	andeq	r4, r1, r0, lsr #8
   13cf0:	andeq	r4, r1, r0, lsr #8
   13cf4:	andeq	r4, r1, r0, lsr #8
   13cf8:	andeq	r4, r1, r0, lsr #8
   13cfc:	andeq	r4, r1, r0, lsr #8
   13d00:	andeq	r4, r1, r0, lsr #8
   13d04:	andeq	r4, r1, r0, lsr #8
   13d08:	andeq	r4, r1, r0, lsr #8
   13d0c:	andeq	r4, r1, r0, lsr #8
   13d10:	andeq	r4, r1, r0, lsr #8
   13d14:	andeq	r4, r1, r0, lsr #8
   13d18:	andeq	r4, r1, r0, lsr #8
   13d1c:	andeq	r4, r1, r0, lsr #8
   13d20:	andeq	r4, r1, r0, lsr #8
   13d24:	andeq	r4, r1, r0, lsr #8
   13d28:	andeq	r4, r1, r0, lsr #8
   13d2c:	andeq	r4, r1, r0, lsr #8
   13d30:	andeq	r4, r1, r0, lsr #8
   13d34:	andeq	r4, r1, r0, lsr #8
   13d38:	andeq	r4, r1, r0, lsr #8
   13d3c:	andeq	r4, r1, r0, lsr #8
   13d40:	andeq	r4, r1, r0, lsr #8
   13d44:	andeq	r4, r1, r0, lsr #8
   13d48:	andeq	r4, r1, r0, lsr #8
   13d4c:	andeq	r3, r1, r4, ror #29
   13d50:	andeq	r4, r1, r0, lsl #6
   13d54:	andeq	r3, r1, r4, ror #29
   13d58:	andeq	r4, r1, r4, lsl #8
   13d5c:	cmp	r4, #0
   13d60:	moveq	r3, #1
   13d64:	streq	r3, [sp, #28]
   13d68:	beq	14494 <__assert_fail@plt+0x343c>
   13d6c:	mov	r3, #0
   13d70:	mov	r4, r3
   13d74:	mov	r2, #1
   13d78:	str	r2, [sp, #40]	; 0x28
   13d7c:	str	r3, [sp, #68]	; 0x44
   13d80:	str	r2, [sp, #32]
   13d84:	str	r2, [sp, #52]	; 0x34
   13d88:	ldr	r3, [pc, #2584]	; 147a8 <__assert_fail@plt+0x3750>
   13d8c:	str	r4, [sp, #44]	; 0x2c
   13d90:	str	r4, [sp, #72]	; 0x48
   13d94:	str	r4, [sp, #28]
   13d98:	str	r3, [sp, #60]	; 0x3c
   13d9c:	mov	r8, #2
   13da0:	b	13a8c <__assert_fail@plt+0x2a34>
   13da4:	cmp	r4, #0
   13da8:	bne	15034 <__assert_fail@plt+0x3fdc>
   13dac:	cmp	sl, #0
   13db0:	beq	14df4 <__assert_fail@plt+0x3d9c>
   13db4:	mov	r3, #34	; 0x22
   13db8:	strb	r3, [fp]
   13dbc:	ldr	r3, [pc, #2528]	; 147a4 <__assert_fail@plt+0x374c>
   13dc0:	mov	r1, r4
   13dc4:	mov	r2, #1
   13dc8:	str	r4, [sp, #68]	; 0x44
   13dcc:	str	r2, [sp, #40]	; 0x28
   13dd0:	mov	r4, r2
   13dd4:	str	r1, [sp, #44]	; 0x2c
   13dd8:	str	r1, [sp, #72]	; 0x48
   13ddc:	str	r1, [sp, #32]
   13de0:	str	r2, [sp, #28]
   13de4:	str	r2, [sp, #52]	; 0x34
   13de8:	str	r3, [sp, #60]	; 0x3c
   13dec:	b	13a8c <__assert_fail@plt+0x2a34>
   13df0:	mov	r3, #0
   13df4:	str	r3, [sp, #68]	; 0x44
   13df8:	str	r3, [sp, #44]	; 0x2c
   13dfc:	str	r3, [sp, #32]
   13e00:	str	r3, [sp, #28]
   13e04:	str	r3, [sp, #60]	; 0x3c
   13e08:	mov	r3, #1
   13e0c:	str	r8, [sp, #72]	; 0x48
   13e10:	str	r8, [sp, #52]	; 0x34
   13e14:	mov	r4, r8
   13e18:	str	r3, [sp, #40]	; 0x28
   13e1c:	b	13a8c <__assert_fail@plt+0x2a34>
   13e20:	mov	r3, #1
   13e24:	str	r3, [sp, #40]	; 0x28
   13e28:	str	r3, [sp, #32]
   13e2c:	str	r3, [sp, #28]
   13e30:	str	r3, [sp, #52]	; 0x34
   13e34:	ldr	r3, [pc, #2408]	; 147a4 <__assert_fail@plt+0x374c>
   13e38:	mov	r2, #0
   13e3c:	mov	r4, r2
   13e40:	str	r2, [sp, #68]	; 0x44
   13e44:	str	r2, [sp, #44]	; 0x2c
   13e48:	str	r2, [sp, #72]	; 0x48
   13e4c:	str	r3, [sp, #60]	; 0x3c
   13e50:	mov	r8, #5
   13e54:	b	13a8c <__assert_fail@plt+0x2a34>
   13e58:	mov	r3, #0
   13e5c:	mov	r2, #1
   13e60:	str	r2, [sp, #40]	; 0x28
   13e64:	mov	r4, r3
   13e68:	str	r3, [sp, #68]	; 0x44
   13e6c:	str	r2, [sp, #28]
   13e70:	str	r3, [sp, #44]	; 0x2c
   13e74:	str	r3, [sp, #72]	; 0x48
   13e78:	str	r3, [sp, #32]
   13e7c:	str	r3, [sp, #52]	; 0x34
   13e80:	str	r3, [sp, #60]	; 0x3c
   13e84:	b	13a8c <__assert_fail@plt+0x2a34>
   13e88:	mov	r2, #1
   13e8c:	mov	r3, #0
   13e90:	str	r2, [sp, #40]	; 0x28
   13e94:	mov	r4, r3
   13e98:	str	r3, [sp, #68]	; 0x44
   13e9c:	str	r8, [sp, #52]	; 0x34
   13ea0:	str	r2, [sp, #32]
   13ea4:	b	13d88 <__assert_fail@plt+0x2d30>
   13ea8:	mov	r3, #1
   13eac:	str	r3, [sp, #40]	; 0x28
   13eb0:	str	r3, [sp, #32]
   13eb4:	str	r3, [sp, #28]
   13eb8:	str	r3, [sp, #52]	; 0x34
   13ebc:	ldr	r3, [pc, #2276]	; 147a8 <__assert_fail@plt+0x3750>
   13ec0:	mov	r2, #0
   13ec4:	mov	r4, r2
   13ec8:	str	r2, [sp, #68]	; 0x44
   13ecc:	str	r2, [sp, #44]	; 0x2c
   13ed0:	str	r2, [sp, #72]	; 0x48
   13ed4:	str	r3, [sp, #60]	; 0x3c
   13ed8:	mov	r8, #2
   13edc:	b	13a8c <__assert_fail@plt+0x2a34>
   13ee0:	mov	r7, #0
   13ee4:	ldr	r3, [sp, #24]
   13ee8:	cmn	r3, #1
   13eec:	beq	14a28 <__assert_fail@plt+0x39d0>
   13ef0:	ldr	r3, [sp, #24]
   13ef4:	subs	r3, r3, #1
   13ef8:	movne	r3, #1
   13efc:	cmp	r3, #0
   13f00:	sub	r2, fp, #2
   13f04:	clz	r2, r2
   13f08:	lsr	r2, r2, #5
   13f0c:	bne	14108 <__assert_fail@plt+0x30b0>
   13f10:	cmp	r9, #0
   13f14:	bne	14108 <__assert_fail@plt+0x30b0>
   13f18:	ldr	r3, [sp, #32]
   13f1c:	tst	r3, r2
   13f20:	bne	14228 <__assert_fail@plt+0x31d0>
   13f24:	ldr	r3, [sp, #28]
   13f28:	eor	r3, r3, #1
   13f2c:	orr	r3, r2, r3
   13f30:	ldr	r2, [sp, #32]
   13f34:	eor	r3, r3, #1
   13f38:	orrs	r3, r2, r3
   13f3c:	beq	13f6c <__assert_fail@plt+0x2f14>
   13f40:	mov	r3, #0
   13f44:	ldr	r1, [sp, #56]	; 0x38
   13f48:	cmp	r1, #0
   13f4c:	beq	13f6c <__assert_fail@plt+0x2f14>
   13f50:	lsr	r2, r5, #5
   13f54:	and	r0, r5, #31
   13f58:	uxtb	r2, r2
   13f5c:	ldr	r1, [r1, r2, lsl #2]
   13f60:	lsr	r2, r1, r0
   13f64:	tst	r2, #1
   13f68:	bne	13f74 <__assert_fail@plt+0x2f1c>
   13f6c:	cmp	r7, #0
   13f70:	beq	141c4 <__assert_fail@plt+0x316c>
   13f74:	sub	r2, fp, #2
   13f78:	clz	r2, r2
   13f7c:	lsr	r2, r2, #5
   13f80:	ldr	r3, [sp, #32]
   13f84:	cmp	r3, #0
   13f88:	bne	142b4 <__assert_fail@plt+0x325c>
   13f8c:	ldr	r3, [sp, #44]	; 0x2c
   13f90:	eor	r3, r3, #1
   13f94:	ands	r3, r2, r3
   13f98:	beq	13fd0 <__assert_fail@plt+0x2f78>
   13f9c:	cmp	sl, r4
   13fa0:	movhi	r2, #39	; 0x27
   13fa4:	strbhi	r2, [r8, r4]
   13fa8:	add	r2, r4, #1
   13fac:	cmp	r2, sl
   13fb0:	movcc	r1, #36	; 0x24
   13fb4:	strbcc	r1, [r8, r2]
   13fb8:	add	r2, r4, #2
   13fbc:	cmp	r2, sl
   13fc0:	add	r4, r4, #3
   13fc4:	movcc	r1, #39	; 0x27
   13fc8:	strbcc	r1, [r8, r2]
   13fcc:	str	r3, [sp, #44]	; 0x2c
   13fd0:	cmp	r4, sl
   13fd4:	movcc	r3, #92	; 0x5c
   13fd8:	strbcc	r3, [r8, r4]
   13fdc:	add	r9, r9, #1
   13fe0:	add	r4, r4, #1
   13fe4:	cmp	r4, sl
   13fe8:	ldr	r3, [sp, #40]	; 0x28
   13fec:	strbcc	r5, [r8, r4]
   13ff0:	cmp	r6, #0
   13ff4:	moveq	r3, #0
   13ff8:	str	r3, [sp, #40]	; 0x28
   13ffc:	ldr	r3, [sp, #24]
   14000:	add	r4, r4, #1
   14004:	cmn	r3, #1
   14008:	bne	13aa8 <__assert_fail@plt+0x2a50>
   1400c:	ldr	r3, [sp, #36]	; 0x24
   14010:	ldrb	r6, [r3, r9]
   14014:	adds	r6, r6, #0
   14018:	movne	r6, #1
   1401c:	cmp	r6, #0
   14020:	bne	13abc <__assert_fail@plt+0x2a64>
   14024:	str	fp, [sp, #160]	; 0xa0
   14028:	mov	fp, r8
   1402c:	ldr	r8, [sp, #160]	; 0xa0
   14030:	ldr	r1, [sp, #32]
   14034:	cmp	r4, #0
   14038:	sub	r2, r8, #2
   1403c:	clz	r2, r2
   14040:	lsr	r2, r2, #5
   14044:	andeq	r3, r2, r1
   14048:	movne	r3, #0
   1404c:	cmp	r3, #0
   14050:	bne	1513c <__assert_fail@plt+0x40e4>
   14054:	eor	r3, r1, #1
   14058:	ands	r2, r2, r3
   1405c:	beq	15078 <__assert_fail@plt+0x4020>
   14060:	ldr	r3, [sp, #68]	; 0x44
   14064:	cmp	r3, #0
   14068:	beq	1507c <__assert_fail@plt+0x4024>
   1406c:	ldr	r3, [sp, #40]	; 0x28
   14070:	cmp	r3, #0
   14074:	bne	150f8 <__assert_fail@plt+0x40a0>
   14078:	ldr	r3, [sp, #72]	; 0x48
   1407c:	adds	r3, r3, #0
   14080:	movne	r3, #1
   14084:	cmp	sl, #0
   14088:	movne	r3, #0
   1408c:	cmp	r3, #0
   14090:	ldreq	r2, [sp, #68]	; 0x44
   14094:	beq	1507c <__assert_fail@plt+0x4024>
   14098:	ldr	sl, [sp, #72]	; 0x48
   1409c:	str	r3, [sp, #68]	; 0x44
   140a0:	ldr	r3, [pc, #1792]	; 147a8 <__assert_fail@plt+0x3750>
   140a4:	mov	r2, #39	; 0x27
   140a8:	mov	r4, #1
   140ac:	str	r3, [sp, #60]	; 0x3c
   140b0:	mov	r3, #0
   140b4:	strb	r2, [fp]
   140b8:	str	r4, [sp, #52]	; 0x34
   140bc:	mov	r8, #2
   140c0:	str	r3, [sp, #32]
   140c4:	b	13a8c <__assert_fail@plt+0x2a34>
   140c8:	mov	r7, #0
   140cc:	cmp	fp, #2
   140d0:	beq	14a08 <__assert_fail@plt+0x39b0>
   140d4:	ldr	r3, [sp, #52]	; 0x34
   140d8:	ldr	r2, [sp, #28]
   140dc:	ldr	r1, [sp, #32]
   140e0:	cmp	r3, #0
   140e4:	andne	r2, r2, r1
   140e8:	moveq	r2, #0
   140ec:	cmp	r2, #0
   140f0:	moveq	r5, #92	; 0x5c
   140f4:	moveq	r3, r5
   140f8:	bne	14a14 <__assert_fail@plt+0x39bc>
   140fc:	ldr	r1, [sp, #28]
   14100:	cmp	r1, #0
   14104:	bne	15184 <__assert_fail@plt+0x412c>
   14108:	mov	r6, #0
   1410c:	b	13f24 <__assert_fail@plt+0x2ecc>
   14110:	mov	r7, #0
   14114:	cmp	fp, #2
   14118:	beq	14a78 <__assert_fail@plt+0x3a20>
   1411c:	cmp	fp, #5
   14120:	beq	14a3c <__assert_fail@plt+0x39e4>
   14124:	sub	r2, fp, #2
   14128:	mov	r6, #0
   1412c:	clz	r2, r2
   14130:	mov	r5, #63	; 0x3f
   14134:	lsr	r2, r2, #5
   14138:	b	13f24 <__assert_fail@plt+0x2ecc>
   1413c:	mov	r7, #0
   14140:	cmp	fp, #2
   14144:	strne	r6, [sp, #68]	; 0x44
   14148:	movne	r2, #0
   1414c:	movne	r5, #39	; 0x27
   14150:	bne	13f24 <__assert_fail@plt+0x2ecc>
   14154:	ldr	r3, [sp, #32]
   14158:	cmp	r3, #0
   1415c:	bne	14e58 <__assert_fail@plt+0x3e00>
   14160:	cmp	sl, #0
   14164:	ldr	r3, [sp, #72]	; 0x48
   14168:	clz	r3, r3
   1416c:	lsr	r3, r3, #5
   14170:	moveq	r3, #0
   14174:	cmp	r3, #0
   14178:	bne	14d8c <__assert_fail@plt+0x3d34>
   1417c:	cmp	sl, r4
   14180:	movhi	r3, #39	; 0x27
   14184:	strbhi	r3, [r8, r4]
   14188:	add	r3, r4, #1
   1418c:	cmp	sl, r3
   14190:	movhi	r2, #92	; 0x5c
   14194:	strbhi	r2, [r8, r3]
   14198:	add	r3, r4, #2
   1419c:	cmp	sl, r3
   141a0:	movhi	r2, #39	; 0x27
   141a4:	strbhi	r2, [r8, r3]
   141a8:	mov	r3, #0
   141ac:	cmp	r7, #0
   141b0:	add	r4, r4, #3
   141b4:	str	r3, [sp, #44]	; 0x2c
   141b8:	str	r6, [sp, #68]	; 0x44
   141bc:	mov	r5, #39	; 0x27
   141c0:	bne	13f74 <__assert_fail@plt+0x2f1c>
   141c4:	ldr	r2, [sp, #44]	; 0x2c
   141c8:	eor	r3, r3, #1
   141cc:	and	r3, r3, r2
   141d0:	add	r9, r9, #1
   141d4:	uxtb	r3, r3
   141d8:	cmp	r3, #0
   141dc:	beq	13fe4 <__assert_fail@plt+0x2f8c>
   141e0:	cmp	sl, r4
   141e4:	movhi	r3, #39	; 0x27
   141e8:	strbhi	r3, [r8, r4]
   141ec:	add	r3, r4, #1
   141f0:	cmp	sl, r3
   141f4:	movhi	r2, #39	; 0x27
   141f8:	strbhi	r2, [r8, r3]
   141fc:	mov	r3, #0
   14200:	add	r4, r4, #2
   14204:	str	r3, [sp, #44]	; 0x2c
   14208:	b	13fe4 <__assert_fail@plt+0x2f8c>
   1420c:	mov	r3, #114	; 0x72
   14210:	ldr	r1, [sp, #32]
   14214:	sub	r2, fp, #2
   14218:	clz	r2, r2
   1421c:	lsr	r2, r2, #5
   14220:	tst	r2, r1
   14224:	beq	140fc <__assert_fail@plt+0x30a4>
   14228:	mov	fp, r8
   1422c:	mov	r8, #2
   14230:	ldr	r3, [sp, #28]
   14234:	cmp	r3, #0
   14238:	movne	r8, #4
   1423c:	ldr	r3, [sp, #164]	; 0xa4
   14240:	mov	ip, #0
   14244:	bic	r3, r3, #2
   14248:	str	r3, [sp, #4]
   1424c:	ldr	r3, [sp, #76]	; 0x4c
   14250:	str	r8, [sp]
   14254:	str	r3, [sp, #16]
   14258:	ldr	r3, [sp, #80]	; 0x50
   1425c:	ldr	r2, [sp, #36]	; 0x24
   14260:	str	r3, [sp, #12]
   14264:	mov	r1, sl
   14268:	ldr	r3, [sp, #24]
   1426c:	mov	r0, fp
   14270:	str	ip, [sp, #8]
   14274:	bl	13994 <__assert_fail@plt+0x293c>
   14278:	mov	r4, r0
   1427c:	ldr	r3, [pc, #1304]	; 1479c <__assert_fail@plt+0x3744>
   14280:	ldr	r2, [sp, #116]	; 0x74
   14284:	mov	r0, r4
   14288:	ldr	r3, [r3]
   1428c:	cmp	r2, r3
   14290:	bne	15180 <__assert_fail@plt+0x4128>
   14294:	add	sp, sp, #124	; 0x7c
   14298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1429c:	mov	r5, #110	; 0x6e
   142a0:	ldr	r3, [sp, #32]
   142a4:	mov	r2, #0
   142a8:	cmp	r3, #0
   142ac:	mov	r6, r2
   142b0:	beq	13f8c <__assert_fail@plt+0x2f34>
   142b4:	str	fp, [sp, #160]	; 0xa0
   142b8:	mov	fp, r8
   142bc:	ldr	r8, [sp, #160]	; 0xa0
   142c0:	mov	r3, r2
   142c4:	ldr	r2, [sp, #28]
   142c8:	and	r2, r2, r3
   142cc:	str	r2, [sp, #28]
   142d0:	b	14230 <__assert_fail@plt+0x31d8>
   142d4:	mov	r5, #116	; 0x74
   142d8:	b	142a0 <__assert_fail@plt+0x3248>
   142dc:	mov	r5, #102	; 0x66
   142e0:	ldr	r3, [sp, #32]
   142e4:	cmp	r3, #0
   142e8:	bne	14e94 <__assert_fail@plt+0x3e3c>
   142ec:	mov	r6, #0
   142f0:	b	13fd0 <__assert_fail@plt+0x2f78>
   142f4:	mov	r5, #118	; 0x76
   142f8:	b	142e0 <__assert_fail@plt+0x3288>
   142fc:	mov	r7, #0
   14300:	mov	r6, #0
   14304:	b	13f40 <__assert_fail@plt+0x2ee8>
   14308:	ldr	r3, [sp, #32]
   1430c:	cmp	r3, #0
   14310:	bne	150d8 <__assert_fail@plt+0x4080>
   14314:	mov	r7, r3
   14318:	ldr	r3, [sp, #44]	; 0x2c
   1431c:	sub	r2, fp, #2
   14320:	eor	r3, r3, #1
   14324:	clz	r2, r2
   14328:	lsr	r2, r2, #5
   1432c:	ands	r3, r2, r3
   14330:	beq	14d78 <__assert_fail@plt+0x3d20>
   14334:	cmp	sl, r4
   14338:	movhi	r1, #39	; 0x27
   1433c:	strbhi	r1, [r8, r4]
   14340:	add	r1, r4, #1
   14344:	cmp	sl, r1
   14348:	movhi	r0, #36	; 0x24
   1434c:	strbhi	r0, [r8, r1]
   14350:	add	r1, r4, #2
   14354:	cmp	sl, r1
   14358:	movhi	r0, #39	; 0x27
   1435c:	strbhi	r0, [r8, r1]
   14360:	add	r1, r4, #3
   14364:	cmp	sl, r1
   14368:	bls	14dd8 <__assert_fail@plt+0x3d80>
   1436c:	mov	r4, r1
   14370:	mov	r1, #92	; 0x5c
   14374:	strb	r1, [r8, r4]
   14378:	mov	r1, r4
   1437c:	str	r3, [sp, #44]	; 0x2c
   14380:	cmp	fp, #2
   14384:	add	r4, r4, #1
   14388:	beq	14e20 <__assert_fail@plt+0x3dc8>
   1438c:	ldr	r0, [sp, #24]
   14390:	add	r3, r9, #1
   14394:	cmp	r3, r0
   14398:	bcs	143b0 <__assert_fail@plt+0x3358>
   1439c:	ldr	r0, [sp, #36]	; 0x24
   143a0:	ldrb	r3, [r0, r3]
   143a4:	sub	r3, r3, #48	; 0x30
   143a8:	cmp	r3, #9
   143ac:	bls	14e30 <__assert_fail@plt+0x3dd8>
   143b0:	mov	r5, #48	; 0x30
   143b4:	ldr	r3, [sp, #28]
   143b8:	eor	r3, r3, #1
   143bc:	orrs	r2, r2, r3
   143c0:	mov	r3, r6
   143c4:	moveq	r6, r2
   143c8:	beq	13f44 <__assert_fail@plt+0x2eec>
   143cc:	mov	r6, #0
   143d0:	b	13f6c <__assert_fail@plt+0x2f14>
   143d4:	mov	r2, #0
   143d8:	mov	r6, r2
   143dc:	mov	r5, #98	; 0x62
   143e0:	b	13f8c <__assert_fail@plt+0x2f34>
   143e4:	mov	r5, #97	; 0x61
   143e8:	b	142ec <__assert_fail@plt+0x3294>
   143ec:	mov	r3, r7
   143f0:	mov	r6, r7
   143f4:	mov	r2, #0
   143f8:	mov	r7, r3
   143fc:	mov	r5, #32
   14400:	b	13f24 <__assert_fail@plt+0x2ecc>
   14404:	cmp	r9, #0
   14408:	mov	r3, r7
   1440c:	bne	149d4 <__assert_fail@plt+0x397c>
   14410:	mov	r6, r7
   14414:	mov	r2, r9
   14418:	mov	r7, r3
   1441c:	b	13f24 <__assert_fail@plt+0x2ecc>
   14420:	mov	r6, r7
   14424:	b	13f40 <__assert_fail@plt+0x2ee8>
   14428:	mov	r7, #0
   1442c:	ldr	r3, [sp, #64]	; 0x40
   14430:	cmp	r3, #1
   14434:	bne	14a90 <__assert_fail@plt+0x3a38>
   14438:	bl	10f44 <__ctype_b_loc@plt>
   1443c:	ldr	r2, [sp, #64]	; 0x40
   14440:	sxth	r3, r5
   14444:	mov	ip, r2
   14448:	lsl	r3, r3, #1
   1444c:	ldr	r2, [r0]
   14450:	ldrh	r3, [r2, r3]
   14454:	and	r3, r3, #16384	; 0x4000
   14458:	cmp	r3, #0
   1445c:	ldr	r3, [sp, #28]
   14460:	movne	r6, #1
   14464:	moveq	r6, #0
   14468:	movne	r2, #0
   1446c:	andeq	r2, r3, #1
   14470:	cmp	r2, #0
   14474:	bne	14da0 <__assert_fail@plt+0x3d48>
   14478:	sub	r2, fp, #2
   1447c:	clz	r2, r2
   14480:	lsr	r2, r2, #5
   14484:	b	13f24 <__assert_fail@plt+0x2ecc>
   14488:	cmp	r4, #0
   1448c:	bne	1514c <__assert_fail@plt+0x40f4>
   14490:	str	r4, [sp, #28]
   14494:	cmp	sl, #0
   14498:	bne	15190 <__assert_fail@plt+0x4138>
   1449c:	ldr	r3, [pc, #772]	; 147a8 <__assert_fail@plt+0x3750>
   144a0:	mov	r4, #1
   144a4:	str	r4, [sp, #40]	; 0x28
   144a8:	str	r3, [sp, #60]	; 0x3c
   144ac:	str	r4, [sp, #52]	; 0x34
   144b0:	str	sl, [sp, #72]	; 0x48
   144b4:	str	sl, [sp, #68]	; 0x44
   144b8:	str	sl, [sp, #44]	; 0x2c
   144bc:	str	sl, [sp, #32]
   144c0:	mov	r8, #2
   144c4:	b	13a8c <__assert_fail@plt+0x2a34>
   144c8:	ldr	r3, [sp, #36]	; 0x24
   144cc:	ldrb	r5, [r3, r9]
   144d0:	cmp	r5, #126	; 0x7e
   144d4:	ldrls	pc, [pc, r5, lsl #2]
   144d8:	b	1442c <__assert_fail@plt+0x33d4>
   144dc:	andeq	r4, r1, r0, lsl r7
   144e0:	andeq	r4, r1, ip, lsr #8
   144e4:	andeq	r4, r1, ip, lsr #8
   144e8:	andeq	r4, r1, ip, lsr #8
   144ec:	andeq	r4, r1, ip, lsr #8
   144f0:	andeq	r4, r1, ip, lsr #8
   144f4:	andeq	r4, r1, ip, lsr #8
   144f8:	strdeq	r4, [r1], -ip
   144fc:	andeq	r4, r1, r8, ror #13
   14500:	andeq	r4, r1, r0, ror #13
   14504:	ldrdeq	r4, [r1], -r8
   14508:	andeq	r4, r1, r8, lsl #15
   1450c:	andeq	r4, r1, r4, ror r7
   14510:	andeq	r4, r1, ip, lsl #4
   14514:	andeq	r4, r1, ip, lsr #8
   14518:	andeq	r4, r1, ip, lsr #8
   1451c:	andeq	r4, r1, ip, lsr #8
   14520:	andeq	r4, r1, ip, lsr #8
   14524:	andeq	r4, r1, ip, lsr #8
   14528:	andeq	r4, r1, ip, lsr #8
   1452c:	andeq	r4, r1, ip, lsr #8
   14530:	andeq	r4, r1, ip, lsr #8
   14534:	andeq	r4, r1, ip, lsr #8
   14538:	andeq	r4, r1, ip, lsr #8
   1453c:	andeq	r4, r1, ip, lsr #8
   14540:	andeq	r4, r1, ip, lsr #8
   14544:	andeq	r4, r1, ip, lsr #8
   14548:	andeq	r4, r1, ip, lsr #8
   1454c:	andeq	r4, r1, ip, lsr #8
   14550:	andeq	r4, r1, ip, lsr #8
   14554:	andeq	r4, r1, ip, lsr #8
   14558:	andeq	r4, r1, ip, lsr #8
   1455c:	andeq	r4, r1, r4, ror #14
   14560:	andeq	r4, r1, r0, asr r7
   14564:	andeq	r4, r1, r0, asr r7
   14568:	andeq	r4, r1, r0, asr #14
   1456c:	andeq	r4, r1, r0, asr r7
   14570:	andeq	r4, r1, r8, ror r4
   14574:	andeq	r4, r1, r0, asr r7
   14578:	andeq	r4, r1, r0, asr #2
   1457c:	andeq	r4, r1, r0, asr r7
   14580:	andeq	r4, r1, r0, asr r7
   14584:	andeq	r4, r1, r0, asr r7
   14588:	andeq	r4, r1, r8, ror r4
   1458c:	andeq	r4, r1, r8, ror r4
   14590:	andeq	r4, r1, r8, ror r4
   14594:	andeq	r4, r1, r8, ror r4
   14598:	andeq	r4, r1, r8, ror r4
   1459c:	andeq	r4, r1, r8, ror r4
   145a0:	andeq	r4, r1, r8, ror r4
   145a4:	andeq	r4, r1, r8, ror r4
   145a8:	andeq	r4, r1, r8, ror r4
   145ac:	andeq	r4, r1, r8, ror r4
   145b0:	andeq	r4, r1, r8, ror r4
   145b4:	andeq	r4, r1, r8, ror r4
   145b8:	andeq	r4, r1, r8, ror r4
   145bc:	andeq	r4, r1, r8, ror r4
   145c0:	andeq	r4, r1, r8, ror r4
   145c4:	andeq	r4, r1, r8, ror r4
   145c8:	andeq	r4, r1, r0, asr r7
   145cc:	andeq	r4, r1, r0, asr r7
   145d0:	andeq	r4, r1, r0, asr r7
   145d4:	andeq	r4, r1, r0, asr r7
   145d8:	andeq	r4, r1, r4, lsl r1
   145dc:	andeq	r4, r1, ip, lsr #8
   145e0:	andeq	r4, r1, r8, ror r4
   145e4:	andeq	r4, r1, r8, ror r4
   145e8:	andeq	r4, r1, r8, ror r4
   145ec:	andeq	r4, r1, r8, ror r4
   145f0:	andeq	r4, r1, r8, ror r4
   145f4:	andeq	r4, r1, r8, ror r4
   145f8:	andeq	r4, r1, r8, ror r4
   145fc:	andeq	r4, r1, r8, ror r4
   14600:	andeq	r4, r1, r8, ror r4
   14604:	andeq	r4, r1, r8, ror r4
   14608:	andeq	r4, r1, r8, ror r4
   1460c:	andeq	r4, r1, r8, ror r4
   14610:	andeq	r4, r1, r8, ror r4
   14614:	andeq	r4, r1, r8, ror r4
   14618:	andeq	r4, r1, r8, ror r4
   1461c:	andeq	r4, r1, r8, ror r4
   14620:	andeq	r4, r1, r8, ror r4
   14624:	andeq	r4, r1, r8, ror r4
   14628:	andeq	r4, r1, r8, ror r4
   1462c:	andeq	r4, r1, r8, ror r4
   14630:	andeq	r4, r1, r8, ror r4
   14634:	andeq	r4, r1, r8, ror r4
   14638:	andeq	r4, r1, r8, ror r4
   1463c:	andeq	r4, r1, r8, ror r4
   14640:	andeq	r4, r1, r8, ror r4
   14644:	andeq	r4, r1, r8, ror r4
   14648:	andeq	r4, r1, r0, asr r7
   1464c:	andeq	r4, r1, ip, asr #1
   14650:	andeq	r4, r1, r8, ror r4
   14654:	andeq	r4, r1, r0, asr r7
   14658:	andeq	r4, r1, r8, ror r4
   1465c:	andeq	r4, r1, r0, asr r7
   14660:	andeq	r4, r1, r8, ror r4
   14664:	andeq	r4, r1, r8, ror r4
   14668:	andeq	r4, r1, r8, ror r4
   1466c:	andeq	r4, r1, r8, ror r4
   14670:	andeq	r4, r1, r8, ror r4
   14674:	andeq	r4, r1, r8, ror r4
   14678:	andeq	r4, r1, r8, ror r4
   1467c:	andeq	r4, r1, r8, ror r4
   14680:	andeq	r4, r1, r8, ror r4
   14684:	andeq	r4, r1, r8, ror r4
   14688:	andeq	r4, r1, r8, ror r4
   1468c:	andeq	r4, r1, r8, ror r4
   14690:	andeq	r4, r1, r8, ror r4
   14694:	andeq	r4, r1, r8, ror r4
   14698:	andeq	r4, r1, r8, ror r4
   1469c:	andeq	r4, r1, r8, ror r4
   146a0:	andeq	r4, r1, r8, ror r4
   146a4:	andeq	r4, r1, r8, ror r4
   146a8:	andeq	r4, r1, r8, ror r4
   146ac:	andeq	r4, r1, r8, ror r4
   146b0:	andeq	r4, r1, r8, ror r4
   146b4:	andeq	r4, r1, r8, ror r4
   146b8:	andeq	r4, r1, r8, ror r4
   146bc:	andeq	r4, r1, r8, ror r4
   146c0:	andeq	r4, r1, r8, ror r4
   146c4:	andeq	r4, r1, r8, ror r4
   146c8:	andeq	r3, r1, r4, ror #29
   146cc:	andeq	r4, r1, r0, asr r7
   146d0:	andeq	r3, r1, r4, ror #29
   146d4:	andeq	r4, r1, r0, asr #14
   146d8:	mov	r3, #110	; 0x6e
   146dc:	b	14210 <__assert_fail@plt+0x31b8>
   146e0:	mov	r3, #116	; 0x74
   146e4:	b	14210 <__assert_fail@plt+0x31b8>
   146e8:	sub	r2, fp, #2
   146ec:	mov	r3, #98	; 0x62
   146f0:	clz	r2, r2
   146f4:	lsr	r2, r2, #5
   146f8:	b	140fc <__assert_fail@plt+0x30a4>
   146fc:	sub	r2, fp, #2
   14700:	mov	r3, #97	; 0x61
   14704:	clz	r2, r2
   14708:	lsr	r2, r2, #5
   1470c:	b	140fc <__assert_fail@plt+0x30a4>
   14710:	ldr	r3, [sp, #28]
   14714:	cmp	r3, #0
   14718:	bne	14308 <__assert_fail@plt+0x32b0>
   1471c:	ldr	r3, [sp, #164]	; 0xa4
   14720:	tst	r3, #1
   14724:	bne	14d98 <__assert_fail@plt+0x3d40>
   14728:	ldr	r6, [sp, #28]
   1472c:	sub	r2, fp, #2
   14730:	mov	r7, r6
   14734:	clz	r2, r2
   14738:	lsr	r2, r2, #5
   1473c:	b	13f24 <__assert_fail@plt+0x2ecc>
   14740:	sub	r2, fp, #2
   14744:	clz	r2, r2
   14748:	lsr	r2, r2, #5
   1474c:	b	13f10 <__assert_fail@plt+0x2eb8>
   14750:	sub	r2, fp, #2
   14754:	mov	r6, #0
   14758:	clz	r2, r2
   1475c:	lsr	r2, r2, #5
   14760:	b	13f18 <__assert_fail@plt+0x2ec0>
   14764:	sub	r2, fp, #2
   14768:	clz	r2, r2
   1476c:	lsr	r2, r2, #5
   14770:	b	13f18 <__assert_fail@plt+0x2ec0>
   14774:	sub	r2, fp, #2
   14778:	mov	r3, #102	; 0x66
   1477c:	clz	r2, r2
   14780:	lsr	r2, r2, #5
   14784:	b	140fc <__assert_fail@plt+0x30a4>
   14788:	sub	r2, fp, #2
   1478c:	mov	r3, #118	; 0x76
   14790:	clz	r2, r2
   14794:	lsr	r2, r2, #5
   14798:	b	140fc <__assert_fail@plt+0x30a4>
   1479c:	andeq	r8, r2, r8, lsl #30
   147a0:	andeq	r8, r1, r0, lsr #8
   147a4:	andeq	r8, r1, r8, lsl #8
   147a8:	andeq	r8, r1, ip, lsl r4
   147ac:	ldr	r3, [sp, #48]	; 0x30
   147b0:	ldrb	r5, [r3]
   147b4:	cmp	r5, #126	; 0x7e
   147b8:	ldrls	pc, [pc, r5, lsl #2]
   147bc:	b	14428 <__assert_fail@plt+0x33d0>
   147c0:	andeq	r4, r1, r8, lsl #6
   147c4:	andeq	r4, r1, r8, lsr #8
   147c8:	andeq	r4, r1, r8, lsr #8
   147cc:	andeq	r4, r1, r8, lsr #8
   147d0:	andeq	r4, r1, r8, lsr #8
   147d4:	andeq	r4, r1, r8, lsr #8
   147d8:	andeq	r4, r1, r8, lsr #8
   147dc:	andeq	r4, r1, r0, lsl #20
   147e0:	strdeq	r4, [r1], -r8
   147e4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147e8:	muleq	r1, ip, r2
   147ec:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   147f0:	ldrdeq	r4, [r1], -ip
   147f4:	andeq	r4, r1, ip, ror #19
   147f8:	andeq	r4, r1, r8, lsr #8
   147fc:	andeq	r4, r1, r8, lsr #8
   14800:	andeq	r4, r1, r8, lsr #8
   14804:	andeq	r4, r1, r8, lsr #8
   14808:	andeq	r4, r1, r8, lsr #8
   1480c:	andeq	r4, r1, r8, lsr #8
   14810:	andeq	r4, r1, r8, lsr #8
   14814:	andeq	r4, r1, r8, lsr #8
   14818:	andeq	r4, r1, r8, lsr #8
   1481c:	andeq	r4, r1, r8, lsr #8
   14820:	andeq	r4, r1, r8, lsr #8
   14824:	andeq	r4, r1, r8, lsr #8
   14828:	andeq	r4, r1, r8, lsr #8
   1482c:	andeq	r4, r1, r8, lsr #8
   14830:	andeq	r4, r1, r8, lsr #8
   14834:	andeq	r4, r1, r8, lsr #8
   14838:	andeq	r4, r1, r8, lsr #8
   1483c:	andeq	r4, r1, r8, lsr #8
   14840:	andeq	r4, r1, r4, ror #19
   14844:	strdeq	r4, [r1], -ip
   14848:	strdeq	r4, [r1], -ip
   1484c:	andeq	r4, r1, r8, asr #19
   14850:	strdeq	r4, [r1], -ip
   14854:			; <UNDEFINED> instruction: 0x000149bc
   14858:	strdeq	r4, [r1], -ip
   1485c:	andeq	r4, r1, ip, lsr r1
   14860:	strdeq	r4, [r1], -ip
   14864:	strdeq	r4, [r1], -ip
   14868:	strdeq	r4, [r1], -ip
   1486c:			; <UNDEFINED> instruction: 0x000149bc
   14870:			; <UNDEFINED> instruction: 0x000149bc
   14874:			; <UNDEFINED> instruction: 0x000149bc
   14878:			; <UNDEFINED> instruction: 0x000149bc
   1487c:			; <UNDEFINED> instruction: 0x000149bc
   14880:			; <UNDEFINED> instruction: 0x000149bc
   14884:			; <UNDEFINED> instruction: 0x000149bc
   14888:			; <UNDEFINED> instruction: 0x000149bc
   1488c:			; <UNDEFINED> instruction: 0x000149bc
   14890:			; <UNDEFINED> instruction: 0x000149bc
   14894:			; <UNDEFINED> instruction: 0x000149bc
   14898:			; <UNDEFINED> instruction: 0x000149bc
   1489c:			; <UNDEFINED> instruction: 0x000149bc
   148a0:			; <UNDEFINED> instruction: 0x000149bc
   148a4:			; <UNDEFINED> instruction: 0x000149bc
   148a8:			; <UNDEFINED> instruction: 0x000149bc
   148ac:	strdeq	r4, [r1], -ip
   148b0:	strdeq	r4, [r1], -ip
   148b4:	strdeq	r4, [r1], -ip
   148b8:	strdeq	r4, [r1], -ip
   148bc:	andeq	r4, r1, r0, lsl r1
   148c0:	andeq	r4, r1, r8, lsr #8
   148c4:			; <UNDEFINED> instruction: 0x000149bc
   148c8:			; <UNDEFINED> instruction: 0x000149bc
   148cc:			; <UNDEFINED> instruction: 0x000149bc
   148d0:			; <UNDEFINED> instruction: 0x000149bc
   148d4:			; <UNDEFINED> instruction: 0x000149bc
   148d8:			; <UNDEFINED> instruction: 0x000149bc
   148dc:			; <UNDEFINED> instruction: 0x000149bc
   148e0:			; <UNDEFINED> instruction: 0x000149bc
   148e4:			; <UNDEFINED> instruction: 0x000149bc
   148e8:			; <UNDEFINED> instruction: 0x000149bc
   148ec:			; <UNDEFINED> instruction: 0x000149bc
   148f0:			; <UNDEFINED> instruction: 0x000149bc
   148f4:			; <UNDEFINED> instruction: 0x000149bc
   148f8:			; <UNDEFINED> instruction: 0x000149bc
   148fc:			; <UNDEFINED> instruction: 0x000149bc
   14900:			; <UNDEFINED> instruction: 0x000149bc
   14904:			; <UNDEFINED> instruction: 0x000149bc
   14908:			; <UNDEFINED> instruction: 0x000149bc
   1490c:			; <UNDEFINED> instruction: 0x000149bc
   14910:			; <UNDEFINED> instruction: 0x000149bc
   14914:			; <UNDEFINED> instruction: 0x000149bc
   14918:			; <UNDEFINED> instruction: 0x000149bc
   1491c:			; <UNDEFINED> instruction: 0x000149bc
   14920:			; <UNDEFINED> instruction: 0x000149bc
   14924:			; <UNDEFINED> instruction: 0x000149bc
   14928:			; <UNDEFINED> instruction: 0x000149bc
   1492c:	strdeq	r4, [r1], -ip
   14930:	andeq	r4, r1, r8, asr #1
   14934:			; <UNDEFINED> instruction: 0x000149bc
   14938:	strdeq	r4, [r1], -ip
   1493c:			; <UNDEFINED> instruction: 0x000149bc
   14940:	strdeq	r4, [r1], -ip
   14944:			; <UNDEFINED> instruction: 0x000149bc
   14948:			; <UNDEFINED> instruction: 0x000149bc
   1494c:			; <UNDEFINED> instruction: 0x000149bc
   14950:			; <UNDEFINED> instruction: 0x000149bc
   14954:			; <UNDEFINED> instruction: 0x000149bc
   14958:			; <UNDEFINED> instruction: 0x000149bc
   1495c:			; <UNDEFINED> instruction: 0x000149bc
   14960:			; <UNDEFINED> instruction: 0x000149bc
   14964:			; <UNDEFINED> instruction: 0x000149bc
   14968:			; <UNDEFINED> instruction: 0x000149bc
   1496c:			; <UNDEFINED> instruction: 0x000149bc
   14970:			; <UNDEFINED> instruction: 0x000149bc
   14974:			; <UNDEFINED> instruction: 0x000149bc
   14978:			; <UNDEFINED> instruction: 0x000149bc
   1497c:			; <UNDEFINED> instruction: 0x000149bc
   14980:			; <UNDEFINED> instruction: 0x000149bc
   14984:			; <UNDEFINED> instruction: 0x000149bc
   14988:			; <UNDEFINED> instruction: 0x000149bc
   1498c:			; <UNDEFINED> instruction: 0x000149bc
   14990:			; <UNDEFINED> instruction: 0x000149bc
   14994:			; <UNDEFINED> instruction: 0x000149bc
   14998:			; <UNDEFINED> instruction: 0x000149bc
   1499c:			; <UNDEFINED> instruction: 0x000149bc
   149a0:			; <UNDEFINED> instruction: 0x000149bc
   149a4:			; <UNDEFINED> instruction: 0x000149bc
   149a8:			; <UNDEFINED> instruction: 0x000149bc
   149ac:	andeq	r3, r1, r0, ror #29
   149b0:	strdeq	r4, [r1], -ip
   149b4:	andeq	r3, r1, r0, ror #29
   149b8:	andeq	r4, r1, r8, asr #19
   149bc:	mov	r6, r7
   149c0:	mov	r7, #0
   149c4:	b	13f40 <__assert_fail@plt+0x2ee8>
   149c8:	cmp	r9, #0
   149cc:	mov	r3, #0
   149d0:	beq	14410 <__assert_fail@plt+0x33b8>
   149d4:	mov	r6, #0
   149d8:	mov	r7, r3
   149dc:	mov	r3, r6
   149e0:	b	13f44 <__assert_fail@plt+0x2eec>
   149e4:	mov	r3, #0
   149e8:	b	143f0 <__assert_fail@plt+0x3398>
   149ec:	mov	r7, #0
   149f0:	mov	r3, #114	; 0x72
   149f4:	b	14210 <__assert_fail@plt+0x31b8>
   149f8:	mov	r5, #98	; 0x62
   149fc:	b	142a0 <__assert_fail@plt+0x3248>
   14a00:	mov	r5, #97	; 0x61
   14a04:	b	142e0 <__assert_fail@plt+0x3288>
   14a08:	ldr	r3, [sp, #32]
   14a0c:	cmp	r3, #0
   14a10:	bne	14e58 <__assert_fail@plt+0x3e00>
   14a14:	add	r9, r9, #1
   14a18:	ldr	r3, [sp, #44]	; 0x2c
   14a1c:	mov	r6, #0
   14a20:	mov	r5, #92	; 0x5c
   14a24:	b	141d8 <__assert_fail@plt+0x3180>
   14a28:	ldr	r3, [sp, #36]	; 0x24
   14a2c:	ldrb	r3, [r3, #1]
   14a30:	adds	r3, r3, #0
   14a34:	movne	r3, #1
   14a38:	b	13efc <__assert_fail@plt+0x2ea4>
   14a3c:	ldr	r3, [sp, #164]	; 0xa4
   14a40:	ands	r3, r3, #4
   14a44:	beq	14a68 <__assert_fail@plt+0x3a10>
   14a48:	ldr	r2, [sp, #24]
   14a4c:	add	r3, r9, #2
   14a50:	cmp	r3, r2
   14a54:	bcs	14a68 <__assert_fail@plt+0x3a10>
   14a58:	ldr	r2, [sp, #48]	; 0x30
   14a5c:	ldrb	r5, [r2, #1]
   14a60:	cmp	r5, #63	; 0x3f
   14a64:	beq	14ecc <__assert_fail@plt+0x3e74>
   14a68:	mov	r2, #0
   14a6c:	mov	r6, r2
   14a70:	mov	r5, #63	; 0x3f
   14a74:	b	13f24 <__assert_fail@plt+0x2ecc>
   14a78:	ldr	r3, [sp, #32]
   14a7c:	cmp	r3, #0
   14a80:	bne	14e58 <__assert_fail@plt+0x3e00>
   14a84:	mov	r6, r3
   14a88:	mov	r5, #63	; 0x3f
   14a8c:	b	13f6c <__assert_fail@plt+0x2f14>
   14a90:	ldr	r3, [sp, #24]
   14a94:	cmn	r3, #1
   14a98:	mov	r3, #0
   14a9c:	str	r3, [sp, #108]	; 0x6c
   14aa0:	str	r3, [sp, #112]	; 0x70
   14aa4:	bne	14ab4 <__assert_fail@plt+0x3a5c>
   14aa8:	ldr	r0, [sp, #36]	; 0x24
   14aac:	bl	10f5c <strlen@plt>
   14ab0:	str	r0, [sp, #24]
   14ab4:	mov	r3, #0
   14ab8:	str	sl, [sp, #88]	; 0x58
   14abc:	ldr	sl, [sp, #36]	; 0x24
   14ac0:	str	r5, [sp, #92]	; 0x5c
   14ac4:	mov	r5, r3
   14ac8:	str	r7, [sp, #96]	; 0x60
   14acc:	str	r4, [sp, #100]	; 0x64
   14ad0:	str	r8, [sp, #84]	; 0x54
   14ad4:	ldr	r3, [sp, #24]
   14ad8:	add	r4, r9, r5
   14adc:	add	r7, sl, r4
   14ae0:	sub	r2, r3, r4
   14ae4:	mov	r1, r7
   14ae8:	add	r3, sp, #108	; 0x6c
   14aec:	add	r0, sp, #104	; 0x68
   14af0:	bl	16f18 <__assert_fail@plt+0x5ec0>
   14af4:	subs	r8, r0, #0
   14af8:	beq	14b48 <__assert_fail@plt+0x3af0>
   14afc:	cmn	r8, #1
   14b00:	beq	14ea8 <__assert_fail@plt+0x3e50>
   14b04:	cmn	r8, #2
   14b08:	beq	14fc8 <__assert_fail@plt+0x3f70>
   14b0c:	ldr	r3, [sp, #32]
   14b10:	cmp	fp, #2
   14b14:	movne	r3, #0
   14b18:	andeq	r3, r3, #1
   14b1c:	cmp	r3, #0
   14b20:	bne	14ca8 <__assert_fail@plt+0x3c50>
   14b24:	ldr	r0, [sp, #104]	; 0x68
   14b28:	bl	10e84 <iswprint@plt>
   14b2c:	add	r5, r5, r8
   14b30:	cmp	r0, #0
   14b34:	add	r0, sp, #108	; 0x6c
   14b38:	moveq	r6, #0
   14b3c:	bl	10e30 <mbsinit@plt>
   14b40:	cmp	r0, #0
   14b44:	beq	14ad4 <__assert_fail@plt+0x3a7c>
   14b48:	ldr	r3, [sp, #28]
   14b4c:	mov	ip, r5
   14b50:	eor	r2, r6, #1
   14b54:	ldr	r5, [sp, #92]	; 0x5c
   14b58:	ldr	r7, [sp, #96]	; 0x60
   14b5c:	ldr	r4, [sp, #100]	; 0x64
   14b60:	ldr	r8, [sp, #84]	; 0x54
   14b64:	ldr	sl, [sp, #88]	; 0x58
   14b68:	and	r2, r2, r3
   14b6c:	cmp	ip, #1
   14b70:	bls	14470 <__assert_fail@plt+0x3418>
   14b74:	add	r1, ip, r9
   14b78:	ldr	lr, [sp, #48]	; 0x30
   14b7c:	mov	r0, #0
   14b80:	str	r6, [sp, #48]	; 0x30
   14b84:	mov	ip, #39	; 0x27
   14b88:	ldr	r6, [sp, #44]	; 0x2c
   14b8c:	b	14c44 <__assert_fail@plt+0x3bec>
   14b90:	ldr	r0, [sp, #32]
   14b94:	sub	r3, fp, #2
   14b98:	cmp	r0, #0
   14b9c:	clz	r3, r3
   14ba0:	lsr	r3, r3, #5
   14ba4:	bne	14dac <__assert_fail@plt+0x3d54>
   14ba8:	eor	r0, r6, #1
   14bac:	ands	r3, r3, r0
   14bb0:	beq	14be0 <__assert_fail@plt+0x3b88>
   14bb4:	add	r0, r4, #1
   14bb8:	cmp	sl, r4
   14bbc:	strbhi	ip, [r8, r4]
   14bc0:	cmp	sl, r0
   14bc4:	movhi	r6, #36	; 0x24
   14bc8:	strbhi	r6, [r8, r0]
   14bcc:	add	r0, r4, #2
   14bd0:	mov	r6, r3
   14bd4:	add	r4, r4, #3
   14bd8:	cmp	sl, r0
   14bdc:	strbhi	ip, [r8, r0]
   14be0:	cmp	sl, r4
   14be4:	movhi	r3, #92	; 0x5c
   14be8:	strbhi	r3, [r8, r4]
   14bec:	add	r3, r4, #1
   14bf0:	cmp	sl, r3
   14bf4:	lsrhi	r0, r5, #6
   14bf8:	addhi	r0, r0, #48	; 0x30
   14bfc:	strbhi	r0, [r8, r3]
   14c00:	add	r0, r4, #2
   14c04:	cmp	sl, r0
   14c08:	lsrhi	r3, r5, #3
   14c0c:	andhi	r3, r3, #7
   14c10:	addhi	r3, r3, #48	; 0x30
   14c14:	add	r9, r9, #1
   14c18:	strbhi	r3, [r8, r0]
   14c1c:	and	r5, r5, #7
   14c20:	cmp	r9, r1
   14c24:	add	r5, r5, #48	; 0x30
   14c28:	add	r4, r4, #3
   14c2c:	bcs	14dcc <__assert_fail@plt+0x3d74>
   14c30:	mov	r0, r2
   14c34:	cmp	sl, r4
   14c38:	strbhi	r5, [r8, r4]
   14c3c:	ldrb	r5, [lr, #1]!
   14c40:	add	r4, r4, #1
   14c44:	cmp	r2, #0
   14c48:	bne	14b90 <__assert_fail@plt+0x3b38>
   14c4c:	eor	r3, r0, #1
   14c50:	and	r3, r3, r6
   14c54:	cmp	r7, #0
   14c58:	uxtb	r3, r3
   14c5c:	beq	14c70 <__assert_fail@plt+0x3c18>
   14c60:	cmp	sl, r4
   14c64:	movhi	r7, #92	; 0x5c
   14c68:	strbhi	r7, [r8, r4]
   14c6c:	add	r4, r4, #1
   14c70:	add	r9, r9, #1
   14c74:	cmp	r9, r1
   14c78:	bcs	14dc0 <__assert_fail@plt+0x3d68>
   14c7c:	cmp	r3, #0
   14c80:	beq	14dec <__assert_fail@plt+0x3d94>
   14c84:	cmp	sl, r4
   14c88:	add	r3, r4, #1
   14c8c:	strbhi	ip, [r8, r4]
   14c90:	mov	r7, #0
   14c94:	cmp	sl, r3
   14c98:	strbhi	ip, [r8, r3]
   14c9c:	add	r4, r4, #2
   14ca0:	mov	r6, r7
   14ca4:	b	14c34 <__assert_fail@plt+0x3bdc>
   14ca8:	cmp	r8, #1
   14cac:	beq	14b24 <__assert_fail@plt+0x3acc>
   14cb0:	add	r1, r4, #1
   14cb4:	add	r3, sl, r8
   14cb8:	add	r1, sl, r1
   14cbc:	add	r4, r3, r4
   14cc0:	ldrb	r3, [r1], #1
   14cc4:	sub	r3, r3, #91	; 0x5b
   14cc8:	cmp	r3, #33	; 0x21
   14ccc:	ldrls	pc, [pc, r3, lsl #2]
   14cd0:	b	14d5c <__assert_fail@plt+0x3d04>
   14cd4:	andeq	r4, r1, r8, ror #26
   14cd8:	andeq	r4, r1, r8, ror #26
   14cdc:	andeq	r4, r1, ip, asr sp
   14ce0:	andeq	r4, r1, r8, ror #26
   14ce4:	andeq	r4, r1, ip, asr sp
   14ce8:	andeq	r4, r1, r8, ror #26
   14cec:	andeq	r4, r1, ip, asr sp
   14cf0:	andeq	r4, r1, ip, asr sp
   14cf4:	andeq	r4, r1, ip, asr sp
   14cf8:	andeq	r4, r1, ip, asr sp
   14cfc:	andeq	r4, r1, ip, asr sp
   14d00:	andeq	r4, r1, ip, asr sp
   14d04:	andeq	r4, r1, ip, asr sp
   14d08:	andeq	r4, r1, ip, asr sp
   14d0c:	andeq	r4, r1, ip, asr sp
   14d10:	andeq	r4, r1, ip, asr sp
   14d14:	andeq	r4, r1, ip, asr sp
   14d18:	andeq	r4, r1, ip, asr sp
   14d1c:	andeq	r4, r1, ip, asr sp
   14d20:	andeq	r4, r1, ip, asr sp
   14d24:	andeq	r4, r1, ip, asr sp
   14d28:	andeq	r4, r1, ip, asr sp
   14d2c:	andeq	r4, r1, ip, asr sp
   14d30:	andeq	r4, r1, ip, asr sp
   14d34:	andeq	r4, r1, ip, asr sp
   14d38:	andeq	r4, r1, ip, asr sp
   14d3c:	andeq	r4, r1, ip, asr sp
   14d40:	andeq	r4, r1, ip, asr sp
   14d44:	andeq	r4, r1, ip, asr sp
   14d48:	andeq	r4, r1, ip, asr sp
   14d4c:	andeq	r4, r1, ip, asr sp
   14d50:	andeq	r4, r1, ip, asr sp
   14d54:	andeq	r4, r1, ip, asr sp
   14d58:	andeq	r4, r1, r8, ror #26
   14d5c:	cmp	r4, r1
   14d60:	bne	14cc0 <__assert_fail@plt+0x3c68>
   14d64:	b	14b24 <__assert_fail@plt+0x3acc>
   14d68:	ldr	fp, [sp, #84]	; 0x54
   14d6c:	ldr	sl, [sp, #88]	; 0x58
   14d70:	mov	r8, #2
   14d74:	b	14230 <__assert_fail@plt+0x31d8>
   14d78:	cmp	sl, r4
   14d7c:	movls	r1, r4
   14d80:	bls	14380 <__assert_fail@plt+0x3328>
   14d84:	ldr	r3, [sp, #44]	; 0x2c
   14d88:	b	14370 <__assert_fail@plt+0x3318>
   14d8c:	str	sl, [sp, #72]	; 0x48
   14d90:	ldr	sl, [sp, #32]
   14d94:	b	141a8 <__assert_fail@plt+0x3150>
   14d98:	add	r9, r9, #1
   14d9c:	b	13a9c <__assert_fail@plt+0x2a44>
   14da0:	ldr	r2, [sp, #28]
   14da4:	mov	r6, #0
   14da8:	b	14b74 <__assert_fail@plt+0x3b1c>
   14dac:	str	fp, [sp, #160]	; 0xa0
   14db0:	str	r3, [sp, #28]
   14db4:	mov	fp, r8
   14db8:	ldr	r8, [sp, #160]	; 0xa0
   14dbc:	b	14230 <__assert_fail@plt+0x31d8>
   14dc0:	str	r6, [sp, #44]	; 0x2c
   14dc4:	ldr	r6, [sp, #48]	; 0x30
   14dc8:	b	141d8 <__assert_fail@plt+0x3180>
   14dcc:	str	r6, [sp, #44]	; 0x2c
   14dd0:	ldr	r6, [sp, #48]	; 0x30
   14dd4:	b	13fe4 <__assert_fail@plt+0x2f8c>
   14dd8:	add	r4, r4, #4
   14ddc:	str	r3, [sp, #44]	; 0x2c
   14de0:	mov	r6, #0
   14de4:	mov	r5, #48	; 0x30
   14de8:	b	13f6c <__assert_fail@plt+0x2f14>
   14dec:	mov	r7, r3
   14df0:	b	14c34 <__assert_fail@plt+0x3bdc>
   14df4:	ldr	r3, [pc, #-1624]	; 147a4 <__assert_fail@plt+0x374c>
   14df8:	mov	r4, #1
   14dfc:	str	r4, [sp, #40]	; 0x28
   14e00:	str	r4, [sp, #28]
   14e04:	str	r4, [sp, #52]	; 0x34
   14e08:	str	sl, [sp, #72]	; 0x48
   14e0c:	str	sl, [sp, #68]	; 0x44
   14e10:	str	sl, [sp, #44]	; 0x2c
   14e14:	str	sl, [sp, #32]
   14e18:	str	r3, [sp, #60]	; 0x3c
   14e1c:	b	13a8c <__assert_fail@plt+0x2a34>
   14e20:	mov	r3, r6
   14e24:	mov	r5, #48	; 0x30
   14e28:	mov	r6, #0
   14e2c:	b	13f6c <__assert_fail@plt+0x2f14>
   14e30:	cmp	sl, r4
   14e34:	movhi	r3, #48	; 0x30
   14e38:	strbhi	r3, [r8, r4]
   14e3c:	add	r3, r1, #2
   14e40:	cmp	sl, r3
   14e44:	movhi	r0, #48	; 0x30
   14e48:	strbhi	r0, [r8, r3]
   14e4c:	add	r4, r1, #3
   14e50:	mov	r5, #48	; 0x30
   14e54:	b	143b4 <__assert_fail@plt+0x335c>
   14e58:	str	fp, [sp, #160]	; 0xa0
   14e5c:	mov	fp, r8
   14e60:	ldr	r8, [sp, #160]	; 0xa0
   14e64:	b	14230 <__assert_fail@plt+0x31d8>
   14e68:	ldr	r2, [sp, #80]	; 0x50
   14e6c:	ldrb	r3, [r2]
   14e70:	cmp	r3, #0
   14e74:	beq	13a5c <__assert_fail@plt+0x2a04>
   14e78:	cmp	sl, r4
   14e7c:	strbhi	r3, [fp, r4]
   14e80:	ldrb	r3, [r2, #1]!
   14e84:	add	r4, r4, #1
   14e88:	cmp	r3, #0
   14e8c:	bne	14e78 <__assert_fail@plt+0x3e20>
   14e90:	b	13a5c <__assert_fail@plt+0x2a04>
   14e94:	str	fp, [sp, #160]	; 0xa0
   14e98:	mov	r3, #0
   14e9c:	mov	fp, r8
   14ea0:	ldr	r8, [sp, #160]	; 0xa0
   14ea4:	b	142c4 <__assert_fail@plt+0x326c>
   14ea8:	mov	ip, r5
   14eac:	ldr	r7, [sp, #96]	; 0x60
   14eb0:	ldr	r5, [sp, #92]	; 0x5c
   14eb4:	ldr	r4, [sp, #100]	; 0x64
   14eb8:	ldr	r8, [sp, #84]	; 0x54
   14ebc:	ldr	sl, [sp, #88]	; 0x58
   14ec0:	ldr	r2, [sp, #28]
   14ec4:	mov	r6, #0
   14ec8:	b	14b6c <__assert_fail@plt+0x3b14>
   14ecc:	ldr	r2, [sp, #36]	; 0x24
   14ed0:	ldrb	r1, [r2, r3]
   14ed4:	sub	r2, r1, #33	; 0x21
   14ed8:	cmp	r2, #29
   14edc:	ldrls	pc, [pc, r2, lsl #2]
   14ee0:	b	14fbc <__assert_fail@plt+0x3f64>
   14ee4:	andeq	r4, r1, ip, asr pc
   14ee8:			; <UNDEFINED> instruction: 0x00014fbc
   14eec:			; <UNDEFINED> instruction: 0x00014fbc
   14ef0:			; <UNDEFINED> instruction: 0x00014fbc
   14ef4:			; <UNDEFINED> instruction: 0x00014fbc
   14ef8:			; <UNDEFINED> instruction: 0x00014fbc
   14efc:	andeq	r4, r1, ip, asr pc
   14f00:	andeq	r4, r1, ip, asr pc
   14f04:	andeq	r4, r1, ip, asr pc
   14f08:			; <UNDEFINED> instruction: 0x00014fbc
   14f0c:			; <UNDEFINED> instruction: 0x00014fbc
   14f10:			; <UNDEFINED> instruction: 0x00014fbc
   14f14:	andeq	r4, r1, ip, asr pc
   14f18:			; <UNDEFINED> instruction: 0x00014fbc
   14f1c:	andeq	r4, r1, ip, asr pc
   14f20:			; <UNDEFINED> instruction: 0x00014fbc
   14f24:			; <UNDEFINED> instruction: 0x00014fbc
   14f28:			; <UNDEFINED> instruction: 0x00014fbc
   14f2c:			; <UNDEFINED> instruction: 0x00014fbc
   14f30:			; <UNDEFINED> instruction: 0x00014fbc
   14f34:			; <UNDEFINED> instruction: 0x00014fbc
   14f38:			; <UNDEFINED> instruction: 0x00014fbc
   14f3c:			; <UNDEFINED> instruction: 0x00014fbc
   14f40:			; <UNDEFINED> instruction: 0x00014fbc
   14f44:			; <UNDEFINED> instruction: 0x00014fbc
   14f48:			; <UNDEFINED> instruction: 0x00014fbc
   14f4c:			; <UNDEFINED> instruction: 0x00014fbc
   14f50:	andeq	r4, r1, ip, asr pc
   14f54:	andeq	r4, r1, ip, asr pc
   14f58:	andeq	r4, r1, ip, asr pc
   14f5c:	ldr	r2, [sp, #32]
   14f60:	cmp	r2, #0
   14f64:	bne	15068 <__assert_fail@plt+0x4010>
   14f68:	cmp	sl, r4
   14f6c:	movhi	r2, #63	; 0x3f
   14f70:	strbhi	r2, [r8, r4]
   14f74:	add	r2, r4, #1
   14f78:	cmp	sl, r2
   14f7c:	movhi	r0, #34	; 0x22
   14f80:	strbhi	r0, [r8, r2]
   14f84:	add	r2, r4, #2
   14f88:	cmp	sl, r2
   14f8c:	movhi	r0, #34	; 0x22
   14f90:	strbhi	r0, [r8, r2]
   14f94:	add	r2, r4, #3
   14f98:	cmp	sl, r2
   14f9c:	movhi	r0, #63	; 0x3f
   14fa0:	strbhi	r0, [r8, r2]
   14fa4:	mov	r2, #0
   14fa8:	add	r4, r4, #4
   14fac:	mov	r5, r1
   14fb0:	mov	r9, r3
   14fb4:	mov	r6, r2
   14fb8:	b	143b4 <__assert_fail@plt+0x335c>
   14fbc:	mov	r2, #0
   14fc0:	mov	r6, r2
   14fc4:	b	13f24 <__assert_fail@plt+0x2ecc>
   14fc8:	ldr	r0, [sp, #24]
   14fcc:	mov	r1, r4
   14fd0:	cmp	r1, r0
   14fd4:	mov	r2, r7
   14fd8:	mov	r3, r5
   14fdc:	mov	ip, r5
   14fe0:	ldr	r7, [sp, #96]	; 0x60
   14fe4:	ldr	r5, [sp, #92]	; 0x5c
   14fe8:	ldr	r4, [sp, #100]	; 0x64
   14fec:	ldr	r8, [sp, #84]	; 0x54
   14ff0:	ldr	sl, [sp, #88]	; 0x58
   14ff4:	bcs	15028 <__assert_fail@plt+0x3fd0>
   14ff8:	ldrb	r6, [r2]
   14ffc:	cmp	r6, #0
   15000:	bne	15014 <__assert_fail@plt+0x3fbc>
   15004:	b	15144 <__assert_fail@plt+0x40ec>
   15008:	ldrb	r6, [r2, #1]!
   1500c:	cmp	r6, #0
   15010:	beq	150cc <__assert_fail@plt+0x4074>
   15014:	add	r3, r3, #1
   15018:	add	r1, r9, r3
   1501c:	cmp	r1, r0
   15020:	bcc	15008 <__assert_fail@plt+0x3fb0>
   15024:	mov	ip, r3
   15028:	ldr	r2, [sp, #28]
   1502c:	mov	r6, #0
   15030:	b	14b6c <__assert_fail@plt+0x3b14>
   15034:	mov	r3, #1
   15038:	str	r3, [sp, #40]	; 0x28
   1503c:	str	r3, [sp, #32]
   15040:	str	r3, [sp, #28]
   15044:	str	r3, [sp, #52]	; 0x34
   15048:	ldr	r3, [pc, #-2220]	; 147a4 <__assert_fail@plt+0x374c>
   1504c:	mov	r2, #0
   15050:	str	r2, [sp, #68]	; 0x44
   15054:	str	r2, [sp, #44]	; 0x2c
   15058:	str	r2, [sp, #72]	; 0x48
   1505c:	mov	r4, r2
   15060:	str	r3, [sp, #60]	; 0x3c
   15064:	b	13a8c <__assert_fail@plt+0x2a34>
   15068:	str	fp, [sp, #160]	; 0xa0
   1506c:	mov	fp, r8
   15070:	ldr	r8, [sp, #160]	; 0xa0
   15074:	b	1423c <__assert_fail@plt+0x31e4>
   15078:	mov	r2, r3
   1507c:	ldr	r3, [sp, #60]	; 0x3c
   15080:	cmp	r3, #0
   15084:	moveq	r2, #0
   15088:	andne	r2, r2, #1
   1508c:	cmp	r2, #0
   15090:	beq	150bc <__assert_fail@plt+0x4064>
   15094:	mov	r2, r3
   15098:	ldrb	r3, [r3]
   1509c:	cmp	r3, #0
   150a0:	beq	150bc <__assert_fail@plt+0x4064>
   150a4:	cmp	sl, r4
   150a8:	strbhi	r3, [fp, r4]
   150ac:	ldrb	r3, [r2, #1]!
   150b0:	add	r4, r4, #1
   150b4:	cmp	r3, #0
   150b8:	bne	150a4 <__assert_fail@plt+0x404c>
   150bc:	cmp	sl, r4
   150c0:	movhi	r3, #0
   150c4:	strbhi	r3, [fp, r4]
   150c8:	b	1427c <__assert_fail@plt+0x3224>
   150cc:	mov	ip, r3
   150d0:	ldr	r2, [sp, #28]
   150d4:	b	14b6c <__assert_fail@plt+0x3b14>
   150d8:	str	fp, [sp, #160]	; 0xa0
   150dc:	mov	fp, r8
   150e0:	ldr	r8, [sp, #160]	; 0xa0
   150e4:	sub	r3, r8, #2
   150e8:	clz	r3, r3
   150ec:	lsr	r3, r3, #5
   150f0:	str	r3, [sp, #28]
   150f4:	b	14230 <__assert_fail@plt+0x31d8>
   150f8:	ldr	r3, [sp, #76]	; 0x4c
   150fc:	mov	ip, #5
   15100:	str	r3, [sp, #16]
   15104:	ldr	r3, [sp, #80]	; 0x50
   15108:	ldr	r2, [sp, #36]	; 0x24
   1510c:	str	r3, [sp, #12]
   15110:	ldr	r3, [sp, #56]	; 0x38
   15114:	ldr	r1, [sp, #72]	; 0x48
   15118:	str	r3, [sp, #8]
   1511c:	ldr	r3, [sp, #164]	; 0xa4
   15120:	mov	r0, fp
   15124:	str	r3, [sp, #4]
   15128:	str	ip, [sp]
   1512c:	ldr	r3, [sp, #24]
   15130:	bl	13994 <__assert_fail@plt+0x293c>
   15134:	mov	r4, r0
   15138:	b	1427c <__assert_fail@plt+0x3224>
   1513c:	mov	r8, #2
   15140:	b	14230 <__assert_fail@plt+0x31d8>
   15144:	ldr	r2, [sp, #28]
   15148:	b	14b6c <__assert_fail@plt+0x3b14>
   1514c:	mov	r3, #0
   15150:	str	r3, [sp, #68]	; 0x44
   15154:	str	r3, [sp, #44]	; 0x2c
   15158:	str	r3, [sp, #72]	; 0x48
   1515c:	str	r3, [sp, #28]
   15160:	mov	r4, r3
   15164:	ldr	r3, [pc, #-2500]	; 147a8 <__assert_fail@plt+0x3750>
   15168:	mov	r2, #1
   1516c:	str	r2, [sp, #40]	; 0x28
   15170:	str	r2, [sp, #32]
   15174:	str	r2, [sp, #52]	; 0x34
   15178:	str	r3, [sp, #60]	; 0x3c
   1517c:	b	13a8c <__assert_fail@plt+0x2a34>
   15180:	bl	10e54 <__stack_chk_fail@plt>
   15184:	mov	r5, r3
   15188:	mov	r6, #0
   1518c:	b	13f80 <__assert_fail@plt+0x2f28>
   15190:	mov	r3, #0
   15194:	mov	r2, #1
   15198:	str	r3, [sp, #44]	; 0x2c
   1519c:	str	r3, [sp, #72]	; 0x48
   151a0:	str	r2, [sp, #40]	; 0x28
   151a4:	b	1409c <__assert_fail@plt+0x3044>
   151a8:	bl	1104c <abort@plt>
   151ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151b0:	sub	sp, sp, #44	; 0x2c
   151b4:	mov	r6, r0
   151b8:	mov	r4, r3
   151bc:	mov	sl, r1
   151c0:	mov	fp, r2
   151c4:	bl	10f80 <__errno_location@plt>
   151c8:	ldr	r7, [pc, #364]	; 1533c <__assert_fail@plt+0x42e4>
   151cc:	cmp	r6, #0
   151d0:	ldr	r5, [r7]
   151d4:	ldr	r3, [r0]
   151d8:	str	r3, [sp, #24]
   151dc:	blt	15338 <__assert_fail@plt+0x42e0>
   151e0:	ldr	r3, [r7, #4]
   151e4:	mov	r8, r0
   151e8:	cmp	r3, r6
   151ec:	bgt	15238 <__assert_fail@plt+0x41e0>
   151f0:	cmn	r6, #-268435454	; 0xf0000002
   151f4:	bgt	15334 <__assert_fail@plt+0x42dc>
   151f8:	add	r9, r6, #1
   151fc:	add	r3, r7, #8
   15200:	cmp	r5, r3
   15204:	lsl	r1, r9, #3
   15208:	beq	15314 <__assert_fail@plt+0x42bc>
   1520c:	mov	r0, r5
   15210:	bl	161f8 <__assert_fail@plt+0x51a0>
   15214:	mov	r5, r0
   15218:	str	r0, [r7]
   1521c:	ldr	r0, [r7, #4]
   15220:	mov	r1, #0
   15224:	sub	r2, r9, r0
   15228:	add	r0, r5, r0, lsl #3
   1522c:	lsl	r2, r2, #3
   15230:	bl	10f98 <memset@plt>
   15234:	str	r9, [r7, #4]
   15238:	add	r3, r5, r6, lsl #3
   1523c:	ldr	r1, [r4, #4]
   15240:	ldr	r7, [r3, #4]
   15244:	ldr	r9, [r5, r6, lsl #3]
   15248:	ldr	r2, [r4, #40]	; 0x28
   1524c:	ldr	ip, [r4, #44]	; 0x2c
   15250:	str	r3, [sp, #28]
   15254:	ldr	r3, [r4]
   15258:	orr	r1, r1, #1
   1525c:	add	lr, r4, #8
   15260:	str	r1, [sp, #36]	; 0x24
   15264:	str	r1, [sp, #4]
   15268:	str	r2, [sp, #12]
   1526c:	str	r3, [sp]
   15270:	mov	r0, r7
   15274:	mov	r1, r9
   15278:	str	ip, [sp, #16]
   1527c:	str	lr, [sp, #8]
   15280:	mov	r3, fp
   15284:	mov	r2, sl
   15288:	str	lr, [sp, #32]
   1528c:	bl	13994 <__assert_fail@plt+0x293c>
   15290:	cmp	r9, r0
   15294:	bhi	15300 <__assert_fail@plt+0x42a8>
   15298:	ldr	r3, [pc, #160]	; 15340 <__assert_fail@plt+0x42e8>
   1529c:	add	r9, r0, #1
   152a0:	cmp	r7, r3
   152a4:	str	r9, [r5, r6, lsl #3]
   152a8:	beq	152b4 <__assert_fail@plt+0x425c>
   152ac:	mov	r0, r7
   152b0:	bl	10e0c <free@plt>
   152b4:	mov	r0, r9
   152b8:	bl	1619c <__assert_fail@plt+0x5144>
   152bc:	ldr	lr, [sp, #28]
   152c0:	ldr	ip, [r4, #44]	; 0x2c
   152c4:	ldr	r5, [r4, #40]	; 0x28
   152c8:	mov	r3, fp
   152cc:	mov	r2, sl
   152d0:	mov	r1, r9
   152d4:	str	r0, [lr, #4]
   152d8:	ldr	lr, [r4]
   152dc:	ldr	r4, [sp, #32]
   152e0:	str	ip, [sp, #16]
   152e4:	str	r4, [sp, #8]
   152e8:	ldr	r4, [sp, #36]	; 0x24
   152ec:	str	r5, [sp, #12]
   152f0:	str	r4, [sp, #4]
   152f4:	str	lr, [sp]
   152f8:	mov	r7, r0
   152fc:	bl	13994 <__assert_fail@plt+0x293c>
   15300:	ldr	r3, [sp, #24]
   15304:	mov	r0, r7
   15308:	str	r3, [r8]
   1530c:	add	sp, sp, #44	; 0x2c
   15310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15314:	mov	r0, #0
   15318:	bl	161f8 <__assert_fail@plt+0x51a0>
   1531c:	ldr	r3, [pc, #32]	; 15344 <__assert_fail@plt+0x42ec>
   15320:	mov	r5, r0
   15324:	ldm	r3, {r0, r1}
   15328:	str	r5, [r7]
   1532c:	stm	r5, {r0, r1}
   15330:	b	1521c <__assert_fail@plt+0x41c4>
   15334:	bl	163e4 <__assert_fail@plt+0x538c>
   15338:	bl	1104c <abort@plt>
   1533c:	andeq	r9, r2, r0, lsl #2
   15340:	andeq	r9, r2, r4, ror r1
   15344:	andeq	r9, r2, r8, lsl #2
   15348:	push	{r4, r5, r6, lr}
   1534c:	mov	r5, r0
   15350:	bl	10f80 <__errno_location@plt>
   15354:	cmp	r5, #0
   15358:	mov	r1, #48	; 0x30
   1535c:	mov	r4, r0
   15360:	ldr	r0, [pc, #16]	; 15378 <__assert_fail@plt+0x4320>
   15364:	ldr	r6, [r4]
   15368:	movne	r0, r5
   1536c:	bl	163a4 <__assert_fail@plt+0x534c>
   15370:	str	r6, [r4]
   15374:	pop	{r4, r5, r6, pc}
   15378:	andeq	r9, r2, r4, ror r2
   1537c:	ldr	r3, [pc, #12]	; 15390 <__assert_fail@plt+0x4338>
   15380:	cmp	r0, #0
   15384:	moveq	r0, r3
   15388:	ldr	r0, [r0]
   1538c:	bx	lr
   15390:	andeq	r9, r2, r4, ror r2
   15394:	ldr	r3, [pc, #12]	; 153a8 <__assert_fail@plt+0x4350>
   15398:	cmp	r0, #0
   1539c:	moveq	r0, r3
   153a0:	str	r1, [r0]
   153a4:	bx	lr
   153a8:	andeq	r9, r2, r4, ror r2
   153ac:	ldr	r3, [pc, #52]	; 153e8 <__assert_fail@plt+0x4390>
   153b0:	cmp	r0, #0
   153b4:	moveq	r0, r3
   153b8:	add	r3, r0, #8
   153bc:	push	{lr}		; (str lr, [sp, #-4]!)
   153c0:	lsr	lr, r1, #5
   153c4:	and	r1, r1, #31
   153c8:	ldr	ip, [r3, lr, lsl #2]
   153cc:	lsr	r0, ip, r1
   153d0:	eor	r2, r2, r0
   153d4:	and	r2, r2, #1
   153d8:	and	r0, r0, #1
   153dc:	eor	r1, ip, r2, lsl r1
   153e0:	str	r1, [r3, lr, lsl #2]
   153e4:	pop	{pc}		; (ldr pc, [sp], #4)
   153e8:	andeq	r9, r2, r4, ror r2
   153ec:	ldr	r3, [pc, #16]	; 15404 <__assert_fail@plt+0x43ac>
   153f0:	cmp	r0, #0
   153f4:	movne	r3, r0
   153f8:	ldr	r0, [r3, #4]
   153fc:	str	r1, [r3, #4]
   15400:	bx	lr
   15404:	andeq	r9, r2, r4, ror r2
   15408:	ldr	r3, [pc, #44]	; 1543c <__assert_fail@plt+0x43e4>
   1540c:	cmp	r0, #0
   15410:	moveq	r0, r3
   15414:	mov	ip, #10
   15418:	cmp	r2, #0
   1541c:	cmpne	r1, #0
   15420:	str	ip, [r0]
   15424:	beq	15434 <__assert_fail@plt+0x43dc>
   15428:	str	r1, [r0, #40]	; 0x28
   1542c:	str	r2, [r0, #44]	; 0x2c
   15430:	bx	lr
   15434:	push	{r4, lr}
   15438:	bl	1104c <abort@plt>
   1543c:	andeq	r9, r2, r4, ror r2
   15440:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15444:	sub	sp, sp, #24
   15448:	ldr	ip, [pc, #108]	; 154bc <__assert_fail@plt+0x4464>
   1544c:	ldr	r4, [sp, #56]	; 0x38
   15450:	mov	r9, r2
   15454:	cmp	r4, #0
   15458:	moveq	r4, ip
   1545c:	mov	sl, r3
   15460:	mov	r7, r0
   15464:	mov	r8, r1
   15468:	bl	10f80 <__errno_location@plt>
   1546c:	ldr	r3, [r4, #44]	; 0x2c
   15470:	mov	r1, r8
   15474:	ldr	r6, [r0]
   15478:	str	r3, [sp, #16]
   1547c:	ldr	r2, [r4, #40]	; 0x28
   15480:	add	r3, r4, #8
   15484:	str	r3, [sp, #8]
   15488:	str	r2, [sp, #12]
   1548c:	ldr	r2, [r4, #4]
   15490:	mov	r5, r0
   15494:	str	r2, [sp, #4]
   15498:	ldr	ip, [r4]
   1549c:	mov	r3, sl
   154a0:	mov	r2, r9
   154a4:	mov	r0, r7
   154a8:	str	ip, [sp]
   154ac:	bl	13994 <__assert_fail@plt+0x293c>
   154b0:	str	r6, [r5]
   154b4:	add	sp, sp, #24
   154b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   154bc:	andeq	r9, r2, r4, ror r2
   154c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154c4:	cmp	r3, #0
   154c8:	sub	sp, sp, #44	; 0x2c
   154cc:	ldr	r4, [pc, #192]	; 15594 <__assert_fail@plt+0x453c>
   154d0:	mov	r6, r2
   154d4:	movne	r4, r3
   154d8:	mov	r9, r1
   154dc:	mov	r8, r0
   154e0:	bl	10f80 <__errno_location@plt>
   154e4:	ldr	r3, [r4, #44]	; 0x2c
   154e8:	ldr	r5, [r4, #4]
   154ec:	add	sl, r4, #8
   154f0:	cmp	r6, #0
   154f4:	orreq	r5, r5, #1
   154f8:	mov	r1, #0
   154fc:	ldr	r2, [r0]
   15500:	str	r3, [sp, #16]
   15504:	ldr	r3, [r4, #40]	; 0x28
   15508:	stmib	sp, {r5, sl}
   1550c:	str	r3, [sp, #12]
   15510:	ldr	r3, [r4]
   15514:	mov	r7, r0
   15518:	str	r2, [sp, #28]
   1551c:	str	r3, [sp]
   15520:	mov	r2, r8
   15524:	mov	r3, r9
   15528:	mov	r0, r1
   1552c:	bl	13994 <__assert_fail@plt+0x293c>
   15530:	add	r1, r0, #1
   15534:	mov	fp, r0
   15538:	mov	r0, r1
   1553c:	str	r1, [sp, #36]	; 0x24
   15540:	bl	1619c <__assert_fail@plt+0x5144>
   15544:	ldr	r3, [r4, #44]	; 0x2c
   15548:	mov	r2, r8
   1554c:	str	r3, [sp, #16]
   15550:	ldr	r3, [r4, #40]	; 0x28
   15554:	str	r5, [sp, #4]
   15558:	str	r3, [sp, #12]
   1555c:	str	sl, [sp, #8]
   15560:	ldr	ip, [r4]
   15564:	ldr	r1, [sp, #36]	; 0x24
   15568:	mov	r3, r9
   1556c:	str	ip, [sp]
   15570:	str	r0, [sp, #32]
   15574:	bl	13994 <__assert_fail@plt+0x293c>
   15578:	ldr	r2, [sp, #28]
   1557c:	cmp	r6, #0
   15580:	str	r2, [r7]
   15584:	ldr	r0, [sp, #32]
   15588:	strne	fp, [r6]
   1558c:	add	sp, sp, #44	; 0x2c
   15590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15594:	andeq	r9, r2, r4, ror r2
   15598:	mov	r3, r2
   1559c:	mov	r2, #0
   155a0:	b	154c0 <__assert_fail@plt+0x4468>
   155a4:	push	{r4, r5, r6, r7, r8, lr}
   155a8:	ldr	r6, [pc, #112]	; 15620 <__assert_fail@plt+0x45c8>
   155ac:	ldr	r3, [r6, #4]
   155b0:	ldr	r7, [r6]
   155b4:	cmp	r3, #1
   155b8:	ble	155dc <__assert_fail@plt+0x4584>
   155bc:	sub	r5, r7, #8
   155c0:	add	r5, r5, r3, lsl #3
   155c4:	mov	r4, r7
   155c8:	ldr	r0, [r4, #12]
   155cc:	add	r4, r4, #8
   155d0:	bl	10e0c <free@plt>
   155d4:	cmp	r4, r5
   155d8:	bne	155c8 <__assert_fail@plt+0x4570>
   155dc:	ldr	r0, [r7, #4]
   155e0:	ldr	r4, [pc, #60]	; 15624 <__assert_fail@plt+0x45cc>
   155e4:	cmp	r0, r4
   155e8:	beq	155fc <__assert_fail@plt+0x45a4>
   155ec:	bl	10e0c <free@plt>
   155f0:	mov	r3, #256	; 0x100
   155f4:	str	r4, [r6, #12]
   155f8:	str	r3, [r6, #8]
   155fc:	ldr	r4, [pc, #36]	; 15628 <__assert_fail@plt+0x45d0>
   15600:	cmp	r7, r4
   15604:	beq	15614 <__assert_fail@plt+0x45bc>
   15608:	mov	r0, r7
   1560c:	bl	10e0c <free@plt>
   15610:	str	r4, [r6]
   15614:	mov	r3, #1
   15618:	str	r3, [r6, #4]
   1561c:	pop	{r4, r5, r6, r7, r8, pc}
   15620:	andeq	r9, r2, r0, lsl #2
   15624:	andeq	r9, r2, r4, ror r1
   15628:	andeq	r9, r2, r8, lsl #2
   1562c:	ldr	r3, [pc, #4]	; 15638 <__assert_fail@plt+0x45e0>
   15630:	mvn	r2, #0
   15634:	b	151ac <__assert_fail@plt+0x4154>
   15638:	andeq	r9, r2, r4, ror r2
   1563c:	ldr	r3, [pc]	; 15644 <__assert_fail@plt+0x45ec>
   15640:	b	151ac <__assert_fail@plt+0x4154>
   15644:	andeq	r9, r2, r4, ror r2
   15648:	mov	r1, r0
   1564c:	ldr	r3, [pc, #8]	; 1565c <__assert_fail@plt+0x4604>
   15650:	mvn	r2, #0
   15654:	mov	r0, #0
   15658:	b	151ac <__assert_fail@plt+0x4154>
   1565c:	andeq	r9, r2, r4, ror r2
   15660:	mov	r2, r1
   15664:	ldr	r3, [pc, #8]	; 15674 <__assert_fail@plt+0x461c>
   15668:	mov	r1, r0
   1566c:	mov	r0, #0
   15670:	b	151ac <__assert_fail@plt+0x4154>
   15674:	andeq	r9, r2, r4, ror r2
   15678:	push	{r4, r5, r6, lr}
   1567c:	sub	sp, sp, #56	; 0x38
   15680:	ldr	r4, [pc, #68]	; 156cc <__assert_fail@plt+0x4674>
   15684:	mov	r6, r2
   15688:	mov	r5, r0
   1568c:	ldr	r3, [r4]
   15690:	add	r0, sp, #4
   15694:	str	r3, [sp, #52]	; 0x34
   15698:	bl	13824 <__assert_fail@plt+0x27cc>
   1569c:	add	r3, sp, #4
   156a0:	mvn	r2, #0
   156a4:	mov	r1, r6
   156a8:	mov	r0, r5
   156ac:	bl	151ac <__assert_fail@plt+0x4154>
   156b0:	ldr	r2, [sp, #52]	; 0x34
   156b4:	ldr	r3, [r4]
   156b8:	cmp	r2, r3
   156bc:	bne	156c8 <__assert_fail@plt+0x4670>
   156c0:	add	sp, sp, #56	; 0x38
   156c4:	pop	{r4, r5, r6, pc}
   156c8:	bl	10e54 <__stack_chk_fail@plt>
   156cc:	andeq	r8, r2, r8, lsl #30
   156d0:	push	{r4, r5, r6, r7, lr}
   156d4:	sub	sp, sp, #60	; 0x3c
   156d8:	ldr	r4, [pc, #72]	; 15728 <__assert_fail@plt+0x46d0>
   156dc:	mov	r6, r2
   156e0:	mov	r7, r3
   156e4:	ldr	ip, [r4]
   156e8:	mov	r5, r0
   156ec:	add	r0, sp, #4
   156f0:	str	ip, [sp, #52]	; 0x34
   156f4:	bl	13824 <__assert_fail@plt+0x27cc>
   156f8:	add	r3, sp, #4
   156fc:	mov	r2, r7
   15700:	mov	r1, r6
   15704:	mov	r0, r5
   15708:	bl	151ac <__assert_fail@plt+0x4154>
   1570c:	ldr	r2, [sp, #52]	; 0x34
   15710:	ldr	r3, [r4]
   15714:	cmp	r2, r3
   15718:	bne	15724 <__assert_fail@plt+0x46cc>
   1571c:	add	sp, sp, #60	; 0x3c
   15720:	pop	{r4, r5, r6, r7, pc}
   15724:	bl	10e54 <__stack_chk_fail@plt>
   15728:	andeq	r8, r2, r8, lsl #30
   1572c:	mov	r2, r1
   15730:	mov	r1, r0
   15734:	mov	r0, #0
   15738:	b	15678 <__assert_fail@plt+0x4620>
   1573c:	mov	r3, r2
   15740:	mov	r2, r1
   15744:	mov	r1, r0
   15748:	mov	r0, #0
   1574c:	b	156d0 <__assert_fail@plt+0x4678>
   15750:	push	{r4, r5, r6, r7, r8, r9, lr}
   15754:	mov	r4, r2
   15758:	ldr	lr, [pc, #128]	; 157e0 <__assert_fail@plt+0x4788>
   1575c:	mov	r8, r0
   15760:	mov	r9, r1
   15764:	ldm	lr!, {r0, r1, r2, r3}
   15768:	sub	sp, sp, #60	; 0x3c
   1576c:	add	ip, sp, #4
   15770:	lsr	r6, r4, #5
   15774:	stmia	ip!, {r0, r1, r2, r3}
   15778:	add	r7, sp, #12
   1577c:	ldm	lr!, {r0, r1, r2, r3}
   15780:	and	r4, r4, #31
   15784:	ldr	r5, [pc, #88]	; 157e4 <__assert_fail@plt+0x478c>
   15788:	stmia	ip!, {r0, r1, r2, r3}
   1578c:	ldm	lr, {r0, r1, r2, r3}
   15790:	stm	ip, {r0, r1, r2, r3}
   15794:	mov	r2, r9
   15798:	ldr	r3, [r7, r6, lsl #2]
   1579c:	ldr	ip, [r5]
   157a0:	mov	r1, r8
   157a4:	mvn	r0, r3, lsr r4
   157a8:	and	r0, r0, #1
   157ac:	str	ip, [sp, #52]	; 0x34
   157b0:	eor	r4, r3, r0, lsl r4
   157b4:	add	r3, sp, #4
   157b8:	mov	r0, #0
   157bc:	str	r4, [r7, r6, lsl #2]
   157c0:	bl	151ac <__assert_fail@plt+0x4154>
   157c4:	ldr	r2, [sp, #52]	; 0x34
   157c8:	ldr	r3, [r5]
   157cc:	cmp	r2, r3
   157d0:	bne	157dc <__assert_fail@plt+0x4784>
   157d4:	add	sp, sp, #60	; 0x3c
   157d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   157dc:	bl	10e54 <__stack_chk_fail@plt>
   157e0:	andeq	r9, r2, r4, ror r2
   157e4:	andeq	r8, r2, r8, lsl #30
   157e8:	mov	r2, r1
   157ec:	mvn	r1, #0
   157f0:	b	15750 <__assert_fail@plt+0x46f8>
   157f4:	mov	r2, #58	; 0x3a
   157f8:	mvn	r1, #0
   157fc:	b	15750 <__assert_fail@plt+0x46f8>
   15800:	mov	r2, #58	; 0x3a
   15804:	b	15750 <__assert_fail@plt+0x46f8>
   15808:	push	{r4, r5, r6, r7, r8, lr}
   1580c:	sub	sp, sp, #104	; 0x68
   15810:	ldr	r5, [pc, #120]	; 15890 <__assert_fail@plt+0x4838>
   15814:	mov	r6, r0
   15818:	mov	r0, sp
   1581c:	ldr	r3, [r5]
   15820:	mov	r7, r2
   15824:	str	r3, [sp, #100]	; 0x64
   15828:	bl	13824 <__assert_fail@plt+0x27cc>
   1582c:	mov	ip, sp
   15830:	add	lr, sp, #52	; 0x34
   15834:	ldm	ip!, {r0, r1, r2, r3}
   15838:	stmia	lr!, {r0, r1, r2, r3}
   1583c:	ldm	ip!, {r0, r1, r2, r3}
   15840:	ldr	r8, [sp, #64]	; 0x40
   15844:	stmia	lr!, {r0, r1, r2, r3}
   15848:	mvn	r4, r8
   1584c:	ldm	ip, {r0, r1, r2, r3}
   15850:	and	ip, r4, #67108864	; 0x4000000
   15854:	eor	ip, ip, r8
   15858:	str	ip, [sp, #64]	; 0x40
   1585c:	stm	lr, {r0, r1, r2, r3}
   15860:	add	r3, sp, #52	; 0x34
   15864:	mvn	r2, #0
   15868:	mov	r1, r7
   1586c:	mov	r0, r6
   15870:	bl	151ac <__assert_fail@plt+0x4154>
   15874:	ldr	r2, [sp, #100]	; 0x64
   15878:	ldr	r3, [r5]
   1587c:	cmp	r2, r3
   15880:	bne	1588c <__assert_fail@plt+0x4834>
   15884:	add	sp, sp, #104	; 0x68
   15888:	pop	{r4, r5, r6, r7, r8, pc}
   1588c:	bl	10e54 <__stack_chk_fail@plt>
   15890:	andeq	r8, r2, r8, lsl #30
   15894:	push	{r4, r5, r6, r7, r8, r9, lr}
   15898:	mov	r6, r1
   1589c:	ldr	lr, [pc, #132]	; 15928 <__assert_fail@plt+0x48d0>
   158a0:	mov	r5, r2
   158a4:	mov	r8, r0
   158a8:	mov	r9, r3
   158ac:	ldm	lr!, {r0, r1, r2, r3}
   158b0:	sub	sp, sp, #60	; 0x3c
   158b4:	add	ip, sp, #4
   158b8:	ldr	r4, [pc, #108]	; 1592c <__assert_fail@plt+0x48d4>
   158bc:	stmia	ip!, {r0, r1, r2, r3}
   158c0:	mov	r7, #10
   158c4:	ldm	lr!, {r0, r1, r2, r3}
   158c8:	cmp	r5, #0
   158cc:	cmpne	r6, #0
   158d0:	str	r7, [sp, #4]
   158d4:	stmia	ip!, {r0, r1, r2, r3}
   158d8:	ldm	lr, {r0, r1, r2, r3}
   158dc:	ldr	lr, [r4]
   158e0:	stm	ip, {r0, r1, r2, r3}
   158e4:	str	lr, [sp, #52]	; 0x34
   158e8:	beq	15924 <__assert_fail@plt+0x48cc>
   158ec:	add	r3, sp, #4
   158f0:	ldr	r2, [sp, #88]	; 0x58
   158f4:	mov	r1, r9
   158f8:	mov	r0, r8
   158fc:	str	r6, [sp, #44]	; 0x2c
   15900:	str	r5, [sp, #48]	; 0x30
   15904:	bl	151ac <__assert_fail@plt+0x4154>
   15908:	ldr	r2, [sp, #52]	; 0x34
   1590c:	ldr	r3, [r4]
   15910:	cmp	r2, r3
   15914:	bne	15920 <__assert_fail@plt+0x48c8>
   15918:	add	sp, sp, #60	; 0x3c
   1591c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15920:	bl	10e54 <__stack_chk_fail@plt>
   15924:	bl	1104c <abort@plt>
   15928:	andeq	r9, r2, r4, ror r2
   1592c:	andeq	r8, r2, r8, lsl #30
   15930:	push	{lr}		; (str lr, [sp, #-4]!)
   15934:	sub	sp, sp, #12
   15938:	mvn	ip, #0
   1593c:	str	ip, [sp]
   15940:	bl	15894 <__assert_fail@plt+0x483c>
   15944:	add	sp, sp, #12
   15948:	pop	{pc}		; (ldr pc, [sp], #4)
   1594c:	push	{lr}		; (str lr, [sp, #-4]!)
   15950:	sub	sp, sp, #12
   15954:	mvn	ip, #0
   15958:	mov	r3, r2
   1595c:	str	ip, [sp]
   15960:	mov	r2, r1
   15964:	mov	r1, r0
   15968:	mov	r0, #0
   1596c:	bl	15894 <__assert_fail@plt+0x483c>
   15970:	add	sp, sp, #12
   15974:	pop	{pc}		; (ldr pc, [sp], #4)
   15978:	push	{lr}		; (str lr, [sp, #-4]!)
   1597c:	sub	sp, sp, #12
   15980:	str	r3, [sp]
   15984:	mov	r3, r2
   15988:	mov	r2, r1
   1598c:	mov	r1, r0
   15990:	mov	r0, #0
   15994:	bl	15894 <__assert_fail@plt+0x483c>
   15998:	add	sp, sp, #12
   1599c:	pop	{pc}		; (ldr pc, [sp], #4)
   159a0:	ldr	r3, [pc]	; 159a8 <__assert_fail@plt+0x4950>
   159a4:	b	151ac <__assert_fail@plt+0x4154>
   159a8:	andeq	r9, r2, r0, lsl r1
   159ac:	mov	r2, r1
   159b0:	ldr	r3, [pc, #8]	; 159c0 <__assert_fail@plt+0x4968>
   159b4:	mov	r1, r0
   159b8:	mov	r0, #0
   159bc:	b	151ac <__assert_fail@plt+0x4154>
   159c0:	andeq	r9, r2, r0, lsl r1
   159c4:	ldr	r3, [pc, #4]	; 159d0 <__assert_fail@plt+0x4978>
   159c8:	mvn	r2, #0
   159cc:	b	151ac <__assert_fail@plt+0x4154>
   159d0:	andeq	r9, r2, r0, lsl r1
   159d4:	mov	r1, r0
   159d8:	ldr	r3, [pc, #8]	; 159e8 <__assert_fail@plt+0x4990>
   159dc:	mvn	r2, #0
   159e0:	mov	r0, #0
   159e4:	b	151ac <__assert_fail@plt+0x4154>
   159e8:	andeq	r9, r2, r0, lsl r1
   159ec:	push	{r4, r5, r6, lr}
   159f0:	mov	r2, r1
   159f4:	mov	r4, r1
   159f8:	mov	r1, #0
   159fc:	mov	r5, r0
   15a00:	bl	10fc8 <memchr@plt>
   15a04:	cmp	r0, #0
   15a08:	subne	r0, r0, r5
   15a0c:	addne	r0, r0, #1
   15a10:	moveq	r0, r4
   15a14:	pop	{r4, r5, r6, pc}
   15a18:	push	{lr}		; (str lr, [sp, #-4]!)
   15a1c:	mov	r3, r0
   15a20:	ldrb	r0, [r0]
   15a24:	ldrb	r2, [r1]
   15a28:	cmp	r0, #45	; 0x2d
   15a2c:	beq	15acc <__assert_fail@plt+0x4a74>
   15a30:	cmp	r2, #45	; 0x2d
   15a34:	beq	15b08 <__assert_fail@plt+0x4ab0>
   15a38:	cmp	r0, #48	; 0x30
   15a3c:	beq	15bd8 <__assert_fail@plt+0x4b80>
   15a40:	cmp	r2, #48	; 0x30
   15a44:	beq	15bd0 <__assert_fail@plt+0x4b78>
   15a48:	cmp	r2, r0
   15a4c:	sub	ip, r0, #48	; 0x30
   15a50:	bne	15a70 <__assert_fail@plt+0x4a18>
   15a54:	cmp	ip, #9
   15a58:	bhi	15bf4 <__assert_fail@plt+0x4b9c>
   15a5c:	ldrb	r0, [r3, #1]!
   15a60:	ldrb	r2, [r1, #1]!
   15a64:	sub	ip, r0, #48	; 0x30
   15a68:	cmp	r0, r2
   15a6c:	beq	15a54 <__assert_fail@plt+0x49fc>
   15a70:	cmp	ip, #9
   15a74:	sub	r0, r0, r2
   15a78:	bhi	15bf8 <__assert_fail@plt+0x4ba0>
   15a7c:	mov	lr, #0
   15a80:	ldrb	ip, [r3, #1]!
   15a84:	add	lr, lr, #1
   15a88:	sub	ip, ip, #48	; 0x30
   15a8c:	cmp	ip, #9
   15a90:	bls	15a80 <__assert_fail@plt+0x4a28>
   15a94:	sub	r3, r2, #48	; 0x30
   15a98:	cmp	r3, #9
   15a9c:	bhi	15c10 <__assert_fail@plt+0x4bb8>
   15aa0:	mov	r2, #0
   15aa4:	ldrb	r3, [r1, #1]!
   15aa8:	add	r2, r2, #1
   15aac:	sub	r3, r3, #48	; 0x30
   15ab0:	cmp	r3, #9
   15ab4:	bls	15aa4 <__assert_fail@plt+0x4a4c>
   15ab8:	cmp	lr, r2
   15abc:	beq	15be8 <__assert_fail@plt+0x4b90>
   15ac0:	bcs	15b20 <__assert_fail@plt+0x4ac8>
   15ac4:	mvn	r0, #0
   15ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   15acc:	ldrb	r0, [r3, #1]!
   15ad0:	cmp	r0, #48	; 0x30
   15ad4:	beq	15acc <__assert_fail@plt+0x4a74>
   15ad8:	cmp	r2, #45	; 0x2d
   15adc:	sub	ip, r0, #48	; 0x30
   15ae0:	beq	15b48 <__assert_fail@plt+0x4af0>
   15ae4:	cmp	ip, #9
   15ae8:	bls	15ac4 <__assert_fail@plt+0x4a6c>
   15aec:	cmp	r2, #48	; 0x30
   15af0:	beq	15be0 <__assert_fail@plt+0x4b88>
   15af4:	sub	r0, r2, #48	; 0x30
   15af8:	cmp	r0, #9
   15afc:	movhi	r0, #0
   15b00:	mvnls	r0, #0
   15b04:	pop	{pc}		; (ldr pc, [sp], #4)
   15b08:	ldrb	r2, [r1, #1]!
   15b0c:	cmp	r2, #48	; 0x30
   15b10:	beq	15b08 <__assert_fail@plt+0x4ab0>
   15b14:	sub	r2, r2, #48	; 0x30
   15b18:	cmp	r2, #9
   15b1c:	bhi	15b2c <__assert_fail@plt+0x4ad4>
   15b20:	mov	r0, #1
   15b24:	pop	{pc}		; (ldr pc, [sp], #4)
   15b28:	ldrb	r0, [r3, #1]!
   15b2c:	cmp	r0, #48	; 0x30
   15b30:	beq	15b28 <__assert_fail@plt+0x4ad0>
   15b34:	sub	r0, r0, #48	; 0x30
   15b38:	cmp	r0, #9
   15b3c:	movhi	r0, #0
   15b40:	movls	r0, #1
   15b44:	pop	{pc}		; (ldr pc, [sp], #4)
   15b48:	ldrb	r2, [r1, #1]!
   15b4c:	cmp	r2, #48	; 0x30
   15b50:	beq	15b48 <__assert_fail@plt+0x4af0>
   15b54:	cmp	r0, r2
   15b58:	bne	15b78 <__assert_fail@plt+0x4b20>
   15b5c:	cmp	ip, #9
   15b60:	bhi	15c1c <__assert_fail@plt+0x4bc4>
   15b64:	ldrb	r0, [r3, #1]!
   15b68:	ldrb	r2, [r1, #1]!
   15b6c:	sub	ip, r0, #48	; 0x30
   15b70:	cmp	r0, r2
   15b74:	beq	15b5c <__assert_fail@plt+0x4b04>
   15b78:	cmp	ip, #9
   15b7c:	sub	r0, r2, r0
   15b80:	bhi	15c20 <__assert_fail@plt+0x4bc8>
   15b84:	mov	lr, #0
   15b88:	ldrb	ip, [r3, #1]!
   15b8c:	add	lr, lr, #1
   15b90:	sub	ip, ip, #48	; 0x30
   15b94:	cmp	ip, #9
   15b98:	bls	15b88 <__assert_fail@plt+0x4b30>
   15b9c:	sub	r2, r2, #48	; 0x30
   15ba0:	cmp	r2, #9
   15ba4:	bhi	15c34 <__assert_fail@plt+0x4bdc>
   15ba8:	mov	r2, #0
   15bac:	ldrb	r3, [r1, #1]!
   15bb0:	add	r2, r2, #1
   15bb4:	sub	r3, r3, #48	; 0x30
   15bb8:	cmp	r3, #9
   15bbc:	bls	15bac <__assert_fail@plt+0x4b54>
   15bc0:	cmp	lr, r2
   15bc4:	beq	15be8 <__assert_fail@plt+0x4b90>
   15bc8:	bcc	15b20 <__assert_fail@plt+0x4ac8>
   15bcc:	b	15ac4 <__assert_fail@plt+0x4a6c>
   15bd0:	ldrb	r2, [r1, #1]!
   15bd4:	b	15a40 <__assert_fail@plt+0x49e8>
   15bd8:	ldrb	r0, [r3, #1]!
   15bdc:	b	15a38 <__assert_fail@plt+0x49e0>
   15be0:	ldrb	r2, [r1, #1]!
   15be4:	b	15aec <__assert_fail@plt+0x4a94>
   15be8:	cmp	lr, #0
   15bec:	moveq	r0, #0
   15bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   15bf4:	sub	r0, r0, r2
   15bf8:	sub	r3, r2, #48	; 0x30
   15bfc:	cmp	r3, #9
   15c00:	movls	lr, #0
   15c04:	bls	15aa0 <__assert_fail@plt+0x4a48>
   15c08:	mov	r0, #0
   15c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c10:	adds	r0, lr, #0
   15c14:	movne	r0, #1
   15c18:	pop	{pc}		; (ldr pc, [sp], #4)
   15c1c:	sub	r0, r2, r0
   15c20:	sub	r2, r2, #48	; 0x30
   15c24:	cmp	r2, #9
   15c28:	movls	lr, #0
   15c2c:	bls	15ba8 <__assert_fail@plt+0x4b50>
   15c30:	b	15c08 <__assert_fail@plt+0x4bb0>
   15c34:	adds	r0, lr, #0
   15c38:	movne	r0, #1
   15c3c:	rsb	r0, r0, #0
   15c40:	pop	{pc}		; (ldr pc, [sp], #4)
   15c44:	push	{r4, r5, r6, lr}
   15c48:	sub	sp, sp, #32
   15c4c:	cmp	r1, #0
   15c50:	mov	r5, r0
   15c54:	ldr	r4, [sp, #48]	; 0x30
   15c58:	ldr	r6, [sp, #52]	; 0x34
   15c5c:	beq	15cec <__assert_fail@plt+0x4c94>
   15c60:	strd	r2, [sp]
   15c64:	mov	r3, r1
   15c68:	ldr	r2, [pc, #828]	; 15fac <__assert_fail@plt+0x4f54>
   15c6c:	mov	r1, #1
   15c70:	bl	10fbc <__fprintf_chk@plt>
   15c74:	mov	r2, #5
   15c78:	ldr	r1, [pc, #816]	; 15fb0 <__assert_fail@plt+0x4f58>
   15c7c:	mov	r0, #0
   15c80:	bl	10e48 <dcgettext@plt>
   15c84:	ldr	r3, [pc, #808]	; 15fb4 <__assert_fail@plt+0x4f5c>
   15c88:	ldr	r2, [pc, #808]	; 15fb8 <__assert_fail@plt+0x4f60>
   15c8c:	str	r3, [sp]
   15c90:	mov	r1, #1
   15c94:	mov	r3, r0
   15c98:	mov	r0, r5
   15c9c:	bl	10fbc <__fprintf_chk@plt>
   15ca0:	ldr	r1, [pc, #788]	; 15fbc <__assert_fail@plt+0x4f64>
   15ca4:	mov	r2, #5
   15ca8:	mov	r0, #0
   15cac:	bl	10e48 <dcgettext@plt>
   15cb0:	mov	r1, r5
   15cb4:	bl	10dc4 <fputs_unlocked@plt>
   15cb8:	cmp	r6, #9
   15cbc:	ldrls	pc, [pc, r6, lsl #2]
   15cc0:	b	15f9c <__assert_fail@plt+0x4f44>
   15cc4:	andeq	r5, r1, r8, lsr #31
   15cc8:	andeq	r5, r1, r0, ror sp
   15ccc:	muleq	r1, ip, sp
   15cd0:	ldrdeq	r5, [r1], -r0
   15cd4:	andeq	r5, r1, ip, lsl #28
   15cd8:	andeq	r5, r1, ip, asr #28
   15cdc:	muleq	r1, r4, lr
   15ce0:	andeq	r5, r1, r4, ror #29
   15ce4:	andeq	r5, r1, ip, lsr pc
   15ce8:	andeq	r5, r1, r4, lsl #26
   15cec:	str	r3, [sp]
   15cf0:	mov	r1, #1
   15cf4:	mov	r3, r2
   15cf8:	ldr	r2, [pc, #704]	; 15fc0 <__assert_fail@plt+0x4f68>
   15cfc:	bl	10fbc <__fprintf_chk@plt>
   15d00:	b	15c74 <__assert_fail@plt+0x4c1c>
   15d04:	ldr	r1, [pc, #696]	; 15fc4 <__assert_fail@plt+0x4f6c>
   15d08:	mov	r2, #5
   15d0c:	mov	r0, #0
   15d10:	bl	10e48 <dcgettext@plt>
   15d14:	ldr	r2, [r4, #32]
   15d18:	ldr	r3, [r4, #28]
   15d1c:	ldr	r1, [r4, #24]
   15d20:	str	r2, [sp, #28]
   15d24:	ldr	r2, [r4, #20]
   15d28:	str	r3, [sp, #24]
   15d2c:	ldr	r3, [r4, #16]
   15d30:	str	r1, [sp, #20]
   15d34:	ldr	r1, [r4, #12]
   15d38:	str	r2, [sp, #16]
   15d3c:	ldr	r2, [r4, #8]
   15d40:	str	r3, [sp, #12]
   15d44:	ldr	r3, [r4, #4]
   15d48:	str	r1, [sp, #8]
   15d4c:	str	r2, [sp, #4]
   15d50:	str	r3, [sp]
   15d54:	mov	r1, #1
   15d58:	ldr	r3, [r4]
   15d5c:	mov	r2, r0
   15d60:	mov	r0, r5
   15d64:	bl	10fbc <__fprintf_chk@plt>
   15d68:	add	sp, sp, #32
   15d6c:	pop	{r4, r5, r6, pc}
   15d70:	mov	r2, #5
   15d74:	ldr	r1, [pc, #588]	; 15fc8 <__assert_fail@plt+0x4f70>
   15d78:	mov	r0, #0
   15d7c:	bl	10e48 <dcgettext@plt>
   15d80:	ldr	r3, [r4]
   15d84:	mov	r1, #1
   15d88:	mov	r2, r0
   15d8c:	mov	r0, r5
   15d90:	add	sp, sp, #32
   15d94:	pop	{r4, r5, r6, lr}
   15d98:	b	10fbc <__fprintf_chk@plt>
   15d9c:	mov	r2, #5
   15da0:	ldr	r1, [pc, #548]	; 15fcc <__assert_fail@plt+0x4f74>
   15da4:	mov	r0, #0
   15da8:	bl	10e48 <dcgettext@plt>
   15dac:	ldr	r2, [r4, #4]
   15db0:	ldr	r3, [r4]
   15db4:	mov	r1, #1
   15db8:	str	r2, [sp, #48]	; 0x30
   15dbc:	mov	r2, r0
   15dc0:	mov	r0, r5
   15dc4:	add	sp, sp, #32
   15dc8:	pop	{r4, r5, r6, lr}
   15dcc:	b	10fbc <__fprintf_chk@plt>
   15dd0:	mov	r2, #5
   15dd4:	ldr	r1, [pc, #500]	; 15fd0 <__assert_fail@plt+0x4f78>
   15dd8:	mov	r0, #0
   15ddc:	bl	10e48 <dcgettext@plt>
   15de0:	ldr	r2, [r4, #8]
   15de4:	ldr	r3, [r4, #4]
   15de8:	mov	r1, #1
   15dec:	str	r2, [sp, #52]	; 0x34
   15df0:	str	r3, [sp, #48]	; 0x30
   15df4:	ldr	r3, [r4]
   15df8:	mov	r2, r0
   15dfc:	mov	r0, r5
   15e00:	add	sp, sp, #32
   15e04:	pop	{r4, r5, r6, lr}
   15e08:	b	10fbc <__fprintf_chk@plt>
   15e0c:	mov	r2, #5
   15e10:	ldr	r1, [pc, #444]	; 15fd4 <__assert_fail@plt+0x4f7c>
   15e14:	mov	r0, #0
   15e18:	bl	10e48 <dcgettext@plt>
   15e1c:	ldr	r1, [r4, #12]
   15e20:	ldr	r2, [r4, #8]
   15e24:	ldr	r3, [r4, #4]
   15e28:	str	r1, [sp, #8]
   15e2c:	str	r2, [sp, #4]
   15e30:	str	r3, [sp]
   15e34:	mov	r1, #1
   15e38:	ldr	r3, [r4]
   15e3c:	mov	r2, r0
   15e40:	mov	r0, r5
   15e44:	bl	10fbc <__fprintf_chk@plt>
   15e48:	b	15d68 <__assert_fail@plt+0x4d10>
   15e4c:	mov	r2, #5
   15e50:	ldr	r1, [pc, #384]	; 15fd8 <__assert_fail@plt+0x4f80>
   15e54:	mov	r0, #0
   15e58:	bl	10e48 <dcgettext@plt>
   15e5c:	ldr	r3, [r4, #16]
   15e60:	ldr	r1, [r4, #12]
   15e64:	ldr	r2, [r4, #8]
   15e68:	str	r3, [sp, #12]
   15e6c:	ldr	r3, [r4, #4]
   15e70:	str	r1, [sp, #8]
   15e74:	str	r2, [sp, #4]
   15e78:	str	r3, [sp]
   15e7c:	mov	r1, #1
   15e80:	ldr	r3, [r4]
   15e84:	mov	r2, r0
   15e88:	mov	r0, r5
   15e8c:	bl	10fbc <__fprintf_chk@plt>
   15e90:	b	15d68 <__assert_fail@plt+0x4d10>
   15e94:	mov	r2, #5
   15e98:	ldr	r1, [pc, #316]	; 15fdc <__assert_fail@plt+0x4f84>
   15e9c:	mov	r0, #0
   15ea0:	bl	10e48 <dcgettext@plt>
   15ea4:	ldr	r2, [r4, #20]
   15ea8:	ldr	r3, [r4, #16]
   15eac:	ldr	r1, [r4, #12]
   15eb0:	str	r2, [sp, #16]
   15eb4:	ldr	r2, [r4, #8]
   15eb8:	str	r3, [sp, #12]
   15ebc:	ldr	r3, [r4, #4]
   15ec0:	str	r1, [sp, #8]
   15ec4:	str	r2, [sp, #4]
   15ec8:	str	r3, [sp]
   15ecc:	mov	r1, #1
   15ed0:	ldr	r3, [r4]
   15ed4:	mov	r2, r0
   15ed8:	mov	r0, r5
   15edc:	bl	10fbc <__fprintf_chk@plt>
   15ee0:	b	15d68 <__assert_fail@plt+0x4d10>
   15ee4:	mov	r2, #5
   15ee8:	ldr	r1, [pc, #240]	; 15fe0 <__assert_fail@plt+0x4f88>
   15eec:	mov	r0, #0
   15ef0:	bl	10e48 <dcgettext@plt>
   15ef4:	ldr	r1, [r4, #24]
   15ef8:	ldr	r2, [r4, #20]
   15efc:	ldr	r3, [r4, #16]
   15f00:	str	r1, [sp, #20]
   15f04:	ldr	r1, [r4, #12]
   15f08:	str	r2, [sp, #16]
   15f0c:	ldr	r2, [r4, #8]
   15f10:	str	r3, [sp, #12]
   15f14:	ldr	r3, [r4, #4]
   15f18:	str	r1, [sp, #8]
   15f1c:	str	r2, [sp, #4]
   15f20:	str	r3, [sp]
   15f24:	mov	r1, #1
   15f28:	ldr	r3, [r4]
   15f2c:	mov	r2, r0
   15f30:	mov	r0, r5
   15f34:	bl	10fbc <__fprintf_chk@plt>
   15f38:	b	15d68 <__assert_fail@plt+0x4d10>
   15f3c:	mov	r2, #5
   15f40:	ldr	r1, [pc, #156]	; 15fe4 <__assert_fail@plt+0x4f8c>
   15f44:	mov	r0, #0
   15f48:	bl	10e48 <dcgettext@plt>
   15f4c:	ldr	r3, [r4, #28]
   15f50:	ldr	r1, [r4, #24]
   15f54:	ldr	r2, [r4, #20]
   15f58:	str	r3, [sp, #24]
   15f5c:	ldr	r3, [r4, #16]
   15f60:	str	r1, [sp, #20]
   15f64:	ldr	r1, [r4, #12]
   15f68:	str	r2, [sp, #16]
   15f6c:	ldr	r2, [r4, #8]
   15f70:	str	r3, [sp, #12]
   15f74:	ldr	r3, [r4, #4]
   15f78:	str	r1, [sp, #8]
   15f7c:	str	r2, [sp, #4]
   15f80:	str	r3, [sp]
   15f84:	mov	r1, #1
   15f88:	ldr	r3, [r4]
   15f8c:	mov	r2, r0
   15f90:	mov	r0, r5
   15f94:	bl	10fbc <__fprintf_chk@plt>
   15f98:	b	15d68 <__assert_fail@plt+0x4d10>
   15f9c:	mov	r2, #5
   15fa0:	ldr	r1, [pc, #64]	; 15fe8 <__assert_fail@plt+0x4f90>
   15fa4:	b	15d0c <__assert_fail@plt+0x4cb4>
   15fa8:	bl	1104c <abort@plt>
   15fac:	andeq	r8, r1, r8, lsl #9
   15fb0:	muleq	r1, ip, r4
   15fb4:	andeq	r0, r0, r2, ror #15
   15fb8:	andeq	r8, r1, r0, ror r7
   15fbc:	andeq	r8, r1, r0, lsr #9
   15fc0:	muleq	r1, r4, r4
   15fc4:	andeq	r8, r1, r8, ror r6
   15fc8:	andeq	r8, r1, ip, ror #10
   15fcc:	andeq	r8, r1, ip, ror r5
   15fd0:	muleq	r1, r4, r5
   15fd4:			; <UNDEFINED> instruction: 0x000185b0
   15fd8:	ldrdeq	r8, [r1], -r0
   15fdc:	strdeq	r8, [r1], -r4
   15fe0:	andeq	r8, r1, ip, lsl r6
   15fe4:	andeq	r8, r1, r8, asr #12
   15fe8:	andeq	r8, r1, ip, lsr #13
   15fec:	push	{r4, r5, lr}
   15ff0:	sub	sp, sp, #12
   15ff4:	ldr	r5, [sp, #24]
   15ff8:	ldr	ip, [r5]
   15ffc:	cmp	ip, #0
   16000:	beq	1601c <__assert_fail@plt+0x4fc4>
   16004:	mov	lr, r5
   16008:	mov	ip, #0
   1600c:	ldr	r4, [lr, #4]!
   16010:	add	ip, ip, #1
   16014:	cmp	r4, #0
   16018:	bne	1600c <__assert_fail@plt+0x4fb4>
   1601c:	stm	sp, {r5, ip}
   16020:	bl	15c44 <__assert_fail@plt+0x4bec>
   16024:	add	sp, sp, #12
   16028:	pop	{r4, r5, pc}
   1602c:	push	{r4, r5, r6, lr}
   16030:	sub	sp, sp, #56	; 0x38
   16034:	ldr	r6, [pc, #88]	; 16094 <__assert_fail@plt+0x503c>
   16038:	ldr	r5, [sp, #72]	; 0x48
   1603c:	add	r4, sp, #8
   16040:	ldr	ip, [r6]
   16044:	str	ip, [sp, #52]	; 0x34
   16048:	mov	ip, #0
   1604c:	ldr	lr, [r5], #4
   16050:	cmp	lr, #0
   16054:	str	lr, [r4, #4]!
   16058:	beq	16068 <__assert_fail@plt+0x5010>
   1605c:	add	ip, ip, #1
   16060:	cmp	ip, #10
   16064:	bne	1604c <__assert_fail@plt+0x4ff4>
   16068:	add	lr, sp, #12
   1606c:	str	ip, [sp, #4]
   16070:	str	lr, [sp]
   16074:	bl	15c44 <__assert_fail@plt+0x4bec>
   16078:	ldr	r2, [sp, #52]	; 0x34
   1607c:	ldr	r3, [r6]
   16080:	cmp	r2, r3
   16084:	bne	16090 <__assert_fail@plt+0x5038>
   16088:	add	sp, sp, #56	; 0x38
   1608c:	pop	{r4, r5, r6, pc}
   16090:	bl	10e54 <__stack_chk_fail@plt>
   16094:	andeq	r8, r2, r8, lsl #30
   16098:	push	{r3}		; (str r3, [sp, #-4]!)
   1609c:	mov	ip, #0
   160a0:	push	{r4, r5, r6, lr}
   160a4:	sub	sp, sp, #60	; 0x3c
   160a8:	ldr	r6, [pc, #100]	; 16114 <__assert_fail@plt+0x50bc>
   160ac:	add	r5, sp, #8
   160b0:	add	r4, sp, #80	; 0x50
   160b4:	ldr	r3, [r6]
   160b8:	str	r4, [sp, #8]
   160bc:	str	r3, [sp, #52]	; 0x34
   160c0:	ldr	r3, [sp, #76]	; 0x4c
   160c4:	ldr	lr, [r4], #4
   160c8:	cmp	lr, #0
   160cc:	str	lr, [r5, #4]!
   160d0:	beq	160e0 <__assert_fail@plt+0x5088>
   160d4:	add	ip, ip, #1
   160d8:	cmp	ip, #10
   160dc:	bne	160c4 <__assert_fail@plt+0x506c>
   160e0:	add	lr, sp, #12
   160e4:	str	ip, [sp, #4]
   160e8:	str	lr, [sp]
   160ec:	bl	15c44 <__assert_fail@plt+0x4bec>
   160f0:	ldr	r2, [sp, #52]	; 0x34
   160f4:	ldr	r3, [r6]
   160f8:	cmp	r2, r3
   160fc:	bne	16110 <__assert_fail@plt+0x50b8>
   16100:	add	sp, sp, #60	; 0x3c
   16104:	pop	{r4, r5, r6, lr}
   16108:	add	sp, sp, #4
   1610c:	bx	lr
   16110:	bl	10e54 <__stack_chk_fail@plt>
   16114:	andeq	r8, r2, r8, lsl #30
   16118:	push	{r4, lr}
   1611c:	mov	r2, #5
   16120:	ldr	r1, [pc, #88]	; 16180 <__assert_fail@plt+0x5128>
   16124:	mov	r0, #0
   16128:	bl	10e48 <dcgettext@plt>
   1612c:	ldr	r2, [pc, #80]	; 16184 <__assert_fail@plt+0x512c>
   16130:	mov	r1, r0
   16134:	mov	r0, #1
   16138:	bl	10fa4 <__printf_chk@plt>
   1613c:	mov	r2, #5
   16140:	ldr	r1, [pc, #64]	; 16188 <__assert_fail@plt+0x5130>
   16144:	mov	r0, #0
   16148:	bl	10e48 <dcgettext@plt>
   1614c:	ldr	r3, [pc, #56]	; 1618c <__assert_fail@plt+0x5134>
   16150:	ldr	r2, [pc, #56]	; 16190 <__assert_fail@plt+0x5138>
   16154:	mov	r1, r0
   16158:	mov	r0, #1
   1615c:	bl	10fa4 <__printf_chk@plt>
   16160:	ldr	r1, [pc, #44]	; 16194 <__assert_fail@plt+0x513c>
   16164:	mov	r2, #5
   16168:	mov	r0, #0
   1616c:	bl	10e48 <dcgettext@plt>
   16170:	ldr	r3, [pc, #32]	; 16198 <__assert_fail@plt+0x5140>
   16174:	pop	{r4, lr}
   16178:	ldr	r1, [r3]
   1617c:	b	10dc4 <fputs_unlocked@plt>
   16180:	andeq	r8, r1, r8, ror #13
   16184:	andeq	r8, r1, r0, lsl #14
   16188:	andeq	r8, r1, r8, lsl r7
   1618c:	andeq	r7, r1, r8, lsr #31
   16190:	ldrdeq	r7, [r1], -r0
   16194:	andeq	r8, r1, ip, lsr #14
   16198:	andeq	r9, r2, r8, asr r1
   1619c:	push	{r4, lr}
   161a0:	mov	r4, r0
   161a4:	bl	10efc <malloc@plt>
   161a8:	adds	r4, r4, #0
   161ac:	movne	r4, #1
   161b0:	cmp	r0, #0
   161b4:	movne	r4, #0
   161b8:	cmp	r4, #0
   161bc:	popeq	{r4, pc}
   161c0:	bl	163e4 <__assert_fail@plt+0x538c>
   161c4:	push	{r4, r5, r6, lr}
   161c8:	umull	r4, r5, r0, r1
   161cc:	adds	r3, r5, #0
   161d0:	movne	r3, #1
   161d4:	cmp	r4, #0
   161d8:	blt	161f0 <__assert_fail@plt+0x5198>
   161dc:	cmp	r3, #0
   161e0:	bne	161f0 <__assert_fail@plt+0x5198>
   161e4:	mul	r0, r1, r0
   161e8:	pop	{r4, r5, r6, lr}
   161ec:	b	1619c <__assert_fail@plt+0x5144>
   161f0:	bl	163e4 <__assert_fail@plt+0x538c>
   161f4:	b	1619c <__assert_fail@plt+0x5144>
   161f8:	adds	r3, r0, #0
   161fc:	movne	r3, #1
   16200:	cmp	r1, #0
   16204:	movne	r3, #0
   16208:	cmp	r3, #0
   1620c:	push	{r4, lr}
   16210:	bne	16238 <__assert_fail@plt+0x51e0>
   16214:	mov	r4, r1
   16218:	bl	10e60 <realloc@plt>
   1621c:	adds	r4, r4, #0
   16220:	movne	r4, #1
   16224:	cmp	r0, #0
   16228:	movne	r4, #0
   1622c:	cmp	r4, #0
   16230:	popeq	{r4, pc}
   16234:	bl	163e4 <__assert_fail@plt+0x538c>
   16238:	bl	10e0c <free@plt>
   1623c:	mov	r0, #0
   16240:	pop	{r4, pc}
   16244:	push	{r4, r5, r6, lr}
   16248:	umull	r4, r5, r1, r2
   1624c:	adds	r3, r5, #0
   16250:	movne	r3, #1
   16254:	cmp	r4, #0
   16258:	blt	16270 <__assert_fail@plt+0x5218>
   1625c:	cmp	r3, #0
   16260:	bne	16270 <__assert_fail@plt+0x5218>
   16264:	mul	r1, r2, r1
   16268:	pop	{r4, r5, r6, lr}
   1626c:	b	161f8 <__assert_fail@plt+0x51a0>
   16270:	bl	163e4 <__assert_fail@plt+0x538c>
   16274:	push	{r4, r5, r6, r7, r8, lr}
   16278:	subs	r7, r0, #0
   1627c:	mov	r6, r1
   16280:	mov	r5, r2
   16284:	ldr	r4, [r1]
   16288:	beq	162bc <__assert_fail@plt+0x5264>
   1628c:	mov	r1, r2
   16290:	ldr	r0, [pc, #104]	; 16300 <__assert_fail@plt+0x52a8>
   16294:	bl	1722c <__assert_fail@plt+0x61d4>
   16298:	cmp	r0, r4
   1629c:	bls	162e0 <__assert_fail@plt+0x5288>
   162a0:	add	r3, r4, #1
   162a4:	add	r4, r3, r4, lsr #1
   162a8:	str	r4, [r6]
   162ac:	mul	r1, r5, r4
   162b0:	mov	r0, r7
   162b4:	pop	{r4, r5, r6, r7, r8, lr}
   162b8:	b	161f8 <__assert_fail@plt+0x51a0>
   162bc:	cmp	r4, #0
   162c0:	beq	162e4 <__assert_fail@plt+0x528c>
   162c4:	umull	r0, r1, r4, r5
   162c8:	adds	r3, r1, #0
   162cc:	movne	r3, #1
   162d0:	cmp	r0, #0
   162d4:	blt	162e0 <__assert_fail@plt+0x5288>
   162d8:	cmp	r3, #0
   162dc:	beq	162a8 <__assert_fail@plt+0x5250>
   162e0:	bl	163e4 <__assert_fail@plt+0x538c>
   162e4:	mov	r1, r2
   162e8:	mov	r0, #64	; 0x40
   162ec:	bl	1722c <__assert_fail@plt+0x61d4>
   162f0:	cmp	r5, #64	; 0x40
   162f4:	movls	r4, r0
   162f8:	addhi	r4, r0, #1
   162fc:	b	162c4 <__assert_fail@plt+0x526c>
   16300:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   16304:	cmp	r0, #0
   16308:	ldr	r3, [r1]
   1630c:	beq	16330 <__assert_fail@plt+0x52d8>
   16310:	ldr	r2, [pc, #60]	; 16354 <__assert_fail@plt+0x52fc>
   16314:	cmp	r3, r2
   16318:	bhi	1634c <__assert_fail@plt+0x52f4>
   1631c:	add	r2, r3, #1
   16320:	add	r3, r2, r3, lsr #1
   16324:	str	r3, [r1]
   16328:	mov	r1, r3
   1632c:	b	161f8 <__assert_fail@plt+0x51a0>
   16330:	cmp	r3, #0
   16334:	bne	16348 <__assert_fail@plt+0x52f0>
   16338:	mov	r3, #64	; 0x40
   1633c:	str	r3, [r1]
   16340:	mov	r1, r3
   16344:	b	161f8 <__assert_fail@plt+0x51a0>
   16348:	bge	16324 <__assert_fail@plt+0x52cc>
   1634c:	push	{r4, lr}
   16350:	bl	163e4 <__assert_fail@plt+0x538c>
   16354:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   16358:	push	{r4, lr}
   1635c:	mov	r4, r0
   16360:	bl	1619c <__assert_fail@plt+0x5144>
   16364:	mov	r2, r4
   16368:	mov	r1, #0
   1636c:	pop	{r4, lr}
   16370:	b	10f98 <memset@plt>
   16374:	push	{r4, r5, r6, lr}
   16378:	umull	r4, r5, r0, r1
   1637c:	adds	r3, r5, #0
   16380:	movne	r3, #1
   16384:	cmp	r4, #0
   16388:	blt	163a0 <__assert_fail@plt+0x5348>
   1638c:	cmp	r3, #0
   16390:	bne	163a0 <__assert_fail@plt+0x5348>
   16394:	bl	10db8 <calloc@plt>
   16398:	cmp	r0, #0
   1639c:	popne	{r4, r5, r6, pc}
   163a0:	bl	163e4 <__assert_fail@plt+0x538c>
   163a4:	push	{r4, r5, r6, lr}
   163a8:	mov	r4, r1
   163ac:	mov	r5, r0
   163b0:	mov	r0, r1
   163b4:	bl	1619c <__assert_fail@plt+0x5144>
   163b8:	mov	r2, r4
   163bc:	mov	r1, r5
   163c0:	pop	{r4, r5, r6, lr}
   163c4:	b	10e24 <memcpy@plt>
   163c8:	push	{r4, lr}
   163cc:	mov	r4, r0
   163d0:	bl	10f5c <strlen@plt>
   163d4:	add	r1, r0, #1
   163d8:	mov	r0, r4
   163dc:	pop	{r4, lr}
   163e0:	b	163a4 <__assert_fail@plt+0x534c>
   163e4:	ldr	r3, [pc, #44]	; 16418 <__assert_fail@plt+0x53c0>
   163e8:	push	{r4, lr}
   163ec:	mov	r2, #5
   163f0:	ldr	r1, [pc, #36]	; 1641c <__assert_fail@plt+0x53c4>
   163f4:	mov	r0, #0
   163f8:	ldr	r4, [r3]
   163fc:	bl	10e48 <dcgettext@plt>
   16400:	ldr	r2, [pc, #24]	; 16420 <__assert_fail@plt+0x53c8>
   16404:	mov	r1, #0
   16408:	mov	r3, r0
   1640c:	mov	r0, r4
   16410:	bl	10ed8 <error@plt>
   16414:	bl	1104c <abort@plt>
   16418:	strdeq	r9, [r2], -ip
   1641c:	andeq	r8, r1, r0, lsr #15
   16420:	ldrdeq	r8, [r1], -r4
   16424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16428:	cmp	r2, #36	; 0x24
   1642c:	mov	r6, r2
   16430:	ldr	r2, [pc, #2760]	; 16f00 <__assert_fail@plt+0x5ea8>
   16434:	sub	sp, sp, #36	; 0x24
   16438:	ldr	r2, [r2]
   1643c:	ldr	r9, [sp, #72]	; 0x48
   16440:	str	r2, [sp, #28]
   16444:	bhi	16ee8 <__assert_fail@plt+0x5e90>
   16448:	cmp	r1, #0
   1644c:	mov	r5, r1
   16450:	mov	r8, r0
   16454:	addeq	r5, sp, #24
   16458:	mov	sl, r3
   1645c:	bl	10f80 <__errno_location@plt>
   16460:	mov	r4, #0
   16464:	mov	r2, r6
   16468:	mov	r3, r4
   1646c:	mov	r1, r5
   16470:	str	r4, [r0]
   16474:	mov	fp, r0
   16478:	mov	r0, r8
   1647c:	bl	1101c <__strtoll_internal@plt>
   16480:	ldr	r3, [r5]
   16484:	cmp	r3, r8
   16488:	str	r3, [sp, #8]
   1648c:	mov	r6, r0
   16490:	mov	r7, r1
   16494:	beq	164ec <__assert_fail@plt+0x5494>
   16498:	ldr	r4, [fp]
   1649c:	cmp	r4, #0
   164a0:	beq	164b0 <__assert_fail@plt+0x5458>
   164a4:	cmp	r4, #34	; 0x22
   164a8:	bne	165ec <__assert_fail@plt+0x5594>
   164ac:	mov	r4, #1
   164b0:	cmp	r9, #0
   164b4:	beq	164c8 <__assert_fail@plt+0x5470>
   164b8:	ldr	r3, [sp, #8]
   164bc:	ldrb	r8, [r3]
   164c0:	cmp	r8, #0
   164c4:	bne	166f4 <__assert_fail@plt+0x569c>
   164c8:	strd	r6, [sl]
   164cc:	ldr	r3, [pc, #2604]	; 16f00 <__assert_fail@plt+0x5ea8>
   164d0:	ldr	r2, [sp, #28]
   164d4:	mov	r0, r4
   164d8:	ldr	r3, [r3]
   164dc:	cmp	r2, r3
   164e0:	bne	16efc <__assert_fail@plt+0x5ea4>
   164e4:	add	sp, sp, #36	; 0x24
   164e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ec:	cmp	r9, r4
   164f0:	beq	165ec <__assert_fail@plt+0x5594>
   164f4:	ldrb	r8, [r8]
   164f8:	cmp	r8, r4
   164fc:	beq	165ec <__assert_fail@plt+0x5594>
   16500:	mov	r1, r8
   16504:	mov	r0, r9
   16508:	bl	10f68 <strchr@plt>
   1650c:	cmp	r0, r4
   16510:	movne	r6, #1
   16514:	movne	r7, #0
   16518:	beq	165ec <__assert_fail@plt+0x5594>
   1651c:	sub	fp, r8, #69	; 0x45
   16520:	cmp	fp, #47	; 0x2f
   16524:	ldrls	pc, [pc, fp, lsl #2]
   16528:	b	16714 <__assert_fail@plt+0x56bc>
   1652c:	strdeq	r6, [r1], -r4
   16530:	andeq	r6, r1, r4, lsl r7
   16534:	strdeq	r6, [r1], -r4
   16538:	andeq	r6, r1, r4, lsl r7
   1653c:	andeq	r6, r1, r4, lsl r7
   16540:	andeq	r6, r1, r4, lsl r7
   16544:	strdeq	r6, [r1], -r4
   16548:	andeq	r6, r1, r4, lsl r7
   1654c:	strdeq	r6, [r1], -r4
   16550:	andeq	r6, r1, r4, lsl r7
   16554:	andeq	r6, r1, r4, lsl r7
   16558:	strdeq	r6, [r1], -r4
   1655c:	andeq	r6, r1, r4, lsl r7
   16560:	andeq	r6, r1, r4, lsl r7
   16564:	andeq	r6, r1, r4, lsl r7
   16568:	strdeq	r6, [r1], -r4
   1656c:	andeq	r6, r1, r4, lsl r7
   16570:	andeq	r6, r1, r4, lsl r7
   16574:	andeq	r6, r1, r4, lsl r7
   16578:	andeq	r6, r1, r4, lsl r7
   1657c:	strdeq	r6, [r1], -r4
   16580:	strdeq	r6, [r1], -r4
   16584:	andeq	r6, r1, r4, lsl r7
   16588:	andeq	r6, r1, r4, lsl r7
   1658c:	andeq	r6, r1, r4, lsl r7
   16590:	andeq	r6, r1, r4, lsl r7
   16594:	andeq	r6, r1, r4, lsl r7
   16598:	andeq	r6, r1, r4, lsl r7
   1659c:	andeq	r6, r1, r4, lsl r7
   165a0:	andeq	r6, r1, r4, lsl r7
   165a4:	andeq	r6, r1, r4, lsl r7
   165a8:	andeq	r6, r1, r4, lsl r7
   165ac:	andeq	r6, r1, r4, lsl r7
   165b0:	andeq	r6, r1, r4, lsl r7
   165b4:	strdeq	r6, [r1], -r4
   165b8:	andeq	r6, r1, r4, lsl r7
   165bc:	andeq	r6, r1, r4, lsl r7
   165c0:	andeq	r6, r1, r4, lsl r7
   165c4:	strdeq	r6, [r1], -r4
   165c8:	andeq	r6, r1, r4, lsl r7
   165cc:	strdeq	r6, [r1], -r4
   165d0:	andeq	r6, r1, r4, lsl r7
   165d4:	andeq	r6, r1, r4, lsl r7
   165d8:	andeq	r6, r1, r4, lsl r7
   165dc:	andeq	r6, r1, r4, lsl r7
   165e0:	andeq	r6, r1, r4, lsl r7
   165e4:	andeq	r6, r1, r4, lsl r7
   165e8:	strdeq	r6, [r1], -r4
   165ec:	mov	r4, #4
   165f0:	b	164cc <__assert_fail@plt+0x5474>
   165f4:	mov	r0, r9
   165f8:	mov	r1, #48	; 0x30
   165fc:	bl	10f68 <strchr@plt>
   16600:	cmp	r0, #0
   16604:	beq	16714 <__assert_fail@plt+0x56bc>
   16608:	ldr	r3, [sp, #8]
   1660c:	ldrb	r3, [r3, #1]
   16610:	cmp	r3, #68	; 0x44
   16614:	beq	16ec0 <__assert_fail@plt+0x5e68>
   16618:	cmp	r3, #105	; 0x69
   1661c:	beq	16ecc <__assert_fail@plt+0x5e74>
   16620:	cmp	r3, #66	; 0x42
   16624:	beq	16ec0 <__assert_fail@plt+0x5e68>
   16628:	cmp	fp, #47	; 0x2f
   1662c:	ldrls	pc, [pc, fp, lsl #2]
   16630:	b	16708 <__assert_fail@plt+0x56b0>
   16634:	andeq	r6, r1, r0, lsl #28
   16638:	andeq	r6, r1, r8, lsl #14
   1663c:	ldrdeq	r6, [r1], -ip
   16640:	andeq	r6, r1, r8, lsl #14
   16644:	andeq	r6, r1, r8, lsl #14
   16648:	andeq	r6, r1, r8, lsl #14
   1664c:	andeq	r6, r1, r4, asr #27
   16650:	andeq	r6, r1, r8, lsl #14
   16654:	andeq	r6, r1, r8, lsr #27
   16658:	andeq	r6, r1, r8, lsl #14
   1665c:	andeq	r6, r1, r8, lsl #14
   16660:	andeq	r6, r1, r4, lsl #27
   16664:	andeq	r6, r1, r8, lsl #14
   16668:	andeq	r6, r1, r8, lsl #14
   1666c:	andeq	r6, r1, r8, lsl #14
   16670:	andeq	r6, r1, r0, ror #26
   16674:	andeq	r6, r1, r8, lsl #14
   16678:	andeq	r6, r1, r8, lsl #14
   1667c:	andeq	r6, r1, r8, lsl #14
   16680:	andeq	r6, r1, r8, lsl #14
   16684:	andeq	r6, r1, ip, lsr sp
   16688:	andeq	r6, r1, r8, lsl sp
   1668c:	andeq	r6, r1, r8, lsl #14
   16690:	andeq	r6, r1, r8, lsl #14
   16694:	andeq	r6, r1, r8, lsl #14
   16698:	andeq	r6, r1, r8, lsl #14
   1669c:	andeq	r6, r1, r8, lsl #14
   166a0:	andeq	r6, r1, r8, lsl #14
   166a4:	andeq	r6, r1, r8, lsl #14
   166a8:	ldrdeq	r6, [r1], -r0
   166ac:	andeq	r6, r1, r4, lsr #28
   166b0:	andeq	r6, r1, r8, lsl #14
   166b4:	andeq	r6, r1, r8, lsl #14
   166b8:	andeq	r6, r1, r8, lsl #14
   166bc:	ldrdeq	r6, [r1], -ip
   166c0:	andeq	r6, r1, r8, lsl #14
   166c4:	andeq	r6, r1, r8, lsl #14
   166c8:	andeq	r6, r1, r8, lsl #14
   166cc:	andeq	r6, r1, r4, asr #27
   166d0:	andeq	r6, r1, r8, lsl #14
   166d4:	andeq	r6, r1, r8, lsr #27
   166d8:	andeq	r6, r1, r8, lsl #14
   166dc:	andeq	r6, r1, r8, lsl #14
   166e0:	andeq	r6, r1, r8, lsl #14
   166e4:	andeq	r6, r1, r8, lsl #14
   166e8:	andeq	r6, r1, r8, lsl #14
   166ec:	andeq	r6, r1, r8, lsl #14
   166f0:	andeq	r6, r1, r0, ror #26
   166f4:	mov	r1, r8
   166f8:	mov	r0, r9
   166fc:	bl	10f68 <strchr@plt>
   16700:	cmp	r0, #0
   16704:	bne	1651c <__assert_fail@plt+0x54c4>
   16708:	strd	r6, [sl]
   1670c:	orr	r4, r4, #2
   16710:	b	164cc <__assert_fail@plt+0x5474>
   16714:	mov	fp, #1
   16718:	mov	r3, #1024	; 0x400
   1671c:	sub	r8, r8, #66	; 0x42
   16720:	cmp	r8, #53	; 0x35
   16724:	ldrls	pc, [pc, r8, lsl #2]
   16728:	b	16708 <__assert_fail@plt+0x56b0>
   1672c:	andeq	r6, r1, ip, lsl #18
   16730:	andeq	r6, r1, r8, lsl #14
   16734:	andeq	r6, r1, r8, lsl #14
   16738:	andeq	r6, r1, r4, lsl #25
   1673c:	andeq	r6, r1, r8, lsl #14
   16740:	andeq	r6, r1, r8, asr #21
   16744:	andeq	r6, r1, r8, lsl #14
   16748:	andeq	r6, r1, r8, lsl #14
   1674c:	andeq	r6, r1, r8, lsl #14
   16750:	andeq	r6, r1, ip, ror #20
   16754:	andeq	r6, r1, r8, lsl #14
   16758:	andeq	r6, r1, r4, lsl #16
   1675c:	andeq	r6, r1, r8, lsl #14
   16760:	andeq	r6, r1, r8, lsl #14
   16764:	andeq	r6, r1, r4, asr #18
   16768:	andeq	r6, r1, r8, lsl #14
   1676c:	andeq	r6, r1, r8, lsl #14
   16770:	andeq	r6, r1, r8, lsl #14
   16774:	andeq	r6, r1, ip, asr fp
   16778:	andeq	r6, r1, r8, lsl #14
   1677c:	andeq	r6, r1, r8, lsl #14
   16780:	andeq	r6, r1, r8, lsl #14
   16784:	andeq	r6, r1, r8, lsl #14
   16788:	ldrdeq	r6, [r1], -r8
   1678c:	strdeq	r6, [r1], -r0
   16790:	andeq	r6, r1, r8, lsl #14
   16794:	andeq	r6, r1, r8, lsl #14
   16798:	andeq	r6, r1, r8, lsl #14
   1679c:	andeq	r6, r1, r8, lsl #14
   167a0:	andeq	r6, r1, r8, lsl #14
   167a4:	andeq	r6, r1, r8, lsl #14
   167a8:	andeq	r6, r1, r8, lsl #14
   167ac:	ldrdeq	r6, [r1], -r4
   167b0:	muleq	r1, r0, r8
   167b4:	andeq	r6, r1, r8, lsl #14
   167b8:	andeq	r6, r1, r8, lsl #14
   167bc:	andeq	r6, r1, r8, lsl #14
   167c0:	andeq	r6, r1, r8, asr #21
   167c4:	andeq	r6, r1, r8, lsl #14
   167c8:	andeq	r6, r1, r8, lsl #14
   167cc:	andeq	r6, r1, r8, lsl #14
   167d0:	andeq	r6, r1, ip, ror #20
   167d4:	andeq	r6, r1, r8, lsl #14
   167d8:	andeq	r6, r1, r4, lsl #16
   167dc:	andeq	r6, r1, r8, lsl #14
   167e0:	andeq	r6, r1, r8, lsl #14
   167e4:	andeq	r6, r1, r8, lsl #14
   167e8:	andeq	r6, r1, r8, lsl #14
   167ec:	andeq	r6, r1, r8, lsl #14
   167f0:	andeq	r6, r1, r8, lsl #14
   167f4:	andeq	r6, r1, ip, asr fp
   167f8:	andeq	r6, r1, r8, lsl #14
   167fc:	andeq	r6, r1, r8, lsl #14
   16800:	andeq	r6, r1, ip, lsr #17
   16804:	asr	r9, r3, #31
   16808:	mov	r2, r3
   1680c:	mov	r8, r3
   16810:	mov	r0, #0
   16814:	mov	r3, r9
   16818:	mov	r1, #-2147483648	; 0x80000000
   1681c:	bl	17438 <__assert_fail@plt+0x63e0>
   16820:	strd	r0, [sp]
   16824:	ldrd	r2, [sp]
   16828:	cmp	r6, r2
   1682c:	sbcs	r3, r7, r3
   16830:	blt	16e40 <__assert_fail@plt+0x5de8>
   16834:	mov	r3, r9
   16838:	mov	r2, r8
   1683c:	mvn	r0, #0
   16840:	mvn	r1, #-2147483648	; 0x80000000
   16844:	bl	17438 <__assert_fail@plt+0x63e0>
   16848:	cmp	r0, r6
   1684c:	sbcs	r3, r1, r7
   16850:	blt	16e50 <__assert_fail@plt+0x5df8>
   16854:	mul	ip, r6, r9
   16858:	umull	r2, r3, r6, r8
   1685c:	mla	ip, r8, r7, ip
   16860:	ldrd	r6, [sp]
   16864:	add	r3, ip, r3
   16868:	cmp	r2, r6
   1686c:	sbcs	ip, r3, r7
   16870:	blt	16e40 <__assert_fail@plt+0x5de8>
   16874:	cmp	r0, r2
   16878:	sbcs	r1, r1, r3
   1687c:	blt	16e50 <__assert_fail@plt+0x5df8>
   16880:	mul	r1, r2, r9
   16884:	umull	r6, r7, r2, r8
   16888:	mla	r8, r8, r3, r1
   1688c:	add	r7, r8, r7
   16890:	ldr	r2, [sp, #8]
   16894:	add	r3, r2, fp
   16898:	str	r3, [r5]
   1689c:	ldrb	r3, [r2, fp]
   168a0:	cmp	r3, #0
   168a4:	orrne	r4, r4, #2
   168a8:	b	164c8 <__assert_fail@plt+0x5470>
   168ac:	cmp	r6, #0
   168b0:	sbcs	r3, r7, #-1073741824	; 0xc0000000
   168b4:	blt	16e40 <__assert_fail@plt+0x5de8>
   168b8:	cmp	r6, #0
   168bc:	sbcs	r3, r7, #1073741824	; 0x40000000
   168c0:	bge	16e50 <__assert_fail@plt+0x5df8>
   168c4:	adds	r6, r6, r6
   168c8:	adc	r7, r7, r7
   168cc:	b	16890 <__assert_fail@plt+0x5838>
   168d0:	mov	fp, #1
   168d4:	mov	r2, #0
   168d8:	ldr	r3, [pc, #1572]	; 16f04 <__assert_fail@plt+0x5eac>
   168dc:	cmp	r6, r2
   168e0:	sbcs	r3, r7, r3
   168e4:	blt	16e40 <__assert_fail@plt+0x5de8>
   168e8:	cmp	r6, #0
   168ec:	sbcs	r3, r7, #4194304	; 0x400000
   168f0:	bge	16e50 <__assert_fail@plt+0x5df8>
   168f4:	lsl	r3, r7, #9
   168f8:	orr	r3, r3, r6, lsr #23
   168fc:	lsl	r2, r6, #9
   16900:	mov	r6, r2
   16904:	mov	r7, r3
   16908:	b	16890 <__assert_fail@plt+0x5838>
   1690c:	mov	r2, #0
   16910:	ldr	r3, [pc, #1520]	; 16f08 <__assert_fail@plt+0x5eb0>
   16914:	cmp	r6, r2
   16918:	sbcs	r3, r7, r3
   1691c:	blt	16e40 <__assert_fail@plt+0x5de8>
   16920:	cmp	r6, #0
   16924:	sbcs	r3, r7, #2097152	; 0x200000
   16928:	bge	16e50 <__assert_fail@plt+0x5df8>
   1692c:	lsl	r3, r7, #10
   16930:	orr	r3, r3, r6, lsr #22
   16934:	lsl	r2, r6, #10
   16938:	mov	r6, r2
   1693c:	mov	r7, r3
   16940:	b	16890 <__assert_fail@plt+0x5838>
   16944:	asr	r1, r3, #31
   16948:	mov	r2, r3
   1694c:	mov	r3, r1
   16950:	mov	r0, #0
   16954:	mov	r1, #-2147483648	; 0x80000000
   16958:	strd	r2, [sp]
   1695c:	bl	17438 <__assert_fail@plt+0x63e0>
   16960:	str	fp, [sp, #12]
   16964:	strd	r4, [sp, #16]
   16968:	mov	r8, #5
   1696c:	ldrd	r4, [sp]
   16970:	mov	r9, #0
   16974:	str	sl, [sp]
   16978:	mov	fp, r1
   1697c:	mov	sl, r0
   16980:	b	169bc <__assert_fail@plt+0x5964>
   16984:	mov	r3, r5
   16988:	mov	r2, r4
   1698c:	mvn	r0, #0
   16990:	mvn	r1, #-2147483648	; 0x80000000
   16994:	bl	17438 <__assert_fail@plt+0x63e0>
   16998:	cmp	r0, r6
   1699c:	sbcs	r3, r1, r7
   169a0:	blt	16e90 <__assert_fail@plt+0x5e38>
   169a4:	mul	r3, r6, r5
   169a8:	mla	r3, r4, r7, r3
   169ac:	umull	r6, r7, r6, r4
   169b0:	add	r7, r3, r7
   169b4:	subs	r8, r8, #1
   169b8:	beq	16e2c <__assert_fail@plt+0x5dd4>
   169bc:	cmp	r6, sl
   169c0:	sbcs	r3, r7, fp
   169c4:	bge	16984 <__assert_fail@plt+0x592c>
   169c8:	mov	r9, #1
   169cc:	mov	r6, #0
   169d0:	mov	r7, #-2147483648	; 0x80000000
   169d4:	b	169b4 <__assert_fail@plt+0x595c>
   169d8:	asr	r1, r3, #31
   169dc:	mov	r2, r3
   169e0:	mov	r3, r1
   169e4:	mov	r0, #0
   169e8:	mov	r1, #-2147483648	; 0x80000000
   169ec:	strd	r2, [sp]
   169f0:	bl	17438 <__assert_fail@plt+0x63e0>
   169f4:	str	fp, [sp, #12]
   169f8:	strd	r4, [sp, #16]
   169fc:	mov	r8, #8
   16a00:	ldrd	r4, [sp]
   16a04:	mov	r9, #0
   16a08:	str	sl, [sp]
   16a0c:	mov	fp, r1
   16a10:	mov	sl, r0
   16a14:	b	16a50 <__assert_fail@plt+0x59f8>
   16a18:	mov	r3, r5
   16a1c:	mov	r2, r4
   16a20:	mvn	r0, #0
   16a24:	mvn	r1, #-2147483648	; 0x80000000
   16a28:	bl	17438 <__assert_fail@plt+0x63e0>
   16a2c:	cmp	r0, r6
   16a30:	sbcs	r3, r1, r7
   16a34:	blt	16e70 <__assert_fail@plt+0x5e18>
   16a38:	mul	r3, r6, r5
   16a3c:	mla	r3, r4, r7, r3
   16a40:	umull	r6, r7, r6, r4
   16a44:	add	r7, r3, r7
   16a48:	subs	r8, r8, #1
   16a4c:	beq	16e2c <__assert_fail@plt+0x5dd4>
   16a50:	cmp	r6, sl
   16a54:	sbcs	r3, r7, fp
   16a58:	bge	16a18 <__assert_fail@plt+0x59c0>
   16a5c:	mov	r9, #1
   16a60:	mov	r6, #0
   16a64:	mov	r7, #-2147483648	; 0x80000000
   16a68:	b	16a48 <__assert_fail@plt+0x59f0>
   16a6c:	asr	r9, r3, #31
   16a70:	mov	r8, r3
   16a74:	mov	r2, r3
   16a78:	mov	r0, #0
   16a7c:	mov	r3, r9
   16a80:	mov	r1, #-2147483648	; 0x80000000
   16a84:	bl	17438 <__assert_fail@plt+0x63e0>
   16a88:	cmp	r6, r0
   16a8c:	sbcs	r3, r7, r1
   16a90:	blt	16e40 <__assert_fail@plt+0x5de8>
   16a94:	mov	r3, r9
   16a98:	mov	r2, r8
   16a9c:	mvn	r0, #0
   16aa0:	mvn	r1, #-2147483648	; 0x80000000
   16aa4:	bl	17438 <__assert_fail@plt+0x63e0>
   16aa8:	cmp	r0, r6
   16aac:	sbcs	r3, r1, r7
   16ab0:	blt	16e50 <__assert_fail@plt+0x5df8>
   16ab4:	mul	r3, r6, r9
   16ab8:	mla	r3, r8, r7, r3
   16abc:	umull	r6, r7, r6, r8
   16ac0:	add	r7, r3, r7
   16ac4:	b	16890 <__assert_fail@plt+0x5838>
   16ac8:	asr	r1, r3, #31
   16acc:	mov	r2, r3
   16ad0:	mov	r3, r1
   16ad4:	mov	r0, #0
   16ad8:	mov	r1, #-2147483648	; 0x80000000
   16adc:	strd	r2, [sp]
   16ae0:	bl	17438 <__assert_fail@plt+0x63e0>
   16ae4:	str	fp, [sp, #12]
   16ae8:	strd	r4, [sp, #16]
   16aec:	mov	r8, #3
   16af0:	ldrd	r4, [sp]
   16af4:	mov	r9, #0
   16af8:	str	sl, [sp]
   16afc:	mov	fp, r1
   16b00:	mov	sl, r0
   16b04:	b	16b40 <__assert_fail@plt+0x5ae8>
   16b08:	mov	r3, r5
   16b0c:	mov	r2, r4
   16b10:	mvn	r0, #0
   16b14:	mvn	r1, #-2147483648	; 0x80000000
   16b18:	bl	17438 <__assert_fail@plt+0x63e0>
   16b1c:	cmp	r0, r6
   16b20:	sbcs	r3, r1, r7
   16b24:	blt	16e60 <__assert_fail@plt+0x5e08>
   16b28:	mul	r3, r6, r5
   16b2c:	mla	r3, r4, r7, r3
   16b30:	umull	r6, r7, r6, r4
   16b34:	add	r7, r3, r7
   16b38:	subs	r8, r8, #1
   16b3c:	beq	16e2c <__assert_fail@plt+0x5dd4>
   16b40:	cmp	r6, sl
   16b44:	sbcs	r3, r7, fp
   16b48:	bge	16b08 <__assert_fail@plt+0x5ab0>
   16b4c:	mov	r9, #1
   16b50:	mov	r6, #0
   16b54:	mov	r7, #-2147483648	; 0x80000000
   16b58:	b	16b38 <__assert_fail@plt+0x5ae0>
   16b5c:	asr	r1, r3, #31
   16b60:	mov	r2, r3
   16b64:	mov	r3, r1
   16b68:	mov	r0, #0
   16b6c:	mov	r1, #-2147483648	; 0x80000000
   16b70:	strd	r2, [sp]
   16b74:	bl	17438 <__assert_fail@plt+0x63e0>
   16b78:	str	fp, [sp, #12]
   16b7c:	strd	r4, [sp, #16]
   16b80:	mov	r8, #4
   16b84:	ldrd	r4, [sp]
   16b88:	mov	r9, #0
   16b8c:	str	sl, [sp]
   16b90:	mov	fp, r1
   16b94:	mov	sl, r0
   16b98:	b	16bd4 <__assert_fail@plt+0x5b7c>
   16b9c:	mov	r3, r5
   16ba0:	mov	r2, r4
   16ba4:	mvn	r0, #0
   16ba8:	mvn	r1, #-2147483648	; 0x80000000
   16bac:	bl	17438 <__assert_fail@plt+0x63e0>
   16bb0:	cmp	r0, r6
   16bb4:	sbcs	r3, r1, r7
   16bb8:	blt	16eb0 <__assert_fail@plt+0x5e58>
   16bbc:	mul	r3, r6, r5
   16bc0:	mla	r3, r4, r7, r3
   16bc4:	umull	r6, r7, r6, r4
   16bc8:	add	r7, r3, r7
   16bcc:	subs	r8, r8, #1
   16bd0:	beq	16e2c <__assert_fail@plt+0x5dd4>
   16bd4:	cmp	r6, sl
   16bd8:	sbcs	r3, r7, fp
   16bdc:	bge	16b9c <__assert_fail@plt+0x5b44>
   16be0:	mov	r9, #1
   16be4:	mov	r6, #0
   16be8:	mov	r7, #-2147483648	; 0x80000000
   16bec:	b	16bcc <__assert_fail@plt+0x5b74>
   16bf0:	asr	r1, r3, #31
   16bf4:	mov	r2, r3
   16bf8:	mov	r3, r1
   16bfc:	mov	r0, #0
   16c00:	mov	r1, #-2147483648	; 0x80000000
   16c04:	strd	r2, [sp]
   16c08:	bl	17438 <__assert_fail@plt+0x63e0>
   16c0c:	str	fp, [sp, #12]
   16c10:	strd	r4, [sp, #16]
   16c14:	mov	r8, #7
   16c18:	ldrd	r4, [sp]
   16c1c:	mov	r9, #0
   16c20:	str	sl, [sp]
   16c24:	mov	fp, r1
   16c28:	mov	sl, r0
   16c2c:	b	16c68 <__assert_fail@plt+0x5c10>
   16c30:	mov	r3, r5
   16c34:	mov	r2, r4
   16c38:	mvn	r0, #0
   16c3c:	mvn	r1, #-2147483648	; 0x80000000
   16c40:	bl	17438 <__assert_fail@plt+0x63e0>
   16c44:	cmp	r0, r6
   16c48:	sbcs	r3, r1, r7
   16c4c:	blt	16ea0 <__assert_fail@plt+0x5e48>
   16c50:	mul	r3, r6, r5
   16c54:	mla	r3, r4, r7, r3
   16c58:	umull	r6, r7, r6, r4
   16c5c:	add	r7, r3, r7
   16c60:	subs	r8, r8, #1
   16c64:	beq	16e2c <__assert_fail@plt+0x5dd4>
   16c68:	cmp	r6, sl
   16c6c:	sbcs	r3, r7, fp
   16c70:	bge	16c30 <__assert_fail@plt+0x5bd8>
   16c74:	mov	r9, #1
   16c78:	mov	r6, #0
   16c7c:	mov	r7, #-2147483648	; 0x80000000
   16c80:	b	16c60 <__assert_fail@plt+0x5c08>
   16c84:	asr	r1, r3, #31
   16c88:	mov	r2, r3
   16c8c:	mov	r3, r1
   16c90:	mov	r0, #0
   16c94:	mov	r1, #-2147483648	; 0x80000000
   16c98:	strd	r2, [sp]
   16c9c:	bl	17438 <__assert_fail@plt+0x63e0>
   16ca0:	str	fp, [sp, #12]
   16ca4:	strd	r4, [sp, #16]
   16ca8:	mov	r8, #6
   16cac:	ldrd	r4, [sp]
   16cb0:	mov	r9, #0
   16cb4:	str	sl, [sp]
   16cb8:	mov	fp, r1
   16cbc:	mov	sl, r0
   16cc0:	b	16cfc <__assert_fail@plt+0x5ca4>
   16cc4:	mov	r3, r5
   16cc8:	mov	r2, r4
   16ccc:	mvn	r0, #0
   16cd0:	mvn	r1, #-2147483648	; 0x80000000
   16cd4:	bl	17438 <__assert_fail@plt+0x63e0>
   16cd8:	cmp	r0, r6
   16cdc:	sbcs	r3, r1, r7
   16ce0:	blt	16e80 <__assert_fail@plt+0x5e28>
   16ce4:	mul	r3, r6, r5
   16ce8:	mla	r3, r4, r7, r3
   16cec:	umull	r6, r7, r6, r4
   16cf0:	add	r7, r3, r7
   16cf4:	subs	r8, r8, #1
   16cf8:	beq	16e2c <__assert_fail@plt+0x5dd4>
   16cfc:	cmp	r6, sl
   16d00:	sbcs	r3, r7, fp
   16d04:	bge	16cc4 <__assert_fail@plt+0x5c6c>
   16d08:	mov	r9, #1
   16d0c:	mov	r6, #0
   16d10:	mov	r7, #-2147483648	; 0x80000000
   16d14:	b	16cf4 <__assert_fail@plt+0x5c9c>
   16d18:	ldr	r3, [pc, #488]	; 16f08 <__assert_fail@plt+0x5eb0>
   16d1c:	mov	r2, #0
   16d20:	mov	r0, r2
   16d24:	mov	r1, r3
   16d28:	mov	r2, #1024	; 0x400
   16d2c:	mov	r3, #0
   16d30:	mov	fp, #1
   16d34:	strd	r2, [sp]
   16d38:	b	16c0c <__assert_fail@plt+0x5bb4>
   16d3c:	ldr	r3, [pc, #452]	; 16f08 <__assert_fail@plt+0x5eb0>
   16d40:	mov	r2, #0
   16d44:	mov	r0, r2
   16d48:	mov	r1, r3
   16d4c:	mov	r2, #1024	; 0x400
   16d50:	mov	r3, #0
   16d54:	mov	fp, #1
   16d58:	strd	r2, [sp]
   16d5c:	b	169f4 <__assert_fail@plt+0x599c>
   16d60:	ldr	r3, [pc, #416]	; 16f08 <__assert_fail@plt+0x5eb0>
   16d64:	mov	r2, #0
   16d68:	mov	r0, r2
   16d6c:	mov	r1, r3
   16d70:	mov	r2, #1024	; 0x400
   16d74:	mov	r3, #0
   16d78:	mov	fp, #1
   16d7c:	strd	r2, [sp]
   16d80:	b	16b78 <__assert_fail@plt+0x5b20>
   16d84:	ldr	r3, [pc, #380]	; 16f08 <__assert_fail@plt+0x5eb0>
   16d88:	mov	r2, #0
   16d8c:	mov	r0, r2
   16d90:	mov	r1, r3
   16d94:	mov	r2, #1024	; 0x400
   16d98:	mov	r3, #0
   16d9c:	mov	fp, #1
   16da0:	strd	r2, [sp]
   16da4:	b	16960 <__assert_fail@plt+0x5908>
   16da8:	ldr	r3, [pc, #344]	; 16f08 <__assert_fail@plt+0x5eb0>
   16dac:	mov	r2, #0
   16db0:	mov	fp, #1
   16db4:	strd	r2, [sp]
   16db8:	mov	r8, #1024	; 0x400
   16dbc:	mov	r9, #0
   16dc0:	b	16824 <__assert_fail@plt+0x57cc>
   16dc4:	mov	fp, #1
   16dc8:	mov	r0, #0
   16dcc:	ldr	r1, [pc, #308]	; 16f08 <__assert_fail@plt+0x5eb0>
   16dd0:	mov	r8, #1024	; 0x400
   16dd4:	mov	r9, #0
   16dd8:	b	16a88 <__assert_fail@plt+0x5a30>
   16ddc:	ldr	r3, [pc, #292]	; 16f08 <__assert_fail@plt+0x5eb0>
   16de0:	mov	r2, #0
   16de4:	mov	r0, r2
   16de8:	mov	r1, r3
   16dec:	mov	r2, #1024	; 0x400
   16df0:	mov	r3, #0
   16df4:	mov	fp, #1
   16df8:	strd	r2, [sp]
   16dfc:	b	16ae4 <__assert_fail@plt+0x5a8c>
   16e00:	ldr	r3, [pc, #256]	; 16f08 <__assert_fail@plt+0x5eb0>
   16e04:	mov	r2, #0
   16e08:	mov	r0, r2
   16e0c:	mov	r1, r3
   16e10:	mov	r2, #1024	; 0x400
   16e14:	mov	r3, #0
   16e18:	mov	fp, #1
   16e1c:	strd	r2, [sp]
   16e20:	b	16ca0 <__assert_fail@plt+0x5c48>
   16e24:	mov	fp, #1
   16e28:	b	16890 <__assert_fail@plt+0x5838>
   16e2c:	ldrd	r4, [sp, #16]
   16e30:	ldr	fp, [sp, #12]
   16e34:	ldr	sl, [sp]
   16e38:	orr	r4, r4, r9
   16e3c:	b	16890 <__assert_fail@plt+0x5838>
   16e40:	mov	r4, #1
   16e44:	mov	r6, #0
   16e48:	mov	r7, #-2147483648	; 0x80000000
   16e4c:	b	16890 <__assert_fail@plt+0x5838>
   16e50:	mov	r4, #1
   16e54:	mvn	r6, #0
   16e58:	mvn	r7, #-2147483648	; 0x80000000
   16e5c:	b	16890 <__assert_fail@plt+0x5838>
   16e60:	mov	r9, #1
   16e64:	mvn	r6, #0
   16e68:	mvn	r7, #-2147483648	; 0x80000000
   16e6c:	b	16b38 <__assert_fail@plt+0x5ae0>
   16e70:	mov	r9, #1
   16e74:	mvn	r6, #0
   16e78:	mvn	r7, #-2147483648	; 0x80000000
   16e7c:	b	16a48 <__assert_fail@plt+0x59f0>
   16e80:	mov	r9, #1
   16e84:	mvn	r6, #0
   16e88:	mvn	r7, #-2147483648	; 0x80000000
   16e8c:	b	16cf4 <__assert_fail@plt+0x5c9c>
   16e90:	mov	r9, #1
   16e94:	mvn	r6, #0
   16e98:	mvn	r7, #-2147483648	; 0x80000000
   16e9c:	b	169b4 <__assert_fail@plt+0x595c>
   16ea0:	mov	r9, #1
   16ea4:	mvn	r6, #0
   16ea8:	mvn	r7, #-2147483648	; 0x80000000
   16eac:	b	16c60 <__assert_fail@plt+0x5c08>
   16eb0:	mov	r9, #1
   16eb4:	mvn	r6, #0
   16eb8:	mvn	r7, #-2147483648	; 0x80000000
   16ebc:	b	16bcc <__assert_fail@plt+0x5b74>
   16ec0:	mov	fp, #2
   16ec4:	mov	r3, #1000	; 0x3e8
   16ec8:	b	1671c <__assert_fail@plt+0x56c4>
   16ecc:	ldr	r3, [sp, #8]
   16ed0:	ldrb	r2, [r3, #2]
   16ed4:	mov	r3, #1024	; 0x400
   16ed8:	cmp	r2, #66	; 0x42
   16edc:	movne	fp, #1
   16ee0:	moveq	fp, #3
   16ee4:	b	1671c <__assert_fail@plt+0x56c4>
   16ee8:	ldr	r3, [pc, #28]	; 16f0c <__assert_fail@plt+0x5eb4>
   16eec:	mov	r2, #96	; 0x60
   16ef0:	ldr	r1, [pc, #24]	; 16f10 <__assert_fail@plt+0x5eb8>
   16ef4:	ldr	r0, [pc, #24]	; 16f14 <__assert_fail@plt+0x5ebc>
   16ef8:	bl	11058 <__assert_fail@plt>
   16efc:	bl	10e54 <__stack_chk_fail@plt>
   16f00:	andeq	r8, r2, r8, lsl #30
   16f04:			; <UNDEFINED> instruction: 0xffc00000
   16f08:			; <UNDEFINED> instruction: 0xffe00000
   16f0c:			; <UNDEFINED> instruction: 0x000187b4
   16f10:	andeq	r8, r1, r0, asr #15
   16f14:	ldrdeq	r8, [r1], -r0
   16f18:	push	{r4, r5, r6, r7, r8, lr}
   16f1c:	subs	r7, r0, #0
   16f20:	ldr	r5, [pc, #108]	; 16f94 <__assert_fail@plt+0x5f3c>
   16f24:	sub	sp, sp, #8
   16f28:	mov	r8, r1
   16f2c:	ldr	r1, [r5]
   16f30:	moveq	r7, sp
   16f34:	str	r1, [sp, #4]
   16f38:	mov	r0, r7
   16f3c:	mov	r1, r8
   16f40:	mov	r6, r2
   16f44:	bl	10ecc <mbrtowc@plt>
   16f48:	cmp	r6, #0
   16f4c:	cmnne	r0, #3
   16f50:	mov	r4, r0
   16f54:	bhi	16f74 <__assert_fail@plt+0x5f1c>
   16f58:	ldr	r2, [sp, #4]
   16f5c:	ldr	r3, [r5]
   16f60:	mov	r0, r4
   16f64:	cmp	r2, r3
   16f68:	bne	16f90 <__assert_fail@plt+0x5f38>
   16f6c:	add	sp, sp, #8
   16f70:	pop	{r4, r5, r6, r7, r8, pc}
   16f74:	mov	r0, #0
   16f78:	bl	1700c <__assert_fail@plt+0x5fb4>
   16f7c:	cmp	r0, #0
   16f80:	moveq	r4, #1
   16f84:	ldrbeq	r3, [r8]
   16f88:	streq	r3, [r7]
   16f8c:	b	16f58 <__assert_fail@plt+0x5f00>
   16f90:	bl	10e54 <__stack_chk_fail@plt>
   16f94:	andeq	r8, r2, r8, lsl #30
   16f98:	push	{r4, r5, r6, lr}
   16f9c:	mov	r4, r0
   16fa0:	bl	10ec0 <__fpending@plt>
   16fa4:	ldr	r5, [r4]
   16fa8:	and	r5, r5, #32
   16fac:	mov	r6, r0
   16fb0:	mov	r0, r4
   16fb4:	bl	1708c <__assert_fail@plt+0x6034>
   16fb8:	cmp	r5, #0
   16fbc:	mov	r4, r0
   16fc0:	bne	16fec <__assert_fail@plt+0x5f94>
   16fc4:	cmp	r0, #0
   16fc8:	beq	16fe4 <__assert_fail@plt+0x5f8c>
   16fcc:	cmp	r6, #0
   16fd0:	bne	17004 <__assert_fail@plt+0x5fac>
   16fd4:	bl	10f80 <__errno_location@plt>
   16fd8:	ldr	r4, [r0]
   16fdc:	subs	r4, r4, #9
   16fe0:	mvnne	r4, #0
   16fe4:	mov	r0, r4
   16fe8:	pop	{r4, r5, r6, pc}
   16fec:	cmp	r0, #0
   16ff0:	bne	17004 <__assert_fail@plt+0x5fac>
   16ff4:	bl	10f80 <__errno_location@plt>
   16ff8:	str	r4, [r0]
   16ffc:	mvn	r4, #0
   17000:	b	16fe4 <__assert_fail@plt+0x5f8c>
   17004:	mvn	r4, #0
   17008:	b	16fe4 <__assert_fail@plt+0x5f8c>
   1700c:	push	{r4, lr}
   17010:	mov	r1, #0
   17014:	bl	10ff8 <setlocale@plt>
   17018:	subs	r4, r0, #0
   1701c:	beq	17048 <__assert_fail@plt+0x5ff0>
   17020:	ldr	r1, [pc, #40]	; 17050 <__assert_fail@plt+0x5ff8>
   17024:	bl	10ddc <strcmp@plt>
   17028:	cmp	r0, #0
   1702c:	popeq	{r4, pc}
   17030:	mov	r0, r4
   17034:	ldr	r1, [pc, #24]	; 17054 <__assert_fail@plt+0x5ffc>
   17038:	bl	10ddc <strcmp@plt>
   1703c:	adds	r0, r0, #0
   17040:	movne	r0, #1
   17044:	pop	{r4, pc}
   17048:	mov	r0, #1
   1704c:	pop	{r4, pc}
   17050:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17054:	strdeq	r8, [r1], -ip
   17058:	push	{r4, lr}
   1705c:	mov	r0, #14
   17060:	bl	11010 <nl_langinfo@plt>
   17064:	cmp	r0, #0
   17068:	beq	17080 <__assert_fail@plt+0x6028>
   1706c:	ldrb	r2, [r0]
   17070:	ldr	r3, [pc, #16]	; 17088 <__assert_fail@plt+0x6030>
   17074:	cmp	r2, #0
   17078:	moveq	r0, r3
   1707c:	pop	{r4, pc}
   17080:	ldr	r0, [pc]	; 17088 <__assert_fail@plt+0x6030>
   17084:	pop	{r4, pc}
   17088:	andeq	r8, r1, r4, lsl #16
   1708c:	push	{r4, r5, lr}
   17090:	sub	sp, sp, #12
   17094:	mov	r4, r0
   17098:	bl	10fb0 <fileno@plt>
   1709c:	cmp	r0, #0
   170a0:	mov	r0, r4
   170a4:	blt	17120 <__assert_fail@plt+0x60c8>
   170a8:	bl	10f14 <__freading@plt>
   170ac:	cmp	r0, #0
   170b0:	bne	170ec <__assert_fail@plt+0x6094>
   170b4:	mov	r0, r4
   170b8:	bl	1712c <__assert_fail@plt+0x60d4>
   170bc:	cmp	r0, #0
   170c0:	beq	1711c <__assert_fail@plt+0x60c4>
   170c4:	bl	10f80 <__errno_location@plt>
   170c8:	mov	r5, r0
   170cc:	mov	r0, r4
   170d0:	ldr	r4, [r5]
   170d4:	bl	10fd4 <fclose@plt>
   170d8:	cmp	r4, #0
   170dc:	mvnne	r0, #0
   170e0:	strne	r4, [r5]
   170e4:	add	sp, sp, #12
   170e8:	pop	{r4, r5, pc}
   170ec:	mov	r0, r4
   170f0:	bl	10fb0 <fileno@plt>
   170f4:	mov	r3, #1
   170f8:	str	r3, [sp]
   170fc:	mov	r2, #0
   17100:	mov	r3, #0
   17104:	bl	10e9c <lseek64@plt>
   17108:	mvn	r3, #0
   1710c:	mvn	r2, #0
   17110:	cmp	r1, r3
   17114:	cmpeq	r0, r2
   17118:	bne	170b4 <__assert_fail@plt+0x605c>
   1711c:	mov	r0, r4
   17120:	add	sp, sp, #12
   17124:	pop	{r4, r5, lr}
   17128:	b	10fd4 <fclose@plt>
   1712c:	push	{r4, lr}
   17130:	subs	r4, r0, #0
   17134:	sub	sp, sp, #8
   17138:	beq	17154 <__assert_fail@plt+0x60fc>
   1713c:	bl	10f14 <__freading@plt>
   17140:	cmp	r0, #0
   17144:	beq	17154 <__assert_fail@plt+0x60fc>
   17148:	ldr	r3, [r4]
   1714c:	tst	r3, #256	; 0x100
   17150:	bne	17164 <__assert_fail@plt+0x610c>
   17154:	mov	r0, r4
   17158:	add	sp, sp, #8
   1715c:	pop	{r4, lr}
   17160:	b	10df4 <fflush@plt>
   17164:	mov	r3, #1
   17168:	str	r3, [sp]
   1716c:	mov	r2, #0
   17170:	mov	r3, #0
   17174:	mov	r0, r4
   17178:	bl	1718c <__assert_fail@plt+0x6134>
   1717c:	mov	r0, r4
   17180:	add	sp, sp, #8
   17184:	pop	{r4, lr}
   17188:	b	10df4 <fflush@plt>
   1718c:	push	{r4, r5, r6, r7, r8, lr}
   17190:	sub	sp, sp, #8
   17194:	ldmib	r0, {ip, lr}
   17198:	mov	r4, r0
   1719c:	ldr	r5, [sp, #32]
   171a0:	cmp	lr, ip
   171a4:	beq	171bc <__assert_fail@plt+0x6164>
   171a8:	str	r5, [sp, #32]
   171ac:	mov	r0, r4
   171b0:	add	sp, sp, #8
   171b4:	pop	{r4, r5, r6, r7, r8, lr}
   171b8:	b	10fe0 <fseeko64@plt>
   171bc:	ldr	lr, [r0, #20]
   171c0:	ldr	ip, [r0, #16]
   171c4:	cmp	lr, ip
   171c8:	bne	171a8 <__assert_fail@plt+0x6150>
   171cc:	ldr	r8, [r0, #36]	; 0x24
   171d0:	cmp	r8, #0
   171d4:	bne	171a8 <__assert_fail@plt+0x6150>
   171d8:	mov	r6, r2
   171dc:	mov	r7, r3
   171e0:	bl	10fb0 <fileno@plt>
   171e4:	mov	r2, r6
   171e8:	mov	r3, r7
   171ec:	str	r5, [sp]
   171f0:	bl	10e9c <lseek64@plt>
   171f4:	mvn	r3, #0
   171f8:	mvn	r2, #0
   171fc:	cmp	r1, r3
   17200:	cmpeq	r0, r2
   17204:	beq	17224 <__assert_fail@plt+0x61cc>
   17208:	ldr	r3, [r4]
   1720c:	strd	r0, [r4, #80]	; 0x50
   17210:	mov	r0, r8
   17214:	bic	r3, r3, #16
   17218:	str	r3, [r4]
   1721c:	add	sp, sp, #8
   17220:	pop	{r4, r5, r6, r7, r8, pc}
   17224:	mvn	r0, #0
   17228:	b	1721c <__assert_fail@plt+0x61c4>
   1722c:	subs	r2, r1, #1
   17230:	bxeq	lr
   17234:	bcc	1740c <__assert_fail@plt+0x63b4>
   17238:	cmp	r0, r1
   1723c:	bls	173f0 <__assert_fail@plt+0x6398>
   17240:	tst	r1, r2
   17244:	beq	173fc <__assert_fail@plt+0x63a4>
   17248:	clz	r3, r0
   1724c:	clz	r2, r1
   17250:	sub	r3, r2, r3
   17254:	rsbs	r3, r3, #31
   17258:	addne	r3, r3, r3, lsl #1
   1725c:	mov	r2, #0
   17260:	addne	pc, pc, r3, lsl #2
   17264:	nop			; (mov r0, r0)
   17268:	cmp	r0, r1, lsl #31
   1726c:	adc	r2, r2, r2
   17270:	subcs	r0, r0, r1, lsl #31
   17274:	cmp	r0, r1, lsl #30
   17278:	adc	r2, r2, r2
   1727c:	subcs	r0, r0, r1, lsl #30
   17280:	cmp	r0, r1, lsl #29
   17284:	adc	r2, r2, r2
   17288:	subcs	r0, r0, r1, lsl #29
   1728c:	cmp	r0, r1, lsl #28
   17290:	adc	r2, r2, r2
   17294:	subcs	r0, r0, r1, lsl #28
   17298:	cmp	r0, r1, lsl #27
   1729c:	adc	r2, r2, r2
   172a0:	subcs	r0, r0, r1, lsl #27
   172a4:	cmp	r0, r1, lsl #26
   172a8:	adc	r2, r2, r2
   172ac:	subcs	r0, r0, r1, lsl #26
   172b0:	cmp	r0, r1, lsl #25
   172b4:	adc	r2, r2, r2
   172b8:	subcs	r0, r0, r1, lsl #25
   172bc:	cmp	r0, r1, lsl #24
   172c0:	adc	r2, r2, r2
   172c4:	subcs	r0, r0, r1, lsl #24
   172c8:	cmp	r0, r1, lsl #23
   172cc:	adc	r2, r2, r2
   172d0:	subcs	r0, r0, r1, lsl #23
   172d4:	cmp	r0, r1, lsl #22
   172d8:	adc	r2, r2, r2
   172dc:	subcs	r0, r0, r1, lsl #22
   172e0:	cmp	r0, r1, lsl #21
   172e4:	adc	r2, r2, r2
   172e8:	subcs	r0, r0, r1, lsl #21
   172ec:	cmp	r0, r1, lsl #20
   172f0:	adc	r2, r2, r2
   172f4:	subcs	r0, r0, r1, lsl #20
   172f8:	cmp	r0, r1, lsl #19
   172fc:	adc	r2, r2, r2
   17300:	subcs	r0, r0, r1, lsl #19
   17304:	cmp	r0, r1, lsl #18
   17308:	adc	r2, r2, r2
   1730c:	subcs	r0, r0, r1, lsl #18
   17310:	cmp	r0, r1, lsl #17
   17314:	adc	r2, r2, r2
   17318:	subcs	r0, r0, r1, lsl #17
   1731c:	cmp	r0, r1, lsl #16
   17320:	adc	r2, r2, r2
   17324:	subcs	r0, r0, r1, lsl #16
   17328:	cmp	r0, r1, lsl #15
   1732c:	adc	r2, r2, r2
   17330:	subcs	r0, r0, r1, lsl #15
   17334:	cmp	r0, r1, lsl #14
   17338:	adc	r2, r2, r2
   1733c:	subcs	r0, r0, r1, lsl #14
   17340:	cmp	r0, r1, lsl #13
   17344:	adc	r2, r2, r2
   17348:	subcs	r0, r0, r1, lsl #13
   1734c:	cmp	r0, r1, lsl #12
   17350:	adc	r2, r2, r2
   17354:	subcs	r0, r0, r1, lsl #12
   17358:	cmp	r0, r1, lsl #11
   1735c:	adc	r2, r2, r2
   17360:	subcs	r0, r0, r1, lsl #11
   17364:	cmp	r0, r1, lsl #10
   17368:	adc	r2, r2, r2
   1736c:	subcs	r0, r0, r1, lsl #10
   17370:	cmp	r0, r1, lsl #9
   17374:	adc	r2, r2, r2
   17378:	subcs	r0, r0, r1, lsl #9
   1737c:	cmp	r0, r1, lsl #8
   17380:	adc	r2, r2, r2
   17384:	subcs	r0, r0, r1, lsl #8
   17388:	cmp	r0, r1, lsl #7
   1738c:	adc	r2, r2, r2
   17390:	subcs	r0, r0, r1, lsl #7
   17394:	cmp	r0, r1, lsl #6
   17398:	adc	r2, r2, r2
   1739c:	subcs	r0, r0, r1, lsl #6
   173a0:	cmp	r0, r1, lsl #5
   173a4:	adc	r2, r2, r2
   173a8:	subcs	r0, r0, r1, lsl #5
   173ac:	cmp	r0, r1, lsl #4
   173b0:	adc	r2, r2, r2
   173b4:	subcs	r0, r0, r1, lsl #4
   173b8:	cmp	r0, r1, lsl #3
   173bc:	adc	r2, r2, r2
   173c0:	subcs	r0, r0, r1, lsl #3
   173c4:	cmp	r0, r1, lsl #2
   173c8:	adc	r2, r2, r2
   173cc:	subcs	r0, r0, r1, lsl #2
   173d0:	cmp	r0, r1, lsl #1
   173d4:	adc	r2, r2, r2
   173d8:	subcs	r0, r0, r1, lsl #1
   173dc:	cmp	r0, r1
   173e0:	adc	r2, r2, r2
   173e4:	subcs	r0, r0, r1
   173e8:	mov	r0, r2
   173ec:	bx	lr
   173f0:	moveq	r0, #1
   173f4:	movne	r0, #0
   173f8:	bx	lr
   173fc:	clz	r2, r1
   17400:	rsb	r2, r2, #31
   17404:	lsr	r0, r0, r2
   17408:	bx	lr
   1740c:	cmp	r0, #0
   17410:	mvnne	r0, #0
   17414:	b	17548 <__assert_fail@plt+0x64f0>
   17418:	cmp	r1, #0
   1741c:	beq	1740c <__assert_fail@plt+0x63b4>
   17420:	push	{r0, r1, lr}
   17424:	bl	1722c <__assert_fail@plt+0x61d4>
   17428:	pop	{r1, r2, lr}
   1742c:	mul	r3, r2, r0
   17430:	sub	r1, r1, r3
   17434:	bx	lr
   17438:	cmp	r3, #0
   1743c:	cmpeq	r2, #0
   17440:	bne	17464 <__assert_fail@plt+0x640c>
   17444:	cmp	r1, #0
   17448:	movlt	r1, #-2147483648	; 0x80000000
   1744c:	movlt	r0, #0
   17450:	blt	17460 <__assert_fail@plt+0x6408>
   17454:	cmpeq	r0, #0
   17458:	mvnne	r1, #-2147483648	; 0x80000000
   1745c:	mvnne	r0, #0
   17460:	b	17548 <__assert_fail@plt+0x64f0>
   17464:	sub	sp, sp, #8
   17468:	push	{sp, lr}
   1746c:	cmp	r1, #0
   17470:	blt	17490 <__assert_fail@plt+0x6438>
   17474:	cmp	r3, #0
   17478:	blt	174c4 <__assert_fail@plt+0x646c>
   1747c:	bl	17558 <__assert_fail@plt+0x6500>
   17480:	ldr	lr, [sp, #4]
   17484:	add	sp, sp, #8
   17488:	pop	{r2, r3}
   1748c:	bx	lr
   17490:	rsbs	r0, r0, #0
   17494:	sbc	r1, r1, r1, lsl #1
   17498:	cmp	r3, #0
   1749c:	blt	174e8 <__assert_fail@plt+0x6490>
   174a0:	bl	17558 <__assert_fail@plt+0x6500>
   174a4:	ldr	lr, [sp, #4]
   174a8:	add	sp, sp, #8
   174ac:	pop	{r2, r3}
   174b0:	rsbs	r0, r0, #0
   174b4:	sbc	r1, r1, r1, lsl #1
   174b8:	rsbs	r2, r2, #0
   174bc:	sbc	r3, r3, r3, lsl #1
   174c0:	bx	lr
   174c4:	rsbs	r2, r2, #0
   174c8:	sbc	r3, r3, r3, lsl #1
   174cc:	bl	17558 <__assert_fail@plt+0x6500>
   174d0:	ldr	lr, [sp, #4]
   174d4:	add	sp, sp, #8
   174d8:	pop	{r2, r3}
   174dc:	rsbs	r0, r0, #0
   174e0:	sbc	r1, r1, r1, lsl #1
   174e4:	bx	lr
   174e8:	rsbs	r2, r2, #0
   174ec:	sbc	r3, r3, r3, lsl #1
   174f0:	bl	17558 <__assert_fail@plt+0x6500>
   174f4:	ldr	lr, [sp, #4]
   174f8:	add	sp, sp, #8
   174fc:	pop	{r2, r3}
   17500:	rsbs	r2, r2, #0
   17504:	sbc	r3, r3, r3, lsl #1
   17508:	bx	lr
   1750c:	cmp	r3, #0
   17510:	cmpeq	r2, #0
   17514:	bne	1752c <__assert_fail@plt+0x64d4>
   17518:	cmp	r1, #0
   1751c:	cmpeq	r0, #0
   17520:	mvnne	r1, #0
   17524:	mvnne	r0, #0
   17528:	b	17548 <__assert_fail@plt+0x64f0>
   1752c:	sub	sp, sp, #8
   17530:	push	{sp, lr}
   17534:	bl	17558 <__assert_fail@plt+0x6500>
   17538:	ldr	lr, [sp, #4]
   1753c:	add	sp, sp, #8
   17540:	pop	{r2, r3}
   17544:	bx	lr
   17548:	push	{r1, lr}
   1754c:	mov	r0, #8
   17550:	bl	10dd0 <raise@plt>
   17554:	pop	{r1, pc}
   17558:	cmp	r1, r3
   1755c:	cmpeq	r0, r2
   17560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17564:	mov	r4, r0
   17568:	movcc	r0, #0
   1756c:	mov	r5, r1
   17570:	ldr	lr, [sp, #36]	; 0x24
   17574:	movcc	r1, r0
   17578:	bcc	17674 <__assert_fail@plt+0x661c>
   1757c:	cmp	r3, #0
   17580:	clzeq	ip, r2
   17584:	clzne	ip, r3
   17588:	addeq	ip, ip, #32
   1758c:	cmp	r5, #0
   17590:	clzeq	r1, r4
   17594:	addeq	r1, r1, #32
   17598:	clzne	r1, r5
   1759c:	sub	ip, ip, r1
   175a0:	sub	sl, ip, #32
   175a4:	lsl	r9, r3, ip
   175a8:	rsb	fp, ip, #32
   175ac:	orr	r9, r9, r2, lsl sl
   175b0:	orr	r9, r9, r2, lsr fp
   175b4:	lsl	r8, r2, ip
   175b8:	cmp	r5, r9
   175bc:	cmpeq	r4, r8
   175c0:	movcc	r0, #0
   175c4:	movcc	r1, r0
   175c8:	bcc	175e4 <__assert_fail@plt+0x658c>
   175cc:	mov	r0, #1
   175d0:	subs	r4, r4, r8
   175d4:	lsl	r1, r0, sl
   175d8:	orr	r1, r1, r0, lsr fp
   175dc:	lsl	r0, r0, ip
   175e0:	sbc	r5, r5, r9
   175e4:	cmp	ip, #0
   175e8:	beq	17674 <__assert_fail@plt+0x661c>
   175ec:	lsr	r6, r8, #1
   175f0:	orr	r6, r6, r9, lsl #31
   175f4:	lsr	r7, r9, #1
   175f8:	mov	r2, ip
   175fc:	b	17620 <__assert_fail@plt+0x65c8>
   17600:	subs	r3, r4, r6
   17604:	sbc	r8, r5, r7
   17608:	adds	r3, r3, r3
   1760c:	adc	r8, r8, r8
   17610:	adds	r4, r3, #1
   17614:	adc	r5, r8, #0
   17618:	subs	r2, r2, #1
   1761c:	beq	1763c <__assert_fail@plt+0x65e4>
   17620:	cmp	r5, r7
   17624:	cmpeq	r4, r6
   17628:	bcs	17600 <__assert_fail@plt+0x65a8>
   1762c:	adds	r4, r4, r4
   17630:	adc	r5, r5, r5
   17634:	subs	r2, r2, #1
   17638:	bne	17620 <__assert_fail@plt+0x65c8>
   1763c:	lsr	r3, r4, ip
   17640:	orr	r3, r3, r5, lsl fp
   17644:	lsr	r2, r5, ip
   17648:	orr	r3, r3, r5, lsr sl
   1764c:	adds	r0, r0, r4
   17650:	mov	r4, r3
   17654:	lsl	r3, r2, ip
   17658:	orr	r3, r3, r4, lsl sl
   1765c:	lsl	ip, r4, ip
   17660:	orr	r3, r3, r4, lsr fp
   17664:	adc	r1, r1, r5
   17668:	subs	r0, r0, ip
   1766c:	mov	r5, r2
   17670:	sbc	r1, r1, r3
   17674:	cmp	lr, #0
   17678:	strdne	r4, [lr]
   1767c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17680:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17684:	mov	r7, r0
   17688:	ldr	r6, [pc, #72]	; 176d8 <__assert_fail@plt+0x6680>
   1768c:	ldr	r5, [pc, #72]	; 176dc <__assert_fail@plt+0x6684>
   17690:	add	r6, pc, r6
   17694:	add	r5, pc, r5
   17698:	sub	r6, r6, r5
   1769c:	mov	r8, r1
   176a0:	mov	r9, r2
   176a4:	bl	10d98 <calloc@plt-0x20>
   176a8:	asrs	r6, r6, #2
   176ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   176b0:	mov	r4, #0
   176b4:	add	r4, r4, #1
   176b8:	ldr	r3, [r5], #4
   176bc:	mov	r2, r9
   176c0:	mov	r1, r8
   176c4:	mov	r0, r7
   176c8:	blx	r3
   176cc:	cmp	r6, r4
   176d0:	bne	176b4 <__assert_fail@plt+0x665c>
   176d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176d8:	andeq	r1, r1, ip, ror #16
   176dc:	andeq	r1, r1, r4, ror #16
   176e0:	bx	lr
   176e4:	ldr	r3, [pc, #12]	; 176f8 <__assert_fail@plt+0x66a0>
   176e8:	mov	r1, #0
   176ec:	add	r3, pc, r3
   176f0:	ldr	r2, [r3]
   176f4:	b	10f8c <__cxa_atexit@plt>
   176f8:	andeq	r1, r1, r4, lsl #20

Disassembly of section .fini:

000176fc <.fini>:
   176fc:	push	{r3, lr}
   17700:	pop	{r3, pc}
