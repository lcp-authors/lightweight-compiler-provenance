
raspbian-preinstalled/mt-gnu:     file format elf32-littlearm


Disassembly of section .init:

0001122c <.init>:
   1122c:	push	{r3, lr}
   11230:	bl	11944 <__assert_fail@plt+0x350>
   11234:	pop	{r3, pc}

Disassembly of section .plt:

00011238 <fdopen@plt-0x14>:
   11238:	push	{lr}		; (str lr, [sp, #-4]!)
   1123c:	ldr	lr, [pc, #4]	; 11248 <fdopen@plt-0x4>
   11240:	add	lr, pc, lr
   11244:	ldr	pc, [lr, #8]!
   11248:			; <UNDEFINED> instruction: 0x0001ddb8

0001124c <fdopen@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #118784	; 0x1d000
   11254:	ldr	pc, [ip, #3512]!	; 0xdb8

00011258 <calloc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #118784	; 0x1d000
   11260:	ldr	pc, [ip, #3504]!	; 0xdb0

00011264 <fputs_unlocked@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #118784	; 0x1d000
   1126c:	ldr	pc, [ip, #3496]!	; 0xda8

00011270 <raise@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #118784	; 0x1d000
   11278:	ldr	pc, [ip, #3488]!	; 0xda0

0001127c <strcmp@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #118784	; 0x1d000
   11284:	ldr	pc, [ip, #3480]!	; 0xd98

00011288 <strtol@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3472]!	; 0xd90

00011294 <read@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3464]!	; 0xd88

000112a0 <getuid@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3456]!	; 0xd80

000112ac <memmove@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3448]!	; 0xd78

000112b8 <strchrnul@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3440]!	; 0xd70

000112c4 <free@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3432]!	; 0xd68

000112d0 <strndup@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3424]!	; 0xd60

000112dc <__vsnprintf_chk@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3416]!	; 0xd58

000112e8 <memcpy@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3408]!	; 0xd50

000112f4 <mbsinit@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3400]!	; 0xd48

00011300 <signal@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3392]!	; 0xd40

0001130c <fwrite_unlocked@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3384]!	; 0xd38

00011318 <memcmp@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3376]!	; 0xd30

00011324 <sleep@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3368]!	; 0xd28

00011330 <dcgettext@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3360]!	; 0xd20

0001133c <__stack_chk_fail@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3352]!	; 0xd18

00011348 <dup2@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3344]!	; 0xd10

00011354 <realloc@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3336]!	; 0xd08

00011360 <textdomain@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3328]!	; 0xd00

0001136c <strcasecmp@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3320]!	; 0xcf8

00011378 <funlockfile@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3312]!	; 0xcf0

00011384 <iswprint@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3304]!	; 0xce8

00011390 <__fxstat64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3296]!	; 0xce0

0001139c <fwrite@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113a8 <ioctl@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113b4 <__ctype_get_mb_cur_max@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3272]!	; 0xcc8

000113c0 <mbrtowc@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113cc <error@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113d8 <open64@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113e4 <getenv@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3240]!	; 0xca8

000113f0 <setgid@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3232]!	; 0xca0

000113fc <malloc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3224]!	; 0xc98

00011408 <__libc_start_main@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3216]!	; 0xc90

00011414 <strerror@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3208]!	; 0xc88

00011420 <__vfprintf_chk@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3200]!	; 0xc80

0001142c <__ctype_tolower_loc@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3192]!	; 0xc78

00011438 <__gmon_start__@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3184]!	; 0xc70

00011444 <mempcpy@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3176]!	; 0xc68

00011450 <__ctype_b_loc@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #118784	; 0x1d000
   11458:	ldr	pc, [ip, #3168]!	; 0xc60

0001145c <exit@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #118784	; 0x1d000
   11464:	ldr	pc, [ip, #3160]!	; 0xc58

00011468 <strlen@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #118784	; 0x1d000
   11470:	ldr	pc, [ip, #3152]!	; 0xc50

00011474 <strchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #118784	; 0x1d000
   1147c:	ldr	pc, [ip, #3144]!	; 0xc48

00011480 <ungetc@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #118784	; 0x1d000
   11488:	ldr	pc, [ip, #3136]!	; 0xc40

0001148c <__errno_location@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #118784	; 0x1d000
   11494:	ldr	pc, [ip, #3128]!	; 0xc38

00011498 <__sprintf_chk@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #118784	; 0x1d000
   114a0:	ldr	pc, [ip, #3120]!	; 0xc30

000114a4 <strerror_r@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #118784	; 0x1d000
   114ac:	ldr	pc, [ip, #3112]!	; 0xc28

000114b0 <getgid@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #118784	; 0x1d000
   114b8:	ldr	pc, [ip, #3104]!	; 0xc20

000114bc <memset@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #118784	; 0x1d000
   114c4:	ldr	pc, [ip, #3096]!	; 0xc18

000114c8 <fscanf@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #118784	; 0x1d000
   114d0:	ldr	pc, [ip, #3088]!	; 0xc10

000114d4 <__printf_chk@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #118784	; 0x1d000
   114dc:	ldr	pc, [ip, #3080]!	; 0xc08

000114e0 <write@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #118784	; 0x1d000
   114e8:	ldr	pc, [ip, #3072]!	; 0xc00

000114ec <__fprintf_chk@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #118784	; 0x1d000
   114f4:	ldr	pc, [ip, #3064]!	; 0xbf8

000114f8 <memchr@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #118784	; 0x1d000
   11500:	ldr	pc, [ip, #3056]!	; 0xbf0

00011504 <fclose@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #118784	; 0x1d000
   1150c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011510 <pipe@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #118784	; 0x1d000
   11518:	ldr	pc, [ip, #3040]!	; 0xbe0

0001151c <__uflow@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #118784	; 0x1d000
   11524:	ldr	pc, [ip, #3032]!	; 0xbd8

00011528 <__overflow@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #118784	; 0x1d000
   11530:	ldr	pc, [ip, #3024]!	; 0xbd0

00011534 <setlocale@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #118784	; 0x1d000
   1153c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011540 <fork@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #118784	; 0x1d000
   11548:	ldr	pc, [ip, #3008]!	; 0xbc0

0001154c <execl@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #118784	; 0x1d000
   11554:	ldr	pc, [ip, #3000]!	; 0xbb8

00011558 <strrchr@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #118784	; 0x1d000
   11560:	ldr	pc, [ip, #2992]!	; 0xbb0

00011564 <nl_langinfo@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #118784	; 0x1d000
   1156c:	ldr	pc, [ip, #2984]!	; 0xba8

00011570 <fputc@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #118784	; 0x1d000
   11578:	ldr	pc, [ip, #2976]!	; 0xba0

0001157c <setuid@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #118784	; 0x1d000
   11584:	ldr	pc, [ip, #2968]!	; 0xb98

00011588 <flockfile@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #118784	; 0x1d000
   11590:	ldr	pc, [ip, #2960]!	; 0xb90

00011594 <qsort@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #118784	; 0x1d000
   1159c:	ldr	pc, [ip, #2952]!	; 0xb88

000115a0 <bindtextdomain@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #118784	; 0x1d000
   115a8:	ldr	pc, [ip, #2944]!	; 0xb80

000115ac <gethostbyname@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #118784	; 0x1d000
   115b4:	ldr	pc, [ip, #2936]!	; 0xb78

000115b8 <fputs@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #118784	; 0x1d000
   115c0:	ldr	pc, [ip, #2928]!	; 0xb70

000115c4 <strncmp@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #118784	; 0x1d000
   115cc:	ldr	pc, [ip, #2920]!	; 0xb68

000115d0 <abort@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #118784	; 0x1d000
   115d8:	ldr	pc, [ip, #2912]!	; 0xb60

000115dc <close@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #118784	; 0x1d000
   115e4:	ldr	pc, [ip, #2904]!	; 0xb58

000115e8 <dcngettext@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #118784	; 0x1d000
   115f0:	ldr	pc, [ip, #2896]!	; 0xb50

000115f4 <__assert_fail@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #118784	; 0x1d000
   115fc:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00011600 <argp_failure@@Base-0x4340>:
   11600:	push	{r4, r5, r6, r7, lr}
   11604:	mov	r4, r1
   11608:	sub	sp, sp, #12
   1160c:	mov	r5, r0
   11610:	ldr	r1, [pc, #684]	; 118c4 <__assert_fail@plt+0x2d0>
   11614:	mov	r0, #6
   11618:	bl	11534 <setlocale@plt>
   1161c:	ldr	r1, [pc, #676]	; 118c8 <__assert_fail@plt+0x2d4>
   11620:	ldr	r0, [pc, #676]	; 118cc <__assert_fail@plt+0x2d8>
   11624:	bl	115a0 <bindtextdomain@plt>
   11628:	ldr	r0, [pc, #668]	; 118cc <__assert_fail@plt+0x2d8>
   1162c:	bl	11360 <textdomain@plt>
   11630:	ldr	r0, [r4]
   11634:	bl	18758 <argp_parse@@Base+0x1044>
   11638:	ldr	r1, [pc, #656]	; 118d0 <__assert_fail@plt+0x2dc>
   1163c:	ldr	r0, [pc, #656]	; 118d4 <__assert_fail@plt+0x2e0>
   11640:	bl	185bc <argp_parse@@Base+0xea8>
   11644:	ldr	r0, [pc, #652]	; 118d8 <__assert_fail@plt+0x2e4>
   11648:	ldr	ip, [pc, #652]	; 118dc <__assert_fail@plt+0x2e8>
   1164c:	ldr	lr, [pc, #652]	; 118e0 <__assert_fail@plt+0x2ec>
   11650:	mov	r3, #0
   11654:	str	r3, [sp, #4]
   11658:	str	r3, [sp]
   1165c:	mov	r2, r4
   11660:	str	lr, [r0]
   11664:	mov	r1, r5
   11668:	mov	r4, #1
   1166c:	mov	r3, #8
   11670:	ldr	r0, [pc, #620]	; 118e4 <__assert_fail@plt+0x2f0>
   11674:	str	r4, [ip]
   11678:	bl	17714 <argp_parse@@Base>
   1167c:	cmp	r0, #0
   11680:	bne	117ac <__assert_fail@plt+0x1b8>
   11684:	ldr	r5, [pc, #604]	; 118e8 <__assert_fail@plt+0x2f4>
   11688:	ldr	r2, [pc, #604]	; 118ec <__assert_fail@plt+0x2f8>
   1168c:	ldr	r6, [pc, #604]	; 118f0 <__assert_fail@plt+0x2fc>
   11690:	ldrsh	r3, [r5]
   11694:	ldrb	r2, [r2]
   11698:	ldr	r4, [r6]
   1169c:	cmp	r3, #5
   116a0:	beq	116ec <__assert_fail@plt+0xf8>
   116a4:	cmp	r3, #13
   116a8:	beq	116ec <__assert_fail@plt+0xf8>
   116ac:	cmp	r2, #0
   116b0:	bne	116d4 <__assert_fail@plt+0xe0>
   116b4:	mov	r1, #58	; 0x3a
   116b8:	mov	r0, r4
   116bc:	bl	11474 <strchr@plt>
   116c0:	ldr	r3, [pc, #556]	; 118f4 <__assert_fail@plt+0x300>
   116c4:	cmp	r0, #0
   116c8:	cmpne	r0, r4
   116cc:	str	r0, [r3]
   116d0:	bhi	1181c <__assert_fail@plt+0x228>
   116d4:	mov	r2, #0
   116d8:	mov	r0, r4
   116dc:	mov	r1, r2
   116e0:	bl	113d8 <open64@plt>
   116e4:	mov	r4, r0
   116e8:	b	11728 <__assert_fail@plt+0x134>
   116ec:	cmp	r2, #0
   116f0:	bne	11714 <__assert_fail@plt+0x120>
   116f4:	mov	r1, #58	; 0x3a
   116f8:	mov	r0, r4
   116fc:	bl	11474 <strchr@plt>
   11700:	ldr	r3, [pc, #492]	; 118f4 <__assert_fail@plt+0x300>
   11704:	cmp	r0, #0
   11708:	cmpne	r0, r4
   1170c:	str	r0, [r3]
   11710:	bhi	117e4 <__assert_fail@plt+0x1f0>
   11714:	mov	r0, r4
   11718:	mov	r2, #0
   1171c:	mov	r1, #1
   11720:	bl	113d8 <open64@plt>
   11724:	mov	r4, r0
   11728:	cmn	r4, #1
   1172c:	beq	11860 <__assert_fail@plt+0x26c>
   11730:	cmn	r4, #-1073741823	; 0xc0000001
   11734:	ble	11850 <__assert_fail@plt+0x25c>
   11738:	ldrsh	r3, [r5]
   1173c:	cmp	r3, #600	; 0x258
   11740:	beq	118a4 <__assert_fail@plt+0x2b0>
   11744:	ldr	r3, [pc, #428]	; 118f8 <__assert_fail@plt+0x304>
   11748:	ldrsh	r2, [r5]
   1174c:	mov	r1, r4
   11750:	ldr	r3, [r3, #36]	; 0x24
   11754:	ldr	r0, [r6]
   11758:	bl	11c90 <__assert_fail@plt+0x69c>
   1175c:	ldrsh	r3, [r5]
   11760:	cmp	r3, #8
   11764:	beq	11894 <__assert_fail@plt+0x2a0>
   11768:	cmn	r4, #-1073741823	; 0xc0000001
   1176c:	ble	11794 <__assert_fail@plt+0x1a0>
   11770:	add	r0, r4, #-1073741824	; 0xc0000000
   11774:	bl	127e0 <__assert_fail@plt+0x11ec>
   11778:	cmn	r0, #1
   1177c:	movne	r0, #0
   11780:	moveq	r0, #1
   11784:	cmp	r0, #0
   11788:	bne	117b4 <__assert_fail@plt+0x1c0>
   1178c:	mov	r0, #0
   11790:	bl	1145c <exit@plt>
   11794:	mov	r0, r4
   11798:	bl	115dc <close@plt>
   1179c:	cmn	r0, #1
   117a0:	movne	r0, #0
   117a4:	moveq	r0, #1
   117a8:	b	11784 <__assert_fail@plt+0x190>
   117ac:	mov	r0, r4
   117b0:	bl	1145c <exit@plt>
   117b4:	bl	1148c <__errno_location@plt>
   117b8:	mov	r2, #5
   117bc:	ldr	r1, [pc, #312]	; 118fc <__assert_fail@plt+0x308>
   117c0:	ldr	r4, [r0]
   117c4:	mov	r0, #0
   117c8:	bl	11330 <dcgettext@plt>
   117cc:	mov	r1, r4
   117d0:	ldr	r3, [r6]
   117d4:	mov	r2, r0
   117d8:	mov	r0, #2
   117dc:	bl	113cc <error@plt>
   117e0:	b	1178c <__assert_fail@plt+0x198>
   117e4:	sub	r2, r0, r4
   117e8:	mov	r1, #47	; 0x2f
   117ec:	mov	r0, r4
   117f0:	bl	114f8 <memchr@plt>
   117f4:	cmp	r0, #0
   117f8:	bne	11714 <__assert_fail@plt+0x120>
   117fc:	ldr	r3, [pc, #252]	; 11900 <__assert_fail@plt+0x30c>
   11800:	mov	r0, r4
   11804:	mov	r2, #1073741824	; 0x40000000
   11808:	ldr	r3, [r3, #4]
   1180c:	mov	r1, #1
   11810:	bl	12100 <__assert_fail@plt+0xb0c>
   11814:	mov	r4, r0
   11818:	b	11728 <__assert_fail@plt+0x134>
   1181c:	sub	r2, r0, r4
   11820:	mov	r1, #47	; 0x2f
   11824:	mov	r0, r4
   11828:	bl	114f8 <memchr@plt>
   1182c:	subs	r1, r0, #0
   11830:	bne	116d4 <__assert_fail@plt+0xe0>
   11834:	ldr	r3, [pc, #196]	; 11900 <__assert_fail@plt+0x30c>
   11838:	mov	r0, r4
   1183c:	mov	r2, #1073741824	; 0x40000000
   11840:	ldr	r3, [r3, #4]
   11844:	bl	12100 <__assert_fail@plt+0xb0c>
   11848:	mov	r4, r0
   1184c:	b	11728 <__assert_fail@plt+0x134>
   11850:	ldr	r0, [r6]
   11854:	mov	r1, r4
   11858:	bl	11bf4 <__assert_fail@plt+0x600>
   1185c:	b	11738 <__assert_fail@plt+0x144>
   11860:	bl	1148c <__errno_location@plt>
   11864:	mov	r2, #5
   11868:	ldr	r1, [pc, #148]	; 11904 <__assert_fail@plt+0x310>
   1186c:	ldr	r7, [r0]
   11870:	mov	r0, #0
   11874:	bl	11330 <dcgettext@plt>
   11878:	mov	r1, r7
   1187c:	ldr	r3, [r6]
   11880:	mov	r2, r0
   11884:	mov	r0, #1
   11888:	bl	113cc <error@plt>
   1188c:	ldr	r0, [r6]
   11890:	b	11854 <__assert_fail@plt+0x260>
   11894:	mov	r1, r4
   11898:	ldr	r0, [r6]
   1189c:	bl	11d58 <__assert_fail@plt+0x764>
   118a0:	b	11768 <__assert_fail@plt+0x174>
   118a4:	mov	r3, #1
   118a8:	mov	r2, #6
   118ac:	mov	r1, r4
   118b0:	ldr	r0, [r6]
   118b4:	bl	11c90 <__assert_fail@plt+0x69c>
   118b8:	mov	r3, #1
   118bc:	strh	r3, [r5]
   118c0:	b	11744 <__assert_fail@plt+0x150>
   118c4:	ldrdeq	lr, [r1], -r4
   118c8:	andeq	ip, r1, r4, lsl #29
   118cc:	andeq	sp, r1, ip, ror #21
   118d0:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   118d4:	muleq	r1, r8, lr
   118d8:	andeq	pc, r2, ip, asr r2	; <UNPREDICTABLE>
   118dc:	andeq	pc, r2, r0, ror #4
   118e0:	strdeq	r1, [r1], -r8
   118e4:	andeq	pc, r2, r8, lsl #3
   118e8:	andeq	pc, r2, r0, ror r4	; <UNPREDICTABLE>
   118ec:	andeq	pc, r2, r8, ror r4	; <UNPREDICTABLE>
   118f0:	andeq	pc, r2, r4, ror r4	; <UNPREDICTABLE>
   118f4:	andeq	pc, r2, ip, ror r4	; <UNPREDICTABLE>
   118f8:	andeq	pc, r2, r4, asr r1	; <UNPREDICTABLE>
   118fc:			; <UNDEFINED> instruction: 0x0001ceb0
   11900:	strdeq	pc, [r2], -r4
   11904:	muleq	r1, ip, lr
   11908:	mov	fp, #0
   1190c:	mov	lr, #0
   11910:	pop	{r1}		; (ldr r1, [sp], #4)
   11914:	mov	r2, sp
   11918:	push	{r2}		; (str r2, [sp, #-4]!)
   1191c:	push	{r0}		; (str r0, [sp, #-4]!)
   11920:	ldr	ip, [pc, #16]	; 11938 <__assert_fail@plt+0x344>
   11924:	push	{ip}		; (str ip, [sp, #-4]!)
   11928:	ldr	r0, [pc, #12]	; 1193c <__assert_fail@plt+0x348>
   1192c:	ldr	r3, [pc, #12]	; 11940 <__assert_fail@plt+0x34c>
   11930:	bl	11408 <__libc_start_main@plt>
   11934:	bl	115d0 <abort@plt>
   11938:	andeq	ip, r1, r0, asr #26
   1193c:	andeq	r1, r1, r0, lsl #12
   11940:	andeq	ip, r1, r0, ror #25
   11944:	ldr	r3, [pc, #20]	; 11960 <__assert_fail@plt+0x36c>
   11948:	ldr	r2, [pc, #20]	; 11964 <__assert_fail@plt+0x370>
   1194c:	add	r3, pc, r3
   11950:	ldr	r2, [r3, r2]
   11954:	cmp	r2, #0
   11958:	bxeq	lr
   1195c:	b	11438 <__gmon_start__@plt>
   11960:	andeq	sp, r1, ip, lsr #13
   11964:	andeq	r0, r0, r8, asr #2
   11968:	ldr	r0, [pc, #24]	; 11988 <__assert_fail@plt+0x394>
   1196c:	ldr	r3, [pc, #24]	; 1198c <__assert_fail@plt+0x398>
   11970:	cmp	r3, r0
   11974:	bxeq	lr
   11978:	ldr	r3, [pc, #16]	; 11990 <__assert_fail@plt+0x39c>
   1197c:	cmp	r3, #0
   11980:	bxeq	lr
   11984:	bx	r3
   11988:	ldrdeq	pc, [r2], -ip
   1198c:	ldrdeq	pc, [r2], -ip
   11990:	andeq	r0, r0, r0
   11994:	ldr	r0, [pc, #36]	; 119c0 <__assert_fail@plt+0x3cc>
   11998:	ldr	r1, [pc, #36]	; 119c4 <__assert_fail@plt+0x3d0>
   1199c:	sub	r1, r1, r0
   119a0:	asr	r1, r1, #2
   119a4:	add	r1, r1, r1, lsr #31
   119a8:	asrs	r1, r1, #1
   119ac:	bxeq	lr
   119b0:	ldr	r3, [pc, #16]	; 119c8 <__assert_fail@plt+0x3d4>
   119b4:	cmp	r3, #0
   119b8:	bxeq	lr
   119bc:	bx	r3
   119c0:	ldrdeq	pc, [r2], -ip
   119c4:	ldrdeq	pc, [r2], -ip
   119c8:	andeq	r0, r0, r0
   119cc:	push	{r4, lr}
   119d0:	ldr	r4, [pc, #24]	; 119f0 <__assert_fail@plt+0x3fc>
   119d4:	ldrb	r3, [r4]
   119d8:	cmp	r3, #0
   119dc:	popne	{r4, pc}
   119e0:	bl	11968 <__assert_fail@plt+0x374>
   119e4:	mov	r3, #1
   119e8:	strb	r3, [r4]
   119ec:	pop	{r4, pc}
   119f0:	strdeq	pc, [r2], -r0
   119f4:	b	11994 <__assert_fail@plt+0x3a0>
   119f8:	push	{r4, lr}
   119fc:	mov	r0, #2
   11a00:	bl	1145c <exit@plt>
   11a04:	push	{r4, r5, r6, lr}
   11a08:	sub	sp, sp, #16
   11a0c:	ldr	r6, [pc, #424]	; 11bbc <__assert_fail@plt+0x5c8>
   11a10:	cmp	r0, #116	; 0x74
   11a14:	ldr	r3, [r6]
   11a18:	str	r3, [sp, #12]
   11a1c:	mov	r3, r1
   11a20:	beq	11acc <__assert_fail@plt+0x4d8>
   11a24:	mov	r4, r0
   11a28:	ble	11a80 <__assert_fail@plt+0x48c>
   11a2c:	cmp	r0, #256	; 0x100
   11a30:	beq	11ae4 <__assert_fail@plt+0x4f0>
   11a34:	ldr	r3, [pc, #388]	; 11bc0 <__assert_fail@plt+0x5cc>
   11a38:	cmp	r0, r3
   11a3c:	bne	11adc <__assert_fail@plt+0x4e8>
   11a40:	ldr	r3, [pc, #380]	; 11bc4 <__assert_fail@plt+0x5d0>
   11a44:	ldr	r3, [r3]
   11a48:	cmp	r3, #0
   11a4c:	beq	11b5c <__assert_fail@plt+0x568>
   11a50:	ldr	r4, [pc, #368]	; 11bc8 <__assert_fail@plt+0x5d4>
   11a54:	ldr	r3, [r4]
   11a58:	cmp	r3, #0
   11a5c:	beq	11b74 <__assert_fail@plt+0x580>
   11a60:	mov	r5, #0
   11a64:	ldr	r2, [sp, #12]
   11a68:	ldr	r3, [r6]
   11a6c:	mov	r0, r5
   11a70:	cmp	r2, r3
   11a74:	bne	11bb8 <__assert_fail@plt+0x5c4>
   11a78:	add	sp, sp, #16
   11a7c:	pop	{r4, r5, r6, pc}
   11a80:	cmp	r0, #0
   11a84:	bne	11ac4 <__assert_fail@plt+0x4d0>
   11a88:	ldr	r0, [pc, #308]	; 11bc4 <__assert_fail@plt+0x5d0>
   11a8c:	ldr	r5, [r0]
   11a90:	add	ip, r5, #1
   11a94:	cmp	r5, #0
   11a98:	str	ip, [r0]
   11a9c:	beq	11b20 <__assert_fail@plt+0x52c>
   11aa0:	cmp	r5, #1
   11aa4:	beq	11af4 <__assert_fail@plt+0x500>
   11aa8:	ldr	r3, [pc, #284]	; 11bcc <__assert_fail@plt+0x5d8>
   11aac:	mov	r0, r2
   11ab0:	ldr	r2, [pc, #280]	; 11bd0 <__assert_fail@plt+0x5dc>
   11ab4:	ldr	r1, [r3]
   11ab8:	mov	r5, r4
   11abc:	bl	16f64 <argp_state_help@@Base>
   11ac0:	b	11a64 <__assert_fail@plt+0x470>
   11ac4:	cmp	r0, #102	; 0x66
   11ac8:	bne	11adc <__assert_fail@plt+0x4e8>
   11acc:	ldr	r2, [pc, #244]	; 11bc8 <__assert_fail@plt+0x5d4>
   11ad0:	mov	r5, #0
   11ad4:	str	r3, [r2]
   11ad8:	b	11a64 <__assert_fail@plt+0x470>
   11adc:	mov	r5, #7
   11ae0:	b	11a64 <__assert_fail@plt+0x470>
   11ae4:	ldr	r2, [pc, #216]	; 11bc4 <__assert_fail@plt+0x5d0>
   11ae8:	mov	r5, #0
   11aec:	str	r1, [r2, #4]
   11af0:	b	11a64 <__assert_fail@plt+0x470>
   11af4:	mov	r0, r1
   11af8:	mov	r2, r4
   11afc:	add	r1, sp, #8
   11b00:	bl	11288 <strtol@plt>
   11b04:	ldr	r3, [sp, #8]
   11b08:	ldrb	r3, [r3]
   11b0c:	cmp	r3, #0
   11b10:	bne	11b94 <__assert_fail@plt+0x5a0>
   11b14:	ldr	r3, [pc, #184]	; 11bd4 <__assert_fail@plt+0x5e0>
   11b18:	str	r0, [r3, #36]	; 0x24
   11b1c:	b	11a60 <__assert_fail@plt+0x46c>
   11b20:	ldr	r3, [pc, #176]	; 11bd8 <__assert_fail@plt+0x5e4>
   11b24:	ldr	r4, [pc, #168]	; 11bd4 <__assert_fail@plt+0x5e0>
   11b28:	mov	r2, #2
   11b2c:	ldr	r0, [r3]
   11b30:	mov	r3, r4
   11b34:	str	r0, [sp, #4]
   11b38:	str	r2, [sp]
   11b3c:	ldr	r0, [pc, #152]	; 11bdc <__assert_fail@plt+0x5e8>
   11b40:	ldr	r2, [pc, #152]	; 11be0 <__assert_fail@plt+0x5ec>
   11b44:	bl	13b58 <__assert_fail@plt+0x2564>
   11b48:	ldr	r3, [pc, #148]	; 11be4 <__assert_fail@plt+0x5f0>
   11b4c:	lsl	r0, r0, #1
   11b50:	ldrh	r2, [r4, r0]
   11b54:	strh	r2, [r3]
   11b58:	b	11a64 <__assert_fail@plt+0x470>
   11b5c:	ldr	r3, [pc, #104]	; 11bcc <__assert_fail@plt+0x5d8>
   11b60:	mov	r0, r2
   11b64:	ldr	r2, [pc, #100]	; 11bd0 <__assert_fail@plt+0x5dc>
   11b68:	ldr	r1, [r3]
   11b6c:	bl	16f64 <argp_state_help@@Base>
   11b70:	b	11a50 <__assert_fail@plt+0x45c>
   11b74:	ldr	r0, [pc, #108]	; 11be8 <__assert_fail@plt+0x5f4>
   11b78:	bl	113e4 <getenv@plt>
   11b7c:	subs	r5, r0, #0
   11b80:	strne	r5, [r4]
   11b84:	bne	11a60 <__assert_fail@plt+0x46c>
   11b88:	ldr	r3, [pc, #92]	; 11bec <__assert_fail@plt+0x5f8>
   11b8c:	str	r3, [r4]
   11b90:	b	11a64 <__assert_fail@plt+0x470>
   11b94:	mov	r2, #5
   11b98:	ldr	r1, [pc, #80]	; 11bf0 <__assert_fail@plt+0x5fc>
   11b9c:	mov	r0, r4
   11ba0:	bl	11330 <dcgettext@plt>
   11ba4:	mov	r1, r4
   11ba8:	mov	r2, r0
   11bac:	mov	r0, r5
   11bb0:	bl	113cc <error@plt>
   11bb4:	b	11a60 <__assert_fail@plt+0x46c>
   11bb8:	bl	1133c <__stack_chk_fail@plt>
   11bbc:	andeq	lr, r2, r8, lsl #30
   11bc0:	tsteq	r0, r7
   11bc4:	strdeq	pc, [r2], -r4
   11bc8:	andeq	pc, r2, r4, ror r4	; <UNPREDICTABLE>
   11bcc:	andeq	pc, r2, r8, ror #5
   11bd0:	andeq	r0, r0, r6, lsl #2
   11bd4:	andeq	pc, r2, r4, asr r1	; <UNPREDICTABLE>
   11bd8:	andeq	pc, r2, ip, asr r2	; <UNPREDICTABLE>
   11bdc:	muleq	r1, ip, sp
   11be0:	andeq	ip, r1, r0, asr sp
   11be4:	andeq	pc, r2, r0, ror r4	; <UNPREDICTABLE>
   11be8:			; <UNDEFINED> instruction: 0x0001cdbc
   11bec:	andeq	ip, r1, r4, asr #27
   11bf0:	andeq	ip, r1, r8, lsr #27
   11bf4:	push	{r4, r5, lr}
   11bf8:	sub	sp, sp, #116	; 0x74
   11bfc:	ldr	r4, [pc, #120]	; 11c7c <__assert_fail@plt+0x688>
   11c00:	mov	r5, r0
   11c04:	mov	r2, sp
   11c08:	ldr	r3, [r4]
   11c0c:	mov	r0, #3
   11c10:	str	r3, [sp, #108]	; 0x6c
   11c14:	bl	11390 <__fxstat64@plt>
   11c18:	cmn	r0, #1
   11c1c:	beq	11c6c <__assert_fail@plt+0x678>
   11c20:	ldr	r3, [sp, #16]
   11c24:	and	r3, r3, #61440	; 0xf000
   11c28:	cmp	r3, #8192	; 0x2000
   11c2c:	beq	11c54 <__assert_fail@plt+0x660>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #68]	; 11c80 <__assert_fail@plt+0x68c>
   11c38:	mov	r0, #0
   11c3c:	bl	11330 <dcgettext@plt>
   11c40:	mov	r3, r5
   11c44:	mov	r1, #0
   11c48:	mov	r2, r0
   11c4c:	mov	r0, #1
   11c50:	bl	113cc <error@plt>
   11c54:	ldr	r2, [sp, #108]	; 0x6c
   11c58:	ldr	r3, [r4]
   11c5c:	cmp	r2, r3
   11c60:	bne	11c78 <__assert_fail@plt+0x684>
   11c64:	add	sp, sp, #116	; 0x74
   11c68:	pop	{r4, r5, pc}
   11c6c:	mov	r0, r5
   11c70:	bl	137a8 <__assert_fail@plt+0x21b4>
   11c74:	b	11c20 <__assert_fail@plt+0x62c>
   11c78:	bl	1133c <__stack_chk_fail@plt>
   11c7c:	andeq	lr, r2, r8, lsl #30
   11c80:	ldrdeq	ip, [r1], -r0
   11c84:	cmn	r1, #-1073741823	; 0xc0000001
   11c88:	bxgt	lr
   11c8c:	b	11bf4 <__assert_fail@plt+0x600>
   11c90:	push	{r4, r5, r6, lr}
   11c94:	sub	sp, sp, #16
   11c98:	ldr	r4, [pc, #172]	; 11d4c <__assert_fail@plt+0x758>
   11c9c:	cmn	r1, #-1073741823	; 0xc0000001
   11ca0:	mov	r5, r0
   11ca4:	ldr	ip, [r4]
   11ca8:	strh	r2, [sp, #4]
   11cac:	str	r3, [sp, #8]
   11cb0:	str	ip, [sp, #12]
   11cb4:	ble	11cf4 <__assert_fail@plt+0x700>
   11cb8:	add	r0, r1, #-1073741824	; 0xc0000000
   11cbc:	add	r2, sp, #4
   11cc0:	ldr	r1, [pc, #136]	; 11d50 <__assert_fail@plt+0x75c>
   11cc4:	bl	12bfc <__assert_fail@plt+0x1608>
   11cc8:	cmn	r0, #1
   11ccc:	movne	r0, #0
   11cd0:	moveq	r0, #1
   11cd4:	cmp	r0, #0
   11cd8:	bne	11d18 <__assert_fail@plt+0x724>
   11cdc:	ldr	r2, [sp, #12]
   11ce0:	ldr	r3, [r4]
   11ce4:	cmp	r2, r3
   11ce8:	bne	11d48 <__assert_fail@plt+0x754>
   11cec:	add	sp, sp, #16
   11cf0:	pop	{r4, r5, r6, pc}
   11cf4:	mov	r0, r1
   11cf8:	add	r2, sp, #4
   11cfc:	ldr	r1, [pc, #76]	; 11d50 <__assert_fail@plt+0x75c>
   11d00:	bl	113a8 <ioctl@plt>
   11d04:	cmn	r0, #1
   11d08:	movne	r0, #0
   11d0c:	moveq	r0, #1
   11d10:	cmp	r0, #0
   11d14:	beq	11cdc <__assert_fail@plt+0x6e8>
   11d18:	bl	1148c <__errno_location@plt>
   11d1c:	mov	r2, #5
   11d20:	ldr	r1, [pc, #44]	; 11d54 <__assert_fail@plt+0x760>
   11d24:	ldr	r6, [r0]
   11d28:	mov	r0, #0
   11d2c:	bl	11330 <dcgettext@plt>
   11d30:	mov	r3, r5
   11d34:	mov	r1, r6
   11d38:	mov	r2, r0
   11d3c:	mov	r0, #2
   11d40:	bl	113cc <error@plt>
   11d44:	b	11cdc <__assert_fail@plt+0x6e8>
   11d48:	bl	1133c <__stack_chk_fail@plt>
   11d4c:	andeq	lr, r2, r8, lsl #30
   11d50:	andmi	r6, r8, r1, lsl #26
   11d54:	strdeq	ip, [r1], -r4
   11d58:	push	{r4, r5, r6, lr}
   11d5c:	sub	sp, sp, #32
   11d60:	ldr	r4, [pc, #260]	; 11e6c <__assert_fail@plt+0x878>
   11d64:	cmn	r1, #-1073741823	; 0xc0000001
   11d68:	mov	r5, r0
   11d6c:	ldr	r3, [r4]
   11d70:	str	r3, [sp, #28]
   11d74:	ble	11e14 <__assert_fail@plt+0x820>
   11d78:	add	r0, r1, #-1073741824	; 0xc0000000
   11d7c:	mov	r2, sp
   11d80:	ldr	r1, [pc, #232]	; 11e70 <__assert_fail@plt+0x87c>
   11d84:	bl	12bfc <__assert_fail@plt+0x1608>
   11d88:	cmn	r0, #1
   11d8c:	movne	r0, #0
   11d90:	moveq	r0, #1
   11d94:	cmp	r0, #0
   11d98:	bne	11e38 <__assert_fail@plt+0x844>
   11d9c:	ldr	r2, [sp]
   11da0:	ldr	r1, [pc, #204]	; 11e74 <__assert_fail@plt+0x880>
   11da4:	mov	r0, #1
   11da8:	bl	114d4 <__printf_chk@plt>
   11dac:	ldr	r2, [sp, #8]
   11db0:	ldr	r1, [pc, #192]	; 11e78 <__assert_fail@plt+0x884>
   11db4:	mov	r0, #1
   11db8:	bl	114d4 <__printf_chk@plt>
   11dbc:	ldr	r2, [sp, #16]
   11dc0:	ldr	r1, [pc, #180]	; 11e7c <__assert_fail@plt+0x888>
   11dc4:	mov	r0, #1
   11dc8:	bl	114d4 <__printf_chk@plt>
   11dcc:	ldr	r2, [sp, #4]
   11dd0:	ldr	r1, [pc, #168]	; 11e80 <__assert_fail@plt+0x88c>
   11dd4:	mov	r0, #1
   11dd8:	bl	114d4 <__printf_chk@plt>
   11ddc:	ldr	r2, [sp, #20]
   11de0:	ldr	r1, [pc, #156]	; 11e84 <__assert_fail@plt+0x890>
   11de4:	mov	r0, #1
   11de8:	bl	114d4 <__printf_chk@plt>
   11dec:	ldr	r2, [sp, #24]
   11df0:	ldr	r1, [pc, #144]	; 11e88 <__assert_fail@plt+0x894>
   11df4:	mov	r0, #1
   11df8:	bl	114d4 <__printf_chk@plt>
   11dfc:	ldr	r2, [sp, #28]
   11e00:	ldr	r3, [r4]
   11e04:	cmp	r2, r3
   11e08:	bne	11e68 <__assert_fail@plt+0x874>
   11e0c:	add	sp, sp, #32
   11e10:	pop	{r4, r5, r6, pc}
   11e14:	mov	r0, r1
   11e18:	mov	r2, sp
   11e1c:	ldr	r1, [pc, #76]	; 11e70 <__assert_fail@plt+0x87c>
   11e20:	bl	113a8 <ioctl@plt>
   11e24:	cmn	r0, #1
   11e28:	movne	r0, #0
   11e2c:	moveq	r0, #1
   11e30:	cmp	r0, #0
   11e34:	beq	11d9c <__assert_fail@plt+0x7a8>
   11e38:	bl	1148c <__errno_location@plt>
   11e3c:	mov	r2, #5
   11e40:	ldr	r1, [pc, #68]	; 11e8c <__assert_fail@plt+0x898>
   11e44:	ldr	r6, [r0]
   11e48:	mov	r0, #0
   11e4c:	bl	11330 <dcgettext@plt>
   11e50:	mov	r3, r5
   11e54:	mov	r1, r6
   11e58:	mov	r2, r0
   11e5c:	mov	r0, #2
   11e60:	bl	113cc <error@plt>
   11e64:	b	11d9c <__assert_fail@plt+0x7a8>
   11e68:	bl	1133c <__stack_chk_fail@plt>
   11e6c:	andeq	lr, r2, r8, lsl #30
   11e70:	andshi	r6, ip, r2, lsl #26
   11e74:	andeq	ip, r1, r8, lsl #28
   11e78:	andeq	ip, r1, ip, lsl lr
   11e7c:	andeq	ip, r1, r0, lsr lr
   11e80:	andeq	ip, r1, r8, asr #28
   11e84:	andeq	ip, r1, ip, asr lr
   11e88:	andeq	ip, r1, r0, ror lr
   11e8c:	strdeq	ip, [r1], -r4
   11e90:	push	{r4, r5, r6, r7, r8, lr}
   11e94:	mov	r5, r0
   11e98:	ldr	r4, [pc, #44]	; 11ecc <__assert_fail@plt+0x8d8>
   11e9c:	mov	r7, r1
   11ea0:	add	r6, r4, r0, lsl #3
   11ea4:	ldr	r0, [r4, r0, lsl #3]
   11ea8:	bl	115dc <close@plt>
   11eac:	ldr	r0, [r6, #36]	; 0x24
   11eb0:	bl	115dc <close@plt>
   11eb4:	mvn	r3, #0
   11eb8:	str	r3, [r4, r5, lsl #3]
   11ebc:	str	r3, [r6, #36]	; 0x24
   11ec0:	bl	1148c <__errno_location@plt>
   11ec4:	str	r7, [r0]
   11ec8:	pop	{r4, r5, r6, r7, r8, pc}
   11ecc:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   11ed0:	push	{r4, r5, r6, r7, r8, lr}
   11ed4:	mov	r6, r0
   11ed8:	mov	r0, r1
   11edc:	mov	r5, r1
   11ee0:	bl	11468 <strlen@plt>
   11ee4:	mov	r1, #1
   11ee8:	mov	r4, r0
   11eec:	mov	r0, #13
   11ef0:	bl	11300 <signal@plt>
   11ef4:	ldr	r3, [pc, #72]	; 11f44 <__assert_fail@plt+0x950>
   11ef8:	mov	r1, r5
   11efc:	add	r3, r3, r6, lsl #3
   11f00:	mov	r2, r4
   11f04:	mov	r7, r0
   11f08:	ldr	r0, [r3, #36]	; 0x24
   11f0c:	bl	18684 <argp_parse@@Base+0xf70>
   11f10:	mov	r1, r7
   11f14:	mov	r5, r0
   11f18:	mov	r0, #13
   11f1c:	bl	11300 <signal@plt>
   11f20:	cmp	r5, r4
   11f24:	bne	11f30 <__assert_fail@plt+0x93c>
   11f28:	mov	r0, #0
   11f2c:	pop	{r4, r5, r6, r7, r8, pc}
   11f30:	mov	r0, r6
   11f34:	mov	r1, #5
   11f38:	bl	11e90 <__assert_fail@plt+0x89c>
   11f3c:	mvn	r0, #0
   11f40:	pop	{r4, r5, r6, r7, r8, pc}
   11f44:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   11f48:	push	{r4, r5, r6, r7, r8, r9, lr}
   11f4c:	sub	sp, sp, #12
   11f50:	ldr	r7, [pc, #296]	; 12080 <__assert_fail@plt+0xa8c>
   11f54:	mov	r5, r1
   11f58:	ldr	r8, [pc, #292]	; 12084 <__assert_fail@plt+0xa90>
   11f5c:	ldr	r3, [r7]
   11f60:	mov	r6, r0
   11f64:	mov	r4, r1
   11f68:	add	r9, r1, #64	; 0x40
   11f6c:	str	r3, [sp, #4]
   11f70:	b	11f8c <__assert_fail@plt+0x998>
   11f74:	ldrb	r2, [r4]
   11f78:	add	r4, r4, #1
   11f7c:	cmp	r2, #10
   11f80:	beq	11fd0 <__assert_fail@plt+0x9dc>
   11f84:	cmp	r4, r9
   11f88:	beq	11fa8 <__assert_fail@plt+0x9b4>
   11f8c:	mov	r2, #1
   11f90:	mov	r1, r4
   11f94:	ldr	r0, [r8, r6, lsl #3]
   11f98:	bl	1a3b8 <argp_parse@@Base+0x2ca4>
   11f9c:	mov	r3, r4
   11fa0:	cmp	r0, #1
   11fa4:	beq	11f74 <__assert_fail@plt+0x980>
   11fa8:	mov	r0, r6
   11fac:	mov	r1, #5
   11fb0:	bl	11e90 <__assert_fail@plt+0x89c>
   11fb4:	mov	r0, #0
   11fb8:	ldr	r2, [sp, #4]
   11fbc:	ldr	r3, [r7]
   11fc0:	cmp	r2, r3
   11fc4:	bne	1207c <__assert_fail@plt+0xa88>
   11fc8:	add	sp, sp, #12
   11fcc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11fd0:	mov	r2, #0
   11fd4:	strb	r2, [r3]
   11fd8:	ldrb	r3, [r5]
   11fdc:	cmp	r3, r2
   11fe0:	bne	11ff4 <__assert_fail@plt+0xa00>
   11fe4:	b	11fa8 <__assert_fail@plt+0x9b4>
   11fe8:	ldrb	r3, [r5, #1]!
   11fec:	cmp	r3, #0
   11ff0:	beq	11fa8 <__assert_fail@plt+0x9b4>
   11ff4:	cmp	r3, #32
   11ff8:	beq	11fe8 <__assert_fail@plt+0x9f4>
   11ffc:	sub	r2, r3, #69	; 0x45
   12000:	cmp	r2, #1
   12004:	bls	12024 <__assert_fail@plt+0xa30>
   12008:	cmp	r3, #65	; 0x41
   1200c:	bne	11fa8 <__assert_fail@plt+0x9b4>
   12010:	add	r0, r5, #1
   12014:	b	11fb8 <__assert_fail@plt+0x9c4>
   12018:	ldrb	r3, [sp, #3]
   1201c:	cmp	r3, #10
   12020:	beq	1203c <__assert_fail@plt+0xa48>
   12024:	mov	r2, #1
   12028:	add	r1, sp, #3
   1202c:	ldr	r0, [r8, r6, lsl #3]
   12030:	bl	1a3b8 <argp_parse@@Base+0x2ca4>
   12034:	cmp	r0, #1
   12038:	beq	12018 <__assert_fail@plt+0xa24>
   1203c:	bl	1148c <__errno_location@plt>
   12040:	mov	r2, #10
   12044:	mov	r1, #0
   12048:	mov	r4, r0
   1204c:	add	r0, r5, #1
   12050:	bl	11288 <strtol@plt>
   12054:	str	r0, [r4]
   12058:	ldrb	r3, [r5]
   1205c:	cmp	r3, #70	; 0x46
   12060:	movne	r0, #0
   12064:	bne	11fb8 <__assert_fail@plt+0x9c4>
   12068:	mov	r1, r0
   1206c:	mov	r0, r6
   12070:	bl	11e90 <__assert_fail@plt+0x89c>
   12074:	mov	r0, #0
   12078:	b	11fb8 <__assert_fail@plt+0x9c4>
   1207c:	bl	1133c <__stack_chk_fail@plt>
   12080:	andeq	lr, r2, r8, lsl #30
   12084:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   12088:	push	{r4, lr}
   1208c:	sub	sp, sp, #72	; 0x48
   12090:	ldr	r4, [pc, #100]	; 120fc <__assert_fail@plt+0xb08>
   12094:	add	r1, sp, #4
   12098:	ldr	r3, [r4]
   1209c:	str	r3, [sp, #68]	; 0x44
   120a0:	bl	11f48 <__assert_fail@plt+0x954>
   120a4:	cmp	r0, #0
   120a8:	beq	120f0 <__assert_fail@plt+0xafc>
   120ac:	mov	r2, #10
   120b0:	mov	r1, #0
   120b4:	bl	11288 <strtol@plt>
   120b8:	subs	r3, r0, #0
   120bc:	blt	120dc <__assert_fail@plt+0xae8>
   120c0:	ldr	r1, [sp, #68]	; 0x44
   120c4:	ldr	r2, [r4]
   120c8:	mov	r0, r3
   120cc:	cmp	r1, r2
   120d0:	bne	120f8 <__assert_fail@plt+0xb04>
   120d4:	add	sp, sp, #72	; 0x48
   120d8:	pop	{r4, pc}
   120dc:	bl	1148c <__errno_location@plt>
   120e0:	mov	r2, #5
   120e4:	mvn	r3, #0
   120e8:	str	r2, [r0]
   120ec:	b	120c0 <__assert_fail@plt+0xacc>
   120f0:	mvn	r3, #0
   120f4:	b	120c0 <__assert_fail@plt+0xacc>
   120f8:	bl	1133c <__stack_chk_fail@plt>
   120fc:	andeq	lr, r2, r8, lsl #30
   12100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12104:	mov	sl, r1
   12108:	ldr	r5, [pc, #1656]	; 12788 <__assert_fail@plt+0x1194>
   1210c:	sub	sp, sp, #44	; 0x2c
   12110:	add	fp, r5, #32
   12114:	mov	r4, #0
   12118:	str	r2, [sp, #28]
   1211c:	str	r3, [sp, #24]
   12120:	ldr	r3, [r5, r4, lsl #3]
   12124:	cmn	r3, #1
   12128:	beq	1214c <__assert_fail@plt+0xb58>
   1212c:	add	r4, r4, #1
   12130:	cmp	r4, #4
   12134:	bne	12120 <__assert_fail@plt+0xb2c>
   12138:	bl	1148c <__errno_location@plt>
   1213c:	mov	r3, #24
   12140:	mvn	r9, #0
   12144:	str	r3, [r0]
   12148:	b	12494 <__assert_fail@plt+0xea0>
   1214c:	lsl	r8, r4, #3
   12150:	add	r3, fp, r8
   12154:	ldr	r9, [r3, #4]
   12158:	cmn	r9, #1
   1215c:	bne	1212c <__assert_fail@plt+0xb38>
   12160:	bl	1aba4 <argp_parse@@Base+0x3490>
   12164:	ldrb	r3, [r0]
   12168:	mov	r6, r0
   1216c:	cmp	r3, #0
   12170:	movne	r7, #0
   12174:	movne	r1, r7
   12178:	addne	r2, r0, #1
   1217c:	strne	r0, [sp, #20]
   12180:	beq	12694 <__assert_fail@plt+0x10a0>
   12184:	cmp	r3, #58	; 0x3a
   12188:	beq	12470 <__assert_fail@plt+0xe7c>
   1218c:	cmp	r3, #64	; 0x40
   12190:	beq	124a0 <__assert_fail@plt+0xeac>
   12194:	cmp	r3, #10
   12198:	beq	12480 <__assert_fail@plt+0xe8c>
   1219c:	ldrb	r3, [r2], #1
   121a0:	cmp	r3, #0
   121a4:	bne	12184 <__assert_fail@plt+0xb90>
   121a8:	ldr	r0, [sp, #20]
   121ac:	str	r1, [sp, #32]
   121b0:	bl	115ac <gethostbyname@plt>
   121b4:	cmp	r0, #0
   121b8:	beq	126e4 <__assert_fail@plt+0x10f0>
   121bc:	cmp	r7, #0
   121c0:	beq	121d0 <__assert_fail@plt+0xbdc>
   121c4:	ldrb	r3, [r7]
   121c8:	cmp	r3, #0
   121cc:	moveq	r7, #0
   121d0:	ldr	r3, [sp, #24]
   121d4:	cmp	r3, #0
   121d8:	beq	12758 <__assert_fail@plt+0x1164>
   121dc:	ldr	r0, [sp, #24]
   121e0:	bl	185e4 <argp_parse@@Base+0xed0>
   121e4:	str	r0, [sp, #36]	; 0x24
   121e8:	add	r0, fp, r8
   121ec:	bl	11510 <pipe@plt>
   121f0:	cmn	r0, #1
   121f4:	beq	1274c <__assert_fail@plt+0x1158>
   121f8:	add	fp, r5, r8
   121fc:	mov	r0, fp
   12200:	bl	11510 <pipe@plt>
   12204:	cmn	r0, #1
   12208:	beq	1274c <__assert_fail@plt+0x1158>
   1220c:	bl	11540 <fork@plt>
   12210:	cmn	r0, #1
   12214:	mov	r1, r0
   12218:	beq	12770 <__assert_fail@plt+0x117c>
   1221c:	cmp	r0, #0
   12220:	bne	12324 <__assert_fail@plt+0xd30>
   12224:	ldr	r0, [fp, #32]
   12228:	bl	11348 <dup2@plt>
   1222c:	cmp	r0, #0
   12230:	blt	12288 <__assert_fail@plt+0xc94>
   12234:	ldr	r0, [fp, #32]
   12238:	cmp	r0, #0
   1223c:	bne	126cc <__assert_fail@plt+0x10d8>
   12240:	add	r3, r5, r8
   12244:	ldr	r0, [r3, #36]	; 0x24
   12248:	cmp	r0, #0
   1224c:	bne	126bc <__assert_fail@plt+0x10c8>
   12250:	add	fp, r5, r8
   12254:	mov	r1, #1
   12258:	ldr	r0, [fp, #4]
   1225c:	bl	11348 <dup2@plt>
   12260:	cmp	r0, #0
   12264:	blt	12288 <__assert_fail@plt+0xc94>
   12268:	ldr	r0, [r5, r4, lsl #3]
   1226c:	bl	115dc <close@plt>
   12270:	cmp	r0, #0
   12274:	bne	12288 <__assert_fail@plt+0xc94>
   12278:	ldr	r0, [fp, #4]
   1227c:	bl	115dc <close@plt>
   12280:	cmp	r0, #0
   12284:	beq	122b0 <__assert_fail@plt+0xcbc>
   12288:	bl	1148c <__errno_location@plt>
   1228c:	mov	r2, #5
   12290:	ldr	r1, [pc, #1268]	; 1278c <__assert_fail@plt+0x1198>
   12294:	ldr	fp, [r0]
   12298:	mov	r0, #0
   1229c:	bl	11330 <dcgettext@plt>
   122a0:	mov	r1, fp
   122a4:	mov	r2, r0
   122a8:	mov	r0, #128	; 0x80
   122ac:	bl	113cc <error@plt>
   122b0:	bl	112a0 <getuid@plt>
   122b4:	bl	1157c <setuid@plt>
   122b8:	cmp	r0, #0
   122bc:	bne	124bc <__assert_fail@plt+0xec8>
   122c0:	bl	114b0 <getgid@plt>
   122c4:	bl	113f0 <setgid@plt>
   122c8:	cmp	r0, #0
   122cc:	bne	124bc <__assert_fail@plt+0xec8>
   122d0:	cmp	r7, #0
   122d4:	ldr	r3, [r5, #64]	; 0x40
   122d8:	beq	1270c <__assert_fail@plt+0x1118>
   122dc:	str	r0, [sp, #8]
   122e0:	str	r3, [sp, #4]
   122e4:	str	r7, [sp]
   122e8:	ldr	r2, [sp, #20]
   122ec:	ldr	r1, [sp, #36]	; 0x24
   122f0:	ldr	r0, [sp, #24]
   122f4:	ldr	r3, [pc, #1172]	; 12790 <__assert_fail@plt+0x119c>
   122f8:	bl	1154c <execl@plt>
   122fc:	bl	1148c <__errno_location@plt>
   12300:	mov	r2, #5
   12304:	ldr	r1, [pc, #1160]	; 12794 <__assert_fail@plt+0x11a0>
   12308:	ldr	r7, [r0]
   1230c:	mov	r0, #0
   12310:	bl	11330 <dcgettext@plt>
   12314:	mov	r1, r7
   12318:	mov	r2, r0
   1231c:	mov	r0, #128	; 0x80
   12320:	bl	113cc <error@plt>
   12324:	add	r5, r5, r8
   12328:	ldr	r0, [r5, #4]
   1232c:	bl	115dc <close@plt>
   12330:	ldr	r0, [r5, #32]
   12334:	bl	115dc <close@plt>
   12338:	ldr	r8, [sp, #32]
   1233c:	mov	r0, r8
   12340:	bl	11468 <strlen@plt>
   12344:	mov	r5, r0
   12348:	add	r0, r0, #1000	; 0x3e8
   1234c:	bl	1a9e0 <argp_parse@@Base+0x32cc>
   12350:	add	r5, r5, #2
   12354:	ldr	r3, [pc, #1084]	; 12798 <__assert_fail@plt+0x11a4>
   12358:	mvn	r2, #0
   1235c:	mov	r1, #1
   12360:	str	r8, [sp]
   12364:	mov	r7, r0
   12368:	add	r5, r7, r5
   1236c:	bl	11498 <__sprintf_chk@plt>
   12370:	ldr	r3, [pc, #1060]	; 1279c <__assert_fail@plt+0x11a8>
   12374:	str	sl, [sp]
   12378:	mov	r0, r5
   1237c:	mvn	r2, #0
   12380:	mov	r1, #1
   12384:	bl	11498 <__sprintf_chk@plt>
   12388:	and	r3, sl, #3
   1238c:	cmp	r3, #1
   12390:	beq	124c0 <__assert_fail@plt+0xecc>
   12394:	cmp	r3, #2
   12398:	bne	124b4 <__assert_fail@plt+0xec0>
   1239c:	mov	r0, r5
   123a0:	bl	11468 <strlen@plt>
   123a4:	ldr	r3, [pc, #1012]	; 127a0 <__assert_fail@plt+0x11ac>
   123a8:	ldrh	ip, [r3, #4]
   123ac:	add	r2, r5, r0
   123b0:	mov	r1, r0
   123b4:	ldr	r0, [r3]
   123b8:	ldrb	r3, [r3, #6]
   123bc:	str	r0, [r5, r1]
   123c0:	strh	ip, [r2, #4]
   123c4:	strb	r3, [r2, #6]
   123c8:	tst	sl, #1024	; 0x400
   123cc:	bne	12668 <__assert_fail@plt+0x1074>
   123d0:	tst	sl, #64	; 0x40
   123d4:	bne	1263c <__assert_fail@plt+0x1048>
   123d8:	tst	sl, #4096	; 0x1000
   123dc:	bne	12610 <__assert_fail@plt+0x101c>
   123e0:	tst	sl, #128	; 0x80
   123e4:	bne	125ec <__assert_fail@plt+0xff8>
   123e8:	tst	sl, #131072	; 0x20000
   123ec:	bne	125bc <__assert_fail@plt+0xfc8>
   123f0:	tst	sl, #256	; 0x100
   123f4:	bne	12590 <__assert_fail@plt+0xf9c>
   123f8:	tst	sl, #2048	; 0x800
   123fc:	bne	12568 <__assert_fail@plt+0xf74>
   12400:	ldr	r3, [pc, #924]	; 127a4 <__assert_fail@plt+0x11b0>
   12404:	tst	sl, r3
   12408:	bne	1252c <__assert_fail@plt+0xf38>
   1240c:	tst	sl, #512	; 0x200
   12410:	bne	12500 <__assert_fail@plt+0xf0c>
   12414:	mov	r0, r7
   12418:	bl	11468 <strlen@plt>
   1241c:	ldr	r3, [pc, #900]	; 127a8 <__assert_fail@plt+0x11b4>
   12420:	mov	r1, r7
   12424:	ldrh	r3, [r3]
   12428:	strh	r3, [r7, r0]
   1242c:	mov	r0, r4
   12430:	bl	11ed0 <__assert_fail@plt+0x8dc>
   12434:	cmn	r0, #1
   12438:	beq	12724 <__assert_fail@plt+0x1130>
   1243c:	mov	r0, r4
   12440:	bl	12088 <__assert_fail@plt+0xa94>
   12444:	cmn	r0, #1
   12448:	beq	12724 <__assert_fail@plt+0x1130>
   1244c:	mov	r0, r7
   12450:	bl	112c4 <free@plt>
   12454:	mov	r0, r6
   12458:	bl	112c4 <free@plt>
   1245c:	ldr	r3, [sp, #28]
   12460:	add	r9, r3, r4
   12464:	mov	r0, r9
   12468:	add	sp, sp, #44	; 0x2c
   1246c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12470:	cmp	r1, #0
   12474:	strbeq	r1, [r2, #-1]
   12478:	moveq	r1, r2
   1247c:	b	1219c <__assert_fail@plt+0xba8>
   12480:	mov	r0, r6
   12484:	bl	112c4 <free@plt>
   12488:	bl	1148c <__errno_location@plt>
   1248c:	mov	r3, #2
   12490:	str	r3, [r0]
   12494:	mov	r0, r9
   12498:	add	sp, sp, #44	; 0x2c
   1249c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a0:	cmp	r7, #0
   124a4:	strbeq	r7, [r2, #-1]
   124a8:	ldreq	r7, [sp, #20]
   124ac:	streq	r2, [sp, #20]
   124b0:	b	1219c <__assert_fail@plt+0xba8>
   124b4:	cmp	r3, #0
   124b8:	beq	124ec <__assert_fail@plt+0xef8>
   124bc:	bl	115d0 <abort@plt>
   124c0:	mov	r0, r5
   124c4:	bl	11468 <strlen@plt>
   124c8:	ldr	r3, [pc, #732]	; 127ac <__assert_fail@plt+0x11b8>
   124cc:	mov	ip, r0
   124d0:	ldm	r3!, {r0, r1}
   124d4:	add	r2, r5, ip
   124d8:	ldrb	r3, [r3]
   124dc:	str	r0, [r5, ip]
   124e0:	str	r1, [r2, #4]
   124e4:	strb	r3, [r2, #8]
   124e8:	b	123c8 <__assert_fail@plt+0xdd4>
   124ec:	mov	r0, r5
   124f0:	bl	11468 <strlen@plt>
   124f4:	ldr	r3, [pc, #692]	; 127b0 <__assert_fail@plt+0x11bc>
   124f8:	mov	ip, r0
   124fc:	b	124d0 <__assert_fail@plt+0xedc>
   12500:	mov	r0, r5
   12504:	bl	11468 <strlen@plt>
   12508:	ldr	r3, [pc, #676]	; 127b4 <__assert_fail@plt+0x11c0>
   1250c:	add	r2, r5, r0
   12510:	mov	ip, r0
   12514:	ldm	r3!, {r0, r1}
   12518:	ldrb	r3, [r3]
   1251c:	str	r0, [r5, ip]
   12520:	str	r1, [r2, #4]
   12524:	strb	r3, [r2, #8]
   12528:	b	12414 <__assert_fail@plt+0xe20>
   1252c:	mov	r0, r5
   12530:	bl	11468 <strlen@plt>
   12534:	ldr	ip, [pc, #636]	; 127b8 <__assert_fail@plt+0x11c4>
   12538:	ldr	r2, [pc, #636]	; 127bc <__assert_fail@plt+0x11c8>
   1253c:	mov	r3, r0
   12540:	ldm	ip!, {r0, r1}
   12544:	add	ip, r5, r3
   12548:	str	r0, [r5, r3]
   1254c:	str	r1, [ip, #4]
   12550:	add	r3, r3, #8
   12554:	ldm	r2!, {r0, r1}
   12558:	add	r2, r5, r3
   1255c:	str	r0, [r5, r3]
   12560:	str	r1, [r2, #4]
   12564:	b	1240c <__assert_fail@plt+0xe18>
   12568:	mov	r0, r5
   1256c:	bl	11468 <strlen@plt>
   12570:	ldr	r3, [pc, #584]	; 127c0 <__assert_fail@plt+0x11cc>
   12574:	add	ip, r5, r0
   12578:	mov	lr, r0
   1257c:	ldm	r3!, {r0, r1, r2}
   12580:	str	r0, [r5, lr]
   12584:	str	r1, [ip, #4]
   12588:	str	r2, [ip, #8]
   1258c:	b	12400 <__assert_fail@plt+0xe0c>
   12590:	mov	r0, r5
   12594:	bl	11468 <strlen@plt>
   12598:	ldr	r3, [pc, #548]	; 127c4 <__assert_fail@plt+0x11d0>
   1259c:	add	r2, r5, r0
   125a0:	mov	ip, r0
   125a4:	ldm	r3!, {r0, r1}
   125a8:	ldrh	r3, [r3]
   125ac:	str	r0, [r5, ip]
   125b0:	str	r1, [r2, #4]
   125b4:	strh	r3, [r2, #8]
   125b8:	b	123f8 <__assert_fail@plt+0xe04>
   125bc:	mov	r0, r5
   125c0:	bl	11468 <strlen@plt>
   125c4:	ldr	r3, [pc, #508]	; 127c8 <__assert_fail@plt+0x11d4>
   125c8:	add	ip, r5, r0
   125cc:	mov	lr, r0
   125d0:	ldm	r3!, {r0, r1, r2}
   125d4:	ldrb	r3, [r3]
   125d8:	str	r0, [r5, lr]
   125dc:	str	r1, [ip, #4]
   125e0:	strb	r3, [ip, #12]
   125e4:	str	r2, [ip, #8]
   125e8:	b	123f0 <__assert_fail@plt+0xdfc>
   125ec:	mov	r0, r5
   125f0:	bl	11468 <strlen@plt>
   125f4:	ldr	r3, [pc, #464]	; 127cc <__assert_fail@plt+0x11d8>
   125f8:	mov	r2, r0
   125fc:	add	ip, r5, r0
   12600:	ldm	r3!, {r0, r1}
   12604:	str	r0, [r5, r2]
   12608:	str	r1, [ip, #4]
   1260c:	b	123e8 <__assert_fail@plt+0xdf4>
   12610:	mov	r0, r5
   12614:	bl	11468 <strlen@plt>
   12618:	ldr	r3, [pc, #432]	; 127d0 <__assert_fail@plt+0x11dc>
   1261c:	add	r2, r5, r0
   12620:	mov	ip, r0
   12624:	ldm	r3!, {r0, r1}
   12628:	ldrb	r3, [r3]
   1262c:	str	r0, [r5, ip]
   12630:	str	r1, [r2, #4]
   12634:	strb	r3, [r2, #8]
   12638:	b	123e0 <__assert_fail@plt+0xdec>
   1263c:	mov	r0, r5
   12640:	bl	11468 <strlen@plt>
   12644:	ldr	r3, [pc, #392]	; 127d4 <__assert_fail@plt+0x11e0>
   12648:	add	r2, r5, r0
   1264c:	mov	ip, r0
   12650:	ldm	r3!, {r0, r1}
   12654:	ldrb	r3, [r3]
   12658:	str	r0, [r5, ip]
   1265c:	str	r1, [r2, #4]
   12660:	strb	r3, [r2, #8]
   12664:	b	123d8 <__assert_fail@plt+0xde4>
   12668:	mov	r0, r5
   1266c:	bl	11468 <strlen@plt>
   12670:	ldr	r3, [pc, #352]	; 127d8 <__assert_fail@plt+0x11e4>
   12674:	add	r2, r5, r0
   12678:	mov	ip, r0
   1267c:	ldm	r3!, {r0, r1}
   12680:	ldrh	r3, [r3]
   12684:	str	r0, [r5, ip]
   12688:	str	r1, [r2, #4]
   1268c:	strh	r3, [r2, #8]
   12690:	b	123d0 <__assert_fail@plt+0xddc>
   12694:	str	r3, [sp, #20]
   12698:	bl	115ac <gethostbyname@plt>
   1269c:	subs	r3, r0, #0
   126a0:	str	r3, [sp, #32]
   126a4:	beq	126dc <__assert_fail@plt+0x10e8>
   126a8:	ldr	r3, [sp, #20]
   126ac:	str	r6, [sp, #20]
   126b0:	str	r3, [sp, #32]
   126b4:	mov	r7, r3
   126b8:	b	121d0 <__assert_fail@plt+0xbdc>
   126bc:	bl	115dc <close@plt>
   126c0:	cmp	r0, #0
   126c4:	bne	12288 <__assert_fail@plt+0xc94>
   126c8:	b	12250 <__assert_fail@plt+0xc5c>
   126cc:	bl	115dc <close@plt>
   126d0:	cmp	r0, #0
   126d4:	bne	12288 <__assert_fail@plt+0xc94>
   126d8:	b	12240 <__assert_fail@plt+0xc4c>
   126dc:	ldr	r7, [sp, #32]
   126e0:	str	r6, [sp, #20]
   126e4:	mov	r2, #5
   126e8:	ldr	r1, [pc, #236]	; 127dc <__assert_fail@plt+0x11e8>
   126ec:	mov	r0, #0
   126f0:	bl	11330 <dcgettext@plt>
   126f4:	ldr	r3, [sp, #20]
   126f8:	mov	r1, #0
   126fc:	mov	r2, r0
   12700:	mov	r0, #128	; 0x80
   12704:	bl	113cc <error@plt>
   12708:	b	121bc <__assert_fail@plt+0xbc8>
   1270c:	str	r7, [sp]
   12710:	ldr	r2, [sp, #20]
   12714:	ldr	r1, [sp, #36]	; 0x24
   12718:	ldr	r0, [sp, #24]
   1271c:	bl	1154c <execl@plt>
   12720:	b	122fc <__assert_fail@plt+0xd08>
   12724:	bl	1148c <__errno_location@plt>
   12728:	ldr	r5, [r0]
   1272c:	mov	r0, r7
   12730:	bl	112c4 <free@plt>
   12734:	mov	r0, r6
   12738:	bl	112c4 <free@plt>
   1273c:	mov	r1, r5
   12740:	mov	r0, r4
   12744:	bl	11e90 <__assert_fail@plt+0x89c>
   12748:	b	12494 <__assert_fail@plt+0xea0>
   1274c:	mov	r0, r6
   12750:	bl	112c4 <free@plt>
   12754:	b	12494 <__assert_fail@plt+0xea0>
   12758:	mov	r0, r6
   1275c:	bl	112c4 <free@plt>
   12760:	bl	1148c <__errno_location@plt>
   12764:	mov	r3, #5
   12768:	str	r3, [r0]
   1276c:	b	12494 <__assert_fail@plt+0xea0>
   12770:	str	r0, [sp, #20]
   12774:	mov	r0, r6
   12778:	bl	112c4 <free@plt>
   1277c:	ldr	r1, [sp, #20]
   12780:	mov	r9, r1
   12784:	b	12494 <__assert_fail@plt+0xea0>
   12788:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   1278c:	andeq	sp, r1, r0, asr #32
   12790:	andeq	sp, r1, r8, rrx
   12794:	andeq	sp, r1, ip, rrx
   12798:	andeq	sp, r1, r8, lsl #1
   1279c:	muleq	r1, r0, r0
   127a0:	andeq	sp, r1, r0, lsr #1
   127a4:	andseq	r1, r0, r0
   127a8:	andeq	ip, r1, ip, ror #28
   127ac:	andeq	sp, r1, r8, lsr #1
   127b0:	muleq	r1, r4, r0
   127b4:	andeq	sp, r1, ip, lsl r1
   127b8:	andeq	sp, r1, r8, lsl #2
   127bc:	andeq	sp, r1, r4, lsl r1
   127c0:	strdeq	sp, [r1], -ip
   127c4:	strdeq	sp, [r1], -r0
   127c8:	andeq	sp, r1, r0, ror #1
   127cc:	ldrdeq	sp, [r1], -r8
   127d0:	andeq	sp, r1, ip, asr #1
   127d4:	andeq	sp, r1, r0, asr #1
   127d8:	strheq	sp, [r1], -r4
   127dc:	andeq	sp, r1, r8, lsl r0
   127e0:	push	{r4, r5, r6, lr}
   127e4:	mov	r5, r0
   127e8:	ldr	r1, [pc, #52]	; 12824 <__assert_fail@plt+0x1230>
   127ec:	bl	11ed0 <__assert_fail@plt+0x8dc>
   127f0:	cmn	r0, #1
   127f4:	beq	1281c <__assert_fail@plt+0x1228>
   127f8:	mov	r0, r5
   127fc:	bl	12088 <__assert_fail@plt+0xa94>
   12800:	mov	r4, r0
   12804:	bl	1148c <__errno_location@plt>
   12808:	ldr	r1, [r0]
   1280c:	mov	r0, r5
   12810:	bl	11e90 <__assert_fail@plt+0x89c>
   12814:	mov	r0, r4
   12818:	pop	{r4, r5, r6, pc}
   1281c:	mov	r4, r0
   12820:	b	12814 <__assert_fail@plt+0x1220>
   12824:	andeq	sp, r1, r8, lsr #2
   12828:	push	{r4, r5, r6, r7, r8, r9, lr}
   1282c:	sub	sp, sp, #84	; 0x54
   12830:	ldr	r8, [pc, #216]	; 12910 <__assert_fail@plt+0x131c>
   12834:	str	r2, [sp]
   12838:	mov	r7, r0
   1283c:	ldr	ip, [r8]
   12840:	ldr	r3, [pc, #204]	; 12914 <__assert_fail@plt+0x1320>
   12844:	mov	r9, r2
   12848:	mov	r5, r1
   1284c:	mov	r2, #64	; 0x40
   12850:	mov	r1, #1
   12854:	add	r0, sp, #12
   12858:	str	ip, [sp, #76]	; 0x4c
   1285c:	bl	11498 <__sprintf_chk@plt>
   12860:	add	r1, sp, #12
   12864:	mov	r0, r7
   12868:	bl	11ed0 <__assert_fail@plt+0x8dc>
   1286c:	cmn	r0, #1
   12870:	beq	12904 <__assert_fail@plt+0x1310>
   12874:	mov	r0, r7
   12878:	bl	12088 <__assert_fail@plt+0xa94>
   1287c:	cmn	r0, #1
   12880:	movne	r4, #0
   12884:	moveq	r4, #1
   12888:	cmp	r9, r0
   1288c:	orrcc	r4, r4, #1
   12890:	cmp	r4, #0
   12894:	mov	r6, r0
   12898:	bne	12904 <__assert_fail@plt+0x1310>
   1289c:	cmp	r0, #0
   128a0:	beq	128e8 <__assert_fail@plt+0x12f4>
   128a4:	ldr	r9, [pc, #108]	; 12918 <__assert_fail@plt+0x1324>
   128a8:	b	128bc <__assert_fail@plt+0x12c8>
   128ac:	add	r4, r4, r0
   128b0:	cmp	r6, r4
   128b4:	add	r5, r5, r0
   128b8:	bls	128e8 <__assert_fail@plt+0x12f4>
   128bc:	sub	r2, r6, r4
   128c0:	mov	r1, r5
   128c4:	ldr	r0, [r9, r7, lsl #3]
   128c8:	bl	1a3b8 <argp_parse@@Base+0x2ca4>
   128cc:	sub	r3, r0, #1
   128d0:	cmn	r3, #3
   128d4:	bls	128ac <__assert_fail@plt+0x12b8>
   128d8:	mov	r0, r7
   128dc:	mov	r1, #5
   128e0:	bl	11e90 <__assert_fail@plt+0x89c>
   128e4:	mvn	r6, #0
   128e8:	ldr	r2, [sp, #76]	; 0x4c
   128ec:	ldr	r3, [r8]
   128f0:	mov	r0, r6
   128f4:	cmp	r2, r3
   128f8:	bne	1290c <__assert_fail@plt+0x1318>
   128fc:	add	sp, sp, #84	; 0x54
   12900:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12904:	mvn	r6, #0
   12908:	b	128e8 <__assert_fail@plt+0x12f4>
   1290c:	bl	1133c <__stack_chk_fail@plt>
   12910:	andeq	lr, r2, r8, lsl #30
   12914:	andeq	sp, r1, ip, lsr #2
   12918:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   1291c:	push	{r4, r5, r6, r7, r8, lr}
   12920:	sub	sp, sp, #80	; 0x50
   12924:	ldr	r6, [pc, #208]	; 129fc <__assert_fail@plt+0x1408>
   12928:	str	r2, [sp]
   1292c:	mov	r4, r0
   12930:	ldr	ip, [r6]
   12934:	ldr	r3, [pc, #196]	; 12a00 <__assert_fail@plt+0x140c>
   12938:	mov	r5, r2
   1293c:	mov	r7, r1
   12940:	mov	r2, #64	; 0x40
   12944:	mov	r1, #1
   12948:	add	r0, sp, #12
   1294c:	str	ip, [sp, #76]	; 0x4c
   12950:	bl	11498 <__sprintf_chk@plt>
   12954:	add	r1, sp, #12
   12958:	mov	r0, r4
   1295c:	bl	11ed0 <__assert_fail@plt+0x8dc>
   12960:	cmn	r0, #1
   12964:	beq	129f0 <__assert_fail@plt+0x13fc>
   12968:	mov	r1, #1
   1296c:	mov	r0, #13
   12970:	bl	11300 <signal@plt>
   12974:	ldr	r3, [pc, #136]	; 12a04 <__assert_fail@plt+0x1410>
   12978:	mov	r1, r7
   1297c:	add	r3, r3, r4, lsl #3
   12980:	mov	r2, r5
   12984:	mov	r8, r0
   12988:	ldr	r0, [r3, #36]	; 0x24
   1298c:	bl	18684 <argp_parse@@Base+0xf70>
   12990:	mov	r1, r8
   12994:	mov	r7, r0
   12998:	mov	r0, #13
   1299c:	bl	11300 <signal@plt>
   129a0:	cmp	r5, r7
   129a4:	beq	129d0 <__assert_fail@plt+0x13dc>
   129a8:	mov	r0, r4
   129ac:	mov	r1, #5
   129b0:	bl	11e90 <__assert_fail@plt+0x89c>
   129b4:	ldr	r2, [sp, #76]	; 0x4c
   129b8:	ldr	r3, [r6]
   129bc:	mov	r0, r7
   129c0:	cmp	r2, r3
   129c4:	bne	129f8 <__assert_fail@plt+0x1404>
   129c8:	add	sp, sp, #80	; 0x50
   129cc:	pop	{r4, r5, r6, r7, r8, pc}
   129d0:	mov	r0, r4
   129d4:	bl	12088 <__assert_fail@plt+0xa94>
   129d8:	cmp	r0, #0
   129dc:	blt	129f0 <__assert_fail@plt+0x13fc>
   129e0:	cmp	r7, r0
   129e4:	beq	129b4 <__assert_fail@plt+0x13c0>
   129e8:	mov	r7, r0
   129ec:	b	129a8 <__assert_fail@plt+0x13b4>
   129f0:	mov	r7, #0
   129f4:	b	129b4 <__assert_fail@plt+0x13c0>
   129f8:	bl	1133c <__stack_chk_fail@plt>
   129fc:	andeq	lr, r2, r8, lsl #30
   12a00:	andeq	sp, r1, r4, lsr r1
   12a04:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   12a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a0c:	mov	fp, r3
   12a10:	asr	r3, r3, #31
   12a14:	eor	r6, r3, r2
   12a18:	mov	sl, r2
   12a1c:	ldr	r2, [pc, #460]	; 12bf0 <__assert_fail@plt+0x15fc>
   12a20:	sub	sp, sp, #180	; 0xb4
   12a24:	eor	r7, r3, fp
   12a28:	ldr	r1, [r2]
   12a2c:	subs	r6, r6, r3
   12a30:	mov	r2, #0
   12a34:	str	r0, [sp, #12]
   12a38:	sbc	r7, r7, r3
   12a3c:	str	r1, [sp, #172]	; 0xac
   12a40:	strb	r2, [sp, #40]	; 0x28
   12a44:	add	r8, sp, #40	; 0x28
   12a48:	b	12a58 <__assert_fail@plt+0x1464>
   12a4c:	mov	r6, r0
   12a50:	mov	r7, r1
   12a54:	mov	r8, r9
   12a58:	mov	r2, #10
   12a5c:	mov	r3, #0
   12a60:	mov	r0, r6
   12a64:	mov	r1, r7
   12a68:	bl	1cb6c <argp_parse@@Base+0x5458>
   12a6c:	mov	r0, r6
   12a70:	mov	r1, r7
   12a74:	mov	r3, #0
   12a78:	sub	r9, r8, #1
   12a7c:	add	r2, r2, #48	; 0x30
   12a80:	strb	r2, [r8, #-1]
   12a84:	mov	r2, #10
   12a88:	bl	1cb6c <argp_parse@@Base+0x5458>
   12a8c:	cmp	r7, #0
   12a90:	cmpeq	r6, #9
   12a94:	bhi	12a4c <__assert_fail@plt+0x1458>
   12a98:	cmp	sl, #0
   12a9c:	sbcs	r3, fp, #0
   12aa0:	movlt	r3, #45	; 0x2d
   12aa4:	strblt	r3, [r9, #-1]
   12aa8:	ldr	r3, [sp, #216]	; 0xd8
   12aac:	sublt	r9, r8, #2
   12ab0:	cmp	r3, #2
   12ab4:	bhi	12bec <__assert_fail@plt+0x15f8>
   12ab8:	ldr	r2, [sp, #216]	; 0xd8
   12abc:	ldr	r3, [pc, #304]	; 12bf4 <__assert_fail@plt+0x1600>
   12ac0:	mov	r1, #1
   12ac4:	str	r9, [sp]
   12ac8:	ldr	r3, [r3, r2, lsl #2]
   12acc:	add	r0, sp, #44	; 0x2c
   12ad0:	str	r3, [sp, #4]
   12ad4:	mov	r2, #64	; 0x40
   12ad8:	ldr	r3, [pc, #280]	; 12bf8 <__assert_fail@plt+0x1604>
   12adc:	bl	11498 <__sprintf_chk@plt>
   12ae0:	add	r1, sp, #44	; 0x2c
   12ae4:	ldr	r0, [sp, #12]
   12ae8:	bl	11ed0 <__assert_fail@plt+0x8dc>
   12aec:	cmn	r0, #1
   12af0:	beq	12b80 <__assert_fail@plt+0x158c>
   12af4:	ldr	r0, [sp, #12]
   12af8:	add	r1, sp, #108	; 0x6c
   12afc:	bl	11f48 <__assert_fail@plt+0x954>
   12b00:	cmp	r0, #0
   12b04:	beq	12b80 <__assert_fail@plt+0x158c>
   12b08:	ldrb	r6, [r0]
   12b0c:	cmp	r6, #9
   12b10:	cmpne	r6, #32
   12b14:	beq	12bc4 <__assert_fail@plt+0x15d0>
   12b18:	sub	r3, r6, #43	; 0x2b
   12b1c:	and	r3, r3, #253	; 0xfd
   12b20:	cmp	r3, #0
   12b24:	movne	lr, r0
   12b28:	addeq	lr, r0, #1
   12b2c:	mov	r1, #0
   12b30:	mov	r0, #0
   12b34:	ldrb	r2, [lr], #1
   12b38:	sub	r2, r2, #48	; 0x30
   12b3c:	cmp	r2, #9
   12b40:	bhi	12b88 <__assert_fail@plt+0x1594>
   12b44:	lsl	ip, r1, #2
   12b48:	lsl	r3, r0, #2
   12b4c:	adds	r3, r3, r0
   12b50:	orr	ip, ip, r0, lsr #30
   12b54:	adc	ip, ip, r1
   12b58:	adds	r4, r3, r3
   12b5c:	adc	r5, ip, ip
   12b60:	cmp	r6, #45	; 0x2d
   12b64:	asr	r3, r2, #31
   12b68:	beq	12ba4 <__assert_fail@plt+0x15b0>
   12b6c:	adds	r0, r4, r2
   12b70:	adc	r1, r5, r3
   12b74:	cmp	r0, r4
   12b78:	sbcs	r3, r1, r5
   12b7c:	bge	12b34 <__assert_fail@plt+0x1540>
   12b80:	mvn	r0, #0
   12b84:	mvn	r1, #0
   12b88:	ldr	r3, [pc, #96]	; 12bf0 <__assert_fail@plt+0x15fc>
   12b8c:	ldr	r2, [sp, #172]	; 0xac
   12b90:	ldr	r3, [r3]
   12b94:	cmp	r2, r3
   12b98:	bne	12be8 <__assert_fail@plt+0x15f4>
   12b9c:	add	sp, sp, #180	; 0xb4
   12ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ba4:	subs	r0, r4, r2
   12ba8:	sbc	r1, r5, r3
   12bac:	cmp	r4, r0
   12bb0:	sbcs	r3, r5, r1
   12bb4:	bge	12b34 <__assert_fail@plt+0x1540>
   12bb8:	mvn	r0, #0
   12bbc:	mvn	r1, #0
   12bc0:	b	12b88 <__assert_fail@plt+0x1594>
   12bc4:	ldrb	r6, [r0, #1]!
   12bc8:	cmp	r6, #9
   12bcc:	cmpne	r6, #32
   12bd0:	bne	12b18 <__assert_fail@plt+0x1524>
   12bd4:	ldrb	r6, [r0, #1]!
   12bd8:	cmp	r6, #9
   12bdc:	cmpne	r6, #32
   12be0:	bne	12b18 <__assert_fail@plt+0x1524>
   12be4:	b	12bc4 <__assert_fail@plt+0x15d0>
   12be8:	bl	1133c <__stack_chk_fail@plt>
   12bec:	bl	115d0 <abort@plt>
   12bf0:	andeq	lr, r2, r8, lsl #30
   12bf4:	andeq	sp, r1, ip
   12bf8:	andeq	sp, r1, ip, lsr r1
   12bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c00:	sub	sp, sp, #108	; 0x6c
   12c04:	ldr	r9, [pc, #500]	; 12e00 <__assert_fail@plt+0x180c>
   12c08:	ldr	ip, [pc, #500]	; 12e04 <__assert_fail@plt+0x1810>
   12c0c:	mov	r6, r2
   12c10:	ldr	r3, [r9]
   12c14:	cmp	r1, ip
   12c18:	str	r3, [sp, #100]	; 0x64
   12c1c:	mov	r8, r0
   12c20:	beq	12c5c <__assert_fail@plt+0x1668>
   12c24:	ldr	r3, [pc, #476]	; 12e08 <__assert_fail@plt+0x1814>
   12c28:	cmp	r1, r3
   12c2c:	beq	12cd8 <__assert_fail@plt+0x16e4>
   12c30:	bl	1148c <__errno_location@plt>
   12c34:	mvn	r3, #0
   12c38:	mov	r2, #95	; 0x5f
   12c3c:	str	r2, [r0]
   12c40:	ldr	r1, [sp, #100]	; 0x64
   12c44:	ldr	r2, [r9]
   12c48:	mov	r0, r3
   12c4c:	cmp	r1, r2
   12c50:	bne	12dfc <__assert_fail@plt+0x1808>
   12c54:	add	sp, sp, #108	; 0x6c
   12c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c5c:	ldr	r1, [pc, #424]	; 12e0c <__assert_fail@plt+0x1818>
   12c60:	bl	11ed0 <__assert_fail@plt+0x8dc>
   12c64:	cmn	r0, #1
   12c68:	beq	12cd0 <__assert_fail@plt+0x16dc>
   12c6c:	mov	r0, r8
   12c70:	bl	12088 <__assert_fail@plt+0xa94>
   12c74:	cmn	r0, #1
   12c78:	mov	r4, r0
   12c7c:	beq	12cd0 <__assert_fail@plt+0x16dc>
   12c80:	cmp	r0, #8
   12c84:	bhi	12de8 <__assert_fail@plt+0x17f4>
   12c88:	cmp	r0, #0
   12c8c:	beq	12de0 <__assert_fail@plt+0x17ec>
   12c90:	ldr	r5, [pc, #376]	; 12e10 <__assert_fail@plt+0x181c>
   12c94:	b	12ca8 <__assert_fail@plt+0x16b4>
   12c98:	sub	r4, r4, r0
   12c9c:	cmp	r4, #0
   12ca0:	add	r6, r6, r0
   12ca4:	ble	12da8 <__assert_fail@plt+0x17b4>
   12ca8:	mov	r2, r4
   12cac:	mov	r1, r6
   12cb0:	ldr	r0, [r5, r8, lsl #3]
   12cb4:	bl	1a3b8 <argp_parse@@Base+0x2ca4>
   12cb8:	sub	r3, r0, #1
   12cbc:	cmn	r3, #3
   12cc0:	bls	12c98 <__assert_fail@plt+0x16a4>
   12cc4:	mov	r0, r8
   12cc8:	mov	r1, #5
   12ccc:	bl	11e90 <__assert_fail@plt+0x89c>
   12cd0:	mvn	r3, #0
   12cd4:	b	12c40 <__assert_fail@plt+0x164c>
   12cd8:	ldr	fp, [r2, #4]
   12cdc:	cmp	fp, #0
   12ce0:	mov	r4, fp
   12ce4:	asr	r5, fp, #31
   12ce8:	blt	12d9c <__assert_fail@plt+0x17a8>
   12cec:	mov	r3, #0
   12cf0:	strb	r3, [sp, #32]
   12cf4:	add	r7, sp, #32
   12cf8:	b	12d08 <__assert_fail@plt+0x1714>
   12cfc:	mov	r4, r0
   12d00:	mov	r5, r1
   12d04:	mov	r7, sl
   12d08:	mov	r2, #10
   12d0c:	mov	r3, #0
   12d10:	mov	r0, r4
   12d14:	mov	r1, r5
   12d18:	bl	1cb6c <argp_parse@@Base+0x5458>
   12d1c:	mov	r0, r4
   12d20:	mov	r1, r5
   12d24:	mov	r3, #0
   12d28:	sub	sl, r7, #1
   12d2c:	add	r2, r2, #48	; 0x30
   12d30:	strb	r2, [r7, #-1]
   12d34:	mov	r2, #10
   12d38:	bl	1cb6c <argp_parse@@Base+0x5458>
   12d3c:	cmp	r5, #0
   12d40:	cmpeq	r4, #9
   12d44:	bhi	12cfc <__assert_fail@plt+0x1708>
   12d48:	cmp	fp, #0
   12d4c:	movlt	r3, #45	; 0x2d
   12d50:	strblt	r3, [sl, #-1]
   12d54:	ldrsh	r3, [r6]
   12d58:	sublt	sl, r7, #2
   12d5c:	mov	r2, #64	; 0x40
   12d60:	mov	r1, #1
   12d64:	stm	sp, {r3, sl}
   12d68:	add	r0, sp, #36	; 0x24
   12d6c:	ldr	r3, [pc, #160]	; 12e14 <__assert_fail@plt+0x1820>
   12d70:	bl	11498 <__sprintf_chk@plt>
   12d74:	add	r1, sp, #36	; 0x24
   12d78:	mov	r0, r8
   12d7c:	bl	11ed0 <__assert_fail@plt+0x8dc>
   12d80:	cmn	r0, #1
   12d84:	mov	r3, r0
   12d88:	beq	12c40 <__assert_fail@plt+0x164c>
   12d8c:	mov	r0, r8
   12d90:	bl	12088 <__assert_fail@plt+0xa94>
   12d94:	mov	r3, r0
   12d98:	b	12c40 <__assert_fail@plt+0x164c>
   12d9c:	rsbs	r4, fp, #0
   12da0:	rsc	r5, r5, #0
   12da4:	b	12cec <__assert_fail@plt+0x16f8>
   12da8:	ldr	r3, [r6]
   12dac:	cmp	r3, #255	; 0xff
   12db0:	ble	12de0 <__assert_fail@plt+0x17ec>
   12db4:	cmp	r4, #0
   12db8:	beq	12de0 <__assert_fail@plt+0x17ec>
   12dbc:	mov	r3, #0
   12dc0:	add	r2, r6, #1
   12dc4:	ldrb	r1, [r6, r3]
   12dc8:	ldrb	r0, [r2, r3]
   12dcc:	strb	r0, [r6, r3]
   12dd0:	strb	r1, [r2, r3]
   12dd4:	add	r3, r3, #2
   12dd8:	cmp	r4, r3
   12ddc:	bhi	12dc4 <__assert_fail@plt+0x17d0>
   12de0:	mov	r3, #0
   12de4:	b	12c40 <__assert_fail@plt+0x164c>
   12de8:	bl	1148c <__errno_location@plt>
   12dec:	mov	r2, #75	; 0x4b
   12df0:	mvn	r3, #0
   12df4:	str	r2, [r0]
   12df8:	b	12c40 <__assert_fail@plt+0x164c>
   12dfc:	bl	1133c <__stack_chk_fail@plt>
   12e00:	andeq	lr, r2, r8, lsl #30
   12e04:	andshi	r6, ip, r2, lsl #26
   12e08:	andmi	r6, r8, r1, lsl #26
   12e0c:	andeq	sp, r1, ip, asr #2
   12e10:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   12e14:	andeq	sp, r1, r4, asr #2
   12e18:	tst	r0, #256	; 0x100
   12e1c:	movne	r2, #114	; 0x72
   12e20:	moveq	r2, #45	; 0x2d
   12e24:	tst	r0, #128	; 0x80
   12e28:	movne	r3, #119	; 0x77
   12e2c:	moveq	r3, #45	; 0x2d
   12e30:	tst	r0, #2048	; 0x800
   12e34:	strb	r3, [r1, #1]
   12e38:	strb	r2, [r1]
   12e3c:	and	r3, r0, #64	; 0x40
   12e40:	beq	12ee8 <__assert_fail@plt+0x18f4>
   12e44:	cmp	r3, #0
   12e48:	movne	ip, #115	; 0x73
   12e4c:	moveq	ip, #83	; 0x53
   12e50:	tst	r0, #32
   12e54:	movne	r2, #114	; 0x72
   12e58:	moveq	r2, #45	; 0x2d
   12e5c:	tst	r0, #16
   12e60:	movne	r3, #119	; 0x77
   12e64:	moveq	r3, #45	; 0x2d
   12e68:	tst	r0, #1024	; 0x400
   12e6c:	strb	r3, [r1, #4]
   12e70:	strb	ip, [r1, #2]
   12e74:	strb	r2, [r1, #3]
   12e78:	and	r3, r0, #8
   12e7c:	beq	12ef8 <__assert_fail@plt+0x1904>
   12e80:	cmp	r3, #0
   12e84:	movne	ip, #115	; 0x73
   12e88:	moveq	ip, #83	; 0x53
   12e8c:	tst	r0, #4
   12e90:	movne	r2, #114	; 0x72
   12e94:	moveq	r2, #45	; 0x2d
   12e98:	tst	r0, #2
   12e9c:	movne	r3, #119	; 0x77
   12ea0:	moveq	r3, #45	; 0x2d
   12ea4:	tst	r0, #512	; 0x200
   12ea8:	strb	ip, [r1, #5]
   12eac:	strb	r2, [r1, #6]
   12eb0:	strb	r3, [r1, #7]
   12eb4:	and	r0, r0, #1
   12eb8:	beq	12ed8 <__assert_fail@plt+0x18e4>
   12ebc:	cmp	r0, #0
   12ec0:	movne	r2, #116	; 0x74
   12ec4:	moveq	r2, #84	; 0x54
   12ec8:	mov	r3, #0
   12ecc:	strb	r2, [r1, #8]
   12ed0:	strb	r3, [r1, #9]
   12ed4:	bx	lr
   12ed8:	cmp	r0, #0
   12edc:	movne	r2, #120	; 0x78
   12ee0:	moveq	r2, #45	; 0x2d
   12ee4:	b	12ec8 <__assert_fail@plt+0x18d4>
   12ee8:	cmp	r3, #0
   12eec:	movne	ip, #120	; 0x78
   12ef0:	moveq	ip, #45	; 0x2d
   12ef4:	b	12e50 <__assert_fail@plt+0x185c>
   12ef8:	cmp	r3, #0
   12efc:	movne	ip, #120	; 0x78
   12f00:	moveq	ip, #45	; 0x2d
   12f04:	b	12e8c <__assert_fail@plt+0x1898>
   12f08:	push	{r4, r5, r6, r7, lr}
   12f0c:	sub	sp, sp, #12
   12f10:	mov	r5, r0
   12f14:	mov	r7, r1
   12f18:	bl	1148c <__errno_location@plt>
   12f1c:	ldr	r3, [pc, #88]	; 12f7c <__assert_fail@plt+0x1988>
   12f20:	ldr	r3, [r3]
   12f24:	cmp	r3, #0
   12f28:	ldr	r4, [r0]
   12f2c:	beq	12f34 <__assert_fail@plt+0x1940>
   12f30:	blx	r3
   12f34:	mov	r2, #5
   12f38:	ldr	r1, [pc, #64]	; 12f80 <__assert_fail@plt+0x198c>
   12f3c:	mov	r0, #0
   12f40:	bl	11330 <dcgettext@plt>
   12f44:	mov	r6, r0
   12f48:	mov	r0, r7
   12f4c:	bl	1a24c <argp_parse@@Base+0x2b38>
   12f50:	mov	r2, r6
   12f54:	str	r5, [sp]
   12f58:	mov	r1, r4
   12f5c:	mov	r3, r0
   12f60:	mov	r0, #0
   12f64:	bl	113cc <error@plt>
   12f68:	ldr	r3, [pc, #20]	; 12f84 <__assert_fail@plt+0x1990>
   12f6c:	mov	r2, #2
   12f70:	str	r2, [r3]
   12f74:	add	sp, sp, #12
   12f78:	pop	{r4, r5, r6, r7, pc}
   12f7c:	andeq	pc, r2, r0, lsl #9
   12f80:	andeq	sp, r1, r0, ror #2
   12f84:	strdeq	pc, [r2], -ip
   12f88:	push	{r7, lr}
   12f8c:	sub	sp, sp, #8
   12f90:	mov	r5, r0
   12f94:	mov	r7, r1
   12f98:	bl	1148c <__errno_location@plt>
   12f9c:	ldr	r3, [pc, #72]	; 12fec <__assert_fail@plt+0x19f8>
   12fa0:	ldr	r3, [r3]
   12fa4:	cmp	r3, #0
   12fa8:	ldr	r4, [r0]
   12fac:	beq	12fb4 <__assert_fail@plt+0x19c0>
   12fb0:	blx	r3
   12fb4:	mov	r2, #5
   12fb8:	ldr	r1, [pc, #48]	; 12ff0 <__assert_fail@plt+0x19fc>
   12fbc:	mov	r0, #0
   12fc0:	bl	11330 <dcgettext@plt>
   12fc4:	mov	r6, r0
   12fc8:	mov	r0, r7
   12fcc:	bl	1a24c <argp_parse@@Base+0x2b38>
   12fd0:	mov	r2, r6
   12fd4:	mov	r1, r4
   12fd8:	str	r5, [sp]
   12fdc:	mov	r3, r0
   12fe0:	mov	r0, #0
   12fe4:	bl	113cc <error@plt>
   12fe8:	bl	119f8 <__assert_fail@plt+0x404>
   12fec:	andeq	pc, r2, r0, lsl #9
   12ff0:	andeq	sp, r1, r0, ror #2
   12ff4:	push	{r4, r5, r6, r7, lr}
   12ff8:	sub	sp, sp, #12
   12ffc:	mov	r5, r0
   13000:	mov	r7, r1
   13004:	bl	1148c <__errno_location@plt>
   13008:	ldr	r3, [pc, #76]	; 1305c <__assert_fail@plt+0x1a68>
   1300c:	ldr	r3, [r3]
   13010:	cmp	r3, #0
   13014:	ldr	r4, [r0]
   13018:	beq	13020 <__assert_fail@plt+0x1a2c>
   1301c:	blx	r3
   13020:	mov	r2, #5
   13024:	ldr	r1, [pc, #52]	; 13060 <__assert_fail@plt+0x1a6c>
   13028:	mov	r0, #0
   1302c:	bl	11330 <dcgettext@plt>
   13030:	mov	r6, r0
   13034:	mov	r0, r7
   13038:	bl	1a24c <argp_parse@@Base+0x2b38>
   1303c:	mov	r2, r6
   13040:	str	r5, [sp]
   13044:	mov	r1, r4
   13048:	mov	r3, r0
   1304c:	mov	r0, #0
   13050:	bl	113cc <error@plt>
   13054:	add	sp, sp, #12
   13058:	pop	{r4, r5, r6, r7, pc}
   1305c:	andeq	pc, r2, r0, lsl #9
   13060:	andeq	sp, r1, r0, ror r1
   13064:	push	{r4, r5, r6, r7, r8, lr}
   13068:	sub	sp, sp, #24
   1306c:	ldr	r4, [pc, #148]	; 13108 <__assert_fail@plt+0x1b14>
   13070:	mov	r7, r1
   13074:	mov	r8, r0
   13078:	ldr	r3, [r4]
   1307c:	add	r5, sp, #8
   13080:	str	r3, [sp, #20]
   13084:	bl	1148c <__errno_location@plt>
   13088:	mov	r1, r5
   1308c:	ldr	r6, [r0]
   13090:	mov	r0, r7
   13094:	bl	12e18 <__assert_fail@plt+0x1824>
   13098:	ldr	r3, [pc, #108]	; 1310c <__assert_fail@plt+0x1b18>
   1309c:	ldr	r3, [r3]
   130a0:	cmp	r3, #0
   130a4:	beq	130ac <__assert_fail@plt+0x1ab8>
   130a8:	blx	r3
   130ac:	mov	r2, #5
   130b0:	ldr	r1, [pc, #88]	; 13110 <__assert_fail@plt+0x1b1c>
   130b4:	mov	r0, #0
   130b8:	bl	11330 <dcgettext@plt>
   130bc:	mov	r7, r0
   130c0:	mov	r0, r8
   130c4:	bl	1a24c <argp_parse@@Base+0x2b38>
   130c8:	mov	r2, r7
   130cc:	mov	r1, r6
   130d0:	str	r5, [sp]
   130d4:	mov	r3, r0
   130d8:	mov	r0, #0
   130dc:	bl	113cc <error@plt>
   130e0:	ldr	r0, [sp, #20]
   130e4:	ldr	r3, [pc, #40]	; 13114 <__assert_fail@plt+0x1b20>
   130e8:	ldr	r1, [r4]
   130ec:	mov	r2, #2
   130f0:	cmp	r0, r1
   130f4:	str	r2, [r3]
   130f8:	bne	13104 <__assert_fail@plt+0x1b10>
   130fc:	add	sp, sp, #24
   13100:	pop	{r4, r5, r6, r7, r8, pc}
   13104:	bl	1133c <__stack_chk_fail@plt>
   13108:	andeq	lr, r2, r8, lsl #30
   1310c:	andeq	pc, r2, r0, lsl #9
   13110:	andeq	sp, r1, r8, lsl #3
   13114:	strdeq	pc, [r2], -ip
   13118:	push	{r4, r5, r6, r7, r8, lr}
   1311c:	sub	sp, sp, #8
   13120:	mov	r8, r0
   13124:	mov	r5, r1
   13128:	mov	r6, r2
   1312c:	bl	1148c <__errno_location@plt>
   13130:	ldr	r3, [pc, #88]	; 13190 <__assert_fail@plt+0x1b9c>
   13134:	ldr	r3, [r3]
   13138:	cmp	r3, #0
   1313c:	ldr	r4, [r0]
   13140:	beq	13148 <__assert_fail@plt+0x1b54>
   13144:	blx	r3
   13148:	mov	r2, #5
   1314c:	ldr	r1, [pc, #64]	; 13194 <__assert_fail@plt+0x1ba0>
   13150:	mov	r0, #0
   13154:	bl	11330 <dcgettext@plt>
   13158:	mov	r7, r0
   1315c:	mov	r0, r8
   13160:	bl	1a24c <argp_parse@@Base+0x2b38>
   13164:	mov	r2, r7
   13168:	stm	sp, {r5, r6}
   1316c:	mov	r1, r4
   13170:	mov	r3, r0
   13174:	mov	r0, #0
   13178:	bl	113cc <error@plt>
   1317c:	ldr	r3, [pc, #20]	; 13198 <__assert_fail@plt+0x1ba4>
   13180:	mov	r2, #2
   13184:	str	r2, [r3]
   13188:	add	sp, sp, #8
   1318c:	pop	{r4, r5, r6, r7, r8, pc}
   13190:	andeq	pc, r2, r0, lsl #9
   13194:	andeq	sp, r1, r8, lsr #3
   13198:	strdeq	pc, [r2], -ip
   1319c:	mov	r1, r0
   131a0:	ldr	r0, [pc]	; 131a8 <__assert_fail@plt+0x1bb4>
   131a4:	b	12f08 <__assert_fail@plt+0x1914>
   131a8:	ldrdeq	sp, [r1], -r8
   131ac:	mov	r1, r0
   131b0:	ldr	r0, [pc]	; 131b8 <__assert_fail@plt+0x1bc4>
   131b4:	b	12ff4 <__assert_fail@plt+0x1a00>
   131b8:	ldrdeq	sp, [r1], -r8
   131bc:	mov	r1, r0
   131c0:	push	{r4, lr}
   131c4:	ldr	r0, [pc]	; 131cc <__assert_fail@plt+0x1bd8>
   131c8:	bl	12f88 <__assert_fail@plt+0x1994>
   131cc:	andeq	sp, r1, r0, ror #3
   131d0:	push	{r4, r5, r6, r7, lr}
   131d4:	sub	sp, sp, #12
   131d8:	mov	r7, r0
   131dc:	mov	r6, r1
   131e0:	bl	1148c <__errno_location@plt>
   131e4:	ldr	r3, [pc, #104]	; 13254 <__assert_fail@plt+0x1c60>
   131e8:	ldr	r3, [r3]
   131ec:	cmp	r3, #0
   131f0:	ldr	r4, [r0]
   131f4:	beq	131fc <__assert_fail@plt+0x1c08>
   131f8:	blx	r3
   131fc:	mov	r2, #5
   13200:	ldr	r1, [pc, #80]	; 13258 <__assert_fail@plt+0x1c64>
   13204:	mov	r0, #0
   13208:	bl	11330 <dcgettext@plt>
   1320c:	mov	r5, r0
   13210:	mov	r0, r6
   13214:	bl	1a24c <argp_parse@@Base+0x2b38>
   13218:	mov	r1, r7
   1321c:	mov	r6, r0
   13220:	mov	r0, #1
   13224:	bl	1a390 <argp_parse@@Base+0x2c7c>
   13228:	mov	r3, r6
   1322c:	mov	r2, r5
   13230:	mov	r1, r4
   13234:	str	r0, [sp]
   13238:	mov	r0, #0
   1323c:	bl	113cc <error@plt>
   13240:	ldr	r3, [pc, #20]	; 1325c <__assert_fail@plt+0x1c68>
   13244:	mov	r2, #2
   13248:	str	r2, [r3]
   1324c:	add	sp, sp, #12
   13250:	pop	{r4, r5, r6, r7, pc}
   13254:	andeq	pc, r2, r0, lsl #9
   13258:	andeq	sp, r1, r8, ror #3
   1325c:	strdeq	pc, [r2], -ip
   13260:	mov	r1, r0
   13264:	ldr	r0, [pc]	; 1326c <__assert_fail@plt+0x1c78>
   13268:	b	12f08 <__assert_fail@plt+0x1914>
   1326c:	andeq	sp, r1, r4, lsl #4
   13270:	mov	r1, r0
   13274:	ldr	r0, [pc]	; 1327c <__assert_fail@plt+0x1c88>
   13278:	b	12f08 <__assert_fail@plt+0x1914>
   1327c:	andeq	sp, r1, ip, lsl #4
   13280:	mov	r1, r0
   13284:	ldr	r0, [pc]	; 1328c <__assert_fail@plt+0x1c98>
   13288:	b	12f08 <__assert_fail@plt+0x1914>
   1328c:	andeq	sp, r1, r4, lsl r2
   13290:	mov	r1, r0
   13294:	ldr	r0, [pc]	; 1329c <__assert_fail@plt+0x1ca8>
   13298:	b	12f08 <__assert_fail@plt+0x1914>
   1329c:	andeq	sp, r1, ip, lsl r2
   132a0:	mov	r1, r0
   132a4:	push	{r4, lr}
   132a8:	ldr	r0, [pc]	; 132b0 <__assert_fail@plt+0x1cbc>
   132ac:	bl	12f88 <__assert_fail@plt+0x1994>
   132b0:	andeq	sp, r1, ip, lsl r2
   132b4:	mov	r1, r0
   132b8:	ldr	r0, [pc]	; 132c0 <__assert_fail@plt+0x1ccc>
   132bc:	b	12ff4 <__assert_fail@plt+0x1a00>
   132c0:	andeq	sp, r1, ip, lsl r2
   132c4:	mov	r1, r0
   132c8:	ldr	r0, [pc]	; 132d0 <__assert_fail@plt+0x1cdc>
   132cc:	b	12f08 <__assert_fail@plt+0x1914>
   132d0:	andeq	sp, r1, r4, lsr #4
   132d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   132d8:	mov	r7, r3
   132dc:	ldr	r4, [pc, #176]	; 13394 <__assert_fail@plt+0x1da0>
   132e0:	sub	sp, sp, #40	; 0x28
   132e4:	mov	sl, r0
   132e8:	ldr	r3, [r4]
   132ec:	mov	r6, r2
   132f0:	str	r3, [sp, #36]	; 0x24
   132f4:	bl	1148c <__errno_location@plt>
   132f8:	ldr	r3, [pc, #152]	; 13398 <__assert_fail@plt+0x1da4>
   132fc:	ldr	r5, [sp, #72]	; 0x48
   13300:	ldr	r3, [r3]
   13304:	cmp	r3, #0
   13308:	ldr	r8, [r0]
   1330c:	beq	13314 <__assert_fail@plt+0x1d20>
   13310:	blx	r3
   13314:	mov	r3, #5
   13318:	ldr	r2, [pc, #124]	; 1339c <__assert_fail@plt+0x1da8>
   1331c:	ldr	r1, [pc, #124]	; 133a0 <__assert_fail@plt+0x1dac>
   13320:	str	r3, [sp]
   13324:	mov	r0, #0
   13328:	mov	r3, r5
   1332c:	bl	115e8 <dcngettext@plt>
   13330:	mov	r9, r0
   13334:	mov	r0, sl
   13338:	bl	1a24c <argp_parse@@Base+0x2b38>
   1333c:	add	r2, sp, #12
   13340:	mov	r1, r7
   13344:	mov	sl, r0
   13348:	mov	r0, r6
   1334c:	bl	186f4 <argp_parse@@Base+0xfe0>
   13350:	mov	r3, sl
   13354:	mov	r2, r9
   13358:	mov	r1, r8
   1335c:	str	r5, [sp, #4]
   13360:	str	r0, [sp]
   13364:	mov	r0, #0
   13368:	bl	113cc <error@plt>
   1336c:	ldr	r0, [sp, #36]	; 0x24
   13370:	ldr	r3, [pc, #44]	; 133a4 <__assert_fail@plt+0x1db0>
   13374:	ldr	r1, [r4]
   13378:	mov	r2, #2
   1337c:	cmp	r0, r1
   13380:	str	r2, [r3]
   13384:	bne	13390 <__assert_fail@plt+0x1d9c>
   13388:	add	sp, sp, #40	; 0x28
   1338c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13390:	bl	1133c <__stack_chk_fail@plt>
   13394:	andeq	lr, r2, r8, lsl #30
   13398:	andeq	pc, r2, r0, lsl #9
   1339c:	andeq	sp, r1, ip, lsr #4
   133a0:	andeq	sp, r1, r0, ror #4
   133a4:	strdeq	pc, [r2], -ip
   133a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133ac:	mov	r7, r3
   133b0:	ldr	r4, [pc, #164]	; 1345c <__assert_fail@plt+0x1e68>
   133b4:	sub	sp, sp, #40	; 0x28
   133b8:	mov	sl, r0
   133bc:	ldr	r3, [r4]
   133c0:	mov	r6, r2
   133c4:	str	r3, [sp, #36]	; 0x24
   133c8:	bl	1148c <__errno_location@plt>
   133cc:	ldr	r3, [pc, #140]	; 13460 <__assert_fail@plt+0x1e6c>
   133d0:	ldr	r5, [sp, #72]	; 0x48
   133d4:	ldr	r3, [r3]
   133d8:	cmp	r3, #0
   133dc:	ldr	r8, [r0]
   133e0:	beq	133e8 <__assert_fail@plt+0x1df4>
   133e4:	blx	r3
   133e8:	mov	r3, #5
   133ec:	ldr	r2, [pc, #112]	; 13464 <__assert_fail@plt+0x1e70>
   133f0:	ldr	r1, [pc, #112]	; 13468 <__assert_fail@plt+0x1e74>
   133f4:	str	r3, [sp]
   133f8:	mov	r0, #0
   133fc:	mov	r3, r5
   13400:	bl	115e8 <dcngettext@plt>
   13404:	mov	r9, r0
   13408:	mov	r0, sl
   1340c:	bl	1a24c <argp_parse@@Base+0x2b38>
   13410:	add	r2, sp, #12
   13414:	mov	r1, r7
   13418:	mov	sl, r0
   1341c:	mov	r0, r6
   13420:	bl	186f4 <argp_parse@@Base+0xfe0>
   13424:	mov	r3, sl
   13428:	mov	r2, r9
   1342c:	str	r5, [sp, #4]
   13430:	mov	r1, r8
   13434:	str	r0, [sp]
   13438:	mov	r0, #0
   1343c:	bl	113cc <error@plt>
   13440:	ldr	r2, [sp, #36]	; 0x24
   13444:	ldr	r3, [r4]
   13448:	cmp	r2, r3
   1344c:	bne	13458 <__assert_fail@plt+0x1e64>
   13450:	add	sp, sp, #40	; 0x28
   13454:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13458:	bl	1133c <__stack_chk_fail@plt>
   1345c:	andeq	lr, r2, r8, lsl #30
   13460:	andeq	pc, r2, r0, lsl #9
   13464:	muleq	r1, r4, r2
   13468:	ldrdeq	sp, [r1], -r0
   1346c:	mov	r1, r0
   13470:	push	{r4, lr}
   13474:	ldr	r0, [pc]	; 1347c <__assert_fail@plt+0x1e88>
   13478:	bl	12f88 <__assert_fail@plt+0x1994>
   1347c:	andeq	sp, r1, r4, lsr #4
   13480:	ldr	r1, [pc, #148]	; 1351c <__assert_fail@plt+0x1f28>
   13484:	push	{r7, lr}
   13488:	mov	r7, r3
   1348c:	sub	sp, sp, #40	; 0x28
   13490:	ldr	r3, [r1]
   13494:	mov	r9, r0
   13498:	str	r3, [sp, #36]	; 0x24
   1349c:	mov	r6, r2
   134a0:	bl	1148c <__errno_location@plt>
   134a4:	ldr	r3, [pc, #116]	; 13520 <__assert_fail@plt+0x1f2c>
   134a8:	ldr	r4, [sp, #48]	; 0x30
   134ac:	ldr	r3, [r3]
   134b0:	cmp	r3, #0
   134b4:	ldr	r5, [r0]
   134b8:	beq	134c0 <__assert_fail@plt+0x1ecc>
   134bc:	blx	r3
   134c0:	mov	r3, #5
   134c4:	ldr	r2, [pc, #88]	; 13524 <__assert_fail@plt+0x1f30>
   134c8:	ldr	r1, [pc, #88]	; 13528 <__assert_fail@plt+0x1f34>
   134cc:	str	r3, [sp]
   134d0:	mov	r0, #0
   134d4:	mov	r3, r4
   134d8:	bl	115e8 <dcngettext@plt>
   134dc:	mov	r8, r0
   134e0:	mov	r0, r9
   134e4:	bl	1a24c <argp_parse@@Base+0x2b38>
   134e8:	add	r2, sp, #12
   134ec:	mov	r1, r7
   134f0:	mov	r9, r0
   134f4:	mov	r0, r6
   134f8:	bl	186f4 <argp_parse@@Base+0xfe0>
   134fc:	mov	r3, r9
   13500:	mov	r2, r8
   13504:	mov	r1, r5
   13508:	str	r4, [sp, #4]
   1350c:	str	r0, [sp]
   13510:	mov	r0, #0
   13514:	bl	113cc <error@plt>
   13518:	bl	119f8 <__assert_fail@plt+0x404>
   1351c:	andeq	lr, r2, r8, lsl #30
   13520:	andeq	pc, r2, r0, lsl #9
   13524:	andeq	sp, r1, ip, lsr #4
   13528:	andeq	sp, r1, r0, ror #4
   1352c:	mov	r1, r0
   13530:	ldr	r0, [pc]	; 13538 <__assert_fail@plt+0x1f44>
   13534:	b	12f08 <__assert_fail@plt+0x1914>
   13538:	andeq	sp, r1, ip, lsl #6
   1353c:	mov	r1, r0
   13540:	ldr	r0, [pc]	; 13548 <__assert_fail@plt+0x1f54>
   13544:	b	12ff4 <__assert_fail@plt+0x1a00>
   13548:	andeq	sp, r1, ip, lsl #6
   1354c:	mov	r1, r0
   13550:	ldr	r0, [pc]	; 13558 <__assert_fail@plt+0x1f64>
   13554:	b	12f08 <__assert_fail@plt+0x1914>
   13558:	andeq	sp, r1, r8, lsl r3
   1355c:	mov	r1, r0
   13560:	ldr	r0, [pc]	; 13568 <__assert_fail@plt+0x1f74>
   13564:	b	12f08 <__assert_fail@plt+0x1914>
   13568:	andeq	sp, r1, r0, lsr #6
   1356c:	mov	r1, r0
   13570:	ldr	r0, [pc]	; 13578 <__assert_fail@plt+0x1f84>
   13574:	b	12ff4 <__assert_fail@plt+0x1a00>
   13578:	andeq	sp, r1, r0, lsr #6
   1357c:	mov	r1, r0
   13580:	ldr	r0, [pc]	; 13588 <__assert_fail@plt+0x1f94>
   13584:	b	12f08 <__assert_fail@plt+0x1914>
   13588:	andeq	sp, r1, r4
   1358c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13590:	mov	r7, r3
   13594:	ldr	r4, [pc, #156]	; 13638 <__assert_fail@plt+0x2044>
   13598:	sub	sp, sp, #44	; 0x2c
   1359c:	mov	r9, r0
   135a0:	ldr	r3, [r4]
   135a4:	mov	r6, r2
   135a8:	str	r3, [sp, #36]	; 0x24
   135ac:	bl	1148c <__errno_location@plt>
   135b0:	ldr	r3, [pc, #132]	; 1363c <__assert_fail@plt+0x2048>
   135b4:	ldr	r3, [r3]
   135b8:	cmp	r3, #0
   135bc:	ldr	r5, [r0]
   135c0:	beq	135c8 <__assert_fail@plt+0x1fd4>
   135c4:	blx	r3
   135c8:	mov	r2, #5
   135cc:	ldr	r1, [pc, #108]	; 13640 <__assert_fail@plt+0x204c>
   135d0:	mov	r0, #0
   135d4:	bl	11330 <dcgettext@plt>
   135d8:	mov	r8, r0
   135dc:	mov	r0, r9
   135e0:	bl	1a24c <argp_parse@@Base+0x2b38>
   135e4:	add	r2, sp, #12
   135e8:	mov	r1, r7
   135ec:	mov	r9, r0
   135f0:	mov	r0, r6
   135f4:	bl	186f4 <argp_parse@@Base+0xfe0>
   135f8:	mov	r3, r9
   135fc:	mov	r2, r8
   13600:	mov	r1, r5
   13604:	str	r0, [sp]
   13608:	mov	r0, #0
   1360c:	bl	113cc <error@plt>
   13610:	ldr	r0, [sp, #36]	; 0x24
   13614:	ldr	r3, [pc, #40]	; 13644 <__assert_fail@plt+0x2050>
   13618:	ldr	r1, [r4]
   1361c:	mov	r2, #2
   13620:	cmp	r0, r1
   13624:	str	r2, [r3]
   13628:	bne	13634 <__assert_fail@plt+0x2040>
   1362c:	add	sp, sp, #44	; 0x2c
   13630:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13634:	bl	1133c <__stack_chk_fail@plt>
   13638:	andeq	lr, r2, r8, lsl #30
   1363c:	andeq	pc, r2, r0, lsl #9
   13640:	andeq	sp, r1, r8, lsr #6
   13644:	strdeq	pc, [r2], -ip
   13648:	mov	r1, r0
   1364c:	ldr	r0, [pc]	; 13654 <__assert_fail@plt+0x2060>
   13650:	b	12ff4 <__assert_fail@plt+0x1a00>
   13654:	andeq	sp, r1, r4
   13658:	push	{r4, r5, r6, r7, r8, r9, lr}
   1365c:	mov	r7, r3
   13660:	ldr	r4, [pc, #144]	; 136f8 <__assert_fail@plt+0x2104>
   13664:	sub	sp, sp, #44	; 0x2c
   13668:	mov	r9, r0
   1366c:	ldr	r3, [r4]
   13670:	mov	r6, r2
   13674:	str	r3, [sp, #36]	; 0x24
   13678:	bl	1148c <__errno_location@plt>
   1367c:	ldr	r3, [pc, #120]	; 136fc <__assert_fail@plt+0x2108>
   13680:	ldr	r3, [r3]
   13684:	cmp	r3, #0
   13688:	ldr	r5, [r0]
   1368c:	beq	13694 <__assert_fail@plt+0x20a0>
   13690:	blx	r3
   13694:	mov	r2, #5
   13698:	ldr	r1, [pc, #96]	; 13700 <__assert_fail@plt+0x210c>
   1369c:	mov	r0, #0
   136a0:	bl	11330 <dcgettext@plt>
   136a4:	mov	r8, r0
   136a8:	mov	r0, r9
   136ac:	bl	1a24c <argp_parse@@Base+0x2b38>
   136b0:	add	r2, sp, #12
   136b4:	mov	r1, r7
   136b8:	mov	r9, r0
   136bc:	mov	r0, r6
   136c0:	bl	186f4 <argp_parse@@Base+0xfe0>
   136c4:	mov	r3, r9
   136c8:	mov	r2, r8
   136cc:	mov	r1, r5
   136d0:	str	r0, [sp]
   136d4:	mov	r0, #0
   136d8:	bl	113cc <error@plt>
   136dc:	ldr	r2, [sp, #36]	; 0x24
   136e0:	ldr	r3, [r4]
   136e4:	cmp	r2, r3
   136e8:	bne	136f4 <__assert_fail@plt+0x2100>
   136ec:	add	sp, sp, #44	; 0x2c
   136f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   136f4:	bl	1133c <__stack_chk_fail@plt>
   136f8:	andeq	lr, r2, r8, lsl #30
   136fc:	andeq	pc, r2, r0, lsl #9
   13700:	andeq	sp, r1, r0, asr #6
   13704:	push	{r4, r5, r6, r7, lr}
   13708:	sub	sp, sp, #12
   1370c:	mov	r7, r0
   13710:	mov	r6, r1
   13714:	bl	1148c <__errno_location@plt>
   13718:	ldr	r3, [pc, #104]	; 13788 <__assert_fail@plt+0x2194>
   1371c:	ldr	r3, [r3]
   13720:	cmp	r3, #0
   13724:	ldr	r4, [r0]
   13728:	beq	13730 <__assert_fail@plt+0x213c>
   1372c:	blx	r3
   13730:	mov	r2, #5
   13734:	ldr	r1, [pc, #80]	; 1378c <__assert_fail@plt+0x2198>
   13738:	mov	r0, #0
   1373c:	bl	11330 <dcgettext@plt>
   13740:	mov	r5, r0
   13744:	mov	r0, r6
   13748:	bl	1a24c <argp_parse@@Base+0x2b38>
   1374c:	mov	r1, r7
   13750:	mov	r6, r0
   13754:	mov	r0, #1
   13758:	bl	1a390 <argp_parse@@Base+0x2c7c>
   1375c:	mov	r3, r6
   13760:	mov	r2, r5
   13764:	mov	r1, r4
   13768:	str	r0, [sp]
   1376c:	mov	r0, #0
   13770:	bl	113cc <error@plt>
   13774:	ldr	r3, [pc, #20]	; 13790 <__assert_fail@plt+0x219c>
   13778:	mov	r2, #2
   1377c:	str	r2, [r3]
   13780:	add	sp, sp, #12
   13784:	pop	{r4, r5, r6, r7, pc}
   13788:	andeq	pc, r2, r0, lsl #9
   1378c:	andeq	sp, r1, r0, ror #6
   13790:	strdeq	pc, [r2], -ip
   13794:	mov	r1, r0
   13798:	push	{r4, lr}
   1379c:	ldr	r0, [pc]	; 137a4 <__assert_fail@plt+0x21b0>
   137a0:	bl	12f88 <__assert_fail@plt+0x1994>
   137a4:	andeq	sp, r1, r0, lsl #7
   137a8:	mov	r1, r0
   137ac:	ldr	r0, [pc]	; 137b4 <__assert_fail@plt+0x21c0>
   137b0:	b	12f08 <__assert_fail@plt+0x1914>
   137b4:	andeq	sp, r1, r0, lsl #7
   137b8:	mov	r1, r0
   137bc:	ldr	r0, [pc]	; 137c4 <__assert_fail@plt+0x21d0>
   137c0:	b	12ff4 <__assert_fail@plt+0x1a00>
   137c4:	andeq	sp, r1, r0, lsl #7
   137c8:	mov	r1, r0
   137cc:	ldr	r0, [pc]	; 137d4 <__assert_fail@plt+0x21e0>
   137d0:	b	12f08 <__assert_fail@plt+0x1914>
   137d4:	andeq	sp, r1, r8, lsl #7
   137d8:	mov	r1, r0
   137dc:	ldr	r0, [pc]	; 137e4 <__assert_fail@plt+0x21f0>
   137e0:	b	12ff4 <__assert_fail@plt+0x1a00>
   137e4:	andeq	sp, r1, r8, lsl #7
   137e8:	mov	r1, r0
   137ec:	ldr	r0, [pc]	; 137f4 <__assert_fail@plt+0x2200>
   137f0:	b	12f08 <__assert_fail@plt+0x1914>
   137f4:	muleq	r1, r4, r3
   137f8:	mov	r1, r0
   137fc:	ldr	r0, [pc]	; 13804 <__assert_fail@plt+0x2210>
   13800:	b	12f08 <__assert_fail@plt+0x1914>
   13804:	muleq	r1, ip, r3
   13808:	mov	r1, r0
   1380c:	ldr	r0, [pc]	; 13814 <__assert_fail@plt+0x2220>
   13810:	b	12f08 <__assert_fail@plt+0x1914>
   13814:	andeq	sp, r1, r4, lsr #7
   13818:	mov	r1, r0
   1381c:	ldr	r0, [pc]	; 13824 <__assert_fail@plt+0x2230>
   13820:	b	12f08 <__assert_fail@plt+0x1914>
   13824:	andeq	sp, r1, ip, lsr #7
   13828:	push	{r4, r5, r6, lr}
   1382c:	subs	r6, r1, #0
   13830:	sub	sp, sp, #8
   13834:	beq	138a0 <__assert_fail@plt+0x22ac>
   13838:	ldr	r3, [pc, #116]	; 138b4 <__assert_fail@plt+0x22c0>
   1383c:	mov	r4, r2
   13840:	mov	r5, r0
   13844:	ldr	r3, [r3]
   13848:	cmp	r3, #0
   1384c:	beq	13854 <__assert_fail@plt+0x2260>
   13850:	blx	r3
   13854:	mov	r3, #5
   13858:	str	r3, [sp]
   1385c:	ldr	r2, [pc, #84]	; 138b8 <__assert_fail@plt+0x22c4>
   13860:	mov	r3, r4
   13864:	ldr	r1, [pc, #80]	; 138bc <__assert_fail@plt+0x22c8>
   13868:	mov	r0, #0
   1386c:	bl	115e8 <dcngettext@plt>
   13870:	mov	r1, #0
   13874:	mov	r3, r5
   13878:	str	r4, [sp, #4]
   1387c:	str	r6, [sp]
   13880:	mov	r2, r0
   13884:	mov	r0, r1
   13888:	bl	113cc <error@plt>
   1388c:	ldr	r3, [pc, #44]	; 138c0 <__assert_fail@plt+0x22cc>
   13890:	mov	r2, #2
   13894:	str	r2, [r3]
   13898:	add	sp, sp, #8
   1389c:	pop	{r4, r5, r6, pc}
   138a0:	mov	r1, r0
   138a4:	ldr	r0, [pc, #24]	; 138c4 <__assert_fail@plt+0x22d0>
   138a8:	add	sp, sp, #8
   138ac:	pop	{r4, r5, r6, lr}
   138b0:	b	12f08 <__assert_fail@plt+0x1914>
   138b4:	andeq	pc, r2, r0, lsl #9
   138b8:			; <UNDEFINED> instruction: 0x0001d3b4
   138bc:	ldrdeq	sp, [r1], -r4
   138c0:	strdeq	pc, [r2], -ip
   138c4:	andeq	sp, r1, ip, lsr #7
   138c8:	mov	r1, r0
   138cc:	push	{r4, lr}
   138d0:	ldr	r0, [pc]	; 138d8 <__assert_fail@plt+0x22e4>
   138d4:	bl	12f88 <__assert_fail@plt+0x1994>
   138d8:	strdeq	sp, [r1], -r4
   138dc:	ldr	r3, [pc, #8]	; 138ec <__assert_fail@plt+0x22f8>
   138e0:	push	{r4, lr}
   138e4:	ldr	r0, [r3]
   138e8:	bl	1145c <exit@plt>
   138ec:	andeq	pc, r2, ip, lsl #5
   138f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f4:	mov	r5, r1
   138f8:	sub	sp, sp, #12
   138fc:	mov	r4, r2
   13900:	str	r2, [sp]
   13904:	mov	r7, r3
   13908:	mov	sl, r0
   1390c:	bl	11468 <strlen@plt>
   13910:	ldr	fp, [r5]
   13914:	cmp	fp, #0
   13918:	beq	139dc <__assert_fail@plt+0x23e8>
   1391c:	mov	r6, #0
   13920:	mov	r8, r0
   13924:	str	r6, [sp, #4]
   13928:	mvn	r9, #0
   1392c:	b	13958 <__assert_fail@plt+0x2364>
   13930:	bl	11318 <memcmp@plt>
   13934:	ldr	r3, [sp, #4]
   13938:	cmp	r0, #0
   1393c:	movne	r3, #1
   13940:	str	r3, [sp, #4]
   13944:	ldr	fp, [r5, #4]!
   13948:	add	r6, r6, #1
   1394c:	cmp	fp, #0
   13950:	add	r4, r4, r7
   13954:	beq	139b4 <__assert_fail@plt+0x23c0>
   13958:	mov	r2, r8
   1395c:	mov	r1, sl
   13960:	mov	r0, fp
   13964:	bl	115c4 <strncmp@plt>
   13968:	cmp	r0, #0
   1396c:	mov	r0, fp
   13970:	bne	13944 <__assert_fail@plt+0x2350>
   13974:	bl	11468 <strlen@plt>
   13978:	ldr	r3, [sp]
   1397c:	mov	r2, r7
   13980:	mov	r1, r4
   13984:	cmp	r0, r8
   13988:	mla	r0, r7, r9, r3
   1398c:	beq	139cc <__assert_fail@plt+0x23d8>
   13990:	cmn	r9, #1
   13994:	moveq	r9, r6
   13998:	beq	13944 <__assert_fail@plt+0x2350>
   1399c:	ldr	r3, [sp]
   139a0:	cmp	r3, #0
   139a4:	bne	13930 <__assert_fail@plt+0x233c>
   139a8:	mov	r3, #1
   139ac:	str	r3, [sp, #4]
   139b0:	b	13944 <__assert_fail@plt+0x2350>
   139b4:	ldr	r3, [sp, #4]
   139b8:	cmp	r3, #0
   139bc:	mvnne	r9, #1
   139c0:	mov	r0, r9
   139c4:	add	sp, sp, #12
   139c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139cc:	mov	r9, r6
   139d0:	mov	r0, r9
   139d4:	add	sp, sp, #12
   139d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139dc:	mvn	r9, #0
   139e0:	b	139c0 <__assert_fail@plt+0x23cc>
   139e4:	cmn	r2, #1
   139e8:	push	{r4, r5, r6, lr}
   139ec:	mov	r2, #5
   139f0:	sub	sp, sp, #8
   139f4:	mov	r5, r1
   139f8:	mov	r6, r0
   139fc:	ldreq	r1, [pc, #76]	; 13a50 <__assert_fail@plt+0x245c>
   13a00:	ldrne	r1, [pc, #76]	; 13a54 <__assert_fail@plt+0x2460>
   13a04:	mov	r0, #0
   13a08:	bl	11330 <dcgettext@plt>
   13a0c:	mov	r2, r5
   13a10:	mov	r1, #6
   13a14:	mov	r4, r0
   13a18:	mov	r0, #0
   13a1c:	bl	1a0d0 <argp_parse@@Base+0x29bc>
   13a20:	mov	r1, r6
   13a24:	mov	r5, r0
   13a28:	mov	r0, #1
   13a2c:	bl	1a390 <argp_parse@@Base+0x2c7c>
   13a30:	mov	r1, #0
   13a34:	mov	r3, r5
   13a38:	mov	r2, r4
   13a3c:	str	r0, [sp]
   13a40:	mov	r0, r1
   13a44:	bl	113cc <error@plt>
   13a48:	add	sp, sp, #8
   13a4c:	pop	{r4, r5, r6, pc}
   13a50:	strdeq	sp, [r1], -ip
   13a54:	andeq	sp, r1, r8, lsl r4
   13a58:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a5c:	mov	r6, r0
   13a60:	ldr	sl, [pc, #224]	; 13b48 <__assert_fail@plt+0x2554>
   13a64:	mov	r4, r1
   13a68:	mov	r7, r2
   13a6c:	ldr	r1, [pc, #216]	; 13b4c <__assert_fail@plt+0x2558>
   13a70:	mov	r2, #5
   13a74:	mov	r0, #0
   13a78:	bl	11330 <dcgettext@plt>
   13a7c:	ldr	r1, [sl]
   13a80:	bl	11264 <fputs_unlocked@plt>
   13a84:	ldr	fp, [r6]
   13a88:	cmp	fp, #0
   13a8c:	movne	r9, #0
   13a90:	movne	r5, r9
   13a94:	bne	13ad0 <__assert_fail@plt+0x24dc>
   13a98:	b	13b14 <__assert_fail@plt+0x2520>
   13a9c:	mov	r0, fp
   13aa0:	bl	1a3a0 <argp_parse@@Base+0x2c8c>
   13aa4:	ldr	r2, [pc, #164]	; 13b50 <__assert_fail@plt+0x255c>
   13aa8:	mov	r1, #1
   13aac:	mov	r9, r4
   13ab0:	mov	r3, r0
   13ab4:	mov	r0, r8
   13ab8:	bl	114ec <__fprintf_chk@plt>
   13abc:	ldr	fp, [r6, #4]!
   13ac0:	add	r5, r5, #1
   13ac4:	cmp	fp, #0
   13ac8:	add	r4, r4, r7
   13acc:	beq	13b14 <__assert_fail@plt+0x2520>
   13ad0:	cmp	r5, #0
   13ad4:	mov	r1, r4
   13ad8:	mov	r2, r7
   13adc:	mov	r0, r9
   13ae0:	ldr	r8, [sl]
   13ae4:	beq	13a9c <__assert_fail@plt+0x24a8>
   13ae8:	bl	11318 <memcmp@plt>
   13aec:	cmp	r0, #0
   13af0:	bne	13a9c <__assert_fail@plt+0x24a8>
   13af4:	mov	r0, fp
   13af8:	bl	1a3a0 <argp_parse@@Base+0x2c8c>
   13afc:	ldr	r2, [pc, #80]	; 13b54 <__assert_fail@plt+0x2560>
   13b00:	mov	r1, #1
   13b04:	mov	r3, r0
   13b08:	mov	r0, r8
   13b0c:	bl	114ec <__fprintf_chk@plt>
   13b10:	b	13abc <__assert_fail@plt+0x24c8>
   13b14:	ldr	r0, [sl]
   13b18:	ldr	r3, [r0, #20]
   13b1c:	ldr	r2, [r0, #24]
   13b20:	cmp	r3, r2
   13b24:	bcs	13b3c <__assert_fail@plt+0x2548>
   13b28:	add	r1, r3, #1
   13b2c:	mov	r2, #10
   13b30:	str	r1, [r0, #20]
   13b34:	strb	r2, [r3]
   13b38:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b3c:	mov	r1, #10
   13b40:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b44:	b	11528 <__overflow@plt>
   13b48:	andeq	pc, r2, r8, ror #5
   13b4c:	andeq	sp, r1, r8, lsr r4
   13b50:	andeq	sp, r1, r0, asr r4
   13b54:	andeq	sp, r1, r8, asr r4
   13b58:	push	{r4, r5, r6, r7, r8, lr}
   13b5c:	mov	r6, r1
   13b60:	mov	r4, r2
   13b64:	mov	r5, r3
   13b68:	mov	r7, r0
   13b6c:	ldr	r3, [sp, #24]
   13b70:	mov	r2, r5
   13b74:	mov	r1, r4
   13b78:	mov	r0, r6
   13b7c:	bl	138f0 <__assert_fail@plt+0x22fc>
   13b80:	cmp	r0, #0
   13b84:	popge	{r4, r5, r6, r7, r8, pc}
   13b88:	mov	r2, r0
   13b8c:	mov	r1, r6
   13b90:	mov	r0, r7
   13b94:	bl	139e4 <__assert_fail@plt+0x23f0>
   13b98:	mov	r0, r4
   13b9c:	ldr	r2, [sp, #24]
   13ba0:	mov	r1, r5
   13ba4:	bl	13a58 <__assert_fail@plt+0x2464>
   13ba8:	ldr	r3, [sp, #28]
   13bac:	blx	r3
   13bb0:	mvn	r0, #0
   13bb4:	pop	{r4, r5, r6, r7, r8, pc}
   13bb8:	push	{r4, r5, r6, r7, r8, lr}
   13bbc:	ldr	r7, [r1]
   13bc0:	cmp	r7, #0
   13bc4:	beq	13c04 <__assert_fail@plt+0x2610>
   13bc8:	mov	r6, r3
   13bcc:	mov	r8, r0
   13bd0:	mov	r4, r2
   13bd4:	mov	r5, r1
   13bd8:	b	13be8 <__assert_fail@plt+0x25f4>
   13bdc:	ldr	r7, [r5, #4]!
   13be0:	cmp	r7, #0
   13be4:	beq	13c04 <__assert_fail@plt+0x2610>
   13be8:	mov	r1, r4
   13bec:	mov	r2, r6
   13bf0:	mov	r0, r8
   13bf4:	bl	11318 <memcmp@plt>
   13bf8:	add	r4, r4, r6
   13bfc:	cmp	r0, #0
   13c00:	bne	13bdc <__assert_fail@plt+0x25e8>
   13c04:	mov	r0, r7
   13c08:	pop	{r4, r5, r6, r7, r8, pc}
   13c0c:	push	{r4, r5, r6, lr}
   13c10:	mov	r5, r0
   13c14:	ldr	r0, [r0, #12]
   13c18:	cmp	r0, #0
   13c1c:	beq	13c30 <__assert_fail@plt+0x263c>
   13c20:	ldr	r4, [r0, #24]
   13c24:	bl	112c4 <free@plt>
   13c28:	subs	r0, r4, #0
   13c2c:	bne	13c20 <__assert_fail@plt+0x262c>
   13c30:	ldr	r3, [r5, #4]
   13c34:	cmp	r3, #0
   13c38:	bne	13c48 <__assert_fail@plt+0x2654>
   13c3c:	mov	r0, r5
   13c40:	pop	{r4, r5, r6, lr}
   13c44:	b	112c4 <free@plt>
   13c48:	ldr	r0, [r5]
   13c4c:	bl	112c4 <free@plt>
   13c50:	ldr	r0, [r5, #8]
   13c54:	bl	112c4 <free@plt>
   13c58:	mov	r0, r5
   13c5c:	pop	{r4, r5, r6, lr}
   13c60:	b	112c4 <free@plt>
   13c64:	ldr	r2, [r0, #8]
   13c68:	cmp	r2, #0
   13c6c:	beq	13c78 <__assert_fail@plt+0x2684>
   13c70:	mov	r0, #0
   13c74:	bx	lr
   13c78:	ldr	r2, [r1, #8]
   13c7c:	cmp	r2, #0
   13c80:	bne	13c70 <__assert_fail@plt+0x267c>
   13c84:	ldr	r1, [r1, #12]
   13c88:	ldr	r2, [r0, #12]
   13c8c:	orr	r2, r2, r1
   13c90:	tst	r2, #16
   13c94:	ldreq	r2, [r3]
   13c98:	ldreq	r1, [r0, #4]
   13c9c:	addeq	r0, r2, #1
   13ca0:	streq	r0, [r3]
   13ca4:	strbeq	r1, [r2]
   13ca8:	b	13c70 <__assert_fail@plt+0x267c>
   13cac:	subs	ip, r0, #0
   13cb0:	push	{r4, r5, r6, lr}
   13cb4:	ldr	r0, [sp, #16]
   13cb8:	ldr	r5, [sp, #20]
   13cbc:	popeq	{r4, r5, r6, pc}
   13cc0:	mov	lr, r1
   13cc4:	mov	r6, r3
   13cc8:	ldr	r3, [lr]
   13ccc:	mov	r4, r2
   13cd0:	tst	r3, #1
   13cd4:	mov	r1, ip
   13cd8:	mov	r2, #5
   13cdc:	beq	13cf8 <__assert_fail@plt+0x2704>
   13ce0:	bl	11330 <dcgettext@plt>
   13ce4:	mov	r1, r6
   13ce8:	mov	r2, r0
   13cec:	mov	r0, r5
   13cf0:	pop	{r4, r5, r6, lr}
   13cf4:	b	1b380 <argp_parse@@Base+0x3c6c>
   13cf8:	bl	11330 <dcgettext@plt>
   13cfc:	mov	r1, r4
   13d00:	mov	r2, r0
   13d04:	mov	r0, r5
   13d08:	pop	{r4, r5, r6, lr}
   13d0c:	b	1b380 <argp_parse@@Base+0x3c6c>
   13d10:	push	{r4, r5, r6, lr}
   13d14:	ldr	r4, [r0, #12]
   13d18:	ands	r4, r4, #8
   13d1c:	movne	r4, #0
   13d20:	bne	13d4c <__assert_fail@plt+0x2758>
   13d24:	ldr	r5, [r0, #4]
   13d28:	sub	r3, r5, #1
   13d2c:	cmp	r3, #254	; 0xfe
   13d30:	bhi	13d4c <__assert_fail@plt+0x2758>
   13d34:	bl	11450 <__ctype_b_loc@plt>
   13d38:	lsl	r3, r5, #1
   13d3c:	ldr	r2, [r0]
   13d40:	ldrh	r3, [r2, r3]
   13d44:	tst	r3, #16384	; 0x4000
   13d48:	movne	r4, r5
   13d4c:	mov	r0, r4
   13d50:	pop	{r4, r5, r6, pc}
   13d54:	push	{r4, lr}
   13d58:	mov	r4, r0
   13d5c:	bl	11450 <__ctype_b_loc@plt>
   13d60:	ldr	r2, [r4]
   13d64:	ldr	lr, [r0]
   13d68:	b	13d70 <__assert_fail@plt+0x277c>
   13d6c:	str	r2, [r4]
   13d70:	ldrb	r1, [r2]
   13d74:	mov	r3, r2
   13d78:	add	r2, r2, #1
   13d7c:	lsl	r0, r1, #1
   13d80:	ldrh	ip, [lr, r0]
   13d84:	tst	ip, #8192	; 0x2000
   13d88:	bne	13d6c <__assert_fail@plt+0x2778>
   13d8c:	subs	r0, r1, #45	; 0x2d
   13d90:	movne	r0, #1
   13d94:	cmp	r1, #0
   13d98:	popeq	{r4, pc}
   13d9c:	tst	ip, #8
   13da0:	popne	{r4, pc}
   13da4:	add	r3, r3, #1
   13da8:	str	r3, [r4]
   13dac:	ldrb	r2, [r3]
   13db0:	cmp	r2, #0
   13db4:	lsl	r2, r2, #1
   13db8:	popeq	{r4, pc}
   13dbc:	ldrh	r2, [lr, r2]
   13dc0:	tst	r2, #8
   13dc4:	beq	13da4 <__assert_fail@plt+0x27b0>
   13dc8:	pop	{r4, pc}
   13dcc:	cmp	r1, #0
   13dd0:	push	{r4, r5, r6, r7, r8, lr}
   13dd4:	beq	13e4c <__assert_fail@plt+0x2858>
   13dd8:	mov	r6, r0
   13ddc:	mov	r8, r2
   13de0:	sub	r7, r1, #1
   13de4:	ldrd	r4, [r6]
   13de8:	cmp	r5, #0
   13dec:	sub	r5, r5, #1
   13df0:	beq	13e30 <__assert_fail@plt+0x283c>
   13df4:	add	r4, r4, #24
   13df8:	ldr	r0, [r4, #-24]	; 0xffffffe8
   13dfc:	sub	r5, r5, #1
   13e00:	cmp	r0, #0
   13e04:	beq	13e24 <__assert_fail@plt+0x2830>
   13e08:	ldr	r3, [r4, #-12]
   13e0c:	mov	r1, r8
   13e10:	tst	r3, #2
   13e14:	bne	13e24 <__assert_fail@plt+0x2830>
   13e18:	bl	1127c <strcmp@plt>
   13e1c:	cmp	r0, #0
   13e20:	beq	13e44 <__assert_fail@plt+0x2850>
   13e24:	cmn	r5, #1
   13e28:	add	r4, r4, #24
   13e2c:	bne	13df8 <__assert_fail@plt+0x2804>
   13e30:	sub	r7, r7, #1
   13e34:	cmn	r7, #1
   13e38:	add	r6, r6, #28
   13e3c:	bne	13de4 <__assert_fail@plt+0x27f0>
   13e40:	mov	r6, #0
   13e44:	mov	r0, r6
   13e48:	pop	{r4, r5, r6, r7, r8, pc}
   13e4c:	mov	r6, r1
   13e50:	b	13e44 <__assert_fail@plt+0x2850>
   13e54:	push	{r4, r5, r6, lr}
   13e58:	subs	r5, r0, #0
   13e5c:	mov	r4, r1
   13e60:	beq	13e74 <__assert_fail@plt+0x2880>
   13e64:	mov	r1, #10
   13e68:	bl	11474 <strchr@plt>
   13e6c:	adds	r5, r0, #0
   13e70:	movne	r5, #1
   13e74:	cmp	r4, #0
   13e78:	beq	13ea4 <__assert_fail@plt+0x28b0>
   13e7c:	ldr	r3, [r4]
   13e80:	cmp	r3, #0
   13e84:	beq	13ea4 <__assert_fail@plt+0x28b0>
   13e88:	ldr	r1, [r3, #16]
   13e8c:	ldr	r0, [r3, #8]
   13e90:	bl	13e54 <__assert_fail@plt+0x2860>
   13e94:	ldr	r3, [r4, #16]!
   13e98:	cmp	r3, #0
   13e9c:	add	r5, r5, r0
   13ea0:	bne	13e88 <__assert_fail@plt+0x2894>
   13ea4:	mov	r0, r5
   13ea8:	pop	{r4, r5, r6, pc}
   13eac:	push	{r4, r5, r6, lr}
   13eb0:	mov	r6, r0
   13eb4:	mov	r5, r1
   13eb8:	mov	r0, r2
   13ebc:	mov	r1, r3
   13ec0:	mov	r4, r2
   13ec4:	bl	18534 <argp_parse@@Base+0xe20>
   13ec8:	ldr	r3, [r4, #20]
   13ecc:	mov	r1, r6
   13ed0:	mov	r2, r0
   13ed4:	mov	r0, r5
   13ed8:	pop	{r4, r5, r6, lr}
   13edc:	bx	r3
   13ee0:	mov	r3, r0
   13ee4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ee8:	sub	sp, sp, #52	; 0x34
   13eec:	ldr	r2, [r3, #16]
   13ef0:	str	r0, [sp, #8]
   13ef4:	mov	r0, #16
   13ef8:	str	r1, [sp, #4]
   13efc:	str	r2, [sp, #12]
   13f00:	ldr	r4, [r3]
   13f04:	bl	113fc <malloc@plt>
   13f08:	subs	r9, r0, #0
   13f0c:	beq	144d0 <__assert_fail@plt+0x2edc>
   13f10:	mov	r3, #0
   13f14:	cmp	r4, #0
   13f18:	str	r3, [r9, #4]
   13f1c:	str	r3, [r9, #12]
   13f20:	beq	1415c <__assert_fail@plt+0x2b68>
   13f24:	ldr	r6, [r4, #12]
   13f28:	ands	r6, r6, #4
   13f2c:	bne	14494 <__assert_fail@plt+0x2ea0>
   13f30:	mov	r8, r6
   13f34:	add	r5, r4, #24
   13f38:	b	13f84 <__assert_fail@plt+0x2990>
   13f3c:	ldr	r3, [r5, #-12]
   13f40:	tst	r3, #4
   13f44:	addeq	r6, r6, #1
   13f48:	streq	r6, [r9, #4]
   13f4c:	ldreq	r3, [r5, #-12]
   13f50:	tst	r3, #8
   13f54:	bne	13f80 <__assert_fail@plt+0x298c>
   13f58:	ldr	r7, [r5, #-20]	; 0xffffffec
   13f5c:	sub	r3, r7, #1
   13f60:	cmp	r3, #254	; 0xfe
   13f64:	bhi	13f80 <__assert_fail@plt+0x298c>
   13f68:	bl	11450 <__ctype_b_loc@plt>
   13f6c:	lsl	r7, r7, #1
   13f70:	ldr	r3, [r0]
   13f74:	ldrh	r3, [r3, r7]
   13f78:	tst	r3, #16384	; 0x4000
   13f7c:	addne	r8, r8, #1
   13f80:	add	r5, r5, #24
   13f84:	ldr	r3, [r5, #-20]	; 0xffffffec
   13f88:	cmp	r3, #0
   13f8c:	bne	13f3c <__assert_fail@plt+0x2948>
   13f90:	ldr	r3, [r5, #-24]	; 0xffffffe8
   13f94:	cmp	r3, #0
   13f98:	bne	13f3c <__assert_fail@plt+0x2948>
   13f9c:	ldr	r3, [r5, #-8]
   13fa0:	cmp	r3, #0
   13fa4:	bne	13f3c <__assert_fail@plt+0x2948>
   13fa8:	ldr	r7, [r5, #-4]
   13fac:	cmp	r7, #0
   13fb0:	bne	13f3c <__assert_fail@plt+0x2948>
   13fb4:	rsb	r0, r6, r6, lsl #3
   13fb8:	lsl	r0, r0, #2
   13fbc:	bl	113fc <malloc@plt>
   13fc0:	mov	r5, r0
   13fc4:	str	r0, [r9]
   13fc8:	add	r0, r8, #1
   13fcc:	bl	113fc <malloc@plt>
   13fd0:	cmp	r5, #0
   13fd4:	cmpne	r0, #0
   13fd8:	str	r0, [r9, #8]
   13fdc:	beq	14480 <__assert_fail@plt+0x2e8c>
   13fe0:	ldr	r2, [pc, #1296]	; 144f8 <__assert_fail@plt+0x2f04>
   13fe4:	cmp	r6, r2
   13fe8:	bhi	144a8 <__assert_fail@plt+0x2eb4>
   13fec:	ldr	r2, [r4, #4]
   13ff0:	ldr	fp, [sp, #8]
   13ff4:	str	r9, [sp, #16]
   13ff8:	add	r5, r5, #28
   13ffc:	mov	r6, r0
   14000:	mov	r9, r0
   14004:	cmp	r2, #0
   14008:	ldr	sl, [r4, #20]
   1400c:	bne	1401c <__assert_fail@plt+0x2a28>
   14010:	ldr	r3, [r4]
   14014:	cmp	r3, #0
   14018:	beq	14108 <__assert_fail@plt+0x2b14>
   1401c:	mov	r3, #0
   14020:	cmp	sl, #0
   14024:	str	r4, [r5, #-28]	; 0xffffffe4
   14028:	str	r3, [r5, #-24]	; 0xffffffe8
   1402c:	str	r6, [r5, #-20]	; 0xffffffec
   14030:	bne	14044 <__assert_fail@plt+0x2a50>
   14034:	ldr	r3, [r4]
   14038:	orrs	r3, r3, r2
   1403c:	movne	sl, r7
   14040:	beq	14128 <__assert_fail@plt+0x2b34>
   14044:	ldr	r3, [sp, #4]
   14048:	mov	r8, #1
   1404c:	str	sl, [r5, #-16]
   14050:	str	r3, [r5, #-12]
   14054:	str	fp, [r5, #-8]
   14058:	str	r8, [r5, #-24]	; 0xffffffe8
   1405c:	ldr	r3, [r4, #12]
   14060:	tst	r3, #8
   14064:	bne	140cc <__assert_fail@plt+0x2ad8>
   14068:	ldr	r7, [r4, #4]
   1406c:	sub	r3, r7, #1
   14070:	cmp	r3, #254	; 0xfe
   14074:	bhi	140cc <__assert_fail@plt+0x2ad8>
   14078:	bl	11450 <__ctype_b_loc@plt>
   1407c:	lsl	r3, r7, #1
   14080:	ldr	r2, [r0]
   14084:	ldrh	r3, [r2, r3]
   14088:	tst	r3, #16384	; 0x4000
   1408c:	beq	140cc <__assert_fail@plt+0x2ad8>
   14090:	cmp	r9, r6
   14094:	uxtb	r7, r7
   14098:	bcs	140c8 <__assert_fail@plt+0x2ad4>
   1409c:	ldrb	r3, [r9]
   140a0:	cmp	r3, r7
   140a4:	beq	140cc <__assert_fail@plt+0x2ad8>
   140a8:	mov	r3, r9
   140ac:	sub	r2, r6, #1
   140b0:	b	140c0 <__assert_fail@plt+0x2acc>
   140b4:	ldrb	r1, [r3, #1]!
   140b8:	cmp	r1, r7
   140bc:	beq	140cc <__assert_fail@plt+0x2ad8>
   140c0:	cmp	r3, r2
   140c4:	bne	140b4 <__assert_fail@plt+0x2ac0>
   140c8:	strb	r7, [r6], #1
   140cc:	add	r4, r4, #24
   140d0:	ldr	r0, [r4, #4]
   140d4:	cmp	r0, #0
   140d8:	bne	140e8 <__assert_fail@plt+0x2af4>
   140dc:	ldr	r3, [r4]
   140e0:	cmp	r3, #0
   140e4:	beq	14130 <__assert_fail@plt+0x2b3c>
   140e8:	ldr	r3, [r4, #12]
   140ec:	add	r8, r8, #1
   140f0:	tst	r3, #4
   140f4:	bne	14058 <__assert_fail@plt+0x2a64>
   140f8:	mov	r2, r0
   140fc:	add	r5, r5, #28
   14100:	mov	r7, sl
   14104:	b	14004 <__assert_fail@plt+0x2a10>
   14108:	ldr	r3, [r4, #16]
   1410c:	cmp	r3, #0
   14110:	beq	1414c <__assert_fail@plt+0x2b58>
   14114:	cmp	sl, #0
   14118:	str	r4, [r5, #-28]	; 0xffffffe4
   1411c:	str	r2, [r5, #-24]	; 0xffffffe8
   14120:	str	r6, [r5, #-20]	; 0xffffffec
   14124:	bne	14044 <__assert_fail@plt+0x2a50>
   14128:	add	sl, r7, #1
   1412c:	b	14044 <__assert_fail@plt+0x2a50>
   14130:	ldr	r3, [r4, #16]
   14134:	cmp	r3, #0
   14138:	bne	140e8 <__assert_fail@plt+0x2af4>
   1413c:	ldr	r2, [r4, #20]
   14140:	cmp	r2, #0
   14144:	beq	140fc <__assert_fail@plt+0x2b08>
   14148:	b	140e8 <__assert_fail@plt+0x2af4>
   1414c:	cmp	sl, #0
   14150:	bne	14270 <__assert_fail@plt+0x2c7c>
   14154:	ldr	r9, [sp, #16]
   14158:	strb	r2, [r6]
   1415c:	ldr	fp, [sp, #12]
   14160:	cmp	fp, #0
   14164:	beq	14264 <__assert_fail@plt+0x2c70>
   14168:	ldr	r5, [fp]
   1416c:	cmp	r5, #0
   14170:	beq	14264 <__assert_fail@plt+0x2c70>
   14174:	add	r3, r9, #12
   14178:	str	r3, [sp, #44]	; 0x2c
   1417c:	ldr	r6, [fp, #12]
   14180:	ldr	r7, [fp, #8]
   14184:	cmp	r6, #0
   14188:	bne	14194 <__assert_fail@plt+0x2ba0>
   1418c:	cmp	r7, #0
   14190:	beq	14470 <__assert_fail@plt+0x2e7c>
   14194:	ldr	r8, [sp, #8]
   14198:	mov	r0, #28
   1419c:	ldr	r4, [r8, #16]
   141a0:	bl	113fc <malloc@plt>
   141a4:	subs	r1, r0, #0
   141a8:	beq	141e8 <__assert_fail@plt+0x2bf4>
   141ac:	ldr	r3, [sp, #4]
   141b0:	sub	r4, fp, r4
   141b4:	cmp	r3, #0
   141b8:	str	r3, [r1, #12]
   141bc:	ldrne	r3, [r3, #20]
   141c0:	ldr	r2, [r9, #12]
   141c4:	asr	r4, r4, #4
   141c8:	ldreq	r3, [sp, #4]
   141cc:	addne	r3, r3, #1
   141d0:	stmib	r1, {r4, r6}
   141d4:	str	r7, [r1]
   141d8:	str	r8, [r1, #16]
   141dc:	str	r3, [r1, #20]
   141e0:	str	r2, [r1, #24]
   141e4:	str	r1, [r9, #12]
   141e8:	mov	r0, r5
   141ec:	bl	13ee0 <__assert_fail@plt+0x28ec>
   141f0:	ldr	r2, [r9, #12]
   141f4:	cmp	r2, #0
   141f8:	mov	sl, r0
   141fc:	bne	14208 <__assert_fail@plt+0x2c14>
   14200:	b	14478 <__assert_fail@plt+0x2e84>
   14204:	mov	r2, r3
   14208:	ldr	r3, [r2, #24]
   1420c:	cmp	r3, #0
   14210:	bne	14204 <__assert_fail@plt+0x2c10>
   14214:	add	r2, r2, #24
   14218:	ldr	r6, [sl, #4]
   1421c:	ldr	r1, [sl, #12]
   14220:	mov	r3, #0
   14224:	cmp	r6, #0
   14228:	str	r1, [r2]
   1422c:	str	r3, [sl, #12]
   14230:	beq	14250 <__assert_fail@plt+0x2c5c>
   14234:	ldr	r5, [r9, #4]
   14238:	ldr	r7, [sl, #8]
   1423c:	cmp	r5, r3
   14240:	bne	14280 <__assert_fail@plt+0x2c8c>
   14244:	ldr	r2, [sl]
   14248:	stm	r9, {r2, r6, r7}
   1424c:	str	r5, [sl, #4]
   14250:	mov	r0, sl
   14254:	bl	13c0c <__assert_fail@plt+0x2618>
   14258:	ldr	r5, [fp, #16]!
   1425c:	cmp	r5, #0
   14260:	bne	1417c <__assert_fail@plt+0x2b88>
   14264:	mov	r0, r9
   14268:	add	sp, sp, #52	; 0x34
   1426c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14270:	str	r4, [r5, #-28]	; 0xffffffe4
   14274:	str	r2, [r5, #-24]	; 0xffffffe8
   14278:	str	r6, [r5, #-20]	; 0xffffffec
   1427c:	b	14044 <__assert_fail@plt+0x2a50>
   14280:	add	r3, r6, r5
   14284:	str	r3, [sp, #20]
   14288:	rsb	r0, r3, r3, lsl #3
   1428c:	lsl	r0, r0, #2
   14290:	bl	113fc <malloc@plt>
   14294:	ldr	r8, [r9, #8]
   14298:	str	r0, [sp, #16]
   1429c:	mov	r0, r8
   142a0:	bl	11468 <strlen@plt>
   142a4:	mov	r4, r0
   142a8:	str	r0, [sp, #24]
   142ac:	mov	r0, r7
   142b0:	bl	11468 <strlen@plt>
   142b4:	add	r0, r4, r0
   142b8:	add	r0, r0, #1
   142bc:	bl	113fc <malloc@plt>
   142c0:	ldr	r3, [sp, #16]
   142c4:	cmp	r3, #0
   142c8:	cmpne	r0, #0
   142cc:	str	r0, [sp, #12]
   142d0:	beq	144bc <__assert_fail@plt+0x2ec8>
   142d4:	ldr	r3, [sp, #20]
   142d8:	ldr	r2, [pc, #536]	; 144f8 <__assert_fail@plt+0x2f04>
   142dc:	cmp	r3, r2
   142e0:	bhi	144e4 <__assert_fail@plt+0x2ef0>
   142e4:	rsb	r4, r5, r5, lsl #3
   142e8:	ldr	r1, [r9]
   142ec:	lsl	r4, r4, #2
   142f0:	mov	r2, r4
   142f4:	ldr	r0, [sp, #16]
   142f8:	str	r1, [sp, #28]
   142fc:	bl	11444 <mempcpy@plt>
   14300:	rsb	r2, r6, r6, lsl #3
   14304:	ldr	r1, [sl]
   14308:	lsl	r2, r2, #2
   1430c:	bl	112e8 <memcpy@plt>
   14310:	ldr	r2, [sp, #24]
   14314:	mov	r1, r8
   14318:	ldr	r0, [sp, #12]
   1431c:	bl	112e8 <memcpy@plt>
   14320:	ldr	r1, [sp, #16]
   14324:	ldr	r2, [sp, #12]
   14328:	ldr	r3, [r1, #8]
   1432c:	subs	r5, r5, #1
   14330:	sub	r3, r3, r8
   14334:	add	r3, r2, r3
   14338:	str	r3, [r1, #8]
   1433c:	add	r1, r1, #28
   14340:	bne	14328 <__assert_fail@plt+0x2d34>
   14344:	ldr	r2, [sp, #24]
   14348:	ldr	r3, [sp, #12]
   1434c:	add	r4, r4, #28
   14350:	add	r3, r3, r2
   14354:	ldr	r2, [sp, #16]
   14358:	str	r3, [sp, #24]
   1435c:	mov	r8, r3
   14360:	sub	r3, r3, #1
   14364:	strd	sl, [sp, #32]
   14368:	str	r9, [sp, #40]	; 0x28
   1436c:	mov	sl, r6
   14370:	add	r4, r2, r4
   14374:	mov	r9, r7
   14378:	mov	r6, r3
   1437c:	ldr	fp, [r4, #-24]	; 0xffffffe8
   14380:	str	r8, [r4, #-20]	; 0xffffffec
   14384:	cmp	fp, #0
   14388:	ldr	r7, [r4, #-28]	; 0xffffffe4
   1438c:	beq	143e0 <__assert_fail@plt+0x2dec>
   14390:	ldr	r3, [r7, #12]
   14394:	tst	r3, #8
   14398:	bne	143d4 <__assert_fail@plt+0x2de0>
   1439c:	ldr	r5, [r7, #4]
   143a0:	sub	r3, r5, #1
   143a4:	cmp	r3, #254	; 0xfe
   143a8:	bhi	143d4 <__assert_fail@plt+0x2de0>
   143ac:	bl	11450 <__ctype_b_loc@plt>
   143b0:	lsl	r2, r5, #1
   143b4:	ldrb	r3, [r9]
   143b8:	sub	r5, r3, r5
   143bc:	clz	r5, r5
   143c0:	lsr	r5, r5, #5
   143c4:	ldr	r1, [r0]
   143c8:	ldrh	r2, [r1, r2]
   143cc:	ands	r2, r5, r2, lsr #14
   143d0:	bne	1442c <__assert_fail@plt+0x2e38>
   143d4:	subs	fp, fp, #1
   143d8:	add	r7, r7, #24
   143dc:	bne	14390 <__assert_fail@plt+0x2d9c>
   143e0:	subs	sl, sl, #1
   143e4:	add	r4, r4, #28
   143e8:	bne	1437c <__assert_fail@plt+0x2d88>
   143ec:	ldr	r9, [sp, #40]	; 0x28
   143f0:	mov	r6, sl
   143f4:	ldr	r0, [sp, #28]
   143f8:	strb	r6, [r8]
   143fc:	ldr	fp, [sp, #36]	; 0x24
   14400:	ldr	sl, [sp, #32]
   14404:	bl	112c4 <free@plt>
   14408:	ldr	r0, [r9, #8]
   1440c:	bl	112c4 <free@plt>
   14410:	ldr	r3, [sp, #16]
   14414:	str	r3, [r9]
   14418:	ldr	r3, [sp, #20]
   1441c:	str	r3, [r9, #4]
   14420:	ldr	r3, [sp, #12]
   14424:	str	r3, [r9, #8]
   14428:	b	14250 <__assert_fail@plt+0x2c5c>
   1442c:	ldr	r1, [sp, #12]
   14430:	ldr	r2, [sp, #24]
   14434:	cmp	r1, r2
   14438:	bcs	14464 <__assert_fail@plt+0x2e70>
   1443c:	ldrb	r2, [r1]
   14440:	cmp	r2, r3
   14444:	beq	14468 <__assert_fail@plt+0x2e74>
   14448:	mov	r2, r1
   1444c:	b	1445c <__assert_fail@plt+0x2e68>
   14450:	ldrb	r1, [r2, #1]!
   14454:	cmp	r1, r3
   14458:	beq	14468 <__assert_fail@plt+0x2e74>
   1445c:	cmp	r6, r2
   14460:	bne	14450 <__assert_fail@plt+0x2e5c>
   14464:	strb	r3, [r8], #1
   14468:	add	r9, r9, #1
   1446c:	b	143d4 <__assert_fail@plt+0x2de0>
   14470:	ldr	r1, [sp, #4]
   14474:	b	141e8 <__assert_fail@plt+0x2bf4>
   14478:	ldr	r2, [sp, #44]	; 0x2c
   1447c:	b	14218 <__assert_fail@plt+0x2c24>
   14480:	ldr	r3, [pc, #116]	; 144fc <__assert_fail@plt+0x2f08>
   14484:	ldr	r2, [pc, #116]	; 14500 <__assert_fail@plt+0x2f0c>
   14488:	ldr	r1, [pc, #116]	; 14504 <__assert_fail@plt+0x2f10>
   1448c:	ldr	r0, [pc, #116]	; 14508 <__assert_fail@plt+0x2f14>
   14490:	bl	115f4 <__assert_fail@plt>
   14494:	ldr	r3, [pc, #96]	; 144fc <__assert_fail@plt+0x2f08>
   14498:	mov	r2, #452	; 0x1c4
   1449c:	ldr	r1, [pc, #96]	; 14504 <__assert_fail@plt+0x2f10>
   144a0:	ldr	r0, [pc, #100]	; 1450c <__assert_fail@plt+0x2f18>
   144a4:	bl	115f4 <__assert_fail@plt>
   144a8:	ldr	r3, [pc, #76]	; 144fc <__assert_fail@plt+0x2f08>
   144ac:	mov	r2, #468	; 0x1d4
   144b0:	ldr	r1, [pc, #76]	; 14504 <__assert_fail@plt+0x2f10>
   144b4:	ldr	r0, [pc, #84]	; 14510 <__assert_fail@plt+0x2f1c>
   144b8:	bl	115f4 <__assert_fail@plt>
   144bc:	ldr	r3, [pc, #80]	; 14514 <__assert_fail@plt+0x2f20>
   144c0:	ldr	r2, [pc, #80]	; 14518 <__assert_fail@plt+0x2f24>
   144c4:	ldr	r1, [pc, #56]	; 14504 <__assert_fail@plt+0x2f10>
   144c8:	ldr	r0, [pc, #76]	; 1451c <__assert_fail@plt+0x2f28>
   144cc:	bl	115f4 <__assert_fail@plt>
   144d0:	ldr	r3, [pc, #36]	; 144fc <__assert_fail@plt+0x2f08>
   144d4:	ldr	r2, [pc, #68]	; 14520 <__assert_fail@plt+0x2f2c>
   144d8:	ldr	r1, [pc, #36]	; 14504 <__assert_fail@plt+0x2f10>
   144dc:	ldr	r0, [pc, #64]	; 14524 <__assert_fail@plt+0x2f30>
   144e0:	bl	115f4 <__assert_fail@plt>
   144e4:	ldr	r3, [pc, #40]	; 14514 <__assert_fail@plt+0x2f20>
   144e8:	mov	r2, #884	; 0x374
   144ec:	ldr	r1, [pc, #16]	; 14504 <__assert_fail@plt+0x2f10>
   144f0:	ldr	r0, [pc, #48]	; 14528 <__assert_fail@plt+0x2f34>
   144f4:	bl	115f4 <__assert_fail@plt>
   144f8:	stmdbeq	r4!, {r0, r3, r6, r9, ip, pc}
   144fc:	andeq	sp, r1, r0, ror #8
   14500:	ldrdeq	r0, [r0], -r2
   14504:	strdeq	sp, [r1], -r0
   14508:	andeq	sp, r1, ip, lsl r5
   1450c:	andeq	sp, r1, ip, lsl #10
   14510:	andeq	sp, r1, r0, asr #10
   14514:	andeq	sp, r1, ip, ror #8
   14518:	andeq	r0, r0, r2, ror r3
   1451c:	andeq	sp, r1, ip, ror r5
   14520:			; <UNDEFINED> instruction: 0x000001ba
   14524:	andeq	sp, r1, r8, lsl #10
   14528:	muleq	r1, r8, r5
   1452c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14530:	sub	sp, sp, #12
   14534:	ldr	r5, [r0, #4]
   14538:	ldr	r7, [r0]
   1453c:	cmp	r5, #0
   14540:	ldr	r6, [r0, #8]
   14544:	beq	14600 <__assert_fail@plt+0x300c>
   14548:	mov	sl, r3
   1454c:	mov	r4, r7
   14550:	stm	sp, {r1, r2}
   14554:	ldr	fp, [r4, #12]
   14558:	ands	r8, fp, #8
   1455c:	movne	r0, #1
   14560:	movne	r8, #0
   14564:	bne	145a0 <__assert_fail@plt+0x2fac>
   14568:	ldr	r9, [r4, #4]
   1456c:	sub	r1, r9, #1
   14570:	cmp	r1, #254	; 0xfe
   14574:	bhi	1459c <__assert_fail@plt+0x2fa8>
   14578:	bl	11450 <__ctype_b_loc@plt>
   1457c:	lsl	r1, r9, #1
   14580:	ldr	r0, [r0]
   14584:	ldrh	r1, [r0, r1]
   14588:	tst	r1, #16384	; 0x4000
   1458c:	beq	1459c <__assert_fail@plt+0x2fa8>
   14590:	ldrb	r1, [r6]
   14594:	cmp	r1, r9
   14598:	beq	145c0 <__assert_fail@plt+0x2fcc>
   1459c:	mov	r0, #1
   145a0:	subs	r5, r5, #1
   145a4:	moveq	r0, #0
   145a8:	cmp	r0, #0
   145ac:	add	r4, r4, #24
   145b0:	bne	14554 <__assert_fail@plt+0x2f60>
   145b4:	mov	r0, r8
   145b8:	add	sp, sp, #12
   145bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c0:	tst	fp, #4
   145c4:	moveq	r7, r4
   145c8:	tst	fp, #2
   145cc:	movne	r0, #1
   145d0:	bne	145f8 <__assert_fail@plt+0x3004>
   145d4:	mov	r3, sl
   145d8:	ldr	r2, [sp, #4]
   145dc:	mov	r1, r7
   145e0:	mov	r0, r4
   145e4:	ldr	ip, [sp]
   145e8:	blx	ip
   145ec:	mov	r8, r0
   145f0:	clz	r0, r0
   145f4:	lsr	r0, r0, #5
   145f8:	add	r6, r6, #1
   145fc:	b	145a0 <__assert_fail@plt+0x2fac>
   14600:	mov	r8, r5
   14604:	mov	r0, r8
   14608:	add	sp, sp, #12
   1460c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14610:	ldr	r3, [pc, #472]	; 147f0 <__assert_fail@plt+0x31fc>
   14614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14618:	add	fp, sp, #32
   1461c:	sub	sp, sp, #20
   14620:	ldr	r5, [r0, #4]
   14624:	ldr	r3, [r3]
   14628:	cmp	r5, #0
   1462c:	str	r3, [fp, #-40]	; 0xffffffd8
   14630:	beq	14750 <__assert_fail@plt+0x315c>
   14634:	mov	r6, r0
   14638:	ldr	r0, [r0, #8]
   1463c:	mov	r9, r1
   14640:	bl	11468 <strlen@plt>
   14644:	ldr	r7, [pc, #424]	; 147f4 <__assert_fail@plt+0x3200>
   14648:	ldr	r4, [r6]
   1464c:	add	r3, r0, #8
   14650:	bic	r3, r3, #7
   14654:	sub	sp, sp, r3
   14658:	mov	r8, sp
   1465c:	str	r8, [fp, #-44]	; 0xffffffd4
   14660:	ldr	r2, [r4, #20]
   14664:	mov	r0, r4
   14668:	sub	r3, fp, #44	; 0x2c
   1466c:	mov	r1, r7
   14670:	ldr	r2, [r2, #24]
   14674:	bl	1452c <__assert_fail@plt+0x2f38>
   14678:	subs	r5, r5, #1
   1467c:	add	r4, r4, #28
   14680:	bne	14660 <__assert_fail@plt+0x306c>
   14684:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14688:	cmp	r3, r8
   1468c:	bhi	147c0 <__assert_fail@plt+0x31cc>
   14690:	ldrd	r4, [r6]
   14694:	cmp	r5, #0
   14698:	beq	14750 <__assert_fail@plt+0x315c>
   1469c:	ldr	r7, [pc, #340]	; 147f8 <__assert_fail@plt+0x3204>
   146a0:	ldr	r2, [r4, #20]
   146a4:	mov	r0, r4
   146a8:	mov	r3, r9
   146ac:	mov	r1, r7
   146b0:	ldr	r2, [r2, #24]
   146b4:	bl	1452c <__assert_fail@plt+0x2f38>
   146b8:	subs	r5, r5, #1
   146bc:	add	r4, r4, #28
   146c0:	bne	146a0 <__assert_fail@plt+0x30ac>
   146c4:	ldm	r6, {r7, r8}
   146c8:	cmp	r8, #0
   146cc:	beq	14750 <__assert_fail@plt+0x315c>
   146d0:	add	r7, r7, #28
   146d4:	str	r9, [fp, #-48]	; 0xffffffd0
   146d8:	ldr	r3, [r7, #-8]
   146dc:	ldr	r5, [r7, #-24]	; 0xffffffe8
   146e0:	ldr	r6, [r7, #-28]	; 0xffffffe4
   146e4:	cmp	r5, #0
   146e8:	ldr	sl, [r3, #24]
   146ec:	beq	14744 <__assert_fail@plt+0x3150>
   146f0:	mov	r4, r6
   146f4:	ldr	r2, [r4]
   146f8:	cmp	r2, #0
   146fc:	beq	14738 <__assert_fail@plt+0x3144>
   14700:	ldr	r3, [r4, #12]
   14704:	tst	r3, #4
   14708:	moveq	r6, r4
   1470c:	tst	r3, #2
   14710:	bne	14738 <__assert_fail@plt+0x3144>
   14714:	ldr	r1, [r4, #8]
   14718:	ldr	r9, [r6, #12]
   1471c:	cmp	r1, #0
   14720:	orr	r9, r3, r9
   14724:	and	r3, r3, #8
   14728:	beq	1476c <__assert_fail@plt+0x3178>
   1472c:	and	r2, r9, #16
   14730:	orrs	r3, r3, r2
   14734:	beq	14794 <__assert_fail@plt+0x31a0>
   14738:	subs	r5, r5, #1
   1473c:	add	r4, r4, #24
   14740:	bne	146f4 <__assert_fail@plt+0x3100>
   14744:	subs	r8, r8, #1
   14748:	add	r7, r7, #28
   1474c:	bne	146d8 <__assert_fail@plt+0x30e4>
   14750:	ldr	r3, [pc, #152]	; 147f0 <__assert_fail@plt+0x31fc>
   14754:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14758:	ldr	r3, [r3]
   1475c:	cmp	r2, r3
   14760:	bne	147ec <__assert_fail@plt+0x31f8>
   14764:	sub	sp, fp, #32
   14768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1476c:	and	r1, r9, #16
   14770:	orrs	r3, r1, r3
   14774:	ldr	r1, [r6, #8]
   14778:	bne	14738 <__assert_fail@plt+0x3144>
   1477c:	cmp	r1, #0
   14780:	bne	14794 <__assert_fail@plt+0x31a0>
   14784:	ldr	r1, [pc, #112]	; 147fc <__assert_fail@plt+0x3208>
   14788:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1478c:	bl	1b380 <argp_parse@@Base+0x3c6c>
   14790:	b	14738 <__assert_fail@plt+0x3144>
   14794:	mov	r2, #5
   14798:	mov	r0, sl
   1479c:	bl	11330 <dcgettext@plt>
   147a0:	tst	r9, #1
   147a4:	ldr	r2, [r4]
   147a8:	ldrne	r1, [pc, #80]	; 14800 <__assert_fail@plt+0x320c>
   147ac:	ldreq	r1, [pc, #80]	; 14804 <__assert_fail@plt+0x3210>
   147b0:	mov	r3, r0
   147b4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   147b8:	bl	1b380 <argp_parse@@Base+0x3c6c>
   147bc:	b	14738 <__assert_fail@plt+0x3144>
   147c0:	add	r1, r3, #1
   147c4:	str	r1, [fp, #-44]	; 0xffffffd4
   147c8:	mov	r2, r8
   147cc:	strb	r5, [r3]
   147d0:	ldr	r1, [pc, #48]	; 14808 <__assert_fail@plt+0x3214>
   147d4:	mov	r0, r9
   147d8:	bl	1b380 <argp_parse@@Base+0x3c6c>
   147dc:	ldrd	r4, [r6]
   147e0:	cmp	r5, #0
   147e4:	bne	1469c <__assert_fail@plt+0x30a8>
   147e8:	b	14750 <__assert_fail@plt+0x315c>
   147ec:	bl	1133c <__stack_chk_fail@plt>
   147f0:	andeq	lr, r2, r8, lsl #30
   147f4:	andeq	r3, r1, r4, ror #24
   147f8:	andeq	r4, r1, r4, lsr sp
   147fc:	strdeq	sp, [r1], -r0
   14800:	ldrdeq	sp, [r1], -r4
   14804:	andeq	sp, r1, r4, ror #11
   14808:	andeq	sp, r1, ip, asr #11
   1480c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14810:	mov	r4, r1
   14814:	ldr	r6, [pc, #980]	; 14bf0 <__assert_fail@plt+0x35fc>
   14818:	ldr	r2, [r1, #16]
   1481c:	ldr	r3, [r0, #16]
   14820:	ldr	r1, [r6]
   14824:	sub	sp, sp, #16
   14828:	cmp	r3, r2
   1482c:	str	r1, [sp, #12]
   14830:	mov	r5, r0
   14834:	ldr	ip, [r0, #12]
   14838:	ldr	r1, [r4, #12]
   1483c:	beq	14958 <__assert_fail@plt+0x3364>
   14840:	cmp	r3, #0
   14844:	beq	148f0 <__assert_fail@plt+0x32fc>
   14848:	cmp	r2, #0
   1484c:	beq	14928 <__assert_fail@plt+0x3334>
   14850:	ldr	r1, [r3, #20]
   14854:	ldr	r0, [r2, #20]
   14858:	cmp	r1, r0
   1485c:	ble	14870 <__assert_fail@plt+0x327c>
   14860:	ldr	r3, [r3, #12]
   14864:	ldr	r1, [r3, #20]
   14868:	cmp	r0, r1
   1486c:	blt	14860 <__assert_fail@plt+0x326c>
   14870:	cmp	r0, r1
   14874:	ble	148a0 <__assert_fail@plt+0x32ac>
   14878:	ldr	r2, [r2, #12]
   1487c:	ldr	r0, [r2, #20]
   14880:	cmp	r0, r1
   14884:	bgt	14878 <__assert_fail@plt+0x3284>
   14888:	ldr	r0, [r3, #12]
   1488c:	ldr	r1, [r2, #12]
   14890:	cmp	r0, r1
   14894:	beq	148b0 <__assert_fail@plt+0x32bc>
   14898:	mov	r2, r1
   1489c:	mov	r3, r0
   148a0:	ldr	r0, [r3, #12]
   148a4:	ldr	r1, [r2, #12]
   148a8:	cmp	r0, r1
   148ac:	bne	14898 <__assert_fail@plt+0x32a4>
   148b0:	ldr	r1, [r3, #8]
   148b4:	ldr	r0, [r2, #8]
   148b8:	cmp	r1, r0
   148bc:	beq	14978 <__assert_fail@plt+0x3384>
   148c0:	mvn	r3, r0
   148c4:	lsr	r3, r3, #31
   148c8:	cmp	r3, r1, lsr #31
   148cc:	beq	14950 <__assert_fail@plt+0x335c>
   148d0:	sub	r0, r1, r0
   148d4:	ldr	r2, [sp, #12]
   148d8:	ldr	r3, [r6]
   148dc:	cmp	r2, r3
   148e0:	bne	14bec <__assert_fail@plt+0x35f8>
   148e4:	add	sp, sp, #16
   148e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148ec:	mov	r2, r3
   148f0:	ldr	r3, [r2, #12]
   148f4:	cmp	r3, #0
   148f8:	bne	148ec <__assert_fail@plt+0x32f8>
   148fc:	ldr	r0, [r2, #8]
   14900:	cmp	ip, r0
   14904:	mvneq	r0, #0
   14908:	beq	148d4 <__assert_fail@plt+0x32e0>
   1490c:	mvn	r3, r0
   14910:	lsr	r3, r3, #31
   14914:	cmp	r3, ip, lsr #31
   14918:	subne	r0, ip, r0
   1491c:	subeq	r0, r0, ip
   14920:	b	148d4 <__assert_fail@plt+0x32e0>
   14924:	mov	r3, r2
   14928:	ldr	r2, [r3, #12]
   1492c:	cmp	r2, #0
   14930:	bne	14924 <__assert_fail@plt+0x3330>
   14934:	ldr	r0, [r3, #8]
   14938:	cmp	r1, r0
   1493c:	beq	14ab4 <__assert_fail@plt+0x34c0>
   14940:	mvn	r3, r1
   14944:	lsr	r3, r3, #31
   14948:	cmp	r3, r0, lsr #31
   1494c:	beq	148d0 <__assert_fail@plt+0x32dc>
   14950:	sub	r0, r0, r1
   14954:	b	148d4 <__assert_fail@plt+0x32e0>
   14958:	cmp	ip, r1
   1495c:	beq	149a0 <__assert_fail@plt+0x33ac>
   14960:	mvn	r3, r1
   14964:	lsr	r3, r3, #31
   14968:	cmp	r3, ip, lsr #31
   1496c:	subne	r0, ip, r1
   14970:	subeq	r0, r1, ip
   14974:	b	148d4 <__assert_fail@plt+0x32e0>
   14978:	ldr	r0, [r2, #4]
   1497c:	ldr	r1, [r3, #4]
   14980:	subs	r0, r0, r1
   14984:	bne	148d4 <__assert_fail@plt+0x32e0>
   14988:	ldr	r2, [r5, #24]
   1498c:	ldr	r3, [r4, #24]
   14990:	cmp	r2, r3
   14994:	movcs	r0, #1
   14998:	mvncc	r0, #0
   1499c:	b	148d4 <__assert_fail@plt+0x32e0>
   149a0:	ldr	r2, [r0, #20]
   149a4:	mov	r3, #0
   149a8:	ldr	r1, [pc, #580]	; 14bf4 <__assert_fail@plt+0x3600>
   149ac:	ldr	r2, [r2, #24]
   149b0:	bl	1452c <__assert_fail@plt+0x2f38>
   149b4:	ldr	r2, [r4, #20]
   149b8:	mov	r3, #0
   149bc:	ldr	r1, [pc, #560]	; 14bf4 <__assert_fail@plt+0x3600>
   149c0:	ldr	r2, [r2, #24]
   149c4:	mov	r8, r0
   149c8:	mov	r0, r4
   149cc:	bl	1452c <__assert_fail@plt+0x2f38>
   149d0:	ldr	r2, [r5]
   149d4:	ldr	r3, [r4]
   149d8:	ldr	ip, [r5, #4]
   149dc:	ldr	r9, [r3, #12]
   149e0:	cmp	ip, #0
   149e4:	and	r9, r9, #8
   149e8:	mov	sl, r0
   149ec:	ldr	r0, [r2, #12]
   149f0:	and	r7, r0, #8
   149f4:	beq	14a20 <__assert_fail@plt+0x342c>
   149f8:	add	r2, r2, #24
   149fc:	ldr	r1, [r2, #-24]	; 0xffffffe8
   14a00:	cmp	r1, #0
   14a04:	beq	14a14 <__assert_fail@plt+0x3420>
   14a08:	ldr	r0, [r2, #-12]
   14a0c:	tst	r0, #2
   14a10:	beq	14a24 <__assert_fail@plt+0x3430>
   14a14:	subs	ip, ip, #1
   14a18:	add	r2, r2, #24
   14a1c:	bne	149fc <__assert_fail@plt+0x3408>
   14a20:	mov	r1, ip
   14a24:	ldr	r2, [r4, #4]
   14a28:	str	r1, [sp, #4]
   14a2c:	cmp	r2, #0
   14a30:	beq	14ad8 <__assert_fail@plt+0x34e4>
   14a34:	add	r3, r3, #24
   14a38:	ldr	r0, [r3, #-24]	; 0xffffffe8
   14a3c:	cmp	r0, #0
   14a40:	beq	14a50 <__assert_fail@plt+0x345c>
   14a44:	ldr	ip, [r3, #-12]
   14a48:	tst	ip, #2
   14a4c:	beq	14a60 <__assert_fail@plt+0x346c>
   14a50:	subs	r2, r2, #1
   14a54:	add	r3, r3, #24
   14a58:	bne	14a38 <__assert_fail@plt+0x3444>
   14a5c:	mov	r0, r2
   14a60:	cmp	r7, #0
   14a64:	str	r0, [sp, #8]
   14a68:	beq	14abc <__assert_fail@plt+0x34c8>
   14a6c:	cmp	r1, #0
   14a70:	beq	14b98 <__assert_fail@plt+0x35a4>
   14a74:	add	r0, sp, #4
   14a78:	bl	13d54 <__assert_fail@plt+0x2760>
   14a7c:	cmp	r9, #0
   14a80:	mov	r7, r0
   14a84:	beq	14aa4 <__assert_fail@plt+0x34b0>
   14a88:	ldr	r3, [sp, #8]
   14a8c:	cmp	r3, #0
   14a90:	moveq	r9, #1
   14a94:	beq	14aa4 <__assert_fail@plt+0x34b0>
   14a98:	add	r0, sp, #8
   14a9c:	bl	13d54 <__assert_fail@plt+0x2760>
   14aa0:	mov	r9, r0
   14aa4:	cmp	r9, r7
   14aa8:	beq	14aec <__assert_fail@plt+0x34f8>
   14aac:	sub	r0, r7, r9
   14ab0:	b	148d4 <__assert_fail@plt+0x32e0>
   14ab4:	mov	r0, #1
   14ab8:	b	148d4 <__assert_fail@plt+0x32e0>
   14abc:	cmp	r9, #0
   14ac0:	beq	14aec <__assert_fail@plt+0x34f8>
   14ac4:	cmp	r0, #0
   14ac8:	bne	14a98 <__assert_fail@plt+0x34a4>
   14acc:	mov	r7, #0
   14ad0:	mov	r9, #1
   14ad4:	b	14aac <__assert_fail@plt+0x34b8>
   14ad8:	cmp	r7, #0
   14adc:	str	r2, [sp, #8]
   14ae0:	bne	14be4 <__assert_fail@plt+0x35f0>
   14ae4:	cmp	r9, #0
   14ae8:	bne	14acc <__assert_fail@plt+0x34d8>
   14aec:	orr	r3, r8, sl
   14af0:	tst	r3, #255	; 0xff
   14af4:	uxtb	r8, r8
   14af8:	mov	r3, r8
   14afc:	bne	14b3c <__assert_fail@plt+0x3548>
   14b00:	ldr	r0, [sp, #4]
   14b04:	cmp	r0, #0
   14b08:	beq	14bd4 <__assert_fail@plt+0x35e0>
   14b0c:	ldr	r1, [sp, #8]
   14b10:	cmp	r1, #0
   14b14:	beq	14bb8 <__assert_fail@plt+0x35c4>
   14b18:	bl	1136c <strcasecmp@plt>
   14b1c:	cmp	r0, #0
   14b20:	bne	148d4 <__assert_fail@plt+0x32e0>
   14b24:	ldr	r2, [r5, #24]
   14b28:	ldr	r3, [r4, #24]
   14b2c:	cmp	r2, r3
   14b30:	mvncc	r0, #0
   14b34:	movcs	r0, #1
   14b38:	b	148d4 <__assert_fail@plt+0x32e0>
   14b3c:	cmp	r8, #0
   14b40:	bne	14bb0 <__assert_fail@plt+0x35bc>
   14b44:	ldr	r0, [sp, #4]
   14b48:	cmp	r0, #0
   14b4c:	beq	14bdc <__assert_fail@plt+0x35e8>
   14b50:	ldrb	r8, [r0]
   14b54:	lsl	r7, r8, #2
   14b58:	ands	sl, sl, #255	; 0xff
   14b5c:	bne	14b70 <__assert_fail@plt+0x357c>
   14b60:	ldr	sl, [sp, #8]
   14b64:	cmp	sl, #0
   14b68:	beq	14bcc <__assert_fail@plt+0x35d8>
   14b6c:	ldrb	sl, [sl]
   14b70:	lsl	r9, sl, #2
   14b74:	bl	1142c <__ctype_tolower_loc@plt>
   14b78:	ldr	r3, [r0]
   14b7c:	ldr	r1, [r3, r7]
   14b80:	ldr	r0, [r3, r9]
   14b84:	subs	r0, r1, r0
   14b88:	bne	148d4 <__assert_fail@plt+0x32e0>
   14b8c:	subs	r0, sl, r8
   14b90:	beq	14b24 <__assert_fail@plt+0x3530>
   14b94:	b	148d4 <__assert_fail@plt+0x32e0>
   14b98:	cmp	r9, #0
   14b9c:	beq	14ab4 <__assert_fail@plt+0x34c0>
   14ba0:	cmp	r0, #0
   14ba4:	movne	r7, #1
   14ba8:	bne	14a98 <__assert_fail@plt+0x34a4>
   14bac:	b	14aec <__assert_fail@plt+0x34f8>
   14bb0:	lsl	r7, r3, #2
   14bb4:	b	14b58 <__assert_fail@plt+0x3564>
   14bb8:	cmp	r8, #0
   14bbc:	beq	14b50 <__assert_fail@plt+0x355c>
   14bc0:	ands	sl, sl, #255	; 0xff
   14bc4:	lsl	r7, r8, #2
   14bc8:	bne	14b70 <__assert_fail@plt+0x357c>
   14bcc:	mov	r9, sl
   14bd0:	b	14b74 <__assert_fail@plt+0x3580>
   14bd4:	cmp	r8, #0
   14bd8:	bne	14bb0 <__assert_fail@plt+0x35bc>
   14bdc:	mov	r7, r8
   14be0:	b	14b58 <__assert_fail@plt+0x3564>
   14be4:	mov	r0, r2
   14be8:	b	14a6c <__assert_fail@plt+0x3478>
   14bec:	bl	1133c <__stack_chk_fail@plt>
   14bf0:	andeq	lr, r2, r8, lsl #30
   14bf4:	andeq	r3, r1, r0, lsl sp
   14bf8:	push	{r4, r5, r6, lr}
   14bfc:	mov	r5, r1
   14c00:	ldr	r3, [r0, #28]
   14c04:	ldr	r1, [r0, #24]
   14c08:	ldr	r2, [r0, #16]
   14c0c:	sub	r3, r3, r1
   14c10:	cmp	r3, r2
   14c14:	mov	r4, r0
   14c18:	bhi	14c70 <__assert_fail@plt+0x367c>
   14c1c:	ldr	r1, [r4, #20]
   14c20:	mov	r6, #32
   14c24:	cmp	r1, #0
   14c28:	subge	r5, r5, r1
   14c2c:	cmp	r5, #0
   14c30:	mov	r1, #1
   14c34:	mov	r0, r4
   14c38:	sub	r5, r5, #1
   14c3c:	pople	{r4, r5, r6, pc}
   14c40:	ldr	r3, [r4, #28]
   14c44:	ldr	r2, [r4, #32]
   14c48:	cmp	r3, r2
   14c4c:	bcc	14c60 <__assert_fail@plt+0x366c>
   14c50:	bl	1b364 <argp_parse@@Base+0x3c50>
   14c54:	cmp	r0, #0
   14c58:	beq	14c2c <__assert_fail@plt+0x3638>
   14c5c:	ldr	r3, [r4, #28]
   14c60:	add	r2, r3, #1
   14c64:	str	r2, [r4, #28]
   14c68:	strb	r6, [r3]
   14c6c:	b	14c2c <__assert_fail@plt+0x3638>
   14c70:	bl	1ad30 <argp_parse@@Base+0x361c>
   14c74:	b	14c1c <__assert_fail@plt+0x3628>
   14c78:	ldrd	r2, [r0, #24]
   14c7c:	push	{r4, r5, r6, lr}
   14c80:	mov	r5, r1
   14c84:	ldr	r1, [r0, #16]
   14c88:	sub	r2, r3, r2
   14c8c:	cmp	r2, r1
   14c90:	mov	r4, r0
   14c94:	movls	r2, r3
   14c98:	bhi	14d24 <__assert_fail@plt+0x3730>
   14c9c:	ldr	r1, [r4, #20]
   14ca0:	ldr	r0, [r4, #8]
   14ca4:	cmp	r1, #0
   14ca8:	addge	r5, r5, r1
   14cac:	cmp	r5, r0
   14cb0:	ldr	r1, [r4, #32]
   14cb4:	bcc	14cf0 <__assert_fail@plt+0x36fc>
   14cb8:	cmp	r3, r1
   14cbc:	bcs	14cd4 <__assert_fail@plt+0x36e0>
   14cc0:	add	r1, r3, #1
   14cc4:	mov	r2, #10
   14cc8:	str	r1, [r4, #28]
   14ccc:	strb	r2, [r3]
   14cd0:	pop	{r4, r5, r6, pc}
   14cd4:	mov	r1, #1
   14cd8:	mov	r0, r4
   14cdc:	bl	1b364 <argp_parse@@Base+0x3c50>
   14ce0:	cmp	r0, #0
   14ce4:	popeq	{r4, r5, r6, pc}
   14ce8:	ldr	r3, [r4, #28]
   14cec:	b	14cc0 <__assert_fail@plt+0x36cc>
   14cf0:	cmp	r3, r1
   14cf4:	bcc	14d10 <__assert_fail@plt+0x371c>
   14cf8:	mov	r1, #1
   14cfc:	mov	r0, r4
   14d00:	bl	1b364 <argp_parse@@Base+0x3c50>
   14d04:	cmp	r0, #0
   14d08:	popeq	{r4, r5, r6, pc}
   14d0c:	ldr	r2, [r4, #28]
   14d10:	add	r1, r2, #1
   14d14:	mov	r3, #32
   14d18:	str	r1, [r4, #28]
   14d1c:	strb	r3, [r2]
   14d20:	pop	{r4, r5, r6, pc}
   14d24:	bl	1ad30 <argp_parse@@Base+0x361c>
   14d28:	ldr	r3, [r4, #28]
   14d2c:	mov	r2, r3
   14d30:	b	14c9c <__assert_fail@plt+0x36a8>
   14d34:	ldr	ip, [r0, #8]
   14d38:	cmp	ip, #0
   14d3c:	beq	14da0 <__assert_fail@plt+0x37ac>
   14d40:	push	{r4, r5, r6, r7, r8, lr}
   14d44:	ldr	r1, [r1, #12]
   14d48:	ldr	r5, [r0, #12]
   14d4c:	orr	r5, r5, r1
   14d50:	tst	r5, #16
   14d54:	beq	14d60 <__assert_fail@plt+0x376c>
   14d58:	mov	r0, #0
   14d5c:	pop	{r4, r5, r6, r7, r8, pc}
   14d60:	mov	r4, r0
   14d64:	mov	r1, ip
   14d68:	mov	r0, r2
   14d6c:	mov	r2, #5
   14d70:	mov	r6, r3
   14d74:	bl	11330 <dcgettext@plt>
   14d78:	tst	r5, #1
   14d7c:	mov	r7, r0
   14d80:	beq	14db4 <__assert_fail@plt+0x37c0>
   14d84:	mov	r3, r0
   14d88:	ldr	r2, [r4, #4]
   14d8c:	mov	r0, r6
   14d90:	ldr	r1, [pc, #72]	; 14de0 <__assert_fail@plt+0x37ec>
   14d94:	bl	1b380 <argp_parse@@Base+0x3c6c>
   14d98:	mov	r0, #0
   14d9c:	pop	{r4, r5, r6, r7, r8, pc}
   14da0:	ldr	ip, [r1, #8]
   14da4:	cmp	ip, #0
   14da8:	bne	14d40 <__assert_fail@plt+0x374c>
   14dac:	mov	r0, #0
   14db0:	bx	lr
   14db4:	bl	11468 <strlen@plt>
   14db8:	add	r1, r0, #6
   14dbc:	mov	r0, r6
   14dc0:	bl	14c78 <__assert_fail@plt+0x3684>
   14dc4:	mov	r3, r7
   14dc8:	ldr	r2, [r4, #4]
   14dcc:	mov	r0, r6
   14dd0:	ldr	r1, [pc, #12]	; 14de4 <__assert_fail@plt+0x37f0>
   14dd4:	bl	1b380 <argp_parse@@Base+0x3c6c>
   14dd8:	mov	r0, #0
   14ddc:	pop	{r4, r5, r6, r7, r8, pc}
   14de0:	strdeq	sp, [r1], -r8
   14de4:	andeq	sp, r1, r4, lsl #12
   14de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dec:	mov	r8, r2
   14df0:	sub	sp, sp, #28
   14df4:	mov	r5, r0
   14df8:	mov	r4, r3
   14dfc:	ldr	r3, [r8]
   14e00:	mov	sl, r1
   14e04:	str	r3, [sp, #16]
   14e08:	ldr	r3, [r5, #16]
   14e0c:	ldr	r0, [r0, #24]
   14e10:	ldr	r1, [r5, #8]
   14e14:	mov	r2, #5
   14e18:	str	r3, [sp, #8]
   14e1c:	ldr	r7, [sp, #64]	; 0x40
   14e20:	bl	11330 <dcgettext@plt>
   14e24:	ldr	r3, [r5, #20]
   14e28:	cmp	r3, #0
   14e2c:	str	r0, [sp, #12]
   14e30:	beq	14fe8 <__assert_fail@plt+0x39f4>
   14e34:	mov	r2, r5
   14e38:	mov	r3, sl
   14e3c:	ldr	r1, [pc, #464]	; 15014 <__assert_fail@plt+0x3a20>
   14e40:	bl	13eac <__assert_fail@plt+0x28b8>
   14e44:	mov	r9, r0
   14e48:	cmp	r9, #0
   14e4c:	beq	14fb4 <__assert_fail@plt+0x39c0>
   14e50:	mov	r1, #10
   14e54:	mov	r0, r9
   14e58:	bl	112b8 <strchrnul@plt>
   14e5c:	ldrb	fp, [r0]
   14e60:	mov	r5, r0
   14e64:	cmp	fp, #0
   14e68:	streq	fp, [sp, #20]
   14e6c:	moveq	r6, r9
   14e70:	beq	14ec0 <__assert_fail@plt+0x38cc>
   14e74:	ldr	r3, [sp, #16]
   14e78:	ldrb	r3, [r3]
   14e7c:	cmp	r3, #0
   14e80:	beq	1500c <__assert_fail@plt+0x3a18>
   14e84:	mov	fp, #0
   14e88:	mov	r5, r3
   14e8c:	add	r6, r0, #1
   14e90:	add	fp, fp, #1
   14e94:	mov	r0, r6
   14e98:	mov	r1, #10
   14e9c:	bl	112b8 <strchrnul@plt>
   14ea0:	cmp	fp, r5
   14ea4:	bne	14e8c <__assert_fail@plt+0x3898>
   14ea8:	mov	r5, r0
   14eac:	ldr	r3, [r8]
   14eb0:	mov	r2, #1
   14eb4:	add	r3, r3, r2
   14eb8:	str	r2, [sp, #20]
   14ebc:	str	r3, [r8]
   14ec0:	add	r1, r5, #1
   14ec4:	sub	r1, r1, r6
   14ec8:	mov	r0, r7
   14ecc:	bl	14c78 <__assert_fail@plt+0x3684>
   14ed0:	ldr	r0, [r7, #28]
   14ed4:	sub	fp, r5, r6
   14ed8:	ldr	r1, [r7, #32]
   14edc:	add	r2, r0, fp
   14ee0:	cmp	r1, r2
   14ee4:	bcs	14f00 <__assert_fail@plt+0x390c>
   14ee8:	mov	r1, fp
   14eec:	mov	r0, r7
   14ef0:	bl	1b364 <argp_parse@@Base+0x3c50>
   14ef4:	cmp	r0, #0
   14ef8:	beq	14f18 <__assert_fail@plt+0x3924>
   14efc:	ldr	r0, [r7, #28]
   14f00:	mov	r2, fp
   14f04:	mov	r1, r6
   14f08:	bl	112e8 <memcpy@plt>
   14f0c:	ldr	r2, [r7, #28]
   14f10:	add	r3, r2, fp
   14f14:	str	r3, [r7, #28]
   14f18:	ldr	r3, [sp, #12]
   14f1c:	cmp	r3, r9
   14f20:	beq	14f2c <__assert_fail@plt+0x3938>
   14f24:	mov	r0, r9
   14f28:	bl	112c4 <free@plt>
   14f2c:	ldr	r3, [sp, #8]
   14f30:	cmp	r3, #0
   14f34:	beq	14f78 <__assert_fail@plt+0x3984>
   14f38:	ldr	r2, [r3]
   14f3c:	cmp	r2, #0
   14f40:	beq	14f78 <__assert_fail@plt+0x3984>
   14f44:	ldr	r6, [sp, #8]
   14f48:	mov	r3, r4
   14f4c:	mov	r0, r2
   14f50:	str	r7, [sp]
   14f54:	mov	r2, r8
   14f58:	mov	r1, sl
   14f5c:	bl	14de8 <__assert_fail@plt+0x37f4>
   14f60:	ldr	r2, [r6, #16]!
   14f64:	cmp	r2, #0
   14f68:	clz	r3, r0
   14f6c:	lsr	r3, r3, #5
   14f70:	bne	14f4c <__assert_fail@plt+0x3958>
   14f74:	mov	r4, r3
   14f78:	ldr	fp, [sp, #20]
   14f7c:	cmp	r4, #0
   14f80:	moveq	fp, #0
   14f84:	cmp	fp, #0
   14f88:	beq	14fd8 <__assert_fail@plt+0x39e4>
   14f8c:	ldrb	r4, [r5]
   14f90:	ldr	r3, [sp, #16]
   14f94:	cmp	r4, #0
   14f98:	ldrb	r0, [r3]
   14f9c:	beq	14ff0 <__assert_fail@plt+0x39fc>
   14fa0:	add	r0, r0, #1
   14fa4:	strb	r0, [r3]
   14fa8:	mov	r0, #1
   14fac:	add	sp, sp, #28
   14fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fb4:	ldr	r3, [sp, #8]
   14fb8:	cmp	r3, #0
   14fbc:	beq	14fd8 <__assert_fail@plt+0x39e4>
   14fc0:	ldr	r3, [sp, #8]
   14fc4:	ldr	r2, [r3]
   14fc8:	cmp	r2, #0
   14fcc:	movne	r5, r9
   14fd0:	strne	r5, [sp, #20]
   14fd4:	bne	14f44 <__assert_fail@plt+0x3950>
   14fd8:	clz	r0, r4
   14fdc:	lsr	r0, r0, #5
   14fe0:	add	sp, sp, #28
   14fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe8:	ldr	r9, [sp, #12]
   14fec:	b	14e48 <__assert_fail@plt+0x3854>
   14ff0:	cmp	r0, #0
   14ff4:	beq	14fac <__assert_fail@plt+0x39b8>
   14ff8:	ldr	r3, [sp, #16]
   14ffc:	mov	r0, r4
   15000:	strb	r4, [r3]
   15004:	add	sp, sp, #28
   15008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1500c:	mov	r6, r9
   15010:	b	14eac <__assert_fail@plt+0x38b8>
   15014:	andeq	r0, r0, #6
   15018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1501c:	mov	r4, r1
   15020:	sub	sp, sp, #12
   15024:	mov	r1, r0
   15028:	mov	r6, r2
   1502c:	ldr	r0, [r4, #24]
   15030:	mov	r2, #5
   15034:	bl	11330 <dcgettext@plt>
   15038:	ldr	r3, [r4, #20]
   1503c:	cmp	r3, #0
   15040:	mov	r8, r0
   15044:	moveq	r4, r0
   15048:	beq	15060 <__assert_fail@plt+0x3a6c>
   1504c:	mov	r2, r4
   15050:	ldr	r3, [r6, #16]
   15054:	ldr	r1, [pc, #496]	; 1524c <__assert_fail@plt+0x3c58>
   15058:	bl	13eac <__assert_fail@plt+0x28b8>
   1505c:	mov	r4, r0
   15060:	cmp	r4, #0
   15064:	beq	15080 <__assert_fail@plt+0x3a8c>
   15068:	ldrb	r2, [r4]
   1506c:	ldr	r3, [r6, #8]
   15070:	cmp	r2, #0
   15074:	bne	15098 <__assert_fail@plt+0x3aa4>
   15078:	mov	r2, #1
   1507c:	str	r2, [r3, #4]
   15080:	cmp	r8, r4
   15084:	beq	15174 <__assert_fail@plt+0x3b80>
   15088:	mov	r0, r4
   1508c:	add	sp, sp, #12
   15090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15094:	b	112c4 <free@plt>
   15098:	ldr	r3, [r3]
   1509c:	ldr	r5, [r6, #4]
   150a0:	cmp	r3, #0
   150a4:	beq	150e4 <__assert_fail@plt+0x3af0>
   150a8:	ldr	r3, [r5, #28]
   150ac:	ldr	r2, [r5, #32]
   150b0:	cmp	r3, r2
   150b4:	bcc	150d0 <__assert_fail@plt+0x3adc>
   150b8:	mov	r1, #1
   150bc:	mov	r0, r5
   150c0:	bl	1b364 <argp_parse@@Base+0x3c50>
   150c4:	cmp	r0, #0
   150c8:	ldrne	r3, [r5, #28]
   150cc:	beq	150e0 <__assert_fail@plt+0x3aec>
   150d0:	add	r1, r3, #1
   150d4:	mov	r2, #10
   150d8:	str	r1, [r5, #28]
   150dc:	strb	r2, [r3]
   150e0:	ldr	r5, [r6, #4]
   150e4:	ldr	sl, [pc, #356]	; 15250 <__assert_fail@plt+0x3c5c>
   150e8:	mov	r0, r5
   150ec:	ldr	r1, [sl, #24]
   150f0:	bl	14bf8 <__assert_fail@plt+0x3604>
   150f4:	ldr	r5, [r6, #4]
   150f8:	ldr	r9, [sl, #24]
   150fc:	ldr	r7, [r5, #28]
   15100:	ldr	r3, [r5, #24]
   15104:	ldr	r2, [r5, #16]
   15108:	sub	r3, r7, r3
   1510c:	cmp	r3, r2
   15110:	strls	r9, [r5, #4]
   15114:	movls	fp, r5
   15118:	bhi	151fc <__assert_fail@plt+0x3c08>
   1511c:	str	r9, [fp, #12]
   15120:	mov	r0, r4
   15124:	bl	11468 <strlen@plt>
   15128:	subs	r9, r0, #0
   1512c:	bne	151ac <__assert_fail@plt+0x3bb8>
   15130:	ldr	r3, [r5, #24]
   15134:	ldr	r2, [r5, #16]
   15138:	sub	r3, r7, r3
   1513c:	cmp	r3, r2
   15140:	movls	r9, r5
   15144:	bhi	15198 <__assert_fail@plt+0x3ba4>
   15148:	ldr	r2, [r9, #32]
   1514c:	mov	r3, #0
   15150:	cmp	r2, r7
   15154:	str	r3, [r5, #4]
   15158:	bls	1517c <__assert_fail@plt+0x3b88>
   1515c:	add	r2, r7, #1
   15160:	mov	r3, #10
   15164:	str	r2, [r9, #28]
   15168:	strb	r3, [r7]
   1516c:	ldr	r3, [r6, #8]
   15170:	b	15078 <__assert_fail@plt+0x3a84>
   15174:	add	sp, sp, #12
   15178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1517c:	mov	r1, #1
   15180:	mov	r0, r9
   15184:	bl	1b364 <argp_parse@@Base+0x3c50>
   15188:	cmp	r0, #0
   1518c:	ldrne	r7, [r9, #28]
   15190:	bne	1515c <__assert_fail@plt+0x3b68>
   15194:	b	1516c <__assert_fail@plt+0x3b78>
   15198:	mov	r0, r5
   1519c:	bl	1ad30 <argp_parse@@Base+0x361c>
   151a0:	ldr	r9, [r6, #4]
   151a4:	ldr	r7, [r9, #28]
   151a8:	b	15148 <__assert_fail@plt+0x3b54>
   151ac:	ldr	r2, [r5, #32]
   151b0:	add	r3, r7, r9
   151b4:	cmp	r2, r3
   151b8:	bcs	151d4 <__assert_fail@plt+0x3be0>
   151bc:	mov	r1, r9
   151c0:	mov	r0, r5
   151c4:	bl	1b364 <argp_parse@@Base+0x3c50>
   151c8:	cmp	r0, #0
   151cc:	beq	151f0 <__assert_fail@plt+0x3bfc>
   151d0:	ldr	r7, [r5, #28]
   151d4:	mov	r2, r9
   151d8:	mov	r0, r7
   151dc:	mov	r1, r4
   151e0:	bl	112e8 <memcpy@plt>
   151e4:	ldr	r3, [r5, #28]
   151e8:	add	r9, r3, r9
   151ec:	str	r9, [r5, #28]
   151f0:	ldr	r5, [r6, #4]
   151f4:	ldr	r7, [r5, #28]
   151f8:	b	15130 <__assert_fail@plt+0x3b3c>
   151fc:	mov	r0, r5
   15200:	str	r9, [sp, #4]
   15204:	bl	1ad30 <argp_parse@@Base+0x361c>
   15208:	ldr	fp, [r6, #4]
   1520c:	ldr	r3, [sp, #4]
   15210:	ldr	r9, [sl, #24]
   15214:	ldr	r7, [fp, #28]
   15218:	ldr	r2, [fp, #24]
   1521c:	ldr	r1, [fp, #16]
   15220:	sub	r2, r7, r2
   15224:	cmp	r2, r1
   15228:	str	r3, [r5, #4]
   1522c:	bls	15244 <__assert_fail@plt+0x3c50>
   15230:	mov	r0, fp
   15234:	bl	1ad30 <argp_parse@@Base+0x361c>
   15238:	ldr	r5, [r6, #4]
   1523c:	ldr	r7, [r5, #28]
   15240:	b	1511c <__assert_fail@plt+0x3b28>
   15244:	mov	r5, fp
   15248:	b	1511c <__assert_fail@plt+0x3b28>
   1524c:	andeq	r0, r0, #3
   15250:	andeq	pc, r2, r4, ror #4
   15254:	ldr	r3, [r1, #12]
   15258:	push	{r4, r5, r6, r7, r8, lr}
   1525c:	cmp	r3, #0
   15260:	mov	r4, r1
   15264:	mov	r7, r0
   15268:	ldr	r5, [r1, #4]
   1526c:	beq	15388 <__assert_fail@plt+0x3d94>
   15270:	ldr	r3, [r1, #8]
   15274:	ldr	r2, [r1]
   15278:	ldr	r8, [r3]
   1527c:	ldr	r3, [r3, #4]
   15280:	ldr	r6, [r2, #16]
   15284:	cmp	r3, #0
   15288:	cmpne	r8, #0
   1528c:	bne	15330 <__assert_fail@plt+0x3d3c>
   15290:	cmp	r6, #0
   15294:	beq	15318 <__assert_fail@plt+0x3d24>
   15298:	ldr	r0, [r6]
   1529c:	cmp	r0, #0
   152a0:	beq	15318 <__assert_fail@plt+0x3d24>
   152a4:	ldrb	r3, [r0]
   152a8:	cmp	r3, #0
   152ac:	beq	15318 <__assert_fail@plt+0x3d24>
   152b0:	cmp	r8, #0
   152b4:	beq	152e4 <__assert_fail@plt+0x3cf0>
   152b8:	ldr	r3, [r8, #16]
   152bc:	cmp	r3, r6
   152c0:	beq	15318 <__assert_fail@plt+0x3d24>
   152c4:	cmp	r3, #0
   152c8:	beq	152e4 <__assert_fail@plt+0x3cf0>
   152cc:	ldr	r3, [r3, #12]
   152d0:	cmp	r3, #0
   152d4:	cmpne	r6, r3
   152d8:	bne	152cc <__assert_fail@plt+0x3cd8>
   152dc:	cmp	r6, r3
   152e0:	beq	15318 <__assert_fail@plt+0x3d24>
   152e4:	ldr	r1, [r6, #16]
   152e8:	mov	r2, r4
   152ec:	ldr	r8, [r5, #12]
   152f0:	bl	15018 <__assert_fail@plt+0x3a24>
   152f4:	ldr	r6, [r4, #4]
   152f8:	ldr	r3, [r6, #28]
   152fc:	ldr	r1, [r6, #24]
   15300:	ldr	r2, [r6, #16]
   15304:	sub	r3, r3, r1
   15308:	cmp	r3, r2
   1530c:	movls	r5, r6
   15310:	bhi	153e0 <__assert_fail@plt+0x3dec>
   15314:	str	r8, [r6, #12]
   15318:	mov	r3, #0
   1531c:	str	r3, [r4, #12]
   15320:	mov	r1, r7
   15324:	mov	r0, r5
   15328:	pop	{r4, r5, r6, r7, r8, lr}
   1532c:	b	14bf8 <__assert_fail@plt+0x3604>
   15330:	ldr	r2, [r2, #12]
   15334:	ldr	r3, [r8, #12]
   15338:	cmp	r2, r3
   1533c:	beq	15290 <__assert_fail@plt+0x3c9c>
   15340:	ldr	r3, [r5, #28]
   15344:	ldr	r2, [r5, #32]
   15348:	cmp	r3, r2
   1534c:	bcc	15368 <__assert_fail@plt+0x3d74>
   15350:	mov	r1, #1
   15354:	mov	r0, r5
   15358:	bl	1b364 <argp_parse@@Base+0x3c50>
   1535c:	cmp	r0, #0
   15360:	ldrne	r3, [r5, #28]
   15364:	beq	15378 <__assert_fail@plt+0x3d84>
   15368:	add	r1, r3, #1
   1536c:	mov	r2, #10
   15370:	str	r1, [r5, #28]
   15374:	strb	r2, [r3]
   15378:	cmp	r6, #0
   1537c:	ldr	r5, [r4, #4]
   15380:	bne	15298 <__assert_fail@plt+0x3ca4>
   15384:	b	15318 <__assert_fail@plt+0x3d24>
   15388:	ldr	r3, [r5, #28]
   1538c:	ldr	r1, [r5, #32]
   15390:	add	r2, r3, #2
   15394:	cmp	r1, r2
   15398:	bcs	153b4 <__assert_fail@plt+0x3dc0>
   1539c:	mov	r1, #2
   153a0:	mov	r0, r5
   153a4:	bl	1b364 <argp_parse@@Base+0x3c50>
   153a8:	cmp	r0, #0
   153ac:	beq	153cc <__assert_fail@plt+0x3dd8>
   153b0:	ldr	r3, [r5, #28]
   153b4:	ldr	r2, [pc, #52]	; 153f0 <__assert_fail@plt+0x3dfc>
   153b8:	ldrh	r2, [r2]
   153bc:	strh	r2, [r3]
   153c0:	ldr	r3, [r5, #28]
   153c4:	add	r3, r3, #2
   153c8:	str	r3, [r5, #28]
   153cc:	ldr	r5, [r4, #4]
   153d0:	mov	r1, r7
   153d4:	mov	r0, r5
   153d8:	pop	{r4, r5, r6, r7, r8, lr}
   153dc:	b	14bf8 <__assert_fail@plt+0x3604>
   153e0:	mov	r0, r6
   153e4:	bl	1ad30 <argp_parse@@Base+0x361c>
   153e8:	ldr	r5, [r4, #4]
   153ec:	b	15314 <__assert_fail@plt+0x3d20>
   153f0:	andeq	sp, r1, r0, lsl r6
   153f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153f8:	mov	r9, r3
   153fc:	ldr	r8, [r0, #12]
   15400:	sub	sp, sp, #28
   15404:	ldr	r3, [r0, #16]
   15408:	cmp	r8, #0
   1540c:	mov	r7, r0
   15410:	mov	sl, r1
   15414:	mov	r6, r2
   15418:	str	r3, [sp, #12]
   1541c:	ldr	r5, [sp, #68]	; 0x44
   15420:	beq	154dc <__assert_fail@plt+0x3ee8>
   15424:	mov	r1, #11
   15428:	mov	r0, r8
   1542c:	bl	11474 <strchr@plt>
   15430:	subs	fp, r0, #0
   15434:	beq	15490 <__assert_fail@plt+0x3e9c>
   15438:	cmp	r6, #0
   1543c:	beq	156c0 <__assert_fail@plt+0x40cc>
   15440:	ldrb	r3, [fp, #1]
   15444:	cmp	r3, #0
   15448:	beq	157a8 <__assert_fail@plt+0x41b4>
   1544c:	add	r8, fp, #1
   15450:	mov	r4, #0
   15454:	cmp	r8, #0
   15458:	beq	154dc <__assert_fail@plt+0x3ee8>
   1545c:	mov	r2, #5
   15460:	mov	r1, r8
   15464:	ldr	r0, [r7, #24]
   15468:	bl	11330 <dcgettext@plt>
   1546c:	ldr	fp, [r7, #20]
   15470:	adds	r3, r4, #0
   15474:	movne	r3, #1
   15478:	cmp	fp, #0
   1547c:	str	r3, [sp, #16]
   15480:	str	r0, [sp, #8]
   15484:	bne	154f0 <__assert_fail@plt+0x3efc>
   15488:	ldr	r4, [sp, #8]
   1548c:	b	15524 <__assert_fail@plt+0x3f30>
   15490:	cmp	r6, #0
   15494:	bne	157a8 <__assert_fail@plt+0x41b4>
   15498:	mov	r2, #5
   1549c:	mov	r1, r8
   154a0:	ldr	r0, [r7, #24]
   154a4:	bl	11330 <dcgettext@plt>
   154a8:	ldr	r3, [r7, #20]
   154ac:	cmp	r3, #0
   154b0:	mov	r4, r0
   154b4:	beq	15920 <__assert_fail@plt+0x432c>
   154b8:	mov	r1, sl
   154bc:	mov	r0, r7
   154c0:	str	r4, [sp, #8]
   154c4:	bl	18534 <argp_parse@@Base+0xe20>
   154c8:	ldr	r3, [r7, #20]
   154cc:	str	r6, [sp, #16]
   154d0:	mov	fp, r0
   154d4:	ldr	r0, [pc, #1112]	; 15934 <__assert_fail@plt+0x4340>
   154d8:	b	15514 <__assert_fail@plt+0x3f20>
   154dc:	ldr	r3, [r7, #20]
   154e0:	cmp	r3, #0
   154e4:	strne	r8, [sp, #8]
   154e8:	strne	r8, [sp, #16]
   154ec:	beq	156b4 <__assert_fail@plt+0x40c0>
   154f0:	mov	r1, sl
   154f4:	mov	r0, r7
   154f8:	bl	18534 <argp_parse@@Base+0xe20>
   154fc:	ldr	r2, [pc, #1072]	; 15934 <__assert_fail@plt+0x4340>
   15500:	cmp	r6, #0
   15504:	ldr	r3, [r7, #20]
   15508:	mov	fp, r0
   1550c:	ldr	r0, [pc, #1060]	; 15938 <__assert_fail@plt+0x4344>
   15510:	moveq	r0, r2
   15514:	mov	r2, fp
   15518:	ldr	r1, [sp, #8]
   1551c:	blx	r3
   15520:	mov	r4, r0
   15524:	cmp	r4, #0
   15528:	beq	15594 <__assert_fail@plt+0x3fa0>
   1552c:	cmp	r9, #0
   15530:	ldr	r2, [r5, #28]
   15534:	bne	15784 <__assert_fail@plt+0x4190>
   15538:	mov	r0, r4
   1553c:	str	r2, [sp, #20]
   15540:	bl	11468 <strlen@plt>
   15544:	ldr	r2, [sp, #20]
   15548:	subs	r3, r0, #0
   1554c:	bne	15708 <__assert_fail@plt+0x4114>
   15550:	ldr	r1, [r5, #24]
   15554:	ldr	r3, [r5, #16]
   15558:	sub	r2, r2, r1
   1555c:	cmp	r2, r3
   15560:	bhi	156fc <__assert_fail@plt+0x4108>
   15564:	ldr	r3, [r5, #20]
   15568:	ldr	r2, [r5, #4]
   1556c:	bic	r3, r3, r3, asr #31
   15570:	cmp	r2, r3
   15574:	bcc	15760 <__assert_fail@plt+0x416c>
   15578:	ldr	r3, [sp, #8]
   1557c:	cmp	r3, r4
   15580:	moveq	r4, #1
   15584:	beq	15594 <__assert_fail@plt+0x3fa0>
   15588:	mov	r0, r4
   1558c:	bl	112c4 <free@plt>
   15590:	mov	r4, #1
   15594:	ldr	r3, [sp, #16]
   15598:	cmp	r3, #0
   1559c:	beq	155a8 <__assert_fail@plt+0x3fb4>
   155a0:	mov	r0, r8
   155a4:	bl	112c4 <free@plt>
   155a8:	cmp	r6, #0
   155ac:	beq	15624 <__assert_fail@plt+0x4030>
   155b0:	ldr	r3, [r7, #20]
   155b4:	cmp	r3, #0
   155b8:	beq	15624 <__assert_fail@plt+0x4030>
   155bc:	mov	r2, fp
   155c0:	mov	r1, #0
   155c4:	ldr	r0, [pc, #880]	; 1593c <__assert_fail@plt+0x4348>
   155c8:	blx	r3
   155cc:	subs	r7, r0, #0
   155d0:	beq	15624 <__assert_fail@plt+0x4030>
   155d4:	orrs	r3, r4, r9
   155d8:	bne	15840 <__assert_fail@plt+0x424c>
   155dc:	mov	r0, r7
   155e0:	bl	11468 <strlen@plt>
   155e4:	subs	r4, r0, #0
   155e8:	bne	15898 <__assert_fail@plt+0x42a4>
   155ec:	mov	r0, r7
   155f0:	bl	112c4 <free@plt>
   155f4:	ldr	r3, [r5, #28]
   155f8:	ldr	r1, [r5, #24]
   155fc:	ldr	r2, [r5, #16]
   15600:	sub	r3, r3, r1
   15604:	cmp	r3, r2
   15608:	bhi	1588c <__assert_fail@plt+0x4298>
   1560c:	ldr	r3, [r5, #20]
   15610:	ldr	r2, [r5, #4]
   15614:	bic	r3, r3, r3, asr #31
   15618:	cmp	r2, r3
   1561c:	bcc	15864 <__assert_fail@plt+0x4270>
   15620:	mov	r4, r6
   15624:	ldr	r8, [sp, #12]
   15628:	cmp	r8, #0
   1562c:	beq	156a8 <__assert_fail@plt+0x40b4>
   15630:	ldr	r3, [r8]
   15634:	cmp	r3, #0
   15638:	beq	156a8 <__assert_fail@plt+0x40b4>
   1563c:	ldr	r2, [sp, #64]	; 0x40
   15640:	eor	r7, r2, #1
   15644:	eor	r2, r4, #1
   15648:	orr	r2, r2, r7
   1564c:	tst	r2, #1
   15650:	and	r7, r7, #1
   15654:	beq	158e0 <__assert_fail@plt+0x42ec>
   15658:	ldr	fp, [sp, #64]	; 0x40
   1565c:	orrs	r2, r9, r4
   15660:	mov	r0, r3
   15664:	str	r5, [sp, #4]
   15668:	movne	r3, #1
   1566c:	moveq	r3, #0
   15670:	str	fp, [sp]
   15674:	mov	r2, r6
   15678:	mov	r1, sl
   1567c:	bl	153f4 <__assert_fail@plt+0x3e00>
   15680:	ldr	r3, [r8, #16]
   15684:	add	r8, r8, #16
   15688:	cmp	r3, #0
   1568c:	orr	r4, r4, r0
   15690:	beq	156a8 <__assert_fail@plt+0x40b4>
   15694:	cmp	r4, #0
   15698:	movne	r2, r7
   1569c:	moveq	r2, #1
   156a0:	cmp	r2, #0
   156a4:	bne	1565c <__assert_fail@plt+0x4068>
   156a8:	mov	r0, r4
   156ac:	add	sp, sp, #28
   156b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156b4:	mov	fp, #0
   156b8:	mov	r4, fp
   156bc:	b	155a8 <__assert_fail@plt+0x3fb4>
   156c0:	subs	r4, fp, r8
   156c4:	bne	1582c <__assert_fail@plt+0x4238>
   156c8:	ldr	r3, [r7, #20]
   156cc:	cmp	r3, #0
   156d0:	beq	15620 <__assert_fail@plt+0x402c>
   156d4:	mov	r1, sl
   156d8:	mov	r0, r7
   156dc:	bl	18534 <argp_parse@@Base+0xe20>
   156e0:	mov	r8, r6
   156e4:	ldr	r3, [r7, #20]
   156e8:	str	r6, [sp, #16]
   156ec:	str	r6, [sp, #8]
   156f0:	mov	fp, r0
   156f4:	ldr	r0, [pc, #568]	; 15934 <__assert_fail@plt+0x4340>
   156f8:	b	15514 <__assert_fail@plt+0x3f20>
   156fc:	mov	r0, r5
   15700:	bl	1ad30 <argp_parse@@Base+0x361c>
   15704:	b	15564 <__assert_fail@plt+0x3f70>
   15708:	ldr	r0, [r5, #32]
   1570c:	add	r1, r2, r3
   15710:	cmp	r0, r1
   15714:	bcs	15738 <__assert_fail@plt+0x4144>
   15718:	mov	r1, r3
   1571c:	mov	r0, r5
   15720:	str	r3, [sp, #20]
   15724:	bl	1b364 <argp_parse@@Base+0x3c50>
   15728:	ldr	r2, [r5, #28]
   1572c:	ldr	r3, [sp, #20]
   15730:	cmp	r0, #0
   15734:	beq	15550 <__assert_fail@plt+0x3f5c>
   15738:	mov	r0, r2
   1573c:	mov	r1, r4
   15740:	mov	r2, r3
   15744:	str	r3, [sp, #20]
   15748:	bl	112e8 <memcpy@plt>
   1574c:	ldr	r2, [r5, #28]
   15750:	ldr	r3, [sp, #20]
   15754:	add	r2, r2, r3
   15758:	str	r2, [r5, #28]
   1575c:	b	15550 <__assert_fail@plt+0x3f5c>
   15760:	ldr	r3, [r5, #28]
   15764:	ldr	r2, [r5, #32]
   15768:	cmp	r3, r2
   1576c:	bcs	15800 <__assert_fail@plt+0x420c>
   15770:	add	r1, r3, #1
   15774:	mov	r2, #10
   15778:	str	r1, [r5, #28]
   1577c:	strb	r2, [r3]
   15780:	b	15578 <__assert_fail@plt+0x3f84>
   15784:	ldr	r3, [r5, #32]
   15788:	cmp	r3, r2
   1578c:	bls	157e4 <__assert_fail@plt+0x41f0>
   15790:	add	r1, r2, #1
   15794:	mov	r3, #10
   15798:	str	r1, [r5, #28]
   1579c:	strb	r3, [r2]
   157a0:	ldr	r2, [r5, #28]
   157a4:	b	15538 <__assert_fail@plt+0x3f44>
   157a8:	ldr	r3, [r7, #20]
   157ac:	cmp	r3, #0
   157b0:	beq	156b4 <__assert_fail@plt+0x40c0>
   157b4:	mov	r3, #0
   157b8:	mov	r1, sl
   157bc:	mov	r0, r7
   157c0:	mov	r4, r3
   157c4:	str	r3, [sp, #16]
   157c8:	bl	18534 <argp_parse@@Base+0xe20>
   157cc:	mov	r8, r4
   157d0:	str	r4, [sp, #8]
   157d4:	ldr	r3, [r7, #20]
   157d8:	mov	fp, r0
   157dc:	ldr	r0, [pc, #340]	; 15938 <__assert_fail@plt+0x4344>
   157e0:	b	15514 <__assert_fail@plt+0x3f20>
   157e4:	mov	r1, #1
   157e8:	mov	r0, r5
   157ec:	bl	1b364 <argp_parse@@Base+0x3c50>
   157f0:	ldr	r2, [r5, #28]
   157f4:	cmp	r0, #0
   157f8:	bne	15790 <__assert_fail@plt+0x419c>
   157fc:	b	15538 <__assert_fail@plt+0x3f44>
   15800:	mov	r1, #1
   15804:	mov	r0, r5
   15808:	bl	1b364 <argp_parse@@Base+0x3c50>
   1580c:	cmp	r0, #0
   15810:	beq	15578 <__assert_fail@plt+0x3f84>
   15814:	ldr	r3, [r5, #28]
   15818:	mov	r2, #10
   1581c:	add	r1, r3, #1
   15820:	str	r1, [r5, #28]
   15824:	strb	r2, [r3]
   15828:	b	15578 <__assert_fail@plt+0x3f84>
   1582c:	mov	r0, r8
   15830:	mov	r1, r4
   15834:	bl	112d0 <strndup@plt>
   15838:	mov	r8, r0
   1583c:	b	15454 <__assert_fail@plt+0x3e60>
   15840:	ldr	r3, [r5, #28]
   15844:	ldr	r2, [r5, #32]
   15848:	cmp	r3, r2
   1584c:	bcs	15904 <__assert_fail@plt+0x4310>
   15850:	add	r1, r3, #1
   15854:	mov	r2, #10
   15858:	str	r1, [r5, #28]
   1585c:	strb	r2, [r3]
   15860:	b	155dc <__assert_fail@plt+0x3fe8>
   15864:	ldr	r3, [r5, #28]
   15868:	ldr	r2, [r5, #32]
   1586c:	cmp	r3, r2
   15870:	bcs	158e8 <__assert_fail@plt+0x42f4>
   15874:	add	r2, r3, #1
   15878:	str	r2, [r5, #28]
   1587c:	mov	r2, #10
   15880:	mov	r4, r6
   15884:	strb	r2, [r3]
   15888:	b	15624 <__assert_fail@plt+0x4030>
   1588c:	mov	r0, r5
   15890:	bl	1ad30 <argp_parse@@Base+0x361c>
   15894:	b	1560c <__assert_fail@plt+0x4018>
   15898:	ldr	r0, [r5, #28]
   1589c:	ldr	r2, [r5, #32]
   158a0:	add	r3, r0, r4
   158a4:	cmp	r2, r3
   158a8:	bcs	158c4 <__assert_fail@plt+0x42d0>
   158ac:	mov	r1, r4
   158b0:	mov	r0, r5
   158b4:	bl	1b364 <argp_parse@@Base+0x3c50>
   158b8:	cmp	r0, #0
   158bc:	beq	155ec <__assert_fail@plt+0x3ff8>
   158c0:	ldr	r0, [r5, #28]
   158c4:	mov	r2, r4
   158c8:	mov	r1, r7
   158cc:	bl	112e8 <memcpy@plt>
   158d0:	ldr	r3, [r5, #28]
   158d4:	add	r4, r3, r4
   158d8:	str	r4, [r5, #28]
   158dc:	b	155ec <__assert_fail@plt+0x3ff8>
   158e0:	mov	r4, #1
   158e4:	b	156a8 <__assert_fail@plt+0x40b4>
   158e8:	mov	r1, #1
   158ec:	mov	r0, r5
   158f0:	bl	1b364 <argp_parse@@Base+0x3c50>
   158f4:	cmp	r0, #0
   158f8:	beq	15620 <__assert_fail@plt+0x402c>
   158fc:	ldr	r3, [r5, #28]
   15900:	b	15874 <__assert_fail@plt+0x4280>
   15904:	mov	r1, #1
   15908:	mov	r0, r5
   1590c:	bl	1b364 <argp_parse@@Base+0x3c50>
   15910:	cmp	r0, #0
   15914:	beq	155dc <__assert_fail@plt+0x3fe8>
   15918:	ldr	r3, [r5, #28]
   1591c:	b	15850 <__assert_fail@plt+0x425c>
   15920:	cmp	r0, #0
   15924:	strne	r0, [sp, #8]
   15928:	strne	r6, [sp, #16]
   1592c:	bne	1552c <__assert_fail@plt+0x3f38>
   15930:	b	15620 <__assert_fail@plt+0x402c>
   15934:	andeq	r0, r0, #1
   15938:	andeq	r0, r0, #2
   1593c:	andeq	r0, r0, #4

00015940 <argp_failure@@Base>:
   15940:	push	{r3}		; (str r3, [sp, #-4]!)
   15944:	push	{r4, r5, r6, r7, r8, r9, lr}
   15948:	sub	sp, sp, #208	; 0xd0
   1594c:	ldr	r5, [pc, #540]	; 15b70 <argp_failure@@Base+0x230>
   15950:	subs	r6, r0, #0
   15954:	mov	r9, r1
   15958:	ldr	r3, [r5]
   1595c:	mov	r7, r2
   15960:	str	r3, [sp, #204]	; 0xcc
   15964:	ldr	r8, [sp, #236]	; 0xec
   15968:	beq	15ac8 <argp_failure@@Base+0x188>
   1596c:	ldr	r3, [r6, #16]
   15970:	tst	r3, #2
   15974:	bne	15aa8 <argp_failure@@Base+0x168>
   15978:	ldr	r4, [r6, #44]	; 0x2c
   1597c:	cmp	r4, #0
   15980:	beq	15aa8 <argp_failure@@Base+0x168>
   15984:	mov	r0, r4
   15988:	bl	11588 <flockfile@plt>
   1598c:	ldr	r0, [r6, #40]	; 0x28
   15990:	mov	r1, r4
   15994:	bl	11264 <fputs_unlocked@plt>
   15998:	cmp	r8, #0
   1599c:	beq	159fc <argp_failure@@Base+0xbc>
   159a0:	ldr	r3, [r4, #20]
   159a4:	ldr	r1, [r4, #24]
   159a8:	add	r2, sp, #240	; 0xf0
   159ac:	cmp	r3, r1
   159b0:	str	r2, [sp]
   159b4:	addcc	r1, r3, #1
   159b8:	movcc	r2, #58	; 0x3a
   159bc:	strcc	r1, [r4, #20]
   159c0:	strbcc	r2, [r3]
   159c4:	bcs	15b3c <argp_failure@@Base+0x1fc>
   159c8:	ldr	r3, [r4, #20]
   159cc:	ldr	r2, [r4, #24]
   159d0:	cmp	r3, r2
   159d4:	addcc	r1, r3, #1
   159d8:	movcc	r2, #32
   159dc:	strcc	r1, [r4, #20]
   159e0:	strbcc	r2, [r3]
   159e4:	bcs	15b2c <argp_failure@@Base+0x1ec>
   159e8:	mov	r2, r8
   159ec:	ldr	r3, [sp]
   159f0:	mov	r1, #1
   159f4:	mov	r0, r4
   159f8:	bl	11420 <__vfprintf_chk@plt>
   159fc:	cmp	r7, #0
   15a00:	ldr	r3, [r4, #20]
   15a04:	ldr	r2, [r4, #24]
   15a08:	beq	15a6c <argp_failure@@Base+0x12c>
   15a0c:	cmp	r3, r2
   15a10:	addcc	r1, r3, #1
   15a14:	movcc	r2, #58	; 0x3a
   15a18:	strcc	r1, [r4, #20]
   15a1c:	strbcc	r2, [r3]
   15a20:	bcs	15b5c <argp_failure@@Base+0x21c>
   15a24:	ldr	r3, [r4, #20]
   15a28:	ldr	r2, [r4, #24]
   15a2c:	cmp	r3, r2
   15a30:	addcc	r1, r3, #1
   15a34:	movcc	r2, #32
   15a38:	strcc	r1, [r4, #20]
   15a3c:	strbcc	r2, [r3]
   15a40:	bcs	15b4c <argp_failure@@Base+0x20c>
   15a44:	mov	r2, #200	; 0xc8
   15a48:	add	r1, sp, #4
   15a4c:	mov	r0, r7
   15a50:	bl	114a4 <strerror_r@plt>
   15a54:	cmp	r0, #0
   15a58:	beq	15b04 <argp_failure@@Base+0x1c4>
   15a5c:	mov	r1, r4
   15a60:	bl	115b8 <fputs@plt>
   15a64:	ldr	r3, [r4, #20]
   15a68:	ldr	r2, [r4, #24]
   15a6c:	cmp	r3, r2
   15a70:	addcc	r1, r3, #1
   15a74:	movcc	r2, #10
   15a78:	strcc	r1, [r4, #20]
   15a7c:	strbcc	r2, [r3]
   15a80:	bcs	15af4 <argp_failure@@Base+0x1b4>
   15a84:	mov	r0, r4
   15a88:	bl	11378 <funlockfile@plt>
   15a8c:	cmp	r9, #0
   15a90:	beq	15aa8 <argp_failure@@Base+0x168>
   15a94:	cmp	r6, #0
   15a98:	beq	15aec <argp_failure@@Base+0x1ac>
   15a9c:	ldr	r3, [r6, #16]
   15aa0:	tst	r3, #32
   15aa4:	beq	15aec <argp_failure@@Base+0x1ac>
   15aa8:	ldr	r2, [sp, #204]	; 0xcc
   15aac:	ldr	r3, [r5]
   15ab0:	cmp	r2, r3
   15ab4:	bne	15b6c <argp_failure@@Base+0x22c>
   15ab8:	add	sp, sp, #208	; 0xd0
   15abc:	pop	{r4, r5, r6, r7, r8, r9, lr}
   15ac0:	add	sp, sp, #4
   15ac4:	bx	lr
   15ac8:	ldr	r3, [pc, #164]	; 15b74 <argp_failure@@Base+0x234>
   15acc:	ldr	r4, [r3]
   15ad0:	cmp	r4, #0
   15ad4:	beq	15aa8 <argp_failure@@Base+0x168>
   15ad8:	mov	r0, r4
   15adc:	bl	11588 <flockfile@plt>
   15ae0:	ldr	r3, [pc, #144]	; 15b78 <argp_failure@@Base+0x238>
   15ae4:	ldr	r0, [r3]
   15ae8:	b	15990 <argp_failure@@Base+0x50>
   15aec:	mov	r0, r9
   15af0:	bl	1145c <exit@plt>
   15af4:	mov	r1, #10
   15af8:	mov	r0, r4
   15afc:	bl	11528 <__overflow@plt>
   15b00:	b	15a84 <argp_failure@@Base+0x144>
   15b04:	mov	r0, r7
   15b08:	bl	11414 <strerror@plt>
   15b0c:	cmp	r0, #0
   15b10:	bne	15a5c <argp_failure@@Base+0x11c>
   15b14:	ldr	r3, [r6]
   15b18:	mov	r2, #5
   15b1c:	ldr	r1, [pc, #88]	; 15b7c <argp_failure@@Base+0x23c>
   15b20:	ldr	r0, [r3, #24]
   15b24:	bl	11330 <dcgettext@plt>
   15b28:	b	15a5c <argp_failure@@Base+0x11c>
   15b2c:	mov	r1, #32
   15b30:	mov	r0, r4
   15b34:	bl	11528 <__overflow@plt>
   15b38:	b	159e8 <argp_failure@@Base+0xa8>
   15b3c:	mov	r1, #58	; 0x3a
   15b40:	mov	r0, r4
   15b44:	bl	11528 <__overflow@plt>
   15b48:	b	159c8 <argp_failure@@Base+0x88>
   15b4c:	mov	r1, #32
   15b50:	mov	r0, r4
   15b54:	bl	11528 <__overflow@plt>
   15b58:	b	15a44 <argp_failure@@Base+0x104>
   15b5c:	mov	r1, #58	; 0x3a
   15b60:	mov	r0, r4
   15b64:	bl	11528 <__overflow@plt>
   15b68:	b	15a24 <argp_failure@@Base+0xe4>
   15b6c:	bl	1133c <__stack_chk_fail@plt>
   15b70:	andeq	lr, r2, r8, lsl #30
   15b74:	andeq	pc, r2, r8, ror #5
   15b78:	andeq	pc, r2, r0, ror #5
   15b7c:	andeq	sp, r1, r4, lsl r6
   15b80:	subs	ip, r2, #0
   15b84:	ldr	r2, [pc, #4044]	; 16b58 <argp_failure@@Base+0x1218>
   15b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b8c:	add	fp, sp, #32
   15b90:	sub	sp, sp, #124	; 0x7c
   15b94:	ldr	r2, [r2]
   15b98:	str	ip, [fp, #-128]	; 0xffffff80
   15b9c:	str	r0, [fp, #-132]	; 0xffffff7c
   15ba0:	str	r1, [fp, #-100]	; 0xffffff9c
   15ba4:	str	r3, [fp, #-96]	; 0xffffffa0
   15ba8:	str	r2, [fp, #-40]	; 0xffffffd8
   15bac:	ldr	sl, [fp, #4]
   15bb0:	beq	15fb4 <argp_failure@@Base+0x674>
   15bb4:	ldr	r3, [pc, #4000]	; 16b5c <argp_failure@@Base+0x121c>
   15bb8:	mov	r0, ip
   15bbc:	mov	r4, r3
   15bc0:	str	r3, [fp, #-140]	; 0xffffff74
   15bc4:	bl	11588 <flockfile@plt>
   15bc8:	ldr	r3, [r4, #36]	; 0x24
   15bcc:	cmp	r3, #0
   15bd0:	beq	15fd0 <argp_failure@@Base+0x690>
   15bd4:	ldr	r2, [fp, #-140]	; 0xffffff74
   15bd8:	mov	r3, #0
   15bdc:	mov	r1, r3
   15be0:	ldr	r2, [r2, #32]
   15be4:	ldr	r0, [fp, #-128]	; 0xffffff80
   15be8:	bl	1acb4 <argp_parse@@Base+0x35a0>
   15bec:	subs	r9, r0, #0
   15bf0:	beq	16b4c <argp_failure@@Base+0x120c>
   15bf4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15bf8:	ands	r3, r3, #11
   15bfc:	streq	r3, [fp, #-104]	; 0xffffff98
   15c00:	bne	16304 <argp_failure@@Base+0x9c4>
   15c04:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15c08:	ands	r4, r3, #3
   15c0c:	bne	16198 <argp_failure@@Base+0x858>
   15c10:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15c14:	tst	r3, #16
   15c18:	bne	16164 <argp_failure@@Base+0x824>
   15c1c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15c20:	tst	r3, #4
   15c24:	and	r5, r3, #8
   15c28:	bne	160d0 <argp_failure@@Base+0x790>
   15c2c:	cmp	r5, #0
   15c30:	beq	15f3c <argp_failure@@Base+0x5fc>
   15c34:	ldr	r3, [fp, #-104]	; 0xffffff98
   15c38:	ldr	r3, [r3, #4]
   15c3c:	cmp	r3, #0
   15c40:	str	r3, [fp, #-108]	; 0xffffff94
   15c44:	beq	15f3c <argp_failure@@Base+0x5fc>
   15c48:	cmp	r4, #0
   15c4c:	bne	16110 <argp_failure@@Base+0x7d0>
   15c50:	ldr	r3, [fp, #-104]	; 0xffffff98
   15c54:	ldr	sl, [r3]
   15c58:	str	r4, [fp, #-92]	; 0xffffffa4
   15c5c:	str	r4, [fp, #-88]	; 0xffffffa8
   15c60:	str	r4, [fp, #-84]	; 0xffffffac
   15c64:	ldr	r7, [fp, #-140]	; 0xffffff74
   15c68:	ldr	r2, [r9, #28]
   15c6c:	ldr	r3, [r9, #24]
   15c70:	ldr	r0, [r9, #16]
   15c74:	sub	r2, r2, r3
   15c78:	cmp	r2, r0
   15c7c:	ldr	r4, [sl]
   15c80:	ldr	r8, [sl, #8]
   15c84:	bhi	16898 <argp_failure@@Base+0xf58>
   15c88:	ldr	r1, [r4, #12]
   15c8c:	ldr	ip, [r9, #4]
   15c90:	ands	r1, r1, #8
   15c94:	mov	r3, #0
   15c98:	str	r1, [fp, #-124]	; 0xffffff84
   15c9c:	mov	r1, #1
   15ca0:	str	r3, [r9, #4]
   15ca4:	str	ip, [fp, #-120]	; 0xffffff88
   15ca8:	ldr	ip, [r9, #12]
   15cac:	str	r1, [fp, #-68]	; 0xffffffbc
   15cb0:	sub	r1, fp, #92	; 0x5c
   15cb4:	str	r1, [fp, #-72]	; 0xffffffb8
   15cb8:	ldr	r1, [fp, #-100]	; 0xffffff9c
   15cbc:	str	ip, [fp, #-116]	; 0xffffff8c
   15cc0:	str	sl, [fp, #-80]	; 0xffffffb0
   15cc4:	str	r9, [fp, #-76]	; 0xffffffb4
   15cc8:	str	r1, [fp, #-64]	; 0xffffffc0
   15ccc:	bne	164dc <argp_failure@@Base+0xb9c>
   15cd0:	ldr	r1, [sl, #4]
   15cd4:	cmp	r1, r3
   15cd8:	beq	15d04 <argp_failure@@Base+0x3c4>
   15cdc:	add	r3, r4, #24
   15ce0:	ldr	ip, [r3, #-24]	; 0xffffffe8
   15ce4:	cmp	ip, #0
   15ce8:	beq	15cf8 <argp_failure@@Base+0x3b8>
   15cec:	ldr	ip, [r3, #-12]
   15cf0:	tst	ip, #2
   15cf4:	beq	164d8 <argp_failure@@Base+0xb98>
   15cf8:	subs	r1, r1, #1
   15cfc:	add	r3, r3, #24
   15d00:	bne	15ce0 <argp_failure@@Base+0x3a0>
   15d04:	cmp	r2, r0
   15d08:	ldr	r5, [r7, #8]
   15d0c:	bhi	164ec <argp_failure@@Base+0xbac>
   15d10:	str	r5, [r9, #12]
   15d14:	ldr	r6, [sl, #4]
   15d18:	cmp	r6, #0
   15d1c:	movne	r5, r4
   15d20:	strne	sl, [fp, #-136]	; 0xffffff78
   15d24:	strne	r4, [fp, #-112]	; 0xffffff90
   15d28:	beq	15d80 <argp_failure@@Base+0x440>
   15d2c:	ldr	sl, [r5, #12]
   15d30:	tst	sl, #8
   15d34:	bne	15d6c <argp_failure@@Base+0x42c>
   15d38:	ldr	r4, [r5, #4]
   15d3c:	sub	r2, r4, #1
   15d40:	cmp	r2, #254	; 0xfe
   15d44:	bhi	15d6c <argp_failure@@Base+0x42c>
   15d48:	bl	11450 <__ctype_b_loc@plt>
   15d4c:	lsl	r2, r4, #1
   15d50:	ldr	r0, [r0]
   15d54:	ldrh	r2, [r0, r2]
   15d58:	tst	r2, #16384	; 0x4000
   15d5c:	beq	15d6c <argp_failure@@Base+0x42c>
   15d60:	ldrb	r2, [r8]
   15d64:	cmp	r4, r2
   15d68:	beq	164f8 <argp_failure@@Base+0xbb8>
   15d6c:	subs	r6, r6, #1
   15d70:	add	r5, r5, #24
   15d74:	bne	15d2c <argp_failure@@Base+0x3ec>
   15d78:	ldr	sl, [fp, #-136]	; 0xffffff78
   15d7c:	ldr	r4, [fp, #-112]	; 0xffffff90
   15d80:	ldrd	r2, [r9, #24]
   15d84:	ldr	r1, [r4, #12]
   15d88:	tst	r1, #8
   15d8c:	sub	r3, r3, r2
   15d90:	ldr	r2, [r9, #16]
   15d94:	beq	16604 <argp_failure@@Base+0xcc4>
   15d98:	cmp	r3, r2
   15d9c:	ldr	r5, [r7, #16]
   15da0:	bhi	16a00 <argp_failure@@Base+0x10c0>
   15da4:	str	r5, [r9, #12]
   15da8:	ldr	r6, [sl, #4]
   15dac:	cmp	r6, #0
   15db0:	addne	r5, r4, #24
   15db4:	bne	15dc8 <argp_failure@@Base+0x488>
   15db8:	b	15e74 <argp_failure@@Base+0x534>
   15dbc:	subs	r6, r6, #1
   15dc0:	add	r5, r5, #24
   15dc4:	beq	15e74 <argp_failure@@Base+0x534>
   15dc8:	ldr	r3, [r5, #-24]	; 0xffffffe8
   15dcc:	cmp	r3, #0
   15dd0:	beq	15dbc <argp_failure@@Base+0x47c>
   15dd4:	ldrb	r3, [r3]
   15dd8:	cmp	r3, #0
   15ddc:	beq	15dbc <argp_failure@@Base+0x47c>
   15de0:	ldr	r3, [r5, #-12]
   15de4:	tst	r3, #2
   15de8:	bne	15dbc <argp_failure@@Base+0x47c>
   15dec:	sub	r1, fp, #80	; 0x50
   15df0:	ldr	r0, [r7, #16]
   15df4:	bl	15254 <__assert_fail@plt+0x3c60>
   15df8:	ldr	r3, [r5, #-12]
   15dfc:	tst	r3, #32
   15e00:	beq	16a28 <argp_failure@@Base+0x10e8>
   15e04:	ldr	r8, [r5, #-24]	; 0xffffffe8
   15e08:	mov	r0, r8
   15e0c:	bl	11468 <strlen@plt>
   15e10:	subs	r3, r0, #0
   15e14:	beq	15dbc <argp_failure@@Base+0x47c>
   15e18:	ldrd	r0, [r9, #28]
   15e1c:	add	r2, r0, r3
   15e20:	cmp	r1, r2
   15e24:	bcs	15e48 <argp_failure@@Base+0x508>
   15e28:	mov	r1, r3
   15e2c:	mov	r0, r9
   15e30:	str	r3, [fp, #-112]	; 0xffffff90
   15e34:	bl	1b364 <argp_parse@@Base+0x3c50>
   15e38:	cmp	r0, #0
   15e3c:	beq	15dbc <argp_failure@@Base+0x47c>
   15e40:	ldr	r0, [r9, #28]
   15e44:	ldr	r3, [fp, #-112]	; 0xffffff90
   15e48:	mov	r2, r3
   15e4c:	mov	r1, r8
   15e50:	str	r3, [fp, #-112]	; 0xffffff90
   15e54:	bl	112e8 <memcpy@plt>
   15e58:	ldr	r2, [r9, #28]
   15e5c:	ldr	r3, [fp, #-112]	; 0xffffff90
   15e60:	subs	r6, r6, #1
   15e64:	add	r3, r2, r3
   15e68:	str	r3, [r9, #28]
   15e6c:	add	r5, r5, #24
   15e70:	bne	15dc8 <argp_failure@@Base+0x488>
   15e74:	ldr	r3, [r9, #28]
   15e78:	ldr	r1, [r9, #24]
   15e7c:	ldr	r2, [r9, #16]
   15e80:	sub	r3, r3, r1
   15e84:	cmp	r3, r2
   15e88:	bhi	1688c <argp_failure@@Base+0xf4c>
   15e8c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15e90:	mov	r3, #0
   15e94:	cmp	r2, r3
   15e98:	str	r3, [r9, #4]
   15e9c:	beq	16508 <argp_failure@@Base+0xbc8>
   15ea0:	ldr	r3, [r4, #12]
   15ea4:	tst	r3, #8
   15ea8:	bne	15ed4 <argp_failure@@Base+0x594>
   15eac:	ldr	r5, [r4, #4]
   15eb0:	sub	r3, r5, #1
   15eb4:	cmp	r3, #254	; 0xfe
   15eb8:	bhi	15ed4 <argp_failure@@Base+0x594>
   15ebc:	bl	11450 <__ctype_b_loc@plt>
   15ec0:	lsl	r5, r5, #1
   15ec4:	ldr	r3, [r0]
   15ec8:	ldrh	r3, [r3, r5]
   15ecc:	tst	r3, #16384	; 0x4000
   15ed0:	bne	15ee0 <argp_failure@@Base+0x5a0>
   15ed4:	ldr	r3, [r4]
   15ed8:	cmp	r3, #0
   15edc:	beq	16a74 <argp_failure@@Base+0x1134>
   15ee0:	ldr	r3, [r9, #28]
   15ee4:	ldr	r1, [r9, #24]
   15ee8:	ldr	r2, [r9, #16]
   15eec:	sub	r3, r3, r1
   15ef0:	cmp	r3, r2
   15ef4:	bhi	168b4 <argp_failure@@Base+0xf74>
   15ef8:	ldr	r3, [fp, #-120]	; 0xffffff88
   15efc:	str	r3, [r9, #4]
   15f00:	ldr	r3, [fp, #-108]	; 0xffffff94
   15f04:	add	sl, sl, #28
   15f08:	subs	r3, r3, #1
   15f0c:	str	r3, [fp, #-108]	; 0xffffff94
   15f10:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15f14:	str	r3, [r9, #12]
   15f18:	bne	15c68 <argp_failure@@Base+0x328>
   15f1c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15f20:	cmp	r3, #0
   15f24:	beq	15f38 <argp_failure@@Base+0x5f8>
   15f28:	ldr	r3, [fp, #-140]	; 0xffffff74
   15f2c:	ldr	r3, [r3, #4]
   15f30:	cmp	r3, #0
   15f34:	bne	16c98 <argp_failure@@Base+0x1358>
   15f38:	mov	r4, #1
   15f3c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15f40:	tst	r3, #32
   15f44:	bne	16474 <argp_failure@@Base+0xb34>
   15f48:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15f4c:	tst	r3, #64	; 0x40
   15f50:	beq	15f90 <argp_failure@@Base+0x650>
   15f54:	ldr	r5, [pc, #3076]	; 16b60 <argp_failure@@Base+0x1220>
   15f58:	ldr	r3, [r5]
   15f5c:	cmp	r3, #0
   15f60:	beq	15f90 <argp_failure@@Base+0x650>
   15f64:	cmp	r4, #0
   15f68:	bne	164b4 <argp_failure@@Base+0xb74>
   15f6c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15f70:	mov	r2, #5
   15f74:	ldr	r1, [pc, #3048]	; 16b64 <argp_failure@@Base+0x1224>
   15f78:	ldr	r0, [r3, #24]
   15f7c:	bl	11330 <dcgettext@plt>
   15f80:	ldr	r2, [r5]
   15f84:	mov	r1, r0
   15f88:	mov	r0, r9
   15f8c:	bl	1b380 <argp_parse@@Base+0x3c6c>
   15f90:	ldr	r0, [fp, #-128]	; 0xffffff80
   15f94:	bl	11378 <funlockfile@plt>
   15f98:	ldr	r3, [fp, #-104]	; 0xffffff98
   15f9c:	cmp	r3, #0
   15fa0:	beq	15fac <argp_failure@@Base+0x66c>
   15fa4:	mov	r0, r3
   15fa8:	bl	13c0c <__assert_fail@plt+0x2618>
   15fac:	mov	r0, r9
   15fb0:	bl	1b244 <argp_parse@@Base+0x3b30>
   15fb4:	ldr	r3, [pc, #2972]	; 16b58 <argp_failure@@Base+0x1218>
   15fb8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   15fbc:	ldr	r3, [r3]
   15fc0:	cmp	r2, r3
   15fc4:	bne	16ee8 <argp_failure@@Base+0x15a8>
   15fc8:	sub	sp, fp, #32
   15fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fd0:	ldr	r0, [pc, #2960]	; 16b68 <argp_failure@@Base+0x1228>
   15fd4:	bl	113e4 <getenv@plt>
   15fd8:	ldr	lr, [fp, #-140]	; 0xffffff74
   15fdc:	sub	r3, fp, #80	; 0x50
   15fe0:	mov	ip, r3
   15fe4:	str	r3, [fp, #-108]	; 0xffffff94
   15fe8:	mov	r5, r0
   15fec:	ldm	lr!, {r0, r1, r2, r3}
   15ff0:	cmp	r5, #0
   15ff4:	stmia	ip!, {r0, r1, r2, r3}
   15ff8:	ldm	lr!, {r0, r1, r2, r3}
   15ffc:	stmia	ip!, {r0, r1, r2, r3}
   16000:	ldm	lr, {r0, r1}
   16004:	stm	ip, {r0, r1}
   16008:	beq	15bd4 <argp_failure@@Base+0x294>
   1600c:	ldrb	r8, [r5]
   16010:	cmp	r8, #0
   16014:	beq	1604c <argp_failure@@Base+0x70c>
   16018:	bl	11450 <__ctype_b_loc@plt>
   1601c:	mov	r7, r0
   16020:	ldr	r2, [r0]
   16024:	b	1602c <argp_failure@@Base+0x6ec>
   16028:	ldrb	r8, [r5, #1]!
   1602c:	lsl	r3, r8, #1
   16030:	ldrh	r3, [r2, r3]
   16034:	tst	r3, #8192	; 0x2000
   16038:	bne	16028 <argp_failure@@Base+0x6e8>
   1603c:	ands	r4, r3, #1024	; 0x400
   16040:	bne	1675c <argp_failure@@Base+0xe1c>
   16044:	cmp	r8, #0
   16048:	bne	16bd0 <argp_failure@@Base+0x1290>
   1604c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16050:	ldr	r3, [pc, #2836]	; 16b6c <argp_failure@@Base+0x122c>
   16054:	ldr	r4, [pc, #2836]	; 16b70 <argp_failure@@Base+0x1230>
   16058:	b	1608c <argp_failure@@Base+0x74c>
   1605c:	ldr	r5, [r4, #4]
   16060:	cmp	r5, #0
   16064:	bne	16088 <argp_failure@@Base+0x748>
   16068:	ldr	r3, [r4, #8]
   1606c:	cmp	r3, #32
   16070:	beq	16088 <argp_failure@@Base+0x748>
   16074:	sub	r1, fp, #36	; 0x24
   16078:	add	r3, r1, r3
   1607c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   16080:	cmp	r3, r2
   16084:	bge	16c04 <argp_failure@@Base+0x12c4>
   16088:	ldr	r3, [r4, #12]
   1608c:	cmp	r3, #0
   16090:	add	r4, r4, #12
   16094:	bne	1605c <argp_failure@@Base+0x71c>
   16098:	ldr	lr, [fp, #-108]	; 0xffffff94
   1609c:	ldr	r3, [pc, #2744]	; 16b5c <argp_failure@@Base+0x121c>
   160a0:	mov	r4, #1
   160a4:	mov	r5, r3
   160a8:	str	r3, [fp, #-140]	; 0xffffff74
   160ac:	ldm	lr!, {r0, r1, r2, r3}
   160b0:	mov	ip, r5
   160b4:	stmia	ip!, {r0, r1, r2, r3}
   160b8:	ldm	lr!, {r0, r1, r2, r3}
   160bc:	stmia	ip!, {r0, r1, r2, r3}
   160c0:	ldm	lr, {r0, r1}
   160c4:	stm	ip, {r0, r1}
   160c8:	str	r4, [r5, #36]	; 0x24
   160cc:	b	15bd4 <argp_failure@@Base+0x294>
   160d0:	ldr	r3, [fp, #-132]	; 0xffffff7c
   160d4:	mov	r2, #5
   160d8:	ldr	r1, [pc, #2708]	; 16b74 <argp_failure@@Base+0x1234>
   160dc:	ldr	r0, [r3, #24]
   160e0:	bl	11330 <dcgettext@plt>
   160e4:	mov	r3, sl
   160e8:	mov	r2, sl
   160ec:	mov	r1, r0
   160f0:	mov	r0, r9
   160f4:	bl	1b380 <argp_parse@@Base+0x3c6c>
   160f8:	cmp	r5, #0
   160fc:	beq	15f38 <argp_failure@@Base+0x5f8>
   16100:	ldr	r3, [fp, #-104]	; 0xffffff98
   16104:	ldr	r3, [r3, #4]
   16108:	cmp	r3, #0
   1610c:	beq	15f38 <argp_failure@@Base+0x5f8>
   16110:	ldr	r3, [r9, #28]
   16114:	ldr	r2, [r9, #32]
   16118:	cmp	r3, r2
   1611c:	bcs	16c7c <argp_failure@@Base+0x133c>
   16120:	add	r1, r3, #1
   16124:	mov	r2, #10
   16128:	str	r1, [r9, #28]
   1612c:	strb	r2, [r3]
   16130:	ldr	r3, [fp, #-104]	; 0xffffff98
   16134:	ldr	r2, [fp, #-104]	; 0xffffff98
   16138:	ldr	r3, [r3, #4]
   1613c:	ldr	sl, [r2]
   16140:	str	r3, [fp, #-108]	; 0xffffff94
   16144:	ldr	r3, [fp, #-108]	; 0xffffff94
   16148:	cmp	r3, #0
   1614c:	mov	r3, #0
   16150:	str	r3, [fp, #-92]	; 0xffffffa4
   16154:	str	r3, [fp, #-88]	; 0xffffffa8
   16158:	str	r3, [fp, #-84]	; 0xffffffac
   1615c:	bne	15c64 <argp_failure@@Base+0x324>
   16160:	b	15f38 <argp_failure@@Base+0x5f8>
   16164:	mov	r2, #1
   16168:	mov	r3, #0
   1616c:	stm	sp, {r2, r9}
   16170:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16174:	mov	r2, r3
   16178:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1617c:	bl	153f4 <__assert_fail@plt+0x3e00>
   16180:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16184:	tst	r3, #4
   16188:	and	r5, r3, #8
   1618c:	orr	r4, r4, r0
   16190:	beq	15c2c <argp_failure@@Base+0x2ec>
   16194:	b	160d0 <argp_failure@@Base+0x790>
   16198:	ldr	r5, [fp, #-132]	; 0xffffff7c
   1619c:	ldr	r8, [pc, #2516]	; 16b78 <argp_failure@@Base+0x1238>
   161a0:	mov	r4, #1
   161a4:	ldr	r1, [r5, #16]
   161a8:	ldr	r0, [r5, #8]
   161ac:	bl	13e54 <__assert_fail@plt+0x2860>
   161b0:	mov	r1, #0
   161b4:	add	r3, r0, #7
   161b8:	bic	r3, r3, #7
   161bc:	sub	sp, sp, r3
   161c0:	add	r7, sp, #8
   161c4:	mov	r2, r0
   161c8:	mov	r0, r7
   161cc:	bl	114bc <memset@plt>
   161d0:	sub	r3, fp, #80	; 0x50
   161d4:	str	r3, [fp, #-108]	; 0xffffff94
   161d8:	str	r7, [fp, #-116]	; 0xffffff8c
   161dc:	str	sl, [fp, #-112]	; 0xffffff90
   161e0:	ldr	r6, [fp, #-140]	; 0xffffff74
   161e4:	b	162dc <argp_failure@@Base+0x99c>
   161e8:	cmp	r4, #0
   161ec:	ldr	r3, [fp, #-116]	; 0xffffff8c
   161f0:	ldrne	r1, [pc, #2436]	; 16b7c <argp_failure@@Base+0x123c>
   161f4:	ldreq	r1, [pc, #2436]	; 16b80 <argp_failure@@Base+0x1240>
   161f8:	ldr	r4, [r9, #12]
   161fc:	mov	r2, #5
   16200:	str	r7, [r9, #12]
   16204:	ldr	r0, [r5, #24]
   16208:	str	r3, [fp, #-80]	; 0xffffffb0
   1620c:	bl	11330 <dcgettext@plt>
   16210:	ldr	r3, [fp, #-112]	; 0xffffff90
   16214:	mov	r1, r8
   16218:	mov	r2, r0
   1621c:	mov	r0, r9
   16220:	bl	1b380 <argp_parse@@Base+0x3c6c>
   16224:	ldr	r3, [r9, #28]
   16228:	ldr	r1, [r9, #24]
   1622c:	ldr	r2, [r9, #16]
   16230:	sub	r3, r3, r1
   16234:	cmp	r3, r2
   16238:	ldr	r7, [r6, #28]
   1623c:	bhi	163a8 <argp_failure@@Base+0xa68>
   16240:	ldr	r3, [fp, #-96]	; 0xffffffa0
   16244:	ldr	sl, [r9, #4]
   16248:	tst	r3, #2
   1624c:	str	r7, [r9, #4]
   16250:	beq	163e4 <argp_failure@@Base+0xaa4>
   16254:	ldr	r3, [fp, #-104]	; 0xffffff98
   16258:	ldr	r3, [r3, #4]
   1625c:	cmp	r3, #0
   16260:	bne	16400 <argp_failure@@Base+0xac0>
   16264:	mov	r3, #1
   16268:	ldr	r2, [fp, #-108]	; 0xffffff94
   1626c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16270:	str	r9, [sp]
   16274:	mov	r0, r5
   16278:	bl	14de8 <__assert_fail@plt+0x37f4>
   1627c:	ldrd	r2, [r9, #24]
   16280:	ldr	r1, [r9, #16]
   16284:	sub	r2, r3, r2
   16288:	cmp	r2, r1
   1628c:	strls	r4, [r9, #12]
   16290:	mov	r7, r0
   16294:	bhi	163b4 <argp_failure@@Base+0xa74>
   16298:	ldr	r2, [r9, #32]
   1629c:	str	sl, [r9, #4]
   162a0:	cmp	r2, r3
   162a4:	bhi	162c0 <argp_failure@@Base+0x980>
   162a8:	mov	r1, #1
   162ac:	mov	r0, r9
   162b0:	bl	1b364 <argp_parse@@Base+0x3c50>
   162b4:	cmp	r0, #0
   162b8:	beq	162d0 <argp_failure@@Base+0x990>
   162bc:	ldr	r3, [r9, #28]
   162c0:	add	r1, r3, #1
   162c4:	mov	r2, #10
   162c8:	str	r1, [r9, #28]
   162cc:	strb	r2, [r3]
   162d0:	cmp	r7, #0
   162d4:	mov	r4, #0
   162d8:	beq	1649c <argp_failure@@Base+0xb5c>
   162dc:	ldr	r3, [r9, #28]
   162e0:	ldr	r1, [r9, #24]
   162e4:	ldr	r2, [r9, #16]
   162e8:	sub	r3, r3, r1
   162ec:	cmp	r3, r2
   162f0:	ldr	r7, [r6, #28]
   162f4:	bls	161e8 <argp_failure@@Base+0x8a8>
   162f8:	mov	r0, r9
   162fc:	bl	1ad30 <argp_parse@@Base+0x361c>
   16300:	b	161e8 <argp_failure@@Base+0x8a8>
   16304:	mov	r1, #0
   16308:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1630c:	bl	13ee0 <__assert_fail@plt+0x28ec>
   16310:	ldr	r2, [pc, #2156]	; 16b84 <argp_failure@@Base+0x1244>
   16314:	ldr	r4, [r0, #4]
   16318:	ldr	r5, [r0]
   1631c:	mov	r1, r4
   16320:	mov	r6, r0
   16324:	str	r0, [fp, #-104]	; 0xffffff98
   16328:	mov	r0, r5
   1632c:	bl	13dcc <__assert_fail@plt+0x27d8>
   16330:	ldr	r2, [pc, #2128]	; 16b88 <argp_failure@@Base+0x1248>
   16334:	cmp	r0, #0
   16338:	mvnne	r3, #0
   1633c:	strne	r3, [r0, #12]
   16340:	ldrne	r4, [r6, #4]
   16344:	mov	r0, r5
   16348:	mov	r1, r4
   1634c:	bl	13dcc <__assert_fail@plt+0x27d8>
   16350:	cmp	r0, #0
   16354:	mvnne	r3, #0
   16358:	strne	r3, [r0, #12]
   1635c:	ldrne	r3, [fp, #-104]	; 0xffffff98
   16360:	ldrne	r4, [r3, #4]
   16364:	cmp	r4, #0
   16368:	beq	15c04 <argp_failure@@Base+0x2c4>
   1636c:	mov	r3, r5
   16370:	mov	r1, #0
   16374:	str	r1, [r3, #24]
   16378:	add	r1, r1, #1
   1637c:	cmp	r1, r4
   16380:	add	r3, r3, #28
   16384:	bne	16374 <argp_failure@@Base+0xa34>
   16388:	ldr	r3, [pc, #2044]	; 16b8c <argp_failure@@Base+0x124c>
   1638c:	mov	r0, r5
   16390:	mov	r2, #28
   16394:	bl	11594 <qsort@plt>
   16398:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1639c:	ands	r4, r3, #3
   163a0:	beq	15c10 <argp_failure@@Base+0x2d0>
   163a4:	b	16198 <argp_failure@@Base+0x858>
   163a8:	mov	r0, r9
   163ac:	bl	1ad30 <argp_parse@@Base+0x361c>
   163b0:	b	16240 <argp_failure@@Base+0x900>
   163b4:	mov	r0, r9
   163b8:	bl	1ad30 <argp_parse@@Base+0x361c>
   163bc:	ldrd	r2, [r9, #24]
   163c0:	ldr	r1, [r9, #16]
   163c4:	str	r4, [r9, #12]
   163c8:	sub	r2, r3, r2
   163cc:	cmp	r2, r1
   163d0:	bls	16298 <argp_failure@@Base+0x958>
   163d4:	mov	r0, r9
   163d8:	bl	1ad30 <argp_parse@@Base+0x361c>
   163dc:	ldr	r3, [r9, #28]
   163e0:	b	16298 <argp_failure@@Base+0x958>
   163e4:	mov	r1, r9
   163e8:	ldr	r0, [fp, #-104]	; 0xffffff98
   163ec:	bl	14610 <__assert_fail@plt+0x301c>
   163f0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   163f4:	orr	r3, r3, #2
   163f8:	str	r3, [fp, #-96]	; 0xffffffa0
   163fc:	b	16264 <argp_failure@@Base+0x924>
   16400:	mov	r2, #5
   16404:	ldr	r1, [pc, #1924]	; 16b90 <argp_failure@@Base+0x1250>
   16408:	ldr	r0, [r5, #24]
   1640c:	bl	11330 <dcgettext@plt>
   16410:	mov	r7, r0
   16414:	bl	11468 <strlen@plt>
   16418:	subs	r3, r0, #0
   1641c:	beq	16264 <argp_failure@@Base+0x924>
   16420:	ldrd	r0, [r9, #28]
   16424:	add	r2, r0, r3
   16428:	cmp	r1, r2
   1642c:	bcs	16450 <argp_failure@@Base+0xb10>
   16430:	mov	r1, r3
   16434:	mov	r0, r9
   16438:	str	r3, [fp, #-120]	; 0xffffff88
   1643c:	bl	1b364 <argp_parse@@Base+0x3c50>
   16440:	cmp	r0, #0
   16444:	beq	16264 <argp_failure@@Base+0x924>
   16448:	ldr	r0, [r9, #28]
   1644c:	ldr	r3, [fp, #-120]	; 0xffffff88
   16450:	mov	r2, r3
   16454:	mov	r1, r7
   16458:	str	r3, [fp, #-120]	; 0xffffff88
   1645c:	bl	112e8 <memcpy@plt>
   16460:	ldr	r2, [r9, #28]
   16464:	ldr	r3, [fp, #-120]	; 0xffffff88
   16468:	add	r3, r2, r3
   1646c:	str	r3, [r9, #28]
   16470:	b	16264 <argp_failure@@Base+0x924>
   16474:	mov	r3, #0
   16478:	str	r3, [sp]
   1647c:	str	r9, [sp, #4]
   16480:	mov	r3, r4
   16484:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16488:	mov	r2, #1
   1648c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   16490:	bl	153f4 <__assert_fail@plt+0x3e00>
   16494:	orr	r4, r4, r0
   16498:	b	15f48 <argp_failure@@Base+0x608>
   1649c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   164a0:	ldr	sl, [fp, #-112]	; 0xffffff90
   164a4:	tst	r3, #16
   164a8:	mov	r4, #1
   164ac:	beq	15c1c <argp_failure@@Base+0x2dc>
   164b0:	b	16164 <argp_failure@@Base+0x824>
   164b4:	ldr	r3, [r9, #28]
   164b8:	ldr	r2, [r9, #32]
   164bc:	cmp	r3, r2
   164c0:	bcs	16c60 <argp_failure@@Base+0x1320>
   164c4:	add	r1, r3, #1
   164c8:	mov	r2, #10
   164cc:	str	r1, [r9, #28]
   164d0:	strb	r2, [r3]
   164d4:	b	15f6c <argp_failure@@Base+0x62c>
   164d8:	mov	r3, #1
   164dc:	cmp	r2, r0
   164e0:	str	r3, [fp, #-124]	; 0xffffff84
   164e4:	ldr	r5, [r7, #8]
   164e8:	bls	15d10 <argp_failure@@Base+0x3d0>
   164ec:	mov	r0, r9
   164f0:	bl	1ad30 <argp_parse@@Base+0x361c>
   164f4:	b	15d10 <argp_failure@@Base+0x3d0>
   164f8:	tst	sl, #2
   164fc:	beq	16938 <argp_failure@@Base+0xff8>
   16500:	add	r8, r8, #1
   16504:	b	15d6c <argp_failure@@Base+0x42c>
   16508:	ldr	r5, [r4, #16]
   1650c:	cmp	r5, #0
   16510:	beq	16920 <argp_failure@@Base+0xfe0>
   16514:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16518:	mov	r1, r5
   1651c:	mov	r2, #5
   16520:	ldr	r3, [r3]
   16524:	ldr	r0, [r3, #24]
   16528:	bl	11330 <dcgettext@plt>
   1652c:	ldr	r2, [sl, #20]
   16530:	ldr	r3, [r2, #20]
   16534:	cmp	r3, #0
   16538:	mov	r6, r0
   1653c:	moveq	r5, r0
   16540:	beq	1655c <argp_failure@@Base+0xc1c>
   16544:	ldr	r1, [r4, #4]
   16548:	mov	r5, r0
   1654c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16550:	mov	r0, r5
   16554:	bl	13eac <__assert_fail@plt+0x28b8>
   16558:	mov	r6, r0
   1655c:	cmp	r6, #0
   16560:	beq	16704 <argp_failure@@Base+0xdc4>
   16564:	ldrb	r3, [r6]
   16568:	cmp	r3, #0
   1656c:	beq	166f4 <argp_failure@@Base+0xdb4>
   16570:	ldr	r3, [r9, #28]
   16574:	ldr	r1, [r9, #24]
   16578:	ldr	r2, [r9, #16]
   1657c:	sub	r3, r3, r1
   16580:	cmp	r3, r2
   16584:	bhi	16adc <argp_failure@@Base+0x119c>
   16588:	ldr	r3, [r9, #20]
   1658c:	ldr	r4, [r7, #20]
   16590:	bic	r2, r3, r3, asr #31
   16594:	mov	r8, r4
   16598:	str	r4, [r9, #4]
   1659c:	add	r3, r4, #3
   165a0:	cmp	r3, r2
   165a4:	str	r8, [r9, #12]
   165a8:	bcc	16ab8 <argp_failure@@Base+0x1178>
   165ac:	cmp	r4, r2
   165b0:	bhi	16694 <argp_failure@@Base+0xd54>
   165b4:	ldr	r3, [r9, #28]
   165b8:	ldr	r1, [r9, #32]
   165bc:	add	r2, r3, #3
   165c0:	cmp	r1, r2
   165c4:	bcs	165e0 <argp_failure@@Base+0xca0>
   165c8:	mov	r1, #3
   165cc:	mov	r0, r9
   165d0:	bl	1b364 <argp_parse@@Base+0x3c50>
   165d4:	cmp	r0, #0
   165d8:	beq	166a0 <argp_failure@@Base+0xd60>
   165dc:	ldr	r3, [r9, #28]
   165e0:	ldr	r2, [pc, #1452]	; 16b94 <argp_failure@@Base+0x1254>
   165e4:	ldrh	r1, [r2]
   165e8:	ldrb	r2, [r2, #2]
   165ec:	strh	r1, [r3]
   165f0:	strb	r2, [r3, #2]
   165f4:	ldr	r3, [r9, #28]
   165f8:	add	r3, r3, #3
   165fc:	str	r3, [r9, #28]
   16600:	b	166a0 <argp_failure@@Base+0xd60>
   16604:	cmp	r3, r2
   16608:	ldr	r5, [r7, #12]
   1660c:	bhi	16a0c <argp_failure@@Base+0x10cc>
   16610:	str	r5, [r9, #12]
   16614:	ldr	r6, [sl, #4]
   16618:	cmp	r6, #0
   1661c:	beq	15e74 <argp_failure@@Base+0x534>
   16620:	add	r5, r4, #24
   16624:	ldr	r8, [fp, #-100]	; 0xffffff9c
   16628:	b	16638 <argp_failure@@Base+0xcf8>
   1662c:	subs	r6, r6, #1
   16630:	add	r5, r5, #24
   16634:	beq	15e74 <argp_failure@@Base+0x534>
   16638:	ldr	r3, [r5, #-24]	; 0xffffffe8
   1663c:	cmp	r3, #0
   16640:	beq	1662c <argp_failure@@Base+0xcec>
   16644:	ldr	r3, [r5, #-12]
   16648:	tst	r3, #2
   1664c:	bne	1662c <argp_failure@@Base+0xcec>
   16650:	sub	r1, fp, #80	; 0x50
   16654:	ldr	r0, [r7, #12]
   16658:	bl	15254 <__assert_fail@plt+0x3c60>
   1665c:	ldr	r2, [r5, #-24]	; 0xffffffe8
   16660:	ldr	r1, [pc, #1328]	; 16b98 <argp_failure@@Base+0x1258>
   16664:	mov	r0, r9
   16668:	bl	1b380 <argp_parse@@Base+0x3c6c>
   1666c:	ldr	r3, [r8]
   16670:	ldr	r0, [r4, #8]
   16674:	str	r9, [sp, #4]
   16678:	ldr	r3, [r3, #24]
   1667c:	ldr	r2, [pc, #1304]	; 16b9c <argp_failure@@Base+0x125c>
   16680:	str	r3, [sp]
   16684:	add	r1, r4, #12
   16688:	ldr	r3, [pc, #1296]	; 16ba0 <argp_failure@@Base+0x1260>
   1668c:	bl	13cac <__assert_fail@plt+0x26b8>
   16690:	b	1662c <argp_failure@@Base+0xcec>
   16694:	mov	r1, r4
   16698:	mov	r0, r9
   1669c:	bl	14bf8 <__assert_fail@plt+0x3604>
   166a0:	mov	r0, r6
   166a4:	bl	11468 <strlen@plt>
   166a8:	subs	r4, r0, #0
   166ac:	beq	166f4 <argp_failure@@Base+0xdb4>
   166b0:	ldr	r0, [r9, #28]
   166b4:	ldr	r2, [r9, #32]
   166b8:	add	r3, r0, r4
   166bc:	cmp	r2, r3
   166c0:	bcs	166dc <argp_failure@@Base+0xd9c>
   166c4:	mov	r1, r4
   166c8:	mov	r0, r9
   166cc:	bl	1b364 <argp_parse@@Base+0x3c50>
   166d0:	cmp	r0, #0
   166d4:	beq	166f4 <argp_failure@@Base+0xdb4>
   166d8:	ldr	r0, [r9, #28]
   166dc:	mov	r2, r4
   166e0:	mov	r1, r6
   166e4:	bl	112e8 <memcpy@plt>
   166e8:	ldr	r3, [r9, #28]
   166ec:	add	r4, r3, r4
   166f0:	str	r4, [r9, #28]
   166f4:	cmp	r5, r6
   166f8:	beq	16704 <argp_failure@@Base+0xdc4>
   166fc:	mov	r0, r6
   16700:	bl	112c4 <free@plt>
   16704:	ldrd	r2, [r9, #24]
   16708:	ldr	r1, [r9, #16]
   1670c:	sub	r2, r3, r2
   16710:	cmp	r2, r1
   16714:	bhi	16a18 <argp_failure@@Base+0x10d8>
   16718:	ldr	r1, [r9, #32]
   1671c:	mov	r2, #0
   16720:	cmp	r1, r3
   16724:	str	r2, [r9, #4]
   16728:	bhi	16744 <argp_failure@@Base+0xe04>
   1672c:	mov	r1, #1
   16730:	mov	r0, r9
   16734:	bl	1b364 <argp_parse@@Base+0x3c50>
   16738:	cmp	r0, #0
   1673c:	beq	16754 <argp_failure@@Base+0xe14>
   16740:	ldr	r3, [r9, #28]
   16744:	add	r1, r3, #1
   16748:	mov	r2, #10
   1674c:	str	r1, [r9, #28]
   16750:	strb	r2, [r3]
   16754:	str	sl, [fp, #-92]	; 0xffffffa4
   16758:	b	15ee0 <argp_failure@@Base+0x5a0>
   1675c:	cmp	r8, #45	; 0x2d
   16760:	cmpne	r8, #95	; 0x5f
   16764:	lsl	r3, r3, #28
   16768:	moveq	r6, #1
   1676c:	movne	r6, #0
   16770:	orrs	r3, r6, r3, lsr #31
   16774:	beq	16e00 <argp_failure@@Base+0x14c0>
   16778:	mov	r4, r5
   1677c:	ldrb	r3, [r4, #1]!
   16780:	cmp	r3, #45	; 0x2d
   16784:	cmpne	r3, #95	; 0x5f
   16788:	lsl	r1, r3, #1
   1678c:	moveq	r0, #1
   16790:	ldrh	r1, [r2, r1]
   16794:	movne	r0, #0
   16798:	lsl	ip, r1, #28
   1679c:	orrs	r0, r0, ip, lsr #31
   167a0:	bne	1677c <argp_failure@@Base+0xe3c>
   167a4:	tst	r1, #8192	; 0x2000
   167a8:	sub	r6, r4, r5
   167ac:	beq	167c4 <argp_failure@@Base+0xe84>
   167b0:	ldrb	r3, [r4, #1]!
   167b4:	lsl	r1, r3, #1
   167b8:	ldrh	r1, [r2, r1]
   167bc:	tst	r1, #8192	; 0x2000
   167c0:	bne	167b0 <argp_failure@@Base+0xe70>
   167c4:	cmp	r3, #44	; 0x2c
   167c8:	cmpne	r3, #0
   167cc:	beq	169ec <argp_failure@@Base+0x10ac>
   167d0:	cmp	r3, #61	; 0x3d
   167d4:	beq	16d38 <argp_failure@@Base+0x13f8>
   167d8:	ldrb	r3, [r4]
   167dc:	lsl	r3, r3, #1
   167e0:	ldrh	r9, [r2, r3]
   167e4:	ands	r9, r9, #2048	; 0x800
   167e8:	streq	r9, [fp, #-104]	; 0xffffff98
   167ec:	bne	16d68 <argp_failure@@Base+0x1428>
   167f0:	ldr	r7, [pc, #888]	; 16b70 <argp_failure@@Base+0x1230>
   167f4:	mov	r0, #8
   167f8:	ldr	r8, [pc, #932]	; 16ba4 <argp_failure@@Base+0x1264>
   167fc:	b	16814 <argp_failure@@Base+0xed4>
   16800:	ldr	r8, [r7, #12]!
   16804:	cmp	r8, #0
   16808:	beq	168e8 <argp_failure@@Base+0xfa8>
   1680c:	mov	r0, r8
   16810:	bl	11468 <strlen@plt>
   16814:	cmp	r6, r0
   16818:	bne	16800 <argp_failure@@Base+0xec0>
   1681c:	mov	r1, r8
   16820:	mov	r2, r6
   16824:	mov	r0, r5
   16828:	bl	115c4 <strncmp@plt>
   1682c:	cmp	r0, #0
   16830:	bne	16800 <argp_failure@@Base+0xec0>
   16834:	cmp	r9, #0
   16838:	beq	16848 <argp_failure@@Base+0xf08>
   1683c:	ldr	r9, [r7, #4]
   16840:	cmp	r9, #0
   16844:	beq	16d00 <argp_failure@@Base+0x13c0>
   16848:	ldr	r3, [fp, #-104]	; 0xffffff98
   1684c:	cmp	r3, #0
   16850:	blt	16dc8 <argp_failure@@Base+0x1488>
   16854:	ldr	r3, [r7, #8]
   16858:	sub	r2, fp, #36	; 0x24
   1685c:	add	r3, r2, r3
   16860:	ldr	r2, [fp, #-104]	; 0xffffff98
   16864:	str	r2, [r3, #-44]	; 0xffffffd4
   16868:	ldr	r3, [r7]
   1686c:	cmp	r3, #0
   16870:	beq	168e8 <argp_failure@@Base+0xfa8>
   16874:	ldrb	r8, [r4]
   16878:	cmp	r8, #44	; 0x2c
   1687c:	movne	r5, r4
   16880:	addeq	r5, r4, #1
   16884:	ldrbeq	r8, [r4, #1]
   16888:	b	16010 <argp_failure@@Base+0x6d0>
   1688c:	mov	r0, r9
   16890:	bl	1ad30 <argp_parse@@Base+0x361c>
   16894:	b	15e8c <argp_failure@@Base+0x54c>
   16898:	mov	r0, r9
   1689c:	bl	1ad30 <argp_parse@@Base+0x361c>
   168a0:	ldr	r2, [r9, #28]
   168a4:	ldr	r3, [r9, #24]
   168a8:	ldr	r0, [r9, #16]
   168ac:	sub	r2, r2, r3
   168b0:	b	15c88 <argp_failure@@Base+0x348>
   168b4:	mov	r0, r9
   168b8:	bl	1ad30 <argp_parse@@Base+0x361c>
   168bc:	ldr	r2, [fp, #-120]	; 0xffffff88
   168c0:	ldr	r3, [r9, #28]
   168c4:	ldr	r1, [r9, #24]
   168c8:	str	r2, [r9, #4]
   168cc:	ldr	r2, [r9, #16]
   168d0:	sub	r3, r3, r1
   168d4:	cmp	r3, r2
   168d8:	bls	15f00 <argp_failure@@Base+0x5c0>
   168dc:	mov	r0, r9
   168e0:	bl	1ad30 <argp_parse@@Base+0x361c>
   168e4:	b	15f00 <argp_failure@@Base+0x5c0>
   168e8:	ldr	r7, [fp, #-100]	; 0xffffff9c
   168ec:	mov	r2, #5
   168f0:	ldr	r1, [pc, #688]	; 16ba8 <argp_failure@@Base+0x1268>
   168f4:	ldr	r3, [r7]
   168f8:	ldr	r0, [r3, #24]
   168fc:	bl	11330 <dcgettext@plt>
   16900:	mov	r2, #0
   16904:	str	r5, [sp, #4]
   16908:	str	r6, [sp]
   1690c:	mov	r1, r2
   16910:	mov	r3, r0
   16914:	mov	r0, r7
   16918:	bl	15940 <argp_failure@@Base>
   1691c:	b	16874 <argp_failure@@Base+0xf34>
   16920:	ldr	r2, [sl, #20]
   16924:	ldr	r3, [r2, #20]
   16928:	cmp	r3, #0
   1692c:	beq	16704 <argp_failure@@Base+0xdc4>
   16930:	ldr	r1, [r4, #4]
   16934:	b	1654c <argp_failure@@Base+0xc0c>
   16938:	sub	r1, fp, #80	; 0x50
   1693c:	ldr	r0, [r7, #8]
   16940:	bl	15254 <__assert_fail@plt+0x3c60>
   16944:	ldr	r3, [r9, #28]
   16948:	ldr	r2, [r9, #32]
   1694c:	cmp	r3, r2
   16950:	bcc	1696c <argp_failure@@Base+0x102c>
   16954:	mov	r1, #1
   16958:	mov	r0, r9
   1695c:	bl	1b364 <argp_parse@@Base+0x3c50>
   16960:	cmp	r0, #0
   16964:	beq	1697c <argp_failure@@Base+0x103c>
   16968:	ldr	r3, [r9, #28]
   1696c:	add	r1, r3, #1
   16970:	mov	r2, #45	; 0x2d
   16974:	str	r1, [r9, #28]
   16978:	strb	r2, [r3]
   1697c:	ldr	r3, [r9, #28]
   16980:	ldr	r1, [r9, #32]
   16984:	ldrb	r2, [r8]
   16988:	cmp	r3, r1
   1698c:	bcc	169b0 <argp_failure@@Base+0x1070>
   16990:	mov	r1, #1
   16994:	mov	r0, r9
   16998:	str	r2, [fp, #-144]	; 0xffffff70
   1699c:	bl	1b364 <argp_parse@@Base+0x3c50>
   169a0:	cmp	r0, #0
   169a4:	beq	169bc <argp_failure@@Base+0x107c>
   169a8:	ldr	r3, [r9, #28]
   169ac:	ldr	r2, [fp, #-144]	; 0xffffff70
   169b0:	add	r1, r3, #1
   169b4:	str	r1, [r9, #28]
   169b8:	strb	r2, [r3]
   169bc:	ldr	r3, [fp, #-124]	; 0xffffff84
   169c0:	cmp	r3, #0
   169c4:	ldr	r3, [fp, #-112]	; 0xffffff90
   169c8:	ldr	r0, [r3, #8]
   169cc:	beq	16a48 <argp_failure@@Base+0x1108>
   169d0:	ldr	r3, [r7]
   169d4:	cmp	r3, #0
   169d8:	bne	16a48 <argp_failure@@Base+0x1108>
   169dc:	cmp	r0, #0
   169e0:	movne	r3, #1
   169e4:	strne	r3, [fp, #-84]	; 0xffffffac
   169e8:	b	16500 <argp_failure@@Base+0xbc0>
   169ec:	cmp	r8, #110	; 0x6e
   169f0:	beq	16a88 <argp_failure@@Base+0x1148>
   169f4:	mov	r9, #1
   169f8:	str	r9, [fp, #-104]	; 0xffffff98
   169fc:	b	167f0 <argp_failure@@Base+0xeb0>
   16a00:	mov	r0, r9
   16a04:	bl	1ad30 <argp_parse@@Base+0x361c>
   16a08:	b	15da4 <argp_failure@@Base+0x464>
   16a0c:	mov	r0, r9
   16a10:	bl	1ad30 <argp_parse@@Base+0x361c>
   16a14:	b	16610 <argp_failure@@Base+0xcd0>
   16a18:	mov	r0, r9
   16a1c:	bl	1ad30 <argp_parse@@Base+0x361c>
   16a20:	ldr	r3, [r9, #28]
   16a24:	b	16718 <argp_failure@@Base+0xdd8>
   16a28:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16a2c:	mov	r2, #5
   16a30:	ldr	r1, [r5, #-24]	; 0xffffffe8
   16a34:	ldr	r3, [r3]
   16a38:	ldr	r0, [r3, #24]
   16a3c:	bl	11330 <dcgettext@plt>
   16a40:	mov	r8, r0
   16a44:	b	15e08 <argp_failure@@Base+0x4c8>
   16a48:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16a4c:	ldr	r1, [fp, #-112]	; 0xffffff90
   16a50:	ldr	r3, [r3]
   16a54:	str	r9, [sp, #4]
   16a58:	add	r1, r1, #12
   16a5c:	ldr	r2, [r3, #24]
   16a60:	ldr	r3, [pc, #324]	; 16bac <argp_failure@@Base+0x126c>
   16a64:	str	r2, [sp]
   16a68:	ldr	r2, [pc, #320]	; 16bb0 <argp_failure@@Base+0x1270>
   16a6c:	bl	13cac <__assert_fail@plt+0x26b8>
   16a70:	b	16500 <argp_failure@@Base+0xbc0>
   16a74:	ldr	r0, [r4, #16]
   16a78:	sub	r2, fp, #80	; 0x50
   16a7c:	ldr	r1, [sl, #20]
   16a80:	bl	15018 <__assert_fail@plt+0x3a24>
   16a84:	b	16754 <argp_failure@@Base+0xe14>
   16a88:	ldrb	r3, [r5, #1]
   16a8c:	cmp	r3, #111	; 0x6f
   16a90:	bne	169f4 <argp_failure@@Base+0x10b4>
   16a94:	ldrb	r3, [r5, #2]
   16a98:	cmp	r3, #45	; 0x2d
   16a9c:	bne	169f4 <argp_failure@@Base+0x10b4>
   16aa0:	mov	r3, #0
   16aa4:	add	r5, r5, #3
   16aa8:	sub	r6, r6, #3
   16aac:	str	r3, [fp, #-104]	; 0xffffff98
   16ab0:	mov	r9, #1
   16ab4:	b	167f0 <argp_failure@@Base+0xeb0>
   16ab8:	ldr	r3, [r9, #28]
   16abc:	ldr	r2, [r9, #32]
   16ac0:	cmp	r3, r2
   16ac4:	bcs	16c44 <argp_failure@@Base+0x1304>
   16ac8:	add	r1, r3, #1
   16acc:	mov	r2, #10
   16ad0:	str	r1, [r9, #28]
   16ad4:	strb	r2, [r3]
   16ad8:	b	166a0 <argp_failure@@Base+0xd60>
   16adc:	mov	r0, r9
   16ae0:	bl	1ad30 <argp_parse@@Base+0x361c>
   16ae4:	ldr	r3, [r9, #28]
   16ae8:	ldr	r1, [r9, #24]
   16aec:	ldr	r0, [r9, #16]
   16af0:	ldr	r2, [r9, #20]
   16af4:	sub	r3, r3, r1
   16af8:	cmp	r3, r0
   16afc:	ldr	r4, [r7, #20]
   16b00:	bic	r2, r2, r2, asr #31
   16b04:	bls	16594 <argp_failure@@Base+0xc54>
   16b08:	mov	r0, r9
   16b0c:	str	r2, [fp, #-112]	; 0xffffff90
   16b10:	bl	1ad30 <argp_parse@@Base+0x361c>
   16b14:	ldr	r3, [r9, #28]
   16b18:	ldr	r1, [r9, #24]
   16b1c:	ldr	r0, [r9, #16]
   16b20:	sub	r3, r3, r1
   16b24:	cmp	r3, r0
   16b28:	str	r4, [r9, #4]
   16b2c:	ldr	r8, [r7, #20]
   16b30:	ldr	r2, [fp, #-112]	; 0xffffff90
   16b34:	bls	16eec <argp_failure@@Base+0x15ac>
   16b38:	mov	r0, r9
   16b3c:	bl	1ad30 <argp_parse@@Base+0x361c>
   16b40:	ldr	r4, [r7, #20]
   16b44:	ldr	r2, [fp, #-112]	; 0xffffff90
   16b48:	b	1659c <argp_failure@@Base+0xc5c>
   16b4c:	ldr	r0, [fp, #-128]	; 0xffffff80
   16b50:	bl	11378 <funlockfile@plt>
   16b54:	b	15fb4 <argp_failure@@Base+0x674>
   16b58:	andeq	lr, r2, r8, lsl #30
   16b5c:	andeq	pc, r2, r4, ror #4
   16b60:	andeq	pc, r2, r4, lsl r2	; <UNPREDICTABLE>
   16b64:	andeq	sp, r1, r0, asr #16
   16b68:	andeq	sp, r1, r8, asr #12
   16b6c:	andeq	sp, r1, r8, lsr r6
   16b70:	andeq	sp, r1, r8, ror r4
   16b74:	andeq	sp, r1, r4, ror r7
   16b78:	andeq	sp, r1, r4, asr r7
   16b7c:	andeq	sp, r1, ip, asr #14
   16b80:	andeq	sp, r1, ip, asr r7
   16b84:	andeq	sp, r1, ip, lsr r7
   16b88:	andeq	sp, r1, r4, asr #14
   16b8c:	andeq	r4, r1, ip, lsl #16
   16b90:	andeq	sp, r1, r4, ror #14
   16b94:	andeq	sp, r1, r8, asr #15
   16b98:			; <UNDEFINED> instruction: 0x0001d7b4
   16b9c:	andeq	sp, r1, r4, asr #15
   16ba0:			; <UNDEFINED> instruction: 0x0001d7bc
   16ba4:	andeq	sp, r1, ip, lsr #12
   16ba8:			; <UNDEFINED> instruction: 0x0001d6b8
   16bac:	andeq	sp, r1, ip, lsr #15
   16bb0:	andeq	sp, r1, r4, asr r4
   16bb4:	andeq	sp, r1, r0, ror #13
   16bb8:	andeq	sp, r1, r0, lsl #14
   16bbc:	andeq	sp, r1, r4, lsr r7
   16bc0:	andeq	sp, r1, ip, asr #15
   16bc4:	andeq	r0, r0, #5
   16bc8:	andeq	sp, r1, r8, asr r6
   16bcc:	andeq	sp, r1, r8, lsl #13
   16bd0:	ldr	r6, [fp, #-100]	; 0xffffff9c
   16bd4:	mov	r2, #5
   16bd8:	ldr	r1, [pc, #-44]	; 16bb4 <argp_failure@@Base+0x1274>
   16bdc:	ldr	r3, [r6]
   16be0:	ldr	r0, [r3, #24]
   16be4:	bl	11330 <dcgettext@plt>
   16be8:	str	r5, [sp]
   16bec:	mov	r2, r4
   16bf0:	mov	r1, r4
   16bf4:	mov	r3, r0
   16bf8:	mov	r0, r6
   16bfc:	bl	15940 <argp_failure@@Base>
   16c00:	b	1604c <argp_failure@@Base+0x70c>
   16c04:	ldr	r6, [fp, #-100]	; 0xffffff9c
   16c08:	mov	r2, #5
   16c0c:	ldr	r1, [pc, #-92]	; 16bb8 <argp_failure@@Base+0x1278>
   16c10:	ldr	r3, [r6]
   16c14:	ldr	r0, [r3, #24]
   16c18:	bl	11330 <dcgettext@plt>
   16c1c:	ldr	r2, [r4]
   16c20:	ldr	r3, [pc, #-108]	; 16bbc <argp_failure@@Base+0x127c>
   16c24:	str	r2, [sp, #4]
   16c28:	str	r3, [sp]
   16c2c:	mov	r2, r5
   16c30:	mov	r1, r5
   16c34:	mov	r3, r0
   16c38:	mov	r0, r6
   16c3c:	bl	15940 <argp_failure@@Base>
   16c40:	b	15bd4 <argp_failure@@Base+0x294>
   16c44:	mov	r1, #1
   16c48:	mov	r0, r9
   16c4c:	bl	1b364 <argp_parse@@Base+0x3c50>
   16c50:	cmp	r0, #0
   16c54:	beq	166a0 <argp_failure@@Base+0xd60>
   16c58:	ldr	r3, [r9, #28]
   16c5c:	b	16ac8 <argp_failure@@Base+0x1188>
   16c60:	mov	r1, #1
   16c64:	mov	r0, r9
   16c68:	bl	1b364 <argp_parse@@Base+0x3c50>
   16c6c:	cmp	r0, #0
   16c70:	beq	15f6c <argp_failure@@Base+0x62c>
   16c74:	ldr	r3, [r9, #28]
   16c78:	b	164c4 <argp_failure@@Base+0xb84>
   16c7c:	mov	r1, #1
   16c80:	mov	r0, r9
   16c84:	bl	1b364 <argp_parse@@Base+0x3c50>
   16c88:	cmp	r0, #0
   16c8c:	ldrne	r3, [r9, #28]
   16c90:	bne	16120 <argp_failure@@Base+0x7e0>
   16c94:	b	16130 <argp_failure@@Base+0x7f0>
   16c98:	ldr	r4, [fp, #-100]	; 0xffffff9c
   16c9c:	mov	r2, #5
   16ca0:	ldr	r1, [pc, #-232]	; 16bc0 <argp_failure@@Base+0x1280>
   16ca4:	ldr	r3, [r4]
   16ca8:	ldr	r0, [r3, #24]
   16cac:	bl	11330 <dcgettext@plt>
   16cb0:	ldr	r2, [r4]
   16cb4:	ldr	r3, [r2, #20]
   16cb8:	cmp	r3, #0
   16cbc:	mov	r5, r0
   16cc0:	moveq	r4, r0
   16cc4:	beq	16cd8 <argp_failure@@Base+0x1398>
   16cc8:	mov	r3, r4
   16ccc:	ldr	r1, [pc, #-272]	; 16bc4 <argp_failure@@Base+0x1284>
   16cd0:	bl	13eac <__assert_fail@plt+0x28b8>
   16cd4:	mov	r4, r0
   16cd8:	cmp	r4, #0
   16cdc:	beq	15f38 <argp_failure@@Base+0x5f8>
   16ce0:	ldrb	r3, [r4]
   16ce4:	cmp	r3, #0
   16ce8:	bne	16e10 <argp_failure@@Base+0x14d0>
   16cec:	cmp	r5, r4
   16cf0:	beq	15f38 <argp_failure@@Base+0x5f8>
   16cf4:	mov	r0, r4
   16cf8:	bl	112c4 <free@plt>
   16cfc:	b	15f38 <argp_failure@@Base+0x5f8>
   16d00:	ldr	r8, [fp, #-100]	; 0xffffff9c
   16d04:	mov	r2, #5
   16d08:	ldr	r1, [pc, #-328]	; 16bc8 <argp_failure@@Base+0x1288>
   16d0c:	ldr	r3, [r8]
   16d10:	ldr	r0, [r3, #24]
   16d14:	bl	11330 <dcgettext@plt>
   16d18:	str	r5, [sp, #4]
   16d1c:	str	r6, [sp]
   16d20:	mov	r2, r9
   16d24:	mov	r1, r9
   16d28:	mov	r3, r0
   16d2c:	mov	r0, r8
   16d30:	bl	15940 <argp_failure@@Base>
   16d34:	b	16868 <argp_failure@@Base+0xf28>
   16d38:	ldrb	r3, [r4, #1]
   16d3c:	add	r4, r4, #1
   16d40:	lsl	r3, r3, #1
   16d44:	ldrh	r9, [r2, r3]
   16d48:	tst	r9, #8192	; 0x2000
   16d4c:	beq	167e4 <argp_failure@@Base+0xea4>
   16d50:	ldrb	r3, [r4, #1]!
   16d54:	lsl	r3, r3, #1
   16d58:	ldrh	r9, [r2, r3]
   16d5c:	tst	r9, #8192	; 0x2000
   16d60:	bne	16d50 <argp_failure@@Base+0x1410>
   16d64:	b	167e4 <argp_failure@@Base+0xea4>
   16d68:	mov	r2, #10
   16d6c:	mov	r1, #0
   16d70:	mov	r0, r4
   16d74:	bl	11288 <strtol@plt>
   16d78:	ldrb	r3, [r4]
   16d7c:	ldr	r2, [r7]
   16d80:	lsl	r3, r3, #1
   16d84:	ldrh	r9, [r2, r3]
   16d88:	tst	r9, #2048	; 0x800
   16d8c:	str	r0, [fp, #-104]	; 0xffffff98
   16d90:	beq	16da8 <argp_failure@@Base+0x1468>
   16d94:	ldrb	r3, [r4, #1]!
   16d98:	lsl	r3, r3, #1
   16d9c:	ldrh	r9, [r2, r3]
   16da0:	tst	r9, #2048	; 0x800
   16da4:	bne	16d94 <argp_failure@@Base+0x1454>
   16da8:	ands	r9, r9, #8192	; 0x2000
   16dac:	beq	167f0 <argp_failure@@Base+0xeb0>
   16db0:	ldrb	r3, [r4, #1]!
   16db4:	lsl	r3, r3, #1
   16db8:	ldrh	r9, [r2, r3]
   16dbc:	ands	r9, r9, #8192	; 0x2000
   16dc0:	bne	16db0 <argp_failure@@Base+0x1470>
   16dc4:	b	167f0 <argp_failure@@Base+0xeb0>
   16dc8:	ldr	r8, [fp, #-100]	; 0xffffff9c
   16dcc:	mov	r2, #5
   16dd0:	ldr	r1, [pc, #-524]	; 16bcc <argp_failure@@Base+0x128c>
   16dd4:	ldr	r3, [r8]
   16dd8:	ldr	r0, [r3, #24]
   16ddc:	bl	11330 <dcgettext@plt>
   16de0:	mov	r2, #0
   16de4:	str	r5, [sp, #4]
   16de8:	str	r6, [sp]
   16dec:	mov	r1, r2
   16df0:	mov	r3, r0
   16df4:	mov	r0, r8
   16df8:	bl	15940 <argp_failure@@Base>
   16dfc:	b	16868 <argp_failure@@Base+0xf28>
   16e00:	mov	r6, r3
   16e04:	mov	r4, r5
   16e08:	mov	r3, r8
   16e0c:	b	167c4 <argp_failure@@Base+0xe84>
   16e10:	ldr	r3, [r9, #28]
   16e14:	ldr	r2, [r9, #32]
   16e18:	cmp	r3, r2
   16e1c:	bcc	16e38 <argp_failure@@Base+0x14f8>
   16e20:	mov	r1, #1
   16e24:	mov	r0, r9
   16e28:	bl	1b364 <argp_parse@@Base+0x3c50>
   16e2c:	cmp	r0, #0
   16e30:	beq	16e48 <argp_failure@@Base+0x1508>
   16e34:	ldr	r3, [r9, #28]
   16e38:	add	r1, r3, #1
   16e3c:	mov	r2, #10
   16e40:	str	r1, [r9, #28]
   16e44:	strb	r2, [r3]
   16e48:	mov	r0, r4
   16e4c:	bl	11468 <strlen@plt>
   16e50:	ldr	r3, [r9, #28]
   16e54:	ldr	r2, [r9, #32]
   16e58:	mov	r1, r3
   16e5c:	subs	r6, r0, #0
   16e60:	bne	16e98 <argp_failure@@Base+0x1558>
   16e64:	cmp	r3, r2
   16e68:	bcc	16e84 <argp_failure@@Base+0x1544>
   16e6c:	mov	r1, #1
   16e70:	mov	r0, r9
   16e74:	bl	1b364 <argp_parse@@Base+0x3c50>
   16e78:	cmp	r0, #0
   16e7c:	beq	16cec <argp_failure@@Base+0x13ac>
   16e80:	ldr	r3, [r9, #28]
   16e84:	add	r1, r3, #1
   16e88:	mov	r2, #10
   16e8c:	str	r1, [r9, #28]
   16e90:	strb	r2, [r3]
   16e94:	b	16cec <argp_failure@@Base+0x13ac>
   16e98:	add	r3, r3, r6
   16e9c:	cmp	r2, r3
   16ea0:	bcs	16ec4 <argp_failure@@Base+0x1584>
   16ea4:	mov	r1, r6
   16ea8:	mov	r0, r9
   16eac:	bl	1b364 <argp_parse@@Base+0x3c50>
   16eb0:	cmp	r0, #0
   16eb4:	ldrne	r1, [r9, #28]
   16eb8:	ldreq	r3, [r9, #28]
   16ebc:	ldreq	r2, [r9, #32]
   16ec0:	beq	16e64 <argp_failure@@Base+0x1524>
   16ec4:	mov	r0, r1
   16ec8:	mov	r2, r6
   16ecc:	mov	r1, r4
   16ed0:	bl	112e8 <memcpy@plt>
   16ed4:	ldr	r3, [r9, #28]
   16ed8:	ldr	r2, [r9, #32]
   16edc:	add	r3, r3, r6
   16ee0:	str	r3, [r9, #28]
   16ee4:	b	16e64 <argp_failure@@Base+0x1524>
   16ee8:	bl	1133c <__stack_chk_fail@plt>
   16eec:	mov	r4, r8
   16ef0:	b	1659c <argp_failure@@Base+0xc5c>

00016ef4 <argp_help@@Base>:
   16ef4:	push	{r4, r5, r6, r7, r8, lr}
   16ef8:	sub	sp, sp, #72	; 0x48
   16efc:	ldr	r4, [pc, #92]	; 16f60 <argp_help@@Base+0x6c>
   16f00:	mov	r5, r0
   16f04:	mov	r8, r3
   16f08:	ldr	ip, [r4]
   16f0c:	mov	r6, r1
   16f10:	mov	r7, r2
   16f14:	mov	r1, #0
   16f18:	mov	r2, #52	; 0x34
   16f1c:	add	r0, sp, #16
   16f20:	str	ip, [sp, #68]	; 0x44
   16f24:	bl	114bc <memset@plt>
   16f28:	mov	r3, r7
   16f2c:	mov	r2, r6
   16f30:	str	r8, [sp]
   16f34:	mov	r0, r5
   16f38:	add	r1, sp, #12
   16f3c:	str	r5, [sp, #12]
   16f40:	bl	15b80 <argp_failure@@Base+0x240>
   16f44:	ldr	r2, [sp, #68]	; 0x44
   16f48:	ldr	r3, [r4]
   16f4c:	cmp	r2, r3
   16f50:	bne	16f5c <argp_help@@Base+0x68>
   16f54:	add	sp, sp, #72	; 0x48
   16f58:	pop	{r4, r5, r6, r7, r8, pc}
   16f5c:	bl	1133c <__stack_chk_fail@plt>
   16f60:	andeq	lr, r2, r8, lsl #30

00016f64 <argp_state_help@@Base>:
   16f64:	push	{r4, r5, lr}
   16f68:	subs	r4, r0, #0
   16f6c:	sub	sp, sp, #12
   16f70:	mov	r5, r2
   16f74:	beq	16fe4 <argp_state_help@@Base+0x80>
   16f78:	ldr	r2, [r4, #16]
   16f7c:	lsr	r3, r2, #1
   16f80:	eor	r3, r3, #1
   16f84:	cmp	r1, #0
   16f88:	moveq	r3, #0
   16f8c:	andne	r3, r3, #1
   16f90:	cmp	r3, #0
   16f94:	bne	16fa0 <argp_state_help@@Base+0x3c>
   16f98:	add	sp, sp, #12
   16f9c:	pop	{r4, r5, pc}
   16fa0:	tst	r2, #64	; 0x40
   16fa4:	ldr	r3, [r4, #40]	; 0x28
   16fa8:	orrne	r5, r5, #128	; 0x80
   16fac:	str	r3, [sp]
   16fb0:	mov	r2, r1
   16fb4:	mov	r3, r5
   16fb8:	ldr	r0, [r4]
   16fbc:	mov	r1, r4
   16fc0:	bl	15b80 <argp_failure@@Base+0x240>
   16fc4:	ldr	r3, [r4, #16]
   16fc8:	tst	r3, #32
   16fcc:	bne	16f98 <argp_state_help@@Base+0x34>
   16fd0:	ands	r0, r5, #256	; 0x100
   16fd4:	bne	1700c <argp_state_help@@Base+0xa8>
   16fd8:	tst	r5, #512	; 0x200
   16fdc:	beq	16f98 <argp_state_help@@Base+0x34>
   16fe0:	bl	1145c <exit@plt>
   16fe4:	cmp	r1, #0
   16fe8:	beq	16f98 <argp_state_help@@Base+0x34>
   16fec:	ldr	r3, [pc, #36]	; 17018 <argp_state_help@@Base+0xb4>
   16ff0:	mov	r2, r1
   16ff4:	mov	r1, r4
   16ff8:	ldr	ip, [r3]
   16ffc:	mov	r3, r5
   17000:	str	ip, [sp]
   17004:	bl	15b80 <argp_failure@@Base+0x240>
   17008:	b	16fd0 <argp_state_help@@Base+0x6c>
   1700c:	ldr	r3, [pc, #8]	; 1701c <argp_state_help@@Base+0xb8>
   17010:	ldr	r0, [r3]
   17014:	bl	1145c <exit@plt>
   17018:	andeq	pc, r2, r0, ror #5
   1701c:	andeq	pc, r2, r0, ror #4

00017020 <argp_error@@Base>:
   17020:	push	{r1, r2, r3}
   17024:	push	{r4, r5, r6, r7, lr}
   17028:	sub	sp, sp, #8
   1702c:	ldr	r5, [pc, #336]	; 17184 <argp_error@@Base+0x164>
   17030:	subs	r6, r0, #0
   17034:	ldr	r7, [sp, #28]
   17038:	ldr	r3, [r5]
   1703c:	str	r3, [sp, #4]
   17040:	beq	17124 <argp_error@@Base+0x104>
   17044:	ldr	r3, [r6, #16]
   17048:	tst	r3, #2
   1704c:	bne	17104 <argp_error@@Base+0xe4>
   17050:	ldr	r4, [r6, #44]	; 0x2c
   17054:	cmp	r4, #0
   17058:	beq	17104 <argp_error@@Base+0xe4>
   1705c:	mov	r0, r4
   17060:	bl	11588 <flockfile@plt>
   17064:	ldr	r0, [r6, #40]	; 0x28
   17068:	add	r3, sp, #32
   1706c:	str	r3, [sp]
   17070:	mov	r1, r4
   17074:	bl	11264 <fputs_unlocked@plt>
   17078:	ldr	r3, [r4, #20]
   1707c:	ldr	r2, [r4, #24]
   17080:	cmp	r3, r2
   17084:	addcc	r1, r3, #1
   17088:	movcc	r2, #58	; 0x3a
   1708c:	strcc	r1, [r4, #20]
   17090:	strbcc	r2, [r3]
   17094:	bcs	17160 <argp_error@@Base+0x140>
   17098:	ldr	r3, [r4, #20]
   1709c:	ldr	r2, [r4, #24]
   170a0:	cmp	r3, r2
   170a4:	addcc	r1, r3, #1
   170a8:	movcc	r2, #32
   170ac:	strcc	r1, [r4, #20]
   170b0:	strbcc	r2, [r3]
   170b4:	bcs	17170 <argp_error@@Base+0x150>
   170b8:	mov	r1, #1
   170bc:	mov	r2, r7
   170c0:	ldr	r3, [sp]
   170c4:	mov	r0, r4
   170c8:	bl	11420 <__vfprintf_chk@plt>
   170cc:	ldr	r3, [r4, #20]
   170d0:	ldr	r2, [r4, #24]
   170d4:	cmp	r3, r2
   170d8:	addcc	r1, r3, #1
   170dc:	movcc	r2, #10
   170e0:	strcc	r1, [r4, #20]
   170e4:	strbcc	r2, [r3]
   170e8:	bcs	17150 <argp_error@@Base+0x130>
   170ec:	mov	r0, r6
   170f0:	mov	r2, #260	; 0x104
   170f4:	mov	r1, r4
   170f8:	bl	16f64 <argp_state_help@@Base>
   170fc:	mov	r0, r4
   17100:	bl	11378 <funlockfile@plt>
   17104:	ldr	r2, [sp, #4]
   17108:	ldr	r3, [r5]
   1710c:	cmp	r2, r3
   17110:	bne	17180 <argp_error@@Base+0x160>
   17114:	add	sp, sp, #8
   17118:	pop	{r4, r5, r6, r7, lr}
   1711c:	add	sp, sp, #12
   17120:	bx	lr
   17124:	ldr	r3, [pc, #92]	; 17188 <argp_error@@Base+0x168>
   17128:	ldr	r4, [r3]
   1712c:	cmp	r4, #0
   17130:	beq	17104 <argp_error@@Base+0xe4>
   17134:	mov	r0, r4
   17138:	bl	11588 <flockfile@plt>
   1713c:	ldr	r3, [pc, #72]	; 1718c <argp_error@@Base+0x16c>
   17140:	add	r2, sp, #32
   17144:	str	r2, [sp]
   17148:	ldr	r0, [r3]
   1714c:	b	17070 <argp_error@@Base+0x50>
   17150:	mov	r1, #10
   17154:	mov	r0, r4
   17158:	bl	11528 <__overflow@plt>
   1715c:	b	170ec <argp_error@@Base+0xcc>
   17160:	mov	r1, #58	; 0x3a
   17164:	mov	r0, r4
   17168:	bl	11528 <__overflow@plt>
   1716c:	b	17098 <argp_error@@Base+0x78>
   17170:	mov	r1, #32
   17174:	mov	r0, r4
   17178:	bl	11528 <__overflow@plt>
   1717c:	b	170b8 <argp_error@@Base+0x98>
   17180:	bl	1133c <__stack_chk_fail@plt>
   17184:	andeq	lr, r2, r8, lsl #30
   17188:	andeq	pc, r2, r8, ror #5
   1718c:	andeq	pc, r2, r0, ror #5
   17190:	ldr	r3, [r0]
   17194:	push	{r4, r5, r6, lr}
   17198:	cmp	r3, #0
   1719c:	ldr	r5, [r0, #16]
   171a0:	beq	17240 <argp_error@@Base+0x220>
   171a4:	ldr	r0, [r1, #8]
   171a8:	mov	r2, #0
   171ac:	add	r0, r0, #1
   171b0:	str	r0, [r1, #8]
   171b4:	b	171bc <argp_error@@Base+0x19c>
   171b8:	add	r2, r2, #1
   171bc:	add	r3, r3, #24
   171c0:	ldr	r0, [r3, #-20]	; 0xffffffec
   171c4:	cmp	r0, #0
   171c8:	bne	171b8 <argp_error@@Base+0x198>
   171cc:	ldr	r0, [r3, #-24]	; 0xffffffe8
   171d0:	cmp	r0, #0
   171d4:	bne	171b8 <argp_error@@Base+0x198>
   171d8:	ldr	r0, [r3, #-8]
   171dc:	cmp	r0, #0
   171e0:	bne	171b8 <argp_error@@Base+0x198>
   171e4:	ldr	r0, [r3, #-4]
   171e8:	cmp	r0, #0
   171ec:	bne	171b8 <argp_error@@Base+0x198>
   171f0:	ldm	r1, {r0, r3}
   171f4:	add	ip, r2, r2, lsl #1
   171f8:	add	r0, r0, ip
   171fc:	add	r2, r3, r2
   17200:	stm	r1, {r0, r2}
   17204:	cmp	r5, #0
   17208:	popeq	{r4, r5, r6, pc}
   1720c:	ldr	r0, [r5]
   17210:	cmp	r0, #0
   17214:	popeq	{r4, r5, r6, pc}
   17218:	mov	r4, r1
   1721c:	mov	r1, r4
   17220:	bl	17190 <argp_error@@Base+0x170>
   17224:	ldr	r3, [r4, #12]
   17228:	ldr	r0, [r5, #16]!
   1722c:	add	r3, r3, #1
   17230:	cmp	r0, #0
   17234:	str	r3, [r4, #12]
   17238:	bne	1721c <argp_error@@Base+0x1fc>
   1723c:	pop	{r4, r5, r6, pc}
   17240:	ldr	r3, [r0, #4]
   17244:	cmp	r3, #0
   17248:	beq	17204 <argp_error@@Base+0x1e4>
   1724c:	ldr	r3, [r1, #8]
   17250:	cmp	r5, #0
   17254:	add	r3, r3, #1
   17258:	str	r3, [r1, #8]
   1725c:	bne	1720c <argp_error@@Base+0x1ec>
   17260:	pop	{r4, r5, r6, pc}
   17264:	cmp	r0, #86	; 0x56
   17268:	beq	17274 <argp_error@@Base+0x254>
   1726c:	mov	r0, #7
   17270:	bx	lr
   17274:	ldr	r3, [pc, #128]	; 172fc <argp_error@@Base+0x2dc>
   17278:	push	{r4, lr}
   1727c:	mov	r4, r2
   17280:	ldr	r3, [r3]
   17284:	cmp	r3, #0
   17288:	beq	172b0 <argp_error@@Base+0x290>
   1728c:	mov	r1, r2
   17290:	ldr	r0, [r2, #48]	; 0x30
   17294:	blx	r3
   17298:	ldr	r0, [r4, #16]
   1729c:	ands	r0, r0, #32
   172a0:	beq	172ac <argp_error@@Base+0x28c>
   172a4:	mov	r0, #0
   172a8:	pop	{r4, pc}
   172ac:	bl	1145c <exit@plt>
   172b0:	ldr	r3, [pc, #72]	; 17300 <argp_error@@Base+0x2e0>
   172b4:	ldr	r3, [r3]
   172b8:	cmp	r3, #0
   172bc:	beq	172d4 <argp_error@@Base+0x2b4>
   172c0:	ldr	r2, [pc, #60]	; 17304 <argp_error@@Base+0x2e4>
   172c4:	mov	r1, #1
   172c8:	ldr	r0, [r4, #48]	; 0x30
   172cc:	bl	114ec <__fprintf_chk@plt>
   172d0:	b	17298 <argp_error@@Base+0x278>
   172d4:	ldr	r3, [r2]
   172d8:	ldr	r1, [pc, #40]	; 17308 <argp_error@@Base+0x2e8>
   172dc:	mov	r2, #5
   172e0:	ldr	r0, [r3, #24]
   172e4:	bl	11330 <dcgettext@plt>
   172e8:	ldr	r1, [pc, #28]	; 1730c <argp_error@@Base+0x2ec>
   172ec:	mov	r2, r0
   172f0:	mov	r0, r4
   172f4:	bl	17020 <argp_error@@Base>
   172f8:	b	17298 <argp_error@@Base+0x278>
   172fc:	andeq	pc, r2, r4, lsl #6
   17300:	andeq	pc, r2, r4, lsl #9
   17304:	andeq	sp, r1, r8, asr #2
   17308:	andeq	sp, r1, r0, asr #19
   1730c:	andeq	sp, r1, ip, asr r3
   17310:	cmn	r0, #3
   17314:	push	{r4, lr}
   17318:	mov	r4, r2
   1731c:	sub	sp, sp, #8
   17320:	beq	173f8 <argp_error@@Base+0x3d8>
   17324:	ble	17354 <argp_error@@Base+0x334>
   17328:	cmn	r0, #2
   1732c:	beq	173b4 <argp_error@@Base+0x394>
   17330:	cmp	r0, #63	; 0x3f
   17334:	bne	173a8 <argp_error@@Base+0x388>
   17338:	mov	r0, r4
   1733c:	ldr	r2, [pc, #208]	; 17414 <argp_error@@Base+0x3f4>
   17340:	ldr	r1, [r4, #48]	; 0x30
   17344:	bl	16f64 <argp_state_help@@Base>
   17348:	mov	r0, #0
   1734c:	add	sp, sp, #8
   17350:	pop	{r4, pc}
   17354:	cmn	r0, #4
   17358:	bne	173a8 <argp_error@@Base+0x388>
   1735c:	cmp	r1, #0
   17360:	ldr	r0, [pc, #176]	; 17418 <argp_error@@Base+0x3f8>
   17364:	mov	r2, #10
   17368:	movne	r0, r1
   1736c:	mov	r1, #0
   17370:	bl	11288 <strtol@plt>
   17374:	ldr	r4, [pc, #160]	; 1741c <argp_error@@Base+0x3fc>
   17378:	str	r0, [r4]
   1737c:	b	17388 <argp_error@@Base+0x368>
   17380:	mov	r0, #1
   17384:	bl	11324 <sleep@plt>
   17388:	ldr	r3, [r4]
   1738c:	cmp	r3, #0
   17390:	sub	r3, r3, #1
   17394:	str	r3, [r4]
   17398:	bgt	17380 <argp_error@@Base+0x360>
   1739c:	mov	r0, #0
   173a0:	add	sp, sp, #8
   173a4:	pop	{r4, pc}
   173a8:	mov	r0, #7
   173ac:	add	sp, sp, #8
   173b0:	pop	{r4, pc}
   173b4:	ldr	r3, [pc, #100]	; 17420 <argp_error@@Base+0x400>
   173b8:	mov	r0, r1
   173bc:	str	r1, [sp, #4]
   173c0:	str	r1, [r3]
   173c4:	bl	185e4 <argp_parse@@Base+0xed0>
   173c8:	ldr	r3, [r4, #16]
   173cc:	ldr	r2, [pc, #80]	; 17424 <argp_error@@Base+0x404>
   173d0:	and	r3, r3, #3
   173d4:	cmp	r3, #1
   173d8:	ldr	r1, [sp, #4]
   173dc:	str	r0, [r4, #40]	; 0x28
   173e0:	str	r0, [r2]
   173e4:	bne	1739c <argp_error@@Base+0x37c>
   173e8:	ldr	r3, [r4, #8]
   173ec:	mov	r0, #0
   173f0:	str	r1, [r3]
   173f4:	b	1734c <argp_error@@Base+0x32c>
   173f8:	mov	r0, r4
   173fc:	ldr	r2, [pc, #36]	; 17428 <argp_error@@Base+0x408>
   17400:	ldr	r1, [r4, #48]	; 0x30
   17404:	bl	16f64 <argp_state_help@@Base>
   17408:	mov	r0, #0
   1740c:	add	sp, sp, #8
   17410:	pop	{r4, pc}
   17414:	andeq	r0, r0, sl, ror r2
   17418:	andeq	sp, r1, r4, ror #19
   1741c:	andeq	pc, r2, r0, lsl #6
   17420:	andeq	pc, r2, r4, ror #5
   17424:	andeq	pc, r2, r0, ror #5
   17428:	andeq	r0, r0, r1, lsl #4
   1742c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17430:	sub	sp, sp, #36	; 0x24
   17434:	ldr	r7, [r0]
   17438:	str	r3, [sp, #12]
   1743c:	ldr	r3, [r0, #16]
   17440:	cmp	r7, #0
   17444:	strd	r0, [sp, #20]
   17448:	str	r2, [sp, #28]
   1744c:	str	r3, [sp, #16]
   17450:	ldr	r6, [sp, #72]	; 0x48
   17454:	beq	176ec <argp_error@@Base+0x6cc>
   17458:	ldr	r9, [r6, #4]
   1745c:	mov	r4, r7
   17460:	mov	fp, r7
   17464:	ldr	r7, [r4, #4]
   17468:	cmp	r7, #0
   1746c:	bne	1747c <argp_error@@Base+0x45c>
   17470:	ldr	r3, [r4]
   17474:	cmp	r3, #0
   17478:	beq	175f8 <argp_error@@Base+0x5d8>
   1747c:	ldr	r1, [r4, #12]
   17480:	tst	r1, #4
   17484:	moveq	r3, r1
   17488:	moveq	fp, r4
   1748c:	ldrne	r3, [fp, #12]
   17490:	ands	r5, r3, #8
   17494:	bne	175e0 <argp_error@@Base+0x5c0>
   17498:	tst	r1, #8
   1749c:	bne	17518 <argp_error@@Base+0x4f8>
   174a0:	sub	r3, r7, #1
   174a4:	cmp	r3, #254	; 0xfe
   174a8:	bhi	17518 <argp_error@@Base+0x4f8>
   174ac:	bl	11450 <__ctype_b_loc@plt>
   174b0:	lsl	r3, r7, #1
   174b4:	ldr	r1, [r0]
   174b8:	ldrh	r3, [r1, r3]
   174bc:	tst	r3, #16384	; 0x4000
   174c0:	beq	17518 <argp_error@@Base+0x4f8>
   174c4:	add	r3, r9, #1
   174c8:	str	r3, [r6, #4]
   174cc:	strb	r7, [r9]
   174d0:	ldr	r3, [fp, #8]
   174d4:	cmp	r3, #0
   174d8:	beq	17508 <argp_error@@Base+0x4e8>
   174dc:	ldr	r3, [r6, #4]
   174e0:	mov	r2, #58	; 0x3a
   174e4:	add	r1, r3, #1
   174e8:	str	r1, [r6, #4]
   174ec:	strb	r2, [r3]
   174f0:	ldr	r3, [fp, #12]
   174f4:	tst	r3, #1
   174f8:	ldrne	r3, [r6, #4]
   174fc:	addne	r1, r3, #1
   17500:	strne	r1, [r6, #4]
   17504:	strbne	r2, [r3]
   17508:	ldr	r3, [r6, #4]
   1750c:	mov	r2, #0
   17510:	strb	r2, [r3]
   17514:	ldr	r9, [r6, #4]
   17518:	ldr	r7, [r4]
   1751c:	cmp	r7, #0
   17520:	beq	175e0 <argp_error@@Base+0x5c0>
   17524:	ldr	r3, [r6]
   17528:	str	r3, [sp, #8]
   1752c:	ldr	sl, [r3, #8]
   17530:	ldr	r0, [sl]
   17534:	cmp	r0, #0
   17538:	beq	1755c <argp_error@@Base+0x53c>
   1753c:	mov	r8, sl
   17540:	mov	r1, r7
   17544:	bl	1127c <strcmp@plt>
   17548:	cmp	r0, #0
   1754c:	beq	175e8 <argp_error@@Base+0x5c8>
   17550:	ldr	r0, [r8, #16]!
   17554:	cmp	r0, #0
   17558:	bne	17540 <argp_error@@Base+0x520>
   1755c:	ldr	r0, [fp, #8]
   17560:	ldr	r1, [r6, #8]
   17564:	cmp	r0, #0
   17568:	str	r7, [r1]
   1756c:	beq	17580 <argp_error@@Base+0x560>
   17570:	ldr	r3, [fp, #12]
   17574:	tst	r3, #1
   17578:	movne	r5, #2
   1757c:	moveq	r5, #1
   17580:	str	r5, [r1, #4]
   17584:	ldr	ip, [r4, #4]
   17588:	mov	r3, #0
   1758c:	cmp	ip, r3
   17590:	str	r3, [r1, #8]
   17594:	ldr	r3, [sp, #8]
   17598:	ldr	r2, [sp, #12]
   1759c:	ldreq	ip, [fp, #4]
   175a0:	ldr	r3, [r3, #52]	; 0x34
   175a4:	bic	ip, ip, #-16777216	; 0xff000000
   175a8:	sub	r3, r2, r3
   175ac:	add	lr, r1, #16
   175b0:	asr	r3, r3, #2
   175b4:	rsb	r0, r3, r3, lsl #3
   175b8:	add	r0, r0, r0, lsl #6
   175bc:	add	r0, r3, r0, lsl #3
   175c0:	rsb	r0, r0, r0, lsl #15
   175c4:	add	r3, r3, r0, lsl #3
   175c8:	add	r3, r3, #1
   175cc:	add	r3, ip, r3, lsl #24
   175d0:	str	r3, [r1, #12]
   175d4:	mov	r3, #0
   175d8:	str	lr, [r6, #8]
   175dc:	str	r3, [r1, #16]
   175e0:	add	r4, r4, #24
   175e4:	b	17464 <argp_error@@Base+0x444>
   175e8:	sub	r8, r8, sl
   175ec:	cmp	r8, #0
   175f0:	bge	175e0 <argp_error@@Base+0x5c0>
   175f4:	b	1755c <argp_error@@Base+0x53c>
   175f8:	ldr	r3, [r4, #16]
   175fc:	cmp	r3, #0
   17600:	bne	1747c <argp_error@@Base+0x45c>
   17604:	ldr	r3, [r4, #20]
   17608:	cmp	r3, #0
   1760c:	bne	1747c <argp_error@@Base+0x45c>
   17610:	ldr	r3, [sp, #20]
   17614:	ldr	r2, [r3, #4]
   17618:	ldr	r1, [sp, #12]
   1761c:	ldr	r0, [sp, #16]
   17620:	mov	r3, #0
   17624:	str	r2, [r1]
   17628:	mov	r2, r1
   1762c:	ldr	r1, [sp, #20]
   17630:	cmp	r0, #0
   17634:	str	r3, [r2, #12]
   17638:	stmib	r2, {r1, r9}
   1763c:	ldr	r1, [sp, #24]
   17640:	str	r3, [r2, #24]
   17644:	str	r1, [r2, #16]
   17648:	ldr	r1, [sp, #28]
   1764c:	str	r3, [r2, #32]
   17650:	str	r1, [r2, #20]
   17654:	str	r3, [r2, #28]
   17658:	beq	17694 <argp_error@@Base+0x674>
   1765c:	ldr	r2, [r0]
   17660:	cmp	r2, r3
   17664:	beq	1770c <argp_error@@Base+0x6ec>
   17668:	mov	r1, r0
   1766c:	add	r3, r3, #1
   17670:	ldr	r2, [r1, r3, lsl #4]
   17674:	cmp	r2, #0
   17678:	bne	1766c <argp_error@@Base+0x64c>
   1767c:	lsl	r3, r3, #2
   17680:	ldr	r2, [r6, #12]
   17684:	ldr	r1, [sp, #12]
   17688:	add	r3, r2, r3
   1768c:	str	r2, [r1, #28]
   17690:	str	r3, [r6, #12]
   17694:	ldr	r3, [sp, #12]
   17698:	add	r0, r3, #36	; 0x24
   1769c:	ldr	r5, [sp, #16]
   176a0:	cmp	r5, #0
   176a4:	beq	176e4 <argp_error@@Base+0x6c4>
   176a8:	ldr	r1, [r5]
   176ac:	cmp	r1, #0
   176b0:	beq	176e4 <argp_error@@Base+0x6c4>
   176b4:	ldr	r7, [sp, #12]
   176b8:	mov	r2, #0
   176bc:	add	r4, r2, #1
   176c0:	mov	r3, r0
   176c4:	str	r6, [sp]
   176c8:	mov	r0, r1
   176cc:	mov	r1, r7
   176d0:	bl	1742c <argp_error@@Base+0x40c>
   176d4:	ldr	r1, [r5, r4, lsl #4]
   176d8:	mov	r2, r4
   176dc:	cmp	r1, #0
   176e0:	bne	176bc <argp_error@@Base+0x69c>
   176e4:	add	sp, sp, #36	; 0x24
   176e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176ec:	ldr	r3, [sp, #20]
   176f0:	ldr	r2, [r3, #4]
   176f4:	cmp	r2, #0
   176f8:	ldrne	r9, [r6, #4]
   176fc:	bne	17618 <argp_error@@Base+0x5f8>
   17700:	ldr	r0, [sp, #12]
   17704:	str	r2, [sp, #12]
   17708:	b	1769c <argp_error@@Base+0x67c>
   1770c:	mov	r3, r2
   17710:	b	17680 <argp_error@@Base+0x660>

00017714 <argp_parse@@Base>:
   17714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17718:	tst	r3, #1
   1771c:	mov	r6, r3
   17720:	ldr	r3, [pc, #3508]	; 184dc <argp_parse@@Base+0xdc8>
   17724:	add	fp, sp, #32
   17728:	sub	sp, sp, #244	; 0xf4
   1772c:	ldr	r3, [r3]
   17730:	mov	r8, r0
   17734:	str	r3, [fp, #-40]	; 0xffffffd8
   17738:	ldr	r3, [fp, #4]
   1773c:	str	r1, [fp, #-256]	; 0xffffff00
   17740:	str	r3, [fp, #-264]	; 0xfffffef8
   17744:	ldr	r3, [fp, #8]
   17748:	str	r2, [fp, #-252]	; 0xffffff04
   1774c:	str	r3, [fp, #-260]	; 0xfffffefc
   17750:	bne	1777c <argp_parse@@Base+0x68>
   17754:	ldr	r3, [pc, #3460]	; 184e0 <argp_parse@@Base+0xdcc>
   17758:	ldr	r4, [pc, #3460]	; 184e4 <argp_parse@@Base+0xdd0>
   1775c:	ldr	r2, [r3]
   17760:	cmp	r2, #0
   17764:	ldreq	r2, [fp, #-252]	; 0xffffff04
   17768:	ldreq	r2, [r2]
   1776c:	streq	r2, [r3]
   17770:	ldr	r3, [r4]
   17774:	cmp	r3, #0
   17778:	beq	18124 <argp_parse@@Base+0xa10>
   1777c:	ands	r3, r6, #4
   17780:	moveq	r7, #1
   17784:	movne	r7, #0
   17788:	ands	ip, r6, #16
   1778c:	str	r3, [fp, #-248]	; 0xffffff08
   17790:	beq	177dc <argp_parse@@Base+0xc8>
   17794:	sub	r4, fp, #208	; 0xd0
   17798:	mov	r0, r4
   1779c:	mov	r2, #40	; 0x28
   177a0:	mov	r1, #0
   177a4:	bl	114bc <memset@plt>
   177a8:	mov	r3, #0
   177ac:	cmp	r8, #0
   177b0:	str	r7, [fp, #-240]	; 0xffffff10
   177b4:	str	r3, [fp, #-236]	; 0xffffff14
   177b8:	str	r3, [fp, #-232]	; 0xffffff18
   177bc:	str	r3, [fp, #-228]	; 0xffffff1c
   177c0:	bne	17878 <argp_parse@@Base+0x164>
   177c4:	mov	r9, #36	; 0x24
   177c8:	mov	r3, #52	; 0x34
   177cc:	mov	r5, r9
   177d0:	str	r3, [fp, #-248]	; 0xffffff08
   177d4:	mov	sl, r8
   177d8:	b	178b4 <argp_parse@@Base+0x1a0>
   177dc:	sub	sp, sp, #64	; 0x40
   177e0:	add	r3, sp, #8
   177e4:	sub	sp, sp, #32
   177e8:	add	r5, sp, #8
   177ec:	mov	r1, ip
   177f0:	mov	r0, r3
   177f4:	mov	r2, #64	; 0x40
   177f8:	str	r3, [r5, #16]
   177fc:	str	ip, [r5]
   17800:	str	ip, [r5, #4]
   17804:	str	ip, [r5, #8]
   17808:	str	ip, [r5, #12]
   1780c:	str	ip, [r5, #20]
   17810:	str	ip, [r5, #24]
   17814:	bl	114bc <memset@plt>
   17818:	ldr	r2, [pc, #3272]	; 184e8 <argp_parse@@Base+0xdd4>
   1781c:	cmp	r8, #0
   17820:	ldr	r1, [pc, #3268]	; 184ec <argp_parse@@Base+0xdd8>
   17824:	ldr	r2, [r2]
   17828:	mov	r3, r0
   1782c:	strne	r8, [r3], #16
   17830:	cmp	r2, #0
   17834:	str	r1, [r3]
   17838:	beq	18280 <argp_parse@@Base+0xb6c>
   1783c:	ldr	r2, [pc, #3244]	; 184f0 <argp_parse@@Base+0xddc>
   17840:	add	ip, r3, #32
   17844:	str	r2, [r3, #16]
   17848:	mov	r9, #0
   1784c:	sub	r4, fp, #208	; 0xd0
   17850:	mov	r8, r5
   17854:	mov	r1, r9
   17858:	mov	r0, r4
   1785c:	mov	r2, #40	; 0x28
   17860:	str	r9, [ip]
   17864:	bl	114bc <memset@plt>
   17868:	str	r9, [fp, #-236]	; 0xffffff14
   1786c:	str	r9, [fp, #-232]	; 0xffffff18
   17870:	str	r9, [fp, #-228]	; 0xffffff1c
   17874:	str	r7, [fp, #-240]	; 0xffffff10
   17878:	sub	r1, fp, #240	; 0xf0
   1787c:	mov	r0, r8
   17880:	bl	17190 <argp_error@@Base+0x170>
   17884:	ldr	r5, [fp, #-232]	; 0xffffff18
   17888:	ldr	sl, [fp, #-228]	; 0xffffff1c
   1788c:	add	r5, r5, #1
   17890:	ldr	r3, [fp, #-236]	; 0xffffff14
   17894:	add	r5, r5, r5, lsl #3
   17898:	lsl	sl, sl, #2
   1789c:	lsl	r5, r5, #2
   178a0:	add	r3, r3, #1
   178a4:	ldr	r7, [fp, #-240]	; 0xffffff10
   178a8:	add	r9, r5, sl
   178ac:	add	r3, r9, r3, lsl #4
   178b0:	str	r3, [fp, #-248]	; 0xffffff08
   178b4:	ldr	r3, [fp, #-248]	; 0xffffff08
   178b8:	add	r0, r7, r3
   178bc:	add	r0, r0, #1
   178c0:	bl	113fc <malloc@plt>
   178c4:	cmp	r0, #0
   178c8:	mov	r7, r0
   178cc:	str	r0, [fp, #-44]	; 0xffffffd4
   178d0:	moveq	r5, #12
   178d4:	beq	17cd4 <argp_parse@@Base+0x5c0>
   178d8:	mov	lr, r4
   178dc:	mov	r3, #1
   178e0:	str	r3, [fp, #-208]	; 0xffffff30
   178e4:	str	r3, [fp, #-204]	; 0xffffff34
   178e8:	ldm	lr!, {r0, r1, r2, r3}
   178ec:	sub	ip, fp, #156	; 0x9c
   178f0:	add	r4, r7, r9
   178f4:	ldr	r9, [fp, #-248]	; 0xffffff08
   178f8:	stmia	ip!, {r0, r1, r2, r3}
   178fc:	add	r5, r7, r5
   17900:	ldm	lr!, {r0, r1, r2, r3}
   17904:	add	r9, r7, r9
   17908:	str	r5, [fp, #-108]	; 0xffffff94
   1790c:	str	r4, [fp, #-160]	; 0xffffff60
   17910:	stmia	ip!, {r0, r1, r2, r3}
   17914:	mov	r2, sl
   17918:	ldm	lr, {r0, r1}
   1791c:	str	r7, [fp, #-116]	; 0xffffff8c
   17920:	str	r9, [fp, #-164]	; 0xffffff5c
   17924:	stm	ip, {r0, r1}
   17928:	mov	r0, r5
   1792c:	mov	r1, #0
   17930:	bl	114bc <memset@plt>
   17934:	sub	sl, fp, #168	; 0xa8
   17938:	tst	r6, #8
   1793c:	str	r4, [fp, #-216]	; 0xffffff28
   17940:	str	r9, [fp, #-220]	; 0xffffff24
   17944:	str	r5, [fp, #-212]	; 0xffffff2c
   17948:	str	sl, [fp, #-224]	; 0xffffff20
   1794c:	bne	17cf4 <argp_parse@@Base+0x5e0>
   17950:	ands	r3, r6, #4
   17954:	cmp	r3, #0
   17958:	moveq	r3, r9
   1795c:	addne	r3, r9, #1
   17960:	movne	r2, #43	; 0x2b
   17964:	strne	r3, [fp, #-220]	; 0xffffff24
   17968:	strbne	r2, [r9]
   1796c:	ldr	r2, [fp, #-216]	; 0xffffff28
   17970:	mov	r4, #0
   17974:	cmp	r8, #0
   17978:	strb	r4, [r3]
   1797c:	str	r4, [r2]
   17980:	str	r8, [fp, #-168]	; 0xffffff58
   17984:	beq	17f34 <argp_parse@@Base+0x820>
   17988:	sub	r3, fp, #224	; 0xe0
   1798c:	mov	r2, r4
   17990:	mov	r1, r4
   17994:	str	r3, [sp]
   17998:	mov	r0, r8
   1799c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   179a0:	bl	1742c <argp_error@@Base+0x40c>
   179a4:	mov	r1, r4
   179a8:	mov	r2, #32
   179ac:	ldr	r7, [fp, #-168]	; 0xffffff58
   179b0:	ldr	r4, [fp, #-116]	; 0xffffff8c
   179b4:	mov	r5, r0
   179b8:	sub	r0, fp, #88	; 0x58
   179bc:	str	r5, [fp, #-112]	; 0xffffff90
   179c0:	bl	114bc <memset@plt>
   179c4:	ldr	r2, [pc, #2856]	; 184f4 <argp_parse@@Base+0xde0>
   179c8:	ldr	r3, [pc, #2856]	; 184f8 <argp_parse@@Base+0xde4>
   179cc:	ldr	r0, [fp, #-256]	; 0xffffff00
   179d0:	ldr	r1, [r2]
   179d4:	str	r0, [fp, #-96]	; 0xffffffa0
   179d8:	ldr	r2, [r3]
   179dc:	ldr	r0, [fp, #-252]	; 0xffffff04
   179e0:	mov	r3, #1
   179e4:	cmp	r5, r4
   179e8:	str	r7, [fp, #-100]	; 0xffffff9c
   179ec:	str	r0, [fp, #-92]	; 0xffffffa4
   179f0:	str	r6, [fp, #-84]	; 0xffffffac
   179f4:	str	sl, [fp, #-48]	; 0xffffffd0
   179f8:	str	r1, [fp, #-56]	; 0xffffffc8
   179fc:	str	r2, [fp, #-52]	; 0xffffffcc
   17a00:	str	r3, [fp, #-104]	; 0xffffff98
   17a04:	bls	17f88 <argp_parse@@Base+0x874>
   17a08:	ldr	r3, [fp, #-260]	; 0xfffffefc
   17a0c:	add	r4, r4, #36	; 0x24
   17a10:	str	r3, [r4, #-12]
   17a14:	ldr	r6, [pc, #2784]	; 184fc <argp_parse@@Base+0xde8>
   17a18:	b	17a70 <argp_parse@@Base+0x35c>
   17a1c:	ldr	r2, [r4, #-4]
   17a20:	ldr	r0, [r4, #-24]	; 0xffffffe8
   17a24:	str	r2, [fp, #-64]	; 0xffffffc0
   17a28:	ldr	r1, [r4, #-12]
   17a2c:	sub	r2, fp, #100	; 0x64
   17a30:	str	r1, [fp, #-72]	; 0xffffffb8
   17a34:	ldr	ip, [r4, #-8]
   17a38:	mov	r1, #0
   17a3c:	str	r0, [fp, #-80]	; 0xffffffb0
   17a40:	str	ip, [fp, #-68]	; 0xffffffbc
   17a44:	mov	r0, r6
   17a48:	blx	r3
   17a4c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17a50:	str	r3, [r4, #-4]
   17a54:	ldr	r3, [fp, #-112]	; 0xffffff90
   17a58:	cmp	r3, r4
   17a5c:	bls	17fd4 <argp_parse@@Base+0x8c0>
   17a60:	cmp	r0, #7
   17a64:	cmpne	r0, #0
   17a68:	bne	17fc4 <argp_parse@@Base+0x8b0>
   17a6c:	add	r4, r4, #36	; 0x24
   17a70:	ldr	r3, [r4, #-20]	; 0xffffffec
   17a74:	cmp	r3, #0
   17a78:	ldrne	r3, [r3, #28]
   17a7c:	ldrne	r2, [r4, #-16]
   17a80:	ldrne	r3, [r3, r2, lsl #2]
   17a84:	strne	r3, [r4, #-12]
   17a88:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17a8c:	cmp	r3, #0
   17a90:	bne	17a1c <argp_parse@@Base+0x308>
   17a94:	ldr	r3, [r4, #-32]	; 0xffffffe0
   17a98:	ldr	r3, [r3, #16]
   17a9c:	cmp	r3, #0
   17aa0:	beq	17ac4 <argp_parse@@Base+0x3b0>
   17aa4:	ldr	r3, [r3]
   17aa8:	cmp	r3, #0
   17aac:	beq	17ac4 <argp_parse@@Base+0x3b0>
   17ab0:	ldrd	r2, [r4, #-12]
   17ab4:	str	r2, [r3]
   17ab8:	ldr	r3, [r4, #-36]	; 0xffffffdc
   17abc:	cmp	r3, #0
   17ac0:	bne	17a1c <argp_parse@@Base+0x308>
   17ac4:	ldr	r3, [fp, #-112]	; 0xffffff90
   17ac8:	cmp	r4, r3
   17acc:	bcc	17a6c <argp_parse@@Base+0x358>
   17ad0:	ldr	r6, [fp, #-84]	; 0xffffffac
   17ad4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ad8:	tst	r6, #2
   17adc:	beq	17f94 <argp_parse@@Base+0x880>
   17ae0:	mov	r2, #0
   17ae4:	ldr	r4, [fp, #-96]	; 0xffffffa0
   17ae8:	tst	r6, #1
   17aec:	str	r2, [fp, #-152]	; 0xffffff68
   17af0:	ldr	r2, [fp, #-252]	; 0xffffff04
   17af4:	subne	r3, r3, #4
   17af8:	addne	r4, r4, #1
   17afc:	strne	r3, [fp, #-92]	; 0xffffffa4
   17b00:	strne	r4, [fp, #-96]	; 0xffffffa0
   17b04:	cmp	r2, r3
   17b08:	beq	17fac <argp_parse@@Base+0x898>
   17b0c:	ldr	r3, [pc, #2512]	; 184e4 <argp_parse@@Base+0xdd0>
   17b10:	ldr	r3, [r3]
   17b14:	str	r3, [fp, #-60]	; 0xffffffc4
   17b18:	ldr	r7, [fp, #-88]	; 0xffffffa8
   17b1c:	ldr	r2, [fp, #-104]	; 0xffffff98
   17b20:	ldr	r9, [pc, #2520]	; 18500 <argp_parse@@Base+0xdec>
   17b24:	mov	r0, r4
   17b28:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17b2c:	cmp	r3, #0
   17b30:	beq	17d84 <argp_parse@@Base+0x670>
   17b34:	cmp	r3, r7
   17b38:	movgt	r3, #0
   17b3c:	strgt	r3, [fp, #-76]	; 0xffffffb4
   17b40:	bgt	17d84 <argp_parse@@Base+0x670>
   17b44:	cmp	r7, r0
   17b48:	bge	17e04 <argp_parse@@Base+0x6f0>
   17b4c:	ldr	r3, [fp, #-84]	; 0xffffffac
   17b50:	tst	r3, #4
   17b54:	bne	17fec <argp_parse@@Base+0x8d8>
   17b58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17b5c:	ldr	sl, [r3, r7, lsl #2]
   17b60:	str	sl, [fp, #-144]	; 0xffffff70
   17b64:	ldr	r8, [fp, #-116]	; 0xffffff8c
   17b68:	ldr	r2, [fp, #-112]	; 0xffffff90
   17b6c:	str	r7, [fp, #-88]	; 0xffffffa8
   17b70:	cmp	r8, r2
   17b74:	bcs	17dfc <argp_parse@@Base+0x6e8>
   17b78:	mov	r3, r7
   17b7c:	add	r4, r8, #36	; 0x24
   17b80:	ldr	r6, [r4, #-36]	; 0xffffffdc
   17b84:	add	r1, r3, #1
   17b88:	cmp	r6, #0
   17b8c:	str	r1, [fp, #-88]	; 0xffffffa8
   17b90:	sub	r5, r4, #36	; 0x24
   17b94:	mov	r8, r4
   17b98:	beq	17dec <argp_parse@@Base+0x6d8>
   17b9c:	ldr	r3, [r4, #-4]
   17ba0:	ldr	r1, [r4, #-24]	; 0xffffffe8
   17ba4:	str	r3, [fp, #-64]	; 0xffffffc0
   17ba8:	ldr	r3, [r4, #-12]
   17bac:	sub	r2, fp, #100	; 0x64
   17bb0:	str	r3, [fp, #-72]	; 0xffffffb8
   17bb4:	ldr	r3, [r4, #-8]
   17bb8:	mov	r0, #0
   17bbc:	str	r1, [fp, #-80]	; 0xffffffb0
   17bc0:	str	r3, [fp, #-68]	; 0xffffffbc
   17bc4:	mov	r1, sl
   17bc8:	blx	r6
   17bcc:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17bd0:	str	r3, [r4, #-4]
   17bd4:	cmp	r0, #7
   17bd8:	beq	17d0c <argp_parse@@Base+0x5f8>
   17bdc:	cmp	r0, #0
   17be0:	beq	17ea8 <argp_parse@@Base+0x794>
   17be4:	mov	r5, r0
   17be8:	cmp	r5, #7
   17bec:	beq	18138 <argp_parse@@Base+0xa24>
   17bf0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17bf4:	ldr	r2, [fp, #-112]	; 0xffffff90
   17bf8:	cmp	r2, r3
   17bfc:	mov	r4, r3
   17c00:	bls	1844c <argp_parse@@Base+0xd38>
   17c04:	ldr	r6, [pc, #2296]	; 18504 <argp_parse@@Base+0xdf0>
   17c08:	ldr	r3, [r4]
   17c0c:	cmp	r3, #0
   17c10:	beq	17c50 <argp_parse@@Base+0x53c>
   17c14:	ldr	r2, [r4, #32]
   17c18:	ldr	r0, [r4, #12]
   17c1c:	str	r2, [fp, #-64]	; 0xffffffc0
   17c20:	ldr	r1, [r4, #24]
   17c24:	sub	r2, fp, #100	; 0x64
   17c28:	str	r1, [fp, #-72]	; 0xffffffb8
   17c2c:	ldr	ip, [r4, #28]
   17c30:	mov	r1, #0
   17c34:	str	r0, [fp, #-80]	; 0xffffffb0
   17c38:	str	ip, [fp, #-68]	; 0xffffffbc
   17c3c:	mov	r0, r6
   17c40:	blx	r3
   17c44:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17c48:	str	r3, [r4, #32]
   17c4c:	ldr	r2, [fp, #-112]	; 0xffffff90
   17c50:	add	r4, r4, #36	; 0x24
   17c54:	cmp	r4, r2
   17c58:	bcc	17c08 <argp_parse@@Base+0x4f4>
   17c5c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17c60:	sub	r4, r2, #36	; 0x24
   17c64:	cmp	r3, r4
   17c68:	bhi	17cc4 <argp_parse@@Base+0x5b0>
   17c6c:	ldr	r7, [pc, #2196]	; 18508 <argp_parse@@Base+0xdf4>
   17c70:	ldr	r6, [r4]
   17c74:	cmp	r6, #0
   17c78:	beq	17cb8 <argp_parse@@Base+0x5a4>
   17c7c:	ldr	r2, [r4, #32]
   17c80:	ldr	r3, [r4, #12]
   17c84:	str	r2, [fp, #-64]	; 0xffffffc0
   17c88:	ldr	r1, [r4, #24]
   17c8c:	sub	r2, fp, #100	; 0x64
   17c90:	str	r1, [fp, #-72]	; 0xffffffb8
   17c94:	ldr	r0, [r4, #28]
   17c98:	mov	r1, #0
   17c9c:	str	r0, [fp, #-68]	; 0xffffffbc
   17ca0:	str	r3, [fp, #-80]	; 0xffffffb0
   17ca4:	mov	r0, r7
   17ca8:	blx	r6
   17cac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17cb0:	str	r3, [r4, #32]
   17cb4:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17cb8:	sub	r4, r4, #36	; 0x24
   17cbc:	cmp	r4, r3
   17cc0:	bcs	17c70 <argp_parse@@Base+0x55c>
   17cc4:	cmp	r5, #7
   17cc8:	moveq	r5, #22
   17ccc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17cd0:	bl	112c4 <free@plt>
   17cd4:	ldr	r3, [pc, #2048]	; 184dc <argp_parse@@Base+0xdc8>
   17cd8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17cdc:	mov	r0, r5
   17ce0:	ldr	r3, [r3]
   17ce4:	cmp	r2, r3
   17ce8:	bne	184a8 <argp_parse@@Base+0xd94>
   17cec:	sub	sp, fp, #32
   17cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cf4:	add	r3, r9, #1
   17cf8:	ldr	r9, [fp, #-248]	; 0xffffff08
   17cfc:	mov	r2, #45	; 0x2d
   17d00:	str	r3, [fp, #-220]	; 0xffffff24
   17d04:	strb	r2, [r7, r9]
   17d08:	b	1796c <argp_parse@@Base+0x258>
   17d0c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17d10:	ldr	r6, [r4, #-36]	; 0xffffffdc
   17d14:	sub	r3, r3, #1
   17d18:	cmp	r6, #0
   17d1c:	str	r3, [fp, #-88]	; 0xffffffa8
   17d20:	beq	184ac <argp_parse@@Base+0xd98>
   17d24:	ldr	r0, [r5, #32]
   17d28:	ldr	r1, [r5, #24]
   17d2c:	ldr	r2, [r5, #28]
   17d30:	ldr	r3, [r5, #12]
   17d34:	str	r0, [fp, #-64]	; 0xffffffc0
   17d38:	str	r1, [fp, #-72]	; 0xffffffb8
   17d3c:	str	r2, [fp, #-68]	; 0xffffffbc
   17d40:	mov	r1, #0
   17d44:	str	r3, [fp, #-80]	; 0xffffffb0
   17d48:	sub	r2, fp, #100	; 0x64
   17d4c:	mov	r0, r9
   17d50:	blx	r6
   17d54:	ldr	r2, [fp, #-112]	; 0xffffff90
   17d58:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17d5c:	cmp	r4, r2
   17d60:	movcs	r1, #0
   17d64:	movcc	r1, #1
   17d68:	str	r3, [r5, #32]
   17d6c:	cmp	r0, #7
   17d70:	movne	r1, #0
   17d74:	cmp	r1, #0
   17d78:	beq	184b4 <argp_parse@@Base+0xda0>
   17d7c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17d80:	b	17b7c <argp_parse@@Base+0x468>
   17d84:	cmp	r2, #0
   17d88:	beq	17b44 <argp_parse@@Base+0x430>
   17d8c:	ldr	r3, [fp, #-84]	; 0xffffffac
   17d90:	str	r7, [fp, #-156]	; 0xffffff64
   17d94:	ands	ip, r3, #64	; 0x40
   17d98:	mvn	r3, #0
   17d9c:	str	r3, [fp, #-148]	; 0xffffff6c
   17da0:	ldr	r1, [fp, #-92]	; 0xffffffa4
   17da4:	ldrd	r2, [fp, #-164]	; 0xffffff5c
   17da8:	beq	17edc <argp_parse@@Base+0x7c8>
   17dac:	mov	ip, #0
   17db0:	sub	lr, fp, #156	; 0x9c
   17db4:	stm	sp, {ip, lr}
   17db8:	bl	1ac80 <argp_parse@@Base+0x356c>
   17dbc:	ldr	r7, [fp, #-156]	; 0xffffff64
   17dc0:	str	r7, [fp, #-88]	; 0xffffffa8
   17dc4:	mov	r4, r0
   17dc8:	cmn	r4, #1
   17dcc:	beq	17efc <argp_parse@@Base+0x7e8>
   17dd0:	cmp	r4, #63	; 0x3f
   17dd4:	beq	18090 <argp_parse@@Base+0x97c>
   17dd8:	cmp	r4, #1
   17ddc:	bne	181fc <argp_parse@@Base+0xae8>
   17de0:	sub	r7, r7, #1
   17de4:	ldr	sl, [fp, #-144]	; 0xffffff70
   17de8:	b	17b64 <argp_parse@@Base+0x450>
   17dec:	str	r3, [fp, #-88]	; 0xffffffa8
   17df0:	cmp	r2, r4
   17df4:	add	r4, r4, #36	; 0x24
   17df8:	bhi	17b80 <argp_parse@@Base+0x46c>
   17dfc:	ldr	r7, [fp, #-88]	; 0xffffffa8
   17e00:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17e04:	cmp	r7, r0
   17e08:	bne	17fec <argp_parse@@Base+0x8d8>
   17e0c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17e10:	ldr	r2, [fp, #-112]	; 0xffffff90
   17e14:	mov	r4, r3
   17e18:	cmp	r3, r2
   17e1c:	movcc	r5, #0
   17e20:	ldrcc	r6, [pc, #1764]	; 1850c <argp_parse@@Base+0xdf8>
   17e24:	movcc	r0, r5
   17e28:	bcc	17e7c <argp_parse@@Base+0x768>
   17e2c:	b	18464 <argp_parse@@Base+0xd50>
   17e30:	ldr	r2, [r4, #-4]
   17e34:	mov	r1, r3
   17e38:	str	r2, [fp, #-64]	; 0xffffffc0
   17e3c:	ldr	r0, [r4, #-12]
   17e40:	sub	r2, fp, #100	; 0x64
   17e44:	str	r0, [fp, #-72]	; 0xffffffb8
   17e48:	ldr	r0, [r4, #-8]
   17e4c:	str	r3, [fp, #-80]	; 0xffffffb0
   17e50:	str	r0, [fp, #-68]	; 0xffffffbc
   17e54:	mov	r0, r6
   17e58:	blx	r5
   17e5c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17e60:	str	r3, [r4, #-4]
   17e64:	ldr	r2, [fp, #-112]	; 0xffffff90
   17e68:	cmp	r2, r4
   17e6c:	bls	18380 <argp_parse@@Base+0xc6c>
   17e70:	cmp	r0, #7
   17e74:	cmpne	r0, #0
   17e78:	bne	18344 <argp_parse@@Base+0xc30>
   17e7c:	ldr	r3, [r4, #12]
   17e80:	add	r4, r4, #36	; 0x24
   17e84:	cmp	r3, #0
   17e88:	bne	17e68 <argp_parse@@Base+0x754>
   17e8c:	ldr	r5, [r4, #-36]	; 0xffffffdc
   17e90:	cmp	r5, #0
   17e94:	bne	17e30 <argp_parse@@Base+0x71c>
   17e98:	cmp	r4, r2
   17e9c:	bcs	18480 <argp_parse@@Base+0xd6c>
   17ea0:	mov	r0, #7
   17ea4:	b	17e7c <argp_parse@@Base+0x768>
   17ea8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17eac:	ldr	r3, [fp, #-88]	; 0xffffffa8
   17eb0:	cmp	r3, r7
   17eb4:	subgt	r7, r3, r7
   17eb8:	ldrgt	r2, [r4, #-24]	; 0xffffffe8
   17ebc:	movle	r2, #1
   17ec0:	addgt	r2, r2, r7
   17ec4:	strgt	r2, [r4, #-24]	; 0xffffffe8
   17ec8:	movgt	r7, r3
   17ecc:	ldrgt	r2, [fp, #-104]	; 0xffffff98
   17ed0:	movle	r7, r3
   17ed4:	strle	r2, [fp, #-104]	; 0xffffff98
   17ed8:	b	17b28 <argp_parse@@Base+0x414>
   17edc:	sub	lr, fp, #156	; 0x9c
   17ee0:	stm	sp, {ip, lr}
   17ee4:	bl	1ac28 <argp_parse@@Base+0x3514>
   17ee8:	ldr	r7, [fp, #-156]	; 0xffffff64
   17eec:	str	r7, [fp, #-88]	; 0xffffffa8
   17ef0:	mov	r4, r0
   17ef4:	cmn	r4, #1
   17ef8:	bne	17dd0 <argp_parse@@Base+0x6bc>
   17efc:	mov	r3, #0
   17f00:	cmp	r7, #1
   17f04:	str	r3, [fp, #-104]	; 0xffffff98
   17f08:	ble	17fcc <argp_parse@@Base+0x8b8>
   17f0c:	ldr	r2, [fp, #-92]	; 0xffffffa4
   17f10:	sub	r3, r7, #-1073741823	; 0xc0000001
   17f14:	ldr	r1, [pc, #1524]	; 18510 <argp_parse@@Base+0xdfc>
   17f18:	ldr	r0, [r2, r3, lsl #2]
   17f1c:	bl	1127c <strcmp@plt>
   17f20:	cmp	r0, #0
   17f24:	bne	17fcc <argp_parse@@Base+0x8b8>
   17f28:	str	r7, [fp, #-76]	; 0xffffffb4
   17f2c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17f30:	b	17b44 <argp_parse@@Base+0x430>
   17f34:	ldr	r3, [fp, #-116]	; 0xffffff8c
   17f38:	mov	r2, #32
   17f3c:	mov	r1, r8
   17f40:	sub	r0, fp, #88	; 0x58
   17f44:	str	r3, [fp, #-112]	; 0xffffff90
   17f48:	bl	114bc <memset@plt>
   17f4c:	ldr	r1, [pc, #1440]	; 184f4 <argp_parse@@Base+0xde0>
   17f50:	ldr	r2, [pc, #1440]	; 184f8 <argp_parse@@Base+0xde4>
   17f54:	ldr	r0, [fp, #-256]	; 0xffffff00
   17f58:	ldr	r1, [r1]
   17f5c:	ldr	r2, [r2]
   17f60:	str	r0, [fp, #-96]	; 0xffffffa0
   17f64:	ldr	r0, [fp, #-252]	; 0xffffff04
   17f68:	mov	r3, #1
   17f6c:	str	r8, [fp, #-100]	; 0xffffff9c
   17f70:	str	r0, [fp, #-92]	; 0xffffffa4
   17f74:	str	r6, [fp, #-84]	; 0xffffffac
   17f78:	str	sl, [fp, #-48]	; 0xffffffd0
   17f7c:	str	r1, [fp, #-56]	; 0xffffffc8
   17f80:	str	r2, [fp, #-52]	; 0xffffffcc
   17f84:	str	r3, [fp, #-104]	; 0xffffff98
   17f88:	tst	r6, #2
   17f8c:	mov	r3, r0
   17f90:	bne	17ae0 <argp_parse@@Base+0x3cc>
   17f94:	mov	r2, #1
   17f98:	str	r2, [fp, #-152]	; 0xffffff68
   17f9c:	ldr	r2, [fp, #-252]	; 0xffffff04
   17fa0:	ldr	r4, [fp, #-96]	; 0xffffffa0
   17fa4:	cmp	r2, r3
   17fa8:	bne	17b0c <argp_parse@@Base+0x3f8>
   17fac:	ldr	r0, [r2]
   17fb0:	cmp	r0, #0
   17fb4:	beq	17b0c <argp_parse@@Base+0x3f8>
   17fb8:	bl	185e4 <argp_parse@@Base+0xed0>
   17fbc:	str	r0, [fp, #-60]	; 0xffffffc4
   17fc0:	b	17b18 <argp_parse@@Base+0x404>
   17fc4:	mov	r5, r0
   17fc8:	b	17cd4 <argp_parse@@Base+0x5c0>
   17fcc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   17fd0:	b	17b44 <argp_parse@@Base+0x430>
   17fd4:	cmp	r0, #7
   17fd8:	mov	r5, r0
   17fdc:	beq	17ad0 <argp_parse@@Base+0x3bc>
   17fe0:	cmp	r0, #0
   17fe4:	beq	17ad0 <argp_parse@@Base+0x3bc>
   17fe8:	b	17cd4 <argp_parse@@Base+0x5c0>
   17fec:	ldr	r3, [fp, #-264]	; 0xfffffef8
   17ff0:	cmp	r3, #0
   17ff4:	beq	18160 <argp_parse@@Base+0xa4c>
   17ff8:	str	r7, [r3]
   17ffc:	ldr	r2, [fp, #-112]	; 0xffffff90
   18000:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18004:	sub	r1, r2, #36	; 0x24
   18008:	cmp	r3, r1
   1800c:	subls	r4, r2, #72	; 0x48
   18010:	ldrls	r6, [pc, #1276]	; 18514 <argp_parse@@Base+0xe00>
   18014:	bhi	182b8 <argp_parse@@Base+0xba4>
   18018:	ldr	r5, [r4, #36]	; 0x24
   1801c:	cmp	r5, #0
   18020:	beq	181ec <argp_parse@@Base+0xad8>
   18024:	ldr	r2, [r4, #68]	; 0x44
   18028:	ldr	r3, [r4, #48]	; 0x30
   1802c:	str	r2, [fp, #-64]	; 0xffffffc0
   18030:	ldr	r1, [r4, #60]	; 0x3c
   18034:	sub	r2, fp, #100	; 0x64
   18038:	str	r1, [fp, #-72]	; 0xffffffb8
   1803c:	ldr	r0, [r4, #64]	; 0x40
   18040:	mov	r1, #0
   18044:	str	r0, [fp, #-68]	; 0xffffffbc
   18048:	str	r3, [fp, #-80]	; 0xffffffb0
   1804c:	mov	r0, r6
   18050:	blx	r5
   18054:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18058:	str	r3, [r4, #68]	; 0x44
   1805c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18060:	cmp	r3, r4
   18064:	bhi	18298 <argp_parse@@Base+0xb84>
   18068:	cmp	r0, #7
   1806c:	cmpne	r0, #0
   18070:	sub	r4, r4, #36	; 0x24
   18074:	beq	18018 <argp_parse@@Base+0x904>
   18078:	ldr	r4, [fp, #-112]	; 0xffffff90
   1807c:	mov	r5, r0
   18080:	sub	r4, r4, #36	; 0x24
   18084:	cmp	r4, r3
   18088:	bcs	17c6c <argp_parse@@Base+0x558>
   1808c:	b	17ccc <argp_parse@@Base+0x5b8>
   18090:	ldr	r3, [fp, #-148]	; 0xffffff6c
   18094:	cmn	r3, #1
   18098:	bne	18138 <argp_parse@@Base+0xa24>
   1809c:	mov	r1, r4
   180a0:	ldr	r0, [fp, #-164]	; 0xffffff5c
   180a4:	bl	11474 <strchr@plt>
   180a8:	cmp	r0, #0
   180ac:	beq	181ac <argp_parse@@Base+0xa98>
   180b0:	ldr	r5, [fp, #-116]	; 0xffffff8c
   180b4:	ldr	r2, [fp, #-112]	; 0xffffff90
   180b8:	cmp	r5, r2
   180bc:	bcc	180d0 <argp_parse@@Base+0x9bc>
   180c0:	b	181ac <argp_parse@@Base+0xa98>
   180c4:	add	r5, r5, #36	; 0x24
   180c8:	cmp	r5, r2
   180cc:	bcs	181ac <argp_parse@@Base+0xa98>
   180d0:	ldr	r3, [r5, #8]
   180d4:	cmp	r0, r3
   180d8:	bcs	180c4 <argp_parse@@Base+0x9b0>
   180dc:	ldr	r3, [r5]
   180e0:	cmp	r3, #0
   180e4:	beq	181ac <argp_parse@@Base+0xa98>
   180e8:	add	r0, r5, #24
   180ec:	ldr	r2, [r5, #12]
   180f0:	ldm	r0, {r0, r1, ip}
   180f4:	sub	r7, fp, #100	; 0x64
   180f8:	str	r2, [fp, #-80]	; 0xffffffb0
   180fc:	mov	r2, r7
   18100:	strd	r0, [fp, #-72]	; 0xffffffb8
   18104:	str	ip, [fp, #-64]	; 0xffffffc0
   18108:	ldr	r1, [fp, #-144]	; 0xffffff70
   1810c:	mov	r0, r4
   18110:	blx	r3
   18114:	ldr	r3, [fp, #-64]	; 0xffffffc0
   18118:	mov	r8, #0
   1811c:	str	r3, [r5, #32]
   18120:	b	18260 <argp_parse@@Base+0xb4c>
   18124:	ldr	r3, [fp, #-252]	; 0xffffff04
   18128:	ldr	r0, [r3]
   1812c:	bl	185e4 <argp_parse@@Base+0xed0>
   18130:	str	r0, [r4]
   18134:	b	1777c <argp_parse@@Base+0x68>
   18138:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1813c:	sub	r7, fp, #100	; 0x64
   18140:	mov	r2, #260	; 0x104
   18144:	mov	r1, r4
   18148:	mov	r0, r7
   1814c:	bl	16f64 <argp_state_help@@Base>
   18150:	mov	r5, #7
   18154:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18158:	ldr	r2, [fp, #-112]	; 0xffffff90
   1815c:	b	17bf8 <argp_parse@@Base+0x4e4>
   18160:	ldr	r3, [fp, #-84]	; 0xffffffac
   18164:	ldr	r4, [fp, #-56]	; 0xffffffc8
   18168:	tst	r3, #2
   1816c:	bne	1813c <argp_parse@@Base+0xa28>
   18170:	cmp	r4, #0
   18174:	beq	1813c <argp_parse@@Base+0xa28>
   18178:	ldr	r3, [fp, #-168]	; 0xffffff58
   1817c:	mov	r2, #5
   18180:	ldr	r1, [pc, #912]	; 18518 <argp_parse@@Base+0xe04>
   18184:	ldr	r0, [r3, #24]
   18188:	bl	11330 <dcgettext@plt>
   1818c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18190:	mov	r1, #1
   18194:	sub	r7, fp, #100	; 0x64
   18198:	mov	r2, r0
   1819c:	mov	r0, r4
   181a0:	bl	114ec <__fprintf_chk@plt>
   181a4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   181a8:	b	18140 <argp_parse@@Base+0xa2c>
   181ac:	sub	r7, fp, #100	; 0x64
   181b0:	ldr	r3, [fp, #-168]	; 0xffffff58
   181b4:	mov	r2, #5
   181b8:	ldr	r1, [pc, #860]	; 1851c <argp_parse@@Base+0xe08>
   181bc:	ldr	r0, [r3, #24]
   181c0:	bl	11330 <dcgettext@plt>
   181c4:	mov	r2, r4
   181c8:	ldr	r1, [pc, #848]	; 18520 <argp_parse@@Base+0xe0c>
   181cc:	add	r4, r4, #1
   181d0:	bic	r4, r4, #2
   181d4:	mov	r3, r0
   181d8:	mov	r0, r7
   181dc:	bl	17020 <argp_error@@Base>
   181e0:	cmp	r4, #0
   181e4:	bne	181a4 <argp_parse@@Base+0xa90>
   181e8:	b	17dfc <argp_parse@@Base+0x6e8>
   181ec:	cmp	r4, r3
   181f0:	bcc	1845c <argp_parse@@Base+0xd48>
   181f4:	sub	r4, r4, #36	; 0x24
   181f8:	b	18018 <argp_parse@@Base+0x904>
   181fc:	asrs	r8, r4, #24
   18200:	beq	1809c <argp_parse@@Base+0x988>
   18204:	add	r3, r8, r8, lsl #3
   18208:	ldr	r5, [fp, #-116]	; 0xffffff8c
   1820c:	lsl	r3, r3, #2
   18210:	sub	r3, r3, #36	; 0x24
   18214:	lsl	r0, r4, #8
   18218:	ldr	r6, [r5, r3]
   1821c:	asr	r0, r0, #8
   18220:	cmp	r6, #0
   18224:	add	r5, r5, r3
   18228:	beq	18454 <argp_parse@@Base+0xd40>
   1822c:	add	r1, r5, #24
   18230:	ldr	r3, [r5, #12]
   18234:	ldm	r1, {r1, r2, ip}
   18238:	sub	r7, fp, #100	; 0x64
   1823c:	str	r3, [fp, #-80]	; 0xffffffb0
   18240:	str	r1, [fp, #-72]	; 0xffffffb8
   18244:	str	r2, [fp, #-68]	; 0xffffffbc
   18248:	str	ip, [fp, #-64]	; 0xffffffc0
   1824c:	mov	r2, r7
   18250:	ldr	r1, [fp, #-144]	; 0xffffff70
   18254:	blx	r6
   18258:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1825c:	str	r3, [r5, #32]
   18260:	cmp	r0, #7
   18264:	beq	182c0 <argp_parse@@Base+0xbac>
   18268:	cmp	r0, #0
   1826c:	bne	17be4 <argp_parse@@Base+0x4d0>
   18270:	ldr	r7, [fp, #-88]	; 0xffffffa8
   18274:	ldr	r0, [fp, #-96]	; 0xffffffa0
   18278:	ldr	r2, [fp, #-104]	; 0xffffff98
   1827c:	b	17b28 <argp_parse@@Base+0x414>
   18280:	ldr	r2, [pc, #668]	; 18524 <argp_parse@@Base+0xe10>
   18284:	ldr	r2, [r2]
   18288:	cmp	r2, #0
   1828c:	addeq	ip, r3, #16
   18290:	bne	1783c <argp_parse@@Base+0x128>
   18294:	b	17848 <argp_parse@@Base+0x134>
   18298:	mov	r5, r0
   1829c:	ldr	r4, [fp, #-112]	; 0xffffff90
   182a0:	cmp	r5, #7
   182a4:	sub	r4, r4, #36	; 0x24
   182a8:	bne	18084 <argp_parse@@Base+0x970>
   182ac:	cmp	r4, r3
   182b0:	movcs	r5, #0
   182b4:	bcs	17c6c <argp_parse@@Base+0x558>
   182b8:	mov	r5, #0
   182bc:	b	17ccc <argp_parse@@Base+0x5b8>
   182c0:	cmp	r8, #0
   182c4:	beq	181b0 <argp_parse@@Base+0xa9c>
   182c8:	ldr	r3, [fp, #-160]	; 0xffffff60
   182cc:	ldr	r2, [r3, #12]
   182d0:	ldr	r5, [r3]
   182d4:	cmp	r4, r2
   182d8:	beq	18304 <argp_parse@@Base+0xbf0>
   182dc:	cmp	r5, #0
   182e0:	bne	182f4 <argp_parse@@Base+0xbe0>
   182e4:	b	18434 <argp_parse@@Base+0xd20>
   182e8:	cmp	r5, #0
   182ec:	add	r3, r3, #16
   182f0:	beq	18434 <argp_parse@@Base+0xd20>
   182f4:	ldr	r2, [r3, #28]
   182f8:	ldr	r5, [r3, #16]
   182fc:	cmp	r4, r2
   18300:	bne	182e8 <argp_parse@@Base+0xbd4>
   18304:	ldr	r3, [pc, #540]	; 18528 <argp_parse@@Base+0xe14>
   18308:	cmp	r5, #0
   1830c:	moveq	r5, r3
   18310:	ldr	r3, [fp, #-168]	; 0xffffff58
   18314:	mov	r2, #5
   18318:	ldr	r1, [pc, #508]	; 1851c <argp_parse@@Base+0xe08>
   1831c:	ldr	r0, [r3, #24]
   18320:	bl	11330 <dcgettext@plt>
   18324:	add	r4, r4, #1
   18328:	mov	r2, r5
   1832c:	ldr	r1, [pc, #504]	; 1852c <argp_parse@@Base+0xe18>
   18330:	bic	r4, r4, #2
   18334:	mov	r3, r0
   18338:	mov	r0, r7
   1833c:	bl	17020 <argp_error@@Base>
   18340:	b	181e0 <argp_parse@@Base+0xacc>
   18344:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18348:	sub	r1, r2, #36	; 0x24
   1834c:	cmp	r3, r1
   18350:	mov	r5, r0
   18354:	bhi	18498 <argp_parse@@Base+0xd84>
   18358:	ldr	r2, [fp, #-264]	; 0xfffffef8
   1835c:	cmp	r2, #0
   18360:	beq	18370 <argp_parse@@Base+0xc5c>
   18364:	ldr	r1, [fp, #-264]	; 0xfffffef8
   18368:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1836c:	str	r2, [r1]
   18370:	cmp	r5, #0
   18374:	bne	17be8 <argp_parse@@Base+0x4d4>
   18378:	ldr	r2, [fp, #-112]	; 0xffffff90
   1837c:	b	18004 <argp_parse@@Base+0x8f0>
   18380:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18384:	sub	r4, r2, #36	; 0x24
   18388:	cmp	r3, r4
   1838c:	mov	r5, r0
   18390:	bhi	18440 <argp_parse@@Base+0xd2c>
   18394:	cmp	r5, #7
   18398:	cmpne	r5, #0
   1839c:	bne	18358 <argp_parse@@Base+0xc44>
   183a0:	ldr	r6, [pc, #392]	; 18530 <argp_parse@@Base+0xe1c>
   183a4:	sub	r4, r4, #36	; 0x24
   183a8:	ldr	r5, [r4, #36]	; 0x24
   183ac:	cmp	r5, #0
   183b0:	beq	18410 <argp_parse@@Base+0xcfc>
   183b4:	ldr	r3, [r4, #68]	; 0x44
   183b8:	ldr	r1, [r4, #48]	; 0x30
   183bc:	str	r3, [fp, #-64]	; 0xffffffc0
   183c0:	ldr	r3, [r4, #60]	; 0x3c
   183c4:	sub	r2, fp, #100	; 0x64
   183c8:	str	r3, [fp, #-72]	; 0xffffffb8
   183cc:	ldr	r3, [r4, #64]	; 0x40
   183d0:	mov	r0, r6
   183d4:	str	r1, [fp, #-80]	; 0xffffffb0
   183d8:	str	r3, [fp, #-68]	; 0xffffffbc
   183dc:	mov	r1, #0
   183e0:	blx	r5
   183e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   183e8:	str	r3, [r4, #68]	; 0x44
   183ec:	ldr	r3, [fp, #-116]	; 0xffffff8c
   183f0:	cmp	r3, r4
   183f4:	bhi	1843c <argp_parse@@Base+0xd28>
   183f8:	cmp	r0, #7
   183fc:	cmpne	r0, #0
   18400:	sub	r4, r4, #36	; 0x24
   18404:	beq	183a8 <argp_parse@@Base+0xc94>
   18408:	mov	r5, r0
   1840c:	b	18358 <argp_parse@@Base+0xc44>
   18410:	cmp	r3, r4
   18414:	bls	183a4 <argp_parse@@Base+0xc90>
   18418:	ldr	r2, [fp, #-112]	; 0xffffff90
   1841c:	ldr	r0, [fp, #-264]	; 0xfffffef8
   18420:	cmp	r0, #0
   18424:	beq	18004 <argp_parse@@Base+0x8f0>
   18428:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1842c:	str	r1, [r0]
   18430:	b	18004 <argp_parse@@Base+0x8f0>
   18434:	ldr	r5, [pc, #236]	; 18528 <argp_parse@@Base+0xe14>
   18438:	b	18310 <argp_parse@@Base+0xbfc>
   1843c:	mov	r5, r0
   18440:	cmp	r5, #7
   18444:	beq	18418 <argp_parse@@Base+0xd04>
   18448:	b	18358 <argp_parse@@Base+0xc44>
   1844c:	sub	r4, r2, #36	; 0x24
   18450:	b	17c64 <argp_parse@@Base+0x550>
   18454:	sub	r7, fp, #100	; 0x64
   18458:	b	182c8 <argp_parse@@Base+0xbb4>
   1845c:	mov	r5, #7
   18460:	b	1829c <argp_parse@@Base+0xb88>
   18464:	sub	r4, r2, #36	; 0x24
   18468:	cmp	r3, r4
   1846c:	bls	183a0 <argp_parse@@Base+0xc8c>
   18470:	ldr	r0, [fp, #-264]	; 0xfffffef8
   18474:	cmp	r0, #0
   18478:	bne	18428 <argp_parse@@Base+0xd14>
   1847c:	b	182b8 <argp_parse@@Base+0xba4>
   18480:	ldr	r3, [fp, #-116]	; 0xffffff8c
   18484:	sub	r4, r2, #36	; 0x24
   18488:	cmp	r3, r4
   1848c:	movls	r5, #7
   18490:	bls	18394 <argp_parse@@Base+0xc80>
   18494:	b	1841c <argp_parse@@Base+0xd08>
   18498:	ldr	r1, [fp, #-264]	; 0xfffffef8
   1849c:	cmp	r1, #0
   184a0:	bne	18364 <argp_parse@@Base+0xc50>
   184a4:	b	17bf8 <argp_parse@@Base+0x4e4>
   184a8:	bl	1133c <__stack_chk_fail@plt>
   184ac:	ldr	r2, [fp, #-112]	; 0xffffff90
   184b0:	b	17df0 <argp_parse@@Base+0x6dc>
   184b4:	cmp	r0, #0
   184b8:	ldreq	r3, [fp, #-96]	; 0xffffffa0
   184bc:	moveq	r0, r3
   184c0:	streq	r3, [fp, #-88]	; 0xffffffa8
   184c4:	beq	17eb0 <argp_parse@@Base+0x79c>
   184c8:	cmp	r0, #7
   184cc:	mov	r5, r0
   184d0:	ldrne	r3, [fp, #-116]	; 0xffffff8c
   184d4:	beq	17dfc <argp_parse@@Base+0x6e8>
   184d8:	b	17bf8 <argp_parse@@Base+0x4e4>
   184dc:	andeq	lr, r2, r8, lsl #30
   184e0:	andeq	pc, r2, r4, ror #5
   184e4:	andeq	pc, r2, r0, ror #5
   184e8:	andeq	pc, r2, r4, lsl #9
   184ec:	andeq	sp, r1, r8, lsr #17
   184f0:	andeq	sp, r1, r4, asr #17
   184f4:	andeq	pc, r2, r8, ror #5
   184f8:	andeq	pc, r2, ip, ror #5
   184fc:	tsteq	r0, r3
   18500:	tsteq	r0, r6
   18504:	tsteq	r0, r5
   18508:	tsteq	r0, r7
   1850c:	tsteq	r0, r2
   18510:	strdeq	sp, [r1], -r0
   18514:	tsteq	r0, r4
   18518:	andeq	sp, r1, r8, lsl #20
   1851c:	andeq	sp, r1, r0, ror #17
   18520:	strdeq	sp, [r1], -r4
   18524:	andeq	pc, r2, r4, lsl #6
   18528:	andeq	sp, r1, ip, ror #19
   1852c:	strdeq	sp, [r1], -ip
   18530:	tsteq	r0, r1
   18534:	cmp	r1, #0
   18538:	beq	18578 <argp_parse@@Base+0xe64>
   1853c:	ldr	r2, [r1, #52]	; 0x34
   18540:	ldr	r3, [r2, #52]	; 0x34
   18544:	ldr	r1, [r2, #56]	; 0x38
   18548:	cmp	r3, r1
   1854c:	bcs	18578 <argp_parse@@Base+0xe64>
   18550:	ldr	r2, [r3, #4]
   18554:	cmp	r0, r2
   18558:	bne	1856c <argp_parse@@Base+0xe58>
   1855c:	b	18580 <argp_parse@@Base+0xe6c>
   18560:	ldr	r2, [r3, #4]
   18564:	cmp	r2, r0
   18568:	beq	18580 <argp_parse@@Base+0xe6c>
   1856c:	add	r3, r3, #36	; 0x24
   18570:	cmp	r3, r1
   18574:	bcc	18560 <argp_parse@@Base+0xe4c>
   18578:	mov	r0, #0
   1857c:	bx	lr
   18580:	ldr	r0, [r3, #24]
   18584:	bx	lr
   18588:	ldr	r1, [pc, #32]	; 185b0 <argp_parse@@Base+0xe9c>
   1858c:	push	{lr}		; (str lr, [sp, #-4]!)
   18590:	sub	sp, sp, #12
   18594:	ldm	r1, {r1, ip}
   18598:	ldr	r3, [pc, #20]	; 185b4 <argp_parse@@Base+0xea0>
   1859c:	ldr	r2, [pc, #20]	; 185b8 <argp_parse@@Base+0xea4>
   185a0:	str	ip, [sp]
   185a4:	bl	1a830 <argp_parse@@Base+0x311c>
   185a8:	add	sp, sp, #12
   185ac:	pop	{pc}		; (ldr pc, [sp], #4)
   185b0:	andeq	pc, r2, r8, lsl #6
   185b4:	andeq	sp, r1, r0, ror #21
   185b8:	andeq	sp, r1, r8, ror #21
   185bc:	ldr	r3, [pc, #20]	; 185d8 <argp_parse@@Base+0xec4>
   185c0:	ldr	r2, [pc, #20]	; 185dc <argp_parse@@Base+0xec8>
   185c4:	ldr	ip, [pc, #20]	; 185e0 <argp_parse@@Base+0xecc>
   185c8:	str	r0, [r3]
   185cc:	str	ip, [r2]
   185d0:	str	r1, [r3, #4]
   185d4:	bx	lr
   185d8:	andeq	pc, r2, r8, lsl #6
   185dc:	andeq	pc, r2, r4, lsl #6
   185e0:	andeq	r8, r1, r8, lsl #11
   185e4:	ldrb	r3, [r0]
   185e8:	cmp	r3, #47	; 0x2f
   185ec:	bne	185fc <argp_parse@@Base+0xee8>
   185f0:	ldrb	r3, [r0, #1]!
   185f4:	cmp	r3, #47	; 0x2f
   185f8:	beq	185f0 <argp_parse@@Base+0xedc>
   185fc:	cmp	r3, #0
   18600:	bxeq	lr
   18604:	mov	r2, r0
   18608:	mov	r1, #0
   1860c:	cmp	r3, #47	; 0x2f
   18610:	moveq	r1, #1
   18614:	beq	18624 <argp_parse@@Base+0xf10>
   18618:	cmp	r1, #0
   1861c:	movne	r0, r2
   18620:	movne	r1, #0
   18624:	ldrb	r3, [r2, #1]!
   18628:	cmp	r3, #0
   1862c:	bne	1860c <argp_parse@@Base+0xef8>
   18630:	bx	lr
   18634:	push	{r4, lr}
   18638:	mov	r4, r0
   1863c:	bl	11468 <strlen@plt>
   18640:	cmp	r0, #1
   18644:	popls	{r4, pc}
   18648:	add	r2, r4, r0
   1864c:	mov	r3, r0
   18650:	ldrb	r2, [r2, #-1]
   18654:	cmp	r2, #47	; 0x2f
   18658:	subeq	r3, r0, #2
   1865c:	addeq	r3, r4, r3
   18660:	rsbeq	r1, r4, #1
   18664:	popne	{r4, pc}
   18668:	cmp	r3, r4
   1866c:	add	r0, r1, r3
   18670:	popeq	{r4, pc}
   18674:	ldrb	r2, [r3], #-1
   18678:	cmp	r2, #47	; 0x2f
   1867c:	popne	{r4, pc}
   18680:	b	18668 <argp_parse@@Base+0xf54>
   18684:	push	{r4, r5, r6, r7, r8, lr}
   18688:	subs	r4, r2, #0
   1868c:	beq	186ec <argp_parse@@Base+0xfd8>
   18690:	mov	r7, r0
   18694:	mov	r5, r1
   18698:	mov	r6, #0
   1869c:	b	186b8 <argp_parse@@Base+0xfa4>
   186a0:	cmp	r0, #0
   186a4:	beq	186d8 <argp_parse@@Base+0xfc4>
   186a8:	subs	r4, r4, r0
   186ac:	add	r6, r6, r0
   186b0:	add	r5, r5, r0
   186b4:	beq	186d0 <argp_parse@@Base+0xfbc>
   186b8:	mov	r2, r4
   186bc:	mov	r1, r5
   186c0:	mov	r0, r7
   186c4:	bl	1a420 <argp_parse@@Base+0x2d0c>
   186c8:	cmn	r0, #1
   186cc:	bne	186a0 <argp_parse@@Base+0xf8c>
   186d0:	mov	r0, r6
   186d4:	pop	{r4, r5, r6, r7, r8, pc}
   186d8:	bl	1148c <__errno_location@plt>
   186dc:	mov	r3, #28
   186e0:	str	r3, [r0]
   186e4:	mov	r0, r6
   186e8:	pop	{r4, r5, r6, r7, r8, pc}
   186ec:	mov	r6, r4
   186f0:	b	186d0 <argp_parse@@Base+0xfbc>
   186f4:	push	{r4, r5, r6, lr}
   186f8:	mov	r4, r0
   186fc:	mov	r5, r1
   18700:	add	r6, r2, #20
   18704:	mov	r3, #0
   18708:	strb	r3, [r2, #20]
   1870c:	mov	r0, r4
   18710:	mov	r1, r5
   18714:	mov	r2, #10
   18718:	mov	r3, #0
   1871c:	bl	1cb6c <argp_parse@@Base+0x5458>
   18720:	mov	r0, r4
   18724:	mov	r1, r5
   18728:	mov	r3, #0
   1872c:	add	r2, r2, #48	; 0x30
   18730:	strb	r2, [r6, #-1]!
   18734:	mov	r2, #10
   18738:	bl	1cb6c <argp_parse@@Base+0x5458>
   1873c:	cmp	r5, #0
   18740:	cmpeq	r4, #9
   18744:	mov	r5, r1
   18748:	mov	r4, r0
   1874c:	bhi	1870c <argp_parse@@Base+0xff8>
   18750:	mov	r0, r6
   18754:	pop	{r4, r5, r6, pc}
   18758:	push	{r4, r5, r6, lr}
   1875c:	subs	r4, r0, #0
   18760:	beq	187d4 <argp_parse@@Base+0x10c0>
   18764:	mov	r1, #47	; 0x2f
   18768:	bl	11558 <strrchr@plt>
   1876c:	subs	r5, r0, #0
   18770:	beq	187c0 <argp_parse@@Base+0x10ac>
   18774:	add	r6, r5, #1
   18778:	sub	r3, r6, r4
   1877c:	cmp	r3, #6
   18780:	ble	187c0 <argp_parse@@Base+0x10ac>
   18784:	mov	r2, #7
   18788:	ldr	r1, [pc, #96]	; 187f0 <argp_parse@@Base+0x10dc>
   1878c:	sub	r0, r5, #6
   18790:	bl	115c4 <strncmp@plt>
   18794:	cmp	r0, #0
   18798:	bne	187c0 <argp_parse@@Base+0x10ac>
   1879c:	mov	r2, #3
   187a0:	ldr	r1, [pc, #76]	; 187f4 <argp_parse@@Base+0x10e0>
   187a4:	mov	r0, r6
   187a8:	bl	115c4 <strncmp@plt>
   187ac:	cmp	r0, #0
   187b0:	movne	r4, r6
   187b4:	ldreq	r3, [pc, #60]	; 187f8 <argp_parse@@Base+0x10e4>
   187b8:	addeq	r4, r5, #4
   187bc:	streq	r4, [r3]
   187c0:	ldr	r2, [pc, #52]	; 187fc <argp_parse@@Base+0x10e8>
   187c4:	ldr	r3, [pc, #52]	; 18800 <argp_parse@@Base+0x10ec>
   187c8:	str	r4, [r2]
   187cc:	str	r4, [r3]
   187d0:	pop	{r4, r5, r6, pc}
   187d4:	ldr	r3, [pc, #40]	; 18804 <argp_parse@@Base+0x10f0>
   187d8:	mov	r2, #55	; 0x37
   187dc:	mov	r1, #1
   187e0:	ldr	r3, [r3]
   187e4:	ldr	r0, [pc, #28]	; 18808 <argp_parse@@Base+0x10f4>
   187e8:	bl	1139c <fwrite@plt>
   187ec:	bl	115d0 <abort@plt>
   187f0:	andeq	sp, r1, ip, lsr #22
   187f4:	andeq	sp, r1, r4, lsr fp
   187f8:	andeq	pc, r2, r0, ror #5
   187fc:	andeq	pc, r2, r0, lsl r3	; <UNPREDICTABLE>
   18800:	andeq	pc, r2, r4, ror #5
   18804:	andeq	pc, r2, r8, ror #5
   18808:	strdeq	sp, [r1], -r4
   1880c:	push	{r4, lr}
   18810:	mov	r2, #48	; 0x30
   18814:	mov	r4, r1
   18818:	mov	r1, #0
   1881c:	bl	114bc <memset@plt>
   18820:	cmp	r4, #8
   18824:	beq	18830 <argp_parse@@Base+0x111c>
   18828:	str	r4, [r0]
   1882c:	pop	{r4, pc}
   18830:	bl	115d0 <abort@plt>
   18834:	push	{r4, r5, r6, lr}
   18838:	mov	r2, #5
   1883c:	mov	r5, r0
   18840:	mov	r6, r1
   18844:	mov	r1, r0
   18848:	mov	r0, #0
   1884c:	bl	11330 <dcgettext@plt>
   18850:	cmp	r5, r0
   18854:	mov	r4, r0
   18858:	beq	18864 <argp_parse@@Base+0x1150>
   1885c:	mov	r0, r4
   18860:	pop	{r4, r5, r6, pc}
   18864:	bl	1b440 <argp_parse@@Base+0x3d2c>
   18868:	ldrb	r3, [r0]
   1886c:	bic	r3, r3, #32
   18870:	cmp	r3, #85	; 0x55
   18874:	bne	188d4 <argp_parse@@Base+0x11c0>
   18878:	ldrb	r3, [r0, #1]
   1887c:	bic	r3, r3, #32
   18880:	cmp	r3, #84	; 0x54
   18884:	bne	1894c <argp_parse@@Base+0x1238>
   18888:	ldrb	r3, [r0, #2]
   1888c:	bic	r3, r3, #32
   18890:	cmp	r3, #70	; 0x46
   18894:	bne	1894c <argp_parse@@Base+0x1238>
   18898:	ldrb	r3, [r0, #3]
   1889c:	cmp	r3, #45	; 0x2d
   188a0:	bne	1894c <argp_parse@@Base+0x1238>
   188a4:	ldrb	r3, [r0, #4]
   188a8:	cmp	r3, #56	; 0x38
   188ac:	bne	1894c <argp_parse@@Base+0x1238>
   188b0:	ldrb	r3, [r0, #5]
   188b4:	cmp	r3, #0
   188b8:	bne	1894c <argp_parse@@Base+0x1238>
   188bc:	ldrb	r2, [r4]
   188c0:	ldr	r3, [pc, #156]	; 18964 <argp_parse@@Base+0x1250>
   188c4:	ldr	r4, [pc, #156]	; 18968 <argp_parse@@Base+0x1254>
   188c8:	cmp	r2, #96	; 0x60
   188cc:	movne	r4, r3
   188d0:	b	1885c <argp_parse@@Base+0x1148>
   188d4:	cmp	r3, #71	; 0x47
   188d8:	bne	1894c <argp_parse@@Base+0x1238>
   188dc:	ldrb	r3, [r0, #1]
   188e0:	bic	r3, r3, #32
   188e4:	cmp	r3, #66	; 0x42
   188e8:	bne	1894c <argp_parse@@Base+0x1238>
   188ec:	ldrb	r3, [r0, #2]
   188f0:	cmp	r3, #49	; 0x31
   188f4:	bne	1894c <argp_parse@@Base+0x1238>
   188f8:	ldrb	r3, [r0, #3]
   188fc:	cmp	r3, #56	; 0x38
   18900:	bne	1894c <argp_parse@@Base+0x1238>
   18904:	ldrb	r3, [r0, #4]
   18908:	cmp	r3, #48	; 0x30
   1890c:	bne	1894c <argp_parse@@Base+0x1238>
   18910:	ldrb	r3, [r0, #5]
   18914:	cmp	r3, #51	; 0x33
   18918:	bne	1894c <argp_parse@@Base+0x1238>
   1891c:	ldrb	r3, [r0, #6]
   18920:	cmp	r3, #48	; 0x30
   18924:	bne	1894c <argp_parse@@Base+0x1238>
   18928:	ldrb	r3, [r0, #7]
   1892c:	cmp	r3, #0
   18930:	bne	1894c <argp_parse@@Base+0x1238>
   18934:	ldrb	r2, [r4]
   18938:	ldr	r3, [pc, #44]	; 1896c <argp_parse@@Base+0x1258>
   1893c:	ldr	r4, [pc, #44]	; 18970 <argp_parse@@Base+0x125c>
   18940:	cmp	r2, #96	; 0x60
   18944:	movne	r4, r3
   18948:	b	1885c <argp_parse@@Base+0x1148>
   1894c:	ldr	r3, [pc, #32]	; 18974 <argp_parse@@Base+0x1260>
   18950:	ldr	r4, [pc, #32]	; 18978 <argp_parse@@Base+0x1264>
   18954:	cmp	r6, #7
   18958:	movne	r4, r3
   1895c:	mov	r0, r4
   18960:	pop	{r4, r5, r6, pc}
   18964:	andeq	sp, r1, r0, lsl #23
   18968:	andeq	sp, r1, ip, lsl #23
   1896c:	andeq	sp, r1, r4, lsl #23
   18970:	andeq	sp, r1, r8, lsl #23
   18974:	muleq	r1, r0, fp
   18978:	andeq	sp, r1, ip, ror fp
   1897c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18980:	sub	sp, sp, #108	; 0x6c
   18984:	mov	fp, r3
   18988:	ldr	r3, [sp, #152]	; 0x98
   1898c:	ldr	ip, [pc, #3932]	; 198f0 <argp_parse@@Base+0x21dc>
   18990:	str	r3, [sp, #48]	; 0x30
   18994:	ldr	r3, [sp, #156]	; 0x9c
   18998:	ldr	ip, [ip]
   1899c:	str	r3, [sp, #64]	; 0x40
   189a0:	ldr	r3, [sp, #160]	; 0xa0
   189a4:	str	r0, [sp, #40]	; 0x28
   189a8:	str	r3, [sp, #60]	; 0x3c
   189ac:	ldr	r3, [sp, #148]	; 0x94
   189b0:	mov	sl, r1
   189b4:	and	r5, r3, #2
   189b8:	str	r2, [sp, #24]
   189bc:	str	ip, [sp, #100]	; 0x64
   189c0:	bl	113b4 <__ctype_get_mb_cur_max@plt>
   189c4:	ldr	r3, [sp, #144]	; 0x90
   189c8:	str	r0, [sp, #56]	; 0x38
   189cc:	cmp	r3, #8
   189d0:	ldrls	pc, [pc, r3, lsl #2]
   189d4:	b	19c00 <argp_parse@@Base+0x24ec>
   189d8:	muleq	r1, r0, sl
   189dc:	andeq	r8, r1, r8, lsl #30
   189e0:	andeq	r8, r1, r4, lsr pc
   189e4:	andeq	r8, r1, ip, ror #30
   189e8:	andeq	r8, r1, r4, lsr #31
   189ec:	andeq	r8, r1, ip, asr #31
   189f0:	strdeq	r8, [r1], -ip
   189f4:	strdeq	r8, [r1], -ip
   189f8:	strdeq	r8, [r1], -ip
   189fc:	ldr	r3, [sp, #144]	; 0x90
   18a00:	cmp	r3, #8
   18a04:	beq	18a28 <argp_parse@@Base+0x1314>
   18a08:	mov	r1, r3
   18a0c:	ldr	r0, [pc, #3808]	; 198f4 <argp_parse@@Base+0x21e0>
   18a10:	bl	18834 <argp_parse@@Base+0x1120>
   18a14:	ldr	r1, [sp, #144]	; 0x90
   18a18:	str	r0, [sp, #64]	; 0x40
   18a1c:	ldr	r0, [pc, #3800]	; 198fc <argp_parse@@Base+0x21e8>
   18a20:	bl	18834 <argp_parse@@Base+0x1120>
   18a24:	str	r0, [sp, #60]	; 0x3c
   18a28:	cmp	r5, #0
   18a2c:	movne	r4, #0
   18a30:	bne	18a64 <argp_parse@@Base+0x1350>
   18a34:	ldr	r2, [sp, #64]	; 0x40
   18a38:	mov	r4, r5
   18a3c:	ldrb	r3, [r2]
   18a40:	cmp	r3, #0
   18a44:	beq	18a64 <argp_parse@@Base+0x1350>
   18a48:	ldr	r1, [sp, #40]	; 0x28
   18a4c:	cmp	sl, r4
   18a50:	strbhi	r3, [r1, r4]
   18a54:	ldrb	r3, [r2, #1]!
   18a58:	add	r4, r4, #1
   18a5c:	cmp	r3, #0
   18a60:	bne	18a4c <argp_parse@@Base+0x1338>
   18a64:	ldr	r6, [sp, #60]	; 0x3c
   18a68:	adds	r3, r5, #0
   18a6c:	movne	r3, #1
   18a70:	mov	r0, r6
   18a74:	str	r3, [sp, #36]	; 0x24
   18a78:	bl	11468 <strlen@plt>
   18a7c:	mov	r3, #1
   18a80:	str	r6, [sp, #52]	; 0x34
   18a84:	str	r3, [sp, #28]
   18a88:	str	r0, [sp, #32]
   18a8c:	b	18aac <argp_parse@@Base+0x1398>
   18a90:	mov	r3, #0
   18a94:	str	r3, [sp, #36]	; 0x24
   18a98:	str	r3, [sp, #28]
   18a9c:	str	r3, [sp, #52]	; 0x34
   18aa0:	ldr	r3, [sp, #144]	; 0x90
   18aa4:	mov	r4, r3
   18aa8:	str	r3, [sp, #32]
   18aac:	ldr	r3, [sp, #28]
   18ab0:	ldr	r2, [sp, #36]	; 0x24
   18ab4:	mov	r9, #0
   18ab8:	orr	r3, r3, r2
   18abc:	str	r3, [sp, #44]	; 0x2c
   18ac0:	cmn	fp, #1
   18ac4:	beq	18de0 <argp_parse@@Base+0x16cc>
   18ac8:	subs	r6, fp, r9
   18acc:	movne	r6, #1
   18ad0:	cmp	r6, #0
   18ad4:	beq	18df8 <argp_parse@@Base+0x16e4>
   18ad8:	ldr	r2, [sp, #32]
   18adc:	ldr	r8, [sp, #28]
   18ae0:	cmp	r2, #0
   18ae4:	moveq	r8, #0
   18ae8:	ldr	r0, [sp, #24]
   18aec:	cmp	r8, #0
   18af0:	mov	r3, r2
   18af4:	add	r7, r0, r9
   18af8:	beq	19274 <argp_parse@@Base+0x1b60>
   18afc:	cmp	r2, #1
   18b00:	movls	r3, #0
   18b04:	movhi	r3, #1
   18b08:	cmn	fp, #1
   18b0c:	movne	r3, #0
   18b10:	cmp	r3, #0
   18b14:	add	r5, r9, r2
   18b18:	beq	18b24 <argp_parse@@Base+0x1410>
   18b1c:	bl	11468 <strlen@plt>
   18b20:	mov	fp, r0
   18b24:	cmp	r5, fp
   18b28:	bhi	19564 <argp_parse@@Base+0x1e50>
   18b2c:	ldr	r2, [sp, #32]
   18b30:	ldr	r1, [sp, #52]	; 0x34
   18b34:	mov	r0, r7
   18b38:	bl	11318 <memcmp@plt>
   18b3c:	cmp	r0, #0
   18b40:	bne	19564 <argp_parse@@Base+0x1e50>
   18b44:	ldr	r3, [sp, #36]	; 0x24
   18b48:	cmp	r3, #0
   18b4c:	bne	19054 <argp_parse@@Base+0x1940>
   18b50:	ldrb	r5, [r7]
   18b54:	cmp	r5, #126	; 0x7e
   18b58:	ldrls	pc, [pc, r5, lsl #2]
   18b5c:	b	19190 <argp_parse@@Base+0x1a7c>
   18b60:	andeq	r8, r1, r8, lsl #29
   18b64:	muleq	r1, r0, r1
   18b68:	muleq	r1, r0, r1
   18b6c:	muleq	r1, r0, r1
   18b70:	muleq	r1, r0, r1
   18b74:	muleq	r1, r0, r1
   18b78:	muleq	r1, r0, r1
   18b7c:	andeq	r9, r1, r4, lsr #2
   18b80:	andeq	r9, r1, ip, lsl #2
   18b84:	andeq	r9, r1, r4, lsr r0
   18b88:	andeq	r9, r1, r4, lsl r1
   18b8c:	andeq	r9, r1, r4, lsl #2
   18b90:	andeq	r9, r1, ip, lsl r1
   18b94:	strdeq	r9, [r1], -ip
   18b98:	muleq	r1, r0, r1
   18b9c:	muleq	r1, r0, r1
   18ba0:	muleq	r1, r0, r1
   18ba4:	muleq	r1, r0, r1
   18ba8:	muleq	r1, r0, r1
   18bac:	muleq	r1, r0, r1
   18bb0:	muleq	r1, r0, r1
   18bb4:	muleq	r1, r0, r1
   18bb8:	muleq	r1, r0, r1
   18bbc:	muleq	r1, r0, r1
   18bc0:	muleq	r1, r0, r1
   18bc4:	muleq	r1, r0, r1
   18bc8:	muleq	r1, r0, r1
   18bcc:	muleq	r1, r0, r1
   18bd0:	muleq	r1, r0, r1
   18bd4:	muleq	r1, r0, r1
   18bd8:	muleq	r1, r0, r1
   18bdc:	muleq	r1, r0, r1
   18be0:	muleq	r1, ip, sp
   18be4:	muleq	r1, ip, sp
   18be8:	muleq	r1, ip, sp
   18bec:	andeq	r8, r1, ip, ror #31
   18bf0:	muleq	r1, ip, sp
   18bf4:	andeq	r8, r1, r4, asr #29
   18bf8:	muleq	r1, ip, sp
   18bfc:	andeq	r9, r1, ip, lsr r1
   18c00:	muleq	r1, ip, sp
   18c04:	muleq	r1, ip, sp
   18c08:	muleq	r1, ip, sp
   18c0c:	andeq	r8, r1, r4, asr #29
   18c10:	andeq	r8, r1, r4, asr #29
   18c14:	andeq	r8, r1, r4, asr #29
   18c18:	andeq	r8, r1, r4, asr #29
   18c1c:	andeq	r8, r1, r4, asr #29
   18c20:	andeq	r8, r1, r4, asr #29
   18c24:	andeq	r8, r1, r4, asr #29
   18c28:	andeq	r8, r1, r4, asr #29
   18c2c:	andeq	r8, r1, r4, asr #29
   18c30:	andeq	r8, r1, r4, asr #29
   18c34:	andeq	r8, r1, r4, asr #29
   18c38:	andeq	r8, r1, r4, asr #29
   18c3c:	andeq	r8, r1, r4, asr #29
   18c40:	andeq	r8, r1, r4, asr #29
   18c44:	andeq	r8, r1, r4, asr #29
   18c48:	andeq	r8, r1, r4, asr #29
   18c4c:	muleq	r1, ip, sp
   18c50:	muleq	r1, ip, sp
   18c54:	muleq	r1, ip, sp
   18c58:	muleq	r1, ip, sp
   18c5c:	andeq	r9, r1, ip, lsr #2
   18c60:	muleq	r1, r0, r1
   18c64:	andeq	r8, r1, r4, asr #29
   18c68:	andeq	r8, r1, r4, asr #29
   18c6c:	andeq	r8, r1, r4, asr #29
   18c70:	andeq	r8, r1, r4, asr #29
   18c74:	andeq	r8, r1, r4, asr #29
   18c78:	andeq	r8, r1, r4, asr #29
   18c7c:	andeq	r8, r1, r4, asr #29
   18c80:	andeq	r8, r1, r4, asr #29
   18c84:	andeq	r8, r1, r4, asr #29
   18c88:	andeq	r8, r1, r4, asr #29
   18c8c:	andeq	r8, r1, r4, asr #29
   18c90:	andeq	r8, r1, r4, asr #29
   18c94:	andeq	r8, r1, r4, asr #29
   18c98:	andeq	r8, r1, r4, asr #29
   18c9c:	andeq	r8, r1, r4, asr #29
   18ca0:	andeq	r8, r1, r4, asr #29
   18ca4:	andeq	r8, r1, r4, asr #29
   18ca8:	andeq	r8, r1, r4, asr #29
   18cac:	andeq	r8, r1, r4, asr #29
   18cb0:	andeq	r8, r1, r4, asr #29
   18cb4:	andeq	r8, r1, r4, asr #29
   18cb8:	andeq	r8, r1, r4, asr #29
   18cbc:	andeq	r8, r1, r4, asr #29
   18cc0:	andeq	r8, r1, r4, asr #29
   18cc4:	andeq	r8, r1, r4, asr #29
   18cc8:	andeq	r8, r1, r4, asr #29
   18ccc:	muleq	r1, ip, sp
   18cd0:	andeq	r9, r1, r8, asr #1
   18cd4:	andeq	r8, r1, r4, asr #29
   18cd8:	muleq	r1, ip, sp
   18cdc:	andeq	r8, r1, r4, asr #29
   18ce0:	muleq	r1, ip, sp
   18ce4:	andeq	r8, r1, r4, asr #29
   18ce8:	andeq	r8, r1, r4, asr #29
   18cec:	andeq	r8, r1, r4, asr #29
   18cf0:	andeq	r8, r1, r4, asr #29
   18cf4:	andeq	r8, r1, r4, asr #29
   18cf8:	andeq	r8, r1, r4, asr #29
   18cfc:	andeq	r8, r1, r4, asr #29
   18d00:	andeq	r8, r1, r4, asr #29
   18d04:	andeq	r8, r1, r4, asr #29
   18d08:	andeq	r8, r1, r4, asr #29
   18d0c:	andeq	r8, r1, r4, asr #29
   18d10:	andeq	r8, r1, r4, asr #29
   18d14:	andeq	r8, r1, r4, asr #29
   18d18:	andeq	r8, r1, r4, asr #29
   18d1c:	andeq	r8, r1, r4, asr #29
   18d20:	andeq	r8, r1, r4, asr #29
   18d24:	andeq	r8, r1, r4, asr #29
   18d28:	andeq	r8, r1, r4, asr #29
   18d2c:	andeq	r8, r1, r4, asr #29
   18d30:	andeq	r8, r1, r4, asr #29
   18d34:	andeq	r8, r1, r4, asr #29
   18d38:	andeq	r8, r1, r4, asr #29
   18d3c:	andeq	r8, r1, r4, asr #29
   18d40:	andeq	r8, r1, r4, asr #29
   18d44:	andeq	r8, r1, r4, asr #29
   18d48:	andeq	r8, r1, r4, asr #29
   18d4c:	andeq	r9, r1, r8, lsl r0
   18d50:	muleq	r1, ip, sp
   18d54:	andeq	r9, r1, r8, lsl r0
   18d58:	andeq	r8, r1, ip, ror #31
   18d5c:	ldr	r3, [sp, #144]	; 0x90
   18d60:	cmp	r3, #2
   18d64:	beq	197f0 <argp_parse@@Base+0x20dc>
   18d68:	cmp	r3, #3
   18d6c:	mov	r8, #0
   18d70:	bne	18d98 <argp_parse@@Base+0x1684>
   18d74:	ldr	r3, [sp, #148]	; 0x94
   18d78:	tst	r3, #4
   18d7c:	beq	18d98 <argp_parse@@Base+0x1684>
   18d80:	add	r3, r9, #2
   18d84:	cmp	r3, fp
   18d88:	bcs	18d98 <argp_parse@@Base+0x1684>
   18d8c:	ldrb	r5, [r7, #1]
   18d90:	cmp	r5, #63	; 0x3f
   18d94:	beq	19a90 <argp_parse@@Base+0x237c>
   18d98:	mov	r5, #63	; 0x3f
   18d9c:	ldr	r3, [sp, #44]	; 0x2c
   18da0:	cmp	r3, #0
   18da4:	bne	18ec4 <argp_parse@@Base+0x17b0>
   18da8:	cmp	r8, #0
   18dac:	add	r9, r9, #1
   18db0:	beq	18dc8 <argp_parse@@Base+0x16b4>
   18db4:	cmp	sl, r4
   18db8:	movhi	r2, #92	; 0x5c
   18dbc:	ldrhi	r3, [sp, #40]	; 0x28
   18dc0:	strbhi	r2, [r3, r4]
   18dc4:	add	r4, r4, #1
   18dc8:	cmp	r4, sl
   18dcc:	ldrcc	r3, [sp, #40]	; 0x28
   18dd0:	strbcc	r5, [r3, r4]
   18dd4:	cmn	fp, #1
   18dd8:	add	r4, r4, #1
   18ddc:	bne	18ac8 <argp_parse@@Base+0x13b4>
   18de0:	ldr	r3, [sp, #24]
   18de4:	ldrb	r6, [r3, r9]
   18de8:	adds	r6, r6, #0
   18dec:	movne	r6, #1
   18df0:	cmp	r6, #0
   18df4:	bne	18ad8 <argp_parse@@Base+0x13c4>
   18df8:	ldr	r2, [sp, #36]	; 0x24
   18dfc:	ldr	r1, [sp, #144]	; 0x90
   18e00:	mov	r3, r2
   18e04:	cmp	r1, #2
   18e08:	movne	r3, #0
   18e0c:	andeq	r3, r3, #1
   18e10:	cmp	r4, #0
   18e14:	movne	r3, #0
   18e18:	cmp	r3, #0
   18e1c:	bne	19054 <argp_parse@@Base+0x1940>
   18e20:	ldr	r1, [sp, #52]	; 0x34
   18e24:	cmp	r1, #0
   18e28:	eorne	r3, r2, #1
   18e2c:	moveq	r3, #0
   18e30:	cmp	r3, #0
   18e34:	beq	18e64 <argp_parse@@Base+0x1750>
   18e38:	ldrb	r3, [r1]
   18e3c:	mov	r2, r1
   18e40:	cmp	r3, #0
   18e44:	beq	18e64 <argp_parse@@Base+0x1750>
   18e48:	ldr	r1, [sp, #40]	; 0x28
   18e4c:	cmp	sl, r4
   18e50:	strbhi	r3, [r1, r4]
   18e54:	ldrb	r3, [r2, #1]!
   18e58:	add	r4, r4, #1
   18e5c:	cmp	r3, #0
   18e60:	bne	18e4c <argp_parse@@Base+0x1738>
   18e64:	cmp	r4, sl
   18e68:	ldrcc	r2, [sp, #40]	; 0x28
   18e6c:	movcc	r3, #0
   18e70:	strbcc	r3, [r2, r4]
   18e74:	b	19098 <argp_parse@@Base+0x1984>
   18e78:	ldr	r3, [sp, #36]	; 0x24
   18e7c:	cmp	r3, #0
   18e80:	bne	19054 <argp_parse@@Base+0x1940>
   18e84:	mov	r8, r3
   18e88:	cmp	r4, sl
   18e8c:	movcc	r2, #92	; 0x5c
   18e90:	ldrcc	r3, [sp, #40]	; 0x28
   18e94:	strbcc	r2, [r3, r4]
   18e98:	add	r3, r9, #1
   18e9c:	cmp	r3, fp
   18ea0:	add	r2, r4, #1
   18ea4:	bcs	18ebc <argp_parse@@Base+0x17a8>
   18ea8:	ldr	r1, [sp, #24]
   18eac:	ldrb	r3, [r1, r3]
   18eb0:	sub	r3, r3, #48	; 0x30
   18eb4:	cmp	r3, #9
   18eb8:	bls	19a00 <argp_parse@@Base+0x22ec>
   18ebc:	mov	r4, r2
   18ec0:	mov	r5, #48	; 0x30
   18ec4:	ldr	r2, [sp, #48]	; 0x30
   18ec8:	cmp	r2, #0
   18ecc:	beq	18eec <argp_parse@@Base+0x17d8>
   18ed0:	lsr	r3, r5, #5
   18ed4:	and	r1, r5, #31
   18ed8:	uxtb	r3, r3
   18edc:	ldr	r2, [r2, r3, lsl #2]
   18ee0:	lsr	r3, r2, r1
   18ee4:	tst	r3, #1
   18ee8:	bne	18ef4 <argp_parse@@Base+0x17e0>
   18eec:	cmp	r8, #0
   18ef0:	beq	19504 <argp_parse@@Base+0x1df0>
   18ef4:	ldr	r3, [sp, #36]	; 0x24
   18ef8:	cmp	r3, #0
   18efc:	bne	19054 <argp_parse@@Base+0x1940>
   18f00:	add	r9, r9, #1
   18f04:	b	18db4 <argp_parse@@Base+0x16a0>
   18f08:	ldr	r3, [sp, #144]	; 0x90
   18f0c:	mov	r4, #0
   18f10:	str	r3, [sp, #32]
   18f14:	mov	r3, #1
   18f18:	str	r3, [sp, #36]	; 0x24
   18f1c:	ldr	r3, [pc, #2520]	; 198fc <argp_parse@@Base+0x21e8>
   18f20:	str	r4, [sp, #28]
   18f24:	str	r3, [sp, #52]	; 0x34
   18f28:	mov	r3, #2
   18f2c:	str	r3, [sp, #144]	; 0x90
   18f30:	b	18aac <argp_parse@@Base+0x1398>
   18f34:	cmp	r5, #0
   18f38:	bne	19a50 <argp_parse@@Base+0x233c>
   18f3c:	cmp	sl, #0
   18f40:	beq	199c8 <argp_parse@@Base+0x22b4>
   18f44:	ldr	r2, [sp, #40]	; 0x28
   18f48:	mov	r3, #39	; 0x27
   18f4c:	mov	r4, #1
   18f50:	strb	r3, [r2]
   18f54:	ldr	r3, [pc, #2464]	; 198fc <argp_parse@@Base+0x21e8>
   18f58:	str	r5, [sp, #36]	; 0x24
   18f5c:	str	r4, [sp, #32]
   18f60:	str	r5, [sp, #28]
   18f64:	str	r3, [sp, #52]	; 0x34
   18f68:	b	18aac <argp_parse@@Base+0x1398>
   18f6c:	cmp	r5, #0
   18f70:	bne	19a30 <argp_parse@@Base+0x231c>
   18f74:	cmp	sl, #0
   18f78:	beq	199e4 <argp_parse@@Base+0x22d0>
   18f7c:	ldr	r2, [sp, #40]	; 0x28
   18f80:	mov	r3, #34	; 0x22
   18f84:	mov	r4, #1
   18f88:	strb	r3, [r2]
   18f8c:	ldr	r3, [pc, #2404]	; 198f8 <argp_parse@@Base+0x21e4>
   18f90:	str	r4, [sp, #28]
   18f94:	str	r5, [sp, #36]	; 0x24
   18f98:	str	r4, [sp, #32]
   18f9c:	str	r3, [sp, #52]	; 0x34
   18fa0:	b	18aac <argp_parse@@Base+0x1398>
   18fa4:	mov	r3, #1
   18fa8:	str	r3, [sp, #36]	; 0x24
   18fac:	str	r3, [sp, #28]
   18fb0:	str	r3, [sp, #32]
   18fb4:	ldr	r3, [pc, #2364]	; 198f8 <argp_parse@@Base+0x21e4>
   18fb8:	mov	r4, #0
   18fbc:	str	r3, [sp, #52]	; 0x34
   18fc0:	mov	r3, #3
   18fc4:	str	r3, [sp, #144]	; 0x90
   18fc8:	b	18aac <argp_parse@@Base+0x1398>
   18fcc:	mov	r4, #0
   18fd0:	mov	r3, #1
   18fd4:	str	r4, [sp, #36]	; 0x24
   18fd8:	str	r4, [sp, #32]
   18fdc:	str	r4, [sp, #52]	; 0x34
   18fe0:	str	r3, [sp, #28]
   18fe4:	b	18aac <argp_parse@@Base+0x1398>
   18fe8:	mov	r8, #0
   18fec:	cmp	r9, #0
   18ff0:	bne	18d9c <argp_parse@@Base+0x1688>
   18ff4:	ldr	r3, [sp, #36]	; 0x24
   18ff8:	ldr	r2, [sp, #144]	; 0x90
   18ffc:	cmp	r2, #2
   19000:	movne	r3, #0
   19004:	andeq	r3, r3, #1
   19008:	cmp	r3, #0
   1900c:	beq	18d9c <argp_parse@@Base+0x1688>
   19010:	b	19054 <argp_parse@@Base+0x1940>
   19014:	mov	r8, #0
   19018:	cmn	fp, #1
   1901c:	beq	197dc <argp_parse@@Base+0x20c8>
   19020:	subs	r3, fp, #1
   19024:	movne	r3, #1
   19028:	cmp	r3, #0
   1902c:	bne	18d9c <argp_parse@@Base+0x1688>
   19030:	b	18fec <argp_parse@@Base+0x18d8>
   19034:	mov	r5, #116	; 0x74
   19038:	ldr	r3, [sp, #36]	; 0x24
   1903c:	ldr	r2, [sp, #144]	; 0x90
   19040:	cmp	r2, #2
   19044:	movne	r3, #0
   19048:	andeq	r3, r3, #1
   1904c:	cmp	r3, #0
   19050:	beq	18ef4 <argp_parse@@Base+0x17e0>
   19054:	ldr	r3, [sp, #148]	; 0x94
   19058:	mov	ip, #0
   1905c:	bic	r3, r3, #2
   19060:	str	r3, [sp, #4]
   19064:	ldr	r3, [sp, #60]	; 0x3c
   19068:	ldr	r2, [sp, #24]
   1906c:	str	r3, [sp, #16]
   19070:	ldr	r3, [sp, #64]	; 0x40
   19074:	mov	r1, sl
   19078:	str	r3, [sp, #12]
   1907c:	ldr	r3, [sp, #144]	; 0x90
   19080:	ldr	r0, [sp, #40]	; 0x28
   19084:	str	r3, [sp]
   19088:	str	ip, [sp, #8]
   1908c:	mov	r3, fp
   19090:	bl	1897c <argp_parse@@Base+0x1268>
   19094:	mov	r4, r0
   19098:	ldr	r3, [pc, #2128]	; 198f0 <argp_parse@@Base+0x21dc>
   1909c:	ldr	r2, [sp, #100]	; 0x64
   190a0:	mov	r0, r4
   190a4:	ldr	r3, [r3]
   190a8:	cmp	r2, r3
   190ac:	bne	19bf4 <argp_parse@@Base+0x24e0>
   190b0:	add	sp, sp, #108	; 0x6c
   190b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190b8:	ldr	r3, [sp, #28]
   190bc:	ldr	r2, [sp, #36]	; 0x24
   190c0:	ands	r8, r3, r2
   190c4:	bne	19504 <argp_parse@@Base+0x1df0>
   190c8:	mov	r3, r5
   190cc:	ldr	r2, [sp, #36]	; 0x24
   190d0:	ldr	r1, [sp, #144]	; 0x90
   190d4:	cmp	r1, #2
   190d8:	movne	r2, #0
   190dc:	andeq	r2, r2, #1
   190e0:	cmp	r2, #0
   190e4:	bne	19054 <argp_parse@@Base+0x1940>
   190e8:	ldr	r2, [sp, #28]
   190ec:	cmp	r2, #0
   190f0:	beq	18d9c <argp_parse@@Base+0x1688>
   190f4:	mov	r5, r3
   190f8:	b	18ef4 <argp_parse@@Base+0x17e0>
   190fc:	mov	r3, #114	; 0x72
   19100:	b	190e8 <argp_parse@@Base+0x19d4>
   19104:	mov	r5, #118	; 0x76
   19108:	b	18f00 <argp_parse@@Base+0x17ec>
   1910c:	mov	r5, #98	; 0x62
   19110:	b	18f00 <argp_parse@@Base+0x17ec>
   19114:	mov	r5, #110	; 0x6e
   19118:	b	18f00 <argp_parse@@Base+0x17ec>
   1911c:	mov	r5, #102	; 0x66
   19120:	b	18f00 <argp_parse@@Base+0x17ec>
   19124:	mov	r5, #97	; 0x61
   19128:	b	18f00 <argp_parse@@Base+0x17ec>
   1912c:	ldr	r3, [sp, #144]	; 0x90
   19130:	cmp	r3, #3
   19134:	bne	18d9c <argp_parse@@Base+0x1688>
   19138:	b	18d74 <argp_parse@@Base+0x1660>
   1913c:	ldr	r3, [sp, #144]	; 0x90
   19140:	cmp	r3, #2
   19144:	bne	18d9c <argp_parse@@Base+0x1688>
   19148:	cmp	r4, sl
   1914c:	movcc	r3, #39	; 0x27
   19150:	ldrcc	r2, [sp, #40]	; 0x28
   19154:	mov	r5, #39	; 0x27
   19158:	strbcc	r3, [r2, r4]
   1915c:	add	r3, r4, #1
   19160:	cmp	sl, r3
   19164:	movhi	r1, #92	; 0x5c
   19168:	ldrhi	r2, [sp, #40]	; 0x28
   1916c:	strbhi	r1, [r2, r3]
   19170:	add	r3, r4, #2
   19174:	cmp	sl, r3
   19178:	movhi	r2, #39	; 0x27
   1917c:	ldrhi	r1, [sp, #40]	; 0x28
   19180:	add	r4, r4, #3
   19184:	strbhi	r2, [r1, r3]
   19188:	b	18d9c <argp_parse@@Base+0x1688>
   1918c:	mov	r8, #0
   19190:	ldr	r3, [sp, #56]	; 0x38
   19194:	cmp	r3, #1
   19198:	bne	19808 <argp_parse@@Base+0x20f4>
   1919c:	bl	11450 <__ctype_b_loc@plt>
   191a0:	ldr	r2, [sp, #56]	; 0x38
   191a4:	sxth	r3, r5
   191a8:	mov	ip, r2
   191ac:	lsl	r3, r3, #1
   191b0:	ldr	r2, [r0]
   191b4:	ldrh	r3, [r2, r3]
   191b8:	ldr	r2, [sp, #28]
   191bc:	eor	r3, r3, #16384	; 0x4000
   191c0:	and	r3, r2, r3, lsr #14
   191c4:	cmp	r3, #0
   191c8:	beq	18d9c <argp_parse@@Base+0x1688>
   191cc:	ldr	r3, [sp, #28]
   191d0:	mov	r2, ip
   191d4:	add	r0, ip, r9
   191d8:	ldr	lr, [sp, #36]	; 0x24
   191dc:	ldr	r1, [sp, #40]	; 0x28
   191e0:	b	1924c <argp_parse@@Base+0x1b38>
   191e4:	cmp	lr, #0
   191e8:	bne	19054 <argp_parse@@Base+0x1940>
   191ec:	cmp	r4, sl
   191f0:	movcc	r2, #92	; 0x5c
   191f4:	strbcc	r2, [r1, r4]
   191f8:	add	r2, r4, #1
   191fc:	cmp	sl, r2
   19200:	lsrhi	ip, r5, #6
   19204:	addhi	ip, ip, #48	; 0x30
   19208:	strbhi	ip, [r1, r2]
   1920c:	add	ip, r4, #2
   19210:	cmp	sl, ip
   19214:	lsrhi	r2, r5, #3
   19218:	and	r5, r5, #7
   1921c:	andhi	r2, r2, #7
   19220:	add	r5, r5, #48	; 0x30
   19224:	add	r4, r4, #3
   19228:	addhi	r2, r2, #48	; 0x30
   1922c:	strbhi	r2, [r1, ip]
   19230:	add	r9, r9, #1
   19234:	cmp	r9, r0
   19238:	bcs	18dc8 <argp_parse@@Base+0x16b4>
   1923c:	cmp	r4, sl
   19240:	strbcc	r5, [r1, r4]
   19244:	ldrb	r5, [r7, #1]!
   19248:	add	r4, r4, #1
   1924c:	cmp	r3, #0
   19250:	bne	191e4 <argp_parse@@Base+0x1ad0>
   19254:	cmp	r8, #0
   19258:	beq	19230 <argp_parse@@Base+0x1b1c>
   1925c:	cmp	r4, sl
   19260:	movcc	r2, #92	; 0x5c
   19264:	strbcc	r2, [r1, r4]
   19268:	mov	r8, #0
   1926c:	add	r4, r4, #1
   19270:	b	19230 <argp_parse@@Base+0x1b1c>
   19274:	ldr	r3, [sp, #24]
   19278:	ldrb	r5, [r3, r9]
   1927c:	cmp	r5, #126	; 0x7e
   19280:	ldrls	pc, [pc, r5, lsl #2]
   19284:	b	19190 <argp_parse@@Base+0x1a7c>
   19288:	andeq	r9, r1, r4, lsr #10
   1928c:	muleq	r1, r0, r1
   19290:	muleq	r1, r0, r1
   19294:	muleq	r1, r0, r1
   19298:	muleq	r1, r0, r1
   1929c:	muleq	r1, r0, r1
   192a0:	muleq	r1, r0, r1
   192a4:			; <UNDEFINED> instruction: 0x000194b4
   192a8:			; <UNDEFINED> instruction: 0x000194bc
   192ac:	andeq	r9, r1, r4, asr #9
   192b0:	andeq	r9, r1, ip, lsr #9
   192b4:	andeq	r9, r1, ip, lsl r5
   192b8:	andeq	r9, r1, r4, lsl r5
   192bc:	andeq	r9, r1, ip, lsl #10
   192c0:	muleq	r1, r0, r1
   192c4:	muleq	r1, r0, r1
   192c8:	muleq	r1, r0, r1
   192cc:	muleq	r1, r0, r1
   192d0:	muleq	r1, r0, r1
   192d4:	muleq	r1, r0, r1
   192d8:	muleq	r1, r0, r1
   192dc:	muleq	r1, r0, r1
   192e0:	muleq	r1, r0, r1
   192e4:	muleq	r1, r0, r1
   192e8:	muleq	r1, r0, r1
   192ec:	muleq	r1, r0, r1
   192f0:	muleq	r1, r0, r1
   192f4:	muleq	r1, r0, r1
   192f8:	muleq	r1, r0, r1
   192fc:	muleq	r1, r0, r1
   19300:	muleq	r1, r0, r1
   19304:	muleq	r1, r0, r1
   19308:	strdeq	r8, [r1], -r4
   1930c:	strdeq	r8, [r1], -r4
   19310:	strdeq	r8, [r1], -r4
   19314:	andeq	r8, r1, ip, ror #31
   19318:	strdeq	r8, [r1], -r4
   1931c:	andeq	r9, r1, ip, asr #9
   19320:	strdeq	r8, [r1], -r4
   19324:	andeq	r9, r1, r4, lsl #9
   19328:	strdeq	r8, [r1], -r4
   1932c:	strdeq	r8, [r1], -r4
   19330:	strdeq	r8, [r1], -r4
   19334:	andeq	r9, r1, ip, asr #9
   19338:	andeq	r9, r1, ip, asr #9
   1933c:	andeq	r9, r1, ip, asr #9
   19340:	andeq	r9, r1, ip, asr #9
   19344:	andeq	r9, r1, ip, asr #9
   19348:	andeq	r9, r1, ip, asr #9
   1934c:	andeq	r9, r1, ip, asr #9
   19350:	andeq	r9, r1, ip, asr #9
   19354:	andeq	r9, r1, ip, asr #9
   19358:	andeq	r9, r1, ip, asr #9
   1935c:	andeq	r9, r1, ip, asr #9
   19360:	andeq	r9, r1, ip, asr #9
   19364:	andeq	r9, r1, ip, asr #9
   19368:	andeq	r9, r1, ip, asr #9
   1936c:	andeq	r9, r1, ip, asr #9
   19370:	andeq	r9, r1, ip, asr #9
   19374:	strdeq	r8, [r1], -r4
   19378:	strdeq	r8, [r1], -r4
   1937c:	strdeq	r8, [r1], -r4
   19380:	strdeq	r8, [r1], -r4
   19384:	andeq	r8, r1, ip, asr sp
   19388:	muleq	r1, r0, r1
   1938c:	andeq	r9, r1, ip, asr #9
   19390:	andeq	r9, r1, ip, asr #9
   19394:	andeq	r9, r1, ip, asr #9
   19398:	andeq	r9, r1, ip, asr #9
   1939c:	andeq	r9, r1, ip, asr #9
   193a0:	andeq	r9, r1, ip, asr #9
   193a4:	andeq	r9, r1, ip, asr #9
   193a8:	andeq	r9, r1, ip, asr #9
   193ac:	andeq	r9, r1, ip, asr #9
   193b0:	andeq	r9, r1, ip, asr #9
   193b4:	andeq	r9, r1, ip, asr #9
   193b8:	andeq	r9, r1, ip, asr #9
   193bc:	andeq	r9, r1, ip, asr #9
   193c0:	andeq	r9, r1, ip, asr #9
   193c4:	andeq	r9, r1, ip, asr #9
   193c8:	andeq	r9, r1, ip, asr #9
   193cc:	andeq	r9, r1, ip, asr #9
   193d0:	andeq	r9, r1, ip, asr #9
   193d4:	andeq	r9, r1, ip, asr #9
   193d8:	andeq	r9, r1, ip, asr #9
   193dc:	andeq	r9, r1, ip, asr #9
   193e0:	andeq	r9, r1, ip, asr #9
   193e4:	andeq	r9, r1, ip, asr #9
   193e8:	andeq	r9, r1, ip, asr #9
   193ec:	andeq	r9, r1, ip, asr #9
   193f0:	andeq	r9, r1, ip, asr #9
   193f4:	strdeq	r8, [r1], -r4
   193f8:	andeq	r9, r1, r0, asr r5
   193fc:	andeq	r9, r1, ip, asr #9
   19400:	strdeq	r8, [r1], -r4
   19404:	andeq	r9, r1, ip, asr #9
   19408:	strdeq	r8, [r1], -r4
   1940c:	andeq	r9, r1, ip, asr #9
   19410:	andeq	r9, r1, ip, asr #9
   19414:	andeq	r9, r1, ip, asr #9
   19418:	andeq	r9, r1, ip, asr #9
   1941c:	andeq	r9, r1, ip, asr #9
   19420:	andeq	r9, r1, ip, asr #9
   19424:	andeq	r9, r1, ip, asr #9
   19428:	andeq	r9, r1, ip, asr #9
   1942c:	andeq	r9, r1, ip, asr #9
   19430:	andeq	r9, r1, ip, asr #9
   19434:	andeq	r9, r1, ip, asr #9
   19438:	andeq	r9, r1, ip, asr #9
   1943c:	andeq	r9, r1, ip, asr #9
   19440:	andeq	r9, r1, ip, asr #9
   19444:	andeq	r9, r1, ip, asr #9
   19448:	andeq	r9, r1, ip, asr #9
   1944c:	andeq	r9, r1, ip, asr #9
   19450:	andeq	r9, r1, ip, asr #9
   19454:	andeq	r9, r1, ip, asr #9
   19458:	andeq	r9, r1, ip, asr #9
   1945c:	andeq	r9, r1, ip, asr #9
   19460:	andeq	r9, r1, ip, asr #9
   19464:	andeq	r9, r1, ip, asr #9
   19468:	andeq	r9, r1, ip, asr #9
   1946c:	andeq	r9, r1, ip, asr #9
   19470:	andeq	r9, r1, ip, asr #9
   19474:	andeq	r9, r1, r8, lsl r0
   19478:	strdeq	r8, [r1], -r4
   1947c:	andeq	r9, r1, r8, lsl r0
   19480:	andeq	r8, r1, ip, ror #31
   19484:	ldr	r3, [sp, #144]	; 0x90
   19488:	cmp	r3, #2
   1948c:	movne	r8, #0
   19490:	movne	r5, #39	; 0x27
   19494:	bne	18d9c <argp_parse@@Base+0x1688>
   19498:	ldr	r3, [sp, #36]	; 0x24
   1949c:	cmp	r3, #0
   194a0:	bne	19054 <argp_parse@@Base+0x1940>
   194a4:	mov	r8, r3
   194a8:	b	19148 <argp_parse@@Base+0x1a34>
   194ac:	mov	r3, #110	; 0x6e
   194b0:	b	190cc <argp_parse@@Base+0x19b8>
   194b4:	mov	r3, #97	; 0x61
   194b8:	b	190e8 <argp_parse@@Base+0x19d4>
   194bc:	mov	r3, #98	; 0x62
   194c0:	b	190e8 <argp_parse@@Base+0x19d4>
   194c4:	mov	r3, #116	; 0x74
   194c8:	b	190cc <argp_parse@@Base+0x19b8>
   194cc:	ldr	r3, [sp, #44]	; 0x2c
   194d0:	cmp	r3, #0
   194d4:	beq	19504 <argp_parse@@Base+0x1df0>
   194d8:	ldr	r3, [sp, #48]	; 0x30
   194dc:	cmp	r3, #0
   194e0:	beq	19504 <argp_parse@@Base+0x1df0>
   194e4:	lsr	r3, r5, #5
   194e8:	ldr	r2, [sp, #48]	; 0x30
   194ec:	uxtb	r3, r3
   194f0:	and	r1, r5, #31
   194f4:	ldr	r2, [r2, r3, lsl #2]
   194f8:	lsr	r3, r2, r1
   194fc:	tst	r3, #1
   19500:	bne	18ef4 <argp_parse@@Base+0x17e0>
   19504:	add	r9, r9, #1
   19508:	b	18dc8 <argp_parse@@Base+0x16b4>
   1950c:	mov	r3, #114	; 0x72
   19510:	b	190cc <argp_parse@@Base+0x19b8>
   19514:	mov	r3, #102	; 0x66
   19518:	b	190e8 <argp_parse@@Base+0x19d4>
   1951c:	mov	r3, #118	; 0x76
   19520:	b	190e8 <argp_parse@@Base+0x19d4>
   19524:	ldr	r3, [sp, #28]
   19528:	cmp	r3, #0
   1952c:	bne	18e78 <argp_parse@@Base+0x1764>
   19530:	ldr	r3, [sp, #148]	; 0x94
   19534:	tst	r3, #1
   19538:	addne	r9, r9, #1
   1953c:	bne	18ac0 <argp_parse@@Base+0x13ac>
   19540:	ldr	r3, [sp, #36]	; 0x24
   19544:	cmp	r3, #0
   19548:	beq	19504 <argp_parse@@Base+0x1df0>
   1954c:	b	194d8 <argp_parse@@Base+0x1dc4>
   19550:	ldr	r3, [sp, #28]
   19554:	ldr	r2, [sp, #36]	; 0x24
   19558:	ands	r8, r3, r2
   1955c:	bne	19054 <argp_parse@@Base+0x1940>
   19560:	b	190c8 <argp_parse@@Base+0x19b4>
   19564:	ldrb	r5, [r7]
   19568:	cmp	r5, #126	; 0x7e
   1956c:	ldrls	pc, [pc, r5, lsl #2]
   19570:	b	1918c <argp_parse@@Base+0x1a78>
   19574:	andeq	r8, r1, r8, ror lr
   19578:	andeq	r9, r1, ip, lsl #3
   1957c:	andeq	r9, r1, ip, lsl #3
   19580:	andeq	r9, r1, ip, lsl #3
   19584:	andeq	r9, r1, ip, lsl #3
   19588:	andeq	r9, r1, ip, lsl #3
   1958c:	andeq	r9, r1, ip, lsl #3
   19590:	andeq	r9, r1, r8, lsl #15
   19594:	strdeq	r9, [r1], -r8
   19598:	andeq	r9, r1, r4, lsr r0
   1959c:	andeq	r9, r1, r0, lsl #15
   195a0:			; <UNDEFINED> instruction: 0x000197b4
   195a4:	andeq	r9, r1, r8, ror r7
   195a8:	muleq	r1, r0, r7
   195ac:	andeq	r9, r1, ip, lsl #3
   195b0:	andeq	r9, r1, ip, lsl #3
   195b4:	andeq	r9, r1, ip, lsl #3
   195b8:	andeq	r9, r1, ip, lsl #3
   195bc:	andeq	r9, r1, ip, lsl #3
   195c0:	andeq	r9, r1, ip, lsl #3
   195c4:	andeq	r9, r1, ip, lsl #3
   195c8:	andeq	r9, r1, ip, lsl #3
   195cc:	andeq	r9, r1, ip, lsl #3
   195d0:	andeq	r9, r1, ip, lsl #3
   195d4:	andeq	r9, r1, ip, lsl #3
   195d8:	andeq	r9, r1, ip, lsl #3
   195dc:	andeq	r9, r1, ip, lsl #3
   195e0:	andeq	r9, r1, ip, lsl #3
   195e4:	andeq	r9, r1, ip, lsl #3
   195e8:	andeq	r9, r1, ip, lsl #3
   195ec:	andeq	r9, r1, ip, lsl #3
   195f0:	andeq	r9, r1, ip, lsl #3
   195f4:			; <UNDEFINED> instruction: 0x000197bc
   195f8:			; <UNDEFINED> instruction: 0x000197bc
   195fc:			; <UNDEFINED> instruction: 0x000197bc
   19600:	andeq	r8, r1, r8, ror #31
   19604:			; <UNDEFINED> instruction: 0x000197bc
   19608:	andeq	r9, r1, r0, ror r7
   1960c:			; <UNDEFINED> instruction: 0x000197bc
   19610:	andeq	r9, r1, r4, lsl #9
   19614:			; <UNDEFINED> instruction: 0x000197bc
   19618:			; <UNDEFINED> instruction: 0x000197bc
   1961c:			; <UNDEFINED> instruction: 0x000197bc
   19620:	andeq	r9, r1, r0, ror r7
   19624:	andeq	r9, r1, r0, ror r7
   19628:	andeq	r9, r1, r0, ror r7
   1962c:	andeq	r9, r1, r0, ror r7
   19630:	andeq	r9, r1, r0, ror r7
   19634:	andeq	r9, r1, r0, ror r7
   19638:	andeq	r9, r1, r0, ror r7
   1963c:	andeq	r9, r1, r0, ror r7
   19640:	andeq	r9, r1, r0, ror r7
   19644:	andeq	r9, r1, r0, ror r7
   19648:	andeq	r9, r1, r0, ror r7
   1964c:	andeq	r9, r1, r0, ror r7
   19650:	andeq	r9, r1, r0, ror r7
   19654:	andeq	r9, r1, r0, ror r7
   19658:	andeq	r9, r1, r0, ror r7
   1965c:	andeq	r9, r1, r0, ror r7
   19660:			; <UNDEFINED> instruction: 0x000197bc
   19664:			; <UNDEFINED> instruction: 0x000197bc
   19668:			; <UNDEFINED> instruction: 0x000197bc
   1966c:			; <UNDEFINED> instruction: 0x000197bc
   19670:	andeq	r8, r1, ip, asr sp
   19674:	andeq	r9, r1, ip, lsl #3
   19678:	andeq	r9, r1, r0, ror r7
   1967c:	andeq	r9, r1, r0, ror r7
   19680:	andeq	r9, r1, r0, ror r7
   19684:	andeq	r9, r1, r0, ror r7
   19688:	andeq	r9, r1, r0, ror r7
   1968c:	andeq	r9, r1, r0, ror r7
   19690:	andeq	r9, r1, r0, ror r7
   19694:	andeq	r9, r1, r0, ror r7
   19698:	andeq	r9, r1, r0, ror r7
   1969c:	andeq	r9, r1, r0, ror r7
   196a0:	andeq	r9, r1, r0, ror r7
   196a4:	andeq	r9, r1, r0, ror r7
   196a8:	andeq	r9, r1, r0, ror r7
   196ac:	andeq	r9, r1, r0, ror r7
   196b0:	andeq	r9, r1, r0, ror r7
   196b4:	andeq	r9, r1, r0, ror r7
   196b8:	andeq	r9, r1, r0, ror r7
   196bc:	andeq	r9, r1, r0, ror r7
   196c0:	andeq	r9, r1, r0, ror r7
   196c4:	andeq	r9, r1, r0, ror r7
   196c8:	andeq	r9, r1, r0, ror r7
   196cc:	andeq	r9, r1, r0, ror r7
   196d0:	andeq	r9, r1, r0, ror r7
   196d4:	andeq	r9, r1, r0, ror r7
   196d8:	andeq	r9, r1, r0, ror r7
   196dc:	andeq	r9, r1, r0, ror r7
   196e0:			; <UNDEFINED> instruction: 0x000197bc
   196e4:	strheq	r9, [r1], -r8
   196e8:	andeq	r9, r1, r0, ror r7
   196ec:			; <UNDEFINED> instruction: 0x000197bc
   196f0:	andeq	r9, r1, r0, ror r7
   196f4:			; <UNDEFINED> instruction: 0x000197bc
   196f8:	andeq	r9, r1, r0, ror r7
   196fc:	andeq	r9, r1, r0, ror r7
   19700:	andeq	r9, r1, r0, ror r7
   19704:	andeq	r9, r1, r0, ror r7
   19708:	andeq	r9, r1, r0, ror r7
   1970c:	andeq	r9, r1, r0, ror r7
   19710:	andeq	r9, r1, r0, ror r7
   19714:	andeq	r9, r1, r0, ror r7
   19718:	andeq	r9, r1, r0, ror r7
   1971c:	andeq	r9, r1, r0, ror r7
   19720:	andeq	r9, r1, r0, ror r7
   19724:	andeq	r9, r1, r0, ror r7
   19728:	andeq	r9, r1, r0, ror r7
   1972c:	andeq	r9, r1, r0, ror r7
   19730:	andeq	r9, r1, r0, ror r7
   19734:	andeq	r9, r1, r0, ror r7
   19738:	andeq	r9, r1, r0, ror r7
   1973c:	andeq	r9, r1, r0, ror r7
   19740:	andeq	r9, r1, r0, ror r7
   19744:	andeq	r9, r1, r0, ror r7
   19748:	andeq	r9, r1, r0, ror r7
   1974c:	andeq	r9, r1, r0, ror r7
   19750:	andeq	r9, r1, r0, ror r7
   19754:	andeq	r9, r1, r0, ror r7
   19758:	andeq	r9, r1, r0, ror r7
   1975c:	andeq	r9, r1, r0, ror r7
   19760:	andeq	r9, r1, r4, lsl r0
   19764:			; <UNDEFINED> instruction: 0x000197bc
   19768:	andeq	r9, r1, r4, lsl r0
   1976c:	andeq	r8, r1, r8, ror #31
   19770:	mov	r8, #0
   19774:	b	18ec4 <argp_parse@@Base+0x17b0>
   19778:	mov	r5, #102	; 0x66
   1977c:	b	18ef4 <argp_parse@@Base+0x17e0>
   19780:	mov	r5, #110	; 0x6e
   19784:	b	19038 <argp_parse@@Base+0x1924>
   19788:	mov	r5, #97	; 0x61
   1978c:	b	18ef4 <argp_parse@@Base+0x17e0>
   19790:	ldr	r3, [sp, #36]	; 0x24
   19794:	ldr	r2, [sp, #144]	; 0x90
   19798:	cmp	r2, #2
   1979c:	movne	r3, #0
   197a0:	andeq	r3, r3, #1
   197a4:	cmp	r3, #0
   197a8:	bne	19054 <argp_parse@@Base+0x1940>
   197ac:	mov	r5, #114	; 0x72
   197b0:	b	18ef4 <argp_parse@@Base+0x17e0>
   197b4:	mov	r5, #118	; 0x76
   197b8:	b	18ef4 <argp_parse@@Base+0x17e0>
   197bc:	ldr	r8, [sp, #36]	; 0x24
   197c0:	ldr	r3, [sp, #144]	; 0x90
   197c4:	cmp	r3, #2
   197c8:	movne	r8, #0
   197cc:	andeq	r8, r8, #1
   197d0:	cmp	r8, #0
   197d4:	beq	18ec4 <argp_parse@@Base+0x17b0>
   197d8:	b	19054 <argp_parse@@Base+0x1940>
   197dc:	ldr	r3, [sp, #24]
   197e0:	ldrb	r3, [r3, #1]
   197e4:	adds	r3, r3, #0
   197e8:	movne	r3, #1
   197ec:	b	19028 <argp_parse@@Base+0x1914>
   197f0:	ldr	r3, [sp, #36]	; 0x24
   197f4:	cmp	r3, #0
   197f8:	bne	19054 <argp_parse@@Base+0x1940>
   197fc:	mov	r8, r3
   19800:	mov	r5, #63	; 0x3f
   19804:	b	18d9c <argp_parse@@Base+0x1688>
   19808:	mov	r3, #0
   1980c:	cmn	fp, #1
   19810:	str	r3, [sp, #96]	; 0x60
   19814:	str	r3, [sp, #92]	; 0x5c
   19818:	bne	19828 <argp_parse@@Base+0x2114>
   1981c:	ldr	r0, [sp, #24]
   19820:	bl	11468 <strlen@plt>
   19824:	mov	fp, r0
   19828:	mov	r3, #0
   1982c:	str	sl, [sp, #68]	; 0x44
   19830:	ldr	sl, [sp, #24]
   19834:	str	r5, [sp, #72]	; 0x48
   19838:	mov	r5, r3
   1983c:	str	r8, [sp, #76]	; 0x4c
   19840:	str	r4, [sp, #80]	; 0x50
   19844:	str	r7, [sp, #84]	; 0x54
   19848:	add	r4, r9, r5
   1984c:	add	r8, sl, r4
   19850:	mov	r1, r8
   19854:	sub	r2, fp, r4
   19858:	add	r3, sp, #92	; 0x5c
   1985c:	add	r0, sp, #88	; 0x58
   19860:	bl	113c0 <mbrtowc@plt>
   19864:	subs	r7, r0, #0
   19868:	beq	198bc <argp_parse@@Base+0x21a8>
   1986c:	cmn	r7, #1
   19870:	beq	19a70 <argp_parse@@Base+0x235c>
   19874:	cmn	r7, #2
   19878:	beq	19b88 <argp_parse@@Base+0x2474>
   1987c:	ldr	r3, [sp, #36]	; 0x24
   19880:	ldr	r2, [sp, #144]	; 0x90
   19884:	cmp	r2, #2
   19888:	movne	r3, #0
   1988c:	andeq	r3, r3, #1
   19890:	cmp	r3, #0
   19894:	bne	19900 <argp_parse@@Base+0x21ec>
   19898:	ldr	r0, [sp, #88]	; 0x58
   1989c:	bl	11384 <iswprint@plt>
   198a0:	add	r5, r5, r7
   198a4:	cmp	r0, #0
   198a8:	add	r0, sp, #92	; 0x5c
   198ac:	moveq	r6, #0
   198b0:	bl	112f4 <mbsinit@plt>
   198b4:	cmp	r0, #0
   198b8:	beq	19848 <argp_parse@@Base+0x2134>
   198bc:	ldr	r2, [sp, #28]
   198c0:	mov	ip, r5
   198c4:	eor	r3, r6, #1
   198c8:	ldr	r5, [sp, #72]	; 0x48
   198cc:	ldr	r8, [sp, #76]	; 0x4c
   198d0:	ldr	r4, [sp, #80]	; 0x50
   198d4:	ldr	sl, [sp, #68]	; 0x44
   198d8:	ldr	r7, [sp, #84]	; 0x54
   198dc:	and	r3, r3, r2
   198e0:	cmp	ip, #1
   198e4:	mov	r2, ip
   198e8:	bhi	191d0 <argp_parse@@Base+0x1abc>
   198ec:	b	191c4 <argp_parse@@Base+0x1ab0>
   198f0:	andeq	lr, r2, r8, lsl #30
   198f4:	muleq	r1, r4, fp
   198f8:	andeq	sp, r1, ip, ror fp
   198fc:	muleq	r1, r0, fp
   19900:	cmp	r7, #1
   19904:	beq	19898 <argp_parse@@Base+0x2184>
   19908:	add	r1, r4, #1
   1990c:	add	r3, sl, r7
   19910:	add	r1, sl, r1
   19914:	add	r4, r3, r4
   19918:	ldrb	r3, [r1], #1
   1991c:	sub	r3, r3, #91	; 0x5b
   19920:	cmp	r3, #33	; 0x21
   19924:	ldrls	pc, [pc, r3, lsl #2]
   19928:	b	199b4 <argp_parse@@Base+0x22a0>
   1992c:	andeq	r9, r1, r0, asr #19
   19930:	andeq	r9, r1, r0, asr #19
   19934:			; <UNDEFINED> instruction: 0x000199b4
   19938:	andeq	r9, r1, r0, asr #19
   1993c:			; <UNDEFINED> instruction: 0x000199b4
   19940:	andeq	r9, r1, r0, asr #19
   19944:			; <UNDEFINED> instruction: 0x000199b4
   19948:			; <UNDEFINED> instruction: 0x000199b4
   1994c:			; <UNDEFINED> instruction: 0x000199b4
   19950:			; <UNDEFINED> instruction: 0x000199b4
   19954:			; <UNDEFINED> instruction: 0x000199b4
   19958:			; <UNDEFINED> instruction: 0x000199b4
   1995c:			; <UNDEFINED> instruction: 0x000199b4
   19960:			; <UNDEFINED> instruction: 0x000199b4
   19964:			; <UNDEFINED> instruction: 0x000199b4
   19968:			; <UNDEFINED> instruction: 0x000199b4
   1996c:			; <UNDEFINED> instruction: 0x000199b4
   19970:			; <UNDEFINED> instruction: 0x000199b4
   19974:			; <UNDEFINED> instruction: 0x000199b4
   19978:			; <UNDEFINED> instruction: 0x000199b4
   1997c:			; <UNDEFINED> instruction: 0x000199b4
   19980:			; <UNDEFINED> instruction: 0x000199b4
   19984:			; <UNDEFINED> instruction: 0x000199b4
   19988:			; <UNDEFINED> instruction: 0x000199b4
   1998c:			; <UNDEFINED> instruction: 0x000199b4
   19990:			; <UNDEFINED> instruction: 0x000199b4
   19994:			; <UNDEFINED> instruction: 0x000199b4
   19998:			; <UNDEFINED> instruction: 0x000199b4
   1999c:			; <UNDEFINED> instruction: 0x000199b4
   199a0:			; <UNDEFINED> instruction: 0x000199b4
   199a4:			; <UNDEFINED> instruction: 0x000199b4
   199a8:			; <UNDEFINED> instruction: 0x000199b4
   199ac:			; <UNDEFINED> instruction: 0x000199b4
   199b0:	andeq	r9, r1, r0, asr #19
   199b4:	cmp	r4, r1
   199b8:	bne	19918 <argp_parse@@Base+0x2204>
   199bc:	b	19898 <argp_parse@@Base+0x2184>
   199c0:	ldr	sl, [sp, #68]	; 0x44
   199c4:	b	19054 <argp_parse@@Base+0x1940>
   199c8:	ldr	r3, [pc, #-212]	; 198fc <argp_parse@@Base+0x21e8>
   199cc:	mov	r4, #1
   199d0:	str	r4, [sp, #32]
   199d4:	str	r3, [sp, #52]	; 0x34
   199d8:	str	sl, [sp, #36]	; 0x24
   199dc:	str	sl, [sp, #28]
   199e0:	b	18aac <argp_parse@@Base+0x1398>
   199e4:	ldr	r3, [pc, #-244]	; 198f8 <argp_parse@@Base+0x21e4>
   199e8:	mov	r4, #1
   199ec:	str	r4, [sp, #28]
   199f0:	str	r4, [sp, #32]
   199f4:	str	sl, [sp, #36]	; 0x24
   199f8:	str	r3, [sp, #52]	; 0x34
   199fc:	b	18aac <argp_parse@@Base+0x1398>
   19a00:	cmp	sl, r2
   19a04:	movhi	r3, #48	; 0x30
   19a08:	ldrhi	r1, [sp, #40]	; 0x28
   19a0c:	mov	r5, #48	; 0x30
   19a10:	strbhi	r3, [r1, r2]
   19a14:	add	r3, r4, #2
   19a18:	cmp	sl, r3
   19a1c:	movhi	r2, #48	; 0x30
   19a20:	ldrhi	r1, [sp, #40]	; 0x28
   19a24:	add	r4, r4, #3
   19a28:	strbhi	r2, [r1, r3]
   19a2c:	b	18ec4 <argp_parse@@Base+0x17b0>
   19a30:	mov	r3, #1
   19a34:	str	r3, [sp, #36]	; 0x24
   19a38:	str	r3, [sp, #28]
   19a3c:	str	r3, [sp, #32]
   19a40:	ldr	r3, [pc, #-336]	; 198f8 <argp_parse@@Base+0x21e4>
   19a44:	mov	r4, #0
   19a48:	str	r3, [sp, #52]	; 0x34
   19a4c:	b	18aac <argp_parse@@Base+0x1398>
   19a50:	mov	r3, #1
   19a54:	str	r3, [sp, #36]	; 0x24
   19a58:	str	r3, [sp, #32]
   19a5c:	ldr	r3, [pc, #-360]	; 198fc <argp_parse@@Base+0x21e8>
   19a60:	mov	r4, #0
   19a64:	str	r4, [sp, #28]
   19a68:	str	r3, [sp, #52]	; 0x34
   19a6c:	b	18aac <argp_parse@@Base+0x1398>
   19a70:	mov	ip, r5
   19a74:	ldr	r8, [sp, #76]	; 0x4c
   19a78:	ldr	r5, [sp, #72]	; 0x48
   19a7c:	ldr	r4, [sp, #80]	; 0x50
   19a80:	ldr	sl, [sp, #68]	; 0x44
   19a84:	ldr	r7, [sp, #84]	; 0x54
   19a88:	ldr	r3, [sp, #28]
   19a8c:	b	198e0 <argp_parse@@Base+0x21cc>
   19a90:	ldr	r2, [sp, #24]
   19a94:	ldrb	r2, [r2, r3]
   19a98:	sub	r1, r2, #33	; 0x21
   19a9c:	cmp	r1, #29
   19aa0:	ldrls	pc, [pc, r1, lsl #2]
   19aa4:	b	18d9c <argp_parse@@Base+0x1688>
   19aa8:	andeq	r9, r1, r0, lsr #22
   19aac:	muleq	r1, ip, sp
   19ab0:	muleq	r1, ip, sp
   19ab4:	muleq	r1, ip, sp
   19ab8:	muleq	r1, ip, sp
   19abc:	muleq	r1, ip, sp
   19ac0:	andeq	r9, r1, r0, lsr #22
   19ac4:	andeq	r9, r1, r0, lsr #22
   19ac8:	andeq	r9, r1, r0, lsr #22
   19acc:	muleq	r1, ip, sp
   19ad0:	muleq	r1, ip, sp
   19ad4:	muleq	r1, ip, sp
   19ad8:	andeq	r9, r1, r0, lsr #22
   19adc:	muleq	r1, ip, sp
   19ae0:	andeq	r9, r1, r0, lsr #22
   19ae4:	muleq	r1, ip, sp
   19ae8:	muleq	r1, ip, sp
   19aec:	muleq	r1, ip, sp
   19af0:	muleq	r1, ip, sp
   19af4:	muleq	r1, ip, sp
   19af8:	muleq	r1, ip, sp
   19afc:	muleq	r1, ip, sp
   19b00:	muleq	r1, ip, sp
   19b04:	muleq	r1, ip, sp
   19b08:	muleq	r1, ip, sp
   19b0c:	muleq	r1, ip, sp
   19b10:	muleq	r1, ip, sp
   19b14:	andeq	r9, r1, r0, lsr #22
   19b18:	andeq	r9, r1, r0, lsr #22
   19b1c:	andeq	r9, r1, r0, lsr #22
   19b20:	ldr	r1, [sp, #36]	; 0x24
   19b24:	cmp	r1, #0
   19b28:	bne	19054 <argp_parse@@Base+0x1940>
   19b2c:	cmp	r4, sl
   19b30:	movcc	r1, #63	; 0x3f
   19b34:	ldrcc	r0, [sp, #40]	; 0x28
   19b38:	mov	r5, r2
   19b3c:	mov	r9, r3
   19b40:	strbcc	r1, [r0, r4]
   19b44:	add	r1, r4, #1
   19b48:	cmp	sl, r1
   19b4c:	movhi	r0, #34	; 0x22
   19b50:	ldrhi	ip, [sp, #40]	; 0x28
   19b54:	strbhi	r0, [ip, r1]
   19b58:	add	r1, r4, #2
   19b5c:	cmp	sl, r1
   19b60:	movhi	r0, #34	; 0x22
   19b64:	ldrhi	ip, [sp, #40]	; 0x28
   19b68:	strbhi	r0, [ip, r1]
   19b6c:	add	r1, r4, #3
   19b70:	cmp	sl, r1
   19b74:	movhi	r0, #63	; 0x3f
   19b78:	ldrhi	ip, [sp, #40]	; 0x28
   19b7c:	add	r4, r4, #4
   19b80:	strbhi	r0, [ip, r1]
   19b84:	b	18d9c <argp_parse@@Base+0x1688>
   19b88:	mov	r1, r4
   19b8c:	cmp	r1, fp
   19b90:	mov	r3, r8
   19b94:	mov	r2, r5
   19b98:	mov	ip, r5
   19b9c:	ldr	r8, [sp, #76]	; 0x4c
   19ba0:	ldr	r5, [sp, #72]	; 0x48
   19ba4:	ldr	r4, [sp, #80]	; 0x50
   19ba8:	ldr	sl, [sp, #68]	; 0x44
   19bac:	ldr	r7, [sp, #84]	; 0x54
   19bb0:	bcs	19bec <argp_parse@@Base+0x24d8>
   19bb4:	mov	r1, r3
   19bb8:	ldrb	r3, [r3]
   19bbc:	cmp	r3, #0
   19bc0:	beq	19bec <argp_parse@@Base+0x24d8>
   19bc4:	mov	r3, r1
   19bc8:	b	19bd8 <argp_parse@@Base+0x24c4>
   19bcc:	ldrb	r1, [r3, #1]!
   19bd0:	cmp	r1, #0
   19bd4:	beq	19be8 <argp_parse@@Base+0x24d4>
   19bd8:	add	r2, r2, #1
   19bdc:	add	r1, r9, r2
   19be0:	cmp	fp, r1
   19be4:	bhi	19bcc <argp_parse@@Base+0x24b8>
   19be8:	mov	ip, r2
   19bec:	ldr	r3, [sp, #28]
   19bf0:	b	198e0 <argp_parse@@Base+0x21cc>
   19bf4:	bl	1133c <__stack_chk_fail@plt>
   19bf8:	mov	r5, #98	; 0x62
   19bfc:	b	18ef4 <argp_parse@@Base+0x17e0>
   19c00:	bl	115d0 <abort@plt>
   19c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c08:	sub	sp, sp, #44	; 0x2c
   19c0c:	mov	r6, r0
   19c10:	mov	r4, r3
   19c14:	mov	sl, r1
   19c18:	mov	fp, r2
   19c1c:	bl	1148c <__errno_location@plt>
   19c20:	ldr	r7, [pc, #364]	; 19d94 <argp_parse@@Base+0x2680>
   19c24:	cmp	r6, #0
   19c28:	ldr	r5, [r7]
   19c2c:	ldr	r3, [r0]
   19c30:	str	r3, [sp, #24]
   19c34:	blt	19d90 <argp_parse@@Base+0x267c>
   19c38:	ldr	r3, [r7, #4]
   19c3c:	mov	r8, r0
   19c40:	cmp	r3, r6
   19c44:	bhi	19c90 <argp_parse@@Base+0x257c>
   19c48:	add	r9, r6, #1
   19c4c:	cmn	r9, #-536870911	; 0xe0000001
   19c50:	bhi	19d8c <argp_parse@@Base+0x2678>
   19c54:	add	r3, r7, #8
   19c58:	cmp	r5, r3
   19c5c:	lsl	r1, r9, #3
   19c60:	beq	19d6c <argp_parse@@Base+0x2658>
   19c64:	mov	r0, r5
   19c68:	bl	1aa28 <argp_parse@@Base+0x3314>
   19c6c:	mov	r5, r0
   19c70:	str	r0, [r7]
   19c74:	ldr	r0, [r7, #4]
   19c78:	mov	r1, #0
   19c7c:	sub	r2, r9, r0
   19c80:	add	r0, r5, r0, lsl #3
   19c84:	lsl	r2, r2, #3
   19c88:	bl	114bc <memset@plt>
   19c8c:	str	r9, [r7, #4]
   19c90:	add	r3, r5, r6, lsl #3
   19c94:	ldr	r1, [r4, #4]
   19c98:	ldr	r7, [r3, #4]
   19c9c:	ldr	r9, [r5, r6, lsl #3]
   19ca0:	ldr	r2, [r4, #40]	; 0x28
   19ca4:	ldr	ip, [r4, #44]	; 0x2c
   19ca8:	str	r3, [sp, #28]
   19cac:	ldr	r3, [r4]
   19cb0:	orr	r1, r1, #1
   19cb4:	add	lr, r4, #8
   19cb8:	str	r1, [sp, #36]	; 0x24
   19cbc:	str	r1, [sp, #4]
   19cc0:	str	r2, [sp, #12]
   19cc4:	str	r3, [sp]
   19cc8:	mov	r0, r7
   19ccc:	mov	r1, r9
   19cd0:	str	ip, [sp, #16]
   19cd4:	str	lr, [sp, #8]
   19cd8:	mov	r3, fp
   19cdc:	mov	r2, sl
   19ce0:	str	lr, [sp, #32]
   19ce4:	bl	1897c <argp_parse@@Base+0x1268>
   19ce8:	cmp	r9, r0
   19cec:	bhi	19d58 <argp_parse@@Base+0x2644>
   19cf0:	ldr	r3, [pc, #160]	; 19d98 <argp_parse@@Base+0x2684>
   19cf4:	add	r9, r0, #1
   19cf8:	cmp	r7, r3
   19cfc:	str	r9, [r5, r6, lsl #3]
   19d00:	beq	19d0c <argp_parse@@Base+0x25f8>
   19d04:	mov	r0, r7
   19d08:	bl	112c4 <free@plt>
   19d0c:	mov	r0, r9
   19d10:	bl	1a9e0 <argp_parse@@Base+0x32cc>
   19d14:	ldr	lr, [sp, #28]
   19d18:	ldr	ip, [r4, #44]	; 0x2c
   19d1c:	ldr	r5, [r4, #40]	; 0x28
   19d20:	mov	r3, fp
   19d24:	mov	r2, sl
   19d28:	mov	r1, r9
   19d2c:	str	r0, [lr, #4]
   19d30:	ldr	lr, [r4]
   19d34:	ldr	r4, [sp, #32]
   19d38:	str	ip, [sp, #16]
   19d3c:	str	r4, [sp, #8]
   19d40:	ldr	r4, [sp, #36]	; 0x24
   19d44:	str	r5, [sp, #12]
   19d48:	str	r4, [sp, #4]
   19d4c:	str	lr, [sp]
   19d50:	mov	r7, r0
   19d54:	bl	1897c <argp_parse@@Base+0x1268>
   19d58:	ldr	r3, [sp, #24]
   19d5c:	mov	r0, r7
   19d60:	str	r3, [r8]
   19d64:	add	sp, sp, #44	; 0x2c
   19d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d6c:	mov	r0, #0
   19d70:	bl	1aa28 <argp_parse@@Base+0x3314>
   19d74:	ldr	r3, [pc, #32]	; 19d9c <argp_parse@@Base+0x2688>
   19d78:	mov	r5, r0
   19d7c:	ldm	r3, {r0, r1}
   19d80:	str	r5, [r7]
   19d84:	stm	r5, {r0, r1}
   19d88:	b	19c74 <argp_parse@@Base+0x2560>
   19d8c:	bl	1abc0 <argp_parse@@Base+0x34ac>
   19d90:	bl	115d0 <abort@plt>
   19d94:	muleq	r2, r0, r2
   19d98:	andeq	pc, r2, r4, lsl r3	; <UNPREDICTABLE>
   19d9c:	muleq	r2, r8, r2
   19da0:	push	{r4, r5, r6, lr}
   19da4:	mov	r5, r0
   19da8:	bl	1148c <__errno_location@plt>
   19dac:	cmp	r5, #0
   19db0:	mov	r1, #48	; 0x30
   19db4:	mov	r4, r0
   19db8:	ldr	r0, [pc, #16]	; 19dd0 <argp_parse@@Base+0x26bc>
   19dbc:	ldr	r6, [r4]
   19dc0:	movne	r0, r5
   19dc4:	bl	1ab80 <argp_parse@@Base+0x346c>
   19dc8:	str	r6, [r4]
   19dcc:	pop	{r4, r5, r6, pc}
   19dd0:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19dd4:	ldr	r3, [pc, #12]	; 19de8 <argp_parse@@Base+0x26d4>
   19dd8:	cmp	r0, #0
   19ddc:	moveq	r0, r3
   19de0:	ldr	r0, [r0]
   19de4:	bx	lr
   19de8:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19dec:	ldr	r3, [pc, #12]	; 19e00 <argp_parse@@Base+0x26ec>
   19df0:	cmp	r0, #0
   19df4:	moveq	r0, r3
   19df8:	str	r1, [r0]
   19dfc:	bx	lr
   19e00:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19e04:	ldr	r3, [pc, #52]	; 19e40 <argp_parse@@Base+0x272c>
   19e08:	cmp	r0, #0
   19e0c:	moveq	r0, r3
   19e10:	add	r3, r0, #8
   19e14:	push	{lr}		; (str lr, [sp, #-4]!)
   19e18:	lsr	lr, r1, #5
   19e1c:	and	r1, r1, #31
   19e20:	ldr	ip, [r3, lr, lsl #2]
   19e24:	lsr	r0, ip, r1
   19e28:	eor	r2, r2, r0
   19e2c:	and	r2, r2, #1
   19e30:	and	r0, r0, #1
   19e34:	eor	r1, ip, r2, lsl r1
   19e38:	str	r1, [r3, lr, lsl #2]
   19e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   19e40:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19e44:	ldr	r3, [pc, #16]	; 19e5c <argp_parse@@Base+0x2748>
   19e48:	cmp	r0, #0
   19e4c:	movne	r3, r0
   19e50:	ldr	r0, [r3, #4]
   19e54:	str	r1, [r3, #4]
   19e58:	bx	lr
   19e5c:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19e60:	ldr	r3, [pc, #44]	; 19e94 <argp_parse@@Base+0x2780>
   19e64:	cmp	r0, #0
   19e68:	moveq	r0, r3
   19e6c:	mov	ip, #8
   19e70:	cmp	r2, #0
   19e74:	cmpne	r1, #0
   19e78:	str	ip, [r0]
   19e7c:	beq	19e8c <argp_parse@@Base+0x2778>
   19e80:	str	r1, [r0, #40]	; 0x28
   19e84:	str	r2, [r0, #44]	; 0x2c
   19e88:	bx	lr
   19e8c:	push	{r4, lr}
   19e90:	bl	115d0 <abort@plt>
   19e94:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19e98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e9c:	sub	sp, sp, #24
   19ea0:	ldr	ip, [pc, #108]	; 19f14 <argp_parse@@Base+0x2800>
   19ea4:	ldr	r4, [sp, #56]	; 0x38
   19ea8:	mov	r9, r2
   19eac:	cmp	r4, #0
   19eb0:	moveq	r4, ip
   19eb4:	mov	sl, r3
   19eb8:	mov	r7, r0
   19ebc:	mov	r8, r1
   19ec0:	bl	1148c <__errno_location@plt>
   19ec4:	ldr	r3, [r4, #44]	; 0x2c
   19ec8:	mov	r1, r8
   19ecc:	ldr	r6, [r0]
   19ed0:	str	r3, [sp, #16]
   19ed4:	ldr	r2, [r4, #40]	; 0x28
   19ed8:	add	r3, r4, #8
   19edc:	str	r3, [sp, #8]
   19ee0:	str	r2, [sp, #12]
   19ee4:	ldr	r2, [r4, #4]
   19ee8:	mov	r5, r0
   19eec:	str	r2, [sp, #4]
   19ef0:	ldr	ip, [r4]
   19ef4:	mov	r3, sl
   19ef8:	mov	r2, r9
   19efc:	mov	r0, r7
   19f00:	str	ip, [sp]
   19f04:	bl	1897c <argp_parse@@Base+0x1268>
   19f08:	str	r6, [r5]
   19f0c:	add	sp, sp, #24
   19f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f14:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f1c:	cmp	r3, #0
   19f20:	sub	sp, sp, #44	; 0x2c
   19f24:	ldr	r4, [pc, #192]	; 19fec <argp_parse@@Base+0x28d8>
   19f28:	mov	r6, r2
   19f2c:	movne	r4, r3
   19f30:	mov	r9, r1
   19f34:	mov	r8, r0
   19f38:	bl	1148c <__errno_location@plt>
   19f3c:	ldr	r3, [r4, #44]	; 0x2c
   19f40:	ldr	r5, [r4, #4]
   19f44:	add	sl, r4, #8
   19f48:	cmp	r6, #0
   19f4c:	orreq	r5, r5, #1
   19f50:	mov	r1, #0
   19f54:	ldr	r2, [r0]
   19f58:	str	r3, [sp, #16]
   19f5c:	ldr	r3, [r4, #40]	; 0x28
   19f60:	stmib	sp, {r5, sl}
   19f64:	str	r3, [sp, #12]
   19f68:	ldr	r3, [r4]
   19f6c:	mov	r7, r0
   19f70:	str	r2, [sp, #28]
   19f74:	str	r3, [sp]
   19f78:	mov	r2, r8
   19f7c:	mov	r3, r9
   19f80:	mov	r0, r1
   19f84:	bl	1897c <argp_parse@@Base+0x1268>
   19f88:	add	r1, r0, #1
   19f8c:	mov	fp, r0
   19f90:	mov	r0, r1
   19f94:	str	r1, [sp, #36]	; 0x24
   19f98:	bl	1a9e0 <argp_parse@@Base+0x32cc>
   19f9c:	ldr	r3, [r4, #44]	; 0x2c
   19fa0:	mov	r2, r8
   19fa4:	str	r3, [sp, #16]
   19fa8:	ldr	r3, [r4, #40]	; 0x28
   19fac:	str	r5, [sp, #4]
   19fb0:	str	r3, [sp, #12]
   19fb4:	str	sl, [sp, #8]
   19fb8:	ldr	ip, [r4]
   19fbc:	ldr	r1, [sp, #36]	; 0x24
   19fc0:	mov	r3, r9
   19fc4:	str	ip, [sp]
   19fc8:	str	r0, [sp, #32]
   19fcc:	bl	1897c <argp_parse@@Base+0x1268>
   19fd0:	ldr	r2, [sp, #28]
   19fd4:	cmp	r6, #0
   19fd8:	str	r2, [r7]
   19fdc:	ldr	r0, [sp, #32]
   19fe0:	strne	fp, [r6]
   19fe4:	add	sp, sp, #44	; 0x2c
   19fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fec:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   19ff0:	mov	r3, r2
   19ff4:	mov	r2, #0
   19ff8:	b	19f18 <argp_parse@@Base+0x2804>
   19ffc:	push	{r4, r5, r6, r7, r8, lr}
   1a000:	ldr	r6, [pc, #112]	; 1a078 <argp_parse@@Base+0x2964>
   1a004:	ldr	r5, [r6, #4]
   1a008:	ldr	r7, [r6]
   1a00c:	cmp	r5, #1
   1a010:	bls	1a034 <argp_parse@@Base+0x2920>
   1a014:	add	r5, r7, r5, lsl #3
   1a018:	sub	r5, r5, #8
   1a01c:	mov	r4, r7
   1a020:	ldr	r0, [r4, #12]
   1a024:	add	r4, r4, #8
   1a028:	bl	112c4 <free@plt>
   1a02c:	cmp	r4, r5
   1a030:	bne	1a020 <argp_parse@@Base+0x290c>
   1a034:	ldr	r0, [r7, #4]
   1a038:	ldr	r4, [pc, #60]	; 1a07c <argp_parse@@Base+0x2968>
   1a03c:	cmp	r0, r4
   1a040:	beq	1a054 <argp_parse@@Base+0x2940>
   1a044:	bl	112c4 <free@plt>
   1a048:	mov	r3, #256	; 0x100
   1a04c:	str	r4, [r6, #12]
   1a050:	str	r3, [r6, #8]
   1a054:	ldr	r4, [pc, #36]	; 1a080 <argp_parse@@Base+0x296c>
   1a058:	cmp	r7, r4
   1a05c:	beq	1a06c <argp_parse@@Base+0x2958>
   1a060:	mov	r0, r7
   1a064:	bl	112c4 <free@plt>
   1a068:	str	r4, [r6]
   1a06c:	mov	r3, #1
   1a070:	str	r3, [r6, #4]
   1a074:	pop	{r4, r5, r6, r7, r8, pc}
   1a078:	muleq	r2, r0, r2
   1a07c:	andeq	pc, r2, r4, lsl r3	; <UNPREDICTABLE>
   1a080:	muleq	r2, r8, r2
   1a084:	ldr	r3, [pc, #4]	; 1a090 <argp_parse@@Base+0x297c>
   1a088:	mvn	r2, #0
   1a08c:	b	19c04 <argp_parse@@Base+0x24f0>
   1a090:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   1a094:	ldr	r3, [pc]	; 1a09c <argp_parse@@Base+0x2988>
   1a098:	b	19c04 <argp_parse@@Base+0x24f0>
   1a09c:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   1a0a0:	mov	r1, r0
   1a0a4:	ldr	r3, [pc, #8]	; 1a0b4 <argp_parse@@Base+0x29a0>
   1a0a8:	mvn	r2, #0
   1a0ac:	mov	r0, #0
   1a0b0:	b	19c04 <argp_parse@@Base+0x24f0>
   1a0b4:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   1a0b8:	mov	r2, r1
   1a0bc:	ldr	r3, [pc, #8]	; 1a0cc <argp_parse@@Base+0x29b8>
   1a0c0:	mov	r1, r0
   1a0c4:	mov	r0, #0
   1a0c8:	b	19c04 <argp_parse@@Base+0x24f0>
   1a0cc:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   1a0d0:	push	{r4, r5, r6, lr}
   1a0d4:	sub	sp, sp, #56	; 0x38
   1a0d8:	ldr	r4, [pc, #68]	; 1a124 <argp_parse@@Base+0x2a10>
   1a0dc:	mov	r6, r2
   1a0e0:	mov	r5, r0
   1a0e4:	ldr	r3, [r4]
   1a0e8:	add	r0, sp, #4
   1a0ec:	str	r3, [sp, #52]	; 0x34
   1a0f0:	bl	1880c <argp_parse@@Base+0x10f8>
   1a0f4:	add	r3, sp, #4
   1a0f8:	mvn	r2, #0
   1a0fc:	mov	r1, r6
   1a100:	mov	r0, r5
   1a104:	bl	19c04 <argp_parse@@Base+0x24f0>
   1a108:	ldr	r2, [sp, #52]	; 0x34
   1a10c:	ldr	r3, [r4]
   1a110:	cmp	r2, r3
   1a114:	bne	1a120 <argp_parse@@Base+0x2a0c>
   1a118:	add	sp, sp, #56	; 0x38
   1a11c:	pop	{r4, r5, r6, pc}
   1a120:	bl	1133c <__stack_chk_fail@plt>
   1a124:	andeq	lr, r2, r8, lsl #30
   1a128:	push	{r4, r5, r6, r7, lr}
   1a12c:	sub	sp, sp, #60	; 0x3c
   1a130:	ldr	r4, [pc, #72]	; 1a180 <argp_parse@@Base+0x2a6c>
   1a134:	mov	r6, r2
   1a138:	mov	r7, r3
   1a13c:	ldr	ip, [r4]
   1a140:	mov	r5, r0
   1a144:	add	r0, sp, #4
   1a148:	str	ip, [sp, #52]	; 0x34
   1a14c:	bl	1880c <argp_parse@@Base+0x10f8>
   1a150:	add	r3, sp, #4
   1a154:	mov	r2, r7
   1a158:	mov	r1, r6
   1a15c:	mov	r0, r5
   1a160:	bl	19c04 <argp_parse@@Base+0x24f0>
   1a164:	ldr	r2, [sp, #52]	; 0x34
   1a168:	ldr	r3, [r4]
   1a16c:	cmp	r2, r3
   1a170:	bne	1a17c <argp_parse@@Base+0x2a68>
   1a174:	add	sp, sp, #60	; 0x3c
   1a178:	pop	{r4, r5, r6, r7, pc}
   1a17c:	bl	1133c <__stack_chk_fail@plt>
   1a180:	andeq	lr, r2, r8, lsl #30
   1a184:	mov	r2, r1
   1a188:	mov	r1, r0
   1a18c:	mov	r0, #0
   1a190:	b	1a0d0 <argp_parse@@Base+0x29bc>
   1a194:	mov	r3, r2
   1a198:	mov	r2, r1
   1a19c:	mov	r1, r0
   1a1a0:	mov	r0, #0
   1a1a4:	b	1a128 <argp_parse@@Base+0x2a14>
   1a1a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a1ac:	mov	r4, r2
   1a1b0:	ldr	lr, [pc, #128]	; 1a238 <argp_parse@@Base+0x2b24>
   1a1b4:	mov	r8, r0
   1a1b8:	mov	r9, r1
   1a1bc:	ldm	lr!, {r0, r1, r2, r3}
   1a1c0:	sub	sp, sp, #60	; 0x3c
   1a1c4:	add	ip, sp, #4
   1a1c8:	lsr	r6, r4, #5
   1a1cc:	stmia	ip!, {r0, r1, r2, r3}
   1a1d0:	add	r7, sp, #12
   1a1d4:	ldm	lr!, {r0, r1, r2, r3}
   1a1d8:	and	r4, r4, #31
   1a1dc:	ldr	r5, [pc, #88]	; 1a23c <argp_parse@@Base+0x2b28>
   1a1e0:	stmia	ip!, {r0, r1, r2, r3}
   1a1e4:	ldm	lr, {r0, r1, r2, r3}
   1a1e8:	stm	ip, {r0, r1, r2, r3}
   1a1ec:	mov	r2, r9
   1a1f0:	ldr	r3, [r7, r6, lsl #2]
   1a1f4:	ldr	ip, [r5]
   1a1f8:	mov	r1, r8
   1a1fc:	mvn	r0, r3, lsr r4
   1a200:	and	r0, r0, #1
   1a204:	str	ip, [sp, #52]	; 0x34
   1a208:	eor	r4, r3, r0, lsl r4
   1a20c:	add	r3, sp, #4
   1a210:	mov	r0, #0
   1a214:	str	r4, [r7, r6, lsl #2]
   1a218:	bl	19c04 <argp_parse@@Base+0x24f0>
   1a21c:	ldr	r2, [sp, #52]	; 0x34
   1a220:	ldr	r3, [r5]
   1a224:	cmp	r2, r3
   1a228:	bne	1a234 <argp_parse@@Base+0x2b20>
   1a22c:	add	sp, sp, #60	; 0x3c
   1a230:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a234:	bl	1133c <__stack_chk_fail@plt>
   1a238:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   1a23c:	andeq	lr, r2, r8, lsl #30
   1a240:	mov	r2, r1
   1a244:	mvn	r1, #0
   1a248:	b	1a1a8 <argp_parse@@Base+0x2a94>
   1a24c:	mov	r2, #58	; 0x3a
   1a250:	mvn	r1, #0
   1a254:	b	1a1a8 <argp_parse@@Base+0x2a94>
   1a258:	mov	r2, #58	; 0x3a
   1a25c:	b	1a1a8 <argp_parse@@Base+0x2a94>
   1a260:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a264:	mov	r6, r1
   1a268:	ldr	lr, [pc, #132]	; 1a2f4 <argp_parse@@Base+0x2be0>
   1a26c:	mov	r5, r2
   1a270:	mov	r8, r0
   1a274:	mov	r9, r3
   1a278:	ldm	lr!, {r0, r1, r2, r3}
   1a27c:	sub	sp, sp, #60	; 0x3c
   1a280:	add	ip, sp, #4
   1a284:	ldr	r4, [pc, #108]	; 1a2f8 <argp_parse@@Base+0x2be4>
   1a288:	stmia	ip!, {r0, r1, r2, r3}
   1a28c:	mov	r7, #8
   1a290:	ldm	lr!, {r0, r1, r2, r3}
   1a294:	cmp	r5, #0
   1a298:	cmpne	r6, #0
   1a29c:	str	r7, [sp, #4]
   1a2a0:	stmia	ip!, {r0, r1, r2, r3}
   1a2a4:	ldm	lr, {r0, r1, r2, r3}
   1a2a8:	ldr	lr, [r4]
   1a2ac:	stm	ip, {r0, r1, r2, r3}
   1a2b0:	str	lr, [sp, #52]	; 0x34
   1a2b4:	beq	1a2f0 <argp_parse@@Base+0x2bdc>
   1a2b8:	add	r3, sp, #4
   1a2bc:	ldr	r2, [sp, #88]	; 0x58
   1a2c0:	mov	r1, r9
   1a2c4:	mov	r0, r8
   1a2c8:	str	r6, [sp, #44]	; 0x2c
   1a2cc:	str	r5, [sp, #48]	; 0x30
   1a2d0:	bl	19c04 <argp_parse@@Base+0x24f0>
   1a2d4:	ldr	r2, [sp, #52]	; 0x34
   1a2d8:	ldr	r3, [r4]
   1a2dc:	cmp	r2, r3
   1a2e0:	bne	1a2ec <argp_parse@@Base+0x2bd8>
   1a2e4:	add	sp, sp, #60	; 0x3c
   1a2e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a2ec:	bl	1133c <__stack_chk_fail@plt>
   1a2f0:	bl	115d0 <abort@plt>
   1a2f4:	andeq	pc, r2, r4, lsl r4	; <UNPREDICTABLE>
   1a2f8:	andeq	lr, r2, r8, lsl #30
   1a2fc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a300:	sub	sp, sp, #12
   1a304:	mvn	ip, #0
   1a308:	str	ip, [sp]
   1a30c:	bl	1a260 <argp_parse@@Base+0x2b4c>
   1a310:	add	sp, sp, #12
   1a314:	pop	{pc}		; (ldr pc, [sp], #4)
   1a318:	push	{lr}		; (str lr, [sp, #-4]!)
   1a31c:	sub	sp, sp, #12
   1a320:	mvn	ip, #0
   1a324:	mov	r3, r2
   1a328:	str	ip, [sp]
   1a32c:	mov	r2, r1
   1a330:	mov	r1, r0
   1a334:	mov	r0, #0
   1a338:	bl	1a260 <argp_parse@@Base+0x2b4c>
   1a33c:	add	sp, sp, #12
   1a340:	pop	{pc}		; (ldr pc, [sp], #4)
   1a344:	push	{lr}		; (str lr, [sp, #-4]!)
   1a348:	sub	sp, sp, #12
   1a34c:	str	r3, [sp]
   1a350:	mov	r3, r2
   1a354:	mov	r2, r1
   1a358:	mov	r1, r0
   1a35c:	mov	r0, #0
   1a360:	bl	1a260 <argp_parse@@Base+0x2b4c>
   1a364:	add	sp, sp, #12
   1a368:	pop	{pc}		; (ldr pc, [sp], #4)
   1a36c:	ldr	r3, [pc]	; 1a374 <argp_parse@@Base+0x2c60>
   1a370:	b	19c04 <argp_parse@@Base+0x24f0>
   1a374:	andeq	pc, r2, r0, lsr #5
   1a378:	mov	r2, r1
   1a37c:	ldr	r3, [pc, #8]	; 1a38c <argp_parse@@Base+0x2c78>
   1a380:	mov	r1, r0
   1a384:	mov	r0, #0
   1a388:	b	19c04 <argp_parse@@Base+0x24f0>
   1a38c:	andeq	pc, r2, r0, lsr #5
   1a390:	ldr	r3, [pc, #4]	; 1a39c <argp_parse@@Base+0x2c88>
   1a394:	mvn	r2, #0
   1a398:	b	19c04 <argp_parse@@Base+0x24f0>
   1a39c:	andeq	pc, r2, r0, lsr #5
   1a3a0:	mov	r1, r0
   1a3a4:	ldr	r3, [pc, #8]	; 1a3b4 <argp_parse@@Base+0x2ca0>
   1a3a8:	mvn	r2, #0
   1a3ac:	mov	r0, #0
   1a3b0:	b	19c04 <argp_parse@@Base+0x24f0>
   1a3b4:	andeq	pc, r2, r0, lsr #5
   1a3b8:	push	{r4, r5, r6, r7, r8, lr}
   1a3bc:	mov	r8, r0
   1a3c0:	ldr	r5, [pc, #84]	; 1a41c <argp_parse@@Base+0x2d08>
   1a3c4:	mov	r7, r1
   1a3c8:	mov	r4, r2
   1a3cc:	mov	r2, r4
   1a3d0:	mov	r1, r7
   1a3d4:	mov	r0, r8
   1a3d8:	bl	11294 <read@plt>
   1a3dc:	subs	r6, r0, #0
   1a3e0:	bge	1a414 <argp_parse@@Base+0x2d00>
   1a3e4:	bl	1148c <__errno_location@plt>
   1a3e8:	ldr	r3, [r0]
   1a3ec:	cmp	r3, #4
   1a3f0:	beq	1a3cc <argp_parse@@Base+0x2cb8>
   1a3f4:	cmp	r4, r5
   1a3f8:	movls	r2, #0
   1a3fc:	movhi	r2, #1
   1a400:	cmp	r3, #22
   1a404:	movne	r2, #0
   1a408:	cmp	r2, #0
   1a40c:	mov	r4, r5
   1a410:	bne	1a3cc <argp_parse@@Base+0x2cb8>
   1a414:	mov	r0, r6
   1a418:	pop	{r4, r5, r6, r7, r8, pc}
   1a41c:	svcvc	0x00ffe000
   1a420:	push	{r4, r5, r6, r7, r8, lr}
   1a424:	mov	r8, r0
   1a428:	ldr	r5, [pc, #84]	; 1a484 <argp_parse@@Base+0x2d70>
   1a42c:	mov	r7, r1
   1a430:	mov	r4, r2
   1a434:	mov	r2, r4
   1a438:	mov	r1, r7
   1a43c:	mov	r0, r8
   1a440:	bl	114e0 <write@plt>
   1a444:	subs	r6, r0, #0
   1a448:	bge	1a47c <argp_parse@@Base+0x2d68>
   1a44c:	bl	1148c <__errno_location@plt>
   1a450:	ldr	r2, [r0]
   1a454:	cmp	r2, #4
   1a458:	beq	1a434 <argp_parse@@Base+0x2d20>
   1a45c:	cmp	r4, r5
   1a460:	sub	r3, r2, #22
   1a464:	clz	r3, r3
   1a468:	lsr	r3, r3, #5
   1a46c:	movls	r3, #0
   1a470:	cmp	r3, #0
   1a474:	mov	r4, r5
   1a478:	bne	1a434 <argp_parse@@Base+0x2d20>
   1a47c:	mov	r0, r6
   1a480:	pop	{r4, r5, r6, r7, r8, pc}
   1a484:	svcvc	0x00ffe000
   1a488:	push	{r4, r5, r6, lr}
   1a48c:	sub	sp, sp, #32
   1a490:	cmp	r1, #0
   1a494:	mov	r5, r0
   1a498:	ldr	r4, [sp, #48]	; 0x30
   1a49c:	ldr	r6, [sp, #52]	; 0x34
   1a4a0:	beq	1a530 <argp_parse@@Base+0x2e1c>
   1a4a4:	strd	r2, [sp]
   1a4a8:	mov	r3, r1
   1a4ac:	ldr	r2, [pc, #828]	; 1a7f0 <argp_parse@@Base+0x30dc>
   1a4b0:	mov	r1, #1
   1a4b4:	bl	114ec <__fprintf_chk@plt>
   1a4b8:	mov	r2, #5
   1a4bc:	ldr	r1, [pc, #816]	; 1a7f4 <argp_parse@@Base+0x30e0>
   1a4c0:	mov	r0, #0
   1a4c4:	bl	11330 <dcgettext@plt>
   1a4c8:	ldr	r3, [pc, #808]	; 1a7f8 <argp_parse@@Base+0x30e4>
   1a4cc:	ldr	r2, [pc, #808]	; 1a7fc <argp_parse@@Base+0x30e8>
   1a4d0:	str	r3, [sp]
   1a4d4:	mov	r1, #1
   1a4d8:	mov	r3, r0
   1a4dc:	mov	r0, r5
   1a4e0:	bl	114ec <__fprintf_chk@plt>
   1a4e4:	ldr	r1, [pc, #788]	; 1a800 <argp_parse@@Base+0x30ec>
   1a4e8:	mov	r2, #5
   1a4ec:	mov	r0, #0
   1a4f0:	bl	11330 <dcgettext@plt>
   1a4f4:	mov	r1, r5
   1a4f8:	bl	11264 <fputs_unlocked@plt>
   1a4fc:	cmp	r6, #9
   1a500:	ldrls	pc, [pc, r6, lsl #2]
   1a504:	b	1a7e0 <argp_parse@@Base+0x30cc>
   1a508:	andeq	sl, r1, ip, ror #15
   1a50c:			; <UNDEFINED> instruction: 0x0001a5b4
   1a510:	andeq	sl, r1, r0, ror #11
   1a514:	andeq	sl, r1, r4, lsl r6
   1a518:	andeq	sl, r1, r0, asr r6
   1a51c:	muleq	r1, r0, r6
   1a520:	ldrdeq	sl, [r1], -r8
   1a524:	andeq	sl, r1, r8, lsr #14
   1a528:	andeq	sl, r1, r0, lsl #15
   1a52c:	andeq	sl, r1, r8, asr #10
   1a530:	str	r3, [sp]
   1a534:	mov	r1, #1
   1a538:	mov	r3, r2
   1a53c:	ldr	r2, [pc, #704]	; 1a804 <argp_parse@@Base+0x30f0>
   1a540:	bl	114ec <__fprintf_chk@plt>
   1a544:	b	1a4b8 <argp_parse@@Base+0x2da4>
   1a548:	ldr	r1, [pc, #696]	; 1a808 <argp_parse@@Base+0x30f4>
   1a54c:	mov	r2, #5
   1a550:	mov	r0, #0
   1a554:	bl	11330 <dcgettext@plt>
   1a558:	ldr	r2, [r4, #32]
   1a55c:	ldr	r3, [r4, #28]
   1a560:	ldr	r1, [r4, #24]
   1a564:	str	r2, [sp, #28]
   1a568:	ldr	r2, [r4, #20]
   1a56c:	str	r3, [sp, #24]
   1a570:	ldr	r3, [r4, #16]
   1a574:	str	r1, [sp, #20]
   1a578:	ldr	r1, [r4, #12]
   1a57c:	str	r2, [sp, #16]
   1a580:	ldr	r2, [r4, #8]
   1a584:	str	r3, [sp, #12]
   1a588:	ldr	r3, [r4, #4]
   1a58c:	str	r1, [sp, #8]
   1a590:	str	r2, [sp, #4]
   1a594:	str	r3, [sp]
   1a598:	mov	r1, #1
   1a59c:	ldr	r3, [r4]
   1a5a0:	mov	r2, r0
   1a5a4:	mov	r0, r5
   1a5a8:	bl	114ec <__fprintf_chk@plt>
   1a5ac:	add	sp, sp, #32
   1a5b0:	pop	{r4, r5, r6, pc}
   1a5b4:	mov	r2, #5
   1a5b8:	ldr	r1, [pc, #588]	; 1a80c <argp_parse@@Base+0x30f8>
   1a5bc:	mov	r0, #0
   1a5c0:	bl	11330 <dcgettext@plt>
   1a5c4:	ldr	r3, [r4]
   1a5c8:	mov	r1, #1
   1a5cc:	mov	r2, r0
   1a5d0:	mov	r0, r5
   1a5d4:	add	sp, sp, #32
   1a5d8:	pop	{r4, r5, r6, lr}
   1a5dc:	b	114ec <__fprintf_chk@plt>
   1a5e0:	mov	r2, #5
   1a5e4:	ldr	r1, [pc, #548]	; 1a810 <argp_parse@@Base+0x30fc>
   1a5e8:	mov	r0, #0
   1a5ec:	bl	11330 <dcgettext@plt>
   1a5f0:	ldr	r2, [r4, #4]
   1a5f4:	ldr	r3, [r4]
   1a5f8:	mov	r1, #1
   1a5fc:	str	r2, [sp, #48]	; 0x30
   1a600:	mov	r2, r0
   1a604:	mov	r0, r5
   1a608:	add	sp, sp, #32
   1a60c:	pop	{r4, r5, r6, lr}
   1a610:	b	114ec <__fprintf_chk@plt>
   1a614:	mov	r2, #5
   1a618:	ldr	r1, [pc, #500]	; 1a814 <argp_parse@@Base+0x3100>
   1a61c:	mov	r0, #0
   1a620:	bl	11330 <dcgettext@plt>
   1a624:	ldr	r2, [r4, #8]
   1a628:	ldr	r3, [r4, #4]
   1a62c:	mov	r1, #1
   1a630:	str	r2, [sp, #52]	; 0x34
   1a634:	str	r3, [sp, #48]	; 0x30
   1a638:	ldr	r3, [r4]
   1a63c:	mov	r2, r0
   1a640:	mov	r0, r5
   1a644:	add	sp, sp, #32
   1a648:	pop	{r4, r5, r6, lr}
   1a64c:	b	114ec <__fprintf_chk@plt>
   1a650:	mov	r2, #5
   1a654:	ldr	r1, [pc, #444]	; 1a818 <argp_parse@@Base+0x3104>
   1a658:	mov	r0, #0
   1a65c:	bl	11330 <dcgettext@plt>
   1a660:	ldr	r1, [r4, #12]
   1a664:	ldr	r2, [r4, #8]
   1a668:	ldr	r3, [r4, #4]
   1a66c:	str	r1, [sp, #8]
   1a670:	str	r2, [sp, #4]
   1a674:	str	r3, [sp]
   1a678:	mov	r1, #1
   1a67c:	ldr	r3, [r4]
   1a680:	mov	r2, r0
   1a684:	mov	r0, r5
   1a688:	bl	114ec <__fprintf_chk@plt>
   1a68c:	b	1a5ac <argp_parse@@Base+0x2e98>
   1a690:	mov	r2, #5
   1a694:	ldr	r1, [pc, #384]	; 1a81c <argp_parse@@Base+0x3108>
   1a698:	mov	r0, #0
   1a69c:	bl	11330 <dcgettext@plt>
   1a6a0:	ldr	r3, [r4, #16]
   1a6a4:	ldr	r1, [r4, #12]
   1a6a8:	ldr	r2, [r4, #8]
   1a6ac:	str	r3, [sp, #12]
   1a6b0:	ldr	r3, [r4, #4]
   1a6b4:	str	r1, [sp, #8]
   1a6b8:	str	r2, [sp, #4]
   1a6bc:	str	r3, [sp]
   1a6c0:	mov	r1, #1
   1a6c4:	ldr	r3, [r4]
   1a6c8:	mov	r2, r0
   1a6cc:	mov	r0, r5
   1a6d0:	bl	114ec <__fprintf_chk@plt>
   1a6d4:	b	1a5ac <argp_parse@@Base+0x2e98>
   1a6d8:	mov	r2, #5
   1a6dc:	ldr	r1, [pc, #316]	; 1a820 <argp_parse@@Base+0x310c>
   1a6e0:	mov	r0, #0
   1a6e4:	bl	11330 <dcgettext@plt>
   1a6e8:	ldr	r2, [r4, #20]
   1a6ec:	ldr	r3, [r4, #16]
   1a6f0:	ldr	r1, [r4, #12]
   1a6f4:	str	r2, [sp, #16]
   1a6f8:	ldr	r2, [r4, #8]
   1a6fc:	str	r3, [sp, #12]
   1a700:	ldr	r3, [r4, #4]
   1a704:	str	r1, [sp, #8]
   1a708:	str	r2, [sp, #4]
   1a70c:	str	r3, [sp]
   1a710:	mov	r1, #1
   1a714:	ldr	r3, [r4]
   1a718:	mov	r2, r0
   1a71c:	mov	r0, r5
   1a720:	bl	114ec <__fprintf_chk@plt>
   1a724:	b	1a5ac <argp_parse@@Base+0x2e98>
   1a728:	mov	r2, #5
   1a72c:	ldr	r1, [pc, #240]	; 1a824 <argp_parse@@Base+0x3110>
   1a730:	mov	r0, #0
   1a734:	bl	11330 <dcgettext@plt>
   1a738:	ldr	r1, [r4, #24]
   1a73c:	ldr	r2, [r4, #20]
   1a740:	ldr	r3, [r4, #16]
   1a744:	str	r1, [sp, #20]
   1a748:	ldr	r1, [r4, #12]
   1a74c:	str	r2, [sp, #16]
   1a750:	ldr	r2, [r4, #8]
   1a754:	str	r3, [sp, #12]
   1a758:	ldr	r3, [r4, #4]
   1a75c:	str	r1, [sp, #8]
   1a760:	str	r2, [sp, #4]
   1a764:	str	r3, [sp]
   1a768:	mov	r1, #1
   1a76c:	ldr	r3, [r4]
   1a770:	mov	r2, r0
   1a774:	mov	r0, r5
   1a778:	bl	114ec <__fprintf_chk@plt>
   1a77c:	b	1a5ac <argp_parse@@Base+0x2e98>
   1a780:	mov	r2, #5
   1a784:	ldr	r1, [pc, #156]	; 1a828 <argp_parse@@Base+0x3114>
   1a788:	mov	r0, #0
   1a78c:	bl	11330 <dcgettext@plt>
   1a790:	ldr	r3, [r4, #28]
   1a794:	ldr	r1, [r4, #24]
   1a798:	ldr	r2, [r4, #20]
   1a79c:	str	r3, [sp, #24]
   1a7a0:	ldr	r3, [r4, #16]
   1a7a4:	str	r1, [sp, #20]
   1a7a8:	ldr	r1, [r4, #12]
   1a7ac:	str	r2, [sp, #16]
   1a7b0:	ldr	r2, [r4, #8]
   1a7b4:	str	r3, [sp, #12]
   1a7b8:	ldr	r3, [r4, #4]
   1a7bc:	str	r1, [sp, #8]
   1a7c0:	str	r2, [sp, #4]
   1a7c4:	str	r3, [sp]
   1a7c8:	mov	r1, #1
   1a7cc:	ldr	r3, [r4]
   1a7d0:	mov	r2, r0
   1a7d4:	mov	r0, r5
   1a7d8:	bl	114ec <__fprintf_chk@plt>
   1a7dc:	b	1a5ac <argp_parse@@Base+0x2e98>
   1a7e0:	mov	r2, #5
   1a7e4:	ldr	r1, [pc, #64]	; 1a82c <argp_parse@@Base+0x3118>
   1a7e8:	b	1a550 <argp_parse@@Base+0x2e3c>
   1a7ec:	bl	115d0 <abort@plt>
   1a7f0:	ldrdeq	sp, [r1], -r8
   1a7f4:	andeq	sp, r1, ip, ror #23
   1a7f8:	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1a7fc:	ldrdeq	sp, [r1], -ip
   1a800:	strdeq	sp, [r1], -r0
   1a804:	andeq	sp, r1, r4, ror #23
   1a808:	andeq	sp, r1, r8, asr #27
   1a80c:			; <UNDEFINED> instruction: 0x0001dcbc
   1a810:	andeq	sp, r1, ip, asr #25
   1a814:	andeq	sp, r1, r4, ror #25
   1a818:	andeq	sp, r1, r0, lsl #26
   1a81c:	andeq	sp, r1, r0, lsr #26
   1a820:	andeq	sp, r1, r4, asr #26
   1a824:	andeq	sp, r1, ip, ror #26
   1a828:	muleq	r1, r8, sp
   1a82c:	strdeq	sp, [r1], -ip
   1a830:	push	{r4, r5, lr}
   1a834:	sub	sp, sp, #12
   1a838:	ldr	r5, [sp, #24]
   1a83c:	ldr	ip, [r5]
   1a840:	cmp	ip, #0
   1a844:	beq	1a860 <argp_parse@@Base+0x314c>
   1a848:	mov	lr, r5
   1a84c:	mov	ip, #0
   1a850:	ldr	r4, [lr, #4]!
   1a854:	add	ip, ip, #1
   1a858:	cmp	r4, #0
   1a85c:	bne	1a850 <argp_parse@@Base+0x313c>
   1a860:	stm	sp, {r5, ip}
   1a864:	bl	1a488 <argp_parse@@Base+0x2d74>
   1a868:	add	sp, sp, #12
   1a86c:	pop	{r4, r5, pc}
   1a870:	push	{r4, r5, r6, lr}
   1a874:	sub	sp, sp, #56	; 0x38
   1a878:	ldr	r6, [pc, #88]	; 1a8d8 <argp_parse@@Base+0x31c4>
   1a87c:	ldr	r5, [sp, #72]	; 0x48
   1a880:	add	r4, sp, #8
   1a884:	ldr	ip, [r6]
   1a888:	str	ip, [sp, #52]	; 0x34
   1a88c:	mov	ip, #0
   1a890:	ldr	lr, [r5], #4
   1a894:	cmp	lr, #0
   1a898:	str	lr, [r4, #4]!
   1a89c:	beq	1a8ac <argp_parse@@Base+0x3198>
   1a8a0:	add	ip, ip, #1
   1a8a4:	cmp	ip, #10
   1a8a8:	bne	1a890 <argp_parse@@Base+0x317c>
   1a8ac:	add	lr, sp, #12
   1a8b0:	str	ip, [sp, #4]
   1a8b4:	str	lr, [sp]
   1a8b8:	bl	1a488 <argp_parse@@Base+0x2d74>
   1a8bc:	ldr	r2, [sp, #52]	; 0x34
   1a8c0:	ldr	r3, [r6]
   1a8c4:	cmp	r2, r3
   1a8c8:	bne	1a8d4 <argp_parse@@Base+0x31c0>
   1a8cc:	add	sp, sp, #56	; 0x38
   1a8d0:	pop	{r4, r5, r6, pc}
   1a8d4:	bl	1133c <__stack_chk_fail@plt>
   1a8d8:	andeq	lr, r2, r8, lsl #30
   1a8dc:	push	{r3}		; (str r3, [sp, #-4]!)
   1a8e0:	mov	ip, #0
   1a8e4:	push	{r4, r5, r6, lr}
   1a8e8:	sub	sp, sp, #60	; 0x3c
   1a8ec:	ldr	r6, [pc, #100]	; 1a958 <argp_parse@@Base+0x3244>
   1a8f0:	add	r5, sp, #8
   1a8f4:	add	r4, sp, #80	; 0x50
   1a8f8:	ldr	r3, [r6]
   1a8fc:	str	r4, [sp, #8]
   1a900:	str	r3, [sp, #52]	; 0x34
   1a904:	ldr	r3, [sp, #76]	; 0x4c
   1a908:	ldr	lr, [r4], #4
   1a90c:	cmp	lr, #0
   1a910:	str	lr, [r5, #4]!
   1a914:	beq	1a924 <argp_parse@@Base+0x3210>
   1a918:	add	ip, ip, #1
   1a91c:	cmp	ip, #10
   1a920:	bne	1a908 <argp_parse@@Base+0x31f4>
   1a924:	add	lr, sp, #12
   1a928:	str	ip, [sp, #4]
   1a92c:	str	lr, [sp]
   1a930:	bl	1a488 <argp_parse@@Base+0x2d74>
   1a934:	ldr	r2, [sp, #52]	; 0x34
   1a938:	ldr	r3, [r6]
   1a93c:	cmp	r2, r3
   1a940:	bne	1a954 <argp_parse@@Base+0x3240>
   1a944:	add	sp, sp, #60	; 0x3c
   1a948:	pop	{r4, r5, r6, lr}
   1a94c:	add	sp, sp, #4
   1a950:	bx	lr
   1a954:	bl	1133c <__stack_chk_fail@plt>
   1a958:	andeq	lr, r2, r8, lsl #30
   1a95c:	push	{r4, lr}
   1a960:	mov	r2, #5
   1a964:	ldr	r1, [pc, #88]	; 1a9c4 <argp_parse@@Base+0x32b0>
   1a968:	mov	r0, #0
   1a96c:	bl	11330 <dcgettext@plt>
   1a970:	ldr	r2, [pc, #80]	; 1a9c8 <argp_parse@@Base+0x32b4>
   1a974:	mov	r1, r0
   1a978:	mov	r0, #1
   1a97c:	bl	114d4 <__printf_chk@plt>
   1a980:	mov	r2, #5
   1a984:	ldr	r1, [pc, #64]	; 1a9cc <argp_parse@@Base+0x32b8>
   1a988:	mov	r0, #0
   1a98c:	bl	11330 <dcgettext@plt>
   1a990:	ldr	r3, [pc, #56]	; 1a9d0 <argp_parse@@Base+0x32bc>
   1a994:	ldr	r2, [pc, #56]	; 1a9d4 <argp_parse@@Base+0x32c0>
   1a998:	mov	r1, r0
   1a99c:	mov	r0, #1
   1a9a0:	bl	114d4 <__printf_chk@plt>
   1a9a4:	ldr	r1, [pc, #44]	; 1a9d8 <argp_parse@@Base+0x32c4>
   1a9a8:	mov	r2, #5
   1a9ac:	mov	r0, #0
   1a9b0:	bl	11330 <dcgettext@plt>
   1a9b4:	ldr	r3, [pc, #32]	; 1a9dc <argp_parse@@Base+0x32c8>
   1a9b8:	pop	{r4, lr}
   1a9bc:	ldr	r1, [r3]
   1a9c0:	b	11264 <fputs_unlocked@plt>
   1a9c4:	andeq	sp, r1, r8, lsr lr
   1a9c8:	andeq	sp, r1, r0, asr lr
   1a9cc:	andeq	sp, r1, r4, ror #28
   1a9d0:	andeq	sp, r1, r8, ror lr
   1a9d4:	andeq	sp, r1, r8, ror #21
   1a9d8:	muleq	r1, ip, lr
   1a9dc:	andeq	pc, r2, ip, ror #5
   1a9e0:	push	{r4, lr}
   1a9e4:	mov	r4, r0
   1a9e8:	bl	113fc <malloc@plt>
   1a9ec:	adds	r4, r4, #0
   1a9f0:	movne	r4, #1
   1a9f4:	cmp	r0, #0
   1a9f8:	movne	r4, #0
   1a9fc:	cmp	r4, #0
   1aa00:	popeq	{r4, pc}
   1aa04:	bl	1abc0 <argp_parse@@Base+0x34ac>
   1aa08:	umull	r2, r3, r1, r0
   1aa0c:	cmp	r3, #0
   1aa10:	bne	1aa1c <argp_parse@@Base+0x3308>
   1aa14:	mul	r0, r1, r0
   1aa18:	b	1a9e0 <argp_parse@@Base+0x32cc>
   1aa1c:	push	{r4, lr}
   1aa20:	bl	1abc0 <argp_parse@@Base+0x34ac>
   1aa24:	b	1a9e0 <argp_parse@@Base+0x32cc>
   1aa28:	adds	r3, r0, #0
   1aa2c:	movne	r3, #1
   1aa30:	cmp	r1, #0
   1aa34:	movne	r3, #0
   1aa38:	cmp	r3, #0
   1aa3c:	push	{r4, lr}
   1aa40:	bne	1aa68 <argp_parse@@Base+0x3354>
   1aa44:	mov	r4, r1
   1aa48:	bl	11354 <realloc@plt>
   1aa4c:	adds	r4, r4, #0
   1aa50:	movne	r4, #1
   1aa54:	cmp	r0, #0
   1aa58:	movne	r4, #0
   1aa5c:	cmp	r4, #0
   1aa60:	popeq	{r4, pc}
   1aa64:	bl	1abc0 <argp_parse@@Base+0x34ac>
   1aa68:	bl	112c4 <free@plt>
   1aa6c:	mov	r0, #0
   1aa70:	pop	{r4, pc}
   1aa74:	umull	ip, r3, r2, r1
   1aa78:	cmp	r3, #0
   1aa7c:	bne	1aa88 <argp_parse@@Base+0x3374>
   1aa80:	mul	r1, r2, r1
   1aa84:	b	1aa28 <argp_parse@@Base+0x3314>
   1aa88:	push	{r4, lr}
   1aa8c:	bl	1abc0 <argp_parse@@Base+0x34ac>
   1aa90:	push	{r4, r5, r6, r7, r8, lr}
   1aa94:	subs	r7, r0, #0
   1aa98:	mov	r6, r1
   1aa9c:	mov	r5, r2
   1aaa0:	ldr	r4, [r1]
   1aaa4:	beq	1aad8 <argp_parse@@Base+0x33c4>
   1aaa8:	mov	r1, r2
   1aaac:	ldr	r0, [pc, #76]	; 1ab00 <argp_parse@@Base+0x33ec>
   1aab0:	bl	1c88c <argp_parse@@Base+0x5178>
   1aab4:	cmp	r0, r4
   1aab8:	addhi	r3, r4, #1
   1aabc:	addhi	r4, r3, r4, lsr #1
   1aac0:	bls	1aafc <argp_parse@@Base+0x33e8>
   1aac4:	str	r4, [r6]
   1aac8:	mul	r1, r5, r4
   1aacc:	mov	r0, r7
   1aad0:	pop	{r4, r5, r6, r7, r8, lr}
   1aad4:	b	1aa28 <argp_parse@@Base+0x3314>
   1aad8:	cmp	r4, #0
   1aadc:	bne	1aac4 <argp_parse@@Base+0x33b0>
   1aae0:	mov	r1, r2
   1aae4:	mov	r0, #64	; 0x40
   1aae8:	bl	1c88c <argp_parse@@Base+0x5178>
   1aaec:	cmp	r5, #64	; 0x40
   1aaf0:	movls	r4, r0
   1aaf4:	addhi	r4, r0, #1
   1aaf8:	b	1aac4 <argp_parse@@Base+0x33b0>
   1aafc:	bl	1abc0 <argp_parse@@Base+0x34ac>
   1ab00:	bge	feac55b0 <argp_program_version@@Base+0xfea9612c>
   1ab04:	cmp	r0, #0
   1ab08:	ldr	r3, [r1]
   1ab0c:	beq	1ab30 <argp_parse@@Base+0x341c>
   1ab10:	ldr	r2, [pc, #52]	; 1ab4c <argp_parse@@Base+0x3438>
   1ab14:	cmp	r3, r2
   1ab18:	addls	r2, r3, #1
   1ab1c:	addls	r3, r2, r3, lsr #1
   1ab20:	bhi	1ab44 <argp_parse@@Base+0x3430>
   1ab24:	str	r3, [r1]
   1ab28:	mov	r1, r3
   1ab2c:	b	1aa28 <argp_parse@@Base+0x3314>
   1ab30:	cmp	r3, #0
   1ab34:	moveq	r3, #64	; 0x40
   1ab38:	str	r3, [r1]
   1ab3c:	mov	r1, r3
   1ab40:	b	1aa28 <argp_parse@@Base+0x3314>
   1ab44:	push	{r4, lr}
   1ab48:	bl	1abc0 <argp_parse@@Base+0x34ac>
   1ab4c:	bge	feac55f8 <argp_program_version@@Base+0xfea96174>
   1ab50:	push	{r4, lr}
   1ab54:	mov	r4, r0
   1ab58:	bl	1a9e0 <argp_parse@@Base+0x32cc>
   1ab5c:	mov	r2, r4
   1ab60:	mov	r1, #0
   1ab64:	pop	{r4, lr}
   1ab68:	b	114bc <memset@plt>
   1ab6c:	push	{r4, lr}
   1ab70:	bl	11258 <calloc@plt>
   1ab74:	cmp	r0, #0
   1ab78:	popne	{r4, pc}
   1ab7c:	bl	1abc0 <argp_parse@@Base+0x34ac>
   1ab80:	push	{r4, r5, r6, lr}
   1ab84:	mov	r4, r1
   1ab88:	mov	r5, r0
   1ab8c:	mov	r0, r1
   1ab90:	bl	1a9e0 <argp_parse@@Base+0x32cc>
   1ab94:	mov	r2, r4
   1ab98:	mov	r1, r5
   1ab9c:	pop	{r4, r5, r6, lr}
   1aba0:	b	112e8 <memcpy@plt>
   1aba4:	push	{r4, lr}
   1aba8:	mov	r4, r0
   1abac:	bl	11468 <strlen@plt>
   1abb0:	add	r1, r0, #1
   1abb4:	mov	r0, r4
   1abb8:	pop	{r4, lr}
   1abbc:	b	1ab80 <argp_parse@@Base+0x346c>
   1abc0:	ldr	r3, [pc, #44]	; 1abf4 <argp_parse@@Base+0x34e0>
   1abc4:	push	{r4, lr}
   1abc8:	mov	r2, #5
   1abcc:	ldr	r1, [pc, #36]	; 1abf8 <argp_parse@@Base+0x34e4>
   1abd0:	mov	r0, #0
   1abd4:	ldr	r4, [r3]
   1abd8:	bl	11330 <dcgettext@plt>
   1abdc:	ldr	r2, [pc, #24]	; 1abfc <argp_parse@@Base+0x34e8>
   1abe0:	mov	r1, #0
   1abe4:	mov	r3, r0
   1abe8:	mov	r0, r4
   1abec:	bl	113cc <error@plt>
   1abf0:	bl	115d0 <abort@plt>
   1abf4:	andeq	pc, r2, ip, lsl #5
   1abf8:	andeq	sp, r1, ip, lsl #30
   1abfc:	andeq	sp, r1, ip, asr r3
   1ac00:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac04:	sub	sp, sp, #20
   1ac08:	mov	ip, #0
   1ac0c:	ldr	lr, [sp, #24]
   1ac10:	str	ip, [sp, #8]
   1ac14:	str	lr, [sp]
   1ac18:	str	ip, [sp, #4]
   1ac1c:	bl	1c7f8 <argp_parse@@Base+0x50e4>
   1ac20:	add	sp, sp, #20
   1ac24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac28:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac2c:	sub	sp, sp, #20
   1ac30:	ldr	ip, [sp, #24]
   1ac34:	ldr	lr, [sp, #28]
   1ac38:	str	ip, [sp]
   1ac3c:	mov	ip, #0
   1ac40:	str	lr, [sp, #8]
   1ac44:	str	ip, [sp, #12]
   1ac48:	str	ip, [sp, #4]
   1ac4c:	bl	1b8cc <argp_parse@@Base+0x41b8>
   1ac50:	add	sp, sp, #20
   1ac54:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac58:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac5c:	sub	sp, sp, #20
   1ac60:	mov	lr, #0
   1ac64:	ldr	ip, [sp, #24]
   1ac68:	str	ip, [sp]
   1ac6c:	mov	ip, #1
   1ac70:	stmib	sp, {ip, lr}
   1ac74:	bl	1c7f8 <argp_parse@@Base+0x50e4>
   1ac78:	add	sp, sp, #20
   1ac7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac80:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac84:	sub	sp, sp, #20
   1ac88:	ldr	lr, [sp, #24]
   1ac8c:	ldr	ip, [sp, #28]
   1ac90:	str	lr, [sp]
   1ac94:	str	ip, [sp, #8]
   1ac98:	mov	lr, #0
   1ac9c:	mov	ip, #1
   1aca0:	str	lr, [sp, #12]
   1aca4:	str	ip, [sp, #4]
   1aca8:	bl	1b8cc <argp_parse@@Base+0x41b8>
   1acac:	add	sp, sp, #20
   1acb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1acb4:	push	{r4, r5, r6, r7, r8, lr}
   1acb8:	mov	r8, r0
   1acbc:	mov	r0, #36	; 0x24
   1acc0:	mov	r7, r1
   1acc4:	mov	r6, r2
   1acc8:	mov	r5, r3
   1accc:	bl	113fc <malloc@plt>
   1acd0:	subs	r4, r0, #0
   1acd4:	beq	1ad18 <argp_parse@@Base+0x3604>
   1acd8:	mov	r3, #0
   1acdc:	str	r5, [r4, #12]
   1ace0:	str	r3, [r4, #20]
   1ace4:	str	r3, [r4, #16]
   1ace8:	str	r8, [r4]
   1acec:	str	r7, [r4, #4]
   1acf0:	str	r6, [r4, #8]
   1acf4:	mov	r0, #200	; 0xc8
   1acf8:	bl	113fc <malloc@plt>
   1acfc:	cmp	r0, #0
   1ad00:	addne	r3, r0, #200	; 0xc8
   1ad04:	mov	r5, r0
   1ad08:	str	r0, [r4, #24]
   1ad0c:	strne	r0, [r4, #28]
   1ad10:	strne	r3, [r4, #32]
   1ad14:	beq	1ad20 <argp_parse@@Base+0x360c>
   1ad18:	mov	r0, r4
   1ad1c:	pop	{r4, r5, r6, r7, r8, pc}
   1ad20:	mov	r0, r4
   1ad24:	bl	112c4 <free@plt>
   1ad28:	mov	r4, r5
   1ad2c:	b	1ad18 <argp_parse@@Base+0x3604>
   1ad30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad34:	mov	r5, r0
   1ad38:	ldr	r4, [r0, #24]
   1ad3c:	ldr	r3, [r0, #16]
   1ad40:	ldr	r8, [r0, #28]
   1ad44:	sub	sp, sp, #12
   1ad48:	add	r4, r4, r3
   1ad4c:	cmp	r4, r8
   1ad50:	bcs	1ae64 <argp_parse@@Base+0x3750>
   1ad54:	ldr	r6, [r5, #20]
   1ad58:	cmp	r6, #0
   1ad5c:	bne	1adbc <argp_parse@@Base+0x36a8>
   1ad60:	ldr	r7, [r5, #4]
   1ad64:	cmp	r7, #0
   1ad68:	beq	1b030 <argp_parse@@Base+0x391c>
   1ad6c:	ldr	r2, [r5, #32]
   1ad70:	add	r3, r8, r7
   1ad74:	cmp	r2, r3
   1ad78:	bls	1b118 <argp_parse@@Base+0x3a04>
   1ad7c:	add	r6, r4, r7
   1ad80:	sub	r2, r8, r4
   1ad84:	mov	r1, r4
   1ad88:	mov	r0, r6
   1ad8c:	bl	112ac <memmove@plt>
   1ad90:	ldr	r3, [r5, #28]
   1ad94:	mov	r0, r4
   1ad98:	add	r3, r3, r7
   1ad9c:	str	r3, [r5, #28]
   1ada0:	mov	r2, r7
   1ada4:	mov	r1, #32
   1ada8:	mov	r4, r6
   1adac:	bl	114bc <memset@plt>
   1adb0:	ldr	r8, [r5, #28]
   1adb4:	mov	r6, r7
   1adb8:	str	r7, [r5, #20]
   1adbc:	sub	r9, r8, r4
   1adc0:	mov	r2, r9
   1adc4:	mov	r1, #10
   1adc8:	mov	r0, r4
   1adcc:	bl	114f8 <memchr@plt>
   1add0:	cmp	r6, #0
   1add4:	movlt	r6, #0
   1add8:	movlt	r3, r6
   1addc:	mov	fp, r0
   1ade0:	strlt	r3, [r5, #20]
   1ade4:	cmp	fp, #0
   1ade8:	ldr	r3, [r5, #8]
   1adec:	beq	1ae78 <argp_parse@@Base+0x3764>
   1adf0:	sub	r2, fp, r4
   1adf4:	add	r2, r2, r6
   1adf8:	cmp	r2, r3
   1adfc:	blt	1b04c <argp_parse@@Base+0x3938>
   1ae00:	ldr	sl, [r5, #12]
   1ae04:	sub	r7, r3, #1
   1ae08:	cmp	sl, #0
   1ae0c:	str	r3, [sp, #4]
   1ae10:	bge	1ae98 <argp_parse@@Base+0x3784>
   1ae14:	cmp	r8, fp
   1ae18:	bls	1b1cc <argp_parse@@Base+0x3ab8>
   1ae1c:	sub	r0, r7, r6
   1ae20:	sub	r2, r8, fp
   1ae24:	add	r0, r4, r0
   1ae28:	mov	r1, fp
   1ae2c:	bl	112ac <memmove@plt>
   1ae30:	ldr	r2, [r5, #20]
   1ae34:	mov	r3, #0
   1ae38:	sub	r7, r7, r2
   1ae3c:	ldr	r8, [r5, #28]
   1ae40:	add	r7, r4, r7
   1ae44:	str	r3, [r5, #20]
   1ae48:	ldr	r3, [sp, #4]
   1ae4c:	sub	fp, r7, fp
   1ae50:	sub	r8, r8, fp
   1ae54:	add	r4, r4, r3
   1ae58:	cmp	r4, r8
   1ae5c:	str	r8, [r5, #28]
   1ae60:	bcc	1ad54 <argp_parse@@Base+0x3640>
   1ae64:	ldr	r3, [r5, #24]
   1ae68:	sub	r8, r8, r3
   1ae6c:	str	r8, [r5, #16]
   1ae70:	add	sp, sp, #12
   1ae74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae78:	add	r1, r6, r9
   1ae7c:	cmp	r1, r3
   1ae80:	bcc	1b238 <argp_parse@@Base+0x3b24>
   1ae84:	ldr	sl, [r5, #12]
   1ae88:	sub	r7, r3, #1
   1ae8c:	cmp	sl, #0
   1ae90:	blt	1b1d0 <argp_parse@@Base+0x3abc>
   1ae94:	mov	fp, r8
   1ae98:	add	r7, r7, #1
   1ae9c:	sub	r6, r7, r6
   1aea0:	adds	r6, r4, r6
   1aea4:	bcs	1b090 <argp_parse@@Base+0x397c>
   1aea8:	bl	11450 <__ctype_b_loc@plt>
   1aeac:	mov	r3, r6
   1aeb0:	ldr	ip, [r0]
   1aeb4:	b	1aec4 <argp_parse@@Base+0x37b0>
   1aeb8:	cmp	r4, r0
   1aebc:	mov	r3, r0
   1aec0:	bhi	1b094 <argp_parse@@Base+0x3980>
   1aec4:	ldrb	r1, [r3]
   1aec8:	mov	r7, r3
   1aecc:	sub	r0, r3, #1
   1aed0:	lsl	r1, r1, #1
   1aed4:	ldrh	r1, [ip, r1]
   1aed8:	tst	r1, #1
   1aedc:	beq	1aeb8 <argp_parse@@Base+0x37a4>
   1aee0:	add	r0, r3, #1
   1aee4:	cmp	r4, r0
   1aee8:	bcs	1b0a0 <argp_parse@@Base+0x398c>
   1aeec:	cmp	r4, r3
   1aef0:	movhi	r6, r0
   1aef4:	movhi	r7, r6
   1aef8:	bls	1af18 <argp_parse@@Base+0x3804>
   1aefc:	b	1af28 <argp_parse@@Base+0x3814>
   1af00:	ldrb	r1, [r3, #-1]
   1af04:	sub	r3, r3, #1
   1af08:	lsl	r1, r1, #1
   1af0c:	ldrh	r1, [ip, r1]
   1af10:	tst	r1, #1
   1af14:	beq	1af24 <argp_parse@@Base+0x3810>
   1af18:	cmp	r4, r3
   1af1c:	mov	r6, r3
   1af20:	bne	1af00 <argp_parse@@Base+0x37ec>
   1af24:	mov	r7, r0
   1af28:	add	r3, r9, #1
   1af2c:	add	r3, r4, r3
   1af30:	cmp	r7, r3
   1af34:	beq	1b060 <argp_parse@@Base+0x394c>
   1af38:	add	r1, r6, #1
   1af3c:	sub	r3, r7, r1
   1af40:	cmp	r3, sl
   1af44:	bge	1b078 <argp_parse@@Base+0x3964>
   1af48:	cmp	r7, r8
   1af4c:	bcs	1b070 <argp_parse@@Base+0x395c>
   1af50:	ldr	r3, [r5, #32]
   1af54:	add	sl, sl, #1
   1af58:	sub	r3, r3, r8
   1af5c:	cmp	r3, sl
   1af60:	bgt	1b1e4 <argp_parse@@Base+0x3ad0>
   1af64:	ldr	r0, [r5, #24]
   1af68:	ldr	r3, [r5]
   1af6c:	cmp	r0, r6
   1af70:	bcs	1af84 <argp_parse@@Base+0x3870>
   1af74:	sub	r2, r6, r0
   1af78:	mov	r1, #1
   1af7c:	bl	1130c <fwrite_unlocked@plt>
   1af80:	ldr	r3, [r5]
   1af84:	ldr	r2, [r3, #20]
   1af88:	ldr	r1, [r3, #24]
   1af8c:	cmp	r2, r1
   1af90:	addcc	r1, r2, #1
   1af94:	strcc	r1, [r3, #20]
   1af98:	movcc	r3, #10
   1af9c:	strbcc	r3, [r2]
   1afa0:	bcs	1b228 <argp_parse@@Base+0x3b14>
   1afa4:	ldr	fp, [r5, #24]
   1afa8:	sub	r4, r4, fp
   1afac:	sub	r3, r7, fp
   1afb0:	add	r9, r9, r4
   1afb4:	mov	r8, r3
   1afb8:	mov	r4, fp
   1afbc:	ldr	r2, [r5, #12]
   1afc0:	cmp	r2, r3
   1afc4:	ble	1afe8 <argp_parse@@Base+0x38d4>
   1afc8:	add	r3, r9, #1
   1afcc:	add	r3, fp, r3
   1afd0:	cmp	r7, r3
   1afd4:	bne	1b0d4 <argp_parse@@Base+0x39c0>
   1afd8:	ldr	r3, [r5, #32]
   1afdc:	sub	r3, r3, r7
   1afe0:	cmp	r2, r3
   1afe4:	bgt	1b0d4 <argp_parse@@Base+0x39c0>
   1afe8:	cmp	r2, #0
   1afec:	ble	1b00c <argp_parse@@Base+0x38f8>
   1aff0:	mov	r3, #0
   1aff4:	mov	r1, #32
   1aff8:	strb	r1, [r4], #1
   1affc:	ldr	r2, [r5, #12]
   1b000:	add	r3, r3, #1
   1b004:	cmp	r2, r3
   1b008:	bgt	1aff8 <argp_parse@@Base+0x38e4>
   1b00c:	cmp	r4, r7
   1b010:	bcc	1b164 <argp_parse@@Base+0x3a50>
   1b014:	sub	r8, r9, r8
   1b018:	cmp	r2, #0
   1b01c:	add	r8, r4, r8
   1b020:	mvneq	r2, #0
   1b024:	str	r8, [r5, #28]
   1b028:	str	r2, [r5, #20]
   1b02c:	b	1ad4c <argp_parse@@Base+0x3638>
   1b030:	sub	r9, r8, r4
   1b034:	mov	r2, r9
   1b038:	mov	r1, #10
   1b03c:	mov	r0, r4
   1b040:	bl	114f8 <memchr@plt>
   1b044:	mov	fp, r0
   1b048:	b	1ade4 <argp_parse@@Base+0x36d0>
   1b04c:	mov	r3, #0
   1b050:	str	r3, [r5, #20]
   1b054:	add	r4, fp, #1
   1b058:	ldr	r8, [r5, #28]
   1b05c:	b	1ad4c <argp_parse@@Base+0x3638>
   1b060:	ldr	r3, [r5, #32]
   1b064:	sub	r3, r3, r6
   1b068:	cmp	r3, sl
   1b06c:	ble	1af48 <argp_parse@@Base+0x3834>
   1b070:	add	r1, r6, #1
   1b074:	sub	r3, r7, r1
   1b078:	mov	r2, #10
   1b07c:	sub	r8, r7, r4
   1b080:	mov	fp, r4
   1b084:	strb	r2, [r6]
   1b088:	mov	r4, r1
   1b08c:	b	1afbc <argp_parse@@Base+0x38a8>
   1b090:	add	r7, r6, #1
   1b094:	cmp	r4, r7
   1b098:	movcc	r6, r7
   1b09c:	bcc	1af28 <argp_parse@@Base+0x3814>
   1b0a0:	cmp	r6, fp
   1b0a4:	bcc	1b194 <argp_parse@@Base+0x3a80>
   1b0a8:	cmp	r6, fp
   1b0ac:	beq	1b180 <argp_parse@@Base+0x3a6c>
   1b0b0:	bl	11450 <__ctype_b_loc@plt>
   1b0b4:	ldr	r1, [r0]
   1b0b8:	mov	r7, r6
   1b0bc:	ldrb	r3, [r7, #1]!
   1b0c0:	lsl	r3, r3, #1
   1b0c4:	ldrh	r3, [r1, r3]
   1b0c8:	tst	r3, #1
   1b0cc:	bne	1b0bc <argp_parse@@Base+0x39a8>
   1b0d0:	b	1af28 <argp_parse@@Base+0x3814>
   1b0d4:	cmp	r2, #0
   1b0d8:	movgt	r6, #0
   1b0dc:	movgt	sl, #32
   1b0e0:	ble	1b00c <argp_parse@@Base+0x38f8>
   1b0e4:	ldr	r0, [r5]
   1b0e8:	ldr	r2, [r0, #20]
   1b0ec:	ldr	r1, [r0, #24]
   1b0f0:	add	ip, r2, #1
   1b0f4:	cmp	r2, r1
   1b0f8:	strcc	ip, [r0, #20]
   1b0fc:	strbcc	sl, [r2]
   1b100:	bcs	1b158 <argp_parse@@Base+0x3a44>
   1b104:	ldr	r2, [r5, #12]
   1b108:	add	r6, r6, #1
   1b10c:	cmp	r2, r6
   1b110:	bgt	1b0e4 <argp_parse@@Base+0x39d0>
   1b114:	b	1b00c <argp_parse@@Base+0x38f8>
   1b118:	mov	r8, #32
   1b11c:	b	1b12c <argp_parse@@Base+0x3a18>
   1b120:	add	r6, r6, #1
   1b124:	cmp	r7, r6
   1b128:	beq	1adb0 <argp_parse@@Base+0x369c>
   1b12c:	ldr	r0, [r5]
   1b130:	ldr	r3, [r0, #20]
   1b134:	ldr	r2, [r0, #24]
   1b138:	add	r1, r3, #1
   1b13c:	cmp	r3, r2
   1b140:	strcc	r1, [r0, #20]
   1b144:	strbcc	r8, [r3]
   1b148:	bcc	1b120 <argp_parse@@Base+0x3a0c>
   1b14c:	mov	r1, #32
   1b150:	bl	11528 <__overflow@plt>
   1b154:	b	1b120 <argp_parse@@Base+0x3a0c>
   1b158:	mov	r1, #32
   1b15c:	bl	11528 <__overflow@plt>
   1b160:	b	1b104 <argp_parse@@Base+0x39f0>
   1b164:	add	r2, fp, r9
   1b168:	sub	r2, r2, r7
   1b16c:	mov	r1, r7
   1b170:	mov	r0, r4
   1b174:	bl	112ac <memmove@plt>
   1b178:	ldr	r2, [r5, #12]
   1b17c:	b	1b014 <argp_parse@@Base+0x3900>
   1b180:	mov	r3, #0
   1b184:	str	r3, [r5, #20]
   1b188:	add	r4, r6, #1
   1b18c:	ldr	r8, [r5, #28]
   1b190:	b	1ad4c <argp_parse@@Base+0x3638>
   1b194:	add	r7, r6, #1
   1b198:	b	1b1bc <argp_parse@@Base+0x3aa8>
   1b19c:	bl	11450 <__ctype_b_loc@plt>
   1b1a0:	ldrb	r3, [r7]
   1b1a4:	add	r7, r7, #1
   1b1a8:	lsl	r3, r3, #1
   1b1ac:	ldr	r1, [r0]
   1b1b0:	ldrh	r3, [r1, r3]
   1b1b4:	tst	r3, #1
   1b1b8:	bne	1b0b8 <argp_parse@@Base+0x39a4>
   1b1bc:	cmp	fp, r7
   1b1c0:	mov	r6, r7
   1b1c4:	bne	1b19c <argp_parse@@Base+0x3a88>
   1b1c8:	b	1b0a8 <argp_parse@@Base+0x3994>
   1b1cc:	add	r1, r9, r6
   1b1d0:	sub	r7, r7, r1
   1b1d4:	add	r8, r8, r7
   1b1d8:	str	r8, [r5, #28]
   1b1dc:	str	r1, [r5, #20]
   1b1e0:	b	1ae64 <argp_parse@@Base+0x3750>
   1b1e4:	sub	r8, r8, r7
   1b1e8:	mov	r1, r7
   1b1ec:	mov	r2, r8
   1b1f0:	add	r0, r6, sl
   1b1f4:	bl	112ac <memmove@plt>
   1b1f8:	ldr	r3, [r5, #12]
   1b1fc:	mov	r2, r6
   1b200:	add	r7, r3, #1
   1b204:	add	r7, r6, r7
   1b208:	add	r8, r7, r8
   1b20c:	mov	r1, #10
   1b210:	sub	r9, r8, r4
   1b214:	strb	r1, [r2], #1
   1b218:	sub	r8, r7, r4
   1b21c:	mov	fp, r4
   1b220:	mov	r4, r2
   1b224:	b	1afbc <argp_parse@@Base+0x38a8>
   1b228:	mov	r0, r3
   1b22c:	mov	r1, #10
   1b230:	bl	11528 <__overflow@plt>
   1b234:	b	1afa4 <argp_parse@@Base+0x3890>
   1b238:	str	r1, [r5, #20]
   1b23c:	ldr	r8, [r5, #28]
   1b240:	b	1ae64 <argp_parse@@Base+0x3750>
   1b244:	push	{r4, lr}
   1b248:	mov	r4, r0
   1b24c:	bl	1ad30 <argp_parse@@Base+0x361c>
   1b250:	ldr	r2, [r4, #28]
   1b254:	ldr	r0, [r4, #24]
   1b258:	cmp	r2, r0
   1b25c:	bls	1b274 <argp_parse@@Base+0x3b60>
   1b260:	sub	r2, r2, r0
   1b264:	ldr	r3, [r4]
   1b268:	mov	r1, #1
   1b26c:	bl	1130c <fwrite_unlocked@plt>
   1b270:	ldr	r0, [r4, #24]
   1b274:	bl	112c4 <free@plt>
   1b278:	mov	r0, r4
   1b27c:	pop	{r4, lr}
   1b280:	b	112c4 <free@plt>
   1b284:	push	{r4, r5, r6, lr}
   1b288:	mov	r4, r0
   1b28c:	mov	r5, r1
   1b290:	bl	1ad30 <argp_parse@@Base+0x361c>
   1b294:	ldr	r3, [r4, #24]
   1b298:	ldr	r2, [r4, #28]
   1b29c:	mov	r0, r3
   1b2a0:	sub	r2, r2, r3
   1b2a4:	mov	r1, #1
   1b2a8:	ldr	r3, [r4]
   1b2ac:	bl	1130c <fwrite_unlocked@plt>
   1b2b0:	ldr	r2, [r4, #28]
   1b2b4:	ldr	r3, [r4, #24]
   1b2b8:	sub	r1, r2, r3
   1b2bc:	cmp	r0, r1
   1b2c0:	bne	1b31c <argp_parse@@Base+0x3c08>
   1b2c4:	ldr	r1, [r4, #32]
   1b2c8:	mov	r2, #0
   1b2cc:	sub	r1, r1, r3
   1b2d0:	cmp	r1, r5
   1b2d4:	str	r3, [r4, #28]
   1b2d8:	str	r2, [r4, #16]
   1b2dc:	movcs	r3, #1
   1b2e0:	bcs	1b314 <argp_parse@@Base+0x3c00>
   1b2e4:	adds	r5, r1, r5
   1b2e8:	bcs	1b34c <argp_parse@@Base+0x3c38>
   1b2ec:	mov	r0, r3
   1b2f0:	mov	r1, r5
   1b2f4:	bl	11354 <realloc@plt>
   1b2f8:	cmp	r0, #0
   1b2fc:	beq	1b34c <argp_parse@@Base+0x3c38>
   1b300:	mov	r3, #1
   1b304:	add	r1, r0, r5
   1b308:	str	r1, [r4, #32]
   1b30c:	str	r0, [r4, #24]
   1b310:	str	r0, [r4, #28]
   1b314:	mov	r0, r3
   1b318:	pop	{r4, r5, r6, pc}
   1b31c:	ldr	r1, [r4, #16]
   1b320:	sub	r2, r2, r0
   1b324:	sub	r1, r1, r0
   1b328:	str	r2, [r4, #28]
   1b32c:	str	r1, [r4, #16]
   1b330:	sub	r2, r2, r3
   1b334:	add	r1, r3, r0
   1b338:	mov	r0, r3
   1b33c:	bl	112ac <memmove@plt>
   1b340:	mov	r3, #0
   1b344:	mov	r0, r3
   1b348:	pop	{r4, r5, r6, pc}
   1b34c:	bl	1148c <__errno_location@plt>
   1b350:	mov	r2, #12
   1b354:	mov	r3, #0
   1b358:	str	r2, [r0]
   1b35c:	mov	r0, r3
   1b360:	pop	{r4, r5, r6, pc}
   1b364:	ldrd	r2, [r0, #28]
   1b368:	sub	r3, r3, r2
   1b36c:	cmp	r3, r1
   1b370:	bcc	1b37c <argp_parse@@Base+0x3c68>
   1b374:	mov	r0, #1
   1b378:	bx	lr
   1b37c:	b	1b284 <argp_parse@@Base+0x3b70>
   1b380:	push	{r1, r2, r3}
   1b384:	mov	r1, #150	; 0x96
   1b388:	push	{r4, r5, r6, r7, r8, lr}
   1b38c:	sub	sp, sp, #20
   1b390:	ldr	r8, [pc, #164]	; 1b43c <argp_parse@@Base+0x3d28>
   1b394:	ldr	r7, [sp, #44]	; 0x2c
   1b398:	mov	r5, r0
   1b39c:	ldr	r3, [r8]
   1b3a0:	add	r6, sp, #48	; 0x30
   1b3a4:	str	r3, [sp, #12]
   1b3a8:	ldr	r3, [r5, #32]
   1b3ac:	ldr	r0, [r5, #28]
   1b3b0:	sub	r2, r3, r0
   1b3b4:	cmp	r1, r2
   1b3b8:	bhi	1b418 <argp_parse@@Base+0x3d04>
   1b3bc:	sub	r4, r3, r0
   1b3c0:	str	r6, [sp, #4]
   1b3c4:	str	r7, [sp]
   1b3c8:	mov	r1, r4
   1b3cc:	mvn	r3, #0
   1b3d0:	mov	r2, #1
   1b3d4:	str	r6, [sp, #8]
   1b3d8:	bl	112dc <__vsnprintf_chk@plt>
   1b3dc:	cmp	r0, r4
   1b3e0:	bcs	1b410 <argp_parse@@Base+0x3cfc>
   1b3e4:	ldr	r3, [r5, #28]
   1b3e8:	add	r3, r3, r0
   1b3ec:	str	r3, [r5, #28]
   1b3f0:	ldr	r2, [sp, #12]
   1b3f4:	ldr	r3, [r8]
   1b3f8:	cmp	r2, r3
   1b3fc:	bne	1b438 <argp_parse@@Base+0x3d24>
   1b400:	add	sp, sp, #20
   1b404:	pop	{r4, r5, r6, r7, r8, lr}
   1b408:	add	sp, sp, #12
   1b40c:	bx	lr
   1b410:	add	r1, r0, #1
   1b414:	b	1b3a8 <argp_parse@@Base+0x3c94>
   1b418:	mov	r0, r5
   1b41c:	bl	1b284 <argp_parse@@Base+0x3b70>
   1b420:	cmp	r0, #0
   1b424:	ldrne	r3, [r5, #32]
   1b428:	ldrne	r0, [r5, #28]
   1b42c:	bne	1b3bc <argp_parse@@Base+0x3ca8>
   1b430:	mvn	r0, #0
   1b434:	b	1b3f0 <argp_parse@@Base+0x3cdc>
   1b438:	bl	1133c <__stack_chk_fail@plt>
   1b43c:	andeq	lr, r2, r8, lsl #30
   1b440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b444:	sub	sp, sp, #124	; 0x7c
   1b448:	ldr	r6, [pc, #916]	; 1b7e4 <argp_parse@@Base+0x40d0>
   1b44c:	mov	r0, #14
   1b450:	ldr	r7, [pc, #912]	; 1b7e8 <argp_parse@@Base+0x40d4>
   1b454:	ldr	r3, [r6]
   1b458:	ldr	r5, [pc, #908]	; 1b7ec <argp_parse@@Base+0x40d8>
   1b45c:	str	r3, [sp, #116]	; 0x74
   1b460:	bl	11564 <nl_langinfo@plt>
   1b464:	ldr	r4, [r7]
   1b468:	cmp	r0, #0
   1b46c:	movne	r5, r0
   1b470:	cmp	r4, #0
   1b474:	beq	1b518 <argp_parse@@Base+0x3e04>
   1b478:	ldrb	r7, [r4]
   1b47c:	cmp	r7, #0
   1b480:	bne	1b4b4 <argp_parse@@Base+0x3da0>
   1b484:	b	1b4ec <argp_parse@@Base+0x3dd8>
   1b488:	mov	r0, r4
   1b48c:	bl	11468 <strlen@plt>
   1b490:	add	r0, r0, #1
   1b494:	add	r7, r4, r0
   1b498:	mov	r0, r7
   1b49c:	bl	11468 <strlen@plt>
   1b4a0:	add	r0, r0, #1
   1b4a4:	add	r4, r7, r0
   1b4a8:	ldrb	r7, [r7, r0]
   1b4ac:	cmp	r7, #0
   1b4b0:	beq	1b4ec <argp_parse@@Base+0x3dd8>
   1b4b4:	mov	r1, r4
   1b4b8:	mov	r0, r5
   1b4bc:	bl	1127c <strcmp@plt>
   1b4c0:	cmp	r0, #0
   1b4c4:	beq	1b4dc <argp_parse@@Base+0x3dc8>
   1b4c8:	cmp	r7, #42	; 0x2a
   1b4cc:	bne	1b488 <argp_parse@@Base+0x3d74>
   1b4d0:	ldrb	r3, [r4, #1]
   1b4d4:	cmp	r3, #0
   1b4d8:	bne	1b488 <argp_parse@@Base+0x3d74>
   1b4dc:	mov	r0, r4
   1b4e0:	bl	11468 <strlen@plt>
   1b4e4:	add	r0, r0, #1
   1b4e8:	add	r5, r4, r0
   1b4ec:	ldrb	r0, [r5]
   1b4f0:	ldr	r2, [sp, #116]	; 0x74
   1b4f4:	ldr	r1, [pc, #756]	; 1b7f0 <argp_parse@@Base+0x40dc>
   1b4f8:	ldr	r3, [r6]
   1b4fc:	cmp	r0, #0
   1b500:	movne	r0, r5
   1b504:	moveq	r0, r1
   1b508:	cmp	r2, r3
   1b50c:	bne	1b7d0 <argp_parse@@Base+0x40bc>
   1b510:	add	sp, sp, #124	; 0x7c
   1b514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b518:	ldr	r0, [pc, #724]	; 1b7f4 <argp_parse@@Base+0x40e0>
   1b51c:	bl	113e4 <getenv@plt>
   1b520:	subs	r8, r0, #0
   1b524:	beq	1b590 <argp_parse@@Base+0x3e7c>
   1b528:	ldrb	r3, [r8]
   1b52c:	cmp	r3, #0
   1b530:	bne	1b568 <argp_parse@@Base+0x3e54>
   1b534:	ldr	r8, [pc, #700]	; 1b7f8 <argp_parse@@Base+0x40e4>
   1b538:	mov	r0, #23
   1b53c:	mov	sl, #9
   1b540:	mov	fp, #8
   1b544:	bl	113fc <malloc@plt>
   1b548:	subs	r9, r0, #0
   1b54c:	beq	1b584 <argp_parse@@Base+0x3e70>
   1b550:	mov	r1, r8
   1b554:	mov	r2, fp
   1b558:	bl	112e8 <memcpy@plt>
   1b55c:	mov	r3, #47	; 0x2f
   1b560:	strb	r3, [r9, fp]
   1b564:	b	1b5b0 <argp_parse@@Base+0x3e9c>
   1b568:	bl	11468 <strlen@plt>
   1b56c:	subs	sl, r0, #0
   1b570:	moveq	r0, #14
   1b574:	bne	1b78c <argp_parse@@Base+0x4078>
   1b578:	bl	113fc <malloc@plt>
   1b57c:	subs	r9, r0, #0
   1b580:	bne	1b5a4 <argp_parse@@Base+0x3e90>
   1b584:	ldr	r4, [pc, #608]	; 1b7ec <argp_parse@@Base+0x40d8>
   1b588:	str	r4, [r7]
   1b58c:	b	1b478 <argp_parse@@Base+0x3d64>
   1b590:	mov	r0, #23
   1b594:	mov	sl, #9
   1b598:	mov	fp, #8
   1b59c:	ldr	r8, [pc, #596]	; 1b7f8 <argp_parse@@Base+0x40e4>
   1b5a0:	b	1b544 <argp_parse@@Base+0x3e30>
   1b5a4:	mov	r1, r8
   1b5a8:	mov	r2, sl
   1b5ac:	bl	112e8 <memcpy@plt>
   1b5b0:	ldr	r3, [pc, #580]	; 1b7fc <argp_parse@@Base+0x40e8>
   1b5b4:	add	ip, r9, sl
   1b5b8:	ldm	r3!, {r0, r1, r2}
   1b5bc:	ldrh	r3, [r3]
   1b5c0:	str	r0, [r9, sl]
   1b5c4:	str	r1, [ip, #4]
   1b5c8:	strh	r3, [ip, #12]
   1b5cc:	str	r2, [ip, #8]
   1b5d0:	mov	r1, #32768	; 0x8000
   1b5d4:	mov	r0, r9
   1b5d8:	bl	113d8 <open64@plt>
   1b5dc:	subs	sl, r0, #0
   1b5e0:	bge	1b5f4 <argp_parse@@Base+0x3ee0>
   1b5e4:	ldr	r4, [pc, #512]	; 1b7ec <argp_parse@@Base+0x40d8>
   1b5e8:	mov	r0, r9
   1b5ec:	bl	112c4 <free@plt>
   1b5f0:	b	1b588 <argp_parse@@Base+0x3e74>
   1b5f4:	ldr	r1, [pc, #516]	; 1b800 <argp_parse@@Base+0x40ec>
   1b5f8:	bl	1124c <fdopen@plt>
   1b5fc:	subs	r8, r0, #0
   1b600:	movne	fp, #0
   1b604:	strne	r9, [sp]
   1b608:	strne	r5, [sp, #4]
   1b60c:	beq	1b7a4 <argp_parse@@Base+0x4090>
   1b610:	ldr	r3, [r8, #4]
   1b614:	ldr	r2, [r8, #8]
   1b618:	cmp	r3, r2
   1b61c:	bcs	1b6e8 <argp_parse@@Base+0x3fd4>
   1b620:	add	r2, r3, #1
   1b624:	str	r2, [r8, #4]
   1b628:	ldrb	r0, [r3]
   1b62c:	sub	r3, r0, #9
   1b630:	cmp	r0, #32
   1b634:	cmpne	r3, #1
   1b638:	bls	1b610 <argp_parse@@Base+0x3efc>
   1b63c:	cmp	r0, #35	; 0x23
   1b640:	beq	1b6fc <argp_parse@@Base+0x3fe8>
   1b644:	mov	r1, r8
   1b648:	bl	11480 <ungetc@plt>
   1b64c:	add	r3, sp, #64	; 0x40
   1b650:	add	r2, sp, #12
   1b654:	ldr	r1, [pc, #424]	; 1b804 <argp_parse@@Base+0x40f0>
   1b658:	mov	r0, r8
   1b65c:	bl	114c8 <fscanf@plt>
   1b660:	cmp	r0, #1
   1b664:	ble	1b738 <argp_parse@@Base+0x4024>
   1b668:	add	r0, sp, #12
   1b66c:	bl	11468 <strlen@plt>
   1b670:	mov	sl, r0
   1b674:	add	r0, sp, #64	; 0x40
   1b678:	bl	11468 <strlen@plt>
   1b67c:	cmp	fp, #0
   1b680:	mov	r9, r0
   1b684:	add	r3, sl, r0
   1b688:	bne	1b75c <argp_parse@@Base+0x4048>
   1b68c:	add	r0, r3, #3
   1b690:	add	fp, r3, #2
   1b694:	bl	113fc <malloc@plt>
   1b698:	mov	r5, r0
   1b69c:	cmp	r5, #0
   1b6a0:	beq	1b7b0 <argp_parse@@Base+0x409c>
   1b6a4:	sub	r4, fp, r9
   1b6a8:	sub	r0, r4, sl
   1b6ac:	sub	r0, r0, #2
   1b6b0:	add	r1, sp, #12
   1b6b4:	add	r2, sl, #1
   1b6b8:	add	r0, r5, r0
   1b6bc:	bl	112e8 <memcpy@plt>
   1b6c0:	sub	r0, r4, #1
   1b6c4:	add	r2, r9, #1
   1b6c8:	add	r0, r5, r0
   1b6cc:	add	r1, sp, #64	; 0x40
   1b6d0:	bl	112e8 <memcpy@plt>
   1b6d4:	ldr	r3, [r8, #4]
   1b6d8:	ldr	r2, [r8, #8]
   1b6dc:	mov	r4, r5
   1b6e0:	cmp	r3, r2
   1b6e4:	bcc	1b620 <argp_parse@@Base+0x3f0c>
   1b6e8:	mov	r0, r8
   1b6ec:	bl	1151c <__uflow@plt>
   1b6f0:	cmn	r0, #1
   1b6f4:	bne	1b62c <argp_parse@@Base+0x3f18>
   1b6f8:	b	1b738 <argp_parse@@Base+0x4024>
   1b6fc:	ldr	r3, [r8, #4]
   1b700:	ldr	r2, [r8, #8]
   1b704:	cmp	r3, r2
   1b708:	bcs	1b778 <argp_parse@@Base+0x4064>
   1b70c:	add	r2, r3, #1
   1b710:	str	r2, [r8, #4]
   1b714:	ldrb	r0, [r3]
   1b718:	mov	r3, #1
   1b71c:	cmp	r0, #10
   1b720:	moveq	r3, #0
   1b724:	andne	r3, r3, #1
   1b728:	cmp	r3, #0
   1b72c:	bne	1b6fc <argp_parse@@Base+0x3fe8>
   1b730:	cmn	r0, #1
   1b734:	bne	1b610 <argp_parse@@Base+0x3efc>
   1b738:	mov	r0, r8
   1b73c:	ldr	r9, [sp]
   1b740:	ldr	r5, [sp, #4]
   1b744:	bl	11504 <fclose@plt>
   1b748:	cmp	fp, #0
   1b74c:	beq	1b5e4 <argp_parse@@Base+0x3ed0>
   1b750:	mov	r3, #0
   1b754:	strb	r3, [r4, fp]
   1b758:	b	1b5e8 <argp_parse@@Base+0x3ed4>
   1b75c:	add	fp, fp, r3
   1b760:	add	r1, fp, #3
   1b764:	mov	r0, r4
   1b768:	bl	11354 <realloc@plt>
   1b76c:	add	fp, fp, #2
   1b770:	mov	r5, r0
   1b774:	b	1b69c <argp_parse@@Base+0x3f88>
   1b778:	mov	r0, r8
   1b77c:	bl	1151c <__uflow@plt>
   1b780:	adds	r3, r0, #1
   1b784:	movne	r3, #1
   1b788:	b	1b71c <argp_parse@@Base+0x4008>
   1b78c:	add	r3, r8, sl
   1b790:	ldrb	r3, [r3, #-1]
   1b794:	cmp	r3, #47	; 0x2f
   1b798:	bne	1b7d4 <argp_parse@@Base+0x40c0>
   1b79c:	add	r0, sl, #14
   1b7a0:	b	1b578 <argp_parse@@Base+0x3e64>
   1b7a4:	mov	r0, sl
   1b7a8:	bl	115dc <close@plt>
   1b7ac:	b	1b5e4 <argp_parse@@Base+0x3ed0>
   1b7b0:	mov	r0, r4
   1b7b4:	ldr	r9, [sp]
   1b7b8:	ldr	r5, [sp, #4]
   1b7bc:	bl	112c4 <free@plt>
   1b7c0:	mov	r0, r8
   1b7c4:	bl	11504 <fclose@plt>
   1b7c8:	ldr	r4, [pc, #28]	; 1b7ec <argp_parse@@Base+0x40d8>
   1b7cc:	b	1b5e8 <argp_parse@@Base+0x3ed4>
   1b7d0:	bl	1133c <__stack_chk_fail@plt>
   1b7d4:	add	r0, sl, #15
   1b7d8:	mov	fp, sl
   1b7dc:	add	sl, sl, #1
   1b7e0:	b	1b544 <argp_parse@@Base+0x3e30>
   1b7e4:	andeq	lr, r2, r8, lsl #30
   1b7e8:	andeq	pc, r2, r4, asr #8
   1b7ec:	ldrdeq	lr, [r1], -r4
   1b7f0:	andeq	sp, r1, r0, lsr #30
   1b7f4:	andeq	sp, r1, r4, lsr pc
   1b7f8:	andeq	sp, r1, r8, lsr #30
   1b7fc:	andeq	sp, r1, r4, asr #30
   1b800:	ldrdeq	sp, [r1], -ip
   1b804:	andeq	sp, r1, r4, asr pc
   1b808:	ldr	ip, [r1, #36]	; 0x24
   1b80c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b810:	ldr	r7, [r1, #32]
   1b814:	ldr	r6, [r1]
   1b818:	add	r5, r0, ip, lsl #2
   1b81c:	mov	r4, r7
   1b820:	mov	lr, r6
   1b824:	cmp	lr, ip
   1b828:	movle	r3, #0
   1b82c:	movgt	r3, #1
   1b830:	cmp	r4, ip
   1b834:	movge	r3, #0
   1b838:	cmp	r3, #0
   1b83c:	beq	1b8b8 <argp_parse@@Base+0x41a4>
   1b840:	sub	fp, lr, ip
   1b844:	sub	r8, ip, r4
   1b848:	cmp	fp, r8
   1b84c:	ble	1b884 <argp_parse@@Base+0x4170>
   1b850:	sub	lr, lr, r8
   1b854:	add	r8, r8, lr
   1b858:	sub	r2, r4, #-1073741823	; 0xc0000001
   1b85c:	add	r8, r0, r8, lsl #2
   1b860:	add	r3, r0, lr, lsl #2
   1b864:	add	r2, r0, r2, lsl #2
   1b868:	ldr	r9, [r2, #4]!
   1b86c:	ldr	sl, [r3]
   1b870:	str	sl, [r2]
   1b874:	str	r9, [r3], #4
   1b878:	cmp	r8, r3
   1b87c:	bne	1b868 <argp_parse@@Base+0x4154>
   1b880:	b	1b824 <argp_parse@@Base+0x4110>
   1b884:	sub	r2, r4, #-1073741823	; 0xc0000001
   1b888:	add	sl, fp, ip
   1b88c:	add	r2, r0, r2, lsl #2
   1b890:	add	sl, r0, sl, lsl #2
   1b894:	mov	r3, r5
   1b898:	ldr	r8, [r2, #4]!
   1b89c:	ldr	r9, [r3]
   1b8a0:	str	r9, [r2]
   1b8a4:	str	r8, [r3], #4
   1b8a8:	cmp	r3, sl
   1b8ac:	bne	1b898 <argp_parse@@Base+0x4184>
   1b8b0:	add	r4, r4, fp
   1b8b4:	b	1b824 <argp_parse@@Base+0x4110>
   1b8b8:	sub	ip, r6, ip
   1b8bc:	add	r7, ip, r7
   1b8c0:	str	r7, [r1, #32]
   1b8c4:	str	r6, [r1, #36]	; 0x24
   1b8c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8d0:	sub	sp, sp, #68	; 0x44
   1b8d4:	subs	r6, r0, #0
   1b8d8:	ldr	r4, [sp, #112]	; 0x70
   1b8dc:	ldr	r0, [pc, #3788]	; 1c7b0 <argp_parse@@Base+0x509c>
   1b8e0:	str	r3, [sp, #20]
   1b8e4:	ldr	r3, [r4, #4]
   1b8e8:	ldr	r0, [r0]
   1b8ec:	str	r3, [sp, #12]
   1b8f0:	ldr	r3, [sp, #104]	; 0x68
   1b8f4:	str	r1, [sp, #16]
   1b8f8:	str	r0, [sp, #60]	; 0x3c
   1b8fc:	str	r3, [sp, #24]
   1b900:	ble	1bbc0 <argp_parse@@Base+0x44ac>
   1b904:	ldr	r3, [r4]
   1b908:	mov	r9, r2
   1b90c:	mov	r2, #0
   1b910:	cmp	r3, r2
   1b914:	str	r2, [r4, #12]
   1b918:	beq	1ba4c <argp_parse@@Base+0x4338>
   1b91c:	ldr	r2, [r4, #16]
   1b920:	cmp	r2, #0
   1b924:	beq	1ba58 <argp_parse@@Base+0x4344>
   1b928:	ldrb	r3, [r9]
   1b92c:	ldr	r2, [r4, #20]
   1b930:	sub	r1, r3, #43	; 0x2b
   1b934:	tst	r1, #253	; 0xfd
   1b938:	ldrbeq	r3, [r9, #1]
   1b93c:	addeq	r9, r9, #1
   1b940:	cmp	r3, #58	; 0x3a
   1b944:	ldr	r3, [sp, #12]
   1b948:	moveq	r3, #0
   1b94c:	cmp	r2, #0
   1b950:	str	r3, [sp, #12]
   1b954:	beq	1baa8 <argp_parse@@Base+0x4394>
   1b958:	ldrb	r3, [r2]
   1b95c:	cmp	r3, #0
   1b960:	beq	1baa8 <argp_parse@@Base+0x4394>
   1b964:	ldr	r3, [sp, #20]
   1b968:	cmp	r3, #0
   1b96c:	beq	1b9b8 <argp_parse@@Base+0x42a4>
   1b970:	ldr	r5, [r4]
   1b974:	ldr	r3, [sp, #16]
   1b978:	ldr	r3, [r3, r5, lsl #2]
   1b97c:	ldrb	r1, [r3, #1]
   1b980:	cmp	r1, #45	; 0x2d
   1b984:	beq	1bdc0 <argp_parse@@Base+0x46ac>
   1b988:	ldr	r0, [sp, #108]	; 0x6c
   1b98c:	cmp	r0, #0
   1b990:	beq	1b9b8 <argp_parse@@Base+0x42a4>
   1b994:	ldrb	r3, [r3, #2]
   1b998:	cmp	r3, #0
   1b99c:	bne	1bdc0 <argp_parse@@Base+0x46ac>
   1b9a0:	mov	r0, r9
   1b9a4:	str	r2, [sp, #28]
   1b9a8:	bl	11474 <strchr@plt>
   1b9ac:	ldr	r2, [sp, #28]
   1b9b0:	cmp	r0, #0
   1b9b4:	beq	1bdc0 <argp_parse@@Base+0x46ac>
   1b9b8:	add	r7, r2, #1
   1b9bc:	str	r7, [r4, #20]
   1b9c0:	ldrb	r5, [r2]
   1b9c4:	mov	r0, r9
   1b9c8:	str	r2, [sp, #28]
   1b9cc:	mov	r1, r5
   1b9d0:	bl	11474 <strchr@plt>
   1b9d4:	ldr	r2, [sp, #28]
   1b9d8:	mov	r8, r5
   1b9dc:	ldrb	r3, [r2, #1]
   1b9e0:	cmp	r3, #0
   1b9e4:	ldreq	r3, [r4]
   1b9e8:	addeq	r3, r3, #1
   1b9ec:	streq	r3, [r4]
   1b9f0:	sub	r3, r5, #58	; 0x3a
   1b9f4:	cmp	r0, #0
   1b9f8:	cmpne	r3, #1
   1b9fc:	bls	1bf7c <argp_parse@@Base+0x4868>
   1ba00:	ldrb	r1, [r0]
   1ba04:	ldrb	r3, [r0, #1]
   1ba08:	cmp	r1, #87	; 0x57
   1ba0c:	beq	1bcb8 <argp_parse@@Base+0x45a4>
   1ba10:	cmp	r3, #58	; 0x3a
   1ba14:	bne	1bb58 <argp_parse@@Base+0x4444>
   1ba18:	ldrb	r3, [r0, #2]
   1ba1c:	ldrb	r0, [r2, #1]
   1ba20:	cmp	r3, #58	; 0x3a
   1ba24:	beq	1c034 <argp_parse@@Base+0x4920>
   1ba28:	cmp	r0, #0
   1ba2c:	ldr	r3, [r4]
   1ba30:	beq	1c200 <argp_parse@@Base+0x4aec>
   1ba34:	add	r3, r3, #1
   1ba38:	str	r3, [r4]
   1ba3c:	str	r7, [r4, #12]
   1ba40:	mov	r3, #0
   1ba44:	str	r3, [r4, #20]
   1ba48:	b	1bb58 <argp_parse@@Base+0x4444>
   1ba4c:	mov	r2, #1
   1ba50:	mov	r3, r2
   1ba54:	str	r2, [r4]
   1ba58:	ldr	r2, [sp, #116]	; 0x74
   1ba5c:	str	r3, [r4, #36]	; 0x24
   1ba60:	cmp	r2, #0
   1ba64:	mov	r2, #0
   1ba68:	str	r3, [r4, #32]
   1ba6c:	str	r2, [r4, #20]
   1ba70:	beq	1bb78 <argp_parse@@Base+0x4464>
   1ba74:	mov	r3, #1
   1ba78:	str	r3, [r4, #28]
   1ba7c:	ldrb	r3, [r9]
   1ba80:	cmp	r3, #45	; 0x2d
   1ba84:	beq	1bba0 <argp_parse@@Base+0x448c>
   1ba88:	cmp	r3, #43	; 0x2b
   1ba8c:	movne	r3, #0
   1ba90:	strne	r3, [r4, #24]
   1ba94:	beq	1bca8 <argp_parse@@Base+0x4594>
   1ba98:	mov	r3, #1
   1ba9c:	str	r3, [r4, #16]
   1baa0:	ldrb	r3, [r9]
   1baa4:	b	1b940 <argp_parse@@Base+0x422c>
   1baa8:	ldr	r5, [r4]
   1baac:	ldr	r3, [r4, #36]	; 0x24
   1bab0:	cmp	r3, r5
   1bab4:	ldr	r3, [r4, #32]
   1bab8:	strgt	r5, [r4, #36]	; 0x24
   1babc:	cmp	r5, r3
   1bac0:	ldr	r3, [r4, #24]
   1bac4:	strlt	r5, [r4, #32]
   1bac8:	cmp	r3, #1
   1bacc:	beq	1bbc8 <argp_parse@@Base+0x44b4>
   1bad0:	cmp	r6, r5
   1bad4:	beq	1bbb0 <argp_parse@@Base+0x449c>
   1bad8:	ldr	r8, [sp, #16]
   1badc:	ldr	r1, [pc, #3280]	; 1c7b4 <argp_parse@@Base+0x50a0>
   1bae0:	ldr	r7, [r8, r5, lsl #2]
   1bae4:	mov	r0, r7
   1bae8:	bl	1127c <strcmp@plt>
   1baec:	cmp	r0, #0
   1baf0:	bne	1bb30 <argp_parse@@Base+0x441c>
   1baf4:	ldr	r3, [r4, #32]
   1baf8:	ldr	r2, [r4, #36]	; 0x24
   1bafc:	add	r5, r5, #1
   1bb00:	cmp	r3, r2
   1bb04:	str	r5, [r4]
   1bb08:	beq	1c028 <argp_parse@@Base+0x4914>
   1bb0c:	cmp	r5, r2
   1bb10:	beq	1bb24 <argp_parse@@Base+0x4410>
   1bb14:	mov	r0, r8
   1bb18:	mov	r1, r4
   1bb1c:	bl	1b808 <argp_parse@@Base+0x40f4>
   1bb20:	ldr	r3, [r4, #32]
   1bb24:	str	r6, [r4, #36]	; 0x24
   1bb28:	str	r6, [r4]
   1bb2c:	b	1bbb8 <argp_parse@@Base+0x44a4>
   1bb30:	ldrb	r3, [r7]
   1bb34:	cmp	r3, #45	; 0x2d
   1bb38:	beq	1bc3c <argp_parse@@Base+0x4528>
   1bb3c:	ldr	r3, [r4, #24]
   1bb40:	cmp	r3, #0
   1bb44:	beq	1bbc0 <argp_parse@@Base+0x44ac>
   1bb48:	mov	r8, #1
   1bb4c:	add	r5, r5, #1
   1bb50:	str	r5, [r4]
   1bb54:	str	r7, [r4, #12]
   1bb58:	ldr	r3, [pc, #3152]	; 1c7b0 <argp_parse@@Base+0x509c>
   1bb5c:	ldr	r2, [sp, #60]	; 0x3c
   1bb60:	mov	r0, r8
   1bb64:	ldr	r3, [r3]
   1bb68:	cmp	r2, r3
   1bb6c:	bne	1c7ac <argp_parse@@Base+0x5098>
   1bb70:	add	sp, sp, #68	; 0x44
   1bb74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb78:	ldr	r0, [pc, #3128]	; 1c7b8 <argp_parse@@Base+0x50a4>
   1bb7c:	bl	113e4 <getenv@plt>
   1bb80:	cmp	r0, #0
   1bb84:	beq	1bc80 <argp_parse@@Base+0x456c>
   1bb88:	mov	r3, #1
   1bb8c:	str	r3, [r4, #28]
   1bb90:	ldrb	r3, [r9]
   1bb94:	ldr	r2, [r4, #20]
   1bb98:	cmp	r3, #45	; 0x2d
   1bb9c:	bne	1ba88 <argp_parse@@Base+0x4374>
   1bba0:	mov	r3, #2
   1bba4:	add	r9, r9, #1
   1bba8:	str	r3, [r4, #24]
   1bbac:	b	1ba98 <argp_parse@@Base+0x4384>
   1bbb0:	ldr	r6, [r4, #36]	; 0x24
   1bbb4:	ldr	r3, [r4, #32]
   1bbb8:	cmp	r3, r6
   1bbbc:	strne	r3, [r4]
   1bbc0:	mvn	r8, #0
   1bbc4:	b	1bb58 <argp_parse@@Base+0x4444>
   1bbc8:	ldrd	r2, [r4, #32]
   1bbcc:	cmp	r2, r3
   1bbd0:	beq	1bc70 <argp_parse@@Base+0x455c>
   1bbd4:	cmp	r5, r3
   1bbd8:	beq	1bbec <argp_parse@@Base+0x44d8>
   1bbdc:	mov	r1, r4
   1bbe0:	ldr	r0, [sp, #16]
   1bbe4:	bl	1b808 <argp_parse@@Base+0x40f4>
   1bbe8:	ldr	r3, [r4]
   1bbec:	cmp	r6, r3
   1bbf0:	ble	1bf74 <argp_parse@@Base+0x4860>
   1bbf4:	sub	r1, r3, #-1073741823	; 0xc0000001
   1bbf8:	ldr	r2, [sp, #16]
   1bbfc:	add	r1, r2, r1, lsl #2
   1bc00:	b	1bc14 <argp_parse@@Base+0x4500>
   1bc04:	add	r3, r3, #1
   1bc08:	cmp	r3, r6
   1bc0c:	str	r3, [r4]
   1bc10:	beq	1bf74 <argp_parse@@Base+0x4860>
   1bc14:	ldr	r2, [r1, #4]!
   1bc18:	ldrb	r0, [r2]
   1bc1c:	cmp	r0, #45	; 0x2d
   1bc20:	bne	1bc04 <argp_parse@@Base+0x44f0>
   1bc24:	ldrb	r2, [r2, #1]
   1bc28:	cmp	r2, #0
   1bc2c:	beq	1bc04 <argp_parse@@Base+0x44f0>
   1bc30:	ldr	r5, [r4]
   1bc34:	str	r3, [r4, #36]	; 0x24
   1bc38:	b	1bad0 <argp_parse@@Base+0x43bc>
   1bc3c:	ldrb	r3, [r7, #1]
   1bc40:	cmp	r3, #0
   1bc44:	beq	1bb3c <argp_parse@@Base+0x4428>
   1bc48:	sub	r2, r3, #45	; 0x2d
   1bc4c:	ldr	r3, [sp, #20]
   1bc50:	clz	r2, r2
   1bc54:	cmp	r3, #0
   1bc58:	lsr	r2, r2, #5
   1bc5c:	moveq	r2, #0
   1bc60:	add	r2, r2, #1
   1bc64:	add	r2, r7, r2
   1bc68:	str	r2, [r4, #20]
   1bc6c:	b	1b964 <argp_parse@@Base+0x4250>
   1bc70:	cmp	r5, r3
   1bc74:	strne	r5, [r4, #32]
   1bc78:	movne	r3, r5
   1bc7c:	b	1bbec <argp_parse@@Base+0x44d8>
   1bc80:	ldr	r3, [sp, #116]	; 0x74
   1bc84:	ldr	r2, [r4, #20]
   1bc88:	str	r3, [r4, #28]
   1bc8c:	ldrb	r3, [r9]
   1bc90:	cmp	r3, #45	; 0x2d
   1bc94:	beq	1bba0 <argp_parse@@Base+0x448c>
   1bc98:	cmp	r3, #43	; 0x2b
   1bc9c:	movne	r3, #1
   1bca0:	strne	r3, [r4, #24]
   1bca4:	bne	1ba98 <argp_parse@@Base+0x4384>
   1bca8:	mov	r3, #0
   1bcac:	add	r9, r9, #1
   1bcb0:	str	r3, [r4, #24]
   1bcb4:	b	1ba98 <argp_parse@@Base+0x4384>
   1bcb8:	cmp	r3, #59	; 0x3b
   1bcbc:	bne	1ba10 <argp_parse@@Base+0x42fc>
   1bcc0:	ldr	r3, [sp, #20]
   1bcc4:	cmp	r3, #0
   1bcc8:	beq	1c590 <argp_parse@@Base+0x4e7c>
   1bccc:	ldrb	r0, [r2, #1]
   1bcd0:	ldr	r3, [r4]
   1bcd4:	cmp	r0, #0
   1bcd8:	beq	1c338 <argp_parse@@Base+0x4c24>
   1bcdc:	add	r3, r3, #1
   1bce0:	str	r3, [r4]
   1bce4:	str	r7, [r4, #12]
   1bce8:	str	r7, [r4, #20]
   1bcec:	ldrb	r8, [r7]
   1bcf0:	cmp	r8, #0
   1bcf4:	cmpne	r8, #61	; 0x3d
   1bcf8:	beq	1c5d4 <argp_parse@@Base+0x4ec0>
   1bcfc:	mov	r3, r7
   1bd00:	ldrb	r8, [r3, #1]!
   1bd04:	cmp	r8, #0
   1bd08:	cmpne	r8, #61	; 0x3d
   1bd0c:	bne	1bd00 <argp_parse@@Base+0x45ec>
   1bd10:	str	r3, [sp, #28]
   1bd14:	ldr	r5, [sp, #20]
   1bd18:	ldr	fp, [r5]
   1bd1c:	cmp	fp, #0
   1bd20:	beq	1c590 <argp_parse@@Base+0x4e7c>
   1bd24:	ldr	r3, [sp, #28]
   1bd28:	mov	sl, #0
   1bd2c:	sub	r3, r3, r7
   1bd30:	str	r8, [sp, #32]
   1bd34:	str	r6, [sp, #36]	; 0x24
   1bd38:	str	r4, [sp, #40]	; 0x28
   1bd3c:	str	sl, [sp, #20]
   1bd40:	mov	r4, fp
   1bd44:	mov	r8, r3
   1bd48:	mov	r6, sl
   1bd4c:	mov	fp, sl
   1bd50:	b	1bd84 <argp_parse@@Base+0x4670>
   1bd54:	ldr	r3, [sp, #108]	; 0x6c
   1bd58:	cmp	r3, #0
   1bd5c:	bne	1bd70 <argp_parse@@Base+0x465c>
   1bd60:	ldr	r2, [fp, #4]
   1bd64:	ldr	r3, [r5, #4]
   1bd68:	cmp	r2, r3
   1bd6c:	beq	1c298 <argp_parse@@Base+0x4b84>
   1bd70:	mov	r6, #1
   1bd74:	ldr	r4, [r5, #16]!
   1bd78:	add	sl, sl, #1
   1bd7c:	cmp	r4, #0
   1bd80:	beq	1c2bc <argp_parse@@Base+0x4ba8>
   1bd84:	mov	r2, r8
   1bd88:	mov	r1, r7
   1bd8c:	mov	r0, r4
   1bd90:	bl	115c4 <strncmp@plt>
   1bd94:	cmp	r0, #0
   1bd98:	bne	1bd74 <argp_parse@@Base+0x4660>
   1bd9c:	mov	r0, r4
   1bda0:	bl	11468 <strlen@plt>
   1bda4:	cmp	r0, r8
   1bda8:	beq	1c40c <argp_parse@@Base+0x4cf8>
   1bdac:	cmp	fp, #0
   1bdb0:	bne	1bd54 <argp_parse@@Base+0x4640>
   1bdb4:	str	sl, [sp, #20]
   1bdb8:	mov	fp, r5
   1bdbc:	b	1bd74 <argp_parse@@Base+0x4660>
   1bdc0:	ldrb	r3, [r2]
   1bdc4:	subs	sl, r3, #61	; 0x3d
   1bdc8:	movne	sl, #1
   1bdcc:	cmp	r3, #0
   1bdd0:	moveq	sl, #0
   1bdd4:	cmp	sl, #0
   1bdd8:	beq	1c220 <argp_parse@@Base+0x4b0c>
   1bddc:	mov	fp, r2
   1bde0:	ldrb	r3, [fp, #1]!
   1bde4:	cmp	r3, #0
   1bde8:	cmpne	r3, #61	; 0x3d
   1bdec:	bne	1bde0 <argp_parse@@Base+0x46cc>
   1bdf0:	sub	r3, fp, r2
   1bdf4:	mov	lr, r3
   1bdf8:	ldr	r7, [sp, #20]
   1bdfc:	ldr	sl, [r7]
   1be00:	cmp	sl, #0
   1be04:	beq	1c0e8 <argp_parse@@Base+0x49d4>
   1be08:	mov	r8, #0
   1be0c:	mvn	r3, #0
   1be10:	str	fp, [sp, #36]	; 0x24
   1be14:	str	r6, [sp, #40]	; 0x28
   1be18:	str	r9, [sp, #44]	; 0x2c
   1be1c:	mov	r6, sl
   1be20:	mov	r5, r8
   1be24:	str	r3, [sp, #28]
   1be28:	mov	r1, r2
   1be2c:	mov	fp, lr
   1be30:	mov	sl, r8
   1be34:	mov	r9, r8
   1be38:	b	1be90 <argp_parse@@Base+0x477c>
   1be3c:	cmp	r9, #0
   1be40:	bne	1be7c <argp_parse@@Base+0x4768>
   1be44:	ldr	r3, [sp, #108]	; 0x6c
   1be48:	cmp	r3, #0
   1be4c:	bne	1be60 <argp_parse@@Base+0x474c>
   1be50:	ldr	r2, [sl, #4]
   1be54:	ldr	r3, [r7, #4]
   1be58:	cmp	r2, r3
   1be5c:	beq	1bf94 <argp_parse@@Base+0x4880>
   1be60:	mov	r0, #8
   1be64:	bl	113fc <malloc@plt>
   1be68:	cmp	r0, #0
   1be6c:	strne	r5, [r0, #4]
   1be70:	strne	r7, [r0]
   1be74:	movne	r5, r0
   1be78:	beq	1c1a0 <argp_parse@@Base+0x4a8c>
   1be7c:	ldr	r6, [r7, #16]!
   1be80:	add	r8, r8, #1
   1be84:	cmp	r6, #0
   1be88:	beq	1bed4 <argp_parse@@Base+0x47c0>
   1be8c:	ldr	r1, [r4, #20]
   1be90:	mov	r2, fp
   1be94:	mov	r0, r6
   1be98:	bl	115c4 <strncmp@plt>
   1be9c:	cmp	r0, #0
   1bea0:	bne	1be7c <argp_parse@@Base+0x4768>
   1bea4:	mov	r0, r6
   1bea8:	bl	11468 <strlen@plt>
   1beac:	cmp	r0, fp
   1beb0:	beq	1bfbc <argp_parse@@Base+0x48a8>
   1beb4:	cmp	sl, #0
   1beb8:	bne	1be3c <argp_parse@@Base+0x4728>
   1bebc:	mov	sl, r7
   1bec0:	ldr	r6, [r7, #16]!
   1bec4:	str	r8, [sp, #28]
   1bec8:	cmp	r6, #0
   1becc:	add	r8, r8, #1
   1bed0:	bne	1be8c <argp_parse@@Base+0x4778>
   1bed4:	mov	r3, r9
   1bed8:	orrs	r3, r5, r3
   1bedc:	str	sl, [sp, #32]
   1bee0:	mov	r1, r9
   1bee4:	mov	sl, r6
   1bee8:	ldr	fp, [sp, #36]	; 0x24
   1beec:	ldr	r6, [sp, #40]	; 0x28
   1bef0:	ldr	r9, [sp, #44]	; 0x2c
   1bef4:	bne	1c22c <argp_parse@@Base+0x4b18>
   1bef8:	ldr	r5, [r4]
   1befc:	ldr	r2, [sp, #32]
   1bf00:	cmp	r2, #0
   1bf04:	beq	1c0e8 <argp_parse@@Base+0x49d4>
   1bf08:	add	r3, r5, #1
   1bf0c:	str	r3, [r4]
   1bf10:	ldrb	r0, [fp]
   1bf14:	ldr	r7, [r2, #4]
   1bf18:	cmp	r0, #0
   1bf1c:	beq	1c000 <argp_parse@@Base+0x48ec>
   1bf20:	cmp	r7, #0
   1bf24:	beq	1c050 <argp_parse@@Base+0x493c>
   1bf28:	add	fp, fp, #1
   1bf2c:	str	fp, [r4, #12]
   1bf30:	ldr	r5, [r4, #20]
   1bf34:	mov	r0, r5
   1bf38:	bl	11468 <strlen@plt>
   1bf3c:	ldr	r3, [sp, #24]
   1bf40:	cmp	r3, #0
   1bf44:	ldrne	r2, [sp, #28]
   1bf48:	add	r0, r5, r0
   1bf4c:	str	r0, [r4, #20]
   1bf50:	strne	r2, [r3]
   1bf54:	ldr	r2, [sp, #32]
   1bf58:	ldr	r3, [r2, #8]
   1bf5c:	ldr	r8, [r2, #12]
   1bf60:	cmp	r3, #0
   1bf64:	beq	1bb58 <argp_parse@@Base+0x4444>
   1bf68:	str	r8, [r3]
   1bf6c:	mov	r8, #0
   1bf70:	b	1bb58 <argp_parse@@Base+0x4444>
   1bf74:	mov	r5, r3
   1bf78:	b	1bc34 <argp_parse@@Base+0x4520>
   1bf7c:	ldr	r3, [sp, #12]
   1bf80:	cmp	r3, #0
   1bf84:	bne	1c1c8 <argp_parse@@Base+0x4ab4>
   1bf88:	str	r5, [r4, #8]
   1bf8c:	mov	r8, #63	; 0x3f
   1bf90:	b	1bb58 <argp_parse@@Base+0x4444>
   1bf94:	ldr	r2, [sl, #8]
   1bf98:	ldr	r3, [r7, #8]
   1bf9c:	cmp	r2, r3
   1bfa0:	bne	1be60 <argp_parse@@Base+0x474c>
   1bfa4:	ldr	r2, [sl, #12]
   1bfa8:	ldr	r3, [r7, #12]
   1bfac:	cmp	r2, r3
   1bfb0:	bne	1be60 <argp_parse@@Base+0x474c>
   1bfb4:	ldr	r9, [sp, #108]	; 0x6c
   1bfb8:	b	1be7c <argp_parse@@Base+0x4768>
   1bfbc:	mov	r3, r9
   1bfc0:	orrs	r3, r5, r3
   1bfc4:	ldr	fp, [sp, #36]	; 0x24
   1bfc8:	ldr	r6, [sp, #40]	; 0x28
   1bfcc:	ldr	r9, [sp, #44]	; 0x2c
   1bfd0:	beq	1c5a0 <argp_parse@@Base+0x4e8c>
   1bfd4:	cmp	r5, #0
   1bfd8:	movne	r0, r5
   1bfdc:	beq	1c5a0 <argp_parse@@Base+0x4e8c>
   1bfe0:	ldr	r5, [r0, #4]
   1bfe4:	bl	112c4 <free@plt>
   1bfe8:	subs	r0, r5, #0
   1bfec:	bne	1bfe0 <argp_parse@@Base+0x48cc>
   1bff0:	ldr	r5, [r4]
   1bff4:	str	r8, [sp, #28]
   1bff8:	str	r7, [sp, #32]
   1bffc:	b	1befc <argp_parse@@Base+0x47e8>
   1c000:	cmp	r7, #1
   1c004:	bne	1bf30 <argp_parse@@Base+0x481c>
   1c008:	cmp	r3, r6
   1c00c:	bge	1c424 <argp_parse@@Base+0x4d10>
   1c010:	ldr	r2, [sp, #16]
   1c014:	add	r5, r5, #2
   1c018:	ldr	r3, [r2, r3, lsl #2]
   1c01c:	str	r5, [r4]
   1c020:	str	r3, [r4, #12]
   1c024:	b	1bf30 <argp_parse@@Base+0x481c>
   1c028:	mov	r3, r5
   1c02c:	str	r5, [r4, #32]
   1c030:	b	1bb24 <argp_parse@@Base+0x4410>
   1c034:	cmp	r0, #0
   1c038:	strne	r7, [r4, #12]
   1c03c:	ldrne	r3, [r4]
   1c040:	streq	r0, [r4, #12]
   1c044:	addne	r3, r3, #1
   1c048:	strne	r3, [r4]
   1c04c:	b	1ba40 <argp_parse@@Base+0x432c>
   1c050:	ldr	r3, [sp, #12]
   1c054:	cmp	r3, #0
   1c058:	beq	1c0c0 <argp_parse@@Base+0x49ac>
   1c05c:	ldr	r3, [sp, #16]
   1c060:	ldr	r2, [pc, #1876]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c064:	mov	r0, r7
   1c068:	ldr	r3, [r3, r5, lsl #2]
   1c06c:	ldr	r5, [r2]
   1c070:	mov	r2, #5
   1c074:	ldrb	r3, [r3, #1]
   1c078:	cmp	r3, #45	; 0x2d
   1c07c:	beq	1c64c <argp_parse@@Base+0x4f38>
   1c080:	ldr	r1, [pc, #1848]	; 1c7c0 <argp_parse@@Base+0x50ac>
   1c084:	bl	11330 <dcgettext@plt>
   1c088:	ldr	r2, [sp, #32]
   1c08c:	ldr	r3, [r4]
   1c090:	ldr	r1, [sp, #16]
   1c094:	ldr	r2, [r2]
   1c098:	sub	r3, r3, #-1073741823	; 0xc0000001
   1c09c:	str	r2, [sp, #4]
   1c0a0:	ldr	r2, [r1, r3, lsl #2]
   1c0a4:	ldr	r3, [r1]
   1c0a8:	mov	r1, #1
   1c0ac:	ldrb	r2, [r2]
   1c0b0:	str	r2, [sp]
   1c0b4:	mov	r2, r0
   1c0b8:	mov	r0, r5
   1c0bc:	bl	114ec <__fprintf_chk@plt>
   1c0c0:	ldr	r5, [r4, #20]
   1c0c4:	mov	r8, #63	; 0x3f
   1c0c8:	mov	r0, r5
   1c0cc:	bl	11468 <strlen@plt>
   1c0d0:	ldr	r3, [sp, #32]
   1c0d4:	ldr	r3, [r3, #12]
   1c0d8:	str	r3, [r4, #8]
   1c0dc:	add	r0, r5, r0
   1c0e0:	str	r0, [r4, #20]
   1c0e4:	b	1bb58 <argp_parse@@Base+0x4444>
   1c0e8:	ldr	r3, [sp, #108]	; 0x6c
   1c0ec:	cmp	r3, #0
   1c0f0:	beq	1c358 <argp_parse@@Base+0x4c44>
   1c0f4:	ldr	r3, [sp, #16]
   1c0f8:	ldr	r3, [r3, r5, lsl #2]
   1c0fc:	ldrb	r3, [r3, #1]
   1c100:	cmp	r3, #45	; 0x2d
   1c104:	beq	1c544 <argp_parse@@Base+0x4e30>
   1c108:	ldr	r2, [r4, #20]
   1c10c:	mov	r0, r9
   1c110:	str	r2, [sp, #28]
   1c114:	ldrb	r1, [r2]
   1c118:	bl	11474 <strchr@plt>
   1c11c:	ldr	r2, [sp, #28]
   1c120:	cmp	r0, #0
   1c124:	bne	1b9b8 <argp_parse@@Base+0x42a4>
   1c128:	ldr	r3, [sp, #12]
   1c12c:	cmp	r3, #0
   1c130:	beq	1c180 <argp_parse@@Base+0x4a6c>
   1c134:	ldr	r3, [pc, #1664]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c138:	mov	r2, #5
   1c13c:	ldr	r1, [pc, #1664]	; 1c7c4 <argp_parse@@Base+0x50b0>
   1c140:	mov	r0, #0
   1c144:	ldr	r5, [r3]
   1c148:	bl	11330 <dcgettext@plt>
   1c14c:	ldr	r2, [r4]
   1c150:	ldr	ip, [sp, #16]
   1c154:	ldr	r1, [r4, #20]
   1c158:	ldr	r2, [ip, r2, lsl #2]
   1c15c:	ldr	r3, [ip]
   1c160:	str	r1, [sp, #4]
   1c164:	ldrb	r2, [r2]
   1c168:	mov	r1, #1
   1c16c:	str	r2, [sp]
   1c170:	mov	r2, r0
   1c174:	mov	r0, r5
   1c178:	bl	114ec <__fprintf_chk@plt>
   1c17c:	ldr	r5, [r4]
   1c180:	ldr	r2, [pc, #1600]	; 1c7c8 <argp_parse@@Base+0x50b4>
   1c184:	add	r5, r5, #1
   1c188:	mov	r3, #0
   1c18c:	str	r5, [r4]
   1c190:	str	r2, [r4, #20]
   1c194:	str	r3, [r4, #8]
   1c198:	mov	r8, #63	; 0x3f
   1c19c:	b	1bb58 <argp_parse@@Base+0x4444>
   1c1a0:	cmp	r5, #0
   1c1a4:	beq	1c1c0 <argp_parse@@Base+0x4aac>
   1c1a8:	mov	r0, r5
   1c1ac:	ldr	r5, [r5, #4]
   1c1b0:	bl	112c4 <free@plt>
   1c1b4:	cmp	r5, #0
   1c1b8:	mov	r0, r5
   1c1bc:	bne	1c1ac <argp_parse@@Base+0x4a98>
   1c1c0:	mov	r9, #1
   1c1c4:	b	1be7c <argp_parse@@Base+0x4768>
   1c1c8:	ldr	r3, [pc, #1516]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c1cc:	mov	r2, #5
   1c1d0:	ldr	r1, [pc, #1524]	; 1c7cc <argp_parse@@Base+0x50b8>
   1c1d4:	mov	r0, #0
   1c1d8:	ldr	r6, [r3]
   1c1dc:	bl	11330 <dcgettext@plt>
   1c1e0:	ldr	r3, [sp, #16]
   1c1e4:	str	r5, [sp]
   1c1e8:	mov	r1, #1
   1c1ec:	ldr	r3, [r3]
   1c1f0:	mov	r2, r0
   1c1f4:	mov	r0, r6
   1c1f8:	bl	114ec <__fprintf_chk@plt>
   1c1fc:	b	1bf88 <argp_parse@@Base+0x4874>
   1c200:	cmp	r6, r3
   1c204:	beq	1c3b8 <argp_parse@@Base+0x4ca4>
   1c208:	ldr	r2, [sp, #16]
   1c20c:	ldr	r2, [r2, r3, lsl #2]
   1c210:	add	r3, r3, #1
   1c214:	str	r2, [r4, #12]
   1c218:	str	r3, [r4]
   1c21c:	b	1ba40 <argp_parse@@Base+0x432c>
   1c220:	mov	lr, sl
   1c224:	mov	fp, r2
   1c228:	b	1bdf8 <argp_parse@@Base+0x46e4>
   1c22c:	ldr	r3, [sp, #12]
   1c230:	adds	r2, r3, #0
   1c234:	movne	r2, #1
   1c238:	cmp	r5, #0
   1c23c:	movne	r0, r2
   1c240:	moveq	r0, #0
   1c244:	cmp	r0, #0
   1c248:	bne	1c464 <argp_parse@@Base+0x4d50>
   1c24c:	ands	r7, r2, r1
   1c250:	bne	1c554 <argp_parse@@Base+0x4e40>
   1c254:	ldr	r6, [r4, #20]
   1c258:	mov	r0, r6
   1c25c:	bl	11468 <strlen@plt>
   1c260:	ldr	r3, [r4]
   1c264:	cmp	r5, #0
   1c268:	add	r3, r3, #1
   1c26c:	str	r7, [r4, #8]
   1c270:	str	r3, [r4]
   1c274:	add	r0, r6, r0
   1c278:	str	r0, [r4, #20]
   1c27c:	movne	r0, r5
   1c280:	beq	1bf8c <argp_parse@@Base+0x4878>
   1c284:	ldr	r4, [r0, #4]
   1c288:	bl	112c4 <free@plt>
   1c28c:	subs	r0, r4, #0
   1c290:	bne	1c284 <argp_parse@@Base+0x4b70>
   1c294:	b	1bf8c <argp_parse@@Base+0x4878>
   1c298:	ldr	r2, [fp, #8]
   1c29c:	ldr	r3, [r5, #8]
   1c2a0:	cmp	r2, r3
   1c2a4:	bne	1bd70 <argp_parse@@Base+0x465c>
   1c2a8:	ldr	r2, [fp, #12]
   1c2ac:	ldr	r3, [r5, #12]
   1c2b0:	cmp	r2, r3
   1c2b4:	movne	r6, #1
   1c2b8:	b	1bd74 <argp_parse@@Base+0x4660>
   1c2bc:	mov	r3, r6
   1c2c0:	cmp	r3, #0
   1c2c4:	mov	sl, fp
   1c2c8:	ldr	r8, [sp, #32]
   1c2cc:	mov	fp, r4
   1c2d0:	ldr	r6, [sp, #36]	; 0x24
   1c2d4:	ldr	r4, [sp, #40]	; 0x28
   1c2d8:	bne	1c514 <argp_parse@@Base+0x4e00>
   1c2dc:	cmp	sl, #0
   1c2e0:	beq	1c590 <argp_parse@@Base+0x4e7c>
   1c2e4:	cmp	r8, #0
   1c2e8:	ldr	r5, [sl, #4]
   1c2ec:	beq	1c3dc <argp_parse@@Base+0x4cc8>
   1c2f0:	cmp	r5, #0
   1c2f4:	beq	1c67c <argp_parse@@Base+0x4f68>
   1c2f8:	ldr	r3, [sp, #28]
   1c2fc:	add	r3, r3, #1
   1c300:	str	r3, [r4, #12]
   1c304:	mov	r0, r7
   1c308:	bl	11468 <strlen@plt>
   1c30c:	ldr	r3, [sp, #24]
   1c310:	cmp	r3, #0
   1c314:	ldrne	r2, [sp, #20]
   1c318:	add	r0, r7, r0
   1c31c:	str	r0, [r4, #20]
   1c320:	strne	r2, [r3]
   1c324:	ldr	r3, [sl, #8]
   1c328:	ldr	r8, [sl, #12]
   1c32c:	cmp	r3, #0
   1c330:	bne	1bf68 <argp_parse@@Base+0x4854>
   1c334:	b	1bb58 <argp_parse@@Base+0x4444>
   1c338:	cmp	r6, r3
   1c33c:	beq	1c5b0 <argp_parse@@Base+0x4e9c>
   1c340:	ldr	r2, [sp, #16]
   1c344:	ldr	r7, [r2, r3, lsl #2]
   1c348:	add	r3, r3, #1
   1c34c:	str	r7, [r4, #12]
   1c350:	str	r3, [r4]
   1c354:	b	1bce8 <argp_parse@@Base+0x45d4>
   1c358:	ldr	r3, [sp, #12]
   1c35c:	cmp	r3, #0
   1c360:	beq	1c180 <argp_parse@@Base+0x4a6c>
   1c364:	ldr	r3, [sp, #16]
   1c368:	ldr	r3, [r3, r5, lsl #2]
   1c36c:	ldrb	r3, [r3, #1]
   1c370:	cmp	r3, #45	; 0x2d
   1c374:	bne	1c134 <argp_parse@@Base+0x4a20>
   1c378:	ldr	r3, [pc, #1084]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c37c:	mov	r2, #5
   1c380:	ldr	r1, [pc, #1096]	; 1c7d0 <argp_parse@@Base+0x50bc>
   1c384:	mov	r0, #0
   1c388:	ldr	r5, [r3]
   1c38c:	bl	11330 <dcgettext@plt>
   1c390:	ldr	r3, [sp, #16]
   1c394:	ldr	r2, [r4, #20]
   1c398:	mov	r1, #1
   1c39c:	ldr	r3, [r3]
   1c3a0:	str	r2, [sp]
   1c3a4:	mov	r2, r0
   1c3a8:	mov	r0, r5
   1c3ac:	bl	114ec <__fprintf_chk@plt>
   1c3b0:	ldr	r5, [r4]
   1c3b4:	b	1c180 <argp_parse@@Base+0x4a6c>
   1c3b8:	ldr	r3, [sp, #12]
   1c3bc:	cmp	r3, #0
   1c3c0:	bne	1c5dc <argp_parse@@Base+0x4ec8>
   1c3c4:	str	r5, [r4, #8]
   1c3c8:	ldrb	r3, [r9]
   1c3cc:	cmp	r3, #58	; 0x3a
   1c3d0:	moveq	r8, #58	; 0x3a
   1c3d4:	movne	r8, #63	; 0x3f
   1c3d8:	b	1ba40 <argp_parse@@Base+0x432c>
   1c3dc:	cmp	r5, #1
   1c3e0:	strne	r8, [r4, #12]
   1c3e4:	bne	1c304 <argp_parse@@Base+0x4bf0>
   1c3e8:	ldr	r3, [r4]
   1c3ec:	cmp	r3, r6
   1c3f0:	bge	1c6e0 <argp_parse@@Base+0x4fcc>
   1c3f4:	ldr	r2, [sp, #16]
   1c3f8:	ldr	r2, [r2, r3, lsl #2]
   1c3fc:	add	r3, r3, #1
   1c400:	str	r2, [r4, #12]
   1c404:	str	r3, [r4]
   1c408:	b	1c304 <argp_parse@@Base+0x4bf0>
   1c40c:	str	sl, [sp, #20]
   1c410:	ldr	r8, [sp, #32]
   1c414:	ldr	r6, [sp, #36]	; 0x24
   1c418:	ldr	r4, [sp, #40]	; 0x28
   1c41c:	mov	sl, r5
   1c420:	b	1c2e4 <argp_parse@@Base+0x4bd0>
   1c424:	ldr	r3, [sp, #12]
   1c428:	cmp	r3, #0
   1c42c:	bne	1c610 <argp_parse@@Base+0x4efc>
   1c430:	ldr	r5, [r4, #20]
   1c434:	mov	r0, r5
   1c438:	bl	11468 <strlen@plt>
   1c43c:	ldr	r3, [sp, #32]
   1c440:	ldr	r3, [r3, #12]
   1c444:	str	r3, [r4, #8]
   1c448:	add	r0, r5, r0
   1c44c:	str	r0, [r4, #20]
   1c450:	ldrb	r3, [r9]
   1c454:	cmp	r3, #58	; 0x3a
   1c458:	moveq	r8, #58	; 0x3a
   1c45c:	bne	1bf8c <argp_parse@@Base+0x4878>
   1c460:	b	1bb58 <argp_parse@@Base+0x4444>
   1c464:	ldr	r6, [pc, #848]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c468:	mov	r2, #5
   1c46c:	ldr	r1, [pc, #864]	; 1c7d4 <argp_parse@@Base+0x50c0>
   1c470:	mov	r0, sl
   1c474:	str	r5, [sp, #56]	; 0x38
   1c478:	ldr	r8, [r6]
   1c47c:	bl	11330 <dcgettext@plt>
   1c480:	ldr	r2, [r4]
   1c484:	ldr	ip, [sp, #16]
   1c488:	mov	r1, #1
   1c48c:	ldr	r7, [pc, #836]	; 1c7d8 <argp_parse@@Base+0x50c4>
   1c490:	ldr	r2, [ip, r2, lsl #2]
   1c494:	ldr	r3, [ip]
   1c498:	str	r2, [sp]
   1c49c:	add	r5, sp, #52	; 0x34
   1c4a0:	mov	r2, r0
   1c4a4:	mov	r0, r8
   1c4a8:	bl	114ec <__fprintf_chk@plt>
   1c4ac:	ldr	r3, [sp, #32]
   1c4b0:	b	1c4b8 <argp_parse@@Base+0x4da4>
   1c4b4:	ldr	r3, [r5]
   1c4b8:	ldr	r3, [r3]
   1c4bc:	mov	r2, r7
   1c4c0:	mov	r1, #1
   1c4c4:	ldr	r0, [r6]
   1c4c8:	bl	114ec <__fprintf_chk@plt>
   1c4cc:	ldr	r5, [r5, #4]
   1c4d0:	cmp	r5, #0
   1c4d4:	bne	1c4b4 <argp_parse@@Base+0x4da0>
   1c4d8:	ldr	r1, [r6]
   1c4dc:	mov	r0, #10
   1c4e0:	bl	11570 <fputc@plt>
   1c4e4:	ldr	r5, [r4, #20]
   1c4e8:	mov	r8, #63	; 0x3f
   1c4ec:	mov	r0, r5
   1c4f0:	bl	11468 <strlen@plt>
   1c4f4:	ldr	r3, [r4]
   1c4f8:	mov	r2, #0
   1c4fc:	add	r3, r3, #1
   1c500:	str	r3, [r4]
   1c504:	str	r2, [r4, #8]
   1c508:	add	r0, r5, r0
   1c50c:	str	r0, [r4, #20]
   1c510:	b	1bb58 <argp_parse@@Base+0x4444>
   1c514:	ldr	r3, [sp, #12]
   1c518:	cmp	r3, #0
   1c51c:	bne	1c6a0 <argp_parse@@Base+0x4f8c>
   1c520:	mov	r0, r7
   1c524:	bl	11468 <strlen@plt>
   1c528:	ldr	r3, [r4]
   1c52c:	mov	r8, #63	; 0x3f
   1c530:	add	r3, r3, #1
   1c534:	str	r3, [r4]
   1c538:	add	r0, r7, r0
   1c53c:	str	r0, [r4, #20]
   1c540:	b	1bb58 <argp_parse@@Base+0x4444>
   1c544:	ldr	r3, [sp, #12]
   1c548:	cmp	r3, #0
   1c54c:	beq	1c180 <argp_parse@@Base+0x4a6c>
   1c550:	b	1c378 <argp_parse@@Base+0x4c64>
   1c554:	ldr	r3, [pc, #608]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c558:	mov	r2, #5
   1c55c:	ldr	r1, [pc, #632]	; 1c7dc <argp_parse@@Base+0x50c8>
   1c560:	ldr	r5, [r3]
   1c564:	bl	11330 <dcgettext@plt>
   1c568:	ldr	r2, [r4]
   1c56c:	ldr	ip, [sp, #16]
   1c570:	mov	r1, #1
   1c574:	ldr	r2, [ip, r2, lsl #2]
   1c578:	ldr	r3, [ip]
   1c57c:	str	r2, [sp]
   1c580:	mov	r2, r0
   1c584:	mov	r0, r5
   1c588:	bl	114ec <__fprintf_chk@plt>
   1c58c:	b	1c4e4 <argp_parse@@Base+0x4dd0>
   1c590:	mov	r3, #0
   1c594:	str	r3, [r4, #20]
   1c598:	mov	r8, #87	; 0x57
   1c59c:	b	1bb58 <argp_parse@@Base+0x4444>
   1c5a0:	str	r8, [sp, #28]
   1c5a4:	str	r7, [sp, #32]
   1c5a8:	ldr	r5, [r4]
   1c5ac:	b	1befc <argp_parse@@Base+0x47e8>
   1c5b0:	ldr	r3, [sp, #12]
   1c5b4:	cmp	r3, #0
   1c5b8:	bne	1c6fc <argp_parse@@Base+0x4fe8>
   1c5bc:	str	r5, [r4, #8]
   1c5c0:	ldrb	r3, [r9]
   1c5c4:	cmp	r3, #58	; 0x3a
   1c5c8:	moveq	r8, #58	; 0x3a
   1c5cc:	movne	r8, #63	; 0x3f
   1c5d0:	b	1bb58 <argp_parse@@Base+0x4444>
   1c5d4:	str	r7, [sp, #28]
   1c5d8:	b	1bd14 <argp_parse@@Base+0x4600>
   1c5dc:	ldr	r3, [pc, #472]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c5e0:	mov	r2, #5
   1c5e4:	ldr	r1, [pc, #500]	; 1c7e0 <argp_parse@@Base+0x50cc>
   1c5e8:	ldr	r6, [r3]
   1c5ec:	bl	11330 <dcgettext@plt>
   1c5f0:	ldr	r3, [sp, #16]
   1c5f4:	str	r5, [sp]
   1c5f8:	mov	r1, #1
   1c5fc:	ldr	r3, [r3]
   1c600:	mov	r2, r0
   1c604:	mov	r0, r6
   1c608:	bl	114ec <__fprintf_chk@plt>
   1c60c:	b	1c3c4 <argp_parse@@Base+0x4cb0>
   1c610:	ldr	r3, [pc, #420]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c614:	mov	r2, #5
   1c618:	ldr	r1, [pc, #452]	; 1c7e4 <argp_parse@@Base+0x50d0>
   1c61c:	ldr	r5, [r3]
   1c620:	bl	11330 <dcgettext@plt>
   1c624:	ldr	r3, [sp, #32]
   1c628:	mov	r1, r7
   1c62c:	ldr	r2, [r3]
   1c630:	ldr	r3, [sp, #16]
   1c634:	ldr	r3, [r3]
   1c638:	str	r2, [sp]
   1c63c:	mov	r2, r0
   1c640:	mov	r0, r5
   1c644:	bl	114ec <__fprintf_chk@plt>
   1c648:	b	1c430 <argp_parse@@Base+0x4d1c>
   1c64c:	ldr	r1, [pc, #404]	; 1c7e8 <argp_parse@@Base+0x50d4>
   1c650:	bl	11330 <dcgettext@plt>
   1c654:	ldr	r3, [sp, #32]
   1c658:	mov	r1, #1
   1c65c:	ldr	r2, [r3]
   1c660:	ldr	r3, [sp, #16]
   1c664:	ldr	r3, [r3]
   1c668:	str	r2, [sp]
   1c66c:	mov	r2, r0
   1c670:	mov	r0, r5
   1c674:	bl	114ec <__fprintf_chk@plt>
   1c678:	b	1c0c0 <argp_parse@@Base+0x49ac>
   1c67c:	ldr	r3, [sp, #12]
   1c680:	cmp	r3, #0
   1c684:	bne	1c730 <argp_parse@@Base+0x501c>
   1c688:	mov	r0, r7
   1c68c:	bl	11468 <strlen@plt>
   1c690:	mov	r8, #63	; 0x3f
   1c694:	add	r0, r7, r0
   1c698:	str	r0, [r4, #20]
   1c69c:	b	1bb58 <argp_parse@@Base+0x4444>
   1c6a0:	ldr	ip, [pc, #276]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c6a4:	mov	r2, #5
   1c6a8:	ldr	r1, [pc, #316]	; 1c7ec <argp_parse@@Base+0x50d8>
   1c6ac:	mov	r0, fp
   1c6b0:	ldr	r5, [ip]
   1c6b4:	bl	11330 <dcgettext@plt>
   1c6b8:	ldr	r3, [sp, #16]
   1c6bc:	ldr	r2, [r4, #12]
   1c6c0:	mov	r1, #1
   1c6c4:	ldr	r3, [r3]
   1c6c8:	str	r2, [sp]
   1c6cc:	mov	r2, r0
   1c6d0:	mov	r0, r5
   1c6d4:	bl	114ec <__fprintf_chk@plt>
   1c6d8:	ldr	r7, [r4, #20]
   1c6dc:	b	1c520 <argp_parse@@Base+0x4e0c>
   1c6e0:	ldr	r3, [sp, #12]
   1c6e4:	cmp	r3, #0
   1c6e8:	bne	1c770 <argp_parse@@Base+0x505c>
   1c6ec:	ldr	r5, [r4, #20]
   1c6f0:	mov	r0, r5
   1c6f4:	bl	11468 <strlen@plt>
   1c6f8:	b	1c448 <argp_parse@@Base+0x4d34>
   1c6fc:	ldr	r3, [pc, #184]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c700:	mov	r2, #5
   1c704:	ldr	r1, [pc, #212]	; 1c7e0 <argp_parse@@Base+0x50cc>
   1c708:	ldr	r6, [r3]
   1c70c:	bl	11330 <dcgettext@plt>
   1c710:	ldr	r3, [sp, #16]
   1c714:	str	r5, [sp]
   1c718:	mov	r1, #1
   1c71c:	ldr	r3, [r3]
   1c720:	mov	r2, r0
   1c724:	mov	r0, r6
   1c728:	bl	114ec <__fprintf_chk@plt>
   1c72c:	b	1c5bc <argp_parse@@Base+0x4ea8>
   1c730:	ldr	r3, [pc, #132]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c734:	mov	r0, r5
   1c738:	mov	r2, #5
   1c73c:	ldr	r1, [pc, #172]	; 1c7f0 <argp_parse@@Base+0x50dc>
   1c740:	ldr	r5, [r3]
   1c744:	bl	11330 <dcgettext@plt>
   1c748:	ldr	r3, [sp, #16]
   1c74c:	ldr	r2, [sl]
   1c750:	mov	r1, #1
   1c754:	ldr	r3, [r3]
   1c758:	str	r2, [sp]
   1c75c:	mov	r2, r0
   1c760:	mov	r0, r5
   1c764:	bl	114ec <__fprintf_chk@plt>
   1c768:	ldr	r7, [r4, #20]
   1c76c:	b	1c688 <argp_parse@@Base+0x4f74>
   1c770:	ldr	r3, [pc, #68]	; 1c7bc <argp_parse@@Base+0x50a8>
   1c774:	mov	r0, r8
   1c778:	mov	r2, #5
   1c77c:	ldr	r1, [pc, #112]	; 1c7f4 <argp_parse@@Base+0x50e0>
   1c780:	ldr	r6, [r3]
   1c784:	bl	11330 <dcgettext@plt>
   1c788:	ldr	r3, [sp, #16]
   1c78c:	ldr	r2, [sl]
   1c790:	mov	r1, r5
   1c794:	ldr	r3, [r3]
   1c798:	str	r2, [sp]
   1c79c:	mov	r2, r0
   1c7a0:	mov	r0, r6
   1c7a4:	bl	114ec <__fprintf_chk@plt>
   1c7a8:	b	1c6ec <argp_parse@@Base+0x4fd8>
   1c7ac:	bl	1133c <__stack_chk_fail@plt>
   1c7b0:	andeq	lr, r2, r8, lsl #30
   1c7b4:	strdeq	sp, [r1], -r0
   1c7b8:	andeq	sp, r1, r0, ror #30
   1c7bc:	andeq	pc, r2, r8, ror #5
   1c7c0:	strdeq	sp, [r1], -r8
   1c7c4:	andeq	lr, r1, r0, ror r0
   1c7c8:	ldrdeq	lr, [r1], -r4
   1c7cc:	muleq	r1, r0, r0
   1c7d0:	andeq	lr, r1, r0, asr r0
   1c7d4:	andeq	sp, r1, r0, ror pc
   1c7d8:	andeq	sp, r1, r0, lsr #31
   1c7dc:	andeq	sp, r1, r8, lsr #31
   1c7e0:	andeq	lr, r1, ip, lsr #1
   1c7e4:	andeq	lr, r1, r8, lsr #32
   1c7e8:	andeq	sp, r1, r8, asr #31
   1c7ec:	ldrdeq	lr, [r1], -r8
   1c7f0:	strdeq	lr, [r1], -ip
   1c7f4:	andeq	lr, r1, ip, lsr #2
   1c7f8:	push	{r4, r5, r6, lr}
   1c7fc:	sub	sp, sp, #16
   1c800:	ldr	r5, [pc, #84]	; 1c85c <argp_parse@@Base+0x5148>
   1c804:	ldr	ip, [sp, #32]
   1c808:	ldr	r4, [pc, #80]	; 1c860 <argp_parse@@Base+0x514c>
   1c80c:	str	ip, [sp]
   1c810:	ldr	ip, [sp, #40]	; 0x28
   1c814:	ldr	r6, [sp, #36]	; 0x24
   1c818:	ldr	lr, [r5]
   1c81c:	str	ip, [sp, #12]
   1c820:	ldr	ip, [r5, #4]
   1c824:	str	r4, [sp, #8]
   1c828:	str	r6, [sp, #4]
   1c82c:	str	ip, [r4, #4]
   1c830:	str	lr, [r4]
   1c834:	bl	1b8cc <argp_parse@@Base+0x41b8>
   1c838:	ldr	r3, [pc, #36]	; 1c864 <argp_parse@@Base+0x5150>
   1c83c:	ldr	ip, [r4]
   1c840:	ldr	r1, [r4, #8]
   1c844:	ldr	r2, [r4, #12]
   1c848:	str	ip, [r5]
   1c84c:	str	r1, [r5, #8]
   1c850:	str	r2, [r3]
   1c854:	add	sp, sp, #16
   1c858:	pop	{r4, r5, r6, pc}
   1c85c:	ldrdeq	pc, [r2], -r0
   1c860:	andeq	pc, r2, r8, asr #8
   1c864:	andeq	pc, r2, r8, lsl #9
   1c868:	push	{lr}		; (str lr, [sp, #-4]!)
   1c86c:	mov	r3, #0
   1c870:	sub	sp, sp, #20
   1c874:	mov	ip, #1
   1c878:	str	r3, [sp]
   1c87c:	stmib	sp, {r3, ip}
   1c880:	bl	1c7f8 <argp_parse@@Base+0x50e4>
   1c884:	add	sp, sp, #20
   1c888:	pop	{pc}		; (ldr pc, [sp], #4)
   1c88c:	subs	r2, r1, #1
   1c890:	bxeq	lr
   1c894:	bcc	1ca6c <argp_parse@@Base+0x5358>
   1c898:	cmp	r0, r1
   1c89c:	bls	1ca50 <argp_parse@@Base+0x533c>
   1c8a0:	tst	r1, r2
   1c8a4:	beq	1ca5c <argp_parse@@Base+0x5348>
   1c8a8:	clz	r3, r0
   1c8ac:	clz	r2, r1
   1c8b0:	sub	r3, r2, r3
   1c8b4:	rsbs	r3, r3, #31
   1c8b8:	addne	r3, r3, r3, lsl #1
   1c8bc:	mov	r2, #0
   1c8c0:	addne	pc, pc, r3, lsl #2
   1c8c4:	nop			; (mov r0, r0)
   1c8c8:	cmp	r0, r1, lsl #31
   1c8cc:	adc	r2, r2, r2
   1c8d0:	subcs	r0, r0, r1, lsl #31
   1c8d4:	cmp	r0, r1, lsl #30
   1c8d8:	adc	r2, r2, r2
   1c8dc:	subcs	r0, r0, r1, lsl #30
   1c8e0:	cmp	r0, r1, lsl #29
   1c8e4:	adc	r2, r2, r2
   1c8e8:	subcs	r0, r0, r1, lsl #29
   1c8ec:	cmp	r0, r1, lsl #28
   1c8f0:	adc	r2, r2, r2
   1c8f4:	subcs	r0, r0, r1, lsl #28
   1c8f8:	cmp	r0, r1, lsl #27
   1c8fc:	adc	r2, r2, r2
   1c900:	subcs	r0, r0, r1, lsl #27
   1c904:	cmp	r0, r1, lsl #26
   1c908:	adc	r2, r2, r2
   1c90c:	subcs	r0, r0, r1, lsl #26
   1c910:	cmp	r0, r1, lsl #25
   1c914:	adc	r2, r2, r2
   1c918:	subcs	r0, r0, r1, lsl #25
   1c91c:	cmp	r0, r1, lsl #24
   1c920:	adc	r2, r2, r2
   1c924:	subcs	r0, r0, r1, lsl #24
   1c928:	cmp	r0, r1, lsl #23
   1c92c:	adc	r2, r2, r2
   1c930:	subcs	r0, r0, r1, lsl #23
   1c934:	cmp	r0, r1, lsl #22
   1c938:	adc	r2, r2, r2
   1c93c:	subcs	r0, r0, r1, lsl #22
   1c940:	cmp	r0, r1, lsl #21
   1c944:	adc	r2, r2, r2
   1c948:	subcs	r0, r0, r1, lsl #21
   1c94c:	cmp	r0, r1, lsl #20
   1c950:	adc	r2, r2, r2
   1c954:	subcs	r0, r0, r1, lsl #20
   1c958:	cmp	r0, r1, lsl #19
   1c95c:	adc	r2, r2, r2
   1c960:	subcs	r0, r0, r1, lsl #19
   1c964:	cmp	r0, r1, lsl #18
   1c968:	adc	r2, r2, r2
   1c96c:	subcs	r0, r0, r1, lsl #18
   1c970:	cmp	r0, r1, lsl #17
   1c974:	adc	r2, r2, r2
   1c978:	subcs	r0, r0, r1, lsl #17
   1c97c:	cmp	r0, r1, lsl #16
   1c980:	adc	r2, r2, r2
   1c984:	subcs	r0, r0, r1, lsl #16
   1c988:	cmp	r0, r1, lsl #15
   1c98c:	adc	r2, r2, r2
   1c990:	subcs	r0, r0, r1, lsl #15
   1c994:	cmp	r0, r1, lsl #14
   1c998:	adc	r2, r2, r2
   1c99c:	subcs	r0, r0, r1, lsl #14
   1c9a0:	cmp	r0, r1, lsl #13
   1c9a4:	adc	r2, r2, r2
   1c9a8:	subcs	r0, r0, r1, lsl #13
   1c9ac:	cmp	r0, r1, lsl #12
   1c9b0:	adc	r2, r2, r2
   1c9b4:	subcs	r0, r0, r1, lsl #12
   1c9b8:	cmp	r0, r1, lsl #11
   1c9bc:	adc	r2, r2, r2
   1c9c0:	subcs	r0, r0, r1, lsl #11
   1c9c4:	cmp	r0, r1, lsl #10
   1c9c8:	adc	r2, r2, r2
   1c9cc:	subcs	r0, r0, r1, lsl #10
   1c9d0:	cmp	r0, r1, lsl #9
   1c9d4:	adc	r2, r2, r2
   1c9d8:	subcs	r0, r0, r1, lsl #9
   1c9dc:	cmp	r0, r1, lsl #8
   1c9e0:	adc	r2, r2, r2
   1c9e4:	subcs	r0, r0, r1, lsl #8
   1c9e8:	cmp	r0, r1, lsl #7
   1c9ec:	adc	r2, r2, r2
   1c9f0:	subcs	r0, r0, r1, lsl #7
   1c9f4:	cmp	r0, r1, lsl #6
   1c9f8:	adc	r2, r2, r2
   1c9fc:	subcs	r0, r0, r1, lsl #6
   1ca00:	cmp	r0, r1, lsl #5
   1ca04:	adc	r2, r2, r2
   1ca08:	subcs	r0, r0, r1, lsl #5
   1ca0c:	cmp	r0, r1, lsl #4
   1ca10:	adc	r2, r2, r2
   1ca14:	subcs	r0, r0, r1, lsl #4
   1ca18:	cmp	r0, r1, lsl #3
   1ca1c:	adc	r2, r2, r2
   1ca20:	subcs	r0, r0, r1, lsl #3
   1ca24:	cmp	r0, r1, lsl #2
   1ca28:	adc	r2, r2, r2
   1ca2c:	subcs	r0, r0, r1, lsl #2
   1ca30:	cmp	r0, r1, lsl #1
   1ca34:	adc	r2, r2, r2
   1ca38:	subcs	r0, r0, r1, lsl #1
   1ca3c:	cmp	r0, r1
   1ca40:	adc	r2, r2, r2
   1ca44:	subcs	r0, r0, r1
   1ca48:	mov	r0, r2
   1ca4c:	bx	lr
   1ca50:	moveq	r0, #1
   1ca54:	movne	r0, #0
   1ca58:	bx	lr
   1ca5c:	clz	r2, r1
   1ca60:	rsb	r2, r2, #31
   1ca64:	lsr	r0, r0, r2
   1ca68:	bx	lr
   1ca6c:	cmp	r0, #0
   1ca70:	mvnne	r0, #0
   1ca74:	b	1cba8 <argp_parse@@Base+0x5494>
   1ca78:	cmp	r1, #0
   1ca7c:	beq	1ca6c <argp_parse@@Base+0x5358>
   1ca80:	push	{r0, r1, lr}
   1ca84:	bl	1c88c <argp_parse@@Base+0x5178>
   1ca88:	pop	{r1, r2, lr}
   1ca8c:	mul	r3, r2, r0
   1ca90:	sub	r1, r1, r3
   1ca94:	bx	lr
   1ca98:	cmp	r3, #0
   1ca9c:	cmpeq	r2, #0
   1caa0:	bne	1cac4 <argp_parse@@Base+0x53b0>
   1caa4:	cmp	r1, #0
   1caa8:	movlt	r1, #-2147483648	; 0x80000000
   1caac:	movlt	r0, #0
   1cab0:	blt	1cac0 <argp_parse@@Base+0x53ac>
   1cab4:	cmpeq	r0, #0
   1cab8:	mvnne	r1, #-2147483648	; 0x80000000
   1cabc:	mvnne	r0, #0
   1cac0:	b	1cba8 <argp_parse@@Base+0x5494>
   1cac4:	sub	sp, sp, #8
   1cac8:	push	{sp, lr}
   1cacc:	cmp	r1, #0
   1cad0:	blt	1caf0 <argp_parse@@Base+0x53dc>
   1cad4:	cmp	r3, #0
   1cad8:	blt	1cb24 <argp_parse@@Base+0x5410>
   1cadc:	bl	1cbb8 <argp_parse@@Base+0x54a4>
   1cae0:	ldr	lr, [sp, #4]
   1cae4:	add	sp, sp, #8
   1cae8:	pop	{r2, r3}
   1caec:	bx	lr
   1caf0:	rsbs	r0, r0, #0
   1caf4:	sbc	r1, r1, r1, lsl #1
   1caf8:	cmp	r3, #0
   1cafc:	blt	1cb48 <argp_parse@@Base+0x5434>
   1cb00:	bl	1cbb8 <argp_parse@@Base+0x54a4>
   1cb04:	ldr	lr, [sp, #4]
   1cb08:	add	sp, sp, #8
   1cb0c:	pop	{r2, r3}
   1cb10:	rsbs	r0, r0, #0
   1cb14:	sbc	r1, r1, r1, lsl #1
   1cb18:	rsbs	r2, r2, #0
   1cb1c:	sbc	r3, r3, r3, lsl #1
   1cb20:	bx	lr
   1cb24:	rsbs	r2, r2, #0
   1cb28:	sbc	r3, r3, r3, lsl #1
   1cb2c:	bl	1cbb8 <argp_parse@@Base+0x54a4>
   1cb30:	ldr	lr, [sp, #4]
   1cb34:	add	sp, sp, #8
   1cb38:	pop	{r2, r3}
   1cb3c:	rsbs	r0, r0, #0
   1cb40:	sbc	r1, r1, r1, lsl #1
   1cb44:	bx	lr
   1cb48:	rsbs	r2, r2, #0
   1cb4c:	sbc	r3, r3, r3, lsl #1
   1cb50:	bl	1cbb8 <argp_parse@@Base+0x54a4>
   1cb54:	ldr	lr, [sp, #4]
   1cb58:	add	sp, sp, #8
   1cb5c:	pop	{r2, r3}
   1cb60:	rsbs	r2, r2, #0
   1cb64:	sbc	r3, r3, r3, lsl #1
   1cb68:	bx	lr
   1cb6c:	cmp	r3, #0
   1cb70:	cmpeq	r2, #0
   1cb74:	bne	1cb8c <argp_parse@@Base+0x5478>
   1cb78:	cmp	r1, #0
   1cb7c:	cmpeq	r0, #0
   1cb80:	mvnne	r1, #0
   1cb84:	mvnne	r0, #0
   1cb88:	b	1cba8 <argp_parse@@Base+0x5494>
   1cb8c:	sub	sp, sp, #8
   1cb90:	push	{sp, lr}
   1cb94:	bl	1cbb8 <argp_parse@@Base+0x54a4>
   1cb98:	ldr	lr, [sp, #4]
   1cb9c:	add	sp, sp, #8
   1cba0:	pop	{r2, r3}
   1cba4:	bx	lr
   1cba8:	push	{r1, lr}
   1cbac:	mov	r0, #8
   1cbb0:	bl	11270 <raise@plt>
   1cbb4:	pop	{r1, pc}
   1cbb8:	cmp	r1, r3
   1cbbc:	cmpeq	r0, r2
   1cbc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbc4:	mov	r4, r0
   1cbc8:	movcc	r0, #0
   1cbcc:	mov	r5, r1
   1cbd0:	ldr	lr, [sp, #36]	; 0x24
   1cbd4:	movcc	r1, r0
   1cbd8:	bcc	1ccd4 <argp_parse@@Base+0x55c0>
   1cbdc:	cmp	r3, #0
   1cbe0:	clzeq	ip, r2
   1cbe4:	clzne	ip, r3
   1cbe8:	addeq	ip, ip, #32
   1cbec:	cmp	r5, #0
   1cbf0:	clzeq	r1, r4
   1cbf4:	addeq	r1, r1, #32
   1cbf8:	clzne	r1, r5
   1cbfc:	sub	ip, ip, r1
   1cc00:	sub	sl, ip, #32
   1cc04:	lsl	r9, r3, ip
   1cc08:	rsb	fp, ip, #32
   1cc0c:	orr	r9, r9, r2, lsl sl
   1cc10:	orr	r9, r9, r2, lsr fp
   1cc14:	lsl	r8, r2, ip
   1cc18:	cmp	r5, r9
   1cc1c:	cmpeq	r4, r8
   1cc20:	movcc	r0, #0
   1cc24:	movcc	r1, r0
   1cc28:	bcc	1cc44 <argp_parse@@Base+0x5530>
   1cc2c:	mov	r0, #1
   1cc30:	subs	r4, r4, r8
   1cc34:	lsl	r1, r0, sl
   1cc38:	orr	r1, r1, r0, lsr fp
   1cc3c:	lsl	r0, r0, ip
   1cc40:	sbc	r5, r5, r9
   1cc44:	cmp	ip, #0
   1cc48:	beq	1ccd4 <argp_parse@@Base+0x55c0>
   1cc4c:	lsr	r6, r8, #1
   1cc50:	orr	r6, r6, r9, lsl #31
   1cc54:	lsr	r7, r9, #1
   1cc58:	mov	r2, ip
   1cc5c:	b	1cc80 <argp_parse@@Base+0x556c>
   1cc60:	subs	r3, r4, r6
   1cc64:	sbc	r8, r5, r7
   1cc68:	adds	r3, r3, r3
   1cc6c:	adc	r8, r8, r8
   1cc70:	adds	r4, r3, #1
   1cc74:	adc	r5, r8, #0
   1cc78:	subs	r2, r2, #1
   1cc7c:	beq	1cc9c <argp_parse@@Base+0x5588>
   1cc80:	cmp	r5, r7
   1cc84:	cmpeq	r4, r6
   1cc88:	bcs	1cc60 <argp_parse@@Base+0x554c>
   1cc8c:	adds	r4, r4, r4
   1cc90:	adc	r5, r5, r5
   1cc94:	subs	r2, r2, #1
   1cc98:	bne	1cc80 <argp_parse@@Base+0x556c>
   1cc9c:	lsr	r3, r4, ip
   1cca0:	orr	r3, r3, r5, lsl fp
   1cca4:	lsr	r2, r5, ip
   1cca8:	orr	r3, r3, r5, lsr sl
   1ccac:	adds	r0, r0, r4
   1ccb0:	mov	r4, r3
   1ccb4:	lsl	r3, r2, ip
   1ccb8:	orr	r3, r3, r4, lsl sl
   1ccbc:	lsl	ip, r4, ip
   1ccc0:	orr	r3, r3, r4, lsr fp
   1ccc4:	adc	r1, r1, r5
   1ccc8:	subs	r0, r0, ip
   1cccc:	mov	r5, r2
   1ccd0:	sbc	r1, r1, r3
   1ccd4:	cmp	lr, #0
   1ccd8:	strdne	r4, [lr]
   1ccdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cce0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cce4:	mov	r7, r0
   1cce8:	ldr	r6, [pc, #72]	; 1cd38 <argp_parse@@Base+0x5624>
   1ccec:	ldr	r5, [pc, #72]	; 1cd3c <argp_parse@@Base+0x5628>
   1ccf0:	add	r6, pc, r6
   1ccf4:	add	r5, pc, r5
   1ccf8:	sub	r6, r6, r5
   1ccfc:	mov	r8, r1
   1cd00:	mov	r9, r2
   1cd04:	bl	1122c <fdopen@plt-0x20>
   1cd08:	asrs	r6, r6, #2
   1cd0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cd10:	mov	r4, #0
   1cd14:	add	r4, r4, #1
   1cd18:	ldr	r3, [r5], #4
   1cd1c:	mov	r2, r9
   1cd20:	mov	r1, r8
   1cd24:	mov	r0, r7
   1cd28:	blx	r3
   1cd2c:	cmp	r6, r4
   1cd30:	bne	1cd14 <argp_parse@@Base+0x5600>
   1cd34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cd38:	andeq	r2, r1, ip, lsl #4
   1cd3c:	andeq	r2, r1, r4, lsl #4
   1cd40:	bx	lr

Disassembly of section .fini:

0001cd44 <.fini>:
   1cd44:	push	{r3, lr}
   1cd48:	pop	{r3, pc}
