
raspbian-preinstalled/id:     file format elf32-littlearm


Disassembly of section .init:

00010f0c <.init>:
   10f0c:	push	{r3, lr}
   10f10:	bl	11d9c <__assert_fail@plt+0xb88>
   10f14:	pop	{r3, pc}

Disassembly of section .plt:

00010f18 <calloc@plt-0x14>:
   10f18:	push	{lr}		; (str lr, [sp, #-4]!)
   10f1c:	ldr	lr, [pc, #4]	; 10f28 <calloc@plt-0x4>
   10f20:	add	lr, pc, lr
   10f24:	ldr	pc, [lr, #8]!
   10f28:	ldrdeq	r7, [r1], -r8

00010f2c <calloc@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #216]!	; 0xd8

00010f38 <endgrent@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #208]!	; 0xd0

00010f44 <fputs_unlocked@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #200]!	; 0xc8

00010f50 <raise@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #192]!	; 0xc0

00010f5c <getpwnam@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #184]!	; 0xb8

00010f68 <is_selinux_enabled@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #176]!	; 0xb0

00010f74 <strcmp@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #168]!	; 0xa8

00010f80 <getpwuid@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #160]!	; 0xa0

00010f8c <fflush@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #152]!	; 0x98

00010f98 <getuid@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #144]!	; 0x90

00010fa4 <free@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #136]!	; 0x88

00010fb0 <_exit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #128]!	; 0x80

00010fbc <memcpy@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #120]!	; 0x78

00010fc8 <mbsinit@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #112]!	; 0x70

00010fd4 <memcmp@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #104]!	; 0x68

00010fe0 <dcgettext@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #96]!	; 0x60

00010fec <__stack_chk_fail@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #88]!	; 0x58

00010ff8 <sysconf@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #80]!	; 0x50

00011004 <realloc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #72]!	; 0x48

00011010 <textdomain@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #64]!	; 0x40

0001101c <geteuid@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #56]!	; 0x38

00011028 <iswprint@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #48]!	; 0x30

00011034 <getegid@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #40]!	; 0x28

00011040 <fwrite@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #32]!

0001104c <lseek64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #24]!

00011058 <__ctype_get_mb_cur_max@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #16]!

00011064 <getcon@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #8]!

00011070 <__fpending@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #0]!

0001107c <mbrtowc@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #90112	; 0x16000
   11084:	ldr	pc, [ip, #4088]!	; 0xff8

00011088 <error@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #90112	; 0x16000
   11090:	ldr	pc, [ip, #4080]!	; 0xff0

00011094 <getenv@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #90112	; 0x16000
   1109c:	ldr	pc, [ip, #4072]!	; 0xfe8

000110a0 <malloc@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #90112	; 0x16000
   110a8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110ac <__libc_start_main@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #90112	; 0x16000
   110b4:	ldr	pc, [ip, #4056]!	; 0xfd8

000110b8 <__freading@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #4048]!	; 0xfd0

000110c4 <__gmon_start__@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #4040]!	; 0xfc8

000110d0 <getopt_long@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #4032]!	; 0xfc0

000110dc <__ctype_b_loc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #4024]!	; 0xfb8

000110e8 <exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #4016]!	; 0xfb0

000110f4 <strtoul@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #4008]!	; 0xfa8

00011100 <strlen@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #4000]!	; 0xfa0

0001110c <strchr@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #3992]!	; 0xf98

00011118 <__errno_location@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #3984]!	; 0xf90

00011124 <__cxa_atexit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3976]!	; 0xf88

00011130 <getgid@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3968]!	; 0xf80

0001113c <getgrouplist@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3960]!	; 0xf78

00011148 <memset@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3952]!	; 0xf70

00011154 <__printf_chk@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3944]!	; 0xf68

00011160 <fileno@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3936]!	; 0xf60

0001116c <__fprintf_chk@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3928]!	; 0xf58

00011178 <fclose@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3920]!	; 0xf50

00011184 <fseeko64@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3912]!	; 0xf48

00011190 <__overflow@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3904]!	; 0xf40

0001119c <setlocale@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3896]!	; 0xf38

000111a8 <endpwent@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3888]!	; 0xf30

000111b4 <strrchr@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3880]!	; 0xf28

000111c0 <nl_langinfo@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3872]!	; 0xf20

000111cc <getgroups@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3864]!	; 0xf18

000111d8 <bindtextdomain@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3856]!	; 0xf10

000111e4 <strncmp@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3848]!	; 0xf08

000111f0 <abort@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3840]!	; 0xf00

000111fc <getgrgid@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3832]!	; 0xef8

00011208 <getgrnam@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3824]!	; 0xef0

00011214 <__assert_fail@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3816]!	; 0xee8

Disassembly of section .text:

00011220 <.text>:
   11220:	ldr	r3, [pc, #2692]	; 11cac <__assert_fail@plt+0xa98>
   11224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11228:	sub	sp, sp, #44	; 0x2c
   1122c:	ldr	r3, [r3]
   11230:	mov	r5, r1
   11234:	str	r3, [sp, #36]	; 0x24
   11238:	mov	r6, r0
   1123c:	bl	10f68 <is_selinux_enabled@plt>
   11240:	mov	r7, #0
   11244:	ldr	sl, [pc, #2660]	; 11cb0 <__assert_fail@plt+0xa9c>
   11248:	ldr	r9, [pc, #2660]	; 11cb4 <__assert_fail@plt+0xaa0>
   1124c:	mov	fp, r7
   11250:	mov	r8, r7
   11254:	str	r0, [sp, #28]
   11258:	ldr	r0, [r5]
   1125c:	bl	1253c <__assert_fail@plt+0x1328>
   11260:	ldr	r1, [pc, #2640]	; 11cb8 <__assert_fail@plt+0xaa4>
   11264:	mov	r0, #6
   11268:	bl	1119c <setlocale@plt>
   1126c:	ldr	r1, [pc, #2632]	; 11cbc <__assert_fail@plt+0xaa8>
   11270:	ldr	r0, [pc, #2632]	; 11cc0 <__assert_fail@plt+0xaac>
   11274:	bl	111d8 <bindtextdomain@plt>
   11278:	ldr	r0, [pc, #2624]	; 11cc0 <__assert_fail@plt+0xaac>
   1127c:	bl	11010 <textdomain@plt>
   11280:	ldr	r0, [pc, #2620]	; 11cc4 <__assert_fail@plt+0xab0>
   11284:	bl	16314 <__assert_fail@plt+0x5100>
   11288:	str	r7, [sp, #24]
   1128c:	str	r7, [sp, #20]
   11290:	mov	r4, #0
   11294:	str	r4, [sp]
   11298:	mov	r3, sl
   1129c:	mov	r2, r9
   112a0:	mov	r1, r5
   112a4:	mov	r0, r6
   112a8:	bl	110d0 <getopt_long@plt>
   112ac:	cmn	r0, #1
   112b0:	beq	113a0 <__assert_fail@plt+0x18c>
   112b4:	cmp	r0, #97	; 0x61
   112b8:	beq	11290 <__assert_fail@plt+0x7c>
   112bc:	ble	112dc <__assert_fail@plt+0xc8>
   112c0:	cmp	r0, #114	; 0x72
   112c4:	beq	11394 <__assert_fail@plt+0x180>
   112c8:	bgt	11378 <__assert_fail@plt+0x164>
   112cc:	cmp	r0, #103	; 0x67
   112d0:	bne	112fc <__assert_fail@plt+0xe8>
   112d4:	mov	fp, #1
   112d8:	b	11290 <__assert_fail@plt+0x7c>
   112dc:	cmn	r0, #2
   112e0:	beq	11b84 <__assert_fail@plt+0x970>
   112e4:	ble	11338 <__assert_fail@plt+0x124>
   112e8:	cmp	r0, #71	; 0x47
   112ec:	bne	11314 <__assert_fail@plt+0x100>
   112f0:	mov	r3, #1
   112f4:	str	r3, [sp, #20]
   112f8:	b	11290 <__assert_fail@plt+0x7c>
   112fc:	cmp	r0, #110	; 0x6e
   11300:	bne	11b7c <__assert_fail@plt+0x968>
   11304:	ldr	r2, [pc, #2492]	; 11cc8 <__assert_fail@plt+0xab4>
   11308:	mov	r3, #1
   1130c:	strb	r3, [r2, #1]
   11310:	b	11290 <__assert_fail@plt+0x7c>
   11314:	cmp	r0, #90	; 0x5a
   11318:	bne	11b7c <__assert_fail@plt+0x968>
   1131c:	ldr	r3, [sp, #28]
   11320:	cmp	r3, #0
   11324:	ble	11c64 <__assert_fail@plt+0xa50>
   11328:	ldr	r2, [pc, #2456]	; 11cc8 <__assert_fail@plt+0xab4>
   1132c:	mov	r3, #1
   11330:	strb	r3, [r2]
   11334:	b	11290 <__assert_fail@plt+0x7c>
   11338:	cmn	r0, #3
   1133c:	bne	11b7c <__assert_fail@plt+0x968>
   11340:	ldr	r3, [pc, #2436]	; 11ccc <__assert_fail@plt+0xab8>
   11344:	ldr	r0, [pc, #2436]	; 11cd0 <__assert_fail@plt+0xabc>
   11348:	ldr	r1, [pc, #2436]	; 11cd4 <__assert_fail@plt+0xac0>
   1134c:	ldr	r2, [pc, #2436]	; 11cd8 <__assert_fail@plt+0xac4>
   11350:	str	r4, [sp, #8]
   11354:	ldr	r0, [r0]
   11358:	ldr	r3, [r3]
   1135c:	str	r1, [sp, #4]
   11360:	str	r2, [sp]
   11364:	ldr	r1, [pc, #2416]	; 11cdc <__assert_fail@plt+0xac8>
   11368:	ldr	r2, [pc, #2416]	; 11ce0 <__assert_fail@plt+0xacc>
   1136c:	bl	14fd4 <__assert_fail@plt+0x3dc0>
   11370:	mov	r0, r4
   11374:	bl	110e8 <exit@plt>
   11378:	cmp	r0, #117	; 0x75
   1137c:	moveq	r7, #1
   11380:	beq	11290 <__assert_fail@plt+0x7c>
   11384:	cmp	r0, #122	; 0x7a
   11388:	bne	11b7c <__assert_fail@plt+0x968>
   1138c:	mov	r8, #1
   11390:	b	11290 <__assert_fail@plt+0x7c>
   11394:	mov	r3, #1
   11398:	str	r3, [sp, #24]
   1139c:	b	11290 <__assert_fail@plt+0x7c>
   113a0:	ldr	r9, [pc, #2364]	; 11ce4 <__assert_fail@plt+0xad0>
   113a4:	ldr	r2, [r9]
   113a8:	sub	r6, r6, r2
   113ac:	cmp	r6, #1
   113b0:	bhi	11b44 <__assert_fail@plt+0x930>
   113b4:	ldr	r9, [pc, #2316]	; 11cc8 <__assert_fail@plt+0xab4>
   113b8:	cmp	r6, #0
   113bc:	ldrb	r1, [r9]
   113c0:	beq	113d4 <__assert_fail@plt+0x1c0>
   113c4:	cmp	r1, #0
   113c8:	movne	r2, #5
   113cc:	ldrne	r1, [pc, #2324]	; 11ce8 <__assert_fail@plt+0xad4>
   113d0:	bne	11440 <__assert_fail@plt+0x22c>
   113d4:	ldr	r0, [sp, #20]
   113d8:	add	r3, r7, fp
   113dc:	add	r3, r3, r0
   113e0:	add	r3, r3, r1
   113e4:	cmp	r3, #1
   113e8:	bgt	11c70 <__assert_fail@plt+0xa5c>
   113ec:	ldr	r3, [sp, #20]
   113f0:	orr	r4, r3, fp
   113f4:	orr	r3, r7, r1
   113f8:	orrs	r3, r4, r3
   113fc:	beq	114d8 <__assert_fail@plt+0x2c4>
   11400:	cmp	r6, #0
   11404:	bne	11508 <__assert_fail@plt+0x2f4>
   11408:	cmp	r1, #0
   1140c:	beq	11458 <__assert_fail@plt+0x244>
   11410:	ldr	r3, [sp, #28]
   11414:	cmp	r3, #0
   11418:	ble	11458 <__assert_fail@plt+0x244>
   1141c:	ldr	r0, [pc, #2248]	; 11cec <__assert_fail@plt+0xad8>
   11420:	bl	11064 <getcon@plt>
   11424:	cmp	r0, #0
   11428:	beq	11458 <__assert_fail@plt+0x244>
   1142c:	ldrb	r3, [r9]
   11430:	cmp	r3, #0
   11434:	movne	r2, #5
   11438:	ldrne	r1, [pc, #2224]	; 11cf0 <__assert_fail@plt+0xadc>
   1143c:	beq	11458 <__assert_fail@plt+0x244>
   11440:	mov	r0, #0
   11444:	bl	10fe0 <dcgettext@plt>
   11448:	mov	r1, #0
   1144c:	mov	r2, r0
   11450:	mov	r0, #1
   11454:	bl	11088 <error@plt>
   11458:	cmp	r7, #0
   1145c:	beq	117bc <__assert_fail@plt+0x5a8>
   11460:	ldr	r3, [sp, #24]
   11464:	cmp	r3, #0
   11468:	beq	1167c <__assert_fail@plt+0x468>
   1146c:	bl	11118 <__errno_location@plt>
   11470:	mov	r3, #0
   11474:	str	r3, [r0]
   11478:	mov	r5, r0
   1147c:	bl	10f98 <getuid@plt>
   11480:	cmn	r0, #1
   11484:	str	r0, [r9, #12]
   11488:	bne	115f8 <__assert_fail@plt+0x3e4>
   1148c:	ldr	r5, [r5]
   11490:	cmp	r5, #0
   11494:	movne	r2, #5
   11498:	ldrne	r1, [pc, #2132]	; 11cf4 <__assert_fail@plt+0xae0>
   1149c:	movne	r0, #0
   114a0:	bne	11754 <__assert_fail@plt+0x540>
   114a4:	cmp	r7, #0
   114a8:	bne	115ec <__assert_fail@plt+0x3d8>
   114ac:	cmp	r4, #0
   114b0:	bne	116f4 <__assert_fail@plt+0x4e0>
   114b4:	ldrb	r3, [r9]
   114b8:	cmp	r3, #0
   114bc:	beq	116f4 <__assert_fail@plt+0x4e0>
   114c0:	ldr	r4, [pc, #2056]	; 11cd0 <__assert_fail@plt+0xabc>
   114c4:	ldr	r0, [r9, #4]
   114c8:	ldr	r5, [pc, #2088]	; 11cf8 <__assert_fail@plt+0xae4>
   114cc:	ldr	r1, [r4]
   114d0:	bl	10f44 <fputs_unlocked@plt>
   114d4:	b	1159c <__assert_fail@plt+0x388>
   114d8:	ldr	r3, [sp, #24]
   114dc:	cmp	r3, #0
   114e0:	bne	11c7c <__assert_fail@plt+0xa68>
   114e4:	ldrb	r3, [r9, #1]
   114e8:	cmp	r3, #0
   114ec:	bne	11c7c <__assert_fail@plt+0xa68>
   114f0:	cmp	r8, #0
   114f4:	movne	r2, #5
   114f8:	ldrne	r1, [pc, #2044]	; 11cfc <__assert_fail@plt+0xae8>
   114fc:	bne	11440 <__assert_fail@plt+0x22c>
   11500:	cmp	r6, #0
   11504:	beq	117fc <__assert_fail@plt+0x5e8>
   11508:	ldr	r4, [r5, r2, lsl #2]
   1150c:	ldrb	r3, [r4]
   11510:	cmp	r3, #0
   11514:	beq	11c18 <__assert_fail@plt+0xa04>
   11518:	mov	r3, #0
   1151c:	str	r3, [sp]
   11520:	mov	r2, r3
   11524:	ldr	r1, [pc, #2004]	; 11d00 <__assert_fail@plt+0xaec>
   11528:	mov	r0, r4
   1152c:	bl	14ab8 <__assert_fail@plt+0x38a4>
   11530:	cmp	r0, #0
   11534:	bne	11c18 <__assert_fail@plt+0xa04>
   11538:	ldr	r0, [r9, #8]
   1153c:	bl	10f80 <getpwuid@plt>
   11540:	subs	r5, r0, #0
   11544:	beq	11c18 <__assert_fail@plt+0xa04>
   11548:	ldr	r0, [r5]
   1154c:	bl	15304 <__assert_fail@plt+0x40f0>
   11550:	ldrd	r2, [r5, #8]
   11554:	cmp	r7, #0
   11558:	str	r2, [r9, #8]
   1155c:	strd	r2, [r9, #12]
   11560:	str	r3, [r9, #20]
   11564:	mov	r4, r0
   11568:	bne	115ec <__assert_fail@plt+0x3d8>
   1156c:	cmp	fp, #0
   11570:	beq	11634 <__assert_fail@plt+0x420>
   11574:	ldr	r3, [sp, #24]
   11578:	ldrb	r1, [r9, #1]
   1157c:	cmp	r3, #0
   11580:	ldrne	r0, [r9, #20]
   11584:	ldreq	r0, [r9, #16]
   11588:	bl	12168 <__assert_fail@plt+0xf54>
   1158c:	cmp	r0, #0
   11590:	beq	117a8 <__assert_fail@plt+0x594>
   11594:	ldr	r4, [pc, #1844]	; 11cd0 <__assert_fail@plt+0xabc>
   11598:	ldr	r5, [pc, #1880]	; 11cf8 <__assert_fail@plt+0xae4>
   1159c:	cmp	r8, #0
   115a0:	bne	11674 <__assert_fail@plt+0x460>
   115a4:	mov	r1, #10
   115a8:	ldr	r0, [r4]
   115ac:	ldr	r3, [r0, #20]
   115b0:	ldr	r2, [r0, #24]
   115b4:	cmp	r2, r3
   115b8:	addhi	r2, r3, #1
   115bc:	strhi	r2, [r0, #20]
   115c0:	strbhi	r1, [r3]
   115c4:	bls	11858 <__assert_fail@plt+0x644>
   115c8:	ldr	r3, [pc, #1756]	; 11cac <__assert_fail@plt+0xa98>
   115cc:	ldr	r2, [sp, #36]	; 0x24
   115d0:	ldrb	r0, [r5]
   115d4:	ldr	r3, [r3]
   115d8:	cmp	r2, r3
   115dc:	eor	r0, r0, #1
   115e0:	bne	11c88 <__assert_fail@plt+0xa74>
   115e4:	add	sp, sp, #44	; 0x2c
   115e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115ec:	ldr	r3, [sp, #24]
   115f0:	cmp	r3, #0
   115f4:	beq	1169c <__assert_fail@plt+0x488>
   115f8:	ldr	r4, [r9, #12]
   115fc:	ldrb	r3, [r9, #1]
   11600:	cmp	r3, #0
   11604:	ldreq	r5, [pc, #1772]	; 11cf8 <__assert_fail@plt+0xae4>
   11608:	beq	116e0 <__assert_fail@plt+0x4cc>
   1160c:	mov	r0, r4
   11610:	bl	10f80 <getpwuid@plt>
   11614:	subs	r6, r0, #0
   11618:	ldrne	r0, [r6]
   1161c:	ldrne	r5, [pc, #1748]	; 11cf8 <__assert_fail@plt+0xae4>
   11620:	beq	116a4 <__assert_fail@plt+0x490>
   11624:	ldr	r4, [pc, #1700]	; 11cd0 <__assert_fail@plt+0xabc>
   11628:	ldr	r1, [r4]
   1162c:	bl	10f44 <fputs_unlocked@plt>
   11630:	b	1159c <__assert_fail@plt+0x388>
   11634:	ldr	r3, [sp, #20]
   11638:	cmp	r3, #0
   1163c:	beq	11898 <__assert_fail@plt+0x684>
   11640:	cmp	r8, #0
   11644:	ldr	r1, [r9, #12]
   11648:	ldr	r2, [r9, #20]
   1164c:	ldr	r3, [r9, #16]
   11650:	ldrb	r0, [r9, #1]
   11654:	beq	11870 <__assert_fail@plt+0x65c>
   11658:	stm	sp, {r0, fp}
   1165c:	mov	r0, r4
   11660:	bl	121e8 <__assert_fail@plt+0xfd4>
   11664:	cmp	r0, #0
   11668:	beq	117a8 <__assert_fail@plt+0x594>
   1166c:	ldr	r4, [pc, #1628]	; 11cd0 <__assert_fail@plt+0xabc>
   11670:	ldr	r5, [pc, #1664]	; 11cf8 <__assert_fail@plt+0xae4>
   11674:	mov	r1, #0
   11678:	b	115a8 <__assert_fail@plt+0x394>
   1167c:	bl	11118 <__errno_location@plt>
   11680:	ldr	r3, [sp, #24]
   11684:	str	r3, [r0]
   11688:	mov	r4, r0
   1168c:	bl	1101c <geteuid@plt>
   11690:	cmn	r0, #1
   11694:	str	r0, [r9, #8]
   11698:	beq	11c48 <__assert_fail@plt+0xa34>
   1169c:	ldr	r4, [r9, #8]
   116a0:	b	115fc <__assert_fail@plt+0x3e8>
   116a4:	mov	r2, #5
   116a8:	ldr	r1, [pc, #1620]	; 11d04 <__assert_fail@plt+0xaf0>
   116ac:	bl	10fe0 <dcgettext@plt>
   116b0:	ldr	r2, [pc, #1616]	; 11d08 <__assert_fail@plt+0xaf4>
   116b4:	mov	r1, r6
   116b8:	ldr	r5, [pc, #1592]	; 11cf8 <__assert_fail@plt+0xae4>
   116bc:	mov	r7, r0
   116c0:	mov	r0, r4
   116c4:	bl	124d8 <__assert_fail@plt+0x12c4>
   116c8:	mov	r2, r7
   116cc:	mov	r1, r6
   116d0:	mov	r3, r0
   116d4:	mov	r0, r6
   116d8:	bl	11088 <error@plt>
   116dc:	strb	r6, [r5]
   116e0:	mov	r0, r4
   116e4:	ldr	r2, [pc, #1564]	; 11d08 <__assert_fail@plt+0xaf4>
   116e8:	mov	r1, #0
   116ec:	bl	124d8 <__assert_fail@plt+0x12c4>
   116f0:	b	11624 <__assert_fail@plt+0x410>
   116f4:	bl	11118 <__errno_location@plt>
   116f8:	mov	r4, #0
   116fc:	str	r4, [r0]
   11700:	mov	r5, r0
   11704:	bl	11034 <getegid@plt>
   11708:	cmn	r0, #1
   1170c:	str	r0, [r9, #16]
   11710:	bne	11720 <__assert_fail@plt+0x50c>
   11714:	ldr	r6, [r5]
   11718:	cmp	r6, r4
   1171c:	bne	11c8c <__assert_fail@plt+0xa78>
   11720:	mov	r4, #0
   11724:	str	r4, [r5]
   11728:	bl	11130 <getgid@plt>
   1172c:	cmn	r0, #1
   11730:	str	r0, [r9, #20]
   11734:	bne	1156c <__assert_fail@plt+0x358>
   11738:	ldr	r5, [r5]
   1173c:	cmp	r5, r4
   11740:	moveq	r4, r5
   11744:	beq	1156c <__assert_fail@plt+0x358>
   11748:	ldr	r1, [pc, #1468]	; 11d0c <__assert_fail@plt+0xaf8>
   1174c:	mov	r0, r4
   11750:	mov	r2, #5
   11754:	bl	10fe0 <dcgettext@plt>
   11758:	mov	r1, r5
   1175c:	mov	r2, r0
   11760:	mov	r0, #1
   11764:	bl	11088 <error@plt>
   11768:	add	r2, sp, #32
   1176c:	ldr	r1, [r9, #16]
   11770:	mov	r0, r4
   11774:	bl	15360 <__assert_fail@plt+0x414c>
   11778:	subs	r5, r0, #0
   1177c:	bge	11a3c <__assert_fail@plt+0x828>
   11780:	bl	11118 <__errno_location@plt>
   11784:	mov	r2, #5
   11788:	ldr	r1, [pc, #1408]	; 11d10 <__assert_fail@plt+0xafc>
   1178c:	ldr	r5, [r0]
   11790:	mov	r0, r4
   11794:	bl	10fe0 <dcgettext@plt>
   11798:	mov	r1, r5
   1179c:	mov	r2, r0
   117a0:	mov	r0, r4
   117a4:	bl	11088 <error@plt>
   117a8:	ldr	r5, [pc, #1352]	; 11cf8 <__assert_fail@plt+0xae4>
   117ac:	mov	r3, #0
   117b0:	ldr	r4, [pc, #1304]	; 11cd0 <__assert_fail@plt+0xabc>
   117b4:	strb	r3, [r5]
   117b8:	b	1159c <__assert_fail@plt+0x388>
   117bc:	cmp	r4, #0
   117c0:	beq	1180c <__assert_fail@plt+0x5f8>
   117c4:	cmp	fp, #0
   117c8:	bne	116f4 <__assert_fail@plt+0x4e0>
   117cc:	ldr	r3, [sp, #20]
   117d0:	cmp	r3, #0
   117d4:	beq	11860 <__assert_fail@plt+0x64c>
   117d8:	bl	11118 <__errno_location@plt>
   117dc:	mov	r3, #0
   117e0:	str	r3, [r0]
   117e4:	mov	r5, r0
   117e8:	bl	10f98 <getuid@plt>
   117ec:	cmn	r0, #1
   117f0:	str	r0, [r9, #12]
   117f4:	bne	114a4 <__assert_fail@plt+0x290>
   117f8:	b	1148c <__assert_fail@plt+0x278>
   117fc:	ldr	r0, [pc, #1296]	; 11d14 <__assert_fail@plt+0xb00>
   11800:	bl	11094 <getenv@plt>
   11804:	cmp	r0, #0
   11808:	beq	11410 <__assert_fail@plt+0x1fc>
   1180c:	ldrb	r5, [r9]
   11810:	cmp	r5, #0
   11814:	bne	11860 <__assert_fail@plt+0x64c>
   11818:	bl	11118 <__errno_location@plt>
   1181c:	str	r5, [r0]
   11820:	mov	r6, r0
   11824:	bl	1101c <geteuid@plt>
   11828:	cmn	r0, #1
   1182c:	str	r0, [r9, #8]
   11830:	bne	117c4 <__assert_fail@plt+0x5b0>
   11834:	ldr	r5, [r6]
   11838:	cmp	r5, #0
   1183c:	bne	11c54 <__assert_fail@plt+0xa40>
   11840:	cmp	r7, #0
   11844:	beq	117c4 <__assert_fail@plt+0x5b0>
   11848:	ldr	r3, [sp, #24]
   1184c:	cmp	r3, #0
   11850:	beq	1169c <__assert_fail@plt+0x488>
   11854:	b	1146c <__assert_fail@plt+0x258>
   11858:	bl	11190 <__overflow@plt>
   1185c:	b	115c8 <__assert_fail@plt+0x3b4>
   11860:	ldrb	r3, [r9]
   11864:	cmp	r3, #0
   11868:	bne	114b4 <__assert_fail@plt+0x2a0>
   1186c:	b	117d8 <__assert_fail@plt+0x5c4>
   11870:	mov	ip, #32
   11874:	str	r0, [sp]
   11878:	str	ip, [sp, #4]
   1187c:	mov	r0, r4
   11880:	bl	121e8 <__assert_fail@plt+0xfd4>
   11884:	cmp	r0, #0
   11888:	beq	117a8 <__assert_fail@plt+0x594>
   1188c:	ldr	r4, [pc, #1084]	; 11cd0 <__assert_fail@plt+0xabc>
   11890:	ldr	r5, [pc, #1120]	; 11cf8 <__assert_fail@plt+0xae4>
   11894:	b	115a4 <__assert_fail@plt+0x390>
   11898:	ldrb	r3, [r9]
   1189c:	cmp	r3, #0
   118a0:	bne	114c0 <__assert_fail@plt+0x2ac>
   118a4:	ldr	r6, [sp, #20]
   118a8:	mov	r2, #5
   118ac:	ldr	r1, [pc, #1124]	; 11d18 <__assert_fail@plt+0xb04>
   118b0:	mov	r0, r6
   118b4:	bl	10fe0 <dcgettext@plt>
   118b8:	mov	r1, r6
   118bc:	ldr	r2, [pc, #1092]	; 11d08 <__assert_fail@plt+0xaf4>
   118c0:	mov	r5, r0
   118c4:	ldr	r0, [r9, #12]
   118c8:	bl	124d8 <__assert_fail@plt+0x12c4>
   118cc:	mov	r1, r5
   118d0:	mov	r2, r0
   118d4:	mov	r0, #1
   118d8:	bl	11154 <__printf_chk@plt>
   118dc:	ldr	r0, [r9, #12]
   118e0:	bl	10f80 <getpwuid@plt>
   118e4:	subs	r5, r0, #0
   118e8:	beq	118fc <__assert_fail@plt+0x6e8>
   118ec:	ldr	r2, [r5]
   118f0:	ldr	r1, [pc, #1060]	; 11d1c <__assert_fail@plt+0xb08>
   118f4:	mov	r0, #1
   118f8:	bl	11154 <__printf_chk@plt>
   118fc:	mov	r2, #5
   11900:	ldr	r1, [pc, #1048]	; 11d20 <__assert_fail@plt+0xb0c>
   11904:	mov	r0, #0
   11908:	bl	10fe0 <dcgettext@plt>
   1190c:	ldr	r2, [pc, #1040]	; 11d24 <__assert_fail@plt+0xb10>
   11910:	mov	r1, #0
   11914:	mov	r6, r0
   11918:	ldr	r0, [r9, #20]
   1191c:	bl	124d8 <__assert_fail@plt+0x12c4>
   11920:	mov	r1, r6
   11924:	mov	r2, r0
   11928:	mov	r0, #1
   1192c:	bl	11154 <__printf_chk@plt>
   11930:	ldr	r0, [r9, #20]
   11934:	bl	111fc <getgrgid@plt>
   11938:	cmp	r0, #0
   1193c:	beq	11950 <__assert_fail@plt+0x73c>
   11940:	ldr	r2, [r0]
   11944:	ldr	r1, [pc, #976]	; 11d1c <__assert_fail@plt+0xb08>
   11948:	mov	r0, #1
   1194c:	bl	11154 <__printf_chk@plt>
   11950:	ldrd	r2, [r9, #8]
   11954:	cmp	r2, r3
   11958:	beq	119b0 <__assert_fail@plt+0x79c>
   1195c:	mov	r2, #5
   11960:	ldr	r1, [pc, #960]	; 11d28 <__assert_fail@plt+0xb14>
   11964:	mov	r0, #0
   11968:	bl	10fe0 <dcgettext@plt>
   1196c:	ldr	r2, [pc, #916]	; 11d08 <__assert_fail@plt+0xaf4>
   11970:	mov	r1, #0
   11974:	mov	r5, r0
   11978:	ldr	r0, [r9, #8]
   1197c:	bl	124d8 <__assert_fail@plt+0x12c4>
   11980:	mov	r1, r5
   11984:	mov	r2, r0
   11988:	mov	r0, #1
   1198c:	bl	11154 <__printf_chk@plt>
   11990:	ldr	r0, [r9, #8]
   11994:	bl	10f80 <getpwuid@plt>
   11998:	subs	r5, r0, #0
   1199c:	beq	119b0 <__assert_fail@plt+0x79c>
   119a0:	ldr	r2, [r5]
   119a4:	ldr	r1, [pc, #880]	; 11d1c <__assert_fail@plt+0xb08>
   119a8:	mov	r0, #1
   119ac:	bl	11154 <__printf_chk@plt>
   119b0:	ldr	r6, [r9, #16]
   119b4:	ldr	r3, [r9, #20]
   119b8:	cmp	r6, r3
   119bc:	beq	11a14 <__assert_fail@plt+0x800>
   119c0:	mov	r2, #5
   119c4:	ldr	r1, [pc, #864]	; 11d2c <__assert_fail@plt+0xb18>
   119c8:	mov	r0, #0
   119cc:	bl	10fe0 <dcgettext@plt>
   119d0:	ldr	r2, [pc, #844]	; 11d24 <__assert_fail@plt+0xb10>
   119d4:	mov	r1, #0
   119d8:	mov	r7, r0
   119dc:	mov	r0, r6
   119e0:	bl	124d8 <__assert_fail@plt+0x12c4>
   119e4:	mov	r1, r7
   119e8:	mov	r2, r0
   119ec:	mov	r0, #1
   119f0:	bl	11154 <__printf_chk@plt>
   119f4:	ldr	r0, [r9, #16]
   119f8:	bl	111fc <getgrgid@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11a14 <__assert_fail@plt+0x800>
   11a04:	ldr	r2, [r0]
   11a08:	ldr	r1, [pc, #780]	; 11d1c <__assert_fail@plt+0xb08>
   11a0c:	mov	r0, #1
   11a10:	bl	11154 <__printf_chk@plt>
   11a14:	cmp	r4, #0
   11a18:	beq	11768 <__assert_fail@plt+0x554>
   11a1c:	cmp	r5, #0
   11a20:	ldrne	r1, [r5, #12]
   11a24:	beq	11bc8 <__assert_fail@plt+0x9b4>
   11a28:	add	r2, sp, #32
   11a2c:	mov	r0, r4
   11a30:	bl	15360 <__assert_fail@plt+0x414c>
   11a34:	subs	r5, r0, #0
   11a38:	blt	11b8c <__assert_fail@plt+0x978>
   11a3c:	mov	r0, #3
   11a40:	bl	10ff8 <sysconf@plt>
   11a44:	cmp	r0, #0
   11a48:	bgt	11bd0 <__assert_fail@plt+0x9bc>
   11a4c:	cmp	r5, #0
   11a50:	ldr	r4, [pc, #632]	; 11cd0 <__assert_fail@plt+0xabc>
   11a54:	beq	11a70 <__assert_fail@plt+0x85c>
   11a58:	ldr	r1, [pc, #720]	; 11d30 <__assert_fail@plt+0xb1c>
   11a5c:	mov	r2, #5
   11a60:	mov	r0, #0
   11a64:	bl	10fe0 <dcgettext@plt>
   11a68:	ldr	r1, [r4]
   11a6c:	bl	10f44 <fputs_unlocked@plt>
   11a70:	mov	fp, #0
   11a74:	mov	r7, #44	; 0x2c
   11a78:	ldr	r6, [pc, #676]	; 11d24 <__assert_fail@plt+0xb10>
   11a7c:	ldr	sl, [pc, #664]	; 11d1c <__assert_fail@plt+0xb08>
   11a80:	b	11af0 <__assert_fail@plt+0x8dc>
   11a84:	cmp	fp, #0
   11a88:	beq	11aac <__assert_fail@plt+0x898>
   11a8c:	ldr	r0, [r4]
   11a90:	ldr	r3, [r0, #20]
   11a94:	ldr	r2, [r0, #24]
   11a98:	cmp	r3, r2
   11a9c:	addcc	r2, r3, #1
   11aa0:	strcc	r2, [r0, #20]
   11aa4:	strbcc	r7, [r3]
   11aa8:	bcs	11b38 <__assert_fail@plt+0x924>
   11aac:	ldr	r3, [sp, #32]
   11ab0:	mov	r2, r6
   11ab4:	mov	r1, #0
   11ab8:	ldr	r0, [r3, fp, lsl #2]
   11abc:	bl	124d8 <__assert_fail@plt+0x12c4>
   11ac0:	ldr	r1, [r4]
   11ac4:	bl	10f44 <fputs_unlocked@plt>
   11ac8:	ldr	r3, [sp, #32]
   11acc:	ldr	r0, [r3, fp, lsl #2]
   11ad0:	bl	111fc <getgrgid@plt>
   11ad4:	cmp	r0, #0
   11ad8:	beq	11aec <__assert_fail@plt+0x8d8>
   11adc:	ldr	r2, [r0]
   11ae0:	mov	r1, sl
   11ae4:	mov	r0, #1
   11ae8:	bl	11154 <__printf_chk@plt>
   11aec:	add	fp, fp, #1
   11af0:	cmp	fp, r5
   11af4:	blt	11a84 <__assert_fail@plt+0x870>
   11af8:	ldr	r0, [sp, #32]
   11afc:	bl	10fa4 <free@plt>
   11b00:	ldr	r3, [r9, #4]
   11b04:	cmp	r3, #0
   11b08:	ldreq	r5, [pc, #488]	; 11cf8 <__assert_fail@plt+0xae4>
   11b0c:	beq	1159c <__assert_fail@plt+0x388>
   11b10:	mov	r2, #5
   11b14:	ldr	r1, [pc, #536]	; 11d34 <__assert_fail@plt+0xb20>
   11b18:	mov	r0, #0
   11b1c:	bl	10fe0 <dcgettext@plt>
   11b20:	ldr	r2, [r9, #4]
   11b24:	ldr	r5, [pc, #460]	; 11cf8 <__assert_fail@plt+0xae4>
   11b28:	mov	r1, r0
   11b2c:	mov	r0, #1
   11b30:	bl	11154 <__printf_chk@plt>
   11b34:	b	1159c <__assert_fail@plt+0x388>
   11b38:	mov	r1, #44	; 0x2c
   11b3c:	bl	11190 <__overflow@plt>
   11b40:	b	11aac <__assert_fail@plt+0x898>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #488]	; 11d38 <__assert_fail@plt+0xb24>
   11b4c:	mov	r0, r4
   11b50:	bl	10fe0 <dcgettext@plt>
   11b54:	ldr	r3, [r9]
   11b58:	add	r3, r3, #1
   11b5c:	mov	r6, r0
   11b60:	ldr	r0, [r5, r3, lsl #2]
   11b64:	bl	147a0 <__assert_fail@plt+0x358c>
   11b68:	mov	r2, r6
   11b6c:	mov	r1, r4
   11b70:	mov	r3, r0
   11b74:	mov	r0, r4
   11b78:	bl	11088 <error@plt>
   11b7c:	mov	r0, #1
   11b80:	bl	11e50 <__assert_fail@plt+0xc3c>
   11b84:	mov	r0, r4
   11b88:	bl	11e50 <__assert_fail@plt+0xc3c>
   11b8c:	bl	11118 <__errno_location@plt>
   11b90:	mov	r2, #5
   11b94:	ldr	r1, [pc, #416]	; 11d3c <__assert_fail@plt+0xb28>
   11b98:	ldr	r5, [r0]
   11b9c:	mov	r0, #0
   11ba0:	bl	10fe0 <dcgettext@plt>
   11ba4:	mov	r6, r0
   11ba8:	mov	r0, r4
   11bac:	bl	147a0 <__assert_fail@plt+0x358c>
   11bb0:	mov	r2, r6
   11bb4:	mov	r1, r5
   11bb8:	mov	r3, r0
   11bbc:	mov	r0, #0
   11bc0:	bl	11088 <error@plt>
   11bc4:	b	117a8 <__assert_fail@plt+0x594>
   11bc8:	mvn	r1, #0
   11bcc:	b	11a28 <__assert_fail@plt+0x814>
   11bd0:	mov	r0, #3
   11bd4:	bl	10ff8 <sysconf@plt>
   11bd8:	cmp	r0, r5
   11bdc:	bge	11a4c <__assert_fail@plt+0x838>
   11be0:	ldr	r3, [pc, #344]	; 11d40 <__assert_fail@plt+0xb2c>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #340]	; 11d44 <__assert_fail@plt+0xb30>
   11bec:	mov	r0, #0
   11bf0:	ldr	r6, [r3]
   11bf4:	bl	10fe0 <dcgettext@plt>
   11bf8:	cmp	r4, #0
   11bfc:	ldr	r3, [pc, #180]	; 11cb8 <__assert_fail@plt+0xaa4>
   11c00:	mov	r1, #1
   11c04:	movne	r3, r4
   11c08:	mov	r2, r0
   11c0c:	mov	r0, r6
   11c10:	bl	1116c <__fprintf_chk@plt>
   11c14:	b	11a4c <__assert_fail@plt+0x838>
   11c18:	mov	r2, #5
   11c1c:	ldr	r1, [pc, #292]	; 11d48 <__assert_fail@plt+0xb34>
   11c20:	mov	r0, #0
   11c24:	bl	10fe0 <dcgettext@plt>
   11c28:	mov	r5, r0
   11c2c:	mov	r0, r4
   11c30:	bl	147a0 <__assert_fail@plt+0x358c>
   11c34:	mov	r2, r5
   11c38:	mov	r1, #0
   11c3c:	mov	r3, r0
   11c40:	mov	r0, #1
   11c44:	bl	11088 <error@plt>
   11c48:	ldr	r5, [r4]
   11c4c:	cmp	r5, #0
   11c50:	beq	1169c <__assert_fail@plt+0x488>
   11c54:	mov	r2, #5
   11c58:	ldr	r1, [pc, #236]	; 11d4c <__assert_fail@plt+0xb38>
   11c5c:	mov	r0, #0
   11c60:	b	11754 <__assert_fail@plt+0x540>
   11c64:	mov	r2, #5
   11c68:	ldr	r1, [pc, #224]	; 11d50 <__assert_fail@plt+0xb3c>
   11c6c:	b	11440 <__assert_fail@plt+0x22c>
   11c70:	mov	r2, #5
   11c74:	ldr	r1, [pc, #216]	; 11d54 <__assert_fail@plt+0xb40>
   11c78:	b	11440 <__assert_fail@plt+0x22c>
   11c7c:	mov	r2, #5
   11c80:	ldr	r1, [pc, #208]	; 11d58 <__assert_fail@plt+0xb44>
   11c84:	b	11440 <__assert_fail@plt+0x22c>
   11c88:	bl	10fec <__stack_chk_fail@plt>
   11c8c:	mov	r2, #5
   11c90:	ldr	r1, [pc, #196]	; 11d5c <__assert_fail@plt+0xb48>
   11c94:	mov	r0, r4
   11c98:	bl	10fe0 <dcgettext@plt>
   11c9c:	mov	r1, r6
   11ca0:	mov	r2, r0
   11ca4:	mov	r0, #1
   11ca8:	bl	11088 <error@plt>
   11cac:	andeq	r7, r2, r0, lsl #30
   11cb0:	andeq	r6, r1, r0, ror r3
   11cb4:	ldrdeq	r6, [r1], -ip
   11cb8:	andeq	r7, r1, r8, ror r0
   11cbc:	andeq	r6, r1, r0, ror r8
   11cc0:	andeq	r6, r1, r4, asr #15
   11cc4:	andeq	r2, r1, r0, lsl #8
   11cc8:	andeq	r8, r2, ip, ror r1
   11ccc:	andeq	r8, r2, r8, lsl r1
   11cd0:	andeq	r8, r2, r4, ror r1
   11cd4:			; <UNDEFINED> instruction: 0x000168bc
   11cd8:	andeq	r6, r1, ip, asr #17
   11cdc:	andeq	r6, r1, r0, lsl r4
   11ce0:	andeq	r6, r1, r0, asr #15
   11ce4:	andeq	r8, r2, r8, ror #2
   11ce8:	strdeq	r6, [r1], -ip
   11cec:	andeq	r8, r2, r0, lsl #3
   11cf0:	ldrdeq	r6, [r1], -r4
   11cf4:	andeq	r6, r1, r0, lsr #20
   11cf8:	andeq	r8, r2, r4, lsl r1
   11cfc:	muleq	r1, r4, r9
   11d00:	andeq	r8, r2, r4, lsl #3
   11d04:	andeq	r6, r1, r4, ror #20
   11d08:	muleq	r2, r4, r1
   11d0c:	andeq	r6, r1, r0, asr sl
   11d10:	ldrdeq	r6, [r1], -r8
   11d14:	andeq	r6, r1, r4, asr #19
   11d18:	andeq	r6, r1, r4, lsl #21
   11d1c:	andeq	r6, r1, ip, lsl #21
   11d20:	muleq	r1, r4, sl
   11d24:	andeq	r8, r2, ip, lsr #3
   11d28:	muleq	r1, ip, sl
   11d2c:	andeq	r6, r1, r8, lsr #21
   11d30:	andeq	r6, r1, r0, asr fp
   11d34:	andeq	r6, r1, ip, asr fp
   11d38:	andeq	r6, r1, r8, ror #17
   11d3c:			; <UNDEFINED> instruction: 0x00016ab4
   11d40:	andeq	r8, r2, r0, ror r1
   11d44:	andeq	r6, r1, r8, lsl #22
   11d48:	strdeq	r6, [r1], -r0
   11d4c:	andeq	r6, r1, r4, lsl #20
   11d50:	andeq	r6, r1, r4, lsl #17
   11d54:	andeq	r6, r1, r0, lsr r9
   11d58:	andeq	r6, r1, ip, asr r9
   11d5c:	andeq	r6, r1, r4, lsr sl
   11d60:	mov	fp, #0
   11d64:	mov	lr, #0
   11d68:	pop	{r1}		; (ldr r1, [sp], #4)
   11d6c:	mov	r2, sp
   11d70:	push	{r2}		; (str r2, [sp, #-4]!)
   11d74:	push	{r0}		; (str r0, [sp, #-4]!)
   11d78:	ldr	ip, [pc, #16]	; 11d90 <__assert_fail@plt+0xb7c>
   11d7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11d80:	ldr	r0, [pc, #12]	; 11d94 <__assert_fail@plt+0xb80>
   11d84:	ldr	r3, [pc, #12]	; 11d98 <__assert_fail@plt+0xb84>
   11d88:	bl	110ac <__libc_start_main@plt>
   11d8c:	bl	111f0 <abort@plt>
   11d90:	andeq	r6, r1, r0, lsl r3
   11d94:	andeq	r1, r1, r0, lsr #4
   11d98:			; <UNDEFINED> instruction: 0x000162b0
   11d9c:	ldr	r3, [pc, #20]	; 11db8 <__assert_fail@plt+0xba4>
   11da0:	ldr	r2, [pc, #20]	; 11dbc <__assert_fail@plt+0xba8>
   11da4:	add	r3, pc, r3
   11da8:	ldr	r2, [r3, r2]
   11dac:	cmp	r2, #0
   11db0:	bxeq	lr
   11db4:	b	110c4 <__gmon_start__@plt>
   11db8:	andeq	r6, r1, r4, asr r2
   11dbc:	andeq	r0, r0, r8, lsl #2
   11dc0:	ldr	r0, [pc, #24]	; 11de0 <__assert_fail@plt+0xbcc>
   11dc4:	ldr	r3, [pc, #24]	; 11de4 <__assert_fail@plt+0xbd0>
   11dc8:	cmp	r3, r0
   11dcc:	bxeq	lr
   11dd0:	ldr	r3, [pc, #16]	; 11de8 <__assert_fail@plt+0xbd4>
   11dd4:	cmp	r3, #0
   11dd8:	bxeq	lr
   11ddc:	bx	r3
   11de0:	andeq	r8, r2, r0, ror #2
   11de4:	andeq	r8, r2, r0, ror #2
   11de8:	andeq	r0, r0, r0
   11dec:	ldr	r0, [pc, #36]	; 11e18 <__assert_fail@plt+0xc04>
   11df0:	ldr	r1, [pc, #36]	; 11e1c <__assert_fail@plt+0xc08>
   11df4:	sub	r1, r1, r0
   11df8:	asr	r1, r1, #2
   11dfc:	add	r1, r1, r1, lsr #31
   11e00:	asrs	r1, r1, #1
   11e04:	bxeq	lr
   11e08:	ldr	r3, [pc, #16]	; 11e20 <__assert_fail@plt+0xc0c>
   11e0c:	cmp	r3, #0
   11e10:	bxeq	lr
   11e14:	bx	r3
   11e18:	andeq	r8, r2, r0, ror #2
   11e1c:	andeq	r8, r2, r0, ror #2
   11e20:	andeq	r0, r0, r0
   11e24:	push	{r4, lr}
   11e28:	ldr	r4, [pc, #24]	; 11e48 <__assert_fail@plt+0xc34>
   11e2c:	ldrb	r3, [r4]
   11e30:	cmp	r3, #0
   11e34:	popne	{r4, pc}
   11e38:	bl	11dc0 <__assert_fail@plt+0xbac>
   11e3c:	mov	r3, #1
   11e40:	strb	r3, [r4]
   11e44:	pop	{r4, pc}
   11e48:	andeq	r8, r2, r8, ror r1
   11e4c:	b	11dec <__assert_fail@plt+0xbd8>
   11e50:	ldr	r3, [pc, #696]	; 12110 <__assert_fail@plt+0xefc>
   11e54:	push	{r7, lr}
   11e58:	sub	sp, sp, #64	; 0x40
   11e5c:	ldr	r3, [r3]
   11e60:	subs	r4, r0, #0
   11e64:	str	r3, [sp, #60]	; 0x3c
   11e68:	beq	11ea4 <__assert_fail@plt+0xc90>
   11e6c:	ldr	r3, [pc, #672]	; 12114 <__assert_fail@plt+0xf00>
   11e70:	mov	r2, #5
   11e74:	ldr	r1, [pc, #668]	; 12118 <__assert_fail@plt+0xf04>
   11e78:	mov	r0, #0
   11e7c:	ldr	r5, [r3]
   11e80:	bl	10fe0 <dcgettext@plt>
   11e84:	ldr	r3, [pc, #656]	; 1211c <__assert_fail@plt+0xf08>
   11e88:	mov	r1, #1
   11e8c:	ldr	r3, [r3]
   11e90:	mov	r2, r0
   11e94:	mov	r0, r5
   11e98:	bl	1116c <__fprintf_chk@plt>
   11e9c:	mov	r0, r4
   11ea0:	bl	110e8 <exit@plt>
   11ea4:	mov	r2, #5
   11ea8:	ldr	r1, [pc, #624]	; 12120 <__assert_fail@plt+0xf0c>
   11eac:	bl	10fe0 <dcgettext@plt>
   11eb0:	ldr	r3, [pc, #612]	; 1211c <__assert_fail@plt+0xf08>
   11eb4:	ldr	r5, [pc, #616]	; 12124 <__assert_fail@plt+0xf10>
   11eb8:	ldr	r2, [r3]
   11ebc:	mov	r1, r0
   11ec0:	mov	r0, #1
   11ec4:	bl	11154 <__printf_chk@plt>
   11ec8:	mov	r2, #5
   11ecc:	ldr	r1, [pc, #596]	; 12128 <__assert_fail@plt+0xf14>
   11ed0:	mov	r0, r4
   11ed4:	bl	10fe0 <dcgettext@plt>
   11ed8:	ldr	r1, [r5]
   11edc:	bl	10f44 <fputs_unlocked@plt>
   11ee0:	mov	r2, #5
   11ee4:	ldr	r1, [pc, #576]	; 1212c <__assert_fail@plt+0xf18>
   11ee8:	mov	r0, r4
   11eec:	bl	10fe0 <dcgettext@plt>
   11ef0:	ldr	r1, [r5]
   11ef4:	bl	10f44 <fputs_unlocked@plt>
   11ef8:	mov	r2, #5
   11efc:	ldr	r1, [pc, #556]	; 12130 <__assert_fail@plt+0xf1c>
   11f00:	mov	r0, r4
   11f04:	bl	10fe0 <dcgettext@plt>
   11f08:	ldr	r1, [r5]
   11f0c:	bl	10f44 <fputs_unlocked@plt>
   11f10:	mov	r2, #5
   11f14:	ldr	r1, [pc, #536]	; 12134 <__assert_fail@plt+0xf20>
   11f18:	mov	r0, r4
   11f1c:	bl	10fe0 <dcgettext@plt>
   11f20:	ldr	r1, [r5]
   11f24:	bl	10f44 <fputs_unlocked@plt>
   11f28:	mov	r2, #5
   11f2c:	ldr	r1, [pc, #516]	; 12138 <__assert_fail@plt+0xf24>
   11f30:	mov	r0, r4
   11f34:	bl	10fe0 <dcgettext@plt>
   11f38:	ldr	r1, [r5]
   11f3c:	bl	10f44 <fputs_unlocked@plt>
   11f40:	ldr	lr, [pc, #500]	; 1213c <__assert_fail@plt+0xf28>
   11f44:	add	ip, sp, #4
   11f48:	ldm	lr!, {r0, r1, r2, r3}
   11f4c:	stmia	ip!, {r0, r1, r2, r3}
   11f50:	ldm	lr!, {r0, r1, r2, r3}
   11f54:	ldr	r6, [sp, #4]
   11f58:	stmia	ip!, {r0, r1, r2, r3}
   11f5c:	cmp	r6, #0
   11f60:	ldm	lr!, {r0, r1, r2, r3}
   11f64:	addeq	r5, sp, #4
   11f68:	stmia	ip!, {r0, r1, r2, r3}
   11f6c:	ldm	lr, {r0, r1}
   11f70:	stm	ip, {r0, r1}
   11f74:	beq	11fa4 <__assert_fail@plt+0xd90>
   11f78:	ldr	r7, [pc, #448]	; 12140 <__assert_fail@plt+0xf2c>
   11f7c:	add	r5, sp, #4
   11f80:	b	11f90 <__assert_fail@plt+0xd7c>
   11f84:	ldr	r6, [r5, #8]!
   11f88:	cmp	r6, #0
   11f8c:	beq	11fa4 <__assert_fail@plt+0xd90>
   11f90:	mov	r1, r6
   11f94:	mov	r0, r7
   11f98:	bl	10f74 <strcmp@plt>
   11f9c:	cmp	r0, #0
   11fa0:	bne	11f84 <__assert_fail@plt+0xd70>
   11fa4:	ldr	r5, [r5, #4]
   11fa8:	mov	r2, #5
   11fac:	cmp	r5, #0
   11fb0:	ldr	r1, [pc, #396]	; 12144 <__assert_fail@plt+0xf30>
   11fb4:	beq	1205c <__assert_fail@plt+0xe48>
   11fb8:	mov	r0, #0
   11fbc:	bl	10fe0 <dcgettext@plt>
   11fc0:	ldr	r3, [pc, #384]	; 12148 <__assert_fail@plt+0xf34>
   11fc4:	ldr	r2, [pc, #384]	; 1214c <__assert_fail@plt+0xf38>
   11fc8:	mov	r1, r0
   11fcc:	mov	r0, #1
   11fd0:	bl	11154 <__printf_chk@plt>
   11fd4:	mov	r1, #0
   11fd8:	mov	r0, #5
   11fdc:	bl	1119c <setlocale@plt>
   11fe0:	cmp	r0, #0
   11fe4:	ldreq	r6, [pc, #340]	; 12140 <__assert_fail@plt+0xf2c>
   11fe8:	beq	12004 <__assert_fail@plt+0xdf0>
   11fec:	mov	r2, #3
   11ff0:	ldr	r1, [pc, #344]	; 12150 <__assert_fail@plt+0xf3c>
   11ff4:	bl	111e4 <strncmp@plt>
   11ff8:	ldr	r6, [pc, #320]	; 12140 <__assert_fail@plt+0xf2c>
   11ffc:	cmp	r0, #0
   12000:	bne	120ec <__assert_fail@plt+0xed8>
   12004:	mov	r2, #5
   12008:	ldr	r1, [pc, #324]	; 12154 <__assert_fail@plt+0xf40>
   1200c:	mov	r0, #0
   12010:	bl	10fe0 <dcgettext@plt>
   12014:	ldr	r3, [pc, #292]	; 12140 <__assert_fail@plt+0xf2c>
   12018:	ldr	r2, [pc, #296]	; 12148 <__assert_fail@plt+0xf34>
   1201c:	mov	r1, r0
   12020:	mov	r0, #1
   12024:	bl	11154 <__printf_chk@plt>
   12028:	mov	r2, #5
   1202c:	ldr	r1, [pc, #292]	; 12158 <__assert_fail@plt+0xf44>
   12030:	mov	r0, #0
   12034:	bl	10fe0 <dcgettext@plt>
   12038:	ldr	r2, [pc, #284]	; 1215c <__assert_fail@plt+0xf48>
   1203c:	cmp	r5, r6
   12040:	ldr	r3, [pc, #280]	; 12160 <__assert_fail@plt+0xf4c>
   12044:	movne	r3, r2
   12048:	mov	r1, r0
   1204c:	mov	r2, r5
   12050:	mov	r0, #1
   12054:	bl	11154 <__printf_chk@plt>
   12058:	b	11e9c <__assert_fail@plt+0xc88>
   1205c:	mov	r0, r5
   12060:	bl	10fe0 <dcgettext@plt>
   12064:	ldr	r3, [pc, #220]	; 12148 <__assert_fail@plt+0xf34>
   12068:	ldr	r2, [pc, #220]	; 1214c <__assert_fail@plt+0xf38>
   1206c:	mov	r1, r0
   12070:	mov	r0, #1
   12074:	bl	11154 <__printf_chk@plt>
   12078:	mov	r1, r5
   1207c:	mov	r0, #5
   12080:	bl	1119c <setlocale@plt>
   12084:	cmp	r0, #0
   12088:	beq	120a0 <__assert_fail@plt+0xe8c>
   1208c:	mov	r2, #3
   12090:	ldr	r1, [pc, #184]	; 12150 <__assert_fail@plt+0xf3c>
   12094:	bl	111e4 <strncmp@plt>
   12098:	cmp	r0, #0
   1209c:	bne	120e4 <__assert_fail@plt+0xed0>
   120a0:	mov	r2, #5
   120a4:	ldr	r1, [pc, #168]	; 12154 <__assert_fail@plt+0xf40>
   120a8:	mov	r0, #0
   120ac:	bl	10fe0 <dcgettext@plt>
   120b0:	ldr	r3, [pc, #136]	; 12140 <__assert_fail@plt+0xf2c>
   120b4:	ldr	r2, [pc, #140]	; 12148 <__assert_fail@plt+0xf34>
   120b8:	mov	r5, r3
   120bc:	mov	r1, r0
   120c0:	mov	r0, #1
   120c4:	bl	11154 <__printf_chk@plt>
   120c8:	ldr	r1, [pc, #136]	; 12158 <__assert_fail@plt+0xf44>
   120cc:	mov	r2, #5
   120d0:	mov	r0, #0
   120d4:	bl	10fe0 <dcgettext@plt>
   120d8:	ldr	r3, [pc, #128]	; 12160 <__assert_fail@plt+0xf4c>
   120dc:	mov	r1, r0
   120e0:	b	1204c <__assert_fail@plt+0xe38>
   120e4:	ldr	r6, [pc, #84]	; 12140 <__assert_fail@plt+0xf2c>
   120e8:	mov	r5, r6
   120ec:	mov	r2, #5
   120f0:	ldr	r1, [pc, #108]	; 12164 <__assert_fail@plt+0xf50>
   120f4:	mov	r0, #0
   120f8:	bl	10fe0 <dcgettext@plt>
   120fc:	ldr	r2, [pc, #60]	; 12140 <__assert_fail@plt+0xf2c>
   12100:	mov	r1, r0
   12104:	mov	r0, #1
   12108:	bl	11154 <__printf_chk@plt>
   1210c:	b	12004 <__assert_fail@plt+0xdf0>
   12110:	andeq	r7, r2, r0, lsl #30
   12114:	andeq	r8, r2, r0, ror r1
   12118:	andeq	r6, r1, r4, lsl r4
   1211c:	andeq	r8, r2, r4, ror #3
   12120:	andeq	r6, r1, ip, lsr r4
   12124:	andeq	r8, r2, r4, ror r1
   12128:	andeq	r6, r1, ip, asr r4
   1212c:	andeq	r6, r1, r4, asr #9
   12130:	ldrdeq	r6, [r1], -r0
   12134:	andeq	r6, r1, r0, lsl #14
   12138:	andeq	r6, r1, r8, lsr r7
   1213c:	andeq	r6, r1, r8, lsr r3
   12140:	andeq	r6, r1, r0, lsl r4
   12144:	andeq	r6, r1, r0, lsl #15
   12148:	muleq	r1, r8, r7
   1214c:	andeq	r6, r1, r0, asr #15
   12150:	ldrdeq	r6, [r1], -r0
   12154:	andeq	r6, r1, ip, lsl r8
   12158:	andeq	r6, r1, ip, lsr r8
   1215c:	andeq	r7, r1, r8, ror r0
   12160:	andeq	r6, r1, r0, ror fp
   12164:	ldrdeq	r6, [r1], -r4
   12168:	push	{r4, r5, r6, lr}
   1216c:	subs	r4, r1, #0
   12170:	mov	r5, r0
   12174:	beq	1219c <__assert_fail@plt+0xf88>
   12178:	bl	111fc <getgrgid@plt>
   1217c:	subs	r6, r0, #0
   12180:	ldrne	r0, [r6]
   12184:	beq	121b4 <__assert_fail@plt+0xfa0>
   12188:	ldr	r3, [pc, #76]	; 121dc <__assert_fail@plt+0xfc8>
   1218c:	ldr	r1, [r3]
   12190:	bl	10f44 <fputs_unlocked@plt>
   12194:	mov	r0, r4
   12198:	pop	{r4, r5, r6, pc}
   1219c:	mov	r4, #1
   121a0:	mov	r0, r5
   121a4:	ldr	r2, [pc, #52]	; 121e0 <__assert_fail@plt+0xfcc>
   121a8:	mov	r1, #0
   121ac:	bl	124d8 <__assert_fail@plt+0x12c4>
   121b0:	b	12188 <__assert_fail@plt+0xf74>
   121b4:	mov	r2, #5
   121b8:	ldr	r1, [pc, #36]	; 121e4 <__assert_fail@plt+0xfd0>
   121bc:	bl	10fe0 <dcgettext@plt>
   121c0:	mov	r3, r5
   121c4:	mov	r1, r6
   121c8:	mov	r4, r6
   121cc:	mov	r2, r0
   121d0:	mov	r0, r6
   121d4:	bl	11088 <error@plt>
   121d8:	b	121a0 <__assert_fail@plt+0xf8c>
   121dc:	andeq	r8, r2, r4, ror r1
   121e0:	andeq	r8, r2, r4, asr #3
   121e4:	andeq	r6, r1, ip, lsl #24
   121e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121ec:	subs	r4, r0, #0
   121f0:	ldr	r0, [pc, #472]	; 123d0 <__assert_fail@plt+0x11bc>
   121f4:	sub	sp, sp, #20
   121f8:	mov	r5, r2
   121fc:	ldr	ip, [r0]
   12200:	mov	r6, r3
   12204:	str	ip, [sp, #12]
   12208:	ldrb	r8, [sp, #56]	; 0x38
   1220c:	ldrb	r9, [sp, #60]	; 0x3c
   12210:	moveq	sl, r4
   12214:	moveq	r7, #1
   12218:	beq	12230 <__assert_fail@plt+0x101c>
   1221c:	mov	r0, r1
   12220:	bl	10f80 <getpwuid@plt>
   12224:	adds	r7, r0, #0
   12228:	mov	sl, r0
   1222c:	movne	r7, #1
   12230:	mov	r1, r8
   12234:	mov	r0, r5
   12238:	bl	12168 <__assert_fail@plt+0xf54>
   1223c:	cmp	r0, #0
   12240:	moveq	r7, #0
   12244:	cmp	r5, r6
   12248:	beq	12284 <__assert_fail@plt+0x1070>
   1224c:	ldr	r3, [pc, #384]	; 123d4 <__assert_fail@plt+0x11c0>
   12250:	ldr	r0, [r3]
   12254:	ldr	r3, [r0, #20]
   12258:	ldr	r2, [r0, #24]
   1225c:	cmp	r3, r2
   12260:	addcc	r2, r3, #1
   12264:	strcc	r2, [r0, #20]
   12268:	strbcc	r9, [r3]
   1226c:	bcs	123c0 <__assert_fail@plt+0x11ac>
   12270:	mov	r1, r8
   12274:	mov	r0, r6
   12278:	bl	12168 <__assert_fail@plt+0xf54>
   1227c:	cmp	r0, #0
   12280:	moveq	r7, #0
   12284:	cmp	sl, #0
   12288:	moveq	r1, r6
   1228c:	ldrne	r1, [sl, #12]
   12290:	add	r2, sp, #8
   12294:	mov	r0, r4
   12298:	bl	15360 <__assert_fail@plt+0x414c>
   1229c:	subs	fp, r0, #0
   122a0:	blt	12344 <__assert_fail@plt+0x1130>
   122a4:	ldr	r0, [sp, #8]
   122a8:	ldrne	sl, [pc, #292]	; 123d4 <__assert_fail@plt+0x11c0>
   122ac:	movne	r4, #0
   122b0:	bne	122c4 <__assert_fail@plt+0x10b0>
   122b4:	b	12320 <__assert_fail@plt+0x110c>
   122b8:	add	r4, r4, #1
   122bc:	cmp	fp, r4
   122c0:	beq	12320 <__assert_fail@plt+0x110c>
   122c4:	ldr	r1, [r0, r4, lsl #2]
   122c8:	lsl	r3, r4, #2
   122cc:	cmp	r1, r6
   122d0:	cmpne	r1, r5
   122d4:	beq	122b8 <__assert_fail@plt+0x10a4>
   122d8:	ldr	r0, [sl]
   122dc:	ldr	r1, [r0, #20]
   122e0:	ldr	ip, [r0, #24]
   122e4:	cmp	r1, ip
   122e8:	addcc	ip, r1, #1
   122ec:	strcc	ip, [r0, #20]
   122f0:	strbcc	r9, [r1]
   122f4:	bcs	1238c <__assert_fail@plt+0x1178>
   122f8:	ldr	r0, [sp, #8]
   122fc:	mov	r1, r8
   12300:	add	r4, r4, #1
   12304:	ldr	r0, [r0, r3]
   12308:	bl	12168 <__assert_fail@plt+0xf54>
   1230c:	subs	r3, r0, #0
   12310:	moveq	r7, r3
   12314:	cmp	fp, r4
   12318:	ldr	r0, [sp, #8]
   1231c:	bne	122c4 <__assert_fail@plt+0x10b0>
   12320:	bl	10fa4 <free@plt>
   12324:	ldr	r3, [pc, #164]	; 123d0 <__assert_fail@plt+0x11bc>
   12328:	ldr	r2, [sp, #12]
   1232c:	mov	r0, r7
   12330:	ldr	r3, [r3]
   12334:	cmp	r2, r3
   12338:	bne	123cc <__assert_fail@plt+0x11b8>
   1233c:	add	sp, sp, #20
   12340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12344:	bl	11118 <__errno_location@plt>
   12348:	cmp	r4, #0
   1234c:	mov	r2, #5
   12350:	ldr	r5, [r0]
   12354:	beq	123a0 <__assert_fail@plt+0x118c>
   12358:	ldr	r1, [pc, #120]	; 123d8 <__assert_fail@plt+0x11c4>
   1235c:	mov	r0, #0
   12360:	bl	10fe0 <dcgettext@plt>
   12364:	mov	r6, r0
   12368:	mov	r0, r4
   1236c:	bl	147a0 <__assert_fail@plt+0x358c>
   12370:	mov	r2, r6
   12374:	mov	r1, r5
   12378:	mov	r3, r0
   1237c:	mov	r0, #0
   12380:	bl	11088 <error@plt>
   12384:	mov	r7, #0
   12388:	b	12324 <__assert_fail@plt+0x1110>
   1238c:	mov	r1, r9
   12390:	str	r3, [sp, #4]
   12394:	bl	11190 <__overflow@plt>
   12398:	ldr	r3, [sp, #4]
   1239c:	b	122f8 <__assert_fail@plt+0x10e4>
   123a0:	ldr	r1, [pc, #52]	; 123dc <__assert_fail@plt+0x11c8>
   123a4:	mov	r0, r4
   123a8:	bl	10fe0 <dcgettext@plt>
   123ac:	mov	r1, r5
   123b0:	mov	r2, r0
   123b4:	mov	r0, r4
   123b8:	bl	11088 <error@plt>
   123bc:	b	12384 <__assert_fail@plt+0x1170>
   123c0:	mov	r1, r9
   123c4:	bl	11190 <__overflow@plt>
   123c8:	b	12270 <__assert_fail@plt+0x105c>
   123cc:	bl	10fec <__stack_chk_fail@plt>
   123d0:	andeq	r7, r2, r0, lsl #30
   123d4:	andeq	r8, r2, r4, ror r1
   123d8:			; <UNDEFINED> instruction: 0x00016ab4
   123dc:	ldrdeq	r6, [r1], -r8
   123e0:	ldr	r3, [pc, #4]	; 123ec <__assert_fail@plt+0x11d8>
   123e4:	str	r0, [r3]
   123e8:	bx	lr
   123ec:	ldrdeq	r8, [r2], -ip
   123f0:	ldr	r3, [pc, #4]	; 123fc <__assert_fail@plt+0x11e8>
   123f4:	strb	r0, [r3, #4]
   123f8:	bx	lr
   123fc:	ldrdeq	r8, [r2], -ip
   12400:	ldr	r3, [pc, #180]	; 124bc <__assert_fail@plt+0x12a8>
   12404:	push	{r4, r5, r6, lr}
   12408:	sub	sp, sp, #8
   1240c:	ldr	r0, [r3]
   12410:	bl	15a5c <__assert_fail@plt+0x4848>
   12414:	cmp	r0, #0
   12418:	beq	12440 <__assert_fail@plt+0x122c>
   1241c:	bl	11118 <__errno_location@plt>
   12420:	ldr	r5, [pc, #152]	; 124c0 <__assert_fail@plt+0x12ac>
   12424:	ldrb	r3, [r5, #4]
   12428:	cmp	r3, #0
   1242c:	mov	r4, r0
   12430:	beq	1245c <__assert_fail@plt+0x1248>
   12434:	ldr	r3, [r0]
   12438:	cmp	r3, #32
   1243c:	bne	1245c <__assert_fail@plt+0x1248>
   12440:	ldr	r3, [pc, #124]	; 124c4 <__assert_fail@plt+0x12b0>
   12444:	ldr	r0, [r3]
   12448:	bl	15a5c <__assert_fail@plt+0x4848>
   1244c:	cmp	r0, #0
   12450:	bne	1249c <__assert_fail@plt+0x1288>
   12454:	add	sp, sp, #8
   12458:	pop	{r4, r5, r6, pc}
   1245c:	mov	r2, #5
   12460:	ldr	r1, [pc, #96]	; 124c8 <__assert_fail@plt+0x12b4>
   12464:	mov	r0, #0
   12468:	bl	10fe0 <dcgettext@plt>
   1246c:	mov	r6, r0
   12470:	ldr	r0, [r5]
   12474:	cmp	r0, #0
   12478:	beq	124a8 <__assert_fail@plt+0x1294>
   1247c:	ldr	r4, [r4]
   12480:	bl	145c0 <__assert_fail@plt+0x33ac>
   12484:	mov	r1, r4
   12488:	str	r6, [sp]
   1248c:	ldr	r2, [pc, #56]	; 124cc <__assert_fail@plt+0x12b8>
   12490:	mov	r3, r0
   12494:	mov	r0, #0
   12498:	bl	11088 <error@plt>
   1249c:	ldr	r3, [pc, #44]	; 124d0 <__assert_fail@plt+0x12bc>
   124a0:	ldr	r0, [r3]
   124a4:	bl	10fb0 <_exit@plt>
   124a8:	mov	r3, r6
   124ac:	ldr	r1, [r4]
   124b0:	ldr	r2, [pc, #28]	; 124d4 <__assert_fail@plt+0x12c0>
   124b4:	bl	11088 <error@plt>
   124b8:	b	1249c <__assert_fail@plt+0x1288>
   124bc:	andeq	r8, r2, r4, ror r1
   124c0:	ldrdeq	r8, [r2], -ip
   124c4:	andeq	r8, r2, r0, ror r1
   124c8:	andeq	r6, r1, r8, lsr ip
   124cc:	andeq	r6, r1, r4, asr #24
   124d0:	andeq	r8, r2, ip, lsl r1
   124d4:	andeq	r6, r1, r8, asr #24
   124d8:	push	{r4, r5, r6, lr}
   124dc:	mov	r4, r0
   124e0:	mov	r5, r1
   124e4:	add	r6, r2, #20
   124e8:	mov	r3, #0
   124ec:	strb	r3, [r2, #20]
   124f0:	mov	r0, r4
   124f4:	mov	r1, r5
   124f8:	mov	r2, #10
   124fc:	mov	r3, #0
   12500:	bl	1613c <__assert_fail@plt+0x4f28>
   12504:	mov	r0, r4
   12508:	mov	r1, r5
   1250c:	mov	r3, #0
   12510:	add	r2, r2, #48	; 0x30
   12514:	strb	r2, [r6, #-1]!
   12518:	mov	r2, #10
   1251c:	bl	1613c <__assert_fail@plt+0x4f28>
   12520:	cmp	r5, #0
   12524:	cmpeq	r4, #9
   12528:	mov	r5, r1
   1252c:	mov	r4, r0
   12530:	bhi	124f0 <__assert_fail@plt+0x12dc>
   12534:	mov	r0, r6
   12538:	pop	{r4, r5, r6, pc}
   1253c:	push	{r4, r5, r6, lr}
   12540:	subs	r4, r0, #0
   12544:	beq	125b8 <__assert_fail@plt+0x13a4>
   12548:	mov	r1, #47	; 0x2f
   1254c:	bl	111b4 <strrchr@plt>
   12550:	subs	r5, r0, #0
   12554:	beq	125a4 <__assert_fail@plt+0x1390>
   12558:	add	r6, r5, #1
   1255c:	sub	r3, r6, r4
   12560:	cmp	r3, #6
   12564:	ble	125a4 <__assert_fail@plt+0x1390>
   12568:	mov	r2, #7
   1256c:	ldr	r1, [pc, #96]	; 125d4 <__assert_fail@plt+0x13c0>
   12570:	sub	r0, r5, #6
   12574:	bl	111e4 <strncmp@plt>
   12578:	cmp	r0, #0
   1257c:	bne	125a4 <__assert_fail@plt+0x1390>
   12580:	mov	r2, #3
   12584:	ldr	r1, [pc, #76]	; 125d8 <__assert_fail@plt+0x13c4>
   12588:	mov	r0, r6
   1258c:	bl	111e4 <strncmp@plt>
   12590:	cmp	r0, #0
   12594:	movne	r4, r6
   12598:	ldreq	r3, [pc, #60]	; 125dc <__assert_fail@plt+0x13c8>
   1259c:	addeq	r4, r5, #4
   125a0:	streq	r4, [r3]
   125a4:	ldr	r2, [pc, #52]	; 125e0 <__assert_fail@plt+0x13cc>
   125a8:	ldr	r3, [pc, #52]	; 125e4 <__assert_fail@plt+0x13d0>
   125ac:	str	r4, [r2]
   125b0:	str	r4, [r3]
   125b4:	pop	{r4, r5, r6, pc}
   125b8:	ldr	r3, [pc, #40]	; 125e8 <__assert_fail@plt+0x13d4>
   125bc:	mov	r2, #55	; 0x37
   125c0:	mov	r1, #1
   125c4:	ldr	r3, [r3]
   125c8:	ldr	r0, [pc, #28]	; 125ec <__assert_fail@plt+0x13d8>
   125cc:	bl	11040 <fwrite@plt>
   125d0:	bl	111f0 <abort@plt>
   125d4:	andeq	r6, r1, r4, lsl #25
   125d8:	andeq	r6, r1, ip, lsl #25
   125dc:	andeq	r8, r2, r0, ror #2
   125e0:	andeq	r8, r2, r4, ror #3
   125e4:	andeq	r8, r2, r4, ror #2
   125e8:	andeq	r8, r2, r0, ror r1
   125ec:	andeq	r6, r1, ip, asr #24
   125f0:	push	{r4, lr}
   125f4:	mov	r2, #48	; 0x30
   125f8:	mov	r4, r1
   125fc:	mov	r1, #0
   12600:	bl	11148 <memset@plt>
   12604:	cmp	r4, #10
   12608:	beq	12614 <__assert_fail@plt+0x1400>
   1260c:	str	r4, [r0]
   12610:	pop	{r4, pc}
   12614:	bl	111f0 <abort@plt>
   12618:	push	{r4, r5, r6, lr}
   1261c:	mov	r2, #5
   12620:	mov	r5, r0
   12624:	mov	r6, r1
   12628:	mov	r1, r0
   1262c:	mov	r0, #0
   12630:	bl	10fe0 <dcgettext@plt>
   12634:	cmp	r5, r0
   12638:	mov	r4, r0
   1263c:	beq	12648 <__assert_fail@plt+0x1434>
   12640:	mov	r0, r4
   12644:	pop	{r4, r5, r6, pc}
   12648:	bl	15b1c <__assert_fail@plt+0x4908>
   1264c:	ldrb	r3, [r0]
   12650:	bic	r3, r3, #32
   12654:	cmp	r3, #85	; 0x55
   12658:	bne	126b8 <__assert_fail@plt+0x14a4>
   1265c:	ldrb	r3, [r0, #1]
   12660:	bic	r3, r3, #32
   12664:	cmp	r3, #84	; 0x54
   12668:	bne	12730 <__assert_fail@plt+0x151c>
   1266c:	ldrb	r3, [r0, #2]
   12670:	bic	r3, r3, #32
   12674:	cmp	r3, #70	; 0x46
   12678:	bne	12730 <__assert_fail@plt+0x151c>
   1267c:	ldrb	r3, [r0, #3]
   12680:	cmp	r3, #45	; 0x2d
   12684:	bne	12730 <__assert_fail@plt+0x151c>
   12688:	ldrb	r3, [r0, #4]
   1268c:	cmp	r3, #56	; 0x38
   12690:	bne	12730 <__assert_fail@plt+0x151c>
   12694:	ldrb	r3, [r0, #5]
   12698:	cmp	r3, #0
   1269c:	bne	12730 <__assert_fail@plt+0x151c>
   126a0:	ldrb	r2, [r4]
   126a4:	ldr	r3, [pc, #156]	; 12748 <__assert_fail@plt+0x1534>
   126a8:	ldr	r4, [pc, #156]	; 1274c <__assert_fail@plt+0x1538>
   126ac:	cmp	r2, #96	; 0x60
   126b0:	movne	r4, r3
   126b4:	b	12640 <__assert_fail@plt+0x142c>
   126b8:	cmp	r3, #71	; 0x47
   126bc:	bne	12730 <__assert_fail@plt+0x151c>
   126c0:	ldrb	r3, [r0, #1]
   126c4:	bic	r3, r3, #32
   126c8:	cmp	r3, #66	; 0x42
   126cc:	bne	12730 <__assert_fail@plt+0x151c>
   126d0:	ldrb	r3, [r0, #2]
   126d4:	cmp	r3, #49	; 0x31
   126d8:	bne	12730 <__assert_fail@plt+0x151c>
   126dc:	ldrb	r3, [r0, #3]
   126e0:	cmp	r3, #56	; 0x38
   126e4:	bne	12730 <__assert_fail@plt+0x151c>
   126e8:	ldrb	r3, [r0, #4]
   126ec:	cmp	r3, #48	; 0x30
   126f0:	bne	12730 <__assert_fail@plt+0x151c>
   126f4:	ldrb	r3, [r0, #5]
   126f8:	cmp	r3, #51	; 0x33
   126fc:	bne	12730 <__assert_fail@plt+0x151c>
   12700:	ldrb	r3, [r0, #6]
   12704:	cmp	r3, #48	; 0x30
   12708:	bne	12730 <__assert_fail@plt+0x151c>
   1270c:	ldrb	r3, [r0, #7]
   12710:	cmp	r3, #0
   12714:	bne	12730 <__assert_fail@plt+0x151c>
   12718:	ldrb	r2, [r4]
   1271c:	ldr	r3, [pc, #44]	; 12750 <__assert_fail@plt+0x153c>
   12720:	ldr	r4, [pc, #44]	; 12754 <__assert_fail@plt+0x1540>
   12724:	cmp	r2, #96	; 0x60
   12728:	movne	r4, r3
   1272c:	b	12640 <__assert_fail@plt+0x142c>
   12730:	ldr	r3, [pc, #32]	; 12758 <__assert_fail@plt+0x1544>
   12734:	ldr	r4, [pc, #32]	; 1275c <__assert_fail@plt+0x1548>
   12738:	cmp	r6, #9
   1273c:	movne	r4, r3
   12740:	mov	r0, r4
   12744:	pop	{r4, r5, r6, pc}
   12748:	andeq	r6, r1, r8, ror #25
   1274c:	strdeq	r6, [r1], -r4
   12750:	andeq	r6, r1, ip, ror #25
   12754:	strdeq	r6, [r1], -r0
   12758:	strdeq	r6, [r1], -r8
   1275c:	andeq	r6, r1, r4, ror #25
   12760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12764:	sub	sp, sp, #124	; 0x7c
   12768:	ldr	ip, [pc, #3576]	; 13568 <__assert_fail@plt+0x2354>
   1276c:	str	r3, [sp, #24]
   12770:	ldr	r3, [sp, #168]	; 0xa8
   12774:	ldr	ip, [ip]
   12778:	str	r3, [sp, #56]	; 0x38
   1277c:	ldr	r3, [sp, #172]	; 0xac
   12780:	ldr	r8, [sp, #160]	; 0xa0
   12784:	str	r3, [sp, #80]	; 0x50
   12788:	ldr	r3, [sp, #176]	; 0xb0
   1278c:	mov	fp, r0
   12790:	str	r3, [sp, #76]	; 0x4c
   12794:	mov	sl, r1
   12798:	str	r2, [sp, #36]	; 0x24
   1279c:	str	ip, [sp, #116]	; 0x74
   127a0:	bl	11058 <__ctype_get_mb_cur_max@plt>
   127a4:	ldr	r3, [sp, #164]	; 0xa4
   127a8:	ands	r4, r3, #2
   127ac:	movne	r3, #1
   127b0:	moveq	r3, #0
   127b4:	str	r3, [sp, #32]
   127b8:	str	r0, [sp, #64]	; 0x40
   127bc:	cmp	r8, #10
   127c0:	ldrls	pc, [pc, r8, lsl #2]
   127c4:	b	13f74 <__assert_fail@plt+0x2d60>
   127c8:			; <UNDEFINED> instruction: 0x00012bbc
   127cc:	andeq	r2, r1, r4, asr ip
   127d0:	andeq	r3, r1, r4, asr r2
   127d4:	andeq	r2, r1, r4, ror ip
   127d8:	andeq	r2, r1, r8, lsr #22
   127dc:	andeq	r2, r1, r0, ror fp
   127e0:	andeq	r2, r1, ip, ror #23
   127e4:	andeq	r2, r1, r4, lsr #24
   127e8:	strdeq	r2, [r1], -r4
   127ec:	strdeq	r2, [r1], -r4
   127f0:	strdeq	r2, [r1], -r4
   127f4:	cmp	r8, #10
   127f8:	beq	1281c <__assert_fail@plt+0x1608>
   127fc:	mov	r1, r8
   12800:	ldr	r0, [pc, #3428]	; 1356c <__assert_fail@plt+0x2358>
   12804:	bl	12618 <__assert_fail@plt+0x1404>
   12808:	mov	r1, r8
   1280c:	str	r0, [sp, #80]	; 0x50
   12810:	ldr	r0, [pc, #3420]	; 13574 <__assert_fail@plt+0x2360>
   12814:	bl	12618 <__assert_fail@plt+0x1404>
   12818:	str	r0, [sp, #76]	; 0x4c
   1281c:	cmp	r4, #0
   12820:	movne	r4, #0
   12824:	beq	13c34 <__assert_fail@plt+0x2a20>
   12828:	ldr	r7, [sp, #76]	; 0x4c
   1282c:	mov	r5, #0
   12830:	mov	r6, #1
   12834:	mov	r0, r7
   12838:	str	r6, [sp, #40]	; 0x28
   1283c:	str	r5, [sp, #68]	; 0x44
   12840:	bl	11100 <strlen@plt>
   12844:	str	r6, [sp, #28]
   12848:	str	r5, [sp, #44]	; 0x2c
   1284c:	str	r5, [sp, #72]	; 0x48
   12850:	str	r7, [sp, #60]	; 0x3c
   12854:	str	r0, [sp, #52]	; 0x34
   12858:	str	r8, [sp, #160]	; 0xa0
   1285c:	mov	r8, fp
   12860:	ldr	fp, [sp, #160]	; 0xa0
   12864:	mov	r9, #0
   12868:	ldr	r3, [sp, #24]
   1286c:	cmn	r3, #1
   12870:	beq	12dd8 <__assert_fail@plt+0x1bc4>
   12874:	ldr	r3, [sp, #24]
   12878:	subs	r6, r3, r9
   1287c:	movne	r6, #1
   12880:	cmp	r6, #0
   12884:	beq	12df0 <__assert_fail@plt+0x1bdc>
   12888:	ldr	r7, [sp, #28]
   1288c:	ldr	r0, [sp, #36]	; 0x24
   12890:	cmp	fp, #2
   12894:	moveq	r7, #0
   12898:	andne	r7, r7, #1
   1289c:	add	r3, r0, r9
   128a0:	cmp	r7, #0
   128a4:	str	r3, [sp, #48]	; 0x30
   128a8:	beq	13294 <__assert_fail@plt+0x2080>
   128ac:	ldr	r2, [sp, #52]	; 0x34
   128b0:	cmp	r2, #0
   128b4:	beq	13578 <__assert_fail@plt+0x2364>
   128b8:	ldr	r1, [sp, #24]
   128bc:	cmp	r2, #1
   128c0:	mov	r3, r2
   128c4:	movls	r3, #0
   128c8:	movhi	r3, #1
   128cc:	cmn	r1, #1
   128d0:	movne	r3, #0
   128d4:	cmp	r3, #0
   128d8:	add	r5, r9, r2
   128dc:	beq	128e8 <__assert_fail@plt+0x16d4>
   128e0:	bl	11100 <strlen@plt>
   128e4:	str	r0, [sp, #24]
   128e8:	ldr	r3, [sp, #24]
   128ec:	cmp	r5, r3
   128f0:	bhi	13578 <__assert_fail@plt+0x2364>
   128f4:	ldr	r2, [sp, #52]	; 0x34
   128f8:	ldr	r1, [sp, #60]	; 0x3c
   128fc:	ldr	r0, [sp, #48]	; 0x30
   12900:	bl	10fd4 <memcmp@plt>
   12904:	cmp	r0, #0
   12908:	bne	13578 <__assert_fail@plt+0x2364>
   1290c:	ldr	r3, [sp, #32]
   12910:	cmp	r3, #0
   12914:	bne	13e34 <__assert_fail@plt+0x2c20>
   12918:	ldr	r3, [sp, #48]	; 0x30
   1291c:	ldrb	r5, [r3]
   12920:	cmp	r5, #126	; 0x7e
   12924:	ldrls	pc, [pc, r5, lsl #2]
   12928:	b	131f8 <__assert_fail@plt+0x1fe4>
   1292c:	andeq	r3, r1, r4, ror #1
   12930:	strdeq	r3, [r1], -r8
   12934:	strdeq	r3, [r1], -r8
   12938:	strdeq	r3, [r1], -r8
   1293c:	strdeq	r3, [r1], -r8
   12940:	strdeq	r3, [r1], -r8
   12944:	strdeq	r3, [r1], -r8
   12948:			; <UNDEFINED> instruction: 0x000131b0
   1294c:	andeq	r3, r1, r0, lsr #3
   12950:	andeq	r3, r1, r0, lsr #1
   12954:	andeq	r3, r1, r8, rrx
   12958:	andeq	r3, r1, r0, asr #1
   1295c:	andeq	r3, r1, r8, lsr #1
   12960:	ldrdeq	r2, [r1], -r8
   12964:	strdeq	r3, [r1], -r8
   12968:	strdeq	r3, [r1], -r8
   1296c:	strdeq	r3, [r1], -r8
   12970:	strdeq	r3, [r1], -r8
   12974:	strdeq	r3, [r1], -r8
   12978:	strdeq	r3, [r1], -r8
   1297c:	strdeq	r3, [r1], -r8
   12980:	strdeq	r3, [r1], -r8
   12984:	strdeq	r3, [r1], -r8
   12988:	strdeq	r3, [r1], -r8
   1298c:	strdeq	r3, [r1], -r8
   12990:	strdeq	r3, [r1], -r8
   12994:	strdeq	r3, [r1], -r8
   12998:	strdeq	r3, [r1], -r8
   1299c:	strdeq	r3, [r1], -r8
   129a0:	strdeq	r3, [r1], -r8
   129a4:	strdeq	r3, [r1], -r8
   129a8:	strdeq	r3, [r1], -r8
   129ac:			; <UNDEFINED> instruction: 0x000131b8
   129b0:	andeq	r3, r1, ip, asr #1
   129b4:	andeq	r3, r1, ip, asr #1
   129b8:	ldrdeq	r3, [r1], -r0
   129bc:	andeq	r3, r1, ip, asr #1
   129c0:	andeq	r3, r1, ip, ror #3
   129c4:	andeq	r3, r1, ip, asr #1
   129c8:	andeq	r2, r1, ip, lsl #30
   129cc:	andeq	r3, r1, ip, asr #1
   129d0:	andeq	r3, r1, ip, asr #1
   129d4:	andeq	r3, r1, ip, asr #1
   129d8:	andeq	r3, r1, ip, ror #3
   129dc:	andeq	r3, r1, ip, ror #3
   129e0:	andeq	r3, r1, ip, ror #3
   129e4:	andeq	r3, r1, ip, ror #3
   129e8:	andeq	r3, r1, ip, ror #3
   129ec:	andeq	r3, r1, ip, ror #3
   129f0:	andeq	r3, r1, ip, ror #3
   129f4:	andeq	r3, r1, ip, ror #3
   129f8:	andeq	r3, r1, ip, ror #3
   129fc:	andeq	r3, r1, ip, ror #3
   12a00:	andeq	r3, r1, ip, ror #3
   12a04:	andeq	r3, r1, ip, ror #3
   12a08:	andeq	r3, r1, ip, ror #3
   12a0c:	andeq	r3, r1, ip, ror #3
   12a10:	andeq	r3, r1, ip, ror #3
   12a14:	andeq	r3, r1, ip, ror #3
   12a18:	andeq	r3, r1, ip, asr #1
   12a1c:	andeq	r3, r1, ip, asr #1
   12a20:	andeq	r3, r1, ip, asr #1
   12a24:	andeq	r3, r1, ip, asr #1
   12a28:	andeq	r2, r1, r0, ror #29
   12a2c:	strdeq	r3, [r1], -r8
   12a30:	andeq	r3, r1, ip, ror #3
   12a34:	andeq	r3, r1, ip, ror #3
   12a38:	andeq	r3, r1, ip, ror #3
   12a3c:	andeq	r3, r1, ip, ror #3
   12a40:	andeq	r3, r1, ip, ror #3
   12a44:	andeq	r3, r1, ip, ror #3
   12a48:	andeq	r3, r1, ip, ror #3
   12a4c:	andeq	r3, r1, ip, ror #3
   12a50:	andeq	r3, r1, ip, ror #3
   12a54:	andeq	r3, r1, ip, ror #3
   12a58:	andeq	r3, r1, ip, ror #3
   12a5c:	andeq	r3, r1, ip, ror #3
   12a60:	andeq	r3, r1, ip, ror #3
   12a64:	andeq	r3, r1, ip, ror #3
   12a68:	andeq	r3, r1, ip, ror #3
   12a6c:	andeq	r3, r1, ip, ror #3
   12a70:	andeq	r3, r1, ip, ror #3
   12a74:	andeq	r3, r1, ip, ror #3
   12a78:	andeq	r3, r1, ip, ror #3
   12a7c:	andeq	r3, r1, ip, ror #3
   12a80:	andeq	r3, r1, ip, ror #3
   12a84:	andeq	r3, r1, ip, ror #3
   12a88:	andeq	r3, r1, ip, ror #3
   12a8c:	andeq	r3, r1, ip, ror #3
   12a90:	andeq	r3, r1, ip, ror #3
   12a94:	andeq	r3, r1, ip, ror #3
   12a98:	andeq	r3, r1, ip, asr #1
   12a9c:	muleq	r1, r8, lr
   12aa0:	andeq	r3, r1, ip, ror #3
   12aa4:	andeq	r3, r1, ip, asr #1
   12aa8:	andeq	r3, r1, ip, ror #3
   12aac:	andeq	r3, r1, ip, asr #1
   12ab0:	andeq	r3, r1, ip, ror #3
   12ab4:	andeq	r3, r1, ip, ror #3
   12ab8:	andeq	r3, r1, ip, ror #3
   12abc:	andeq	r3, r1, ip, ror #3
   12ac0:	andeq	r3, r1, ip, ror #3
   12ac4:	andeq	r3, r1, ip, ror #3
   12ac8:	andeq	r3, r1, ip, ror #3
   12acc:	andeq	r3, r1, ip, ror #3
   12ad0:	andeq	r3, r1, ip, ror #3
   12ad4:	andeq	r3, r1, ip, ror #3
   12ad8:	andeq	r3, r1, ip, ror #3
   12adc:	andeq	r3, r1, ip, ror #3
   12ae0:	andeq	r3, r1, ip, ror #3
   12ae4:	andeq	r3, r1, ip, ror #3
   12ae8:	andeq	r3, r1, ip, ror #3
   12aec:	andeq	r3, r1, ip, ror #3
   12af0:	andeq	r3, r1, ip, ror #3
   12af4:	andeq	r3, r1, ip, ror #3
   12af8:	andeq	r3, r1, ip, ror #3
   12afc:	andeq	r3, r1, ip, ror #3
   12b00:	andeq	r3, r1, ip, ror #3
   12b04:	andeq	r3, r1, ip, ror #3
   12b08:	andeq	r3, r1, ip, ror #3
   12b0c:	andeq	r3, r1, ip, ror #3
   12b10:	andeq	r3, r1, ip, ror #3
   12b14:	andeq	r3, r1, ip, ror #3
   12b18:			; <UNDEFINED> instruction: 0x00012cb0
   12b1c:	andeq	r3, r1, ip, asr #1
   12b20:			; <UNDEFINED> instruction: 0x00012cb0
   12b24:	ldrdeq	r3, [r1], -r0
   12b28:	cmp	r4, #0
   12b2c:	moveq	r3, #1
   12b30:	streq	r3, [sp, #28]
   12b34:	beq	13260 <__assert_fail@plt+0x204c>
   12b38:	mov	r3, #0
   12b3c:	mov	r4, r3
   12b40:	mov	r2, #1
   12b44:	str	r2, [sp, #40]	; 0x28
   12b48:	str	r3, [sp, #68]	; 0x44
   12b4c:	str	r2, [sp, #32]
   12b50:	str	r2, [sp, #52]	; 0x34
   12b54:	ldr	r3, [pc, #2584]	; 13574 <__assert_fail@plt+0x2360>
   12b58:	str	r4, [sp, #44]	; 0x2c
   12b5c:	str	r4, [sp, #72]	; 0x48
   12b60:	str	r4, [sp, #28]
   12b64:	str	r3, [sp, #60]	; 0x3c
   12b68:	mov	r8, #2
   12b6c:	b	12858 <__assert_fail@plt+0x1644>
   12b70:	cmp	r4, #0
   12b74:	bne	13e00 <__assert_fail@plt+0x2bec>
   12b78:	cmp	sl, #0
   12b7c:	beq	13bc0 <__assert_fail@plt+0x29ac>
   12b80:	mov	r3, #34	; 0x22
   12b84:	strb	r3, [fp]
   12b88:	ldr	r3, [pc, #2528]	; 13570 <__assert_fail@plt+0x235c>
   12b8c:	mov	r1, r4
   12b90:	mov	r2, #1
   12b94:	str	r4, [sp, #68]	; 0x44
   12b98:	str	r2, [sp, #40]	; 0x28
   12b9c:	mov	r4, r2
   12ba0:	str	r1, [sp, #44]	; 0x2c
   12ba4:	str	r1, [sp, #72]	; 0x48
   12ba8:	str	r1, [sp, #32]
   12bac:	str	r2, [sp, #28]
   12bb0:	str	r2, [sp, #52]	; 0x34
   12bb4:	str	r3, [sp, #60]	; 0x3c
   12bb8:	b	12858 <__assert_fail@plt+0x1644>
   12bbc:	mov	r3, #0
   12bc0:	str	r3, [sp, #68]	; 0x44
   12bc4:	str	r3, [sp, #44]	; 0x2c
   12bc8:	str	r3, [sp, #32]
   12bcc:	str	r3, [sp, #28]
   12bd0:	str	r3, [sp, #60]	; 0x3c
   12bd4:	mov	r3, #1
   12bd8:	str	r8, [sp, #72]	; 0x48
   12bdc:	str	r8, [sp, #52]	; 0x34
   12be0:	mov	r4, r8
   12be4:	str	r3, [sp, #40]	; 0x28
   12be8:	b	12858 <__assert_fail@plt+0x1644>
   12bec:	mov	r3, #1
   12bf0:	str	r3, [sp, #40]	; 0x28
   12bf4:	str	r3, [sp, #32]
   12bf8:	str	r3, [sp, #28]
   12bfc:	str	r3, [sp, #52]	; 0x34
   12c00:	ldr	r3, [pc, #2408]	; 13570 <__assert_fail@plt+0x235c>
   12c04:	mov	r2, #0
   12c08:	mov	r4, r2
   12c0c:	str	r2, [sp, #68]	; 0x44
   12c10:	str	r2, [sp, #44]	; 0x2c
   12c14:	str	r2, [sp, #72]	; 0x48
   12c18:	str	r3, [sp, #60]	; 0x3c
   12c1c:	mov	r8, #5
   12c20:	b	12858 <__assert_fail@plt+0x1644>
   12c24:	mov	r3, #0
   12c28:	mov	r2, #1
   12c2c:	str	r2, [sp, #40]	; 0x28
   12c30:	mov	r4, r3
   12c34:	str	r3, [sp, #68]	; 0x44
   12c38:	str	r2, [sp, #28]
   12c3c:	str	r3, [sp, #44]	; 0x2c
   12c40:	str	r3, [sp, #72]	; 0x48
   12c44:	str	r3, [sp, #32]
   12c48:	str	r3, [sp, #52]	; 0x34
   12c4c:	str	r3, [sp, #60]	; 0x3c
   12c50:	b	12858 <__assert_fail@plt+0x1644>
   12c54:	mov	r2, #1
   12c58:	mov	r3, #0
   12c5c:	str	r2, [sp, #40]	; 0x28
   12c60:	mov	r4, r3
   12c64:	str	r3, [sp, #68]	; 0x44
   12c68:	str	r8, [sp, #52]	; 0x34
   12c6c:	str	r2, [sp, #32]
   12c70:	b	12b54 <__assert_fail@plt+0x1940>
   12c74:	mov	r3, #1
   12c78:	str	r3, [sp, #40]	; 0x28
   12c7c:	str	r3, [sp, #32]
   12c80:	str	r3, [sp, #28]
   12c84:	str	r3, [sp, #52]	; 0x34
   12c88:	ldr	r3, [pc, #2276]	; 13574 <__assert_fail@plt+0x2360>
   12c8c:	mov	r2, #0
   12c90:	mov	r4, r2
   12c94:	str	r2, [sp, #68]	; 0x44
   12c98:	str	r2, [sp, #44]	; 0x2c
   12c9c:	str	r2, [sp, #72]	; 0x48
   12ca0:	str	r3, [sp, #60]	; 0x3c
   12ca4:	mov	r8, #2
   12ca8:	b	12858 <__assert_fail@plt+0x1644>
   12cac:	mov	r7, #0
   12cb0:	ldr	r3, [sp, #24]
   12cb4:	cmn	r3, #1
   12cb8:	beq	137f4 <__assert_fail@plt+0x25e0>
   12cbc:	ldr	r3, [sp, #24]
   12cc0:	subs	r3, r3, #1
   12cc4:	movne	r3, #1
   12cc8:	cmp	r3, #0
   12ccc:	sub	r2, fp, #2
   12cd0:	clz	r2, r2
   12cd4:	lsr	r2, r2, #5
   12cd8:	bne	12ed4 <__assert_fail@plt+0x1cc0>
   12cdc:	cmp	r9, #0
   12ce0:	bne	12ed4 <__assert_fail@plt+0x1cc0>
   12ce4:	ldr	r3, [sp, #32]
   12ce8:	tst	r3, r2
   12cec:	bne	12ff4 <__assert_fail@plt+0x1de0>
   12cf0:	ldr	r3, [sp, #28]
   12cf4:	eor	r3, r3, #1
   12cf8:	orr	r3, r2, r3
   12cfc:	ldr	r2, [sp, #32]
   12d00:	eor	r3, r3, #1
   12d04:	orrs	r3, r2, r3
   12d08:	beq	12d38 <__assert_fail@plt+0x1b24>
   12d0c:	mov	r3, #0
   12d10:	ldr	r1, [sp, #56]	; 0x38
   12d14:	cmp	r1, #0
   12d18:	beq	12d38 <__assert_fail@plt+0x1b24>
   12d1c:	lsr	r2, r5, #5
   12d20:	and	r0, r5, #31
   12d24:	uxtb	r2, r2
   12d28:	ldr	r1, [r1, r2, lsl #2]
   12d2c:	lsr	r2, r1, r0
   12d30:	tst	r2, #1
   12d34:	bne	12d40 <__assert_fail@plt+0x1b2c>
   12d38:	cmp	r7, #0
   12d3c:	beq	12f90 <__assert_fail@plt+0x1d7c>
   12d40:	sub	r2, fp, #2
   12d44:	clz	r2, r2
   12d48:	lsr	r2, r2, #5
   12d4c:	ldr	r3, [sp, #32]
   12d50:	cmp	r3, #0
   12d54:	bne	13080 <__assert_fail@plt+0x1e6c>
   12d58:	ldr	r3, [sp, #44]	; 0x2c
   12d5c:	eor	r3, r3, #1
   12d60:	ands	r3, r2, r3
   12d64:	beq	12d9c <__assert_fail@plt+0x1b88>
   12d68:	cmp	sl, r4
   12d6c:	movhi	r2, #39	; 0x27
   12d70:	strbhi	r2, [r8, r4]
   12d74:	add	r2, r4, #1
   12d78:	cmp	r2, sl
   12d7c:	movcc	r1, #36	; 0x24
   12d80:	strbcc	r1, [r8, r2]
   12d84:	add	r2, r4, #2
   12d88:	cmp	r2, sl
   12d8c:	add	r4, r4, #3
   12d90:	movcc	r1, #39	; 0x27
   12d94:	strbcc	r1, [r8, r2]
   12d98:	str	r3, [sp, #44]	; 0x2c
   12d9c:	cmp	r4, sl
   12da0:	movcc	r3, #92	; 0x5c
   12da4:	strbcc	r3, [r8, r4]
   12da8:	add	r9, r9, #1
   12dac:	add	r4, r4, #1
   12db0:	cmp	r4, sl
   12db4:	ldr	r3, [sp, #40]	; 0x28
   12db8:	strbcc	r5, [r8, r4]
   12dbc:	cmp	r6, #0
   12dc0:	moveq	r3, #0
   12dc4:	str	r3, [sp, #40]	; 0x28
   12dc8:	ldr	r3, [sp, #24]
   12dcc:	add	r4, r4, #1
   12dd0:	cmn	r3, #1
   12dd4:	bne	12874 <__assert_fail@plt+0x1660>
   12dd8:	ldr	r3, [sp, #36]	; 0x24
   12ddc:	ldrb	r6, [r3, r9]
   12de0:	adds	r6, r6, #0
   12de4:	movne	r6, #1
   12de8:	cmp	r6, #0
   12dec:	bne	12888 <__assert_fail@plt+0x1674>
   12df0:	str	fp, [sp, #160]	; 0xa0
   12df4:	mov	fp, r8
   12df8:	ldr	r8, [sp, #160]	; 0xa0
   12dfc:	ldr	r1, [sp, #32]
   12e00:	cmp	r4, #0
   12e04:	sub	r2, r8, #2
   12e08:	clz	r2, r2
   12e0c:	lsr	r2, r2, #5
   12e10:	andeq	r3, r2, r1
   12e14:	movne	r3, #0
   12e18:	cmp	r3, #0
   12e1c:	bne	13f08 <__assert_fail@plt+0x2cf4>
   12e20:	eor	r3, r1, #1
   12e24:	ands	r2, r2, r3
   12e28:	beq	13e44 <__assert_fail@plt+0x2c30>
   12e2c:	ldr	r3, [sp, #68]	; 0x44
   12e30:	cmp	r3, #0
   12e34:	beq	13e48 <__assert_fail@plt+0x2c34>
   12e38:	ldr	r3, [sp, #40]	; 0x28
   12e3c:	cmp	r3, #0
   12e40:	bne	13ec4 <__assert_fail@plt+0x2cb0>
   12e44:	ldr	r3, [sp, #72]	; 0x48
   12e48:	adds	r3, r3, #0
   12e4c:	movne	r3, #1
   12e50:	cmp	sl, #0
   12e54:	movne	r3, #0
   12e58:	cmp	r3, #0
   12e5c:	ldreq	r2, [sp, #68]	; 0x44
   12e60:	beq	13e48 <__assert_fail@plt+0x2c34>
   12e64:	ldr	sl, [sp, #72]	; 0x48
   12e68:	str	r3, [sp, #68]	; 0x44
   12e6c:	ldr	r3, [pc, #1792]	; 13574 <__assert_fail@plt+0x2360>
   12e70:	mov	r2, #39	; 0x27
   12e74:	mov	r4, #1
   12e78:	str	r3, [sp, #60]	; 0x3c
   12e7c:	mov	r3, #0
   12e80:	strb	r2, [fp]
   12e84:	str	r4, [sp, #52]	; 0x34
   12e88:	mov	r8, #2
   12e8c:	str	r3, [sp, #32]
   12e90:	b	12858 <__assert_fail@plt+0x1644>
   12e94:	mov	r7, #0
   12e98:	cmp	fp, #2
   12e9c:	beq	137d4 <__assert_fail@plt+0x25c0>
   12ea0:	ldr	r3, [sp, #52]	; 0x34
   12ea4:	ldr	r2, [sp, #28]
   12ea8:	ldr	r1, [sp, #32]
   12eac:	cmp	r3, #0
   12eb0:	andne	r2, r2, r1
   12eb4:	moveq	r2, #0
   12eb8:	cmp	r2, #0
   12ebc:	moveq	r5, #92	; 0x5c
   12ec0:	moveq	r3, r5
   12ec4:	bne	137e0 <__assert_fail@plt+0x25cc>
   12ec8:	ldr	r1, [sp, #28]
   12ecc:	cmp	r1, #0
   12ed0:	bne	13f50 <__assert_fail@plt+0x2d3c>
   12ed4:	mov	r6, #0
   12ed8:	b	12cf0 <__assert_fail@plt+0x1adc>
   12edc:	mov	r7, #0
   12ee0:	cmp	fp, #2
   12ee4:	beq	13844 <__assert_fail@plt+0x2630>
   12ee8:	cmp	fp, #5
   12eec:	beq	13808 <__assert_fail@plt+0x25f4>
   12ef0:	sub	r2, fp, #2
   12ef4:	mov	r6, #0
   12ef8:	clz	r2, r2
   12efc:	mov	r5, #63	; 0x3f
   12f00:	lsr	r2, r2, #5
   12f04:	b	12cf0 <__assert_fail@plt+0x1adc>
   12f08:	mov	r7, #0
   12f0c:	cmp	fp, #2
   12f10:	strne	r6, [sp, #68]	; 0x44
   12f14:	movne	r2, #0
   12f18:	movne	r5, #39	; 0x27
   12f1c:	bne	12cf0 <__assert_fail@plt+0x1adc>
   12f20:	ldr	r3, [sp, #32]
   12f24:	cmp	r3, #0
   12f28:	bne	13c24 <__assert_fail@plt+0x2a10>
   12f2c:	cmp	sl, #0
   12f30:	ldr	r3, [sp, #72]	; 0x48
   12f34:	clz	r3, r3
   12f38:	lsr	r3, r3, #5
   12f3c:	moveq	r3, #0
   12f40:	cmp	r3, #0
   12f44:	bne	13b58 <__assert_fail@plt+0x2944>
   12f48:	cmp	sl, r4
   12f4c:	movhi	r3, #39	; 0x27
   12f50:	strbhi	r3, [r8, r4]
   12f54:	add	r3, r4, #1
   12f58:	cmp	sl, r3
   12f5c:	movhi	r2, #92	; 0x5c
   12f60:	strbhi	r2, [r8, r3]
   12f64:	add	r3, r4, #2
   12f68:	cmp	sl, r3
   12f6c:	movhi	r2, #39	; 0x27
   12f70:	strbhi	r2, [r8, r3]
   12f74:	mov	r3, #0
   12f78:	cmp	r7, #0
   12f7c:	add	r4, r4, #3
   12f80:	str	r3, [sp, #44]	; 0x2c
   12f84:	str	r6, [sp, #68]	; 0x44
   12f88:	mov	r5, #39	; 0x27
   12f8c:	bne	12d40 <__assert_fail@plt+0x1b2c>
   12f90:	ldr	r2, [sp, #44]	; 0x2c
   12f94:	eor	r3, r3, #1
   12f98:	and	r3, r3, r2
   12f9c:	add	r9, r9, #1
   12fa0:	uxtb	r3, r3
   12fa4:	cmp	r3, #0
   12fa8:	beq	12db0 <__assert_fail@plt+0x1b9c>
   12fac:	cmp	sl, r4
   12fb0:	movhi	r3, #39	; 0x27
   12fb4:	strbhi	r3, [r8, r4]
   12fb8:	add	r3, r4, #1
   12fbc:	cmp	sl, r3
   12fc0:	movhi	r2, #39	; 0x27
   12fc4:	strbhi	r2, [r8, r3]
   12fc8:	mov	r3, #0
   12fcc:	add	r4, r4, #2
   12fd0:	str	r3, [sp, #44]	; 0x2c
   12fd4:	b	12db0 <__assert_fail@plt+0x1b9c>
   12fd8:	mov	r3, #114	; 0x72
   12fdc:	ldr	r1, [sp, #32]
   12fe0:	sub	r2, fp, #2
   12fe4:	clz	r2, r2
   12fe8:	lsr	r2, r2, #5
   12fec:	tst	r2, r1
   12ff0:	beq	12ec8 <__assert_fail@plt+0x1cb4>
   12ff4:	mov	fp, r8
   12ff8:	mov	r8, #2
   12ffc:	ldr	r3, [sp, #28]
   13000:	cmp	r3, #0
   13004:	movne	r8, #4
   13008:	ldr	r3, [sp, #164]	; 0xa4
   1300c:	mov	ip, #0
   13010:	bic	r3, r3, #2
   13014:	str	r3, [sp, #4]
   13018:	ldr	r3, [sp, #76]	; 0x4c
   1301c:	str	r8, [sp]
   13020:	str	r3, [sp, #16]
   13024:	ldr	r3, [sp, #80]	; 0x50
   13028:	ldr	r2, [sp, #36]	; 0x24
   1302c:	str	r3, [sp, #12]
   13030:	mov	r1, sl
   13034:	ldr	r3, [sp, #24]
   13038:	mov	r0, fp
   1303c:	str	ip, [sp, #8]
   13040:	bl	12760 <__assert_fail@plt+0x154c>
   13044:	mov	r4, r0
   13048:	ldr	r3, [pc, #1304]	; 13568 <__assert_fail@plt+0x2354>
   1304c:	ldr	r2, [sp, #116]	; 0x74
   13050:	mov	r0, r4
   13054:	ldr	r3, [r3]
   13058:	cmp	r2, r3
   1305c:	bne	13f4c <__assert_fail@plt+0x2d38>
   13060:	add	sp, sp, #124	; 0x7c
   13064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13068:	mov	r5, #110	; 0x6e
   1306c:	ldr	r3, [sp, #32]
   13070:	mov	r2, #0
   13074:	cmp	r3, #0
   13078:	mov	r6, r2
   1307c:	beq	12d58 <__assert_fail@plt+0x1b44>
   13080:	str	fp, [sp, #160]	; 0xa0
   13084:	mov	fp, r8
   13088:	ldr	r8, [sp, #160]	; 0xa0
   1308c:	mov	r3, r2
   13090:	ldr	r2, [sp, #28]
   13094:	and	r2, r2, r3
   13098:	str	r2, [sp, #28]
   1309c:	b	12ffc <__assert_fail@plt+0x1de8>
   130a0:	mov	r5, #116	; 0x74
   130a4:	b	1306c <__assert_fail@plt+0x1e58>
   130a8:	mov	r5, #102	; 0x66
   130ac:	ldr	r3, [sp, #32]
   130b0:	cmp	r3, #0
   130b4:	bne	13c60 <__assert_fail@plt+0x2a4c>
   130b8:	mov	r6, #0
   130bc:	b	12d9c <__assert_fail@plt+0x1b88>
   130c0:	mov	r5, #118	; 0x76
   130c4:	b	130ac <__assert_fail@plt+0x1e98>
   130c8:	mov	r7, #0
   130cc:	mov	r6, #0
   130d0:	b	12d0c <__assert_fail@plt+0x1af8>
   130d4:	ldr	r3, [sp, #32]
   130d8:	cmp	r3, #0
   130dc:	bne	13ea4 <__assert_fail@plt+0x2c90>
   130e0:	mov	r7, r3
   130e4:	ldr	r3, [sp, #44]	; 0x2c
   130e8:	sub	r2, fp, #2
   130ec:	eor	r3, r3, #1
   130f0:	clz	r2, r2
   130f4:	lsr	r2, r2, #5
   130f8:	ands	r3, r2, r3
   130fc:	beq	13b44 <__assert_fail@plt+0x2930>
   13100:	cmp	sl, r4
   13104:	movhi	r1, #39	; 0x27
   13108:	strbhi	r1, [r8, r4]
   1310c:	add	r1, r4, #1
   13110:	cmp	sl, r1
   13114:	movhi	r0, #36	; 0x24
   13118:	strbhi	r0, [r8, r1]
   1311c:	add	r1, r4, #2
   13120:	cmp	sl, r1
   13124:	movhi	r0, #39	; 0x27
   13128:	strbhi	r0, [r8, r1]
   1312c:	add	r1, r4, #3
   13130:	cmp	sl, r1
   13134:	bls	13ba4 <__assert_fail@plt+0x2990>
   13138:	mov	r4, r1
   1313c:	mov	r1, #92	; 0x5c
   13140:	strb	r1, [r8, r4]
   13144:	mov	r1, r4
   13148:	str	r3, [sp, #44]	; 0x2c
   1314c:	cmp	fp, #2
   13150:	add	r4, r4, #1
   13154:	beq	13bec <__assert_fail@plt+0x29d8>
   13158:	ldr	r0, [sp, #24]
   1315c:	add	r3, r9, #1
   13160:	cmp	r3, r0
   13164:	bcs	1317c <__assert_fail@plt+0x1f68>
   13168:	ldr	r0, [sp, #36]	; 0x24
   1316c:	ldrb	r3, [r0, r3]
   13170:	sub	r3, r3, #48	; 0x30
   13174:	cmp	r3, #9
   13178:	bls	13bfc <__assert_fail@plt+0x29e8>
   1317c:	mov	r5, #48	; 0x30
   13180:	ldr	r3, [sp, #28]
   13184:	eor	r3, r3, #1
   13188:	orrs	r2, r2, r3
   1318c:	mov	r3, r6
   13190:	moveq	r6, r2
   13194:	beq	12d10 <__assert_fail@plt+0x1afc>
   13198:	mov	r6, #0
   1319c:	b	12d38 <__assert_fail@plt+0x1b24>
   131a0:	mov	r2, #0
   131a4:	mov	r6, r2
   131a8:	mov	r5, #98	; 0x62
   131ac:	b	12d58 <__assert_fail@plt+0x1b44>
   131b0:	mov	r5, #97	; 0x61
   131b4:	b	130b8 <__assert_fail@plt+0x1ea4>
   131b8:	mov	r3, r7
   131bc:	mov	r6, r7
   131c0:	mov	r2, #0
   131c4:	mov	r7, r3
   131c8:	mov	r5, #32
   131cc:	b	12cf0 <__assert_fail@plt+0x1adc>
   131d0:	cmp	r9, #0
   131d4:	mov	r3, r7
   131d8:	bne	137a0 <__assert_fail@plt+0x258c>
   131dc:	mov	r6, r7
   131e0:	mov	r2, r9
   131e4:	mov	r7, r3
   131e8:	b	12cf0 <__assert_fail@plt+0x1adc>
   131ec:	mov	r6, r7
   131f0:	b	12d0c <__assert_fail@plt+0x1af8>
   131f4:	mov	r7, #0
   131f8:	ldr	r3, [sp, #64]	; 0x40
   131fc:	cmp	r3, #1
   13200:	bne	1385c <__assert_fail@plt+0x2648>
   13204:	bl	110dc <__ctype_b_loc@plt>
   13208:	ldr	r2, [sp, #64]	; 0x40
   1320c:	sxth	r3, r5
   13210:	mov	ip, r2
   13214:	lsl	r3, r3, #1
   13218:	ldr	r2, [r0]
   1321c:	ldrh	r3, [r2, r3]
   13220:	and	r3, r3, #16384	; 0x4000
   13224:	cmp	r3, #0
   13228:	ldr	r3, [sp, #28]
   1322c:	movne	r6, #1
   13230:	moveq	r6, #0
   13234:	movne	r2, #0
   13238:	andeq	r2, r3, #1
   1323c:	cmp	r2, #0
   13240:	bne	13b6c <__assert_fail@plt+0x2958>
   13244:	sub	r2, fp, #2
   13248:	clz	r2, r2
   1324c:	lsr	r2, r2, #5
   13250:	b	12cf0 <__assert_fail@plt+0x1adc>
   13254:	cmp	r4, #0
   13258:	bne	13f18 <__assert_fail@plt+0x2d04>
   1325c:	str	r4, [sp, #28]
   13260:	cmp	sl, #0
   13264:	bne	13f5c <__assert_fail@plt+0x2d48>
   13268:	ldr	r3, [pc, #772]	; 13574 <__assert_fail@plt+0x2360>
   1326c:	mov	r4, #1
   13270:	str	r4, [sp, #40]	; 0x28
   13274:	str	r3, [sp, #60]	; 0x3c
   13278:	str	r4, [sp, #52]	; 0x34
   1327c:	str	sl, [sp, #72]	; 0x48
   13280:	str	sl, [sp, #68]	; 0x44
   13284:	str	sl, [sp, #44]	; 0x2c
   13288:	str	sl, [sp, #32]
   1328c:	mov	r8, #2
   13290:	b	12858 <__assert_fail@plt+0x1644>
   13294:	ldr	r3, [sp, #36]	; 0x24
   13298:	ldrb	r5, [r3, r9]
   1329c:	cmp	r5, #126	; 0x7e
   132a0:	ldrls	pc, [pc, r5, lsl #2]
   132a4:	b	131f8 <__assert_fail@plt+0x1fe4>
   132a8:	ldrdeq	r3, [r1], -ip
   132ac:	strdeq	r3, [r1], -r8
   132b0:	strdeq	r3, [r1], -r8
   132b4:	strdeq	r3, [r1], -r8
   132b8:	strdeq	r3, [r1], -r8
   132bc:	strdeq	r3, [r1], -r8
   132c0:	strdeq	r3, [r1], -r8
   132c4:	andeq	r3, r1, r8, asr #9
   132c8:			; <UNDEFINED> instruction: 0x000134b4
   132cc:	andeq	r3, r1, ip, lsr #9
   132d0:	andeq	r3, r1, r4, lsr #9
   132d4:	andeq	r3, r1, r4, asr r5
   132d8:	andeq	r3, r1, r0, asr #10
   132dc:	ldrdeq	r2, [r1], -r8
   132e0:	strdeq	r3, [r1], -r8
   132e4:	strdeq	r3, [r1], -r8
   132e8:	strdeq	r3, [r1], -r8
   132ec:	strdeq	r3, [r1], -r8
   132f0:	strdeq	r3, [r1], -r8
   132f4:	strdeq	r3, [r1], -r8
   132f8:	strdeq	r3, [r1], -r8
   132fc:	strdeq	r3, [r1], -r8
   13300:	strdeq	r3, [r1], -r8
   13304:	strdeq	r3, [r1], -r8
   13308:	strdeq	r3, [r1], -r8
   1330c:	strdeq	r3, [r1], -r8
   13310:	strdeq	r3, [r1], -r8
   13314:	strdeq	r3, [r1], -r8
   13318:	strdeq	r3, [r1], -r8
   1331c:	strdeq	r3, [r1], -r8
   13320:	strdeq	r3, [r1], -r8
   13324:	strdeq	r3, [r1], -r8
   13328:	andeq	r3, r1, r0, lsr r5
   1332c:	andeq	r3, r1, ip, lsl r5
   13330:	andeq	r3, r1, ip, lsl r5
   13334:	andeq	r3, r1, ip, lsl #10
   13338:	andeq	r3, r1, ip, lsl r5
   1333c:	andeq	r3, r1, r4, asr #4
   13340:	andeq	r3, r1, ip, lsl r5
   13344:	andeq	r2, r1, ip, lsl #30
   13348:	andeq	r3, r1, ip, lsl r5
   1334c:	andeq	r3, r1, ip, lsl r5
   13350:	andeq	r3, r1, ip, lsl r5
   13354:	andeq	r3, r1, r4, asr #4
   13358:	andeq	r3, r1, r4, asr #4
   1335c:	andeq	r3, r1, r4, asr #4
   13360:	andeq	r3, r1, r4, asr #4
   13364:	andeq	r3, r1, r4, asr #4
   13368:	andeq	r3, r1, r4, asr #4
   1336c:	andeq	r3, r1, r4, asr #4
   13370:	andeq	r3, r1, r4, asr #4
   13374:	andeq	r3, r1, r4, asr #4
   13378:	andeq	r3, r1, r4, asr #4
   1337c:	andeq	r3, r1, r4, asr #4
   13380:	andeq	r3, r1, r4, asr #4
   13384:	andeq	r3, r1, r4, asr #4
   13388:	andeq	r3, r1, r4, asr #4
   1338c:	andeq	r3, r1, r4, asr #4
   13390:	andeq	r3, r1, r4, asr #4
   13394:	andeq	r3, r1, ip, lsl r5
   13398:	andeq	r3, r1, ip, lsl r5
   1339c:	andeq	r3, r1, ip, lsl r5
   133a0:	andeq	r3, r1, ip, lsl r5
   133a4:	andeq	r2, r1, r0, ror #29
   133a8:	strdeq	r3, [r1], -r8
   133ac:	andeq	r3, r1, r4, asr #4
   133b0:	andeq	r3, r1, r4, asr #4
   133b4:	andeq	r3, r1, r4, asr #4
   133b8:	andeq	r3, r1, r4, asr #4
   133bc:	andeq	r3, r1, r4, asr #4
   133c0:	andeq	r3, r1, r4, asr #4
   133c4:	andeq	r3, r1, r4, asr #4
   133c8:	andeq	r3, r1, r4, asr #4
   133cc:	andeq	r3, r1, r4, asr #4
   133d0:	andeq	r3, r1, r4, asr #4
   133d4:	andeq	r3, r1, r4, asr #4
   133d8:	andeq	r3, r1, r4, asr #4
   133dc:	andeq	r3, r1, r4, asr #4
   133e0:	andeq	r3, r1, r4, asr #4
   133e4:	andeq	r3, r1, r4, asr #4
   133e8:	andeq	r3, r1, r4, asr #4
   133ec:	andeq	r3, r1, r4, asr #4
   133f0:	andeq	r3, r1, r4, asr #4
   133f4:	andeq	r3, r1, r4, asr #4
   133f8:	andeq	r3, r1, r4, asr #4
   133fc:	andeq	r3, r1, r4, asr #4
   13400:	andeq	r3, r1, r4, asr #4
   13404:	andeq	r3, r1, r4, asr #4
   13408:	andeq	r3, r1, r4, asr #4
   1340c:	andeq	r3, r1, r4, asr #4
   13410:	andeq	r3, r1, r4, asr #4
   13414:	andeq	r3, r1, ip, lsl r5
   13418:	muleq	r1, r8, lr
   1341c:	andeq	r3, r1, r4, asr #4
   13420:	andeq	r3, r1, ip, lsl r5
   13424:	andeq	r3, r1, r4, asr #4
   13428:	andeq	r3, r1, ip, lsl r5
   1342c:	andeq	r3, r1, r4, asr #4
   13430:	andeq	r3, r1, r4, asr #4
   13434:	andeq	r3, r1, r4, asr #4
   13438:	andeq	r3, r1, r4, asr #4
   1343c:	andeq	r3, r1, r4, asr #4
   13440:	andeq	r3, r1, r4, asr #4
   13444:	andeq	r3, r1, r4, asr #4
   13448:	andeq	r3, r1, r4, asr #4
   1344c:	andeq	r3, r1, r4, asr #4
   13450:	andeq	r3, r1, r4, asr #4
   13454:	andeq	r3, r1, r4, asr #4
   13458:	andeq	r3, r1, r4, asr #4
   1345c:	andeq	r3, r1, r4, asr #4
   13460:	andeq	r3, r1, r4, asr #4
   13464:	andeq	r3, r1, r4, asr #4
   13468:	andeq	r3, r1, r4, asr #4
   1346c:	andeq	r3, r1, r4, asr #4
   13470:	andeq	r3, r1, r4, asr #4
   13474:	andeq	r3, r1, r4, asr #4
   13478:	andeq	r3, r1, r4, asr #4
   1347c:	andeq	r3, r1, r4, asr #4
   13480:	andeq	r3, r1, r4, asr #4
   13484:	andeq	r3, r1, r4, asr #4
   13488:	andeq	r3, r1, r4, asr #4
   1348c:	andeq	r3, r1, r4, asr #4
   13490:	andeq	r3, r1, r4, asr #4
   13494:			; <UNDEFINED> instruction: 0x00012cb0
   13498:	andeq	r3, r1, ip, lsl r5
   1349c:			; <UNDEFINED> instruction: 0x00012cb0
   134a0:	andeq	r3, r1, ip, lsl #10
   134a4:	mov	r3, #110	; 0x6e
   134a8:	b	12fdc <__assert_fail@plt+0x1dc8>
   134ac:	mov	r3, #116	; 0x74
   134b0:	b	12fdc <__assert_fail@plt+0x1dc8>
   134b4:	sub	r2, fp, #2
   134b8:	mov	r3, #98	; 0x62
   134bc:	clz	r2, r2
   134c0:	lsr	r2, r2, #5
   134c4:	b	12ec8 <__assert_fail@plt+0x1cb4>
   134c8:	sub	r2, fp, #2
   134cc:	mov	r3, #97	; 0x61
   134d0:	clz	r2, r2
   134d4:	lsr	r2, r2, #5
   134d8:	b	12ec8 <__assert_fail@plt+0x1cb4>
   134dc:	ldr	r3, [sp, #28]
   134e0:	cmp	r3, #0
   134e4:	bne	130d4 <__assert_fail@plt+0x1ec0>
   134e8:	ldr	r3, [sp, #164]	; 0xa4
   134ec:	tst	r3, #1
   134f0:	bne	13b64 <__assert_fail@plt+0x2950>
   134f4:	ldr	r6, [sp, #28]
   134f8:	sub	r2, fp, #2
   134fc:	mov	r7, r6
   13500:	clz	r2, r2
   13504:	lsr	r2, r2, #5
   13508:	b	12cf0 <__assert_fail@plt+0x1adc>
   1350c:	sub	r2, fp, #2
   13510:	clz	r2, r2
   13514:	lsr	r2, r2, #5
   13518:	b	12cdc <__assert_fail@plt+0x1ac8>
   1351c:	sub	r2, fp, #2
   13520:	mov	r6, #0
   13524:	clz	r2, r2
   13528:	lsr	r2, r2, #5
   1352c:	b	12ce4 <__assert_fail@plt+0x1ad0>
   13530:	sub	r2, fp, #2
   13534:	clz	r2, r2
   13538:	lsr	r2, r2, #5
   1353c:	b	12ce4 <__assert_fail@plt+0x1ad0>
   13540:	sub	r2, fp, #2
   13544:	mov	r3, #102	; 0x66
   13548:	clz	r2, r2
   1354c:	lsr	r2, r2, #5
   13550:	b	12ec8 <__assert_fail@plt+0x1cb4>
   13554:	sub	r2, fp, #2
   13558:	mov	r3, #118	; 0x76
   1355c:	clz	r2, r2
   13560:	lsr	r2, r2, #5
   13564:	b	12ec8 <__assert_fail@plt+0x1cb4>
   13568:	andeq	r7, r2, r0, lsl #30
   1356c:	strdeq	r6, [r1], -ip
   13570:	andeq	r6, r1, r4, ror #25
   13574:	strdeq	r6, [r1], -r8
   13578:	ldr	r3, [sp, #48]	; 0x30
   1357c:	ldrb	r5, [r3]
   13580:	cmp	r5, #126	; 0x7e
   13584:	ldrls	pc, [pc, r5, lsl #2]
   13588:	b	131f4 <__assert_fail@plt+0x1fe0>
   1358c:	ldrdeq	r3, [r1], -r4
   13590:	strdeq	r3, [r1], -r4
   13594:	strdeq	r3, [r1], -r4
   13598:	strdeq	r3, [r1], -r4
   1359c:	strdeq	r3, [r1], -r4
   135a0:	strdeq	r3, [r1], -r4
   135a4:	strdeq	r3, [r1], -r4
   135a8:	andeq	r3, r1, ip, asr #15
   135ac:	andeq	r3, r1, r4, asr #15
   135b0:	andeq	r3, r1, r0, lsr #1
   135b4:	andeq	r3, r1, r8, rrx
   135b8:	andeq	r3, r1, r0, asr #1
   135bc:	andeq	r3, r1, r8, lsr #1
   135c0:			; <UNDEFINED> instruction: 0x000137b8
   135c4:	strdeq	r3, [r1], -r4
   135c8:	strdeq	r3, [r1], -r4
   135cc:	strdeq	r3, [r1], -r4
   135d0:	strdeq	r3, [r1], -r4
   135d4:	strdeq	r3, [r1], -r4
   135d8:	strdeq	r3, [r1], -r4
   135dc:	strdeq	r3, [r1], -r4
   135e0:	strdeq	r3, [r1], -r4
   135e4:	strdeq	r3, [r1], -r4
   135e8:	strdeq	r3, [r1], -r4
   135ec:	strdeq	r3, [r1], -r4
   135f0:	strdeq	r3, [r1], -r4
   135f4:	strdeq	r3, [r1], -r4
   135f8:	strdeq	r3, [r1], -r4
   135fc:	strdeq	r3, [r1], -r4
   13600:	strdeq	r3, [r1], -r4
   13604:	strdeq	r3, [r1], -r4
   13608:	strdeq	r3, [r1], -r4
   1360c:			; <UNDEFINED> instruction: 0x000137b0
   13610:	andeq	r3, r1, r8, asr #1
   13614:	andeq	r3, r1, r8, asr #1
   13618:	muleq	r1, r4, r7
   1361c:	andeq	r3, r1, r8, asr #1
   13620:	andeq	r3, r1, r8, lsl #15
   13624:	andeq	r3, r1, r8, asr #1
   13628:	andeq	r2, r1, r8, lsl #30
   1362c:	andeq	r3, r1, r8, asr #1
   13630:	andeq	r3, r1, r8, asr #1
   13634:	andeq	r3, r1, r8, asr #1
   13638:	andeq	r3, r1, r8, lsl #15
   1363c:	andeq	r3, r1, r8, lsl #15
   13640:	andeq	r3, r1, r8, lsl #15
   13644:	andeq	r3, r1, r8, lsl #15
   13648:	andeq	r3, r1, r8, lsl #15
   1364c:	andeq	r3, r1, r8, lsl #15
   13650:	andeq	r3, r1, r8, lsl #15
   13654:	andeq	r3, r1, r8, lsl #15
   13658:	andeq	r3, r1, r8, lsl #15
   1365c:	andeq	r3, r1, r8, lsl #15
   13660:	andeq	r3, r1, r8, lsl #15
   13664:	andeq	r3, r1, r8, lsl #15
   13668:	andeq	r3, r1, r8, lsl #15
   1366c:	andeq	r3, r1, r8, lsl #15
   13670:	andeq	r3, r1, r8, lsl #15
   13674:	andeq	r3, r1, r8, lsl #15
   13678:	andeq	r3, r1, r8, asr #1
   1367c:	andeq	r3, r1, r8, asr #1
   13680:	andeq	r3, r1, r8, asr #1
   13684:	andeq	r3, r1, r8, asr #1
   13688:	ldrdeq	r2, [r1], -ip
   1368c:	strdeq	r3, [r1], -r4
   13690:	andeq	r3, r1, r8, lsl #15
   13694:	andeq	r3, r1, r8, lsl #15
   13698:	andeq	r3, r1, r8, lsl #15
   1369c:	andeq	r3, r1, r8, lsl #15
   136a0:	andeq	r3, r1, r8, lsl #15
   136a4:	andeq	r3, r1, r8, lsl #15
   136a8:	andeq	r3, r1, r8, lsl #15
   136ac:	andeq	r3, r1, r8, lsl #15
   136b0:	andeq	r3, r1, r8, lsl #15
   136b4:	andeq	r3, r1, r8, lsl #15
   136b8:	andeq	r3, r1, r8, lsl #15
   136bc:	andeq	r3, r1, r8, lsl #15
   136c0:	andeq	r3, r1, r8, lsl #15
   136c4:	andeq	r3, r1, r8, lsl #15
   136c8:	andeq	r3, r1, r8, lsl #15
   136cc:	andeq	r3, r1, r8, lsl #15
   136d0:	andeq	r3, r1, r8, lsl #15
   136d4:	andeq	r3, r1, r8, lsl #15
   136d8:	andeq	r3, r1, r8, lsl #15
   136dc:	andeq	r3, r1, r8, lsl #15
   136e0:	andeq	r3, r1, r8, lsl #15
   136e4:	andeq	r3, r1, r8, lsl #15
   136e8:	andeq	r3, r1, r8, lsl #15
   136ec:	andeq	r3, r1, r8, lsl #15
   136f0:	andeq	r3, r1, r8, lsl #15
   136f4:	andeq	r3, r1, r8, lsl #15
   136f8:	andeq	r3, r1, r8, asr #1
   136fc:	muleq	r1, r4, lr
   13700:	andeq	r3, r1, r8, lsl #15
   13704:	andeq	r3, r1, r8, asr #1
   13708:	andeq	r3, r1, r8, lsl #15
   1370c:	andeq	r3, r1, r8, asr #1
   13710:	andeq	r3, r1, r8, lsl #15
   13714:	andeq	r3, r1, r8, lsl #15
   13718:	andeq	r3, r1, r8, lsl #15
   1371c:	andeq	r3, r1, r8, lsl #15
   13720:	andeq	r3, r1, r8, lsl #15
   13724:	andeq	r3, r1, r8, lsl #15
   13728:	andeq	r3, r1, r8, lsl #15
   1372c:	andeq	r3, r1, r8, lsl #15
   13730:	andeq	r3, r1, r8, lsl #15
   13734:	andeq	r3, r1, r8, lsl #15
   13738:	andeq	r3, r1, r8, lsl #15
   1373c:	andeq	r3, r1, r8, lsl #15
   13740:	andeq	r3, r1, r8, lsl #15
   13744:	andeq	r3, r1, r8, lsl #15
   13748:	andeq	r3, r1, r8, lsl #15
   1374c:	andeq	r3, r1, r8, lsl #15
   13750:	andeq	r3, r1, r8, lsl #15
   13754:	andeq	r3, r1, r8, lsl #15
   13758:	andeq	r3, r1, r8, lsl #15
   1375c:	andeq	r3, r1, r8, lsl #15
   13760:	andeq	r3, r1, r8, lsl #15
   13764:	andeq	r3, r1, r8, lsl #15
   13768:	andeq	r3, r1, r8, lsl #15
   1376c:	andeq	r3, r1, r8, lsl #15
   13770:	andeq	r3, r1, r8, lsl #15
   13774:	andeq	r3, r1, r8, lsl #15
   13778:	andeq	r2, r1, ip, lsr #25
   1377c:	andeq	r3, r1, r8, asr #1
   13780:	andeq	r2, r1, ip, lsr #25
   13784:	muleq	r1, r4, r7
   13788:	mov	r6, r7
   1378c:	mov	r7, #0
   13790:	b	12d0c <__assert_fail@plt+0x1af8>
   13794:	cmp	r9, #0
   13798:	mov	r3, #0
   1379c:	beq	131dc <__assert_fail@plt+0x1fc8>
   137a0:	mov	r6, #0
   137a4:	mov	r7, r3
   137a8:	mov	r3, r6
   137ac:	b	12d10 <__assert_fail@plt+0x1afc>
   137b0:	mov	r3, #0
   137b4:	b	131bc <__assert_fail@plt+0x1fa8>
   137b8:	mov	r7, #0
   137bc:	mov	r3, #114	; 0x72
   137c0:	b	12fdc <__assert_fail@plt+0x1dc8>
   137c4:	mov	r5, #98	; 0x62
   137c8:	b	1306c <__assert_fail@plt+0x1e58>
   137cc:	mov	r5, #97	; 0x61
   137d0:	b	130ac <__assert_fail@plt+0x1e98>
   137d4:	ldr	r3, [sp, #32]
   137d8:	cmp	r3, #0
   137dc:	bne	13c24 <__assert_fail@plt+0x2a10>
   137e0:	add	r9, r9, #1
   137e4:	ldr	r3, [sp, #44]	; 0x2c
   137e8:	mov	r6, #0
   137ec:	mov	r5, #92	; 0x5c
   137f0:	b	12fa4 <__assert_fail@plt+0x1d90>
   137f4:	ldr	r3, [sp, #36]	; 0x24
   137f8:	ldrb	r3, [r3, #1]
   137fc:	adds	r3, r3, #0
   13800:	movne	r3, #1
   13804:	b	12cc8 <__assert_fail@plt+0x1ab4>
   13808:	ldr	r3, [sp, #164]	; 0xa4
   1380c:	ands	r3, r3, #4
   13810:	beq	13834 <__assert_fail@plt+0x2620>
   13814:	ldr	r2, [sp, #24]
   13818:	add	r3, r9, #2
   1381c:	cmp	r3, r2
   13820:	bcs	13834 <__assert_fail@plt+0x2620>
   13824:	ldr	r2, [sp, #48]	; 0x30
   13828:	ldrb	r5, [r2, #1]
   1382c:	cmp	r5, #63	; 0x3f
   13830:	beq	13c98 <__assert_fail@plt+0x2a84>
   13834:	mov	r2, #0
   13838:	mov	r6, r2
   1383c:	mov	r5, #63	; 0x3f
   13840:	b	12cf0 <__assert_fail@plt+0x1adc>
   13844:	ldr	r3, [sp, #32]
   13848:	cmp	r3, #0
   1384c:	bne	13c24 <__assert_fail@plt+0x2a10>
   13850:	mov	r6, r3
   13854:	mov	r5, #63	; 0x3f
   13858:	b	12d38 <__assert_fail@plt+0x1b24>
   1385c:	ldr	r3, [sp, #24]
   13860:	cmn	r3, #1
   13864:	mov	r3, #0
   13868:	str	r3, [sp, #108]	; 0x6c
   1386c:	str	r3, [sp, #112]	; 0x70
   13870:	bne	13880 <__assert_fail@plt+0x266c>
   13874:	ldr	r0, [sp, #36]	; 0x24
   13878:	bl	11100 <strlen@plt>
   1387c:	str	r0, [sp, #24]
   13880:	mov	r3, #0
   13884:	str	sl, [sp, #88]	; 0x58
   13888:	ldr	sl, [sp, #36]	; 0x24
   1388c:	str	r5, [sp, #92]	; 0x5c
   13890:	mov	r5, r3
   13894:	str	r7, [sp, #96]	; 0x60
   13898:	str	r4, [sp, #100]	; 0x64
   1389c:	str	r8, [sp, #84]	; 0x54
   138a0:	ldr	r3, [sp, #24]
   138a4:	add	r4, r9, r5
   138a8:	add	r7, sl, r4
   138ac:	sub	r2, r3, r4
   138b0:	mov	r1, r7
   138b4:	add	r3, sp, #108	; 0x6c
   138b8:	add	r0, sp, #104	; 0x68
   138bc:	bl	159dc <__assert_fail@plt+0x47c8>
   138c0:	subs	r8, r0, #0
   138c4:	beq	13914 <__assert_fail@plt+0x2700>
   138c8:	cmn	r8, #1
   138cc:	beq	13c74 <__assert_fail@plt+0x2a60>
   138d0:	cmn	r8, #2
   138d4:	beq	13d94 <__assert_fail@plt+0x2b80>
   138d8:	ldr	r3, [sp, #32]
   138dc:	cmp	fp, #2
   138e0:	movne	r3, #0
   138e4:	andeq	r3, r3, #1
   138e8:	cmp	r3, #0
   138ec:	bne	13a74 <__assert_fail@plt+0x2860>
   138f0:	ldr	r0, [sp, #104]	; 0x68
   138f4:	bl	11028 <iswprint@plt>
   138f8:	add	r5, r5, r8
   138fc:	cmp	r0, #0
   13900:	add	r0, sp, #108	; 0x6c
   13904:	moveq	r6, #0
   13908:	bl	10fc8 <mbsinit@plt>
   1390c:	cmp	r0, #0
   13910:	beq	138a0 <__assert_fail@plt+0x268c>
   13914:	ldr	r3, [sp, #28]
   13918:	mov	ip, r5
   1391c:	eor	r2, r6, #1
   13920:	ldr	r5, [sp, #92]	; 0x5c
   13924:	ldr	r7, [sp, #96]	; 0x60
   13928:	ldr	r4, [sp, #100]	; 0x64
   1392c:	ldr	r8, [sp, #84]	; 0x54
   13930:	ldr	sl, [sp, #88]	; 0x58
   13934:	and	r2, r2, r3
   13938:	cmp	ip, #1
   1393c:	bls	1323c <__assert_fail@plt+0x2028>
   13940:	add	r1, ip, r9
   13944:	ldr	lr, [sp, #48]	; 0x30
   13948:	mov	r0, #0
   1394c:	str	r6, [sp, #48]	; 0x30
   13950:	mov	ip, #39	; 0x27
   13954:	ldr	r6, [sp, #44]	; 0x2c
   13958:	b	13a10 <__assert_fail@plt+0x27fc>
   1395c:	ldr	r0, [sp, #32]
   13960:	sub	r3, fp, #2
   13964:	cmp	r0, #0
   13968:	clz	r3, r3
   1396c:	lsr	r3, r3, #5
   13970:	bne	13b78 <__assert_fail@plt+0x2964>
   13974:	eor	r0, r6, #1
   13978:	ands	r3, r3, r0
   1397c:	beq	139ac <__assert_fail@plt+0x2798>
   13980:	add	r0, r4, #1
   13984:	cmp	sl, r4
   13988:	strbhi	ip, [r8, r4]
   1398c:	cmp	sl, r0
   13990:	movhi	r6, #36	; 0x24
   13994:	strbhi	r6, [r8, r0]
   13998:	add	r0, r4, #2
   1399c:	mov	r6, r3
   139a0:	add	r4, r4, #3
   139a4:	cmp	sl, r0
   139a8:	strbhi	ip, [r8, r0]
   139ac:	cmp	sl, r4
   139b0:	movhi	r3, #92	; 0x5c
   139b4:	strbhi	r3, [r8, r4]
   139b8:	add	r3, r4, #1
   139bc:	cmp	sl, r3
   139c0:	lsrhi	r0, r5, #6
   139c4:	addhi	r0, r0, #48	; 0x30
   139c8:	strbhi	r0, [r8, r3]
   139cc:	add	r0, r4, #2
   139d0:	cmp	sl, r0
   139d4:	lsrhi	r3, r5, #3
   139d8:	andhi	r3, r3, #7
   139dc:	addhi	r3, r3, #48	; 0x30
   139e0:	add	r9, r9, #1
   139e4:	strbhi	r3, [r8, r0]
   139e8:	and	r5, r5, #7
   139ec:	cmp	r9, r1
   139f0:	add	r5, r5, #48	; 0x30
   139f4:	add	r4, r4, #3
   139f8:	bcs	13b98 <__assert_fail@plt+0x2984>
   139fc:	mov	r0, r2
   13a00:	cmp	sl, r4
   13a04:	strbhi	r5, [r8, r4]
   13a08:	ldrb	r5, [lr, #1]!
   13a0c:	add	r4, r4, #1
   13a10:	cmp	r2, #0
   13a14:	bne	1395c <__assert_fail@plt+0x2748>
   13a18:	eor	r3, r0, #1
   13a1c:	and	r3, r3, r6
   13a20:	cmp	r7, #0
   13a24:	uxtb	r3, r3
   13a28:	beq	13a3c <__assert_fail@plt+0x2828>
   13a2c:	cmp	sl, r4
   13a30:	movhi	r7, #92	; 0x5c
   13a34:	strbhi	r7, [r8, r4]
   13a38:	add	r4, r4, #1
   13a3c:	add	r9, r9, #1
   13a40:	cmp	r9, r1
   13a44:	bcs	13b8c <__assert_fail@plt+0x2978>
   13a48:	cmp	r3, #0
   13a4c:	beq	13bb8 <__assert_fail@plt+0x29a4>
   13a50:	cmp	sl, r4
   13a54:	add	r3, r4, #1
   13a58:	strbhi	ip, [r8, r4]
   13a5c:	mov	r7, #0
   13a60:	cmp	sl, r3
   13a64:	strbhi	ip, [r8, r3]
   13a68:	add	r4, r4, #2
   13a6c:	mov	r6, r7
   13a70:	b	13a00 <__assert_fail@plt+0x27ec>
   13a74:	cmp	r8, #1
   13a78:	beq	138f0 <__assert_fail@plt+0x26dc>
   13a7c:	add	r1, r4, #1
   13a80:	add	r3, sl, r8
   13a84:	add	r1, sl, r1
   13a88:	add	r4, r3, r4
   13a8c:	ldrb	r3, [r1], #1
   13a90:	sub	r3, r3, #91	; 0x5b
   13a94:	cmp	r3, #33	; 0x21
   13a98:	ldrls	pc, [pc, r3, lsl #2]
   13a9c:	b	13b28 <__assert_fail@plt+0x2914>
   13aa0:	andeq	r3, r1, r4, lsr fp
   13aa4:	andeq	r3, r1, r4, lsr fp
   13aa8:	andeq	r3, r1, r8, lsr #22
   13aac:	andeq	r3, r1, r4, lsr fp
   13ab0:	andeq	r3, r1, r8, lsr #22
   13ab4:	andeq	r3, r1, r4, lsr fp
   13ab8:	andeq	r3, r1, r8, lsr #22
   13abc:	andeq	r3, r1, r8, lsr #22
   13ac0:	andeq	r3, r1, r8, lsr #22
   13ac4:	andeq	r3, r1, r8, lsr #22
   13ac8:	andeq	r3, r1, r8, lsr #22
   13acc:	andeq	r3, r1, r8, lsr #22
   13ad0:	andeq	r3, r1, r8, lsr #22
   13ad4:	andeq	r3, r1, r8, lsr #22
   13ad8:	andeq	r3, r1, r8, lsr #22
   13adc:	andeq	r3, r1, r8, lsr #22
   13ae0:	andeq	r3, r1, r8, lsr #22
   13ae4:	andeq	r3, r1, r8, lsr #22
   13ae8:	andeq	r3, r1, r8, lsr #22
   13aec:	andeq	r3, r1, r8, lsr #22
   13af0:	andeq	r3, r1, r8, lsr #22
   13af4:	andeq	r3, r1, r8, lsr #22
   13af8:	andeq	r3, r1, r8, lsr #22
   13afc:	andeq	r3, r1, r8, lsr #22
   13b00:	andeq	r3, r1, r8, lsr #22
   13b04:	andeq	r3, r1, r8, lsr #22
   13b08:	andeq	r3, r1, r8, lsr #22
   13b0c:	andeq	r3, r1, r8, lsr #22
   13b10:	andeq	r3, r1, r8, lsr #22
   13b14:	andeq	r3, r1, r8, lsr #22
   13b18:	andeq	r3, r1, r8, lsr #22
   13b1c:	andeq	r3, r1, r8, lsr #22
   13b20:	andeq	r3, r1, r8, lsr #22
   13b24:	andeq	r3, r1, r4, lsr fp
   13b28:	cmp	r4, r1
   13b2c:	bne	13a8c <__assert_fail@plt+0x2878>
   13b30:	b	138f0 <__assert_fail@plt+0x26dc>
   13b34:	ldr	fp, [sp, #84]	; 0x54
   13b38:	ldr	sl, [sp, #88]	; 0x58
   13b3c:	mov	r8, #2
   13b40:	b	12ffc <__assert_fail@plt+0x1de8>
   13b44:	cmp	sl, r4
   13b48:	movls	r1, r4
   13b4c:	bls	1314c <__assert_fail@plt+0x1f38>
   13b50:	ldr	r3, [sp, #44]	; 0x2c
   13b54:	b	1313c <__assert_fail@plt+0x1f28>
   13b58:	str	sl, [sp, #72]	; 0x48
   13b5c:	ldr	sl, [sp, #32]
   13b60:	b	12f74 <__assert_fail@plt+0x1d60>
   13b64:	add	r9, r9, #1
   13b68:	b	12868 <__assert_fail@plt+0x1654>
   13b6c:	ldr	r2, [sp, #28]
   13b70:	mov	r6, #0
   13b74:	b	13940 <__assert_fail@plt+0x272c>
   13b78:	str	fp, [sp, #160]	; 0xa0
   13b7c:	str	r3, [sp, #28]
   13b80:	mov	fp, r8
   13b84:	ldr	r8, [sp, #160]	; 0xa0
   13b88:	b	12ffc <__assert_fail@plt+0x1de8>
   13b8c:	str	r6, [sp, #44]	; 0x2c
   13b90:	ldr	r6, [sp, #48]	; 0x30
   13b94:	b	12fa4 <__assert_fail@plt+0x1d90>
   13b98:	str	r6, [sp, #44]	; 0x2c
   13b9c:	ldr	r6, [sp, #48]	; 0x30
   13ba0:	b	12db0 <__assert_fail@plt+0x1b9c>
   13ba4:	add	r4, r4, #4
   13ba8:	str	r3, [sp, #44]	; 0x2c
   13bac:	mov	r6, #0
   13bb0:	mov	r5, #48	; 0x30
   13bb4:	b	12d38 <__assert_fail@plt+0x1b24>
   13bb8:	mov	r7, r3
   13bbc:	b	13a00 <__assert_fail@plt+0x27ec>
   13bc0:	ldr	r3, [pc, #-1624]	; 13570 <__assert_fail@plt+0x235c>
   13bc4:	mov	r4, #1
   13bc8:	str	r4, [sp, #40]	; 0x28
   13bcc:	str	r4, [sp, #28]
   13bd0:	str	r4, [sp, #52]	; 0x34
   13bd4:	str	sl, [sp, #72]	; 0x48
   13bd8:	str	sl, [sp, #68]	; 0x44
   13bdc:	str	sl, [sp, #44]	; 0x2c
   13be0:	str	sl, [sp, #32]
   13be4:	str	r3, [sp, #60]	; 0x3c
   13be8:	b	12858 <__assert_fail@plt+0x1644>
   13bec:	mov	r3, r6
   13bf0:	mov	r5, #48	; 0x30
   13bf4:	mov	r6, #0
   13bf8:	b	12d38 <__assert_fail@plt+0x1b24>
   13bfc:	cmp	sl, r4
   13c00:	movhi	r3, #48	; 0x30
   13c04:	strbhi	r3, [r8, r4]
   13c08:	add	r3, r1, #2
   13c0c:	cmp	sl, r3
   13c10:	movhi	r0, #48	; 0x30
   13c14:	strbhi	r0, [r8, r3]
   13c18:	add	r4, r1, #3
   13c1c:	mov	r5, #48	; 0x30
   13c20:	b	13180 <__assert_fail@plt+0x1f6c>
   13c24:	str	fp, [sp, #160]	; 0xa0
   13c28:	mov	fp, r8
   13c2c:	ldr	r8, [sp, #160]	; 0xa0
   13c30:	b	12ffc <__assert_fail@plt+0x1de8>
   13c34:	ldr	r2, [sp, #80]	; 0x50
   13c38:	ldrb	r3, [r2]
   13c3c:	cmp	r3, #0
   13c40:	beq	12828 <__assert_fail@plt+0x1614>
   13c44:	cmp	sl, r4
   13c48:	strbhi	r3, [fp, r4]
   13c4c:	ldrb	r3, [r2, #1]!
   13c50:	add	r4, r4, #1
   13c54:	cmp	r3, #0
   13c58:	bne	13c44 <__assert_fail@plt+0x2a30>
   13c5c:	b	12828 <__assert_fail@plt+0x1614>
   13c60:	str	fp, [sp, #160]	; 0xa0
   13c64:	mov	r3, #0
   13c68:	mov	fp, r8
   13c6c:	ldr	r8, [sp, #160]	; 0xa0
   13c70:	b	13090 <__assert_fail@plt+0x1e7c>
   13c74:	mov	ip, r5
   13c78:	ldr	r7, [sp, #96]	; 0x60
   13c7c:	ldr	r5, [sp, #92]	; 0x5c
   13c80:	ldr	r4, [sp, #100]	; 0x64
   13c84:	ldr	r8, [sp, #84]	; 0x54
   13c88:	ldr	sl, [sp, #88]	; 0x58
   13c8c:	ldr	r2, [sp, #28]
   13c90:	mov	r6, #0
   13c94:	b	13938 <__assert_fail@plt+0x2724>
   13c98:	ldr	r2, [sp, #36]	; 0x24
   13c9c:	ldrb	r1, [r2, r3]
   13ca0:	sub	r2, r1, #33	; 0x21
   13ca4:	cmp	r2, #29
   13ca8:	ldrls	pc, [pc, r2, lsl #2]
   13cac:	b	13d88 <__assert_fail@plt+0x2b74>
   13cb0:	andeq	r3, r1, r8, lsr #26
   13cb4:	andeq	r3, r1, r8, lsl #27
   13cb8:	andeq	r3, r1, r8, lsl #27
   13cbc:	andeq	r3, r1, r8, lsl #27
   13cc0:	andeq	r3, r1, r8, lsl #27
   13cc4:	andeq	r3, r1, r8, lsl #27
   13cc8:	andeq	r3, r1, r8, lsr #26
   13ccc:	andeq	r3, r1, r8, lsr #26
   13cd0:	andeq	r3, r1, r8, lsr #26
   13cd4:	andeq	r3, r1, r8, lsl #27
   13cd8:	andeq	r3, r1, r8, lsl #27
   13cdc:	andeq	r3, r1, r8, lsl #27
   13ce0:	andeq	r3, r1, r8, lsr #26
   13ce4:	andeq	r3, r1, r8, lsl #27
   13ce8:	andeq	r3, r1, r8, lsr #26
   13cec:	andeq	r3, r1, r8, lsl #27
   13cf0:	andeq	r3, r1, r8, lsl #27
   13cf4:	andeq	r3, r1, r8, lsl #27
   13cf8:	andeq	r3, r1, r8, lsl #27
   13cfc:	andeq	r3, r1, r8, lsl #27
   13d00:	andeq	r3, r1, r8, lsl #27
   13d04:	andeq	r3, r1, r8, lsl #27
   13d08:	andeq	r3, r1, r8, lsl #27
   13d0c:	andeq	r3, r1, r8, lsl #27
   13d10:	andeq	r3, r1, r8, lsl #27
   13d14:	andeq	r3, r1, r8, lsl #27
   13d18:	andeq	r3, r1, r8, lsl #27
   13d1c:	andeq	r3, r1, r8, lsr #26
   13d20:	andeq	r3, r1, r8, lsr #26
   13d24:	andeq	r3, r1, r8, lsr #26
   13d28:	ldr	r2, [sp, #32]
   13d2c:	cmp	r2, #0
   13d30:	bne	13e34 <__assert_fail@plt+0x2c20>
   13d34:	cmp	sl, r4
   13d38:	movhi	r2, #63	; 0x3f
   13d3c:	strbhi	r2, [r8, r4]
   13d40:	add	r2, r4, #1
   13d44:	cmp	sl, r2
   13d48:	movhi	r0, #34	; 0x22
   13d4c:	strbhi	r0, [r8, r2]
   13d50:	add	r2, r4, #2
   13d54:	cmp	sl, r2
   13d58:	movhi	r0, #34	; 0x22
   13d5c:	strbhi	r0, [r8, r2]
   13d60:	add	r2, r4, #3
   13d64:	cmp	sl, r2
   13d68:	movhi	r0, #63	; 0x3f
   13d6c:	strbhi	r0, [r8, r2]
   13d70:	mov	r2, #0
   13d74:	add	r4, r4, #4
   13d78:	mov	r5, r1
   13d7c:	mov	r9, r3
   13d80:	mov	r6, r2
   13d84:	b	13180 <__assert_fail@plt+0x1f6c>
   13d88:	mov	r2, #0
   13d8c:	mov	r6, r2
   13d90:	b	12cf0 <__assert_fail@plt+0x1adc>
   13d94:	ldr	r0, [sp, #24]
   13d98:	mov	r1, r4
   13d9c:	cmp	r1, r0
   13da0:	mov	r2, r7
   13da4:	mov	r3, r5
   13da8:	mov	ip, r5
   13dac:	ldr	r7, [sp, #96]	; 0x60
   13db0:	ldr	r5, [sp, #92]	; 0x5c
   13db4:	ldr	r4, [sp, #100]	; 0x64
   13db8:	ldr	r8, [sp, #84]	; 0x54
   13dbc:	ldr	sl, [sp, #88]	; 0x58
   13dc0:	bcs	13df4 <__assert_fail@plt+0x2be0>
   13dc4:	ldrb	r6, [r2]
   13dc8:	cmp	r6, #0
   13dcc:	bne	13de0 <__assert_fail@plt+0x2bcc>
   13dd0:	b	13f10 <__assert_fail@plt+0x2cfc>
   13dd4:	ldrb	r6, [r2, #1]!
   13dd8:	cmp	r6, #0
   13ddc:	beq	13e98 <__assert_fail@plt+0x2c84>
   13de0:	add	r3, r3, #1
   13de4:	add	r1, r9, r3
   13de8:	cmp	r1, r0
   13dec:	bcc	13dd4 <__assert_fail@plt+0x2bc0>
   13df0:	mov	ip, r3
   13df4:	ldr	r2, [sp, #28]
   13df8:	mov	r6, #0
   13dfc:	b	13938 <__assert_fail@plt+0x2724>
   13e00:	mov	r3, #1
   13e04:	str	r3, [sp, #40]	; 0x28
   13e08:	str	r3, [sp, #32]
   13e0c:	str	r3, [sp, #28]
   13e10:	str	r3, [sp, #52]	; 0x34
   13e14:	ldr	r3, [pc, #-2220]	; 13570 <__assert_fail@plt+0x235c>
   13e18:	mov	r2, #0
   13e1c:	str	r2, [sp, #68]	; 0x44
   13e20:	str	r2, [sp, #44]	; 0x2c
   13e24:	str	r2, [sp, #72]	; 0x48
   13e28:	mov	r4, r2
   13e2c:	str	r3, [sp, #60]	; 0x3c
   13e30:	b	12858 <__assert_fail@plt+0x1644>
   13e34:	str	fp, [sp, #160]	; 0xa0
   13e38:	mov	fp, r8
   13e3c:	ldr	r8, [sp, #160]	; 0xa0
   13e40:	b	13008 <__assert_fail@plt+0x1df4>
   13e44:	mov	r2, r3
   13e48:	ldr	r3, [sp, #60]	; 0x3c
   13e4c:	cmp	r3, #0
   13e50:	moveq	r2, #0
   13e54:	andne	r2, r2, #1
   13e58:	cmp	r2, #0
   13e5c:	beq	13e88 <__assert_fail@plt+0x2c74>
   13e60:	mov	r2, r3
   13e64:	ldrb	r3, [r3]
   13e68:	cmp	r3, #0
   13e6c:	beq	13e88 <__assert_fail@plt+0x2c74>
   13e70:	cmp	sl, r4
   13e74:	strbhi	r3, [fp, r4]
   13e78:	ldrb	r3, [r2, #1]!
   13e7c:	add	r4, r4, #1
   13e80:	cmp	r3, #0
   13e84:	bne	13e70 <__assert_fail@plt+0x2c5c>
   13e88:	cmp	sl, r4
   13e8c:	movhi	r3, #0
   13e90:	strbhi	r3, [fp, r4]
   13e94:	b	13048 <__assert_fail@plt+0x1e34>
   13e98:	mov	ip, r3
   13e9c:	ldr	r2, [sp, #28]
   13ea0:	b	13938 <__assert_fail@plt+0x2724>
   13ea4:	str	fp, [sp, #160]	; 0xa0
   13ea8:	mov	fp, r8
   13eac:	ldr	r8, [sp, #160]	; 0xa0
   13eb0:	sub	r3, r8, #2
   13eb4:	clz	r3, r3
   13eb8:	lsr	r3, r3, #5
   13ebc:	str	r3, [sp, #28]
   13ec0:	b	12ffc <__assert_fail@plt+0x1de8>
   13ec4:	ldr	r3, [sp, #76]	; 0x4c
   13ec8:	mov	ip, #5
   13ecc:	str	r3, [sp, #16]
   13ed0:	ldr	r3, [sp, #80]	; 0x50
   13ed4:	ldr	r2, [sp, #36]	; 0x24
   13ed8:	str	r3, [sp, #12]
   13edc:	ldr	r3, [sp, #56]	; 0x38
   13ee0:	ldr	r1, [sp, #72]	; 0x48
   13ee4:	str	r3, [sp, #8]
   13ee8:	ldr	r3, [sp, #164]	; 0xa4
   13eec:	mov	r0, fp
   13ef0:	str	r3, [sp, #4]
   13ef4:	str	ip, [sp]
   13ef8:	ldr	r3, [sp, #24]
   13efc:	bl	12760 <__assert_fail@plt+0x154c>
   13f00:	mov	r4, r0
   13f04:	b	13048 <__assert_fail@plt+0x1e34>
   13f08:	mov	r8, #2
   13f0c:	b	12ffc <__assert_fail@plt+0x1de8>
   13f10:	ldr	r2, [sp, #28]
   13f14:	b	13938 <__assert_fail@plt+0x2724>
   13f18:	mov	r3, #0
   13f1c:	str	r3, [sp, #68]	; 0x44
   13f20:	str	r3, [sp, #44]	; 0x2c
   13f24:	str	r3, [sp, #72]	; 0x48
   13f28:	str	r3, [sp, #28]
   13f2c:	mov	r4, r3
   13f30:	ldr	r3, [pc, #-2500]	; 13574 <__assert_fail@plt+0x2360>
   13f34:	mov	r2, #1
   13f38:	str	r2, [sp, #40]	; 0x28
   13f3c:	str	r2, [sp, #32]
   13f40:	str	r2, [sp, #52]	; 0x34
   13f44:	str	r3, [sp, #60]	; 0x3c
   13f48:	b	12858 <__assert_fail@plt+0x1644>
   13f4c:	bl	10fec <__stack_chk_fail@plt>
   13f50:	mov	r5, r3
   13f54:	mov	r6, #0
   13f58:	b	12d4c <__assert_fail@plt+0x1b38>
   13f5c:	mov	r3, #0
   13f60:	mov	r2, #1
   13f64:	str	r3, [sp, #44]	; 0x2c
   13f68:	str	r3, [sp, #72]	; 0x48
   13f6c:	str	r2, [sp, #40]	; 0x28
   13f70:	b	12e68 <__assert_fail@plt+0x1c54>
   13f74:	bl	111f0 <abort@plt>
   13f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f7c:	sub	sp, sp, #44	; 0x2c
   13f80:	mov	r6, r0
   13f84:	mov	r4, r3
   13f88:	mov	sl, r1
   13f8c:	mov	fp, r2
   13f90:	bl	11118 <__errno_location@plt>
   13f94:	ldr	r7, [pc, #364]	; 14108 <__assert_fail@plt+0x2ef4>
   13f98:	cmp	r6, #0
   13f9c:	ldr	r5, [r7]
   13fa0:	ldr	r3, [r0]
   13fa4:	str	r3, [sp, #24]
   13fa8:	blt	14104 <__assert_fail@plt+0x2ef0>
   13fac:	ldr	r3, [r7, #4]
   13fb0:	mov	r8, r0
   13fb4:	cmp	r3, r6
   13fb8:	bgt	14004 <__assert_fail@plt+0x2df0>
   13fbc:	cmn	r6, #-268435454	; 0xf0000002
   13fc0:	bgt	14100 <__assert_fail@plt+0x2eec>
   13fc4:	add	r9, r6, #1
   13fc8:	add	r3, r7, #8
   13fcc:	cmp	r5, r3
   13fd0:	lsl	r1, r9, #3
   13fd4:	beq	140e0 <__assert_fail@plt+0x2ecc>
   13fd8:	mov	r0, r5
   13fdc:	bl	15134 <__assert_fail@plt+0x3f20>
   13fe0:	mov	r5, r0
   13fe4:	str	r0, [r7]
   13fe8:	ldr	r0, [r7, #4]
   13fec:	mov	r1, #0
   13ff0:	sub	r2, r9, r0
   13ff4:	add	r0, r5, r0, lsl #3
   13ff8:	lsl	r2, r2, #3
   13ffc:	bl	11148 <memset@plt>
   14000:	str	r9, [r7, #4]
   14004:	add	r3, r5, r6, lsl #3
   14008:	ldr	r1, [r4, #4]
   1400c:	ldr	r7, [r3, #4]
   14010:	ldr	r9, [r5, r6, lsl #3]
   14014:	ldr	r2, [r4, #40]	; 0x28
   14018:	ldr	ip, [r4, #44]	; 0x2c
   1401c:	str	r3, [sp, #28]
   14020:	ldr	r3, [r4]
   14024:	orr	r1, r1, #1
   14028:	add	lr, r4, #8
   1402c:	str	r1, [sp, #36]	; 0x24
   14030:	str	r1, [sp, #4]
   14034:	str	r2, [sp, #12]
   14038:	str	r3, [sp]
   1403c:	mov	r0, r7
   14040:	mov	r1, r9
   14044:	str	ip, [sp, #16]
   14048:	str	lr, [sp, #8]
   1404c:	mov	r3, fp
   14050:	mov	r2, sl
   14054:	str	lr, [sp, #32]
   14058:	bl	12760 <__assert_fail@plt+0x154c>
   1405c:	cmp	r9, r0
   14060:	bhi	140cc <__assert_fail@plt+0x2eb8>
   14064:	ldr	r3, [pc, #160]	; 1410c <__assert_fail@plt+0x2ef8>
   14068:	add	r9, r0, #1
   1406c:	cmp	r7, r3
   14070:	str	r9, [r5, r6, lsl #3]
   14074:	beq	14080 <__assert_fail@plt+0x2e6c>
   14078:	mov	r0, r7
   1407c:	bl	10fa4 <free@plt>
   14080:	mov	r0, r9
   14084:	bl	150d8 <__assert_fail@plt+0x3ec4>
   14088:	ldr	lr, [sp, #28]
   1408c:	ldr	ip, [r4, #44]	; 0x2c
   14090:	ldr	r5, [r4, #40]	; 0x28
   14094:	mov	r3, fp
   14098:	mov	r2, sl
   1409c:	mov	r1, r9
   140a0:	str	r0, [lr, #4]
   140a4:	ldr	lr, [r4]
   140a8:	ldr	r4, [sp, #32]
   140ac:	str	ip, [sp, #16]
   140b0:	str	r4, [sp, #8]
   140b4:	ldr	r4, [sp, #36]	; 0x24
   140b8:	str	r5, [sp, #12]
   140bc:	str	r4, [sp, #4]
   140c0:	str	lr, [sp]
   140c4:	mov	r7, r0
   140c8:	bl	12760 <__assert_fail@plt+0x154c>
   140cc:	ldr	r3, [sp, #24]
   140d0:	mov	r0, r7
   140d4:	str	r3, [r8]
   140d8:	add	sp, sp, #44	; 0x2c
   140dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140e0:	mov	r0, #0
   140e4:	bl	15134 <__assert_fail@plt+0x3f20>
   140e8:	ldr	r3, [pc, #32]	; 14110 <__assert_fail@plt+0x2efc>
   140ec:	mov	r5, r0
   140f0:	ldm	r3, {r0, r1}
   140f4:	str	r5, [r7]
   140f8:	stm	r5, {r0, r1}
   140fc:	b	13fe8 <__assert_fail@plt+0x2dd4>
   14100:	bl	15320 <__assert_fail@plt+0x410c>
   14104:	bl	111f0 <abort@plt>
   14108:	andeq	r8, r2, r0, lsr #2
   1410c:	andeq	r8, r2, r8, ror #3
   14110:	andeq	r8, r2, r8, lsr #2
   14114:	push	{r4, r5, r6, lr}
   14118:	mov	r5, r0
   1411c:	bl	11118 <__errno_location@plt>
   14120:	cmp	r5, #0
   14124:	mov	r1, #48	; 0x30
   14128:	mov	r4, r0
   1412c:	ldr	r0, [pc, #16]	; 14144 <__assert_fail@plt+0x2f30>
   14130:	ldr	r6, [r4]
   14134:	movne	r0, r5
   14138:	bl	152e0 <__assert_fail@plt+0x40cc>
   1413c:	str	r6, [r4]
   14140:	pop	{r4, r5, r6, pc}
   14144:	andeq	r8, r2, r8, ror #5
   14148:	ldr	r3, [pc, #12]	; 1415c <__assert_fail@plt+0x2f48>
   1414c:	cmp	r0, #0
   14150:	moveq	r0, r3
   14154:	ldr	r0, [r0]
   14158:	bx	lr
   1415c:	andeq	r8, r2, r8, ror #5
   14160:	ldr	r3, [pc, #12]	; 14174 <__assert_fail@plt+0x2f60>
   14164:	cmp	r0, #0
   14168:	moveq	r0, r3
   1416c:	str	r1, [r0]
   14170:	bx	lr
   14174:	andeq	r8, r2, r8, ror #5
   14178:	ldr	r3, [pc, #52]	; 141b4 <__assert_fail@plt+0x2fa0>
   1417c:	cmp	r0, #0
   14180:	moveq	r0, r3
   14184:	add	r3, r0, #8
   14188:	push	{lr}		; (str lr, [sp, #-4]!)
   1418c:	lsr	lr, r1, #5
   14190:	and	r1, r1, #31
   14194:	ldr	ip, [r3, lr, lsl #2]
   14198:	lsr	r0, ip, r1
   1419c:	eor	r2, r2, r0
   141a0:	and	r2, r2, #1
   141a4:	and	r0, r0, #1
   141a8:	eor	r1, ip, r2, lsl r1
   141ac:	str	r1, [r3, lr, lsl #2]
   141b0:	pop	{pc}		; (ldr pc, [sp], #4)
   141b4:	andeq	r8, r2, r8, ror #5
   141b8:	ldr	r3, [pc, #16]	; 141d0 <__assert_fail@plt+0x2fbc>
   141bc:	cmp	r0, #0
   141c0:	movne	r3, r0
   141c4:	ldr	r0, [r3, #4]
   141c8:	str	r1, [r3, #4]
   141cc:	bx	lr
   141d0:	andeq	r8, r2, r8, ror #5
   141d4:	ldr	r3, [pc, #44]	; 14208 <__assert_fail@plt+0x2ff4>
   141d8:	cmp	r0, #0
   141dc:	moveq	r0, r3
   141e0:	mov	ip, #10
   141e4:	cmp	r2, #0
   141e8:	cmpne	r1, #0
   141ec:	str	ip, [r0]
   141f0:	beq	14200 <__assert_fail@plt+0x2fec>
   141f4:	str	r1, [r0, #40]	; 0x28
   141f8:	str	r2, [r0, #44]	; 0x2c
   141fc:	bx	lr
   14200:	push	{r4, lr}
   14204:	bl	111f0 <abort@plt>
   14208:	andeq	r8, r2, r8, ror #5
   1420c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14210:	sub	sp, sp, #24
   14214:	ldr	ip, [pc, #108]	; 14288 <__assert_fail@plt+0x3074>
   14218:	ldr	r4, [sp, #56]	; 0x38
   1421c:	mov	r9, r2
   14220:	cmp	r4, #0
   14224:	moveq	r4, ip
   14228:	mov	sl, r3
   1422c:	mov	r7, r0
   14230:	mov	r8, r1
   14234:	bl	11118 <__errno_location@plt>
   14238:	ldr	r3, [r4, #44]	; 0x2c
   1423c:	mov	r1, r8
   14240:	ldr	r6, [r0]
   14244:	str	r3, [sp, #16]
   14248:	ldr	r2, [r4, #40]	; 0x28
   1424c:	add	r3, r4, #8
   14250:	str	r3, [sp, #8]
   14254:	str	r2, [sp, #12]
   14258:	ldr	r2, [r4, #4]
   1425c:	mov	r5, r0
   14260:	str	r2, [sp, #4]
   14264:	ldr	ip, [r4]
   14268:	mov	r3, sl
   1426c:	mov	r2, r9
   14270:	mov	r0, r7
   14274:	str	ip, [sp]
   14278:	bl	12760 <__assert_fail@plt+0x154c>
   1427c:	str	r6, [r5]
   14280:	add	sp, sp, #24
   14284:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14288:	andeq	r8, r2, r8, ror #5
   1428c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14290:	cmp	r3, #0
   14294:	sub	sp, sp, #44	; 0x2c
   14298:	ldr	r4, [pc, #192]	; 14360 <__assert_fail@plt+0x314c>
   1429c:	mov	r6, r2
   142a0:	movne	r4, r3
   142a4:	mov	r9, r1
   142a8:	mov	r8, r0
   142ac:	bl	11118 <__errno_location@plt>
   142b0:	ldr	r3, [r4, #44]	; 0x2c
   142b4:	ldr	r5, [r4, #4]
   142b8:	add	sl, r4, #8
   142bc:	cmp	r6, #0
   142c0:	orreq	r5, r5, #1
   142c4:	mov	r1, #0
   142c8:	ldr	r2, [r0]
   142cc:	str	r3, [sp, #16]
   142d0:	ldr	r3, [r4, #40]	; 0x28
   142d4:	stmib	sp, {r5, sl}
   142d8:	str	r3, [sp, #12]
   142dc:	ldr	r3, [r4]
   142e0:	mov	r7, r0
   142e4:	str	r2, [sp, #28]
   142e8:	str	r3, [sp]
   142ec:	mov	r2, r8
   142f0:	mov	r3, r9
   142f4:	mov	r0, r1
   142f8:	bl	12760 <__assert_fail@plt+0x154c>
   142fc:	add	r1, r0, #1
   14300:	mov	fp, r0
   14304:	mov	r0, r1
   14308:	str	r1, [sp, #36]	; 0x24
   1430c:	bl	150d8 <__assert_fail@plt+0x3ec4>
   14310:	ldr	r3, [r4, #44]	; 0x2c
   14314:	mov	r2, r8
   14318:	str	r3, [sp, #16]
   1431c:	ldr	r3, [r4, #40]	; 0x28
   14320:	str	r5, [sp, #4]
   14324:	str	r3, [sp, #12]
   14328:	str	sl, [sp, #8]
   1432c:	ldr	ip, [r4]
   14330:	ldr	r1, [sp, #36]	; 0x24
   14334:	mov	r3, r9
   14338:	str	ip, [sp]
   1433c:	str	r0, [sp, #32]
   14340:	bl	12760 <__assert_fail@plt+0x154c>
   14344:	ldr	r2, [sp, #28]
   14348:	cmp	r6, #0
   1434c:	str	r2, [r7]
   14350:	ldr	r0, [sp, #32]
   14354:	strne	fp, [r6]
   14358:	add	sp, sp, #44	; 0x2c
   1435c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14360:	andeq	r8, r2, r8, ror #5
   14364:	mov	r3, r2
   14368:	mov	r2, #0
   1436c:	b	1428c <__assert_fail@plt+0x3078>
   14370:	push	{r4, r5, r6, r7, r8, lr}
   14374:	ldr	r6, [pc, #112]	; 143ec <__assert_fail@plt+0x31d8>
   14378:	ldr	r3, [r6, #4]
   1437c:	ldr	r7, [r6]
   14380:	cmp	r3, #1
   14384:	ble	143a8 <__assert_fail@plt+0x3194>
   14388:	sub	r5, r7, #8
   1438c:	add	r5, r5, r3, lsl #3
   14390:	mov	r4, r7
   14394:	ldr	r0, [r4, #12]
   14398:	add	r4, r4, #8
   1439c:	bl	10fa4 <free@plt>
   143a0:	cmp	r4, r5
   143a4:	bne	14394 <__assert_fail@plt+0x3180>
   143a8:	ldr	r0, [r7, #4]
   143ac:	ldr	r4, [pc, #60]	; 143f0 <__assert_fail@plt+0x31dc>
   143b0:	cmp	r0, r4
   143b4:	beq	143c8 <__assert_fail@plt+0x31b4>
   143b8:	bl	10fa4 <free@plt>
   143bc:	mov	r3, #256	; 0x100
   143c0:	str	r4, [r6, #12]
   143c4:	str	r3, [r6, #8]
   143c8:	ldr	r4, [pc, #36]	; 143f4 <__assert_fail@plt+0x31e0>
   143cc:	cmp	r7, r4
   143d0:	beq	143e0 <__assert_fail@plt+0x31cc>
   143d4:	mov	r0, r7
   143d8:	bl	10fa4 <free@plt>
   143dc:	str	r4, [r6]
   143e0:	mov	r3, #1
   143e4:	str	r3, [r6, #4]
   143e8:	pop	{r4, r5, r6, r7, r8, pc}
   143ec:	andeq	r8, r2, r0, lsr #2
   143f0:	andeq	r8, r2, r8, ror #3
   143f4:	andeq	r8, r2, r8, lsr #2
   143f8:	ldr	r3, [pc, #4]	; 14404 <__assert_fail@plt+0x31f0>
   143fc:	mvn	r2, #0
   14400:	b	13f78 <__assert_fail@plt+0x2d64>
   14404:	andeq	r8, r2, r8, ror #5
   14408:	ldr	r3, [pc]	; 14410 <__assert_fail@plt+0x31fc>
   1440c:	b	13f78 <__assert_fail@plt+0x2d64>
   14410:	andeq	r8, r2, r8, ror #5
   14414:	mov	r1, r0
   14418:	ldr	r3, [pc, #8]	; 14428 <__assert_fail@plt+0x3214>
   1441c:	mvn	r2, #0
   14420:	mov	r0, #0
   14424:	b	13f78 <__assert_fail@plt+0x2d64>
   14428:	andeq	r8, r2, r8, ror #5
   1442c:	mov	r2, r1
   14430:	ldr	r3, [pc, #8]	; 14440 <__assert_fail@plt+0x322c>
   14434:	mov	r1, r0
   14438:	mov	r0, #0
   1443c:	b	13f78 <__assert_fail@plt+0x2d64>
   14440:	andeq	r8, r2, r8, ror #5
   14444:	push	{r4, r5, r6, lr}
   14448:	sub	sp, sp, #56	; 0x38
   1444c:	ldr	r4, [pc, #68]	; 14498 <__assert_fail@plt+0x3284>
   14450:	mov	r6, r2
   14454:	mov	r5, r0
   14458:	ldr	r3, [r4]
   1445c:	add	r0, sp, #4
   14460:	str	r3, [sp, #52]	; 0x34
   14464:	bl	125f0 <__assert_fail@plt+0x13dc>
   14468:	add	r3, sp, #4
   1446c:	mvn	r2, #0
   14470:	mov	r1, r6
   14474:	mov	r0, r5
   14478:	bl	13f78 <__assert_fail@plt+0x2d64>
   1447c:	ldr	r2, [sp, #52]	; 0x34
   14480:	ldr	r3, [r4]
   14484:	cmp	r2, r3
   14488:	bne	14494 <__assert_fail@plt+0x3280>
   1448c:	add	sp, sp, #56	; 0x38
   14490:	pop	{r4, r5, r6, pc}
   14494:	bl	10fec <__stack_chk_fail@plt>
   14498:	andeq	r7, r2, r0, lsl #30
   1449c:	push	{r4, r5, r6, r7, lr}
   144a0:	sub	sp, sp, #60	; 0x3c
   144a4:	ldr	r4, [pc, #72]	; 144f4 <__assert_fail@plt+0x32e0>
   144a8:	mov	r6, r2
   144ac:	mov	r7, r3
   144b0:	ldr	ip, [r4]
   144b4:	mov	r5, r0
   144b8:	add	r0, sp, #4
   144bc:	str	ip, [sp, #52]	; 0x34
   144c0:	bl	125f0 <__assert_fail@plt+0x13dc>
   144c4:	add	r3, sp, #4
   144c8:	mov	r2, r7
   144cc:	mov	r1, r6
   144d0:	mov	r0, r5
   144d4:	bl	13f78 <__assert_fail@plt+0x2d64>
   144d8:	ldr	r2, [sp, #52]	; 0x34
   144dc:	ldr	r3, [r4]
   144e0:	cmp	r2, r3
   144e4:	bne	144f0 <__assert_fail@plt+0x32dc>
   144e8:	add	sp, sp, #60	; 0x3c
   144ec:	pop	{r4, r5, r6, r7, pc}
   144f0:	bl	10fec <__stack_chk_fail@plt>
   144f4:	andeq	r7, r2, r0, lsl #30
   144f8:	mov	r2, r1
   144fc:	mov	r1, r0
   14500:	mov	r0, #0
   14504:	b	14444 <__assert_fail@plt+0x3230>
   14508:	mov	r3, r2
   1450c:	mov	r2, r1
   14510:	mov	r1, r0
   14514:	mov	r0, #0
   14518:	b	1449c <__assert_fail@plt+0x3288>
   1451c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14520:	mov	r4, r2
   14524:	ldr	lr, [pc, #128]	; 145ac <__assert_fail@plt+0x3398>
   14528:	mov	r8, r0
   1452c:	mov	r9, r1
   14530:	ldm	lr!, {r0, r1, r2, r3}
   14534:	sub	sp, sp, #60	; 0x3c
   14538:	add	ip, sp, #4
   1453c:	lsr	r6, r4, #5
   14540:	stmia	ip!, {r0, r1, r2, r3}
   14544:	add	r7, sp, #12
   14548:	ldm	lr!, {r0, r1, r2, r3}
   1454c:	and	r4, r4, #31
   14550:	ldr	r5, [pc, #88]	; 145b0 <__assert_fail@plt+0x339c>
   14554:	stmia	ip!, {r0, r1, r2, r3}
   14558:	ldm	lr, {r0, r1, r2, r3}
   1455c:	stm	ip, {r0, r1, r2, r3}
   14560:	mov	r2, r9
   14564:	ldr	r3, [r7, r6, lsl #2]
   14568:	ldr	ip, [r5]
   1456c:	mov	r1, r8
   14570:	mvn	r0, r3, lsr r4
   14574:	and	r0, r0, #1
   14578:	str	ip, [sp, #52]	; 0x34
   1457c:	eor	r4, r3, r0, lsl r4
   14580:	add	r3, sp, #4
   14584:	mov	r0, #0
   14588:	str	r4, [r7, r6, lsl #2]
   1458c:	bl	13f78 <__assert_fail@plt+0x2d64>
   14590:	ldr	r2, [sp, #52]	; 0x34
   14594:	ldr	r3, [r5]
   14598:	cmp	r2, r3
   1459c:	bne	145a8 <__assert_fail@plt+0x3394>
   145a0:	add	sp, sp, #60	; 0x3c
   145a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   145a8:	bl	10fec <__stack_chk_fail@plt>
   145ac:	andeq	r8, r2, r8, ror #5
   145b0:	andeq	r7, r2, r0, lsl #30
   145b4:	mov	r2, r1
   145b8:	mvn	r1, #0
   145bc:	b	1451c <__assert_fail@plt+0x3308>
   145c0:	mov	r2, #58	; 0x3a
   145c4:	mvn	r1, #0
   145c8:	b	1451c <__assert_fail@plt+0x3308>
   145cc:	mov	r2, #58	; 0x3a
   145d0:	b	1451c <__assert_fail@plt+0x3308>
   145d4:	push	{r4, r5, r6, r7, r8, lr}
   145d8:	sub	sp, sp, #104	; 0x68
   145dc:	ldr	r5, [pc, #120]	; 1465c <__assert_fail@plt+0x3448>
   145e0:	mov	r6, r0
   145e4:	mov	r0, sp
   145e8:	ldr	r3, [r5]
   145ec:	mov	r7, r2
   145f0:	str	r3, [sp, #100]	; 0x64
   145f4:	bl	125f0 <__assert_fail@plt+0x13dc>
   145f8:	mov	ip, sp
   145fc:	add	lr, sp, #52	; 0x34
   14600:	ldm	ip!, {r0, r1, r2, r3}
   14604:	stmia	lr!, {r0, r1, r2, r3}
   14608:	ldm	ip!, {r0, r1, r2, r3}
   1460c:	ldr	r8, [sp, #64]	; 0x40
   14610:	stmia	lr!, {r0, r1, r2, r3}
   14614:	mvn	r4, r8
   14618:	ldm	ip, {r0, r1, r2, r3}
   1461c:	and	ip, r4, #67108864	; 0x4000000
   14620:	eor	ip, ip, r8
   14624:	str	ip, [sp, #64]	; 0x40
   14628:	stm	lr, {r0, r1, r2, r3}
   1462c:	add	r3, sp, #52	; 0x34
   14630:	mvn	r2, #0
   14634:	mov	r1, r7
   14638:	mov	r0, r6
   1463c:	bl	13f78 <__assert_fail@plt+0x2d64>
   14640:	ldr	r2, [sp, #100]	; 0x64
   14644:	ldr	r3, [r5]
   14648:	cmp	r2, r3
   1464c:	bne	14658 <__assert_fail@plt+0x3444>
   14650:	add	sp, sp, #104	; 0x68
   14654:	pop	{r4, r5, r6, r7, r8, pc}
   14658:	bl	10fec <__stack_chk_fail@plt>
   1465c:	andeq	r7, r2, r0, lsl #30
   14660:	push	{r4, r5, r6, r7, r8, r9, lr}
   14664:	mov	r6, r1
   14668:	ldr	lr, [pc, #132]	; 146f4 <__assert_fail@plt+0x34e0>
   1466c:	mov	r5, r2
   14670:	mov	r8, r0
   14674:	mov	r9, r3
   14678:	ldm	lr!, {r0, r1, r2, r3}
   1467c:	sub	sp, sp, #60	; 0x3c
   14680:	add	ip, sp, #4
   14684:	ldr	r4, [pc, #108]	; 146f8 <__assert_fail@plt+0x34e4>
   14688:	stmia	ip!, {r0, r1, r2, r3}
   1468c:	mov	r7, #10
   14690:	ldm	lr!, {r0, r1, r2, r3}
   14694:	cmp	r5, #0
   14698:	cmpne	r6, #0
   1469c:	str	r7, [sp, #4]
   146a0:	stmia	ip!, {r0, r1, r2, r3}
   146a4:	ldm	lr, {r0, r1, r2, r3}
   146a8:	ldr	lr, [r4]
   146ac:	stm	ip, {r0, r1, r2, r3}
   146b0:	str	lr, [sp, #52]	; 0x34
   146b4:	beq	146f0 <__assert_fail@plt+0x34dc>
   146b8:	add	r3, sp, #4
   146bc:	ldr	r2, [sp, #88]	; 0x58
   146c0:	mov	r1, r9
   146c4:	mov	r0, r8
   146c8:	str	r6, [sp, #44]	; 0x2c
   146cc:	str	r5, [sp, #48]	; 0x30
   146d0:	bl	13f78 <__assert_fail@plt+0x2d64>
   146d4:	ldr	r2, [sp, #52]	; 0x34
   146d8:	ldr	r3, [r4]
   146dc:	cmp	r2, r3
   146e0:	bne	146ec <__assert_fail@plt+0x34d8>
   146e4:	add	sp, sp, #60	; 0x3c
   146e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   146ec:	bl	10fec <__stack_chk_fail@plt>
   146f0:	bl	111f0 <abort@plt>
   146f4:	andeq	r8, r2, r8, ror #5
   146f8:	andeq	r7, r2, r0, lsl #30
   146fc:	push	{lr}		; (str lr, [sp, #-4]!)
   14700:	sub	sp, sp, #12
   14704:	mvn	ip, #0
   14708:	str	ip, [sp]
   1470c:	bl	14660 <__assert_fail@plt+0x344c>
   14710:	add	sp, sp, #12
   14714:	pop	{pc}		; (ldr pc, [sp], #4)
   14718:	push	{lr}		; (str lr, [sp, #-4]!)
   1471c:	sub	sp, sp, #12
   14720:	mvn	ip, #0
   14724:	mov	r3, r2
   14728:	str	ip, [sp]
   1472c:	mov	r2, r1
   14730:	mov	r1, r0
   14734:	mov	r0, #0
   14738:	bl	14660 <__assert_fail@plt+0x344c>
   1473c:	add	sp, sp, #12
   14740:	pop	{pc}		; (ldr pc, [sp], #4)
   14744:	push	{lr}		; (str lr, [sp, #-4]!)
   14748:	sub	sp, sp, #12
   1474c:	str	r3, [sp]
   14750:	mov	r3, r2
   14754:	mov	r2, r1
   14758:	mov	r1, r0
   1475c:	mov	r0, #0
   14760:	bl	14660 <__assert_fail@plt+0x344c>
   14764:	add	sp, sp, #12
   14768:	pop	{pc}		; (ldr pc, [sp], #4)
   1476c:	ldr	r3, [pc]	; 14774 <__assert_fail@plt+0x3560>
   14770:	b	13f78 <__assert_fail@plt+0x2d64>
   14774:	andeq	r8, r2, r0, lsr r1
   14778:	mov	r2, r1
   1477c:	ldr	r3, [pc, #8]	; 1478c <__assert_fail@plt+0x3578>
   14780:	mov	r1, r0
   14784:	mov	r0, #0
   14788:	b	13f78 <__assert_fail@plt+0x2d64>
   1478c:	andeq	r8, r2, r0, lsr r1
   14790:	ldr	r3, [pc, #4]	; 1479c <__assert_fail@plt+0x3588>
   14794:	mvn	r2, #0
   14798:	b	13f78 <__assert_fail@plt+0x2d64>
   1479c:	andeq	r8, r2, r0, lsr r1
   147a0:	mov	r1, r0
   147a4:	ldr	r3, [pc, #8]	; 147b4 <__assert_fail@plt+0x35a0>
   147a8:	mvn	r2, #0
   147ac:	mov	r0, #0
   147b0:	b	13f78 <__assert_fail@plt+0x2d64>
   147b4:	andeq	r8, r2, r0, lsr r1
   147b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147bc:	sub	sp, sp, #52	; 0x34
   147c0:	ldr	r8, [pc, #732]	; 14aa4 <__assert_fail@plt+0x3890>
   147c4:	ldrd	r6, [sp, #88]	; 0x58
   147c8:	mov	r9, r2
   147cc:	ldr	r2, [r8]
   147d0:	subs	sl, r3, #0
   147d4:	str	r2, [sp, #44]	; 0x2c
   147d8:	ldr	r2, [r9]
   147dc:	ldrne	fp, [sl]
   147e0:	mvneq	fp, #0
   147e4:	cmp	r6, #0
   147e8:	str	r2, [sp, #8]
   147ec:	movne	r2, #0
   147f0:	strne	r2, [r6]
   147f4:	cmp	r7, #0
   147f8:	movne	r2, #0
   147fc:	strne	r2, [r7]
   14800:	cmp	r1, #0
   14804:	mov	r3, r1
   14808:	beq	1496c <__assert_fail@plt+0x3758>
   1480c:	subs	r4, r1, r0
   14810:	bne	14838 <__assert_fail@plt+0x3624>
   14814:	ldrb	r2, [r1, #1]
   14818:	cmp	r2, #0
   1481c:	addne	r4, r1, #1
   14820:	beq	149bc <__assert_fail@plt+0x37a8>
   14824:	cmp	r4, #0
   14828:	moveq	r3, r4
   1482c:	beq	1497c <__assert_fail@plt+0x3768>
   14830:	mov	r5, #0
   14834:	b	148bc <__assert_fail@plt+0x36a8>
   14838:	str	r1, [sp, #12]
   1483c:	add	r1, r4, #1
   14840:	bl	152e0 <__assert_fail@plt+0x40cc>
   14844:	ldr	r3, [sp, #12]
   14848:	mov	r2, #0
   1484c:	strb	r2, [r0, r4]
   14850:	ldrb	r2, [r3, #1]
   14854:	mov	r5, r0
   14858:	cmp	r2, #0
   1485c:	beq	14904 <__assert_fail@plt+0x36f0>
   14860:	cmp	r0, #0
   14864:	add	r4, r3, #1
   14868:	beq	14824 <__assert_fail@plt+0x3610>
   1486c:	clz	r1, r4
   14870:	lsr	r1, r1, #5
   14874:	ldrb	r2, [r5]
   14878:	cmp	r3, #0
   1487c:	moveq	r1, #0
   14880:	cmp	r2, #43	; 0x2b
   14884:	beq	14920 <__assert_fail@plt+0x370c>
   14888:	mov	r0, r5
   1488c:	str	r1, [sp, #8]
   14890:	bl	10f5c <getpwnam@plt>
   14894:	ldr	r1, [sp, #8]
   14898:	cmp	r0, #0
   1489c:	beq	14920 <__assert_fail@plt+0x370c>
   148a0:	ldr	r3, [r0, #8]
   148a4:	cmp	r1, #0
   148a8:	str	r3, [sp, #8]
   148ac:	bne	149c4 <__assert_fail@plt+0x37b0>
   148b0:	bl	111a8 <endpwent@plt>
   148b4:	cmp	r4, #0
   148b8:	beq	148ec <__assert_fail@plt+0x36d8>
   148bc:	ldrb	r3, [r4]
   148c0:	cmp	r3, #43	; 0x2b
   148c4:	beq	149f8 <__assert_fail@plt+0x37e4>
   148c8:	mov	r0, r4
   148cc:	bl	11208 <getgrnam@plt>
   148d0:	cmp	r0, #0
   148d4:	ldrne	fp, [r0, #8]
   148d8:	beq	149f8 <__assert_fail@plt+0x37e4>
   148dc:	bl	10f38 <endgrent@plt>
   148e0:	mov	r0, r4
   148e4:	bl	15304 <__assert_fail@plt+0x40f0>
   148e8:	mov	r4, r0
   148ec:	mov	r3, r5
   148f0:	b	1497c <__assert_fail@plt+0x3768>
   148f4:	str	r1, [sp, #12]
   148f8:	bl	15304 <__assert_fail@plt+0x40f0>
   148fc:	ldr	r3, [sp, #12]
   14900:	mov	r5, r0
   14904:	cmp	r5, #0
   14908:	moveq	r3, r5
   1490c:	moveq	r4, r3
   14910:	beq	1497c <__assert_fail@plt+0x3768>
   14914:	mov	r1, #1
   14918:	mov	r4, #0
   1491c:	b	14874 <__assert_fail@plt+0x3660>
   14920:	cmp	r1, #0
   14924:	beq	14a40 <__assert_fail@plt+0x382c>
   14928:	bl	111a8 <endpwent@plt>
   1492c:	ldr	r6, [pc, #372]	; 14aa8 <__assert_fail@plt+0x3894>
   14930:	mov	r4, #0
   14934:	mov	r0, r5
   14938:	bl	10fa4 <free@plt>
   1493c:	mov	r0, r4
   14940:	bl	10fa4 <free@plt>
   14944:	mov	r1, r6
   14948:	mov	r2, #5
   1494c:	mov	r0, #0
   14950:	bl	10fe0 <dcgettext@plt>
   14954:	ldr	r2, [sp, #44]	; 0x2c
   14958:	ldr	r3, [r8]
   1495c:	cmp	r2, r3
   14960:	bne	14aa0 <__assert_fail@plt+0x388c>
   14964:	add	sp, sp, #52	; 0x34
   14968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1496c:	ldrb	r2, [r0]
   14970:	cmp	r2, #0
   14974:	bne	148f4 <__assert_fail@plt+0x36e0>
   14978:	mov	r4, r3
   1497c:	ldr	r2, [sp, #8]
   14980:	cmp	sl, #0
   14984:	str	r2, [r9]
   14988:	strne	fp, [sl]
   1498c:	cmp	r6, #0
   14990:	strne	r3, [r6]
   14994:	movne	r3, #0
   14998:	cmp	r7, #0
   1499c:	strne	r4, [r7]
   149a0:	movne	r4, #0
   149a4:	mov	r0, r3
   149a8:	bl	10fa4 <free@plt>
   149ac:	mov	r0, r4
   149b0:	bl	10fa4 <free@plt>
   149b4:	mov	r0, #0
   149b8:	b	14954 <__assert_fail@plt+0x3740>
   149bc:	mov	r3, r2
   149c0:	b	14978 <__assert_fail@plt+0x3764>
   149c4:	ldr	fp, [r0, #12]
   149c8:	mov	r0, fp
   149cc:	bl	111fc <getgrgid@plt>
   149d0:	subs	r1, r0, #0
   149d4:	beq	14a90 <__assert_fail@plt+0x387c>
   149d8:	ldr	r0, [r1]
   149dc:	bl	15304 <__assert_fail@plt+0x40f0>
   149e0:	str	r5, [sp, #12]
   149e4:	mov	r4, r0
   149e8:	bl	10f38 <endgrent@plt>
   149ec:	bl	111a8 <endpwent@plt>
   149f0:	ldr	r3, [sp, #12]
   149f4:	b	1497c <__assert_fail@plt+0x3768>
   149f8:	ldr	r2, [pc, #172]	; 14aac <__assert_fail@plt+0x3898>
   149fc:	add	r3, sp, #16
   14a00:	str	r2, [sp]
   14a04:	mov	r1, #0
   14a08:	mov	r2, #10
   14a0c:	mov	r0, r4
   14a10:	bl	15390 <__assert_fail@plt+0x417c>
   14a14:	cmp	r0, #0
   14a18:	bne	14a28 <__assert_fail@plt+0x3814>
   14a1c:	ldr	fp, [sp, #16]
   14a20:	cmn	fp, #1
   14a24:	bne	148dc <__assert_fail@plt+0x36c8>
   14a28:	bl	10f38 <endgrent@plt>
   14a2c:	mov	r0, r4
   14a30:	bl	15304 <__assert_fail@plt+0x40f0>
   14a34:	ldr	r6, [pc, #116]	; 14ab0 <__assert_fail@plt+0x389c>
   14a38:	mov	r4, r0
   14a3c:	b	14934 <__assert_fail@plt+0x3720>
   14a40:	ldr	r3, [pc, #100]	; 14aac <__assert_fail@plt+0x3898>
   14a44:	mov	r2, #10
   14a48:	str	r3, [sp]
   14a4c:	mov	r0, r5
   14a50:	add	r3, sp, #16
   14a54:	bl	15390 <__assert_fail@plt+0x417c>
   14a58:	cmp	r0, #0
   14a5c:	bne	14a80 <__assert_fail@plt+0x386c>
   14a60:	ldr	r3, [sp, #16]
   14a64:	cmn	r3, #1
   14a68:	str	r3, [sp, #8]
   14a6c:	beq	14a80 <__assert_fail@plt+0x386c>
   14a70:	bl	111a8 <endpwent@plt>
   14a74:	cmp	r4, #0
   14a78:	beq	148ec <__assert_fail@plt+0x36d8>
   14a7c:	b	148bc <__assert_fail@plt+0x36a8>
   14a80:	bl	111a8 <endpwent@plt>
   14a84:	ldr	r6, [pc, #40]	; 14ab4 <__assert_fail@plt+0x38a0>
   14a88:	mov	r4, #0
   14a8c:	b	14934 <__assert_fail@plt+0x3720>
   14a90:	add	r2, sp, #20
   14a94:	mov	r0, fp
   14a98:	bl	124d8 <__assert_fail@plt+0x12c4>
   14a9c:	b	149dc <__assert_fail@plt+0x37c8>
   14aa0:	bl	10fec <__stack_chk_fail@plt>
   14aa4:	andeq	r7, r2, r0, lsl #30
   14aa8:	andeq	r6, r1, r4, ror sp
   14aac:	andeq	r7, r1, r8, ror r0
   14ab0:	andeq	r6, r1, r4, ror #26
   14ab4:	andeq	r6, r1, r4, lsl #27
   14ab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14abc:	sub	sp, sp, #8
   14ac0:	subs	r6, r2, #0
   14ac4:	mov	r7, r1
   14ac8:	mov	r8, r3
   14acc:	ldr	r9, [sp, #40]	; 0x28
   14ad0:	beq	14b4c <__assert_fail@plt+0x3938>
   14ad4:	mov	r1, #58	; 0x3a
   14ad8:	mov	r5, r0
   14adc:	bl	1110c <strchr@plt>
   14ae0:	strd	r8, [sp]
   14ae4:	mov	r3, r6
   14ae8:	mov	r2, r7
   14aec:	mov	sl, r0
   14af0:	mov	r1, r0
   14af4:	mov	r0, r5
   14af8:	bl	147b8 <__assert_fail@plt+0x35a4>
   14afc:	cmp	sl, #0
   14b00:	mov	r4, r0
   14b04:	bne	14b40 <__assert_fail@plt+0x392c>
   14b08:	cmp	r0, #0
   14b0c:	beq	14b70 <__assert_fail@plt+0x395c>
   14b10:	mov	r1, #46	; 0x2e
   14b14:	mov	r0, r5
   14b18:	bl	1110c <strchr@plt>
   14b1c:	subs	r1, r0, #0
   14b20:	beq	14b40 <__assert_fail@plt+0x392c>
   14b24:	strd	r8, [sp]
   14b28:	mov	r3, r6
   14b2c:	mov	r2, r7
   14b30:	mov	r0, r5
   14b34:	bl	147b8 <__assert_fail@plt+0x35a4>
   14b38:	cmp	r0, #0
   14b3c:	beq	14b70 <__assert_fail@plt+0x395c>
   14b40:	mov	r0, r4
   14b44:	add	sp, sp, #8
   14b48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b4c:	mov	r2, r1
   14b50:	strd	r8, [sp]
   14b54:	mov	r3, r6
   14b58:	mov	r1, r6
   14b5c:	bl	147b8 <__assert_fail@plt+0x35a4>
   14b60:	mov	r4, r0
   14b64:	mov	r0, r4
   14b68:	add	sp, sp, #8
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b70:	mov	r4, #0
   14b74:	mov	r0, r4
   14b78:	add	sp, sp, #8
   14b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14b80:	push	{r4, r5, r6, lr}
   14b84:	sub	sp, sp, #32
   14b88:	cmp	r1, #0
   14b8c:	mov	r5, r0
   14b90:	ldr	r4, [sp, #48]	; 0x30
   14b94:	ldr	r6, [sp, #52]	; 0x34
   14b98:	beq	14c28 <__assert_fail@plt+0x3a14>
   14b9c:	strd	r2, [sp]
   14ba0:	mov	r3, r1
   14ba4:	ldr	r2, [pc, #828]	; 14ee8 <__assert_fail@plt+0x3cd4>
   14ba8:	mov	r1, #1
   14bac:	bl	1116c <__fprintf_chk@plt>
   14bb0:	mov	r2, #5
   14bb4:	ldr	r1, [pc, #816]	; 14eec <__assert_fail@plt+0x3cd8>
   14bb8:	mov	r0, #0
   14bbc:	bl	10fe0 <dcgettext@plt>
   14bc0:	ldr	r3, [pc, #808]	; 14ef0 <__assert_fail@plt+0x3cdc>
   14bc4:	ldr	r2, [pc, #808]	; 14ef4 <__assert_fail@plt+0x3ce0>
   14bc8:	str	r3, [sp]
   14bcc:	mov	r1, #1
   14bd0:	mov	r3, r0
   14bd4:	mov	r0, r5
   14bd8:	bl	1116c <__fprintf_chk@plt>
   14bdc:	ldr	r1, [pc, #788]	; 14ef8 <__assert_fail@plt+0x3ce4>
   14be0:	mov	r2, #5
   14be4:	mov	r0, #0
   14be8:	bl	10fe0 <dcgettext@plt>
   14bec:	mov	r1, r5
   14bf0:	bl	10f44 <fputs_unlocked@plt>
   14bf4:	cmp	r6, #9
   14bf8:	ldrls	pc, [pc, r6, lsl #2]
   14bfc:	b	14ed8 <__assert_fail@plt+0x3cc4>
   14c00:	andeq	r4, r1, r4, ror #29
   14c04:	andeq	r4, r1, ip, lsr #25
   14c08:	ldrdeq	r4, [r1], -r8
   14c0c:	andeq	r4, r1, ip, lsl #26
   14c10:	andeq	r4, r1, r8, asr #26
   14c14:	andeq	r4, r1, r8, lsl #27
   14c18:	ldrdeq	r4, [r1], -r0
   14c1c:	andeq	r4, r1, r0, lsr #28
   14c20:	andeq	r4, r1, r8, ror lr
   14c24:	andeq	r4, r1, r0, asr #24
   14c28:	str	r3, [sp]
   14c2c:	mov	r1, #1
   14c30:	mov	r3, r2
   14c34:	ldr	r2, [pc, #704]	; 14efc <__assert_fail@plt+0x3ce8>
   14c38:	bl	1116c <__fprintf_chk@plt>
   14c3c:	b	14bb0 <__assert_fail@plt+0x399c>
   14c40:	ldr	r1, [pc, #696]	; 14f00 <__assert_fail@plt+0x3cec>
   14c44:	mov	r2, #5
   14c48:	mov	r0, #0
   14c4c:	bl	10fe0 <dcgettext@plt>
   14c50:	ldr	r2, [r4, #32]
   14c54:	ldr	r3, [r4, #28]
   14c58:	ldr	r1, [r4, #24]
   14c5c:	str	r2, [sp, #28]
   14c60:	ldr	r2, [r4, #20]
   14c64:	str	r3, [sp, #24]
   14c68:	ldr	r3, [r4, #16]
   14c6c:	str	r1, [sp, #20]
   14c70:	ldr	r1, [r4, #12]
   14c74:	str	r2, [sp, #16]
   14c78:	ldr	r2, [r4, #8]
   14c7c:	str	r3, [sp, #12]
   14c80:	ldr	r3, [r4, #4]
   14c84:	str	r1, [sp, #8]
   14c88:	str	r2, [sp, #4]
   14c8c:	str	r3, [sp]
   14c90:	mov	r1, #1
   14c94:	ldr	r3, [r4]
   14c98:	mov	r2, r0
   14c9c:	mov	r0, r5
   14ca0:	bl	1116c <__fprintf_chk@plt>
   14ca4:	add	sp, sp, #32
   14ca8:	pop	{r4, r5, r6, pc}
   14cac:	mov	r2, #5
   14cb0:	ldr	r1, [pc, #588]	; 14f04 <__assert_fail@plt+0x3cf0>
   14cb4:	mov	r0, #0
   14cb8:	bl	10fe0 <dcgettext@plt>
   14cbc:	ldr	r3, [r4]
   14cc0:	mov	r1, #1
   14cc4:	mov	r2, r0
   14cc8:	mov	r0, r5
   14ccc:	add	sp, sp, #32
   14cd0:	pop	{r4, r5, r6, lr}
   14cd4:	b	1116c <__fprintf_chk@plt>
   14cd8:	mov	r2, #5
   14cdc:	ldr	r1, [pc, #548]	; 14f08 <__assert_fail@plt+0x3cf4>
   14ce0:	mov	r0, #0
   14ce4:	bl	10fe0 <dcgettext@plt>
   14ce8:	ldr	r2, [r4, #4]
   14cec:	ldr	r3, [r4]
   14cf0:	mov	r1, #1
   14cf4:	str	r2, [sp, #48]	; 0x30
   14cf8:	mov	r2, r0
   14cfc:	mov	r0, r5
   14d00:	add	sp, sp, #32
   14d04:	pop	{r4, r5, r6, lr}
   14d08:	b	1116c <__fprintf_chk@plt>
   14d0c:	mov	r2, #5
   14d10:	ldr	r1, [pc, #500]	; 14f0c <__assert_fail@plt+0x3cf8>
   14d14:	mov	r0, #0
   14d18:	bl	10fe0 <dcgettext@plt>
   14d1c:	ldr	r2, [r4, #8]
   14d20:	ldr	r3, [r4, #4]
   14d24:	mov	r1, #1
   14d28:	str	r2, [sp, #52]	; 0x34
   14d2c:	str	r3, [sp, #48]	; 0x30
   14d30:	ldr	r3, [r4]
   14d34:	mov	r2, r0
   14d38:	mov	r0, r5
   14d3c:	add	sp, sp, #32
   14d40:	pop	{r4, r5, r6, lr}
   14d44:	b	1116c <__fprintf_chk@plt>
   14d48:	mov	r2, #5
   14d4c:	ldr	r1, [pc, #444]	; 14f10 <__assert_fail@plt+0x3cfc>
   14d50:	mov	r0, #0
   14d54:	bl	10fe0 <dcgettext@plt>
   14d58:	ldr	r1, [r4, #12]
   14d5c:	ldr	r2, [r4, #8]
   14d60:	ldr	r3, [r4, #4]
   14d64:	str	r1, [sp, #8]
   14d68:	str	r2, [sp, #4]
   14d6c:	str	r3, [sp]
   14d70:	mov	r1, #1
   14d74:	ldr	r3, [r4]
   14d78:	mov	r2, r0
   14d7c:	mov	r0, r5
   14d80:	bl	1116c <__fprintf_chk@plt>
   14d84:	b	14ca4 <__assert_fail@plt+0x3a90>
   14d88:	mov	r2, #5
   14d8c:	ldr	r1, [pc, #384]	; 14f14 <__assert_fail@plt+0x3d00>
   14d90:	mov	r0, #0
   14d94:	bl	10fe0 <dcgettext@plt>
   14d98:	ldr	r3, [r4, #16]
   14d9c:	ldr	r1, [r4, #12]
   14da0:	ldr	r2, [r4, #8]
   14da4:	str	r3, [sp, #12]
   14da8:	ldr	r3, [r4, #4]
   14dac:	str	r1, [sp, #8]
   14db0:	str	r2, [sp, #4]
   14db4:	str	r3, [sp]
   14db8:	mov	r1, #1
   14dbc:	ldr	r3, [r4]
   14dc0:	mov	r2, r0
   14dc4:	mov	r0, r5
   14dc8:	bl	1116c <__fprintf_chk@plt>
   14dcc:	b	14ca4 <__assert_fail@plt+0x3a90>
   14dd0:	mov	r2, #5
   14dd4:	ldr	r1, [pc, #316]	; 14f18 <__assert_fail@plt+0x3d04>
   14dd8:	mov	r0, #0
   14ddc:	bl	10fe0 <dcgettext@plt>
   14de0:	ldr	r2, [r4, #20]
   14de4:	ldr	r3, [r4, #16]
   14de8:	ldr	r1, [r4, #12]
   14dec:	str	r2, [sp, #16]
   14df0:	ldr	r2, [r4, #8]
   14df4:	str	r3, [sp, #12]
   14df8:	ldr	r3, [r4, #4]
   14dfc:	str	r1, [sp, #8]
   14e00:	str	r2, [sp, #4]
   14e04:	str	r3, [sp]
   14e08:	mov	r1, #1
   14e0c:	ldr	r3, [r4]
   14e10:	mov	r2, r0
   14e14:	mov	r0, r5
   14e18:	bl	1116c <__fprintf_chk@plt>
   14e1c:	b	14ca4 <__assert_fail@plt+0x3a90>
   14e20:	mov	r2, #5
   14e24:	ldr	r1, [pc, #240]	; 14f1c <__assert_fail@plt+0x3d08>
   14e28:	mov	r0, #0
   14e2c:	bl	10fe0 <dcgettext@plt>
   14e30:	ldr	r1, [r4, #24]
   14e34:	ldr	r2, [r4, #20]
   14e38:	ldr	r3, [r4, #16]
   14e3c:	str	r1, [sp, #20]
   14e40:	ldr	r1, [r4, #12]
   14e44:	str	r2, [sp, #16]
   14e48:	ldr	r2, [r4, #8]
   14e4c:	str	r3, [sp, #12]
   14e50:	ldr	r3, [r4, #4]
   14e54:	str	r1, [sp, #8]
   14e58:	str	r2, [sp, #4]
   14e5c:	str	r3, [sp]
   14e60:	mov	r1, #1
   14e64:	ldr	r3, [r4]
   14e68:	mov	r2, r0
   14e6c:	mov	r0, r5
   14e70:	bl	1116c <__fprintf_chk@plt>
   14e74:	b	14ca4 <__assert_fail@plt+0x3a90>
   14e78:	mov	r2, #5
   14e7c:	ldr	r1, [pc, #156]	; 14f20 <__assert_fail@plt+0x3d0c>
   14e80:	mov	r0, #0
   14e84:	bl	10fe0 <dcgettext@plt>
   14e88:	ldr	r3, [r4, #28]
   14e8c:	ldr	r1, [r4, #24]
   14e90:	ldr	r2, [r4, #20]
   14e94:	str	r3, [sp, #24]
   14e98:	ldr	r3, [r4, #16]
   14e9c:	str	r1, [sp, #20]
   14ea0:	ldr	r1, [r4, #12]
   14ea4:	str	r2, [sp, #16]
   14ea8:	ldr	r2, [r4, #8]
   14eac:	str	r3, [sp, #12]
   14eb0:	ldr	r3, [r4, #4]
   14eb4:	str	r1, [sp, #8]
   14eb8:	str	r2, [sp, #4]
   14ebc:	str	r3, [sp]
   14ec0:	mov	r1, #1
   14ec4:	ldr	r3, [r4]
   14ec8:	mov	r2, r0
   14ecc:	mov	r0, r5
   14ed0:	bl	1116c <__fprintf_chk@plt>
   14ed4:	b	14ca4 <__assert_fail@plt+0x3a90>
   14ed8:	mov	r2, #5
   14edc:	ldr	r1, [pc, #64]	; 14f24 <__assert_fail@plt+0x3d10>
   14ee0:	b	14c48 <__assert_fail@plt+0x3a34>
   14ee4:	bl	111f0 <abort@plt>
   14ee8:	muleq	r1, r4, sp
   14eec:	andeq	r6, r1, r8, lsr #27
   14ef0:	andeq	r0, r0, r2, ror #15
   14ef4:	andeq	r7, r1, ip, ror r0
   14ef8:	andeq	r6, r1, ip, lsr #27
   14efc:	andeq	r6, r1, r0, lsr #27
   14f00:	andeq	r6, r1, r4, lsl #31
   14f04:	andeq	r6, r1, r8, ror lr
   14f08:	andeq	r6, r1, r8, lsl #29
   14f0c:	andeq	r6, r1, r0, lsr #29
   14f10:			; <UNDEFINED> instruction: 0x00016ebc
   14f14:	ldrdeq	r6, [r1], -ip
   14f18:	andeq	r6, r1, r0, lsl #30
   14f1c:	andeq	r6, r1, r8, lsr #30
   14f20:	andeq	r6, r1, r4, asr pc
   14f24:			; <UNDEFINED> instruction: 0x00016fb8
   14f28:	push	{r4, r5, lr}
   14f2c:	sub	sp, sp, #12
   14f30:	ldr	r5, [sp, #24]
   14f34:	ldr	ip, [r5]
   14f38:	cmp	ip, #0
   14f3c:	beq	14f58 <__assert_fail@plt+0x3d44>
   14f40:	mov	lr, r5
   14f44:	mov	ip, #0
   14f48:	ldr	r4, [lr, #4]!
   14f4c:	add	ip, ip, #1
   14f50:	cmp	r4, #0
   14f54:	bne	14f48 <__assert_fail@plt+0x3d34>
   14f58:	stm	sp, {r5, ip}
   14f5c:	bl	14b80 <__assert_fail@plt+0x396c>
   14f60:	add	sp, sp, #12
   14f64:	pop	{r4, r5, pc}
   14f68:	push	{r4, r5, r6, lr}
   14f6c:	sub	sp, sp, #56	; 0x38
   14f70:	ldr	r6, [pc, #88]	; 14fd0 <__assert_fail@plt+0x3dbc>
   14f74:	ldr	r5, [sp, #72]	; 0x48
   14f78:	add	r4, sp, #8
   14f7c:	ldr	ip, [r6]
   14f80:	str	ip, [sp, #52]	; 0x34
   14f84:	mov	ip, #0
   14f88:	ldr	lr, [r5], #4
   14f8c:	cmp	lr, #0
   14f90:	str	lr, [r4, #4]!
   14f94:	beq	14fa4 <__assert_fail@plt+0x3d90>
   14f98:	add	ip, ip, #1
   14f9c:	cmp	ip, #10
   14fa0:	bne	14f88 <__assert_fail@plt+0x3d74>
   14fa4:	add	lr, sp, #12
   14fa8:	str	ip, [sp, #4]
   14fac:	str	lr, [sp]
   14fb0:	bl	14b80 <__assert_fail@plt+0x396c>
   14fb4:	ldr	r2, [sp, #52]	; 0x34
   14fb8:	ldr	r3, [r6]
   14fbc:	cmp	r2, r3
   14fc0:	bne	14fcc <__assert_fail@plt+0x3db8>
   14fc4:	add	sp, sp, #56	; 0x38
   14fc8:	pop	{r4, r5, r6, pc}
   14fcc:	bl	10fec <__stack_chk_fail@plt>
   14fd0:	andeq	r7, r2, r0, lsl #30
   14fd4:	push	{r3}		; (str r3, [sp, #-4]!)
   14fd8:	mov	ip, #0
   14fdc:	push	{r4, r5, r6, lr}
   14fe0:	sub	sp, sp, #60	; 0x3c
   14fe4:	ldr	r6, [pc, #100]	; 15050 <__assert_fail@plt+0x3e3c>
   14fe8:	add	r5, sp, #8
   14fec:	add	r4, sp, #80	; 0x50
   14ff0:	ldr	r3, [r6]
   14ff4:	str	r4, [sp, #8]
   14ff8:	str	r3, [sp, #52]	; 0x34
   14ffc:	ldr	r3, [sp, #76]	; 0x4c
   15000:	ldr	lr, [r4], #4
   15004:	cmp	lr, #0
   15008:	str	lr, [r5, #4]!
   1500c:	beq	1501c <__assert_fail@plt+0x3e08>
   15010:	add	ip, ip, #1
   15014:	cmp	ip, #10
   15018:	bne	15000 <__assert_fail@plt+0x3dec>
   1501c:	add	lr, sp, #12
   15020:	str	ip, [sp, #4]
   15024:	str	lr, [sp]
   15028:	bl	14b80 <__assert_fail@plt+0x396c>
   1502c:	ldr	r2, [sp, #52]	; 0x34
   15030:	ldr	r3, [r6]
   15034:	cmp	r2, r3
   15038:	bne	1504c <__assert_fail@plt+0x3e38>
   1503c:	add	sp, sp, #60	; 0x3c
   15040:	pop	{r4, r5, r6, lr}
   15044:	add	sp, sp, #4
   15048:	bx	lr
   1504c:	bl	10fec <__stack_chk_fail@plt>
   15050:	andeq	r7, r2, r0, lsl #30
   15054:	push	{r4, lr}
   15058:	mov	r2, #5
   1505c:	ldr	r1, [pc, #88]	; 150bc <__assert_fail@plt+0x3ea8>
   15060:	mov	r0, #0
   15064:	bl	10fe0 <dcgettext@plt>
   15068:	ldr	r2, [pc, #80]	; 150c0 <__assert_fail@plt+0x3eac>
   1506c:	mov	r1, r0
   15070:	mov	r0, #1
   15074:	bl	11154 <__printf_chk@plt>
   15078:	mov	r2, #5
   1507c:	ldr	r1, [pc, #64]	; 150c4 <__assert_fail@plt+0x3eb0>
   15080:	mov	r0, #0
   15084:	bl	10fe0 <dcgettext@plt>
   15088:	ldr	r3, [pc, #56]	; 150c8 <__assert_fail@plt+0x3eb4>
   1508c:	ldr	r2, [pc, #56]	; 150cc <__assert_fail@plt+0x3eb8>
   15090:	mov	r1, r0
   15094:	mov	r0, #1
   15098:	bl	11154 <__printf_chk@plt>
   1509c:	ldr	r1, [pc, #44]	; 150d0 <__assert_fail@plt+0x3ebc>
   150a0:	mov	r2, #5
   150a4:	mov	r0, #0
   150a8:	bl	10fe0 <dcgettext@plt>
   150ac:	ldr	r3, [pc, #32]	; 150d4 <__assert_fail@plt+0x3ec0>
   150b0:	pop	{r4, lr}
   150b4:	ldr	r1, [r3]
   150b8:	b	10f44 <fputs_unlocked@plt>
   150bc:	strdeq	r6, [r1], -r4
   150c0:	andeq	r7, r1, ip
   150c4:	andeq	r7, r1, r4, lsr #32
   150c8:	muleq	r1, r8, r7
   150cc:	andeq	r6, r1, r0, asr #15
   150d0:	andeq	r7, r1, r8, lsr r0
   150d4:	andeq	r8, r2, r4, ror r1
   150d8:	push	{r4, lr}
   150dc:	mov	r4, r0
   150e0:	bl	110a0 <malloc@plt>
   150e4:	adds	r4, r4, #0
   150e8:	movne	r4, #1
   150ec:	cmp	r0, #0
   150f0:	movne	r4, #0
   150f4:	cmp	r4, #0
   150f8:	popeq	{r4, pc}
   150fc:	bl	15320 <__assert_fail@plt+0x410c>
   15100:	push	{r4, r5, r6, lr}
   15104:	umull	r4, r5, r0, r1
   15108:	adds	r3, r5, #0
   1510c:	movne	r3, #1
   15110:	cmp	r4, #0
   15114:	blt	1512c <__assert_fail@plt+0x3f18>
   15118:	cmp	r3, #0
   1511c:	bne	1512c <__assert_fail@plt+0x3f18>
   15120:	mul	r0, r1, r0
   15124:	pop	{r4, r5, r6, lr}
   15128:	b	150d8 <__assert_fail@plt+0x3ec4>
   1512c:	bl	15320 <__assert_fail@plt+0x410c>
   15130:	b	150d8 <__assert_fail@plt+0x3ec4>
   15134:	adds	r3, r0, #0
   15138:	movne	r3, #1
   1513c:	cmp	r1, #0
   15140:	movne	r3, #0
   15144:	cmp	r3, #0
   15148:	push	{r4, lr}
   1514c:	bne	15174 <__assert_fail@plt+0x3f60>
   15150:	mov	r4, r1
   15154:	bl	11004 <realloc@plt>
   15158:	adds	r4, r4, #0
   1515c:	movne	r4, #1
   15160:	cmp	r0, #0
   15164:	movne	r4, #0
   15168:	cmp	r4, #0
   1516c:	popeq	{r4, pc}
   15170:	bl	15320 <__assert_fail@plt+0x410c>
   15174:	bl	10fa4 <free@plt>
   15178:	mov	r0, #0
   1517c:	pop	{r4, pc}
   15180:	push	{r4, r5, r6, lr}
   15184:	umull	r4, r5, r1, r2
   15188:	adds	r3, r5, #0
   1518c:	movne	r3, #1
   15190:	cmp	r4, #0
   15194:	blt	151ac <__assert_fail@plt+0x3f98>
   15198:	cmp	r3, #0
   1519c:	bne	151ac <__assert_fail@plt+0x3f98>
   151a0:	mul	r1, r2, r1
   151a4:	pop	{r4, r5, r6, lr}
   151a8:	b	15134 <__assert_fail@plt+0x3f20>
   151ac:	bl	15320 <__assert_fail@plt+0x410c>
   151b0:	push	{r4, r5, r6, r7, r8, lr}
   151b4:	subs	r7, r0, #0
   151b8:	mov	r6, r1
   151bc:	mov	r5, r2
   151c0:	ldr	r4, [r1]
   151c4:	beq	151f8 <__assert_fail@plt+0x3fe4>
   151c8:	mov	r1, r2
   151cc:	ldr	r0, [pc, #104]	; 1523c <__assert_fail@plt+0x4028>
   151d0:	bl	15f30 <__assert_fail@plt+0x4d1c>
   151d4:	cmp	r0, r4
   151d8:	bls	1521c <__assert_fail@plt+0x4008>
   151dc:	add	r3, r4, #1
   151e0:	add	r4, r3, r4, lsr #1
   151e4:	str	r4, [r6]
   151e8:	mul	r1, r5, r4
   151ec:	mov	r0, r7
   151f0:	pop	{r4, r5, r6, r7, r8, lr}
   151f4:	b	15134 <__assert_fail@plt+0x3f20>
   151f8:	cmp	r4, #0
   151fc:	beq	15220 <__assert_fail@plt+0x400c>
   15200:	umull	r0, r1, r4, r5
   15204:	adds	r3, r1, #0
   15208:	movne	r3, #1
   1520c:	cmp	r0, #0
   15210:	blt	1521c <__assert_fail@plt+0x4008>
   15214:	cmp	r3, #0
   15218:	beq	151e4 <__assert_fail@plt+0x3fd0>
   1521c:	bl	15320 <__assert_fail@plt+0x410c>
   15220:	mov	r1, r2
   15224:	mov	r0, #64	; 0x40
   15228:	bl	15f30 <__assert_fail@plt+0x4d1c>
   1522c:	cmp	r5, #64	; 0x40
   15230:	movls	r4, r0
   15234:	addhi	r4, r0, #1
   15238:	b	15200 <__assert_fail@plt+0x3fec>
   1523c:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   15240:	cmp	r0, #0
   15244:	ldr	r3, [r1]
   15248:	beq	1526c <__assert_fail@plt+0x4058>
   1524c:	ldr	r2, [pc, #60]	; 15290 <__assert_fail@plt+0x407c>
   15250:	cmp	r3, r2
   15254:	bhi	15288 <__assert_fail@plt+0x4074>
   15258:	add	r2, r3, #1
   1525c:	add	r3, r2, r3, lsr #1
   15260:	str	r3, [r1]
   15264:	mov	r1, r3
   15268:	b	15134 <__assert_fail@plt+0x3f20>
   1526c:	cmp	r3, #0
   15270:	bne	15284 <__assert_fail@plt+0x4070>
   15274:	mov	r3, #64	; 0x40
   15278:	str	r3, [r1]
   1527c:	mov	r1, r3
   15280:	b	15134 <__assert_fail@plt+0x3f20>
   15284:	bge	15260 <__assert_fail@plt+0x404c>
   15288:	push	{r4, lr}
   1528c:	bl	15320 <__assert_fail@plt+0x410c>
   15290:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   15294:	push	{r4, lr}
   15298:	mov	r4, r0
   1529c:	bl	150d8 <__assert_fail@plt+0x3ec4>
   152a0:	mov	r2, r4
   152a4:	mov	r1, #0
   152a8:	pop	{r4, lr}
   152ac:	b	11148 <memset@plt>
   152b0:	push	{r4, r5, r6, lr}
   152b4:	umull	r4, r5, r0, r1
   152b8:	adds	r3, r5, #0
   152bc:	movne	r3, #1
   152c0:	cmp	r4, #0
   152c4:	blt	152dc <__assert_fail@plt+0x40c8>
   152c8:	cmp	r3, #0
   152cc:	bne	152dc <__assert_fail@plt+0x40c8>
   152d0:	bl	10f2c <calloc@plt>
   152d4:	cmp	r0, #0
   152d8:	popne	{r4, r5, r6, pc}
   152dc:	bl	15320 <__assert_fail@plt+0x410c>
   152e0:	push	{r4, r5, r6, lr}
   152e4:	mov	r4, r1
   152e8:	mov	r5, r0
   152ec:	mov	r0, r1
   152f0:	bl	150d8 <__assert_fail@plt+0x3ec4>
   152f4:	mov	r2, r4
   152f8:	mov	r1, r5
   152fc:	pop	{r4, r5, r6, lr}
   15300:	b	10fbc <memcpy@plt>
   15304:	push	{r4, lr}
   15308:	mov	r4, r0
   1530c:	bl	11100 <strlen@plt>
   15310:	add	r1, r0, #1
   15314:	mov	r0, r4
   15318:	pop	{r4, lr}
   1531c:	b	152e0 <__assert_fail@plt+0x40cc>
   15320:	ldr	r3, [pc, #44]	; 15354 <__assert_fail@plt+0x4140>
   15324:	push	{r4, lr}
   15328:	mov	r2, #5
   1532c:	ldr	r1, [pc, #36]	; 15358 <__assert_fail@plt+0x4144>
   15330:	mov	r0, #0
   15334:	ldr	r4, [r3]
   15338:	bl	10fe0 <dcgettext@plt>
   1533c:	ldr	r2, [pc, #24]	; 1535c <__assert_fail@plt+0x4148>
   15340:	mov	r1, #0
   15344:	mov	r3, r0
   15348:	mov	r0, r4
   1534c:	bl	11088 <error@plt>
   15350:	bl	111f0 <abort@plt>
   15354:	andeq	r8, r2, ip, lsl r1
   15358:	andeq	r7, r1, ip, lsr #1
   1535c:	andeq	r6, r1, r8, asr #24
   15360:	push	{r4, lr}
   15364:	bl	15b88 <__assert_fail@plt+0x4974>
   15368:	cmn	r0, #1
   1536c:	mov	r4, r0
   15370:	beq	1537c <__assert_fail@plt+0x4168>
   15374:	mov	r0, r4
   15378:	pop	{r4, pc}
   1537c:	bl	11118 <__errno_location@plt>
   15380:	ldr	r3, [r0]
   15384:	cmp	r3, #12
   15388:	bne	15374 <__assert_fail@plt+0x4160>
   1538c:	bl	15320 <__assert_fail@plt+0x410c>
   15390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15394:	cmp	r2, #36	; 0x24
   15398:	ldr	r7, [pc, #1580]	; 159cc <__assert_fail@plt+0x47b8>
   1539c:	sub	sp, sp, #20
   153a0:	mov	fp, r2
   153a4:	ldr	r2, [r7]
   153a8:	ldr	r9, [sp, #56]	; 0x38
   153ac:	str	r2, [sp, #12]
   153b0:	bhi	159b4 <__assert_fail@plt+0x47a0>
   153b4:	cmp	r1, #0
   153b8:	mov	r6, r1
   153bc:	mov	r5, r0
   153c0:	mov	sl, r3
   153c4:	addeq	r6, sp, #8
   153c8:	bl	11118 <__errno_location@plt>
   153cc:	mov	r3, #0
   153d0:	str	r3, [r0]
   153d4:	mov	r8, r0
   153d8:	bl	110dc <__ctype_b_loc@plt>
   153dc:	ldrb	r3, [r5]
   153e0:	mov	r1, r5
   153e4:	ldr	ip, [r0]
   153e8:	b	153f0 <__assert_fail@plt+0x41dc>
   153ec:	ldrb	r3, [r1, #1]!
   153f0:	lsl	r2, r3, #1
   153f4:	ldrh	r0, [ip, r2]
   153f8:	ands	r4, r0, #8192	; 0x2000
   153fc:	bne	153ec <__assert_fail@plt+0x41d8>
   15400:	cmp	r3, #45	; 0x2d
   15404:	beq	15490 <__assert_fail@plt+0x427c>
   15408:	mov	r2, fp
   1540c:	mov	r1, r6
   15410:	mov	r0, r5
   15414:	bl	110f4 <strtoul@plt>
   15418:	ldr	r3, [r6]
   1541c:	cmp	r3, r5
   15420:	mov	fp, r0
   15424:	beq	15478 <__assert_fail@plt+0x4264>
   15428:	ldr	r4, [r8]
   1542c:	cmp	r4, #0
   15430:	bne	15468 <__assert_fail@plt+0x4254>
   15434:	cmp	r9, #0
   15438:	beq	15448 <__assert_fail@plt+0x4234>
   1543c:	ldrb	r5, [r3]
   15440:	cmp	r5, #0
   15444:	bne	15800 <__assert_fail@plt+0x45ec>
   15448:	str	fp, [sl]
   1544c:	ldr	r2, [sp, #12]
   15450:	ldr	r3, [r7]
   15454:	mov	r0, r4
   15458:	cmp	r2, r3
   1545c:	bne	159c8 <__assert_fail@plt+0x47b4>
   15460:	add	sp, sp, #20
   15464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15468:	cmp	r4, #34	; 0x22
   1546c:	bne	15490 <__assert_fail@plt+0x427c>
   15470:	mov	r4, #1
   15474:	b	15434 <__assert_fail@plt+0x4220>
   15478:	cmp	r9, #0
   1547c:	str	r3, [sp, #4]
   15480:	beq	15490 <__assert_fail@plt+0x427c>
   15484:	ldrb	r5, [r5]
   15488:	cmp	r5, #0
   1548c:	bne	15498 <__assert_fail@plt+0x4284>
   15490:	mov	r4, #4
   15494:	b	1544c <__assert_fail@plt+0x4238>
   15498:	mov	r1, r5
   1549c:	mov	r0, r9
   154a0:	bl	1110c <strchr@plt>
   154a4:	ldr	r3, [sp, #4]
   154a8:	cmp	r0, #0
   154ac:	movne	fp, #1
   154b0:	beq	15490 <__assert_fail@plt+0x427c>
   154b4:	sub	r8, r5, #69	; 0x45
   154b8:	cmp	r8, #47	; 0x2f
   154bc:	ldrls	pc, [pc, r8, lsl #2]
   154c0:	b	15688 <__assert_fail@plt+0x4474>
   154c4:	andeq	r5, r1, r4, lsl #11
   154c8:	andeq	r5, r1, r8, lsl #13
   154cc:	andeq	r5, r1, r4, lsl #11
   154d0:	andeq	r5, r1, r8, lsl #13
   154d4:	andeq	r5, r1, r8, lsl #13
   154d8:	andeq	r5, r1, r8, lsl #13
   154dc:	andeq	r5, r1, r4, lsl #11
   154e0:	andeq	r5, r1, r8, lsl #13
   154e4:	andeq	r5, r1, r4, lsl #11
   154e8:	andeq	r5, r1, r8, lsl #13
   154ec:	andeq	r5, r1, r8, lsl #13
   154f0:	andeq	r5, r1, r4, lsl #11
   154f4:	andeq	r5, r1, r8, lsl #13
   154f8:	andeq	r5, r1, r8, lsl #13
   154fc:	andeq	r5, r1, r8, lsl #13
   15500:	andeq	r5, r1, r4, lsl #11
   15504:	andeq	r5, r1, r8, lsl #13
   15508:	andeq	r5, r1, r8, lsl #13
   1550c:	andeq	r5, r1, r8, lsl #13
   15510:	andeq	r5, r1, r8, lsl #13
   15514:	andeq	r5, r1, r4, lsl #11
   15518:	andeq	r5, r1, r4, lsl #11
   1551c:	andeq	r5, r1, r8, lsl #13
   15520:	andeq	r5, r1, r8, lsl #13
   15524:	andeq	r5, r1, r8, lsl #13
   15528:	andeq	r5, r1, r8, lsl #13
   1552c:	andeq	r5, r1, r8, lsl #13
   15530:	andeq	r5, r1, r8, lsl #13
   15534:	andeq	r5, r1, r8, lsl #13
   15538:	andeq	r5, r1, r8, lsl #13
   1553c:	andeq	r5, r1, r8, lsl #13
   15540:	andeq	r5, r1, r8, lsl #13
   15544:	andeq	r5, r1, r8, lsl #13
   15548:	andeq	r5, r1, r8, lsl #13
   1554c:	andeq	r5, r1, r4, lsl #11
   15550:	andeq	r5, r1, r8, lsl #13
   15554:	andeq	r5, r1, r8, lsl #13
   15558:	andeq	r5, r1, r8, lsl #13
   1555c:	andeq	r5, r1, r4, lsl #11
   15560:	andeq	r5, r1, r8, lsl #13
   15564:	andeq	r5, r1, r4, lsl #11
   15568:	andeq	r5, r1, r8, lsl #13
   1556c:	andeq	r5, r1, r8, lsl #13
   15570:	andeq	r5, r1, r8, lsl #13
   15574:	andeq	r5, r1, r8, lsl #13
   15578:	andeq	r5, r1, r8, lsl #13
   1557c:	andeq	r5, r1, r8, lsl #13
   15580:	andeq	r5, r1, r4, lsl #11
   15584:	mov	r0, r9
   15588:	mov	r1, #48	; 0x30
   1558c:	str	r3, [sp, #4]
   15590:	bl	1110c <strchr@plt>
   15594:	ldr	r3, [sp, #4]
   15598:	cmp	r0, #0
   1559c:	beq	15688 <__assert_fail@plt+0x4474>
   155a0:	ldrb	r2, [r3, #1]
   155a4:	cmp	r2, #68	; 0x44
   155a8:	beq	159a0 <__assert_fail@plt+0x478c>
   155ac:	cmp	r2, #105	; 0x69
   155b0:	beq	15828 <__assert_fail@plt+0x4614>
   155b4:	cmp	r2, #66	; 0x42
   155b8:	beq	159a0 <__assert_fail@plt+0x478c>
   155bc:	cmp	r8, #47	; 0x2f
   155c0:	ldrls	pc, [pc, r8, lsl #2]
   155c4:	b	1581c <__assert_fail@plt+0x4608>
   155c8:	andeq	r5, r1, r8, asr r9
   155cc:	andeq	r5, r1, ip, lsl r8
   155d0:	andeq	r5, r1, r8, ror r7
   155d4:	andeq	r5, r1, ip, lsl r8
   155d8:	andeq	r5, r1, ip, lsl r8
   155dc:	andeq	r5, r1, ip, lsl r8
   155e0:	andeq	r5, r1, r4, ror #15
   155e4:	andeq	r5, r1, ip, lsl r8
   155e8:	andeq	r5, r1, r8, lsr #18
   155ec:	andeq	r5, r1, ip, lsl r8
   155f0:	andeq	r5, r1, ip, lsl r8
   155f4:	strdeq	r5, [r1], -r8
   155f8:	andeq	r5, r1, ip, lsl r8
   155fc:	andeq	r5, r1, ip, lsl r8
   15600:	andeq	r5, r1, ip, lsl r8
   15604:	andeq	r5, r1, r8, asr #17
   15608:	andeq	r5, r1, ip, lsl r8
   1560c:	andeq	r5, r1, ip, lsl r8
   15610:	andeq	r5, r1, ip, lsl r8
   15614:	andeq	r5, r1, ip, lsl r8
   15618:	muleq	r1, r8, r8
   1561c:	andeq	r5, r1, r4, ror #16
   15620:	andeq	r5, r1, ip, lsl r8
   15624:	andeq	r5, r1, ip, lsl r8
   15628:	andeq	r5, r1, ip, lsl r8
   1562c:	andeq	r5, r1, ip, lsl r8
   15630:	andeq	r5, r1, ip, lsl r8
   15634:	andeq	r5, r1, ip, lsl r8
   15638:	andeq	r5, r1, ip, lsl r8
   1563c:	andeq	r5, r1, r0, asr r8
   15640:	muleq	r1, r8, r9
   15644:	andeq	r5, r1, ip, lsl r8
   15648:	andeq	r5, r1, ip, lsl r8
   1564c:	andeq	r5, r1, ip, lsl r8
   15650:	andeq	r5, r1, r8, ror r7
   15654:	andeq	r5, r1, ip, lsl r8
   15658:	andeq	r5, r1, ip, lsl r8
   1565c:	andeq	r5, r1, ip, lsl r8
   15660:	andeq	r5, r1, r4, ror #15
   15664:	andeq	r5, r1, ip, lsl r8
   15668:	andeq	r5, r1, r8, lsr #18
   1566c:	andeq	r5, r1, ip, lsl r8
   15670:	andeq	r5, r1, ip, lsl r8
   15674:	andeq	r5, r1, ip, lsl r8
   15678:	andeq	r5, r1, ip, lsl r8
   1567c:	andeq	r5, r1, ip, lsl r8
   15680:	andeq	r5, r1, ip, lsl r8
   15684:	andeq	r5, r1, r8, asr #17
   15688:	mov	r1, #1
   1568c:	mov	r2, #1024	; 0x400
   15690:	sub	r5, r5, #66	; 0x42
   15694:	cmp	r5, #53	; 0x35
   15698:	ldrls	pc, [pc, r5, lsl #2]
   1569c:	b	1581c <__assert_fail@plt+0x4608>
   156a0:	andeq	r5, r1, r8, lsl #19
   156a4:	andeq	r5, r1, ip, lsl r8
   156a8:	andeq	r5, r1, ip, lsl r8
   156ac:	andeq	r5, r1, r0, ror #18
   156b0:	andeq	r5, r1, ip, lsl r8
   156b4:	andeq	r5, r1, r0, lsl #15
   156b8:	andeq	r5, r1, ip, lsl r8
   156bc:	andeq	r5, r1, ip, lsl r8
   156c0:	andeq	r5, r1, ip, lsl r8
   156c4:	andeq	r5, r1, ip, ror #15
   156c8:	andeq	r5, r1, ip, lsl r8
   156cc:	andeq	r5, r1, r0, lsr r9
   156d0:	andeq	r5, r1, ip, lsl r8
   156d4:	andeq	r5, r1, ip, lsl r8
   156d8:	andeq	r5, r1, r0, lsl #18
   156dc:	andeq	r5, r1, ip, lsl r8
   156e0:	andeq	r5, r1, ip, lsl r8
   156e4:	andeq	r5, r1, ip, lsl r8
   156e8:	ldrdeq	r5, [r1], -r0
   156ec:	andeq	r5, r1, ip, lsl r8
   156f0:	andeq	r5, r1, ip, lsl r8
   156f4:	andeq	r5, r1, ip, lsl r8
   156f8:	andeq	r5, r1, ip, lsl r8
   156fc:	andeq	r5, r1, r0, lsr #17
   15700:	andeq	r5, r1, ip, ror #16
   15704:	andeq	r5, r1, ip, lsl r8
   15708:	andeq	r5, r1, ip, lsl r8
   1570c:	andeq	r5, r1, ip, lsl r8
   15710:	andeq	r5, r1, ip, lsl r8
   15714:	andeq	r5, r1, ip, lsl r8
   15718:	andeq	r5, r1, ip, lsl r8
   1571c:	andeq	r5, r1, ip, lsl r8
   15720:	andeq	r5, r1, r4, asr r8
   15724:	andeq	r5, r1, ip, asr #15
   15728:	andeq	r5, r1, ip, lsl r8
   1572c:	andeq	r5, r1, ip, lsl r8
   15730:	andeq	r5, r1, ip, lsl r8
   15734:	andeq	r5, r1, r0, lsl #15
   15738:	andeq	r5, r1, ip, lsl r8
   1573c:	andeq	r5, r1, ip, lsl r8
   15740:	andeq	r5, r1, ip, lsl r8
   15744:	andeq	r5, r1, ip, ror #15
   15748:	andeq	r5, r1, ip, lsl r8
   1574c:	andeq	r5, r1, r0, lsr r9
   15750:	andeq	r5, r1, ip, lsl r8
   15754:	andeq	r5, r1, ip, lsl r8
   15758:	andeq	r5, r1, ip, lsl r8
   1575c:	andeq	r5, r1, ip, lsl r8
   15760:	andeq	r5, r1, ip, lsl r8
   15764:	andeq	r5, r1, ip, lsl r8
   15768:	ldrdeq	r5, [r1], -r0
   1576c:	andeq	r5, r1, ip, lsl r8
   15770:	andeq	r5, r1, ip, lsl r8
   15774:	andeq	r5, r1, r0, asr #16
   15778:	mov	r1, #1
   1577c:	mov	r2, #1024	; 0x400
   15780:	umull	ip, r0, r2, fp
   15784:	adds	r0, r0, #0
   15788:	movne	r0, #1
   1578c:	cmp	r0, #0
   15790:	bne	159ac <__assert_fail@plt+0x4798>
   15794:	mul	fp, r2, fp
   15798:	umull	ip, r0, r2, fp
   1579c:	adds	r0, r0, #0
   157a0:	movne	r0, #1
   157a4:	cmp	r0, #0
   157a8:	bne	159ac <__assert_fail@plt+0x4798>
   157ac:	mul	fp, r2, fp
   157b0:	umull	ip, r0, r2, fp
   157b4:	adds	r0, r0, #0
   157b8:	movne	r0, #1
   157bc:	cmp	r0, #0
   157c0:	muleq	fp, r2, fp
   157c4:	bne	159ac <__assert_fail@plt+0x4798>
   157c8:	orr	r4, r4, r0
   157cc:	add	r2, r3, r1
   157d0:	str	r2, [r6]
   157d4:	ldrb	r3, [r3, r1]
   157d8:	cmp	r3, #0
   157dc:	orrne	r4, r4, #2
   157e0:	b	15448 <__assert_fail@plt+0x4234>
   157e4:	mov	r1, #1
   157e8:	mov	r2, #1024	; 0x400
   157ec:	umull	ip, r0, r2, fp
   157f0:	cmp	r0, #0
   157f4:	bne	1594c <__assert_fail@plt+0x4738>
   157f8:	mul	fp, r2, fp
   157fc:	b	157cc <__assert_fail@plt+0x45b8>
   15800:	mov	r1, r5
   15804:	mov	r0, r9
   15808:	str	r3, [sp, #4]
   1580c:	bl	1110c <strchr@plt>
   15810:	ldr	r3, [sp, #4]
   15814:	cmp	r0, #0
   15818:	bne	154b4 <__assert_fail@plt+0x42a0>
   1581c:	str	fp, [sl]
   15820:	orr	r4, r4, #2
   15824:	b	1544c <__assert_fail@plt+0x4238>
   15828:	ldrb	r1, [r3, #2]
   1582c:	mov	r2, #1024	; 0x400
   15830:	cmp	r1, #66	; 0x42
   15834:	movne	r1, #1
   15838:	moveq	r1, #3
   1583c:	b	15690 <__assert_fail@plt+0x447c>
   15840:	cmp	fp, #0
   15844:	blt	1594c <__assert_fail@plt+0x4738>
   15848:	lsl	fp, fp, #1
   1584c:	b	157cc <__assert_fail@plt+0x45b8>
   15850:	mov	r1, #1
   15854:	lsrs	r2, fp, #23
   15858:	bne	1594c <__assert_fail@plt+0x4738>
   1585c:	lsl	fp, fp, #9
   15860:	b	157cc <__assert_fail@plt+0x45b8>
   15864:	mov	r1, #1
   15868:	mov	r2, #1024	; 0x400
   1586c:	mov	r0, #7
   15870:	mov	lr, #0
   15874:	umull	r5, ip, r2, fp
   15878:	cmp	ip, #0
   1587c:	movne	lr, #1
   15880:	muleq	fp, r2, fp
   15884:	mvnne	fp, #0
   15888:	subs	r0, r0, #1
   1588c:	bne	15874 <__assert_fail@plt+0x4660>
   15890:	orr	r4, r4, lr
   15894:	b	157cc <__assert_fail@plt+0x45b8>
   15898:	mov	r1, #1
   1589c:	mov	r2, #1024	; 0x400
   158a0:	mov	r0, #8
   158a4:	mov	lr, #0
   158a8:	umull	r5, ip, r2, fp
   158ac:	cmp	ip, #0
   158b0:	movne	lr, #1
   158b4:	muleq	fp, r2, fp
   158b8:	mvnne	fp, #0
   158bc:	subs	r0, r0, #1
   158c0:	bne	158a8 <__assert_fail@plt+0x4694>
   158c4:	b	15890 <__assert_fail@plt+0x467c>
   158c8:	mov	r1, #1
   158cc:	mov	r2, #1024	; 0x400
   158d0:	mov	r0, #4
   158d4:	mov	lr, #0
   158d8:	umull	r5, ip, r2, fp
   158dc:	cmp	ip, #0
   158e0:	movne	lr, #1
   158e4:	muleq	fp, r2, fp
   158e8:	mvnne	fp, #0
   158ec:	subs	r0, r0, #1
   158f0:	bne	158d8 <__assert_fail@plt+0x46c4>
   158f4:	b	15890 <__assert_fail@plt+0x467c>
   158f8:	mov	r1, #1
   158fc:	mov	r2, #1024	; 0x400
   15900:	mov	r0, #5
   15904:	mov	lr, #0
   15908:	umull	r5, ip, r2, fp
   1590c:	cmp	ip, #0
   15910:	movne	lr, #1
   15914:	muleq	fp, r2, fp
   15918:	mvnne	fp, #0
   1591c:	subs	r0, r0, #1
   15920:	bne	15908 <__assert_fail@plt+0x46f4>
   15924:	b	15890 <__assert_fail@plt+0x467c>
   15928:	mov	r1, #1
   1592c:	mov	r2, #1024	; 0x400
   15930:	umull	ip, r0, r2, fp
   15934:	cmp	r0, #0
   15938:	bne	1594c <__assert_fail@plt+0x4738>
   1593c:	mul	fp, r2, fp
   15940:	umull	ip, r0, r2, fp
   15944:	cmp	r0, #0
   15948:	beq	157f8 <__assert_fail@plt+0x45e4>
   1594c:	mov	r4, #1
   15950:	mvn	fp, #0
   15954:	b	157cc <__assert_fail@plt+0x45b8>
   15958:	mov	r1, #1
   1595c:	mov	r2, #1024	; 0x400
   15960:	mov	r0, #6
   15964:	mov	lr, #0
   15968:	umull	r5, ip, r2, fp
   1596c:	cmp	ip, #0
   15970:	movne	lr, #1
   15974:	muleq	fp, r2, fp
   15978:	mvnne	fp, #0
   1597c:	subs	r0, r0, #1
   15980:	bne	15968 <__assert_fail@plt+0x4754>
   15984:	b	15890 <__assert_fail@plt+0x467c>
   15988:	lsrs	r2, fp, #22
   1598c:	bne	1594c <__assert_fail@plt+0x4738>
   15990:	lsl	fp, fp, #10
   15994:	b	157cc <__assert_fail@plt+0x45b8>
   15998:	mov	r1, #1
   1599c:	b	157cc <__assert_fail@plt+0x45b8>
   159a0:	mov	r1, #2
   159a4:	mov	r2, #1000	; 0x3e8
   159a8:	b	15690 <__assert_fail@plt+0x447c>
   159ac:	mvn	fp, #0
   159b0:	b	157c8 <__assert_fail@plt+0x45b4>
   159b4:	ldr	r3, [pc, #20]	; 159d0 <__assert_fail@plt+0x47bc>
   159b8:	mov	r2, #96	; 0x60
   159bc:	ldr	r1, [pc, #16]	; 159d4 <__assert_fail@plt+0x47c0>
   159c0:	ldr	r0, [pc, #16]	; 159d8 <__assert_fail@plt+0x47c4>
   159c4:	bl	11214 <__assert_fail@plt>
   159c8:	bl	10fec <__stack_chk_fail@plt>
   159cc:	andeq	r7, r2, r0, lsl #30
   159d0:	andeq	r7, r1, r0, asr #1
   159d4:	andeq	r7, r1, ip, asr #1
   159d8:	ldrdeq	r7, [r1], -ip
   159dc:	push	{r4, r5, r6, r7, r8, lr}
   159e0:	subs	r7, r0, #0
   159e4:	ldr	r5, [pc, #108]	; 15a58 <__assert_fail@plt+0x4844>
   159e8:	sub	sp, sp, #8
   159ec:	mov	r8, r1
   159f0:	ldr	r1, [r5]
   159f4:	moveq	r7, sp
   159f8:	str	r1, [sp, #4]
   159fc:	mov	r0, r7
   15a00:	mov	r1, r8
   15a04:	mov	r6, r2
   15a08:	bl	1107c <mbrtowc@plt>
   15a0c:	cmp	r6, #0
   15a10:	cmnne	r0, #3
   15a14:	mov	r4, r0
   15a18:	bhi	15a38 <__assert_fail@plt+0x4824>
   15a1c:	ldr	r2, [sp, #4]
   15a20:	ldr	r3, [r5]
   15a24:	mov	r0, r4
   15a28:	cmp	r2, r3
   15a2c:	bne	15a54 <__assert_fail@plt+0x4840>
   15a30:	add	sp, sp, #8
   15a34:	pop	{r4, r5, r6, r7, r8, pc}
   15a38:	mov	r0, #0
   15a3c:	bl	15ad0 <__assert_fail@plt+0x48bc>
   15a40:	cmp	r0, #0
   15a44:	moveq	r4, #1
   15a48:	ldrbeq	r3, [r8]
   15a4c:	streq	r3, [r7]
   15a50:	b	15a1c <__assert_fail@plt+0x4808>
   15a54:	bl	10fec <__stack_chk_fail@plt>
   15a58:	andeq	r7, r2, r0, lsl #30
   15a5c:	push	{r4, r5, r6, lr}
   15a60:	mov	r4, r0
   15a64:	bl	11070 <__fpending@plt>
   15a68:	ldr	r5, [r4]
   15a6c:	and	r5, r5, #32
   15a70:	mov	r6, r0
   15a74:	mov	r0, r4
   15a78:	bl	15d90 <__assert_fail@plt+0x4b7c>
   15a7c:	cmp	r5, #0
   15a80:	mov	r4, r0
   15a84:	bne	15ab0 <__assert_fail@plt+0x489c>
   15a88:	cmp	r0, #0
   15a8c:	beq	15aa8 <__assert_fail@plt+0x4894>
   15a90:	cmp	r6, #0
   15a94:	bne	15ac8 <__assert_fail@plt+0x48b4>
   15a98:	bl	11118 <__errno_location@plt>
   15a9c:	ldr	r4, [r0]
   15aa0:	subs	r4, r4, #9
   15aa4:	mvnne	r4, #0
   15aa8:	mov	r0, r4
   15aac:	pop	{r4, r5, r6, pc}
   15ab0:	cmp	r0, #0
   15ab4:	bne	15ac8 <__assert_fail@plt+0x48b4>
   15ab8:	bl	11118 <__errno_location@plt>
   15abc:	str	r4, [r0]
   15ac0:	mvn	r4, #0
   15ac4:	b	15aa8 <__assert_fail@plt+0x4894>
   15ac8:	mvn	r4, #0
   15acc:	b	15aa8 <__assert_fail@plt+0x4894>
   15ad0:	push	{r4, lr}
   15ad4:	mov	r1, #0
   15ad8:	bl	1119c <setlocale@plt>
   15adc:	subs	r4, r0, #0
   15ae0:	beq	15b0c <__assert_fail@plt+0x48f8>
   15ae4:	ldr	r1, [pc, #40]	; 15b14 <__assert_fail@plt+0x4900>
   15ae8:	bl	10f74 <strcmp@plt>
   15aec:	cmp	r0, #0
   15af0:	popeq	{r4, pc}
   15af4:	mov	r0, r4
   15af8:	ldr	r1, [pc, #24]	; 15b18 <__assert_fail@plt+0x4904>
   15afc:	bl	10f74 <strcmp@plt>
   15b00:	adds	r0, r0, #0
   15b04:	movne	r0, #1
   15b08:	pop	{r4, pc}
   15b0c:	mov	r0, #1
   15b10:	pop	{r4, pc}
   15b14:	andeq	r7, r1, r4, lsl #2
   15b18:	andeq	r7, r1, r8, lsl #2
   15b1c:	push	{r4, lr}
   15b20:	mov	r0, #14
   15b24:	bl	111c0 <nl_langinfo@plt>
   15b28:	cmp	r0, #0
   15b2c:	beq	15b44 <__assert_fail@plt+0x4930>
   15b30:	ldrb	r2, [r0]
   15b34:	ldr	r3, [pc, #16]	; 15b4c <__assert_fail@plt+0x4938>
   15b38:	cmp	r2, #0
   15b3c:	moveq	r0, r3
   15b40:	pop	{r4, pc}
   15b44:	ldr	r0, [pc]	; 15b4c <__assert_fail@plt+0x4938>
   15b48:	pop	{r4, pc}
   15b4c:	andeq	r7, r1, r0, lsl r1
   15b50:	lsrs	r3, r1, #30
   15b54:	movne	r3, #1
   15b58:	moveq	r3, #0
   15b5c:	lsls	r1, r1, #2
   15b60:	bmi	15b70 <__assert_fail@plt+0x495c>
   15b64:	cmp	r3, #0
   15b68:	bne	15b70 <__assert_fail@plt+0x495c>
   15b6c:	b	11004 <realloc@plt>
   15b70:	push	{r4, lr}
   15b74:	bl	11118 <__errno_location@plt>
   15b78:	mov	r3, #12
   15b7c:	str	r3, [r0]
   15b80:	mov	r0, #0
   15b84:	pop	{r4, pc}
   15b88:	push	{r4, r5, r6, r7, r8, r9, lr}
   15b8c:	sub	sp, sp, #12
   15b90:	ldr	r8, [pc, #500]	; 15d8c <__assert_fail@plt+0x4b78>
   15b94:	subs	r7, r0, #0
   15b98:	mov	r6, r1
   15b9c:	ldr	r3, [r8]
   15ba0:	mov	r9, r2
   15ba4:	str	r3, [sp, #4]
   15ba8:	beq	15c60 <__assert_fail@plt+0x4a4c>
   15bac:	mov	r3, #10
   15bb0:	mov	r1, r3
   15bb4:	mov	r0, #0
   15bb8:	str	r3, [sp]
   15bbc:	bl	15b50 <__assert_fail@plt+0x493c>
   15bc0:	subs	r4, r0, #0
   15bc4:	beq	15c14 <__assert_fail@plt+0x4a00>
   15bc8:	mov	r1, r6
   15bcc:	mov	r3, sp
   15bd0:	mov	r2, r4
   15bd4:	mov	r0, r7
   15bd8:	ldr	r5, [sp]
   15bdc:	bl	1113c <getgrouplist@plt>
   15be0:	ldr	r1, [sp]
   15be4:	cmp	r0, #0
   15be8:	blt	15c30 <__assert_fail@plt+0x4a1c>
   15bec:	mov	r0, r4
   15bf0:	bl	15b50 <__assert_fail@plt+0x493c>
   15bf4:	cmp	r0, #0
   15bf8:	bne	15c54 <__assert_fail@plt+0x4a40>
   15bfc:	bl	11118 <__errno_location@plt>
   15c00:	mov	r5, r0
   15c04:	mov	r0, r4
   15c08:	ldr	r4, [r5]
   15c0c:	bl	10fa4 <free@plt>
   15c10:	str	r4, [r5]
   15c14:	mvn	r0, #0
   15c18:	ldr	r2, [sp, #4]
   15c1c:	ldr	r3, [r8]
   15c20:	cmp	r2, r3
   15c24:	bne	15d88 <__assert_fail@plt+0x4b74>
   15c28:	add	sp, sp, #12
   15c2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15c30:	cmp	r1, r5
   15c34:	lsleq	r1, r1, #1
   15c38:	mov	r0, r4
   15c3c:	streq	r1, [sp]
   15c40:	bl	15b50 <__assert_fail@plt+0x493c>
   15c44:	cmp	r0, #0
   15c48:	beq	15bfc <__assert_fail@plt+0x49e8>
   15c4c:	mov	r4, r0
   15c50:	b	15bc8 <__assert_fail@plt+0x49b4>
   15c54:	str	r0, [r9]
   15c58:	ldr	r0, [sp]
   15c5c:	b	15c18 <__assert_fail@plt+0x4a04>
   15c60:	mov	r1, r7
   15c64:	bl	111cc <getgroups@plt>
   15c68:	cmp	r0, #0
   15c6c:	str	r0, [sp]
   15c70:	blt	15d28 <__assert_fail@plt+0x4b14>
   15c74:	adds	r5, r6, #1
   15c78:	movne	r5, #1
   15c7c:	cmp	r0, #0
   15c80:	movne	r3, r5
   15c84:	moveq	r3, #1
   15c88:	cmp	r3, #0
   15c8c:	beq	15d5c <__assert_fail@plt+0x4b48>
   15c90:	add	r3, r0, #1
   15c94:	mov	r1, r3
   15c98:	mov	r0, r7
   15c9c:	str	r3, [sp]
   15ca0:	bl	15b50 <__assert_fail@plt+0x493c>
   15ca4:	subs	r4, r0, #0
   15ca8:	beq	15c14 <__assert_fail@plt+0x4a00>
   15cac:	ldr	r0, [sp]
   15cb0:	cmn	r6, #1
   15cb4:	sub	r0, r0, r5
   15cb8:	beq	15d74 <__assert_fail@plt+0x4b60>
   15cbc:	add	r1, r4, #4
   15cc0:	bl	111cc <getgroups@plt>
   15cc4:	cmp	r0, #0
   15cc8:	addge	r0, r0, #1
   15ccc:	strge	r6, [r4]
   15cd0:	blt	15bfc <__assert_fail@plt+0x49e8>
   15cd4:	cmp	r0, #1
   15cd8:	str	r4, [r9]
   15cdc:	ble	15c18 <__assert_fail@plt+0x4a04>
   15ce0:	add	ip, r4, r0, lsl #2
   15ce4:	add	r3, r4, #4
   15ce8:	cmp	ip, r3
   15cec:	ldr	lr, [r4]
   15cf0:	bhi	15d14 <__assert_fail@plt+0x4b00>
   15cf4:	b	15c18 <__assert_fail@plt+0x4a04>
   15cf8:	ldr	r1, [r4]
   15cfc:	cmp	r2, r1
   15d00:	strne	r2, [r4, #4]
   15d04:	addne	r4, r4, #4
   15d08:	beq	15d20 <__assert_fail@plt+0x4b0c>
   15d0c:	cmp	ip, r3
   15d10:	bls	15c18 <__assert_fail@plt+0x4a04>
   15d14:	ldr	r2, [r3], #4
   15d18:	cmp	r2, lr
   15d1c:	bne	15cf8 <__assert_fail@plt+0x4ae4>
   15d20:	sub	r0, r0, #1
   15d24:	b	15d0c <__assert_fail@plt+0x4af8>
   15d28:	bl	11118 <__errno_location@plt>
   15d2c:	ldr	r3, [r0]
   15d30:	cmp	r3, #38	; 0x26
   15d34:	bne	15c14 <__assert_fail@plt+0x4a00>
   15d38:	mov	r0, #4
   15d3c:	bl	110a0 <malloc@plt>
   15d40:	cmp	r0, #0
   15d44:	beq	15c14 <__assert_fail@plt+0x4a00>
   15d48:	str	r0, [r9]
   15d4c:	str	r6, [r0]
   15d50:	adds	r0, r6, #1
   15d54:	movne	r0, #1
   15d58:	b	15c18 <__assert_fail@plt+0x4a04>
   15d5c:	mov	r1, r0
   15d60:	mov	r0, r3
   15d64:	bl	15b50 <__assert_fail@plt+0x493c>
   15d68:	subs	r4, r0, #0
   15d6c:	ldrne	r0, [sp]
   15d70:	beq	15c14 <__assert_fail@plt+0x4a00>
   15d74:	mov	r1, r4
   15d78:	bl	111cc <getgroups@plt>
   15d7c:	cmp	r0, #0
   15d80:	bge	15cd4 <__assert_fail@plt+0x4ac0>
   15d84:	b	15bfc <__assert_fail@plt+0x49e8>
   15d88:	bl	10fec <__stack_chk_fail@plt>
   15d8c:	andeq	r7, r2, r0, lsl #30
   15d90:	push	{r4, r5, lr}
   15d94:	sub	sp, sp, #12
   15d98:	mov	r4, r0
   15d9c:	bl	11160 <fileno@plt>
   15da0:	cmp	r0, #0
   15da4:	mov	r0, r4
   15da8:	blt	15e24 <__assert_fail@plt+0x4c10>
   15dac:	bl	110b8 <__freading@plt>
   15db0:	cmp	r0, #0
   15db4:	bne	15df0 <__assert_fail@plt+0x4bdc>
   15db8:	mov	r0, r4
   15dbc:	bl	15e30 <__assert_fail@plt+0x4c1c>
   15dc0:	cmp	r0, #0
   15dc4:	beq	15e20 <__assert_fail@plt+0x4c0c>
   15dc8:	bl	11118 <__errno_location@plt>
   15dcc:	mov	r5, r0
   15dd0:	mov	r0, r4
   15dd4:	ldr	r4, [r5]
   15dd8:	bl	11178 <fclose@plt>
   15ddc:	cmp	r4, #0
   15de0:	mvnne	r0, #0
   15de4:	strne	r4, [r5]
   15de8:	add	sp, sp, #12
   15dec:	pop	{r4, r5, pc}
   15df0:	mov	r0, r4
   15df4:	bl	11160 <fileno@plt>
   15df8:	mov	r3, #1
   15dfc:	str	r3, [sp]
   15e00:	mov	r2, #0
   15e04:	mov	r3, #0
   15e08:	bl	1104c <lseek64@plt>
   15e0c:	mvn	r3, #0
   15e10:	mvn	r2, #0
   15e14:	cmp	r1, r3
   15e18:	cmpeq	r0, r2
   15e1c:	bne	15db8 <__assert_fail@plt+0x4ba4>
   15e20:	mov	r0, r4
   15e24:	add	sp, sp, #12
   15e28:	pop	{r4, r5, lr}
   15e2c:	b	11178 <fclose@plt>
   15e30:	push	{r4, lr}
   15e34:	subs	r4, r0, #0
   15e38:	sub	sp, sp, #8
   15e3c:	beq	15e58 <__assert_fail@plt+0x4c44>
   15e40:	bl	110b8 <__freading@plt>
   15e44:	cmp	r0, #0
   15e48:	beq	15e58 <__assert_fail@plt+0x4c44>
   15e4c:	ldr	r3, [r4]
   15e50:	tst	r3, #256	; 0x100
   15e54:	bne	15e68 <__assert_fail@plt+0x4c54>
   15e58:	mov	r0, r4
   15e5c:	add	sp, sp, #8
   15e60:	pop	{r4, lr}
   15e64:	b	10f8c <fflush@plt>
   15e68:	mov	r3, #1
   15e6c:	str	r3, [sp]
   15e70:	mov	r2, #0
   15e74:	mov	r3, #0
   15e78:	mov	r0, r4
   15e7c:	bl	15e90 <__assert_fail@plt+0x4c7c>
   15e80:	mov	r0, r4
   15e84:	add	sp, sp, #8
   15e88:	pop	{r4, lr}
   15e8c:	b	10f8c <fflush@plt>
   15e90:	push	{r4, r5, r6, r7, r8, lr}
   15e94:	sub	sp, sp, #8
   15e98:	ldmib	r0, {ip, lr}
   15e9c:	mov	r4, r0
   15ea0:	ldr	r5, [sp, #32]
   15ea4:	cmp	lr, ip
   15ea8:	beq	15ec0 <__assert_fail@plt+0x4cac>
   15eac:	str	r5, [sp, #32]
   15eb0:	mov	r0, r4
   15eb4:	add	sp, sp, #8
   15eb8:	pop	{r4, r5, r6, r7, r8, lr}
   15ebc:	b	11184 <fseeko64@plt>
   15ec0:	ldr	lr, [r0, #20]
   15ec4:	ldr	ip, [r0, #16]
   15ec8:	cmp	lr, ip
   15ecc:	bne	15eac <__assert_fail@plt+0x4c98>
   15ed0:	ldr	r8, [r0, #36]	; 0x24
   15ed4:	cmp	r8, #0
   15ed8:	bne	15eac <__assert_fail@plt+0x4c98>
   15edc:	mov	r6, r2
   15ee0:	mov	r7, r3
   15ee4:	bl	11160 <fileno@plt>
   15ee8:	mov	r2, r6
   15eec:	mov	r3, r7
   15ef0:	str	r5, [sp]
   15ef4:	bl	1104c <lseek64@plt>
   15ef8:	mvn	r3, #0
   15efc:	mvn	r2, #0
   15f00:	cmp	r1, r3
   15f04:	cmpeq	r0, r2
   15f08:	beq	15f28 <__assert_fail@plt+0x4d14>
   15f0c:	ldr	r3, [r4]
   15f10:	strd	r0, [r4, #80]	; 0x50
   15f14:	mov	r0, r8
   15f18:	bic	r3, r3, #16
   15f1c:	str	r3, [r4]
   15f20:	add	sp, sp, #8
   15f24:	pop	{r4, r5, r6, r7, r8, pc}
   15f28:	mvn	r0, #0
   15f2c:	b	15f20 <__assert_fail@plt+0x4d0c>
   15f30:	subs	r2, r1, #1
   15f34:	bxeq	lr
   15f38:	bcc	16110 <__assert_fail@plt+0x4efc>
   15f3c:	cmp	r0, r1
   15f40:	bls	160f4 <__assert_fail@plt+0x4ee0>
   15f44:	tst	r1, r2
   15f48:	beq	16100 <__assert_fail@plt+0x4eec>
   15f4c:	clz	r3, r0
   15f50:	clz	r2, r1
   15f54:	sub	r3, r2, r3
   15f58:	rsbs	r3, r3, #31
   15f5c:	addne	r3, r3, r3, lsl #1
   15f60:	mov	r2, #0
   15f64:	addne	pc, pc, r3, lsl #2
   15f68:	nop			; (mov r0, r0)
   15f6c:	cmp	r0, r1, lsl #31
   15f70:	adc	r2, r2, r2
   15f74:	subcs	r0, r0, r1, lsl #31
   15f78:	cmp	r0, r1, lsl #30
   15f7c:	adc	r2, r2, r2
   15f80:	subcs	r0, r0, r1, lsl #30
   15f84:	cmp	r0, r1, lsl #29
   15f88:	adc	r2, r2, r2
   15f8c:	subcs	r0, r0, r1, lsl #29
   15f90:	cmp	r0, r1, lsl #28
   15f94:	adc	r2, r2, r2
   15f98:	subcs	r0, r0, r1, lsl #28
   15f9c:	cmp	r0, r1, lsl #27
   15fa0:	adc	r2, r2, r2
   15fa4:	subcs	r0, r0, r1, lsl #27
   15fa8:	cmp	r0, r1, lsl #26
   15fac:	adc	r2, r2, r2
   15fb0:	subcs	r0, r0, r1, lsl #26
   15fb4:	cmp	r0, r1, lsl #25
   15fb8:	adc	r2, r2, r2
   15fbc:	subcs	r0, r0, r1, lsl #25
   15fc0:	cmp	r0, r1, lsl #24
   15fc4:	adc	r2, r2, r2
   15fc8:	subcs	r0, r0, r1, lsl #24
   15fcc:	cmp	r0, r1, lsl #23
   15fd0:	adc	r2, r2, r2
   15fd4:	subcs	r0, r0, r1, lsl #23
   15fd8:	cmp	r0, r1, lsl #22
   15fdc:	adc	r2, r2, r2
   15fe0:	subcs	r0, r0, r1, lsl #22
   15fe4:	cmp	r0, r1, lsl #21
   15fe8:	adc	r2, r2, r2
   15fec:	subcs	r0, r0, r1, lsl #21
   15ff0:	cmp	r0, r1, lsl #20
   15ff4:	adc	r2, r2, r2
   15ff8:	subcs	r0, r0, r1, lsl #20
   15ffc:	cmp	r0, r1, lsl #19
   16000:	adc	r2, r2, r2
   16004:	subcs	r0, r0, r1, lsl #19
   16008:	cmp	r0, r1, lsl #18
   1600c:	adc	r2, r2, r2
   16010:	subcs	r0, r0, r1, lsl #18
   16014:	cmp	r0, r1, lsl #17
   16018:	adc	r2, r2, r2
   1601c:	subcs	r0, r0, r1, lsl #17
   16020:	cmp	r0, r1, lsl #16
   16024:	adc	r2, r2, r2
   16028:	subcs	r0, r0, r1, lsl #16
   1602c:	cmp	r0, r1, lsl #15
   16030:	adc	r2, r2, r2
   16034:	subcs	r0, r0, r1, lsl #15
   16038:	cmp	r0, r1, lsl #14
   1603c:	adc	r2, r2, r2
   16040:	subcs	r0, r0, r1, lsl #14
   16044:	cmp	r0, r1, lsl #13
   16048:	adc	r2, r2, r2
   1604c:	subcs	r0, r0, r1, lsl #13
   16050:	cmp	r0, r1, lsl #12
   16054:	adc	r2, r2, r2
   16058:	subcs	r0, r0, r1, lsl #12
   1605c:	cmp	r0, r1, lsl #11
   16060:	adc	r2, r2, r2
   16064:	subcs	r0, r0, r1, lsl #11
   16068:	cmp	r0, r1, lsl #10
   1606c:	adc	r2, r2, r2
   16070:	subcs	r0, r0, r1, lsl #10
   16074:	cmp	r0, r1, lsl #9
   16078:	adc	r2, r2, r2
   1607c:	subcs	r0, r0, r1, lsl #9
   16080:	cmp	r0, r1, lsl #8
   16084:	adc	r2, r2, r2
   16088:	subcs	r0, r0, r1, lsl #8
   1608c:	cmp	r0, r1, lsl #7
   16090:	adc	r2, r2, r2
   16094:	subcs	r0, r0, r1, lsl #7
   16098:	cmp	r0, r1, lsl #6
   1609c:	adc	r2, r2, r2
   160a0:	subcs	r0, r0, r1, lsl #6
   160a4:	cmp	r0, r1, lsl #5
   160a8:	adc	r2, r2, r2
   160ac:	subcs	r0, r0, r1, lsl #5
   160b0:	cmp	r0, r1, lsl #4
   160b4:	adc	r2, r2, r2
   160b8:	subcs	r0, r0, r1, lsl #4
   160bc:	cmp	r0, r1, lsl #3
   160c0:	adc	r2, r2, r2
   160c4:	subcs	r0, r0, r1, lsl #3
   160c8:	cmp	r0, r1, lsl #2
   160cc:	adc	r2, r2, r2
   160d0:	subcs	r0, r0, r1, lsl #2
   160d4:	cmp	r0, r1, lsl #1
   160d8:	adc	r2, r2, r2
   160dc:	subcs	r0, r0, r1, lsl #1
   160e0:	cmp	r0, r1
   160e4:	adc	r2, r2, r2
   160e8:	subcs	r0, r0, r1
   160ec:	mov	r0, r2
   160f0:	bx	lr
   160f4:	moveq	r0, #1
   160f8:	movne	r0, #0
   160fc:	bx	lr
   16100:	clz	r2, r1
   16104:	rsb	r2, r2, #31
   16108:	lsr	r0, r0, r2
   1610c:	bx	lr
   16110:	cmp	r0, #0
   16114:	mvnne	r0, #0
   16118:	b	16178 <__assert_fail@plt+0x4f64>
   1611c:	cmp	r1, #0
   16120:	beq	16110 <__assert_fail@plt+0x4efc>
   16124:	push	{r0, r1, lr}
   16128:	bl	15f30 <__assert_fail@plt+0x4d1c>
   1612c:	pop	{r1, r2, lr}
   16130:	mul	r3, r2, r0
   16134:	sub	r1, r1, r3
   16138:	bx	lr
   1613c:	cmp	r3, #0
   16140:	cmpeq	r2, #0
   16144:	bne	1615c <__assert_fail@plt+0x4f48>
   16148:	cmp	r1, #0
   1614c:	cmpeq	r0, #0
   16150:	mvnne	r1, #0
   16154:	mvnne	r0, #0
   16158:	b	16178 <__assert_fail@plt+0x4f64>
   1615c:	sub	sp, sp, #8
   16160:	push	{sp, lr}
   16164:	bl	16188 <__assert_fail@plt+0x4f74>
   16168:	ldr	lr, [sp, #4]
   1616c:	add	sp, sp, #8
   16170:	pop	{r2, r3}
   16174:	bx	lr
   16178:	push	{r1, lr}
   1617c:	mov	r0, #8
   16180:	bl	10f50 <raise@plt>
   16184:	pop	{r1, pc}
   16188:	cmp	r1, r3
   1618c:	cmpeq	r0, r2
   16190:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16194:	mov	r4, r0
   16198:	movcc	r0, #0
   1619c:	mov	r5, r1
   161a0:	ldr	lr, [sp, #36]	; 0x24
   161a4:	movcc	r1, r0
   161a8:	bcc	162a4 <__assert_fail@plt+0x5090>
   161ac:	cmp	r3, #0
   161b0:	clzeq	ip, r2
   161b4:	clzne	ip, r3
   161b8:	addeq	ip, ip, #32
   161bc:	cmp	r5, #0
   161c0:	clzeq	r1, r4
   161c4:	addeq	r1, r1, #32
   161c8:	clzne	r1, r5
   161cc:	sub	ip, ip, r1
   161d0:	sub	sl, ip, #32
   161d4:	lsl	r9, r3, ip
   161d8:	rsb	fp, ip, #32
   161dc:	orr	r9, r9, r2, lsl sl
   161e0:	orr	r9, r9, r2, lsr fp
   161e4:	lsl	r8, r2, ip
   161e8:	cmp	r5, r9
   161ec:	cmpeq	r4, r8
   161f0:	movcc	r0, #0
   161f4:	movcc	r1, r0
   161f8:	bcc	16214 <__assert_fail@plt+0x5000>
   161fc:	mov	r0, #1
   16200:	subs	r4, r4, r8
   16204:	lsl	r1, r0, sl
   16208:	orr	r1, r1, r0, lsr fp
   1620c:	lsl	r0, r0, ip
   16210:	sbc	r5, r5, r9
   16214:	cmp	ip, #0
   16218:	beq	162a4 <__assert_fail@plt+0x5090>
   1621c:	lsr	r6, r8, #1
   16220:	orr	r6, r6, r9, lsl #31
   16224:	lsr	r7, r9, #1
   16228:	mov	r2, ip
   1622c:	b	16250 <__assert_fail@plt+0x503c>
   16230:	subs	r3, r4, r6
   16234:	sbc	r8, r5, r7
   16238:	adds	r3, r3, r3
   1623c:	adc	r8, r8, r8
   16240:	adds	r4, r3, #1
   16244:	adc	r5, r8, #0
   16248:	subs	r2, r2, #1
   1624c:	beq	1626c <__assert_fail@plt+0x5058>
   16250:	cmp	r5, r7
   16254:	cmpeq	r4, r6
   16258:	bcs	16230 <__assert_fail@plt+0x501c>
   1625c:	adds	r4, r4, r4
   16260:	adc	r5, r5, r5
   16264:	subs	r2, r2, #1
   16268:	bne	16250 <__assert_fail@plt+0x503c>
   1626c:	lsr	r3, r4, ip
   16270:	orr	r3, r3, r5, lsl fp
   16274:	lsr	r2, r5, ip
   16278:	orr	r3, r3, r5, lsr sl
   1627c:	adds	r0, r0, r4
   16280:	mov	r4, r3
   16284:	lsl	r3, r2, ip
   16288:	orr	r3, r3, r4, lsl sl
   1628c:	lsl	ip, r4, ip
   16290:	orr	r3, r3, r4, lsr fp
   16294:	adc	r1, r1, r5
   16298:	subs	r0, r0, ip
   1629c:	mov	r5, r2
   162a0:	sbc	r1, r1, r3
   162a4:	cmp	lr, #0
   162a8:	strdne	r4, [lr]
   162ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   162b4:	mov	r7, r0
   162b8:	ldr	r6, [pc, #72]	; 16308 <__assert_fail@plt+0x50f4>
   162bc:	ldr	r5, [pc, #72]	; 1630c <__assert_fail@plt+0x50f8>
   162c0:	add	r6, pc, r6
   162c4:	add	r5, pc, r5
   162c8:	sub	r6, r6, r5
   162cc:	mov	r8, r1
   162d0:	mov	r9, r2
   162d4:	bl	10f0c <calloc@plt-0x20>
   162d8:	asrs	r6, r6, #2
   162dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   162e0:	mov	r4, #0
   162e4:	add	r4, r4, #1
   162e8:	ldr	r3, [r5], #4
   162ec:	mov	r2, r9
   162f0:	mov	r1, r8
   162f4:	mov	r0, r7
   162f8:	blx	r3
   162fc:	cmp	r6, r4
   16300:	bne	162e4 <__assert_fail@plt+0x50d0>
   16304:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16308:	andeq	r1, r1, r4, lsr ip
   1630c:	andeq	r1, r1, ip, lsr #24
   16310:	bx	lr
   16314:	ldr	r3, [pc, #12]	; 16328 <__assert_fail@plt+0x5114>
   16318:	mov	r1, #0
   1631c:	add	r3, pc, r3
   16320:	ldr	r2, [r3]
   16324:	b	11124 <__cxa_atexit@plt>
   16328:	andeq	r1, r1, ip, ror #27

Disassembly of section .fini:

0001632c <.fini>:
   1632c:	push	{r3, lr}
   16330:	pop	{r3, pc}
