
raspbian-preinstalled/logger:     file format elf32-littlearm


Disassembly of section .init:

000112b8 <.init>:
   112b8:	push	{r3, lr}
   112bc:	bl	12a08 <__assert_fail@plt+0x137c>
   112c0:	pop	{r3, pc}

Disassembly of section .plt:

000112c4 <calloc@plt-0x14>:
   112c4:	push	{lr}		; (str lr, [sp, #-4]!)
   112c8:	ldr	lr, [pc, #4]	; 112d4 <calloc@plt-0x4>
   112cc:	add	lr, pc, lr
   112d0:	ldr	pc, [lr, #8]!
   112d4:	ldrdeq	r6, [r1], -r8

000112d8 <calloc@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3032]!	; 0xbd8

000112e4 <raise@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3024]!	; 0xbd0

000112f0 <__getdelim@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3016]!	; 0xbc8

000112fc <strcmp@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3008]!	; 0xbc0

00011308 <getlogin@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3000]!	; 0xbb8

00011314 <strtol@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011320 <getpwuid@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #2984]!	; 0xba8

0001132c <strcspn@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #2976]!	; 0xba0

00011338 <memmove@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #2968]!	; 0xb98

00011344 <free@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #2960]!	; 0xb90

00011350 <gai_strerror@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #2952]!	; 0xb88

0001135c <ferror@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #2944]!	; 0xb80

00011368 <strndup@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #2936]!	; 0xb78

00011374 <_exit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #2928]!	; 0xb70

00011380 <memcpy@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #2920]!	; 0xb68

0001138c <__strtoull_internal@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #90112	; 0x16000
   11394:	ldr	pc, [ip, #2912]!	; 0xb60

00011398 <sendmsg@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #90112	; 0x16000
   113a0:	ldr	pc, [ip, #2904]!	; 0xb58

000113a4 <stpcpy@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #90112	; 0x16000
   113ac:	ldr	pc, [ip, #2896]!	; 0xb50

000113b0 <dcgettext@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #90112	; 0x16000
   113b8:	ldr	pc, [ip, #2888]!	; 0xb48

000113bc <strdup@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #90112	; 0x16000
   113c4:	ldr	pc, [ip, #2880]!	; 0xb40

000113c8 <__stack_chk_fail@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #90112	; 0x16000
   113d0:	ldr	pc, [ip, #2872]!	; 0xb38

000113d4 <sysconf@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #90112	; 0x16000
   113dc:	ldr	pc, [ip, #2864]!	; 0xb30

000113e0 <realloc@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #90112	; 0x16000
   113e8:	ldr	pc, [ip, #2856]!	; 0xb28

000113ec <textdomain@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #90112	; 0x16000
   113f4:	ldr	pc, [ip, #2848]!	; 0xb20

000113f8 <strcasecmp@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #90112	; 0x16000
   11400:	ldr	pc, [ip, #2840]!	; 0xb18

00011404 <err@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #90112	; 0x16000
   1140c:	ldr	pc, [ip, #2832]!	; 0xb10

00011410 <geteuid@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #90112	; 0x16000
   11418:	ldr	pc, [ip, #2824]!	; 0xb08

0001141c <gettimeofday@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #90112	; 0x16000
   11424:	ldr	pc, [ip, #2816]!	; 0xb00

00011428 <__strcpy_chk@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #90112	; 0x16000
   11430:	ldr	pc, [ip, #2808]!	; 0xaf8

00011434 <__fpending@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #90112	; 0x16000
   1143c:	ldr	pc, [ip, #2800]!	; 0xaf0

00011440 <gethostname@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #90112	; 0x16000
   11448:	ldr	pc, [ip, #2792]!	; 0xae8

0001144c <malloc@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #90112	; 0x16000
   11454:	ldr	pc, [ip, #2784]!	; 0xae0

00011458 <__libc_start_main@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #90112	; 0x16000
   11460:	ldr	pc, [ip, #2776]!	; 0xad8

00011464 <strftime@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #90112	; 0x16000
   1146c:	ldr	pc, [ip, #2768]!	; 0xad0

00011470 <localtime@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #90112	; 0x16000
   11478:	ldr	pc, [ip, #2760]!	; 0xac8

0001147c <__gmon_start__@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #90112	; 0x16000
   11484:	ldr	pc, [ip, #2752]!	; 0xac0

00011488 <freopen64@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #90112	; 0x16000
   11490:	ldr	pc, [ip, #2744]!	; 0xab8

00011494 <getopt_long@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #90112	; 0x16000
   1149c:	ldr	pc, [ip, #2736]!	; 0xab0

000114a0 <kill@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #90112	; 0x16000
   114a8:	ldr	pc, [ip, #2728]!	; 0xaa8

000114ac <__ctype_b_loc@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #90112	; 0x16000
   114b4:	ldr	pc, [ip, #2720]!	; 0xaa0

000114b8 <getpid@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #90112	; 0x16000
   114c0:	ldr	pc, [ip, #2712]!	; 0xa98

000114c4 <exit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #90112	; 0x16000
   114cc:	ldr	pc, [ip, #2704]!	; 0xa90

000114d0 <strtoul@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #90112	; 0x16000
   114d8:	ldr	pc, [ip, #2696]!	; 0xa88

000114dc <strlen@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #90112	; 0x16000
   114e4:	ldr	pc, [ip, #2688]!	; 0xa80

000114e8 <strchr@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #90112	; 0x16000
   114f0:	ldr	pc, [ip, #2680]!	; 0xa78

000114f4 <warnx@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #90112	; 0x16000
   114fc:	ldr	pc, [ip, #2672]!	; 0xa70

00011500 <__errno_location@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #90112	; 0x16000
   11508:	ldr	pc, [ip, #2664]!	; 0xa68

0001150c <__cxa_atexit@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #90112	; 0x16000
   11514:	ldr	pc, [ip, #2656]!	; 0xa60

00011518 <__vasprintf_chk@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #90112	; 0x16000
   11520:	ldr	pc, [ip, #2648]!	; 0xa58

00011524 <memset@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #90112	; 0x16000
   1152c:	ldr	pc, [ip, #2640]!	; 0xa50

00011530 <fgetc@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #90112	; 0x16000
   11538:	ldr	pc, [ip, #2632]!	; 0xa48

0001153c <__printf_chk@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #90112	; 0x16000
   11544:	ldr	pc, [ip, #2624]!	; 0xa40

00011548 <strtod@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #90112	; 0x16000
   11550:	ldr	pc, [ip, #2616]!	; 0xa38

00011554 <__fprintf_chk@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #90112	; 0x16000
   1155c:	ldr	pc, [ip, #2608]!	; 0xa30

00011560 <writev@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #90112	; 0x16000
   11568:	ldr	pc, [ip, #2600]!	; 0xa28

0001156c <fclose@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #90112	; 0x16000
   11574:	ldr	pc, [ip, #2592]!	; 0xa20

00011578 <strtok@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #90112	; 0x16000
   11580:	ldr	pc, [ip, #2584]!	; 0xa18

00011584 <setlocale@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #90112	; 0x16000
   1158c:	ldr	pc, [ip, #2576]!	; 0xa10

00011590 <errx@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #90112	; 0x16000
   11598:	ldr	pc, [ip, #2568]!	; 0xa08

0001159c <warn@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #90112	; 0x16000
   115a4:	ldr	pc, [ip, #2560]!	; 0xa00

000115a8 <fputc@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #90112	; 0x16000
   115b0:	ldr	pc, [ip, #2552]!	; 0x9f8

000115b4 <localeconv@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #90112	; 0x16000
   115bc:	ldr	pc, [ip, #2544]!	; 0x9f0

000115c0 <ntp_gettimex@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #90112	; 0x16000
   115c8:	ldr	pc, [ip, #2536]!	; 0x9e8

000115cc <sd_journal_sendv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #90112	; 0x16000
   115d4:	ldr	pc, [ip, #2528]!	; 0x9e0

000115d8 <__strtoll_internal@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #90112	; 0x16000
   115e0:	ldr	pc, [ip, #2520]!	; 0x9d8

000115e4 <fopen64@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #90112	; 0x16000
   115ec:	ldr	pc, [ip, #2512]!	; 0x9d0

000115f0 <freeaddrinfo@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #90112	; 0x16000
   115f8:	ldr	pc, [ip, #2504]!	; 0x9c8

000115fc <getaddrinfo@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #90112	; 0x16000
   11604:	ldr	pc, [ip, #2496]!	; 0x9c0

00011608 <sd_booted@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #90112	; 0x16000
   11610:	ldr	pc, [ip, #2488]!	; 0x9b8

00011614 <socket@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #90112	; 0x16000
   1161c:	ldr	pc, [ip, #2480]!	; 0x9b0

00011620 <bindtextdomain@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #90112	; 0x16000
   11628:	ldr	pc, [ip, #2472]!	; 0x9a8

0001162c <fputs@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #90112	; 0x16000
   11634:	ldr	pc, [ip, #2464]!	; 0x9a0

00011638 <strncmp@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #90112	; 0x16000
   11640:	ldr	pc, [ip, #2456]!	; 0x998

00011644 <abort@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #90112	; 0x16000
   1164c:	ldr	pc, [ip, #2448]!	; 0x990

00011650 <getc@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #90112	; 0x16000
   11658:	ldr	pc, [ip, #2440]!	; 0x988

0001165c <close@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #90112	; 0x16000
   11664:	ldr	pc, [ip, #2432]!	; 0x980

00011668 <connect@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #90112	; 0x16000
   11670:	ldr	pc, [ip, #2424]!	; 0x978

00011674 <__snprintf_chk@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #90112	; 0x16000
   1167c:	ldr	pc, [ip, #2416]!	; 0x970

00011680 <strspn@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #90112	; 0x16000
   11688:	ldr	pc, [ip, #2408]!	; 0x968

0001168c <__assert_fail@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #90112	; 0x16000
   11694:	ldr	pc, [ip, #2400]!	; 0x960

Disassembly of section .text:

00011698 <.text>:
   11698:	ldr	r3, [pc, #4052]	; 12674 <__assert_fail@plt+0xfe8>
   1169c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a0:	sub	sp, sp, #108	; 0x6c
   116a4:	ldr	r3, [r3]
   116a8:	mov	r2, #60	; 0x3c
   116ac:	mov	r5, r0
   116b0:	mov	r4, r1
   116b4:	add	r0, sp, #40	; 0x28
   116b8:	mov	r1, #0
   116bc:	str	r3, [sp, #100]	; 0x64
   116c0:	bl	11524 <memset@plt>
   116c4:	mov	r3, #6
   116c8:	mov	r2, #112	; 0x70
   116cc:	mov	r0, r3
   116d0:	mov	lr, #13
   116d4:	mov	ip, #1024	; 0x400
   116d8:	ldr	r1, [pc, #3992]	; 12678 <__assert_fail@plt+0xfec>
   116dc:	mvn	r6, #0
   116e0:	str	r3, [sp, #68]	; 0x44
   116e4:	strb	r2, [sp, #96]	; 0x60
   116e8:	str	lr, [sp, #36]	; 0x24
   116ec:	str	ip, [sp, #72]	; 0x48
   116f0:	str	r6, [sp, #32]
   116f4:	bl	11584 <setlocale@plt>
   116f8:	ldr	r1, [pc, #3964]	; 1267c <__assert_fail@plt+0xff0>
   116fc:	ldr	r0, [pc, #3964]	; 12680 <__assert_fail@plt+0xff4>
   11700:	bl	11620 <bindtextdomain@plt>
   11704:	ldr	r0, [pc, #3956]	; 12680 <__assert_fail@plt+0xff4>
   11708:	bl	113ec <textdomain@plt>
   1170c:	ldr	r9, [pc, #3952]	; 12684 <__assert_fail@plt+0xff8>
   11710:	ldr	r0, [pc, #3952]	; 12688 <__assert_fail@plt+0xffc>
   11714:	ldr	fp, [pc, #3952]	; 1268c <__assert_fail@plt+0x1000>
   11718:	ldr	sl, [pc, #3952]	; 12690 <__assert_fail@plt+0x1004>
   1171c:	bl	166e8 <__assert_fail@plt+0x505c>
   11720:	add	r3, sp, #84	; 0x54
   11724:	mov	r2, #0
   11728:	add	r1, sp, #76	; 0x4c
   1172c:	str	r3, [sp, #84]	; 0x54
   11730:	str	r3, [sp, #88]	; 0x58
   11734:	mov	r3, #2
   11738:	str	r2, [sp, #8]
   1173c:	str	r1, [sp, #76]	; 0x4c
   11740:	str	r1, [sp, #80]	; 0x50
   11744:	str	r2, [sp, #16]
   11748:	str	r3, [sp, #12]
   1174c:	mov	r6, #0
   11750:	str	r6, [sp]
   11754:	mov	r3, r9
   11758:	mov	r2, fp
   1175c:	mov	r1, r4
   11760:	mov	r0, r5
   11764:	bl	11494 <getopt_long@plt>
   11768:	cmn	r0, #1
   1176c:	beq	11cc4 <__assert_fail@plt+0x638>
   11770:	sub	r0, r0, #80	; 0x50
   11774:	cmp	r0, #58	; 0x3a
   11778:	ldrls	pc, [pc, r0, lsl #2]
   1177c:	b	124e4 <__assert_fail@plt+0xe58>
   11780:	andeq	r1, r1, ip, lsr #18
   11784:	andeq	r2, r1, r4, ror #9
   11788:	andeq	r2, r1, r4, ror #9
   1178c:	andeq	r1, r1, r4, lsl #18
   11790:	strdeq	r1, [r1], -r8
   11794:	andeq	r2, r1, r4, ror #9
   11798:	andeq	r1, r1, r8, asr #17
   1179c:	andeq	r2, r1, r4, ror #9
   117a0:	andeq	r2, r1, r4, ror #9
   117a4:	andeq	r2, r1, r4, ror #9
   117a8:	andeq	r2, r1, r4, ror #9
   117ac:	andeq	r2, r1, r4, ror #9
   117b0:	andeq	r2, r1, r4, ror #9
   117b4:	andeq	r2, r1, r4, ror #9
   117b8:	andeq	r2, r1, r4, ror #9
   117bc:	andeq	r2, r1, r4, ror #9
   117c0:	andeq	r2, r1, r4, ror #9
   117c4:	andeq	r2, r1, r4, ror #9
   117c8:	andeq	r2, r1, r4, ror #9
   117cc:	andeq	r2, r1, r4, ror #9
   117d0:			; <UNDEFINED> instruction: 0x000118bc
   117d4:	andeq	r1, r1, ip, lsr #17
   117d8:	andeq	r1, r1, r4, lsl #17
   117dc:	andeq	r2, r1, r4, ror #9
   117e0:	andeq	r2, r1, r0, asr #3
   117e4:	andeq	r1, r1, r8, ror r8
   117e8:	andeq	r2, r1, r4, ror #9
   117ec:	andeq	r2, r1, r4, ror #9
   117f0:	andeq	r2, r1, r4, ror #9
   117f4:	andeq	r2, r1, r4, ror #9
   117f8:	andeq	r1, r1, r0, ror #24
   117fc:	andeq	r2, r1, r4, ror #9
   11800:	strdeq	r1, [r1], -r4
   11804:	andeq	r2, r1, r4, ror #9
   11808:	andeq	r2, r1, r4, ror #9
   1180c:	andeq	r1, r1, r4, ror #23
   11810:	ldrdeq	r1, [r1], -r8
   11814:	andeq	r1, r1, ip, asr #23
   11818:	andeq	r2, r1, r4, ror #9
   1181c:	andeq	r2, r1, r4, ror #9
   11820:	andeq	r2, r1, r4, ror #9
   11824:	andeq	r2, r1, r4, ror #9
   11828:	andeq	r2, r1, r4, ror #9
   1182c:	andeq	r2, r1, r4, ror #9
   11830:	andeq	r2, r1, r4, ror #9
   11834:	andeq	r2, r1, r4, ror #9
   11838:	andeq	r2, r1, r4, ror #9
   1183c:	andeq	r2, r1, r4, ror #9
   11840:			; <UNDEFINED> instruction: 0x00011bbc
   11844:	andeq	r1, r1, r0, lsl #23
   11848:	andeq	r1, r1, r4, ror fp
   1184c:	andeq	r1, r1, r0, lsl #22
   11850:	muleq	r1, r0, sl
   11854:	andeq	r1, r1, r0, ror sl
   11858:	andeq	r1, r1, r0, ror #20
   1185c:	andeq	r1, r1, ip, ror #16
   11860:	ldrdeq	r1, [r1], -r4
   11864:	andeq	r1, r1, r8, asr #18
   11868:	andeq	r1, r1, r8, lsr r9
   1186c:	ldr	r6, [sl]
   11870:	cmp	r6, #0
   11874:	bne	11c6c <__assert_fail@plt+0x5e0>
   11878:	bl	114b8 <getpid@plt>
   1187c:	str	r0, [sp, #40]	; 0x28
   11880:	b	1174c <__assert_fail@plt+0xc0>
   11884:	ldr	r3, [pc, #3592]	; 12694 <__assert_fail@plt+0x1008>
   11888:	ldr	r1, [pc, #3592]	; 12698 <__assert_fail@plt+0x100c>
   1188c:	ldr	r0, [sl]
   11890:	ldr	r2, [r3]
   11894:	bl	11488 <freopen64@plt>
   11898:	cmp	r0, #0
   1189c:	beq	12990 <__assert_fail@plt+0x1304>
   118a0:	mov	r3, #1
   118a4:	str	r3, [sp, #16]
   118a8:	b	1174c <__assert_fail@plt+0xc0>
   118ac:	ldrb	r3, [sp, #96]	; 0x60
   118b0:	orr	r3, r3, #128	; 0x80
   118b4:	strb	r3, [sp, #96]	; 0x60
   118b8:	b	1174c <__assert_fail@plt+0xc0>
   118bc:	mov	r3, #2
   118c0:	str	r3, [sp, #68]	; 0x44
   118c4:	b	1174c <__assert_fail@plt+0xc0>
   118c8:	mov	r2, #5
   118cc:	ldr	r1, [pc, #3528]	; 1269c <__assert_fail@plt+0x1010>
   118d0:	mov	r0, #0
   118d4:	bl	113b0 <dcgettext@plt>
   118d8:	ldr	r2, [pc, #3520]	; 126a0 <__assert_fail@plt+0x1014>
   118dc:	ldr	r3, [pc, #3520]	; 126a4 <__assert_fail@plt+0x1018>
   118e0:	ldr	r2, [r2]
   118e4:	mov	r1, r0
   118e8:	mov	r0, #1
   118ec:	bl	1153c <__printf_chk@plt>
   118f0:	mov	r0, #0
   118f4:	bl	114c4 <exit@plt>
   118f8:	mov	r3, #4
   118fc:	str	r3, [sp, #68]	; 0x44
   11900:	b	1174c <__assert_fail@plt+0xc0>
   11904:	mov	r2, #5
   11908:	ldr	r1, [pc, #3480]	; 126a8 <__assert_fail@plt+0x101c>
   1190c:	mov	r0, #0
   11910:	ldr	r6, [sl]
   11914:	bl	113b0 <dcgettext@plt>
   11918:	mov	r1, r0
   1191c:	mov	r0, r6
   11920:	bl	14d68 <__assert_fail@plt+0x36dc>
   11924:	str	r0, [sp, #72]	; 0x48
   11928:	b	1174c <__assert_fail@plt+0xc0>
   1192c:	ldr	r3, [sl]
   11930:	str	r3, [sp, #64]	; 0x40
   11934:	b	1174c <__assert_fail@plt+0xc0>
   11938:	ldrb	r3, [sp, #97]	; 0x61
   1193c:	orr	r3, r3, #1
   11940:	strb	r3, [sp, #97]	; 0x61
   11944:	b	1174c <__assert_fail@plt+0xc0>
   11948:	ldr	r6, [sl]
   1194c:	mov	r1, #34	; 0x22
   11950:	mov	r0, r6
   11954:	bl	114e8 <strchr@plt>
   11958:	subs	r8, r0, #0
   1195c:	beq	119b4 <__assert_fail@plt+0x328>
   11960:	mov	r1, #61	; 0x3d
   11964:	mov	r0, r6
   11968:	bl	114e8 <strchr@plt>
   1196c:	mov	r1, #34	; 0x22
   11970:	mov	r7, r0
   11974:	add	r0, r8, #1
   11978:	bl	114e8 <strchr@plt>
   1197c:	cmp	r7, #0
   11980:	cmpne	r0, #0
   11984:	beq	119b4 <__assert_fail@plt+0x328>
   11988:	cmp	r6, r7
   1198c:	cmpcc	r7, r8
   11990:	bcs	119b4 <__assert_fail@plt+0x328>
   11994:	cmp	r8, r0
   11998:	add	r2, r7, #1
   1199c:	sub	r3, r8, r2
   119a0:	clz	r3, r3
   119a4:	lsr	r3, r3, #5
   119a8:	movcs	r3, #0
   119ac:	cmp	r3, #0
   119b0:	bne	127e0 <__assert_fail@plt+0x1154>
   119b4:	ldr	r1, [pc, #3312]	; 126ac <__assert_fail@plt+0x1020>
   119b8:	mov	r2, #5
   119bc:	mov	r0, #0
   119c0:	bl	113b0 <dcgettext@plt>
   119c4:	ldr	r2, [sl]
   119c8:	mov	r1, r0
   119cc:	mov	r0, #1
   119d0:	bl	11590 <errx@plt>
   119d4:	ldr	r6, [sl]
   119d8:	mov	r1, #64	; 0x40
   119dc:	mov	r0, r6
   119e0:	bl	114e8 <strchr@plt>
   119e4:	subs	r3, r0, #0
   119e8:	str	r3, [sp, #20]
   119ec:	beq	11e80 <__assert_fail@plt+0x7f4>
   119f0:	ldr	r2, [sp, #20]
   119f4:	cmp	r6, r2
   119f8:	beq	11ebc <__assert_fail@plt+0x830>
   119fc:	ldrsb	r3, [r2, #1]
   11a00:	cmp	r3, #0
   11a04:	beq	11ebc <__assert_fail@plt+0x830>
   11a08:	adds	r7, r2, #1
   11a0c:	beq	11f4c <__assert_fail@plt+0x8c0>
   11a10:	add	r8, sp, #28
   11a14:	b	11a38 <__assert_fail@plt+0x3ac>
   11a18:	ldrsb	r2, [r3]
   11a1c:	cmp	r2, #46	; 0x2e
   11a20:	bne	11ebc <__assert_fail@plt+0x830>
   11a24:	ldrsb	r2, [r3, #1]
   11a28:	cmp	r2, #0
   11a2c:	beq	11ebc <__assert_fail@plt+0x830>
   11a30:	adds	r7, r3, #1
   11a34:	beq	11f4c <__assert_fail@plt+0x8c0>
   11a38:	mov	r1, r8
   11a3c:	mov	r0, r7
   11a40:	bl	14698 <__assert_fail@plt+0x300c>
   11a44:	cmp	r0, #0
   11a48:	bne	11f4c <__assert_fail@plt+0x8c0>
   11a4c:	ldr	r3, [sp, #28]
   11a50:	cmp	r3, r7
   11a54:	cmpne	r3, #0
   11a58:	bne	11a18 <__assert_fail@plt+0x38c>
   11a5c:	b	11ebc <__assert_fail@plt+0x830>
   11a60:	ldrb	r3, [sp, #96]	; 0x60
   11a64:	orr	r3, r3, #2
   11a68:	strb	r3, [sp, #96]	; 0x60
   11a6c:	b	1174c <__assert_fail@plt+0xc0>
   11a70:	ldr	r6, [sl]
   11a74:	mov	r1, #32
   11a78:	mov	r0, r6
   11a7c:	bl	114e8 <strchr@plt>
   11a80:	cmp	r0, #0
   11a84:	bne	12984 <__assert_fail@plt+0x12f8>
   11a88:	str	r6, [sp, #52]	; 0x34
   11a8c:	b	1174c <__assert_fail@plt+0xc0>
   11a90:	ldr	r6, [sl]
   11a94:	ldr	r1, [pc, #3092]	; 126b0 <__assert_fail@plt+0x1024>
   11a98:	mov	r0, r6
   11a9c:	bl	112fc <strcmp@plt>
   11aa0:	subs	r3, r0, #0
   11aa4:	str	r3, [sp, #12]
   11aa8:	beq	1174c <__assert_fail@plt+0xc0>
   11aac:	ldr	r1, [pc, #3072]	; 126b4 <__assert_fail@plt+0x1028>
   11ab0:	mov	r0, r6
   11ab4:	bl	112fc <strcmp@plt>
   11ab8:	cmp	r0, #0
   11abc:	beq	11fec <__assert_fail@plt+0x960>
   11ac0:	ldr	r1, [pc, #3056]	; 126b8 <__assert_fail@plt+0x102c>
   11ac4:	mov	r0, r6
   11ac8:	bl	112fc <strcmp@plt>
   11acc:	cmp	r0, #0
   11ad0:	moveq	r3, #2
   11ad4:	streq	r3, [sp, #12]
   11ad8:	beq	1174c <__assert_fail@plt+0xc0>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #3028]	; 126bc <__assert_fail@plt+0x1030>
   11ae4:	mov	r0, #0
   11ae8:	bl	113b0 <dcgettext@plt>
   11aec:	mov	r1, r6
   11af0:	bl	114f4 <warnx@plt>
   11af4:	mov	r3, #2
   11af8:	str	r3, [sp, #12]
   11afc:	b	1174c <__assert_fail@plt+0xc0>
   11b00:	ldr	r0, [sl]
   11b04:	ldr	r3, [pc, #3220]	; 127a0 <__assert_fail@plt+0x1114>
   11b08:	cmp	r0, #0
   11b0c:	str	r3, [sp, #92]	; 0x5c
   11b10:	beq	1174c <__assert_fail@plt+0xc0>
   11b14:	ldr	r7, [pc, #2980]	; 126c0 <__assert_fail@plt+0x1034>
   11b18:	ldr	r8, [pc, #2980]	; 126c4 <__assert_fail@plt+0x1038>
   11b1c:	b	11b30 <__assert_fail@plt+0x4a4>
   11b20:	ldrb	r3, [sp, #96]	; 0x60
   11b24:	bic	r3, r3, #48	; 0x30
   11b28:	strb	r3, [sp, #96]	; 0x60
   11b2c:	mov	r0, #0
   11b30:	mov	r1, r7
   11b34:	bl	11578 <strtok@plt>
   11b38:	subs	r6, r0, #0
   11b3c:	beq	1174c <__assert_fail@plt+0xc0>
   11b40:	mov	r1, r8
   11b44:	bl	112fc <strcmp@plt>
   11b48:	cmp	r0, #0
   11b4c:	beq	11b20 <__assert_fail@plt+0x494>
   11b50:	ldr	r1, [pc, #2928]	; 126c8 <__assert_fail@plt+0x103c>
   11b54:	mov	r0, r6
   11b58:	bl	112fc <strcmp@plt>
   11b5c:	cmp	r0, #0
   11b60:	bne	11ca0 <__assert_fail@plt+0x614>
   11b64:	ldrb	r3, [sp, #96]	; 0x60
   11b68:	bic	r3, r3, #32
   11b6c:	strb	r3, [sp, #96]	; 0x60
   11b70:	b	11b2c <__assert_fail@plt+0x4a0>
   11b74:	ldr	r3, [pc, #2896]	; 126cc <__assert_fail@plt+0x1040>
   11b78:	str	r3, [sp, #92]	; 0x5c
   11b7c:	b	1174c <__assert_fail@plt+0xc0>
   11b80:	ldr	r0, [sl]
   11b84:	cmp	r0, #0
   11b88:	beq	11c90 <__assert_fail@plt+0x604>
   11b8c:	ldr	r1, [pc, #2820]	; 12698 <__assert_fail@plt+0x100c>
   11b90:	bl	115e4 <fopen64@plt>
   11b94:	subs	r3, r0, #0
   11b98:	str	r3, [sp, #8]
   11b9c:	bne	1174c <__assert_fail@plt+0xc0>
   11ba0:	ldr	r1, [pc, #2856]	; 126d0 <__assert_fail@plt+0x1044>
   11ba4:	mov	r2, #5
   11ba8:	bl	113b0 <dcgettext@plt>
   11bac:	ldr	r2, [sl]
   11bb0:	mov	r1, r0
   11bb4:	mov	r0, #1
   11bb8:	bl	11404 <err@plt>
   11bbc:	ldrb	r3, [sp, #96]	; 0x60
   11bc0:	orr	r3, r3, #4
   11bc4:	strb	r3, [sp, #96]	; 0x60
   11bc8:	b	1174c <__assert_fail@plt+0xc0>
   11bcc:	ldr	r3, [sl]
   11bd0:	str	r3, [sp, #56]	; 0x38
   11bd4:	b	1174c <__assert_fail@plt+0xc0>
   11bd8:	ldr	r3, [sl]
   11bdc:	str	r3, [sp, #48]	; 0x30
   11be0:	b	1174c <__assert_fail@plt+0xc0>
   11be4:	ldrb	r3, [sp, #96]	; 0x60
   11be8:	orr	r3, r3, #8
   11bec:	strb	r3, [sp, #96]	; 0x60
   11bf0:	b	1174c <__assert_fail@plt+0xc0>
   11bf4:	ldr	r7, [sl]
   11bf8:	mov	r1, #46	; 0x2e
   11bfc:	mov	r0, r7
   11c00:	bl	114e8 <strchr@plt>
   11c04:	subs	r8, r0, #0
   11c08:	beq	11e64 <__assert_fail@plt+0x7d8>
   11c0c:	mov	r3, #0
   11c10:	strb	r3, [r8]
   11c14:	ldr	r1, [pc, #2744]	; 126d4 <__assert_fail@plt+0x1048>
   11c18:	mov	r0, r7
   11c1c:	bl	12dec <__assert_fail@plt+0x1760>
   11c20:	mov	r3, #0
   11c24:	subs	r6, r0, #0
   11c28:	blt	1299c <__assert_fail@plt+0x1310>
   11c2c:	add	r7, r8, #1
   11c30:	mov	r0, r7
   11c34:	ldr	r1, [pc, #2716]	; 126d8 <__assert_fail@plt+0x104c>
   11c38:	bl	12dec <__assert_fail@plt+0x1760>
   11c3c:	cmp	r0, #0
   11c40:	blt	129bc <__assert_fail@plt+0x1330>
   11c44:	cmp	r6, #0
   11c48:	moveq	r6, #8
   11c4c:	and	r0, r0, #7
   11c50:	and	r6, r6, #1016	; 0x3f8
   11c54:	orr	r0, r0, r6
   11c58:	str	r0, [sp, #36]	; 0x24
   11c5c:	b	1174c <__assert_fail@plt+0xc0>
   11c60:	ldr	r3, [sl]
   11c64:	str	r3, [sp, #60]	; 0x3c
   11c68:	b	1174c <__assert_fail@plt+0xc0>
   11c6c:	mov	r2, #5
   11c70:	ldr	r1, [pc, #2660]	; 126dc <__assert_fail@plt+0x1050>
   11c74:	mov	r0, #0
   11c78:	bl	113b0 <dcgettext@plt>
   11c7c:	mov	r1, r0
   11c80:	mov	r0, r6
   11c84:	bl	14c88 <__assert_fail@plt+0x35fc>
   11c88:	str	r0, [sp, #40]	; 0x28
   11c8c:	b	1174c <__assert_fail@plt+0xc0>
   11c90:	ldr	r3, [pc, #2556]	; 12694 <__assert_fail@plt+0x1008>
   11c94:	ldr	r3, [r3]
   11c98:	str	r3, [sp, #8]
   11c9c:	b	1174c <__assert_fail@plt+0xc0>
   11ca0:	ldr	r1, [pc, #2616]	; 126e0 <__assert_fail@plt+0x1054>
   11ca4:	mov	r0, r6
   11ca8:	bl	112fc <strcmp@plt>
   11cac:	cmp	r0, #0
   11cb0:	bne	11dec <__assert_fail@plt+0x760>
   11cb4:	ldrb	r3, [sp, #96]	; 0x60
   11cb8:	bic	r3, r3, #64	; 0x40
   11cbc:	strb	r3, [sp, #96]	; 0x60
   11cc0:	b	11b2c <__assert_fail@plt+0x4a0>
   11cc4:	ldr	r3, [pc, #2584]	; 126e4 <__assert_fail@plt+0x1058>
   11cc8:	ldr	r7, [r3]
   11ccc:	ldr	r3, [sp, #16]
   11cd0:	subs	r5, r5, r7
   11cd4:	moveq	r3, r6
   11cd8:	cmp	r3, r6
   11cdc:	bne	11ff8 <__assert_fail@plt+0x96c>
   11ce0:	ldr	fp, [sp, #8]
   11ce4:	cmp	fp, #0
   11ce8:	beq	12010 <__assert_fail@plt+0x984>
   11cec:	mov	r3, #0
   11cf0:	mov	r0, #64	; 0x40
   11cf4:	mov	r4, r3
   11cf8:	str	r3, [sp, #24]
   11cfc:	str	r3, [sp, #28]
   11d00:	mov	r8, r3
   11d04:	bl	12abc <__assert_fail@plt+0x1430>
   11d08:	mov	r6, #8
   11d0c:	add	r7, sp, #28
   11d10:	mov	r5, r0
   11d14:	mov	r3, fp
   11d18:	mov	r2, #10
   11d1c:	mov	r1, r7
   11d20:	add	r0, sp, #24
   11d24:	str	r8, [sp, #24]
   11d28:	bl	112f0 <__getdelim@plt>
   11d2c:	cmn	r0, #1
   11d30:	beq	11e0c <__assert_fail@plt+0x780>
   11d34:	ldr	sl, [sp, #24]
   11d38:	cmp	sl, #0
   11d3c:	beq	11e0c <__assert_fail@plt+0x780>
   11d40:	mov	r0, sl
   11d44:	bl	114dc <strlen@plt>
   11d48:	subs	r9, r0, #0
   11d4c:	beq	11e08 <__assert_fail@plt+0x77c>
   11d50:	bl	114ac <__ctype_b_loc@plt>
   11d54:	add	r1, sl, r9
   11d58:	ldr	r0, [r0]
   11d5c:	b	11d68 <__assert_fail@plt+0x6dc>
   11d60:	subs	r9, r2, #0
   11d64:	beq	11e08 <__assert_fail@plt+0x77c>
   11d68:	ldrb	r3, [r1, #-1]!
   11d6c:	sub	r2, r9, #1
   11d70:	lsl	r3, r3, #1
   11d74:	ldrh	r3, [r0, r3]
   11d78:	ands	r3, r3, #8192	; 0x2000
   11d7c:	bne	11d60 <__assert_fail@plt+0x6d4>
   11d80:	cmp	r4, r6
   11d84:	strb	r3, [sl, r9]
   11d88:	beq	11da4 <__assert_fail@plt+0x718>
   11d8c:	add	r3, r5, r4, lsl #3
   11d90:	ldr	r2, [sp, #24]
   11d94:	str	r2, [r5, r4, lsl #3]
   11d98:	str	r9, [r3, #4]
   11d9c:	add	r4, r4, #1
   11da0:	b	11d14 <__assert_fail@plt+0x688>
   11da4:	lsl	r6, r4, #1
   11da8:	cmp	r6, #1024	; 0x400
   11dac:	bgt	12948 <__assert_fail@plt+0x12bc>
   11db0:	lsl	sl, r4, #4
   11db4:	mov	r0, r5
   11db8:	mov	r1, sl
   11dbc:	bl	113e0 <realloc@plt>
   11dc0:	adds	r3, sl, #0
   11dc4:	movne	r3, #1
   11dc8:	cmp	r0, #0
   11dcc:	movne	r3, #0
   11dd0:	cmp	r3, #0
   11dd4:	mov	r5, r0
   11dd8:	beq	11d8c <__assert_fail@plt+0x700>
   11ddc:	mov	r2, sl
   11de0:	ldr	r1, [pc, #2304]	; 126e8 <__assert_fail@plt+0x105c>
   11de4:	mov	r0, #1
   11de8:	bl	11404 <err@plt>
   11dec:	mov	r2, #5
   11df0:	ldr	r1, [pc, #2292]	; 126ec <__assert_fail@plt+0x1060>
   11df4:	mov	r0, #0
   11df8:	bl	113b0 <dcgettext@plt>
   11dfc:	mov	r1, r6
   11e00:	bl	114f4 <warnx@plt>
   11e04:	b	11b2c <__assert_fail@plt+0x4a0>
   11e08:	strb	r9, [sl]
   11e0c:	ldr	r0, [sp, #24]
   11e10:	bl	11344 <free@plt>
   11e14:	ldrb	r3, [sp, #96]	; 0x60
   11e18:	tst	r3, #2
   11e1c:	movne	r8, #0
   11e20:	beq	11f34 <__assert_fail@plt+0x8a8>
   11e24:	tst	r3, #8
   11e28:	beq	11ec8 <__assert_fail@plt+0x83c>
   11e2c:	cmp	r4, #0
   11e30:	beq	11ee8 <__assert_fail@plt+0x85c>
   11e34:	ldr	r9, [pc, #2228]	; 126f0 <__assert_fail@plt+0x1064>
   11e38:	ldr	r7, [pc, #2228]	; 126f4 <__assert_fail@plt+0x1068>
   11e3c:	mov	r6, #0
   11e40:	ldr	r3, [r5, r6, lsl #3]
   11e44:	mov	r2, r7
   11e48:	add	r6, r6, #1
   11e4c:	mov	r1, #1
   11e50:	ldr	r0, [r9]
   11e54:	bl	11554 <__fprintf_chk@plt>
   11e58:	cmp	r4, r6
   11e5c:	bne	11e40 <__assert_fail@plt+0x7b4>
   11e60:	b	11ed0 <__assert_fail@plt+0x844>
   11e64:	ldr	r1, [pc, #2156]	; 126d8 <__assert_fail@plt+0x104c>
   11e68:	mov	r0, r7
   11e6c:	bl	12dec <__assert_fail@plt+0x1760>
   11e70:	cmp	r0, #0
   11e74:	blt	129bc <__assert_fail@plt+0x1330>
   11e78:	mov	r6, #8
   11e7c:	b	11c4c <__assert_fail@plt+0x5c0>
   11e80:	ldr	r1, [pc, #2160]	; 126f8 <__assert_fail@plt+0x106c>
   11e84:	mov	r0, r6
   11e88:	bl	112fc <strcmp@plt>
   11e8c:	cmp	r0, #0
   11e90:	beq	11fdc <__assert_fail@plt+0x950>
   11e94:	ldr	r1, [pc, #2144]	; 126fc <__assert_fail@plt+0x1070>
   11e98:	mov	r0, r6
   11e9c:	bl	112fc <strcmp@plt>
   11ea0:	cmp	r0, #0
   11ea4:	beq	11fdc <__assert_fail@plt+0x950>
   11ea8:	mov	r0, r6
   11eac:	ldr	r1, [pc, #2124]	; 12700 <__assert_fail@plt+0x1074>
   11eb0:	bl	112fc <strcmp@plt>
   11eb4:	cmp	r0, #0
   11eb8:	beq	11fdc <__assert_fail@plt+0x950>
   11ebc:	mov	r2, #5
   11ec0:	ldr	r1, [pc, #2108]	; 12704 <__assert_fail@plt+0x1078>
   11ec4:	b	119bc <__assert_fail@plt+0x330>
   11ec8:	cmp	r4, #0
   11ecc:	beq	11ee8 <__assert_fail@plt+0x85c>
   11ed0:	mov	r6, #0
   11ed4:	ldr	r0, [r5, r6, lsl #3]
   11ed8:	add	r6, r6, #1
   11edc:	bl	11344 <free@plt>
   11ee0:	cmp	r4, r6
   11ee4:	bgt	11ed4 <__assert_fail@plt+0x848>
   11ee8:	mov	r0, r5
   11eec:	bl	11344 <free@plt>
   11ef0:	ldr	r3, [pc, #1948]	; 12694 <__assert_fail@plt+0x1008>
   11ef4:	ldr	r2, [sp, #8]
   11ef8:	ldr	r3, [r3]
   11efc:	cmp	r3, r2
   11f00:	beq	11f0c <__assert_fail@plt+0x880>
   11f04:	ldr	r0, [sp, #8]
   11f08:	bl	1156c <fclose@plt>
   11f0c:	cmp	r8, #0
   11f10:	bne	1292c <__assert_fail@plt+0x12a0>
   11f14:	ldr	r3, [pc, #1880]	; 12674 <__assert_fail@plt+0xfe8>
   11f18:	ldr	r2, [sp, #100]	; 0x64
   11f1c:	mov	r0, #0
   11f20:	ldr	r3, [r3]
   11f24:	cmp	r2, r3
   11f28:	bne	12928 <__assert_fail@plt+0x129c>
   11f2c:	add	sp, sp, #108	; 0x6c
   11f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f34:	mov	r1, r4
   11f38:	mov	r0, r5
   11f3c:	bl	115cc <sd_journal_sendv@plt>
   11f40:	ldrb	r3, [sp, #96]	; 0x60
   11f44:	mov	r8, r0
   11f48:	b	11e24 <__assert_fail@plt+0x798>
   11f4c:	ldr	r7, [sp, #20]
   11f50:	cmp	r6, r7
   11f54:	bcs	11fdc <__assert_fail@plt+0x950>
   11f58:	ldrsb	r8, [r6]
   11f5c:	cmp	r8, #91	; 0x5b
   11f60:	cmpne	r8, #61	; 0x3d
   11f64:	moveq	r3, #1
   11f68:	movne	r3, #0
   11f6c:	cmp	r8, #34	; 0x22
   11f70:	orreq	r3, r3, #1
   11f74:	cmp	r8, #64	; 0x40
   11f78:	orreq	r3, r3, #1
   11f7c:	cmp	r3, #0
   11f80:	bne	11ebc <__assert_fail@plt+0x830>
   11f84:	bl	114ac <__ctype_b_loc@plt>
   11f88:	sub	r7, r7, #1
   11f8c:	ldr	r2, [r0]
   11f90:	b	11fc0 <__assert_fail@plt+0x934>
   11f94:	ldrsb	r8, [r6, #1]!
   11f98:	cmp	r8, #61	; 0x3d
   11f9c:	cmpne	r8, #91	; 0x5b
   11fa0:	moveq	r3, #1
   11fa4:	movne	r3, #0
   11fa8:	cmp	r8, #34	; 0x22
   11fac:	orreq	r3, r3, #1
   11fb0:	cmp	r8, #64	; 0x40
   11fb4:	orreq	r3, r3, #1
   11fb8:	cmp	r3, #0
   11fbc:	bne	11ebc <__assert_fail@plt+0x830>
   11fc0:	uxtb	r8, r8
   11fc4:	lsl	r8, r8, #1
   11fc8:	ldrh	r3, [r2, r8]
   11fcc:	tst	r3, #3
   11fd0:	bne	11ebc <__assert_fail@plt+0x830>
   11fd4:	cmp	r6, r7
   11fd8:	bne	11f94 <__assert_fail@plt+0x908>
   11fdc:	ldr	r1, [sl]
   11fe0:	add	r0, sp, #76	; 0x4c
   11fe4:	bl	13370 <__assert_fail@plt+0x1ce4>
   11fe8:	b	1174c <__assert_fail@plt+0xc0>
   11fec:	mov	r3, #1
   11ff0:	str	r3, [sp, #12]
   11ff4:	b	1174c <__assert_fail@plt+0xc0>
   11ff8:	mov	r2, #5
   11ffc:	ldr	r1, [pc, #1796]	; 12708 <__assert_fail@plt+0x107c>
   12000:	mov	r0, r6
   12004:	bl	113b0 <dcgettext@plt>
   12008:	bl	114f4 <warnx@plt>
   1200c:	b	11ce0 <__assert_fail@plt+0x654>
   12010:	add	r0, sp, #76	; 0x4c
   12014:	ldr	r1, [pc, #1756]	; 126f8 <__assert_fail@plt+0x106c>
   12018:	bl	12ca4 <__assert_fail@plt+0x1618>
   1201c:	cmp	r0, #0
   12020:	ldrbne	r3, [sp, #96]	; 0x60
   12024:	bicne	r3, r3, #32
   12028:	strbne	r3, [sp, #96]	; 0x60
   1202c:	ldr	r3, [sp, #12]
   12030:	cmp	r3, #1
   12034:	beq	12664 <__assert_fail@plt+0xfd8>
   12038:	cmp	r3, #2
   1203c:	ldrb	r3, [sp, #96]	; 0x60
   12040:	bicne	r3, r3, #1
   12044:	strbne	r3, [sp, #96]	; 0x60
   12048:	beq	1218c <__assert_fail@plt+0xb00>
   1204c:	add	r0, sp, #32
   12050:	bl	12f20 <__assert_fail@plt+0x1894>
   12054:	ldr	r3, [sp, #92]	; 0x5c
   12058:	cmp	r3, #0
   1205c:	beq	127c4 <__assert_fail@plt+0x1138>
   12060:	ldr	r3, [sp, #48]	; 0x30
   12064:	cmp	r3, #0
   12068:	beq	128d4 <__assert_fail@plt+0x1248>
   1206c:	ldr	r0, [sp, #44]	; 0x2c
   12070:	mov	r8, #0
   12074:	bl	11344 <free@plt>
   12078:	str	r8, [sp, #44]	; 0x2c
   1207c:	ldr	r3, [sp, #92]	; 0x5c
   12080:	add	r0, sp, #32
   12084:	blx	r3
   12088:	cmp	r5, r8
   1208c:	ble	1251c <__assert_fail@plt+0xe90>
   12090:	ldr	r0, [sp, #72]	; 0x48
   12094:	add	r4, r4, r7, lsl #2
   12098:	add	r0, r0, #1
   1209c:	bl	12abc <__assert_fail@plt+0x1430>
   120a0:	ldr	r9, [sp, #72]	; 0x48
   120a4:	mov	sl, #32
   120a8:	sub	r9, r9, #1
   120ac:	mov	r7, r0
   120b0:	add	r9, r0, r9
   120b4:	mov	r5, r0
   120b8:	ldr	r0, [r4], #4
   120bc:	cmp	r0, #0
   120c0:	beq	1214c <__assert_fail@plt+0xac0>
   120c4:	bl	114dc <strlen@plt>
   120c8:	add	r3, r5, r0
   120cc:	cmp	r9, r3
   120d0:	mov	r6, r0
   120d4:	bcs	12118 <__assert_fail@plt+0xa8c>
   120d8:	cmp	r7, r5
   120dc:	beq	120ec <__assert_fail@plt+0xa60>
   120e0:	mov	r1, r7
   120e4:	add	r0, sp, #32
   120e8:	bl	1343c <__assert_fail@plt+0x1db0>
   120ec:	ldr	r2, [sp, #72]	; 0x48
   120f0:	mov	r5, r7
   120f4:	cmp	r6, r2
   120f8:	addls	r3, r7, r6
   120fc:	bls	12130 <__assert_fail@plt+0xaa4>
   12100:	ldr	r3, [r4, #-4]
   12104:	add	r0, sp, #32
   12108:	strb	r8, [r3, r2]
   1210c:	ldr	r1, [r4, #-4]
   12110:	bl	1343c <__assert_fail@plt+0x1db0>
   12114:	b	120b8 <__assert_fail@plt+0xa2c>
   12118:	ldr	r2, [sp, #72]	; 0x48
   1211c:	cmp	r0, r2
   12120:	bhi	12100 <__assert_fail@plt+0xa74>
   12124:	cmp	r7, r5
   12128:	strbne	sl, [r5], #1
   1212c:	addne	r3, r5, r0
   12130:	mov	r0, r5
   12134:	mov	r5, r3
   12138:	mov	r2, r6
   1213c:	ldr	r1, [r4, #-4]
   12140:	bl	11338 <memmove@plt>
   12144:	strb	r8, [r5]
   12148:	b	120b8 <__assert_fail@plt+0xa2c>
   1214c:	cmp	r7, r5
   12150:	beq	12160 <__assert_fail@plt+0xad4>
   12154:	add	r0, sp, #32
   12158:	mov	r1, r7
   1215c:	bl	1343c <__assert_fail@plt+0x1db0>
   12160:	mov	r0, r7
   12164:	bl	11344 <free@plt>
   12168:	ldr	r0, [sp, #32]
   1216c:	cmn	r0, #1
   12170:	beq	12180 <__assert_fail@plt+0xaf4>
   12174:	bl	1165c <close@plt>
   12178:	cmp	r0, #0
   1217c:	bne	12968 <__assert_fail@plt+0x12dc>
   12180:	ldr	r0, [sp, #44]	; 0x2c
   12184:	bl	11344 <free@plt>
   12188:	b	11f14 <__assert_fail@plt+0x888>
   1218c:	tst	r3, #10
   12190:	bic	r3, r3, #1
   12194:	orrne	r3, r3, #1
   12198:	strb	r3, [sp, #96]	; 0x60
   1219c:	bl	11608 <sd_booted@plt>
   121a0:	ldrb	r3, [sp, #96]	; 0x60
   121a4:	bic	r2, r3, #1
   121a8:	cmp	r0, #0
   121ac:	andeq	r3, r3, #1
   121b0:	movne	r3, #1
   121b4:	orr	r3, r3, r2
   121b8:	strb	r3, [sp, #96]	; 0x60
   121bc:	b	1204c <__assert_fail@plt+0x9c0>
   121c0:	ldr	r3, [pc, #1348]	; 1270c <__assert_fail@plt+0x1080>
   121c4:	mov	r2, #5
   121c8:	ldr	r1, [pc, #1344]	; 12710 <__assert_fail@plt+0x1084>
   121cc:	ldr	r4, [r3]
   121d0:	mov	r0, #0
   121d4:	bl	113b0 <dcgettext@plt>
   121d8:	mov	r1, r4
   121dc:	bl	1162c <fputs@plt>
   121e0:	mov	r2, #5
   121e4:	ldr	r1, [pc, #1320]	; 12714 <__assert_fail@plt+0x1088>
   121e8:	mov	r0, #0
   121ec:	bl	113b0 <dcgettext@plt>
   121f0:	ldr	r3, [pc, #1192]	; 126a0 <__assert_fail@plt+0x1014>
   121f4:	mov	r1, #1
   121f8:	ldr	r3, [r3]
   121fc:	mov	r2, r0
   12200:	mov	r0, r4
   12204:	bl	11554 <__fprintf_chk@plt>
   12208:	mov	r1, r4
   1220c:	mov	r0, #10
   12210:	bl	115a8 <fputc@plt>
   12214:	mov	r2, #5
   12218:	ldr	r1, [pc, #1272]	; 12718 <__assert_fail@plt+0x108c>
   1221c:	mov	r0, #0
   12220:	bl	113b0 <dcgettext@plt>
   12224:	mov	r1, r4
   12228:	bl	1162c <fputs@plt>
   1222c:	mov	r2, #5
   12230:	ldr	r1, [pc, #1252]	; 1271c <__assert_fail@plt+0x1090>
   12234:	mov	r0, #0
   12238:	bl	113b0 <dcgettext@plt>
   1223c:	mov	r1, r4
   12240:	bl	1162c <fputs@plt>
   12244:	mov	r2, #5
   12248:	ldr	r1, [pc, #1232]	; 12720 <__assert_fail@plt+0x1094>
   1224c:	mov	r0, #0
   12250:	bl	113b0 <dcgettext@plt>
   12254:	mov	r1, r4
   12258:	bl	1162c <fputs@plt>
   1225c:	mov	r2, #5
   12260:	ldr	r1, [pc, #1212]	; 12724 <__assert_fail@plt+0x1098>
   12264:	mov	r0, #0
   12268:	bl	113b0 <dcgettext@plt>
   1226c:	mov	r1, r4
   12270:	bl	1162c <fputs@plt>
   12274:	mov	r2, #5
   12278:	ldr	r1, [pc, #1192]	; 12728 <__assert_fail@plt+0x109c>
   1227c:	mov	r0, #0
   12280:	bl	113b0 <dcgettext@plt>
   12284:	mov	r1, r4
   12288:	bl	1162c <fputs@plt>
   1228c:	mov	r2, #5
   12290:	ldr	r1, [pc, #1172]	; 1272c <__assert_fail@plt+0x10a0>
   12294:	mov	r0, #0
   12298:	bl	113b0 <dcgettext@plt>
   1229c:	mov	r1, r4
   122a0:	bl	1162c <fputs@plt>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #1152]	; 12730 <__assert_fail@plt+0x10a4>
   122ac:	mov	r0, #0
   122b0:	bl	113b0 <dcgettext@plt>
   122b4:	mov	r1, r4
   122b8:	bl	1162c <fputs@plt>
   122bc:	mov	r2, #5
   122c0:	ldr	r1, [pc, #1132]	; 12734 <__assert_fail@plt+0x10a8>
   122c4:	mov	r0, #0
   122c8:	bl	113b0 <dcgettext@plt>
   122cc:	mov	r1, r4
   122d0:	bl	1162c <fputs@plt>
   122d4:	mov	r2, #5
   122d8:	ldr	r1, [pc, #1112]	; 12738 <__assert_fail@plt+0x10ac>
   122dc:	mov	r0, #0
   122e0:	bl	113b0 <dcgettext@plt>
   122e4:	mov	r1, r4
   122e8:	bl	1162c <fputs@plt>
   122ec:	mov	r2, #5
   122f0:	ldr	r1, [pc, #1092]	; 1273c <__assert_fail@plt+0x10b0>
   122f4:	mov	r0, #0
   122f8:	bl	113b0 <dcgettext@plt>
   122fc:	mov	r1, r4
   12300:	bl	1162c <fputs@plt>
   12304:	mov	r2, #5
   12308:	ldr	r1, [pc, #1072]	; 12740 <__assert_fail@plt+0x10b4>
   1230c:	mov	r0, #0
   12310:	bl	113b0 <dcgettext@plt>
   12314:	mov	r1, r4
   12318:	bl	1162c <fputs@plt>
   1231c:	mov	r2, #5
   12320:	ldr	r1, [pc, #1052]	; 12744 <__assert_fail@plt+0x10b8>
   12324:	mov	r0, #0
   12328:	bl	113b0 <dcgettext@plt>
   1232c:	mov	r1, r4
   12330:	bl	1162c <fputs@plt>
   12334:	mov	r2, #5
   12338:	ldr	r1, [pc, #1032]	; 12748 <__assert_fail@plt+0x10bc>
   1233c:	mov	r0, #0
   12340:	bl	113b0 <dcgettext@plt>
   12344:	mov	r1, r4
   12348:	bl	1162c <fputs@plt>
   1234c:	mov	r2, #5
   12350:	ldr	r1, [pc, #1012]	; 1274c <__assert_fail@plt+0x10c0>
   12354:	mov	r0, #0
   12358:	bl	113b0 <dcgettext@plt>
   1235c:	mov	r1, r4
   12360:	bl	1162c <fputs@plt>
   12364:	mov	r2, #5
   12368:	ldr	r1, [pc, #992]	; 12750 <__assert_fail@plt+0x10c4>
   1236c:	mov	r0, #0
   12370:	bl	113b0 <dcgettext@plt>
   12374:	mov	r1, r4
   12378:	bl	1162c <fputs@plt>
   1237c:	mov	r2, #5
   12380:	ldr	r1, [pc, #972]	; 12754 <__assert_fail@plt+0x10c8>
   12384:	mov	r0, #0
   12388:	bl	113b0 <dcgettext@plt>
   1238c:	mov	r1, r4
   12390:	bl	1162c <fputs@plt>
   12394:	mov	r2, #5
   12398:	ldr	r1, [pc, #952]	; 12758 <__assert_fail@plt+0x10cc>
   1239c:	mov	r0, #0
   123a0:	bl	113b0 <dcgettext@plt>
   123a4:	mov	r1, r4
   123a8:	bl	1162c <fputs@plt>
   123ac:	mov	r2, #5
   123b0:	ldr	r1, [pc, #932]	; 1275c <__assert_fail@plt+0x10d0>
   123b4:	mov	r0, #0
   123b8:	bl	113b0 <dcgettext@plt>
   123bc:	mov	r1, r4
   123c0:	bl	1162c <fputs@plt>
   123c4:	mov	r2, #5
   123c8:	ldr	r1, [pc, #912]	; 12760 <__assert_fail@plt+0x10d4>
   123cc:	mov	r0, #0
   123d0:	bl	113b0 <dcgettext@plt>
   123d4:	mov	r1, r4
   123d8:	bl	1162c <fputs@plt>
   123dc:	mov	r2, #5
   123e0:	ldr	r1, [pc, #892]	; 12764 <__assert_fail@plt+0x10d8>
   123e4:	mov	r0, #0
   123e8:	bl	113b0 <dcgettext@plt>
   123ec:	mov	r1, r4
   123f0:	bl	1162c <fputs@plt>
   123f4:	mov	r2, #5
   123f8:	ldr	r1, [pc, #872]	; 12768 <__assert_fail@plt+0x10dc>
   123fc:	mov	r0, #0
   12400:	bl	113b0 <dcgettext@plt>
   12404:	mov	r1, r4
   12408:	bl	1162c <fputs@plt>
   1240c:	mov	r2, #5
   12410:	ldr	r1, [pc, #852]	; 1276c <__assert_fail@plt+0x10e0>
   12414:	mov	r0, #0
   12418:	bl	113b0 <dcgettext@plt>
   1241c:	mov	r1, r4
   12420:	bl	1162c <fputs@plt>
   12424:	mov	r2, #5
   12428:	ldr	r1, [pc, #832]	; 12770 <__assert_fail@plt+0x10e4>
   1242c:	mov	r0, #0
   12430:	bl	113b0 <dcgettext@plt>
   12434:	mov	r1, r4
   12438:	bl	1162c <fputs@plt>
   1243c:	mov	r2, #5
   12440:	ldr	r1, [pc, #812]	; 12774 <__assert_fail@plt+0x10e8>
   12444:	mov	r0, #0
   12448:	bl	113b0 <dcgettext@plt>
   1244c:	mov	r1, r4
   12450:	bl	1162c <fputs@plt>
   12454:	mov	r2, #5
   12458:	ldr	r1, [pc, #792]	; 12778 <__assert_fail@plt+0x10ec>
   1245c:	mov	r0, #0
   12460:	bl	113b0 <dcgettext@plt>
   12464:	mov	r1, r4
   12468:	bl	1162c <fputs@plt>
   1246c:	mov	r1, r4
   12470:	mov	r0, #10
   12474:	bl	115a8 <fputc@plt>
   12478:	mov	r2, #5
   1247c:	ldr	r1, [pc, #760]	; 1277c <__assert_fail@plt+0x10f0>
   12480:	mov	r0, #0
   12484:	bl	113b0 <dcgettext@plt>
   12488:	mov	r2, #5
   1248c:	ldr	r1, [pc, #748]	; 12780 <__assert_fail@plt+0x10f4>
   12490:	mov	r4, r0
   12494:	mov	r0, #0
   12498:	bl	113b0 <dcgettext@plt>
   1249c:	ldr	r2, [pc, #736]	; 12784 <__assert_fail@plt+0x10f8>
   124a0:	mov	r3, r4
   124a4:	str	r2, [sp]
   124a8:	ldr	r1, [pc, #728]	; 12788 <__assert_fail@plt+0x10fc>
   124ac:	ldr	r2, [pc, #728]	; 1278c <__assert_fail@plt+0x1100>
   124b0:	str	r0, [sp, #4]
   124b4:	mov	r0, #1
   124b8:	bl	1153c <__printf_chk@plt>
   124bc:	mov	r2, #5
   124c0:	ldr	r1, [pc, #712]	; 12790 <__assert_fail@plt+0x1104>
   124c4:	mov	r0, #0
   124c8:	bl	113b0 <dcgettext@plt>
   124cc:	ldr	r2, [pc, #704]	; 12794 <__assert_fail@plt+0x1108>
   124d0:	mov	r1, r0
   124d4:	mov	r0, #1
   124d8:	bl	1153c <__printf_chk@plt>
   124dc:	mov	r0, #0
   124e0:	bl	114c4 <exit@plt>
   124e4:	ldr	r3, [pc, #516]	; 126f0 <__assert_fail@plt+0x1064>
   124e8:	mov	r2, #5
   124ec:	ldr	r1, [pc, #676]	; 12798 <__assert_fail@plt+0x110c>
   124f0:	mov	r0, #0
   124f4:	ldr	r4, [r3]
   124f8:	bl	113b0 <dcgettext@plt>
   124fc:	ldr	r3, [pc, #412]	; 126a0 <__assert_fail@plt+0x1014>
   12500:	mov	r1, #1
   12504:	ldr	r3, [r3]
   12508:	mov	r2, r0
   1250c:	mov	r0, r4
   12510:	bl	11554 <__fprintf_chk@plt>
   12514:	mov	r0, #1
   12518:	bl	114c4 <exit@plt>
   1251c:	ldr	r0, [sp, #44]	; 0x2c
   12520:	bl	114dc <strlen@plt>
   12524:	ldr	r6, [sp, #72]	; 0x48
   12528:	ldr	fp, [sp, #36]	; 0x24
   1252c:	str	r8, [sp, #8]
   12530:	str	fp, [sp, #12]
   12534:	ldr	r7, [pc, #344]	; 12694 <__assert_fail@plt+0x1008>
   12538:	mov	sl, #1
   1253c:	sub	r6, r6, r0
   12540:	add	r0, r6, #4
   12544:	bl	12abc <__assert_fail@plt+0x1430>
   12548:	mov	r8, r0
   1254c:	ldr	r0, [r7]
   12550:	bl	11650 <getc@plt>
   12554:	mov	r4, r0
   12558:	cmn	r4, #1
   1255c:	beq	12658 <__assert_fail@plt+0xfcc>
   12560:	ldrb	r3, [sp, #96]	; 0x60
   12564:	sub	r5, r4, #60	; 0x3c
   12568:	clz	r5, r5
   1256c:	lsr	r5, r5, #5
   12570:	ands	r5, r5, r3, lsr #2
   12574:	moveq	r9, fp
   12578:	bne	127fc <__assert_fail@plt+0x1170>
   1257c:	cmp	r4, #10
   12580:	cmnne	r4, #1
   12584:	movne	r3, #1
   12588:	moveq	r3, #0
   1258c:	cmp	r6, r5
   12590:	movls	r3, #0
   12594:	andhi	r3, r3, #1
   12598:	cmp	r3, #0
   1259c:	subne	fp, r5, #1
   125a0:	addne	fp, r8, fp
   125a4:	beq	1260c <__assert_fail@plt+0xf80>
   125a8:	strb	r4, [fp, #1]!
   125ac:	ldr	r0, [r7]
   125b0:	bl	11650 <getc@plt>
   125b4:	add	r5, r5, #1
   125b8:	cmp	r0, #10
   125bc:	cmnne	r0, #1
   125c0:	movne	r3, #1
   125c4:	moveq	r3, #0
   125c8:	cmp	r5, r6
   125cc:	movcs	r3, #0
   125d0:	andcc	r3, r3, #1
   125d4:	cmp	r3, #0
   125d8:	mov	r4, r0
   125dc:	bne	125a8 <__assert_fail@plt+0xf1c>
   125e0:	strb	r3, [r8, r5]
   125e4:	cmp	sl, #0
   125e8:	beq	1262c <__assert_fail@plt+0xfa0>
   125ec:	mov	r1, r8
   125f0:	add	r0, sp, #32
   125f4:	bl	1343c <__assert_fail@plt+0x1db0>
   125f8:	mov	sl, #0
   125fc:	cmp	r4, #10
   12600:	beq	12648 <__assert_fail@plt+0xfbc>
   12604:	mov	fp, r9
   12608:	b	12558 <__assert_fail@plt+0xecc>
   1260c:	ldr	r3, [sp, #8]
   12610:	cmp	r5, #0
   12614:	strb	r3, [r8, r5]
   12618:	bne	125e4 <__assert_fail@plt+0xf58>
   1261c:	ldrsb	r3, [sp, #96]	; 0x60
   12620:	cmp	r3, #0
   12624:	bge	125e4 <__assert_fail@plt+0xf58>
   12628:	b	125fc <__assert_fail@plt+0xf70>
   1262c:	ldr	r0, [sp, #44]	; 0x2c
   12630:	bl	11344 <free@plt>
   12634:	str	sl, [sp, #44]	; 0x2c
   12638:	ldr	r3, [sp, #92]	; 0x5c
   1263c:	add	r0, sp, #32
   12640:	blx	r3
   12644:	b	125ec <__assert_fail@plt+0xf60>
   12648:	ldr	r0, [r7]
   1264c:	bl	11650 <getc@plt>
   12650:	mov	r4, r0
   12654:	b	12604 <__assert_fail@plt+0xf78>
   12658:	mov	r0, r8
   1265c:	bl	11344 <free@plt>
   12660:	b	12168 <__assert_fail@plt+0xadc>
   12664:	ldrb	r3, [sp, #96]	; 0x60
   12668:	orr	r3, r3, #1
   1266c:	strb	r3, [sp, #96]	; 0x60
   12670:	b	1204c <__assert_fail@plt+0x9c0>
   12674:	andeq	r7, r2, r0, lsr #27
   12678:	andeq	r6, r1, ip, lsr #26
   1267c:	andeq	r6, r1, ip, lsr #24
   12680:	andeq	r6, r1, r0, asr #24
   12684:	muleq	r1, ip, r7
   12688:	andeq	r3, r1, ip, lsl fp
   1268c:	andeq	r7, r1, ip, ror #9
   12690:	andeq	r8, r2, r0, asr r1
   12694:	andeq	r8, r2, r8, asr #2
   12698:	andeq	r7, r1, r0, ror #14
   1269c:	andeq	r6, r1, r0, asr #25
   126a0:	andeq	r8, r2, r0, lsr r1
   126a4:	andeq	r6, r1, ip, asr #25
   126a8:	andeq	r6, r1, r0, lsr #25
   126ac:	muleq	r1, ip, r4
   126b0:	andeq	r7, r1, ip, lsr #8
   126b4:	andeq	r7, r1, ip, lsl #7
   126b8:	andeq	r7, r1, r0, lsr r4
   126bc:	andeq	r7, r1, r8, lsr r4
   126c0:	strdeq	r7, [r1], -r8
   126c4:			; <UNDEFINED> instruction: 0x000173b8
   126c8:	andeq	r7, r1, r0, asr #7
   126cc:	andeq	r3, r1, r4, asr ip
   126d0:	andeq	r7, r1, ip, lsl r4
   126d4:	andeq	r8, r2, r8
   126d8:	andeq	r8, r2, r0, asr #1
   126dc:	andeq	r6, r1, r4, asr ip
   126e0:	andeq	r7, r1, r8, asr #7
   126e4:	andeq	r8, r2, r8, lsr r1
   126e8:	andeq	r6, r1, ip, lsr #18
   126ec:	ldrdeq	r7, [r1], -r0
   126f0:	andeq	r8, r2, r0, asr #2
   126f4:	andeq	r6, r1, r8, asr #25
   126f8:	muleq	r1, r4, fp
   126fc:	andeq	r7, r1, r8, ror #8
   12700:	andeq	r7, r1, r0, ror r4
   12704:	andeq	r7, r1, r8, ror r4
   12708:	andeq	r7, r1, r4, lsl #10
   1270c:	andeq	r8, r2, ip, asr #2
   12710:	andeq	r6, r1, r0, ror #25
   12714:	andeq	r6, r1, ip, ror #25
   12718:	andeq	r6, r1, r8, lsl #26
   1271c:	andeq	r6, r1, r0, lsr sp
   12720:	andeq	r6, r1, ip, lsr sp
   12724:	andeq	r6, r1, r4, ror sp
   12728:			; <UNDEFINED> instruction: 0x00016db8
   1272c:	strdeq	r6, [r1], -r4
   12730:	andeq	r6, r1, ip, lsr lr
   12734:	andeq	r6, r1, r0, lsl #29
   12738:	andeq	r6, r1, r4, asr #29
   1273c:	strdeq	r6, [r1], -ip
   12740:	andeq	r6, r1, r8, asr #30
   12744:	andeq	r6, r1, ip, lsl #31
   12748:	andeq	r6, r1, ip, asr #31
   1274c:	andeq	r7, r1, r8
   12750:	andeq	r7, r1, r8, asr #32
   12754:	andeq	r7, r1, ip, lsl #1
   12758:	strheq	r7, [r1], -r4
   1275c:	ldrdeq	r7, [r1], -ip
   12760:	andeq	r7, r1, ip, lsl r1
   12764:			; <UNDEFINED> instruction: 0x000171b4
   12768:	andeq	r7, r1, ip, ror #3
   1276c:	andeq	r7, r1, ip, lsr #4
   12770:	andeq	r7, r1, r4, ror #4
   12774:	muleq	r1, ip, r2
   12778:	andeq	r7, r1, ip, lsl #6
   1277c:	andeq	r7, r1, ip, lsr r3
   12780:	andeq	r7, r1, r0, asr r3
   12784:	andeq	r7, r1, r0, lsl #7
   12788:	andeq	r7, r1, ip, ror #6
   1278c:	andeq	r7, r1, r0, ror #6
   12790:	muleq	r1, r0, r3
   12794:	andeq	r7, r1, ip, lsr #7
   12798:	andeq	r7, r1, r4, asr #9
   1279c:	andeq	r2, r1, r8, lsl #24
   127a0:	andeq	r3, r1, r4, lsr r7
   127a4:	andeq	r6, r1, r0, lsr #24
   127a8:	andeq	r7, r1, r0, ror r5
   127ac:	andeq	r7, r1, ip, asr #10
   127b0:	muleq	r1, r4, r5
   127b4:	strdeq	r7, [r1], -ip
   127b8:	andeq	r6, r1, ip, asr #24
   127bc:	andeq	r6, r1, r8, ror #24
   127c0:	andeq	r6, r1, r4, lsl #25
   127c4:	ldr	r1, [sp, #60]	; 0x3c
   127c8:	ldr	r2, [pc, #-52]	; 1279c <__assert_fail@plt+0x1110>
   127cc:	ldr	r3, [pc, #-52]	; 127a0 <__assert_fail@plt+0x1114>
   127d0:	cmp	r1, #0
   127d4:	moveq	r3, r2
   127d8:	str	r3, [sp, #92]	; 0x5c
   127dc:	b	12060 <__assert_fail@plt+0x9d4>
   127e0:	ldrsb	r3, [r0, #1]
   127e4:	cmp	r3, #0
   127e8:	bne	119b4 <__assert_fail@plt+0x328>
   127ec:	mov	r1, r6
   127f0:	add	r0, sp, #76	; 0x4c
   127f4:	bl	132d4 <__assert_fail@plt+0x1c48>
   127f8:	b	1174c <__assert_fail@plt+0xc0>
   127fc:	mov	r3, #60	; 0x3c
   12800:	strb	r3, [r8]
   12804:	bl	114ac <__ctype_b_loc@plt>
   12808:	mov	r3, #0
   1280c:	mov	r5, #1
   12810:	mov	r9, r3
   12814:	str	r6, [sp, #16]
   12818:	mov	r4, r0
   1281c:	b	12834 <__assert_fail@plt+0x11a8>
   12820:	mov	r3, #10
   12824:	strb	r0, [r8, r5]
   12828:	mla	r9, r3, r9, r0
   1282c:	add	r5, r5, #1
   12830:	sub	r9, r9, #48	; 0x30
   12834:	ldr	r0, [r7]
   12838:	ldr	r6, [r4]
   1283c:	bl	11650 <getc@plt>
   12840:	cmp	r9, #191	; 0xbf
   12844:	movgt	r3, #0
   12848:	movle	r3, #1
   1284c:	lsl	r1, r0, #1
   12850:	ldrh	r2, [r6, r1]
   12854:	ands	r3, r3, r2, lsr #11
   12858:	bne	12820 <__assert_fail@plt+0x1194>
   1285c:	cmp	r0, #10
   12860:	cmnne	r0, #1
   12864:	strbne	r0, [r8, r5]
   12868:	movne	r2, #1
   1286c:	moveq	r2, #0
   12870:	addne	r5, r5, #1
   12874:	cmp	r9, #191	; 0xbf
   12878:	cmpls	r0, #62	; 0x3e
   1287c:	mov	r3, r9
   12880:	ldr	r6, [sp, #16]
   12884:	mov	r4, r0
   12888:	beq	12908 <__assert_fail@plt+0x127c>
   1288c:	ldr	r3, [sp, #12]
   12890:	cmp	r3, fp
   12894:	str	r3, [sp, #36]	; 0x24
   12898:	mov	r9, r3
   1289c:	beq	128bc <__assert_fail@plt+0x1230>
   128a0:	ldr	r0, [sp, #44]	; 0x2c
   128a4:	str	r2, [sp, #16]
   128a8:	bl	114dc <strlen@plt>
   128ac:	ldr	r6, [sp, #72]	; 0x48
   128b0:	ldr	r2, [sp, #16]
   128b4:	mov	sl, #0
   128b8:	sub	r6, r6, r0
   128bc:	cmp	r2, #0
   128c0:	beq	1260c <__assert_fail@plt+0xf80>
   128c4:	ldr	r0, [r7]
   128c8:	bl	11650 <getc@plt>
   128cc:	mov	r4, r0
   128d0:	b	1257c <__assert_fail@plt+0xef0>
   128d4:	bl	11308 <getlogin@plt>
   128d8:	cmp	r0, #0
   128dc:	beq	128ec <__assert_fail@plt+0x1260>
   128e0:	ldrsb	r3, [r0]
   128e4:	cmp	r3, #0
   128e8:	bne	12900 <__assert_fail@plt+0x1274>
   128ec:	bl	11410 <geteuid@plt>
   128f0:	bl	11320 <getpwuid@plt>
   128f4:	cmp	r0, #0
   128f8:	ldrne	r0, [r0]
   128fc:	ldreq	r0, [pc, #-352]	; 127a4 <__assert_fail@plt+0x1118>
   12900:	str	r0, [sp, #48]	; 0x30
   12904:	b	1206c <__assert_fail@plt+0x9e0>
   12908:	cmp	r9, #7
   1290c:	orrle	r3, r9, #8
   12910:	cmp	fp, r3
   12914:	mov	r9, r3
   12918:	mov	r5, #0
   1291c:	str	r3, [sp, #36]	; 0x24
   12920:	bne	128a0 <__assert_fail@plt+0x1214>
   12924:	b	128c4 <__assert_fail@plt+0x1238>
   12928:	bl	113c8 <__stack_chk_fail@plt>
   1292c:	ldr	r1, [pc, #-396]	; 127a8 <__assert_fail@plt+0x111c>
   12930:	mov	r2, #5
   12934:	mov	r0, #0
   12938:	bl	113b0 <dcgettext@plt>
   1293c:	mov	r1, r0
   12940:	mov	r0, #1
   12944:	bl	11590 <errx@plt>
   12948:	mov	r2, #5
   1294c:	ldr	r1, [pc, #-424]	; 127ac <__assert_fail@plt+0x1120>
   12950:	mov	r0, r3
   12954:	bl	113b0 <dcgettext@plt>
   12958:	mov	r2, #1024	; 0x400
   1295c:	mov	r1, r0
   12960:	mov	r0, #1
   12964:	bl	11590 <errx@plt>
   12968:	ldr	r1, [pc, #-448]	; 127b0 <__assert_fail@plt+0x1124>
   1296c:	mov	r2, #5
   12970:	mov	r0, #0
   12974:	bl	113b0 <dcgettext@plt>
   12978:	mov	r1, r0
   1297c:	mov	r0, #1
   12980:	bl	11404 <err@plt>
   12984:	mov	r2, #5
   12988:	ldr	r1, [pc, #-476]	; 127b4 <__assert_fail@plt+0x1128>
   1298c:	b	12934 <__assert_fail@plt+0x12a8>
   12990:	mov	r2, #5
   12994:	ldr	r1, [pc, #-484]	; 127b8 <__assert_fail@plt+0x112c>
   12998:	b	11ba8 <__assert_fail@plt+0x51c>
   1299c:	ldr	r1, [pc, #-488]	; 127bc <__assert_fail@plt+0x1130>
   129a0:	mov	r0, r3
   129a4:	mov	r2, #5
   129a8:	bl	113b0 <dcgettext@plt>
   129ac:	mov	r2, r7
   129b0:	mov	r1, r0
   129b4:	mov	r0, #1
   129b8:	bl	11590 <errx@plt>
   129bc:	mov	r2, #5
   129c0:	ldr	r1, [pc, #-520]	; 127c0 <__assert_fail@plt+0x1134>
   129c4:	mov	r0, #0
   129c8:	b	129a8 <__assert_fail@plt+0x131c>
   129cc:	mov	fp, #0
   129d0:	mov	lr, #0
   129d4:	pop	{r1}		; (ldr r1, [sp], #4)
   129d8:	mov	r2, sp
   129dc:	push	{r2}		; (str r2, [sp, #-4]!)
   129e0:	push	{r0}		; (str r0, [sp, #-4]!)
   129e4:	ldr	ip, [pc, #16]	; 129fc <__assert_fail@plt+0x1370>
   129e8:	push	{ip}		; (str ip, [sp, #-4]!)
   129ec:	ldr	r0, [pc, #12]	; 12a00 <__assert_fail@plt+0x1374>
   129f0:	ldr	r3, [pc, #12]	; 12a04 <__assert_fail@plt+0x1378>
   129f4:	bl	11458 <__libc_start_main@plt>
   129f8:	bl	11644 <abort@plt>
   129fc:	andeq	r6, r1, r4, ror #13
   12a00:	muleq	r1, r8, r6
   12a04:	andeq	r6, r1, r4, lsl #13
   12a08:	ldr	r3, [pc, #20]	; 12a24 <__assert_fail@plt+0x1398>
   12a0c:	ldr	r2, [pc, #20]	; 12a28 <__assert_fail@plt+0x139c>
   12a10:	add	r3, pc, r3
   12a14:	ldr	r2, [r3, r2]
   12a18:	cmp	r2, #0
   12a1c:	bxeq	lr
   12a20:	b	1147c <__gmon_start__@plt>
   12a24:	muleq	r1, r4, r4
   12a28:	andeq	r0, r0, ip, asr #2
   12a2c:	ldr	r0, [pc, #24]	; 12a4c <__assert_fail@plt+0x13c0>
   12a30:	ldr	r3, [pc, #24]	; 12a50 <__assert_fail@plt+0x13c4>
   12a34:	cmp	r3, r0
   12a38:	bxeq	lr
   12a3c:	ldr	r3, [pc, #16]	; 12a54 <__assert_fail@plt+0x13c8>
   12a40:	cmp	r3, #0
   12a44:	bxeq	lr
   12a48:	bx	r3
   12a4c:	andeq	r8, r2, ip, lsr #2
   12a50:	andeq	r8, r2, ip, lsr #2
   12a54:	andeq	r0, r0, r0
   12a58:	ldr	r0, [pc, #36]	; 12a84 <__assert_fail@plt+0x13f8>
   12a5c:	ldr	r1, [pc, #36]	; 12a88 <__assert_fail@plt+0x13fc>
   12a60:	sub	r1, r1, r0
   12a64:	asr	r1, r1, #2
   12a68:	add	r1, r1, r1, lsr #31
   12a6c:	asrs	r1, r1, #1
   12a70:	bxeq	lr
   12a74:	ldr	r3, [pc, #16]	; 12a8c <__assert_fail@plt+0x1400>
   12a78:	cmp	r3, #0
   12a7c:	bxeq	lr
   12a80:	bx	r3
   12a84:	andeq	r8, r2, ip, lsr #2
   12a88:	andeq	r8, r2, ip, lsr #2
   12a8c:	andeq	r0, r0, r0
   12a90:	push	{r4, lr}
   12a94:	ldr	r4, [pc, #24]	; 12ab4 <__assert_fail@plt+0x1428>
   12a98:	ldrb	r3, [r4]
   12a9c:	cmp	r3, #0
   12aa0:	popne	{r4, pc}
   12aa4:	bl	12a2c <__assert_fail@plt+0x13a0>
   12aa8:	mov	r3, #1
   12aac:	strb	r3, [r4]
   12ab0:	pop	{r4, pc}
   12ab4:	andeq	r8, r2, r4, asr r1
   12ab8:	b	12a58 <__assert_fail@plt+0x13cc>
   12abc:	push	{r4, lr}
   12ac0:	mov	r4, r0
   12ac4:	bl	1144c <malloc@plt>
   12ac8:	adds	r3, r4, #0
   12acc:	movne	r3, #1
   12ad0:	cmp	r0, #0
   12ad4:	movne	r3, #0
   12ad8:	cmp	r3, #0
   12adc:	popeq	{r4, pc}
   12ae0:	mov	r2, r4
   12ae4:	ldr	r1, [pc, #4]	; 12af0 <__assert_fail@plt+0x1464>
   12ae8:	mov	r0, #1
   12aec:	bl	11404 <err@plt>
   12af0:	andeq	r6, r1, ip, lsr #18
   12af4:	push	{r1, r2, r3}
   12af8:	push	{r4, lr}
   12afc:	sub	sp, sp, #12
   12b00:	ldr	r4, [pc, #84]	; 12b5c <__assert_fail@plt+0x14d0>
   12b04:	add	ip, sp, #24
   12b08:	mov	r3, ip
   12b0c:	ldr	r1, [r4]
   12b10:	ldr	r2, [sp, #20]
   12b14:	str	r1, [sp, #4]
   12b18:	mov	r1, #1
   12b1c:	str	ip, [sp]
   12b20:	bl	11518 <__vasprintf_chk@plt>
   12b24:	cmp	r0, #0
   12b28:	blt	12b4c <__assert_fail@plt+0x14c0>
   12b2c:	ldr	r2, [sp, #4]
   12b30:	ldr	r3, [r4]
   12b34:	cmp	r2, r3
   12b38:	bne	12b58 <__assert_fail@plt+0x14cc>
   12b3c:	add	sp, sp, #12
   12b40:	pop	{r4, lr}
   12b44:	add	sp, sp, #12
   12b48:	bx	lr
   12b4c:	ldr	r1, [pc, #12]	; 12b60 <__assert_fail@plt+0x14d4>
   12b50:	mov	r0, #1
   12b54:	bl	11404 <err@plt>
   12b58:	bl	113c8 <__stack_chk_fail@plt>
   12b5c:	andeq	r7, r2, r0, lsr #27
   12b60:	andeq	r6, r1, r8, asr #18
   12b64:	push	{r4, lr}
   12b68:	sub	sp, sp, #40	; 0x28
   12b6c:	ldr	r4, [pc, #132]	; 12bf8 <__assert_fail@plt+0x156c>
   12b70:	mov	r1, #0
   12b74:	add	r0, sp, #28
   12b78:	ldr	r3, [r4]
   12b7c:	str	r3, [sp, #36]	; 0x24
   12b80:	bl	1141c <gettimeofday@plt>
   12b84:	add	r0, sp, #28
   12b88:	bl	11470 <localtime@plt>
   12b8c:	ldr	r2, [pc, #104]	; 12bfc <__assert_fail@plt+0x1570>
   12b90:	ldr	r1, [pc, #104]	; 12c00 <__assert_fail@plt+0x1574>
   12b94:	ldr	r3, [r0]
   12b98:	str	r3, [sp, #20]
   12b9c:	ldr	ip, [r0, #4]
   12ba0:	mov	r3, #32
   12ba4:	str	ip, [sp, #16]
   12ba8:	ldr	ip, [r0, #8]
   12bac:	str	ip, [sp, #12]
   12bb0:	ldr	ip, [r0, #12]
   12bb4:	str	ip, [sp, #8]
   12bb8:	ldr	r0, [r0, #16]
   12bbc:	str	r1, [sp]
   12bc0:	mov	r1, r3
   12bc4:	ldr	r0, [r2, r0, lsl #2]
   12bc8:	mov	r2, #1
   12bcc:	str	r0, [sp, #4]
   12bd0:	ldr	r0, [pc, #44]	; 12c04 <__assert_fail@plt+0x1578>
   12bd4:	bl	11674 <__snprintf_chk@plt>
   12bd8:	ldr	r2, [sp, #36]	; 0x24
   12bdc:	ldr	r3, [r4]
   12be0:	cmp	r2, r3
   12be4:	bne	12bf4 <__assert_fail@plt+0x1568>
   12be8:	ldr	r0, [pc, #20]	; 12c04 <__assert_fail@plt+0x1578>
   12bec:	add	sp, sp, #40	; 0x28
   12bf0:	pop	{r4, pc}
   12bf4:	bl	113c8 <__stack_chk_fail@plt>
   12bf8:	andeq	r7, r2, r0, lsr #27
   12bfc:	andeq	r6, r1, ip, lsl #14
   12c00:	andeq	r6, r1, r0, ror #18
   12c04:	andeq	r8, r2, r8, asr r1
   12c08:	push	{r4, r5, r6, r7, lr}
   12c0c:	sub	sp, sp, #52	; 0x34
   12c10:	ldr	r5, [pc, #128]	; 12c98 <__assert_fail@plt+0x160c>
   12c14:	ldr	r2, [r0, #8]
   12c18:	mov	r4, r0
   12c1c:	ldr	r3, [r5]
   12c20:	cmp	r2, #0
   12c24:	str	r3, [sp, #44]	; 0x2c
   12c28:	addeq	r6, sp, #12
   12c2c:	strbeq	r2, [sp, #12]
   12c30:	bne	12c70 <__assert_fail@plt+0x15e4>
   12c34:	ldr	r7, [r4, #4]
   12c38:	bl	12b64 <__assert_fail@plt+0x14d8>
   12c3c:	ldr	r3, [r4, #16]
   12c40:	mov	r2, r7
   12c44:	ldr	r1, [pc, #80]	; 12c9c <__assert_fail@plt+0x1610>
   12c48:	stm	sp, {r3, r6}
   12c4c:	mov	r3, r0
   12c50:	add	r0, r4, #12
   12c54:	bl	12af4 <__assert_fail@plt+0x1468>
   12c58:	ldr	r2, [sp, #44]	; 0x2c
   12c5c:	ldr	r3, [r5]
   12c60:	cmp	r2, r3
   12c64:	bne	12c94 <__assert_fail@plt+0x1608>
   12c68:	add	sp, sp, #52	; 0x34
   12c6c:	pop	{r4, r5, r6, r7, pc}
   12c70:	ldr	r1, [pc, #40]	; 12ca0 <__assert_fail@plt+0x1614>
   12c74:	add	r6, sp, #12
   12c78:	mov	r3, #32
   12c7c:	stm	sp, {r1, r2}
   12c80:	mov	r0, r6
   12c84:	mov	r1, r3
   12c88:	mov	r2, #1
   12c8c:	bl	11674 <__snprintf_chk@plt>
   12c90:	b	12c34 <__assert_fail@plt+0x15a8>
   12c94:	bl	113c8 <__stack_chk_fail@plt>
   12c98:	andeq	r7, r2, r0, lsr #27
   12c9c:	andeq	r6, r1, r4, lsl #19
   12ca0:	andeq	r6, r1, ip, ror r9
   12ca4:	push	{r4, r5, r6, lr}
   12ca8:	ldr	r4, [r0]
   12cac:	cmp	r0, r4
   12cb0:	beq	12ce4 <__assert_fail@plt+0x1658>
   12cb4:	mov	r5, r0
   12cb8:	mov	r6, r1
   12cbc:	ldr	r3, [r4, #-8]
   12cc0:	mov	r1, r6
   12cc4:	subs	r0, r3, #0
   12cc8:	beq	12cd8 <__assert_fail@plt+0x164c>
   12ccc:	bl	112fc <strcmp@plt>
   12cd0:	cmp	r0, #0
   12cd4:	beq	12cec <__assert_fail@plt+0x1660>
   12cd8:	ldr	r4, [r4]
   12cdc:	cmp	r5, r4
   12ce0:	bne	12cbc <__assert_fail@plt+0x1630>
   12ce4:	mov	r0, #0
   12ce8:	pop	{r4, r5, r6, pc}
   12cec:	mov	r0, #1
   12cf0:	pop	{r4, r5, r6, pc}
   12cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf8:	sub	sp, sp, #12
   12cfc:	ldr	sl, [pc, #200]	; 12dcc <__assert_fail@plt+0x1740>
   12d00:	ldr	r4, [r0]
   12d04:	ldr	r3, [sl]
   12d08:	cmp	r0, r4
   12d0c:	str	r3, [sp, #4]
   12d10:	beq	12dc0 <__assert_fail@plt+0x1734>
   12d14:	ldr	r9, [pc, #180]	; 12dd0 <__assert_fail@plt+0x1744>
   12d18:	ldr	r8, [pc, #180]	; 12dd4 <__assert_fail@plt+0x1748>
   12d1c:	mov	r7, r0
   12d20:	mov	r6, #0
   12d24:	ldr	r0, [r4, #-4]
   12d28:	cmp	r0, #0
   12d2c:	beq	12d98 <__assert_fail@plt+0x170c>
   12d30:	ldr	r3, [r0]
   12d34:	cmp	r3, #0
   12d38:	beq	12d98 <__assert_fail@plt+0x170c>
   12d3c:	mov	r1, r9
   12d40:	ldr	fp, [r4, #-8]
   12d44:	bl	15f44 <__assert_fail@plt+0x48b8>
   12d48:	mov	r2, fp
   12d4c:	mov	r1, r8
   12d50:	mov	r5, r0
   12d54:	mov	r3, r0
   12d58:	mov	r0, sp
   12d5c:	bl	12af4 <__assert_fail@plt+0x1468>
   12d60:	mov	r0, r5
   12d64:	bl	11344 <free@plt>
   12d68:	ldr	r5, [sp]
   12d6c:	cmp	r5, #0
   12d70:	beq	12d98 <__assert_fail@plt+0x170c>
   12d74:	mov	r1, r5
   12d78:	mov	r0, r6
   12d7c:	bl	158e8 <__assert_fail@plt+0x425c>
   12d80:	mov	fp, r0
   12d84:	mov	r0, r6
   12d88:	bl	11344 <free@plt>
   12d8c:	mov	r0, r5
   12d90:	bl	11344 <free@plt>
   12d94:	mov	r6, fp
   12d98:	ldr	r4, [r4]
   12d9c:	cmp	r7, r4
   12da0:	bne	12d24 <__assert_fail@plt+0x1698>
   12da4:	ldr	r2, [sp, #4]
   12da8:	ldr	r3, [sl]
   12dac:	mov	r0, r6
   12db0:	cmp	r2, r3
   12db4:	bne	12dc8 <__assert_fail@plt+0x173c>
   12db8:	add	sp, sp, #12
   12dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12dc0:	mov	r6, #0
   12dc4:	b	12da4 <__assert_fail@plt+0x1718>
   12dc8:	bl	113c8 <__stack_chk_fail@plt>
   12dcc:	andeq	r7, r2, r0, lsr #27
   12dd0:	muleq	r1, r0, r9
   12dd4:	muleq	r1, r4, r9
   12dd8:	push	{r4, lr}
   12ddc:	mov	r0, #1
   12de0:	ldr	r1, [pc]	; 12de8 <__assert_fail@plt+0x175c>
   12de4:	bl	11404 <err@plt>
   12de8:	muleq	r1, ip, r9
   12dec:	push	{r4, r5, r6, r7, r8, lr}
   12df0:	sub	sp, sp, #8
   12df4:	ldr	r7, [pc, #288]	; 12f1c <__assert_fail@plt+0x1890>
   12df8:	subs	r6, r0, #0
   12dfc:	ldr	r3, [r7]
   12e00:	str	r3, [sp, #4]
   12e04:	beq	12ea4 <__assert_fail@plt+0x1818>
   12e08:	ldrsb	r5, [r6]
   12e0c:	cmp	r5, #0
   12e10:	beq	12ea4 <__assert_fail@plt+0x1818>
   12e14:	mov	r4, r1
   12e18:	bl	114ac <__ctype_b_loc@plt>
   12e1c:	lsl	r5, r5, #1
   12e20:	ldr	r3, [r0]
   12e24:	ldrh	r3, [r3, r5]
   12e28:	tst	r3, #2048	; 0x800
   12e2c:	bne	12e64 <__assert_fail@plt+0x17d8>
   12e30:	ldr	r1, [r4]
   12e34:	cmp	r1, #0
   12e38:	bne	12e4c <__assert_fail@plt+0x17c0>
   12e3c:	b	12ea4 <__assert_fail@plt+0x1818>
   12e40:	ldr	r1, [r4, #8]!
   12e44:	cmp	r1, #0
   12e48:	beq	12ea4 <__assert_fail@plt+0x1818>
   12e4c:	mov	r0, r6
   12e50:	bl	113f8 <strcasecmp@plt>
   12e54:	cmp	r0, #0
   12e58:	bne	12e40 <__assert_fail@plt+0x17b4>
   12e5c:	ldr	r0, [r4, #4]
   12e60:	b	12ea8 <__assert_fail@plt+0x181c>
   12e64:	mov	r8, #0
   12e68:	str	r8, [sp]
   12e6c:	bl	11500 <__errno_location@plt>
   12e70:	mov	r2, #10
   12e74:	mov	r1, sp
   12e78:	mov	r5, r0
   12e7c:	str	r8, [r0]
   12e80:	mov	r0, r6
   12e84:	bl	11314 <strtol@plt>
   12e88:	ldr	r3, [r5]
   12e8c:	cmp	r3, r8
   12e90:	mov	r2, r0
   12e94:	bne	12ea4 <__assert_fail@plt+0x1818>
   12e98:	ldr	r3, [sp]
   12e9c:	cmp	r6, r3
   12ea0:	bne	12ec0 <__assert_fail@plt+0x1834>
   12ea4:	mvn	r0, #0
   12ea8:	ldr	r2, [sp, #4]
   12eac:	ldr	r3, [r7]
   12eb0:	cmp	r2, r3
   12eb4:	bne	12f18 <__assert_fail@plt+0x188c>
   12eb8:	add	sp, sp, #8
   12ebc:	pop	{r4, r5, r6, r7, r8, pc}
   12ec0:	cmp	r3, r8
   12ec4:	beq	12ed4 <__assert_fail@plt+0x1848>
   12ec8:	ldrsb	r3, [r3]
   12ecc:	cmp	r3, #0
   12ed0:	bne	12ea4 <__assert_fail@plt+0x1818>
   12ed4:	ldr	r3, [r4]
   12ed8:	cmp	r3, #0
   12edc:	beq	12ea4 <__assert_fail@plt+0x1818>
   12ee0:	ldr	r3, [r4, #4]
   12ee4:	cmp	r3, r2
   12ee8:	bne	12f00 <__assert_fail@plt+0x1874>
   12eec:	b	12f10 <__assert_fail@plt+0x1884>
   12ef0:	add	r4, r4, #8
   12ef4:	ldr	r0, [r4, #4]
   12ef8:	cmp	r2, r0
   12efc:	beq	12ea8 <__assert_fail@plt+0x181c>
   12f00:	ldr	r3, [r4, #8]
   12f04:	cmp	r3, #0
   12f08:	bne	12ef0 <__assert_fail@plt+0x1864>
   12f0c:	b	12ea4 <__assert_fail@plt+0x1818>
   12f10:	mov	r0, r2
   12f14:	b	12ea8 <__assert_fail@plt+0x181c>
   12f18:	bl	113c8 <__stack_chk_fail@plt>
   12f1c:	andeq	r7, r2, r0, lsr #27
   12f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f24:	sub	sp, sp, #52	; 0x34
   12f28:	ldr	r5, [pc, #704]	; 131f0 <__assert_fail@plt+0x1b64>
   12f2c:	ldr	r7, [r0, #28]
   12f30:	mov	r4, r0
   12f34:	ldr	r3, [r5]
   12f38:	cmp	r7, #0
   12f3c:	str	r3, [sp, #44]	; 0x2c
   12f40:	beq	12ff8 <__assert_fail@plt+0x196c>
   12f44:	ldr	sl, [r0, #32]
   12f48:	mov	r8, #2
   12f4c:	mov	fp, sl
   12f50:	mov	r6, r8
   12f54:	mov	r2, #32
   12f58:	mov	r1, #0
   12f5c:	add	r0, sp, #12
   12f60:	bl	11524 <memset@plt>
   12f64:	cmp	r6, #2
   12f68:	ldr	r3, [r4, #36]	; 0x24
   12f6c:	beq	130fc <__assert_fail@plt+0x1a70>
   12f70:	tst	r3, #4
   12f74:	beq	1312c <__assert_fail@plt+0x1aa0>
   12f78:	ldr	r3, [pc, #628]	; 131f4 <__assert_fail@plt+0x1b68>
   12f7c:	cmp	sl, #0
   12f80:	mov	r6, #4
   12f84:	moveq	fp, r3
   12f88:	mov	r3, #1
   12f8c:	str	r3, [sp, #20]
   12f90:	add	r3, sp, #8
   12f94:	add	r2, sp, #12
   12f98:	mov	r1, fp
   12f9c:	mov	r0, r7
   12fa0:	bl	115fc <getaddrinfo@plt>
   12fa4:	cmp	r0, #0
   12fa8:	bne	13198 <__assert_fail@plt+0x1b0c>
   12fac:	ldr	r3, [sp, #8]
   12fb0:	ldmib	r3, {r0, r1, r2}
   12fb4:	bl	11614 <socket@plt>
   12fb8:	cmn	r0, #1
   12fbc:	mov	r9, r0
   12fc0:	beq	13118 <__assert_fail@plt+0x1a8c>
   12fc4:	ldr	r3, [sp, #8]
   12fc8:	ldr	r2, [r3, #16]
   12fcc:	ldr	r1, [r3, #20]
   12fd0:	bl	11668 <connect@plt>
   12fd4:	cmn	r0, #1
   12fd8:	ldr	r0, [sp, #8]
   12fdc:	beq	13164 <__assert_fail@plt+0x1ad8>
   12fe0:	bl	115f0 <freeaddrinfo@plt>
   12fe4:	ldr	r3, [r4, #36]	; 0x24
   12fe8:	str	r9, [r4]
   12fec:	cmp	r3, r6
   12ff0:	strne	r6, [r4, #36]	; 0x24
   12ff4:	b	13058 <__assert_fail@plt+0x19cc>
   12ff8:	ldr	r6, [r0, #24]
   12ffc:	cmp	r6, #0
   13000:	beq	13150 <__assert_fail@plt+0x1ac4>
   13004:	mov	r0, r6
   13008:	bl	114dc <strlen@plt>
   1300c:	cmp	r0, #107	; 0x6b
   13010:	bhi	13178 <__assert_fail@plt+0x1aec>
   13014:	ldr	r3, [pc, #476]	; 131f8 <__assert_fail@plt+0x1b6c>
   13018:	mov	r7, #1
   1301c:	add	r0, r3, #34	; 0x22
   13020:	mov	r2, #108	; 0x6c
   13024:	mov	r1, r6
   13028:	strh	r7, [r3, #32]
   1302c:	bl	11428 <__strcpy_chk@plt>
   13030:	ldr	r3, [r4, #36]	; 0x24
   13034:	tst	r3, #2
   13038:	bne	13070 <__assert_fail@plt+0x19e4>
   1303c:	tst	r3, #4
   13040:	bne	130d4 <__assert_fail@plt+0x1a48>
   13044:	ldrb	r3, [r4, #64]	; 0x40
   13048:	tst	r3, #1
   1304c:	bne	131d0 <__assert_fail@plt+0x1b44>
   13050:	mvn	r7, #0
   13054:	str	r7, [r4]
   13058:	ldr	r2, [sp, #44]	; 0x2c
   1305c:	ldr	r3, [r5]
   13060:	cmp	r2, r3
   13064:	bne	13174 <__assert_fail@plt+0x1ae8>
   13068:	add	sp, sp, #52	; 0x34
   1306c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13070:	mov	r0, r7
   13074:	mov	r2, #0
   13078:	mov	r1, #2
   1307c:	bl	11614 <socket@plt>
   13080:	cmn	r0, #1
   13084:	movne	r8, #2
   13088:	mov	r7, r0
   1308c:	movne	r9, r8
   13090:	beq	130cc <__assert_fail@plt+0x1a40>
   13094:	mov	r2, #110	; 0x6e
   13098:	ldr	r1, [pc, #348]	; 131fc <__assert_fail@plt+0x1b70>
   1309c:	mov	r0, r7
   130a0:	bl	11668 <connect@plt>
   130a4:	cmn	r0, #1
   130a8:	beq	130bc <__assert_fail@plt+0x1a30>
   130ac:	ldr	r3, [r4, #36]	; 0x24
   130b0:	cmp	r3, r9
   130b4:	strne	r9, [r4, #36]	; 0x24
   130b8:	b	13054 <__assert_fail@plt+0x19c8>
   130bc:	mov	r0, r7
   130c0:	bl	1165c <close@plt>
   130c4:	cmp	r8, #1
   130c8:	beq	13044 <__assert_fail@plt+0x19b8>
   130cc:	ldr	r3, [r4, #36]	; 0x24
   130d0:	b	1303c <__assert_fail@plt+0x19b0>
   130d4:	mov	r1, #1
   130d8:	mov	r0, r1
   130dc:	mov	r2, #0
   130e0:	bl	11614 <socket@plt>
   130e4:	cmn	r0, #1
   130e8:	mov	r7, r0
   130ec:	beq	13044 <__assert_fail@plt+0x19b8>
   130f0:	mov	r8, #1
   130f4:	mov	r9, #4
   130f8:	b	13094 <__assert_fail@plt+0x1a08>
   130fc:	tst	r3, #2
   13100:	beq	13120 <__assert_fail@plt+0x1a94>
   13104:	ldr	r3, [pc, #244]	; 13200 <__assert_fail@plt+0x1b74>
   13108:	cmp	sl, #0
   1310c:	str	r6, [sp, #20]
   13110:	moveq	fp, r3
   13114:	b	12f90 <__assert_fail@plt+0x1904>
   13118:	ldr	r0, [sp, #8]
   1311c:	bl	115f0 <freeaddrinfo@plt>
   13120:	cmp	r8, #1
   13124:	mov	r6, #1
   13128:	bne	1315c <__assert_fail@plt+0x1ad0>
   1312c:	mov	r2, #5
   13130:	ldr	r1, [pc, #204]	; 13204 <__assert_fail@plt+0x1b78>
   13134:	mov	r0, #0
   13138:	bl	113b0 <dcgettext@plt>
   1313c:	mov	r3, fp
   13140:	mov	r2, r7
   13144:	mov	r1, r0
   13148:	mov	r0, #1
   1314c:	bl	11590 <errx@plt>
   13150:	ldr	r6, [pc, #176]	; 13208 <__assert_fail@plt+0x1b7c>
   13154:	str	r6, [r0, #24]
   13158:	b	13014 <__assert_fail@plt+0x1988>
   1315c:	mov	r8, r6
   13160:	b	12f54 <__assert_fail@plt+0x18c8>
   13164:	bl	115f0 <freeaddrinfo@plt>
   13168:	mov	r0, r9
   1316c:	bl	1165c <close@plt>
   13170:	b	13120 <__assert_fail@plt+0x1a94>
   13174:	bl	113c8 <__stack_chk_fail@plt>
   13178:	mov	r2, #5
   1317c:	ldr	r1, [pc, #136]	; 1320c <__assert_fail@plt+0x1b80>
   13180:	mov	r0, r7
   13184:	bl	113b0 <dcgettext@plt>
   13188:	mov	r2, r6
   1318c:	mov	r1, r0
   13190:	mov	r0, #1
   13194:	bl	11590 <errx@plt>
   13198:	mov	r2, #5
   1319c:	ldr	r1, [pc, #108]	; 13210 <__assert_fail@plt+0x1b84>
   131a0:	mov	r9, r0
   131a4:	mov	r0, #0
   131a8:	bl	113b0 <dcgettext@plt>
   131ac:	mov	r4, r0
   131b0:	mov	r0, r9
   131b4:	bl	11350 <gai_strerror@plt>
   131b8:	mov	r1, r4
   131bc:	mov	r3, fp
   131c0:	mov	r2, r7
   131c4:	str	r0, [sp]
   131c8:	mov	r0, #1
   131cc:	bl	11590 <errx@plt>
   131d0:	mov	r2, #5
   131d4:	ldr	r1, [pc, #56]	; 13214 <__assert_fail@plt+0x1b88>
   131d8:	mov	r0, #0
   131dc:	bl	113b0 <dcgettext@plt>
   131e0:	mov	r2, r6
   131e4:	mov	r1, r0
   131e8:	mov	r0, #1
   131ec:	bl	11404 <err@plt>
   131f0:	andeq	r7, r2, r0, lsr #27
   131f4:	andeq	r6, r1, r8, asr #19
   131f8:	andeq	r8, r2, r8, asr r1
   131fc:	andeq	r8, r2, r8, ror r1
   13200:			; <UNDEFINED> instruction: 0x000169b4
   13204:	andeq	r6, r1, r8, lsr #20
   13208:			; <UNDEFINED> instruction: 0x000169bc
   1320c:	strdeq	r6, [r1], -ip
   13210:	ldrdeq	r6, [r1], -r4
   13214:	andeq	r6, r1, ip, lsl sl
   13218:	push	{r1, r2, r3}
   1321c:	push	{r4, lr}
   13220:	sub	sp, sp, #12
   13224:	ldr	r4, [pc, #140]	; 132b8 <__assert_fail@plt+0x1c2c>
   13228:	ldr	r2, [r0]
   1322c:	ldr	r1, [sp, #20]
   13230:	ldr	r3, [r4]
   13234:	cmp	r0, r2
   13238:	str	r3, [sp, #4]
   1323c:	beq	1328c <__assert_fail@plt+0x1c00>
   13240:	ldr	r3, [r0, #4]
   13244:	cmp	r3, r0
   13248:	subne	r0, r3, #8
   1324c:	moveq	r0, #0
   13250:	add	r3, sp, #24
   13254:	add	r0, r0, #4
   13258:	mov	r2, r3
   1325c:	str	r3, [sp]
   13260:	bl	16444 <__assert_fail@plt+0x4db8>
   13264:	cmp	r0, #0
   13268:	bne	132a4 <__assert_fail@plt+0x1c18>
   1326c:	ldr	r2, [sp, #4]
   13270:	ldr	r3, [r4]
   13274:	cmp	r2, r3
   13278:	bne	132a0 <__assert_fail@plt+0x1c14>
   1327c:	add	sp, sp, #12
   13280:	pop	{r4, lr}
   13284:	add	sp, sp, #12
   13288:	bx	lr
   1328c:	ldr	r3, [pc, #40]	; 132bc <__assert_fail@plt+0x1c30>
   13290:	ldr	r2, [pc, #40]	; 132c0 <__assert_fail@plt+0x1c34>
   13294:	ldr	r1, [pc, #40]	; 132c4 <__assert_fail@plt+0x1c38>
   13298:	ldr	r0, [pc, #40]	; 132c8 <__assert_fail@plt+0x1c3c>
   1329c:	bl	1168c <__assert_fail@plt>
   132a0:	bl	113c8 <__stack_chk_fail@plt>
   132a4:	ldr	r3, [pc, #32]	; 132cc <__assert_fail@plt+0x1c40>
   132a8:	ldr	r2, [pc, #20]	; 132c4 <__assert_fail@plt+0x1c38>
   132ac:	ldr	r1, [pc, #28]	; 132d0 <__assert_fail@plt+0x1c44>
   132b0:	mov	r0, #1
   132b4:	bl	11404 <err@plt>
   132b8:	andeq	r7, r2, r0, lsr #27
   132bc:	andeq	r6, r1, ip, lsr r7
   132c0:	andeq	r0, r0, lr, asr r2
   132c4:	andeq	r6, r1, r8, asr #20
   132c8:	andeq	r6, r1, ip, asr sl
   132cc:	andeq	r0, r0, r7, ror #4
   132d0:	andeq	r6, r1, ip, ror #20
   132d4:	ldr	r3, [r0]
   132d8:	push	{r4, lr}
   132dc:	cmp	r0, r3
   132e0:	mov	r4, r1
   132e4:	beq	13338 <__assert_fail@plt+0x1cac>
   132e8:	cmp	r1, #0
   132ec:	beq	13324 <__assert_fail@plt+0x1c98>
   132f0:	ldr	r3, [r0, #4]
   132f4:	cmp	r3, r0
   132f8:	subne	r0, r3, #8
   132fc:	moveq	r0, #0
   13300:	add	r0, r0, #4
   13304:	bl	162f4 <__assert_fail@plt+0x4c68>
   13308:	cmp	r0, #0
   1330c:	popeq	{r4, pc}
   13310:	ldr	r3, [pc, #64]	; 13358 <__assert_fail@plt+0x1ccc>
   13314:	ldr	r2, [pc, #64]	; 1335c <__assert_fail@plt+0x1cd0>
   13318:	ldr	r1, [pc, #64]	; 13360 <__assert_fail@plt+0x1cd4>
   1331c:	mov	r0, #1
   13320:	bl	11404 <err@plt>
   13324:	ldr	r3, [pc, #56]	; 13364 <__assert_fail@plt+0x1cd8>
   13328:	mov	r2, #592	; 0x250
   1332c:	ldr	r1, [pc, #40]	; 1335c <__assert_fail@plt+0x1cd0>
   13330:	ldr	r0, [pc, #48]	; 13368 <__assert_fail@plt+0x1cdc>
   13334:	bl	1168c <__assert_fail@plt>
   13338:	mov	r2, #5
   1333c:	ldr	r1, [pc, #40]	; 1336c <__assert_fail@plt+0x1ce0>
   13340:	mov	r0, #0
   13344:	bl	113b0 <dcgettext@plt>
   13348:	mov	r2, r4
   1334c:	mov	r1, r0
   13350:	mov	r0, #1
   13354:	bl	11590 <errx@plt>
   13358:	andeq	r0, r0, r5, asr r2
   1335c:	andeq	r6, r1, r8, asr #20
   13360:	andeq	r6, r1, ip, ror #20
   13364:	andeq	r6, r1, r8, asr r7
   13368:			; <UNDEFINED> instruction: 0x00016ab8
   1336c:	andeq	r6, r1, ip, lsl #21
   13370:	push	{r4, r5, r6, r7, r8, lr}
   13374:	subs	r7, r1, #0
   13378:	beq	13408 <__assert_fail@plt+0x1d7c>
   1337c:	mov	r5, r0
   13380:	bl	12ca4 <__assert_fail@plt+0x1618>
   13384:	cmp	r0, #0
   13388:	bne	133e8 <__assert_fail@plt+0x1d5c>
   1338c:	mov	r1, #16
   13390:	mov	r0, #1
   13394:	bl	112d8 <calloc@plt>
   13398:	subs	r4, r0, #0
   1339c:	beq	133d8 <__assert_fail@plt+0x1d4c>
   133a0:	add	r6, r4, #8
   133a4:	str	r6, [r4, #8]
   133a8:	str	r6, [r4, #12]
   133ac:	mov	r0, r7
   133b0:	bl	113bc <strdup@plt>
   133b4:	cmp	r0, #0
   133b8:	beq	1341c <__assert_fail@plt+0x1d90>
   133bc:	ldr	r3, [r5, #4]
   133c0:	str	r0, [r4]
   133c4:	str	r5, [r4, #8]
   133c8:	str	r3, [r4, #12]
   133cc:	str	r6, [r5, #4]
   133d0:	str	r6, [r3]
   133d4:	pop	{r4, r5, r6, r7, r8, pc}
   133d8:	mov	r2, #16
   133dc:	ldr	r1, [pc, #64]	; 13424 <__assert_fail@plt+0x1d98>
   133e0:	mov	r0, #1
   133e4:	bl	11404 <err@plt>
   133e8:	mov	r2, #5
   133ec:	ldr	r1, [pc, #52]	; 13428 <__assert_fail@plt+0x1d9c>
   133f0:	mov	r0, #0
   133f4:	bl	113b0 <dcgettext@plt>
   133f8:	mov	r2, r7
   133fc:	mov	r1, r0
   13400:	mov	r0, #1
   13404:	bl	11590 <errx@plt>
   13408:	ldr	r3, [pc, #28]	; 1342c <__assert_fail@plt+0x1da0>
   1340c:	ldr	r2, [pc, #28]	; 13430 <__assert_fail@plt+0x1da4>
   13410:	ldr	r1, [pc, #28]	; 13434 <__assert_fail@plt+0x1da8>
   13414:	ldr	r0, [pc, #28]	; 13438 <__assert_fail@plt+0x1dac>
   13418:	bl	1168c <__assert_fail@plt>
   1341c:	mov	r0, r7
   13420:	bl	12dd8 <__assert_fail@plt+0x174c>
   13424:	andeq	r6, r1, ip, lsr #18
   13428:	andeq	r6, r1, r0, asr #21
   1342c:	andeq	r6, r1, r4, ror r7
   13430:	andeq	r0, r0, sp, lsr r2
   13434:	andeq	r6, r1, r8, asr #20
   13438:	andeq	r6, r1, r4, ror #24
   1343c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13440:	mov	r4, r0
   13444:	ldr	r8, [pc, #712]	; 13714 <__assert_fail@plt+0x2088>
   13448:	ldrb	r0, [r0, #64]	; 0x40
   1344c:	sub	sp, sp, #96	; 0x60
   13450:	ldr	r2, [r8]
   13454:	mov	r3, #0
   13458:	tst	r0, #2
   1345c:	mov	r9, r1
   13460:	str	r2, [sp, #92]	; 0x5c
   13464:	str	r3, [sp, #4]
   13468:	bne	13478 <__assert_fail@plt+0x1dec>
   1346c:	ldr	r0, [r4]
   13470:	cmp	r0, r3
   13474:	blt	13618 <__assert_fail@plt+0x1f8c>
   13478:	ldrb	r3, [r4, #65]	; 0x41
   1347c:	ldr	r2, [r4, #12]
   13480:	ands	r7, r3, #1
   13484:	moveq	sl, #2
   13488:	moveq	r5, #1
   1348c:	bne	13598 <__assert_fail@plt+0x1f0c>
   13490:	add	r3, sp, #96	; 0x60
   13494:	add	r6, r3, r7, lsl #3
   13498:	mov	r0, r2
   1349c:	str	r2, [r6, #-36]	; 0xffffffdc
   134a0:	bl	114dc <strlen@plt>
   134a4:	add	r3, sp, #96	; 0x60
   134a8:	add	r5, r3, r5, lsl #3
   134ac:	str	r9, [r5, #-36]	; 0xffffffdc
   134b0:	str	r0, [r6, #-32]	; 0xffffffe0
   134b4:	mov	r0, r9
   134b8:	bl	114dc <strlen@plt>
   134bc:	ldrb	r3, [r4, #64]	; 0x40
   134c0:	ands	r2, r3, #2
   134c4:	str	r0, [r5, #-32]	; 0xffffffe0
   134c8:	beq	13538 <__assert_fail@plt+0x1eac>
   134cc:	tst	r3, #8
   134d0:	beq	13518 <__assert_fail@plt+0x1e8c>
   134d4:	add	r3, sp, #96	; 0x60
   134d8:	add	r3, r3, sl, lsl #3
   134dc:	ldr	r3, [r3, #-44]	; 0xffffffd4
   134e0:	ldrb	r3, [r3]
   134e4:	cmp	r3, #10
   134e8:	beq	13664 <__assert_fail@plt+0x1fd8>
   134ec:	cmp	sl, #4
   134f0:	beq	13700 <__assert_fail@plt+0x2074>
   134f4:	mov	r1, #1
   134f8:	add	r3, sp, #96	; 0x60
   134fc:	ldr	r0, [pc, #532]	; 13718 <__assert_fail@plt+0x208c>
   13500:	add	r3, r3, sl, lsl #3
   13504:	add	r2, sl, r1
   13508:	strd	r0, [r3, #-36]	; 0xffffffdc
   1350c:	add	r1, sp, #60	; 0x3c
   13510:	mov	r0, #2
   13514:	bl	11560 <writev@plt>
   13518:	ldr	r0, [sp, #4]
   1351c:	bl	11344 <free@plt>
   13520:	ldr	r2, [sp, #92]	; 0x5c
   13524:	ldr	r3, [r8]
   13528:	cmp	r2, r3
   1352c:	bne	136fc <__assert_fail@plt+0x2070>
   13530:	add	sp, sp, #96	; 0x60
   13534:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13538:	ldr	r0, [r4]
   1353c:	cmp	r0, #0
   13540:	blt	134cc <__assert_fail@plt+0x1e40>
   13544:	ldr	r3, [r4, #36]	; 0x24
   13548:	str	r2, [sp, #8]
   1354c:	cmp	r3, #4
   13550:	str	r2, [sp, #12]
   13554:	str	r2, [sp, #24]
   13558:	str	r2, [sp, #28]
   1355c:	str	r2, [sp, #32]
   13560:	beq	13638 <__assert_fail@plt+0x1fac>
   13564:	ldr	r5, [r4, #8]
   13568:	add	r3, sp, #60	; 0x3c
   1356c:	cmp	r5, #0
   13570:	str	sl, [sp, #20]
   13574:	str	r3, [sp, #16]
   13578:	bne	135ec <__assert_fail@plt+0x1f60>
   1357c:	mov	r2, #16384	; 0x4000
   13580:	add	r1, sp, #8
   13584:	bl	11398 <sendmsg@plt>
   13588:	cmp	r0, #0
   1358c:	blt	1366c <__assert_fail@plt+0x1fe0>
   13590:	ldrb	r3, [r4, #64]	; 0x40
   13594:	b	134cc <__assert_fail@plt+0x1e40>
   13598:	mov	r0, r2
   1359c:	bl	114dc <strlen@plt>
   135a0:	mov	r5, r0
   135a4:	mov	r0, r9
   135a8:	bl	114dc <strlen@plt>
   135ac:	ldr	r1, [pc, #360]	; 1371c <__assert_fail@plt+0x2090>
   135b0:	add	r2, r5, r0
   135b4:	add	r0, sp, #4
   135b8:	bl	12af4 <__assert_fail@plt+0x1468>
   135bc:	ldr	r3, [sp, #4]
   135c0:	str	r3, [sp, #60]	; 0x3c
   135c4:	cmp	r0, #0
   135c8:	bne	135d4 <__assert_fail@plt+0x1f48>
   135cc:	mov	r0, r3
   135d0:	bl	114dc <strlen@plt>
   135d4:	str	r0, [sp, #64]	; 0x40
   135d8:	ldr	r2, [r4, #12]
   135dc:	mov	sl, #3
   135e0:	mov	r5, #2
   135e4:	mov	r7, #1
   135e8:	b	13490 <__assert_fail@plt+0x1e04>
   135ec:	ldr	r3, [r4, #28]
   135f0:	cmp	r3, #0
   135f4:	bne	1357c <__assert_fail@plt+0x1ef0>
   135f8:	bl	114b8 <getpid@plt>
   135fc:	cmp	r5, r0
   13600:	beq	13610 <__assert_fail@plt+0x1f84>
   13604:	bl	11410 <geteuid@plt>
   13608:	subs	r1, r0, #0
   1360c:	beq	136c0 <__assert_fail@plt+0x2034>
   13610:	ldr	r0, [r4]
   13614:	b	1357c <__assert_fail@plt+0x1ef0>
   13618:	cmn	r0, #1
   1361c:	beq	13624 <__assert_fail@plt+0x1f98>
   13620:	bl	1165c <close@plt>
   13624:	mvn	r3, #0
   13628:	str	r3, [r4]
   1362c:	mov	r0, r4
   13630:	bl	12f20 <__assert_fail@plt+0x1894>
   13634:	b	13478 <__assert_fail@plt+0x1dec>
   13638:	ldrb	r3, [r4, #65]	; 0x41
   1363c:	tst	r3, #1
   13640:	bne	13564 <__assert_fail@plt+0x1ed8>
   13644:	add	r3, sp, #96	; 0x60
   13648:	add	r3, r3, sl, lsl #3
   1364c:	ldr	r1, [pc, #196]	; 13718 <__assert_fail@plt+0x208c>
   13650:	mov	r2, #1
   13654:	add	sl, r7, #3
   13658:	str	r1, [r3, #-36]	; 0xffffffdc
   1365c:	str	r2, [r3, #-32]	; 0xffffffe0
   13660:	b	13564 <__assert_fail@plt+0x1ed8>
   13664:	mov	r2, sl
   13668:	b	1350c <__assert_fail@plt+0x1e80>
   1366c:	ldr	r0, [r4]
   13670:	cmn	r0, #1
   13674:	bne	136b8 <__assert_fail@plt+0x202c>
   13678:	mvn	r3, #0
   1367c:	str	r3, [r4]
   13680:	mov	r0, r4
   13684:	bl	12f20 <__assert_fail@plt+0x1894>
   13688:	add	r1, sp, #8
   1368c:	mov	r2, #16384	; 0x4000
   13690:	ldr	r0, [r4]
   13694:	bl	11398 <sendmsg@plt>
   13698:	cmp	r0, #0
   1369c:	bge	13590 <__assert_fail@plt+0x1f04>
   136a0:	mov	r2, #5
   136a4:	ldr	r1, [pc, #116]	; 13720 <__assert_fail@plt+0x2094>
   136a8:	mov	r0, #0
   136ac:	bl	113b0 <dcgettext@plt>
   136b0:	bl	1159c <warn@plt>
   136b4:	b	13590 <__assert_fail@plt+0x1f04>
   136b8:	bl	1165c <close@plt>
   136bc:	b	13678 <__assert_fail@plt+0x1fec>
   136c0:	ldr	r0, [r4, #8]
   136c4:	bl	114a0 <kill@plt>
   136c8:	cmp	r0, #0
   136cc:	addeq	r3, sp, #36	; 0x24
   136d0:	ldreq	r2, [r4, #8]
   136d4:	moveq	r6, #1
   136d8:	moveq	r7, #2
   136dc:	streq	r3, [sp, #24]
   136e0:	moveq	r3, #24
   136e4:	ldr	r0, [r4]
   136e8:	streq	r2, [sp, #48]	; 0x30
   136ec:	streq	r3, [sp, #28]
   136f0:	streq	r3, [sp, #36]	; 0x24
   136f4:	strdeq	r6, [sp, #40]	; 0x28
   136f8:	b	1357c <__assert_fail@plt+0x1ef0>
   136fc:	bl	113c8 <__stack_chk_fail@plt>
   13700:	ldr	r3, [pc, #28]	; 13724 <__assert_fail@plt+0x2098>
   13704:	ldr	r2, [pc, #28]	; 13728 <__assert_fail@plt+0x209c>
   13708:	ldr	r1, [pc, #28]	; 1372c <__assert_fail@plt+0x20a0>
   1370c:	ldr	r0, [pc, #28]	; 13730 <__assert_fail@plt+0x20a4>
   13710:	bl	1168c <__assert_fail@plt>
   13714:	andeq	r7, r2, r0, lsr #27
   13718:	andeq	r7, r1, r8, ror #3
   1371c:	andeq	r6, r1, r8, ror #21
   13720:	strdeq	r6, [r1], -r0
   13724:	andeq	r6, r1, ip, lsl #15
   13728:	andeq	r0, r0, r1, lsl #4
   1372c:	andeq	r6, r1, r8, asr #20
   13730:	andeq	r6, r1, r4, lsl #22
   13734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13738:	mov	r4, r0
   1373c:	ldr	r5, [r0, #20]
   13740:	ldr	r7, [pc, #924]	; 13ae4 <__assert_fail@plt+0x2458>
   13744:	ldr	r6, [pc, #924]	; 13ae8 <__assert_fail@plt+0x245c>
   13748:	cmp	r5, #0
   1374c:	moveq	r5, r6
   13750:	sub	sp, sp, #140	; 0x8c
   13754:	ldr	r3, [r7]
   13758:	mov	r0, r5
   1375c:	str	r3, [sp, #132]	; 0x84
   13760:	ldr	r9, [r4, #16]
   13764:	bl	113bc <strdup@plt>
   13768:	subs	r8, r0, #0
   1376c:	beq	13a84 <__assert_fail@plt+0x23f8>
   13770:	ldrb	r5, [r4, #64]	; 0x40
   13774:	tst	r5, #16
   13778:	bne	138f0 <__assert_fail@plt+0x2264>
   1377c:	mov	r0, r6
   13780:	bl	113bc <strdup@plt>
   13784:	cmp	r0, #0
   13788:	strne	r0, [sp, #24]
   1378c:	beq	1397c <__assert_fail@plt+0x22f0>
   13790:	tst	r5, #64	; 0x40
   13794:	beq	1396c <__assert_fail@plt+0x22e0>
   13798:	mov	r0, #180	; 0xb4
   1379c:	bl	113d4 <sysconf@plt>
   137a0:	subs	r5, r0, #0
   137a4:	addgt	sl, r5, #1
   137a8:	movle	sl, #65	; 0x41
   137ac:	mov	r0, sl
   137b0:	movle	r5, #64	; 0x40
   137b4:	bl	1144c <malloc@plt>
   137b8:	subs	r6, r0, #0
   137bc:	beq	13aac <__assert_fail@plt+0x2420>
   137c0:	mov	r1, sl
   137c4:	bl	11440 <gethostname@plt>
   137c8:	cmp	r0, #0
   137cc:	strbeq	r0, [r6, r5]
   137d0:	bne	13a34 <__assert_fail@plt+0x23a8>
   137d4:	mov	r0, r6
   137d8:	bl	114dc <strlen@plt>
   137dc:	cmp	r0, #255	; 0xff
   137e0:	bhi	13a8c <__assert_fail@plt+0x2400>
   137e4:	ldr	r0, [r4, #16]
   137e8:	bl	114dc <strlen@plt>
   137ec:	cmp	r0, #48	; 0x30
   137f0:	bhi	13a60 <__assert_fail@plt+0x23d4>
   137f4:	ldr	r2, [r4, #8]
   137f8:	cmp	r2, #0
   137fc:	beq	13984 <__assert_fail@plt+0x22f8>
   13800:	ldr	r1, [pc, #740]	; 13aec <__assert_fail@plt+0x2460>
   13804:	add	r0, sp, #28
   13808:	bl	12af4 <__assert_fail@plt+0x1468>
   1380c:	ldrb	r3, [r4, #64]	; 0x40
   13810:	add	r5, r4, #52	; 0x34
   13814:	tst	r3, #32
   13818:	bne	139a8 <__assert_fail@plt+0x231c>
   1381c:	ldr	r3, [r4, #52]	; 0x34
   13820:	add	sl, r4, #44	; 0x2c
   13824:	cmp	r5, r3
   13828:	beq	13a04 <__assert_fail@plt+0x2378>
   1382c:	mov	r0, r5
   13830:	bl	12cf4 <__assert_fail@plt+0x1668>
   13834:	ldr	r3, [r4, #44]	; 0x2c
   13838:	cmp	sl, r3
   1383c:	mov	r5, r0
   13840:	beq	13880 <__assert_fail@plt+0x21f4>
   13844:	mov	r0, sl
   13848:	bl	12cf4 <__assert_fail@plt+0x1668>
   1384c:	cmp	r5, #0
   13850:	cmpne	r0, #0
   13854:	mov	sl, r0
   13858:	beq	13ad4 <__assert_fail@plt+0x2448>
   1385c:	mov	r1, r0
   13860:	mov	r0, r5
   13864:	bl	158e8 <__assert_fail@plt+0x425c>
   13868:	mov	fp, r0
   1386c:	mov	r0, r5
   13870:	bl	11344 <free@plt>
   13874:	mov	r0, sl
   13878:	mov	r5, fp
   1387c:	bl	11344 <free@plt>
   13880:	cmp	r5, #0
   13884:	beq	13a10 <__assert_fail@plt+0x2384>
   13888:	ldr	r3, [sp, #28]
   1388c:	ldr	r1, [pc, #604]	; 13af0 <__assert_fail@plt+0x2464>
   13890:	str	r3, [sp, #8]
   13894:	str	r5, [sp, #16]
   13898:	ldr	r3, [sp, #24]
   1389c:	str	r8, [sp, #12]
   138a0:	stm	sp, {r6, r9}
   138a4:	add	r0, r4, #12
   138a8:	ldr	r2, [r4, #4]
   138ac:	bl	12af4 <__assert_fail@plt+0x1468>
   138b0:	ldr	r0, [sp, #24]
   138b4:	bl	11344 <free@plt>
   138b8:	mov	r0, r6
   138bc:	bl	11344 <free@plt>
   138c0:	ldr	r0, [sp, #28]
   138c4:	bl	11344 <free@plt>
   138c8:	mov	r0, r8
   138cc:	bl	11344 <free@plt>
   138d0:	mov	r0, r5
   138d4:	bl	11344 <free@plt>
   138d8:	ldr	r2, [sp, #132]	; 0x84
   138dc:	ldr	r3, [r7]
   138e0:	cmp	r2, r3
   138e4:	bne	13a80 <__assert_fail@plt+0x23f4>
   138e8:	add	sp, sp, #140	; 0x8c
   138ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138f0:	mov	r1, #0
   138f4:	add	r0, sp, #32
   138f8:	bl	1141c <gettimeofday@plt>
   138fc:	add	r0, sp, #32
   13900:	bl	11470 <localtime@plt>
   13904:	subs	r3, r0, #0
   13908:	beq	13abc <__assert_fail@plt+0x2430>
   1390c:	ldr	r2, [pc, #480]	; 13af4 <__assert_fail@plt+0x2468>
   13910:	mov	r1, #64	; 0x40
   13914:	add	r0, sp, #68	; 0x44
   13918:	bl	11464 <strftime@plt>
   1391c:	add	r3, sp, #136	; 0x88
   13920:	add	r1, sp, #136	; 0x88
   13924:	mov	lr, #58	; 0x3a
   13928:	sub	ip, r0, #2
   1392c:	add	ip, r3, ip
   13930:	sub	r3, r0, #3
   13934:	ldrsb	r2, [ip, #-68]	; 0xffffffbc
   13938:	add	r3, r1, r3
   1393c:	add	r0, r1, r0
   13940:	add	r1, sp, #68	; 0x44
   13944:	strb	r2, [r0, #-69]	; 0xffffffbb
   13948:	ldrsb	r0, [r3, #-68]	; 0xffffffbc
   1394c:	ldr	r2, [sp, #36]	; 0x24
   13950:	strb	r0, [ip, #-68]	; 0xffffffbc
   13954:	add	r0, sp, #24
   13958:	strb	lr, [r3, #-68]	; 0xffffffbc
   1395c:	bl	12af4 <__assert_fail@plt+0x1468>
   13960:	ldrb	r5, [r4, #64]	; 0x40
   13964:	tst	r5, #64	; 0x40
   13968:	bne	13798 <__assert_fail@plt+0x210c>
   1396c:	ldr	r0, [pc, #372]	; 13ae8 <__assert_fail@plt+0x245c>
   13970:	bl	113bc <strdup@plt>
   13974:	subs	r6, r0, #0
   13978:	bne	137e4 <__assert_fail@plt+0x2158>
   1397c:	ldr	r0, [pc, #356]	; 13ae8 <__assert_fail@plt+0x245c>
   13980:	bl	12dd8 <__assert_fail@plt+0x174c>
   13984:	ldr	r0, [pc, #348]	; 13ae8 <__assert_fail@plt+0x245c>
   13988:	bl	113bc <strdup@plt>
   1398c:	cmp	r0, #0
   13990:	beq	1397c <__assert_fail@plt+0x22f0>
   13994:	ldrb	r3, [r4, #64]	; 0x40
   13998:	str	r0, [sp, #28]
   1399c:	add	r5, r4, #52	; 0x34
   139a0:	tst	r3, #32
   139a4:	beq	1381c <__assert_fail@plt+0x2190>
   139a8:	ldr	r1, [pc, #328]	; 13af8 <__assert_fail@plt+0x246c>
   139ac:	mov	r0, r5
   139b0:	bl	12ca4 <__assert_fail@plt+0x1618>
   139b4:	cmp	r0, #0
   139b8:	bne	1381c <__assert_fail@plt+0x2190>
   139bc:	ldr	r1, [pc, #308]	; 13af8 <__assert_fail@plt+0x246c>
   139c0:	mov	r0, r5
   139c4:	bl	13370 <__assert_fail@plt+0x1ce4>
   139c8:	ldr	r1, [pc, #300]	; 13afc <__assert_fail@plt+0x2470>
   139cc:	mov	r0, r5
   139d0:	bl	132d4 <__assert_fail@plt+0x1c48>
   139d4:	add	r0, sp, #32
   139d8:	bl	115c0 <ntp_gettimex@plt>
   139dc:	cmp	r0, #0
   139e0:	bne	13a50 <__assert_fail@plt+0x23c4>
   139e4:	mov	r0, r5
   139e8:	ldr	r1, [pc, #272]	; 13b00 <__assert_fail@plt+0x2474>
   139ec:	bl	132d4 <__assert_fail@plt+0x1c48>
   139f0:	ldr	r2, [sp, #40]	; 0x28
   139f4:	ldr	r1, [pc, #264]	; 13b04 <__assert_fail@plt+0x2478>
   139f8:	mov	r0, r5
   139fc:	bl	13218 <__assert_fail@plt+0x1b8c>
   13a00:	b	1381c <__assert_fail@plt+0x2190>
   13a04:	ldr	r3, [r4, #44]	; 0x2c
   13a08:	cmp	r3, sl
   13a0c:	bne	13a24 <__assert_fail@plt+0x2398>
   13a10:	ldr	r0, [pc, #208]	; 13ae8 <__assert_fail@plt+0x245c>
   13a14:	bl	113bc <strdup@plt>
   13a18:	subs	r5, r0, #0
   13a1c:	bne	13888 <__assert_fail@plt+0x21fc>
   13a20:	b	1397c <__assert_fail@plt+0x22f0>
   13a24:	mov	r0, sl
   13a28:	bl	12cf4 <__assert_fail@plt+0x1668>
   13a2c:	mov	r5, r0
   13a30:	b	13880 <__assert_fail@plt+0x21f4>
   13a34:	mov	r0, r6
   13a38:	bl	11344 <free@plt>
   13a3c:	ldr	r0, [pc, #164]	; 13ae8 <__assert_fail@plt+0x245c>
   13a40:	bl	113bc <strdup@plt>
   13a44:	subs	r6, r0, #0
   13a48:	bne	137d4 <__assert_fail@plt+0x2148>
   13a4c:	b	1397c <__assert_fail@plt+0x22f0>
   13a50:	ldr	r1, [pc, #176]	; 13b08 <__assert_fail@plt+0x247c>
   13a54:	mov	r0, r5
   13a58:	bl	13218 <__assert_fail@plt+0x1b8c>
   13a5c:	b	1381c <__assert_fail@plt+0x2190>
   13a60:	mov	r2, #5
   13a64:	ldr	r1, [pc, #160]	; 13b0c <__assert_fail@plt+0x2480>
   13a68:	mov	r0, #0
   13a6c:	bl	113b0 <dcgettext@plt>
   13a70:	ldr	r2, [r4, #16]
   13a74:	mov	r1, r0
   13a78:	mov	r0, #1
   13a7c:	bl	11590 <errx@plt>
   13a80:	bl	113c8 <__stack_chk_fail@plt>
   13a84:	mov	r0, r5
   13a88:	bl	12dd8 <__assert_fail@plt+0x174c>
   13a8c:	mov	r2, #5
   13a90:	ldr	r1, [pc, #120]	; 13b10 <__assert_fail@plt+0x2484>
   13a94:	mov	r0, #0
   13a98:	bl	113b0 <dcgettext@plt>
   13a9c:	mov	r2, r6
   13aa0:	mov	r1, r0
   13aa4:	mov	r0, #1
   13aa8:	bl	11590 <errx@plt>
   13aac:	mov	r2, sl
   13ab0:	ldr	r1, [pc, #92]	; 13b14 <__assert_fail@plt+0x2488>
   13ab4:	mov	r0, #1
   13ab8:	bl	11404 <err@plt>
   13abc:	ldr	r1, [pc, #84]	; 13b18 <__assert_fail@plt+0x248c>
   13ac0:	mov	r2, #5
   13ac4:	bl	113b0 <dcgettext@plt>
   13ac8:	mov	r1, r0
   13acc:	mov	r0, #1
   13ad0:	bl	11404 <err@plt>
   13ad4:	cmp	r5, #0
   13ad8:	moveq	r5, r0
   13adc:	bne	13888 <__assert_fail@plt+0x21fc>
   13ae0:	b	13880 <__assert_fail@plt+0x21f4>
   13ae4:	andeq	r7, r2, r0, lsr #27
   13ae8:	andeq	r6, r1, r8, lsr #22
   13aec:	muleq	r1, r0, fp
   13af0:	andeq	r6, r1, r0, ror #23
   13af4:	andeq	r6, r1, ip, lsr #22
   13af8:	muleq	r1, r4, fp
   13afc:	andeq	r6, r1, r0, lsr #23
   13b00:	andeq	r6, r1, ip, lsr #23
   13b04:			; <UNDEFINED> instruction: 0x00016bbc
   13b08:	ldrdeq	r6, [r1], -r0
   13b0c:	andeq	r6, r1, r8, ror fp
   13b10:	andeq	r6, r1, ip, asr fp
   13b14:	andeq	r6, r1, ip, lsr #18
   13b18:	andeq	r6, r1, r8, asr #22
   13b1c:	ldr	r3, [pc, #292]	; 13c48 <__assert_fail@plt+0x25bc>
   13b20:	push	{r4, r5, r6, lr}
   13b24:	ldr	r4, [r3]
   13b28:	mov	r0, r4
   13b2c:	bl	11434 <__fpending@plt>
   13b30:	mov	r6, r0
   13b34:	mov	r0, r4
   13b38:	bl	1135c <ferror@plt>
   13b3c:	mov	r5, r0
   13b40:	mov	r0, r4
   13b44:	bl	1156c <fclose@plt>
   13b48:	cmp	r5, #0
   13b4c:	mov	r4, r0
   13b50:	bne	13bf8 <__assert_fail@plt+0x256c>
   13b54:	cmp	r0, #0
   13b58:	beq	13b74 <__assert_fail@plt+0x24e8>
   13b5c:	bl	11500 <__errno_location@plt>
   13b60:	cmp	r6, #0
   13b64:	ldr	r3, [r0]
   13b68:	bne	13bd0 <__assert_fail@plt+0x2544>
   13b6c:	cmp	r3, #9
   13b70:	bne	13bd0 <__assert_fail@plt+0x2544>
   13b74:	ldr	r3, [pc, #208]	; 13c4c <__assert_fail@plt+0x25c0>
   13b78:	ldr	r4, [r3]
   13b7c:	mov	r0, r4
   13b80:	bl	11434 <__fpending@plt>
   13b84:	mov	r6, r0
   13b88:	mov	r0, r4
   13b8c:	bl	1135c <ferror@plt>
   13b90:	mov	r5, r0
   13b94:	mov	r0, r4
   13b98:	bl	1156c <fclose@plt>
   13b9c:	cmp	r5, #0
   13ba0:	mov	r4, r0
   13ba4:	bne	13c2c <__assert_fail@plt+0x25a0>
   13ba8:	cmp	r0, #0
   13bac:	popeq	{r4, r5, r6, pc}
   13bb0:	cmp	r6, #0
   13bb4:	bne	13bc8 <__assert_fail@plt+0x253c>
   13bb8:	bl	11500 <__errno_location@plt>
   13bbc:	ldr	r3, [r0]
   13bc0:	cmp	r3, #9
   13bc4:	popeq	{r4, r5, r6, pc}
   13bc8:	mov	r0, #1
   13bcc:	bl	11374 <_exit@plt>
   13bd0:	cmp	r3, #32
   13bd4:	beq	13b74 <__assert_fail@plt+0x24e8>
   13bd8:	cmp	r3, #0
   13bdc:	beq	13c14 <__assert_fail@plt+0x2588>
   13be0:	mov	r2, #5
   13be4:	ldr	r1, [pc, #100]	; 13c50 <__assert_fail@plt+0x25c4>
   13be8:	mov	r0, #0
   13bec:	bl	113b0 <dcgettext@plt>
   13bf0:	bl	1159c <warn@plt>
   13bf4:	b	13bc8 <__assert_fail@plt+0x253c>
   13bf8:	bl	11500 <__errno_location@plt>
   13bfc:	cmp	r4, #0
   13c00:	ldr	r3, [r0]
   13c04:	bne	13bd0 <__assert_fail@plt+0x2544>
   13c08:	cmp	r3, #32
   13c0c:	strne	r4, [r0]
   13c10:	beq	13b74 <__assert_fail@plt+0x24e8>
   13c14:	mov	r2, #5
   13c18:	ldr	r1, [pc, #48]	; 13c50 <__assert_fail@plt+0x25c4>
   13c1c:	mov	r0, #0
   13c20:	bl	113b0 <dcgettext@plt>
   13c24:	bl	114f4 <warnx@plt>
   13c28:	b	13bc8 <__assert_fail@plt+0x253c>
   13c2c:	cmp	r0, #0
   13c30:	bne	13bc8 <__assert_fail@plt+0x253c>
   13c34:	bl	11500 <__errno_location@plt>
   13c38:	ldr	r3, [r0]
   13c3c:	cmp	r3, #32
   13c40:	strne	r4, [r0]
   13c44:	b	13bc8 <__assert_fail@plt+0x253c>
   13c48:	andeq	r8, r2, ip, asr #2
   13c4c:	andeq	r8, r2, r0, asr #2
   13c50:	strdeq	r6, [r1], -ip
   13c54:	push	{r4, r5, r6, r7, r8, lr}
   13c58:	mov	r3, #0
   13c5c:	ldr	r7, [pc, #268]	; 13d70 <__assert_fail@plt+0x26e4>
   13c60:	ldr	r2, [r0, #8]
   13c64:	sub	sp, sp, #56	; 0x38
   13c68:	ldr	r1, [r7]
   13c6c:	cmp	r2, r3
   13c70:	mov	r5, r0
   13c74:	str	r1, [sp, #52]	; 0x34
   13c78:	strb	r3, [sp, #20]
   13c7c:	bne	13d1c <__assert_fail@plt+0x2690>
   13c80:	mov	r0, #180	; 0xb4
   13c84:	bl	113d4 <sysconf@plt>
   13c88:	subs	r6, r0, #0
   13c8c:	addgt	r8, r6, #1
   13c90:	movle	r8, #65	; 0x41
   13c94:	mov	r0, r8
   13c98:	movle	r6, #64	; 0x40
   13c9c:	bl	1144c <malloc@plt>
   13ca0:	subs	r4, r0, #0
   13ca4:	beq	13d60 <__assert_fail@plt+0x26d4>
   13ca8:	mov	r1, r8
   13cac:	bl	11440 <gethostname@plt>
   13cb0:	subs	r8, r0, #0
   13cb4:	bne	13d3c <__assert_fail@plt+0x26b0>
   13cb8:	strb	r8, [r4, r6]
   13cbc:	mov	r1, #46	; 0x2e
   13cc0:	mov	r0, r4
   13cc4:	bl	114e8 <strchr@plt>
   13cc8:	cmp	r0, #0
   13ccc:	strbne	r8, [r0]
   13cd0:	ldr	r6, [r5, #4]
   13cd4:	bl	12b64 <__assert_fail@plt+0x14d8>
   13cd8:	ldr	r1, [r5, #16]
   13cdc:	add	r3, sp, #20
   13ce0:	mov	r2, r6
   13ce4:	stmib	sp, {r1, r3}
   13ce8:	str	r4, [sp]
   13cec:	ldr	r1, [pc, #128]	; 13d74 <__assert_fail@plt+0x26e8>
   13cf0:	mov	r3, r0
   13cf4:	add	r0, r5, #12
   13cf8:	bl	12af4 <__assert_fail@plt+0x1468>
   13cfc:	ldr	r2, [sp, #52]	; 0x34
   13d00:	ldr	r3, [r7]
   13d04:	cmp	r2, r3
   13d08:	bne	13d5c <__assert_fail@plt+0x26d0>
   13d0c:	mov	r0, r4
   13d10:	add	sp, sp, #56	; 0x38
   13d14:	pop	{r4, r5, r6, r7, r8, lr}
   13d18:	b	11344 <free@plt>
   13d1c:	ldr	r1, [pc, #84]	; 13d78 <__assert_fail@plt+0x26ec>
   13d20:	mov	r3, #30
   13d24:	add	r0, sp, #20
   13d28:	stm	sp, {r1, r2}
   13d2c:	mov	r1, r3
   13d30:	mov	r2, #1
   13d34:	bl	11674 <__snprintf_chk@plt>
   13d38:	b	13c80 <__assert_fail@plt+0x25f4>
   13d3c:	mov	r0, r4
   13d40:	bl	11344 <free@plt>
   13d44:	ldr	r0, [pc, #48]	; 13d7c <__assert_fail@plt+0x26f0>
   13d48:	bl	113bc <strdup@plt>
   13d4c:	subs	r4, r0, #0
   13d50:	bne	13cd0 <__assert_fail@plt+0x2644>
   13d54:	ldr	r0, [pc, #32]	; 13d7c <__assert_fail@plt+0x26f0>
   13d58:	bl	12dd8 <__assert_fail@plt+0x174c>
   13d5c:	bl	113c8 <__stack_chk_fail@plt>
   13d60:	mov	r2, r8
   13d64:	ldr	r1, [pc, #20]	; 13d80 <__assert_fail@plt+0x26f4>
   13d68:	mov	r0, #1
   13d6c:	bl	11404 <err@plt>
   13d70:	andeq	r7, r2, r0, lsr #27
   13d74:	andeq	r6, r1, r8, lsl #24
   13d78:	andeq	r6, r1, ip, ror r9
   13d7c:	andeq	r6, r1, r8, lsr #22
   13d80:	andeq	r6, r1, ip, lsr #18
   13d84:	andeq	r0, r0, r0
   13d88:	cmp	r0, #0
   13d8c:	mov	r3, #0
   13d90:	str	r3, [r1]
   13d94:	bxeq	lr
   13d98:	ldrsb	r2, [r0]
   13d9c:	cmp	r2, #47	; 0x2f
   13da0:	bne	13ddc <__assert_fail@plt+0x2750>
   13da4:	ldrsb	r3, [r0, #1]
   13da8:	cmp	r3, #47	; 0x2f
   13dac:	bne	13de4 <__assert_fail@plt+0x2758>
   13db0:	add	r3, r0, #1
   13db4:	b	13dc4 <__assert_fail@plt+0x2738>
   13db8:	ldrsb	r2, [r3]
   13dbc:	cmp	r2, #47	; 0x2f
   13dc0:	bne	13de4 <__assert_fail@plt+0x2758>
   13dc4:	cmp	r3, #0
   13dc8:	mov	r0, r3
   13dcc:	bxeq	lr
   13dd0:	ldrsb	r2, [r3], #1
   13dd4:	cmp	r2, #47	; 0x2f
   13dd8:	beq	13db8 <__assert_fail@plt+0x272c>
   13ddc:	cmp	r2, #0
   13de0:	beq	13e20 <__assert_fail@plt+0x2794>
   13de4:	mov	r3, #1
   13de8:	str	r3, [r1]
   13dec:	ldrsb	r3, [r0, #1]
   13df0:	add	r2, r0, #1
   13df4:	cmp	r3, #47	; 0x2f
   13df8:	cmpne	r3, #0
   13dfc:	bxeq	lr
   13e00:	rsb	r3, r0, #1
   13e04:	add	ip, r2, r3
   13e08:	str	ip, [r1]
   13e0c:	ldrsb	ip, [r2, #1]!
   13e10:	cmp	ip, #0
   13e14:	cmpne	ip, #47	; 0x2f
   13e18:	bne	13e04 <__assert_fail@plt+0x2778>
   13e1c:	bx	lr
   13e20:	mov	r0, r2
   13e24:	bx	lr
   13e28:	push	{r4, r5, r6, r7, r8, lr}
   13e2c:	mov	r7, r1
   13e30:	ldrsb	r1, [r0]
   13e34:	cmp	r1, #0
   13e38:	movne	r5, r0
   13e3c:	movne	r4, #0
   13e40:	beq	13eac <__assert_fail@plt+0x2820>
   13e44:	cmp	r1, #92	; 0x5c
   13e48:	addne	r6, r5, r4
   13e4c:	beq	13e7c <__assert_fail@plt+0x27f0>
   13e50:	mov	r0, r7
   13e54:	bl	114e8 <strchr@plt>
   13e58:	cmp	r0, #0
   13e5c:	bne	13ea4 <__assert_fail@plt+0x2818>
   13e60:	ldrsb	r1, [r6, #1]!
   13e64:	add	r4, r4, #1
   13e68:	mov	r0, r4
   13e6c:	cmp	r1, #0
   13e70:	popeq	{r4, r5, r6, r7, r8, pc}
   13e74:	cmp	r1, #92	; 0x5c
   13e78:	bne	13e50 <__assert_fail@plt+0x27c4>
   13e7c:	add	r3, r5, r4
   13e80:	ldrsb	r3, [r3, #1]
   13e84:	cmp	r3, #0
   13e88:	beq	13ea4 <__assert_fail@plt+0x2818>
   13e8c:	add	r4, r4, #2
   13e90:	mov	r0, r4
   13e94:	ldrsb	r1, [r5, r4]
   13e98:	cmp	r1, #0
   13e9c:	bne	13e44 <__assert_fail@plt+0x27b8>
   13ea0:	pop	{r4, r5, r6, r7, r8, pc}
   13ea4:	mov	r0, r4
   13ea8:	pop	{r4, r5, r6, r7, r8, pc}
   13eac:	mov	r0, r1
   13eb0:	pop	{r4, r5, r6, r7, r8, pc}
   13eb4:	push	{r4, r5, r6, r7, r8, r9, lr}
   13eb8:	sub	sp, sp, #12
   13ebc:	ldr	r7, [pc, #204]	; 13f90 <__assert_fail@plt+0x2904>
   13ec0:	mov	r5, #0
   13ec4:	mov	r4, r0
   13ec8:	ldr	r3, [r7]
   13ecc:	mov	r8, r1
   13ed0:	mov	r9, r2
   13ed4:	str	r3, [sp, #4]
   13ed8:	str	r5, [sp]
   13edc:	bl	11500 <__errno_location@plt>
   13ee0:	cmp	r4, r5
   13ee4:	str	r5, [r0]
   13ee8:	beq	13ef8 <__assert_fail@plt+0x286c>
   13eec:	ldrsb	r3, [r4]
   13ef0:	cmp	r3, #0
   13ef4:	bne	13f10 <__assert_fail@plt+0x2884>
   13ef8:	ldr	r1, [pc, #148]	; 13f94 <__assert_fail@plt+0x2908>
   13efc:	ldr	r0, [r1]
   13f00:	mov	r3, r4
   13f04:	mov	r2, r8
   13f08:	ldr	r1, [pc, #136]	; 13f98 <__assert_fail@plt+0x290c>
   13f0c:	bl	11590 <errx@plt>
   13f10:	mov	r6, r0
   13f14:	mov	r3, r5
   13f18:	mov	r2, r9
   13f1c:	mov	r1, sp
   13f20:	mov	r0, r4
   13f24:	bl	1138c <__strtoull_internal@plt>
   13f28:	ldr	r3, [r6]
   13f2c:	cmp	r3, #0
   13f30:	bne	13f6c <__assert_fail@plt+0x28e0>
   13f34:	ldr	r3, [sp]
   13f38:	cmp	r3, r4
   13f3c:	beq	13ef8 <__assert_fail@plt+0x286c>
   13f40:	cmp	r3, #0
   13f44:	beq	13f54 <__assert_fail@plt+0x28c8>
   13f48:	ldrsb	r3, [r3]
   13f4c:	cmp	r3, #0
   13f50:	bne	13ef8 <__assert_fail@plt+0x286c>
   13f54:	ldr	r2, [sp, #4]
   13f58:	ldr	r3, [r7]
   13f5c:	cmp	r2, r3
   13f60:	bne	13f8c <__assert_fail@plt+0x2900>
   13f64:	add	sp, sp, #12
   13f68:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13f6c:	ldr	r1, [pc, #32]	; 13f94 <__assert_fail@plt+0x2908>
   13f70:	cmp	r3, #34	; 0x22
   13f74:	ldr	r0, [r1]
   13f78:	bne	13efc <__assert_fail@plt+0x2870>
   13f7c:	mov	r3, r4
   13f80:	mov	r2, r8
   13f84:	ldr	r1, [pc, #12]	; 13f98 <__assert_fail@plt+0x290c>
   13f88:	bl	11404 <err@plt>
   13f8c:	bl	113c8 <__stack_chk_fail@plt>
   13f90:	andeq	r7, r2, r0, lsr #27
   13f94:	andeq	r8, r2, r8, lsr #2
   13f98:	muleq	r1, r4, r7
   13f9c:	push	{r4, lr}
   13fa0:	mov	r5, r0
   13fa4:	mov	r4, r1
   13fa8:	bl	11500 <__errno_location@plt>
   13fac:	ldr	ip, [pc, #24]	; 13fcc <__assert_fail@plt+0x2940>
   13fb0:	mov	lr, #34	; 0x22
   13fb4:	mov	r3, r5
   13fb8:	mov	r2, r4
   13fbc:	ldr	r1, [pc, #12]	; 13fd0 <__assert_fail@plt+0x2944>
   13fc0:	str	lr, [r0]
   13fc4:	ldr	r0, [ip]
   13fc8:	bl	11404 <err@plt>
   13fcc:	andeq	r8, r2, r8, lsr #2
   13fd0:	muleq	r1, r4, r7
   13fd4:	push	{r4, r5, r6, lr}
   13fd8:	mov	r4, r0
   13fdc:	mov	r5, r1
   13fe0:	bl	13eb4 <__assert_fail@plt+0x2828>
   13fe4:	mov	r3, #0
   13fe8:	mvn	r2, #0
   13fec:	cmp	r1, r3
   13ff0:	cmpeq	r0, r2
   13ff4:	popls	{r4, r5, r6, pc}
   13ff8:	mov	r1, r5
   13ffc:	mov	r0, r4
   14000:	bl	13f9c <__assert_fail@plt+0x2910>
   14004:	ldr	r3, [pc, #4]	; 14010 <__assert_fail@plt+0x2984>
   14008:	str	r0, [r3]
   1400c:	bx	lr
   14010:	andeq	r8, r2, r8, lsr #2
   14014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14018:	mov	r6, #0
   1401c:	ldr	r5, [pc, #1624]	; 1467c <__assert_fail@plt+0x2ff0>
   14020:	mov	r7, #0
   14024:	sub	sp, sp, #60	; 0x3c
   14028:	ldr	r3, [r5]
   1402c:	strd	r6, [r1]
   14030:	mov	r8, r0
   14034:	mov	sl, r1
   14038:	mov	r9, r2
   1403c:	str	r3, [sp, #52]	; 0x34
   14040:	bl	11500 <__errno_location@plt>
   14044:	cmp	r8, #0
   14048:	mov	r4, r0
   1404c:	beq	14224 <__assert_fail@plt+0x2b98>
   14050:	ldrsb	fp, [r8]
   14054:	cmp	fp, #0
   14058:	beq	14224 <__assert_fail@plt+0x2b98>
   1405c:	bl	114ac <__ctype_b_loc@plt>
   14060:	mov	r2, r8
   14064:	ldr	r1, [r0]
   14068:	b	14070 <__assert_fail@plt+0x29e4>
   1406c:	ldrsb	fp, [r2, #1]!
   14070:	uxtb	r3, fp
   14074:	lsl	r3, r3, #1
   14078:	ldrh	ip, [r1, r3]
   1407c:	ands	ip, ip, #8192	; 0x2000
   14080:	bne	1406c <__assert_fail@plt+0x29e0>
   14084:	cmp	fp, #45	; 0x2d
   14088:	beq	14224 <__assert_fail@plt+0x2b98>
   1408c:	mov	r3, ip
   14090:	mov	r2, ip
   14094:	str	ip, [r4]
   14098:	add	r1, sp, #48	; 0x30
   1409c:	mov	r0, r8
   140a0:	str	ip, [sp, #48]	; 0x30
   140a4:	bl	1138c <__strtoull_internal@plt>
   140a8:	ldr	fp, [sp, #48]	; 0x30
   140ac:	cmp	fp, r8
   140b0:	mov	r2, r0
   140b4:	mov	r3, r1
   140b8:	ldr	r0, [r4]
   140bc:	strd	r2, [sp, #16]
   140c0:	beq	143a8 <__assert_fail@plt+0x2d1c>
   140c4:	cmp	r0, #0
   140c8:	bne	14248 <__assert_fail@plt+0x2bbc>
   140cc:	cmp	fp, #0
   140d0:	beq	143dc <__assert_fail@plt+0x2d50>
   140d4:	ldrsb	r0, [fp]
   140d8:	cmp	r0, #0
   140dc:	beq	143d0 <__assert_fail@plt+0x2d44>
   140e0:	mov	r8, #0
   140e4:	mov	r2, #0
   140e8:	mov	r3, #0
   140ec:	str	sl, [sp, #24]
   140f0:	str	r9, [sp, #36]	; 0x24
   140f4:	mov	r7, r8
   140f8:	mov	r9, fp
   140fc:	mov	sl, r2
   14100:	mov	fp, r3
   14104:	ldrsb	r2, [r9, #1]
   14108:	cmp	r2, #105	; 0x69
   1410c:	beq	14298 <__assert_fail@plt+0x2c0c>
   14110:	bic	r1, r2, #32
   14114:	cmp	r1, #66	; 0x42
   14118:	bne	143b4 <__assert_fail@plt+0x2d28>
   1411c:	ldrsb	r2, [r9, #2]
   14120:	cmp	r2, #0
   14124:	beq	145a0 <__assert_fail@plt+0x2f14>
   14128:	bl	115b4 <localeconv@plt>
   1412c:	cmp	r0, #0
   14130:	beq	14224 <__assert_fail@plt+0x2b98>
   14134:	ldr	r2, [r0]
   14138:	cmp	r2, #0
   1413c:	beq	14224 <__assert_fail@plt+0x2b98>
   14140:	mov	r0, r2
   14144:	str	r2, [sp]
   14148:	bl	114dc <strlen@plt>
   1414c:	orrs	r3, sl, fp
   14150:	mov	r6, r0
   14154:	bne	14224 <__assert_fail@plt+0x2b98>
   14158:	ldrsb	r1, [r9]
   1415c:	cmp	r1, #0
   14160:	beq	14224 <__assert_fail@plt+0x2b98>
   14164:	ldr	r2, [sp]
   14168:	mov	r1, r9
   1416c:	mov	r0, r2
   14170:	mov	r2, r6
   14174:	bl	11638 <strncmp@plt>
   14178:	cmp	r0, #0
   1417c:	bne	14224 <__assert_fail@plt+0x2b98>
   14180:	ldrsb	r2, [r9, r6]
   14184:	add	r6, r9, r6
   14188:	cmp	r2, #48	; 0x30
   1418c:	bne	141ac <__assert_fail@plt+0x2b20>
   14190:	add	r8, r8, #1
   14194:	sub	r1, r8, r6
   14198:	mov	r3, r6
   1419c:	add	r8, r3, r1
   141a0:	ldrsb	r2, [r3, #1]!
   141a4:	cmp	r2, #48	; 0x30
   141a8:	beq	1419c <__assert_fail@plt+0x2b10>
   141ac:	mov	r3, #0
   141b0:	str	r7, [r4]
   141b4:	mov	r2, r3
   141b8:	add	r1, sp, #48	; 0x30
   141bc:	mov	r0, r6
   141c0:	str	r7, [sp, #48]	; 0x30
   141c4:	bl	1138c <__strtoull_internal@plt>
   141c8:	ldr	r9, [sp, #48]	; 0x30
   141cc:	cmp	r9, r6
   141d0:	mov	sl, r0
   141d4:	mov	fp, r1
   141d8:	beq	143a4 <__assert_fail@plt+0x2d18>
   141dc:	ldr	ip, [r4]
   141e0:	cmp	ip, #0
   141e4:	beq	14284 <__assert_fail@plt+0x2bf8>
   141e8:	subs	r3, r0, #1
   141ec:	str	r3, [sp, #8]
   141f0:	sbc	r3, r1, #0
   141f4:	str	r3, [sp, #12]
   141f8:	ldrd	r2, [sp, #8]
   141fc:	mvn	r1, #0
   14200:	mvn	r0, #2
   14204:	cmp	r3, r1
   14208:	cmpeq	r2, r0
   1420c:	bhi	145d8 <__assert_fail@plt+0x2f4c>
   14210:	cmp	r9, #0
   14214:	beq	14224 <__assert_fail@plt+0x2b98>
   14218:	ldrsb	r2, [r9]
   1421c:	cmp	r2, #0
   14220:	bne	14104 <__assert_fail@plt+0x2a78>
   14224:	mov	r3, #22
   14228:	mvn	r0, #21
   1422c:	str	r3, [r4]
   14230:	ldr	r2, [sp, #52]	; 0x34
   14234:	ldr	r3, [r5]
   14238:	cmp	r2, r3
   1423c:	bne	14678 <__assert_fail@plt+0x2fec>
   14240:	add	sp, sp, #60	; 0x3c
   14244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14248:	subs	r1, r2, #1
   1424c:	sbc	r3, r3, #0
   14250:	str	r3, [sp, #4]
   14254:	str	r1, [sp]
   14258:	ldrd	r6, [sp]
   1425c:	mvn	r3, #0
   14260:	mvn	r2, #2
   14264:	cmp	r7, r3
   14268:	cmpeq	r6, r2
   1426c:	bls	140cc <__assert_fail@plt+0x2a40>
   14270:	rsb	r0, r0, #0
   14274:	cmp	r0, #0
   14278:	bge	14230 <__assert_fail@plt+0x2ba4>
   1427c:	rsb	r3, r0, #0
   14280:	b	1422c <__assert_fail@plt+0x2ba0>
   14284:	orrs	r3, sl, fp
   14288:	bne	14210 <__assert_fail@plt+0x2b84>
   1428c:	ldrsb	r2, [r9, #1]
   14290:	cmp	r2, #105	; 0x69
   14294:	bne	14110 <__assert_fail@plt+0x2a84>
   14298:	ldrsb	r2, [r9, #2]
   1429c:	bic	r2, r2, #32
   142a0:	cmp	r2, #66	; 0x42
   142a4:	bne	14128 <__assert_fail@plt+0x2a9c>
   142a8:	ldrsb	r2, [r9, #3]
   142ac:	cmp	r2, #0
   142b0:	bne	14128 <__assert_fail@plt+0x2a9c>
   142b4:	strd	sl, [sp]
   142b8:	mov	fp, r9
   142bc:	ldr	sl, [sp, #24]
   142c0:	ldr	r9, [sp, #36]	; 0x24
   142c4:	mov	r3, #1024	; 0x400
   142c8:	str	r3, [sp, #8]
   142cc:	ldrsb	r7, [fp]
   142d0:	ldr	r6, [pc, #936]	; 14680 <__assert_fail@plt+0x2ff4>
   142d4:	mov	r1, r7
   142d8:	mov	r0, r6
   142dc:	bl	114e8 <strchr@plt>
   142e0:	cmp	r0, #0
   142e4:	beq	145bc <__assert_fail@plt+0x2f30>
   142e8:	sub	ip, r0, r6
   142ec:	add	fp, ip, #1
   142f0:	cmp	fp, #0
   142f4:	beq	143c0 <__assert_fail@plt+0x2d34>
   142f8:	ldr	r6, [sp, #8]
   142fc:	ldr	r3, [sp, #20]
   14300:	mov	r0, #0
   14304:	asr	r7, r6, #31
   14308:	cmp	r3, #0
   1430c:	strd	r6, [sp, #24]
   14310:	mov	r1, #0
   14314:	bne	14614 <__assert_fail@plt+0x2f88>
   14318:	orrs	r3, r0, r1
   1431c:	bne	14404 <__assert_fail@plt+0x2d78>
   14320:	str	r4, [sp, #44]	; 0x2c
   14324:	sub	ip, ip, #1
   14328:	str	fp, [sp, #36]	; 0x24
   1432c:	str	r8, [sp, #40]	; 0x28
   14330:	ldrd	r2, [sp, #16]
   14334:	ldrd	r6, [sp, #24]
   14338:	mov	r4, sl
   1433c:	mov	lr, r9
   14340:	b	14350 <__assert_fail@plt+0x2cc4>
   14344:	orrs	r1, r0, r1
   14348:	sub	ip, ip, #1
   1434c:	bne	143ec <__assert_fail@plt+0x2d60>
   14350:	mul	sl, r2, r7
   14354:	cmn	ip, #1
   14358:	mla	sl, r6, r3, sl
   1435c:	umull	r2, r3, r2, r6
   14360:	add	sl, sl, r3
   14364:	mov	r3, sl
   14368:	beq	14580 <__assert_fail@plt+0x2ef4>
   1436c:	cmp	sl, #0
   14370:	mov	r0, #0
   14374:	mov	r1, #0
   14378:	beq	14344 <__assert_fail@plt+0x2cb8>
   1437c:	umull	r8, r9, r2, r6
   14380:	umull	sl, fp, r6, sl
   14384:	mov	r8, r9
   14388:	adds	r8, sl, r8
   1438c:	mov	r8, #0
   14390:	adc	r8, fp, r8
   14394:	cmp	r8, #0
   14398:	movne	r0, #1
   1439c:	movne	r1, #0
   143a0:	b	14344 <__assert_fail@plt+0x2cb8>
   143a4:	ldr	r0, [r4]
   143a8:	cmp	r0, #0
   143ac:	beq	14224 <__assert_fail@plt+0x2b98>
   143b0:	b	14270 <__assert_fail@plt+0x2be4>
   143b4:	cmp	r2, #0
   143b8:	bne	14128 <__assert_fail@plt+0x2a9c>
   143bc:	b	142b4 <__assert_fail@plt+0x2c28>
   143c0:	cmp	r9, #0
   143c4:	movne	r0, fp
   143c8:	bne	14410 <__assert_fail@plt+0x2d84>
   143cc:	mov	r0, r9
   143d0:	ldrd	r2, [sp, #16]
   143d4:	strd	r2, [sl]
   143d8:	b	14230 <__assert_fail@plt+0x2ba4>
   143dc:	ldrd	r2, [sp, #16]
   143e0:	mov	r0, fp
   143e4:	strd	r2, [sl]
   143e8:	b	14230 <__assert_fail@plt+0x2ba4>
   143ec:	mov	sl, r4
   143f0:	ldr	fp, [sp, #36]	; 0x24
   143f4:	ldr	r8, [sp, #40]	; 0x28
   143f8:	ldr	r4, [sp, #44]	; 0x2c
   143fc:	mov	r9, lr
   14400:	strd	r2, [sp, #16]
   14404:	mvn	r0, #33	; 0x21
   14408:	cmp	r9, #0
   1440c:	beq	14414 <__assert_fail@plt+0x2d88>
   14410:	str	fp, [r9]
   14414:	ldrd	r2, [sp]
   14418:	mov	r1, r2
   1441c:	orrs	r3, r1, r3
   14420:	movne	r3, #1
   14424:	moveq	r3, #0
   14428:	cmp	fp, #0
   1442c:	moveq	r3, #0
   14430:	cmp	r3, #0
   14434:	beq	14574 <__assert_fail@plt+0x2ee8>
   14438:	ldr	r3, [pc, #580]	; 14684 <__assert_fail@plt+0x2ff8>
   1443c:	ldr	r1, [pc, #580]	; 14688 <__assert_fail@plt+0x2ffc>
   14440:	umull	ip, r3, r3, r8
   14444:	smull	ip, r1, r1, r8
   14448:	lsr	r3, r3, #1
   1444c:	rsb	r1, r1, r8, asr #31
   14450:	add	r3, r3, r3, lsl #1
   14454:	add	r1, r1, fp
   14458:	subs	r3, r8, r3
   1445c:	sub	r6, r1, #1
   14460:	bne	145e0 <__assert_fail@plt+0x2f54>
   14464:	ldrd	r8, [sp]
   14468:	adds	r3, r8, r8
   1446c:	adc	r2, r9, r9
   14470:	adds	r3, r3, r8
   14474:	adc	r2, r2, r9
   14478:	lsl	ip, r3, #5
   1447c:	lsl	lr, r2, #5
   14480:	orr	lr, lr, r3, lsr #27
   14484:	adds	r3, r3, ip
   14488:	adc	r2, r2, lr
   1448c:	adds	r3, r8, r3
   14490:	str	r3, [sp]
   14494:	ldr	r3, [sp, #4]
   14498:	adc	r3, r3, r2
   1449c:	str	r3, [sp, #4]
   144a0:	cmp	r6, #0
   144a4:	blt	14224 <__assert_fail@plt+0x2b98>
   144a8:	beq	14558 <__assert_fail@plt+0x2ecc>
   144ac:	ldr	r3, [sp, #4]
   144b0:	ldr	r8, [sp, #8]
   144b4:	cmp	r3, #0
   144b8:	mov	r6, #0
   144bc:	asr	r9, r8, #31
   144c0:	mov	r7, #0
   144c4:	bne	14648 <__assert_fail@plt+0x2fbc>
   144c8:	orrs	r3, r6, r7
   144cc:	bne	14558 <__assert_fail@plt+0x2ecc>
   144d0:	sub	r1, r1, #3
   144d4:	ldrd	r2, [sp]
   144d8:	str	r4, [sp, #8]
   144dc:	mov	ip, sl
   144e0:	str	r5, [sp, #24]
   144e4:	b	144f4 <__assert_fail@plt+0x2e68>
   144e8:	orrs	lr, r6, r7
   144ec:	sub	r1, r1, #1
   144f0:	bne	14548 <__assert_fail@plt+0x2ebc>
   144f4:	mul	lr, r2, r9
   144f8:	cmn	r1, #1
   144fc:	mla	lr, r8, r3, lr
   14500:	umull	r2, r3, r2, r8
   14504:	add	lr, lr, r3
   14508:	mov	r3, lr
   1450c:	beq	14548 <__assert_fail@plt+0x2ebc>
   14510:	cmp	lr, #0
   14514:	mov	r6, #0
   14518:	mov	r7, #0
   1451c:	beq	144e8 <__assert_fail@plt+0x2e5c>
   14520:	umull	sl, fp, r2, r8
   14524:	umull	r4, r5, r8, lr
   14528:	mov	lr, fp
   1452c:	adds	lr, r4, lr
   14530:	mov	lr, #0
   14534:	adc	lr, r5, lr
   14538:	cmp	lr, #0
   1453c:	movne	r6, #1
   14540:	movne	r7, #0
   14544:	b	144e8 <__assert_fail@plt+0x2e5c>
   14548:	ldr	r4, [sp, #8]
   1454c:	ldr	r5, [sp, #24]
   14550:	mov	sl, ip
   14554:	strd	r2, [sp]
   14558:	ldrd	r2, [sp]
   1455c:	ldr	r1, [sp, #16]
   14560:	adds	r1, r1, r2
   14564:	str	r1, [sp, #16]
   14568:	ldr	r1, [sp, #20]
   1456c:	adc	r3, r1, r3
   14570:	str	r3, [sp, #20]
   14574:	ldrd	r2, [sp, #16]
   14578:	strd	r2, [sl]
   1457c:	b	14274 <__assert_fail@plt+0x2be8>
   14580:	mov	sl, r4
   14584:	ldr	fp, [sp, #36]	; 0x24
   14588:	ldr	r8, [sp, #40]	; 0x28
   1458c:	strd	r2, [sp, #16]
   14590:	ldr	r4, [sp, #44]	; 0x2c
   14594:	mov	r9, lr
   14598:	mov	r0, #0
   1459c:	b	14408 <__assert_fail@plt+0x2d7c>
   145a0:	mov	r3, #1000	; 0x3e8
   145a4:	strd	sl, [sp]
   145a8:	str	r3, [sp, #8]
   145ac:	mov	fp, r9
   145b0:	ldr	sl, [sp, #24]
   145b4:	ldr	r9, [sp, #36]	; 0x24
   145b8:	b	142cc <__assert_fail@plt+0x2c40>
   145bc:	ldr	r6, [pc, #200]	; 1468c <__assert_fail@plt+0x3000>
   145c0:	mov	r1, r7
   145c4:	mov	r0, r6
   145c8:	bl	114e8 <strchr@plt>
   145cc:	cmp	r0, #0
   145d0:	bne	142e8 <__assert_fail@plt+0x2c5c>
   145d4:	b	14224 <__assert_fail@plt+0x2b98>
   145d8:	mov	r0, ip
   145dc:	b	14270 <__assert_fail@plt+0x2be4>
   145e0:	cmp	r3, #1
   145e4:	bne	144a0 <__assert_fail@plt+0x2e14>
   145e8:	ldrd	r8, [sp]
   145ec:	lsl	r2, r9, #2
   145f0:	lsl	r3, r8, #2
   145f4:	adds	r3, r3, r8
   145f8:	orr	r2, r2, r8, lsr #30
   145fc:	adc	r2, r2, r9
   14600:	adds	r3, r3, r3
   14604:	str	r3, [sp]
   14608:	adc	r3, r2, r2
   1460c:	str	r3, [sp, #4]
   14610:	b	144a0 <__assert_fail@plt+0x2e14>
   14614:	ldr	lr, [sp, #8]
   14618:	ldr	r3, [sp, #16]
   1461c:	umull	r2, r3, r3, lr
   14620:	mov	r6, r3
   14624:	mov	r2, r6
   14628:	ldr	r6, [sp, #20]
   1462c:	mov	r3, #0
   14630:	mov	r7, r3
   14634:	umlal	r2, r3, r6, lr
   14638:	cmp	r3, r7
   1463c:	movne	r0, #1
   14640:	movne	r1, #0
   14644:	b	14318 <__assert_fail@plt+0x2c8c>
   14648:	ldr	ip, [sp, #8]
   1464c:	ldr	r3, [sp]
   14650:	ldr	lr, [sp, #4]
   14654:	umull	r2, r3, r3, ip
   14658:	strd	r2, [sp, #8]
   1465c:	ldr	r2, [sp, #12]
   14660:	mov	r3, #0
   14664:	umlal	r2, r3, lr, ip
   14668:	cmp	r3, #0
   1466c:	movne	r6, #1
   14670:	movne	r7, #0
   14674:	b	144c8 <__assert_fail@plt+0x2e3c>
   14678:	bl	113c8 <__stack_chk_fail@plt>
   1467c:	andeq	r7, r2, r0, lsr #27
   14680:	andeq	r7, r1, r0, lsr #15
   14684:	bge	feabf138 <__bss_end__@@Base+0xfea96f50>
   14688:	ldrbpl	r5, [r5, #-1366]	; 0xfffffaaa
   1468c:	andeq	r7, r1, ip, lsr #15
   14690:	mov	r2, #0
   14694:	b	14014 <__assert_fail@plt+0x2988>
   14698:	push	{r4, r5, r6, lr}
   1469c:	subs	r5, r0, #0
   146a0:	mov	r6, r1
   146a4:	beq	14710 <__assert_fail@plt+0x3084>
   146a8:	ldrsb	r4, [r5]
   146ac:	cmp	r4, #0
   146b0:	beq	14724 <__assert_fail@plt+0x3098>
   146b4:	bl	114ac <__ctype_b_loc@plt>
   146b8:	mov	r3, r5
   146bc:	ldr	r0, [r0]
   146c0:	b	146d8 <__assert_fail@plt+0x304c>
   146c4:	adds	r3, r3, #1
   146c8:	beq	14710 <__assert_fail@plt+0x3084>
   146cc:	ldrsb	r4, [r3]
   146d0:	cmp	r4, #0
   146d4:	beq	146ec <__assert_fail@plt+0x3060>
   146d8:	uxtb	r4, r4
   146dc:	lsl	r4, r4, #1
   146e0:	ldrh	r2, [r0, r4]
   146e4:	tst	r2, #2048	; 0x800
   146e8:	bne	146c4 <__assert_fail@plt+0x3038>
   146ec:	cmp	r6, #0
   146f0:	strne	r3, [r6]
   146f4:	cmp	r5, r3
   146f8:	bcs	1471c <__assert_fail@plt+0x3090>
   146fc:	ldrsb	r3, [r3]
   14700:	cmp	r3, #0
   14704:	bne	1471c <__assert_fail@plt+0x3090>
   14708:	mov	r0, #1
   1470c:	pop	{r4, r5, r6, pc}
   14710:	cmp	r6, #0
   14714:	movne	r3, #0
   14718:	strne	r3, [r6]
   1471c:	mov	r0, #0
   14720:	pop	{r4, r5, r6, pc}
   14724:	cmp	r1, #0
   14728:	strne	r5, [r1]
   1472c:	b	1471c <__assert_fail@plt+0x3090>
   14730:	push	{r4, r5, r6, lr}
   14734:	subs	r5, r0, #0
   14738:	mov	r6, r1
   1473c:	beq	147a8 <__assert_fail@plt+0x311c>
   14740:	ldrsb	r4, [r5]
   14744:	cmp	r4, #0
   14748:	beq	147bc <__assert_fail@plt+0x3130>
   1474c:	bl	114ac <__ctype_b_loc@plt>
   14750:	mov	r3, r5
   14754:	ldr	r0, [r0]
   14758:	b	14770 <__assert_fail@plt+0x30e4>
   1475c:	adds	r3, r3, #1
   14760:	beq	147a8 <__assert_fail@plt+0x311c>
   14764:	ldrsb	r4, [r3]
   14768:	cmp	r4, #0
   1476c:	beq	14784 <__assert_fail@plt+0x30f8>
   14770:	uxtb	r4, r4
   14774:	lsl	r4, r4, #1
   14778:	ldrh	r2, [r0, r4]
   1477c:	tst	r2, #4096	; 0x1000
   14780:	bne	1475c <__assert_fail@plt+0x30d0>
   14784:	cmp	r6, #0
   14788:	strne	r3, [r6]
   1478c:	cmp	r5, r3
   14790:	bcs	147b4 <__assert_fail@plt+0x3128>
   14794:	ldrsb	r3, [r3]
   14798:	cmp	r3, #0
   1479c:	bne	147b4 <__assert_fail@plt+0x3128>
   147a0:	mov	r0, #1
   147a4:	pop	{r4, r5, r6, pc}
   147a8:	cmp	r6, #0
   147ac:	movne	r3, #0
   147b0:	strne	r3, [r6]
   147b4:	mov	r0, #0
   147b8:	pop	{r4, r5, r6, pc}
   147bc:	cmp	r1, #0
   147c0:	strne	r5, [r1]
   147c4:	b	147b4 <__assert_fail@plt+0x3128>
   147c8:	push	{r1, r2, r3}
   147cc:	push	{r4, r5, r6, r7, r8, lr}
   147d0:	sub	sp, sp, #12
   147d4:	ldr	r7, [pc, #160]	; 1487c <__assert_fail@plt+0x31f0>
   147d8:	ldr	r8, [sp, #36]	; 0x24
   147dc:	mov	r6, r0
   147e0:	ldr	r3, [r7]
   147e4:	add	r4, sp, #48	; 0x30
   147e8:	str	r3, [sp, #4]
   147ec:	b	14808 <__assert_fail@plt+0x317c>
   147f0:	mov	r1, r5
   147f4:	mov	r0, r6
   147f8:	bl	112fc <strcmp@plt>
   147fc:	add	r4, r4, #8
   14800:	cmp	r0, #0
   14804:	beq	14840 <__assert_fail@plt+0x31b4>
   14808:	ldr	r1, [r4, #-8]
   1480c:	sub	r3, r4, #4
   14810:	cmp	r1, #0
   14814:	str	r3, [sp]
   14818:	beq	14860 <__assert_fail@plt+0x31d4>
   1481c:	ldr	r5, [r4, #-4]
   14820:	str	r4, [sp]
   14824:	cmp	r5, #0
   14828:	beq	14860 <__assert_fail@plt+0x31d4>
   1482c:	mov	r0, r6
   14830:	bl	112fc <strcmp@plt>
   14834:	cmp	r0, #0
   14838:	bne	147f0 <__assert_fail@plt+0x3164>
   1483c:	mov	r0, #1
   14840:	ldr	r2, [sp, #4]
   14844:	ldr	r3, [r7]
   14848:	cmp	r2, r3
   1484c:	bne	14878 <__assert_fail@plt+0x31ec>
   14850:	add	sp, sp, #12
   14854:	pop	{r4, r5, r6, r7, r8, lr}
   14858:	add	sp, sp, #12
   1485c:	bx	lr
   14860:	ldr	r1, [pc, #24]	; 14880 <__assert_fail@plt+0x31f4>
   14864:	mov	r3, r6
   14868:	mov	r2, r8
   1486c:	ldr	r0, [r1]
   14870:	ldr	r1, [pc, #12]	; 14884 <__assert_fail@plt+0x31f8>
   14874:	bl	11590 <errx@plt>
   14878:	bl	113c8 <__stack_chk_fail@plt>
   1487c:	andeq	r7, r2, r0, lsr #27
   14880:	andeq	r8, r2, r8, lsr #2
   14884:	muleq	r1, r4, r7
   14888:	cmp	r1, #0
   1488c:	beq	148d8 <__assert_fail@plt+0x324c>
   14890:	ldrsb	r3, [r0]
   14894:	cmp	r3, #0
   14898:	beq	148d8 <__assert_fail@plt+0x324c>
   1489c:	sxtb	r2, r2
   148a0:	cmp	r3, r2
   148a4:	bxeq	lr
   148a8:	add	r1, r0, r1
   148ac:	add	r3, r0, #1
   148b0:	b	148cc <__assert_fail@plt+0x3240>
   148b4:	ldrsb	ip, [r3]
   148b8:	add	r3, r3, #1
   148bc:	cmp	ip, #0
   148c0:	beq	148d8 <__assert_fail@plt+0x324c>
   148c4:	cmp	ip, r2
   148c8:	bxeq	lr
   148cc:	cmp	r3, r1
   148d0:	mov	r0, r3
   148d4:	bne	148b4 <__assert_fail@plt+0x3228>
   148d8:	mov	r0, #0
   148dc:	bx	lr
   148e0:	push	{r4, r5, r6, lr}
   148e4:	mov	r2, #10
   148e8:	mov	r4, r0
   148ec:	mov	r5, r1
   148f0:	bl	13fd4 <__assert_fail@plt+0x2948>
   148f4:	cmp	r0, #65536	; 0x10000
   148f8:	bcs	14904 <__assert_fail@plt+0x3278>
   148fc:	uxth	r0, r0
   14900:	pop	{r4, r5, r6, pc}
   14904:	mov	r1, r5
   14908:	mov	r0, r4
   1490c:	bl	13f9c <__assert_fail@plt+0x2910>
   14910:	push	{r4, r5, r6, lr}
   14914:	mov	r2, #16
   14918:	mov	r4, r0
   1491c:	mov	r5, r1
   14920:	bl	13fd4 <__assert_fail@plt+0x2948>
   14924:	cmp	r0, #65536	; 0x10000
   14928:	bcs	14934 <__assert_fail@plt+0x32a8>
   1492c:	uxth	r0, r0
   14930:	pop	{r4, r5, r6, pc}
   14934:	mov	r1, r5
   14938:	mov	r0, r4
   1493c:	bl	13f9c <__assert_fail@plt+0x2910>
   14940:	mov	r2, #10
   14944:	b	13fd4 <__assert_fail@plt+0x2948>
   14948:	mov	r2, #16
   1494c:	b	13fd4 <__assert_fail@plt+0x2948>
   14950:	push	{r4, r5, r6, r7, r8, lr}
   14954:	sub	sp, sp, #8
   14958:	ldr	r7, [pc, #200]	; 14a28 <__assert_fail@plt+0x339c>
   1495c:	mov	r5, #0
   14960:	mov	r4, r0
   14964:	ldr	r3, [r7]
   14968:	mov	r8, r1
   1496c:	str	r3, [sp, #4]
   14970:	str	r5, [sp]
   14974:	bl	11500 <__errno_location@plt>
   14978:	cmp	r4, r5
   1497c:	str	r5, [r0]
   14980:	beq	14990 <__assert_fail@plt+0x3304>
   14984:	ldrsb	r3, [r4]
   14988:	cmp	r3, #0
   1498c:	bne	149a8 <__assert_fail@plt+0x331c>
   14990:	ldr	r1, [pc, #148]	; 14a2c <__assert_fail@plt+0x33a0>
   14994:	ldr	r0, [r1]
   14998:	mov	r3, r4
   1499c:	mov	r2, r8
   149a0:	ldr	r1, [pc, #136]	; 14a30 <__assert_fail@plt+0x33a4>
   149a4:	bl	11590 <errx@plt>
   149a8:	mov	r6, r0
   149ac:	mov	r3, r5
   149b0:	mov	r2, #10
   149b4:	mov	r1, sp
   149b8:	mov	r0, r4
   149bc:	bl	115d8 <__strtoll_internal@plt>
   149c0:	ldr	r3, [r6]
   149c4:	cmp	r3, #0
   149c8:	bne	14a04 <__assert_fail@plt+0x3378>
   149cc:	ldr	r3, [sp]
   149d0:	cmp	r3, r4
   149d4:	beq	14990 <__assert_fail@plt+0x3304>
   149d8:	cmp	r3, #0
   149dc:	beq	149ec <__assert_fail@plt+0x3360>
   149e0:	ldrsb	r3, [r3]
   149e4:	cmp	r3, #0
   149e8:	bne	14990 <__assert_fail@plt+0x3304>
   149ec:	ldr	r2, [sp, #4]
   149f0:	ldr	r3, [r7]
   149f4:	cmp	r2, r3
   149f8:	bne	14a24 <__assert_fail@plt+0x3398>
   149fc:	add	sp, sp, #8
   14a00:	pop	{r4, r5, r6, r7, r8, pc}
   14a04:	ldr	r1, [pc, #32]	; 14a2c <__assert_fail@plt+0x33a0>
   14a08:	cmp	r3, #34	; 0x22
   14a0c:	ldr	r0, [r1]
   14a10:	bne	14994 <__assert_fail@plt+0x3308>
   14a14:	mov	r3, r4
   14a18:	mov	r2, r8
   14a1c:	ldr	r1, [pc, #12]	; 14a30 <__assert_fail@plt+0x33a4>
   14a20:	bl	11404 <err@plt>
   14a24:	bl	113c8 <__stack_chk_fail@plt>
   14a28:	andeq	r7, r2, r0, lsr #27
   14a2c:	andeq	r8, r2, r8, lsr #2
   14a30:	muleq	r1, r4, r7
   14a34:	push	{r4, r5, r6, r7, r8, lr}
   14a38:	mov	r6, r0
   14a3c:	mov	r7, r1
   14a40:	bl	14950 <__assert_fail@plt+0x32c4>
   14a44:	mov	r3, #0
   14a48:	mvn	r2, #0
   14a4c:	adds	r4, r0, #-2147483648	; 0x80000000
   14a50:	adc	r5, r1, #0
   14a54:	cmp	r5, r3
   14a58:	cmpeq	r4, r2
   14a5c:	popls	{r4, r5, r6, r7, r8, pc}
   14a60:	mov	r1, r7
   14a64:	mov	r0, r6
   14a68:	bl	13f9c <__assert_fail@plt+0x2910>
   14a6c:	push	{r4, r5, r6, lr}
   14a70:	mov	r5, r0
   14a74:	mov	r4, r1
   14a78:	bl	14a34 <__assert_fail@plt+0x33a8>
   14a7c:	add	r3, r0, #32768	; 0x8000
   14a80:	cmp	r3, #65536	; 0x10000
   14a84:	bcs	14a90 <__assert_fail@plt+0x3404>
   14a88:	sxth	r0, r0
   14a8c:	pop	{r4, r5, r6, pc}
   14a90:	bl	11500 <__errno_location@plt>
   14a94:	ldr	ip, [pc, #24]	; 14ab4 <__assert_fail@plt+0x3428>
   14a98:	mov	lr, #34	; 0x22
   14a9c:	mov	r3, r5
   14aa0:	mov	r2, r4
   14aa4:	ldr	r1, [pc, #12]	; 14ab8 <__assert_fail@plt+0x342c>
   14aa8:	str	lr, [r0]
   14aac:	ldr	r0, [ip]
   14ab0:	bl	11404 <err@plt>
   14ab4:	andeq	r8, r2, r8, lsr #2
   14ab8:	muleq	r1, r4, r7
   14abc:	mov	r2, #10
   14ac0:	b	13eb4 <__assert_fail@plt+0x2828>
   14ac4:	mov	r2, #16
   14ac8:	b	13eb4 <__assert_fail@plt+0x2828>
   14acc:	push	{r4, r5, r6, r7, r8, lr}
   14ad0:	sub	sp, sp, #8
   14ad4:	ldr	r7, [pc, #192]	; 14b9c <__assert_fail@plt+0x3510>
   14ad8:	mov	r5, #0
   14adc:	mov	r4, r0
   14ae0:	ldr	r3, [r7]
   14ae4:	mov	r8, r1
   14ae8:	str	r3, [sp, #4]
   14aec:	str	r5, [sp]
   14af0:	bl	11500 <__errno_location@plt>
   14af4:	cmp	r4, r5
   14af8:	str	r5, [r0]
   14afc:	beq	14b0c <__assert_fail@plt+0x3480>
   14b00:	ldrsb	r3, [r4]
   14b04:	cmp	r3, #0
   14b08:	bne	14b24 <__assert_fail@plt+0x3498>
   14b0c:	ldr	r1, [pc, #140]	; 14ba0 <__assert_fail@plt+0x3514>
   14b10:	ldr	r0, [r1]
   14b14:	mov	r3, r4
   14b18:	mov	r2, r8
   14b1c:	ldr	r1, [pc, #128]	; 14ba4 <__assert_fail@plt+0x3518>
   14b20:	bl	11590 <errx@plt>
   14b24:	mov	r6, r0
   14b28:	mov	r1, sp
   14b2c:	mov	r0, r4
   14b30:	bl	11548 <strtod@plt>
   14b34:	ldr	r3, [r6]
   14b38:	cmp	r3, #0
   14b3c:	bne	14b78 <__assert_fail@plt+0x34ec>
   14b40:	ldr	r3, [sp]
   14b44:	cmp	r3, r4
   14b48:	beq	14b0c <__assert_fail@plt+0x3480>
   14b4c:	cmp	r3, #0
   14b50:	beq	14b60 <__assert_fail@plt+0x34d4>
   14b54:	ldrsb	r3, [r3]
   14b58:	cmp	r3, #0
   14b5c:	bne	14b0c <__assert_fail@plt+0x3480>
   14b60:	ldr	r2, [sp, #4]
   14b64:	ldr	r3, [r7]
   14b68:	cmp	r2, r3
   14b6c:	bne	14b98 <__assert_fail@plt+0x350c>
   14b70:	add	sp, sp, #8
   14b74:	pop	{r4, r5, r6, r7, r8, pc}
   14b78:	ldr	r1, [pc, #32]	; 14ba0 <__assert_fail@plt+0x3514>
   14b7c:	cmp	r3, #34	; 0x22
   14b80:	ldr	r0, [r1]
   14b84:	bne	14b10 <__assert_fail@plt+0x3484>
   14b88:	mov	r3, r4
   14b8c:	mov	r2, r8
   14b90:	ldr	r1, [pc, #12]	; 14ba4 <__assert_fail@plt+0x3518>
   14b94:	bl	11404 <err@plt>
   14b98:	bl	113c8 <__stack_chk_fail@plt>
   14b9c:	andeq	r7, r2, r0, lsr #27
   14ba0:	andeq	r8, r2, r8, lsr #2
   14ba4:	muleq	r1, r4, r7
   14ba8:	push	{r4, r5, r6, r7, r8, lr}
   14bac:	sub	sp, sp, #8
   14bb0:	ldr	r7, [pc, #196]	; 14c7c <__assert_fail@plt+0x35f0>
   14bb4:	mov	r5, #0
   14bb8:	mov	r4, r0
   14bbc:	ldr	r3, [r7]
   14bc0:	mov	r8, r1
   14bc4:	str	r3, [sp, #4]
   14bc8:	str	r5, [sp]
   14bcc:	bl	11500 <__errno_location@plt>
   14bd0:	cmp	r4, r5
   14bd4:	str	r5, [r0]
   14bd8:	beq	14be8 <__assert_fail@plt+0x355c>
   14bdc:	ldrsb	r3, [r4]
   14be0:	cmp	r3, #0
   14be4:	bne	14c00 <__assert_fail@plt+0x3574>
   14be8:	ldr	r1, [pc, #144]	; 14c80 <__assert_fail@plt+0x35f4>
   14bec:	ldr	r0, [r1]
   14bf0:	mov	r3, r4
   14bf4:	mov	r2, r8
   14bf8:	ldr	r1, [pc, #132]	; 14c84 <__assert_fail@plt+0x35f8>
   14bfc:	bl	11590 <errx@plt>
   14c00:	mov	r6, r0
   14c04:	mov	r2, #10
   14c08:	mov	r1, sp
   14c0c:	mov	r0, r4
   14c10:	bl	11314 <strtol@plt>
   14c14:	ldr	r3, [r6]
   14c18:	cmp	r3, #0
   14c1c:	bne	14c58 <__assert_fail@plt+0x35cc>
   14c20:	ldr	r3, [sp]
   14c24:	cmp	r3, r4
   14c28:	beq	14be8 <__assert_fail@plt+0x355c>
   14c2c:	cmp	r3, #0
   14c30:	beq	14c40 <__assert_fail@plt+0x35b4>
   14c34:	ldrsb	r3, [r3]
   14c38:	cmp	r3, #0
   14c3c:	bne	14be8 <__assert_fail@plt+0x355c>
   14c40:	ldr	r2, [sp, #4]
   14c44:	ldr	r3, [r7]
   14c48:	cmp	r2, r3
   14c4c:	bne	14c78 <__assert_fail@plt+0x35ec>
   14c50:	add	sp, sp, #8
   14c54:	pop	{r4, r5, r6, r7, r8, pc}
   14c58:	ldr	r1, [pc, #32]	; 14c80 <__assert_fail@plt+0x35f4>
   14c5c:	cmp	r3, #34	; 0x22
   14c60:	ldr	r0, [r1]
   14c64:	bne	14bec <__assert_fail@plt+0x3560>
   14c68:	mov	r3, r4
   14c6c:	mov	r2, r8
   14c70:	ldr	r1, [pc, #12]	; 14c84 <__assert_fail@plt+0x35f8>
   14c74:	bl	11404 <err@plt>
   14c78:	bl	113c8 <__stack_chk_fail@plt>
   14c7c:	andeq	r7, r2, r0, lsr #27
   14c80:	andeq	r8, r2, r8, lsr #2
   14c84:	muleq	r1, r4, r7
   14c88:	push	{r4, r5, r6, r7, r8, lr}
   14c8c:	sub	sp, sp, #8
   14c90:	ldr	r7, [pc, #196]	; 14d5c <__assert_fail@plt+0x36d0>
   14c94:	mov	r5, #0
   14c98:	mov	r4, r0
   14c9c:	ldr	r3, [r7]
   14ca0:	mov	r8, r1
   14ca4:	str	r3, [sp, #4]
   14ca8:	str	r5, [sp]
   14cac:	bl	11500 <__errno_location@plt>
   14cb0:	cmp	r4, r5
   14cb4:	str	r5, [r0]
   14cb8:	beq	14cc8 <__assert_fail@plt+0x363c>
   14cbc:	ldrsb	r3, [r4]
   14cc0:	cmp	r3, #0
   14cc4:	bne	14ce0 <__assert_fail@plt+0x3654>
   14cc8:	ldr	r1, [pc, #144]	; 14d60 <__assert_fail@plt+0x36d4>
   14ccc:	ldr	r0, [r1]
   14cd0:	mov	r3, r4
   14cd4:	mov	r2, r8
   14cd8:	ldr	r1, [pc, #132]	; 14d64 <__assert_fail@plt+0x36d8>
   14cdc:	bl	11590 <errx@plt>
   14ce0:	mov	r6, r0
   14ce4:	mov	r2, #10
   14ce8:	mov	r1, sp
   14cec:	mov	r0, r4
   14cf0:	bl	114d0 <strtoul@plt>
   14cf4:	ldr	r3, [r6]
   14cf8:	cmp	r3, #0
   14cfc:	bne	14d38 <__assert_fail@plt+0x36ac>
   14d00:	ldr	r3, [sp]
   14d04:	cmp	r3, r4
   14d08:	beq	14cc8 <__assert_fail@plt+0x363c>
   14d0c:	cmp	r3, #0
   14d10:	beq	14d20 <__assert_fail@plt+0x3694>
   14d14:	ldrsb	r3, [r3]
   14d18:	cmp	r3, #0
   14d1c:	bne	14cc8 <__assert_fail@plt+0x363c>
   14d20:	ldr	r2, [sp, #4]
   14d24:	ldr	r3, [r7]
   14d28:	cmp	r2, r3
   14d2c:	bne	14d58 <__assert_fail@plt+0x36cc>
   14d30:	add	sp, sp, #8
   14d34:	pop	{r4, r5, r6, r7, r8, pc}
   14d38:	ldr	r1, [pc, #32]	; 14d60 <__assert_fail@plt+0x36d4>
   14d3c:	cmp	r3, #34	; 0x22
   14d40:	ldr	r0, [r1]
   14d44:	bne	14ccc <__assert_fail@plt+0x3640>
   14d48:	mov	r3, r4
   14d4c:	mov	r2, r8
   14d50:	ldr	r1, [pc, #12]	; 14d64 <__assert_fail@plt+0x36d8>
   14d54:	bl	11404 <err@plt>
   14d58:	bl	113c8 <__stack_chk_fail@plt>
   14d5c:	andeq	r7, r2, r0, lsr #27
   14d60:	andeq	r8, r2, r8, lsr #2
   14d64:	muleq	r1, r4, r7
   14d68:	push	{r4, r5, r6, lr}
   14d6c:	sub	sp, sp, #16
   14d70:	ldr	r4, [pc, #112]	; 14de8 <__assert_fail@plt+0x375c>
   14d74:	mov	r5, r1
   14d78:	mov	r2, #0
   14d7c:	ldr	r3, [r4]
   14d80:	mov	r1, sp
   14d84:	str	r3, [sp, #12]
   14d88:	mov	r6, r0
   14d8c:	bl	14014 <__assert_fail@plt+0x2988>
   14d90:	cmp	r0, #0
   14d94:	beq	14dc8 <__assert_fail@plt+0x373c>
   14d98:	bl	11500 <__errno_location@plt>
   14d9c:	ldr	r3, [pc, #72]	; 14dec <__assert_fail@plt+0x3760>
   14da0:	mov	r2, r5
   14da4:	ldr	r1, [r3]
   14da8:	ldr	r3, [r0]
   14dac:	mov	r0, r1
   14db0:	cmp	r3, #0
   14db4:	ldr	r1, [pc, #52]	; 14df0 <__assert_fail@plt+0x3764>
   14db8:	mov	r3, r6
   14dbc:	beq	14dc4 <__assert_fail@plt+0x3738>
   14dc0:	bl	11404 <err@plt>
   14dc4:	bl	11590 <errx@plt>
   14dc8:	ldr	r2, [sp, #12]
   14dcc:	ldr	r3, [r4]
   14dd0:	ldrd	r0, [sp]
   14dd4:	cmp	r2, r3
   14dd8:	bne	14de4 <__assert_fail@plt+0x3758>
   14ddc:	add	sp, sp, #16
   14de0:	pop	{r4, r5, r6, pc}
   14de4:	bl	113c8 <__stack_chk_fail@plt>
   14de8:	andeq	r7, r2, r0, lsr #27
   14dec:	andeq	r8, r2, r8, lsr #2
   14df0:	muleq	r1, r4, r7
   14df4:	push	{r4, lr}
   14df8:	mov	r4, r1
   14dfc:	mov	r1, r2
   14e00:	bl	14acc <__assert_fail@plt+0x3440>
   14e04:	vldr	d6, [pc, #28]	; 14e28 <__assert_fail@plt+0x379c>
   14e08:	vcvt.s32.f64	s15, d0
   14e0c:	vcvt.f64.s32	d5, s15
   14e10:	vstr	s15, [r4]
   14e14:	vsub.f64	d0, d0, d5
   14e18:	vmul.f64	d0, d0, d6
   14e1c:	vcvt.s32.f64	s0, d0
   14e20:	vstr	s0, [r4, #4]
   14e24:	pop	{r4, pc}
   14e28:	andeq	r0, r0, r0
   14e2c:	smlawbmi	lr, r0, r4, r8
   14e30:	and	r2, r0, #61440	; 0xf000
   14e34:	cmp	r2, #16384	; 0x4000
   14e38:	moveq	r2, r1
   14e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e40:	moveq	sl, #100	; 0x64
   14e44:	mov	r3, r0
   14e48:	add	r9, r1, #1
   14e4c:	add	r8, r1, #2
   14e50:	add	r7, r1, #3
   14e54:	add	r6, r1, #4
   14e58:	add	r5, r1, #5
   14e5c:	add	r4, r1, #6
   14e60:	add	lr, r1, #7
   14e64:	add	ip, r1, #8
   14e68:	add	r0, r1, #9
   14e6c:	strbeq	sl, [r2], #10
   14e70:	beq	14f14 <__assert_fail@plt+0x3888>
   14e74:	cmp	r2, #40960	; 0xa000
   14e78:	moveq	r2, r1
   14e7c:	moveq	sl, #108	; 0x6c
   14e80:	strbeq	sl, [r2], #10
   14e84:	beq	14f14 <__assert_fail@plt+0x3888>
   14e88:	cmp	r2, #8192	; 0x2000
   14e8c:	moveq	r2, r1
   14e90:	moveq	sl, #99	; 0x63
   14e94:	strbeq	sl, [r2], #10
   14e98:	beq	14f14 <__assert_fail@plt+0x3888>
   14e9c:	cmp	r2, #24576	; 0x6000
   14ea0:	moveq	r2, r1
   14ea4:	moveq	sl, #98	; 0x62
   14ea8:	strbeq	sl, [r2], #10
   14eac:	beq	14f14 <__assert_fail@plt+0x3888>
   14eb0:	cmp	r2, #49152	; 0xc000
   14eb4:	moveq	r2, r1
   14eb8:	moveq	sl, #115	; 0x73
   14ebc:	strbeq	sl, [r2], #10
   14ec0:	beq	14f14 <__assert_fail@plt+0x3888>
   14ec4:	cmp	r2, #4096	; 0x1000
   14ec8:	moveq	r2, r1
   14ecc:	moveq	sl, #112	; 0x70
   14ed0:	strbeq	sl, [r2], #10
   14ed4:	beq	14f14 <__assert_fail@plt+0x3888>
   14ed8:	cmp	r2, #32768	; 0x8000
   14edc:	moveq	r2, r1
   14ee0:	moveq	sl, #45	; 0x2d
   14ee4:	strbeq	sl, [r2], #10
   14ee8:	beq	14f14 <__assert_fail@plt+0x3888>
   14eec:	mov	r2, r0
   14ef0:	mov	r0, ip
   14ef4:	mov	ip, lr
   14ef8:	mov	lr, r4
   14efc:	mov	r4, r5
   14f00:	mov	r5, r6
   14f04:	mov	r6, r7
   14f08:	mov	r7, r8
   14f0c:	mov	r8, r9
   14f10:	mov	r9, r1
   14f14:	tst	r3, #256	; 0x100
   14f18:	movne	fp, #114	; 0x72
   14f1c:	moveq	fp, #45	; 0x2d
   14f20:	tst	r3, #128	; 0x80
   14f24:	movne	sl, #119	; 0x77
   14f28:	moveq	sl, #45	; 0x2d
   14f2c:	tst	r3, #2048	; 0x800
   14f30:	strb	fp, [r9]
   14f34:	and	r9, r3, #64	; 0x40
   14f38:	strb	sl, [r8]
   14f3c:	beq	14fd8 <__assert_fail@plt+0x394c>
   14f40:	cmp	r9, #0
   14f44:	movne	r9, #115	; 0x73
   14f48:	moveq	r9, #83	; 0x53
   14f4c:	tst	r3, #32
   14f50:	movne	r8, #114	; 0x72
   14f54:	moveq	r8, #45	; 0x2d
   14f58:	tst	r3, #16
   14f5c:	strb	r9, [r7]
   14f60:	movne	r7, #119	; 0x77
   14f64:	moveq	r7, #45	; 0x2d
   14f68:	tst	r3, #1024	; 0x400
   14f6c:	strb	r8, [r6]
   14f70:	and	r6, r3, #8
   14f74:	strb	r7, [r5]
   14f78:	beq	14fe8 <__assert_fail@plt+0x395c>
   14f7c:	cmp	r6, #0
   14f80:	movne	r6, #115	; 0x73
   14f84:	moveq	r6, #83	; 0x53
   14f88:	tst	r3, #4
   14f8c:	movne	r5, #114	; 0x72
   14f90:	moveq	r5, #45	; 0x2d
   14f94:	tst	r3, #2
   14f98:	strb	r6, [r4]
   14f9c:	movne	r4, #119	; 0x77
   14fa0:	moveq	r4, #45	; 0x2d
   14fa4:	tst	r3, #512	; 0x200
   14fa8:	strb	r5, [lr]
   14fac:	and	r3, r3, #1
   14fb0:	strb	r4, [ip]
   14fb4:	beq	14ff8 <__assert_fail@plt+0x396c>
   14fb8:	cmp	r3, #0
   14fbc:	movne	ip, #116	; 0x74
   14fc0:	moveq	ip, #84	; 0x54
   14fc4:	mov	r3, #0
   14fc8:	strb	ip, [r0]
   14fcc:	mov	r0, r1
   14fd0:	strb	r3, [r2]
   14fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fd8:	cmp	r9, #0
   14fdc:	movne	r9, #120	; 0x78
   14fe0:	moveq	r9, #45	; 0x2d
   14fe4:	b	14f4c <__assert_fail@plt+0x38c0>
   14fe8:	cmp	r6, #0
   14fec:	movne	r6, #120	; 0x78
   14ff0:	moveq	r6, #45	; 0x2d
   14ff4:	b	14f88 <__assert_fail@plt+0x38fc>
   14ff8:	cmp	r3, #0
   14ffc:	movne	ip, #120	; 0x78
   15000:	moveq	ip, #45	; 0x2d
   15004:	b	14fc4 <__assert_fail@plt+0x3938>
   15008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500c:	sub	sp, sp, #100	; 0x64
   15010:	ldr	r8, [pc, #612]	; 1527c <__assert_fail@plt+0x3bf0>
   15014:	tst	r0, #2
   15018:	strd	r2, [sp, #32]
   1501c:	ldr	r1, [r8]
   15020:	addeq	r9, sp, #52	; 0x34
   15024:	str	r1, [sp, #92]	; 0x5c
   15028:	ldrd	r2, [sp, #32]
   1502c:	movne	r1, #32
   15030:	strbne	r1, [sp, #52]	; 0x34
   15034:	addne	ip, sp, #53	; 0x35
   15038:	addne	r9, sp, #52	; 0x34
   1503c:	moveq	ip, r9
   15040:	mov	r1, #10
   15044:	mov	sl, #1
   15048:	sub	lr, r1, #32
   1504c:	lsl	r4, sl, r1
   15050:	lsl	r5, sl, lr
   15054:	rsb	lr, r1, #32
   15058:	orr	r5, r5, sl, lsr lr
   1505c:	cmp	r3, r5
   15060:	cmpeq	r2, r4
   15064:	bcc	15204 <__assert_fail@plt+0x3b78>
   15068:	add	r1, r1, #10
   1506c:	cmp	r1, #70	; 0x46
   15070:	bne	15048 <__assert_fail@plt+0x39bc>
   15074:	mov	lr, ip
   15078:	strd	r2, [sp, #32]
   1507c:	mov	r4, r2
   15080:	tst	r0, #1
   15084:	mov	r2, #69	; 0x45
   15088:	bic	r5, r3, #-268435456	; 0xf0000000
   1508c:	lsr	sl, r3, #28
   15090:	strb	r2, [lr], #1
   15094:	bne	151ec <__assert_fail@plt+0x3b60>
   15098:	orrs	r3, r4, r5
   1509c:	mov	r3, #0
   150a0:	strb	r3, [lr]
   150a4:	beq	1522c <__assert_fail@plt+0x3ba0>
   150a8:	sub	r2, r1, #20
   150ac:	rsb	r0, r2, #32
   150b0:	lsr	r3, r4, r2
   150b4:	sub	r1, r1, #52	; 0x34
   150b8:	orr	r3, r3, r5, lsl r0
   150bc:	orr	r3, r3, r5, lsr r1
   150c0:	lsr	r2, r5, r2
   150c4:	adds	r6, r3, #50	; 0x32
   150c8:	adc	r7, r2, #0
   150cc:	mov	r3, #0
   150d0:	mov	r2, #100	; 0x64
   150d4:	mov	r0, r6
   150d8:	mov	r1, r7
   150dc:	bl	16510 <__assert_fail@plt+0x4e84>
   150e0:	cmp	r1, #0
   150e4:	cmpeq	r0, #10
   150e8:	mov	r2, r0
   150ec:	mov	r3, r1
   150f0:	addeq	sl, sl, #1
   150f4:	beq	1522c <__assert_fail@plt+0x3ba0>
   150f8:	cmp	r7, #0
   150fc:	cmpeq	r6, #99	; 0x63
   15100:	strd	r2, [sp, #32]
   15104:	bls	1522c <__assert_fail@plt+0x3ba0>
   15108:	bl	115b4 <localeconv@plt>
   1510c:	ldrd	r2, [sp, #32]
   15110:	cmp	r0, #0
   15114:	beq	15270 <__assert_fail@plt+0x3be4>
   15118:	ldr	r1, [r0]
   1511c:	cmp	r1, #0
   15120:	beq	15270 <__assert_fail@plt+0x3be4>
   15124:	ldrsb	ip, [r1]
   15128:	ldr	r0, [pc, #336]	; 15280 <__assert_fail@plt+0x3bf4>
   1512c:	cmp	ip, #0
   15130:	moveq	r1, r0
   15134:	ldr	r0, [pc, #328]	; 15284 <__assert_fail@plt+0x3bf8>
   15138:	strd	r2, [sp, #16]
   1513c:	add	r4, sp, #60	; 0x3c
   15140:	mov	r3, #32
   15144:	str	r1, [sp, #8]
   15148:	stm	sp, {r0, sl}
   1514c:	str	r9, [sp, #24]
   15150:	mov	r0, r4
   15154:	mov	r1, r3
   15158:	mov	r2, #1
   1515c:	bl	11674 <__snprintf_chk@plt>
   15160:	b	15250 <__assert_fail@plt+0x3bc4>
   15164:	mvn	r3, #0
   15168:	ldr	r4, [pc, #280]	; 15288 <__assert_fail@plt+0x3bfc>
   1516c:	lsl	r2, r3, lr
   15170:	umull	r4, r5, lr, r4
   15174:	str	r2, [sp, #40]	; 0x28
   15178:	sub	sl, r1, #42	; 0x2a
   1517c:	ldr	r4, [sp, #40]	; 0x28
   15180:	ldr	r2, [sp, #32]
   15184:	orr	r4, r4, r3, lsl sl
   15188:	str	sl, [sp, #44]	; 0x2c
   1518c:	ldr	fp, [pc, #248]	; 1528c <__assert_fail@plt+0x3c00>
   15190:	lsr	sl, r2, lr
   15194:	ldr	r2, [sp, #36]	; 0x24
   15198:	str	r4, [sp, #40]	; 0x28
   1519c:	lsr	r5, r5, #3
   151a0:	rsb	r4, lr, #32
   151a4:	ldrsb	fp, [fp, r5]
   151a8:	orr	sl, sl, r2, lsl r4
   151ac:	ldr	r5, [sp, #40]	; 0x28
   151b0:	ldr	r2, [sp, #32]
   151b4:	orr	r5, r5, r3, lsr r4
   151b8:	bic	r4, r2, r3, lsl lr
   151bc:	ldr	r2, [sp, #44]	; 0x2c
   151c0:	ldr	r3, [sp, #36]	; 0x24
   151c4:	str	r5, [sp, #40]	; 0x28
   151c8:	mov	lr, ip
   151cc:	orr	sl, sl, r3, lsr r2
   151d0:	ldrd	r2, [sp, #36]	; 0x24
   151d4:	cmp	r0, #0
   151d8:	strb	fp, [lr], #1
   151dc:	bic	r5, r2, r3
   151e0:	beq	15098 <__assert_fail@plt+0x3a0c>
   151e4:	cmp	fp, #66	; 0x42
   151e8:	beq	15098 <__assert_fail@plt+0x3a0c>
   151ec:	mov	r3, #105	; 0x69
   151f0:	strb	r3, [ip, #1]
   151f4:	mov	r3, #66	; 0x42
   151f8:	add	lr, ip, #3
   151fc:	strb	r3, [ip, #2]
   15200:	b	15098 <__assert_fail@plt+0x3a0c>
   15204:	subs	lr, r1, #10
   15208:	strd	r2, [sp, #32]
   1520c:	and	r0, r0, #1
   15210:	bne	15164 <__assert_fail@plt+0x3ad8>
   15214:	ldr	sl, [sp, #32]
   15218:	cmp	r0, #0
   1521c:	movne	r0, lr
   15220:	mov	r3, #66	; 0x42
   15224:	strb	r0, [ip, #1]
   15228:	strb	r3, [ip]
   1522c:	ldr	r2, [pc, #92]	; 15290 <__assert_fail@plt+0x3c04>
   15230:	add	r4, sp, #60	; 0x3c
   15234:	mov	r3, #32
   15238:	stm	sp, {r2, sl}
   1523c:	str	r9, [sp, #8]
   15240:	mov	r0, r4
   15244:	mov	r1, r3
   15248:	mov	r2, #1
   1524c:	bl	11674 <__snprintf_chk@plt>
   15250:	mov	r0, r4
   15254:	bl	113bc <strdup@plt>
   15258:	ldr	r2, [sp, #92]	; 0x5c
   1525c:	ldr	r3, [r8]
   15260:	cmp	r2, r3
   15264:	bne	15278 <__assert_fail@plt+0x3bec>
   15268:	add	sp, sp, #100	; 0x64
   1526c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15270:	ldr	r1, [pc, #8]	; 15280 <__assert_fail@plt+0x3bf4>
   15274:	b	15134 <__assert_fail@plt+0x3aa8>
   15278:	bl	113c8 <__stack_chk_fail@plt>
   1527c:	andeq	r7, r2, r0, lsr #27
   15280:			; <UNDEFINED> instruction: 0x000177b8
   15284:	andeq	r7, r1, r4, asr #15
   15288:	stclgt	12, cr12, [ip], {205}	; 0xcd
   1528c:			; <UNDEFINED> instruction: 0x000177bc
   15290:	ldrdeq	r7, [r1], -r0
   15294:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15298:	subs	r4, r0, #0
   1529c:	beq	1536c <__assert_fail@plt+0x3ce0>
   152a0:	ldrsb	lr, [r4]
   152a4:	cmp	lr, #0
   152a8:	beq	1536c <__assert_fail@plt+0x3ce0>
   152ac:	cmp	r1, #0
   152b0:	clz	ip, r2
   152b4:	lsr	ip, ip, #5
   152b8:	moveq	r0, #1
   152bc:	movne	r0, ip
   152c0:	cmp	r3, #0
   152c4:	moveq	r0, #1
   152c8:	cmp	r0, #0
   152cc:	bne	1536c <__assert_fail@plt+0x3ce0>
   152d0:	mov	r8, r3
   152d4:	mov	r7, r2
   152d8:	mov	r9, r1
   152dc:	mov	r5, r0
   152e0:	b	1533c <__assert_fail@plt+0x3cb0>
   152e4:	cmp	r3, #0
   152e8:	bne	15328 <__assert_fail@plt+0x3c9c>
   152ec:	cmn	r4, #1
   152f0:	add	r6, r4, #1
   152f4:	beq	15374 <__assert_fail@plt+0x3ce8>
   152f8:	cmp	r0, r6
   152fc:	bcs	1536c <__assert_fail@plt+0x3ce0>
   15300:	sub	r1, r6, r0
   15304:	blx	r8
   15308:	cmn	r0, #1
   1530c:	beq	1536c <__assert_fail@plt+0x3ce0>
   15310:	str	r0, [r9, r5, lsl #2]
   15314:	ldrsb	r3, [r6]
   15318:	add	r5, r5, #1
   1531c:	cmp	r3, #0
   15320:	beq	15374 <__assert_fail@plt+0x3ce8>
   15324:	mov	r0, #0
   15328:	cmn	r4, #1
   1532c:	beq	15374 <__assert_fail@plt+0x3ce8>
   15330:	ldrsb	lr, [r4, #1]!
   15334:	cmp	lr, #0
   15338:	beq	15374 <__assert_fail@plt+0x3ce8>
   1533c:	cmp	r7, r5
   15340:	mov	r6, r4
   15344:	bls	1537c <__assert_fail@plt+0x3cf0>
   15348:	cmp	r0, #0
   1534c:	moveq	r0, r4
   15350:	cmp	lr, #44	; 0x2c
   15354:	ldrsb	r3, [r4, #1]
   15358:	bne	152e4 <__assert_fail@plt+0x3c58>
   1535c:	cmp	r3, #0
   15360:	beq	152ec <__assert_fail@plt+0x3c60>
   15364:	cmp	r0, r6
   15368:	bcc	15300 <__assert_fail@plt+0x3c74>
   1536c:	mvn	r0, #0
   15370:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15374:	mov	r0, r5
   15378:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1537c:	mvn	r0, #1
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15384:	cmp	r0, #0
   15388:	beq	153f4 <__assert_fail@plt+0x3d68>
   1538c:	push	{r4, lr}
   15390:	mov	r4, r3
   15394:	cmp	r4, #0
   15398:	ldrsb	ip, [r0]
   1539c:	clz	r3, ip
   153a0:	lsr	r3, r3, #5
   153a4:	moveq	r3, #1
   153a8:	cmp	r3, #0
   153ac:	bne	153ec <__assert_fail@plt+0x3d60>
   153b0:	ldr	lr, [r4]
   153b4:	cmp	lr, r2
   153b8:	bhi	153ec <__assert_fail@plt+0x3d60>
   153bc:	cmp	ip, #43	; 0x2b
   153c0:	strne	r3, [r4]
   153c4:	addeq	r0, r0, #1
   153c8:	ldr	r3, [sp, #8]
   153cc:	addeq	r1, r1, lr, lsl #2
   153d0:	subeq	r2, r2, lr
   153d4:	bl	15294 <__assert_fail@plt+0x3c08>
   153d8:	cmp	r0, #0
   153dc:	ldrgt	r3, [r4]
   153e0:	addgt	r3, r3, r0
   153e4:	strgt	r3, [r4]
   153e8:	pop	{r4, pc}
   153ec:	mvn	r0, #0
   153f0:	pop	{r4, pc}
   153f4:	mvn	r0, #0
   153f8:	bx	lr
   153fc:	cmp	r2, #0
   15400:	clz	r3, r1
   15404:	lsr	r3, r3, #5
   15408:	moveq	r3, #1
   1540c:	cmp	r0, #0
   15410:	moveq	r3, #1
   15414:	cmp	r3, #0
   15418:	bne	154e4 <__assert_fail@plt+0x3e58>
   1541c:	push	{r4, r5, r6, r7, r8, lr}
   15420:	mov	r6, r2
   15424:	mov	r2, r3
   15428:	ldrsb	r3, [r0]
   1542c:	mov	r8, r1
   15430:	mov	r4, r0
   15434:	mov	r7, #1
   15438:	cmp	r3, #0
   1543c:	beq	154ac <__assert_fail@plt+0x3e20>
   15440:	cmp	r2, #0
   15444:	moveq	r2, r4
   15448:	cmp	r3, #44	; 0x2c
   1544c:	mov	r5, r4
   15450:	ldrsb	r3, [r4, #1]!
   15454:	beq	154b4 <__assert_fail@plt+0x3e28>
   15458:	cmp	r3, #0
   1545c:	bne	154d4 <__assert_fail@plt+0x3e48>
   15460:	mov	r5, r4
   15464:	cmp	r2, r5
   15468:	sub	r1, r5, r2
   1546c:	mov	r0, r2
   15470:	bcs	154cc <__assert_fail@plt+0x3e40>
   15474:	blx	r6
   15478:	mov	r2, r4
   1547c:	cmp	r0, #0
   15480:	and	r1, r0, #7
   15484:	poplt	{r4, r5, r6, r7, r8, pc}
   15488:	ldrb	r3, [r8, r0, asr #3]
   1548c:	orr	r3, r3, r7, lsl r1
   15490:	strb	r3, [r8, r0, asr #3]
   15494:	ldrsb	r3, [r5]
   15498:	cmp	r3, #0
   1549c:	beq	154ac <__assert_fail@plt+0x3e20>
   154a0:	ldrsb	r3, [r4]
   154a4:	cmp	r3, #0
   154a8:	bne	15448 <__assert_fail@plt+0x3dbc>
   154ac:	mov	r0, #0
   154b0:	pop	{r4, r5, r6, r7, r8, pc}
   154b4:	cmp	r3, #0
   154b8:	moveq	r5, r4
   154bc:	cmp	r2, r5
   154c0:	sub	r1, r5, r2
   154c4:	mov	r0, r2
   154c8:	bcc	15474 <__assert_fail@plt+0x3de8>
   154cc:	mvn	r0, #0
   154d0:	pop	{r4, r5, r6, r7, r8, pc}
   154d4:	adds	r4, r5, #1
   154d8:	bne	15438 <__assert_fail@plt+0x3dac>
   154dc:	mov	r0, #0
   154e0:	pop	{r4, r5, r6, r7, r8, pc}
   154e4:	mvn	r0, #21
   154e8:	bx	lr
   154ec:	cmp	r2, #0
   154f0:	clz	r3, r1
   154f4:	lsr	r3, r3, #5
   154f8:	moveq	r3, #1
   154fc:	cmp	r0, #0
   15500:	moveq	r3, #1
   15504:	cmp	r3, #0
   15508:	bne	155cc <__assert_fail@plt+0x3f40>
   1550c:	push	{r4, r5, r6, r7, r8, lr}
   15510:	mov	r6, r2
   15514:	mov	r2, r3
   15518:	ldrsb	r3, [r0]
   1551c:	mov	r7, r1
   15520:	mov	r4, r0
   15524:	cmp	r3, #0
   15528:	beq	15594 <__assert_fail@plt+0x3f08>
   1552c:	cmp	r2, #0
   15530:	moveq	r2, r4
   15534:	cmp	r3, #44	; 0x2c
   15538:	mov	r5, r4
   1553c:	ldrsb	r3, [r4, #1]!
   15540:	beq	1559c <__assert_fail@plt+0x3f10>
   15544:	cmp	r3, #0
   15548:	bne	155bc <__assert_fail@plt+0x3f30>
   1554c:	mov	r5, r4
   15550:	cmp	r2, r5
   15554:	sub	r1, r5, r2
   15558:	mov	r0, r2
   1555c:	bcs	155b4 <__assert_fail@plt+0x3f28>
   15560:	blx	r6
   15564:	mov	r2, r4
   15568:	cmp	r0, #0
   1556c:	poplt	{r4, r5, r6, r7, r8, pc}
   15570:	ldr	r3, [r7]
   15574:	orr	r3, r3, r0
   15578:	str	r3, [r7]
   1557c:	ldrsb	r3, [r5]
   15580:	cmp	r3, #0
   15584:	beq	15594 <__assert_fail@plt+0x3f08>
   15588:	ldrsb	r3, [r4]
   1558c:	cmp	r3, #0
   15590:	bne	15534 <__assert_fail@plt+0x3ea8>
   15594:	mov	r0, #0
   15598:	pop	{r4, r5, r6, r7, r8, pc}
   1559c:	cmp	r3, #0
   155a0:	moveq	r5, r4
   155a4:	cmp	r2, r5
   155a8:	sub	r1, r5, r2
   155ac:	mov	r0, r2
   155b0:	bcc	15560 <__assert_fail@plt+0x3ed4>
   155b4:	mvn	r0, #0
   155b8:	pop	{r4, r5, r6, r7, r8, pc}
   155bc:	adds	r4, r5, #1
   155c0:	bne	15524 <__assert_fail@plt+0x3e98>
   155c4:	mov	r0, #0
   155c8:	pop	{r4, r5, r6, r7, r8, pc}
   155cc:	mvn	r0, #21
   155d0:	bx	lr
   155d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155d8:	mov	sl, r1
   155dc:	ldr	r5, [pc, #368]	; 15754 <__assert_fail@plt+0x40c8>
   155e0:	sub	sp, sp, #8
   155e4:	mov	r7, #0
   155e8:	ldr	r1, [r5]
   155ec:	subs	r4, r0, #0
   155f0:	str	r1, [sp, #4]
   155f4:	str	r7, [sp]
   155f8:	beq	1566c <__assert_fail@plt+0x3fe0>
   155fc:	mov	r6, r2
   15600:	str	r3, [sl]
   15604:	str	r3, [r6]
   15608:	mov	r9, r3
   1560c:	bl	11500 <__errno_location@plt>
   15610:	str	r7, [r0]
   15614:	ldrsb	r3, [r4]
   15618:	mov	r8, r0
   1561c:	cmp	r3, #58	; 0x3a
   15620:	beq	15688 <__assert_fail@plt+0x3ffc>
   15624:	mov	r1, sp
   15628:	mov	r2, #10
   1562c:	mov	r0, r4
   15630:	bl	11314 <strtol@plt>
   15634:	str	r0, [sl]
   15638:	str	r0, [r6]
   1563c:	ldr	r0, [r8]
   15640:	cmp	r0, #0
   15644:	bne	156d8 <__assert_fail@plt+0x404c>
   15648:	ldr	r2, [sp]
   1564c:	cmp	r2, #0
   15650:	cmpne	r2, r4
   15654:	beq	156d8 <__assert_fail@plt+0x404c>
   15658:	ldrsb	r3, [r2]
   1565c:	cmp	r3, #58	; 0x3a
   15660:	beq	156e0 <__assert_fail@plt+0x4054>
   15664:	cmp	r3, #45	; 0x2d
   15668:	beq	156f0 <__assert_fail@plt+0x4064>
   1566c:	mov	r0, #0
   15670:	ldr	r2, [sp, #4]
   15674:	ldr	r3, [r5]
   15678:	cmp	r2, r3
   1567c:	bne	15750 <__assert_fail@plt+0x40c4>
   15680:	add	sp, sp, #8
   15684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15688:	add	r4, r4, #1
   1568c:	mov	r0, r4
   15690:	mov	r2, #10
   15694:	mov	r1, sp
   15698:	bl	11314 <strtol@plt>
   1569c:	str	r0, [r6]
   156a0:	ldr	r3, [r8]
   156a4:	cmp	r3, #0
   156a8:	bne	156d8 <__assert_fail@plt+0x404c>
   156ac:	ldr	r3, [sp]
   156b0:	cmp	r3, #0
   156b4:	beq	156d8 <__assert_fail@plt+0x404c>
   156b8:	ldrsb	r2, [r3]
   156bc:	sub	r3, r3, r4
   156c0:	clz	r3, r3
   156c4:	cmp	r2, #0
   156c8:	lsr	r3, r3, #5
   156cc:	movne	r3, #1
   156d0:	cmp	r3, #0
   156d4:	beq	1566c <__assert_fail@plt+0x3fe0>
   156d8:	mvn	r0, #0
   156dc:	b	15670 <__assert_fail@plt+0x3fe4>
   156e0:	ldrsb	r3, [r2, #1]
   156e4:	cmp	r3, #0
   156e8:	streq	r9, [r6]
   156ec:	beq	15670 <__assert_fail@plt+0x3fe4>
   156f0:	mov	r3, #0
   156f4:	add	r4, r2, #1
   156f8:	str	r3, [r8]
   156fc:	mov	r1, sp
   15700:	mov	r0, r4
   15704:	mov	r2, #10
   15708:	str	r3, [sp]
   1570c:	bl	11314 <strtol@plt>
   15710:	str	r0, [r6]
   15714:	ldr	r3, [r8]
   15718:	cmp	r3, #0
   1571c:	bne	156d8 <__assert_fail@plt+0x404c>
   15720:	ldr	r2, [sp]
   15724:	cmp	r2, #0
   15728:	beq	156d8 <__assert_fail@plt+0x404c>
   1572c:	ldrsb	r3, [r2]
   15730:	sub	r2, r2, r4
   15734:	clz	r2, r2
   15738:	cmp	r3, #0
   1573c:	lsr	r2, r2, #5
   15740:	movne	r2, #1
   15744:	cmp	r2, #0
   15748:	beq	1566c <__assert_fail@plt+0x3fe0>
   1574c:	b	156d8 <__assert_fail@plt+0x404c>
   15750:	bl	113c8 <__stack_chk_fail@plt>
   15754:	andeq	r7, r2, r0, lsr #27
   15758:	push	{r4, r5, r6, r7, lr}
   1575c:	sub	sp, sp, #20
   15760:	ldr	r7, [pc, #216]	; 15840 <__assert_fail@plt+0x41b4>
   15764:	cmp	r0, #0
   15768:	cmpne	r1, #0
   1576c:	movne	r4, r1
   15770:	ldr	r3, [r7]
   15774:	str	r3, [sp, #12]
   15778:	bne	157bc <__assert_fail@plt+0x4130>
   1577c:	b	15834 <__assert_fail@plt+0x41a8>
   15780:	cmp	r4, r3
   15784:	bne	15834 <__assert_fail@plt+0x41a8>
   15788:	mov	r2, r4
   1578c:	mov	r1, r6
   15790:	mov	r0, r5
   15794:	bl	11638 <strncmp@plt>
   15798:	cmp	r0, #0
   1579c:	bne	15834 <__assert_fail@plt+0x41a8>
   157a0:	adds	r0, r5, r4
   157a4:	moveq	r3, #0
   157a8:	movne	r3, #1
   157ac:	adds	r4, r6, r4
   157b0:	moveq	r3, #0
   157b4:	cmp	r3, #0
   157b8:	beq	15834 <__assert_fail@plt+0x41a8>
   157bc:	add	r1, sp, #4
   157c0:	bl	13d88 <__assert_fail@plt+0x26fc>
   157c4:	add	r1, sp, #8
   157c8:	mov	r5, r0
   157cc:	mov	r0, r4
   157d0:	bl	13d88 <__assert_fail@plt+0x26fc>
   157d4:	ldr	r4, [sp, #4]
   157d8:	ldr	r3, [sp, #8]
   157dc:	mov	r6, r0
   157e0:	adds	r0, r4, r3
   157e4:	beq	15818 <__assert_fail@plt+0x418c>
   157e8:	cmp	r0, #1
   157ec:	bne	15780 <__assert_fail@plt+0x40f4>
   157f0:	cmp	r5, #0
   157f4:	beq	15804 <__assert_fail@plt+0x4178>
   157f8:	ldrsb	r2, [r5]
   157fc:	cmp	r2, #47	; 0x2f
   15800:	beq	1581c <__assert_fail@plt+0x4190>
   15804:	cmp	r6, #0
   15808:	beq	15780 <__assert_fail@plt+0x40f4>
   1580c:	ldrsb	r2, [r6]
   15810:	cmp	r2, #47	; 0x2f
   15814:	bne	15780 <__assert_fail@plt+0x40f4>
   15818:	mov	r0, #1
   1581c:	ldr	r2, [sp, #12]
   15820:	ldr	r3, [r7]
   15824:	cmp	r2, r3
   15828:	bne	1583c <__assert_fail@plt+0x41b0>
   1582c:	add	sp, sp, #20
   15830:	pop	{r4, r5, r6, r7, pc}
   15834:	mov	r0, #0
   15838:	b	1581c <__assert_fail@plt+0x4190>
   1583c:	bl	113c8 <__stack_chk_fail@plt>
   15840:	andeq	r7, r2, r0, lsr #27
   15844:	orrs	r3, r0, r1
   15848:	beq	158c4 <__assert_fail@plt+0x4238>
   1584c:	cmp	r0, #0
   15850:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15854:	mov	r4, r1
   15858:	mov	r5, r0
   1585c:	beq	158cc <__assert_fail@plt+0x4240>
   15860:	cmp	r1, #0
   15864:	beq	158dc <__assert_fail@plt+0x4250>
   15868:	mov	r6, r2
   1586c:	bl	114dc <strlen@plt>
   15870:	mvn	r3, r0
   15874:	cmp	r6, r3
   15878:	mov	r7, r0
   1587c:	movhi	r8, #0
   15880:	bhi	158bc <__assert_fail@plt+0x4230>
   15884:	add	r9, r6, r0
   15888:	add	r0, r9, #1
   1588c:	bl	1144c <malloc@plt>
   15890:	subs	r8, r0, #0
   15894:	beq	158bc <__assert_fail@plt+0x4230>
   15898:	mov	r1, r5
   1589c:	mov	r2, r7
   158a0:	bl	11380 <memcpy@plt>
   158a4:	mov	r2, r6
   158a8:	mov	r1, r4
   158ac:	add	r0, r8, r7
   158b0:	bl	11380 <memcpy@plt>
   158b4:	mov	r3, #0
   158b8:	strb	r3, [r8, r9]
   158bc:	mov	r0, r8
   158c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   158c4:	ldr	r0, [pc, #24]	; 158e4 <__assert_fail@plt+0x4258>
   158c8:	b	113bc <strdup@plt>
   158cc:	mov	r0, r4
   158d0:	mov	r1, r2
   158d4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   158d8:	b	11368 <strndup@plt>
   158dc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   158e0:	b	113bc <strdup@plt>
   158e4:	andeq	r6, r1, ip, lsr #26
   158e8:	push	{r4, r5, r6, lr}
   158ec:	subs	r4, r1, #0
   158f0:	mov	r5, r0
   158f4:	moveq	r2, r4
   158f8:	beq	15908 <__assert_fail@plt+0x427c>
   158fc:	mov	r0, r4
   15900:	bl	114dc <strlen@plt>
   15904:	mov	r2, r0
   15908:	mov	r1, r4
   1590c:	mov	r0, r5
   15910:	pop	{r4, r5, r6, lr}
   15914:	b	15844 <__assert_fail@plt+0x41b8>
   15918:	push	{r1, r2, r3}
   1591c:	mov	r1, #1
   15920:	push	{r4, r5, lr}
   15924:	mov	r5, r0
   15928:	ldr	r4, [pc, #108]	; 1599c <__assert_fail@plt+0x4310>
   1592c:	sub	sp, sp, #16
   15930:	add	ip, sp, #32
   15934:	ldr	r0, [r4]
   15938:	ldr	r2, [sp, #28]
   1593c:	str	r0, [sp, #12]
   15940:	mov	r3, ip
   15944:	add	r0, sp, #8
   15948:	str	ip, [sp, #4]
   1594c:	bl	11518 <__vasprintf_chk@plt>
   15950:	subs	r2, r0, #0
   15954:	movlt	r5, #0
   15958:	blt	15974 <__assert_fail@plt+0x42e8>
   1595c:	mov	r0, r5
   15960:	ldr	r1, [sp, #8]
   15964:	bl	15844 <__assert_fail@plt+0x41b8>
   15968:	mov	r5, r0
   1596c:	ldr	r0, [sp, #8]
   15970:	bl	11344 <free@plt>
   15974:	ldr	r2, [sp, #12]
   15978:	ldr	r3, [r4]
   1597c:	mov	r0, r5
   15980:	cmp	r2, r3
   15984:	bne	15998 <__assert_fail@plt+0x430c>
   15988:	add	sp, sp, #16
   1598c:	pop	{r4, r5, lr}
   15990:	add	sp, sp, #12
   15994:	bx	lr
   15998:	bl	113c8 <__stack_chk_fail@plt>
   1599c:	andeq	r7, r2, r0, lsr #27
   159a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159a4:	mov	sl, r1
   159a8:	ldr	r5, [r0]
   159ac:	ldr	r6, [pc, #324]	; 15af8 <__assert_fail@plt+0x446c>
   159b0:	sub	sp, sp, #8
   159b4:	ldrsb	r4, [r5]
   159b8:	ldr	r1, [r6]
   159bc:	cmp	r4, #0
   159c0:	str	r1, [sp, #4]
   159c4:	beq	15a78 <__assert_fail@plt+0x43ec>
   159c8:	mov	r7, r0
   159cc:	mov	r1, r2
   159d0:	mov	r0, r5
   159d4:	mov	r8, r2
   159d8:	mov	r9, r3
   159dc:	bl	11680 <strspn@plt>
   159e0:	add	r4, r5, r0
   159e4:	ldrsb	r5, [r5, r0]
   159e8:	cmp	r5, #0
   159ec:	beq	15ae0 <__assert_fail@plt+0x4454>
   159f0:	cmp	r9, #0
   159f4:	beq	15a94 <__assert_fail@plt+0x4408>
   159f8:	mov	r1, r5
   159fc:	ldr	r0, [pc, #248]	; 15afc <__assert_fail@plt+0x4470>
   15a00:	bl	114e8 <strchr@plt>
   15a04:	cmp	r0, #0
   15a08:	beq	15ab0 <__assert_fail@plt+0x4424>
   15a0c:	add	r9, r4, #1
   15a10:	mov	r3, #0
   15a14:	mov	r0, r9
   15a18:	mov	r1, sp
   15a1c:	strb	r5, [sp]
   15a20:	strb	r3, [sp, #1]
   15a24:	bl	13e28 <__assert_fail@plt+0x279c>
   15a28:	add	r3, r4, r0
   15a2c:	str	r0, [sl]
   15a30:	ldrsb	r3, [r3, #1]
   15a34:	subs	r5, r5, r3
   15a38:	movne	r5, #1
   15a3c:	cmp	r3, #0
   15a40:	moveq	r5, #1
   15a44:	cmp	r5, #0
   15a48:	bne	15ae0 <__assert_fail@plt+0x4454>
   15a4c:	add	r0, r0, #2
   15a50:	add	r5, r4, r0
   15a54:	ldrsb	r1, [r4, r0]
   15a58:	cmp	r1, #0
   15a5c:	beq	15a70 <__assert_fail@plt+0x43e4>
   15a60:	mov	r0, r8
   15a64:	bl	114e8 <strchr@plt>
   15a68:	cmp	r0, #0
   15a6c:	beq	15ae0 <__assert_fail@plt+0x4454>
   15a70:	mov	r4, r9
   15a74:	str	r5, [r7]
   15a78:	ldr	r2, [sp, #4]
   15a7c:	ldr	r3, [r6]
   15a80:	mov	r0, r4
   15a84:	cmp	r2, r3
   15a88:	bne	15af4 <__assert_fail@plt+0x4468>
   15a8c:	add	sp, sp, #8
   15a90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a94:	mov	r1, r8
   15a98:	mov	r0, r4
   15a9c:	bl	1132c <strcspn@plt>
   15aa0:	add	r3, r4, r0
   15aa4:	str	r0, [sl]
   15aa8:	str	r3, [r7]
   15aac:	b	15a78 <__assert_fail@plt+0x43ec>
   15ab0:	mov	r1, r8
   15ab4:	mov	r0, r4
   15ab8:	bl	13e28 <__assert_fail@plt+0x279c>
   15abc:	str	r0, [sl]
   15ac0:	ldrsb	r1, [r4, r0]
   15ac4:	add	r5, r4, r0
   15ac8:	cmp	r1, #0
   15acc:	beq	15aec <__assert_fail@plt+0x4460>
   15ad0:	mov	r0, r8
   15ad4:	bl	114e8 <strchr@plt>
   15ad8:	cmp	r0, #0
   15adc:	bne	15aec <__assert_fail@plt+0x4460>
   15ae0:	str	r4, [r7]
   15ae4:	mov	r4, #0
   15ae8:	b	15a78 <__assert_fail@plt+0x43ec>
   15aec:	str	r5, [r7]
   15af0:	b	15a78 <__assert_fail@plt+0x43ec>
   15af4:	bl	113c8 <__stack_chk_fail@plt>
   15af8:	andeq	r7, r2, r0, lsr #27
   15afc:	ldrdeq	r7, [r1], -r8
   15b00:	push	{r4, lr}
   15b04:	mov	r4, r0
   15b08:	b	15b14 <__assert_fail@plt+0x4488>
   15b0c:	cmp	r0, #10
   15b10:	beq	15b2c <__assert_fail@plt+0x44a0>
   15b14:	mov	r0, r4
   15b18:	bl	11530 <fgetc@plt>
   15b1c:	cmn	r0, #1
   15b20:	bne	15b0c <__assert_fail@plt+0x4480>
   15b24:	mov	r0, #1
   15b28:	pop	{r4, pc}
   15b2c:	mov	r0, #0
   15b30:	pop	{r4, pc}
   15b34:	push	{r4, r5, r6, lr}
   15b38:	mov	r5, r0
   15b3c:	ldr	r0, [r0]
   15b40:	cmp	r0, #0
   15b44:	beq	15b5c <__assert_fail@plt+0x44d0>
   15b48:	mov	r4, r5
   15b4c:	bl	11344 <free@plt>
   15b50:	ldr	r0, [r4, #4]!
   15b54:	cmp	r0, #0
   15b58:	bne	15b4c <__assert_fail@plt+0x44c0>
   15b5c:	mov	r3, #0
   15b60:	str	r3, [r5]
   15b64:	pop	{r4, r5, r6, pc}
   15b68:	ldr	r3, [r0]
   15b6c:	cmp	r3, #0
   15b70:	beq	15b88 <__assert_fail@plt+0x44fc>
   15b74:	mov	r3, #0
   15b78:	ldr	r2, [r0, #4]!
   15b7c:	add	r3, r3, #1
   15b80:	cmp	r2, #0
   15b84:	bne	15b78 <__assert_fail@plt+0x44ec>
   15b88:	mov	r0, r3
   15b8c:	bx	lr
   15b90:	cmp	r0, #0
   15b94:	bxeq	lr
   15b98:	b	15b34 <__assert_fail@plt+0x44a8>
   15b9c:	push	{r4, lr}
   15ba0:	subs	r4, r0, #0
   15ba4:	beq	15bac <__assert_fail@plt+0x4520>
   15ba8:	bl	15b34 <__assert_fail@plt+0x44a8>
   15bac:	mov	r0, r4
   15bb0:	bl	11344 <free@plt>
   15bb4:	mov	r0, #0
   15bb8:	pop	{r4, pc}
   15bbc:	push	{r4, r5, r6, r7, r8, lr}
   15bc0:	subs	r6, r0, #0
   15bc4:	beq	15c34 <__assert_fail@plt+0x45a8>
   15bc8:	bl	15b68 <__assert_fail@plt+0x44dc>
   15bcc:	add	r0, r0, #1
   15bd0:	lsl	r0, r0, #2
   15bd4:	bl	1144c <malloc@plt>
   15bd8:	subs	r7, r0, #0
   15bdc:	beq	15c58 <__assert_fail@plt+0x45cc>
   15be0:	ldr	r0, [r6]
   15be4:	cmp	r0, #0
   15be8:	beq	15c64 <__assert_fail@plt+0x45d8>
   15bec:	mov	r5, r7
   15bf0:	b	15c04 <__assert_fail@plt+0x4578>
   15bf4:	ldr	r0, [r6, #4]!
   15bf8:	mov	r3, r5
   15bfc:	cmp	r0, #0
   15c00:	beq	15c48 <__assert_fail@plt+0x45bc>
   15c04:	bl	113bc <strdup@plt>
   15c08:	cmp	r0, #0
   15c0c:	mov	r4, r0
   15c10:	str	r0, [r5], #4
   15c14:	bne	15bf4 <__assert_fail@plt+0x4568>
   15c18:	mov	r0, r7
   15c1c:	bl	15b34 <__assert_fail@plt+0x44a8>
   15c20:	mov	r0, r7
   15c24:	mov	r7, r4
   15c28:	bl	11344 <free@plt>
   15c2c:	mov	r0, r7
   15c30:	pop	{r4, r5, r6, r7, r8, pc}
   15c34:	mov	r0, #4
   15c38:	bl	1144c <malloc@plt>
   15c3c:	subs	r3, r0, #0
   15c40:	beq	15c58 <__assert_fail@plt+0x45cc>
   15c44:	mov	r7, r3
   15c48:	mov	r2, #0
   15c4c:	str	r2, [r3]
   15c50:	mov	r0, r7
   15c54:	pop	{r4, r5, r6, r7, r8, pc}
   15c58:	mov	r7, #0
   15c5c:	mov	r0, r7
   15c60:	pop	{r4, r5, r6, r7, r8, pc}
   15c64:	mov	r3, r7
   15c68:	b	15c48 <__assert_fail@plt+0x45bc>
   15c6c:	cmp	r0, #0
   15c70:	bxeq	lr
   15c74:	b	15b68 <__assert_fail@plt+0x44dc>
   15c78:	push	{r4, r5, r6, r7, r8, lr}
   15c7c:	sub	sp, sp, #8
   15c80:	ldr	r6, [pc, #264]	; 15d90 <__assert_fail@plt+0x4704>
   15c84:	subs	r8, r0, #0
   15c88:	ldr	r3, [r6]
   15c8c:	str	r3, [sp, #4]
   15c90:	beq	15d74 <__assert_fail@plt+0x46e8>
   15c94:	adds	r0, r8, #1
   15c98:	movne	r0, #1
   15c9c:	mov	r5, r1
   15ca0:	mov	r3, r1
   15ca4:	add	r0, r0, #1
   15ca8:	b	15cb4 <__assert_fail@plt+0x4628>
   15cac:	cmn	r4, #1
   15cb0:	addne	r0, r0, #1
   15cb4:	add	r3, r3, #4
   15cb8:	str	r3, [sp]
   15cbc:	ldr	r4, [r3, #-4]
   15cc0:	cmp	r4, #0
   15cc4:	bne	15cac <__assert_fail@plt+0x4620>
   15cc8:	lsl	r0, r0, #2
   15ccc:	bl	1144c <malloc@plt>
   15cd0:	subs	r7, r0, #0
   15cd4:	beq	15d6c <__assert_fail@plt+0x46e0>
   15cd8:	cmn	r8, #1
   15cdc:	beq	15cf8 <__assert_fail@plt+0x466c>
   15ce0:	mov	r0, r8
   15ce4:	bl	113bc <strdup@plt>
   15ce8:	cmp	r0, #0
   15cec:	str	r0, [r7]
   15cf0:	beq	15d5c <__assert_fail@plt+0x46d0>
   15cf4:	mov	r4, #1
   15cf8:	sub	r8, r4, #-1073741823	; 0xc0000001
   15cfc:	add	r8, r7, r8, lsl #2
   15d00:	ldr	r0, [r5], #4
   15d04:	cmp	r0, #0
   15d08:	beq	15d34 <__assert_fail@plt+0x46a8>
   15d0c:	cmn	r0, #1
   15d10:	beq	15d00 <__assert_fail@plt+0x4674>
   15d14:	bl	113bc <strdup@plt>
   15d18:	cmp	r0, #0
   15d1c:	str	r0, [r8, #4]!
   15d20:	beq	15d5c <__assert_fail@plt+0x46d0>
   15d24:	ldr	r0, [r5], #4
   15d28:	add	r4, r4, #1
   15d2c:	cmp	r0, #0
   15d30:	bne	15d0c <__assert_fail@plt+0x4680>
   15d34:	add	r4, r7, r4, lsl #2
   15d38:	mov	r3, #0
   15d3c:	str	r3, [r4]
   15d40:	ldr	r2, [sp, #4]
   15d44:	ldr	r3, [r6]
   15d48:	mov	r0, r7
   15d4c:	cmp	r2, r3
   15d50:	bne	15d8c <__assert_fail@plt+0x4700>
   15d54:	add	sp, sp, #8
   15d58:	pop	{r4, r5, r6, r7, r8, pc}
   15d5c:	mov	r0, r7
   15d60:	bl	15b34 <__assert_fail@plt+0x44a8>
   15d64:	mov	r0, r7
   15d68:	bl	11344 <free@plt>
   15d6c:	mov	r7, #0
   15d70:	b	15d40 <__assert_fail@plt+0x46b4>
   15d74:	mov	r0, #4
   15d78:	bl	1144c <malloc@plt>
   15d7c:	subs	r7, r0, #0
   15d80:	beq	15d6c <__assert_fail@plt+0x46e0>
   15d84:	mov	r4, r7
   15d88:	b	15d38 <__assert_fail@plt+0x46ac>
   15d8c:	bl	113c8 <__stack_chk_fail@plt>
   15d90:	andeq	r7, r2, r0, lsr #27
   15d94:	push	{r0, r1, r2, r3}
   15d98:	push	{r4, lr}
   15d9c:	sub	sp, sp, #8
   15da0:	ldr	r4, [pc, #60]	; 15de4 <__assert_fail@plt+0x4758>
   15da4:	add	r3, sp, #20
   15da8:	mov	r1, r3
   15dac:	ldr	r2, [r4]
   15db0:	ldr	r0, [sp, #16]
   15db4:	str	r2, [sp, #4]
   15db8:	str	r3, [sp]
   15dbc:	bl	15c78 <__assert_fail@plt+0x45ec>
   15dc0:	ldr	r2, [sp, #4]
   15dc4:	ldr	r3, [r4]
   15dc8:	cmp	r2, r3
   15dcc:	bne	15de0 <__assert_fail@plt+0x4754>
   15dd0:	add	sp, sp, #8
   15dd4:	pop	{r4, lr}
   15dd8:	add	sp, sp, #16
   15ddc:	bx	lr
   15de0:	bl	113c8 <__stack_chk_fail@plt>
   15de4:	andeq	r7, r2, r0, lsr #27
   15de8:	push	{r4, r5, r6, r7, r8, r9, lr}
   15dec:	sub	sp, sp, #20
   15df0:	ldr	r7, [pc, #316]	; 15f34 <__assert_fail@plt+0x48a8>
   15df4:	subs	r6, r0, #0
   15df8:	ldr	r3, [r7]
   15dfc:	str	r3, [sp, #12]
   15e00:	beq	15f1c <__assert_fail@plt+0x4890>
   15e04:	mov	r5, r1
   15e08:	add	r0, sp, #4
   15e0c:	add	r1, sp, #8
   15e10:	mov	r3, #0
   15e14:	mov	r2, r5
   15e18:	str	r6, [sp, #4]
   15e1c:	bl	159a0 <__assert_fail@plt+0x4314>
   15e20:	cmp	r0, #0
   15e24:	beq	15f0c <__assert_fail@plt+0x4880>
   15e28:	mov	r4, #0
   15e2c:	b	15e34 <__assert_fail@plt+0x47a8>
   15e30:	mov	r4, r3
   15e34:	mov	r3, #0
   15e38:	mov	r2, r5
   15e3c:	add	r1, sp, #8
   15e40:	add	r0, sp, #4
   15e44:	bl	159a0 <__assert_fail@plt+0x4314>
   15e48:	add	r3, r4, #1
   15e4c:	cmp	r0, #0
   15e50:	bne	15e30 <__assert_fail@plt+0x47a4>
   15e54:	add	r0, r4, #2
   15e58:	lsl	r0, r0, #2
   15e5c:	bl	1144c <malloc@plt>
   15e60:	subs	r9, r0, #0
   15e64:	beq	15ee0 <__assert_fail@plt+0x4854>
   15e68:	mov	r3, #0
   15e6c:	mov	r2, r5
   15e70:	add	r1, sp, #8
   15e74:	add	r0, sp, #4
   15e78:	str	r6, [sp, #4]
   15e7c:	bl	159a0 <__assert_fail@plt+0x4314>
   15e80:	cmp	r0, #0
   15e84:	beq	15f14 <__assert_fail@plt+0x4888>
   15e88:	sub	r8, r9, #4
   15e8c:	mov	r6, #0
   15e90:	b	15eb4 <__assert_fail@plt+0x4828>
   15e94:	mov	r3, #0
   15e98:	mov	r2, r5
   15e9c:	add	r1, sp, #8
   15ea0:	add	r0, sp, #4
   15ea4:	bl	159a0 <__assert_fail@plt+0x4314>
   15ea8:	add	r6, r6, #1
   15eac:	cmp	r0, #0
   15eb0:	beq	15efc <__assert_fail@plt+0x4870>
   15eb4:	ldr	r1, [sp, #8]
   15eb8:	bl	11368 <strndup@plt>
   15ebc:	cmp	r0, #0
   15ec0:	mov	r4, r0
   15ec4:	str	r0, [r8, #4]!
   15ec8:	bne	15e94 <__assert_fail@plt+0x4808>
   15ecc:	mov	r0, r9
   15ed0:	bl	15b34 <__assert_fail@plt+0x44a8>
   15ed4:	mov	r0, r9
   15ed8:	bl	11344 <free@plt>
   15edc:	mov	r9, r4
   15ee0:	ldr	r2, [sp, #12]
   15ee4:	ldr	r3, [r7]
   15ee8:	mov	r0, r9
   15eec:	cmp	r2, r3
   15ef0:	bne	15f30 <__assert_fail@plt+0x48a4>
   15ef4:	add	sp, sp, #20
   15ef8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15efc:	add	r6, r9, r6, lsl #2
   15f00:	mov	r3, #0
   15f04:	str	r3, [r6]
   15f08:	b	15ee0 <__assert_fail@plt+0x4854>
   15f0c:	mov	r0, #4
   15f10:	b	15e5c <__assert_fail@plt+0x47d0>
   15f14:	mov	r6, r9
   15f18:	b	15f00 <__assert_fail@plt+0x4874>
   15f1c:	ldr	r3, [pc, #20]	; 15f38 <__assert_fail@plt+0x48ac>
   15f20:	mov	r2, #193	; 0xc1
   15f24:	ldr	r1, [pc, #16]	; 15f3c <__assert_fail@plt+0x48b0>
   15f28:	ldr	r0, [pc, #16]	; 15f40 <__assert_fail@plt+0x48b4>
   15f2c:	bl	1168c <__assert_fail@plt>
   15f30:	bl	113c8 <__stack_chk_fail@plt>
   15f34:	andeq	r7, r2, r0, lsr #27
   15f38:	ldrdeq	r7, [r1], -ip
   15f3c:	strdeq	r7, [r1], -r4
   15f40:	andeq	r6, r1, r0, lsl #25
   15f44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f48:	subs	r8, r1, #0
   15f4c:	mov	r6, r0
   15f50:	beq	16028 <__assert_fail@plt+0x499c>
   15f54:	mov	r0, r8
   15f58:	bl	114dc <strlen@plt>
   15f5c:	mov	r9, r0
   15f60:	cmp	r6, #0
   15f64:	beq	16004 <__assert_fail@plt+0x4978>
   15f68:	ldr	r7, [r6]
   15f6c:	cmp	r7, #0
   15f70:	beq	16004 <__assert_fail@plt+0x4978>
   15f74:	add	r6, r6, #4
   15f78:	mov	r5, r6
   15f7c:	mov	r0, r7
   15f80:	mov	r4, #0
   15f84:	b	15f9c <__assert_fail@plt+0x4910>
   15f88:	ldr	r0, [r5], #4
   15f8c:	cmp	r0, #0
   15f90:	beq	15fac <__assert_fail@plt+0x4920>
   15f94:	cmp	r4, #0
   15f98:	addne	r4, r4, r9
   15f9c:	bl	114dc <strlen@plt>
   15fa0:	cmp	r5, #0
   15fa4:	add	r4, r4, r0
   15fa8:	bne	15f88 <__assert_fail@plt+0x48fc>
   15fac:	add	r0, r4, #1
   15fb0:	bl	1144c <malloc@plt>
   15fb4:	subs	r5, r0, #0
   15fb8:	movne	r2, r5
   15fbc:	beq	16034 <__assert_fail@plt+0x49a8>
   15fc0:	mov	r1, r7
   15fc4:	mov	r0, r2
   15fc8:	bl	113a4 <stpcpy@plt>
   15fcc:	cmp	r6, #0
   15fd0:	mov	r1, r8
   15fd4:	mov	r3, r0
   15fd8:	mov	r2, r0
   15fdc:	beq	16018 <__assert_fail@plt+0x498c>
   15fe0:	ldr	r7, [r6], #4
   15fe4:	cmp	r7, #0
   15fe8:	beq	16018 <__assert_fail@plt+0x498c>
   15fec:	cmp	r3, r5
   15ff0:	mov	r2, r5
   15ff4:	beq	15fc0 <__assert_fail@plt+0x4934>
   15ff8:	bl	113a4 <stpcpy@plt>
   15ffc:	mov	r2, r0
   16000:	b	15fc0 <__assert_fail@plt+0x4934>
   16004:	mov	r0, #1
   16008:	bl	1144c <malloc@plt>
   1600c:	subs	r2, r0, #0
   16010:	movne	r5, r2
   16014:	beq	16034 <__assert_fail@plt+0x49a8>
   16018:	mov	r3, #0
   1601c:	strb	r3, [r2]
   16020:	mov	r0, r5
   16024:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16028:	ldr	r8, [pc, #12]	; 1603c <__assert_fail@plt+0x49b0>
   1602c:	mov	r9, #1
   16030:	b	15f60 <__assert_fail@plt+0x48d4>
   16034:	mov	r5, #0
   16038:	b	16020 <__assert_fail@plt+0x4994>
   1603c:	muleq	r1, r0, r9
   16040:	push	{r4, r5, r6, r7, r8, lr}
   16044:	subs	r4, r1, #0
   16048:	beq	160a4 <__assert_fail@plt+0x4a18>
   1604c:	ldr	r7, [r0]
   16050:	mov	r6, r0
   16054:	cmp	r7, #0
   16058:	beq	160ac <__assert_fail@plt+0x4a20>
   1605c:	mov	r0, r7
   16060:	bl	15b68 <__assert_fail@plt+0x44dc>
   16064:	mov	r3, #2
   16068:	adds	r3, r0, r3
   1606c:	mov	r5, r0
   16070:	bcs	160b8 <__assert_fail@plt+0x4a2c>
   16074:	lsl	r1, r3, #2
   16078:	mov	r0, r7
   1607c:	bl	113e0 <realloc@plt>
   16080:	subs	r3, r0, #0
   16084:	beq	160b8 <__assert_fail@plt+0x4a2c>
   16088:	add	r1, r3, r5, lsl #2
   1608c:	mov	r2, #0
   16090:	str	r4, [r3, r5, lsl #2]
   16094:	mov	r0, r2
   16098:	str	r2, [r1, #4]
   1609c:	str	r3, [r6]
   160a0:	pop	{r4, r5, r6, r7, r8, pc}
   160a4:	mov	r0, r4
   160a8:	pop	{r4, r5, r6, r7, r8, pc}
   160ac:	mov	r1, #8
   160b0:	mov	r5, r7
   160b4:	b	16078 <__assert_fail@plt+0x49ec>
   160b8:	mvn	r0, #11
   160bc:	pop	{r4, r5, r6, r7, r8, pc}
   160c0:	push	{r4, r5, r6, r7, r8, lr}
   160c4:	subs	r4, r1, #0
   160c8:	beq	1612c <__assert_fail@plt+0x4aa0>
   160cc:	mov	r6, r0
   160d0:	ldr	r0, [r4]
   160d4:	cmp	r0, #0
   160d8:	beq	1612c <__assert_fail@plt+0x4aa0>
   160dc:	mov	r7, r2
   160e0:	add	r4, r4, #4
   160e4:	b	16108 <__assert_fail@plt+0x4a7c>
   160e8:	bl	16040 <__assert_fail@plt+0x49b4>
   160ec:	subs	r8, r0, #0
   160f0:	blt	16138 <__assert_fail@plt+0x4aac>
   160f4:	cmp	r4, #0
   160f8:	beq	1612c <__assert_fail@plt+0x4aa0>
   160fc:	ldr	r0, [r4], #4
   16100:	cmp	r0, #0
   16104:	beq	1612c <__assert_fail@plt+0x4aa0>
   16108:	mov	r1, r7
   1610c:	bl	158e8 <__assert_fail@plt+0x425c>
   16110:	subs	r5, r0, #0
   16114:	mov	r1, r5
   16118:	mov	r0, r6
   1611c:	bne	160e8 <__assert_fail@plt+0x4a5c>
   16120:	mvn	r8, #11
   16124:	mov	r0, r8
   16128:	pop	{r4, r5, r6, r7, r8, pc}
   1612c:	mov	r8, #0
   16130:	mov	r0, r8
   16134:	pop	{r4, r5, r6, r7, r8, pc}
   16138:	mov	r0, r5
   1613c:	bl	11344 <free@plt>
   16140:	mov	r0, r8
   16144:	pop	{r4, r5, r6, r7, r8, pc}
   16148:	push	{r4, r5, r6, lr}
   1614c:	mov	r5, r0
   16150:	mov	r0, r1
   16154:	bl	113bc <strdup@plt>
   16158:	subs	r4, r0, #0
   1615c:	beq	1618c <__assert_fail@plt+0x4b00>
   16160:	mov	r0, r5
   16164:	mov	r1, r4
   16168:	bl	16040 <__assert_fail@plt+0x49b4>
   1616c:	subs	r5, r0, #0
   16170:	blt	1617c <__assert_fail@plt+0x4af0>
   16174:	mov	r0, r5
   16178:	pop	{r4, r5, r6, pc}
   1617c:	mov	r0, r4
   16180:	bl	11344 <free@plt>
   16184:	mov	r0, r5
   16188:	pop	{r4, r5, r6, pc}
   1618c:	mvn	r5, #11
   16190:	b	16174 <__assert_fail@plt+0x4ae8>
   16194:	push	{r4, r5, r6, lr}
   16198:	subs	r4, r1, #0
   1619c:	beq	161dc <__assert_fail@plt+0x4b50>
   161a0:	ldr	r1, [r4]
   161a4:	cmp	r1, #0
   161a8:	beq	161dc <__assert_fail@plt+0x4b50>
   161ac:	mov	r5, r0
   161b0:	add	r4, r4, #4
   161b4:	b	161c4 <__assert_fail@plt+0x4b38>
   161b8:	ldr	r1, [r4], #4
   161bc:	cmp	r1, #0
   161c0:	beq	161dc <__assert_fail@plt+0x4b50>
   161c4:	mov	r0, r5
   161c8:	bl	16148 <__assert_fail@plt+0x4abc>
   161cc:	cmp	r0, #0
   161d0:	poplt	{r4, r5, r6, pc}
   161d4:	cmp	r4, #0
   161d8:	bne	161b8 <__assert_fail@plt+0x4b2c>
   161dc:	mov	r0, #0
   161e0:	pop	{r4, r5, r6, pc}
   161e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161e8:	subs	r6, r1, #0
   161ec:	beq	16278 <__assert_fail@plt+0x4bec>
   161f0:	ldr	r7, [r0]
   161f4:	mov	r5, r0
   161f8:	cmp	r7, #0
   161fc:	beq	16280 <__assert_fail@plt+0x4bf4>
   16200:	mov	r0, r7
   16204:	bl	15b68 <__assert_fail@plt+0x44dc>
   16208:	mov	r4, #2
   1620c:	adds	r4, r0, r4
   16210:	mov	r9, r0
   16214:	bcs	16294 <__assert_fail@plt+0x4c08>
   16218:	lsl	r4, r4, #2
   1621c:	mov	r0, r4
   16220:	bl	1144c <malloc@plt>
   16224:	subs	r8, r0, #0
   16228:	beq	16294 <__assert_fail@plt+0x4c08>
   1622c:	cmp	r9, #0
   16230:	sub	ip, r4, #4
   16234:	beq	16258 <__assert_fail@plt+0x4bcc>
   16238:	sub	r2, r4, #8
   1623c:	sub	r3, r7, #4
   16240:	add	r2, r2, r3
   16244:	mov	r1, r8
   16248:	ldr	r0, [r3, #4]!
   1624c:	cmp	r2, r3
   16250:	str	r0, [r1, #4]!
   16254:	bne	16248 <__assert_fail@plt+0x4bbc>
   16258:	mov	r4, #0
   1625c:	str	r6, [r8]
   16260:	mov	r0, r7
   16264:	str	r4, [r8, ip]
   16268:	bl	11344 <free@plt>
   1626c:	mov	r0, r4
   16270:	str	r8, [r5]
   16274:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16278:	mov	r0, r6
   1627c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16280:	mov	r0, #8
   16284:	bl	1144c <malloc@plt>
   16288:	subs	r8, r0, #0
   1628c:	movne	ip, #4
   16290:	bne	16258 <__assert_fail@plt+0x4bcc>
   16294:	mvn	r0, #11
   16298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1629c:	push	{r4, r5, r6, lr}
   162a0:	mov	r5, r1
   162a4:	bl	16040 <__assert_fail@plt+0x49b4>
   162a8:	subs	r4, r0, #0
   162ac:	blt	162b8 <__assert_fail@plt+0x4c2c>
   162b0:	mov	r0, r4
   162b4:	pop	{r4, r5, r6, pc}
   162b8:	mov	r0, r5
   162bc:	bl	11344 <free@plt>
   162c0:	mov	r0, r4
   162c4:	pop	{r4, r5, r6, pc}
   162c8:	push	{r4, r5, r6, lr}
   162cc:	mov	r5, r1
   162d0:	bl	161e4 <__assert_fail@plt+0x4b58>
   162d4:	subs	r4, r0, #0
   162d8:	blt	162e4 <__assert_fail@plt+0x4c58>
   162dc:	mov	r0, r4
   162e0:	pop	{r4, r5, r6, pc}
   162e4:	mov	r0, r5
   162e8:	bl	11344 <free@plt>
   162ec:	mov	r0, r4
   162f0:	pop	{r4, r5, r6, pc}
   162f4:	subs	r3, r1, #0
   162f8:	beq	16300 <__assert_fail@plt+0x4c74>
   162fc:	b	16148 <__assert_fail@plt+0x4abc>
   16300:	mov	r0, r3
   16304:	bx	lr
   16308:	push	{r4, r5, r6, r7, r8, lr}
   1630c:	subs	r8, r0, #0
   16310:	beq	16380 <__assert_fail@plt+0x4cf4>
   16314:	cmp	r1, #0
   16318:	mov	r7, r1
   1631c:	beq	16388 <__assert_fail@plt+0x4cfc>
   16320:	ldr	r5, [r8]
   16324:	mov	r4, r8
   16328:	cmp	r5, #0
   1632c:	movne	r6, r8
   16330:	bne	16344 <__assert_fail@plt+0x4cb8>
   16334:	b	16378 <__assert_fail@plt+0x4cec>
   16338:	ldr	r5, [r6, #4]!
   1633c:	cmp	r5, #0
   16340:	beq	16378 <__assert_fail@plt+0x4cec>
   16344:	mov	r1, r7
   16348:	mov	r0, r5
   1634c:	bl	112fc <strcmp@plt>
   16350:	cmp	r0, #0
   16354:	movne	r3, r4
   16358:	strne	r5, [r3], #4
   1635c:	movne	r4, r3
   16360:	bne	16338 <__assert_fail@plt+0x4cac>
   16364:	mov	r0, r5
   16368:	bl	11344 <free@plt>
   1636c:	ldr	r5, [r6, #4]!
   16370:	cmp	r5, #0
   16374:	bne	16344 <__assert_fail@plt+0x4cb8>
   16378:	mov	r3, #0
   1637c:	str	r3, [r4]
   16380:	mov	r0, r8
   16384:	pop	{r4, r5, r6, r7, r8, pc}
   16388:	ldr	r3, [pc, #12]	; 1639c <__assert_fail@plt+0x4d10>
   1638c:	ldr	r2, [pc, #12]	; 163a0 <__assert_fail@plt+0x4d14>
   16390:	ldr	r1, [pc, #12]	; 163a4 <__assert_fail@plt+0x4d18>
   16394:	ldr	r0, [pc, #12]	; 163a8 <__assert_fail@plt+0x4d1c>
   16398:	bl	1168c <__assert_fail@plt>
   1639c:	andeq	r7, r1, r8, ror #15
   163a0:	andeq	r0, r0, sl, asr r1
   163a4:	strdeq	r7, [r1], -r4
   163a8:	andeq	r6, r1, r0, lsl #25
   163ac:	push	{r1, r2, r3}
   163b0:	mov	r1, #1
   163b4:	push	{r4, r5, r6, lr}
   163b8:	mov	r6, r0
   163bc:	ldr	r4, [pc, #124]	; 16440 <__assert_fail@plt+0x4db4>
   163c0:	sub	sp, sp, #20
   163c4:	add	ip, sp, #40	; 0x28
   163c8:	ldr	r0, [r4]
   163cc:	mov	r3, ip
   163d0:	str	r0, [sp, #12]
   163d4:	ldr	r2, [sp, #36]	; 0x24
   163d8:	add	r0, sp, #8
   163dc:	str	ip, [sp, #4]
   163e0:	bl	11518 <__vasprintf_chk@plt>
   163e4:	cmp	r0, #0
   163e8:	blt	16434 <__assert_fail@plt+0x4da8>
   163ec:	ldr	r5, [sp, #8]
   163f0:	mov	r0, r6
   163f4:	mov	r1, r5
   163f8:	bl	16040 <__assert_fail@plt+0x49b4>
   163fc:	subs	r6, r0, #0
   16400:	blt	16428 <__assert_fail@plt+0x4d9c>
   16404:	ldr	r2, [sp, #12]
   16408:	ldr	r3, [r4]
   1640c:	mov	r0, r6
   16410:	cmp	r2, r3
   16414:	bne	1643c <__assert_fail@plt+0x4db0>
   16418:	add	sp, sp, #20
   1641c:	pop	{r4, r5, r6, lr}
   16420:	add	sp, sp, #12
   16424:	bx	lr
   16428:	mov	r0, r5
   1642c:	bl	11344 <free@plt>
   16430:	b	16404 <__assert_fail@plt+0x4d78>
   16434:	mvn	r6, #11
   16438:	b	16404 <__assert_fail@plt+0x4d78>
   1643c:	bl	113c8 <__stack_chk_fail@plt>
   16440:	andeq	r7, r2, r0, lsr #27
   16444:	push	{r4, r5, r6, lr}
   16448:	sub	sp, sp, #8
   1644c:	ldr	r4, [pc, #112]	; 164c4 <__assert_fail@plt+0x4e38>
   16450:	mov	r3, r2
   16454:	mov	r6, r0
   16458:	ldr	ip, [r4]
   1645c:	mov	r2, r1
   16460:	mov	r0, sp
   16464:	mov	r1, #1
   16468:	str	ip, [sp, #4]
   1646c:	bl	11518 <__vasprintf_chk@plt>
   16470:	cmp	r0, #0
   16474:	blt	164b8 <__assert_fail@plt+0x4e2c>
   16478:	ldr	r5, [sp]
   1647c:	mov	r0, r6
   16480:	mov	r1, r5
   16484:	bl	16040 <__assert_fail@plt+0x49b4>
   16488:	subs	r6, r0, #0
   1648c:	blt	164ac <__assert_fail@plt+0x4e20>
   16490:	ldr	r2, [sp, #4]
   16494:	ldr	r3, [r4]
   16498:	mov	r0, r6
   1649c:	cmp	r2, r3
   164a0:	bne	164c0 <__assert_fail@plt+0x4e34>
   164a4:	add	sp, sp, #8
   164a8:	pop	{r4, r5, r6, pc}
   164ac:	mov	r0, r5
   164b0:	bl	11344 <free@plt>
   164b4:	b	16490 <__assert_fail@plt+0x4e04>
   164b8:	mvn	r6, #11
   164bc:	b	16490 <__assert_fail@plt+0x4e04>
   164c0:	bl	113c8 <__stack_chk_fail@plt>
   164c4:	andeq	r7, r2, r0, lsr #27
   164c8:	push	{r4, lr}
   164cc:	subs	r4, r0, #0
   164d0:	beq	16508 <__assert_fail@plt+0x4e7c>
   164d4:	bl	15b68 <__assert_fail@plt+0x44dc>
   164d8:	cmp	r0, #1
   164dc:	bls	16508 <__assert_fail@plt+0x4e7c>
   164e0:	lsr	ip, r0, #1
   164e4:	sub	r3, r4, #4
   164e8:	add	r0, r4, r0, lsl #2
   164ec:	add	ip, r3, ip, lsl #2
   164f0:	ldr	r2, [r3, #4]!
   164f4:	ldr	r1, [r0, #-4]!
   164f8:	cmp	r3, ip
   164fc:	str	r1, [r3]
   16500:	str	r2, [r0]
   16504:	bne	164f0 <__assert_fail@plt+0x4e64>
   16508:	mov	r0, r4
   1650c:	pop	{r4, pc}
   16510:	cmp	r3, #0
   16514:	cmpeq	r2, #0
   16518:	bne	16530 <__assert_fail@plt+0x4ea4>
   1651c:	cmp	r1, #0
   16520:	cmpeq	r0, #0
   16524:	mvnne	r1, #0
   16528:	mvnne	r0, #0
   1652c:	b	1654c <__assert_fail@plt+0x4ec0>
   16530:	sub	sp, sp, #8
   16534:	push	{sp, lr}
   16538:	bl	1655c <__assert_fail@plt+0x4ed0>
   1653c:	ldr	lr, [sp, #4]
   16540:	add	sp, sp, #8
   16544:	pop	{r2, r3}
   16548:	bx	lr
   1654c:	push	{r1, lr}
   16550:	mov	r0, #8
   16554:	bl	112e4 <raise@plt>
   16558:	pop	{r1, pc}
   1655c:	cmp	r1, r3
   16560:	cmpeq	r0, r2
   16564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16568:	mov	r4, r0
   1656c:	movcc	r0, #0
   16570:	mov	r5, r1
   16574:	ldr	lr, [sp, #36]	; 0x24
   16578:	movcc	r1, r0
   1657c:	bcc	16678 <__assert_fail@plt+0x4fec>
   16580:	cmp	r3, #0
   16584:	clzeq	ip, r2
   16588:	clzne	ip, r3
   1658c:	addeq	ip, ip, #32
   16590:	cmp	r5, #0
   16594:	clzeq	r1, r4
   16598:	addeq	r1, r1, #32
   1659c:	clzne	r1, r5
   165a0:	sub	ip, ip, r1
   165a4:	sub	sl, ip, #32
   165a8:	lsl	r9, r3, ip
   165ac:	rsb	fp, ip, #32
   165b0:	orr	r9, r9, r2, lsl sl
   165b4:	orr	r9, r9, r2, lsr fp
   165b8:	lsl	r8, r2, ip
   165bc:	cmp	r5, r9
   165c0:	cmpeq	r4, r8
   165c4:	movcc	r0, #0
   165c8:	movcc	r1, r0
   165cc:	bcc	165e8 <__assert_fail@plt+0x4f5c>
   165d0:	mov	r0, #1
   165d4:	subs	r4, r4, r8
   165d8:	lsl	r1, r0, sl
   165dc:	orr	r1, r1, r0, lsr fp
   165e0:	lsl	r0, r0, ip
   165e4:	sbc	r5, r5, r9
   165e8:	cmp	ip, #0
   165ec:	beq	16678 <__assert_fail@plt+0x4fec>
   165f0:	lsr	r6, r8, #1
   165f4:	orr	r6, r6, r9, lsl #31
   165f8:	lsr	r7, r9, #1
   165fc:	mov	r2, ip
   16600:	b	16624 <__assert_fail@plt+0x4f98>
   16604:	subs	r3, r4, r6
   16608:	sbc	r8, r5, r7
   1660c:	adds	r3, r3, r3
   16610:	adc	r8, r8, r8
   16614:	adds	r4, r3, #1
   16618:	adc	r5, r8, #0
   1661c:	subs	r2, r2, #1
   16620:	beq	16640 <__assert_fail@plt+0x4fb4>
   16624:	cmp	r5, r7
   16628:	cmpeq	r4, r6
   1662c:	bcs	16604 <__assert_fail@plt+0x4f78>
   16630:	adds	r4, r4, r4
   16634:	adc	r5, r5, r5
   16638:	subs	r2, r2, #1
   1663c:	bne	16624 <__assert_fail@plt+0x4f98>
   16640:	lsr	r3, r4, ip
   16644:	orr	r3, r3, r5, lsl fp
   16648:	lsr	r2, r5, ip
   1664c:	orr	r3, r3, r5, lsr sl
   16650:	adds	r0, r0, r4
   16654:	mov	r4, r3
   16658:	lsl	r3, r2, ip
   1665c:	orr	r3, r3, r4, lsl sl
   16660:	lsl	ip, r4, ip
   16664:	orr	r3, r3, r4, lsr fp
   16668:	adc	r1, r1, r5
   1666c:	subs	r0, r0, ip
   16670:	mov	r5, r2
   16674:	sbc	r1, r1, r3
   16678:	cmp	lr, #0
   1667c:	strdne	r4, [lr]
   16680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16684:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16688:	mov	r7, r0
   1668c:	ldr	r6, [pc, #72]	; 166dc <__assert_fail@plt+0x5050>
   16690:	ldr	r5, [pc, #72]	; 166e0 <__assert_fail@plt+0x5054>
   16694:	add	r6, pc, r6
   16698:	add	r5, pc, r5
   1669c:	sub	r6, r6, r5
   166a0:	mov	r8, r1
   166a4:	mov	r9, r2
   166a8:	bl	112b8 <calloc@plt-0x20>
   166ac:	asrs	r6, r6, #2
   166b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   166b4:	mov	r4, #0
   166b8:	add	r4, r4, #1
   166bc:	ldr	r3, [r5], #4
   166c0:	mov	r2, r9
   166c4:	mov	r1, r8
   166c8:	mov	r0, r7
   166cc:	blx	r3
   166d0:	cmp	r6, r4
   166d4:	bne	166b8 <__assert_fail@plt+0x502c>
   166d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166dc:	andeq	r1, r1, r0, lsl #14
   166e0:	strdeq	r1, [r1], -r8
   166e4:	bx	lr
   166e8:	ldr	r3, [pc, #12]	; 166fc <__assert_fail@plt+0x5070>
   166ec:	mov	r1, #0
   166f0:	add	r3, pc, r3
   166f4:	ldr	r2, [r3]
   166f8:	b	1150c <__cxa_atexit@plt>
   166fc:	andeq	r1, r1, ip, lsl #18

Disassembly of section .fini:

00016700 <.fini>:
   16700:	push	{r3, lr}
   16704:	pop	{r3, pc}
