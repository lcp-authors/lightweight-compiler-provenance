
raspbian-preinstalled/dd:     file format elf32-littlearm


Disassembly of section .init:

00011154 <.init>:
   11154:	push	{r3, lr}
   11158:	bl	13298 <__assert_fail@plt+0x1d94>
   1115c:	pop	{r3, pc}

Disassembly of section .plt:

00011160 <calloc@plt-0x14>:
   11160:	push	{lr}		; (str lr, [sp, #-4]!)
   11164:	ldr	lr, [pc, #4]	; 11170 <calloc@plt-0x4>
   11168:	add	lr, pc, lr
   1116c:	ldr	pc, [lr, #8]!
   11170:	muleq	r1, r0, lr

00011174 <calloc@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #118784	; 0x1d000
   1117c:	ldr	pc, [ip, #3728]!	; 0xe90

00011180 <fputs_unlocked@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #118784	; 0x1d000
   11188:	ldr	pc, [ip, #3720]!	; 0xe88

0001118c <raise@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #118784	; 0x1d000
   11194:	ldr	pc, [ip, #3712]!	; 0xe80

00011198 <fsync@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #118784	; 0x1d000
   111a0:	ldr	pc, [ip, #3704]!	; 0xe78

000111a4 <strcmp@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #118784	; 0x1d000
   111ac:	ldr	pc, [ip, #3696]!	; 0xe70

000111b0 <posix_fadvise64@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #118784	; 0x1d000
   111b8:	ldr	pc, [ip, #3688]!	; 0xe68

000111bc <read@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #118784	; 0x1d000
   111c4:	ldr	pc, [ip, #3680]!	; 0xe60

000111c8 <fflush@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #118784	; 0x1d000
   111d0:	ldr	pc, [ip, #3672]!	; 0xe58

000111d4 <sigprocmask@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #118784	; 0x1d000
   111dc:	ldr	pc, [ip, #3664]!	; 0xe50

000111e0 <memmove@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #118784	; 0x1d000
   111e8:	ldr	pc, [ip, #3656]!	; 0xe48

000111ec <free@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #118784	; 0x1d000
   111f4:	ldr	pc, [ip, #3648]!	; 0xe40

000111f8 <clock_gettime@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #118784	; 0x1d000
   11200:	ldr	pc, [ip, #3640]!	; 0xe38

00011204 <_exit@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #118784	; 0x1d000
   1120c:	ldr	pc, [ip, #3632]!	; 0xe30

00011210 <memcpy@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #118784	; 0x1d000
   11218:	ldr	pc, [ip, #3624]!	; 0xe28

0001121c <__strtoull_internal@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #118784	; 0x1d000
   11224:	ldr	pc, [ip, #3616]!	; 0xe20

00011228 <mbsinit@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #118784	; 0x1d000
   11230:	ldr	pc, [ip, #3608]!	; 0xe18

00011234 <ftruncate64@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #118784	; 0x1d000
   1123c:	ldr	pc, [ip, #3600]!	; 0xe10

00011240 <memcmp@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #118784	; 0x1d000
   11248:	ldr	pc, [ip, #3592]!	; 0xe08

0001124c <dcgettext@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #118784	; 0x1d000
   11254:	ldr	pc, [ip, #3584]!	; 0xe00

00011258 <__stack_chk_fail@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #118784	; 0x1d000
   11260:	ldr	pc, [ip, #3576]!	; 0xdf8

00011264 <dup2@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #118784	; 0x1d000
   1126c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011270 <realloc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #118784	; 0x1d000
   11278:	ldr	pc, [ip, #3560]!	; 0xde8

0001127c <sigismember@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #118784	; 0x1d000
   11284:	ldr	pc, [ip, #3552]!	; 0xde0

00011288 <textdomain@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3544]!	; 0xdd8

00011294 <iswprint@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3536]!	; 0xdd0

000112a0 <__fxstat64@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3528]!	; 0xdc8

000112ac <sigaction@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3520]!	; 0xdc0

000112b8 <__memcpy_chk@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3512]!	; 0xdb8

000112c4 <fwrite@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3504]!	; 0xdb0

000112d0 <ioctl@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3496]!	; 0xda8

000112dc <lseek64@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3488]!	; 0xda0

000112e8 <__ctype_get_mb_cur_max@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3480]!	; 0xd98

000112f4 <gettimeofday@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3472]!	; 0xd90

00011300 <__fpending@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3464]!	; 0xd88

0001130c <mbrtowc@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3456]!	; 0xd80

00011318 <error@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3448]!	; 0xd78

00011324 <open64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3440]!	; 0xd70

00011330 <getenv@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3432]!	; 0xd68

0001133c <malloc@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3424]!	; 0xd60

00011348 <error_at_line@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3416]!	; 0xd58

00011354 <sigaddset@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3408]!	; 0xd50

00011360 <__libc_start_main@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3400]!	; 0xd48

0001136c <__freading@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3392]!	; 0xd40

00011378 <__ctype_tolower_loc@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3384]!	; 0xd38

00011384 <__ctype_toupper_loc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3376]!	; 0xd30

00011390 <__gmon_start__@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3368]!	; 0xd28

0001139c <getopt_long@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3360]!	; 0xd20

000113a8 <__ctype_b_loc@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3352]!	; 0xd18

000113b4 <exit@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3344]!	; 0xd10

000113c0 <strlen@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3336]!	; 0xd08

000113cc <strchr@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3328]!	; 0xd00

000113d8 <getpagesize@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3320]!	; 0xcf8

000113e4 <__errno_location@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3312]!	; 0xcf0

000113f0 <__sprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3304]!	; 0xce8

000113fc <__cxa_atexit@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3296]!	; 0xce0

00011408 <memset@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3288]!	; 0xcd8

00011414 <__printf_chk@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3280]!	; 0xcd0

00011420 <write@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3272]!	; 0xcc8

0001142c <fileno@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3264]!	; 0xcc0

00011438 <__fprintf_chk@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3256]!	; 0xcb8

00011444 <fclose@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011450 <fseeko64@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #118784	; 0x1d000
   11458:	ldr	pc, [ip, #3240]!	; 0xca8

0001145c <fcntl64@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #118784	; 0x1d000
   11464:	ldr	pc, [ip, #3232]!	; 0xca0

00011468 <__overflow@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #118784	; 0x1d000
   11470:	ldr	pc, [ip, #3224]!	; 0xc98

00011474 <setlocale@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #118784	; 0x1d000
   1147c:	ldr	pc, [ip, #3216]!	; 0xc90

00011480 <sigemptyset@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #118784	; 0x1d000
   11488:	ldr	pc, [ip, #3208]!	; 0xc88

0001148c <strrchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #118784	; 0x1d000
   11494:	ldr	pc, [ip, #3200]!	; 0xc80

00011498 <nl_langinfo@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #118784	; 0x1d000
   114a0:	ldr	pc, [ip, #3192]!	; 0xc78

000114a4 <localeconv@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #118784	; 0x1d000
   114ac:	ldr	pc, [ip, #3184]!	; 0xc70

000114b0 <bindtextdomain@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #118784	; 0x1d000
   114b8:	ldr	pc, [ip, #3176]!	; 0xc68

000114bc <strncmp@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #118784	; 0x1d000
   114c4:	ldr	pc, [ip, #3168]!	; 0xc60

000114c8 <fdatasync@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #118784	; 0x1d000
   114d0:	ldr	pc, [ip, #3160]!	; 0xc58

000114d4 <abort@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #118784	; 0x1d000
   114dc:	ldr	pc, [ip, #3152]!	; 0xc50

000114e0 <close@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #118784	; 0x1d000
   114e8:	ldr	pc, [ip, #3144]!	; 0xc48

000114ec <dcngettext@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #118784	; 0x1d000
   114f4:	ldr	pc, [ip, #3136]!	; 0xc40

000114f8 <__snprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #118784	; 0x1d000
   11500:	ldr	pc, [ip, #3128]!	; 0xc38

00011504 <__assert_fail@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #118784	; 0x1d000
   1150c:	ldr	pc, [ip, #3120]!	; 0xc30

Disassembly of section .text:

00011510 <.text>:
   11510:	ldr	r3, [pc, #3912]	; 12460 <__assert_fail@plt+0xf5c>
   11514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11518:	sub	sp, sp, #340	; 0x154
   1151c:	ldr	r3, [r3]
   11520:	mov	r9, r0
   11524:	ldr	r0, [pc, #3896]	; 12464 <__assert_fail@plt+0xf60>
   11528:	mov	r8, r1
   1152c:	str	r3, [sp, #332]	; 0x14c
   11530:	bl	11330 <getenv@plt>
   11534:	mov	r4, r0
   11538:	ldr	r0, [pc, #3880]	; 12468 <__assert_fail@plt+0xf64>
   1153c:	bl	11480 <sigemptyset@plt>
   11540:	cmp	r4, #0
   11544:	beq	12bd0 <__assert_fail@plt+0x16cc>
   11548:	add	r2, sp, #192	; 0xc0
   1154c:	mov	r1, #0
   11550:	mov	r0, #2
   11554:	bl	112ac <sigaction@plt>
   11558:	ldr	r3, [sp, #192]	; 0xc0
   1155c:	cmp	r3, #1
   11560:	beq	11570 <__assert_fail@plt+0x6c>
   11564:	mov	r1, #2
   11568:	ldr	r0, [pc, #3832]	; 12468 <__assert_fail@plt+0xf64>
   1156c:	bl	11354 <sigaddset@plt>
   11570:	mov	r2, #128	; 0x80
   11574:	ldr	r1, [pc, #3820]	; 12468 <__assert_fail@plt+0xf64>
   11578:	add	r0, sp, #196	; 0xc4
   1157c:	bl	11210 <memcpy@plt>
   11580:	mov	r1, #10
   11584:	ldr	r0, [pc, #3804]	; 12468 <__assert_fail@plt+0xf64>
   11588:	bl	1127c <sigismember@plt>
   1158c:	cmp	r0, #0
   11590:	bne	1294c <__assert_fail@plt+0x1448>
   11594:	mov	r1, #2
   11598:	ldr	r0, [pc, #3784]	; 12468 <__assert_fail@plt+0xf64>
   1159c:	bl	1127c <sigismember@plt>
   115a0:	cmp	r0, #0
   115a4:	bne	12970 <__assert_fail@plt+0x146c>
   115a8:	ldr	r0, [r8]
   115ac:	bl	16338 <__assert_fail@plt+0x4e34>
   115b0:	ldr	r1, [pc, #3764]	; 1246c <__assert_fail@plt+0xf68>
   115b4:	mov	r0, #6
   115b8:	bl	11474 <setlocale@plt>
   115bc:	ldr	r1, [pc, #3756]	; 12470 <__assert_fail@plt+0xf6c>
   115c0:	ldr	r0, [pc, #3756]	; 12474 <__assert_fail@plt+0xf70>
   115c4:	bl	114b0 <bindtextdomain@plt>
   115c8:	ldr	r0, [pc, #3748]	; 12474 <__assert_fail@plt+0xf70>
   115cc:	bl	11288 <textdomain@plt>
   115d0:	ldr	r0, [pc, #3744]	; 12478 <__assert_fail@plt+0xf74>
   115d4:	bl	1c68c <__assert_fail@plt+0xb188>
   115d8:	bl	113d8 <getpagesize@plt>
   115dc:	ldr	r3, [pc, #3736]	; 1247c <__assert_fail@plt+0xf78>
   115e0:	ldr	r4, [pc, #3736]	; 12480 <__assert_fail@plt+0xf7c>
   115e4:	ldr	ip, [pc, #3736]	; 12484 <__assert_fail@plt+0xf80>
   115e8:	ldr	lr, [r3]
   115ec:	ldr	r1, [pc, #3732]	; 12488 <__assert_fail@plt+0xf84>
   115f0:	ldr	r2, [pc, #3732]	; 1248c <__assert_fail@plt+0xf88>
   115f4:	ldr	r3, [pc, #3732]	; 12490 <__assert_fail@plt+0xf8c>
   115f8:	mov	r6, #0
   115fc:	ldr	fp, [pc, #3728]	; 12494 <__assert_fail@plt+0xf90>
   11600:	str	lr, [sp]
   11604:	str	ip, [sp, #16]
   11608:	str	r1, [sp, #12]
   1160c:	str	r2, [sp, #8]
   11610:	str	r3, [sp, #4]
   11614:	str	r6, [sp, #20]
   11618:	ldr	r3, [pc, #3668]	; 12474 <__assert_fail@plt+0xf70>
   1161c:	ldr	r2, [pc, #3700]	; 12498 <__assert_fail@plt+0xf94>
   11620:	mov	r1, r8
   11624:	str	r0, [r4, #104]	; 0x68
   11628:	mov	r0, r9
   1162c:	bl	16258 <__assert_fail@plt+0x4d54>
   11630:	ldr	r3, [pc, #3684]	; 1249c <__assert_fail@plt+0xf98>
   11634:	str	r6, [sp]
   11638:	ldr	r2, [pc, #3628]	; 1246c <__assert_fail@plt+0xf68>
   1163c:	mov	r1, r8
   11640:	mov	r0, r9
   11644:	strb	r6, [fp, #16]
   11648:	bl	1139c <getopt_long@plt>
   1164c:	cmn	r0, #1
   11650:	addeq	r5, r4, #304	; 0x130
   11654:	addeq	r5, r5, #3
   11658:	moveq	r3, r5
   1165c:	bne	13018 <__assert_fail@plt+0x1b14>
   11660:	strb	r6, [r3, #1]!
   11664:	add	r6, r6, #1
   11668:	cmp	r6, #256	; 0x100
   1166c:	bne	11660 <__assert_fail@plt+0x15c>
   11670:	ldr	r3, [pc, #3624]	; 124a0 <__assert_fail@plt+0xf9c>
   11674:	ldr	r6, [r3]
   11678:	cmp	r9, r6
   1167c:	ble	12024 <__assert_fail@plt+0xb20>
   11680:	mov	r2, #0
   11684:	mov	r3, #0
   11688:	sub	r7, r6, #-1073741823	; 0xc0000001
   1168c:	strd	r2, [sp, #56]	; 0x38
   11690:	strd	r2, [sp, #48]	; 0x30
   11694:	mvn	r3, #0
   11698:	mvn	r2, #0
   1169c:	add	r7, r8, r7, lsl #2
   116a0:	strd	r2, [sp, #40]	; 0x28
   116a4:	mov	r3, #0
   116a8:	str	r3, [sp, #36]	; 0x24
   116ac:	ldr	sl, [r7, #4]!
   116b0:	mov	r1, #61	; 0x3d
   116b4:	mov	r0, sl
   116b8:	bl	113cc <strchr@plt>
   116bc:	subs	r8, r0, #0
   116c0:	beq	130a8 <__assert_fail@plt+0x1ba4>
   116c4:	ldr	r1, [pc, #3544]	; 124a4 <__assert_fail@plt+0xfa0>
   116c8:	add	r8, r8, #1
   116cc:	mov	r2, sl
   116d0:	mov	r3, #105	; 0x69
   116d4:	ldrb	r0, [r2], #1
   116d8:	cmp	r0, r3
   116dc:	bne	11ed0 <__assert_fail@plt+0x9cc>
   116e0:	ldrb	r3, [r1, #1]!
   116e4:	cmp	r3, #0
   116e8:	bne	116d4 <__assert_fail@plt+0x1d0>
   116ec:	ldrb	r3, [r2]
   116f0:	cmp	r3, #61	; 0x3d
   116f4:	cmpne	r3, #0
   116f8:	bne	11ed0 <__assert_fail@plt+0x9cc>
   116fc:	str	r8, [r4, #108]	; 0x6c
   11700:	add	r6, r6, #1
   11704:	cmp	r9, r6
   11708:	bne	116ac <__assert_fail@plt+0x1a8>
   1170c:	ldr	r3, [sp, #36]	; 0x24
   11710:	cmp	r3, #0
   11714:	strne	r3, [r4, #264]	; 0x108
   11718:	strne	r3, [r4, #256]	; 0x100
   1171c:	beq	12040 <__assert_fail@plt+0xb3c>
   11720:	ldr	r3, [r4, #292]	; 0x124
   11724:	ldr	r2, [pc, #3452]	; 124a8 <__assert_fail@plt+0xfa4>
   11728:	cmp	r3, #0
   1172c:	ldr	r7, [r4, #276]	; 0x114
   11730:	ldreq	r3, [r4, #272]	; 0x110
   11734:	biceq	r3, r3, #24
   11738:	streq	r3, [r4, #272]	; 0x110
   1173c:	ldr	r3, [r4, #248]	; 0xf8
   11740:	tst	r3, r2
   11744:	orrne	r3, r3, r2
   11748:	strne	r3, [r4, #248]	; 0xf8
   1174c:	ands	r9, r7, #1
   11750:	bne	131f8 <__assert_fail@plt+0x1cf4>
   11754:	ldr	r6, [r4, #248]	; 0xf8
   11758:	ands	r8, r6, #16
   1175c:	bne	13164 <__assert_fail@plt+0x1c60>
   11760:	ands	r3, r7, #12
   11764:	bne	12fd8 <__assert_fail@plt+0x1ad4>
   11768:	tst	r6, #8
   1176c:	ldrd	r0, [sp, #48]	; 0x30
   11770:	bne	12004 <__assert_fail@plt+0xb00>
   11774:	orrs	r3, r0, r1
   11778:	ldrne	r3, [pc, #3372]	; 124ac <__assert_fail@plt+0xfa8>
   1177c:	strdne	r0, [r3, #-8]
   11780:	tst	r6, #4
   11784:	mvn	r2, #0
   11788:	mvn	r3, #0
   1178c:	ldrd	r0, [sp, #40]	; 0x28
   11790:	beq	12704 <__assert_fail@plt+0x1200>
   11794:	cmp	r1, r3
   11798:	cmpeq	r0, r2
   1179c:	beq	117b4 <__assert_fail@plt+0x2b0>
   117a0:	ldr	r2, [r4, #256]	; 0x100
   117a4:	mov	r3, #0
   117a8:	bl	1c474 <__assert_fail@plt+0xaf70>
   117ac:	strd	r0, [fp, #24]
   117b0:	str	r2, [r4, #580]	; 0x244
   117b4:	tst	r7, #16
   117b8:	beq	126f0 <__assert_fail@plt+0x11ec>
   117bc:	ldrd	r0, [sp, #56]	; 0x38
   117c0:	orrs	r3, r0, r1
   117c4:	beq	117e0 <__assert_fail@plt+0x2dc>
   117c8:	ldr	r2, [r4, #264]	; 0x108
   117cc:	mov	r3, #0
   117d0:	bl	1c474 <__assert_fail@plt+0xaf70>
   117d4:	ldr	r8, [pc, #3428]	; 12540 <__assert_fail@plt+0x103c>
   117d8:	strd	r0, [r8, #-8]
   117dc:	strd	r2, [r8]
   117e0:	ldr	r3, [r4, #272]	; 0x110
   117e4:	and	r2, r6, #1
   117e8:	and	r1, r3, #2048	; 0x800
   117ec:	orrs	r1, r1, r2
   117f0:	bne	12444 <__assert_fail@plt+0xf40>
   117f4:	ldr	r2, [pc, #3248]	; 124ac <__assert_fail@plt+0xfa8>
   117f8:	ldrd	r0, [r2, #-8]
   117fc:	orrs	r2, r0, r1
   11800:	beq	12ac0 <__assert_fail@plt+0x15bc>
   11804:	ldr	r1, [pc, #3368]	; 12534 <__assert_fail@plt+0x1030>
   11808:	mov	r2, #1
   1180c:	strb	r2, [r4, #252]	; 0xfc
   11810:	and	r2, r3, #7
   11814:	sub	r9, r2, #1
   11818:	ands	r9, r9, r2
   1181c:	bic	r2, r6, #1
   11820:	str	r1, [r4, #304]	; 0x130
   11824:	str	r2, [r4, #248]	; 0xf8
   11828:	bne	13140 <__assert_fail@plt+0x1c3c>
   1182c:	and	r2, r3, #24
   11830:	sub	r8, r2, #1
   11834:	ands	r8, r8, r2
   11838:	movne	r2, #5
   1183c:	ldrne	r1, [pc, #3180]	; 124b0 <__assert_fail@plt+0xfac>
   11840:	bne	13148 <__assert_fail@plt+0x1c44>
   11844:	and	r2, r3, #96	; 0x60
   11848:	sub	r9, r2, #1
   1184c:	ands	r9, r9, r2
   11850:	movne	r2, #5
   11854:	ldrne	r1, [pc, #3160]	; 124b4 <__assert_fail@plt+0xfb0>
   11858:	bne	13148 <__assert_fail@plt+0x1c44>
   1185c:	and	r2, r3, #12288	; 0x3000
   11860:	sub	r8, r2, #1
   11864:	ands	r8, r8, r2
   11868:	movne	r2, #5
   1186c:	ldrne	r1, [pc, #3140]	; 124b8 <__assert_fail@plt+0xfb4>
   11870:	bne	13148 <__assert_fail@plt+0x1c44>
   11874:	ldr	r2, [pc, #3136]	; 124bc <__assert_fail@plt+0xfb8>
   11878:	and	r6, r6, r2
   1187c:	and	r2, r2, r7
   11880:	sub	r1, r2, #1
   11884:	sub	r0, r6, #1
   11888:	and	r2, r2, r1
   1188c:	and	r0, r0, r6
   11890:	orrs	r2, r0, r2
   11894:	str	r2, [sp, #40]	; 0x28
   11898:	ldrne	r1, [pc, #3104]	; 124c0 <__assert_fail@plt+0xfbc>
   1189c:	movne	r2, #5
   118a0:	bne	13148 <__assert_fail@plt+0x1c44>
   118a4:	tst	r7, #1024	; 0x400
   118a8:	beq	118b4 <__assert_fail@plt+0x3b0>
   118ac:	tst	r3, #512	; 0x200
   118b0:	beq	12be0 <__assert_fail@plt+0x16dc>
   118b4:	ldr	r1, [r4, #248]	; 0xf8
   118b8:	tst	r1, #2
   118bc:	beq	118ec <__assert_fail@plt+0x3e8>
   118c0:	ldrd	r2, [fp, #24]
   118c4:	mov	r0, #1
   118c8:	bic	r1, r1, #2
   118cc:	orrs	r3, r2, r3
   118d0:	movne	r3, #0
   118d4:	ldreq	r3, [r4, #580]	; 0x244
   118d8:	clzeq	r3, r3
   118dc:	strb	r0, [r4, #600]	; 0x258
   118e0:	lsreq	r3, r3, #5
   118e4:	str	r1, [r4, #248]	; 0xf8
   118e8:	strb	r3, [r4, #88]	; 0x58
   118ec:	ldr	r1, [r4, #276]	; 0x114
   118f0:	tst	r1, #2
   118f4:	beq	11924 <__assert_fail@plt+0x420>
   118f8:	ldrd	r2, [fp, #24]
   118fc:	mov	r0, #1
   11900:	bic	r1, r1, #2
   11904:	orrs	r3, r2, r3
   11908:	movne	r3, #0
   1190c:	ldreq	r3, [r4, #580]	; 0x244
   11910:	clzeq	r3, r3
   11914:	strb	r0, [r4, #281]	; 0x119
   11918:	lsreq	r3, r3, #5
   1191c:	str	r1, [r4, #276]	; 0x114
   11920:	strb	r3, [r4, #89]	; 0x59
   11924:	ldr	r6, [r4, #272]	; 0x110
   11928:	tst	r6, #1
   1192c:	beq	11960 <__assert_fail@plt+0x45c>
   11930:	ldr	r3, [pc, #3024]	; 12508 <__assert_fail@plt+0x1004>
   11934:	ldr	r1, [pc, #3016]	; 12504 <__assert_fail@plt+0x1000>
   11938:	add	r0, r3, #255	; 0xff
   1193c:	mov	r3, r5
   11940:	ldrb	r2, [r3, #1]!
   11944:	add	r2, r1, r2
   11948:	cmp	r0, r3
   1194c:	ldrb	r2, [r2, #712]	; 0x2c8
   11950:	strb	r2, [r3]
   11954:	bne	11940 <__assert_fail@plt+0x43c>
   11958:	mov	r3, #1
   1195c:	strb	r3, [r4, #601]	; 0x259
   11960:	tst	r6, #64	; 0x40
   11964:	beq	12714 <__assert_fail@plt+0x1210>
   11968:	bl	11384 <__ctype_toupper_loc@plt>
   1196c:	ldr	r3, [pc, #2964]	; 12508 <__assert_fail@plt+0x1004>
   11970:	add	r1, r3, #255	; 0xff
   11974:	mov	r3, r5
   11978:	ldr	r0, [r0]
   1197c:	ldrb	r2, [r3, #1]!
   11980:	cmp	r1, r3
   11984:	ldr	r2, [r0, r2, lsl #2]
   11988:	strb	r2, [r3]
   1198c:	bne	1197c <__assert_fail@plt+0x478>
   11990:	mov	r3, #1
   11994:	strb	r3, [r4, #601]	; 0x259
   11998:	tst	r6, #2
   1199c:	beq	126c0 <__assert_fail@plt+0x11bc>
   119a0:	ldr	r3, [pc, #2912]	; 12508 <__assert_fail@plt+0x1004>
   119a4:	ldr	r1, [pc, #2904]	; 12504 <__assert_fail@plt+0x1000>
   119a8:	add	r2, r3, #255	; 0xff
   119ac:	ldrb	r3, [r5, #1]!
   119b0:	add	r3, r1, r3
   119b4:	cmp	r2, r5
   119b8:	ldrb	r3, [r3, #968]	; 0x3c8
   119bc:	strb	r3, [r5]
   119c0:	bne	119ac <__assert_fail@plt+0x4a8>
   119c4:	mov	r3, #1
   119c8:	mov	r2, #37	; 0x25
   119cc:	strb	r3, [r4, #601]	; 0x259
   119d0:	mov	r3, #64	; 0x40
   119d4:	strb	r2, [fp, #17]
   119d8:	strb	r3, [fp, #18]
   119dc:	bl	113e4 <__errno_location@plt>
   119e0:	ldr	r6, [r4, #108]	; 0x6c
   119e4:	ldr	r7, [r4, #248]	; 0xf8
   119e8:	cmp	r6, #0
   119ec:	str	r0, [sp, #36]	; 0x24
   119f0:	beq	12a18 <__assert_fail@plt+0x1514>
   119f4:	mov	r3, #0
   119f8:	mov	r2, r7
   119fc:	mov	r1, r6
   11a00:	mov	r0, r3
   11a04:	bl	14118 <__assert_fail@plt+0x2c14>
   11a08:	cmp	r0, #0
   11a0c:	blt	13190 <__assert_fail@plt+0x1c8c>
   11a10:	mov	r3, #1
   11a14:	str	r3, [sp]
   11a18:	mov	r2, #0
   11a1c:	mov	r3, #0
   11a20:	mov	r0, #0
   11a24:	bl	112dc <lseek64@plt>
   11a28:	ldr	r6, [r4, #276]	; 0x114
   11a2c:	mov	r2, r0
   11a30:	mov	r3, r1
   11a34:	cmp	r2, #0
   11a38:	sbcs	r0, r3, #0
   11a3c:	movlt	r3, #0
   11a40:	movlt	r2, #0
   11a44:	mvn	r1, r1
   11a48:	strd	r2, [r4, #96]	; 0x60
   11a4c:	ldr	r3, [sp, #36]	; 0x24
   11a50:	lsr	r1, r1, #31
   11a54:	strb	r1, [r4, #90]	; 0x5a
   11a58:	ldr	r1, [r4, #112]	; 0x70
   11a5c:	ldr	r3, [r3]
   11a60:	cmp	r1, #0
   11a64:	str	r3, [r4, #604]	; 0x25c
   11a68:	beq	12ba0 <__assert_fail@plt+0x169c>
   11a6c:	ldr	r8, [pc, #2764]	; 12540 <__assert_fail@plt+0x103c>
   11a70:	ldr	r0, [r4, #272]	; 0x110
   11a74:	ldrd	r2, [r8, #-8]
   11a78:	asr	ip, r0, #6
   11a7c:	and	ip, ip, #128	; 0x80
   11a80:	tst	r0, #4096	; 0x1000
   11a84:	orr	r6, ip, r6
   11a88:	movne	ip, #0
   11a8c:	moveq	ip, #64	; 0x40
   11a90:	orrs	r3, r2, r3
   11a94:	orr	r6, r6, ip
   11a98:	bne	12790 <__assert_fail@plt+0x128c>
   11a9c:	tst	r0, #512	; 0x200
   11aa0:	movne	r3, #0
   11aa4:	moveq	r3, #512	; 0x200
   11aa8:	orr	r6, r6, r3
   11aac:	orr	r2, r6, #1
   11ab0:	ldr	r1, [r4, #112]	; 0x70
   11ab4:	ldr	r3, [pc, #2644]	; 12510 <__assert_fail@plt+0x100c>
   11ab8:	mov	r0, #1
   11abc:	bl	14118 <__assert_fail@plt+0x2c14>
   11ac0:	cmp	r0, #0
   11ac4:	movlt	r2, #5
   11ac8:	ldrlt	r1, [pc, #2760]	; 12598 <__assert_fail@plt+0x1094>
   11acc:	blt	130e0 <__assert_fail@plt+0x1bdc>
   11ad0:	ldrd	r2, [r8, #-8]
   11ad4:	orrs	r1, r2, r3
   11ad8:	beq	11b5c <__assert_fail@plt+0x658>
   11adc:	ldr	r9, [r4, #272]	; 0x110
   11ae0:	ands	r9, r9, #512	; 0x200
   11ae4:	bne	11b5c <__assert_fail@plt+0x658>
   11ae8:	ldr	sl, [r4, #264]	; 0x108
   11aec:	ldrd	r6, [r8]
   11af0:	strd	r2, [sp, #48]	; 0x30
   11af4:	umull	r0, r1, sl, r2
   11af8:	mla	r1, sl, r3, r1
   11afc:	adds	r6, r0, r6
   11b00:	adc	r7, r1, r7
   11b04:	mov	r2, sl
   11b08:	mov	r3, r9
   11b0c:	mvn	r0, #0
   11b10:	mvn	r1, #-2147483648	; 0x80000000
   11b14:	bl	1c3a0 <__assert_fail@plt+0xae9c>
   11b18:	ldrd	r2, [sp, #48]	; 0x30
   11b1c:	cmp	r3, r1
   11b20:	cmpeq	r2, r0
   11b24:	ldrls	r5, [sp, #36]	; 0x24
   11b28:	bls	11b3c <__assert_fail@plt+0x638>
   11b2c:	b	13114 <__assert_fail@plt+0x1c10>
   11b30:	ldr	r9, [r5]
   11b34:	cmp	r9, #4
   11b38:	bne	12d10 <__assert_fail@plt+0x180c>
   11b3c:	bl	14054 <__assert_fail@plt+0x2b50>
   11b40:	mov	r2, r6
   11b44:	mov	r3, r7
   11b48:	mov	r0, #1
   11b4c:	bl	11234 <ftruncate64@plt>
   11b50:	cmp	r0, #0
   11b54:	blt	11b30 <__assert_fail@plt+0x62c>
   11b58:	bne	12d08 <__assert_fail@plt+0x1804>
   11b5c:	bl	155c4 <__assert_fail@plt+0x40c0>
   11b60:	ldr	ip, [pc, #2396]	; 124c4 <__assert_fail@plt+0xfc0>
   11b64:	mov	lr, #0
   11b68:	adds	ip, r0, ip
   11b6c:	mov	r2, ip
   11b70:	adc	lr, r1, lr
   11b74:	ldr	ip, [pc, #2380]	; 124c8 <__assert_fail@plt+0xfc4>
   11b78:	mov	r3, lr
   11b7c:	str	r0, [r4, #16]
   11b80:	strd	r2, [ip], #-32	; 0xffffffe0
   11b84:	ldrd	r2, [ip, #-8]
   11b88:	str	r1, [r4, #20]
   11b8c:	strd	r2, [sp, #48]	; 0x30
   11b90:	orrs	r3, r2, r3
   11b94:	bne	11ba4 <__assert_fail@plt+0x6a0>
   11b98:	ldr	r3, [r4, #576]	; 0x240
   11b9c:	cmp	r3, #0
   11ba0:	beq	11c18 <__assert_fail@plt+0x714>
   11ba4:	ldr	r9, [r4, #256]	; 0x100
   11ba8:	ldrd	r2, [sp, #48]	; 0x30
   11bac:	mov	r0, #0
   11bb0:	stm	sp, {r9, ip}
   11bb4:	ldr	r1, [r4, #108]	; 0x6c
   11bb8:	ldrd	r6, [r4, #96]	; 0x60
   11bbc:	ldr	sl, [r4, #576]	; 0x240
   11bc0:	bl	14a00 <__assert_fail@plt+0x34fc>
   11bc4:	orrs	r3, r0, r1
   11bc8:	bne	12748 <__assert_fail@plt+0x1244>
   11bcc:	ldrd	r0, [sp, #48]	; 0x30
   11bd0:	ldrb	ip, [r4, #300]	; 0x12c
   11bd4:	umull	r2, r3, r9, r0
   11bd8:	mla	r3, r9, r1, r3
   11bdc:	adds	r0, r6, sl
   11be0:	adc	r1, r7, #0
   11be4:	adds	lr, r2, r0
   11be8:	adc	r3, r3, r1
   11bec:	str	r3, [sp, #76]	; 0x4c
   11bf0:	str	lr, [sp, #72]	; 0x48
   11bf4:	ldrd	r6, [r4, #96]	; 0x60
   11bf8:	ldrd	r0, [sp, #72]	; 0x48
   11bfc:	eor	r3, ip, #1
   11c00:	cmp	r1, r7
   11c04:	cmpeq	r0, r6
   11c08:	moveq	r3, #0
   11c0c:	andne	r3, r3, #1
   11c10:	cmp	r3, #0
   11c14:	bne	12748 <__assert_fail@plt+0x1244>
   11c18:	ldr	r2, [r8, #-8]
   11c1c:	ldr	ip, [r4, #592]	; 0x250
   11c20:	ldr	r3, [r8, #-4]
   11c24:	ldr	lr, [r8, #4]
   11c28:	orr	r0, r2, ip
   11c2c:	orr	r1, r3, lr
   11c30:	orrs	r1, r0, r1
   11c34:	beq	11cbc <__assert_fail@plt+0x7b8>
   11c38:	ldr	r0, [r4, #264]	; 0x108
   11c3c:	add	r1, sp, #88	; 0x58
   11c40:	str	ip, [sp, #88]	; 0x58
   11c44:	strd	r0, [sp]
   11c48:	mov	r0, #1
   11c4c:	ldr	r1, [r4, #112]	; 0x70
   11c50:	bl	14a00 <__assert_fail@plt+0x34fc>
   11c54:	mov	r6, r0
   11c58:	mov	r7, r1
   11c5c:	orrs	r3, r6, r7
   11c60:	beq	1292c <__assert_fail@plt+0x1428>
   11c64:	ldr	r2, [r4, #264]	; 0x108
   11c68:	mov	r1, #0
   11c6c:	ldr	r0, [r4, #268]	; 0x10c
   11c70:	bl	11408 <memset@plt>
   11c74:	ldr	r5, [r4, #264]	; 0x108
   11c78:	ldr	r0, [r4, #268]	; 0x10c
   11c7c:	mov	r1, r5
   11c80:	bl	144f8 <__assert_fail@plt+0x2ff4>
   11c84:	cmp	r5, r0
   11c88:	bne	13020 <__assert_fail@plt+0x1b1c>
   11c8c:	subs	r6, r6, #1
   11c90:	sbc	r7, r7, #0
   11c94:	orrs	r3, r6, r7
   11c98:	bne	11c74 <__assert_fail@plt+0x770>
   11c9c:	ldr	r6, [sp, #88]	; 0x58
   11ca0:	cmp	r6, #0
   11ca4:	beq	11cbc <__assert_fail@plt+0x7b8>
   11ca8:	mov	r1, r6
   11cac:	ldr	r0, [r4, #268]	; 0x10c
   11cb0:	bl	144f8 <__assert_fail@plt+0x2ff4>
   11cb4:	cmp	r0, r6
   11cb8:	bne	13020 <__assert_fail@plt+0x1b1c>
   11cbc:	ldrd	r2, [fp, #24]
   11cc0:	orrs	r3, r2, r3
   11cc4:	bne	11cd4 <__assert_fail@plt+0x7d0>
   11cc8:	ldr	r3, [r4, #580]	; 0x244
   11ccc:	cmp	r3, #0
   11cd0:	beq	129a0 <__assert_fail@plt+0x149c>
   11cd4:	ldr	r3, [r4, #260]	; 0x104
   11cd8:	cmp	r3, #0
   11cdc:	beq	12a44 <__assert_fail@plt+0x1540>
   11ce0:	bl	144ac <__assert_fail@plt+0x2fa8>
   11ce4:	mov	r5, #0
   11ce8:	ldr	r3, [fp]
   11cec:	cmp	r3, #4
   11cf0:	beq	11e90 <__assert_fail@plt+0x98c>
   11cf4:	ldr	r2, [r4, #56]	; 0x38
   11cf8:	ldr	r3, [r4, #48]	; 0x30
   11cfc:	ldr	r0, [r4, #52]	; 0x34
   11d00:	ldr	r1, [r4, #60]	; 0x3c
   11d04:	ldr	r8, [r4, #580]	; 0x244
   11d08:	adds	r3, r3, r2
   11d0c:	ldrd	r6, [fp, #24]
   11d10:	str	r3, [sp, #24]
   11d14:	adc	r3, r0, r1
   11d18:	adds	r1, r8, #0
   11d1c:	str	r3, [sp, #28]
   11d20:	movne	r1, #1
   11d24:	adds	r2, r6, r1
   11d28:	ldrd	r0, [sp, #24]
   11d2c:	adc	r3, r7, #0
   11d30:	cmp	r1, r3
   11d34:	cmpeq	r0, r2
   11d38:	ldr	r1, [r4, #272]	; 0x110
   11d3c:	bcs	127e4 <__assert_fail@plt+0x12e0>
   11d40:	and	r3, r1, #1280	; 0x500
   11d44:	cmp	r3, #1280	; 0x500
   11d48:	ldr	r3, [r4, #260]	; 0x104
   11d4c:	bne	11d68 <__assert_fail@plt+0x864>
   11d50:	ands	r1, r1, #24
   11d54:	mov	r0, r3
   11d58:	movne	r1, #32
   11d5c:	ldr	r2, [r4, #256]	; 0x100
   11d60:	bl	11408 <memset@plt>
   11d64:	mov	r3, r0
   11d68:	ldrd	r0, [sp, #24]
   11d6c:	cmp	r1, r7
   11d70:	cmpeq	r0, r6
   11d74:	movcs	r2, r8
   11d78:	movcs	r1, r3
   11d7c:	movcc	r1, r3
   11d80:	ldrcc	r2, [r4, #256]	; 0x100
   11d84:	ldr	r6, [r4, #304]	; 0x130
   11d88:	mov	r0, #0
   11d8c:	blx	r6
   11d90:	cmp	r0, #0
   11d94:	mov	ip, r0
   11d98:	ble	120c0 <__assert_fail@plt+0xbbc>
   11d9c:	ldrd	r8, [r4, #96]	; 0x60
   11da0:	asr	r3, r0, #31
   11da4:	mov	r2, r0
   11da8:	adds	r0, r0, r8
   11dac:	adcs	r1, r3, r9
   11db0:	mov	r6, #0
   11db4:	mov	r7, #0
   11db8:	movcs	r6, #1
   11dbc:	movcs	r7, #0
   11dc0:	orrs	lr, r6, r7
   11dc4:	strd	r0, [r4, #96]	; 0x60
   11dc8:	movne	r1, #1
   11dcc:	strbne	r1, [r4, #300]	; 0x12c
   11dd0:	ldrb	r1, [r4, #600]	; 0x258
   11dd4:	mov	r6, ip
   11dd8:	cmp	r1, #0
   11ddc:	bne	122d0 <__assert_fail@plt+0xdcc>
   11de0:	ldr	r7, [r4, #256]	; 0x100
   11de4:	ldr	r9, [r4, #260]	; 0x104
   11de8:	cmp	r6, r7
   11dec:	bcs	121dc <__assert_fail@plt+0xcd8>
   11df0:	ldr	r3, [r4, #48]	; 0x30
   11df4:	ldr	r2, [r4, #52]	; 0x34
   11df8:	ldr	r1, [r4, #272]	; 0x110
   11dfc:	adds	r3, r3, #1
   11e00:	adc	r2, r2, #0
   11e04:	tst	r1, #1024	; 0x400
   11e08:	str	r3, [r4, #48]	; 0x30
   11e0c:	str	r2, [r4, #52]	; 0x34
   11e10:	moveq	r5, r6
   11e14:	beq	11e44 <__assert_fail@plt+0x940>
   11e18:	tst	r1, #256	; 0x100
   11e1c:	movne	r5, r6
   11e20:	movne	r6, r7
   11e24:	bne	11e44 <__assert_fail@plt+0x940>
   11e28:	ands	r1, r1, #24
   11e2c:	sub	r2, r7, r6
   11e30:	add	r0, r9, r6
   11e34:	movne	r1, #32
   11e38:	bl	11408 <memset@plt>
   11e3c:	mov	r5, r6
   11e40:	mov	r6, r7
   11e44:	ldr	r0, [r4, #268]	; 0x10c
   11e48:	cmp	r0, r9
   11e4c:	beq	12204 <__assert_fail@plt+0xd00>
   11e50:	ldrb	r3, [r4, #601]	; 0x259
   11e54:	cmp	r3, #0
   11e58:	bne	12344 <__assert_fail@plt+0xe40>
   11e5c:	ldr	ip, [r4, #272]	; 0x110
   11e60:	tst	ip, #128	; 0x80
   11e64:	bne	12260 <__assert_fail@plt+0xd5c>
   11e68:	tst	ip, #8
   11e6c:	bne	12250 <__assert_fail@plt+0xd4c>
   11e70:	tst	ip, #16
   11e74:	beq	12080 <__assert_fail@plt+0xb7c>
   11e78:	mov	r1, r6
   11e7c:	mov	r0, r9
   11e80:	bl	148e4 <__assert_fail@plt+0x33e0>
   11e84:	ldr	r3, [fp]
   11e88:	cmp	r3, #4
   11e8c:	bne	11cf4 <__assert_fail@plt+0x7f0>
   11e90:	bl	155c4 <__assert_fail@plt+0x40c0>
   11e94:	ldr	r3, [pc, #1580]	; 124c8 <__assert_fail@plt+0xfc4>
   11e98:	ldrd	r2, [r3]
   11e9c:	cmp	r0, r2
   11ea0:	sbcs	r3, r1, r3
   11ea4:	blt	11cf4 <__assert_fail@plt+0x7f0>
   11ea8:	bl	13378 <__assert_fail@plt+0x1e74>
   11eac:	ldr	r1, [pc, #1556]	; 124c8 <__assert_fail@plt+0xfc4>
   11eb0:	ldr	r0, [pc, #1548]	; 124c4 <__assert_fail@plt+0xfc0>
   11eb4:	ldr	r3, [r1]
   11eb8:	ldr	r2, [r1, #4]
   11ebc:	adds	r3, r3, r0
   11ec0:	adc	r2, r2, #0
   11ec4:	str	r3, [r1]
   11ec8:	str	r2, [r1, #4]
   11ecc:	b	11cf4 <__assert_fail@plt+0x7f0>
   11ed0:	ldr	r0, [pc, #1524]	; 124cc <__assert_fail@plt+0xfc8>
   11ed4:	mov	r2, sl
   11ed8:	mov	r3, #111	; 0x6f
   11edc:	ldrb	r1, [r2], #1
   11ee0:	cmp	r1, r3
   11ee4:	bne	11f08 <__assert_fail@plt+0xa04>
   11ee8:	ldrb	r3, [r0, #1]!
   11eec:	cmp	r3, #0
   11ef0:	bne	11edc <__assert_fail@plt+0x9d8>
   11ef4:	ldrb	r3, [r2]
   11ef8:	cmp	r3, #61	; 0x3d
   11efc:	cmpne	r3, #0
   11f00:	streq	r8, [r4, #112]	; 0x70
   11f04:	beq	11700 <__assert_fail@plt+0x1fc>
   11f08:	ldr	r0, [pc, #1472]	; 124d0 <__assert_fail@plt+0xfcc>
   11f0c:	mov	r3, sl
   11f10:	mov	r2, #99	; 0x63
   11f14:	ldrb	r1, [r3], #1
   11f18:	cmp	r1, r2
   11f1c:	bne	11f5c <__assert_fail@plt+0xa58>
   11f20:	ldrb	r2, [r0, #1]!
   11f24:	cmp	r2, #0
   11f28:	bne	11f14 <__assert_fail@plt+0xa10>
   11f2c:	ldrb	r3, [r3]
   11f30:	cmp	r3, #61	; 0x3d
   11f34:	cmpne	r3, #0
   11f38:	bne	11f5c <__assert_fail@plt+0xa58>
   11f3c:	ldr	r3, [pc, #1424]	; 124d4 <__assert_fail@plt+0xfd0>
   11f40:	mov	r0, r8
   11f44:	ldr	r1, [pc, #1420]	; 124d8 <__assert_fail@plt+0xfd4>
   11f48:	bl	152e4 <__assert_fail@plt+0x3de0>
   11f4c:	ldr	r3, [r4, #272]	; 0x110
   11f50:	orr	r3, r3, r0
   11f54:	str	r3, [r4, #272]	; 0x110
   11f58:	b	11700 <__assert_fail@plt+0x1fc>
   11f5c:	ldr	r0, [pc, #1400]	; 124dc <__assert_fail@plt+0xfd8>
   11f60:	mov	r3, sl
   11f64:	mov	r2, #105	; 0x69
   11f68:	ldrb	r1, [r3], #1
   11f6c:	cmp	r1, r2
   11f70:	bne	11fb0 <__assert_fail@plt+0xaac>
   11f74:	ldrb	r2, [r0, #1]!
   11f78:	cmp	r2, #0
   11f7c:	bne	11f68 <__assert_fail@plt+0xa64>
   11f80:	ldrb	r3, [r3]
   11f84:	cmp	r3, #61	; 0x3d
   11f88:	cmpne	r3, #0
   11f8c:	bne	11fb0 <__assert_fail@plt+0xaac>
   11f90:	ldr	r3, [pc, #1528]	; 12590 <__assert_fail@plt+0x108c>
   11f94:	mov	r0, r8
   11f98:	ldr	r1, [pc, #1344]	; 124e0 <__assert_fail@plt+0xfdc>
   11f9c:	bl	152e4 <__assert_fail@plt+0x3de0>
   11fa0:	ldr	r3, [r4, #248]	; 0xf8
   11fa4:	orr	r3, r3, r0
   11fa8:	str	r3, [r4, #248]	; 0xf8
   11fac:	b	11700 <__assert_fail@plt+0x1fc>
   11fb0:	ldr	r0, [pc, #1324]	; 124e4 <__assert_fail@plt+0xfe0>
   11fb4:	mov	r3, sl
   11fb8:	mov	r2, #111	; 0x6f
   11fbc:	ldrb	r1, [r3], #1
   11fc0:	cmp	r1, r2
   11fc4:	bne	12a4c <__assert_fail@plt+0x1548>
   11fc8:	ldrb	r2, [r0, #1]!
   11fcc:	cmp	r2, #0
   11fd0:	bne	11fbc <__assert_fail@plt+0xab8>
   11fd4:	ldrb	r3, [r3]
   11fd8:	cmp	r3, #61	; 0x3d
   11fdc:	cmpne	r3, #0
   11fe0:	bne	12a4c <__assert_fail@plt+0x1548>
   11fe4:	ldr	r3, [pc, #1460]	; 125a0 <__assert_fail@plt+0x109c>
   11fe8:	mov	r0, r8
   11fec:	ldr	r1, [pc, #1260]	; 124e0 <__assert_fail@plt+0xfdc>
   11ff0:	bl	152e4 <__assert_fail@plt+0x3de0>
   11ff4:	ldr	r3, [r4, #276]	; 0x114
   11ff8:	orr	r3, r3, r0
   11ffc:	str	r3, [r4, #276]	; 0x114
   12000:	b	11700 <__assert_fail@plt+0x1fc>
   12004:	orrs	r2, r0, r1
   12008:	beq	11780 <__assert_fail@plt+0x27c>
   1200c:	ldr	r2, [r4, #256]	; 0x100
   12010:	bl	1c474 <__assert_fail@plt+0xaf70>
   12014:	ldr	r3, [pc, #1168]	; 124ac <__assert_fail@plt+0xfa8>
   12018:	str	r2, [r4, #576]	; 0x240
   1201c:	strd	r0, [r3, #-8]
   12020:	b	11780 <__assert_fail@plt+0x27c>
   12024:	mov	r2, #0
   12028:	mov	r3, #0
   1202c:	strd	r2, [sp, #48]	; 0x30
   12030:	strd	r2, [sp, #56]	; 0x38
   12034:	mvn	r2, #0
   12038:	mvn	r3, #0
   1203c:	strd	r2, [sp, #40]	; 0x28
   12040:	ldr	r3, [r4, #272]	; 0x110
   12044:	ldr	r2, [r4, #256]	; 0x100
   12048:	orr	r3, r3, #2048	; 0x800
   1204c:	cmp	r2, #0
   12050:	str	r3, [r4, #272]	; 0x110
   12054:	moveq	r3, #512	; 0x200
   12058:	streq	r3, [r4, #256]	; 0x100
   1205c:	ldr	r3, [r4, #264]	; 0x108
   12060:	cmp	r3, #0
   12064:	moveq	r3, #512	; 0x200
   12068:	streq	r3, [r4, #264]	; 0x108
   1206c:	b	11720 <__assert_fail@plt+0x21c>
   12070:	bl	14724 <__assert_fail@plt+0x3220>
   12074:	cmp	r6, #0
   12078:	beq	11ce8 <__assert_fail@plt+0x7e4>
   1207c:	ldr	r0, [r4, #268]	; 0x10c
   12080:	ldr	sl, [r4, #284]	; 0x11c
   12084:	ldr	r8, [r4, #264]	; 0x108
   12088:	mov	r1, r9
   1208c:	sub	r7, r8, sl
   12090:	cmp	r7, r6
   12094:	movcs	r7, r6
   12098:	add	r0, r0, sl
   1209c:	mov	r2, r7
   120a0:	bl	11210 <memcpy@plt>
   120a4:	add	r3, sl, r7
   120a8:	cmp	r8, r3
   120ac:	sub	r6, r6, r7
   120b0:	str	r3, [r4, #284]	; 0x11c
   120b4:	add	r9, r9, r7
   120b8:	bhi	12074 <__assert_fail@plt+0xb70>
   120bc:	b	12070 <__assert_fail@plt+0xb6c>
   120c0:	ldr	r3, [r4, #272]	; 0x110
   120c4:	beq	127ac <__assert_fail@plt+0x12a8>
   120c8:	tst	r3, #256	; 0x100
   120cc:	beq	120dc <__assert_fail@plt+0xbd8>
   120d0:	ldr	r3, [fp]
   120d4:	cmp	r3, #1
   120d8:	beq	12124 <__assert_fail@plt+0xc20>
   120dc:	ldr	r3, [sp, #36]	; 0x24
   120e0:	mov	r2, #5
   120e4:	ldr	r1, [pc, #1020]	; 124e8 <__assert_fail@plt+0xfe4>
   120e8:	mov	r0, #0
   120ec:	ldr	r6, [r3]
   120f0:	bl	1124c <dcgettext@plt>
   120f4:	ldr	r1, [r4, #108]	; 0x6c
   120f8:	mov	r7, r0
   120fc:	mov	r0, #4
   12100:	bl	182f4 <__assert_fail@plt+0x6df0>
   12104:	mov	r2, r7
   12108:	mov	r1, r6
   1210c:	mov	r3, r0
   12110:	mov	r0, #0
   12114:	bl	138e4 <__assert_fail@plt+0x23e0>
   12118:	ldr	r3, [r4, #272]	; 0x110
   1211c:	tst	r3, #256	; 0x100
   12120:	beq	12cfc <__assert_fail@plt+0x17f8>
   12124:	bl	13778 <__assert_fail@plt+0x2274>
   12128:	ldr	r6, [r4, #256]	; 0x100
   1212c:	mov	r7, #0
   12130:	sub	r6, r6, r5
   12134:	mov	r3, r7
   12138:	mov	r0, #0
   1213c:	mov	r2, r6
   12140:	bl	13d60 <__assert_fail@plt+0x285c>
   12144:	ldrb	r3, [r4, #90]	; 0x5a
   12148:	cmp	r3, #0
   1214c:	bne	122dc <__assert_fail@plt+0xdd8>
   12150:	ldr	r6, [r4, #604]	; 0x25c
   12154:	cmp	r6, #29
   12158:	beq	121b4 <__assert_fail@plt+0xcb0>
   1215c:	ldr	r3, [sp, #36]	; 0x24
   12160:	str	r6, [r3]
   12164:	mov	r2, #5
   12168:	ldr	r1, [pc, #892]	; 124ec <__assert_fail@plt+0xfe8>
   1216c:	mov	r0, #0
   12170:	bl	1124c <dcgettext@plt>
   12174:	ldr	r2, [r4, #108]	; 0x6c
   12178:	mov	r1, #3
   1217c:	mov	r7, r0
   12180:	mov	r0, #0
   12184:	bl	183d0 <__assert_fail@plt+0x6ecc>
   12188:	mov	r2, r7
   1218c:	mov	r1, r6
   12190:	mov	r3, r0
   12194:	mov	r0, #0
   12198:	bl	138e4 <__assert_fail@plt+0x23e0>
   1219c:	mov	r3, #1
   121a0:	str	r3, [sp, #40]	; 0x28
   121a4:	mov	r3, #0
   121a8:	strb	r3, [r4, #90]	; 0x5a
   121ac:	mov	r3, #29
   121b0:	str	r3, [r4, #604]	; 0x25c
   121b4:	ldr	r2, [r4, #272]	; 0x110
   121b8:	clz	r3, r5
   121bc:	lsr	r3, r3, #5
   121c0:	ands	r3, r3, r2, lsr #10
   121c4:	beq	11ce8 <__assert_fail@plt+0x7e4>
   121c8:	ldr	r7, [r4, #256]	; 0x100
   121cc:	mov	r6, #0
   121d0:	cmp	r6, r7
   121d4:	ldr	r9, [r4, #260]	; 0x104
   121d8:	bcc	11df0 <__assert_fail@plt+0x8ec>
   121dc:	ldr	r3, [r4, #56]	; 0x38
   121e0:	ldr	r2, [r4, #60]	; 0x3c
   121e4:	ldr	r0, [r4, #268]	; 0x10c
   121e8:	adds	r3, r3, #1
   121ec:	adc	r2, r2, #0
   121f0:	cmp	r0, r9
   121f4:	str	r3, [r4, #56]	; 0x38
   121f8:	str	r2, [r4, #60]	; 0x3c
   121fc:	mov	r5, #0
   12200:	bne	11e50 <__assert_fail@plt+0x94c>
   12204:	mov	r0, r9
   12208:	mov	r1, r6
   1220c:	bl	144f8 <__assert_fail@plt+0x2ff4>
   12210:	ldrd	r2, [r4, #8]
   12214:	adds	r8, r2, r0
   12218:	adc	r9, r3, #0
   1221c:	cmp	r0, r6
   12220:	strd	r8, [r4, #8]
   12224:	bne	125f4 <__assert_fail@plt+0x10f0>
   12228:	ldr	r3, [r4, #256]	; 0x100
   1222c:	cmp	r3, r6
   12230:	beq	12c08 <__assert_fail@plt+0x1704>
   12234:	ldr	r3, [r4, #32]
   12238:	ldr	r2, [r4, #36]	; 0x24
   1223c:	adds	r3, r3, #1
   12240:	adc	r2, r2, #0
   12244:	str	r3, [r4, #32]
   12248:	str	r2, [r4, #36]	; 0x24
   1224c:	b	11ce8 <__assert_fail@plt+0x7e4>
   12250:	mov	r1, r6
   12254:	mov	r0, r9
   12258:	bl	147e4 <__assert_fail@plt+0x32e0>
   1225c:	b	11ce8 <__assert_fail@plt+0x7e4>
   12260:	ldrb	r3, [r4, #616]	; 0x268
   12264:	cmp	r3, #0
   12268:	addne	r6, r6, #1
   1226c:	ldrbne	r2, [r4, #617]	; 0x269
   12270:	moveq	r3, r9
   12274:	subne	r3, r9, #1
   12278:	strbne	r2, [r9, #-1]
   1227c:	movne	r2, #0
   12280:	strbne	r2, [r4, #616]	; 0x268
   12284:	addeq	r9, r9, #1
   12288:	tst	r6, #1
   1228c:	subne	r6, r6, #1
   12290:	addne	r1, r3, r6
   12294:	ldrbne	r3, [r3, r6]
   12298:	movne	r2, #1
   1229c:	addeq	r1, r3, r6
   122a0:	strbne	r2, [r4, #616]	; 0x268
   122a4:	strbne	r3, [r4, #617]	; 0x269
   122a8:	lsrs	r3, r6, #1
   122ac:	beq	11e68 <__assert_fail@plt+0x964>
   122b0:	rsb	r2, r3, r3, lsl #31
   122b4:	add	r1, r1, r2, lsl #1
   122b8:	sub	lr, r1, #2
   122bc:	ldrb	r2, [lr, r3, lsl #1]
   122c0:	strb	r2, [r1, r3, lsl #1]
   122c4:	subs	r3, r3, #1
   122c8:	bne	122bc <__assert_fail@plt+0xdb8>
   122cc:	b	11e68 <__assert_fail@plt+0x964>
   122d0:	mov	r0, #0
   122d4:	bl	13d60 <__assert_fail@plt+0x285c>
   122d8:	b	11de0 <__assert_fail@plt+0x8dc>
   122dc:	ldrd	r0, [r4, #96]	; 0x60
   122e0:	mov	r3, #0
   122e4:	mov	r2, #0
   122e8:	adds	r8, r6, r0
   122ec:	adcs	r9, r7, r1
   122f0:	movcs	r3, #0
   122f4:	movcs	r2, #1
   122f8:	orrs	r1, r2, r3
   122fc:	movne	r3, #1
   12300:	strd	r8, [r4, #96]	; 0x60
   12304:	strbne	r3, [r4, #300]	; 0x12c
   12308:	beq	12370 <__assert_fail@plt+0xe6c>
   1230c:	mov	r2, #5
   12310:	ldr	r1, [pc, #472]	; 124f0 <__assert_fail@plt+0xfec>
   12314:	mov	r0, #0
   12318:	bl	1124c <dcgettext@plt>
   1231c:	ldr	r1, [r4, #108]	; 0x6c
   12320:	mov	r6, r0
   12324:	mov	r0, #4
   12328:	bl	182f4 <__assert_fail@plt+0x6df0>
   1232c:	mov	r1, #0
   12330:	mov	r2, r6
   12334:	mov	r3, r0
   12338:	mov	r0, r1
   1233c:	bl	138e4 <__assert_fail@plt+0x23e0>
   12340:	b	1219c <__assert_fail@plt+0xc98>
   12344:	cmp	r6, #0
   12348:	beq	11e5c <__assert_fail@plt+0x958>
   1234c:	add	r1, r9, r6
   12350:	mov	r3, r9
   12354:	ldrb	r2, [r3]
   12358:	add	r2, r4, r2
   1235c:	ldrb	r2, [r2, #308]	; 0x134
   12360:	strb	r2, [r3], #1
   12364:	cmp	r3, r1
   12368:	bne	12354 <__assert_fail@plt+0xe50>
   1236c:	b	11e5c <__assert_fail@plt+0x958>
   12370:	ldrb	sl, [r4, #300]	; 0x12c
   12374:	orr	sl, sl, r9, lsr #31
   12378:	cmp	sl, #0
   1237c:	strb	sl, [r4, #300]	; 0x12c
   12380:	bne	1230c <__assert_fail@plt+0xe08>
   12384:	mov	r1, #1
   12388:	str	r1, [sp]
   1238c:	mov	r0, sl
   12390:	bl	112dc <lseek64@plt>
   12394:	cmp	r0, #0
   12398:	sbcs	r3, r1, #0
   1239c:	blt	12438 <__assert_fail@plt+0xf34>
   123a0:	cmp	r1, r9
   123a4:	cmpeq	r0, r8
   123a8:	beq	121b4 <__assert_fail@plt+0xcb0>
   123ac:	subs	r3, r8, r0
   123b0:	str	r3, [sp, #64]	; 0x40
   123b4:	sbc	r3, r9, r1
   123b8:	str	r3, [sp, #68]	; 0x44
   123bc:	ldrd	r0, [sp, #64]	; 0x40
   123c0:	cmp	r6, r0
   123c4:	sbcs	r3, r7, r1
   123c8:	movlt	r3, #1
   123cc:	movge	r3, #0
   123d0:	orrs	r3, r3, r1, lsr #31
   123d4:	beq	123e4 <__assert_fail@plt+0xee0>
   123d8:	ldr	r3, [fp]
   123dc:	cmp	r3, #1
   123e0:	bne	12a9c <__assert_fail@plt+0x1598>
   123e4:	mov	r3, #1
   123e8:	str	r3, [sp]
   123ec:	mov	r1, #0
   123f0:	ldrd	r2, [sp, #64]	; 0x40
   123f4:	ldr	r0, [r4, #108]	; 0x6c
   123f8:	bl	13c30 <__assert_fail@plt+0x272c>
   123fc:	cmp	r0, #0
   12400:	sbcs	r3, r1, #0
   12404:	bge	121b4 <__assert_fail@plt+0xcb0>
   12408:	ldr	r3, [sp, #36]	; 0x24
   1240c:	ldr	r6, [r3]
   12410:	cmp	r6, #0
   12414:	bne	12164 <__assert_fail@plt+0xc60>
   12418:	mov	r2, #5
   1241c:	ldr	r1, [pc, #208]	; 124f4 <__assert_fail@plt+0xff0>
   12420:	mov	r0, r6
   12424:	bl	1124c <dcgettext@plt>
   12428:	mov	r1, r6
   1242c:	mov	r2, r0
   12430:	mov	r0, r6
   12434:	bl	138e4 <__assert_fail@plt+0x23e0>
   12438:	ldr	r3, [sp, #36]	; 0x24
   1243c:	ldr	r6, [r3]
   12440:	b	12164 <__assert_fail@plt+0xc60>
   12444:	mov	r0, #0
   12448:	ldr	ip, [pc, #168]	; 124f8 <__assert_fail@plt+0xff4>
   1244c:	cmp	r2, r0
   12450:	ldr	r1, [pc, #220]	; 12534 <__assert_fail@plt+0x1030>
   12454:	strb	r0, [r4, #252]	; 0xfc
   12458:	movne	r1, ip
   1245c:	b	11810 <__assert_fail@plt+0x30c>
   12460:	andeq	lr, r2, r8, lsl #30
   12464:	andeq	sp, r1, r8, ror #27
   12468:	andeq	pc, r2, r4, asr r2	; <UNPREDICTABLE>
   1246c:	andeq	sp, r1, r4, ror #22
   12470:	strdeq	sp, [r1], -r8
   12474:	andeq	sp, r1, ip, lsl sp
   12478:	andeq	r3, r1, ip, ror pc
   1247c:	andeq	pc, r2, r0, ror r1	; <UNPREDICTABLE>
   12480:	andeq	pc, r2, r0, ror #3
   12484:	andeq	sp, r1, ip, lsl #28
   12488:	andeq	sp, r1, r8, lsl lr
   1248c:	andeq	sp, r1, r8, lsr #28
   12490:	andeq	r4, r1, r0, ror #27
   12494:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   12498:	strdeq	ip, [r1], -r4
   1249c:	andeq	ip, r1, r8, ror #13
   124a0:	andeq	pc, r2, r8, asr #3
   124a4:	andeq	sp, r1, ip, asr #28
   124a8:	andseq	r1, r0, r0
   124ac:	andeq	pc, r2, r0, lsr #8
   124b0:	andeq	sp, r1, r8, asr #30
   124b4:	andeq	sp, r1, ip, ror #30
   124b8:	andeq	sp, r1, ip, lsl #31
   124bc:	andeq	r0, r1, r2
   124c0:	andeq	sp, r1, ip, lsr #31
   124c4:	blcc	fe6c4ccc <opterr@@GLIBC_2.4+0xfe695af4>
   124c8:	andeq	pc, r2, r0, asr #8
   124cc:	andeq	sp, r1, r0, asr lr
   124d0:	andeq	sp, r1, r4, asr lr
   124d4:	andeq	sp, r1, ip, asr lr
   124d8:	strdeq	ip, [r1], -r8
   124dc:	andeq	sp, r1, r0, ror lr
   124e0:	andeq	ip, r1, r8, lsl #16
   124e4:	andeq	sp, r1, ip, lsl #29
   124e8:	andeq	ip, r1, r0, ror #31
   124ec:	ldrdeq	ip, [r1], -r0
   124f0:	andeq	lr, r1, r0, ror #1
   124f4:	andeq	lr, r1, r8, lsr r1
   124f8:			; <UNDEFINED> instruction: 0x000142bc
   124fc:	andeq	lr, r1, r0, ror #2
   12500:	andeq	lr, r2, r8, lsl #30
   12504:			; <UNDEFINED> instruction: 0x0001c6b0
   12508:	andeq	pc, r2, r4, lsl r3	; <UNPREDICTABLE>
   1250c:	strheq	lr, [r1], -ip
   12510:			; <UNDEFINED> instruction: 0x000001b6
   12514:	andeq	lr, r1, r0, asr #3
   12518:	andeq	r3, r1, r0, ror #6
   1251c:	andeq	r3, r1, r0, asr r3
   12520:	andeq	lr, r1, r4
   12524:	andeq	sp, r1, r8, lsr #29
   12528:			; <UNDEFINED> instruction: 0x0001deb0
   1252c:	andeq	ip, r1, r8, lsr r9
   12530:	andeq	lr, r1, r8, lsl #2
   12534:	andeq	r4, r1, r8, ror #2
   12538:	ldrdeq	lr, [r1], -r4
   1253c:	andeq	lr, r1, r8, lsr #32
   12540:	andeq	pc, r2, r0, lsr r4	; <UNPREDICTABLE>
   12544:	andeq	pc, r2, r4, asr r2	; <UNPREDICTABLE>
   12548:	ldrdeq	sp, [r1], -r0
   1254c:	andeq	lr, r1, r4, ror r1
   12550:	andeq	lr, r1, r8, lsl #1
   12554:	andeq	sp, r1, r8, asr #29
   12558:	strdeq	sp, [r1], -r0
   1255c:	andeq	pc, r2, r9, asr #8
   12560:	ldrdeq	sp, [r1], -r8
   12564:	andeq	sp, r1, r0, ror #29
   12568:	andeq	sp, r1, r8, ror #29
   1256c:	andeq	sp, r1, ip, asr #29
   12570:	andeq	lr, r1, r8, lsr #3
   12574:	ldrdeq	sp, [r1], -ip
   12578:	ldrdeq	sp, [r1], -r0
   1257c:	andeq	ip, r1, r0, lsr #31
   12580:	ldrdeq	sp, [r1], -r0
   12584:			; <UNDEFINED> instruction: 0x0001cfb0
   12588:	andeq	lr, r1, r8, lsr r0
   1258c:	andeq	sp, r1, r8, lsl pc
   12590:	andeq	sp, r1, r8, ror lr
   12594:	andeq	sp, r1, ip, lsl #30
   12598:	andeq	lr, r1, r4, lsl r0
   1259c:	ldrdeq	sp, [r1], -r4
   125a0:	muleq	r1, r4, lr
   125a4:	andeq	sp, r1, r0, lsl #30
   125a8:	andeq	sp, r1, r8, asr #27
   125ac:	andeq	sp, r1, r4, lsr lr
   125b0:	ldr	r0, [r4, #268]	; 0x10c
   125b4:	bl	144f8 <__assert_fail@plt+0x2ff4>
   125b8:	ldrd	r2, [r4, #8]
   125bc:	adds	r6, r2, r0
   125c0:	adc	r7, r3, #0
   125c4:	cmp	r0, #0
   125c8:	strd	r6, [r4, #8]
   125cc:	beq	125e8 <__assert_fail@plt+0x10e4>
   125d0:	ldr	r3, [r4, #32]
   125d4:	ldr	r2, [r4, #36]	; 0x24
   125d8:	adds	r3, r3, #1
   125dc:	adc	r2, r2, #0
   125e0:	str	r3, [r4, #32]
   125e4:	str	r2, [r4, #36]	; 0x24
   125e8:	ldr	r3, [r4, #284]	; 0x11c
   125ec:	cmp	r0, r3
   125f0:	beq	12870 <__assert_fail@plt+0x136c>
   125f4:	ldr	r3, [sp, #36]	; 0x24
   125f8:	ldr	r1, [pc, #-260]	; 124fc <__assert_fail@plt+0xff8>
   125fc:	mov	r2, #5
   12600:	ldr	r6, [r3]
   12604:	mov	r0, #0
   12608:	bl	1124c <dcgettext@plt>
   1260c:	ldr	r1, [r4, #112]	; 0x70
   12610:	mov	r7, r0
   12614:	mov	r0, #4
   12618:	bl	182f4 <__assert_fail@plt+0x6df0>
   1261c:	mov	r2, r7
   12620:	mov	r1, r6
   12624:	mov	r3, r0
   12628:	mov	r0, #0
   1262c:	bl	138e4 <__assert_fail@plt+0x23e0>
   12630:	mov	r3, #1
   12634:	str	r3, [sp, #40]	; 0x28
   12638:	ldrd	r2, [fp, #24]
   1263c:	orrs	r3, r2, r3
   12640:	beq	12994 <__assert_fail@plt+0x1490>
   12644:	ldrb	r3, [r4, #600]	; 0x258
   12648:	cmp	r3, #0
   1264c:	bne	1265c <__assert_fail@plt+0x1158>
   12650:	ldrb	r3, [r4, #88]	; 0x58
   12654:	cmp	r3, #0
   12658:	beq	1266c <__assert_fail@plt+0x1168>
   1265c:	mov	r2, #0
   12660:	mov	r3, #0
   12664:	mov	r0, #0
   12668:	bl	13d60 <__assert_fail@plt+0x285c>
   1266c:	ldrb	r3, [r4, #281]	; 0x119
   12670:	cmp	r3, #0
   12674:	bne	12684 <__assert_fail@plt+0x1180>
   12678:	ldrb	r3, [r4, #89]	; 0x59
   1267c:	cmp	r3, #0
   12680:	beq	12694 <__assert_fail@plt+0x1190>
   12684:	mov	r2, #0
   12688:	mov	r3, #0
   1268c:	mov	r0, #1
   12690:	bl	13d60 <__assert_fail@plt+0x285c>
   12694:	bl	13fb8 <__assert_fail@plt+0x2ab4>
   12698:	bl	13778 <__assert_fail@plt+0x2274>
   1269c:	bl	14054 <__assert_fail@plt+0x2b50>
   126a0:	ldr	r3, [pc, #-424]	; 12500 <__assert_fail@plt+0xffc>
   126a4:	ldr	r2, [sp, #332]	; 0x14c
   126a8:	ldr	r0, [sp, #40]	; 0x28
   126ac:	ldr	r3, [r3]
   126b0:	cmp	r2, r3
   126b4:	bne	13160 <__assert_fail@plt+0x1c5c>
   126b8:	add	sp, sp, #340	; 0x154
   126bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126c0:	tst	r6, #4
   126c4:	beq	119dc <__assert_fail@plt+0x4d8>
   126c8:	ldr	r3, [pc, #-456]	; 12508 <__assert_fail@plt+0x1004>
   126cc:	ldr	r1, [pc, #-464]	; 12504 <__assert_fail@plt+0x1000>
   126d0:	add	r2, r3, #255	; 0xff
   126d4:	ldrb	r3, [r5, #1]!
   126d8:	add	r3, r1, r3
   126dc:	cmp	r5, r2
   126e0:	ldrb	r3, [r3, #1224]	; 0x4c8
   126e4:	strb	r3, [r5]
   126e8:	bne	126d4 <__assert_fail@plt+0x11d0>
   126ec:	b	119c4 <__assert_fail@plt+0x4c0>
   126f0:	ldrd	r2, [sp, #56]	; 0x38
   126f4:	orrs	r1, r2, r3
   126f8:	ldrne	r8, [pc, #-448]	; 12540 <__assert_fail@plt+0x103c>
   126fc:	strdne	r2, [r8, #-8]
   12700:	b	117e0 <__assert_fail@plt+0x2dc>
   12704:	cmp	r1, r3
   12708:	cmpeq	r0, r2
   1270c:	strdne	r0, [fp, #24]
   12710:	b	117b4 <__assert_fail@plt+0x2b0>
   12714:	tst	r6, #32
   12718:	beq	11998 <__assert_fail@plt+0x494>
   1271c:	bl	11378 <__ctype_tolower_loc@plt>
   12720:	ldr	r3, [pc, #-544]	; 12508 <__assert_fail@plt+0x1004>
   12724:	add	r1, r3, #255	; 0xff
   12728:	mov	r3, r5
   1272c:	ldr	r0, [r0]
   12730:	ldrb	r2, [r3, #1]!
   12734:	cmp	r1, r3
   12738:	ldr	r2, [r0, r2, lsl #2]
   1273c:	strb	r2, [r3]
   12740:	bne	12730 <__assert_fail@plt+0x122c>
   12744:	b	11990 <__assert_fail@plt+0x48c>
   12748:	ldr	r3, [fp]
   1274c:	cmp	r3, #1
   12750:	beq	11c18 <__assert_fail@plt+0x714>
   12754:	mov	r2, #5
   12758:	ldr	r1, [pc, #-596]	; 1250c <__assert_fail@plt+0x1008>
   1275c:	mov	r0, #0
   12760:	bl	1124c <dcgettext@plt>
   12764:	ldr	r2, [r4, #108]	; 0x6c
   12768:	mov	r1, #3
   1276c:	mov	r6, r0
   12770:	mov	r0, #0
   12774:	bl	183d0 <__assert_fail@plt+0x6ecc>
   12778:	mov	r1, #0
   1277c:	mov	r2, r6
   12780:	mov	r3, r0
   12784:	mov	r0, r1
   12788:	bl	138e4 <__assert_fail@plt+0x23e0>
   1278c:	b	11c18 <__assert_fail@plt+0x714>
   12790:	ldr	r3, [pc, #-648]	; 12510 <__assert_fail@plt+0x100c>
   12794:	orr	r2, r6, #2
   12798:	mov	r0, #1
   1279c:	bl	14118 <__assert_fail@plt+0x2c14>
   127a0:	cmp	r0, #0
   127a4:	bge	11ad0 <__assert_fail@plt+0x5cc>
   127a8:	b	11aac <__assert_fail@plt+0x5a8>
   127ac:	ldrb	r2, [r4, #88]	; 0x58
   127b0:	ldrb	ip, [r4, #600]	; 0x258
   127b4:	ldrb	r1, [r4, #281]	; 0x119
   127b8:	orr	r2, r2, ip
   127bc:	cmp	r1, #0
   127c0:	strb	r2, [r4, #88]	; 0x58
   127c4:	ldrb	r2, [r4, #89]	; 0x59
   127c8:	beq	127d8 <__assert_fail@plt+0x12d4>
   127cc:	tst	r3, #512	; 0x200
   127d0:	moveq	r0, #1
   127d4:	movne	r0, #0
   127d8:	orr	r3, r2, r0
   127dc:	and	r3, r3, #1
   127e0:	strb	r3, [r4, #89]	; 0x59
   127e4:	ldrb	r3, [r4, #616]	; 0x268
   127e8:	cmp	r3, #0
   127ec:	beq	128c8 <__assert_fail@plt+0x13c4>
   127f0:	ldr	r3, [r4, #272]	; 0x110
   127f4:	tst	r3, #8
   127f8:	bne	12d74 <__assert_fail@plt+0x1870>
   127fc:	tst	r3, #16
   12800:	bne	12e4c <__assert_fail@plt+0x1948>
   12804:	ldr	r2, [r4, #284]	; 0x11c
   12808:	ldr	r1, [r4, #268]	; 0x10c
   1280c:	ldrb	r0, [r4, #617]	; 0x269
   12810:	ldr	ip, [r4, #264]	; 0x108
   12814:	add	r3, r2, #1
   12818:	cmp	r3, ip
   1281c:	strb	r0, [r1, r2]
   12820:	str	r3, [r4, #284]	; 0x11c
   12824:	bcs	128c4 <__assert_fail@plt+0x13c0>
   12828:	ldr	r3, [r4, #288]	; 0x120
   1282c:	cmp	r3, #0
   12830:	beq	12864 <__assert_fail@plt+0x1360>
   12834:	ldr	r3, [r4, #272]	; 0x110
   12838:	tst	r3, #16
   1283c:	beq	12864 <__assert_fail@plt+0x1360>
   12840:	ldr	r2, [r4, #284]	; 0x11c
   12844:	ldr	r1, [r4, #268]	; 0x10c
   12848:	ldrb	r0, [fp, #17]
   1284c:	ldr	ip, [r4, #264]	; 0x108
   12850:	add	r3, r2, #1
   12854:	cmp	r3, ip
   12858:	strb	r0, [r1, r2]
   1285c:	str	r3, [r4, #284]	; 0x11c
   12860:	bcs	12e44 <__assert_fail@plt+0x1940>
   12864:	ldr	r1, [r4, #284]	; 0x11c
   12868:	cmp	r1, #0
   1286c:	bne	125b0 <__assert_fail@plt+0x10ac>
   12870:	ldrb	r3, [r4, #280]	; 0x118
   12874:	cmp	r3, #0
   12878:	bne	12c24 <__assert_fail@plt+0x1720>
   1287c:	ldr	r3, [r4, #272]	; 0x110
   12880:	tst	r3, #16384	; 0x4000
   12884:	bne	12b08 <__assert_fail@plt+0x1604>
   12888:	ldr	r3, [r4, #272]	; 0x110
   1288c:	tst	r3, #32768	; 0x8000
   12890:	ldrne	r5, [sp, #36]	; 0x24
   12894:	beq	12638 <__assert_fail@plt+0x1134>
   12898:	mov	r0, #1
   1289c:	bl	11198 <fsync@plt>
   128a0:	cmp	r0, #0
   128a4:	beq	12638 <__assert_fail@plt+0x1134>
   128a8:	ldr	r6, [r5]
   128ac:	cmp	r6, #4
   128b0:	beq	12898 <__assert_fail@plt+0x1394>
   128b4:	mov	r2, #5
   128b8:	ldr	r1, [pc, #-940]	; 12514 <__assert_fail@plt+0x1010>
   128bc:	mov	r0, #0
   128c0:	b	12608 <__assert_fail@plt+0x1104>
   128c4:	bl	14724 <__assert_fail@plt+0x3220>
   128c8:	ldr	r3, [r4, #272]	; 0x110
   128cc:	tst	r3, #8
   128d0:	beq	12828 <__assert_fail@plt+0x1324>
   128d4:	ldr	r6, [r4, #288]	; 0x120
   128d8:	cmp	r6, #0
   128dc:	beq	12864 <__assert_fail@plt+0x1360>
   128e0:	ldr	r3, [r4, #292]	; 0x124
   128e4:	cmp	r6, r3
   128e8:	bcc	12900 <__assert_fail@plt+0x13fc>
   128ec:	b	12834 <__assert_fail@plt+0x1330>
   128f0:	ldr	r3, [r4, #292]	; 0x124
   128f4:	add	r6, r6, #1
   128f8:	cmp	r6, r3
   128fc:	bcs	12828 <__assert_fail@plt+0x1324>
   12900:	ldr	r2, [r4, #284]	; 0x11c
   12904:	ldr	r1, [r4, #268]	; 0x10c
   12908:	ldrb	r0, [fp, #18]
   1290c:	ldr	ip, [r4, #264]	; 0x108
   12910:	add	r3, r2, #1
   12914:	cmp	r3, ip
   12918:	strb	r0, [r1, r2]
   1291c:	str	r3, [r4, #284]	; 0x11c
   12920:	bcc	128f0 <__assert_fail@plt+0x13ec>
   12924:	bl	14724 <__assert_fail@plt+0x3220>
   12928:	b	128f0 <__assert_fail@plt+0x13ec>
   1292c:	ldr	r2, [sp, #88]	; 0x58
   12930:	cmp	r2, #0
   12934:	beq	11cbc <__assert_fail@plt+0x7b8>
   12938:	mov	r1, #0
   1293c:	ldr	r0, [r4, #268]	; 0x10c
   12940:	bl	11408 <memset@plt>
   12944:	ldr	r6, [sp, #88]	; 0x58
   12948:	b	11ca8 <__assert_fail@plt+0x7a4>
   1294c:	ldr	r0, [pc, #-1084]	; 12518 <__assert_fail@plt+0x1014>
   12950:	mov	r3, #0
   12954:	str	r0, [sp, #192]	; 0xc0
   12958:	mov	r2, r3
   1295c:	add	r1, sp, #192	; 0xc0
   12960:	mov	r0, #10
   12964:	str	r3, [sp, #324]	; 0x144
   12968:	bl	112ac <sigaction@plt>
   1296c:	b	11594 <__assert_fail@plt+0x90>
   12970:	ldr	r0, [pc, #-1116]	; 1251c <__assert_fail@plt+0x1018>
   12974:	mov	r3, #-1073741824	; 0xc0000000
   12978:	str	r0, [sp, #192]	; 0xc0
   1297c:	add	r1, sp, #192	; 0xc0
   12980:	mov	r2, #0
   12984:	mov	r0, #2
   12988:	str	r3, [sp, #324]	; 0x144
   1298c:	bl	112ac <sigaction@plt>
   12990:	b	115a8 <__assert_fail@plt+0xa4>
   12994:	ldr	r3, [r4, #580]	; 0x244
   12998:	cmp	r3, #0
   1299c:	bne	12644 <__assert_fail@plt+0x1140>
   129a0:	ldrb	r3, [r4, #600]	; 0x258
   129a4:	cmp	r3, #0
   129a8:	bne	12b40 <__assert_fail@plt+0x163c>
   129ac:	ldrb	r3, [r4, #281]	; 0x119
   129b0:	cmp	r3, #0
   129b4:	beq	12694 <__assert_fail@plt+0x1190>
   129b8:	mov	r2, #0
   129bc:	mov	r3, #0
   129c0:	mov	r0, #1
   129c4:	bl	13d60 <__assert_fail@plt+0x285c>
   129c8:	subs	r6, r0, #0
   129cc:	bne	12694 <__assert_fail@plt+0x1190>
   129d0:	ldr	r3, [sp, #36]	; 0x24
   129d4:	mov	r2, #5
   129d8:	ldr	r1, [pc, #-1192]	; 12538 <__assert_fail@plt+0x1034>
   129dc:	ldr	r5, [r3]
   129e0:	bl	1124c <dcgettext@plt>
   129e4:	ldr	r2, [r4, #112]	; 0x70
   129e8:	mov	r1, #3
   129ec:	mov	r7, r0
   129f0:	mov	r0, r6
   129f4:	bl	183d0 <__assert_fail@plt+0x6ecc>
   129f8:	mov	r2, r7
   129fc:	mov	r1, r5
   12a00:	mov	r3, r0
   12a04:	mov	r0, r6
   12a08:	bl	138e4 <__assert_fail@plt+0x23e0>
   12a0c:	mov	r3, #1
   12a10:	str	r3, [sp, #40]	; 0x28
   12a14:	b	12694 <__assert_fail@plt+0x1190>
   12a18:	mov	r2, #5
   12a1c:	ldr	r1, [pc, #-1284]	; 12520 <__assert_fail@plt+0x101c>
   12a20:	mov	r0, r6
   12a24:	bl	1124c <dcgettext@plt>
   12a28:	mov	r1, r7
   12a2c:	mov	r3, r0
   12a30:	mov	r2, r0
   12a34:	mov	r0, r6
   12a38:	str	r3, [r4, #108]	; 0x6c
   12a3c:	bl	13b24 <__assert_fail@plt+0x2620>
   12a40:	b	11a10 <__assert_fail@plt+0x50c>
   12a44:	bl	14314 <__assert_fail@plt+0x2e10>
   12a48:	b	11ce0 <__assert_fail@plt+0x7dc>
   12a4c:	ldr	r1, [pc, #-1328]	; 12524 <__assert_fail@plt+0x1020>
   12a50:	mov	r2, sl
   12a54:	mov	r3, #115	; 0x73
   12a58:	ldrb	r0, [r2], #1
   12a5c:	cmp	r0, r3
   12a60:	bne	12d84 <__assert_fail@plt+0x1880>
   12a64:	ldrb	r3, [r1, #1]!
   12a68:	cmp	r3, #0
   12a6c:	bne	12a58 <__assert_fail@plt+0x1554>
   12a70:	ldrb	r3, [r2]
   12a74:	cmp	r3, #0
   12a78:	cmpne	r3, #61	; 0x3d
   12a7c:	bne	12d84 <__assert_fail@plt+0x1880>
   12a80:	mov	r0, r8
   12a84:	ldr	r3, [pc, #-1380]	; 12528 <__assert_fail@plt+0x1024>
   12a88:	mov	r2, #1
   12a8c:	ldr	r1, [pc, #-1384]	; 1252c <__assert_fail@plt+0x1028>
   12a90:	bl	152e4 <__assert_fail@plt+0x3de0>
   12a94:	str	r0, [fp]
   12a98:	b	11700 <__assert_fail@plt+0x1fc>
   12a9c:	mov	r2, #5
   12aa0:	ldr	r1, [pc, #-1400]	; 12530 <__assert_fail@plt+0x102c>
   12aa4:	mov	r0, sl
   12aa8:	bl	1124c <dcgettext@plt>
   12aac:	mov	r1, sl
   12ab0:	mov	r2, r0
   12ab4:	mov	r0, sl
   12ab8:	bl	138e4 <__assert_fail@plt+0x23e0>
   12abc:	b	123e4 <__assert_fail@plt+0xee0>
   12ac0:	ldr	r2, [fp, #24]
   12ac4:	ldr	r1, [fp, #28]
   12ac8:	subs	r2, r2, #1
   12acc:	str	r2, [sp, #80]	; 0x50
   12ad0:	sbc	r2, r1, #0
   12ad4:	str	r2, [sp, #84]	; 0x54
   12ad8:	ldrd	r8, [sp, #80]	; 0x50
   12adc:	mvn	r1, #0
   12ae0:	mvn	r0, #2
   12ae4:	cmp	r9, r1
   12ae8:	cmpeq	r8, r0
   12aec:	bls	11804 <__assert_fail@plt+0x300>
   12af0:	orr	r2, r7, r6
   12af4:	ands	r2, r2, #65536	; 0x10000
   12af8:	bne	11804 <__assert_fail@plt+0x300>
   12afc:	strb	r2, [r4, #252]	; 0xfc
   12b00:	ldr	r1, [pc, #-1492]	; 12534 <__assert_fail@plt+0x1030>
   12b04:	b	11810 <__assert_fail@plt+0x30c>
   12b08:	mov	r0, #1
   12b0c:	bl	114c8 <fdatasync@plt>
   12b10:	cmp	r0, #0
   12b14:	beq	12888 <__assert_fail@plt+0x1384>
   12b18:	ldr	r3, [sp, #36]	; 0x24
   12b1c:	ldr	r6, [r3]
   12b20:	sub	r3, r6, #22
   12b24:	bics	r3, r3, #16
   12b28:	bne	12f98 <__assert_fail@plt+0x1a94>
   12b2c:	ldr	r3, [r4, #272]	; 0x110
   12b30:	ldr	r5, [sp, #36]	; 0x24
   12b34:	orr	r3, r3, #32768	; 0x8000
   12b38:	str	r3, [r4, #272]	; 0x110
   12b3c:	b	12898 <__assert_fail@plt+0x1394>
   12b40:	mov	r2, #0
   12b44:	mov	r3, #0
   12b48:	mov	r0, #0
   12b4c:	bl	13d60 <__assert_fail@plt+0x285c>
   12b50:	subs	r6, r0, #0
   12b54:	bne	129ac <__assert_fail@plt+0x14a8>
   12b58:	ldr	r3, [sp, #36]	; 0x24
   12b5c:	mov	r2, #5
   12b60:	ldr	r1, [pc, #-1584]	; 12538 <__assert_fail@plt+0x1034>
   12b64:	ldr	r7, [r3]
   12b68:	bl	1124c <dcgettext@plt>
   12b6c:	ldr	r2, [r4, #108]	; 0x6c
   12b70:	mov	r1, #3
   12b74:	mov	r8, r0
   12b78:	mov	r0, r6
   12b7c:	bl	183d0 <__assert_fail@plt+0x6ecc>
   12b80:	mov	r2, r8
   12b84:	mov	r1, r7
   12b88:	mov	r3, r0
   12b8c:	mov	r0, r6
   12b90:	bl	138e4 <__assert_fail@plt+0x23e0>
   12b94:	mov	r3, #1
   12b98:	str	r3, [sp, #40]	; 0x28
   12b9c:	b	129ac <__assert_fail@plt+0x14a8>
   12ba0:	mov	r0, r1
   12ba4:	mov	r2, #5
   12ba8:	ldr	r1, [pc, #-1652]	; 1253c <__assert_fail@plt+0x1038>
   12bac:	bl	1124c <dcgettext@plt>
   12bb0:	mov	r1, r6
   12bb4:	ldr	r8, [pc, #-1660]	; 12540 <__assert_fail@plt+0x103c>
   12bb8:	mov	r3, r0
   12bbc:	mov	r2, r0
   12bc0:	mov	r0, #1
   12bc4:	str	r3, [r4, #112]	; 0x70
   12bc8:	bl	13b24 <__assert_fail@plt+0x2620>
   12bcc:	b	11b5c <__assert_fail@plt+0x658>
   12bd0:	mov	r1, #10
   12bd4:	ldr	r0, [pc, #-1688]	; 12544 <__assert_fail@plt+0x1040>
   12bd8:	bl	11354 <sigaddset@plt>
   12bdc:	b	11548 <__assert_fail@plt+0x44>
   12be0:	ldr	r6, [sp, #40]	; 0x28
   12be4:	mov	r2, #5
   12be8:	ldr	r1, [pc, #-1704]	; 12548 <__assert_fail@plt+0x1044>
   12bec:	mov	r0, r6
   12bf0:	bl	1124c <dcgettext@plt>
   12bf4:	mov	r1, r6
   12bf8:	mov	r2, r0
   12bfc:	mov	r0, r6
   12c00:	bl	138e4 <__assert_fail@plt+0x23e0>
   12c04:	b	118b4 <__assert_fail@plt+0x3b0>
   12c08:	ldr	r3, [r4, #40]	; 0x28
   12c0c:	ldr	r2, [r4, #44]	; 0x2c
   12c10:	adds	r3, r3, #1
   12c14:	adc	r2, r2, #0
   12c18:	str	r3, [r4, #40]	; 0x28
   12c1c:	str	r2, [r4, #44]	; 0x2c
   12c20:	b	11ce8 <__assert_fail@plt+0x7e4>
   12c24:	add	r2, sp, #88	; 0x58
   12c28:	mov	r1, #1
   12c2c:	mov	r0, #3
   12c30:	bl	112a0 <__fxstat64@plt>
   12c34:	cmp	r0, #0
   12c38:	bne	12f80 <__assert_fail@plt+0x1a7c>
   12c3c:	ldr	r3, [sp, #104]	; 0x68
   12c40:	and	r3, r3, #61440	; 0xf000
   12c44:	cmp	r3, #32768	; 0x8000
   12c48:	bne	1287c <__assert_fail@plt+0x1378>
   12c4c:	mov	r0, #1
   12c50:	mov	r3, #0
   12c54:	str	r0, [sp]
   12c58:	mov	r2, #0
   12c5c:	bl	112dc <lseek64@plt>
   12c60:	cmp	r0, #0
   12c64:	sbcs	r3, r1, #0
   12c68:	mov	r6, r0
   12c6c:	mov	r7, r1
   12c70:	blt	1287c <__assert_fail@plt+0x1378>
   12c74:	ldrd	r2, [sp, #136]	; 0x88
   12c78:	cmp	r2, r0
   12c7c:	sbcs	r3, r3, r1
   12c80:	bge	1287c <__assert_fail@plt+0x1378>
   12c84:	b	12c98 <__assert_fail@plt+0x1794>
   12c88:	ldr	r3, [sp, #36]	; 0x24
   12c8c:	ldr	r9, [r3]
   12c90:	cmp	r9, #4
   12c94:	bne	12cc0 <__assert_fail@plt+0x17bc>
   12c98:	bl	14054 <__assert_fail@plt+0x2b50>
   12c9c:	mov	r2, r6
   12ca0:	mov	r3, r7
   12ca4:	mov	r0, #1
   12ca8:	bl	11234 <ftruncate64@plt>
   12cac:	cmp	r0, #0
   12cb0:	blt	12c88 <__assert_fail@plt+0x1784>
   12cb4:	beq	1287c <__assert_fail@plt+0x1378>
   12cb8:	ldr	r3, [sp, #36]	; 0x24
   12cbc:	ldr	r9, [r3]
   12cc0:	mov	r2, #5
   12cc4:	ldr	r1, [pc, #-1920]	; 1254c <__assert_fail@plt+0x1048>
   12cc8:	mov	r0, #0
   12ccc:	bl	1124c <dcgettext@plt>
   12cd0:	ldr	r1, [r4, #112]	; 0x70
   12cd4:	mov	r8, r0
   12cd8:	mov	r0, #4
   12cdc:	bl	182f4 <__assert_fail@plt+0x6df0>
   12ce0:	mov	r2, r8
   12ce4:	strd	r6, [sp]
   12ce8:	mov	r1, r9
   12cec:	str	r0, [sp, #8]
   12cf0:	mov	r0, #0
   12cf4:	bl	138e4 <__assert_fail@plt+0x23e0>
   12cf8:	b	12630 <__assert_fail@plt+0x112c>
   12cfc:	mov	r3, #1
   12d00:	str	r3, [sp, #40]	; 0x28
   12d04:	b	127e4 <__assert_fail@plt+0x12e0>
   12d08:	ldr	r3, [sp, #36]	; 0x24
   12d0c:	ldr	r9, [r3]
   12d10:	add	r2, sp, #88	; 0x58
   12d14:	mov	r1, #1
   12d18:	mov	r0, #3
   12d1c:	bl	112a0 <__fxstat64@plt>
   12d20:	cmp	r0, #0
   12d24:	bne	130d8 <__assert_fail@plt+0x1bd4>
   12d28:	ldr	r3, [sp, #104]	; 0x68
   12d2c:	and	r3, r3, #61440	; 0xf000
   12d30:	sub	r3, r3, #16384	; 0x4000
   12d34:	bic	r3, r3, #16384	; 0x4000
   12d38:	cmp	r3, #0
   12d3c:	bne	11b5c <__assert_fail@plt+0x658>
   12d40:	mov	r2, #5
   12d44:	ldr	r1, [pc, #-2044]	; 12550 <__assert_fail@plt+0x104c>
   12d48:	bl	1124c <dcgettext@plt>
   12d4c:	ldr	r1, [r4, #112]	; 0x70
   12d50:	mov	r5, r0
   12d54:	mov	r0, #4
   12d58:	bl	182f4 <__assert_fail@plt+0x6df0>
   12d5c:	mov	r2, r5
   12d60:	strd	r6, [sp]
   12d64:	mov	r1, r9
   12d68:	str	r0, [sp, #8]
   12d6c:	mov	r0, #1
   12d70:	bl	138e4 <__assert_fail@plt+0x23e0>
   12d74:	mov	r1, #1
   12d78:	ldr	r0, [pc, #-2084]	; 1255c <__assert_fail@plt+0x1058>
   12d7c:	bl	147e4 <__assert_fail@plt+0x32e0>
   12d80:	b	128c8 <__assert_fail@plt+0x13c4>
   12d84:	mov	r3, #0
   12d88:	add	r1, sp, #88	; 0x58
   12d8c:	mov	r0, r8
   12d90:	str	r3, [sp, #88]	; 0x58
   12d94:	bl	139a4 <__assert_fail@plt+0x24a0>
   12d98:	ldr	ip, [pc, #-2124]	; 12554 <__assert_fail@plt+0x1050>
   12d9c:	mov	r2, sl
   12da0:	mov	r3, #105	; 0x69
   12da4:	ldrb	lr, [r2], #1
   12da8:	cmp	lr, r3
   12dac:	bne	12f2c <__assert_fail@plt+0x1a28>
   12db0:	ldrb	r3, [ip, #1]!
   12db4:	cmp	r3, #0
   12db8:	bne	12da4 <__assert_fail@plt+0x18a0>
   12dbc:	ldrb	r3, [r2]
   12dc0:	cmp	r3, #0
   12dc4:	cmpne	r3, #61	; 0x3d
   12dc8:	bne	12f2c <__assert_fail@plt+0x1a28>
   12dcc:	ldr	r2, [r4, #104]	; 0x68
   12dd0:	mvn	r3, #-2147483648	; 0x80000000
   12dd4:	add	r2, r2, #2
   12dd8:	str	r0, [r4, #256]	; 0x100
   12ddc:	lsl	r2, r2, #1
   12de0:	rsb	r2, r2, #0
   12de4:	cmp	r2, r3
   12de8:	movcs	r2, r3
   12dec:	mov	r3, #0
   12df0:	orrs	ip, r0, r1
   12df4:	bne	12e5c <__assert_fail@plt+0x1958>
   12df8:	mov	r3, #4
   12dfc:	str	r3, [sp, #88]	; 0x58
   12e00:	ldr	r3, [sp, #88]	; 0x58
   12e04:	cmp	r3, #1
   12e08:	mov	r2, #5
   12e0c:	ldr	r1, [pc, #-2236]	; 12558 <__assert_fail@plt+0x1054>
   12e10:	mov	r0, #0
   12e14:	moveq	r5, #75	; 0x4b
   12e18:	movne	r5, r0
   12e1c:	bl	1124c <dcgettext@plt>
   12e20:	mov	r4, r0
   12e24:	mov	r0, r8
   12e28:	bl	1859c <__assert_fail@plt+0x7098>
   12e2c:	mov	r1, r5
   12e30:	mov	r3, r4
   12e34:	ldr	r2, [pc, #-2196]	; 125a8 <__assert_fail@plt+0x10a4>
   12e38:	str	r0, [sp]
   12e3c:	mov	r0, #1
   12e40:	bl	138e4 <__assert_fail@plt+0x23e0>
   12e44:	bl	14724 <__assert_fail@plt+0x3220>
   12e48:	b	12864 <__assert_fail@plt+0x1360>
   12e4c:	mov	r1, #1
   12e50:	ldr	r0, [pc, #-2300]	; 1255c <__assert_fail@plt+0x1058>
   12e54:	bl	148e4 <__assert_fail@plt+0x33e0>
   12e58:	b	128c8 <__assert_fail@plt+0x13c4>
   12e5c:	cmp	r1, r3
   12e60:	cmpeq	r0, r2
   12e64:	bls	12f1c <__assert_fail@plt+0x1a18>
   12e68:	mov	r3, #1
   12e6c:	str	r3, [sp, #88]	; 0x58
   12e70:	b	12e00 <__assert_fail@plt+0x18fc>
   12e74:	ldr	ip, [pc, #-2332]	; 12560 <__assert_fail@plt+0x105c>
   12e78:	mov	r3, sl
   12e7c:	mov	r2, #115	; 0x73
   12e80:	ldrb	lr, [r3], #1
   12e84:	cmp	lr, r2
   12e88:	bne	12eac <__assert_fail@plt+0x19a8>
   12e8c:	ldrb	r2, [ip, #1]!
   12e90:	cmp	r2, #0
   12e94:	bne	12e80 <__assert_fail@plt+0x197c>
   12e98:	ldrb	r3, [r3]
   12e9c:	cmp	r3, #0
   12ea0:	cmpne	r3, #61	; 0x3d
   12ea4:	strdeq	r0, [sp, #48]	; 0x30
   12ea8:	beq	12f1c <__assert_fail@plt+0x1a18>
   12eac:	ldr	ip, [pc, #-2384]	; 12564 <__assert_fail@plt+0x1060>
   12eb0:	mov	r3, sl
   12eb4:	mov	r2, #115	; 0x73
   12eb8:	ldrb	lr, [r3], #1
   12ebc:	cmp	lr, r2
   12ec0:	bne	12ee4 <__assert_fail@plt+0x19e0>
   12ec4:	ldrb	r2, [ip, #1]!
   12ec8:	cmp	r2, #0
   12ecc:	bne	12eb8 <__assert_fail@plt+0x19b4>
   12ed0:	ldrb	r3, [r3]
   12ed4:	cmp	r3, #0
   12ed8:	cmpne	r3, #61	; 0x3d
   12edc:	strdeq	r0, [sp, #56]	; 0x38
   12ee0:	beq	12f1c <__assert_fail@plt+0x1a18>
   12ee4:	ldr	ip, [pc, #-2436]	; 12568 <__assert_fail@plt+0x1064>
   12ee8:	mov	r3, sl
   12eec:	mov	r2, #99	; 0x63
   12ef0:	ldrb	lr, [r3], #1
   12ef4:	cmp	lr, r2
   12ef8:	bne	13224 <__assert_fail@plt+0x1d20>
   12efc:	ldrb	r2, [ip, #1]!
   12f00:	cmp	r2, #0
   12f04:	bne	12ef0 <__assert_fail@plt+0x19ec>
   12f08:	ldrb	r3, [r3]
   12f0c:	cmp	r3, #0
   12f10:	cmpne	r3, #61	; 0x3d
   12f14:	bne	13224 <__assert_fail@plt+0x1d20>
   12f18:	strd	r0, [sp, #40]	; 0x28
   12f1c:	ldr	r3, [sp, #88]	; 0x58
   12f20:	cmp	r3, #0
   12f24:	beq	11700 <__assert_fail@plt+0x1fc>
   12f28:	b	12e04 <__assert_fail@plt+0x1900>
   12f2c:	ldr	ip, [pc, #-2504]	; 1256c <__assert_fail@plt+0x1068>
   12f30:	mov	r3, sl
   12f34:	mov	r2, #111	; 0x6f
   12f38:	ldrb	lr, [r3], #1
   12f3c:	cmp	lr, r2
   12f40:	bne	13060 <__assert_fail@plt+0x1b5c>
   12f44:	ldrb	r2, [ip, #1]!
   12f48:	cmp	r2, #0
   12f4c:	bne	12f38 <__assert_fail@plt+0x1a34>
   12f50:	ldrb	r3, [r3]
   12f54:	cmp	r3, #0
   12f58:	cmpne	r3, #61	; 0x3d
   12f5c:	bne	13060 <__assert_fail@plt+0x1b5c>
   12f60:	ldr	r2, [r4, #104]	; 0x68
   12f64:	mvn	r3, #-2147483648	; 0x80000000
   12f68:	rsb	r2, r2, #0
   12f6c:	cmp	r2, r3
   12f70:	movcs	r2, r3
   12f74:	str	r0, [r4, #264]	; 0x108
   12f78:	mov	r3, #0
   12f7c:	b	12df0 <__assert_fail@plt+0x18ec>
   12f80:	ldr	r3, [sp, #36]	; 0x24
   12f84:	mov	r2, #5
   12f88:	ldr	r1, [pc, #-2572]	; 12584 <__assert_fail@plt+0x1080>
   12f8c:	mov	r0, #0
   12f90:	ldr	r6, [r3]
   12f94:	b	12608 <__assert_fail@plt+0x1104>
   12f98:	mov	r2, #5
   12f9c:	ldr	r1, [pc, #-2612]	; 12570 <__assert_fail@plt+0x106c>
   12fa0:	mov	r0, #0
   12fa4:	bl	1124c <dcgettext@plt>
   12fa8:	ldr	r1, [r4, #112]	; 0x70
   12fac:	mov	r7, r0
   12fb0:	mov	r0, #4
   12fb4:	bl	182f4 <__assert_fail@plt+0x6df0>
   12fb8:	mov	r2, r7
   12fbc:	mov	r1, r6
   12fc0:	mov	r3, r0
   12fc4:	mov	r0, #0
   12fc8:	bl	138e4 <__assert_fail@plt+0x23e0>
   12fcc:	mov	r3, #1
   12fd0:	str	r3, [sp, #40]	; 0x28
   12fd4:	b	12b2c <__assert_fail@plt+0x1628>
   12fd8:	mov	r2, #5
   12fdc:	ldr	r1, [pc, #-2628]	; 125a0 <__assert_fail@plt+0x109c>
   12fe0:	mov	r0, r8
   12fe4:	bl	1124c <dcgettext@plt>
   12fe8:	ldr	r3, [pc, #-2684]	; 12574 <__assert_fail@plt+0x1070>
   12fec:	tst	r7, #4
   12ff0:	mov	r4, r0
   12ff4:	ldr	r0, [pc, #-2692]	; 12578 <__assert_fail@plt+0x1074>
   12ff8:	moveq	r0, r3
   12ffc:	bl	1859c <__assert_fail@plt+0x7098>
   13000:	ldr	r2, [pc, #-2656]	; 125a8 <__assert_fail@plt+0x10a4>
   13004:	mov	r3, r4
   13008:	mov	r1, r8
   1300c:	str	r0, [sp]
   13010:	mov	r0, r1
   13014:	bl	138e4 <__assert_fail@plt+0x23e0>
   13018:	mov	r0, #1
   1301c:	bl	14de0 <__assert_fail@plt+0x38dc>
   13020:	ldr	r3, [sp, #36]	; 0x24
   13024:	mov	r2, #5
   13028:	ldr	r1, [pc, #-2740]	; 1257c <__assert_fail@plt+0x1078>
   1302c:	mov	r0, #0
   13030:	ldr	r5, [r3]
   13034:	bl	1124c <dcgettext@plt>
   13038:	ldr	r1, [r4, #112]	; 0x70
   1303c:	mov	r6, r0
   13040:	mov	r0, #4
   13044:	bl	182f4 <__assert_fail@plt+0x6df0>
   13048:	mov	r2, r6
   1304c:	mov	r1, r5
   13050:	mov	r3, r0
   13054:	mov	r0, #0
   13058:	bl	138e4 <__assert_fail@plt+0x23e0>
   1305c:	bl	1470c <__assert_fail@plt+0x3208>
   13060:	ldr	ip, [pc, #-2792]	; 12580 <__assert_fail@plt+0x107c>
   13064:	mov	r3, sl
   13068:	mov	r2, #98	; 0x62
   1306c:	ldrb	lr, [r3], #1
   13070:	cmp	lr, r2
   13074:	bne	131b4 <__assert_fail@plt+0x1cb0>
   13078:	ldrb	r2, [ip, #1]!
   1307c:	cmp	r2, #0
   13080:	bne	1306c <__assert_fail@plt+0x1b68>
   13084:	ldrb	r3, [r3]
   13088:	cmp	r3, #0
   1308c:	cmpne	r3, #61	; 0x3d
   13090:	bne	131b4 <__assert_fail@plt+0x1cb0>
   13094:	ldr	r2, [r4, #104]	; 0x68
   13098:	mvn	r3, #-2147483648	; 0x80000000
   1309c:	add	r2, r2, #2
   130a0:	str	r0, [sp, #36]	; 0x24
   130a4:	b	12ddc <__assert_fail@plt+0x18d8>
   130a8:	mov	r2, #5
   130ac:	ldr	r1, [pc, #-2824]	; 125ac <__assert_fail@plt+0x10a8>
   130b0:	bl	1124c <dcgettext@plt>
   130b4:	mov	r4, r0
   130b8:	mov	r0, sl
   130bc:	bl	1859c <__assert_fail@plt+0x7098>
   130c0:	mov	r2, r4
   130c4:	mov	r1, r8
   130c8:	mov	r3, r0
   130cc:	mov	r0, r8
   130d0:	bl	138e4 <__assert_fail@plt+0x23e0>
   130d4:	b	13018 <__assert_fail@plt+0x1b14>
   130d8:	ldr	r1, [pc, #-2908]	; 12584 <__assert_fail@plt+0x1080>
   130dc:	mov	r2, #5
   130e0:	ldr	r3, [sp, #36]	; 0x24
   130e4:	mov	r0, #0
   130e8:	ldr	r5, [r3]
   130ec:	bl	1124c <dcgettext@plt>
   130f0:	ldr	r1, [r4, #112]	; 0x70
   130f4:	mov	r6, r0
   130f8:	mov	r0, #4
   130fc:	bl	182f4 <__assert_fail@plt+0x6df0>
   13100:	mov	r2, r6
   13104:	mov	r1, r5
   13108:	mov	r3, r0
   1310c:	mov	r0, #1
   13110:	bl	138e4 <__assert_fail@plt+0x23e0>
   13114:	mov	r2, #5
   13118:	ldr	r1, [pc, #-2968]	; 12588 <__assert_fail@plt+0x1084>
   1311c:	mov	r0, r9
   13120:	bl	1124c <dcgettext@plt>
   13124:	ldrd	r2, [sp, #48]	; 0x30
   13128:	str	sl, [sp, #8]
   1312c:	mov	r1, r9
   13130:	strd	r2, [sp]
   13134:	mov	r2, r0
   13138:	mov	r0, #1
   1313c:	bl	138e4 <__assert_fail@plt+0x23e0>
   13140:	ldr	r1, [pc, #-3004]	; 1258c <__assert_fail@plt+0x1088>
   13144:	mov	r2, #5
   13148:	mov	r0, #0
   1314c:	bl	1124c <dcgettext@plt>
   13150:	mov	r1, #0
   13154:	mov	r2, r0
   13158:	mov	r0, #1
   1315c:	bl	138e4 <__assert_fail@plt+0x23e0>
   13160:	bl	11258 <__stack_chk_fail@plt>
   13164:	mov	r2, #5
   13168:	ldr	r1, [pc, #-3040]	; 12590 <__assert_fail@plt+0x108c>
   1316c:	mov	r0, r9
   13170:	bl	1124c <dcgettext@plt>
   13174:	mov	r4, r0
   13178:	ldr	r0, [pc, #-3052]	; 12594 <__assert_fail@plt+0x1090>
   1317c:	bl	1859c <__assert_fail@plt+0x7098>
   13180:	mov	r3, r4
   13184:	ldr	r2, [pc, #-3044]	; 125a8 <__assert_fail@plt+0x10a4>
   13188:	mov	r1, r9
   1318c:	b	1300c <__assert_fail@plt+0x1b08>
   13190:	ldr	r3, [sp, #36]	; 0x24
   13194:	ldr	r1, [pc, #-3076]	; 12598 <__assert_fail@plt+0x1094>
   13198:	mov	r2, #5
   1319c:	mov	r0, #0
   131a0:	ldr	r5, [r3]
   131a4:	bl	1124c <dcgettext@plt>
   131a8:	ldr	r1, [r4, #108]	; 0x6c
   131ac:	mov	r6, r0
   131b0:	b	130f8 <__assert_fail@plt+0x1bf4>
   131b4:	ldr	ip, [pc, #-3104]	; 1259c <__assert_fail@plt+0x1098>
   131b8:	mov	r3, sl
   131bc:	mov	r2, #99	; 0x63
   131c0:	ldrb	lr, [r3], #1
   131c4:	cmp	lr, r2
   131c8:	bne	12e74 <__assert_fail@plt+0x1970>
   131cc:	ldrb	r2, [ip, #1]!
   131d0:	cmp	r2, #0
   131d4:	bne	131c0 <__assert_fail@plt+0x1cbc>
   131d8:	ldrb	r3, [r3]
   131dc:	cmp	r3, #0
   131e0:	cmpne	r3, #61	; 0x3d
   131e4:	bne	12e74 <__assert_fail@plt+0x1970>
   131e8:	str	r0, [r4, #292]	; 0x124
   131ec:	mvn	r2, #0
   131f0:	mov	r3, #0
   131f4:	b	12df0 <__assert_fail@plt+0x18ec>
   131f8:	mov	r2, #5
   131fc:	ldr	r1, [pc, #-3172]	; 125a0 <__assert_fail@plt+0x109c>
   13200:	mov	r0, #0
   13204:	bl	1124c <dcgettext@plt>
   13208:	mov	r4, r0
   1320c:	ldr	r0, [pc, #-3184]	; 125a4 <__assert_fail@plt+0x10a0>
   13210:	bl	1859c <__assert_fail@plt+0x7098>
   13214:	mov	r1, #0
   13218:	mov	r3, r4
   1321c:	ldr	r2, [pc, #-3196]	; 125a8 <__assert_fail@plt+0x10a4>
   13220:	b	1300c <__assert_fail@plt+0x1b08>
   13224:	mov	r2, #5
   13228:	ldr	r1, [pc, #-3204]	; 125ac <__assert_fail@plt+0x10a8>
   1322c:	mov	r0, #0
   13230:	bl	1124c <dcgettext@plt>
   13234:	mov	r4, r0
   13238:	mov	r0, sl
   1323c:	bl	1859c <__assert_fail@plt+0x7098>
   13240:	mov	r1, #0
   13244:	mov	r2, r4
   13248:	mov	r3, r0
   1324c:	mov	r0, r1
   13250:	bl	138e4 <__assert_fail@plt+0x23e0>
   13254:	mov	r0, #1
   13258:	bl	14de0 <__assert_fail@plt+0x38dc>
   1325c:	mov	fp, #0
   13260:	mov	lr, #0
   13264:	pop	{r1}		; (ldr r1, [sp], #4)
   13268:	mov	r2, sp
   1326c:	push	{r2}		; (str r2, [sp, #-4]!)
   13270:	push	{r0}		; (str r0, [sp, #-4]!)
   13274:	ldr	ip, [pc, #16]	; 1328c <__assert_fail@plt+0x1d88>
   13278:	push	{ip}		; (str ip, [sp, #-4]!)
   1327c:	ldr	r0, [pc, #12]	; 13290 <__assert_fail@plt+0x1d8c>
   13280:	ldr	r3, [pc, #12]	; 13294 <__assert_fail@plt+0x1d90>
   13284:	bl	11360 <__libc_start_main@plt>
   13288:	bl	114d4 <abort@plt>
   1328c:	andeq	ip, r1, r8, lsl #13
   13290:	andeq	r1, r1, r0, lsl r5
   13294:	andeq	ip, r1, r8, lsr #12
   13298:	ldr	r3, [pc, #20]	; 132b4 <__assert_fail@plt+0x1db0>
   1329c:	ldr	r2, [pc, #20]	; 132b8 <__assert_fail@plt+0x1db4>
   132a0:	add	r3, pc, r3
   132a4:	ldr	r2, [r3, r2]
   132a8:	cmp	r2, #0
   132ac:	bxeq	lr
   132b0:	b	11390 <__gmon_start__@plt>
   132b4:	andeq	fp, r1, r8, asr sp
   132b8:	andeq	r0, r0, r0, asr #2
   132bc:	ldr	r0, [pc, #24]	; 132dc <__assert_fail@plt+0x1dd8>
   132c0:	ldr	r3, [pc, #24]	; 132e0 <__assert_fail@plt+0x1ddc>
   132c4:	cmp	r3, r0
   132c8:	bxeq	lr
   132cc:	ldr	r3, [pc, #16]	; 132e4 <__assert_fail@plt+0x1de0>
   132d0:	cmp	r3, #0
   132d4:	bxeq	lr
   132d8:	bx	r3
   132dc:			; <UNDEFINED> instruction: 0x0002f1bc
   132e0:			; <UNDEFINED> instruction: 0x0002f1bc
   132e4:	andeq	r0, r0, r0
   132e8:	ldr	r0, [pc, #36]	; 13314 <__assert_fail@plt+0x1e10>
   132ec:	ldr	r1, [pc, #36]	; 13318 <__assert_fail@plt+0x1e14>
   132f0:	sub	r1, r1, r0
   132f4:	asr	r1, r1, #2
   132f8:	add	r1, r1, r1, lsr #31
   132fc:	asrs	r1, r1, #1
   13300:	bxeq	lr
   13304:	ldr	r3, [pc, #16]	; 1331c <__assert_fail@plt+0x1e18>
   13308:	cmp	r3, #0
   1330c:	bxeq	lr
   13310:	bx	r3
   13314:			; <UNDEFINED> instruction: 0x0002f1bc
   13318:			; <UNDEFINED> instruction: 0x0002f1bc
   1331c:	andeq	r0, r0, r0
   13320:	push	{r4, lr}
   13324:	ldr	r4, [pc, #24]	; 13344 <__assert_fail@plt+0x1e40>
   13328:	ldrb	r3, [r4]
   1332c:	cmp	r3, #0
   13330:	popne	{r4, pc}
   13334:	bl	132bc <__assert_fail@plt+0x1db8>
   13338:	mov	r3, #1
   1333c:	strb	r3, [r4]
   13340:	pop	{r4, pc}
   13344:	ldrdeq	pc, [r2], -ip
   13348:	b	132e8 <__assert_fail@plt+0x1de4>
   1334c:	andeq	r0, r0, r0
   13350:	ldr	r3, [pc, #4]	; 1335c <__assert_fail@plt+0x1e58>
   13354:	str	r0, [r3]
   13358:	bx	lr
   1335c:	andeq	pc, r2, r0, ror #3
   13360:	ldr	r2, [pc, #12]	; 13374 <__assert_fail@plt+0x1e70>
   13364:	ldr	r3, [r2, #4]
   13368:	add	r3, r3, #1
   1336c:	str	r3, [r2, #4]
   13370:	bx	lr
   13374:	andeq	pc, r2, r0, ror #3
   13378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1337c:	vpush	{d8}
   13380:	mov	sl, r0
   13384:	mov	fp, r1
   13388:	orrs	r3, sl, fp
   1338c:	ldr	r3, [pc, #924]	; 13730 <__assert_fail@plt+0x222c>
   13390:	sub	sp, sp, #2016	; 0x7e0
   13394:	sub	sp, sp, #12
   13398:	ldr	r3, [r3]
   1339c:	movne	r8, r0
   133a0:	str	r3, [sp, #2020]	; 0x7e4
   133a4:	movne	r9, r1
   133a8:	beq	136bc <__assert_fail@plt+0x21b8>
   133ac:	ldr	r4, [pc, #896]	; 13734 <__assert_fail@plt+0x2230>
   133b0:	mov	r6, #1
   133b4:	mov	r7, #0
   133b8:	add	r2, sp, #32
   133bc:	ldrd	r0, [r4, #8]
   133c0:	strd	r6, [sp, #8]
   133c4:	strd	r6, [sp]
   133c8:	ldr	r3, [pc, #872]	; 13738 <__assert_fail@plt+0x2234>
   133cc:	bl	156a0 <__assert_fail@plt+0x419c>
   133d0:	add	r2, sp, #684	; 0x2ac
   133d4:	add	r2, r2, #2
   133d8:	strd	r6, [sp, #8]
   133dc:	strd	r6, [sp]
   133e0:	ldr	r3, [pc, #852]	; 1373c <__assert_fail@plt+0x2238>
   133e4:	mov	r5, r0
   133e8:	ldrd	r0, [r4, #8]
   133ec:	bl	156a0 <__assert_fail@plt+0x419c>
   133f0:	ldrd	r2, [r4, #16]
   133f4:	cmp	r2, r8
   133f8:	sbcs	r1, r3, r9
   133fc:	mov	r6, r0
   13400:	bge	1360c <__assert_fail@plt+0x2108>
   13404:	subs	r7, r8, r2
   13408:	sbc	r3, r9, r3
   1340c:	mov	r1, r3
   13410:	mov	r0, r7
   13414:	str	r3, [sp, #24]
   13418:	bl	1c32c <__assert_fail@plt+0xae28>
   1341c:	add	r9, pc, #756	; 0x2f4
   13420:	ldrd	r8, [r9]
   13424:	vldr	d7, [pc, #756]	; 13720 <__assert_fail@plt+0x221c>
   13428:	ldr	r3, [sp, #24]
   1342c:	add	r2, sp, #1328	; 0x530
   13430:	add	r2, r2, #12
   13434:	str	r3, [sp, #12]
   13438:	strd	r8, [sp]
   1343c:	ldr	r3, [pc, #756]	; 13738 <__assert_fail@plt+0x2234>
   13440:	str	r7, [sp, #8]
   13444:	vmov	d6, r0, r1
   13448:	ldrd	r0, [r4, #8]
   1344c:	vdiv.f64	d8, d6, d7
   13450:	bl	156a0 <__assert_fail@plt+0x419c>
   13454:	mov	r8, r0
   13458:	bl	113c0 <strlen@plt>
   1345c:	ldr	r3, [pc, #732]	; 13740 <__assert_fail@plt+0x223c>
   13460:	ldrh	r1, [r3]
   13464:	ldrb	r3, [r3, #2]
   13468:	add	r2, r8, r0
   1346c:	strh	r1, [r8, r0]
   13470:	strb	r3, [r2, #2]
   13474:	orrs	r3, sl, fp
   13478:	beq	134ac <__assert_fail@plt+0x1fa8>
   1347c:	ldr	r7, [pc, #704]	; 13744 <__assert_fail@plt+0x2240>
   13480:	ldr	r0, [r7]
   13484:	ldr	r3, [r0, #20]
   13488:	ldr	r2, [r0, #24]
   1348c:	cmp	r3, r2
   13490:	bcs	13704 <__assert_fail@plt+0x2200>
   13494:	add	r2, r3, #1
   13498:	mov	r1, #13
   1349c:	str	r2, [r0, #20]
   134a0:	ldr	r2, [pc, #672]	; 13748 <__assert_fail@plt+0x2244>
   134a4:	strb	r1, [r3]
   134a8:	b	134b4 <__assert_fail@plt+0x1fb0>
   134ac:	ldr	r2, [pc, #664]	; 1374c <__assert_fail@plt+0x2248>
   134b0:	ldr	r7, [pc, #652]	; 13744 <__assert_fail@plt+0x2240>
   134b4:	mov	r3, #24
   134b8:	add	r0, sp, #1984	; 0x7c0
   134bc:	mov	r1, r3
   134c0:	str	r2, [sp]
   134c4:	vstr	d8, [sp, #8]
   134c8:	mov	r2, #1
   134cc:	add	r0, r0, #12
   134d0:	bl	114f8 <__snprintf_chk@plt>
   134d4:	mov	r0, r5
   134d8:	bl	113c0 <strlen@plt>
   134dc:	add	r0, r5, r0
   134e0:	ldrb	r3, [r0, #-2]
   134e4:	cmp	r3, #32
   134e8:	beq	13650 <__assert_fail@plt+0x214c>
   134ec:	mov	r0, r6
   134f0:	bl	113c0 <strlen@plt>
   134f4:	ldrd	r2, [r4, #8]
   134f8:	ldr	r9, [r7]
   134fc:	strd	r2, [sp, #24]
   13500:	mov	r2, #5
   13504:	add	r0, r6, r0
   13508:	ldrb	r3, [r0, #-2]
   1350c:	cmp	r3, #32
   13510:	beq	13598 <__assert_fail@plt+0x2094>
   13514:	ldr	r1, [pc, #564]	; 13750 <__assert_fail@plt+0x224c>
   13518:	mov	r0, #0
   1351c:	bl	1124c <dcgettext@plt>
   13520:	add	r3, sp, #1984	; 0x7c0
   13524:	add	r3, r3, #12
   13528:	str	r3, [sp, #16]
   1352c:	ldrd	r2, [sp, #24]
   13530:	str	r5, [sp, #8]
   13534:	str	r8, [sp, #20]
   13538:	strd	r2, [sp]
   1353c:	str	r6, [sp, #12]
   13540:	mov	r1, #1
   13544:	mov	r2, r0
   13548:	mov	r0, r9
   1354c:	bl	11438 <__fprintf_chk@plt>
   13550:	mov	r5, r0
   13554:	orrs	r3, sl, fp
   13558:	beq	135dc <__assert_fail@plt+0x20d8>
   1355c:	cmp	r5, #0
   13560:	blt	13570 <__assert_fail@plt+0x206c>
   13564:	ldr	r3, [r4, #24]
   13568:	cmp	r3, r5
   1356c:	bgt	136e4 <__assert_fail@plt+0x21e0>
   13570:	str	r5, [r4, #24]
   13574:	ldr	r3, [pc, #436]	; 13730 <__assert_fail@plt+0x222c>
   13578:	ldr	r2, [sp, #2020]	; 0x7e4
   1357c:	ldr	r3, [r3]
   13580:	cmp	r2, r3
   13584:	bne	13714 <__assert_fail@plt+0x2210>
   13588:	add	sp, sp, #2016	; 0x7e0
   1358c:	add	sp, sp, #12
   13590:	vpop	{d8}
   13594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13598:	ldr	r1, [pc, #436]	; 13754 <__assert_fail@plt+0x2250>
   1359c:	mov	r0, #0
   135a0:	bl	1124c <dcgettext@plt>
   135a4:	add	r3, sp, #1984	; 0x7c0
   135a8:	add	r3, r3, #12
   135ac:	str	r3, [sp, #12]
   135b0:	ldrd	r2, [sp, #24]
   135b4:	str	r5, [sp, #8]
   135b8:	str	r8, [sp, #16]
   135bc:	strd	r2, [sp]
   135c0:	mov	r1, #1
   135c4:	mov	r2, r0
   135c8:	mov	r0, r9
   135cc:	bl	11438 <__fprintf_chk@plt>
   135d0:	orrs	r3, sl, fp
   135d4:	mov	r5, r0
   135d8:	bne	1355c <__assert_fail@plt+0x2058>
   135dc:	ldr	r0, [r7]
   135e0:	ldr	r3, [r0, #20]
   135e4:	ldr	r2, [r0, #24]
   135e8:	cmp	r3, r2
   135ec:	addcc	r1, r3, #1
   135f0:	movcc	r2, #10
   135f4:	strcc	r1, [r0, #20]
   135f8:	strbcc	r2, [r3]
   135fc:	bcc	13574 <__assert_fail@plt+0x2070>
   13600:	mov	r1, #10
   13604:	bl	11468 <__overflow@plt>
   13608:	b	13574 <__assert_fail@plt+0x2070>
   1360c:	mov	r2, #5
   13610:	ldr	r1, [pc, #320]	; 13758 <__assert_fail@plt+0x2254>
   13614:	mov	r0, #0
   13618:	bl	1124c <dcgettext@plt>
   1361c:	add	ip, sp, #1328	; 0x530
   13620:	ldr	r2, [pc, #308]	; 1375c <__assert_fail@plt+0x2258>
   13624:	ldr	r3, [pc, #308]	; 13760 <__assert_fail@plt+0x225c>
   13628:	add	ip, ip, #12
   1362c:	str	r2, [sp]
   13630:	mov	r1, r3
   13634:	mov	r2, #1
   13638:	vldr	d8, [pc, #232]	; 13728 <__assert_fail@plt+0x2224>
   1363c:	mov	r8, ip
   13640:	str	r0, [sp, #4]
   13644:	mov	r0, ip
   13648:	bl	114f8 <__snprintf_chk@plt>
   1364c:	b	13474 <__assert_fail@plt+0x1f70>
   13650:	ldrd	r0, [r4, #8]
   13654:	mov	r3, #0
   13658:	mvn	r2, #0
   1365c:	cmp	r1, r3
   13660:	cmpeq	r0, r2
   13664:	strd	r0, [sp, #24]
   13668:	ldr	r5, [r7]
   1366c:	bhi	136cc <__assert_fail@plt+0x21c8>
   13670:	ldr	r3, [sp, #24]
   13674:	mov	r2, #5
   13678:	str	r2, [sp]
   1367c:	ldr	r1, [pc, #224]	; 13764 <__assert_fail@plt+0x2260>
   13680:	ldr	r2, [pc, #224]	; 13768 <__assert_fail@plt+0x2264>
   13684:	mov	r0, #0
   13688:	bl	114ec <dcngettext@plt>
   1368c:	add	r3, sp, #1984	; 0x7c0
   13690:	add	r3, r3, #12
   13694:	str	r3, [sp, #8]
   13698:	ldrd	r2, [sp, #24]
   1369c:	str	r8, [sp, #12]
   136a0:	mov	r1, #1
   136a4:	strd	r2, [sp]
   136a8:	mov	r2, r0
   136ac:	mov	r0, r5
   136b0:	bl	11438 <__fprintf_chk@plt>
   136b4:	mov	r5, r0
   136b8:	b	13554 <__assert_fail@plt+0x2050>
   136bc:	bl	155c4 <__assert_fail@plt+0x40c0>
   136c0:	mov	r8, r0
   136c4:	mov	r9, r1
   136c8:	b	133ac <__assert_fail@plt+0x1ea8>
   136cc:	ldr	r2, [pc, #152]	; 1376c <__assert_fail@plt+0x2268>
   136d0:	mov	r3, #0
   136d4:	bl	1c474 <__assert_fail@plt+0xaf70>
   136d8:	add	r3, r2, #999424	; 0xf4000
   136dc:	add	r3, r3, #576	; 0x240
   136e0:	b	13674 <__assert_fail@plt+0x2170>
   136e4:	ldr	r2, [pc, #132]	; 13770 <__assert_fail@plt+0x226c>
   136e8:	ldr	r0, [r7]
   136ec:	sub	r3, r3, r5
   136f0:	str	r2, [sp]
   136f4:	mov	r1, #1
   136f8:	ldr	r2, [pc, #116]	; 13774 <__assert_fail@plt+0x2270>
   136fc:	bl	11438 <__fprintf_chk@plt>
   13700:	b	13570 <__assert_fail@plt+0x206c>
   13704:	mov	r1, #13
   13708:	bl	11468 <__overflow@plt>
   1370c:	ldr	r2, [pc, #52]	; 13748 <__assert_fail@plt+0x2244>
   13710:	b	134b4 <__assert_fail@plt+0x1fb0>
   13714:	bl	11258 <__stack_chk_fail@plt>
   13718:	blcc	fe6c5f20 <opterr@@GLIBC_2.4+0xfe696d48>
	...
   13724:	bicmi	ip, sp, r5, ror #26
	...
   13730:	andeq	lr, r2, r8, lsl #30
   13734:	andeq	pc, r2, r0, ror #3
   13738:	ldrdeq	r0, [r0], -r1
   1373c:	strdeq	r0, [r0], -r1
   13740:	muleq	r1, r8, ip
   13744:	ldrdeq	pc, [r2], -r0
   13748:	andeq	ip, r1, r8, ror ip
   1374c:	andeq	ip, r1, r0, lsl #25
   13750:	strdeq	ip, [r1], -r4
   13754:	ldrdeq	ip, [r1], -r4
   13758:	andeq	ip, r1, r8, lsl #25
   1375c:	muleq	r1, r4, ip
   13760:	andeq	r0, r0, lr, lsl #5
   13764:			; <UNDEFINED> instruction: 0x0001ccb8
   13768:	muleq	r1, ip, ip
   1376c:	andeq	r4, pc, r0, asr #4
   13770:	andeq	sp, r1, r4, ror #22
   13774:	andeq	ip, r1, r8, lsl sp
   13778:	push	{r4, r5, r6, r7, r8, r9, lr}
   1377c:	sub	sp, sp, #36	; 0x24
   13780:	ldr	r8, [pc, #320]	; 138c8 <__assert_fail@plt+0x23c4>
   13784:	ldr	r3, [r8]
   13788:	cmp	r3, #1
   1378c:	beq	138b0 <__assert_fail@plt+0x23ac>
   13790:	ldr	r6, [pc, #308]	; 138cc <__assert_fail@plt+0x23c8>
   13794:	ldr	r9, [pc, #308]	; 138d0 <__assert_fail@plt+0x23cc>
   13798:	ldr	r3, [r6, #24]
   1379c:	ldr	r7, [r9]
   137a0:	cmp	r3, #0
   137a4:	ble	137d4 <__assert_fail@plt+0x22d0>
   137a8:	ldr	r3, [r7, #20]
   137ac:	ldr	r2, [r7, #24]
   137b0:	cmp	r3, r2
   137b4:	addcc	r1, r3, #1
   137b8:	movcc	r2, #10
   137bc:	strcc	r1, [r7, #20]
   137c0:	strbcc	r2, [r3]
   137c4:	bcs	138b8 <__assert_fail@plt+0x23b4>
   137c8:	ldr	r7, [r9]
   137cc:	mov	r3, #0
   137d0:	str	r3, [r6, #24]
   137d4:	mov	r2, #5
   137d8:	ldr	r1, [pc, #244]	; 138d4 <__assert_fail@plt+0x23d0>
   137dc:	mov	r0, #0
   137e0:	bl	1124c <dcgettext@plt>
   137e4:	ldrd	r4, [r6, #32]
   137e8:	ldrd	r2, [r6, #40]	; 0x28
   137ec:	mov	r1, #1
   137f0:	strd	r4, [sp, #24]
   137f4:	ldrd	r4, [r6, #48]	; 0x30
   137f8:	strd	r2, [sp, #16]
   137fc:	ldrd	r2, [r6, #56]	; 0x38
   13800:	strd	r4, [sp, #8]
   13804:	strd	r2, [sp]
   13808:	mov	r2, r0
   1380c:	mov	r0, r7
   13810:	bl	11438 <__fprintf_chk@plt>
   13814:	ldrd	r4, [r6, #64]	; 0x40
   13818:	orrs	r3, r4, r5
   1381c:	bne	13840 <__assert_fail@plt+0x233c>
   13820:	ldr	r3, [r8]
   13824:	cmp	r3, #2
   13828:	beq	138b0 <__assert_fail@plt+0x23ac>
   1382c:	mov	r0, #0
   13830:	mov	r1, #0
   13834:	add	sp, sp, #36	; 0x24
   13838:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1383c:	b	13378 <__assert_fail@plt+0x1e74>
   13840:	mov	r3, #0
   13844:	cmp	r5, r3
   13848:	mvn	r2, #0
   1384c:	cmpeq	r4, r2
   13850:	ldr	r6, [r9]
   13854:	movls	r3, r4
   13858:	bls	13878 <__assert_fail@plt+0x2374>
   1385c:	ldr	r2, [pc, #116]	; 138d8 <__assert_fail@plt+0x23d4>
   13860:	mov	r3, #0
   13864:	mov	r0, r4
   13868:	mov	r1, r5
   1386c:	bl	1c474 <__assert_fail@plt+0xaf70>
   13870:	add	r3, r2, #999424	; 0xf4000
   13874:	add	r3, r3, #576	; 0x240
   13878:	mov	r2, #5
   1387c:	str	r2, [sp]
   13880:	ldr	r1, [pc, #84]	; 138dc <__assert_fail@plt+0x23d8>
   13884:	ldr	r2, [pc, #84]	; 138e0 <__assert_fail@plt+0x23dc>
   13888:	mov	r0, #0
   1388c:	bl	114ec <dcngettext@plt>
   13890:	strd	r4, [sp]
   13894:	mov	r1, #1
   13898:	mov	r2, r0
   1389c:	mov	r0, r6
   138a0:	bl	11438 <__fprintf_chk@plt>
   138a4:	ldr	r3, [r8]
   138a8:	cmp	r3, #2
   138ac:	bne	1382c <__assert_fail@plt+0x2328>
   138b0:	add	sp, sp, #36	; 0x24
   138b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   138b8:	mov	r0, r7
   138bc:	mov	r1, #10
   138c0:	bl	11468 <__overflow@plt>
   138c4:	b	137c8 <__assert_fail@plt+0x22c4>
   138c8:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   138cc:	andeq	pc, r2, r0, ror #3
   138d0:	ldrdeq	pc, [r2], -r0
   138d4:	andeq	ip, r1, ip, lsl sp
   138d8:	andeq	r4, pc, r0, asr #4
   138dc:	andeq	ip, r1, r0, ror #26
   138e0:	andeq	ip, r1, r8, asr #26
   138e4:	push	{r2, r3}
   138e8:	push	{r4, r5, r6, r7, lr}
   138ec:	sub	sp, sp, #20
   138f0:	ldr	r5, [pc, #160]	; 13998 <__assert_fail@plt+0x2494>
   138f4:	ldr	r4, [pc, #160]	; 1399c <__assert_fail@plt+0x2498>
   138f8:	mov	r6, r0
   138fc:	ldr	r2, [r5, #24]
   13900:	ldr	r3, [r4]
   13904:	cmp	r2, #0
   13908:	mov	r7, r1
   1390c:	str	r3, [sp, #12]
   13910:	ldr	r2, [sp, #40]	; 0x28
   13914:	ble	13948 <__assert_fail@plt+0x2444>
   13918:	ldr	r3, [pc, #128]	; 139a0 <__assert_fail@plt+0x249c>
   1391c:	ldr	r0, [r3]
   13920:	ldr	r3, [r0, #20]
   13924:	ldr	r1, [r0, #24]
   13928:	cmp	r3, r1
   1392c:	addcc	ip, r3, #1
   13930:	movcc	r1, #10
   13934:	strcc	ip, [r0, #20]
   13938:	strbcc	r1, [r3]
   1393c:	bcs	13980 <__assert_fail@plt+0x247c>
   13940:	mov	r3, #0
   13944:	str	r3, [r5, #24]
   13948:	add	ip, sp, #44	; 0x2c
   1394c:	mov	r3, ip
   13950:	mov	r1, r7
   13954:	mov	r0, r6
   13958:	str	ip, [sp, #8]
   1395c:	bl	1866c <__assert_fail@plt+0x7168>
   13960:	ldr	r2, [sp, #12]
   13964:	ldr	r3, [r4]
   13968:	cmp	r2, r3
   1396c:	bne	13994 <__assert_fail@plt+0x2490>
   13970:	add	sp, sp, #20
   13974:	pop	{r4, r5, r6, r7, lr}
   13978:	add	sp, sp, #8
   1397c:	bx	lr
   13980:	mov	r1, #10
   13984:	str	r2, [sp, #4]
   13988:	bl	11468 <__overflow@plt>
   1398c:	ldr	r2, [sp, #4]
   13990:	b	13940 <__assert_fail@plt+0x243c>
   13994:	bl	11258 <__stack_chk_fail@plt>
   13998:	andeq	pc, r2, r0, ror #3
   1399c:	andeq	lr, r2, r8, lsl #30
   139a0:	ldrdeq	pc, [r2], -r0
   139a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139a8:	sub	sp, sp, #40	; 0x28
   139ac:	ldr	r4, [pc, #348]	; 13b10 <__assert_fail@plt+0x260c>
   139b0:	ldr	r3, [pc, #348]	; 13b14 <__assert_fail@plt+0x2610>
   139b4:	mov	r5, r1
   139b8:	ldr	ip, [r4]
   139bc:	str	r3, [sp]
   139c0:	mov	r2, #10
   139c4:	add	r3, sp, #24
   139c8:	add	r1, sp, #20
   139cc:	str	ip, [sp, #36]	; 0x24
   139d0:	mov	sl, r0
   139d4:	bl	18e70 <__assert_fail@plt+0x796c>
   139d8:	cmp	r0, #2
   139dc:	beq	13a04 <__assert_fail@plt+0x2500>
   139e0:	cmp	r0, #0
   139e4:	ldrdeq	r0, [sp, #24]
   139e8:	bne	13a14 <__assert_fail@plt+0x2510>
   139ec:	ldr	r2, [sp, #36]	; 0x24
   139f0:	ldr	r3, [r4]
   139f4:	cmp	r2, r3
   139f8:	bne	13b0c <__assert_fail@plt+0x2608>
   139fc:	add	sp, sp, #40	; 0x28
   13a00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13a04:	ldr	r3, [sp, #20]
   13a08:	ldrb	r2, [r3]
   13a0c:	cmp	r2, #120	; 0x78
   13a10:	beq	13a24 <__assert_fail@plt+0x2520>
   13a14:	str	r0, [r5]
   13a18:	mov	r1, #0
   13a1c:	mov	r0, #0
   13a20:	b	139ec <__assert_fail@plt+0x24e8>
   13a24:	add	r0, r3, #1
   13a28:	mov	r1, r5
   13a2c:	bl	139a4 <__assert_fail@plt+0x24a0>
   13a30:	ldrd	r8, [sp, #24]
   13a34:	mov	r6, r0
   13a38:	mov	r7, r1
   13a3c:	orrs	r3, r6, r7
   13a40:	beq	13a90 <__assert_fail@plt+0x258c>
   13a44:	mul	ip, r8, r7
   13a48:	mov	r2, r0
   13a4c:	mov	r3, r1
   13a50:	umull	r0, r1, r8, r6
   13a54:	mla	ip, r6, r9, ip
   13a58:	strd	r8, [sp, #8]
   13a5c:	add	r1, ip, r1
   13a60:	bl	1c474 <__assert_fail@plt+0xaf70>
   13a64:	ldrd	r2, [sp, #8]
   13a68:	cmp	r3, r1
   13a6c:	cmpeq	r2, r0
   13a70:	mov	r8, r0
   13a74:	mov	r9, r1
   13a78:	beq	13a90 <__assert_fail@plt+0x258c>
   13a7c:	mov	r3, #1
   13a80:	str	r3, [r5]
   13a84:	mov	r0, #0
   13a88:	mov	r1, #0
   13a8c:	b	139ec <__assert_fail@plt+0x24e8>
   13a90:	orrs	r3, r8, r9
   13a94:	bne	13af8 <__assert_fail@plt+0x25f4>
   13a98:	mov	r0, sl
   13a9c:	mov	r2, #2
   13aa0:	ldr	r1, [pc, #112]	; 13b18 <__assert_fail@plt+0x2614>
   13aa4:	bl	114bc <strncmp@plt>
   13aa8:	subs	r5, r0, #0
   13aac:	bne	13af8 <__assert_fail@plt+0x25f4>
   13ab0:	mov	r2, #5
   13ab4:	ldr	r1, [pc, #96]	; 13b1c <__assert_fail@plt+0x2618>
   13ab8:	bl	1124c <dcgettext@plt>
   13abc:	ldr	r1, [pc, #84]	; 13b18 <__assert_fail@plt+0x2614>
   13ac0:	mov	r8, r0
   13ac4:	mov	r0, r5
   13ac8:	bl	1858c <__assert_fail@plt+0x7088>
   13acc:	ldr	r1, [pc, #76]	; 13b20 <__assert_fail@plt+0x261c>
   13ad0:	mov	r9, r0
   13ad4:	mov	r0, #1
   13ad8:	bl	1858c <__assert_fail@plt+0x7088>
   13adc:	mov	r3, r9
   13ae0:	mov	r2, r8
   13ae4:	mov	r1, r5
   13ae8:	str	r0, [sp]
   13aec:	mov	r0, r5
   13af0:	bl	138e4 <__assert_fail@plt+0x23e0>
   13af4:	ldrd	r8, [sp, #24]
   13af8:	mul	r3, r6, r9
   13afc:	umull	r0, r1, r6, r8
   13b00:	mla	r8, r8, r7, r3
   13b04:	add	r1, r8, r1
   13b08:	b	139ec <__assert_fail@plt+0x24e8>
   13b0c:	bl	11258 <__stack_chk_fail@plt>
   13b10:	andeq	lr, r2, r8, lsl #30
   13b14:	andeq	ip, r1, r8, ror sp
   13b18:	andeq	ip, r1, r8, lsl #27
   13b1c:	andeq	ip, r1, ip, lsl #27
   13b20:	andeq	ip, r1, ip, asr #27
   13b24:	push	{r4, r5, r6, r7, r8, lr}
   13b28:	sub	sp, sp, #112	; 0x70
   13b2c:	ldr	r4, [pc, #244]	; 13c28 <__assert_fail@plt+0x2724>
   13b30:	bics	r5, r1, #33024	; 0x8100
   13b34:	ldr	r3, [r4]
   13b38:	str	r3, [sp, #108]	; 0x6c
   13b3c:	bne	13b58 <__assert_fail@plt+0x2654>
   13b40:	ldr	r2, [sp, #108]	; 0x6c
   13b44:	ldr	r3, [r4]
   13b48:	cmp	r2, r3
   13b4c:	bne	13c24 <__assert_fail@plt+0x2720>
   13b50:	add	sp, sp, #112	; 0x70
   13b54:	pop	{r4, r5, r6, r7, r8, pc}
   13b58:	mov	r1, #3
   13b5c:	mov	r8, r2
   13b60:	mov	r7, r0
   13b64:	bl	19ac0 <__assert_fail@plt+0x85bc>
   13b68:	cmp	r0, #0
   13b6c:	mov	r6, r0
   13b70:	orr	r5, r5, r0
   13b74:	blt	13bd8 <__assert_fail@plt+0x26d4>
   13b78:	cmp	r0, r5
   13b7c:	beq	13b40 <__assert_fail@plt+0x263c>
   13b80:	tst	r5, #16384	; 0x4000
   13b84:	bne	13ba4 <__assert_fail@plt+0x26a0>
   13b88:	mov	r2, r5
   13b8c:	mov	r0, r7
   13b90:	mov	r1, #4
   13b94:	bl	19ac0 <__assert_fail@plt+0x85bc>
   13b98:	cmn	r0, #1
   13b9c:	bne	13b40 <__assert_fail@plt+0x263c>
   13ba0:	b	13bd8 <__assert_fail@plt+0x26d4>
   13ba4:	mov	r2, sp
   13ba8:	mov	r1, r7
   13bac:	mov	r0, #3
   13bb0:	bl	112a0 <__fxstat64@plt>
   13bb4:	cmp	r0, #0
   13bb8:	bne	13bd8 <__assert_fail@plt+0x26d4>
   13bbc:	ldr	r3, [sp, #16]
   13bc0:	and	r3, r3, #61440	; 0xf000
   13bc4:	cmp	r3, #16384	; 0x4000
   13bc8:	beq	13c14 <__assert_fail@plt+0x2710>
   13bcc:	bl	113e4 <__errno_location@plt>
   13bd0:	mov	r3, #20
   13bd4:	str	r3, [r0]
   13bd8:	bl	113e4 <__errno_location@plt>
   13bdc:	mov	r2, #5
   13be0:	ldr	r1, [pc, #68]	; 13c2c <__assert_fail@plt+0x2728>
   13be4:	ldr	r4, [r0]
   13be8:	mov	r0, #0
   13bec:	bl	1124c <dcgettext@plt>
   13bf0:	mov	r1, r8
   13bf4:	mov	r5, r0
   13bf8:	mov	r0, #4
   13bfc:	bl	182f4 <__assert_fail@plt+0x6df0>
   13c00:	mov	r2, r5
   13c04:	mov	r1, r4
   13c08:	mov	r3, r0
   13c0c:	mov	r0, #1
   13c10:	bl	138e4 <__assert_fail@plt+0x23e0>
   13c14:	bic	r5, r5, #16384	; 0x4000
   13c18:	cmp	r5, r6
   13c1c:	beq	13b40 <__assert_fail@plt+0x263c>
   13c20:	b	13b88 <__assert_fail@plt+0x2684>
   13c24:	bl	11258 <__stack_chk_fail@plt>
   13c28:	andeq	lr, r2, r8, lsl #30
   13c2c:	ldrdeq	ip, [r1], -r0
   13c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c34:	sub	sp, sp, #76	; 0x4c
   13c38:	ldr	r6, [pc, #272]	; 13d50 <__assert_fail@plt+0x284c>
   13c3c:	mov	r4, r1
   13c40:	mov	sl, r2
   13c44:	ldr	ip, [r6]
   13c48:	add	r2, sp, #12
   13c4c:	mov	r9, r0
   13c50:	mov	r0, r1
   13c54:	ldr	r1, [pc, #248]	; 13d54 <__assert_fail@plt+0x2850>
   13c58:	ldr	r5, [sp, #112]	; 0x70
   13c5c:	mov	fp, r3
   13c60:	str	ip, [sp, #68]	; 0x44
   13c64:	bl	112d0 <ioctl@plt>
   13c68:	str	r5, [sp]
   13c6c:	mov	r2, sl
   13c70:	mov	r3, fp
   13c74:	mov	r8, r0
   13c78:	mov	r0, r4
   13c7c:	bl	112dc <lseek64@plt>
   13c80:	cmp	r1, #0
   13c84:	cmpge	r8, #0
   13c88:	mov	r7, r0
   13c8c:	mov	r5, r1
   13c90:	beq	13cb4 <__assert_fail@plt+0x27b0>
   13c94:	ldr	r2, [sp, #68]	; 0x44
   13c98:	ldr	r3, [r6]
   13c9c:	mov	r0, r7
   13ca0:	cmp	r2, r3
   13ca4:	mov	r1, r5
   13ca8:	bne	13d4c <__assert_fail@plt+0x2848>
   13cac:	add	sp, sp, #76	; 0x4c
   13cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cb4:	mov	r0, r4
   13cb8:	add	r2, sp, #40	; 0x28
   13cbc:	ldr	r1, [pc, #144]	; 13d54 <__assert_fail@plt+0x2850>
   13cc0:	bl	112d0 <ioctl@plt>
   13cc4:	subs	r4, r0, #0
   13cc8:	bne	13c94 <__assert_fail@plt+0x2790>
   13ccc:	ldr	r2, [sp, #16]
   13cd0:	ldr	r3, [sp, #44]	; 0x2c
   13cd4:	cmp	r2, r3
   13cd8:	bne	13c94 <__assert_fail@plt+0x2790>
   13cdc:	ldr	r2, [sp, #32]
   13ce0:	ldr	r3, [sp, #60]	; 0x3c
   13ce4:	cmp	r2, r3
   13ce8:	bne	13c94 <__assert_fail@plt+0x2790>
   13cec:	ldr	r2, [sp, #36]	; 0x24
   13cf0:	ldr	r3, [sp, #64]	; 0x40
   13cf4:	cmp	r2, r3
   13cf8:	bne	13c94 <__assert_fail@plt+0x2790>
   13cfc:	ldr	r3, [pc, #84]	; 13d58 <__assert_fail@plt+0x2854>
   13d00:	ldr	r3, [r3]
   13d04:	cmp	r3, #1
   13d08:	beq	13d34 <__assert_fail@plt+0x2830>
   13d0c:	mov	r2, #5
   13d10:	ldr	r1, [pc, #68]	; 13d5c <__assert_fail@plt+0x2858>
   13d14:	bl	1124c <dcgettext@plt>
   13d18:	ldr	r2, [sp, #40]	; 0x28
   13d1c:	mov	r3, r9
   13d20:	str	r2, [sp]
   13d24:	mov	r1, r4
   13d28:	mov	r2, r0
   13d2c:	mov	r0, r4
   13d30:	bl	138e4 <__assert_fail@plt+0x23e0>
   13d34:	bl	113e4 <__errno_location@plt>
   13d38:	mvn	r7, #0
   13d3c:	mov	r3, #0
   13d40:	mov	r5, r7
   13d44:	str	r3, [r0]
   13d48:	b	13c94 <__assert_fail@plt+0x2790>
   13d4c:	bl	11258 <__stack_chk_fail@plt>
   13d50:	andeq	lr, r2, r8, lsl #30
   13d54:	andshi	r6, ip, r2, lsl #26
   13d58:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   13d5c:	andeq	ip, r1, r8, ror #27
   13d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d64:	subs	fp, r0, #0
   13d68:	ldr	r8, [pc, #516]	; 13f74 <__assert_fail@plt+0x2a70>
   13d6c:	sub	sp, sp, #28
   13d70:	addeq	lr, r8, #80	; 0x50
   13d74:	addne	lr, r8, #72	; 0x48
   13d78:	ldrbeq	sl, [r8, #88]	; 0x58
   13d7c:	ldrbne	sl, [r8, #89]	; 0x59
   13d80:	orrs	r1, r2, r3
   13d84:	ldrd	r4, [lr]
   13d88:	beq	13dcc <__assert_fail@plt+0x28c8>
   13d8c:	adds	r1, r2, r4
   13d90:	str	r1, [sp, #16]
   13d94:	adc	r1, r3, r5
   13d98:	str	r1, [sp, #20]
   13d9c:	ldrd	r0, [sp, #16]
   13da0:	mov	r7, #0
   13da4:	bic	r6, r0, #-16777216	; 0xff000000
   13da8:	bic	r6, r6, #16646144	; 0xfe0000
   13dac:	cmp	r1, r7
   13db0:	cmpeq	r0, r6
   13db4:	strd	r6, [lr]
   13db8:	bhi	13e04 <__assert_fail@plt+0x2900>
   13dbc:	mov	r9, #1
   13dc0:	mov	r0, r9
   13dc4:	add	sp, sp, #28
   13dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dcc:	orrs	r1, r4, r5
   13dd0:	bne	13ddc <__assert_fail@plt+0x28d8>
   13dd4:	cmp	sl, #0
   13dd8:	beq	13dbc <__assert_fail@plt+0x28b8>
   13ddc:	cmp	fp, #0
   13de0:	mov	r6, r2
   13de4:	mov	r7, r3
   13de8:	strd	r2, [sp, #16]
   13dec:	bne	13e24 <__assert_fail@plt+0x2920>
   13df0:	ldrb	r9, [r8, #90]	; 0x5a
   13df4:	cmp	r9, #0
   13df8:	beq	13eec <__assert_fail@plt+0x29e8>
   13dfc:	ldrd	r0, [r8, #96]	; 0x60
   13e00:	b	13e6c <__assert_fail@plt+0x2968>
   13e04:	ldrd	r0, [sp, #16]
   13e08:	subs	r4, r0, r6
   13e0c:	sbc	r5, r1, r7
   13e10:	orrs	r1, r4, r5
   13e14:	beq	13dbc <__assert_fail@plt+0x28b8>
   13e18:	cmp	fp, #0
   13e1c:	strd	r2, [sp, #16]
   13e20:	beq	13df0 <__assert_fail@plt+0x28ec>
   13e24:	ldr	r9, [pc, #332]	; 13f78 <__assert_fail@plt+0x2a74>
   13e28:	mvn	r3, #0
   13e2c:	mvn	r2, #0
   13e30:	ldrd	r0, [r9, #8]
   13e34:	cmp	r1, r3
   13e38:	cmpeq	r0, r2
   13e3c:	beq	13f04 <__assert_fail@plt+0x2a00>
   13e40:	cmp	r0, #0
   13e44:	sbcs	r3, r1, #0
   13e48:	blt	13f58 <__assert_fail@plt+0x2a54>
   13e4c:	ldrd	r2, [sp, #16]
   13e50:	orrs	r3, r2, r3
   13e54:	beq	13e78 <__assert_fail@plt+0x2974>
   13e58:	adds	r3, r6, r4
   13e5c:	adc	r2, r7, r5
   13e60:	adds	r0, r0, r3
   13e64:	adc	r1, r1, r2
   13e68:	strd	r0, [r9, #8]
   13e6c:	cmp	r0, #0
   13e70:	sbcs	r3, r1, #0
   13e74:	blt	13f04 <__assert_fail@plt+0x2a00>
   13e78:	subs	r9, r0, r4
   13e7c:	sbc	r3, r1, r5
   13e80:	mov	ip, r3
   13e84:	ldrd	r2, [sp, #16]
   13e88:	mov	r1, r2
   13e8c:	orrs	r3, r1, r3
   13e90:	moveq	r3, #1
   13e94:	movne	r3, #0
   13e98:	orrs	r2, r4, r5
   13e9c:	moveq	r3, #0
   13ea0:	cmp	r3, #0
   13ea4:	beq	13f14 <__assert_fail@plt+0x2a10>
   13ea8:	cmp	sl, #0
   13eac:	bne	13f28 <__assert_fail@plt+0x2a24>
   13eb0:	subs	r9, r9, r6
   13eb4:	sbc	r3, ip, r7
   13eb8:	mov	ip, r3
   13ebc:	mov	r1, #4
   13ec0:	mov	r2, r9
   13ec4:	strd	r4, [sp]
   13ec8:	mov	r3, ip
   13ecc:	mov	r0, fp
   13ed0:	str	r1, [sp, #8]
   13ed4:	bl	111b0 <posix_fadvise64@plt>
   13ed8:	adds	r9, r0, #1
   13edc:	movne	r9, #1
   13ee0:	mov	r0, r9
   13ee4:	add	sp, sp, #28
   13ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eec:	bl	113e4 <__errno_location@plt>
   13ef0:	mov	r3, #29
   13ef4:	str	r3, [r0]
   13ef8:	mov	r0, r9
   13efc:	add	sp, sp, #28
   13f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f04:	mov	r9, #0
   13f08:	mov	r0, r9
   13f0c:	add	sp, sp, #28
   13f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f14:	subs	r9, r9, r6
   13f18:	sbc	r3, ip, r7
   13f1c:	mov	ip, r3
   13f20:	orrs	r3, r4, r5
   13f24:	bne	13ebc <__assert_fail@plt+0x29b8>
   13f28:	mov	r0, r9
   13f2c:	mov	r1, ip
   13f30:	ldr	r2, [r8, #104]	; 0x68
   13f34:	mov	r3, #0
   13f38:	mov	r6, ip
   13f3c:	bl	1c3a0 <__assert_fail@plt+0xae9c>
   13f40:	mov	r4, #0
   13f44:	mov	r5, #0
   13f48:	subs	r9, r9, r2
   13f4c:	sbc	r3, r6, r3
   13f50:	mov	ip, r3
   13f54:	b	13ebc <__assert_fail@plt+0x29b8>
   13f58:	mov	r0, #1
   13f5c:	str	r0, [sp]
   13f60:	mov	r2, #0
   13f64:	mov	r3, #0
   13f68:	bl	112dc <lseek64@plt>
   13f6c:	strd	r0, [r9, #8]
   13f70:	b	13e6c <__assert_fail@plt+0x2968>
   13f74:	andeq	pc, r2, r0, ror #3
   13f78:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   13f7c:	ldr	r3, [pc, #44]	; 13fb0 <__assert_fail@plt+0x2aac>
   13f80:	ldrb	r3, [r3, #16]
   13f84:	cmp	r3, #0
   13f88:	beq	13f90 <__assert_fail@plt+0x2a8c>
   13f8c:	b	15480 <__assert_fail@plt+0x3f7c>
   13f90:	ldr	r3, [pc, #28]	; 13fb4 <__assert_fail@plt+0x2ab0>
   13f94:	push	{r4, lr}
   13f98:	ldr	r0, [r3]
   13f9c:	bl	153ec <__assert_fail@plt+0x3ee8>
   13fa0:	cmp	r0, #0
   13fa4:	popeq	{r4, pc}
   13fa8:	mov	r0, #1
   13fac:	bl	11204 <_exit@plt>
   13fb0:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   13fb4:	ldrdeq	pc, [r2], -r0
   13fb8:	push	{r4, r5, r6, lr}
   13fbc:	mov	r0, #0
   13fc0:	bl	114e0 <close@plt>
   13fc4:	cmp	r0, #0
   13fc8:	blt	1401c <__assert_fail@plt+0x2b18>
   13fcc:	mov	r0, #1
   13fd0:	bl	114e0 <close@plt>
   13fd4:	cmp	r0, #0
   13fd8:	popge	{r4, r5, r6, pc}
   13fdc:	bl	113e4 <__errno_location@plt>
   13fe0:	ldr	r1, [pc, #96]	; 14048 <__assert_fail@plt+0x2b44>
   13fe4:	mov	r2, #5
   13fe8:	ldr	r4, [r0]
   13fec:	mov	r0, #0
   13ff0:	bl	1124c <dcgettext@plt>
   13ff4:	ldr	r3, [pc, #80]	; 1404c <__assert_fail@plt+0x2b48>
   13ff8:	ldr	r1, [r3, #112]	; 0x70
   13ffc:	mov	r5, r0
   14000:	mov	r0, #4
   14004:	bl	182f4 <__assert_fail@plt+0x6df0>
   14008:	mov	r2, r5
   1400c:	mov	r1, r4
   14010:	mov	r3, r0
   14014:	mov	r0, #1
   14018:	bl	138e4 <__assert_fail@plt+0x23e0>
   1401c:	bl	113e4 <__errno_location@plt>
   14020:	ldr	r1, [pc, #40]	; 14050 <__assert_fail@plt+0x2b4c>
   14024:	mov	r2, #5
   14028:	ldr	r4, [r0]
   1402c:	mov	r0, #0
   14030:	bl	1124c <dcgettext@plt>
   14034:	ldr	r3, [pc, #16]	; 1404c <__assert_fail@plt+0x2b48>
   14038:	ldr	r1, [r3, #108]	; 0x6c
   1403c:	mov	r5, r0
   14040:	mov	r0, #4
   14044:	b	14004 <__assert_fail@plt+0x2b00>
   14048:	andeq	ip, r1, r8, ror lr
   1404c:	andeq	pc, r2, r0, ror #3
   14050:	andeq	ip, r1, r0, ror #28
   14054:	push	{r4, r5, r6, r7, lr}
   14058:	sub	sp, sp, #140	; 0x8c
   1405c:	ldr	r7, [pc, #172]	; 14110 <__assert_fail@plt+0x2c0c>
   14060:	ldr	r4, [pc, #172]	; 14114 <__assert_fail@plt+0x2c10>
   14064:	ldr	r3, [r7]
   14068:	add	r6, r4, #116	; 0x74
   1406c:	str	r3, [sp, #132]	; 0x84
   14070:	ldr	r3, [r4]
   14074:	cmp	r3, #0
   14078:	bne	14088 <__assert_fail@plt+0x2b84>
   1407c:	ldr	r3, [r4, #4]
   14080:	cmp	r3, #0
   14084:	beq	140e0 <__assert_fail@plt+0x2bdc>
   14088:	add	r2, sp, #4
   1408c:	mov	r1, r6
   14090:	mov	r0, #0
   14094:	bl	111d4 <sigprocmask@plt>
   14098:	ldr	r5, [r4]
   1409c:	ldr	r3, [r4, #4]
   140a0:	mov	r2, #0
   140a4:	cmp	r3, #0
   140a8:	subne	r3, r3, #1
   140ac:	add	r1, sp, #4
   140b0:	mov	r0, #2
   140b4:	strne	r3, [r4, #4]
   140b8:	bl	111d4 <sigprocmask@plt>
   140bc:	cmp	r5, #0
   140c0:	bne	140f8 <__assert_fail@plt+0x2bf4>
   140c4:	bl	13778 <__assert_fail@plt+0x2274>
   140c8:	ldr	r3, [r4]
   140cc:	cmp	r3, #0
   140d0:	bne	14088 <__assert_fail@plt+0x2b84>
   140d4:	ldr	r3, [r4, #4]
   140d8:	cmp	r3, #0
   140dc:	bne	14088 <__assert_fail@plt+0x2b84>
   140e0:	ldr	r2, [sp, #132]	; 0x84
   140e4:	ldr	r3, [r7]
   140e8:	cmp	r2, r3
   140ec:	bne	1410c <__assert_fail@plt+0x2c08>
   140f0:	add	sp, sp, #140	; 0x8c
   140f4:	pop	{r4, r5, r6, r7, pc}
   140f8:	bl	13fb8 <__assert_fail@plt+0x2ab4>
   140fc:	bl	13778 <__assert_fail@plt+0x2274>
   14100:	mov	r0, r5
   14104:	bl	1118c <raise@plt>
   14108:	b	14070 <__assert_fail@plt+0x2b6c>
   1410c:	bl	11258 <__stack_chk_fail@plt>
   14110:	andeq	lr, r2, r8, lsl #30
   14114:	andeq	pc, r2, r0, ror #3
   14118:	push	{r4, r5, r6, r7, r8, lr}
   1411c:	mov	r8, r0
   14120:	mov	r7, r1
   14124:	mov	r6, r2
   14128:	mov	r5, r3
   1412c:	b	14140 <__assert_fail@plt+0x2c3c>
   14130:	bl	113e4 <__errno_location@plt>
   14134:	ldr	r3, [r0]
   14138:	cmp	r3, #4
   1413c:	bne	14160 <__assert_fail@plt+0x2c5c>
   14140:	bl	14054 <__assert_fail@plt+0x2b50>
   14144:	mov	r3, r5
   14148:	mov	r2, r6
   1414c:	mov	r1, r7
   14150:	mov	r0, r8
   14154:	bl	15558 <__assert_fail@plt+0x4054>
   14158:	subs	r4, r0, #0
   1415c:	blt	14130 <__assert_fail@plt+0x2c2c>
   14160:	mov	r0, r4
   14164:	pop	{r4, r5, r6, r7, r8, pc}
   14168:	push	{r4, r5, r6, r7, lr}
   1416c:	mov	r7, r0
   14170:	sub	sp, sp, #12
   14174:	mov	r6, r1
   14178:	mov	r5, r2
   1417c:	b	14198 <__assert_fail@plt+0x2c94>
   14180:	cmp	r0, #0
   14184:	bge	14200 <__assert_fail@plt+0x2cfc>
   14188:	bl	113e4 <__errno_location@plt>
   1418c:	ldr	r3, [r0]
   14190:	cmp	r3, #4
   14194:	bne	14200 <__assert_fail@plt+0x2cfc>
   14198:	bl	14054 <__assert_fail@plt+0x2b50>
   1419c:	mov	r2, r5
   141a0:	mov	r1, r6
   141a4:	mov	r0, r7
   141a8:	bl	111bc <read@plt>
   141ac:	cmn	r0, #1
   141b0:	mov	r4, r0
   141b4:	bne	14180 <__assert_fail@plt+0x2c7c>
   141b8:	bl	113e4 <__errno_location@plt>
   141bc:	ldr	r3, [r0]
   141c0:	cmp	r3, #22
   141c4:	bne	14190 <__assert_fail@plt+0x2c8c>
   141c8:	ldr	r6, [pc, #220]	; 142ac <__assert_fail@plt+0x2da8>
   141cc:	ldr	r3, [r6, #244]	; 0xf4
   141d0:	cmp	r3, #0
   141d4:	ble	141f0 <__assert_fail@plt+0x2cec>
   141d8:	cmp	r3, r5
   141dc:	bcs	141f0 <__assert_fail@plt+0x2cec>
   141e0:	ldr	r3, [r6, #248]	; 0xf8
   141e4:	tst	r3, #65536	; 0x10000
   141e8:	movne	r4, #0
   141ec:	strne	r4, [r0]
   141f0:	mov	r0, r4
   141f4:	str	r4, [r6, #244]	; 0xf4
   141f8:	add	sp, sp, #12
   141fc:	pop	{r4, r5, r6, r7, pc}
   14200:	cmp	r4, #0
   14204:	movle	r3, #0
   14208:	movgt	r3, #1
   1420c:	cmp	r4, r5
   14210:	movcs	r3, #0
   14214:	cmp	r3, #0
   14218:	beq	14260 <__assert_fail@plt+0x2d5c>
   1421c:	bl	14054 <__assert_fail@plt+0x2b50>
   14220:	ldr	r6, [pc, #132]	; 142ac <__assert_fail@plt+0x2da8>
   14224:	ldrb	r3, [r6, #252]	; 0xfc
   14228:	cmp	r3, #0
   1422c:	beq	141f0 <__assert_fail@plt+0x2cec>
   14230:	ldr	r7, [r6, #244]	; 0xf4
   14234:	cmp	r7, #0
   14238:	ble	141f0 <__assert_fail@plt+0x2cec>
   1423c:	cmp	r7, r5
   14240:	bcs	141f0 <__assert_fail@plt+0x2cec>
   14244:	ldr	r3, [pc, #100]	; 142b0 <__assert_fail@plt+0x2dac>
   14248:	ldr	r3, [r3]
   1424c:	cmp	r3, #1
   14250:	bne	14270 <__assert_fail@plt+0x2d6c>
   14254:	mov	r3, #0
   14258:	strb	r3, [r6, #252]	; 0xfc
   1425c:	b	141f0 <__assert_fail@plt+0x2cec>
   14260:	cmp	r4, #0
   14264:	ldrle	r6, [pc, #64]	; 142ac <__assert_fail@plt+0x2da8>
   14268:	bgt	14220 <__assert_fail@plt+0x2d1c>
   1426c:	b	141f0 <__assert_fail@plt+0x2cec>
   14270:	mov	r3, #5
   14274:	str	r3, [sp]
   14278:	ldr	r2, [pc, #52]	; 142b4 <__assert_fail@plt+0x2db0>
   1427c:	mov	r3, r7
   14280:	ldr	r1, [pc, #48]	; 142b8 <__assert_fail@plt+0x2db4>
   14284:	mov	r0, #0
   14288:	bl	114ec <dcngettext@plt>
   1428c:	mov	r2, r7
   14290:	asr	r3, r7, #31
   14294:	mov	r1, #0
   14298:	strd	r2, [sp]
   1429c:	mov	r2, r0
   142a0:	mov	r0, r1
   142a4:	bl	138e4 <__assert_fail@plt+0x23e0>
   142a8:	b	14254 <__assert_fail@plt+0x2d50>
   142ac:	andeq	pc, r2, r0, ror #3
   142b0:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   142b4:	muleq	r1, r0, lr
   142b8:	andeq	ip, r1, ip, asr #29
   142bc:	push	{r4, r5, r6, r7, r8, lr}
   142c0:	subs	r4, r2, #0
   142c4:	beq	1430c <__assert_fail@plt+0x2e08>
   142c8:	mov	r7, r0
   142cc:	mov	r5, r1
   142d0:	mov	r6, #0
   142d4:	b	142e8 <__assert_fail@plt+0x2de4>
   142d8:	subs	r4, r4, r0
   142dc:	add	r6, r6, r0
   142e0:	add	r5, r5, r0
   142e4:	beq	14304 <__assert_fail@plt+0x2e00>
   142e8:	mov	r2, r4
   142ec:	mov	r1, r5
   142f0:	mov	r0, r7
   142f4:	bl	14168 <__assert_fail@plt+0x2c64>
   142f8:	cmp	r0, #0
   142fc:	poplt	{r4, r5, r6, r7, r8, pc}
   14300:	bne	142d8 <__assert_fail@plt+0x2dd4>
   14304:	mov	r0, r6
   14308:	pop	{r4, r5, r6, r7, r8, pc}
   1430c:	mov	r0, r4
   14310:	pop	{r4, r5, r6, r7, r8, pc}
   14314:	push	{r4, r5, r6, r7, r8, lr}
   14318:	sub	sp, sp, #672	; 0x2a0
   1431c:	ldr	r5, [pc, #172]	; 143d0 <__assert_fail@plt+0x2ecc>
   14320:	ldr	r7, [pc, #172]	; 143d4 <__assert_fail@plt+0x2ed0>
   14324:	ldr	r6, [r5, #104]	; 0x68
   14328:	ldr	r8, [r5, #256]	; 0x100
   1432c:	ldr	r3, [r7]
   14330:	add	r0, r8, r6, lsl #1
   14334:	add	r0, r0, #3
   14338:	str	r3, [sp, #668]	; 0x29c
   1433c:	bl	1133c <malloc@plt>
   14340:	subs	r4, r0, #0
   14344:	beq	1437c <__assert_fail@plt+0x2e78>
   14348:	add	r1, r6, #1
   1434c:	add	r4, r4, r1
   14350:	mov	r0, r4
   14354:	mov	r1, r6
   14358:	bl	1bfc0 <__assert_fail@plt+0xaabc>
   1435c:	ldr	r2, [sp, #668]	; 0x29c
   14360:	ldr	r3, [r7]
   14364:	cmp	r2, r3
   14368:	sub	r1, r4, r1
   1436c:	str	r1, [r5, #260]	; 0x104
   14370:	bne	143cc <__assert_fail@plt+0x2ec8>
   14374:	add	sp, sp, #672	; 0x2a0
   14378:	pop	{r4, r5, r6, r7, r8, pc}
   1437c:	mov	r2, #5
   14380:	ldr	r1, [pc, #80]	; 143d8 <__assert_fail@plt+0x2ed4>
   14384:	bl	1124c <dcgettext@plt>
   14388:	mov	r1, #0
   1438c:	add	r2, sp, #16
   14390:	ldr	r3, [pc, #68]	; 143dc <__assert_fail@plt+0x2ed8>
   14394:	mov	r5, r0
   14398:	mov	r0, #1
   1439c:	strd	r0, [sp, #8]
   143a0:	strd	r0, [sp]
   143a4:	mov	r1, r4
   143a8:	mov	r0, r8
   143ac:	bl	156a0 <__assert_fail@plt+0x419c>
   143b0:	mov	r2, r5
   143b4:	str	r8, [sp]
   143b8:	str	r4, [sp, #4]
   143bc:	mov	r1, r4
   143c0:	str	r0, [sp, #8]
   143c4:	mov	r0, #1
   143c8:	bl	138e4 <__assert_fail@plt+0x23e0>
   143cc:	bl	11258 <__stack_chk_fail@plt>
   143d0:	andeq	pc, r2, r0, ror #3
   143d4:	andeq	lr, r2, r8, lsl #30
   143d8:	andeq	ip, r1, r8, lsl #30
   143dc:	strdeq	r0, [r0], -r1
   143e0:	push	{r4, r5, r6, r7, r8, lr}
   143e4:	sub	sp, sp, #672	; 0x2a0
   143e8:	ldr	r5, [pc, #172]	; 1449c <__assert_fail@plt+0x2f98>
   143ec:	ldr	r7, [pc, #172]	; 144a0 <__assert_fail@plt+0x2f9c>
   143f0:	ldr	r6, [r5, #104]	; 0x68
   143f4:	ldr	r8, [r5, #264]	; 0x108
   143f8:	ldr	r3, [r7]
   143fc:	add	r0, r6, r8
   14400:	sub	r0, r0, #1
   14404:	str	r3, [sp, #668]	; 0x29c
   14408:	bl	1133c <malloc@plt>
   1440c:	subs	r4, r0, #0
   14410:	beq	14448 <__assert_fail@plt+0x2f44>
   14414:	sub	r1, r6, #1
   14418:	add	r4, r4, r1
   1441c:	mov	r0, r4
   14420:	mov	r1, r6
   14424:	bl	1bfc0 <__assert_fail@plt+0xaabc>
   14428:	ldr	r2, [sp, #668]	; 0x29c
   1442c:	ldr	r3, [r7]
   14430:	cmp	r2, r3
   14434:	sub	r1, r4, r1
   14438:	str	r1, [r5, #268]	; 0x10c
   1443c:	bne	14498 <__assert_fail@plt+0x2f94>
   14440:	add	sp, sp, #672	; 0x2a0
   14444:	pop	{r4, r5, r6, r7, r8, pc}
   14448:	mov	r2, #5
   1444c:	ldr	r1, [pc, #80]	; 144a4 <__assert_fail@plt+0x2fa0>
   14450:	bl	1124c <dcgettext@plt>
   14454:	mov	r1, #0
   14458:	add	r2, sp, #16
   1445c:	ldr	r3, [pc, #68]	; 144a8 <__assert_fail@plt+0x2fa4>
   14460:	mov	r5, r0
   14464:	mov	r0, #1
   14468:	strd	r0, [sp, #8]
   1446c:	strd	r0, [sp]
   14470:	mov	r1, r4
   14474:	mov	r0, r8
   14478:	bl	156a0 <__assert_fail@plt+0x419c>
   1447c:	mov	r2, r5
   14480:	str	r8, [sp]
   14484:	str	r4, [sp, #4]
   14488:	mov	r1, r4
   1448c:	str	r0, [sp, #8]
   14490:	mov	r0, #1
   14494:	bl	138e4 <__assert_fail@plt+0x23e0>
   14498:	bl	11258 <__stack_chk_fail@plt>
   1449c:	andeq	pc, r2, r0, ror #3
   144a0:	andeq	lr, r2, r8, lsl #30
   144a4:	andeq	ip, r1, r4, asr #30
   144a8:	strdeq	r0, [r0], -r1
   144ac:	push	{r4, lr}
   144b0:	ldr	r4, [pc, #60]	; 144f4 <__assert_fail@plt+0x2ff0>
   144b4:	ldr	r3, [r4, #268]	; 0x10c
   144b8:	cmp	r3, #0
   144bc:	popne	{r4, pc}
   144c0:	ldr	r3, [r4, #272]	; 0x110
   144c4:	tst	r3, #2048	; 0x800
   144c8:	bne	144e4 <__assert_fail@plt+0x2fe0>
   144cc:	ldr	r3, [r4, #260]	; 0x104
   144d0:	cmp	r3, #0
   144d4:	beq	144ec <__assert_fail@plt+0x2fe8>
   144d8:	ldr	r3, [r4, #260]	; 0x104
   144dc:	str	r3, [r4, #268]	; 0x10c
   144e0:	pop	{r4, pc}
   144e4:	pop	{r4, lr}
   144e8:	b	143e0 <__assert_fail@plt+0x2edc>
   144ec:	bl	14314 <__assert_fail@plt+0x2e10>
   144f0:	b	144d8 <__assert_fail@plt+0x2fd4>
   144f4:	andeq	pc, r2, r0, ror #3
   144f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   144fc:	mov	r7, r0
   14500:	ldr	r6, [pc, #504]	; 14700 <__assert_fail@plt+0x31fc>
   14504:	sub	sp, sp, #8
   14508:	mov	r5, r1
   1450c:	ldr	r3, [r6, #276]	; 0x114
   14510:	tst	r3, #65536	; 0x10000
   14514:	beq	14524 <__assert_fail@plt+0x3020>
   14518:	ldr	r3, [r6, #264]	; 0x108
   1451c:	cmp	r3, r1
   14520:	bhi	1463c <__assert_fail@plt+0x3138>
   14524:	cmp	r5, #0
   14528:	beq	146f8 <__assert_fail@plt+0x31f4>
   1452c:	mov	r4, #0
   14530:	mov	r8, r4
   14534:	mov	r9, #1
   14538:	b	1454c <__assert_fail@plt+0x3048>
   1453c:	beq	1462c <__assert_fail@plt+0x3128>
   14540:	add	r4, r4, r0
   14544:	cmp	r5, r4
   14548:	bls	145bc <__assert_fail@plt+0x30b8>
   1454c:	bl	14054 <__assert_fail@plt+0x2b50>
   14550:	ldr	sl, [r6, #272]	; 0x110
   14554:	strb	r8, [r6, #280]	; 0x118
   14558:	tst	sl, #65536	; 0x10000
   1455c:	beq	14594 <__assert_fail@plt+0x3090>
   14560:	mov	r1, r7
   14564:	mov	r2, r5
   14568:	ldrb	r3, [r1], #1
   1456c:	cmp	r3, #0
   14570:	bne	14594 <__assert_fail@plt+0x3090>
   14574:	subs	r2, r2, #1
   14578:	beq	145e0 <__assert_fail@plt+0x30dc>
   1457c:	tst	r2, #15
   14580:	bne	14568 <__assert_fail@plt+0x3064>
   14584:	mov	r0, r7
   14588:	bl	11240 <memcmp@plt>
   1458c:	cmp	r0, #0
   14590:	beq	145e0 <__assert_fail@plt+0x30dc>
   14594:	sub	r2, r5, r4
   14598:	add	r1, r7, r4
   1459c:	mov	r0, #1
   145a0:	bl	11420 <write@plt>
   145a4:	cmp	r0, #0
   145a8:	bge	1453c <__assert_fail@plt+0x3038>
   145ac:	bl	113e4 <__errno_location@plt>
   145b0:	ldr	r3, [r0]
   145b4:	cmp	r3, #4
   145b8:	beq	14544 <__assert_fail@plt+0x3040>
   145bc:	ldrb	r3, [r6, #281]	; 0x119
   145c0:	cmp	r4, #0
   145c4:	moveq	r3, #0
   145c8:	andne	r3, r3, #1
   145cc:	cmp	r3, #0
   145d0:	bne	14698 <__assert_fail@plt+0x3194>
   145d4:	mov	r0, r4
   145d8:	add	sp, sp, #8
   145dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   145e0:	mov	r3, #0
   145e4:	str	r9, [sp]
   145e8:	mov	r2, r5
   145ec:	mov	r0, #1
   145f0:	bl	112dc <lseek64@plt>
   145f4:	cmp	r0, #0
   145f8:	sbcs	r3, r1, #0
   145fc:	biclt	sl, sl, #65536	; 0x10000
   14600:	strlt	sl, [r6, #272]	; 0x110
   14604:	blt	14594 <__assert_fail@plt+0x3090>
   14608:	cmp	r5, #0
   1460c:	strb	r9, [r6, #280]	; 0x118
   14610:	movge	r0, r5
   14614:	bge	14540 <__assert_fail@plt+0x303c>
   14618:	bl	113e4 <__errno_location@plt>
   1461c:	ldr	r3, [r0]
   14620:	cmp	r3, #4
   14624:	beq	14544 <__assert_fail@plt+0x3040>
   14628:	b	145bc <__assert_fail@plt+0x30b8>
   1462c:	bl	113e4 <__errno_location@plt>
   14630:	mov	r3, #28
   14634:	str	r3, [r0]
   14638:	b	145bc <__assert_fail@plt+0x30b8>
   1463c:	mov	r1, #3
   14640:	mov	r0, #1
   14644:	bl	19ac0 <__assert_fail@plt+0x85bc>
   14648:	mov	r1, #4
   1464c:	bic	r2, r0, #65536	; 0x10000
   14650:	mov	r0, #1
   14654:	bl	19ac0 <__assert_fail@plt+0x85bc>
   14658:	cmp	r0, #0
   1465c:	beq	14670 <__assert_fail@plt+0x316c>
   14660:	ldr	r3, [pc, #156]	; 14704 <__assert_fail@plt+0x3200>
   14664:	ldr	r3, [r3]
   14668:	cmp	r3, #1
   1466c:	bne	146b4 <__assert_fail@plt+0x31b0>
   14670:	mov	r1, #1
   14674:	mov	r3, #0
   14678:	mov	r0, r1
   1467c:	mov	r2, #0
   14680:	strb	r1, [r6, #89]	; 0x59
   14684:	bl	13d60 <__assert_fail@plt+0x285c>
   14688:	ldr	r3, [r6, #272]	; 0x110
   1468c:	orr	r3, r3, #32768	; 0x8000
   14690:	str	r3, [r6, #272]	; 0x110
   14694:	b	14524 <__assert_fail@plt+0x3020>
   14698:	mov	r2, r4
   1469c:	mov	r3, #0
   146a0:	mov	r0, #1
   146a4:	bl	13d60 <__assert_fail@plt+0x285c>
   146a8:	mov	r0, r4
   146ac:	add	sp, sp, #8
   146b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   146b4:	bl	113e4 <__errno_location@plt>
   146b8:	mov	r2, #5
   146bc:	ldr	r1, [pc, #68]	; 14708 <__assert_fail@plt+0x3204>
   146c0:	ldr	r4, [r0]
   146c4:	mov	r0, #0
   146c8:	bl	1124c <dcgettext@plt>
   146cc:	ldr	r2, [r6, #112]	; 0x70
   146d0:	mov	r1, #3
   146d4:	mov	r8, r0
   146d8:	mov	r0, #0
   146dc:	bl	183d0 <__assert_fail@plt+0x6ecc>
   146e0:	mov	r2, r8
   146e4:	mov	r1, r4
   146e8:	mov	r3, r0
   146ec:	mov	r0, #0
   146f0:	bl	138e4 <__assert_fail@plt+0x23e0>
   146f4:	b	14670 <__assert_fail@plt+0x316c>
   146f8:	mov	r4, r5
   146fc:	b	145d4 <__assert_fail@plt+0x30d0>
   14700:	andeq	pc, r2, r0, ror #3
   14704:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   14708:	andeq	ip, r1, r0, lsl #31
   1470c:	push	{r4, lr}
   14710:	bl	13fb8 <__assert_fail@plt+0x2ab4>
   14714:	bl	13778 <__assert_fail@plt+0x2274>
   14718:	bl	14054 <__assert_fail@plt+0x2b50>
   1471c:	mov	r0, #1
   14720:	bl	113b4 <exit@plt>
   14724:	push	{r4, r5, r6, r7, r8, lr}
   14728:	ldr	r4, [pc, #172]	; 147dc <__assert_fail@plt+0x32d8>
   1472c:	ldr	r1, [r4, #264]	; 0x108
   14730:	ldr	r0, [r4, #268]	; 0x10c
   14734:	bl	144f8 <__assert_fail@plt+0x2ff4>
   14738:	ldrd	r2, [r4, #8]
   1473c:	ldr	r1, [r4, #264]	; 0x108
   14740:	adds	r6, r2, r0
   14744:	adc	r7, r3, #0
   14748:	cmp	r1, r0
   1474c:	strd	r6, [r4, #8]
   14750:	bne	14778 <__assert_fail@plt+0x3274>
   14754:	ldr	r3, [r4, #40]	; 0x28
   14758:	ldr	r2, [r4, #44]	; 0x2c
   1475c:	adds	r3, r3, #1
   14760:	adc	r2, r2, #0
   14764:	mov	r1, #0
   14768:	str	r3, [r4, #40]	; 0x28
   1476c:	str	r2, [r4, #44]	; 0x2c
   14770:	str	r1, [r4, #284]	; 0x11c
   14774:	pop	{r4, r5, r6, r7, r8, pc}
   14778:	mov	r5, r0
   1477c:	bl	113e4 <__errno_location@plt>
   14780:	mov	r2, #5
   14784:	ldr	r1, [pc, #84]	; 147e0 <__assert_fail@plt+0x32dc>
   14788:	ldr	r6, [r0]
   1478c:	mov	r0, #0
   14790:	bl	1124c <dcgettext@plt>
   14794:	ldr	r1, [r4, #112]	; 0x70
   14798:	mov	r7, r0
   1479c:	mov	r0, #4
   147a0:	bl	182f4 <__assert_fail@plt+0x6df0>
   147a4:	mov	r2, r7
   147a8:	mov	r1, r6
   147ac:	mov	r3, r0
   147b0:	mov	r0, #0
   147b4:	bl	138e4 <__assert_fail@plt+0x23e0>
   147b8:	cmp	r5, #0
   147bc:	beq	147d8 <__assert_fail@plt+0x32d4>
   147c0:	ldr	r3, [r4, #32]
   147c4:	ldr	r2, [r4, #36]	; 0x24
   147c8:	adds	r3, r3, #1
   147cc:	adc	r2, r2, #0
   147d0:	str	r3, [r4, #32]
   147d4:	str	r2, [r4, #36]	; 0x24
   147d8:	bl	1470c <__assert_fail@plt+0x3208>
   147dc:	andeq	pc, r2, r0, ror #3
   147e0:	andeq	ip, r1, r0, lsr #31
   147e4:	cmp	r1, #0
   147e8:	bxeq	lr
   147ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   147f0:	add	r9, r0, r1
   147f4:	ldr	r4, [pc, #224]	; 148dc <__assert_fail@plt+0x33d8>
   147f8:	ldr	r8, [pc, #224]	; 148e0 <__assert_fail@plt+0x33dc>
   147fc:	sub	r9, r9, #1
   14800:	sub	r6, r0, #1
   14804:	mov	r7, #0
   14808:	b	14848 <__assert_fail@plt+0x3344>
   1480c:	cmp	r5, r1
   14810:	beq	148b4 <__assert_fail@plt+0x33b0>
   14814:	bcs	14838 <__assert_fail@plt+0x3334>
   14818:	ldr	r1, [r4, #284]	; 0x11c
   1481c:	ldr	r0, [r4, #268]	; 0x10c
   14820:	ldr	ip, [r4, #264]	; 0x108
   14824:	add	r2, r1, #1
   14828:	cmp	r2, ip
   1482c:	strb	r3, [r0, r1]
   14830:	str	r2, [r4, #284]	; 0x11c
   14834:	bcs	148d0 <__assert_fail@plt+0x33cc>
   14838:	cmp	r9, r6
   1483c:	add	r5, r5, #1
   14840:	str	r5, [r4, #288]	; 0x120
   14844:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14848:	ldrb	r3, [r6, #1]!
   1484c:	ldrb	r2, [r8, #17]
   14850:	ldr	r5, [r4, #288]	; 0x120
   14854:	ldr	r1, [r4, #292]	; 0x124
   14858:	cmp	r2, r3
   1485c:	bne	1480c <__assert_fail@plt+0x3308>
   14860:	cmp	r5, r1
   14864:	bcc	14888 <__assert_fail@plt+0x3384>
   14868:	cmp	r9, r6
   1486c:	str	r7, [r4, #288]	; 0x120
   14870:	bne	14848 <__assert_fail@plt+0x3344>
   14874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14878:	bl	14724 <__assert_fail@plt+0x3220>
   1487c:	ldr	r3, [r4, #292]	; 0x124
   14880:	cmp	r3, r5
   14884:	bls	14868 <__assert_fail@plt+0x3364>
   14888:	ldr	r2, [r4, #284]	; 0x11c
   1488c:	ldr	r1, [r4, #268]	; 0x10c
   14890:	ldrb	r0, [r8, #18]
   14894:	ldr	ip, [r4, #264]	; 0x108
   14898:	add	r3, r2, #1
   1489c:	cmp	r3, ip
   148a0:	add	r5, r5, #1
   148a4:	strb	r0, [r1, r2]
   148a8:	str	r3, [r4, #284]	; 0x11c
   148ac:	bcc	1487c <__assert_fail@plt+0x3378>
   148b0:	b	14878 <__assert_fail@plt+0x3374>
   148b4:	ldr	r3, [r4, #64]	; 0x40
   148b8:	ldr	r2, [r4, #68]	; 0x44
   148bc:	adds	r3, r3, #1
   148c0:	adc	r2, r2, #0
   148c4:	str	r3, [r4, #64]	; 0x40
   148c8:	str	r2, [r4, #68]	; 0x44
   148cc:	b	14838 <__assert_fail@plt+0x3334>
   148d0:	bl	14724 <__assert_fail@plt+0x3220>
   148d4:	ldr	r5, [r4, #288]	; 0x120
   148d8:	b	14838 <__assert_fail@plt+0x3334>
   148dc:	andeq	pc, r2, r0, ror #3
   148e0:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   148e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148e8:	subs	r5, r1, #0
   148ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   148f0:	mov	r8, #0
   148f4:	mov	r6, r0
   148f8:	ldr	r4, [pc, #248]	; 149f8 <__assert_fail@plt+0x34f4>
   148fc:	ldr	r9, [pc, #248]	; 149fc <__assert_fail@plt+0x34f8>
   14900:	mov	r7, r8
   14904:	b	1493c <__assert_fail@plt+0x3438>
   14908:	ldr	r2, [r4, #284]	; 0x11c
   1490c:	ldr	r1, [r4, #268]	; 0x10c
   14910:	ldrb	r0, [r9, #17]
   14914:	ldr	ip, [r4, #264]	; 0x108
   14918:	add	r3, r2, #1
   1491c:	cmp	r3, ip
   14920:	str	r7, [r4, #296]	; 0x128
   14924:	str	r7, [r4, #288]	; 0x120
   14928:	strb	r0, [r1, r2]
   1492c:	str	r3, [r4, #284]	; 0x11c
   14930:	bcs	149e8 <__assert_fail@plt+0x34e4>
   14934:	cmp	r5, r8
   14938:	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   1493c:	ldr	r3, [r4, #288]	; 0x120
   14940:	ldr	r1, [r4, #292]	; 0x124
   14944:	add	r2, r3, #1
   14948:	cmp	r3, r1
   1494c:	str	r2, [r4, #288]	; 0x120
   14950:	ldrb	sl, [r6, r8]
   14954:	bcs	14908 <__assert_fail@plt+0x3404>
   14958:	ldrb	r3, [r9, #18]
   1495c:	ldr	r2, [r4, #296]	; 0x128
   14960:	add	r8, r8, #1
   14964:	cmp	r3, sl
   14968:	addeq	r2, r2, #1
   1496c:	streq	r2, [r4, #296]	; 0x128
   14970:	beq	14934 <__assert_fail@plt+0x3430>
   14974:	ldr	ip, [r4, #284]	; 0x11c
   14978:	cmp	r2, #0
   1497c:	ldr	r1, [r4, #268]	; 0x10c
   14980:	ldr	r0, [r4, #264]	; 0x108
   14984:	moveq	r2, ip
   14988:	bne	149ac <__assert_fail@plt+0x34a8>
   1498c:	b	149d4 <__assert_fail@plt+0x34d0>
   14990:	ldr	r3, [r4, #296]	; 0x128
   14994:	mov	ip, r2
   14998:	sub	r3, r3, #1
   1499c:	cmp	r3, #0
   149a0:	str	r3, [r4, #296]	; 0x128
   149a4:	beq	149d4 <__assert_fail@plt+0x34d0>
   149a8:	ldrb	r3, [r9, #18]
   149ac:	add	r2, ip, #1
   149b0:	cmp	r2, r0
   149b4:	strb	r3, [r1, ip]
   149b8:	str	r2, [r4, #284]	; 0x11c
   149bc:	bcc	14990 <__assert_fail@plt+0x348c>
   149c0:	bl	14724 <__assert_fail@plt+0x3220>
   149c4:	ldr	r1, [r4, #268]	; 0x10c
   149c8:	ldr	r2, [r4, #284]	; 0x11c
   149cc:	ldr	r0, [r4, #264]	; 0x108
   149d0:	b	14990 <__assert_fail@plt+0x348c>
   149d4:	add	r3, r2, #1
   149d8:	cmp	r3, r0
   149dc:	strb	sl, [r1, r2]
   149e0:	str	r3, [r4, #284]	; 0x11c
   149e4:	bcc	14934 <__assert_fail@plt+0x3430>
   149e8:	bl	14724 <__assert_fail@plt+0x3220>
   149ec:	cmp	r5, r8
   149f0:	bhi	1493c <__assert_fail@plt+0x3438>
   149f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149f8:	andeq	pc, r2, r0, ror #3
   149fc:	andeq	pc, r2, r0, asr r1	; <UNPREDICTABLE>
   14a00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a04:	mov	r8, r0
   14a08:	ldr	r0, [pc, #952]	; 14dc8 <__assert_fail@plt+0x38c4>
   14a0c:	sub	sp, sp, #148	; 0x94
   14a10:	mov	r6, r2
   14a14:	ldr	r0, [r0]
   14a18:	mov	r7, r3
   14a1c:	mov	sl, r1
   14a20:	str	r1, [sp, #16]
   14a24:	str	r0, [sp, #140]	; 0x8c
   14a28:	bl	113e4 <__errno_location@plt>
   14a2c:	ldr	r9, [sp, #188]	; 0xbc
   14a30:	ldr	r5, [sp, #184]	; 0xb8
   14a34:	mov	r4, #0
   14a38:	ldr	fp, [r9]
   14a3c:	mov	r3, r4
   14a40:	mov	r2, r5
   14a44:	mvn	r1, #-2147483648	; 0x80000000
   14a48:	str	r0, [sp, #20]
   14a4c:	str	r4, [r0]
   14a50:	mvn	r0, #0
   14a54:	bl	1c3a0 <__assert_fail@plt+0xae9c>
   14a58:	cmp	r1, r7
   14a5c:	cmpeq	r0, r6
   14a60:	bcc	14ad4 <__assert_fail@plt+0x35d0>
   14a64:	umull	r2, r3, r5, r6
   14a68:	mla	r3, r5, r7, r3
   14a6c:	adds	r0, r2, fp
   14a70:	adc	r1, r3, #0
   14a74:	mov	r3, r1
   14a78:	mov	r2, r0
   14a7c:	mov	r4, #1
   14a80:	str	r4, [sp]
   14a84:	mov	r1, r8
   14a88:	mov	r0, sl
   14a8c:	strd	r2, [sp, #8]
   14a90:	bl	13c30 <__assert_fail@plt+0x272c>
   14a94:	cmp	r0, #0
   14a98:	sbcs	r3, r1, #0
   14a9c:	blt	14bbc <__assert_fail@plt+0x36b8>
   14aa0:	cmp	r8, #0
   14aa4:	beq	14c70 <__assert_fail@plt+0x376c>
   14aa8:	mov	r3, #0
   14aac:	mov	r0, r3
   14ab0:	mov	r1, r3
   14ab4:	str	r3, [r9]
   14ab8:	ldr	r3, [pc, #776]	; 14dc8 <__assert_fail@plt+0x38c4>
   14abc:	ldr	r2, [sp, #140]	; 0x8c
   14ac0:	ldr	r3, [r3]
   14ac4:	cmp	r2, r3
   14ac8:	bne	14dc4 <__assert_fail@plt+0x38c0>
   14acc:	add	sp, sp, #148	; 0x94
   14ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ad4:	mov	r3, #2
   14ad8:	str	r3, [sp]
   14adc:	mov	r2, #0
   14ae0:	mov	r3, #0
   14ae4:	mov	r1, r8
   14ae8:	ldr	r0, [sp, #16]
   14aec:	bl	13c30 <__assert_fail@plt+0x272c>
   14af0:	cmp	r0, #0
   14af4:	sbcs	r3, r1, #0
   14af8:	bge	14bfc <__assert_fail@plt+0x36f8>
   14afc:	str	r4, [sp, #24]
   14b00:	cmp	r8, #0
   14b04:	ldr	r4, [pc, #704]	; 14dcc <__assert_fail@plt+0x38c8>
   14b08:	bne	14c60 <__assert_fail@plt+0x375c>
   14b0c:	ldr	r3, [r4, #260]	; 0x104
   14b10:	cmp	r3, #0
   14b14:	beq	14d00 <__assert_fail@plt+0x37fc>
   14b18:	ldr	fp, [r4, #260]	; 0x104
   14b1c:	str	fp, [sp, #8]
   14b20:	orrs	r3, r6, r7
   14b24:	movne	r2, r5
   14b28:	ldr	r3, [r4, #304]	; 0x130
   14b2c:	beq	14c4c <__assert_fail@plt+0x3748>
   14b30:	ldr	r1, [sp, #8]
   14b34:	mov	r0, r8
   14b38:	blx	r3
   14b3c:	cmp	r0, #0
   14b40:	blt	14d2c <__assert_fail@plt+0x3828>
   14b44:	beq	14c54 <__assert_fail@plt+0x3750>
   14b48:	cmp	r8, #0
   14b4c:	bne	14b88 <__assert_fail@plt+0x3684>
   14b50:	ldrd	r2, [r4, #96]	; 0x60
   14b54:	asr	r1, r0, #31
   14b58:	adds	sl, r0, r2
   14b5c:	adcs	fp, r1, r3
   14b60:	mov	r2, #0
   14b64:	mov	r3, #0
   14b68:	movcs	r2, #1
   14b6c:	movcs	r3, #0
   14b70:	orrs	r3, r2, r3
   14b74:	mov	r3, fp
   14b78:	mov	r2, sl
   14b7c:	strd	r2, [r4, #96]	; 0x60
   14b80:	movne	r3, #1
   14b84:	strbne	r3, [r4, #300]	; 0x12c
   14b88:	orrs	r3, r6, r7
   14b8c:	beq	14aa8 <__assert_fail@plt+0x35a4>
   14b90:	subs	r6, r6, #1
   14b94:	sbc	r7, r7, #0
   14b98:	orrs	r3, r6, r7
   14b9c:	bne	14b20 <__assert_fail@plt+0x361c>
   14ba0:	ldr	r2, [r9]
   14ba4:	cmp	r2, #0
   14ba8:	beq	14c54 <__assert_fail@plt+0x3750>
   14bac:	ldr	r3, [r4, #304]	; 0x130
   14bb0:	mov	r6, #0
   14bb4:	mov	r7, #0
   14bb8:	b	14b30 <__assert_fail@plt+0x362c>
   14bbc:	ldr	r3, [sp, #20]
   14bc0:	mov	r1, #2
   14bc4:	mov	r2, #0
   14bc8:	ldr	r3, [r3]
   14bcc:	ldr	r0, [sp, #16]
   14bd0:	str	r3, [sp, #24]
   14bd4:	str	r1, [sp]
   14bd8:	mov	r3, #0
   14bdc:	mov	r1, r8
   14be0:	bl	13c30 <__assert_fail@plt+0x272c>
   14be4:	cmp	r0, #0
   14be8:	sbcs	r3, r1, #0
   14bec:	blt	14b00 <__assert_fail@plt+0x35fc>
   14bf0:	ldr	r3, [sp, #24]
   14bf4:	cmp	r3, #0
   14bf8:	bne	14c04 <__assert_fail@plt+0x3700>
   14bfc:	mov	r3, #75	; 0x4b
   14c00:	str	r3, [sp, #24]
   14c04:	cmp	r8, #0
   14c08:	mov	r2, #5
   14c0c:	ldreq	r1, [pc, #444]	; 14dd0 <__assert_fail@plt+0x38cc>
   14c10:	beq	14c18 <__assert_fail@plt+0x3714>
   14c14:	ldr	r1, [pc, #440]	; 14dd4 <__assert_fail@plt+0x38d0>
   14c18:	mov	r0, #0
   14c1c:	bl	1124c <dcgettext@plt>
   14c20:	ldr	r2, [sp, #16]
   14c24:	mov	r1, #3
   14c28:	mov	r4, r0
   14c2c:	mov	r0, #0
   14c30:	bl	183d0 <__assert_fail@plt+0x6ecc>
   14c34:	mov	r2, r4
   14c38:	ldr	r1, [sp, #24]
   14c3c:	mov	r3, r0
   14c40:	mov	r0, #0
   14c44:	bl	138e4 <__assert_fail@plt+0x23e0>
   14c48:	b	14d7c <__assert_fail@plt+0x3878>
   14c4c:	ldr	r2, [r9]
   14c50:	b	14bb0 <__assert_fail@plt+0x36ac>
   14c54:	mov	r0, r6
   14c58:	mov	r1, r7
   14c5c:	b	14ab8 <__assert_fail@plt+0x35b4>
   14c60:	bl	144ac <__assert_fail@plt+0x2fa8>
   14c64:	ldr	fp, [r4, #268]	; 0x10c
   14c68:	str	fp, [sp, #8]
   14c6c:	b	14b20 <__assert_fail@plt+0x361c>
   14c70:	add	r2, sp, #32
   14c74:	mov	r1, r8
   14c78:	mov	r0, #3
   14c7c:	bl	112a0 <__fxstat64@plt>
   14c80:	subs	r3, r0, #0
   14c84:	bne	14d88 <__assert_fail@plt+0x3884>
   14c88:	ldr	r2, [sp, #48]	; 0x30
   14c8c:	ldr	r4, [pc, #312]	; 14dcc <__assert_fail@plt+0x38c8>
   14c90:	and	r2, r2, #53248	; 0xd000
   14c94:	cmp	r2, #32768	; 0x8000
   14c98:	ldrd	r6, [r4, #96]	; 0x60
   14c9c:	bne	14cc8 <__assert_fail@plt+0x37c4>
   14ca0:	ldrd	r0, [sp, #8]
   14ca4:	ldrd	r8, [sp, #80]	; 0x50
   14ca8:	adds	r2, r0, r6
   14cac:	str	r2, [sp, #24]
   14cb0:	adc	r2, r1, r7
   14cb4:	str	r2, [sp, #28]
   14cb8:	ldrd	sl, [sp, #24]
   14cbc:	cmp	r9, fp
   14cc0:	cmpeq	r8, sl
   14cc4:	bcc	14d08 <__assert_fail@plt+0x3804>
   14cc8:	mov	r0, #0
   14ccc:	mov	r1, r0
   14cd0:	ldrd	r8, [sp, #8]
   14cd4:	adds	r2, r8, r6
   14cd8:	adcs	r3, r9, r7
   14cdc:	mov	r6, #0
   14ce0:	mov	r7, #0
   14ce4:	movcs	r6, #1
   14ce8:	movcs	r7, #0
   14cec:	orrs	ip, r6, r7
   14cf0:	strd	r2, [r4, #96]	; 0x60
   14cf4:	movne	r3, #1
   14cf8:	strbne	r3, [r4, #300]	; 0x12c
   14cfc:	b	14ab8 <__assert_fail@plt+0x35b4>
   14d00:	bl	14314 <__assert_fail@plt+0x2e10>
   14d04:	b	14b18 <__assert_fail@plt+0x3614>
   14d08:	subs	r0, r0, r8
   14d0c:	sbc	r1, r1, r9
   14d10:	mov	r2, r5
   14d14:	bl	1c474 <__assert_fail@plt+0xaf70>
   14d18:	subs	r3, r8, r6
   14d1c:	str	r3, [sp, #8]
   14d20:	sbc	r3, r9, r7
   14d24:	str	r3, [sp, #12]
   14d28:	b	14cd0 <__assert_fail@plt+0x37cc>
   14d2c:	cmp	r8, #0
   14d30:	mov	r2, #5
   14d34:	bne	14c14 <__assert_fail@plt+0x3710>
   14d38:	ldr	r3, [sp, #20]
   14d3c:	ldr	r1, [pc, #148]	; 14dd8 <__assert_fail@plt+0x38d4>
   14d40:	mov	r0, r8
   14d44:	ldr	r5, [r3]
   14d48:	bl	1124c <dcgettext@plt>
   14d4c:	ldr	r1, [sp, #16]
   14d50:	mov	r6, r0
   14d54:	mov	r0, #4
   14d58:	bl	182f4 <__assert_fail@plt+0x6df0>
   14d5c:	mov	r2, r6
   14d60:	mov	r1, r5
   14d64:	mov	r3, r0
   14d68:	mov	r0, r8
   14d6c:	bl	138e4 <__assert_fail@plt+0x23e0>
   14d70:	ldr	r3, [r4, #272]	; 0x110
   14d74:	tst	r3, #256	; 0x100
   14d78:	bne	14d80 <__assert_fail@plt+0x387c>
   14d7c:	bl	1470c <__assert_fail@plt+0x3208>
   14d80:	bl	13778 <__assert_fail@plt+0x2274>
   14d84:	b	14d7c <__assert_fail@plt+0x3878>
   14d88:	ldr	r3, [sp, #20]
   14d8c:	mov	r2, #5
   14d90:	ldr	r1, [pc, #68]	; 14ddc <__assert_fail@plt+0x38d8>
   14d94:	mov	r0, r8
   14d98:	ldr	r5, [r3]
   14d9c:	bl	1124c <dcgettext@plt>
   14da0:	ldr	r1, [sp, #16]
   14da4:	mov	r6, r0
   14da8:	mov	r0, #4
   14dac:	bl	182f4 <__assert_fail@plt+0x6df0>
   14db0:	mov	r2, r6
   14db4:	mov	r1, r5
   14db8:	mov	r3, r0
   14dbc:	mov	r0, r4
   14dc0:	bl	138e4 <__assert_fail@plt+0x23e0>
   14dc4:	bl	11258 <__stack_chk_fail@plt>
   14dc8:	andeq	lr, r2, r8, lsl #30
   14dcc:	andeq	pc, r2, r0, ror #3
   14dd0:	andeq	ip, r1, r0, asr #31
   14dd4:	ldrdeq	ip, [r1], -r0
   14dd8:	andeq	ip, r1, r0, ror #31
   14ddc:			; <UNDEFINED> instruction: 0x0001cfb0
   14de0:	ldr	r3, [pc, #1116]	; 15244 <__assert_fail@plt+0x3d40>
   14de4:	push	{r7, lr}
   14de8:	sub	sp, sp, #64	; 0x40
   14dec:	ldr	r3, [r3]
   14df0:	subs	r4, r0, #0
   14df4:	str	r3, [sp, #60]	; 0x3c
   14df8:	beq	14e34 <__assert_fail@plt+0x3930>
   14dfc:	ldr	r3, [pc, #1092]	; 15248 <__assert_fail@plt+0x3d44>
   14e00:	mov	r2, #5
   14e04:	ldr	r1, [pc, #1088]	; 1524c <__assert_fail@plt+0x3d48>
   14e08:	mov	r0, #0
   14e0c:	ldr	r5, [r3]
   14e10:	bl	1124c <dcgettext@plt>
   14e14:	ldr	r3, [pc, #1076]	; 15250 <__assert_fail@plt+0x3d4c>
   14e18:	mov	r1, #1
   14e1c:	ldr	r3, [r3]
   14e20:	mov	r2, r0
   14e24:	mov	r0, r5
   14e28:	bl	11438 <__fprintf_chk@plt>
   14e2c:	mov	r0, r4
   14e30:	bl	113b4 <exit@plt>
   14e34:	mov	r2, #5
   14e38:	ldr	r1, [pc, #1044]	; 15254 <__assert_fail@plt+0x3d50>
   14e3c:	bl	1124c <dcgettext@plt>
   14e40:	ldr	r3, [pc, #1032]	; 15250 <__assert_fail@plt+0x3d4c>
   14e44:	ldr	r5, [pc, #1036]	; 15258 <__assert_fail@plt+0x3d54>
   14e48:	ldr	r3, [r3]
   14e4c:	mov	r2, r3
   14e50:	mov	r1, r0
   14e54:	mov	r0, #1
   14e58:	bl	11414 <__printf_chk@plt>
   14e5c:	mov	r2, #5
   14e60:	ldr	r1, [pc, #1012]	; 1525c <__assert_fail@plt+0x3d58>
   14e64:	mov	r0, r4
   14e68:	bl	1124c <dcgettext@plt>
   14e6c:	ldr	r1, [r5]
   14e70:	bl	11180 <fputs_unlocked@plt>
   14e74:	mov	r2, #5
   14e78:	ldr	r1, [pc, #992]	; 15260 <__assert_fail@plt+0x3d5c>
   14e7c:	mov	r0, r4
   14e80:	bl	1124c <dcgettext@plt>
   14e84:	ldr	r1, [r5]
   14e88:	bl	11180 <fputs_unlocked@plt>
   14e8c:	mov	r2, #5
   14e90:	ldr	r1, [pc, #972]	; 15264 <__assert_fail@plt+0x3d60>
   14e94:	mov	r0, r4
   14e98:	bl	1124c <dcgettext@plt>
   14e9c:	ldr	r1, [r5]
   14ea0:	bl	11180 <fputs_unlocked@plt>
   14ea4:	mov	r2, #5
   14ea8:	ldr	r1, [pc, #952]	; 15268 <__assert_fail@plt+0x3d64>
   14eac:	mov	r0, r4
   14eb0:	bl	1124c <dcgettext@plt>
   14eb4:	ldr	r1, [r5]
   14eb8:	bl	11180 <fputs_unlocked@plt>
   14ebc:	mov	r2, #5
   14ec0:	ldr	r1, [pc, #932]	; 1526c <__assert_fail@plt+0x3d68>
   14ec4:	mov	r0, r4
   14ec8:	bl	1124c <dcgettext@plt>
   14ecc:	ldr	r1, [r5]
   14ed0:	bl	11180 <fputs_unlocked@plt>
   14ed4:	mov	r2, #5
   14ed8:	ldr	r1, [pc, #912]	; 15270 <__assert_fail@plt+0x3d6c>
   14edc:	mov	r0, r4
   14ee0:	bl	1124c <dcgettext@plt>
   14ee4:	ldr	r1, [r5]
   14ee8:	bl	11180 <fputs_unlocked@plt>
   14eec:	mov	r2, #5
   14ef0:	ldr	r1, [pc, #892]	; 15274 <__assert_fail@plt+0x3d70>
   14ef4:	mov	r0, r4
   14ef8:	bl	1124c <dcgettext@plt>
   14efc:	ldr	r1, [r5]
   14f00:	bl	11180 <fputs_unlocked@plt>
   14f04:	mov	r2, #5
   14f08:	ldr	r1, [pc, #872]	; 15278 <__assert_fail@plt+0x3d74>
   14f0c:	mov	r0, r4
   14f10:	bl	1124c <dcgettext@plt>
   14f14:	ldr	r1, [r5]
   14f18:	bl	11180 <fputs_unlocked@plt>
   14f1c:	mov	r2, #5
   14f20:	ldr	r1, [pc, #852]	; 1527c <__assert_fail@plt+0x3d78>
   14f24:	mov	r0, r4
   14f28:	bl	1124c <dcgettext@plt>
   14f2c:	ldr	r1, [r5]
   14f30:	bl	11180 <fputs_unlocked@plt>
   14f34:	mov	r2, #5
   14f38:	ldr	r1, [pc, #832]	; 15280 <__assert_fail@plt+0x3d7c>
   14f3c:	mov	r0, r4
   14f40:	bl	1124c <dcgettext@plt>
   14f44:	ldr	r1, [r5]
   14f48:	bl	11180 <fputs_unlocked@plt>
   14f4c:	mov	r2, #5
   14f50:	ldr	r1, [pc, #812]	; 15284 <__assert_fail@plt+0x3d80>
   14f54:	mov	r0, r4
   14f58:	bl	1124c <dcgettext@plt>
   14f5c:	ldr	r1, [r5]
   14f60:	bl	11180 <fputs_unlocked@plt>
   14f64:	mov	r2, #5
   14f68:	ldr	r1, [pc, #792]	; 15288 <__assert_fail@plt+0x3d84>
   14f6c:	mov	r0, r4
   14f70:	bl	1124c <dcgettext@plt>
   14f74:	ldr	r1, [r5]
   14f78:	bl	11180 <fputs_unlocked@plt>
   14f7c:	mov	r2, #5
   14f80:	ldr	r1, [pc, #772]	; 1528c <__assert_fail@plt+0x3d88>
   14f84:	mov	r0, r4
   14f88:	bl	1124c <dcgettext@plt>
   14f8c:	ldr	r1, [r5]
   14f90:	bl	11180 <fputs_unlocked@plt>
   14f94:	mov	r2, #5
   14f98:	ldr	r1, [pc, #752]	; 15290 <__assert_fail@plt+0x3d8c>
   14f9c:	mov	r0, r4
   14fa0:	bl	1124c <dcgettext@plt>
   14fa4:	ldr	r1, [r5]
   14fa8:	bl	11180 <fputs_unlocked@plt>
   14fac:	mov	r2, #5
   14fb0:	ldr	r1, [pc, #732]	; 15294 <__assert_fail@plt+0x3d90>
   14fb4:	mov	r0, r4
   14fb8:	bl	1124c <dcgettext@plt>
   14fbc:	ldr	r1, [r5]
   14fc0:	bl	11180 <fputs_unlocked@plt>
   14fc4:	mov	r2, #5
   14fc8:	ldr	r1, [pc, #712]	; 15298 <__assert_fail@plt+0x3d94>
   14fcc:	mov	r0, r4
   14fd0:	bl	1124c <dcgettext@plt>
   14fd4:	ldr	r1, [r5]
   14fd8:	bl	11180 <fputs_unlocked@plt>
   14fdc:	mov	r2, #5
   14fe0:	ldr	r1, [pc, #692]	; 1529c <__assert_fail@plt+0x3d98>
   14fe4:	mov	r0, r4
   14fe8:	bl	1124c <dcgettext@plt>
   14fec:	ldr	r1, [r5]
   14ff0:	bl	11180 <fputs_unlocked@plt>
   14ff4:	mov	r2, #5
   14ff8:	ldr	r1, [pc, #672]	; 152a0 <__assert_fail@plt+0x3d9c>
   14ffc:	mov	r0, r4
   15000:	bl	1124c <dcgettext@plt>
   15004:	ldr	r1, [r5]
   15008:	bl	11180 <fputs_unlocked@plt>
   1500c:	mov	r2, #5
   15010:	ldr	r1, [pc, #652]	; 152a4 <__assert_fail@plt+0x3da0>
   15014:	mov	r0, r4
   15018:	bl	1124c <dcgettext@plt>
   1501c:	ldr	r1, [r5]
   15020:	bl	11180 <fputs_unlocked@plt>
   15024:	mov	r2, #5
   15028:	ldr	r1, [pc, #632]	; 152a8 <__assert_fail@plt+0x3da4>
   1502c:	mov	r0, r4
   15030:	bl	1124c <dcgettext@plt>
   15034:	ldr	r2, [pc, #624]	; 152ac <__assert_fail@plt+0x3da8>
   15038:	mov	r1, r0
   1503c:	mov	r0, #1
   15040:	bl	11414 <__printf_chk@plt>
   15044:	mov	r2, #5
   15048:	ldr	r1, [pc, #608]	; 152b0 <__assert_fail@plt+0x3dac>
   1504c:	mov	r0, r4
   15050:	bl	1124c <dcgettext@plt>
   15054:	ldr	r1, [r5]
   15058:	bl	11180 <fputs_unlocked@plt>
   1505c:	mov	r2, #5
   15060:	ldr	r1, [pc, #588]	; 152b4 <__assert_fail@plt+0x3db0>
   15064:	mov	r0, r4
   15068:	bl	1124c <dcgettext@plt>
   1506c:	ldr	r1, [r5]
   15070:	bl	11180 <fputs_unlocked@plt>
   15074:	ldr	lr, [pc, #572]	; 152b8 <__assert_fail@plt+0x3db4>
   15078:	add	ip, sp, #4
   1507c:	ldm	lr!, {r0, r1, r2, r3}
   15080:	stmia	ip!, {r0, r1, r2, r3}
   15084:	ldm	lr!, {r0, r1, r2, r3}
   15088:	ldr	r6, [sp, #4]
   1508c:	stmia	ip!, {r0, r1, r2, r3}
   15090:	cmp	r6, #0
   15094:	ldm	lr!, {r0, r1, r2, r3}
   15098:	addeq	r5, sp, #4
   1509c:	stmia	ip!, {r0, r1, r2, r3}
   150a0:	ldm	lr, {r0, r1}
   150a4:	stm	ip, {r0, r1}
   150a8:	beq	150d8 <__assert_fail@plt+0x3bd4>
   150ac:	ldr	r7, [pc, #520]	; 152bc <__assert_fail@plt+0x3db8>
   150b0:	add	r5, sp, #4
   150b4:	b	150c4 <__assert_fail@plt+0x3bc0>
   150b8:	ldr	r6, [r5, #8]!
   150bc:	cmp	r6, #0
   150c0:	beq	150d8 <__assert_fail@plt+0x3bd4>
   150c4:	mov	r1, r6
   150c8:	mov	r0, r7
   150cc:	bl	111a4 <strcmp@plt>
   150d0:	cmp	r0, #0
   150d4:	bne	150b8 <__assert_fail@plt+0x3bb4>
   150d8:	ldr	r5, [r5, #4]
   150dc:	mov	r2, #5
   150e0:	cmp	r5, #0
   150e4:	ldr	r1, [pc, #468]	; 152c0 <__assert_fail@plt+0x3dbc>
   150e8:	beq	15190 <__assert_fail@plt+0x3c8c>
   150ec:	mov	r0, #0
   150f0:	bl	1124c <dcgettext@plt>
   150f4:	ldr	r3, [pc, #456]	; 152c4 <__assert_fail@plt+0x3dc0>
   150f8:	ldr	r2, [pc, #456]	; 152c8 <__assert_fail@plt+0x3dc4>
   150fc:	mov	r1, r0
   15100:	mov	r0, #1
   15104:	bl	11414 <__printf_chk@plt>
   15108:	mov	r1, #0
   1510c:	mov	r0, #5
   15110:	bl	11474 <setlocale@plt>
   15114:	cmp	r0, #0
   15118:	ldreq	r6, [pc, #412]	; 152bc <__assert_fail@plt+0x3db8>
   1511c:	beq	15138 <__assert_fail@plt+0x3c34>
   15120:	mov	r2, #3
   15124:	ldr	r1, [pc, #416]	; 152cc <__assert_fail@plt+0x3dc8>
   15128:	bl	114bc <strncmp@plt>
   1512c:	ldr	r6, [pc, #392]	; 152bc <__assert_fail@plt+0x3db8>
   15130:	cmp	r0, #0
   15134:	bne	15220 <__assert_fail@plt+0x3d1c>
   15138:	mov	r2, #5
   1513c:	ldr	r1, [pc, #396]	; 152d0 <__assert_fail@plt+0x3dcc>
   15140:	mov	r0, #0
   15144:	bl	1124c <dcgettext@plt>
   15148:	ldr	r3, [pc, #364]	; 152bc <__assert_fail@plt+0x3db8>
   1514c:	ldr	r2, [pc, #368]	; 152c4 <__assert_fail@plt+0x3dc0>
   15150:	mov	r1, r0
   15154:	mov	r0, #1
   15158:	bl	11414 <__printf_chk@plt>
   1515c:	mov	r2, #5
   15160:	ldr	r1, [pc, #364]	; 152d4 <__assert_fail@plt+0x3dd0>
   15164:	mov	r0, #0
   15168:	bl	1124c <dcgettext@plt>
   1516c:	ldr	r2, [pc, #356]	; 152d8 <__assert_fail@plt+0x3dd4>
   15170:	cmp	r5, r6
   15174:	ldr	r3, [pc, #352]	; 152dc <__assert_fail@plt+0x3dd8>
   15178:	movne	r3, r2
   1517c:	mov	r1, r0
   15180:	mov	r2, r5
   15184:	mov	r0, #1
   15188:	bl	11414 <__printf_chk@plt>
   1518c:	b	14e2c <__assert_fail@plt+0x3928>
   15190:	mov	r0, r5
   15194:	bl	1124c <dcgettext@plt>
   15198:	ldr	r3, [pc, #292]	; 152c4 <__assert_fail@plt+0x3dc0>
   1519c:	ldr	r2, [pc, #292]	; 152c8 <__assert_fail@plt+0x3dc4>
   151a0:	mov	r1, r0
   151a4:	mov	r0, #1
   151a8:	bl	11414 <__printf_chk@plt>
   151ac:	mov	r1, r5
   151b0:	mov	r0, #5
   151b4:	bl	11474 <setlocale@plt>
   151b8:	cmp	r0, #0
   151bc:	beq	151d4 <__assert_fail@plt+0x3cd0>
   151c0:	mov	r2, #3
   151c4:	ldr	r1, [pc, #256]	; 152cc <__assert_fail@plt+0x3dc8>
   151c8:	bl	114bc <strncmp@plt>
   151cc:	cmp	r0, #0
   151d0:	bne	15218 <__assert_fail@plt+0x3d14>
   151d4:	mov	r2, #5
   151d8:	ldr	r1, [pc, #240]	; 152d0 <__assert_fail@plt+0x3dcc>
   151dc:	mov	r0, #0
   151e0:	bl	1124c <dcgettext@plt>
   151e4:	ldr	r3, [pc, #208]	; 152bc <__assert_fail@plt+0x3db8>
   151e8:	ldr	r2, [pc, #212]	; 152c4 <__assert_fail@plt+0x3dc0>
   151ec:	mov	r5, r3
   151f0:	mov	r1, r0
   151f4:	mov	r0, #1
   151f8:	bl	11414 <__printf_chk@plt>
   151fc:	ldr	r1, [pc, #208]	; 152d4 <__assert_fail@plt+0x3dd0>
   15200:	mov	r2, #5
   15204:	mov	r0, #0
   15208:	bl	1124c <dcgettext@plt>
   1520c:	ldr	r3, [pc, #200]	; 152dc <__assert_fail@plt+0x3dd8>
   15210:	mov	r1, r0
   15214:	b	15180 <__assert_fail@plt+0x3c7c>
   15218:	ldr	r6, [pc, #156]	; 152bc <__assert_fail@plt+0x3db8>
   1521c:	mov	r5, r6
   15220:	mov	r2, #5
   15224:	ldr	r1, [pc, #180]	; 152e0 <__assert_fail@plt+0x3ddc>
   15228:	mov	r0, #0
   1522c:	bl	1124c <dcgettext@plt>
   15230:	ldr	r2, [pc, #132]	; 152bc <__assert_fail@plt+0x3db8>
   15234:	mov	r1, r0
   15238:	mov	r0, #1
   1523c:	bl	11414 <__printf_chk@plt>
   15240:	b	15138 <__assert_fail@plt+0x3c34>
   15244:	andeq	lr, r2, r8, lsl #30
   15248:	ldrdeq	pc, [r2], -r0
   1524c:	strdeq	ip, [r1], -r8
   15250:	andeq	pc, r2, r4, asr r4	; <UNPREDICTABLE>
   15254:	andeq	sp, r1, r0, lsr #32
   15258:	ldrdeq	pc, [r2], -r4
   1525c:	andeq	sp, r1, ip, asr #32
   15260:	andeq	sp, r1, ip, ror #3
   15264:	andeq	sp, r1, ip, lsl #9
   15268:	andeq	sp, r1, r0, lsl #11
   1526c:	andeq	sp, r1, ip, asr #15
   15270:	andeq	sp, r1, ip, ror #17
   15274:	andeq	sp, r1, r8, asr r9
   15278:	andeq	sp, r1, r0, lsl #19
   1527c:	andeq	sp, r1, r8, lsr #19
   15280:	ldrdeq	sp, [r1], -r4
   15284:	andeq	sp, r1, r4, lsl #20
   15288:	andeq	sp, r1, r0, asr #20
   1528c:	andeq	sp, r1, r4, ror #20
   15290:	andeq	sp, r1, ip, lsl #21
   15294:	andeq	sp, r1, r8, asr #21
   15298:	andeq	sp, r1, r4, lsl #22
   1529c:	andeq	sp, r1, r8, lsr #22
   152a0:	andeq	sp, r1, r8, ror #22
   152a4:	andeq	sp, r1, r4, lsr #23
   152a8:	andeq	sp, r1, r0, ror #23
   152ac:	andeq	sp, r1, r8, ror #24
   152b0:	andeq	sp, r1, r0, ror ip
   152b4:	andeq	sp, r1, r0, lsr #25
   152b8:			; <UNDEFINED> instruction: 0x0001c6b0
   152bc:	strdeq	ip, [r1], -r4
   152c0:	ldrdeq	sp, [r1], -r8
   152c4:	strdeq	sp, [r1], -r0
   152c8:	andeq	sp, r1, r8, lsl sp
   152cc:	andeq	sp, r1, r8, lsr #26
   152d0:	andeq	sp, r1, r4, ror sp
   152d4:	muleq	r1, r4, sp
   152d8:	andeq	sp, r1, r4, ror #22
   152dc:	strdeq	lr, [r1], -ip
   152e0:	andeq	sp, r1, ip, lsr #26
   152e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   152e8:	mov	r4, r0
   152ec:	sub	sp, sp, #12
   152f0:	mov	r7, r2
   152f4:	mov	r8, r3
   152f8:	sub	r6, r1, #1
   152fc:	mov	r5, #0
   15300:	mov	r1, #44	; 0x2c
   15304:	mov	r0, r4
   15308:	bl	113cc <strchr@plt>
   1530c:	sub	r9, r4, #1
   15310:	mov	lr, r6
   15314:	mov	r1, r9
   15318:	mov	r2, lr
   1531c:	b	15328 <__assert_fail@plt+0x3e24>
   15320:	cmp	r3, ip
   15324:	bne	15350 <__assert_fail@plt+0x3e4c>
   15328:	ldrb	r3, [r2, #1]!
   1532c:	ldrb	ip, [r1, #1]!
   15330:	cmp	r3, #0
   15334:	bne	15320 <__assert_fail@plt+0x3e1c>
   15338:	cmp	ip, #0
   1533c:	cmpne	ip, #44	; 0x2c
   15340:	bne	15350 <__assert_fail@plt+0x3e4c>
   15344:	ldr	r3, [lr, #13]
   15348:	cmp	r3, #0
   1534c:	bne	153b4 <__assert_fail@plt+0x3eb0>
   15350:	add	lr, lr, #16
   15354:	ldrb	r3, [lr, #-15]
   15358:	cmp	r3, #0
   1535c:	bne	15314 <__assert_fail@plt+0x3e10>
   15360:	cmp	r0, #0
   15364:	subne	r5, r0, r4
   15368:	beq	153d8 <__assert_fail@plt+0x3ed4>
   1536c:	mov	r1, r8
   15370:	mov	r2, #5
   15374:	mov	r0, #0
   15378:	bl	1124c <dcgettext@plt>
   1537c:	mov	r3, r5
   15380:	mov	r2, r4
   15384:	mov	r1, #8
   15388:	mov	r6, r0
   1538c:	mov	r0, #0
   15390:	bl	18298 <__assert_fail@plt+0x6d94>
   15394:	mov	r1, #0
   15398:	mov	r3, r6
   1539c:	ldr	r2, [pc, #68]	; 153e8 <__assert_fail@plt+0x3ee4>
   153a0:	str	r0, [sp]
   153a4:	mov	r0, r1
   153a8:	bl	138e4 <__assert_fail@plt+0x23e0>
   153ac:	mov	r0, #1
   153b0:	bl	14de0 <__assert_fail@plt+0x38dc>
   153b4:	cmp	r7, #0
   153b8:	orreq	r3, r3, r5
   153bc:	cmp	r0, #0
   153c0:	addne	r4, r0, #1
   153c4:	movne	r5, r3
   153c8:	bne	15300 <__assert_fail@plt+0x3dfc>
   153cc:	mov	r0, r3
   153d0:	add	sp, sp, #12
   153d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153d8:	mov	r0, r4
   153dc:	bl	113c0 <strlen@plt>
   153e0:	mov	r5, r0
   153e4:	b	1536c <__assert_fail@plt+0x3e68>
   153e8:	andeq	sp, r1, r8, asr #27
   153ec:	push	{r4, r5, r6, lr}
   153f0:	mov	r4, r0
   153f4:	bl	11300 <__fpending@plt>
   153f8:	ldr	r5, [r4]
   153fc:	and	r5, r5, #32
   15400:	mov	r6, r0
   15404:	mov	r0, r4
   15408:	bl	19a20 <__assert_fail@plt+0x851c>
   1540c:	cmp	r5, #0
   15410:	mov	r4, r0
   15414:	bne	15440 <__assert_fail@plt+0x3f3c>
   15418:	cmp	r0, #0
   1541c:	beq	15438 <__assert_fail@plt+0x3f34>
   15420:	cmp	r6, #0
   15424:	bne	15458 <__assert_fail@plt+0x3f54>
   15428:	bl	113e4 <__errno_location@plt>
   1542c:	ldr	r4, [r0]
   15430:	subs	r4, r4, #9
   15434:	mvnne	r4, #0
   15438:	mov	r0, r4
   1543c:	pop	{r4, r5, r6, pc}
   15440:	cmp	r0, #0
   15444:	bne	15458 <__assert_fail@plt+0x3f54>
   15448:	bl	113e4 <__errno_location@plt>
   1544c:	str	r4, [r0]
   15450:	mvn	r4, #0
   15454:	b	15438 <__assert_fail@plt+0x3f34>
   15458:	mvn	r4, #0
   1545c:	b	15438 <__assert_fail@plt+0x3f34>
   15460:	ldr	r3, [pc, #4]	; 1546c <__assert_fail@plt+0x3f68>
   15464:	str	r0, [r3]
   15468:	bx	lr
   1546c:	andeq	pc, r2, ip, asr #8
   15470:	ldr	r3, [pc, #4]	; 1547c <__assert_fail@plt+0x3f78>
   15474:	strb	r0, [r3, #4]
   15478:	bx	lr
   1547c:	andeq	pc, r2, ip, asr #8
   15480:	ldr	r3, [pc, #180]	; 1553c <__assert_fail@plt+0x4038>
   15484:	push	{r4, r5, r6, lr}
   15488:	sub	sp, sp, #8
   1548c:	ldr	r0, [r3]
   15490:	bl	153ec <__assert_fail@plt+0x3ee8>
   15494:	cmp	r0, #0
   15498:	beq	154c0 <__assert_fail@plt+0x3fbc>
   1549c:	bl	113e4 <__errno_location@plt>
   154a0:	ldr	r5, [pc, #152]	; 15540 <__assert_fail@plt+0x403c>
   154a4:	ldrb	r3, [r5, #4]
   154a8:	cmp	r3, #0
   154ac:	mov	r4, r0
   154b0:	beq	154dc <__assert_fail@plt+0x3fd8>
   154b4:	ldr	r3, [r0]
   154b8:	cmp	r3, #32
   154bc:	bne	154dc <__assert_fail@plt+0x3fd8>
   154c0:	ldr	r3, [pc, #124]	; 15544 <__assert_fail@plt+0x4040>
   154c4:	ldr	r0, [r3]
   154c8:	bl	153ec <__assert_fail@plt+0x3ee8>
   154cc:	cmp	r0, #0
   154d0:	bne	1551c <__assert_fail@plt+0x4018>
   154d4:	add	sp, sp, #8
   154d8:	pop	{r4, r5, r6, pc}
   154dc:	mov	r2, #5
   154e0:	ldr	r1, [pc, #96]	; 15548 <__assert_fail@plt+0x4044>
   154e4:	mov	r0, #0
   154e8:	bl	1124c <dcgettext@plt>
   154ec:	mov	r6, r0
   154f0:	ldr	r0, [r5]
   154f4:	cmp	r0, #0
   154f8:	beq	15528 <__assert_fail@plt+0x4024>
   154fc:	ldr	r4, [r4]
   15500:	bl	183bc <__assert_fail@plt+0x6eb8>
   15504:	mov	r1, r4
   15508:	str	r6, [sp]
   1550c:	ldr	r2, [pc, #56]	; 1554c <__assert_fail@plt+0x4048>
   15510:	mov	r3, r0
   15514:	mov	r0, #0
   15518:	bl	11318 <error@plt>
   1551c:	ldr	r3, [pc, #44]	; 15550 <__assert_fail@plt+0x404c>
   15520:	ldr	r0, [r3]
   15524:	bl	11204 <_exit@plt>
   15528:	mov	r3, r6
   1552c:	ldr	r1, [r4]
   15530:	ldr	r2, [pc, #28]	; 15554 <__assert_fail@plt+0x4050>
   15534:	bl	11318 <error@plt>
   15538:	b	1551c <__assert_fail@plt+0x4018>
   1553c:	ldrdeq	pc, [r2], -r4
   15540:	andeq	pc, r2, ip, asr #8
   15544:	ldrdeq	pc, [r2], -r0
   15548:	andeq	lr, r1, r8, ror #4
   1554c:	andeq	sp, r1, r8, asr #27
   15550:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   15554:	andeq	ip, r1, r4, lsl sp
   15558:	mov	ip, r1
   1555c:	push	{r4, r5, r6, r7, r8, lr}
   15560:	mov	r1, r2
   15564:	mov	r5, r0
   15568:	mov	r2, r3
   1556c:	mov	r0, ip
   15570:	bl	11324 <open64@plt>
   15574:	sub	r3, r5, r0
   15578:	clz	r3, r3
   1557c:	lsr	r3, r3, #5
   15580:	orrs	r3, r3, r0, lsr #31
   15584:	mov	r4, r0
   15588:	beq	15594 <__assert_fail@plt+0x4090>
   1558c:	mov	r0, r4
   15590:	pop	{r4, r5, r6, r7, r8, pc}
   15594:	mov	r1, r5
   15598:	bl	11264 <dup2@plt>
   1559c:	mov	r7, r0
   155a0:	bl	113e4 <__errno_location@plt>
   155a4:	mov	r5, r0
   155a8:	mov	r0, r4
   155ac:	ldr	r6, [r5]
   155b0:	mov	r4, r7
   155b4:	bl	114e0 <close@plt>
   155b8:	str	r6, [r5]
   155bc:	mov	r0, r4
   155c0:	pop	{r4, r5, r6, r7, r8, pc}
   155c4:	push	{r4, lr}
   155c8:	sub	sp, sp, #16
   155cc:	ldr	r4, [pc, #80]	; 15624 <__assert_fail@plt+0x4120>
   155d0:	add	r1, sp, #4
   155d4:	mov	r0, #1
   155d8:	ldr	r3, [r4]
   155dc:	str	r3, [sp, #12]
   155e0:	bl	111f8 <clock_gettime@plt>
   155e4:	cmp	r0, #0
   155e8:	beq	155f4 <__assert_fail@plt+0x40f0>
   155ec:	add	r0, sp, #4
   155f0:	bl	1562c <__assert_fail@plt+0x4128>
   155f4:	ldr	r0, [sp, #8]
   155f8:	ldr	r2, [sp, #4]
   155fc:	ldr	r3, [pc, #36]	; 15628 <__assert_fail@plt+0x4124>
   15600:	asr	r1, r0, #31
   15604:	smlal	r0, r1, r3, r2
   15608:	ldr	r2, [sp, #12]
   1560c:	ldr	r3, [r4]
   15610:	cmp	r2, r3
   15614:	bne	15620 <__assert_fail@plt+0x411c>
   15618:	add	sp, sp, #16
   1561c:	pop	{r4, pc}
   15620:	bl	11258 <__stack_chk_fail@plt>
   15624:	andeq	lr, r2, r8, lsl #30
   15628:	blcc	fe6c7e30 <opterr@@GLIBC_2.4+0xfe698c58>
   1562c:	push	{r4, r5, lr}
   15630:	sub	sp, sp, #20
   15634:	ldr	r4, [pc, #92]	; 15698 <__assert_fail@plt+0x4194>
   15638:	mov	r1, r0
   1563c:	mov	r5, r0
   15640:	ldr	r3, [r4]
   15644:	mov	r0, #0
   15648:	str	r3, [sp, #12]
   1564c:	bl	111f8 <clock_gettime@plt>
   15650:	cmp	r0, #0
   15654:	beq	1567c <__assert_fail@plt+0x4178>
   15658:	mov	r1, #0
   1565c:	add	r0, sp, #4
   15660:	bl	112f4 <gettimeofday@plt>
   15664:	ldmib	sp, {r1, r3}
   15668:	rsb	r2, r3, r3, lsl #5
   1566c:	str	r1, [r5]
   15670:	add	r3, r3, r2, lsl #2
   15674:	lsl	r3, r3, #3
   15678:	str	r3, [r5, #4]
   1567c:	ldr	r2, [sp, #12]
   15680:	ldr	r3, [r4]
   15684:	cmp	r2, r3
   15688:	bne	15694 <__assert_fail@plt+0x4190>
   1568c:	add	sp, sp, #20
   15690:	pop	{r4, r5, pc}
   15694:	bl	11258 <__stack_chk_fail@plt>
   15698:	andeq	lr, r2, r8, lsl #30
   1569c:	andeq	r0, r0, r0
   156a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156a4:	vpush	{d8-d9}
   156a8:	mov	r8, r3
   156ac:	ands	r3, r3, #32
   156b0:	mov	r5, r2
   156b4:	sub	sp, sp, #124	; 0x7c
   156b8:	mov	r7, r1
   156bc:	str	r3, [sp, #32]
   156c0:	ldr	r3, [pc, #1360]	; 15c18 <__assert_fail@plt+0x4714>
   156c4:	str	r2, [sp, #24]
   156c8:	movne	r2, #1024	; 0x400
   156cc:	ldr	r3, [r3]
   156d0:	moveq	r2, #1000	; 0x3e8
   156d4:	str	r2, [sp, #28]
   156d8:	str	r3, [sp, #116]	; 0x74
   156dc:	mov	r6, r0
   156e0:	bl	114a4 <localeconv@plt>
   156e4:	add	r3, r5, #644	; 0x284
   156e8:	str	r3, [sp, #48]	; 0x30
   156ec:	add	r3, r3, #3
   156f0:	str	r3, [sp, #12]
   156f4:	ldr	r2, [r0]
   156f8:	mov	r4, r0
   156fc:	mov	r0, r2
   15700:	mov	r5, r2
   15704:	bl	113c0 <strlen@plt>
   15708:	ldr	r9, [r4, #4]
   1570c:	ldr	r3, [pc, #1288]	; 15c1c <__assert_fail@plt+0x4718>
   15710:	sub	r2, r0, #1
   15714:	cmp	r2, #16
   15718:	movcc	r3, r5
   1571c:	mov	fp, r0
   15720:	mov	r0, r9
   15724:	movcs	fp, #1
   15728:	str	r3, [sp, #36]	; 0x24
   1572c:	bl	113c0 <strlen@plt>
   15730:	ldr	r3, [pc, #1256]	; 15c20 <__assert_fail@plt+0x471c>
   15734:	and	r2, r8, #3
   15738:	str	r2, [sp, #16]
   1573c:	ldr	sl, [r4, #8]
   15740:	cmp	r0, #16
   15744:	movhi	r9, r3
   15748:	ldrd	r0, [sp, #176]	; 0xb0
   1574c:	ldrd	r2, [sp, #184]	; 0xb8
   15750:	cmp	r3, r1
   15754:	cmpeq	r2, r0
   15758:	bhi	159f0 <__assert_fail@plt+0x44ec>
   1575c:	bl	1c474 <__assert_fail@plt+0xaf70>
   15760:	orrs	r3, r2, r3
   15764:	bne	15798 <__assert_fail@plt+0x4294>
   15768:	mul	r2, r0, r7
   1576c:	umull	r4, r5, r0, r6
   15770:	mla	r2, r6, r1, r2
   15774:	mov	r3, r1
   15778:	add	r5, r2, r5
   1577c:	mov	r1, r5
   15780:	mov	r2, r0
   15784:	mov	r0, r4
   15788:	bl	1c474 <__assert_fail@plt+0xaf70>
   1578c:	cmp	r1, r7
   15790:	cmpeq	r0, r6
   15794:	beq	15d54 <__assert_fail@plt+0x4850>
   15798:	ldrd	r0, [sp, #176]	; 0xb0
   1579c:	bl	1c32c <__assert_fail@plt+0xae28>
   157a0:	vmov	d9, r0, r1
   157a4:	ldrd	r0, [sp, #184]	; 0xb8
   157a8:	bl	1c32c <__assert_fail@plt+0xae28>
   157ac:	vmov	d7, r0, r1
   157b0:	mov	r0, r6
   157b4:	mov	r1, r7
   157b8:	vdiv.f64	d8, d9, d7
   157bc:	bl	1c32c <__assert_fail@plt+0xae28>
   157c0:	tst	r8, #16
   157c4:	vmov	d7, r0, r1
   157c8:	vmul.f64	d8, d8, d7
   157cc:	beq	15938 <__assert_fail@plt+0x4434>
   157d0:	vldr	s15, [sp, #28]
   157d4:	mov	r6, #0
   157d8:	vcvt.f64.s32	d6, s15
   157dc:	vmov.f64	d7, d6
   157e0:	vmov.f64	d5, d7
   157e4:	vmul.f64	d7, d7, d6
   157e8:	add	r6, r6, #1
   157ec:	vcmpe.f64	d7, d8
   157f0:	vmrs	APSR_nzcv, fpscr
   157f4:	bhi	15800 <__assert_fail@plt+0x42fc>
   157f8:	cmp	r6, #8
   157fc:	bne	157e0 <__assert_fail@plt+0x42dc>
   15800:	ldr	r3, [sp, #32]
   15804:	clz	r4, r3
   15808:	ldr	r3, [sp, #16]
   1580c:	lsr	r4, r4, #5
   15810:	add	fp, fp, #1
   15814:	add	r4, r4, #1
   15818:	cmp	r3, #1
   1581c:	vdiv.f64	d9, d8, d5
   15820:	add	r4, r4, fp
   15824:	beq	15e10 <__assert_fail@plt+0x490c>
   15828:	vldr	d7, [pc, #984]	; 15c08 <__assert_fail@plt+0x4704>
   1582c:	vcmpe.f64	d9, d7
   15830:	vmrs	APSR_nzcv, fpscr
   15834:	vmovpl.f64	d7, d9
   15838:	bpl	1587c <__assert_fail@plt+0x4378>
   1583c:	vmov	r0, r1, d9
   15840:	bl	1c4c0 <__assert_fail@plt+0xafbc>
   15844:	mov	r5, r0
   15848:	mov	r7, r1
   1584c:	bl	1c32c <__assert_fail@plt+0xae28>
   15850:	ldr	r3, [sp, #16]
   15854:	cmp	r3, #0
   15858:	vmov	d7, r0, r1
   1585c:	bne	1587c <__assert_fail@plt+0x4378>
   15860:	vcmp.f64	d9, d7
   15864:	vmrs	APSR_nzcv, fpscr
   15868:	beq	1587c <__assert_fail@plt+0x4378>
   1586c:	adds	r0, r5, #1
   15870:	adc	r1, r7, #0
   15874:	bl	1c32c <__assert_fail@plt+0xae28>
   15878:	vmov	d7, r0, r1
   1587c:	ldr	r5, [sp, #24]
   15880:	vstr	d7, [sp]
   15884:	ldr	r3, [pc, #928]	; 15c2c <__assert_fail@plt+0x4728>
   15888:	mvn	r2, #0
   1588c:	mov	r1, #1
   15890:	mov	r0, r5
   15894:	bl	113f0 <__sprintf_chk@plt>
   15898:	mov	r0, r5
   1589c:	bl	113c0 <strlen@plt>
   158a0:	cmp	r0, r4
   158a4:	bls	15cec <__assert_fail@plt+0x47e8>
   158a8:	vldr	d7, [pc, #864]	; 15c10 <__assert_fail@plt+0x470c>
   158ac:	vmul.f64	d9, d9, d7
   158b0:	vldr	d7, [pc, #848]	; 15c08 <__assert_fail@plt+0x4704>
   158b4:	vcmpe.f64	d9, d7
   158b8:	vmrs	APSR_nzcv, fpscr
   158bc:	bpl	15904 <__assert_fail@plt+0x4400>
   158c0:	vmov	r0, r1, d9
   158c4:	bl	1c4c0 <__assert_fail@plt+0xafbc>
   158c8:	mov	r4, r0
   158cc:	mov	r5, r1
   158d0:	bl	1c32c <__assert_fail@plt+0xae28>
   158d4:	ldr	r3, [sp, #16]
   158d8:	cmp	r3, #0
   158dc:	vmov	d7, r0, r1
   158e0:	bne	15900 <__assert_fail@plt+0x43fc>
   158e4:	vcmp.f64	d9, d7
   158e8:	vmrs	APSR_nzcv, fpscr
   158ec:	beq	15900 <__assert_fail@plt+0x43fc>
   158f0:	adds	r0, r4, #1
   158f4:	adc	r1, r5, #0
   158f8:	bl	1c32c <__assert_fail@plt+0xae28>
   158fc:	vmov	d7, r0, r1
   15900:	vmov.f64	d9, d7
   15904:	vldr	d6, [pc, #772]	; 15c10 <__assert_fail@plt+0x470c>
   15908:	ldr	r4, [sp, #24]
   1590c:	ldr	r3, [pc, #784]	; 15c24 <__assert_fail@plt+0x4720>
   15910:	mvn	r2, #0
   15914:	vdiv.f64	d7, d9, d6
   15918:	mov	r1, #1
   1591c:	mov	r0, r4
   15920:	vstr	d7, [sp]
   15924:	bl	113f0 <__sprintf_chk@plt>
   15928:	mov	r0, r4
   1592c:	bl	113c0 <strlen@plt>
   15930:	mov	r7, r0
   15934:	b	15980 <__assert_fail@plt+0x447c>
   15938:	and	r6, r8, #3
   1593c:	cmp	r6, #1
   15940:	beq	15954 <__assert_fail@plt+0x4450>
   15944:	vldr	d7, [pc, #700]	; 15c08 <__assert_fail@plt+0x4704>
   15948:	vcmpe.f64	d8, d7
   1594c:	vmrs	APSR_nzcv, fpscr
   15950:	bmi	15d10 <__assert_fail@plt+0x480c>
   15954:	ldr	r4, [sp, #24]
   15958:	ldr	r3, [pc, #708]	; 15c24 <__assert_fail@plt+0x4720>
   1595c:	mvn	r2, #0
   15960:	mov	r1, #1
   15964:	vstr	d8, [sp]
   15968:	mov	r0, r4
   1596c:	bl	113f0 <__sprintf_chk@plt>
   15970:	mov	r0, r4
   15974:	bl	113c0 <strlen@plt>
   15978:	mvn	r6, #0
   1597c:	mov	r7, r0
   15980:	ldr	r3, [sp, #12]
   15984:	mov	r2, r0
   15988:	sub	fp, r3, r0
   1598c:	mov	r0, fp
   15990:	ldr	r1, [sp, #24]
   15994:	add	r7, fp, r7
   15998:	bl	111e0 <memmove@plt>
   1599c:	tst	r8, #4
   159a0:	bne	15b60 <__assert_fail@plt+0x465c>
   159a4:	tst	r8, #128	; 0x80
   159a8:	beq	159c0 <__assert_fail@plt+0x44bc>
   159ac:	cmn	r6, #1
   159b0:	beq	15c30 <__assert_fail@plt+0x472c>
   159b4:	and	r3, r8, #256	; 0x100
   159b8:	orrs	r2, r3, r6
   159bc:	bne	15e98 <__assert_fail@plt+0x4994>
   159c0:	ldr	r2, [sp, #12]
   159c4:	mov	r3, #0
   159c8:	mov	r0, fp
   159cc:	strb	r3, [r2]
   159d0:	ldr	r3, [pc, #576]	; 15c18 <__assert_fail@plt+0x4714>
   159d4:	ldr	r2, [sp, #116]	; 0x74
   159d8:	ldr	r3, [r3]
   159dc:	cmp	r2, r3
   159e0:	bne	16064 <__assert_fail@plt+0x4b60>
   159e4:	add	sp, sp, #124	; 0x7c
   159e8:	vpop	{d8-d9}
   159ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159f0:	ldrd	r2, [sp, #176]	; 0xb0
   159f4:	orrs	r3, r2, r3
   159f8:	beq	15798 <__assert_fail@plt+0x4294>
   159fc:	ldrd	r2, [sp, #176]	; 0xb0
   15a00:	ldrd	r0, [sp, #184]	; 0xb8
   15a04:	bl	1c474 <__assert_fail@plt+0xaf70>
   15a08:	orrs	r3, r2, r3
   15a0c:	mov	r4, r0
   15a10:	mov	r5, r1
   15a14:	bne	15798 <__assert_fail@plt+0x4294>
   15a18:	mov	r0, r6
   15a1c:	mov	r1, r7
   15a20:	mov	r2, r4
   15a24:	mov	r3, r5
   15a28:	bl	1c474 <__assert_fail@plt+0xaf70>
   15a2c:	strd	r0, [sp, #52]	; 0x34
   15a30:	lsl	r0, r2, #2
   15a34:	lsl	r1, r3, #2
   15a38:	adds	r0, r0, r2
   15a3c:	orr	r1, r1, r2, lsr #30
   15a40:	adc	r1, r1, r3
   15a44:	adds	r0, r0, r0
   15a48:	adc	r1, r1, r1
   15a4c:	mov	r2, r4
   15a50:	mov	r3, r5
   15a54:	bl	1c474 <__assert_fail@plt+0xaf70>
   15a58:	adds	r1, r2, r2
   15a5c:	adc	r3, r3, r3
   15a60:	str	r3, [sp, #44]	; 0x2c
   15a64:	str	r1, [sp, #40]	; 0x28
   15a68:	ldrd	r6, [sp, #40]	; 0x28
   15a6c:	mov	r3, r5
   15a70:	mov	lr, r0
   15a74:	cmp	r5, r7
   15a78:	cmpeq	r4, r6
   15a7c:	ldrd	r4, [sp, #52]	; 0x34
   15a80:	bls	15e84 <__assert_fail@plt+0x4980>
   15a84:	mov	r3, r6
   15a88:	orrs	r3, r3, r7
   15a8c:	movne	r3, #1
   15a90:	moveq	r3, #0
   15a94:	mov	ip, r3
   15a98:	ands	r3, r8, #16
   15a9c:	str	r3, [sp, #52]	; 0x34
   15aa0:	beq	15d6c <__assert_fail@plt+0x4868>
   15aa4:	ldr	r1, [sp, #28]
   15aa8:	mov	r3, #0
   15aac:	mov	r2, r1
   15ab0:	cmp	r3, r5
   15ab4:	cmpeq	r1, r4
   15ab8:	strd	r2, [sp, #40]	; 0x28
   15abc:	mov	r6, #0
   15ac0:	bhi	15d70 <__assert_fail@plt+0x486c>
   15ac4:	str	r9, [sp, #56]	; 0x38
   15ac8:	str	r8, [sp, #68]	; 0x44
   15acc:	mov	r7, ip
   15ad0:	str	fp, [sp, #60]	; 0x3c
   15ad4:	mov	r9, r1
   15ad8:	str	sl, [sp, #64]	; 0x40
   15adc:	mov	r8, lr
   15ae0:	b	15b08 <__assert_fail@plt+0x4604>
   15ae4:	adds	r7, r7, #0
   15ae8:	movne	r7, #1
   15aec:	ldrd	r2, [sp, #40]	; 0x28
   15af0:	add	r6, r6, #1
   15af4:	cmp	r3, fp
   15af8:	cmpeq	r2, sl
   15afc:	bhi	15f08 <__assert_fail@plt+0x4a04>
   15b00:	cmp	r6, #8
   15b04:	beq	15ed0 <__assert_fail@plt+0x49cc>
   15b08:	mov	r0, r4
   15b0c:	mov	r1, r5
   15b10:	ldrd	r2, [sp, #40]	; 0x28
   15b14:	bl	1c474 <__assert_fail@plt+0xaf70>
   15b18:	add	r2, r2, r2, lsl #2
   15b1c:	mov	sl, r0
   15b20:	mov	fp, r1
   15b24:	add	r0, r8, r2, lsl #1
   15b28:	mov	r1, r9
   15b2c:	bl	1bfc0 <__assert_fail@plt+0xaabc>
   15b30:	asr	r3, r7, #1
   15b34:	mov	r4, sl
   15b38:	mov	r5, fp
   15b3c:	add	r1, r3, r1, lsl #1
   15b40:	cmp	r9, r1
   15b44:	mov	r8, r0
   15b48:	add	r7, r7, r1
   15b4c:	bhi	15ae4 <__assert_fail@plt+0x45e0>
   15b50:	cmp	r9, r7
   15b54:	movcc	r7, #3
   15b58:	movcs	r7, #2
   15b5c:	b	15aec <__assert_fail@plt+0x45e8>
   15b60:	mov	r0, r9
   15b64:	bl	113c0 <strlen@plt>
   15b68:	sub	r4, r7, fp
   15b6c:	add	r3, sp, #72	; 0x48
   15b70:	mov	r1, fp
   15b74:	mov	r2, r4
   15b78:	mvn	r5, #0
   15b7c:	str	r0, [sp, #16]
   15b80:	mov	r0, r3
   15b84:	mov	r3, #41	; 0x29
   15b88:	bl	112b8 <__memcpy_chk@plt>
   15b8c:	ldr	fp, [sp, #16]
   15b90:	ldrb	r3, [sl]
   15b94:	cmp	r3, #0
   15b98:	beq	15bac <__assert_fail@plt+0x46a8>
   15b9c:	cmp	r3, #255	; 0xff
   15ba0:	movne	r5, r3
   15ba4:	moveq	r5, r4
   15ba8:	add	sl, sl, #1
   15bac:	cmp	r5, r4
   15bb0:	bls	15bcc <__assert_fail@plt+0x46c8>
   15bb4:	sub	fp, r7, r4
   15bb8:	mov	r2, r4
   15bbc:	add	r1, sp, #72	; 0x48
   15bc0:	mov	r0, fp
   15bc4:	bl	11210 <memcpy@plt>
   15bc8:	b	159a4 <__assert_fail@plt+0x44a0>
   15bcc:	sub	r4, r4, r5
   15bd0:	add	r3, sp, #72	; 0x48
   15bd4:	sub	r7, r7, r5
   15bd8:	add	r1, r3, r4
   15bdc:	mov	r0, r7
   15be0:	mov	r2, r5
   15be4:	bl	11210 <memcpy@plt>
   15be8:	cmp	r4, #0
   15bec:	beq	16068 <__assert_fail@plt+0x4b64>
   15bf0:	sub	r7, r7, fp
   15bf4:	mov	r0, r7
   15bf8:	mov	r2, fp
   15bfc:	mov	r1, r9
   15c00:	bl	11210 <memcpy@plt>
   15c04:	b	15b90 <__assert_fail@plt+0x468c>
   15c08:	andeq	r0, r0, r0
   15c0c:	mvnsmi	r0, #0
   15c10:	andeq	r0, r0, r0
   15c14:	eormi	r0, r4, r0
   15c18:	andeq	lr, r2, r8, lsl #30
   15c1c:	muleq	r1, r4, r2
   15c20:	andeq	sp, r1, r4, ror #22
   15c24:	muleq	r1, r8, r2
   15c28:	andeq	lr, r1, r4, ror r2
   15c2c:	andeq	lr, r1, r0, lsr #5
   15c30:	ldrd	r2, [sp, #184]	; 0xb8
   15c34:	cmp	r3, #0
   15c38:	cmpeq	r2, #1
   15c3c:	bls	15ec8 <__assert_fail@plt+0x49c4>
   15c40:	ldr	r1, [sp, #28]
   15c44:	ldrd	r4, [sp, #184]	; 0xb8
   15c48:	mov	r6, #1
   15c4c:	mov	r2, #1
   15c50:	mov	r3, #0
   15c54:	mul	r0, r1, r3
   15c58:	umull	r2, r3, r2, r1
   15c5c:	add	r3, r0, r3
   15c60:	cmp	r5, r3
   15c64:	cmpeq	r4, r2
   15c68:	bls	15c78 <__assert_fail@plt+0x4774>
   15c6c:	add	r6, r6, #1
   15c70:	cmp	r6, #8
   15c74:	bne	15c54 <__assert_fail@plt+0x4750>
   15c78:	tst	r8, #64	; 0x40
   15c7c:	and	r3, r8, #256	; 0x100
   15c80:	beq	15ca0 <__assert_fail@plt+0x479c>
   15c84:	ldr	r1, [sp, #24]
   15c88:	add	r2, r1, #648	; 0x288
   15c8c:	str	r2, [sp, #12]
   15c90:	mov	r2, #32
   15c94:	strb	r2, [r1, #647]	; 0x287
   15c98:	cmp	r6, #0
   15c9c:	beq	16070 <__assert_fail@plt+0x4b6c>
   15ca0:	ldr	r0, [sp, #32]
   15ca4:	cmp	r6, #1
   15ca8:	cmpeq	r0, #0
   15cac:	beq	15eec <__assert_fail@plt+0x49e8>
   15cb0:	ldr	r1, [pc, #-144]	; 15c28 <__assert_fail@plt+0x4724>
   15cb4:	cmp	r3, #0
   15cb8:	ldr	r2, [sp, #12]
   15cbc:	ldrb	r3, [r1, r6]
   15cc0:	strb	r3, [r2], #1
   15cc4:	beq	15f00 <__assert_fail@plt+0x49fc>
   15cc8:	cmp	r0, #0
   15ccc:	movne	r3, #105	; 0x69
   15cd0:	ldrne	r2, [sp, #12]
   15cd4:	strbne	r3, [r2, #1]
   15cd8:	addne	r2, r2, #2
   15cdc:	mov	r3, #66	; 0x42
   15ce0:	strb	r3, [r2], #1
   15ce4:	str	r2, [sp, #12]
   15ce8:	b	159c0 <__assert_fail@plt+0x44bc>
   15cec:	tst	r8, #8
   15cf0:	beq	15d08 <__assert_fail@plt+0x4804>
   15cf4:	ldr	r3, [sp, #24]
   15cf8:	add	r3, r3, r0
   15cfc:	ldrb	r3, [r3, #-1]
   15d00:	cmp	r3, #48	; 0x30
   15d04:	beq	15fc0 <__assert_fail@plt+0x4abc>
   15d08:	sub	r7, r0, fp
   15d0c:	b	15980 <__assert_fail@plt+0x447c>
   15d10:	vmov	r0, r1, d8
   15d14:	bl	1c4c0 <__assert_fail@plt+0xafbc>
   15d18:	mov	r4, r0
   15d1c:	mov	r5, r1
   15d20:	bl	1c32c <__assert_fail@plt+0xae28>
   15d24:	cmp	r6, #0
   15d28:	vmov	d7, r0, r1
   15d2c:	bne	15d4c <__assert_fail@plt+0x4848>
   15d30:	vcmp.f64	d8, d7
   15d34:	vmrs	APSR_nzcv, fpscr
   15d38:	beq	15d4c <__assert_fail@plt+0x4848>
   15d3c:	adds	r0, r4, #1
   15d40:	adc	r1, r5, #0
   15d44:	bl	1c32c <__assert_fail@plt+0xae28>
   15d48:	vmov	d7, r0, r1
   15d4c:	vmov.f64	d8, d7
   15d50:	b	15954 <__assert_fail@plt+0x4450>
   15d54:	mov	r3, #0
   15d58:	mov	ip, r3
   15d5c:	mov	lr, r3
   15d60:	ands	r3, r8, #16
   15d64:	str	r3, [sp, #52]	; 0x34
   15d68:	bne	15aa4 <__assert_fail@plt+0x45a0>
   15d6c:	mvn	r6, #0
   15d70:	ldr	r3, [sp, #16]
   15d74:	cmp	r3, #1
   15d78:	ldrne	r7, [sp, #12]
   15d7c:	beq	15e48 <__assert_fail@plt+0x4944>
   15d80:	ldr	r3, [sp, #16]
   15d84:	cmp	r3, #0
   15d88:	bne	15dc0 <__assert_fail@plt+0x48bc>
   15d8c:	add	r3, lr, ip
   15d90:	cmp	r3, #0
   15d94:	ble	15dc0 <__assert_fail@plt+0x48bc>
   15d98:	ldr	r3, [sp, #52]	; 0x34
   15d9c:	adds	r4, r4, #1
   15da0:	adc	r5, r5, #0
   15da4:	cmp	r3, #0
   15da8:	beq	15dc0 <__assert_fail@plt+0x48bc>
   15dac:	ldr	r2, [sp, #28]
   15db0:	mov	r3, #0
   15db4:	cmp	r3, r5
   15db8:	cmpeq	r2, r4
   15dbc:	beq	15ea4 <__assert_fail@plt+0x49a0>
   15dc0:	mov	fp, r7
   15dc4:	b	15dd0 <__assert_fail@plt+0x48cc>
   15dc8:	mov	r4, r0
   15dcc:	mov	r5, r1
   15dd0:	mov	r2, #10
   15dd4:	mov	r3, #0
   15dd8:	mov	r0, r4
   15ddc:	mov	r1, r5
   15de0:	bl	1c474 <__assert_fail@plt+0xaf70>
   15de4:	mov	r0, r4
   15de8:	mov	r1, r5
   15dec:	mov	r3, #0
   15df0:	add	r2, r2, #48	; 0x30
   15df4:	strb	r2, [fp, #-1]!
   15df8:	mov	r2, #10
   15dfc:	bl	1c474 <__assert_fail@plt+0xaf70>
   15e00:	cmp	r5, #0
   15e04:	cmpeq	r4, #9
   15e08:	bhi	15dc8 <__assert_fail@plt+0x48c4>
   15e0c:	b	1599c <__assert_fail@plt+0x4498>
   15e10:	ldr	r5, [sp, #24]
   15e14:	ldr	r3, [pc, #-496]	; 15c2c <__assert_fail@plt+0x4728>
   15e18:	mvn	r2, #0
   15e1c:	ldr	r1, [sp, #16]
   15e20:	vstr	d9, [sp]
   15e24:	mov	r0, r5
   15e28:	bl	113f0 <__sprintf_chk@plt>
   15e2c:	mov	r0, r5
   15e30:	bl	113c0 <strlen@plt>
   15e34:	cmp	r0, r4
   15e38:	bls	15cec <__assert_fail@plt+0x47e8>
   15e3c:	vldr	d7, [pc, #572]	; 16080 <__assert_fail@plt+0x4b7c>
   15e40:	vmul.f64	d9, d9, d7
   15e44:	b	15904 <__assert_fail@plt+0x4400>
   15e48:	and	r3, r4, #1
   15e4c:	str	r3, [sp, #16]
   15e50:	mov	r3, #0
   15e54:	str	r3, [sp, #20]
   15e58:	ldrd	r2, [sp, #16]
   15e5c:	ldr	r7, [sp, #12]
   15e60:	adds	r2, r2, ip
   15e64:	adc	r3, r3, ip, asr #31
   15e68:	orr	r2, r2, r3
   15e6c:	mov	r3, lr
   15e70:	cmp	r2, #0
   15e74:	addne	r3, r3, #1
   15e78:	cmp	r3, #5
   15e7c:	bgt	15d98 <__assert_fail@plt+0x4894>
   15e80:	b	15dc0 <__assert_fail@plt+0x48bc>
   15e84:	movcs	r3, #2
   15e88:	movcs	ip, r3
   15e8c:	movcc	r3, #3
   15e90:	movcc	ip, r3
   15e94:	b	15a98 <__assert_fail@plt+0x4594>
   15e98:	tst	r8, #64	; 0x40
   15e9c:	beq	15c98 <__assert_fail@plt+0x4794>
   15ea0:	b	15c84 <__assert_fail@plt+0x4780>
   15ea4:	cmp	r6, #8
   15ea8:	beq	15dc0 <__assert_fail@plt+0x48bc>
   15eac:	tst	r8, #8
   15eb0:	add	r6, r6, #1
   15eb4:	beq	16030 <__assert_fail@plt+0x4b2c>
   15eb8:	mov	r3, #49	; 0x31
   15ebc:	strb	r3, [r7, #-1]
   15ec0:	sub	fp, r7, #1
   15ec4:	b	1599c <__assert_fail@plt+0x4498>
   15ec8:	mov	r6, #0
   15ecc:	b	159b4 <__assert_fail@plt+0x44b0>
   15ed0:	mov	lr, r8
   15ed4:	ldr	r9, [sp, #56]	; 0x38
   15ed8:	mov	ip, r7
   15edc:	ldr	fp, [sp, #60]	; 0x3c
   15ee0:	ldr	sl, [sp, #64]	; 0x40
   15ee4:	ldr	r8, [sp, #68]	; 0x44
   15ee8:	b	15d70 <__assert_fail@plt+0x486c>
   15eec:	ldr	r2, [sp, #12]
   15ef0:	cmp	r3, #0
   15ef4:	mov	r3, #107	; 0x6b
   15ef8:	strb	r3, [r2], #1
   15efc:	bne	15cdc <__assert_fail@plt+0x47d8>
   15f00:	str	r2, [sp, #12]
   15f04:	b	159c0 <__assert_fail@plt+0x44bc>
   15f08:	mov	r3, fp
   15f0c:	mov	r2, sl
   15f10:	cmp	r3, #0
   15f14:	cmpeq	r2, #9
   15f18:	mov	lr, r8
   15f1c:	ldr	r9, [sp, #56]	; 0x38
   15f20:	mov	ip, r7
   15f24:	strd	r2, [sp, #40]	; 0x28
   15f28:	ldr	fp, [sp, #60]	; 0x3c
   15f2c:	ldr	sl, [sp, #64]	; 0x40
   15f30:	ldr	r8, [sp, #68]	; 0x44
   15f34:	bhi	15d70 <__assert_fail@plt+0x486c>
   15f38:	ldr	r3, [sp, #16]
   15f3c:	cmp	r3, #1
   15f40:	beq	15fec <__assert_fail@plt+0x4ae8>
   15f44:	ldr	r2, [sp, #16]
   15f48:	adds	r3, r7, #0
   15f4c:	movne	r3, #1
   15f50:	cmp	r2, #0
   15f54:	movne	r3, #0
   15f58:	cmp	r3, #0
   15f5c:	bne	15fd8 <__assert_fail@plt+0x4ad4>
   15f60:	cmp	r0, #0
   15f64:	addne	r3, r0, #48	; 0x30
   15f68:	uxtbne	r3, r3
   15f6c:	bne	15f7c <__assert_fail@plt+0x4a78>
   15f70:	tst	r8, #8
   15f74:	bne	16004 <__assert_fail@plt+0x4b00>
   15f78:	mov	r3, #48	; 0x30
   15f7c:	ldr	r2, [sp, #48]	; 0x30
   15f80:	ldr	r1, [sp, #36]	; 0x24
   15f84:	add	r7, r2, #2
   15f88:	ldr	r2, [sp, #24]
   15f8c:	sub	r7, r7, fp
   15f90:	mov	r0, r7
   15f94:	strb	r3, [r2, #646]	; 0x286
   15f98:	mov	r2, fp
   15f9c:	bl	11210 <memcpy@plt>
   15fa0:	mov	r3, #0
   15fa4:	mov	ip, r3
   15fa8:	ldr	r3, [sp, #16]
   15fac:	cmp	r3, #1
   15fb0:	beq	15dc0 <__assert_fail@plt+0x48bc>
   15fb4:	mov	r3, #0
   15fb8:	mov	lr, r3
   15fbc:	b	15d80 <__assert_fail@plt+0x487c>
   15fc0:	vldr	d7, [pc, #184]	; 16080 <__assert_fail@plt+0x4b7c>
   15fc4:	ldr	r3, [sp, #16]
   15fc8:	cmp	r3, #1
   15fcc:	vmul.f64	d9, d9, d7
   15fd0:	bne	158b0 <__assert_fail@plt+0x43ac>
   15fd4:	b	15904 <__assert_fail@plt+0x4400>
   15fd8:	cmp	r0, #9
   15fdc:	beq	1600c <__assert_fail@plt+0x4b08>
   15fe0:	add	r3, r0, #49	; 0x31
   15fe4:	uxtb	r3, r3
   15fe8:	b	15f7c <__assert_fail@plt+0x4a78>
   15fec:	and	r3, r0, #1
   15ff0:	add	r3, r3, r7
   15ff4:	cmp	r3, #2
   15ff8:	movle	r3, #0
   15ffc:	movgt	r3, #1
   16000:	b	15f58 <__assert_fail@plt+0x4a54>
   16004:	ldr	r7, [sp, #12]
   16008:	b	15fa8 <__assert_fail@plt+0x4aa4>
   1600c:	ldrd	r2, [sp, #40]	; 0x28
   16010:	adds	r4, r2, #1
   16014:	adc	r5, r3, #0
   16018:	cmp	r5, #0
   1601c:	cmpeq	r4, #10
   16020:	beq	16054 <__assert_fail@plt+0x4b50>
   16024:	mov	r3, #0
   16028:	mov	ip, r3
   1602c:	b	15f70 <__assert_fail@plt+0x4a6c>
   16030:	mov	r2, #48	; 0x30
   16034:	mvn	r3, fp
   16038:	strb	r2, [r7, #-1]
   1603c:	add	r7, r7, r3
   16040:	ldr	r1, [sp, #36]	; 0x24
   16044:	mov	r2, fp
   16048:	mov	r0, r7
   1604c:	bl	11210 <memcpy@plt>
   16050:	b	15eb8 <__assert_fail@plt+0x49b4>
   16054:	mov	r3, #0
   16058:	ldr	r7, [sp, #12]
   1605c:	mov	ip, r3
   16060:	b	15fa8 <__assert_fail@plt+0x4aa4>
   16064:	bl	11258 <__stack_chk_fail@plt>
   16068:	mov	fp, r7
   1606c:	b	159a4 <__assert_fail@plt+0x44a0>
   16070:	cmp	r3, #0
   16074:	ldrne	r2, [sp, #12]
   16078:	bne	15cdc <__assert_fail@plt+0x47d8>
   1607c:	b	159c0 <__assert_fail@plt+0x44bc>
   16080:	andeq	r0, r0, r0
   16084:	eormi	r0, r4, r0
   16088:	push	{r4, r5, r6, r7, r8, r9, lr}
   1608c:	sub	sp, sp, #20
   16090:	ldr	r6, [pc, #424]	; 16240 <__assert_fail@plt+0x4d3c>
   16094:	subs	r4, r0, #0
   16098:	mov	r9, r1
   1609c:	ldr	r3, [r6]
   160a0:	mov	r7, r2
   160a4:	str	r3, [sp, #12]
   160a8:	beq	161b8 <__assert_fail@plt+0x4cb4>
   160ac:	ldrb	r3, [r4]
   160b0:	ldr	r5, [pc, #396]	; 16244 <__assert_fail@plt+0x4d40>
   160b4:	cmp	r3, #39	; 0x27
   160b8:	addeq	r4, r4, #1
   160bc:	mov	r3, #4
   160c0:	add	r2, r5, #12
   160c4:	add	r1, r5, #20
   160c8:	mov	r0, r4
   160cc:	moveq	r8, #4
   160d0:	movne	r8, #0
   160d4:	bl	19e1c <__assert_fail@plt+0x8918>
   160d8:	cmp	r0, #0
   160dc:	blt	16118 <__assert_fail@plt+0x4c14>
   160e0:	add	r5, r5, r0, lsl #2
   160e4:	mov	r2, #1
   160e8:	ldr	r1, [r5, #12]
   160ec:	mov	r3, #0
   160f0:	mov	r0, #0
   160f4:	orr	r8, r8, r1
   160f8:	strd	r2, [r7]
   160fc:	str	r8, [r9]
   16100:	ldr	r2, [sp, #12]
   16104:	ldr	r3, [r6]
   16108:	cmp	r2, r3
   1610c:	bne	1623c <__assert_fail@plt+0x4d38>
   16110:	add	sp, sp, #20
   16114:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16118:	ldr	r2, [pc, #296]	; 16248 <__assert_fail@plt+0x4d44>
   1611c:	mov	r3, r7
   16120:	str	r2, [sp]
   16124:	add	r1, sp, #8
   16128:	mov	r2, #0
   1612c:	mov	r0, r4
   16130:	bl	18e70 <__assert_fail@plt+0x796c>
   16134:	cmp	r0, #0
   16138:	bne	16180 <__assert_fail@plt+0x4c7c>
   1613c:	ldrb	r3, [r4]
   16140:	sub	r3, r3, #48	; 0x30
   16144:	cmp	r3, #9
   16148:	bls	16174 <__assert_fail@plt+0x4c70>
   1614c:	ldr	r2, [sp, #8]
   16150:	cmp	r4, r2
   16154:	bne	16164 <__assert_fail@plt+0x4c60>
   16158:	b	16210 <__assert_fail@plt+0x4d0c>
   1615c:	cmp	r2, r4
   16160:	beq	16210 <__assert_fail@plt+0x4d0c>
   16164:	ldrb	r3, [r4, #1]!
   16168:	sub	r3, r3, #48	; 0x30
   1616c:	cmp	r3, #9
   16170:	bhi	1615c <__assert_fail@plt+0x4c58>
   16174:	ldrd	r2, [r7]
   16178:	str	r8, [r9]
   1617c:	b	1618c <__assert_fail@plt+0x4c88>
   16180:	mov	r3, #0
   16184:	str	r3, [r9]
   16188:	ldrd	r2, [r7]
   1618c:	orrs	r3, r2, r3
   16190:	bne	16100 <__assert_fail@plt+0x4bfc>
   16194:	ldr	r0, [pc, #176]	; 1624c <__assert_fail@plt+0x4d48>
   16198:	bl	11330 <getenv@plt>
   1619c:	mov	r3, #0
   161a0:	cmp	r0, #0
   161a4:	moveq	r2, #1024	; 0x400
   161a8:	movne	r2, #512	; 0x200
   161ac:	mov	r0, #4
   161b0:	strd	r2, [r7]
   161b4:	b	16100 <__assert_fail@plt+0x4bfc>
   161b8:	ldr	r0, [pc, #144]	; 16250 <__assert_fail@plt+0x4d4c>
   161bc:	bl	11330 <getenv@plt>
   161c0:	subs	r4, r0, #0
   161c4:	bne	160ac <__assert_fail@plt+0x4ba8>
   161c8:	ldr	r0, [pc, #132]	; 16254 <__assert_fail@plt+0x4d50>
   161cc:	bl	11330 <getenv@plt>
   161d0:	subs	r4, r0, #0
   161d4:	bne	160ac <__assert_fail@plt+0x4ba8>
   161d8:	ldr	r0, [pc, #108]	; 1624c <__assert_fail@plt+0x4d48>
   161dc:	bl	11330 <getenv@plt>
   161e0:	subs	r3, r0, #0
   161e4:	moveq	r4, #1024	; 0x400
   161e8:	moveq	r5, #0
   161ec:	movne	r2, #512	; 0x200
   161f0:	movne	r3, #0
   161f4:	strdeq	r4, [r7]
   161f8:	strdne	r2, [r7]
   161fc:	moveq	r0, r3
   16200:	streq	r3, [r9]
   16204:	movne	r0, r4
   16208:	strne	r4, [r9]
   1620c:	b	16100 <__assert_fail@plt+0x4bfc>
   16210:	ldrb	r3, [r2, #-1]
   16214:	cmp	r3, #66	; 0x42
   16218:	orrne	r8, r8, #128	; 0x80
   1621c:	beq	16228 <__assert_fail@plt+0x4d24>
   16220:	orr	r8, r8, #32
   16224:	b	16174 <__assert_fail@plt+0x4c70>
   16228:	ldrb	r3, [r2, #-2]
   1622c:	orr	r8, r8, #384	; 0x180
   16230:	cmp	r3, #105	; 0x69
   16234:	bne	16174 <__assert_fail@plt+0x4c70>
   16238:	b	16220 <__assert_fail@plt+0x4d1c>
   1623c:	bl	11258 <__stack_chk_fail@plt>
   16240:	andeq	lr, r2, r8, lsl #30
   16244:	andeq	lr, r1, r4, ror r2
   16248:	andeq	lr, r1, r0, asr #5
   1624c:	andeq	sp, r1, r8, ror #27
   16250:	andeq	lr, r1, r8, lsr #5
   16254:			; <UNDEFINED> instruction: 0x0001e2b4
   16258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1625c:	sub	sp, sp, #20
   16260:	ldr	r5, [pc, #184]	; 16320 <__assert_fail@plt+0x4e1c>
   16264:	ldr	r4, [pc, #184]	; 16324 <__assert_fail@plt+0x4e20>
   16268:	mov	r6, #0
   1626c:	ldr	ip, [r5]
   16270:	cmp	r0, #2
   16274:	ldr	r7, [r4]
   16278:	str	ip, [sp, #12]
   1627c:	ldr	sl, [sp, #56]	; 0x38
   16280:	str	r6, [r4]
   16284:	ldr	fp, [sp, #60]	; 0x3c
   16288:	beq	162b4 <__assert_fail@plt+0x4db0>
   1628c:	ldr	r0, [sp, #12]
   16290:	ldr	r3, [pc, #144]	; 16328 <__assert_fail@plt+0x4e24>
   16294:	ldr	r1, [r5]
   16298:	mov	r2, #0
   1629c:	cmp	r0, r1
   162a0:	str	r7, [r4]
   162a4:	str	r2, [r3]
   162a8:	bne	1631c <__assert_fail@plt+0x4e18>
   162ac:	add	sp, sp, #20
   162b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162b4:	mov	r8, r2
   162b8:	mov	r9, r3
   162bc:	str	r6, [sp]
   162c0:	ldr	r3, [pc, #100]	; 1632c <__assert_fail@plt+0x4e28>
   162c4:	ldr	r2, [pc, #100]	; 16330 <__assert_fail@plt+0x4e2c>
   162c8:	bl	1139c <getopt_long@plt>
   162cc:	cmn	r0, #1
   162d0:	beq	1628c <__assert_fail@plt+0x4d88>
   162d4:	cmp	r0, #104	; 0x68
   162d8:	beq	16310 <__assert_fail@plt+0x4e0c>
   162dc:	cmp	r0, #118	; 0x76
   162e0:	bne	1628c <__assert_fail@plt+0x4d88>
   162e4:	ldr	r0, [pc, #72]	; 16334 <__assert_fail@plt+0x4e30>
   162e8:	add	ip, sp, #64	; 0x40
   162ec:	mov	r3, sl
   162f0:	ldr	r0, [r0]
   162f4:	mov	r2, r9
   162f8:	mov	r1, r8
   162fc:	str	ip, [sp]
   16300:	str	ip, [sp, #8]
   16304:	bl	18a78 <__assert_fail@plt+0x7574>
   16308:	mov	r0, r6
   1630c:	bl	113b4 <exit@plt>
   16310:	mov	r0, r6
   16314:	blx	fp
   16318:	b	1628c <__assert_fail@plt+0x4d88>
   1631c:	bl	11258 <__stack_chk_fail@plt>
   16320:	andeq	lr, r2, r8, lsl #30
   16324:	ldrdeq	pc, [r2], -r8
   16328:	andeq	pc, r2, r8, asr #3
   1632c:	andeq	lr, r1, r8, ror #5
   16330:	andeq	lr, r1, r8, lsl r3
   16334:	ldrdeq	pc, [r2], -r4
   16338:	push	{r4, r5, r6, lr}
   1633c:	subs	r4, r0, #0
   16340:	beq	163b4 <__assert_fail@plt+0x4eb0>
   16344:	mov	r1, #47	; 0x2f
   16348:	bl	1148c <strrchr@plt>
   1634c:	subs	r5, r0, #0
   16350:	beq	163a0 <__assert_fail@plt+0x4e9c>
   16354:	add	r6, r5, #1
   16358:	sub	r3, r6, r4
   1635c:	cmp	r3, #6
   16360:	ble	163a0 <__assert_fail@plt+0x4e9c>
   16364:	mov	r2, #7
   16368:	ldr	r1, [pc, #96]	; 163d0 <__assert_fail@plt+0x4ecc>
   1636c:	sub	r0, r5, #6
   16370:	bl	114bc <strncmp@plt>
   16374:	cmp	r0, #0
   16378:	bne	163a0 <__assert_fail@plt+0x4e9c>
   1637c:	mov	r2, #3
   16380:	ldr	r1, [pc, #76]	; 163d4 <__assert_fail@plt+0x4ed0>
   16384:	mov	r0, r6
   16388:	bl	114bc <strncmp@plt>
   1638c:	cmp	r0, #0
   16390:	movne	r4, r6
   16394:	ldreq	r3, [pc, #60]	; 163d8 <__assert_fail@plt+0x4ed4>
   16398:	addeq	r4, r5, #4
   1639c:	streq	r4, [r3]
   163a0:	ldr	r2, [pc, #52]	; 163dc <__assert_fail@plt+0x4ed8>
   163a4:	ldr	r3, [pc, #52]	; 163e0 <__assert_fail@plt+0x4edc>
   163a8:	str	r4, [r2]
   163ac:	str	r4, [r3]
   163b0:	pop	{r4, r5, r6, pc}
   163b4:	ldr	r3, [pc, #40]	; 163e4 <__assert_fail@plt+0x4ee0>
   163b8:	mov	r2, #55	; 0x37
   163bc:	mov	r1, #1
   163c0:	ldr	r3, [r3]
   163c4:	ldr	r0, [pc, #28]	; 163e8 <__assert_fail@plt+0x4ee4>
   163c8:	bl	112c4 <fwrite@plt>
   163cc:	bl	114d4 <abort@plt>
   163d0:	andeq	lr, r1, r4, ror #6
   163d4:	andeq	lr, r1, ip, ror #6
   163d8:	andeq	pc, r2, r0, asr #3
   163dc:	andeq	pc, r2, r4, asr r4	; <UNPREDICTABLE>
   163e0:	andeq	pc, r2, r4, asr #3
   163e4:	ldrdeq	pc, [r2], -r0
   163e8:	andeq	lr, r1, ip, lsr #6
   163ec:	push	{r4, lr}
   163f0:	mov	r2, #48	; 0x30
   163f4:	mov	r4, r1
   163f8:	mov	r1, #0
   163fc:	bl	11408 <memset@plt>
   16400:	cmp	r4, #10
   16404:	beq	16410 <__assert_fail@plt+0x4f0c>
   16408:	str	r4, [r0]
   1640c:	pop	{r4, pc}
   16410:	bl	114d4 <abort@plt>
   16414:	push	{r4, r5, r6, lr}
   16418:	mov	r2, #5
   1641c:	mov	r5, r0
   16420:	mov	r6, r1
   16424:	mov	r1, r0
   16428:	mov	r0, #0
   1642c:	bl	1124c <dcgettext@plt>
   16430:	cmp	r5, r0
   16434:	mov	r4, r0
   16438:	beq	16444 <__assert_fail@plt+0x4f40>
   1643c:	mov	r0, r4
   16440:	pop	{r4, r5, r6, pc}
   16444:	bl	1a184 <__assert_fail@plt+0x8c80>
   16448:	ldrb	r3, [r0]
   1644c:	bic	r3, r3, #32
   16450:	cmp	r3, #85	; 0x55
   16454:	bne	164b4 <__assert_fail@plt+0x4fb0>
   16458:	ldrb	r3, [r0, #1]
   1645c:	bic	r3, r3, #32
   16460:	cmp	r3, #84	; 0x54
   16464:	bne	1652c <__assert_fail@plt+0x5028>
   16468:	ldrb	r3, [r0, #2]
   1646c:	bic	r3, r3, #32
   16470:	cmp	r3, #70	; 0x46
   16474:	bne	1652c <__assert_fail@plt+0x5028>
   16478:	ldrb	r3, [r0, #3]
   1647c:	cmp	r3, #45	; 0x2d
   16480:	bne	1652c <__assert_fail@plt+0x5028>
   16484:	ldrb	r3, [r0, #4]
   16488:	cmp	r3, #56	; 0x38
   1648c:	bne	1652c <__assert_fail@plt+0x5028>
   16490:	ldrb	r3, [r0, #5]
   16494:	cmp	r3, #0
   16498:	bne	1652c <__assert_fail@plt+0x5028>
   1649c:	ldrb	r2, [r4]
   164a0:	ldr	r3, [pc, #156]	; 16544 <__assert_fail@plt+0x5040>
   164a4:	ldr	r4, [pc, #156]	; 16548 <__assert_fail@plt+0x5044>
   164a8:	cmp	r2, #96	; 0x60
   164ac:	movne	r4, r3
   164b0:	b	1643c <__assert_fail@plt+0x4f38>
   164b4:	cmp	r3, #71	; 0x47
   164b8:	bne	1652c <__assert_fail@plt+0x5028>
   164bc:	ldrb	r3, [r0, #1]
   164c0:	bic	r3, r3, #32
   164c4:	cmp	r3, #66	; 0x42
   164c8:	bne	1652c <__assert_fail@plt+0x5028>
   164cc:	ldrb	r3, [r0, #2]
   164d0:	cmp	r3, #49	; 0x31
   164d4:	bne	1652c <__assert_fail@plt+0x5028>
   164d8:	ldrb	r3, [r0, #3]
   164dc:	cmp	r3, #56	; 0x38
   164e0:	bne	1652c <__assert_fail@plt+0x5028>
   164e4:	ldrb	r3, [r0, #4]
   164e8:	cmp	r3, #48	; 0x30
   164ec:	bne	1652c <__assert_fail@plt+0x5028>
   164f0:	ldrb	r3, [r0, #5]
   164f4:	cmp	r3, #51	; 0x33
   164f8:	bne	1652c <__assert_fail@plt+0x5028>
   164fc:	ldrb	r3, [r0, #6]
   16500:	cmp	r3, #48	; 0x30
   16504:	bne	1652c <__assert_fail@plt+0x5028>
   16508:	ldrb	r3, [r0, #7]
   1650c:	cmp	r3, #0
   16510:	bne	1652c <__assert_fail@plt+0x5028>
   16514:	ldrb	r2, [r4]
   16518:	ldr	r3, [pc, #44]	; 1654c <__assert_fail@plt+0x5048>
   1651c:	ldr	r4, [pc, #44]	; 16550 <__assert_fail@plt+0x504c>
   16520:	cmp	r2, #96	; 0x60
   16524:	movne	r4, r3
   16528:	b	1643c <__assert_fail@plt+0x4f38>
   1652c:	ldr	r3, [pc, #32]	; 16554 <__assert_fail@plt+0x5050>
   16530:	ldr	r4, [pc, #32]	; 16558 <__assert_fail@plt+0x5054>
   16534:	cmp	r6, #9
   16538:	movne	r4, r3
   1653c:	mov	r0, r4
   16540:	pop	{r4, r5, r6, pc}
   16544:	andeq	lr, r1, r8, asr #7
   16548:	ldrdeq	lr, [r1], -r4
   1654c:	andeq	lr, r1, ip, asr #7
   16550:	ldrdeq	lr, [r1], -r0
   16554:	ldrdeq	lr, [r1], -r8
   16558:	andeq	lr, r1, r4, asr #7
   1655c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16560:	sub	sp, sp, #124	; 0x7c
   16564:	ldr	ip, [pc, #3576]	; 17364 <__assert_fail@plt+0x5e60>
   16568:	str	r3, [sp, #24]
   1656c:	ldr	r3, [sp, #168]	; 0xa8
   16570:	ldr	ip, [ip]
   16574:	str	r3, [sp, #56]	; 0x38
   16578:	ldr	r3, [sp, #172]	; 0xac
   1657c:	ldr	r8, [sp, #160]	; 0xa0
   16580:	str	r3, [sp, #80]	; 0x50
   16584:	ldr	r3, [sp, #176]	; 0xb0
   16588:	mov	fp, r0
   1658c:	str	r3, [sp, #76]	; 0x4c
   16590:	mov	sl, r1
   16594:	str	r2, [sp, #36]	; 0x24
   16598:	str	ip, [sp, #116]	; 0x74
   1659c:	bl	112e8 <__ctype_get_mb_cur_max@plt>
   165a0:	ldr	r3, [sp, #164]	; 0xa4
   165a4:	ands	r4, r3, #2
   165a8:	movne	r3, #1
   165ac:	moveq	r3, #0
   165b0:	str	r3, [sp, #32]
   165b4:	str	r0, [sp, #64]	; 0x40
   165b8:	cmp	r8, #10
   165bc:	ldrls	pc, [pc, r8, lsl #2]
   165c0:	b	17d70 <__assert_fail@plt+0x686c>
   165c4:			; <UNDEFINED> instruction: 0x000169b8
   165c8:	andeq	r6, r1, r0, asr sl
   165cc:	andeq	r7, r1, r0, asr r0
   165d0:	andeq	r6, r1, r0, ror sl
   165d4:	andeq	r6, r1, r4, lsr #18
   165d8:	andeq	r6, r1, ip, ror #18
   165dc:	andeq	r6, r1, r8, ror #19
   165e0:	andeq	r6, r1, r0, lsr #20
   165e4:	strdeq	r6, [r1], -r0
   165e8:	strdeq	r6, [r1], -r0
   165ec:	strdeq	r6, [r1], -r0
   165f0:	cmp	r8, #10
   165f4:	beq	16618 <__assert_fail@plt+0x5114>
   165f8:	mov	r1, r8
   165fc:	ldr	r0, [pc, #3428]	; 17368 <__assert_fail@plt+0x5e64>
   16600:	bl	16414 <__assert_fail@plt+0x4f10>
   16604:	mov	r1, r8
   16608:	str	r0, [sp, #80]	; 0x50
   1660c:	ldr	r0, [pc, #3420]	; 17370 <__assert_fail@plt+0x5e6c>
   16610:	bl	16414 <__assert_fail@plt+0x4f10>
   16614:	str	r0, [sp, #76]	; 0x4c
   16618:	cmp	r4, #0
   1661c:	movne	r4, #0
   16620:	beq	17a30 <__assert_fail@plt+0x652c>
   16624:	ldr	r7, [sp, #76]	; 0x4c
   16628:	mov	r5, #0
   1662c:	mov	r6, #1
   16630:	mov	r0, r7
   16634:	str	r6, [sp, #40]	; 0x28
   16638:	str	r5, [sp, #68]	; 0x44
   1663c:	bl	113c0 <strlen@plt>
   16640:	str	r6, [sp, #28]
   16644:	str	r5, [sp, #44]	; 0x2c
   16648:	str	r5, [sp, #72]	; 0x48
   1664c:	str	r7, [sp, #60]	; 0x3c
   16650:	str	r0, [sp, #52]	; 0x34
   16654:	str	r8, [sp, #160]	; 0xa0
   16658:	mov	r8, fp
   1665c:	ldr	fp, [sp, #160]	; 0xa0
   16660:	mov	r9, #0
   16664:	ldr	r3, [sp, #24]
   16668:	cmn	r3, #1
   1666c:	beq	16bd4 <__assert_fail@plt+0x56d0>
   16670:	ldr	r3, [sp, #24]
   16674:	subs	r6, r3, r9
   16678:	movne	r6, #1
   1667c:	cmp	r6, #0
   16680:	beq	16bec <__assert_fail@plt+0x56e8>
   16684:	ldr	r7, [sp, #28]
   16688:	ldr	r0, [sp, #36]	; 0x24
   1668c:	cmp	fp, #2
   16690:	moveq	r7, #0
   16694:	andne	r7, r7, #1
   16698:	add	r3, r0, r9
   1669c:	cmp	r7, #0
   166a0:	str	r3, [sp, #48]	; 0x30
   166a4:	beq	17090 <__assert_fail@plt+0x5b8c>
   166a8:	ldr	r2, [sp, #52]	; 0x34
   166ac:	cmp	r2, #0
   166b0:	beq	17374 <__assert_fail@plt+0x5e70>
   166b4:	ldr	r1, [sp, #24]
   166b8:	cmp	r2, #1
   166bc:	mov	r3, r2
   166c0:	movls	r3, #0
   166c4:	movhi	r3, #1
   166c8:	cmn	r1, #1
   166cc:	movne	r3, #0
   166d0:	cmp	r3, #0
   166d4:	add	r5, r9, r2
   166d8:	beq	166e4 <__assert_fail@plt+0x51e0>
   166dc:	bl	113c0 <strlen@plt>
   166e0:	str	r0, [sp, #24]
   166e4:	ldr	r3, [sp, #24]
   166e8:	cmp	r5, r3
   166ec:	bhi	17374 <__assert_fail@plt+0x5e70>
   166f0:	ldr	r2, [sp, #52]	; 0x34
   166f4:	ldr	r1, [sp, #60]	; 0x3c
   166f8:	ldr	r0, [sp, #48]	; 0x30
   166fc:	bl	11240 <memcmp@plt>
   16700:	cmp	r0, #0
   16704:	bne	17374 <__assert_fail@plt+0x5e70>
   16708:	ldr	r3, [sp, #32]
   1670c:	cmp	r3, #0
   16710:	bne	17c30 <__assert_fail@plt+0x672c>
   16714:	ldr	r3, [sp, #48]	; 0x30
   16718:	ldrb	r5, [r3]
   1671c:	cmp	r5, #126	; 0x7e
   16720:	ldrls	pc, [pc, r5, lsl #2]
   16724:	b	16ff4 <__assert_fail@plt+0x5af0>
   16728:	andeq	r6, r1, r0, ror #29
   1672c:	strdeq	r6, [r1], -r4
   16730:	strdeq	r6, [r1], -r4
   16734:	strdeq	r6, [r1], -r4
   16738:	strdeq	r6, [r1], -r4
   1673c:	strdeq	r6, [r1], -r4
   16740:	strdeq	r6, [r1], -r4
   16744:	andeq	r6, r1, ip, lsr #31
   16748:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1674c:	muleq	r1, ip, lr
   16750:	andeq	r6, r1, r4, ror #28
   16754:			; <UNDEFINED> instruction: 0x00016ebc
   16758:	andeq	r6, r1, r4, lsr #29
   1675c:	ldrdeq	r6, [r1], -r4
   16760:	strdeq	r6, [r1], -r4
   16764:	strdeq	r6, [r1], -r4
   16768:	strdeq	r6, [r1], -r4
   1676c:	strdeq	r6, [r1], -r4
   16770:	strdeq	r6, [r1], -r4
   16774:	strdeq	r6, [r1], -r4
   16778:	strdeq	r6, [r1], -r4
   1677c:	strdeq	r6, [r1], -r4
   16780:	strdeq	r6, [r1], -r4
   16784:	strdeq	r6, [r1], -r4
   16788:	strdeq	r6, [r1], -r4
   1678c:	strdeq	r6, [r1], -r4
   16790:	strdeq	r6, [r1], -r4
   16794:	strdeq	r6, [r1], -r4
   16798:	strdeq	r6, [r1], -r4
   1679c:	strdeq	r6, [r1], -r4
   167a0:	strdeq	r6, [r1], -r4
   167a4:	strdeq	r6, [r1], -r4
   167a8:			; <UNDEFINED> instruction: 0x00016fb4
   167ac:	andeq	r6, r1, r8, asr #29
   167b0:	andeq	r6, r1, r8, asr #29
   167b4:	andeq	r6, r1, ip, asr #31
   167b8:	andeq	r6, r1, r8, asr #29
   167bc:	andeq	r6, r1, r8, ror #31
   167c0:	andeq	r6, r1, r8, asr #29
   167c4:	andeq	r6, r1, r8, lsl #26
   167c8:	andeq	r6, r1, r8, asr #29
   167cc:	andeq	r6, r1, r8, asr #29
   167d0:	andeq	r6, r1, r8, asr #29
   167d4:	andeq	r6, r1, r8, ror #31
   167d8:	andeq	r6, r1, r8, ror #31
   167dc:	andeq	r6, r1, r8, ror #31
   167e0:	andeq	r6, r1, r8, ror #31
   167e4:	andeq	r6, r1, r8, ror #31
   167e8:	andeq	r6, r1, r8, ror #31
   167ec:	andeq	r6, r1, r8, ror #31
   167f0:	andeq	r6, r1, r8, ror #31
   167f4:	andeq	r6, r1, r8, ror #31
   167f8:	andeq	r6, r1, r8, ror #31
   167fc:	andeq	r6, r1, r8, ror #31
   16800:	andeq	r6, r1, r8, ror #31
   16804:	andeq	r6, r1, r8, ror #31
   16808:	andeq	r6, r1, r8, ror #31
   1680c:	andeq	r6, r1, r8, ror #31
   16810:	andeq	r6, r1, r8, ror #31
   16814:	andeq	r6, r1, r8, asr #29
   16818:	andeq	r6, r1, r8, asr #29
   1681c:	andeq	r6, r1, r8, asr #29
   16820:	andeq	r6, r1, r8, asr #29
   16824:	ldrdeq	r6, [r1], -ip
   16828:	strdeq	r6, [r1], -r4
   1682c:	andeq	r6, r1, r8, ror #31
   16830:	andeq	r6, r1, r8, ror #31
   16834:	andeq	r6, r1, r8, ror #31
   16838:	andeq	r6, r1, r8, ror #31
   1683c:	andeq	r6, r1, r8, ror #31
   16840:	andeq	r6, r1, r8, ror #31
   16844:	andeq	r6, r1, r8, ror #31
   16848:	andeq	r6, r1, r8, ror #31
   1684c:	andeq	r6, r1, r8, ror #31
   16850:	andeq	r6, r1, r8, ror #31
   16854:	andeq	r6, r1, r8, ror #31
   16858:	andeq	r6, r1, r8, ror #31
   1685c:	andeq	r6, r1, r8, ror #31
   16860:	andeq	r6, r1, r8, ror #31
   16864:	andeq	r6, r1, r8, ror #31
   16868:	andeq	r6, r1, r8, ror #31
   1686c:	andeq	r6, r1, r8, ror #31
   16870:	andeq	r6, r1, r8, ror #31
   16874:	andeq	r6, r1, r8, ror #31
   16878:	andeq	r6, r1, r8, ror #31
   1687c:	andeq	r6, r1, r8, ror #31
   16880:	andeq	r6, r1, r8, ror #31
   16884:	andeq	r6, r1, r8, ror #31
   16888:	andeq	r6, r1, r8, ror #31
   1688c:	andeq	r6, r1, r8, ror #31
   16890:	andeq	r6, r1, r8, ror #31
   16894:	andeq	r6, r1, r8, asr #29
   16898:	muleq	r1, r4, ip
   1689c:	andeq	r6, r1, r8, ror #31
   168a0:	andeq	r6, r1, r8, asr #29
   168a4:	andeq	r6, r1, r8, ror #31
   168a8:	andeq	r6, r1, r8, asr #29
   168ac:	andeq	r6, r1, r8, ror #31
   168b0:	andeq	r6, r1, r8, ror #31
   168b4:	andeq	r6, r1, r8, ror #31
   168b8:	andeq	r6, r1, r8, ror #31
   168bc:	andeq	r6, r1, r8, ror #31
   168c0:	andeq	r6, r1, r8, ror #31
   168c4:	andeq	r6, r1, r8, ror #31
   168c8:	andeq	r6, r1, r8, ror #31
   168cc:	andeq	r6, r1, r8, ror #31
   168d0:	andeq	r6, r1, r8, ror #31
   168d4:	andeq	r6, r1, r8, ror #31
   168d8:	andeq	r6, r1, r8, ror #31
   168dc:	andeq	r6, r1, r8, ror #31
   168e0:	andeq	r6, r1, r8, ror #31
   168e4:	andeq	r6, r1, r8, ror #31
   168e8:	andeq	r6, r1, r8, ror #31
   168ec:	andeq	r6, r1, r8, ror #31
   168f0:	andeq	r6, r1, r8, ror #31
   168f4:	andeq	r6, r1, r8, ror #31
   168f8:	andeq	r6, r1, r8, ror #31
   168fc:	andeq	r6, r1, r8, ror #31
   16900:	andeq	r6, r1, r8, ror #31
   16904:	andeq	r6, r1, r8, ror #31
   16908:	andeq	r6, r1, r8, ror #31
   1690c:	andeq	r6, r1, r8, ror #31
   16910:	andeq	r6, r1, r8, ror #31
   16914:	andeq	r6, r1, ip, lsr #21
   16918:	andeq	r6, r1, r8, asr #29
   1691c:	andeq	r6, r1, ip, lsr #21
   16920:	andeq	r6, r1, ip, asr #31
   16924:	cmp	r4, #0
   16928:	moveq	r3, #1
   1692c:	streq	r3, [sp, #28]
   16930:	beq	1705c <__assert_fail@plt+0x5b58>
   16934:	mov	r3, #0
   16938:	mov	r4, r3
   1693c:	mov	r2, #1
   16940:	str	r2, [sp, #40]	; 0x28
   16944:	str	r3, [sp, #68]	; 0x44
   16948:	str	r2, [sp, #32]
   1694c:	str	r2, [sp, #52]	; 0x34
   16950:	ldr	r3, [pc, #2584]	; 17370 <__assert_fail@plt+0x5e6c>
   16954:	str	r4, [sp, #44]	; 0x2c
   16958:	str	r4, [sp, #72]	; 0x48
   1695c:	str	r4, [sp, #28]
   16960:	str	r3, [sp, #60]	; 0x3c
   16964:	mov	r8, #2
   16968:	b	16654 <__assert_fail@plt+0x5150>
   1696c:	cmp	r4, #0
   16970:	bne	17bfc <__assert_fail@plt+0x66f8>
   16974:	cmp	sl, #0
   16978:	beq	179bc <__assert_fail@plt+0x64b8>
   1697c:	mov	r3, #34	; 0x22
   16980:	strb	r3, [fp]
   16984:	ldr	r3, [pc, #2528]	; 1736c <__assert_fail@plt+0x5e68>
   16988:	mov	r1, r4
   1698c:	mov	r2, #1
   16990:	str	r4, [sp, #68]	; 0x44
   16994:	str	r2, [sp, #40]	; 0x28
   16998:	mov	r4, r2
   1699c:	str	r1, [sp, #44]	; 0x2c
   169a0:	str	r1, [sp, #72]	; 0x48
   169a4:	str	r1, [sp, #32]
   169a8:	str	r2, [sp, #28]
   169ac:	str	r2, [sp, #52]	; 0x34
   169b0:	str	r3, [sp, #60]	; 0x3c
   169b4:	b	16654 <__assert_fail@plt+0x5150>
   169b8:	mov	r3, #0
   169bc:	str	r3, [sp, #68]	; 0x44
   169c0:	str	r3, [sp, #44]	; 0x2c
   169c4:	str	r3, [sp, #32]
   169c8:	str	r3, [sp, #28]
   169cc:	str	r3, [sp, #60]	; 0x3c
   169d0:	mov	r3, #1
   169d4:	str	r8, [sp, #72]	; 0x48
   169d8:	str	r8, [sp, #52]	; 0x34
   169dc:	mov	r4, r8
   169e0:	str	r3, [sp, #40]	; 0x28
   169e4:	b	16654 <__assert_fail@plt+0x5150>
   169e8:	mov	r3, #1
   169ec:	str	r3, [sp, #40]	; 0x28
   169f0:	str	r3, [sp, #32]
   169f4:	str	r3, [sp, #28]
   169f8:	str	r3, [sp, #52]	; 0x34
   169fc:	ldr	r3, [pc, #2408]	; 1736c <__assert_fail@plt+0x5e68>
   16a00:	mov	r2, #0
   16a04:	mov	r4, r2
   16a08:	str	r2, [sp, #68]	; 0x44
   16a0c:	str	r2, [sp, #44]	; 0x2c
   16a10:	str	r2, [sp, #72]	; 0x48
   16a14:	str	r3, [sp, #60]	; 0x3c
   16a18:	mov	r8, #5
   16a1c:	b	16654 <__assert_fail@plt+0x5150>
   16a20:	mov	r3, #0
   16a24:	mov	r2, #1
   16a28:	str	r2, [sp, #40]	; 0x28
   16a2c:	mov	r4, r3
   16a30:	str	r3, [sp, #68]	; 0x44
   16a34:	str	r2, [sp, #28]
   16a38:	str	r3, [sp, #44]	; 0x2c
   16a3c:	str	r3, [sp, #72]	; 0x48
   16a40:	str	r3, [sp, #32]
   16a44:	str	r3, [sp, #52]	; 0x34
   16a48:	str	r3, [sp, #60]	; 0x3c
   16a4c:	b	16654 <__assert_fail@plt+0x5150>
   16a50:	mov	r2, #1
   16a54:	mov	r3, #0
   16a58:	str	r2, [sp, #40]	; 0x28
   16a5c:	mov	r4, r3
   16a60:	str	r3, [sp, #68]	; 0x44
   16a64:	str	r8, [sp, #52]	; 0x34
   16a68:	str	r2, [sp, #32]
   16a6c:	b	16950 <__assert_fail@plt+0x544c>
   16a70:	mov	r3, #1
   16a74:	str	r3, [sp, #40]	; 0x28
   16a78:	str	r3, [sp, #32]
   16a7c:	str	r3, [sp, #28]
   16a80:	str	r3, [sp, #52]	; 0x34
   16a84:	ldr	r3, [pc, #2276]	; 17370 <__assert_fail@plt+0x5e6c>
   16a88:	mov	r2, #0
   16a8c:	mov	r4, r2
   16a90:	str	r2, [sp, #68]	; 0x44
   16a94:	str	r2, [sp, #44]	; 0x2c
   16a98:	str	r2, [sp, #72]	; 0x48
   16a9c:	str	r3, [sp, #60]	; 0x3c
   16aa0:	mov	r8, #2
   16aa4:	b	16654 <__assert_fail@plt+0x5150>
   16aa8:	mov	r7, #0
   16aac:	ldr	r3, [sp, #24]
   16ab0:	cmn	r3, #1
   16ab4:	beq	175f0 <__assert_fail@plt+0x60ec>
   16ab8:	ldr	r3, [sp, #24]
   16abc:	subs	r3, r3, #1
   16ac0:	movne	r3, #1
   16ac4:	cmp	r3, #0
   16ac8:	sub	r2, fp, #2
   16acc:	clz	r2, r2
   16ad0:	lsr	r2, r2, #5
   16ad4:	bne	16cd0 <__assert_fail@plt+0x57cc>
   16ad8:	cmp	r9, #0
   16adc:	bne	16cd0 <__assert_fail@plt+0x57cc>
   16ae0:	ldr	r3, [sp, #32]
   16ae4:	tst	r3, r2
   16ae8:	bne	16df0 <__assert_fail@plt+0x58ec>
   16aec:	ldr	r3, [sp, #28]
   16af0:	eor	r3, r3, #1
   16af4:	orr	r3, r2, r3
   16af8:	ldr	r2, [sp, #32]
   16afc:	eor	r3, r3, #1
   16b00:	orrs	r3, r2, r3
   16b04:	beq	16b34 <__assert_fail@plt+0x5630>
   16b08:	mov	r3, #0
   16b0c:	ldr	r1, [sp, #56]	; 0x38
   16b10:	cmp	r1, #0
   16b14:	beq	16b34 <__assert_fail@plt+0x5630>
   16b18:	lsr	r2, r5, #5
   16b1c:	and	r0, r5, #31
   16b20:	uxtb	r2, r2
   16b24:	ldr	r1, [r1, r2, lsl #2]
   16b28:	lsr	r2, r1, r0
   16b2c:	tst	r2, #1
   16b30:	bne	16b3c <__assert_fail@plt+0x5638>
   16b34:	cmp	r7, #0
   16b38:	beq	16d8c <__assert_fail@plt+0x5888>
   16b3c:	sub	r2, fp, #2
   16b40:	clz	r2, r2
   16b44:	lsr	r2, r2, #5
   16b48:	ldr	r3, [sp, #32]
   16b4c:	cmp	r3, #0
   16b50:	bne	16e7c <__assert_fail@plt+0x5978>
   16b54:	ldr	r3, [sp, #44]	; 0x2c
   16b58:	eor	r3, r3, #1
   16b5c:	ands	r3, r2, r3
   16b60:	beq	16b98 <__assert_fail@plt+0x5694>
   16b64:	cmp	sl, r4
   16b68:	movhi	r2, #39	; 0x27
   16b6c:	strbhi	r2, [r8, r4]
   16b70:	add	r2, r4, #1
   16b74:	cmp	r2, sl
   16b78:	movcc	r1, #36	; 0x24
   16b7c:	strbcc	r1, [r8, r2]
   16b80:	add	r2, r4, #2
   16b84:	cmp	r2, sl
   16b88:	add	r4, r4, #3
   16b8c:	movcc	r1, #39	; 0x27
   16b90:	strbcc	r1, [r8, r2]
   16b94:	str	r3, [sp, #44]	; 0x2c
   16b98:	cmp	r4, sl
   16b9c:	movcc	r3, #92	; 0x5c
   16ba0:	strbcc	r3, [r8, r4]
   16ba4:	add	r9, r9, #1
   16ba8:	add	r4, r4, #1
   16bac:	cmp	r4, sl
   16bb0:	ldr	r3, [sp, #40]	; 0x28
   16bb4:	strbcc	r5, [r8, r4]
   16bb8:	cmp	r6, #0
   16bbc:	moveq	r3, #0
   16bc0:	str	r3, [sp, #40]	; 0x28
   16bc4:	ldr	r3, [sp, #24]
   16bc8:	add	r4, r4, #1
   16bcc:	cmn	r3, #1
   16bd0:	bne	16670 <__assert_fail@plt+0x516c>
   16bd4:	ldr	r3, [sp, #36]	; 0x24
   16bd8:	ldrb	r6, [r3, r9]
   16bdc:	adds	r6, r6, #0
   16be0:	movne	r6, #1
   16be4:	cmp	r6, #0
   16be8:	bne	16684 <__assert_fail@plt+0x5180>
   16bec:	str	fp, [sp, #160]	; 0xa0
   16bf0:	mov	fp, r8
   16bf4:	ldr	r8, [sp, #160]	; 0xa0
   16bf8:	ldr	r1, [sp, #32]
   16bfc:	cmp	r4, #0
   16c00:	sub	r2, r8, #2
   16c04:	clz	r2, r2
   16c08:	lsr	r2, r2, #5
   16c0c:	andeq	r3, r2, r1
   16c10:	movne	r3, #0
   16c14:	cmp	r3, #0
   16c18:	bne	17d04 <__assert_fail@plt+0x6800>
   16c1c:	eor	r3, r1, #1
   16c20:	ands	r2, r2, r3
   16c24:	beq	17c40 <__assert_fail@plt+0x673c>
   16c28:	ldr	r3, [sp, #68]	; 0x44
   16c2c:	cmp	r3, #0
   16c30:	beq	17c44 <__assert_fail@plt+0x6740>
   16c34:	ldr	r3, [sp, #40]	; 0x28
   16c38:	cmp	r3, #0
   16c3c:	bne	17cc0 <__assert_fail@plt+0x67bc>
   16c40:	ldr	r3, [sp, #72]	; 0x48
   16c44:	adds	r3, r3, #0
   16c48:	movne	r3, #1
   16c4c:	cmp	sl, #0
   16c50:	movne	r3, #0
   16c54:	cmp	r3, #0
   16c58:	ldreq	r2, [sp, #68]	; 0x44
   16c5c:	beq	17c44 <__assert_fail@plt+0x6740>
   16c60:	ldr	sl, [sp, #72]	; 0x48
   16c64:	str	r3, [sp, #68]	; 0x44
   16c68:	ldr	r3, [pc, #1792]	; 17370 <__assert_fail@plt+0x5e6c>
   16c6c:	mov	r2, #39	; 0x27
   16c70:	mov	r4, #1
   16c74:	str	r3, [sp, #60]	; 0x3c
   16c78:	mov	r3, #0
   16c7c:	strb	r2, [fp]
   16c80:	str	r4, [sp, #52]	; 0x34
   16c84:	mov	r8, #2
   16c88:	str	r3, [sp, #32]
   16c8c:	b	16654 <__assert_fail@plt+0x5150>
   16c90:	mov	r7, #0
   16c94:	cmp	fp, #2
   16c98:	beq	175d0 <__assert_fail@plt+0x60cc>
   16c9c:	ldr	r3, [sp, #52]	; 0x34
   16ca0:	ldr	r2, [sp, #28]
   16ca4:	ldr	r1, [sp, #32]
   16ca8:	cmp	r3, #0
   16cac:	andne	r2, r2, r1
   16cb0:	moveq	r2, #0
   16cb4:	cmp	r2, #0
   16cb8:	moveq	r5, #92	; 0x5c
   16cbc:	moveq	r3, r5
   16cc0:	bne	175dc <__assert_fail@plt+0x60d8>
   16cc4:	ldr	r1, [sp, #28]
   16cc8:	cmp	r1, #0
   16ccc:	bne	17d4c <__assert_fail@plt+0x6848>
   16cd0:	mov	r6, #0
   16cd4:	b	16aec <__assert_fail@plt+0x55e8>
   16cd8:	mov	r7, #0
   16cdc:	cmp	fp, #2
   16ce0:	beq	17640 <__assert_fail@plt+0x613c>
   16ce4:	cmp	fp, #5
   16ce8:	beq	17604 <__assert_fail@plt+0x6100>
   16cec:	sub	r2, fp, #2
   16cf0:	mov	r6, #0
   16cf4:	clz	r2, r2
   16cf8:	mov	r5, #63	; 0x3f
   16cfc:	lsr	r2, r2, #5
   16d00:	b	16aec <__assert_fail@plt+0x55e8>
   16d04:	mov	r7, #0
   16d08:	cmp	fp, #2
   16d0c:	strne	r6, [sp, #68]	; 0x44
   16d10:	movne	r2, #0
   16d14:	movne	r5, #39	; 0x27
   16d18:	bne	16aec <__assert_fail@plt+0x55e8>
   16d1c:	ldr	r3, [sp, #32]
   16d20:	cmp	r3, #0
   16d24:	bne	17a20 <__assert_fail@plt+0x651c>
   16d28:	cmp	sl, #0
   16d2c:	ldr	r3, [sp, #72]	; 0x48
   16d30:	clz	r3, r3
   16d34:	lsr	r3, r3, #5
   16d38:	moveq	r3, #0
   16d3c:	cmp	r3, #0
   16d40:	bne	17954 <__assert_fail@plt+0x6450>
   16d44:	cmp	sl, r4
   16d48:	movhi	r3, #39	; 0x27
   16d4c:	strbhi	r3, [r8, r4]
   16d50:	add	r3, r4, #1
   16d54:	cmp	sl, r3
   16d58:	movhi	r2, #92	; 0x5c
   16d5c:	strbhi	r2, [r8, r3]
   16d60:	add	r3, r4, #2
   16d64:	cmp	sl, r3
   16d68:	movhi	r2, #39	; 0x27
   16d6c:	strbhi	r2, [r8, r3]
   16d70:	mov	r3, #0
   16d74:	cmp	r7, #0
   16d78:	add	r4, r4, #3
   16d7c:	str	r3, [sp, #44]	; 0x2c
   16d80:	str	r6, [sp, #68]	; 0x44
   16d84:	mov	r5, #39	; 0x27
   16d88:	bne	16b3c <__assert_fail@plt+0x5638>
   16d8c:	ldr	r2, [sp, #44]	; 0x2c
   16d90:	eor	r3, r3, #1
   16d94:	and	r3, r3, r2
   16d98:	add	r9, r9, #1
   16d9c:	uxtb	r3, r3
   16da0:	cmp	r3, #0
   16da4:	beq	16bac <__assert_fail@plt+0x56a8>
   16da8:	cmp	sl, r4
   16dac:	movhi	r3, #39	; 0x27
   16db0:	strbhi	r3, [r8, r4]
   16db4:	add	r3, r4, #1
   16db8:	cmp	sl, r3
   16dbc:	movhi	r2, #39	; 0x27
   16dc0:	strbhi	r2, [r8, r3]
   16dc4:	mov	r3, #0
   16dc8:	add	r4, r4, #2
   16dcc:	str	r3, [sp, #44]	; 0x2c
   16dd0:	b	16bac <__assert_fail@plt+0x56a8>
   16dd4:	mov	r3, #114	; 0x72
   16dd8:	ldr	r1, [sp, #32]
   16ddc:	sub	r2, fp, #2
   16de0:	clz	r2, r2
   16de4:	lsr	r2, r2, #5
   16de8:	tst	r2, r1
   16dec:	beq	16cc4 <__assert_fail@plt+0x57c0>
   16df0:	mov	fp, r8
   16df4:	mov	r8, #2
   16df8:	ldr	r3, [sp, #28]
   16dfc:	cmp	r3, #0
   16e00:	movne	r8, #4
   16e04:	ldr	r3, [sp, #164]	; 0xa4
   16e08:	mov	ip, #0
   16e0c:	bic	r3, r3, #2
   16e10:	str	r3, [sp, #4]
   16e14:	ldr	r3, [sp, #76]	; 0x4c
   16e18:	str	r8, [sp]
   16e1c:	str	r3, [sp, #16]
   16e20:	ldr	r3, [sp, #80]	; 0x50
   16e24:	ldr	r2, [sp, #36]	; 0x24
   16e28:	str	r3, [sp, #12]
   16e2c:	mov	r1, sl
   16e30:	ldr	r3, [sp, #24]
   16e34:	mov	r0, fp
   16e38:	str	ip, [sp, #8]
   16e3c:	bl	1655c <__assert_fail@plt+0x5058>
   16e40:	mov	r4, r0
   16e44:	ldr	r3, [pc, #1304]	; 17364 <__assert_fail@plt+0x5e60>
   16e48:	ldr	r2, [sp, #116]	; 0x74
   16e4c:	mov	r0, r4
   16e50:	ldr	r3, [r3]
   16e54:	cmp	r2, r3
   16e58:	bne	17d48 <__assert_fail@plt+0x6844>
   16e5c:	add	sp, sp, #124	; 0x7c
   16e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e64:	mov	r5, #110	; 0x6e
   16e68:	ldr	r3, [sp, #32]
   16e6c:	mov	r2, #0
   16e70:	cmp	r3, #0
   16e74:	mov	r6, r2
   16e78:	beq	16b54 <__assert_fail@plt+0x5650>
   16e7c:	str	fp, [sp, #160]	; 0xa0
   16e80:	mov	fp, r8
   16e84:	ldr	r8, [sp, #160]	; 0xa0
   16e88:	mov	r3, r2
   16e8c:	ldr	r2, [sp, #28]
   16e90:	and	r2, r2, r3
   16e94:	str	r2, [sp, #28]
   16e98:	b	16df8 <__assert_fail@plt+0x58f4>
   16e9c:	mov	r5, #116	; 0x74
   16ea0:	b	16e68 <__assert_fail@plt+0x5964>
   16ea4:	mov	r5, #102	; 0x66
   16ea8:	ldr	r3, [sp, #32]
   16eac:	cmp	r3, #0
   16eb0:	bne	17a5c <__assert_fail@plt+0x6558>
   16eb4:	mov	r6, #0
   16eb8:	b	16b98 <__assert_fail@plt+0x5694>
   16ebc:	mov	r5, #118	; 0x76
   16ec0:	b	16ea8 <__assert_fail@plt+0x59a4>
   16ec4:	mov	r7, #0
   16ec8:	mov	r6, #0
   16ecc:	b	16b08 <__assert_fail@plt+0x5604>
   16ed0:	ldr	r3, [sp, #32]
   16ed4:	cmp	r3, #0
   16ed8:	bne	17ca0 <__assert_fail@plt+0x679c>
   16edc:	mov	r7, r3
   16ee0:	ldr	r3, [sp, #44]	; 0x2c
   16ee4:	sub	r2, fp, #2
   16ee8:	eor	r3, r3, #1
   16eec:	clz	r2, r2
   16ef0:	lsr	r2, r2, #5
   16ef4:	ands	r3, r2, r3
   16ef8:	beq	17940 <__assert_fail@plt+0x643c>
   16efc:	cmp	sl, r4
   16f00:	movhi	r1, #39	; 0x27
   16f04:	strbhi	r1, [r8, r4]
   16f08:	add	r1, r4, #1
   16f0c:	cmp	sl, r1
   16f10:	movhi	r0, #36	; 0x24
   16f14:	strbhi	r0, [r8, r1]
   16f18:	add	r1, r4, #2
   16f1c:	cmp	sl, r1
   16f20:	movhi	r0, #39	; 0x27
   16f24:	strbhi	r0, [r8, r1]
   16f28:	add	r1, r4, #3
   16f2c:	cmp	sl, r1
   16f30:	bls	179a0 <__assert_fail@plt+0x649c>
   16f34:	mov	r4, r1
   16f38:	mov	r1, #92	; 0x5c
   16f3c:	strb	r1, [r8, r4]
   16f40:	mov	r1, r4
   16f44:	str	r3, [sp, #44]	; 0x2c
   16f48:	cmp	fp, #2
   16f4c:	add	r4, r4, #1
   16f50:	beq	179e8 <__assert_fail@plt+0x64e4>
   16f54:	ldr	r0, [sp, #24]
   16f58:	add	r3, r9, #1
   16f5c:	cmp	r3, r0
   16f60:	bcs	16f78 <__assert_fail@plt+0x5a74>
   16f64:	ldr	r0, [sp, #36]	; 0x24
   16f68:	ldrb	r3, [r0, r3]
   16f6c:	sub	r3, r3, #48	; 0x30
   16f70:	cmp	r3, #9
   16f74:	bls	179f8 <__assert_fail@plt+0x64f4>
   16f78:	mov	r5, #48	; 0x30
   16f7c:	ldr	r3, [sp, #28]
   16f80:	eor	r3, r3, #1
   16f84:	orrs	r2, r2, r3
   16f88:	mov	r3, r6
   16f8c:	moveq	r6, r2
   16f90:	beq	16b0c <__assert_fail@plt+0x5608>
   16f94:	mov	r6, #0
   16f98:	b	16b34 <__assert_fail@plt+0x5630>
   16f9c:	mov	r2, #0
   16fa0:	mov	r6, r2
   16fa4:	mov	r5, #98	; 0x62
   16fa8:	b	16b54 <__assert_fail@plt+0x5650>
   16fac:	mov	r5, #97	; 0x61
   16fb0:	b	16eb4 <__assert_fail@plt+0x59b0>
   16fb4:	mov	r3, r7
   16fb8:	mov	r6, r7
   16fbc:	mov	r2, #0
   16fc0:	mov	r7, r3
   16fc4:	mov	r5, #32
   16fc8:	b	16aec <__assert_fail@plt+0x55e8>
   16fcc:	cmp	r9, #0
   16fd0:	mov	r3, r7
   16fd4:	bne	1759c <__assert_fail@plt+0x6098>
   16fd8:	mov	r6, r7
   16fdc:	mov	r2, r9
   16fe0:	mov	r7, r3
   16fe4:	b	16aec <__assert_fail@plt+0x55e8>
   16fe8:	mov	r6, r7
   16fec:	b	16b08 <__assert_fail@plt+0x5604>
   16ff0:	mov	r7, #0
   16ff4:	ldr	r3, [sp, #64]	; 0x40
   16ff8:	cmp	r3, #1
   16ffc:	bne	17658 <__assert_fail@plt+0x6154>
   17000:	bl	113a8 <__ctype_b_loc@plt>
   17004:	ldr	r2, [sp, #64]	; 0x40
   17008:	sxth	r3, r5
   1700c:	mov	ip, r2
   17010:	lsl	r3, r3, #1
   17014:	ldr	r2, [r0]
   17018:	ldrh	r3, [r2, r3]
   1701c:	and	r3, r3, #16384	; 0x4000
   17020:	cmp	r3, #0
   17024:	ldr	r3, [sp, #28]
   17028:	movne	r6, #1
   1702c:	moveq	r6, #0
   17030:	movne	r2, #0
   17034:	andeq	r2, r3, #1
   17038:	cmp	r2, #0
   1703c:	bne	17968 <__assert_fail@plt+0x6464>
   17040:	sub	r2, fp, #2
   17044:	clz	r2, r2
   17048:	lsr	r2, r2, #5
   1704c:	b	16aec <__assert_fail@plt+0x55e8>
   17050:	cmp	r4, #0
   17054:	bne	17d14 <__assert_fail@plt+0x6810>
   17058:	str	r4, [sp, #28]
   1705c:	cmp	sl, #0
   17060:	bne	17d58 <__assert_fail@plt+0x6854>
   17064:	ldr	r3, [pc, #772]	; 17370 <__assert_fail@plt+0x5e6c>
   17068:	mov	r4, #1
   1706c:	str	r4, [sp, #40]	; 0x28
   17070:	str	r3, [sp, #60]	; 0x3c
   17074:	str	r4, [sp, #52]	; 0x34
   17078:	str	sl, [sp, #72]	; 0x48
   1707c:	str	sl, [sp, #68]	; 0x44
   17080:	str	sl, [sp, #44]	; 0x2c
   17084:	str	sl, [sp, #32]
   17088:	mov	r8, #2
   1708c:	b	16654 <__assert_fail@plt+0x5150>
   17090:	ldr	r3, [sp, #36]	; 0x24
   17094:	ldrb	r5, [r3, r9]
   17098:	cmp	r5, #126	; 0x7e
   1709c:	ldrls	pc, [pc, r5, lsl #2]
   170a0:	b	16ff4 <__assert_fail@plt+0x5af0>
   170a4:	ldrdeq	r7, [r1], -r8
   170a8:	strdeq	r6, [r1], -r4
   170ac:	strdeq	r6, [r1], -r4
   170b0:	strdeq	r6, [r1], -r4
   170b4:	strdeq	r6, [r1], -r4
   170b8:	strdeq	r6, [r1], -r4
   170bc:	strdeq	r6, [r1], -r4
   170c0:	andeq	r7, r1, r4, asr #5
   170c4:			; <UNDEFINED> instruction: 0x000172b0
   170c8:	andeq	r7, r1, r8, lsr #5
   170cc:	andeq	r7, r1, r0, lsr #5
   170d0:	andeq	r7, r1, r0, asr r3
   170d4:	andeq	r7, r1, ip, lsr r3
   170d8:	ldrdeq	r6, [r1], -r4
   170dc:	strdeq	r6, [r1], -r4
   170e0:	strdeq	r6, [r1], -r4
   170e4:	strdeq	r6, [r1], -r4
   170e8:	strdeq	r6, [r1], -r4
   170ec:	strdeq	r6, [r1], -r4
   170f0:	strdeq	r6, [r1], -r4
   170f4:	strdeq	r6, [r1], -r4
   170f8:	strdeq	r6, [r1], -r4
   170fc:	strdeq	r6, [r1], -r4
   17100:	strdeq	r6, [r1], -r4
   17104:	strdeq	r6, [r1], -r4
   17108:	strdeq	r6, [r1], -r4
   1710c:	strdeq	r6, [r1], -r4
   17110:	strdeq	r6, [r1], -r4
   17114:	strdeq	r6, [r1], -r4
   17118:	strdeq	r6, [r1], -r4
   1711c:	strdeq	r6, [r1], -r4
   17120:	strdeq	r6, [r1], -r4
   17124:	andeq	r7, r1, ip, lsr #6
   17128:	andeq	r7, r1, r8, lsl r3
   1712c:	andeq	r7, r1, r8, lsl r3
   17130:	andeq	r7, r1, r8, lsl #6
   17134:	andeq	r7, r1, r8, lsl r3
   17138:	andeq	r7, r1, r0, asr #32
   1713c:	andeq	r7, r1, r8, lsl r3
   17140:	andeq	r6, r1, r8, lsl #26
   17144:	andeq	r7, r1, r8, lsl r3
   17148:	andeq	r7, r1, r8, lsl r3
   1714c:	andeq	r7, r1, r8, lsl r3
   17150:	andeq	r7, r1, r0, asr #32
   17154:	andeq	r7, r1, r0, asr #32
   17158:	andeq	r7, r1, r0, asr #32
   1715c:	andeq	r7, r1, r0, asr #32
   17160:	andeq	r7, r1, r0, asr #32
   17164:	andeq	r7, r1, r0, asr #32
   17168:	andeq	r7, r1, r0, asr #32
   1716c:	andeq	r7, r1, r0, asr #32
   17170:	andeq	r7, r1, r0, asr #32
   17174:	andeq	r7, r1, r0, asr #32
   17178:	andeq	r7, r1, r0, asr #32
   1717c:	andeq	r7, r1, r0, asr #32
   17180:	andeq	r7, r1, r0, asr #32
   17184:	andeq	r7, r1, r0, asr #32
   17188:	andeq	r7, r1, r0, asr #32
   1718c:	andeq	r7, r1, r0, asr #32
   17190:	andeq	r7, r1, r8, lsl r3
   17194:	andeq	r7, r1, r8, lsl r3
   17198:	andeq	r7, r1, r8, lsl r3
   1719c:	andeq	r7, r1, r8, lsl r3
   171a0:	ldrdeq	r6, [r1], -ip
   171a4:	strdeq	r6, [r1], -r4
   171a8:	andeq	r7, r1, r0, asr #32
   171ac:	andeq	r7, r1, r0, asr #32
   171b0:	andeq	r7, r1, r0, asr #32
   171b4:	andeq	r7, r1, r0, asr #32
   171b8:	andeq	r7, r1, r0, asr #32
   171bc:	andeq	r7, r1, r0, asr #32
   171c0:	andeq	r7, r1, r0, asr #32
   171c4:	andeq	r7, r1, r0, asr #32
   171c8:	andeq	r7, r1, r0, asr #32
   171cc:	andeq	r7, r1, r0, asr #32
   171d0:	andeq	r7, r1, r0, asr #32
   171d4:	andeq	r7, r1, r0, asr #32
   171d8:	andeq	r7, r1, r0, asr #32
   171dc:	andeq	r7, r1, r0, asr #32
   171e0:	andeq	r7, r1, r0, asr #32
   171e4:	andeq	r7, r1, r0, asr #32
   171e8:	andeq	r7, r1, r0, asr #32
   171ec:	andeq	r7, r1, r0, asr #32
   171f0:	andeq	r7, r1, r0, asr #32
   171f4:	andeq	r7, r1, r0, asr #32
   171f8:	andeq	r7, r1, r0, asr #32
   171fc:	andeq	r7, r1, r0, asr #32
   17200:	andeq	r7, r1, r0, asr #32
   17204:	andeq	r7, r1, r0, asr #32
   17208:	andeq	r7, r1, r0, asr #32
   1720c:	andeq	r7, r1, r0, asr #32
   17210:	andeq	r7, r1, r8, lsl r3
   17214:	muleq	r1, r4, ip
   17218:	andeq	r7, r1, r0, asr #32
   1721c:	andeq	r7, r1, r8, lsl r3
   17220:	andeq	r7, r1, r0, asr #32
   17224:	andeq	r7, r1, r8, lsl r3
   17228:	andeq	r7, r1, r0, asr #32
   1722c:	andeq	r7, r1, r0, asr #32
   17230:	andeq	r7, r1, r0, asr #32
   17234:	andeq	r7, r1, r0, asr #32
   17238:	andeq	r7, r1, r0, asr #32
   1723c:	andeq	r7, r1, r0, asr #32
   17240:	andeq	r7, r1, r0, asr #32
   17244:	andeq	r7, r1, r0, asr #32
   17248:	andeq	r7, r1, r0, asr #32
   1724c:	andeq	r7, r1, r0, asr #32
   17250:	andeq	r7, r1, r0, asr #32
   17254:	andeq	r7, r1, r0, asr #32
   17258:	andeq	r7, r1, r0, asr #32
   1725c:	andeq	r7, r1, r0, asr #32
   17260:	andeq	r7, r1, r0, asr #32
   17264:	andeq	r7, r1, r0, asr #32
   17268:	andeq	r7, r1, r0, asr #32
   1726c:	andeq	r7, r1, r0, asr #32
   17270:	andeq	r7, r1, r0, asr #32
   17274:	andeq	r7, r1, r0, asr #32
   17278:	andeq	r7, r1, r0, asr #32
   1727c:	andeq	r7, r1, r0, asr #32
   17280:	andeq	r7, r1, r0, asr #32
   17284:	andeq	r7, r1, r0, asr #32
   17288:	andeq	r7, r1, r0, asr #32
   1728c:	andeq	r7, r1, r0, asr #32
   17290:	andeq	r6, r1, ip, lsr #21
   17294:	andeq	r7, r1, r8, lsl r3
   17298:	andeq	r6, r1, ip, lsr #21
   1729c:	andeq	r7, r1, r8, lsl #6
   172a0:	mov	r3, #110	; 0x6e
   172a4:	b	16dd8 <__assert_fail@plt+0x58d4>
   172a8:	mov	r3, #116	; 0x74
   172ac:	b	16dd8 <__assert_fail@plt+0x58d4>
   172b0:	sub	r2, fp, #2
   172b4:	mov	r3, #98	; 0x62
   172b8:	clz	r2, r2
   172bc:	lsr	r2, r2, #5
   172c0:	b	16cc4 <__assert_fail@plt+0x57c0>
   172c4:	sub	r2, fp, #2
   172c8:	mov	r3, #97	; 0x61
   172cc:	clz	r2, r2
   172d0:	lsr	r2, r2, #5
   172d4:	b	16cc4 <__assert_fail@plt+0x57c0>
   172d8:	ldr	r3, [sp, #28]
   172dc:	cmp	r3, #0
   172e0:	bne	16ed0 <__assert_fail@plt+0x59cc>
   172e4:	ldr	r3, [sp, #164]	; 0xa4
   172e8:	tst	r3, #1
   172ec:	bne	17960 <__assert_fail@plt+0x645c>
   172f0:	ldr	r6, [sp, #28]
   172f4:	sub	r2, fp, #2
   172f8:	mov	r7, r6
   172fc:	clz	r2, r2
   17300:	lsr	r2, r2, #5
   17304:	b	16aec <__assert_fail@plt+0x55e8>
   17308:	sub	r2, fp, #2
   1730c:	clz	r2, r2
   17310:	lsr	r2, r2, #5
   17314:	b	16ad8 <__assert_fail@plt+0x55d4>
   17318:	sub	r2, fp, #2
   1731c:	mov	r6, #0
   17320:	clz	r2, r2
   17324:	lsr	r2, r2, #5
   17328:	b	16ae0 <__assert_fail@plt+0x55dc>
   1732c:	sub	r2, fp, #2
   17330:	clz	r2, r2
   17334:	lsr	r2, r2, #5
   17338:	b	16ae0 <__assert_fail@plt+0x55dc>
   1733c:	sub	r2, fp, #2
   17340:	mov	r3, #102	; 0x66
   17344:	clz	r2, r2
   17348:	lsr	r2, r2, #5
   1734c:	b	16cc4 <__assert_fail@plt+0x57c0>
   17350:	sub	r2, fp, #2
   17354:	mov	r3, #118	; 0x76
   17358:	clz	r2, r2
   1735c:	lsr	r2, r2, #5
   17360:	b	16cc4 <__assert_fail@plt+0x57c0>
   17364:	andeq	lr, r2, r8, lsl #30
   17368:	ldrdeq	lr, [r1], -ip
   1736c:	andeq	lr, r1, r4, asr #7
   17370:	ldrdeq	lr, [r1], -r8
   17374:	ldr	r3, [sp, #48]	; 0x30
   17378:	ldrb	r5, [r3]
   1737c:	cmp	r5, #126	; 0x7e
   17380:	ldrls	pc, [pc, r5, lsl #2]
   17384:	b	16ff0 <__assert_fail@plt+0x5aec>
   17388:	ldrdeq	r6, [r1], -r0
   1738c:	strdeq	r6, [r1], -r0
   17390:	strdeq	r6, [r1], -r0
   17394:	strdeq	r6, [r1], -r0
   17398:	strdeq	r6, [r1], -r0
   1739c:	strdeq	r6, [r1], -r0
   173a0:	strdeq	r6, [r1], -r0
   173a4:	andeq	r7, r1, r8, asr #11
   173a8:	andeq	r7, r1, r0, asr #11
   173ac:	muleq	r1, ip, lr
   173b0:	andeq	r6, r1, r4, ror #28
   173b4:			; <UNDEFINED> instruction: 0x00016ebc
   173b8:	andeq	r6, r1, r4, lsr #29
   173bc:			; <UNDEFINED> instruction: 0x000175b4
   173c0:	strdeq	r6, [r1], -r0
   173c4:	strdeq	r6, [r1], -r0
   173c8:	strdeq	r6, [r1], -r0
   173cc:	strdeq	r6, [r1], -r0
   173d0:	strdeq	r6, [r1], -r0
   173d4:	strdeq	r6, [r1], -r0
   173d8:	strdeq	r6, [r1], -r0
   173dc:	strdeq	r6, [r1], -r0
   173e0:	strdeq	r6, [r1], -r0
   173e4:	strdeq	r6, [r1], -r0
   173e8:	strdeq	r6, [r1], -r0
   173ec:	strdeq	r6, [r1], -r0
   173f0:	strdeq	r6, [r1], -r0
   173f4:	strdeq	r6, [r1], -r0
   173f8:	strdeq	r6, [r1], -r0
   173fc:	strdeq	r6, [r1], -r0
   17400:	strdeq	r6, [r1], -r0
   17404:	strdeq	r6, [r1], -r0
   17408:	andeq	r7, r1, ip, lsr #11
   1740c:	andeq	r6, r1, r4, asr #29
   17410:	andeq	r6, r1, r4, asr #29
   17414:	muleq	r1, r0, r5
   17418:	andeq	r6, r1, r4, asr #29
   1741c:	andeq	r7, r1, r4, lsl #11
   17420:	andeq	r6, r1, r4, asr #29
   17424:	andeq	r6, r1, r4, lsl #26
   17428:	andeq	r6, r1, r4, asr #29
   1742c:	andeq	r6, r1, r4, asr #29
   17430:	andeq	r6, r1, r4, asr #29
   17434:	andeq	r7, r1, r4, lsl #11
   17438:	andeq	r7, r1, r4, lsl #11
   1743c:	andeq	r7, r1, r4, lsl #11
   17440:	andeq	r7, r1, r4, lsl #11
   17444:	andeq	r7, r1, r4, lsl #11
   17448:	andeq	r7, r1, r4, lsl #11
   1744c:	andeq	r7, r1, r4, lsl #11
   17450:	andeq	r7, r1, r4, lsl #11
   17454:	andeq	r7, r1, r4, lsl #11
   17458:	andeq	r7, r1, r4, lsl #11
   1745c:	andeq	r7, r1, r4, lsl #11
   17460:	andeq	r7, r1, r4, lsl #11
   17464:	andeq	r7, r1, r4, lsl #11
   17468:	andeq	r7, r1, r4, lsl #11
   1746c:	andeq	r7, r1, r4, lsl #11
   17470:	andeq	r7, r1, r4, lsl #11
   17474:	andeq	r6, r1, r4, asr #29
   17478:	andeq	r6, r1, r4, asr #29
   1747c:	andeq	r6, r1, r4, asr #29
   17480:	andeq	r6, r1, r4, asr #29
   17484:	ldrdeq	r6, [r1], -r8
   17488:	strdeq	r6, [r1], -r0
   1748c:	andeq	r7, r1, r4, lsl #11
   17490:	andeq	r7, r1, r4, lsl #11
   17494:	andeq	r7, r1, r4, lsl #11
   17498:	andeq	r7, r1, r4, lsl #11
   1749c:	andeq	r7, r1, r4, lsl #11
   174a0:	andeq	r7, r1, r4, lsl #11
   174a4:	andeq	r7, r1, r4, lsl #11
   174a8:	andeq	r7, r1, r4, lsl #11
   174ac:	andeq	r7, r1, r4, lsl #11
   174b0:	andeq	r7, r1, r4, lsl #11
   174b4:	andeq	r7, r1, r4, lsl #11
   174b8:	andeq	r7, r1, r4, lsl #11
   174bc:	andeq	r7, r1, r4, lsl #11
   174c0:	andeq	r7, r1, r4, lsl #11
   174c4:	andeq	r7, r1, r4, lsl #11
   174c8:	andeq	r7, r1, r4, lsl #11
   174cc:	andeq	r7, r1, r4, lsl #11
   174d0:	andeq	r7, r1, r4, lsl #11
   174d4:	andeq	r7, r1, r4, lsl #11
   174d8:	andeq	r7, r1, r4, lsl #11
   174dc:	andeq	r7, r1, r4, lsl #11
   174e0:	andeq	r7, r1, r4, lsl #11
   174e4:	andeq	r7, r1, r4, lsl #11
   174e8:	andeq	r7, r1, r4, lsl #11
   174ec:	andeq	r7, r1, r4, lsl #11
   174f0:	andeq	r7, r1, r4, lsl #11
   174f4:	andeq	r6, r1, r4, asr #29
   174f8:	muleq	r1, r0, ip
   174fc:	andeq	r7, r1, r4, lsl #11
   17500:	andeq	r6, r1, r4, asr #29
   17504:	andeq	r7, r1, r4, lsl #11
   17508:	andeq	r6, r1, r4, asr #29
   1750c:	andeq	r7, r1, r4, lsl #11
   17510:	andeq	r7, r1, r4, lsl #11
   17514:	andeq	r7, r1, r4, lsl #11
   17518:	andeq	r7, r1, r4, lsl #11
   1751c:	andeq	r7, r1, r4, lsl #11
   17520:	andeq	r7, r1, r4, lsl #11
   17524:	andeq	r7, r1, r4, lsl #11
   17528:	andeq	r7, r1, r4, lsl #11
   1752c:	andeq	r7, r1, r4, lsl #11
   17530:	andeq	r7, r1, r4, lsl #11
   17534:	andeq	r7, r1, r4, lsl #11
   17538:	andeq	r7, r1, r4, lsl #11
   1753c:	andeq	r7, r1, r4, lsl #11
   17540:	andeq	r7, r1, r4, lsl #11
   17544:	andeq	r7, r1, r4, lsl #11
   17548:	andeq	r7, r1, r4, lsl #11
   1754c:	andeq	r7, r1, r4, lsl #11
   17550:	andeq	r7, r1, r4, lsl #11
   17554:	andeq	r7, r1, r4, lsl #11
   17558:	andeq	r7, r1, r4, lsl #11
   1755c:	andeq	r7, r1, r4, lsl #11
   17560:	andeq	r7, r1, r4, lsl #11
   17564:	andeq	r7, r1, r4, lsl #11
   17568:	andeq	r7, r1, r4, lsl #11
   1756c:	andeq	r7, r1, r4, lsl #11
   17570:	andeq	r7, r1, r4, lsl #11
   17574:	andeq	r6, r1, r8, lsr #21
   17578:	andeq	r6, r1, r4, asr #29
   1757c:	andeq	r6, r1, r8, lsr #21
   17580:	muleq	r1, r0, r5
   17584:	mov	r6, r7
   17588:	mov	r7, #0
   1758c:	b	16b08 <__assert_fail@plt+0x5604>
   17590:	cmp	r9, #0
   17594:	mov	r3, #0
   17598:	beq	16fd8 <__assert_fail@plt+0x5ad4>
   1759c:	mov	r6, #0
   175a0:	mov	r7, r3
   175a4:	mov	r3, r6
   175a8:	b	16b0c <__assert_fail@plt+0x5608>
   175ac:	mov	r3, #0
   175b0:	b	16fb8 <__assert_fail@plt+0x5ab4>
   175b4:	mov	r7, #0
   175b8:	mov	r3, #114	; 0x72
   175bc:	b	16dd8 <__assert_fail@plt+0x58d4>
   175c0:	mov	r5, #98	; 0x62
   175c4:	b	16e68 <__assert_fail@plt+0x5964>
   175c8:	mov	r5, #97	; 0x61
   175cc:	b	16ea8 <__assert_fail@plt+0x59a4>
   175d0:	ldr	r3, [sp, #32]
   175d4:	cmp	r3, #0
   175d8:	bne	17a20 <__assert_fail@plt+0x651c>
   175dc:	add	r9, r9, #1
   175e0:	ldr	r3, [sp, #44]	; 0x2c
   175e4:	mov	r6, #0
   175e8:	mov	r5, #92	; 0x5c
   175ec:	b	16da0 <__assert_fail@plt+0x589c>
   175f0:	ldr	r3, [sp, #36]	; 0x24
   175f4:	ldrb	r3, [r3, #1]
   175f8:	adds	r3, r3, #0
   175fc:	movne	r3, #1
   17600:	b	16ac4 <__assert_fail@plt+0x55c0>
   17604:	ldr	r3, [sp, #164]	; 0xa4
   17608:	ands	r3, r3, #4
   1760c:	beq	17630 <__assert_fail@plt+0x612c>
   17610:	ldr	r2, [sp, #24]
   17614:	add	r3, r9, #2
   17618:	cmp	r3, r2
   1761c:	bcs	17630 <__assert_fail@plt+0x612c>
   17620:	ldr	r2, [sp, #48]	; 0x30
   17624:	ldrb	r5, [r2, #1]
   17628:	cmp	r5, #63	; 0x3f
   1762c:	beq	17a94 <__assert_fail@plt+0x6590>
   17630:	mov	r2, #0
   17634:	mov	r6, r2
   17638:	mov	r5, #63	; 0x3f
   1763c:	b	16aec <__assert_fail@plt+0x55e8>
   17640:	ldr	r3, [sp, #32]
   17644:	cmp	r3, #0
   17648:	bne	17a20 <__assert_fail@plt+0x651c>
   1764c:	mov	r6, r3
   17650:	mov	r5, #63	; 0x3f
   17654:	b	16b34 <__assert_fail@plt+0x5630>
   17658:	ldr	r3, [sp, #24]
   1765c:	cmn	r3, #1
   17660:	mov	r3, #0
   17664:	str	r3, [sp, #108]	; 0x6c
   17668:	str	r3, [sp, #112]	; 0x70
   1766c:	bne	1767c <__assert_fail@plt+0x6178>
   17670:	ldr	r0, [sp, #36]	; 0x24
   17674:	bl	113c0 <strlen@plt>
   17678:	str	r0, [sp, #24]
   1767c:	mov	r3, #0
   17680:	str	sl, [sp, #88]	; 0x58
   17684:	ldr	sl, [sp, #36]	; 0x24
   17688:	str	r5, [sp, #92]	; 0x5c
   1768c:	mov	r5, r3
   17690:	str	r7, [sp, #96]	; 0x60
   17694:	str	r4, [sp, #100]	; 0x64
   17698:	str	r8, [sp, #84]	; 0x54
   1769c:	ldr	r3, [sp, #24]
   176a0:	add	r4, r9, r5
   176a4:	add	r7, sl, r4
   176a8:	sub	r2, r3, r4
   176ac:	mov	r1, r7
   176b0:	add	r3, sp, #108	; 0x6c
   176b4:	add	r0, sp, #104	; 0x68
   176b8:	bl	19d0c <__assert_fail@plt+0x8808>
   176bc:	subs	r8, r0, #0
   176c0:	beq	17710 <__assert_fail@plt+0x620c>
   176c4:	cmn	r8, #1
   176c8:	beq	17a70 <__assert_fail@plt+0x656c>
   176cc:	cmn	r8, #2
   176d0:	beq	17b90 <__assert_fail@plt+0x668c>
   176d4:	ldr	r3, [sp, #32]
   176d8:	cmp	fp, #2
   176dc:	movne	r3, #0
   176e0:	andeq	r3, r3, #1
   176e4:	cmp	r3, #0
   176e8:	bne	17870 <__assert_fail@plt+0x636c>
   176ec:	ldr	r0, [sp, #104]	; 0x68
   176f0:	bl	11294 <iswprint@plt>
   176f4:	add	r5, r5, r8
   176f8:	cmp	r0, #0
   176fc:	add	r0, sp, #108	; 0x6c
   17700:	moveq	r6, #0
   17704:	bl	11228 <mbsinit@plt>
   17708:	cmp	r0, #0
   1770c:	beq	1769c <__assert_fail@plt+0x6198>
   17710:	ldr	r3, [sp, #28]
   17714:	mov	ip, r5
   17718:	eor	r2, r6, #1
   1771c:	ldr	r5, [sp, #92]	; 0x5c
   17720:	ldr	r7, [sp, #96]	; 0x60
   17724:	ldr	r4, [sp, #100]	; 0x64
   17728:	ldr	r8, [sp, #84]	; 0x54
   1772c:	ldr	sl, [sp, #88]	; 0x58
   17730:	and	r2, r2, r3
   17734:	cmp	ip, #1
   17738:	bls	17038 <__assert_fail@plt+0x5b34>
   1773c:	add	r1, ip, r9
   17740:	ldr	lr, [sp, #48]	; 0x30
   17744:	mov	r0, #0
   17748:	str	r6, [sp, #48]	; 0x30
   1774c:	mov	ip, #39	; 0x27
   17750:	ldr	r6, [sp, #44]	; 0x2c
   17754:	b	1780c <__assert_fail@plt+0x6308>
   17758:	ldr	r0, [sp, #32]
   1775c:	sub	r3, fp, #2
   17760:	cmp	r0, #0
   17764:	clz	r3, r3
   17768:	lsr	r3, r3, #5
   1776c:	bne	17974 <__assert_fail@plt+0x6470>
   17770:	eor	r0, r6, #1
   17774:	ands	r3, r3, r0
   17778:	beq	177a8 <__assert_fail@plt+0x62a4>
   1777c:	add	r0, r4, #1
   17780:	cmp	sl, r4
   17784:	strbhi	ip, [r8, r4]
   17788:	cmp	sl, r0
   1778c:	movhi	r6, #36	; 0x24
   17790:	strbhi	r6, [r8, r0]
   17794:	add	r0, r4, #2
   17798:	mov	r6, r3
   1779c:	add	r4, r4, #3
   177a0:	cmp	sl, r0
   177a4:	strbhi	ip, [r8, r0]
   177a8:	cmp	sl, r4
   177ac:	movhi	r3, #92	; 0x5c
   177b0:	strbhi	r3, [r8, r4]
   177b4:	add	r3, r4, #1
   177b8:	cmp	sl, r3
   177bc:	lsrhi	r0, r5, #6
   177c0:	addhi	r0, r0, #48	; 0x30
   177c4:	strbhi	r0, [r8, r3]
   177c8:	add	r0, r4, #2
   177cc:	cmp	sl, r0
   177d0:	lsrhi	r3, r5, #3
   177d4:	andhi	r3, r3, #7
   177d8:	addhi	r3, r3, #48	; 0x30
   177dc:	add	r9, r9, #1
   177e0:	strbhi	r3, [r8, r0]
   177e4:	and	r5, r5, #7
   177e8:	cmp	r9, r1
   177ec:	add	r5, r5, #48	; 0x30
   177f0:	add	r4, r4, #3
   177f4:	bcs	17994 <__assert_fail@plt+0x6490>
   177f8:	mov	r0, r2
   177fc:	cmp	sl, r4
   17800:	strbhi	r5, [r8, r4]
   17804:	ldrb	r5, [lr, #1]!
   17808:	add	r4, r4, #1
   1780c:	cmp	r2, #0
   17810:	bne	17758 <__assert_fail@plt+0x6254>
   17814:	eor	r3, r0, #1
   17818:	and	r3, r3, r6
   1781c:	cmp	r7, #0
   17820:	uxtb	r3, r3
   17824:	beq	17838 <__assert_fail@plt+0x6334>
   17828:	cmp	sl, r4
   1782c:	movhi	r7, #92	; 0x5c
   17830:	strbhi	r7, [r8, r4]
   17834:	add	r4, r4, #1
   17838:	add	r9, r9, #1
   1783c:	cmp	r9, r1
   17840:	bcs	17988 <__assert_fail@plt+0x6484>
   17844:	cmp	r3, #0
   17848:	beq	179b4 <__assert_fail@plt+0x64b0>
   1784c:	cmp	sl, r4
   17850:	add	r3, r4, #1
   17854:	strbhi	ip, [r8, r4]
   17858:	mov	r7, #0
   1785c:	cmp	sl, r3
   17860:	strbhi	ip, [r8, r3]
   17864:	add	r4, r4, #2
   17868:	mov	r6, r7
   1786c:	b	177fc <__assert_fail@plt+0x62f8>
   17870:	cmp	r8, #1
   17874:	beq	176ec <__assert_fail@plt+0x61e8>
   17878:	add	r1, r4, #1
   1787c:	add	r3, sl, r8
   17880:	add	r1, sl, r1
   17884:	add	r4, r3, r4
   17888:	ldrb	r3, [r1], #1
   1788c:	sub	r3, r3, #91	; 0x5b
   17890:	cmp	r3, #33	; 0x21
   17894:	ldrls	pc, [pc, r3, lsl #2]
   17898:	b	17924 <__assert_fail@plt+0x6420>
   1789c:	andeq	r7, r1, r0, lsr r9
   178a0:	andeq	r7, r1, r0, lsr r9
   178a4:	andeq	r7, r1, r4, lsr #18
   178a8:	andeq	r7, r1, r0, lsr r9
   178ac:	andeq	r7, r1, r4, lsr #18
   178b0:	andeq	r7, r1, r0, lsr r9
   178b4:	andeq	r7, r1, r4, lsr #18
   178b8:	andeq	r7, r1, r4, lsr #18
   178bc:	andeq	r7, r1, r4, lsr #18
   178c0:	andeq	r7, r1, r4, lsr #18
   178c4:	andeq	r7, r1, r4, lsr #18
   178c8:	andeq	r7, r1, r4, lsr #18
   178cc:	andeq	r7, r1, r4, lsr #18
   178d0:	andeq	r7, r1, r4, lsr #18
   178d4:	andeq	r7, r1, r4, lsr #18
   178d8:	andeq	r7, r1, r4, lsr #18
   178dc:	andeq	r7, r1, r4, lsr #18
   178e0:	andeq	r7, r1, r4, lsr #18
   178e4:	andeq	r7, r1, r4, lsr #18
   178e8:	andeq	r7, r1, r4, lsr #18
   178ec:	andeq	r7, r1, r4, lsr #18
   178f0:	andeq	r7, r1, r4, lsr #18
   178f4:	andeq	r7, r1, r4, lsr #18
   178f8:	andeq	r7, r1, r4, lsr #18
   178fc:	andeq	r7, r1, r4, lsr #18
   17900:	andeq	r7, r1, r4, lsr #18
   17904:	andeq	r7, r1, r4, lsr #18
   17908:	andeq	r7, r1, r4, lsr #18
   1790c:	andeq	r7, r1, r4, lsr #18
   17910:	andeq	r7, r1, r4, lsr #18
   17914:	andeq	r7, r1, r4, lsr #18
   17918:	andeq	r7, r1, r4, lsr #18
   1791c:	andeq	r7, r1, r4, lsr #18
   17920:	andeq	r7, r1, r0, lsr r9
   17924:	cmp	r4, r1
   17928:	bne	17888 <__assert_fail@plt+0x6384>
   1792c:	b	176ec <__assert_fail@plt+0x61e8>
   17930:	ldr	fp, [sp, #84]	; 0x54
   17934:	ldr	sl, [sp, #88]	; 0x58
   17938:	mov	r8, #2
   1793c:	b	16df8 <__assert_fail@plt+0x58f4>
   17940:	cmp	sl, r4
   17944:	movls	r1, r4
   17948:	bls	16f48 <__assert_fail@plt+0x5a44>
   1794c:	ldr	r3, [sp, #44]	; 0x2c
   17950:	b	16f38 <__assert_fail@plt+0x5a34>
   17954:	str	sl, [sp, #72]	; 0x48
   17958:	ldr	sl, [sp, #32]
   1795c:	b	16d70 <__assert_fail@plt+0x586c>
   17960:	add	r9, r9, #1
   17964:	b	16664 <__assert_fail@plt+0x5160>
   17968:	ldr	r2, [sp, #28]
   1796c:	mov	r6, #0
   17970:	b	1773c <__assert_fail@plt+0x6238>
   17974:	str	fp, [sp, #160]	; 0xa0
   17978:	str	r3, [sp, #28]
   1797c:	mov	fp, r8
   17980:	ldr	r8, [sp, #160]	; 0xa0
   17984:	b	16df8 <__assert_fail@plt+0x58f4>
   17988:	str	r6, [sp, #44]	; 0x2c
   1798c:	ldr	r6, [sp, #48]	; 0x30
   17990:	b	16da0 <__assert_fail@plt+0x589c>
   17994:	str	r6, [sp, #44]	; 0x2c
   17998:	ldr	r6, [sp, #48]	; 0x30
   1799c:	b	16bac <__assert_fail@plt+0x56a8>
   179a0:	add	r4, r4, #4
   179a4:	str	r3, [sp, #44]	; 0x2c
   179a8:	mov	r6, #0
   179ac:	mov	r5, #48	; 0x30
   179b0:	b	16b34 <__assert_fail@plt+0x5630>
   179b4:	mov	r7, r3
   179b8:	b	177fc <__assert_fail@plt+0x62f8>
   179bc:	ldr	r3, [pc, #-1624]	; 1736c <__assert_fail@plt+0x5e68>
   179c0:	mov	r4, #1
   179c4:	str	r4, [sp, #40]	; 0x28
   179c8:	str	r4, [sp, #28]
   179cc:	str	r4, [sp, #52]	; 0x34
   179d0:	str	sl, [sp, #72]	; 0x48
   179d4:	str	sl, [sp, #68]	; 0x44
   179d8:	str	sl, [sp, #44]	; 0x2c
   179dc:	str	sl, [sp, #32]
   179e0:	str	r3, [sp, #60]	; 0x3c
   179e4:	b	16654 <__assert_fail@plt+0x5150>
   179e8:	mov	r3, r6
   179ec:	mov	r5, #48	; 0x30
   179f0:	mov	r6, #0
   179f4:	b	16b34 <__assert_fail@plt+0x5630>
   179f8:	cmp	sl, r4
   179fc:	movhi	r3, #48	; 0x30
   17a00:	strbhi	r3, [r8, r4]
   17a04:	add	r3, r1, #2
   17a08:	cmp	sl, r3
   17a0c:	movhi	r0, #48	; 0x30
   17a10:	strbhi	r0, [r8, r3]
   17a14:	add	r4, r1, #3
   17a18:	mov	r5, #48	; 0x30
   17a1c:	b	16f7c <__assert_fail@plt+0x5a78>
   17a20:	str	fp, [sp, #160]	; 0xa0
   17a24:	mov	fp, r8
   17a28:	ldr	r8, [sp, #160]	; 0xa0
   17a2c:	b	16df8 <__assert_fail@plt+0x58f4>
   17a30:	ldr	r2, [sp, #80]	; 0x50
   17a34:	ldrb	r3, [r2]
   17a38:	cmp	r3, #0
   17a3c:	beq	16624 <__assert_fail@plt+0x5120>
   17a40:	cmp	sl, r4
   17a44:	strbhi	r3, [fp, r4]
   17a48:	ldrb	r3, [r2, #1]!
   17a4c:	add	r4, r4, #1
   17a50:	cmp	r3, #0
   17a54:	bne	17a40 <__assert_fail@plt+0x653c>
   17a58:	b	16624 <__assert_fail@plt+0x5120>
   17a5c:	str	fp, [sp, #160]	; 0xa0
   17a60:	mov	r3, #0
   17a64:	mov	fp, r8
   17a68:	ldr	r8, [sp, #160]	; 0xa0
   17a6c:	b	16e8c <__assert_fail@plt+0x5988>
   17a70:	mov	ip, r5
   17a74:	ldr	r7, [sp, #96]	; 0x60
   17a78:	ldr	r5, [sp, #92]	; 0x5c
   17a7c:	ldr	r4, [sp, #100]	; 0x64
   17a80:	ldr	r8, [sp, #84]	; 0x54
   17a84:	ldr	sl, [sp, #88]	; 0x58
   17a88:	ldr	r2, [sp, #28]
   17a8c:	mov	r6, #0
   17a90:	b	17734 <__assert_fail@plt+0x6230>
   17a94:	ldr	r2, [sp, #36]	; 0x24
   17a98:	ldrb	r1, [r2, r3]
   17a9c:	sub	r2, r1, #33	; 0x21
   17aa0:	cmp	r2, #29
   17aa4:	ldrls	pc, [pc, r2, lsl #2]
   17aa8:	b	17b84 <__assert_fail@plt+0x6680>
   17aac:	andeq	r7, r1, r4, lsr #22
   17ab0:	andeq	r7, r1, r4, lsl #23
   17ab4:	andeq	r7, r1, r4, lsl #23
   17ab8:	andeq	r7, r1, r4, lsl #23
   17abc:	andeq	r7, r1, r4, lsl #23
   17ac0:	andeq	r7, r1, r4, lsl #23
   17ac4:	andeq	r7, r1, r4, lsr #22
   17ac8:	andeq	r7, r1, r4, lsr #22
   17acc:	andeq	r7, r1, r4, lsr #22
   17ad0:	andeq	r7, r1, r4, lsl #23
   17ad4:	andeq	r7, r1, r4, lsl #23
   17ad8:	andeq	r7, r1, r4, lsl #23
   17adc:	andeq	r7, r1, r4, lsr #22
   17ae0:	andeq	r7, r1, r4, lsl #23
   17ae4:	andeq	r7, r1, r4, lsr #22
   17ae8:	andeq	r7, r1, r4, lsl #23
   17aec:	andeq	r7, r1, r4, lsl #23
   17af0:	andeq	r7, r1, r4, lsl #23
   17af4:	andeq	r7, r1, r4, lsl #23
   17af8:	andeq	r7, r1, r4, lsl #23
   17afc:	andeq	r7, r1, r4, lsl #23
   17b00:	andeq	r7, r1, r4, lsl #23
   17b04:	andeq	r7, r1, r4, lsl #23
   17b08:	andeq	r7, r1, r4, lsl #23
   17b0c:	andeq	r7, r1, r4, lsl #23
   17b10:	andeq	r7, r1, r4, lsl #23
   17b14:	andeq	r7, r1, r4, lsl #23
   17b18:	andeq	r7, r1, r4, lsr #22
   17b1c:	andeq	r7, r1, r4, lsr #22
   17b20:	andeq	r7, r1, r4, lsr #22
   17b24:	ldr	r2, [sp, #32]
   17b28:	cmp	r2, #0
   17b2c:	bne	17c30 <__assert_fail@plt+0x672c>
   17b30:	cmp	sl, r4
   17b34:	movhi	r2, #63	; 0x3f
   17b38:	strbhi	r2, [r8, r4]
   17b3c:	add	r2, r4, #1
   17b40:	cmp	sl, r2
   17b44:	movhi	r0, #34	; 0x22
   17b48:	strbhi	r0, [r8, r2]
   17b4c:	add	r2, r4, #2
   17b50:	cmp	sl, r2
   17b54:	movhi	r0, #34	; 0x22
   17b58:	strbhi	r0, [r8, r2]
   17b5c:	add	r2, r4, #3
   17b60:	cmp	sl, r2
   17b64:	movhi	r0, #63	; 0x3f
   17b68:	strbhi	r0, [r8, r2]
   17b6c:	mov	r2, #0
   17b70:	add	r4, r4, #4
   17b74:	mov	r5, r1
   17b78:	mov	r9, r3
   17b7c:	mov	r6, r2
   17b80:	b	16f7c <__assert_fail@plt+0x5a78>
   17b84:	mov	r2, #0
   17b88:	mov	r6, r2
   17b8c:	b	16aec <__assert_fail@plt+0x55e8>
   17b90:	ldr	r0, [sp, #24]
   17b94:	mov	r1, r4
   17b98:	cmp	r1, r0
   17b9c:	mov	r2, r7
   17ba0:	mov	r3, r5
   17ba4:	mov	ip, r5
   17ba8:	ldr	r7, [sp, #96]	; 0x60
   17bac:	ldr	r5, [sp, #92]	; 0x5c
   17bb0:	ldr	r4, [sp, #100]	; 0x64
   17bb4:	ldr	r8, [sp, #84]	; 0x54
   17bb8:	ldr	sl, [sp, #88]	; 0x58
   17bbc:	bcs	17bf0 <__assert_fail@plt+0x66ec>
   17bc0:	ldrb	r6, [r2]
   17bc4:	cmp	r6, #0
   17bc8:	bne	17bdc <__assert_fail@plt+0x66d8>
   17bcc:	b	17d0c <__assert_fail@plt+0x6808>
   17bd0:	ldrb	r6, [r2, #1]!
   17bd4:	cmp	r6, #0
   17bd8:	beq	17c94 <__assert_fail@plt+0x6790>
   17bdc:	add	r3, r3, #1
   17be0:	add	r1, r9, r3
   17be4:	cmp	r1, r0
   17be8:	bcc	17bd0 <__assert_fail@plt+0x66cc>
   17bec:	mov	ip, r3
   17bf0:	ldr	r2, [sp, #28]
   17bf4:	mov	r6, #0
   17bf8:	b	17734 <__assert_fail@plt+0x6230>
   17bfc:	mov	r3, #1
   17c00:	str	r3, [sp, #40]	; 0x28
   17c04:	str	r3, [sp, #32]
   17c08:	str	r3, [sp, #28]
   17c0c:	str	r3, [sp, #52]	; 0x34
   17c10:	ldr	r3, [pc, #-2220]	; 1736c <__assert_fail@plt+0x5e68>
   17c14:	mov	r2, #0
   17c18:	str	r2, [sp, #68]	; 0x44
   17c1c:	str	r2, [sp, #44]	; 0x2c
   17c20:	str	r2, [sp, #72]	; 0x48
   17c24:	mov	r4, r2
   17c28:	str	r3, [sp, #60]	; 0x3c
   17c2c:	b	16654 <__assert_fail@plt+0x5150>
   17c30:	str	fp, [sp, #160]	; 0xa0
   17c34:	mov	fp, r8
   17c38:	ldr	r8, [sp, #160]	; 0xa0
   17c3c:	b	16e04 <__assert_fail@plt+0x5900>
   17c40:	mov	r2, r3
   17c44:	ldr	r3, [sp, #60]	; 0x3c
   17c48:	cmp	r3, #0
   17c4c:	moveq	r2, #0
   17c50:	andne	r2, r2, #1
   17c54:	cmp	r2, #0
   17c58:	beq	17c84 <__assert_fail@plt+0x6780>
   17c5c:	mov	r2, r3
   17c60:	ldrb	r3, [r3]
   17c64:	cmp	r3, #0
   17c68:	beq	17c84 <__assert_fail@plt+0x6780>
   17c6c:	cmp	sl, r4
   17c70:	strbhi	r3, [fp, r4]
   17c74:	ldrb	r3, [r2, #1]!
   17c78:	add	r4, r4, #1
   17c7c:	cmp	r3, #0
   17c80:	bne	17c6c <__assert_fail@plt+0x6768>
   17c84:	cmp	sl, r4
   17c88:	movhi	r3, #0
   17c8c:	strbhi	r3, [fp, r4]
   17c90:	b	16e44 <__assert_fail@plt+0x5940>
   17c94:	mov	ip, r3
   17c98:	ldr	r2, [sp, #28]
   17c9c:	b	17734 <__assert_fail@plt+0x6230>
   17ca0:	str	fp, [sp, #160]	; 0xa0
   17ca4:	mov	fp, r8
   17ca8:	ldr	r8, [sp, #160]	; 0xa0
   17cac:	sub	r3, r8, #2
   17cb0:	clz	r3, r3
   17cb4:	lsr	r3, r3, #5
   17cb8:	str	r3, [sp, #28]
   17cbc:	b	16df8 <__assert_fail@plt+0x58f4>
   17cc0:	ldr	r3, [sp, #76]	; 0x4c
   17cc4:	mov	ip, #5
   17cc8:	str	r3, [sp, #16]
   17ccc:	ldr	r3, [sp, #80]	; 0x50
   17cd0:	ldr	r2, [sp, #36]	; 0x24
   17cd4:	str	r3, [sp, #12]
   17cd8:	ldr	r3, [sp, #56]	; 0x38
   17cdc:	ldr	r1, [sp, #72]	; 0x48
   17ce0:	str	r3, [sp, #8]
   17ce4:	ldr	r3, [sp, #164]	; 0xa4
   17ce8:	mov	r0, fp
   17cec:	str	r3, [sp, #4]
   17cf0:	str	ip, [sp]
   17cf4:	ldr	r3, [sp, #24]
   17cf8:	bl	1655c <__assert_fail@plt+0x5058>
   17cfc:	mov	r4, r0
   17d00:	b	16e44 <__assert_fail@plt+0x5940>
   17d04:	mov	r8, #2
   17d08:	b	16df8 <__assert_fail@plt+0x58f4>
   17d0c:	ldr	r2, [sp, #28]
   17d10:	b	17734 <__assert_fail@plt+0x6230>
   17d14:	mov	r3, #0
   17d18:	str	r3, [sp, #68]	; 0x44
   17d1c:	str	r3, [sp, #44]	; 0x2c
   17d20:	str	r3, [sp, #72]	; 0x48
   17d24:	str	r3, [sp, #28]
   17d28:	mov	r4, r3
   17d2c:	ldr	r3, [pc, #-2500]	; 17370 <__assert_fail@plt+0x5e6c>
   17d30:	mov	r2, #1
   17d34:	str	r2, [sp, #40]	; 0x28
   17d38:	str	r2, [sp, #32]
   17d3c:	str	r2, [sp, #52]	; 0x34
   17d40:	str	r3, [sp, #60]	; 0x3c
   17d44:	b	16654 <__assert_fail@plt+0x5150>
   17d48:	bl	11258 <__stack_chk_fail@plt>
   17d4c:	mov	r5, r3
   17d50:	mov	r6, #0
   17d54:	b	16b48 <__assert_fail@plt+0x5644>
   17d58:	mov	r3, #0
   17d5c:	mov	r2, #1
   17d60:	str	r3, [sp, #44]	; 0x2c
   17d64:	str	r3, [sp, #72]	; 0x48
   17d68:	str	r2, [sp, #40]	; 0x28
   17d6c:	b	16c64 <__assert_fail@plt+0x5760>
   17d70:	bl	114d4 <abort@plt>
   17d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d78:	sub	sp, sp, #44	; 0x2c
   17d7c:	mov	r6, r0
   17d80:	mov	r4, r3
   17d84:	mov	sl, r1
   17d88:	mov	fp, r2
   17d8c:	bl	113e4 <__errno_location@plt>
   17d90:	ldr	r7, [pc, #364]	; 17f04 <__assert_fail@plt+0x6a00>
   17d94:	cmp	r6, #0
   17d98:	ldr	r5, [r7]
   17d9c:	ldr	r3, [r0]
   17da0:	str	r3, [sp, #24]
   17da4:	blt	17f00 <__assert_fail@plt+0x69fc>
   17da8:	ldr	r3, [r7, #4]
   17dac:	mov	r8, r0
   17db0:	cmp	r3, r6
   17db4:	bgt	17e00 <__assert_fail@plt+0x68fc>
   17db8:	cmn	r6, #-268435454	; 0xf0000002
   17dbc:	bgt	17efc <__assert_fail@plt+0x69f8>
   17dc0:	add	r9, r6, #1
   17dc4:	add	r3, r7, #8
   17dc8:	cmp	r5, r3
   17dcc:	lsl	r1, r9, #3
   17dd0:	beq	17edc <__assert_fail@plt+0x69d8>
   17dd4:	mov	r0, r5
   17dd8:	bl	18c44 <__assert_fail@plt+0x7740>
   17ddc:	mov	r5, r0
   17de0:	str	r0, [r7]
   17de4:	ldr	r0, [r7, #4]
   17de8:	mov	r1, #0
   17dec:	sub	r2, r9, r0
   17df0:	add	r0, r5, r0, lsl #3
   17df4:	lsl	r2, r2, #3
   17df8:	bl	11408 <memset@plt>
   17dfc:	str	r9, [r7, #4]
   17e00:	add	r3, r5, r6, lsl #3
   17e04:	ldr	r1, [r4, #4]
   17e08:	ldr	r7, [r3, #4]
   17e0c:	ldr	r9, [r5, r6, lsl #3]
   17e10:	ldr	r2, [r4, #40]	; 0x28
   17e14:	ldr	ip, [r4, #44]	; 0x2c
   17e18:	str	r3, [sp, #28]
   17e1c:	ldr	r3, [r4]
   17e20:	orr	r1, r1, #1
   17e24:	add	lr, r4, #8
   17e28:	str	r1, [sp, #36]	; 0x24
   17e2c:	str	r1, [sp, #4]
   17e30:	str	r2, [sp, #12]
   17e34:	str	r3, [sp]
   17e38:	mov	r0, r7
   17e3c:	mov	r1, r9
   17e40:	str	ip, [sp, #16]
   17e44:	str	lr, [sp, #8]
   17e48:	mov	r3, fp
   17e4c:	mov	r2, sl
   17e50:	str	lr, [sp, #32]
   17e54:	bl	1655c <__assert_fail@plt+0x5058>
   17e58:	cmp	r9, r0
   17e5c:	bhi	17ec8 <__assert_fail@plt+0x69c4>
   17e60:	ldr	r3, [pc, #160]	; 17f08 <__assert_fail@plt+0x6a04>
   17e64:	add	r9, r0, #1
   17e68:	cmp	r7, r3
   17e6c:	str	r9, [r5, r6, lsl #3]
   17e70:	beq	17e7c <__assert_fail@plt+0x6978>
   17e74:	mov	r0, r7
   17e78:	bl	111ec <free@plt>
   17e7c:	mov	r0, r9
   17e80:	bl	18be8 <__assert_fail@plt+0x76e4>
   17e84:	ldr	lr, [sp, #28]
   17e88:	ldr	ip, [r4, #44]	; 0x2c
   17e8c:	ldr	r5, [r4, #40]	; 0x28
   17e90:	mov	r3, fp
   17e94:	mov	r2, sl
   17e98:	mov	r1, r9
   17e9c:	str	r0, [lr, #4]
   17ea0:	ldr	lr, [r4]
   17ea4:	ldr	r4, [sp, #32]
   17ea8:	str	ip, [sp, #16]
   17eac:	str	r4, [sp, #8]
   17eb0:	ldr	r4, [sp, #36]	; 0x24
   17eb4:	str	r5, [sp, #12]
   17eb8:	str	r4, [sp, #4]
   17ebc:	str	lr, [sp]
   17ec0:	mov	r7, r0
   17ec4:	bl	1655c <__assert_fail@plt+0x5058>
   17ec8:	ldr	r3, [sp, #24]
   17ecc:	mov	r0, r7
   17ed0:	str	r3, [r8]
   17ed4:	add	sp, sp, #44	; 0x2c
   17ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17edc:	mov	r0, #0
   17ee0:	bl	18c44 <__assert_fail@plt+0x7740>
   17ee4:	ldr	r3, [pc, #32]	; 17f0c <__assert_fail@plt+0x6a08>
   17ee8:	mov	r5, r0
   17eec:	ldm	r3, {r0, r1}
   17ef0:	str	r5, [r7]
   17ef4:	stm	r5, {r0, r1}
   17ef8:	b	17de4 <__assert_fail@plt+0x68e0>
   17efc:	bl	18e30 <__assert_fail@plt+0x792c>
   17f00:	bl	114d4 <abort@plt>
   17f04:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   17f08:	andeq	pc, r2, r8, asr r4	; <UNPREDICTABLE>
   17f0c:	andeq	pc, r2, r0, lsl #3
   17f10:	push	{r4, r5, r6, lr}
   17f14:	mov	r5, r0
   17f18:	bl	113e4 <__errno_location@plt>
   17f1c:	cmp	r5, #0
   17f20:	mov	r1, #48	; 0x30
   17f24:	mov	r4, r0
   17f28:	ldr	r0, [pc, #16]	; 17f40 <__assert_fail@plt+0x6a3c>
   17f2c:	ldr	r6, [r4]
   17f30:	movne	r0, r5
   17f34:	bl	18df0 <__assert_fail@plt+0x78ec>
   17f38:	str	r6, [r4]
   17f3c:	pop	{r4, r5, r6, pc}
   17f40:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   17f44:	ldr	r3, [pc, #12]	; 17f58 <__assert_fail@plt+0x6a54>
   17f48:	cmp	r0, #0
   17f4c:	moveq	r0, r3
   17f50:	ldr	r0, [r0]
   17f54:	bx	lr
   17f58:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   17f5c:	ldr	r3, [pc, #12]	; 17f70 <__assert_fail@plt+0x6a6c>
   17f60:	cmp	r0, #0
   17f64:	moveq	r0, r3
   17f68:	str	r1, [r0]
   17f6c:	bx	lr
   17f70:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   17f74:	ldr	r3, [pc, #52]	; 17fb0 <__assert_fail@plt+0x6aac>
   17f78:	cmp	r0, #0
   17f7c:	moveq	r0, r3
   17f80:	add	r3, r0, #8
   17f84:	push	{lr}		; (str lr, [sp, #-4]!)
   17f88:	lsr	lr, r1, #5
   17f8c:	and	r1, r1, #31
   17f90:	ldr	ip, [r3, lr, lsl #2]
   17f94:	lsr	r0, ip, r1
   17f98:	eor	r2, r2, r0
   17f9c:	and	r2, r2, #1
   17fa0:	and	r0, r0, #1
   17fa4:	eor	r1, ip, r2, lsl r1
   17fa8:	str	r1, [r3, lr, lsl #2]
   17fac:	pop	{pc}		; (ldr pc, [sp], #4)
   17fb0:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   17fb4:	ldr	r3, [pc, #16]	; 17fcc <__assert_fail@plt+0x6ac8>
   17fb8:	cmp	r0, #0
   17fbc:	movne	r3, r0
   17fc0:	ldr	r0, [r3, #4]
   17fc4:	str	r1, [r3, #4]
   17fc8:	bx	lr
   17fcc:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   17fd0:	ldr	r3, [pc, #44]	; 18004 <__assert_fail@plt+0x6b00>
   17fd4:	cmp	r0, #0
   17fd8:	moveq	r0, r3
   17fdc:	mov	ip, #10
   17fe0:	cmp	r2, #0
   17fe4:	cmpne	r1, #0
   17fe8:	str	ip, [r0]
   17fec:	beq	17ffc <__assert_fail@plt+0x6af8>
   17ff0:	str	r1, [r0, #40]	; 0x28
   17ff4:	str	r2, [r0, #44]	; 0x2c
   17ff8:	bx	lr
   17ffc:	push	{r4, lr}
   18000:	bl	114d4 <abort@plt>
   18004:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   18008:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1800c:	sub	sp, sp, #24
   18010:	ldr	ip, [pc, #108]	; 18084 <__assert_fail@plt+0x6b80>
   18014:	ldr	r4, [sp, #56]	; 0x38
   18018:	mov	r9, r2
   1801c:	cmp	r4, #0
   18020:	moveq	r4, ip
   18024:	mov	sl, r3
   18028:	mov	r7, r0
   1802c:	mov	r8, r1
   18030:	bl	113e4 <__errno_location@plt>
   18034:	ldr	r3, [r4, #44]	; 0x2c
   18038:	mov	r1, r8
   1803c:	ldr	r6, [r0]
   18040:	str	r3, [sp, #16]
   18044:	ldr	r2, [r4, #40]	; 0x28
   18048:	add	r3, r4, #8
   1804c:	str	r3, [sp, #8]
   18050:	str	r2, [sp, #12]
   18054:	ldr	r2, [r4, #4]
   18058:	mov	r5, r0
   1805c:	str	r2, [sp, #4]
   18060:	ldr	ip, [r4]
   18064:	mov	r3, sl
   18068:	mov	r2, r9
   1806c:	mov	r0, r7
   18070:	str	ip, [sp]
   18074:	bl	1655c <__assert_fail@plt+0x5058>
   18078:	str	r6, [r5]
   1807c:	add	sp, sp, #24
   18080:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18084:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   18088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1808c:	cmp	r3, #0
   18090:	sub	sp, sp, #44	; 0x2c
   18094:	ldr	r4, [pc, #192]	; 1815c <__assert_fail@plt+0x6c58>
   18098:	mov	r6, r2
   1809c:	movne	r4, r3
   180a0:	mov	r9, r1
   180a4:	mov	r8, r0
   180a8:	bl	113e4 <__errno_location@plt>
   180ac:	ldr	r3, [r4, #44]	; 0x2c
   180b0:	ldr	r5, [r4, #4]
   180b4:	add	sl, r4, #8
   180b8:	cmp	r6, #0
   180bc:	orreq	r5, r5, #1
   180c0:	mov	r1, #0
   180c4:	ldr	r2, [r0]
   180c8:	str	r3, [sp, #16]
   180cc:	ldr	r3, [r4, #40]	; 0x28
   180d0:	stmib	sp, {r5, sl}
   180d4:	str	r3, [sp, #12]
   180d8:	ldr	r3, [r4]
   180dc:	mov	r7, r0
   180e0:	str	r2, [sp, #28]
   180e4:	str	r3, [sp]
   180e8:	mov	r2, r8
   180ec:	mov	r3, r9
   180f0:	mov	r0, r1
   180f4:	bl	1655c <__assert_fail@plt+0x5058>
   180f8:	add	r1, r0, #1
   180fc:	mov	fp, r0
   18100:	mov	r0, r1
   18104:	str	r1, [sp, #36]	; 0x24
   18108:	bl	18be8 <__assert_fail@plt+0x76e4>
   1810c:	ldr	r3, [r4, #44]	; 0x2c
   18110:	mov	r2, r8
   18114:	str	r3, [sp, #16]
   18118:	ldr	r3, [r4, #40]	; 0x28
   1811c:	str	r5, [sp, #4]
   18120:	str	r3, [sp, #12]
   18124:	str	sl, [sp, #8]
   18128:	ldr	ip, [r4]
   1812c:	ldr	r1, [sp, #36]	; 0x24
   18130:	mov	r3, r9
   18134:	str	ip, [sp]
   18138:	str	r0, [sp, #32]
   1813c:	bl	1655c <__assert_fail@plt+0x5058>
   18140:	ldr	r2, [sp, #28]
   18144:	cmp	r6, #0
   18148:	str	r2, [r7]
   1814c:	ldr	r0, [sp, #32]
   18150:	strne	fp, [r6]
   18154:	add	sp, sp, #44	; 0x2c
   18158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1815c:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   18160:	mov	r3, r2
   18164:	mov	r2, #0
   18168:	b	18088 <__assert_fail@plt+0x6b84>
   1816c:	push	{r4, r5, r6, r7, r8, lr}
   18170:	ldr	r6, [pc, #112]	; 181e8 <__assert_fail@plt+0x6ce4>
   18174:	ldr	r3, [r6, #4]
   18178:	ldr	r7, [r6]
   1817c:	cmp	r3, #1
   18180:	ble	181a4 <__assert_fail@plt+0x6ca0>
   18184:	sub	r5, r7, #8
   18188:	add	r5, r5, r3, lsl #3
   1818c:	mov	r4, r7
   18190:	ldr	r0, [r4, #12]
   18194:	add	r4, r4, #8
   18198:	bl	111ec <free@plt>
   1819c:	cmp	r4, r5
   181a0:	bne	18190 <__assert_fail@plt+0x6c8c>
   181a4:	ldr	r0, [r7, #4]
   181a8:	ldr	r4, [pc, #60]	; 181ec <__assert_fail@plt+0x6ce8>
   181ac:	cmp	r0, r4
   181b0:	beq	181c4 <__assert_fail@plt+0x6cc0>
   181b4:	bl	111ec <free@plt>
   181b8:	mov	r3, #256	; 0x100
   181bc:	str	r4, [r6, #12]
   181c0:	str	r3, [r6, #8]
   181c4:	ldr	r4, [pc, #36]	; 181f0 <__assert_fail@plt+0x6cec>
   181c8:	cmp	r7, r4
   181cc:	beq	181dc <__assert_fail@plt+0x6cd8>
   181d0:	mov	r0, r7
   181d4:	bl	111ec <free@plt>
   181d8:	str	r4, [r6]
   181dc:	mov	r3, #1
   181e0:	str	r3, [r6, #4]
   181e4:	pop	{r4, r5, r6, r7, r8, pc}
   181e8:	andeq	pc, r2, r8, ror r1	; <UNPREDICTABLE>
   181ec:	andeq	pc, r2, r8, asr r4	; <UNPREDICTABLE>
   181f0:	andeq	pc, r2, r0, lsl #3
   181f4:	ldr	r3, [pc, #4]	; 18200 <__assert_fail@plt+0x6cfc>
   181f8:	mvn	r2, #0
   181fc:	b	17d74 <__assert_fail@plt+0x6870>
   18200:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   18204:	ldr	r3, [pc]	; 1820c <__assert_fail@plt+0x6d08>
   18208:	b	17d74 <__assert_fail@plt+0x6870>
   1820c:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   18210:	mov	r1, r0
   18214:	ldr	r3, [pc, #8]	; 18224 <__assert_fail@plt+0x6d20>
   18218:	mvn	r2, #0
   1821c:	mov	r0, #0
   18220:	b	17d74 <__assert_fail@plt+0x6870>
   18224:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   18228:	mov	r2, r1
   1822c:	ldr	r3, [pc, #8]	; 1823c <__assert_fail@plt+0x6d38>
   18230:	mov	r1, r0
   18234:	mov	r0, #0
   18238:	b	17d74 <__assert_fail@plt+0x6870>
   1823c:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   18240:	push	{r4, r5, r6, lr}
   18244:	sub	sp, sp, #56	; 0x38
   18248:	ldr	r4, [pc, #68]	; 18294 <__assert_fail@plt+0x6d90>
   1824c:	mov	r6, r2
   18250:	mov	r5, r0
   18254:	ldr	r3, [r4]
   18258:	add	r0, sp, #4
   1825c:	str	r3, [sp, #52]	; 0x34
   18260:	bl	163ec <__assert_fail@plt+0x4ee8>
   18264:	add	r3, sp, #4
   18268:	mvn	r2, #0
   1826c:	mov	r1, r6
   18270:	mov	r0, r5
   18274:	bl	17d74 <__assert_fail@plt+0x6870>
   18278:	ldr	r2, [sp, #52]	; 0x34
   1827c:	ldr	r3, [r4]
   18280:	cmp	r2, r3
   18284:	bne	18290 <__assert_fail@plt+0x6d8c>
   18288:	add	sp, sp, #56	; 0x38
   1828c:	pop	{r4, r5, r6, pc}
   18290:	bl	11258 <__stack_chk_fail@plt>
   18294:	andeq	lr, r2, r8, lsl #30
   18298:	push	{r4, r5, r6, r7, lr}
   1829c:	sub	sp, sp, #60	; 0x3c
   182a0:	ldr	r4, [pc, #72]	; 182f0 <__assert_fail@plt+0x6dec>
   182a4:	mov	r6, r2
   182a8:	mov	r7, r3
   182ac:	ldr	ip, [r4]
   182b0:	mov	r5, r0
   182b4:	add	r0, sp, #4
   182b8:	str	ip, [sp, #52]	; 0x34
   182bc:	bl	163ec <__assert_fail@plt+0x4ee8>
   182c0:	add	r3, sp, #4
   182c4:	mov	r2, r7
   182c8:	mov	r1, r6
   182cc:	mov	r0, r5
   182d0:	bl	17d74 <__assert_fail@plt+0x6870>
   182d4:	ldr	r2, [sp, #52]	; 0x34
   182d8:	ldr	r3, [r4]
   182dc:	cmp	r2, r3
   182e0:	bne	182ec <__assert_fail@plt+0x6de8>
   182e4:	add	sp, sp, #60	; 0x3c
   182e8:	pop	{r4, r5, r6, r7, pc}
   182ec:	bl	11258 <__stack_chk_fail@plt>
   182f0:	andeq	lr, r2, r8, lsl #30
   182f4:	mov	r2, r1
   182f8:	mov	r1, r0
   182fc:	mov	r0, #0
   18300:	b	18240 <__assert_fail@plt+0x6d3c>
   18304:	mov	r3, r2
   18308:	mov	r2, r1
   1830c:	mov	r1, r0
   18310:	mov	r0, #0
   18314:	b	18298 <__assert_fail@plt+0x6d94>
   18318:	push	{r4, r5, r6, r7, r8, r9, lr}
   1831c:	mov	r4, r2
   18320:	ldr	lr, [pc, #128]	; 183a8 <__assert_fail@plt+0x6ea4>
   18324:	mov	r8, r0
   18328:	mov	r9, r1
   1832c:	ldm	lr!, {r0, r1, r2, r3}
   18330:	sub	sp, sp, #60	; 0x3c
   18334:	add	ip, sp, #4
   18338:	lsr	r6, r4, #5
   1833c:	stmia	ip!, {r0, r1, r2, r3}
   18340:	add	r7, sp, #12
   18344:	ldm	lr!, {r0, r1, r2, r3}
   18348:	and	r4, r4, #31
   1834c:	ldr	r5, [pc, #88]	; 183ac <__assert_fail@plt+0x6ea8>
   18350:	stmia	ip!, {r0, r1, r2, r3}
   18354:	ldm	lr, {r0, r1, r2, r3}
   18358:	stm	ip, {r0, r1, r2, r3}
   1835c:	mov	r2, r9
   18360:	ldr	r3, [r7, r6, lsl #2]
   18364:	ldr	ip, [r5]
   18368:	mov	r1, r8
   1836c:	mvn	r0, r3, lsr r4
   18370:	and	r0, r0, #1
   18374:	str	ip, [sp, #52]	; 0x34
   18378:	eor	r4, r3, r0, lsl r4
   1837c:	add	r3, sp, #4
   18380:	mov	r0, #0
   18384:	str	r4, [r7, r6, lsl #2]
   18388:	bl	17d74 <__assert_fail@plt+0x6870>
   1838c:	ldr	r2, [sp, #52]	; 0x34
   18390:	ldr	r3, [r5]
   18394:	cmp	r2, r3
   18398:	bne	183a4 <__assert_fail@plt+0x6ea0>
   1839c:	add	sp, sp, #60	; 0x3c
   183a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   183a4:	bl	11258 <__stack_chk_fail@plt>
   183a8:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   183ac:	andeq	lr, r2, r8, lsl #30
   183b0:	mov	r2, r1
   183b4:	mvn	r1, #0
   183b8:	b	18318 <__assert_fail@plt+0x6e14>
   183bc:	mov	r2, #58	; 0x3a
   183c0:	mvn	r1, #0
   183c4:	b	18318 <__assert_fail@plt+0x6e14>
   183c8:	mov	r2, #58	; 0x3a
   183cc:	b	18318 <__assert_fail@plt+0x6e14>
   183d0:	push	{r4, r5, r6, r7, r8, lr}
   183d4:	sub	sp, sp, #104	; 0x68
   183d8:	ldr	r5, [pc, #120]	; 18458 <__assert_fail@plt+0x6f54>
   183dc:	mov	r6, r0
   183e0:	mov	r0, sp
   183e4:	ldr	r3, [r5]
   183e8:	mov	r7, r2
   183ec:	str	r3, [sp, #100]	; 0x64
   183f0:	bl	163ec <__assert_fail@plt+0x4ee8>
   183f4:	mov	ip, sp
   183f8:	add	lr, sp, #52	; 0x34
   183fc:	ldm	ip!, {r0, r1, r2, r3}
   18400:	stmia	lr!, {r0, r1, r2, r3}
   18404:	ldm	ip!, {r0, r1, r2, r3}
   18408:	ldr	r8, [sp, #64]	; 0x40
   1840c:	stmia	lr!, {r0, r1, r2, r3}
   18410:	mvn	r4, r8
   18414:	ldm	ip, {r0, r1, r2, r3}
   18418:	and	ip, r4, #67108864	; 0x4000000
   1841c:	eor	ip, ip, r8
   18420:	str	ip, [sp, #64]	; 0x40
   18424:	stm	lr, {r0, r1, r2, r3}
   18428:	add	r3, sp, #52	; 0x34
   1842c:	mvn	r2, #0
   18430:	mov	r1, r7
   18434:	mov	r0, r6
   18438:	bl	17d74 <__assert_fail@plt+0x6870>
   1843c:	ldr	r2, [sp, #100]	; 0x64
   18440:	ldr	r3, [r5]
   18444:	cmp	r2, r3
   18448:	bne	18454 <__assert_fail@plt+0x6f50>
   1844c:	add	sp, sp, #104	; 0x68
   18450:	pop	{r4, r5, r6, r7, r8, pc}
   18454:	bl	11258 <__stack_chk_fail@plt>
   18458:	andeq	lr, r2, r8, lsl #30
   1845c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18460:	mov	r6, r1
   18464:	ldr	lr, [pc, #132]	; 184f0 <__assert_fail@plt+0x6fec>
   18468:	mov	r5, r2
   1846c:	mov	r8, r0
   18470:	mov	r9, r3
   18474:	ldm	lr!, {r0, r1, r2, r3}
   18478:	sub	sp, sp, #60	; 0x3c
   1847c:	add	ip, sp, #4
   18480:	ldr	r4, [pc, #108]	; 184f4 <__assert_fail@plt+0x6ff0>
   18484:	stmia	ip!, {r0, r1, r2, r3}
   18488:	mov	r7, #10
   1848c:	ldm	lr!, {r0, r1, r2, r3}
   18490:	cmp	r5, #0
   18494:	cmpne	r6, #0
   18498:	str	r7, [sp, #4]
   1849c:	stmia	ip!, {r0, r1, r2, r3}
   184a0:	ldm	lr, {r0, r1, r2, r3}
   184a4:	ldr	lr, [r4]
   184a8:	stm	ip, {r0, r1, r2, r3}
   184ac:	str	lr, [sp, #52]	; 0x34
   184b0:	beq	184ec <__assert_fail@plt+0x6fe8>
   184b4:	add	r3, sp, #4
   184b8:	ldr	r2, [sp, #88]	; 0x58
   184bc:	mov	r1, r9
   184c0:	mov	r0, r8
   184c4:	str	r6, [sp, #44]	; 0x2c
   184c8:	str	r5, [sp, #48]	; 0x30
   184cc:	bl	17d74 <__assert_fail@plt+0x6870>
   184d0:	ldr	r2, [sp, #52]	; 0x34
   184d4:	ldr	r3, [r4]
   184d8:	cmp	r2, r3
   184dc:	bne	184e8 <__assert_fail@plt+0x6fe4>
   184e0:	add	sp, sp, #60	; 0x3c
   184e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   184e8:	bl	11258 <__stack_chk_fail@plt>
   184ec:	bl	114d4 <abort@plt>
   184f0:	andeq	pc, r2, r8, asr r5	; <UNPREDICTABLE>
   184f4:	andeq	lr, r2, r8, lsl #30
   184f8:	push	{lr}		; (str lr, [sp, #-4]!)
   184fc:	sub	sp, sp, #12
   18500:	mvn	ip, #0
   18504:	str	ip, [sp]
   18508:	bl	1845c <__assert_fail@plt+0x6f58>
   1850c:	add	sp, sp, #12
   18510:	pop	{pc}		; (ldr pc, [sp], #4)
   18514:	push	{lr}		; (str lr, [sp, #-4]!)
   18518:	sub	sp, sp, #12
   1851c:	mvn	ip, #0
   18520:	mov	r3, r2
   18524:	str	ip, [sp]
   18528:	mov	r2, r1
   1852c:	mov	r1, r0
   18530:	mov	r0, #0
   18534:	bl	1845c <__assert_fail@plt+0x6f58>
   18538:	add	sp, sp, #12
   1853c:	pop	{pc}		; (ldr pc, [sp], #4)
   18540:	push	{lr}		; (str lr, [sp, #-4]!)
   18544:	sub	sp, sp, #12
   18548:	str	r3, [sp]
   1854c:	mov	r3, r2
   18550:	mov	r2, r1
   18554:	mov	r1, r0
   18558:	mov	r0, #0
   1855c:	bl	1845c <__assert_fail@plt+0x6f58>
   18560:	add	sp, sp, #12
   18564:	pop	{pc}		; (ldr pc, [sp], #4)
   18568:	ldr	r3, [pc]	; 18570 <__assert_fail@plt+0x706c>
   1856c:	b	17d74 <__assert_fail@plt+0x6870>
   18570:	andeq	pc, r2, r8, lsl #3
   18574:	mov	r2, r1
   18578:	ldr	r3, [pc, #8]	; 18588 <__assert_fail@plt+0x7084>
   1857c:	mov	r1, r0
   18580:	mov	r0, #0
   18584:	b	17d74 <__assert_fail@plt+0x6870>
   18588:	andeq	pc, r2, r8, lsl #3
   1858c:	ldr	r3, [pc, #4]	; 18598 <__assert_fail@plt+0x7094>
   18590:	mvn	r2, #0
   18594:	b	17d74 <__assert_fail@plt+0x6870>
   18598:	andeq	pc, r2, r8, lsl #3
   1859c:	mov	r1, r0
   185a0:	ldr	r3, [pc, #8]	; 185b0 <__assert_fail@plt+0x70ac>
   185a4:	mvn	r2, #0
   185a8:	mov	r0, #0
   185ac:	b	17d74 <__assert_fail@plt+0x6870>
   185b0:	andeq	pc, r2, r8, lsl #3
   185b4:	push	{r4, r5, r6, r7, r8, lr}
   185b8:	sub	sp, sp, #8
   185bc:	mov	r6, r0
   185c0:	mov	r7, r1
   185c4:	ldrd	r0, [sp, #32]
   185c8:	mov	r5, r2
   185cc:	mov	r8, r3
   185d0:	bl	1995c <__assert_fail@plt+0x8458>
   185d4:	subs	r4, r0, #0
   185d8:	beq	18638 <__assert_fail@plt+0x7134>
   185dc:	cmp	r5, #0
   185e0:	beq	18614 <__assert_fail@plt+0x7110>
   185e4:	ldr	ip, [pc, #120]	; 18664 <__assert_fail@plt+0x7160>
   185e8:	mov	r0, r6
   185ec:	str	r4, [sp, #4]
   185f0:	mov	r3, r8
   185f4:	mov	r2, r5
   185f8:	mov	r1, r7
   185fc:	str	ip, [sp]
   18600:	bl	11348 <error_at_line@plt>
   18604:	mov	r0, r4
   18608:	add	sp, sp, #8
   1860c:	pop	{r4, r5, r6, r7, r8, lr}
   18610:	b	111ec <free@plt>
   18614:	mov	r0, r6
   18618:	mov	r1, r7
   1861c:	mov	r3, r4
   18620:	ldr	r2, [pc, #60]	; 18664 <__assert_fail@plt+0x7160>
   18624:	bl	11318 <error@plt>
   18628:	mov	r0, r4
   1862c:	add	sp, sp, #8
   18630:	pop	{r4, r5, r6, r7, r8, lr}
   18634:	b	111ec <free@plt>
   18638:	bl	113e4 <__errno_location@plt>
   1863c:	mov	r2, #5
   18640:	ldr	r1, [pc, #32]	; 18668 <__assert_fail@plt+0x7164>
   18644:	ldr	r5, [r0]
   18648:	mov	r0, r4
   1864c:	bl	1124c <dcgettext@plt>
   18650:	mov	r1, r5
   18654:	mov	r2, r0
   18658:	mov	r0, r4
   1865c:	bl	11318 <error@plt>
   18660:	bl	114d4 <abort@plt>
   18664:	andeq	ip, r1, r4, lsl sp
   18668:	andeq	lr, r1, r4, asr #8
   1866c:	push	{lr}		; (str lr, [sp, #-4]!)
   18670:	sub	sp, sp, #12
   18674:	str	r3, [sp, #4]
   18678:	mov	r3, #0
   1867c:	str	r2, [sp]
   18680:	mov	r2, r3
   18684:	bl	185b4 <__assert_fail@plt+0x70b0>
   18688:	add	sp, sp, #12
   1868c:	pop	{pc}		; (ldr pc, [sp], #4)
   18690:	push	{r4, r5, r6, lr}
   18694:	sub	sp, sp, #32
   18698:	cmp	r1, #0
   1869c:	mov	r5, r0
   186a0:	ldr	r4, [sp, #48]	; 0x30
   186a4:	ldr	r6, [sp, #52]	; 0x34
   186a8:	beq	18738 <__assert_fail@plt+0x7234>
   186ac:	strd	r2, [sp]
   186b0:	mov	r3, r1
   186b4:	ldr	r2, [pc, #828]	; 189f8 <__assert_fail@plt+0x74f4>
   186b8:	mov	r1, #1
   186bc:	bl	11438 <__fprintf_chk@plt>
   186c0:	mov	r2, #5
   186c4:	ldr	r1, [pc, #816]	; 189fc <__assert_fail@plt+0x74f8>
   186c8:	mov	r0, #0
   186cc:	bl	1124c <dcgettext@plt>
   186d0:	ldr	r3, [pc, #808]	; 18a00 <__assert_fail@plt+0x74fc>
   186d4:	ldr	r2, [pc, #808]	; 18a04 <__assert_fail@plt+0x7500>
   186d8:	str	r3, [sp]
   186dc:	mov	r1, #1
   186e0:	mov	r3, r0
   186e4:	mov	r0, r5
   186e8:	bl	11438 <__fprintf_chk@plt>
   186ec:	ldr	r1, [pc, #788]	; 18a08 <__assert_fail@plt+0x7504>
   186f0:	mov	r2, #5
   186f4:	mov	r0, #0
   186f8:	bl	1124c <dcgettext@plt>
   186fc:	mov	r1, r5
   18700:	bl	11180 <fputs_unlocked@plt>
   18704:	cmp	r6, #9
   18708:	ldrls	pc, [pc, r6, lsl #2]
   1870c:	b	189e8 <__assert_fail@plt+0x74e4>
   18710:	strdeq	r8, [r1], -r4
   18714:			; <UNDEFINED> instruction: 0x000187bc
   18718:	andeq	r8, r1, r8, ror #15
   1871c:	andeq	r8, r1, ip, lsl r8
   18720:	andeq	r8, r1, r8, asr r8
   18724:	muleq	r1, r8, r8
   18728:	andeq	r8, r1, r0, ror #17
   1872c:	andeq	r8, r1, r0, lsr r9
   18730:	andeq	r8, r1, r8, lsl #19
   18734:	andeq	r8, r1, r0, asr r7
   18738:	str	r3, [sp]
   1873c:	mov	r1, #1
   18740:	mov	r3, r2
   18744:	ldr	r2, [pc, #704]	; 18a0c <__assert_fail@plt+0x7508>
   18748:	bl	11438 <__fprintf_chk@plt>
   1874c:	b	186c0 <__assert_fail@plt+0x71bc>
   18750:	ldr	r1, [pc, #696]	; 18a10 <__assert_fail@plt+0x750c>
   18754:	mov	r2, #5
   18758:	mov	r0, #0
   1875c:	bl	1124c <dcgettext@plt>
   18760:	ldr	r2, [r4, #32]
   18764:	ldr	r3, [r4, #28]
   18768:	ldr	r1, [r4, #24]
   1876c:	str	r2, [sp, #28]
   18770:	ldr	r2, [r4, #20]
   18774:	str	r3, [sp, #24]
   18778:	ldr	r3, [r4, #16]
   1877c:	str	r1, [sp, #20]
   18780:	ldr	r1, [r4, #12]
   18784:	str	r2, [sp, #16]
   18788:	ldr	r2, [r4, #8]
   1878c:	str	r3, [sp, #12]
   18790:	ldr	r3, [r4, #4]
   18794:	str	r1, [sp, #8]
   18798:	str	r2, [sp, #4]
   1879c:	str	r3, [sp]
   187a0:	mov	r1, #1
   187a4:	ldr	r3, [r4]
   187a8:	mov	r2, r0
   187ac:	mov	r0, r5
   187b0:	bl	11438 <__fprintf_chk@plt>
   187b4:	add	sp, sp, #32
   187b8:	pop	{r4, r5, r6, pc}
   187bc:	mov	r2, #5
   187c0:	ldr	r1, [pc, #588]	; 18a14 <__assert_fail@plt+0x7510>
   187c4:	mov	r0, #0
   187c8:	bl	1124c <dcgettext@plt>
   187cc:	ldr	r3, [r4]
   187d0:	mov	r1, #1
   187d4:	mov	r2, r0
   187d8:	mov	r0, r5
   187dc:	add	sp, sp, #32
   187e0:	pop	{r4, r5, r6, lr}
   187e4:	b	11438 <__fprintf_chk@plt>
   187e8:	mov	r2, #5
   187ec:	ldr	r1, [pc, #548]	; 18a18 <__assert_fail@plt+0x7514>
   187f0:	mov	r0, #0
   187f4:	bl	1124c <dcgettext@plt>
   187f8:	ldr	r2, [r4, #4]
   187fc:	ldr	r3, [r4]
   18800:	mov	r1, #1
   18804:	str	r2, [sp, #48]	; 0x30
   18808:	mov	r2, r0
   1880c:	mov	r0, r5
   18810:	add	sp, sp, #32
   18814:	pop	{r4, r5, r6, lr}
   18818:	b	11438 <__fprintf_chk@plt>
   1881c:	mov	r2, #5
   18820:	ldr	r1, [pc, #500]	; 18a1c <__assert_fail@plt+0x7518>
   18824:	mov	r0, #0
   18828:	bl	1124c <dcgettext@plt>
   1882c:	ldr	r2, [r4, #8]
   18830:	ldr	r3, [r4, #4]
   18834:	mov	r1, #1
   18838:	str	r2, [sp, #52]	; 0x34
   1883c:	str	r3, [sp, #48]	; 0x30
   18840:	ldr	r3, [r4]
   18844:	mov	r2, r0
   18848:	mov	r0, r5
   1884c:	add	sp, sp, #32
   18850:	pop	{r4, r5, r6, lr}
   18854:	b	11438 <__fprintf_chk@plt>
   18858:	mov	r2, #5
   1885c:	ldr	r1, [pc, #444]	; 18a20 <__assert_fail@plt+0x751c>
   18860:	mov	r0, #0
   18864:	bl	1124c <dcgettext@plt>
   18868:	ldr	r1, [r4, #12]
   1886c:	ldr	r2, [r4, #8]
   18870:	ldr	r3, [r4, #4]
   18874:	str	r1, [sp, #8]
   18878:	str	r2, [sp, #4]
   1887c:	str	r3, [sp]
   18880:	mov	r1, #1
   18884:	ldr	r3, [r4]
   18888:	mov	r2, r0
   1888c:	mov	r0, r5
   18890:	bl	11438 <__fprintf_chk@plt>
   18894:	b	187b4 <__assert_fail@plt+0x72b0>
   18898:	mov	r2, #5
   1889c:	ldr	r1, [pc, #384]	; 18a24 <__assert_fail@plt+0x7520>
   188a0:	mov	r0, #0
   188a4:	bl	1124c <dcgettext@plt>
   188a8:	ldr	r3, [r4, #16]
   188ac:	ldr	r1, [r4, #12]
   188b0:	ldr	r2, [r4, #8]
   188b4:	str	r3, [sp, #12]
   188b8:	ldr	r3, [r4, #4]
   188bc:	str	r1, [sp, #8]
   188c0:	str	r2, [sp, #4]
   188c4:	str	r3, [sp]
   188c8:	mov	r1, #1
   188cc:	ldr	r3, [r4]
   188d0:	mov	r2, r0
   188d4:	mov	r0, r5
   188d8:	bl	11438 <__fprintf_chk@plt>
   188dc:	b	187b4 <__assert_fail@plt+0x72b0>
   188e0:	mov	r2, #5
   188e4:	ldr	r1, [pc, #316]	; 18a28 <__assert_fail@plt+0x7524>
   188e8:	mov	r0, #0
   188ec:	bl	1124c <dcgettext@plt>
   188f0:	ldr	r2, [r4, #20]
   188f4:	ldr	r3, [r4, #16]
   188f8:	ldr	r1, [r4, #12]
   188fc:	str	r2, [sp, #16]
   18900:	ldr	r2, [r4, #8]
   18904:	str	r3, [sp, #12]
   18908:	ldr	r3, [r4, #4]
   1890c:	str	r1, [sp, #8]
   18910:	str	r2, [sp, #4]
   18914:	str	r3, [sp]
   18918:	mov	r1, #1
   1891c:	ldr	r3, [r4]
   18920:	mov	r2, r0
   18924:	mov	r0, r5
   18928:	bl	11438 <__fprintf_chk@plt>
   1892c:	b	187b4 <__assert_fail@plt+0x72b0>
   18930:	mov	r2, #5
   18934:	ldr	r1, [pc, #240]	; 18a2c <__assert_fail@plt+0x7528>
   18938:	mov	r0, #0
   1893c:	bl	1124c <dcgettext@plt>
   18940:	ldr	r1, [r4, #24]
   18944:	ldr	r2, [r4, #20]
   18948:	ldr	r3, [r4, #16]
   1894c:	str	r1, [sp, #20]
   18950:	ldr	r1, [r4, #12]
   18954:	str	r2, [sp, #16]
   18958:	ldr	r2, [r4, #8]
   1895c:	str	r3, [sp, #12]
   18960:	ldr	r3, [r4, #4]
   18964:	str	r1, [sp, #8]
   18968:	str	r2, [sp, #4]
   1896c:	str	r3, [sp]
   18970:	mov	r1, #1
   18974:	ldr	r3, [r4]
   18978:	mov	r2, r0
   1897c:	mov	r0, r5
   18980:	bl	11438 <__fprintf_chk@plt>
   18984:	b	187b4 <__assert_fail@plt+0x72b0>
   18988:	mov	r2, #5
   1898c:	ldr	r1, [pc, #156]	; 18a30 <__assert_fail@plt+0x752c>
   18990:	mov	r0, #0
   18994:	bl	1124c <dcgettext@plt>
   18998:	ldr	r3, [r4, #28]
   1899c:	ldr	r1, [r4, #24]
   189a0:	ldr	r2, [r4, #20]
   189a4:	str	r3, [sp, #24]
   189a8:	ldr	r3, [r4, #16]
   189ac:	str	r1, [sp, #20]
   189b0:	ldr	r1, [r4, #12]
   189b4:	str	r2, [sp, #16]
   189b8:	ldr	r2, [r4, #8]
   189bc:	str	r3, [sp, #12]
   189c0:	ldr	r3, [r4, #4]
   189c4:	str	r1, [sp, #8]
   189c8:	str	r2, [sp, #4]
   189cc:	str	r3, [sp]
   189d0:	mov	r1, #1
   189d4:	ldr	r3, [r4]
   189d8:	mov	r2, r0
   189dc:	mov	r0, r5
   189e0:	bl	11438 <__fprintf_chk@plt>
   189e4:	b	187b4 <__assert_fail@plt+0x72b0>
   189e8:	mov	r2, #5
   189ec:	ldr	r1, [pc, #64]	; 18a34 <__assert_fail@plt+0x7530>
   189f0:	b	18758 <__assert_fail@plt+0x7254>
   189f4:	bl	114d4 <abort@plt>
   189f8:	andeq	lr, r1, r4, ror #8
   189fc:	andeq	lr, r1, r8, ror r4
   18a00:	andeq	r0, r0, r2, ror #15
   18a04:	andeq	lr, r1, ip, asr #14
   18a08:	andeq	lr, r1, ip, ror r4
   18a0c:	andeq	lr, r1, r0, ror r4
   18a10:	andeq	lr, r1, r4, asr r6
   18a14:	andeq	lr, r1, r8, asr #10
   18a18:	andeq	lr, r1, r8, asr r5
   18a1c:	andeq	lr, r1, r0, ror r5
   18a20:	andeq	lr, r1, ip, lsl #11
   18a24:	andeq	lr, r1, ip, lsr #11
   18a28:	ldrdeq	lr, [r1], -r0
   18a2c:	strdeq	lr, [r1], -r8
   18a30:	andeq	lr, r1, r4, lsr #12
   18a34:	andeq	lr, r1, r8, lsl #13
   18a38:	push	{r4, r5, lr}
   18a3c:	sub	sp, sp, #12
   18a40:	ldr	r5, [sp, #24]
   18a44:	ldr	ip, [r5]
   18a48:	cmp	ip, #0
   18a4c:	beq	18a68 <__assert_fail@plt+0x7564>
   18a50:	mov	lr, r5
   18a54:	mov	ip, #0
   18a58:	ldr	r4, [lr, #4]!
   18a5c:	add	ip, ip, #1
   18a60:	cmp	r4, #0
   18a64:	bne	18a58 <__assert_fail@plt+0x7554>
   18a68:	stm	sp, {r5, ip}
   18a6c:	bl	18690 <__assert_fail@plt+0x718c>
   18a70:	add	sp, sp, #12
   18a74:	pop	{r4, r5, pc}
   18a78:	push	{r4, r5, r6, lr}
   18a7c:	sub	sp, sp, #56	; 0x38
   18a80:	ldr	r6, [pc, #88]	; 18ae0 <__assert_fail@plt+0x75dc>
   18a84:	ldr	r5, [sp, #72]	; 0x48
   18a88:	add	r4, sp, #8
   18a8c:	ldr	ip, [r6]
   18a90:	str	ip, [sp, #52]	; 0x34
   18a94:	mov	ip, #0
   18a98:	ldr	lr, [r5], #4
   18a9c:	cmp	lr, #0
   18aa0:	str	lr, [r4, #4]!
   18aa4:	beq	18ab4 <__assert_fail@plt+0x75b0>
   18aa8:	add	ip, ip, #1
   18aac:	cmp	ip, #10
   18ab0:	bne	18a98 <__assert_fail@plt+0x7594>
   18ab4:	add	lr, sp, #12
   18ab8:	str	ip, [sp, #4]
   18abc:	str	lr, [sp]
   18ac0:	bl	18690 <__assert_fail@plt+0x718c>
   18ac4:	ldr	r2, [sp, #52]	; 0x34
   18ac8:	ldr	r3, [r6]
   18acc:	cmp	r2, r3
   18ad0:	bne	18adc <__assert_fail@plt+0x75d8>
   18ad4:	add	sp, sp, #56	; 0x38
   18ad8:	pop	{r4, r5, r6, pc}
   18adc:	bl	11258 <__stack_chk_fail@plt>
   18ae0:	andeq	lr, r2, r8, lsl #30
   18ae4:	push	{r3}		; (str r3, [sp, #-4]!)
   18ae8:	mov	ip, #0
   18aec:	push	{r4, r5, r6, lr}
   18af0:	sub	sp, sp, #60	; 0x3c
   18af4:	ldr	r6, [pc, #100]	; 18b60 <__assert_fail@plt+0x765c>
   18af8:	add	r5, sp, #8
   18afc:	add	r4, sp, #80	; 0x50
   18b00:	ldr	r3, [r6]
   18b04:	str	r4, [sp, #8]
   18b08:	str	r3, [sp, #52]	; 0x34
   18b0c:	ldr	r3, [sp, #76]	; 0x4c
   18b10:	ldr	lr, [r4], #4
   18b14:	cmp	lr, #0
   18b18:	str	lr, [r5, #4]!
   18b1c:	beq	18b2c <__assert_fail@plt+0x7628>
   18b20:	add	ip, ip, #1
   18b24:	cmp	ip, #10
   18b28:	bne	18b10 <__assert_fail@plt+0x760c>
   18b2c:	add	lr, sp, #12
   18b30:	str	ip, [sp, #4]
   18b34:	str	lr, [sp]
   18b38:	bl	18690 <__assert_fail@plt+0x718c>
   18b3c:	ldr	r2, [sp, #52]	; 0x34
   18b40:	ldr	r3, [r6]
   18b44:	cmp	r2, r3
   18b48:	bne	18b5c <__assert_fail@plt+0x7658>
   18b4c:	add	sp, sp, #60	; 0x3c
   18b50:	pop	{r4, r5, r6, lr}
   18b54:	add	sp, sp, #4
   18b58:	bx	lr
   18b5c:	bl	11258 <__stack_chk_fail@plt>
   18b60:	andeq	lr, r2, r8, lsl #30
   18b64:	push	{r4, lr}
   18b68:	mov	r2, #5
   18b6c:	ldr	r1, [pc, #88]	; 18bcc <__assert_fail@plt+0x76c8>
   18b70:	mov	r0, #0
   18b74:	bl	1124c <dcgettext@plt>
   18b78:	ldr	r2, [pc, #80]	; 18bd0 <__assert_fail@plt+0x76cc>
   18b7c:	mov	r1, r0
   18b80:	mov	r0, #1
   18b84:	bl	11414 <__printf_chk@plt>
   18b88:	mov	r2, #5
   18b8c:	ldr	r1, [pc, #64]	; 18bd4 <__assert_fail@plt+0x76d0>
   18b90:	mov	r0, #0
   18b94:	bl	1124c <dcgettext@plt>
   18b98:	ldr	r3, [pc, #56]	; 18bd8 <__assert_fail@plt+0x76d4>
   18b9c:	ldr	r2, [pc, #56]	; 18bdc <__assert_fail@plt+0x76d8>
   18ba0:	mov	r1, r0
   18ba4:	mov	r0, #1
   18ba8:	bl	11414 <__printf_chk@plt>
   18bac:	ldr	r1, [pc, #44]	; 18be0 <__assert_fail@plt+0x76dc>
   18bb0:	mov	r2, #5
   18bb4:	mov	r0, #0
   18bb8:	bl	1124c <dcgettext@plt>
   18bbc:	ldr	r3, [pc, #32]	; 18be4 <__assert_fail@plt+0x76e0>
   18bc0:	pop	{r4, lr}
   18bc4:	ldr	r1, [r3]
   18bc8:	b	11180 <fputs_unlocked@plt>
   18bcc:	andeq	lr, r1, r4, asr #13
   18bd0:	ldrdeq	lr, [r1], -ip
   18bd4:	strdeq	lr, [r1], -r4
   18bd8:	strdeq	sp, [r1], -r0
   18bdc:	andeq	sp, r1, r8, lsl sp
   18be0:	andeq	lr, r1, r8, lsl #14
   18be4:	ldrdeq	pc, [r2], -r4
   18be8:	push	{r4, lr}
   18bec:	mov	r4, r0
   18bf0:	bl	1133c <malloc@plt>
   18bf4:	adds	r4, r4, #0
   18bf8:	movne	r4, #1
   18bfc:	cmp	r0, #0
   18c00:	movne	r4, #0
   18c04:	cmp	r4, #0
   18c08:	popeq	{r4, pc}
   18c0c:	bl	18e30 <__assert_fail@plt+0x792c>
   18c10:	push	{r4, r5, r6, lr}
   18c14:	umull	r4, r5, r0, r1
   18c18:	adds	r3, r5, #0
   18c1c:	movne	r3, #1
   18c20:	cmp	r4, #0
   18c24:	blt	18c3c <__assert_fail@plt+0x7738>
   18c28:	cmp	r3, #0
   18c2c:	bne	18c3c <__assert_fail@plt+0x7738>
   18c30:	mul	r0, r1, r0
   18c34:	pop	{r4, r5, r6, lr}
   18c38:	b	18be8 <__assert_fail@plt+0x76e4>
   18c3c:	bl	18e30 <__assert_fail@plt+0x792c>
   18c40:	b	18be8 <__assert_fail@plt+0x76e4>
   18c44:	adds	r3, r0, #0
   18c48:	movne	r3, #1
   18c4c:	cmp	r1, #0
   18c50:	movne	r3, #0
   18c54:	cmp	r3, #0
   18c58:	push	{r4, lr}
   18c5c:	bne	18c84 <__assert_fail@plt+0x7780>
   18c60:	mov	r4, r1
   18c64:	bl	11270 <realloc@plt>
   18c68:	adds	r4, r4, #0
   18c6c:	movne	r4, #1
   18c70:	cmp	r0, #0
   18c74:	movne	r4, #0
   18c78:	cmp	r4, #0
   18c7c:	popeq	{r4, pc}
   18c80:	bl	18e30 <__assert_fail@plt+0x792c>
   18c84:	bl	111ec <free@plt>
   18c88:	mov	r0, #0
   18c8c:	pop	{r4, pc}
   18c90:	push	{r4, r5, r6, lr}
   18c94:	umull	r4, r5, r1, r2
   18c98:	adds	r3, r5, #0
   18c9c:	movne	r3, #1
   18ca0:	cmp	r4, #0
   18ca4:	blt	18cbc <__assert_fail@plt+0x77b8>
   18ca8:	cmp	r3, #0
   18cac:	bne	18cbc <__assert_fail@plt+0x77b8>
   18cb0:	mul	r1, r2, r1
   18cb4:	pop	{r4, r5, r6, lr}
   18cb8:	b	18c44 <__assert_fail@plt+0x7740>
   18cbc:	bl	18e30 <__assert_fail@plt+0x792c>
   18cc0:	push	{r4, r5, r6, r7, r8, lr}
   18cc4:	subs	r7, r0, #0
   18cc8:	mov	r6, r1
   18ccc:	mov	r5, r2
   18cd0:	ldr	r4, [r1]
   18cd4:	beq	18d08 <__assert_fail@plt+0x7804>
   18cd8:	mov	r1, r2
   18cdc:	ldr	r0, [pc, #104]	; 18d4c <__assert_fail@plt+0x7848>
   18ce0:	bl	1bdd4 <__assert_fail@plt+0xa8d0>
   18ce4:	cmp	r0, r4
   18ce8:	bls	18d2c <__assert_fail@plt+0x7828>
   18cec:	add	r3, r4, #1
   18cf0:	add	r4, r3, r4, lsr #1
   18cf4:	str	r4, [r6]
   18cf8:	mul	r1, r5, r4
   18cfc:	mov	r0, r7
   18d00:	pop	{r4, r5, r6, r7, r8, lr}
   18d04:	b	18c44 <__assert_fail@plt+0x7740>
   18d08:	cmp	r4, #0
   18d0c:	beq	18d30 <__assert_fail@plt+0x782c>
   18d10:	umull	r0, r1, r4, r5
   18d14:	adds	r3, r1, #0
   18d18:	movne	r3, #1
   18d1c:	cmp	r0, #0
   18d20:	blt	18d2c <__assert_fail@plt+0x7828>
   18d24:	cmp	r3, #0
   18d28:	beq	18cf4 <__assert_fail@plt+0x77f0>
   18d2c:	bl	18e30 <__assert_fail@plt+0x792c>
   18d30:	mov	r1, r2
   18d34:	mov	r0, #64	; 0x40
   18d38:	bl	1bdd4 <__assert_fail@plt+0xa8d0>
   18d3c:	cmp	r5, #64	; 0x40
   18d40:	movls	r4, r0
   18d44:	addhi	r4, r0, #1
   18d48:	b	18d10 <__assert_fail@plt+0x780c>
   18d4c:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   18d50:	cmp	r0, #0
   18d54:	ldr	r3, [r1]
   18d58:	beq	18d7c <__assert_fail@plt+0x7878>
   18d5c:	ldr	r2, [pc, #60]	; 18da0 <__assert_fail@plt+0x789c>
   18d60:	cmp	r3, r2
   18d64:	bhi	18d98 <__assert_fail@plt+0x7894>
   18d68:	add	r2, r3, #1
   18d6c:	add	r3, r2, r3, lsr #1
   18d70:	str	r3, [r1]
   18d74:	mov	r1, r3
   18d78:	b	18c44 <__assert_fail@plt+0x7740>
   18d7c:	cmp	r3, #0
   18d80:	bne	18d94 <__assert_fail@plt+0x7890>
   18d84:	mov	r3, #64	; 0x40
   18d88:	str	r3, [r1]
   18d8c:	mov	r1, r3
   18d90:	b	18c44 <__assert_fail@plt+0x7740>
   18d94:	bge	18d70 <__assert_fail@plt+0x786c>
   18d98:	push	{r4, lr}
   18d9c:	bl	18e30 <__assert_fail@plt+0x792c>
   18da0:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   18da4:	push	{r4, lr}
   18da8:	mov	r4, r0
   18dac:	bl	18be8 <__assert_fail@plt+0x76e4>
   18db0:	mov	r2, r4
   18db4:	mov	r1, #0
   18db8:	pop	{r4, lr}
   18dbc:	b	11408 <memset@plt>
   18dc0:	push	{r4, r5, r6, lr}
   18dc4:	umull	r4, r5, r0, r1
   18dc8:	adds	r3, r5, #0
   18dcc:	movne	r3, #1
   18dd0:	cmp	r4, #0
   18dd4:	blt	18dec <__assert_fail@plt+0x78e8>
   18dd8:	cmp	r3, #0
   18ddc:	bne	18dec <__assert_fail@plt+0x78e8>
   18de0:	bl	11174 <calloc@plt>
   18de4:	cmp	r0, #0
   18de8:	popne	{r4, r5, r6, pc}
   18dec:	bl	18e30 <__assert_fail@plt+0x792c>
   18df0:	push	{r4, r5, r6, lr}
   18df4:	mov	r4, r1
   18df8:	mov	r5, r0
   18dfc:	mov	r0, r1
   18e00:	bl	18be8 <__assert_fail@plt+0x76e4>
   18e04:	mov	r2, r4
   18e08:	mov	r1, r5
   18e0c:	pop	{r4, r5, r6, lr}
   18e10:	b	11210 <memcpy@plt>
   18e14:	push	{r4, lr}
   18e18:	mov	r4, r0
   18e1c:	bl	113c0 <strlen@plt>
   18e20:	add	r1, r0, #1
   18e24:	mov	r0, r4
   18e28:	pop	{r4, lr}
   18e2c:	b	18df0 <__assert_fail@plt+0x78ec>
   18e30:	ldr	r3, [pc, #44]	; 18e64 <__assert_fail@plt+0x7960>
   18e34:	push	{r4, lr}
   18e38:	mov	r2, #5
   18e3c:	ldr	r1, [pc, #36]	; 18e68 <__assert_fail@plt+0x7964>
   18e40:	mov	r0, #0
   18e44:	ldr	r4, [r3]
   18e48:	bl	1124c <dcgettext@plt>
   18e4c:	ldr	r2, [pc, #24]	; 18e6c <__assert_fail@plt+0x7968>
   18e50:	mov	r1, #0
   18e54:	mov	r3, r0
   18e58:	mov	r0, r4
   18e5c:	bl	11318 <error@plt>
   18e60:	bl	114d4 <abort@plt>
   18e64:	andeq	pc, r2, r4, ror r1	; <UNPREDICTABLE>
   18e68:	andeq	lr, r1, ip, ror r7
   18e6c:	andeq	ip, r1, r4, lsl sp
   18e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e74:	sub	sp, sp, #36	; 0x24
   18e78:	ldr	r5, [pc, #2536]	; 19868 <__assert_fail@plt+0x8364>
   18e7c:	mov	r9, r2
   18e80:	cmp	r2, #36	; 0x24
   18e84:	str	r3, [sp, #12]
   18e88:	ldr	r2, [r5]
   18e8c:	ldr	r3, [sp, #72]	; 0x48
   18e90:	str	r2, [sp, #28]
   18e94:	str	r3, [sp]
   18e98:	bhi	19854 <__assert_fail@plt+0x8350>
   18e9c:	cmp	r1, #0
   18ea0:	mov	r4, r1
   18ea4:	mov	r6, r0
   18ea8:	addeq	r4, sp, #24
   18eac:	bl	113e4 <__errno_location@plt>
   18eb0:	mov	r3, #0
   18eb4:	str	r3, [r0]
   18eb8:	mov	r7, r0
   18ebc:	bl	113a8 <__ctype_b_loc@plt>
   18ec0:	ldrb	r3, [r6]
   18ec4:	mov	r1, r6
   18ec8:	ldr	r0, [r0]
   18ecc:	b	18ed4 <__assert_fail@plt+0x79d0>
   18ed0:	ldrb	r3, [r1, #1]!
   18ed4:	lsl	r2, r3, #1
   18ed8:	ldrh	r8, [r0, r2]
   18edc:	ands	r8, r8, #8192	; 0x2000
   18ee0:	bne	18ed0 <__assert_fail@plt+0x79cc>
   18ee4:	cmp	r3, #45	; 0x2d
   18ee8:	beq	18f84 <__assert_fail@plt+0x7a80>
   18eec:	mov	r2, r9
   18ef0:	mov	r3, r8
   18ef4:	mov	r1, r4
   18ef8:	mov	r0, r6
   18efc:	bl	1121c <__strtoull_internal@plt>
   18f00:	ldr	r9, [r4]
   18f04:	cmp	r9, r6
   18f08:	mov	sl, r0
   18f0c:	mov	fp, r1
   18f10:	beq	18f6c <__assert_fail@plt+0x7a68>
   18f14:	ldr	r8, [r7]
   18f18:	cmp	r8, #0
   18f1c:	bne	18f5c <__assert_fail@plt+0x7a58>
   18f20:	ldr	r3, [sp]
   18f24:	cmp	r3, #0
   18f28:	beq	18f38 <__assert_fail@plt+0x7a34>
   18f2c:	ldrb	r6, [r9]
   18f30:	cmp	r6, #0
   18f34:	bne	1930c <__assert_fail@plt+0x7e08>
   18f38:	ldr	r3, [sp, #12]
   18f3c:	strd	sl, [r3]
   18f40:	ldr	r2, [sp, #28]
   18f44:	ldr	r3, [r5]
   18f48:	mov	r0, r8
   18f4c:	cmp	r2, r3
   18f50:	bne	19850 <__assert_fail@plt+0x834c>
   18f54:	add	sp, sp, #36	; 0x24
   18f58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f5c:	cmp	r8, #34	; 0x22
   18f60:	bne	18f84 <__assert_fail@plt+0x7a80>
   18f64:	mov	r8, #1
   18f68:	b	18f20 <__assert_fail@plt+0x7a1c>
   18f6c:	ldr	r0, [sp]
   18f70:	cmp	r0, #0
   18f74:	beq	18f84 <__assert_fail@plt+0x7a80>
   18f78:	ldrb	r6, [r6]
   18f7c:	cmp	r6, #0
   18f80:	bne	18f8c <__assert_fail@plt+0x7a88>
   18f84:	mov	r8, #4
   18f88:	b	18f40 <__assert_fail@plt+0x7a3c>
   18f8c:	mov	r1, r6
   18f90:	bl	113cc <strchr@plt>
   18f94:	cmp	r0, #0
   18f98:	movne	sl, #1
   18f9c:	movne	fp, #0
   18fa0:	beq	18f84 <__assert_fail@plt+0x7a80>
   18fa4:	sub	r7, r6, #69	; 0x45
   18fa8:	cmp	r7, #47	; 0x2f
   18fac:	ldrls	pc, [pc, r7, lsl #2]
   18fb0:	b	19170 <__assert_fail@plt+0x7c6c>
   18fb4:	andeq	r9, r1, r4, ror r0
   18fb8:	andeq	r9, r1, r0, ror r1
   18fbc:	andeq	r9, r1, r4, ror r0
   18fc0:	andeq	r9, r1, r0, ror r1
   18fc4:	andeq	r9, r1, r0, ror r1
   18fc8:	andeq	r9, r1, r0, ror r1
   18fcc:	andeq	r9, r1, r4, ror r0
   18fd0:	andeq	r9, r1, r0, ror r1
   18fd4:	andeq	r9, r1, r4, ror r0
   18fd8:	andeq	r9, r1, r0, ror r1
   18fdc:	andeq	r9, r1, r0, ror r1
   18fe0:	andeq	r9, r1, r4, ror r0
   18fe4:	andeq	r9, r1, r0, ror r1
   18fe8:	andeq	r9, r1, r0, ror r1
   18fec:	andeq	r9, r1, r0, ror r1
   18ff0:	andeq	r9, r1, r4, ror r0
   18ff4:	andeq	r9, r1, r0, ror r1
   18ff8:	andeq	r9, r1, r0, ror r1
   18ffc:	andeq	r9, r1, r0, ror r1
   19000:	andeq	r9, r1, r0, ror r1
   19004:	andeq	r9, r1, r4, ror r0
   19008:	andeq	r9, r1, r4, ror r0
   1900c:	andeq	r9, r1, r0, ror r1
   19010:	andeq	r9, r1, r0, ror r1
   19014:	andeq	r9, r1, r0, ror r1
   19018:	andeq	r9, r1, r0, ror r1
   1901c:	andeq	r9, r1, r0, ror r1
   19020:	andeq	r9, r1, r0, ror r1
   19024:	andeq	r9, r1, r0, ror r1
   19028:	andeq	r9, r1, r0, ror r1
   1902c:	andeq	r9, r1, r0, ror r1
   19030:	andeq	r9, r1, r0, ror r1
   19034:	andeq	r9, r1, r0, ror r1
   19038:	andeq	r9, r1, r0, ror r1
   1903c:	andeq	r9, r1, r4, ror r0
   19040:	andeq	r9, r1, r0, ror r1
   19044:	andeq	r9, r1, r0, ror r1
   19048:	andeq	r9, r1, r0, ror r1
   1904c:	andeq	r9, r1, r4, ror r0
   19050:	andeq	r9, r1, r0, ror r1
   19054:	andeq	r9, r1, r4, ror r0
   19058:	andeq	r9, r1, r0, ror r1
   1905c:	andeq	r9, r1, r0, ror r1
   19060:	andeq	r9, r1, r0, ror r1
   19064:	andeq	r9, r1, r0, ror r1
   19068:	andeq	r9, r1, r0, ror r1
   1906c:	andeq	r9, r1, r0, ror r1
   19070:	andeq	r9, r1, r4, ror r0
   19074:	ldr	r0, [sp]
   19078:	mov	r1, #48	; 0x30
   1907c:	bl	113cc <strchr@plt>
   19080:	cmp	r0, #0
   19084:	beq	19170 <__assert_fail@plt+0x7c6c>
   19088:	ldrb	r3, [r9, #1]
   1908c:	cmp	r3, #68	; 0x44
   19090:	beq	19750 <__assert_fail@plt+0x824c>
   19094:	cmp	r3, #105	; 0x69
   19098:	beq	19330 <__assert_fail@plt+0x7e2c>
   1909c:	cmp	r3, #66	; 0x42
   190a0:	beq	19750 <__assert_fail@plt+0x824c>
   190a4:	cmp	r7, #47	; 0x2f
   190a8:	ldrls	pc, [pc, r7, lsl #2]
   190ac:	b	19320 <__assert_fail@plt+0x7e1c>
   190b0:	andeq	r9, r1, r4, lsr r7
   190b4:	andeq	r9, r1, r0, lsr #6
   190b8:	andeq	r9, r1, r4, lsr #14
   190bc:	andeq	r9, r1, r0, lsr #6
   190c0:	andeq	r9, r1, r0, lsr #6
   190c4:	andeq	r9, r1, r0, lsr #6
   190c8:	andeq	r9, r1, r4, lsl r7
   190cc:	andeq	r9, r1, r0, lsr #6
   190d0:	andeq	r9, r1, r4, lsl #14
   190d4:	andeq	r9, r1, r0, lsr #6
   190d8:	andeq	r9, r1, r0, lsr #6
   190dc:	strdeq	r9, [r1], -r4
   190e0:	andeq	r9, r1, r0, lsr #6
   190e4:	andeq	r9, r1, r0, lsr #6
   190e8:	andeq	r9, r1, r0, lsr #6
   190ec:	andeq	r9, r1, r4, ror #13
   190f0:	andeq	r9, r1, r0, lsr #6
   190f4:	andeq	r9, r1, r0, lsr #6
   190f8:	andeq	r9, r1, r0, lsr #6
   190fc:	andeq	r9, r1, r0, lsr #6
   19100:	ldrdeq	r9, [r1], -r4
   19104:	andeq	r9, r1, r4, asr #13
   19108:	andeq	r9, r1, r0, lsr #6
   1910c:	andeq	r9, r1, r0, lsr #6
   19110:	andeq	r9, r1, r0, lsr #6
   19114:	andeq	r9, r1, r0, lsr #6
   19118:	andeq	r9, r1, r0, lsr #6
   1911c:	andeq	r9, r1, r0, lsr #6
   19120:	andeq	r9, r1, r0, lsr #6
   19124:	andeq	r9, r1, ip, ror #6
   19128:			; <UNDEFINED> instruction: 0x000196bc
   1912c:	andeq	r9, r1, r0, lsr #6
   19130:	andeq	r9, r1, r0, lsr #6
   19134:	andeq	r9, r1, r0, lsr #6
   19138:	andeq	r9, r1, r4, lsr #14
   1913c:	andeq	r9, r1, r0, lsr #6
   19140:	andeq	r9, r1, r0, lsr #6
   19144:	andeq	r9, r1, r0, lsr #6
   19148:	andeq	r9, r1, r4, lsl r7
   1914c:	andeq	r9, r1, r0, lsr #6
   19150:	andeq	r9, r1, r4, lsl #14
   19154:	andeq	r9, r1, r0, lsr #6
   19158:	andeq	r9, r1, r0, lsr #6
   1915c:	andeq	r9, r1, r0, lsr #6
   19160:	andeq	r9, r1, r0, lsr #6
   19164:	andeq	r9, r1, r0, lsr #6
   19168:	andeq	r9, r1, r0, lsr #6
   1916c:	andeq	r9, r1, r4, ror #13
   19170:	mov	lr, #1
   19174:	mov	r0, #1024	; 0x400
   19178:	sub	r6, r6, #66	; 0x42
   1917c:	cmp	r6, #53	; 0x35
   19180:	ldrls	pc, [pc, r6, lsl #2]
   19184:	b	19320 <__assert_fail@plt+0x7e1c>
   19188:	muleq	r1, r4, r3
   1918c:	andeq	r9, r1, r0, lsr #6
   19190:	andeq	r9, r1, r0, lsr #6
   19194:			; <UNDEFINED> instruction: 0x000193b8
   19198:	andeq	r9, r1, r0, lsr #6
   1919c:	andeq	r9, r1, r0, ror #4
   191a0:	andeq	r9, r1, r0, lsr #6
   191a4:	andeq	r9, r1, r0, lsr #6
   191a8:	andeq	r9, r1, r0, lsr #6
   191ac:			; <UNDEFINED> instruction: 0x000194b0
   191b0:	andeq	r9, r1, r0, lsr #6
   191b4:	andeq	r9, r1, r4, asr r6
   191b8:	andeq	r9, r1, r0, lsr #6
   191bc:	andeq	r9, r1, r0, lsr #6
   191c0:	ldrdeq	r9, [r1], -r8
   191c4:	andeq	r9, r1, r0, lsr #6
   191c8:	andeq	r9, r1, r0, lsr #6
   191cc:	andeq	r9, r1, r0, lsr #6
   191d0:	andeq	r9, r1, ip, asr r5
   191d4:	andeq	r9, r1, r0, lsr #6
   191d8:	andeq	r9, r1, r0, lsr #6
   191dc:	andeq	r9, r1, r0, lsr #6
   191e0:	andeq	r9, r1, r0, lsr #6
   191e4:	andeq	r9, r1, r0, ror #9
   191e8:	andeq	r9, r1, r4, lsr r4
   191ec:	andeq	r9, r1, r0, lsr #6
   191f0:	andeq	r9, r1, r0, lsr #6
   191f4:	andeq	r9, r1, r0, lsr #6
   191f8:	andeq	r9, r1, r0, lsr #6
   191fc:	andeq	r9, r1, r0, lsr #6
   19200:	andeq	r9, r1, r0, lsr #6
   19204:	andeq	r9, r1, r0, lsr #6
   19208:	andeq	r9, r1, r0, ror r3
   1920c:	strdeq	r9, [r1], -r4
   19210:	andeq	r9, r1, r0, lsr #6
   19214:	andeq	r9, r1, r0, lsr #6
   19218:	andeq	r9, r1, r0, lsr #6
   1921c:	andeq	r9, r1, r0, ror #4
   19220:	andeq	r9, r1, r0, lsr #6
   19224:	andeq	r9, r1, r0, lsr #6
   19228:	andeq	r9, r1, r0, lsr #6
   1922c:			; <UNDEFINED> instruction: 0x000194b0
   19230:	andeq	r9, r1, r0, lsr #6
   19234:	andeq	r9, r1, r4, asr r6
   19238:	andeq	r9, r1, r0, lsr #6
   1923c:	andeq	r9, r1, r0, lsr #6
   19240:	andeq	r9, r1, r0, lsr #6
   19244:	andeq	r9, r1, r0, lsr #6
   19248:	andeq	r9, r1, r0, lsr #6
   1924c:	andeq	r9, r1, r0, lsr #6
   19250:	andeq	r9, r1, ip, asr r5
   19254:	andeq	r9, r1, r0, lsr #6
   19258:	andeq	r9, r1, r0, lsr #6
   1925c:	andeq	r9, r1, r8, asr #6
   19260:	asr	r1, r0, #31
   19264:	mov	r2, #0
   19268:	mov	r3, #0
   1926c:	cmp	fp, #0
   19270:	strd	r2, [sp]
   19274:	bne	19794 <__assert_fail@plt+0x8290>
   19278:	ldrd	r2, [sp]
   1927c:	orrs	r3, r2, r3
   19280:	bne	19784 <__assert_fail@plt+0x8280>
   19284:	mul	r3, sl, r1
   19288:	umull	r6, r7, sl, r0
   1928c:	mla	r3, r0, fp, r3
   19290:	ldrd	sl, [sp]
   19294:	add	ip, r3, r7
   19298:	cmp	ip, #0
   1929c:	mov	r7, ip
   192a0:	bne	19828 <__assert_fail@plt+0x8324>
   192a4:	orrs	r3, sl, fp
   192a8:	bne	19784 <__assert_fail@plt+0x8280>
   192ac:	umull	r2, r3, r6, r0
   192b0:	mul	ip, r6, r1
   192b4:	strd	r2, [sp]
   192b8:	mla	r3, r0, r7, ip
   192bc:	ldr	r2, [sp, #4]
   192c0:	add	ip, r3, r2
   192c4:	cmp	ip, #0
   192c8:	str	ip, [sp, #4]
   192cc:	bne	19804 <__assert_fail@plt+0x8300>
   192d0:	orrs	r3, sl, fp
   192d4:	bne	19784 <__assert_fail@plt+0x8280>
   192d8:	ldrd	r6, [sp]
   192dc:	mov	r3, #0
   192e0:	mul	r2, r6, r1
   192e4:	umull	sl, fp, r6, r0
   192e8:	mla	r2, r0, r7, r2
   192ec:	add	fp, r2, fp
   192f0:	orr	r8, r8, r3
   192f4:	add	r3, r9, lr
   192f8:	str	r3, [r4]
   192fc:	ldrb	r3, [r9, lr]
   19300:	cmp	r3, #0
   19304:	orrne	r8, r8, #2
   19308:	b	18f38 <__assert_fail@plt+0x7a34>
   1930c:	mov	r1, r6
   19310:	ldr	r0, [sp]
   19314:	bl	113cc <strchr@plt>
   19318:	cmp	r0, #0
   1931c:	bne	18fa4 <__assert_fail@plt+0x7aa0>
   19320:	ldr	r3, [sp, #12]
   19324:	orr	r8, r8, #2
   19328:	strd	sl, [r3]
   1932c:	b	18f40 <__assert_fail@plt+0x7a3c>
   19330:	ldrb	r3, [r9, #2]
   19334:	mov	r0, #1024	; 0x400
   19338:	cmp	r3, #66	; 0x42
   1933c:	movne	lr, #1
   19340:	moveq	lr, #3
   19344:	b	19178 <__assert_fail@plt+0x7c74>
   19348:	lsr	r3, fp, #31
   1934c:	adds	sl, sl, sl
   19350:	adc	fp, fp, fp
   19354:	cmp	r3, #0
   19358:	beq	192f4 <__assert_fail@plt+0x7df0>
   1935c:	mov	r8, #1
   19360:	mvn	sl, #0
   19364:	mvn	fp, #0
   19368:	b	192f4 <__assert_fail@plt+0x7df0>
   1936c:	mov	lr, #1
   19370:	lsr	r3, fp, #23
   19374:	cmp	r3, #0
   19378:	bne	1935c <__assert_fail@plt+0x7e58>
   1937c:	lsl	r3, fp, #9
   19380:	orr	r3, r3, sl, lsr #23
   19384:	lsl	r2, sl, #9
   19388:	mov	sl, r2
   1938c:	mov	fp, r3
   19390:	b	192f4 <__assert_fail@plt+0x7df0>
   19394:	lsr	r3, fp, #22
   19398:	cmp	r3, #0
   1939c:	bne	1935c <__assert_fail@plt+0x7e58>
   193a0:	lsl	r3, fp, #10
   193a4:	orr	r3, r3, sl, lsr #22
   193a8:	lsl	r2, sl, #10
   193ac:	mov	sl, r2
   193b0:	mov	fp, r3
   193b4:	b	192f4 <__assert_fail@plt+0x7df0>
   193b8:	mov	r6, r0
   193bc:	asr	r7, r0, #31
   193c0:	mov	r3, #0
   193c4:	mov	ip, #6
   193c8:	str	r3, [sp]
   193cc:	strd	r4, [sp, #16]
   193d0:	b	19400 <__assert_fail@plt+0x7efc>
   193d4:	orrs	r3, r2, r3
   193d8:	movne	r3, #1
   193dc:	muleq	r3, sl, r7
   193e0:	strne	r3, [sp]
   193e4:	mlaeq	r3, r6, fp, r3
   193e8:	umulleq	sl, fp, sl, r6
   193ec:	mvnne	sl, #0
   193f0:	addeq	fp, r3, fp
   193f4:	mvnne	fp, #0
   193f8:	subs	ip, ip, #1
   193fc:	beq	19744 <__assert_fail@plt+0x8240>
   19400:	cmp	fp, #0
   19404:	mov	r2, #0
   19408:	mov	r3, #0
   1940c:	beq	193d4 <__assert_fail@plt+0x7ed0>
   19410:	umull	r0, r1, sl, r6
   19414:	mov	r5, #0
   19418:	mov	r0, r1
   1941c:	mov	r1, r5
   19420:	umlal	r0, r1, fp, r6
   19424:	cmp	r1, r5
   19428:	movne	r2, #1
   1942c:	movne	r3, #0
   19430:	b	193d4 <__assert_fail@plt+0x7ed0>
   19434:	mov	r6, r0
   19438:	asr	r7, r0, #31
   1943c:	mov	r3, #0
   19440:	mov	ip, #7
   19444:	str	r3, [sp]
   19448:	strd	r4, [sp, #16]
   1944c:	b	1947c <__assert_fail@plt+0x7f78>
   19450:	orrs	r3, r2, r3
   19454:	movne	r3, #1
   19458:	muleq	r3, sl, r7
   1945c:	strne	r3, [sp]
   19460:	mlaeq	r3, r6, fp, r3
   19464:	umulleq	sl, fp, sl, r6
   19468:	mvnne	sl, #0
   1946c:	addeq	fp, r3, fp
   19470:	mvnne	fp, #0
   19474:	subs	ip, ip, #1
   19478:	beq	19744 <__assert_fail@plt+0x8240>
   1947c:	cmp	fp, #0
   19480:	mov	r2, #0
   19484:	mov	r3, #0
   19488:	beq	19450 <__assert_fail@plt+0x7f4c>
   1948c:	umull	r0, r1, sl, r6
   19490:	mov	r5, #0
   19494:	mov	r0, r1
   19498:	mov	r1, r5
   1949c:	umlal	r0, r1, fp, r6
   194a0:	cmp	r1, r5
   194a4:	movne	r2, #1
   194a8:	movne	r3, #0
   194ac:	b	19450 <__assert_fail@plt+0x7f4c>
   194b0:	asr	r1, r0, #31
   194b4:	cmp	fp, #0
   194b8:	mov	r6, #0
   194bc:	mov	r7, #0
   194c0:	bne	1975c <__assert_fail@plt+0x8258>
   194c4:	orrs	r3, r6, r7
   194c8:	bne	1935c <__assert_fail@plt+0x7e58>
   194cc:	mul	r3, sl, r1
   194d0:	mla	r3, r0, fp, r3
   194d4:	umull	sl, fp, sl, r0
   194d8:	add	fp, r3, fp
   194dc:	b	192f4 <__assert_fail@plt+0x7df0>
   194e0:	mov	r6, r0
   194e4:	asr	r7, r0, #31
   194e8:	mov	r3, #0
   194ec:	mov	ip, #8
   194f0:	str	r3, [sp]
   194f4:	strd	r4, [sp, #16]
   194f8:	b	19528 <__assert_fail@plt+0x8024>
   194fc:	orrs	r3, r2, r3
   19500:	movne	r3, #1
   19504:	muleq	r3, sl, r7
   19508:	strne	r3, [sp]
   1950c:	mlaeq	r3, r6, fp, r3
   19510:	umulleq	sl, fp, sl, r6
   19514:	mvnne	sl, #0
   19518:	addeq	fp, r3, fp
   1951c:	mvnne	fp, #0
   19520:	subs	ip, ip, #1
   19524:	beq	19744 <__assert_fail@plt+0x8240>
   19528:	cmp	fp, #0
   1952c:	mov	r2, #0
   19530:	mov	r3, #0
   19534:	beq	194fc <__assert_fail@plt+0x7ff8>
   19538:	umull	r0, r1, sl, r6
   1953c:	mov	r5, #0
   19540:	mov	r0, r1
   19544:	mov	r1, r5
   19548:	umlal	r0, r1, fp, r6
   1954c:	cmp	r1, r5
   19550:	movne	r2, #1
   19554:	movne	r3, #0
   19558:	b	194fc <__assert_fail@plt+0x7ff8>
   1955c:	mov	r6, r0
   19560:	asr	r7, r0, #31
   19564:	mov	r3, #0
   19568:	mov	ip, #4
   1956c:	str	r3, [sp]
   19570:	strd	r4, [sp, #16]
   19574:	b	195a4 <__assert_fail@plt+0x80a0>
   19578:	orrs	r3, r2, r3
   1957c:	movne	r3, #1
   19580:	muleq	r3, sl, r7
   19584:	strne	r3, [sp]
   19588:	mlaeq	r3, r6, fp, r3
   1958c:	umulleq	sl, fp, sl, r6
   19590:	mvnne	sl, #0
   19594:	addeq	fp, r3, fp
   19598:	mvnne	fp, #0
   1959c:	subs	ip, ip, #1
   195a0:	beq	19744 <__assert_fail@plt+0x8240>
   195a4:	cmp	fp, #0
   195a8:	mov	r2, #0
   195ac:	mov	r3, #0
   195b0:	beq	19578 <__assert_fail@plt+0x8074>
   195b4:	umull	r0, r1, sl, r6
   195b8:	mov	r5, #0
   195bc:	mov	r0, r1
   195c0:	mov	r1, r5
   195c4:	umlal	r0, r1, fp, r6
   195c8:	cmp	r1, r5
   195cc:	movne	r2, #1
   195d0:	movne	r3, #0
   195d4:	b	19578 <__assert_fail@plt+0x8074>
   195d8:	mov	r6, r0
   195dc:	asr	r7, r0, #31
   195e0:	mov	r3, #0
   195e4:	mov	ip, #5
   195e8:	str	r3, [sp]
   195ec:	strd	r4, [sp, #16]
   195f0:	b	19620 <__assert_fail@plt+0x811c>
   195f4:	orrs	r3, r2, r3
   195f8:	movne	r3, #1
   195fc:	muleq	r3, sl, r7
   19600:	strne	r3, [sp]
   19604:	mlaeq	r3, r6, fp, r3
   19608:	umulleq	sl, fp, sl, r6
   1960c:	mvnne	sl, #0
   19610:	addeq	fp, r3, fp
   19614:	mvnne	fp, #0
   19618:	subs	ip, ip, #1
   1961c:	beq	19744 <__assert_fail@plt+0x8240>
   19620:	cmp	fp, #0
   19624:	mov	r2, #0
   19628:	mov	r3, #0
   1962c:	beq	195f4 <__assert_fail@plt+0x80f0>
   19630:	umull	r0, r1, sl, r6
   19634:	mov	r5, #0
   19638:	mov	r0, r1
   1963c:	mov	r1, r5
   19640:	umlal	r0, r1, fp, r6
   19644:	cmp	r1, r5
   19648:	movne	r2, #1
   1964c:	movne	r3, #0
   19650:	b	195f4 <__assert_fail@plt+0x80f0>
   19654:	asr	r1, r0, #31
   19658:	cmp	fp, #0
   1965c:	mov	r6, #0
   19660:	mov	r7, #0
   19664:	bne	197b8 <__assert_fail@plt+0x82b4>
   19668:	orrs	r3, r6, r7
   1966c:	bne	1935c <__assert_fail@plt+0x7e58>
   19670:	umull	r2, r3, sl, r0
   19674:	mul	ip, sl, r1
   19678:	strd	r2, [sp]
   1967c:	mla	r3, r0, fp, ip
   19680:	ldr	r2, [sp, #4]
   19684:	mov	sl, r6
   19688:	add	ip, r3, r2
   1968c:	cmp	ip, #0
   19690:	mov	fp, r7
   19694:	str	ip, [sp, #4]
   19698:	bne	197e0 <__assert_fail@plt+0x82dc>
   1969c:	orrs	r3, sl, fp
   196a0:	bne	1935c <__assert_fail@plt+0x7e58>
   196a4:	ldrd	r6, [sp]
   196a8:	mul	r3, r6, r1
   196ac:	umull	sl, fp, r6, r0
   196b0:	mla	r0, r0, r7, r3
   196b4:	add	fp, r0, fp
   196b8:	b	192f4 <__assert_fail@plt+0x7df0>
   196bc:	mov	lr, #1
   196c0:	b	192f4 <__assert_fail@plt+0x7df0>
   196c4:	mov	lr, #1
   196c8:	mov	r6, #1024	; 0x400
   196cc:	mov	r7, #0
   196d0:	b	1943c <__assert_fail@plt+0x7f38>
   196d4:	mov	lr, #1
   196d8:	mov	r6, #1024	; 0x400
   196dc:	mov	r7, #0
   196e0:	b	194e8 <__assert_fail@plt+0x7fe4>
   196e4:	mov	lr, #1
   196e8:	mov	r6, #1024	; 0x400
   196ec:	mov	r7, #0
   196f0:	b	19564 <__assert_fail@plt+0x8060>
   196f4:	mov	lr, #1
   196f8:	mov	r6, #1024	; 0x400
   196fc:	mov	r7, #0
   19700:	b	195e0 <__assert_fail@plt+0x80dc>
   19704:	mov	lr, #1
   19708:	mov	r0, #1024	; 0x400
   1970c:	mov	r1, #0
   19710:	b	19658 <__assert_fail@plt+0x8154>
   19714:	mov	lr, #1
   19718:	mov	r0, #1024	; 0x400
   1971c:	mov	r1, #0
   19720:	b	194b4 <__assert_fail@plt+0x7fb0>
   19724:	mov	lr, #1
   19728:	mov	r0, #1024	; 0x400
   1972c:	mov	r1, #0
   19730:	b	19264 <__assert_fail@plt+0x7d60>
   19734:	mov	lr, #1
   19738:	mov	r6, #1024	; 0x400
   1973c:	mov	r7, #0
   19740:	b	193c0 <__assert_fail@plt+0x7ebc>
   19744:	ldrd	r4, [sp, #16]
   19748:	ldr	r3, [sp]
   1974c:	b	192f0 <__assert_fail@plt+0x7dec>
   19750:	mov	lr, #2
   19754:	mov	r0, #1000	; 0x3e8
   19758:	b	19178 <__assert_fail@plt+0x7c74>
   1975c:	umull	r2, r3, sl, r0
   19760:	str	r3, [sp]
   19764:	mov	r3, #0
   19768:	str	r3, [sp, #4]
   1976c:	ldrd	r2, [sp]
   19770:	umlal	r2, r3, fp, r0
   19774:	cmp	r3, #0
   19778:	movne	r6, #1
   1977c:	movne	r7, #0
   19780:	b	194c4 <__assert_fail@plt+0x7fc0>
   19784:	mov	r3, #1
   19788:	mvn	sl, #0
   1978c:	mvn	fp, #0
   19790:	b	192f0 <__assert_fail@plt+0x7dec>
   19794:	umull	r2, r3, sl, r0
   19798:	mov	r7, #0
   1979c:	mov	r6, r3
   197a0:	umlal	r6, r7, fp, r0
   197a4:	cmp	r7, #0
   197a8:	movne	r2, #1
   197ac:	movne	r3, #0
   197b0:	strdne	r2, [sp]
   197b4:	b	19278 <__assert_fail@plt+0x7d74>
   197b8:	umull	r2, r3, sl, r0
   197bc:	str	r3, [sp]
   197c0:	mov	r3, #0
   197c4:	str	r3, [sp, #4]
   197c8:	ldrd	r2, [sp]
   197cc:	umlal	r2, r3, fp, r0
   197d0:	cmp	r3, #0
   197d4:	movne	r6, #1
   197d8:	movne	r7, #0
   197dc:	b	19668 <__assert_fail@plt+0x8164>
   197e0:	ldr	r3, [sp]
   197e4:	mov	r7, #0
   197e8:	umull	r2, r3, r3, r0
   197ec:	mov	r6, r3
   197f0:	umlal	r6, r7, ip, r0
   197f4:	cmp	r7, #0
   197f8:	movne	sl, #1
   197fc:	movne	fp, #0
   19800:	b	1969c <__assert_fail@plt+0x8198>
   19804:	ldr	r3, [sp]
   19808:	mov	r7, #0
   1980c:	umull	r2, r3, r3, r0
   19810:	mov	r6, r3
   19814:	umlal	r6, r7, ip, r0
   19818:	cmp	r7, #0
   1981c:	movne	sl, #1
   19820:	movne	fp, #0
   19824:	b	192d0 <__assert_fail@plt+0x7dcc>
   19828:	umull	r2, r3, r6, r0
   1982c:	str	r3, [sp]
   19830:	mov	r3, #0
   19834:	str	r3, [sp, #4]
   19838:	ldrd	r2, [sp]
   1983c:	umlal	r2, r3, ip, r0
   19840:	cmp	r3, #0
   19844:	movne	sl, #1
   19848:	movne	fp, #0
   1984c:	b	192a4 <__assert_fail@plt+0x7da0>
   19850:	bl	11258 <__stack_chk_fail@plt>
   19854:	ldr	r3, [pc, #16]	; 1986c <__assert_fail@plt+0x8368>
   19858:	mov	r2, #96	; 0x60
   1985c:	ldr	r1, [pc, #12]	; 19870 <__assert_fail@plt+0x836c>
   19860:	ldr	r0, [pc, #12]	; 19874 <__assert_fail@plt+0x8370>
   19864:	bl	11504 <__assert_fail@plt>
   19868:	andeq	lr, r2, r8, lsl #30
   1986c:	muleq	r1, r0, r7
   19870:	muleq	r1, ip, r7
   19874:	andeq	lr, r1, ip, lsr #15
   19878:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1987c:	sub	sp, sp, #8
   19880:	ldr	r9, [pc, #208]	; 19958 <__assert_fail@plt+0x8454>
   19884:	subs	r7, r0, #0
   19888:	str	r1, [sp]
   1988c:	ldr	r3, [r9]
   19890:	str	r3, [sp, #4]
   19894:	beq	19940 <__assert_fail@plt+0x843c>
   19898:	mov	r8, r1
   1989c:	mov	r5, r1
   198a0:	mov	r6, r7
   198a4:	mov	r4, #0
   198a8:	add	r5, r5, #4
   198ac:	str	r5, [sp]
   198b0:	ldr	r0, [r5, #-4]
   198b4:	bl	113c0 <strlen@plt>
   198b8:	adds	r4, r0, r4
   198bc:	mvncs	r4, #0
   198c0:	subs	r6, r6, #1
   198c4:	bne	198a8 <__assert_fail@plt+0x83a4>
   198c8:	cmp	r4, #0
   198cc:	blt	19930 <__assert_fail@plt+0x842c>
   198d0:	add	r0, r4, #1
   198d4:	bl	18be8 <__assert_fail@plt+0x76e4>
   198d8:	mov	r6, r0
   198dc:	mov	r4, r0
   198e0:	ldr	sl, [r8], #4
   198e4:	mov	r0, sl
   198e8:	bl	113c0 <strlen@plt>
   198ec:	mov	r1, sl
   198f0:	mov	r5, r0
   198f4:	mov	r2, r0
   198f8:	mov	r0, r4
   198fc:	bl	11210 <memcpy@plt>
   19900:	subs	r7, r7, #1
   19904:	add	r4, r4, r5
   19908:	bne	198e0 <__assert_fail@plt+0x83dc>
   1990c:	mov	r3, #0
   19910:	strb	r3, [r4]
   19914:	ldr	r2, [sp, #4]
   19918:	ldr	r3, [r9]
   1991c:	mov	r0, r6
   19920:	cmp	r2, r3
   19924:	bne	19954 <__assert_fail@plt+0x8450>
   19928:	add	sp, sp, #8
   1992c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19930:	bl	113e4 <__errno_location@plt>
   19934:	mov	r3, #75	; 0x4b
   19938:	str	r3, [r0]
   1993c:	b	19914 <__assert_fail@plt+0x8410>
   19940:	mov	r0, #1
   19944:	bl	18be8 <__assert_fail@plt+0x76e4>
   19948:	mov	r4, r0
   1994c:	mov	r6, r0
   19950:	b	1990c <__assert_fail@plt+0x8408>
   19954:	bl	11258 <__stack_chk_fail@plt>
   19958:	andeq	lr, r2, r8, lsl #30
   1995c:	push	{r4, lr}
   19960:	sub	sp, sp, #8
   19964:	ldr	r4, [pc, #176]	; 19a1c <__assert_fail@plt+0x8518>
   19968:	ldrb	r3, [r0]
   1996c:	ldr	r2, [r4]
   19970:	cmp	r3, #0
   19974:	str	r2, [sp, #4]
   19978:	beq	199c0 <__assert_fail@plt+0x84bc>
   1997c:	cmp	r3, #37	; 0x25
   19980:	bne	199cc <__assert_fail@plt+0x84c8>
   19984:	ldrb	r3, [r0, #1]
   19988:	cmp	r3, #115	; 0x73
   1998c:	bne	199cc <__assert_fail@plt+0x84c8>
   19990:	mov	r3, #0
   19994:	add	lr, r0, #1
   19998:	b	199b0 <__assert_fail@plt+0x84ac>
   1999c:	cmp	ip, #37	; 0x25
   199a0:	bne	199cc <__assert_fail@plt+0x84c8>
   199a4:	ldrb	ip, [lr, r3, lsl #1]
   199a8:	cmp	ip, #115	; 0x73
   199ac:	bne	199cc <__assert_fail@plt+0x84c8>
   199b0:	add	r3, r3, #1
   199b4:	ldrb	ip, [r0, r3, lsl #1]
   199b8:	cmp	ip, #0
   199bc:	bne	1999c <__assert_fail@plt+0x8498>
   199c0:	mov	r0, r3
   199c4:	bl	19878 <__assert_fail@plt+0x8374>
   199c8:	b	199e8 <__assert_fail@plt+0x84e4>
   199cc:	mov	r2, r1
   199d0:	mov	r1, r0
   199d4:	mov	r0, sp
   199d8:	bl	19d8c <__assert_fail@plt+0x8888>
   199dc:	cmp	r0, #0
   199e0:	blt	19a00 <__assert_fail@plt+0x84fc>
   199e4:	ldr	r0, [sp]
   199e8:	ldr	r2, [sp, #4]
   199ec:	ldr	r3, [r4]
   199f0:	cmp	r2, r3
   199f4:	bne	19a18 <__assert_fail@plt+0x8514>
   199f8:	add	sp, sp, #8
   199fc:	pop	{r4, pc}
   19a00:	bl	113e4 <__errno_location@plt>
   19a04:	ldr	r3, [r0]
   19a08:	cmp	r3, #12
   19a0c:	movne	r0, #0
   19a10:	bne	199e8 <__assert_fail@plt+0x84e4>
   19a14:	bl	18e30 <__assert_fail@plt+0x792c>
   19a18:	bl	11258 <__stack_chk_fail@plt>
   19a1c:	andeq	lr, r2, r8, lsl #30
   19a20:	push	{r4, r5, lr}
   19a24:	sub	sp, sp, #12
   19a28:	mov	r4, r0
   19a2c:	bl	1142c <fileno@plt>
   19a30:	cmp	r0, #0
   19a34:	mov	r0, r4
   19a38:	blt	19ab4 <__assert_fail@plt+0x85b0>
   19a3c:	bl	1136c <__freading@plt>
   19a40:	cmp	r0, #0
   19a44:	bne	19a80 <__assert_fail@plt+0x857c>
   19a48:	mov	r0, r4
   19a4c:	bl	19c0c <__assert_fail@plt+0x8708>
   19a50:	cmp	r0, #0
   19a54:	beq	19ab0 <__assert_fail@plt+0x85ac>
   19a58:	bl	113e4 <__errno_location@plt>
   19a5c:	mov	r5, r0
   19a60:	mov	r0, r4
   19a64:	ldr	r4, [r5]
   19a68:	bl	11444 <fclose@plt>
   19a6c:	cmp	r4, #0
   19a70:	mvnne	r0, #0
   19a74:	strne	r4, [r5]
   19a78:	add	sp, sp, #12
   19a7c:	pop	{r4, r5, pc}
   19a80:	mov	r0, r4
   19a84:	bl	1142c <fileno@plt>
   19a88:	mov	r3, #1
   19a8c:	str	r3, [sp]
   19a90:	mov	r2, #0
   19a94:	mov	r3, #0
   19a98:	bl	112dc <lseek64@plt>
   19a9c:	mvn	r3, #0
   19aa0:	mvn	r2, #0
   19aa4:	cmp	r1, r3
   19aa8:	cmpeq	r0, r2
   19aac:	bne	19a48 <__assert_fail@plt+0x8544>
   19ab0:	mov	r0, r4
   19ab4:	add	sp, sp, #12
   19ab8:	pop	{r4, r5, lr}
   19abc:	b	11444 <fclose@plt>
   19ac0:	push	{r1, r2, r3}
   19ac4:	push	{r4, r5, r6, r7, r8, lr}
   19ac8:	sub	sp, sp, #12
   19acc:	ldr	r4, [pc, #300]	; 19c00 <__assert_fail@plt+0x86fc>
   19ad0:	ldr	r3, [pc, #300]	; 19c04 <__assert_fail@plt+0x8700>
   19ad4:	ldr	r1, [sp, #36]	; 0x24
   19ad8:	ldr	r2, [r4]
   19adc:	cmp	r1, r3
   19ae0:	add	r3, sp, #40	; 0x28
   19ae4:	str	r2, [sp, #4]
   19ae8:	str	r3, [sp]
   19aec:	bne	19bb8 <__assert_fail@plt+0x86b4>
   19af0:	ldr	r6, [pc, #272]	; 19c08 <__assert_fail@plt+0x8704>
   19af4:	add	r3, sp, #44	; 0x2c
   19af8:	str	r3, [sp]
   19afc:	ldr	r3, [r6]
   19b00:	ldr	r7, [sp, #40]	; 0x28
   19b04:	cmp	r3, #0
   19b08:	blt	19b4c <__assert_fail@plt+0x8648>
   19b0c:	mov	r2, r7
   19b10:	mov	r8, r0
   19b14:	bl	1145c <fcntl64@plt>
   19b18:	subs	r5, r0, #0
   19b1c:	blt	19bc8 <__assert_fail@plt+0x86c4>
   19b20:	mov	r3, #1
   19b24:	str	r3, [r6]
   19b28:	ldr	r2, [sp, #4]
   19b2c:	ldr	r3, [r4]
   19b30:	mov	r0, r5
   19b34:	cmp	r2, r3
   19b38:	bne	19bfc <__assert_fail@plt+0x86f8>
   19b3c:	add	sp, sp, #12
   19b40:	pop	{r4, r5, r6, r7, r8, lr}
   19b44:	add	sp, sp, #12
   19b48:	bx	lr
   19b4c:	mov	r2, r7
   19b50:	mov	r1, #0
   19b54:	bl	19ac0 <__assert_fail@plt+0x85bc>
   19b58:	subs	r5, r0, #0
   19b5c:	blt	19b28 <__assert_fail@plt+0x8624>
   19b60:	ldr	r3, [r6]
   19b64:	cmn	r3, #1
   19b68:	bne	19b28 <__assert_fail@plt+0x8624>
   19b6c:	mov	r1, #1
   19b70:	mov	r0, r5
   19b74:	bl	1145c <fcntl64@plt>
   19b78:	subs	r2, r0, #0
   19b7c:	blt	19b98 <__assert_fail@plt+0x8694>
   19b80:	orr	r2, r2, #1
   19b84:	mov	r1, #2
   19b88:	mov	r0, r5
   19b8c:	bl	1145c <fcntl64@plt>
   19b90:	cmn	r0, #1
   19b94:	bne	19b28 <__assert_fail@plt+0x8624>
   19b98:	bl	113e4 <__errno_location@plt>
   19b9c:	mov	r6, r0
   19ba0:	mov	r0, r5
   19ba4:	ldr	r7, [r6]
   19ba8:	mvn	r5, #0
   19bac:	bl	114e0 <close@plt>
   19bb0:	str	r7, [r6]
   19bb4:	b	19b28 <__assert_fail@plt+0x8624>
   19bb8:	ldr	r2, [sp, #40]	; 0x28
   19bbc:	bl	1145c <fcntl64@plt>
   19bc0:	mov	r5, r0
   19bc4:	b	19b28 <__assert_fail@plt+0x8624>
   19bc8:	bl	113e4 <__errno_location@plt>
   19bcc:	ldr	r3, [r0]
   19bd0:	cmp	r3, #22
   19bd4:	bne	19b20 <__assert_fail@plt+0x861c>
   19bd8:	mov	r2, r7
   19bdc:	mov	r0, r8
   19be0:	mov	r1, #0
   19be4:	bl	19ac0 <__assert_fail@plt+0x85bc>
   19be8:	subs	r5, r0, #0
   19bec:	mvnge	r3, #0
   19bf0:	strge	r3, [r6]
   19bf4:	bge	19b6c <__assert_fail@plt+0x8668>
   19bf8:	b	19b28 <__assert_fail@plt+0x8624>
   19bfc:	bl	11258 <__stack_chk_fail@plt>
   19c00:	andeq	lr, r2, r8, lsl #30
   19c04:	andeq	r0, r0, r6, lsl #8
   19c08:	andeq	pc, r2, r8, lsl #11
   19c0c:	push	{r4, lr}
   19c10:	subs	r4, r0, #0
   19c14:	sub	sp, sp, #8
   19c18:	beq	19c34 <__assert_fail@plt+0x8730>
   19c1c:	bl	1136c <__freading@plt>
   19c20:	cmp	r0, #0
   19c24:	beq	19c34 <__assert_fail@plt+0x8730>
   19c28:	ldr	r3, [r4]
   19c2c:	tst	r3, #256	; 0x100
   19c30:	bne	19c44 <__assert_fail@plt+0x8740>
   19c34:	mov	r0, r4
   19c38:	add	sp, sp, #8
   19c3c:	pop	{r4, lr}
   19c40:	b	111c8 <fflush@plt>
   19c44:	mov	r3, #1
   19c48:	str	r3, [sp]
   19c4c:	mov	r2, #0
   19c50:	mov	r3, #0
   19c54:	mov	r0, r4
   19c58:	bl	19c6c <__assert_fail@plt+0x8768>
   19c5c:	mov	r0, r4
   19c60:	add	sp, sp, #8
   19c64:	pop	{r4, lr}
   19c68:	b	111c8 <fflush@plt>
   19c6c:	push	{r4, r5, r6, r7, r8, lr}
   19c70:	sub	sp, sp, #8
   19c74:	ldmib	r0, {ip, lr}
   19c78:	mov	r4, r0
   19c7c:	ldr	r5, [sp, #32]
   19c80:	cmp	lr, ip
   19c84:	beq	19c9c <__assert_fail@plt+0x8798>
   19c88:	str	r5, [sp, #32]
   19c8c:	mov	r0, r4
   19c90:	add	sp, sp, #8
   19c94:	pop	{r4, r5, r6, r7, r8, lr}
   19c98:	b	11450 <fseeko64@plt>
   19c9c:	ldr	lr, [r0, #20]
   19ca0:	ldr	ip, [r0, #16]
   19ca4:	cmp	lr, ip
   19ca8:	bne	19c88 <__assert_fail@plt+0x8784>
   19cac:	ldr	r8, [r0, #36]	; 0x24
   19cb0:	cmp	r8, #0
   19cb4:	bne	19c88 <__assert_fail@plt+0x8784>
   19cb8:	mov	r6, r2
   19cbc:	mov	r7, r3
   19cc0:	bl	1142c <fileno@plt>
   19cc4:	mov	r2, r6
   19cc8:	mov	r3, r7
   19ccc:	str	r5, [sp]
   19cd0:	bl	112dc <lseek64@plt>
   19cd4:	mvn	r3, #0
   19cd8:	mvn	r2, #0
   19cdc:	cmp	r1, r3
   19ce0:	cmpeq	r0, r2
   19ce4:	beq	19d04 <__assert_fail@plt+0x8800>
   19ce8:	ldr	r3, [r4]
   19cec:	strd	r0, [r4, #80]	; 0x50
   19cf0:	mov	r0, r8
   19cf4:	bic	r3, r3, #16
   19cf8:	str	r3, [r4]
   19cfc:	add	sp, sp, #8
   19d00:	pop	{r4, r5, r6, r7, r8, pc}
   19d04:	mvn	r0, #0
   19d08:	b	19cfc <__assert_fail@plt+0x87f8>
   19d0c:	push	{r4, r5, r6, r7, r8, lr}
   19d10:	subs	r7, r0, #0
   19d14:	ldr	r5, [pc, #108]	; 19d88 <__assert_fail@plt+0x8884>
   19d18:	sub	sp, sp, #8
   19d1c:	mov	r8, r1
   19d20:	ldr	r1, [r5]
   19d24:	moveq	r7, sp
   19d28:	str	r1, [sp, #4]
   19d2c:	mov	r0, r7
   19d30:	mov	r1, r8
   19d34:	mov	r6, r2
   19d38:	bl	1130c <mbrtowc@plt>
   19d3c:	cmp	r6, #0
   19d40:	cmnne	r0, #3
   19d44:	mov	r4, r0
   19d48:	bhi	19d68 <__assert_fail@plt+0x8864>
   19d4c:	ldr	r2, [sp, #4]
   19d50:	ldr	r3, [r5]
   19d54:	mov	r0, r4
   19d58:	cmp	r2, r3
   19d5c:	bne	19d84 <__assert_fail@plt+0x8880>
   19d60:	add	sp, sp, #8
   19d64:	pop	{r4, r5, r6, r7, r8, pc}
   19d68:	mov	r0, #0
   19d6c:	bl	1a138 <__assert_fail@plt+0x8c34>
   19d70:	cmp	r0, #0
   19d74:	moveq	r4, #1
   19d78:	ldrbeq	r3, [r8]
   19d7c:	streq	r3, [r7]
   19d80:	b	19d4c <__assert_fail@plt+0x8848>
   19d84:	bl	11258 <__stack_chk_fail@plt>
   19d88:	andeq	lr, r2, r8, lsl #30
   19d8c:	push	{r4, r5, lr}
   19d90:	sub	sp, sp, #12
   19d94:	ldr	r4, [pc, #116]	; 19e10 <__assert_fail@plt+0x890c>
   19d98:	mov	r3, r2
   19d9c:	mov	r5, r0
   19da0:	ldr	ip, [r4]
   19da4:	mov	r2, r1
   19da8:	mov	r0, #0
   19dac:	mov	r1, sp
   19db0:	str	ip, [sp, #4]
   19db4:	bl	1a1b8 <__assert_fail@plt+0x8cb4>
   19db8:	subs	r2, r0, #0
   19dbc:	beq	19dec <__assert_fail@plt+0x88e8>
   19dc0:	ldr	r3, [sp]
   19dc4:	cmp	r3, #0
   19dc8:	strge	r2, [r5]
   19dcc:	blt	19df4 <__assert_fail@plt+0x88f0>
   19dd0:	ldr	r1, [sp, #4]
   19dd4:	ldr	r2, [r4]
   19dd8:	mov	r0, r3
   19ddc:	cmp	r1, r2
   19de0:	bne	19e0c <__assert_fail@plt+0x8908>
   19de4:	add	sp, sp, #12
   19de8:	pop	{r4, r5, pc}
   19dec:	mvn	r3, #0
   19df0:	b	19dd0 <__assert_fail@plt+0x88cc>
   19df4:	bl	111ec <free@plt>
   19df8:	bl	113e4 <__errno_location@plt>
   19dfc:	mov	r2, #75	; 0x4b
   19e00:	mvn	r3, #0
   19e04:	str	r2, [r0]
   19e08:	b	19dd0 <__assert_fail@plt+0x88cc>
   19e0c:	bl	11258 <__stack_chk_fail@plt>
   19e10:	andeq	lr, r2, r8, lsl #30
   19e14:	mov	r0, #1
   19e18:	b	14de0 <__assert_fail@plt+0x38dc>
   19e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e20:	mov	r5, r1
   19e24:	sub	sp, sp, #12
   19e28:	mov	r4, r2
   19e2c:	str	r2, [sp]
   19e30:	mov	r7, r3
   19e34:	mov	sl, r0
   19e38:	bl	113c0 <strlen@plt>
   19e3c:	ldr	fp, [r5]
   19e40:	cmp	fp, #0
   19e44:	beq	19f08 <__assert_fail@plt+0x8a04>
   19e48:	mov	r6, #0
   19e4c:	mov	r8, r0
   19e50:	str	r6, [sp, #4]
   19e54:	mvn	r9, #0
   19e58:	b	19e84 <__assert_fail@plt+0x8980>
   19e5c:	bl	11240 <memcmp@plt>
   19e60:	ldr	r3, [sp, #4]
   19e64:	cmp	r0, #0
   19e68:	movne	r3, #1
   19e6c:	str	r3, [sp, #4]
   19e70:	ldr	fp, [r5, #4]!
   19e74:	add	r6, r6, #1
   19e78:	cmp	fp, #0
   19e7c:	add	r4, r4, r7
   19e80:	beq	19ee0 <__assert_fail@plt+0x89dc>
   19e84:	mov	r2, r8
   19e88:	mov	r1, sl
   19e8c:	mov	r0, fp
   19e90:	bl	114bc <strncmp@plt>
   19e94:	cmp	r0, #0
   19e98:	mov	r0, fp
   19e9c:	bne	19e70 <__assert_fail@plt+0x896c>
   19ea0:	bl	113c0 <strlen@plt>
   19ea4:	ldr	r3, [sp]
   19ea8:	mov	r2, r7
   19eac:	mov	r1, r4
   19eb0:	cmp	r0, r8
   19eb4:	mla	r0, r7, r9, r3
   19eb8:	beq	19ef8 <__assert_fail@plt+0x89f4>
   19ebc:	cmn	r9, #1
   19ec0:	moveq	r9, r6
   19ec4:	beq	19e70 <__assert_fail@plt+0x896c>
   19ec8:	ldr	r3, [sp]
   19ecc:	cmp	r3, #0
   19ed0:	bne	19e5c <__assert_fail@plt+0x8958>
   19ed4:	mov	r3, #1
   19ed8:	str	r3, [sp, #4]
   19edc:	b	19e70 <__assert_fail@plt+0x896c>
   19ee0:	ldr	r3, [sp, #4]
   19ee4:	cmp	r3, #0
   19ee8:	mvnne	r9, #1
   19eec:	mov	r0, r9
   19ef0:	add	sp, sp, #12
   19ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ef8:	mov	r9, r6
   19efc:	mov	r0, r9
   19f00:	add	sp, sp, #12
   19f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f08:	mvn	r9, #0
   19f0c:	b	19eec <__assert_fail@plt+0x89e8>
   19f10:	cmn	r2, #1
   19f14:	push	{r4, r5, r6, lr}
   19f18:	mov	r2, #5
   19f1c:	sub	sp, sp, #8
   19f20:	mov	r5, r1
   19f24:	mov	r6, r0
   19f28:	ldreq	r1, [pc, #76]	; 19f7c <__assert_fail@plt+0x8a78>
   19f2c:	ldrne	r1, [pc, #76]	; 19f80 <__assert_fail@plt+0x8a7c>
   19f30:	mov	r0, #0
   19f34:	bl	1124c <dcgettext@plt>
   19f38:	mov	r2, r5
   19f3c:	mov	r1, #8
   19f40:	mov	r4, r0
   19f44:	mov	r0, #0
   19f48:	bl	18240 <__assert_fail@plt+0x6d3c>
   19f4c:	mov	r1, r6
   19f50:	mov	r5, r0
   19f54:	mov	r0, #1
   19f58:	bl	1858c <__assert_fail@plt+0x7088>
   19f5c:	mov	r1, #0
   19f60:	mov	r3, r5
   19f64:	mov	r2, r4
   19f68:	str	r0, [sp]
   19f6c:	mov	r0, r1
   19f70:	bl	11318 <error@plt>
   19f74:	add	sp, sp, #8
   19f78:	pop	{r4, r5, r6, pc}
   19f7c:	ldrdeq	lr, [r1], -r4
   19f80:	strdeq	lr, [r1], -r0
   19f84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f88:	mov	r6, r0
   19f8c:	ldr	sl, [pc, #224]	; 1a074 <__assert_fail@plt+0x8b70>
   19f90:	mov	r4, r1
   19f94:	mov	r7, r2
   19f98:	ldr	r1, [pc, #216]	; 1a078 <__assert_fail@plt+0x8b74>
   19f9c:	mov	r2, #5
   19fa0:	mov	r0, #0
   19fa4:	bl	1124c <dcgettext@plt>
   19fa8:	ldr	r1, [sl]
   19fac:	bl	11180 <fputs_unlocked@plt>
   19fb0:	ldr	fp, [r6]
   19fb4:	cmp	fp, #0
   19fb8:	movne	r9, #0
   19fbc:	movne	r5, r9
   19fc0:	bne	19ffc <__assert_fail@plt+0x8af8>
   19fc4:	b	1a040 <__assert_fail@plt+0x8b3c>
   19fc8:	mov	r0, fp
   19fcc:	bl	1859c <__assert_fail@plt+0x7098>
   19fd0:	ldr	r2, [pc, #164]	; 1a07c <__assert_fail@plt+0x8b78>
   19fd4:	mov	r1, #1
   19fd8:	mov	r9, r4
   19fdc:	mov	r3, r0
   19fe0:	mov	r0, r8
   19fe4:	bl	11438 <__fprintf_chk@plt>
   19fe8:	ldr	fp, [r6, #4]!
   19fec:	add	r5, r5, #1
   19ff0:	cmp	fp, #0
   19ff4:	add	r4, r4, r7
   19ff8:	beq	1a040 <__assert_fail@plt+0x8b3c>
   19ffc:	cmp	r5, #0
   1a000:	mov	r1, r4
   1a004:	mov	r2, r7
   1a008:	mov	r0, r9
   1a00c:	ldr	r8, [sl]
   1a010:	beq	19fc8 <__assert_fail@plt+0x8ac4>
   1a014:	bl	11240 <memcmp@plt>
   1a018:	cmp	r0, #0
   1a01c:	bne	19fc8 <__assert_fail@plt+0x8ac4>
   1a020:	mov	r0, fp
   1a024:	bl	1859c <__assert_fail@plt+0x7098>
   1a028:	ldr	r2, [pc, #80]	; 1a080 <__assert_fail@plt+0x8b7c>
   1a02c:	mov	r1, #1
   1a030:	mov	r3, r0
   1a034:	mov	r0, r8
   1a038:	bl	11438 <__fprintf_chk@plt>
   1a03c:	b	19fe8 <__assert_fail@plt+0x8ae4>
   1a040:	ldr	r0, [sl]
   1a044:	ldr	r3, [r0, #20]
   1a048:	ldr	r2, [r0, #24]
   1a04c:	cmp	r3, r2
   1a050:	bcs	1a068 <__assert_fail@plt+0x8b64>
   1a054:	add	r1, r3, #1
   1a058:	mov	r2, #10
   1a05c:	str	r1, [r0, #20]
   1a060:	strb	r2, [r3]
   1a064:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a068:	mov	r1, #10
   1a06c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a070:	b	11468 <__overflow@plt>
   1a074:	ldrdeq	pc, [r2], -r0
   1a078:	andeq	lr, r1, r0, lsl r8
   1a07c:	andeq	lr, r1, r8, lsr #16
   1a080:	andeq	ip, r1, ip, asr #25
   1a084:	push	{r4, r5, r6, r7, r8, lr}
   1a088:	mov	r6, r1
   1a08c:	mov	r4, r2
   1a090:	mov	r5, r3
   1a094:	mov	r7, r0
   1a098:	ldr	r3, [sp, #24]
   1a09c:	mov	r2, r5
   1a0a0:	mov	r1, r4
   1a0a4:	mov	r0, r6
   1a0a8:	bl	19e1c <__assert_fail@plt+0x8918>
   1a0ac:	cmp	r0, #0
   1a0b0:	popge	{r4, r5, r6, r7, r8, pc}
   1a0b4:	mov	r2, r0
   1a0b8:	mov	r1, r6
   1a0bc:	mov	r0, r7
   1a0c0:	bl	19f10 <__assert_fail@plt+0x8a0c>
   1a0c4:	mov	r0, r4
   1a0c8:	ldr	r2, [sp, #24]
   1a0cc:	mov	r1, r5
   1a0d0:	bl	19f84 <__assert_fail@plt+0x8a80>
   1a0d4:	ldr	r3, [sp, #28]
   1a0d8:	blx	r3
   1a0dc:	mvn	r0, #0
   1a0e0:	pop	{r4, r5, r6, r7, r8, pc}
   1a0e4:	push	{r4, r5, r6, r7, r8, lr}
   1a0e8:	ldr	r7, [r1]
   1a0ec:	cmp	r7, #0
   1a0f0:	beq	1a130 <__assert_fail@plt+0x8c2c>
   1a0f4:	mov	r6, r3
   1a0f8:	mov	r8, r0
   1a0fc:	mov	r4, r2
   1a100:	mov	r5, r1
   1a104:	b	1a114 <__assert_fail@plt+0x8c10>
   1a108:	ldr	r7, [r5, #4]!
   1a10c:	cmp	r7, #0
   1a110:	beq	1a130 <__assert_fail@plt+0x8c2c>
   1a114:	mov	r1, r4
   1a118:	mov	r2, r6
   1a11c:	mov	r0, r8
   1a120:	bl	11240 <memcmp@plt>
   1a124:	add	r4, r4, r6
   1a128:	cmp	r0, #0
   1a12c:	bne	1a108 <__assert_fail@plt+0x8c04>
   1a130:	mov	r0, r7
   1a134:	pop	{r4, r5, r6, r7, r8, pc}
   1a138:	push	{r4, lr}
   1a13c:	mov	r1, #0
   1a140:	bl	11474 <setlocale@plt>
   1a144:	subs	r4, r0, #0
   1a148:	beq	1a174 <__assert_fail@plt+0x8c70>
   1a14c:	ldr	r1, [pc, #40]	; 1a17c <__assert_fail@plt+0x8c78>
   1a150:	bl	111a4 <strcmp@plt>
   1a154:	cmp	r0, #0
   1a158:	popeq	{r4, pc}
   1a15c:	mov	r0, r4
   1a160:	ldr	r1, [pc, #24]	; 1a180 <__assert_fail@plt+0x8c7c>
   1a164:	bl	111a4 <strcmp@plt>
   1a168:	adds	r0, r0, #0
   1a16c:	movne	r0, #1
   1a170:	pop	{r4, pc}
   1a174:	mov	r0, #1
   1a178:	pop	{r4, pc}
   1a17c:	andeq	lr, r1, r0, lsr r8
   1a180:	andeq	lr, r1, r4, lsr r8
   1a184:	push	{r4, lr}
   1a188:	mov	r0, #14
   1a18c:	bl	11498 <nl_langinfo@plt>
   1a190:	cmp	r0, #0
   1a194:	beq	1a1ac <__assert_fail@plt+0x8ca8>
   1a198:	ldrb	r2, [r0]
   1a19c:	ldr	r3, [pc, #16]	; 1a1b4 <__assert_fail@plt+0x8cb0>
   1a1a0:	cmp	r2, #0
   1a1a4:	moveq	r0, r3
   1a1a8:	pop	{r4, pc}
   1a1ac:	ldr	r0, [pc]	; 1a1b4 <__assert_fail@plt+0x8cb0>
   1a1b0:	pop	{r4, pc}
   1a1b4:	andeq	lr, r1, ip, lsr r8
   1a1b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1bc:	mov	r9, r2
   1a1c0:	ldr	r2, [pc, #3592]	; 1afd0 <__assert_fail@plt+0x9acc>
   1a1c4:	add	fp, sp, #32
   1a1c8:	sub	sp, sp, #540	; 0x21c
   1a1cc:	ldr	ip, [r2]
   1a1d0:	str	r0, [fp, #-504]	; 0xfffffe08
   1a1d4:	str	r1, [fp, #-532]	; 0xfffffdec
   1a1d8:	mov	r0, r9
   1a1dc:	sub	r2, fp, #484	; 0x1e4
   1a1e0:	sub	r1, fp, #364	; 0x16c
   1a1e4:	mov	r4, r3
   1a1e8:	str	ip, [fp, #-40]	; 0xffffffd8
   1a1ec:	bl	1b108 <__assert_fail@plt+0x9c04>
   1a1f0:	cmp	r0, #0
   1a1f4:	blt	1a7cc <__assert_fail@plt+0x92c8>
   1a1f8:	sub	r1, fp, #484	; 0x1e4
   1a1fc:	mov	r0, r4
   1a200:	bl	1afd4 <__assert_fail@plt+0x9ad0>
   1a204:	cmp	r0, #0
   1a208:	blt	1ad88 <__assert_fail@plt+0x9884>
   1a20c:	ldr	r2, [fp, #-356]	; 0xfffffe9c
   1a210:	ldr	r3, [fp, #-352]	; 0xfffffea0
   1a214:	adds	r2, r2, #7
   1a218:	mvncs	r2, #0
   1a21c:	adds	r3, r3, r2
   1a220:	bcs	1a7c0 <__assert_fail@plt+0x92bc>
   1a224:	mov	r0, #6
   1a228:	adds	r0, r3, r0
   1a22c:	bcs	1a7c0 <__assert_fail@plt+0x92bc>
   1a230:	cmp	r0, #4000	; 0xfa0
   1a234:	bcc	1a464 <__assert_fail@plt+0x8f60>
   1a238:	cmn	r0, #1
   1a23c:	beq	1a7c0 <__assert_fail@plt+0x92bc>
   1a240:	bl	1133c <malloc@plt>
   1a244:	subs	r3, r0, #0
   1a248:	str	r3, [fp, #-516]	; 0xfffffdfc
   1a24c:	beq	1a7c0 <__assert_fail@plt+0x92bc>
   1a250:	str	r3, [fp, #-536]	; 0xfffffde8
   1a254:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1a258:	ldr	sl, [fp, #-360]	; 0xfffffe98
   1a25c:	cmp	r3, #0
   1a260:	ldr	r5, [fp, #-504]	; 0xfffffe08
   1a264:	ldrne	r3, [fp, #-532]	; 0xfffffdec
   1a268:	ldreq	r6, [fp, #-504]	; 0xfffffe08
   1a26c:	mov	r4, #0
   1a270:	ldrne	r6, [r3]
   1a274:	mov	r3, r5
   1a278:	ldr	r5, [sl]
   1a27c:	str	r4, [fp, #-528]	; 0xfffffdf0
   1a280:	cmp	r5, r9
   1a284:	beq	1a6dc <__assert_fail@plt+0x91d8>
   1a288:	sub	r5, r5, r9
   1a28c:	adds	r2, r4, r5
   1a290:	mov	r7, r2
   1a294:	bcs	1a6e4 <__assert_fail@plt+0x91e0>
   1a298:	cmp	r6, r2
   1a29c:	bcs	1a310 <__assert_fail@plt+0x8e0c>
   1a2a0:	cmp	r6, #0
   1a2a4:	bne	1a7d4 <__assert_fail@plt+0x92d0>
   1a2a8:	cmp	r2, #12
   1a2ac:	movls	r6, #12
   1a2b0:	bhi	1a7e4 <__assert_fail@plt+0x92e0>
   1a2b4:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1a2b8:	cmp	r3, r2
   1a2bc:	cmpne	r3, #0
   1a2c0:	sub	r8, r3, r2
   1a2c4:	clz	r8, r8
   1a2c8:	lsr	r8, r8, #5
   1a2cc:	bne	1a778 <__assert_fail@plt+0x9274>
   1a2d0:	mov	r0, r6
   1a2d4:	str	r3, [fp, #-508]	; 0xfffffe04
   1a2d8:	bl	1133c <malloc@plt>
   1a2dc:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a2e0:	subs	ip, r0, #0
   1a2e4:	beq	1ab9c <__assert_fail@plt+0x9698>
   1a2e8:	cmp	r4, #0
   1a2ec:	moveq	r8, #0
   1a2f0:	cmp	r8, #0
   1a2f4:	moveq	r3, ip
   1a2f8:	beq	1a310 <__assert_fail@plt+0x8e0c>
   1a2fc:	mov	r1, r3
   1a300:	mov	r2, r4
   1a304:	str	ip, [fp, #-508]	; 0xfffffe04
   1a308:	bl	11210 <memcpy@plt>
   1a30c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a310:	add	r0, r3, r4
   1a314:	mov	r2, r5
   1a318:	mov	r1, r9
   1a31c:	str	r3, [fp, #-508]	; 0xfffffe04
   1a320:	bl	11210 <memcpy@plt>
   1a324:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a328:	ldr	r2, [fp, #-364]	; 0xfffffe94
   1a32c:	ldr	r1, [fp, #-528]	; 0xfffffdf0
   1a330:	cmp	r2, r1
   1a334:	beq	1ae70 <__assert_fail@plt+0x996c>
   1a338:	ldrb	r1, [sl, #36]	; 0x24
   1a33c:	ldr	r2, [sl, #40]	; 0x28
   1a340:	cmp	r1, #37	; 0x25
   1a344:	beq	1a624 <__assert_fail@plt+0x9120>
   1a348:	cmn	r2, #1
   1a34c:	beq	1afcc <__assert_fail@plt+0x9ac8>
   1a350:	ldr	r9, [fp, #-480]	; 0xfffffe20
   1a354:	cmp	r1, #110	; 0x6e
   1a358:	add	r1, r9, r2, lsl #4
   1a35c:	ldr	r5, [r9, r2, lsl #4]
   1a360:	beq	1a79c <__assert_fail@plt+0x9298>
   1a364:	ldr	r2, [sl, #8]
   1a368:	ldr	r0, [fp, #-516]	; 0xfffffdfc
   1a36c:	tst	r2, #1
   1a370:	mov	r1, #37	; 0x25
   1a374:	strb	r1, [r0]
   1a378:	ldrne	r0, [fp, #-516]	; 0xfffffdfc
   1a37c:	movne	r1, #39	; 0x27
   1a380:	addne	r4, r0, #2
   1a384:	strbne	r1, [r0, #1]
   1a388:	addeq	r4, r0, #1
   1a38c:	tst	r2, #2
   1a390:	movne	r1, #45	; 0x2d
   1a394:	strbne	r1, [r4], #1
   1a398:	tst	r2, #4
   1a39c:	movne	r1, #43	; 0x2b
   1a3a0:	strbne	r1, [r4], #1
   1a3a4:	tst	r2, #8
   1a3a8:	movne	r1, #32
   1a3ac:	strbne	r1, [r4], #1
   1a3b0:	tst	r2, #16
   1a3b4:	movne	r1, #35	; 0x23
   1a3b8:	strbne	r1, [r4], #1
   1a3bc:	tst	r2, #64	; 0x40
   1a3c0:	movne	r1, #73	; 0x49
   1a3c4:	strbne	r1, [r4], #1
   1a3c8:	tst	r2, #32
   1a3cc:	movne	r2, #48	; 0x30
   1a3d0:	strbne	r2, [r4], #1
   1a3d4:	ldr	r1, [sl, #12]
   1a3d8:	ldr	r8, [sl, #16]
   1a3dc:	cmp	r1, r8
   1a3e0:	beq	1a400 <__assert_fail@plt+0x8efc>
   1a3e4:	sub	r8, r8, r1
   1a3e8:	mov	r0, r4
   1a3ec:	mov	r2, r8
   1a3f0:	str	r3, [fp, #-508]	; 0xfffffe04
   1a3f4:	bl	11210 <memcpy@plt>
   1a3f8:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a3fc:	add	r4, r4, r8
   1a400:	ldr	r1, [sl, #24]
   1a404:	ldr	r8, [sl, #28]
   1a408:	cmp	r1, r8
   1a40c:	beq	1a42c <__assert_fail@plt+0x8f28>
   1a410:	sub	r8, r8, r1
   1a414:	mov	r0, r4
   1a418:	mov	r2, r8
   1a41c:	str	r3, [fp, #-508]	; 0xfffffe04
   1a420:	bl	11210 <memcpy@plt>
   1a424:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a428:	add	r4, r4, r8
   1a42c:	sub	r2, r5, #7
   1a430:	cmp	r2, #9
   1a434:	ldrls	pc, [pc, r2, lsl #2]
   1a438:	b	1a494 <__assert_fail@plt+0x8f90>
   1a43c:	andeq	sl, r1, ip, lsl #9
   1a440:	andeq	sl, r1, ip, lsl #9
   1a444:	andeq	sl, r1, r4, lsl #9
   1a448:	andeq	sl, r1, r4, lsl #9
   1a44c:	muleq	r1, r4, r4
   1a450:	strdeq	sl, [r1], -r4
   1a454:	muleq	r1, r4, r4
   1a458:	andeq	sl, r1, ip, lsl #9
   1a45c:	muleq	r1, r4, r4
   1a460:	andeq	sl, r1, ip, lsl #9
   1a464:	add	r3, r3, #13
   1a468:	bic	r3, r3, #7
   1a46c:	sub	sp, sp, r3
   1a470:	add	r3, sp, #32
   1a474:	str	r3, [fp, #-516]	; 0xfffffdfc
   1a478:	mov	r3, #0
   1a47c:	str	r3, [fp, #-536]	; 0xfffffde8
   1a480:	b	1a254 <__assert_fail@plt+0x8d50>
   1a484:	mov	r2, #108	; 0x6c
   1a488:	strb	r2, [r4], #1
   1a48c:	mov	r2, #108	; 0x6c
   1a490:	strb	r2, [r4], #1
   1a494:	ldrb	r2, [sl, #36]	; 0x24
   1a498:	mov	r1, #0
   1a49c:	strb	r1, [r4, #1]
   1a4a0:	strb	r2, [r4]
   1a4a4:	ldr	r2, [sl, #20]
   1a4a8:	cmn	r2, #1
   1a4ac:	beq	1ac4c <__assert_fail@plt+0x9748>
   1a4b0:	ldr	r1, [r9, r2, lsl #4]
   1a4b4:	add	r2, r9, r2, lsl #4
   1a4b8:	cmp	r1, #5
   1a4bc:	bne	1afcc <__assert_fail@plt+0x9ac8>
   1a4c0:	ldr	r2, [r2, #8]
   1a4c4:	mov	r8, #1
   1a4c8:	str	r2, [fp, #-492]	; 0xfffffe14
   1a4cc:	ldr	r2, [sl, #32]
   1a4d0:	cmn	r2, #1
   1a4d4:	beq	1a4fc <__assert_fail@plt+0x8ff8>
   1a4d8:	ldr	r1, [r9, r2, lsl #4]
   1a4dc:	add	r9, r9, r2, lsl #4
   1a4e0:	cmp	r1, #5
   1a4e4:	bne	1afcc <__assert_fail@plt+0x9ac8>
   1a4e8:	sub	r2, fp, #36	; 0x24
   1a4ec:	add	r2, r2, r8, lsl #2
   1a4f0:	ldr	r1, [r9, #8]
   1a4f4:	add	r8, r8, #1
   1a4f8:	str	r1, [r2, #-456]	; 0xfffffe38
   1a4fc:	mov	r2, #2
   1a500:	adds	r2, r7, r2
   1a504:	str	r2, [fp, #-524]	; 0xfffffdf4
   1a508:	bcs	1ac84 <__assert_fail@plt+0x9780>
   1a50c:	cmp	r6, r2
   1a510:	bcs	1ac8c <__assert_fail@plt+0x9788>
   1a514:	cmp	r6, #0
   1a518:	bne	1ab48 <__assert_fail@plt+0x9644>
   1a51c:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1a520:	cmp	r2, #12
   1a524:	movls	r6, #12
   1a528:	bhi	1ab5c <__assert_fail@plt+0x9658>
   1a52c:	ldr	r1, [fp, #-504]	; 0xfffffe08
   1a530:	sub	r2, r3, r1
   1a534:	cmp	r3, r1
   1a538:	cmpne	r3, #0
   1a53c:	clz	r2, r2
   1a540:	lsr	r2, r2, #5
   1a544:	str	r2, [fp, #-508]	; 0xfffffe04
   1a548:	bne	1ac54 <__assert_fail@plt+0x9750>
   1a54c:	mov	r0, r6
   1a550:	str	r3, [fp, #-512]	; 0xfffffe00
   1a554:	bl	1133c <malloc@plt>
   1a558:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1a55c:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1a560:	subs	r9, r0, #0
   1a564:	beq	1ab9c <__assert_fail@plt+0x9698>
   1a568:	cmp	r7, #0
   1a56c:	moveq	r2, #0
   1a570:	cmp	r2, #0
   1a574:	beq	1a584 <__assert_fail@plt+0x9080>
   1a578:	mov	r1, r3
   1a57c:	mov	r2, r7
   1a580:	bl	11210 <memcpy@plt>
   1a584:	mov	r3, #0
   1a588:	strb	r3, [r9, r7]
   1a58c:	bl	113e4 <__errno_location@plt>
   1a590:	sub	r3, r5, #1
   1a594:	str	r3, [fp, #-520]	; 0xfffffdf8
   1a598:	ldr	r3, [r0]
   1a59c:	str	r0, [fp, #-508]	; 0xfffffe04
   1a5a0:	str	r3, [fp, #-540]	; 0xfffffde4
   1a5a4:	sub	r3, r6, r7
   1a5a8:	str	r3, [fp, #-512]	; 0xfffffe00
   1a5ac:	ldr	r3, [fp, #-512]	; 0xfffffe00
   1a5b0:	mvn	r2, #0
   1a5b4:	cmp	r3, #0
   1a5b8:	str	r2, [fp, #-496]	; 0xfffffe10
   1a5bc:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1a5c0:	movge	r5, r3
   1a5c4:	ldr	r3, [fp, #-520]	; 0xfffffdf8
   1a5c8:	mov	r1, #0
   1a5cc:	str	r1, [r2]
   1a5d0:	mvnlt	r5, #-2147483648	; 0x80000000
   1a5d4:	cmp	r3, #16
   1a5d8:	ldrls	pc, [pc, r3, lsl #2]
   1a5dc:	b	1afcc <__assert_fail@plt+0x9ac8>
   1a5e0:	andeq	sl, r1, r8, lsr #22
   1a5e4:	andeq	sl, r1, r8, lsl #22
   1a5e8:	andeq	sl, r1, ip, lsr #21
   1a5ec:	andeq	sl, r1, r0, ror #20
   1a5f0:	andeq	sl, r1, r0, lsl #16
   1a5f4:	andeq	sl, r1, r0, lsl #16
   1a5f8:	andeq	sl, r1, r0, lsl #16
   1a5fc:	andeq	sl, r1, r0, lsl #16
   1a600:	andeq	sl, r1, r4, lsr #18
   1a604:	andeq	sl, r1, r4, lsr #18
   1a608:	andeq	sl, r1, r4, lsl sl
   1a60c:	andeq	sl, r1, r4, lsl sl
   1a610:	andeq	sl, r1, r0, lsl #16
   1a614:	andeq	sl, r1, r0, lsl #16
   1a618:	andeq	sl, r1, r0, lsl #16
   1a61c:	andeq	sl, r1, r0, lsl #16
   1a620:	andeq	sl, r1, r0, lsl #16
   1a624:	cmn	r2, #1
   1a628:	bne	1afcc <__assert_fail@plt+0x9ac8>
   1a62c:	mov	r2, #1
   1a630:	adds	r2, r7, r2
   1a634:	mov	r4, r2
   1a638:	bcs	1ac74 <__assert_fail@plt+0x9770>
   1a63c:	cmp	r6, r2
   1a640:	bcs	1a6b4 <__assert_fail@plt+0x91b0>
   1a644:	cmp	r6, #0
   1a648:	bne	1ab98 <__assert_fail@plt+0x9694>
   1a64c:	cmp	r2, #12
   1a650:	movls	r6, #12
   1a654:	bhi	1add0 <__assert_fail@plt+0x98cc>
   1a658:	ldr	r2, [fp, #-504]	; 0xfffffe08
   1a65c:	cmp	r3, r2
   1a660:	cmpne	r3, #0
   1a664:	sub	r5, r3, r2
   1a668:	clz	r5, r5
   1a66c:	lsr	r5, r5, #5
   1a670:	bne	1ad64 <__assert_fail@plt+0x9860>
   1a674:	mov	r0, r6
   1a678:	str	r3, [fp, #-508]	; 0xfffffe04
   1a67c:	bl	1133c <malloc@plt>
   1a680:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a684:	subs	ip, r0, #0
   1a688:	beq	1ab9c <__assert_fail@plt+0x9698>
   1a68c:	cmp	r7, #0
   1a690:	moveq	r5, #0
   1a694:	cmp	r5, #0
   1a698:	moveq	r3, ip
   1a69c:	beq	1a6b4 <__assert_fail@plt+0x91b0>
   1a6a0:	mov	r1, r3
   1a6a4:	mov	r2, r7
   1a6a8:	str	ip, [fp, #-508]	; 0xfffffe04
   1a6ac:	bl	11210 <memcpy@plt>
   1a6b0:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a6b4:	mov	r2, #37	; 0x25
   1a6b8:	strb	r2, [r3, r7]
   1a6bc:	ldr	r9, [sl, #4]
   1a6c0:	add	sl, sl, #44	; 0x2c
   1a6c4:	ldr	r2, [fp, #-528]	; 0xfffffdf0
   1a6c8:	ldr	r5, [sl]
   1a6cc:	add	r2, r2, #1
   1a6d0:	cmp	r5, r9
   1a6d4:	str	r2, [fp, #-528]	; 0xfffffdf0
   1a6d8:	bne	1a288 <__assert_fail@plt+0x8d84>
   1a6dc:	mov	r7, r4
   1a6e0:	b	1a328 <__assert_fail@plt+0x8e24>
   1a6e4:	cmn	r6, #1
   1a6e8:	beq	1ad5c <__assert_fail@plt+0x9858>
   1a6ec:	mov	r5, r3
   1a6f0:	bl	113e4 <__errno_location@plt>
   1a6f4:	mov	r9, r5
   1a6f8:	str	r0, [fp, #-508]	; 0xfffffe04
   1a6fc:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1a700:	cmp	r9, r3
   1a704:	cmpne	r9, #0
   1a708:	bne	1abb8 <__assert_fail@plt+0x96b4>
   1a70c:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1a710:	cmp	r3, #0
   1a714:	beq	1a720 <__assert_fail@plt+0x921c>
   1a718:	mov	r0, r3
   1a71c:	bl	111ec <free@plt>
   1a720:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1a724:	sub	r3, fp, #348	; 0x15c
   1a728:	cmp	r0, r3
   1a72c:	beq	1a734 <__assert_fail@plt+0x9230>
   1a730:	bl	111ec <free@plt>
   1a734:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1a738:	sub	r3, fp, #476	; 0x1dc
   1a73c:	cmp	r0, r3
   1a740:	beq	1a748 <__assert_fail@plt+0x9244>
   1a744:	bl	111ec <free@plt>
   1a748:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1a74c:	mov	r5, #0
   1a750:	mov	r3, #12
   1a754:	str	r3, [r2]
   1a758:	ldr	r3, [pc, #2160]	; 1afd0 <__assert_fail@plt+0x9acc>
   1a75c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a760:	mov	r0, r5
   1a764:	ldr	r3, [r3]
   1a768:	cmp	r2, r3
   1a76c:	bne	1afbc <__assert_fail@plt+0x9ab8>
   1a770:	sub	sp, fp, #32
   1a774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a778:	mov	r0, r3
   1a77c:	mov	r1, r6
   1a780:	str	r3, [fp, #-508]	; 0xfffffe04
   1a784:	bl	11270 <realloc@plt>
   1a788:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a78c:	cmp	r0, #0
   1a790:	beq	1af54 <__assert_fail@plt+0x9a50>
   1a794:	mov	r3, r0
   1a798:	b	1a310 <__assert_fail@plt+0x8e0c>
   1a79c:	sub	r5, r5, #18
   1a7a0:	cmp	r5, #4
   1a7a4:	ldrls	pc, [pc, r5, lsl #2]
   1a7a8:	b	1afcc <__assert_fail@plt+0x9ac8>
   1a7ac:	andeq	sl, r1, ip, ror #23
   1a7b0:	ldrdeq	sl, [r1], -ip
   1a7b4:	andeq	sl, r1, r8, lsl #23
   1a7b8:	andeq	sl, r1, r8, lsl #23
   1a7bc:	andeq	sl, r1, r4, asr #23
   1a7c0:	bl	113e4 <__errno_location@plt>
   1a7c4:	str	r0, [fp, #-508]	; 0xfffffe04
   1a7c8:	b	1a720 <__assert_fail@plt+0x921c>
   1a7cc:	mov	r5, #0
   1a7d0:	b	1a758 <__assert_fail@plt+0x9254>
   1a7d4:	blt	1ab9c <__assert_fail@plt+0x9698>
   1a7d8:	lsl	r6, r6, #1
   1a7dc:	cmp	r6, r2
   1a7e0:	bcs	1a2b4 <__assert_fail@plt+0x8db0>
   1a7e4:	cmn	r2, #1
   1a7e8:	beq	1a6ec <__assert_fail@plt+0x91e8>
   1a7ec:	mov	r6, r2
   1a7f0:	b	1a2b4 <__assert_fail@plt+0x8db0>
   1a7f4:	mov	r2, #76	; 0x4c
   1a7f8:	strb	r2, [r4], #1
   1a7fc:	b	1a494 <__assert_fail@plt+0x8f90>
   1a800:	ldr	r2, [sl, #40]	; 0x28
   1a804:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1a808:	cmp	r8, #1
   1a80c:	add	r3, r3, r2, lsl #4
   1a810:	add	r0, r9, r7
   1a814:	ldr	r3, [r3, #8]
   1a818:	beq	1aa7c <__assert_fail@plt+0x9578>
   1a81c:	cmp	r8, #2
   1a820:	beq	1aad0 <__assert_fail@plt+0x95cc>
   1a824:	str	r3, [sp, #4]
   1a828:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1a82c:	sub	r2, fp, #496	; 0x1f0
   1a830:	str	r2, [sp, #8]
   1a834:	str	r3, [sp]
   1a838:	mov	r2, #1
   1a83c:	mvn	r3, #0
   1a840:	mov	r1, r5
   1a844:	bl	114f8 <__snprintf_chk@plt>
   1a848:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1a84c:	cmp	r2, #0
   1a850:	blt	1a978 <__assert_fail@plt+0x9474>
   1a854:	cmp	r2, r5
   1a858:	mov	r3, r2
   1a85c:	bcs	1a870 <__assert_fail@plt+0x936c>
   1a860:	add	r1, r9, r2
   1a864:	ldrb	r1, [r1, r7]
   1a868:	cmp	r1, #0
   1a86c:	bne	1afcc <__assert_fail@plt+0x9ac8>
   1a870:	cmp	r2, r0
   1a874:	bge	1a880 <__assert_fail@plt+0x937c>
   1a878:	mov	r3, r0
   1a87c:	str	r0, [fp, #-496]	; 0xfffffe10
   1a880:	add	r2, r3, #1
   1a884:	cmp	r2, r5
   1a888:	bcc	1ade0 <__assert_fail@plt+0x98dc>
   1a88c:	cmn	r5, #-2147483647	; 0x80000001
   1a890:	beq	1adf8 <__assert_fail@plt+0x98f4>
   1a894:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1a898:	add	r3, r3, r2
   1a89c:	cmp	r7, r3
   1a8a0:	mvnhi	r3, #0
   1a8a4:	cmp	r6, #0
   1a8a8:	blt	1abfc <__assert_fail@plt+0x96f8>
   1a8ac:	lsl	r2, r6, #1
   1a8b0:	cmp	r2, r3
   1a8b4:	movcs	r3, r2
   1a8b8:	cmp	r6, r3
   1a8bc:	bcs	1a5ac <__assert_fail@plt+0x90a8>
   1a8c0:	cmp	r2, r3
   1a8c4:	bcc	1ac08 <__assert_fail@plt+0x9704>
   1a8c8:	mov	r6, r2
   1a8cc:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1a8d0:	cmp	r9, r3
   1a8d4:	cmpne	r9, #0
   1a8d8:	sub	r5, r9, r3
   1a8dc:	clz	r5, r5
   1a8e0:	lsr	r5, r5, #5
   1a8e4:	bne	1ac18 <__assert_fail@plt+0x9714>
   1a8e8:	mov	r0, r6
   1a8ec:	bl	1133c <malloc@plt>
   1a8f0:	subs	r3, r0, #0
   1a8f4:	beq	1a6fc <__assert_fail@plt+0x91f8>
   1a8f8:	cmp	r7, #0
   1a8fc:	moveq	r5, #0
   1a900:	cmp	r5, #0
   1a904:	beq	1ac3c <__assert_fail@plt+0x9738>
   1a908:	mov	r1, r9
   1a90c:	mov	r2, r7
   1a910:	mov	r9, r3
   1a914:	bl	11210 <memcpy@plt>
   1a918:	sub	r3, r6, r7
   1a91c:	str	r3, [fp, #-512]	; 0xfffffe00
   1a920:	b	1a5ac <__assert_fail@plt+0x90a8>
   1a924:	ldr	r2, [sl, #40]	; 0x28
   1a928:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1a92c:	cmp	r8, #1
   1a930:	add	r3, r3, r2, lsl #4
   1a934:	add	r0, r9, r7
   1a938:	ldrd	r2, [r3, #8]
   1a93c:	beq	1acc8 <__assert_fail@plt+0x97c4>
   1a940:	cmp	r8, #2
   1a944:	beq	1ac94 <__assert_fail@plt+0x9790>
   1a948:	strd	r2, [sp, #8]
   1a94c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1a950:	sub	r1, fp, #496	; 0x1f0
   1a954:	str	r1, [sp, #16]
   1a958:	str	r3, [sp]
   1a95c:	mov	r2, #1
   1a960:	mvn	r3, #0
   1a964:	mov	r1, r5
   1a968:	bl	114f8 <__snprintf_chk@plt>
   1a96c:	ldr	r2, [fp, #-496]	; 0xfffffe10
   1a970:	cmp	r2, #0
   1a974:	bge	1a854 <__assert_fail@plt+0x9350>
   1a978:	ldrb	r3, [r4, #1]
   1a97c:	cmp	r3, #0
   1a980:	movne	r3, #0
   1a984:	strbne	r3, [r4, #1]
   1a988:	bne	1a5ac <__assert_fail@plt+0x90a8>
   1a98c:	cmp	r0, #0
   1a990:	bge	1a878 <__assert_fail@plt+0x9374>
   1a994:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1a998:	ldr	r4, [r3]
   1a99c:	cmp	r4, #0
   1a9a0:	bne	1a9b8 <__assert_fail@plt+0x94b4>
   1a9a4:	ldrb	r3, [sl, #36]	; 0x24
   1a9a8:	and	r3, r3, #239	; 0xef
   1a9ac:	cmp	r3, #99	; 0x63
   1a9b0:	moveq	r4, #84	; 0x54
   1a9b4:	movne	r4, #22
   1a9b8:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1a9bc:	cmp	r9, r3
   1a9c0:	cmpne	r9, #0
   1a9c4:	bne	1ae58 <__assert_fail@plt+0x9954>
   1a9c8:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1a9cc:	cmp	r3, #0
   1a9d0:	beq	1a9dc <__assert_fail@plt+0x94d8>
   1a9d4:	mov	r0, r3
   1a9d8:	bl	111ec <free@plt>
   1a9dc:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1a9e0:	sub	r3, fp, #348	; 0x15c
   1a9e4:	cmp	r0, r3
   1a9e8:	beq	1a9f0 <__assert_fail@plt+0x94ec>
   1a9ec:	bl	111ec <free@plt>
   1a9f0:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1a9f4:	sub	r3, fp, #476	; 0x1dc
   1a9f8:	cmp	r0, r3
   1a9fc:	beq	1aa04 <__assert_fail@plt+0x9500>
   1aa00:	bl	111ec <free@plt>
   1aa04:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1aa08:	mov	r5, #0
   1aa0c:	str	r4, [r3]
   1aa10:	b	1a758 <__assert_fail@plt+0x9254>
   1aa14:	ldr	r2, [sl, #40]	; 0x28
   1aa18:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1aa1c:	cmp	r8, #1
   1aa20:	add	r3, r3, r2, lsl #4
   1aa24:	add	r0, r9, r7
   1aa28:	ldrd	r2, [r3, #8]
   1aa2c:	beq	1ad2c <__assert_fail@plt+0x9828>
   1aa30:	cmp	r8, #2
   1aa34:	beq	1acf8 <__assert_fail@plt+0x97f4>
   1aa38:	strd	r2, [sp, #8]
   1aa3c:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1aa40:	sub	r1, fp, #496	; 0x1f0
   1aa44:	str	r1, [sp, #16]
   1aa48:	str	r3, [sp]
   1aa4c:	mov	r2, #1
   1aa50:	mvn	r3, #0
   1aa54:	mov	r1, r5
   1aa58:	bl	114f8 <__snprintf_chk@plt>
   1aa5c:	b	1a848 <__assert_fail@plt+0x9344>
   1aa60:	ldr	r2, [sl, #40]	; 0x28
   1aa64:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1aa68:	cmp	r8, #1
   1aa6c:	add	r3, r3, r2, lsl #4
   1aa70:	add	r0, r9, r7
   1aa74:	ldrh	r3, [r3, #8]
   1aa78:	bne	1a81c <__assert_fail@plt+0x9318>
   1aa7c:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1aa80:	str	r3, [sp, #8]
   1aa84:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1aa88:	sub	r1, fp, #496	; 0x1f0
   1aa8c:	str	r1, [sp, #12]
   1aa90:	str	r3, [sp]
   1aa94:	str	r2, [sp, #4]
   1aa98:	mvn	r3, #0
   1aa9c:	mov	r2, r8
   1aaa0:	mov	r1, r5
   1aaa4:	bl	114f8 <__snprintf_chk@plt>
   1aaa8:	b	1a848 <__assert_fail@plt+0x9344>
   1aaac:	ldr	r2, [sl, #40]	; 0x28
   1aab0:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1aab4:	cmp	r8, #1
   1aab8:	add	r3, r3, r2, lsl #4
   1aabc:	add	r0, r9, r7
   1aac0:	ldrsh	r3, [r3, #8]
   1aac4:	beq	1aa7c <__assert_fail@plt+0x9578>
   1aac8:	cmp	r8, #2
   1aacc:	bne	1a824 <__assert_fail@plt+0x9320>
   1aad0:	ldr	r1, [fp, #-488]	; 0xfffffe18
   1aad4:	ldr	r2, [fp, #-492]	; 0xfffffe14
   1aad8:	str	r3, [sp, #12]
   1aadc:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1aae0:	sub	ip, fp, #496	; 0x1f0
   1aae4:	str	r3, [sp]
   1aae8:	str	r1, [sp, #8]
   1aaec:	str	r2, [sp, #4]
   1aaf0:	str	ip, [sp, #16]
   1aaf4:	mvn	r3, #0
   1aaf8:	mov	r2, #1
   1aafc:	mov	r1, r5
   1ab00:	bl	114f8 <__snprintf_chk@plt>
   1ab04:	b	1a848 <__assert_fail@plt+0x9344>
   1ab08:	ldr	r2, [sl, #40]	; 0x28
   1ab0c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1ab10:	cmp	r8, #1
   1ab14:	add	r3, r3, r2, lsl #4
   1ab18:	add	r0, r9, r7
   1ab1c:	ldrb	r3, [r3, #8]
   1ab20:	bne	1a81c <__assert_fail@plt+0x9318>
   1ab24:	b	1aa7c <__assert_fail@plt+0x9578>
   1ab28:	ldr	r2, [sl, #40]	; 0x28
   1ab2c:	ldr	r3, [fp, #-480]	; 0xfffffe20
   1ab30:	cmp	r8, #1
   1ab34:	add	r3, r3, r2, lsl #4
   1ab38:	add	r0, r9, r7
   1ab3c:	ldrsb	r3, [r3, #8]
   1ab40:	bne	1a81c <__assert_fail@plt+0x9318>
   1ab44:	b	1aa7c <__assert_fail@plt+0x9578>
   1ab48:	blt	1ab9c <__assert_fail@plt+0x9698>
   1ab4c:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1ab50:	lsl	r6, r6, #1
   1ab54:	cmp	r6, r2
   1ab58:	bcs	1a52c <__assert_fail@plt+0x9028>
   1ab5c:	ldr	r2, [fp, #-524]	; 0xfffffdf4
   1ab60:	mov	r1, #0
   1ab64:	cmn	r2, #1
   1ab68:	movne	r2, #0
   1ab6c:	moveq	r2, #1
   1ab70:	cmp	r1, r1
   1ab74:	movne	r2, #255	; 0xff
   1ab78:	cmp	r2, r1
   1ab7c:	bne	1a6ec <__assert_fail@plt+0x91e8>
   1ab80:	ldr	r6, [fp, #-524]	; 0xfffffdf4
   1ab84:	b	1a52c <__assert_fail@plt+0x9028>
   1ab88:	ldr	r2, [r1, #8]
   1ab8c:	mov	r4, r7
   1ab90:	str	r7, [r2]
   1ab94:	b	1a6bc <__assert_fail@plt+0x91b8>
   1ab98:	bge	1adc4 <__assert_fail@plt+0x98c0>
   1ab9c:	mov	r9, r3
   1aba0:	bl	113e4 <__errno_location@plt>
   1aba4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1aba8:	cmp	r9, r3
   1abac:	cmpne	r9, #0
   1abb0:	str	r0, [fp, #-508]	; 0xfffffe04
   1abb4:	beq	1a70c <__assert_fail@plt+0x9208>
   1abb8:	mov	r0, r9
   1abbc:	bl	111ec <free@plt>
   1abc0:	b	1a70c <__assert_fail@plt+0x9208>
   1abc4:	ldr	r2, [r1, #8]
   1abc8:	mov	r1, #0
   1abcc:	mov	r4, r7
   1abd0:	str	r7, [r2]
   1abd4:	str	r1, [r2, #4]
   1abd8:	b	1a6bc <__assert_fail@plt+0x91b8>
   1abdc:	ldr	r2, [r1, #8]
   1abe0:	mov	r4, r7
   1abe4:	strh	r7, [r2]
   1abe8:	b	1a6bc <__assert_fail@plt+0x91b8>
   1abec:	ldr	r2, [r1, #8]
   1abf0:	mov	r4, r7
   1abf4:	strb	r7, [r2]
   1abf8:	b	1a6bc <__assert_fail@plt+0x91b8>
   1abfc:	cmn	r6, #1
   1ac00:	beq	1a5ac <__assert_fail@plt+0x90a8>
   1ac04:	b	1a6fc <__assert_fail@plt+0x91f8>
   1ac08:	cmn	r3, #1
   1ac0c:	beq	1a6fc <__assert_fail@plt+0x91f8>
   1ac10:	mov	r6, r3
   1ac14:	b	1a8cc <__assert_fail@plt+0x93c8>
   1ac18:	mov	r1, r6
   1ac1c:	mov	r0, r9
   1ac20:	bl	11270 <realloc@plt>
   1ac24:	cmp	r0, #0
   1ac28:	beq	1a6fc <__assert_fail@plt+0x91f8>
   1ac2c:	sub	r3, r6, r7
   1ac30:	mov	r9, r0
   1ac34:	str	r3, [fp, #-512]	; 0xfffffe00
   1ac38:	b	1a5ac <__assert_fail@plt+0x90a8>
   1ac3c:	mov	r9, r3
   1ac40:	sub	r3, r6, r7
   1ac44:	str	r3, [fp, #-512]	; 0xfffffe00
   1ac48:	b	1a5ac <__assert_fail@plt+0x90a8>
   1ac4c:	mov	r8, #0
   1ac50:	b	1a4cc <__assert_fail@plt+0x8fc8>
   1ac54:	mov	r0, r3
   1ac58:	mov	r1, r6
   1ac5c:	str	r3, [fp, #-508]	; 0xfffffe04
   1ac60:	bl	11270 <realloc@plt>
   1ac64:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1ac68:	subs	r9, r0, #0
   1ac6c:	bne	1a584 <__assert_fail@plt+0x9080>
   1ac70:	b	1ab9c <__assert_fail@plt+0x9698>
   1ac74:	cmn	r6, #1
   1ac78:	bne	1a6ec <__assert_fail@plt+0x91e8>
   1ac7c:	mov	r4, r6
   1ac80:	b	1a6b4 <__assert_fail@plt+0x91b0>
   1ac84:	cmn	r6, #1
   1ac88:	bne	1a6ec <__assert_fail@plt+0x91e8>
   1ac8c:	mov	r9, r3
   1ac90:	b	1a584 <__assert_fail@plt+0x9080>
   1ac94:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1ac98:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1ac9c:	strd	r2, [sp, #16]
   1aca0:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1aca4:	sub	lr, fp, #496	; 0x1f0
   1aca8:	str	r3, [sp]
   1acac:	stmib	sp, {r1, ip}
   1acb0:	str	lr, [sp, #24]
   1acb4:	mvn	r3, #0
   1acb8:	mov	r2, #1
   1acbc:	mov	r1, r5
   1acc0:	bl	114f8 <__snprintf_chk@plt>
   1acc4:	b	1a848 <__assert_fail@plt+0x9344>
   1acc8:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1accc:	strd	r2, [sp, #8]
   1acd0:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1acd4:	sub	ip, fp, #496	; 0x1f0
   1acd8:	str	r3, [sp]
   1acdc:	str	r1, [sp, #4]
   1ace0:	str	ip, [sp, #16]
   1ace4:	mvn	r3, #0
   1ace8:	mov	r2, r8
   1acec:	mov	r1, r5
   1acf0:	bl	114f8 <__snprintf_chk@plt>
   1acf4:	b	1a848 <__assert_fail@plt+0x9344>
   1acf8:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1acfc:	ldr	ip, [fp, #-488]	; 0xfffffe18
   1ad00:	strd	r2, [sp, #16]
   1ad04:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1ad08:	sub	lr, fp, #496	; 0x1f0
   1ad0c:	str	r3, [sp]
   1ad10:	stmib	sp, {r1, ip}
   1ad14:	str	lr, [sp, #24]
   1ad18:	mvn	r3, #0
   1ad1c:	mov	r2, #1
   1ad20:	mov	r1, r5
   1ad24:	bl	114f8 <__snprintf_chk@plt>
   1ad28:	b	1a848 <__assert_fail@plt+0x9344>
   1ad2c:	ldr	r1, [fp, #-492]	; 0xfffffe14
   1ad30:	strd	r2, [sp, #8]
   1ad34:	ldr	r3, [fp, #-516]	; 0xfffffdfc
   1ad38:	sub	ip, fp, #496	; 0x1f0
   1ad3c:	str	r3, [sp]
   1ad40:	str	r1, [sp, #4]
   1ad44:	str	ip, [sp, #16]
   1ad48:	mvn	r3, #0
   1ad4c:	mov	r2, r8
   1ad50:	mov	r1, r5
   1ad54:	bl	114f8 <__snprintf_chk@plt>
   1ad58:	b	1a848 <__assert_fail@plt+0x9344>
   1ad5c:	mov	r7, r6
   1ad60:	b	1a310 <__assert_fail@plt+0x8e0c>
   1ad64:	mov	r0, r3
   1ad68:	mov	r1, r6
   1ad6c:	str	r3, [fp, #-508]	; 0xfffffe04
   1ad70:	bl	11270 <realloc@plt>
   1ad74:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1ad78:	cmp	r0, #0
   1ad7c:	beq	1af54 <__assert_fail@plt+0x9a50>
   1ad80:	mov	r3, r0
   1ad84:	b	1a6b4 <__assert_fail@plt+0x91b0>
   1ad88:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1ad8c:	sub	r3, fp, #348	; 0x15c
   1ad90:	cmp	r0, r3
   1ad94:	beq	1ad9c <__assert_fail@plt+0x9898>
   1ad98:	bl	111ec <free@plt>
   1ad9c:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1ada0:	sub	r3, fp, #476	; 0x1dc
   1ada4:	cmp	r0, r3
   1ada8:	beq	1adb0 <__assert_fail@plt+0x98ac>
   1adac:	bl	111ec <free@plt>
   1adb0:	bl	113e4 <__errno_location@plt>
   1adb4:	mov	r3, #22
   1adb8:	mov	r5, #0
   1adbc:	str	r3, [r0]
   1adc0:	b	1a758 <__assert_fail@plt+0x9254>
   1adc4:	lsl	r6, r6, #1
   1adc8:	cmp	r6, r2
   1adcc:	bcs	1a658 <__assert_fail@plt+0x9154>
   1add0:	cmn	r2, #1
   1add4:	beq	1a6ec <__assert_fail@plt+0x91e8>
   1add8:	mov	r6, r2
   1addc:	b	1a658 <__assert_fail@plt+0x9154>
   1ade0:	add	r4, r7, r3
   1ade4:	ldr	r3, [fp, #-508]	; 0xfffffe04
   1ade8:	ldr	r2, [fp, #-540]	; 0xfffffde4
   1adec:	str	r2, [r3]
   1adf0:	mov	r3, r9
   1adf4:	b	1a6bc <__assert_fail@plt+0x91b8>
   1adf8:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1adfc:	cmp	r9, r3
   1ae00:	cmpne	r9, #0
   1ae04:	bne	1ae64 <__assert_fail@plt+0x9960>
   1ae08:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1ae0c:	cmp	r3, #0
   1ae10:	beq	1ae1c <__assert_fail@plt+0x9918>
   1ae14:	mov	r0, r3
   1ae18:	bl	111ec <free@plt>
   1ae1c:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1ae20:	sub	r3, fp, #348	; 0x15c
   1ae24:	cmp	r0, r3
   1ae28:	beq	1ae30 <__assert_fail@plt+0x992c>
   1ae2c:	bl	111ec <free@plt>
   1ae30:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1ae34:	sub	r3, fp, #476	; 0x1dc
   1ae38:	cmp	r0, r3
   1ae3c:	beq	1ae44 <__assert_fail@plt+0x9940>
   1ae40:	bl	111ec <free@plt>
   1ae44:	ldr	r2, [fp, #-508]	; 0xfffffe04
   1ae48:	mov	r3, #75	; 0x4b
   1ae4c:	mov	r5, #0
   1ae50:	str	r3, [r2]
   1ae54:	b	1a758 <__assert_fail@plt+0x9254>
   1ae58:	mov	r0, r9
   1ae5c:	bl	111ec <free@plt>
   1ae60:	b	1a9c8 <__assert_fail@plt+0x94c4>
   1ae64:	mov	r0, r9
   1ae68:	bl	111ec <free@plt>
   1ae6c:	b	1ae08 <__assert_fail@plt+0x9904>
   1ae70:	mov	r5, r3
   1ae74:	mov	r3, #1
   1ae78:	adds	r4, r7, r3
   1ae7c:	mov	r8, r7
   1ae80:	bcs	1afc0 <__assert_fail@plt+0x9abc>
   1ae84:	cmp	r6, r4
   1ae88:	bcs	1aef4 <__assert_fail@plt+0x99f0>
   1ae8c:	cmp	r6, #0
   1ae90:	bne	1af9c <__assert_fail@plt+0x9a98>
   1ae94:	cmp	r4, #12
   1ae98:	movls	r6, #12
   1ae9c:	bhi	1afac <__assert_fail@plt+0x9aa8>
   1aea0:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1aea4:	cmp	r5, r3
   1aea8:	cmpne	r5, #0
   1aeac:	sub	r7, r5, r3
   1aeb0:	clz	r7, r7
   1aeb4:	lsr	r7, r7, #5
   1aeb8:	bne	1af80 <__assert_fail@plt+0x9a7c>
   1aebc:	mov	r0, r6
   1aec0:	bl	1133c <malloc@plt>
   1aec4:	subs	r3, r0, #0
   1aec8:	beq	1a6f0 <__assert_fail@plt+0x91ec>
   1aecc:	cmp	r8, #0
   1aed0:	movne	r2, r7
   1aed4:	moveq	r2, #0
   1aed8:	cmp	r2, #0
   1aedc:	moveq	r5, r3
   1aee0:	beq	1aef4 <__assert_fail@plt+0x99f0>
   1aee4:	mov	r1, r5
   1aee8:	mov	r2, r8
   1aeec:	mov	r5, r3
   1aef0:	bl	11210 <memcpy@plt>
   1aef4:	ldr	r3, [fp, #-504]	; 0xfffffe08
   1aef8:	cmp	r5, r3
   1aefc:	cmpne	r6, r4
   1af00:	mov	r3, #0
   1af04:	strb	r3, [r5, r8]
   1af08:	bhi	1af68 <__assert_fail@plt+0x9a64>
   1af0c:	ldr	r3, [fp, #-536]	; 0xfffffde8
   1af10:	cmp	r3, #0
   1af14:	beq	1af20 <__assert_fail@plt+0x9a1c>
   1af18:	mov	r0, r3
   1af1c:	bl	111ec <free@plt>
   1af20:	ldr	r0, [fp, #-360]	; 0xfffffe98
   1af24:	sub	r3, fp, #348	; 0x15c
   1af28:	cmp	r0, r3
   1af2c:	beq	1af34 <__assert_fail@plt+0x9a30>
   1af30:	bl	111ec <free@plt>
   1af34:	ldr	r0, [fp, #-480]	; 0xfffffe20
   1af38:	sub	r3, fp, #476	; 0x1dc
   1af3c:	cmp	r0, r3
   1af40:	beq	1af48 <__assert_fail@plt+0x9a44>
   1af44:	bl	111ec <free@plt>
   1af48:	ldr	r3, [fp, #-532]	; 0xfffffdec
   1af4c:	str	r8, [r3]
   1af50:	b	1a758 <__assert_fail@plt+0x9254>
   1af54:	mov	r5, r3
   1af58:	bl	113e4 <__errno_location@plt>
   1af5c:	mov	r9, r5
   1af60:	str	r0, [fp, #-508]	; 0xfffffe04
   1af64:	b	1abb8 <__assert_fail@plt+0x96b4>
   1af68:	mov	r0, r5
   1af6c:	mov	r1, r4
   1af70:	bl	11270 <realloc@plt>
   1af74:	cmp	r0, #0
   1af78:	movne	r5, r0
   1af7c:	b	1af0c <__assert_fail@plt+0x9a08>
   1af80:	mov	r1, r6
   1af84:	mov	r0, r5
   1af88:	bl	11270 <realloc@plt>
   1af8c:	cmp	r0, #0
   1af90:	beq	1af58 <__assert_fail@plt+0x9a54>
   1af94:	mov	r5, r0
   1af98:	b	1aef4 <__assert_fail@plt+0x99f0>
   1af9c:	blt	1a6f0 <__assert_fail@plt+0x91ec>
   1afa0:	lsl	r6, r6, #1
   1afa4:	cmp	r6, r4
   1afa8:	bcs	1aea0 <__assert_fail@plt+0x999c>
   1afac:	cmn	r4, #1
   1afb0:	movne	r6, r4
   1afb4:	bne	1aea0 <__assert_fail@plt+0x999c>
   1afb8:	b	1a6f0 <__assert_fail@plt+0x91ec>
   1afbc:	bl	11258 <__stack_chk_fail@plt>
   1afc0:	cmn	r6, #1
   1afc4:	beq	1aef4 <__assert_fail@plt+0x99f0>
   1afc8:	b	1a6f0 <__assert_fail@plt+0x91ec>
   1afcc:	bl	114d4 <abort@plt>
   1afd0:	andeq	lr, r2, r8, lsl #30
   1afd4:	ldr	r3, [r1]
   1afd8:	ldr	r2, [r1, #4]
   1afdc:	cmp	r3, #0
   1afe0:	beq	1b0f0 <__assert_fail@plt+0x9bec>
   1afe4:	push	{r4, r5, r6, lr}
   1afe8:	add	r2, r2, #8
   1afec:	ldr	r6, [pc, #268]	; 1b100 <__assert_fail@plt+0x9bfc>
   1aff0:	ldr	lr, [pc, #268]	; 1b104 <__assert_fail@plt+0x9c00>
   1aff4:	mov	ip, #0
   1aff8:	ldr	r3, [r2, #-8]
   1affc:	sub	r3, r3, #1
   1b000:	cmp	r3, #21
   1b004:	ldrls	pc, [pc, r3, lsl #2]
   1b008:	b	1b0f8 <__assert_fail@plt+0x9bf4>
   1b00c:	andeq	fp, r1, r8, lsr #1
   1b010:	andeq	fp, r1, r8, lsr #1
   1b014:	muleq	r1, ip, r0
   1b018:	muleq	r1, ip, r0
   1b01c:	andeq	fp, r1, r4, rrx
   1b020:	andeq	fp, r1, r4, rrx
   1b024:	andeq	fp, r1, r4, rrx
   1b028:	andeq	fp, r1, r4, rrx
   1b02c:	andeq	fp, r1, r8, lsl #1
   1b030:	andeq	fp, r1, r8, lsl #1
   1b034:	strheq	fp, [r1], -r4
   1b038:	strheq	fp, [r1], -r4
   1b03c:	andeq	fp, r1, r4, rrx
   1b040:	andeq	fp, r1, r4, rrx
   1b044:	andeq	fp, r1, r8, asr #1
   1b048:	ldrdeq	fp, [r1], -ip
   1b04c:	andeq	fp, r1, r4, rrx
   1b050:	andeq	fp, r1, r4, rrx
   1b054:	andeq	fp, r1, r4, rrx
   1b058:	andeq	fp, r1, r4, rrx
   1b05c:	andeq	fp, r1, r4, rrx
   1b060:	andeq	fp, r1, r4, rrx
   1b064:	ldr	r3, [r0], #4
   1b068:	str	r3, [r2]
   1b06c:	ldr	r3, [r1]
   1b070:	add	ip, ip, #1
   1b074:	cmp	r3, ip
   1b078:	add	r2, r2, #16
   1b07c:	bhi	1aff8 <__assert_fail@plt+0x9af4>
   1b080:	mov	r0, #0
   1b084:	pop	{r4, r5, r6, pc}
   1b088:	add	r0, r0, #7
   1b08c:	bic	r0, r0, #7
   1b090:	ldrd	r4, [r0], #8
   1b094:	strd	r4, [r2]
   1b098:	b	1b06c <__assert_fail@plt+0x9b68>
   1b09c:	ldr	r3, [r0], #4
   1b0a0:	strh	r3, [r2]
   1b0a4:	b	1b06c <__assert_fail@plt+0x9b68>
   1b0a8:	ldr	r3, [r0], #4
   1b0ac:	strb	r3, [r2]
   1b0b0:	b	1b06c <__assert_fail@plt+0x9b68>
   1b0b4:	add	r0, r0, #7
   1b0b8:	bic	r0, r0, #7
   1b0bc:	ldrd	r4, [r0], #8
   1b0c0:	strd	r4, [r2]
   1b0c4:	b	1b06c <__assert_fail@plt+0x9b68>
   1b0c8:	ldr	r3, [r0], #4
   1b0cc:	cmp	r3, #0
   1b0d0:	streq	lr, [r2]
   1b0d4:	bne	1b068 <__assert_fail@plt+0x9b64>
   1b0d8:	b	1b06c <__assert_fail@plt+0x9b68>
   1b0dc:	ldr	r3, [r0], #4
   1b0e0:	cmp	r3, #0
   1b0e4:	streq	r6, [r2]
   1b0e8:	bne	1b068 <__assert_fail@plt+0x9b64>
   1b0ec:	b	1b06c <__assert_fail@plt+0x9b68>
   1b0f0:	mov	r0, #0
   1b0f4:	bx	lr
   1b0f8:	mvn	r0, #0
   1b0fc:	pop	{r4, r5, r6, pc}
   1b100:	andeq	lr, r1, r4, asr #16
   1b104:	andeq	lr, r1, r0, ror #16
   1b108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b10c:	mov	sl, r2
   1b110:	sub	sp, sp, #44	; 0x2c
   1b114:	mov	fp, r1
   1b118:	mov	r3, r1
   1b11c:	mov	r1, sl
   1b120:	mov	r2, #0
   1b124:	mov	ip, #7
   1b128:	str	r2, [r3], #16
   1b12c:	str	fp, [sp, #4]
   1b130:	str	r3, [fp, #4]
   1b134:	mov	r4, r2
   1b138:	str	r2, [r1], #8
   1b13c:	str	ip, [sp, #8]
   1b140:	mov	r7, r0
   1b144:	str	r3, [sp, #36]	; 0x24
   1b148:	str	r2, [sp, #28]
   1b14c:	str	r1, [sp, #12]
   1b150:	str	r2, [sp, #16]
   1b154:	str	r1, [sl, #4]
   1b158:	str	r2, [sp, #32]
   1b15c:	mov	r9, r2
   1b160:	str	ip, [sp, #24]
   1b164:	mov	fp, sl
   1b168:	b	1b178 <__assert_fail@plt+0x9c74>
   1b16c:	cmp	r0, #37	; 0x25
   1b170:	mov	r5, r7
   1b174:	beq	1b1b8 <__assert_fail@plt+0x9cb4>
   1b178:	mov	r2, r7
   1b17c:	ldrb	r0, [r7], #1
   1b180:	cmp	r0, #0
   1b184:	bne	1b16c <__assert_fail@plt+0x9c68>
   1b188:	add	ip, r4, r4, lsl #2
   1b18c:	ldr	fp, [sp, #4]
   1b190:	add	r4, r4, ip, lsl #1
   1b194:	mov	r1, r0
   1b198:	str	r2, [r3, r4, lsl #2]
   1b19c:	ldr	r3, [sp, #16]
   1b1a0:	str	r3, [fp, #8]
   1b1a4:	ldr	r3, [sp, #28]
   1b1a8:	str	r3, [fp, #12]
   1b1ac:	mov	r0, r1
   1b1b0:	add	sp, sp, #44	; 0x2c
   1b1b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1b8:	add	r1, r4, r4, lsl #2
   1b1bc:	mvn	r8, #0
   1b1c0:	add	r4, r4, r1, lsl #1
   1b1c4:	add	r6, r3, r4, lsl #2
   1b1c8:	str	r2, [r3, r4, lsl #2]
   1b1cc:	str	r9, [r6, #8]
   1b1d0:	str	r9, [r6, #12]
   1b1d4:	str	r9, [r6, #16]
   1b1d8:	str	r9, [r6, #24]
   1b1dc:	str	r9, [r6, #28]
   1b1e0:	str	r8, [r6, #20]
   1b1e4:	str	r8, [r6, #32]
   1b1e8:	str	r8, [r6, #40]	; 0x28
   1b1ec:	ldrb	r4, [r7]
   1b1f0:	sub	r0, r4, #48	; 0x30
   1b1f4:	uxtb	r3, r0
   1b1f8:	cmp	r3, #9
   1b1fc:	bhi	1b248 <__assert_fail@plt+0x9d44>
   1b200:	b	1b6c0 <__assert_fail@plt+0xa1bc>
   1b204:	cmp	r4, #45	; 0x2d
   1b208:	beq	1b264 <__assert_fail@plt+0x9d60>
   1b20c:	cmp	r4, #43	; 0x2b
   1b210:	beq	1b274 <__assert_fail@plt+0x9d70>
   1b214:	cmp	r4, #32
   1b218:	beq	1b284 <__assert_fail@plt+0x9d80>
   1b21c:	cmp	r4, #35	; 0x23
   1b220:	beq	1b294 <__assert_fail@plt+0x9d90>
   1b224:	cmp	r4, #48	; 0x30
   1b228:	beq	1b2a4 <__assert_fail@plt+0x9da0>
   1b22c:	cmp	r4, #73	; 0x49
   1b230:	bne	1b2b4 <__assert_fail@plt+0x9db0>
   1b234:	ldr	r3, [r6, #8]
   1b238:	orr	r3, r3, #64	; 0x40
   1b23c:	str	r3, [r6, #8]
   1b240:	ldrb	r4, [r7]
   1b244:	mov	r5, r7
   1b248:	cmp	r4, #39	; 0x27
   1b24c:	add	r7, r5, #1
   1b250:	bne	1b204 <__assert_fail@plt+0x9d00>
   1b254:	ldr	r3, [r6, #8]
   1b258:	orr	r3, r3, #1
   1b25c:	str	r3, [r6, #8]
   1b260:	b	1b240 <__assert_fail@plt+0x9d3c>
   1b264:	ldr	r3, [r6, #8]
   1b268:	orr	r3, r3, #2
   1b26c:	str	r3, [r6, #8]
   1b270:	b	1b240 <__assert_fail@plt+0x9d3c>
   1b274:	ldr	r3, [r6, #8]
   1b278:	orr	r3, r3, #4
   1b27c:	str	r3, [r6, #8]
   1b280:	b	1b240 <__assert_fail@plt+0x9d3c>
   1b284:	ldr	r3, [r6, #8]
   1b288:	orr	r3, r3, #8
   1b28c:	str	r3, [r6, #8]
   1b290:	b	1b240 <__assert_fail@plt+0x9d3c>
   1b294:	ldr	r3, [r6, #8]
   1b298:	orr	r3, r3, #16
   1b29c:	str	r3, [r6, #8]
   1b2a0:	b	1b240 <__assert_fail@plt+0x9d3c>
   1b2a4:	ldr	r3, [r6, #8]
   1b2a8:	orr	r3, r3, #32
   1b2ac:	str	r3, [r6, #8]
   1b2b0:	b	1b240 <__assert_fail@plt+0x9d3c>
   1b2b4:	cmp	r4, #42	; 0x2a
   1b2b8:	beq	1b490 <__assert_fail@plt+0x9f8c>
   1b2bc:	sub	r3, r4, #48	; 0x30
   1b2c0:	cmp	r3, #9
   1b2c4:	bls	1bab0 <__assert_fail@plt+0xa5ac>
   1b2c8:	cmp	r4, #46	; 0x2e
   1b2cc:	beq	1b528 <__assert_fail@plt+0xa024>
   1b2d0:	add	r5, r5, #1
   1b2d4:	mov	r3, #0
   1b2d8:	mov	r1, #1
   1b2dc:	b	1b2e4 <__assert_fail@plt+0x9de0>
   1b2e0:	ldrb	r4, [r5], #1
   1b2e4:	cmp	r4, #104	; 0x68
   1b2e8:	andeq	r2, r3, #1
   1b2ec:	mov	r7, r5
   1b2f0:	orreq	r3, r3, r1, lsl r2
   1b2f4:	beq	1b2e0 <__assert_fail@plt+0x9ddc>
   1b2f8:	cmp	r4, #76	; 0x4c
   1b2fc:	orreq	r3, r3, #4
   1b300:	beq	1b2e0 <__assert_fail@plt+0x9ddc>
   1b304:	cmp	r4, #108	; 0x6c
   1b308:	addeq	r3, r3, #8
   1b30c:	beq	1b2e0 <__assert_fail@plt+0x9ddc>
   1b310:	cmp	r4, #106	; 0x6a
   1b314:	addeq	r3, r3, #16
   1b318:	beq	1b2e0 <__assert_fail@plt+0x9ddc>
   1b31c:	and	r2, r4, #223	; 0xdf
   1b320:	cmp	r2, #90	; 0x5a
   1b324:	beq	1b2e0 <__assert_fail@plt+0x9ddc>
   1b328:	cmp	r4, #116	; 0x74
   1b32c:	beq	1b2e0 <__assert_fail@plt+0x9ddc>
   1b330:	sub	r2, r4, #37	; 0x25
   1b334:	cmp	r2, #83	; 0x53
   1b338:	ldrls	pc, [pc, r2, lsl #2]
   1b33c:	b	1b730 <__assert_fail@plt+0xa22c>
   1b340:	andeq	fp, r1, r4, lsr #12
   1b344:	andeq	fp, r1, r0, lsr r7
   1b348:	andeq	fp, r1, r0, lsr r7
   1b34c:	andeq	fp, r1, r0, lsr r7
   1b350:	andeq	fp, r1, r0, lsr r7
   1b354:	andeq	fp, r1, r0, lsr r7
   1b358:	andeq	fp, r1, r0, lsr r7
   1b35c:	andeq	fp, r1, r0, lsr r7
   1b360:	andeq	fp, r1, r0, lsr r7
   1b364:	andeq	fp, r1, r0, lsr r7
   1b368:	andeq	fp, r1, r0, lsr r7
   1b36c:	andeq	fp, r1, r0, lsr r7
   1b370:	andeq	fp, r1, r0, lsr r7
   1b374:	andeq	fp, r1, r0, lsr r7
   1b378:	andeq	fp, r1, r0, lsr r7
   1b37c:	andeq	fp, r1, r0, lsr r7
   1b380:	andeq	fp, r1, r0, lsr r7
   1b384:	andeq	fp, r1, r0, lsr r7
   1b388:	andeq	fp, r1, r0, lsr r7
   1b38c:	andeq	fp, r1, r0, lsr r7
   1b390:	andeq	fp, r1, r0, lsr r7
   1b394:	andeq	fp, r1, r0, lsr r7
   1b398:	andeq	fp, r1, r0, lsr r7
   1b39c:	andeq	fp, r1, r0, lsr r7
   1b3a0:	andeq	fp, r1, r0, lsr r7
   1b3a4:	andeq	fp, r1, r0, lsr r7
   1b3a8:	andeq	fp, r1, r0, lsr r7
   1b3ac:	andeq	fp, r1, r0, lsr r7
   1b3b0:	andeq	fp, r1, r8, ror r8
   1b3b4:	andeq	fp, r1, r0, lsr r7
   1b3b8:	andeq	fp, r1, r4, asr #11
   1b3bc:	andeq	fp, r1, r0, lsr r7
   1b3c0:	andeq	fp, r1, r8, ror r8
   1b3c4:	andeq	fp, r1, r8, ror r8
   1b3c8:	andeq	fp, r1, r8, ror r8
   1b3cc:	andeq	fp, r1, r0, lsr r7
   1b3d0:	andeq	fp, r1, r0, lsr r7
   1b3d4:	andeq	fp, r1, r0, lsr r7
   1b3d8:	andeq	fp, r1, r0, lsr r7
   1b3dc:	andeq	fp, r1, r0, lsr r7
   1b3e0:	andeq	fp, r1, r0, lsr r7
   1b3e4:	andeq	fp, r1, r0, lsr r7
   1b3e8:	andeq	fp, r1, r0, lsr r7
   1b3ec:	andeq	fp, r1, r0, lsr r7
   1b3f0:	andeq	fp, r1, r0, lsr r7
   1b3f4:	andeq	fp, r1, r0, lsr r7
   1b3f8:			; <UNDEFINED> instruction: 0x0001b9bc
   1b3fc:	andeq	fp, r1, r0, lsr r7
   1b400:	andeq	fp, r1, r0, lsr r7
   1b404:	andeq	fp, r1, r0, lsr r7
   1b408:	andeq	fp, r1, r0, lsr r7
   1b40c:	andeq	fp, r1, r8, ror r9
   1b410:	andeq	fp, r1, r0, lsr r7
   1b414:	andeq	fp, r1, r0, lsr r7
   1b418:	andeq	fp, r1, r0, lsr r7
   1b41c:	andeq	fp, r1, r0, lsr r7
   1b420:	andeq	fp, r1, r0, lsr r7
   1b424:	andeq	fp, r1, r0, lsr r7
   1b428:	andeq	fp, r1, r0, lsr r7
   1b42c:	andeq	fp, r1, r0, lsr r7
   1b430:	andeq	fp, r1, r8, ror r8
   1b434:	andeq	fp, r1, r0, lsr r7
   1b438:	andeq	fp, r1, r4, ror #18
   1b43c:	andeq	fp, r1, r0, lsr #18
   1b440:	andeq	fp, r1, r8, ror r8
   1b444:	andeq	fp, r1, r8, ror r8
   1b448:	andeq	fp, r1, r8, ror r8
   1b44c:	andeq	fp, r1, r0, lsr r7
   1b450:	andeq	fp, r1, r0, lsr #18
   1b454:	andeq	fp, r1, r0, lsr r7
   1b458:	andeq	fp, r1, r0, lsr r7
   1b45c:	andeq	fp, r1, r0, lsr r7
   1b460:	andeq	fp, r1, r0, lsr r7
   1b464:	ldrdeq	fp, [r1], -r8
   1b468:	andeq	fp, r1, r8, ror r9
   1b46c:	andeq	fp, r1, ip, asr #19
   1b470:	andeq	fp, r1, r0, lsr r7
   1b474:	andeq	fp, r1, r0, lsr r7
   1b478:	andeq	fp, r1, ip, lsl #18
   1b47c:	andeq	fp, r1, r0, lsr r7
   1b480:	andeq	fp, r1, r8, ror r9
   1b484:	andeq	fp, r1, r0, lsr r7
   1b488:	andeq	fp, r1, r0, lsr r7
   1b48c:	andeq	fp, r1, r8, ror r9
   1b490:	str	r5, [r6, #12]
   1b494:	str	r7, [r6, #16]
   1b498:	ldrb	r3, [r5, #1]
   1b49c:	ldr	r2, [sp, #16]
   1b4a0:	sub	r3, r3, #48	; 0x30
   1b4a4:	cmp	r2, #0
   1b4a8:	moveq	r2, #1
   1b4ac:	str	r2, [sp, #16]
   1b4b0:	uxtb	r2, r3
   1b4b4:	cmp	r2, #9
   1b4b8:	bls	1b89c <__assert_fail@plt+0xa398>
   1b4bc:	ldr	r4, [r6, #20]
   1b4c0:	cmn	r4, #1
   1b4c4:	beq	1b858 <__assert_fail@plt+0xa354>
   1b4c8:	ldr	r3, [sp, #8]
   1b4cc:	ldr	sl, [fp, #4]
   1b4d0:	cmp	r3, r4
   1b4d4:	bls	1b7c0 <__assert_fail@plt+0xa2bc>
   1b4d8:	ldr	r2, [fp]
   1b4dc:	cmp	r2, r4
   1b4e0:	bhi	1b4fc <__assert_fail@plt+0x9ff8>
   1b4e4:	sub	r1, sl, #16
   1b4e8:	add	r2, r2, #1
   1b4ec:	cmp	r2, r4
   1b4f0:	str	r9, [r1, r2, lsl #4]
   1b4f4:	bls	1b4e8 <__assert_fail@plt+0x9fe4>
   1b4f8:	str	r2, [fp]
   1b4fc:	ldr	r3, [sl, r4, lsl #4]
   1b500:	cmp	r3, #0
   1b504:	bne	1bb0c <__assert_fail@plt+0xa608>
   1b508:	mov	r3, r7
   1b50c:	mov	r2, #5
   1b510:	str	r2, [sl, r4, lsl #4]
   1b514:	ldrb	r4, [r3], #1
   1b518:	mov	r5, r7
   1b51c:	cmp	r4, #46	; 0x2e
   1b520:	mov	r7, r3
   1b524:	bne	1b2d0 <__assert_fail@plt+0x9dcc>
   1b528:	ldrb	r3, [r5, #1]
   1b52c:	cmp	r3, #42	; 0x2a
   1b530:	bne	1b778 <__assert_fail@plt+0xa274>
   1b534:	add	r7, r5, #2
   1b538:	str	r5, [r6, #24]
   1b53c:	str	r7, [r6, #28]
   1b540:	ldrb	r1, [r5, #2]
   1b544:	ldr	r3, [sp, #28]
   1b548:	sub	r1, r1, #48	; 0x30
   1b54c:	cmp	r3, #2
   1b550:	movcc	r3, #2
   1b554:	str	r3, [sp, #28]
   1b558:	uxtb	r3, r1
   1b55c:	cmp	r3, #9
   1b560:	bls	1bc8c <__assert_fail@plt+0xa788>
   1b564:	ldr	r4, [r6, #32]
   1b568:	cmn	r4, #1
   1b56c:	beq	1bc6c <__assert_fail@plt+0xa768>
   1b570:	ldr	r3, [sp, #8]
   1b574:	ldr	sl, [fp, #4]
   1b578:	cmp	r3, r4
   1b57c:	bls	1bb90 <__assert_fail@plt+0xa68c>
   1b580:	ldr	r2, [fp]
   1b584:	cmp	r2, r4
   1b588:	bhi	1b5a4 <__assert_fail@plt+0xa0a0>
   1b58c:	sub	r1, sl, #16
   1b590:	add	r2, r2, #1
   1b594:	cmp	r2, r4
   1b598:	str	r9, [r1, r2, lsl #4]
   1b59c:	bls	1b590 <__assert_fail@plt+0xa08c>
   1b5a0:	str	r2, [fp]
   1b5a4:	ldr	r3, [sl, r4, lsl #4]
   1b5a8:	cmp	r3, #0
   1b5ac:	bne	1bbf0 <__assert_fail@plt+0xa6ec>
   1b5b0:	mov	r3, #5
   1b5b4:	str	r3, [sl, r4, lsl #4]
   1b5b8:	mov	r5, r7
   1b5bc:	ldrb	r4, [r7]
   1b5c0:	b	1b2d0 <__assert_fail@plt+0x9dcc>
   1b5c4:	mov	r4, #99	; 0x63
   1b5c8:	mov	r3, #14
   1b5cc:	str	r3, [sp, #20]
   1b5d0:	cmn	r8, #1
   1b5d4:	strne	r8, [r6, #40]	; 0x28
   1b5d8:	beq	1ba90 <__assert_fail@plt+0xa58c>
   1b5dc:	ldr	r3, [sp, #8]
   1b5e0:	ldr	sl, [fp, #4]
   1b5e4:	cmp	r3, r8
   1b5e8:	bls	1ba34 <__assert_fail@plt+0xa530>
   1b5ec:	ldr	r3, [fp]
   1b5f0:	cmp	r3, r8
   1b5f4:	bhi	1b610 <__assert_fail@plt+0xa10c>
   1b5f8:	sub	r1, sl, #16
   1b5fc:	add	r3, r3, #1
   1b600:	cmp	r3, r8
   1b604:	str	r9, [r1, r3, lsl #4]
   1b608:	bls	1b5fc <__assert_fail@plt+0xa0f8>
   1b60c:	str	r3, [fp]
   1b610:	ldr	r3, [sl, r8, lsl #4]
   1b614:	cmp	r3, #0
   1b618:	bne	1ba1c <__assert_fail@plt+0xa518>
   1b61c:	ldr	r3, [sp, #20]
   1b620:	str	r3, [sl, r8, lsl #4]
   1b624:	ldr	r3, [sp, #4]
   1b628:	strb	r4, [r6, #36]	; 0x24
   1b62c:	ldr	r2, [sp, #24]
   1b630:	ldr	r4, [r3]
   1b634:	str	r5, [r6, #4]
   1b638:	add	r4, r4, #1
   1b63c:	cmp	r2, r4
   1b640:	str	r4, [r3]
   1b644:	ldrhi	r3, [r3, #4]
   1b648:	bhi	1b178 <__assert_fail@plt+0x9c74>
   1b64c:	ldr	r3, [sp, #24]
   1b650:	cmp	r3, #0
   1b654:	blt	1bd68 <__assert_fail@plt+0xa864>
   1b658:	ldr	r3, [sp, #24]
   1b65c:	ldr	r2, [pc, #1896]	; 1bdcc <__assert_fail@plt+0xa8c8>
   1b660:	lsl	r5, r3, #1
   1b664:	cmp	r5, r2
   1b668:	bhi	1bd68 <__assert_fail@plt+0xa864>
   1b66c:	ldr	r2, [sp, #4]
   1b670:	add	r1, r3, r3, lsl #2
   1b674:	ldr	r6, [r2, #4]
   1b678:	add	r1, r3, r1, lsl #1
   1b67c:	ldr	r3, [sp, #36]	; 0x24
   1b680:	lsl	r1, r1, #3
   1b684:	cmp	r3, r6
   1b688:	beq	1b820 <__assert_fail@plt+0xa31c>
   1b68c:	mov	r0, r6
   1b690:	bl	11270 <realloc@plt>
   1b694:	subs	r3, r0, #0
   1b698:	beq	1bd68 <__assert_fail@plt+0xa864>
   1b69c:	ldr	r2, [sp, #4]
   1b6a0:	ldm	r2, {r4, r6}
   1b6a4:	ldr	r2, [sp, #36]	; 0x24
   1b6a8:	cmp	r2, r6
   1b6ac:	beq	1b830 <__assert_fail@plt+0xa32c>
   1b6b0:	ldr	r2, [sp, #4]
   1b6b4:	str	r5, [sp, #24]
   1b6b8:	str	r3, [r2, #4]
   1b6bc:	b	1b178 <__assert_fail@plt+0x9c74>
   1b6c0:	mov	r2, r7
   1b6c4:	ldrb	r3, [r2, #1]!
   1b6c8:	sub	r1, r3, #48	; 0x30
   1b6cc:	cmp	r1, #9
   1b6d0:	bls	1b6c4 <__assert_fail@plt+0xa1c0>
   1b6d4:	cmp	r3, #36	; 0x24
   1b6d8:	mvnne	r8, #0
   1b6dc:	bne	1b248 <__assert_fail@plt+0x9d44>
   1b6e0:	mov	r2, #0
   1b6e4:	b	1b6f0 <__assert_fail@plt+0xa1ec>
   1b6e8:	cmp	ip, #9
   1b6ec:	bhi	1bcfc <__assert_fail@plt+0xa7f8>
   1b6f0:	ldr	r3, [pc, #1752]	; 1bdd0 <__assert_fail@plt+0xa8cc>
   1b6f4:	mov	r1, r5
   1b6f8:	cmp	r2, r3
   1b6fc:	addls	r2, r2, r2, lsl #2
   1b700:	mvnhi	r3, #0
   1b704:	lslls	r3, r2, #1
   1b708:	ldrb	ip, [r5, #1]!
   1b70c:	adds	r3, r0, r3
   1b710:	mov	r2, r3
   1b714:	sub	r0, ip, #48	; 0x30
   1b718:	uxtb	ip, r0
   1b71c:	bcc	1b6e8 <__assert_fail@plt+0xa1e4>
   1b720:	cmp	ip, #9
   1b724:	mvn	r3, #0
   1b728:	mov	r1, r5
   1b72c:	bls	1b708 <__assert_fail@plt+0xa204>
   1b730:	mov	sl, fp
   1b734:	ldr	fp, [sp, #4]
   1b738:	ldr	r3, [sl, #4]
   1b73c:	ldr	r2, [sp, #12]
   1b740:	cmp	r2, r3
   1b744:	beq	1b750 <__assert_fail@plt+0xa24c>
   1b748:	mov	r0, r3
   1b74c:	bl	111ec <free@plt>
   1b750:	ldr	r0, [fp, #4]
   1b754:	ldr	r3, [sp, #36]	; 0x24
   1b758:	cmp	r3, r0
   1b75c:	beq	1b764 <__assert_fail@plt+0xa260>
   1b760:	bl	111ec <free@plt>
   1b764:	bl	113e4 <__errno_location@plt>
   1b768:	mov	r3, #22
   1b76c:	mvn	r1, #0
   1b770:	str	r3, [r0]
   1b774:	b	1b1ac <__assert_fail@plt+0x9ca8>
   1b778:	str	r5, [r6, #24]
   1b77c:	ldrb	r3, [r5, #1]
   1b780:	sub	r3, r3, #48	; 0x30
   1b784:	cmp	r3, #9
   1b788:	bhi	1bd44 <__assert_fail@plt+0xa840>
   1b78c:	ldrb	r3, [r7, #1]!
   1b790:	sub	r3, r3, #48	; 0x30
   1b794:	cmp	r3, #9
   1b798:	bls	1b78c <__assert_fail@plt+0xa288>
   1b79c:	sub	r3, r7, r5
   1b7a0:	mov	r5, r7
   1b7a4:	ldr	r2, [sp, #28]
   1b7a8:	str	r7, [r6, #28]
   1b7ac:	cmp	r2, r3
   1b7b0:	movcs	r3, r2
   1b7b4:	ldrb	r4, [r7]
   1b7b8:	str	r3, [sp, #28]
   1b7bc:	b	1b2d0 <__assert_fail@plt+0x9dcc>
   1b7c0:	ldr	r3, [sp, #8]
   1b7c4:	lsl	r3, r3, #1
   1b7c8:	cmp	r3, r4
   1b7cc:	str	r3, [sp, #8]
   1b7d0:	addls	r3, r4, #1
   1b7d4:	strls	r3, [sp, #8]
   1b7d8:	ldr	r3, [sp, #8]
   1b7dc:	cmn	r3, #-268435455	; 0xf0000001
   1b7e0:	bhi	1bdb4 <__assert_fail@plt+0xa8b0>
   1b7e4:	ldr	r2, [sp, #12]
   1b7e8:	lsl	r1, r3, #4
   1b7ec:	cmp	r2, sl
   1b7f0:	beq	1bb4c <__assert_fail@plt+0xa648>
   1b7f4:	mov	r0, sl
   1b7f8:	bl	11270 <realloc@plt>
   1b7fc:	ldr	r3, [fp, #4]
   1b800:	subs	sl, r0, #0
   1b804:	beq	1bdb8 <__assert_fail@plt+0xa8b4>
   1b808:	ldr	r2, [sp, #12]
   1b80c:	cmp	r2, r3
   1b810:	ldr	r2, [fp]
   1b814:	beq	1bdc0 <__assert_fail@plt+0xa8bc>
   1b818:	str	sl, [fp, #4]
   1b81c:	b	1b4dc <__assert_fail@plt+0x9fd8>
   1b820:	mov	r0, r1
   1b824:	bl	1133c <malloc@plt>
   1b828:	subs	r3, r0, #0
   1b82c:	beq	1bc48 <__assert_fail@plt+0xa744>
   1b830:	add	r2, r4, r4, lsl #2
   1b834:	mov	r0, r3
   1b838:	add	r2, r4, r2, lsl #1
   1b83c:	mov	r1, r6
   1b840:	lsl	r2, r2, #2
   1b844:	bl	11210 <memcpy@plt>
   1b848:	ldr	r2, [sp, #4]
   1b84c:	ldr	r4, [r2]
   1b850:	mov	r3, r0
   1b854:	b	1b6b0 <__assert_fail@plt+0xa1ac>
   1b858:	ldr	r3, [sp, #32]
   1b85c:	cmn	r3, #1
   1b860:	str	r3, [r6, #20]
   1b864:	add	r3, r3, #1
   1b868:	beq	1b730 <__assert_fail@plt+0xa22c>
   1b86c:	ldr	r4, [sp, #32]
   1b870:	str	r3, [sp, #32]
   1b874:	b	1b4c8 <__assert_fail@plt+0x9fc4>
   1b878:	cmp	r3, #15
   1b87c:	movgt	r3, #12
   1b880:	strgt	r3, [sp, #20]
   1b884:	bgt	1b5d0 <__assert_fail@plt+0xa0cc>
   1b888:	tst	r3, #4
   1b88c:	movne	r3, #12
   1b890:	moveq	r3, #11
   1b894:	str	r3, [sp, #20]
   1b898:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1b89c:	mov	r1, r7
   1b8a0:	ldrb	r2, [r1, #1]!
   1b8a4:	sub	r0, r2, #48	; 0x30
   1b8a8:	cmp	r0, #9
   1b8ac:	bls	1b8a0 <__assert_fail@plt+0xa39c>
   1b8b0:	cmp	r2, #36	; 0x24
   1b8b4:	bne	1b4bc <__assert_fail@plt+0x9fb8>
   1b8b8:	mov	r1, #0
   1b8bc:	b	1b8c8 <__assert_fail@plt+0xa3c4>
   1b8c0:	cmp	ip, #9
   1b8c4:	bhi	1bd84 <__assert_fail@plt+0xa880>
   1b8c8:	ldr	r2, [pc, #1280]	; 1bdd0 <__assert_fail@plt+0xa8cc>
   1b8cc:	mov	r0, r7
   1b8d0:	cmp	r1, r2
   1b8d4:	addls	r1, r1, r1, lsl #2
   1b8d8:	mvnhi	r2, #0
   1b8dc:	lslls	r2, r1, #1
   1b8e0:	ldrb	ip, [r7, #1]!
   1b8e4:	adds	r2, r3, r2
   1b8e8:	mov	r1, r2
   1b8ec:	sub	r3, ip, #48	; 0x30
   1b8f0:	uxtb	ip, r3
   1b8f4:	bcc	1b8c0 <__assert_fail@plt+0xa3bc>
   1b8f8:	cmp	ip, #9
   1b8fc:	mvn	r2, #0
   1b900:	mov	r0, r7
   1b904:	bls	1b8e0 <__assert_fail@plt+0xa3dc>
   1b908:	b	1b730 <__assert_fail@plt+0xa22c>
   1b90c:	cmp	r3, #7
   1b910:	movgt	r3, #16
   1b914:	movle	r3, #15
   1b918:	str	r3, [sp, #20]
   1b91c:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1b920:	cmp	r3, #15
   1b924:	bgt	1bc1c <__assert_fail@plt+0xa718>
   1b928:	tst	r3, #4
   1b92c:	bne	1bc1c <__assert_fail@plt+0xa718>
   1b930:	cmp	r3, #7
   1b934:	movgt	r3, #7
   1b938:	strgt	r3, [sp, #20]
   1b93c:	bgt	1b5d0 <__assert_fail@plt+0xa0cc>
   1b940:	tst	r3, #2
   1b944:	movne	r3, #1
   1b948:	strne	r3, [sp, #20]
   1b94c:	bne	1b5d0 <__assert_fail@plt+0xa0cc>
   1b950:	tst	r3, #1
   1b954:	movne	r3, #3
   1b958:	moveq	r3, #5
   1b95c:	str	r3, [sp, #20]
   1b960:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1b964:	cmp	r3, #7
   1b968:	movgt	r3, #14
   1b96c:	movle	r3, #13
   1b970:	str	r3, [sp, #20]
   1b974:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1b978:	cmp	r3, #15
   1b97c:	bgt	1bc10 <__assert_fail@plt+0xa70c>
   1b980:	tst	r3, #4
   1b984:	bne	1bc10 <__assert_fail@plt+0xa70c>
   1b988:	cmp	r3, #7
   1b98c:	movgt	r3, #8
   1b990:	strgt	r3, [sp, #20]
   1b994:	bgt	1b5d0 <__assert_fail@plt+0xa0cc>
   1b998:	tst	r3, #2
   1b99c:	movne	r3, #2
   1b9a0:	strne	r3, [sp, #20]
   1b9a4:	bne	1b5d0 <__assert_fail@plt+0xa0cc>
   1b9a8:	tst	r3, #1
   1b9ac:	movne	r3, #4
   1b9b0:	moveq	r3, #6
   1b9b4:	str	r3, [sp, #20]
   1b9b8:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1b9bc:	mov	r3, #16
   1b9c0:	str	r3, [sp, #20]
   1b9c4:	mov	r4, #115	; 0x73
   1b9c8:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1b9cc:	mov	r3, #17
   1b9d0:	str	r3, [sp, #20]
   1b9d4:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1b9d8:	cmp	r3, #15
   1b9dc:	bgt	1bc04 <__assert_fail@plt+0xa700>
   1b9e0:	tst	r3, #4
   1b9e4:	bne	1bc04 <__assert_fail@plt+0xa700>
   1b9e8:	cmp	r3, #7
   1b9ec:	movgt	r3, #21
   1b9f0:	strgt	r3, [sp, #20]
   1b9f4:	bgt	1b5d0 <__assert_fail@plt+0xa0cc>
   1b9f8:	tst	r3, #2
   1b9fc:	movne	r3, #18
   1ba00:	strne	r3, [sp, #20]
   1ba04:	bne	1b5d0 <__assert_fail@plt+0xa0cc>
   1ba08:	tst	r3, #1
   1ba0c:	movne	r3, #19
   1ba10:	moveq	r3, #20
   1ba14:	str	r3, [sp, #20]
   1ba18:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1ba1c:	ldr	r2, [sp, #20]
   1ba20:	cmp	r3, r2
   1ba24:	beq	1b624 <__assert_fail@plt+0xa120>
   1ba28:	mov	r3, sl
   1ba2c:	ldr	fp, [sp, #4]
   1ba30:	b	1b73c <__assert_fail@plt+0xa238>
   1ba34:	ldr	r3, [sp, #8]
   1ba38:	lsl	r3, r3, #1
   1ba3c:	cmp	r3, r8
   1ba40:	str	r3, [sp, #8]
   1ba44:	addls	r3, r8, #1
   1ba48:	strls	r3, [sp, #8]
   1ba4c:	ldr	r3, [sp, #8]
   1ba50:	cmn	r3, #-268435455	; 0xf0000001
   1ba54:	bhi	1bdb4 <__assert_fail@plt+0xa8b0>
   1ba58:	ldr	r2, [sp, #12]
   1ba5c:	lsl	r1, r3, #4
   1ba60:	cmp	r2, sl
   1ba64:	beq	1bb20 <__assert_fail@plt+0xa61c>
   1ba68:	mov	r0, sl
   1ba6c:	bl	11270 <realloc@plt>
   1ba70:	subs	sl, r0, #0
   1ba74:	beq	1bd68 <__assert_fail@plt+0xa864>
   1ba78:	ldr	r3, [fp, #4]
   1ba7c:	ldr	r2, [sp, #12]
   1ba80:	cmp	r2, r3
   1ba84:	beq	1bda8 <__assert_fail@plt+0xa8a4>
   1ba88:	str	sl, [fp, #4]
   1ba8c:	b	1b5ec <__assert_fail@plt+0xa0e8>
   1ba90:	ldr	r3, [sp, #32]
   1ba94:	cmn	r3, #1
   1ba98:	str	r3, [r6, #40]	; 0x28
   1ba9c:	add	r3, r3, #1
   1baa0:	beq	1b730 <__assert_fail@plt+0xa22c>
   1baa4:	ldr	r8, [sp, #32]
   1baa8:	str	r3, [sp, #32]
   1baac:	b	1b5dc <__assert_fail@plt+0xa0d8>
   1bab0:	str	r5, [r6, #12]
   1bab4:	ldrb	r3, [r5]
   1bab8:	sub	r3, r3, #48	; 0x30
   1babc:	cmp	r3, #9
   1bac0:	bhi	1bb00 <__assert_fail@plt+0xa5fc>
   1bac4:	mov	r7, r5
   1bac8:	b	1bad0 <__assert_fail@plt+0xa5cc>
   1bacc:	mov	r7, r2
   1bad0:	ldrb	r3, [r7, #1]
   1bad4:	add	r2, r7, #1
   1bad8:	sub	r3, r3, #48	; 0x30
   1badc:	cmp	r3, #9
   1bae0:	bls	1bacc <__assert_fail@plt+0xa5c8>
   1bae4:	ldr	r3, [sp, #16]
   1bae8:	sub	r5, r2, r5
   1baec:	cmp	r3, r5
   1baf0:	movcc	r3, r5
   1baf4:	add	r7, r7, #2
   1baf8:	mov	r5, r2
   1bafc:	str	r3, [sp, #16]
   1bb00:	str	r5, [r6, #16]
   1bb04:	ldrb	r4, [r5]
   1bb08:	b	1b2c8 <__assert_fail@plt+0x9dc4>
   1bb0c:	cmp	r3, #5
   1bb10:	bne	1ba28 <__assert_fail@plt+0xa524>
   1bb14:	mov	r5, r7
   1bb18:	ldrb	r4, [r7], #1
   1bb1c:	b	1b2c8 <__assert_fail@plt+0x9dc4>
   1bb20:	mov	r0, r1
   1bb24:	bl	1133c <malloc@plt>
   1bb28:	subs	r3, r0, #0
   1bb2c:	beq	1bb5c <__assert_fail@plt+0xa658>
   1bb30:	ldr	r2, [fp]
   1bb34:	mov	r1, sl
   1bb38:	mov	r0, r3
   1bb3c:	lsl	r2, r2, #4
   1bb40:	bl	11210 <memcpy@plt>
   1bb44:	mov	sl, r0
   1bb48:	b	1ba88 <__assert_fail@plt+0xa584>
   1bb4c:	mov	r0, r1
   1bb50:	bl	1133c <malloc@plt>
   1bb54:	subs	r3, r0, #0
   1bb58:	bne	1bc28 <__assert_fail@plt+0xa724>
   1bb5c:	ldr	fp, [sp, #4]
   1bb60:	ldr	r0, [fp, #4]
   1bb64:	ldr	r3, [sp, #36]	; 0x24
   1bb68:	cmp	r3, r0
   1bb6c:	beq	1bb74 <__assert_fail@plt+0xa670>
   1bb70:	bl	111ec <free@plt>
   1bb74:	bl	113e4 <__errno_location@plt>
   1bb78:	mov	r3, #12
   1bb7c:	mvn	r1, #0
   1bb80:	str	r3, [r0]
   1bb84:	mov	r0, r1
   1bb88:	add	sp, sp, #44	; 0x2c
   1bb8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb90:	ldr	r3, [sp, #8]
   1bb94:	lsl	r3, r3, #1
   1bb98:	cmp	r3, r4
   1bb9c:	str	r3, [sp, #8]
   1bba0:	addls	r3, r4, #1
   1bba4:	strls	r3, [sp, #8]
   1bba8:	ldr	r3, [sp, #8]
   1bbac:	cmn	r3, #-268435455	; 0xf0000001
   1bbb0:	bhi	1bdb4 <__assert_fail@plt+0xa8b0>
   1bbb4:	ldr	r2, [sp, #12]
   1bbb8:	lsl	r1, r3, #4
   1bbbc:	cmp	r2, sl
   1bbc0:	beq	1bd14 <__assert_fail@plt+0xa810>
   1bbc4:	mov	r0, sl
   1bbc8:	bl	11270 <realloc@plt>
   1bbcc:	ldr	r3, [fp, #4]
   1bbd0:	subs	sl, r0, #0
   1bbd4:	beq	1bdb8 <__assert_fail@plt+0xa8b4>
   1bbd8:	ldr	r2, [sp, #12]
   1bbdc:	cmp	r2, r3
   1bbe0:	ldr	r2, [fp]
   1bbe4:	beq	1bd9c <__assert_fail@plt+0xa898>
   1bbe8:	str	sl, [fp, #4]
   1bbec:	b	1b584 <__assert_fail@plt+0xa080>
   1bbf0:	cmp	r3, #5
   1bbf4:	bne	1ba28 <__assert_fail@plt+0xa524>
   1bbf8:	ldrb	r4, [r7]
   1bbfc:	mov	r5, r7
   1bc00:	b	1b2d0 <__assert_fail@plt+0x9dcc>
   1bc04:	mov	r3, #22
   1bc08:	str	r3, [sp, #20]
   1bc0c:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1bc10:	mov	r3, #10
   1bc14:	str	r3, [sp, #20]
   1bc18:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1bc1c:	mov	r3, #9
   1bc20:	str	r3, [sp, #20]
   1bc24:	b	1b5d0 <__assert_fail@plt+0xa0cc>
   1bc28:	ldr	r2, [fp]
   1bc2c:	lsl	r2, r2, #4
   1bc30:	mov	r1, sl
   1bc34:	mov	r0, r3
   1bc38:	bl	11210 <memcpy@plt>
   1bc3c:	ldr	r2, [fp]
   1bc40:	mov	sl, r0
   1bc44:	b	1b818 <__assert_fail@plt+0xa314>
   1bc48:	mov	sl, fp
   1bc4c:	ldr	r2, [sp, #12]
   1bc50:	ldr	r3, [sl, #4]
   1bc54:	ldr	fp, [sp, #4]
   1bc58:	cmp	r2, r3
   1bc5c:	beq	1bb74 <__assert_fail@plt+0xa670>
   1bc60:	mov	r0, r3
   1bc64:	bl	111ec <free@plt>
   1bc68:	b	1bb60 <__assert_fail@plt+0xa65c>
   1bc6c:	ldr	r3, [sp, #32]
   1bc70:	cmn	r3, #1
   1bc74:	str	r3, [r6, #32]
   1bc78:	add	r3, r3, #1
   1bc7c:	beq	1b730 <__assert_fail@plt+0xa22c>
   1bc80:	ldr	r4, [sp, #32]
   1bc84:	str	r3, [sp, #32]
   1bc88:	b	1b570 <__assert_fail@plt+0xa06c>
   1bc8c:	mov	r2, r7
   1bc90:	ldrb	r3, [r2, #1]!
   1bc94:	sub	r0, r3, #48	; 0x30
   1bc98:	cmp	r0, #9
   1bc9c:	bls	1bc90 <__assert_fail@plt+0xa78c>
   1bca0:	cmp	r3, #36	; 0x24
   1bca4:	bne	1b564 <__assert_fail@plt+0xa060>
   1bca8:	mov	r2, #0
   1bcac:	b	1bcb8 <__assert_fail@plt+0xa7b4>
   1bcb0:	cmp	ip, #9
   1bcb4:	bhi	1bd50 <__assert_fail@plt+0xa84c>
   1bcb8:	ldr	r3, [pc, #272]	; 1bdd0 <__assert_fail@plt+0xa8cc>
   1bcbc:	mov	r0, r7
   1bcc0:	cmp	r2, r3
   1bcc4:	addls	r2, r2, r2, lsl #2
   1bcc8:	mvnhi	r3, #0
   1bccc:	lslls	r3, r2, #1
   1bcd0:	ldrb	ip, [r7, #1]!
   1bcd4:	adds	r3, r1, r3
   1bcd8:	mov	r2, r3
   1bcdc:	sub	r1, ip, #48	; 0x30
   1bce0:	uxtb	ip, r1
   1bce4:	bcc	1bcb0 <__assert_fail@plt+0xa7ac>
   1bce8:	cmp	ip, #9
   1bcec:	mvn	r3, #0
   1bcf0:	mov	r0, r7
   1bcf4:	bls	1bcd0 <__assert_fail@plt+0xa7cc>
   1bcf8:	b	1b730 <__assert_fail@plt+0xa22c>
   1bcfc:	sub	r8, r3, #1
   1bd00:	cmn	r8, #3
   1bd04:	bhi	1b730 <__assert_fail@plt+0xa22c>
   1bd08:	add	r5, r1, #2
   1bd0c:	ldrb	r4, [r1, #2]
   1bd10:	b	1b248 <__assert_fail@plt+0x9d44>
   1bd14:	mov	r0, r1
   1bd18:	bl	1133c <malloc@plt>
   1bd1c:	subs	r3, r0, #0
   1bd20:	beq	1bb5c <__assert_fail@plt+0xa658>
   1bd24:	ldr	r2, [fp]
   1bd28:	lsl	r2, r2, #4
   1bd2c:	mov	r1, sl
   1bd30:	mov	r0, r3
   1bd34:	bl	11210 <memcpy@plt>
   1bd38:	ldr	r2, [fp]
   1bd3c:	mov	sl, r0
   1bd40:	b	1bbe8 <__assert_fail@plt+0xa6e4>
   1bd44:	mov	r5, r7
   1bd48:	mov	r3, #1
   1bd4c:	b	1b7a4 <__assert_fail@plt+0xa2a0>
   1bd50:	sub	r4, r3, #1
   1bd54:	cmn	r4, #3
   1bd58:	bhi	1b730 <__assert_fail@plt+0xa22c>
   1bd5c:	str	r4, [r6, #32]
   1bd60:	add	r7, r0, #2
   1bd64:	b	1b570 <__assert_fail@plt+0xa06c>
   1bd68:	mov	sl, fp
   1bd6c:	ldr	fp, [sp, #4]
   1bd70:	ldr	r3, [sl, #4]
   1bd74:	ldr	r2, [sp, #12]
   1bd78:	cmp	r2, r3
   1bd7c:	bne	1bc60 <__assert_fail@plt+0xa75c>
   1bd80:	b	1bb60 <__assert_fail@plt+0xa65c>
   1bd84:	sub	r4, r2, #1
   1bd88:	cmn	r4, #3
   1bd8c:	bhi	1b730 <__assert_fail@plt+0xa22c>
   1bd90:	str	r4, [r6, #20]
   1bd94:	add	r7, r0, #2
   1bd98:	b	1b4c8 <__assert_fail@plt+0x9fc4>
   1bd9c:	mov	r3, sl
   1bda0:	ldr	sl, [sp, #12]
   1bda4:	b	1bd28 <__assert_fail@plt+0xa824>
   1bda8:	mov	r3, sl
   1bdac:	mov	sl, r2
   1bdb0:	b	1bb30 <__assert_fail@plt+0xa62c>
   1bdb4:	mov	r3, sl
   1bdb8:	ldr	fp, [sp, #4]
   1bdbc:	b	1bd74 <__assert_fail@plt+0xa870>
   1bdc0:	mov	r3, sl
   1bdc4:	ldr	sl, [sp, #12]
   1bdc8:	b	1bc2c <__assert_fail@plt+0xa728>
   1bdcc:	ldrbeq	r7, [r1, #1117]	; 0x45d
   1bdd0:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1bdd4:	subs	r2, r1, #1
   1bdd8:	bxeq	lr
   1bddc:	bcc	1bfb4 <__assert_fail@plt+0xaab0>
   1bde0:	cmp	r0, r1
   1bde4:	bls	1bf98 <__assert_fail@plt+0xaa94>
   1bde8:	tst	r1, r2
   1bdec:	beq	1bfa4 <__assert_fail@plt+0xaaa0>
   1bdf0:	clz	r3, r0
   1bdf4:	clz	r2, r1
   1bdf8:	sub	r3, r2, r3
   1bdfc:	rsbs	r3, r3, #31
   1be00:	addne	r3, r3, r3, lsl #1
   1be04:	mov	r2, #0
   1be08:	addne	pc, pc, r3, lsl #2
   1be0c:	nop			; (mov r0, r0)
   1be10:	cmp	r0, r1, lsl #31
   1be14:	adc	r2, r2, r2
   1be18:	subcs	r0, r0, r1, lsl #31
   1be1c:	cmp	r0, r1, lsl #30
   1be20:	adc	r2, r2, r2
   1be24:	subcs	r0, r0, r1, lsl #30
   1be28:	cmp	r0, r1, lsl #29
   1be2c:	adc	r2, r2, r2
   1be30:	subcs	r0, r0, r1, lsl #29
   1be34:	cmp	r0, r1, lsl #28
   1be38:	adc	r2, r2, r2
   1be3c:	subcs	r0, r0, r1, lsl #28
   1be40:	cmp	r0, r1, lsl #27
   1be44:	adc	r2, r2, r2
   1be48:	subcs	r0, r0, r1, lsl #27
   1be4c:	cmp	r0, r1, lsl #26
   1be50:	adc	r2, r2, r2
   1be54:	subcs	r0, r0, r1, lsl #26
   1be58:	cmp	r0, r1, lsl #25
   1be5c:	adc	r2, r2, r2
   1be60:	subcs	r0, r0, r1, lsl #25
   1be64:	cmp	r0, r1, lsl #24
   1be68:	adc	r2, r2, r2
   1be6c:	subcs	r0, r0, r1, lsl #24
   1be70:	cmp	r0, r1, lsl #23
   1be74:	adc	r2, r2, r2
   1be78:	subcs	r0, r0, r1, lsl #23
   1be7c:	cmp	r0, r1, lsl #22
   1be80:	adc	r2, r2, r2
   1be84:	subcs	r0, r0, r1, lsl #22
   1be88:	cmp	r0, r1, lsl #21
   1be8c:	adc	r2, r2, r2
   1be90:	subcs	r0, r0, r1, lsl #21
   1be94:	cmp	r0, r1, lsl #20
   1be98:	adc	r2, r2, r2
   1be9c:	subcs	r0, r0, r1, lsl #20
   1bea0:	cmp	r0, r1, lsl #19
   1bea4:	adc	r2, r2, r2
   1bea8:	subcs	r0, r0, r1, lsl #19
   1beac:	cmp	r0, r1, lsl #18
   1beb0:	adc	r2, r2, r2
   1beb4:	subcs	r0, r0, r1, lsl #18
   1beb8:	cmp	r0, r1, lsl #17
   1bebc:	adc	r2, r2, r2
   1bec0:	subcs	r0, r0, r1, lsl #17
   1bec4:	cmp	r0, r1, lsl #16
   1bec8:	adc	r2, r2, r2
   1becc:	subcs	r0, r0, r1, lsl #16
   1bed0:	cmp	r0, r1, lsl #15
   1bed4:	adc	r2, r2, r2
   1bed8:	subcs	r0, r0, r1, lsl #15
   1bedc:	cmp	r0, r1, lsl #14
   1bee0:	adc	r2, r2, r2
   1bee4:	subcs	r0, r0, r1, lsl #14
   1bee8:	cmp	r0, r1, lsl #13
   1beec:	adc	r2, r2, r2
   1bef0:	subcs	r0, r0, r1, lsl #13
   1bef4:	cmp	r0, r1, lsl #12
   1bef8:	adc	r2, r2, r2
   1befc:	subcs	r0, r0, r1, lsl #12
   1bf00:	cmp	r0, r1, lsl #11
   1bf04:	adc	r2, r2, r2
   1bf08:	subcs	r0, r0, r1, lsl #11
   1bf0c:	cmp	r0, r1, lsl #10
   1bf10:	adc	r2, r2, r2
   1bf14:	subcs	r0, r0, r1, lsl #10
   1bf18:	cmp	r0, r1, lsl #9
   1bf1c:	adc	r2, r2, r2
   1bf20:	subcs	r0, r0, r1, lsl #9
   1bf24:	cmp	r0, r1, lsl #8
   1bf28:	adc	r2, r2, r2
   1bf2c:	subcs	r0, r0, r1, lsl #8
   1bf30:	cmp	r0, r1, lsl #7
   1bf34:	adc	r2, r2, r2
   1bf38:	subcs	r0, r0, r1, lsl #7
   1bf3c:	cmp	r0, r1, lsl #6
   1bf40:	adc	r2, r2, r2
   1bf44:	subcs	r0, r0, r1, lsl #6
   1bf48:	cmp	r0, r1, lsl #5
   1bf4c:	adc	r2, r2, r2
   1bf50:	subcs	r0, r0, r1, lsl #5
   1bf54:	cmp	r0, r1, lsl #4
   1bf58:	adc	r2, r2, r2
   1bf5c:	subcs	r0, r0, r1, lsl #4
   1bf60:	cmp	r0, r1, lsl #3
   1bf64:	adc	r2, r2, r2
   1bf68:	subcs	r0, r0, r1, lsl #3
   1bf6c:	cmp	r0, r1, lsl #2
   1bf70:	adc	r2, r2, r2
   1bf74:	subcs	r0, r0, r1, lsl #2
   1bf78:	cmp	r0, r1, lsl #1
   1bf7c:	adc	r2, r2, r2
   1bf80:	subcs	r0, r0, r1, lsl #1
   1bf84:	cmp	r0, r1
   1bf88:	adc	r2, r2, r2
   1bf8c:	subcs	r0, r0, r1
   1bf90:	mov	r0, r2
   1bf94:	bx	lr
   1bf98:	moveq	r0, #1
   1bf9c:	movne	r0, #0
   1bfa0:	bx	lr
   1bfa4:	clz	r2, r1
   1bfa8:	rsb	r2, r2, #31
   1bfac:	lsr	r0, r0, r2
   1bfb0:	bx	lr
   1bfb4:	cmp	r0, #0
   1bfb8:	mvnne	r0, #0
   1bfbc:	b	1c4b0 <__assert_fail@plt+0xafac>
   1bfc0:	cmp	r1, #0
   1bfc4:	beq	1bfb4 <__assert_fail@plt+0xaab0>
   1bfc8:	push	{r0, r1, lr}
   1bfcc:	bl	1bdd4 <__assert_fail@plt+0xa8d0>
   1bfd0:	pop	{r1, r2, lr}
   1bfd4:	mul	r3, r2, r0
   1bfd8:	sub	r1, r1, r3
   1bfdc:	bx	lr
   1bfe0:	eor	r1, r1, #-2147483648	; 0x80000000
   1bfe4:	b	1bfec <__assert_fail@plt+0xaae8>
   1bfe8:	eor	r3, r3, #-2147483648	; 0x80000000
   1bfec:	push	{r4, r5, lr}
   1bff0:	lsl	r4, r1, #1
   1bff4:	lsl	r5, r3, #1
   1bff8:	teq	r4, r5
   1bffc:	teqeq	r0, r2
   1c000:	orrsne	ip, r4, r0
   1c004:	orrsne	ip, r5, r2
   1c008:	mvnsne	ip, r4, asr #21
   1c00c:	mvnsne	ip, r5, asr #21
   1c010:	beq	1c1fc <__assert_fail@plt+0xacf8>
   1c014:	lsr	r4, r4, #21
   1c018:	rsbs	r5, r4, r5, lsr #21
   1c01c:	rsblt	r5, r5, #0
   1c020:	ble	1c040 <__assert_fail@plt+0xab3c>
   1c024:	add	r4, r4, r5
   1c028:	eor	r2, r0, r2
   1c02c:	eor	r3, r1, r3
   1c030:	eor	r0, r2, r0
   1c034:	eor	r1, r3, r1
   1c038:	eor	r2, r0, r2
   1c03c:	eor	r3, r1, r3
   1c040:	cmp	r5, #54	; 0x36
   1c044:	pophi	{r4, r5, pc}
   1c048:	tst	r1, #-2147483648	; 0x80000000
   1c04c:	lsl	r1, r1, #12
   1c050:	mov	ip, #1048576	; 0x100000
   1c054:	orr	r1, ip, r1, lsr #12
   1c058:	beq	1c064 <__assert_fail@plt+0xab60>
   1c05c:	rsbs	r0, r0, #0
   1c060:	rsc	r1, r1, #0
   1c064:	tst	r3, #-2147483648	; 0x80000000
   1c068:	lsl	r3, r3, #12
   1c06c:	orr	r3, ip, r3, lsr #12
   1c070:	beq	1c07c <__assert_fail@plt+0xab78>
   1c074:	rsbs	r2, r2, #0
   1c078:	rsc	r3, r3, #0
   1c07c:	teq	r4, r5
   1c080:	beq	1c1e4 <__assert_fail@plt+0xace0>
   1c084:	sub	r4, r4, #1
   1c088:	rsbs	lr, r5, #32
   1c08c:	blt	1c0a8 <__assert_fail@plt+0xaba4>
   1c090:	lsl	ip, r2, lr
   1c094:	adds	r0, r0, r2, lsr r5
   1c098:	adc	r1, r1, #0
   1c09c:	adds	r0, r0, r3, lsl lr
   1c0a0:	adcs	r1, r1, r3, asr r5
   1c0a4:	b	1c0c4 <__assert_fail@plt+0xabc0>
   1c0a8:	sub	r5, r5, #32
   1c0ac:	add	lr, lr, #32
   1c0b0:	cmp	r2, #1
   1c0b4:	lsl	ip, r3, lr
   1c0b8:	orrcs	ip, ip, #2
   1c0bc:	adds	r0, r0, r3, asr r5
   1c0c0:	adcs	r1, r1, r3, asr #31
   1c0c4:	and	r5, r1, #-2147483648	; 0x80000000
   1c0c8:	bpl	1c0d8 <__assert_fail@plt+0xabd4>
   1c0cc:	rsbs	ip, ip, #0
   1c0d0:	rscs	r0, r0, #0
   1c0d4:	rsc	r1, r1, #0
   1c0d8:	cmp	r1, #1048576	; 0x100000
   1c0dc:	bcc	1c11c <__assert_fail@plt+0xac18>
   1c0e0:	cmp	r1, #2097152	; 0x200000
   1c0e4:	bcc	1c104 <__assert_fail@plt+0xac00>
   1c0e8:	lsrs	r1, r1, #1
   1c0ec:	rrxs	r0, r0
   1c0f0:	rrx	ip, ip
   1c0f4:	add	r4, r4, #1
   1c0f8:	lsl	r2, r4, #21
   1c0fc:	cmn	r2, #4194304	; 0x400000
   1c100:	bcs	1c25c <__assert_fail@plt+0xad58>
   1c104:	cmp	ip, #-2147483648	; 0x80000000
   1c108:	lsrseq	ip, r0, #1
   1c10c:	adcs	r0, r0, #0
   1c110:	adc	r1, r1, r4, lsl #20
   1c114:	orr	r1, r1, r5
   1c118:	pop	{r4, r5, pc}
   1c11c:	lsls	ip, ip, #1
   1c120:	adcs	r0, r0, r0
   1c124:	adc	r1, r1, r1
   1c128:	tst	r1, #1048576	; 0x100000
   1c12c:	sub	r4, r4, #1
   1c130:	bne	1c104 <__assert_fail@plt+0xac00>
   1c134:	teq	r1, #0
   1c138:	moveq	r1, r0
   1c13c:	moveq	r0, #0
   1c140:	clz	r3, r1
   1c144:	addeq	r3, r3, #32
   1c148:	sub	r3, r3, #11
   1c14c:	subs	r2, r3, #32
   1c150:	bge	1c174 <__assert_fail@plt+0xac70>
   1c154:	adds	r2, r2, #12
   1c158:	ble	1c170 <__assert_fail@plt+0xac6c>
   1c15c:	add	ip, r2, #20
   1c160:	rsb	r2, r2, #12
   1c164:	lsl	r0, r1, ip
   1c168:	lsr	r1, r1, r2
   1c16c:	b	1c184 <__assert_fail@plt+0xac80>
   1c170:	add	r2, r2, #20
   1c174:	rsble	ip, r2, #32
   1c178:	lsl	r1, r1, r2
   1c17c:	orrle	r1, r1, r0, lsr ip
   1c180:	lslle	r0, r0, r2
   1c184:	subs	r4, r4, r3
   1c188:	addge	r1, r1, r4, lsl #20
   1c18c:	orrge	r1, r1, r5
   1c190:	popge	{r4, r5, pc}
   1c194:	mvn	r4, r4
   1c198:	subs	r4, r4, #31
   1c19c:	bge	1c1d8 <__assert_fail@plt+0xacd4>
   1c1a0:	adds	r4, r4, #12
   1c1a4:	bgt	1c1c0 <__assert_fail@plt+0xacbc>
   1c1a8:	add	r4, r4, #20
   1c1ac:	rsb	r2, r4, #32
   1c1b0:	lsr	r0, r0, r4
   1c1b4:	orr	r0, r0, r1, lsl r2
   1c1b8:	orr	r1, r5, r1, lsr r4
   1c1bc:	pop	{r4, r5, pc}
   1c1c0:	rsb	r4, r4, #12
   1c1c4:	rsb	r2, r4, #32
   1c1c8:	lsr	r0, r0, r2
   1c1cc:	orr	r0, r0, r1, lsl r4
   1c1d0:	mov	r1, r5
   1c1d4:	pop	{r4, r5, pc}
   1c1d8:	lsr	r0, r1, r4
   1c1dc:	mov	r1, r5
   1c1e0:	pop	{r4, r5, pc}
   1c1e4:	teq	r4, #0
   1c1e8:	eor	r3, r3, #1048576	; 0x100000
   1c1ec:	eoreq	r1, r1, #1048576	; 0x100000
   1c1f0:	addeq	r4, r4, #1
   1c1f4:	subne	r5, r5, #1
   1c1f8:	b	1c084 <__assert_fail@plt+0xab80>
   1c1fc:	mvns	ip, r4, asr #21
   1c200:	mvnsne	ip, r5, asr #21
   1c204:	beq	1c26c <__assert_fail@plt+0xad68>
   1c208:	teq	r4, r5
   1c20c:	teqeq	r0, r2
   1c210:	beq	1c224 <__assert_fail@plt+0xad20>
   1c214:	orrs	ip, r4, r0
   1c218:	moveq	r1, r3
   1c21c:	moveq	r0, r2
   1c220:	pop	{r4, r5, pc}
   1c224:	teq	r1, r3
   1c228:	movne	r1, #0
   1c22c:	movne	r0, #0
   1c230:	popne	{r4, r5, pc}
   1c234:	lsrs	ip, r4, #21
   1c238:	bne	1c24c <__assert_fail@plt+0xad48>
   1c23c:	lsls	r0, r0, #1
   1c240:	adcs	r1, r1, r1
   1c244:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c248:	pop	{r4, r5, pc}
   1c24c:	adds	r4, r4, #4194304	; 0x400000
   1c250:	addcc	r1, r1, #1048576	; 0x100000
   1c254:	popcc	{r4, r5, pc}
   1c258:	and	r5, r1, #-2147483648	; 0x80000000
   1c25c:	orr	r1, r5, #2130706432	; 0x7f000000
   1c260:	orr	r1, r1, #15728640	; 0xf00000
   1c264:	mov	r0, #0
   1c268:	pop	{r4, r5, pc}
   1c26c:	mvns	ip, r4, asr #21
   1c270:	movne	r1, r3
   1c274:	movne	r0, r2
   1c278:	mvnseq	ip, r5, asr #21
   1c27c:	movne	r3, r1
   1c280:	movne	r2, r0
   1c284:	orrs	r4, r0, r1, lsl #12
   1c288:	orrseq	r5, r2, r3, lsl #12
   1c28c:	teqeq	r1, r3
   1c290:	orrne	r1, r1, #524288	; 0x80000
   1c294:	pop	{r4, r5, pc}
   1c298:	teq	r0, #0
   1c29c:	moveq	r1, #0
   1c2a0:	bxeq	lr
   1c2a4:	push	{r4, r5, lr}
   1c2a8:	mov	r4, #1024	; 0x400
   1c2ac:	add	r4, r4, #50	; 0x32
   1c2b0:	mov	r5, #0
   1c2b4:	mov	r1, #0
   1c2b8:	b	1c134 <__assert_fail@plt+0xac30>
   1c2bc:	teq	r0, #0
   1c2c0:	moveq	r1, #0
   1c2c4:	bxeq	lr
   1c2c8:	push	{r4, r5, lr}
   1c2cc:	mov	r4, #1024	; 0x400
   1c2d0:	add	r4, r4, #50	; 0x32
   1c2d4:	ands	r5, r0, #-2147483648	; 0x80000000
   1c2d8:	rsbmi	r0, r0, #0
   1c2dc:	mov	r1, #0
   1c2e0:	b	1c134 <__assert_fail@plt+0xac30>
   1c2e4:	lsls	r2, r0, #1
   1c2e8:	asr	r1, r2, #3
   1c2ec:	rrx	r1, r1
   1c2f0:	lsl	r0, r2, #28
   1c2f4:	andsne	r3, r2, #-16777216	; 0xff000000
   1c2f8:	teqne	r3, #-16777216	; 0xff000000
   1c2fc:	eorne	r1, r1, #939524096	; 0x38000000
   1c300:	bxne	lr
   1c304:	bics	r2, r2, #-16777216	; 0xff000000
   1c308:	bxeq	lr
   1c30c:	teq	r3, #-16777216	; 0xff000000
   1c310:	orreq	r1, r1, #524288	; 0x80000
   1c314:	bxeq	lr
   1c318:	push	{r4, r5, lr}
   1c31c:	mov	r4, #896	; 0x380
   1c320:	and	r5, r1, #-2147483648	; 0x80000000
   1c324:	bic	r1, r1, #-2147483648	; 0x80000000
   1c328:	b	1c134 <__assert_fail@plt+0xac30>
   1c32c:	orrs	r2, r0, r1
   1c330:	bxeq	lr
   1c334:	push	{r4, r5, lr}
   1c338:	mov	r5, #0
   1c33c:	b	1c35c <__assert_fail@plt+0xae58>
   1c340:	orrs	r2, r0, r1
   1c344:	bxeq	lr
   1c348:	push	{r4, r5, lr}
   1c34c:	ands	r5, r1, #-2147483648	; 0x80000000
   1c350:	bpl	1c35c <__assert_fail@plt+0xae58>
   1c354:	rsbs	r0, r0, #0
   1c358:	rsc	r1, r1, #0
   1c35c:	mov	r4, #1024	; 0x400
   1c360:	add	r4, r4, #50	; 0x32
   1c364:	lsrs	ip, r1, #22
   1c368:	beq	1c0d8 <__assert_fail@plt+0xabd4>
   1c36c:	mov	r2, #3
   1c370:	lsrs	ip, ip, #3
   1c374:	addne	r2, r2, #3
   1c378:	lsrs	ip, ip, #3
   1c37c:	addne	r2, r2, #3
   1c380:	add	r2, r2, ip, lsr #3
   1c384:	rsb	r3, r2, #32
   1c388:	lsl	ip, r0, r3
   1c38c:	lsr	r0, r0, r2
   1c390:	orr	r0, r0, r1, lsl r3
   1c394:	lsr	r1, r1, r2
   1c398:	add	r4, r4, r2
   1c39c:	b	1c0d8 <__assert_fail@plt+0xabd4>
   1c3a0:	cmp	r3, #0
   1c3a4:	cmpeq	r2, #0
   1c3a8:	bne	1c3cc <__assert_fail@plt+0xaec8>
   1c3ac:	cmp	r1, #0
   1c3b0:	movlt	r1, #-2147483648	; 0x80000000
   1c3b4:	movlt	r0, #0
   1c3b8:	blt	1c3c8 <__assert_fail@plt+0xaec4>
   1c3bc:	cmpeq	r0, #0
   1c3c0:	mvnne	r1, #-2147483648	; 0x80000000
   1c3c4:	mvnne	r0, #0
   1c3c8:	b	1c4b0 <__assert_fail@plt+0xafac>
   1c3cc:	sub	sp, sp, #8
   1c3d0:	push	{sp, lr}
   1c3d4:	cmp	r1, #0
   1c3d8:	blt	1c3f8 <__assert_fail@plt+0xaef4>
   1c3dc:	cmp	r3, #0
   1c3e0:	blt	1c42c <__assert_fail@plt+0xaf28>
   1c3e4:	bl	1c500 <__assert_fail@plt+0xaffc>
   1c3e8:	ldr	lr, [sp, #4]
   1c3ec:	add	sp, sp, #8
   1c3f0:	pop	{r2, r3}
   1c3f4:	bx	lr
   1c3f8:	rsbs	r0, r0, #0
   1c3fc:	sbc	r1, r1, r1, lsl #1
   1c400:	cmp	r3, #0
   1c404:	blt	1c450 <__assert_fail@plt+0xaf4c>
   1c408:	bl	1c500 <__assert_fail@plt+0xaffc>
   1c40c:	ldr	lr, [sp, #4]
   1c410:	add	sp, sp, #8
   1c414:	pop	{r2, r3}
   1c418:	rsbs	r0, r0, #0
   1c41c:	sbc	r1, r1, r1, lsl #1
   1c420:	rsbs	r2, r2, #0
   1c424:	sbc	r3, r3, r3, lsl #1
   1c428:	bx	lr
   1c42c:	rsbs	r2, r2, #0
   1c430:	sbc	r3, r3, r3, lsl #1
   1c434:	bl	1c500 <__assert_fail@plt+0xaffc>
   1c438:	ldr	lr, [sp, #4]
   1c43c:	add	sp, sp, #8
   1c440:	pop	{r2, r3}
   1c444:	rsbs	r0, r0, #0
   1c448:	sbc	r1, r1, r1, lsl #1
   1c44c:	bx	lr
   1c450:	rsbs	r2, r2, #0
   1c454:	sbc	r3, r3, r3, lsl #1
   1c458:	bl	1c500 <__assert_fail@plt+0xaffc>
   1c45c:	ldr	lr, [sp, #4]
   1c460:	add	sp, sp, #8
   1c464:	pop	{r2, r3}
   1c468:	rsbs	r2, r2, #0
   1c46c:	sbc	r3, r3, r3, lsl #1
   1c470:	bx	lr
   1c474:	cmp	r3, #0
   1c478:	cmpeq	r2, #0
   1c47c:	bne	1c494 <__assert_fail@plt+0xaf90>
   1c480:	cmp	r1, #0
   1c484:	cmpeq	r0, #0
   1c488:	mvnne	r1, #0
   1c48c:	mvnne	r0, #0
   1c490:	b	1c4b0 <__assert_fail@plt+0xafac>
   1c494:	sub	sp, sp, #8
   1c498:	push	{sp, lr}
   1c49c:	bl	1c500 <__assert_fail@plt+0xaffc>
   1c4a0:	ldr	lr, [sp, #4]
   1c4a4:	add	sp, sp, #8
   1c4a8:	pop	{r2, r3}
   1c4ac:	bx	lr
   1c4b0:	push	{r1, lr}
   1c4b4:	mov	r0, #8
   1c4b8:	bl	1118c <raise@plt>
   1c4bc:	pop	{r1, pc}
   1c4c0:	vmov	d6, r0, r1
   1c4c4:	vldr	d7, [pc, #36]	; 1c4f0 <__assert_fail@plt+0xafec>
   1c4c8:	vldr	d5, [pc, #40]	; 1c4f8 <__assert_fail@plt+0xaff4>
   1c4cc:	vmul.f64	d7, d6, d7
   1c4d0:	vcvt.u32.f64	s14, d7
   1c4d4:	vcvt.f64.u32	d4, s14
   1c4d8:	vmov	r1, s14
   1c4dc:	vmls.f64	d6, d4, d5
   1c4e0:	vcvt.u32.f64	s15, d6
   1c4e4:	vmov	r0, s15
   1c4e8:	bx	lr
   1c4ec:	nop			; (mov r0, r0)
   1c4f0:	andeq	r0, r0, r0
   1c4f4:	ldclcc	0, cr0, [r0]
   1c4f8:	andeq	r0, r0, r0
   1c4fc:	mvnsmi	r0, r0
   1c500:	cmp	r1, r3
   1c504:	cmpeq	r0, r2
   1c508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c50c:	mov	r4, r0
   1c510:	movcc	r0, #0
   1c514:	mov	r5, r1
   1c518:	ldr	lr, [sp, #36]	; 0x24
   1c51c:	movcc	r1, r0
   1c520:	bcc	1c61c <__assert_fail@plt+0xb118>
   1c524:	cmp	r3, #0
   1c528:	clzeq	ip, r2
   1c52c:	clzne	ip, r3
   1c530:	addeq	ip, ip, #32
   1c534:	cmp	r5, #0
   1c538:	clzeq	r1, r4
   1c53c:	addeq	r1, r1, #32
   1c540:	clzne	r1, r5
   1c544:	sub	ip, ip, r1
   1c548:	sub	sl, ip, #32
   1c54c:	lsl	r9, r3, ip
   1c550:	rsb	fp, ip, #32
   1c554:	orr	r9, r9, r2, lsl sl
   1c558:	orr	r9, r9, r2, lsr fp
   1c55c:	lsl	r8, r2, ip
   1c560:	cmp	r5, r9
   1c564:	cmpeq	r4, r8
   1c568:	movcc	r0, #0
   1c56c:	movcc	r1, r0
   1c570:	bcc	1c58c <__assert_fail@plt+0xb088>
   1c574:	mov	r0, #1
   1c578:	subs	r4, r4, r8
   1c57c:	lsl	r1, r0, sl
   1c580:	orr	r1, r1, r0, lsr fp
   1c584:	lsl	r0, r0, ip
   1c588:	sbc	r5, r5, r9
   1c58c:	cmp	ip, #0
   1c590:	beq	1c61c <__assert_fail@plt+0xb118>
   1c594:	lsr	r6, r8, #1
   1c598:	orr	r6, r6, r9, lsl #31
   1c59c:	lsr	r7, r9, #1
   1c5a0:	mov	r2, ip
   1c5a4:	b	1c5c8 <__assert_fail@plt+0xb0c4>
   1c5a8:	subs	r3, r4, r6
   1c5ac:	sbc	r8, r5, r7
   1c5b0:	adds	r3, r3, r3
   1c5b4:	adc	r8, r8, r8
   1c5b8:	adds	r4, r3, #1
   1c5bc:	adc	r5, r8, #0
   1c5c0:	subs	r2, r2, #1
   1c5c4:	beq	1c5e4 <__assert_fail@plt+0xb0e0>
   1c5c8:	cmp	r5, r7
   1c5cc:	cmpeq	r4, r6
   1c5d0:	bcs	1c5a8 <__assert_fail@plt+0xb0a4>
   1c5d4:	adds	r4, r4, r4
   1c5d8:	adc	r5, r5, r5
   1c5dc:	subs	r2, r2, #1
   1c5e0:	bne	1c5c8 <__assert_fail@plt+0xb0c4>
   1c5e4:	lsr	r3, r4, ip
   1c5e8:	orr	r3, r3, r5, lsl fp
   1c5ec:	lsr	r2, r5, ip
   1c5f0:	orr	r3, r3, r5, lsr sl
   1c5f4:	adds	r0, r0, r4
   1c5f8:	mov	r4, r3
   1c5fc:	lsl	r3, r2, ip
   1c600:	orr	r3, r3, r4, lsl sl
   1c604:	lsl	ip, r4, ip
   1c608:	orr	r3, r3, r4, lsr fp
   1c60c:	adc	r1, r1, r5
   1c610:	subs	r0, r0, ip
   1c614:	mov	r5, r2
   1c618:	sbc	r1, r1, r3
   1c61c:	cmp	lr, #0
   1c620:	strdne	r4, [lr]
   1c624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c628:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c62c:	mov	r7, r0
   1c630:	ldr	r6, [pc, #72]	; 1c680 <__assert_fail@plt+0xb17c>
   1c634:	ldr	r5, [pc, #72]	; 1c684 <__assert_fail@plt+0xb180>
   1c638:	add	r6, pc, r6
   1c63c:	add	r5, pc, r5
   1c640:	sub	r6, r6, r5
   1c644:	mov	r8, r1
   1c648:	mov	r9, r2
   1c64c:	bl	11154 <calloc@plt-0x20>
   1c650:	asrs	r6, r6, #2
   1c654:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c658:	mov	r4, #0
   1c65c:	add	r4, r4, #1
   1c660:	ldr	r3, [r5], #4
   1c664:	mov	r2, r9
   1c668:	mov	r1, r8
   1c66c:	mov	r0, r7
   1c670:	blx	r3
   1c674:	cmp	r6, r4
   1c678:	bne	1c65c <__assert_fail@plt+0xb158>
   1c67c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c680:	andeq	r2, r1, r4, asr #17
   1c684:			; <UNDEFINED> instruction: 0x000128bc
   1c688:	bx	lr
   1c68c:	ldr	r3, [pc, #12]	; 1c6a0 <__assert_fail@plt+0xb19c>
   1c690:	mov	r1, #0
   1c694:	add	r3, pc, r3
   1c698:	ldr	r2, [r3]
   1c69c:	b	113fc <__cxa_atexit@plt>
   1c6a0:			; <UNDEFINED> instruction: 0x00012ab0

Disassembly of section .fini:

0001c6a4 <.fini>:
   1c6a4:	push	{r3, lr}
   1c6a8:	pop	{r3, pc}
