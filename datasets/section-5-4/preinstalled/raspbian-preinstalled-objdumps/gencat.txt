
raspbian-preinstalled/gencat:     file format elf32-littlearm


Disassembly of section .init:

00010ca8 <.init>:
   10ca8:	push	{r3, lr}
   10cac:	bl	1104c <__assert_fail@plt+0x180>
   10cb0:	pop	{r3, pc}

Disassembly of section .plt:

00010cb4 <calloc@plt-0x14>:
   10cb4:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb8:	ldr	lr, [pc, #4]	; 10cc4 <calloc@plt-0x4>
   10cbc:	add	lr, pc, lr
   10cc0:	ldr	pc, [lr, #8]!
   10cc4:	andeq	r3, r1, ip, lsr r3

00010cc8 <calloc@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #77824	; 0x13000
   10cd0:	ldr	pc, [ip, #828]!	; 0x33c

00010cd4 <raise@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #77824	; 0x13000
   10cdc:	ldr	pc, [ip, #820]!	; 0x334

00010ce0 <__getdelim@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #77824	; 0x13000
   10ce8:	ldr	pc, [ip, #812]!	; 0x32c

00010cec <iconv_close@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #77824	; 0x13000
   10cf4:	ldr	pc, [ip, #804]!	; 0x324

00010cf8 <iconv@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #77824	; 0x13000
   10d00:	ldr	pc, [ip, #796]!	; 0x31c

00010d04 <strcmp@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #77824	; 0x13000
   10d0c:	ldr	pc, [ip, #788]!	; 0x314

00010d10 <strtol@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #77824	; 0x13000
   10d18:	ldr	pc, [ip, #780]!	; 0x30c

00010d1c <fopen@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #77824	; 0x13000
   10d24:	ldr	pc, [ip, #772]!	; 0x304

00010d28 <__dcgettext@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #77824	; 0x13000
   10d30:	ldr	pc, [ip, #764]!	; 0x2fc

00010d34 <free@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #77824	; 0x13000
   10d3c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d40 <memcpy@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #77824	; 0x13000
   10d48:	ldr	pc, [ip, #748]!	; 0x2ec

00010d4c <__mempcpy@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #77824	; 0x13000
   10d54:	ldr	pc, [ip, #740]!	; 0x2e4

00010d58 <_obstack_newchunk@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #77824	; 0x13000
   10d60:	ldr	pc, [ip, #732]!	; 0x2dc

00010d64 <dcgettext@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #77824	; 0x13000
   10d6c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d70 <__stack_chk_fail@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #77824	; 0x13000
   10d78:	ldr	pc, [ip, #716]!	; 0x2cc

00010d7c <obstack_free@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #77824	; 0x13000
   10d84:	ldr	pc, [ip, #708]!	; 0x2c4

00010d88 <_obstack_begin@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #77824	; 0x13000
   10d90:	ldr	pc, [ip, #700]!	; 0x2bc

00010d94 <realloc@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #77824	; 0x13000
   10d9c:	ldr	pc, [ip, #692]!	; 0x2b4

00010da0 <textdomain@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #77824	; 0x13000
   10da8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dac <error@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #77824	; 0x13000
   10db4:	ldr	pc, [ip, #676]!	; 0x2a4

00010db8 <malloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #77824	; 0x13000
   10dc0:	ldr	pc, [ip, #668]!	; 0x29c

00010dc4 <error_at_line@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #77824	; 0x13000
   10dcc:	ldr	pc, [ip, #660]!	; 0x294

00010dd0 <iconv_open@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #77824	; 0x13000
   10dd8:	ldr	pc, [ip, #652]!	; 0x28c

00010ddc <__libc_start_main@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #77824	; 0x13000
   10de4:	ldr	pc, [ip, #644]!	; 0x284

00010de8 <__gmon_start__@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #77824	; 0x13000
   10df0:	ldr	pc, [ip, #636]!	; 0x27c

00010df4 <__ctype_b_loc@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #77824	; 0x13000
   10dfc:	ldr	pc, [ip, #628]!	; 0x274

00010e00 <feof@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #77824	; 0x13000
   10e08:	ldr	pc, [ip, #620]!	; 0x26c

00010e0c <strlen@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #77824	; 0x13000
   10e14:	ldr	pc, [ip, #612]!	; 0x264

00010e18 <fprintf@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #77824	; 0x13000
   10e20:	ldr	pc, [ip, #604]!	; 0x25c

00010e24 <creat@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #77824	; 0x13000
   10e2c:	ldr	pc, [ip, #596]!	; 0x254

00010e30 <__errno_location@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #77824	; 0x13000
   10e38:	ldr	pc, [ip, #588]!	; 0x24c

00010e3c <memset@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #77824	; 0x13000
   10e44:	ldr	pc, [ip, #580]!	; 0x244

00010e48 <argp_parse@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #77824	; 0x13000
   10e50:	ldr	pc, [ip, #572]!	; 0x23c

00010e54 <write@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #77824	; 0x13000
   10e5c:	ldr	pc, [ip, #564]!	; 0x234

00010e60 <asprintf@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #77824	; 0x13000
   10e68:	ldr	pc, [ip, #556]!	; 0x22c

00010e6c <fclose@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #77824	; 0x13000
   10e74:	ldr	pc, [ip, #548]!	; 0x224

00010e78 <setlocale@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #77824	; 0x13000
   10e80:	ldr	pc, [ip, #540]!	; 0x21c

00010e84 <wcslen@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #77824	; 0x13000
   10e8c:	ldr	pc, [ip, #532]!	; 0x214

00010e90 <nl_langinfo@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #77824	; 0x13000
   10e98:	ldr	pc, [ip, #524]!	; 0x20c

00010e9c <__open_catalog@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #77824	; 0x13000
   10ea4:	ldr	pc, [ip, #516]!	; 0x204

00010ea8 <strncmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #77824	; 0x13000
   10eb0:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb4 <abort@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #77824	; 0x13000
   10ebc:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec0 <close@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #77824	; 0x13000
   10ec8:	ldr	pc, [ip, #492]!	; 0x1ec

00010ecc <__assert_fail@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #77824	; 0x13000
   10ed4:	ldr	pc, [ip, #484]!	; 0x1e4

Disassembly of section .text:

00010ed8 <.text>:
   10ed8:	push	{r4, r5, r6, r7, lr}
   10edc:	sub	sp, sp, #20
   10ee0:	ldr	r7, [pc, #256]	; 10fe8 <__assert_fail@plt+0x11c>
   10ee4:	ldr	r3, [pc, #256]	; 10fec <__assert_fail@plt+0x120>
   10ee8:	ldr	r2, [pc, #256]	; 10ff0 <__assert_fail@plt+0x124>
   10eec:	ldr	ip, [r7]
   10ef0:	mov	r4, r0
   10ef4:	mov	r5, r1
   10ef8:	mov	r0, #6
   10efc:	ldr	r1, [pc, #240]	; 10ff4 <__assert_fail@plt+0x128>
   10f00:	str	r2, [r3]
   10f04:	str	ip, [sp, #12]
   10f08:	bl	10e78 <setlocale@plt>
   10f0c:	ldr	r0, [pc, #228]	; 10ff8 <__assert_fail@plt+0x12c>
   10f10:	bl	10da0 <textdomain@plt>
   10f14:	ldr	r6, [pc, #224]	; 10ffc <__assert_fail@plt+0x130>
   10f18:	mov	r3, #0
   10f1c:	add	r0, sp, #8
   10f20:	mov	r2, r5
   10f24:	stm	sp, {r0, r3}
   10f28:	mov	r1, r4
   10f2c:	ldr	r0, [pc, #204]	; 11000 <__assert_fail@plt+0x134>
   10f30:	bl	10e48 <argp_parse@plt>
   10f34:	ldr	r3, [r6, #8]
   10f38:	cmp	r3, #0
   10f3c:	beq	10fc4 <__assert_fail@plt+0xf8>
   10f40:	ldr	r1, [pc, #188]	; 11004 <__assert_fail@plt+0x138>
   10f44:	mov	r0, #0
   10f48:	bl	10e78 <setlocale@plt>
   10f4c:	ldr	r3, [sp, #8]
   10f50:	cmp	r3, r4
   10f54:	bge	10fb4 <__assert_fail@plt+0xe8>
   10f58:	mov	r0, #0
   10f5c:	ldr	r1, [r5, r3, lsl #2]
   10f60:	bl	1142c <__assert_fail@plt+0x560>
   10f64:	ldr	r3, [sp, #8]
   10f68:	add	r3, r3, #1
   10f6c:	cmp	r3, r4
   10f70:	str	r3, [sp, #8]
   10f74:	blt	10f5c <__assert_fail@plt+0x90>
   10f78:	cmp	r0, #0
   10f7c:	beq	10f8c <__assert_fail@plt+0xc0>
   10f80:	ldr	r2, [r6]
   10f84:	ldr	r1, [r6, #8]
   10f88:	bl	1285c <__assert_fail@plt+0x1990>
   10f8c:	ldr	r1, [pc, #116]	; 11008 <__assert_fail@plt+0x13c>
   10f90:	ldr	r2, [sp, #12]
   10f94:	ldr	r3, [r7]
   10f98:	ldr	r0, [r1]
   10f9c:	adds	r0, r0, #0
   10fa0:	movne	r0, #1
   10fa4:	cmp	r2, r3
   10fa8:	bne	10fe4 <__assert_fail@plt+0x118>
   10fac:	add	sp, sp, #20
   10fb0:	pop	{r4, r5, r6, r7, pc}
   10fb4:	ldr	r1, [pc, #80]	; 1100c <__assert_fail@plt+0x140>
   10fb8:	mov	r0, #0
   10fbc:	bl	1142c <__assert_fail@plt+0x560>
   10fc0:	b	10f78 <__assert_fail@plt+0xac>
   10fc4:	ldr	r3, [sp, #8]
   10fc8:	cmp	r3, r4
   10fcc:	addlt	r2, r3, #1
   10fd0:	ldrge	r3, [pc, #52]	; 1100c <__assert_fail@plt+0x140>
   10fd4:	ldrlt	r3, [r5, r3, lsl #2]
   10fd8:	strlt	r2, [sp, #8]
   10fdc:	str	r3, [r6, #8]
   10fe0:	b	10f40 <__assert_fail@plt+0x74>
   10fe4:	bl	10d70 <__stack_chk_fail@plt>
   10fe8:	strdeq	r3, [r2], -r8
   10fec:	andeq	r4, r2, r0, lsl #2
   10ff0:	andeq	r1, r1, r8, asr r1
   10ff4:	andeq	r3, r1, r4, ror #10
   10ff8:	andeq	r3, r2, r0, lsl #30
   10ffc:	andeq	r4, r2, r8, lsl #2
   11000:	andeq	r4, r2, r8, asr #1
   11004:	andeq	r3, r1, r8, lsl #11
   11008:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1100c:	ldrdeq	r3, [r1], -ip
   11010:	mov	fp, #0
   11014:	mov	lr, #0
   11018:	pop	{r1}		; (ldr r1, [sp], #4)
   1101c:	mov	r2, sp
   11020:	push	{r2}		; (str r2, [sp, #-4]!)
   11024:	push	{r0}		; (str r0, [sp, #-4]!)
   11028:	ldr	ip, [pc, #16]	; 11040 <__assert_fail@plt+0x174>
   1102c:	push	{ip}		; (str ip, [sp, #-4]!)
   11030:	ldr	r0, [pc, #12]	; 11044 <__assert_fail@plt+0x178>
   11034:	ldr	r3, [pc, #12]	; 11048 <__assert_fail@plt+0x17c>
   11038:	bl	10ddc <__libc_start_main@plt>
   1103c:	bl	10eb4 <abort@plt>
   11040:	andeq	r3, r1, r0, lsl #3
   11044:	ldrdeq	r0, [r1], -r8
   11048:	andeq	r3, r1, r0, lsr #2
   1104c:	ldr	r3, [pc, #20]	; 11068 <__assert_fail@plt+0x19c>
   11050:	ldr	r2, [pc, #20]	; 1106c <__assert_fail@plt+0x1a0>
   11054:	add	r3, pc, r3
   11058:	ldr	r2, [r3, r2]
   1105c:	cmp	r2, #0
   11060:	bxeq	lr
   11064:	b	10de8 <__gmon_start__@plt>
   11068:	andeq	r2, r1, r4, lsr #31
   1106c:	strheq	r0, [r0], -ip
   11070:	ldr	r0, [pc, #24]	; 11090 <__assert_fail@plt+0x1c4>
   11074:	ldr	r3, [pc, #24]	; 11094 <__assert_fail@plt+0x1c8>
   11078:	cmp	r3, r0
   1107c:	bxeq	lr
   11080:	ldr	r3, [pc, #16]	; 11098 <__assert_fail@plt+0x1cc>
   11084:	cmp	r3, #0
   11088:	bxeq	lr
   1108c:	bx	r3
   11090:	andeq	r4, r2, ip, ror #1
   11094:	andeq	r4, r2, ip, ror #1
   11098:	andeq	r0, r0, r0
   1109c:	ldr	r0, [pc, #36]	; 110c8 <__assert_fail@plt+0x1fc>
   110a0:	ldr	r1, [pc, #36]	; 110cc <__assert_fail@plt+0x200>
   110a4:	sub	r1, r1, r0
   110a8:	asr	r1, r1, #2
   110ac:	add	r1, r1, r1, lsr #31
   110b0:	asrs	r1, r1, #1
   110b4:	bxeq	lr
   110b8:	ldr	r3, [pc, #16]	; 110d0 <__assert_fail@plt+0x204>
   110bc:	cmp	r3, #0
   110c0:	bxeq	lr
   110c4:	bx	r3
   110c8:	andeq	r4, r2, ip, ror #1
   110cc:	andeq	r4, r2, ip, ror #1
   110d0:	andeq	r0, r0, r0
   110d4:	push	{r4, lr}
   110d8:	ldr	r4, [pc, #24]	; 110f8 <__assert_fail@plt+0x22c>
   110dc:	ldrb	r3, [r4]
   110e0:	cmp	r3, #0
   110e4:	popne	{r4, pc}
   110e8:	bl	11070 <__assert_fail@plt+0x1a4>
   110ec:	mov	r3, #1
   110f0:	strb	r3, [r4]
   110f4:	pop	{r4, pc}
   110f8:	andeq	r4, r2, r4, lsl #2
   110fc:	b	1109c <__assert_fail@plt+0x1d0>
   11100:	cmp	r0, #72	; 0x48
   11104:	mov	r3, r0
   11108:	beq	11124 <__assert_fail@plt+0x258>
   1110c:	cmp	r0, #111	; 0x6f
   11110:	beq	11144 <__assert_fail@plt+0x278>
   11114:	cmp	r0, #1
   11118:	beq	11134 <__assert_fail@plt+0x268>
   1111c:	mov	r0, #7
   11120:	bx	lr
   11124:	ldr	r3, [pc, #40]	; 11154 <__assert_fail@plt+0x288>
   11128:	mov	r0, #0
   1112c:	str	r1, [r3]
   11130:	bx	lr
   11134:	ldr	r2, [pc, #24]	; 11154 <__assert_fail@plt+0x288>
   11138:	mov	r0, #0
   1113c:	str	r3, [r2, #4]
   11140:	bx	lr
   11144:	ldr	r3, [pc, #8]	; 11154 <__assert_fail@plt+0x288>
   11148:	mov	r0, #0
   1114c:	str	r1, [r3, #8]
   11150:	bx	lr
   11154:	andeq	r4, r2, r8, lsl #2
   11158:	bx	lr
   1115c:	push	{r4, lr}
   11160:	mov	r4, r0
   11164:	ldr	r3, [pc, #76]	; 111b8 <__assert_fail@plt+0x2ec>
   11168:	ldr	r2, [pc, #76]	; 111bc <__assert_fail@plt+0x2f0>
   1116c:	ldr	r1, [pc, #76]	; 111c0 <__assert_fail@plt+0x2f4>
   11170:	bl	10e18 <fprintf@plt>
   11174:	mov	r2, #5
   11178:	ldr	r1, [pc, #68]	; 111c4 <__assert_fail@plt+0x2f8>
   1117c:	mov	r0, #0
   11180:	bl	10d64 <dcgettext@plt>
   11184:	ldr	r2, [pc, #60]	; 111c8 <__assert_fail@plt+0x2fc>
   11188:	mov	r1, r0
   1118c:	mov	r0, r4
   11190:	bl	10e18 <fprintf@plt>
   11194:	mov	r2, #5
   11198:	ldr	r1, [pc, #44]	; 111cc <__assert_fail@plt+0x300>
   1119c:	mov	r0, #0
   111a0:	bl	10d64 <dcgettext@plt>
   111a4:	ldr	r2, [pc, #36]	; 111d0 <__assert_fail@plt+0x304>
   111a8:	mov	r1, r0
   111ac:	mov	r0, r4
   111b0:	pop	{r4, lr}
   111b4:	b	10e18 <fprintf@plt>
   111b8:	andeq	r3, r1, ip, lsl #8
   111bc:	andeq	r3, r1, r4, lsl r4
   111c0:	andeq	r3, r1, r4, lsr r4
   111c4:	andeq	r3, r1, r4, asr #8
   111c8:	andeq	r3, r1, ip, lsl #10
   111cc:	andeq	r3, r1, r4, lsl r5
   111d0:	andeq	r3, r1, r4, lsr #10
   111d4:	push	{r4, r5, lr}
   111d8:	sub	sp, sp, #12
   111dc:	ldr	r4, [pc, #104]	; 1124c <__assert_fail@plt+0x380>
   111e0:	ldr	r2, [pc, #104]	; 11250 <__assert_fail@plt+0x384>
   111e4:	mov	r5, #0
   111e8:	ldr	r3, [r4]
   111ec:	cmp	r0, r2
   111f0:	str	r3, [sp, #4]
   111f4:	str	r5, [sp]
   111f8:	beq	11218 <__assert_fail@plt+0x34c>
   111fc:	ldr	r2, [sp, #4]
   11200:	ldr	r3, [r4]
   11204:	mov	r0, r1
   11208:	cmp	r2, r3
   1120c:	bne	11248 <__assert_fail@plt+0x37c>
   11210:	add	sp, sp, #12
   11214:	pop	{r4, r5, pc}
   11218:	mov	r2, #5
   1121c:	ldr	r1, [pc, #48]	; 11254 <__assert_fail@plt+0x388>
   11220:	mov	r0, r5
   11224:	bl	10d64 <dcgettext@plt>
   11228:	ldr	r2, [pc, #40]	; 11258 <__assert_fail@plt+0x38c>
   1122c:	mov	r1, r0
   11230:	mov	r0, sp
   11234:	bl	10e60 <asprintf@plt>
   11238:	cmp	r0, r5
   1123c:	movlt	r1, r5
   11240:	ldrge	r1, [sp]
   11244:	b	111fc <__assert_fail@plt+0x330>
   11248:	bl	10d70 <__stack_chk_fail@plt>
   1124c:	strdeq	r3, [r2], -r8
   11250:	andeq	r0, r0, #4
   11254:	andeq	r3, r1, r4, lsr r5
   11258:	andeq	r3, r1, r8, ror #10
   1125c:	push	{r4, r5, r6, r7, r8, lr}
   11260:	mov	r5, r1
   11264:	ldr	r6, [pc, #344]	; 113c4 <__assert_fail@plt+0x4f8>
   11268:	sub	sp, sp, #40	; 0x28
   1126c:	subs	r4, r0, #0
   11270:	ldr	r1, [r6]
   11274:	mov	r8, r2
   11278:	mov	r7, r3
   1127c:	str	r1, [sp, #36]	; 0x24
   11280:	beq	11398 <__assert_fail@plt+0x4cc>
   11284:	mov	r1, r4
   11288:	ldr	r0, [pc, #312]	; 113c8 <__assert_fail@plt+0x4fc>
   1128c:	bl	10dd0 <iconv_open@plt>
   11290:	ldr	r1, [pc, #304]	; 113c8 <__assert_fail@plt+0x4fc>
   11294:	str	r0, [r5]
   11298:	mov	r0, r4
   1129c:	bl	10dd0 <iconv_open@plt>
   112a0:	str	r0, [r8]
   112a4:	ldr	r3, [r5]
   112a8:	cmn	r3, #1
   112ac:	cmnne	r0, #1
   112b0:	moveq	r4, #1
   112b4:	movne	r4, #0
   112b8:	beq	1135c <__assert_fail@plt+0x490>
   112bc:	add	r2, sp, #20
   112c0:	mov	ip, #8
   112c4:	mov	r0, r3
   112c8:	str	r2, [sp]
   112cc:	add	r3, sp, #32
   112d0:	mov	r2, #2
   112d4:	add	r1, sp, #24
   112d8:	str	r3, [sp, #8]
   112dc:	str	r2, [sp, #12]
   112e0:	add	r3, sp, #16
   112e4:	str	r1, [sp, #16]
   112e8:	mov	r5, #92	; 0x5c
   112ec:	add	r2, sp, #12
   112f0:	add	r1, sp, ip
   112f4:	strh	r5, [sp, #32]
   112f8:	str	ip, [sp, #20]
   112fc:	bl	10cf8 <iconv@plt>
   11300:	ldr	r0, [sp, #12]
   11304:	ldr	r3, [sp, #20]
   11308:	orrs	r0, r0, r3
   1130c:	beq	11350 <__assert_fail@plt+0x484>
   11310:	mov	r2, #5
   11314:	ldr	r1, [pc, #176]	; 113cc <__assert_fail@plt+0x500>
   11318:	mov	r0, r4
   1131c:	bl	10d64 <dcgettext@plt>
   11320:	mov	r1, r4
   11324:	mov	r2, r0
   11328:	mov	r0, r4
   1132c:	bl	10dac <error@plt>
   11330:	mov	r0, r4
   11334:	str	r5, [r7]
   11338:	ldr	r2, [sp, #36]	; 0x24
   1133c:	ldr	r3, [r6]
   11340:	cmp	r2, r3
   11344:	bne	113c0 <__assert_fail@plt+0x4f4>
   11348:	add	sp, sp, #40	; 0x28
   1134c:	pop	{r4, r5, r6, r7, r8, pc}
   11350:	ldr	r3, [sp, #24]
   11354:	str	r3, [r7]
   11358:	b	11338 <__assert_fail@plt+0x46c>
   1135c:	mov	r2, #5
   11360:	ldr	r1, [pc, #104]	; 113d0 <__assert_fail@plt+0x504>
   11364:	mov	r0, #0
   11368:	bl	10d64 <dcgettext@plt>
   1136c:	mov	r1, #0
   11370:	mov	r2, r0
   11374:	mov	r0, r1
   11378:	bl	10dac <error@plt>
   1137c:	ldr	r0, [r5]
   11380:	cmn	r0, #1
   11384:	moveq	r0, #1
   11388:	beq	11338 <__assert_fail@plt+0x46c>
   1138c:	bl	10cec <iconv_close@plt>
   11390:	mov	r0, #1
   11394:	b	11338 <__assert_fail@plt+0x46c>
   11398:	ldr	r1, [pc, #52]	; 113d4 <__assert_fail@plt+0x508>
   1139c:	mov	r0, #6
   113a0:	bl	10e78 <setlocale@plt>
   113a4:	mov	r0, #14
   113a8:	bl	10e90 <nl_langinfo@plt>
   113ac:	ldr	r1, [pc, #36]	; 113d8 <__assert_fail@plt+0x50c>
   113b0:	mov	r4, r0
   113b4:	mov	r0, #6
   113b8:	bl	10e78 <setlocale@plt>
   113bc:	b	11284 <__assert_fail@plt+0x3b8>
   113c0:	bl	10d70 <__stack_chk_fail@plt>
   113c4:	strdeq	r3, [r2], -r8
   113c8:	andeq	r3, r1, ip, lsl #11
   113cc:			; <UNDEFINED> instruction: 0x000135b8
   113d0:	muleq	r1, r4, r5
   113d4:	andeq	r3, r1, r4, ror #10
   113d8:	andeq	r3, r1, r8, lsl #11
   113dc:	push	{r4, r5, r6, lr}
   113e0:	mov	r5, r0
   113e4:	ldr	r0, [r0]
   113e8:	add	r4, r1, #1
   113ec:	cmp	r0, #0
   113f0:	beq	1140c <__assert_fail@plt+0x540>
   113f4:	ldr	r3, [r0]
   113f8:	cmp	r4, r3
   113fc:	popeq	{r4, r5, r6, pc}
   11400:	ldr	r0, [r0, #28]
   11404:	cmp	r0, #0
   11408:	bne	113f4 <__assert_fail@plt+0x528>
   1140c:	mov	r1, #32
   11410:	mov	r0, #1
   11414:	bl	130cc <__assert_fail@plt+0x2200>
   11418:	ldr	r3, [r5]
   1141c:	str	r4, [r0]
   11420:	str	r3, [r0, #28]
   11424:	str	r0, [r5]
   11428:	pop	{r4, r5, r6, pc}
   1142c:	ldr	r3, [pc, #4052]	; 12408 <__assert_fail@plt+0x153c>
   11430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11434:	sub	sp, sp, #132	; 0x84
   11438:	ldr	r2, [r3]
   1143c:	str	r1, [sp, #16]
   11440:	mvn	r3, #0
   11444:	str	r2, [sp, #124]	; 0x7c
   11448:	mov	r4, r1
   1144c:	mov	r2, #92	; 0x5c
   11450:	mov	fp, r0
   11454:	mov	r0, r1
   11458:	ldr	r1, [pc, #4012]	; 1240c <__assert_fail@plt+0x1540>
   1145c:	str	r3, [sp, #68]	; 0x44
   11460:	str	r3, [sp, #72]	; 0x48
   11464:	str	r2, [sp, #76]	; 0x4c
   11468:	bl	10d04 <strcmp@plt>
   1146c:	cmp	r0, #0
   11470:	beq	11488 <__assert_fail@plt+0x5bc>
   11474:	ldr	r1, [pc, #3988]	; 12410 <__assert_fail@plt+0x1544>
   11478:	mov	r0, r4
   1147c:	bl	10d04 <strcmp@plt>
   11480:	cmp	r0, #0
   11484:	bne	125b8 <__assert_fail@plt+0x16ec>
   11488:	ldr	r3, [pc, #3972]	; 12414 <__assert_fail@plt+0x1548>
   1148c:	mov	r2, #5
   11490:	ldr	r1, [pc, #3968]	; 12418 <__assert_fail@plt+0x154c>
   11494:	mov	r0, #0
   11498:	ldr	r8, [r3]
   1149c:	bl	10d64 <dcgettext@plt>
   114a0:	str	r0, [sp, #16]
   114a4:	cmp	r8, #0
   114a8:	beq	12778 <__assert_fail@plt+0x18ac>
   114ac:	cmp	fp, #0
   114b0:	beq	127a8 <__assert_fail@plt+0x18dc>
   114b4:	mov	r3, #0
   114b8:	mov	r0, #1024	; 0x400
   114bc:	mov	sl, r3
   114c0:	str	r3, [sp, #28]
   114c4:	str	r3, [sp, #60]	; 0x3c
   114c8:	str	r3, [sp, #64]	; 0x40
   114cc:	bl	130ac <__assert_fail@plt+0x21e0>
   114d0:	mov	r3, #1024	; 0x400
   114d4:	str	r3, [sp, #40]	; 0x28
   114d8:	str	r0, [sp, #20]
   114dc:	mov	r0, r8
   114e0:	bl	10e00 <feof@plt>
   114e4:	subs	r3, r0, #0
   114e8:	str	r3, [sp, #12]
   114ec:	bne	1227c <__assert_fail@plt+0x13b0>
   114f0:	add	r4, fp, #20
   114f4:	add	r3, sl, #1
   114f8:	str	r3, [sp, #8]
   114fc:	mov	r3, r8
   11500:	mov	r2, #10
   11504:	add	r1, sp, #64	; 0x40
   11508:	add	r0, sp, #60	; 0x3c
   1150c:	bl	10ce0 <__getdelim@plt>
   11510:	cmp	r0, #0
   11514:	ble	11784 <__assert_fail@plt+0x8b8>
   11518:	ldr	r1, [sp, #60]	; 0x3c
   1151c:	add	sl, sl, #1
   11520:	add	r3, r1, r0
   11524:	mov	r5, r0
   11528:	ldrb	r3, [r3, #-1]
   1152c:	cmp	r3, #10
   11530:	bne	115a8 <__assert_fail@plt+0x6dc>
   11534:	subs	r5, r0, #1
   11538:	beq	115ec <__assert_fail@plt+0x720>
   1153c:	sub	r7, r0, #2
   11540:	add	r3, r1, r7
   11544:	ldrb	r2, [r1, r7]
   11548:	cmp	r2, #92	; 0x5c
   1154c:	bne	1177c <__assert_fail@plt+0x8b0>
   11550:	mov	r6, #0
   11554:	b	11568 <__assert_fail@plt+0x69c>
   11558:	ldrb	r0, [r3, #-1]!
   1155c:	cmp	r0, #92	; 0x5c
   11560:	bne	11574 <__assert_fail@plt+0x6a8>
   11564:	mov	r6, r2
   11568:	cmp	r1, r3
   1156c:	eor	r2, r6, #1
   11570:	bne	11558 <__assert_fail@plt+0x68c>
   11574:	cmp	r6, #0
   11578:	ldr	r3, [fp, #36]	; 0x24
   1157c:	ldr	r0, [fp, #32]
   11580:	bne	115f4 <__assert_fail@plt+0x728>
   11584:	add	r2, r0, r7
   11588:	cmp	r3, r2
   1158c:	bcc	12828 <__assert_fail@plt+0x195c>
   11590:	mov	r2, r7
   11594:	bl	10d40 <memcpy@plt>
   11598:	ldr	r6, [fp, #32]
   1159c:	add	r6, r6, r7
   115a0:	str	r6, [fp, #32]
   115a4:	b	114fc <__assert_fail@plt+0x630>
   115a8:	mov	r6, r0
   115ac:	ldr	r0, [fp, #32]
   115b0:	ldr	r2, [fp, #36]	; 0x24
   115b4:	add	r3, r0, r5
   115b8:	cmp	r2, r3
   115bc:	bcs	11600 <__assert_fail@plt+0x734>
   115c0:	mov	r1, r6
   115c4:	mov	r0, r4
   115c8:	bl	10d58 <_obstack_newchunk@plt>
   115cc:	mov	r2, r5
   115d0:	ldr	r1, [sp, #60]	; 0x3c
   115d4:	ldr	r0, [fp, #32]
   115d8:	bl	10d40 <memcpy@plt>
   115dc:	ldr	r3, [fp, #32]
   115e0:	add	r5, r3, r5
   115e4:	str	r5, [fp, #32]
   115e8:	b	11614 <__assert_fail@plt+0x748>
   115ec:	mov	r6, r5
   115f0:	b	115ac <__assert_fail@plt+0x6e0>
   115f4:	add	r2, r0, r5
   115f8:	cmp	r3, r2
   115fc:	bcc	11748 <__assert_fail@plt+0x87c>
   11600:	mov	r2, r5
   11604:	bl	10d40 <memcpy@plt>
   11608:	ldr	r3, [fp, #32]
   1160c:	add	r5, r3, r5
   11610:	str	r5, [fp, #32]
   11614:	ldr	r2, [fp, #36]	; 0x24
   11618:	add	r3, r5, #1
   1161c:	cmp	r3, r2
   11620:	bhi	11798 <__assert_fail@plt+0x8cc>
   11624:	mov	r2, #0
   11628:	str	r3, [fp, #32]
   1162c:	strb	r2, [r5]
   11630:	ldr	r3, [fp, #32]
   11634:	ldr	r9, [fp, #28]
   11638:	ldr	r1, [fp, #44]	; 0x2c
   1163c:	cmp	r3, r9
   11640:	add	r3, r3, r1
   11644:	ldrbeq	r2, [fp, #60]	; 0x3c
   11648:	bic	r3, r3, r1
   1164c:	str	r3, [fp, #32]
   11650:	orreq	r2, r2, #2
   11654:	strbeq	r2, [fp, #60]	; 0x3c
   11658:	ldr	r2, [fp, #36]	; 0x24
   1165c:	cmp	r3, r2
   11660:	movhi	r3, r2
   11664:	strhi	r2, [fp, #32]
   11668:	str	r3, [fp, #28]
   1166c:	bl	10df4 <__ctype_b_loc@plt>
   11670:	ldrb	r7, [r9]
   11674:	cmp	r7, #36	; 0x24
   11678:	ldr	r6, [r0]
   1167c:	beq	117b0 <__assert_fail@plt+0x8e4>
   11680:	lsl	r3, r7, #1
   11684:	ldrh	r1, [r6, r3]
   11688:	lsr	r3, r1, #3
   1168c:	cmp	r7, #95	; 0x5f
   11690:	orreq	r3, r3, #1
   11694:	tst	r3, #1
   11698:	movne	r2, r9
   1169c:	bne	116ec <__assert_fail@plt+0x820>
   116a0:	cmp	r7, #0
   116a4:	beq	11718 <__assert_fail@plt+0x84c>
   116a8:	tst	r1, #8192	; 0x2000
   116ac:	movne	r2, r9
   116b0:	bne	116c8 <__assert_fail@plt+0x7fc>
   116b4:	b	119f8 <__assert_fail@plt+0xb2c>
   116b8:	lsl	r3, r3, #1
   116bc:	ldrh	r3, [r6, r3]
   116c0:	tst	r3, #8192	; 0x2000
   116c4:	beq	119f8 <__assert_fail@plt+0xb2c>
   116c8:	ldrb	r3, [r2, #1]!
   116cc:	cmp	r3, #0
   116d0:	bne	116b8 <__assert_fail@plt+0x7ec>
   116d4:	b	11718 <__assert_fail@plt+0x84c>
   116d8:	lsl	r3, r3, #1
   116dc:	ldrh	r3, [r6, r3]
   116e0:	tst	r3, #8192	; 0x2000
   116e4:	bne	11954 <__assert_fail@plt+0xa88>
   116e8:	mov	r2, r5
   116ec:	ldrb	r3, [r2, #1]
   116f0:	add	r5, r2, #1
   116f4:	cmp	r3, #0
   116f8:	bne	116d8 <__assert_fail@plt+0x80c>
   116fc:	tst	r1, #2048	; 0x800
   11700:	bne	11978 <__assert_fail@plt+0xaac>
   11704:	cmp	r7, #0
   11708:	bne	11a24 <__assert_fail@plt+0xb58>
   1170c:	ldr	r3, [fp, #8]
   11710:	add	r3, r3, #1
   11714:	str	r3, [fp, #8]
   11718:	ldr	r3, [fp, #24]
   1171c:	cmp	r3, r9
   11720:	bcs	11738 <__assert_fail@plt+0x86c>
   11724:	ldr	r3, [fp, #36]	; 0x24
   11728:	cmp	r3, r9
   1172c:	strhi	r9, [fp, #28]
   11730:	strhi	r9, [fp, #32]
   11734:	bhi	114dc <__assert_fail@plt+0x610>
   11738:	mov	r1, r9
   1173c:	mov	r0, r4
   11740:	bl	10d7c <obstack_free@plt>
   11744:	b	114dc <__assert_fail@plt+0x610>
   11748:	mov	r1, r5
   1174c:	mov	r0, r4
   11750:	bl	10d58 <_obstack_newchunk@plt>
   11754:	mov	r2, r5
   11758:	ldr	r1, [sp, #60]	; 0x3c
   1175c:	ldr	r0, [fp, #32]
   11760:	bl	10d40 <memcpy@plt>
   11764:	ldr	r3, [fp, #32]
   11768:	cmp	r6, #1
   1176c:	add	r5, r3, r5
   11770:	str	r5, [fp, #32]
   11774:	bne	114fc <__assert_fail@plt+0x630>
   11778:	b	11614 <__assert_fail@plt+0x748>
   1177c:	mov	r6, r5
   11780:	b	115ac <__assert_fail@plt+0x6e0>
   11784:	ldr	r5, [fp, #32]
   11788:	ldr	r2, [fp, #36]	; 0x24
   1178c:	add	r3, r5, #1
   11790:	cmp	r3, r2
   11794:	bls	11624 <__assert_fail@plt+0x758>
   11798:	mov	r1, #1
   1179c:	mov	r0, r4
   117a0:	bl	10d58 <_obstack_newchunk@plt>
   117a4:	ldr	r5, [fp, #32]
   117a8:	add	r3, r5, #1
   117ac:	b	11624 <__assert_fail@plt+0x758>
   117b0:	ldrb	r3, [r9, #1]
   117b4:	lsl	r3, r3, #1
   117b8:	ldrh	r3, [r6, r3]
   117bc:	tst	r3, #1
   117c0:	addne	r2, r9, #2
   117c4:	movne	r5, #1
   117c8:	bne	1189c <__assert_fail@plt+0x9d0>
   117cc:	add	r5, r9, #1
   117d0:	mov	r0, r5
   117d4:	mov	r2, #3
   117d8:	ldr	r1, [pc, #3132]	; 1241c <__assert_fail@plt+0x1550>
   117dc:	bl	10ea8 <strncmp@plt>
   117e0:	cmp	r0, #0
   117e4:	beq	11dcc <__assert_fail@plt+0xf00>
   117e8:	mov	r2, #6
   117ec:	ldr	r1, [pc, #3116]	; 12420 <__assert_fail@plt+0x1554>
   117f0:	mov	r0, r5
   117f4:	bl	10ea8 <strncmp@plt>
   117f8:	cmp	r0, #0
   117fc:	beq	1206c <__assert_fail@plt+0x11a0>
   11800:	mov	r2, #5
   11804:	ldr	r1, [pc, #3096]	; 12424 <__assert_fail@plt+0x1558>
   11808:	mov	r0, r5
   1180c:	bl	10ea8 <strncmp@plt>
   11810:	cmp	r0, #0
   11814:	beq	11e60 <__assert_fail@plt+0xf94>
   11818:	ldrb	r3, [r9, #2]
   1181c:	add	r1, r9, #2
   11820:	cmp	r3, #0
   11824:	beq	11860 <__assert_fail@plt+0x994>
   11828:	lsl	r3, r3, #1
   1182c:	ldrh	r3, [r6, r3]
   11830:	tst	r3, #8192	; 0x2000
   11834:	addeq	r2, r9, #3
   11838:	beq	11850 <__assert_fail@plt+0x984>
   1183c:	b	11860 <__assert_fail@plt+0x994>
   11840:	lsl	r3, r3, #1
   11844:	ldrh	r3, [r6, r3]
   11848:	tst	r3, #8192	; 0x2000
   1184c:	bne	11860 <__assert_fail@plt+0x994>
   11850:	mov	r1, r2
   11854:	ldrb	r3, [r2], #1
   11858:	cmp	r3, #0
   1185c:	bne	11840 <__assert_fail@plt+0x974>
   11860:	mov	r6, #0
   11864:	strb	r6, [r1]
   11868:	mov	r0, r6
   1186c:	mov	r2, #5
   11870:	ldr	r1, [pc, #2992]	; 12428 <__assert_fail@plt+0x155c>
   11874:	bl	10d64 <dcgettext@plt>
   11878:	str	r5, [sp, #4]
   1187c:	ldr	r3, [sp, #8]
   11880:	mov	r1, r6
   11884:	ldr	r2, [sp, #16]
   11888:	str	r0, [sp]
   1188c:	mov	r0, r6
   11890:	bl	10dc4 <error_at_line@plt>
   11894:	b	11718 <__assert_fail@plt+0x84c>
   11898:	mov	r5, r1
   1189c:	mov	r0, r2
   118a0:	add	r1, r5, #1
   118a4:	ldrb	r3, [r0]
   118a8:	add	r2, r2, #1
   118ac:	lsl	r3, r3, #1
   118b0:	ldrh	r3, [r6, r3]
   118b4:	tst	r3, #1
   118b8:	bne	11898 <__assert_fail@plt+0x9cc>
   118bc:	mov	r2, #8
   118c0:	ldr	r1, [pc, #2916]	; 1242c <__assert_fail@plt+0x1560>
   118c4:	bl	10ea8 <strncmp@plt>
   118c8:	ldr	r3, [sp, #28]
   118cc:	orrs	r0, r3, r0
   118d0:	bne	11718 <__assert_fail@plt+0x84c>
   118d4:	add	r5, r5, #9
   118d8:	add	r7, r9, r5
   118dc:	ldrb	r3, [r9, r5]
   118e0:	cmp	r3, #0
   118e4:	beq	126f8 <__assert_fail@plt+0x182c>
   118e8:	lsl	r3, r3, #1
   118ec:	ldrh	r3, [r6, r3]
   118f0:	tst	r3, #8192	; 0x2000
   118f4:	bne	12854 <__assert_fail@plt+0x1988>
   118f8:	mov	r1, r7
   118fc:	rsb	r0, r9, #1
   11900:	b	11914 <__assert_fail@plt+0xa48>
   11904:	lsl	r3, r3, #1
   11908:	ldrh	r3, [r6, r3]
   1190c:	tst	r3, #8192	; 0x2000
   11910:	bne	11924 <__assert_fail@plt+0xa58>
   11914:	add	r2, r0, r1
   11918:	ldrb	r3, [r1, #1]!
   1191c:	cmp	r3, #0
   11920:	bne	11904 <__assert_fail@plt+0xa38>
   11924:	cmp	r5, r2
   11928:	beq	126f4 <__assert_fail@plt+0x1828>
   1192c:	sub	r5, r2, r5
   11930:	add	r0, r5, #1
   11934:	bl	130ac <__assert_fail@plt+0x21e0>
   11938:	mov	r2, r5
   1193c:	mov	r1, r7
   11940:	str	r0, [sp, #28]
   11944:	bl	10d4c <__mempcpy@plt>
   11948:	mov	r3, #0
   1194c:	strb	r3, [r0]
   11950:	b	11718 <__assert_fail@plt+0x84c>
   11954:	mov	r3, #0
   11958:	strb	r3, [r5]
   1195c:	ldrb	r7, [r9]
   11960:	ldr	r1, [r0]
   11964:	add	r5, r2, #2
   11968:	lsl	r3, r7, #1
   1196c:	ldrh	r1, [r1, r3]
   11970:	tst	r1, #2048	; 0x800
   11974:	beq	11704 <__assert_fail@plt+0x838>
   11978:	mov	r1, #0
   1197c:	mov	r2, #10
   11980:	mov	r0, r9
   11984:	bl	10d10 <strtol@plt>
   11988:	ldr	r1, [fp, #4]
   1198c:	ldr	r3, [r1, #8]
   11990:	cmp	r3, #0
   11994:	str	r0, [sp, #36]	; 0x24
   11998:	beq	119cc <__assert_fail@plt+0xb00>
   1199c:	ldr	r2, [r3]
   119a0:	cmp	r0, r2
   119a4:	ldrne	r0, [sp, #36]	; 0x24
   119a8:	bne	119c0 <__assert_fail@plt+0xaf4>
   119ac:	b	12130 <__assert_fail@plt+0x1264>
   119b0:	ldr	r2, [r6]
   119b4:	cmp	r2, r0
   119b8:	beq	12138 <__assert_fail@plt+0x126c>
   119bc:	mov	r3, r6
   119c0:	ldr	r6, [r3, #20]
   119c4:	cmp	r6, #0
   119c8:	bne	119b0 <__assert_fail@plt+0xae4>
   119cc:	ldr	r2, [sp, #36]	; 0x24
   119d0:	cmp	r2, #0
   119d4:	beq	1170c <__assert_fail@plt+0x840>
   119d8:	ldr	r3, [r1, #12]
   119dc:	cmp	r3, r2
   119e0:	movge	r3, #0
   119e4:	strge	r3, [sp, #44]	; 0x2c
   119e8:	movlt	r3, #0
   119ec:	strlt	r2, [r1, #12]
   119f0:	strlt	r3, [sp, #44]	; 0x2c
   119f4:	b	11a80 <__assert_fail@plt+0xbb4>
   119f8:	ldr	r1, [pc, #2608]	; 12430 <__assert_fail@plt+0x1564>
   119fc:	mov	r2, #5
   11a00:	mov	r0, #0
   11a04:	bl	10d64 <dcgettext@plt>
   11a08:	mov	r1, #0
   11a0c:	ldr	r3, [sp, #8]
   11a10:	ldr	r2, [sp, #16]
   11a14:	str	r0, [sp]
   11a18:	mov	r0, r1
   11a1c:	bl	10dc4 <error_at_line@plt>
   11a20:	b	11718 <__assert_fail@plt+0x84c>
   11a24:	ldr	r3, [fp, #4]
   11a28:	str	r3, [sp, #24]
   11a2c:	ldr	r6, [r3, #8]
   11a30:	cmp	r6, #0
   11a34:	beq	11a60 <__assert_fail@plt+0xb94>
   11a38:	ldr	r1, [r6, #16]
   11a3c:	cmp	r1, #0
   11a40:	beq	11a54 <__assert_fail@plt+0xb88>
   11a44:	mov	r0, r9
   11a48:	bl	10d04 <strcmp@plt>
   11a4c:	subs	r7, r0, #0
   11a50:	beq	120d8 <__assert_fail@plt+0x120c>
   11a54:	ldr	r6, [r6, #20]
   11a58:	cmp	r6, #0
   11a5c:	bne	11a38 <__assert_fail@plt+0xb6c>
   11a60:	ldr	r2, [sp, #24]
   11a64:	ldr	r3, [r2, #12]
   11a68:	add	r3, r3, #1
   11a6c:	cmp	r3, #0
   11a70:	str	r3, [sp, #36]	; 0x24
   11a74:	str	r3, [r2, #12]
   11a78:	strne	r9, [sp, #44]	; 0x2c
   11a7c:	beq	1170c <__assert_fail@plt+0x840>
   11a80:	mov	r0, r5
   11a84:	bl	10e0c <strlen@plt>
   11a88:	ldr	r2, [sp, #68]	; 0x44
   11a8c:	cmn	r2, #1
   11a90:	add	r7, r0, #1
   11a94:	beq	126a0 <__assert_fail@plt+0x17d4>
   11a98:	str	r9, [sp, #24]
   11a9c:	str	r8, [sp, #32]
   11aa0:	mov	r6, #0
   11aa4:	mov	r0, r2
   11aa8:	ldr	r9, [sp, #20]
   11aac:	ldr	r8, [sp, #40]	; 0x28
   11ab0:	b	11ad8 <__assert_fail@plt+0xc0c>
   11ab4:	ldr	r3, [sp, #92]	; 0x5c
   11ab8:	cmp	r3, #0
   11abc:	bne	12260 <__assert_fail@plt+0x1394>
   11ac0:	lsl	r8, r8, #1
   11ac4:	mov	r0, r9
   11ac8:	mov	r1, r8
   11acc:	bl	130ec <__assert_fail@plt+0x2220>
   11ad0:	mov	r9, r0
   11ad4:	ldr	r0, [sp, #68]	; 0x44
   11ad8:	mov	r3, #0
   11adc:	mov	r2, r3
   11ae0:	mov	r1, r3
   11ae4:	str	r6, [sp]
   11ae8:	str	r5, [sp, #80]	; 0x50
   11aec:	str	r7, [sp, #84]	; 0x54
   11af0:	str	r9, [sp, #88]	; 0x58
   11af4:	str	r8, [sp, #92]	; 0x5c
   11af8:	bl	10cf8 <iconv@plt>
   11afc:	add	r3, sp, #92	; 0x5c
   11b00:	str	r3, [sp]
   11b04:	add	r2, sp, #84	; 0x54
   11b08:	add	r3, sp, #88	; 0x58
   11b0c:	add	r1, sp, #80	; 0x50
   11b10:	ldr	r0, [sp, #68]	; 0x44
   11b14:	bl	10cf8 <iconv@plt>
   11b18:	ldr	r3, [sp, #84]	; 0x54
   11b1c:	cmp	r3, #0
   11b20:	bne	11ab4 <__assert_fail@plt+0xbe8>
   11b24:	ldr	r3, [sp, #92]	; 0x5c
   11b28:	mov	r2, r8
   11b2c:	cmp	r3, r2
   11b30:	str	r9, [sp, #20]
   11b34:	str	r8, [sp, #40]	; 0x28
   11b38:	ldr	r9, [sp, #24]
   11b3c:	ldr	r8, [sp, #32]
   11b40:	bcs	12814 <__assert_fail@plt+0x1948>
   11b44:	ldr	r2, [sp, #40]	; 0x28
   11b48:	sub	r3, r2, r3
   11b4c:	ldr	r2, [sp, #20]
   11b50:	bic	r3, r3, #3
   11b54:	add	r3, r2, r3
   11b58:	ldr	r3, [r3, #-4]
   11b5c:	cmp	r3, #0
   11b60:	str	r3, [sp, #48]	; 0x30
   11b64:	bne	12800 <__assert_fail@plt+0x1934>
   11b68:	ldr	r2, [sp, #68]	; 0x44
   11b6c:	ldr	r3, [fp, #12]
   11b70:	str	r2, [sp, #52]	; 0x34
   11b74:	ldr	r2, [sp, #76]	; 0x4c
   11b78:	cmp	r3, #0
   11b7c:	str	r2, [sp, #32]
   11b80:	ldr	r2, [sp, #20]
   11b84:	str	r3, [sp, #24]
   11b88:	ldr	r7, [r2]
   11b8c:	bne	123c0 <__assert_fail@plt+0x14f4>
   11b90:	ldr	r6, [sp, #20]
   11b94:	ldr	r2, [sp, #20]
   11b98:	mov	r3, r7
   11b9c:	mov	r7, r4
   11ba0:	mov	r4, r2
   11ba4:	cmp	r3, #0
   11ba8:	beq	11bdc <__assert_fail@plt+0xd10>
   11bac:	ldr	r2, [sp, #24]
   11bb0:	cmp	r2, r3
   11bb4:	beq	12614 <__assert_fail@plt+0x1748>
   11bb8:	ldr	r2, [sp, #32]
   11bbc:	cmp	r2, r3
   11bc0:	add	r2, r6, #4
   11bc4:	beq	11f28 <__assert_fail@plt+0x105c>
   11bc8:	str	r3, [r4], #4
   11bcc:	ldr	r3, [r6, #4]
   11bd0:	mov	r6, r2
   11bd4:	cmp	r3, #0
   11bd8:	bne	11bac <__assert_fail@plt+0xce0>
   11bdc:	mov	r6, r4
   11be0:	mov	r4, r7
   11be4:	mov	r7, r3
   11be8:	ldr	r3, [sp, #24]
   11bec:	ldr	r2, [sp, #12]
   11bf0:	cmp	r3, #0
   11bf4:	andne	r3, r2, #1
   11bf8:	moveq	r3, #0
   11bfc:	cmp	r3, #0
   11c00:	bne	125cc <__assert_fail@plt+0x1700>
   11c04:	ldr	r3, [sp, #44]	; 0x2c
   11c08:	cmp	r3, #0
   11c0c:	mov	r3, #0
   11c10:	str	r3, [r6]
   11c14:	subne	r3, r5, r9
   11c18:	strne	r3, [sp, #48]	; 0x30
   11c1c:	ldr	r3, [fp, #24]
   11c20:	cmp	r3, r9
   11c24:	bcs	11c34 <__assert_fail@plt+0xd68>
   11c28:	ldr	r7, [fp, #36]	; 0x24
   11c2c:	cmp	r7, r9
   11c30:	bhi	123f0 <__assert_fail@plt+0x1524>
   11c34:	mov	r1, r9
   11c38:	mov	r0, r4
   11c3c:	bl	10d7c <obstack_free@plt>
   11c40:	ldr	r7, [fp, #36]	; 0x24
   11c44:	ldr	r9, [fp, #32]
   11c48:	ldr	r6, [fp, #28]
   11c4c:	ldr	r3, [sp, #20]
   11c50:	mov	r5, #0
   11c54:	mov	r0, r3
   11c58:	str	r3, [sp, #80]	; 0x50
   11c5c:	bl	10e84 <wcslen@plt>
   11c60:	ldr	r3, [sp, #48]	; 0x30
   11c64:	sub	r1, r7, r9
   11c68:	sub	r1, r1, r3
   11c6c:	str	r7, [fp, #32]
   11c70:	add	r6, r6, r3
   11c74:	mov	r2, r5
   11c78:	mov	r3, r5
   11c7c:	str	r1, [sp, #92]	; 0x5c
   11c80:	str	r5, [sp]
   11c84:	mov	r1, r5
   11c88:	str	r6, [sp, #88]	; 0x58
   11c8c:	add	ip, r0, #1
   11c90:	ldr	r0, [sp, #72]	; 0x48
   11c94:	lsl	ip, ip, #2
   11c98:	str	ip, [sp, #84]	; 0x54
   11c9c:	bl	10cf8 <iconv@plt>
   11ca0:	add	r3, sp, #92	; 0x5c
   11ca4:	str	r3, [sp]
   11ca8:	add	r2, sp, #84	; 0x54
   11cac:	add	r3, sp, #88	; 0x58
   11cb0:	add	r1, sp, #80	; 0x50
   11cb4:	ldr	r0, [sp, #72]	; 0x48
   11cb8:	bl	10cf8 <iconv@plt>
   11cbc:	ldr	r3, [sp, #84]	; 0x54
   11cc0:	cmp	r3, r5
   11cc4:	bne	1271c <__assert_fail@plt+0x1850>
   11cc8:	ldr	r3, [sp, #88]	; 0x58
   11ccc:	ldrb	r3, [r3, #-1]
   11cd0:	cmp	r3, #0
   11cd4:	bne	127ec <__assert_fail@plt+0x1920>
   11cd8:	ldr	r5, [sp, #92]	; 0x5c
   11cdc:	ldr	r2, [fp, #36]	; 0x24
   11ce0:	ldr	r3, [fp, #32]
   11ce4:	rsb	r5, r5, #0
   11ce8:	sub	r1, r2, r3
   11cec:	cmp	r1, r5
   11cf0:	blt	126dc <__assert_fail@plt+0x1810>
   11cf4:	ldr	r4, [fp, #28]
   11cf8:	add	r3, r3, r5
   11cfc:	cmp	r3, r4
   11d00:	str	r3, [fp, #32]
   11d04:	ldrbeq	r1, [fp, #60]	; 0x3c
   11d08:	mov	r0, #24
   11d0c:	orreq	r1, r1, #2
   11d10:	strbeq	r1, [fp, #60]	; 0x3c
   11d14:	ldr	r1, [fp, #44]	; 0x2c
   11d18:	add	r3, r3, r1
   11d1c:	bic	r3, r3, r1
   11d20:	cmp	r3, r2
   11d24:	movls	r2, r3
   11d28:	strls	r3, [fp, #32]
   11d2c:	strhi	r2, [fp, #32]
   11d30:	str	r2, [fp, #28]
   11d34:	bl	130ac <__assert_fail@plt+0x21e0>
   11d38:	ldr	r3, [sp, #44]	; 0x2c
   11d3c:	ldr	r1, [fp, #4]
   11d40:	cmp	r3, #0
   11d44:	ldr	r3, [sp, #48]	; 0x30
   11d48:	ldr	r2, [r1, #8]
   11d4c:	add	r3, r4, r3
   11d50:	ldr	ip, [sp, #36]	; 0x24
   11d54:	moveq	r4, #0
   11d58:	cmp	r2, #0
   11d5c:	str	r3, [r0, #4]
   11d60:	ldr	r3, [sp, #16]
   11d64:	str	r4, [r0, #16]
   11d68:	str	r3, [r0, #8]
   11d6c:	ldr	r3, [sp, #8]
   11d70:	str	ip, [r0]
   11d74:	str	r3, [r0, #12]
   11d78:	beq	11d88 <__assert_fail@plt+0xebc>
   11d7c:	ldr	r3, [r2]
   11d80:	cmp	r3, ip
   11d84:	ble	11db4 <__assert_fail@plt+0xee8>
   11d88:	str	r2, [r0, #20]
   11d8c:	str	r0, [r1, #8]
   11d90:	ldr	r3, [fp, #8]
   11d94:	add	r3, r3, #1
   11d98:	str	r3, [fp, #8]
   11d9c:	b	114dc <__assert_fail@plt+0x610>
   11da0:	ldr	r1, [r3]
   11da4:	ldr	ip, [sp, #36]	; 0x24
   11da8:	cmp	r1, ip
   11dac:	bgt	11dc0 <__assert_fail@plt+0xef4>
   11db0:	mov	r2, r3
   11db4:	ldr	r3, [r2, #20]
   11db8:	cmp	r3, #0
   11dbc:	bne	11da0 <__assert_fail@plt+0xed4>
   11dc0:	str	r3, [r0, #20]
   11dc4:	str	r0, [r2, #20]
   11dc8:	b	11d90 <__assert_fail@plt+0xec4>
   11dcc:	ldrb	r3, [r9, #4]
   11dd0:	lsl	r3, r3, #1
   11dd4:	ldrh	r3, [r6, r3]
   11dd8:	tst	r3, #8192	; 0x2000
   11ddc:	beq	126c4 <__assert_fail@plt+0x17f8>
   11de0:	add	r2, r9, #5
   11de4:	mov	r0, #4
   11de8:	ldrb	r3, [r2]
   11dec:	mov	r5, r2
   11df0:	add	r0, r0, #1
   11df4:	add	r2, r2, #1
   11df8:	lsl	r3, r3, #1
   11dfc:	ldrh	r3, [r6, r3]
   11e00:	tst	r3, #8192	; 0x2000
   11e04:	bne	11de8 <__assert_fail@plt+0xf1c>
   11e08:	tst	r3, #2048	; 0x800
   11e0c:	beq	12190 <__assert_fail@plt+0x12c4>
   11e10:	mov	r1, #0
   11e14:	mov	r0, r5
   11e18:	mov	r2, #10
   11e1c:	bl	10d10 <strtol@plt>
   11e20:	ldr	r3, [fp, #16]
   11e24:	cmp	r3, r0
   11e28:	mov	r1, r0
   11e2c:	bge	122d4 <__assert_fail@plt+0x1408>
   11e30:	cmp	r0, #0
   11e34:	str	r0, [fp, #16]
   11e38:	beq	11718 <__assert_fail@plt+0x84c>
   11e3c:	mov	r0, fp
   11e40:	bl	113dc <__assert_fail@plt+0x510>
   11e44:	ldr	r2, [sp, #16]
   11e48:	mov	r3, #0
   11e4c:	str	r0, [fp, #4]
   11e50:	str	r2, [r0, #16]
   11e54:	ldr	r2, [sp, #8]
   11e58:	strd	r2, [r0, #20]
   11e5c:	b	11718 <__assert_fail@plt+0x84c>
   11e60:	ldrb	r3, [r9, #6]
   11e64:	lsl	r3, r3, #1
   11e68:	ldrh	r3, [r6, r3]
   11e6c:	tst	r3, #8192	; 0x2000
   11e70:	beq	12688 <__assert_fail@plt+0x17bc>
   11e74:	add	r2, r9, #7
   11e78:	mov	r5, r2
   11e7c:	add	r2, r2, #1
   11e80:	ldrb	r3, [r5]
   11e84:	lsl	r3, r3, #1
   11e88:	ldrh	r3, [r6, r3]
   11e8c:	tst	r3, #8192	; 0x2000
   11e90:	bne	11e78 <__assert_fail@plt+0xfac>
   11e94:	ldr	r0, [sp, #68]	; 0x44
   11e98:	cmn	r0, #1
   11e9c:	beq	1238c <__assert_fail@plt+0x14c0>
   11ea0:	ldrb	lr, [r5]
   11ea4:	mov	ip, #0
   11ea8:	ldr	r5, [sp, #20]
   11eac:	ldr	r6, [sp, #40]	; 0x28
   11eb0:	mov	r3, ip
   11eb4:	mov	r2, ip
   11eb8:	mov	r1, ip
   11ebc:	str	ip, [sp]
   11ec0:	strb	lr, [sp, #120]	; 0x78
   11ec4:	strb	ip, [sp, #121]	; 0x79
   11ec8:	add	lr, sp, #120	; 0x78
   11ecc:	mov	ip, #2
   11ed0:	str	lr, [sp, #96]	; 0x60
   11ed4:	str	ip, [sp, #100]	; 0x64
   11ed8:	str	r5, [sp, #104]	; 0x68
   11edc:	str	r6, [sp, #108]	; 0x6c
   11ee0:	bl	10cf8 <iconv@plt>
   11ee4:	add	r3, sp, #108	; 0x6c
   11ee8:	str	r3, [sp]
   11eec:	add	r2, sp, #100	; 0x64
   11ef0:	add	r3, sp, #104	; 0x68
   11ef4:	add	r1, sp, #96	; 0x60
   11ef8:	ldr	r0, [sp, #68]	; 0x44
   11efc:	bl	10cf8 <iconv@plt>
   11f00:	ldr	r3, [sp, #100]	; 0x64
   11f04:	cmp	r3, #0
   11f08:	bne	11f1c <__assert_fail@plt+0x1050>
   11f0c:	ldr	r2, [sp, #104]	; 0x68
   11f10:	add	r3, r5, #8
   11f14:	cmp	r2, r3
   11f18:	beq	123b0 <__assert_fail@plt+0x14e4>
   11f1c:	mov	r2, #5
   11f20:	ldr	r1, [pc, #1292]	; 12434 <__assert_fail@plt+0x1568>
   11f24:	b	11a00 <__assert_fail@plt+0xb34>
   11f28:	ldr	r0, [sp, #24]
   11f2c:	ldr	r1, [r6, #4]
   11f30:	cmp	r0, #0
   11f34:	beq	11f40 <__assert_fail@plt+0x1074>
   11f38:	cmp	r0, r1
   11f3c:	beq	12620 <__assert_fail@plt+0x1754>
   11f40:	sub	r0, r1, #48	; 0x30
   11f44:	cmp	r0, #70	; 0x46
   11f48:	ldrls	pc, [pc, r0, lsl #2]
   11f4c:	b	125f8 <__assert_fail@plt+0x172c>
   11f50:	andeq	r2, r1, r0, lsl #8
   11f54:	andeq	r2, r1, r0, lsl #8
   11f58:	andeq	r2, r1, r0, lsl #8
   11f5c:	andeq	r2, r1, r0, lsl #8
   11f60:	andeq	r2, r1, r0, lsl #8
   11f64:	andeq	r2, r1, r0, lsl #8
   11f68:	andeq	r2, r1, r0, lsl #8
   11f6c:	andeq	r2, r1, r0, lsl #8
   11f70:	strdeq	r2, [r1], -r8
   11f74:	strdeq	r2, [r1], -r8
   11f78:	strdeq	r2, [r1], -r8
   11f7c:	strdeq	r2, [r1], -r8
   11f80:	strdeq	r2, [r1], -r8
   11f84:	strdeq	r2, [r1], -r8
   11f88:	strdeq	r2, [r1], -r8
   11f8c:	strdeq	r2, [r1], -r8
   11f90:	strdeq	r2, [r1], -r8
   11f94:	strdeq	r2, [r1], -r8
   11f98:	strdeq	r2, [r1], -r8
   11f9c:	strdeq	r2, [r1], -r8
   11fa0:	strdeq	r2, [r1], -r8
   11fa4:	strdeq	r2, [r1], -r8
   11fa8:	strdeq	r2, [r1], -r8
   11fac:	strdeq	r2, [r1], -r8
   11fb0:	strdeq	r2, [r1], -r8
   11fb4:	strdeq	r2, [r1], -r8
   11fb8:	strdeq	r2, [r1], -r8
   11fbc:	strdeq	r2, [r1], -r8
   11fc0:	strdeq	r2, [r1], -r8
   11fc4:	strdeq	r2, [r1], -r8
   11fc8:	strdeq	r2, [r1], -r8
   11fcc:	strdeq	r2, [r1], -r8
   11fd0:	strdeq	r2, [r1], -r8
   11fd4:	strdeq	r2, [r1], -r8
   11fd8:	strdeq	r2, [r1], -r8
   11fdc:	strdeq	r2, [r1], -r8
   11fe0:	strdeq	r2, [r1], -r8
   11fe4:	strdeq	r2, [r1], -r8
   11fe8:	strdeq	r2, [r1], -r8
   11fec:	strdeq	r2, [r1], -r8
   11ff0:	strdeq	r2, [r1], -r8
   11ff4:	strdeq	r2, [r1], -r8
   11ff8:	strdeq	r2, [r1], -r8
   11ffc:	strdeq	r2, [r1], -r8
   12000:	strdeq	r2, [r1], -r8
   12004:	strdeq	r2, [r1], -r8
   12008:	strdeq	r2, [r1], -r8
   1200c:	strdeq	r2, [r1], -r8
   12010:	strdeq	r2, [r1], -r8
   12014:	strdeq	r2, [r1], -r8
   12018:	muleq	r1, r0, r5
   1201c:	strdeq	r2, [r1], -r8
   12020:	strdeq	r2, [r1], -r8
   12024:	strdeq	r2, [r1], -r8
   12028:	andeq	r2, r1, ip, ror r5
   1202c:	strdeq	r2, [r1], -r8
   12030:	strdeq	r2, [r1], -r8
   12034:	strdeq	r2, [r1], -r8
   12038:	strdeq	r2, [r1], -r8
   1203c:	strdeq	r2, [r1], -r8
   12040:	strdeq	r2, [r1], -r8
   12044:	strdeq	r2, [r1], -r8
   12048:	andeq	r2, r1, r4, lsr #11
   1204c:	strdeq	r2, [r1], -r8
   12050:	strdeq	r2, [r1], -r8
   12054:	strdeq	r2, [r1], -r8
   12058:	andeq	r2, r1, r4, asr r5
   1205c:	strdeq	r2, [r1], -r8
   12060:	andeq	r2, r1, r8, ror #10
   12064:	strdeq	r2, [r1], -r8
   12068:	ldrdeq	r2, [r1], -ip
   1206c:	ldrb	r3, [r9, #7]
   12070:	lsl	r3, r3, #1
   12074:	ldrh	r3, [r6, r3]
   12078:	tst	r3, #8192	; 0x2000
   1207c:	beq	126d0 <__assert_fail@plt+0x1804>
   12080:	add	r2, r9, #8
   12084:	mov	r0, #7
   12088:	ldrb	r3, [r2]
   1208c:	mov	r5, r2
   12090:	add	r0, r0, #1
   12094:	add	r2, r2, #1
   12098:	lsl	r3, r3, #1
   1209c:	ldrh	r3, [r6, r3]
   120a0:	tst	r3, #8192	; 0x2000
   120a4:	bne	12088 <__assert_fail@plt+0x11bc>
   120a8:	tst	r3, #2048	; 0x800
   120ac:	beq	122ec <__assert_fail@plt+0x1420>
   120b0:	mov	r2, #10
   120b4:	mov	r1, #0
   120b8:	mov	r0, r5
   120bc:	bl	10d10 <strtol@plt>
   120c0:	mov	r1, r0
   120c4:	mov	r0, fp
   120c8:	bl	113dc <__assert_fail@plt+0x510>
   120cc:	mov	r3, #1
   120d0:	str	r3, [r0, #4]
   120d4:	b	11718 <__assert_fail@plt+0x84c>
   120d8:	ldr	r1, [pc, #856]	; 12438 <__assert_fail@plt+0x156c>
   120dc:	mov	r2, #5
   120e0:	bl	10d64 <dcgettext@plt>
   120e4:	ldr	r3, [sp, #8]
   120e8:	ldr	r2, [sp, #16]
   120ec:	mov	r1, r7
   120f0:	str	r0, [sp]
   120f4:	mov	r0, r7
   120f8:	bl	10dc4 <error_at_line@plt>
   120fc:	mov	r2, #5
   12100:	ldr	r1, [pc, #844]	; 12454 <__assert_fail@plt+0x1588>
   12104:	mov	r0, r7
   12108:	ldr	r5, [r6, #8]
   1210c:	ldr	r6, [r6, #12]
   12110:	bl	10d64 <dcgettext@plt>
   12114:	mov	r3, r6
   12118:	mov	r2, r5
   1211c:	mov	r1, r7
   12120:	str	r0, [sp]
   12124:	mov	r0, r7
   12128:	bl	10dc4 <error_at_line@plt>
   1212c:	b	1170c <__assert_fail@plt+0x840>
   12130:	mov	r6, r3
   12134:	mov	r3, #0
   12138:	ldr	r7, [r6, #16]
   1213c:	cmp	r7, #0
   12140:	beq	12690 <__assert_fail@plt+0x17c4>
   12144:	ldr	r0, [r1, #12]
   12148:	ldr	r2, [r6, #20]
   1214c:	add	r0, r0, #1
   12150:	cmp	r2, #0
   12154:	str	r0, [r1, #12]
   12158:	str	r0, [r6]
   1215c:	beq	119cc <__assert_fail@plt+0xb00>
   12160:	cmp	r3, #0
   12164:	strne	r2, [r3, #20]
   12168:	streq	r2, [r1, #8]
   1216c:	ldrne	r2, [r6, #20]
   12170:	b	12178 <__assert_fail@plt+0x12ac>
   12174:	mov	r2, r3
   12178:	ldr	r3, [r2, #20]
   1217c:	cmp	r3, #0
   12180:	bne	12174 <__assert_fail@plt+0x12a8>
   12184:	str	r6, [r2, #20]
   12188:	str	r3, [r6, #20]
   1218c:	b	119cc <__assert_fail@plt+0xb00>
   12190:	ldrb	r2, [r9, r0]
   12194:	lsl	r3, r2, #1
   12198:	ldrh	r3, [r6, r3]
   1219c:	lsr	r3, r3, #3
   121a0:	cmp	r2, #95	; 0x5f
   121a4:	orreq	r3, r3, #1
   121a8:	tst	r3, #1
   121ac:	addne	r2, r0, #1
   121b0:	addne	r2, r9, r2
   121b4:	movne	ip, r0
   121b8:	beq	122e0 <__assert_fail@plt+0x1414>
   121bc:	mov	lr, r2
   121c0:	ldrb	r1, [r2], #1
   121c4:	add	ip, ip, #1
   121c8:	lsl	r3, r1, #1
   121cc:	ldrh	r3, [r6, r3]
   121d0:	lsr	r3, r3, #3
   121d4:	and	r3, r3, #1
   121d8:	cmp	r1, #95	; 0x5f
   121dc:	orreq	r3, r3, #1
   121e0:	cmp	r3, #0
   121e4:	bne	121bc <__assert_fail@plt+0x12f0>
   121e8:	cmp	ip, r0
   121ec:	beq	122e0 <__assert_fail@plt+0x1414>
   121f0:	strb	r3, [lr]
   121f4:	ldr	r4, [fp]
   121f8:	cmp	r4, #0
   121fc:	beq	12228 <__assert_fail@plt+0x135c>
   12200:	ldr	r0, [r4, #24]
   12204:	cmp	r0, #0
   12208:	beq	1221c <__assert_fail@plt+0x1350>
   1220c:	mov	r1, r5
   12210:	bl	10d04 <strcmp@plt>
   12214:	subs	r6, r0, #0
   12218:	beq	12630 <__assert_fail@plt+0x1764>
   1221c:	ldr	r4, [r4, #28]
   12220:	cmp	r4, #0
   12224:	bne	12200 <__assert_fail@plt+0x1334>
   12228:	ldr	r1, [fp, #16]
   1222c:	add	r1, r1, #1
   12230:	cmp	r1, #0
   12234:	str	r1, [fp, #16]
   12238:	beq	114dc <__assert_fail@plt+0x610>
   1223c:	mov	r0, fp
   12240:	bl	113dc <__assert_fail@plt+0x510>
   12244:	ldr	r3, [sp, #16]
   12248:	str	r0, [fp, #4]
   1224c:	str	r3, [r0, #16]
   12250:	ldr	r3, [sp, #8]
   12254:	str	r5, [r0, #24]
   12258:	str	r3, [r0, #20]
   1225c:	b	114dc <__assert_fail@plt+0x610>
   12260:	str	r9, [sp, #20]
   12264:	str	r8, [sp, #40]	; 0x28
   12268:	ldr	r9, [sp, #24]
   1226c:	ldr	r8, [sp, #32]
   12270:	mov	r2, #5
   12274:	ldr	r1, [pc, #448]	; 1243c <__assert_fail@plt+0x1570>
   12278:	b	11a00 <__assert_fail@plt+0xb34>
   1227c:	ldr	r0, [sp, #68]	; 0x44
   12280:	bl	10cec <iconv_close@plt>
   12284:	ldr	r0, [sp, #72]	; 0x48
   12288:	bl	10cec <iconv_close@plt>
   1228c:	ldr	r0, [sp, #28]
   12290:	bl	10d34 <free@plt>
   12294:	ldr	r0, [sp, #20]
   12298:	bl	10d34 <free@plt>
   1229c:	ldr	r3, [pc, #368]	; 12414 <__assert_fail@plt+0x1548>
   122a0:	ldr	r3, [r3]
   122a4:	cmp	r3, r8
   122a8:	beq	122b4 <__assert_fail@plt+0x13e8>
   122ac:	mov	r0, r8
   122b0:	bl	10e6c <fclose@plt>
   122b4:	ldr	r3, [pc, #332]	; 12408 <__assert_fail@plt+0x153c>
   122b8:	ldr	r2, [sp, #124]	; 0x7c
   122bc:	mov	r0, fp
   122c0:	ldr	r3, [r3]
   122c4:	cmp	r2, r3
   122c8:	bne	127e8 <__assert_fail@plt+0x191c>
   122cc:	add	sp, sp, #132	; 0x84
   122d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122d4:	cmp	r0, #0
   122d8:	beq	11718 <__assert_fail@plt+0x84c>
   122dc:	b	11e3c <__assert_fail@plt+0xf70>
   122e0:	mov	r2, #5
   122e4:	ldr	r1, [pc, #340]	; 12440 <__assert_fail@plt+0x1574>
   122e8:	b	11a00 <__assert_fail@plt+0xb34>
   122ec:	ldrb	r2, [r9, r0]
   122f0:	lsl	r3, r2, #1
   122f4:	ldrh	r3, [r6, r3]
   122f8:	lsr	r3, r3, #3
   122fc:	cmp	r2, #95	; 0x5f
   12300:	orreq	r3, r3, #1
   12304:	tst	r3, #1
   12308:	addne	r2, r0, #1
   1230c:	addne	r2, r9, r2
   12310:	movne	ip, r0
   12314:	beq	122e0 <__assert_fail@plt+0x1414>
   12318:	mov	lr, r2
   1231c:	ldrb	r1, [r2], #1
   12320:	add	ip, ip, #1
   12324:	lsl	r3, r1, #1
   12328:	ldrh	r3, [r6, r3]
   1232c:	lsr	r3, r3, #3
   12330:	and	r3, r3, #1
   12334:	cmp	r1, #95	; 0x5f
   12338:	orreq	r3, r3, #1
   1233c:	cmp	r3, #0
   12340:	bne	12318 <__assert_fail@plt+0x144c>
   12344:	cmp	ip, r0
   12348:	beq	122e0 <__assert_fail@plt+0x1414>
   1234c:	strb	r3, [lr]
   12350:	ldr	r4, [fp]
   12354:	cmp	r4, #0
   12358:	bne	1236c <__assert_fail@plt+0x14a0>
   1235c:	b	12748 <__assert_fail@plt+0x187c>
   12360:	ldr	r4, [r4, #28]
   12364:	cmp	r4, #0
   12368:	beq	12748 <__assert_fail@plt+0x187c>
   1236c:	mov	r1, r5
   12370:	ldr	r0, [r4, #24]
   12374:	bl	10d04 <strcmp@plt>
   12378:	cmp	r0, #0
   1237c:	bne	12360 <__assert_fail@plt+0x1494>
   12380:	mov	r3, #1
   12384:	str	r3, [r4, #4]
   12388:	b	114dc <__assert_fail@plt+0x610>
   1238c:	add	r3, sp, #76	; 0x4c
   12390:	add	r2, sp, #72	; 0x48
   12394:	add	r1, sp, #68	; 0x44
   12398:	ldr	r0, [sp, #28]
   1239c:	bl	1125c <__assert_fail@plt+0x390>
   123a0:	cmp	r0, #0
   123a4:	bne	12294 <__assert_fail@plt+0x13c8>
   123a8:	ldr	r0, [sp, #68]	; 0x44
   123ac:	b	11ea0 <__assert_fail@plt+0xfd4>
   123b0:	ldr	r3, [sp, #20]
   123b4:	ldr	r3, [r3]
   123b8:	str	r3, [fp, #12]
   123bc:	b	11718 <__assert_fail@plt+0x84c>
   123c0:	cmp	r7, r3
   123c4:	bne	11b90 <__assert_fail@plt+0xcc4>
   123c8:	mov	r3, #1
   123cc:	add	r6, r2, #4
   123d0:	ldr	r7, [r2, #4]
   123d4:	str	r3, [sp, #12]
   123d8:	b	11b94 <__assert_fail@plt+0xcc8>
   123dc:	mov	r3, #11
   123e0:	str	r3, [r4], #4
   123e4:	add	r6, r6, #8
   123e8:	ldr	r3, [r6]
   123ec:	b	11ba4 <__assert_fail@plt+0xcd8>
   123f0:	str	r9, [fp, #28]
   123f4:	str	r9, [fp, #32]
   123f8:	mov	r6, r9
   123fc:	b	11c4c <__assert_fail@plt+0xd80>
   12400:	add	r2, r6, #8
   12404:	b	1249c <__assert_fail@plt+0x15d0>
   12408:	strdeq	r3, [r2], -r8
   1240c:	ldrdeq	r3, [r1], -ip
   12410:	andeq	r3, r1, r0, ror #11
   12414:	strdeq	r4, [r2], -r0
   12418:	andeq	r3, r1, ip, ror #11
   1241c:	andeq	r3, r1, r8, lsr #12
   12420:	andeq	r3, r1, r0, asr #12
   12424:	andeq	r3, r1, r8, asr #12
   12428:	andeq	r3, r1, r8, ror #12
   1242c:	andeq	r3, r1, ip, lsl r6
   12430:	strdeq	r3, [r1], -r0
   12434:	andeq	r3, r1, r0, asr r6
   12438:	ldrdeq	r3, [r1], -r0
   1243c:	andeq	r3, r1, r8, lsr #14
   12440:	andeq	r3, r1, ip, lsr #12
   12444:	andeq	r3, r1, ip, asr #14
   12448:	andeq	r3, r1, r8, lsr #13
   1244c:	andeq	r3, r1, r4, ror #14
   12450:	andeq	r3, r1, r0, lsr #15
   12454:	andeq	r3, r1, ip, lsr #13
   12458:	muleq	r1, r0, r6
   1245c:	andeq	r3, r1, ip, ror r7
   12460:			; <UNDEFINED> instruction: 0x000137bc
   12464:	andeq	r3, r1, r0, lsl #12
   12468:	andeq	r0, r1, r4, lsr sp
   1246c:			; <UNDEFINED> instruction: 0x00010db8
   12470:	andeq	r0, r0, r1, lsl #6
   12474:	andeq	r3, r1, ip, lsl #15
   12478:	andeq	r3, r1, ip, ror #13
   1247c:	andeq	r0, r0, sl, asr #5
   12480:	andeq	r3, r1, ip, asr #13
   12484:	ldrdeq	r3, [r1], -r8
   12488:	andeq	r3, r1, r8, asr #17
   1248c:	add	r0, r3, r0, lsl #3
   12490:	cmp	r0, #31
   12494:	mov	r6, r2
   12498:	bhi	124b4 <__assert_fail@plt+0x15e8>
   1249c:	mov	r6, r2
   124a0:	add	r2, r2, #4
   124a4:	ldr	r3, [r6]
   124a8:	sub	r3, r3, #48	; 0x30
   124ac:	cmp	r3, #7
   124b0:	bls	1248c <__assert_fail@plt+0x15c0>
   124b4:	mov	r3, #0
   124b8:	mov	ip, #2
   124bc:	strb	r0, [sp, #120]	; 0x78
   124c0:	mov	lr, #0
   124c4:	add	r0, sp, #112	; 0x70
   124c8:	mov	r2, r3
   124cc:	mov	r1, r3
   124d0:	str	r3, [sp]
   124d4:	strb	lr, [sp, #121]	; 0x79
   124d8:	str	ip, [sp, #100]	; 0x64
   124dc:	add	lr, sp, #120	; 0x78
   124e0:	mov	ip, #8
   124e4:	str	r0, [sp, #104]	; 0x68
   124e8:	ldr	r0, [sp, #52]	; 0x34
   124ec:	str	lr, [sp, #96]	; 0x60
   124f0:	str	ip, [sp, #108]	; 0x6c
   124f4:	bl	10cf8 <iconv@plt>
   124f8:	add	r3, sp, #108	; 0x6c
   124fc:	str	r3, [sp]
   12500:	add	r2, sp, #100	; 0x64
   12504:	add	r3, sp, #104	; 0x68
   12508:	add	r1, sp, #96	; 0x60
   1250c:	ldr	r0, [sp, #52]	; 0x34
   12510:	bl	10cf8 <iconv@plt>
   12514:	ldr	r2, [sp, #96]	; 0x60
   12518:	add	r3, sp, #122	; 0x7a
   1251c:	cmp	r2, r3
   12520:	beq	12700 <__assert_fail@plt+0x1834>
   12524:	mov	r2, #5
   12528:	ldr	r1, [pc, #-236]	; 12444 <__assert_fail@plt+0x1578>
   1252c:	mov	r0, #0
   12530:	bl	10d64 <dcgettext@plt>
   12534:	mov	r1, #0
   12538:	ldr	r3, [sp, #8]
   1253c:	ldr	r2, [sp, #16]
   12540:	str	r0, [sp]
   12544:	mov	r0, r1
   12548:	bl	10dc4 <error_at_line@plt>
   1254c:	ldr	r3, [r6]
   12550:	b	11ba4 <__assert_fail@plt+0xcd8>
   12554:	mov	r3, #13
   12558:	str	r3, [r4], #4
   1255c:	add	r6, r6, #8
   12560:	ldr	r3, [r6]
   12564:	b	11ba4 <__assert_fail@plt+0xcd8>
   12568:	mov	r3, #9
   1256c:	str	r3, [r4], #4
   12570:	add	r6, r6, #8
   12574:	ldr	r3, [r6]
   12578:	b	11ba4 <__assert_fail@plt+0xcd8>
   1257c:	mov	r3, #12
   12580:	str	r3, [r4], #4
   12584:	add	r6, r6, #8
   12588:	ldr	r3, [r6]
   1258c:	b	11ba4 <__assert_fail@plt+0xcd8>
   12590:	mov	r3, #8
   12594:	str	r3, [r4], #4
   12598:	add	r6, r6, #8
   1259c:	ldr	r3, [r6]
   125a0:	b	11ba4 <__assert_fail@plt+0xcd8>
   125a4:	mov	r3, #10
   125a8:	str	r3, [r4], #4
   125ac:	add	r6, r6, #8
   125b0:	ldr	r3, [r6]
   125b4:	b	11ba4 <__assert_fail@plt+0xcd8>
   125b8:	ldr	r1, [pc, #-376]	; 12448 <__assert_fail@plt+0x157c>
   125bc:	ldr	r0, [sp, #16]
   125c0:	bl	10d1c <fopen@plt>
   125c4:	mov	r8, r0
   125c8:	b	114a4 <__assert_fail@plt+0x5d8>
   125cc:	mov	r2, #5
   125d0:	ldr	r1, [pc, #-396]	; 1244c <__assert_fail@plt+0x1580>
   125d4:	mov	r0, r7
   125d8:	bl	10d64 <dcgettext@plt>
   125dc:	ldr	r3, [sp, #8]
   125e0:	ldr	r2, [sp, #16]
   125e4:	mov	r1, r7
   125e8:	str	r0, [sp]
   125ec:	mov	r0, r7
   125f0:	bl	10dc4 <error_at_line@plt>
   125f4:	b	11c04 <__assert_fail@plt+0xd38>
   125f8:	cmp	r3, r1
   125fc:	movne	r3, r1
   12600:	movne	r6, r2
   12604:	streq	r3, [r4], #4
   12608:	addeq	r6, r6, #8
   1260c:	ldreq	r3, [r6]
   12610:	b	11ba4 <__assert_fail@plt+0xcd8>
   12614:	mov	r6, r4
   12618:	mov	r4, r7
   1261c:	b	11c04 <__assert_fail@plt+0xd38>
   12620:	str	r0, [r4], #4
   12624:	add	r6, r6, #8
   12628:	ldr	r3, [r6]
   1262c:	b	11ba4 <__assert_fail@plt+0xcd8>
   12630:	mov	r2, #5
   12634:	ldr	r1, [pc, #-492]	; 12450 <__assert_fail@plt+0x1584>
   12638:	bl	10d64 <dcgettext@plt>
   1263c:	ldr	r3, [sp, #8]
   12640:	ldr	r2, [sp, #16]
   12644:	mov	r1, r6
   12648:	str	r0, [sp]
   1264c:	mov	r0, r6
   12650:	bl	10dc4 <error_at_line@plt>
   12654:	mov	r2, #5
   12658:	ldr	r1, [pc, #-524]	; 12454 <__assert_fail@plt+0x1588>
   1265c:	mov	r0, r6
   12660:	ldr	r5, [r4, #16]
   12664:	ldr	r4, [r4, #20]
   12668:	bl	10d64 <dcgettext@plt>
   1266c:	mov	r3, r4
   12670:	mov	r2, r5
   12674:	mov	r1, r6
   12678:	str	r0, [sp]
   1267c:	mov	r0, r6
   12680:	bl	10dc4 <error_at_line@plt>
   12684:	b	114dc <__assert_fail@plt+0x610>
   12688:	add	r5, r9, #6
   1268c:	b	11e94 <__assert_fail@plt+0xfc8>
   12690:	mov	r2, #5
   12694:	ldr	r1, [pc, #-580]	; 12458 <__assert_fail@plt+0x158c>
   12698:	mov	r0, r7
   1269c:	b	120e0 <__assert_fail@plt+0x1214>
   126a0:	add	r3, sp, #76	; 0x4c
   126a4:	add	r2, sp, #72	; 0x48
   126a8:	add	r1, sp, #68	; 0x44
   126ac:	ldr	r0, [sp, #28]
   126b0:	bl	1125c <__assert_fail@plt+0x390>
   126b4:	cmp	r0, #0
   126b8:	bne	12294 <__assert_fail@plt+0x13c8>
   126bc:	ldr	r2, [sp, #68]	; 0x44
   126c0:	b	11a98 <__assert_fail@plt+0xbcc>
   126c4:	add	r5, r9, #4
   126c8:	mov	r0, #4
   126cc:	b	11e08 <__assert_fail@plt+0xf3c>
   126d0:	add	r5, r9, #7
   126d4:	mov	r0, #7
   126d8:	b	120a8 <__assert_fail@plt+0x11dc>
   126dc:	mov	r0, r4
   126e0:	mov	r1, r5
   126e4:	bl	10d58 <_obstack_newchunk@plt>
   126e8:	ldr	r3, [fp, #32]
   126ec:	ldr	r2, [fp, #36]	; 0x24
   126f0:	b	11cf4 <__assert_fail@plt+0xe28>
   126f4:	mov	r3, #0
   126f8:	str	r3, [sp, #28]
   126fc:	b	11718 <__assert_fail@plt+0x84c>
   12700:	ldr	r3, [sp, #104]	; 0x68
   12704:	add	r2, sp, #120	; 0x78
   12708:	cmp	r3, r2
   1270c:	bne	12524 <__assert_fail@plt+0x1658>
   12710:	ldr	r3, [sp, #112]	; 0x70
   12714:	str	r3, [r4], #4
   12718:	b	1254c <__assert_fail@plt+0x1680>
   1271c:	mov	r2, #5
   12720:	ldr	r1, [pc, #-716]	; 1245c <__assert_fail@plt+0x1590>
   12724:	mov	r0, r5
   12728:	bl	10d64 <dcgettext@plt>
   1272c:	ldr	r3, [sp, #8]
   12730:	ldr	r2, [sp, #16]
   12734:	mov	r1, r5
   12738:	str	r0, [sp]
   1273c:	mov	r0, r5
   12740:	bl	10dc4 <error_at_line@plt>
   12744:	b	114dc <__assert_fail@plt+0x610>
   12748:	mov	r2, #5
   1274c:	ldr	r1, [pc, #-756]	; 12460 <__assert_fail@plt+0x1594>
   12750:	mov	r0, #0
   12754:	bl	10d64 <dcgettext@plt>
   12758:	mov	r1, #0
   1275c:	str	r5, [sp, #4]
   12760:	ldr	r3, [sp, #8]
   12764:	ldr	r2, [sp, #16]
   12768:	str	r0, [sp]
   1276c:	mov	r0, r1
   12770:	bl	10dc4 <error_at_line@plt>
   12774:	b	114dc <__assert_fail@plt+0x610>
   12778:	bl	10e30 <__errno_location@plt>
   1277c:	mov	r2, #5
   12780:	ldr	r1, [pc, #-804]	; 12464 <__assert_fail@plt+0x1598>
   12784:	ldr	r4, [r0]
   12788:	mov	r0, r8
   1278c:	bl	10d64 <dcgettext@plt>
   12790:	ldr	r3, [sp, #16]
   12794:	mov	r1, r4
   12798:	mov	r2, r0
   1279c:	mov	r0, r8
   127a0:	bl	10dac <error@plt>
   127a4:	b	122b4 <__assert_fail@plt+0x13e8>
   127a8:	mov	r1, #64	; 0x40
   127ac:	mov	r0, #1
   127b0:	bl	130cc <__assert_fail@plt+0x2200>
   127b4:	ldr	r3, [pc, #-852]	; 12468 <__assert_fail@plt+0x159c>
   127b8:	mov	r2, #0
   127bc:	mov	r1, r2
   127c0:	str	r3, [sp]
   127c4:	ldr	r3, [pc, #-864]	; 1246c <__assert_fail@plt+0x15a0>
   127c8:	mov	fp, r0
   127cc:	add	r0, r0, #20
   127d0:	bl	10d88 <_obstack_begin@plt>
   127d4:	mov	r0, fp
   127d8:	mov	r1, #1
   127dc:	bl	113dc <__assert_fail@plt+0x510>
   127e0:	str	r0, [fp, #4]
   127e4:	b	114b4 <__assert_fail@plt+0x5e8>
   127e8:	bl	10d70 <__stack_chk_fail@plt>
   127ec:	ldr	r3, [pc, #-876]	; 12488 <__assert_fail@plt+0x15bc>
   127f0:	ldr	r2, [pc, #-904]	; 12470 <__assert_fail@plt+0x15a4>
   127f4:	ldr	r1, [pc, #-892]	; 12480 <__assert_fail@plt+0x15b4>
   127f8:	ldr	r0, [pc, #-908]	; 12474 <__assert_fail@plt+0x15a8>
   127fc:	bl	10ecc <__assert_fail@plt>
   12800:	ldr	r3, [pc, #-896]	; 12488 <__assert_fail@plt+0x15bc>
   12804:	mov	r2, #716	; 0x2cc
   12808:	ldr	r1, [pc, #-912]	; 12480 <__assert_fail@plt+0x15b4>
   1280c:	ldr	r0, [pc, #-924]	; 12478 <__assert_fail@plt+0x15ac>
   12810:	bl	10ecc <__assert_fail@plt>
   12814:	ldr	r3, [pc, #-916]	; 12488 <__assert_fail@plt+0x15bc>
   12818:	ldr	r2, [pc, #-932]	; 1247c <__assert_fail@plt+0x15b0>
   1281c:	ldr	r1, [pc, #-932]	; 12480 <__assert_fail@plt+0x15b4>
   12820:	ldr	r0, [pc, #-932]	; 12484 <__assert_fail@plt+0x15b8>
   12824:	bl	10ecc <__assert_fail@plt>
   12828:	mov	r1, r7
   1282c:	mov	r0, r4
   12830:	bl	10d58 <_obstack_newchunk@plt>
   12834:	mov	r2, r7
   12838:	ldr	r1, [sp, #60]	; 0x3c
   1283c:	ldr	r0, [fp, #32]
   12840:	bl	10d40 <memcpy@plt>
   12844:	ldr	r6, [fp, #32]
   12848:	add	r6, r6, r7
   1284c:	str	r6, [fp, #32]
   12850:	b	114fc <__assert_fail@plt+0x630>
   12854:	str	r0, [sp, #28]
   12858:	b	11718 <__assert_fail@plt+0x84c>
   1285c:	ldr	r3, [pc, #1960]	; 1300c <__assert_fail@plt+0x2140>
   12860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12864:	add	fp, sp, #32
   12868:	sub	sp, sp, #124	; 0x7c
   1286c:	ldr	r4, [r3, #4]
   12870:	ldr	r3, [pc, #1944]	; 13010 <__assert_fail@plt+0x2144>
   12874:	cmp	r4, #0
   12878:	str	r0, [fp, #-120]	; 0xffffff88
   1287c:	ldr	r3, [r3]
   12880:	str	r1, [fp, #-124]	; 0xffffff84
   12884:	str	r3, [fp, #-40]	; 0xffffffd8
   12888:	sub	r3, fp, #96	; 0x60
   1288c:	str	r2, [fp, #-128]	; 0xffffff80
   12890:	str	r3, [fp, #-108]	; 0xffffff94
   12894:	beq	12dd8 <__assert_fail@plt+0x1f0c>
   12898:	ldr	r3, [fp, #-120]	; 0xffffff88
   1289c:	mvn	r7, #0
   128a0:	str	r7, [fp, #-112]	; 0xffffff90
   128a4:	ldr	r4, [r3, #8]
   128a8:	ldr	r3, [pc, #1892]	; 13014 <__assert_fail@plt+0x2148>
   128ac:	str	r7, [fp, #-104]	; 0xffffff98
   128b0:	umull	r3, r4, r3, r4
   128b4:	lsr	r4, r4, #2
   128b8:	add	r4, r4, #1
   128bc:	lsl	r2, r4, #2
   128c0:	add	r3, r2, #7
   128c4:	bic	r3, r3, #7
   128c8:	str	sp, [fp, #-116]	; 0xffffff8c
   128cc:	sub	sp, sp, r3
   128d0:	add	r9, sp, #16
   128d4:	mov	r0, r9
   128d8:	mov	r1, #0
   128dc:	bl	10e3c <memset@plt>
   128e0:	ldr	r3, [fp, #-120]	; 0xffffff88
   128e4:	ldr	r8, [r3]
   128e8:	cmp	r8, #0
   128ec:	beq	12d14 <__assert_fail@plt+0x1e48>
   128f0:	mov	r5, #1
   128f4:	ldr	sl, [r8, #8]
   128f8:	cmp	sl, #0
   128fc:	beq	12944 <__assert_fail@plt+0x1a78>
   12900:	ldr	r6, [r8]
   12904:	ldr	r0, [sl]
   12908:	mov	r1, r4
   1290c:	mul	r0, r0, r6
   12910:	bl	13370 <__assert_fail@plt+0x24a4>
   12914:	ldr	r3, [r9, r1, lsl #2]
   12918:	add	r3, r3, #1
   1291c:	cmp	r3, r5
   12920:	str	r3, [r9, r1, lsl #2]
   12924:	bls	12938 <__assert_fail@plt+0x1a6c>
   12928:	mul	r2, r4, r3
   1292c:	mov	r5, r3
   12930:	cmp	r2, r7
   12934:	bhi	12944 <__assert_fail@plt+0x1a78>
   12938:	ldr	sl, [sl, #20]
   1293c:	cmp	sl, #0
   12940:	bne	12904 <__assert_fail@plt+0x1a38>
   12944:	ldr	r8, [r8, #28]
   12948:	cmp	r8, #0
   1294c:	bne	128f4 <__assert_fail@plt+0x1a28>
   12950:	mul	r3, r4, r5
   12954:	cmp	r7, r3
   12958:	ldr	r2, [fp, #-104]	; 0xffffff98
   1295c:	movcs	r7, r3
   12960:	movcs	r2, r4
   12964:	ldr	r3, [fp, #-112]	; 0xffffff90
   12968:	add	r4, r4, #1
   1296c:	movcs	r3, r5
   12970:	cmp	r7, r4
   12974:	str	r2, [fp, #-104]	; 0xffffff98
   12978:	str	r3, [fp, #-112]	; 0xffffff90
   1297c:	ldr	sp, [fp, #-116]	; 0xffffff8c
   12980:	bcs	128bc <__assert_fail@plt+0x19f0>
   12984:	ldr	r3, [fp, #-104]	; 0xffffff98
   12988:	cmn	r3, #1
   1298c:	moveq	r3, #1
   12990:	streq	r3, [fp, #-112]	; 0xffffff90
   12994:	streq	r3, [fp, #-104]	; 0xffffff98
   12998:	ldr	r1, [fp, #-112]	; 0xffffff90
   1299c:	ldr	r0, [fp, #-104]	; 0xffffff98
   129a0:	ldr	r3, [pc, #1648]	; 13018 <__assert_fail@plt+0x214c>
   129a4:	str	r0, [fp, #-48]	; 0xffffffd0
   129a8:	mul	r2, r1, r0
   129ac:	str	r1, [fp, #-44]	; 0xffffffd4
   129b0:	str	r2, [fp, #-132]	; 0xffffff7c
   129b4:	lsl	r0, r2, #1
   129b8:	add	r2, r0, r2
   129bc:	str	r0, [fp, #-136]	; 0xffffff78
   129c0:	lsl	r2, r2, #2
   129c4:	add	r5, r2, #7
   129c8:	bic	r5, r5, #7
   129cc:	sub	sp, sp, r5
   129d0:	add	r4, sp, #16
   129d4:	mov	r1, #0
   129d8:	mov	r0, r4
   129dc:	str	r2, [fp, #-116]	; 0xffffff8c
   129e0:	str	r3, [fp, #-52]	; 0xffffffcc
   129e4:	bl	10e3c <memset@plt>
   129e8:	sub	sp, sp, r5
   129ec:	ldr	r3, [pc, #1576]	; 1301c <__assert_fail@plt+0x2150>
   129f0:	mov	r2, #0
   129f4:	str	r3, [sp]
   129f8:	mov	r1, r2
   129fc:	ldr	r3, [pc, #1564]	; 13020 <__assert_fail@plt+0x2154>
   12a00:	ldr	r0, [fp, #-108]	; 0xffffff94
   12a04:	bl	10d88 <_obstack_begin@plt>
   12a08:	ldr	r3, [fp, #-120]	; 0xffffff88
   12a0c:	ldr	r7, [r3]
   12a10:	add	r3, sp, #16
   12a14:	cmp	r7, #0
   12a18:	str	r3, [fp, #-112]	; 0xffffff90
   12a1c:	ldrne	r3, [fp, #-104]	; 0xffffff98
   12a20:	addne	r5, r3, r3, lsl #1
   12a24:	beq	12af4 <__assert_fail@plt+0x1c28>
   12a28:	ldr	r9, [r7, #8]
   12a2c:	cmp	r9, #0
   12a30:	beq	12ae8 <__assert_fail@plt+0x1c1c>
   12a34:	ldr	sl, [r7]
   12a38:	ldr	r0, [r9]
   12a3c:	ldr	r1, [fp, #-104]	; 0xffffff98
   12a40:	mul	r0, r0, sl
   12a44:	bl	13370 <__assert_fail@plt+0x24a4>
   12a48:	add	r1, r1, r1, lsl #1
   12a4c:	ldr	r3, [r4, r1, lsl #2]
   12a50:	add	r0, r4, r1, lsl #2
   12a54:	cmp	r3, #0
   12a58:	beq	12a70 <__assert_fail@plt+0x1ba4>
   12a5c:	add	r1, r1, r5
   12a60:	ldr	r3, [r4, r1, lsl #2]
   12a64:	add	r0, r4, r1, lsl #2
   12a68:	cmp	r3, #0
   12a6c:	bne	12a5c <__assert_fail@plt+0x1b90>
   12a70:	add	r3, r1, #1
   12a74:	str	sl, [r0]
   12a78:	ldr	r8, [fp, #-84]	; 0xffffffac
   12a7c:	ldm	r9, {r0, r6}
   12a80:	ldr	ip, [fp, #-88]	; 0xffffffa8
   12a84:	add	lr, r4, r3, lsl #2
   12a88:	sub	ip, r8, ip
   12a8c:	str	r0, [r4, r3, lsl #2]
   12a90:	str	ip, [lr, #4]
   12a94:	mov	r0, r6
   12a98:	bl	10e0c <strlen@plt>
   12a9c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12aa0:	add	r1, r0, #1
   12aa4:	mov	sl, r0
   12aa8:	add	r0, r8, r1
   12aac:	cmp	ip, r0
   12ab0:	bcc	12d00 <__assert_fail@plt+0x1e34>
   12ab4:	mov	r2, sl
   12ab8:	mov	r1, r6
   12abc:	mov	r0, r8
   12ac0:	bl	10d40 <memcpy@plt>
   12ac4:	ldr	r2, [fp, #-84]	; 0xffffffac
   12ac8:	add	r3, r2, sl
   12acc:	add	r3, r3, #1
   12ad0:	str	r3, [fp, #-84]	; 0xffffffac
   12ad4:	mov	r3, #0
   12ad8:	strb	r3, [r2, sl]
   12adc:	ldr	r9, [r9, #20]
   12ae0:	cmp	r9, #0
   12ae4:	bne	12a34 <__assert_fail@plt+0x1b68>
   12ae8:	ldr	r7, [r7, #28]
   12aec:	cmp	r7, #0
   12af0:	bne	12a28 <__assert_fail@plt+0x1b5c>
   12af4:	ldr	r3, [fp, #-84]	; 0xffffffac
   12af8:	ldr	r6, [fp, #-88]	; 0xffffffa8
   12afc:	cmp	r3, r6
   12b00:	sub	r7, r3, r6
   12b04:	beq	12dc8 <__assert_fail@plt+0x1efc>
   12b08:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12b0c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12b10:	add	r3, r3, r1
   12b14:	bic	r3, r3, r1
   12b18:	cmp	r2, r3
   12b1c:	movcc	r3, r2
   12b20:	ldr	r1, [fp, #-136]	; 0xffffff78
   12b24:	ldr	r2, [fp, #-132]	; 0xffffff7c
   12b28:	str	r3, [fp, #-84]	; 0xffffffac
   12b2c:	cmn	r1, r2
   12b30:	str	r3, [fp, #-88]	; 0xffffffa8
   12b34:	beq	12b60 <__assert_fail@plt+0x1c94>
   12b38:	ldr	r3, [fp, #-116]	; 0xffffff8c
   12b3c:	sub	r2, r4, #4
   12b40:	add	r0, r2, r3
   12b44:	ldr	r3, [fp, #-112]	; 0xffffff90
   12b48:	sub	r1, r3, #4
   12b4c:	ldr	r3, [r2, #4]!
   12b50:	rev	r3, r3
   12b54:	cmp	r0, r2
   12b58:	str	r3, [r1, #4]!
   12b5c:	bne	12b4c <__assert_fail@plt+0x1c80>
   12b60:	ldr	r1, [pc, #1212]	; 13024 <__assert_fail@plt+0x2158>
   12b64:	ldr	r0, [fp, #-124]	; 0xffffff84
   12b68:	bl	10d04 <strcmp@plt>
   12b6c:	cmp	r0, #0
   12b70:	beq	12b88 <__assert_fail@plt+0x1cbc>
   12b74:	ldr	r1, [pc, #1196]	; 13028 <__assert_fail@plt+0x215c>
   12b78:	ldr	r0, [fp, #-124]	; 0xffffff84
   12b7c:	bl	10d04 <strcmp@plt>
   12b80:	cmp	r0, #0
   12b84:	bne	12d60 <__assert_fail@plt+0x1e94>
   12b88:	mov	r2, #12
   12b8c:	sub	r1, fp, #52	; 0x34
   12b90:	mov	r0, #1
   12b94:	bl	10e54 <write@plt>
   12b98:	ldr	r5, [fp, #-116]	; 0xffffff8c
   12b9c:	mov	r1, r4
   12ba0:	mov	r2, r5
   12ba4:	mov	r0, #1
   12ba8:	bl	10e54 <write@plt>
   12bac:	mov	r2, r5
   12bb0:	ldr	r1, [fp, #-112]	; 0xffffff90
   12bb4:	mov	r0, #1
   12bb8:	bl	10e54 <write@plt>
   12bbc:	mov	r2, r7
   12bc0:	mov	r1, r6
   12bc4:	mov	r0, #1
   12bc8:	bl	10e54 <write@plt>
   12bcc:	ldr	r4, [fp, #-128]	; 0xffffff80
   12bd0:	cmp	r4, #0
   12bd4:	beq	12ce4 <__assert_fail@plt+0x1e18>
   12bd8:	ldr	r1, [pc, #1092]	; 13024 <__assert_fail@plt+0x2158>
   12bdc:	mov	r0, r4
   12be0:	bl	10d04 <strcmp@plt>
   12be4:	cmp	r0, #0
   12be8:	bne	12d20 <__assert_fail@plt+0x1e54>
   12bec:	ldr	r3, [fp, #-120]	; 0xffffff88
   12bf0:	ldr	sl, [pc, #1076]	; 1302c <__assert_fail@plt+0x2160>
   12bf4:	ldr	r5, [r3]
   12bf8:	ldr	r6, [sl]
   12bfc:	cmp	r5, #0
   12c00:	beq	12ce4 <__assert_fail@plt+0x1e18>
   12c04:	ldr	r3, [r5, #24]
   12c08:	cmp	r3, #0
   12c0c:	beq	12c5c <__assert_fail@plt+0x1d90>
   12c10:	ldr	r2, [pc, #1048]	; 13030 <__assert_fail@plt+0x2164>
   12c14:	b	12c34 <__assert_fail@plt+0x1d68>
   12c18:	ldr	r5, [r5, #28]
   12c1c:	cmp	r5, #0
   12c20:	beq	12cd0 <__assert_fail@plt+0x1e04>
   12c24:	ldr	r3, [r5, #24]
   12c28:	mov	r2, r9
   12c2c:	cmp	r3, #0
   12c30:	beq	12c68 <__assert_fail@plt+0x1d9c>
   12c34:	ldr	r1, [r5, #20]
   12c38:	str	r1, [sp, #8]
   12c3c:	ldr	r1, [r5, #16]
   12c40:	str	r1, [sp, #4]
   12c44:	ldr	r0, [r5]
   12c48:	ldr	r1, [pc, #996]	; 13034 <__assert_fail@plt+0x2168>
   12c4c:	sub	r0, r0, #1
   12c50:	str	r0, [sp]
   12c54:	mov	r0, r6
   12c58:	bl	10e18 <fprintf@plt>
   12c5c:	ldr	r7, [pc, #980]	; 13038 <__assert_fail@plt+0x216c>
   12c60:	ldr	r8, [pc, #980]	; 1303c <__assert_fail@plt+0x2170>
   12c64:	ldr	r9, [pc, #980]	; 13040 <__assert_fail@plt+0x2174>
   12c68:	ldr	r4, [r5, #8]
   12c6c:	cmp	r4, #0
   12c70:	beq	12c18 <__assert_fail@plt+0x1d4c>
   12c74:	ldr	r3, [r4, #16]
   12c78:	cmp	r3, #0
   12c7c:	beq	12cb8 <__assert_fail@plt+0x1dec>
   12c80:	ldr	r2, [r5, #24]
   12c84:	ldr	r0, [r4, #8]
   12c88:	ldr	ip, [r4, #12]
   12c8c:	cmp	r2, #0
   12c90:	ldr	r1, [r4]
   12c94:	ldreq	r2, [r5]
   12c98:	stmibne	sp, {r0, ip}
   12c9c:	stmibeq	sp, {r0, ip}
   12ca0:	streq	r1, [sp]
   12ca4:	strne	r1, [sp]
   12ca8:	moveq	r1, r8
   12cac:	movne	r1, r7
   12cb0:	mov	r0, r6
   12cb4:	bl	10e18 <fprintf@plt>
   12cb8:	ldr	r4, [r4, #20]
   12cbc:	cmp	r4, #0
   12cc0:	bne	12c74 <__assert_fail@plt+0x1da8>
   12cc4:	ldr	r5, [r5, #28]
   12cc8:	cmp	r5, #0
   12ccc:	bne	12c24 <__assert_fail@plt+0x1d58>
   12cd0:	ldr	r3, [sl]
   12cd4:	cmp	r3, r6
   12cd8:	beq	12ce4 <__assert_fail@plt+0x1e18>
   12cdc:	mov	r0, r6
   12ce0:	bl	10e6c <fclose@plt>
   12ce4:	ldr	r3, [pc, #804]	; 13010 <__assert_fail@plt+0x2144>
   12ce8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12cec:	ldr	r3, [r3]
   12cf0:	cmp	r2, r3
   12cf4:	bne	12fd4 <__assert_fail@plt+0x2108>
   12cf8:	sub	sp, fp, #32
   12cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d00:	ldr	r0, [fp, #-108]	; 0xffffff94
   12d04:	bl	10d58 <_obstack_newchunk@plt>
   12d08:	ldr	r8, [fp, #-84]	; 0xffffffac
   12d0c:	ldr	r6, [r9, #4]
   12d10:	b	12ab4 <__assert_fail@plt+0x1be8>
   12d14:	mov	r3, r4
   12d18:	mov	r5, #1
   12d1c:	b	12954 <__assert_fail@plt+0x1a88>
   12d20:	ldr	r1, [pc, #768]	; 13028 <__assert_fail@plt+0x215c>
   12d24:	mov	r0, r4
   12d28:	bl	10d04 <strcmp@plt>
   12d2c:	cmp	r0, #0
   12d30:	beq	12bec <__assert_fail@plt+0x1d20>
   12d34:	ldr	r1, [pc, #776]	; 13044 <__assert_fail@plt+0x2178>
   12d38:	ldr	r0, [fp, #-128]	; 0xffffff80
   12d3c:	bl	10d1c <fopen@plt>
   12d40:	subs	r6, r0, #0
   12d44:	beq	12fd8 <__assert_fail@plt+0x210c>
   12d48:	ldr	r3, [fp, #-120]	; 0xffffff88
   12d4c:	ldr	sl, [pc, #728]	; 1302c <__assert_fail@plt+0x2160>
   12d50:	ldr	r5, [r3]
   12d54:	cmp	r5, #0
   12d58:	bne	12c04 <__assert_fail@plt+0x1d38>
   12d5c:	b	12cd0 <__assert_fail@plt+0x1e04>
   12d60:	ldr	r1, [pc, #736]	; 13048 <__assert_fail@plt+0x217c>
   12d64:	ldr	r0, [fp, #-124]	; 0xffffff84
   12d68:	bl	10e24 <creat@plt>
   12d6c:	subs	r5, r0, #0
   12d70:	blt	12fa8 <__assert_fail@plt+0x20dc>
   12d74:	mov	r2, #12
   12d78:	sub	r1, fp, #52	; 0x34
   12d7c:	bl	10e54 <write@plt>
   12d80:	ldr	r8, [fp, #-116]	; 0xffffff8c
   12d84:	mov	r1, r4
   12d88:	mov	r2, r8
   12d8c:	mov	r0, r5
   12d90:	bl	10e54 <write@plt>
   12d94:	mov	r2, r8
   12d98:	ldr	r1, [fp, #-112]	; 0xffffff90
   12d9c:	mov	r0, r5
   12da0:	bl	10e54 <write@plt>
   12da4:	mov	r2, r7
   12da8:	mov	r1, r6
   12dac:	mov	r0, r5
   12db0:	bl	10e54 <write@plt>
   12db4:	cmp	r5, #1
   12db8:	beq	12bcc <__assert_fail@plt+0x1d00>
   12dbc:	mov	r0, r5
   12dc0:	bl	10ec0 <close@plt>
   12dc4:	b	12bcc <__assert_fail@plt+0x1d00>
   12dc8:	ldrb	r2, [fp, #-56]	; 0xffffffc8
   12dcc:	orr	r2, r2, #2
   12dd0:	strb	r2, [fp, #-56]	; 0xffffffc8
   12dd4:	b	12b08 <__assert_fail@plt+0x1c3c>
   12dd8:	mov	r2, r4
   12ddc:	mov	r1, r4
   12de0:	ldr	r0, [fp, #-124]	; 0xffffff84
   12de4:	bl	10e9c <__open_catalog@plt>
   12de8:	cmp	r0, #0
   12dec:	bne	12f24 <__assert_fail@plt+0x2058>
   12df0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12df4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12df8:	mul	r1, r3, r2
   12dfc:	cmp	r1, #0
   12e00:	beq	12898 <__assert_fail@plt+0x19cc>
   12e04:	ldr	r1, [fp, #-84]	; 0xffffffac
   12e08:	mov	r5, r0
   12e0c:	mov	r8, r0
   12e10:	mov	sl, r0
   12e14:	mvn	r0, #0
   12e18:	str	r0, [fp, #-104]	; 0xffffff98
   12e1c:	ldr	r9, [fp, #-120]	; 0xffffff88
   12e20:	mov	r0, r2
   12e24:	mov	ip, r1
   12e28:	b	12e3c <__assert_fail@plt+0x1f70>
   12e2c:	mul	r2, r0, r3
   12e30:	add	r8, r8, #1
   12e34:	cmp	r8, r2
   12e38:	bcs	12898 <__assert_fail@plt+0x19cc>
   12e3c:	add	r6, r8, r8, lsl #1
   12e40:	ldr	r1, [ip, r6, lsl #2]
   12e44:	lsl	r6, r6, #2
   12e48:	cmp	r1, #0
   12e4c:	beq	12e2c <__assert_fail@plt+0x1f60>
   12e50:	ldr	r2, [fp, #-104]	; 0xffffff98
   12e54:	sub	r3, r1, #1
   12e58:	cmp	r3, r2
   12e5c:	beq	12e74 <__assert_fail@plt+0x1fa8>
   12e60:	mov	r1, r3
   12e64:	mov	r0, r9
   12e68:	str	r3, [fp, #-104]	; 0xffffff98
   12e6c:	bl	113dc <__assert_fail@plt+0x510>
   12e70:	mov	r5, r0
   12e74:	ldr	r4, [r5, #8]
   12e78:	add	r1, r6, #4
   12e7c:	cmp	r4, #0
   12e80:	beq	12fa0 <__assert_fail@plt+0x20d4>
   12e84:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e88:	ldr	r3, [r4]
   12e8c:	ldr	r0, [ip, r1]
   12e90:	cmp	r0, r3
   12e94:	bhi	12eac <__assert_fail@plt+0x1fe0>
   12e98:	b	13004 <__assert_fail@plt+0x2138>
   12e9c:	ldr	r2, [r3]
   12ea0:	cmp	r2, r0
   12ea4:	bcs	12f54 <__assert_fail@plt+0x2088>
   12ea8:	mov	r4, r3
   12eac:	ldr	r3, [r4, #20]
   12eb0:	cmp	r3, #0
   12eb4:	bne	12e9c <__assert_fail@plt+0x1fd0>
   12eb8:	mov	r7, r4
   12ebc:	mov	r4, r3
   12ec0:	mov	r0, #24
   12ec4:	str	r1, [fp, #-112]	; 0xffffff90
   12ec8:	bl	130ac <__assert_fail@plt+0x21e0>
   12ecc:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ed0:	ldr	r1, [fp, #-112]	; 0xffffff90
   12ed4:	add	r6, ip, r6
   12ed8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12edc:	ldr	r1, [ip, r1]
   12ee0:	cmp	r7, #0
   12ee4:	str	r1, [r0]
   12ee8:	ldr	r1, [r6, #8]
   12eec:	str	sl, [r0, #8]
   12ef0:	add	r3, r3, r1
   12ef4:	str	r3, [r0, #4]
   12ef8:	ldr	r3, [r9, #8]
   12efc:	str	sl, [r0, #12]
   12f00:	add	r3, r3, #1
   12f04:	str	sl, [r0, #16]
   12f08:	str	r4, [r0, #20]
   12f0c:	streq	r0, [r5, #8]
   12f10:	strne	r0, [r7, #20]
   12f14:	str	r3, [r9, #8]
   12f18:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12f1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f20:	b	12e2c <__assert_fail@plt+0x1f60>
   12f24:	bl	10e30 <__errno_location@plt>
   12f28:	ldr	r5, [r0]
   12f2c:	cmp	r5, #2
   12f30:	beq	12898 <__assert_fail@plt+0x19cc>
   12f34:	mov	r2, #5
   12f38:	ldr	r1, [pc, #268]	; 1304c <__assert_fail@plt+0x2180>
   12f3c:	mov	r0, r4
   12f40:	bl	10d64 <dcgettext@plt>
   12f44:	mov	r1, r5
   12f48:	mov	r2, r0
   12f4c:	mov	r0, #1
   12f50:	bl	10dac <error@plt>
   12f54:	mov	r7, r4
   12f58:	mov	r4, r3
   12f5c:	ldr	r3, [r4]
   12f60:	cmp	r3, r0
   12f64:	bhi	12ec0 <__assert_fail@plt+0x1ff4>
   12f68:	ldr	r3, [r4, #4]
   12f6c:	ldrb	r3, [r3]
   12f70:	cmp	r3, #0
   12f74:	bne	12f94 <__assert_fail@plt+0x20c8>
   12f78:	cmp	r7, #0
   12f7c:	ldr	r1, [r4, #20]
   12f80:	ldrne	r0, [fp, #-88]	; 0xffffffa8
   12f84:	ldrne	r3, [fp, #-92]	; 0xffffffa4
   12f88:	strne	r1, [r7, #20]
   12f8c:	bne	12e2c <__assert_fail@plt+0x1f60>
   12f90:	str	r1, [r5, #8]
   12f94:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12f98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f9c:	b	12e2c <__assert_fail@plt+0x1f60>
   12fa0:	mov	r7, r4
   12fa4:	b	12ec0 <__assert_fail@plt+0x1ff4>
   12fa8:	bl	10e30 <__errno_location@plt>
   12fac:	mov	r2, #5
   12fb0:	ldr	r1, [pc, #152]	; 13050 <__assert_fail@plt+0x2184>
   12fb4:	ldr	r4, [r0]
   12fb8:	mov	r0, #0
   12fbc:	bl	10d64 <dcgettext@plt>
   12fc0:	ldr	r3, [fp, #-124]	; 0xffffff84
   12fc4:	mov	r1, r4
   12fc8:	mov	r2, r0
   12fcc:	mov	r0, #1
   12fd0:	bl	10dac <error@plt>
   12fd4:	bl	10d70 <__stack_chk_fail@plt>
   12fd8:	bl	10e30 <__errno_location@plt>
   12fdc:	mov	r2, #5
   12fe0:	ldr	r1, [pc, #104]	; 13050 <__assert_fail@plt+0x2184>
   12fe4:	ldr	r4, [r0]
   12fe8:	mov	r0, r6
   12fec:	bl	10d64 <dcgettext@plt>
   12ff0:	ldr	r3, [fp, #-128]	; 0xffffff80
   12ff4:	mov	r1, r4
   12ff8:	mov	r2, r0
   12ffc:	mov	r0, #1
   13000:	bl	10dac <error@plt>
   13004:	mov	r7, #0
   13008:	b	12f5c <__assert_fail@plt+0x2090>
   1300c:	andeq	r4, r2, r8, lsl #2
   13010:	strdeq	r3, [r2], -r8
   13014:	stclgt	12, cr12, [ip], {205}	; 0xcd
   13018:			; <UNDEFINED> instruction: 0x960408de
   1301c:	andeq	r0, r1, r4, lsr sp
   13020:			; <UNDEFINED> instruction: 0x00010db8
   13024:	ldrdeq	r3, [r1], -ip
   13028:	andeq	r3, r1, r8, lsr #16
   1302c:	strdeq	r4, [r2], -r8
   13030:	andeq	r3, r1, r4, ror #10
   13034:	andeq	r3, r1, r8, asr r8
   13038:	andeq	r3, r1, r8, lsr #17
   1303c:	andeq	r3, r1, ip, ror r8
   13040:	andeq	r3, r1, r4, lsr #19
   13044:	andeq	r3, r1, r4, asr r8
   13048:			; <UNDEFINED> instruction: 0x000001b6
   1304c:	andeq	r3, r1, r8, lsl #16
   13050:	andeq	r3, r1, r4, lsr r8
   13054:	cmp	r0, #0
   13058:	push	{r4, lr}
   1305c:	bne	13070 <__assert_fail@plt+0x21a4>
   13060:	mov	r0, #1
   13064:	bl	10db8 <malloc@plt>
   13068:	cmp	r0, #0
   1306c:	popne	{r4, pc}
   13070:	ldr	r3, [pc, #40]	; 130a0 <__assert_fail@plt+0x21d4>
   13074:	mov	r2, #5
   13078:	ldr	r1, [pc, #36]	; 130a4 <__assert_fail@plt+0x21d8>
   1307c:	ldr	r0, [pc, #36]	; 130a8 <__assert_fail@plt+0x21dc>
   13080:	ldr	r4, [r3]
   13084:	bl	10d28 <__dcgettext@plt>
   13088:	mov	r1, #0
   1308c:	mov	r2, r0
   13090:	mov	r0, r4
   13094:	bl	10dac <error@plt>
   13098:	mov	r0, #0
   1309c:	pop	{r4, pc}
   130a0:	andeq	r4, r2, r8, ror #1
   130a4:	andeq	r3, r1, ip, asr #20
   130a8:	andeq	r3, r2, r0, lsl #30
   130ac:	push	{r4, lr}
   130b0:	mov	r4, r0
   130b4:	bl	10db8 <malloc@plt>
   130b8:	cmp	r0, #0
   130bc:	popne	{r4, pc}
   130c0:	mov	r0, r4
   130c4:	pop	{r4, lr}
   130c8:	b	13054 <__assert_fail@plt+0x2188>
   130cc:	push	{r4, lr}
   130d0:	mov	r4, r0
   130d4:	bl	10cc8 <calloc@plt>
   130d8:	cmp	r0, #0
   130dc:	popne	{r4, pc}
   130e0:	mov	r0, r4
   130e4:	pop	{r4, lr}
   130e8:	b	13054 <__assert_fail@plt+0x2188>
   130ec:	cmp	r0, #0
   130f0:	push	{r4, lr}
   130f4:	mov	r4, r1
   130f8:	beq	13114 <__assert_fail@plt+0x2248>
   130fc:	bl	10d94 <realloc@plt>
   13100:	cmp	r0, #0
   13104:	popne	{r4, pc}
   13108:	mov	r0, r4
   1310c:	pop	{r4, lr}
   13110:	b	13054 <__assert_fail@plt+0x2188>
   13114:	mov	r0, r1
   13118:	pop	{r4, lr}
   1311c:	b	130ac <__assert_fail@plt+0x21e0>
   13120:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13124:	mov	r7, r0
   13128:	ldr	r6, [pc, #72]	; 13178 <__assert_fail@plt+0x22ac>
   1312c:	ldr	r5, [pc, #72]	; 1317c <__assert_fail@plt+0x22b0>
   13130:	add	r6, pc, r6
   13134:	add	r5, pc, r5
   13138:	sub	r6, r6, r5
   1313c:	mov	r8, r1
   13140:	mov	r9, r2
   13144:	bl	10ca8 <calloc@plt-0x20>
   13148:	asrs	r6, r6, #2
   1314c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13150:	mov	r4, #0
   13154:	add	r4, r4, #1
   13158:	ldr	r3, [r5], #4
   1315c:	mov	r2, r9
   13160:	mov	r1, r8
   13164:	mov	r0, r7
   13168:	blx	r3
   1316c:	cmp	r6, r4
   13170:	bne	13154 <__assert_fail@plt+0x2288>
   13174:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13178:			; <UNDEFINED> instruction: 0x00010dbc
   1317c:			; <UNDEFINED> instruction: 0x00010db4
   13180:	bx	lr
   13184:	subs	r2, r1, #1
   13188:	bxeq	lr
   1318c:	bcc	13364 <__assert_fail@plt+0x2498>
   13190:	cmp	r0, r1
   13194:	bls	13348 <__assert_fail@plt+0x247c>
   13198:	tst	r1, r2
   1319c:	beq	13354 <__assert_fail@plt+0x2488>
   131a0:	clz	r3, r0
   131a4:	clz	r2, r1
   131a8:	sub	r3, r2, r3
   131ac:	rsbs	r3, r3, #31
   131b0:	addne	r3, r3, r3, lsl #1
   131b4:	mov	r2, #0
   131b8:	addne	pc, pc, r3, lsl #2
   131bc:	nop			; (mov r0, r0)
   131c0:	cmp	r0, r1, lsl #31
   131c4:	adc	r2, r2, r2
   131c8:	subcs	r0, r0, r1, lsl #31
   131cc:	cmp	r0, r1, lsl #30
   131d0:	adc	r2, r2, r2
   131d4:	subcs	r0, r0, r1, lsl #30
   131d8:	cmp	r0, r1, lsl #29
   131dc:	adc	r2, r2, r2
   131e0:	subcs	r0, r0, r1, lsl #29
   131e4:	cmp	r0, r1, lsl #28
   131e8:	adc	r2, r2, r2
   131ec:	subcs	r0, r0, r1, lsl #28
   131f0:	cmp	r0, r1, lsl #27
   131f4:	adc	r2, r2, r2
   131f8:	subcs	r0, r0, r1, lsl #27
   131fc:	cmp	r0, r1, lsl #26
   13200:	adc	r2, r2, r2
   13204:	subcs	r0, r0, r1, lsl #26
   13208:	cmp	r0, r1, lsl #25
   1320c:	adc	r2, r2, r2
   13210:	subcs	r0, r0, r1, lsl #25
   13214:	cmp	r0, r1, lsl #24
   13218:	adc	r2, r2, r2
   1321c:	subcs	r0, r0, r1, lsl #24
   13220:	cmp	r0, r1, lsl #23
   13224:	adc	r2, r2, r2
   13228:	subcs	r0, r0, r1, lsl #23
   1322c:	cmp	r0, r1, lsl #22
   13230:	adc	r2, r2, r2
   13234:	subcs	r0, r0, r1, lsl #22
   13238:	cmp	r0, r1, lsl #21
   1323c:	adc	r2, r2, r2
   13240:	subcs	r0, r0, r1, lsl #21
   13244:	cmp	r0, r1, lsl #20
   13248:	adc	r2, r2, r2
   1324c:	subcs	r0, r0, r1, lsl #20
   13250:	cmp	r0, r1, lsl #19
   13254:	adc	r2, r2, r2
   13258:	subcs	r0, r0, r1, lsl #19
   1325c:	cmp	r0, r1, lsl #18
   13260:	adc	r2, r2, r2
   13264:	subcs	r0, r0, r1, lsl #18
   13268:	cmp	r0, r1, lsl #17
   1326c:	adc	r2, r2, r2
   13270:	subcs	r0, r0, r1, lsl #17
   13274:	cmp	r0, r1, lsl #16
   13278:	adc	r2, r2, r2
   1327c:	subcs	r0, r0, r1, lsl #16
   13280:	cmp	r0, r1, lsl #15
   13284:	adc	r2, r2, r2
   13288:	subcs	r0, r0, r1, lsl #15
   1328c:	cmp	r0, r1, lsl #14
   13290:	adc	r2, r2, r2
   13294:	subcs	r0, r0, r1, lsl #14
   13298:	cmp	r0, r1, lsl #13
   1329c:	adc	r2, r2, r2
   132a0:	subcs	r0, r0, r1, lsl #13
   132a4:	cmp	r0, r1, lsl #12
   132a8:	adc	r2, r2, r2
   132ac:	subcs	r0, r0, r1, lsl #12
   132b0:	cmp	r0, r1, lsl #11
   132b4:	adc	r2, r2, r2
   132b8:	subcs	r0, r0, r1, lsl #11
   132bc:	cmp	r0, r1, lsl #10
   132c0:	adc	r2, r2, r2
   132c4:	subcs	r0, r0, r1, lsl #10
   132c8:	cmp	r0, r1, lsl #9
   132cc:	adc	r2, r2, r2
   132d0:	subcs	r0, r0, r1, lsl #9
   132d4:	cmp	r0, r1, lsl #8
   132d8:	adc	r2, r2, r2
   132dc:	subcs	r0, r0, r1, lsl #8
   132e0:	cmp	r0, r1, lsl #7
   132e4:	adc	r2, r2, r2
   132e8:	subcs	r0, r0, r1, lsl #7
   132ec:	cmp	r0, r1, lsl #6
   132f0:	adc	r2, r2, r2
   132f4:	subcs	r0, r0, r1, lsl #6
   132f8:	cmp	r0, r1, lsl #5
   132fc:	adc	r2, r2, r2
   13300:	subcs	r0, r0, r1, lsl #5
   13304:	cmp	r0, r1, lsl #4
   13308:	adc	r2, r2, r2
   1330c:	subcs	r0, r0, r1, lsl #4
   13310:	cmp	r0, r1, lsl #3
   13314:	adc	r2, r2, r2
   13318:	subcs	r0, r0, r1, lsl #3
   1331c:	cmp	r0, r1, lsl #2
   13320:	adc	r2, r2, r2
   13324:	subcs	r0, r0, r1, lsl #2
   13328:	cmp	r0, r1, lsl #1
   1332c:	adc	r2, r2, r2
   13330:	subcs	r0, r0, r1, lsl #1
   13334:	cmp	r0, r1
   13338:	adc	r2, r2, r2
   1333c:	subcs	r0, r0, r1
   13340:	mov	r0, r2
   13344:	bx	lr
   13348:	moveq	r0, #1
   1334c:	movne	r0, #0
   13350:	bx	lr
   13354:	clz	r2, r1
   13358:	rsb	r2, r2, #31
   1335c:	lsr	r0, r0, r2
   13360:	bx	lr
   13364:	cmp	r0, #0
   13368:	mvnne	r0, #0
   1336c:	b	13390 <__assert_fail@plt+0x24c4>
   13370:	cmp	r1, #0
   13374:	beq	13364 <__assert_fail@plt+0x2498>
   13378:	push	{r0, r1, lr}
   1337c:	bl	13184 <__assert_fail@plt+0x22b8>
   13380:	pop	{r1, r2, lr}
   13384:	mul	r3, r2, r0
   13388:	sub	r1, r1, r3
   1338c:	bx	lr
   13390:	push	{r1, lr}
   13394:	mov	r0, #8
   13398:	bl	10cd4 <raise@plt>
   1339c:	pop	{r1, pc}

Disassembly of section .fini:

000133a0 <.fini>:
   133a0:	push	{r3, lr}
   133a4:	pop	{r3, pc}
